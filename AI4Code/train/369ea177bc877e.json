{"cell_type":{"3cd49467":"code","d0b882b4":"code","a6ebeb50":"code","4c3138e0":"code","2611bf2e":"code","dcc1024f":"code","d0e939dc":"code","3625aae7":"code","ea213ae3":"code","fc6bdee3":"code","3f94c68e":"code","1ab7c64d":"code","eba630d0":"code","99754831":"code","6eaf3c42":"code","cf43fa6c":"code","4a6aa06e":"code","15b29654":"markdown","511efd33":"markdown","43254549":"markdown","1b893e00":"markdown","249b6f95":"markdown","c18111bb":"markdown","f70b8689":"markdown","bb19286e":"markdown","68e4ba02":"markdown","156fb022":"markdown","d7fa4081":"markdown","3311f19a":"markdown"},"source":{"3cd49467":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d0b882b4":"import matplotlib.pyplot as plt\nimport seaborn as sns","a6ebeb50":"train_identity = pd.read_csv('..\/input\/train_identity.csv')\ntrain_transaction = pd.read_csv('..\/input\/train_transaction.csv')\ntest_identity = pd.read_csv('..\/input\/test_identity.csv')\ntest_transaction = pd.read_csv('..\/input\/test_transaction.csv')","4c3138e0":"train_identity.head()","2611bf2e":"test_transaction['isFraud'] = 2","dcc1024f":"transaction = pd.concat([train_transaction,test_transaction],axis=0)\nprint (transaction.shape)","d0e939dc":"def eda_object(df,feature):\n    a = len(df[feature].unique())\n    plt.figure(figsize = [20,min(max(8,a),12)])\n\n    plt.subplot(1,3,1)\n    x_ = df.groupby([feature])[feature].count()\n    x_.plot(kind='pie')\n    plt.title(feature)\n\n    plt.subplot(1,3,2)\n    cross_tab = pd.crosstab(df['isFraud'],df[feature],normalize=0).reset_index()\n    x_ = cross_tab.melt(id_vars=['isFraud'])\n    x_['value'] = x_['value']*100\n\n    sns.barplot(x=feature,y='value',hue ='isFraud',data=x_,palette = ['b','r','g'],alpha =0.7)\n    plt.xticks(rotation='vertical')\n    plt.title(feature + \" - Normalized by isFraud\")\n\n    plt.subplot(1,3,3)\n    cross_tab = pd.crosstab(df[feature],df['isFraud'],normalize=1).reset_index()\n    cross_tab['Difference'] = cross_tab[0] - cross_tab[1]\n    cross_tab['Difference'] = cross_tab['Difference']*100\n\n    sns.barplot(x=feature,y='Difference',data=cross_tab,alpha =0.7)\n    plt.ylim(-100,100)\n    plt.xticks(rotation='vertical')\n    plt.title(feature + \" - Difference\")\n\n    plt.tight_layout()\n    plt.legend()\n    plt.show()\n       ","3625aae7":"rm_list = ['TransactionID','TransactionDT','isFraud']\ntype_list = ['object']\nfeature_list = []\n\nfor feature in transaction.columns:\n    if (feature not in rm_list) & (transaction[feature].dtypes in type_list):\n        feature_list.append(feature)\nfor feature in feature_list[:10]:\n    eda_object(transaction,feature)","ea213ae3":"def eda_numeric(df,feature):\n    x_ = df[feature]+0.01\n    y_ = df['isFraud']\n    data = pd.concat([x_,y_],1)\n    plt.figure(figsize=[20,5])\n\n    ax1 = plt.subplot(1,2,1)\n    sns.boxplot(x='isFraud',y=feature,data=data)\n    plt.title(feature+ \" - Boxplot\")\n    upper_0 = data[data['isFraud']==0][feature].quantile(q=0.80)\n    upper_1 = data[data['isFraud']==1][feature].quantile(q=0.80)\n    lower_0 = data[data['isFraud']==0][feature].quantile(q=0.20)\n    lower_1 = data[data['isFraud']==1][feature].quantile(q=0.20)\n\n    ax1.set(ylim=(min(lower_0,lower_1),max(upper_0,upper_1)))\n\n    ax2 = plt.subplot(1,2,2)\n    plt.title(feature+ \" - Density with Log\")\n\n    p1=sns.kdeplot(data[data['isFraud']==0][feature].apply(np.log), color=\"b\",legend=False)\n    p2=sns.kdeplot(data[data['isFraud']==1][feature].apply(np.log), color=\"r\",legend=False)\n    p3=sns.kdeplot(data[data['isFraud']==2][feature].apply(np.log), color=\"g\",shade = True,linestyle = '--',alpha =0.3,legend=False)\n    plt.legend(loc='upper right', labels=['0', '1', '2'])\n\n    plt.tight_layout()\n    plt.show()","fc6bdee3":"rm_list = ['TransactionID','TransactionDT','isFraud']\ntype_list = ['int64','float']\nfeature_list = []\n\nfor feature in transaction.columns:\n    if (feature not in rm_list) & (transaction[feature].dtypes in type_list) & (len(transaction[feature].unique()) > 10):\n\n        feature_list.append(feature)\nfor feature in feature_list[:10]:\n    eda_numeric(transaction,feature)","3f94c68e":"isFraud_trans_id_0 = transaction[transaction['isFraud'] == 0]['TransactionID']\nisFraud_trans_id_1 = transaction[transaction['isFraud'] == 1]['TransactionID']\nisFraud_trans_id_2 = transaction[transaction['isFraud'] == 2]['TransactionID']","1ab7c64d":"identity = pd.concat([train_identity,test_identity],axis = 0)\nidentity['isFraud'] = np.where(identity.TransactionID.isin(isFraud_trans_id_0),0,\n                               np.where(identity.TransactionID.isin(isFraud_trans_id_1),1,2))","eba630d0":"rm_list = ['TransactionID','TransactionDT','isFraud']\ntype_list = ['object']\nfeature_list = []\n\nfor feature in identity.columns:\n    if (feature not in rm_list) & (identity[feature].dtypes in type_list):\n        feature_list.append(feature)\nfor feature in feature_list[:10]:\n    eda_object(identity,feature)","99754831":"rm_list = ['TransactionID','TransactionDT','isFraud']\ntype_list = ['int64','float']\nfeature_list = []\n\nfor feature in identity.columns:\n    if (feature not in rm_list) & (identity[feature].dtypes in type_list) & (len(identity[feature].unique()) > 10):\n\n        feature_list.append(feature)\nfor feature in feature_list[:10]:\n    eda_numeric(identity,feature)","6eaf3c42":"transaction_identity = transaction[['TransactionID','isFraud']]\ntransaction_identity = transaction_identity.merge(identity,on='TransactionID',how='left')","cf43fa6c":"rm_list = ['TransactionID','TransactionDT','isFraud']\ntype_list = ['object']\nfeature_list = []\n\nfor feature in identity.columns:\n    if (feature not in rm_list) & (identity[feature].dtypes in type_list):\n        feature_list.append(feature)\nfor feature in feature_list[:10]:\n    eda_object(identity,feature)","4a6aa06e":"rm_list = ['TransactionID','TransactionDT','isFraud']\ntype_list = ['int64','float']\nfeature_list = []\n\nfor feature in identity.columns:\n    if (feature not in rm_list) & (identity[feature].dtypes in type_list) & (len(identity[feature].unique()) > 10):\n\n        feature_list.append(feature)\nfor feature in feature_list[:10]:\n    eda_numeric(identity,feature)","15b29654":"# EDA Transaction Dataset","511efd33":"It's kinda messy now, don't worry it helps us to have a general overview about the distributions according Fraud\/not Fraud types, I will have a compact version soon","43254549":"I will break down into 2 types: Distributions of identity by PEOPLE and Distribution of identity by TRANSACTION","1b893e00":"To save space, I just draw 10 available features","249b6f95":"Add isFraud value to test data, value 2 means 'unknown'","c18111bb":"# EDA Identity Dataset","f70b8689":"# Foreword:\nThis is a really lazy but effective and easy-to-understand method to see how features affect targeted labels' distributions. It's also widely applicable to other competitions \/ real-life problems","bb19286e":"To save space, I just draw 10 available features","68e4ba02":"## For Numeric features with more than 10 unique values, I use boxplot and density plot to see the distribution","156fb022":"## For Object features, I use barplot to see the distribution","d7fa4081":"### By PEOPLE","3311f19a":"### BY TRANSACTION"}}