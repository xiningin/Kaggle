{"cell_type":{"9a287b57":"code","fdd88a20":"code","fb03037c":"code","d726da60":"code","dcd59a48":"code","318ef199":"code","b1443204":"code","41cf080e":"code","b496a985":"code","15b5d1ca":"code","89f5a384":"code","b6ee2802":"code","83b3bbca":"code","a67fdd11":"code","fc72247f":"code","4ad991a5":"code","ac8af2de":"code","a69f7c8a":"code","ad702c30":"code","7e35657f":"code","698a49a7":"code","9820f9e0":"code","2d780267":"code","75041b36":"code","85e111ca":"code","c72dfcde":"code","fc43c4e3":"code","2bbc9ea0":"code","511beedd":"code","4bcf1d9e":"code","bd0f38fa":"code","6c3accae":"code","d31257b1":"code","433ef21e":"code","30d7a0b4":"code","9c43837d":"code","a61697f7":"code","9d63a053":"code","310d281e":"code","5f8ca44e":"code","f9f9a41a":"code","cb7d12b7":"code","51ef53c2":"code","d82d0b87":"code","3afa21f7":"code","24df7395":"code","8498e6c2":"code","ff00a34f":"code","99760bf9":"code","133ca7cc":"code","f84d8ec7":"code","262a7458":"code","22fefbf9":"code","0c52176e":"code","731b6c2d":"code","4c9669c1":"code","58805190":"code","051a53b5":"code","3c89c233":"code","d8d4d98c":"code","7a0a6bf2":"markdown","5ce892dd":"markdown","7d6446bf":"markdown","53dbfc71":"markdown","2c021421":"markdown","e16480f5":"markdown","7b6796b1":"markdown","bce65dca":"markdown","a9ea06cb":"markdown","b03ac709":"markdown","6b14e83b":"markdown","951ee7c8":"markdown","3588a6cc":"markdown","1d2c7571":"markdown"},"source":{"9a287b57":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdd88a20":"#import required library\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","fb03037c":"#read dataset\n\ndf = pd.read_csv(\"..\/input\/travel-insurance-prediction-data\/TravelInsurancePrediction.csv\",index_col=0)","d726da60":"df","dcd59a48":"df.info() # no null data","318ef199":"sns.set_style('darkgrid')\nsns.countplot(data=df,x='TravelInsurance')\nplt.show()\n\n#more no-buys than buys","b1443204":"#Age EDA\nsns.displot(df['Age'])\nplt.show()","41cf080e":"df['Age'].unique()\n\n#only a handful of unique ages\n#most are 28 years old","b496a985":"#breakdown of purchase by age\nfig, ax = plt.subplots(figsize=(8,8))\nsns.countplot(hue='Age',x='TravelInsurance',data=df)\nplt.show()\n\n#does not show clear trend, let's have a look at percentage instead","15b5d1ca":"#percentage of purchase by age\nfig, ax = plt.subplots(figsize=(8,8))\n(df.groupby('Age').sum()['TravelInsurance']\/df.groupby('Age').count()['TravelInsurance']).plot(kind='bar') #sum = all 1s added togeter \/ by count which is all counts of that age\nplt.title('% of Insurance purchased breakdown by age')\nplt.ylabel('Percentage')\nplt.show()\n#25 years old highest purchase %\n#26, 34 50% half half\n#from 27-32, % are lowest of all ages","89f5a384":"df['Employment Type'].unique()\n\n#either Government Sector or Private Sector\/Self Employed","b6ee2802":"sns.displot(df['Employment Type'])\nplt.show()\n\n#skewed towards private sector\/self employed","83b3bbca":"#breakdown of purchase by age\nfig, ax = plt.subplots(figsize=(8,8))\nsns.countplot(hue='Employment Type',x='TravelInsurance',data=df)\nplt.show()\n\n#does not show clear trend, let's have a look at percentage instead","a67fdd11":"#percentage of purchase by profession\nfig, ax = plt.subplots(figsize=(8,8))\n(df.groupby('Employment Type').sum()['TravelInsurance']\/df.groupby('Employment Type').count()['TravelInsurance']).plot(kind='bar') #sum = all 1s added togeter \/ by count which is all counts of that age\nplt.title('% of Insurance purchased breakdown by profession')\nplt.ylabel('Percentage')\nplt.xticks(rotation=360)\nplt.show()\n\n#seems to be the case that private sector has a higher likelihood to buy insurance\n#makes sense since government employees probably enjoy more benefits","fc72247f":"fig,ax=plt.subplots(figsize=(8,8))\nsns.countplot(data=df,x='GraduateOrNot')\nplt.show()\n\n#vast majority graduated","4ad991a5":"fig,ax=plt.subplots(figsize=(8,8))\nsns.countplot(data=df,x='GraduateOrNot',hue='TravelInsurance')\nplt.show()","ac8af2de":"fig, ax = plt.subplots(figsize=(8,8))\n(df.groupby('GraduateOrNot').sum()['TravelInsurance']\/df.groupby('GraduateOrNot').count()['TravelInsurance']).plot(kind='bar') #sum = all 1s added togeter \/ by count which is all counts of that age\nplt.title('% of Insurance purchased breakdown by education')\nplt.ylabel('Percentage')\nplt.xticks(rotation=360)\nplt.show()\n\n#does not seem to have vast contrast as to whether education affect insurance purchase or not","a69f7c8a":"sns.displot(df['AnnualIncome'])\nplt.title('Income Count')\nplt.show()","ad702c30":"df['AnnualIncome'].describe()","7e35657f":"fig,ax=plt.subplots(figsize=(12,12))\nsns.boxplot(x='Age',y='AnnualIncome',data=df)\nplt.title('Boxplot of Age\/Annual Income')\nplt.show()\n\n#top earners seem to be 25 years old\n","698a49a7":"fig, ax = plt.subplots(figsize=(8,8))\n(df.groupby('AnnualIncome').sum()['TravelInsurance']\/df.groupby('AnnualIncome').count()['TravelInsurance']).plot(kind='bar') #sum = all 1s added togeter \/ by count which is all counts of that age\nplt.title('% of Insurance purchased breakdown by Annual Income')\nplt.ylabel('Percentage')\nplt.xticks(rotation=45)\nplt.show()\n\n#those with higher income has a higher likelihood of buying travel insurance","9820f9e0":"fig,ax=plt.subplots(figsize=(12,12))\nsns.boxplot(x='Age',y='AnnualIncome',hue='TravelInsurance',data=df)\nplt.title('Boxplot of Age\/Annual Income')\nplt.show()\n\n#it seems that within each age group, the higher income earners seem to want to purchase insurance","2d780267":"df['FamilyMembers'].unique()","75041b36":"fig, ax = plt.subplots(figsize=(8,8))\n(df.groupby('FamilyMembers').sum()['TravelInsurance']\/df.groupby('FamilyMembers').count()['TravelInsurance']).plot(kind='bar') #sum = all 1s added togeter \/ by count which is all counts of that age\nplt.title('% of Insurance purchased breakdown by Family Members')\nplt.ylabel('Percentage')\nplt.xticks(rotation=360)\nplt.show()","85e111ca":"fig,ax=plt.subplots(figsize=(12,12))\nsns.boxplot(x='FamilyMembers',y='AnnualIncome',hue='TravelInsurance',data=df)\nplt.show()","c72dfcde":"sns.countplot(data=df,x='ChronicDiseases')\nplt.title('Chronic Diseases Count')\nplt.show()\n\n#more people have chronic diseases than those who do not","fc43c4e3":"fig, ax = plt.subplots(figsize=(8,8))\n(df.groupby('ChronicDiseases').sum()['TravelInsurance']\/df.groupby('ChronicDiseases').count()['TravelInsurance']).plot(kind='bar') #sum = all 1s added togeter \/ by count which is all counts of that age\nplt.title('% of Insurance purchased breakdown by Chronic Illness')\nplt.ylabel('Percentage')\nplt.xticks(rotation=360)\nplt.show()","2bbc9ea0":"sns.countplot(data=df,x='FrequentFlyer')\n\n#more non-fequent flyer than frequent","511beedd":"fig, ax = plt.subplots(figsize=(8,8))\n(df.groupby('FrequentFlyer').sum()['TravelInsurance']\/df.groupby('FrequentFlyer').count()['TravelInsurance']).plot(kind='bar') #sum = all 1s added togeter \/ by count which is all counts of that age\nplt.title('% of Insurance purchased breakdown by Frequent Flyer')\nplt.ylabel('Percentage')\nplt.xticks(rotation=360)\nplt.show()","4bcf1d9e":"fig,ax=plt.subplots(figsize=(12,12))\nsns.boxplot(x='FrequentFlyer',y='AnnualIncome',hue='TravelInsurance',data=df)\nplt.show()\n\n#again, income seems to be the driving factor of purchase","bd0f38fa":"df['EverTravelledAbroad']","6c3accae":"sns.countplot(data=df,x='EverTravelledAbroad')\n#Many of whom have not travelled abroad","d31257b1":"fig, ax = plt.subplots(figsize=(8,8))\n(df.groupby('EverTravelledAbroad').sum()['TravelInsurance']\/df.groupby('EverTravelledAbroad').count()['TravelInsurance']).plot(kind='bar') #sum = all 1s added togeter \/ by count which is all counts of that age\nplt.title('% of Insurance purchased breakdown by Travel')\nplt.ylabel('Percentage')\nplt.xticks(rotation=360)\nplt.show()","433ef21e":"fig,ax=plt.subplots(figsize=(12,12))\nsns.boxplot(x='EverTravelledAbroad',y='AnnualIncome',hue='TravelInsurance',data=df)\nplt.show()","30d7a0b4":"#function for turning yes or no\n\ndef clean_string(x):\n    if x == 'Yes':\n        return 1\n    else:\n        return 0","9c43837d":"#function for profession\ndef employment(x):\n    if x == 'Government Sector':\n        return 1\n    else:\n        return 0","a61697f7":"df","9d63a053":"df_clean = df\ndf_clean['GraduateOrNot'] = df_clean['GraduateOrNot'].apply(clean_string)\ndf_clean['FrequentFlyer'] = df_clean['FrequentFlyer'].apply(clean_string)\ndf_clean['EverTravelledAbroad'] = df_clean['EverTravelledAbroad'].apply(clean_string)\ndf_clean['Employment Type'] = df_clean['Employment Type'].apply(employment)","310d281e":"df_clean","5f8ca44e":"df_knn_prep = df_clean.copy() #create a copy","f9f9a41a":"#import required library\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.neighbors import KNeighborsClassifier","cb7d12b7":"to_scale = ['AnnualIncome','Age','FamilyMembers']\nscaler = MinMaxScaler()","51ef53c2":"df_knn_prep[to_scale] = scaler.fit_transform(df_knn_prep[to_scale])","d82d0b87":"df_knn_prep\n#cleaned up ready for KNN","3afa21f7":"knn_model = KNeighborsClassifier(n_neighbors = 20)\n\n#define X\nknn_X = df_knn_prep[['Age','Employment Type','GraduateOrNot','AnnualIncome','FamilyMembers','ChronicDiseases','FrequentFlyer','EverTravelledAbroad']]\nknn_y = df_knn_prep['TravelInsurance']\n\n\nknn_model.fit(knn_X, knn_y) #using the whole dataset since this is not our final model, but a pseudo-probability \"Customer Score\"\ndf_clean['CustomerScore'] = knn_model.predict_proba(knn_X)[:,1]","24df7395":"#customer score added, which will be included in the model\nX = df_clean[['Age','Employment Type','GraduateOrNot','AnnualIncome','FamilyMembers','ChronicDiseases','FrequentFlyer','EverTravelledAbroad','CustomerScore']]\ny = df_clean['TravelInsurance']\ndf_clean","8498e6c2":"#import model and hyperparameter tuning\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score","ff00a34f":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.1,random_state=42)\n#split to validate best parameters later","99760bf9":"rfc = RandomForestClassifier()\n\nparam = {'n_estimators':[50], 'criterion':['gini'], 'max_depth':[25,20,15,10], 'min_samples_split':[2,5,10,15,20], }\n\ncv = GridSearchCV(estimator=rfc,param_grid=param, scoring = 'recall',n_jobs=-1,cv=5,verbose=5)\n","133ca7cc":"cv.fit(X_train, y_train)","f84d8ec7":"cv.best_params_","262a7458":"cv.best_score_ #recall","22fefbf9":"y_pred = cv.predict(X_test)","0c52176e":"print(confusion_matrix(y_test,y_pred))","731b6c2d":"accuracy_score(y_test,y_pred)","4c9669c1":"rfc = RandomForestClassifier(criterion='gini',\n max_depth = 25,\n min_samples_split = 2,\n n_estimators = 50)","58805190":"rfc.fit(X_train,y_train)","051a53b5":"y_pred_proba = rfc.predict_proba(X_test)[:,1]","3c89c233":"#function to get class based on probability\ndef get_y_pred(p, proba_pred):\n    y_pred = []\n    for i in range(0,len(proba_pred)):\n        if proba_pred[i] > p:\n            y_pred.append(1)\n        else:\n            y_pred.append(0)\n    return pd.Series(y_pred)","d8d4d98c":"prob = [0.1,0.15,0.2,0.25,0.3,0.35,0.4]\n\nfor p in prob:\n    y_pred = get_y_pred(p,y_pred_proba)\n    print(f'At P = {p}, Recall score = {recall_score(y_test,y_pred)}')\n    print(f'At P = {p}, Accuracy score = {accuracy_score(y_test,y_pred)}')\n    print(confusion_matrix(y_test,y_pred))\n    print('\\n')","7a0a6bf2":"## Feature Engineering\n\nUsing KNN first to give each record a \"Customer Score\".  *I read this idea from Practical Stats for Data Scientist, in which it talked about using KNN predict_prob as a way to assign a pseudo-probability*\n\nI would need to scale of age, annual income and family members before I add the KNN probability","5ce892dd":"## Employment type","7d6446bf":"## Annual Income","53dbfc71":"## Ever Travelled Abroad?","2c021421":"Depending on the aggressiveness of the company's sales practice, the P can be adjusted","e16480f5":"## Chronic Diseases","7b6796b1":"## Graduate or Not","bce65dca":"## Data Cleaning in preparation for model\n\nturning those who 'yes\/no' to 1\/0 - GraduateOrNot, FrequentFlyer, EverTravelledAbroad\n\nturning employment type into 1\/0 too - Governemnt Sector -> 1, Private Sector -> 0","a9ea06cb":"## Frequent Flyer","b03ac709":"## Trying different probability threshold\n\nThe above is our baseline results with the best parameteres, maybe we can use predict_proba and some function to output a class prediction according to some threshold to improve the recall","6b14e83b":"## Family Members","951ee7c8":"## Age EDA","3588a6cc":"## RandomForestClassifier and GridSearchCV\n\nIn my opinion, recall should be the important scoring criteria.  It is paramount that we capture those likely to buy Travel Insurance as best as we could since that would be lost revenue otherwise.","1d2c7571":"## Column Info\n\nAge: numerical\n\nEmployment type: categorical - *sector*\n\nGraduateOrNot: categorical (binary) - *college*\n\nAnnualIncome: numerical - *YearlyIncome of the customer* \n\nFamilyMembers: numerical - *Number Of Family Members Living With Customer*\n\nChronicDiseases: categorical(binary) - *Whether Customer Has Any Chronic Conditions*\n\nFrequentFlyer - categorical(binary) *Whether a customer books frequent air ticks*\n\nEverTravelledAbroad - categorical(binary)  *Has the customer ever travelled to a foreign country*"}}