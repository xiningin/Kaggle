{"cell_type":{"11abd119":"code","f1c3fa99":"code","6ade1638":"code","af0ec697":"code","ebdecbea":"code","e1fc5479":"code","fb1d470e":"code","477c843e":"code","0e9a840a":"code","5459c7d7":"code","2c9b8b35":"code","964be8e3":"code","423d5b0a":"code","800b66aa":"code","85da95cd":"code","e30cdd12":"code","b1a54ede":"code","d8538ca7":"code","92a2f11d":"code","04fcc404":"code","75c81898":"code","bdb2db92":"code","c8f0512c":"code","b19c2462":"code","00aa19e6":"code","64078b01":"code","c8eeae08":"code","bc2b827c":"code","6129f847":"code","16a1dac6":"code","3e70df06":"code","c25cd262":"code","9fc4f93f":"code","8cdb6f96":"code","4413f7c5":"code","44d5954f":"code","b583c79a":"code","4a351492":"code","ffba5ca0":"code","febae1fb":"code","7941ecd6":"code","a7c6394e":"code","4ec161d3":"code","849171a0":"code","9a615231":"code","f60a344f":"code","f6624a88":"code","2f7c4e8b":"code","0e6edcd8":"code","07594d5b":"code","27e53e11":"code","e02e4570":"code","23afc206":"code","20172cca":"code","987c3719":"code","3e79060d":"code","fe25caa0":"code","c2cafb20":"code","b0a3e422":"code","0492d637":"code","bb2488f3":"code","8530fcdf":"markdown","5e7852db":"markdown","e2d4a658":"markdown","15b035b3":"markdown","8c21e0fa":"markdown","008560cb":"markdown","37de27d7":"markdown","d28ba2fb":"markdown","5c88e619":"markdown","73192e26":"markdown","f4938feb":"markdown","6dbe3f77":"markdown","af00ec45":"markdown","5b2be736":"markdown","c5902e50":"markdown","8275c920":"markdown","7384abf2":"markdown","920e10bf":"markdown","57be4bee":"markdown","049d95ec":"markdown","d523b629":"markdown","b1b97273":"markdown","2ffb5c70":"markdown","bc3047da":"markdown","21db81f3":"markdown","e5a948db":"markdown","2ec4129b":"markdown","585efefc":"markdown","f8d31060":"markdown","1eced280":"markdown","703ad313":"markdown","eaab1c62":"markdown","7ecf0e30":"markdown","02d86b0e":"markdown","94899518":"markdown","b7a8c0b3":"markdown","1ceac21b":"markdown"},"source":{"11abd119":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n","f1c3fa99":"# Loading the DataSet\ndf = pd.read_csv('..\/input\/titanic\/train.csv')","6ade1638":"df.describe().transpose()","af0ec697":"pd.DataFrame(df.isnull().sum()\/df.shape[0]).rename(columns={0:'% Null Values'}).style.bar( color='#d65f5f')","ebdecbea":"df.head(2)","e1fc5479":"fig = plt.figure(1)\nplt.suptitle('Age and distribution of Passengers',fontsize=20)\n# set up subplot grid\ngridspec.GridSpec(2,2)\n\n# Small subplot\nplt.subplot2grid((2,2), (0,0), colspan=1, rowspan=1)\nplt.locator_params(axis='x', nbins=5)\nplt.locator_params(axis='y', nbins=5)\nplt.title('Age and Class')\nplt.xlabel('Age')\nplt.ylabel('Pclass')\nsns.boxplot(x=df.Pclass,y=df.Age,palette='Set2')\n\n#Small subplot\nplt.subplot2grid((2,2), (0,1), colspan=1, rowspan=1)\nplt.locator_params(axis='x', nbins=5)\nplt.locator_params(axis='y', nbins=5)\nplt.title('Age and sex')\nplt.xlabel('Age')\nplt.ylabel('Count of passengers')\nsns.histplot(x=df.Age,hue=df.Sex,palette='Set2')\n\n#Large Plot\nplt.subplot2grid((2,2), (1,0), colspan=2, rowspan=1)\nplt.locator_params(axis='x', nbins=5)\nplt.locator_params(axis='y', nbins=5)\nplt.title('Age and survivors')\nplt.xlabel('Age')\nplt.ylabel('Count of passengers')\nsns.histplot(x=df.Age,hue=df.Survived,palette='Set2')\n\n#Ajusting plot\nfig.set_size_inches(w=20,h=10)\nplt.subplots_adjust(hspace=.5)\nplt.show()\n","fb1d470e":"pd.DataFrame(data=[[df.Age.mean(),\n        df.loc[df.Survived==0,'Age'].mean(),\n        df.loc[df.Survived==1,'Age'].mean()],\n        [df.Age.min(),\n        df.loc[df.Survived==0,'Age'].min(),\n        df.loc[df.Survived==1,'Age'].min()],\n        [df.Age.max(),\n        df.loc[df.Survived==0,'Age'].max(),\n        df.loc[df.Survived==1,'Age'].max()]], index=['Mean Age','Min Age','Max Age'],\n             columns=['Global','Not Survivors','Survivors']).round(2)","477c843e":"plt.figure(figsize=(20,5))\nsns.scatterplot(x='Fare',y='Age',data=df,hue='Survived', style='Sex', alpha=.5, palette=\"Set2\", size='Sex',sizes=(100,100))\nplt.title('Age and Fare distribution between Survivors',size=20)","0e9a840a":"fig = px.parallel_categories(df.loc[:,['Survived','Sex','Pclass','Embarked']], color=\"Survived\", color_continuous_scale='armyrose_r',\n                            title='Parallel Categories',template=\"plotly_dark\")\nfig.show()","5459c7d7":"df['with_sib'] = df.SibSp.apply(lambda x: 'No' if x==0 else 'Yes')\ndf['with_par'] = df.Parch.apply(lambda x: 'No' if x==0 else 'Yes')","2c9b8b35":"fig = plt.figure(1)\nplt.suptitle('Family Analysis',fontsize=20)\n# set up subplot grid\ngridspec.GridSpec(2,2)\n\n# Small subplot\nplt.subplot2grid((2,2), (0,0), colspan=1, rowspan=1)\nplt.locator_params(axis='x', nbins=5)\nplt.locator_params(axis='y', nbins=5)\nplt.title('# of parents \/ children aboard the Titanic')\nplt.xlabel('#')\nplt.ylabel('count')\nsns.countplot(x=df.Parch,hue=df.Survived,palette='Set2')\n\nplt.subplot2grid((2,2), (0,1), colspan=1, rowspan=1)\nplt.locator_params(axis='x', nbins=5)\nplt.locator_params(axis='y', nbins=5)\nplt.title('# Was he\/she with parents\/children?')\nplt.xlabel('Parents\/Children on board')\nplt.ylabel('count')\nsns.histplot(x=df.with_par,hue=df.Survived,palette='Set2',stat=\"probability\", multiple=\"fill\")\n\n#Large Plot\nplt.subplot2grid((2,2), (1,0), colspan=1, rowspan=1)\nplt.locator_params(axis='x', nbins=5)\nplt.locator_params(axis='y', nbins=5)\nplt.title(' # of siblings \/ spouses aboard the Titanic')\nplt.xlabel('#')\nplt.ylabel('count')\nsns.countplot(x=df.SibSp,hue=df.Survived,palette='Set2')\n\nplt.subplot2grid((2,2), (1,1), colspan=1, rowspan=1)\nplt.locator_params(axis='x', nbins=5)\nplt.locator_params(axis='y', nbins=5)\nplt.title('# Was he\/she with Sibilings\/Spouses?')\nplt.xlabel('Sibilings\/Spouses on board')\nplt.ylabel('count')\nsns.histplot(x=df.with_sib,hue=df.Survived,palette='Set2', multiple=\"fill\",binwidth=0.1)\n\n#Ajusting plot\nfig.set_size_inches(w=20,h=10)\nplt.subplots_adjust(hspace=.5)\nplt.show()\n","964be8e3":"fig= plt.figure(1)\nplt.suptitle('How to fill the Age?',fontsize=30)\n# set up subplot grid\ngridspec.GridSpec(1,2)\n\n# 1 subplot\nplt.subplot2grid((1,2), (0,0), colspan=1, rowspan=1)\nplt.locator_params(axis='x', nbins=5)\nplt.locator_params(axis='y', nbins=5)\nplt.title('Correlation Matrix',size=20)\nsns.heatmap(df.corr(), annot=True, vmin=-1, vmax=1, cmap='vlag', linecolor='white',linewidths=1)\n\n# 2 subplot\nplt.subplot2grid((1,2), (0,1), colspan=1, rowspan=1)\nplt.locator_params(axis='x', nbins=5)\nplt.locator_params(axis='y', nbins=5)\nplt.title('Boxen Plot',size=20)\nplt.annotate(\"Mean Class 2= 29,8\", xy=(0.7,32))\nplt.annotate(\"Mean Class 1= 38.23\", xy=(0,40),xytext=(-0.3,40))\nplt.annotate(\"Mean Class 3= 25.14\", xy=(1.7,27))\nsns.boxenplot(x=df.Pclass,y=df.Age,palette='vlag')\nsns.stripplot(x=df.Pclass,y=df.Age,\n              size=2, color=\"grey\", linewidth=0)\n\n#Ajusting plot\nfig.set_size_inches(w=20,h=7)\nplt.subplots_adjust(hspace=.5)\nplt.show()\n","423d5b0a":"#df.loc[df.Pclass==1,['Age']] = df.loc[df.Pclass==1,['Age']].fillna(value=38.23)\n#df.loc[df.Pclass==2,['Age']] = df.loc[df.Pclass==2,['Age']].fillna(value=29.8)\n#df.loc[df.Pclass==3,['Age']] = df.loc[df.Pclass==3,['Age']].fillna(value=25.14)","800b66aa":"for x in range(1,4):\n    df.loc[df.Pclass==x,['Age']] = df.loc[df.Pclass==x,['Age']].fillna(value=df.loc[df.Pclass==x,['Age']].mean().round(1))","85da95cd":"pd.DataFrame(df.isnull().sum()\/df.shape[0]).rename(columns={0:'% Null Values'}).style.bar( color='#d65f5f')","e30cdd12":"plt.figure(figsize=(20,5))\n#sns.countplot(y=df.Embarked,palette='vlag')\n#plt.title('Embark port', size=20)\n\nsplot = sns.countplot(data=df, x = 'Embarked',palette='vlag')\nfor p in splot.patches:\n  splot.annotate(format(p.get_height(), '.0f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                 ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\nplt.title('Ports and Passengers', size=20)\nplt.ylim([0, 1000])","b1a54ede":"df.loc[:,['Embarked']] = df.loc[:,['Embarked']].fillna(value='S')","d8538ca7":"pd.DataFrame(df.isnull().sum()\/df.shape[0]).rename(columns={0:'% Null Values'}).style.bar( color='#d65f5f')","92a2f11d":"df = df.drop(axis=1,  columns='Cabin')","04fcc404":"pd.DataFrame(df.isnull().sum()\/df.shape[0]).rename(columns={0:'% Null Values'}).style.bar( color='#d65f5f')","75c81898":"df['Luck'] = df.Survived.apply(lambda x: 'Survivor' if x ==1 else 'Not Lucky')","bdb2db92":"df.loc[df.Sex=='female','Who'] = 'Women'","c8f0512c":"df.loc[df.Sex=='male','Who'] = 'Men'","b19c2462":"df.loc[df.Age<=16,'Who'] = 'Kid'","00aa19e6":"fig = px.sunburst(df, path=['Who','Pclass', 'Luck'],\n                  color='Luck',template='ggplot2',\n                  title=\"Lucky Passengers\",\n                  width=750, height=750, branchvalues='total')\nfig.update_traces(textinfo=\"label + percent parent\")\nfig.show()","64078b01":"plt.figure(figsize=(15,5))\n#sns.countplot(y=df.Embarked,palette='vlag')\n#plt.title('Embark port', size=20)\n\nsplot = sns.countplot(data=df, x = 'Survived',palette='vlag')\nfor p in splot.patches:\n  splot.annotate(format(p.get_height(), '.0f'), (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                 ha = 'center', va = 'center', xytext = (0, 10), textcoords = 'offset points')\nplt.title('Survivors in Train DF', size=20)\nplt.ylim([0, 1000])","c8eeae08":"df['Pclass'] = df.Pclass.astype('str')","bc2b827c":"X_train= df[['Pclass', 'Sex', 'Age', 'SibSp','Parch', 'Fare', 'Embarked']]\ny_train= df.Survived","6129f847":"from imblearn.over_sampling import RandomOverSampler\n\noversampler=RandomOverSampler(sampling_strategy='minority');\n\nX_train_os,y_train_os=oversampler.fit_resample(X_train,y_train);\n\nprint('training set:')\nprint(y_train_os.value_counts())\n","16a1dac6":"X_train_os = pd.get_dummies(X_train_os,drop_first=True)","3e70df06":"X_train_os.head(2)","c25cd262":"from sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier","9fc4f93f":"from sklearn.model_selection import cross_val_score, StratifiedKFold\ncv = StratifiedKFold(n_splits=5, random_state=41, shuffle=True)","8cdb6f96":"# we create a function to evaluate our model\ndef model_performance(model, name, X, y, cv):\n    s = cross_val_score(model, X, y, cv=cv, n_jobs=-1)\n    print(\"Performance of {}:\\t{:0.3} \u00b1 {:0.3}\".format( \\\n        name, s.mean().round(3), s.std().round(3)))","4413f7c5":"gb_os = GradientBoostingClassifier()\nmodel_performance(gb_os, \"GradientBoostingClassifier\", X_train_os, y_train_os, cv)","44d5954f":"from sklearn.model_selection import GridSearchCV\n","b583c79a":"params_gb_os = {'n_estimators':[500, 1000] , \n             'learning_rate':[0.001, 0.001, 0.1],\n            'max_depth' : [1, 2, 3, 4]}\n\ngrid_gb_os = GridSearchCV(gb_os, param_grid=params_gb_os, cv=cv, verbose=1, n_jobs=3)","4a351492":"grid_gb_os.fit(X_train_os, y_train_os)","ffba5ca0":"model_performance(grid_gb_os.best_estimator_, \"GradientBoostingClassifier\", X_train_os, y_train_os, cv)","febae1fb":"model_os = grid_gb_os.best_estimator_\nmodel_os","7941ecd6":"importances_os = model_os.feature_importances_","a7c6394e":"\nindices = np.argsort(importances_os)[::-1]\n\n\nnames = X_train_os.columns[indices]\n\nplt.figure(figsize=(15,7))\n\n\nplt.title(\"Feature Importance\")\n\nplt.bar(range(X_train_os.shape[1]), importances_os[indices])\n\nplt.xticks(range(X_train_os.shape[1]), names, rotation=90)\n\n\nplt.show()","4ec161d3":"y_pred=grid_gb_os.best_estimator_.predict(X_train_os)","849171a0":"from sklearn.metrics import classification_report, confusion_matrix","9a615231":"print(classification_report(y_train_os, y_pred))","f60a344f":"sns.heatmap(confusion_matrix(y_train_os, y_pred), annot=True, cmap='icefire_r')\nplt.title('Confusion Matrix of Train Set')","f6624a88":"from scikitplot.metrics import plot_roc\n\nplot_roc(y_train_os,grid_gb_os.predict_proba(X_train_os))","2f7c4e8b":"df_test = pd.read_csv('..\/input\/titanic\/test.csv')","0e6edcd8":"df_test.info()","07594d5b":"pd.DataFrame(df_test.isnull().sum()\/df_test.shape[0]).rename(columns={0:'% Null Values'}).style.bar( color='#d65f5f')","27e53e11":"for x in range(1,4):\n    df_test.loc[df_test.Pclass==x,['Age']] = df_test.loc[df_test.Pclass==x,['Age']].fillna(value=df_test.loc[df_test.Pclass==x,['Age']].mean().round(1))\n    ","e02e4570":"df_test.loc[:,['Embarked']] = df_test.loc[:,['Embarked']].fillna(value='S')","23afc206":"df_test = df_test.drop(axis=1,  columns='Cabin')","20172cca":"for x in range(1,4):\n    df_test.loc[df_test.Pclass==x,['Fare']] = df_test.loc[df_test.Pclass==x,['Fare']].fillna(value=df_test.loc[df_test.Pclass==x,['Fare']].mean().round(1))\n    ","987c3719":"df_test['Pclass'] = df_test.Pclass.astype('str')","3e79060d":"X_test= df_test[['Pclass', 'Sex', 'Age', 'SibSp','Parch', 'Fare', 'Embarked']]\n","fe25caa0":"X_test = pd.get_dummies(X_test,drop_first=True)","c2cafb20":"y_test_pred=grid_gb_os.best_estimator_.predict(X_test)","b0a3e422":"df_test['Survived']= y_test_pred","0492d637":"submission = df_test[['PassengerId','Survived']].set_index('PassengerId')","bb2488f3":"submission.to_csv('submission.csv')","8530fcdf":"It is the port of where passengers came.\n\nCould we found the most common port and use it to replae the missing values?","5e7852db":"#### Age and Fare <a class=\"anchor\" id=\"Fare\"><\/a>","e2d4a658":"We only have **19%** of missing values in that feature, and as we noticed, the Age of passengers could be related with the possibilities of survive.\nBecause of that, it could be a good idea to fill that feature in some way, for using after in our model.\n\nThe main question is: \n* \u00bfHow can we predict the Age of a Passenger?\n* \u00bfDo we have features with high correlation between Age?","15b035b3":"## Predicting new values","8c21e0fa":"Main metrics","008560cb":"### Descriptive Analysis <a class=\"anchor\" id=\"Descriptive\"><\/a>","37de27d7":"### What about Families? <a class=\"anchor\" id=\"Family\"><\/a>","d28ba2fb":"### Unbalanced Classes <a class=\"anchor\" id=\"class\"><\/a>","5c88e619":"Something intersting about the image, is that we can find a hight percentage of survivors between women and 1 Class","73192e26":"#### Survivors between Features  <a class=\"anchor\" id=\"Survivors\"><\/a>","f4938feb":"### Developing the model <a class=\"anchor\" id=\"model\"><\/a>","6dbe3f77":"Example of the code\n\n```js\nfor x in range(1,4): #Because we have 3 classes\n    df.loc[df.Pclass==x,['Age']] = df.loc[df.Pclass==x,['Age']].fillna(value=df.loc[df.Pclass==x,['Age']].mean().round(1))\n\n```","af00ec45":"#### Cabin <a class=\"anchor\" id=\"MissingCabin\"><\/a>","5b2be736":"### <div align=\"center\"> A brief Summary of our features\n\n|Variable|Definition|Key|\n|---|---|---|\n|survival|Survival|\t0 = No, 1 = Yes|\n|pclass|Ticket class| 1 = 1st, 2 = 2nd, 3 = 3rd|\n|sex|Sex|--|\t\n|Age|Age in years|--|\t\n|sibsp|# of siblings \/ spouses aboard the Titanic|--|\t\n|parch|# of parents \/ children aboard the Titanic|--|\t\n|ticket|Ticket number|--|\t\n|fare|Passenger fare|--|\t\n|cabin|Cabin number|--|\t\n|embarked|Port of Embarkation|\tC = Cherbourg, Q = Queenstown, S = Southampton|","c5902e50":"We can notice the follow insights related with the graph:\n\n* We saw older people in the higher classes. That has sense, because higher classes were really expensive and maybe young people couldn't afford that cost.\n* Women are younger than men\n* The distribution of Age has a global mean at **30 years**. We can notice that between 0 and 15 years we could find **more** survivors, the same happens with the older ages.\n","8275c920":"### Kids and women first? <a class=\"anchor\" id=\"bonus\"><\/a>","7384abf2":"<img src='https:\/\/www.ecestaticos.com\/imagestatic\/clipping\/670\/a82\/670a82a3b2af7462a6ba41f58c38a854.jpg'>","920e10bf":"#### Embarked <a class=\"anchor\" id=\"MissingEmbarked\"><\/a>","57be4bee":"#### Age <a class=\"anchor\" id=\"MissingAge\"><\/a>","049d95ec":"As we could see in the first plot, between the low classes, most of survivors were **kids**.\n\nAnother intersting insight, it's that while moving foward to **higher fares**, we ll find more survivors.","d523b629":"Like in the very beginning of our analize, we notice that **higher classes** are related with **higher Ages**. Due of that issue, we will fill the missing Ages, with the mean of the Pclass related with each of them.","b1b97273":"Analysing the last conflictive feature \"Cabin\", we notice that we have **so many missing values**. Because we won't introduce so much bias in our dataset, we decided to **delete** the whole feature.","2ffb5c70":"If you play with the previous graph, you could notice that:\n* Most probably survivors were Women and Kids\n* Most probably survivors werer from first class\n\nSo, maybe the sentence \"Women and kids first\" was true, at least in Titanic","bc3047da":"#### Age Distribution <a class=\"anchor\" id=\"Age\"><\/a>","21db81f3":"### Dealing with missing values <a class=\"anchor\" id=\"Missing\"><\/a>","e5a948db":"Null values","2ec4129b":"We perfectly know the famous phrase: \"Women and Kids first !! \" in apocalyptical movies. \nIt was true with the Titanic population?\n\nDue to make a brief analysis, we will create a new feature (only for this particular thing) called : Who, which takes the value Kid, Men or Women depending of the passenger.","585efefc":"As we can see, the passengers who were with their families were more likely to survive (perhaps because of the children).","f8d31060":"<img src='https:\/\/www.nextlevelenglish.pe\/wp-content\/uploads\/2019\/07\/Dise%C3%B1o-sin-t%C3%ADtulo-1024x576.png'>","1eced280":"Analizing the null values, we will have to decide what to do with **\"Age\"**, **\"Cabin\"** and **\"Embarked\"** before to develop a predictive model","703ad313":"As we could notice few lines ago, we will have to take some decitions related with what to do with our missing values:\n* Age\n* Cabin\n* Embarked","eaab1c62":"# <div align=\"center\"> Titanic - An Statistical Approach","7ecf0e30":"### Oversampling <a class=\"anchor\" id=\"oversampling\"><\/a>","02d86b0e":"### Clasification Report <a class=\"anchor\" id=\"classification\"><\/a>","94899518":"Before choose and train an algorithm, we want to see if our dataset is or not balanced.\nFollowing that, we will plot our feature (survived) in our train set.","b7a8c0b3":"## Content Index\n\n* [1.0 First Approach to the Data](#First)\n* [2.0 Descriptive Analysis](#Descrivtive)\n    * [2.1 Age Distribution](#Age)\n    * [2.2 Age and Fare](#Fare)\n    * [2.3 Survivors between features](#Survivors)\n    * [2.4 What about Family?](#Family)\n* [3.0 Dealing with missing values](#Missing)\n    * [3.1 Age](#MissingAge)\n    * [3.2 Embarked](#MissingEmbarked)\n    * [3.3 Cabin](#MissingCabin)\n* [4.0 Kids and Women First ?](#bonus)\n* [5.0 Unbalanced Classes](#class)\n* [6.0 Oversampling](#oversampling)\n* [7.0 Developing the Model](#model)\n* [8.0 Classification Report](#classification)\n    \n----------------------------------------------------------------------------","1ceac21b":"### First Approach to the Data <a class=\"anchor\" id=\"First\"><\/a>"}}