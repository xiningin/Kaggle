{"cell_type":{"a3789c88":"code","490b4c1c":"code","628261a9":"code","759cc70e":"code","c63a4831":"code","51eeae79":"code","1e486ae5":"code","12165345":"code","9ff48f07":"code","1968a3fa":"code","9d93ceb7":"code","1f997125":"code","1cc3aaf4":"code","19ccf55f":"code","7e0bdeed":"code","f28b39c3":"code","bcad2508":"code","d96e61b7":"code","d95ba8a0":"markdown","3b68321a":"markdown","a25989a4":"markdown","df98c4b5":"markdown","2abfc0d9":"markdown","e08e19df":"markdown","e9123e59":"markdown","0fcf5409":"markdown","38f0abaa":"markdown","9042889d":"markdown","0cfa01a9":"markdown","bed09f4f":"markdown","e8cf48ac":"markdown","295afaf1":"markdown","ca828896":"markdown","1b042d54":"markdown","e6bec383":"markdown","c1d2a995":"markdown","25817837":"markdown","5f3aecad":"markdown"},"source":{"a3789c88":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","490b4c1c":"#Loading the required modules to read the data\nimport pandas as pd","628261a9":"cereals = pd.read_csv(\"..\/input\/Cereals.csv\")\ncereals.head()","759cc70e":"cereals['label'] = cereals['name']+'('+ cereals['shelf'].astype(str) + \" - \" + round(cereals['rating'],2).astype(str)+')'\ncereals.drop(['name','shelf','rating'], axis=1, inplace=True)","c63a4831":"#check the head\ncereals.head()","51eeae79":"cereals.describe()","1e486ae5":"#select all columns except \"label\"\ncereals_label = cereals[\"label\"]\ncereals = cereals[cereals.columns.difference(['label'])]","12165345":"cereals.isnull().sum()","9ff48f07":"cereals.isnull().sum().sum()","1968a3fa":"\nfrom sklearn.preprocessing import Imputer\nmean_Imputer = Imputer()\nImputed_cereals = pd.DataFrame(mean_Imputer.fit_transform(cereals),columns=cereals.columns)\nImputed_cereals\n","9d93ceb7":"Imputed_cereals.isnull().sum(axis=0)","1f997125":"from sklearn.preprocessing import StandardScaler\nstandardizer = StandardScaler()\nstandardizer.fit(Imputed_cereals)\nstd_x = standardizer.transform(Imputed_cereals)\nstd_cereals = pd.DataFrame(std_x,columns=cereals.columns)\nstd_cereals.head()","1cc3aaf4":"std_cereals.describe()","19ccf55f":"#loading the ethods\nfrom scipy.cluster.hierarchy import linkage,dendrogram\nimport matplotlib.pyplot as plt\n\n%matplotlib notebook\n\n#preparing linkage matrix\nlinkage_matrix = linkage(std_cereals, method = \"ward\", metric = 'euclidean')\n\n##plotting\ndendrogram(linkage_matrix,labels=cereals_label.as_matrix())\nplt.tight_layout()\nplt.show()","7e0bdeed":"from sklearn.cluster import AgglomerativeClustering\n\n##Instantiating object\nagg_clust = AgglomerativeClustering(n_clusters=6, affinity = 'euclidean', linkage = 'ward')\n\n##Training model and return class labels\nagg_clusters = agg_clust.fit_predict(std_cereals)\n\n##Label - Cluster\nagg_result = pd.DataFrame({'labels': cereals_label, \"agg_cluster\": agg_clusters})\nagg_result.head()","f28b39c3":"from sklearn.cluster import KMeans\nkmeans_object = KMeans(n_clusters = 5, random_state=123)\nkmeans_object.fit(std_cereals)\nkmeans_clusters= kmeans_object.predict(std_cereals)\nkmeans_result = pd.DataFrame({\"labels\":cereals_label, \"kmeans_cluster\":kmeans_clusters})\nkmeans_result.head()","bcad2508":"kmeans_object.cluster_centers_","d96e61b7":"sse = {}\nfor k in range(1, 10):\n    kmeans = KMeans(n_clusters=k, max_iter=10000).fit(std_cereals)\n    std_cereals[\"cluster\"] = kmeans.labels_\n#print(data[\"cluster\"])\n    sse[k] = kmeans.inertia_ #Intertia: Sum of distances of samples to their closest cluster center\nplt.figure()\nplt.plot(list(sse.keys()), list(sse.values()))\nplt.xlabel(\"Number of cluster\")\nplt.ylabel(\"SSE\")\nplt.show()","d95ba8a0":"**Imputation**","3b68321a":"**Visualizing the elbow plot**","a25989a4":"*Parameter description*","df98c4b5":"**Decouple label from the features**","2abfc0d9":"**How to select best K valu for K- Means ->Silhouette Analysis**","e08e19df":"**K-Means Clustering**","e9123e59":"**Checking NA's again**","0fcf5409":"**check missing values**","38f0abaa":"**Reading data**","9042889d":"**Inspecting cluster centroids to understand average statistics of each cluster**","0cfa01a9":"**Standardization**","bed09f4f":"Note- Clustering is an unsupervised method and hence we're not concerned about train-test split or prediction accuracies.","e8cf48ac":"****Data Exploration****","295afaf1":"**Aggregrating \"name\", \"shelf\",\"rating\" to make labels**","ca828896":"**Checking the summary statistics**","1b042d54":"Parameter description\n\nn_clusters: The number of clusters to find.\n\nlinkage: {\"ward\",\"complete\", \"average\"}\n\n->ward minimizes the variance of the clusters being merged.\n->comlete uses the maximum distances between all observations of the two sets.\n->average uses the average of the distances of each observation of the two sets.\n\naffinity:{\"euclidean\", \"l1\",\"l2\", \"manhattan\",\"cosine\"}\n\n::-->Metric used to compute the linkage","e6bec383":"*Higher the silhouette score better the clustering*\n\nTHe silhouette value is a measure of how similar an object is to its own cluster(cohesion) caompared to other cluster(seperable). The silhouette range from -1 to +1, where a high value indicates that the object is well matched to neighboring clusters. If most objects have a high value, then the clustering configuration is appropriate. If many points have a low or negative value, then the clustering configuration may have too many or too few clusters.","c1d2a995":"**Agglomerative Clustering**","25817837":"**Selecting the best k value - using Elbow plot**","5f3aecad":"n_clusters : The number of clusters to find\n\ntol: Relative tolerance with regards to inertia to declare convergence\n\nn_init: Number of time the k-means algorithm will be run with different centroid seeds. The final results will be best output of n_init consecutive runs in terms of inertia.\n\nmax_iter: max iterations of recomputing new cluster centroids\n\nn_jobs: The number of jobs to use for the computation. This works by computing each of the n_init runs in parallel."}}