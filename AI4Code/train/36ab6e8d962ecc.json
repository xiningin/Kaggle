{"cell_type":{"c78047eb":"code","3ed683fa":"code","05842679":"code","b77ae6da":"code","87254db0":"code","1e74dd28":"code","ff88f189":"code","33400373":"code","41c980b8":"code","59ee5521":"markdown","8f20664b":"markdown","91acd664":"markdown","82122c51":"markdown","e7f116fb":"markdown","46922302":"markdown"},"source":{"c78047eb":"import numpy as np\nimport pandas as pd","3ed683fa":"train = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv')\n\ny_train = train[['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']]\nx_train = train.drop(['date_time','target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'], axis=1)\nx_test = test.drop(['date_time'], axis=1)\nx_train.shape, x_test.shape, y_train.shape","05842679":"!pip install scikit-learn-intelex -q --progress-bar off","b77ae6da":"from sklearnex import patch_sklearn\npatch_sklearn()","87254db0":"from sklearn.preprocessing import MinMaxScaler, StandardScaler\ntransformer = MinMaxScaler().fit(x_train)\nx_train = transformer.transform(x_train)\nx_test = transformer.transform(x_test)\n\nscaler = StandardScaler(with_mean=False).fit(y_train)\ny_train = scaler.transform(y_train)","1e74dd28":"from sklearn.model_selection import train_test_split\nx_train_sub, x_val, y_train_sub, y_val = train_test_split(x_train, y_train, test_size=0.2, random_state=42)\n\ndef get_loss(y1, y2):\n    from sklearn.metrics import mean_squared_error\n    return mean_squared_error(y1, y2)\n\ndef objective(trial):\n    from sklearn.multioutput import RegressorChain\n    from sklearn.svm import NuSVR    \n    params_svm = {\n        'C': trial.suggest_loguniform('C', 1e-3, 1e3),\n        'nu':  trial.suggest_float('nu', 0.0, 1.0),\n        'kernel': trial.suggest_categorical(\"kernel\", [\"rbf\"])\n    }\n    \n    clf = RegressorChain(NuSVR(**params_svm), random_state=34).fit(x_train_sub, y_train_sub)\n    y_pred = clf.predict(x_val)\n    return get_loss(y_val, y_pred)\n\nimport optuna\nstudy = optuna.create_study(sampler=optuna.samplers.TPESampler(seed=123),\n                            direction=\"minimize\",\n                            pruner=optuna.pruners.HyperbandPruner())\n# study.optimize(objective, n_trials=40, show_progress_bar=True)","ff88f189":"%%time\nfrom sklearn.multioutput import RegressorChain\nfrom sklearn.svm import NuSVR\n\nparams_svm = {\n    'C': 15.094374246471325,\n    'nu':  0.28613933495037946,\n    'kernel': 'rbf',\n}\n\nclf = RegressorChain(NuSVR(**params_svm), random_state=34).fit(x_train, y_train)\ny_pred = clf.predict(x_test)","33400373":"y_pred = scaler.inverse_transform(y_pred)\ny_pred[y_pred < 0] = 0","41c980b8":"sample_submission['target_carbon_monoxide'] = y_pred[:, 0]\nsample_submission['target_benzene'] = y_pred[:, 1]\nsample_submission['target_nitrogen_oxides'] = y_pred[:, 2]\nsample_submission.to_csv('submission_base.csv', index=False)\nsample_submission.head()","59ee5521":"# \ud83d\udd25 NuSVM with best parameters","8f20664b":"# \u270f\ufe0f Preprocessing","91acd664":"# \ud83d\ude80 Fast NuSVM Regression with Intel(R) Extension for Scikit-learn  <\/h1>\n","82122c51":"# \ud83c\udfaf Submit result","e7f116fb":"# \ud83d\udd0d Defining model and parameters for search optimal model\n\nSince the search turned out to be very large, I hid it.","46922302":"# \ud83d\udd28 Installing Intel(R) Extension for Scikit-learn\n\nUse [Intel(R) Extension for Scikit-learn](https:\/\/github.com\/intel\/scikit-learn-intelex) for fast compute Scikit-learn estimators"}}