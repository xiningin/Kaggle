{"cell_type":{"2ff976d7":"code","a84e0c7b":"code","00e7bebf":"code","70594997":"code","bdc2a7de":"code","6fd1b0e7":"code","48b2c40f":"code","a3e08268":"code","c29022c8":"code","92fccb86":"code","bc551f84":"code","6710a8d6":"code","cfea7d6e":"code","0b0d74f4":"code","8cf6deca":"code","a0f136a9":"code","e12d971c":"code","e7c824f3":"code","fe51ed62":"code","18fb7da1":"code","cf776085":"code","a37d9538":"code","3b866bf1":"code","3c26535c":"code","c5b46cb5":"code","73675602":"code","563c633e":"code","d24a5e56":"code","29012d5c":"code","4d0a0ff1":"code","09f64708":"code","ac386f02":"code","6331065a":"code","01c3cdfd":"code","b3a25015":"code","864c267b":"code","9de5e7bf":"code","06013194":"code","0e1b228f":"code","47085f9e":"code","6520b7ab":"code","01d2401b":"code","c927934e":"code","2c351479":"code","ac1590f7":"code","50464276":"code","96aa436d":"code","83a9f3d0":"code","645c4f67":"code","aebdb6fd":"code","3953e66a":"code","4b22a50a":"code","c0086b5e":"code","e0ccc034":"code","add48165":"markdown","bfa155c0":"markdown","9497b8f8":"markdown","0e8d0b1a":"markdown","c2f75cc1":"markdown"},"source":{"2ff976d7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport zipfile\n\n!pip install plotly\nimport plotly.express as px\n\n!pip install dataprep\nfrom dataprep.eda import create_report\n\n!pip install h2o\nimport h2o\nfrom h2o.automl import H2OAutoML","a84e0c7b":"#read data\ncancer_df = pd.read_csv(\"\/kaggle\/input\/cervical-cancer-risk-classification\/kag_risk_factors_cervical_cancer.csv\")","00e7bebf":"#preview\ncancer_df.head(10)","70594997":"#info\ncancer_df.info()","bdc2a7de":"#statistics\ncancer_df.describe()","6fd1b0e7":"#replace '?' with NaN \ncancer_df = cancer_df.replace('?', np.nan)\ncancer_df","48b2c40f":"#look at null\ncancer_df.isnull().sum()","a3e08268":"#plot heatmap for all locations that have null values\nplt.figure(figsize = (10, 10))\nsns.heatmap(cancer_df.isnull(), yticklabels=False)","c29022c8":"#since STDs: Time since first diagnosis  and STDs: Time since last diagnosis have more than 80% missing values \n#we can drop them\ncancer_df = cancer_df.drop(columns=['STDs: Time since first diagnosis', 'STDs: Time since last diagnosis'], axis=1)\ncancer_df.head()","92fccb86":"#Other tests can suggest that cancer is present, \n#but only a biopsy can make a definite diagnosis.\n#We will remove all other diagnosis and tests\ncancer_df = cancer_df.drop(columns=['Hinselmann', 'Schiller', 'Citology'], axis=1)\ncancer_df.head()","bc551f84":"#since most of the column types are object, we are not able to get the statistics of the dataframe.\n#convert them to numeric type\ncancer_df = cancer_df.apply(pd.to_numeric)\ncancer_df.info()","6710a8d6":"#statistics of the dataframe\ncancer_df.describe()","cfea7d6e":"#get average\ncancer_df.mean()","0b0d74f4":"#replace null values with mean\ncancer_df = cancer_df.fillna(round(cancer_df.mean()))\ncancer_df.head()","8cf6deca":"#correlation matrix\ncorr = cancer_df.corr()\ncorr","a0f136a9":"#create report\nreport = create_report(cancer_df, title='My Report')\nreport","e12d971c":"plt.figure(figsize=(15, 6))\nsns.countplot(x=cancer_df['Age'],\n              hue=cancer_df['Biopsy'])","e7c824f3":"plt.figure(figsize=(15, 6))\nsns.countplot(x=cancer_df['Number of sexual partners'],\n              hue=cancer_df['Biopsy'])","fe51ed62":"plt.figure(figsize=(15, 6))\nsns.countplot(x=cancer_df['First sexual intercourse'],\n              hue=cancer_df['Biopsy'])","18fb7da1":"plt.figure(figsize=(15, 6))\nsns.countplot(x=cancer_df['Num of pregnancies'],\n              hue=cancer_df['Biopsy'])","cf776085":"plt.figure(figsize=(15, 6))\nsns.countplot(x=cancer_df['Smokes'],\n              hue=cancer_df['Biopsy'])","a37d9538":"plt.figure(figsize=(15, 6))\nsns.countplot(x=cancer_df['Hormonal Contraceptives'],\n              hue=cancer_df['Biopsy'])","3b866bf1":"plt.figure(figsize=(15, 6))\nsns.countplot(x=cancer_df['IUD'],\n              hue=cancer_df['Biopsy'])","3c26535c":"plt.figure(figsize=(15, 6))\nsns.countplot(x=cancer_df['STDs'],\n              hue=cancer_df['Biopsy'])","c5b46cb5":"plt.figure(figsize=(15, 6))\nsns.countplot(x=cancer_df['STDs (number)'],\n              hue=cancer_df['Biopsy'])","73675602":"plt.figure(figsize=(15, 6))\nsns.countplot(x=cancer_df['STDs: Number of diagnosis'],\n              hue=cancer_df['Biopsy'])","563c633e":"#initiate\nh2o.init()","d24a5e56":"#convert pandas df into h2o frame\nh2o_df = h2o.H2OFrame(cancer_df)\n\n#preview\nh2o_df","29012d5c":"#statistics\nh2o_df.describe()","4d0a0ff1":"#split train and test sets\ntrain, test = h2o_df.split_frame(ratios=[0.75], seed=121)","09f64708":"#define X and y\nX = train.columns\ny = 'Biopsy'\nX.remove(y)","ac386f02":"#for binary classification, response should be a factor\ntrain[y] = train[y].asfactor()\ntest[y] = test[y].asfactor()","6331065a":"X","01c3cdfd":"y","b3a25015":"#initiate\naml = H2OAutoML(balance_classes=True,\n                stopping_metric='AUC',     #for classification\n                seed=121,\n                max_models=20,\n                exclude_algos = [\"StackedEnsemble\"])\n\n#train\naml.train(x=X, \n          y=y, \n          training_frame=train)","864c267b":"#leaderboard\nlb = aml.leaderboard\nlb.head(rows=lb.nrows)","9de5e7bf":"#compare all models\nexm = aml.explain(test)","06013194":"#explain a single H2O model (e.g. leader model from AutoML)\nexm = aml.leader.explain(test)","0e1b228f":"#make prediction\npreds = aml.leader.predict(test)","47085f9e":"#combine the prediction with the test dataset\ndf = test.cbind(preds)\n\n#preview\ndf.head(10)","6520b7ab":"df = h2o.as_list(df)","01d2401b":"preds = df[['Biopsy', 'predict']].head(20)\npreds","c927934e":"df.to_csv('df.csv')\npreds.to_csv('preds.csv')","2c351479":"!pip install lime\nimport lime\nimport lime.lime_tabular","ac1590f7":"feature_names = train.columns[0: -1]\nfeature_names","50464276":"train_features_numpy = train[feature_names].as_data_frame().values\ntrain_features_numpy","96aa436d":"#define LIME explainer\nexplainer = lime.lime_tabular.LimeTabularExplainer(train_features_numpy, \n                                                   feature_names = feature_names,\n                                                   mode='classification')","83a9f3d0":"#https:\/\/sefiks.com\/2019\/09\/19\/explaining-h2o-models-with-lime\/\n\ndef findPrediction(instance):\n    #instance will be in type of numpy\n    df = pd.DataFrame(data = instance, columns = feature_names)\n    hf = h2o.H2OFrame(df)\n    predictions = aml.leader.predict(hf).as_data_frame()\n \n    #here predictions object is 3 columned data frame. 1st column is class prediction and others are probabilities\n    #lime needs just prediction probabilities\n \n    predictions = predictions.iloc[:,1:].values\n    return predictions","645c4f67":"idx = 100\ntest_df = test.as_data_frame()\ntest_numpy = test_df.iloc[idx].values[0:-1]","aebdb6fd":"test_numpy","3953e66a":"exp = explainer.explain_instance(test_numpy, \n                                 findPrediction, \n                                 num_features = len(feature_names))","4b22a50a":"exp.show_in_notebook(show_table=True, show_all=True)","c0086b5e":"idx = 120\ntest_df = test.as_data_frame()\ntest_numpy = test_df.iloc[idx].values[0:-1]\n\nexp = explainer.explain_instance(test_numpy, \n                                 findPrediction, \n                                 num_features = len(feature_names))\n\nexp.show_in_notebook(show_table=True, show_all=True)","e0ccc034":"idx = 150\ntest_df = test.as_data_frame()\ntest_numpy = test_df.iloc[idx].values[0:-1]\n\nexp = explainer.explain_instance(test_numpy, \n                                 findPrediction, \n                                 num_features = len(feature_names))\n\nexp.show_in_notebook(show_table=True, show_all=True)","add48165":"# Use LIME to explain H2O Models","bfa155c0":"# Exploratory Data Analysis","9497b8f8":"# Train H2O AutoML","0e8d0b1a":"# Data Visualization","c2f75cc1":"# Leaderboard Exploration"}}