{"cell_type":{"9be2970b":"code","38704d2a":"code","9ae8c7db":"code","0fc2edf3":"code","2e64dfdd":"code","71291fbc":"code","61dfb5d4":"code","03319d1d":"code","6bcc4c2a":"code","b236df5f":"code","f0a3f0ca":"code","8a2dbca0":"code","43f604b5":"code","e71cb38f":"code","a1bb248c":"code","a9892817":"code","059b75ca":"code","eb8f7193":"code","110a8b50":"code","ee6add94":"code","efd2aeb6":"code","d35510e9":"code","35f589ad":"code","6d8cb76a":"code","07a6cb3a":"code","4df3a032":"code","7f07a4ec":"code","7aec3430":"code","68721101":"code","299a277d":"code","c8918e87":"code","6837346c":"code","0713082a":"code","90258eab":"code","baa0906f":"code","10b808c1":"code","ebaa8ffa":"code","09fa5444":"markdown","226dfcf2":"markdown","8c5b025b":"markdown","8aa52da1":"markdown","4b1b3514":"markdown","d463354a":"markdown","f8320e6a":"markdown","c3079dfe":"markdown","3208fca7":"markdown","50f945df":"markdown","e985f743":"markdown","dfe33a23":"markdown","38e88e2c":"markdown"},"source":{"9be2970b":"# Importing Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style(\"whitegrid\")","38704d2a":"# Loading the necessary data\nmatches = pd.read_csv(\"..\/input\/winnerpredictionchallenge\/Training Matches IPL 2008-2019.csv\")\ntest = pd.read_csv(\"..\/input\/winnerpredictionchallenge\/Testset Matches IPL 2020.csv\")\n\nmatches.shape, test.shape","9ae8c7db":"matches.head()","0fc2edf3":"matches.describe().T","2e64dfdd":"matches.isnull().sum()","71291fbc":"matches.drop([\"id\", \"season\", \"date\", \n              \"toss_winner\", \"toss_decision\", \"result\", \"dl_applied\",\n             \"win_by_runs\", \"win_by_wickets\", \"umpire3\"], \n             axis=1, inplace=True)","61dfb5d4":"matches.city.unique()","03319d1d":"matches.replace(\"Bangalore\",\"Bengaluru\", inplace=True)","6bcc4c2a":"matches.loc[matches.city.isnull()]","b236df5f":"# Filling all the missing values of city with Dubai\nmatches.city.fillna(\"Dubai\", inplace=True)","f0a3f0ca":"# Printing all the team names\nfor i in matches['team1'].unique():\n    print(i)","8a2dbca0":"# Changing the names of the teams\n# Some teams changed their names too, so changing their names\nmatches.replace(\"Rising Pune Supergiant\",\"Rising Pune Supergiants\", inplace=True)\nmatches.replace('Pune Warriors', 'Rising Pune Supergiants', inplace=True)\nmatches.replace('Deccan Chargers', 'Sunrisers Hyderabad', inplace=True)\nmatches.replace('Delhi Daredevils', 'Delhi Capitals', inplace=True)\n\nmatches['team1'].unique()","43f604b5":"# Converting the names to the abbreviations\nmatches.replace({\"Mumbai Indians\":\"MI\", \"Delhi Capitals\":\"DC\", \n               \"Sunrisers Hyderabad\":\"SRH\", \"Rajasthan Royals\":\"RR\", \n               \"Kolkata Knight Riders\":\"KKR\", \"Kings XI Punjab\":\"KXIP\", \n               \"Chennai Super Kings\":\"CSK\", \"Royal Challengers Bangalore\":\"RCB\",\n              \"Kochi Tuskers Kerala\":\"KTK\", \"Rising Pune Supergiants\":\"RPS\",\n              \"Gujarat Lions\":\"GL\"}, inplace=True)\nmatches['team1'].unique()","e71cb38f":"# Dropping the rows containing NaN values in winner column\nmatches.dropna(subset=[\"winner\"], inplace=True)","a1bb248c":"# Dropping the rows containing NaN values in umpire1 and umpire2 column\nmatches.dropna(subset=[\"umpire1\",\"umpire2\"], inplace=True)","a9892817":"matches.isnull().sum()","059b75ca":"plt.figure(figsize=(12,8))\ng = sns.countplot(x = \"winner\", data=matches, color='blue',\n                 order = matches.winner.value_counts().index)\ng.set_title(\"COUNT OF WINNER'S TEAM FROM 2008-2019\", fontsize=25)\ng.set_xlabel(\"WINNER\", fontsize=15)\ng.axes.get_yaxis().set_visible(False)\nfor p in g.patches:\n    g.annotate(format(p.get_height(), '.0f'), \n                   (p.get_x() + p.get_width() \/ 2., p.get_height()), \n                   ha = 'center', va = 'center', \n                   xytext = (0, 9), \n                   textcoords = 'offset points')\nplt.show()","eb8f7193":"train = matches.copy()\ntrain.head()","110a8b50":"# Removing the teams that are not playing in 2020\ntrain.drop(train.loc[train.team1.isin(['KTK','RPS','GL'])].index, inplace=True)\ntrain.drop(train.loc[train.team2.isin(['KTK','RPS','GL'])].index, inplace=True)","ee6add94":"# Converting to numerical values\ntrain.replace({\"MI\":0,\"CSK\":1,\"RCB\":2,\n              \"KKR\":3,\"DC\":4,\"KXIP\":5,\n              \"RR\":6,\"SRH\":7}, inplace=True)","efd2aeb6":"# converting to numerical '1' where team1 is the winner \n# and '0' where team2 is the winner\ntrain[\"winner\"] = np.where(train[\"winner\"] == train[\"team1\"], 1, 0)","d35510e9":"#encoding to numeric values\nfrom sklearn.preprocessing import LabelEncoder\nencoder= LabelEncoder()\n\ntrain[\"city\"]=encoder.fit_transform(train[\"city\"])\ntrain[\"player_of_match\"]=encoder.fit_transform(train[\"player_of_match\"])\ntrain[\"venue\"]=encoder.fit_transform(train[\"venue\"])\ntrain[\"umpire1\"]=encoder.fit_transform(train[\"umpire1\"])\ntrain[\"umpire2\"]=encoder.fit_transform(train[\"umpire2\"])","35f589ad":"# Correlation\ncorr = train.corr()\ncorr","6d8cb76a":"# Heatmap of correlation\nmask = np.triu(corr)\n\nplt.figure(figsize=(12,8))\nsns.heatmap(corr,\n           square=True,\n            fmt=\".1g\",\n            mask=mask,\n           annot=True,\n           cmap='hot')\nplt.show()","07a6cb3a":"feature = train.drop('winner', axis=1)\ntarget = train['winner']","4df3a032":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix, classification_report","7f07a4ec":"#Splitting the data into training and testing data and scaling it\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(feature, target, \n                                                    test_size=0.2, random_state=42)\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","7aec3430":"#Logistic Regression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))\nprint('Accuracy of logistic regression classifier on test set: {:.4f}'.format(logreg.score(X_test, y_test)*100))","68721101":"#SVM\nsvm=SVC()\nsvm.fit(X_train,y_train)\nsvm.score(X_test,y_test)\ny_pred = svm.predict(X_test)\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))\nprint('Accuracy of SVM classifier on test set: {:.4f}'.format(svm.score(X_test, y_test)*100))","299a277d":"#Decision Tree Classifier\ndtree=DecisionTreeClassifier()\ndtree.fit(X_train,y_train)\ndtree.score(X_test,y_test)\ny_pred = dtree.predict(X_test)\nprint(confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))\nprint('Accuracy of decision tree classifier on test set: {:.4f}'.format(dtree.score(X_test, y_test)*100))","c8918e87":"#Random Forest Classifier\nrandomForest= RandomForestClassifier(n_estimators=100)\nrandomForest.fit(X_train,y_train)\nrandomForest.score(X_test,y_test)\ny_pred = randomForest.predict(X_test)\nprint(\"Confusion matrix\\n\",confusion_matrix(y_test,y_pred))\nprint(classification_report(y_test,y_pred))\nprint('Accuracy of random forest classifier on test set: {:.4f}'.format(randomForest.score(X_test, y_test)*100))","6837346c":"test.head()","0713082a":"test_copy = test.copy()\ntest_copy.drop([\"id\", \"season\", \"date\", \n           \"umpire3\"], axis=1, inplace=True)","90258eab":"test_copy.replace({\"MI\":0,\"CSK\":1,\"RCB\":2,\n              \"KKR\":3,\"DC\":4,\"KXIP\":5,\n              \"RR\":6,\"SRH\":7}, inplace=True)","baa0906f":"test_copy[\"city\"]=encoder.fit_transform(test_copy[\"city\"])\ntest_copy[\"player_of_match\"]=encoder.fit_transform(test_copy[\"player_of_match\"])\ntest_copy[\"venue\"]=encoder.fit_transform(test_copy[\"venue\"])\ntest_copy[\"umpire1\"]=encoder.fit_transform(test_copy[\"umpire1\"])\ntest_copy[\"umpire2\"]=encoder.fit_transform(test_copy[\"umpire2\"])","10b808c1":"pred = randomForest.predict(test_copy)\nprint(pred)\n\nwinner = list()\nfor i in range(len(pred)):\n    if pred[i] == 0:\n        winner.append(2)\n    else:\n        winner.append(1)","ebaa8ffa":"# Converting the output to CSV file\nsubmission = {\"id\":test.id.tolist(), \n              \"winner\":winner}\nsubmit = pd.DataFrame(submission)\n\nsubmit.to_csv(\"submit.csv\", index=False)","09fa5444":"### SUPPORT VECTOR MACHINE (SVM)","226dfcf2":"## TESTING DATA","8c5b025b":"### DECISION TREE CLASSIFIER","8aa52da1":"## DATA PROCESSING AND EDA","4b1b3514":"### RANDOM FOREST CLASSIFIER","d463354a":"As **Random Forest Classifier** gives the more accuracy, we will go with **Random Forest Classifier**","f8320e6a":"# IPL 2020 PREDICTION\n![](https:\/\/wallpapercave.com\/wp\/wp4059913.jpg)","c3079dfe":"### SPLITTING THE DATA","3208fca7":"Venue and umpire2 have the highest correlation for the **winner** column which shows this 2 features will contribute the most while predicting the winner.","50f945df":"## SUBMISSION","e985f743":"## TRAINING THE MODEL","dfe33a23":"**Bengaluru** and **Bangalore** are both same city, so changing the name.","38e88e2c":"### LOGISTIC REGRESSION"}}