{"cell_type":{"bf3879c4":"code","6f728725":"code","bba553c1":"code","07faa358":"code","b1cd2f98":"code","dbf87a9d":"code","11b325d3":"markdown","b5326e50":"markdown","fc648234":"markdown","92743ba4":"markdown"},"source":{"bf3879c4":"# Some imports\nimport pandas as pd\nimport numpy as np\nimport networkx as nx\nimport matplotlib.pylab as plt","6f728725":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")\nstructures_df = pd.read_csv('..\/input\/structures.csv')\ntest_df['scalar_coupling_constant'] = np.nan\ndf = pd.concat([train_df, test_df])\ndel train_df\ndel test_df","bba553c1":"\nfor atom_index in [0, 1]:\n    renamed_columns = {col: col + \"_\" + str(atom_index) for col in [\"x\", \"y\", \"z\", \"atom_index\", \n                                                                    \"atom\"]}\n    df = (df.merge(structures_df.rename(columns=renamed_columns),\n                   on=['molecule_name', 'atom_index_' + str(atom_index)], how='inner'))\ndf['distance_l2'] = ((df['x_0'] - df['x_1']) ** 2 + (df['y_0'] - df['y_1'])\n                     ** 2 + (df['z_0'] - df['z_1']) ** 2) ** 0.5","07faa358":"MOLECULE_NAMES = df['molecule_name'].unique()","b1cd2f98":"def get_molecule_graph(df, molecule_name):\n    molecule_df = df.loc[lambda df: df['molecule_name'] == molecule_name]\n    labels = molecule_df[['atom_1', 'atom_index_1']].set_index('atom_index_1')['atom_1'].to_dict()\n    labels.update(molecule_df[['atom_0', 'atom_index_0']].set_index('atom_index_0')['atom_0'].to_dict())\n    graph = nx.from_pandas_edgelist(molecule_df, source='atom_index_0', \n                                    target='atom_index_1', edge_attr='scalar_coupling_constant', \n                                    create_using=nx.Graph())\n    return graph, labels\n\ndef draw_graph(graph, labels, weight=\"distance_l2\"):\n    position = nx.spring_layout(graph, weight=weight)\n    fig, ax = plt.subplots(1, 1, figsize=(6, 6))\n    nx.draw_networkx_nodes(graph, position, node_color='red', alpha = 0.8, ax=ax)\n    nx.draw_networkx_edges(graph, position, edge_color='blue', alpha = 0.6, ax=ax)\n    nx.draw_networkx_labels(graph, position, labels, font_size=16, ax=ax)\n    return ax","dbf87a9d":"# Plotting for only few molecules\nfor molecule_name in MOLECULE_NAMES[:10]:\n    graph, labels = get_molecule_graph(df, molecule_name)\n    ax = draw_graph(graph, labels)\n    ax.set_title(f\"Graph for {molecule_name}\")","11b325d3":"# Load the data and add L2 distance computation between atoms","b5326e50":"# Construct the graph and plot it","fc648234":"That's it for now, I will update this kernel whenever I find new interesting things. :)","92743ba4":"After reading this [discussion](https:\/\/www.kaggle.com\/c\/champs-scalar-coupling\/discussion\/96586#latest-557994), I have decided to explore the [**graph**](https:\/\/en.wikipedia.org\/wiki\/Graph_(discrete_mathematics) (in its mathematical definition) of each molecule and see what I can get from it. For that, I will be using the [networkx](https:\/\/networkx.github.io\/documentation\/stable\/) library. \n\nLet's go!"}}