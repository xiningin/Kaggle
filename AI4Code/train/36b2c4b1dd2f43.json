{"cell_type":{"99c7e8ed":"code","5ea33fa3":"code","ad8022b8":"code","983f6118":"code","e07dca8c":"code","6493f912":"code","d8be18af":"code","9f92c989":"code","61fe6007":"code","650bdd2d":"code","31750307":"code","03a64b30":"code","daca7e2b":"code","d167fc95":"code","45dc4d0b":"markdown","a11f1652":"markdown"},"source":{"99c7e8ed":"%matplotlib inline\n\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport cv2  # OpenCV\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split","5ea33fa3":"in_dir = '..\/input\/dataset2-master\/dataset2-master\/images'\nresource_dir = '\/opt\/conda\/lib\/python3.6\/site-packages\/kaggle_blood_cells'\n\ndf = pd.read_csv(os.path.join(resource_dir, 'stats.csv.py'))","ad8022b8":"# Plot Image\ndef plotImage(image_path):\n    image = cv2.imread(image_path)  # BGR\n    image = image[:, :, [2, 1, 0]]  # Reorder to RGB for Matplotlib display\n    plt.imshow(image)\n    return\n\nplt.figure(figsize=(12,8))\nplt.subplot(221)\nplt.title('Lymphocyte'); plt.axis('off'); plotImage(os.path.join(in_dir, 'TRAIN\/LYMPHOCYTE\/_0_204.jpeg'))\nplt.subplot(222)\nplt.title('Monocyte'); plt.axis('off'); plotImage(os.path.join(in_dir, 'TRAIN\/MONOCYTE\/_0_9309.jpeg'))\nplt.subplot(223)\nplt.title('Neutrophil'); plt.axis('off'); plotImage(os.path.join(in_dir, 'TRAIN\/NEUTROPHIL\/_0_9742.jpeg'))\nplt.subplot(224)\nplt.title('Eosinophil'); plt.axis('off'); plotImage(os.path.join(in_dir, 'TRAIN\/EOSINOPHIL\/_5_907.jpeg'))","983f6118":"print('Training samples:')\ntrain_dir = os.path.join(in_dir, \"TRAIN\")\nnum_samples = 0\nfor cell in os.listdir(train_dir):\n    num_cells = len(os.listdir(os.path.join(train_dir, cell)))\n    num_samples += num_cells\n    print('Cell: {:15s}  num samples: {:d}'.format(cell, num_cells))\nprint('Total training samples: {:d}\\n'.format(num_samples))\n\nprint('Test samples:')\ntest_dir = os.path.join(in_dir, \"TEST\")\nnum_samples = 0\nfor cell in os.listdir(test_dir):\n    num_cells = len(os.listdir(os.path.join(test_dir, cell)))\n    num_samples += num_cells\n    print('Cell: {:15s}  num samples: {:d}'.format(cell, num_cells))\nprint('Total test samples: {:d}'.format(num_samples))","e07dca8c":"def plot_learning_curves(exp_id):\n    plt.figure(figsize=(16, 5))\n\n    plt.subplot(1, 2, 1)\n    plt.plot(df[exp_id + '_epoch'][:200], df[exp_id + '_loss'][:200], label='Train', color='black')\n    plt.plot(df[exp_id + '_epoch'][:200], df[exp_id + '_val_loss'][:200], label='Validation', color='blue')\n    plt.legend(); plt.xlabel('Epochs -->'); plt.ylabel('Loss -->')\n\n    plt.subplot(1, 2, 2)\n    plt.plot(df[exp_id + '_epoch'][:200], df[exp_id + '_acc'][:200], label='Train', color='black')\n    plt.plot(df[exp_id + '_epoch'][:200], df[exp_id + '_val_acc'][:200], label='Validation', color='blue')\n    plt.legend(); plt.xlabel('Epochs -->'); plt.ylabel('Accuracy -->');","6493f912":"mean_img = np.load(os.path.join(resource_dir, 'mean_image_160x120.npy.py'))\nstd_img = np.load(os.path.join(resource_dir, 'std_image_160x120.npy.py'))\nplt.figure(figsize=(16, 6))\nplt.subplot(1, 2, 1); plt.axis('off'); plt.title('Mean Image'); plt.imshow(mean_img.astype(np.uint8));\nplt.subplot(1, 2, 2); plt.axis('off'); plt.title('Std  Image'); plt.imshow(std_img.astype(np.uint8));","d8be18af":"plot_learning_curves('100_0')","9f92c989":"plot_learning_curves('100_1')","61fe6007":"plot_learning_curves('100_2')","650bdd2d":"plot_learning_curves('20_2')","31750307":"plt.figure(figsize=(16, 12))\n\nplt.subplot(2, 2, 1)\nplt.plot(df['100_4_epoch'][:200], df['100_4_loss'][:200], label='Type_0', color='blue')\nplt.plot(df['100_4_epoch'], df['100_4_10_loss'], label='Type_1', color='green')\nplt.plot(df['100_4_epoch'], df['100_4_11_loss'], label='Type_2', color='orange')\nplt.plot(df['100_4_epoch'], df['100_4_12_loss'], label='Type_3', color='red')\nplt.legend(); plt.xlabel('Epochs -->'); plt.ylabel('Training Loss -->');\n\nplt.subplot(2, 2, 2)\nplt.plot(df['100_4_epoch'][:200], df['100_4_val_loss'][:200], label='Type_0', color='blue')\nplt.plot(df['100_4_epoch'], df['100_4_10_val_loss'], label='Type_1', color='green')\nplt.plot(df['100_4_epoch'], df['100_4_11_val_loss'], label='Type_2', color='orange')\nplt.plot(df['100_4_epoch'], df['100_4_12_val_loss'], label='Type_3', color='red')\nplt.legend(); plt.xlabel('Epochs -->'); plt.ylabel('Validation Loss -->'); plt.ylim(0, 4);\n\nplt.subplot(2, 2, 3)\nplt.plot(df['100_4_epoch'][:200], df['100_4_acc'][:200], label='Type_0', color='blue')\nplt.plot(df['100_4_epoch'], df['100_4_10_acc'], label='Type_1', color='green')\nplt.plot(df['100_4_epoch'], df['100_4_11_acc'], label='Type_2', color='orange')\nplt.plot(df['100_4_epoch'], df['100_4_12_acc'], label='Type_3', color='red')\nplt.legend(); plt.xlabel('Epochs -->'); plt.ylabel('Training Accuracy -->');\n\nplt.subplot(2, 2, 4)\nplt.plot(df['100_4_epoch'][:200], df['100_4_val_acc'][:200], label='Type_0', color='blue')\nplt.plot(df['100_4_epoch'], df['100_4_10_val_acc'], label='Type_1', color='green')\nplt.plot(df['100_4_epoch'], df['100_4_11_val_acc'], label='Type_2', color='orange')\nplt.plot(df['100_4_epoch'], df['100_4_12_val_acc'], label='Type_3', color='red')\nplt.legend(); plt.xlabel('Epochs -->'); plt.ylabel('Validation Accuracy -->');","03a64b30":"plot_experiments('100_7', ['Sigmoid', 'Tanh', 'ReLU']);","daca7e2b":"plot_experiments('100_8', ['Kernel:3x3', 'Kernel:5x5']);","d167fc95":"class Data:\n    def __init__(self, batch_size):\n        self.in_ht, self.in_wd = 240, 320\n        self.out_ht, self.out_wd = int(self.in_ht \/ 2), int(self.in_wd \/ 2)\n        self.vld_portion = 0.1\n        self.batch_size = {'TRAIN': batch_size, 'VALIDATION': batch_size, 'TEST': 1}\n        self.in_dir = in_dir\n\n        self.id2cell = pd.Series(os.listdir(os.path.join(self.in_dir, 'TRAIN')))\n        self.cell2id = pd.Series(range(len(self.id2cell)), index=self.id2cell)\n\n        self.x_trn_list, self.x_vld_list, self.y_trn, self.y_vld = self._get_names_labels(phase='TRAIN')\n        self.x_tst_list, self.y_tst = self._get_names_labels(phase='TEST')\n        self.steps_per_epoch = int(np.ceil(len(self.x_trn_list)\/self.batch_size['TRAIN']))\n        self.validation_steps = int(np.ceil(len(self.x_vld_list)\/self.batch_size['TRAIN']))\n        self.test_steps = int(np.ceil(len(self.x_tst_list)\/self.batch_size['TEST']))        \n\n        self.mean_img, self.std_img = self._get_stat_images()\n\n    def _get_names_labels(self, phase):\n        in_dir = os.path.join(self.in_dir, phase)\n        if not os.path.exists(in_dir):\n            raise IOError('Error: Directory {:s} does not exist.'.format(in_dir))\n\n        x = list()\n        labels = dict()\n        for cell_id in self.id2cell.index:\n            img_dir = os.path.join(in_dir, self.id2cell[cell_id])\n            img_names = [a for a in os.listdir(img_dir) if a.endswith('.jpeg')]\n            img_paths = [os.path.join(img_dir, img_name) for img_name in img_names]\n            x += img_paths\n            labels[cell_id] = np.zeros([len(img_paths), len(self.id2cell)], dtype=bool)  # One hot vector\n            labels[cell_id][:, cell_id] = True\n\n        y = np.concatenate([labels[a] for a in self.id2cell.index])\n        \n        if phase == 'TRAIN':\n            trn_x_list, vld_x_list, y_trn, y_vld = \\\n                train_test_split(x, y, test_size=self.vld_portion, random_state=42, stratify=y, shuffle=True)\n\n            return trn_x_list, vld_x_list, y_trn, y_vld\n        else:\n            return x, y\n\n    def get_batch(self, phase):\n        if phase == 'TRAIN':\n            x_list = self.x_trn_list\n            y = self.y_trn\n        elif phase == 'VALIDATION':\n            x_list = self.x_vld_list\n            y = self.y_vld\n        else:\n            x_list = self.x_tst_list\n            y = self.y_tst        \n\n        # Allocated one-time memory for the batch\n        x_batch = np.zeros((self.batch_size[phase], self.out_ht, self.out_wd, 3), dtype=float)\n        y_batch = np.zeros((self.batch_size[phase], len(self.cell2id)), dtype=bool)\n\n        src_idx = 0\n        dst_idx = 0\n        while True:\n            img_path = x_list[src_idx]\n            img = cv2.imread(img_path)\n            if img is None:\n                raise self.DataBatchError(\"Error: Can't open image: {:s}\".format(img_path))\n\n            img = cv2.resize(img, (self.out_wd, self.out_ht)).astype(float)\n\n            # Normalize the image: Normalize each dimension\n            img = (img - self.mean_img) \/ self.std_img            \n\n            x_batch[dst_idx] = img\n            y_batch[dst_idx] = y[src_idx]\n            src_idx += 1\n            dst_idx += 1\n\n            if src_idx >= len(x_list):\n                src_idx = 0\n\n            if dst_idx >= self.batch_size[phase]:\n                dst_idx = 0\n                yield x_batch.copy(), y_batch.copy()\n\n    def _get_stat_images(self):\n        mean_img_path = os.path.join(resource_dir, 'mean_image_{:d}x{:d}.npy.py'.format(self.out_wd, self.out_ht))\n        std_img_path = os.path.join(resource_dir, 'std_image_{:d}x{:d}.npy.py'.format(self.out_wd, self.out_ht))\n        mean_img = np.load(mean_img_path)\n        std_img = np.load(std_img_path)\n        return mean_img, std_img\n    \ndata = Data(batch_size=16)\nmodel_path = os.path.join(resource_dir, '100_4_model_e1000.h5.py')","45dc4d0b":"<font color=\"green\"> # Code below is inactive as the kernel takes too long time to load the model  <\/font>\n```python\nm = load_model(model_path)\n\neval_out = m.evaluate_generator(data.get_batch('TRAIN'), steps=data.test_steps)\nprint('Train performance: ', eval_out)\n\neval_out = m.evaluate_generator(data.get_batch('VALIDATION'), steps=data.test_steps)\nprint('Validation performance: ', eval_out)\n\neval_out = m.evaluate_generator(data.get_batch('TEST'), steps=data.test_steps)\nprint('Test performance: ', eval_out)\n\n```","a11f1652":"### Evaluation Results\nHere is the summary of the model performance on Training, Validation and Test set:\n```\nTrain       : Loss = 0.023    Accuracy = 99.53%\nValidation  : Loss = 0.063    Accuracy = 97.09%\nTest        : Loss = 1.702    Accuracy = 83.76%\n```"}}