{"cell_type":{"a4f0ce41":"code","322261e9":"code","601ab8de":"code","aa51e0aa":"code","d84f9bf9":"code","64bb0264":"code","e7f1c8b9":"code","fefc08e8":"code","02cf29d1":"code","994a5080":"code","c6803947":"code","96676182":"code","69b8ff79":"code","f2f75dc1":"markdown","c6bee8b0":"markdown","2ef6656d":"markdown","5b238cbf":"markdown","daf75067":"markdown","4dc28878":"markdown","55003a8f":"markdown","59d22682":"markdown"},"source":{"a4f0ce41":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","322261e9":"def sech(x): return 2 \/ (np.exp(x) + np.exp(-x))\n\ndef coth(x):\n    e = np.exp(x)\n    inv_e = 1 \/ e\n    return (e + inv_e) \/ (e - inv_e)\n\ndef Kint(k):\n    a = 1\n    b = np.sqrt(1 - k * k)\n    c = k\n    while c > 1e-12:\n        e = a\n        f = b\n        a = (e + f) \/ 2\n        b = np.sqrt(e * f)\n        c = (a - b) \/ 2\n    return np.pi \/ (2 * a)","601ab8de":"def Coaxial(d1, d2, eps):\n    return 376.734 \/ (2 * np.pi) * np.log(d2 \/ d1) \/ np.sqrt(eps)\n\nCoaxial(1, 3.3, 2) - 50.62","aa51e0aa":"def ThinMicroStrip(h, w, t, eps):\n    if t == 0: t = 4e-5\n    if w < h:\n        f_corr = 1 \/ np.sqrt(1 + 12 * h \/ w) + 0.04 * (1 - w \/ h)**2\n    else:\n        f_corr = 1 \/ np.sqrt(1 + 12 * h \/ w)\n    \n    eps_eff = (eps + 1) \/ 2 + (eps - 1) \/ 2 * f_corr\n    \n    if w < 1 \/ (2 * np.pi) * h:\n        w_eff = w + 0.398 * t * (1 + np.log(4 * np.pi * w \/ t))\n    else:\n        w_eff = w + 0.398 * t * (1 + np.log(2 * h \/ t))\n    \n    if w < h:\n        z0 = 60 \/ np.sqrt(eps_eff) * np.log(8 * h \/ w_eff + w_eff \/ (4 * h))\n    else:\n        z0 = 120 * np.pi \/ (np.sqrt(eps_eff) * (w_eff \/ h + 1.393 + 0.667 * np.log(w_eff \/ h + 1.444)))\n    \n    return z0\n\nprint(ThinMicroStrip(5, 4,  0, 2) - 109.28)\nprint(ThinMicroStrip(5, 10, 0, 2) - 68.77)\nprint(ThinMicroStrip(5, 20, 0, 2) - 43.69)","d84f9bf9":"def StripLine(h, w, eps):\n    we = np.pi * w \/ (2 * h)\n    k = sech(we)\n    k_prime = np.tanh(we)\n    return 30 * np.pi \/ np.sqrt(eps) * Kint(k) \/ Kint(k_prime)\n\nStripLine(2, 1.7, 2) - 51.63","64bb0264":"def ThickStrip(h, w, t, eps):\n    th = t \/ h\n    if th > 0.25:\n        raise Exception(\"t\/h > 0.25\")\n    \n    if w \/ (h - t) < 35 \/ 100:\n        piw = np.pi * w\n        t_piw = t \/ piw\n        log_0_25_with_1 = 2.3862943611198906\n        return 60 \/ np.sqrt(eps) * np.log(8 * h \/ piw \/ (1 + t_piw * (log_0_25_with_1 - np.log(t_piw)) + 0.51 * (t \/ w)**2))\n    \n    th_inv = 1 \/ (1 - th)\n    p1 = 2 * th_inv * np.log(th_inv + 1)\n    p2 = (th_inv - 1) * np.log(th_inv \/ (1 - th) - 1)\n    eps0885 = 0.0885 * eps\n    cfprime = eps0885 \/ np.pi * (p1 - p2)\n    return 94.15 \/ (np.sqrt(eps) * (w \/ h * th_inv + cfprime \/ eps0885))\n\nprint(ThickStrip(3, 2.4, 0.1, 2) - 50.26)\nprint(ThickStrip(3, 1.0, 0.1, 2) - 78.86)\ntry:\n    ThickStrip(1, 1.0, 0.5, 2)\nexcept Exception as e:\n    print(str(e))","e7f1c8b9":"def AsymmetricThickStrip(h1, h2, w, t, eps):\n    if w \/ h1 < 0.1 or w \/ h1 > 2:\n        raise Exception(\"0.1 <= w\/h1 <= 2\")\n    if t \/ h1 >= 0.25:\n        raise Exception(\"t\/h1 < 0.25\")\n    \n    imp1 = ThickStrip(2 * h1 + t, w, t, eps)\n    imp2 = ThickStrip(2 * h2 + t, w, t, eps)\n    \n    return 2 * imp1 * imp2 \/ (imp1 + imp2)\n\nprint(AsymmetricThickStrip(1, 4, 2, 0.1, 2) - 60.01)\n\ntry:\n    AsymmetricThickStrip(22, 4, 2, 0.1, 2)\nexcept Exception as e:\n    print(str(e))\n\ntry:\n    AsymmetricThickStrip(2, 4, 5, 0.1, 2)\nexcept Exception as e:\n    print(str(e))\n    \ntry:\n    AsymmetricThickStrip(1, 4, 2, 3, 2)\nexcept Exception as e:\n    print(str(e))","fefc08e8":"def DifferentialStrip(h, w, t, d, eps):\n    tw = t \/ h\n    aaa = 1 \/ (1 - tw)\n    c0885pi = 0.0885 \/ np.pi\n    c0885_pi_eps = c0885pi * eps\n    cf_T = c0885_pi_eps * (2 * aaa * np.log(aaa + 1) - (aaa - 1) * np.log(aaa**2 - 1))\n    log2 = 0.69314718055994529\n    cf = c0885_pi_eps * 2 * log2\n    \n    Zof = ThickStrip(h, w, t, eps) # Thick isolated stripline\n    Zoo = StripLine(h, w, eps)     # Thin isolated Stripline\n        \n    # calculate zero-thickness odd impedance of edge-coupled stripline\n    ko = np.tanh(np.pi * w \/ (2 * h)) * coth(np.pi * (w + d) \/ (2 * h))\n    ko_prime = np.sqrt(1 - ko**2)\n    Zo = 30 * np.pi \/ np.sqrt(eps) * Kint(ko_prime) \/ Kint(ko) # Im missing a factor of To somewere. Just added it here\n    \n    if d \/ t > 5:\n        a1 = 1 \/ Zof\n        a2 = cf_T \/ cf\n        a3_odd = 1 \/ Zo\n        a4_odd = 1 \/ Zoo\n        return 2 \/ (a1 + a2 * (a3_odd - a4_odd))\n    \n    p1 = 1 \/ Zo;\n    p2 = 1 \/ Zof - 1 \/ Zoo\n    imp0 = 377\n    p3 = 2 \/ imp0 * (cf_T \/ eps - cf \/ eps)\n    return 2 \/ (p1 + p2 - p3 + 2 * t \/ (imp0 * d))\n\nprint(DifferentialStrip(2, 4, 0.1, 1.0, 2) - 49.10)\nprint(DifferentialStrip(2, 4, 0.5, 2.4, 2) - 38.22)","02cf29d1":"def SuspendedMicroStrip(h, h0, w, eps):\n    en = 2.71829;\n\n    f = np.log(eps);\n\n    f_2 = f * f;\n    f_3 = f_2 * f;\n    d00 = (176.2576 - 43.1240 * f + 13.4094 * f_2 - 1.7010 * f_3) * 1e-2;\n    d01 = (4665.2320 - 1790.4 * f + 291.5858 * f_2 - 8.0888 * f_3) * 1e-4;\n    d02 = (-3025.5070 - 141.9368 * f - 3099.47 * f_2 + 777.6151 * f_3) * 1e-6;\n    d03 = (2491.569 + 143.3860 * f + 10095.55 * f_2 - 2599.132 * f_3) * 1e-8;\n    d10 = (-1410.2050 + 149.9293 * f + 198.2892 * f_2 - 32.1679 * f_3) * 1e-4;\n    d11 = (2548.791 + 1531.9310 * f - 1027.5200 * f_2 + 138.4192 * f_3) * 1e-4;\n    d12 = (999.3135 - 4036.7910 * f + 1762.4120 * f_2 - 298.0241 * f_3) * 1e-6;\n    d13 = (-1983.7890 + 8523.9290 * f - 5235.4600 * f_2 + 1145.7880 * f_3) * 1e-8;\n    d20 = (1954.072 + 333.3873 * f - 700.7473 * f_2 + 121.3212 * f_3) * 1e-5;\n    d21 = (-3931.09 - 1890.719 * f + 1912.266 * f_2 - 319.6794 * f_3) * 1e-5;\n    d22 = (-532.1326 + 7274.7210 * f - 4955.738 * f_2 + 941.4134 * f_3) * 1e-7;\n    d23 = (138.2037 - 1412.427 * f + 1184.27 * f_2 - 270.0047 * f_3) * 1e-8;\n    d30 = (-983.4028 - 255.1229 * f + 455.8729 * f_2 - 83.9468 * f_3) * 1e-6;\n    d31 = (1956.3170 + 779.9975 * f - 995.9494 * f_2 + 183.1957 * f_3) * 1e-6;\n    d32 = (62.855 - 3462.5 * f + 2909.923 * f_2 - 614.7068 * f_3) * 1e-8;\n    d33 = (-35.2531 + 601.0291 * f - 643.0814 * f_2 + 161.2689 * f_3) * 1e-9;\n    \n    f1 = 1 - np.sqrt(1 \/ eps);\n    h0h = h0 \/ h;\n    h0h2 = h0h * h0h;\n    h0h3 = h0h2 * h0h;\n    c0 = d00 + d01 * h0h + d02 * h0h2 + d03 * h0h3;\n    c1 = d10 + d11 * h0h + d12 * h0h2 + d13 * h0h3;\n    c2 = d20 + d21 * h0h + d22 * h0h2 + d23 * h0h3;\n    c3 = d30 + d31 * h0h + d32 * h0h2 + d33 * h0h3;\n    \n    wh0 = w \/ h0;\n    wh02 = wh0 * wh0;\n    wh03 = wh02 * wh0;\n    f2 = 1 \/ (c0 + c1 * wh0 + c2 * wh02 + c3 * wh03);\n    sqrt_eps = 1 \/ (1 - f1 * f2);\n    u = wh0 \/ (1 + h \/ h0);\n    fu = 6 + (2 * np.pi - 6) * en**(-(30.666 \/ u)**0.7528);\n    Z0 = 60 * np.log(fu \/ u + np.sqrt(1 + 4 \/ u**2));\n    \n    return Z0 \/ sqrt_eps;\n\nSuspendedMicroStrip(2, 0.5, 4, 2) - 81.45","994a5080":"def SuspendedMicroStripInverted(h, h0, w, eps):\n    en = 2.71829\n\n    f = np.log(eps)\n\n    f_2 = f * f\n    f_3 = f_2 * f\n    d00 = (2359.4010 - 97.1644 * f - 5.7706 * f_2 + 11.4112 * f_3) * 1e-3\n    d01 = (4855.9472 - 3408.5207 * f + 15296.73 * f_2 - 2418.1785 * f_3) * 1e-5\n    d02 = (1763.34 + 961.0481 * f - 2089.28 * f_2 + 375.8805 * f_3) * 1e-5\n    d03 = (-556.0909 - 268.6165 * f + 623.7094 * f_2 - 119.1402 * f_3) * 1e-6\n    d10 = (219.0660 - 253.0864 * f + 208.7469 * f_2 - 27.3285 * f_3) * 1e-3\n    d11 = (915.5589 + 338.4033 * f - 253.2933 * f_2 + 40.4745 * f_3) * 1e-3\n    d12 = (-1957.3790 - 1170.9360 * f + 1480.8570 * f_2 - 347.6403 * f_3) * 1e-5\n    d13 = (486.7425 + 279.8323 * f - 431.3625 * f_2 + 108.824 * f_3) * 1e-6\n    d20 = (5602.7670 + 4403.3560 * f - 4517.034 * f_2 + 743.2717 * f_3) * 1e-5\n    d21 = (-2823.481 - 1562.782 * f + 3646.15 * f_2 - 823.4223 * f_3) * 1e-5\n    d22 = (253.893 + 158.5529 * f - 3235.485 * f_2 + 919.3661 * f_3) * 1e-6\n    d23 = (-147.0235 + 62.4343 * f + 887.5211 * f_2 - 270.7555 * f_3) * 1e-7\n    d30 = (-3170.21 - 1931.852 * f + 2715.327 * f_2 - 519.342 * f_3) * 1e-6\n    d31 = (596.3251 + 188.1409 * f - 1741.477 * f_2 + 465.6756 * f_3) * 1e-6\n    d32 = (124.9655 + 577.5381 * f + 1366.453 * f_2 - 481.13 * f_3) * 1e-7\n    d33 = (-530.2099 - 2666.3520 * f - 3220.0960 * f_2 + 1324.499 * f_3) * 1e-9\n\n    f1 = np.sqrt(eps) - 1\n    h0h = h0 \/ h\n    h0h_2 = h0h * h0h\n    h0h_3 = h0h_2 * h0h\n    c0 = d00 + d01 * h0h + d02 * h0h_2 + d03 * h0h_3\n    c1 = d10 + d11 * h0h + d12 * h0h_2 + d13 * h0h_3\n    c2 = d20 + d21 * h0h + d22 * h0h_2 + d23 * h0h_3\n    c3 = d30 + d31 * h0h + d32 * h0h_2 + d33 * h0h_3\n\n    wh0 = w \/ h0\n    wh0_2 = wh0 * wh0\n    wh0_3 = wh0_2 * wh0\n    f2 = 1 \/ (c0 + c1 * wh0 + c2 * wh0_2 + c3 * wh0_3)\n\n    sqrteps = 1 + f1 * f2\n    u = wh0\n\n    fu = 6 + (2 * np.pi - 6) * en**(-((30.666 \/ u)**0.7528))\n    Z0 = 60 * np.log(fu \/ u + np.sqrt(1 + 4 \/ u**2))\n    return Z0 \/ sqrteps\n\nSuspendedMicroStripInverted(2, 0.5, 4, 2) - 32.92","c6803947":"def ThickCoplanar(h, w, t, g, eps):\n    a = w\n    b = w + 2 * g\n    k = a \/ b\n    k_prime = np.sqrt(1 - k*k)\n    a_t = a + 1.25 * t \/ np.pi * (1 + np.log(4 * np.pi * a \/ t))\n    b_t = b - 1.25 * t \/ np.pi * (1 + np.log(4 * np.pi * a \/ t))\n    k_t = a_t \/ b_t\n    k_t_prime = np.sqrt(1 - k_t* k_t)\n    k1 = np.sinh(np.pi * a_t \/ (4 * h)) \/ np.sinh(np.pi * b_t \/ (4 * h))\n    k1_prime = np.sqrt(1 - k1* k1)\n    epsf_eff = 1 + (eps - 1) \/ 2 * (Kint(k_prime) * Kint(k1) \/ (Kint(k) * Kint(k1_prime)))\n\n    epsf_eff_t = epsf_eff - (epsf_eff - 1) \/ ((b - a) * Kint(k) \/ (0.7 * t * 2 * Kint(k_prime)) + 1)\n    return 30 * np.pi \/ np.sqrt(epsf_eff_t) * Kint(k_t_prime) \/ Kint(k_t)\n\nThickCoplanar(2, 34, 0.1, 1.1, 2) - 50.08","96676182":"def Coplanar(w, g, eps): return ThickCoplanar(20*w, w, 0.001*g, g, eps)\n\nCoplanar(34, 1.1, 2) - 49.80","69b8ff79":"def CoplanarWithGround(h, w, g, eps):\n    a = w\n\n    b = w + 2 * g\n    k = a \/ b\n    k_prime = np.sqrt(1 - k * k)\n\n    k1 = np.tanh(np.pi * a \/ (4 * h)) \/ np.tanh(np.pi * b \/ (4 * h))\n    k1_prime = np.sqrt(1 - k1 * k1)\n    k_product = Kint(k_prime) * Kint(k1) \/ (Kint(k) * Kint(k1_prime))\n    epsf_eff = (1 + eps * k_product) \/ (1 + k_product)\n\n    return 60 * np.pi \/ np.sqrt(epsf_eff) * (1 \/ (Kint(k) \/ Kint(k_prime) + Kint(k1) \/ Kint(k1_prime)))\n\nCoplanarWithGround(2, 5, 0.7, 2) - 50.56","f2f75dc1":"# \u041d\u0435\u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u0430\u044f \u043f\u043e\u043b\u043e\u0441\u043a\u043e\u0432\u0430\u044f \u043b\u0438\u043d\u0438\u044f \u0441 \u0432\u043e\u0437\u0434\u0443\u0448\u043d\u043e\u0439 \u043f\u0440\u043e\u0441\u043b\u043e\u0439\u043a\u043e\u0439 \u043c\u0435\u0436\u0434\u0443 \u043c\u043e\u0434\u043b\u043e\u0436\u043a\u043e\u0439 \u0438 \u044d\u043a\u0440\u0430\u043d\u043e\u043c","c6bee8b0":"# \u0410\u0441\u0441\u0438\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u0430\u044f \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043f\u043e\u043b\u043e\u0441\u043a\u043e\u0432\u0430\u044f \u043b\u0438\u043d\u0438\u044f","2ef6656d":"# \u041a\u043e\u0430\u043a\u0441\u0438\u0430\u043b\u044c\u043d\u0430\u044f \u043b\u0438\u043d\u0438\u044f","5b238cbf":"# \u0421\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u0430\u044f \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u0449\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u043e\u043b\u043e\u0441\u043a\u043e\u0432\u0430\u044f \u043b\u0438\u043d\u0438\u044f","daf75067":"# \u041a\u043e\u043c\u043f\u043b\u0430\u043d\u0430\u0440\u043d\u0430\u044f \u0449\u0435\u043b\u0435\u0432\u0430\u044f \u043b\u0438\u043d\u0438\u044f \u0431\u0435\u0437 \u044d\u043a\u0440\u0430\u043d\u0430","4dc28878":"# \u0429\u0435\u043b\u0435\u0432\u0430\u044f \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043b\u0438\u043d\u0438\u044f","55003a8f":"# \u041a\u043e\u043c\u043f\u043b\u0430\u043d\u0430\u0440\u043d\u0430\u044f \u0449\u0435\u043b\u0435\u0432\u0430\u044f \u043b\u0438\u043d\u0438\u044f \u043d\u0430 \u0442\u043e\u043b\u0441\u0442\u043e\u0439 \u043f\u043e\u0434\u043b\u043e\u0436\u043a\u0435","59d22682":"# \u0421\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u0430\u044f \u044d\u043a\u0440\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u0430\u044f \u043f\u043e\u043b\u043e\u0441\u043a\u043e\u0432\u0430\u044f \u043b\u0438\u043d\u0438\u044f"}}