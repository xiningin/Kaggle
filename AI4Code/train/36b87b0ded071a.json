{"cell_type":{"dad7d0b9":"code","16c2a0b6":"code","c22a112e":"code","9fdb2681":"code","dbdd1cb9":"code","4d147621":"code","4d8b2e69":"code","ed0cd301":"code","d99450f1":"code","eef4b963":"code","0cfe23cd":"code","2d7a0d55":"code","cf35335f":"code","74345d14":"code","8eeb31a2":"code","bebd0dd8":"code","2709b9d1":"code","94fa0094":"code","05ce9fee":"code","bf3c6a68":"code","0bcba2a0":"code","d8d6fd25":"code","eb657149":"code","98d4fa2f":"code","a1ee8be1":"code","7b8fcfc1":"code","72f34674":"code","f3205c3f":"code","3bb9198b":"code","7bcb887c":"code","55691d72":"code","13e42851":"code","9e7fa237":"code","b6eab458":"code","09099b27":"markdown","71422010":"markdown","22fe4747":"markdown","f00046b9":"markdown","17ecada5":"markdown","49a709c9":"markdown","3d5f6f0e":"markdown","05272f9e":"markdown","0d8ba26a":"markdown","54f63af6":"markdown","6d6573af":"markdown","46e18979":"markdown","62452e2d":"markdown","b712b896":"markdown","92e77a13":"markdown","f8e0efa6":"markdown","ee8fe971":"markdown","02d2b0c0":"markdown","db95a808":"markdown","5745118d":"markdown"},"source":{"dad7d0b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16c2a0b6":"import matplotlib.pyplot as plt","c22a112e":"data = pd.read_csv('..\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv')\ndata2 = pd.read_csv('..\/input\/graduate-admissions\/Admission_Predict.csv')\n\ndataset = pd.concat([data, data2])\n\ndataset.sample(5)","9fdb2681":"dataset.drop(columns=['Serial No.'], axis=1, inplace=True)\n\nX = dataset.iloc[:,:-1].values\ny = dataset.iloc[:,-1].values","dbdd1cb9":"print(dataset.columns)","4d147621":"dataset.describe()","4d8b2e69":"dataset.isnull().sum()","ed0cd301":"import seaborn as sns\nsns.pairplot(dataset)\nplt.show()","d99450f1":"corr = dataset.corr()\nfig, ax = plt.subplots(figsize=(8, 8))\ncolormap = sns.diverging_palette(220, 10, as_cmap=True)\ndropSelf = np.zeros_like(corr)\ndropSelf[np.triu_indices_from(dropSelf)] = True\ncolormap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr, cmap=colormap, linewidths=.5, annot=True, fmt=\".2f\", mask=dropSelf)\nplt.title('Graduate Admissions - Features Correlations\\n#100MLProjects #laxmena')\nplt.show()\nfig.savefig('Correlation.png')","eef4b963":"import seaborn as sns\n\nsns.distplot(dataset.iloc[:,0].values)","0cfe23cd":"# GRE Scores\ngre_median = np.median(dataset.iloc[:,0].values)\ngre_mean = np.mean(dataset.iloc[:,0].values)\n\nprint(\"GRE Scores Summary\")\nprint(\"GRE Median: \", gre_median)\nprint(\"GRE Mean: \", gre_mean)","2d7a0d55":"import seaborn as sns\n\nsns.distplot(dataset.iloc[:,1].values)","cf35335f":"# TOEFL Scores\ntoefl_median = np.median(dataset.iloc[:,1].values)\ntoefl_mean = np.mean(dataset.iloc[:,1].values)\n\nprint(\"TOEFL Scores Summary\")\nprint(\"TOEFL Median: \", toefl_median)\nprint(\"TOEFL Mean: \", toefl_mean)","74345d14":"import seaborn as sns\n\nsns.distplot(dataset.iloc[:,-3].values)","8eeb31a2":"# GRE Scores\ncgpa_median = np.median(dataset.iloc[:,-3].values)\ncgpa_mean = np.mean(dataset.iloc[:,-3].values)\n\nprint(\"CGPA Scores Summary\")\nprint(\"CGPA Median: \", cgpa_median)\nprint(\"CGPA Mean: \", cgpa_mean)","bebd0dd8":"\nthreshold = 0.75\nplt.scatter(X[:,0][y>threshold], y[y>threshold], color='green', label='>' + str(threshold*100)+' Chance of Admit')\nplt.scatter(X[:,0][y<=threshold], y[y<=threshold], color='red', label='<' + str(threshold*100)+' Chance of Admit')\nplt.xlabel('GRE Score')\nplt.ylabel('Chance of Admit')\nplt.title('GRE Score vs Chance of Admit')\nplt.legend()\nplt.show()","2709b9d1":"threshold = 0.8\nplt.scatter(X[:,1][y>threshold], y[y>threshold], color='green', label='>' + str(threshold*100)+' Chance of Admit')\nplt.scatter(X[:,1][y<=threshold], y[y<=threshold], color='red', label='<' + str(threshold*100)+' Chance of Admit')\nplt.xlabel('TOEFL Score')\nplt.ylabel('Chance of Admit')\nplt.title('TOEFL Score vs Chance of Admit')\nplt.legend()\nplt.show()","94fa0094":"plt.scatter(X[:,0], X[:,1], color='blue')\nplt.xlabel('GRE Score')\nplt.ylabel('TOEFL Score')\nplt.title('GRE Score vs TOEFL Score')\nplt.show()","05ce9fee":"threshold = 0.8\nplt.scatter(X[:,-2][y>threshold], y[y>threshold], color='green', label='>' + str(threshold*100)+' Chance of Admit')\nplt.scatter(X[:,-2][y<=threshold], y[y<=threshold], color='red', label='<' + str(threshold*100)+' Chance of Admit')\nplt.xlabel('CGPA')\nplt.ylabel('Chance of Admit')\nplt.title('CGPA vs Chance of Admit')\nplt.legend()\nplt.show()","bf3c6a68":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\ndef feature_scaler(X):\n  sc = StandardScaler()\n  X[:,:-1] = sc.fit_transform(X[:,:-1])  \n  return X\n\nX_train = feature_scaler(X_train)\nX_test = feature_scaler(X_test)","0bcba2a0":"from sklearn.metrics import mean_absolute_error, mean_squared_error","d8d6fd25":"from sklearn.linear_model import LinearRegression\n\nlinear_regressor = LinearRegression()\nlinear_regressor = linear_regressor.fit(X_train, y_train)","eb657149":"y_pred_lr = linear_regressor.predict(X_test)\n\nlinear_regressor_score = round(linear_regressor.score(X_test, y_test)*100, 2)\nlinear_regressor_mas = mean_absolute_error(y_test,y_pred_lr)\nlinear_regressor_rmse = np.sqrt(mean_squared_error(y_test,y_pred_lr))\n\nprint('Accuracy Score: ',linear_regressor_score,'%')\nprint('Mean Absolute Error: ', linear_regressor_mas)\nprint('RMSE: ', linear_regressor_rmse)","98d4fa2f":"print('Intercept: \\n', linear_regressor.intercept_)\nprint('Coefficients: \\n', linear_regressor.coef_)","a1ee8be1":"from sklearn.tree import DecisionTreeRegressor\n\ndecision_tree_regressor = DecisionTreeRegressor()\ndecision_tree_regressor = decision_tree_regressor.fit(X_train, y_train)","7b8fcfc1":"y_pred_dt = decision_tree_regressor.predict(X_test)\n\ndecision_tree_score = round(decision_tree_regressor.score(X_test, y_test)*100, 2)\ndecision_tree_mas = mean_absolute_error(y_test,y_pred_dt)\ndecision_tree_rmse = np.sqrt(mean_squared_error(y_test,y_pred_dt))\n\nprint('Accuracy: ', decision_tree_score,'%')\nprint('Mean Absolute Error: ', decision_tree_mas)\nprint('RMSE: ', decision_tree_rmse)","72f34674":"### Random Forest Regression Model","f3205c3f":"from sklearn.ensemble import RandomForestRegressor\n\nrandom_forest_regressor = RandomForestRegressor()\nrandom_forest_regressor = random_forest_regressor.fit(X_train, y_train)","3bb9198b":"y_pred_rf = random_forest_regressor.predict(X_test)\n\nrandom_forest_score = round(random_forest_regressor.score(X_test, y_test)*100, 2)\nrandom_forest_mas = mean_absolute_error(y_test,y_pred_rf)\nrandom_forest_rmse = np.sqrt(mean_squared_error(y_test,y_pred_rf))\n\nprint('Accuracy: ', random_forest_score,'%')\nprint('Mean Absolute Error: ', random_forest_mas)\nprint('RMSE: ', random_forest_rmse)","7bcb887c":"from sklearn.svm import SVR\n\nsvr_regressor = SVR(kernel='linear')\nsvr_regressor = svr_regressor.fit(X_train, y_train)","55691d72":"y_pred_svr = svr_regressor.predict(X_test)\n\nsvr_score = round(svr_regressor.score(X_test, y_test)*100, 2)\nsvr_mas = mean_absolute_error(y_test,y_pred_svr)\nsvr_rmse = np.sqrt(mean_squared_error(y_test,y_pred_svr))\n\nprint('Accuracy: ', svr_score,'%')\nprint('Mean Absolute Error: ', svr_mas)\nprint('RMSE: ', svr_rmse)","13e42851":"df = pd.DataFrame({'Regression Model': ['Linear Regression', 'Decision Tree Regression', 'Random Forest Regression', 'SVR Model'],\n                  'Accuracy Score': [linear_regressor_score, decision_tree_score, random_forest_score, svr_score],\n                   'Mean Absolute Error': [linear_regressor_mas, decision_tree_mas, random_forest_mas, svr_mas],\n                   'Root Mean Squared Error': [linear_regressor_rmse, decision_tree_rmse, random_forest_rmse, svr_rmse]},\n                  columns= ['Regression Model', 'Accuracy Score', 'Mean Absolute Error', 'Root Mean Squared Error'])\nprint(df.to_markdown())","9e7fa237":"importance_frame = pd.DataFrame()\nimportance_frame['Importance'] = random_forest_regressor.feature_importances_\nimportance_frame['Features'] = dataset.columns[:-1]","b6eab458":"plt.barh([1,2,3,4,5,6,7], importance_frame['Importance'], align='center', alpha=0.5)\nplt.yticks([1,2,3,4,5,6,7], importance_frame['Features'])\nplt.xlabel('Importance')\nplt.title('Feature Importances')\nplt.show()","09099b27":"## Exploring Dataset:\n","71422010":"### SVR Model","22fe4747":"### GRE Score vs TOEFL Score\n\nTo compare How high scoring stuents GRE perform in TOEFL","f00046b9":"### TOEFL Score Distribution\n","17ecada5":"### CGPA Distribution","49a709c9":"### GRE vs Admit Probability","3d5f6f0e":"\nThis dataset is created by Mohan Acharya to understand graduate admission process from an Indian Perspective.\n\nDataset contains features like GRE Scores, TOEFL, CGPA, SOP Rating, LOR Rating, Research Papers and University Ratings.\n\nThese features are used to predict the chance of admit for a given student.\n\nNote: 'Chance of Admit' is the probability of getting an admission for the given college for masters program.","05272f9e":"### GRE Score","0d8ba26a":"There are no missing data's in the dataset, the data is already cleaned.","54f63af6":"**Inference:**\n\nFrom my countless hours surfing internet and gathering details about masters program and application process, one feature that all the blogs and articles agreed was - A good 'SOP' could compensate for other weak scores(like GRE, CGPA)\n\nBut this visualization tells us a different story. SOP and LOR are required features, but they are not the game changers. An average SOP with 3.0 rating can still get higher chance of admits in graduate colleges.\n\n**University Rating vs SOP\/LOR**:\n- SOP's didnt seem to play a significant role for Graduate colleges with 4.0 rating\n- Universities with 5.0 rating, has no admissions for applicants with SOP's less than 3.0 score.  \n\n**Research Papers**:\n- Research papers doesnt seem to play a significant role in the outcome of the admissions here.\n","6d6573af":"## Visualizing Feature Importance","46e18979":"## Building Machine Learning Models","62452e2d":"## Split Dataset into Training and Test Dataset, Feature Scaling\n","b712b896":"The mean GRE Score is 316, and TOEFL is 107.\n\n* **Inference:** GRE is really a challenging exam to tackle, and several Indian students have aced it. The mean score 316 is by itself a very good score.*\n\n**Average CGPA: 8.59** (My CGPA during Undergrad is 8.59)\n\n* **Inference:** Students who try to pursue masters program have performed incredibly well in their undergrauate programs.*","92e77a13":"## Comparing Machine Learning Models","f8e0efa6":"# 100MLProjects - Project #1: Graduate Admissions Predicition\n\n![100MLProjects Project1](https:\/\/miro.medium.com\/max\/700\/1*QDNlBUhcLLiPrjQV27G2ZA.png)\n\nDataset Source: https:\/\/www.kaggle.com\/mohansacharya\/graduate-admissions \n\nDate: June 12, 2020\n\n### Lakshmanan Meiyappan\nLinkedIn: https:\/\/www.linkedin.com\/in\/lakshmanan-meiyappan\/\n\nGithub: https:\/\/github.com\/laxmena\/\n","ee8fe971":"### Decision Tree","02d2b0c0":"### TOEFL vs Chance of Admit","db95a808":"### Linear Regression","5745118d":"### CGPA vs Chance of Admit"}}