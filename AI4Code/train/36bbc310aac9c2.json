{"cell_type":{"7a1f8a41":"code","451de0b9":"code","f249d92f":"code","1f457e21":"code","6612e15e":"code","1c57fd79":"code","a5b439e9":"code","a243e784":"code","1626766a":"code","af9b891f":"code","9ed2732d":"code","05bf8a53":"code","d5eb9f70":"code","dd6f3d34":"code","336859a4":"code","bb1ec85a":"code","dfce1c85":"code","e9c16def":"code","786c777f":"code","1f43c0a8":"code","e3b16754":"code","6b2f0733":"code","d520a1c5":"code","27884ad6":"code","d2e6e0fa":"code","8b311af7":"code","7e68c9fb":"code","f905bc21":"code","f783e20a":"code","6cb8e158":"code","c5073f8e":"code","c1ce1d2f":"code","a2fffce6":"code","8f1c47ce":"code","5e53fe43":"code","e2d3a659":"code","392e8a78":"code","890cc970":"code","9c284742":"code","5557e02e":"code","cdf388d2":"code","8a0969bb":"code","fc5a56b3":"code","593896c1":"code","9362b262":"code","0a9e5bc7":"code","8e706d6b":"code","83852666":"code","789870b5":"code","02bea770":"code","058d35a5":"code","9d88191c":"code","bb5c85b8":"code","c481134e":"markdown","3236af43":"markdown"},"source":{"7a1f8a41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","451de0b9":"!pwd # checking the current location ","f249d92f":"%cd \/kaggle\/input\/dogs-vs-cats\/train # going to the directory of the data","1f457e21":"import shutil\nimport os\nimport pandas as pd\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport random","6612e15e":"pic_path = '\/kaggle\/input\/dogs-vs-cats\/train\/train'\nfile_name = []\ncategories = []\n\nfor pic in os.listdir(pic_path):\n    file_name.append(os.path.join(pic_path,pic))\n    if pic.split('.')[0] == 'dog':\n        label = 'dog'\n    else:\n        label = 'cat'\n    categories.append(label)\n    \n    \ndf_train = pd.DataFrame({'file_name':file_name,\n                        'category':categories})    ","1c57fd79":"df_train.head()","a5b439e9":"df_train = df_train.sample(frac = 1) ","a243e784":"df_train.reset_index(drop = True, inplace = True)","1626766a":"from sklearn.model_selection import train_test_split","af9b891f":"train_df,validation_df = train_test_split(df_train,test_size = 0.2, random_state = 42,stratify = df_train.category)\nvalidation_df = validation_df.reset_index(drop=True)\ntrain_df = train_df.reset_index(drop=True)","9ed2732d":"print(validation_df.category.value_counts())\nprint(train_df.category.value_counts())","05bf8a53":"total_train = train_df.shape[0]\ntotal_validate = validation_df.shape[0]","d5eb9f70":"from keras.preprocessing.image import ImageDataGenerator","dd6f3d34":"train_datagen = ImageDataGenerator(\n    rotation_range=30,\n    rescale=1.\/255,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True\n)\n","336859a4":"validation_datagen = ImageDataGenerator(rescale=1.\/255)","bb1ec85a":"img  = plt.imread(df_train.file_name[0])\nplt.imshow(img)","dfce1c85":"train_generator = train_datagen.flow_from_dataframe(\n     train_df,  \n    x_col='file_name',\n    y_col='category',\n    target_size=(200,200),\n    class_mode='binary',\n    color_mode = 'rgb',\n\n    batch_size = 64\n)","e9c16def":"validation_generator = validation_datagen.flow_from_dataframe(\n    validation_df,\n    x_col='file_name',\n    y_col='category',\n    target_size=(200,200),\n    class_mode='binary',\n    color_mode = 'rgb',\n    shuffle = False,\n\n    batch_size = 64\n)","786c777f":"for data_batch, labels_batch in train_generator:\n  print('data batch shape:', data_batch.shape)\n\n  print('labels batch shape:', labels_batch.shape)\n  break","1f43c0a8":"from keras.callbacks import EarlyStopping, ReduceLROnPlateau\nearlystop = EarlyStopping(patience=10, monitor = 'val_loss',mode = 'min',verbose = 1)\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\ncallbacks = [earlystop, learning_rate_reduction]","e3b16754":"from tensorflow.keras.applications.vgg16 import VGG16","6b2f0733":"ConvBase = VGG16(include_top = False,weights = 'imagenet',input_shape = (150,150,3))","d520a1c5":"ConvBase.summary()","27884ad6":"len(ConvBase.trainable_weights)","d2e6e0fa":"for layer in ConvBase.layers:\n    print(layer.name)","8b311af7":"for layer in ConvBase.layers[:15]:\n    layer.trainable = False\nfor layer in ConvBase.layers[15:]:\n    layer.trainable = True","7e68c9fb":"# ConvBase.trainable = False\nConvBase.trainable = True\n# set_trainable = False\nfor layer in ConvBase.layers:\n  if layer.name == 'block5_conv1':\n    layer.trainable = True\n  else :\n    layer.trainable = False  \n","f905bc21":"for layer in ConvBase.layers:\n    print(layer.name)","f783e20a":"# now lets introduce fine tuning it will improve model very much\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\nfrom keras.models import Sequential\nfrom keras import optimizers \nmodel = Sequential()\nmodel.add(ConvBase)\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu',kernel_initializer='he_uniform'))\nmodel.add(BatchNormalization())\n# model.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax')) # 2 because we have cat and dog classes\n\nmodel.compile(loss='catego_crossentropy', optimizer=optimizers.SGD(lr = 1e-4, momentum  = 0.9), metrics=['accuracy'])\n\nmodel.summary()","6cb8e158":"len(model.trainable_weights)","c5073f8e":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization\n\n\nmodel = Sequential()\n\nmodel.add(Conv2D(24, (3, 3), activation='relu', input_shape=(150,150,3),kernel_initializer = 'he_normal'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), activation='relu',kernel_initializer = 'he_normal'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3, 3), activation='relu',kernel_initializer = 'he_normal'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu',kernel_initializer = 'he_normal'))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid')) # 2 because we have cat and dog classes\n\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])\n\nmodel.summary()","c1ce1d2f":"%%time\nhistory = model.fit_generator(\n    train_generator, \n    epochs=5,\n    validation_data=validation_generator,\n    validation_steps=total_validate\/\/40,\n    steps_per_epoch=total_train\/\/40,\n    callbacks = callbacks\n)","a2fffce6":"fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 12))\n\nax1.plot(history.history['loss'],color = 'b',label = 'loss')\nax1.plot(history.history['val_loss'],color = 'r',label = 'val_loss')\nax1.set_xticks(np.arange(1, 5, 1))\nax1.set_yticks(np.arange(0, 1, 0.1))\nax1.legend(['loss','val_loss'],shadow = True)\n\n\nax2.plot(history.history['accuracy'],color = 'green',label = 'accuracy')\nax2.plot(history.history['val_accuracy'],color = 'red',label = 'val_accuracy')\nax2.legend(['accuracy','val_accuracy'],shadow = True)\nax2.set_xticks(np.arange(1, 5, 1))\nax2.set_yticks(np.arange(0, 1, 0.1))\nplt.show()","8f1c47ce":"plt.plot(history.history['accuracy'],'o-')\nplt.plot(history.history['val_accuracy'],'-')\nplt.legend(['accuracy','val_accuracy'])","5e53fe43":"def smooth_curve(points, factor=0.8):\n  smoothed_points = []\n  for point in points:\n    if smoothed_points:\n      previous = smoothed_points[-1]\n      smoothed_points.append(previous * factor + point * (1 - factor))\n    else:\n      smoothed_points.append(point)\n  return smoothed_points","e2d3a659":"plt.plot(smooth_curve(history.history['loss']),'o-')\nplt.plot(smooth_curve(history.history['val_loss']),'-')\nplt.legend(['loss','val_loss'])","392e8a78":"plt.plot(smooth_curve(history.history['accuracy']),'o-')\nplt.plot(smooth_curve(history.history['val_accuracy']),'-')\nplt.legend(['accuracy','val_accuracy'])","890cc970":"from keras.models import load_model","9c284742":"model.save('\/kaggle\/working\/catdog-vgg16_2.h5')","5557e02e":"saved_model = load_model('\/kaggle\/working\/catdog-vgg16.h5')","cdf388d2":"test_datagen = ImageDataGenerator(rescale=1.\/255)","8a0969bb":"valid_generator = test_datagen.flow_from_dataframe(\n    \n     validation_df,\n    x_col='file_name',\n    y_col='category',\n    target_size=(150,150),\n    class_mode='categorical',\n    color_mode = 'rgb',\n    shuffle = False,\n\n    batch_size = 40\n    \n)","fc5a56b3":"predicted = saved_model.predict(valid_generator,steps = np.ceil(5000\/40))","593896c1":"valid_df = validation_df.copy()\nresult = np.where(predicted > 0.5,1,0)","9362b262":"valid_df['result'] = result","0a9e5bc7":"valid_df['category'] = valid_df['category'].map({'dog':1,'cat':0})","8e706d6b":"from sklearn.metrics import confusion_matrix,classification_report\nprint(classification_report(valid_df['category'],result))","83852666":"test_dir = '\/kaggle\/input\/dogs-vs-cats\/test\/test'\ntest_file_name = []\nfor pic in os.listdir(test_dir):\n    file_name = os.path.join(test_dir,pic)\n    test_file_name.append(file_name)\n    \n    \ntest_df = pd.DataFrame({'file_name':test_file_name})    \n","789870b5":"test_gen = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_gen.flow_from_dataframe(\n     test_df,  \n    x_col='file_name',\n    target_size=(150,150),\n    class_mode=None,\n    color_mode = 'rgb',\n    shuffle = False,\n\n    batch_size = 40\n)","02bea770":"predict = saved_model.predict_generator(test_generator, steps=np.ceil(12500\/40))","058d35a5":"test_df['probability'] = predict","9d88191c":"test_df['category'] = np.where(predict > 0.5, 1,0)","bb5c85b8":"sample_df = test_df[:50]\nplt.figure(figsize=(12, 24))\nfor index, row in sample_df.iterrows():\n    filename = row['file_name']\n    category = row['category']\n    probability = row['probability']\n    img = plt.imread(filename)\n    plt.subplot(10,5, index+1)\n\n    \n    plt.imshow(img)\n    if category == 1:\n        plt.xlabel(f\" {np.round(probability*100,2)} % DOG\")\n    else:\n        \n        plt.xlabel(f\"{np.round((1 - probability)*100,2)} % CAT\")\nplt.tight_layout()\nplt.show()","c481134e":"### Smoothing of curve for better understanding\n","3236af43":"#### using the VGG16 model for training our data"}}