{"cell_type":{"b067767d":"code","335ba975":"code","9abe2b6f":"code","0a4dab0a":"code","24de8cc2":"code","ef392463":"code","e3084c26":"code","c4d4fadb":"code","62b0a8be":"code","c680780e":"code","e5f52047":"code","d0216193":"code","3795a982":"code","d0adadce":"code","3b5bb57a":"code","8ea3d608":"code","98809f89":"code","c54a4e75":"code","52bfa449":"code","e3090441":"code","11208298":"markdown"},"source":{"b067767d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns; sns.set;\nfrom datetime import timedelta\n#pd.options.display.float_format = '{:, .0f}'.format\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nplt.style.use('fivethirtyeight') ","335ba975":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv').rename(columns = {\"Province\/State\": \"State\", \"Country\/Region\":\"country\",\n                                                                                                   \"ConfirmedCases\":\"cases\", \"Fatalities\":\"deaths\"})\ntrain['Date']=pd.to_datetime(train.Date)\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/submission.csv')","9abe2b6f":"countries = pd.read_csv('\/kaggle\/input\/undata-country-profiles\/country_profile_variables.csv')\ncountries['country'] = countries.country.str.strip()\n#rename columns for easier coding\ncol_dict = {\"Region\":\"Region\",'Surface area (km2)':\"surface_area\", 'Population in thousands (2017)':'pop_in_thou', \n            'Population density (per km2, 2017)':'pop_density','Sex ratio (m per 100 f, 2017)':\"sex_ratio\",\n            'GDP: Gross domestic product (million current US$)':'gdp','GDP growth rate (annual %, const. 2005 prices)':\"gdp_growth\", \n            'Urban population (% of total population)':'urban_pop','Urban population growth rate (average annual %)':'urban_growth_rate',\n            'Fertility rate, total (live births per woman)':'fertility_rate','Life expectancy at birth (females\/males, years)':'life_expectancy',\n            'Population age distribution (0-14 \/ 60+ years, %)':'pop_age_distribution', 'International migrant stock (000\/% of total pop.)':'imigrant_pop',\n            'Infant mortality rate (per 1000 live births':'infant_mortality', 'Health: Total expenditure (% of GDP)':'healthcare_expenditure',\n            'Health: Physicians (per 1000 pop.)':'physicians_per_1000'}\ncountries = countries.rename(columns = col_dict)\ncountries = countries[['country', 'surface_area', 'pop_in_thou','pop_density','sex_ratio','gdp','gdp_growth','urban_pop','urban_growth_rate', 'imigrant_pop',\n           'fertility_rate','life_expectancy','pop_age_distribution','infant_mortality','healthcare_expenditure','physicians_per_1000']]\n#Get the country names from the country data in-line with country nemes in COVID-19 Dataset\ncountries = countries.replace({'Bolivia (Plurinational State of)':'Bolivia', 'Congo':'Congo (Kinshasa)', \n                               'United States of America':'US', 'Iran (Islamic Republic of)':'Iran', 'Bosnia & Herzegovina': 'Bosnia and Herzegovina', \n                               'Venezuela (Bolivarian Republic of)':'Venezuela', \"Viet Nam\": \"Vietnam\", 'Trinidad & Tobago':'Trinidad and Tobago', \n                               'Republic of Korea':'Korea, South', 'Russian Federation':\"Russia\",'Brunei Darussalam':'Brunei',\n                               'United Republic of Tanzania': 'Tanzania', 'Bahamas': 'The Bahamas', 'Gambia': 'Gambia, The',\n                               'The former Yugoslav Republic of Macedonia': 'North Macedonia','Democratic Republic of the Congo': 'Republic of the Congo','Republic of Moldova':\"Moldova\",\n                               'Taiwan': 'Taiwan*', 'Central African Rep.': 'Central African Republic', 'Czech Republic': 'Czechia'})\nage_dist = countries.pop_age_distribution.str.split(\"\/\", expand = True)\ncountries['age_dist_0-14'] = age_dist[0].replace({\"-99\":np.nan, \"...\":np.nan}).astype(float)\ncountries['age_dist_60p'] = age_dist[1].replace({\"-99\":np.nan, \"...\":np.nan}).astype(float)\ncountries['age_dist_14-60'] = 100 - countries['age_dist_0-14']-countries['age_dist_60p']\ncountries = countries.drop([\"pop_age_distribution\", \"surface_area\", 'gdp_growth', 'urban_growth_rate'], axis = 1)\ncountries['gdp_per_cap']=(countries.gdp*1000) \/ (countries.pop_in_thou)\ncountries[countries.gdp_per_cap<0] = np.nan\nlife_ex = countries.life_expectancy.str.split(\"\/\", expand = True)\nlife_ex[0] = life_ex[0].replace({\"-99\":np.nan, \"...\":np.nan}).astype(float)\nlife_ex[1] = life_ex[1].replace({\"-99\":np.nan, \"...\":np.nan}).astype(float)\ncountries['life_expectancy'] = (life_ex[0]+life_ex[1])\/2\ncountries['immigrand_pct'] = countries.imigrant_pop.str.split(\"\/\", expand = True, n=1)[1]\ncountries = countries.drop(['imigrant_pop', 'life_expectancy'], axis = 1)\ncountries = countries[~pd.isna(countries.country)]\ncountries['population'] = countries.pop_in_thou * 1000\n#countries = countries.merge(train[['country', 'Lat', \"Long\"]].drop_duplicates(), how = 'left', on = 'country')","0a4dab0a":"#There is a lot of 'state' data by aggregating it you reduce the number of observations from 17k to 6.5k (on 3\/23)\ndata = train.drop([\"Lat\",\"Long\", \"Id\"], axis =1).groupby([\"country\", \"Date\"]).sum().reset_index()\ndate_past_100 = data[data.cases > 100].groupby('country')[['Date']].min().reset_index()[['country', 'Date']].rename(columns = {\"Date\":\"date_past_100\"})\ndate_past_100\ndata = data.merge(date_past_100, how = 'left', on = 'country')\ndata['date_past_100'] = (data.date_past_100.fillna(pd.to_datetime(-999999)))\ndata['days_since_100'] = ((data.Date - data.date_past_100)\/(8.64e+13)).astype(int)\ndata.loc[(data['days_since_100'] < 0) | (data['days_since_100'] > 10000), 'days_since_100'] = 0\ndata = data.drop('date_past_100', axis = 1)","24de8cc2":"data_c = data.merge(countries[['country', 'population']], on = 'country', how = 'left')\ndata_c['cases_p_1000'] = data_c.cases \/ (data_c.population \/ 1000)\ndata_c['deaths_p_1000'] = data_c.deaths \/ (data_c.population \/ 1000)","ef392463":"max_cases = data_c.groupby('country')[['cases_p_1000', 'deaths_p_1000', 'cases', 'deaths']].max().sort_values('cases_p_1000')\ntop_10 = max_cases[~pd.isna(max_cases.cases_p_1000)].sort_values('cases', ascending = False).head(10).reset_index()\ntop_10_countries = top_10.country.tolist()","e3084c26":"train_clean= pd.DataFrame([])\nfor country in data_c.country.unique():\n    cou_dat = data_c[data_c.country == country]\n    cou_dat['pct_chg_cases']=(cou_dat.cases.pct_change()).fillna(0).tolist()\n    cou_dat['days_to_double']=(1\/cou_dat.cases.pct_change()).fillna(0).tolist()\n    cou_dat['DtD_sma5'] = cou_dat.iloc[:,9].rolling(window=5).mean()\n    cou_dat['pct_c_cases'] = cou_dat.iloc[:,8].rolling(window=5).mean()\n    cou_dat['cases_10_days_prior'] = cou_dat[['cases']].shift(periods = 5).fillna(0)\n    cou_dat['deaths_15_days_prior'] = cou_dat[['deaths']].shift(periods = 15).fillna(0)\n    cou_dat['new_cases'] = cou_dat['cases'].diff()\n    train_clean = train_clean.append(cou_dat)\ntrain_clean = train_clean.replace([np.inf, -np.inf], 0)","c4d4fadb":"plot_dat = train_clean[train_clean.country.isin(top_10_countries)]\nlast_obs=plot_dat.groupby('country', as_index = False).max()","62b0a8be":"plot_dat = train_clean[train_clean.country.isin(top_10_countries)]\n#ax[0].set(yscale = 'log')\nax[0].set_ylim([100,20000])\n#ax.set_xlim([0,30])\nsns.lineplot(x=\"days_since_100\", y=\"new_cases\", hue = \"country\", data = plot_dat, markers = True, ax=ax[0])\nax[0].set(xlabel='Days Since 100th Case', ylabel = \"New Cases\", title = \"New Daily Corona Cases\")\n#plt.xticks(rotation=30)\n\nax[1].set(yscale = 'log'); ax[1].set_ylim([100,100000])\nax[1].set_xlim([0,30])\nsns.lineplot(x=\"days_since_100\", y=\"cases\", hue = \"country\", data = plot_dat, markers = True, ax=ax[1])\nax[1].set(xlabel='Days Since 100th Case', ylabel = \"Cases (log-scale)\", title = \"Total Cases\")\n#plt.xticks(rotation=30)","c680780e":"f,ax = plt.subplots(figsize=(15,7))\n#ax.set(yscale = 'log')\nax.set_ylim([0,20])\nax.set_xlim([0,30])\np1=sns.lineplot(x=\"days_since_100\", y=\"DtD_sma5\", hue = \"country\", data = plot_dat, markers = True)\nax.set(xlabel='Days Since 100th Case', ylabel = \"Days to Double\", title = \"Days to Double Cases\")\n#plt.xticks(rotation=30)\nfor item, color in zip(plot_dat.groupby(country).max().Date)","e5f52047":"data = train.drop([\"Lat\",\"Long\", \"Id\"], axis =1).groupby([\"country\", \"Date\"]).sum().reset_index()\ndata= data.merge(countries[['country','population', 'urban_pop']], on = 'country', how = 'left')\ndata['cases_p_pop'] = data.cases \/ data.population \ndata['deaths_p_pop'] = data.deaths \/ data.population\n","d0216193":"data","3795a982":"data.groupby('country', 'Date').","d0adadce":"data.head()","3b5bb57a":"countries.country.unique()","8ea3d608":"train.country.unique()","98809f89":"mer= train.merge(countries[['country','pop_in_thou']], on = 'country', how = 'left')\nmer[pd.isna(mer.pop_in_thou)].country.unique()","c54a4e75":"data_country_totals = train.groupby(['country', 'Date'])[['cases', 'deaths']].sum().reset_index()\ndata_country_totals = data_country_totals.merge(countries[['country','Population', 'pop_density']], on = 'country', how = 'left')\npd.options.display.float_format = '{:,.0f}'.format\nag_f = {'cases':'sum', 'deaths': 'sum', 'Population':'mean', 'pop_density':'mean'}\ndata_country_totals.groupby(\"country\")[['cases','deaths']].agg(ag_f)","52bfa449":"#train_pop[pd.isna(train_pop.Population)]","e3090441":"data_country_totals","11208298":"Id - observation ID\n\nCountry - Country name (does this correlate to UN data?)\n\nother columns are self explanitory"}}