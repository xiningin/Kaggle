{"cell_type":{"b4e7024a":"code","d42ee784":"code","707c152a":"code","8be124da":"code","7cebf29c":"code","03c7087a":"code","b7bf29c1":"code","3d5a2859":"code","d3f60c2a":"code","b0e8bd28":"code","6cf4bf1a":"code","7ec3481d":"code","cc8b51c4":"code","13b04d17":"code","d9bfc23a":"code","df996be7":"code","853cee95":"code","9e015fc2":"code","fe5d75b3":"code","31b3c0fb":"code","bb4adf28":"code","0042e06b":"code","a2f1ac11":"code","806c9862":"code","34719c45":"code","eb2990ef":"markdown"},"source":{"b4e7024a":"# previous kernel using BERT I got 83% accuracy\n# in this kernel I will try to improve it","d42ee784":"from numpy.random import seed\nseed(42)\nimport tensorflow as tf\ntf.random.set_seed(42)\n\nfrom tensorflow.keras.layers import Dense, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nimport tensorflow_hub as hub","707c152a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport time\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8be124da":"train_df = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/test.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/nlp-getting-started\/sample_submission.csv\")","7cebf29c":"train_df.head()","03c7087a":"train_df.info()","b7bf29c1":"train_df.shape","3d5a2859":"test_df.shape","d3f60c2a":"test_df.info()","b0e8bd28":"train_df.isnull().sum()","6cf4bf1a":"test_df.isnull().sum()","7ec3481d":"# train_df['keyword'][train_df.keyword.isnull()] = 'no_keyword'\n# train_df['location'][train_df.location.isnull()] = 'no_location'\n# test_df['keyword'][test_df.keyword.isnull()] = 'no_keyword'\n# test_df['location'][test_df.location.isnull()] = 'no_location'","cc8b51c4":"!wget --quiet https:\/\/raw.githubusercontent.com\/tensorflow\/models\/master\/official\/nlp\/bert\/tokenization.py","13b04d17":"import tokenization","d9bfc23a":"def bert_encode(texts, tokenizer, max_len=512):\n    all_tokens = []\n    all_masks = []\n    all_segments = []\n    \n    for text in texts:\n        text = tokenizer.tokenize(text)\n            \n        text = text[:max_len-2]\n        input_sequence = [\"[CLS]\"] + text + [\"[SEP]\"]\n        pad_len = max_len - len(input_sequence)\n        \n        tokens = tokenizer.convert_tokens_to_ids(input_sequence)\n        tokens += [0] * pad_len\n        pad_masks = [1] * len(input_sequence) + [0] * pad_len\n        segment_ids = [0] * max_len\n        \n        all_tokens.append(tokens)\n        all_masks.append(pad_masks)\n        all_segments.append(segment_ids)\n    \n    return np.array(all_tokens), np.array(all_masks), np.array(all_segments)","df996be7":"Dropout_num = 0\nlearning_rate = 7e-6\nvalid = 0.2\nepochs_num = 3\nbatch_size_num = 16\ntarget_corrected = False\ntarget_big_corrected = False","853cee95":"def build_model(bert_layer, max_len=512):\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    segment_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"segment_ids\")\n\n    _, sequence_output = bert_layer([input_word_ids, input_mask, segment_ids])\n    clf_output = sequence_output[:, 0, :]\n    if Dropout_num == 0:\n        out = Dense(1, activation='sigmoid')(clf_output)\n    else:\n        # With Dropout(Dropout_num), Dropout_num > 0\n        x = Dropout(Dropout_num)(clf_output)\n        out = Dense(1, activation='sigmoid')(x)\n    \n    model = Model(inputs=[input_word_ids, input_mask, segment_ids], outputs=out)\n    model.compile(Adam(lr=learning_rate), loss='binary_crossentropy', metrics=['accuracy'])\n    \n    return model","9e015fc2":"%%time\nmodule_url = \"https:\/\/tfhub.dev\/tensorflow\/bert_en_uncased_L-24_H-1024_A-16\/1\"\nbert_layer = hub.KerasLayer(module_url, trainable=True)","fe5d75b3":"if target_corrected:\n    ids_with_target_error = [328,443,513,2619,3640,3900,4342,5781,6552,6554,6570,6701,6702,6729,6861,7226]\n    train_df.loc[train_df['id'].isin(ids_with_target_error),'target'] = 0\n    train_df[train_df['id'].isin(ids_with_target_error)]","31b3c0fb":"# Loading tokenizer from the bert layer\nvocab_file = bert_layer.resolved_object.vocab_file.asset_path.numpy()\ndo_lower_case = bert_layer.resolved_object.do_lower_case.numpy()\ntokenizer = tokenization.FullTokenizer(vocab_file, do_lower_case)","bb4adf28":"# Encoding the text into tokens, masks, and segment flags\ntrain_input = bert_encode(train_df.text.values, tokenizer, max_len=160)\ntest_input = bert_encode(test_df.text.values, tokenizer, max_len=160)\ntrain_labels = train_df.target.values","0042e06b":"model = build_model(bert_layer, max_len=160)\nmodel.summary()","a2f1ac11":"train_history = model.fit(\n    train_input, train_labels,\n    validation_split=0.2,\n    epochs=5,\n    batch_size=8\n)\n\nmodel.save('model.h5')","806c9862":"test_pred = model.predict(test_input)","34719c45":"sub['target'] = test_pred.round().astype(int)\nsub.to_csv('submission.csv', index=False)\nsub.head()","eb2990ef":"**# Loading BERT from the Tensorflow Hub**"}}