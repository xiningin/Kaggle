{"cell_type":{"20d2324b":"code","8d3f9148":"code","716f8e0a":"code","8c2e648b":"code","3ab50a9a":"code","250cd70e":"code","b5da6260":"code","677ebe81":"code","4e0b1eda":"code","443a08d4":"code","caeb1cfd":"code","72afdc5d":"code","0211d3e4":"code","8fcc9449":"code","ed8599ac":"code","d9e82712":"code","f83dda81":"code","2927b22a":"code","059af5fb":"code","bc595b6d":"code","c93d20b8":"code","fa737230":"code","72a8924c":"code","dea48b7d":"code","862e4ad7":"code","23305d2d":"code","611b46ea":"code","33289759":"code","aaf62370":"code","3bb8228d":"code","05b6e12a":"code","208c453d":"code","64709d9a":"code","7d4888ce":"code","163677a3":"code","a080238b":"code","834d92f0":"markdown","93025e28":"markdown","522055e6":"markdown","e49c30f4":"markdown","2c34d647":"markdown","a3a07eab":"markdown"},"source":{"20d2324b":"# Importing the required libraries\nimport pandas as pd, numpy as np\nimport matplotlib.pyplot as plt, seaborn as sns\n%matplotlib inline","8d3f9148":"# Reading the csv file and putting it into 'df' object.\ndf = pd.read_csv(r\"\/kaggle\/input\/heart-disease-prediction\/heart_v2.csv\")","716f8e0a":"df.columns","8c2e648b":"df.head()","3ab50a9a":"df.shape","250cd70e":"df.info()","b5da6260":"df.describe()","677ebe81":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['age'])\nplt.show()","4e0b1eda":"plt.figure(figsize = (15,5))\nax= sns.countplot(df['sex'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 45)\nplt.show()","443a08d4":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['BP'])\nplt.show()","caeb1cfd":"percentiles = df['BP'].quantile([0.05,0.95]).values\ndf['BP'][df['BP'] <= percentiles[0]] = percentiles[0]\ndf['BP'][df['BP'] >= percentiles[1]] = percentiles[1]","72afdc5d":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['BP'])\nplt.show()","0211d3e4":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['cholestrol'])\nplt.show()","8fcc9449":"percentiles = df['cholestrol'].quantile([0.05,0.95]).values\ndf['cholestrol'][df['cholestrol'] <= percentiles[0]] = percentiles[0]\ndf['cholestrol'][df['cholestrol'] >= percentiles[1]] = percentiles[1]","ed8599ac":"plt.figure(figsize = (10,5))\nax= sns.violinplot(df['cholestrol'])\nplt.show()","d9e82712":"plt.figure(figsize = (15,5))\nax= sns.countplot(df['heart disease'])\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 45)\nplt.show()","f83dda81":"plt.figure(figsize = (10,5))\nsns.violinplot(y = 'age', x = 'heart disease', data = df)\nplt.show()","2927b22a":"plt.figure(figsize = (10,5))\nax= sns.countplot(x = \"sex\", hue = \"heart disease\", data = df)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.01 , p.get_height() * 1.01))\nplt.xticks(rotation = 90)\nplt.show()","059af5fb":"plt.figure(figsize = (10,5))\nsns.violinplot(y = 'BP', x = 'heart disease', data = df)\nplt.show()","bc595b6d":"plt.figure(figsize = (10,5))\nsns.violinplot(y = 'cholestrol', x = 'heart disease', data = df)\nplt.show()","c93d20b8":"\nplt.figure(figsize = (10,5))\nsns.heatmap(df.corr(), annot = True, cmap=\"rainbow\")\nplt.show()","fa737230":"df.describe()","72a8924c":"# Putting feature variable to X\nX = df.drop('heart disease',axis=1)\n\n# Putting response variable to y\ny = df['heart disease']","dea48b7d":"from sklearn.model_selection import train_test_split","862e4ad7":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.6, random_state=42)\nX_train.shape, X_test.shape","23305d2d":"from sklearn.tree import DecisionTreeClassifier","611b46ea":"dt = DecisionTreeClassifier(max_depth=3)\ndt.fit(X_train, y_train)","33289759":"\nfrom sklearn import tree\ntext_representation = tree.export_text(dt)\nprint(text_representation)","aaf62370":"\nfig = plt.figure(figsize=(25,20))\n_ = tree.plot_tree(dt,\n                   feature_names=X.columns,\n                   class_names=['No Disease', \"Disease\"],\n                   filled=True)","3bb8228d":"import graphviz\n# DOT data\ndot_data = tree.export_graphviz(dt, out_file=None, \n                                feature_names=X.columns, \n                                class_names=['No Disease', \"Disease\"],\n                                filled=True)\n\n# Draw graph\ngraph = graphviz.Source(dot_data, format=\"png\") \ngraph","05b6e12a":"y_train_pred = dt.predict(X_train)\ny_test_pred = dt.predict(X_test)","208c453d":"from sklearn.metrics import confusion_matrix, accuracy_score,classification_report","64709d9a":"print(accuracy_score(y_train, y_train_pred))\nconfusion_matrix(y_train, y_train_pred)","7d4888ce":"print(accuracy_score(y_test, y_test_pred))\nconfusion_matrix(y_test, y_test_pred)","163677a3":"\nprint (classification_report(y_train, y_train_pred))","a080238b":"print (classification_report(y_test, y_test_pred))","834d92f0":"## Visualize Decision Tree with graphviz\n","93025e28":"Fitting the decision tree with default hyperparameters, apart from max_depth which is 3 so that we can plot and read the tree.","522055e6":"# Evaluating model performance","e49c30f4":"## Plot Tree with plot_tree","2c34d647":"## Print Text Representation","a3a07eab":"# EDA"}}