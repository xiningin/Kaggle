{"cell_type":{"e2a9d546":"code","7f05411d":"code","cb908c55":"code","794724e8":"code","38591c41":"code","3b3ecb6b":"code","07d01480":"code","31be1b80":"code","3dba815c":"code","3ce9f11c":"code","d6e004f5":"code","877c319c":"code","b7f8d03d":"code","0970bd75":"code","67e31a97":"code","ad35e59e":"code","bcdb2194":"code","19042c28":"code","024cd9b7":"code","4f78c948":"code","c1efd7db":"markdown","abc1d61a":"markdown","4bba41e1":"markdown","ea7b7dcd":"markdown","67085cbc":"markdown"},"source":{"e2a9d546":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport nltk\n\nimport re\nimport string\nimport emoji\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7f05411d":"df = pd.read_csv('\/kaggle\/input\/tweets\/train.csv')","cb908c55":"df.head()\ndf.info()\n#check if we have a balanced or unbalanced data\ndf['target'].value_counts()","794724e8":"import seaborn as sns\nsns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')","38591c41":"\n#this correlation matrix can give as the most correlate features with class target\nplt.figure(figsize = (30, 25))\nsns.heatmap(df.corr(), annot = True, cmap=\"YlGnBu\")\nplt.show()","3b3ecb6b":"label=df['target']\ndata=df.drop(['location'],axis=1)\ndata=data.drop(['id'],axis=1)\ndata=data.drop(['keyword'],axis=1)\ndata.head()","07d01480":"data.count()\n#data  = df.iloc[:,3:]\n","31be1b80":"from sklearn.preprocessing import LabelEncoder\nX2=df['keyword']\nle2=LabelEncoder()\nX2New=le2.fit_transform(X2)\nX2New=X2New.reshape(-1,1)\nkeyword=pd.DataFrame(X2New)\ndata=np.concatenate((data,keyword),axis=1)\ndata=pd.DataFrame(data)\ndata.head()\n","3dba815c":"data.head()\ndata.isnull().sum()","3ce9f11c":"test = pd.read_csv('\/kaggle\/input\/tweets\/test.csv')\ntest=test[\"text\"]\ntest.head()\ndata=df[\"text\"]","d6e004f5":"import tensorflow as tf \nfrom tensorflow import keras\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing import sequence\n#transformer la base de test en numerique\nmax_words=1000\nmax_len=150\ntoken=Tokenizer(num_words=max_words)\ntoken.fit_on_texts(data)\nsequences=token.texts_to_sequences(data)\n\nsequences_matrix=sequence.pad_sequences(sequences,maxlen=max_len,padding='post')\n","877c319c":"label=pd.DataFrame(label)\nsequences_matrix=pd.DataFrame(sequences_matrix)\n\nlabel.shape\nsequences_matrix.shape","b7f8d03d":"\nimport xgboost as xgb\nfrom sklearn.model_selection import train_test_split\nx_train1,x_test1,train_label,test_label=train_test_split(sequences_matrix,label,test_size=0.33,random_state=1)\n\nfrom xgboost import XGBClassifier\nclf=XGBClassifier()\n\n# gamma auto uses 1 \/ n_features\nimport time\ndebut=time.time()\n#fit permet de faire le train de modele \nclf.fit(x_train1,train_label)\nfin=time.time()-debut\n\n#pred predection selon database\npred=clf.predict(x_test1)\n\n\n\n\n\n\n","0970bd75":"#determiner accurency 1ere parametre reel 2 predict\nfrom sklearn.metrics import accuracy_score\nACC=accuracy_score(test_label,pred)*100\nprint('the accurency score is :')\nprint(ACC)\n\n\n\n\n\n\n\n","67e31a97":"from sklearn.metrics import classification_report\nClass=classification_report(test_label,pred)\nprint(Class)","ad35e59e":"#confusion matrix\nfrom sklearn.metrics import confusion_matrix\nCM=confusion_matrix(test_label,pred)\nprint(CM)\n\n#heatmap de confusion matrix\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nclass_names=[0,1] # name of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\n# CM1=pd.DataFrame(CM)\n# print(CM1)\nsns.heatmap(pd.DataFrame(CM), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\n#plt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')\n\n","bcdb2194":"#determination de AUC tiend compte des erreur\n#pos_label =1 label positive\nfrom sklearn.metrics import roc_curve,auc\nfp, tp, thresholds=roc_curve(test_label,pred,pos_label=1)\nprint(fp, tp)\nAUC=auc(fp, tp)*100\nprint(AUC)\n\n#tracer tp en fonction de fp\nimport matplotlib.pyplot as plt\nplt.plot(fp, tp, color='blue',label = 'AUC = %0.2f' % AUC)\nplt.title('Receiver Operating Characteristic')\n#plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % AUC)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],'r--')\nplt.xlim([0, 1])\nplt.ylim([0, 1])\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.show()","19042c28":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nrf = RandomForestClassifier(n_estimators=100,criterion = 'gini')\nx_train,x_test,y_train,y_test = train_test_split(sequences_matrix,label,test_size = 0.3,random_state =0)\nimport time\ndebut=time.time()\nrf.fit(x_train,y_train)\nfin=time.time()-debut\n\nprediction = rf.predict(x_test)\n\n","024cd9b7":"#determiner accurency 1ere parametre reel 2 predict\nfrom sklearn.metrics import accuracy_score\nACC=accuracy_score(y_test,prediction)*100\nprint('With random forest accuracy is: ',ACC) # accuracy\n\n\nfrom sklearn.metrics import classification_report\nClass=classification_report(y_test,prediction)\nprint(Class)\n\n","4f78c948":"#confusion matrix\nfrom sklearn.metrics import confusion_matrix\nCM=confusion_matrix(y_test,prediction)\nprint(CM)","c1efd7db":"# use labelEncoder to change text vecteur to numeric vecteur ","abc1d61a":"# tensorflow","4bba41e1":"# random forest","ea7b7dcd":"# Xgboost","67085cbc":"# search for nan in dataset"}}