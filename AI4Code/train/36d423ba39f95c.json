{"cell_type":{"f8f51841":"code","42713869":"code","28290181":"code","5f5974c8":"code","1a4c1917":"code","f7121d2d":"code","b5eefc5f":"code","12d7e28e":"code","9467f579":"code","cbcb0ed6":"code","102bc335":"code","f3d6485c":"code","d3973c48":"code","c11eb44a":"code","b3a731ad":"code","78101b7d":"code","56e146a5":"code","49b83ffb":"code","57b5fa38":"code","29b6371b":"code","4796664a":"code","89ba9062":"code","1734487d":"code","14532833":"code","b483e2a1":"code","5e1fded8":"code","a5bc2d48":"code","daf19db7":"code","22fabc6b":"code","5d6fb73e":"code","6dd885bb":"code","b8e3b099":"code","aa599e88":"code","19e6067b":"code","e8f63127":"code","817b526f":"code","c3fe80fd":"code","64671e92":"code","76cb99a6":"code","b7610be3":"code","3eb57cbd":"code","85d5f55d":"code","7bfe39c5":"markdown","0754dde0":"markdown","3fbeef99":"markdown","f2b39a87":"markdown","aff97322":"markdown","59199391":"markdown","e961e472":"markdown","3144695d":"markdown","1d71f471":"markdown","2cba2517":"markdown","b29e02a2":"markdown","333cb530":"markdown","4a370eda":"markdown","8e6bf71d":"markdown","6ae20217":"markdown","0ee7b902":"markdown","a6e998c7":"markdown","e8b5af68":"markdown","b0077a2c":"markdown","5e8f5c60":"markdown","b526c863":"markdown","f8bb011a":"markdown","0e9dd1bd":"markdown","400c6f54":"markdown","4c9725fe":"markdown","79922c36":"markdown","16881cb7":"markdown","c22d3454":"markdown","570d16b9":"markdown","614bc5b2":"markdown","33bae2db":"markdown","7817d0b6":"markdown"},"source":{"f8f51841":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","42713869":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntes_PassengerId = test_df[\"PassengerId\"]","28290181":"train_df.columns","5f5974c8":"train_df.head()","1a4c1917":"train_df.describe()","f7121d2d":"train_df.info()","b5eefc5f":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count    \n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # caount number of categorical variable (value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","12d7e28e":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)\n","9467f579":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","cbcb0ed6":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","102bc335":"numericVar = [\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","f3d6485c":"# Pclass vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by = \"Survived\", ascending =False)","d3973c48":"# Sex vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by = \"Survived\", ascending =False)","c11eb44a":"# SibSp vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by = \"Survived\", ascending =False)","b3a731ad":"# Parch vs Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by = \"Survived\", ascending =False)","78101b7d":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        #Detect outlier and their indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        #store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","56e146a5":"train_df.loc[detect_outliers(train_df,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","49b83ffb":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis = 0).reset_index(drop = True)","57b5fa38":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop = True)","29b6371b":"train_df.columns[train_df.isnull().any()]","4796664a":"train_df.isnull().sum()","89ba9062":"train_df[train_df[\"Embarked\"].isnull()]","1734487d":"train_df.boxplot(column = \"Fare\", by = \"Embarked\")\nplt.show()","14532833":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","b483e2a1":"train_df[train_df[\"Fare\"].isnull()]","5e1fded8":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))\ntrain_df[train_df[\"Fare\"].isnull()]","a5bc2d48":"list1 = [\"SibSp\",\"Parch\", \"Age\", \"Fare\", \"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","daf19db7":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","22fabc6b":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","5d6fb73e":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","6dd885bb":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","b8e3b099":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 2)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","aa599e88":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 2)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","19e6067b":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.5)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","e8f63127":"train_df[train_df[\"Age\"].isnull()]","817b526f":"sns.factorplot(x= \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","c3fe80fd":"sns.factorplot(x= \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind = \"box\")\nplt.show()","64671e92":"sns.factorplot(x= \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x= \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","76cb99a6":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]","b7610be3":"sns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), annot = True)\nplt.show()","3eb57cbd":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","85d5f55d":"train_df[train_df[\"Age\"].isnull()]","7bfe39c5":"Age is not correlated with Sex but it is correlated with Parch, SibSp and Pclass.","0754dde0":"<a id = \"20\"><\/a><br>\n## Fill Missing Age Feature","3fbeef99":"<a id = \"16\"><\/a><br>\n## Age -- Survived","f2b39a87":"<a id = \"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","aff97322":"* 1st class passengers are older than 2nd class passengers and 2nd class passengers are older than 1st class passengers.","59199391":"<a id = \"12\"><\/a><br>\n## Correlation Between SibSp -- Pclass -- Parch -- Age -- Fare -- Survived","e961e472":"<a id = \"13\"><\/a><br>\n## SibSp -- Survived","3144695d":"<a id = \"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has 1 missing value","1d71f471":"* Female passengers have much better survival rate than males.\n* Male passengers embarked from C have better survival rate in Pclass 3.\n* Embarked and Sex features will be directly used in model training.","2cba2517":"<a id = \"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","b29e02a2":"<a id = \"2\"><\/a><br>\n# Variable Description\n1. PassengerId: unique id of each passenger\n1. Survived: passengered survived the disaster (1) or lost their lives (0)\n1. Pclass: passenger class\n1. Name: passenger name\n1. Sex: gender of passenger\n1. Age: age of passenger\n1. SibSp: number of siblings\/spouses onboard\n1. Parch: number of parents\/childeren onboard\n1. Ticket: ticket number\n1. Fare: ticket price\n1. Cabin: cabin number\n1. Embarked: port of embarkation (C = Cherbourg, Q = Queenstown, S = Southhampton)","333cb530":"<a id = \"11\"><\/a><br>\n# Visualization","4a370eda":"* Age <= 10 has a high survival rate\n* Oldest passenger (80) survived\n* Large number of 20 years old is not survived\n* Most passengers are in 15-35 age range\n* Use age feature in training\n* Use age distribution for missing value of age","8e6bf71d":"<a id = \"17\"><\/a><br>\n## Pclass -- Survived -- Age","6ae20217":"* SibSp and parch can be used for new feature extraction with th = 3\n* Small families have more chance to survive.\n* There is a std in survival of passenger with parch = 3","0ee7b902":"<a id = \"7\"><\/a><br>\n# Outlier Detection","a6e998c7":"<a id = \"15\"><\/a><br>\n## Pclass -- Survived","e8b5af68":"<a id = \"5\"><\/a><br>\n## Numerical Variable","b0077a2c":"* float64(2): Fare and Age\n* int64(5): Pclass, sibsp, parch, passengerId and survived\n* object(5): Cabin, embarked, ticket, name and sex","5e8f5c60":"<a id = \"9\"><\/a><br>\n## Find Missing Value","b526c863":"<a id = \"4\"><\/a><br>\n## Categorical Variable","f8bb011a":"Fare feature seems to have correlation with survived feature (0.26).","0e9dd1bd":"<a id = \"8\"><\/a><br>\n# Missing Value\n    * Find Missing Value\n    * Fill Missing Value","400c6f54":"* Having a lot of SibSp has less chance to survive.\n* If SibSp == 0 or 1 or 2, passenger has more chance to survive.\n* We can consider a new feature describing these categories","4c9725fe":"* Sex is not informative for age prediction. Age distribution seems same.","79922c36":"* Passengers who pay higher fare have better survival. Fare can be used as categorical for training.","16881cb7":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable: Fare, age and passengerId","c22d3454":"* Pclass is an important feature for model training","570d16b9":"<a id = \"1\"><\/a><br>\n# Load and Check Data\n","614bc5b2":"# Introduction\n\nThe disaster of Titanic may be the most memorable ship sinking in the history, which was sadly ended with lost of 1502 lifes in 1912.\n\n<font color = 'blue'>\nContent:\n    \n1. [Load and Check Data](#1)\n1. [Variable Description](#2)\n    * [Univariate Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n1. [Basic Data Analysis](#6)\n1. [Outlier Detection](#7)\n1. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n1. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Pclass -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Missing Age Feature](#20)","33bae2db":"<a id = \"14\"><\/a><br>\n## Parch -- Survived","7817d0b6":"<a id = \"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived"}}