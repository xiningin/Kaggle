{"cell_type":{"81230d3a":"code","955246a1":"code","8eaf5ed0":"code","30646fdd":"code","423038de":"code","af76002b":"code","9aee5465":"code","dd2a29e2":"code","083f70e4":"code","4dc462f6":"code","51703f5a":"code","a739f594":"code","4e7fc15b":"code","412402a1":"code","d1f56d73":"code","69be91ab":"code","e924b32f":"code","2d952d32":"code","a6b6c4f8":"code","7780718c":"code","874fa8f9":"code","c1ebc1f1":"code","9fb41b03":"code","3ff240dd":"code","6a160f0a":"code","496b1712":"code","8ed3af68":"code","29f56673":"code","f5daa091":"code","2994000e":"code","b8c170e1":"code","1d8eb39c":"code","f97ca779":"code","7afc31e5":"code","1ed27ec9":"code","e040ab50":"code","dcb7f5c5":"code","fdeefb62":"code","cc74c7be":"code","b7b06c5f":"code","ebafcae3":"code","8f79dbf1":"code","b17dbb89":"code","21f8a420":"code","c0e88f1d":"code","fd0b865c":"code","eab40fd5":"code","08e3e29a":"code","6135b1c1":"code","03dac8c2":"code","591bb6d9":"code","531a34a3":"markdown","47c2d19b":"markdown","66e356d2":"markdown","0baf42d7":"markdown","40c0f3e0":"markdown","239c959a":"markdown","65f88b41":"markdown","acad197f":"markdown","0d5aa1a3":"markdown","21f214c2":"markdown","2c8fe02b":"markdown","71935a69":"markdown","2577aa38":"markdown","adf16f69":"markdown","0beda5dc":"markdown","ccad678d":"markdown","38b374a1":"markdown","ef212c3f":"markdown","88c6842c":"markdown","7a9b058c":"markdown","851f12ed":"markdown","6ed3ff6f":"markdown","98b64240":"markdown","4f45bcf6":"markdown","e34a5253":"markdown","ad8e621e":"markdown","35aab84d":"markdown","325125ba":"markdown","8a50b7dc":"markdown","7b05aa4c":"markdown"},"source":{"81230d3a":"import math\nimport os\nimport csv\nimport json\nimport gc\nfrom functools import partial\nfrom pathlib import Path\nfrom multiprocessing import Pool\n\nimport pandas as pd\nimport numpy as np\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\nimport matplotlib.patheffects as pe\nfrom tqdm import tqdm_notebook\nfrom pandas_summary import DataFrameSummary\nimport seaborn as sns\nfrom pandas.io.json import json_normalize\nfrom hashlib import md5\n\ntqdm.pandas()","955246a1":"def compare_cat_frequency(df1, df2, column, df1_name='train', df2_name='test', top_n=25, figsize=(20, 16)):\n    fig, (ax, ax2) = plt.subplots(ncols=2, sharey=True, figsize=figsize)\n    \n    ax.yaxis.tick_right()\n\n    df1_values = df1[column].value_counts()[:25]\n    df1_values.plot.barh(ax=ax, title=f'{df1_name} {column} distribution')\n\n    test_df[column].value_counts()[df1_values.keys()].plot.barh(ax=ax2, title=f'{df2_name} {column} distribution')\n\n    plt.tight_layout()\n    plt.show()\n\n\ndef plot_grid_hist(df, columns, test_df=None, ncols=3, figsize=(20, 12)):\n    sns.set_palette(\"Spectral_r\")\n\n    fig, axes = plt.subplots(nrows=len(columns) \/\/ ncols, ncols=ncols, figsize=figsize)\n\n    count = 0\n    for ax_row in axes:\n        for ax in ax_row:\n            count += 1\n            try:\n                key = columns[count]\n                print(key)\n                ax.hist(df[key], label='Train', edgecolor='black', linewidth=0, bins=100, histtype='stepfilled', density=True)\n                if test_df is not None:\n                    ax.hist(test_df[key], label='Test', bins=100, linewidth=1, linestyle='dashed', alpha = 0.5, histtype='stepfilled', density=True)\n                    ax.legend()\n                ax.set_title(f'Distribution of {key}')\n            except IndexError:\n                continue","8eaf5ed0":"DATA_PATH = Path('\/kaggle\/input\/data-science-bowl-2019\/')\nOUTPUT_PATH = Path('\/kaggle\/working\/')","30646fdd":"TRAIN_DTYPES = {\n    'event_count': np.uint16,\n    'event_code': np.uint16,\n    'game_type': np.uint32\n}","423038de":"%%time\n\ntrain_df = pd.read_csv(\n    DATA_PATH\/'train.csv', parse_dates=['timestamp'],\n    dtype=TRAIN_DTYPES\n).sort_values('timestamp')","af76002b":"%%time\n\ntest_df = pd.read_csv(\n    DATA_PATH\/'test.csv',\n    parse_dates=['timestamp'],\n    dtype=TRAIN_DTYPES\n).sort_values('timestamp')","9aee5465":"DataFrameSummary(train_df).columns_stats","dd2a29e2":"DataFrameSummary(test_df).columns_stats","083f70e4":"sns.set_palette(\"Spectral_r\")\n\nplt.figure(figsize=(14, 4))\nplt.title(\"timestamp frequency\")\n\nplt.hist(train_df.timestamp, edgecolor='black', linewidth=1.2, label='Train', histtype='stepfilled', density=True)\nplt.hist(test_df.timestamp, edgecolor='black', linewidth=1.2, linestyle='dashed', label='Test', alpha = 0.5, histtype='stepfilled', density=True)\n\nplt.xticks(rotation=70)\nplt.legend()\nplt.show()","4dc462f6":"import matplotlib.patheffects as pe\n\nsns.set_palette(\"RdBu_r\")\n\nplt.figure(figsize=(14, 4))\nplt.title(\"event_time frequency\")\nplt.hist(train_df.game_time, label='Train', bins=100, path_effects=[pe.Stroke(linewidth=2, foreground='black'), pe.Normal()])\nplt.hist(test_df.game_time, label='Test', bins=100, path_effects=[pe.Stroke(linewidth=2, foreground='black'), pe.Normal()])\n\nplt.legend()\nplt.show()","51703f5a":"compare_cat_frequency(train_df, test_df, column='title')","a739f594":"for column in ['event_code', 'event_id', 'world', 'type']:\n    compare_cat_frequency(train_df, test_df, column=column)","4e7fc15b":"all_df = pd.concat([train_df, test_df], axis=0)\n\nWORLD_VALS = all_df.world.unique()\nTITLE_VALS = all_df.title.unique()\nTYPE_VALS = all_df.type.unique()\nEVENT_CODE = all_df.event_code.unique()\nEVENT_ID = all_df.event_id.unique()","412402a1":"def set_categorical(df):\n    df.world = pd.Categorical(df.world, categories=WORLD_VALS)\n    df.title = pd.Categorical(df.title, categories=TITLE_VALS)\n    df.type = pd.Categorical(df.type, categories=TYPE_VALS)\n    df.event_code = pd.Categorical(df.event_code, categories=EVENT_CODE)\n    df.event_id = pd.Categorical(df.event_id, categories=EVENT_ID)\n    return df","d1f56d73":"train_df = set_categorical(train_df)\ntest_df = set_categorical(test_df)","69be91ab":"train_df.dtypes","e924b32f":"del all_df\ngc.collect()","2d952d32":"def flatten_json(nested_json):\n    nested_json = json.loads(nested_json)\n\n    out = {}\n\n    def _flatten(x, name=''):\n        if type(x) is dict:\n            for a in x: _flatten(x[a], name + a + '_')\n        elif type(x) is list:\n            i = 0\n            for a in x:\n                _flatten(a, name + str(i) + '_')\n                i += 1\n        else:\n            out[name[:-1]] = x\n\n    _flatten(nested_json)\n\n    return out","a6b6c4f8":"train_df_sample = train_df.sample(n=100_000)","7780718c":"%%time\n\ntrain_event_data_norm_sample = json_normalize(train_df_sample.event_data.progress_apply(flatten_json))","874fa8f9":"train_event_na_perc = (\n    train_event_data_norm_sample.isna().sum().sort_values() \/\n     len(train_event_data_norm_sample))","c1ebc1f1":"train_event_na_perc","9fb41b03":"columns_to_include = train_event_na_perc[train_event_na_perc <= 0.95].keys()\ncolumns_to_include = [c for c in columns_to_include if c not in ('event_count', 'event_code', 'game_time')]","3ff240dd":"DataFrameSummary(train_event_data_norm_sample[columns_to_include]).columns_stats","6a160f0a":"ed_summary = DataFrameSummary(train_event_data_norm_sample[columns_to_include]).summary(); ed_summary","496b1712":"numeric_cols = ed_summary.T[ed_summary.T.types == 'numeric'].index\npath_effects = [pe.Stroke(linewidth=1, foreground='black'), pe.Normal()]","8ed3af68":"plot_grid_hist(train_event_data_norm_sample, columns=list(numeric_cols)[:16])","29f56673":"columns_to_include","f5daa091":"DESCRIPTIONS = []\nSOURCE_CATS = []\nIDENTIFIER_CATS = set([])\nMEDIA_TYPE_CATS = set([])\nCOORD_STAGE_HEIGHT = set([])\nCOORD_STAGE_WIDTH = set([])\n\n\ndef do_event_data(event_data: dict, output_file: str):\n    csv_file = open(f'{OUTPUT_PATH}\/{output_file}', 'w')\n    csv_writer = csv.writer(csv_file, delimiter=',')\n\n    for data in tqdm(event_data.values, total=len(event_data)):\n        row_flattened = flatten_json(data)\n\n        # map description to its hash.\n        desc = row_flattened.get('description')\n        if desc:\n            if desc not in DESCRIPTIONS:\n                DESCRIPTIONS.append(desc)\n            row_flattened['description'] = DESCRIPTIONS.index(desc)\n            \n        source = row_flattened.get('source')\n        if source:\n            source = str(source).lower()\n            if source not in SOURCE_CATS:\n                SOURCE_CATS.append(source)\n            row_flattened['source'] = SOURCE_CATS.index(source)\n            \n        for col, l in [\n            ('identifier', IDENTIFIER_CATS),\n            ('media_type', MEDIA_TYPE_CATS),\n            ('coordinates_stage_height', COORD_STAGE_HEIGHT),\n            ('coordinates_stage_width', COORD_STAGE_WIDTH)\n        ]:\n            value = row_flattened.get(col)\n            if value: l.add(value)\n\n        csv_writer.writerow(row_flattened.get(k, None) for k in columns_to_include)","2994000e":"do_event_data(train_df.event_data, 'train_event_data.csv')","b8c170e1":"do_event_data(test_df.event_data, 'test_event_data.csv')","1d8eb39c":"dtypes = dict(\n    source=pd.CategoricalDtype(list(range(len(SOURCE_CATS)))),\n    media_type=pd.CategoricalDtype(MEDIA_TYPE_CATS),\n    identifier=pd.CategoricalDtype(IDENTIFIER_CATS),\n    description=pd.CategoricalDtype(list(range(len(DESCRIPTIONS)))),\n    coordinates_stage_height=pd.CategoricalDtype(list(range(len(COORD_STAGE_HEIGHT)))),\n    coordinates_stage_width=pd.CategoricalDtype(list(range(len(COORD_STAGE_WIDTH))))\n)","f97ca779":"%%time\n\ntrain_event_data = pd.read_csv(\n    OUTPUT_PATH\/'train_event_data.csv', names=columns_to_include, header=None, dtype=dtypes)","7afc31e5":"%%time\n\ntest_event_data = pd.read_csv(OUTPUT_PATH\/'test_event_data.csv', names=columns_to_include, header=None, dtype=dtypes)","1ed27ec9":"numeric_cols_revised = ['round', 'coordinates_x', 'coordinates_y', 'duration', 'total_duration', 'level', 'size', 'weight']","e040ab50":"plot_grid_hist(\n    train_event_data.sample(n=500_000),\n    test_df=test_event_data,\n    columns=list(numeric_cols_revised),\n    ncols=2, figsize=(16, 20))","dcb7f5c5":"def join_event_data(df, df_event):\n    return pd.concat([\n        df[[i for i in df.columns if i != 'event_data']].reset_index(drop=True),\n        df_event.reset_index(drop=True)], axis=1).reset_index(drop=True)","fdeefb62":"train_df_comb = join_event_data(train_df, train_event_data)\ntest_df_comb = join_event_data(test_df, test_event_data)","cc74c7be":"train_df_comb = train_df_comb.sort_values(['installation_id', 'timestamp']).reset_index(drop=True)\ntest_df_comb = test_df_comb.sort_values(['installation_id', 'timestamp']).reset_index(drop=True)","b7b06c5f":"train_df_comb.to_feather(OUTPUT_PATH\/'train.fth')\ntest_df_comb.to_feather(OUTPUT_PATH\/'test.fth')","ebafcae3":"del train_df_comb\ndel test_df_comb\ndel train_df\ndel test_df\ndel train_event_data\ndel test_event_data\ndel train_event_data_norm_sample\ndel train_df_sample\n\ngc.collect()","8f79dbf1":"train_df_comb = pd.read_feather(OUTPUT_PATH\/'train.fth')\ntest_df_comb = pd.read_feather(OUTPUT_PATH\/'test.fth')","b17dbb89":"train_labels = pd.read_csv(DATA_PATH\/'train_labels.csv')","21f8a420":"# thanks to https:\/\/www.kaggle.com\/artgor\/oop-approach-to-fe-and-models\n\ndef set_attempt_label(df):\n    df['attempt'] = 0\n    df.loc[\n        (df['title'] == 'Bird Measurer (Assessment)') &\n        (df['event_code'] == 4110), 'attempt'] = 1\n\n    df.loc[\n        (df['title'] != 'Bird Measurer (Assessment)') &\n        (df['event_code'] == 4100) & (df['type'] == 'Assessment'), 'attempt'] = 1\n\n    return df\n    \ntrain_df_comb = set_attempt_label(train_df_comb)\ntest_df_comb = set_attempt_label(test_df_comb)","c0e88f1d":"def get_accuracy_group(row):\n    if row.correct == 0:\n        return 0\n    \n    if row.attempt > 2:\n        return 1\n    \n    if row.attempt == 2:\n        return 2\n    \n    if row.attempt == 1:\n        return 3\n\n\ndef get_labels(df):\n    num_correct = df[df.attempt == 1].groupby(['game_session', 'installation_id']).correct.sum().astype(int)\n    num_attempts = df[df.attempt == 1].groupby(['game_session', 'installation_id']).attempt.sum().astype(int)\n    titles = df[df.attempt == 1].groupby(['game_session', 'installation_id']).title.agg(lambda x: x.iloc[0])\n    labels_joined = num_correct.to_frame().join(num_attempts).join(titles).reset_index()\n    labels_joined['accuracy_group'] = labels_joined.apply(get_accuracy_group, axis=1)\n    return labels_joined","fd0b865c":"train_labels_joined = get_labels(train_df_comb)\ntest_labels_joined = get_labels(test_df_comb)","eab40fd5":"train_labels_joined.accuracy_group.value_counts().plot.bar(title='Train labels dist')","08e3e29a":"test_labels_joined.accuracy_group.value_counts().plot.bar(title='Test labels dist')","6135b1c1":"def _do_installation_id(inp, df):\n    (installation_id, row) = inp\n\n    game_sessions = row.game_session.unique()\n\n    filtered_rows = df[df.installation_id == installation_id]\n\n    start_idx = filtered_rows.head(1).index[0]\n\n    output = []\n    for game_session in game_sessions:\n        assessment_row = filtered_rows[(filtered_rows.game_session == game_session) & (filtered_rows.event_code == 2000)]\n        output.append((installation_id, game_session, start_idx, assessment_row.index[0]))\n\n    return output\n\n\ndef add_start_and_end_pos(labels, df):\n    labels_grouped = labels.groupby('installation_id')\n    \n    labels['start_idx'] = -1\n    labels['end_idx'] = -1\n    \n    for row in tqdm(labels_grouped, total=len(labels_grouped)):\n        results = _do_installation_id(row, df=df)\n\n        for (installation_id, game_session, start_pos, end_pos) in results:\n            filt = (labels.installation_id == installation_id) & (labels.game_session == game_session)\n\n            labels.loc[filt, 'start_idx'] = start_pos\n            labels.loc[filt, 'end_idx'] = end_pos","03dac8c2":"add_start_and_end_pos(train_labels_joined, train_df_comb)\nadd_start_and_end_pos(test_labels_joined, test_df_comb)","591bb6d9":"train_labels_joined.to_feather(OUTPUT_PATH\/'train_labels.fth')\ntest_labels_joined.to_feather(OUTPUT_PATH\/'test_labels.fth')","531a34a3":"So, it appears that there are no missing values. However, the `event_data` is a JSON field, so I'm sure when that's expanded it will be a different story.","47c2d19b":"So, it sounds like we want to calculate `num_correct`, `num_incorect`, `accuracy` and use that to set the `accuracy_group`.\n\nI'll start by adding an assessment column to determine if the activity is an assessment.","66e356d2":"### Event data","0baf42d7":"The event data is in represented as JSON objects for each row. The first step to performing analysis on it will be to flatten it into a sparse matrix.\n\nSince it's a lot of information, I'm going to start by analysis a sample 100 thousands rows. Since the event ordering is essentially, I'm going to sample by taking a slice of the first 100k rows, not randomly sampling.","40c0f3e0":"So the train and test are roughly the same time period across a ~3 month window.","239c959a":"## Missing values","65f88b41":"### title distribution","acad197f":"I'm going to limit the columns to just the ones that are in at least 5% of rows. There's a lot of very rare fields and I feel like they're going to need some feature engineering. That seems like something to be working on toward the end of the competition.\n\nSince `event_count`, `event_code` and `game_time` are already provided, that seems like a column that can be excluded too.","0d5aa1a3":"Based on some earlier analysis I've done, I'm setting the datatypes of a few fields to minimise memory consumption.","21f214c2":"### Flattening","2c8fe02b":"# DSB 2019: EDA and data preparation\n\nThe goal of this notebook is to explore the dataset from the 2019 Data Science Bowl Kaggle competition and prepare it ready it for a sequence model.\n\n## Competition overview\n\nThe dataset is provided by the PBS Measure Up app and is a timeseries of a user's activity across game sessions. The goal is to predict how they will do at an evaluation based using the features.\n\nIt appears the organisers are looking to use the model to improve the games they develop and maybe give a user the best possible experience based on their performance.","71935a69":"Next up, I want to load the whole dataset joined to the `event_data` DataFrame, but I intend to convert some of the large columns to a lookup using the hash of the data.","2577aa38":"I'll add a column for the assessment titles and use it to understand how many assessments happen per `installation_id`.\n\nBased on the following bit of information: \"Assessment attempts are captured in event_code 4100 for all assessments except for Bird Measurer, which uses event_code 4110.\"","adf16f69":"### Distribution of other categorical fields","0beda5dc":"### timestamp distribution\n\nSince time seems to be a key feature in this dataset, it will be interesting to see how the train and test set differ in their time distribution.**","ccad678d":"The last thing I want to do is sort by `installation_id` and `timestamp` which should make convert the data into a sequence nice and easy in future.","38b374a1":"### event_time distribution","ef212c3f":"## Add labels","88c6842c":"To save space, I'll use the Pandas categorical type for categorical columns. I'll concat the train and test datasets together to ensure the types have the full range of values.","7a9b058c":"Let's look at the distribution of numeric types.","851f12ed":"I'll start by adding a `attempt` column.","6ed3ff6f":"So, titles played is quite similar across train and test set, albeit the train set has a lot more examples.","98b64240":"Hard to see from this plot but it appears the event_time are mostly very short with some very long times.","4f45bcf6":"### Storing sequence start and end positions","e34a5253":"## Column overview\n\nI'll use `DataFrameSummary` from [pandas-summary](https:\/\/github.com\/mouradmourafiq\/pandas-summary) to get a high-level overview of the data we're working with.","ad8e621e":"## Loading data","35aab84d":"Show percentage of missing values across each field.","325125ba":"In order to build a disk space efficient sequence model, I'm going to store the start and end position of each sequence, based on the assumption that the train and test data is sorted by `installation_id` and `timestamp`.","8a50b7dc":"Let's group by game session and installation id for assessments","7b05aa4c":"### Set categorical columns"}}