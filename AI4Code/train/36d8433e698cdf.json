{"cell_type":{"9252e84d":"code","6c6a1090":"code","b8e7cb31":"code","0f2d65ce":"code","3c673868":"code","472276a6":"code","4e3ae87e":"code","803bd6a3":"code","99dff84b":"code","921506fb":"code","db90ddd8":"code","7221a57e":"code","d6bf5a22":"code","6a65ffaf":"code","90b3a643":"code","63880c75":"code","29ddefd5":"code","ad055d42":"code","4bc2d6ba":"code","047e5b0b":"code","209c0617":"code","5a5a9304":"code","239fcfc7":"code","261efac6":"code","733cb961":"code","885e05aa":"code","1903f478":"code","41def6c3":"code","60eceb77":"code","19fbd9df":"code","d1a9c8c6":"code","7d86183f":"code","0fa44910":"code","6e3876da":"code","fa2d6b23":"markdown","b355bc44":"markdown","6dd2a344":"markdown","bec4a4ef":"markdown","99b4b98a":"markdown","71528e29":"markdown","629f8006":"markdown","0e738f0f":"markdown","42b469f0":"markdown","33883ef4":"markdown","d23f88ab":"markdown","6c0a7126":"markdown","e8925cf0":"markdown","07d13687":"markdown","e6cbc055":"markdown"},"source":{"9252e84d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6c6a1090":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n%matplotlib inline","b8e7cb31":"df = pd.read_csv('..\/input\/world-happiness\/2015.csv',encoding='utf8', engine='python')","0f2d65ce":"df.head()","3c673868":"df.info ()","472276a6":"df.shape","4e3ae87e":"df.isnull().sum()","803bd6a3":"df.dropna(inplace=True)","99dff84b":"df.describe()","921506fb":"df[df['Country'].str.count('^[pP].*')>0]","db90ddd8":"plt.figure(figsize=(15,10))\nsns.barplot(x=df ['Happiness Rank'],y = df['Region'], palette = sns.cubehelix_palette(70))\nplt.xticks(rotation = 90) # slope of the words in the x axis \nplt.xlabel('Happiness Rank')\nplt.ylabel('Region')\nplt.title('Happiness Rank vs Region')\nplt.show()","7221a57e":"f,ax=plt.subplots(1,1,figsize=(30,6))\nsns.countplot(x=\"Region\",data=df, palette=\"muted\")","d6bf5a22":"sns.pairplot(data=df,kind='reg',size=5,x_vars=['Happiness Score'],y_vars=['Health (Life Expectancy)'])","6a65ffaf":"plt.figure(figsize=(20,8))\ncorr = df.corr()\nax = sns.heatmap(corr, vmin=-1, vmax=1, center=0, cmap=sns.diverging_palette(20, 220, n=200),\n                 annot=True,square=True)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n)","90b3a643":"sns.jointplot(df['Happiness Score'],df['Health (Life Expectancy)'],kind='kde',color='y',data=df)","63880c75":"sns.pairplot(df,hue = 'Region', vars = ['Standard Error', 'Economy (GDP per Capita)','Family','Health (Life Expectancy)','Freedom','Trust (Government Corruption)','Generosity','Dystopia Residual'] )","29ddefd5":"f,ax=plt.subplots(1,1,figsize=(25,6))\nsns.kdeplot(df.loc[(df['Region']=='Western Europe'), 'Economy (GDP per Capita)'], color='r', shade=True, Label='Western Europe')\nsns.kdeplot(df.loc[(df['Region']=='North America'), 'Economy (GDP per Capita)'], color='g', shade=True, Label='North America')\nsns.kdeplot(df.loc[(df['Region']=='Australia and New Zealand'), 'Economy (GDP per Capita)'], color='b', shade=True, Label='Australia and New Zealand')\nsns.kdeplot(df.loc[(df['Region']=='Southern Asia'), 'Economy (GDP per Capita)'], color='c', shade=True, Label='Southern Asia')\nplt.xlabel('GDP per Capita') ","ad055d42":"f,ax=plt.subplots(1,3,figsize=(25,5))\nbox1=sns.boxplot(data=df['Standard Error'],ax=ax[0],color='m')\nax[0].set_xlabel('Standard Error')\nbox1=sns.boxplot(data=df['Family'],ax=ax[1],color='m')\nax[1].set_xlabel('Family')\nbox1=sns.boxplot(data=df['Health (Life Expectancy)'],ax=ax[2],color='m')\nax[2].set_xlabel('Health (Life Expectancy)')","4bc2d6ba":"f,ax=plt.subplots(1,1,figsize=(25,6))\nsns.violinplot(x=\"Region\", y=\"Trust (Government Corruption)\",data=df, palette=\"muted\")","047e5b0b":"sns.pairplot(df)","209c0617":"Happiness_Score= pd.DataFrame(df[\"Happiness Score\"])\nHappiness_Score.describe()","5a5a9304":"happiness=[]\nfor i in Happiness_Score[\"Happiness Score\"]:\n    if i<5.5:\n        happiness.append(\"UNHAPPY\")\n    else:\n        happiness.append(\"HAPPY\")\n\n# Join our Hapiness_Score dataframe into the main dataframe\npredicted_happiness = pd.DataFrame(happiness,columns=[\"PREDICTED_HAPPINESS\"])\npredicted_happiness = pd.DataFrame(predicted_happiness[\"PREDICTED_HAPPINESS\"].astype('category'))\n\ndata = pd.concat([df,predicted_happiness],axis=1)","239fcfc7":"predicted_happiness[\"PREDICTED_HAPPINESS\"].value_counts()","261efac6":"f, axes = plt.subplots(1, 1, figsize=(5, 4))\nsns.countplot(predicted_happiness[\"PREDICTED_HAPPINESS\"])\nplt.xlabel(\"Predicted Happiness\")\nplt.ylabel(\"Number of Countries\")","733cb961":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import export_graphviz","885e05aa":"# Remove any duplicate columns (if any)\ndata = data.loc[:,~data.columns.duplicated()]\ndata.shape","1903f478":"data.isnull().values.any()","41def6c3":"data.isnull().sum()","60eceb77":"#y=pd.DataFrame(data[\"predicted_happiness\"])\ny=predicted_happiness\ny.shape","19fbd9df":"x=df.drop(['Country','Region','Happiness Score'],axis = 1)","d1a9c8c6":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)","7d86183f":"from sklearn.ensemble import RandomForestClassifier \nfrom sklearn.metrics import classification_report\nran_class=RandomForestClassifier()\nran_class.fit(x_train,y_train)\nran_predict=ran_class.predict(x_test)\nprint(classification_report(y_test,ran_predict))\naccuracy3=ran_class.score(x_test,y_test)\nprint(accuracy3*100,'%')\ncm = confusion_matrix(y_test, ran_predict)\nsns.heatmap(cm, annot= True)","0fa44910":"from sklearn.linear_model import LogisticRegression \nfrom sklearn.metrics import classification_report, confusion_matrix\nlogistic = LogisticRegression()\nlogistic.fit(x_train,y_train)\ny_pred=logistic.predict(x_test)\nprint(classification_report(y_test,y_pred))\naccuracy=logistic.score(x_test,y_test)\nprint(accuracy*100,'%')\ncm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm, annot= True)","6e3876da":"from sklearn.naive_bayes  import GaussianNB \nfrom sklearn.metrics import classification_report, confusion_matrix\nnvclassifier = GaussianNB ()\nnvclassifier.fit(x_train,y_train)\ny_pred=nvclassifier .predict(x_test)\nprint(classification_report(y_test,y_pred))\nacc=nvclassifier.score(x_test,y_test)\nprint(acc*100,'%')\ncm = confusion_matrix(y_test, y_pred)\nsns.heatmap(cm, annot= True)","fa2d6b23":"**Table of contets:-**\n\n1.Importig Dataset\n\n2.Checking missing and null values\n\n3.visualizing data\n\n  1.Countplot\n  \n  2.Pairplot\n  \n  3.Boxplot\n  \n  4.Violinplot\n  \n  5.Heatmap\n  \n  6.KDE\n  \n  7.Scatterplot\n  \n4.Train test split\n\n5.Modelling \n\n  1.Logistic Regression\n  \n  2.Random Forest Classification\n  \n  3.Naive Bayes","b355bc44":"**Pairplot**","6dd2a344":"**Jointplot**","bec4a4ef":"**KDE plot**","99b4b98a":"**Barplot**","71528e29":"**Violinplot**","629f8006":"**Countplot**","0e738f0f":"**Pairplot**","42b469f0":"**Boxplot**","33883ef4":"**Heatmap**","d23f88ab":"**Logistic Regression**","6c0a7126":"**Importing Dataset**","e8925cf0":"**Train test split**","07d13687":"**Pairplot**","e6cbc055":"**Naive Bayes**"}}