{"cell_type":{"8b8dc7fd":"code","a10e5152":"code","8ad7e30c":"code","988f9ff1":"code","d5395d4f":"code","cb6fccb1":"code","e7dbd8d6":"code","6240f108":"code","d55ba554":"code","c7b1b6a1":"code","7cadaf12":"code","28e23141":"code","79665074":"code","4a352716":"code","26630eab":"code","c82fd383":"code","84570316":"code","159a8f5c":"code","59b02d51":"code","12ff41fa":"code","5fca09e2":"code","d6230c79":"code","689b1623":"code","85408020":"code","73c0fd38":"code","35389213":"code","7a45bf5e":"code","5ebf5e36":"code","f3eb2e0d":"markdown","6b5f5c68":"markdown","317bc10f":"markdown","30551691":"markdown","1084d5df":"markdown","cec91665":"markdown","2e50f616":"markdown","1d410c08":"markdown","f723d146":"markdown","1b204e95":"markdown","138bd34b":"markdown"},"source":{"8b8dc7fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a10e5152":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score","8ad7e30c":"from subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\ndf = pd.read_csv('..\/input\/kobe-bryant-shot-selection\/data.csv.zip')\ndf.info()\n","988f9ff1":"court_scale, alpha = 7, 0.05\nplt.figure(figsize=(2 * court_scale, court_scale*(84.0\/50.0)))\n# hit\nplt.subplot(121)\nh = df.loc[df.shot_made_flag == 1]\nplt.scatter(h.loc_x, h.loc_y, color='green', alpha=alpha)\nplt.title('Shots Made')\nax = plt.gca()\nax.set_ylim([-50, 900])\n# miss\nplt.subplot(122)\nh = df.loc[df.shot_made_flag == 0]\nplt.scatter(h.loc_x, h.loc_y, color='red', alpha=alpha)\nplt.title('Shots missed')\nax = plt.gca()\nax.set_ylim([-50, 900])\nplt.savefig('shots_made_and_missed.png')","d5395d4f":"groups = df.groupby('combined_shot_type')\n\n\nfig, ax = plt.subplots(figsize=(court_scale, court_scale*(84.0\/50.0)))\nax.margins(0.05) # Optional, just adds 5% padding to the autoscaling\nalpha = 0.2\nalphas, n = [], float(len(df.combined_shot_type))\nfor u in [i[0] for i in groups]:\n    d = len(df.loc[df.combined_shot_type == u, 'combined_shot_type'])\n    alphas.append(np.log1p(d))\n\nfor (name, group), alp in zip(groups, alphas):\n    ax.plot(group.loc_x, group.loc_y,\n            marker='.', linestyle='', ms=12,\n            label=name, alpha=alp)\nax.legend()\nplt.savefig('combined_shot_type_layout.png')","cb6fccb1":"court_scale, alpha = 5, 0.5\ndf['unique_first_words'] = df.action_type.str.split(' ').str[0]\nuq_count = len(df['unique_first_words'].unique())\na = int(uq_count \/ 2) + 1\n\ngroups = df.groupby('unique_first_words')\nfig, ax = plt.subplots(figsize=(2 * court_scale, a * 1.1 * court_scale*(84.0\/50.0)))\nX, Y = np.array([(i, 0) for i in np.arange(-400, 400, 0.1)]), np.array([(0, i) for i in np.arange(-60, 1000, 0.1)])\nfor index, (name, group) in enumerate(groups):\n    plt.subplot(a, 2, index + 1)\n    h = group.loc[group.shot_made_flag == 1, ['loc_y', 'loc_x']]\n    m = group.loc[group.shot_made_flag == 0, ['loc_y', 'loc_x']]\n    \n    plt.plot(h.loc_x, h.loc_y,\n            marker='.', linestyle='', ms=12,\n            label=name, alpha=alpha, color='green')\n    \n    plt.plot(m.loc_x, m.loc_y,\n            marker='.', linestyle='', ms=12,\n            label=name, alpha=alpha, color='red')\n    x_lim = group.loc_x.mean() + 3* group.loc_x.std()\n    y_lim = group.loc_y.mean() + 3* group.loc_y.std()\n    plt.plot(X[:, 0], X[:, 1], 'black')\n    plt.plot(Y[:, 0], Y[:, 1], 'black')\n    plt.xlim([-x_lim, x_lim])\n    plt.ylim([-y_lim, y_lim])\n    \n    plt.title(name)\n    plt.savefig('action_type_first_words.png')","e7dbd8d6":"court_scale, alpha = 7, 0.1\n\nfig = plt.figure(figsize=(2 * court_scale, court_scale*(84.0\/50.0)))\nplt.subplot(121)\nplt.scatter(df.loc_x, df.loc_y, alpha=alpha, c=df.seconds_remaining, cmap='Greens_r')\nplt.title('Seconds Remaining')\nplt.subplot(122)\nplt.scatter(df.loc_x, df.loc_y, alpha=alpha, c=df.minutes_remaining, cmap='Greens_r')\nplt.title('Minutes Remaining')\nplt.savefig('time_remaining_shot_layout.png')","6240f108":"def get_acc(df, against):\n    ct = pd.crosstab(df.shot_made_flag, df[against]).apply(lambda x:x\/x.sum(), axis=0)\n    x, y = ct.columns, ct.values[1, :]\n    plt.figure(figsize=(7, 5))\n    plt.plot(x, y)\n    plt.xlabel(against)\n    plt.ylabel('% shots made')\n    plt.savefig(against + '_vs_accuracy.png')\nget_acc(df, 'shot_distance')","d55ba554":"data = df[['loc_x', 'loc_y', 'shot_made_flag']]\ndata = data.dropna()\ndef test_it(data):\n    clf = RandomForestClassifier(n_jobs=-1)  # A super simple classifier\n    return cross_val_score(clf, data.drop('shot_made_flag', 1), data.shot_made_flag,\n                           scoring='roc_auc', cv=10\n                          )\ntest_it(data).mean()\n","c7b1b6a1":"sns.jointplot(x=\"loc_x\", y=\"loc_y\", data=data, kind='kde')","7cadaf12":"data = df[['loc_y', 'shot_made_flag']]\ndata = data.dropna()\ntest_it(data).mean()","28e23141":"data = df[['shot_distance', 'shot_made_flag']]\ndata = data.dropna()\ntest_it(data).mean()","79665074":"get_acc(df, 'seconds_remaining')","4a352716":"data = df[['seconds_remaining', 'shot_distance', 'shot_made_flag']].dropna()\ntest_it(data).mean()","26630eab":"get_acc(df, 'minutes_remaining')","c82fd383":"get_acc(df, 'period')","84570316":"print(df.season.unique())\ndf['season_start_year'] = df.season.str.split('-').str[0]\ndf['season_start_year'] = df['season_start_year'].astype(int)\nget_acc(df, 'season_start_year')","159a8f5c":"data = df[['season_start_year', 'shot_distance', 'shot_made_flag']].dropna()\ntest_it(data).mean()","59b02d51":"action_map = {action: i for i, action in enumerate(df.action_type.unique())}\ndf['action_type_enumerated'] = df.action_type.map(action_map)\nget_acc(df, 'action_type_enumerated')","12ff41fa":"def sort_encode(df, field):\n    ct = pd.crosstab(df.shot_made_flag, df[field]).apply(lambda x:x\/x.sum(), axis=0)\n    temp = list(zip(ct.values[1, :], ct.columns))\n    temp.sort()\n    new_map = {}\n    for index, (acc, old_number) in enumerate(temp):\n        new_map[old_number] = index\n    new_field = field + '_sort_enumerated'\n    df[new_field] = df[field].map(new_map)\n    get_acc(df, new_field)\nsort_encode(df, 'action_type_enumerated')","5fca09e2":"data = df[['action_type_enumerated', 'shot_distance', 'shot_made_flag']].dropna()\nx = test_it(data)\ndata = df[['action_type_enumerated_sort_enumerated', 'shot_distance', 'shot_made_flag']].dropna()\ny = test_it(data)\nprint(x.mean(), y.mean())","d6230c79":"opponent_map = {opp: i for i, opp in enumerate(df.opponent.unique())}\ndf['opponent_enumerated'] = df.opponent.map(opponent_map)\n\nsort_encode(df, 'opponent_enumerated')\n","689b1623":"df['away'] = df.matchup.str.contains('@')\ndata = df[['action_type_enumerated', 'shot_distance',\n           'shot_made_flag', 'away']].dropna()\ntest_it(data).mean()","85408020":"data = df[['action_type_enumerated', 'shot_distance',\n           'shot_made_flag', 'away']].dropna()\n\nestimators, scores = list(range(1, 100, 5)), []\nfor i in estimators:\n    clf = RandomForestClassifier(n_jobs=-1, n_estimators=i, random_state=2016)\n    x = cross_val_score(clf, data.drop('shot_made_flag', 1), data.shot_made_flag,\n                              scoring='roc_auc', cv=10)\n    scores.append(x)\nx = [i for i in estimators for j in range(10)]\nsns.boxplot(x, np.array(scores).flatten())","73c0fd38":"depth, scores = list(range(1, 20, 1)), []\nfor i in depth:\n    clf = RandomForestClassifier(n_jobs=-1, n_estimators=70, max_depth=i, random_state=2016)\n    x = cross_val_score(clf, data.drop('shot_made_flag', 1), data.shot_made_flag,\n                              scoring='roc_auc', cv=10)\n    scores.append(x)\nx = [i for i in depth for j in range(10)]\nsns.boxplot(x, np.array(scores).flatten())\n","35389213":"clf = RandomForestClassifier(n_jobs=-1, n_estimators=70, max_depth=7, random_state=2016) # a more powerful classifier\n\ntrain = df.loc[~df.shot_made_flag.isnull(), ['action_type_enumerated_sort_enumerated',\n                                             'shot_distance', 'shot_made_flag', 'away']]\ntest = df.loc[df.shot_made_flag.isnull(), ['action_type_enumerated_sort_enumerated',\n                                           'shot_distance', 'shot_id', 'away']]\n# Impute\nmode = test.action_type_enumerated_sort_enumerated.mode()[0]\ntest.action_type_enumerated_sort_enumerated.fillna(mode, inplace=True)\n\n# Train and predict\nclf.fit(train.drop('shot_made_flag', 1), train.shot_made_flag)\npredictions = clf.predict_proba(test.drop('shot_id', 1))","7a45bf5e":"submission = pd.DataFrame({'shot_id': test.shot_id,\n                           'shot_made_flag': predictions[:, 1]})\nsubmission[['shot_id', 'shot_made_flag']].to_csv('submission_kobe.csv', index=False)","5ebf5e36":"submission","f3eb2e0d":"* Combined shot types","6b5f5c68":"Reference\n* https:\/\/www.kaggle.com\/dixhom\/data-analysis-for-beginners\n* https:\/\/www.kaggle.com\/arjoonn\/preliminary-exploration","317bc10f":"# **Import libraries**","30551691":"# **Import data**","1084d5df":"# **Exploratory Data**","cec91665":"Reference\n* https:\/\/pinkwink.kr\/986","2e50f616":"In the green dot, he made many shots from under the basket, but in the red spot, he missed a lot of goals from the under-basket and the three-point line.","1d410c08":"* Court visualization of misses and shots","f723d146":"# **Feature Engineering**","1b204e95":"Reference\n* boxplot : https:\/\/boxnwhis.kr\/2019\/02\/19\/boxplot.html","138bd34b":"* Shooting accuracy with shot distance"}}