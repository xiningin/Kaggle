{"cell_type":{"bc33432c":"code","a046b12f":"code","2f69209b":"code","0992ac0b":"code","82f8b961":"code","036d7cfe":"code","5d95545b":"code","29233687":"code","fd2ac2c3":"code","961a3d2e":"code","c9894438":"code","51fef648":"code","36dba7be":"code","08edc75b":"code","a6368fa4":"code","f2152ce7":"code","692b849c":"code","669908be":"code","41c6804f":"code","5e065109":"code","dd927f32":"code","4b30899f":"code","ee33d5a1":"code","4ec46669":"code","16b9fa7d":"code","5aea07e9":"code","4dd45c02":"code","7165e477":"code","d66798b5":"code","270db49f":"code","e9d3c639":"code","360ae26c":"code","5f50ee6f":"code","e645e842":"markdown","97529d81":"markdown","d3c218a7":"markdown","cebccade":"markdown","a5ba5d27":"markdown","2f9bca2d":"markdown","c502e703":"markdown","28c68ba6":"markdown"},"source":{"bc33432c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a046b12f":"import matplotlib.pyplot as plt","2f69209b":"movie_data = pd.read_csv('..\/input\/tmdb_5000_movies.csv')","0992ac0b":"movie_data.info() #Returns the basic informations about the data","82f8b961":"movie_data.columns ","036d7cfe":"movie_data.corr() #Gives the relation between columns","5d95545b":"movie_data.head() #Returns the first 5 movies on the list","29233687":"movie_data.tail() #Returns the last 5 movies on the list","fd2ac2c3":"print(movie_data[['budget']])  #You can also use  print(movie_data.budget)","961a3d2e":"print(movie_data.loc[:4,'budget':\"id\"]) #Gives first 4 rows from budget to id","c9894438":"print(movie_data.loc[:4,['budget','id']]) #Gives first 4 rows but only 'budeget' and 'id' rows","51fef648":"print(movie_data.loc[::-1,:]) #Returns reversed list of the movies","36dba7be":"filter1 = movie_data.original_language == 'en'","08edc75b":"print(movie_data[filter1])","a6368fa4":"filter2 = movie_data.runtime > 90.0","f2152ce7":"print(movie_data[filter2])","692b849c":"print(movie_data[filter1&filter2]) ","669908be":"print(movie_data[np.logical_and(movie_data.vote_average > 7.0,movie_data.runtime <120.0)]) #Instead of '&' np.logicial_and can be used ","41c6804f":"average_runtime = movie_data.runtime.mean()","5e065109":"movie_data['runtime_level'] = ['Long' if each > average_runtime else 'Short' for each in movie_data.runtime ]","dd927f32":"print(movie_data.loc[:10,:'runtime_level']) #Runtime level for first 10 movies","4b30899f":"average_popularity = movie_data.popularity.mean()","ee33d5a1":"movie_data['popularity_level'] = ['High Popularity' if each > average_popularity else 'Low Popularity' for each in movie_data.popularity ]","4ec46669":"print(movie_data.loc[:10,:'popularity_level']) #Popularity level of first 10 movies","16b9fa7d":"#Concatenating data\ndata1 = movie_data.budget.head()\ndata2 = movie_data.budget.tail()\n\ndata_v_concat= pd.concat([data1,data2],axis = 0)\ndata_h_concat = pd. concat([data1,data2],axis =1)\nprint(data_v_concat)\nprint(' ')\nprint(data_h_concat)","5aea07e9":"dictionary = {'id': '19995','genre': 'Action','name': 'Avatar'}\nprint(dictionary.keys())\nprint(dictionary.values())","4dd45c02":"dictionary['id'] = '285' # update existing entry\nprint(dictionary)\ndictionary['year'] = 2009 # Add new entry\nprint(dictionary)\ndel dictionary['id']  # remove entry with key 'id'\nprint(dictionary)\nprint('year' in dictionary) # check include or not\ndictionary.clear()   # remove all entries in dictionary\nprint(dictionary)","7165e477":"# Stays in loop if condition( x is lower than 10) is true\nx = 0\nwhile x< 10:\n    print('x is',x)\n    x = x+1\nprint(x,'is equal to 10')","d66798b5":"# Stay in loop if condition( i is not equal 5) is true\nlist1 = [1,2,3,4,5]\nfor i in list1:\n    print('i is: ',i)\nprint('')\n#Returns sum of the list2 values\nlist2 = [3,5,7,9,11,13,15,17,19]\ncount = 0\nfor each in list2:\n    count = count+each\nprint(count)\nprint('')\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index,value in enumerate(list1):\n    print(index,':',value)\nprint('')  \n# For dictionaries\n# We can use for loop to achive key and value of dictionary.\ndictionary2 = {'id': '185', 'genre': 'Action', 'name': 'Lord of The Rings', 'year': 2001}\nfor key,value in dictionary2.items():\n    print(key,\" : \",value)\nprint('')\n# For pandas we can achieve index and value\nfor index,value in movie_data[['budget']][0:2].iterrows():\n     print(index,\" : \",value)\n","270db49f":"def f (x,y=2,z=5): # y and z is default arguments\n    s = x+y+z\n    return(s)\nprint(f(10))\n\ndef f(*args):  # flexible arguments *args\n    for i in args:\n        print(i)\nf(5,6,7,8)\n\ndef f(**kwargs):  #print key and value of dictionary\n    for key,value in kwargs.items():\n        print(key,' ',value)\nf( \u0131d = '19995',genre = 'Action',name = 'Avatar')","e9d3c639":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\n\nmovie_data.budget.plot(kind = 'line',color = 'r',label = 'budget',linewidth =1,alpha = 0.5,grid = True,linestyle = ':',figsize = (10,10))\nmovie_data.popularity.plot(kind = 'line',color ='g',label = 'popularity',linewidth = 1,alpha = 0.5,grid = True,linestyle = '-.',figsize = (10,10))\nplt.legend(loc = 'upper right')\nplt.xlabel('x axis')\nplt.ylabel('y axis')\nplt.title('Line Plot')\nplt.show()","360ae26c":"#Scatter Plot\n# x = budget y = revenue\nmovie_data.plot(kind = 'scatter',x = 'budget',y = 'revenue',alpha = 0.5,color = 'blue',figsize = (10,10))\nplt.xlabel('Budget')\nplt.ylabel('Revenue')\nplt.title('Budget Revenue Scatter Plot')","5f50ee6f":"# Histogram\n# bins = number of bar in figure\n\nmovie_data.vote_average.plot(kind = 'hist',bins = 40,figsize = (10,10))\nplt.show()","e645e842":"## **Matplotlib**\n\n","97529d81":"### **Indexing and  Slicing Data Frame**\n\n-In this part I will try to show you how to access specific parts of the dataset that you want see with some examples","d3c218a7":"## **Default and Flexible Arguments**","cebccade":"## **While and For Loops**\n\n-In this part we will learn the basics of while and for loop","a5ba5d27":"### **Filtering Data Frame**\n\n-In this part I will show you how to make filters which is basically accessing  a part of the data you want to work on  by defining some conditions\n\n","2f9bca2d":"## **Basic Methods of Pandas Library**","c502e703":"## **Dictionaries**\n\n-In this part I will show how to create dictionaries  and some basic operations with them","28c68ba6":"## **Using List Comprehension with Pandas **"}}