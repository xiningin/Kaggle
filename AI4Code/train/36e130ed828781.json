{"cell_type":{"42456c13":"code","ff44a65c":"code","7ab22b36":"code","f021f4b9":"code","d41d5099":"code","ea4f3f48":"code","6ac8b084":"code","df6b2207":"code","26fbdfab":"code","8cc9febc":"code","041fd33a":"code","f17a27ca":"code","b537cc58":"code","278c6846":"code","768f5ae5":"code","27ace65f":"code","6cd38e31":"code","0a1ac6d2":"code","79e82a3e":"code","580f493c":"code","0746a135":"code","28a3baaf":"code","ed55bb05":"markdown","47e46af5":"markdown","7aa2021b":"markdown","0d2daf9d":"markdown","0c86fadb":"markdown","e9cd1297":"markdown","42b45f7c":"markdown","4e0085f5":"markdown","bbeb7d14":"markdown","123d6f25":"markdown","3d451fdf":"markdown","c6af9b66":"markdown","cb2c89af":"markdown","d12d9b26":"markdown","ff7424df":"markdown","3667f22e":"markdown","e6632206":"markdown","58468ed1":"markdown","129aec45":"markdown","9245365a":"markdown","cde46271":"markdown","43befc1e":"markdown","be253b73":"markdown","8473603d":"markdown","b9fa76b6":"markdown","c24fb68a":"markdown","2cb2f83d":"markdown"},"source":{"42456c13":"import pandas as pd\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import tree\nfrom sklearn.externals.six import StringIO  \nfrom IPython.display import Image  \nimport pydotplus","ff44a65c":"data = pd.read_csv('..\/input\/student-mat.csv')\ndata.shape","7ab22b36":"data.isnull().values.any()","f021f4b9":"data.columns","d41d5099":"data.head()","ea4f3f48":"data.nunique()","6ac8b084":"data['GAvg'] = (data['G1'] + data['G2'] + data['G3']) \/ 3","df6b2207":"def define_grade(df):\n    # Create a list to store the data\n    grades = []\n\n    # For each row in the column,\n    for row in df['GAvg']:\n        # if more than a value,\n        if row >= (0.9 * df['GAvg'].max()):\n            # Append a letter grade\n            grades.append('A')\n        # else, if more than a value,\n        elif row >= (0.7 * df['GAvg'].max()):\n            # Append a letter grade\n            grades.append('B')\n        # else, if more than a value,\n        elif row < (0.7 * df['GAvg'].max()):\n            # Append a letter grade\n            grades.append('C')   \n    # Create a column from the list\n    df['grades'] = grades\n    return df","26fbdfab":"data = define_grade(data)\ndata.head()","8cc9febc":"data.drop([\"school\",\"age\"], axis=1, inplace=True)","041fd33a":"data.describe()","f17a27ca":"# for yes \/ no values:\nd = {'yes': 1, 'no': 0}\ndata['schoolsup'] = data['schoolsup'].map(d)\ndata['famsup'] = data['famsup'].map(d)\ndata['paid'] = data['paid'].map(d)\ndata['activities'] = data['activities'].map(d)\ndata['nursery'] = data['nursery'].map(d)\ndata['higher'] = data['higher'].map(d)\ndata['internet'] = data['internet'].map(d)\ndata['romantic'] = data['romantic'].map(d)","b537cc58":"# map the sex data\nd = {'F': 1, 'M': 0}\ndata['sex'] = data['sex'].map(d)\n\n# map the address data\nd = {'U': 1, 'R': 0}\ndata['address'] = data['address'].map(d)\n\n# map the famili size data\nd = {'LE3': 1, 'GT3': 0}\ndata['famsize'] = data['famsize'].map(d)\n\n# map the parent's status\nd = {'T': 1, 'A': 0}\ndata['Pstatus'] = data['Pstatus'].map(d)\n\n# map the parent's job\nd = {'teacher': 0, 'health': 1, 'services': 2,'at_home': 3,'other': 4}\ndata['Mjob'] = data['Mjob'].map(d)\ndata['Fjob'] = data['Fjob'].map(d)\n\n# map the reason data\nd = {'home': 0, 'reputation': 1, 'course': 2,'other': 3}\ndata['reason'] = data['reason'].map(d)\n\n# map the guardian data\nd = {'mother': 0, 'father': 1, 'other': 2}\ndata['guardian'] = data['guardian'].map(d)\n\n# map the grades data\nd = {'C': 0, 'B': 1, 'A': 2}\ndata['grades'] = data['grades'].map(d)","278c6846":"data.nunique()\n","768f5ae5":"student_features = data.columns.tolist()\nstudent_features.remove('grades') \nstudent_features.remove('GAvg') \nstudent_features.remove('G1') \nstudent_features.remove('G2') \nstudent_features.remove('G3') \nstudent_features","27ace65f":"X = data[student_features].copy()\nX.columns","6cd38e31":"y=data[['grades']].copy()\n","0a1ac6d2":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=100)","79e82a3e":"grade_classifier = tree.DecisionTreeClassifier(max_leaf_nodes=len(X.columns), random_state=0)\ngrade_classifier.fit(X_train, y_train)","580f493c":"dot_data = StringIO()  \ntree.export_graphviz(grade_classifier, out_file=dot_data,  \n                         feature_names=student_features)  \ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \nImage(graph.create_png())  ","0746a135":"predictions = grade_classifier.predict(X_test)","28a3baaf":"accuracy_score(y_true = y_test, y_pred = predictions)","ed55bb05":"**Some insights of the stats above:**\n\n**Age:** Average Age of the respondent is 16 Years Old\n\n**traveltime** Some kids travel 4 Hours a day just to reach school\n\n**famrel** Average kids have a good relationship with their family\n\n**absences** Average kids only have 6 days absences, and we spot outliers with 75 days absences\n\n**Dalc** Daily alcohol consumption among kids is very low (which is good)","47e46af5":"Then we can copy those features to **X**","7aa2021b":"let's create our prediction :","0d2daf9d":"# Step 3. Data analyzing\n","0c86fadb":"also for the target to **y**","e9cd1297":"In this project, we will use DecisionTree Algorithm to predict the result.\nTo be able to work with DecisionTree, The sklearn library requires all computational values to be **numerical**, so first, \nwe should convert those categorical values to numerical values","42b45f7c":"How many unique data?","4e0085f5":"Finally, we can measure the accuracy of our classifier:","bbeb7d14":"Import the CSV file:","123d6f25":"Next we can split the train data and test data using **train_test_split** function","3d451fdf":"OK great so there are no NULL values, let's see the data preview","c6af9b66":"Let's see the unique data again, just to make sure that we have done the mapping successfully.","cb2c89af":"Now lets create a grading based on its G Average:\n\nAbove 90% = Grade A\n\nBetween 70% & 90% = Grade B\n\nBelow 70% = Grade C","d12d9b26":"Let's import the necessary libraries:","ff7424df":"**There are 33 columns:**\n\n**school:**\nstudent's school (binary: 'GP' - Gabriel Pereira or 'MS' - Mousinho da Silveira)\n\n**sex:**\nstudent's sex (binary: 'F' - female or 'M' - male)\n\n**age:**\nstudent's age (numeric: from 15 to 22)\n\n**address:**\nstudent's home address type (binary: 'U' - urban or 'R' - rural)\n\n**famsize:**\nfamily size (binary: 'LE3' - less or equal to 3 or 'GT3' - greater than 3)\n\n**Pstatus:**\nparent's cohabitation status (binary: 'T' - living together or 'A' - apart)\n\n**Medu:**\nmother's education (numeric: 0 - none, 1 - primary education (4th grade), 2 \u00e2\u20ac\u201c 5th to 9th grade, 3 \u00e2\u20ac\u201c secondary education or 4 \u00e2\u20ac\u201c higher education)\n\n**Fedu:**\nfather's education (numeric: 0 - none, 1 - primary education (4th grade), 2 \u00e2\u20ac\u201c 5th to 9th grade, 3 \u00e2\u20ac\u201c secondary education or 4 \u00e2\u20ac\u201c higher education)\n\n**Mjob:**\nmother's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')\n\n**Fjob:**\nfather's job (nominal: 'teacher', 'health' care related, civil 'services' (e.g. administrative or police), 'at_home' or 'other')\n\n**reason:**\nreason to choose this school (nominal: close to 'home', school 'reputation', 'course' preference or 'other')\n\n**guardian:**\nstudent's guardian (nominal: 'mother', 'father' or 'other')\n\n**traveltime:**\nhome to school travel time (numeric: 1 - <15 min., 2 - 15 to 30 min., 3 - 30 min. to 1 hour, or 4 - >1 hour)\n\n**studytime:**\nweekly study time (numeric: 1 - <2 hours, 2 - 2 to 5 hours, 3 - 5 to 10 hours, or 4 - >10 hours)\n\n**failures:**\nnumber of past class failures (numeric: n if 1<=n<3, else 4)\n\n**schoolsup:**\nextra educational support (binary: yes or no)\n\n**famsup:**\nfamily educational support (binary: yes or no)\n\n**paid:**\nextra paid classes within the course subject (Math or Portuguese) (binary: yes or no)\n\n**activities:**\nextra-curricular activities (binary: yes or no)\n\n**nursery:**\nattended nursery school (binary: yes or no)\n\n**higher:**\nwants to take higher education (binary: yes or no)\n\n**internet:**\nInternet access at home (binary: yes or no)\n\n**romantic:**\nwith a romantic relationship (binary: yes or no)\n\n**famrel:**\nquality of family relationships (numeric: from 1 - very bad to 5 - excellent)\n\n**freetime:**\nfree time after school (numeric: from 1 - very low to 5 - very high)\n\n**goout:**\ngoing out with friends (numeric: from 1 - very low to 5 - very high)\n\n**Dalc:**\nworkday alcohol consumption (numeric: from 1 - very low to 5 - very high)\n\n**Walc:**\nweekend alcohol consumption (numeric: from 1 - very low to 5 - very high)\n\n**health:**\ncurrent health status (numeric: from 1 - very bad to 5 - very good)\n\n**absences:**\nnumber of school absences (numeric: from 0 to 93)\n\n**G1:**\nfirst period grade (numeric: from 0 to 20)\n\n**G2:**\nsecond period grade (numeric: from 0 to 20)\n\n**G3:**\nfinal grade (numeric: from 0 to 20)","3667f22e":"Then we can create the classifier ","e6632206":"# Step 2. Data preparation","58468ed1":"Then for the rest categorical values:","129aec45":"# Step 4. Build Machine Learning Model","9245365a":"Next, we can drop school name and age feature because it is not a computational value\n","cde46271":"Well, accuracy score of **0.775** is not bad, we can also tune the hyperparameters to increase the accuracy score.","43befc1e":"We can also view how the grade_classifier divide the logic using **pydotplus** library","be253b73":"# Step 1. Acquiring the data","8473603d":"From the data above, let's create one more column to get the average grade from G1 to G3 (3 years average):","b9fa76b6":"Check for NULL values:","c24fb68a":"OK, to have a better picture of the data, let's describe the values","2cb2f83d":"Now we can collect all predictive feature columns, and then remove **grades** from it because **grades** is our target"}}