{"cell_type":{"82387eba":"code","b347eaa2":"code","fde9b7b4":"code","c19819d6":"code","b7d83189":"code","3afc0b3d":"code","1dbe54c9":"code","92517b76":"code","9a33bd99":"code","3a19ac0e":"code","0708d9c2":"code","b7e551ec":"code","8460217a":"code","2da74228":"code","6bed5297":"code","86d65b34":"code","2348bf86":"code","293eb0ca":"code","f04adc87":"code","d019278c":"code","3de8bedd":"code","1d547c9b":"code","580e11e5":"code","c3755dc0":"code","0fbd8677":"code","486fb0e0":"code","52841483":"code","6dcc0cd9":"code","3dd719a8":"markdown","1a956cb8":"markdown","ad32f523":"markdown","d031a55f":"markdown","2021419d":"markdown","591d2367":"markdown","5185f80c":"markdown","d61683da":"markdown"},"source":{"82387eba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd\nimport seaborn as sns \nimport matplotlib.pyplot as plt# data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b347eaa2":"df = pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")","fde9b7b4":"df.head()","c19819d6":"df.info()\n","b7d83189":"temp = (df.groupby(['target']))['cp'].value_counts(normalize=True)\\\n.mul(100).reset_index(name = \"percentage\")\nsns.barplot(x = \"target\", y = \"percentage\", hue = \"cp\", data = temp)\\\n.set_title(\"Chest Pain vs Heart Disease\")","3afc0b3d":"temp = (df.groupby(['target']))['fbs'].value_counts(normalize=True)\\\n.mul(100).reset_index(name = \"percentage\")\nsns.barplot(x = \"target\", y = \"percentage\", hue = \"fbs\", data = temp).set_title(\"FBS vs Target\")","1dbe54c9":"temp = (df.groupby(['target']))['restecg'].value_counts(normalize=True)\\\n.mul(100).reset_index(name = \"percentage\")\nsns.barplot(x = \"target\", y = \"percentage\", hue = \"restecg\", data = temp)\\\n.set_title(\"resting electrocardiographic results vs Heart Disease\")","92517b76":"temp = (df.groupby(['target']))['ca'].value_counts(normalize=True)\\\n.mul(100).reset_index(name = \"percentage\")\nsns.barplot(x = \"target\", y = \"percentage\", hue = \"ca\", data = temp)\\\n.set_title(\"ca vs Heart Disease\")","9a33bd99":"temp = (df.groupby(['target']))['thal'].value_counts(normalize=True)\\\n.mul(100).reset_index(name = \"percentage\")\nsns.barplot(x = \"target\", y = \"percentage\", hue = \"thal\", data = temp)\\\n.set_title(\"thal vs Heart Disease\")","3a19ac0e":"df.boxplot()\nplt.xticks(rotation = 90)","0708d9c2":"import seaborn as sns\nsns.heatmap(df.corr())","b7e551ec":"plt.boxplot(df.trestbps)","8460217a":"Q3 = df.trestbps.quantile(.75)\nQ1 = df.trestbps.quantile(.25)\nIQR = Q3 - Q1\ndf = df[~((df.trestbps < Q1 - 1.5*IQR) | (df.trestbps > Q3 + 1.5*IQR))]","2da74228":"Q3 = df.chol.quantile(.75)\nQ1 = df.chol.quantile(.25)\nIQR = Q3 - Q1\ndf = df[~((df.chol < Q1 - 1.5*IQR) | (df.chol > Q3 + 1.5*IQR))]","6bed5297":"df.boxplot()\nplt.xticks(rotation = 90)","86d65b34":"sns.countplot(x=\"target\", data=df,hue = 'sex').set_title(\"GENDER - Heart Diseases\")","2348bf86":"df.sample()","293eb0ca":"df[(df.target ==  1) & (df.sex == 1)].age.mean()   #average of male who got stroke","f04adc87":"df[(df.target ==  1) & (df.sex == 0)].age.mean()   #average of female who got stroke","d019278c":"df[(df.target ==  1) & (df.sex == 0)].describe()[1:2]   #avg features responsible for stroke in female","3de8bedd":"df[(df.target ==  1) & (df.sex == 1)].describe()[1:2]  #avg features responsible for stroke in male","1d547c9b":"df[(df.target ==  0) & (df.sex == 0)].describe()[1:2]   #avg features responsible for not having stroke in female","580e11e5":" df[(df.target ==  0) & (df.sex == 1)].describe()[1:2]    #avg features responsible for not having stroke in female","c3755dc0":"x = df.age.tolist()\nafter_x = []\nfor i in x:\n    if i < 20:\n        after_x.append(\"0\")\n    elif i < 30:\n        after_x.append(\"1\")\n    elif i < 40:\n        after_x.append(\"2\")\n    elif i < 50:\n        after_x.append(\"3\")\n    elif i < 60:\n        after_x.append(\"4\")\n    else:\n        after_x.append(\"5\")\ndf[\"age_category\"] = after_x","0fbd8677":"df.sample(5)","486fb0e0":"temp = (df.groupby(['target']))['age_category'].value_counts(normalize=True)\\\n.mul(100).reset_index(name = \"percentage\")\nsns.barplot(x = \"target\", y = \"percentage\", hue = \"age_category\", data = temp)\\\n.set_title(\"Age category vs Heart Disease\")","52841483":"from sklearn.model_selection import train_test_split\ntrain_x,test_x,train_y,test_y = train_test_split(df.iloc[:,:-2],df.iloc[:,-2],)","6dcc0cd9":"from xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\ndpen = []\nfor i in range(5,11):\n    model = XGBClassifier(max_depth = i)\n    model.fit(train_x,train_y)\n    target = model.predict(test_x)\n    dpen.append(accuracy_score(test_y, target))\nprint(\"Best accuracy: \",max(dpen))","3dd719a8":"All the values are either integer or float.","1a956cb8":"\nThe features are:\n\n        age\n        sex ---->  (already mapped to 0\/1)\n        chest pain type (4 values)  ----> (0,1,2,3)\n        resting blood pressure\n        serum cholestoral in mg\/dl\n        fasting blood sugar > 120 mg\/dl\n        resting electrocardiographic results ----> ( 0,1,2)\n        maximum heart rate achieved\n        exercise induced angina\n        oldpeak = ST depression induced by exercise relative to rest\n        the slope of the peak exercise ST segment\n        number of major vessels (0-3) colored by flourosopy\n        thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n\n","ad32f523":"Analysis of Categorical data","d031a55f":"There seem to be outliers so we will use correlation heatmap","2021419d":"Categorising the age","591d2367":"Categorical attributes are : \"cp\",\"fbs\", \"restecg\", \"ca\" and \"thal\"","5185f80c":"Checking of outliers using boxplot","d61683da":"Modelling"}}