{"cell_type":{"b464a73e":"code","d2c72ae7":"code","26083687":"code","1880b415":"code","f02f4222":"code","89b11fd7":"code","7beefdc8":"code","b5946a96":"code","e1451249":"code","ee12c4dc":"code","8de61a9c":"code","db679aef":"code","3fafa884":"code","d7da35b6":"code","633e0560":"code","1dd78a17":"code","80834ee2":"code","efa32870":"code","c7a33ec1":"code","9e73263d":"code","ab32caf0":"code","6cd21161":"code","df33fa34":"code","24f2b8aa":"code","091e9799":"code","1241284c":"code","07d48e75":"code","9d769b12":"code","e40dcdce":"code","ee25e3a2":"code","56b16ea3":"code","571eb579":"code","4df6f078":"code","dcbcdae3":"code","8759a60b":"code","01f64654":"code","d41765ef":"code","3e2d4d33":"code","ca7a298e":"code","d3e90ca1":"code","a1b86ad9":"code","385b9311":"markdown","541e4fac":"markdown","ddad54a6":"markdown","d47a9b18":"markdown","b204c138":"markdown","a11dd677":"markdown","1224885d":"markdown","f204c86c":"markdown","2b4e77a7":"markdown","0bc01d7a":"markdown","e82b6c7e":"markdown","67cf9bb1":"markdown","2124d988":"markdown","198600df":"markdown","759f2d42":"markdown","873316dd":"markdown","7e36281c":"markdown","443b8338":"markdown","02bcc893":"markdown","cae25695":"markdown","98ccf03a":"markdown","33f14861":"markdown"},"source":{"b464a73e":"import os\nimport joblib\nimport warnings\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('float_format', '{:f}'.format)\nwarnings.filterwarnings('ignore')","d2c72ae7":"train_df = pd.read_csv('\/kaggle\/input\/30-days-of-ml\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/30-days-of-ml\/test.csv')","26083687":"cat_features = [feature for feature in train_df.columns if 'cat' in feature]\ncont_features = [feature for feature in train_df.columns if 'cont' in feature]","1880b415":"print('Rows and Columns in train dataset:', train_df.shape)\nprint('Rows and Columns in test dataset:', test_df.shape)","f02f4222":"print('Missing values in train dataset:', sum(train_df.isnull().sum()))\nprint('Missing values in test dataset:', sum(test_df.isnull().sum()))","89b11fd7":"train_df.head()","7beefdc8":"test_df.head()","b5946a96":"plt.rcParams['figure.dpi'] = 600\nfig = plt.figure(figsize=(15, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(4, 4)\ngs.update(wspace=0.3, hspace=0.2)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, 4):\n    for col in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        locals()[\"ax\"+str(run_no)].set_yticklabels([])\n        locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.2, 4.5, 'Continuous Features Distribution on Train Dataset', fontsize=20, fontweight='bold')\nax0.text(-0.2, 4, 'Continuous features have multimodal', fontsize=13, fontweight='light')        \n\nrun_no = 0\nfor col in cont_features:\n    sns.kdeplot(train_df[col], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', \n                edgecolor='black', linewidth=1.5, alpha=1, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel(col, fontsize=10, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.1, 0)\n    locals()[\"ax\"+str(run_no)].set_xlabel('')\n    run_no += 1\n    \nax14.remove()\nax15.remove()","e1451249":"train_df[cont_features].describe()","ee12c4dc":"fig = plt.figure(figsize=(5, 2), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 1)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nax0 = fig.add_subplot(gs[0, 0])\nax0.set_facecolor(background_color)\nax0.set_yticklabels([])\nax0.tick_params(axis='y', which=u'both',length=0)\nfor s in [\"top\",\"right\", 'left']:\n    ax0.spines[s].set_visible(False)\n\nax0.text(-0.5, 0.87, 'Target Distribution on Train Dataset', fontsize=10, fontweight='bold')\nax0.text(-0.5, 0.82, 'Target has a multimodal distribution', fontsize=5, fontweight='light')        \n\nsns.kdeplot(train_df['target'], ax=ax0, shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\nax0.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.set_xlabel('')\nax0.set_ylabel('')\n\nplt.show()","8de61a9c":"print('Target')\ntrain_df['target'].describe()","db679aef":"fig = plt.figure(figsize=(15, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(4, 4)\ngs.update(wspace=0.3, hspace=0.2)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, 4):\n    for col in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        locals()[\"ax\"+str(run_no)].set_yticklabels([])\n        locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.3, 4.65, 'Continuous Features Distribution on Test Dataset', fontsize=20, fontweight='bold')\nax0.text(-0.3, 4.2, 'Continuous features on test dataset resemble train dataset', fontsize=13, fontweight='light')        \n\nrun_no = 0\nfor col in cont_features:\n    sns.kdeplot(test_df[col], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel(col, fontsize=10, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.1, 0)\n    locals()[\"ax\"+str(run_no)].set_xlabel('')\n    run_no += 1\n    \nax14.remove()\nax15.remove()","3fafa884":"test_df[cont_features].describe()","d7da35b6":"background_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(25, 8), facecolor=background_color)\ngs = fig.add_gridspec(2, 5)\ngs.update(wspace=0.3, hspace=0.2)\n\nrun_no = 0\nfor row in range(0, 2):\n    for col in range(0, 5):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.8, 75, 'Count of categorical features on Train dataset (%)', fontsize=20, fontweight='bold')\nax0.text(-0.8, 70, 'Some features are dominated by one category', fontsize=13, fontweight='light')        \n\nrun_no = 0\nfor col in cat_features:\n    chart_df = pd.DataFrame(train_df[col].value_counts() \/ len(train_df) * 100)\n    sns.barplot(x=chart_df.index, y=chart_df[col], ax=locals()[\"ax\"+str(run_no)], color='#2f5586', zorder=3, edgecolor='black', linewidth=1.5)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    run_no += 1","633e0560":"background_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(25, 8), facecolor=background_color)\ngs = fig.add_gridspec(2, 5)\ngs.update(wspace=0.3, hspace=0.2)\n\nrun_no = 0\nfor row in range(0, 2):\n    for col in range(0, 5):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.8, 75, 'Count of categorical features on Test dataset (%)', fontsize=20, fontweight='bold')\nax0.text(-0.8, 70, 'Some features are dominated by one category', fontsize=13, fontweight='light')        \n\nrun_no = 0\nfor col in cat_features:\n    chart_df = pd.DataFrame(test_df[col].value_counts() \/ len(test_df) * 100)\n    sns.barplot(x=chart_df.index, y=chart_df[col], ax=locals()[\"ax\"+str(run_no)], color='#2f5586', zorder=3, edgecolor='black', linewidth=1.5)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    run_no += 1","1dd78a17":"background_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(18, 8), facecolor=background_color)\ngs = fig.add_gridspec(1, 2)\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\ncolors = [\"#2f5586\", \"#f6f5f5\",\"#2f5586\"]\ncolormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\nax0.set_facecolor(background_color)\nax0.text(0, -1, 'Features Correlation on Train Dataset', fontsize=20, fontweight='bold')\nax0.text(0, -0.4, 'Highest correlation in the dataset is 0.5', fontsize=13, fontweight='light')\n\nax1.set_facecolor(background_color)\nax1.text(-0.1, -1, 'Features Correlation on Test Dataset', fontsize=20, fontweight='bold', fontfamily='serif')\nax1.text(-0.1, -0.4, 'Features in test dataset resemble features in train dataset ', \n         fontsize=13, fontweight='light', fontfamily='serif')\n\nsns.heatmap(train_df[cont_features].corr(), ax=ax0, vmin=-1, vmax=1, annot=True, square=True, \n            cbar_kws={\"orientation\": \"horizontal\"}, cbar=False, cmap=colormap, fmt='.1f')\n\nsns.heatmap(test_df[cont_features].corr(), ax=ax1, vmin=-1, vmax=1, annot=True, square=True, \n            cbar_kws={\"orientation\": \"horizontal\"}, cbar=False, cmap=colormap, fmt='.1f')\n\nplt.show()","80834ee2":"background_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(12, 8), facecolor=background_color)\ngs = fig.add_gridspec(1, 1)\nax0 = fig.add_subplot(gs[0, 0])\ncolors = [\"#2f5586\", \"#f6f5f5\",\"#2f5586\"]\ncolormap = matplotlib.colors.LinearSegmentedColormap.from_list(\"\", colors)\n\nax0.set_facecolor(background_color)\nax0.text(-1.1, 0.0675, 'Correlation of Continuous Features with Target', fontsize=20, fontweight='bold')\nax0.text(-1.1, 0.064, 'There is no features that pass 0.06 correlation with target', fontsize=13, fontweight='light')\n\nchart_df = pd.DataFrame(train_df[cont_features].corrwith(train_df['target']))\nchart_df.columns = ['corr']\nsns.barplot(x=chart_df.index, y=chart_df['corr'], ax=ax0, color='#2f5586', zorder=3, edgecolor='black', linewidth=1.5)\nax0.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.set_ylabel('')\n\nfor s in [\"top\",\"right\", 'left']:\n    ax0.spines[s].set_visible(False)\n\nplt.show()","efa32870":"fig = plt.figure(figsize=(15, 15), facecolor = '#f6f5f5')\ngs = fig.add_gridspec(4, 4)\ngs.update(wspace=0.5, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\ncmap = sns.light_palette('#2f5586', as_cmap=True)\n\nrun_no = 0\nfor row in range(0, 4):\n    for col in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nrun_no = 0\nfor feature in cont_features:\n        locals()[\"ax\"+str(run_no)].hexbin(x=train_df[feature], y=train_df['target'], gridsize=15, \n                                      cmap=cmap, zorder=2, facecolor='black', mincnt=1)\n        locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n        locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n        locals()[\"ax\"+str(run_no)].set_ylabel('target', fontsize=10, fontweight='bold')\n        locals()[\"ax\"+str(run_no)].set_xlabel(feature, fontsize=10, fontweight='bold')\n        run_no += 1\n        \nax0.text(-0.2, 13, 'Features and Target Relation', fontsize=20, fontweight='bold')\nax0.text(-0.2, 12, 'To see the the correlation concentration to the target', fontsize=13, fontweight='light')\n\nax14.remove()\nax15.remove()\n\nplt.show()","c7a33ec1":"cat = 'cat0'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(-0.5, 0.9, 'Target Distribution on \"cat0\" feature ', fontsize=20, fontweight='bold')\nax0.text(-0.5, 0.8, 'To see how target is distributed across each value', fontsize=13, fontweight='light')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.05, 0)\n    run_no += 1","9e73263d":"cat = 'cat1'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(-0.3, 1.01, 'Target Distribution on \"cat1\" feature ', fontsize=20, fontweight='bold')\nax0.text(-0.3, 0.9, 'To see how target is distributed across each value', fontsize=13, fontweight='light')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.05, 0)\n    run_no += 1","ab32caf0":"cat = 'cat2'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(-0.5, 0.9, 'Target Distribution on \"cat2\" feature ', fontsize=20, fontweight='bold')\nax0.text(-0.5, 0.8, 'To see how target is distributed across each value', fontsize=13, fontweight='light')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.05, 0)\n    run_no += 1","6cd21161":"cat = 'cat3'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(-0.3, 0.99, 'Target Distribution on \"cat3\" feature ', fontsize=20, fontweight='bold')\nax0.text(-0.3, 0.9, 'To see how target is distributed across each value', fontsize=13, fontweight='light')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.05, 0)\n    run_no += 1","df33fa34":"cat = 'cat4'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(4.2, 0.99, 'Target Distribution on \"cat4\" feature ', fontsize=20, fontweight='bold')\nax0.text(4.2, 0.9, 'To see how target is distributed across each value', fontsize=13, fontweight='light')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.05, 0)\n    run_no += 1","24f2b8aa":"cat = 'cat5'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, 10), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(1.5, 0.98, 'Target Distribution on \"cat5\" feature ', fontsize=20, fontweight='bold')\nax0.text(1.5, 0.9, 'To see how target is distributed across each value', fontsize=13, fontweight='light')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.05, 0)\n    run_no += 1","091e9799":"cat = 'cat6'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, 20), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(-0.5, 1, 'Target Distribution on \"cat6\" feature ', fontsize=20, fontweight='bold')\nax0.text(-0.5, 0.9, 'To see how target is distributed across each value', fontsize=13, fontweight='light')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.05, 0)\n    run_no += 1","1241284c":"cat = 'cat7'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, 20), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(5.3, 0.62, 'Target Distribution on \"cat7\" feature ', fontsize=20, fontweight='bold')\nax0.text(5.3, 0.55, 'To see how target is distributed across each value', fontsize=13, fontweight='light')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.05, 0)\n    run_no += 1","07d48e75":"cat = 'cat8'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, 20), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(0.4, 0.9, 'Target Distribution on \"cat8\" feature ', fontsize=20, fontweight='bold')\nax0.text(0.4, 0.8, 'To see how target is distributed across each value', fontsize=13, fontweight='light')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.05, 0)\n    run_no += 1","9d769b12":"cat = 'cat9'\nvalue = pd.Series(train_df[cat].value_counts().sort_index().index)\n\nfig = plt.figure(figsize=(60, 38), facecolor='#f6f5f5')\ngs = fig.add_gridspec(len(value), 5)\ngs.update(wspace=0.2, hspace=0.3)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, len(value)):\n    locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, 0])\n    locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n    locals()[\"ax\"+str(run_no)].set_yticklabels([])\n    locals()[\"ax\"+str(run_no)].tick_params(axis='y', which=u'both',length=0)\n    for s in [\"top\",\"right\", 'left']:\n        locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n    run_no += 1\n\nax0.text(2.8, 0.9, 'Target Distribution on \"cat9\" feature ', fontsize=20, fontweight='bold')\nax0.text(2.8, 0.8, 'To see how target is distributed across each value', fontsize=13, fontweight='light')        \n\nrun_no = 0\nfor val in value:\n    sns.kdeplot(train_df[train_df[cat]==val]['target'], ax=locals()[\"ax\"+str(run_no)], shade=True, color='#2f5586', edgecolor='black', linewidth=1.5, alpha=0.9, zorder=3)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].set_ylabel(val, fontsize=20, fontweight='bold').set_rotation(0)\n    locals()[\"ax\"+str(run_no)].yaxis.set_label_coords(1.05, 0)\n    run_no += 1","e40dcdce":"train_fe_df = train_df.copy()\nfor col in cont_features:\n    train_fe_df[col] = np.log(train_fe_df[col])","ee25e3a2":"fig = plt.figure(figsize=(15, 15), facecolor = '#f6f5f5')\ngs = fig.add_gridspec(4, 4)\ngs.update(wspace=0.5, hspace=0.5)\n\nbackground_color = \"#f6f5f5\"\n\nrun_no = 0\nfor row in range(0, 4):\n    for col in range(0, 4):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\"]:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nrun_no = 0\nfor feature in cont_features:\n        locals()[\"ax\"+str(run_no)].hexbin(x=train_fe_df[feature], y=train_fe_df['target'], gridsize=15, \n                                      cmap=cmap, zorder=2, facecolor='black', mincnt=1)\n        locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n        locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n        locals()[\"ax\"+str(run_no)].set_ylabel('target', fontsize=10, fontweight='bold')\n        locals()[\"ax\"+str(run_no)].set_xlabel(feature, fontsize=10, fontweight='bold')\n        run_no += 1\n        \nax0.text(-12, 14, 'Log of Continuous Features', fontsize=20, fontweight='bold')\nax0.text(-12, 12.8, 'Create a log of continuous feature and compare it with the target', fontsize=13, fontweight='light')\n\nax14.remove()\nax15.remove()\n\nplt.show()","56b16ea3":"train_fe_df = train_df.copy()\ntrain_fe_df['min'] = train_fe_df[cont_features].min(axis=1)","571eb579":"fig = plt.figure(figsize=(10, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax0.set_facecolor(background_color)\nax1.set_facecolor(background_color)\nfor s in [\"top\",\"right\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n\nax0.text(-0.3, 12, 'Minimum and Log Minimum of All Continuous Features', fontsize=20, fontweight='bold')\nax0.text(-0.3, 11.3, 'Comparing minimum value (row basis) of all continuous features with target', fontsize=15, fontweight='light')        \n\nax0.hexbin(x=train_fe_df['min'], y=train_fe_df['target'], gridsize=15, \n                              cmap=cmap, zorder=2, facecolor='black', mincnt=1)\nax0.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.set_ylabel('target', fontsize=10, fontweight='bold')\nax0.set_xlabel(feature, fontsize=10, fontweight='bold')\nax0.set_xlabel('Min of all feature')\n\nax1.hexbin(x=np.log(train_fe_df['min']), y=train_fe_df['target'], gridsize=15, \n                              cmap=cmap, zorder=2, facecolor='black', mincnt=1)\nax1.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1.set_ylabel('target', fontsize=10, fontweight='bold')\nax1.set_xlabel(feature, fontsize=10, fontweight='bold')\nax1.set_xlabel('Log min of all feature')\n\nplt.show()","4df6f078":"train_fe_df = train_df.copy()\ntrain_fe_df['max'] = train_fe_df[cont_features].max(axis=1)","dcbcdae3":"fig = plt.figure(figsize=(10, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax0.set_facecolor(background_color)\nax1.set_facecolor(background_color)\nfor s in [\"top\",\"right\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n\nax0.text(0.35, 12, 'Maximum and Log Maximum of All Continuous Features', fontsize=20, fontweight='bold')\nax0.text(0.35, 11.3, 'Comparing maximum value (row basis) of all continuous features with target', fontsize=15, fontweight='light')        \n\nax0.hexbin(x=train_fe_df['max'], y=train_fe_df['target'], gridsize=15, \n                              cmap=cmap, zorder=2, facecolor='black', mincnt=1)\nax0.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.set_ylabel('target', fontsize=10, fontweight='bold')\nax0.set_xlabel(feature, fontsize=10, fontweight='bold')\nax0.set_xlabel('Max of all feature')\n\nax1.hexbin(x=np.log(train_fe_df['max']), y=train_fe_df['target'], gridsize=15, \n                              cmap=cmap, zorder=2, facecolor='black', mincnt=1)\nax1.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1.set_ylabel('target', fontsize=10, fontweight='bold')\nax1.set_xlabel(feature, fontsize=10, fontweight='bold')\nax1.set_xlabel('Log max of all feature')\n\nplt.show()","8759a60b":"train_fe_df = train_df.copy()\ntrain_fe_df['cont_sum'] = train_fe_df[cont_features].sum(axis=1)","01f64654":"fig = plt.figure(figsize=(10, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax0.set_facecolor(background_color)\nax1.set_facecolor(background_color)\n\nfor s in [\"top\",\"right\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n\nax0.text(2.8, 12.3, 'Sum and Log Sum of All Continuous Features', fontsize=20, fontweight='bold')\nax0.text(2.8, 11.5, 'Comparing sum value (row basis) of all continuous features with target', fontsize=15, fontweight='light')        \n\nax0.hexbin(x=train_fe_df['cont_sum'], y=train_fe_df['target'], gridsize=15, \n                              cmap=cmap, zorder=2, facecolor='black', mincnt=1)\nax0.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.set_ylabel('target', fontsize=10, fontweight='bold')\nax0.set_xlabel(feature, fontsize=10, fontweight='bold')\nax0.set_xlabel('Sum of all feature')\n\nax1.hexbin(x=np.log(train_fe_df['cont_sum']), y=train_fe_df['target'], gridsize=15, \n                              cmap=cmap, zorder=2, facecolor='black', mincnt=1)\nax1.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1.set_ylabel('target', fontsize=10, fontweight='bold')\nax1.set_xlabel(feature, fontsize=10, fontweight='bold')\nax1.set_xlabel('Log sum of all feature')\n\nplt.show()","d41765ef":"train_fe_df = train_df.copy()\ntrain_fe_df['cont_multiply'] = 1\nfor col in cont_features:\n    train_fe_df['cont_multiply'] = train_fe_df[col] * train_fe_df['cont_multiply']","3e2d4d33":"fig = plt.figure(figsize=(10, 5), facecolor='#f6f5f5')\ngs = fig.add_gridspec(1, 2)\ngs.update(wspace=0.2, hspace=0.05)\n\nbackground_color = \"#f6f5f5\"\n\nax0 = fig.add_subplot(gs[0, 0])\nax1 = fig.add_subplot(gs[0, 1])\nax0.set_facecolor(background_color)\nax1.set_facecolor(background_color)\nfor s in [\"top\",\"right\"]:\n    ax0.spines[s].set_visible(False)\n    ax1.spines[s].set_visible(False)\n\nax0.text(-0.005, 12.3, 'Multiplication and Log Multiplication of All Continuous Features', fontsize=20, fontweight='bold')\nax0.text(-0.005, 11.5, 'Comparing multiplication value (row basis) of all continuous features with target', fontsize=15, fontweight='light')        \n\nax0.hexbin(x=train_fe_df['cont_multiply'], y=train_fe_df['target'], gridsize=15, \n                              cmap=cmap, zorder=2, facecolor='black', mincnt=1)\nax0.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax0.set_ylabel('target', fontsize=10, fontweight='bold')\nax0.set_xlabel(feature, fontsize=10, fontweight='bold')\nax0.set_xlabel('Multiplication of all feature')\n\nax1.hexbin(x=np.log(train_fe_df['cont_multiply']), y=train_fe_df['target'], gridsize=15, \n                              cmap=cmap, zorder=2, facecolor='black', mincnt=1)\nax1.grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1.grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\nax1.set_ylabel('target', fontsize=10, fontweight='bold')\nax1.set_xlabel(feature, fontsize=10, fontweight='bold')\nax1.set_xlabel('Log Multiplication of all feature')\n\nplt.show()","ca7a298e":"background_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(25, 8), facecolor=background_color)\ngs = fig.add_gridspec(2, 5)\ngs.update(wspace=0.2, hspace=0.2)\n\nrun_no = 0\nfor row in range(0, 2):\n    for col in range(0, 5):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.6, 9.4, 'Mean Encoding by Categorical Features', fontsize=20, fontweight='bold')\nax0.text(-0.6, 8.7, 'There is no distinct mean differences in the target', fontsize=13, fontweight='light')\nrun_no = 0\nfor col in cat_features:\n    chart_df = pd.DataFrame(train_df.groupby(col)['target'].mean()).reset_index()\n    sns.barplot(x=chart_df[col], y=chart_df['target'], ax=locals()[\"ax\"+str(run_no)], color='#2f5586', zorder=3, edgecolor='black', linewidth=1.5)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    run_no += 1","d3e90ca1":"background_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(25, 8), facecolor=background_color)\ngs = fig.add_gridspec(2, 5)\ngs.update(wspace=0.2, hspace=0.2)\n\nrun_no = 0\nfor row in range(0, 2):\n    for col in range(0, 5):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.6, 0.6, 'Minimum Encoding by Categorical Features', fontsize=20, fontweight='bold')\nax0.text(-0.6, 0.55, 'Target minimum varies among categorial features', fontsize=13, fontweight='light')\nrun_no = 0\nfor col in cat_features:\n    chart_df = pd.DataFrame(train_df.groupby(col)['target'].min()).reset_index()\n    sns.barplot(x=chart_df[col], y=chart_df['target'], ax=locals()[\"ax\"+str(run_no)], color='#2f5586', zorder=3, edgecolor='black', linewidth=1.5)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    run_no += 1","a1b86ad9":"background_color = \"#f6f5f5\"\n\nfig = plt.figure(figsize=(25, 8), facecolor=background_color)\ngs = fig.add_gridspec(2, 5)\ngs.update(wspace=0.2, hspace=0.2)\n\nrun_no = 0\nfor row in range(0, 2):\n    for col in range(0, 5):\n        locals()[\"ax\"+str(run_no)] = fig.add_subplot(gs[row, col])\n        locals()[\"ax\"+str(run_no)].set_facecolor(background_color)\n        for s in [\"top\",\"right\", 'left']:\n            locals()[\"ax\"+str(run_no)].spines[s].set_visible(False)\n        run_no += 1\n\nax0.text(-0.7, 12.3, 'Maximum Encoding by Categorical Features', fontsize=20, fontweight='bold')\nax0.text(-0.7, 11.3, 'Target maximum is quite flat among categorial features', fontsize=13, fontweight='light')\nrun_no = 0\nfor col in cat_features:\n    chart_df = pd.DataFrame(train_df.groupby(col)['target'].max()).reset_index()\n    sns.barplot(x=chart_df[col], y=chart_df['target'], ax=locals()[\"ax\"+str(run_no)], color='#2f5586', zorder=3, edgecolor='black', linewidth=1.5)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='x', zorder=0, color='#EEEEEE', linewidth=0.4)\n    locals()[\"ax\"+str(run_no)].grid(which='major', axis='y', zorder=0, color='#EEEEEE', linewidth=0.4)\n    run_no += 1","385b9311":"[back to top](#table-of-contents)\n<a id=\"features_correlation\"><\/a>\n# 4.1. Correlation between features","541e4fac":"[back to top](#table-of-contents)\n<a id=\"preparation\"><\/a>\n# 2. Preparation","ddad54a6":"# Table of Contents\n\n<a id=\"table-of-contents\"><\/a>\n1. [Introduction](#introduction)\n2. [Preparation](#preparation)\n3. [General](#general)\n    * 3.1. [No of rows and columns](#rows_columns)\n    * 3.2. [No of missing values](#missing_values)\n    * 3.3. [First 5 rows](#first_5_rows)\n    * 3.4. [Basic statistics on continuous features](#basic_statistics_cont)\n    * 3.5. [Count of categorical features](#count_cat)\n4. [Features & Target Correlation](#features_target_correlation)\n    * 4.1. [Correlation between features](#features_correlation)\n    * 4.2. [Correlation with target](#target_correlation)\n5. [Features Engineering](#features_engineering)\n    * 5.1. [Continuous Features](#fe_continuous)\n6. [Target Encoding](#target_encoding)\n    * 6.1. [Mean Encoding](#mean_encoding)\n    * 6.2. [Minimum Encoding](#min_encoding)\n    * 6.3. [Maximum Encoding](#max_encoding)","d47a9b18":"**Train dataset**","b204c138":"[back to top](#table-of-contents)\n<a id=\"rows_columns\"><\/a>\n## 3.1. No of rows and columns","a11dd677":"[back to top](#table-of-contents)\n<a id=\"max_encoding\"><\/a>\n## 6.3. Maximum Encoding ","1224885d":"[back to top](#table-of-contents)\n<a id=\"introduction\"><\/a>\n# 1. Introduction\n\nFor the final two weeks of the 30 Days of ML program, you will work on competition which is only open only to people who have signed up for the 30 Days of ML program.\n\nThe dataset is used for this competition is synthetic, but based on a real dataset. The original dataset deals with predicting the amount of an insurance claim. Although the features are anonymized, they have properties relating to real-world features. The data for this competition is closely related to the Tabular Playground Series - Feb 2021 competition. ","f204c86c":"Thank you for reading, I hope you enjoy it. If you find any mistakes and have any critics, please let me know. Once again, thank you.","2b4e77a7":"[back to top](#table-of-contents)\n<a id=\"features_target_correlation\"><\/a>\n# 4. Features & Target Correlation\n**Observations:**\n* Highest correlation between features is 0.5.\n* Correlation between features on train and test dataset are quite similar.\n* There is no continuous features that has correlation with `target` above\/below +\/- 0.06.\n* `cont1` has the lowest correlation with target, almost reaching 0 while `cont12` has the highest correlation with the target.","0bc01d7a":"[back to top](#table-of-contents)\n<a id=\"features_engineering\"><\/a>\n# 5. Features Engineering\n\nThis section will try to create a new features from existing features and see the relation with the target. The new features haven't been implemented to a model and still unknown it's effectiveness.\n\n<a id=\"fe_continuous\"><\/a>\n## 5.1. Continuous Features ","e82b6c7e":"**Test dataset**","67cf9bb1":"[back to top](#table-of-contents)\n<a id=\"count_cat\"><\/a>\n## 3.5. Count of categorical features","2124d988":"**First 5 rows in the train dataset**","198600df":"[back to top](#table-of-contents)\n<a id=\"general\"><\/a>\n# 3. General\n\n**Observations:**\n* Train set has 300,000 rows while test set has 200,000 rows.\n* There are 10 categorical features from `cat0` - `cat9` and 14 continuous features from `cont0` - `cont13`.\n* Categorical features ranging from alphabet `A` - `O` but it varies from each categorical feature with `cat0`, `cat1`, `cat3`, `cat5` and `cat6` are dominated by one category.\n* Continuous features on train anda test dataset ranging from -0.26 to 1 which are a multimodal distribution and they are resemble each other.\n* `target` has a range between 0.14 to 10.41 and has a bimodal distribution.\n\n**Ideas:**\n* Drop features that are dominated by one category `cat0`, `cat1`, `cat3`, `cat5` and `cat6` as they don't give variation to the dataset but further analysis still be needed.","759f2d42":"[back to top](#table-of-contents)\n<a id=\"missing_values\"><\/a>\n## 3.2. No of missing values","873316dd":"[back to top](#table-of-contents)\n<a id=\"basic_statistics_cont\"><\/a>\n## 3.4. Basic statistics on continuous features","7e36281c":"[back to top](#table-of-contents)\n<a id=\"min_encoding\"><\/a>\n## 6.2. Minimum Encoding ","443b8338":"[back to top](#table-of-contents)\n<a id=\"first_5_rows\"><\/a>\n## 3.3. First 5 rows","02bcc893":"**First 5 rows in the test dataset**","cae25695":"[back to top](#table-of-contents)\n<a id=\"target_correlation\"><\/a>\n# 4.2. Correlation with target\n\n### 4.2.1 Continuous Features","98ccf03a":"### 4.2.2 Categorical Features","33f14861":"[back to top](#table-of-contents)\n<a id=\"mean_encoding\"><\/a>\n# 6. Target Encoding\n\n**Observations:**\n- There is no disctinct `target mean` in each categorical features which mostly around 8.\n- Target `minimum` varies among categorical features but mostly are below 7.\n- Target `maximum` is in range 8 - 10 and quite consistent among categorical features but mostly are around 10.\n\n<a id=\"mean_encoding\"><\/a>\n## 6.1. Mean Encoding "}}