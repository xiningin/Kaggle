{"cell_type":{"f7f29ebb":"code","2705cf9b":"code","b3c7098d":"code","9b2fe64c":"code","89b3c510":"code","0d0ec161":"code","b1893c42":"code","5d5d57a1":"code","536cf633":"code","38a688f5":"code","fde55821":"code","8607b21f":"code","f75e9808":"code","74e48f68":"code","e94d2726":"code","6a9298b3":"code","fc4bd646":"code","f590fc82":"code","44d9e03b":"code","4690e52d":"code","b16d9184":"code","06c7855c":"code","86e4436d":"markdown","542c81c2":"markdown"},"source":{"f7f29ebb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.preprocessing import LabelEncoder\nimport os\nfrom keras import regularizers\nimport tensorflow as tf\nfrom sklearn import preprocessing\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.optimizers import SGD, Adam\nfrom tensorflow.keras.callbacks import ModelCheckpoint\nfrom keras.callbacks import Callback, EarlyStopping\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# roc curve and auc score\nfrom sklearn import preprocessing\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score","2705cf9b":"# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ntrainData = pd.read_csv(\"..\/input\/widsdatathon2020\/training_v2.csv\")\ntestData = pd.read_csv(\"..\/input\/widsdatathon2020\/unlabeled.csv\")\n\n# Any results you write to the current directory are saved as output.","b3c7098d":"categorical_cols = [c for c in trainData.columns if (trainData[c].dtype != np.number)& (trainData[c].dtype != int) ]\nCategorical_df= trainData[categorical_cols]\n# for col in categorical_cols:\n#     print(col, \"*****************\")\n#     print(Categorical_df[col].value_counts(), Categorical_df[col].unique())","9b2fe64c":"# frequency encoder\nfor col in ['ethnicity', 'hospital_admit_source', 'icu_admit_source', 'apache_3j_bodysystem', 'apache_2_bodysystem', 'icu_type']:\n    trainData[col] = trainData[col].astype('str')\n    freq = trainData.groupby(col).size()\/len(trainData[col])\n    trainData[col] = trainData[col].map(freq)\n    \n    testData[col] = testData[col].astype('str')\n    freq = testData.groupby(col).size()\/len(testData[col])\n    testData[col] = testData[col].map(freq)\n\ntrainData.head()","89b3c510":"# ordinal encoder\nicu_st_dict={'admit':0,'readmit':1,'transfer':2}\n\ntrainData['icu_stay_type'] = trainData['icu_stay_type'].astype('str')\ntrainData['icu_stay_type'] = trainData['icu_stay_type'].map(icu_st_dict)\n\ntestData['icu_stay_type'] = testData['icu_stay_type'].astype('str')\ntestData['icu_stay_type'] = testData['icu_stay_type'].map(icu_st_dict)","0d0ec161":"trainData['icu_stay_type'].tail(10)\ntrainData['icu_type'].tail(10)","b1893c42":"# label encoding the data gender\nle = LabelEncoder()\nfor col in ['gender']:\n    trainData[col] = trainData[col].astype('str')\n\n    #Fit LabelEncoder\n    le.fit(np.unique(trainData[col].unique()))\n\n    #At the end 0 will be used for null values so we start at 1 \n    trainData[col] = le.transform(trainData[col])+1\n    trainData[col] = trainData[col].replace(np.nan, 0).astype('int')\n    \n    testData[col] = testData[col].astype('str')\n\n    #Fit LabelEncoder\n    le.fit(np.unique(testData[col].unique()))\n\n    #At the end 0 will be used for null values so we start at 1 \n    testData[col] = le.transform(testData[col])+1\n    testData[col] = testData[col].replace(np.nan, 0).astype('int')\n\ntestData.head()","5d5d57a1":"# replace na with mean for following categories\n\nfor col in ['age', 'bmi', 'weight', 'height']:\n    mean = trainData[col].mean()\n    trainData[col] = trainData[col].replace(np.nan, mean).astype('int')\n    \n    mean = testData[col].mean()\n    testData[col] = testData[col].replace(np.nan, mean).astype('int')","536cf633":"x = testData.isnull().sum(axis=0)\nx","38a688f5":"trainData = trainData.replace(np.nan, 0).astype('int')\ntestData = testData.replace(np.nan, 0).astype('int')\ntestData.head(5)","fde55821":"to_drop = ['gender','ethnicity' ,'encounter_id', 'patient_id',  'hospital_death', 'hospital_id']\ntestDataOld = testData\ntrainLabel = trainData['hospital_death']\nfor col in to_drop:\n    trainData = trainData.drop(col, axis = 1)\n    testData = testData.drop(col, axis = 1)\n\ntrainData.head()","8607b21f":"cols_with_missing = (col for col in y_test.columns if y_test[col].isnull().any())\nfor col in cols_with_missing:\n    y_test[col + '_was_missing'] = y_test[col].isnull()\n    y_test[col + '_was_missing'] = y_test[col].isnull()","f75e9808":"x_train, y_test ,x_label, y_label = train_test_split(trainData, trainLabel, test_size=0.3, random_state=1)\nstd_scale = preprocessing.StandardScaler().fit(x_train)\nx_train = std_scale.transform(x_train)\ny_test  = std_scale.transform(y_test)\ntestData = std_scale.transform(testData)\nx_train.shape","74e48f68":"# from sklearn.linear_model import LinearRegression\n# from sklearn.feature_selection import RFE\n# from sklearn.feature_selection import SelectKBest, SelectFpr, f_classif\n\n# reg = LinearRegression()\n# x_train_new = SelectFpr(f_classif, alpha=0.01).fit_transform(x_train, x_label)\n# fit = reg.fit(x_train_new, x_label)\n# pred = fit.predict(y_test)\n# print(testData.shape, pred.shape)\n\n# auc = roc_auc_score(y_label, pred)\n# fpr, tpr, thresholds = roc_curve(y_label, pred)\n# plot_roc_curve(fpr, tpr)\n# print(auc)\n# pred = fit.predict(testData)\n# testDataOld[\"hospital_death\"] = pred\n# testDataOld[[\"encounter_id\",\"hospital_death\"]].to_csv(\"submission.csv\",index=False)\n# testDataOld[[\"encounter_id\",\"hospital_death\"]].head()","e94d2726":"def plot_roc_curve(fpr, tpr):\n    plt.plot(fpr, tpr, color='orange', label='ROC')\n    plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver Operating Characteristic (ROC) Curve')\n    plt.legend()\n    plt.show()","6a9298b3":"checkpoint_callback = ModelCheckpoint(\"model.h5\", monitor='accuracy', save_best_only=True, save_freq=2)\ny_test.shape","fc4bd646":"model = Sequential()\nmodel.add(Dense(64, input_shape=(180,),kernel_initializer='normal', activation='sigmoid', name='fc1'))\nmodel.add(Dense(32, activation='sigmoid',kernel_initializer='normal', name='fc3'))\nmodel.add(Dense(1, name='output'))\noptimizer = tf.keras.optimizers.RMSprop(0.0001)","f590fc82":"model.compile(optimizer, loss='mse', metrics=['accuracy', 'mse'])","44d9e03b":"model.fit(x_train, x_label, batch_size=60, epochs=50, callbacks=[checkpoint_callback])","4690e52d":"probs = model.predict_proba(y_test).flatten()\nauc = roc_auc_score(y_label, probs)\nfpr, tpr, thresholds = roc_curve(y_label, probs)\nplot_roc_curve(fpr, tpr)\nprint(\"AUC-ROC :\",auc)\nprobs","b16d9184":"probstest = model.predict_proba(testData)\nprobstest = probstest[:]\nprint(probstest)\ntestDataOld[\"hospital_death\"] = probstest\ntestDataOld[[\"encounter_id\",\"hospital_death\"]].to_csv(\"submission3.csv\",index=False)\ntestDataOld[[\"encounter_id\",\"hospital_death\"]].head()\ntestDataOld[[\"encounter_id\",\"hospital_death\"]].head()","06c7855c":"from IPython.display import FileLink\nimport os\nos.chdir(r'\/kaggle\/working')\nFileLink(r'submission3.csv')","86e4436d":"<H2> Preparing the data first... <\/h2>","542c81c2":"<h2> Training the data now... <\/h2>"}}