{"cell_type":{"d0a027ef":"code","890da1ab":"code","fde4e405":"code","8a495624":"code","62a763c1":"code","ee91a9bb":"code","dabc4e88":"code","5d7f752c":"code","7c2faf52":"code","ebc7b0a6":"code","ecaa8bab":"code","2d8ec3fa":"code","5e1a7eee":"code","d131abea":"code","b632cdd0":"code","5cd1ded6":"code","33be4499":"code","259ac0a0":"code","5be2d34b":"code","370bb28e":"code","7c9acdd6":"code","15ee3222":"code","d3cd84c2":"code","b56e175d":"code","795a679f":"code","1afb5622":"code","26c1d309":"code","df04974f":"code","98a1fd2e":"code","a0f6f5c8":"markdown","6a156ff7":"markdown","082199ce":"markdown","0b963a79":"markdown"},"source":{"d0a027ef":"import numpy as np \nimport pandas as pd \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math as m\n%matplotlib inline\n\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\nimport sklearn.neural_network as nn","890da1ab":"df = pd.read_csv(\"..\/input\/london-bike-sharing-dataset\/london_merged.csv\") ","fde4e405":"# some basic statistics about the dataset\nprint(\"Shape of data:\",df.shape)\nprint(\"Number of missing values in the data\", df.isnull().sum().sum())","8a495624":"df.head()","62a763c1":"# some basic statistics on the numerical columns\ndf.describe().T","ee91a9bb":"processed_df =  df.copy()","dabc4e88":"# Let's convert the timestamp to datatime format so we can separate date, time\nprocessed_df['timestamp'] = pd.to_datetime(processed_df['timestamp'])","5d7f752c":"#Separate year, month, day, weekday, hour from timestamp\nprocessed_df[\"year\"] = processed_df['timestamp'].dt.year\nprocessed_df[\"month\"] = processed_df['timestamp'].dt.month\nprocessed_df[\"day_of_month\"] = processed_df['timestamp'].dt.day\nprocessed_df[\"day_of_week\"] = processed_df['timestamp'].dt.weekday\nprocessed_df[\"hour\"] = processed_df['timestamp'].dt.hour\nprocessed_df.head()","7c2faf52":"# now let's see how many rows are there for each year\nsns.countplot(x=\"year\", data=processed_df)","ebc7b0a6":"# now let's see how many rows are there for each season\nsns.countplot(x=\"season\", data=processed_df) ","ecaa8bab":"# now let's see how many rows are there for each day of the week\nsns.countplot(x=\"day_of_week\", data=processed_df) ","2d8ec3fa":"# now let's see if weekend has any effect\nsns.countplot(x=\"is_weekend\", data=processed_df) ","5e1a7eee":"# Let's see the effect of weather condition\nsns.countplot(x=\"weather_code\", data=processed_df)","d131abea":"#let's look at the distribution of the count \nsns.distplot(processed_df['cnt'], label='count')","b632cdd0":"# let's see how many count they have on each day\nprocessed_df['date_year']  = processed_df[[ 'year', 'month','day_of_month']].astype(str).apply(lambda x: '-'.join(x), axis=1)\nplot_data = processed_df[[ 'cnt', 'date_year']]\nax = plot_data.groupby('date_year').sum().plot(figsize=(20,8))\nax.set_xlabel(\"Date\")\nax.set_ylabel(\"number of rides per day\")","5cd1ded6":"#Let's smooth the curve using rolling window mean and deviations\nplot_data = plot_data.groupby('date_year').sum()\nwindow = 7\nrolling_means = plot_data.rolling(window).mean()\nrolling_deviations = plot_data.rolling(window).std()\nax = rolling_means.plot(figsize=(20,8))\nax.set_xlabel(\"Date\")\nax.set_ylabel(\"number of rides per day\")","33be4499":"#let's see count in terms of months\nplt.figure(figsize=(10,6), dpi=120)\nsns.barplot(x=\"month\", y=\"cnt\", data=processed_df)","259ac0a0":"#difference between seasons\nsns.pointplot(data=processed_df, x=\"day_of_week\", y=\"cnt\", hue=\"season\")","5be2d34b":"#let's plot everything in groups of two\nplt.figure(figsize=(30,20))\nsns.pairplot(processed_df[['cnt', 't1', 't2', 'hum', 'wind_speed', 'weather_code', 'is_holiday', 'is_weekend', 'season', 'hour', 'month']])\nplt.show()","370bb28e":"#let's take a look at the correlation heatmap\nplt.figure(figsize=(16,8), dpi=150)\nsns.heatmap(processed_df.corr(),annot=True)","7c9acdd6":"#converting type to int\nprocessed_df.weather_code = processed_df.weather_code.astype(int)\nprocessed_df.season = processed_df.season.astype(int)\nprocessed_df.is_weekend = processed_df.is_weekend.astype(int)\nprocessed_df.is_holiday = processed_df.is_holiday.astype(int)","15ee3222":"#get dummy variables for few columns \nprocessed_df = pd.get_dummies(processed_df, columns = ['weather_code', 'season','hour','month'], drop_first = True)","d3cd84c2":"processed_df.head()","b56e175d":"processed_df.info()","795a679f":"processed_df.drop('timestamp', axis=1, inplace=True)\nprocessed_df.drop('year', axis=1, inplace=True)\nprocessed_df.drop('day_of_month', axis=1, inplace=True)\nprocessed_df.drop('date_year', axis=1, inplace=True)","1afb5622":"#what we want to predict\ny = processed_df['cnt']\n# predictior variables\nX = processed_df.drop('cnt', axis = 1)\n","26c1d309":"#split the dataset\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25 , random_state = 42)\nX_train.head()","df04974f":"#let's train multi layer perceptron regressor\nregr = nn.MLPRegressor(hidden_layer_sizes = (128,),solver = 'adam', activation = 'relu', random_state=1, max_iter=10000, early_stopping=True).fit(X_train, y_train)","98a1fd2e":"regr.score(X_test, y_test)","a0f6f5c8":"# Imports","6a156ff7":"So we weekend has less requests than workdays","082199ce":"# Data preprocessing and visualizations","0b963a79":"Here are the meaning of these columns copied from the Data section. \n\n### Metadata:\n\"timestamp\" - timestamp field for grouping the data  \\\n\"cnt\" - the count of a new bike shares\\\n\"t1\" - real temperature in C\\\n\"t2\" - temperature in C \"feels like\"\\\n\"hum\" - humidity in percentage\\\n\"windspeed\" - wind speed in km\/h\\\n\"weathercode\" - category of the weather\\\n\"isholiday\" - boolean field - 1 holiday \/ 0 non holiday\\\n\"isweekend\" - boolean field - 1 if the day is weekend\\\n\"season\" - category field meteorological seasons: 0-spring ; 1-summer; 2-fall; 3-winter.\\\n\\\n\\\n\"weathe_code\" category description:\\\n1 = Clear ; mostly clear but have some values with haze\/fog\/patches of fog\/ fog in vicinity\\\n2 = scattered clouds \/ few clouds\\\n3 = Broken clouds\\\n4 = Cloudy\\\n7 = Rain\/ light Rain shower\/ Light rain\\\n10 = rain with thunderstorm\\\n26 = snowfall\\\n94 = Freezing Fog"}}