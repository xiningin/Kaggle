{"cell_type":{"e37faf39":"code","9245e7dc":"code","b0194a1b":"code","aa9a3ffc":"code","16dee107":"code","c8ad81f5":"code","129a619f":"code","90c4acad":"code","46582987":"code","7db2514a":"code","7663e9b8":"code","8cf4ea02":"code","c33ee48c":"code","51347f53":"code","b930e14b":"code","041bf8cb":"code","6ddb2065":"code","92efaa48":"code","ecc05b9e":"code","07fc6d9c":"code","b496f7aa":"code","9610d6f4":"code","513962e5":"code","d57911af":"code","f4775571":"markdown","f340b156":"markdown","82327384":"markdown","b8272655":"markdown","6f2c1b41":"markdown","d7c75c18":"markdown","1e56ba7d":"markdown","b023c8df":"markdown","33096041":"markdown","f0c33ee9":"markdown","1a7899e5":"markdown","9c6d773c":"markdown","67d5e084":"markdown","35e4ba07":"markdown","eec2572b":"markdown","aec40375":"markdown","a342dd2a":"markdown","070ac99c":"markdown","4d2fe682":"markdown","f3b27f1f":"markdown","dbdb328b":"markdown","c9def1cc":"markdown","e97d04cf":"markdown","55fc67ae":"markdown","6bd26609":"markdown","37fd05e0":"markdown","00840624":"markdown","a5b1ec16":"markdown","728d52a0":"markdown","5acd1b93":"markdown","76e59c60":"markdown","f8d9060f":"markdown","7347d6db":"markdown","dcdd915e":"markdown","9757dffe":"markdown","130c7514":"markdown","c4e3f518":"markdown"},"source":{"e37faf39":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom collections import Counter\n\nsns.set(style='whitegrid')\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","9245e7dc":"df = pd.read_csv(\"..\/input\/students-performance-in-exams\/StudentsPerformance.csv\")","b0194a1b":"df.shape","aa9a3ffc":"df.info()","16dee107":"df","c8ad81f5":"df.describe().T","129a619f":"df.isnull().sum()","90c4acad":"df['passing score'] = ((df['math score'] + df['reading score'] + df['writing score']) \/ 3).round(4)","46582987":"df.head(3)","7db2514a":"grades = ['S', 'A', 'B', 'C', 'D', 'E', 'F']\ndef Grade(grade):    \n    if (grade >= 95):return 'S'\n    if (grade >= 80):return 'A'\n    if (grade >= 70):return 'B'\n    if (grade >= 60):return 'C'\n    if (grade >= 50):return 'D'\n    if (grade >= 40):return 'E'\n    else: return 'F'\n\ndf['math grade']    = df.apply(lambda x: Grade( x['math score'] ), axis=1)\ndf['reading grade'] = df.apply(lambda x: Grade( x['reading score'] ), axis=1)\ndf['writing grade'] = df.apply(lambda x: Grade( x['writing score'] ), axis=1)\ndf['passing grade'] = df.apply(lambda x : Grade( x['passing score'] ), axis=1)","7663e9b8":"df.head(10)","8cf4ea02":"df[\"passing grade\"].value_counts()","c33ee48c":"values = df[\"gender\"].value_counts()\ndef make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}%\\n{v:d}'.format(p=pct, v=val)\n    return my_autopct\n\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(7, 7))\nax = plt.pie(values, labels=['Female', 'Male'], colors=['#F3CEE8','#B7D1F8'], autopct=make_autopct(values), startangle=90, explode=[0.05,0.05])\nplt.title('Gender')\nplt.axis('equal')\nplt.show()","51347f53":"sizes = df['passing grade'].value_counts().sort_index() \/ df['passing grade'].value_counts().sum() * 100\nvalues = df['passing grade'].value_counts().sort_index().values\ngrades = ['A', 'B', 'C', 'D', 'E', 'F', 'S']\n\ndef make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}%\\n{v:d}'.format(p=pct, v=val)\n    return my_autopct\n\ninner_values = [99, 77, 150, 111, 130, 126, 97, 85, 50, 23, 16, 14, 19, 3]\nouter_colors = ['#C7CEEA', '#B5EAD7', '#E2F0CB', '#FFDAC1', '#FFB7B2', '#FF9AA2', '#9884C7']\ninner_colors = ['#F3CEE8','#B7D1F8'] * 7\nouter_explode = np.ones(7)*0.01\ninner_explode = np.ones(14)*0.01\n\n# Plot\nfig, ax = plt.subplots(figsize=(5, 5))\nax.pie(sizes, labels=grades, colors=outer_colors,\n        startangle=97.5, radius=1.7, autopct=make_autopct(values), pctdistance=0.88, explode=outer_explode,\n        wedgeprops=dict(width=0.5, edgecolor='w'))\nax.pie(inner_values, startangle=97.5, radius=1.2, colors=inner_colors, explode=inner_explode, wedgeprops=dict(width=0.5, edgecolor='w'))\n\nax.set(aspect=\"equal\")\nfig.legend(bbox_to_anchor=(1.25, 0.7), labels=['S', 'A', 'B', 'C', 'D', 'E', 'F'], loc=\"upper center\", ncol=1, title=\"Grades\")\nplt.show()","b930e14b":"fig, ax = plt.subplots(figsize=(10, 5))\nsns.countplot(y=\"passing grade\", hue=\"gender\", data=df, order=[\"S\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"], palette=['#F3CEE8','#B7D1F8'])\nax.legend(loc='upper right',frameon=True)\nplt.show()","041bf8cb":"colors = ['#9884C7', '#C7CEEA', '#B5EAD7', '#E2F0CB', '#FFDAC1', '#FFB7B2', '#FF9AA2']\nexam_grade = ['math grade', 'writing grade', 'reading grade']\ngrades = ['S', 'A', 'B', 'C', 'D', 'E', 'F']\n\ndef plot_func(df, i):\n    sns.countplot(ax=axes[i], x=df['gender'], hue=df[exam_grade[i]], hue_order=grades, palette=colors)\n    axes[i].set_xlabel(\"{} w gender\".format(exam_grade[i]))\n    axes[i].legend([],[], frameon=False)\n    axes[i].set_ylabel(\" \")\n    axes[i].set_ylim(0, 160)\n# Plot\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(18, 8), sharey=True)\nfor i in range(3):\n    plot_func(df, i)\naxes[0].set_ylabel(\"Count\")\n# Add legend\nfig.legend(bbox_to_anchor=(0.5, 1.0), labels=grades, loc=\"upper center\", ncol=7, title=\"Grades\")\nplt.xticks(rotation=0)\nplt.show()","6ddb2065":"colors = ['#9884C7', '#C7CEEA', '#B5EAD7', '#E2F0CB', '#FFDAC1', '#FFB7B2', '#FF9AA2']\nexam_grade = ['math grade', 'writing grade', 'reading grade']\ngrades = ['S', 'A', 'B', 'C', 'D', 'E', 'F']\n\n# Filtering Data\ndf_course_completed = df[df['test preparation course'] == 'completed']\ndf_course_none      = df[df['test preparation course'] == 'none'] \n\ndef plot_func(df_comp, df_none, i):\n    sns.countplot(ax=axes[i,0], x=df_comp['gender'], hue=df_comp[exam_grade[i]], hue_order=grades, palette=colors)\n    sns.countplot(ax=axes[i,1], x=df_none['gender'], hue=df_none[exam_grade[i]], hue_order=grades, palette=colors)\n    axes[i,0].set_xlabel(\"{} with course\".format(exam_grade[i]))\n    axes[i,1].set_xlabel(\"{} with no course\".format(exam_grade[i]))\n# Plot\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(18, 15), sharey=False)\nfor i in range(3):\n    plot_func(df_course_completed, df_course_none, i)\n# Remove legends\nfor ax in axes:\n    for i in range(2):\n        ax[i].legend([],[], frameon=False)\n        ax[i].set_ylabel(\" \")\n        ax[i].set_ylim(0, 100)  \n# Add legend\nfig.legend(bbox_to_anchor=(0.5, 0.95), labels=grades, loc=\"upper center\", ncol=7, title=\"Grades\")\nplt.show()","92efaa48":"colors = ['#9884C7', '#C7CEEA', '#B5EAD7', '#E2F0CB', '#FFDAC1', '#FFB7B2', '#FF9AA2']\nexam_type = ['math score', 'writing score', 'reading score']\nexam_grade = ['math grade', 'writing grade', 'reading grade']\ncourse_ = ['none', 'completed']\n\ndef plot_func(df, i, course_):\n    sns.countplot(ax=axes[i,0], x=df['test preparation course'], hue=df[exam_grade[i]], palette=colors, order=course_)\n    sns.distplot(df[df['test preparation course'] == course_[0]][exam_type[i]].values, color='#5E96AE', label='Course not Completed', ax=axes[i,1])\n    sns.distplot(df[df['test preparation course'] == course_[1]][exam_type[i]].values, color='#E08963', label='Course not Completed', ax=axes[i,1]) \n\nfig, axes = plt.subplots(nrows=3, ncols=2, figsize=(18, 18), sharey=False, sharex=False)\nfor i in range(3):\n    plot_func(df, i, course_)\n    axes[i,0].set_xlabel(\"{} and course\".format(exam_grade[i]))\n    axes[i,1].set_xlabel(\"{}\".format(exam_type[i]))\n# Remove legends and set x,y limits\nfor ax in axes:\n    for i in range(2):\n        ax[i].legend([],[], frameon=False)\n        ax[0].set_ylim(0, 180)  \n        ax[1].set_ylim(0, 0.035)\n        ax[1].set_xlim(0, 120)\n\n# Add legends\naxes[0,0].legend(bbox_to_anchor=(0.5, 1.25), labels=grades, loc=\"upper center\", ncol=7, title=\"Grades\")\naxes[0,1].legend(bbox_to_anchor=(0.5, 1.25), labels=['none', 'completed'] , loc=\"upper center\", ncol=2, title=\"Test Preparation Course\")\nplt.show()","ecc05b9e":"fig = plt.figure(figsize=(6,8))\nsns.distplot(df[df['test preparation course'] == 'none']['passing score'].values, color='#5E96AE', label='Course not Completed')\nsns.distplot(df[df['test preparation course'] == 'completed']['passing score'].values, color='#E08963', label='Course Completed')\nfig.legend(bbox_to_anchor=(0.5, 1), labels=['Course not Completed','Course Completed'] , loc=\"upper center\", ncol=2, title=\"Test Preparation Course\")\nplt.xlabel(\"passing score\")\nplt.ylim(0, 0.035)\nplt.xlim(0, 120)\nplt.show()","07fc6d9c":"colors = ['#5E96AE', '#B2EBE0']\nexam_type = ['math score', 'reading score', 'writing score', 'passing score']\n\ndef bar_plot(data, i):\n    sns.barplot(data=df, x='test preparation course', y=exam_type[i], hue='lunch', palette=colors, ax=axes[i])\n    axes[i].set_title(exam_type[i])\n    \nfig, axes = plt.subplots(nrows=1, ncols=4, figsize=(15,6))\nfor i in range(4):\n    bar_plot(df, i)\n    axes[i].legend([],[], frameon=False)\n    axes[i].set_ylabel(\" \")\n    axes[i].set_ylim(0, 90)\n    \naxes[1].legend(bbox_to_anchor=(1.7, 1.2), loc=\"center right\", ncol=2, title=\"Lunch\")\nplt.show()","b496f7aa":"fig, axes = plt.subplots(figsize=(12,6))\nsns.countplot(data=df, x=\"parental level of education\", hue=\"gender\", palette=['#F3CEE8','#B7D1F8'])\naxes.legend(loc='upper right',frameon=True)\naxes.set_ylim(0, 140)\nplt.show()","9610d6f4":"educ_type = [\"high school\", \"some high school\", \"some college\", \"associate's degree\", \"bachelor's degree\", \"master's degree\"]\ncolors = ['#38908F', '#A02C2D', '#5E96AE', '#BC85A3', '#CA7E8D', '#9E6B55']\n\ndef dist_plot(data, i):\n    sns.distplot(data, color=colors[i], ax=axes[i])\n\nfig, axes = plt.subplots(nrows=1, ncols=6, figsize=(21,8), sharey=True)\nfor i in range(6):\n    dist_plot(df[df['parental level of education'] == educ_type[i]]['passing score'].values, i)\n    axes[i].set_xlabel(educ_type[i])\n    axes[i].set_xticks([0,25,50,75,100,125])\n    data_x, data_y = axes[i].lines[0].get_data()\n    max_value = data_x[np.argmax(data_y)]\n    axes[i].axvline(x = max_value, ls='--', alpha=0.75, color='#1B2631')\n    axes[i].annotate(text=round(max_value, 2), xy=(max_value+5, 0.00025), xytext=(max_value+30, 0.0025), arrowprops=dict(facecolor='#1B2631', width=1.7, headwidth=6, headlength=7))\n\nplt.ylim(0, 0.035)\nplt.xlim(0, 120)\nplt.show()","513962e5":"sizes = df['race\/ethnicity'].value_counts().sort_index() \/ df['race\/ethnicity'].value_counts().sum() * 100\ncolors = ['#9884C7', '#B5EAD7', '#E2F0CB', '#FFDAC1', '#FFB7B2', '#FF9AA2']\nethnicity = ['group A', 'group B', 'group C', 'group D', 'group E']\nvalues = [89, 190, 319, 262, 140]\ndef make_autopct(values):\n    def my_autopct(pct):\n        total = sum(values)\n        val = int(round(pct*total\/100.0))\n        return '{p:.2f}%\\n{v:d}'.format(p=pct, v=val)\n    return my_autopct\n\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(7, 7))\nax = plt.pie(sizes, labels=ethnicity, colors=colors, autopct= make_autopct(values), startangle=90)\nplt.title('Race\/Ethnicity Distribution', fontsize=15, fontweight='bold', y=1.1)\nfig.legend(bbox_to_anchor=(1.1, 0.6), labels=ethnicity, loc=\"upper center\", ncol=1, title=\"Race\/Ethnicity\")\nplt.axis('equal')\nplt.show()","d57911af":"sns.catplot(x=\"race\/ethnicity\", y=\"passing score\", data=df, order=ethnicity, kind='violin', height=6, aspect=1.25, color=\"#B2EBE0\", inner=None)\nsns.boxenplot(x=df[\"race\/ethnicity\"], y=df[\"passing score\"], color=\"#FFBFA3\", width=0.1, order=ethnicity)\nplt.show()","f4775571":"> * When we look at the gender distribution, the number of females is slightly higher than the number of males.","f340b156":"<a id='13'><\/a><br>\n### Lunch vs Exam Grade With Test Preparation Course","82327384":"<a id='7'><\/a><br>\n### Let's look at the result.","b8272655":"---","6f2c1b41":"---","d7c75c18":"> As seen above, there are no missing ( NaN ) values in this data.","1e56ba7d":"<a id='12'><\/a><br>\n### Gender vs Exam Grade With Test Preparation Course","b023c8df":"<a id='3'><\/a><br>\n## Information About Features\n\nColumn Name                  | Description\n-----------------------------|--------------------------\ngender                       | Male\/Female \nrace\/ethnicity               | group A, group B, group C... \nparental level of education  | parental education details from high school to master's degree \nlunch                        | selected type of lunch\ntest preparation course      | test preparation course was completed by the student or not\nmath score                   | specifies score in math \nreading score                | specifies score in reading \nwriting score                | specifies score in writing","33096041":"> * We can see that females are more successful in writing and reading, and males in mathematics.","f0c33ee9":"<a id='9'><\/a><br>\n### Gender Distribution","1a7899e5":" > **As you can see;**\n     \n   > * Students whose parental education level is \"master's degree\" have higher overall pass grade.\n   > * Students whose parental education level is \"high school\" have lower pass grade","9c6d773c":"# Introduction","67d5e084":"<a id='4'><\/a><br>\n# Checking Missing Values","35e4ba07":"<a id='15'><\/a><br>\n### Race\/Ethnicity Distribution","eec2572b":"---","aec40375":"> First of all, let's collect the exam scores of the students in a new column under the name of passing score.","a342dd2a":"> * We can say that the gender distribution is almost equal except for the master's degree.","070ac99c":"> * We will see the relationship between **lunch** and the average of the scores students get in the selected exam type.","4d2fe682":"### **Content:**\n<font color = 'black'>\n    \n\n1. [Loading Libraries and Data](#1)    \n    * [Information About Features](#3)   \n1. [Checking Missing Values](#4)\n1. [Data Preparation](#5)  \n    * [Grading System](#6)\n    * [Data](#7)   \n1. [Data Visualization](#8)  \n    * [Gender Distribution](#9)\n    * [Gender vs Passing Grade](#10)\n    * [Gender vs Exam Grade](#11)\n    * [Gender vs Exam Grade With Test Preparation Course](#12)\n    * [Lunch vs Exam Grade With Test Preparation Course](#13)\n    * [Passing Score vs Parental Level Of Education](#14)\n    * [Race\/Ethnicity Distribution](#15)\n    * [Race\/Ethnicity vs Passing Score Distribution](#16)","f3b27f1f":"> * As can be seen, the **success rate** of those who complete the preparation course is higher.\n> * If we want to see this feature more clearly;","dbdb328b":"### Thanks for taking the time to review my work!\n### Please upvote if you liked the kernel!","c9def1cc":"<a id='5'><\/a><br>\n# Data Preparation","e97d04cf":"---","55fc67ae":"> * In the S class, which we classify as the most successful, women have an overwhelming preponderance.\n> * In classes A and B, females are in the majority.\n> * In class E, the number of males is more than the number of females.","6bd26609":"<a id='11'><\/a><br>\n### Gender vs Exam Grade","37fd05e0":"<a id='16'><\/a><br>\n### Race\/Ethnicity vs Passing Score Distribution","00840624":"<a id='1'><\/a><br>\n# Loading Libraries and Data","a5b1ec16":"> Now let's create a grading system corresponding to these scores.","728d52a0":"> * There is a great disproportion in the distribution of ethnicity.","5acd1b93":"<a id='14'><\/a><br>\n### Passing Score vs Parental Level Of Education","76e59c60":">* When we examine the tables, we see that many people have not completed the preparation course.\n>* Let's remove the gender discrimination to better see the results.","f8d9060f":">  **We can see;**\n\n   > * The average of group E is higher than the other groups.\n   > * The average of group A is lower than the other groups.","7347d6db":"<a id='10'><\/a><br>\n### Gender vs Passing Grade","dcdd915e":"<a id='8'><\/a><br>\n# Data Visualization","9757dffe":"> * As you can see, the type of lunch selected has a serious effect on the exam score.","130c7514":"> * Here is the effect of the preparatory course on the success of the students.","c4e3f518":"<a id='6'><\/a><br>\n### Grading System\n        \n    >= 95\tS\tExcellent\n    >= 80\tA\tVery Good\n    >= 70\tB\tGood\n    >= 60\tC\tAverage\n    >= 50\tD\tSufficient\n    >= 40\tE\tPassable\n     < 40\tF\tFail"}}