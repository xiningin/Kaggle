{"cell_type":{"21a2f95d":"code","1f3b8ddc":"code","4f22c4ac":"code","28353f10":"code","1b011618":"code","3d9307d0":"code","2e1fcff8":"code","be494167":"code","1f8cc4c8":"code","8ab5be05":"code","11d12f43":"code","93917187":"code","5c33d596":"code","ec91571d":"code","a8c8f44d":"code","910c39a3":"code","a4a9c649":"code","495bab8e":"code","78872148":"code","ede4990f":"code","61bba0ff":"code","3d10251c":"code","5dd3be6a":"code","b94eca1a":"code","ee971944":"markdown","53b1d0f3":"markdown","4d5bc6c3":"markdown","0e125b55":"markdown","c94c4baa":"markdown","5993b634":"markdown","ed510c0e":"markdown","e92814d6":"markdown","8e5e31d5":"markdown","8a9e5e1b":"markdown","0f3a0adb":"markdown","76bc5713":"markdown","284aa1b1":"markdown","8d370b90":"markdown","388fe41c":"markdown","cc7dc5ad":"markdown","f6c2e596":"markdown"},"source":{"21a2f95d":"import os\nimport numpy as np\nimport pandas as pd\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import OneHotEncoder\nimport pandas_profiling\n\n%matplotlib inline\nimport matplotlib.pyplot as plt","1f3b8ddc":"data = pd.read_csv('..\/input\/insurance.csv')","4f22c4ac":"data.info()","28353f10":"data.head()","1b011618":"pandas_profiling.ProfileReport(data)","3d9307d0":"target = pd.DataFrame(data =data.iloc[:,-1:], index=range(len(data)))\ndata_predictors = pd.DataFrame(data =data.iloc[:,:-1], index=range(len(data)))","2e1fcff8":"data_predictors.head()","be494167":"target.head()","1f8cc4c8":"categorical_variables = [\"sex\", \"smoker\", \"region\"]\n\ndata_num = data_predictors.copy()\nfor i in categorical_variables:\n    data_num = data_num.drop(i, axis=1)","8ab5be05":"data_num.head()","11d12f43":"ohe = OneHotEncoder()\n\nsex = OrdinalEncoder().fit_transform(data.iloc[:,1:2])\nsex = ohe.fit_transform(sex).toarray()\n\nsmoker = OrdinalEncoder().fit_transform(data.iloc[:,4:5])\nsmoker = ohe.fit_transform(smoker).toarray()\n\nregion = OrdinalEncoder().fit_transform(data.iloc[:,5:6])\nregion = ohe.fit_transform(region).toarray()","93917187":"sex_df = pd.DataFrame(data=sex, index=range(len(sex)), columns=['female', 'Male'])\nsmoker_df = pd.DataFrame(data=smoker, index=range(len(smoker)), columns=['non-smoker', 'smoker'])\nregion_df = pd.DataFrame(data=region, index=range(len(region)), columns=['sw', 'se', 'nw', 'ne'])","5c33d596":"final_df = pd.concat([data_num, sex_df, smoker_df, region_df], axis=1)","ec91571d":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test =  train_test_split(final_df,target,test_size=0.2, random_state=0)","a8c8f44d":"sc = StandardScaler()\n\nX_train = sc.fit_transform(x_train)\nX_test = sc.transform(x_test)","910c39a3":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error\n\ntree_reg = DecisionTreeRegressor()","a4a9c649":"tree_reg.fit(X_train,y_train)","495bab8e":"charge_predictions = tree_reg.predict(X_train)\ntree_mse = mean_squared_error(y_train, charge_predictions)\ntree_rmse = np.sqrt(tree_mse)\nprint(tree_rmse)","78872148":"tree_predict_df = pd.DataFrame(data=tree_reg.predict(X_test), index=range(len(tree_reg.predict(X_test))))\ntree_actual_df = pd.DataFrame(data=y_test.values, index=range(len(y_test.values)))\n\ntree_result_df = pd.concat([tree_predict_df, tree_actual_df], axis=1)\ntree_result_df = pd.DataFrame(tree_result_df.values, columns=[\"predicted\",\"actual\"])\n\ntree_result_df.plot(kind=\"scatter\", x=\"predicted\", y=\"actual\", color='b', figsize=(5,5))","ede4990f":"from sklearn.linear_model import LinearRegression\n\n\nlin_reg = LinearRegression()\n\nlin_reg.fit(X_train,y_train)","61bba0ff":"lin_predict_df = pd.DataFrame(data=lin_reg.predict(X_test), index=range(len(lin_reg.predict(X_test))))\n\nlin_actual_df = pd.DataFrame(data=y_test.values, index=range(len(y_test.values)))","3d10251c":"charge_predictions = lin_reg.predict(X_train)\nlin_mse = mean_squared_error(y_train, charge_predictions)\nlin_rmse = np.sqrt(lin_mse)\nprint(lin_rmse)","5dd3be6a":"lin_result_df = pd.concat([lin_predict_df, lin_actual_df], axis=1)\nlin_result_df = pd.DataFrame(lin_result_df.values, columns=[\"predicted\",\"actual\"])\nlin_result_df.plot(kind=\"scatter\", x=\"predicted\", y=\"actual\", color='b', figsize=(5,5))","b94eca1a":"import matplotlib.pyplot as plt\n#import seaborn as sns\n\ntree_result_df.plot(kind=\"scatter\", x=\"predicted\", y=\"actual\", color='b',title=\"Tree Regression\")\n\nlin_result_df.plot(kind=\"scatter\", x=\"predicted\", y=\"actual\", color='b',  title=\"Lineer Regression\")\n","ee971944":"Calculate Mean Square Error of the DecisionTreeRegressor model. ","53b1d0f3":"Also we need to seperate categorical and continious variable because of the different preprocessing pathways. We can create <b>'data_num'<\/b> variable which represents all continious variables in the dataset. Alse we can clean up the categorical variables with <b>pandas.DataFrame.drop<\/b> attribute.","4d5bc6c3":"Time to split data...","0e125b55":"First thing first, we need to seperate our target variable from data. In this case the <u>target<\/u> variable is <b>\"charges\"<\/b>. Also we can create another dataframe which contains all variables except target(charges) variable with a name of data_predictors.","c94c4baa":"Let's try LinearRegression","5993b634":"Visulaize the results. Looks good..","ed510c0e":"Visulaize the LinearRegression. ","e92814d6":"DecisionTreeRegressor model had better results than LinearRegression.","8e5e31d5":"Checking the basic structure of the data;","8a9e5e1b":"Calculate Mean Square Error of the LinearRegression model.","0f3a0adb":"**Predicting the cost of treatment with a limited data. **","76bc5713":"Final dataframe consists all variables","284aa1b1":"## Evaluate the DATA\n\n<b>pandas_profiling<\/b> library is another great tool to understand the basic structure of the data.","8d370b90":"Scaling the variables","388fe41c":"Fit the data with DecisionTreeRegressor","cc7dc5ad":"Evaluate the both models. Tree Regression has better predictions.","f6c2e596":"It is time to handle categorical variables"}}