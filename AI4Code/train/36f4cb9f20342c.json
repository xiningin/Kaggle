{"cell_type":{"115dd958":"code","1605c94d":"code","1db943cf":"code","3f942fd6":"code","189bc953":"code","537e04c5":"code","5e1af875":"code","668b817f":"code","785f4485":"code","8d06f669":"code","6850032d":"code","2295d08d":"code","12285ee8":"code","ad20ae9e":"code","0bab54c2":"code","074e0760":"code","968f20b0":"code","eecd534d":"code","eca7e11b":"code","75923cb3":"code","17a42f32":"code","ab91dbe1":"code","cfb396a4":"code","1d506c96":"markdown","c170f840":"markdown","816c675d":"markdown","1c17ce14":"markdown","be9743b0":"markdown","a197039b":"markdown","888d29fa":"markdown","16702322":"markdown","234ab447":"markdown","f4dc82fc":"markdown","e68461f2":"markdown","f934e551":"markdown","b2301cde":"markdown","c99d873a":"markdown","c0f3fb4a":"markdown","cce29fa2":"markdown","29d86f52":"markdown","f99809be":"markdown","59083e24":"markdown","7cbcf33b":"markdown"},"source":{"115dd958":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1605c94d":"train = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv')\nsample = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/sample_submission.csv')","1db943cf":"print('Size of train data', train.shape)\nprint('Size of test data', test.shape)\nprint('Size of sample submission', sample.shape)\n","3f942fd6":"train.head()\n","189bc953":"train.columns\n","537e04c5":"train.info()","5e1af875":"test.head()\n","668b817f":"test.columns\n","785f4485":"test.info()","8d06f669":"sample.head()","6850032d":"# util func to check null values in a dataframe\n\ndef report_nulls(df):\n    '''\n    Show a fast report of the DF.\n    '''\n    rows = df.shape[0]\n    columns = df.shape[1]\n    null_cols = 0\n    list_of_nulls_cols = []\n    for col in list(df.columns):\n        null_values_rows = df[col].isnull().sum()\n        null_rows_pcn = round(((null_values_rows)\/rows)*100, 2)\n        col_type = df[col].dtype\n        if null_values_rows > 0:\n            print(\"The column {} has {} null values. It is {}% of total rows.\".format(col, null_values_rows, null_rows_pcn))\n            print(\"The column {} is of type {}.\\n\".format(col, col_type))\n            null_cols += 1\n            list_of_nulls_cols.append(col)\n    null_cols_pcn = round((null_cols\/columns)*100, 2)\n    print(\"The DataFrame has {} columns with null values. It is {}% of total columns.\".format(null_cols, null_cols_pcn))\n    return list_of_nulls_cols","2295d08d":"report_nulls(train)","12285ee8":"report_nulls(test)","ad20ae9e":"import string\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem.wordnet import WordNetLemmatizer\nfrom gensim.models import Word2Vec \nfrom gensim.models import KeyedVectors \nimport pickle\nfrom tqdm import tqdm\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom collections import Counter\nimport warnings\nwarnings.simplefilter(\"ignore\")","0bab54c2":"# https:\/\/matplotlib.org\/gallery\/pie_and_polar_charts\/pie_and_donut_labels.html#sphx-glr-gallery-pie-and-polar-charts-pie-and-donut-labels-py\n\ny_value_counts = train['target'].value_counts()\nprint(\"Number of tweet are about real disaster\", y_value_counts[1], \", (\", (y_value_counts[1]\/(y_value_counts[1]+y_value_counts[0]))*100,\"%)\")\nprint(\"Number of tweet are not about real disaster\", y_value_counts[0], \", (\", (y_value_counts[0]\/(y_value_counts[1]+y_value_counts[0]))*100,\"%)\")\n\nfig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(aspect=\"equal\"))\nrecipe = [\"Real Disaster\", \"Not Real Disaster\"]\n\ndata = [y_value_counts[1], y_value_counts[0]]\n\nwedges, texts = ax.pie(data, wedgeprops=dict(width=0.5), startangle=-40)\n\nbbox_props = dict(boxstyle=\"square,pad=0.3\", fc=\"w\", ec=\"k\", lw=0.72)\nkw = dict(xycoords='data', textcoords='data', arrowprops=dict(arrowstyle=\"-\"),\n          bbox=bbox_props, zorder=0, va=\"center\")\n\nfor i, p in enumerate(wedges):\n    ang = (p.theta2 - p.theta1)\/2. + p.theta1\n    y = np.sin(np.deg2rad(ang))\n    x = np.cos(np.deg2rad(ang))\n    horizontalalignment = {-1: \"right\", 1: \"left\"}[int(np.sign(x))]\n    connectionstyle = \"angle,angleA=0,angleB={}\".format(ang)\n    kw[\"arrowprops\"].update({\"connectionstyle\": connectionstyle})\n    ax.annotate(recipe[i], xy=(x, y), xytext=(1.35*np.sign(x), 1.4*y),\n                 horizontalalignment=horizontalalignment, **kw)\n\nax.set_title(\"Nmber of tweets that are about Real Disaster or not\")\n\nplt.show()\n","074e0760":"train.keyword.unique()","968f20b0":"#stacked bar plots matplotlib: https:\/\/matplotlib.org\/gallery\/lines_bars_and_markers\/bar_stacked.html\ndef stack_plot(data, xtick, col2='target', col3='total'):\n    ind = np.arange(data.shape[0])\n    \n    plt.figure(figsize=(20,5))\n    p1 = plt.bar(ind, data[col3].values)\n    p2 = plt.bar(ind, data[col2].values)\n\n    plt.ylabel('Projects')\n    plt.title('Number of real disaster tweets vs fake disaster tweets')\n    plt.xticks(ind, list(data[xtick].values), rotation='vertical')\n    \n    plt.legend((p1[0], p2[0]), ('total tweets', 'Real Disaster tweets'))\n    plt.show()\n\n\ndef univariate_barplots(data, col1, col2='target', top=False):\n    # Count number of zeros in dataframe python: https:\/\/stackoverflow.com\/a\/51540521\/4084039\n    temp = pd.DataFrame(data.groupby(col1)[col2].agg(lambda x: x.eq(1).sum())).reset_index()\n    \n    # Pandas dataframe grouby count: https:\/\/stackoverflow.com\/a\/19385591\/4084039\n    temp['total'] = pd.DataFrame(data.groupby(col1)[col2].agg({'total':'count'})).reset_index()['total']\n    temp['Avg'] = pd.DataFrame(data.groupby(col1)[col2].agg({'Avg':'mean'})).reset_index()['Avg']\n    \n    temp.sort_values(by=['total'],inplace=True, ascending=False)\n    \n    if top:\n        temp = temp[0:top]\n        \n    stack_plot(temp, xtick=col1, col2=col2, col3='total')","eecd534d":"univariate_barplots(train, 'keyword', top=50)","eca7e11b":"train.location.unique()[:100]","75923cb3":"#How to calculate number of words in a string in DataFrame: https:\/\/stackoverflow.com\/a\/37483537\/4084039\nword_count = train['text'].str.split().apply(len).value_counts()\nword_dict = dict(word_count)\nword_dict = dict(sorted(word_dict.items(), key=lambda kv: kv[1]))\n\n\nind = np.arange(len(word_dict))\nplt.figure(figsize=(20,5))\np1 = plt.bar(ind, list(word_dict.values()))\n\nplt.ylabel('Numeber of Tweets')\nplt.xlabel('Number words in tweet text')\n# plt.title('Words for each  of the project')\nplt.xticks(ind, list(word_dict.keys()))\nplt.show()","17a42f32":"real_dis_tweet_word_count = train[train['target']==1]['text'].str.split().apply(len)\nreal_dis_tweet_word_count = real_dis_tweet_word_count.values\n\nfake_dis_tweet_word_count = train[train['target']==0]['text'].str.split().apply(len)\nfake_dis_tweet_word_count = fake_dis_tweet_word_count.values","ab91dbe1":"# https:\/\/glowingpython.blogspot.com\/2012\/09\/boxplot-with-matplotlib.html\nplt.boxplot([real_dis_tweet_word_count, fake_dis_tweet_word_count])\nplt.xticks([1,2],('Real Disaster Tweets','Fake Disaster Tweets'))\nplt.ylabel('Words in Tweet')\nplt.grid()\nplt.show()","cfb396a4":"plt.figure(figsize=(10,3))\nsns.kdeplot(real_dis_tweet_word_count,label=\"Real Disaster Tweets\", bw=0.6)\nsns.kdeplot(fake_dis_tweet_word_count,label=\"Fake Disaster Tweets\", bw=0.6)\nplt.legend()\nplt.show()","1d506c96":"# 1. Introduction\n\nThis particular challenge is perfect for data scientists looking to get started with Natural Language Processing. The competition dataset is not too big, and even if you don\u2019t have much personal computing power, you can do all of the work in our free, no-setup, Jupyter Notebooks environment called Kaggle Notebooks.\n\n## 1.1 Competition Description\n\nTwitter has become an important communication channel in times of emergency.\nThe ubiquitousness of smartphones enables people to announce an emergency they\u2019re observing in real-time. Because of this, more agencies are interested in programatically monitoring Twitter (i.e. disaster relief organizations and news agencies).\n\nBut, it\u2019s not always clear whether a person\u2019s words are actually announcing a disaster. Take this example:\n\n![](https:\/\/storage.googleapis.com\/kaggle-media\/competitions\/tweet_screenshot.png)\n\n\nThe author explicitly uses the word \u201cABLAZE\u201d but means it metaphorically. This is clear to a human right away, especially with the visual aid. But it\u2019s less clear to a machine.\n\nIn this competition, you\u2019re challenged to build a machine learning model that predicts which Tweets are about real disasters and which one\u2019s aren\u2019t. You\u2019ll have access to a dataset of 10,000 tweets that were hand classified. If this is your first time working on an NLP problem, we've created a quick tutorial to get you up and running.\n\nDisclaimer: The dataset for this competition contains text that may be considered profane, vulgar, or offensive.\n\n\n## 1.2 Acknowledgments\n\nThis dataset was created by the company figure-eight and originally shared on their [\u2018Data For Everyone\u2019 website here](https:\/\/www.figure-eight.com\/data-for-everyone\/).\n","c170f840":"### samble_submission\n","816c675d":"## 4.3. Checking for Null Values\n","1c17ce14":"#### Inference\n\n> Most of the tweets have less than 20 words\n\n> In order to check weather tweet length can be a deciding factor for a tweet to be real or fake, let's dive deeper","be9743b0":"## If you find this kernel usefull, Do upvote.","a197039b":"## 4.2 Peek at the data\n\n### Train Dataframe\n","888d29fa":"#### 5.2.3 Univariate Analysis: Text features (text)","16702322":"#### Inference\n\n> * From above box plot it is clear that both real v\/s fake tweets has almost same number od words.\n> * Fake tweets has slightly greater number of words, but it is negligeble\n> * Hence Word length can't be used as a deciding feature","234ab447":"### lot More to come. Stay tuned!!","f4dc82fc":"# 3. Peek to the input Folder","e68461f2":"#### Inference\n\n> The above count plot shows that number of fake tweets about disaster are more as compared to actual disaster tweets","f934e551":"# 4. Fetching Data\n","b2301cde":"#### 5.2.2 Univariate Analysis (`location`)","c99d873a":"#### Inference\n\n> Both train and test data has roughly same amount of null values","c0f3fb4a":"#### Inference\n\n> Number of fake disaster tweets are more","cce29fa2":"### Test DataFrame","29d86f52":"> Location data is messy, it needs a lot of cleanup before any meaningful analysis, will come to it later","f99809be":"### 5.2 Analyzing Categorical Variables \n\n#### 5.2.1 Univariate Analysis (`Keyword`)","59083e24":"# 5. EDA\n\n### 5.1 Train Target value analusis","7cbcf33b":"# 2. Data Description\n\n## 2.1 What should I expect the data format to be?\n\nEach sample in the train and test set has the following information:\n\nThe `text` of a tweet\nA `keyword` from that tweet (although this may be blank!)\nThe `location` the tweet was sent from (may also be blank)\n\n\n## 2.2 What am I predicting?\n\nYou are predicting whether a given tweet is about a real disaster or not. If so, predict a `1`. If not, predict a `0`.\n\n## 2.3 Files\n\n`train.csv` - the training set\n`test.csv` - the test set\n`sample_submission.csv` - a sample submission file in the correct format\n\n## 2.4 Columns\n\n`id` - a unique identifier for each tweet\n`text` - the text of the tweet\n`location` - the location the tweet was sent from (may be blank)\n`keyword` - a particular keyword from the tweet (may be blank)\n`target` - in train.csv only, this denotes whether a tweet is about a real disaster (1) or not (0)\n"}}