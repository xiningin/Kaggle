{"cell_type":{"cbba7497":"code","9e79b7ea":"code","9428cb4f":"code","ee5010c5":"code","8cc9eef6":"code","9b2cc22c":"code","861cf7c9":"code","e95e64b5":"code","413d25e1":"code","ffb686c5":"code","dd46baaa":"markdown","161ce68b":"markdown","45d37537":"markdown","fe7ae0cd":"markdown","36f5d56d":"markdown"},"source":{"cbba7497":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nimport seaborn as sns\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e79b7ea":"from scipy.fft import fft, fftfreq\nfrom scipy.signal import blackman\nimport matplotlib.pyplot as plt","9428cb4f":"df = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/train.csv\")","ee5010c5":"def added_index(df):\n    aux = df.to_numpy()\n    i=0\n    auxx = []\n    for line in aux:\n        i=i+1\n        auxx.append(i)\n        if(i >=80 ):\n            i=0\n    auxx = pd.DataFrame(auxx,columns=['new_index'])\n    return auxx['new_index']\ndf['new_index'] = added_index(df['id'])","8cc9eef6":"def plot_pressure_x_u_in(df,value):\n    fmri = df.loc[df['breath_id'] == value]\n    df_plot=pd.DataFrame()\n    df_plot['index'] = fmri['new_index']\n    df_plot['pressure'] = fmri['pressure']\n    df_plot['u_in'] = fmri['u_in']\n    #sns.set_theme(style=\"darkgrid\")\n    \n    df_plot = df_plot.melt('index', var_name='cols',  value_name='vals')\n   # g = sns.factorplot(x=\"index\", y=\"vals\", hue='cols', data=df_plot)\n    \n    g = sns.lineplot(x=\"index\", y=\"vals\", hue='cols', data=df_plot) ","9b2cc22c":"\nplot_pressure_x_u_in(df,2)","861cf7c9":"def FFT_(df,value):\n    N = 80\n    T = 1.0 \n    df_loc = df.loc[df['breath_id'] == value]\n    y = df_loc['u_in'].to_numpy()\n    v = df_loc['pressure'].to_numpy()    \n\n    w = blackman(N)\n    \n    yf = fft(y)\n    vf = fft(v)\n    ywf = fft(y*w)\n    vwf = fft(v*w)\n    \n    xf = fftfreq(N, T)[:N\/\/2]\n    vxf = fftfreq(N, T)[:N\/\/2]\n\n    plt.semilogy(xf[1:N\/\/2], 2.0\/N * np.abs(yf[1:N\/\/2]), '-r')\n    plt.semilogy(vxf[1:N\/\/2], 2.0\/N * np.abs(vf[1:N\/\/2]), '-b')\n    plt.legend(['FFT u_in', 'FFT pressure'])\n    plt.grid()\n    plt.show()\n    \n    plt.semilogy(xf[1:N\/\/2], 2.0\/N * np.abs(ywf[1:N\/\/2]), '-r')\n    plt.semilogy(vxf[1:N\/\/2], 2.0\/N * np.abs(vwf[1:N\/\/2]), '-b')\n    plt.legend(['FFT u_in w. window','FFT pressure w. window'])\n    plt.grid()\n    plt.show()\n    \nFFT_(df,2)","e95e64b5":"def FFT_cos(df,value):\n    N = 80\n    T = 1.0 \n    df_loc = df.loc[df['breath_id'] == value]\n    y = df_loc['u_in'].to_numpy()\n    v = df_loc['pressure'].to_numpy()\n    \n    w = blackman(N)\n    \n    yf =fft(np.cos(np.deg2rad(y)))\n    vf =fft(np.cos(np.deg2rad(v)))\n    ywf = fft(np.cos(np.deg2rad(y))*w)\n    vwf = fft(np.cos(np.deg2rad(v))*w)\n    \n    xf = fftfreq(N, T)[:N\/\/2]\n    vxf = fftfreq(N, T)[:N\/\/2]\n\n    plt.semilogy(xf[1:N\/\/2], 2.0\/N * np.abs(yf[1:N\/\/2]), '-r')\n    plt.semilogy(vxf[1:N\/\/2], 2.0\/N * np.abs(vf[1:N\/\/2]), '-g')\n    plt.legend(['FFT u_in', 'FFT pressure'])\n    plt.grid()\n    plt.show()\n    \n    \n    plt.semilogy(xf[1:N\/\/2], 2.0\/N * np.abs(ywf[1:N\/\/2]), '-r')\n    plt.semilogy(vxf[1:N\/\/2], 2.0\/N * np.abs(vwf[1:N\/\/2]), '-b')\n    plt.legend(['FFT cosine u_in w. window','FFT cosine pressure w. window'])\n    plt.grid()\n    plt.show()\n    \nFFT_cos(df,2)","413d25e1":"FFT_(df,3)\nFFT_cos(df,3)","ffb686c5":"FFT_(df,10414)\nFFT_cos(df,10414)","dd46baaa":"# raw data","161ce68b":"# Fast Fourier Transform (FFT)\n\nFourier analysis is a method for expressing a function as a sum of periodic components, and for recovering the signal from those components. When both the function and its Fourier transform are replaced with discretized counterparts, it is called the discrete Fourier transform (DFT). The DFT has become a mainstay of numerical computing in part because of a very fast algorithm for computing it, called the Fast Fourier Transform (FFT), which was known to Gauss (1805) and was brought to light in its current form by Cooley and Tukey.\n\nThe Blackman window is a taper formed by using the first three terms of a summation of cosines. It was designed to have close to the minimal leakage possible. It is close to optimal, only slightly worse than a Kaiser window.\n    \nReferences:\n\n* [Scipy](https:\/\/docs.scipy.org\/doc\/scipy\/reference\/tutorial\/fft.html)\n\n* [Numpy](https:\/\/numpy.org\/doc\/stable\/reference\/generated\/numpy.blackman.html)","45d37537":"# TRANSFORMATION COSINE\n\n## What if before applying fourrier we applied the cosine?","fe7ae0cd":"# Applying the Simple Fourier Transform","36f5d56d":"# More tests"}}