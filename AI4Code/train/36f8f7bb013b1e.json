{"cell_type":{"de0dc3ce":"code","45301da4":"code","c02f6a39":"code","91ad88dd":"code","588115e6":"code","5de15fd1":"code","9d311b5c":"code","f1f5e76f":"code","cfd726c4":"code","641c6b43":"code","a13088fa":"code","b0fe2a89":"code","6543fdc1":"code","7ed074ab":"code","e34e2cd6":"code","977d336b":"code","3b8a6b6c":"code","7a1bb168":"code","b2553824":"code","681c0d72":"code","88b0cfd2":"code","7ce4238c":"code","0647affe":"code","c471e0ed":"code","8cb4497e":"code","ff287b9e":"code","10f18fb0":"code","876668c4":"code","004c0e56":"markdown","53759245":"markdown","b6af662e":"markdown","9f28df10":"markdown","1f49bee1":"markdown","04db2f68":"markdown"},"source":{"de0dc3ce":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","45301da4":"# read targets file for training data\ndf_train_scored = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')","c02f6a39":"df_train_scored.shape","91ad88dd":"df_train_scored.head()","588115e6":"targets = df_train_scored.columns[1:207] # skip id\nn_targets = len(targets)","5de15fd1":"print('Number of targets:', n_targets)","9d311b5c":"# calc correlation matrix for all (numeric) columns\ncor_targets = df_train_scored.corr(method='pearson')\ncor_targets","f1f5e76f":"# plot correlations (due to symmetry all pairs except the diagonal appear twice!)\nplt.rcParams[\"figure.figsize\"]=(12,12)\nplt.matshow(cor_targets)\nplt.colorbar()\nplt.show()","cfd726c4":"# create data frame to store all results\ncor_stats = pd.DataFrame(data=np.zeros((n_targets**2,4)), columns=['x','y','c','sel'])\ncor_stats.x = cor_stats.x.astype(str)\ncor_stats.y = cor_stats.y.astype(str)","641c6b43":"# calc and store all correlations in data frame\ncount = 1 # count correlations exceeding threshold\nrow = 0\nfor i in range(n_targets):\n    var_i = targets[i]\n    for j in range(n_targets):\n        var_j = targets[j]            \n        cor_x = df_train_scored[var_i].corr(df_train_scored[var_j])\n        # store results\n        cor_stats.loc[row,'x'] = var_i\n        cor_stats.loc[row,'y'] = var_j\n        cor_stats.loc[row,'c'] = cor_x\n        if (i>j):\n            cor_stats.loc[row,'sel'] = 1 # we use this to later remove redundancies\n                \n        row = row + 1","a13088fa":"# remove redundancies\ncor_stats = cor_stats[cor_stats.sel==1] # only select \"i > j\" cases\ncor_stats = cor_stats.drop(['sel'], axis=1)\n# sort by correlation (descending)\ncor_stats = cor_stats.sort_values(by=['c'], ascending=False)\ncor_stats = cor_stats.reset_index(drop=True)","b0fe2a89":"# show top 20 results\ncor_stats.head(20)","6543fdc1":"# show end of table as well\ncor_stats.tail(10)","7ed074ab":"# show all correlations\nplt.rcParams[\"figure.figsize\"]=(7,5)\nplt.plot(cor_stats.c)\nplt.grid()\nplt.title('Correlations - Sorted descending')\nplt.show()","e34e2cd6":"# zoom in\nplt.rcParams[\"figure.figsize\"]=(7,5)\nplt.plot(cor_stats.c[0:500])\nplt.grid()\nplt.title('Correlations - Sorted descending')\nplt.show()","977d336b":"# 0 : corr( proteasome_inhibitor , nfkb_inhibitor ) =  0.921340\npd.crosstab(df_train_scored.proteasome_inhibitor, df_train_scored.nfkb_inhibitor)","3b8a6b6c":"# 1 : corr( pdgfr_inhibitor , kit_inhibitor ) =  0.915603\npd.crosstab(df_train_scored.pdgfr_inhibitor, df_train_scored.kit_inhibitor)","7a1bb168":"# 2 : corr( kit_inhibitor , flt3_inhibitor ) =  0.758112\npd.crosstab(df_train_scored.kit_inhibitor, df_train_scored.flt3_inhibitor)","b2553824":"# 3 : corr( pdgfr_inhibitor , flt3_inhibitor ) =  0.705119\npd.crosstab(df_train_scored.pdgfr_inhibitor, df_train_scored.flt3_inhibitor)","681c0d72":"# and another one with a relatively low correlation\n# 17 : corr( nrf2_activator , bcl_inhibitor ) =  0.253269\npd.crosstab(df_train_scored.nrf2_activator, df_train_scored.bcl_inhibitor)","88b0cfd2":"# an example with correlation close to zero\nprint('corr = ', df_train_scored.acat_inhibitor.corr(df_train_scored.acetylcholine_receptor_agonist))\npd.crosstab(df_train_scored.acat_inhibitor, df_train_scored.acetylcholine_receptor_agonist)","7ce4238c":"# and finally an example with (slightly) negative correlation\nprint('corr = ', df_train_scored.nfkb_inhibitor.corr(df_train_scored.dopamine_receptor_antagonist))\npd.crosstab(df_train_scored.nfkb_inhibitor, df_train_scored.dopamine_receptor_antagonist)","0647affe":"df_train_scored['multiplicity'] = df_train_scored.iloc[:,1:207].sum(axis=1)\ndf_train_scored.multiplicity.value_counts()","c471e0ed":"plt.rcParams[\"figure.figsize\"]=(7,4)\ndf_train_scored.multiplicity.value_counts().plot(kind='bar')\nplt.grid()\nplt.show()","8cb4497e":"# look e. g. at the 6 rows having 7 synchronous 1's\ndemo = df_train_scored[df_train_scored.multiplicity==7]\ndemo","ff287b9e":"# remove multiplicity column first\ndf_train_scored = df_train_scored.drop(columns=['multiplicity'])\n","10f18fb0":"# calc means\ntarget_means = df_train_scored.mean()","876668c4":"# and plot\nplt.rcParams[\"figure.figsize\"]=(8,36)\nsns.barplot(y=target_means.index, x=target_means.values)\nplt.grid()\nplt.show()","004c0e56":"# Occurrence of multiple positive targets","53759245":"# Finally, let's quickly have a look on the target means as well","b6af662e":"### Check a few examples using cross tables","9f28df10":"#### All 6 rows show a positive effect on\n* apoptosis_stimulant\n* bcl_inhibitor\n* ikk_inhibitor\n* nfkb_inhibitor\n* nitric_oxide_production_inhibitor\n* nrf2_activator\n* ppar_receptor_agonist\n","1f49bee1":"# Let's have a look at the correlation of the numerous targets","04db2f68":"### Ok, only a few target pairs show mentionable correlation. Let's check those pairs."}}