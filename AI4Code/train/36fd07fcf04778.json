{"cell_type":{"94cd6ac2":"code","a15108b1":"code","ba9dfcdc":"code","0386c7d4":"code","72c67a33":"code","5547c83e":"code","a45bc8dd":"code","fb0b7bd8":"code","3f8db3e6":"code","a897f8ae":"code","8fd4da27":"code","97300eb0":"code","28399f59":"code","4810836d":"code","849181b5":"code","c814b3df":"code","2e63341a":"markdown","db60bc18":"markdown"},"source":{"94cd6ac2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport os\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout, Flatten, Dense\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import load_model\nimport cv2","a15108b1":"Data_folder = '..\/input\/covid-face-mask-detection-dataset\/New Masks Dataset'\ntrain_f = os.path.join(Data_folder,'Train')\ntest_f = os.path.join(Data_folder,'Test')\nvalid_f = os.path.join(Data_folder,'Validation')\nmask_train = os.path.join(train_f,'Mask')\nnomask_train = os.path.join(train_f,'Non Mask')","ba9dfcdc":"mask_train_name = os.listdir(mask_train)\nprint(mask_train_name[:25])\nnomask_train_name = os.listdir(nomask_train)\nprint(nomask_train_name[:25])","0386c7d4":"rows = 6\ncols = 6\nplt.figure(figsize=(20,20))\n\nwith_mask = []\nfor i in mask_train_name[1:10]:\n  with_mask.append(os.path.join(mask_train,i))\n\nwithout_mask = []\nfor i in nomask_train_name[1:10]:\n  without_mask.append(os.path.join(nomask_train,i))\n\nprint(with_mask)\nprint(without_mask)\n\nmerged = with_mask+without_mask\n\nfor i in range(0,len(merged)):\n  data = merged[i].split('\/',4)[4]\n  sp = plt.subplot(6,6,i+1)\n  sp.axis('Off')\n  image = mpimg.imread(merged[i])\n  sp.set_title(data,fontsize=10)\n  plt.imshow(image,cmap='gray')\n\nplt.show()\n  \n","72c67a33":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                   zoom_range = 0.3,\n                                   rotation_range = 35,\n                                   horizontal_flip = True\n                                   )\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\nvalidation_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(train_f,\n                                                    target_size=(150,150),\n                                                    batch_size = 32,\n                                                    class_mode = 'binary'\n                                                    )\ntest_generator = test_datagen.flow_from_directory(test_f,\n                                                    target_size=(150,150),\n                                                    batch_size = 32,\n                                                    class_mode = 'binary'\n                                                    )\nvalid_generator = validation_datagen.flow_from_directory(valid_f,\n                                                    target_size=(150,150),\n                                                    batch_size = 32,\n                                                    class_mode = 'binary'\n                                                    )","5547c83e":"train_generator.class_indices","a45bc8dd":"train_generator.image_shape","fb0b7bd8":"model = Sequential()\nmodel.add(Conv2D(32,(3,3),padding='SAME',activation='relu',input_shape=(150,150,3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Conv2D(64,(3,3),padding='SAME',activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.5))\n\n\n\nmodel.add(Flatten())\n\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.summary()\n\n\n\n#model.add(Conv2D(128,(3,3),padding='SAME',activation='relu'))\n#model.add(MaxPooling2D(pool_size=(2,2)))\n#model.add(Dropout(0.5))\n\n#model.add(Conv2D(256,(3,3),padding='SAME',activation='relu'))\n#model.add(MaxPooling2D(pool_size=(2,2)))\n#model.add(Dropout(0.5))","3f8db3e6":"model.compile(Adam(lr=0.001),loss='binary_crossentropy',metrics=['accuracy'])","a897f8ae":"history = model.fit(train_generator,epochs = 50,validation_data = valid_generator)","8fd4da27":"history.history.keys()","97300eb0":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.legend(['trainig','validation'])\nplt.title('loss')\nplt.xlabel('epoch')","28399f59":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.legend(['trainig','validation'])\nplt.title('accuracy')\nplt.xlabel('epoch')","4810836d":"test_loss , test_acc = model.evaluate(test_generator)\nprint('test acc :{} test loss:{}'.format(test_acc,test_loss))","849181b5":"model.save('1.model.model')","c814b3df":"model = load_model('1.model')","2e63341a":"# Building CNN Model","db60bc18":"# Data Augmentation"}}