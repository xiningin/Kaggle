{"cell_type":{"9ebdaaa0":"code","d9808c4e":"code","5900c21c":"code","662a2103":"code","913e5975":"code","d303b128":"code","7540917b":"code","53714d9c":"code","0d8ca7c2":"code","7d60c0c1":"code","6241e28b":"code","516e79dd":"code","cc87e5d6":"code","741d36e5":"code","8b098c68":"code","d259e063":"code","1b16d103":"code","f6877785":"code","a054b02c":"code","7c62c5f4":"code","5984233a":"code","2cd35e39":"code","1f4bbcb8":"code","237adca0":"code","abcccf57":"code","3fed8a22":"code","3332ebbf":"code","77d7ed78":"code","5effe456":"code","a561ad38":"code","db6762af":"code","2077415a":"code","107bfc60":"code","690bd23b":"code","8ee68cbe":"markdown","79a5b09d":"markdown","800a2c5d":"markdown"},"source":{"9ebdaaa0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d9808c4e":"df = pd.read_csv('..\/input\/apple-stock-prices-20152020\/AAPL.csv')\ndf.head()","5900c21c":"df.tail()","662a2103":"df1=df.reset_index()['close']","913e5975":"df1","d303b128":"import matplotlib.pyplot as plt\nplt.plot(df1)","7540917b":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler(feature_range=(0,1))\ndf1=scaler.fit_transform(np.array(df1).reshape(-1,1))","53714d9c":"print(df1)","0d8ca7c2":"training_size=int(len(df1)*0.65)\ntest_size=len(df1)-training_size\ntrain_data,test_data=df1[0:training_size,:],df1[training_size:len(df1),:1]","7d60c0c1":"training_size,test_size","6241e28b":"# convert an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n\tdataX, dataY = [], []\n\tfor i in range(len(dataset)-time_step-1):\n\t\ta = dataset[i:(i+time_step), 0]   ###i=0, 0,1,2,3-----99   100 \n\t\tdataX.append(a)\n\t\tdataY.append(dataset[i + time_step, 0])\n\treturn np.array(dataX), np.array(dataY)","516e79dd":"time_step = 100\nX_train, y_train = create_dataset(train_data, time_step)\nX_test, ytest = create_dataset(test_data, time_step)","cc87e5d6":"print(X_train.shape), print(y_train.shape)","741d36e5":"print(X_test.shape), print(ytest.shape)","8b098c68":"X_train =X_train.reshape(X_train.shape[0],X_train.shape[1] , 1)\nX_test = X_test.reshape(X_test.shape[0],X_test.shape[1] , 1)","d259e063":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM","1b16d103":"model=Sequential()\nmodel.add(LSTM(50,return_sequences=True,input_shape=(100,1)))\nmodel.add(LSTM(50,return_sequences=True))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error',optimizer='adam')","f6877785":"model.summary()","a054b02c":"model.fit(X_train,y_train,validation_data=(X_test,ytest),epochs=100,batch_size=64,verbose=1)","7c62c5f4":"import tensorflow as tf","5984233a":"train_predict=model.predict(X_train)\ntest_predict=model.predict(X_test)","2cd35e39":"train_predict=scaler.inverse_transform(train_predict)\ntest_predict=scaler.inverse_transform(test_predict)","1f4bbcb8":"import math\nfrom sklearn.metrics import mean_squared_error\nmath.sqrt(mean_squared_error(y_train,train_predict))","237adca0":"math.sqrt(mean_squared_error(ytest,test_predict))","abcccf57":"look_back=100\ntrainPredictPlot = np.empty_like(df1)\ntrainPredictPlot[:, :] = np.nan\ntrainPredictPlot[look_back:len(train_predict)+look_back, :] = train_predict\n# shift test predictions for plotting\ntestPredictPlot = np.empty_like(df1)\ntestPredictPlot[:, :] = np.nan\ntestPredictPlot[len(train_predict)+(look_back*2)+1:len(df1)-1, :] = test_predict\n# plot baseline and predictions\nplt.plot(scaler.inverse_transform(df1))\nplt.plot(trainPredictPlot)\nplt.plot(testPredictPlot)\nplt.show()","3fed8a22":"len(test_data)","3332ebbf":"x_input=test_data[341:].reshape(1,-1)\nx_input.shape","77d7ed78":"temp_input=list(x_input)\ntemp_input=temp_input[0].tolist()","5effe456":"temp_input","a561ad38":"lst_output=[]\nn_steps=100\ni=0\nwhile(i<30):\n    \n    if(len(temp_input)>100):\n        \n        x_input=np.array(temp_input[1:])\n        print(\"{} day input {}\".format(i,x_input))\n        x_input=x_input.reshape(1,-1)\n        x_input = x_input.reshape((1, n_steps, 1))\n        yhat = model.predict(x_input, verbose=0)\n        print(\"{} day output {}\".format(i,yhat))\n        temp_input.extend(yhat[0].tolist())\n        temp_input=temp_input[1:]\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    else:\n        x_input = x_input.reshape((1, n_steps,1))\n        yhat = model.predict(x_input, verbose=0)\n        print(yhat[0])\n        temp_input.extend(yhat[0].tolist())\n        print(len(temp_input))\n        lst_output.extend(yhat.tolist())\n        i=i+1\n    \n\nprint(lst_output)","db6762af":"day_new=np.arange(1,101)\nday_pred=np.arange(101,131)","2077415a":"import matplotlib.pyplot as plt","107bfc60":"len(df1)","690bd23b":"plt.plot(day_new,scaler.inverse_transform(df1[1158:]))\nplt.plot(day_pred,scaler.inverse_transform(lst_output))","8ee68cbe":"reshape input to be [samples,time steps, features] which is required for LSTM","79a5b09d":"LSTM are sensitive to the scale of the data. so we apply MinMax scaler.","800a2c5d":"Splitting Data."}}