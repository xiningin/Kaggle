{"cell_type":{"bd0ffcd9":"code","ef523ad5":"code","d12d049d":"code","b4ccff5e":"code","0f4bd1a3":"code","b8644d28":"code","042b7222":"code","34626b44":"code","198da097":"code","f200ab5e":"code","98dde0d3":"code","819fd544":"code","496133be":"code","a4c1adda":"markdown","9656389a":"markdown","2484e111":"markdown","4fb7c457":"markdown","214b9502":"markdown"},"source":{"bd0ffcd9":"from __future__ import absolute_import, division, print_function, unicode_literals\nimport tensorflow as tf\nimport os\nimport time\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, BatchNormalization, Activation, Dropout, MaxPooling2D\nfrom tensorflow.keras import Model\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ModelCheckpoint, Callback, EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.applications import mobilenet_v2, inception_v3\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras import layers\nimport matplotlib.pylab as plt\nfrom keras import backend as K\nfrom keras.models import load_model\nimport cv2\nimport numpy as np\n","ef523ad5":"data_dir = '..\/input\/plantleaf\/PlantVillage'\ntrain_dir = '..\/input\/plantleaf\/PlantVillage'\nvalidation_dir = '..\/input\/plantleaf\/PlantVillage'\n\n\ndef count(dir, counter=0):\n    \"returns number of files in dir and subdirs\"\n    for pack in os.walk(dir):\n        for f in pack[2]:\n            counter += 1\n    return dir + \" : \" + str(counter) + \"files\"\n\n\nprint('[INFO]Total images for training :', count(train_dir))\nprint('[INFO]Total images for validation :', count(validation_dir))\n\n\nIMAGE_SIZE = (256, 256)\nBATCH_SIZE = 20\nEPOCHS = 1","d12d049d":"classes = [\"Pepper__bell___Bacterial_spot\",\n           \"Pepper__bell___healthy\",\n           \"Potato___Early_blight\",\n           \"Potato___healthy\",\\\n           \"Potato___Late_blight\",\n           \"Tomato__Target_Spot\",\n           \"Tomato__Tomato_mosaic_virus\",\n           \"Tomato__Tomato_YellowLeaf__Curl_Virus\",\n           \"Tomato_Bacterial_spot\",\\\n           \"Tomato_Early_blight\",\n           \"Tomato_healthy\",\n           \"Tomato_Late_blight\",\n           \"Tomato_Leaf_Mold\",\n           \"Tomato_Septoria_leaf_spot\",\n           \"Tomato_Spider_mites_Two_spotted_spider_mite\"]\n\nprint(classes)\n\nprint('[INFO]Number of classes:', len(classes))\n","b4ccff5e":"train_data_gen = ImageDataGenerator(\n    rescale=1. \/ 255,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True)\n\ntest_data_gen = ImageDataGenerator(rescale=1. \/ 255)\n\ntrain_generator = train_data_gen.flow_from_directory(\n    train_dir,\n    target_size=IMAGE_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode='categorical')\n\nvalidation_generator = test_data_gen.flow_from_directory(\n    validation_dir,\n    target_size=IMAGE_SIZE,\n    batch_size=BATCH_SIZE,\n    class_mode='categorical')","0f4bd1a3":"inputShape = (256,256,3)\nchanDim = -1\nif K.image_data_format() == \"channels_first\":\n    inputShape = (3,256,256)\n    chanDim = 1\nn_classes = 15","b8644d28":"# RUN WHEN TRAINING \n\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), padding=\"same\",input_shape=inputShape))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(3, 3)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(64, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\n\nmodel.add(Conv2D(64, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(128, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\n\nmodel.add(Conv2D(128, (3, 3), padding=\"same\"))\nmodel.add(Activation(\"relu\"))\nmodel.add(BatchNormalization(axis=chanDim))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\n\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(512))\nmodel.add(Activation(\"relu\"))\n\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.5))\nmodel.add(Dense(n_classes))\nmodel.add(Activation(\"softmax\"))\n\nmodel.save('kaggle_plant_model.h5')\n\n\nmodel.summary()\n\n","042b7222":"# RUN FOR LOADING\n\n#model = load_model('..\/input\/trained\/trained_model.h5')","34626b44":"# RUN FOR TRAINING \n\nopt = Adam(lr=0.001)\n\nmodel.compile(loss=\"binary_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])\n\n\n\n\nhistory = model.fit_generator(\ntrain_generator,\nsteps_per_epoch=train_generator.samples \/\/ BATCH_SIZE,\nepochs=EPOCHS,\nvalidation_data=validation_generator,\nvalidation_steps=validation_generator.samples \/\/ BATCH_SIZE,\nverbose=1)\n","198da097":"# RUN FOR LOADING \n\n# model = Sequential()\n# model.add(Conv2D(32, (3, 3), padding=\"same\",input_shape=inputShape))\n# model.add(Activation(\"relu\"))\n# model.add(BatchNormalization(axis=chanDim))\n# model.add(MaxPooling2D(pool_size=(3, 3)))\n# model.add(Dropout(0.25))\n\n# model.add(Conv2D(64, (3, 3), padding=\"same\"))\n# model.add(Activation(\"relu\"))\n# model.add(BatchNormalization(axis=chanDim))\n\n# model.add(Conv2D(64, (3, 3), padding=\"same\"))\n# model.add(Activation(\"relu\"))\n# model.add(BatchNormalization(axis=chanDim))\n# model.add(MaxPooling2D(pool_size=(2, 2)))\n# model.add(Dropout(0.25))\n\n# model.add(Conv2D(128, (3, 3), padding=\"same\"))\n# model.add(Activation(\"relu\"))\n# model.add(BatchNormalization(axis=chanDim))\n\n# model.add(Conv2D(128, (3, 3), padding=\"same\"))\n# model.add(Activation(\"relu\"))\n# model.add(BatchNormalization(axis=chanDim))\n# model.add(MaxPooling2D(pool_size=(2, 2)))\n\n# model.add(Dropout(0.25))\n# model.add(Flatten())\n# model.add(Dense(512))\n# model.add(Activation(\"relu\"))\n\n# model.add(BatchNormalization())\n# model.add(Dropout(0.5))\n# model.add(Dense(n_classes))\n# model.add(Activation(\"softmax\"))\n\n#opt = Adam(lr=0.001)\n\n#model.compile(loss=\"categorical_crossentropy\", optimizer=opt, metrics=[\"accuracy\"])","f200ab5e":"\n\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs_range = range(EPOCHS)\n\n","98dde0d3":"\nplt.figure(figsize=(16, 6))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\nplt.ylabel(\"Accuracy (training and validation)\")\nplt.xlabel(\"Training Steps\")\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.ylabel(\"Loss (training and validation)\")\nplt.xlabel(\"Training Steps\")\nplt.show()\n","819fd544":"model.save(\"model_final_tan.h5\")","496133be":"img = cv2.imread('..\/input\/test_images\/test_images\/1.JPG')\nplt.imshow(img)\nimg = img.reshape(1,256,256,3)\nprint(classes[model.predict_classes(img)[0]])","a4c1adda":"Import neccessary packages","9656389a":"### Predicting","2484e111":"## ____________________","4fb7c457":"## ------------ FOR TRAINING ONLY----------------------","214b9502":"## ------------ FOR LOADING MODEL ONLY----------------------"}}