{"cell_type":{"139951ee":"code","741abe4b":"code","adefd09a":"code","c58263ed":"code","49be12ff":"code","f9ddfbb6":"code","24bb7596":"code","f0ae13a6":"code","338179a6":"code","06175471":"code","0586a137":"code","22f84ff7":"code","65003a5c":"code","eb36f406":"code","74a89e9f":"code","47f801b5":"code","f166d7f8":"code","730c736c":"code","ff0662f7":"code","cd535d25":"code","73a5022a":"code","7eb51981":"code","e24802e5":"code","0c869706":"code","b2bc2213":"code","54e8ec00":"code","ec1083a7":"code","5b183221":"code","58063b6f":"code","db1f9894":"code","8ac118c3":"code","c24beb9e":"code","cce7a24a":"code","ba95286b":"code","ac8261c1":"code","505aa81e":"code","cd476835":"code","2bbeda29":"code","d353b687":"code","0963e720":"code","707ebebe":"code","a5ec7e46":"code","c1c7e9ef":"code","8409a9da":"code","35577199":"code","9e62f88d":"code","14d36e77":"code","a8144251":"code","f2669faf":"code","ce1076b4":"code","944426b6":"code","6c38c821":"code","5e41437a":"code","2324d796":"code","5dfaa84f":"code","e1404cbe":"code","60cef761":"code","6a4b26de":"code","6ec2b44b":"code","7e9c702a":"code","2c321d0a":"code","3a244efd":"code","7693d9bf":"code","166fa3b7":"code","4e6260eb":"code","6c8d4437":"code","2dada3da":"code","7b56a9d8":"code","36445a5a":"code","fa556ab0":"code","5ae52e8a":"code","ce5d30b6":"code","be9939fe":"code","2b60c81b":"code","4ace72b4":"code","b7f38c72":"code","4919c49f":"code","f8e65007":"code","cef492eb":"code","fe417651":"code","79a337f7":"code","a1742cd4":"code","7778e775":"code","ed3eb116":"code","8747d2ec":"code","74348d06":"code","ce60afcf":"code","25c0b5a2":"code","b80b5fb8":"code","88ec7816":"code","282b60df":"markdown","583a2059":"markdown","43066bd7":"markdown","1ea04eff":"markdown"},"source":{"139951ee":"import pandas as pd\nimport re \nfrom matplotlib import pyplot\nimport seaborn as sns\nimport numpy as np\nimport os # accessing directory structure\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n#set seed\nnp.random.seed(12345)\n","741abe4b":"notclean = pd.read_csv('..\/input\/bitcoin-tweets-14m\/cleanprep.csv', delimiter=',', error_bad_lines=False,engine = 'python',header = None)","adefd09a":"notclean.head()","c58263ed":"#-----------------Pre-processing -------------------#\n\nnotclean.columns =['dt', 'name','text','polarity','sensitivity']","49be12ff":"notclean =notclean.drop(['name','text'], axis=1)","f9ddfbb6":"notclean.head()","24bb7596":"notclean.info()","f0ae13a6":"notclean['dt'] = pd.to_datetime(notclean['dt'])","338179a6":"notclean['DateTime'] = notclean['dt'].dt.floor('h')\nnotclean.head()","06175471":"vdf = notclean.groupby(pd.Grouper(key='dt',freq='H')).size().reset_index(name='tweet_vol')","0586a137":"vdf.head()","22f84ff7":"vdf.info()","65003a5c":"vdf.index = pd.to_datetime(vdf.index)\nvdf=vdf.set_index('dt')","eb36f406":"vdf.info()","74a89e9f":"vdf.head()","47f801b5":"notclean.info()","f166d7f8":"notclean.index = pd.to_datetime(notclean.index)","730c736c":"notclean.info()","ff0662f7":"vdf['tweet_vol'] =vdf['tweet_vol'].astype(float)","cd535d25":"vdf.info()","73a5022a":"notclean.info()","7eb51981":"notclean.head()","e24802e5":"#ndf = pd.merge(notclean,vdf, how='inner',left_index=True, right_index=True)","0c869706":"notclean.head()","b2bc2213":"df = notclean.groupby('DateTime').agg(lambda x: x.mean())","54e8ec00":"df['Tweet_vol'] = vdf['tweet_vol']","ec1083a7":"df = df.drop(df.index[0])","5b183221":"df.head()","58063b6f":"df.tail()","db1f9894":"df.info()","8ac118c3":"btcDF = pd.read_csv('..\/input\/btc-price\/btcSave2.csv', error_bad_lines=False,engine = 'python')","c24beb9e":"btcDF['Timestamp'] = pd.to_datetime(btcDF['Timestamp'])\nbtcDF = btcDF.set_index(pd.DatetimeIndex(btcDF['Timestamp']))","cce7a24a":"btcDF.head()","ba95286b":"btcDF = btcDF.drop(['Timestamp'], axis=1)","ac8261c1":"btcDF.head()","505aa81e":"Final_df = pd.merge(df,btcDF, how='inner',left_index=True, right_index=True)","cd476835":"Final_df.head()","2bbeda29":"Final_df.info()","d353b687":"Final_df=Final_df.drop(['Weighted Price'],axis=1 )","0963e720":"Final_df.head()","707ebebe":"Final_df.columns = ['Polarity', 'Sensitivity','Tweet_vol','Open','High','Low', 'Close_Price', 'Volume_BTC', 'Volume_Dollar']","a5ec7e46":"Final_df.head()","c1c7e9ef":"Final_df = Final_df[['Polarity', 'Sensitivity','Tweet_vol', 'Open','High','Low', 'Volume_BTC', 'Volume_Dollar', 'Close_Price']]","8409a9da":"Final_df","35577199":"#---------------Stage 1 Complete ------------------#\n#Final_df.to_csv('Desktop\/Sentiment.csv')","9e62f88d":"#--------------Analysis----------------------------#\n\nvalues = Final_df.values\ngroups = [0,1,2,3,4,5,6,7]\ni =1  \npyplot.figure()\nfor group in groups:\n    pyplot.subplot(len(groups), 1,i)\n    pyplot.plot(values[:,group])\n    pyplot.title(Final_df.columns[group], y=.5, loc='right')\n    i += 1\npyplot.show()","14d36e77":"Final_df['Volume_BTC'].max()","a8144251":"Final_df['Volume_Dollar'].max()","f2669faf":"Final_df['Volume_BTC'].sum()","ce1076b4":"Final_df['Volume_Dollar'].sum()","944426b6":"Final_df['Tweet_vol'].max()","6c38c821":"Final_df.describe()","5e41437a":"cor = Final_df.corr()\ncor","2324d796":"Top_Vol =Final_df['Volume_BTC'].nlargest(10)\nTop_Vol","5dfaa84f":"Top_Sen =Final_df['Sensitivity'].nlargest(10)\nTop_Sen","e1404cbe":"Top_Pol =Final_df['Polarity'].nlargest(10)\nTop_Pol","60cef761":"Top_Tweet =Final_df['Tweet_vol'].nlargest(10)\nTop_Tweet","6a4b26de":"import matplotlib.pyplot as plt\nsns.set(style=\"white\")\nf, ax = plt.subplots(figsize=(11, 9))\n\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nax =sns.heatmap(cor, cmap=cmap, vmax=1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .7})\nplt.show()","6ec2b44b":"plt.plot(Final_df.index, Final_df['Close_Price'], 'black')\nplt.plot(Final_df.index, Final_df['Open'], 'yellow')\nplt.plot(Final_df.index, Final_df['Low'], 'red')\nplt.plot(Final_df.index, Final_df['High'], 'green')\nplt.title('BTC Close Price(hr)')\nplt.xticks(rotation='vertical')\nplt.ylabel('Price ($)');\nplt.show();\n\nplt.plot(Final_df.index, Final_df['Volume_BTC'], 'g')\nplt.title('Trading Vol BTC(hr)')\nplt.xticks(rotation='vertical')\nplt.ylabel('Vol BTC');\nplt.show();\n\nplt.plot(Final_df.index, Final_df['Polarity'], 'b')\nplt.xticks(rotation='vertical')\nplt.title('Twitter Sentiment(hr)')\nplt.ylabel('Pol (0-1)');\nplt.show();\nplt.legend()\n\nplt.plot(Final_df.index, Final_df['Tweet_vol'], 'b')\nplt.xticks(rotation='vertical')\nplt.title('Tweet Vol(hr)')\nplt.ylabel('No. of Tweets');\nplt.show();\nplt.legend()","7e9c702a":"#sns Heatmap for Hour x volume \n#Final_df['time']=Final_df.index.time()\nFinal_df['time']=Final_df.index.to_series().apply(lambda x: x.strftime(\"%X\"))\n","2c321d0a":"Final_df.head()","3a244efd":"hour_df=Final_df","7693d9bf":"hour_df=hour_df.groupby('time').agg(lambda x: x.mean())","166fa3b7":"hour_df","4e6260eb":"hour_df.head()","6c8d4437":"#sns Hourly Heatmap\nhour_df['hour'] = hour_df.index\nresult = hour_df.pivot(index='hour', columns='Polarity', values='Volume_BTC')\nsns.heatmap(result, annot=True, fmt=\"g\", cmap='viridis')\nplt.title('Polarity x BTC Volume avg(Hr)')\nplt.show()\n\n#sns daily heatmap?","2dada3da":"hour_df['hour'] = hour_df.index\nresult = hour_df.pivot(index='Volume_BTC', columns='hour', values='Tweet_vol')\nsns.heatmap(result, annot=True, fmt=\"g\", cmap='viridis')\nplt.title('BTC Vol x Tweet Vol avg(Hr)')\nplt.show()","7b56a9d8":"cor = Final_df.corr()\ncor","36445a5a":"#----------------End Analysis------------------------#","fa556ab0":"#---------------- LSTM Prep ------------------------#","5ae52e8a":"df = Final_df","ce5d30b6":"df.info()","be9939fe":"df = df.drop(['Open','High', 'Low', 'Volume_Dollar'], axis=1)\ndf.head()","2b60c81b":"df = df[['Close_Price', 'Polarity', 'Sensitivity','Tweet_vol','Volume_BTC']]\ndf.head()","4ace72b4":"cor = df.corr()\nimport matplotlib.pyplot as plt\nsns.set(style=\"white\")\nf, ax = plt.subplots(figsize=(11, 9))\n\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nax =sns.heatmap(cor, cmap=cmap, vmax=1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .7})\nplt.show()","b7f38c72":"from math import sqrt\nfrom numpy import concatenate\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom matplotlib import pyplot\n\nfrom pandas import read_csv\nfrom pandas import DataFrame\nfrom pandas import concat\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\n\n# convert series to supervised learning\ndef series_to_supervised(data, n_in=1, n_out=1, dropnan=True):\n\tn_vars = 1 if type(data) is list else data.shape[1]\n\tdf = DataFrame(data)\n\tcols, names = list(), list()\n\t# input sequence (t-n, ... t-1)\n\tfor i in range(n_in, 0, -1):\n\t\tcols.append(df.shift(i))\n\t\tnames += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]\n\t# forecast sequence (t, t+1, ... t+n)\n\tfor i in range(0, n_out):\n\t\tcols.append(df.shift(-i))\n\t\tif i == 0:\n\t\t\tnames += [('var%d(t)' % (j+1)) for j in range(n_vars)]\n\t\telse:\n\t\t\tnames += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]\n\t# put it all together\n\tagg = concat(cols, axis=1)\n\tagg.columns = names\n\t# drop rows with NaN values\n\tif dropnan:\n\t\tagg.dropna(inplace=True)\n\treturn agg","4919c49f":"values = df.values\ncols = df.columns.tolist()\ncols = cols[-1:] + cols[:-1]\ndf = df[cols]\ndf = df[['Close_Price', 'Polarity', 'Sensitivity','Tweet_vol','Volume_BTC']]\ndf.head()","f8e65007":"scaler = MinMaxScaler(feature_range=(0, 1))\nscaled = scaler.fit_transform(df.values)","cef492eb":"n_hours = 3 #adding 3 hours lags creating number of observations \nn_features = 5 #Features in the dataset.\nn_obs = n_hours*n_features","fe417651":"reframed = series_to_supervised(scaled, n_hours, 1)\nreframed.head()","79a337f7":"reframed.drop(reframed.columns[-4], axis=1)\nreframed.head()","a1742cd4":"print(reframed.head())","7778e775":"values = reframed.values\nn_train_hours = 200\ntrain = values[:n_train_hours, :]\ntest = values[n_train_hours:, :]\ntrain.shape","ed3eb116":"# split into input and outputs\ntrain_X, train_y = train[:, :n_obs], train[:, -n_features]\ntest_X, test_y = test[:, :n_obs], test[:, -n_features]","8747d2ec":"# reshape input to be 3D [samples, timesteps, features]\ntrain_X = train_X.reshape((train_X.shape[0], n_hours, n_features))\ntest_X = test_X.reshape((test_X.shape[0], n_hours, n_features))\nprint(train_X.shape, train_y.shape, test_X.shape, test_y.shape)","74348d06":"# design network\nmodel = Sequential()\nmodel.add(LSTM(5, input_shape=(train_X.shape[1], train_X.shape[2])))\nmodel.add(Dense(1))\nmodel.compile(loss='mae', optimizer='adam')\n# fit network\nhistory = model.fit(train_X, train_y, epochs=50, batch_size=6, validation_data=(test_X, test_y), verbose=2, shuffle=False,validation_split=0.2)\n# plot history","ce60afcf":"plt.plot(history.history['loss'], label='train')\nplt.plot(history.history['val_loss'], label='test')\nplt.legend()\nplt.show()","25c0b5a2":"# make a prediction\nyhat = model.predict(test_X)\ntest_X = test_X.reshape((test_X.shape[0], n_hours* n_features,))\n# invert scaling for forecast\ninv_yhat = concatenate((yhat, test_X[:, -4:]), axis=1)\ninv_yhat = scaler.inverse_transform(inv_yhat)\ninv_yhat = inv_yhat[:,0]\n# invert scaling for actual\ntest_y = test_y.reshape((len(test_y), 1))\ninv_y = concatenate((test_y, test_X[:, -4:]), axis=1)\ninv_y = scaler.inverse_transform(inv_y)\ninv_y = inv_y[:,0]\n# calculate RMSE\nmse = (mean_squared_error(inv_y, inv_yhat))\nprint('Test MSE: %.3f' % mse)\nrmse = sqrt(mean_squared_error(inv_y, inv_yhat))\nprint('Test RMSE: %.3f' % rmse)\n","b80b5fb8":"plt.plot(inv_y, label='Real')\nplt.plot(inv_yhat, label='Predicted')","88ec7816":"plt.title('Real v Predicted Close_Price')\nplt.ylabel('Price ($)')\nplt.xlabel('epochs (Hr)')\nplt.show()","282b60df":"# Exploratory Analysis","583a2059":"# LSTM Model","43066bd7":"# Data Pre-processing","1ea04eff":"# Bitcoin LSTM Model with Tweet Volume and Sentiment"}}