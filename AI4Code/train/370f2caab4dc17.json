{"cell_type":{"f6f99666":"code","f2cf3bc4":"code","ac58c508":"code","24fa5efc":"code","a3b49f65":"code","3c5565f7":"code","6223063f":"code","dfafdfac":"code","6f985125":"code","bfe20d39":"code","1a8258b3":"code","d9e3e554":"code","eb6f732b":"code","87a7b929":"code","894f3a4c":"code","8b2cebf8":"code","ca31f1be":"markdown","2dc548f2":"markdown","4d7d45f6":"markdown","d846c1a0":"markdown","61860ea6":"markdown","7dba7269":"markdown","13cb0c4f":"markdown","7dded1c3":"markdown","e814bd61":"markdown","afdee65a":"markdown","d4563e66":"markdown","0e760152":"markdown","fcf6ba44":"markdown","cca1088c":"markdown","be3d14d9":"markdown","639d76b0":"markdown","4a7c176e":"markdown"},"source":{"f6f99666":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2cf3bc4":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom scipy.stats import skew\n%matplotlib inline","ac58c508":"import matplotlib.pyplot as plt\nplt.style.use(\"ggplot\")\nplt.rcParams['figure.figsize'] = (12, 8)","24fa5efc":"ad = pd.read_csv(\"\/kaggle\/input\/sales-revenue-dataset\/Advertising.csv\")\nad.head()","a3b49f65":"ad.info()","3c5565f7":"sns.pairplot(ad, x_vars=['TV','radio','newspaper'], y_vars='sales', height = 7, aspect = 0.7)\nplt.show()","6223063f":"from sklearn.linear_model import LinearRegression\n\nx = ad[['TV','radio','newspaper']]\ny= ad.sales\n\nlm1 = LinearRegression()\nlm1.fit(x,y)\n\nprint(lm1.intercept_)\nprint(lm1.coef_)","dfafdfac":"list(zip(['TV','radio','newspaper'], lm1.coef_))","6f985125":"sns.heatmap(ad.corr(), annot = True)\nplt.show()","bfe20d39":"from sklearn.metrics import r2_score\n\nlm2 = LinearRegression().fit(x[['TV','radio']], y)\nlm2_pred = lm2.predict(x[['TV','radio']])\n\nprint(\"R2: \", r2_score(y, lm2_pred))","1a8258b3":"lm3 = LinearRegression().fit(x, y)\nlm3_pred = lm3.predict(x)\n\nprint(\"R2: \", r2_score(y, lm3_pred))","d9e3e554":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, random_state = 1)\n\nlm4 = LinearRegression().fit(x_train,y_train)\n\nlm4_preds = lm4.predict(x_test)\n\nprint(\"RMSE: \", np.sqrt(mean_squared_error(y_test, lm4_preds)))\n\nprint(\"R2: \", r2_score(y_test, lm4_preds))","eb6f732b":"x_train, x_test, y_train, y_test = train_test_split(x[['TV', 'radio']], y, random_state = 1)\n\nlm5 = LinearRegression().fit(x_train,y_train)\n\nlm5_preds = lm5.predict(x_test)\n\nprint(\"RMSE: \", np.sqrt(mean_squared_error(y_test, lm5_preds)))\n\nprint(\"R2: \", r2_score(y_test, lm5_preds))","87a7b929":"from yellowbrick.regressor import PredictionError, ResidualsPlot\n\nvisualizer = PredictionError(lm5).fit(x_train, y_train)\nvisualizer.score(x_test, y_test)\nvisualizer.poof()\nplt.show()","894f3a4c":"ad['interaction'] = ad['TV'] * ad['radio']\n\nx = ad[['TV','radio','interaction']]\ny = ad.sales\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, random_state = 1)\n\nlm6 = LinearRegression().fit(x_train,y_train)\n\nlm6_preds = lm6.predict(x_test)\n\nprint(\"RMSE: \", np.sqrt(mean_squared_error(y_test, lm6_preds)))\n\nprint(\"R2: \", r2_score(y_test, lm6_preds))","8b2cebf8":"visualizer = PredictionError(lm6).fit(x_train, y_train)\nvisualizer.score(x_test, y_test)\nvisualizer.poof()\nplt.show()","ca31f1be":"### Task 5: Feature Selection","2dc548f2":"Linear Regression is a useful tool for predicting a quantitative response.","4d7d45f6":"**Multiple Linear Regression**: <h5 align=center>$$Y = \\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 +...+ \\beta_p X_p + \\epsilon$$ <\/h5>\n<h5 align=center> $$sales = \\beta_0 + \\beta_1 \\times TV + \\beta_2 \\times radio + \\beta_3 \\times newspaper + \\epsilon$$ <\/h5>","d846c1a0":"### Task 3: Relationship between Features and Response","61860ea6":"### Task 4: Multiple Linear Regression - Estimating Coefficients","7dba7269":"### Task 2: Load the Data","13cb0c4f":"Let's use train\/test split with RMSE to see whether newspaper should be kept in the model:","7dded1c3":"**Simple Linear Regression**: <h5 align=center>$$Y = \\beta_0 + \\beta_1 X + \\epsilon$$<\/h5>","e814bd61":"\n<h2 align=\"center\">Multiple Linear Regression<\/h2>","afdee65a":"### Task 1: Importing Libraries","d4563e66":"### Task 6: Model Evaluation Using Train\/Test Split and Metrics","0e760152":"The linear model either assumes that the regression function $E(Y|X)$ is linear, or that the linear model is a reasonable approximation.Here the $\\beta_j$'s are unknown parameters or coefficients, and the variables $X_j$ can come from different sources. No matter the source of $X_j$, the model is linear in the parameters.","fcf6ba44":"The adverstiting dataset captures sales revenue generated with respect to advertisement spends across multiple channles like radio, tv and newspaper.","cca1088c":"### Task 7: Interaction Effect (Synergy)","be3d14d9":"<h4 align=\"center\"> $f(x) = \\beta_0 + \\sum_{j=1}^p X_j \\beta_j$. <\/h4>","639d76b0":"We have an input vector $X^T = (X_1, X_2,...,X_p)$, and want to predict a real-valued output $Y$. The linear regression model has the form","4a7c176e":"**Mean Absolute Error** (MAE) is the mean of the absolute value of the errors: <h5 align=center>$$\\frac{1}{n}\\sum_{i=1}^{n} \\left |y_i - \\hat{y_i} \\right |$$<\/h5>\n**Mean Squared Error** (MSE) is the mean of the squared errors: <h5 align=center>$$\\frac{1}{n}\\sum_{i=1}^{n} (y_i - \\hat{y_i})^2$$<\/h5>\n**Root Mean Squared Error** (RMSE) is the mean of the squared errors: <h5 align=center>$$\\sqrt{\\frac{1}{n}\\sum_{i=1}^{n} (y_i - \\hat{y_i})^2}$$<\/h5>"}}