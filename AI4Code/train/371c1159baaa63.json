{"cell_type":{"a9affe69":"code","67d2fb2d":"code","192f4b1f":"code","f4102b1d":"code","9204df04":"code","a0d46675":"code","5ddaaa0c":"code","b02bbb2d":"code","73f76684":"code","49ac59fa":"code","53ae7830":"code","5db2b6a0":"code","f286a735":"code","414005f6":"code","1742580c":"code","96ae07fd":"markdown"},"source":{"a9affe69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn import tree\nimport pydot\nfrom IPython.display import Image\nfrom sklearn.externals.six import StringIO\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n\n# Any results you write to the current directory are saved as output.","67d2fb2d":"file_path = '..\/input\/master.csv'\ndf = pd.read_csv(file_path)\ndf.head() # print the first few lines ","192f4b1f":"df.describe() # print the statistics of the datasets ","f4102b1d":"df.columns # print columns of the datasets","9204df04":"# select columns from the dataset and prepare a new datasets \ncol = ['year', 'population',\n       'suicides\/100k pop',\n        'gdp_per_capita ($)']\ndf1 = df[col]\nprint(df1.head())\ny = df['suicides_no']\nprint(y.head())","a0d46675":"from sklearn.tree import DecisionTreeRegressor \nfrom sklearn.model_selection import train_test_split","5ddaaa0c":"# devide the dataset into the \ntrain_x, test_x, train_y, test_y = train_test_split(df1,y, test_size = 0.2)\nprint(train_x.shape, train_y.shape)\nprint(test_y.shape, test_x.shape)\nprint(train_x.head())","b02bbb2d":"train_x.head()","73f76684":"model = DecisionTreeRegressor(random_state =0)\nmodel.fit(train_x,train_y)","49ac59fa":"predict = model.predict(test_x)\n","53ae7830":"import matplotlib.pyplot as plt\nplt.figure(1)\nplt.figure(figsize = (20,10))\nplt.plot(np.arange(len(predict)),predict, 'o', label = \"predicted values\")\nplt.title('predicted and actual suicide rate')\nplt.xlabel(\"number of samples \")\n#plt.figure(2)\nplt.plot(np.arange(len(predict)),test_y.values, label = \"actual values\")\nplt.legend(loc = 'best')\n#plt.title('actual suicide rate')","5db2b6a0":"# accuracy score \nfrom sklearn.metrics import accuracy_score\naccuracy_score(test_y, predict)","f286a735":"# mean absolute error \nfrom sklearn.metrics import mean_absolute_error \nmean_absolute_error(test_y, predict)","414005f6":"# mean absolute percentage error \ndef mape(y_true, y_pred): \n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","1742580c":"mape(test_y, predict)","96ae07fd":"# Sucide rate analysis using Decesion tree "}}