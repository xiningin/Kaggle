{"cell_type":{"89118a1e":"code","8f3a2c05":"code","26d0b767":"code","e8598fae":"code","b4c34af6":"markdown"},"source":{"89118a1e":"\ndef my_agent(obs_dict,config_dict):\n    from kaggle_environments.envs.hungry_geese.hungry_geese import Observation,Configuration,Action,row_col\n    import numpy as np \n    import random\n    global last_action\n    def get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'):        \n        close_opp_segments = 0        \n        close_my_goose_segments = 0\n        hit_opp_segments = 0\n        hit_my_goose_segments = 0\n        diff_distance_reward = 0\n        if Direction == 'NORTH':\n\n            #player location after one step\n            player_goose = observation.geese[player_index]\n            player_head = player_goose[0]\n            player_row,player_column  = row_col(player_head,configuration.columns)\n            next_player_row,next_player_column  = player_row - 1,player_column \n            \n            # Food location\n            food = food_piece\n            food_row,food_column = row_col(food,configuration.columns) \n            # The difference between the two positions\n            diff_distance = (food_row - next_player_row)**2 + (food_column - next_player_column)**2\n            if diff_distance == 0:\n                diff_distance = 1\n            diff_distance_reward = 1\/diff_distance\n            #opp's location\n            for i in range(len(observation.geese)): \n                if i == player_index:\n                   my_goose = observation.geese[i]\n                   my_goose = my_goose[1:]\n                   for segment in my_goose:\n                      if player_head - 11 == segment:\n                          hit_my_goose_segments = hit_my_goose_segments + 1\n                        \n                   for segment in my_goose:\n                      if player_head - 22 == segment:\n                          close_my_goose_segments = close_my_goose_segments + 1 \n                        \n                   for segment in my_goose:\n                      if player_head + 11*6  == segment:\n                          hit_my_goose_segments = hit_my_goose_segments + 1 \n                        \n                else:\n                    opp_goose = observation.geese[i]\n                    for segment in opp_goose:\n                       if player_head - 11 == segment:\n                          hit_opp_segments = hit_opp_segments + 1 \n                            \n                    for segment in opp_goose:\n                       if player_head + 11*6 == segment:\n                          hit_opp_segments = hit_opp_segments + 1 \n    \n                    for segment in opp_goose:\n                       if player_head - 22 == segment:\n                          close_opp_segments = close_opp_segments + 1 \n                    \n                        \n            score = 100*diff_distance_reward -50*close_my_goose_segments - 2e2*close_opp_segments - 1e3*hit_opp_segments - 1e3*hit_my_goose_segments \n            print(f'North:{score}')\n            return score\n\n\n        if Direction == 'SOUTH':\n\n            #player location after one step\n            player_goose = observation.geese[player_index]\n            player_head = player_goose[0]\n            player_row,player_column  = row_col(player_head,configuration.columns)\n            next_player_row,next_player_column  = player_row + 1,player_column\n\n            # Food location\n            food = food_piece\n            food_row,food_column = row_col(food,configuration.columns) \n            # The difference between the two positions\n            diff_distance = (food_row - next_player_row)**2 + (food_column - next_player_column)**2\n            if diff_distance == 0:\n                diff_distance = 1\n            diff_distance_reward = 1\/diff_distance\n            #opp segment's location & my goose segments location\n            for i in range(len(observation.geese)): \n                if i == player_index:\n                   my_goose = observation.geese[i]\n                   my_goose = my_goose[1:]\n                   for segment in my_goose:\n                      if player_head + 11 == segment:\n                          hit_my_goose_segments = hit_my_goose_segments + 1\n                        \n                   for segment in my_goose:\n                      if player_head + 22 == segment:\n                          close_my_goose_segments = close_my_goose_segments + 1 \n\n                   for segment in my_goose:\n                      if player_head - 11*6 == segment:\n                          hit_my_goose_segments = hit_my_goose_segments + 1 \n\n                else:\n                    opp_goose = observation.geese[i]\n                    for segment in opp_goose:\n                       if player_head + 11 == segment:\n                          hit_opp_segments = hit_opp_segments + 1\n                            \n                    for segment in opp_goose:\n                       if player_head - 11*6 == segment:\n                          hit_opp_segments = hit_opp_segments + 1 \n                                \n                    for segment in opp_goose:\n                       if player_head + 22 == segment:\n                          close_opp_segments = close_opp_segments + 1                   \n\n            score = 100*diff_distance_reward -50*close_my_goose_segments - 2e2*close_opp_segments - 1e3*hit_opp_segments - 1e3*hit_my_goose_segments \n            print(f'south:{score}')\n            return score\n\n\n        if Direction == 'EAST':\n\n            #player location after one step\n            player_goose = observation.geese[player_index]\n            player_head = player_goose[0]\n            player_row,player_column  = row_col(player_head,configuration.columns)\n            next_player_row,next_player_column  = player_row ,player_column + 1\n\n            # Food location\n            food = observation.food[0]\n            food_row,food_column = row_col(food,configuration.columns) \n            # The difference between the two positions\n            diff_distance = (food_row - next_player_row)**2 + (food_column - next_player_column)**2\n            if diff_distance == 0:\n                diff_distance = 1\n            diff_distance_reward = 1\/diff_distance        \n            #opp segment's location & my goose segments location\n            for i in range(len(observation.geese)): \n                if i == player_index:\n                   my_goose = observation.geese[i]\n                   my_goose = my_goose[1:]\n                   for segment in my_goose:\n                      if player_head + 1 == segment:\n                          hit_my_goose_segments = hit_my_goose_segments + 1 \n                        \n                   for segment in my_goose:\n                      if player_head + 2 == segment:\n                          close_my_goose_segments = close_my_goose_segments + 1\n                        \n                   for segment in my_goose:\n                      if player_head - 11 == segment:\n                          hit_my_goose_segments = hit_my_goose_segments + 1 \n\n                else:\n                    opp_goose = observation.geese[i]\n                    for segment in opp_goose:\n                       if player_head + 1 == segment:\n                          hit_opp_segments = hit_opp_segments + 1\n                     \n                    for segment in opp_goose:\n                       if player_head - 11 == segment:\n                          hit_opp_segments = hit_opp_segments + 1 \n    \n                    for segment in opp_goose:\n                       if player_head + 2 == segment:\n                          close_opp_segments = close_opp_segments + 1\n                        \n            score = 100*diff_distance_reward -50*close_my_goose_segments - 2e2*close_opp_segments - 1e3*hit_opp_segments - 1e3*hit_my_goose_segments                             \n            print(f'East:{score}')\n            return score\n\n        if Direction == 'WEST':\n\n            #player location after one step\n            player_goose = observation.geese[player_index]\n            player_head = player_goose[0]\n            player_row,player_column  = row_col(player_head,configuration.columns)\n            next_player_row,next_player_column  = player_row ,player_column - 1\n\n            # Food location\n            food = food_piece\n            food_row,food_column = row_col(food,configuration.columns) \n            # The difference between the two positions\n            diff_distance = (food_row - next_player_row)**2 + (food_column - next_player_column)**2\n            if diff_distance == 0:\n                diff_distance = 1\n            diff_distance_reward = 1\/diff_distance\n            #opp segment's location & my goose segments location\n            for i in range(len(observation.geese)): \n                if i == player_index:\n                   my_goose = observation.geese[i]\n                   my_goose = my_goose[1:]\n                   for segment in my_goose:\n                      if player_head - 1 == segment:\n                          hit_my_goose_segments = hit_my_goose_segments + 1 \n                        \n                   for segment in my_goose:\n                      if player_head - 2 == segment:\n                          close_my_goose_segments = close_my_goose_segments + 1 \n                        \n                   for segment in my_goose:\n                      if player_head + 11 == segment:\n                          hit_my_goose_segments = hit_my_goose_segments + 1 \n\n                else:\n                    opp_goose = observation.geese[i]\n                    for segment in opp_goose:\n                       if player_head - 1 == segment:\n                          hit_opp_segments = hit_opp_segments + 1\n                            \n                    for segment in opp_goose:\n                       if player_head + 11 == segment:\n                          hit_opp_segments = hit_opp_segments + 1 \n                                \n                    for segment in opp_goose:\n                       if player_head - 2 == segment:\n                          close_opp_segments = close_opp_segments + 1 \n                            \n            score = 100*diff_distance_reward -50*close_my_goose_segments - 2e2*close_opp_segments - 1e3*hit_opp_segments - 1e3*hit_my_goose_segments \n            print(f'West:{score}')\n            return score\n        \n        \n    def next_move(last_action = None):\n            scores = []\n            observation = Observation(obs_dict)\n            configuration = Configuration(config_dict)\n            player_index = observation.index\n            player_goose = observation.geese[player_index]\n            player_head = player_goose[0]\n            player_row,player_column = row_col(player_head,configuration.columns)\n            food = observation.food[0]\n            food_row,food_column = row_col(food,configuration.columns)\n            food_piece = food\n            max_score_values = []\n            max_score_loc  = []\n            \n            # Checking allowed movements\n            if len(player_goose)== 1:\n                if last_action == None:\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n                        max_score = np.argmax(scores)\n\n\n                        if max_score == 0:\n                            return Action.SOUTH.name \n                        if max_score == 1:\n                            return Action.NORTH.name \n                        if max_score == 2:\n                            return Action.EAST.name \n                        if max_score == 3:\n                            return Action.WEST.name \n                        \n                if last_action == 'SOUTH':\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n                        max_score = np.argmax(scores)\n\n\n                        if max_score == 0:\n                            return Action.SOUTH.name \n                        if max_score == 1:\n                            return Action.EAST.name \n                        if max_score == 2:\n                            return Action.WEST.name \n                        \n                if last_action == 'NORTH':\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n                        max_score = np.argmax(scores)\n\n\n                        if max_score == 0:\n                            return Action.NORTH.name \n                        if max_score == 1:\n                            return Action.EAST.name \n                        if max_score == 2:\n                            return Action.WEST.name \n\n                if last_action == 'EAST':\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))\n                        max_score = np.argmax(scores)\n\n                        if max_score == 0:\n                            return Action.SOUTH.name \n                        if max_score == 1:\n                            return Action.NORTH.name \n                        if max_score == 2:\n                            return Action.EAST.name \n                        \n                if last_action == 'WEST':\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                        scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))\n                        max_score = np.argmax(scores)\n\n                        if max_score == 0:\n                            return Action.SOUTH.name \n                        if max_score == 1:\n                            return Action.NORTH.name \n                        if max_score == 2:\n                            return Action.WEST.name \n                        \n            elif player_head == player_goose[1] + 1 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))  \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    return Action.SOUTH.name \n                if max_score == 1:\n                    return Action.NORTH.name \n                if max_score == 2:\n                    return Action.EAST.name \n\n            elif player_head == player_goose[1] - 1 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    return Action.SOUTH.name \n                if max_score == 1:\n                    return Action.NORTH.name \n                if max_score == 2:\n                    return Action.WEST.name \n\n            elif player_head == player_goose[1] - 11 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))            \n                max_score = np.argmax(scores) \n\n                if max_score == 0:\n                    return Action.NORTH.name \n                if max_score == 1:\n                    return Action.EAST.name \n                if max_score == 2:\n                    return Action.WEST.name \n\n            elif player_head == player_goose[1] + 11 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST'))            \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST')) \n                max_score = np.argmax(scores) \n\n                if max_score == 0:\n                    return Action.SOUTH.name \n                if max_score == 1:\n                    return Action.EAST.name \n                if max_score == 2:\n                    return Action.WEST.name       \n\n            elif player_head == player_goose[1] - 11 * 6 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST')) \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))  \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    return Action.SOUTH.name \n                if max_score == 1:\n                    return Action.EAST.name \n                if max_score == 2:\n                    return Action.WEST.name \n\n            elif player_head == player_goose[1] + 11 * 6 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST')) \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))  \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    return Action.NORTH.name \n                if max_score == 1:\n                    return Action.EAST.name \n                if max_score == 2:\n                    return Action.WEST.name \n\n            elif player_head == player_goose[1] - 11 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='EAST')) \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    return Action.SOUTH.name \n                if max_score == 1:\n                    return Action.NORTH.name \n                if max_score == 2:\n                    return Action.EAST.name \n\n            elif player_head == player_goose[1] + 11 :\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='NORTH'))\n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='SOUTH')) \n                scores.append(get_heuristic(food_piece,observation,player_index,configuration,Direction='WEST'))  \n                max_score = np.argmax(scores)\n\n\n                if max_score == 0:\n                    return Action.NORTH.name \n                if max_score == 1:\n                    return Action.SOUTH.name \n                if max_score == 2:\n                    return Action.WEST.name \n                \n    observation = Observation(obs_dict)\n    if observation.step == 0:\n        best_move = next_move()\n    if observation.step >= 1:\n        best_move = next_move(last_action)   \n    class last_Direction:\n        def __init__(self, direction):\n            self.direction = direction\n            \n    Direction = last_Direction(best_move)\n    last_action = Direction.direction\n    print(last_action)\n    return last_action","8f3a2c05":"from kaggle_environments import make\nenv = make('hungry_geese',debug=True)\nprint(env.agents)","26d0b767":"env.run([my_agent,'greedy','greedy','greedy'])\nenv.render(mode='ipython')","e8598fae":"import inspect\nimport os\n\ndef write_agent_to_file(function, file):\n    with open(file, \"a\" if os.path.exists(file) else \"w\") as f:\n        f.write(inspect.getsource(function))\n        print(function, \"written to\", file)\n\nwrite_agent_to_file(my_agent, \"submission.py\")","b4c34af6":"\n## Greedy Agent"}}