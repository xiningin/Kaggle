{"cell_type":{"bb7a2b67":"code","f24389d6":"code","d06602e2":"code","61736603":"code","c4efeaa6":"code","2f0ff9d3":"code","06660115":"code","faf4e588":"code","57d0a9a1":"code","d9f638af":"code","562b6a9b":"code","169072af":"code","2571aae1":"code","15095f0e":"code","0c365b55":"code","8280abca":"code","b2a34bd5":"code","ef26d36c":"code","102a3f6c":"code","fab15458":"code","eeecb1a2":"code","dc65d9bc":"code","e682969b":"code","ec66f34a":"code","8b6c2246":"code","e560d1f3":"markdown","447ada42":"markdown","c18a2498":"markdown","e2880c18":"markdown","5a3baf08":"markdown","9042ec7c":"markdown","e3b33bec":"markdown","bf2a294b":"markdown","dff96684":"markdown","aa4c917c":"markdown"},"source":{"bb7a2b67":"import numpy as np\nimport pandas as pd\nfrom sklearn.metrics import f1_score, roc_auc_score, cohen_kappa_score, precision_score, recall_score, accuracy_score, confusion_matrix\nfrom keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout\nfrom keras.models import Sequential\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport cv2\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.models import Model, Sequential\nfrom keras.applications.xception import Xception\nfrom keras.applications import *\nimport matplotlib.pyplot as plt\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.pipeline import Pipeline\nfrom PIL import Image\nimport random\nimport os\nimport cv2\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom xgboost import XGBClassifier \nfrom keras.callbacks import EarlyStopping\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\nfrom tqdm import tqdm\nfrom sklearn.decomposition import PCA\n","f24389d6":"colon_aca = \"..\/input\/lung-and-colon-cancer-histopathological-images\/lung_colon_image_set\/colon_image_sets\/colon_aca\/\"\n\nplt.subplot(121)\nimg = cv2.imread(colon_aca + os.listdir(colon_aca)[0])\nplt.title('Colon ACA')\nplt.imshow(img)\n\nplt.subplot(122)\ncolon_n = \"..\/input\/lung-and-colon-cancer-histopathological-images\/lung_colon_image_set\/colon_image_sets\/colon_n\/\"\nimg = cv2.imread(colon_n + os.listdir(colon_n)[0])\nplt.title('Colon N')\nplt.imshow(img)\nplt.show()","d06602e2":"data_dir = \"..\/input\/lung-and-colon-cancer-histopathological-images\/lung_colon_image_set\/colon_image_sets\/\"\nSIZE_X = SIZE_Y = 128\n\ndatagen = tf.keras.preprocessing.image.ImageDataGenerator(validation_split = 0.3)\n\ntrain_it = datagen.flow_from_directory(data_dir,\n                                       class_mode = \"categorical\",\n                                       target_size = (SIZE_X,SIZE_Y),\n                                       color_mode=\"rgb\",\n                                       batch_size = 12, \n                                       shuffle = False,\n                                       subset='training',\n                                       seed = 42)\n\nvalidate_it = datagen.flow_from_directory(data_dir,\n                                       class_mode = \"categorical\",\n                                       target_size = (SIZE_X, SIZE_Y),\n                                       color_mode=\"rgb\",\n                                       batch_size = 12, \n                                       shuffle = False,\n                                       subset='validation',\n                                       seed = 42)","61736603":"def fit_model(model, train_it, validate_it, epochs = 10):\n    es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=5)\n    \n    for layer in model.layers:\n        layer.trainable = False\n    \n    flat1 = Flatten()(model.layers[-1].output)\n    output = Dense(len(train_it.class_indices), activation='softmax')(flat1)\n    \n    model = Model(inputs=model.inputs, outputs=output)\n    print(model.summary())\n    \n    model.compile(loss='categorical_crossentropy', optimizer ='adam', metrics=['accuracy'])\n\n    history = model.fit(train_it, validation_data=validate_it, epochs=epochs, verbose=1, callbacks=[es])\n    return model","c4efeaa6":"def get_accuracy_metrics(model, train_it, validate_it):\n    y_val = validate_it.classes\n    \n    val_pred_proba = model.predict(validate_it)\n    \n    val_pred_proba, predicted_proba, y_val, y_test = train_test_split(val_pred_proba, y_val, test_size = 0.5, shuffle = True)\n    \n    val_pred = np.argmax(val_pred_proba, axis = 1)\n    predicted = np.argmax(predicted_proba, axis = 1)\n    \n    print(\"Train accuracy Score------------>\")\n    print (\"{0:.3f}\".format(accuracy_score(train_it.classes, np.argmax(model.predict(train_it), axis = 1))*100), \"%\")\n    \n    print(\"Val accuracy Score--------->\")\n    print(\"{0:.3f}\".format(accuracy_score(y_val, val_pred)*100), \"%\")\n    \n    print(\"Test accuracy Score--------->\")\n    print(\"{0:.3f}\".format(accuracy_score(y_test, predicted)*100), \"%\")\n    \n    print(\"F1 Score--------------->\")\n    print(\"{0:.3f}\".format(f1_score(y_test, predicted, average = 'weighted')*100), \"%\")\n    \n    print(\"Cohen Kappa Score------------->\")\n    print(\"{0:.3f}\".format(cohen_kappa_score(y_test, predicted)*100), \"%\")\n    \n    \n    print(\"ROC AUC Score------------->\")\n    print(\"{0:.3f}\".format(roc_auc_score(y_test, predicted_proba[:, 1])*100), \"%\")\n    \n    print(\"Recall-------------->\")\n    print(\"{0:.3f}\".format(recall_score(y_test, predicted, average = 'weighted')*100), \"%\")\n    \n    print(\"Precision-------------->\")\n    print(\"{0:.3f}\".format(precision_score(y_test, predicted, average = 'weighted')*100), \"%\")\n    \n    cf_matrix_test = confusion_matrix(y_test, predicted)\n    cf_matrix_val = confusion_matrix(y_val, val_pred)\n    \n    plt.figure(figsize = (12, 6))\n    plt.subplot(121)\n    sns.heatmap(cf_matrix_val, annot=True, cmap='Blues')\n    plt.title(\"Val Confusion matrix\")\n    \n    plt.subplot(122)\n    sns.heatmap(cf_matrix_test, annot=True, cmap='Blues')\n    plt.title(\"Test Confusion matrix\")\n    \n    plt.show()\n","2f0ff9d3":"model = VGG16(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\nmodel = fit_model(model, train_it, validate_it)","06660115":"get_accuracy_metrics(model, train_it, validate_it)","faf4e588":"model = VGG19(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\nmodel = fit_model(model, train_it, validate_it)","57d0a9a1":"get_accuracy_metrics(model, train_it, validate_it)","d9f638af":"model = ResNet50(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\nmodel = fit_model(model, train_it, validate_it)","562b6a9b":"get_accuracy_metrics(model, train_it, validate_it)","169072af":"model = InceptionV3(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\nmodel = fit_model(model, train_it, validate_it)","2571aae1":"get_accuracy_metrics(model, train_it, validate_it)","15095f0e":"model = MobileNet(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\nmodel = fit_model(model, train_it, validate_it)","0c365b55":"get_accuracy_metrics(model, train_it, validate_it)","8280abca":"model = DenseNet169(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\nmodel = fit_model(model, train_it, validate_it)","b2a34bd5":"get_accuracy_metrics(model, train_it, validate_it)","ef26d36c":"model = DenseNet121(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\nmodel = fit_model(model, train_it, validate_it)","102a3f6c":"get_accuracy_metrics(model, train_it, validate_it)","fab15458":"model = InceptionResNetV2(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\nmodel = fit_model(model, train_it, validate_it)","eeecb1a2":"get_accuracy_metrics(model, train_it, validate_it)","dc65d9bc":"model = MobileNetV2(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\nmodel = fit_model(model, train_it, validate_it)","e682969b":"get_accuracy_metrics(model, train_it, validate_it)","ec66f34a":"model = ResNet101(include_top=False, input_shape=(SIZE_X, SIZE_Y, 3), weights='imagenet')\nmodel = fit_model(model, train_it, validate_it)","8b6c2246":"get_accuracy_metrics(model, train_it, validate_it)","e560d1f3":"# MobileNet V2","447ada42":"# InceptionResNet V2","c18a2498":"# DenseNet 169","e2880c18":"# ResNet 101","5a3baf08":"# Inception V3","9042ec7c":"# ResNet 50","e3b33bec":"# MobileNet","bf2a294b":"# VGG 16","dff96684":"# DenseNet 121","aa4c917c":"# VGG 19"}}