{"cell_type":{"a43f52d5":"code","f95a2d1c":"code","76e64688":"code","de9096b4":"code","8ec6833b":"code","f8d062cc":"code","285a151c":"code","2895575e":"code","04615097":"code","0e25e99b":"code","83afdd9d":"code","c029ba43":"code","878ddf1b":"code","469c0ef4":"markdown","4d0679a6":"markdown","bb1e19e0":"markdown","fca828b0":"markdown","17afb366":"markdown"},"source":{"a43f52d5":"import numpy as np \nimport pandas as pd \nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\ntrain = pd.read_csv(\"\/kaggle\/input\/store-sales-time-series-forecasting\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/store-sales-time-series-forecasting\/test.csv\")\noil_df = pd.read_csv(\"\/kaggle\/input\/store-sales-time-series-forecasting\/oil.csv\")\nholidays_events = pd.read_csv(\"\/kaggle\/input\/store-sales-time-series-forecasting\/holidays_events.csv\")\nstores = pd.read_csv(\"\/kaggle\/input\/store-sales-time-series-forecasting\/stores.csv\")\ntxn = pd.read_csv(\"\/kaggle\/input\/store-sales-time-series-forecasting\/transactions.csv\")\n\nprint (\"Training Data Shape: \", train.shape)\nprint (\"Testing Data Shape\", test.shape)\n\ntrain.head()","f95a2d1c":"## combine datasets\ntrain1 = train.merge(oil_df, on = 'date', how='left')\ntrain1 = train1.merge(holidays_events, on = 'date', how='left')\ntrain1 = train1.merge(stores, on = 'store_nbr', how='left')\ntrain1 = train1.merge(txn, on = ['date', 'store_nbr'], how='left')\ntrain1 = train1.rename(columns = {\"type_x\" : \"holiday_type\", \"type_y\" : \"store_type\"})\n\ntest1 = test.merge(oil_df, on = 'date', how='left')\ntest1 = test1.merge(holidays_events, on = 'date', how='left')\ntest1 = test1.merge(stores, on = 'store_nbr', how='left')\ntest1 = test1.merge(txn, on = ['date', 'store_nbr'], how='left')\ntest1 = test1.rename(columns = {\"type_x\" : \"holiday_type\", \"type_y\" : \"store_type\"})\n\ntrain1.head()","76e64688":"agg = train1.groupby('date').agg({\"sales\" : \"mean\"}).reset_index()\nfig = px.line(agg, x='date', y=\"sales\")\nfig.update_layout(title = \"Average Sales by Date\")\nfig.show()\n\nagg = train1.groupby('date').agg({\"transactions\" : \"mean\"}).reset_index()\nfig = px.line(agg, x='date', y=\"transactions\")\nfig.update_layout(title = \"Average Transactions by Date\")\nfig.show()","de9096b4":"agg = train1.groupby(['date', 'store_type']).agg({\"sales\" : \"mean\"}).reset_index()\nfig = px.line(agg, x='date', y=\"sales\", color='store_type')\nfig.update_layout(title = \"Average Sales by Date and Store Type\")\nfig.show()\n\nagg = train1.groupby(['date', 'store_type']).agg({\"transactions\" : \"mean\"}).reset_index()\nfig = px.line(agg, x='date', y=\"transactions\", color='store_type')\nfig.update_layout(title = \"Average Transactions by Date and Store Type\")\nfig.show()","8ec6833b":"agg = train1.groupby(['date', 'cluster']).agg({\"sales\" : \"mean\"}).reset_index()\nfig = px.line(agg, x='date', y=\"sales\", color='cluster')\nfig.update_layout(title = \"Average Sales by Date and Store Number\")\nfig.show()\n\n\nagg = train1.groupby(['date', 'cluster']).agg({\"transactions\" : \"mean\"}).reset_index()\nfig = px.line(agg, x='date', y=\"transactions\", color='cluster')\nfig.update_layout(title = \"Average Transactions by Date and Cluster\")\nfig.show()","f8d062cc":"def vbar(col):\n    temp = train1.groupby(col).agg({\"sales\" : \"mean\"}).reset_index()\n    temp = temp.sort_values('sales', ascending = False)\n    c = {\n        'x' : list(temp['sales'])[:15][::-1], \n        'y' : list(temp[col])[:15][::-1],\n        'title' : \"Average sales by \"+col\n    }\n    trace = go.Bar(y=[str(_) + \"    \" for _ in c['y']], x=c['x'], orientation=\"h\", marker=dict(color=\"#f77e90\"))\n    return trace \n\n    layout = go.Layout(title=c['title'], \n                           paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)',\n                           xaxis_title=\"\", yaxis_title=\"\", width=650)\n    fig = go.Figure([trace], layout=layout)\n    fig.update_xaxes(tickangle=45, tickfont=dict(color='crimson'))\n    fig.update_yaxes(tickangle=0, tickfont=dict(color='crimson'))\n    fig.show()\n    \ntrace1 = vbar('family') \ntrace2 = vbar('store_type') \ntrace3 = vbar('state') \ntrace4 = vbar('city') \n\ntitles = ['Store Family', 'Store Type', 'State', 'City']\ntitles = ['Top ' + _ + \" by Average Sales\" for _ in titles]\nfig = make_subplots(rows=2, cols=2, subplot_titles = titles)\n\nfig.add_trace(trace1, row=1, col=1)\nfig.add_trace(trace2, row=1, col=2)\nfig.add_trace(trace3, row=2, col=1)\nfig.add_trace(trace4, row=2, col=2)\n\nfig.update_layout(height=800, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', showlegend = False)\nfig.show()","285a151c":"trace1 = vbar('cluster') \ntrace2 = vbar('store_nbr') \n\ntitles = ['Cluster Number', 'Store Number']\ntitles = ['Top ' + _ + \" by Average Sales\" for _ in titles]\nfig = make_subplots(rows=1, cols=2, subplot_titles = titles)\n\nfig.add_trace(trace1, row=1, col=1)\nfig.add_trace(trace2, row=1, col=2)\n\nfig.update_layout(height=500, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', showlegend = False)\nfig.show()","2895575e":"def create_ts_features(df):\n    df['date'] = pd.to_datetime(df['date'])\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['quarter'] = df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['dayofmonth'] = df['date'].dt.day\n    return df\n    \ntrain1 = create_ts_features(train1)\ntest1 = create_ts_features(test1)\ntrain1.head()","04615097":"def hbar(col):\n    temp = train1.groupby(col).agg({\"sales\" : \"mean\"}).reset_index()\n    temp = temp.sort_values(col, ascending = False)\n    c = {\n        'y' : list(temp['sales']), \n        'x' : list(temp[col]),\n        'title' : \"Average sales by \"+col\n    }\n    trace = go.Bar(y=c['y'], x=c['x'], orientation=\"v\", marker=dict(color=\"#bbe070\"))\n    return trace \n\n    layout = go.Layout(title=c['title'], \n                           paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)',\n                           xaxis_title=\"\", yaxis_title=\"\", width=650)\n    fig = go.Figure([trace], layout=layout)\n    fig.update_xaxes(tickangle=45, tickfont=dict(color='crimson'))\n    fig.update_yaxes(tickangle=0, tickfont=dict(color='crimson'))\n    fig.show()\n    \ntrace1 = hbar('dayofweek') \ntrace2 = hbar('dayofmonth') \ntrace3 = hbar('dayofyear') \ntrace4 = hbar('month') \ntrace5 = hbar('quarter') \ntrace6 = hbar('year') \n\ntitles = ['Day of Week', 'Day of Month', 'Day of Year', 'Month', 'Quarter', 'Year']\ntitles = ['Avg Sales by ' + _ for _ in titles]\nfig = make_subplots(rows=3, cols=2, subplot_titles = titles)\n\nfig.add_trace(trace1, row=1, col=1)\nfig.add_trace(trace2, row=1, col=2)\nfig.add_trace(trace3, row=2, col=1)\nfig.add_trace(trace4, row=2, col=2)\nfig.add_trace(trace5, row=3, col=1)\nfig.add_trace(trace6, row=3, col=2)\n\nfig.update_layout(height=1200, paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)', showlegend = False)\nfig.show()","0e25e99b":"agg = train1.groupby([\"year\", \"month\"]).agg({\"sales\"  :\"mean\", \"transactions\" : \"mean\"}).reset_index()\nfig = px.box(agg, y=\"sales\", facet_col=\"month\", color=\"month\",\n             boxmode=\"overlay\", points='all')\nfig.update_layout(title = \"Average Sales Distribution by Store Type\")\nfig.show()","83afdd9d":"agg = train1.groupby([\"year\", \"store_type\"]).agg({\"sales\"  :\"mean\", \"transactions\" : \"mean\"}).reset_index()\nfig = px.box(agg, y=\"sales\", facet_col=\"store_type\", color=\"store_type\",\n             boxmode=\"overlay\", points='all')\nfig.update_layout(title = \"Average Sales Distribution by Store Type\")\nfig.show()","c029ba43":"train1['holiday_type'] = train1['holiday_type'].fillna(\"No Holiday\/Event\")\ntrain1['holiday_type'].value_counts()\n\ndef convert_to_size(x):\n    if x < 50:\n        return 6\n    elif x < 100:\n        return 10\n    elif x < 150:\n        return 15\n    elif x < 250:\n        return 18 \n    elif x < 300:\n        return 24 \n    elif x < 500:\n        return 30 \n    else:\n        return 40\n\ndef bubble(col1, col2):\n    vc = train1.groupby([col1, col2]).agg({\"sales\" : \"mean\"}).reset_index()\n    vc = vc.sort_values(col2)    \n    fig = px.scatter(vc, x=col1, y=col2, \n                     size='sales', color='sales', size_max=40)\n    fig.update_layout(title = \"Average Sales by \"+col1+\" and \" + col2)\n    fig.show()\n    \nbubble('month', 'holiday_type')\nbubble('month', 'store_type')","878ddf1b":"train1.to_csv(\"train_complete.csv\", index = False)\ntest1.to_csv(\"test_complete.csv\", index = False)","469c0ef4":"### 3. Exploratory Analysis \n\nLet's take a look at the time series patterns in the dataset such as Average Sales over time, average sales over time by store type, by store name etc.  ","4d0679a6":"Let's now look at various other columns and their related average sales ","bb1e19e0":"## Store Sales Forecasting -  Exploration Notebook\n\nIn this competition, the task is to predict the sales for the thousands of product families sold at Favorita stores located in Ecuador. The training data includes dates, store and product information, whether that item was being promoted, as well as the sales numbers. In this notebook, I have shared a started exploration \/ eda for the dataset. I will keep updating\n\n### 1. Load Dataset \n\nLet's first load the dataset files","fca828b0":"### 2. Combine Dataset files\n\nA number of supplement files are provided which contain addition features, we can combine them to our original training and test sets. ","17afb366":"### 4. Feature Engineering \n\nWe can create some additional features from the date column such as dayofweek, month, year etc. "}}