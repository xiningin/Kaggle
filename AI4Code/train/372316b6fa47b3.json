{"cell_type":{"29ce69a6":"code","121a7b5f":"code","6f366f55":"code","527ea8f7":"code","b581ac4a":"code","7d5a0834":"code","38217aaa":"code","021ab355":"code","030f51ab":"code","06144f11":"code","94ff983a":"code","026c7d2d":"code","6ca80ca7":"code","60033e20":"code","ede7abb7":"code","1b74a98b":"code","e38dd84c":"markdown","13ecdbca":"markdown","e532806a":"markdown","d2127158":"markdown","120ee9ac":"markdown","81ee9ec0":"markdown","413b3778":"markdown"},"source":{"29ce69a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","121a7b5f":"import torch\nimport torchvision\nfrom torchvision.io import read_image\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","6f366f55":"class JerseyNumberDataset(torch.utils.data.Dataset):\n    def __init__(self, annotations_file, img_dir, transform=None, target_transform=None):\n        self.img_labels = pd.read_csv(annotations_file)\n        self.img_dir = img_dir\n        self.transform = transform\n        self.target_transform = target_transform\n        self.labels = self.img_labels['label'].unique()\n    \n    def __len__(self):\n        return len(self.img_labels)\n    \n    def __getitem__(self, index):\n        img_path = os.path.join(self.img_dir, self.img_labels.iloc[index, 0])\n        image = read_image(img_path)\n        label = self.img_labels.iloc[index, 3]\n        if self.transform:\n            image = self.transform(image)\n            image = torchvision.transforms.functional.autocontrast(image)\n        if self.target_transform:\n            label = self.target_transform(label)\n        return image, label","527ea8f7":"data_transform = torchvision.transforms.Compose([\n    torchvision.transforms.ToPILImage(),\n    torchvision.transforms.Grayscale(num_output_channels=3),\n    torchvision.transforms.RandomCrop(64,padding=8,padding_mode='reflect'),\n    torchvision.transforms.RandomRotation(45),\n    torchvision.transforms.ToTensor()\n])","b581ac4a":"full_data = JerseyNumberDataset(\"..\/input\/nfl-player-numbers\/train_player_numbers.csv\",\n                            \"..\/input\/nfl-player-numbers\/train_player_numbers\",\n                               transform=data_transform)","7d5a0834":"print(full_data.labels)\nprint(full_data.labels.shape)","38217aaa":"train_size = int(0.8 * len(full_data))\ntest_size = len(full_data) - train_size\ntraining_data, testing_data = torch.utils.data.random_split(full_data, [train_size, test_size])\n\ntraining_dataloader = torch.utils.data.DataLoader(training_data, batch_size=64, shuffle=True)\ntesting_dataloader = torch.utils.data.DataLoader(testing_data, batch_size=64, shuffle=True)","021ab355":"train_features, train_labels = next(iter(training_dataloader))\nprint(f\"Feature batch shape: {train_features.size()}\")\nprint(f\"Labels batch shape: {train_labels.size()}\")\nimg = train_features[0].squeeze().permute(1,2,0)\nlabel = train_labels[0]\nplt.imshow(img, cmap=\"gray\")\nplt.show()\nprint(f\"Label: {label}\")","030f51ab":"class ConvNet(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = torch.nn.Conv2d(3, 6, 5)\n        self.pool = torch.nn.MaxPool2d(2,2)\n        self.conv2 = torch.nn.Conv2d(6, 16, 5)\n        self.fc1 = torch.nn.Linear(16 * 13 * 13, 512)\n        self.fc2 = torch.nn.Linear(512, 256)\n        self.fc3 = torch.nn.Linear(256, 100)\n    \n    def forward(self, x):\n        x = self.pool(torch.nn.functional.relu(self.conv1(x)))\n        x = self.pool(torch.nn.functional.relu(self.conv2(x)))\n        x = torch.flatten(x,1)\n        x = torch.nn.functional.relu(self.fc1(x))\n        x = torch.nn.functional.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\nnet = ConvNet()","06144f11":"criterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(net.parameters(), lr=0.001, momentum=0.9)","94ff983a":"net.to(device)\nfor epoch in range(2):\n    \n    running_loss = 0.0\n    for i, data in enumerate(training_dataloader, 0):\n        inputs, labels = data[0].to(device), data[1].to(device)\n        \n        optimizer.zero_grad()\n        \n        outputs = net(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        \n        running_loss += loss.item()\n        if i % 50 == 49:\n            print('[%d, %5d] loss: %.3f' %(epoch + 1, i + 1, running_loss \/ 50))\n            running_loss = 0.0\nprint('Finished Training')","026c7d2d":"PATH = '.\/jersey_netV2.pth'\ntorch.save(net.state_dict(), PATH)","6ca80ca7":"def imshow(img):\n    img = img \/ 2 + 0.5     # unnormalize\n    npimg = img.numpy()\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n    plt.show()","60033e20":"dataiter = iter(testing_dataloader)\nimages, labels = dataiter.next()\nimshow(torchvision.utils.make_grid(images))\nprint('GroundTruth: ', ' '.join('%5s' % labels[j] for j in range(64)))","ede7abb7":"outputs = net(images)\n_, predicted = torch.max(outputs, 1)\n\nprint('Predicted: ', ' '.join('%5s' % predicted[j]\n                              for j in range(64)))","1b74a98b":"correct = 0\ntotal = 0\n# since we're not training, we don't need to calculate the gradients for our outputs\nwith torch.no_grad():\n    for data in testing_dataloader:\n        images, labels = data\n        # calculate outputs by running images through the network\n        outputs = net(images)\n        # the class with the highest energy is what we choose as prediction\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\nprint('Accuracy of the network on the 10000 test images: %d %%' % (\n    100 * correct \/ total))","e38dd84c":"Let's go ahead and make the model. Since we're working with 64 pixel x 64 pixel x 3 channel images, let's just skip straight to a convolutional net.","13ecdbca":"Taking a look at what these input images and labels look like. Run this code as many times as you want to look at the samples that will be presented to the model.","e532806a":"Let's go ahead and do our pytorch imports.","d2127158":"Let's make a Dataset for our image data. The annotation csv is in a very standard format.","120ee9ac":"Wow. These images are pretty bad. Many of them are unrecognizable blurs, plenty more have the numbers obscured or otherwise hidden from view, and a fiew have multiple jersey number in the same image. I do not have the highest of hopes.","81ee9ec0":"Initialize the full dataset.","413b3778":"Use a random 80\/20 split for the training and testing datasets."}}