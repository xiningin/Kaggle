{"cell_type":{"1f643ffc":"code","2a7a561d":"code","d1d0bfaf":"code","a3ea6a02":"code","2cad8d32":"code","07d97b68":"code","13fdb705":"code","389273f7":"code","451cd7c0":"code","b28c5b22":"code","69aac68b":"code","6a462e44":"code","1895a6ad":"code","8d5a466b":"markdown"},"source":{"1f643ffc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2a7a561d":"#importing mining tools\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pylab \nimport scipy.stats as stats\nimport warnings\nwarnings.filterwarnings('ignore')","d1d0bfaf":"# Reading the input files\ntest_data = pd.read_csv(\"..\/input\/test.csv\")\ntrain_data = pd.read_csv(\"..\/input\/train.csv\")","a3ea6a02":"#reading the data description file\nwith open('..\/input\/data_description.txt', 'r') as f2:\n    data = f2.read()\n    print(data[0:1000])","2cad8d32":"# mining the GOLDs from training data\n\nprint(\"Training data size:\",train_data.size)\nprint(\"Total Columns: \",train_data.columns.size)\nprint(\"Target:\",\"SalePrice\")\nprint(\"Columns and data types:\\n\",train_data.dtypes[0:20])","07d97b68":"#Distribution of the SalePrice data\nx = train_data['SalePrice']\ny = np.linspace(0, 10, len(x))\nplt.figure(figsize=(16,10))\nplt.xlabel(\"SalePrice\",labelpad=10)\nplt.plot(x, y, '+')","13fdb705":"#Distribution of saleprice\nplt.figure(figsize=(12,8))\nsns.kdeplot(train_data.SalePrice,shade=True)","389273f7":"#plotted aggainst Unique SalePrice and It's Count\nrng = np.random.RandomState(0)\nx = train_data['SalePrice'].value_counts().to_frame().index #unique SalePrice\ny = train_data['SalePrice'].value_counts().to_frame()[\"SalePrice\"] #counts of the each unique Sales Price\ncolors = rng.rand(len(x))\nsizes = 1000 * rng.rand(len(x))\nplt.figure(figsize=(18,10))\nplt.scatter(x, y, c=colors, s=sizes, alpha=0.3,cmap='viridis')\nplt.colorbar();  # show color scale","451cd7c0":"#probability plot of the SalePrice data\n#Per Quantile data distribution\nplt.figure(figsize=(20,6))\nstats.probplot(train_data[\"SalePrice\"], dist=\"norm\", plot=plt)\nplt.show()","b28c5b22":"#Looking at SalePrice data\n# train_data[['SalePrice']]\nprint(\"Mean: \",train_data[\"SalePrice\"].mean(),\"\\nMedian: \",train_data[\"SalePrice\"].median(),\"\\nMode: \",train_data[\"SalePrice\"].mode())\nplt.figure(figsize=(20,6))\nax = sns.boxplot(x=train_data[\"SalePrice\"])","69aac68b":"#Outliers \ntrain_data[train_data[\"SalePrice\"] > 600000]","6a462e44":"#correlation between feature\ncorr_data = train_data.corr()\ncorr_data.head()","1895a6ad":"#Dependency of SalePrice on remaining features\/columns\nsales_corr = corr_data.iloc[-1].to_frame()[0:-1].sort_values(by='SalePrice',ascending=False)\nsales_corr.head()","8d5a466b":"If you see the above plot, 80 - 90 percentage of the data is distributed in the range 70000 - 250000\ntwo rightmost data point clearly looks like the outlier."}}