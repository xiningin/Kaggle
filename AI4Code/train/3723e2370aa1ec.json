{"cell_type":{"9caa6847":"code","fad95b94":"code","dacdf118":"code","b661adc5":"code","5c53b3da":"code","d9b1fc8a":"code","de7c5a85":"code","e80472a7":"code","ba295f25":"code","98191ac5":"code","1f632c41":"code","47f8f26d":"code","0aeefdd4":"code","28341d71":"code","53c0b904":"code","964cca26":"code","81d80544":"code","2a66f9d7":"code","2464e8c3":"code","f4b16349":"code","a9244423":"code","12a5042a":"code","67932799":"code","84f9ac8b":"code","6e096ab3":"code","1a4c242c":"code","c23a59c8":"code","67082b41":"code","8c84e9a0":"code","10489df1":"code","7cc0bab0":"code","216895f3":"code","97eb7cb2":"code","23feeb83":"code","b0e2ffff":"code","e266677f":"code","31d4f724":"code","3e85e7d3":"code","4c15b891":"code","6e0df26c":"code","ece07064":"code","33ae3bd7":"code","91cf2265":"code","64f1d793":"code","e9c3cf8b":"code","8616073c":"code","eaf63bcc":"code","4fda5ff2":"code","1191f2b3":"code","047245cb":"code","0a0a7c85":"code","83ecebb8":"code","3ac0888d":"code","3de7d64f":"code","71903664":"code","b7886e6d":"code","aee0ec1b":"code","0bf6751c":"code","beedce2e":"code","c3580dbc":"code","a1e851ea":"code","a6af1b3d":"code","c0d34b70":"code","a7e13a48":"code","61d8a0c1":"code","8113667f":"code","db1b8320":"code","bb4013bd":"markdown","a19669b3":"markdown","8ad79891":"markdown","9b7fc671":"markdown","623caa47":"markdown","8efd57e2":"markdown","ee1dfbae":"markdown","5226644e":"markdown","a78de931":"markdown","f30df96a":"markdown"},"source":{"9caa6847":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport gc\nfrom itertools import product\nfrom math import ceil\nimport copy\nimport os\nfrom IPython.display import clear_output\nimport nltk\nfrom sklearn.feature_extraction import text\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA, TruncatedSVD, NMF\nimport lightgbm as lgb\nfrom xgboost import XGBRegressor\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, Lars, ElasticNet","fad95b94":"train = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\ntest = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/test.csv\")\nitems = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nitem_categories = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")\nshops = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/shops.csv\")","dacdf118":"train['sales'] = train['item_cnt_day']*train['item_price']\nprint(train.shape)","b661adc5":"print(train.nunique())","5c53b3da":"train.head()","d9b1fc8a":"shops","de7c5a85":"train.loc[train.shop_id == 0, \"shop_id\"] = 57\ntest.loc[test.shop_id == 0 , \"shop_id\"] = 57\ntrain.loc[train.shop_id == 1, \"shop_id\"] = 58\ntest.loc[test.shop_id == 1 , \"shop_id\"] = 58\ntrain.loc[train.shop_id == 11, \"shop_id\"] = 10\ntest.loc[test.shop_id == 11, \"shop_id\"] = 10\ntrain.loc[train.shop_id == 40, \"shop_id\"] = 39\ntest.loc[test.shop_id == 40, \"shop_id\"] = 39","e80472a7":"plt.figure(figsize = (10,10))\nsns.boxplot(x= train.item_cnt_day)\nplt.title(\"BoxPlot\")\nplt.show()","ba295f25":"plt.figure(figsize = (10,10))\nsns.boxplot(x = train.item_price)\nplt.title(\"BoxPlot\")\nplt.show()","98191ac5":"train = train[(train.item_price < 100000 )& (train.item_cnt_day < 1000)]","1f632c41":"plt.figure(figsize = (10,10))\nsns.boxplot(x= train.item_cnt_day)\nplt.title(\"BoxPlot\")\nplt.show()\n","47f8f26d":"plt.figure(figsize = (10,10) )\nsns.boxplot( x = train.item_price)\nplt.title(\"BoxPlot\")\nplt.show()","0aeefdd4":"train = train[train.item_price > 0].reset_index(drop = True)\ntrain.loc[train.item_cnt_day < 1, \"item_cnt_day\"] = 0","28341d71":"shops.loc[shops.shop_name == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\nshops['city'] = shops['shop_name'].str.split(' ').map(lambda x: x[0])\nshops.loc[shops.city == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\nshops['city_code'] = LabelEncoder().fit_transform(shops['city'])\nshops = shops[['shop_id','city_code']]\nitem_categories['split'] = item_categories['item_category_name'].str.split('-')\nitem_categories['type'] = item_categories['split'].map(lambda x: x[0].strip())\nitem_categories['type_code'] = LabelEncoder().fit_transform(item_categories['type'])\nitem_categories['subtype'] = item_categories['split'].map(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\nitem_categories['subtype_code'] = LabelEncoder().fit_transform(item_categories['subtype'])\nitem_categories = item_categories[['item_category_id','type_code', 'subtype_code']]\nitems.drop(['item_name'], axis=1, inplace=True)","53c0b904":"item_categories.head()","964cca26":"items.head()","81d80544":"shops.head()","2a66f9d7":"items_1 = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nitem_categories_1 = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")\nshops_1 = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/shops.csv\")","2464e8c3":"nb_features= 10\ntfidf = text.TfidfVectorizer(max_features=nb_features)\nitems_1['item_name_len'] = items_1['item_name'].map(len)  \nitems_1['item_name_wc'] = items_1['item_name'].map(lambda x: len(str(x).split(' ')))\ntxtFeatures = pd.DataFrame(tfidf.fit_transform(items_1['item_name']).toarray())\ncols = txtFeatures.columns\nfor i in range(nb_features):\n    items_1['item_name_tfidf_' + str(i)] = txtFeatures[cols[i]]\nitems_1.head()","f4b16349":"tfidf = text.TfidfVectorizer(max_features = 10)\nshops_1['shop_name_len'] = shops_1['shop_name'].map(len)\nshops_1['shop_name_wc'] = shops_1['shop_name'].map(lambda x: len(str(x).split(' ')))\ntxtFeatures = pd.DataFrame(tfidf.fit_transform(shops_1['shop_name']).toarray())\ncols = txtFeatures.columns\nfor i in range(10):\n    shops_1['shop_name_tfidf_' + str(i)] = txtFeatures[cols[i]]\nshops_1.head()","a9244423":"train.drop_duplicates(inplace=True)","12a5042a":"train1 = []\ncols = ['date_block_num','shop_id','item_id']\nfor block_num in range(34):\n    temp = train[train.date_block_num==block_num]\n    train1.append(np.array(list(product([block_num], temp['shop_id'].unique(), temp['item_id'].unique()))))\ntrain1 = pd.DataFrame(np.vstack(train1), columns=cols)\ntrain1['date_block_num'] = train1['date_block_num'].astype(np.int8)\ntrain1['shop_id'] = train1['shop_id'].astype(np.int8)\ntrain1['item_id'] = train1['item_id'].astype(np.int16)\ntrain1.sort_values(cols,inplace=True);\ntrain1.head()","67932799":"temp = train.groupby(['date_block_num','shop_id','item_id']).agg({'item_cnt_day': ['sum']})\ntemp.columns = ['item_cnt_month']\ntemp.reset_index(inplace=True)\ntrain1 = pd.merge(train1, temp, on=cols, how='left')\ntrain1['item_cnt_month'] = (train1['item_cnt_month'].fillna(0).clip(0,20).astype(np.float16))\ntrain1.head()","84f9ac8b":"test['date_block_num'] = 34\ntest['date_block_num'] = test['date_block_num'].astype(np.int8)\ntest['shop_id'] = test['shop_id'].astype(np.int8)\ntest['item_id'] = test['item_id'].astype(np.int16)\ntrain2 = pd.concat([train1, test], ignore_index=True, sort=False, keys=cols)\ntrain2.fillna(0,inplace=True)\ntrain2.drop([\"ID\"], inplace = True, axis =1)\ntrain2.tail()","6e096ab3":"def lag_feature(df, lags, col):\n    tmp = df[['date_block_num','shop_id','item_id', col]]\n    for i in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id','item_id', col+'_lag_'+str(i)]\n        shifted['date_block_num'] += i\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n    return df","1a4c242c":"train3 = pd.merge(train2, shops, on=['shop_id'], how='left')\ntrain3 = pd.merge(train3, items, on=['item_id'], how='left')\ntrain3 = pd.merge(train3, item_categories, on=['item_category_id'], how='left')","c23a59c8":"########## 1. Create 'date_avg_item_cnt'\ntemp = train3.groupby(['date_block_num']).agg({'item_cnt_month': ['mean']})\ntemp.columns = ['date_avg_item_cnt']          \ntemp.reset_index(inplace=True)\ntrain3 = pd.merge(train3, temp, on=['date_block_num'], how='left')\ntrain3 = lag_feature(train3, [1], 'date_avg_item_cnt')\ntrain3.drop(['date_avg_item_cnt'], axis=1, inplace=True)","67082b41":"########## 2. Create 'date_item_avg_item_cnt'\ntemp = train3.groupby(['date_block_num', 'item_id']).agg({'item_cnt_month': ['mean']})\ntemp.columns = ['date_item_avg_item_cnt']     ###\ntemp.reset_index(inplace=True)\ntrain3 = pd.merge(train3, temp, on=['date_block_num','item_id'], how='left')\ntrain3 = lag_feature(train3, [1, 2, 3], 'date_item_avg_item_cnt')\ntrain3.drop(['date_item_avg_item_cnt'], axis=1, inplace=True)\n","8c84e9a0":"########## 3. Create 'date_shop_avg_item_cnt'\ntemp = train3.groupby(['date_block_num', 'shop_id']).agg({'item_cnt_month': ['mean']})\ntemp.columns = ['date_shop_avg_item_cnt']     ###\ntemp.reset_index(inplace=True)\ntrain3 = pd.merge(train3, temp, on=['date_block_num','shop_id'], how='left')\ntrain3 = lag_feature(train3, [1, 2, 3], 'date_shop_avg_item_cnt')\ntrain3.drop(['date_shop_avg_item_cnt'], axis=1, inplace=True)","10489df1":"########## 4. Create 'date_cat_avg_item_cnt'\ntemp = train3.groupby(['date_block_num', 'item_category_id']).agg({'item_cnt_month': ['mean']})\ntemp.columns = ['date_cat_avg_item_cnt']      ###\ntemp.reset_index(inplace=True)\ntrain3 = pd.merge(train3, temp, on=['date_block_num','item_category_id'], how='left')\ntrain3 = lag_feature(train3, [1], 'date_cat_avg_item_cnt')\ntrain3.drop(['date_cat_avg_item_cnt'], axis=1, inplace=True)","7cc0bab0":"########## 5. Create 'date_shop_cat_avg_item_cnt'\ntemp = train3.groupby(['date_block_num', 'shop_id', 'item_category_id']).agg({'item_cnt_month': ['mean']})\ntemp.columns = ['date_shop_cat_avg_item_cnt']    ###\ntemp.reset_index(inplace=True)\ntrain3 = pd.merge(train3, temp, on=['date_block_num', 'shop_id', 'item_category_id'], how='left')\ntrain3 = lag_feature(train3, [1], 'date_shop_cat_avg_item_cnt')\ntrain3.drop(['date_shop_cat_avg_item_cnt'], axis=1, inplace=True)","216895f3":"########## 6. Create 'date_shop_type_avg_item_cnt'\ntemp = train3.groupby(['date_block_num', 'shop_id', 'type_code']).agg({'item_cnt_month': ['mean']})\ntemp.columns = ['date_shop_type_avg_item_cnt']    ###\ntemp.reset_index(inplace=True)\ntrain3 = pd.merge(train3, temp, on=['date_block_num', 'shop_id', 'type_code'], how='left')\ntrain3 = lag_feature(train3, [1], 'date_shop_type_avg_item_cnt')\ntrain3.drop(['date_shop_type_avg_item_cnt'], axis=1, inplace=True)","97eb7cb2":"########## 7. Create 'date_type_avg_item_cnt'\ntemp = train3.groupby(['date_block_num', 'type_code']).agg({'item_cnt_month': ['mean']})\ntemp.columns = ['date_type_avg_item_cnt']     ###\ntemp.reset_index(inplace=True)\ntrain3 = pd.merge(train3, temp, on=['date_block_num', 'type_code'], how='left')\ntrain3 = lag_feature(train3, [1], 'date_type_avg_item_cnt')\ntrain3.drop(['date_type_avg_item_cnt'], axis=1, inplace=True)\n","23feeb83":"########## 8. Create 'date_city_avg_item_cnt'\ntemp = train3.groupby(['date_block_num', 'city_code']).agg({'item_cnt_month': ['mean']})\ntemp.columns = ['date_city_avg_item_cnt']     ###\ntemp.reset_index(inplace=True)\ntrain3 = pd.merge(train3, temp, on=['date_block_num', 'city_code'], how='left')\ntrain3 = lag_feature(train3, [1], 'date_city_avg_item_cnt')\ntrain3.drop(['date_city_avg_item_cnt'], axis=1, inplace=True)","b0e2ffff":"########## 9. Create 'date_shop_subtype_avg_item_cnt'\ntemp = train3.groupby(['date_block_num', 'shop_id', 'subtype_code']).agg({'item_cnt_month': ['mean']})\ntemp.columns = ['date_shop_subtype_avg_item_cnt']   ###\ntemp.reset_index(inplace=True)\ntrain3 = pd.merge(train3, temp, on=['date_block_num', 'shop_id', 'subtype_code'], how='left')\ntrain3 = lag_feature(train3, [1], 'date_shop_subtype_avg_item_cnt')\ntrain3.drop(['date_shop_subtype_avg_item_cnt'], axis=1, inplace=True)","e266677f":"########## 10. Create 'date_item_city_avg_item_cnt'\ntemp = train3.groupby(['date_block_num', 'item_id', 'city_code']).agg({'item_cnt_month': ['mean']})\ntemp.columns = ['date_item_city_avg_item_cnt']     ###\ntemp.reset_index(inplace=True)\ntrain3 = pd.merge(train3, temp, on=['date_block_num', 'item_id', 'city_code'], how='left')\ntrain3 = lag_feature(train3, [1], 'date_item_city_avg_item_cnt')\ntrain3.drop(['date_item_city_avg_item_cnt'], axis=1, inplace=True)","31d4f724":"########## 11. Create 'date_subtype_avg_item_cnt'\ntemp = train3.groupby(['date_block_num', 'subtype_code']).agg({'item_cnt_month': ['mean']})\ntemp.columns = ['date_subtype_avg_item_cnt']     ###\ntemp.reset_index(inplace=True)\ntrain3 = pd.merge(train3, temp, on=['date_block_num', 'subtype_code'], how='left')\ntrain3 = lag_feature(train3, [1], 'date_subtype_avg_item_cnt')\ntrain3.drop(['date_subtype_avg_item_cnt'], axis=1, inplace=True)\ntrain3.head()","3e85e7d3":"def select_trend(row):\n    for i in lags:\n        if row['delta_price_lag_'+str(i)]:\n            return row['delta_price_lag_'+str(i)]\n    return 0","4c15b891":"temp = train.groupby(['item_id']).agg({'item_price': ['mean']})\ntemp.columns = ['item_avg_item_price']\ntemp.reset_index(inplace=True)\ntrain4 = pd.merge(train3, temp, on=['item_id'], how='left')\ntemp = train.groupby(['date_block_num','item_id']).agg({'item_price': ['mean']})\ntemp.columns = ['date_item_avg_item_price']\ntemp.reset_index(inplace=True)\ntrain4 = pd.merge(train4, temp, on=['date_block_num','item_id'], how='left')\nlags = [1,2,3]\ntrain4 = lag_feature(train4, lags, 'date_item_avg_item_price')\nfor i in lags:\n    train4['delta_price_lag_'+str(i)] = \\\n    (train4['date_item_avg_item_price_lag_'+str(i)] - train4['item_avg_item_price']) \/ train4['item_avg_item_price']\n    \ntrain4['delta_price_lag'] = train4.apply(select_trend, axis=1)\ntrain4['delta_price_lag'].fillna(0, inplace=True)\ndropped_cols = ['item_avg_item_price', 'date_item_avg_item_price']\nfor i in lags:\n    dropped_cols += ['date_item_avg_item_price_lag_'+str(i)]\n    dropped_cols += ['delta_price_lag_'+str(i)]\ntrain4.drop(dropped_cols, axis=1, inplace=True)","6e0df26c":"temp = train.groupby(['date_block_num','shop_id']).agg({'sales': ['sum']})\ntemp.columns = ['date_shop_revenue']\ntemp.reset_index(inplace=True)\ntrain4 = pd.merge(train4, temp, on=['date_block_num','shop_id'], how='left')\ntemp = train4.groupby(['shop_id']).agg({'date_shop_revenue': ['mean']})\ntemp.columns = ['shop_avg_revenue']\ntemp.reset_index(inplace=True)\ntrain4 = pd.merge(train4, temp, on=['shop_id'], how='left')\ntrain4['delta_revenue'] = (train4['date_shop_revenue'] - train4['shop_avg_revenue']) \/ train4['shop_avg_revenue']\ntrain4 = lag_feature(train4, [1], 'delta_revenue')\ntrain4.drop(['date_shop_revenue','shop_avg_revenue','delta_revenue'], axis=1, inplace=True)","ece07064":"df = train4[train4['date_block_num'] > 10]\nprint(df.shape)","33ae3bd7":"df = pd.merge(df, items_1, how='left', on='item_id')\ndf = pd.merge(df, shops_1, how='left', on='shop_id')\ndf.head()","91cf2265":"df.drop(['item_name', 'item_name_len', 'item_name_wc', 'item_category_id_y',\n         'shop_name', 'shop_name_len', 'shop_name_wc'], axis=1, inplace=True)","64f1d793":"del train1, train2, train3, train4, temp\ngc.collect()","e9c3cf8b":"cat_features = ['shop_id', 'item_id', 'city_code', 'item_category_id_x', 'type_code', 'subtype_code']","8616073c":"cv = KFold(n_splits= 3, shuffle=False)\nnew_features = []\n\ncheck = False\nfor train_idx, valid_idx in cv.split(df):\n    \n    # Train\/validation split\n    X_train, X_valid = df.iloc[train_idx,:], df.iloc[valid_idx,:]\n    \n    # Mean encoding\n    for col in cat_features:\n        means = X_valid[col].map(X_train.groupby(col).item_cnt_month.mean())\n        col_new = col+'_target_enc'\n        X_valid[col_new] = means\n        \n        # Results\n        df.loc[valid_idx, col_new] = X_valid\n        \n        # Store new columns\n        if check==False:\n            new_features.append(col_new)\n    \n    check = True","eaf63bcc":"new_features = ['shop_id_target_enc', 'item_id_target_enc', 'city_code_target_enc',\n                'item_category_id_x_target_enc', 'type_code_target_enc', 'subtype_code_target_enc']\nprior = np.mean(df['item_cnt_month'].values)\ndf[new_features] = df[new_features].fillna(prior)\ndf.head()","4fda5ff2":"tfidf_features = ['item_name_tfidf_1', 'item_name_tfidf_2',\n                  'item_name_tfidf_3', 'item_name_tfidf_4', 'item_name_tfidf_5',\n                  'shop_name_tfidf_1','shop_name_tfidf_2',  'shop_name_tfidf_3', \n                  'shop_name_tfidf_4','shop_name_tfidf_5']\n\nXtrain = df[df['date_block_num']<34][tfidf_features]\nXtest = df[df['date_block_num']==34][tfidf_features]","1191f2b3":"NMF_1 = NMF(n_components= 5, init=None, solver='cd', beta_loss='frobenius', tol=0.0001, max_iter= 50)\nNMF_1.fit(df[tfidf_features]);","047245cb":"Xtrain = NMF_1.transform(Xtrain)\nXtest = NMF_1.transform(Xtest)","0a0a7c85":"df.drop(tfidf_features, axis=1, inplace=True)","83ecebb8":"tfidf_reduced_df = pd.concat([pd.DataFrame(Xtrain), pd.DataFrame(Xtest)], axis=0)\ntfidf_reduced_df.columns = ['tfidf_interaction_1', 'tfidf_interaction_2', 'tfidf_interaction_3',\n                            'tfidf_interaction_4', 'tfidf_interaction_5']\ntfidf_reduced_df.head()","3ac0888d":"for col in tfidf_reduced_df.columns:\n    print(col)\n    test1 = tfidf_reduced_df[col].values\n    df[col] = test1","3de7d64f":"df.head()","71903664":"df.isnull().sum()","b7886e6d":"X_train = df[df.date_block_num < 33].drop(['item_cnt_month'], axis=1)\nY_train = df[df.date_block_num < 33]['item_cnt_month']\nX_valid = df[df.date_block_num == 33].drop(['item_cnt_month'], axis=1)\nY_valid = df[df.date_block_num == 33]['item_cnt_month']\nX_test = df[df.date_block_num == 34].drop(['item_cnt_month'], axis=1)","aee0ec1b":"del df\ngc.collect();","0bf6751c":"X_test.shape","beedce2e":"lgb_train = lgb.Dataset(X_train, Y_train)\nlgb_valid = lgb.Dataset(X_valid, Y_valid)\n\nparams = {\n    'boosting_type': 'dart',\n    'metric': 'l2_root', # RMSE\n    'verbose': 1,\n    'seed': 0,\n    'max_depth': 8,\n    'learning_rate': 0.1,\n    'reg_lambda': 2.0,\n    'reg_alpha': 2.0,\n    'subsample': 0.7,\n    'num_leaves': 20,\n    'feature_fraction': 0.8,\n    'drop_rate': 0.2\n}\n\nmodel_lgbm = lgb.train(params, lgb_train, num_boost_round=1000, valid_sets=lgb_valid,\n                       early_stopping_rounds=200, categorical_feature=cat_features,\n                       verbose_eval=50)","c3580dbc":"print(np.sqrt(mean_squared_error(Y_valid, model_lgbm.predict(X_valid))))","a1e851ea":"lgb.plot_importance(model_lgbm, max_num_features=15, figsize=(6,6), title='Feature importance (LightGBM)')\nplt.show()","a6af1b3d":"from sklearn.preprocessing import StandardScaler","c0d34b70":"scaler = StandardScaler().fit(X_train)\nX_train_std = scaler.transform(X_train)\nX_valid_std = scaler.transform(X_valid)","a7e13a48":"from sklearn.impute import SimpleImputer","61d8a0c1":"del Xtrain, Xtest, tfidf_reduced_df\ngc.collect()","8113667f":"Y_test_lgbm = model_lgbm.predict(X_test).clip(0, 20)","db1b8320":"temp = pd.DataFrame({'ID': test.index, 'item_cnt_month': Y_test_lgbm})\ntemp.to_csv('submission1.csv', index=False)","bb4013bd":"# Removing Outliers","a19669b3":"# Lagged Features","8ad79891":"# Advanced Feature Engineering","9b7fc671":"# Final","623caa47":"# Time series trend features","8efd57e2":"# Starting Point(Data Engineering)","ee1dfbae":"# Extracting categorical feature","5226644e":"**Few Changes made, the best score with previous version was 0.96**","a78de931":"# TF-IDF","f30df96a":"# Model Fitting"}}