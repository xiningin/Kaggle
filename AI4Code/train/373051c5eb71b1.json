{"cell_type":{"feb52f37":"code","5a391954":"code","30a01a6c":"code","1cf1bce8":"code","7d9b3d49":"code","d57d4b4e":"code","e8153fba":"code","3ee9dafd":"code","d7b1ba50":"code","3b1e7142":"code","9d53757a":"code","77913f15":"code","f87cc505":"code","eca8858c":"code","3a56b6d7":"code","5c6bf327":"code","65f852fd":"code","d0791c68":"code","7c25a0dc":"code","11263149":"code","891574d8":"code","f3426014":"code","5498d508":"markdown","fd594ed7":"markdown","52ce02fc":"markdown"},"source":{"feb52f37":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a391954":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use(\"seaborn-paper\")","30a01a6c":"# read data\nitems = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/items.csv')\nsales_train = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nitem_categories = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\ntest = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/test.csv')\nshops = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/shops.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')","1cf1bce8":"# merge sales_train and items[['item_id','item_category_id']] on 'item_id'\nsales_train = sales_train.merge(items[['item_id','item_category_id']], on='item_id', how='left')\n\n# convert to datetime format\nsales_train['date'] = pd.to_datetime(sales_train['date'], infer_datetime_format=True)\n\nsales_train.head()","7d9b3d49":"# merge test and items[['item_id','item_category_id']] on item_id\ntest = test.merge(items[['item_id','item_category_id']], on='item_id',how='left')\ntest.head()","d57d4b4e":"# count by item_id\nsales_train['item_id'].value_counts().describe().plot(kind='box',figsize=(5,5))\nplt.title('Item counts distribution')","e8153fba":"# distribution of item price\nsales_train['item_price'].plot(figsize=(15,10))\nplt.title(\"Distribution of price\")","3ee9dafd":"# check the outlier which has price higher than 100,000\nitem_id = int(sales_train.loc[sales_train['item_price'] > 100000].item_id.values)\nsales_train.loc[sales_train['item_id'] == item_id]","d7b1ba50":"# check if the test dataset has the same outlier item_id \ntest.loc[test['item_id'] == item_id].any()","3b1e7142":"# check the price range of the items under the same category as the outlier\nitem_cat_id = int(sales_train.loc[sales_train['item_price'] > 100000].item_category_id.values)\nsales_train.loc[sales_train['item_category_id'] == item_cat_id].item_price.plot(kind='box', figsize=(5,6))\nplt.title(\"Price of items under the same category\")\nplt.ylabel(\"price\")","9d53757a":"# remove outlier\nsales_train = sales_train.loc[sales_train.item_price < 100000].copy()","77913f15":"# group data by item_id\ngrouped = sales_train[['item_price','date','item_id','shop_id','item_cnt_day']].set_index('item_id').groupby(level='item_id')","f87cc505":"# check the variance of the price for each item_id\nprice_var = grouped['item_price'].var().sort_values()\nprice_var = (price_var.dropna()\n             .reset_index()\n             .rename(columns={'item_price':'item_price_var'})\n             .sort_values(by=['item_price_var','item_id'])\n             .reset_index(drop=True)\n             .copy()\n            )\nprice_var.iloc[-5:]","eca8858c":"# the distribution of the variance of the item price\nax = plt.figure(figsize=(15,10)).add_subplot(1,1,1)\nlog_price_var = price_var['item_price_var'].apply(lambda x: np.log(x) if x > 0 else -10) # -10 is a sentinel for the 0 variance\nsns.distplot(log_price_var,bins=100)\nprops = {\n    'title':'Distribution of log(item_price_var)',\n    'xlabel':'log(item_price_var)',\n    'ylabel':'% of total',\n}\nax.set(**props)\n#plt.title(\"Distribution of log(item_price_var)\")\n#plt.xlabel(\"log(item_price_var)\")\n#plt.ylabel(\"% of total\")","3a56b6d7":"# group by item_category\ngrouped_cat = sales_train.groupby(sales_train['item_category_id'])","5c6bf327":"grouped_cat['item_id'].nunique().plot(figsize=(15,10), kind='barh')\nplt.title(\"Count of unique items in each item category\")","65f852fd":"# distribution of sales by item_category\ngrouped_cat['item_cnt_day'].sum().plot(figsize=(15,10))\nplt.title(\"Sales by item category\")\nplt.ylabel(\"Units\")","d0791c68":"# comparing distribution of number of unique items and sales in each category\n# normalize the number of unique items in each category to sum to 1\nnunique_cat = grouped_cat['item_id'].nunique()\nnunique_pct = nunique_cat.div(nunique_cat.sum(), axis=0)\n\n# normalize the sales to sum to 1\nsales_cat = grouped_cat['item_cnt_day'].sum()\nsales_pct = sales_cat.div(sales_cat.sum(), axis=0)\n\n# plot\nplt.figure(figsize=(15,10))\nplt.plot(nunique_pct, label=\"nunique_pct\")\nplt.plot(sales_pct, label=\"sales_pct\")\nplt.fill_between(np.arange(len(sales_pct)), sales_pct, alpha=0.5, color='orange')\nplt.legend(loc=\"best\")\nplt.title(\"Comparison distribution of sales and number of unique items in each category\")","7c25a0dc":"# item price per item category\ngrouped_cat['item_price'].plot(figsize=(15,10))\nplt.title(\"item price per item category\")\nplt.ylabel(\"price\")","11263149":"# item price per item category\nplt.figure(figsize=(15,10))\ngrouped_cat['item_price'].min().plot(label=\"min\")\ngrouped_cat['item_price'].median().plot(label=\"median\")\ngrouped_cat['item_price'].max().plot(label=\"max\")\nplt.fill_between(np.arange(grouped_cat.ngroups), grouped_cat['item_price'].quantile(0.15), \n                 grouped_cat['item_price'].quantile(0.75),color='grey', alpha=0.5, label=\"IQR\") # inter-quartile range\nplt.legend(loc=\"best\")\nplt.title(\"Minimum, median, and maximum of the price per item category\")\nplt.ylabel(\"item price\")\nplt.xlabel(\"item category id\")","891574d8":"# distribution of the price per item category\nplt.figure(figsize=(15,10))\ngrouped_cat['item_price'].plot(kind='box')\n#sns.boxplot(x=\"item_category_id\",y=\"item_price\",data=grouped_cat)\nplt.title(\"Boxplot of the price per item category\")\nplt.ylabel(\"price\")","f3426014":"# sales per category over different prices\nplt.figure(figsize=(15,10))\nsns.scatterplot(x='item_price' ,y='item_cnt_day', hue='item_category_id', data=sales_train)\nplt.title(\"Sales per category over different prices\")\nplt.ylabel(\"Sales\")\nplt.xlabel(\"Item price\")","5498d508":"## Outlier in price","fd594ed7":"## Groupby item category","52ce02fc":"## Groupby item id"}}