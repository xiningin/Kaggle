{"cell_type":{"e5cedf28":"code","9b163016":"code","6b86cc38":"code","705cdbce":"code","5cb50974":"code","7379a6e1":"code","da23141e":"code","a5441c37":"code","3b7bf029":"code","3cfce82f":"code","4294ec38":"code","e3b41fa4":"code","5902d4ab":"code","353020fc":"code","fd09f4b9":"code","f28883ee":"code","fcdf00d4":"code","c8ce1822":"code","04656a8e":"code","cb96597e":"code","6178b68e":"code","7f6c86e4":"code","08a698c3":"code","639b55bf":"code","93a6e33e":"code","d6ffaf9d":"code","d02c7a24":"code","96606e1b":"code","16329229":"code","7cdc4e66":"code","bbf74024":"code","28bdcc46":"code","8e49de8a":"code","d637060c":"code","1a92b46d":"code","5fbd8bdd":"code","ed172409":"code","1e64c15e":"markdown","06a866bc":"markdown","619720b9":"markdown","f26a602e":"markdown","9fb8a719":"markdown","88d3c7b5":"markdown","45a68bb1":"markdown","1294b921":"markdown","dafb2a54":"markdown","06e9cb1b":"markdown","b46b2ed0":"markdown","81cc6455":"markdown","8f5e744b":"markdown","f8b9b0ac":"markdown","24be653e":"markdown"},"source":{"e5cedf28":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b163016":"!pip install simpletransformers==0.40.0\n!pip install transformers\n!pip install tensorflow==2.1.0\n!pip install tokenizers==0.7.0","6b86cc38":"!export CUDA_HOME=\/usr\/local\/cuda-10.1\n!git clone https:\/\/github.com\/NVIDIA\/apex\n%cd apex\n!pip install -v --no-cache-dir .\/","705cdbce":"import logging\n\nlogging.basicConfig(level=logging.INFO)\ntransformers_logger = logging.getLogger(\"transformers\")\ntransformers_logger.setLevel(logging.WARNING)","5cb50974":"import pandas as pd\n\ndf = pd.read_csv(\"\/kaggle\/input\/test-data-for-fake-jobs\/train_data.csv\")\ndf.head()","7379a6e1":"df.isnull().sum()","da23141e":"import matplotlib.pyplot as plt\nimport seaborn as sns\nprint(df[\"\u0424\u0435\u0439\u043a\"].value_counts())\nsns.barplot(df[\"\u0424\u0435\u0439\u043a\"].unique(), df[\"\u0424\u0435\u0439\u043a\"].value_counts())","a5441c37":"df.fillna(' ',inplace=True)","3b7bf029":"df[\"text\"] = df['\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435'] + ' ' + df['\u041c\u0435\u0441\u0442\u043e'] + ' ' + df['\u041e\u0442\u0434\u0435\u043b'] + ' ' + df['\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438'] + ' ' + df['\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u043a\u0430\u043d\u0441\u0438\u0438'] + ' ' + df['\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f'] + ' ' + df['\u0421\u043e\u0446\u043f\u0430\u043a\u0435\u0442'] + ' ' + df['\u0422\u0438\u043f \u0437\u0430\u043d\u044f\u0442\u043e\u0441\u0442\u0438'] + ' ' + df['\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435'] + ' ' + df['\u0418\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u044f'] + ' ' + df['\u041f\u043e\u0437\u0438\u0446\u0438\u044f']","3cfce82f":"del df['\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435']\ndel df['\u041c\u0435\u0441\u0442\u043e']\ndel df['\u041e\u0442\u0434\u0435\u043b']\ndel df['\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438']\ndel df['\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u043a\u0430\u043d\u0441\u0438\u0438']\ndel df['\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f']\ndel df['\u0421\u043e\u0446\u043f\u0430\u043a\u0435\u0442']\ndel df['\u0422\u0438\u043f \u0437\u0430\u043d\u044f\u0442\u043e\u0441\u0442\u0438']\ndel df['\u041e\u043f\u044b\u0442']\ndel df['\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435']\ndel df['\u0418\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u044f']\ndel df['\u041f\u043e\u0437\u0438\u0446\u0438\u044f']\ndel df['\u0414\u0438\u0441\u0442\u0430\u043d\u0446\u0438\u043e\u043d\u043d\u043e']\ndel df['\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430']\ndel df['\u0412\u043e\u043f\u0440\u043e\u0441\u044b']","4294ec38":"import spacy, re\n#Data Cleanup\n\ndf['text']=df['text'].str.replace('\\n','')\ndf['text']=df['text'].str.replace('\\r','')\ndf['text']=df['text'].str.replace('\\t','')\n  \n#This removes unwanted texts\ndf['text'] = df['text'].apply(lambda x: re.sub(r'[0-9]','',x))\ndf['text'] = df['text'].apply(lambda x: re.sub(r'[\/(){}\\[\\]\\|@,;.:-]',' ',x))\n  \n#Converting all upper case to lower case\ndf['text']= df['text'].apply(lambda s:s.lower() if type(s) == str else s)\n  \n\n#Remove un necessary white space\ndf['text']=df['text'].str.replace('  ',' ')\n\n#Remove Stop words\nnlp=spacy.load(\"en_core_web_sm\")\ndf['text'] =df['text'].apply(lambda x: ' '.join([word for word in x.split() if nlp.vocab[word].is_stop==False ]))","e3b41fa4":"# from nltk.corpus import stopwords\n# import string\n# c = set(stopwords.words('english'))\n# punctuation = list(string.punctuation)\n# stop.update(punctuation)","5902d4ab":"def get_simple_pos(tag):\n    if tag.startswith('J'):\n        return wordnet.ADJ\n    elif tag.startswith('V'):\n        return wordnet.VERB\n    elif tag.startswith('N'):\n        return wordnet.NOUN\n    elif tag.startswith('R'):\n        return wordnet.ADV\n    else:\n        return wordnet.NOUN","353020fc":"from nltk.stem import WordNetLemmatizer\nfrom nltk import pos_tag\nfrom nltk.corpus import wordnet\nfrom tqdm import tqdm\nlemmatizer = WordNetLemmatizer()\ndef lemmatize_words(text):\n    final_text = []\n    for i in tqdm(text.split()):\n        if i.strip().lower() not in stop:\n            pos = pos_tag([i.strip()])\n            word = lemmatizer.lemmatize(i.strip(),get_simple_pos(pos[0][1]))\n            final_text.append(word.lower())\n    return \" \".join(final_text)  ","fd09f4b9":"# df.text = df.text.apply(lemmatize_words)","f28883ee":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df['text'], df[\"\u0424\u0435\u0439\u043a\"], test_size = 0.20, stratify=df[\"\u0424\u0435\u0439\u043a\"], random_state=777)\n\ntrain_df = pd.DataFrame({0: df['text'], 1: df[\"\u0424\u0435\u0439\u043a\"]})\ntest_df = pd.DataFrame({0: X_test, 1: y_test})","fcdf00d4":"from simpletransformers.classification import ClassificationModel, ClassificationArgs\nmodel_args = ClassificationArgs()\nmodel_args.use_early_stopping = True\nmodel_args.early_stopping_delta = 0.01\nmodel_args.early_stopping_metric = \"mcc\"\nmodel_args.early_stopping_metric_minimize = False\nmodel_args.early_stopping_patience = 1\nmodel_args.evaluate_during_training_steps = 1000\nmodel_args.overwrite_output_dir = True\nmodel_args.train_batch_size = 64\nmodel_args.save_steps = 10000\nmodel_args.save_model_every_epoch = False\nmodel_args.num_train_epochs = 10\n\n# model = ClassificationModel('albert', 'albert-base-v2', num_labels=2, args={'overwrite_output_dir': True, \"train_batch_size\": 64, \"save_steps\": 10000, \"save_model_every_epoch\":False,\n#                                                                           'num_train_epochs': 5}, use_cuda=True)\n# model = ClassificationModel('bert', 'bert-base-uncased', num_labels=2, args=model_args, use_cuda=True)\n\nmodel = ClassificationModel('bert', 'bert-base-uncased', num_labels=2, args={'overwrite_output_dir': True, \"train_batch_size\": 64, \"save_steps\": 10000, \"save_model_every_epoch\":False,\n                                                                           'num_train_epochs': 5}, use_cuda=True)","c8ce1822":"model.train_model(train_df)","04656a8e":"# Evaluate the model\nresult, model_outputs, wrong_predictions = model.eval_model(test_df)","cb96597e":"import numpy as np\npreds = [np.argmax(tuple(m)) for m in model_outputs]","6178b68e":"from sklearn.metrics import f1_score\n\nprint(f1_score(test_df[1], preds, average='micro'))\nprint(f1_score(test_df[1], preds, average='macro'))\nprint(f1_score(test_df[1], preds))","7f6c86e4":"from sklearn.metrics import classification_report\n\nprint(classification_report(test_df[1], preds))","08a698c3":"submission = pd.read_csv('\/kaggle\/input\/test-data-for-fake-jobs\/test_data.csv')\nsubmission.head()","639b55bf":"submission.fillna(\" \",inplace = True)","93a6e33e":"submission[\"text\"] = submission['\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435'] + ' ' + submission['\u041c\u0435\u0441\u0442\u043e'] + ' ' + submission['\u041e\u0442\u0434\u0435\u043b'] + ' ' + submission['\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438'] + ' ' + submission['\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u043a\u0430\u043d\u0441\u0438\u0438'] + ' ' + submission['\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f'] + ' ' + submission['\u0421\u043e\u0446\u043f\u0430\u043a\u0435\u0442'] + ' ' + submission['\u0422\u0438\u043f \u0437\u0430\u043d\u044f\u0442\u043e\u0441\u0442\u0438'] + ' ' + submission['\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435'] + ' ' + submission['\u0418\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u044f'] + ' ' + submission['\u041f\u043e\u0437\u0438\u0446\u0438\u044f']","d6ffaf9d":"del submission['\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435']\ndel submission['\u041c\u0435\u0441\u0442\u043e']\ndel submission['\u041e\u0442\u0434\u0435\u043b']\ndel submission['\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438']\ndel submission['\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0430\u043a\u0430\u043d\u0441\u0438\u0438']\ndel submission['\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f']\ndel submission['\u0421\u043e\u0446\u043f\u0430\u043a\u0435\u0442']\ndel submission['\u0422\u0438\u043f \u0437\u0430\u043d\u044f\u0442\u043e\u0441\u0442\u0438']\ndel submission['\u041e\u043f\u044b\u0442']\ndel submission['\u041e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435']\ndel submission['\u0418\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u044f']\ndel submission['\u041f\u043e\u0437\u0438\u0446\u0438\u044f']\ndel submission['\u0414\u0438\u0441\u0442\u0430\u043d\u0446\u0438\u043e\u043d\u043d\u043e']\ndel submission['\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430']\ndel submission['\u0412\u043e\u043f\u0440\u043e\u0441\u044b']","d02c7a24":"submission.head()","96606e1b":"ids = submission[\"Id\"].copy()\nsubmission = submission.drop(columns='Id')\nsubmission.head()","16329229":"submission['text']=submission['text'].str.replace('\\n','')\nsubmission['text']=submission['text'].str.replace('\\r','')\nsubmission['text']=submission['text'].str.replace('\\t','')\n\n#This removes unwanted texts\nsubmission['text'] = submission['text'].apply(lambda x: re.sub(r'[0-9]','',x))\nsubmission['text'] = submission['text'].apply(lambda x: re.sub(r'[\/(){}\\[\\]\\|@,;.:-]',' ',x))\n\n#Converting all upper case to lower case\nsubmission['text']= submission['text'].apply(lambda s:s.lower() if type(s) == str else s)\n\n\n#Remove un necessary white space\nsubmission['text']=submission['text'].str.replace('  ',' ')\n\n#Remove Stop words\nnlp=spacy.load(\"en_core_web_sm\")\nsubmission['text'] =submission['text'].apply(lambda x: ' '.join([word for word in x.split() if nlp.vocab[word].is_stop==False ]))","7cdc4e66":"# submission.text = submission.text.apply(lemmatize_words)","bbf74024":"submission['text']","28bdcc46":"predictions, raw_outputs = model.predict(submission.text)","8e49de8a":"predictions","d637060c":"result = pd.DataFrame()\nresult['Id'] = ids.values\nresult['\u0424\u0435\u0439\u043a'] = predictions\nresult = result.set_index('Id')","1a92b46d":"result","5fbd8bdd":"import os\nos.chdir(r'\/kaggle\/working')\n\nresult.to_csv(r'lim_bert_submission_best5.csv', )","ed172409":"from IPython.display import FileLink\nFileLink(r'lim_bert_submission_best5.csv')","1e64c15e":"\u0412 \u0438\u0442\u043e\u0433\u0435 \u0438\u0437-\u0437\u0430 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0431\u044b\u043b\u043e \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0430 \u043c\u043d\u043e\u0433\u0438\u0435 \u0438\u0437 \u0444\u0438\u0447\u0435\u0439 \u043d\u0435 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u043b\u0438 \u0443\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0441\u043a\u043e\u043d\u043a\u0430\u0442\u0435\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043e\u0434\u0438\u043d \u0442\u0435\u043a\u0441\u0442 \u0438 \u0441\u043a\u043e\u0440\u043c\u0438\u0442\u044c \u0442\u044f\u0436\u0435\u043b\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438","06a866bc":"\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c, \u043a\u0430\u043a \u0437\u0430\u0441\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442 \u0432 \u043c\u043e\u0434\u0435\u043b\u044c, \u044f \u0440\u0435\u0448\u0438\u043b \u0435\u0433\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c  ","619720b9":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u044b\u043b\u043e \u0440\u0435\u0448\u0435\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c bert, \u0432 \u043a\u043e\u043d\u0446\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u0434\u0432\u0430 \u0430\u0443\u0442\u043f\u0443\u0442\u0430 \u0434\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438","f26a602e":"\u041f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u043c \u0442\u0435\u0441\u0442","9fb8a719":"\u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0441\u044b\u043b\u043a\u0443 \u0434\u043b\u044f \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u044f \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0430\u0431\u043c\u0438\u0442\u0430 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0435\u0433\u043e \u043d\u0430 \u043a\u0430\u0433\u0433\u043b","88d3c7b5":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0439 \u043a \u0444\u0435\u0439\u043a\u043e\u0432\u044b\u043c","45a68bb1":"\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u044b\u0439 (\u0442\u0430 \u0436\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u0430 \u0431\u044b\u043b\u0430 \u0438 \u0441 \u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c)","1294b921":"\u0422\u0435\u043f\u0435\u0440\u044c \u0443\u0434\u0430\u043b\u0438\u043c \u0432\u0441\u0435 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u0444\u0438\u0447\u0438 \u0438 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u043a\u0441\u0442 \u0438 \u0442\u0430\u0440\u0433\u0435\u0442","dafb2a54":"\u0414\u0430\u043b\u0435\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u043b \u0431\u044b\u0442\u044c \u0442\u0440\u0435\u0439\u043d-\u0442\u0435\u0441\u0442 \u0441\u043f\u043b\u0438\u0442, \u043d\u043e \u0434\u043b\u044f \u0441\u0430\u0431\u043c\u0438\u0442\u0430 \u044f \u043e\u0431\u0443\u0447\u0430\u043b\u0441\u044f \u043d\u0430 \u0432\u0441\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043a\u0430\u043a \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u043a\u0430\u0433\u043b\u043e\u0432\u0441\u043a\u0438\u0439 \u0442\u0435\u0441\u0442 \u0434\u0430\u0442\u0430\u0441\u0435\u0442","06e9cb1b":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0443 \u043d\u0430\u0441 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439","b46b2ed0":"\u042f \u0441\u043c\u043e\u0433 \u043d\u0430\u0439\u0442\u0438 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0437\u0434\u0435\u0441\u044c \u0436\u0435 \u043d\u0430 \u043a\u0430\u0433\u0433\u043b\u0435 https:\/\/www.kaggle.com\/shivamb\/real-or-fake-fake-jobposting-prediction, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u043a\u0440\u0430\u0441\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0441 \u0437\u0430\u0434\u0430\u0447\u0435\u0439 \u044d\u0442\u043e\u0433\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043b\u044e\u0441 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0431\u044b\u043b \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0432\u044b\u0434\u0430\u0432\u0430\u043b\u0441\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430\u043c\u0438. \u0412 \u0438\u0442\u043e\u0433\u0435 \u0431\u044b\u043b\u043e \u043f\u0440\u0438\u043d\u044f\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u043d\u0435\u043c","81cc6455":"\u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0430\u0431\u043c\u0438\u0442","8f5e744b":"\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0441\u0430\u0431\u043c\u0438\u0442 \u0432 \u0432\u0438\u0434\u0435 csv","f8b9b0ac":"\u0413\u043e\u0442\u043e\u0432\u0438\u043c\u0441\u044f \u043f\u0440\u0435\u0434\u0438\u043a\u0442\u0438\u0442\u044c \u0442\u0435\u0441\u0442","24be653e":"\u0414\u0435\u043b\u0430\u0435\u043c \u0442\u0435 \u0436\u0435 \u043f\u0440\u0435\u043f\u0430\u0440\u0430\u0446\u0438\u0438 \u0441 \u0444\u0438\u0447\u0430\u043c\u0438, \u0447\u0442\u043e \u0438 \u043d\u0430 \u0442\u0440\u0435\u0439\u043d\u0435"}}