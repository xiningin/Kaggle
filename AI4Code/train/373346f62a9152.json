{"cell_type":{"c4727955":"code","0d0d4e62":"code","9adcfc9e":"code","f862247d":"code","e738612b":"code","c9d98b94":"code","de911abc":"code","6f5a7711":"code","d33df55f":"code","4239ece3":"code","421efa7e":"code","e5c965dc":"code","3eeb5cfd":"code","dd30e172":"code","46a9c826":"markdown","18a7514a":"markdown","021da9f0":"markdown","e24eba08":"markdown","1044872d":"markdown","e5018d4b":"markdown","4f6aafa3":"markdown","464168c9":"markdown","10ab02fc":"markdown","60c67473":"markdown","951125ca":"markdown"},"source":{"c4727955":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport re\nfrom wordcloud import WordCloud, STOPWORDS","0d0d4e62":"DIR = '\/kaggle\/input\/nbme-score-clinical-patient-notes'\n\ndf_notes = pd.read_csv(f'{DIR}\/patient_notes.csv')\ndf_features = pd.read_csv(f'{DIR}\/features.csv')\ndf_train = pd.read_csv(f'{DIR}\/train.csv')\ndf_test = pd.read_csv(f'{DIR}\/test.csv')","9adcfc9e":"case_number = 0\n\ndf_notes.loc[df_notes['case_num'] == {case_number}]\nprint (f\"Case Number {case_number} has {df_notes.loc[df_notes['case_num'] == case_number].shape[0]} patient notes\")\nprint (f'Total Case Numbers: {df_notes.case_num.nunique()}')","f862247d":"df_notes\\\n    .groupby('case_num', as_index = False)\\\n    .agg({'pn_num':'count'})\\\n    .plot(kind = 'bar', xlabel = 'case_num', ylabel = 'Number of Patient Notes', title = 'Number of Patient Notes Per Case', legend = False)","e738612b":"print (f'Sample of Patient Notes for Case Number: {case_number}')\ndf_notes.loc[df_notes['case_num'] == case_number, 'pn_history'].head(3).values","c9d98b94":"case_number = 0\n\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\")\ntext = ' '.join(df_notes.loc[df_notes['case_num'] == case_number, 'pn_history'].values.tolist())\nwordcloud.generate(text)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","de911abc":"case_number = 1\n\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\")\ntext = ' '.join(df_notes.loc[df_notes['case_num'] == case_number, 'pn_history'].values.tolist())\nwordcloud.generate(text)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","6f5a7711":"case_number = 2\n\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(stopwords=stopwords, background_color=\"white\")\ntext = ' '.join(df_notes.loc[df_notes['case_num'] == case_number, 'pn_history'].values.tolist())\nwordcloud.generate(text)\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","d33df55f":"df_notes['word_count'] = df_notes['pn_history'].apply(lambda x: len(re.split('\\s|; |, |\\*|\\n|-',x)))","4239ece3":"fig, ax = plt.subplots()\n\nax = sns.boxplot(data = df_notes,x = 'case_num', y = 'word_count')\nax.set_ylabel('Number of Words')\nax.set_xlabel('Case Number')\nax.set_title('Word Count Per Patient Note')","421efa7e":"df_features.head()","e5c965dc":"df_train.head()","3eeb5cfd":"df_test","dd30e172":"df_train_features = df_train.merge(df_features, on = ['case_num', 'feature_num'], how = 'left')\ndf_train_features.loc[(df_train_features['case_num'] == 0) & (df_train_features['feature_num'] == 0)].head(10)","46a9c826":"# Important Terms\n\n- **Clinical Case**: The scenario (e.g., symptoms, complaints, concerns) the Standardized Patient presents to the test taker (medical student, resident or physician). **Ten** clinical cases are represented in this dataset.\n- **Patient Note**: Text detailing important information related by the patient during the encounter (physical exam and interview).\n- **Feature**: A clinically relevant concept. A rubric describes the key concepts relevant to each case.","18a7514a":"# Patient's Notes\n\n- A collection of about 40,000 Patient Note history portions. \n- Only a subset of these have features annotated. \n- You may wish to apply unsupervised learning techniques on the notes without annotations. \n- The patient notes in the test set are not included in the public version of this file.\n\n\n- **pn_num** - A unique identifier for each patient note.  \n- **case_num** - A unique identifier for the clinical case a patient note represents.  \n- **pn_history** - The text of the encounter as recorded by the test taker.  \n\n\n- Each clinical case (`case_num`) has multiple patient notes (`pn_num`)","021da9f0":"# Test\n\nThis is an example test set with records taken from the train set.  \nPurpose of this example test set is to help author the code.\n\n\n**The task is to identify the location of the annotation (features) of patient notes indicated in the test set**\n","e24eba08":"### Word Cloud","1044872d":"# ","e5018d4b":"# Features\nThe rubric of features (or key concepts) for each clinical case.\n\n\n- **feature_num** - A unique identifier for each feature.\n- **case_num** - A unique identifier for each case.\n- **feature_text** - A description of the feature.","4f6aafa3":"# Train + Features","464168c9":"# Train\nFeature annotations for 1000 of the patient notes, 100 for each of ten cases.\n\n- **id** - Unique identifier for each patient note \/ feature pair.\n- **pn_num** - The patient note annotated in this row.\n- **feature_num** - The feature annotated in this row.\n- **case_num** - The case to which this patient note belongs.\n- **annotation** - The text(s) within a patient note indicating a feature. A feature may be indicated multiple times within a single note.\n- **location** - Character spans indicating the location of each annotation within the note. Multiple spans may be needed to represent an annotation, in which case the spans are delimited by a semicolon ;.","10ab02fc":"# NBME - Score Clinical Patient Notes \n\n![](https:\/\/images.unsplash.com\/photo-1576091160550-2173dba999ef?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=800&q=80)  \n**Task**: Prediction location of the annotation (feature) for each patient note\n\n","60c67473":"### Patient Notes","951125ca":"### Word Count"}}