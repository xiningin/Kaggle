{"cell_type":{"f9b5e237":"code","66da51d6":"code","efb39ec7":"code","099e05af":"code","1af06996":"code","30e9ea42":"code","35db5c69":"code","c4d0c58a":"code","8a0023cd":"markdown","b15824e0":"markdown","a2f37667":"markdown","afec9603":"markdown","8296ed26":"markdown","48603b19":"markdown","4a701ab8":"markdown","8b90276c":"markdown","0752fa25":"markdown","ee32bac1":"markdown","467d81d4":"markdown","384b19d7":"markdown"},"source":{"f9b5e237":"!pip install joblib\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import datasets, svm, metrics \nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import classification_report, confusion_matrix \nfrom sklearn.metrics import accuracy_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import f1_score,recall_score\nfrom sklearn.model_selection import cross_val_score\nfrom mlxtend.feature_selection import SequentialFeatureSelector as SFS\nimport sklearn.feature_selection\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom itertools import cycle\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import svm, datasets\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import label_binarize\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom scipy import interp\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import ConfusionMatrixDisplay\nimport mlxtend\nfrom mlxtend.feature_selection import SequentialFeatureSelector as SFS\nfrom mlxtend.plotting import plot_sequential_feature_selection as plot_sfs\nimport matplotlib.pyplot as plt\n%matplotlib inline","66da51d6":"dataFrame = pd.read_csv('\/kaggle\/input\/dialects-in-turkey\/3dialects-in-turkey.csv')\ndataFrame = dataFrame.drop(\"Unnamed: 0\", axis=1)\ndataFrame = dataFrame.drop(\"Unnamed: 0.1\", axis=1)\n\n","efb39ec7":"dataFrame= dataFrame.replace(to_replace =\"karadeniz\",value =61)#TRABZON PLAKA\ndataFrame= dataFrame.replace(to_replace =\"ege\",value =20)#DEN\u0130ZL\u0130 PLAKA\ndataFrame= dataFrame.replace(to_replace =\"trakya\",value =59)#TEK\u0130RDA\u011e PLAKA","099e05af":"dataFrame","1af06996":"y = dataFrame[\"region\"].values\nX = dataFrame.drop(\"region\",axis = 1).values\nx_train, x_test, y_train, y_test = train_test_split(X,y,test_size=0.3, random_state=15)\nscaler = MinMaxScaler()\nscaler.fit(x_train)\nx_train = scaler.transform(x_train)\nx_test = scaler.transform(x_test)","30e9ea42":"print(\"---------------------------DecisionTreeRegressor ------------------------------------\")\n\nmodel = DecisionTreeRegressor().fit(x_train,y_train)\ntahminlerimiz2 = model.predict(x_test)\nprint(classification_report(y_test,tahminlerimiz2))\nprint(\"Confusion Matrix\")\nprint(confusion_matrix(y_test,tahminlerimiz2))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_test,tahminlerimiz2))\nscores = cross_val_score(model, x_test, y_test)\nprint(\"Validation Score Mean\")\nprint(scores.mean())\nprint(\"Validation Sonu\u00e7lar\u0131\")\nprint(scores)\n\nprint(\"---------------------------DecisionTreeClassifier ------------------------------------\")\n\nmodel = DecisionTreeClassifier().fit(x_train,y_train)\n\ntahminlerimiz2 = model.predict(x_test)\nprint(classification_report(y_test,tahminlerimiz2))\nprint(\"Confusion Matrix\")\nprint(confusion_matrix(y_test,tahminlerimiz2))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_test,tahminlerimiz2))\nscores = cross_val_score(model, x_test, y_test)\nprint(\"Validation Score Mean\")\nprint(scores.mean())\nprint(\"Validation Sonu\u00e7lar\u0131\")\nprint(scores)\n\nprint(\"---------------------------GaussianNB ------------------------------------\")\n\nmodel = GaussianNB().fit(x_train, y_train)\n\ntahminlerimiz2 = model.predict(x_test)\nprint(classification_report(y_test,tahminlerimiz2))\nprint(\"Confusion Matrix\")\nprint(confusion_matrix(y_test,tahminlerimiz2))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_test,tahminlerimiz2))\nscores = cross_val_score(model, x_test, y_test)\nprint(\"Validation Score Mean\")\nprint(scores.mean())\nprint(\"Validation Sonu\u00e7lar\u0131\")\nprint(scores)\n\nprint(\"---------------------------Logistic Regression ------------------------------------\")\nmodel = LogisticRegression(solver='liblinear', random_state=15).fit(x_train, y_train)\nimport joblib\ntahminlerimiz2 = model.predict(x_test)\nguven = model.predict_proba(x_test)\nprint(classification_report(y_test,tahminlerimiz2))\nprint(\"Confusion Matrix\")\nprint(confusion_matrix(y_test,tahminlerimiz2))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_test,tahminlerimiz2))\nscores = cross_val_score(model, x_test, y_test)\nprint(\"Validation Score Mean\")\nprint(scores.mean())\nprint(\"Validation Sonu\u00e7lar\u0131\")\nprint(scores)\n\nprint(\"--------------------------- Linear SVC ------------------------------------\")\n\nmodel= svm.SVC(kernel='linear',probability=True,gamma='auto').fit(x_train,y_train)\n\ntahminlerimiz2 = model.predict(x_test)\n\nprint(classification_report(y_test,tahminlerimiz2))\nprint(\"Confusion Matrix\")\nprint(confusion_matrix(y_test,tahminlerimiz2))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_test,tahminlerimiz2))\nscores = cross_val_score(model, x_test, y_test)\nprint(\"Validation Score Mean\")\nprint(scores.mean())\nprint(\"Validation Sonu\u00e7lar\u0131\")\nprint(scores)\n\n\nprint(\"--------------------------- KNN n=1 ------------------------------------\")\n\nmodel = KNeighborsClassifier(n_neighbors=1, algorithm='ball_tree').fit(x_train,y_train)\n\ntahminlerimiz2 = model.predict(x_test)\nprint(classification_report(y_test,tahminlerimiz2))\nprint(\"Confusion Matrix\")\nprint(confusion_matrix(y_test,tahminlerimiz2))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_test,tahminlerimiz2))\nscores = cross_val_score(model, x_test, y_test)\nprint(\"Validation Score Mean\")\nprint(scores.mean())\nprint(\"Validation Sonu\u00e7lar\u0131\")\nprint(scores)\n\n","35db5c69":"\nprint(\"--------------------------- KNN n=1 ------------------------------------\")\n\nmodel = KNeighborsClassifier(n_neighbors=1, algorithm='ball_tree').fit(x_train,y_train)\n\ntahminlerimiz2 = model.predict(x_test)\nprint(classification_report(y_test,tahminlerimiz2))\nprint(\"Confusion Matrix\")\nprint(confusion_matrix(y_test,tahminlerimiz2))\nprint(\"Accuracy Score\")\nprint(accuracy_score(y_test,tahminlerimiz2))\nscores = cross_val_score(model, x_test, y_test)\nprint(\"Validation Score Mean\")\nprint(scores.mean())\nprint(\"Validation Sonu\u00e7lar\u0131\")\nprint(scores)\n","c4d0c58a":"sfs1 = SFS(model, forward=False, verbose=2, scoring='accuracy', cv=4, n_jobs=-4, k_features=3).fit(x_train,y_train)\nprint(sfs1)\nfig1 = plot_sfs(sfs1.get_metric_dict(), kind='std_dev',  figsize=(8, 6))\nresult_LR = pd.DataFrame.from_dict(sfs1.get_metric_dict(confidence_interval=0.90)).T\nresult_LR.sort_values('avg_score', ascending=0, inplace=True)\nresult_LR.head()","8a0023cd":"Verileri https:\/\/localingual.com\/ sitesindeki \u015fehirlere g\u00f6re ger\u00e7ek ses kay\u0131tlar\u0131ndan olu\u015fturdum. Selenium arac\u0131l\u0131\u011f\u0131yla yazd\u0131\u011f\u0131m script botu ile se\u00e7ili \u015fehirlerin ses kay\u0131tlar\u0131n\u0131n linkini elde ettim. Telif haklar\u0131 ve ki\u015fisel verilerin koruma kanunu esaslar\u0131 sebebiyle ses datas\u0131n\u0131 payla\u015fam\u0131yorum. Ancak bu verilerin Librosa k\u00fct\u00fcphanesiyle meta verisini olu\u015fturdum. Bu verileri projelerinizde kullanabilirsiniz.\n\n\n","b15824e0":"\u00dclkemizde ya\u015fayan insanlar\u0131n k\u00fclt\u00fcrel farkl\u0131l\u0131klar\u0131 konu\u015fmalar\u0131na da yans\u0131m\u0131\u015ft\u0131r. Bu konu\u015fmalar\u0131n farkl\u0131l\u0131\u011f\u0131na  insanlar her ne kadar \u015five deseler de bunlar dillerin a\u011f\u0131zlar\u0131d\u0131r.T\u00fcrkiye'de en yayg\u0131n bilinen Ege a\u011fz\u0131, Trakya a\u011fz\u0131 ve Karadeniz a\u011fz\u0131n\u0131 bu projede ele al\u0131yoruz. \u0130lk \u00f6nce verilerimizi olu\u015fturmam\u0131z gerekmekte. \n\n\n","a2f37667":"**CSV dosyas\u0131n\u0131 dahil edelim ve de\u011ferleri uygun hale getirelim**","afec9603":"Librosa K\u00fct\u00fcphanesi python programlama dilindeki sesin karakteristik \u00f6zelliklerini \u00e7\u0131karan bir k\u00fct\u00fcphanedir. Ses dosyalar\u0131n\u0131 inceler ve yap\u0131s\u0131ndan sonu\u00e7lar \u00fcretir. Projemizde en \u00e7ok tercih edilen ve insan kula\u011f\u0131na daha yatk\u0131n olan Mel-Frequency Cepstrum Coefficents(MFCC) \u00f6zelli\u011finin 40 de\u011ferini kulland\u0131m. Daha \u00f6nceki projelerimde bu de\u011ferlerin analizlere olumlu etkisinden dolay\u0131 tercih ettim diyebiliriz. \u0130lerleyen g\u00fcnlerde hem farkl\u0131 k\u00fct\u00fcphaneler hem de farkl\u0131 \u00f6zelliklerin oldu\u011fu geli\u015ftirmeler yapmay\u0131 hedeflemekteyim","8296ed26":"SFS ile yapt\u0131\u011f\u0131m \u00f6znitelik se\u00e7imlerinde pek bir geli\u015fim sa\u011flayamad\u0131. \u00d6zniteli\u011fin ve veri say\u0131lar\u0131n\u0131n az olmas\u0131, verilerin i\u00e7eriklerinin farkl\u0131 olmas\u0131, ses kaliteleri gibi etmenlere ra\u011fmen en dengeli modelimiz %54 oran\u0131nda ba\u015far\u0131 sa\u011flam\u0131\u015ft\u0131r. Verilerin temizlenmesi, verilerin artt\u0131r\u0131lmas\u0131 gibi geli\u015ftirmelerle daha da \u00fcst d\u00fczey bir s\u0131n\u0131fland\u0131rma problemine \u00e7\u00f6z\u00fcm sunabilece\u011fimizi d\u00fc\u015f\u00fcn\u00fcyorum. \n\nOkudu\u011funuz i\u00e7in Te\u015fekk\u00fcrler.","48603b19":"# ALL MODELS","4a701ab8":"# KNN ","8b90276c":"**Gerekli K\u00fct\u00fcphanelerin \u0130mport Edilmesi**","0752fa25":"**Librosa K\u00fct\u00fcphanesi ve MFCC**","ee32bac1":"Etiketli verimizi \u00f6ncelikli etiketinden ay\u0131ral\u0131m. Daha sonra hem e\u011fitim hem test verisi olu\u015ftural\u0131m. Ard\u0131ndan verilerimizi skaler hale getirelim.","467d81d4":"# SFS Feature Selection","384b19d7":"**Veri Seti**"}}