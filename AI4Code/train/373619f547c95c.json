{"cell_type":{"15be29ce":"code","8453113d":"code","8dea4d6b":"code","a016e117":"code","338e17b0":"code","4009024f":"code","3790a8e0":"code","13aa1e14":"code","df931a24":"code","0d8b3e18":"code","65c63f54":"code","7109c411":"markdown"},"source":{"15be29ce":"!pip install flaml","8453113d":"import pandas as pd\nimport numpy as np\nimport datatable as dt\nfrom flaml import AutoML","8dea4d6b":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df","a016e117":"%%time\ntrain = dt.fread('..\/input\/tabular-playground-series-nov-2021\/train.csv').to_pandas().drop('id', axis=1)\ntrain = reduce_memory_usage(train)\ntest = dt.fread('..\/input\/tabular-playground-series-nov-2021\/test.csv').to_pandas().drop('id', axis=1)\ntest = reduce_memory_usage(test)\nss = dt.fread('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv').to_pandas()\nss = reduce_memory_usage(ss)","338e17b0":"bool_cols_train = []\nfor i, col in enumerate(train.columns):\n    if train[col].dtypes == bool:\n        bool_cols_train.append(i)\n    \nprint(bool_cols_train)","4009024f":"bool_cols_test = []\nfor i, col in enumerate(test.columns):\n    if train[col].dtypes == bool:\n        bool_cols_test.append(i)\n    \nprint(bool_cols_test)","3790a8e0":"train.iloc[:, bool_cols_train] = train.iloc[:, bool_cols_train].astype(int)\ntest.iloc[:, bool_cols_test] = test.iloc[:, bool_cols_test].astype(int)","13aa1e14":"print(\"Train set shape\", train.shape, \"\\n\", \"Test set shape\", test.shape)","df931a24":"X = train.drop('target', axis=1).values\ny = train['target'].values\nX_test = test.values","0d8b3e18":"del train","65c63f54":"\"\"\"Initializing AutoMl instance\n\"\"\"\nautoml = AutoML()\n\n\"\"\"Specify automl goal and constraint\n\"\"\"\nautoml_settings = {\n    \"time_budget\" : 3600*6, # in seconds\n    \"metric\" : 'roc_auc',\n    \"task\" : 'classification',\n    \"log_file_name\" : \"tabular.log\"\n}\n\nautoml.fit(X, y, **automl_settings)\npreds = automl.predict_proba(X_test)\n\nss['target'] = preds[:, -1]\nss.to_csv('.\/flaml.csv', index=False)\nss.head()","7109c411":"# FLAML"}}