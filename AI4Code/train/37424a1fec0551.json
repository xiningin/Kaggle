{"cell_type":{"033dd144":"code","0ab3aa31":"code","c8f272d2":"code","284fb6f0":"code","dc3f31ba":"code","b7e398af":"code","f677c563":"code","a1834860":"code","854b12dd":"code","25b49e8e":"code","0d12d2a2":"code","516c8465":"code","5b6bc84b":"markdown","946dcf44":"markdown","45b7e7b4":"markdown","dbdbab80":"markdown","78b2472f":"markdown","8d70599e":"markdown","f7704760":"markdown","c71175f9":"markdown"},"source":{"033dd144":"import numpy as np\nimport pandas as pd\nimport datatable as dt\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom skimage import io\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","0ab3aa31":"%%time\n\ndf_train = dt.fread('..\/input\/tabular-playground-series-nov-2021\/train.csv').to_pandas()\ndf_test = dt.fread('..\/input\/tabular-playground-series-nov-2021\/test.csv').to_pandas()","c8f272d2":"print(f\"Shape Train Dataset: {df_train.shape}\")\nprint(f\"Shape Test Dataset: {df_test.shape}\")\n\ndf_train.head()","284fb6f0":"df_train.info()","dc3f31ba":"print(f\"Train Data Total Missing Values: {np.sum(df_train.isna().sum())}\")\nprint(f\"Test Data Total Missing Values: {np.sum(df_train.isna().sum())}\")","b7e398af":"### create a countplot of target's distribution to check even split among classes\n\nfig, ax = plt.subplots(1, 1, tight_layout=True, figsize=(12,6))\n\nsns.countplot(\n    data=df_train,\n    x='target',\n    ax=ax,\n    palette='Blues'\n)\n\nfig.text(\n    s='::Target Distribution',\n    x=0, y=1.05,\n    color='#5c5c5c',\n    fontfamily='monospace', fontsize=15, fontweight='bold'\n)\n\nsns.despine()","f677c563":"### create kdeplots for each feature, compare train vs. test distribution\n\nfeat_cols = [col for col in df_train.columns if col.startswith('f')]\n\nfig, ax = plt.subplots(10, 10, tight_layout=True, figsize=(20,20))\n\nax = ax.flatten()\n\nfor idx,feat in enumerate(feat_cols):\n    \n    sns.kdeplot(\n        data=df_train,\n        x=feat,\n        ax=ax[idx],\n        shade=True,\n        alpha=0.8,\n        color='#193f6e'\n    )\n    \n    sns.kdeplot(\n        data=df_test,\n        x=feat,\n        ax=ax[idx],\n        shade=True,\n        alpha=0.8,\n        color='#c5bfa7'\n    )\n    \n    ax[idx].set_yticks([])\n    ax[idx].set_ylabel('')\n    ax[idx].set_xlabel(xlabel=feat, fontweight='bold')\n\nfig.text(\n    s='::Feature Distribution || Train vs. Test',\n    x=0, y=1.05,\n    color='#5c5c5c',\n    fontfamily='monospace', fontsize=15, fontweight='bold'\n)    \n\nsns.despine()","a1834860":"### create correlation map among all features\n\ncorr = df_train.drop(columns='id').corr()\nmask = np.triu(corr)\n\nfig, ax = plt.subplots(1, 1, tight_layout=True, figsize=(15,15))\n\nsns.heatmap(\n    data=corr,\n    cmap='coolwarm',\n    annot=False,\n    linewidth=0.05,\n    cbar=True,\n    mask=mask,\n    ax=ax\n)\n\nfig.text(\n    s='::Feature Correlation Map',\n    x=0, y=1.05,\n    color='#5c5c5c',\n    fontfamily='monospace', fontsize=15, fontweight='bold'\n)  \n\nsns.despine()","854b12dd":"### create list with top correlating features and plot\npos_corr = corr['target'].sort_values(ascending=False)[1:5]\n\nfig, ax = plt.subplots(2, 2, tight_layout=True, figsize=(15,6))\nax = ax.flatten()\n\nfor idx, feat in enumerate(pos_corr.index):\n    \n    sns.kdeplot(\n        data=df_train,\n        x=feat,\n        hue='target',\n        ax=ax[idx],\n        palette='Blues',\n        shade=True,\n        alpha=0.8,\n        edgecolor='black',\n        linewidth=1\n    )\n    \n    ax[idx].set_yticks([])\n    ax[idx].set_ylabel('')\n    ax[idx].set_xlabel(xlabel=feat, fontweight='bold')\n    \nfig.text(\n    s='::TOP Positive Correlated Features',\n    x=0, y=1.05,\n    color='#5c5c5c',\n    fontfamily='monospace', fontsize=15, fontweight='bold'\n)\n\nsns.despine(left=True)","25b49e8e":"### plot correlating features w.r.t target class\nneg_corr = corr['target'].sort_values(ascending=True)[:4]\n\nfig, ax = plt.subplots(2, 2, tight_layout=True, figsize=(15,6))\nax = ax.flatten()\n\nfor idx, feat in enumerate(neg_corr.index):\n    \n    sns.kdeplot(\n        data=df_train,\n        x=feat,\n        hue='target',\n        ax=ax[idx],\n        palette='Blues',\n        shade=True,\n        alpha=0.8,\n        edgecolor='black',\n        linewidth=1\n    )\n    \n    ax[idx].set_yticks([])\n    ax[idx].set_ylabel('')\n    ax[idx].set_xlabel(xlabel=feat, fontweight='bold')\n    \nfig.text(\n    s='::TOP Negative Correlated Features',\n    x=0, y=1.05,\n    color='#5c5c5c',\n    fontfamily='monospace', fontsize=15, fontweight='bold'\n)\n\nsns.despine(left=True)","0d12d2a2":"### create row based features for further analysis\ndf_train['row_sum'] = df_train[feat_cols].sum(axis=1)\ndf_train['row_mean'] = df_train[feat_cols].mean(axis=1)\ndf_train['row_std'] = df_train[feat_cols].std(axis=1)","516c8465":"### get all row based features and plot distribution wrt to target\n\nrow_feat = [col for col in df_train.columns if col.startswith('row')]\n\nfig, ax = plt.subplots(1, 3, tight_layout=True, figsize=(15,4))\n\nfor idx, feat in enumerate(row_feat):\n    sns.kdeplot(\n        data=df_train,\n        x=feat,\n        hue='target',\n        ax=ax[idx],\n        palette='Blues',\n        shade=True,\n        alpha=0.8,\n        edgecolor='black',\n        linewidth=1\n    )\n    \n    ax[idx].set_yticks([])\n    ax[idx].set_ylabel('')\n    ax[idx].set_xlabel(xlabel=feat, fontweight='bold')\n    \nfig.text(\n    s='::Row Features w.r.t target',\n    x=0, y=1.05,\n    color='#5c5c5c',\n    fontfamily='monospace', fontsize=15, fontweight='bold'\n)\n\nsns.despine(left=True)","5b6bc84b":"## <span style=\"background:#818181;padding:0.3em;width:100%;display:block;border-radius:0.1em;color:white;font-family:Monospace\">Introduction<\/span>","946dcf44":"<div style=\"font-size: 1.2em; font-family: times-new-roman; border-left: 0.5em solid #efefef; padding-left: 1em\">\n    <strong>Insights:<\/strong><br>\n    After taking a first look at this month data we can conclude the following:\n    <ul>\n        <li>Dataset contains 102 columns in total with 100 feature columns of dtype: float64<\/li>\n        <li>We have no missing values at all<\/li>\n        <li> Train and Test Dataset contain nearly the same amount of observations \/ rows (600k vs. 540k)<\/li>\n    <\/ul>\n<\/div>","45b7e7b4":"<div style=\"font-size: 1.2em; font-family: times-new-roman; border-left: 0.5em solid #efefef; padding-left: 1em\">\n    <b>Hi there,<\/b><br><br>\n    this is my simple and basic EDA for this month competition.<br>\n    I tried to focus on a simple and easy structure as well as simple code, so everyone can follow along easily.<br><br>\n    <em>If you like this notebook or copy any parts of it please make sure to leave an upvote...<\/em><br><br>\n    The dataset used for this competition is synthetic, but based on a real dataset and generated using a CTGAN. <br>\n    The original dataset deals with predicting identifying spam emails via various extracted features from the email.<br>\n    Although the features are anonymized, they have properties relating to real-world features.<br><br>\n    Our goal is to predict the correct target class: spam or ham evaluated by ROC.<br><br>\n    <em><b>Thanks for stopping by and have fun with this month competition!<\/b><\/em>\n<\/div>\n\n","dbdbab80":"## <span style=\"background:#818181;padding:0.3em;width:100%;display:block;border-radius:0.1em;color:white;font-family:Monospace\">Uni \/ Multivariate Analysis<\/span>","78b2472f":"<div style=\"font-size: 1.2em; font-family: times-new-roman; border-left: 0.5em solid #efefef; padding-left: 1em\">\n    <strong>Insights:<\/strong><br>\n    After plotting some basic distributions and correlation we might conclude:\n    <ul>\n        <li>Target class is nearly evenly distributed (However I'd still use StratifiedKFold as CV)<\/li>\n        <li>Train and Test Data are equally distributed<\/li>\n        <li>We have some interestingly similiar distributions among the features (e.g f5-f8)<\/li>\n        <li>There are some stronger correlations between some features and the target variable (e.g f34)<\/li>\n        <li>There is no multicolinearity evident<\/li>\n    <\/ul>\n<\/div>","8d70599e":"<div style=\"font-size: 1.2em; font-family: times-new-roman; border-left: 0.5em solid #5c5c5c; padding-left: 1em\">\n    <b>Thank you for checking out my Notebook!<\/b><br>\n    Leave a comment down below or just an simple upvote if you find this notebook helpful.\n<\/div>","f7704760":"## <span style=\"background:#818181;padding:0.3em;width:100%;display:block;border-radius:0.1em;color:white;font-family:Monospace\">Feature Analysis (Detail)<\/span>","c71175f9":"## <span style=\"background:#818181;padding:0.3em;width:100%;display:block;border-radius:0.1em;color:white;font-family:Monospace\">Import Data & Basic Overview<\/span>"}}