{"cell_type":{"14c2f36e":"code","546b6ca3":"code","1dcc27ac":"code","e87acba2":"code","1f3fa7bb":"code","8b350418":"code","5953f106":"code","ab73a99d":"code","705796c3":"code","4df91857":"code","8ea2c3b6":"code","e7948fa1":"code","f03b2090":"code","3487f8c2":"code","ec9e2a6d":"code","8fb79d89":"code","f6b4c44f":"code","e1a1325d":"code","cfc1e5a3":"code","c209390f":"code","ef0fd66b":"code","53735e53":"code","45a0f5c5":"code","b5e3e6df":"code","b77e51c0":"code","d45f7871":"code","4a50d8f1":"code","179f1c81":"code","2fe8ee77":"code","342a1fde":"code","8dacf135":"code","4ed7106c":"code","eec9bb0e":"code","dff5f01b":"markdown","5c5b394f":"markdown"},"source":{"14c2f36e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","546b6ca3":"df = pd.read_csv(\"\/kaggle\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\", index_col='date', parse_dates=['date'])","1dcc27ac":"df.sort_index(inplace=True)","e87acba2":"df['sales'] = df.item_price * df.item_cnt_day","1f3fa7bb":"df.drop(['date_block_num', 'shop_id', 'item_id', 'item_price', 'item_cnt_day'], axis='columns', inplace=True)","8b350418":"df.head()","5953f106":"df.plot(figsize=(12,6))","ab73a99d":"from statsmodels.tsa.seasonal import seasonal_decompose","705796c3":"results = seasonal_decompose(x=df['sales'], period=1)\nresults.plot();","4df91857":"msk = np.random.rand(len(df)) < 0.8\ntrain = df[msk]\ntest = df[~msk]","8ea2c3b6":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","e7948fa1":"df.head(),df.tail()","f03b2090":"scaler.fit(train)\nscaled_train = scaler.transform(train)\nscaled_test = scaler.transform(test)","3487f8c2":"scaled_train[:10]","ec9e2a6d":"from keras.preprocessing.sequence import TimeseriesGenerator","8fb79d89":"# define generator\nn_input = 3\nn_features = 1\ngenerator = TimeseriesGenerator(scaled_train, scaled_train, length=n_input, batch_size=1)","f6b4c44f":"X,y = generator[0]\nprint(f'Given the Array: \\n{X.flatten()}')\nprint(f'Predict this y: \\n {y}')","e1a1325d":"X.shape","cfc1e5a3":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM","c209390f":"model = Sequential()\nmodel.add(LSTM(100, activation='relu', recurrent_activation='sigmoid', dropout=0.2, input_shape=(n_input, n_features)))\nmodel.add(Dense(1, activation='relu'))\nmodel.compile(optimizer='adam', loss='mse', metrics=['accuracy'])","ef0fd66b":"model.summary()","53735e53":"model.fit(generator,epochs=1)","45a0f5c5":"loss_per_epoch = model.history.history['loss']\nplt.plot(range(len(loss_per_epoch)),loss_per_epoch)","b5e3e6df":"last_train_batch = scaled_train[-n_input:]","b77e51c0":"last_train_batch = last_train_batch.reshape((1, n_input, n_features))","d45f7871":"model.predict(last_train_batch)","4a50d8f1":"scaled_test[0]","179f1c81":"test_predictions = []\n\nfirst_eval_batch = scaled_train[-n_input:]\ncurrent_batch = first_eval_batch.reshape((1, n_input, n_features))\n\nfor i in range(100):\n    \n    # get the prediction value for the first batch\n    current_pred = model.predict(current_batch)[0]\n    \n    # append the prediction into the array\n    test_predictions.append(current_pred) \n    \n    # use the prediction to update the batch and remove the first value\n    current_batch = np.append(current_batch[:,1:,:],[[current_pred]],axis=1)","2fe8ee77":"test = test[:100]","342a1fde":"true_predictions = scaler.inverse_transform(test_predictions)","8dacf135":"test['Predictions'] = true_predictions","4ed7106c":"test.plot(figsize=(14,5))","eec9bb0e":"from sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom math import sqrt\nrmse=sqrt(mean_squared_error(test['sales'],test['Predictions']))\nprint(rmse)\n\nmae = mean_absolute_error(test['sales'],test['Predictions'])\nprint(mae)","dff5f01b":"## Read dataset","5c5b394f":"# define model"}}