{"cell_type":{"3924ce3e":"code","20c86215":"code","f5dd9402":"code","c95f9cdc":"code","afc9ed63":"code","ff6b245f":"code","334e2a7a":"code","2b537319":"code","7a6dc2ba":"code","5b396ab5":"code","99c9db99":"code","40616448":"code","a53e8c01":"code","d33e503a":"code","d381ac7e":"code","bc333089":"code","71bf1da5":"code","2892c9a2":"code","25c37297":"code","6eb313c6":"code","52bcf667":"code","c39e7a6b":"code","2d9c410c":"code","915ea4d1":"code","b123eeb0":"code","aeded676":"code","d22036be":"code","409a7ae5":"code","7e31da60":"code","b9bc5b23":"code","e378371a":"code","276f2b55":"code","1dfb7be1":"code","c14de6af":"code","22703809":"code","7c96b0d5":"code","2f21e30c":"code","0014d523":"code","96c5209e":"code","dd401665":"code","0805f5c1":"code","98f7d461":"code","566fb871":"code","adc05d41":"code","65d1d5c8":"code","ae9b2fed":"markdown","6bc971f7":"markdown","628579a2":"markdown","9b1b0875":"markdown","8d400902":"markdown","253a0710":"markdown","6cd3eb43":"markdown","cd30128f":"markdown","e25e8e3f":"markdown","ae16014a":"markdown","20fedb37":"markdown","19771ad0":"markdown","f8c41a21":"markdown","517ef9f9":"markdown","f575b457":"markdown","e2a51393":"markdown","d87c7ade":"markdown","5879a0be":"markdown","f78393ab":"markdown","6bb0f6ea":"markdown","b2b4283b":"markdown","3dc0c4cd":"markdown","b1017a59":"markdown","46be1922":"markdown","ab9199b6":"markdown","24807553":"markdown","669e6329":"markdown","bc11e01f":"markdown","165f5c51":"markdown","e1f8b807":"markdown","a7613671":"markdown","fe63b947":"markdown","77ddd4bc":"markdown","3c820f15":"markdown","00991032":"markdown","ae27e4d0":"markdown","23517035":"markdown","a2017a2c":"markdown","b930c771":"markdown","a4cd1701":"markdown","b3b85f84":"markdown","5a9cf975":"markdown","227bd1ac":"markdown","1c2f9c6a":"markdown","e4fd0dc8":"markdown","c1aa524e":"markdown","9d3b5f20":"markdown","0386e4b6":"markdown","62ae1087":"markdown","4672f9cb":"markdown","2d2dacac":"markdown","033c8525":"markdown","bdbacdd6":"markdown","fc4e2cec":"markdown","a25b2cc0":"markdown","d4c5b485":"markdown"},"source":{"3924ce3e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\nfrom itertools import cycle\npd.set_option('max_columns', 50)\nplt.style.use('bmh')\ncolor_cycle = cycle(plt.rcParams['axes.prop_cycle'].by_key()['color'])","20c86215":"!ls -GFlash --color ..\/input\/m5-forecasting-accuracy\/","f5dd9402":"# Read in the data\nINPUT_DIR = '..\/input\/m5-forecasting-accuracy'\ncal = pd.read_csv(f'{INPUT_DIR}\/calendar.csv')\nstv = pd.read_csv(f'{INPUT_DIR}\/sales_train_validation.csv')\nss = pd.read_csv(f'{INPUT_DIR}\/sample_submission.csv')\nsellp = pd.read_csv(f'{INPUT_DIR}\/sell_prices.csv')","c95f9cdc":"ss.head()","afc9ed63":"stv.head()","ff6b245f":"d_cols = [c for c in stv.columns if 'd_' in c] # sales data columns\n# d_\u304c\u30ab\u30e9\u30e0\u540d\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u30ab\u30e9\u30e0\u306e\u307f\u62bd\u51fa\u3057\u3066\u914d\u5217\u3068\u3057\u3066\u4fdd\u6301\n\n# Below we are chaining the following steps in pandas:\n# \u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3067\u306f\u4ee5\u4e0b\u306b\u793a\u3059\u30c7\u30fc\u30bf\u51e6\u7406\u3092pandas\u3067\u884c\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n# 1. Select the item.\n# \u5546\u54c1\u306e\u7d5e\u308a\u8fbc\u307f\u3092\u884c\u3044\u307e\u3059\u3002\n# 2. Set the id as the index, Keep only sales data columns\n# id\u306b\u3064\u3044\u3066\u306findex\u3068\u3057\u3066\u4fdd\u6301\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u307e\u305f\u3001d_\u3068\u3064\u304f\u30ab\u30e9\u30e0\u306e\u307f\u306b\u30c7\u30fc\u30bf\u3092\u7d5e\u3063\u3066\u3044\u307e\u3059\u3002\n# 3. Transform so it's a column\n# \u3053\u306e\u307e\u307e\u3067\u306f\u884c\u306a\u306e\u3067\u3001\u5217\u306b\u5909\u3048\u307e\u3059\u3002(\u4e00\u884c\u3092\u8ee2\u7f6e\u3057\u3066\u4e00\u5217\u306b\u3057\u3066\u3044\u308b\u3002)\n# 4. Plot the data\n# \u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3044\u308b\u3002\nstv.loc[stv['id'] == 'FOODS_3_090_CA_3_validation'] \\\n    .set_index('id')[d_cols] \\\n    .T \\\n    .plot(figsize=(15, 5),\n          title='FOODS_3_090_CA_3 sales by \"d\" number',\n          color=next(color_cycle))\nplt.legend('')\nplt.show()","334e2a7a":"# Calendar data looks like this (only showing columns we care about for now)\n# \u30ab\u30ec\u30f3\u30c0\u30fccsv\u306f\u3053\u306e\u69d8\u306a\u898b\u305f\u76ee\u3092\u3057\u3066\u3044\u307e\u3059\u3002\ncal[['d','date','event_name_1','event_name_2',\n     'event_type_1','event_type_2', 'snap_CA']].head()","2b537319":"# Merge calendar on our items' data\n# \u3053\u3053\u304b\u3089\u3001\u30ab\u30ec\u30f3\u30c0\u30fccsv\u3092stv(\u5546\u54c1\u30c7\u30fc\u30bf)\u306bjoin\u3057\u3066\u3044\u304f\u3002\nexample = stv.loc[stv['id'] == 'FOODS_3_090_CA_3_validation'][d_cols].T\n#\u2191\u5148\u307b\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3068\u540c\u69d8\u306e\u51e6\u7406\u3092\u884c\u306a\u3063\u3066\u3044\u308b\u3002\nexample = example.rename(columns={8412:'FOODS_3_090_CA_3'}) # Name it correctly\n#index\u304c\u30ab\u30e9\u30e0\u540d\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u305d\u308c\u3092\u5546\u54c1ID\u306b\u5909\u66f4\nexample = example.reset_index().rename(columns={'index': 'd'}) # make the index \"d\"\n#index\u3092\u65b0\u305f\u306b\u4ed8\u4e0e\nexample = example.merge(cal, how='left', validate='1:1')\n#\u2191\u3053\u3053\u3067\u3001calendar\u3068join\u3059\u308b\u3002\nexample.set_index('date')['FOODS_3_090_CA_3'].plot(figsize=(15, 5),\n                                                   color=next(color_cycle),\n                                                   title='FOODS_3_090_CA_3 sales by actual sale dates')\nplt.show()","7a6dc2ba":"fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 4))\nexample.groupby('wday').mean()['FOODS_3_090_CA_3'] \\\n    .plot(kind='line',\n          title='average sale: day of week',\n          lw=5,\n          color=next(\n              color_cycle),\n          ax=ax1)\n#\u2191\u66dc\u65e5\u3067\u4e00\u62ec\u308a\u306b\u3057\u3066\u5e73\u5747\u3092\u3068\u308b\nexample.groupby('month').mean()['FOODS_3_090_CA_3'] \\\n    .plot(kind='line',\n          title='average sale: month',\n          lw=5,\n          color=next(\n               color_cycle),\n\n          ax=ax2)\n#\u2191\u6708\u3067\u4e00\u62ec\u308a\u306b\u3057\u3066\u5e73\u5747\u3092\u3068\u308b\nexample.groupby('year').mean()['FOODS_3_090_CA_3'] \\\n    .plot(kind='line',\n          lw=5,\n          title='average sale: year',\n          color=next(\n              color_cycle),\n\n          ax=ax3)\n#\u2191\u5e74\u3067\u4e00\u62ec\u308a\u306b\u3057\u3066\u5e73\u5747\u3092\u3068\u308b\nfig.suptitle('Trends for item: FOODS_3_090_CA_3',\n             size=20,\n             y=1.1)\nplt.tight_layout()\nplt.show()","5b396ab5":"twenty_examples = stv.sample(20, random_state=529) \\\n        .set_index('id')[d_cols] \\\n    .T \\\n    .merge(cal.set_index('d')['date'],\n           left_index=True,\n           right_index=True,\n            validate='1:1') \\\n    .set_index('date')\n# 20\u500b\u62bd\u51fa\u3057\u3066\u3044\u307e\u3059\u3002","99c9db99":"fig, axs = plt.subplots(10, 2, figsize=(15, 20))\naxs = axs.flatten()\nax_idx = 0\nfor item in twenty_examples.columns:\n    twenty_examples[item].plot(title=item,\n                              color=next(color_cycle),\n                              ax=axs[ax_idx])\n    ax_idx += 1\nplt.tight_layout()\nplt.show()\n# \u305d\u308c\u305e\u308c\u306e\u5546\u54c1\u6bce\u306b\u30c7\u30fc\u30bf\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002","40616448":"stv['cat_id'].unique()","a53e8c01":"stv.groupby('cat_id').count()['id'] \\\n    .sort_values() \\\n    .plot(kind='barh', figsize=(15, 5), title='Count of Items by Category')\nplt.show()\n# \u30ab\u30c6\u30b4\u30ea\u30fc\u6bce\u306e\u54c1\u76ee\u6570\u3092\u8868\u793a","d33e503a":"past_sales = stv.set_index('id')[d_cols] \\\n    .T \\\n    .merge(cal.set_index('d')['date'],\n           left_index=True,\n           right_index=True,\n            validate='1:1') \\\n    .set_index('date')\n# \u5546\u54c1\u306e\u30c7\u30fc\u30bf\u3092\u4e0a\u306e\u51e6\u7406\u3068\u540c\u3058\u3088\u3046\u306b\u8ee2\u7f6e\u3057\u3066\u3001\u65e5\u4ed8\u30c7\u30fc\u30bf\u3068join\u3057\u3066\u3044\u307e\u3059\u3002\nfor i in stv['cat_id'].unique():\n    items_col = [c for c in past_sales.columns if i in c]\n    past_sales[items_col] \\\n        .sum(axis=1) \\\n        .plot(figsize=(15, 5),\n              alpha=0.8,\n              title='Total Sales by Item Type')\nplt.legend(stv['cat_id'].unique())\nplt.show()\n#\u30ab\u30c6\u30b4\u30ea\u30fc\u6bce\u306e\u305d\u306e\u65e5\u306b\u58f2\u308c\u305f\u5408\u8a08\u6570\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002","d381ac7e":"store_list = sellp['store_id'].unique()\nfor s in store_list:\n    store_items = [c for c in past_sales.columns if s in c]\n    past_sales[store_items] \\\n        .sum(axis=1) \\\n        .rolling(90).mean() \\\n        .plot(figsize=(15, 5),\n              alpha=0.8,\n              title='Rolling 90 Day Average Total Sales (10 stores)')\nplt.legend(store_list)\nplt.show()","bc333089":"fig, axes = plt.subplots(5, 2, figsize=(15, 10), sharex=True)\naxes = axes.flatten()\nax_idx = 0\nfor s in store_list:\n    store_items = [c for c in past_sales.columns if s in c]\n    #\u305d\u306e\u5e97\u8217\u306b\u3042\u308b\u5546\u54c1id\u306e\u914d\u5217\u3092\u3068\u3063\u3066\u3044\u307e\u3059\u3002\n    past_sales[store_items] \\\n        .sum(axis=1) \\\n        .rolling(7).mean() \\\n        .plot(alpha=1,\n              ax=axes[ax_idx],\n              title=s,\n              lw=3,\n              color=next(color_cycle))\n    #past sales\u306f\u5546\u54c1\u306e\u58f2\u4e0a\u30c7\u30fc\u30bf\u3092\u6642\u7cfb\u5217\u30b0\u30e9\u30d5\u3067\u8868\u73fe\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u8ee2\u7f6e\u3001\u30ab\u30ec\u30f3\u30c0\u30fc\u30c7\u30fc\u30bf\u3068join\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n    #\u305d\u306e\u65e5\u306e\u5546\u54c1\u306e\u58f2\u4e0a\u306e\u5408\u8a08\u3092\u3060\u3057\u3001\n    #rolling 7\u3092\u3059\u308b\u3053\u3068\u3067\u305d\u306e\u65e5\u304b\u3089\u4e00\u9031\u9593\u524d\u307e\u3067\u306e\u58f2\u4e0a\u306e\u5e73\u5747\u3068\u3068\u3063\u3066\u3044\u307e\u3059\u3002\n    ax_idx += 1\n# plt.legend(store_list)\nplt.suptitle('Weekly Sale Trends by Store ID')\nplt.tight_layout()\nplt.show()","71bf1da5":"# ----------------------------------------------------------------------------\n# Author:  Nicolas P. Rougier\n# License: BSD\n# ----------------------------------------------------------------------------\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Polygon\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\n\ndef calmap(ax, year, data):\n    ax.tick_params('x', length=0, labelsize=\"medium\", which='major')\n    ax.tick_params('y', length=0, labelsize=\"x-small\", which='major')\n\n    # Month borders\n    xticks, labels = [], []\n    start = datetime(year,1,1).weekday()\n    for month in range(1,13):\n        first = datetime(year, month, 1)\n        last = first + relativedelta(months=1, days=-1)\n\n        y0 = first.weekday()\n        y1 = last.weekday()\n        x0 = (int(first.strftime(\"%j\"))+start-1)\/\/7\n        x1 = (int(last.strftime(\"%j\"))+start-1)\/\/7\n\n        P = [ (x0,   y0), (x0,    7),  (x1,   7),\n              (x1,   y1+1), (x1+1,  y1+1), (x1+1, 0),\n              (x0+1,  0), (x0+1,  y0) ]\n        xticks.append(x0 +(x1-x0+1)\/2)\n        labels.append(first.strftime(\"%b\"))\n        poly = Polygon(P, edgecolor=\"black\", facecolor=\"None\",\n                       linewidth=1, zorder=20, clip_on=False)\n        ax.add_artist(poly)\n    \n    ax.set_xticks(xticks)\n    ax.set_xticklabels(labels)\n    ax.set_yticks(0.5 + np.arange(7))\n    ax.set_yticklabels([\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"])\n    ax.set_title(\"{}\".format(year), weight=\"semibold\")\n    \n    # Clearing first and last day from the data\n    valid = datetime(year, 1, 1).weekday()\n    data[:valid,0] = np.nan\n    valid = datetime(year, 12, 31).weekday()\n    # data[:,x1+1:] = np.nan\n    data[valid+1:,x1] = np.nan\n\n    # Showing data\n    ax.imshow(data, extent=[0,53,0,7], zorder=10, vmin=-1, vmax=1,\n              cmap=\"RdYlBu_r\", origin=\"lower\", alpha=.75)\n# \u8ef8\u3068\u5e74\u6570\u3068\u30c7\u30fc\u30bf\u3092\u6e21\u305b\u3070\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u4f5c\u3063\u3066\u304f\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002","2892c9a2":"print('The lowest sale date was:', past_sales.sum(axis=1).sort_values().index[0])\nprint('The highest sale date was:', past_sales.sum(axis=1).sort_values(ascending=False).index[0])","25c37297":"from sklearn.preprocessing import StandardScaler\nsscale = StandardScaler()\npast_sales.index = pd.to_datetime(past_sales.index)\nfor i in stv['cat_id'].unique():\n    fig, axes = plt.subplots(3, 1, figsize=(15, 5))\n    items_col = [c for c in past_sales.columns if i in c]\n    sales2013 = past_sales.loc[past_sales.index.isin(pd.date_range('31-Dec-2012',\n                                                                   periods=371))][items_col].mean(axis=1)\n    vals = np.hstack(sscale.fit_transform(sales2013.values.reshape(-1, 1)))\n    calmap(axes[0], 2013, vals.reshape(53,7).T)\n    sales2014 = past_sales.loc[past_sales.index.isin(pd.date_range('30-Dec-2013',\n                                                                   periods=371))][items_col].mean(axis=1)\n    vals = np.hstack(sscale.fit_transform(sales2014.values.reshape(-1, 1)))\n    calmap(axes[1], 2014, vals.reshape(53,7).T)\n    sales2015 = past_sales.loc[past_sales.index.isin(pd.date_range('29-Dec-2014',\n                                                                   periods=371))][items_col].mean(axis=1)\n    vals = np.hstack(sscale.fit_transform(sales2015.values.reshape(-1, 1)))\n    calmap(axes[2], 2015, vals.reshape(53,7).T)\n    plt.suptitle(i, fontsize=15, x=0.3, y=0.98)\n    plt.tight_layout()\n    plt.show()","6eb313c6":"fig, ax = plt.subplots(figsize=(15, 5))\nstores = []\nfor store, d in sellp.query('item_id == \"FOODS_3_090\"').groupby('store_id'):\n    d.plot(x='wm_yr_wk',\n          y='sell_price',\n          style='.',\n          color=next(color_cycle),\n          figsize=(15, 5),\n          title='FOODS_3_090 sale price over time',\n         ax=ax,\n          legend=store)\n    stores.append(store)\n    # \u307e\u305a\u3001\u5546\u54c1ID\u3067\u7d5e\u308a\u8fbc\u307f\u3001\u5e97\u3054\u3068\u306bgroupby\u3057\u307e\u3059\u3002\n    # \u8ca9\u58f2\u4fa1\u683c\u3092\u305d\u308c\u305e\u308c\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\u3002\n    plt.legend()\nplt.legend(stores)\nplt.show()","52bcf667":"sellp['Category'] = sellp['item_id'].str.split('_', expand=True)[0]\nfig, axs = plt.subplots(1, 3, figsize=(15, 4))\ni = 0\nfor cat, d in sellp.groupby('Category'):\n    ax = d['sell_price'].apply(np.log1p) \\\n        .plot(kind='hist',\n                         bins=20,\n                         title=f'Distribution of {cat} prices',\n                         ax=axs[i],\n                                         color=next(color_cycle))\n    # \u8ca9\u58f2\u5358\u4fa1\u3092\u30ab\u30c6\u30b4\u30ea\u30fc\u3054\u3068\u306bgroup by\u3059\u308b\u3002\n    # \u8ca9\u58f2\u5358\u4fa1\u3092\u81ea\u7136\u5bfe\u6570\u3092\u5e95\u306blog\u3092\u3068\u308a\u3001\u3069\u306e\u91d1\u984d\u7bc4\u56f2\u306b\u3069\u306e\u7a0b\u5ea6\u306e\u5546\u54c1\u6570\u304c\u5206\u5e03\u3057\u3066\u3044\u308b\u304b\u3092\u8868\u793a\u3057\u3066\u3044\u308b\u3002\n    ax.set_xlabel('Log(price)')\n    i += 1\nplt.tight_layout()","c39e7a6b":"thirty_day_avg_map = stv.set_index('id')[d_cols[-30:]].mean(axis=1).to_dict()\nfcols = [f for f in ss.columns if 'F' in f]\nfor f in fcols:\n    ss[f] = ss['id'].map(thirty_day_avg_map).fillna(0)\n    \nss.to_csv('submission.csv', index=False)","2d9c410c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nfrom sklearn import preprocessing, metrics\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM,Dropout\nfrom keras.layers import RepeatVector,TimeDistributed\nfrom numpy import array\nfrom keras.models import Sequential, load_model\n#import utils_paths\nimport re\nfrom tqdm import tqdm\nimport os","915ea4d1":"train_sales = stv\ncalendar = cal\nsellp = pd.read_csv(f'{INPUT_DIR}\/sell_prices.csv')\nsell_prices = sellp\nsubmission_file = ss","b123eeb0":"def transform(data):\n    \n    nan_features = ['event_name_1', 'event_type_1', 'event_name_2', 'event_type_2']\n    for feature in nan_features:\n        data[feature].fillna('unknown', inplace = True)\n        \n    cat = ['event_name_1','event_type_1','event_name_2','event_type_2','snap_CA','snap_TX','snap_WI']\n    for feature in cat:\n        encoder = preprocessing.LabelEncoder()\n        data[feature] = encoder.fit_transform(data[feature])\n    \n    return data\n#calendar\u306e\u4f55\u3082\u306a\u3044\u65e5\u3092unknown\u3067\u57cb\u3081\u3066\u3001label encoder\u306b\u3088\u3063\u3066\u51e6\u7406\u3057\u3084\u3059\u3044\u5f62\u306b\u5909\u3048\u305f\u3002","aeded676":"days = range(1, 1970)\ntime_series_columns = [f'd_{i}' for i in days]\ntransfer_cal = pd.DataFrame(calendar[['event_name_1','event_type_1','event_name_2','event_type_2','snap_CA','snap_TX','snap_WI']].values.T, index=['event_name_1','event_type_1','event_name_2','event_type_2','snap_CA','snap_TX','snap_WI'], columns= time_series_columns)\ntransfer_cal = transfer_cal.fillna(0)\nevent_name_1_se = transfer_cal.loc['event_name_1'].apply(lambda x: x if re.search(\"^\\d+$\", str(x)) else np.nan).fillna(10)\nevent_name_2_se = transfer_cal.loc['event_name_2'].apply(lambda x: x if re.search(\"^\\d+$\", str(x)) else np.nan).fillna(10)\n#\u2191event name\u304c\u5165\u3063\u3066\u3044\u308b\u3082\u306e\u3092nan\u306b\u3057\u305f\u5f8c\u300110\u306b\u3057\u3066\u3044\u308b\u3002","d22036be":"calendar['date'] = pd.to_datetime(calendar['date'])\ncalendar = calendar[calendar['date']>= '2016-1-27']  #reduce memory\n#\u4f7f\u3046\u30c7\u30fc\u30bf\u3092\u5c11\u306a\u304f\u3057\u307e\u3059\u3002\ncalendar= transform(calendar)\n# Attempts to convert events into time series data.\ntransfer_cal = pd.DataFrame(calendar[['event_name_1','event_type_1','event_name_2','event_type_2','snap_CA','snap_TX','snap_WI']].values.T,\n                            index=['event_name_1','event_type_1','event_name_2','event_type_2','snap_CA','snap_TX','snap_WI'])\ntransfer_cal","409a7ae5":"price_fea = calendar[['wm_yr_wk','date']].merge(sell_prices, on = ['wm_yr_wk'], how = 'left')\n#\u8ca9\u58f2\u4fa1\u683c\u306b\u5bfe\u3057\u3066\u3001calendar\u3092\u7d50\u5408\u3057\u305f\u3002\nprice_fea['id'] = price_fea['item_id']+'_'+price_fea['store_id']+'_validation'\ndf = price_fea.pivot('id','date','sell_price')\n#\u5404\u5546\u54c1\u3092\u4e00\u884c\u306b\u3057\u3066\u3001\u5546\u54c1\u306e\u5024\u6bb5\u306e\u79fb\u308a\u5909\u308f\u308a\u3092\u8868\u3057\u305f\u3002","7e31da60":"price_df = train_sales.merge(df,on=['id'],how= 'left').iloc[:,-145:]\nprice_df.index = train_sales.id\nprice_df.head()\n#train sales\u306b\u5024\u6bb5\u306e\u79fb\u308a\u5909\u308f\u308a\u3092\u306e\u30c7\u30fc\u30bf\u3092join\u3057\u305f\u3002","b9bc5b23":"days = range(1, 1913 + 1)\ntime_series_columns = [f'd_{i}' for i in days]\ntime_series_data = train_sales[time_series_columns]  #Get time series data\n#train_sales\u304b\u3089\u58f2\u308a\u4e0a\u3052\u30c7\u30fc\u30bf\u306e\u307f\u3092\u62bd\u51fa","e378371a":"#show last 28days\nfigsize = (25, 5)\ntime_series_data.iloc[15, -28:].plot(figsize=figsize)\n#15\u884c\u76ee\u306e\u6700\u65b028\u65e5\u306e\u58f2\u308a\u4e0a\u3052\u30c7\u30fc\u30bf\u3092\u8868\u793a\u3057\u3066\u3044\u308b\u3002\nplt.grid()\n#The last 28 days\nprint(time_series_data.iloc[0, 1885:].shape)","276f2b55":"def min_max(df):\n    return (df-df.mean())\/df.std()  #scale","1dfb7be1":"for i in range(2,6):\n    price_sell = calendar.merge(sell_prices[sell_prices.item_id=='HOBBIES_1_00'+str(i)][sell_prices.store_id=='CA_1'], on = ['wm_yr_wk'], how = 'left')\n    #\u5546\u54c1\u306e\u7d5e\u308a\u8fbc\u307f\u3092\u884c\u3046\n    fig =plt.figure(figsize= (20, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    ax.plot(min_max(time_series_data.iloc[i].values))\n    ax.plot(min_max(price_sell.sell_price),'-o')\n    plt.legend(['sale','price'])\n    ax.set_title(str(i))\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Sales')","c14de6af":"for i in range(5,10):\n    fig =plt.figure(figsize= (20, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    #ax.bar(x = range(len(transfer_cal.loc['snap_WI'][1500:1800].values)),height = transfer_cal.loc['snap_TX'][1500:1800].values,label='snap_TX',facecolor='red')\n    ax.plot(time_series_data.iloc[i, 500:800].values,label='sales')\n    #5\u756a\u76ee\u304b\u308910\u756a\u76ee\u307e\u3067\u306e\u5546\u54c1\u306b\u3064\u3044\u3066\u3001\u58f2\u4e0a\u3068\u30a4\u30d9\u30f3\u30c8\u306e\u76f8\u95a2\u3092\u793a\u3057\u3066\u3044\u308b\u3002\n    ax.bar(x = range(300),height = event_name_1_se[500:800].values*0.05*time_series_data.iloc[i, 500:800].values.max(),label='type_1',facecolor='black',width=1.2)\n    ax.bar(x = range(300),height = event_name_2_se[500:800].values*0.05*time_series_data.iloc[i, 500:800].values.max(),label='type_2',facecolor='orange',width=1.2)\n    plt.legend(['sale','event_1','event_2'])\n    ax.set_title(str(i))\n\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Sales')","22703809":"for i in train_sales.cat_id.unique():\n    fig =plt.figure(figsize= (20, 5))\n    for j in range(10):\n        ax = fig.add_subplot(1, 1, 1)\n        ax.plot(train_sales[train_sales.cat_id==i].iloc[j, :][time_series_columns].values)\n        #\u58f2\u4e0a\u30c7\u30fc\u30bf\u304b\u3089\u30ab\u30c6\u30b4\u30ea\u30fcid\u3067\u7d5e\u308a\u8fbc\u3080\n        #\u7d5e\u308a\u8fbc\u307e\u308c\u305f\u5546\u54c1\u30c7\u30fc\u30bf\u306e\u4e0a\u304b\u308910\u500b\u306e\u5546\u54c1\u306e\u5024\u6bb5\u306e\u79fb\u308a\u5909\u308f\u308a\u3092\n        ax.set_title(str(i))\n        ax.set_xlabel('Time')\n        ax.set_ylabel('Sales')","7c96b0d5":"for i in train_sales.dept_id.unique():\n    fig =plt.figure(figsize= (20, 5))\n    for j in range(10):\n        ax = fig.add_subplot(1, 1, 1)\n        ax.plot(train_sales[train_sales.dept_id==i].iloc[j, :][time_series_columns].values)\n        ax.set_title(str(i))\n        ax.set_xlabel('Time')\n        ax.set_ylabel('Sales')\n#\u5546\u54c1\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u3092\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u5206\u3051\u305f\u90e8\u9580\u306b\u3064\u3044\u3066\u3001\u4e0a\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u3068\u540c\u3058\u3088\u3046\u306b\u58f2\u4e0a\u306e\u5909\u5316\u30b0\u30e9\u30d5\u3092\u3060\u3059\u3002\n#\u90e8\u9580\u3054\u3068\u306b\u307f\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u30ab\u30c6\u30b4\u30ea\u30fc\u6bce\u306e\u58f2\u4e0a\u306e\u3070\u3089\u3064\u304d\u304c\u3069\u306e\u90e8\u9580\u306e\u5546\u54c1\u306b\u8d77\u56e0\u3057\u305f\u3082\u306e\u3067\u3042\u3063\u305f\u306e\u304b\u304c\u308f","2f21e30c":"for i in train_sales.store_id.unique():\n    fig =plt.figure(figsize= (20, 5))\n    for j in range(10):\n        ax = fig.add_subplot(1, 1, 1)\n        ax.plot(train_sales[train_sales.store_id==i].iloc[j, :][time_series_columns].values)\n        ax.set_title(str(i))\n        ax.set_xlabel('Time')\n        ax.set_ylabel('Sales')\n#\u5e97\u6bce\u306b\u58f2\u4e0a\u306e\u5909\u5316\u3092\u898b\u3066\u3044\u308b\u3002\n","0014d523":"\nX = []   #build a data with two features(salse and event1)\n# \u58f2\u4e0a\u30c7\u30fc\u30bf\u3068event1\u306e\u30c7\u30fc\u30bf\u306e\u307f\u3092\u683c\u7d0d\u3059\u308b\u3002\nfor i in tqdm(range(time_series_data.shape[0])):#30490\u5217\u306b\u3064\u3044\u3066\u3001\u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc\u4ed8\u304d\u306e\u7e70\u308a\u8fd4\u3057\u3092\u884c\u3046\n    X.append([list(t) for t in zip(transfer_cal.loc['event_name_1'][-(100+28):-(28)],\n                                   transfer_cal.loc['event_type_1'][-(100+28):-(28)],\n                                   transfer_cal.loc['event_name_2'][-(100+28):-(28)],     #emmmm.....Those features didn't work for me...\n                                   transfer_cal.loc['event_type_2'][-(100+28):-(28)],\n                                   transfer_cal.loc['snap_CA'][-(100+28):-(28)],\n                                   transfer_cal.loc['snap_TX'][-(100+28):-(28)],\n                                   transfer_cal.loc['snap_WI'][-(100+28):-(28)],\n                                   price_df.iloc[i][-(100+28):-(28)],\n                                   time_series_data.iloc[i][-100:])]) \n    #for t in zip(A, B, C, ...)\u306b\u3088\u3063\u3066\u3001A, B, C, ...\u306e\u8981\u7d20\u305d\u308c\u305e\u308c\u306e\u62bd\u51fa\u3092\u9806\u756a\u306b\u884c\u306a\u3063\u3066\u3044\u308b\n    #transfer col\u306ftrain\u3092label encoding\u3057\u305f\u3082\u306e\n    #price df\u306f\u5546\u54c1\u6bce\u306e\u5024\u6bb5\u306e\u79fb\u308a\u5909\u308f\u308a\u3092\u8868\u3057\u305f\u3082\u306e\n    #time_series_data\u306f\u305d\u306e\u5546\u54c1\u306e\u58f2\u4e0a\u3092\u8868\u3057\u305f\u3082\u306e\n    #\u884c\u5217\u306e\u5f62\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n    #\u307e\u305a\u3001\u5546\u54c1\u6bce\u306e\u8ef8\u304c\u5b58\u5728\u3059\u308b\n    #\u5546\u54c1\u6bce\u306b\u6b21\u306e\u30c7\u30fc\u30bf\u304c\u5165\u308c\u3089\u308c\u308b\n    #\u65e5\u4ed8\u6bce\u306b\u884c\u5217\u304c\u7528\u610f\u3055\u308c\u308b\n    #\u305d\u306e\u65e5\u4ed8\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u60c5\u5831\u3001\u305d\u306e\u65e5\u306e\u4fa1\u683c\u3001\u58f2\u4e0a\u304c\u5165\u308c\u3089\u308c\u308b\u3002\n    \n    #todo \u7279\u5fb4\u91cf\u3092\u5897\u3084\u3057\u3064\u3064\u6e1b\u3089\u3059\n    #\u307e\u305astore\u3068cat\u306eid\u306f\u5927\u4e8b\u3053\u308c\u306f\u5165\u308c\u308b\n    #state\u3082\u6b21\u304f\u3089\u3044\u306b\u5927\u4e8b\n    \nX = np.asarray(X, dtype=np.float32)","96c5209e":"transfer_cal.loc['event_name_1'][-(100+28):-(28)]","dd401665":"transfer_cal.head(50)","0805f5c1":"\ndef Normalize(list):\n    list = np.array(list)\n    #\u914d\u5217\u306e\u72b6\u614b\u304b\u3089\u884c\u5217\u306b\u5909\u63db\n    low, high = np.percentile(list, [0, 100])#todo \u3053\u3053\u306e\u7d30\u304b\u3044\u52d5\u304d\u304c\u8ffd\u3048\u3066\u3044\u306a\u3044\n    delta = high - low\n    if delta != 0:\n        for i in range(0, len(list)):\n            list[i] = (list[i]-low)\/delta\n    return  list,low,high\n#[0 1]\u306b\u5909\u63db\n\ndef FNoramlize(list,low,high):\n    delta = high - low\n    if delta != 0:\n        for i in range(0, len(list)):\n            list[i] = list[i]*delta + low\n    return list\n#normalize\u3055\u308c\u305f\u5024\u3092\u5143\u306b\u623b\u3059\n\ndef Normalize2(list,low,high):\n    list = np.array(list)\n    delta = high - low\n    if delta != 0:\n        for i in range(0, len(list)):\n            list[i] = (list[i]-low)\/delta\n    return  list\n","98f7d461":"np.random.seed(7)\n\n ## I only use the last 56 days for train_data.\nif __name__ == '__main__':\n    n_steps = 28\n    train_n,train_low,train_high = Normalize(X[:,-(n_steps*2):,:])\n    #X\u306e\u30c7\u30fc\u30bf\u306e\u3046\u3061\u300156\u65e5\u9593\u306e\u307f\u306e\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\u3001\u305d\u308c\u3092Normalize\u3059\u308b\u3002\n    X_train = train_n[:,-28*2:-28,:]\n    #56\u65e5\u524d\u304b\u308928\u65e5\u524d\u307e\u3067\u3092\u9078\u629e\n    y = train_n[:,-28:,8]  #\u3053\u3053\u306b\u306f\u5168\u7a2e\u985e\u306e\u5546\u54c1\u306e28\u65e5\u9593\u306e\u58f2\u4e0a\u306e\u60c5\u5831\u306e\u307f\u62bd\u51fa\n    # reshape from [samples, timesteps] into [samples, timesteps, features]\n    n_features = 9\n    n_out_seq_length =28\n    num_y = 1\n    X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], n_features))\n    y = y.reshape((y.shape[0], y.shape[1], 1))\n    print(X_train.shape)\n    # define model\n\n    model = Sequential()\n\n    \n    model.add(LSTM(128, activation='relu', input_shape=(28, n_features),return_sequences=False))\n    model.add(RepeatVector(n_out_seq_length))\n    model.add(LSTM(32, activation='relu',return_sequences=True))\n   #model.add(Dropout(0.1))  \n    model.add(TimeDistributed(Dense(num_y)))   # num_y means the shape of y,in some problem(like translate), it can be many.\n                                                #In that case, you should set the  activation= 'softmax'\n    model.compile(optimizer='adam', loss='mse')\n    # demonstrate prediction\n    model.fit(X_train, y, epochs=10, batch_size=1000)","566fb871":"num = 30490 # number of traindata\nx_input = array(X_train[:,-n_steps*1:])\nx_input = x_input.reshape((num, n_steps*1, n_features))\n#x_train\u306f\u3082\u3068\u3082\u3068\u672a\u676528\u65e5\u5206\u307e\u3067\u306e\u30c7\u30fc\u30bf\u3092\u6301\u3063\u3066\u3044\u308b\u3002\u305d\u308c\u3092input\u30c7\u30fc\u30bf\u3068\u3057\u305f\nprint(x_input.shape)\n#x_input = Normalize2(x_input,train_low,train_high)\nyhat = model.predict(x_input[:,-n_steps:], verbose=0)\nx_input=np.concatenate((x_input[:,:,8].reshape(x_input.shape[0],x_input.shape[1]),yhat.astype(np.float32).reshape(x_input.shape[0],x_input.shape[1])),axis=1).reshape((x_input.shape[0],x_input.shape[1]+28,1))\n#print(yhat)\nprint(x_input.shape)\nx_input = FNoramlize(x_input,train_low,train_high)\nx_input = np.rint(x_input)\n#\u6574\u6570\u306b\u3057\u3066\u3044\u308b\nforecast = pd.DataFrame(x_input.reshape(x_input.shape[0],x_input.shape[1])).iloc[:,-28:]\nforecast.columns = [f'F{i}' for i in range(1, forecast.shape[1] + 1)]\nforecast[forecast < 0] =0\nforecast.head()\nvalidation_ids = train_sales['id'].values\nevaluation_ids = [i.replace('validation', 'evaluation') for i in validation_ids]\nids = np.concatenate([validation_ids, evaluation_ids])\npredictions = pd.DataFrame(ids, columns=['id'])\nforecast = pd.concat([forecast]*2).reset_index(drop=True)\npredictions = pd.concat([predictions, forecast], axis=1)\npredictions.to_csv('submission.csv', index=False)  #Generate the csv file.","adc05d41":"import xgboost as xgb\nimport lightgbm as lgb","65d1d5c8":"train_sales = stv\ncalendar = cal\nsellp = pd.read_csv(f'{INPUT_DIR}\/sell_prices.csv')\nsell_prices = sellp\nsubmission_file = ss","ae9b2fed":"sales_train_validation.csv\u304b\u3089\u3001\u58f2\u4e0a\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n- \u305d\u308c\u305e\u308c\u306e\u5217\u306f1\u65e5\u76ee\u304b\u30891913\u65e5\u76ee\u307e\u3067\u306e\u58f2\u4e0a\u6570\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u305d\u306e\u5546\u54c1\u306e\u90e8\u9580\u540d\u3068\u30ab\u30c6\u30b4\u30ea\u30fc\u540d\u3082\u30c7\u30fc\u30bf\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u5546\u54c1\u306e\u58f2\u4e0a\u3092\u5e97\u6bce\u306b\u884c\u3092\u5206\u3051\u3066\u3044\u308b\u305f\u3081\u3001\u5e97\u540d\u3068\u305d\u306e\u5e97\u306e\u5b58\u5728\u3059\u308b\u5dde\u540d\u3082\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\u3002\n- stage1\u3067\u306f1914\u65e5\u76ee\u304b\u30891941\u65e5\u76ee\u307e\u3067\u306e\u4e88\u6e2c\u3092\u884c\u3044\u307e\u3059\u3002\n- \u3053\u306e\u30b3\u30f3\u30da\u306e\u6700\u7d42\u8a55\u4fa1\u306f1942\u65e5\u76ee\u304b\u30891969\u65e5\u76ee\u307e\u3067\u306e\u4e88\u6e2c\u7d50\u679c\u306b\u57fa\u3065\u3044\u3066\u884c\u3044\u307e\u3059\u3002","6bc971f7":"\u58f2\u4e0a\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u5546\u54c1\u306e\u30bf\u30a4\u30d7\u3054\u3068\u306b\u5206\u3051\u3066\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n- \u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u306b\u306f\u4ee5\u4e0b\u306e\u69d8\u306a\u5546\u54c1\u30bf\u30a4\u30d7\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n  - \u5a2f\u697d\u54c1\n  - \u751f\u6d3b\u5fc5\u9700\u54c1\n  - \u98df\u6599\u54c1\n- \u305d\u308c\u305e\u308c\u306e\u5546\u54c1\u30bf\u30a4\u30d7\u306b\u3064\u3044\u3066\u30c7\u30fc\u30bf\u3092\u96c6\u8a08\u3057\u3001\u30b0\u30e9\u30d5\u306b\u8868\u793a\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002","628579a2":"We are given historic sales data in the `sales_train_validation` dataset.\n- rows exist in this dataset for days d_1 to d_1913. We are given the department, category, state, and store id of the item.\n- d_1914 - d_1941 represents the `validation` rows which we will predict in stage 1\n- d_1942 - d_1969 represents the `evaluation` rows which we will predict for the final competition standings.","9b1b0875":"## TODO\n- Simple prediction based on historical average sale by day of week\n- Facebook prophet model\n- lgbm\/xgb model based on day features","8d400902":"\u8ca9\u58f2\u4fa1\u683c\n\u305d\u308c\u305e\u308c\u306e\u5546\u54c1\u306e\u8ca9\u58f2\u5358\u4fa1\u306e\u63a8\u79fb\u304c\u30c7\u30fc\u30bf\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u5148\u307b\u3069\u9078\u3093\u3060\u5546\u54c1\u306b\u3064\u3044\u3066\u3001\u3069\u306e\u3088\u3046\u306b\u63a8\u79fb\u3057\u3066\u3044\u304f\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n- \u3053\u306e\u5546\u54c1\u306e\u8ca9\u58f2\u4fa1\u683c\u306f\u5f90\u3005\u306b\u4e0a\u304c\u3063\u3066\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n- \u5e97\u8217\u3054\u3068\u306b\u9055\u3046\u5024\u6bb5\u3092\u3064\u3051\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002","253a0710":"\u5546\u54c1\u306e\u4fa1\u683c\u3068\u58f2\u308a\u4e0a\u3052\u306e\u95a2\u4fc2\u6027\u3092\u307f\u308b","6cd3eb43":"\u3053\u3053\u304b\u3089\u3044\u304f\u3064\u304b\u8aad\u307f\u53d6\u308c\u308b\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n- 1\/1(\u30af\u30ea\u30b9\u30de\u30b9\u3068\u304b\u5927\u6666\u65e5\u306e\u53ef\u80fd\u6027\u6709)\u306b\u306f\u6bce\u5e74\u5168\u5e97\u4f11\u696d\u306b\u306a\u3063\u3066\u3044\u308b\u4e8b\u3067\u3059\u3002\n- \u5168\u4f53\u7684\u306b\u53f3\u80a9\u4e0a\u304c\u308a\u3067\u306f\u3042\u308b\u3002(\u3053\u308c\u304c\u51fa\u5e97\u6570\u306e\u5897\u52a0\u306b\u3088\u308b\u3082\u306e\u306a\u306e\u304b\u3001\u96c6\u5ba2\u529b\u30a2\u30c3\u30d7\u306b\u3088\u308b\u3082\u306e\u306a\u306e\u304b\u306a\u3069\u306f\u308f\u304b\u3089\u306a\u3044\u3002)\n- \u4f55\u5ea6\u304b\u968e\u6bb5\u72b6\u306b\u4e0a\u304c\u3063\u3066\u3044\u308b\u69d8\u306b\u898b\u3048\u308b\u90e8\u5206\u304c\u3042\u308b\u3002(2013\u5e74\u30842015\u5e74\u306a\u3069)","cd30128f":"\u5148\u6708\u306e\u5e73\u5747\u3092\u4e88\u6e2c\u3068\u3057\u3066\u51fa\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002","e25e8e3f":"## Merging the data with real dates\n- We are given a calendar with additional information about past and future dates.\n- The calendar data can be merged with our days data\n- From this we can find weekly and annual trends","ae16014a":"\u58f2\u308a\u4e0a\u3052\u306e\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u8868\u793a","20fedb37":"\u30c7\u30fc\u30bf\u304c\u5927\u304d\u3044\u305f\u3081\u3001\u6b63\u898f\u5316\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nlow, high\u3068\u3044\u3046\u5909\u6570\u306f\u3001train data\u3092\u666e\u901a\u306e\u30b5\u30a4\u30ba\u306b\u623b\u3059\u6642\u306e\u70ba\u306b\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\u3002","19771ad0":"\u58f2\u308a\u4e0a\u3052\u3068\u30a4\u30d9\u30f3\u30c8\u306e\u95a2\u4fc2\u6027\u3092\u307f\u308b\u3002","f8c41a21":"Looking at the same data a different way, we can plot a rolling 7 day total demand count by store. Note clearly that some stores have abrupt changes in their demand, it could be that the store expanded or a new competitor was built near by. Either way this is imporant to note when creating predictive models about demand pattern. ","517ef9f9":"# Lets look at a lot of different items!\n- Lets put it all together to plot 20 different items and their sales\n- Some observations from these plots:\n    - It is common to see an item unavailable for a period of time.\n    - Some items only sell 1 or less in a day, making it very hard to predict.\n    - Other items show spikes in their demand (super bowl sunday?) possibly the \"events\" provided to us could help with these.","f575b457":"\u58f2\u308a\u4e0a\u3052\u3092\u5404\u65e5\u4ed8\u306b\u7d10\u3065\u3044\u305f\u5909\u6570\u306b\u57fa\u3065\u3044\u3066\u96c6\u8a08\u3057\u76f4\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u3053\u308c\u304b\u3089\u4ee5\u4e0b\u306e\u65e5\u4ed8\u6307\u6a19\u306b\u57fa\u3065\u3044\u3066\u3001FOODS_3_090_CA_3\u306e\u5206\u6790\u3092\u884c\u306a\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n- \u66dc\u65e5\n- \u6708\n- \u5e74","e2a51393":"![](https:\/\/ae01.alicdn.com\/kf\/H0d1d47c633fb4964804a53d6ad248967T.jpg)\ntimedistributed layer\u306fone to many\u3082\u3057\u304f\u306fmany to many\u306e\u69cb\u9020\u3092\u52a0\u3048\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u3001model\u306e\u6b21\u5143\u3092\u5897\u3084\u3057\u307e\u3059\u3002","d87c7ade":"# \u7d50\u8ad6\nencode-decode model\u3068\u3044\u304f\u3064\u304b\u306e\u7279\u5fb4\u91cf\u3092\u7528\u3044\u305f\u304c\u3001\u5927\u5e45\u306a\u6539\u5584\u306f\u5f97\u3089\u308c\u306a\u304b\u3063\u305f","5879a0be":"TODO\n- \u305d\u306e\u66dc\u65e5\u306e\u5e73\u5747\u58f2\u308a\u4e0a\u3052\u306b\u57fa\u3065\u3044\u305f\u7c21\u5358\u306a\u4e88\u6e2c\u306e\u4f5c\u6210\n- facebook\u306eprophet\u3092\u7528\u3044\u305f\u30e2\u30c7\u30eb\n- lgbm\/xgb\u3067\u306e\u4e88\u60f3","f78393ab":"# A simple submission\n- Submit the average value from the past 30 days","6bb0f6ea":"\u3053\u306enotebook\u306e\u76ee\u7684\u306f\u53c2\u52a0\u8005\u306bM5\u30b3\u30f3\u30da\u306e\u6982\u8981\u3092\u3056\u3063\u3068\u7406\u89e3\u3057\u3066\u3082\u3089\u3046\u4e8b\u306b\u3042\u308a\u307e\u3059\u3002\n\u8aad\u307f\u7d42\u3048\u308b\u9803\u306b\u306f\u300c\u30b3\u30f3\u30da\u306e\u76ee\u6a19\u300d\u3001\u300c\u30c7\u30fc\u30bf\u306e\u6982\u8981\u300d\u3001\u300c\u8a55\u4fa1\u6307\u6a19\u300d\u306a\u3069\u3092\u7406\u89e3\u3067\u304d\u3066\u3044\u308b\u4e8b\u3067\u3057\u3087\u3046\u3002\n\n\u4ee5\u4e0b\u306b\u30b3\u30f3\u30da\u306edescription\u3092\u8981\u7d04\u3057\u305f\u7269\u3092\u7b87\u6761\u66f8\u304d\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n- \u4e26\u884c\u3057\u3066\u4e8c\u3064\u306e\u30b3\u30f3\u30da\u304c\u5b9f\u65bd\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u3061\u3089\u306fAccuracy\u3067\u3082\u3046\u7247\u65b9\u306fUncertainty\u3067\u3059\u3002\n\u3000- accuracy\u30b3\u30f3\u30da\u306fWeighted Root Mean Squared Scaled Error (RMSSE)\u3092\u6307\u6a19\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000- uncertainty\u30b3\u30f3\u30da\u306fWeighted Scaled Pinball Loss (WSPL)\u3092\u6307\u6a19\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n- \u4eca\u56de\u306e\u30b3\u30f3\u30da\u306fwal-mart\u306e\u58f2\u308a\u4e0a\u3052\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u304c\u76ee\u6a19\u3067\u3059\u3002\n- \u30c7\u30fc\u30bf\u306b\u306f\u3001\u5dde\u540d\u3001\u5546\u54c1\u306e--\u3001\u90e8\u7f72\u3001\u54c1\u76ee\u3001\u5e97\u8217\u306e\u8a73\u7d30\u306a\u3069\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n- \u3053\u308c\u3089\u306b\u52a0\u3048\u3066\u3001\u4fa1\u683c\u3084\u5e83\u544a\u3001\u66dc\u65e5\u3084\u30a4\u30d9\u30f3\u30c8\u306a\u3069\u306e\u8aac\u660e\u5909\u6570\u3082\u307e\u305f\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002","b2b4283b":"# Sales by Store\nWe are provided data for 10 unique stores. What are the total sales by stores?\n- Note that some stores are more steady than others.\n- CA_2 seems to have a big change occur in 2015","3dc0c4cd":"# Sales broken down by time variables\n- Now that we have our example item lets see how it sells by:\n    - Day of the week\n    - Month\n    - Year","b1017a59":"# Data Files\n- `calendar.csv` - Contains information about the dates on which the products are sold.\n- `sales_train_validation.csv` - Contains the historical daily unit sales data per product and store [d_1 - d_1913]\n- `sample_submission.csv` - The correct format for submissions. Reference the Evaluation tab for more info.\n- `sell_prices.csv` - Contains information about the price of the products sold per store and date.\n\nNot available yet:\n- `sales_train_evaluation.csv` - Available one month before competition deadline. Will include sales [d_1 - d_1941]","46be1922":"# \u500b\u4eba\u7684todo\n- lightGBM\u3092\u8a66\u3059\n- xgb boost\u3092\u8a66\u3059\u3002\n- \u3061\u3087\u3046\u3069\u4e00\u5e74\u524d\u306e\u60c5\u5831\u3082\u542b\u3081\u308b\n- \u3082\u3057\u304f\u306f\u3061\u3087\u3046\u3069\u4e00\u5e74\u524d\u306e\u60c5\u5831\u306e\u307f\u3092\u7528\u3044\u308b\n- LSTM\u306b\u4ed6\u306e\u7279\u5fb4\u91cf\u3092\u7a81\u3063\u8fbc\u3080\n- \u795d\u65e5\u306e\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b","ab9199b6":"\u4e0a\u3067\u306f\u65e5\u6bce\u306b\u30c7\u30fc\u30bf\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u6b21\u306f\u9031\u3054\u3068\u306b\u51fa\u3057\u3066\u898b\u307e\u3057\u3087\u3046\u3002\n\u3044\u304f\u3064\u304b\u306e\u5e97\u8217\u306f\u6025\u6fc0\u306a\u58f2\u4e0a\u306e\u5909\u5316\u304c\u3042\u308b\u4e8b\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u304a\u305d\u3089\u304f\u5e97\u8217\u306e\u5897\u7bc9\u3084\u7af6\u5408\u4ed6\u793e\u306e\u5e97\u8217\u304c\u8fd1\u304f\u306b\u3067\u304d\u305f\u3053\u3068\u306b\u8d77\u56e0\u3059\u308b\u306e\u3067\u3057\u3087\u3046\u3002\n\u3069\u3061\u3089\u306b\u3057\u3066\u3082\u3001\u58f2\u4e0a\u4e88\u6e2c\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u969b\u306b\u3053\u306e\u6025\u6fc0\u306a\u5909\u5316\u3092\u52a0\u5473\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002","24807553":"LSTM model\u306e\u4f5c\u6210\n- lstm\u3068dense\u5c64\u3067\u69cb\u6210\u3057\u307e\u3059\n- input\u306b\u4f7f\u3046\u306e\u306f\u4e8c\u3064\u306e\u7279\u5fb4\u91cf\u306e\u307f\u3067\u3001\u65e5\u6570\u306f56\u65e5\u9593\u306e\u307f\u306b\u3057\u307e\u3059\u3002","669e6329":"\u65e5\u672c\u4eba\u306e\u65b9\u304c\u59cb\u3081\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u65e5\u672c\u8a9e\u8a33\u3084\u89e3\u8aac\u3092\u4ed8\u3051\u52a0\u3048\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n(\u3053\u3061\u3089\u306enotebook)[https:\/\/www.kaggle.com\/robikscube\/m5-forecasting-starter-data-exploration]\u3092\u30d9\u30fc\u30b9\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u81ea\u5206\u306a\u308a\u306e\u5206\u6790\u3084model\u306a\u3069\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3067\u3059\u3002","bc11e01f":"\u5546\u54c1\u306e\u4fa1\u683c\u3068\u58f2\u308a\u4e0a\u3052\u306e\u9593\u306b\u306f\u660e\u78ba\u306a\u95a2\u4fc2\u304c\u7121\u3044\u3088\u3046\u306b\u611f\u3058\u308b\u3002","165f5c51":"\u5404\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306e\u8aac\u660e\n- calendar.csv \u305d\u306e\u65e5\u306e\u30a4\u30d9\u30f3\u30c8\u3001\u30a4\u30d9\u30f3\u30c8\u7a2e\u5225\u3001\u66dc\u65e5\u306a\u3069\u65e5\u4ed8\u306b\u7d10\u3065\u3044\u305f\u30c7\u30fc\u30bf\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n- sales_train_validation.csv \u5546\u54c1\u6bce\u3068\u5e97\u6bce\u306b\u5206\u3051\u305f\u306e\u58f2\u308a\u4e0a\u3052\u6570\u3092\u8868\u3057\u3066\u3044\u308b\u3002(state_id\u306fstore_id\u304b\u3089\u4e00\u610f\u306b\u5b9a\u307e\u308b\u3001\u3053\u308c\u306fitem_id\u2192dept_id, cat_id\u3082\u540c\u3058\u3002)\n- sample_submission.csv \u4e88\u6e2c\u7d50\u679c\u3068\u3057\u3066\u63d0\u51fa\u3059\u308bcsv\u306e\u4f8b\n- sell_prices.csv \u305d\u306e\u5546\u54c1\u306e\u5e97\u3068\u65e5\u4ed8\u3054\u3068\u306e\u4fa1\u683c","e1f8b807":"\u5e97\u8217\u6bce\u306e\u58f2\u4e0a\n\u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u306f10\u5e97\u8217\u306e\u3082\u306e\u3067\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u5e97\u8217\u6bce\u306b\u58f2\u4e0a\u3092\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u203b\u2193\u30c7\u30fc\u30bf\u304b\u3089\u5f97\u3089\u308c\u305f\u77e5\u898b\n- \u5b89\u5b9a\u3057\u305f\u58f2\u4e0a\u3092\u51fa\u3057\u3066\u3044\u308b\u5e97\u8217\u3082\u3042\u308c\u3070\u305d\u3046\u3067\u306a\u3044\u5909\u5316\u3092\u898b\u305b\u308b\u5e97\u8217\u3082\u3042\u308b\u3002\n- CA_2\u306b\u306f2015\u5e74\u306b\u5927\u304d\u306a\u5909\u5316\u304c\u3042\u3063\u305f\u4e8b\u304c\u60f3\u50cf\u3067\u304d\u308b\u3002(\u5e97\u8217\u306e\u6539\u88c5\u3001\u5897\u7bc9\u306a\u3069)","a7613671":"# timedistributed layer\n[\u516c\u5f0fdocument](https:\/\/keras.io\/ja\/layers\/wrappers\/)\u3092\u53c2\u8003\u306btimedistributed layer\u306e\u8aac\u660e\u3092\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u306e\u30e9\u30c3\u30d1\u30fc\u306b\u3088\u3063\u3066\u3001\u5165\u529b\u306e\u5168\u3066\u306e\u6642\u9593\u30b9\u30e9\u30a4\u30b9\u306b\u30ec\u30a4\u30e4\u30fc\u3092\u9069\u7528\u3067\u304d\u308b\u3002\n\u5165\u529b\u306f\u5c11\u306a\u304f\u3068\u3082\u4e09\u6b21\u5143\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001index\u306e\u6b21\u5143\u306f\u6642\u9593\u6b21\u5143\u3068\u898b\u306a\u3055\u308c\u308b\u3002\n\n\u516c\u5f0fdocument\u4e0a\u3067\u306f\u300132\u500b\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u6301\u3064\u30d0\u30c3\u30c1\u3092\u8003\u3048\u3066\u3044\u308b\u3002\u5404\u30b5\u30f3\u30d7\u30eb\u3067\u306f16\u6b21\u5143\u3067\u69cb\u6210\u3055\u308c\u308b10\u500b\u306e\u30d9\u30af\u30c8\u30eb\u3092\u3082\u3064\u3002\n\u3053\u306e\u30d0\u30c3\u30c1\u306e\u5165\u529b\u306eshape\u306f(32, 10, 16)\u3068\u306a\u308b\u3002\n\u3053\u306e\u664210\u500b\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u30ec\u30a4\u30e4\u30fc\u305d\u308c\u305e\u308c\u306bdense\u3092\u9069\u7528\u3059\u308b\u305f\u3081\u306bTimeDistributed\u3092\u5229\u7528\u3067\u304d\u308b\u3002\n\n\u4eca\u56de\u306e\u4f8b\u3067\u306f30490\u500b\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u6301\u3064\u3002\u5404\u30b5\u30f3\u30d7\u30eb\u306f9\u6b21\u5143\u3067\u69cb\u6210\u3055\u308c\u308b56\u500b\u306e\u30d9\u30af\u30c8\u30eb\u3092\u6301\u3063\u3066\u3044\u308b\u3002\u4eca\u56de\u306e\u5834\u5408\u306eshape\u306f(30490, 56, 9)\u3068\u306a\u308b\u3002\u3088\u3063\u3066\u300156\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u30ec\u30a4\u30e4\u30fc\u305d\u308c\u305e\u308c\u306bdense\u3092\u9069\u7528\u3059\u308b\u305f\u3081\u306btimeDistriibuted\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n","fe63b947":"\u5546\u54c1\u3092\u9078\u3093\u3067\u3001\u305d\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u308b\u3002\n\n- \u307e\u305a\u306f\u3088\u304f\u58f2\u308c\u3066\u3044\u308b\u5546\u54c1\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u629e\u3057\u3066\u305d\u306e\u5546\u54c1\u304c\u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u304a\u3044\u3066\u3069\u306e\u3088\u3046\u306b\u63a8\u79fb\u3057\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u3044\u304f\u4e8b\u306b\u3059\u308b\u3002\n- FOODS_3_090_CA_3_validation\u304c\u3088\u304f\u58f2\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u3053\u308c\u306b\u3059\u308b\u3002\n- \u5546\u54c1\u304c\u672a\u767a\u58f2\u3067\u3042\u308b\u305f\u3081\u30b0\u30e9\u30d5\u4e0a\u3067\u5e73\u884c\u306b\u63a8\u79fb\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002","77ddd4bc":"\u540c\u3058\u30ab\u30c6\u30b4\u30ea\u30fc\u306e\u5546\u54c1\u3067\u3082\u58f2\u4e0a\u306e\u5909\u5316\u304c\u6fc0\u3057\u3044\u3082\u306e\u3068\u3069\u3046\u3067\u306f\u3044\u3082\u306e\u304c\u5b58\u5728\u3059\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u3002\n\u3057\u304b\u3057\u3001\u3053\u308c\u3092\u305d\u308c\u305e\u308c\u306e\u5546\u54c1\u306emin-max\u3067[1, 0]\u306b\u3059\u308b\u3068\u4f3c\u305f\u5f62\u306a\u308b\u53ef\u80fd\u6027\u3082\u3042\u308b\u3002","3c820f15":"\u3053\u308c\u3089\u3092\u307f\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001dept_id\u306b\u3088\u3063\u3066\u58f2\u4e0a\u6570\u306f\u5927\u304d\u304f\u5909\u5316\u3059\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002","00991032":"# lightgbm\n\u6c7a\u5b9a\u6728\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u3044\u304f\u3064\u304b\u306e\u5f31\u5b66\u7fd2\u6a5f\u3092\u4f5c\u308a\u3001\u305d\u308c\u3092\u7d71\u5408\u3059\u308b\u3053\u3068\u3067\u4e00\u3064\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u30a2\u30f3\u30b5\u30f3\u30d7\u30eb\u5b66\u7fd2\u3092\u884c\u306a\u3063\u3066\u3044\u308b\u3002\n\u307e\u305f\u3001\u4f3c\u305f\u624b\u6cd5\u3068\u3057\u3066xgboost\u304c\u5b58\u5728\u3059\u308b\u3002\n","ae27e4d0":"It appears that walmarts are closed on Chirstmas day. The highest demand day of all the data was on Sunday March 6th, 2016. What happened on this day you may ask... well the [Seventh Democratic presidential candidates debate hosted by CNN and held in Flint, Michigan](https:\/\/www.onthisday.com\/date\/2016\/march\/6)... I doubt that impacted sales though :D","23517035":"# Visualizing the data for a single item\n- Lets take a random item that sell a lot and see how it's sales look across the training data.\n- `FOODS_3_090_CA_3_validation` sells a lot\n- Note there are days where it appears the item is unavailable and sales flatline","a2017a2c":"# Sales Heatmap Calendar","b930c771":"# Combined Sales over Time by Type\n- We have several item types:\n    - Hobbies\n    - Household\n    - Foods\n- Lets plot the total demand over time for each type","a4cd1701":"submission.csv\u306e\u4f5c\u6210","b3b85f84":"\u4e0a\u306e\u69d8\u306b\u3001\u65e5\u4ed8\u8868\u793a\u3059\u308b\u4e8b\u304c\u3067\u304d\u308b\u69d8\u306b\u306a\u3063\u305f\u3002","5a9cf975":"\u5358\u4f53\u306e\u5546\u54c1\u306b\u307e\u3067\u7d5e\u308a\u8fbc\u3093\u3067\u3057\u307e\u3046\u3068\u76f8\u95a2\u6027\u304c\u898b\u8f9b\u3044","227bd1ac":"# What exactly are we trying to predict?\nWe are trying for forecast sales for 28 forecast days. The sample submission has the following format:\n- The columns represent 28 forecast days. We will fill these forecast days with our predictions.\n- The rows each represent a specific item. This id tells us the item type, state, and store. We don't know what these items are exactly.","1c2f9c6a":"# Sale Prices\nWe are given historical sale prices of each item. Lets take a look at our example item from before.\n- It looks to me like the price of this item is growing.\n- Different stores have different selling prices.","e4fd0dc8":"\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u898b\u3066\u6c17\u3065\u3044\u305f\u3053\u3068\u3092\u5217\u6319\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n- \u3084\u306f\u308a\u571f\u65e5\u306e\u58f2\u308a\u4e0a\u3052\u304c\u9ad8\u3044\u3067\u3059\u3002\n- \u4e00\u6708\u306e\u5e73\u65e5\u304c\u660e\u3089\u304b\u306b\u4f4e\u3044\u3067\u3059\u3002\n- \u307b\u3068\u3093\u3069\u306e\u5834\u5408\u3001\u706b\u66dc\u304b\u3089\u6728\u66dc\u306f\u4f4e\u3044\u3067\u3059(\u3068\u3053\u308d\u3069\u3053\u308d\u9ad8\u3044\u3068\u3053\u308d\u306f\u795d\u65e5\u306e\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002)","c1aa524e":"\u4f55\u3092\u4e88\u6e2c\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u306e\u304b\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u3044\u304f\u3002\n\u3053\u306e\u30b3\u30f3\u30da\u3092\u901a\u3058\u3066\u3001\u4e88\u6e2c\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u306e\u306f28\u65e5\u5206\u306e\u58f2\u4e0a\u3067\u3059\u3002\u63d0\u51fa\u306e\u30b5\u30f3\u30d7\u30eb\u304b\u3089\u6b21\u306e\u3088\u3046\u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u4e88\u60f3\u3059\u308c\u3070\u3044\u3044\u4e8b\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n- \u305d\u308c\u305e\u308c\u306e\u5217\u306f\u3053\u308c\u304b\u3089\u5148\u306e28\u65e5\u30921\u65e5\u3054\u3068\u306b\u793a\u3057\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u3053\u308c\u3092\u57cb\u3081\u3066\u3044\u304f\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\n- \u305d\u308c\u305e\u308c\u306e\u884c\u306f\u7279\u5b9a\u306e\u5546\u54c1\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002id\u306b\u3088\u3063\u3066\u5546\u54c1\u306e\u7a2e\u5225\u3084\u5dde\u3001\u5e97\u540d\u307e\u3067\u306f\u7279\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u3069\u306e\u54c1\u76ee\u3067\u3042\u308b\u306e\u304b\u4e00\u610f\u306b\u5b9a\u3081\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n(\u6ce8\u91c8\u3000\u3064\u307e\u308a\u3053\u308c\u306f\u6771\u4eac\u90fd\u306e\u65b0\u5bbf\u5e97\u306e\u6e05\u6dbc\u98f2\u6599\u6c34\u306e\u58f2\u4e0a\u3067\u3042\u308b\u4e8b\u307e\u3067\u306f\u7279\u5b9a\u3067\u304d\u3066\u3082\u3001\u30b3\u30ab\u30b3\u30fc\u30e9\u306e\u58f2\u4e0a\u3067\u3042\u308b\u3068\u3044\u3046\u3068\u3053\u308d\u307e\u3067\u306f\u7279\u5b9a\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u4e8b\u3067\u3059\u3002)","9d3b5f20":"walmart\u306f\u30af\u30ea\u30b9\u30de\u30b9\u306b\u3057\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001\u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u306e\u671f\u9593\u306e\u4e2d\u3067\u3082\u3063\u3068\u3082\u5546\u54c1\u306e\u9700\u8981\u304c\u3042\u3063\u305f\u65e5\u306f2016\/3\/6\u306e\u65e5\u66dc\u65e5\u3067\u3059\u3002\n\u306a\u305c\u305d\u306e\u65e5\u306b\u9700\u8981\u304c\u305d\u3093\u306a\u306b\u9ad8\u3044\u306e\u304b\u304d\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u304c...\u3042\u307e\u308a\u3044\u3044\u60c5\u5831\u306f\u5f97\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f(\u7b11)","0386e4b6":"\u3053\u3053\u304b\u3089\u5148\u306f\u65e5\u672c\u8a9e\u8a33\u3067\u306f\u306a\u304f\u3001\u500b\u4eba\u7684\u306a\u958b\u767a\u306b\u306a\u308a\u307e\u3059\u3002\n\u958b\u767a\u65b9\u91dd\u3068\u3057\u3066\u306fLSTM\u306e\u8aac\u660e\u5909\u6570\u306e\u4fee\u6b63\nxgboost, lightgbm\u3068\u306e\u30a2\u30f3\u30b5\u30f3\u30d7\u30eb\u5b66\u7fd2\n\u3092\u4e3b\u306b\u884c\u306a\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002","62ae1087":"\u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u3092\u30ab\u30ec\u30f3\u30c0\u30fccsv\u3068\u30de\u30fc\u30b8\u3057\u3066\u307f\u308b\u3002\n\n- calendar.csv\u306f\u904e\u53bb\u306e\u65e5\u4ed8\u304b\u3089\u672a\u6765\u306e\u65e5\u4ed8\u307e\u3067\u7528\u610f\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n- calendar.csv\u306fstv\u306edays\u30c7\u30fc\u30bf\u3068join\u3059\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002\n- join\u3059\u308b\u4e8b\u306b\u3088\u3063\u3066\u3001\u9031\u6bce\u3001\u5e74\u6bce\u306e\u30c8\u30ec\u30f3\u30c9\u3092\u307f\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002","4672f9cb":"- \u66dc\u65e5\u306b\u3088\u308b\u5dee\u304c\u3042\u308b\u4e8b\u304c\u308f\u304b\u3063\u305f\u3002\n\u305f\u3060\u3057\u66dc\u65e5\u3067\u751f\u3058\u308b\u5dee\u304c\u5546\u54c1\u306e\u7279\u6027\u306b\u3088\u308b\u3082\u306e\u306a\u306e\u304b\u3001\u30b9\u30fc\u30d1\u30fc\u30de\u30fc\u30b1\u30c3\u30c8\u306e\u8a2a\u554f\u8005\u6570\u306b\u3088\u308b\u3082\u306e\u306a\u306e\u304b\u307e\u3060\u5224\u65ad\u304c\u3064\u304b\u306a\u3044\u3002\n(\u4f8b\u3048\u3070\u5546\u54c1\u304c\u30b9\u30c6\u30fc\u30ad\u8089\u3067\u3042\u3063\u305f\u5834\u5408\u3001\u9031\u672b\u306f\u30b9\u30c6\u30fc\u30ad\u3092\u98df\u3079\u308b\u50be\u5411\u306b\u3042\u308b\u306e\u304b\u3001\u305d\u308c\u3068\u3082\u9031\u672b\u306b\u591a\u304f\u306e\u5bb6\u65cf\u304c\u8cb7\u3044\u51fa\u3057\u306b\u304f\u308b\u50be\u5411\u306b\u3042\u308b\u306e\u304b\u304c\u308f\u304b\u3089\u306a\u3044\u3002)\n- \u6708\u306b\u3088\u308a\u5dee\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\n\u30b9\u30fc\u30d1\u30fc\u306e\u8a2a\u554f\u8005\u6570\u304c\u4e00\u5b9a\u3067\u3042\u308b\u3068\u8003\u3048\u308b\u3068\u3001\u4e8c\u500d\u7a0b\u5ea6\u306e\u5dee\u304c\u51fa\u3066\u3044\u308b\u306e\u3067\u3001\u65ec\u3084\u53ce\u7a6b\u6642\u671f\u304c\u660e\u78ba\u306b\u5b58\u5728\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\u3082\u3057\u304f\u306f\u30cf\u30ed\u30a6\u30a3\u30f3\u2192\u30ab\u30dc\u30c1\u30e3\u306e\u3088\u3046\u306b\u5b63\u7bc0\u306e\u30a4\u30d9\u30f3\u30c8\u3068\u5bc6\u63a5\u306b\u95a2\u308f\u308a\u306e\u3042\u308b\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u304c\u60f3\u50cf\u3067\u304d\u308b\u3002\n\u3082\u3057\u304f\u306f\u30b9\u30fc\u30d1\u30fc\u306e\u8a2a\u554f\u8005\u6570\u304c\u4e00\u5b9a\u3067\u306a\u3044\u53ef\u80fd\u6027\u3082\u3042\u308b\u3002\u4f8b\u3048\u3070\u30d3\u30fc\u30c1\u306e\u8fd1\u304f\u306e\u304a\u5e97\u3060\u3063\u305f\u5834\u5408\u3001\u590f\u306b\u89b3\u5149\u5ba2\u304c\u591a\u3044\u305f\u3081\u8a2a\u554f\u8005\u6570\u306e\u5897\u52a0\u306b\u5f93\u3063\u3066\u5546\u54c1\u306e\u58f2\u308a\u4e0a\u3052\u3082\u4f38\u3073\u3066\u3044\u308b\u3002\n\u3064\u307e\u308a\u3001\u5546\u54c1\u306e\u3082\u3064\u30c8\u30ec\u30f3\u30c9\u3067\u306f\u306a\u304f\u3001\u5dde\u3084\u5e97\u8217\u306e\u3082\u3064\u30c8\u30ec\u30f3\u30c9\u3067\u3042\u308b\u53ef\u80fd\u6027\u3082\u3042\u308b\u3002\n- \u5e74\u306b\u3088\u308a\u5dee\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\n\u5358\u306b\u3053\u306e\u5e97\u8217\u304c2011\u5e74\u306b\u30aa\u30fc\u30d7\u30f3\u3067\u7269\u73cd\u3057\u3055\u304b\u30892,3\u5e74\u306e\u8a2a\u554f\u8005\u6570\u304c\u591a\u304b\u3063\u305f\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\u307e\u305f\u3001\u5e97\u8217\u306e\u5546\u54c1\u306e\u5024\u6bb5\u306e\u63a8\u79fb\u306a\u3069\u304b\u3089\u7d4c\u55b6\u65b9\u91dd\u306b\u5f71\u97ff\u3092\u53d7\u3051\u3066\u3044\u308b\u53ef\u80fd\u6027\u3082\u52a0\u5473\u3067\u304d\u308b\u3002","2d2dacac":"# M5 Forecasting Challenge\n<img src=\"https:\/\/images.ctfassets.net\/osv85d77hkdf\/7LsZ5bZzvGaG6iwYkoKEUc\/84afe0bf84371542fe56e6d5f0b3377b\/hero_telescope_01_2x.png\" width=\"500\" height=\"300\" \/>\n\nThe goal of this notebook is to give competitors a quick overview of the 2020 M5 competition. After reading it you should have a good idea of the objective you are trying to solve, the data provided and the metrics you will be scored on.\n\nSome tl;dr items to note:\n- There are two parallel competitions: **Accuracy** and **Uncertainty**\n    - The accuracy competition will use the metric: **Weighted Root Mean Squared Scaled Error** (RMSSE)\n    - The uncertainty competition will use the metric: **Weighted Scaled Pinball Loss** (WSPL)\n- We are tasked with forecasting hierarchical sales data from Wal-Mart.\n- The data, covers stores in three US States (California, Texas, and Wisconsin) and includes item level, department, product categories, and store details.\n- In addition, it has explanatory variables such as price, promotions, day of the week, and special events.","033c8525":"\u3053\u3053\u306f\u50d5\u306e\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002\n\u65e5\u672c\u306e\u30b9\u30fc\u30d1\u30fc\u3092\u60f3\u50cf\u3059\u308b\u3068\u307b\u3068\u3093\u3069\u304c\u98df\u54c1\u3067\u3042\u308a\u3001\u5c11\u3057\u3060\u3051\u65e5\u7528\u54c1\u304c\u58f2\u3089\u308c\u3066\u3044\u3066\u3001\u5a2f\u697d\u7528\u54c1\u306a\u3069\u306f\u307b\u3068\u3093\u3069\u7121\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u65e5\u672c\u306e\u30b9\u30fc\u30d1\u30fc\u57fa\u6e96\u3060\u3068\u3001\u9806\u4f4d\u306b\u3064\u3044\u3066\u306f\u7d0d\u5f97\u3067\u304d\u308b\u3082\u306e\u3067\u3042\u308b\u69d8\u306b\u611f\u3058\u307e\u3059\u304c\u3001food\u3068\u4ed6\u3068\u306e\u54c1\u76ee\u6570\u306e\u5dee\u304c\u601d\u3063\u305f\u3088\u308a\u958b\u3044\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u7591\u554f\u306b\u611f\u3058\u307e\u3059\u3002\n\u3053\u308c\u306fwalmart\u304c\u98df\u54c1\u3084\u65e5\u7528\u54c1\u304b\u3089\u643a\u5e2f\u96fb\u8a71\u3084\u30b2\u30fc\u30e0\u307e\u3067\u5e45\u5e83\u304f\u63c3\u3048\u3066\u3044\u308b\u8d85\u5927\u578b\u30b9\u30fc\u30d1\u30fc\u3067\u3042\u308b\u304b\u3089\u3067\u3059\u3002\n\u65e5\u672c\u3060\u3068\u30a4\u30aa\u30f3\u30e2\u30fc\u30eb\u306a\u3069\u306e\u5927\u578b\u30b7\u30e7\u30c3\u30d4\u30f3\u30b0\u30e2\u30fc\u30eb\u3092\u60f3\u50cf\u3059\u308b\u3068\u30a4\u30e1\u30fc\u30b8\u304c\u8fd1\u3065\u3051\u308c\u308b\u306e\u3067\u306f\u7121\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002","bdbacdd6":"\u305d\u308c\u305e\u308c\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u914d\u4e0b\u306e\u5546\u54c1\u306e\u58f2\u4e0a\u3092\u6bd4\u3079\u3066\u307f\u308b\u3002\n\u305d\u308c\u305e\u308c\u306e\u30ab\u30c6\u30b4\u30ea\u30fc\u914d\u4e0b\u306e\u58f2\u4e0a\u306e\u5206\u6563\u3092\u307f\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002","fc4e2cec":"## repeat vector\nn\u56de\u5165\u529b\u3092\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3002\n\n*    That is, one output for each LSTM at each input sequence time step rather than one output for each LSTM for the whole input sequence.\n\n*    An output for each step of the input sequence gives the decoder access to the intermediate representation of the input sequence each step. This may or may not be useful. Providing the final LSTM output at the end of the input sequence may be more logical as it captures information about the entire input sequence, ready to map to or calculate an output.\n","a25b2cc0":"\u3071\u3063\u3068\u898b\u3067\u3059\u304c\u3001\u4e0b\u306e\u69d8\u306a\u3053\u3068\u304c\u4e88\u60f3\u3067\u304d\u307e\u3059\u3002\n- d_1\u304b\u3089d_251\u306f\u4e0a\u3067\u6ce8\u610f\u70b9\u3068\u3057\u3066\u8ff0\u3079\u305f\u3088\u3046\u306b\u3001\u3053\u306e\u5546\u54c1\u304c\u672a\u767a\u58f2\u3067\u3042\u308b\u305f\u3081\u3001\u58f2\u4e0a\u304c0\u3068\u3057\u3066\u8a08\u4e0a\u3055\u308c\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u3067\u3059\u3002\n- \u4f55\u5ea6\u304b\u30b9\u30d1\u30a4\u30af\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u3053\u306b\u7d5e\u3063\u3066\u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u6ce8\u8996\u3057\u3066\u307f\u308b\u306e\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n- \u5468\u671f\u7684\u306b\u58f2\u4e0a\u304c\u5909\u52d5\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u306e\u3067\u66dc\u65e5\u6bce\u3001\u65e5\u4ed8\u3054\u3068\u306a\u3069\u30c7\u30fc\u30bf\u306e\u96c6\u8a08\u65b9\u5f0f\u3092\u5909\u3048\u308b\u4e8b\u306b\u610f\u5473\u304c\u3042\u308a\u305d\u3046\u3002","d4c5b485":"\u305d\u308c\u3067\u306f\u4ed6\u306e\u5546\u54c1\u306b\u3064\u3044\u3066\u3082\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n- 20\u500b\u307b\u3069\u5546\u54c1\u3092\u9078\u3093\u3067\u3001\u305d\u308c\u3089\u306e\u58f2\u4e0a\u3092\u4e0a\u3068\u540c\u69d8\u306b\u96c6\u8a08\u3057\u307e\u3059\u3002\n\u203b\u2193\u4ee5\u4e0b\u30c7\u30fc\u30bf\u304b\u3089\u5f97\u3089\u308c\u305f\u60c5\u5831\u306b\u57fa\u3065\u3044\u3066\u306e\u8a18\u8ff0\u3067\u3059\u3002\n- \u30b0\u30e9\u30d5\u306e\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3044\u304f\u3064\u304b\u4e2d\u6b62\u3059\u3079\u304d\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\n - \u3042\u308b\u671f\u9593\u3001\u5546\u54c1\u304c\u58f2\u3089\u308c\u3066\u3044\u306a\u3044\u4e8b\u304c\u3042\u308b\u3002\n - 1\u65e5\u306b\u58f2\u308c\u308b\u6570\u304c\u591a\u304f\u3066\u30821\u500b\u306e\u69d8\u306a\u5546\u54c1\u306f\u4e88\u6e2c\u3059\u308b\u3053\u3068\u304c\u96e3\u3057\u3044\u3002\n - (\u591a\u304f\u3066\u30821\u65e5\u306b\u4e00\u500b\u3057\u304b\u58f2\u308c\u306a\u3044\u5546\u54c1\u4ee5\u5916\u3067\u306f)\u30b9\u30d1\u30a4\u30af(\u305d\u306e\u90e8\u5206\u3060\u3051\u58f2\u4e0a\u304c\u7570\u5e38\u306b\u591a\u3044\u4e8b)\u304c\u89b3\u6e2c\u3067\u304d\u308b\u3002(\u304a\u305d\u3089\u304fsuper bowl(\u30a2\u30e1\u30ea\u30ab\u306e\u30d3\u30c3\u30b0\u30a4\u30d9\u30f3\u30c8)\u306e\u3042\u308b\u65e5\u66dc\u65e5?)\u30b9\u30d1\u30a4\u30af\u306e\u8d77\u304d\u3066\u3044\u308b\u65e5\u306b\u3064\u3044\u3066\u306f\u3001calendar.csv\u306eevent data\u3092\u898b\u308c\u3070\u826f\u3044\u77e5\u898b\u304c\u5f97\u3089\u308c\u305d\u3046\u3002"}}