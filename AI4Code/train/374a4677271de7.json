{"cell_type":{"905f45d8":"code","52b68c76":"code","a39a2118":"code","700ca10a":"code","8dac1b4f":"code","f9273073":"code","dc9020f9":"code","e2d0b278":"code","009124ab":"code","fdf0bf98":"code","cac8aa87":"code","a3ba0cce":"code","342345aa":"code","3b4f75df":"code","f5aade6b":"code","9db38a64":"markdown","dfca7dbe":"markdown","41e1bd02":"markdown","6fd382ac":"markdown","ae3024a9":"markdown","61bb3bb7":"markdown","bfedfc3e":"markdown","cd17171c":"markdown","7bac74a1":"markdown","8a95aed8":"markdown","e876c6ed":"markdown","d76a523b":"markdown"},"source":{"905f45d8":"import os\nimport numpy as np \nimport pandas as pd \nimport json","52b68c76":"os.listdir('..\/input\/herbarium-2020-fgvc7')","a39a2118":"%%time\n\nwith open('..\/input\/herbarium-2020-fgvc7\/nybg2020\/train\/metadata.json', \"r\", encoding=\"ISO-8859-1\") as file:\n    train = json.load(file)\n\ntrain_img = pd.DataFrame(train['images'])\ntrain_ann = pd.DataFrame(train['annotations']).drop(columns='image_id')\ntrain_df = train_img.merge(train_ann, on='id')\ntrain_df.head()","700ca10a":"%%time\n\nwith open('..\/input\/herbarium-2020-fgvc7\/nybg2020\/test\/metadata.json', \"r\", encoding=\"ISO-8859-1\") as file:\n    test = json.load(file)\n\ntest_df = pd.DataFrame(test['images'])\ntest_df.head()","8dac1b4f":"sample_submission = pd.read_csv('..\/input\/herbarium-2020-fgvc7\/sample_submission.csv')\nsample_submission.head()","f9273073":"train_df['category_id'].value_counts()","dc9020f9":"from sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\nle.fit(train_df['category_id'])\ntrain_df['category_id_le'] = le.transform(train_df['category_id'])\nclass_map = dict(sorted(train_df[['category_id_le', 'category_id']].values.tolist()))","e2d0b278":"# ====================================================\n# Library\n# ====================================================\n\nimport sys\n\nimport gc\nimport os\nimport random\nimport time\nfrom contextlib import contextmanager\nfrom pathlib import Path\n\nimport cv2\nfrom PIL import Image\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\n\nimport sklearn.metrics\n\nfrom functools import partial\n\nimport torch\nimport torch.nn as nn\nfrom torch.optim import Adam, SGD\nfrom torch.optim.lr_scheduler import CosineAnnealingLR\nfrom torch.utils.data import DataLoader, Dataset\n\nfrom albumentations import Compose, Normalize, Resize\nfrom albumentations.pytorch import ToTensorV2\n\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\ndevice","009124ab":"# ====================================================\n# Utils\n# ====================================================\n\n@contextmanager\ndef timer(name):\n    t0 = time.time()\n    LOGGER.info(f'[{name}] start')\n    yield\n    LOGGER.info(f'[{name}] done in {time.time() - t0:.0f} s.')\n\n    \ndef init_logger(log_file='train.log'):\n    from logging import getLogger, DEBUG, FileHandler,  Formatter,  StreamHandler\n    \n    log_format = '%(asctime)s %(levelname)s %(message)s'\n    \n    stream_handler = StreamHandler()\n    stream_handler.setLevel(DEBUG)\n    stream_handler.setFormatter(Formatter(log_format))\n    \n    file_handler = FileHandler(log_file)\n    file_handler.setFormatter(Formatter(log_format))\n    \n    logger = getLogger('Herbarium')\n    logger.setLevel(DEBUG)\n    logger.addHandler(stream_handler)\n    logger.addHandler(file_handler)\n    \n    return logger\n\nLOG_FILE = 'train.log'\nLOGGER = init_logger(LOG_FILE)\n\n\ndef seed_torch(seed=777):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n\nSEED = 777\nseed_torch(SEED)","fdf0bf98":"N_CLASSES = 32093\n\n\nclass TestDataset(Dataset):\n    def __init__(self, df, transform=None):\n        self.df = df\n        self.transform = transform\n        \n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        file_name = self.df['file_name'].values[idx]\n        file_path = f'..\/input\/herbarium-2020-fgvc7\/nybg2020\/test\/{file_name}'\n        image = cv2.imread(file_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        \n        if self.transform:\n            augmented = self.transform(image=image)\n            image = augmented['image']\n        \n        return image","cac8aa87":"HEIGHT = 128\nWIDTH = 128\n\n\ndef get_transforms():\n    \n    return Compose([\n            Resize(HEIGHT, WIDTH),\n            Normalize(\n                mean=[0.485, 0.456, 0.406],\n                std=[0.229, 0.224, 0.225],\n            ),\n            ToTensorV2(),\n        ])\n","a3ba0cce":"batch_size = 512\n\ntest_dataset = TestDataset(test_df, transform=get_transforms())\ntest_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)","342345aa":"import torchvision.models as models\n\nmodel = models.resnet18(pretrained=False)\nmodel.avgpool = nn.AdaptiveAvgPool2d(1)\nmodel.fc = nn.Linear(model.fc.in_features, N_CLASSES)\n\nweights_path = '..\/input\/herbarium-2020-pytorch-resnet18-train\/fold0_best_score.pth'\nmodel.load_state_dict(torch.load(weights_path))","3b4f75df":"from tqdm import tqdm\n\nwith timer('inference'):\n    \n    model.to(device) \n    \n    preds = np.zeros((len(test_dataset)))\n\n    for i, images in tqdm(enumerate(test_loader)):\n            \n        images = images.to(device)\n            \n        with torch.no_grad():\n            y_preds = model(images)\n            \n        preds[i * batch_size: (i+1) * batch_size] = y_preds.argmax(1).to('cpu').numpy()\n","f5aade6b":"test_df['preds'] = preds.astype(int)\nsubmission = sample_submission.merge(test_df.rename(columns={'id': 'Id'})[['Id', 'preds']], on='Id').drop(columns='Predicted')\nsubmission['Predicted'] = submission['preds'].map(class_map)\nsubmission = submission.drop(columns='preds')\nsubmission.to_csv('submission.csv', index=False)\nsubmission.head()","9db38a64":"# Library","dfca7dbe":"# Submission","41e1bd02":"# Model","6fd382ac":"# Library","ae3024a9":"- imbalance\n- 32093 targets","61bb3bb7":"# TARGET (\"category_id\")","bfedfc3e":"# Inference","cd17171c":"# Transforms","7bac74a1":"# About this notebook\n- PyTorch Resnet18 starter code\n- [train kernel](https:\/\/www.kaggle.com\/yasufuminakama\/herbarium-2020-pytorch-resnet18-train) -> inference kernel\n\nIf this notebook is helpful, feel free to upvote :)","8a95aed8":"# Data Loading","e876c6ed":"# Dataset","d76a523b":"# Utils"}}