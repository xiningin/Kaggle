{"cell_type":{"3e8edbe9":"code","cf095cdd":"code","5e3cafdc":"code","88b27034":"code","c48a01bf":"code","893be667":"code","41c7a174":"code","b321fece":"code","a1ad69d2":"code","c94142f6":"code","4520b6e1":"code","4125c00b":"code","8a867c01":"code","9145d89f":"markdown","27e37b48":"markdown","01979c0c":"markdown","618fb4e8":"markdown"},"source":{"3e8edbe9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json as js\nfrom pandas.io.json import json_normalize\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport sys\nimport warnings\n\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\n\n# Any results you write to the current directory are saved as output.","cf095cdd":"# Reading train and test data\ntrain_data = pd.read_csv('..\/input\/train.csv')\ntest_data = pd.read_csv('..\/input\/test.csv')","5e3cafdc":"print(\"The shape of train data is :\",train_data.shape)\nprint(\"The shape of test data is:\",test_data.shape)","88b27034":"# Retrieving the json data from the actual data\njson_cols = ['device','geoNetwork','totals','trafficSource']\njson_data = train_data.loc[:,json_cols]\njson_data.head()","c48a01bf":"# A basic function to get all the features enclosed in the json columns\ndef jcol_feats(col_name):\n    j = js.loads(json_data[col_name][0])\n    feats = j.keys()\n    return feats","893be667":"n_dev = len(jcol_feats('device'))\nprint(\"Number of features in device column:\",n_dev)\nn_geo= len(jcol_feats('geoNetwork'))\nprint(\"Number of features in geoNetwork column:\",n_geo)\nn_tot = len(jcol_feats('totals'))\nprint(\"Number of features in totals column:\",n_tot)\nn_traf = len(jcol_feats('trafficSource'))\nprint(\"Number of features in tafficSource column:\",n_traf)","41c7a174":"# https:\/\/www.kaggle.com\/shivamb\/exploratory-data-analysis-ga-customer-revenue\n\njson_cols = ['device', 'geoNetwork', 'totals', 'trafficSource']\ndef load_df(filename):\n    path = \"..\/input\/\" + filename\n    df = pd.read_csv(path, converters={column: js.loads for column in json_cols}, \n                     dtype={'fullVisitorId': 'str'})\n    \n    for column in json_cols:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}_{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    return df","b321fece":"data = load_df(\"train.csv\")\ndata.head()","a1ad69d2":"len(data['totals_transactionRevenue'].value_counts()) # Number of users from whom google earned revenue","c94142f6":"# Simple function for removing constant columns\ndef const(d):\n    dt = d.loc[:,d.apply(pd.Series.nunique) != 1]\n    return dt","4520b6e1":"act_data = const(data)\nact_data.shape","4125c00b":"def missing_data(data):  #calculates missing values in each column\n    total = data.isnull().sum().reset_index()\n    total.columns  = ['Feature_Name','Missing_value']\n    total_val = total[total['Missing_value'] > 0]\n    total_val = total.sort_values(by ='Missing_value',ascending= False)\n    return total_val","8a867c01":"missing_data(act_data).head(9) # 9 features in train data have missing value in them.","9145d89f":"### Missing values","27e37b48":"**This shows that out of 0.9 million customers, just 5k customers are the part of revenue club for Google which is 0.59%, i.e. less than a percent of users**.","01979c0c":"Out of the 12 columns in the train dataset, 4 are json columns which we need to split in order to examine the complete dataset.","618fb4e8":"### Removing constant columns"}}