{"cell_type":{"df537b3c":"code","8b93efcb":"code","13b2fb17":"code","1c636f21":"code","43f1109c":"code","10f4f89f":"code","f58b0a9a":"code","4b93329b":"code","769207f8":"code","acc9d754":"code","ceca93f5":"code","7ace2484":"code","b75e6451":"code","f9194d9a":"code","422e520d":"code","def994f8":"code","3194496b":"code","3d986038":"code","90cd1b41":"code","eca2dd22":"code","b11c6f37":"code","654aee68":"code","25507dbe":"code","f450275f":"code","d610c7c6":"code","35117d99":"code","5ca97069":"code","4fe3083c":"code","53f2cac0":"code","8c4511d1":"code","af00f809":"code","1aaeed7a":"code","c32ac660":"code","abc7a402":"code","d7473843":"code","22ee4f98":"code","bb4809a5":"code","32b911f8":"code","3ac3ef3c":"code","22761e74":"code","321bfb99":"code","bbd27558":"code","cad64e50":"code","c866e84d":"code","5e24954d":"code","a9ea83cf":"code","71511f86":"code","03efaa3b":"code","4284ea3e":"code","88ca982a":"code","7b092fcf":"code","cd583d78":"code","5e4af1d3":"code","fe0f8d4a":"code","fddab103":"code","6129fca9":"code","805ca760":"code","6c67ac6c":"code","0b0b0688":"code","ed9018dd":"code","218a13b0":"code","61fdc1c2":"code","9b697467":"code","8e8ba390":"code","a8c5205d":"code","d720536e":"code","b2e92fbb":"code","ba05c005":"code","3ee09be4":"code","4f7c9ac0":"code","a0ed27eb":"code","d2b91579":"code","d94282e5":"code","593b3b76":"markdown","c38eae5c":"markdown","35ba045c":"markdown","8fb55a0f":"markdown","8525141b":"markdown","31353695":"markdown","ee2d3cef":"markdown","eabceae9":"markdown","dc08ca52":"markdown","bce9b805":"markdown","5895b70d":"markdown","405b0032":"markdown","eb151573":"markdown","0e91f66c":"markdown","9cbe3eed":"markdown","a49f3da0":"markdown","27b119d5":"markdown","9746556e":"markdown","1003a214":"markdown","b3a05aa5":"markdown","84829803":"markdown","6622c6b3":"markdown","ee0d3103":"markdown","9fc7600a":"markdown","139505d3":"markdown","01a9c0c7":"markdown","90ed44a5":"markdown","00b6c7e9":"markdown","44e19d15":"markdown","322751f6":"markdown","74989494":"markdown","d326478d":"markdown","24583297":"markdown","c6a3d480":"markdown","3004050e":"markdown","21aa00fe":"markdown","a9f18755":"markdown","9a13587d":"markdown","d5dd0798":"markdown","5ac9433d":"markdown","7481d2d5":"markdown","453fe8a7":"markdown","2d36de13":"markdown","7eaf5f9c":"markdown","de4fccf7":"markdown","7590ad66":"markdown","bb68f69b":"markdown","df4b4fb5":"markdown","4d0cc2a0":"markdown","26c29de1":"markdown","b7566a31":"markdown","a1a5bade":"markdown","7e2f1330":"markdown","0475102b":"markdown","1e4bc2f9":"markdown","c4d2fe33":"markdown","bc47b651":"markdown","07c7646f":"markdown","b0a81534":"markdown","affafe53":"markdown","7c0c1073":"markdown","e912491b":"markdown","8d80ceff":"markdown","84cb8df7":"markdown","15dd9c1a":"markdown","a53fbd0f":"markdown","eb386521":"markdown","0eac57b8":"markdown","f13a41ea":"markdown","da9c1bc2":"markdown","a910b1e8":"markdown","b414e08d":"markdown","78dd7033":"markdown","dbc2dfce":"markdown","aab4c561":"markdown","f58e504d":"markdown","f6ad2081":"markdown","137d9f3f":"markdown","5102382b":"markdown","7ce0fba4":"markdown"},"source":{"df537b3c":"# \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438\nimport numpy as np\nimport pandas as pd\npd.set_option('display.max_columns', None)\n##pd.set_option('display.max_rows', None)\nimport math\nfrom scipy import stats\nfrom scipy.stats import skew, norm\n\nimport matplotlib.pyplot as plt\nimport matplotlib\npalette = plt.get_cmap('Set2')\nimport seaborn as sns\nplt.style.use('seaborn-darkgrid')\n##%matplotlib inline\nimport missingno as msno\n\nfrom datetime import datetime, timedelta\nimport os\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","8b93efcb":"telecom_df = pd.read_csv('\/kaggle\/input\/telecom-users\/telecom_users.csv', index_col=0)","13b2fb17":"telecom_df.head(5)","1c636f21":"print(telecom_df.isnull().sum())\n\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0434\u0438\u043d \u043e\u0431\u044a\u0435\u043a\u0442 Figure \u0438 \u0434\u0432\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 Axes\nfig, axes = plt.subplots(1, 2, figsize=(16, 9))\n# \u0442\u0435\u043f\u0435\u0440\u044c \u043e\u0442\u0440\u0438\u0441\u0443\u0435\u043c \u0432 axes[0] \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u0443 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nmsno.bar(telecom_df, figsize=(10, 7), ax=axes[0])\n# \u0430 \u0432 axes[1] \u043e\u0442\u0440\u0438\u0441\u0443\u0435\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\nmsno.matrix(telecom_df, figsize=(10, 7), ax=axes[1])\nplt.show()","43f1109c":"print(telecom_df.dtypes)\n### \u043c\u0435\u0442\u043e\u0434 describe \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nprint(telecom_df.describe(include=[np.number]))\n### \u043c\u0435\u0442\u043e\u0434 describe \u0434\u043b\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\nprint(telecom_df.describe(include=[np.object]))\n\n# \u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\nfor column in telecom_df.columns:\n    print('\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u0430 {}:\\n{}'.format(column, np.sort(telecom_df[column].unique())))\n# \u0441\u0442\u043e\u043b\u0431\u0435\u0446 SeniorCitizen \u0438\u043c\u0435\u0435\u0442 \u0431\u0438\u043d\u0430\u0440\u043d\u0443\u044e \u0448\u043a\u0430\u043b\u0443, \u043d\u043e \u0438\u0437 \u043d\u0443\u043b\u044f \u0438 \u0435\u0434\u0438\u043d\u0438\u0446, \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043a \u043e\u0434\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u043e\u043c\u0443 \u0432\u0438\u0434\u0443\ntelecom_df['SeniorCitizen'].replace({0:'No', 1:'Yes'}, inplace=True)\n# \u0441\u0442\u043e\u043b\u0431\u0435\u0446 TotalCharges \u0438\u043c\u0435\u0435\u0442 \u0432 \u0441\u0432\u043e\u0435\u043c \u0441\u043e\u0441\u0442\u0430\u0432\u0435 \u0442\u0430\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u043a ' '. \u0427\u0442\u043e \u044d\u0442\u043e? \u041f\u0440\u043e\u043f\u0443\u0441\u043a \u0438\u043b\u0438 \u043d\u0435\u0434\u043e\u0441\u0447\u0435\u0442? \u0412\u044b\u044f\u0441\u043d\u0438\u043c\nprint(telecom_df.loc[telecom_df['TotalCharges'] == ' ', :])\n# \u0432\u0441\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u043e - \u044d\u0442\u043e \u0432\u043d\u043e\u0432\u044c \u043f\u0440\u0438\u0431\u044b\u0432\u0448\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b. \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 0\ntelecom_df.loc[telecom_df['TotalCharges'] == ' ', 'TotalCharges'] = 0\n# \u0441\u0442\u043e\u043b\u0431\u0435\u0446 TotalCharges \u0438\u043c\u0435\u0435\u0442 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 - object. \u041d\u0435\u043f\u043e\u0440\u044f\u0434\u043e\u043a, \u0441\u043c\u0435\u043d\u0438\u043c \u043d\u0430 float64\ntelecom_df['TotalCharges'] = telecom_df['TotalCharges'].astype(np.float64)\n# \u0434\u043e\u0445\u043e\u0434 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0437\u0430 \u0432\u0435\u0441\u044c \u043f\u0435\u0440\u0438\u043e\u0434 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nprint('\u0414\u043e\u0445\u043e\u0434 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0437\u0430 \u0432\u0435\u0441\u044c \u043f\u0435\u0440\u0438\u043e\u0434 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:', telecom_df['TotalCharges'].sum())\n\n# \u0432\u044b\u0432\u0435\u0434\u0435\u043c \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445\nfor column in telecom_df.columns:\n    print('Column name:', column)\n    print(telecom_df[column].value_counts().nlargest(5), '\\n')","10f4f89f":"# \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0442\u0438\u043f\u0430 int64 \u0438 float64\ntelecom_df_for_dist = telecom_df.loc[:, telecom_df.dtypes!='object']\n# \u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0432\u0441\u0435 \u043d\u0430 \u043e\u0434\u043d\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435\nfig, axes = plt.subplots(1, len(telecom_df_for_dist.columns), figsize=(20, 14))\nfor i, column in enumerate(telecom_df_for_dist.columns):\n    sns.distplot(telecom_df_for_dist[column], ax=axes[i])\n    axes[i].set_title(column)\n    axes[i].axvline(telecom_df_for_dist[column].median(), c='g', label='\u041c\u0435\u0434\u0438\u0430\u043d\u0430')\n    axes[i].legend(loc='best')\nplt.show()","f58b0a9a":"main_columns_1 = ['gender', 'SeniorCitizen', 'Partner', 'Dependents', 'PhoneService', 'InternetService', 'Contract',\n'PaperlessBilling', 'PaymentMethod']\n\nfig, axes = plt.subplots(3, 3, figsize=(10, 10))\n# \u043f\u0440\u043e\u0439\u0434\u0435\u043c\u0441\u044f \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443\nfor ax, column in zip(axes.ravel(), main_columns_1):\n    # \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0430, \u0441\u0440\u0430\u0437\u0443 \u0436\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0438\u0445\n    data = (telecom_df[column].value_counts() \/ len(telecom_df)).to_frame().reset_index()\n    sns.barplot(y=data.columns[1], x='index', data=data, alpha=0.6, ax=ax)\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=45)\n    ax.set(ylabel=None, xlabel=None)\n    ax.set_title(f'\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e {column}')\n    ax.legend()\n\n    # \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043d\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b\n    for p in ax.patches:\n        width = p.get_width()\n        height = p.get_height()\n        x, y = p.get_xy()\n        ax.annotate(f'{height:.0%}', (x+width\/2, y+height*1.02), ha='center')\n\nplt.tight_layout()\nplt.show()","4b93329b":"fig, ax = plt.subplots(figsize=(16,9))\ntelecom_df['Churn'].value_counts().plot.pie(explode=[0,0.1], autopct='%1.1f%%', shadow=True)\nplt.ylabel(None)\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043e\u0442\u0442\u043e\u043a\u0443')\nplt.show()","769207f8":"fig, axes = plt.subplots(3, 3, figsize=(16, 9))\nfor ax, column in zip(axes.ravel(), main_columns_1):\n    # \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\n    data = telecom_df\\\n    .groupby(['Churn', column])[column]\\\n    .count()\\\n    .groupby(column).apply(lambda x: 100 * x \/ x.sum())\\\n    .to_frame().stack().reset_index()\n\n    sns.barplot(x=column, y=0, hue='Churn', data=data, ax=ax, alpha=0.6)\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=45)\n    ax.set(ylabel=None, xlabel=None)\n    ax.set_title(f'\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043e\u0442\u0442\u043e\u043a\u0443 \u043f\u043e {column}')\n    ax.legend(title='\u0414\u043e\u0433\u043e\u0432\u043e\u0440 \u0440\u0430\u0441\u0441\u0442\u043e\u0440\u0436\u0435\u043d', loc=2, bbox_to_anchor=(1, 1), fontsize=10)\n    # \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043d\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b\n    for p in ax.patches:\n        width = p.get_width()\n        height = p.get_height()\n        x, y = p.get_xy()\n        ax.annotate(f'{height\/100:.0%}', (x+width\/2, y+height*1.02), ha='center')\n    # \u043e\u0442\u0440\u0430\u0437\u0438\u043c \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u043f\u0440\u044f\u043c\u0443\u044e, \u0441\u0438\u043c\u0432\u043e\u043b\u0438\u0437\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u044e \u043c\u0435\u0436\u0434\u0443 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u043c churn\/not churn\n    ax.axhline(26.5, c='r')\nplt.tight_layout()\nplt.show()","acc9d754":"# \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u0443\u0441\u043b\u0443\u0433\u0430\u043c\u0438\nservices_columns = ['PhoneService', 'MultipleLines', 'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n                    'TechSupport', 'StreamingTV', 'StreamingMovies', 'PaperlessBilling']\n# \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u0435 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435\ntelecom_df_for_services_calculation = telecom_df.copy()\ntelecom_df_for_services_calculation[services_columns] = telecom_df_for_services_calculation[services_columns]\\\n.replace({'No':0, 'Yes':1, 'No phone service':0, 'Fiber optic':1, 'DSL':1, 'No internet service':0})\n# \u0437\u0430\u0432\u0435\u0434\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435\ntelecom_df['services'] = telecom_df_for_services_calculation[services_columns].sum(axis=1)\n# \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b\nfig, axes = plt.subplots(figsize=(16,9))\nsns.barplot(x=telecom_df['services'].value_counts().reset_index()['index'],\n            y=telecom_df['services'].value_counts().reset_index()['services'],\n            alpha=0.6)\nplt.xlabel('\u041a\u043e\u043b-\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0443\u0441\u043b\u0443\u0433')\nplt.ylabel('\u041a\u043e\u043b-\u0432\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432')\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0443\u0441\u043b\u0443\u0433')\nplt.show()","ceca93f5":"fig, axes = plt.subplots(figsize=(16,9))\nplt.scatter(telecom_df['services'], telecom_df['MonthlyCharges'], c='r', alpha=0.2)\n# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043b\u0438\u043d\u0438\u044e \u0442\u0440\u0435\u043d\u0434\u0430 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u043d\u0438\u044e \u043b\u0438\u043d\u0438\u0438 \u0442\u0440\u0435\u043d\u0434\u0430\ndef plot_trendline(x, y, degree, color, name):\n    trend = np.polyfit(x, y, degree)\n    trendline = np.poly1d(trend)\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0438\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438\n    coef_corr = x.corr(y)\n    return plt.plot(x, trendline(x), f'{color}--', label=f'{name} trendline\\ncorrelation = {coef_corr:.2}')\n\nplot_trendline(telecom_df['services'], telecom_df['MonthlyCharges'], 1, 'r', 'Services')\nplt.xlabel('\u041a\u043e\u043b-\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0443\u0441\u043b\u0443\u0433')\nplt.ylabel('\u041c\u0435\u0441\u044f\u0447\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u0430')\nplt.title('\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u043c\u0435\u0436\u0434\u0443 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u043f\u0446\u0438\u044f\u043c\u0438 \u0438 \u0441\u0443\u043c\u043c\u043e\u0439 \u0447\u0435\u043a\u0430')\nplt.legend()\nplt.show()","7ace2484":"# \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\ndata = telecom_df\\\n.groupby(['Churn', 'services'])['services']\\\n.count()\\\n.groupby('services').apply(lambda x: 100 * x \/ x.sum())\\\n.to_frame().stack().reset_index()\n\nfig, ax = plt.subplots(figsize=(16, 9))\nsns.barplot(x='services', y=0, hue='Churn', data=data, alpha=0.6)\nax.set_xlabel('\u041a\u043e\u043b-\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439')\nax.set_ylabel(None)\nax.set_title(f'\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u0442\u043e\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439')\nax.legend(title='\u0414\u043e\u0433\u043e\u0432\u043e\u0440 \u0440\u0430\u0441\u0441\u0442\u043e\u0440\u0436\u0435\u043d', loc=2, bbox_to_anchor=(1, 1), fontsize=10)\n# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043d\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b\nfor p in ax.patches:\n    width = p.get_width()\n    height = p.get_height()\n    x, y = p.get_xy()\n    ax.annotate(f'{height\/100:.0%}', (x+width\/2, y+height*1.02), ha='center')\n# \u043e\u0442\u0440\u0430\u0437\u0438\u043c \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u043f\u0440\u044f\u043c\u0443\u044e, \u0441\u0438\u043c\u0432\u043e\u043b\u0438\u0437\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u044e \u043c\u0435\u0436\u0434\u0443 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u043c churn\/not churn\nax.axhline(26.5, c='r')\nplt.tight_layout()\nplt.show()","b75e6451":"main_columns_2 = ['gender', 'SeniorCitizen', 'Dependents']\nfig, axes = plt.subplots(1, 3, figsize=(16, 9))\nfor ax, column in zip(axes.ravel(), main_columns_2):\n    # \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445\n    data = telecom_df\\\n    .groupby([column])[column, 'TotalCharges']\\\n    .sum()\\\n    .apply(lambda x: 100 * x \/ x.sum())\\\n    .reset_index()\n\n    sns.barplot(x=column, y='TotalCharges', data=data, ax=ax, alpha=0.6)\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=45)\n    ax.set(ylabel=None, xlabel=None)\n    ax.set_title(f'\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u0445\u043e\u0434\u0430 \u043f\u043e {column}')\n    # \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043d\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b\n    for p in ax.patches:\n        width = p.get_width()\n        height = p.get_height()\n        x, y = p.get_xy()\n        ax.annotate(f'{height\/100:.0%}', (x+width\/2, y+height*1.02), ha='center')\nplt.tight_layout()\nplt.show()","f9194d9a":"# \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c \u0438 \u043d\u0430\u0439\u0434\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b\ntelecom_df_for_monthlycharges_by_tenure = telecom_df[['tenure', 'MonthlyCharges']]\\\n                                          .groupby('tenure').median().reset_index()\nx = telecom_df_for_monthlycharges_by_tenure['tenure']\ny = telecom_df_for_monthlycharges_by_tenure['MonthlyCharges']\n# \u043d\u0430\u043d\u0435\u0441\u0451\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\nfig, ax = plt.subplots(figsize=(16, 9))\nsns.scatterplot(x=x, y=y)\n# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043b\u0438\u043d\u0438\u044e \u0442\u0440\u0435\u043d\u0434\u0430 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nplot_trendline(x, y, 1, 'b', 'MonthlyCharges')\nplt.title('\u0412\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430')\nplt.xlabel('\u041a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432')\nplt.ylabel('\u041c\u0435\u0441\u044f\u0447\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432, USD')\nplt.legend()\nplt.show()","422e520d":"# \u0442\u0435\u043f\u0435\u0440\u044c \u0443\u0436\u0435 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c \u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u043e\u0439 \u0443\u0441\u043b\u0443\u0433\u0438 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438, \u0437\u0430\u0442\u0435\u043c \u043d\u0430\u0439\u0434\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b\ntelecom_df_for_monthlycharges_by_tenure_phoneservice = telecom_df[['PhoneService', 'tenure', 'MonthlyCharges']]\\\n                                          .groupby(['PhoneService', 'tenure']).median().reset_index()\nx_0 = telecom_df_for_monthlycharges_by_tenure_phoneservice\\\n[telecom_df_for_monthlycharges_by_tenure_phoneservice['PhoneService'] == 'No']\\\n['tenure']\ny_0 = telecom_df_for_monthlycharges_by_tenure_phoneservice\\\n[telecom_df_for_monthlycharges_by_tenure_phoneservice['PhoneService'] == 'No']\\\n['MonthlyCharges']\nx_1 = telecom_df_for_monthlycharges_by_tenure_phoneservice\\\n[telecom_df_for_monthlycharges_by_tenure_phoneservice['PhoneService'] == 'Yes']\\\n['tenure']\ny_1 = telecom_df_for_monthlycharges_by_tenure_phoneservice\\\n[telecom_df_for_monthlycharges_by_tenure_phoneservice['PhoneService'] == 'Yes']\\\n['MonthlyCharges']\n# \u043d\u0430\u043d\u0435\u0441\u0451\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\nfig, ax = plt.subplots(figsize=(16, 9))\nsns.scatterplot(x=x_0, y=y_0)\nsns.scatterplot(x=x_1, y=y_1)\n# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043b\u0438\u043d\u0438\u044e \u0442\u0440\u0435\u043d\u0434\u0430 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nplot_trendline(x_0, y_0, 1, 'b', 'No PhoneService')\nplot_trendline(x_1, y_1, 1, 'r', 'Yes PhoneService')\n##plot_trendline(x, y, 1, 'g', 'Base')\nplt.title('\u0412\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0433\u043e\\\n\u0447\u0435\u043a\u0430 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0443\u0441\u043b\u0443\u0433\u0438 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438')\nplt.xlabel('\u041a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432')\nplt.ylabel('\u041c\u0435\u0441\u044f\u0447\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432, USD')\nplt.legend()\nplt.show()","def994f8":"# \u0442\u0435\u043f\u0435\u0440\u044c \u0443\u0436\u0435 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c \u0438 \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u043e\u0439 \u0443\u0441\u043b\u0443\u0433\u0438 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430, \u0437\u0430\u0442\u0435\u043c \u043d\u0430\u0439\u0434\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u043a\u0430\u0436\u0434\u043e\u0439\n# \u0433\u0440\u0443\u043f\u043f\u044b\ntelecom_df_for_monthlycharges_by_tenure_internetservice =\\\ntelecom_df[['InternetService', 'tenure', 'MonthlyCharges']].groupby(['InternetService', 'tenure']).median().reset_index()\nx_0 = telecom_df_for_monthlycharges_by_tenure_internetservice\\\n[telecom_df_for_monthlycharges_by_tenure_internetservice['InternetService'] == 'No']['tenure']\ny_0 = telecom_df_for_monthlycharges_by_tenure_internetservice\\\n[telecom_df_for_monthlycharges_by_tenure_internetservice['InternetService'] == 'No']['MonthlyCharges']\nx_1 = telecom_df_for_monthlycharges_by_tenure_internetservice\\\n[telecom_df_for_monthlycharges_by_tenure_internetservice['InternetService'] == 'DSL']['tenure']\ny_1 = telecom_df_for_monthlycharges_by_tenure_internetservice\\\n[telecom_df_for_monthlycharges_by_tenure_internetservice['InternetService'] == 'DSL']['MonthlyCharges']\nx_2 = telecom_df_for_monthlycharges_by_tenure_internetservice\\\n[telecom_df_for_monthlycharges_by_tenure_internetservice['InternetService'] == 'Fiber optic']['tenure']\ny_2 = telecom_df_for_monthlycharges_by_tenure_internetservice\\\n[telecom_df_for_monthlycharges_by_tenure_internetservice['InternetService'] == 'Fiber optic']['MonthlyCharges']\n# \u043d\u0430\u043d\u0435\u0441\u0451\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\nfig, ax = plt.subplots(figsize=(16, 9))\nsns.scatterplot(x=x_0, y=y_0)\nsns.scatterplot(x=x_1, y=y_1)\nsns.scatterplot(x=x_2, y=y_2)\n# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043b\u0438\u043d\u0438\u044e \u0442\u0440\u0435\u043d\u0434\u0430 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nplot_trendline(x_0, y_0, 1, 'b', 'No InternetService')\nplot_trendline(x_1, y_1, 1, 'r', 'DSL InternetService')\nplot_trendline(x_2, y_2, 1, 'g', 'Fiber optic InternetService')\nplt.title('\u0412\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u0438\u043f\u0430 \u0443\u0441\u043b\u0443\u0433\u0438 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430')\nplt.xlabel('\u041a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432')\nplt.ylabel('\u041c\u0435\u0441\u044f\u0447\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432, USD')\nplt.legend()\nplt.show()","3194496b":"# \u0442\u0435\u043f\u0435\u0440\u044c \u0443\u0436\u0435 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c \u0438 \u043e\u0442\u0442\u043e\u043a\u0443 \u0438 \u043d\u0430\u0439\u0434\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b\ntelecom_df_for_monthlycharges_by_tenure_churn = telecom_df[['Churn', 'tenure', 'MonthlyCharges']]\\\n                                          .groupby(['Churn', 'tenure']).median().reset_index()\nx_0 =\\\ntelecom_df_for_monthlycharges_by_tenure_churn[telecom_df_for_monthlycharges_by_tenure_churn['Churn'] == 'No']['tenure']\ny_0 =\\\ntelecom_df_for_monthlycharges_by_tenure_churn[telecom_df_for_monthlycharges_by_tenure_churn['Churn'] == 'No']['MonthlyCharges']\nx_1 =\\\ntelecom_df_for_monthlycharges_by_tenure_churn[telecom_df_for_monthlycharges_by_tenure_churn['Churn'] == 'Yes']['tenure']\ny_1 =\\\ntelecom_df_for_monthlycharges_by_tenure_churn[telecom_df_for_monthlycharges_by_tenure_churn['Churn'] == 'Yes']['MonthlyCharges']\n# \u043d\u0430\u043d\u0435\u0441\u0451\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\nfig, ax = plt.subplots(figsize=(16, 9))\nsns.scatterplot(x=x_0, y=y_0)\nsns.scatterplot(x=x_1, y=y_1)\n# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043b\u0438\u043d\u0438\u044e \u0442\u0440\u0435\u043d\u0434\u0430 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nplot_trendline(x_0, y_0, 1, 'b', 'Churn No')\nplot_trendline(x_1, y_1, 1, 'r', 'Churn Yes')\nplt.title('\u0412\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430')\nplt.xlabel('\u041a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432')\nplt.ylabel('\u041c\u0435\u0441\u044f\u0447\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432, USD')\nplt.legend()\nplt.show()","3d986038":"# \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c \u0438 \u043d\u0430\u0439\u0434\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b\ntelecom_df_for_services_by_tenure = telecom_df[['tenure', 'services']]\\\n                                          .groupby('tenure').median().reset_index()\nx = telecom_df_for_services_by_tenure['tenure']\ny = telecom_df_for_services_by_tenure['services']\n# \u043d\u0430\u043d\u0435\u0441\u0451\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\nfig, ax = plt.subplots(figsize=(16, 9))\nsns.scatterplot(x=x, y=y)\n# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043b\u0438\u043d\u0438\u044e \u0442\u0440\u0435\u043d\u0434\u0430 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nplot_trendline(x, y, 1, 'b', 'services')\nplt.title('\u0412\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439')\nplt.xlabel('\u041a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432')\nplt.ylabel('\u041a\u043e\u043b-\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439')\nplt.legend()\nplt.show()","90cd1b41":"# \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c \u0438 \u043d\u0430\u0439\u0434\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b\ntelecom_df_for_services_by_tenure_phoneservice = telecom_df[['PhoneService', 'tenure', 'services']]\\\n                                          .groupby(['PhoneService', 'tenure']).median().reset_index()\nx_0 =\\\ntelecom_df_for_services_by_tenure_phoneservice\\\n[telecom_df_for_services_by_tenure_phoneservice['PhoneService'] == 'No']\\\n['tenure']\ny_0 =\\\ntelecom_df_for_services_by_tenure_phoneservice\\\n[telecom_df_for_services_by_tenure_phoneservice['PhoneService'] == 'No']\\\n['services']\nx_1 =\\\ntelecom_df_for_services_by_tenure_phoneservice\\\n[telecom_df_for_services_by_tenure_phoneservice['PhoneService'] == 'Yes']\\\n['tenure']\ny_1 =\\\ntelecom_df_for_services_by_tenure_phoneservice\\\n[telecom_df_for_services_by_tenure_phoneservice['PhoneService'] == 'Yes']\\\n['services']\n# \u043d\u0430\u043d\u0435\u0441\u0451\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\nfig, ax = plt.subplots(figsize=(16, 9))\nsns.scatterplot(x=x_0, y=y_0)\nsns.scatterplot(x=x_1, y=y_1)\n# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043b\u0438\u043d\u0438\u044e \u0442\u0440\u0435\u043d\u0434\u0430 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nplot_trendline(x_0, y_0, 1, 'b', 'PhoneService No')\nplot_trendline(x_1, y_1, 1, 'r', 'PhoneService Yes')\nplt.title('\u0412\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430')\nplt.xlabel('\u041a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432')\nplt.ylabel('\u041c\u0435\u0441\u044f\u0447\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432, USD')\nplt.legend()\nplt.show()","eca2dd22":"# \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c \u0438 \u043d\u0430\u0439\u0434\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b\ntelecom_df_for_services_by_tenure_internetservice = telecom_df[['InternetService', 'tenure', 'services']]\\\n                                          .groupby(['InternetService', 'tenure']).median().reset_index()\nx_0 = telecom_df_for_services_by_tenure_internetservice\\\n[telecom_df_for_services_by_tenure_internetservice['InternetService'] == 'No']\\\n['tenure']\ny_0 = telecom_df_for_services_by_tenure_internetservice\\\n[telecom_df_for_services_by_tenure_internetservice['InternetService'] == 'No']\\\n['services']\nx_1 = telecom_df_for_services_by_tenure_internetservice\\\n[telecom_df_for_services_by_tenure_internetservice['InternetService'] == 'DSL']\\\n['tenure']\ny_1 = telecom_df_for_services_by_tenure_internetservice\\\n[telecom_df_for_services_by_tenure_internetservice['InternetService'] == 'DSL']\\\n['services']\nx_2 = telecom_df_for_services_by_tenure_internetservice\\\n[telecom_df_for_services_by_tenure_internetservice['InternetService'] == 'Fiber optic']\\\n['tenure']\ny_2 = telecom_df_for_services_by_tenure_internetservice\\\n[telecom_df_for_services_by_tenure_internetservice['InternetService'] == 'Fiber optic']\\\n['services']\n# \u043d\u0430\u043d\u0435\u0441\u0451\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\nfig, ax = plt.subplots(figsize=(16, 9))\nsns.scatterplot(x=x_0, y=y_0)\nsns.scatterplot(x=x_1, y=y_1)\nsns.scatterplot(x=x_2, y=y_2)\n# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043b\u0438\u043d\u0438\u044e \u0442\u0440\u0435\u043d\u0434\u0430 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nplot_trendline(x_0, y_0, 1, 'b', 'No InternetService')\nplot_trendline(x_1, y_1, 1, 'r', 'DSL InternetService')\nplot_trendline(x_2, y_2, 1, 'g', 'Fiber optic InternetService')\nplt.title('\u0412\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430')\nplt.xlabel('\u041a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432')\nplt.ylabel('\u041c\u0435\u0441\u044f\u0447\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432, USD')\nplt.legend()\nplt.show()","b11c6f37":"# \u0442\u0435\u043f\u0435\u0440\u044c \u0443\u0436\u0435 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0430\u043c \u0438 \u043e\u0442\u0442\u043e\u043a\u0443 \u0438 \u043d\u0430\u0439\u0434\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b\ntelecom_df_for_services_by_tenure_churn = telecom_df[['Churn', 'tenure', 'services']]\\\n                                          .groupby(['Churn', 'tenure']).median().reset_index()\nx_0 =\\\ntelecom_df_for_services_by_tenure_churn[telecom_df_for_services_by_tenure_churn['Churn'] == 'No']['tenure']\ny_0 =\\\ntelecom_df_for_services_by_tenure_churn[telecom_df_for_services_by_tenure_churn['Churn'] == 'No']['services']\nx_1 =\\\ntelecom_df_for_services_by_tenure_churn[telecom_df_for_services_by_tenure_churn['Churn'] == 'Yes']['tenure']\ny_1 =\\\ntelecom_df_for_services_by_tenure_churn[telecom_df_for_services_by_tenure_churn['Churn'] == 'Yes']['services']\n# \u043d\u0430\u043d\u0435\u0441\u0451\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0435\u0441\u044f\u0446\u0430\nfig, ax = plt.subplots(figsize=(16, 9))\nsns.scatterplot(x=x_0, y=y_0)\nsns.scatterplot(x=x_1, y=y_1)\n# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043b\u0438\u043d\u0438\u044e \u0442\u0440\u0435\u043d\u0434\u0430 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\nplot_trendline(x_0, y_0, 1, 'b', 'Churn No')\nplot_trendline(x_1, y_1, 1, 'r', 'Churn Yes')\nplt.title('\u0412\u043b\u0438\u044f\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430')\nplt.xlabel('\u041a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432')\nplt.ylabel('\u041c\u0435\u0441\u044f\u0447\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u0432, USD')\nplt.legend()\nplt.show()","654aee68":"fig, ax = plt.subplots(figsize=(16, 9))\nsns.heatmap(telecom_df[['tenure', 'MonthlyCharges', 'TotalCharges', 'services']].corr(), annot=True, cmap='RdYlGn',\\\n            linewidths=0.2, annot_kws={'size':20})\nplt.show()","25507dbe":"from sklearn.metrics import matthews_corrcoef\n\n\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ntelecom_df_for_corr = telecom_df.copy()\n# \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 InternetService, 'Fiber optic' \u0438 'DSL' \u043d\u0430 'Yes'\ntelecom_df_for_corr['InternetService'].replace({'Fiber optic':'Yes', 'DSL':'Yes'}, inplace=True)\n# \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430\nmatthew_corr_columns_1 = ['SeniorCitizen', 'Partner', 'Dependents', 'PhoneService', 'InternetService', 'PaperlessBilling']\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndef matthews_corr(df):\n    corr_dict = {column:[] for column in df.columns}\n    for column_1 in df.columns:\n        for column_2 in df.columns:\n            corr_dict[column_1] += [matthews_corrcoef(df[column_1], df[column_2])]\n    corr_df = pd.DataFrame(data=corr_dict, index=df.columns, columns=df.columns)\n    return corr_df\n\nfig, ax = plt.subplots(figsize=(16, 9))\nsns.heatmap(\\\nmatthews_corr(telecom_df_for_corr[matthew_corr_columns_1]),\nannot=True, cmap='RdYlGn', linewidths=0.2, annot_kws={'size':20})\nplt.show()","f450275f":"telecom_df_for_corr_IS = telecom_df_for_corr[['OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n                                              'TechSupport', 'StreamingTV', 'StreamingMovies']]\ntelecom_df_for_corr_IS = telecom_df_for_corr_IS[telecom_df_for_corr_IS != 'No internet service']\ntelecom_df_for_corr_IS.dropna(inplace=True)\ntelecom_df_for_corr_IS\n# matthew_corr_columns_2 = ['OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies']\n\nfig, ax = plt.subplots(figsize=(16, 9))\nsns.heatmap(\\\nmatthews_corr(telecom_df_for_corr_IS),\nannot=True, cmap='RdYlGn', linewidths=0.2, annot_kws={'size':20})\nplt.show()","d610c7c6":"# \u0432\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445\nfor column in telecom_df.columns:\n    print(f'\u041a\u043e\u043b\u043e\u043d\u043a\u0430 {column}, {len(telecom_df[column].unique())} \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439')\n    print(telecom_df[column].unique())","35117d99":"telecom_df['tenure_years'] = pd.cut(telecom_df['tenure'], 6, labels=range(1, 7))","5ca97069":"sns.distplot(telecom_df['MonthlyCharges'])\nplt.show()","4fe3083c":"from sklearn.cluster import KMeans\n\n\nfig, axes = plt.subplots(1, 2, figsize=(16, 9))\nsns.distplot(telecom_df['MonthlyCharges'], ax=axes[0])\nkm_ = KMeans(n_clusters=2, random_state=0)\nkm_model = km_.fit(np.array(telecom_df['MonthlyCharges']).reshape(-1, 1))\ntelecom_df['MonthlyCharges_group'] = km_model.labels_\ncluster_centers = km_model.cluster_centers_.ravel()\nfor i in cluster_centers:\n    plt.axvline(i)\nfor i, (group, cluster_center) in enumerate(zip(telecom_df.groupby('MonthlyCharges_group')['MonthlyCharges'], cluster_centers)):\n    sns.distplot(group[1], ax=axes[1], fit=norm)\n    axes[1].axvline(cluster_center, c='g')\nplt.show()","53f2cac0":"# \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u043c\u0435\u0442\u0438\u043c \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043b\u0430\u0441\u0442\u0435\u0440 \u043a\u0430\u043a \u0442\u0440\u0435\u0442\u0438\u0439 (\u0432\u0435\u0434\u044c \u0438\u0445 \u0441\u043a\u043e\u0440\u043e \u0441\u0442\u0430\u043d\u0435\u0442 \u0442\u0440\u0438)\ntelecom_df.loc[telecom_df['MonthlyCharges_group']==1, 'MonthlyCharges_group'] = 2\ntelecom_df_for_dist_1 = telecom_df[telecom_df['MonthlyCharges_group']==0]\nkm__ = KMeans(n_clusters=2, random_state=0)\nkm_model_ = km__.fit(np.array(telecom_df_for_dist_1['MonthlyCharges']).reshape(-1, 1))\ntelecom_df.loc[telecom_df['MonthlyCharges_group']==0, 'MonthlyCharges_group'] = km_model_.labels_\ncluster_centers_ = np.r_[cluster_centers[1], km_model_.cluster_centers_.ravel()]\nprint(cluster_centers_)\n# \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\nfig, axes = plt.subplots(1, 2, figsize=(16, 9))\nsns.distplot(telecom_df['MonthlyCharges'], ax=axes[0])\nfor i in cluster_centers_:\n    plt.axvline(i)\nfor i, (group, cluster_center) in enumerate(zip(telecom_df.groupby('MonthlyCharges_group')['MonthlyCharges'], cluster_centers_)):\n    sns.distplot(group[1], ax=axes[1], fit=norm)\n    axes[1].axvline(cluster_center, c='g')\nplt.show()","8c4511d1":"# \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043d\u0438\u043c\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438\ntelecom_df_for_monthlycharges_by_tenure_churn.rename(columns={'MonthlyCharges': 'median_by_monthlycharges'}, inplace=True)\n# \u0437\u0430\u0442\u0435\u043c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntelecom_df_for_monthlycharges_by_tenure_churn['values'] = telecom_df[['Churn', 'tenure', 'MonthlyCharges']]\\\n                                                .groupby(['Churn', 'tenure'])['MonthlyCharges'].apply(list)\\\n                                                .reset_index()['MonthlyCharges']\n# \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0430\u043c \u043e\u0442\u0442\u043e\u043a\u0430\ntelecom_df_for_monthlycharges_by_tenure_churn['clusters_centers'] = 0\nfor churn in ['Yes', 'No']:\n    # \u0437\u0430\u0432\u0435\u0434\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u043a\u0443\u0434\u0430 \u0432\u043d\u0435\u0441\u0451\u043c \u0433\u0440\u0443\u043f\u043f\u044b \u043f\u043e \u043e\u0442\u0442\u043e\u043a\u0443\n    data = telecom_df_for_monthlycharges_by_tenure_churn[telecom_df_for_monthlycharges_by_tenure_churn['Churn'] == churn]\n    x = data['tenure']\n    y = data['median_by_monthlycharges']\n    # \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0442\u0440\u0435\u043d\u0434 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b\n    trend_model = np.polyfit(x, y, 1)\n    trendline = np.poly1d(trend_model)\n    # \u0437\u0430\u0432\u0435\u0434\u0451\u043c \u043d\u043e\u0432\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u044f\u043c\u0438 \u0446\u0435\u043d\u0442\u0440\u043e\u0432 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u043e\u0432\n    telecom_df_for_monthlycharges_by_tenure_churn\\\n    .loc[telecom_df_for_monthlycharges_by_tenure_churn['Churn'] == churn, 'clusters_centers'] = trendline(x)\n    # \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n    sns.scatterplot(x, y)\n    plt.plot(x, trendline(x))\nplt.show()","af00f809":"# \u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e tenure, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0446\u0435\u043d\u0442\u0440\u044b \u0434\u0432\u0443\u0445 \u043a\u043b\u0430\u0441\u0435\u0442\u0440\u043e\u0432\ntelecom_df_for_high_risk_groupby_1 = telecom_df_for_monthlycharges_by_tenure_churn\\\n                                  .groupby('tenure')['clusters_centers']\\\n                                  .apply(list)\\\n                                  .reset_index()\nprint(telecom_df_for_high_risk_groupby_1)","1aaeed7a":"from scipy.spatial.distance import euclidean\nfrom sklearn.metrics import accuracy_score\n\n\n# \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u0447\u043a\u0430 \u043e\u0441\u0442\u0430\u043b\u0430\u0441\u044c \u0431\u0435\u0437 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0434\u0430\u0434\u0438\u043c \u0432\u0442\u043e\u0440\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 75\ntelecom_df_for_high_risk_groupby_1.iloc[0, 1].append(75)\n# \u0442\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c\ntelecom_df_for_high_risk = telecom_df.merge(telecom_df_for_high_risk_groupby_1)\n# \u043f\u043e\u0440\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u0430 MonthlyCharges \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0431\u043b\u0438\u0436\u0435\ntelecom_df_for_high_risk['high_risk_by_monthlycharges'] = telecom_df_for_high_risk[['MonthlyCharges', 'clusters_centers']]\\\n.apply(lambda x: np.argmin([euclidean(x['MonthlyCharges'], i) for i in x['clusters_centers']]), axis=1)\ntelecom_df_for_high_risk['Churn'].replace({'Yes':1, 'No':0}, inplace=True)\n# \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\nprint('\u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0439 -',\\\n      accuracy_score(telecom_df_for_high_risk['Churn'], telecom_df_for_high_risk['high_risk_by_monthlycharges']))","c32ac660":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c\u0443 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443\ntelecom_df = pd.merge(telecom_df, telecom_df_for_high_risk[['customerID', 'high_risk_by_monthlycharges']])","abc7a402":"# \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0434\u043d\u0438\u043c\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u043c\u0435\u0434\u0438\u0430\u043d\u0430\u043c\u0438\ntelecom_df_for_services_by_tenure_churn.rename(columns={'services': 'median_by_services'}, inplace=True)\n# \u0437\u0430\u0442\u0435\u043c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\ntelecom_df_for_services_by_tenure_churn['values'] = telecom_df[['Churn', 'tenure', 'services']]\\\n                                                .groupby(['Churn', 'tenure'])['services'].apply(list)\\\n                                                .reset_index()['services']\n# \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043f\u043e \u0433\u0440\u0443\u043f\u043f\u0430\u043c \u043e\u0442\u0442\u043e\u043a\u0430\ntelecom_df_for_services_by_tenure_churn['clusters_centers'] = 0\nfor churn in ['Yes', 'No']:\n    # \u0437\u0430\u0432\u0435\u0434\u0435\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u043a\u0443\u0434\u0430 \u0432\u043d\u0435\u0441\u0451\u043c \u0433\u0440\u0443\u043f\u043f\u044b \u043f\u043e \u043e\u0442\u0442\u043e\u043a\u0443\n    data = telecom_df_for_services_by_tenure_churn[telecom_df_for_services_by_tenure_churn['Churn'] == churn]\n    x = data['tenure']\n    y = data['median_by_services']\n    # \u0440\u0430\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0442\u0440\u0435\u043d\u0434 \u043a\u0430\u0436\u0434\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u044b\n    trend_model = np.polyfit(x, y, 1)\n    trendline = np.poly1d(trend_model)\n    # \u0437\u0430\u0432\u0435\u0434\u0451\u043c \u043d\u043e\u0432\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u044f\u043c\u0438 \u0446\u0435\u043d\u0442\u0440\u043e\u0432 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u043e\u0432\n    telecom_df_for_services_by_tenure_churn\\\n    .loc[telecom_df_for_services_by_tenure_churn['Churn'] == churn, 'clusters_centers'] = trendline(x)\n    # \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n    sns.scatterplot(x, y)\n    plt.plot(x, trendline(x))\nplt.show()","d7473843":"# \u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u0441\u0433\u0440\u0443\u043f\u043f\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u043e tenure, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0446\u0435\u043d\u0442\u0440\u044b \u0434\u0432\u0443\u0445 \u043a\u043b\u0430\u0441\u0435\u0442\u0440\u043e\u0432\ntelecom_df_for_high_risk_groupby_2 = telecom_df_for_monthlycharges_by_tenure_churn\\\n                                  .groupby('tenure')['clusters_centers']\\\n                                  .apply(list)\\\n                                  .reset_index()\nprint(telecom_df_for_high_risk_groupby_2)","22ee4f98":"# \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u0447\u043a\u0430 \u043e\u0441\u0442\u0430\u043b\u0430\u0441\u044c \u0431\u0435\u0437 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0434\u0430\u0434\u0438\u043c \u0432\u0442\u043e\u0440\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 75\ntelecom_df_for_high_risk_groupby_2.iloc[0, 1].append(75)\n# \u0442\u0435\u043f\u0435\u0440\u044c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u0441 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c\ntelecom_df_for_high_risk = telecom_df.merge(telecom_df_for_high_risk_groupby_2)\n# \u043f\u043e\u0440\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u0430 services \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0431\u043b\u0438\u0436\u0435\ntelecom_df_for_high_risk['high_risk_by_services'] = telecom_df_for_high_risk[['services', 'clusters_centers']]\\\n.apply(lambda x: np.argmin([euclidean(x['services'], i) for i in x['clusters_centers']]), axis=1)\ntelecom_df_for_high_risk['Churn'].replace({'Yes':1, 'No':0}, inplace=True)\n# \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u0445 \u043e\u0442\u0432\u0435\u0442\u043e\u0432\nprint('\u041f\u0440\u043e\u0446\u0435\u043d\u0442 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0439 -',\\\n      accuracy_score(telecom_df_for_high_risk['Churn'], telecom_df_for_high_risk['high_risk_by_services']))","bb4809a5":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043a \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c\u0443 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0443\ntelecom_df = pd.merge(telecom_df, telecom_df_for_high_risk[['customerID', 'high_risk_by_services']])\ntelecom_df","32b911f8":"print(len(telecom_df[(telecom_df['PhoneService'] == 'No')\\\n    & ((telecom_df['MultipleLines'] == 'Yes') | (telecom_df['MultipleLines'] == 'No'))]))\nprint(len(telecom_df[(telecom_df['PhoneService'] == 'Yes') & (telecom_df['MultipleLines'] == 'No phone service')]))","3ac3ef3c":"internetservices = ['OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV', 'StreamingMovies']\nfor column in internetservices:\n    print(len(telecom_df[(telecom_df['InternetService'] == 'No')\n        & ((telecom_df[column] == 'Yes') | (telecom_df[column] == 'No'))]))","22761e74":"telecom_df_for_ml =\\\ntelecom_df.drop(['customerID', 'tenure', 'TotalCharges', 'MonthlyCharges', 'services'], axis=1)","321bfb99":"from sklearn.preprocessing import LabelEncoder\n\n\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445\ndef transform(df):\n    transform_df = df.copy()\n    le_dict = {column:LabelEncoder() for column in df.columns}\n    for column, le_model in le_dict.items():\n        le_dict[column] = le_model.fit(df[column])\n        transform_df[column] = le_dict[column].transform(df[column])\n    return transform_df, le_dict\n\n# \u0430 \u044d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0438 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0435\u043d\u043a\u043e\u0434\u0435\u0440\u043e\u0432\ndef inverse_transform(transform_df, le_dict):\n    inverse_transform_df = transform_df.copy()\n    for column, le_model in le_dict.items():\n        inverse_transform_df[column] = le_dict[column].inverse_transform(transform_df[column])\n    return inverse_transform_df, le_dict\n\ndf_for_learning = transform(telecom_df_for_ml)[0]","bbd27558":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import train_test_split\n\n# \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0444\u0438\u0447\u0438 \u0438 \u0446\u0435\u043b\u0438\nx = df_for_learning.drop('Churn', axis=1)\ny = df_for_learning['Churn']\n# \u0430 \u0442\u0435\u043f\u0435\u0440\u044c \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0444\u0438\u0447\u0438 \u0438 \u0446\u0435\u043b\u0438 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)\n# \u0442\u0430\u043a\u0436\u0435 \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u043a\u0440\u043e\u0441\u0441-\u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e\nskf = StratifiedKFold(n_splits=5, random_state=0)\n# \u0434\u043b\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043d\u0430\u043c \u0431\u0443\u0434\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u043c\u0435\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0438 \u0446\u0435\u043b\u0438 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\ntrain, test = train_test_split(df_for_learning, test_size=0.2, random_state=0)","cad64e50":"from sklearn.tree import ExtraTreeClassifier, DecisionTreeClassifier\n\nfrom sklearn.svm import SVC, NuSVC, OneClassSVM, LinearSVC\n\nfrom sklearn.neural_network import MLPClassifier\n\nfrom sklearn.neighbors import KNeighborsClassifier, NearestCentroid\n\nfrom sklearn.naive_bayes import BernoulliNB, GaussianNB, MultinomialNB, CategoricalNB, ComplementNB\n\nfrom sklearn.linear_model import LogisticRegressionCV, ElasticNetCV, RidgeClassifierCV\n\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\n\nfrom sklearn.metrics import recall_score, roc_auc_score","c866e84d":"# \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432\nbase_classifiers = [ExtraTreeClassifier, DecisionTreeClassifier, SVC, NuSVC, OneClassSVM, LinearSVC, MLPClassifier,\n                    KNeighborsClassifier, NearestCentroid, BernoulliNB, GaussianNB, MultinomialNB, CategoricalNB,\n                    ComplementNB, LogisticRegressionCV, RidgeClassifierCV,\n                    LinearDiscriminantAnalysis]\n# \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \"\u043f\u0440\u043e\u0433\u043e\u043d\u0430\" \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432\nclassifier_names, recall_scores, roc_auc_scores = [], [], []\nfor classifier in base_classifiers:\n    # \"\u0437\u0430\u0432\u0435\u0440\u043d\u0451\u043c\" \u0432 \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0443 try-except \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0438 \u0437\u0430\u0434\u0430\u0434\u0438\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 random_state=0 \u0434\u043b\u044f \u0440\u0435\u043f\u0440\u0435\u0437\u0435\u043d\u0442\u0430\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432\n    try:\n        estimator = classifier(random_state=0)\n    except TypeError:\n        estimator = classifier()\n    # \u043e\u0431\u0443\u0447\u0438\u043c \u043c\u043e\u0434\u0435\u043b\u044c\n    model = estimator.fit(x_train, y_train)\n    # \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0444\u0438\u0447\n    y_pred = model.predict(x_test)\n    # \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 OneClassSVM, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0434\u0430\u0451\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 -1, 1, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u043c\u0435\u043d\u044b\n    if -1 in y_pred:\n        y_pred[y_pred == -1] = 0\n    # \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u0432 ElasticNet \u0438 ElasticNetCV, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0430\u044e\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438, \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u043c\u0435\u043d\u044b\n    y_pred = [0 if i <= 0.5 else 1 for i in y_pred]\n    # \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0438 \u0437\u0430\u043d\u0435\u0441\u0451\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0438\n    classifier_names += [classifier.__name__]\n    roc_auc_scores += [roc_auc_score(y_test, y_pred)]\n    recall_scores += [recall_score(y_test, y_pred)]\n# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438\nbase_classifiers_df = pd.DataFrame(data=zip(classifier_names, roc_auc_scores, recall_scores),\n                                   columns=['classifier', 'roc_auc', 'recall'])\n# \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u043f\u043e roc-auc \u043c\u0435\u0442\u0440\u0438\u043a\u0435 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u043e\u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443\nbase_classifiers_df = base_classifiers_df.sort_values(['roc_auc', 'recall'], ascending=False).reset_index(drop=True)\nbase_classifiers_df","5e24954d":"classifier_names_GS, roc_auc_scores_GS, recall_scores_GS  = [], [], []","a9ea83cf":"%%time\n\nfrom sklearn.model_selection import GridSearchCV\n\n\ncnb = CategoricalNB(alpha=0.52)\n# cnb = CategoricalNB()\ncnb_params = {\n# 'alpha':np.arange(0, 1, 0.01),\n}\ncnb_GS = GridSearchCV(estimator=cnb, param_grid=cnb_params, cv=skf, n_jobs=-1)\ncnb_GS_model = cnb_GS.fit(x_train, y_train)\ncnb_y_pred = cnb_GS_model.predict(x_test)\nclassifier_names_GS += ['CategoricalNB']\nroc_auc_scores_GS += [roc_auc_score(y_test, cnb_y_pred)]\nrecall_scores_GS += [recall_score(y_test, cnb_y_pred)]\nprint('cnb_GS_model.best_params_', cnb_GS_model.best_params_)\nprint('roc_auc', roc_auc_score(y_test, cnb_y_pred))\nprint('recall', recall_score(y_test, cnb_y_pred))","71511f86":"%%time\n\ngnb = GaussianNB(var_smoothing=1e-10)\n# gnb = GaussianNB()\ngnb_params = {\n# 'var_smoothing':np.arange(1e-10, 1e-8, 1e-10),\n}\ngnb_GS = GridSearchCV(estimator=gnb, param_grid=gnb_params, cv=skf, n_jobs=-1)\ngnb_GS_model = gnb_GS.fit(x_train, y_train)\ngnb_y_pred = gnb_GS_model.predict(x_test)\nclassifier_names_GS += ['GaussianNB']\nroc_auc_scores_GS += [roc_auc_score(y_test, gnb_y_pred)]\nrecall_scores_GS += [recall_score(y_test, gnb_y_pred)]\nprint('gnb_GS_model.best_params_', gnb_GS_model.best_params_)\nprint('roc_auc', roc_auc_score(y_test, gnb_y_pred))\nprint('recall', recall_score(y_test, gnb_y_pred))","03efaa3b":"%%time\n\nlda = LinearDiscriminantAnalysis(solver='svd', store_covariance=True, tol=10e-08)\n# lda = LinearDiscriminantAnalysis()\nlda_params = {\n# 'solver':['svd', 'lsqr'],\n# 'store_covariance':[True, False],\n# 'tol':np.arange(1.0e-8, 2.0e-6, 5.0e-8)\n}\nlda_GS = GridSearchCV(estimator=lda, param_grid=lda_params, cv=skf, n_jobs=-1)\nlda_GS_model = lda_GS.fit(x_train, y_train)\nlda_y_pred = lda_GS_model.predict(x_test)\nclassifier_names_GS += ['LinearDiscriminantAnalysis']\nroc_auc_scores_GS += [roc_auc_score(y_test, lda_y_pred)]\nrecall_scores_GS += [recall_score(y_test, lda_y_pred)]\nprint('lda_GS_model.best_params_', lda_GS_model.best_params_)\nprint('roc_auc', roc_auc_score(y_test, lda_y_pred))\nprint('recall', recall_score(y_test, lda_y_pred))","4284ea3e":"%%time\n\nlrcv = LogisticRegressionCV(Cs=5, cv=skf, dual=False, multi_class='auto', penalty='l1', solver='saga',\n    refit=False, random_state=0, n_jobs=-1)\n# lrcv = LogisticRegressionCV()\nlrcv_params = {\n# 'Cs':range(5, 14),\n# 'cv':[range(2, 5), skf, None],\n# 'dual':[True, False],\n# 'penalty':['l1', 'l2', 'elasticnet'],\n# 'solver':['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n# 'refit':[True, False],\n# 'multi_class':['auto', 'ovr', 'multinomial']\n}\nlrcv_GS = GridSearchCV(estimator=lrcv, param_grid=lrcv_params, cv=skf, n_jobs=-1)\nlrcv_GS_model = lrcv_GS.fit(x_train, y_train)\nlrcv_y_pred = lrcv_GS_model.predict(x_test)\nclassifier_names_GS += ['LogisticRegressionCV']\nroc_auc_scores_GS += [roc_auc_score(y_test, lrcv_y_pred)]\nrecall_scores_GS += [recall_score(y_test, lrcv_y_pred)]\nprint('lrcv_GS_model.best_params_', lrcv_GS_model.best_params_)\nprint('roc_auc', roc_auc_score(y_test, lrcv_y_pred))\nprint('recall', recall_score(y_test, lrcv_y_pred))","88ca982a":"%%time\n\nrccv = RidgeClassifierCV(cv=skf, fit_intercept=True, normalize=False, store_cv_values=False)\n# rc\u0441v = RidgeClassifierCV()\nrccv_params = {\n# 'fit_intercept':[True, False],\n# 'normalize':[True, False],\n# 'cv':[range(2, 5), skf, None],\n# 'class_weight':['balanced', None],\n# 'store_cv_values':[True, False],\n}\nrccv_GS = GridSearchCV(estimator=rccv, param_grid=rccv_params, cv=skf, n_jobs=-1)\nrccv_GS_model = rccv_GS.fit(x_train, y_train)\nrccv_y_pred = rccv_GS_model.predict(x_test)\nclassifier_names_GS += ['RidgeClassifierCV']\nroc_auc_scores_GS += [roc_auc_score(y_test, rccv_y_pred)]\nrecall_scores_GS += [recall_score(y_test, rccv_y_pred)]\nprint('rccv_GS_model.best_params_', rccv_GS_model.best_params_)\nprint('roc_auc', roc_auc_score(y_test, rccv_y_pred))\nprint('recall', recall_score(y_test, rccv_y_pred))","7b092fcf":"%%time\n\ndtc = DecisionTreeClassifier(criterion='gini', max_depth=4, splitter='random', random_state=0)\n# dtc = DecisionTreeClassifier()\ndtc_params = {\n# 'criterion':[\"gini\", \"entropy\"],\n# 'splitter':[\"best\", \"random\"],\n# 'max_depth':range(2, 7),\n}\ndtc_GS = GridSearchCV(estimator=dtc, param_grid=dtc_params, cv=skf, n_jobs=-1)\ndtc_GS_model = dtc_GS.fit(x_train, y_train)\ndtc_y_pred = dtc_GS_model.predict(x_test)\nclassifier_names_GS += ['DecisionTreeClassifier']\nroc_auc_scores_GS += [roc_auc_score(y_test, dtc_y_pred)]\nrecall_scores_GS += [recall_score(y_test, dtc_y_pred)]\nprint('dtc_GS_model.best_params_', dtc_GS_model.best_params_)\nprint('roc_auc_score', roc_auc_score(y_test, dtc_y_pred))\nprint('recall_score', recall_score(y_test, dtc_y_pred))","cd583d78":"%%time\n\nknc = KNeighborsClassifier(algorithm='ball_tree', n_neighbors=71, n_jobs =-1)\n# knc = KNeighborsClassifier()\nknc_params = {\n# 'n_neighbors':range(50, 100),\n# 'algorithm':['auto', 'ball_tree', 'kd_tree', 'brute'],\n}\nknc_GS = GridSearchCV(estimator=knc, param_grid=knc_params, cv=skf, n_jobs=-1)\nknc_GS_model = knc_GS.fit(x_train, y_train)\nknc_y_pred = knc_GS_model.predict(x_test)\nclassifier_names_GS += ['KNeighborsClassifier']\nroc_auc_scores_GS += [roc_auc_score(y_test, knc_y_pred)]\nrecall_scores_GS += [recall_score(y_test, knc_y_pred)]\nprint('knc_GS_model.best_params_', knc_GS_model.best_params_)\nprint('roc_auc_score', roc_auc_score(y_test, knc_y_pred))\nprint('recall_score', recall_score(y_test, knc_y_pred))","5e4af1d3":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438\nbase_classifiers_GS_df = pd.DataFrame(data=zip(classifier_names_GS, roc_auc_scores_GS, recall_scores_GS),\n                                   columns=['classifier', 'roc_auc', 'recall'])\n# \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u043f\u043e roc-auc \u043c\u0435\u0442\u0440\u0438\u043a\u0435 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u043e\u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443\nbase_classifiers_GS_df = base_classifiers_GS_df.sort_values(['roc_auc', 'recall'], ascending=False).reset_index(drop=True)\nbase_classifiers_GS_df","fe0f8d4a":"from sklearn.ensemble import BaggingClassifier, RandomForestClassifier\n\n\nbc = BaggingClassifier(base_estimator=lrcv, n_estimators=1, max_features=19, oob_score=True, n_jobs=-1, random_state=0)\n# bc = BaggingClassifier(n_jobs=-1, random_state=0)\nbc_params = {\n# 'base_estimator':[lda, lrcv, rccv, dtc],\n# 'n_estimators':range(1, 9),\n# 'max_features':range(16, 22),\n# 'bootstrap_features':[True, False],\n# 'oob_score':[True, False],\n# 'warm_start':[True, False],\n}\nbc_GS = GridSearchCV(estimator=bc, param_grid=bc_params, cv=skf, n_jobs=-1)\nbc_GS_model = bc_GS.fit(x_train, y_train)\nbc_y_pred = bc_GS_model.predict(x_test)\nclassifier_names_GS += ['BaggingClassifier']\nroc_auc_scores_GS += [roc_auc_score(y_test, bc_y_pred)]\nrecall_scores_GS += [recall_score(y_test, bc_y_pred)]\nprint('bc_GS_model.best_params_', bc_GS_model.best_params_)\nprint('roc_auc_score', roc_auc_score(y_test, bc_y_pred))\nprint('recall_score', recall_score(y_test, bc_y_pred))","fddab103":"rfc = RandomForestClassifier(n_estimators=186,  max_depth=6, oob_score=True, warm_start=True, n_jobs=-1, random_state=0)\n# rfc = RandomForestClassifier(n_jobs=-1, random_state=0)\nrfc_params = {\n# 'n_estimators':range(1000, 200),\n# 'max_depth':range(6, 50),\n# 'criterion':['gini', 'entropy'],\n# 'oob_score':[True, False],\n# 'warm_start':[True, False]\n}\nrfc_GS = GridSearchCV(estimator=rfc, param_grid=rfc_params, cv=skf, n_jobs=-1)\nrfc_GS_model = rfc_GS.fit(x_train, y_train)\nrfc_y_pred = rfc_GS_model.predict(x_test)\nclassifier_names_GS += ['RandomForestClassifier']\nroc_auc_scores_GS += [roc_auc_score(y_test, rfc_y_pred)]\nrecall_scores_GS += [recall_score(y_test, rfc_y_pred)]\nprint('rfc_GS_model.best_params_', rfc_GS_model.best_params_)\nprint('roc_auc_score', roc_auc_score(y_test, rfc_y_pred))\nprint('recall_score', recall_score(y_test, rfc_y_pred))","6129fca9":"import xgboost as xgb\nfrom xgboost.sklearn import XGBClassifier\n\n\nxgbc = XGBClassifier(\n    objective='binary:logistic',\n    n_jobs=-1,\n    random_state=0,\n    learning_rate=0.1,\n    gamma=0,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    scale_pos_weight=1\n)\nxgbc_params = {\n    'max_depth':range(1,10),\n    'min_child_weight':range(8,20)\n}\nxgbc_GS = GridSearchCV(\n    estimator=xgbc,\n    param_grid=xgbc_params,\n    scoring='roc_auc',\n    cv=5,\n    n_jobs=-1)\nxgbc_GS_model = xgbc_GS.fit(x_train, y_train)\ny_pred = xgbc_GS_model.predict(x_test)\nprint('xgbc_GS_model.best_params_', xgbc_GS_model.best_params_)\nprint('roc_auc_score', roc_auc_score(y_test, y_pred))\nprint('recall_score', recall_score(y_test, y_pred))","805ca760":"xgbc = XGBClassifier(\n    objective='binary:logistic',\n    n_jobs=-1,\n    random_state=0,\n    learning_rate=0.1,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    max_depth=3,\n    min_child_weight=13\n)\nxgbc_params = {\n    'gamma':np.arange(0, 0.1, 0.01),\n    'scale_pos_weight':np.arange(0.5, 3, 0.1)\n}\nxgbc_GS = GridSearchCV(\n    estimator=xgbc,\n    param_grid=xgbc_params,\n    scoring='roc_auc',\n    cv=5,\n    n_jobs=-1)\nxgbc_GS_model = xgbc_GS.fit(x_train, y_train)\ny_pred = xgbc_GS_model.predict(x_test)\nprint('xgbc_GS_model.best_params_', xgbc_GS_model.best_params_)\nprint('roc_auc_score', roc_auc_score(y_test, y_pred))\nprint('recall_score', recall_score(y_test, y_pred))","6c67ac6c":"xgbc = XGBClassifier(\n    objective='binary:logistic',\n    n_jobs=-1,\n    random_state=0,\n    learning_rate=0.1,\n    max_depth=3,\n    min_child_weight=13,\n    gamma=0,\n    scale_pos_weight=2.1,\n)\nxgbc_params = {\n    'subsample':np.arange(0.1, 1, 0.05),\n    'colsample_bytree':np.arange(0.1, 1, 0.05),\n}\nxgbc_GS = GridSearchCV(\n    estimator=xgbc,\n    param_grid=xgbc_params,\n    scoring='roc_auc',\n    cv=5,\n    n_jobs=-1)\nxgbc_GS_model = xgbc_GS.fit(x_train, y_train)\nxgbc_y_pred = xgbc_GS_model.predict(x_test)\nprint('xgbc_GS_model.best_params_', xgbc_GS_model.best_params_)\nprint('roc_auc_score', roc_auc_score(y_test, xgbc_y_pred))\nprint('recall_score', recall_score(y_test, xgbc_y_pred))","0b0b0688":"xgbc = XGBClassifier(\n    objective='binary:logistic',\n    n_jobs=-1,\n    random_state=0,\n    learning_rate=0.1,\n    max_depth=3,\n    min_child_weight=13,\n    gamma=0,\n    scale_pos_weight=2.1,\n    subsample=0.7,\n    colsample_bytree=0.2)\n\nxgbc_model = xgbc.fit(x_train, y_train)\nxgbc_y_pred = xgbc_model.predict(x_test)\nclassifier_names_GS += ['XGBClassifier']\nroc_auc_scores_GS += [roc_auc_score(y_test, xgbc_y_pred)]\nrecall_scores_GS += [recall_score(y_test, xgbc_y_pred)]\nprint('roc_auc_score', roc_auc_score(y_test, xgbc_y_pred))\nprint('recall_score', recall_score(y_test, xgbc_y_pred))","ed9018dd":"xgb.plot_importance(xgbc_model)","218a13b0":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430\u0448\u0438\u0445 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432\nestimators = [cnb, gnb, knc, lda, rccv, lrcv, dtc]","61fdc1c2":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u0430\u0442\u0440\u0438\u0446 \u043c\u0435\u0442\u0430\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\ndef meta_matrix(estimators, x_train, x_test, y_train, cv=5):\n    from sklearn.model_selection import cross_val_predict\n\n    \n    meta_mtrx_train = np.empty((len(x_train), len(estimators)))\n    meta_mtrx_test = np.empty((len(x_test), len(estimators)))\n    for n, estimator in enumerate(estimators):\n        meta_mtrx_train[:, n] = cross_val_predict(estimator, x_train, y_train, cv=cv, method='predict')\n        meta_mtrx_test[:, n] = estimator.fit(x_train, y_train).predict(x_test)\n    return meta_mtrx_train, meta_mtrx_test\n\n# \u0434\u0432\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043c\u0435\u0442\u0430\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (\u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0430\u044f \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0430\u044f)\nmeta_mtrx_train, meta_mtrx_test = meta_matrix(estimators, x_train, x_test, y_train)","9b697467":"xgb_stacking = XGBClassifier(\n    objective='binary:logistic',\n    n_jobs=-1,\n    random_state=0,\n    learning_rate=0.1,\n    gamma=0,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    scale_pos_weight=1\n)\nxgb_stacking_params = {\n    'max_depth':range(1, 10),\n    'min_child_weight':range(1, 15)\n}\nxgb_stacking_GS = GridSearchCV(\n    estimator=xgb_stacking,\n    param_grid=xgb_stacking_params,\n    scoring='roc_auc',\n    cv=5,\n    n_jobs=-1)\nxgb_stacking_GS_model = xgb_stacking_GS.fit(meta_mtrx_train, y_train)\nstacking_y_pred = xgb_stacking_GS_model.predict(meta_mtrx_test)\nprint('xgb_stacking_GS_model.best_params_', xgb_stacking_GS_model.best_params_)\nprint('roc_auc_score', roc_auc_score(y_test, stacking_y_pred))\nprint('recall_score', recall_score(y_test, stacking_y_pred))","8e8ba390":"xgb_stacking = XGBClassifier(\n    objective='binary:logistic',\n    n_jobs=-1,\n    random_state=0,\n    learning_rate=0.1,\n    subsample=0.8,\n    colsample_bytree=0.8,\n    max_depth=2,\n    min_child_weight=9\n)\nxgb_stacking_params = {\n    'gamma':np.arange(5, 7, 0.1),\n    'scale_pos_weight':np.arange(0, 5, 0.5)\n}\nxgb_stacking_GS = GridSearchCV(\n    estimator=xgb_stacking,\n    param_grid=xgb_stacking_params,\n    scoring='roc_auc',\n    cv=5,\n    n_jobs=-1)\nxgb_stacking_GS_model = xgb_stacking_GS.fit(meta_mtrx_train, y_train)\nstacking_y_pred = xgb_stacking_GS_model.predict(meta_mtrx_test)\nprint('xgb_stacking_GS_model.best_params_', xgb_stacking_GS_model.best_params_)\nprint('roc_auc_score', roc_auc_score(y_test, stacking_y_pred))\nprint('recall_score', recall_score(y_test, stacking_y_pred))","a8c5205d":"xgb_stacking = XGBClassifier(\n    objective='binary:logistic',\n    n_jobs=-1,\n    random_state=0,\n    learning_rate=0.1,\n    max_depth=2,\n    min_child_weight=9,\n    gamma=6.8,\n    scale_pos_weight=3.5\n)\nxgb_stacking_params = {\n    'subsample':np.arange(0.1, 1, 0.05),\n    'colsample_bytree':np.arange(0.1, 1, 0.05),\n}\nxgb_stacking_GS = GridSearchCV(\n    estimator=xgb_stacking,\n    param_grid=xgb_stacking_params,\n    scoring='roc_auc',\n    cv=5,\n    n_jobs=-1)\nxgb_stacking_GS_model = xgb_stacking_GS.fit(meta_mtrx_train, y_train)\nstacking_y_pred = xgb_stacking_GS_model.predict(meta_mtrx_test)\nprint('xgb_GS_model.best_params_', xgb_stacking_GS_model.best_params_)\nprint('roc_auc_score', roc_auc_score(y_test, stacking_y_pred))\nprint('recall_score', recall_score(y_test, stacking_y_pred))","d720536e":"xgb_stacking = XGBClassifier(\n    objective='binary:logistic',\n    n_jobs=-1,\n    random_state=0,\n    learning_rate=0.1,\n    max_depth=2,\n    min_child_weight=9,\n    gamma=6.8,\n    scale_pos_weight=3.5,\n    subsample=0.65,\n    colsample_bytree=0.1\n    )\n\nxgb_stacking_model = xgb_stacking.fit(meta_mtrx_train, y_train)\nstacking_y_pred = xgb_stacking_model.predict(meta_mtrx_test)\nclassifier_names_GS += ['Stacking']\nroc_auc_scores_GS += [roc_auc_score(y_test, stacking_y_pred)]\nrecall_scores_GS += [recall_score(y_test, stacking_y_pred)]\nprint('roc_auc_score', roc_auc_score(y_test, stacking_y_pred))\nprint('recall_score', recall_score(y_test, stacking_y_pred))","b2e92fbb":"xgb.plot_importance(xgb_stacking_model)","ba05c005":"# \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0441 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438\nbase_classifiers_GS_df = pd.DataFrame(data=zip(classifier_names_GS, roc_auc_scores_GS, recall_scores_GS),\n                                   columns=['classifier', 'roc_auc', 'recall'])\n# \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u043f\u043e roc-auc \u043c\u0435\u0442\u0440\u0438\u043a\u0435 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043f\u0440\u043e\u0438\u043d\u0434\u0435\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443\nbase_classifiers_GS_df = base_classifiers_GS_df.sort_values(['roc_auc', 'recall'], ascending=False).reset_index(drop=True)\nbase_classifiers_GS_df","3ee09be4":"from sklearn.metrics import plot_confusion_matrix\n\n\nplot_confusion_matrix(xgbc_model, x_test, y_test)\nplt.show()","4f7c9ac0":"plot_confusion_matrix(cnb_GS_model, x_test, y_test)\nplt.show()","a0ed27eb":"plot_confusion_matrix(gnb_GS_model, x_test, y_test)\nplt.show()","d2b91579":"from sklearn.metrics import plot_roc_curve\n\nfig, ax = plt.subplots(figsize=(16, 9))\nplot_roc_curve(xgbc_model, x_test, y_test, ax=ax, name='XGBClassifier')\nplot_roc_curve(cnb_GS_model, x_test, y_test, color='r', ax=ax, name='CategoricalNB')\nplot_roc_curve(gnb_GS_model, x_test, y_test, color='g', ax=ax, name='GaussianNB')\nplt.plot([0, 1], [0, 1], 'k--')\nplt.show()","d94282e5":"cnb = CategoricalNB(alpha=0.52)\ncnb_model = cnb.fit(x_train, y_train)\ncnb_y_pred = cnb_model.predict(x_test)\nprint('roc_auc', roc_auc_score(y_test, cnb_y_pred))\nprint('recall', recall_score(y_test, cnb_y_pred))","593b3b76":"**\u0412\u044b\u0432\u043e\u0434:**  \n\u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043e\u0441\u0442\u0430\u0451\u0442\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u043d\u043e 26.5 % \u0432\u0441\u0435 \u0442\u0430\u043a\u0438 \u0440\u0430\u0441\u0442\u043e\u0440\u0433\u043b\u0438 \u0434\u043e\u0433\u043e\u0432\u043e\u0440 \u0441 \u0444\u0438\u0440\u043c\u043e\u0439.\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u0435\u0435 \u0432\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043e\u0442\u0442\u043e\u043a\u0443 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445.","c38eae5c":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u043b\u0438\u044f\u0435\u0442 \u043b\u0438 \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0443\u0441\u043b\u0443\u0433 \u043d\u0430 \u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0435 \u0442\u0440\u0430\u0442\u044b \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u0430.","35ba045c":"\u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u0441\u0430\u043c\u043e\u0435 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 - \u043f\u043e \u043e\u0442\u0442\u043e\u043a\u0443.","8fb55a0f":"\u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 *sklearn*.","8525141b":"### 1.3. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0442\u043e\u043a\u0430.  <a id=\"sectionDP13\"><\/a>\n\u0414\u0430\u043b\u0435\u0435 \u043c\u044b \u043f\u043e\u043c\u0435\u0442\u0438\u043c \u043a\u0430\u043a high_risk_by_monthlycharges \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043c\u0435\u0442\u043d\u043e \u0432\u044b\u0434\u0435\u043b\u044f\u043b\u0438\u0441\u044c \u0432 \u043f\u0443\u043d\u043a\u0442\u0435 2.9. \u043f\u0440\u043e \u043e\u0442\u0442\u043e\u043a.","31353695":"\u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043d\u0438\u0447\u0435\u0433\u043e \u0443\u0434\u0438\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e. \u0410\u0431\u043e\u043d\u0435\u043d\u0442\u044b, \u043a\u0442\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b \u0443\u0441\u043b\u0443\u0433\u0443 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438 \u043f\u043b\u0430\u0442\u044f\u0442 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0442\u0435, \u043a\u0442\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043e\u0442 \u043d\u0435\u0451.  \n\u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043a\u0430\u043a \u043e\u0431\u0441\u0442\u043e\u044f\u0442 \u0434\u0435\u043b\u0430 \u0441 \u0442\u0435\u043c\u0438, \u043a\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0443\u0441\u043b\u0443\u0433\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430.","ee2d3cef":"\u041d\u0435\u043f\u043b\u043e\u0445\u043e\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 - \u043d\u0435\u043f\u043b\u043e\u0445\u043e\u0439 \u0438\u043d\u0441\u0430\u0439\u0442. \u0411\u0443\u0434\u0435\u043c \u043d\u0430\u0434\u0435\u044f\u0442\u044c\u0441\u044f \u044d\u0442\u043e \u043d\u0430\u043c \u043f\u043e\u043c\u043e\u0436\u0435\u0442.","eabceae9":"#### 2.3.3. \u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u044f \u0442\u0438\u043f\u0430 \u0441\u0442\u0435\u043a\u0438\u043d\u0433.  <a id=\"sectionML233\"><\/a>\n\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441\u0442\u044d\u043a\u0438\u043d\u0433\u0430 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043e\u0434\u043d\u043e\u0441\u043b\u043e\u0439\u043d\u043e\u043c \u0438 \u043c\u043d\u043e\u0433\u043e\u0441\u043b\u043e\u0439\u043d\u043e\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0435. \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043e\u0434\u043d\u043e\u0441\u043b\u043e\u0439\u043d\u044b\u0439 \u0441\u0442\u044d\u043a\u0438\u043d\u0433\u0430. \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0435\u0433\u043e \u0432 GridSearch \u043e\u0431\u043e\u043b\u043e\u0447\u043a\u0435.","dc08ca52":"### 1.1. \u041a\u043e\u043b\u043e\u043d\u043a\u0430 tenure.  <a id=\"sectionDP11\"><\/a>\n\u041d\u0430\u0447\u043d\u0451\u043c \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 - \u0441 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 tenure. \u0417\u0434\u0435\u0441\u044c \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043e \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u044f\u0432\u043b\u044f\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0437\u0430 6 \u043b\u0435\u0442.\n\u0412\u043e\u0442 \u0438 \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u043c \u0434\u043e \u0433\u043e\u0434\u043e\u0432.","bce9b805":"\u041e\u043f\u044f\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u0440\u0430\u0441\u0445\u043e\u0434\u0430\u043c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u0438\u043f\u0430 \u0443\u0441\u043b\u0443\u0433\u0438: \u0430\u0431\u043e\u043d\u0435\u043d\u0442\u044b, \u043a\u0442\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043b\u0441\u044f \u043e\u0442 \u0443\u0441\u043b\u0443\u0433\u0438\n\u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430 \u043f\u043b\u0430\u0442\u044f\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u0442\u0435\u0445, \u043a\u0442\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b \u044d\u0442\u0443 \u0443\u0441\u043b\u0443\u0433\u0443. \u0410 \u0438\u0437 \u0442\u0435\u0445, \u043a\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u044d\u0442\u043e\u0439 \u0443\u0441\u043b\u0443\u0433\u043e\u0439, \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043b\u0430\u0442\u044f\u0442\n\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043e\u043f\u0442\u043e\u0432\u043e\u043b\u043e\u043a\u043e\u043d\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430.  \n\u041f\u043e\u0440\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0442\u0435\u0445, \u043a\u0442\u043e \u0440\u0430\u0441\u0441\u0442\u043e\u0440\u0433 \u0434\u043e\u0433\u043e\u0432\u043e\u0440, \u0438 \u0442\u0435\u0445, \u043a\u0442\u043e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0443\u0441\u043b\u0443\u0433\u0430\u043c\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438.","5895b70d":"\u0412 \u043d\u0430\u0448\u0435\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 ('Churn' - 'Yes') 315 \u0447\u0435\u043b\u043e\u0432\u0435\u043a, \u0438\u0437 \u043d\u0438\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c 257 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0432\u0435\u0440\u043d\u043e \u0438 58 \u043d\u0435\u0432\u0435\u0440\u043d\u043e.","405b0032":"# \u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435. <a id=\"sectionML\"><\/a>\n\n## 1. \u0412\u044b\u0431\u043e\u0440 \u043c\u0435\u0442\u0440\u0438\u043a\u0438.  <a id=\"sectionML1\"><\/a>\n\u0421\u0442\u043e\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0430 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438. \u041a \u0442\u043e\u043c\u0443 \u0436\u0435 \u043e\u0434\u0438\u043d \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 ('Churn' - 'Yes') \u0432\u0430\u0436\u043d\u0435\u0435 \u0434\u0440\u0443\u0433\u043e\u0433\u043e ('Churn' - 'No'). \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043d\u0430\u043c \u0432\u0430\u0436\u043d\u043e \u043e\u0442\u0441\u043b\u0435\u0434\u0438\u0442\u044c \u0438 \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u043e\u0442\u0442\u043e\u043a, \u0430 \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u043d\u0430\u043c \u0432\u0430\u0436\u043d\u0435\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u0442\u0442\u043e\u043a, \u043d\u0435\u0436\u0435\u043b\u0438 \u0442\u0435\u0445, \u043a\u0442\u043e \u0440\u0435\u0448\u0438\u043b \u043e\u0441\u0442\u0430\u0442\u044c\u0441\u044f \u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438. \u0414\u043b\u044f \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u043f\u0440\u0435\u043a\u0440\u0430\u0441\u043d\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0430 *Recall*.\n\u0412 \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435, \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u043c \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0431\u0443\u0434\u0435\u0442 \u043c\u0435\u0442\u0440\u0438\u043a\u0430 *AUC-ROC*.\n\n## 2. \u0412\u044b\u0431\u043e\u0440 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430.  <a id=\"sectionML2\"><\/a>\n### 2.1. \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432.  <a id=\"sectionML21\"><\/a>\n\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.","eb151573":"### 2.5. \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c. <a id=\"section25\"><\/a>","0e91f66c":"\u041c\u044b \u043f\u0440\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f. \u041a\u0430\u043a\u0438\u0435-\u0442\u043e \u0441\u043f\u0440\u0430\u0432\u0438\u043b\u0438\u0441\u044c \u043b\u0443\u0447\u0448\u0435, \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0445\u0443\u0436\u0435. \u0417\u0430\u043c\u0435\u0442\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0438\u043b\u0438\u0441\u044c \u0432 \u043b\u0443\u0447\u0448\u0443\u044e \u0441\u0442\u043e\u0440\u043e\u043d\u0443 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b *XGBClassifier, CategoricalNB, Stacking* \u0438 *GaussianNB*. \u041e\u0434\u043d\u0430\u043a\u043e \u0438\u043c\u0435\u043d\u043d\u043e *CategoricalNB* \u0438\u043c\u0435\u0435\u0442 \u0432\u044b\u0441\u043e\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 *recall*, \u0442\u0430\u043a \u0432\u0430\u0436\u043d\u043e\u0439 \u043d\u0430\u043c. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0441\u0447\u0438\u0442\u0430\u0435\u043c, \u0447\u0442\u043e \u044d\u0442\u043e\u0442 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u043b\u0443\u0447\u0448\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u0442\u0442\u043e\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438.  \n**\u0413\u043e\u0442\u043e\u0432\u044b\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c:**","9cbe3eed":"#### 3.1.3. \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u0434\u043b\u044f *GaussianNB*.  <a id=\"sectionML313\"><\/a>","a49f3da0":"\u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b-\u0432\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0443\u0441\u043b\u0443\u0433 \u0447\u0430\u0449\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u0440\u0433\u0430\u043b\u0438 \u0434\u043e\u0433\u043e\u0432\u043e\u0440 \u0441 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0435\u0439.","27b119d5":"\u041f\u0435\u0440\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0442\u0435\u0440 (\u043b\u0435\u0432\u044b\u0439) \u044f\u0432\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u0435\u0449\u0451 \u0434\u0432\u0430. \u0418\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0442\u0435\u0440 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e.","9746556e":"\u041c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 *colsample_bytree (0.2) \u0438 subsample (0.7)*. \u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 - 0.762.","1003a214":"### 2.2. \u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432.  <a id=\"sectionML22\"><\/a>\n\u0414\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0432\u044b\u0431\u0435\u0440\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0435 \u043f\u044f\u0442\u044c **\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445** \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432: *CategoricalNB, LinearDiscriminantAnalysis, LogisticRegressionCV, RidgeClassifierCV, PassiveAggressiveClassifier*. \u0414\u043b\u044f \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c *GridSearch*.","b3a05aa5":"**\u0412\u044b\u0432\u043e\u0434:**  \n\u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0432\u0438\u0434\u0435\u0442\u044c \u0443 \u043d\u0430\u0441 \u0433\u0435\u043d\u0434\u0435\u0440\u043d\u0430\u044f \u043d\u0435\u0439\u0442\u0440\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0432 \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u044b\u0445 \u0434\u043e\u0445\u043e\u0434\u0430\u0445 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438.","84829803":"**\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435**\n\n[\u0420\u0430\u0437\u0432\u0435\u0434\u043e\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445](#sectionEDA)  \n1. [\u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f](#section1)  \n    1.1. [\u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445](#section11)  \n    \n2. [\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438](#section2)  \n    2.1. [\u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e \u0441 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c](#section21)  \n    2.2. [\u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445](#section22)  \n    2.3. [\u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432](#section23)  \n    2.4. [\u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430](#section24)  \n    2.5. [\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c](#section25)  \n    2.6. [\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043e\u0442\u0442\u043e\u043a\u0443](#section26)  \n    2.7. [\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043e\u0442\u0442\u043e\u043a\u0443 \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439](#section27)   \n    2.8. [\u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \"\u0443\u0432\u043b\u0435\u0447\u0435\u043d\u043d\u043e\u0441\u0442\u0438\" \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0443\u0441\u043b\u0443\u0433\u0430\u043c\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438](#section28)  \n    2.9. [\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u0445\u043e\u0434\u043e\u0432 \u0437\u0430 \u0432\u0435\u0441\u044c \u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439](#section29)  \n    2.10. [\u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430](#section210)  \n    2.11. [\u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439](#section211)  \n    2.12. [\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437](#section212)  \n    2.12.1. [\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445](#section2121)  \n    2.12.2. [\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445](#section2122)  \n\n[\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445](#sectionDP)\n1. [\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#sectionDP1)  \n    1.1. [\u041a\u043e\u043b\u043e\u043d\u043a\u0430 tenure](#sectionDP11)  \n    1.2. [\u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 MontlyCharges](#sectionDP12)  \n    1.3. [\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0442\u043e\u043a\u0430](#sectionDP13)  \n    1.4. [\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0442\u043e\u043a\u0430](#sectionDP14)  \n\n2. [\u041f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \"\u0447\u0438\u0441\u0442\u043a\u0430\" \u0434\u0430\u043d\u043d\u044b\u0445](#sectionDP2)  \n    2.1. [\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 (outliers)](#sectionDP21)  \n    2.2. [\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a (inliers)](#sectionDP22)  \n\n3. [\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043b\u043e\u0432\u0430\u0436\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#sectionDP3)  \n\n4. [\u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](#sectionDP4)  \n    \n[\u041c\u0430\u0448\u0438\u043d\u043d\u043e\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435](#sectionML)  \n1. [\u0412\u044b\u0431\u043e\u0440 \u043c\u0435\u0442\u0440\u0438\u043a\u0438](#sectionML1)  \n2. [\u0412\u044b\u0431\u043e\u0440 \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430](#sectionML2)  \n    2.1. [\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432](#sectionML21)  \n    2.2. [\u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0431\u0430\u0437\u043e\u0432\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432](#sectionML22)  \n    2.3. [\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u0435\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432](#sectionML23)  \n    2.3.1. [\u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u0435\u0439 \u0438\u0437 \u043a\u043e\u043c\u0438\u0442\u0435\u0442\u043e\u0432](#sectionML231)  \n    2.3.2. [\u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u0435\u0439 \u0442\u0438\u043f\u0430 \u0431\u0443\u0441\u0442\u0438\u043d\u0433](#sectionML232)  \n    2.3.3. [\u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u044f \u0442\u0438\u043f\u0430 \u0441\u0442\u0435\u043a\u0438\u043d\u0433](#sectionML233)  \n3. [\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439](#sectionML3)  \n    3.1. [\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a](#sectionML31)  \n    3.1.1. [\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u0434\u043b\u044f XGBClassifier](#sectionML311)  \n    3.1.2. [\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u0434\u043b\u044f CategoricalNB](#sectionML312)  \n    3.1.3. [\u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u0434\u043b\u044f GaussianNB](#sectionML313)  \n    3.2. [ROC-\u043a\u0440\u0438\u0432\u0430\u044f](#sectionML32)  \n\n\n[\u0412\u044b\u0432\u043e\u0434](#sectionCONCLUSION)","6622c6b3":"___","ee0d3103":"**\u0412\u044b\u0432\u043e\u0434:**  \n\u041f\u0435\u0440\u0432\u044b\u0435 \u043e\u0447\u0435\u0432\u0438\u0434\u043d\u044b\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0432\u044b\u0432\u043e\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c:\n - \u0412 \u044d\u0442\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u043e 5986 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438.\n - 3050 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 - \u043c\u0443\u0436\u0447\u0438\u043d\u044b.\n - 4399 \u043b\u044e\u0434\u0435\u0439 \u0432\u0441\u0451 \u0435\u0449\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438.\n - \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u0440\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0443\u0441\u043b\u0443\u0433\u0430\u043c\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 - 72 \u043c\u0435\u0441\u044f\u0446\u0430. \u042d\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u0442, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0431\u0440\u0430\u043b\u0438\u0441\u044c \u0437\u0430 6 \u043b\u0435\u0442.\n - \u0417\u0430 6 \u043b\u0435\u0442 5986 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u0440\u0438\u043d\u0435\u0441\u043b\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043f\u043e\u0447\u0442\u0438 14 \u043c\u043b\u043d. USD \u0434\u043e\u0445\u043e\u0434\u0430\n - \u0421\u0440\u0435\u0434\u043d\u044f\u044f \u0441\u0443\u043c\u043c\u0430 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f 64.80 USD \u0438 \u043e\u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u043d\u044c\u0448\u0435 \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0439 - 70.40 USD. \u042d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u043e\u0437\u043d\u0430\u0447\u0430\u0442\u044c,\n \u0447\u0442\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u0442\u043e \u043f\u043b\u0430\u0442\u0438\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435.","9fc7600a":"**\u0412\u044b\u0432\u043e\u0434:**  \n - \u0413\u0435\u043d\u0434\u0435\u0440\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0447\u0442\u0438 \u0440\u0430\u0432\u043d\u043e\u0435.\n - \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u044d\u0442\u043e \u043d\u0435 \u043f\u0435\u043d\u0441\u0438\u043e\u043d\u0435\u0440\u044b.\n - \u041f\u043e\u0440\u043e\u0432\u043d\u0443 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043b\u0438\u0441\u044c \u043b\u044e\u0434\u0438 \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0438\u0435\u0441\u044f \u0432 \u0431\u0440\u0430\u043a\u0435 \u0438 \u0445\u043e\u043b\u043e\u0441\u0442\u044b\u0435.\n - \u0411\u043e\u043b\u044c\u0448\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0434\u0435\u0442\u0435\u0439.\n - \u041f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043a \u0443\u0441\u043b\u0443\u0433\u0435 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438.\n - \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0443\u0441\u043b\u0443\u0433\u043e\u0439 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430: \u0438\u0437 \u043d\u0438\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043f\u043e\u0440\u043e\u0432\u043d\u0443 DSL \u0438 Fiber optic \u0442\u0438\u043f\u043e\u0432 \u0441\u0432\u044f\u0437\u0438.\n - \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u043e\u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432\u044b\u0431\u0440\u0430\u043b\u0438 month-to-month \u0442\u0438\u043f\u043e\u043c \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430, \u0437\u0430\u0442\u0435\u043c \u0438\u0434\u0435\u0442 \u0434\u0432\u0443\u0445\u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0438 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u043d\u0430 \u043e\u0434\u0438\u043d \u0433\u043e\u0434.\n - \u0411\u0435\u0437\u0431\u0443\u043c\u0430\u0436\u043d\u044b\u0439 \u0431\u0438\u043b\u043b\u0438\u043d\u0433 \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u043b\u0438 \u043f\u043e\u0441\u0442\u0438 60 % \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.\n - \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u043e\u043f\u043b\u0430\u0442\u044b \u044d\u0442\u043e electronic check, \u0437\u0430\u0442\u0435\u043c \u043d\u0435 \u0438\u043c\u0435\u044f \u043e\u0441\u043e\u0431\u044b\u0445 \u043e\u0442\u043b\u0438\u0447\u0438\u0439 \u0438\u0434\u0443\u0442 mailed check, bank transfer, credit card.","139505d3":"\u0422\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0441 *InternetService*.","01a9c0c7":"\u0412 \u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u0442\u0430\u0436\u0435 \u043d\u0435 \u0437\u0430\u043c\u0435\u0447\u0435\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438, \u043a\u0440\u043e\u043c\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 'StreamingTV' \u0438 'StreamingMovies', \u0442\u0430\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u043b\u0430\u0431\u0430\u044f \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f. \u041d\u043e \u044d\u0442\u043e \u0438 \u043b\u043e\u0433\u0438\u0447\u043d\u043e.  \n___","90ed44a5":"### 2.8. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \"\u0443\u0432\u043b\u0435\u0447\u0435\u043d\u043d\u043e\u0441\u0442\u0438\" \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0443\u0441\u043b\u0443\u0433\u0430\u043c\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438. <a id=\"section28\"><\/a>\n\u0412\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0443\u0441\u043b\u0443\u0433 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","00b6c7e9":"## 4. \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.  <a id=\"sectionDP4\"><\/a>","44e19d15":"### 2.10. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u0440\u0430\u0437\u043c\u0435\u0440 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430. <a id=\"section210\"><\/a>\n\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0433\u043e \u0447\u0435\u043a\u0430 \u043e\u0442 \u0442\u043e\u0433\u043e, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u044f\u0432\u043b\u044f\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438.","322751f6":"### 2.7. \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043f\u043e \u043e\u0442\u0442\u043e\u043a\u0443 \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439. <a id=\"section27\"><\/a>\n\u041b\u043e\u0433\u0438\u043a\u0430 \u0442\u0430\u043a\u0430\u044f, \u0435\u0441\u043b\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 churn\/not churn 73.5% \/ 26.5%, \u0442\u043e \u0438 \u0432\u043d\u0443\u0442\u0440\u0438 \u0433\u0440\u0443\u043f\u043f \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u043d\u043d\u0430\u044f \u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u044f.","74989494":"\u0418\u0442\u0430\u043a, \u043c\u044b \u043f\u043e\u0434\u043e\u0431\u0440\u0430\u043b\u0438 \u043b\u0443\u0447\u0448\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u043b\u044f \u043c\u0435\u0442\u0430-\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430. \u0417\u0430\u043d\u0435\u0441\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0432 \u043e\u0431\u0449\u0443\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u0443.","d326478d":"#### 2.3.2. \u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u0435\u0439 \u0442\u0438\u043f\u0430 \u0431\u0443\u0441\u0442\u0438\u043d\u0433.  <a id=\"sectionML232\"><\/a>\n\u041d\u0430\u0447\u043d\u0451\u043c \u0441 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 **XGBoost (eXtreme Gradient Boosting)**. \u042d\u0442\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0430 \u043d\u0430 \u0434\u0435\u0440\u0435\u0432\u044c\u044f\u0445 \u0440\u0435\u0448\u0435\u043d\u0438\u0439.  \n\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438. \u041d\u0430\u0447\u043d\u0451\u043c \"\u0442\u044e\u043d\u0438\u043d\u0433\" \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0441 *max_depth* \u0438 *min_child_weight*, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u043a\u043e\u043d\u0435\u0447\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","24583297":"**\u0412\u044b\u0432\u043e\u0434:** \n- \u0421\u0442\u043e\u0438\u0442 \u043d\u0430\u0447\u0430\u0442\u044c \u0441 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0442\u0435\u043e\u0440\u0438\u044f \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u0436\u0435 \u0433\u0440\u0430\u0444\u0438\u043a\u0435: \u043d\u0435\u0442 \u043f\u0440\u0438\u0447\u0438\u043d \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043c\u0443\u0436\u0447\u0438\u043d\u044b \u0438 \u0436\u0435\u043d\u0449\u0438\u043d\u044b \u043f\u043e-\u0440\u0430\u0437\u043d\u043e\u043c\u0443 \u043e\u0442\u043d\u043e\u0441\u0438\u043b\u0438\u0441\u044c \u043a \u0443\u0441\u043b\u0443\u0433\u0430\u043c \u0441\u0432\u044f\u0437\u0438 \u0434\u0430\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438.\n- \u0421\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u0441 \u043f\u0435\u043d\u0441\u0438\u043e\u043d\u0435\u0440\u0430\u043c\u0438 \u043a\u0430\u043a \u0440\u0430\u0437 \u043e\u0431\u0440\u0430\u0442\u043d\u0430\u044f: \u043f\u0435\u043d\u0441\u0438\u043e\u043d\u0435\u0440\u044b \u0447\u0430\u0449\u0435 \u0447\u0435\u043c \u043c\u043e\u043b\u043e\u0434\u044b\u0435 \u043b\u044e\u0434\u0438 \u043e\u0442\u043a\u0430\u0437\u044b\u0432\u0430\u043b\u0438\u0441\u044c \u043e\u0442 \u0443\u0441\u043b\u0443\u0433 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438. \u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0443\u0445\u043e\u0434\u043e\u043c \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0438\u0437 \u0436\u0438\u0437\u043d\u0438. \u0410 \u043c\u043e\u0436\u0435\u0442 \u0442\u0430\u0440\u0438\u0444\u043d\u0430\u044f \u043b\u0438\u043d\u0435\u0439\u043a\u0430 \u043d\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442 \u0434\u043b\u044f \u043d\u0443\u0436\u0434 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0432 \u043f\u0440\u0435\u043a\u043b\u043e\u043d\u043d\u043e\u043c \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0435.\n- \u041a\u043b\u0438\u0435\u043d\u0442\u044b \u0444\u0438\u0440\u043c\u044b, \u043d\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0432 \u0431\u0440\u0430\u043a\u0435, \u0447\u0430\u0449\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0430\u0441\u0441\u0442\u043e\u0440\u0433\u0430\u044e\u0442 \u0434\u043e\u0433\u043e\u0432\u043e\u0440 \u0441 \u0444\u0438\u0440\u043c\u043e\u0439. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u044d\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0440\u0430\u0441\u0441\u0442\u043e\u0440\u0436\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u0430 \u043d\u0430 \u0441\u0435\u043c\u0435\u0439\u043d\u044b\u0439 \u0442\u0430\u0440\u0438\u0444, \u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u044d\u0442\u043e \u0447\u0438\u0441\u0442\u0430\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0441\u0442\u044c.\n- \u041a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 \u0434\u0435\u0442\u0435\u0439, \u0440\u0430\u0441\u0441\u0442\u043e\u0440\u0433\u0448\u0438\u0445 \u0434\u043e\u0433\u043e\u0432\u043e\u0440 \u0441 \u0444\u0438\u0440\u043c\u043e\u0439, \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 \u0434\u0435\u0442\u044c\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0442\u0430\u043a\u0436\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u0440\u0433\u043b\u0438 \u0434\u043e\u0433\u043e\u0432\u043e\u0440. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u0432\u044b\u0433\u043e\u0434\u043d\u044b\u0435 \u0441\u0435\u043c\u0435\u0439\u043d\u044b\u0435 \u0442\u0430\u0440\u0438\u0444\u044b, \u043d\u043e \u043d\u0435\u0442 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0442\u0430\u0440\u0438\u0444\u043e\u0432 \u0434\u043b\u044f \u043b\u044e\u0434\u0435\u0439 \u0431\u0435\u0437 \u0434\u0435\u0442\u0435\u0439.\n- \u0421\u0440\u0435\u0434\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u0443\u0441\u043b\u0443\u0433\u043e\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438, \u043d\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u044f \u043e\u0442 \u043e\u0431\u0449\u0435\u0439 \u043a\u0430\u0440\u0442\u0438\u043d\u044b.\n- \u0410 \u0432\u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u0441 \u043e\u043f\u0442\u043e\u0432\u043e\u043b\u043e\u043a\u043e\u043d\u043d\u044b\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c \u043a \u0441\u0435\u0442\u0438 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442, \u0447\u0430\u0449\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0430\u0441\u0441\u0442\u043e\u0440\u0433\u0430\u044e\u0442 \u0434\u043e\u0433\u043e\u0432\u043e\u0440\u044b. \u041c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e \u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0442\u0438\u043f\u0443 \u0441\u0432\u044f\u0437\u0438 \u0443 \u043a\u043e\u043d\u043a\u0443\u0440\u0435\u043d\u0442\u043e\u0432 \u043b\u0443\u0447\u0448\u0435? \u041d\u0443 \u0438\u043b\u0438 \u0442\u0430\u0440\u0438\u0444\u044b \u0432\u044b\u0433\u043e\u0434\u043d\u0435\u0435. \u041a\u0441\u0442\u0430\u0442\u0438, \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0444\u0438\u0440\u043c\u044b, \u043d\u0435 \u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u0443\u0441\u043b\u0443\u0433\u0430\u043c\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043a\u0430\u043a \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430, \u043f\u043e\u0445\u043e\u0436\u0435 \u0432\u0441\u0451 \u0443\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442. \u0412\u044b\u0433\u043e\u0434\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0440\u0430\u0437\u0434\u0430\u0447\u0438 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0430 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u043c?\n- \u041e\u0436\u0438\u0434\u0430\u0435\u043c\u043e, \u0447\u0442\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u044b, \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0438\u0435 \u0434\u0432\u0443\u0445\u043b\u0435\u0442\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u0440\u0435\u0436\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u0440\u0433\u0430\u0442\u044c \u0434\u043e\u0433\u043e\u0432\u043e\u0440. \u0421 \u043e\u0434\u043d\u043e\u043b\u0435\u0442\u043d\u0438\u043c\u0438 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430\u043c\u0438 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0430\u044f \u0441\u0438\u0443\u0442\u0443\u0430\u0446\u0438\u044f. \u0410 \u0432\u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043f\u0440\u043e\u0434\u043b\u0435\u0432\u0430\u044e\u0449\u0438\u043c \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u043c\u0435\u0441\u044f\u0446, \u043b\u0435\u0433\u0447\u0435 \u0435\u0433\u043e \u0440\u0430\u0441\u0441\u0442\u043e\u0440\u0433\u043d\u0443\u0442\u044c; \u0447\u0435\u043c \u043e\u043d\u0438 \u043d\u0435\u043f\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f.\n- \u041a\u043b\u0438\u0435\u043d\u0442\u044b, \u043d\u0435 \u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435\u0441\u044f \u0431\u0435\u0437\u0431\u0443\u043c\u0430\u0436\u043d\u044b\u043c \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u043e\u043c, \u0440\u0435\u0436\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u0440\u0433\u0430\u044e\u0442 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442, \u0432 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043e\u0442 \u0442\u0435\u0445, \u043a\u0442\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u0447\u0435\u043b \u0431\u0435\u0437\u0431\u0443\u043c\u0430\u0436\u043d\u0443\u044e \u0444\u043e\u0440\u043c\u0443 \u043e\u043f\u043b\u0430\u0442\u044b. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0435 \u0431\u0435\u0437\u0431\u0443\u043c\u0430\u0436\u043d\u043e\u0439 \u043e\u043f\u043b\u0430\u0442\u044b, \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c \u044f\u0432\u043d\u043e \u044d\u0442\u043e \u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f.\n- \u0410 \u0432\u043e\u0442 \u0438 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u0438\u043a\u0430 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u043f\u0443\u043d\u043a\u0442\u0430. \u041a\u043b\u0438\u0435\u043d\u0442\u044b, \u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435\u0441\u044f \u043e\u043d\u043b\u0430\u0439\u043d-\u043e\u043f\u043b\u0430\u0442\u043e\u0439, \u0447\u0430\u0449\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u0440\u0433\u0430\u044e\u0442 \u0434\u043e\u0433\u043e\u0432\u043e\u0440 \u0441 \u0444\u0438\u0440\u043c\u043e\u0439. \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432 \u044d\u0442\u043e\u043c \u0438 \u0435\u0441\u0442\u044c \u0437\u0430\u0433\u0432\u043e\u0437\u0434\u043a\u0430.\n\n\u0418\u0442\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c, \u0447\u0442\u043e \u0443\u0439\u0434\u0443\u0442 \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u044b SeniorCitizen, InternetService (Fiber optic),\nContract (month-to-month), PaymentMethod (electronic check).","c6a3d480":"\u0411\u0443\u0434\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043d\u0430 \u043f\u043e\u0434\u043e\u0431\u043d\u043e\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u0438\u0437\u043c\u0443 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0443\u0441\u043b\u0443\u0433. \u041d\u0430\u0447\u043d\u0451\u043c \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e\n\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u043e\u0439 \u0443\u0441\u043b\u0443\u0433\u0438 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438.","3004050e":"\u041d\u0430\u043c \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 *LogisticRegressionCV, KNeighborsClassifier, DecisionTreeClassifier* \u0438 *RidgeClassifierCV*. \u041e\u0442\u043b\u0438\u0447\u043d\u043e, \u0438\u0434\u0435\u043c \u0434\u0430\u043b\u044c\u0448\u0435. \u0410 \u0434\u0430\u043b\u044c\u0448\u0435 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c *\u0430\u043d\u0441\u0430\u043c\u0431\u043b\u0438* \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432.","21aa00fe":"### 2.3. \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432. <a id=\"section23\"><\/a>","a9f18755":"### 2.2. \u0418\u0437\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. <a id=\"section22\"><\/a>","9a13587d":"### 2.6. \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043e\u0442\u0442\u043e\u043a\u0443. <a id=\"section26\"><\/a>","d5dd0798":"### 2.11. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439. <a id=\"section211\"><\/a>\n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438 \u043a\u0430\u043a \u0432\u043b\u0438\u044f\u0435\u0442 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439.","5ac9433d":"**\u0412\u044b\u0432\u043e\u0434:**  \n\u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u043f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439. \u0421\u0442\u043e\u0438\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u044b TotalCharges \u0438 services.","7481d2d5":"### 2.4. \u0412\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430. <a id=\"section24\"><\/a>","453fe8a7":"\u041f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432\u0441\u0435 \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b-\u0432\u043e\u043c \u0443\u0441\u043b\u0443\u0433 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438.  \n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u0443\u0441\u043b\u0443\u0433\u0438 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438.","2d36de13":"## 3. \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043c\u0430\u043b\u043e\u0432\u0430\u0436\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.  <a id=\"sectionDP3\"><\/a>\n\u0423\u0434\u0430\u043b\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b:\n- customerID - \u043e\u043d \u043d\u0430\u043c \u043d\u0438\u043a\u0430\u043a \u043d\u0435 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0438,\n- tenure - \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438, \u044d\u0442\u043e \u043d\u0435 \u0435\u0441\u0442\u044c \u0445\u043e\u0440\u043e\u0448\u043e, \u043a \u0442\u043e\u043c\u0443 \u0436\u0435 \u043c\u044b \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0438 \u0435\u0433\u043e tenure_years\n- TotalCharges - \u0442\u0430\u043a\u0436\u0435 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0442\u0435\u043c \u0431\u043e\u043b\u0435\u0435 \u043e\u043d \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 tenure,\n- MonthlyCharges - \u0437\u0430\u043c\u0435\u043d\u0451\u043d MonthlyCharges_group,\n- services - \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u0435\u0442 \u0441 MonthlyCharges.","7eaf5f9c":"**\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b.**\n\n\u041b\u044e\u0431\u043e\u0439 \u0431\u0438\u0437\u043d\u0435\u0441 \u0445\u043e\u0447\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u0414\u043b\u044f \u0434\u043e\u0441\u0442\u0438\u0436\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0439 \u0446\u0435\u043b\u0438 \u0432\u0430\u0436\u043d\u043e \u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u043f\u0440\u0438\u0432\u043b\u0435\u0447\u044c \u043d\u043e\u0432\u044b\u0445, \u043d\u043e \u0438 \u0443\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445. \u0423\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043e\u0431\u043e\u0439\u0434\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0434\u0435\u0448\u0435\u0432\u043b\u0435, \u0447\u0435\u043c \u043f\u0440\u0438\u0432\u043b\u0435\u0447\u044c \u043d\u043e\u0432\u043e\u0433\u043e. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u043d\u043e\u0432\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u043e\u043a\u0430\u0437\u0430\u0442\u044c\u0441\u044f \u0441\u043b\u0430\u0431\u043e \u0437\u0430\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u0432 \u0443\u0441\u043b\u0443\u0433\u0430\u0445 \u0431\u0438\u0437\u043d\u0435\u0441\u0430 \u0438 \u0441 \u043d\u0438\u043c \u0431\u0443\u0434\u0435\u0442 \u0441\u043b\u043e\u0436\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a \u043e \u0441\u0442\u0430\u0440\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u0443\u0436\u0435 \u0435\u0441\u0442\u044c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044e \u0441 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u043c.\n\n\u0421\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u0443\u044f \u043e\u0442\u0442\u043e\u043a, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0432\u043e\u0432\u0440\u0435\u043c\u044f \u0441\u0440\u0435\u0430\u0433\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0443\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0445\u043e\u0447\u0435\u0442 \u0443\u0439\u0442\u0438. \u041e\u043f\u0438\u0440\u0430\u044f\u0441\u044c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0431 \u0443\u0441\u043b\u0443\u0433\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442, \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0435\u043c\u0443 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0435, \u043f\u044b\u0442\u0430\u044f\u0441\u044c \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043e\u0431 \u0443\u0445\u043e\u0434\u0435 \u043e\u0442 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430. \u0411\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u0434\u0430\u0447\u0430 \u0443\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u043b\u0435\u0433\u0447\u0435 \u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438, \u0447\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u0440\u0438\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u044b \u0435\u0449\u0435 \u043d\u0438\u0447\u0435\u0433\u043e \u043d\u0435 \u0437\u043d\u0430\u0435\u043c.\n\n\u041d\u0430\u043c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442 \u0442\u0435\u043b\u0435\u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438. \u0412 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043e\u0447\u0442\u0438 \u0448\u0435\u0441\u0442\u0438 \u0442\u044b\u0441\u044f\u0447\u0430\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u0438\u0445 \u0434\u0435\u043c\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u0445, \u0443\u0441\u043b\u0443\u0433\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f, \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0443\u0441\u043b\u0443\u0433\u0430\u043c\u0438 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440\u0430, \u043c\u0435\u0442\u043e\u0434\u0435 \u043e\u043f\u043b\u0430\u0442\u044b, \u0440\u0430\u0437\u043c\u0435\u0440\u0435 \u043e\u043f\u043b\u0430\u0442\u044b.\n\nC\u0442\u043e\u0438\u0442 \u0437\u0430\u0434\u0430\u0447\u0430 \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0441\u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0442\u0442\u043e\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 (\u0432\u044b\u044f\u0432\u0438\u0442\u044c \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0434\u043b\u044f\u0442 \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442 \u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u0440\u043e\u0434\u043b\u044f\u0442).","de4fccf7":"\u041f\u043e\u0445\u043e\u0436\u0435 \u043c\u044b \u043d\u0430\u0448\u043b\u0438 \u0447\u0442\u043e-\u0442\u043e \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0435. \u041d\u0430 \u043b\u0438\u0446\u043e \u044f\u0432\u043d\u0430\u044f \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u043e\u0439 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u0435 \u0447\u0435\u043a\u0430. \u041b\u044e\u0434\u0438, \u043e\u0442\u043a\u0430\u0437\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043e\u0442 \u0443\u0441\u043b\u0443\u0433\n\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0442\u0440\u0430\u0442\u0438\u043b\u0438 \u044f\u0432\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0442\u0435, \u043a\u0442\u043e \u043e\u0441\u0442\u0430\u043b\u0441\u044f \u0435\u0451 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c.","7590ad66":"\u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c \u0447\u0442\u043e \u0432\u044b\u0441\u043e\u043a\u0438\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 \u043e\u0442\u0442\u043e\u043a\u0430 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441 3-5 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c\u0438 \u0443\u0441\u043b\u0443\u0433\u0430\u043c\u0438","bb68f69b":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432 \u043c\u0435\u0442\u0430-\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c XGBoost. \u041f\u043e\u0434\u0431\u0435\u0440\u0435\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u043f\u0443\u043d\u043a\u0442\u0443 2.3.2","df4b4fb5":"### 1.2. \u0418\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 MontlyCharges.  <a id=\"sectionDP12\"><\/a>","4d0cc2a0":"**\u0412\u044b\u0432\u043e\u0434:**  \ntelecom_users.csv \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f:\n- customerID \u2013 id \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n- gender \u2013 \u043f\u043e\u043b \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (male\/female)\n- SeniorCitizen \u2013 \u044f\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u0435\u043d\u0441\u0438\u043e\u043d\u0435\u0440\u043e\u043c (1, 0)\n- Partner \u2013 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u0432 \u0431\u0440\u0430\u043a\u0435 (Yes, No)\n- Dependents \u2013 \u0435\u0441\u0442\u044c \u043b\u0438 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438\u0436\u0434\u0438\u0432\u0435\u043d\u0446\u044b (Yes, No)\n- tenure \u2013 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u044f\u0432\u043b\u044f\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438\n- PhoneService \u2013 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u043b\u0438 \u0443\u0441\u043b\u0443\u0433\u0430 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u043e\u0439 \u0441\u0432\u044f\u0437\u0438 (Yes, No)\n- MultipleLines \u2013 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043d\u044b\u0445 \u043b\u0438\u043d\u0438\u0439 (Yes, No, No phone service)\n- InternetService \u2013 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (DSL, Fiber optic, No)\n- OnlineSecurity \u2013 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u043b\u0438 \u0443\u0441\u043b\u0443\u0433\u0430 \u043e\u043d\u043b\u0430\u0439\u043d-\u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u043e\u0441\u0442\u0438 (Yes, No, No internet service)\n- OnlineBackup \u2013 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u043b\u0438 \u0443\u0441\u043b\u0443\u0433\u0430 online backup (Yes, No, No internet service)\n- DeviceProtection \u2013 \u0435\u0441\u0442\u044c \u043b\u0438 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441\u0442\u0440\u0430\u0445\u043e\u0432\u043a\u0430 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f (Yes, No, No internet service)\n- TechSupport \u2013 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u043b\u0438 \u0443\u0441\u043b\u0443\u0433\u0430 \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438 (Yes, No, No internet service)\n- StreamingTV \u2013 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u043b\u0438 \u0443\u0441\u043b\u0443\u0433\u0430 \u0441\u0442\u0440\u0438\u043c\u0438\u043d\u0433\u043e\u0432\u043e\u0433\u043e \u0442\u0435\u043b\u0435\u0432\u0438\u0434\u0435\u043d\u0438\u044f (Yes, No, No internet service)\n- StreamingMovies \u2013 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u043b\u0438 \u0443\u0441\u043b\u0443\u0433\u0430 \u0441\u0442\u0440\u0438\u043c\u0438\u043d\u0433\u043e\u0432\u043e\u0433\u043e \u043a\u0438\u043d\u043e\u0442\u0435\u0430\u0442\u0440\u0430 (Yes, No, No internet service)\n- Contract \u2013 \u0442\u0438\u043f \u043a\u043e\u043d\u0442\u0440\u0430\u043a\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (Month-to-month, One year, Two year)\n- PaperlessBilling \u2013 \u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442 \u0431\u0435\u0437\u0431\u0443\u043c\u0430\u0436\u043d\u044b\u043c \u0431\u0438\u043b\u043b\u0438\u043d\u0433\u043e\u043c (Yes, No)\n- PaymentMethod \u2013 \u043c\u0435\u0442\u043e\u0434 \u043e\u043f\u043b\u0430\u0442\u044b (Electronic check, Mailed check, Bank transfer (automatic), Credit card\n- (automatic))\n- MonthlyCharges \u2013 \u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u043e\u043f\u043b\u0430\u0442\u044b \u043d\u0430 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u043c\u043e\u043c\u0435\u043d\u0442\n- TotalCharges \u2013 \u043e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u043b \u0437\u0430 \u0443\u0441\u043b\u0443\u0433\u0438 \u0437\u0430 \u0432\u0441\u0435 \u0432\u0440\u0435\u043c\u044f\n- Churn \u2013 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u0435\u043b \u043b\u0438 \u043e\u0442\u0442\u043e\u043a (Yes or No)","26c29de1":"\u041a\u043e\u043d\u0435\u0447\u043d\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c.","b7566a31":"\u041c\u044b \u043d\u0430\u0448\u043b\u0438 \u043b\u0443\u0447\u0448\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 *gamma (0) \u0438 scale_pos_weight (2.1)*, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 (0.7606). \u041f\u043e\u0434\u0431\u0435\u0440\u0451\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 *subsample* \u0438 *colsample_bytree*.","a1a5bade":"\u0421\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u0438 \u0432 \u044d\u0442\u0438\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445 \u043d\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u044b \u043e\u0448\u0438\u0431\u043a\u0438. \u041a\u0430\u0436\u0435\u0442\u0441\u044f \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043d\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u0438\u0445 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a.","7e2f1330":"### 2.3. \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u0435\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432.   <a id=\"sectionML23\"><\/a>\n\u0410\u043d\u0441\u0430\u043c\u0431\u043b\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e **(\u0441\u043b\u0430\u0431\u044b\u0445)** \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u0441 \u0446\u0435\u043b\u044c\u044e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043b\u0443\u0447\u0448\u0435\u0439 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f.  \n\u0412\u0438\u0434\u044b \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u0435\u0439:\n- \u043a\u043e\u043c\u0438\u0442\u0435\u0442\u044b (BaggingClassifier, Random forest)\n- \u0431\u0443\u0441\u0442\u0438\u043d\u0433 (XGBoost)\n- QLattice\n- \u0441\u0442\u0435\u043a\u0438\u043d\u0433 (StackingClassifier)\n\n\n#### 2.3.1. \u041f\u043e\u0434\u0431\u043e\u0440 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0434\u043b\u044f \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u0435\u0439 \u0438\u0437 \u043a\u043e\u043c\u0438\u0442\u0435\u0442\u043e\u0432.  <a id=\"sectionML231\"><\/a>\n\u041d\u0430\u0447\u043d\u0451\u043c \u0441 \u0431\u044d\u0433\u0433\u0438\u043d\u0433\u0430. \u0414\u043b\u044f \u043d\u0435\u0433\u043e \u0436\u0435 \u0431\u0443\u0434\u0435\u0442 \u043b\u0443\u0447\u0448\u0435, \u0435\u0441\u043b\u0438 \u0432\u0437\u044f\u0442\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u043d\u0435\u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b \u0438 \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u043b\u0430\u0432\u0430\u044e\u0442 \u043e\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n\u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0447\u0430\u0449\u0435 \u0431\u0435\u0440\u0443\u0442 \u0420\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044e \u0438 \u0414\u0435\u0440\u0435\u0432\u044c\u044f \u0420\u0435\u0448\u0435\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043e\u0434\u043d\u043e\u0439 \u0441\u0438\u043b\u044c\u043d\u043e\u0439 \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0435\u0445\u0430\u043b\u0430 \u0432\u0441\u044f \u043c\u043e\u0434\u0435\u043b\u044c.\n\u0410 \u0432\u043e\u0442 \u0411\u0430\u0439\u0435\u0441\u0430 \u0438 K-NN \u043d\u0435 \u0431\u0435\u0440\u0443\u0442 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u2014 \u043e\u043d\u0438 \u0445\u043e\u0442\u044c \u0438 \u043d\u0435 \u0441\u0430\u043c\u044b\u0435 \u0442\u043e\u0447\u043d\u044b\u0435, \u043d\u043e \u043e\u0447\u0435\u043d\u044c \u0441\u0442\u0430\u0431\u0438\u043b\u044c\u043d\u044b\u0435.","0475102b":"\u041c\u044b \u043c\u043e\u0436\u0435\u043c \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u0441\u0438\u043b\u0443 \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043a\u043e\u043b-\u0432\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u0443\u0441\u043b\u0443\u0433 \u0438 \u043c\u0435\u0441\u044f\u0447\u043d\u044b\u043c\u0438 \u0440\u0430\u0441\u0445\u043e\u0434\u0430\u043c\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.  \n\u0410 \u0442\u0435\u043f\u0435\u0440\u044c \u0441\u0442\u043e\u0438\u0442 \u0432\u0437\u0433\u043b\u044f\u043d\u0443\u0442\u044c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f\/\u0443\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441\u0440\u0435\u0434\u0438 \u044d\u0442\u0438\u0445 \u0433\u0440\u0443\u043f\u043f.","1e4bc2f9":"\u041e\u0442\u043b\u0438\u0447\u043d\u043e \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 *max_depth (3) \u0438 min_child_weight (13)* \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u043e AUC-ROC (0.723). \u041f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u043c \"\u0442\u044e\u043d\u0438\u043d\u0433\" \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c *gamma* \u0438 *scale_pos_weight*.","c4d2fe33":"# \u0420\u0430\u0437\u0432\u0435\u0434\u043e\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445. <a id=\"sectionEDA\"><\/a>\n## 1. \u041e\u0431\u0449\u0430\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f. <a id=\"section1\"><\/a>\n### 1.1. \u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445. <a id=\"section11\"><\/a>","bc47b651":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445. <a id=\"sectionDP\"><\/a>\n## 1. \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432. <a id=\"sectionDP1\"><\/a>","07c7646f":"\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u0443\u0441\u043b\u0443\u0433\u0438 \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043f\u0440\u043e\u0432\u0430\u0439\u0434\u0435\u0440\u0430.","b0a81534":"\u041a\u0430\u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u044b \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0438 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0438 LogisticRegressionCV. \u0427\u0442\u043e \u0436\u0435, \u044d\u0442\u043e \u0442\u043e\u0436\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n\u0422\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u043e\u0442\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 RandomForestClassifier.","affafe53":"#### 2.12.2. \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. <a id=\"section2122\"><\/a>","7c0c1073":"**\u0412\u044b\u0432\u043e\u0434:**  \n\u041a\u0430\u043a \u0432\u0438\u0434\u043d\u043e \u0438\u0437 \u0433\u0440\u0430\u0444\u0438\u043a\u0430: \u0447\u0435\u043c \u0434\u043e\u043b\u044c\u0448\u0435 \u043b\u044e\u0434\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u043d\u0438 \u0442\u0440\u0430\u0442\u044f\u0442 \u0432 \u043c\u0435\u0441\u044f\u0446 \u043d\u0430 \u0443\u0441\u043b\u0443\u0433\u0438 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438.","e912491b":"### 2.9. \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0434\u043e\u0445\u043e\u0434\u043e\u0432 \u0437\u0430 \u0432\u0435\u0441\u044c \u0438\u0441\u0441\u043b\u0435\u0434\u0443\u0435\u043c\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u0432\u043d\u0443\u0442\u0440\u0438 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439. <a id=\"section29\"><\/a>\n\u041c\u0430\u043b\u043e \u0441\u043c\u044b\u0441\u043b\u0430 \u0432 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u0434\u043e\u0445\u043e\u0434\u043e\u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043f\u043e \u0443\u0441\u043b\u0443\u0433\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0431\u0440\u0430\u043b\u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u044b, \u0432\u0435\u0434\u044c \u043d\u0435\u043b\u044c\u0437\u044f \u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e 34 % \u0438\u0437 \u0432\u0441\u0435\u0445\n\u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u043c \u0447\u0435\u043a\u043e\u043c \u0434\u043b\u044f \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u0440\u0438\u043d\u043e\u0441\u044f\u0442 31 % \u0434\u043e\u0445\u043e\u0434\u043e\u0432 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u044d\u0442\u043e \u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0445\u043e\u0442\u044c \u044d\u0442\u043e \u0438 \u043f\u0440\u0430\u0432\u0434\u0430.\n\u0412 \u043d\u0430\u0448\u0435\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043b\u0443\u0447\u0448\u0435 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u043d\u0430\u0448\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0435\u043d\u043d\u044b \u0438\u043c\u0435\u043d\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u0430 \u043d\u0435 \u0438\u0445 \u0432\u044b\u0431\u043e\u0440\u0443, \u043a\u043e\u0442\u043e\u0440\u044b\u0439,\n\u043a\u0441\u0442\u0430\u0442\u0438, \u0437\u0430 6 \u043b\u0435\u0442 \u043c\u043e\u0433 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f.","8d80ceff":"## 3. \u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439.  <a id=\"sectionML3\"><\/a>\n\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0432\u044b\u0445 \u0442\u0440\u0435\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439 (*XGBClassifier, CategoricalNB, GaussianNB*). \u041c\u044b \u043d\u0435 \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c *Stacking* \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u0438\u043b\u0441\u044f \u043f\u043e\u0434 \u043e\u0442\u0432\u0435\u0442\u044b \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0445 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432 \u043d\u0435\u0433\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 (*CategoricalNB*).\n### 3.1. \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a.  <a id=\"sectionML31\"><\/a>\n#### 3.1.1. \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u0434\u043b\u044f *XGBClassifier* . <a id=\"sectionML311\"><\/a>","84cb8df7":"# \u0412\u044b\u0432\u043e\u0434  <a id=\"sectionCONCLUSION\"><\/a>","15dd9c1a":"## 2. \u041f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u0430\u044f \"\u0447\u0438\u0441\u0442\u043a\u0430\" \u0434\u0430\u043d\u043d\u044b\u0445. <a id=\"sectionDP2\"><\/a>\n### 2.1. \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 (outliers).  <a id=\"sectionDP21\"><\/a>\n\u041f\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043f.2.4 \u0440\u0430\u0437\u0432\u0435\u0434\u043e\u0447\u043d\u043e\u0433\u043e \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043a\u043b\u044e\u0447\u0438\u0442\u044c, \u0447\u0442\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0432\u0443\u0435\u0442.\n### 2.2. \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u043d\u0443\u0442\u0440\u0435\u043d\u043d\u0438\u0445 \u043e\u0448\u0438\u0431\u043e\u043a (inliers).  <a id=\"sectionDP22\"><\/a>\n\u0418\u0437\u0443\u0447\u0438\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b *PhoneService* \u0438 *MultipleLines* \u043d\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u043e\u0448\u0438\u0431\u043e\u043a. ","a53fbd0f":"**\u0412\u044b\u0432\u043e\u0434:**  \n- \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u044e\u0442\u0441\u044f. \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0441 TotalCharges \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0442\u044c \u0441\u043c\u0435\u0449\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0432 \u0441\u0442\u043e\u0440\u043e\u043d\u0443 0.\n- \u0414\u043b\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432 \u0441\u0440\u043e\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f (tenure) \u0438 \u043c\u0435\u0441\u044f\u0447\u043d\u043e\u0439 \u043f\u043b\u0430\u0442\u044b (MonthlyCharges) \u043d\u0430\u043b\u0438\u0446\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u044f\u0432\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439.","eb386521":"\u041f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u043b\u0430\u0431\u043e\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435, \u043d\u043e \u043c\u043e\u0436\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0439 \u0438\u043d\u0441\u0430\u0439\u0442 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043c\u043e\u0434\u0435\u043b\u0438.","0eac57b8":"\u041f\u043e\u0447\u0442\u0438 \u0432\u0441\u0435 \u0442\u0440\u0438 \u043e\u0442\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e. \u0425\u043e\u0442\u044f \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u0431\u0443\u0441\u0442\u0438\u043d\u0433 \u0447\u0430\u0449\u0435 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u0432\u0435\u0440\u0445\u0443 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0433\u0440\u0430\u0444\u0438\u043a\u043e\u0432.","f13a41ea":"\u041d\u0435\u043b\u044c\u0437\u044f \u043e\u0431\u043e\u0439\u0442\u0438 \u0441\u0442\u043e\u0440\u043e\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0434\u043b\u044f \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b - *DecisionTreeClassifier* \u0438 *KNeighborsClassifier*.","da9c1bc2":"\u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 'MonthlyCharges'. \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0432\u044b\u0434\u0435\u043b\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u044b.","a910b1e8":"#### 3.1.2. \u041c\u0430\u0442\u0440\u0438\u0446\u0430 \u043e\u0448\u0438\u0431\u043e\u043a \u0434\u043b\u044f *CategoricalNB*.  <a id=\"sectionML312\"><\/a>","b414e08d":"### 1.4. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u043f\u0446\u0438\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0442\u0442\u043e\u043a\u0430.  <a id=\"sectionDP14\"><\/a>\n\u0414\u0430\u043b\u0435\u0435 \u043c\u044b \u043f\u043e\u043c\u0435\u0442\u0438\u043c \u043a\u0430\u043a high_risk_by_services \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043c\u0435\u0442\u043d\u043e \u0432\u044b\u0434\u0435\u043b\u044f\u043b\u0438\u0441\u044c \u0432 \u043f\u0443\u043d\u043a\u0442\u0435 2.10. \u043f\u0440\u043e \u043e\u0442\u0442\u043e\u043a.","78dd7033":"\u0412 \u043d\u0430\u0448\u0435\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 ('Churn' - 'Yes') 315 \u0447\u0435\u043b\u043e\u0432\u0435\u043a, \u0438\u0437 \u043d\u0438\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c 239 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0432\u0435\u0440\u043d\u043e \u0438 76 \u043d\u0435\u0432\u0435\u0440\u043d\u043e.","dbc2dfce":"\u041c\u0435\u0436\u0434\u0443 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\u0438 \u043d\u0435\u0442 \u043f\u043e\u0447\u0442\u0438 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438, \u043a\u0440\u043e\u043c\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 'Dependents' \u0438 'Partner'.  \n\u0414\u0430\u0432\u0430\u0439\u0442\u0435 \u0432\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 InternetService.","aab4c561":"### 3.2. ROC-\u043a\u0440\u0438\u0432\u0430\u044f.  <a id=\"sectionML32\"><\/a>\n\u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u043c ROC-\u043a\u0440\u0438\u0432\u0443\u044e \u0434\u043b\u044f \u0442\u0440\u0435\u0445 \u043d\u0430\u0448\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432.","f58e504d":"### 2.12. \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437. <a id=\"section212\"><\/a>\n#### 2.12.1. \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. <a id=\"section2121\"><\/a>","f6ad2081":"## 2. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. <a id=\"section2\"><\/a>\n### 2.1. \u0417\u043d\u0430\u043a\u043e\u043c\u0441\u0442\u0432\u043e \u0441 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u043e\u043c. <a id=\"section21\"><\/a>\n\u041f\u0435\u0440\u0432\u044b\u043c \u0434\u0435\u043b\u043e\u043c \u0432\u0437\u0433\u043b\u044f\u043d\u0435\u043c \u043d\u0430 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043a\u0443\u0441\u043e\u0447\u0435\u043a \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","137d9f3f":"\u041c\u044b \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 (DecisionTreeClassifier), \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0432 \u0435\u0433\u043e \u0432 \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u0435. \u041f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","5102382b":"\u0412 \u043d\u0430\u0448\u0435\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435 ('Churn' - 'Yes') 315 \u0447\u0435\u043b\u043e\u0432\u0435\u043a, \u0438\u0437 \u043d\u0438\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c 226 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0432\u0435\u0440\u043d\u043e \u0438 89 \u043d\u0435\u0432\u0435\u0440\u043d\u043e.","7ce0fba4":"**\u0412\u044b\u0432\u043e\u0434:**  \n\u041d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u0432\u0441\u0435 \u043e\u0442\u043b\u0438\u0447\u043d\u043e, \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f."}}