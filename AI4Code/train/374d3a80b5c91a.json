{"cell_type":{"4aa1a85f":"code","81985fcd":"code","0ec9e613":"code","f0eb3aff":"code","bab4beee":"code","27a61fdf":"code","c367a54e":"code","51fa28bf":"code","930f28d3":"code","f6fa8641":"code","77f2a56b":"code","15de9d6d":"code","4a8bba94":"code","8c3d96d5":"code","cca5cc87":"code","d098e985":"code","f997ecf1":"code","875635a3":"code","b8f6d0ae":"code","26ac4264":"code","89e3e584":"code","87a72880":"code","187233c6":"code","2070341f":"code","37709c25":"code","76e4c999":"code","08d1cb14":"code","8f8acd24":"code","080a676c":"code","b3050781":"code","c067e74f":"code","08d28014":"code","2d287649":"code","8fa28aad":"code","71cda4d7":"code","6b0fcf31":"code","366b3efb":"code","fbb026f4":"code","a0b022e5":"code","1c6608f4":"code","dcad62a5":"code","e95ee14d":"code","6f73b12b":"code","baf3101b":"code","c583546f":"code","858c8908":"code","e80a2741":"code","2e68b4b5":"code","60afc706":"code","c70c57b7":"code","07c46903":"code","ec59978e":"code","024c32b0":"markdown","a915cf66":"markdown","ab134c9a":"markdown","0d30706f":"markdown","c41cee43":"markdown","4d6c5675":"markdown","d56085b2":"markdown","f4a0ae3c":"markdown","de5e245b":"markdown","50e7d3ca":"markdown","60844163":"markdown","e39fd303":"markdown","e852a9fa":"markdown","4e4e665c":"markdown","d9dae7d6":"markdown"},"source":{"4aa1a85f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","81985fcd":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score","0ec9e613":"air=pd.read_csv(\"\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\")","f0eb3aff":"air.shape","bab4beee":"air.info()","27a61fdf":"air.head(5)","c367a54e":"air.isnull().values.any()","51fa28bf":"air.describe()","930f28d3":"air.mean()","f6fa8641":"air.drop(['id','host_id'],axis=1,inplace=True)","77f2a56b":"air['reviews_per_month'].fillna(value=air['reviews_per_month'].mean(), inplace=True)","15de9d6d":"air['last_review'] = pd.to_datetime(air['last_review'])","4a8bba94":"air['last_review'].mean()","8c3d96d5":"air['last_review'].fillna(value=air['last_review'].mean(), inplace=True)","cca5cc87":"air.fillna({'name':\"Noname\"}, inplace=True)","d098e985":"air.info()","f997ecf1":"fig=px.histogram(air,x=\"room_type\",template=\"plotly_dark\",title=\"Counts of different room type\")\nfig.show()","875635a3":"fig=px.histogram(air, x=\"neighbourhood_group\",color=\"room_type\",template=\"plotly_dark\",title=\"Share of room types in different neighbourhood\")\nfig.show()","b8f6d0ae":"fig = px.histogram(air, x=\"number_of_reviews\",range_x=(0,100),template=\"plotly_dark\",title=\"Number of reviews recieved by each apartment\")\nfig.show()","26ac4264":"fig = px.histogram(air, x=\"availability_365\",template=\"plotly_dark\",title=\"Avialability of apartments\")\nfig.show()","89e3e584":"fig = px.histogram(air, x=\"minimum_nights\",range_x=(0,50),template=\"plotly_dark\",title=\"Minimum nights stayed\")\nfig.show()","87a72880":"fig = px.scatter(air, x=\"neighbourhood\", y=\"price\", color=\"room_type\",template=\"plotly_dark\", facet_col=\"neighbourhood_group\",title=\"Areas with room are available in diffrent neigbourhood\")\nfig.show()","187233c6":"fig = px.scatter(air,x=\"latitude\", y=\"longitude\", color=\"room_type\", template=\"plotly_dark\", title=\"Spread of room types in NYC\",width=600,height=400)\nfig.show()","2070341f":"fig = px.pie(air, values='price', names='room_type',template=\"plotly_dark\",title=\"Share of rooms based on price\")\nfig.show()","37709c25":"fig = px.strip(air, x=\"price\", y=\"minimum_nights\",color=\"room_type\",facet_col=\"neighbourhood_group\",template=\"plotly_dark\",title=\"Prices in different neighbourhood\")\nfig.show()","76e4c999":"fig = px.pie(air, values='price', names='neighbourhood_group',template=\"plotly_dark\",title=\"Share of neighbourhoods based on price\")\nfig.show()","08d1cb14":"fig = px.scatter(air, x='last_review', y='price', range_x=['2019-01-01','2019-12-31'],color=\"room_type\",facet_col=\"neighbourhood_group\",template=\"plotly_dark\")\nfig.show()\nfig = px.scatter(air, x='last_review', y='price', range_x=['2018-01-01','2018-12-31'],color=\"room_type\",facet_col=\"neighbourhood_group\",template=\"plotly_dark\")\nfig.show()\nfig = px.scatter(air, x='last_review', y='price', range_x=['2017-01-01','2017-12-31'],color=\"room_type\",facet_col=\"neighbourhood_group\",template=\"plotly_dark\")\nfig.show()\nfig = px.scatter(air, x='last_review', y='price', range_x=['2016-01-01','2016-12-31'],color=\"room_type\",facet_col=\"neighbourhood_group\",template=\"plotly_dark\")\nfig.show()","8f8acd24":"grouped = air.groupby('host_name').sum().reset_index()\ngrouped.sort_values('calculated_host_listings_count', ascending=False).head(5)","080a676c":"air[\"name_length\"]=air['name'].map(str).apply(len)","b3050781":"air.drop(['host_name','name','last_review','latitude','longitude'], axis = 1,inplace=True) ","c067e74f":"corre=air.corr()\nair.corr()","08d28014":"plt.figure(figsize=(10,5))\nsns.heatmap(corre,annot=True)","2d287649":"## Creating dummy variable of categorical variables for creating regression model\nair_1 = pd.get_dummies(air, columns=['neighbourhood_group',\"neighbourhood\",\"room_type\"], prefix = ['NG',\"N\",\"R\"],drop_first=True)","8fa28aad":"## making sure that the columns are according to the required number\nair_1.shape","71cda4d7":"## Separating target column\nx= air_1.loc[:, air_1.columns != 'price']\ny= air_1[\"price\"]","6b0fcf31":"x.shape","366b3efb":"y.shape","fbb026f4":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.3,random_state=200)\nx_train.head()","a0b022e5":"LR = LinearRegression().fit(x_train, y_train)","1c6608f4":"y_pred = LR.predict(x_test)","dcad62a5":"print('Coefficients: \\n', LR.coef_)","e95ee14d":"print('Mean squared error:{:.5f}'.format(mean_squared_error(y_test, y_pred)))","6f73b12b":"print('Coefficient of determination:{:.5f}'.format( r2_score(y_test, y_pred)))","baf3101b":"Rg= Ridge()\nRg.fit(x_train, y_train)\n\ny_pred_R=Rg.predict(x_test)","c583546f":"print('Coefficients: \\n', Rg.coef_)","858c8908":"print('Mean squared error: {:.5f}'.format(mean_squared_error(y_test, y_pred_R)))","e80a2741":"print('Coefficient of determination:{:.5f}'.format(r2_score(y_test, y_pred_R)))","2e68b4b5":"Lo = Lasso(alpha=10,max_iter = 10000)\nLo.fit(x_train, y_train)\ny_pred_L=Lo.predict(x_test)","60afc706":"print('Coefficients: \\n', Lo.coef_)","c70c57b7":"print('Mean squared error: {:.5f}'.format(mean_squared_error(y_test, y_pred_L)))","07c46903":"print('Coefficient of determination: {:.5f}'.format(r2_score(y_test, y_pred_L)))","ec59978e":"print('Cross validation score of linear regression ={:.5f} '.format(cross_val_score(LR, x, y, cv = 10).mean()))\nprint('Cross validation score of ridge regression = {:.5f}'.format(cross_val_score(Rg, x, y, cv = 10).mean()))\nprint('Cross validation score of lasso regression = {:.5f}'.format(cross_val_score(Lo, x, y, cv = 10).mean()))","024c32b0":"## Correlation between variables","a915cf66":"## Removing unwanted features for the module ","ab134c9a":"##Loading the dataset","0d30706f":"## Bivariate analysis","c41cee43":"## Linear regression model","4d6c5675":"## Checking the attributes of data","d56085b2":"## Ridge regression","f4a0ae3c":"### Checking for top five number of listing based on host name","de5e245b":"## Citation\n - Yashvi Patel(Kaggle)\n - Amit Jadhav (Kaggle)\n - Scikit-learn \n - Seaborn documentation\n - Plotly documentation\n","50e7d3ca":"## Univariate analysis","60844163":"## Cross validation score","e39fd303":"## Loading  packages ","e852a9fa":"## Lasso regression","4e4e665c":"## Cleaning the dataset before analysis","d9dae7d6":"## Train-test split"}}