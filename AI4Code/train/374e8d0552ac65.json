{"cell_type":{"85e8b007":"code","9782f077":"code","e7ee0fb0":"code","9a1e8e2f":"code","a0d0d108":"code","1095b991":"code","6fe153d5":"code","e1a54990":"code","8ab598dd":"code","d03fc879":"code","1ec6b5cc":"code","326d53fc":"code","f1f22b54":"code","12258b9f":"code","24b8c203":"code","640b4b1d":"markdown","24b39da6":"markdown","68abc4b6":"markdown","4e2d74b8":"markdown","cd204c0d":"markdown","a05ab5d5":"markdown","cfc2328d":"markdown","fd347d0c":"markdown","56ba7008":"markdown","b3942789":"markdown","2590ccd0":"markdown","0b40ba71":"markdown","2e7f87ff":"markdown","cbe7bfa8":"markdown","c7e7e9e2":"markdown","d443a196":"markdown","831f88ca":"markdown","b097f6df":"markdown","0ecd9c87":"markdown","9348f86f":"markdown","3bac68da":"markdown","53f249b3":"markdown","8bd8100b":"markdown","377cd3ff":"markdown"},"source":{"85e8b007":"import numpy as np\nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","9782f077":"# Definition of countries and capital\ncountries = ['spain', 'france', 'germany', 'norway']\ncapitals = ['madrid', 'paris', 'berlin', 'oslo']\n\n# From string in countries and capitals, create dictionary europe\neurope = { 'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }\n\n# Print europe\nprint(europe)","e7ee0fb0":"# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }\n\n# Print out the keys in europe\nkeys = europe.keys()\n\n# Print out value that belongs to key 'norway'\nvalues = europe.values()\nprint(europe.keys())\nprint(europe['norway'])","9a1e8e2f":"# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }\nprint(europe)\n\n# Add italy to europe\neurope['italy'] = 'rome'\n\n# Print out italy in europe\nprint('italy' in europe)\n\n# Add poland to europe\neurope['poland'] = 'warsaw'\n\n# Print europe\nprint(europe)","a0d0d108":"# Definition of dictionary\neurope = {'spain':'madrid', 'france':'paris', 'germany':'bonn',\n          'norway':'oslo', 'italy':'rome', 'poland':'warsaw',\n          'australia':'vienna' }\n\n# Update capital of germany\neurope['germany'] = 'berlin'\n\n# Remove australia\ndel europe['australia']\n\n# Print europe\nprint(europe)","1095b991":"# Dictionary of dictionaries\neurope = { 'spain': { 'capital':'madrid', 'population':46.77 },\n           'france': { 'capital':'paris', 'population':66.03 },\n           'germany': { 'capital':'berlin', 'population':80.62 },\n           'norway': { 'capital':'oslo', 'population':5.084 } }\n\n\n# Print out the capital of France\neurope['france']\n\n# Create sub-dictionary data\ndata = {'capital' : 'rome', 'population': 59.83}\n\n# Add data to europe under key 'italy'\neurope['italy'] = data\n\n# Print europe\nprint(europe)","6fe153d5":"# Pre-defined lists\nnames = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']\ndr =  [True, False, False, False, True, True, True]\ncpc = [809, 731, 588, 18, 200, 70, 45]\n\n# Import pandas as pd\nimport pandas as pd\n\n# Create dictionary my_dict with three key:value pairs: my_dict\nmy_dict = {'country': names, 'drives_right': dr, 'cars_per_cap':cpc}\n\n# Build a DataFrame cars from my_dict: cars\ncars = pd.DataFrame(data=my_dict)\n\n# Print cars\nprint(cars)","e1a54990":"# Build cars DataFrame\nnames = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']\ndr =  [True, False, False, False, True, True, True]\ncpc = [809, 731, 588, 18, 200, 70, 45]\ncars_dict = { 'country':names, 'drives_right':dr, 'cars_per_cap':cpc }\ncars = pd.DataFrame(cars_dict)\nprint(cars)\n\n# Definition of row_labels\nrow_labels = ['US', 'AUS', 'JPN', 'IN', 'RU', 'MOR', 'EG']\n\n# Specify row labels of cars\ncars.index = row_labels\n# Print cars again\nprint(cars)","8ab598dd":"# Import the cars.csv data: cars\ncars = pd.read_csv('..\/input\/dictionary-and-pandas-csv\/cars.csv')\n\n# Print out cars\nprint(cars)","d03fc879":"# Fix import by including index_col\ncars = pd.read_csv('..\/input\/dictionary-and-pandas-csv\/cars.csv', index_col=0)\n\n# Print out cars\nprint(cars)","1ec6b5cc":"# Print out country column as Pandas Series\nprint(cars['country'])\n\n# Print out country column as Pandas DataFrame\nprint(cars[['country']])\n\n# Print out DataFrame with country and drives_right columns\nprint(cars[['country', 'drives_right']])","326d53fc":"# Print out first 3 observations\nprint(cars[0:3])\n\n# Print out fourth, fifth and sixth observation\nprint(cars[3:6])","f1f22b54":"# Print out observation for Japan\nprint(cars.loc['JPN'])\nprint(cars.iloc[2])\n# Print out observations for Australia and Egypt\nprint(cars.loc[['AUS', 'EG']])","12258b9f":"# Print out drives_right value of Morocco\nprint(cars.loc['MOR', 'drives_right'])\n\n# Print sub-DataFrame\nprint(cars.loc[['RU', 'MOR'], ['country', 'drives_right']])","24b8c203":"# Print out drives_right column as Series\nprint(cars.loc[:, 'drives_right'])\n\n# Print out drives_right column as DataFrame\nprint(cars.loc[:, ['drives_right']])\n\n# Print out cars_per_cap and drives_right as DataFrame\nprint(cars.loc[:,['cars_per_cap', 'drives_right']])","640b4b1d":"# CSV to DataFrame ","24b39da6":"You can index and select Pandas DataFrames in many different ways. The simplest, but not the most powerful way, is to use square brackets. The single bracket will give us a Pandas Series, the double bracket will give us a Pandas DataFrame.","68abc4b6":"Use pd.DataFrame() to convert your dict into DataFrame","4e2d74b8":"It's also possible to select only columns with loc and iloc. In both cases, you simply put a slice going from beginning to end in front of the comma:\n\ncars.loc[:, 'country']\ncars.iloc[:, 1]\n\ncars.loc[:, ['country','drives_right']]\ncars.iloc[:, [1, 2]]\n\nIf you use iloc instead of loc it will giev you an error because its not an interger","cd204c0d":"This adds items into the dictionary","a05ab5d5":"Change the numbers into the countries abbreviation","cfc2328d":"# Dictionary Manipulation","fd347d0c":"Pandas is an open source library, providing high-performance, easy-to-use data structures and data analysis tools for Python. Sounds promising!\n\nThe DataFrame is one of Pandas' most important data structures. It's basically a way to store tabular data where you can label the rows and the columns. One way to build a DataFrame is from a dictionary.\nFor more help go to: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.html","56ba7008":"# Dictionary to DataFrame","b3942789":"Square brackets can do more than just selecting columns. You can also use them to get rows, or observations, from a DataFrame. Pay attention: You can only select rows using square brackets if you specify a slice, like 0:4. Also, you're using the integer indexes of the rows here, not the row labels!","2590ccd0":"Putting data in a dictionary and then building a DataFrame works, but it's not very efficient. What if you're dealing with millions of observations? In those cases, the data is typically available as files with a regular structure. One of those file types is the CSV file, which is short for \"comma-separated values\". For more help: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.read_csv.html","0b40ba71":"# If you like this notebook, please an Upvote! Don't forget to check out my other notebooks too!\n\n* [ConnectX Baseline](https:\/\/www.kaggle.com\/brendan45774\/connectx-baseline)\n* [Data Visuals - Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/data-visuals-matplotlib)\n* [Digit Recognizer Solution](http:\/\/www.kaggle.com\/brendan45774\/digit-recognizer-solution)\n* [Dictionary and Pandas Cheat sheet](https:\/\/www.kaggle.com\/brendan45774\/dictionary-and-pandas-cheat-sheet)\n* [EDA Tutorial Hollywood Movies](https:\/\/www.kaggle.com\/brendan45774\/eda-tutorial-hollywood-movies)\n* [Getting started with Matplotlib](http:\/\/www.kaggle.com\/brendan45774\/getting-started-with-matplotlib)\n* [How to get the lowest score](https:\/\/www.kaggle.com\/brendan45774\/how-to-get-the-lowest-score)\n* [House predict solution](http:\/\/www.kaggle.com\/brendan45774\/house-predict-solution)\n* [Kuzushiji-MNIST Panda](http:\/\/www.kaggle.com\/brendan45774\/kuzushiji-mnist-panda)\n* [Plotly Coronavirus (Covid-19)](https:\/\/www.kaggle.com\/brendan45774\/plotly-coronavirus-covid-19)\n* [Titanic Top Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-top-solution)\n* [Titanic Data Solution](http:\/\/www.kaggle.com\/brendan45774\/titanic-data-solution)\n* [Word Cloud - Analyzing Names](https:\/\/www.kaggle.com\/brendan45774\/word-cloud-analyzing-names)","2e7f87ff":"# Get started with Dictionarys","cbe7bfa8":"# Square Brackets","c7e7e9e2":"Dictionaries are like lists, but they have labels. The labels are called \"keys\" to identify the item instead of the index numbers. Many people use dictionarys when working with pandas or python.","d443a196":"Dictionaries can contain key:value pairs where the values are again dictionaries. To fetch the population for Spain from europe, for example, you need:\n\neurope['spain']['population']","831f88ca":"# loc and iloc ","b097f6df":"![image.png](attachment:image.png)","0ecd9c87":"loc and iloc also allow you to select both rows and columns from a DataFrame.","9348f86f":"This code updates the error in the dictionary and deletes an items that is not suppose to be there","3bac68da":" Convert this data to a dictionary where the country names are the keys and the capitals are the corresponding values.","53f249b3":"**loc** is label-based, which means that you have to specify rows and columns based on their row and column labels. **iloc** is integer index based, so you have to specify rows and columns by their integer index. \nFor more help use: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/indexing.html","8bd8100b":"Your read_csv() call to import the CSV data didn't generate an error, but the output is not entirely what we wanted. The row labels were imported as another column without a name.","377cd3ff":"Using keys to find the value in the dictionary "}}