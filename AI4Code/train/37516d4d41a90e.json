{"cell_type":{"1753102e":"code","f02c8736":"code","269cbe66":"code","5bbe692b":"code","0dbef357":"code","a0fb8c6a":"code","c483ca43":"code","e52e1bcc":"code","49185409":"code","d2d2e596":"code","afd7e1be":"code","71393c07":"code","bc3633a4":"code","44205754":"code","98d70237":"code","fa5f94a6":"code","68a4c6f2":"code","039c7990":"code","5fa0519a":"code","1d53b2c4":"code","55d35d8a":"code","93c9a615":"code","15c77226":"markdown","7dbb7ce0":"markdown","cfed6291":"markdown","9f807c43":"markdown"},"source":{"1753102e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f02c8736":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(\"ignore\")\nfrom sklearn.model_selection import train_test_split\nplt.rcParams.update({'font.size': 12})\nplt.rcParams[\"figure.figsize\"] = (10,5)","269cbe66":"df=pd.read_csv('\/kaggle\/input\/room-occupancy\/file.csv')\ndf.head()","5bbe692b":"df.count()","0dbef357":"df.describe()","a0fb8c6a":"df.hist()","c483ca43":"sns.heatmap(df.corr(), annot=True, fmt='.1g', cmap=\"viridis\",);","e52e1bcc":"raw_df=df.drop('Humidity',axis=1)\nraw_df.head()","49185409":"sns.heatmap(raw_df.corr(), annot=True, fmt='.1g', cmap=\"viridis\",);","d2d2e596":"X = raw_df.drop('Occupancy', axis=1)\nY = raw_df['Occupancy']","afd7e1be":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2)","71393c07":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC","bc3633a4":"model = LogisticRegression()\nmodel.fit(X_train,Y_train)\nY_pred=model.predict(X_test)\nLRScore = model.score(X_test,Y_test)\nprint(\"Accuracy for Method 1 - Logistic Regression:\",LRScore*100)","44205754":"model1 = RandomForestClassifier()\nmodel1.fit(X_train,Y_train)\nY_pred_rf=model1.predict(X_test)\nRandomForestClassifierScore = model.score(X_test,Y_test)\nprint(\"Accuracy obtained for Method 2 - Random Forest Classifier :\",RandomForestClassifierScore*100)","98d70237":"tree = DecisionTreeClassifier()\ntree.fit(X_train,Y_train)\nDecisionTreeClassifierScore = tree.score(X_test,Y_test)\nprint(\"Accuracy obtained by Decision Tree Classifier model:\",DecisionTreeClassifierScore*100)","fa5f94a6":"modelXGB = XGBClassifier(n_estimators=100, subsample=0.9, colsample_bynode=0.2)\nmodelXGB.fit(X_train,Y_train)\npreds=modelXGB.predict(X_test)\nXGBScore=modelXGB.score(X_test,Y_test)\nprint(\"Accuracy obtained by XGB model:\",XGBScore*100)","68a4c6f2":"KNN_model = KNeighborsClassifier(n_neighbors=7, metric='manhattan', weights='distance')\nKNN_model.fit(X_train, Y_train)\nKNN_model.score(X_test, Y_test)*100","039c7990":"SVC_model = SVC()\nSVC_model.fit(X_train,Y_train)\nSVC_model.score(X_test, Y_test)*100","5fa0519a":"final_df=pd.DataFrame(columns = ['Actual', 'Predicted'])","1d53b2c4":"finalPreds=modelXGB.predict(X)","55d35d8a":"final_df['Actual']=Y\nfinal_df['Predicted']=finalPreds\nfinal_df.head()","93c9a615":"XGBScore=modelXGB.score(X,Y)\nprint(\"Accuracy obtained by XGB model:\",XGBScore*100)","15c77226":"# EDA + Preprocessing","7dbb7ce0":"# Predicting on overall Dataset with XGBoost","cfed6291":"# Model Building","9f807c43":"# Inputting and Understanding Data"}}