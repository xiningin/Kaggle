{"cell_type":{"c0194354":"code","4438fa8e":"code","decb3a88":"code","6fec73e7":"code","460d9472":"code","25acb1a8":"code","486367ce":"code","0058929e":"markdown"},"source":{"c0194354":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4438fa8e":"train_df = pd.merge(pd.read_csv('\/kaggle\/input\/used-car-price-dataset-competition-format\/X_train.csv'), pd.read_csv('\/kaggle\/input\/used-car-price-dataset-competition-format\/y_train.csv'), how = 'outer')\nprint(train_df)\n\ntest_df = pd.read_csv('\/kaggle\/input\/used-car-price-dataset-competition-format\/X_test.csv')\nprint(test_df)","decb3a88":"#Nan \uac12 \uc720\ubb34\ud655\uc778\nprint(train_df.isna().sum())\n\n#\ubc94\uc8fc\ud615 \ub370\uc774\ud130 \ubc0f \uc624\uc5fc\uc720\ubb34 \ud655\uc778\nfor col in train_df.select_dtypes(include=object).columns:\n    print(\"*****\ud6c8\ub828\uc6a9 \ub370\uc774\ud130\uc14b*****\")\n    print(col)\n    print(train_df[col].nunique())\n    print(train_df[col].unique())\n    \nfor col in train_df.select_dtypes(include=object).columns:\n    print(\"*****\uc2dc\ud5d8\uc6a9 \ub370\uc774\ud130\uc14b*****\")\n    print(col)\n    print(train_df[col].nunique())\n    print(train_df[col].unique())\n        \n","6fec73e7":"#\ubd88\ud544\uc694 feature \uc81c\uac70\ndef drop_features(df):\n    df = df.drop('carID', axis=1)\n    return df\n\n#\ubc94\uc8fc\ud615 feature \ub77c\ubca8\ub9c1 \uc801\uc6a9(\ud68c\uadc0\uc608\uce21\uc774\ubbc0\ub85c pd.get_dummies\ub97c \uc774\uc6a9\ud574 \uac00\uc911\uce58 \ud63c\ub3c8\uc774 \uc5c6\ub3c4\ub85d \ud568)\ndef format_features(df):\n    df = pd.get_dummies(df)\n    return df\n\n#\ud568\uc218 \uc77c\uad04\uc801\uc6a9\ndef transform_features(df):\n    df = drop_features(df)\n    df = format_features(df)\n    return df","460d9472":"train_df = transform_features(train_df)\n\nX = train_df.drop('price', axis=1)\ny = train_df['price']\nprint(y)\nfrom sklearn.model_selection import train_test_split\n\nX_train_model, X_val_model, y_train_model, y_val_model = train_test_split(X, y, test_size = 0.3, random_state = 42)\n\n# from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\n\n# model = RandomForestRegressor(random_state = 42)\nmodel = LinearRegression()\nmodel.fit(X_train_model, y_train_model)\npred = model.predict(X_val_model)\n\nfrom sklearn.metrics import r2_score\nmodel_r2score = r2_score(y_val_model, pred)\nprint(\"model_r2 score: {0:.4f}\".format(model_r2score))","25acb1a8":"submission_index = test_df['carID']\n\ntest_df = transform_features(test_df)\n# print(test_df)\n# print(test_df.columns)\n\n# pd.get_dummies\ub97c \uc774\uc6a9\ud574 \ub77c\ubca8\ub9c1\ud55c \uacbd\uc6b0\uc5d0\ub294 \ud6c8\ub828\uc6a9 \ub370\uc774\ud130\uc14b\uacfc \uc2dc\ud5d8\uc6a9 \ub370\uc774\ud130\uc14b \ub370\uc774\ud130\uac00 \ub2ec\ub77c\uc11c \uce7c\ub7fc\uc774 \uc548\uc0dd\uae30\ub294 \uacbd\uc6b0\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc74c.\n# \uc544\ub798 \ucf54\ub4dc\ub294 \uadf8\ub7f4 \uacbd\uc6b0\uc5d0 \uc0dd\uae30\ub294 \uce7c\ub7fc\uc744 \uc218\ub3d9\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc8fc\ub294 \ub0b4\uc6a9\uc784\nexclude_col = set(X.columns) - set(test_df.columns)\n# print(exclude_col) #model_ M6\nfor col in exclude_col:\n    test_df[col] = 0\n#\uc5ec\ub7ec\uac1c\uc77c \uacbd\uc6b0\n# for col in exclude_col:\n#     test_df[col] = 0\n\n# \uceec\ub7fc \uc21c\uc11c\ub97c \ub9de\ucdb0\uc57c \ubaa8\ub378\uc774 \uc81c\ub300\ub85c \uc801\uc6a9\ub428.\n# [\uc138\ubd80 \ub0b4\uc6a9]\n# \ud559\uc2b5 \uceec\ub7fc\uc21c\uc11c\uac00 [A,B,C]\uc774\uace0 \ud6c8\ub828 \uceec\ub7fc\uc21c\uc11c\uac00 [A,C,B]\ub77c\uba74\n# y_train_pred = a1* A + a2 * B + a3 C +d y_test_pred = a1 A + a2 * C + a3 *B +d\n# \ub85c \uc21c\uc11c\uac00 \ubc14\ub00c\uc5b4 \uacb0\uacfc\uac00 \ub2ec\ub77c\uc9d1\ub2c8\ub2e4.\n\nX_test_dum = test_df[X.columns]\nprint(test_df)\nprint(X_test_dum)\n\nsubmission = pd.DataFrame({'carID': submission_index, 'price': model.predict(X_test_dum)})\nprint(submission)\nsubmission.to_csv('submission.csv', index=False)","486367ce":"true_df = pd.read_csv('\/kaggle\/input\/used-car-price-dataset-competition-format\/test_label\/y_test.csv')\nprint(true_df)\ntrue_label = true_df['price']\nguess_label = submission['price']\ntest_r2score = r2_score(true_label, guess_label)\nprint(\"test_r2 score: {0:.4f}\".format(test_r2score))","0058929e":"\/kaggle\/input\/used-car-price-dataset-competition-format\/X_test.csv\n\n\/kaggle\/input\/used-car-price-dataset-competition-format\/y_train.csv\n\n\/kaggle\/input\/used-car-price-dataset-competition-format\/X_train.csv\n\n\/kaggle\/input\/used-car-price-dataset-competition-format\/test_label\/y_test.csv"}}