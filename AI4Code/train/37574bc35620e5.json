{"cell_type":{"877491b6":"code","d56d9c89":"code","25615572":"code","1065607e":"code","4de4fc9b":"code","ce08ed87":"code","5187b282":"code","0f77ab3c":"code","b0dcd86f":"code","a1ea9449":"code","bc85b8c6":"code","49c6e436":"code","c27713d8":"code","b23da6c0":"code","9fc3a3c7":"code","20816939":"code","3ccedc7d":"code","ab253422":"code","4502f8df":"markdown","ca0968b4":"markdown","63a47080":"markdown","82b1a199":"markdown","c64e6685":"markdown","d42744f2":"markdown","c0d6d293":"markdown","9a3a85d1":"markdown","917fe383":"markdown","a1b9f1ea":"markdown","05f91352":"markdown","e9da0851":"markdown","f6b3a15c":"markdown"},"source":{"877491b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d56d9c89":"reviews = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data_first150k.csv\", index_col=0)\nreviews.head()","25615572":"reviews[reviews['price'] < 100].sample(100).plot.scatter(x='price', y='points')","1065607e":"reviews[reviews['price'] < 100].plot.scatter(x='price', y='points')","4de4fc9b":"reviews[reviews['price'] < 100].plot.hexbin(x='price', y='points', gridsize=15)","ce08ed87":"wine_counts = pd.read_csv(\"..\/input\/most-common-wine-scores\/top-five-wine-score-counts.csv\", index_col=0) \n##This counts # of times each of the possible review scores were recieved by \n#the 5 most commonly reviewed types of wines","5187b282":"wine_counts.head()","0f77ab3c":"wine_counts.plot.bar(stacked=True)","b0dcd86f":"wine_counts.plot.area()","a1ea9449":"wine_counts.plot.line()","bc85b8c6":"pokemon = pd.read_csv(\"..\/input\/pokemon\/Pokemon.csv\", index_col=0)\npokemon.head()","49c6e436":"pokemon.info()","c27713d8":"pokemon[pokemon['Attack'] < 200].plot.scatter(x='Attack',y='Defense')","b23da6c0":"pokemon.plot.hexbin(x='Attack',y='Defense',gridsize=20)","9fc3a3c7":"#SWITCH UP THE DATA\npokemon_stats_legendary = pokemon.groupby(['Legendary','Generation']).mean()[['Attack','Defense']]","20816939":"pokemon_stats_legendary.plot.bar(stacked=True)","3ccedc7d":"#Switch up the data again\npokemon_stats_by_generation = pokemon.groupby('Generation').mean()[['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed']]","ab253422":"pokemon_stats_by_generation.plot.line()","4502f8df":"Time to replicate some plots","ca0968b4":"# Hexplot\n\na hexplot will help us solve this problem by aggregating points into space into hexagons.","63a47080":" # Hexbin Plot","82b1a199":"Multivariate area charts are for nominal categorical or interval variables","c64e6685":"# Exercises","d42744f2":"# Scatter Plot\n\nThe scatter plot will be able to map each variable to a point in 2D space","c0d6d293":"# Stacked Plots\nThis plots variables on top of each other.","9a3a85d1":"For multivarable plots you need 1 categorical variable in the columns,  1 categorical variable in rows and counts at their intersections in the entries. They work great for nominal categorical or small ordinal categorical variables","917fe383":"# Bivariate Line Chart","a1b9f1ea":"Below is an example of when we have overrplotted points.","05f91352":"# Scatter Plot","e9da0851":"# Stacked Plot","f6b3a15c":"# Bivariate Line Chart"}}