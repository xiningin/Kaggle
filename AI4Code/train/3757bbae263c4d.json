{"cell_type":{"8069c971":"code","743070d4":"code","e59f3bd5":"code","248a9b9c":"code","eb9d1cbb":"code","3a7a476c":"code","59df09e8":"code","4ab9d633":"code","832859f0":"code","1580780e":"code","4b78818e":"code","cd5fd267":"code","37c33305":"code","4acddbcf":"code","06a31549":"code","c99d8bdb":"code","b02a3786":"code","ca6ed02e":"code","c5ebbf11":"code","8bd9a7db":"code","2f966917":"code","ad655abe":"code","2a590dd7":"code","c9047eee":"code","ede3c312":"code","ebf46e86":"code","1c342d53":"code","feb28369":"code","52e3f976":"code","7b999075":"code","97e4aa24":"code","25bf75b5":"code","7900700b":"code","fe6c8cab":"markdown","3c97c1a2":"markdown","ba7e702c":"markdown","e0344c99":"markdown","f0490a48":"markdown","bfd46360":"markdown","9eec1c2c":"markdown","907a303f":"markdown","1850a572":"markdown","34eeca92":"markdown"},"source":{"8069c971":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom fbprophet import Prophet\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","743070d4":"confirmed_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\ndeaths_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\nrecovered_df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')\n\ndf = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv',parse_dates=['Last Update'])\ndf.rename(columns={'ObservationDate':'Date', 'Country\/Region':'Country'}, inplace=True)\n\nconfirmed_df.rename(columns={'Country\/Region':'Country'}, inplace=True)\ndeaths_df.rename(columns={'Country\/Region':'Country'}, inplace=True)\nrecovered_df.rename(columns={'Country\/Region':'Country'}, inplace=True)","e59f3bd5":"df.tail()","248a9b9c":"df2 = df.groupby([\"Date\", \"Country\", \"Province\/State\"])[['SNo', 'Date', 'Province\/State', 'Country', 'Confirmed', 'Deaths', 'Recovered']].sum().reset_index()","eb9d1cbb":"df2[\"Active\"] = df2['Confirmed']-df2['Deaths']-df2['Recovered']\ndf[\"Active\"] = df['Confirmed']-df['Deaths']-df['Recovered']\ndf2","3a7a476c":"df.groupby(\"Last Update\")[['Confirmed', 'Deaths', 'Recovered','Active']].sum().reset_index()","59df09e8":"df.groupby(\"Country\")[['Confirmed', 'Deaths', 'Recovered','Active']].sum().reset_index()","4ab9d633":"df.groupby('Date').sum()","832859f0":"confirmed = df2.groupby(['Date', 'Country','Province\/State']).sum()[['Confirmed']].reset_index()\ndeaths = df2.groupby(['Date', 'Country','Province\/State']).sum()[['Deaths']].reset_index()\nrecovered = df2.groupby(['Date', 'Country','Province\/State']).sum()[['Recovered']].reset_index()\nactive = df2.groupby(['Date', 'Country','Province\/State']).sum()[['Active']].reset_index()","1580780e":"confirmed","4b78818e":"latest_date = confirmed['Date'].max()\nlatest_date","cd5fd267":"confirmed = confirmed[(confirmed['Date']==latest_date)][['Country', 'Confirmed']]\ndeaths = deaths[(deaths['Date']==latest_date)][['Country', 'Deaths']]\nrecovered = recovered[(recovered['Date']==latest_date)][['Country', 'Recovered']]\nactive = active[(active['Date']==latest_date)][['Country', 'Active']]","37c33305":"# add .query('Country==\"Canada\"') to create new dataframes containing only Canadian data. Can be changed to other countries if desired.\n\nconfirmed = df.query('Country==\"Canada\"').groupby('Date').sum()['Confirmed'].reset_index()\ndeaths = df.query('Country==\"Canada\"').groupby('Date').sum()['Deaths'].reset_index()\nrecovered = df.query('Country==\"Canada\"').groupby('Date').sum()['Recovered'].reset_index()\nactive = df.query('Country==\"Canada\"').groupby('Date').sum()['Active'].reset_index()      ","4acddbcf":"confirmed.columns = ['ds','y']\nconfirmed['ds'] = pd.to_datetime(confirmed['ds'])","06a31549":"m = Prophet(mcmc_samples = 100, seasonality_mode = 'additive', changepoint_prior_scale=1, interval_width=0.95)\nm.fit(confirmed, control={'max_treedepth': 20})\nfuture = m.make_future_dataframe(periods=14)\nfuture_confirmed = future.copy() # for non-baseline predictions later on\nfuture.tail()","c99d8bdb":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","b02a3786":"confirmed_forecast_plot = m.plot(forecast, xlabel = 'date', ylabel = 'COVID-19 Confirmed Cases in Canada')","ca6ed02e":"fig1 = m.plot_components(forecast)","c5ebbf11":"recovered.columns = ['ds','y']\nrecovered['ds'] = pd.to_datetime(recovered['ds'])","8bd9a7db":"m = Prophet(mcmc_samples = 100, seasonality_mode = 'additive', changepoint_prior_scale=1,interval_width=0.95)\nm.fit(recovered, control={'max_treedepth': 20})\nfuture = m.make_future_dataframe(periods=14)\nfuture_recovered = future.copy() # for non-baseline predictions later on\nfuture.tail()","2f966917":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","ad655abe":"recovered_forecast_plot = m.plot(forecast, xlabel = 'Date', ylabel = 'COVID-19 Recovered Cases in Canada')","2a590dd7":"fig2 = m.plot_components(forecast)","c9047eee":"deaths.columns = ['ds','y']\ndeaths['ds'] = pd.to_datetime(deaths['ds'])","ede3c312":"m = Prophet(mcmc_samples = 100, seasonality_mode = 'additive', changepoint_prior_scale=1, interval_width=0.95)\nm.fit(deaths, control={'max_treedepth': 20})\nfuture = m.make_future_dataframe(periods=14)\nfuture_deaths = future.copy() # for non-baseline predictions later on\nfuture.tail()","ebf46e86":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","1c342d53":"deaths_forecast_plot = m.plot(forecast, xlabel='Date', ylabel='COVID-19 Deaths in Canada')","feb28369":"fig3 = m.plot_components(forecast)","52e3f976":"active.columns = ['ds','y']\nactive['ds'] = pd.to_datetime(active['ds'])\nactive['floor'] = 0","7b999075":"m = Prophet(mcmc_samples = 100, seasonality_mode = 'additive', changepoint_prior_scale=1, interval_width=0.99)\nm.fit(active, control={'max_treedepth': 100})\nfuture = m.make_future_dataframe(periods=30)\nfuture_active = future.copy() # for non-baseline predictions later on\nfuture.tail()","97e4aa24":"forecast = m.predict(future)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","25bf75b5":"active_forecast_plot = m.plot(forecast, xlabel = 'Date', ylabel = 'COVID-19 Active Cases in Canada')","7900700b":"fig4 = m.plot_components(forecast)","fe6c8cab":"Display the trend components of the forecast","3c97c1a2":"Fit the model on confirmed cases, and display the projection for the next 7 days with a confidence interval of 95%","ba7e702c":"Fit the model on deaths occuring from COVID-19, and display the projection for the next 7 days with a confidence interval of 95%","e0344c99":"Fit the model on recovered cases, and display the projection for the next 7 days with a confidence interval of 95%","f0490a48":"Import the datasets","bfd46360":"Display the trend components of forecast","9eec1c2c":"Display the trend components of the forecast","907a303f":"Display most recent date in the dataset","1850a572":"Fit the model on active cases, and display the projection for the next 7 days with a confidence interval of 95%","34eeca92":"Display the trend components of the forecast"}}