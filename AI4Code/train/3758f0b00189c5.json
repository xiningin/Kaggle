{"cell_type":{"74c0388b":"code","1423e9c5":"code","fb26cf88":"code","85913f4b":"code","d238b3b5":"code","c0fdb556":"code","691e760f":"code","bd9be400":"code","06532dd3":"code","76216cd9":"code","6643ea1a":"code","5e16c140":"code","57075715":"markdown","2c941dd6":"markdown","32cfcea1":"markdown","26fbba0a":"markdown","a67dfcee":"markdown","fb8adc0d":"markdown","e9528fdd":"markdown"},"source":{"74c0388b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n# For ordinal encoding categorical variables, splitting data\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.model_selection import train_test_split\n\n# For training XtraGradientBosst model\nfrom xgboost import XGBRegressor \nfrom sklearn.metrics import mean_squared_error","1423e9c5":"# Load the training data\ndf_train = pd.read_csv(\"..\/input\/30-days-of-ml\/train.csv\",index_col=0  ) #Train DataFrame\ndf_test = pd.read_csv(\"..\/input\/30-days-of-ml\/test.csv\", index_col=0)  # Test DataFrame\n\n# Preview the data \n# preivew upper few rows\ndf_train.head()","fb26cf88":"y= df_train['target']\nfeatures= df_train.drop(['target'], axis=1)\nfeatures.head","85913f4b":"columns = df_train.columns\ncolumns","d238b3b5":"# 5 point summary \n\ndf_train.describe()","c0fdb556":"df_train.tail()\n","691e760f":"df_test.shape\n","bd9be400":"plt.style.use('seaborn')\nplt.figure(figsize=(20,10))\naxis=sns.histplot(x='target', data= df_train , bins=50)\naxis.set_title('histogram plot of target value', fontsize=18)\nplt.show()","06532dd3":"# List of categorical columns\ncategorical_columns = [col for col in columns if 'cat' in col]\nnumerical_columns=[col for col in columns if 'count' in col]\n# ordinal-encode categorical columns\nX = features.copy()\nX_test = df_test.copy()\nordinal_encoder = OrdinalEncoder()\nX[categorical_columns] = ordinal_encoder.fit_transform(features[categorical_columns])\nX_test[categorical_columns] = ordinal_encoder.transform(df_test[categorical_columns])\n\n# Preview the ordinal-encoded features\nX.head()","76216cd9":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, random_state=10)\n","6643ea1a":"# Define the model \nmodel = XGBRegressor(random_state=10)\n\n# Train the model (will take about 10 minutes to run)\nmodel.fit(X_train, y_train)\npreds_valid = model.predict(X_valid)\nprint(mean_squared_error(y_valid, preds_valid, squared=False))","5e16c140":"# Use the model to generate predictions\npredictions = model.predict(X_test)\n\n# Save the predictions to a CSV file\noutput = pd.DataFrame({'Id': X_test.index,\n                       'target': predictions})\noutput.to_csv('submission.csv', index=False)","57075715":"Step 3: Prepare the data\nhandling the categorical columns (cat0, cat1, ... cat9).\n\n","2c941dd6":"In the code cell above, we set squared=False to get the root mean squared error (RMSE) on the validation data.\n\nStep 5: Submit to the competition\n\nWe'll begin by using the trained model to generate predictions, which we'll save to a CSV file.","32cfcea1":"Step 2: Load the data\nloading the training and test data. pandas library is used to load data\n\nindex_col=0 in the code cell below to use the id column to index the DataFrame.","26fbba0a":"Next, we break off a validation set from the training data","a67dfcee":"histogram plot of target value\n\n","fb8adc0d":"Step 4: Train a model\nNow that the data is prepared, the next step is to train a model.","e9528fdd":"preview last 5 rows\n\n"}}