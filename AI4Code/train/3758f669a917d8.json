{"cell_type":{"42e9f8ff":"code","f1250b7f":"code","f067f029":"code","964ee359":"code","95f99c7d":"code","b4f5f87b":"code","f3e7995e":"code","f0fc10be":"code","acf9e8a1":"code","64c09060":"code","e3f14ceb":"code","6c10a5f5":"code","e08faafb":"code","8bd10be3":"code","28a01cfe":"code","4d570783":"code","d7ca2a3c":"code","cfb02477":"code","a99deb82":"code","a2e7ab51":"code","d421dbcf":"code","66674eca":"code","f1d59c0a":"code","2b60c838":"code","a8b7a510":"code","86fab96c":"code","d2a61e3e":"markdown","38cc1057":"markdown","fae2df9f":"markdown","ada5ca9f":"markdown","abd2c4db":"markdown","dfefd28e":"markdown"},"source":{"42e9f8ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f1250b7f":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures\n%matplotlib inline","f067f029":"#Reading Data from file\nfilename = '\/kaggle\/input\/real-estate-price-prediction\/Real estate.csv'\ndf_realestate = pd.read_csv(filename) ","964ee359":"#Data summary\ndf_realestate.shape","95f99c7d":"df_realestate.info()","b4f5f87b":"df_realestate.head()","f3e7995e":"#Data Cleaning\n#We can drop 'No' column as we have index column\n#we can change column names\ndf_realestate.drop(['No'],inplace = True , axis=1)\n","f0fc10be":"#Rename\ndf_realestate.rename(columns = {\n                                'X1 transaction date': 'Date',\n                                'X2 house age' : 'House_age',\n                                'X3 distance to the nearest MRT station' : 'MRT_distance',\n                                'X4 number of convenience stores' : 'Conv_store_count',\n                                'X5 latitude' : 'Latitude',\n                                'X6 longitude' : 'Longitude',\n                                'Y house price of unit area' : 'Price_per_unit'\n}, inplace = True)","acf9e8a1":"df_realestate.head()","64c09060":"#Date needs to be cleaned lets separate year\ndf_realestate['Year'] = df_realestate['Date'].astype(str).apply(lambda x: x[:4])\ndf_realestate['Year'].astype(int)","e3f14ceb":"df_realestate.describe()","6c10a5f5":"df_realestate.corrwith(df_realestate['Price_per_unit'])","e08faafb":"df_realestate['Year'].nunique()","8bd10be3":"#we can see the distribution by price \nsns.catplot(x = 'Year' , y = 'Price_per_unit' , data =df_realestate)","28a01cfe":"sns.boxplot(x = 'Year' , y = 'Price_per_unit' , data =df_realestate)","4d570783":"df_realestate.columns","d7ca2a3c":"#Modelling\nX = df_realestate.drop(['Date','Year','Price_per_unit'],axis = 1)\nY = df_realestate['Price_per_unit']","cfb02477":"X_train , X_test ,Y_train , Y_test = train_test_split(X,Y,test_size =0.2 , random_state = 42)","a99deb82":"LM = LinearRegression()\nLM.fit(X_train,Y_train)\nLM.score(X_test ,Y_test)","a2e7ab51":"Y_predict = LM.predict(X)","d421dbcf":"df_realestate['Predicted_price_per_unit'] =  LM.predict(X)","66674eca":"df_realestate.head()","f1d59c0a":"#Using Polynomial features\npf = PolynomialFeatures(degree=2)\nX_poly = pf.fit_transform(X)\nX_poly_train , X_poly_test ,Y_poly_train , Y_poly_test = train_test_split(X_poly,Y,test_size =0.2 , random_state = 42)\nLM_poly = LinearRegression()\nLM_poly.fit(X_poly_train,Y_poly_train)\nLM_poly.score(X_poly_test ,Y_poly_test)","2b60c838":"polynomial_degree1 = range(2,10)\nscore = []\nfor i in polynomial_degree1:\n    X1 = df_realestate.drop(['Date','Year','Price_per_unit'],axis = 1)\n    Y1 = df_realestate['Price_per_unit']\n    pf1 = PolynomialFeatures(degree=i)\n    X1_poly = pf1.fit_transform(X1)\n    X1_poly_train , X1_poly_test ,Y1_poly_train , Y1_poly_test = train_test_split(X1_poly,Y1,test_size =0.2 , random_state = 42)\n    LM1_poly = LinearRegression()\n    LM1_poly.fit(X1_poly_train,Y1_poly_train)\n    print(LM1_poly.score(X1_poly_test ,Y1_poly_test))","a8b7a510":"Since values are going negative degree 2 polynomial is a better fit so far.","86fab96c":"df_realestate['Predicted_polynomial_price_per_unit'] =  LM_poly.predict(X_poly)\ndf_realestate","d2a61e3e":"We used basic linear regression for training the model with using 20% as test data .Score is 0.67\nNext version will try polynomial features and get a better score.","38cc1057":"We can see we got a better score for polynomial regression with degree 2.\nLets try for degree 2-10 and see the score values.","fae2df9f":"Polynomial regression with degree two gives a better score.","ada5ca9f":"There is not much difference in years.","abd2c4db":"No null values in dataset","dfefd28e":"Rows - 414\nColumns - 8"}}