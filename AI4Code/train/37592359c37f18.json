{"cell_type":{"1991de58":"code","8caefe7f":"code","5152fa33":"code","28c87784":"code","2465bad7":"code","f7572a59":"code","631d7b4b":"code","316ebbc5":"code","46253b81":"code","f96bbf47":"code","374fb18c":"code","c40659b7":"code","812a1362":"code","b8d79f1c":"code","c33d6d2e":"code","4e0e819a":"code","0a7258d7":"code","a91fda39":"code","6c85669c":"code","159e50e8":"code","e37ffa55":"code","b8543c85":"code","6d236349":"code","904624e1":"code","1b6fdbe1":"code","4daa5a1b":"code","69704e7b":"code","115ed192":"code","f1212ee8":"code","9988bf1e":"code","7e41b7a4":"code","5bba56ec":"code","e4cc44c5":"code","74838443":"code","785299a4":"code","937ec9ab":"code","c740b3a3":"code","e18db820":"code","522ee8ee":"code","44081234":"code","7342103b":"code","b7c80feb":"code","8bc5845a":"code","34e90df5":"code","80dd46e3":"code","4a5da586":"code","efd88b8d":"code","b982cafb":"code","d5667276":"code","ebaac5da":"code","ad63082f":"code","a7d3da02":"code","5af7a9de":"code","889f6d9d":"code","dd68f9ad":"code","204c9768":"code","3feab7ff":"code","e566187c":"code","090d1e8f":"code","3927e3d5":"code","063485cf":"code","27a51cab":"code","4fe0d9b3":"code","e97cc09d":"code","b4afb522":"code","953cb5df":"code","fbb24da4":"code","4b03e9ca":"code","0f59eb24":"code","814a808b":"code","944ad262":"code","f72ee67c":"code","61d8efc5":"code","c9501b1f":"code","d84f3b94":"code","e9e5f7a5":"code","6fe8aa1a":"code","ab7f5e97":"code","31c9c0d6":"code","d51abd7b":"code","3f808a0e":"code","f8030570":"code","68902fd8":"code","80b7264a":"code","15cc1688":"code","f591717c":"code","ca268fca":"code","63458c50":"markdown"},"source":{"1991de58":"import pandas as pd\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n","8caefe7f":"test.head()\n","5152fa33":"train.head(10)\n","28c87784":"train.shape\n","2465bad7":"test.shape\n","f7572a59":"train.info()\n","631d7b4b":"test.info()\n","316ebbc5":"train.isnull().sum()\n","46253b81":"test.isnull().sum()\n","f96bbf47":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set() # setting seaborn default for plots","374fb18c":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","c40659b7":"bar_chart('Sex')\n","812a1362":"bar_chart('Pclass')\n","b8d79f1c":"bar_chart('SibSp')\n","c33d6d2e":"bar_chart('Parch')\n","4e0e819a":"bar_chart('Embarked')\n","0a7258d7":"train.head()\n","a91fda39":"train_test_data = [train, test] # combining train and test dataset\n\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)","6c85669c":"train['Title'].value_counts()\n","159e50e8":"test['Title'].value_counts()\n","e37ffa55":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","b8543c85":"train.head()\n","6d236349":"test.head()\n","904624e1":"bar_chart('Title')\n","1b6fdbe1":"train.drop('Name', axis=1, inplace=True)\ntest.drop('Name', axis=1, inplace=True)\n","4daa5a1b":"train.head()\n","69704e7b":"test.head()\n","115ed192":"sex_mapping = {\"male\": 0, \"female\": 1}\nfor dataset in train_test_data:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","f1212ee8":"bar_chart('Sex')\n","9988bf1e":"train[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","7e41b7a4":"train.head(30)\ntrain.groupby(\"Title\")[\"Age\"].transform(\"median\")","5bba56ec":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\n \nplt.show()\n","e4cc44c5":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","74838443":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(20, 30)","785299a4":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(30, 40)","937ec9ab":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","c740b3a3":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","e18db820":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Age',shade= True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40, 60)","522ee8ee":"train.info()\n","44081234":"test.info()\n","7342103b":"for dataset in train_test_data:\n    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[ dataset['Age'] > 62, 'Age'] = 4","b7c80feb":"train.head()\n","8bc5845a":"bar_chart('Age')\n","34e90df5":"Pclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","80dd46e3":"for dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","4a5da586":"train.head()\n","efd88b8d":"embarked_mapping = {\"S\": 0, \"C\": 1, \"Q\": 2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)\n","b982cafb":"train[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntrain.head(50)","d5667276":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\n \nplt.show()","ebaac5da":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 20)","ad63082f":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0, 30)","a7d3da02":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Fare',shade= True)\nfacet.set(xlim=(0, train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0)","5af7a9de":"for dataset in train_test_data:\n    dataset.loc[ dataset['Fare'] <= 17, 'Fare'] = 0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare'] = 1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare'] = 2,\n    dataset.loc[ dataset['Fare'] > 100, 'Fare'] = 3","889f6d9d":"train.head()\n","dd68f9ad":"train.Cabin.value_counts()\n","204c9768":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","3feab7ff":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","e566187c":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","090d1e8f":"train[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\n","3927e3d5":"train[\"FamilySize\"] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest[\"FamilySize\"] = test[\"SibSp\"] + test[\"Parch\"] + 1","063485cf":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'FamilySize',shade= True)\nfacet.set(xlim=(0, train['FamilySize'].max()))\nfacet.add_legend()\nplt.xlim(0)","27a51cab":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['FamilySize'] = dataset['FamilySize'].map(family_mapping)","4fe0d9b3":"train.head()\n","e97cc09d":"train.head()\n","b4afb522":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","953cb5df":"train_data = train.drop('Survived', axis=1)\ntarget = train['Survived']\n\ntrain_data.shape, target.shape","fbb24da4":"train_data.head(10)\n","4b03e9ca":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\nimport numpy as np","0f59eb24":"train.info()\n","814a808b":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","944ad262":"clf = KNeighborsClassifier(n_neighbors = 13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","f72ee67c":"round(np.mean(score)*100, 2)","61d8efc5":"clf = DecisionTreeClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","c9501b1f":"round(np.mean(score)*100, 2)\n","d84f3b94":"clf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","e9e5f7a5":"round(np.mean(score)*100, 2)","6fe8aa1a":"clf = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","ab7f5e97":"round(np.mean(score)*100, 2)","31c9c0d6":"clf = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","d51abd7b":"round(np.mean(score)*100,2)\n","3f808a0e":"import xgboost as xgb","f8030570":"clf = xgb.XGBClassifier(max_depth=3, n_estimators=5000, learning_rate=0.2,\n                            n_jobs=-1)","68902fd8":"clf = xgb.XGBClassifier()\nscoring = 'accuracy'\nscore = cross_val_score(clf, train_data, target, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","80b7264a":"round(np.mean(score)*100,2)\n\n","15cc1688":"clf = SVC()\nclf.fit(train_data, target)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","f591717c":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","ca268fca":"submission = pd.read_csv('submission.csv')\nsubmission.head()","63458c50":"import xgboost as xgb"}}