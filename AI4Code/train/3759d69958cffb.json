{"cell_type":{"f225dd8b":"code","68e6203b":"code","b3443f88":"code","51184930":"code","e9c345ed":"code","ad4f1aac":"code","0db035d8":"code","9169a89d":"code","f69e9950":"code","3f311154":"code","918f1f63":"code","b8a8bb93":"code","eee0b682":"code","522330aa":"code","7237451c":"code","790e6c18":"code","8b88f3bc":"code","5d2c6879":"code","683e541d":"code","0b3a7ec0":"code","357bc542":"code","73374c7a":"code","a5c046c1":"code","a39392f6":"code","aabc71cf":"code","8275da8e":"code","0e9b623e":"markdown","72750fe7":"markdown","42184810":"markdown","241d6102":"markdown","48d91a97":"markdown","6a0b8eaa":"markdown","ea532aa4":"markdown","33008120":"markdown","9aac7946":"markdown","928c2ba5":"markdown","f4b4360e":"markdown","f6834f10":"markdown","2a7b4b13":"markdown","982d468a":"markdown","1b7f3619":"markdown"},"source":{"f225dd8b":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import integrate, optimize\nfrom sklearn.linear_model import LinearRegression","68e6203b":"ca_train = pd.read_csv('..\/input\/covid19-local-us-ca-forecasting-week-1\/ca_train.csv')\nca_test = pd.read_csv('..\/input\/covid19-local-us-ca-forecasting-week-1\/ca_test.csv')\nca_submission = pd.read_csv('..\/input\/covid19-local-us-ca-forecasting-week-1\/ca_submission.csv')\n\ntrain_df = ca_train\ntest_df =  ca_test\nsubmission_df =  ca_submission","b3443f88":"train_df.head()","51184930":"reported = train_df[train_df['Date']>= '2020-03-10'].reset_index()\nreported['day_count'] = list(range(1,len(reported)+1))\nreported.head()","e9c345ed":"ydata = [i for i in reported.ConfirmedCases.values]\nxdata = reported.day_count\nydata = np.array(ydata, dtype=float)\nxdata = np.array(xdata, dtype=float)","ad4f1aac":"N = 36000000 #population of California\ninf0 = ydata[0] #Infectious\nsus0 = N - inf0 #Susceptible\nexp0 = 0.0 #Exposed\nrec0 = 0.0 #Recovered\ninit_state = [sus0, exp0, inf0, rec0]\n#beta = 1.0 #constant.\n#gamma = 1.0 \/ 7.0 #constant.","0db035d8":"# Define differential equation of SEIR model\n\n'''\ndS\/dt = -beta * S * I \/ N\ndE\/dt = beta* S * I \/ N - epsilon * E\ndI\/dt = epsilon * E - gamma * I\ndR\/dt = gamma * I\n\n[v[0], v[1], v[2], v[3]]=[S, E, I, R]\n\ndv[0]\/dt = -beta * v[0] * v[2] \/ N\ndv[1]\/dt = beta * v[0] * v[2] \/ N - epsilon * v[1]\ndv[2]\/dt = epsilon * v[1] - gamma * v[2]\ndv[3]\/dt = gamma * v[2]\n\n'''\n\ndef seir_model(v, x, beta, epsilon, gamma, N):\n    return [-beta * v[0] * v[2] \/ N ,beta * v[0] * v[2] \/ N - epsilon * v[1],\n            epsilon * v[1] - gamma * v[2],gamma * v[2]]\n\ndef fit_odeint(x, beta, epsilon, gamma):\n    return integrate.odeint(seir_model, init_state, x, args=(beta, epsilon, gamma, N))[:,2]","9169a89d":"popt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\nfitted = fit_odeint(xdata, *popt)","f69e9950":"print(\"Optimal parameters: beta = \", popt[0], \"epsilon = \", popt[1], \", gamma = \", popt[2])","3f311154":"N = 36000000 #population of California\ninf0 = ydata[0] #Infectious\nsus0 = N - inf0 #Susceptible\nexp0 = 0.0 #Exposed\nrec0 = 0.0 #Recovered\ninit_state = [sus0, exp0, inf0, rec0]\nbeta = 1.0 #constant.\n#gamma = 1.0 \/ 7.0 #constant.","918f1f63":"# Define differential equation of SEIR model\ndef seir_model(v, x, beta, epsilon, gamma, N):\n    return [-beta * v[0] * v[2] \/ N ,beta * v[0] * v[2] \/ N - epsilon * v[1],\n            epsilon * v[1] - gamma * v[2],gamma * v[2]]\n\ndef fit_odeint(x, epsilon, gamma):\n    return integrate.odeint(seir_model, init_state, x, args=(beta, epsilon, gamma, N))[:,2]","b8a8bb93":"popt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\nfitted = fit_odeint(xdata, *popt)","eee0b682":"print(\"Optimal parameters: epsilon = \", popt[0], \", gamma = \", popt[1])","522330aa":"N = 36000000 #population of California\ninf0 = ydata[0] #Infectious\nsus0 = N - inf0 #Susceptible\nexp0 = 0.0 #Exposed\nrec0 = 0.0 #Recovered\ninit_state = [sus0, exp0, inf0, rec0]\nbeta = 1.0 #constant.\ngamma = 1.0 \/ 7.0 #constant.","7237451c":"# Define differential equation of SEIR model\ndef seir_model(v, x, beta, epsilon, gamma, N):\n    return [-beta * v[0] * v[2] \/ N ,beta * v[0] * v[2] \/ N - epsilon * v[1],\n            epsilon * v[1] - gamma * v[2],gamma * v[2]]\n\ndef fit_odeint(x, epsilon):\n    return integrate.odeint(seir_model, init_state, x, args=(beta, epsilon, gamma, N))[:,2]","790e6c18":"popt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\nfitted = fit_odeint(xdata, *popt)","8b88f3bc":"inf_period = 1.0\/gamma\nlat_period = 1.0\/popt[0]\nprint(\"Optimal parameters: gamma =\", gamma, \", epsilon = \", popt[0], \"\\ninfectious period(day) = \", inf_period, \", latency period(day) = \", lat_period)","5d2c6879":"plt.plot(xdata, ydata, 'o')\nplt.plot(xdata, fitted)\nplt.title(\"Fit of SEIR model to global infected cases\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()","683e541d":"# parameters\nt_max = 100 #days\ndt = 1\n\nN = 36000000 #population of California\ninf0 = ydata[0] #Infectious\nsus0 = N - inf0 #Susceptible\nexp0 = 0.0 #Exposed\nrec0 = 0.0 #Recovered\ninit_state = [sus0, exp0, inf0, rec0]\nbeta_const = 1.0 #Assumption: Infection rate is constant.\nepsilon_const = popt[0]\ngamma_const = 1.0 \/ 7.0 #Assumption: Recovery rate is constant.","0b3a7ec0":"# numerical integration\ntimes = np.arange(0, t_max, dt)\nargs = (beta_const, epsilon_const, gamma_const, N)\n\n# Numerical Solution using scipy.integrate\n# Solver SEIR model\nresult = integrate.odeint(seir_model, init_state, times, args)\n# plot\nplt.plot(times, result)\nplt.legend(['Susceptible', 'Exposed', 'Infectious', 'Removed'])\nplt.title(\"SEIR model  COVID-19\")\nplt.xlabel('time(days)')\nplt.ylabel('population')\nplt.grid()\n\nplt.show()","357bc542":"result_df = pd.DataFrame(data=result, columns=['Susceptible', 'Exposed', 'Infectious', 'Removed'])\nresult_df.shape","73374c7a":"lr = LinearRegression()\nX_train = reported[['ConfirmedCases']].values\nY_train = reported[['Fatalities']].values\nlr.fit(X_train, Y_train)\nprint('coefficient = ', lr.coef_[0], '(which means Fatality rate)')\nprint('intercept = ', lr.intercept_)","a5c046c1":"X_pred = result_df[['Infectious']].values\nY_pred = lr.predict(X_pred)\nplt.scatter(X_train, Y_train, c='blue')\nplt.plot(X_pred, Y_pred, c='red')\nplt.title(\"Regression Line\")\nplt.xlabel('ConfirmedCases')\nplt.ylabel('Fatalities')\nplt.grid()\n\nplt.xlim([100,800])\nplt.ylim([0,20])\n\nplt.show()","a39392f6":"Y_pred_df = pd.DataFrame(Y_pred)\nresult_df['Fatalities'] = Y_pred_df\nresult_df.head()","aabc71cf":"submission = result_df[0:len(submission_df)].reset_index()\nsubmission_df['ConfirmedCases'] = submission['Infectious']\nsubmission_df['Fatalities'] = submission['Fatalities']\nsubmission_df.head()","8275da8e":"submission_df.to_csv(\"submission.csv\", index=False)","0e9b623e":"#case 3(Possible)\n\nFree parameter: $\\varepsilon$\n\nWe assume that $\\beta=1,~\\gamma=1\/7~(i_p=7)$ according to previous study ( https:\/\/arxiv.org\/abs\/2002.06563 ).","72750fe7":"Here, $S,E,I,R$ mean the number of Susceptible, Exposed, Infectious and Recovered, respectively. \n\n$\\beta$ is the infectious rate($0\\leq\\beta\\leq1$), $\\varepsilon$ is the rate at which an exposed person becomes infective and $\\gamma$ is the recovery rate. \n\n$\\varepsilon$ and $\\gamma$ have relationships with $l_p$(latency period) and $i_p$(infectious period):","42184810":"#Further study\n\nAssumption that there is some intervention that causes the reproduction number (R_0) to fall to a lower value (R_t) at a certain time (e.g. physical distancing).\n\nThis kernel will be helpful for that: https:\/\/www.kaggle.com\/anjum48\/seir-model-with-intervention#Model-with-intervention","241d6102":"#Numerical Integration\n\nWe fixed all parameters for SEIR models. Next step is numerical integration.","48d91a97":"#Objective\n\nThis notebook shows a simulation example of a [SEIR](https:\/\/en.wikipedia.org\/wiki\/Compartmental_models_in_epidemiology#The_SEIR_model) model. \n\nMy work is based on [COVID-19 CA: by simple SEIR\u26bd\ufe0f](https:\/\/www.kaggle.com\/kmatsuyama\/covid-19-ca-by-simple-seir) and many pionners to interpret the dissemination of COVID-19:\n\nhttps:\/\/towardsdatascience.com\/modelling-the-coronavirus-epidemic-spreading-in-a-city-with-python-babd14d82fa2\n\nhttps:\/\/qiita.com\/kotai2003\/items\/ed28fb723a335a873061 (Japanese)\n\nhttps:\/\/arxiv.org\/abs\/2002.06563.\n\nI appreciate them.\n\nWe adopt a optimizer to fit SEIR parameters to real data.\n\nThanks to this kernel for the idea: https:\/\/www.kaggle.com\/saga21\/covid-global-forecast-sir-model","6a0b8eaa":"#SEIR model.\nThe differential equations of SEIR model are following:","ea532aa4":"$$\n    \\frac{d S}{d t} = -\\beta \\frac{SI}{N} \\\\\n    \\frac{d E}{d t} = \\beta \\frac{SI}{N} -\\varepsilon E \\\\\n    \\frac{d I}{d t} = {\\varepsilon}E - \\gamma I \\\\\n    \\frac{d R}{d t} = \\gamma I \\\\\n$$","33008120":"#case 1(Unreasonable)\n\nFree parameters: $\\beta, \\varepsilon, \\gamma$","9aac7946":"In following simulation, we adopt the parameters in Case 3.","928c2ba5":"We try to fit three parameters $\\beta, \\varepsilon, \\gamma$. However in some cases, these parameters is out of reasonable ranges(Case 1 and 2). Finally, we assume that $\\beta, \\gamma$ are constant value and we optimize to $\\varepsilon$(Case 3).","f4b4360e":"#case 2(unreasonable)\n\nFree parameters: $\\varepsilon, \\gamma$\n\nHere we assume $\\beta=1$ according to previous study ( https:\/\/arxiv.org\/abs\/2002.06563 ).","f6834f10":"$$\n    \\varepsilon = \\frac{1}{l_p} \\quad [1\/day]\\\\\n    \\gamma = \\frac{1}{i_p} \\quad [1\/day]\n$$","2a7b4b13":"In this case, $\\varepsilon$ is too big value, which means latency period is too small($\\approx 0.018$ days). It seems like unreal situation.","982d468a":"#Fatalities Estimation\n\nTo evaluate Fatalities, we assume Fatality Rate( `Fatalities`\/`ConfirmedCases`) is constant. This assumption is reasonable because we can use a simple Linear Regression to `ConfirmedCases`-`Fatalities` space.","1b7f3619":"In this case, $\\beta$ and $\\gamma$ has negative values and it is unfeasible."}}