{"cell_type":{"ed56eb0a":"code","7f3c6094":"code","4bb3cbc1":"code","3d09df29":"code","14e1e5e2":"code","624db1fa":"code","eab4205c":"code","7249da60":"code","9cc1ed45":"code","473622b9":"code","1b06fd32":"code","4c51a840":"code","27afda2f":"code","18fc3d60":"code","43b96d2f":"code","b3479db2":"code","e2922f7a":"code","e919f730":"code","fb274d6f":"code","38876380":"code","c171dc8e":"code","a7f0d209":"code","7ad65214":"code","cabe01ec":"code","0350d7c4":"code","56e9dedb":"code","6ab29f47":"code","f9f36af3":"code","8ae836c2":"code","28646106":"code","c9f184fb":"code","07487b5e":"code","9e3907e9":"code","56624d7d":"code","81a8868d":"code","302451ae":"code","68adfa4a":"code","047b08ab":"code","c5281a2d":"code","3a39c8e7":"code","9f19ce9c":"code","7a395ee7":"code","c6f3b90d":"code","6010afe8":"code","662c651c":"code","327fa460":"code","7619a1a0":"code","353f026c":"code","ee549475":"code","f903acb1":"code","29b7028b":"code","f12f3601":"code","680f0dff":"code","a8a7a3b7":"code","a78da954":"code","d77a573f":"code","8b1930cf":"code","ca168deb":"markdown","55b861ff":"markdown","4c363907":"markdown","3cb574ab":"markdown","129bf718":"markdown","0f87cb34":"markdown","a449bd34":"markdown","7895a9e8":"markdown","ccf89825":"markdown","fd39ba63":"markdown","9297f83a":"markdown","73dea636":"markdown","0f06af88":"markdown","3b7c4c2a":"markdown","d7b144fa":"markdown","4d013498":"markdown","b3544bac":"markdown","88ee3c27":"markdown","c4d9618e":"markdown","cdfda962":"markdown","abb28929":"markdown","cadbc4d7":"markdown","61b36979":"markdown","89396f6b":"markdown","122e3cdf":"markdown","f12356fb":"markdown","eb12b408":"markdown","4f7ed594":"markdown","bc400f25":"markdown","db36471a":"markdown","a76a7f31":"markdown","7d2f52d3":"markdown","45d59fa2":"markdown","8bcc0300":"markdown","52d1c391":"markdown"},"source":{"ed56eb0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport ast\nimport operator\nfrom matplotlib import cm\nfrom itertools import cycle, islice\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7f3c6094":"reviews = pd.read_csv('..\/input\/TA_restaurants_curated.csv')","4bb3cbc1":"reviews.head()","3d09df29":"reviews.describe()","14e1e5e2":"reviews.info()","624db1fa":"reviews.columns","eab4205c":"reviews.drop(['Unnamed: 0', 'URL_TA', 'ID_TA', 'Ranking'], axis = 1, inplace=True)","7249da60":"reviews.head()","9cc1ed45":"reviews.count()","473622b9":"reviews['City'].nunique()","1b06fd32":"plt.figure(figsize=(10,7), dpi =100)\nplot = sns.countplot(reviews['City'], order=reviews['City'].value_counts().index)\nplot.set_xticklabels(plot.get_xticklabels(), rotation = 45)\nplt.tight_layout()","4c51a840":"byCity = reviews.groupby('City')\nbyCity['Rating'].mean()","27afda2f":"x = list()\ny = list()\nfor city in list(reviews['City'].unique()):\n    x.append(city)\n    y.append(reviews[reviews['City'] == city]['Rating'].mean())\nfig, ax = plt.subplots(1,1,figsize=(17,7))\nax.bar(x,y,color = 'cyan',edgecolor = 'black')\nax.set_ylim(bottom=3.5)\nax.set_xticklabels(labels = x, rotation = 45)\nax.set_xlabel('City')\nax.set_ylabel('Average Review Rating')","18fc3d60":"x = list()\ny = list()\nfor city in list(reviews['City'].unique()):\n    x.append(city)\n    y.append(reviews[reviews['City'] == city]['Rating'].max())\nfig, ax = plt.subplots(1,1,figsize=(17,7))\nax.bar(x,y,color = 'cyan',edgecolor = 'black')\nax.set_ylim(bottom=3.5)\nax.set_xticklabels(labels = x, rotation = 45)\nax.set_xlabel('City')\nax.set_ylabel('Max Review Rating')","43b96d2f":"### Min Review rating per city","b3479db2":"x = list()\ny = list()\nfor city in list(reviews['City'].unique()):\n    x.append(city)\n    y.append(reviews[reviews['City'] == city]['Rating'].min())\nfig, ax = plt.subplots(1,1,figsize=(17,7))\nax.bar(x,y,color = 'cyan',edgecolor = 'black')\nax.set_xticklabels(labels = x, rotation = 45)\nax.set_xlabel('City')\nax.set_ylabel('Min Review Rating')","e2922f7a":"print('Total negative ratings count : ', len(reviews[reviews['Rating'] < 0]))\nreviews[reviews['Rating'] < 0]","e919f730":"x = list()\ny = list()\ncount = 0\nfor city in list(reviews['City'].unique()):\n    count = len(reviews[(reviews['City'] == city) & (reviews['Rating'] < 0)])\n    if count > 0:\n        y.append(count)\n        x.append(city)\n    count = 0\nfig, ax = plt.subplots(1,1,figsize=(17,7))\nax.bar(x,y,color = 'cyan',edgecolor = 'black')\nax.set_xticklabels(labels = x, rotation = 45)\nax.set_xlabel('City')\nax.set_ylabel('Count of Negative Ratings')","fb274d6f":"city = list(reviews['City'].unique())\nfig, axes = plt.subplots(nrows=7,ncols=5,figsize=(17,20))\ni = 0\nratings = list(reviews['Rating'].unique())\nratingsCount = list()\nfor c in city:\n    reviewsCity = reviews[reviews['City'] == c]\n    plot = sns.countplot(x='Rating', data = reviewsCity, ax=axes.flatten()[i])\n    plot.set_title(c)\n    plot.set_xticklabels(plot.get_xticklabels(), rotation = 45)\n    plt.tight_layout()\n    i = i + 1    ","38876380":"reviews.head(4)","c171dc8e":"reviews.isna().sum()","a7f0d209":"reviewsCity.head()","7ad65214":"fig, axes = plt.subplots(6,2, figsize=(17,15))\ncolumns = ['Cuisine Style', 'Rating', 'Price Range', 'Number of Reviews', 'Reviews']\ni = 0\ny_ax = list()\ny_ax1 = list()\nx_ax = list(reviews['City'].unique())\nfor col in columns:\n    for city in list(reviews['City'].unique()):\n        na = reviews[reviews['City'] == city][col].isna().sum()\n        notna = reviews[reviews['City'] == city][col].notna().sum()\n        y_ax.append(na)\n        y_ax1.append(notna)\n        #print('Percentage of NaN per City per Column : ', (na*100\/(na+notna)), city, col)\n    axes[i][0].bar(x_ax, y_ax)\n    axes[i][1].bar(x_ax, y_ax1)\n    y_ax = list()\n    y_ax1 = list()\n    for k in range(0,2):\n        axes[i][k].set_xticklabels(x_ax, rotation = 90)\n        axes[i][k].set_ylabel(col)\n    plt.tight_layout()\n    i = i+1","cabe01ec":"from mpl_toolkits.basemap import Basemap\nfrom matplotlib.patches import Polygon\nfrom matplotlib.collections import PatchCollection\nfrom matplotlib.colors import Normalize\nimport matplotlib.cm\nfrom numpy import meshgrid","0350d7c4":"##### place = list(reviews['City'].unique())\ndata = {'City': ['Amsterdam', 'Athens', 'Barcelona', 'Berlin', 'Bratislava', 'Brussels', 'Budapest', 'Copenhagen', 'Dublin', 'Edinburgh', 'Geneva', 'Hamburg', 'Helsinki', 'Krakow', 'Lisbon', 'Ljubljana', 'London', 'Luxembourg', 'Lyon', 'Madrid', 'Milan', 'Munich', 'Oporto', 'Oslo', 'Paris', 'Prague', 'Rome', 'Stockholm', 'Vienna', 'Warsaw', 'Zurich'],\n        'Lat':  [52.38, 37.98, 42.38, 52.52, 48.14, 50.85, 47.49, 55.67, 53.34, 55.95, 46.20, 55.55, 60.16, 50.06, 38.72, 46.05, 51.50, 49.81, 45.76, 40.41, 45.46, 48.13, 41.15, 59.91, 48.85, 50.07, 41.90, 59.32, 48.20, 52.22, 47.37],\n        'Long': [4.9,   23.72, 2.17,  13.40, 17.10, 4.35,  19.04, 12.56, -6.26, -3.18,  6.14,  9.99, 24.93, 19.94, -9.13, 15.50, 0.12,  6.12,  4.83,  -3.70,  9.19, 11.58, -8.62, 10.75,  2.35, 14.43, 12.49, 18.06, 16.37, 21.01, 8.54]}\n\ndfr = pd.DataFrame(data, columns = ['City', 'Lat', 'Long'])\n\n#print(place)\nprint(data['City'])\n","56e9dedb":"newDf = pd.merge(reviews, dfr, how='left', on='City')\nnewDf.head()","6ab29f47":"plt.figure(figsize=(10,10))\nmap = Basemap(projection='aeqd', lon_0 = 10, lat_0 = 50, width = 5000000, height = 5000000, resolution='l') # set res=h\nmap.drawmapboundary(fill_color='cyan')\nmap.etopo()\nmap.drawcoastlines()\nmap.drawcountries()\nmap.fillcontinents(color='#f2f2f2',lake_color='#46bcec')\nscale = 0.00002\nfor c in list(newDf['City'].unique()):\n    #print(c, \":\", newDf[newDf['City'] == c]['Number of Reviews'].sum())\n    dfr.loc[dfr['City'] == c, 'Total Num of Reviews'] = newDf[newDf['City'] == c]['Number of Reviews'].sum()\nfor i in range(0,len(dfr)):\n    x, y = map(dfr.ix[i,'Long'], dfr.ix[i,'Lat'])\n    map.plot(x,y,marker='o', color='Red', markersize=10)\nplt.show()","f9f36af3":"plt.figure(figsize=(10,10))\nmap = Basemap(projection='aeqd', lon_0 = 10, lat_0 = 50, width = 5000000, height = 5000000, resolution='l') # set res=h\nmap.drawmapboundary(fill_color='cyan')\nmap.etopo()\nmap.drawcoastlines()\nmap.drawcountries()\nmap.fillcontinents(color='#f2f2f2',lake_color='#46bcec')\n#map.set_cmap('hot')\nscale = 0.00002\nfor c in list(newDf['City'].unique()):\n    #print(c, \":\", newDf[newDf['City'] == c]['Number of Reviews'].sum())\n    dfr.loc[dfr['City'] == c, 'Total Num of Reviews'] = newDf[newDf['City'] == c]['Number of Reviews'].sum()\nfor i in range(0,len(dfr)):\n    x, y = map(dfr.ix[i,'Long'], dfr.ix[i,'Lat'])\n    map.plot(x,y,marker='o', color='Red', alpha = 0.6, markersize=int(dfr.ix[i,'Total Num of Reviews']*scale))\nplt.show()","8ae836c2":"for r in list(newDf['Rating'].unique()):\n    for c in list(newDf['City'].unique()):\n        #print(c, \":\", newDf[newDf['City'] == c]['Number of Reviews'].sum())\n        dfr.loc[dfr['City'] == c, r] = len(newDf[(newDf['City'] == c) & (newDf['Rating'] == r)])\ndfr.drop(np.nan, axis = 1, inplace = True)","28646106":"for r in [5.0, 4.5, 4.0, 3.5, 3.0, 2.5, 2.0, 1.5, 1.0]:\n    if r in [5.0, 4.5, 4.0, 3.5, 3.0]:\n        scale = 0.01\n    elif r in [2.5, 2.0, 1.5, 1.0, -1.0]:\n        scale = 0.1\n    plt.figure(figsize=(10,10))\n    plt.title(\"{} Star Rating\".format(r))\n    map = Basemap(projection='aeqd', lon_0 = 10, lat_0 = 50, width = 5000000, height = 5000000, resolution='l') # set res=h\n    map.drawmapboundary(fill_color='cyan')\n    map.etopo()\n    map.drawcoastlines()\n    map.drawcountries()\n    map.fillcontinents(color='#f2f2f2',lake_color='#46bcec')\n    \n    for i in range(0,len(dfr)):\n        x, y = map(dfr.ix[i,'Long'], dfr.ix[i,'Lat'])\n        map.plot(x,y,marker='o', color='Red', alpha = 0.6, markersize=int(dfr.ix[i,r]*scale))\n    plt.show()","c9f184fb":"reviews.isna().sum()","07487b5e":"reviews[reviews['City'] == 'London']['Rating'].isna().sum()","9e3907e9":"byCity = reviews.groupby('City')\nbyCity['Rating'].mean()","56624d7d":"reviews['Rating'].fillna(value = 4.0, inplace = True)\nreviews['Rating'].isna().sum()","81a8868d":"for r in list(newDf['Rating'].unique()):\n    for c in list(newDf['City'].unique()):\n        #print(c, \":\", newDf[newDf['City'] == c]['Number of Reviews'].sum())\n        dfr.loc[dfr['City'] == c, r] = len(newDf[(newDf['City'] == c) & (newDf['Rating'] == r)])\ndfr.drop(np.nan, axis = 1, inplace = True)\n\nscale = 0.01\nr = 4.0\nplt.figure(figsize=(10,10))\nplt.title(\"{} Star Rating\".format(r))\nmap = Basemap(projection='aeqd', lon_0 = 10, lat_0 = 50, width = 5000000, height = 5000000, resolution='l') # set res=h\nmap.drawmapboundary(fill_color='cyan')\nmap.etopo()\nmap.drawcoastlines()\nmap.drawcountries()\nmap.fillcontinents(color='#f2f2f2',lake_color='#46bcec')\nfor i in range(0,len(dfr)):\n    x, y = map(dfr.ix[i,'Long'], dfr.ix[i,'Lat'])\n    map.plot(x,y,marker='o', color='Red', alpha = 0.6, markersize=int(dfr.ix[i,r]*scale))\nplt.show()","302451ae":"for city in list(reviews['City'].unique()):\n    print(city, reviews[reviews['City'] == city]['Price Range'].isna().sum())","68adfa4a":"fig, axes = plt.subplots(1,1, figsize=(7,5))\ny_ax = list()\nx_ax = list(reviews['City'].unique())\nfor city in list(reviews['City'].unique()):\n    na = reviews[reviews['City'] == city]['Price Range'].isna().sum()\n    y_ax.append(na)  \naxes.bar(x_ax, y_ax)\naxes.set_xticklabels(x_ax, rotation = 90)\naxes.set_ylabel('{} NA count'.format(col))\naxes.set_xlabel('City')\nplt.tight_layout()","047b08ab":"reviews['Price Range'].unique()","c5281a2d":"reviews['City'].count()","3a39c8e7":"for i in range(0, reviews['City'].count()):\n    if reviews.loc[i,'Price Range'] == '$':\n        reviews.loc[i,'Price'] = 1\n    elif reviews.loc[i,'Price Range'] == \"$$ - $$$\":\n        reviews.loc[i,'Price'] = 2\n    elif reviews.loc[i,'Price Range'] == '$$$$':\n        reviews.loc[i,'Price'] = 3\nreviews['Price'][np.isnan(reviews['Price'])] = 0","9f19ce9c":"print(reviews['Price'].nunique())\nprint(reviews['Price'].unique())\nsns.countplot(x='Price', data=reviews)","7a395ee7":"sns.countplot(x='Rating', data = reviews, hue = 'Price')","c6f3b90d":"city = list(reviews['City'].unique())\nfig, axes = plt.subplots(nrows=7,ncols=5,figsize=(17,20))\ni = 0\nratings = list(reviews['Rating'].unique())\nratingsCount = list()\nfor c in city:\n    reviewsCity = reviews[reviews['City'] == c]\n    plot = sns.countplot(x='Price', data = reviewsCity, ax=axes.flatten()[i])\n    plot.set_title(c)\n    plot.set_xticklabels(plot.get_xticklabels(), rotation = 45)\n    plt.tight_layout()\n    i = i + 1  ","6010afe8":"for p in list(reviews['Price'].unique()):\n    for c in list(reviews['City'].unique()):\n        dfr.loc[dfr['City'] == c, str('{} Dollar'.format(p))] = len(reviews[(reviews['City'] == c) & (reviews['Price'] == p)])\nfor p in ['3.0 Dollar', '2.0 Dollar', '1.0 Dollar', '0.0 Dollar']:\n    if p in ['3.0 Dollar']:\n        scale = 0.05\n    elif p in ['1.0 Dollar']:\n        scale = 0.01\n    elif p in ['2.0 Dollar', '0.0 Dollar']:\n        scale = 0.005\n    plt.figure(figsize=(10,10))\n    plt.title(\"{} Price\".format(p))\n    map = Basemap(projection='aeqd', lon_0 = 10, lat_0 = 50, width = 5000000, height = 5000000, resolution='l') # set res=h\n    map.drawmapboundary(fill_color='cyan')\n    map.etopo()\n    map.drawcoastlines()\n    map.drawcountries()\n    map.fillcontinents(color='#f2f2f2',lake_color='#46bcec')\n    \n    for i in range(0,len(dfr)):\n        x, y = map(dfr.ix[i,'Long'], dfr.ix[i,'Lat'])\n        map.plot(x,y,marker='o', color='Red', alpha = 0.6, markersize=int(dfr.ix[i,p]*scale))\n    plt.show()","662c651c":"for i in range(0, reviews['City'].count()):\n    if reviews.loc[i,'Price'] == 0:\n        reviews.loc[i,'Price'] = 2","327fa460":"print(reviews['Price'].nunique())\nprint(reviews['Price'].unique())\nsns.countplot(x='Price', data=reviews)","7619a1a0":"sns.countplot(x='Rating', data = reviews, hue = 'Price')","353f026c":"for p in list(reviews['Price'].unique()):\n    for c in list(reviews['City'].unique()):\n        dfr.loc[dfr['City'] == c, str('{} Dollar'.format(p))] = len(reviews[(reviews['City'] == c) & (reviews['Price'] == p)])","ee549475":"for p in ['3.0 Dollar', '2.0 Dollar', '1.0 Dollar']:\n    if p in ['3.0 Dollar']:\n        scale = 0.05\n    elif p in ['1.0 Dollar']:\n        scale = 0.01\n    elif p in ['2.0 Dollar']:\n        scale = 0.005\n    plt.figure(figsize=(10,10))\n    plt.title(\"{} Price\".format(p))\n    map = Basemap(projection='aeqd', lon_0 = 10, lat_0 = 50, width = 5000000, height = 5000000, resolution='l') # set res=h\n    map.drawmapboundary(fill_color='cyan')\n    map.etopo()\n    map.drawcoastlines()\n    map.drawcountries()\n    map.fillcontinents(color='#f2f2f2',lake_color='#46bcec')\n    \n    for i in range(0,len(dfr)):\n        x, y = map(dfr.ix[i,'Long'], dfr.ix[i,'Lat'])\n        map.plot(x,y,marker='o', color='Red', alpha = 0.6, markersize=int(dfr.ix[i,p]*scale))\n    plt.show()","f903acb1":"city = list(reviews['City'].unique())\nfig, axes = plt.subplots(nrows=7,ncols=5,figsize=(17,20))\ni = 0\nratings = list(reviews['Rating'].unique())\nratingsCount = list()\nfor c in city:\n    reviewsCity = reviews[reviews['City'] == c]\n    plot = sns.countplot(x='Price', data = reviewsCity, ax=axes.flatten()[i])\n    plot.set_title(c)\n    plot.set_xticklabels(plot.get_xticklabels(), rotation = 45)\n    plt.tight_layout()\n    i = i + 1   ","29b7028b":"#Counting function to parse the cuisine lists\ndef cuisine_count(_list):\n    cuisine_dict = {'UnknownCuisine': 0}\n    for cuisines in _list:\n        if cuisines is not np.nan:\n            cuisines = ast.literal_eval(cuisines)  \n            for cuisine in cuisines:  \n                if cuisine in cuisine_dict:\n                    cuisine_dict[cuisine] += 1\n                else :\n                    cuisine_dict[cuisine] = 1\n        else:\n            cuisine_dict['UnknownCuisine'] +=1\n    #print(cuisines)\n    return(cuisine_dict)","f12f3601":"def func(pct, allvals):\n    absolute = int(pct\/100.*np.sum(allvals))\n    return \"{:d}\".format(absolute)\ndef plotCuisine(cui,count,type = 'bar',city=\"\"):\n    if type == 'bar':\n        fig, axes = plt.subplots(1,1, figsize = (20,20))\n    elif type == 'pie':    \n        fig, axes = plt.subplots(1,1, figsize = (7,7))\n    lists = sorted(cui.items(), key=operator.itemgetter(1),reverse=True)\n    x, y = zip(*lists[:count])\n    col = cm.inferno_r(np.linspace(.7,.2, len(x)))\n    if type == 'bar':\n        axes.bar(x,y,color = col)\n        axes.set_ylabel('Count')\n        axes.set_xlabel('Cuisine')\n        axes.set_xticklabels(x,rotation = 90)\n    elif type == 'pie':\n        axes.pie(y, labels = x, autopct=lambda pct: func(pct, y))\n        axes.set_title(city,fontsize=15)\n    axes.set_facecolor('lightgrey')","680f0dff":"cui = cuisine_count(reviews['Cuisine Style'])\nplotCuisine(cui, len(cui))","a8a7a3b7":"for city in list(reviews['City'].unique()):\n    cui = cuisine_count(reviews[reviews['City'] == city]['Cuisine Style'])\n    plotCuisine(cui,10,'pie',city)","a78da954":"reviews['Number of Reviews'].isna().sum()","d77a573f":"x = list()\ny = list()\nfor city in list(reviews['City'].unique()):\n    x.append(city)\n    y.append(reviews[reviews['City'] == city]['Number of Reviews'].sum())\nfig, ax = plt.subplots(1,1,figsize=(17,7))\nax.bar(x,y,color = 'cyan',edgecolor = 'black')\nax.set_ylim(bottom=3.5)\nax.set_xticklabels(labels = x, rotation = 45)\nax.set_xlabel('City')\nax.set_ylabel('Average Review Rating')","8b1930cf":"for city in list(reviews['City'].unique()):\n    print('----------',city,'----------', '\\n',reviews[(reviews['City'] == city) & (reviews['Rating'] > 4.0)].sort_values(by = 'Number of Reviews', axis = 0, ascending = False)[['Name', 'Number of Reviews']].head())\n    print(\"\\n\")","ca168deb":"## Next, lets plot ratings vs cities","55b861ff":"### Lets look at the head of dataFrame","4c363907":"### Lets maps the top cuisines","3cb574ab":"## Takeaway: Almost all of the cities have a good avg restaurtant rating.","129bf718":"## Takeaway: Many of the cities have high 4.0, 4.5 rated restaurants","0f87cb34":"## Lets plot the cities on the map first","a449bd34":"## Ratings count per city","7895a9e8":"## Lets look at Price","ccf89825":"### Lets find which restaurant has the most reviews per city","fd39ba63":"## Lets plot some of the features on the MAP","9297f83a":"### Atleast one review in all the cities has the highest rating","73dea636":"## Lets replot 4.0 rating vs City","0f06af88":"## Takeaway: All of the cities have majority of their restaurant ratings as \"Good\" (>4.0 stars)!!!","3b7c4c2a":"### Lets change the format of dollar  'to a numeric value'\n### 1 dollar : 1, 2-3 dollar : 2, 4 dollar : 3, for now we ll change NaN to 0 (we will investigate more into this)","d7b144fa":"### Lets plot the prices vs cities","4d013498":"## Lets look at Num of Reviews column","b3544bac":"Lets look at the Negative Ratings","88ee3c27":"Here we can look for restaurants with Rating > 4.0","c4d9618e":"### Madrid & Milan seem to have the lowest average rating, Rome & Athens seem to have the highest average rating","cdfda962":"### First lets plot num of NA's","abb28929":"###  Hmmm, interesting, few cities have \"Negative (-1) Rating\".\n### Rome seems to have best ratings amongst all the cities.","cadbc4d7":"### Max Review rating per city","61b36979":"### London seem to have the most NA's","89396f6b":"### Lets look at null items by city","122e3cdf":"## Lets now look at Cuisines","f12356fb":"### Lets see if we can remove certain columns","eb12b408":"## Takeaway \n## 1. 4.0 seems to be the average rating for all the cities\n## 2. So we can fill na's ratings with 4.0","4f7ed594":"### Average Review Rating per City","bc400f25":"### Describe and info","db36471a":"### Now lets plot the Num of Reviews per city on the map","a76a7f31":"### Lets plot total num of reviews vs city","7d2f52d3":"### Lets look at City column","45d59fa2":"### Lets try to groupby the city","8bcc0300":"## Takeaways: \n### 1. Pretty substantial amount of reviews dont have the price fixed.\n### 2. Also since \"4 dollar\" priced reviews are very low, we can safely move NaN prices to \"2-3\" dollar prices","52d1c391":"## **London, Paris have the highest number of reviews**\n## **Ljubljana, Luxenbourg have the least number of reviews**"}}