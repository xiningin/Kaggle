{"cell_type":{"4c9df179":"code","527e6bcb":"code","ae65b0fe":"code","d935657b":"code","33acc2a2":"code","ed00b21e":"code","83e5ff73":"code","1b8f4dbc":"code","ea1fa93d":"code","d2c33fd2":"code","a14fe5fd":"code","6bbe2534":"code","6e68b8ed":"code","8a98e3de":"code","1539865e":"code","17a70269":"code","59849aa3":"code","28951af2":"code","7d9ff603":"code","e593eaf0":"code","251bb58b":"code","172a7255":"code","5a4a028c":"code","7b96c3bf":"code","6aee12e6":"code","6faa6f6a":"code","ce84d90e":"code","059619c3":"code","0841d32b":"code","884b3f9f":"code","4858685c":"code","0e765cd9":"code","f6f27aa5":"code","5aeb28a8":"code","fe883016":"code","0939cb6b":"code","471b7414":"code","7b71fae7":"code","6e706e5b":"code","5b4fd4a5":"code","d597cbb5":"code","f4f7e33e":"code","c8435c68":"code","9cc3359a":"code","90a2fec8":"code","c7dbf78e":"code","4b2a52b8":"code","f759716a":"code","7f20d9db":"code","b0b4d58a":"code","c67601e0":"code","6c3b1c1c":"code","fb4920ae":"code","a678d3b5":"code","c38932df":"code","06df4351":"code","14ebaafb":"code","41f492f7":"code","f25aaeb1":"code","7fe3d5a0":"code","e430b749":"code","a6e859dc":"code","a01448ec":"code","06797f19":"code","af9a78ae":"code","0c045c8a":"code","de28aa00":"code","21b1c8bd":"code","d8a5b869":"code","d863a438":"code","ca9e73ca":"code","338e1dff":"code","74dd4484":"code","6758eb22":"code","a12ae97b":"code","79b79cc1":"code","fbba27da":"code","fc51a874":"code","87a0276f":"code","6575d10e":"code","cf1cfb6e":"code","e8952349":"code","695825c5":"code","8c487e17":"code","bf6df3bc":"code","0627e551":"code","f86694ae":"code","30ba5207":"code","0b2e38e7":"code","ff898c2b":"code","c8c72198":"markdown","a9fa2086":"markdown","1661aa90":"markdown","c7ee86a7":"markdown","b25185e8":"markdown","105c36f7":"markdown","fc904ec4":"markdown","5ac256d6":"markdown","744585fd":"markdown","bff8ef00":"markdown","ab3bd92f":"markdown","931cd57b":"markdown","f8c5f7e8":"markdown","3cd51fe2":"markdown","9da28261":"markdown","4bb55bf0":"markdown","c641ec68":"markdown","4006af80":"markdown","0b16fb49":"markdown","025bba94":"markdown","58b73a03":"markdown","cfbec1b1":"markdown","3afe9b4f":"markdown","53ed56d2":"markdown","73b29ee6":"markdown","6d9bf20f":"markdown"},"source":{"4c9df179":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt","527e6bcb":"df = pd.read_csv('..\/input\/UCI_Credit_Card.csv')\ndf.sample(3)","ae65b0fe":"df = df.rename(columns={'default.payment.next.month': 'def_pay', \n                        'PAY_0': 'PAY_1'})","d935657b":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score, make_scorer,confusion_matrix,f1_score,roc_auc_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics","33acc2a2":"y = df['def_pay'].copy()\ny.sample(5)","ed00b21e":"features = ['LIMIT_BAL', 'SEX', 'EDUCATION', 'MARRIAGE', 'AGE', 'PAY_1', 'PAY_2',\n       'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', 'BILL_AMT1', 'BILL_AMT2',\n       'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6', 'PAY_AMT1',\n       'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']\nX = df[features].copy()\nX.columns","83e5ff73":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20,stratify=y, random_state=42)","1b8f4dbc":"param_grid = {'n_estimators': [250,300,350],\n              'criterion': ['entropy', 'gini'], 'n_jobs' : [-1]}\ngrid_forest = GridSearchCV(RandomForestClassifier(), param_grid, scoring = 'roc_auc', cv=5)\n%time grid_forest = grid_forest.fit(X_train, y_train)\nprint(grid_forest.best_estimator_)\nprint(grid_forest.best_score_)\nforest_downsampled = grid_forest.best_estimator_","ea1fa93d":"RF1=RandomForestClassifier(bootstrap=True, class_weight=None, criterion='entropy',\n                       max_depth=None, max_features='auto', max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=350,\n                       n_jobs=-1, oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)\nRF1.fit(X_train, y_train)\npredictions = RF1.predict_proba(X_test)[:,1]\nauc1=roc_auc_score(y_test, predictions)\nprint(auc1)","d2c33fd2":"def get_feature_importance(classify, ftrs):\n    imp = classify.feature_importances_.tolist()\n    feat = ftrs\n    result = pd.DataFrame({'feat':feat,'score':imp})\n    result = result.sort_values(by=['score'],ascending=False)\n    return result","a14fe5fd":"RF1.fit(X_train, y_train)\npredictions = RF1.predict(X_test)\nf1_score(y_true = y_test, y_pred = predictions)\nprint(\"-------------\")\nprint(\"f1 score: {}\".format(round(f1_score(y_true = y_test, y_pred = predictions),3)))\nprint(\"Accuracy: {}\".format(round(accuracy_score(y_true = y_test, y_pred = predictions),3)))\nprint(\"-------------\")\nprint(get_feature_importance(RF1, features))\nprint(\"-------------\")\nTP = np.sum(np.logical_and(predictions == 1, y_test == 1))\nTN = np.sum(np.logical_and(predictions == 0, y_test == 0))\nFP = np.sum(np.logical_and(predictions == 1, y_test == 0))\nFN = np.sum(np.logical_and(predictions == 0, y_test == 1))\npred = len(predictions)\n\nprint('True Positives: {}'.format(TP))\nprint('False Positive: {}'.format(FP))\nprint('True Negative: {}'.format(TN))\nprint('False Negative: {}'.format(FN))\nprint('Precision: {}'.format(round(TP\/(TP+FP),2)))\nprint('Recall: {}'.format(round(TP\/(TP+FN),2)))\nprint('Problematic ratio: {}'.format(round(FN\/(FN+TP),2)))","6bbe2534":"param_grid = {'max_depth': np.arange(5, 10),\n             'criterion' : ['gini','entropy'],\n             'max_leaf_nodes': [10,20,50,100],\n             'min_samples_split': [2,5,10,20,50],\n             'class_weight' : ['balanced']}\n# create the grid\ngrid_tree = GridSearchCV(DecisionTreeClassifier(), param_grid, cv = 5, scoring= 'roc_auc')\n# the cv option will be clear in a few cells\n\n#training\ngrid_tree.fit(X_train, y_train)\n#let's see the best estimator\nprint(grid_tree.best_estimator_)\n#with its score\nprint(grid_tree.best_score_)","6e68b8ed":"tree1=DecisionTreeClassifier(class_weight='balanced', criterion='entropy',\n                       max_depth=9, max_features=None, max_leaf_nodes=20,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort=False,\n                       random_state=None, splitter='best')\ntree1.fit(X_train, y_train)\npredictions = tree1.predict_proba(X_test)[:,1]\nauc2=roc_auc_score(y_test, predictions)\nprint(auc2)","8a98e3de":"predictions = tree1.predict(X_test)\nf1_score(y_true = y_test, y_pred = predictions)\nprint(\"-------------\")\nprint(\"f1 score: {}\".format(round(f1_score(y_true = y_test, y_pred = predictions),3)))\nprint(\"Accuracy: {}\".format(round(accuracy_score(y_true = y_test, y_pred = predictions),3)))\nprint(\"-------------\")\nprint(get_feature_importance(tree1, features))\nprint(\"-------------\")\nTP = np.sum(np.logical_and(predictions == 1, y_test == 1))\nTN = np.sum(np.logical_and(predictions == 0, y_test == 0))\nFP = np.sum(np.logical_and(predictions == 1, y_test == 0))\nFN = np.sum(np.logical_and(predictions == 0, y_test == 1))\npred = len(predictions)\n\nprint('True Positives: {}'.format(TP))\nprint('False Positive: {}'.format(FP))\nprint('True Negative: {}'.format(TN))\nprint('False Negative: {}'.format(FN))\nprint('Precision: {}'.format(round(TP\/(TP+FP),2)))\nprint('Recall: {}'.format(round(TP\/(TP+FN),2)))\nprint('Problematic ratio: {}'.format(round(FN\/(FN+TP),2)))","1539865e":"predictions_tree = tree1.predict_proba(X_test)[:,1]\nfpr1, tpr1, _ = metrics.roc_curve(y_test,  predictions_tree)\n\npredictions_rf = RF1.predict_proba(X_test)[:,1]\nfpr2, tpr2, _ = metrics.roc_curve(y_test,  predictions_rf)\n\n\nsns.set(style=\"white\",font=\"Arial\",font_scale=1.5)\n\n\nplt.figure(figsize=(10,10))\nplt.plot([0, 1], [0, 1], 'k--')\n\nplt.plot(fpr1,tpr1,label=\"Decision Tree, auc=\"+str(round(auc2,2)),color=\"#E21932\")\nplt.plot(fpr2,tpr2,label=\"Random forest, auc=\"+str(round(auc1,2)),color=\"black\")\nplt.legend(loc=4, facecolor='white',fontsize=16)\nsns.despine(left=True)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title(\"ROC\")","17a70269":"from sklearn import tree\nimport graphviz\ndot_data = tree.export_graphviz(tree1, out_file=None)  \ngraph = graphviz.Source(dot_data)  \ngraph","59849aa3":"df.info()","28951af2":"# Categorical variables description\ndf[['SEX', 'EDUCATION', 'MARRIAGE']].describe()","7d9ff603":"# Payment delay description\ndf[['PAY_1', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']].describe()","e593eaf0":"fil = (df.PAY_1 == -2) | (df.PAY_1 == -1) | (df.PAY_1 == 0)\ndf.loc[fil, 'PAY_1'] = 0\nfil = (df.PAY_2 == -2) | (df.PAY_2 == -1) | (df.PAY_2 == 0)\ndf.loc[fil, 'PAY_2'] = 0\nfil = (df.PAY_3 == -2) | (df.PAY_3 == -1) | (df.PAY_3 == 0)\ndf.loc[fil, 'PAY_3'] = 0\nfil = (df.PAY_4 == -2) | (df.PAY_4 == -1) | (df.PAY_4 == 0)\ndf.loc[fil, 'PAY_4'] = 0\nfil = (df.PAY_5 == -2) | (df.PAY_5 == -1) | (df.PAY_5 == 0)\ndf.loc[fil, 'PAY_5'] = 0\nfil = (df.PAY_6 == -2) | (df.PAY_6 == -1) | (df.PAY_6 == 0)\ndf.loc[fil, 'PAY_6'] = 0","251bb58b":"fil = (df.EDUCATION == 5) | (df.EDUCATION == 6) | (df.EDUCATION == 0)\ndf.loc[fil, 'EDUCATION'] = 4\ndf.EDUCATION.value_counts()","172a7255":"# Bill Statement description description\ndf[['BILL_AMT1', 'BILL_AMT2', 'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6']].describe()","5a4a028c":"#Previous Payment Description description description\ndf[['PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']].describe()","7b96c3bf":"print(\"Default probability in October:\",df.def_pay.sum() \/ len(df.def_pay))","6aee12e6":"dataop=df[['PAY_1', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']]\ndataop1=pd.concat([dataop['PAY_1'],dataop['PAY_2'],dataop['PAY_3'],dataop['PAY_4'],dataop['PAY_5'],dataop['PAY_6']])\ndataop2=dataop1.value_counts().to_frame()\ndataop2.columns=['AMOUNT']\ndataop2","6faa6f6a":"sns.set(style=\"white\",font=\"Arial\",font_scale=4.8)\nplt.rcParams['figure.figsize'] = [48, 30]\ng=sns.barplot(x=dataop2.index,y=dataop2['AMOUNT'],data=dataop2\n,color=\"#E21932\")  \nsns.despine(left=True,bottom=False)\ng.set( ylabel=\" \",xlabel=\" \")\nplt.yticks([])\ng.set_xticklabels(['Paid on time','M1','M2','M3','M4','M5','M6','M7','M8'])\n#plt.savefig('.png', bbox_inches = 'tight',dpi=300)\nplt.title('Average Delinquency term in 6 months  ',size = 30)\nplt.show()","ce84d90e":"dfdp=df[['PAY_1', 'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6']]\ndata={'Month':['4','5','6','7','8','9'],\n      'Default rate':[((30000-dfdp['PAY_6'].value_counts()[0])\/300),\n((30000-dfdp['PAY_5'].value_counts()[0])\/300),((30000-dfdp['PAY_4'].value_counts()[0])\/300),\n                      ((30000-dfdp['PAY_3'].value_counts()[0])\/300),\n                      ((30000-dfdp['PAY_2'].value_counts()[0])\/300),\n                      ((30000-dfdp['PAY_1'].value_counts()[0])\/300)]\n      }\ndfdpm=pd.DataFrame(data)\ndfdpm","059619c3":"dfdpm.loc[6]={'Month':'10','Default rate':22.12}\n#dfdpm['Month'].apply(str)","0841d32b":"plt.rcParams['figure.figsize'] = [48, 20]\nsns.set(style=\"whitegrid\",font_scale=1)\ng1 = sns.catplot(x=\"Month\",y='Default rate',kind=\"bar\",aspect=1.2,data=dfdpm,order=['4','5','6','7','8','9','10'],color=\"#E21932\")\ng1.set( ylabel=\"\",xlabel=\"\")\nsns.despine(left=True)\nplt.title('Default rate (%)',size = 20)\nplt.show()","884b3f9f":"datadpr=df\noverdue_balance_4=datadpr[datadpr['PAY_6']>0]['BILL_AMT6'].sum()-datadpr[datadpr['PAY_6']>0]['PAY_AMT5'].sum()\nloan_balance_4=datadpr['BILL_AMT6'].sum()-datadpr['PAY_AMT5'].sum()\n\noverdue_balance_5=datadpr[datadpr['PAY_5']>0]['BILL_AMT5'].sum()-datadpr[datadpr['PAY_5']>0]['PAY_AMT4'].sum()\nloan_balance_5=datadpr['BILL_AMT5'].sum()-datadpr['PAY_AMT4'].sum()\n\noverdue_balance_6=datadpr[datadpr['PAY_4']>0]['BILL_AMT4'].sum()-datadpr[datadpr['PAY_4']>0]['PAY_AMT3'].sum()\nloan_balance_6=datadpr['BILL_AMT4'].sum()-datadpr['PAY_AMT3'].sum()\n\noverdue_balance_7=datadpr[datadpr['PAY_3']>0]['BILL_AMT3'].sum()-datadpr[datadpr['PAY_3']>0]['PAY_AMT2'].sum()\nloan_balance_7=datadpr['BILL_AMT3'].sum()-datadpr['PAY_AMT2'].sum()\n\noverdue_balance_8=datadpr[datadpr['PAY_2']>0]['BILL_AMT2'].sum()-datadpr[datadpr['PAY_2']>0]['PAY_AMT1'].sum()\nloan_balance_8=datadpr['BILL_AMT2'].sum()-datadpr['PAY_AMT1'].sum()\n                                                                                             \ndata={'overdue_balance':[overdue_balance_4,overdue_balance_5,overdue_balance_6,overdue_balance_7,overdue_balance_8],\n      'loan_balance':[loan_balance_4,loan_balance_5,loan_balance_6,loan_balance_7,loan_balance_8],\n      'Month':['4','5','6','7','8']\n}\ndataoverr=pd.DataFrame(data)                                                                                            \ndataoverr['Overdue rate']=dataoverr['overdue_balance']\/dataoverr['loan_balance']                                                                                       \ndataoverr                                                                                           ","4858685c":"df.LIMIT_BAL.describe()","0e765cd9":"df['LIMIT_BAL'].describe()","f6f27aa5":"plt.rcParams['figure.figsize'] = 27.1,20\nsns.set(style=\"white\",font=\"Arial\",font_scale=3.3)\ng = sns.distplot(df.LIMIT_BAL,color=\"#E21932\" ,bins=25,\nkde_kws={\"color\": \"#E21932\", \"lw\": 3, },\nhist_kws={ \"linewidth\": 3,\"alpha\": .8}) \nsns.despine(bottom=False,right=True,top=True,left=True)\ng.set_yticklabels([])\ng.set( ylabel=\"\",xlabel=\"\")\nplt.title(\"Distribution of Credit line\",size=30)\nplt.show()","5aeb28a8":"plt.rcParams['figure.figsize'] = 47.1,35.27\ndatacl=df[(df.EDUCATION<4)&(df.MARRIAGE!=3)]\ndatacl.loc[datacl.EDUCATION==1,'EDUCATION']='Graduate school'\ndatacl.loc[datacl.EDUCATION==2,'EDUCATION']='University'\ndatacl.loc[datacl.EDUCATION==3,'EDUCATION']='High school'\ndatacl.loc[datacl.SEX==1,'SEX']='Male'\ndatacl.loc[datacl.SEX==2,'SEX']='Female'\ndatacl.loc[datacl.MARRIAGE==1,'MARRIAGE']='Married'\ndatacl.loc[datacl.MARRIAGE==2,'MARRIAGE']='Single'\nsns.set(style=\"whitegrid\",font=\"Arial\",font_scale=4)\ng = sns.catplot(x=\"EDUCATION\",y=\"LIMIT_BAL\",hue=\"SEX\",row=\"MARRIAGE\",data=datacl, kind=\"box\", height = 10 ,\naspect=3,palette = sns.color_palette([\"#E21932\",\"white\"]))\ng.set( ylabel=\"\",xlabel=\"\")\nplt.show()","fe883016":"dataclr=df\ndataclr.loc[((dataclr['LIMIT_BAL'] > 0) & (dataclr['LIMIT_BAL'] <= 50000)) , 'limit'] = '[1,5]'\ndataclr.loc[((dataclr['LIMIT_BAL'] > 50000) & (dataclr['LIMIT_BAL'] <= 100000)) , 'limit'] = '(5,10]'\ndataclr.loc[((dataclr['LIMIT_BAL'] > 100000) & (dataclr['LIMIT_BAL'] <= 150000)) , 'limit'] = '(10,15]'\ndataclr.loc[((dataclr['LIMIT_BAL'] > 150000) & (dataclr['LIMIT_BAL'] <= 200000)) , 'limit'] = '(15,20]'\ndataclr.loc[((dataclr['LIMIT_BAL'] > 200000) & (dataclr['LIMIT_BAL'] <= 300000)) , 'limit'] = '(20,30]'\ndataclr.loc[((dataclr['LIMIT_BAL'] > 300000) & (dataclr['LIMIT_BAL'] <= 400000)) , 'limit'] = '(30,40]'\ndataclr.loc[((dataclr['LIMIT_BAL'] > 400000) & (dataclr['LIMIT_BAL'] <= 500000)) , 'limit'] = '(40,50]'\ndataclr.loc[((dataclr['LIMIT_BAL'] > 500000) & (dataclr['LIMIT_BAL'] <= 600000)) , 'limit'] = '(50,60]'\ndataclr.loc[((dataclr['LIMIT_BAL'] > 600000) & (dataclr['LIMIT_BAL'] <= 800000)) , 'limit'] = '(60,80]'\ndataclr.loc[((dataclr['LIMIT_BAL'] > 800000) & (dataclr['LIMIT_BAL'] <= 1000000)) , 'limit'] = '(80,100]'\ndata_clr=dataclr.groupby(['limit'])[['def_pay']].sum()\ndata_clr['derate']=dataclr.groupby(['limit'])[['def_pay']].sum()\/dataclr.groupby(['limit'])[['def_pay']].count()\ndata_clr.reindex(['[1,5]','(5,10]','(10,15]','(15,20]', '(20,30]', '(30,40]', '(40,50]',  '(50,60]',\n       '(60,80]', '(80,100]'])","0939cb6b":"sns.set(style=\"whitegrid\",font=\"Arial\",font_scale=3)\nplt.rcParams['figure.figsize'] = [48, 15]\ng=sns.barplot(x=data_clr.index,y=data_clr['derate']*100,data=data_clr\n,color=\"#E21932\",order=['[1,5]','(5,10]','(10,15]','(15,20]', '(20,30]', '(30,40]', '(40,50]',  '(50,60]',\n       '(60,80]', '(80,100]']) \nsns.despine(left=True)\ng.set( ylabel=\"\",xlabel=\"\")\nplt.title('Default rate in each credit line',size = 30)\nplt.show()","471b7414":"print(\"Default probability:\",df.def_pay.sum() \/ len(df.def_pay))","7b71fae7":"dfre=dataclr \ndfrea=dfre[dfre['BILL_AMT6']!=0]\ndfre1=dfrea.groupby(['limit'])['BILL_AMT6'].count()\ndfre1=dfre1.to_frame()\n    \ndfre1.columns=(['count1'])\n    \ndfre1['rate1']=dfre1['count1']\/25980\ndfre1['on1']=dfre1.index\ndfreb=dfre[dfre['BILL_AMT2']!=0]\ndfre2=dfreb.groupby(['limit'])['BILL_AMT2'].count()\ndfre2=dfre2.to_frame()\ndfre2.columns=(['count2'])\ndfre2['rate2']=dfre2['count2']\/27494\ndfre2['on1']=dfre2.index\ndfre2\ndfre3=pd.merge(dfre1,dfre2,on='on1')\ndfre3=dfre3.reindex([9,5,0,1,2,3,4,6,7,8])","6e706e5b":"sns.set(style=\"whitegrid\",font=\"Arial\",font_scale=6)\nsns.pointplot('on1','rate1',data=dfre3,color=\"black\",label='May',marker='.',markersize=25,linewidth=5)\nsns.pointplot('on1','rate2',data=dfre3,color=\"#C93245\",label='Sep',marker='.',markersize=25,linewidth=5)\n#plt.plot(dfre3.on1,dfre3.rate2,color='blue',label='August')\n#,color='#E21932'\nplt.title('')\nplt.xlabel('')\n#plt.xticklabels=(['[1,5]','(5,10]','(10,15]','(15,20]', '(20,30]', '(30,40]', '(40,50]',  '(50,60]', '(60,80]', '(80,100]' ])\nplt.ylabel('')\nsns.despine(left=True)\nplt.legend()\n\nplt.show()\n#dfre3[['rate1','rate2']].plot()","5b4fd4a5":"dfre=dataclr \ndfrea=dfre[dfre['BILL_AMT6']!=0]\ndfre1=dfrea.groupby(['EDUCATION'])['BILL_AMT6'].count()\ndfre1=dfre1.to_frame()\n    \ndfre1.columns=(['count1'])\n    \ndfre1['rate1']=dfre1['count1']\/25980\ndfre1['on1']=dfre1.index\ndfreb=dfre[dfre['BILL_AMT2']!=0]\ndfre2=dfreb.groupby(['EDUCATION'])['BILL_AMT2'].count()\ndfre2=dfre2.to_frame()\ndfre2.columns=(['count2'])\ndfre2['rate2']=dfre2['count2']\/27494\ndfre2['on1']=dfre2.index\ndfre2\ndfre4=pd.merge(dfre1,dfre2,on='on1')\ndfre4","d597cbb5":"sns.set(style=\"whitegrid\",font=\"Arial\",font_scale=6)\nsns.lineplot('on1','rate1',data=dfre4,color=\"black\",label='May',marker='.',markers=True,markersize=45,linewidth=5)\nsns.lineplot('on1','rate2',data=dfre4,color=\"#C93245\",label='Sep', marker='.',markers=True,markersize=45,linewidth=5)\nplt.title('')\nplt.xlabel('')\nplt.xticks(np.arange(1,5),['Master','University','High school','Others'])\nplt.ylabel('')\nsns.despine(left=True)\nplt.legend()\nplt.show()","f4f7e33e":"dfre=dataclr\ndfre['AGEBIN'] = pd.cut(dfre['AGE'], bins = np.linspace(20, 80, num = 13))\ndfrea=dfre[dfre['BILL_AMT6']!=0]\ndfre1=dfrea.groupby(['AGEBIN'])['BILL_AMT6'].count()\ndfre1=dfre1.to_frame()   \ndfre1.columns=(['count1'])\ndfre1['rate1']=dfre1['count1']\/25980\ndfre1['on2']=dfre1.index\ndfreb=dfre[dfre['BILL_AMT2']!=0]\ndfre2=dfreb.groupby(['AGEBIN'])['BILL_AMT2'].count()\ndfre2=dfre2.to_frame()\ndfre2.columns=(['count2'])\ndfre2['rate2']=dfre2['count2']\/27494\ndfre2['on2']=dfre2.index\ndfre2\ndfre6=pd.merge(dfre1,dfre2,on='on2')","c8435c68":"sns.set(style=\"whitegrid\",font=\"Arial\",font_scale=3.5)\nsns.pointplot('on2','rate1',data=dfre6,color=\"black\",label='April',marker='.',markersize=45,linewidth=5)\nsns.pointplot('on2','rate2',data=dfre6,color=\"#C93245\",label='August',marker='.',markersize=45,linewidth=5)\nplt.title('')\nplt.xlabel('')\nplt.ylabel('')\nsns.despine(left=True)\nplt.legend()\nplt.show()","9cc3359a":"dfre=dataclr\ndfre=dfre[dfre['BILL_AMT6']!=0]\ndfre1=dfre.groupby(['limit'])['BILL_AMT6'].count()\ndfre.groupby(['limit'])['BILL_AMT6'].count().sum()\ndfre1=dfre1.to_frame()\ndfre1.columns=(['count1'])\ndfre1['rate']=dfre1['count1']\/25980\ndfre1\ndfre=dfre[dfre['BILL_AMT2']!=0]\ndfre1=dfre.groupby(['limit'])['BILL_AMT2'].count()\ndfre.groupby(['limit'])['BILL_AMT2'].count().sum()\ndfre1=dfre1.to_frame()\ndfre1.columns=(['count1'])\ndfre1['rate']=dfre1['count1']\/27494\ndfre1","90a2fec8":"df['AGE'].describe()","c7dbf78e":"plt.figure(figsize = (20, 10))\nsns.set(style=\"white\",font_scale=2.4)\nsns.kdeplot(df.loc[df['def_pay'] == 1, 'AGE'] , label = 'Default',color=\"#E21932\",linewidth = 3.5)\nsns.despine(left=True,bottom=False,right=True,top=True)\nsns.kdeplot(df.loc[df['def_pay'] == 0, 'AGE'] , label = 'Paid on time',color=\"black\",linewidth = 3.5)\nplt.title(\"Dendity of Age\")\nplt.show()","4b2a52b8":"df['AgeBin'] = 0 \ndf.loc[((df['AGE'] > 20) & (df['AGE'] < 30)) , 'AgeBin'] = '(20,30)'\ndf.loc[((df['AGE'] >= 30) & (df['AGE'] < 40)) , 'AgeBin'] = '[30,40)'\ndf.loc[((df['AGE'] >= 40) & (df['AGE'] < 50)) , 'AgeBin'] = '[40,50)'\ndf.loc[((df['AGE'] >= 50) & (df['AGE'] < 60)) , 'AgeBin'] = '[50,60)'\ndf.loc[((df['AGE'] >= 60) & (df['AGE'] < 70)) , 'AgeBin'] = '[60,70)'\ndf.loc[((df['AGE'] >= 70) & (df['AGE'] < 81)) , 'AgeBin'] = '[70,81)'","f759716a":"dataage=df[['AGE','def_pay']]\ndataage['AGEBIN'] = pd.cut(df['AGE'], bins = np.linspace(20, 80, num = 13))\ndataage1=dataage.groupby('AGEBIN').mean()\ndataage1.head()","7f20d9db":"sns.set(style=\"whitegrid\",font=\"Arial\",font_scale=3)\nplt.rcParams['figure.figsize'] = [48, 15]\ng=sns.barplot(x=dataage1.index,y=dataage1['def_pay']*100,data=dataage1\n,color=\"#E21932\") \nsns.despine(left=True)\ng.set( ylabel=\"\",xlabel=\"\")\nplt.title('Default rate in each agebox',size = 40)\nplt.show()","b0b4d58a":"dataclient=df\ngrouped=dataclient.groupby(['EDUCATION'])[['def_pay']]\ndacli=grouped.sum()\ndacli['count']=grouped.count()\ndacli['derate']=dacli['def_pay']\/dacli['count']\ndacli['allrate']=dacli['count']\/30000\ndacli['EDUCATION_']=dacli.index\ndacli.reset_index()\ndacli.sort_values('count',ascending=False)","c67601e0":"sns.set(style=\"white\",font=\"Calibri\",font_scale=4)\nplt.rcParams['figure.figsize'] = [20, 8]\ng = sns.barplot(x=\"derate\",y=\"EDUCATION_\",color='#E21932'\n,orient=\"h\",data=dacli)\nsns.despine(left=True)\ng.set_xticklabels(['0.00','0.05','0.10','0.15','0.20','0.25'],ha='left')\ng.set_yticklabels(['Graduate school','University','High school','Others'])\ng.set( ylabel=\"\",xlabel=\"\")\nplt.title(\"Default rate of clients\")\nplt.show()","6c3b1c1c":"sns.set(style=\"white\",font=\"Calibri\",font_scale=4)\nplt.rcParams['figure.figsize'] = [20, 8]\ng = sns.barplot(x=\"allrate\",y=\"EDUCATION_\",color='#E21932',\norient=\"h\",data=dacli)\nsns.despine(left=True)\ng.set_yticklabels(['Graduate school','University','High school','Others'])\ng.set_xticklabels(['0.0','0.1','0.2','0.3','0.4'],ha='left')\ng.set( ylabel=\"\",xlabel=\"\")\nplt.title(\"Percentage of clients\")\nplt.show()","fb4920ae":"dfh=dataclr\ndfh=dfh[dfh['EDUCATION']!=4]\ndfh['AGEBIN'] = pd.cut(dfh['AGE'], bins = np.linspace(20, 80, num = 13))\ngrouped=dfh.groupby(['EDUCATION','SEX'\n            ,'MARRIAGE','AGEBIN'])[['def_pay']]\ndfall=grouped.sum()\ndfall['count']=grouped.count()\ndfall['derate']=dfall['def_pay']\/dfall['count']\ndfall['rate']=dfall['count']\/30000\ndfall=dfall[dfall['count']>300]\ndfall.sort_values(by='count',ascending=False).head()","a678d3b5":"dataac=df\ndataac['AGEBIN'] = pd.cut(dataac['AGE'], bins = np.linspace(20, 80, num = 13))\ndataac.loc[dataac['PAY_AMT6']>0,'PAY_AMT6']=1\ndataac.loc[dataac['PAY_AMT5']>0,'PAY_AMT5']=1\ndataac.loc[dataac['PAY_AMT4']>0,'PAY_AMT4']=1\ndataac.loc[dataac['PAY_AMT3']>0,'PAY_AMT3']=1\ndataac.loc[dataac['PAY_AMT2']>0,'PAY_AMT2']=1\ndataac.loc[dataac['PAY_AMT1']>0,'PAY_AMT1']=1\ndata_ac=dataac.groupby(['EDUCATION','SEX','MARRIAGE','AGEBIN'])['PAY_AMT6','PAY_AMT5','PAY_AMT4','PAY_AMT3','PAY_AMT2','PAY_AMT1'].sum()\ndata_ac['Col_sum'] = data_ac.apply(lambda x: x.sum(), axis=1)\ndata_ac['rate']=data_ac['Col_sum']\/data_ac['Col_sum'].sum()\ndata_ac.sort_values('Col_sum',ascending=False).head()","c38932df":"dataad=dataclr\ndataad=dataad[(dataad['BILL_AMT1']!=0)&(dataad['BILL_AMT2']!=0)&(dataad['BILL_AMT3']!=0)\n              &(dataad['BILL_AMT4']!=0)&(dataad['BILL_AMT5']!=0)&(dataad['BILL_AMT6']!=0)]\ndataad=dataad[['EDUCATION','SEX','MARRIAGE','AGEBIN','LIMIT_BAL','limit','BILL_AMT1','BILL_AMT2','BILL_AMT3','BILL_AMT4','BILL_AMT5','BILL_AMT6']]\ndataad['Col_sum'] = dataad[['BILL_AMT1','BILL_AMT2','BILL_AMT3','BILL_AMT4','BILL_AMT5','BILL_AMT6']].apply(lambda x: x.sum(), axis=1)\ndataad['rate']=dataad['Col_sum'] \/(6*dataad['LIMIT_BAL'])\n\ndata_ad=dataad.groupby(['EDUCATION','SEX','MARRIAGE','AGEBIN'])[['rate']].mean()\ndata_ad['count']=dataad.groupby(['EDUCATION','SEX','MARRIAGE','AGEBIN'])[['rate']].count()\ndata_ad=data_ad[data_ad['count']>200]\ndata_ad.sort_values('rate',ascending=False)","06df4351":"def corr_2_cols(Col1, Col2):\n    res = df.groupby([Col1, Col2]).size().unstack()\n    res['overdue rate'] = (res[res.columns[1]]\/(res[res.columns[0]] + res[res.columns[1]]))\n    return res","14ebaafb":"corr_2_cols('MARRIAGE', 'def_pay')","41f492f7":"df.loc[df.MARRIAGE == 0, 'MARRIAGE'] = 3\ndf.MARRIAGE.value_counts()","f25aaeb1":"marry = df.groupby(['MARRIAGE', 'def_pay']).size().unstack()\nmarry.columns=['Paid on time','Default']\nmarry","7fe3d5a0":"datatest=df\ndatatest.loc[datatest.PAY_1<4,'PAY_1']=0\ndatatest.loc[datatest.PAY_2<4,'PAY_2']=0\ndatatest.loc[datatest.PAY_3<4,'PAY_3']=0\ndatatest.loc[datatest.PAY_4<4,'PAY_4']=0\ndatatest.loc[datatest.PAY_5<4,'PAY_5']=0\ndatatest.loc[datatest.PAY_6<4,'PAY_6']=0\ndatatest.loc[datatest.PAY_1>3,'PAY_1']=1\ndatatest.loc[datatest.PAY_2>3,'PAY_2']=1\ndatatest.loc[datatest.PAY_3>3,'PAY_3']=1\ndatatest.loc[datatest.PAY_4>3,'PAY_4']=1\ndatatest.loc[datatest.PAY_5>3,'PAY_5']=1\ndatatest.loc[datatest.PAY_6>3,'PAY_6']=1\ndataset=datatest.groupby(['MARRIAGE'])[['PAY_1','PAY_2','PAY_3','PAY_4','PAY_5','PAY_6']].sum()\ndataset.T.apply(sum)","e430b749":"df = pd.read_csv('..\/input\/UCI_Credit_Card.csv')","a6e859dc":"df = df.rename(columns={'default.payment.next.month': 'def_pay', \n                        'PAY_0': 'PAY_1'})","a01448ec":"bins = [20, 29, 39, 49, 59, 69, 81]\nbins_names = [1, 2, 3, 4, 5, 6]\ndf['AgeBin'] = pd.cut(df['AGE'], bins, labels=bins_names)","06797f19":"df['AgeBin'] = pd.cut(df['AGE'], 6, labels = [1,2,3,4,5,6])\n#because 1 2 3 ecc are \"categories\" so far and we need numbers\ndf['AgeBin'] = pd.to_numeric(df['AgeBin'])\ndf.loc[(df['AgeBin'] == 6) , 'AgeBin'] = 5","af9a78ae":"df['SE_MA'] = 0\ndf.loc[((df.SEX == 1) & (df.MARRIAGE == 1)) , 'SE_MA'] = 1 #married man\ndf.loc[((df.SEX == 1) & (df.MARRIAGE == 2)) , 'SE_MA'] = 2 #single man\ndf.loc[((df.SEX == 1) & (df.MARRIAGE == 3)) , 'SE_MA'] = 3 #divorced man\ndf.loc[((df.SEX == 2) & (df.MARRIAGE == 1)) , 'SE_MA'] = 4 #married woman\ndf.loc[((df.SEX == 2) & (df.MARRIAGE == 2)) , 'SE_MA'] = 5 #single woman\ndf.loc[((df.SEX == 2) & (df.MARRIAGE == 3)) , 'SE_MA'] = 6 #divorced woman\ncorr_2_cols('SE_MA', 'def_pay')","0c045c8a":"df['SE_AG'] = 0\ndf.loc[((df.SEX == 1) & (df.AgeBin == 1)) , 'SE_AG'] = 1 #man in 20's\ndf.loc[((df.SEX == 1) & (df.AgeBin == 2)) , 'SE_AG'] = 2 #man in 30's\ndf.loc[((df.SEX == 1) & (df.AgeBin == 3)) , 'SE_AG'] = 3 #man in 40's\ndf.loc[((df.SEX == 1) & (df.AgeBin == 4)) , 'SE_AG'] = 4 #man in 50's\ndf.loc[((df.SEX == 1) & (df.AgeBin == 5)) , 'SE_AG'] = 5 #man in 60's and above\ndf.loc[((df.SEX == 2) & (df.AgeBin == 1)) , 'SE_AG'] = 6 #woman in 20's\ndf.loc[((df.SEX == 2) & (df.AgeBin == 2)) , 'SE_AG'] = 7 #woman in 30's\ndf.loc[((df.SEX == 2) & (df.AgeBin == 3)) , 'SE_AG'] = 8 #woman in 40's\ndf.loc[((df.SEX == 2) & (df.AgeBin == 4)) , 'SE_AG'] = 9 #woman in 50's\ndf.loc[((df.SEX == 2) & (df.AgeBin == 5)) , 'SE_AG'] = 10 #woman in 60's and above\ncorr_2_cols('SE_AG', 'def_pay')","de28aa00":"df['Client_6'] = 1\ndf['Client_5'] = 1\ndf['Client_4'] = 1\ndf['Client_3'] = 1\ndf['Client_2'] = 1\ndf['Client_1'] = 1\ndf.loc[((df.PAY_6 == 0) & (df.BILL_AMT6 == 0) & (df.PAY_AMT6 == 0)) , 'Client_6'] = 0\ndf.loc[((df.PAY_5 == 0) & (df.BILL_AMT5 == 0) & (df.PAY_AMT5 == 0)) , 'Client_5'] = 0\ndf.loc[((df.PAY_4 == 0) & (df.BILL_AMT4 == 0) & (df.PAY_AMT4 == 0)) , 'Client_4'] = 0\ndf.loc[((df.PAY_3 == 0) & (df.BILL_AMT3 == 0) & (df.PAY_AMT3 == 0)) , 'Client_3'] = 0\ndf.loc[((df.PAY_2 == 0) & (df.BILL_AMT2 == 0) & (df.PAY_AMT2 == 0)) , 'Client_2'] = 0\ndf.loc[((df.PAY_1 == 0) & (df.BILL_AMT1 == 0) & (df.PAY_AMT1 == 0)) , 'Client_1'] = 0","21b1c8bd":"df['Avg_exp_5'] = ((df['BILL_AMT5'] - (df['BILL_AMT6'] - df['PAY_AMT5']))) \/ df['LIMIT_BAL']\ndf['Avg_exp_4'] = (((df['BILL_AMT5'] - (df['BILL_AMT6'] - df['PAY_AMT5'])) +\n                 (df['BILL_AMT4'] - (df['BILL_AMT5'] - df['PAY_AMT4']))) \/ 2) \/ df['LIMIT_BAL']\ndf['Avg_exp_3'] = (((df['BILL_AMT5'] - (df['BILL_AMT6'] - df['PAY_AMT5'])) +\n                 (df['BILL_AMT4'] - (df['BILL_AMT5'] - df['PAY_AMT4'])) +\n                 (df['BILL_AMT3'] - (df['BILL_AMT4'] - df['PAY_AMT3']))) \/ 3) \/ df['LIMIT_BAL']\ndf['Avg_exp_2'] = (((df['BILL_AMT5'] - (df['BILL_AMT6'] - df['PAY_AMT5'])) +\n                 (df['BILL_AMT4'] - (df['BILL_AMT5'] - df['PAY_AMT4'])) +\n                 (df['BILL_AMT3'] - (df['BILL_AMT4'] - df['PAY_AMT3'])) +\n                 (df['BILL_AMT2'] - (df['BILL_AMT3'] - df['PAY_AMT2']))) \/ 4) \/ df['LIMIT_BAL']\ndf['Avg_exp_1'] = (((df['BILL_AMT5'] - (df['BILL_AMT6'] - df['PAY_AMT5'])) +\n                 (df['BILL_AMT4'] - (df['BILL_AMT5'] - df['PAY_AMT4'])) +\n                 (df['BILL_AMT3'] - (df['BILL_AMT4'] - df['PAY_AMT3'])) +\n                 (df['BILL_AMT2'] - (df['BILL_AMT3'] - df['PAY_AMT2'])) +\n                 (df['BILL_AMT1'] - (df['BILL_AMT2'] - df['PAY_AMT1']))) \/ 5) \/ df['LIMIT_BAL']","d8a5b869":"df['Avg_5'] = ((df['BILL_AMT5'] - (df['BILL_AMT6'] - df['PAY_AMT5']))) \/ df['LIMIT_BAL']\ndf['Avg_4'] = ((df['BILL_AMT4'] - (df['BILL_AMT5'] - df['PAY_AMT4']))) \/ df['LIMIT_BAL']\ndf['Avg_3'] = ((df['BILL_AMT3'] - (df['BILL_AMT4'] - df['PAY_AMT3']))) \/ df['LIMIT_BAL']\ndf['Avg_2'] = ((df['BILL_AMT2'] - (df['BILL_AMT3'] - df['PAY_AMT2']))) \/ df['LIMIT_BAL']\ndf['Avg_1'] = ((df['BILL_AMT1'] - (df['BILL_AMT2'] - df['PAY_AMT1']))) \/ df['LIMIT_BAL']","d863a438":"df['Closeness_6'] = (df.LIMIT_BAL - df.BILL_AMT6) \/ df.LIMIT_BAL\ndf['Closeness_5'] = (df.LIMIT_BAL - df.BILL_AMT5) \/ df.LIMIT_BAL\ndf['Closeness_4'] = (df.LIMIT_BAL - df.BILL_AMT4) \/ df.LIMIT_BAL\ndf['Closeness_3'] = (df.LIMIT_BAL - df.BILL_AMT3) \/ df.LIMIT_BAL\ndf['Closeness_2'] = (df.LIMIT_BAL - df.BILL_AMT2) \/ df.LIMIT_BAL\ndf['Closeness_1'] = (df.LIMIT_BAL - df.BILL_AMT1) \/ df.LIMIT_BAL","ca9e73ca":"df.loc[((df['LIMIT_BAL'] > 0) & (df['LIMIT_BAL'] <= 50000)) , 'limit'] = 10\ndf.loc[((df['LIMIT_BAL'] > 50000) & (df['LIMIT_BAL'] <= 100000)) , 'limit'] = 9\ndf.loc[((df['LIMIT_BAL'] > 100000) & (df['LIMIT_BAL'] <= 150000)) , 'limit'] =8\ndf.loc[((df['LIMIT_BAL'] > 150000) & (df['LIMIT_BAL'] <= 200000)) , 'limit'] = 7\ndf.loc[((df['LIMIT_BAL'] > 200000) & (df['LIMIT_BAL'] <= 300000)) , 'limit'] = 6\ndf.loc[((df['LIMIT_BAL'] > 300000) & (df['LIMIT_BAL'] <= 400000)) , 'limit'] = 5\ndf.loc[((df['LIMIT_BAL'] > 400000) & (df['LIMIT_BAL'] <= 500000)) , 'limit'] = 4\ndf.loc[((df['LIMIT_BAL'] > 500000) & (df['LIMIT_BAL'] <= 600000)) , 'limit'] = 3\ndf.loc[((df['LIMIT_BAL'] > 600000) & (df['LIMIT_BAL'] <= 800000)) , 'limit'] = 2\ndf.loc[((df['LIMIT_BAL'] > 800000) & (df['LIMIT_BAL'] <= 1000000)) , 'limit'] =1","338e1dff":"df['age_lim']=df['AgeBin']*df['limit']","74dd4484":"df['all1'].describe()","6758eb22":"df['all3']=(df['PAY_1']*df['PAY_1']*df['PAY_1'])+(df['PAY_2']*df['PAY_2']*df['PAY_2'])+(df['PAY_3']*df['PAY_3']*df['PAY_3'])+(df['PAY_4']*df['PAY_4']*df['PAY_4'])+(df['PAY_5']*df['PAY_5']*df['PAY_5'])+(df['PAY_6']*df['PAY_6']*df['PAY_6'])","a12ae97b":"df['all1']=df['PAY_1']+df['PAY_2']+df['PAY_3']+df['PAY_4']+df['PAY_5']+df['PAY_6']","79b79cc1":"df['all2']=(df['PAY_1']*df['PAY_1'])+(df['PAY_2']*df['PAY_2'])+(df['PAY_3']*df['PAY_3'])+(df['PAY_4']*df['PAY_4'])+(df['PAY_5']*df['PAY_5'])+(df['PAY_6']*df['PAY_6'])","fbba27da":"y = df['def_pay'].copy()","fc51a874":"df['AGE'].describe()","87a0276f":"features =  ['LIMIT_BAL', 'EDUCATION', 'MARRIAGE', 'PAY_1','PAY_2', 'PAY_3', \n            'PAY_4', 'PAY_5', 'PAY_6','BILL_AMT1', 'BILL_AMT2',\n            'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6', 'PAY_AMT1',\n            'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6', 'AGE',\n            'SE_MA', 'AgeBin', 'SE_AG', 'Avg_exp_5', 'Avg_exp_4','all1','Avg_5','Avg_4','Avg_3','Avg_2','Avg_1',\n            'Avg_exp_3', 'Avg_exp_2', 'Avg_exp_1', 'Closeness_5','all3','all2',\n            'Closeness_4', 'Closeness_3', 'Closeness_2','Closeness_1']\nX = df[features].copy()\nX.columns\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","6575d10e":"def get_feature_importance(clsf, ftrs):\n    imp = clsf.feature_importances_.tolist()\n    feat = ftrs\n    result = pd.DataFrame({'feat':feat,'score':imp})\n    result = result.sort_values(by=['score'],ascending=False)\n    plt.figure(figsize=(10,9))\n    sns.set(style=\"whitegrid\",font=\"Arial\",font_scale=1.2)\n    data1=result.iloc[:10,:]\n    g=sns.catplot(x='score',y='feat',data=data1,kind=\"bar\",color=\"#E21932\",aspect=2.5)\n    plt.show()\n    return result\n","cf1cfb6e":"param_grid = {'max_depth': np.arange(5, 10),\n             'criterion' : ['gini','entropy'],\n             'max_leaf_nodes': [10,20,50,100],\n             'min_samples_split': [2,5,10,20,50],\n             'class_weight' : ['balanced']}\n\n# create the grid\ngrid_tree = GridSearchCV(DecisionTreeClassifier(), param_grid, cv = 5, scoring= 'roc_auc')\n# the cv option will be clear in a few cells\n\n#training\ngrid_tree.fit(X_train, y_train)\n#let's see the best estimator\nprint(grid_tree.best_estimator_)\n#with its score\nprint(grid_tree.best_score_)","e8952349":"tree2=DecisionTreeClassifier(class_weight='balanced', criterion='entropy',\n                       max_depth=9, max_features=None, max_leaf_nodes=50,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=50,\n                       min_weight_fraction_leaf=0.0, presort=False,\n                       random_state=None, splitter='best')\ntree2.fit(X_train, y_train)\npredictions = tree2.predict_proba(X_test)[:,1]\nauc4=roc_auc_score(y_test, predictions)\nprint(auc4)","695825c5":"predictions = tree2.predict(X_test)\nf1_score(y_true = y_test, y_pred = predictions)\nprint(\"-------------\")\nprint(\"f1 score: {}\".format(round(f1_score(y_true = y_test, y_pred = predictions),3)))\nprint(\"Accuracy: {}\".format(round(accuracy_score(y_true = y_test, y_pred = predictions),3)))\nprint(\"-------------\")\nprint(get_feature_importance(tree2, features))\nprint(\"-------------\")\nTP = np.sum(np.logical_and(predictions == 1, y_test == 1))\nTN = np.sum(np.logical_and(predictions == 0, y_test == 0))\nFP = np.sum(np.logical_and(predictions == 1, y_test == 0))\nFN = np.sum(np.logical_and(predictions == 0, y_test == 1))\npred = len(predictions)\n\nprint('True Positives: {}'.format(TP))\nprint('False Positive: {}'.format(FP))\nprint('True Negative: {}'.format(TN))\nprint('False Negative: {}'.format(FN))\nprint('Precision: {}'.format(round(TP\/(TP+FP),2)))\nprint('Recall: {}'.format(round(TP\/(TP+FN),2)))\nprint('Problematic ratio: {}'.format(round(FN\/(FN+TP),2)))","8c487e17":"from sklearn import tree\nimport graphviz\ndot_data = tree.export_graphviz(tree2, out_file=None)  \ngraph = graphviz.Source(dot_data)  \ngraph","bf6df3bc":"def get_feature_importance(clsf, ftrs):\n    imp = clsf.feature_importances_.tolist()\n    feat = ftrs\n    result = pd.DataFrame({'feat':feat,'score':imp})\n    result = result.sort_values(by=['score'],ascending=False)\n    sns.set(style=\"whitegrid\",font=\"Arial\",font_scale=1.2)\n    data1=result.iloc[:10,:]\n    g=sns.catplot(x='score',y='feat',data=data1,kind=\"bar\",color=\"#E21932\",aspect=2)\n    plt.show()\n    return result\n\n","0627e551":"param_grid = {'n_estimators': [100,200,300,400],\n              'criterion': ['entropy', 'gini'], 'n_jobs' : [-1]}\ngrid_forest = GridSearchCV(RandomForestClassifier(), param_grid, scoring = 'roc_auc', cv=5)\n%time grid_forest = grid_forest.fit(X_train, y_train)\nprint(grid_forest.best_estimator_)\nprint(grid_forest.best_score_)\nforest_downsampled = grid_forest.best_estimator_","f86694ae":"RF2 =RandomForestClassifier(bootstrap=True, class_weight=None, criterion='entropy',\n                       max_depth=None, max_features='auto', max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, n_estimators=300,\n                       n_jobs=-1, oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)\nRF2.fit(X_train, y_train)\npredictions = RF2.predict_proba(X_test)[:,1]\nauc3=roc_auc_score(y_test, predictions)","30ba5207":"print(auc3)","0b2e38e7":"RF2.fit(X_train, y_train)\npredictions = RF2.predict(X_test)\nprint(\"-------------\")\nprint(\"f1 score: {}\".format(round(f1_score(y_true = y_test, y_pred = predictions),3)))\nprint(\"Accuracy: {}\".format(round(accuracy_score(y_true = y_test, y_pred = predictions),3)))\nprint(\"-------------\")\nprint(get_feature_importance(RF2, features))\nprint(\"-------------\")\nTP = np.sum(np.logical_and(predictions == 1, y_test == 1))\nTN = np.sum(np.logical_and(predictions == 0, y_test == 0))\nFP = np.sum(np.logical_and(predictions == 1, y_test == 0))\nFN = np.sum(np.logical_and(predictions == 0, y_test == 1))\npred = len(predictions)\n\nprint('True Positives: {}'.format(TP))\nprint('False Positive: {}'.format(FP))\nprint('True Negative: {}'.format(TN))\nprint('False Negative: {}'.format(FN))\nprint('Precision: {}'.format(round(TP\/(TP+FP),2)))\nprint('Recall: {}'.format(round(TP\/(TP+FN),2)))\nprint('Problematic ratio: {}'.format(round(FN\/(FN+TP),2)))","ff898c2b":"predictions_tree = tree2.predict_proba(X_test)[:,1]\nfpr1, tpr1, _ = metrics.roc_curve(y_test,  predictions_tree)\n\npredictions_rf = RF2.predict_proba(X_test)[:,1]\nfpr2, tpr2, _ = metrics.roc_curve(y_test,  predictions_rf)\n\n\nsns.set(style=\"white\",font=\"Arial\",font_scale=1.5)\n\n\nplt.figure(figsize=(10,10))\nplt.plot([0, 1], [0, 1], 'k--')\n\nplt.plot(fpr1,tpr1,label=\"Decision Tree, auc=\"+str(round(auc4,2)),color=\"#E21932\")\nplt.plot(fpr2,tpr2,label=\"Random forest, auc=\"+str(round(auc3,2)),color=\"black\")\nplt.legend(loc=4, facecolor='white',fontsize=16)\nsns.despine(left=True)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title(\"ROC\")","c8c72198":" <font size=\"6\">\u8fd0\u8425\u60c5\u51b5 Business Condition<\/font>\n","a9fa2086":"<font size=\"4\">\u6027\u522b Sex<\/font>","1661aa90":" <font size=\"5\">\u4e3a\u4ec0\u4e489\u6708\u7684\u8fdd\u7ea6\u7387\u8f834\u6708\u9ad8\u51fa\u8bb8\u591a\uff1f <\/font>","c7ee86a7":"<font size=\"5\">\u51b3\u7b56\u6811 Decision tree<\/font>","b25185e8":"\n<font size=\"3\">\u4fe1\u7528\u5361\u6700\u4f4e\u989d\u5ea6\u4e3a1\u4e07\u5143\uff08\u65b0\u53f0\u5e01 \u4e0b\u540c\uff09\uff0c\u6700\u9ad8\u989d\u5ea6\u4e3a100\u4e07\u5143\uff0c\u4e2d\u4f4d\u6570\u989d\u5ea6\u4e3a14\u4e07\u5143\u3002\u4ee5\u4e0b\u662f\u8d37\u6b3e\u989d\u5ea6\u7684\u5206\u5e03\u60c5\u51b5\u3002<\/font>","105c36f7":"22% clients defaulted in October.   \n10\u6708\u670922%\u7684\u5ba2\u6237\u8fdd\u7ea6\u3002 ","fc904ec4":"<font size=\"4\">\u5ba2\u6237\u753b\u50cf Clients portrait<\/font>","5ac256d6":"<font size=\"4\">\u8d26\u5355 Bill<\/font>","744585fd":"<font size=\"5\">\u968f\u673a\u68ee\u6797 Random forest<\/font>","bff8ef00":"I will do both business analysis of the bank and basic machine learning model in this kernel.\n\n\u672c\u6587\u4e3b\u8981\u5305\u542b\u4e24\u65b9\u9762\u5185\u5bb9\uff1a\u4fe1\u7528\u5361\u6570\u636e\u5206\u6790\u3001\u9884\u6d4b\u8fdd\u7ea6\u98ce\u9669\u7684\u6570\u636e\u6316\u6398\u7b97\u6cd5\u3002","ab3bd92f":" <font size=\"3\">\u5404\u6708\u4efd\u903e\u671f\u7387(\u4ee5\u5ba2\u6237\u8ba1) Default rate<\/font>","931cd57b":" <font size=\"5\">Why default rate in September is much higher than in April?<\/font>","f8c5f7e8":"<font size=\"5\">\u673a\u5668\u5b66\u4e60 Machine learning<\/font>","3cd51fe2":"<font size=\"4\">\u5b66\u5386 Education<\/font>","9da28261":" <font size=\"3\">\u534a\u5e74\u5185\u5e73\u5747\u903e\u671f\u671f\u6570 Overdue periods<\/font>","4bb55bf0":"<font size=\"4\">\u5e74\u9f84 Age<\/font>","c641ec68":"<font size=\"3\">\u5982\u679c\u5c06\u903e\u671f\u8d85\u8fc73\u4e2a\u6708\u7684\u5f85\u8fd8\u6b3e\u79f0\u4e3a\u4e0d\u826f\u8bb0\u5f55\uff0c\u90a3\u4e48\u6309\u5ba2\u6237\u4eba\u6570\u8ba1\uff0c\u4e0d\u826f\u7387\u4e3a0.47% <\/font>","4006af80":"<font size=\"5\">\u7528\u6237\u7279\u5f81 Client profiles<\/font>","0b16fb49":"<font size=\"4\">\u5a5a\u59fb Marriage<\/font>","025bba94":"<font size=\"4\">\u7279\u5f81\u5de5\u7a0b Feature engineering<\/font>","58b73a03":"<font size=\"5\">\u968f\u673a\u68ee\u6797 Random forest<\/font>","cfbec1b1":"**Drop missing values**\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014","3afe9b4f":" <font size=\"3\">\u5404\u6708\u4efd\u903e\u671f\u7387(\u4ee5\u91d1\u989d\u8ba1) Delinquency<\/font>","53ed56d2":"<font size=\"5\">\u6570\u636e\u6e05\u6d17 Data cleaning<\/font>","73b29ee6":"<font size=\"5\">\u51b3\u7b56\u6811 Decision tree<\/font>","6d9bf20f":"There are 25 variables:\n\n* ID: ID of each client\n* LIMIT_BAL: Amount of given credit in NT dollars (includes individual and family\/supplementary credit\n* SEX: Gender (1=male, 2=female)\n* EDUCATION: (1=graduate school, 2=university, 3=high school, 4=others, 5=unknown, 6=unknown)\n* MARRIAGE: Marital status (1=married, 2=single, 3=others)\n* AGE: Age in years\n* PAY_0: Repayment status in September, 2005 (-1=pay duly, 1=payment delay for one month, 2=payment delay for two months, ... 8=payment delay for eight months, 9=payment delay for nine months and above)\n* PAY_2: Repayment status in August, 2005 (scale same as above)\n* PAY_3: Repayment status in July, 2005 (scale same as above)\n* PAY_4: Repayment status in June, 2005 (scale same as above)\n* PAY_5: Repayment status in May, 2005 (scale same as above)\n* PAY_6: Repayment status in April, 2005 (scale same as above)\n* BILL_AMT1: Amount of bill statement in September, 2005 (NT dollar)\n* BILL_AMT2: Amount of bill statement in August, 2005 (NT dollar)\n* BILL_AMT3: Amount of bill statement in July, 2005 (NT dollar)\n* BILL_AMT4: Amount of bill statement in June, 2005 (NT dollar)\n* BILL_AMT5: Amount of bill statement in May, 2005 (NT dollar)\n* BILL_AMT6: Amount of bill statement in April, 2005 (NT dollar)\n* PAY_AMT1: Amount of previous payment in September, 2005 (NT dollar)\n* PAY_AMT2: Amount of previous payment in August, 2005 (NT dollar)\n* PAY_AMT3: Amount of previous payment in July, 2005 (NT dollar)\n* PAY_AMT4: Amount of previous payment in June, 2005 (NT dollar)\n* PAY_AMT5: Amount of previous payment in May, 2005 (NT dollar)\n* PAY_AMT6: Amount of previous payment in April, 2005 (NT dollar)\n* default.payment.next.month: Default payment (1=yes, 0=no)\n"}}