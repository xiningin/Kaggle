{"cell_type":{"00a9dff0":"code","abc47bc8":"code","df796869":"code","9bf2ffb8":"code","2ea8d91e":"code","da46fd5b":"code","b98cb4de":"code","151fcc36":"code","d6bdcd49":"code","b7029962":"code","a8ebd66c":"code","fc1ec964":"code","78546f01":"code","434db9a9":"code","1c2052d5":"code","57b369f6":"code","31f879af":"code","6691914c":"code","e84a551f":"code","457fa958":"code","417ef6ce":"code","52e3c478":"code","0bca8784":"code","2be197a4":"code","ea3cc069":"code","5502b9c8":"code","a55038d6":"code","9049da53":"code","791a2755":"markdown","a75cb5dc":"markdown","be6086b8":"markdown","6f88b09e":"markdown","f67069b7":"markdown","0bca5940":"markdown","cd949dcb":"markdown","ec79f48b":"markdown","1197187d":"markdown","45264d79":"markdown"},"source":{"00a9dff0":"import numpy as np \nimport pandas as pd \nimport pandas_profiling\nfrom sklearn.pipeline import make_union, make_pipeline\nfrom sklearn.preprocessing import FunctionTransformer, StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn import linear_model\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nimport sklearn.metrics\nfrom sklearn.model_selection import GridSearchCV\nimport xgboost as xgboost\n\n%matplotlib inline\nimport matplotlib.pyplot as plt  # Matlab-style plotting\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","abc47bc8":"df_train = pd.read_csv('..\/input\/train.csv')\ndf_train.head(10)","df796869":"df_test = pd.read_csv('..\/input\/test.csv')\ndf_test.head()","9bf2ffb8":"#pandas_profiling.ProfileReport(df_train)","2ea8d91e":"df_train.info()","da46fd5b":"def fill_null(df):\n    df[\"3SsnPorch\"] = df[\"3SsnPorch\"].fillna(0)\n    df[\"Alley\"] = df[\"Alley\"].fillna(\"None\")\n    df[\"BsmtFinSF2\"] = df[\"BsmtFinSF2\"].fillna(0)\n    df[\"BsmtHalfBath\"] = df[\"BsmtHalfBath\"].fillna(0)\n    df[\"EnclosedPorch\"] = df[\"EnclosedPorch\"].fillna(0)\n    df[\"Fence\"] = df[\"Fence\"].fillna(\"None\")\n    df[\"HalfBath\"] = df[\"HalfBath\"].fillna(0)\n    df[\"LowQualFinSF\"] = df[\"LowQualFinSF\"].fillna(0)\n    df[\"MiscFeature\"] = df[\"MiscFeature\"].fillna(\"None\")\n    df[\"MiscVal\"] = df[\"MiscVal\"].fillna(0)\n    df[\"PoolArea\"] = df[\"PoolArea\"].fillna(0)\n    df[\"ScreenPorch\"] = df[\"ScreenPorch\"].fillna(0)\n    return df\n    \ndf_train = fill_null(df_train)\ndf_test = fill_null(df_test)","b98cb4de":"ids_train = df_train['Id']\ndf_train = df_train.drop('Id',1)\n\nids_test = df_test['Id']\ndf_test = df_test.drop('Id',1)","151fcc36":"def get_cat_cols(df):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64'] \n    newdf = df.select_dtypes(exclude=numerics)\n    return newdf.columns\n\ndef get_num_cols(df):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64'] \n    newdf = df.select_dtypes(include=numerics)\n    return newdf.columns","d6bdcd49":"def fill(df):\n    imp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\n    imp_mean.fit(df[get_num_cols(df)])\n    array_transform = imp_mean.transform(df[get_num_cols(df)])\n    df[get_num_cols(df)] = array_transform\n\n    imp_most_frequent = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\n    imp_most_frequent.fit(df[get_cat_cols(df)])\n    array_transform = imp_most_frequent.transform(df[get_cat_cols(df)])\n    df[get_cat_cols(df)] = array_transform\n    \n    return df\n\ndf_train = fill(df_train)\ndf_test = fill(df_test)","b7029962":"#\u0432\u044b\u0431\u0440\u043e\u0441\u044b\nfor col in get_num_cols(df_train):\n    fig, ax = plt.subplots()\n    ax.scatter(x = df_train[col], y = df_train['SalePrice'])\n    plt.ylabel('SalePrice', fontsize=13)\n    plt.xlabel(col, fontsize=13)\n    plt.show()","a8ebd66c":"#\u0443\u0434\u0430\u043b\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0438\u043c\u0435\u044e\u0449\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u043e \u043a\u0430\u043a\u0438\u043c-\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\ndf_train = df_train.drop(df_train[(df_train['LotFrontage']>300) & (df_train['SalePrice']<300000)].index)\ndf_train = df_train.drop(df_train[(df_train['LotArea']>150000) & (df_train['SalePrice']<400000)].index)\ndf_train = df_train.drop(df_train[(df_train['YearBuilt']<2000) & (df_train['SalePrice']>700000)].index)\ndf_train = df_train.drop(df_train[(df_train['YearRemodAdd']<2000) & (df_train['SalePrice']>700000)].index)\ndf_train = df_train.drop(df_train[(df_train['MasVnrArea']>1250) & (df_train['SalePrice']<700000)].index)\ndf_train = df_train.drop(df_train[(df_train['BsmtFinSF2']>1300) & (df_train['SalePrice']<400000)].index)\ndf_train = df_train.drop(df_train[(df_train['WoodDeckSF']>800) & (df_train['SalePrice']<500000)].index)","fc1ec964":"## \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0446\u0435\u043b\u0435\u0432\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0443\ny_train = np.log(df_train['SalePrice'])\ndf_train = df_train.drop('SalePrice',1)","78546f01":"def do_scalar(df):\n    scaler = StandardScaler()\n    scaler.fit(df[get_num_cols(df)])\n    df[get_num_cols(df)] = scaler.transform(df[get_num_cols(df)])\n    return df\n    \ndf_train = do_scalar(df_train)\ndf_test = do_scalar(df_test)","434db9a9":"def create_dummies(df,column_name):\n    dummies = pd.get_dummies(df[column_name],prefix=column_name)\n    df = pd.concat([df,dummies],axis=1)\n    df = df.drop(column_name,1)\n    return df","1c2052d5":"for col in get_cat_cols(df_train):\n    df_train = create_dummies(df_train,col)\n    df_test = create_dummies(df_test,col)","57b369f6":"def del_corr(df):\n    df = df.drop('Exterior2nd_CBlock',1)\n    df = df.drop('Exterior2nd_CmentBd',1)\n    df = df.drop('Exterior2nd_MetalSd',1)\n    df = df.drop('Exterior2nd_VinylSd',1)\n    df = df.drop('SaleType_New',1)\n    return df\n\ndf_train = del_corr(df_train)\ndf_test = del_corr(df_test)","31f879af":"for col in df_train.columns:\n    if not col in df_test.columns:\n        df_test[col]=0\nfor col in df_test.columns:\n    if not col in df_train.columns:\n         df_test = df_test.drop(col,1)","6691914c":"ridgeCV = linear_model.RidgeCV()","e84a551f":"ridgeCV.fit(df_train[df_train.columns], y_train)","457fa958":"y_pred = ridgeCV.predict(df_test[df_test.columns])","417ef6ce":"submission_df = {\"Id\": ids_test,\n                 \"SalePrice\": y_pred}\nsubmission = pd.DataFrame(submission_df)\nsubmission.to_csv('submission_ridge.csv', index=False)","52e3c478":"regrRFR = RandomForestRegressor()\nregrRFR.fit(df_train[df_train.columns], y_train)\ny_pred = regrRFR.predict(df_test[df_test.columns])\nsubmission_df = {\"Id\": ids_test,\n                 \"SalePrice\": np.e**y_pred}\nsubmission = pd.DataFrame(submission_df)\nsubmission.to_csv('submission_RF.csv', index=False)","0bca8784":"#gbrt = GradientBoostingRegressor()\n#param_grid = {'max_depth': [2,3,4],'n_estimators': [100,150,200,500,700,1000],'learning_rate':[0.01,0.05, 0.1, 0.3], 'loss': ['ls', 'lad', 'huber', 'quantile']}\n#model = GridSearchCV(estimator=gbrt, param_grid=param_grid, n_jobs=-1, cv=7, scoring='neg_mean_squared_error')\n#model.fit(df_train[df_train.columns], y_train)\n\n#print('GradientBoostingRegressor...')\n#print('Best Params:')\n#print(model.best_params_)\n#print('Best CV Score:')\n#print(-model.best_score_)","2be197a4":"#GradientBoostingRegressor...\n#Best Params:\n#{'learning_rate': 0.1, 'loss': 'huber', 'max_depth': 2, 'n_estimators': 1000}\n#Best CV Score:\n#0.014604507039396397","ea3cc069":"gbrt = GradientBoostingRegressor(max_depth=2,n_estimators=1000,learning_rate=0.1, loss = 'huber')\ngbrt.fit(df_train[df_train.columns], y_train)\ny_pred = gbrt.predict(df_test[df_test.columns])\nsubmission_df = {\"Id\": ids_test,\n                 \"SalePrice\": np.e**y_pred}\nsubmission = pd.DataFrame(submission_df)\nsubmission.to_csv('submission_GBR.csv', index=False)","5502b9c8":"#param_grid = {\n#    'max_depth': [2, 3, 4],\n#    'n_estimators': [200, 500, 1000, 1500],\n#    'learning_rate': [0.005, 0.01, 0.025, 0.1]\n#}\n#xgb = xgboost.XGBRegressor(nthread=-1)\n#model = GridSearchCV(estimator=xgb, param_grid=param_grid, n_jobs=-1, cv=7, scoring='neg_mean_squared_error')\n#model.fit(df_train[df_train.columns].as_matrix(), y_train)\n\n#print('XGBRegressor...')\n#print('Best Params:')\n#print(model.best_params_)\n#print('Best CV Score:')\n#print(-model.best_score_)","a55038d6":"#\/opt\/conda\/lib\/python3.6\/site-packages\/ipykernel_launcher.py:8: FutureWarning: Method .as_matrix will be removed in a future version. Use .values instead.\n  \n#XGBRegressor...\n#Best Params:\n#{'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 500}\n#Best CV Score:\n#0.014560327485736105","9049da53":"xgb = xgboost.XGBRegressor(nthread=-1, learning_rate=0.1, max_depth=3, n_estimators=500)\nxgb.fit(df_train[df_train.columns].as_matrix(), y_train)\ny_pred = xgb.predict(df_test[df_test.columns].as_matrix())\nsubmission_df = {\"Id\": ids_test,\n                 \"SalePrice\": np.e**y_pred}\nsubmission = pd.DataFrame(submission_df)\nsubmission.to_csv('submission_xgb.csv', index=False)","791a2755":"## \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0433\u0434\u0435 \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 None \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c","a75cb5dc":"## \u041f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u0441\u0435\u0442\u0435 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u0432 \u0443\u0447\u0435\u0431\u043d\u043e\u043c. \u0422\u0430\u043a \u043a\u0430\u043a \u0438\u0437-\u0437\u0430 \u0434\u0430\u043c\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u043d\u0438 \u043c\u043e\u0433\u043b\u0438 \u0441\u0442\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u043c\u0438","be6086b8":"## \u0421\u0434\u0435\u043b\u0430\u0435\u043c \u0435\u0434\u0438\u043d\u043e\u0435 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","6f88b09e":"## \u0423\u0434\u0430\u043b\u0438\u043c \u0441\u0438\u043b\u044c\u043d\u043e \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0449\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f","f67069b7":"## \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u0432 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438","0bca5940":"## Id \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0441\u0435\u0440\u0438\u044e","cd949dcb":"## \u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435","ec79f48b":"## GradientBoostingRegressor \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c GridSearchCV","1197187d":"## \u041e\u0431\u0443\u0447\u0438\u043c \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0438\u0434\u0436 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438","45264d79":"## \u041f\u0440\u0438\u043c\u0435\u043d\u0438\u043c RandomForest"}}