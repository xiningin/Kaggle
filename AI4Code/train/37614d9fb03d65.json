{"cell_type":{"859d9e60":"code","3b00e584":"code","91582a0a":"code","02daddc1":"code","bb56587f":"code","c2a88961":"code","6507b231":"code","37a19470":"code","8a76c4bd":"code","b0b3ac7d":"code","18a231b5":"code","241ad73c":"code","31d222a2":"code","e20a8ff3":"code","d7398cc8":"code","2a912ea4":"code","3f411a49":"code","019b1150":"code","e8f7ee9b":"code","8439078f":"code","e036c765":"code","4c005ec7":"code","8b890bf6":"code","54070aa5":"code","03faf8b8":"code","5ac4e066":"code","98da3f36":"code","03000e65":"code","be98e8eb":"code","6d7af957":"code","d7467aa2":"code","523e7c62":"code","5492bcea":"code","9f084c82":"code","9c173807":"code","4cc8baed":"code","e070aaac":"code","5149a3e7":"code","67c4ef31":"code","e609066e":"code","cbb0bad1":"code","b9db21fd":"code","db037142":"code","8383085c":"code","db68f1e0":"code","c7dd6577":"code","d3c20563":"code","ebc15665":"code","d10b4114":"code","1ea28477":"code","7c3a1922":"code","70bd4070":"code","bb0c052a":"code","7328694c":"code","88410d54":"code","b08d50bf":"code","35025ea0":"code","102a8fd9":"code","70192d9e":"markdown","15bcee9f":"markdown","92adfe78":"markdown","16aa801f":"markdown","f3ab58e5":"markdown","86d6ce5b":"markdown","c1cc79fa":"markdown","40454a72":"markdown","6705cde5":"markdown","6e4517b2":"markdown","626af75c":"markdown","07ca7ef6":"markdown","9290e370":"markdown","59ba4d82":"markdown","39155bef":"markdown","5e2c3e39":"markdown","142206ce":"markdown","ef6824fe":"markdown","fa10b75c":"markdown","7d05c2f4":"markdown","54dd60eb":"markdown","5fc3113c":"markdown","d8953607":"markdown","9c9b4944":"markdown"},"source":{"859d9e60":"\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","3b00e584":"data = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')#, names=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome'])\nprint(data.shape)","91582a0a":"data.head()","02daddc1":"data.tail()","bb56587f":"data.columns","c2a88961":"data.describe()","6507b231":"data.info()","37a19470":"columns=data.columns\ncolumns","8a76c4bd":"def distplot(column):\n  df = data[column]\n  sns.distplot(df)\n  plt.show()\n","b0b3ac7d":"sns.set_style('darkgrid')\nfor column in columns:\n  distplot(column)","18a231b5":"df = data[(data.Glucose == 0) | (data.BloodPressure==0) | (data.Insulin == 0) | (data.SkinThickness==0) | (data.BMI ==0)]","241ad73c":"df.describe()","31d222a2":"def box(column):\n  sns.boxplot(x='Outcome', y=column, data=data)\n  plt.show()","e20a8ff3":"for column in columns:\n  box(column)","d7398cc8":"def violin(column):\n  sns.violinplot(x='Outcome', y=column, data=data)\n  plt.show()","2a912ea4":"for column in columns:\n  violin(column)","3f411a49":"def scatter(x, y):\n  sns.scatterplot(x=x, y=y, hue='Outcome', data=data, marker='x')\n  plt.show()","019b1150":"for i in range(1,8):\n  scatter(columns[0], columns[i])","e8f7ee9b":"df = pd.DataFrame(index=data.columns)\nfor column in columns:\n  df.loc[column, 'count'] = int(len(data[data[column] == 0]))\ndf","8439078f":"update_column = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\nfor column in update_column:\n  data.loc[(data[column] == 0) & (data['Outcome'] == 0), column] = data[data.Outcome == 0][column].mean()\n  data.loc[(data[column] == 0) & (data['Outcome'] == 1), column] = data[data.Outcome == 1][column].mean()\ndata","e036c765":"data.describe()","4c005ec7":"for column in columns:\n  violin(column)","8b890bf6":"from sklearn.model_selection import train_test_split\n\nx_train, x_test,y_train, y_test = train_test_split(data[columns[:-1]], data.iloc[:,-1], random_state=77)","54070aa5":"from sklearn.tree import DecisionTreeClassifier\n\ndec_model = DecisionTreeClassifier()\ndec_model.fit(x_train, y_train)\nprint(\"Train Accuracy: \", dec_model.score(x_train,y_train))\nprint(\"Test Accuracy: \", dec_model.score(x_test, y_test))","03faf8b8":"%%time\nfrom sklearn.model_selection import GridSearchCV\n\nparams = {'criterion':['gini', 'entropy'],\n          'max_depth': [5, 10, 20, 25, 30],\n          'max_features': [3, 5, 7, 9],\n          'max_leaf_nodes': [2,5,6, 9, 10, 15],\n          'splitter': ['best', 'random']}\ngrid = GridSearchCV(DecisionTreeClassifier(), params, cv=10)\ngrid.fit(x_train, y_train)\nprint(grid.best_params_)\nprint(\"Score: \", grid.best_score_)\n#grid","5ac4e066":"grid.score(x_test, y_test)","98da3f36":"from sklearn import tree\nplt.figure(figsize=(18, 10))\ntree.plot_tree(grid.best_estimator_, filled=True)","03000e65":"grid","be98e8eb":"grid.best_estimator_","6d7af957":"pd.Series(grid.best_estimator_.feature_importances_, index=columns[:8]).nlargest(8).plot(kind='barh')\n","d7467aa2":"x_train_updated = x_train[['Glucose', 'Age', 'Insulin']]\nx_test_updated = x_test[['Glucose', 'Age', 'Insulin']]\n\nparams = {'criterion':['gini', 'entropy'],\n          'max_depth': [5, 10, 20, 25, 30],\n          'max_features': [3, 5, 7, 9],\n          'max_leaf_nodes': [2,5,6, 9, 10, 15],\n          'splitter': ['best', 'random']}\ngrid = GridSearchCV(DecisionTreeClassifier(), params, cv=10)\ngrid.fit(x_train_updated, y_train)\nprint(grid.best_params_)\nprint(\"Score: \", grid.best_score_)","523e7c62":"grid.score(x_test_updated, y_test)","5492bcea":"%%time\nfrom sklearn.ensemble import RandomForestClassifier\n\nparams = params = {'criterion':['gini', 'entropy'],\n          'max_depth': [5, 10, 20, 25, 30],\n          'max_features': [3, 5, 7, 9],\n          'max_leaf_nodes': [2,5,6, 9, 10, 15],\n          #'splitter': ['best', 'random'],\n          'n_estimators':[1,3,5,10]}\nrandom_grid = GridSearchCV(RandomForestClassifier(), params, cv=10)\nrandom_grid.fit(x_train, y_train)\nprint(random_grid.best_params_)\nprint(random_grid.best_score_)","9f084c82":"random_grid.score(x_test, y_test)","9c173807":"clf = random_grid.best_estimator_","4cc8baed":"pd.Series(random_grid.best_estimator_.feature_importances_, columns[:8]).nlargest(8).plot(kind='barh')","e070aaac":"from sklearn.metrics import confusion_matrix \ncon_matrix = confusion_matrix(y_test, clf.predict(x_test))\n\nsns.heatmap(con_matrix, annot=True, fmt='g')\nplt.xticks([.5,1.5], ['No', 'Yes'])\nplt.yticks([1.5,0.5],['Yes', 'No'],)\nplt.xlabel('Predicted')\nplt.ylabel('Actual')\nplt.title('Confusion Matric');","5149a3e7":"data['Outcome'].value_counts()","67c4ef31":"%%time\nfrom sklearn.ensemble import RandomForestClassifier\n\nparams = params = {'criterion':['gini', 'entropy'],\n          'max_depth': [5, 10, 20, 25, 30],\n          'max_features': [3, 5, 7, 9],\n          'max_leaf_nodes': [2,5,6, 9, 10, 15],\n          #'splitter': ['best', 'random'],\n          'n_estimators':[1,3,5,10],\n          'class_weight':['balanced']}\nrandom_grid = GridSearchCV(RandomForestClassifier(), params, cv=10)\nrandom_grid.fit(x_train, y_train)\nprint(random_grid.best_params_)\nprint(random_grid.best_score_)","e609066e":"random_grid.score(x_test, y_test)","cbb0bad1":"clf = random_grid.best_estimator_\ncmatrix = confusion_matrix(y_test,clf.predict(x_test))\nsns.heatmap(cmatrix, annot=True, fmt='g')\nplt.xticks([.5,1.5], ['No', 'Yes'])\nplt.yticks([1.5,0.5],['Yes', 'No'],)\nplt.xlabel('Predicted')\n\nplt.ylabel('Actual')\nplt.title('Confusion Matric');","b9db21fd":"from sklearn.utils import resample, shuffle\ndata_pos = data[data.Outcome == 1]\ndata_neg = data[data.Outcome == 0]\ndata_pos = resample(data_pos, n_samples=500, random_state=34)\ndata1 = pd.concat([data_pos, data_neg], axis=0)\nnew_data = shuffle(data1, random_state=34)","db037142":"new_data.describe()","8383085c":"x_train, x_test,y_train, y_test = train_test_split(new_data[columns[:-1]], new_data.iloc[:,-1], random_state=77)","db68f1e0":"%%time\nfrom sklearn.ensemble import RandomForestClassifier\n\nparams = params = {'criterion':['gini', 'entropy'],\n          'max_depth': [5, 10, 20, 25, 30],\n          'max_features': [3, 5, 7, 9],\n          'max_leaf_nodes': [2,5,6, 9, 10, 15],\n          #'splitter': ['best', 'random'],\n          'n_estimators':[1,3,5,10]}\nrandom_grid = GridSearchCV(RandomForestClassifier(), params, cv=10)\nrandom_grid.fit(x_train, y_train)\nprint(random_grid.best_params_)\nprint(random_grid.best_score_)","c7dd6577":"random_grid.score(x_test, y_test)","d3c20563":"clf = random_grid.best_estimator_\ncmatrix = confusion_matrix(y_test,clf.predict(x_test))\nsns.heatmap(cmatrix, annot=True, fmt='g')\nplt.xticks([.5,1.5], ['No', 'Yes'])\nplt.yticks([1.5,0.5],['Yes', 'No'],)\nplt.xlabel('Predicted')\n\nplt.ylabel('Actual')\nplt.title('Confusion Matric');","ebc15665":"%%time\nfrom sklearn.svm import SVC\nparams = {'C':[0.5,1,10,100],\n          'gamma':['scale', 1, 0.1,0.01, 0.001, 0.0001],\n          'kernel':['rbf']}\n\ngrid = GridSearchCV(SVC(), params, cv=10, scoring='accuracy')\ngrid.fit(x_train, y_train)\nprint(grid.best_params_)\nprint(grid.best_score_)","d10b4114":"grid.score(x_test,y_test)","1ea28477":"cmatrix = confusion_matrix(y_test, grid.predict(x_test))\nsns.heatmap(cmatrix, annot=True, fmt='g')\nplt.xticks([.5,1.5], ['No', 'Yes'])\nplt.yticks([1.5,0.5],['Yes', 'No'],)\nplt.xlabel('Predicted')\n\nplt.ylabel('Actual')\nplt.title('Confusion Matric');","7c3a1922":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import confusion_matrix ","70bd4070":"%%time\nprint(\"wwe\")\nfrom sklearn.svm import SVC\nparams = {'C':[0.5,1,10,100],\n          'gamma':['scale', 1, 0.1,0.01, 0.001, 0.0001],\n          'kernel':['rbf'],\n          'class_weight':['balanced']}\n\ngrid = GridSearchCV(SVC(), params, cv=10, scoring='accuracy')\ngrid.fit(x_train, y_train)\nprint(grid.best_params_)\nprint(grid.best_score_)","bb0c052a":"grid.score(x_test,y_test)","7328694c":"cmatrix = confusion_matrix(y_test, grid.predict(x_test))\nsns.heatmap(cmatrix, annot=True, fmt='g')\nplt.xticks([.5,1.5], ['No', 'Yes'])\nplt.yticks([1.5,0.5],['Yes', 'No'],)\nplt.xlabel('Predicted')\n\nplt.ylabel('Actual')\nplt.title('Confusion Matric');","88410d54":"print(\"wwe\")\nfrom sklearn.svm import SVC\nparams = {'C':[0.5,1,10,100],\n          'gamma':['scale', 1, 0.1,0.01, 0.001, 0.0001],\n          'kernel':['rbf', 'sigmoid']}\n\ngrid = GridSearchCV(SVC(), params, cv=10, scoring='accuracy')\ngrid.fit(x_train, y_train)\nprint(grid.best_params_)\nprint(grid.best_score_)","b08d50bf":"grid.score(x_test, y_test)","35025ea0":"from sklearn.metrics import classification_report\nprint(classification_report(y_test, random_grid.predict(x_test), target_names=['No', 'Yes']))","102a8fd9":"print(classification_report(y_test, grid.predict(x_test), target_names=['No', 'Yes']))","70192d9e":">> * Pregnancies value can be of 0 so we don't need \n>> * While other columns except Outcome should't have 0.\n>> * So we are going to change the 0 with mean of that column in that class.","15bcee9f":"### Data Import and Basic Exploration","92adfe78":">> #### Visualize Tree","16aa801f":"> * Max value of Pregnancies is 17, I thinks it's not normal and 25% sample have more than 6 pregnancies which is pretty much more.\n> * What does 0 means in Glucose, BloodPressure, Skinthickness, Insulin, BMI means?\n - it doesn't make sense of have this as 0 \n> * Even Skinthickness and Insulin have more than 25% of value equal to 0. Will have to look into it in future","f3ab58e5":">> #### let first balance the data using resample technique and fit the model again ","86d6ce5b":"> #### Random Forest with Parameter tunning","c1cc79fa":"> #### First let try to fit Decision Tree without any parameter tunning and see how it performs","40454a72":"### Data Describtion\nThis dataset is originally from the National Institute of Diabetes and Digestive and Kidney Diseases. The objective of the dataset is to diagnostically predict whether or not a patient has diabetes, based on certain diagnostic measurements included in the dataset. Several constraints were placed on the selection of these instances from a larger database. In particular, all patients here are females at least 21 years old of Pima Indian heritage.\n\n### columns:\n* Pregnencies: Number of times pregnent (Integer)\n* Glucose: \n - Plasma glucose concentration a 2 hours in an oral glucose tolerance test (mg\/dL) \n - Normal Glucose level for Non-diabetes person is between 70-130 mg\/dL (Google)\n* BloodPressure :\n - Diastolic blood pressure (mm Hg)\n - Normal lower than 80\n\n* SkinThickness :\n - Triceps skin fold thickness (mm)\n - According to certain researches skinthickess is related to Diabetes\n \n* Insulin\n - 2-Hour serum insulin (mu U\/ml)\n - low insulin : may have type 2 diabetes\n - high insulin : may have type 1 diabetes\n* BMI\n - Body mass index (weight in kg\/(height in m)^2)\n - Normal 18.5 - 24.9\n - As the BMI increases Female have more chances of diabetes than male\n* DiabetesPedigreeFunction \n - Diabetes pedigree function\n - According to http:\/\/www.personal.kent.edu\/~mshanker\/personal\/Zip_files\/sar_2000.pdf, the diabetes pedigree function provides \u201ca synthesis of the diabetes mellitus history in relatives and the genetic relationship of those relatives to the subject.\u201d\n* Age\n - Age (years)\n - Normally it is seen that as the age increases chance of diabetes increase\n* Outcome\n - If a person have diabetes or not (0\/1)\n - This is our output variable","6705cde5":"### Model Fitting","6e4517b2":"> #### Random Forest on Balanced Dataset","626af75c":"> #### SVM on balance dataset","07ca7ef6":"* Its perform Nice but let see we can make it better","9290e370":"### Module Import","59ba4d82":"## Bivariate Analysis","39155bef":"### Count number of O's in each column","5e2c3e39":"> #### Decision Tree with parameter tunning","142206ce":">> * It surely overfits the data\n>> * But still 0.895 test accuracy is nice\n","ef6824fe":">> ##### Feature Importances","fa10b75c":"* let try to use ```class_weight``` parameters to be balanced","7d05c2f4":"## Univariate Analysis","54dd60eb":"#### Conclusion:\n>> * random Forest with balanced dataset performs better than unbalanced\n>> * SVM doesn't performs better than Random Forest on balanced dataset\n>> * Final \n  - Train Accuracy : 0.9173\n  - Test Accuracy : 0.912\n  - Precision : 0.87\n  - Recall : 0.94","5fc3113c":"* It didn't improved much","d8953607":"> * lets try to fit Decision Tree with parameter tunning it should perform better than without tunning","9c9b4944":"* Its perform better than without balance\n* let also try to fit one more model and see how it performs"}}