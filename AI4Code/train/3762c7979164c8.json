{"cell_type":{"0cc41e3a":"code","34762238":"code","b23f0d2d":"code","a7bd1daa":"code","417985d6":"code","9c2d706a":"code","71348c89":"code","d4e0ca25":"code","8dd39a4f":"code","b2dcc406":"code","dbb06944":"markdown","f75af53c":"markdown"},"source":{"0cc41e3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","34762238":"# read csv\nbreast_cancer_data =pd.read_csv(\"..\/input\/Breast_cancer_data.csv\")\nbreast_cancer_data.diagnosis =[1 if each == \"1\" else 0 for each in breast_cancer_data.diagnosis]\n\ny = breast_cancer_data.diagnosis.values\nx_data = breast_cancer_data.drop([\"diagnosis\"],axis=1)","b23f0d2d":"x_data.info()","a7bd1daa":"# normalization\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values\n# (x - min(x))\/max(x)-min(x))","417985d6":"# train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2, random_state = 42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)","9c2d706a":"# %% parameters initialize and sigmoid function\ndef initialize_weights_and_bias(dimension):\n    \n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\n\n# wb = initialize_weights_and_bias(5)\n\ndef sigmoid(z):\n    \n    y_head = 1\/(1+ np.exp(-z))\n    return y_head\n\nprint(sigmoid(0))","71348c89":"# forward propagation_and_backward propagation\ndef forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = -y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]             #x_train.shape[1]  is for scaling\n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost,gradients","d4e0ca25":"# Updating(learning) parameters\ndef update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","8dd39a4f":"# prediction\ndef predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction","b2dcc406":"# %% logistic_regression\ndef logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 5\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n\nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 3, num_iterations = 300)","dbb06944":"Conclusion\n\nData sonucunda accuracy & 100 \u00e7\u0131kt\u0131.","f75af53c":"INTRODUCTION\n\nBu \u00f6devde a\u015fa\u011f\u0131daki i\u015flemleri yapaca\u011f\u0131m.\n    \n    - Kanser h\u00fccresi datas\u0131nda logistic_regression algoritmas\u0131 kullan\u0131lacak.\n    - \u0130lk ba\u015fta datay\u0131 import ettim ve read ile datay\u0131 \u00e7a\u011f\u0131rd\u0131m.\n    - normalization i\u015flemi yap\u0131ld\u0131.\n    - sklearn k\u00fct\u00fcphanesi ile train test split i\u015flemi yap\u0131larak data'y\u0131 train ve test olarak ay\u0131rma i\u015flemi yap\u0131ld\u0131.\n    - Weigths ve bias parametreleri initialize edilerek sigmoid function kullan\u0131ld\u0131.\n    - Forward propagation ve backward propagation functionu olu\u015fturuldu.\n    - Updating Parametreleri\n        Updating (learn) parametreleri number of iterarion keredir.\n        Forward ve backward propagation yapmak ve cost (maliyet) ve gradients (degradeleri) bulmak.\n        Parametreler weights ve bias (learn) g\u00fcncellendi.\n    - prediction i\u015flemi ile, x_test forward propagation i\u00e7in bir input olu\u015fturuldu.\n        z 0,5'ten b\u00fcy\u00fckse, prediction y_head = 1,\n        z 0,5'ten k\u00fc\u00e7\u00fckse, prediction y_head = 0 olur.\n    - Son olarak logistic_regression algoritmas\u0131 kullan\u0131larak, test accuracy %100 \u00e7\u0131kar\u0131ld\u0131 ve Cost after iteration de\u011feri d\u00fc\u015f\u00fcr\u00fcld\u00fc. "}}