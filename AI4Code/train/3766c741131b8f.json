{"cell_type":{"7f9c8ebb":"code","a302a839":"code","71f561bf":"code","295918fb":"code","9105bbfa":"code","bf7e2737":"code","cab4efc6":"code","847f4f61":"code","2549db8f":"code","87bd517a":"code","68a5e906":"code","75211e8d":"code","8b7f0e82":"code","a2cb8993":"code","da5bf379":"code","5e086dee":"code","4565e743":"code","16289a0b":"code","36c3f9f2":"code","9b7c01a2":"code","16b13db2":"markdown"},"source":{"7f9c8ebb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nimport seaborn as sns # seaborn package\nimport matplotlib.pyplot as plt # matplotlib library\n\nfrom scipy import stats","a302a839":"# Carrega dados de pessoas do Rio de Janeiro (RJ) por sexo, cor e faixa de idade\nos.chdir('\/kaggle\/input\/2010-brazilian-census-rio-de-janeiro-state\/')\nP03_UF = pd.read_csv('Pessoa03_RJ.csv', sep=';', decimal = ',', encoding = 'latin_1')\nP03_UF.head()","71f561bf":"# \ndef resumetable(df):\n    print(f\"Dataset Shape: {df.shape}\")\n    summary = pd.DataFrame(df.dtypes,columns=['dtypes'])\n    summary = summary.reset_index()\n    summary['Name'] = summary['index']\n    summary = summary[['Name','dtypes']]\n    summary['Missing'] = df.isnull().sum().values    \n    summary['Uniques'] = df.nunique().values\n    summary['First Value'] = df.loc[0].values\n    summary['Second Value'] = df.loc[1].values\n    summary['Third Value'] = df.loc[2].values\n\n    for name in summary['Name'].value_counts().index:\n        summary.loc[summary['Name'] == name, 'Entropy'] = round(stats.entropy(df[name].value_counts(normalize=True), base=2),2) \n\n    return summary\n\n#Convertendo vari\u00e1veis num\u00e9ricas\ndef converte_num(df, ini, fim):\n    for v in range(ini,fim+1):\n        var = 'V'+str(v).zfill(3)\n        df[var] = pd.to_numeric(df[var], downcast ='integer', errors='coerce')\n        \n# cores de pessoas \ncor = ['branca','preta','amarela','parda','indigena']\n\n# gera DF com dimens\u00f5es a partir de df, considerando a faixa de idade (lista), cor e \n# vari\u00e1veis iniciais para totais masculino e feminino\ndef gera_dimensoes (df, faixa, cor, ini_m, ini_f, exclusao = []):\n\n    df_dim = pd.DataFrame(columns=['Cod_setor', 'Sexo', 'Idade', 'Cor', 'Pessoas'])\n\n    v = 0\n    for f in faixa:\n        for c in cor:\n            if f not in exclusao:\n                varm = 'V'+str(v + ini_m).zfill(3)\n                varf = 'V'+str(v + ini_f).zfill(3)\n                # masculino\n                df_tmp = df[['Cod_setor' , varm]].query(varm + ' > 0')\n                df_tmp.rename(columns = {varm: \"Pessoas\"}, inplace = True)\n                df_tmp['Sexo'] = 'M'\n                df_tmp['Idade'] = f\n                df_tmp['Cor'] = c\n                df_tmp = df_tmp[['Cod_setor', 'Sexo', 'Idade', 'Cor', 'Pessoas']]\n                df_dim = pd.concat([df_dim, df_tmp], sort=True)\n        \n                # feminino\n                df_tmp = df[['Cod_setor' , varf]].query(varf + ' > 0')\n                df_tmp.rename(columns = {varf: \"Pessoas\"}, inplace = True)\n                df_tmp['Sexo'] = 'F'\n                df_tmp['Idade'] = f\n                df_tmp['Cor'] = c\n                df_tmp = df_tmp[['Cod_setor', 'Sexo', 'Idade', 'Cor', 'Pessoas']]\n                df_dim = pd.concat([df_dim, df_tmp], sort=True  )      \n            v += 1 \n            \n    return df_dim\n\n# Histogramas de domicilios, moradores e rendimentos\ndef graf_barras(df):\n    fig, axis  = plt.subplots(1,3,figsize=(20,4))\n    df.groupby('Sexo')['Pessoas'].sum().plot.bar(x='Sexo', y = 'Pessoas', ax = axis[0])\n    df.groupby('Cor')['Pessoas'].sum().plot.bar(x='Cor', y = 'Pessoas', ax = axis[1])\n    df.groupby('Idade')['Pessoas'].sum().plot.bar(x='Idade', y = 'Pessoas', ax = axis[2])","295918fb":"resumetable(P03_UF)","9105bbfa":"#Convertendo vari\u00e1veis num\u00e9ricas\nconverte_num(P03_UF,1,251)\nresumetable(P03_UF)","bf7e2737":"# Cria lista de faixas descritas do dicion\u00e1rio de dados\n# a maioria \u00e9 de 5 em 5, mas existem algumas exce\u00e7\u00f5es\nfaixa = []\nfor f in range(5,75,5):\n    faixa.append(f)\nfaixa.extend([7,15.1,18])\nfaixa.remove(65)\nfaixa.sort()\nexclusao = [15.1,18]\nP03b_UF = gera_dimensoes(P03_UF, faixa, cor, 87, 167, exclusao)\n\nP03b_UF.shape","cab4efc6":"graf_barras(P03b_UF)","847f4f61":"# Carrega dados do Rio de Janeiro (RJ)\nos.chdir('\/kaggle\/input\/2010-brazilian-census-rio-de-janeiro-state\/')\nP05_UF = pd.read_csv('Pessoa05_RJ.csv', sep=';', decimal = ',', encoding = 'latin_1')\nP05_UF.head()","2549db8f":"resumetable(P05_UF)","87bd517a":"#Convertendo vari\u00e1veis num\u00e9ricas\nconverte_num(P05_UF,1,10)\nresumetable(P05_UF)","68a5e906":"# Cria lista de faixas descritas do dicion\u00e1rio de dados\nfaixa = [0]\nP05b_UF = gera_dimensoes(P05_UF, faixa, cor, 1, 6)\n\nP05b_UF.shape","75211e8d":"graf_barras(P05b_UF)","8b7f0e82":"P00a_UF = pd.concat([P03b_UF, P05b_UF], sort=True)","a2cb8993":"graf_barras(P00a_UF)","da5bf379":"# Carrega dados de alfabetizdos do Rio de Janeiro (RJ)\nos.chdir('\/kaggle\/input\/2010-brazilian-census-rio-de-janeiro-state\/')\nP04_UF = pd.read_csv('Pessoa04_RJ.csv', sep=';', decimal = ',', encoding = 'latin_1')\nP04_UF.head()","5e086dee":"resumetable(P04_UF)","4565e743":"converte_num(P04_UF,1,155)\nresumetable(P04_UF)","16289a0b":"# Cria lista de faixas descritas do dicion\u00e1rio de dados\n# a maioria \u00e9 de 5 em 5, mas existem algumas exce\u00e7\u00f5es\nfaixa = []\nfor f in range(10,75,5):\n    faixa.append(f)\nfaixa.extend([7,15.1,18])\nfaixa.remove(65)\nfaixa.sort()\nexclusao = [15.1,18]\nP04b_UF = gera_dimensoes(P04_UF, faixa, cor, 1, 76, exclusao)\n\nP04b_UF.shape","36c3f9f2":"#altabetizados\ngraf_barras(P04b_UF)","9b7c01a2":"#todos\ngraf_barras(P00a_UF)","16b13db2":"Processamento de dados do Censo 2010\n\nArquivo Pessoas03.csv \u00e9 processado para dataframe P03b_UF:\n-Cod_Setor\n-Sexo\n-Idade\n-Cor\n-Pessoas (Qtd)\n\nArquivo Pessoas05.csv completa P03b_UF com crian\u00e7as menores de 5 anos\n\nArquivo Pessoas04.csv \u00e9 processado para dataframe P04b_UF, com mesmo formato de P03b_UF. Cont\u00e9m quantidades de pessoas alfabetizadas.\n\nOs dados est\u00e3o no n\u00edvel geogr\u00e1fico de setor censit\u00e1rio.\n    "}}