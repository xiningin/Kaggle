{"cell_type":{"305458f8":"code","5a41e2aa":"code","c3ba2bff":"code","4b68de70":"code","df50dcfc":"code","f0ac295e":"code","b17cc268":"code","d2432c3d":"code","7c981747":"code","9bd245fc":"code","865016a3":"code","fcff2af9":"code","e2f96ed8":"code","863254a8":"code","1ad893c1":"code","dccc032b":"code","33c9b27a":"code","0ea4e935":"code","7853d58a":"code","fd147a87":"code","ff65e687":"code","8c190863":"code","f5682968":"code","6b80f5e8":"code","7d070abb":"code","1ad01d38":"code","c4a0aacf":"code","8bf9af2a":"code","cef2333c":"code","6d90815e":"code","e10c5fec":"code","4221e486":"code","ba8052f7":"code","a814dcff":"code","ff683711":"code","d7c51017":"code","8c250c36":"code","f8784343":"code","a9be4a77":"code","a76a385d":"code","57ba3881":"code","260b5e5e":"code","668f4e50":"code","c6cf72e5":"code","f7a76906":"code","dc432a81":"code","86884972":"code","f8c09b8d":"code","7d5428ab":"code","aa5033fd":"code","2785a284":"code","27fd911e":"code","744ea200":"code","7247a857":"code","c2fbcabc":"code","17dcd7fe":"code","1a7c3f9c":"code","c10eca7c":"code","ba431cfa":"code","dbc43955":"code","58852c54":"code","a11015f0":"code","a9993494":"code","add36cee":"code","a306b689":"code","375b99ca":"code","8654c33c":"code","6b3938e6":"code","0b4fa211":"code","07875013":"code","f2fee0d0":"code","971cf5f5":"code","14cce811":"code","c126bcdb":"code","68a9d361":"code","cabd956f":"code","1f2848a3":"code","13e05787":"code","c440ff59":"code","c31d7144":"code","0444954a":"code","8b855e4c":"code","0f0eb924":"code","30f94f8b":"code","a2c30bd8":"code","22566d8f":"code","7992d712":"code","5c7464a4":"code","ffc28ffc":"code","e78b2dab":"code","c213d2e8":"code","7da4fcc7":"code","e7a4c8be":"code","7a7dbcaa":"code","d292ce06":"code","64510bac":"code","6804364a":"code","a0e6767c":"code","b5ab132c":"code","9634eeeb":"code","c516dfad":"markdown","73b128db":"markdown","f76dcb33":"markdown","db6d96fa":"markdown","ade72f86":"markdown","17940fba":"markdown","e01f6f10":"markdown","b39282d4":"markdown","ca343123":"markdown","cbd440b0":"markdown","1f06cb88":"markdown","3601eee4":"markdown","1bc35017":"markdown","f1422d35":"markdown","7eeebd53":"markdown","628425eb":"markdown","ab74455f":"markdown","23989a64":"markdown","c67dbc1e":"markdown","fe5820f4":"markdown","5609e299":"markdown","7b226cbf":"markdown","1cdacc04":"markdown","1248118e":"markdown","b5173c61":"markdown","311c886c":"markdown"},"source":{"305458f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5a41e2aa":"import warnings\nwarnings.simplefilter('ignore')","c3ba2bff":"# Importing the Seaborn library -\nimport seaborn as sns ","4b68de70":"tips = sns.load_dataset(\"tips\")\ntips.head()","df50dcfc":"fmri = sns.load_dataset(\"fmri\")\nfmri.head()","f0ac295e":"iris = sns.load_dataset(\"iris\")\niris.head()","b17cc268":"planets = sns.load_dataset(\"planets\")\nplanets.head()","d2432c3d":"titanic = sns.load_dataset(\"titanic\")\ntitanic.head()","7c981747":"exercise = sns.load_dataset(\"exercise\")\nexercise.head()","9bd245fc":"ans = sns.load_dataset(\"anscombe\")\nans.head()","865016a3":"sns.set()\nax = sns.scatterplot(x=\"total_bill\", y=\"tip\", data=tips)","fcff2af9":"ax = sns.scatterplot(x=\"total_bill\", y=\"tip\", hue=\"time\", data=tips)","e2f96ed8":"ax = sns.scatterplot(x=\"total_bill\", y=\"tip\", hue=\"time\", style=\"time\", data=tips)","863254a8":"ax = sns.scatterplot(x=\"total_bill\", y=\"tip\", hue=\"day\", style=\"time\", data=tips)","1ad893c1":"ax = sns.scatterplot(x=\"total_bill\", y=\"tip\", size=\"size\", data=tips)","dccc032b":"ax = sns.scatterplot(x=\"total_bill\", y=\"tip\", hue=\"size\", size=\"size\", data=tips)","33c9b27a":"cmap = sns.cubehelix_palette(dark=.3, light=.7, as_cmap=True)\nax = sns.scatterplot(x=\"total_bill\", y=\"tip\", hue=\"size\", size=\"size\",sizes=(20, 200), \n                     palette=cmap, legend=\"full\", data=tips)","0ea4e935":"markers = {\"Lunch\": \"s\", \"Dinner\": \"X\"}\nax = sns.scatterplot(x=\"total_bill\", y=\"tip\", style=\"time\", markers=markers, data=tips)","7853d58a":"ax = sns.scatterplot(x=iris.sepal_length, y=iris.sepal_width, hue=iris.species, style=iris.species)","fd147a87":"ax = sns.lineplot(x=\"timepoint\", y=\"signal\", data=fmri)","ff65e687":"ax1 = sns.lineplot(x=\"timepoint\", y=\"signal\", ci=None, data=fmri)\n\nplt.figure()\nax2 = sns.lineplot(x=\"timepoint\", y=\"signal\", ci=\"sd\", data=fmri)","8c190863":"ax = sns.lineplot(x=\"timepoint\", y=\"signal\", hue=\"event\", data=fmri)","f5682968":"ax = sns.lineplot(x=\"timepoint\", y=\"signal\", hue=\"event\", style=\"event\", data=fmri)","6b80f5e8":"ax = sns.lineplot(x=\"timepoint\", y=\"signal\", hue=\"region\", style=\"event\", data=fmri)","7d070abb":"ax = sns.lineplot(x=\"timepoint\", y=\"signal\", hue=\"event\", style=\"event\", markers=True, dashes=False, data=fmri)","1ad01d38":"ax = sns.lineplot(x=\"timepoint\", y=\"signal\", hue=\"event\", err_style='bars', data=fmri)","c4a0aacf":"sns.set(style=\"ticks\")\ng = sns.relplot(x=\"total_bill\", y=\"tip\", hue=\"day\", data=tips)","8bf9af2a":"g = sns.relplot(x=\"total_bill\", y=\"tip\", hue=\"day\", col=\"time\", row=\"sex\", data=tips)","cef2333c":"g = sns.relplot(x=\"total_bill\", y=\"tip\", hue=\"time\", size=\"size\", \n                palette=[\"b\", \"r\"], sizes=(10, 100), col=\"time\", data=tips)","6d90815e":"g = sns.relplot(x=\"timepoint\", y=\"signal\", hue=\"event\", style=\"event\", col=\"region\", kind=\"line\", data=fmri)","e10c5fec":"g = sns.relplot(x=\"timepoint\", y=\"signal\", hue=\"event\", style=\"event\", \n                col=\"region\", height=5, aspect=.7, kind=\"line\", data=fmri)","4221e486":"sns.set(style=\"whitegrid\")\nax = sns.stripplot(x=\"day\", y=\"total_bill\", data=tips)","ba8052f7":"ax = sns.stripplot(x=\"total_bill\", y=\"day\", jitter=0.25, orient=\"h\", data=tips)","a814dcff":"ax = sns.stripplot(x=\"sex\", y=\"total_bill\", hue=\"day\", data=tips)","ff683711":"ax = sns.stripplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", data=tips, dodge=True)","d7c51017":"ax = sns.stripplot(x=\"time\", y=\"tip\", data=tips, order=[\"Dinner\", \"Lunch\"])","8c250c36":"ax = sns.stripplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", jitter=False, size=15, \n                   marker='D', edgecolor='gray', linewidth=0.5, alpha=0.3, data=tips)","f8784343":"sns.set(style=\"whitegrid\")\nax = sns.swarmplot(x=\"day\", y=\"total_bill\", size=5, edgecolor='k', linewidth=1, data=tips)","a9be4a77":"ax = sns.swarmplot(x=\"total_bill\", y=\"day\", hue=\"sex\", data=tips)","a76a385d":"ax = sns.swarmplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", data=tips, dodge=True)","57ba3881":"ax = sns.swarmplot(x=\"time\", y=\"tip\", data=tips, order=[\"Dinner\", \"Lunch\"])","260b5e5e":"sns.set(style=\"whitegrid\")\nax = sns.boxplot(x=\"day\", y=\"total_bill\", fliersize=5, whis=1, data=tips)","668f4e50":"ax = sns.boxplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", linewidth=2.5, palette=\"Set2\", data=tips, dodge=True)","c6cf72e5":"ax = sns.boxplot(x=\"tip\", y=\"time\", orient=\"h\", data=tips, order=[\"Lunch\", \"Dinner\"])","f7a76906":"sns.set(style=\"whitegrid\")\nax = sns.violinplot(x=\"day\", y=\"total_bill\", data=tips)","dc432a81":"ax = sns.violinplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", data=tips)","86884972":"ax = sns.violinplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", data=tips, split=True)","f8c09b8d":"ax = sns.violinplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", palette=\"Set2\", data=tips, split=True, scale=\"count\")","7d5428ab":"ax = sns.violinplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", data=tips, split=True, scale=\"count\", inner=\"stick\")","aa5033fd":"ax = sns.violinplot(x=\"day\", y=\"total_bill\", hue=\"smoker\", data=tips, split=True, scale=\"count\", inner=\"stick\", bw=.3)","2785a284":"ax = sns.violinplot(x=\"total_bill\", y=\"day\", hue=\"sex\", data=tips, bw=.15, scale=\"count\", cut=0)","27fd911e":"sns.set(style=\"whitegrid\")\nax = sns.barplot(x=\"day\", y=\"total_bill\", data=tips)","744ea200":"ax = sns.barplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=tips)","7247a857":"ax = sns.barplot(x=\"day\", y=\"tip\", data=tips, estimator=np.median)","c2fbcabc":"ax = sns.barplot(x=\"day\", y=\"tip\", data=tips, ci=\"sd\")","17dcd7fe":"ax = sns.barplot(x=\"day\", y=\"tip\", data=tips, errcolor='k', errwidth=2.5, capsize=.3)","1a7c3f9c":"sns.set(style=\"darkgrid\")\nax = sns.countplot(x=\"class\", data=titanic)","c10eca7c":"ax1 = sns.countplot(x=\"class\", hue=\"who\", data=titanic)\n\nplt.figure()\nax2 = sns.countplot(y=\"class\", hue=\"who\", data=titanic)","ba431cfa":"sns.set(style=\"darkgrid\")\nax = sns.pointplot(x=\"time\", y=\"total_bill\", data=tips)","dbc43955":"ax = sns.pointplot(x=\"time\", y=\"total_bill\", hue=\"smoker\", data=tips, dodge=True)","58852c54":"ax = sns.pointplot(x=\"time\", y=\"total_bill\", hue=\"smoker\", data=tips, markers=['o', 'x'], linestyles=['-', '--'])","a11015f0":"ax = sns.pointplot(x=\"tip\", y=\"day\", data=tips)","a9993494":"ax = sns.pointplot(x=\"tip\", y=\"day\", data=tips, errwidth=2, capsize=.3, join=False)","add36cee":"sns.set(style=\"ticks\")\nax = sns.catplot(x=\"time\", y=\"pulse\", hue=\"kind\", col=\"diet\", data=exercise, height=5, aspect=.8)","a306b689":"g = sns.catplot(\"alive\", col=\"deck\", col_wrap=4, data=titanic, kind=\"count\", height=2.5, aspect=.8)","375b99ca":"g = sns.catplot(x=\"age\", y=\"embark_town\", hue=\"sex\", row=\"class\", data=titanic, palette=\"Set3\", \n                orient=\"h\", height=2, aspect=3, kind=\"violin\", dodge=True, cut=0, bw=.2)","8654c33c":"g = sns.catplot(x=\"who\", y=\"survived\", col=\"class\", data=titanic, saturation=.5, kind=\"bar\", ci=None, aspect=.6)","6b3938e6":"sns.set()\nnp.random.seed(0)\nx = np.random.randn(100)\nX = pd.Series(x, name=\"X Variable\")\nax = sns.displot(X)","0b4fa211":"ax = sns.displot(X, kind='kde', rug=True)","07875013":"ax = sns.displot(y=X, kde=True, color='r')","f2fee0d0":"np.random.seed(10)\nsns.set(color_codes=True)\nmean, cov = [0, 2], [(1, .5), (.5, 1)]\nx, y = np.random.multivariate_normal(mean, cov, size=50).T\nax = sns.kdeplot(x)\n\nplt.figure()\nax = sns.kdeplot(y=y)","971cf5f5":"ax = sns.kdeplot(x, shade=True, color='r')","14cce811":"ax = sns.kdeplot(x=x, y=y)","c126bcdb":"ax = sns.kdeplot(x=x, y=y, shade=True, thresh=0)","68a9d361":"ax = sns.kdeplot(x=x, y=y, n_levels=30, cmap=\"Purples_d\", cbar=True)","cabd956f":"sns.set(color_codes=True)\nax = sns.regplot(x=\"total_bill\", y=\"tip\", data=tips)","1f2848a3":"ax = sns.regplot(x=\"size\", y=\"total_bill\", data=tips, truncate=False, x_jitter=.1)","13e05787":"ax = sns.regplot(x=\"size\", y=\"total_bill\", data=tips, x_estimator=np.mean)","c440ff59":"np.random.seed(8)\nmean, cov = [4, 6], [(1.5, .7), (.7, 1)]\nx, y = np.random.multivariate_normal(mean, cov, 80).T\nX, Y = pd.Series(x, name=\"X Variable\"), pd.Series(y, name=\"Y Variable\")\nax = sns.regplot(x=X, y=Y, x_bins=4, color='r')","c31d7144":"ax = sns.regplot(x=\"x\", y=\"y\", data=ans.loc[ans.dataset == \"II\"], order=2, ci=None)","0444954a":"ax = sns.regplot(x=\"x\", y=\"y\", data=ans.loc[ans.dataset == \"III\"], robust=True, ci=None)","8b855e4c":"tips[\"big_tip\"] = (tips.tip \/ tips.total_bill) > .175\nax = sns.regplot(x=\"total_bill\", y=\"big_tip\", data=tips, logistic=True, y_jitter=.03)","0f0eb924":"ax = sns.regplot(x=\"size\", y=\"total_bill\", data=tips, x_estimator=np.mean, logx=True)","30f94f8b":"g = sns.lmplot(x=\"total_bill\", y=\"tip\", hue=\"smoker\", data=tips, markers=['o', 'x'])","a2c30bd8":"g = sns.lmplot(x=\"size\", y=\"total_bill\", hue=\"day\", col=\"day\", col_wrap=2, data=tips, height=3, aspect=.8, x_jitter=.1)","22566d8f":"g = sns.lmplot(x=\"total_bill\", y=\"tip\", row=\"sex\", col=\"time\", height=3, data=tips)","7992d712":"np.random.seed(0)\nsns.set()\nuniform_data = np.random.randn(10, 12)\nax = sns.heatmap(uniform_data, vmin=0, vmax=1, yticklabels=False, square=True)","5c7464a4":"normal_data = np.random.randn(10, 12)\nax = sns.heatmap(normal_data, center=0, linecolor='k')","ffc28ffc":"flights = sns.load_dataset(\"flights\")\nflights = flights.pivot(\"month\", \"year\", \"passengers\")\nax = sns.heatmap(flights)","e78b2dab":"ax = sns.heatmap(flights, annot=True, fmt='d', linewidth=.5, cbar=False)","c213d2e8":"sns.set(style=\"ticks\", color_codes=True)\ng = sns.pairplot(iris)","7da4fcc7":"g = sns.pairplot(iris, hue=\"species\")","e7a4c8be":"g = sns.pairplot(iris, vars=[\"sepal_width\", \"sepal_length\"])","7a7dbcaa":"g = sns.pairplot(iris, x_vars=[\"sepal_width\", \"sepal_length\"], y_vars=[\"petal_width\", \"petal_length\"])","d292ce06":"g = sns.pairplot(iris, kind=\"reg\", diag_kind=\"kde\", height=2, aspect=1.2)","64510bac":"sns.set(style=\"white\", color_codes=True)\ng = sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, height=6.5, ratio=3, space=0.3)","6804364a":"g = sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"reg\", color='r')","a0e6767c":"g = sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"hex\", color='r')","b5ab132c":"g = sns.jointplot(x=\"sepal_width\", y=\"petal_length\", data=iris, kind=\"kde\", color='g')","9634eeeb":"g = sns.jointplot(x=\"total_bill\", y=\"tip\", data=tips, kind=\"resid\")","c516dfad":"## Kernel Density Estimate - kdeplot()\n\n<!-- # data - Input data\n# data2 - Second input data for a bivariate KDE\n# vertical - If true, density is on x-axis\n# kernel - {'gau', 'cos', 'biw', 'epa', 'tri', 'triw'} Code for shape of kernel to fit with\n# bw -\n# gridsize - No. of discrete points in the evaluation grid\n# cut - Draw the estimate to cut * bw from the extreme data points\n# clip - Lower and Upper bounds of datapoints used to fit KDE\n# legend -\n# cbar -\n# cbar_kws - \n# cumulative - If true, draw the cumulative distribution estimated by the KDE\n# shade - If true, shade in the area under the KDE curve\n# shade_lowest - If true, shade the lowest contour of a bivariate plot -->","73b128db":"# **Types of plots**","f76dcb33":"## Matrix Plots:\nheatmap() - Plot rectangular data as a color-encoded matrix","db6d96fa":"## Count Plot - countplot()\n\n<!-- # x, y, hue - Inputs for plotting long-form data\n# data - Dataset for plotting. If x and y are absent, this is interpreted as wide-form\n# order, hue_order - Order to plot the categorial levels in\n# orient - {\"v\"\/\"h\"} Orientation of the plot\n# palette -\n# color -\n# saturation -\n# dodge - Whether elements should be shifted along categorical axis -->","ade72f86":"## Joint Plot - jointplot()\n\n<!-- # x,y -\n# data -\n# kind - {'scatter', 'reg', 'resid', 'kde', 'hex'} Kind pf plot to draw\n# color - Color used for the plot elements\n# height - Size of the figure (it will be square)\n# ratio - Ratio of joint axes height to marginal axes height\n# space - Space between the joint and marginal axes\n# dropna - If true, remove observations that are missing from x and y \n# {x,y}_lim - Axis limits to set before plotting\n# {joint,marginal,annot}_kws -  -->","17940fba":"### Loading sample datasets -","e01f6f10":"## Categorical Plots:\ncatplot() - Figure-level interface for drawing categorical plots onto a FaceGrid\n\n### *Categorical scatterplots -*\n\nstripplot() - Draw a scatterplot where one variable is categorical\n\nswarmplot() - Draw a categorical scatterplot with non-overlapping points\n\n### *Categorical distribution plots -*\n\nboxplot() - Draw a boxplot to show distributions with respect to categories\n\nviolinplot() - Draw a combination of boxplot and kernel density estimate\n\n### *Categorical estimate plots -*\n\npointplot() - Show point estimates and confidence intervals using scatterplot \n\nbarplot() - Show point estimates and confidence intervals as rectangular bars\n\ncountplot() - Show the counts of observations in each categorical bins using bars","b39282d4":"## Relational Plot - relplot()\n\n<!-- # x, y - Input data variables\n# hue - Grouping variable that will produce points with different colors\n# size - Grouping variable that will produce points with different sizes\n# style - Grouping variable that will produce points with different markers\n# data - DataFrame\n# row, col - Categorical variable determining faceting of the grid\n# row_order -\n# col_wrap -\n# palette - \n# sizes - Choose a min and max point size\n# legend - {'brief', 'full', False}\n# hue_order -\n# hue_norm -\n# size_order -\n# size_norm -\n# kind - {'scatter', 'line'} \n# height - Height of each facet\n# aspect - Aspect ratio of each facet (aspect * height = width) -->","ca343123":"## lmplot()\n\n<!-- # x, y - Input variables\n# data - Long-form dataframe\n# hue, col, row - \n# palette -\n# col_wrap -\n# height -\n# aspect -\n# label - \n# color - \n# marker -\n# share{x,y} - {bool, 'col', 'row'}\n# {hue,col,row}_order -\n# legend -\n# legend_out -\n# x_estimator - \n# x_bins -\n# x_ci - {'ci', 'sd', int, None} \n# scatter - \n# fig_reg -  \n# ci - \n# order - \n# logistic - \n# lowess - \n# robust - \n# log_x - \n# {x,y}_partial -  \n# truncate - \n# {x,y}_jitter -  -->","cbd440b0":"## Categorical Plot - catplot()\n\n<!-- # x, y, hue - Inputs for plotting long-form data\n# data - Long-form dataset for plotting\n# row, col - Categorical variable determining faceting of the grid\n# col_wrap - \n# estimator - Statistical function to estimate within each categorical bin\n# ci - {float, 'sd', None} Size of confidence interval\n# orient - {\"v\"\/\"h\"} Orientation of the plot\n# palette -\n# legend -\n# legend_out - Draw legend outside the plot on the center right\n# order, hue_order - Order to plot the categorial levels in\n# row_order, col_order - Order to organize rows\/columns of the grid in\n# height - Height of each facet\n# aspect - Aspect ratio of each facet (aspect * height = width)\n# share{x,y} - {bool, 'row', col'}\n# kind - {'point', 'bar', 'strip', 'swarm', 'box', 'violin', 'boxen'} -->","1f06cb88":"## Violin Plot - violinplot()\n\n<!-- # x, y, hue - Inputs for plotting long-form data\n# data - Dataset for plotting. If x and y are absent, this is interpreted as wide-form\n# order, hue_order - Order to plot the categorial levels in\n# orient - {\"v\"\/\"h\"} Orientation of the plot\n# dodge - Seperate the strips for different hue levels along the categorial axis\n# palette -\n# linewidth -\n# saturation -\n# width - \n# bw - {'scott', 'silverman', float} The scale factor to use when computing the kernel bandwidth\n        # The actual kernel size will be determined by multipying the scale factor by the standard deviation of the data within each bin\n# cut - Distance, in unit of bandwidth size, to extend the density past the extreme datapoints\n        # Set to 0 to limit the violin range within the range of the observed data\n# scale - {'area', 'count', 'width'}\n        # If area, each violin will have the same area\n        # If count, the width of the violins will be scaled by the no. of observations in that bin.\n        # If width, each violin will have the same width\n# inner - {'box', 'quartile', 'point', 'stick', None} Representation of the datapoints in the violin interior\n        # If box, draw a miniature boxplot\n        # If quartile, draw the quartiles of the distribution\n        # If point or stick, show the each underlying datapoint\n# gridsize - No. of points in the discrete grid used to compute the kernel density estimate\n# split - Draw half of a violin for each hue level -->","3601eee4":"## Heatmap - heatmap()\n\n<!-- # data - \n# vmin, vmax - Values to anchor the colormap\n# cmap -\n# center - The value at which to center the colormap when plotting divergent data\n# robust - \n# annot - If true, write the data value in each cell\n# fmt - String formatting code to use when adding annotations\n# annot_kws -\n# linewidths - Width of the lines that will divide each cell\n# linecolor - Color of the lines that will divide each cell\n# cbar -\n# cbar_kws -\n# cbar_ax - Axes in which to draw the colorbar\n# square - If true, set the Axes aspect to \"equal\" so each cell will be square-shaped\n# xticklabels, yticklabels - If true, plot the column names of the dataframe\n# mask - If passed, data will not shown in cells where mask is true -->","1bc35017":"## Strip Plot - stripplot()\n\n<!-- x, y, hue - Inputs for plotting long-form data\ndata - Dataset for plotting. If x and y are absent, this is interpreted as wide-form\norder, hue_order - Order to plot the categorial levels in\njitter - Amount of jitter (only along categorical axis) to apply\norient - {\"v\"\/\"h\"} Orientation of the plot\npalette - \ndodge - Seperate the strips for different hue levels along the categorial axis\nmarker -\nsize - radius of the markers\nedgecolor -\nlinewidth -\nalpha - -->","f1422d35":"## Regression Plots:\nlmplot() - Plot data and regression model fits across a FaceGrid\n\nregplot() - Plot data and a linear regression model fit\n\nresidplot() - Plot the residuals of a linear regression","7eeebd53":"## Relational Plots:\n\nrelplot() - Figure-level interface for drawing relational plots onto a FaceGrid\n\nscatterplot() - Draw a scatterplot with possibility of several semantic groupings\n\nlineplot() - Draw a line plot with possibility of several semantic groupings","628425eb":"## Bar Plot - barplot()\n\n<!-- # x, y, hue - Inputs for plotting long-form data\n# data - Dataset for plotting. If x and y are absent, this is interpreted as wide-form\n# order, hue_order - Order to plot the categorial levels in\n# estimator - Statistical function to estimate within each categorical bin\n# ci - {int, 'sd', None} Size of confidence interval\n# orient - {\"v\"\/\"h\"} Orientation of the plot\n# dodge - Whether elements should be shifted along categorical axis\n# palette -\n# color -\n# saturation -\n# errcolor - Color for the lines that represent the confidence interval\n# errwidth - Thickness of error bar lines and caps\n# capsize - Width of the caps on error bars -->","ab74455f":"## Pair Plot - pairplot()\n\n<!-- # data - Long-form dataframe\n# hue - Variable in data to map plot aspects to different colors\n# hue_order - Order for hue levels\n# palette -\n# vars - Variables within data to use\n# {x,y}_vars - Variables within data to use seperately for the rows and columns \n# kind - {'scatter', 'reg'} Kind of plot for non-identity relationships\n# diag_kind - {'auto', 'hist', 'kde', None} Kind of plot for the diagonalsubplots\n# markers -\n# height -\n# aspect -\n# corner -\n# dropna - Drop missing values from the data before plotting\n# {plot,diag,grid}_kws - -->","23989a64":"## Regression Plot - regplot()\n\n<!-- # x, y - Input variables\n# data - Long-form dataframe\n# x_estimator - Apply this function to each unique value if x and plot the resulting estimate\n              # This is useful when x is a discrete variable\n# x_bins - Bin the x variable into discrete bins and then estimate the central tendency and a confidence interval\n         # This binning only influences how the scatterplot is drawn\n         # When this parameter is used, it implies that the default of x_estimator is np.mean\n# x_ci - {'ci', 'sd', int, None} Size of the confidence interval used when plotting a central tendency for discrete values of x\n# scatter - If true, draw a scatterplot with the underlying observations\n# fig_reg - If true, estimate and plot a regression model relating the x and y variables \n# ci - Size of the confidence intervalfor the regression estimate\n# order - \n# logistic - If true, assume that y is a binary variable and use statsmodel to estimate a logistic regression model; Set ci to None\n# lowess - If true, use statsmodel to estimate a nonparametric locally weighted linear regression\n# robust - If true, use statsmodel to estimate a robust regression. This will de-weight outliers; Set ci to None\n# log_x - If true, estimate a linear regression of the form y~log(x); x must be positive \n# {x,y}_partial - Confounding variables to regress out of the x or y variables before plotting \n# truncate - If true, the regression line is bounded by the data limits otherwise it extends to the x axis limits\n# {x,y}_jitter - Add a uniform noise of this size to either the x or y variables \n# label - \n# color - Color to apply to all plot elements\n# marker - Marker to use for the scatterplot -->","c67dbc1e":"## Point Plot - pointplot()\n\n<!-- # x, y, hue - Inputs for plotting long-form data\n# data - Dataset for plotting. If x and y are absent, this is interpreted as wide-form\n# order, hue_order - Order to plot the categorial levels in\n# estimator - Statistical function to estimate within each categorical bin\n# ci - {int, 'sd', None} Size of confidence interval\n# orient - {\"v\"\/\"h\"} Orientation of the plot\n# dodge - Whether elements should be shifted along categorical axis\n# palette -\n# color -\n# markers - Markers to use for each of the hue levels\n# linestyles - Linestyle to use for each of the hue levels\n# join - If true, lines will be drawn between point estimates at the same hue level\n# scale - Scale factor for the plot elements\n# errwidth - Thickness of error bar lines and caps\n# capsize - Width of the caps on error bars -->","fe5820f4":"## Line Plot - lineplot()\n\n<!-- # x, y - Input data variables\n# hue - Grouping variable that will produce points with different colors\n# size - Grouping variable that will produce points with different sizes\n# style - Grouping variable that will produce points with different markers\n# data - DataFrame\n# palette - \n# sizes - Choose a min and max point size\n# markers - Choose a specific set of markers\n# legend - {'brief', 'full', False}\n# alpha - Transparency\n# hue_order -\n# hue_norm -\n# size_order -\n# size_norm -\n# style_order -\n# dashes - How to draw lines for different levels of style variable\n# err_style - {'band', 'bars'}\n# sort - Sort the data by x values before plotting\n# estimator - Method for aggregating across multiple observations of the y variable at the same x level\n# ci - {int, 'sd', None} Size of confidence interval -->","5609e299":"## Scatterplot - scatterplot()\n\n<!-- # x, y - Input data variables\n# hue - Grouping variable that will produce points with different colors\n# size - Grouping variable that will produce points with different sizes\n# style - Grouping variable that will produce points with different markers\n# data - DataFrame\n# palette - \n# sizes - Choose a min and max point size\n# markers - Choose a specific set of markers\n# legend - {'brief', 'full', False}\n# alpha - Transparency\n# hue_order -\n# hue_norm -\n# size_order -\n# size_norm -\n# style_order - -->","7b226cbf":"## Distribution Plot - displot()\n\n<!-- # a - Observed data\n# bins - Specification of hist bins\n# hist - Whether to plot a (normed) histogram\n# kde - Whether to plot a gaussian kernel density estimate\n# rug - Whether to draw a rugplot on the support axis\n# fit -\n# color -\n# vertical - If true, observed values are on y-axis\n# hist_kws, kde_kws, rug_kws - dict\n# norm_hist - If true, histogram height shows a density rather than a count -->","1cdacc04":"## Boxplot - boxplot()\n\n<!-- # x, y, hue - Inputs for plotting long-form data\n# data - dataset for plotting. If x and y are absent, this is interpreted as wide-form\n# order, hue_order - Order to plot the categorial levels in\n# orient - {\"v\"\/\"h\"} Orientation of the plot\n# dodge - Seperate the strips for different hue levels along the categorial axis\n# palette -\n# linewidth -\n# saturation -\n# width -\n# fliersize -\n# whis -  -->","1248118e":"## Bonus Plots:\npairplot() - Draw a plot of two variables with bivariate and univariate graphs \n\njointplot() - Plot paiwise realtionships in a dataset ","b5173c61":"## Swarm Plot - swarmplot()\n\n<!-- # x, y, hue - Inputs for plotting long-form data\n# data - Dataset for plotting. If x and y are absent, this is interpreted as wide-form\n# order, hue_order - Order to plot the categorial levels in\n# dodge - Seperate the strips for different hue levels along the categorial axis\n# orient - {\"v\"\/\"h\"} Orientation of the plot\n# palette -\n# marker -\n# size - radius of the markers\n# edgecolor -\n# linewidth -\n# alpha - -->","311c886c":"## Distribution Plots:\ndisplot() - Flexibly plot a univariate distribution of observations\n\nkdeplot() - Fit and plot a univariate or bivariate kernel density estimate\n"}}