{"cell_type":{"dd4cc7d3":"code","b7b365cd":"code","b7f600c1":"code","0c16fe33":"code","67b9e0c3":"code","e76a7f7b":"code","74567695":"code","d59afeaa":"code","139ba6de":"code","a5c378d6":"code","0f3dddf0":"code","ae4e3b8d":"code","acae8b28":"code","12355d1e":"code","0dbe9571":"code","1a9b6131":"code","6017dfb4":"code","4fc6c89f":"code","91ce9a48":"code","a1e616ed":"code","c9dad086":"code","bc3f0223":"code","01fd3c9a":"code","dd4b3d5d":"code","9c8ccb93":"code","0ee9f020":"code","58447ecb":"code","219f220a":"code","ed8c0b20":"code","17281573":"code","71a3f9e6":"code","866a48c4":"code","cf41f5c1":"code","c9a09a2b":"code","6a099132":"code","8e09357d":"code","0128217e":"code","35b0d4ad":"code","abfce00a":"code","44ceb407":"code","ce1d3ebc":"code","9689e11f":"code","e6bde766":"code","d954df68":"code","e07fcf05":"code","171f9dc2":"code","d8604c23":"code","5c24aefa":"code","059575f1":"code","d0dc1ac5":"markdown","3f25bb8e":"markdown","bab21a4a":"markdown","56d73010":"markdown","01397aae":"markdown","6fa86584":"markdown","69f2774e":"markdown","8c038aeb":"markdown","86d162e9":"markdown","66593c75":"markdown","38e54d08":"markdown","ad8ef733":"markdown","c8a95c90":"markdown","1fb461f5":"markdown","e153754a":"markdown","ed373a29":"markdown","c6f5d50a":"markdown","d5bae439":"markdown","126ab4b9":"markdown","070e9163":"markdown","e535d9ab":"markdown","ff26b720":"markdown","74619130":"markdown"},"source":{"dd4cc7d3":"# Importing the librabries to be used thoughout our submission:\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing\nfrom sklearn.linear_model import LogisticRegression #logistic regression for our model\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","b7b365cd":"# When combining the two data sets we wil remove the \"survived\" column. We will also start by removing the \"Ticket\" and \"Cabin\" column, as we have chosen not \n# to use this in our previous versions as well, and Cabin simply have too many missing values.\ntd_train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntd_test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n\n# This will be our concatized data set\ntd_all = pd.concat([td_train.drop(columns=['Survived','Ticket','Cabin']), td_test.drop(columns=['Ticket','Cabin'])]) ","b7f600c1":"# Printing the shape of our three data sets\n\nprint('Train shape:', td_train.shape)\nprint('Test shape:', td_test.shape)\nprint('Combined data shape:',td_all.shape)","0c16fe33":"# By computing our above stated operations, we now have the following:\n\ntd_all.info()","67b9e0c3":"# First, we will try to address which columns contain missing values:\n\ntd_all.isnull().sum()","e76a7f7b":"# We'll start with the 'fare'-column, which has just one missing value:\n# First, lests have a look at the excact row:\n\ntd_all.loc[td_all['Fare'].isnull()]","74567695":"# We could fill in the mean value for Fare:\ntd_all['Fare'].mean()\n\n# But since the passengers paid different prices depending on which class they stayed in,\n# we can calculate the mean price of passengers who stayed at 3rd class and embarked at S:\ntd_all.groupby(['Pclass', 'Embarked']).agg({'Fare':'mean'})\n","d59afeaa":"# based on the above operation, we can see that for this exact passenger, residing at index 152, a fare price of 14 will be most precise:\ntd_all.loc[152,'Fare'] = 14.4","139ba6de":"#td_all.info()","a5c378d6":"td_all.loc[td_all['Embarked'].isnull()]","0f3dddf0":"# Both at Pclass 1, lets have a look at the distribution of embarkment at this class:\ntd_all.groupby(['Pclass', 'Embarked']).agg({'Embarked':'count'})","ae4e3b8d":"# They will be assigned Embarkment value 'S' based on the above:\ntd_all.loc[61,'Embarked'] = 'S'\ntd_all.loc[829,'Embarked'] = 'S'","acae8b28":"#td_all.info()","12355d1e":"# Importing Counter functionality from the collections library\nfrom collections import Counter\n\n# Creating a copy of the df with the passenger titles with missing values in Age column\ntd_age_na = td_all[td_all['Age'].isna()]\n\n# Instantiating an empty list \ntitles = []\n\n# The name is first sliced by the ',', and then the name is sliced from \n# this index intil the first occurence of a space ' ':\nfor row in td_age_na['Name']:\n    title = row[(row.find(','))+2:].split(\" \")[0] # '+2' in order to slice from the beginning of the title\n    titles.append(title)\n\n# Turning the list containing the last names into a dictionary so that we can see how many with each title were on the ship\ntitles_counter = dict(Counter(titles))\n\n# Sorting the list, showing the title with the highest occurence first\ntitles_counter = sorted(titles_counter.items(), key = lambda x: x[1], reverse = True)\n\nprint(titles_counter)\n","0dbe9571":"# First, we will address the passengers with more than one empty cell\n\n# Class function\ndef class_pas (c): \n    \n    # Creating df with all rows not containing any null values\n    td_copy = td_all[td_all['Age'].notna()]\n    \n    # Filtering based on chosen Pclass\n    td_copy = td_copy.loc[td_copy['Pclass']== c]\n    \n    # Looping though the key values in the titles_counter dictionary\n    for key, value in titles_counter:\n        \n        # We do not want Dr. and Ms. as they only had one occurence\n        if (key != 'Dr.') and (key != 'Ms.'): \n            \n            # Calculating the mean age for each title\n            average_age = round(td_copy.loc[td_copy['Name'].str.contains(key)].Age.mean())\n            print('Average age for {} in {}. class: {}'.format(key,c,average_age))\n    \n    print('\\n ---------------------- \\n')","1a9b6131":"# Calling our above stated function to see any correlation between title and Pclass:\n\nclass_pas(1)\nclass_pas(2)\nclass_pas(3)","6017dfb4":"# As there do seem to be some correlation between age, title and class, \n# we will proceed with applying the mean ages that fit the missing cells.\n\ndef fill_age (pclass,title_,mean_age):\n    td_all['Age'].loc[(td_all['Pclass'] == pclass) & \n    (td_all['Age'].isnull()) & \n    (td_all['Name'].str.contains('{} '.format(title_)))] = mean_age\n    ","4fc6c89f":"# Filling up the empty Age cells with the info and function from above:\n\nfill_age(1,'Mr.',42) # Average age for Mr. in 1. class: 42\nfill_age(1,'Miss.',30) # Average age for Miss. in 1. class: 30\nfill_age(1,'Mrs.',43) # Average age for Mrs. in 1. class: 43\nfill_age(1,'Master.',7) # Average age for Master. in 1. class: 7\n\nfill_age(2,'Mr.',33) # Average age for Mr. in 2. class: 33\nfill_age(2,'Miss.',21) # Average age for Miss. in 2. class: 21\nfill_age(2,'Mrs.',33) # Average age for Mrs. in 2. class: 33\nfill_age(2,'Master.',3) # Average age for Master. in 2. class: 3\n\nfill_age(3,'Mr.',29) # Average age for Mr. in 3. class: 29\nfill_age(3,'Miss.',17) # Average age for Miss. in 3. class: 17\nfill_age(3,'Mrs.',32) # Average age for Mrs. in 3. class: 32\nfill_age(3,'Master.',6) # Average age for Master. in 3. class: 6","91ce9a48":"# We still have two missing values:\ntd_all.loc[td_all['Age'].isnull()]","a1e616ed":"# Lets have a look at all the doctors:\ntd_all.loc[td_all['Name'].str.contains('Dr. ')]","c9dad086":"# Calculating the mean age for the Dr.'s from 1st class:\ndr_mean = round((td_all['Age'].loc[(td_all['Pclass'] == 1) \n& (td_all['Age'].notna())\n& (td_all['Name'].str.contains('Dr. '))]).mean()) \n\nprint('Mean age of the Doctors: {}'.format(dr_mean))","bc3f0223":"# Lets have a look at all the Ms.:\ntd_all.loc[td_all['Name'].str.contains('Ms. ')]","01fd3c9a":"# Inserting the value of a first class Dr.:\ntd_all.loc[766,'Age'] = 46\n\n# Since the other ms. did not fit the ms. with missing value, we will \n# instead parse the value for a miss at 3rd class into the cell:\ntd_all.loc[88,'Age'] = 17","dd4b3d5d":"# No more missing values!\ntd_all.info()","9c8ccb93":"# First, we'll start with sex and Embarked:\n\n# Sex\ntd_all[\"Sex\"] = td_all[\"Sex\"].astype(\"category\")\ntd_all[\"Sex\"] = td_all[\"Sex\"].cat.rename_categories({'male': 1, 'female': 0})\n\n# Embarked\ntd_all[\"Embarked\"] = td_all[\"Embarked\"].astype(\"category\")\ntd_all[\"Embarked\"] = td_all[\"Embarked\"].cat.rename_categories({'S': 1, 'Q': 2, 'C': 3})","0ee9f020":"# Checking if all looks as expected:\ntd_all.head(10)","58447ecb":"# For this purpose, we will be using the bit of code that we wrote earlier, but this time with all rows:\n\n# Instantiating an empty list \ntitles_all = []\n\n# The name is first sliced by the ',', and then the name is sliced from this index intil the first \n# occurence of a dot, as this marks the ending of all titles '.':\nfor row in td_all['Name']:\n    title = row[(row.find(','))+2:].split(\".\")[0] # '+2' in order to slice from the beginning of the title\n    titles_all.append(title)\n\n# Turning the list containing the last names into a dictionary so that we can see how many passengers of each title were on the ship\ntitles_all_counter = dict(Counter(titles_all))\n\n# Showcasing the list\ntitles_all_counter","219f220a":"# Now we have to do a bit of research on the different titles\ndef name_title (old_title,new_title):\n    td_all['Name'].loc[(td_all['Name'].str.contains('{}'.format(old_title)))] = new_title","ed8c0b20":"# Renaming titles\nname_title('Mr. ','Mr')\nname_title('Mrs. ','Mrs')\nname_title('Miss. ','Miss')\nname_title('Master. ','Master')\nname_title('Don. ', 'Don')\nname_title('Rev. ','Rev')\nname_title('Dr. ','Dr')\nname_title('Mme. ','Mme')\nname_title('Ms. ','Ms')\nname_title('Major. ','Major')\nname_title('Lady. ','Lady')\nname_title('Sir. ','Sir')\nname_title('Mlle. ','Mlle')\nname_title('Col. ','Col')\nname_title('Capt. ','Capt')\nname_title('Jonkheer. ','Jonkheer')\nname_title('Dona. ','Dona') \nname_title('the Countess','Countess')","17281573":"# Now that we have condensed every passenger's name down to their title, it's time to assign these titles to some values:\ntd_all['Name'] = td_all['Name'].map( {\n    \"Mr\": 0, \n    \"Miss\": 1, \n    \"Mrs\": 2, \n    \"Master\": 3,\n    \"Dr\": 3,\n    \"Rev\": 3,\n    \"Col\": 3,\n    \"Major\": 3,\n    \"Mlle\": 3,\n    \"Countess\": 3,\n    \"Ms\": 3,\n    \"Lady\": 3,\n    \"Jonkheer\": 3,\n    \"Don\": 3,\n    \"Dona\": 3,\n    \"Mme\": 3,\n    \"Capt\": 3,\n    \"Sir\": 3\n})\n","71a3f9e6":"# All looks as expected\ntd_all.head()","866a48c4":"# Had some trouble using our class_fare function until we discovered that the feature had to be turned into an integer\ntd_all['Fare'] = td_all['Age'].astype(int)","cf41f5c1":"# Function to classify our Fare intervals:\n# Defines the interval based on the lower and upper number and sets the fare class based on the 'num' = number\ndef class_fare (lower,upper,num):\n    td_all['Fare'].loc[(td_all['Fare'] > lower) & (td_all['Fare'] <= upper)] = num","c9a09a2b":"# By using class_fare we transform the fare column into consisting os categorical numbers instead of the fare price:\nclass_fare(0,10,1) # Monkey class\nclass_fare(10,30,2) # Economy class\nclass_fare(30,100,3) # First class\nclass_fare(100,1000,4) # Business class","6a099132":"#pd.set_option(\"display.max_rows\", None, \"display.max_columns\", None)\ntd_all","8e09357d":"# Had some trouble using our class_age function until we discovered that the feature had to be turned into an integer\ntd_all['Age'] = td_all['Age'].astype(int)","0128217e":"# Function to classify our Fare intervals:\n# Defines the interval based on the lower and upper number and sets the Age class based on the 'num' = number\ndef class_age (lower,upper,num):\n    td_all['Age'].loc[(td_all['Age'] > lower) & (td_all['Age'] <= upper)] = num","35b0d4ad":"# Using class_age function to classify different age intervals\nclass_age(0,3,1) # Babies\nclass_age(3,10,2) # Kids\nclass_age(10,20,3) # Teenagers \/ young adults\nclass_age(20,55,4) # Adults\nclass_age(55,69,5) # \"mature\" Adults \nclass_age(69,100,6) # Old adults","abfce00a":"# Checking if all looks as expected:\ntd_all","44ceb407":"# We could also calculate a new column, representing the total family size of each passenger based on SibSp and Parch.\ntd_all['Fam'] = td_all['SibSp'] + td_all['Parch']","ce1d3ebc":"# Let's have a check:\ntd_all","9689e11f":"# Let's have a look at the different family sizes:\ntd_all.groupby('Fam').count()","e6bde766":"# Final check of data types before entering the modelling phase\ntd_all.info()","d954df68":"# -------------- LOGISTIC REGRESSION --------------\n# trying Name, Sex, Pclass, Fare and Age in our model --> 0.76794\n# trying Name, Sex, Pclass, Fare, Age + embarked --> 0.76315\n# trying Name, Sex, Pclass, Fare, Age + Fam --> 0.77272\n# trying Pclass, Sex, Age, Fam --> 0.77511\n# trying Pclass, Sex, Age --> 0.77033\n# trying Pclass, Sex, Age, SibSp --> 0.77511\n# trying Pclass', 'Sex', 'Age', 'SibSp', 'Fare', 'Fam' --> 0.77511\n# trying 'Pclass', 'Sex', 'Age', 'Fam', 'Name' after re-engineering 'Name' --> 0.78468\n\n# -------------- RANDOM FOREST --------------\n# trying 'Pclass', 'Sex', 'Age', 'Fam' --> 0.77990\n# trying 'Pclass', 'Sex', 'Age', 'Fam', 'Name' after re-engineering 'Name' --> 0.77990\n\n\n# Dropping the other columns:\ntd_all = td_all.drop(columns=['PassengerId', 'SibSp', 'Parch','Embarked'])","e07fcf05":"# Sepreating data back into training and test:\n\n# first 891 rows were the training data\nx = td_all.iloc[:891]\ny = td_train.Survived\n\n# all rows beyond 891 were the titanic_test data\ntd_test = td_all.iloc[891:]","171f9dc2":"# Instantiating an instance of a class of our model \nlogreg = LogisticRegression(max_iter = 5000, C=0.1)\n\n# Fitting the model to our data\nlogreg.fit(x,y)\n\n# Saving our predictions on Survival\npredictions = logreg.predict(td_test)","d8604c23":"# Checking the \"weight\" of our chosen features:\nprint(list(logreg.coef_))\nprint(x.columns)","5c24aefa":"# An indication of our score\nlogreg.score(x,y)","059575f1":"td_test = pd.read_csv('..\/input\/titanic\/test.csv')\n\noutput = pd.DataFrame({'PassengerId': td_test['PassengerId'], 'Survived': predictions})\noutput.to_csv('2fast4python_submission.csv', index=False)\nprint(\"u are truly 2 fast 4 pyhton!\")","d0dc1ac5":"### Logistic regression","3f25bb8e":"### The 'Age' column","bab21a4a":"# **Data preperation step 1: missing values**","56d73010":"### Classifying Fare prices","01397aae":"Resulted in a score of **0.78229** at position 2996 at time of hand-in :-)","6fa86584":"As we noticed above, 2 rows contain missing values in the embarked column. Since we only have 2 instances, Let's have a look at the rows:","69f2774e":"# **Initialising our data**","8c038aeb":"### The 'Embarked'column ","86d162e9":"After working with the training data and test data as two seperate data sets for the first 12 versions, we decided to combine the two data sets for our data preperation.","66593c75":"### Family size","38e54d08":"# **Data preperation step 2: working with features**","ad8ef733":"### Name column","c8a95c90":"### Sex, Embarked","1fb461f5":"We will declare a function to help us out:","e153754a":"In order to properly assign the most precise value for age in the missing cells, we will try to assign it based on title and Pclass. \n\n**First step:** extracting the title of each passenger. This will rely on some of the same code written in our portfolio 1a.","ed373a29":"### The 'Fare' column","c6f5d50a":"Now we want to convert the name column into a column that can be used in our model. From Step 1 we have learned that the use of titles is a common thing for all passager names, which could be interesting to convert into a categorical feature.","d5bae439":"We will declare a function to help us out:","126ab4b9":"# **Step 3: Modelling**","070e9163":"Before initiating our ML-model, we first have to prepare our data.","e535d9ab":"# Submission","ff26b720":"Now that we have cleared off any empty cells, the time has come to work with the classification of our features.","74619130":"### Classifying Ages"}}