{"cell_type":{"f96763dc":"code","32d32f1f":"code","b5183451":"code","a9b93eb2":"code","fad4ffc0":"code","75c9227f":"code","351035f8":"code","cb0e8223":"code","b5f68456":"code","5fe86f73":"code","2bb98e08":"code","e6409b8a":"code","ba2fae0a":"code","95c1af26":"code","059af24e":"code","62353ba6":"code","d4dfc108":"code","e1d6676b":"code","956d80cf":"code","0d5e68a1":"code","50109a19":"code","e8492f05":"code","3a1f63d5":"code","e76fb282":"code","b6cb1667":"code","090fb80d":"code","fd35be25":"code","35bd3db9":"code","32854229":"code","24b525c6":"markdown"},"source":{"f96763dc":"import pandas as pd\nimport os \nimport glob\nimport json\nimport re ","32d32f1f":"ls ..\/input\/cityofla\/CityofLA\/","b5183451":"BP = '..\/input\/cityofla\/CityofLA\/'\ndef ji(a):\n    \"\"\"quick join cause I don't like typing\"\"\"\n    return os.path.join(BP, a)\n\ndef load_file(fname):\n    lis = list()\n    with open(fname) as f:\n        for i in f:\n            lis.append(i)\n    return lis","a9b93eb2":"\nfile_names = glob.glob(ji('Job Bulletins\/*'))\nfile_names = sorted(file_names)\ndata_dict = dict()\n\nend_words = ['NOTE', 'PROCESS', 'DUTIES', 'SALARY', 'APPLY']\n\nmissed_fnames = list()\n\nfor fname in file_names:\n    try:\n        lst = load_file(fname)\n        found_title = False\n        dct = dict()\n        for e, line in enumerate(lst):\n            line = line.strip()\n            line = re.sub(r'[\\t\\n]*', '', line)\n            if not found_title and line != '\\n': \n                dct['job_title'] = lst[e].strip() \n                found_title = True\n            elif \"Class Code:\" in line:\n                dct['class_code'] = int(line.split(' ')[-1].strip())\n            elif 'REQUIREMENT' in line:\n                # now we are in important part\n                new_list = lst[e:]\n                break\n\n\n        done = False\n        requirements_list = list()\n        for line in new_list:\n            # start a new bullet point\n            # note this misses multiline bullet points\n            for word in end_words:\n                if word in line:\n                    done = True\n            if done:\n                break\n            requirements_list.append(line)\n\n        dct['requirements'] = requirements_list\n        data_dict[dct['class_code']] = dct\n    except:\n        missed_fnames.append(fname)\n        print('didnt work')\n\n# do some cleaning \nkeys = list(data_dict.keys())\nfor key in keys:\n    dd = data_dict[key]\n    new_list = list()\n    for e, i in enumerate(dd['requirements']):\n        if e == 0:\n            continue\n        elif len(i) < 10:\n            continue\n        else:\n            new_list.append(i.strip())\n    data_dict[key]['requirements'] = new_list\n\nwith open('requirements_data.json', 'w') as f:\n    json.dump(data_dict, f)","fad4ffc0":"with open('requirements_data.json') as f:\n    req_dict = json.load(f) ","75c9227f":"# start labelling here. ","351035f8":"label_dict = dict()","cb0e8223":"# create iterator so we can get one key at a time\nkeys = iter(sorted(list(req_dict.keys())))\ncurrent_key = 0\n","b5f68456":"# running this cell prints out requirements for one bulletin\nkey = next(keys)\n# increment key position: helps if we need to restart\ncurrent_key += 1\ntmp = req_dict[key]['requirements']\nfor i in tmp:\n    print(i, '\\n')\nprint('position of current key: {}'.format(current_key))\nprint(key)","5fe86f73":"label_dict[key] = ['implicit_req']","2bb98e08":"label_dict[key] = ['explicit_req']","e6409b8a":"label_dict[key] = ['degree_and_implicit_req']","ba2fae0a":"label_dict[key] = ['degree_and_implicit_req', 'explicit_req', 'explicit_req']","95c1af26":"label_dict[key] = ['explicit_req', 'explicit_req']","059af24e":"label_dict[key] = ['referral', 'letter_of_rec']","62353ba6":"label_dict[key] = ['explicit_req', 'letter_of_rec']","d4dfc108":"label_dict[key] = ['explicit_req', 'implicit_req']","e1d6676b":"label_dict[key] = ['explicit_req', 'degree_req']","956d80cf":"label_dict[key] = ['degree_and_unit_req', 'degree_and_unit_req']","0d5e68a1":"label_dict[key] = ['degree_req', 'certification_req', 'explicit_req']","50109a19":"label_dict[key] = ['degree_and_unit_req', 'explicit_req', 'null']","e8492f05":"label_dict[key] = ['course_req', 'implicit_req']","3a1f63d5":"label_dict[key] = ['explicit_req', 'course_unit_req']","e76fb282":"label_dict[key] = ['implicit_req', 'course_unit_req']","b6cb1667":"label_dict[key] = ['implicit_req','explicit_req','course_req']","090fb80d":"label_dict[key] = ['explicit_req', 'implicit_req', 'course_req']","fd35be25":"label_dict","35bd3db9":"with open('requirements_labelled.json', 'w') as f:\n    json.dump(label_dict, f)","32854229":"# in case we need to restart\nfor i in range(current_key):\n    key = next(keys)","24b525c6":"### labelling requirements \n\nThis is work in progress code for labelling requirements with different classes which ultimately will lead to solving an nlp problem. "}}