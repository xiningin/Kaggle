{"cell_type":{"a60cd073":"code","87dbfae9":"code","861139f9":"code","62286753":"code","b71e5277":"code","dafbe34e":"code","f7710f00":"code","5e57f27d":"code","ab12b2c2":"code","578bfbaa":"code","38efe795":"code","e84bac51":"code","46ef90ef":"code","4b14f263":"code","6b7cdf90":"code","6ec0d8fe":"markdown","c65aadb4":"markdown","9691949a":"markdown","7562a45d":"markdown","8fe01426":"markdown","23851a99":"markdown","00cf9a8b":"markdown","18a4894c":"markdown","1d32d3b1":"markdown","acb31a25":"markdown","90e165e9":"markdown","6ce05da0":"markdown","ff6eeed2":"markdown","4f5f4569":"markdown","c06df9ae":"markdown"},"source":{"a60cd073":"from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom surprise import Dataset\nfrom surprise import Reader\nfrom surprise.model_selection import cross_validate\nfrom surprise.model_selection import GridSearchCV\nfrom surprise import KNNBasic, KNNWithMeans, KNNWithZScore\nfrom surprise import SVD, SVDpp, NMF\nfrom surprise import SlopeOne, CoClustering\nfrom surprise import accuracy\nfrom surprise.model_selection import train_test_split\nimport os\n","87dbfae9":"reviews = pd.read_csv('..\/input\/ml-1m\/ml-1m\/ratings.dat', names=['userID', 'movieID', 'rating', 'time'], delimiter='::', engine= 'python')\nprint('Rows:', reviews.shape[0], '; Columns:', reviews.shape[1], '\\n')\n\nreviews.head()","861139f9":"print('No. of Unique Users    :', reviews.userID.nunique())\nprint('No. of Unique Movies :', reviews.movieID.nunique())\nprint('No. of Unique Ratings  :', reviews.rating.nunique())","62286753":"rts_gp = reviews.groupby(by=['rating']).agg({'userID': 'count'}).reset_index()\nrts_gp.columns = ['Rating', 'Count']","b71e5277":"plt.barh(rts_gp.Rating, rts_gp.Count, color='royalblue')\nplt.title('Overall Count of Ratings', fontsize=15)\nplt.xlabel('Count', fontsize=15)\nplt.ylabel('Rating', fontsize=15)\nplt.grid(ls='dotted')\nplt.show()","dafbe34e":"file_path = os.path.expanduser('..\/input\/ml-1m\/ml-1m\/ratings.dat')\nreader = Reader(line_format='user item rating timestamp', sep='::')\ndata = Dataset.load_from_file(file_path, reader=reader)\n\ntrainset, testset = train_test_split(data, test_size=.15)","f7710f00":"algoritmo = KNNBasic(k=50, sim_options={'name': 'pearson', 'user_based': True, 'verbose' : True})","5e57f27d":"algoritmo.fit(trainset)","ab12b2c2":"uid = str(49)  ","578bfbaa":"iid = str(2058)  # raw item id","38efe795":"print(\"Prediction for rating: \")\npred = algoritmo.predict(uid, iid, r_ui=4, verbose=True)","e84bac51":"test_pred = algoritmo.test(testset)","46ef90ef":"print(\"Deviation RMSE: \")\naccuracy.rmse(test_pred, verbose=True)","4b14f263":"# Avalia MAE\nprint(\"Analisys MAE: \")\naccuracy.mae(test_pred, verbose=True)","6b7cdf90":"# KNNWithMeans with 50 neighbors, user based\nalgoritmo = KNNWithMeans(k=50, sim_options={'name': 'cosine', 'user_based': False, 'verbose' : True})\n\nalgoritmo.fit(trainset)\n\n# Hide the real rating and try to predict\n# real rating is 4\n# Select User and Movie\nuid = str(49)\niid = str(2058)\n\n# Predict the rating\nprint(\"\\nMaking prediction\")\npred = algoritmo.predict(uid, iid, r_ui=4, verbose=True)\n\ntest_pred = algoritmo.test(testset)\n\n# Deviation RMSE\nprint(\"\\nDeviation RMSE: \")\naccuracy.rmse(test_pred, verbose=True)\n\n# Analisys MAE\nprint(\"\\nAnalisys MAE: \")\naccuracy.mae(test_pred, verbose=True)","6ec0d8fe":"### We will hide a rating for a user and ask algorithm to predict the rating. \n\nUser id selected: 49. He is: 18 - 24 year old. He is programmer and live in Huston, Texas","c65aadb4":"Analisys of Mean absolute error ","9691949a":"Get the prediction for the specific users and movie.","7562a45d":"### k-NN inspired algorithms - KNN Basic","8fe01426":"## k-NN inspired algorithms - KNN With Means","23851a99":"Use the trainset to trains the algorithm","00cf9a8b":"# Movielens-1m analysis using scikit-Surprise","18a4894c":"\n## Analyzing the dataset\nAttention: put the engine='python' inside the read.csv because it do not suport regex and data set separate content by '::'\n\nRead the number of columns and rows inthe dataset.","1d32d3b1":"Now run the trained model against the testset","acb31a25":"Analisys of Root-mean-square deviation","90e165e9":"## Some algorith with surprise","6ce05da0":"Algorithm configuration: K = neighbors number. \n\nName = Similarity measure. \n\nUser based = using item or user.\n\nAlgorithm KNNBasic with 50 neighbors\n\nSimilarity algorithm: pearson\n\n","ff6eeed2":"More informartion about dataset","4f5f4569":"Load again the movielens-100k dataset, but using the surprise class. UserID::MovieID::Rating::Timestamp\n","c06df9ae":"Movie: Negotiator, The (1998)::Action|Thriller. \nReal rating: 4\nRating range: 1-5\n"}}