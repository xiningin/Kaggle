{"cell_type":{"3a058f3b":"code","32d16578":"code","72cefb3a":"code","906eb837":"code","aa2a8da1":"code","95168ac9":"code","899cb418":"code","65053e4a":"code","ebd80061":"code","c6f9ad8c":"code","25d96eea":"code","219ea8d9":"code","c37daf92":"code","b0ecd2ef":"code","614013ab":"code","b5734f3c":"code","478f3615":"code","3b0a15af":"code","831e8e5d":"code","2c809727":"code","d25fc913":"code","13e38e76":"code","4db66681":"code","228fda41":"code","2fbdef18":"code","a5c21e74":"markdown","2fff03b4":"markdown","d90ff768":"markdown","85ebb390":"markdown","8a6a2dca":"markdown","b358c3fb":"markdown"},"source":{"3a058f3b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport cv2\nimport random\nfrom random import randint\nimport time\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","32d16578":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","72cefb3a":"from fastai.vision.all import *\nfrom fastai.imports import *\nfrom fastai.vision.data import *\nfrom fastai import *\nimport numpy as np\nimport fastai\nimport matplotlib.pyplot as plt","906eb837":"path = Path(\"\/kaggle\/input\/animals\/images\")\npath.ls()","aa2a8da1":"np.random.seed(42)\ndata = ImageDataLoaders.from_folder(path, train=\".\", valid_pct=0.2, item_tfms=RandomResizedCrop(512, min_scale=0.75),\n                                    bs=32,batch_tfms=[*aug_transforms(size=256, max_warp=0), Normalize.from_stats(*imagenet_stats)],num_workers=0)","95168ac9":"data.show_batch(nrows=3, figsize=(7,8))","899cb418":"data.show_batch(nrows=2, figsize=(7,8))","65053e4a":"data.show_batch(nrows=1, figsize=(7,8))","ebd80061":"# importing all the required libraries\nimport warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport skimage.io as io\nfrom skimage.transform import rotate, AffineTransform, warp\nfrom skimage.util import random_noise\nfrom skimage.filters import gaussian\nimport matplotlib.pyplot as plt\nimport PIL.Image\nimport matplotlib.pyplot as plt\nimport torch\nfrom torchvision import transforms","c6f9ad8c":"def imshow(img, transform):\n    \"\"\"helper function to show data augmentation\n    :param img: path of the image\n    :param transform: data augmentation technique to apply\"\"\"\n    \n    img = PIL.Image.open(img)\n    fig, ax = plt.subplots(1, 2, figsize=(15, 4))\n    ax[0].set_title(f'original image {img.size}')\n    ax[0].imshow(img)\n    img = transform(img)\n    ax[1].set_title(f'transformed image {img.size}')\n    ax[1].imshow(img)","25d96eea":"loader_transform = transforms.Resize((140, 140))\n\nimshow('..\/input\/animals\/images\/train_animals_108.jpg', loader_transform)","219ea8d9":"loader_transform = transforms.CenterCrop(140)\nimshow('..\/input\/animals\/images\/train_animals_108.jpg', loader_transform)","c37daf92":"loader_transform = transforms.Grayscale(num_output_channels=1)\n\nimshow('..\/input\/animals\/images\/train_animals_108.jpg', loader_transform)","b0ecd2ef":"loader_transform = transforms.ColorJitter(brightness=0, contrast=0, saturation=0, hue=0)\n\nimshow('..\/input\/animals\/images\/train_animals_108.jpg', loader_transform)","614013ab":"loader_transform = transforms.Pad(140, fill=0, padding_mode='constant')\n\nimshow('..\/input\/animals\/images\/train_animals_108.jpg', loader_transform)","b5734f3c":"loader_transform = transforms.RandomAffine(45, translate=None, scale=None, shear=None, resample=False, fillcolor=0)\n\nimshow('..\/input\/animals\/images\/train_animals_108.jpg', loader_transform)","478f3615":"loader_transform = transforms.RandomAffine(90, translate=None, scale=None, shear=None, resample=False, fillcolor=0)\n\nimshow('..\/input\/animals\/images\/train_animals_108.jpg', loader_transform)","3b0a15af":"#With a Little (Big) help from my friend Balraj Ashwath @balraj98\n\nloader_transform = transforms.RandomApply([transforms.Resize((140, 140))], p=0.5)\n\nimshow('..\/input\/animals\/images\/train_animals_108.jpg', loader_transform)","831e8e5d":"#With a Little (Big) help from my friend Balraj Ashwath @balraj98\n\nloader_transform = transforms.RandomApply([transforms.Resize((140, 140)),transforms.Pad(140, fill=0), transforms.RandomHorizontalFlip()],p=0.5)\nimshow('..\/input\/animals\/images\/train_animals_108.jpg', loader_transform)","2c809727":"loader_transform = transforms.RandomCrop(32, padding=4, padding_mode='reflect')\n\nimshow('..\/input\/animals\/images\/train_animals_108.jpg', loader_transform)","d25fc913":"loader_transform = transforms.RandomHorizontalFlip(p=0.5)\n\nimshow('..\/input\/animals\/images\/train_animals_108.jpg', loader_transform)","13e38e76":"loader_transform = transforms.RandomPerspective(distortion_scale=0.5, p=0.5, interpolation=3, fill=0)\n\nimshow('..\/input\/animals\/images\/train_animals_108.jpg', loader_transform)","4db66681":"loader_transform = transforms.RandomVerticalFlip(p=0.5)\n\nimshow('..\/input\/animals\/images\/train_animals_108.jpg', loader_transform)","228fda41":"loader_transform = transforms.RandomErasing( p=0.5, scale=(0.02, 0.33), ratio=(0.3, 3.3), value=0, inplace=False)\n\nimshow('..\/input\/animals\/images\/train_animals_108.jpg', loader_transform)","2fbdef18":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#4b42f5','#6342f5','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Il Fiore, La Farfalla e la Gentile Signorina Mar\u00edlia Prata, @mpwolke Were here' )","a5c21e74":"#Changing 45 degrees to 90 degrees","2fff03b4":"#Code from Unnat Antani https:\/\/www.kaggle.com\/unnatantani\/flower-classification-using-fastai\n\nReproduced for the 1st time in Goblin Fastai","d90ff768":"#With a Little (Big) help from my friend Balraj Ashwath @balraj98","85ebb390":"#Surprisingly found out that from the prickly and ugly Cactus came the most beautiful flower. \n\n#And the horrible Caterpillar was TRANSFORMED in a gorgeous Butterfly.","8a6a2dca":"![](https:\/\/slideplayer.it\/slide\/189745\/1\/images\/7\/e+l%E2%80%99orribile+bruco+si+era+trasformato+in+una+bellissima+farfalla..jpg)slideplayer.it","b358c3fb":"#TORCHVISION.TRANSFORMS https:\/\/pytorch.org\/docs\/stable\/torchvision\/transforms.html"}}