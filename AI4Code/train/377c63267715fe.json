{"cell_type":{"e0d63df6":"code","44ad94e0":"code","8370d455":"code","25853952":"code","60954382":"code","f4277eb9":"code","115f5207":"code","8fdfe5b9":"code","4cdcf0e4":"code","d476ce34":"code","a6561328":"code","c700962b":"code","4ccf7247":"code","7e28b3db":"code","2b2dd0e4":"code","dec4b2d9":"code","477bf2b0":"code","d19dc0e2":"code","c2c457ae":"code","90b77536":"code","f25ab579":"code","d1c65ec3":"code","408f18cf":"code","394fd3bf":"code","0223773c":"code","c2ffafda":"markdown","95c777c9":"markdown","52d55770":"markdown","7341156d":"markdown","949642a4":"markdown","3abeb194":"markdown","d7791402":"markdown","62d9c82c":"markdown","d73e88eb":"markdown"},"source":{"e0d63df6":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport csv","44ad94e0":"train = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')\nsubmission = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv')\nitems = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv')\nitem_cats = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nshops = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv')","8370d455":"train.head()","25853952":"test.head()","60954382":"#grouped = pd.DataFrame(train.groupby(['date_block_num', 'shop_id', 'item_id'])['item_cnt_day'].sum().reset_index())\n#grouped.head()","f4277eb9":"shop_group = train.groupby('shop_id')\nshop_group_list = []\n# Every item in the 'shop_group_list' is a shop group\nfor i in range(len(shop_group)):\n    shop_group_list.append(shop_group.get_group(i))\n\nshop_group_list[2].head()","115f5207":"plt.plot(range(34), shop_group_list[35].groupby('date_block_num')['item_cnt_day'].sum())\nplt.show()","8fdfe5b9":"# Drop not used columns\ntrain = train.drop(['date', 'item_price'], axis=1)\ntrain.head()","4cdcf0e4":"# Group by ['date_block_num', 'shop_id', 'item_id']\ntrain = train.groupby(['shop_id', 'item_id', 'date_block_num']).sum().reset_index()\ntrain = train.rename(columns = {\"item_cnt_day\": \"item_cnt_month\"})\ntrain.head()","d476ce34":"# This cell creates training data. Because it takes a lot of time during commit, so comment it.\n'''cols = ['shop_id', 'item_id']\nfor i in range(29,34):\n    cols.append('m'+str(i))\ntrain_months = pd.DataFrame(columns = cols)\ntest_rows = []\n\nfor index, row in test.iterrows():\n    temp = []\n    sid = row['shop_id']\n    iid = row['item_id']\n    temp.append(sid)\n    temp.append(iid)\n    for m in range(29, 34):\n        try:\n            temp.append(train.loc[(train['shop_id'] == sid) & (train['item_id'] == iid) & (train['date_block_num'] == m)]['item_cnt_month'].values[0])\n        except IndexError:\n            temp.append(0)    \n    test_rows.append(temp)\n    if index % 100 == 0:\n        print(index)\n\ntest_rows = pd.DataFrame(test_rows)\ntest_rows.columns = cols\ntrain_months = train_months.append(test_rows)\ntrain_months.head()'''","a6561328":"# read the output of above cell\ntrain_new = pd.read_csv('..\/input\/predict-sales-training-data\/train_months.csv')","c700962b":"train_new.head()","4ccf7247":"# Get the categories of testing items\ntest_cate = []\nfor index, row in train_new.iterrows():\n    test_cate.append(items.loc[(items['item_id'] == row[1])]['item_category_id'].values[0])","7e28b3db":"cate = pd.DataFrame(test_cate, columns=['item_category'])\ntrain_new = pd.concat([train_new, cate], axis=1)\ntrain_new.head()","2b2dd0e4":"x_train = np.expand_dims(np.concatenate((train_new.values[:, :1], train_new.values[:, 2:-2], train_new.values[:, -1:]), axis=1), axis=2)\ny_train = train_new.values[:, -2:-1]\nx_test = np.expand_dims(np.concatenate((train_new.values[:, :1], train_new.values[:, 3:]), axis=1), axis=2)\nprint(x_train.shape, y_train.shape, x_test.shape)","dec4b2d9":"train_new.to_csv('train_new_3.csv',index=False)\n\nprint('Saved file: ' + 'train_new_3.csv')","477bf2b0":"from keras.models import Sequential\nfrom keras.layers import LSTM, Dense, Dropout","d19dc0e2":"model = Sequential()\nmodel.add(LSTM(units=64, input_shape=(6, 1)))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1))\n\nmodel.compile(loss='mse',\n              optimizer='adam',\n              metrics=['mean_squared_error'])\nmodel.summary()","c2c457ae":"history = model.fit(x_train, y_train, batch_size=2048, epochs=200)","90b77536":"y_pred = model.predict(x_test)","f25ab579":"def write_submission(y_pred):\n    with open('submission_file_4.csv', 'w') as output:\n        writer = csv.writer(output)\n        writer.writerow(['ID', 'item_cnt_month'])\n        for i, y in enumerate(y_pred):\n            writer.writerow([i, y])\nwrite_submission(y_pred)","d1c65ec3":"'''month_list = [i for i in range(34)]\ncnt_month = []\nfor i in range(34):\n    cnt_month.append(0)\ndef create_month_list(item_id, shop_id):\n    shop = []\n    for i in range(34):\n        shop.append(shop_id)\n    item = []\n    for i in range(34):\n        item.append(item_id)\n    months = pd.DataFrame({'shop_id': shop, 'item_id': item, 'date_block_num': month_list, 'item_cnt_month': cnt_month})\n    return months'''","408f18cf":"'''try:\n    train.loc[(train['shop_id'] == 0) & (train['item_id'] == 32) & (train['date_block_num'] == 2)]['item_cnt_month'].values[0]\nexcept IndexError:\n    print('error')'''","394fd3bf":"'''df = pd.DataFrame(columns = ['shop_id', 'item_id', 'date_block_num', 'item_cnt_month'])\npre_pair = ()\nfor index, row in train.iterrows():\n    # If the (item_id, shop_id) is the same as the previous row\n    if pre_pair == (row['item_id'], row['shop_id']) and row['item_cnt_month'] != 0:\n        temp_index = df.loc[(df['shop_id'] == row['shop_id']) & (df['item_id'] == row['item_id']) & (df['date_block_num'] == row['date_block_num'])].index[0]\n        df.loc[temp_index, 'item_cnt_month'] = row['item_cnt_month']\n        continue\n    pre_pair = (row['item_id'], row['shop_id'])\n    df = df.append(create_month_list(row['item_id'], row['shop_id'])).reset_index(drop = True)\n    if row['item_cnt_month'] != 0:\n        temp_index = df.loc[(df['shop_id'] == row['shop_id']) & (df['item_id'] == row['item_id']) & (df['date_block_num'] == row['date_block_num'])].index[0]\n        df.loc[temp_index, 'item_cnt_month'] = row['item_cnt_month']\ndf\n#print(train.loc[(train['shop_id'] == 0) & (train['item_id'] == 30)]['item_cnt_month'].values[0])\n#print(train.loc[(train['shop_id'] == 0) & (train['item_id'] == 97)].index[0])'''","0223773c":"'''#train.loc[(train['shop_id'] == 0) & (train['item_id'] == 30)]['item_cnt_month'] = 20\nprint(train.loc[(train['shop_id'] == 0) & (train['item_id'] == 97)].index[0])'''","c2ffafda":"## Part 4: Training the model\n**\u4e3b\u8981\u7b56\u7565\uff1a\u5229\u7528\u8a72\u5546\u5e97\u8a72\u5546\u54c1\u524d\u56db\u500b\u6708\u7684\u92b7\u91cf\u3001\u4ee5\u53ca\u8a72\u5546\u54c1\u7684\u7a2e\u985e\uff0c\u4f86\u9810\u6e2c\u4e0b\u500b\u6708\u7684\u92b7\u91cf**","95c777c9":"### Testing dataset\n\nGiven `shop_id` and `item_id`, we have to use our model to forecast the sales for these shops and products for November 2015.\n\n**Submission file sample:**\n```\n    ID      item_cnt_month\n     0                 0.5\n     1                 0.5\n     2                 0.5\n    ...                   \n```","52d55770":"### File descriptions\n- **sales_train.csv** - the training set. Daily historical data from January 2013 to October 2015.\n- **test.csv** - the test set. You need to forecast the sales for these shops and products for November 2015.\n- **sample_submission.csv** - a sample submission file in the correct format.\n- **items.csv** - supplemental information about the items\/products.\n- **item_categories.csv**  - supplemental information about the items categories.\n- **shops.csv**- supplemental information about the shops.\n","7341156d":"## Part 3: Data Preprocessing","949642a4":"## Part 2: Data Exploration","3abeb194":"## Other attempts","d7791402":"## Part 1: Import libraries and explain dataset","62d9c82c":"# Predict Future Sales","d73e88eb":"### Training dataset\n> Data description from the competition page\n\n- **date** - date in format dd\/mm\/yyyy\n- **date_block_num** - a consecutive month number, used for convenience. January 2013 is 0, February 2013 is 1,..., October 2015 is 33\n- **shop_id** - unique identifier of a shop\n- **item_id** - unique identifier of a product\n- **item_price** - current price of an item\n- **item_cnt_day** - number of products sold. You are predicting a monthly amount of this measure\n\nWe use this data to train the model."}}