{"cell_type":{"0c2e0bc3":"code","c9c542fe":"code","cc617fb0":"code","115d8740":"code","a91e169d":"code","9a4eda8c":"code","5f7b026c":"code","90706f2e":"code","646f2416":"code","2a657780":"code","0ef159ae":"code","26a0cd4d":"code","194d9a05":"markdown","d04653f1":"markdown","83b82528":"markdown","f947a5bd":"markdown","753ac09c":"markdown","2eb672d4":"markdown"},"source":{"0c2e0bc3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c9c542fe":"import pandas as pd\ndata = pd.read_csv(\"..\/input\/adult_numerical_binned.csv\")","cc617fb0":"data\n","115d8740":"\n#If you want to fill every column with its own most frequent value \n\n\ndata = data.apply(lambda x:x.fillna(x.value_counts().index[0]))\n\n","a91e169d":"data.to_csv('adult_numerical_binned1.csv',index=False)\n","9a4eda8c":"#X = data.iloc[:, [0, 11]].values\nX = data.iloc[:, :-1].values\nY = data.iloc[:, 12].values\n\n","5f7b026c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3, random_state = 0)","90706f2e":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","646f2416":"def Classfier():\n    model.fit(X_train, y_train)\n    y_pred=model.predict(X_test)\n    #Import scikit-learn metrics module for accuracy calculation\n    from sklearn import metrics\n    # Model Accuracy, how often is the classifier correct?\n    print('Accuracy:',metrics.accuracy_score(y_test, y_pred))\n    print('Confusion Matrix:\\n', metrics.confusion_matrix(y_test, y_pred))\n    print('Report:\\n', metrics.classification_report(y_test, y_pred)) ","2a657780":"# Naive Bayes\nfrom sklearn.naive_bayes import GaussianNB as GNB\n\nmodel = GNB()\nprint('Naive Bayes') \nClassfier()","0ef159ae":"# k-nearest neighbor\nfrom sklearn.neighbors import KNeighborsClassifier as KNN\n\nmodel = KNN()\nprint('k-nearest neighbor') \nClassfier()","26a0cd4d":"#  DecisionTree\nfrom sklearn.tree import DecisionTreeClassifier as DT\n\nmodel = DT()\nprint('DecisionTree') \nClassfier()","194d9a05":"# Classfication Function\n","d04653f1":"# DecisionTree\n","83b82528":"# Splitting the dataset into the Training set and Test set\n","f947a5bd":"# Feature Scaling\n","753ac09c":"# Naive Bayes\n","2eb672d4":"# k-nearest neighbor\n"}}