{"cell_type":{"d0a7280c":"code","bf3313ed":"code","5b0bc04a":"code","6dad7276":"code","c78d7939":"code","79f4f11e":"code","52e541af":"code","72f917fc":"markdown"},"source":{"d0a7280c":"# Some snipets coppied from https:\/\/www.kaggle.com\/rdizzl3\/eda-and-baseline-model\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy.stats.mstats import gmean","bf3313ed":"train_sales = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv')\nsubmission_file = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sample_submission.csv')","5b0bc04a":"days = range(1, 1913 + 1)\ntime_series_columns = [f'd_{i}' for i in days]\ntime_series_data = train_sales[time_series_columns]","6dad7276":"EMA_x = 35  #play here\n\ndef ema(values):\n    values = list(values)\n    #print(values)\n    values = pd.DataFrame(values)\n    return values[0].ewm(span=EMA_x).mean().values[-1]\n\nforecast = time_series_data.iloc[:, -EMA_x:].copy()\nfor i in range(28):\n    forecast['F'+str(i+1)] = forecast.iloc[:, -EMA_x:].apply(ema, axis=1)    \n    \nforecast = forecast[['F'+str(i+1) for i in range(28)]]\nforecast.head(20)","c78d7939":"validation_ids = train_sales['id'].values\nevaluation_ids = [i.replace('validation', 'evaluation') for i in validation_ids]\nids = np.concatenate([validation_ids, evaluation_ids])\npredictions = pd.DataFrame(ids, columns=['id'])\nforecast = pd.concat([forecast] * 2).reset_index(drop=True)\npredictions = pd.concat([predictions, forecast], axis=1)\npredictions.to_csv('submission.csv', index=False)","79f4f11e":"predictions.head()","52e541af":"predictions.shape","72f917fc":"[](http:\/\/)# Simple MA Model\n\nI give you a MA_x to play ..."}}