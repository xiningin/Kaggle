{"cell_type":{"3daf0383":"code","b5604d48":"code","e1361695":"code","982df9b9":"code","b32b0aaa":"code","c3c525c3":"code","a3431492":"code","65f3eefa":"code","c2b13c1f":"code","ac687cad":"code","81e6ad52":"code","e5954e96":"code","4e443456":"code","fe9dd280":"code","5acbe8b4":"code","d53d4641":"code","5f0c63fa":"code","2a733e78":"code","3dc7f6fb":"code","6115ea59":"code","854973e5":"code","1c6627ab":"code","e95cdac7":"code","70d5afdd":"code","de5bd975":"code","655eea52":"code","8b3f97d8":"code","da34e24d":"code","0fed4eb2":"code","f8fd6a3f":"code","e8e79c4d":"code","a23568a8":"code","1b15a442":"markdown","cbc3e091":"markdown","f55f0502":"markdown","661be714":"markdown","053ebeb7":"markdown"},"source":{"3daf0383":"from xgboost import XGBClassifier\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import RandomizedSearchCV\n#from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import log_loss\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestRegressor\nfrom tqdm import tqdm\nfrom math import radians, sin, cos, acos\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b5604d48":"zomato_data = pd.read_csv(\"..\/input\/zomato_data_with_ratings_complete.csv\")","e1361695":"zomato_data['New_Id'] = range(1, 1+len(zomato_data))","982df9b9":"zomato_data.set_index('New_Id', inplace=True)","b32b0aaa":"zomato_data","c3c525c3":"zomato_data['menu_item']","a3431492":"zomato_data.drop(columns=['dish_liked','reviews_list','menu_item','listed_in(type)'], inplace  =True)","65f3eefa":"zomato_data.shape","c2b13c1f":"zomato_data.drop(zomato_data[zomato_data['rate'] == \"NEW\"].index, inplace = True) \nzomato_data.drop(zomato_data[zomato_data['rate'] == \"-\"].index, inplace = True)\nzomato_data.dropna(how = 'any', inplace = True)","ac687cad":"zomato_data['online_order']= pd.get_dummies(zomato_data.online_order, drop_first=True)\nzomato_data['book_table']= pd.get_dummies(zomato_data.book_table, drop_first=True)","81e6ad52":"zomato_data['rest_type'] = zomato_data['rest_type'].str.replace(',' , '') \nzomato_data['rest_type'] = zomato_data['rest_type'].astype(str).apply(lambda x: ' '.join(sorted(x.split())))","e5954e96":"zomato_data['cuisines'] = zomato_data['cuisines'].str.replace(',' , '') \nzomato_data['cuisines'] = zomato_data['cuisines'].astype(str).apply(lambda x: ' '.join(sorted(x.split())))","4e443456":"zomato_data.shape","fe9dd280":"from sklearn.preprocessing import LabelEncoder\nT = LabelEncoder()                 \nzomato_data['location_encoded'] = T.fit_transform(zomato_data['location'])\nzomato_data['rest_type_encoded'] = T.fit_transform(zomato_data['rest_type'])\nzomato_data['cuisines_encoded'] = T.fit_transform(zomato_data['cuisines'])\nzomato_data['geo_loc_encoded'] = T.fit_transform(zomato_data['geo_loc'])","5acbe8b4":"zomato_data[\"approx_cost(for two people)\"] = zomato_data[\"approx_cost(for two people)\"].str.replace(',' , '')\nzomato_data[\"approx_cost(for two people)\"] = zomato_data[\"approx_cost(for two people)\"].astype('float')","d53d4641":"zomato_data.shape","5f0c63fa":"zomato_data.head()","2a733e78":"x = zomato_data.drop(['rate','name', 'location', 'rest_type', 'cuisines', 'geo_loc'],axis = 1)","3dc7f6fb":"y = zomato_data['rate']","6115ea59":"x.shape","854973e5":"y.shape","1c6627ab":"x","e95cdac7":"# def normalize(dataframe):\n#     #print(\"Here\")\n#     test = dataframe.copy()\n#     for col in test.columns:\n#         if(col != \"online_order\" and col !=\"book_table\"):\n#             max_val = max(dataframe[col])\n#             min_val = min(dataframe[col])\n#             test[col] = (dataframe[col] - min_val) \/ (max_val-min_val)\n#     return test","70d5afdd":"# x_final = normalize(x)\nx_final = x","de5bd975":"# split the data into test and train by maintaining same distribution of output varaible .[stratify=data_y]\nx_train,x_test,y_train,y_test = train_test_split(x_final,y,stratify=y,test_size=0.20)\n# split the data into train and cv by maintaining same distribution of output varaible. [stratify=y_train]\nx_train,x_cv,y_train,y_cv = train_test_split(x_train,y_train,stratify=y_train,test_size=0.20)","655eea52":"def perform_hyperparam_tuning(list_of_hyperparam, model_name,  x_train, y_train, x_cv, y_cv):\n    cv_log_error_array = []\n    for i in tqdm(list_of_hyperparam):\n        model = RandomForestRegressor(n_estimators = i,random_state = 42,n_jobs = -1)\n        model.fit(x_train, y_train)\n        cv_log_error_array.append(model.score(x_cv, y_cv))\n    for i in range(len(cv_log_error_array)):\n        print ('accuracy for hyper_parameter = ',list_of_hyperparam[i],'is',cv_log_error_array[i])\n    return cv_log_error_array\n\ndef get_best_hyperparam(list_of_hyperparam, cv_log_error_array):\n    index = np.argmin(cv_log_error_array)\n    best_hyperparameter = list_of_hyperparam[index]\n    return best_hyperparameter\n\n\ndef perform_on_best_hyperparam(model_name, best_hyperparameter, cv_log_error_array,x_train,y_train,x_cv,y_cv,x_test,y_test):\n    \n    model = RandomForestRegressor(n_estimators = best_hyperparameter,random_state = 42,n_jobs = -1)           \n    model.fit(x_train, y_train)\n    y_pred = model.predict(x_test)\n    print(\"The test accuracy for best hyperparameter is\", model.score(x_test, y_test)*100)\n    return (y_test, y_pred, model)","8b3f97d8":"list_of_hyperparam = [10,50,100,500,1000,2000,3000]\nmodel_name = \"rf\"\ncv_log_error_array = perform_hyperparam_tuning(list_of_hyperparam, model_name,  x_train, y_train, x_cv, y_cv)","da34e24d":"best_hyperparameter = get_best_hyperparam(list_of_hyperparam, cv_log_error_array)","0fed4eb2":"(y_test, y_pred, model) = perform_on_best_hyperparam(model_name, best_hyperparameter, cv_log_error_array,x_train,y_train,x_cv,y_cv,x_test,y_test)","f8fd6a3f":"Randpred = pd.DataFrame({\"actual\": y_test, \"pred\": y_pred })\nRandpred","e8e79c4d":"print(model.predict(x_test[1001:1002]))","a23568a8":"print(y_test[1001:1002])","1b15a442":"# Load the data","cbc3e091":"# Model","f55f0502":"# Loading the libraries","661be714":"# Encoding","053ebeb7":"# Custom Functions"}}