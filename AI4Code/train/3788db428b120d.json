{"cell_type":{"2c4111f0":"code","c255f8f6":"code","3182afd9":"code","59be2de2":"code","77b40f1e":"code","b8114364":"code","49d6338d":"code","858bf5bd":"code","d7a3bb6c":"code","e70e75f0":"code","e7ebbbc0":"code","48e5f422":"code","6877f13a":"code","93a82e6b":"code","8390b4f8":"code","e2211de6":"code","5baa7170":"code","6acd9351":"code","911f1718":"code","334fb23b":"code","f78f8622":"code","e79b152f":"code","2e724767":"code","ce29e57d":"code","3781e53d":"code","35e618a3":"code","58784225":"code","445a6cd2":"markdown","f3d7d987":"markdown","786978a4":"markdown","5d8495bf":"markdown","3e5564c1":"markdown","bd7432c1":"markdown","ddd0869c":"markdown","25961a9b":"markdown","8d091e2e":"markdown","2a49a4f2":"markdown","0b8dae7d":"markdown","f5858d69":"markdown","78cc0179":"markdown","fab219f8":"markdown","a63e2680":"markdown","42524ade":"markdown","a64846c3":"markdown","01ee5355":"markdown","d70e998c":"markdown"},"source":{"2c4111f0":"print(\"Hi there\")","c255f8f6":"print(\"Let's have a picnic\")\nprint(\"The lake is beautiful\")\n\njorgeTheGoose(\"honk\")","3182afd9":"# Here is a comment. The interpreter sees that # symbol and says \"not my problem, moving on!\"\n\nprint(\"Let's visit campus\") # This is an inline comment, which can be useful for making your code easy to understand \nprint(\"\\n\\n\\nThe lake is beautiful\") # I put this in a second print statement, but I could have combined it with the first. \\n is the code for a line break, by the way.\n\n# jorgeTheGoose(\"honk\")","59be2de2":"# Integers\na = 1 # I can declare a variable by using =\nb = -59\nc = 12\nd = a + b + c\nprint(\"d = \"+ str(d)) # This is called 'string concatenation.' You can put strings together using the + operation. The str function converts objects into strings.\nprint(\"Its type is \"+ str(type(d)))  # The type function returns the type of an object","77b40f1e":"# Floating point numbers (floats)\na = 1.                             # Add a decimal after an integer to make it a float\nb = -59.23923                      # Floats can have high precision\nc = 1.2e3                          # Floats understand scientific notation. This is equivalent to 1.2x10^3, aka 1200\nd = a + b + c\nprint(\"d = \"+str(d)) # Using str again to turn d into a string so that it can be combined with the string \"d = \"\nprint(\"Its type is \"+str(type(d)))","b8114364":"# Int and int\n2**6          # 2 to the 6th power","49d6338d":"# Float and float\n2.3 * 4.5","858bf5bd":"# Float and integer\n4 * 9.8","d7a3bb6c":"# Division with ints\n6\/7","e70e75f0":"div = 20\/\/7\nremainder = 20%7\nprint(\"Integer division of 20\/\/7 gives:\")\nprint(div)\nprint(\"20 mod 7 gives the remander:\")\nprint(remainder)","e7ebbbc0":"# Exercise 1 here\n\na = 4**3\nb = 2 + 3.4**2\nc = (1+3**6)**2\nprint(a)\nprint(b)\nprint(c)","48e5f422":"string1 = \"This is a string\"            # double quotes\nstring2 = 'This is another string'      # single quotes\nstring3 = \"This isn't a problem\"        # single quote mark within double quotes\nstring4 = 'Here\\'s another way to do it'# Escaped single within singles\n# string5 = 'This won't work.'\nprint(string1)\nprint(string2)","6877f13a":"a = \"Howdy!\"\nprint(a[3])\nprint(a[-3])\nprint(len(a))","93a82e6b":"b = \"I like Mary Lyon\"\nb.upper() # returns an uppercase version","8390b4f8":"b.index(\"Mary\") #returns the index of a string inside another","e2211de6":"b.split() # returns a list of smaller strings. \n          # By default it splits on spaces, but you can also give it an input like b.split(\"y\")","5baa7170":"s = \"Howdy!\"\nprint(s[1])   # Takes one character starting at 1\nprint(s[4])   # Takes one character starting at 4\nprint(s[1:4]) # Takes all the characters between 1 and 4\nprint(s[3:])  # Takes all characters starting at 3 and going to the end\nprint(s[:3])  # Takes all characters until reaching 3\nprint(s[::2]) # Takes every other character","6acd9351":"# Excercise 2\n\nex3 = \"I do not get this!\"\n\n#### YOUR CODE HERE ####\nnotposition = ex3.index(\"not\")\nex3[:notposition] + ex3[notposition+4:]","911f1718":"mylist=[1,2,3,4]\nmylist[1:3] # Can address and slice just like a string","334fb23b":"print(\"Pop() on a list of 1,2,3,4\")\nmylist = [1,2,3,4]\nprint(mylist.pop()) # list.pop() returns the last item in a list, and removes it from the list\nprint(mylist)\n\nprint(\"\\nPop(0) on a list of 1,2,3,4\")\nmylist = [1,2,3,4]\nprint(mylist.pop(0)) # list.pop([index]) returns the indexed item in a list, and removes it from the list\nprint(mylist)","f78f8622":"print(\"I can add to the end by concatenating a list at the end\")\nmylist = [1,2,3,4]\nprint(mylist+[5,6,7])\n\nprint(\"I can add to the beginning by concatenating a list at the start\")\nmylist = [1,2,3,4]\nprint([-2,-1,0]+mylist)","e79b152f":"True and False","2e724767":"False and False","ce29e57d":"True or False","3781e53d":"1 != 2","35e618a3":"(1 != 2) and (5 > 5)","58784225":"x = 3.7\n\n# your solution here","445a6cd2":"### String methods\nMany objects in Python have functions specific to them, called methods. These can be called with dot notation: `object.method()`. Examples for strings are given below:","f3d7d987":"You can get the length of a string using len(), and you can access a particular character using square brackets to indicate location starting at 0. Negative indices are equivalent to length minus the positive index.\n![IMG_6463.JPG](attachment:IMG_6463.JPG)","786978a4":"## Data types\n\nEach language has a set of built in types that it knows how to handle. The common types we'll use in Python are\n* **Numbers** \u2013 Int and Float\n* **Text** \u2013 String\n* **Sequences** \u2013 List, Tuple, and Range\n* **Mapping** \u2013 Dictionary\n* **Boolean**","5d8495bf":"# Coding for data analysis\n## Why write code\n\n* Computers and computation are integral to a huge range of human intellectual endeavors, especially science.\n* Being able to understand and write computer code gives perspective on how computational tools work\n* Can save time by automating tedious and repetitive tasks\n* Can write custom analyses and visualizations \u2013\u00a0finer control over outcome\n* Can apply unbiased processing to datasets \n* Exact methods can be shared an applied anywhere","3e5564c1":"Division with ints will produce float numbers. Use the `\/\/` operation to do integer division (throw away the remainder), and `%` to keep only the remainder.","bd7432c1":"## Strings\n\nStrings are special lists of characters meant to hold text. They can appear wrapped in single or double quotes (`'` or `\"`). A backslash `\\` \"escapes\" a character within a string so that it isn't interpreted as code.","ddd0869c":"## What's going on?\nLike many other computer languages `any_word()` is a function named any_word. The **interpreter** sees the function and looks in its memory for `any_word`. If it finds it, it executes the associated code, otherwise it gives an error. In this case, `print` takes an object like a `string`, converts it into a string, and then displays it as output written in the output cell.\n\nTry a function it doesn't know. Execute the cell below.","25961a9b":"# Executing code\nYou are looking at a notebook file, which allows for you to interact with code and run it in chunks. Execute the contents of a code \"cell\" by pressing `shift + return` on your keyboard, or pressing the play button on the top bar and in the Run menu. Try it below:","8d091e2e":"### Exercise 3\nWrite an expression that returns ``True`` if ``x`` is strictly greater than 3.4 and smaller or equal to 6.6, or if it is 2, and try changing ``x`` to see if it works:","2a49a4f2":"### Lists\nLists are a way of holding many values in a single variable name. You can access values and slice just like strings. In addition, you can add and remove values using $+$ and `pop` respectively.","0b8dae7d":"## Exercise 2\nGiven the string below, write code that will make a string with the word `not` removed. Remember that strings can be concatenated by using the `+` operation.","f5858d69":"## Interpreting errors\nBecause there is no function called `jorgeTheGoose`, Python sends an error message. It helpfully identifies that it came from line 4 in the cell above, and informs you that the problem is that `jorgeTheGoose` hasn't been defined.","78cc0179":"### Booleans\n\nPython has a type dedicated to the True and False values, called boolean or bool for short. The only values possible are True and False (capital T and F). You can perform logical comparisons and get boolean values back. Comparisons include `and`, `or` , `not`, `>`, `<`, `>=`, `<=`, `==` (is equal to), and `!=` (not equal to). Look at each cell below, make a guess as to what it should return, and then run the cell. Did it agree with your guess?","fab219f8":"## Comments\n\nWe will frequently want to have text in our code that we want to the interpreter to ignore. We do this using comments. Take a look at the code below, then execute it when you think you know what will happen. ","a63e2680":"![python-logo-master-v3-TM.png](attachment:python-logo-master-v3-TM.png)\n# What is Python?\nPython is a general purpose computer language that is **interpreted** and **high-level**. It was optimized for readibility and ease of writing. It isn't necessarily the fastest, but it is often \"fast enough\" for most applications. Python has a huge repository of extentions and tools which are easily found and installed, which makes it easy for non-experts to get started with  In fact, it is now one of the most widely used programming languages in the world.\n\n> **Interpreted**: The computer translates your code from human-readable to machine-readable upon execution. The alternative would be a compiled language, which is translated ahead of time. Interpreted languages tend to be quick to get started, but slower while going than compiled languages.\n>\n> **High-level**: A high-level language allows for big picture instructions, as opposed to a low-level language where instructions must be very detailed. The difference is \"make a sandwich\" versus \"get some bread, put bread on counter, etc.\"\n\n![image.png](attachment:image.png)\nPopularity of computing languages as measured by activity on StackOverflow. Blue is predicted. [Source](https:\/\/www.manosantoniou.com\/post\/predicting-the-future-popularity-of-programming-languages\/)","42524ade":"### String slicing\nMore than one character can be extracted from a string using \"slices.\" The notation for these is `list[start:end:stepsize]`.","a64846c3":"## Exercise 1\nThe operator for raising one value to the power of another is ``**``. Try calculating $4^3$, $2+3.4^2$, and $(1 + 3^6)^2$. What is the type of the output in each case, and does it make sense?","01ee5355":"### Mathematical Operations\nAn operation (``+``, ``-``, ``*``,`\/`, ``**``, etc.) on two values of the same type produces another value of the same type (with one, exception, ``\/``, see below), while an operation on two values with different types produces a value of the more 'advanced' type:","d70e998c":"### How does it compare with other langages? [source](https:\/\/astrofrog.github.io\/py4sci\/#lecture-notes)\n* It has a clean and simple syntax which emphasises readability\n* It can be much faster to write programs in than other languages\n* It gives detailed errors by default which makes it easier to fix bugs\n* It is easy to use for interactive analysis\n* It has a large ecosystem of packages available for everything from numerical analysis, databases, graphical interfaces, web scraping...\n* It is easy to interface with C\/Fortran code\n* It can interact with command-line programs, and other languages\n* Packages such as Numpy (for arrays) are written in C, which means that we get the convenience of Python and the speed of C"}}