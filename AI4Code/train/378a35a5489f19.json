{"cell_type":{"75b6a11d":"code","8ac90a57":"code","07a7dee8":"code","3b957e17":"code","ea117a33":"code","7117d65b":"code","08f09967":"code","98f347f5":"code","119543d7":"code","43c234e3":"code","a9e87292":"code","af312de8":"code","92e86e06":"code","562508b1":"code","23d43b49":"code","5effd579":"code","d9758e47":"code","eb939f9f":"code","9a8a1ccb":"code","0d0ccae4":"code","aaa34182":"code","ffee3565":"code","9229d409":"code","df7b19a9":"code","6e941086":"code","b17b0aa6":"code","4effb00a":"code","a414a363":"code","ae9661b1":"code","0ca1e327":"code","66f07bc6":"markdown","b88b816b":"markdown","f2dad09f":"markdown","2c924c96":"markdown","4f50a0a6":"markdown","91ac60b1":"markdown","d306684e":"markdown","429a9b90":"markdown","f0360765":"markdown","a7d3e8f0":"markdown","1bb99fd0":"markdown","8b011fca":"markdown","de4eb692":"markdown","21d63f6c":"markdown","a57d7ab6":"markdown","f2dbda84":"markdown","b20abe4a":"markdown"},"source":{"75b6a11d":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\n\n# plots\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\n# for json import\nimport json","8ac90a57":"# open file\nf = open('..\/input\/hourly-electricity-data-in-the-us\/EBA.txt')\n# read first line\ndata = f.readline()\n# and convert to JSON\ndata_json = json.loads(data)\n# close file\nf.close()","07a7dee8":"# show data descriptions\nfields = ['series_id', 'name', 'units', 'f', 'description',\n          'start', 'end', 'last_updated', 'geoset_id']\n\nfor f in fields:\n    print(f + ' : ' + data_json[f])","3b957e17":"# extract data block and convert to data frame\ndf = pd.DataFrame(data_json['data'], columns=['Timestamp','Demand_MWh'])\n# reverse order to get ascending timestamps\ndf = df[::-1].reset_index(drop=True)\n# preview\ndf.head()","ea117a33":"def extract_year(x):\n    return x[0:3+1]\n\ndef extract_month(x):\n    return x[4:5+1]\n\ndef extract_day(x):\n    return x[6:7+1]\n\ndef extract_hour(x):\n    return x[9:10+1]\n\ndf['Year'] = df['Timestamp'].apply(extract_year).astype(int)\ndf['Month'] = df['Timestamp'].apply(extract_month).astype(int)\ndf['Day'] = df['Timestamp'].apply(extract_day).astype(int)\ndf['Hour'] = df['Timestamp'].apply(extract_hour).astype(int)\n\n# check\ndf[0:24]","7117d65b":"# number of data points\nn_rows = df.shape[0]\nprint('Number of data points:', n_rows)","08f09967":"# remove 2015 and 2021\ndf = df[(df.Year>=2016) & (df.Year<=2020)]","98f347f5":"# number of data points\nn_rows = df.shape[0]\nprint('Number of data points (complete years only):', n_rows)","119543d7":"# basic stats\ndf.Demand_MWh.describe(percentiles=[0.01,0.1,0.25,0.5,0.75,0.9,0.99])","43c234e3":"# histogram of demand\nplt.figure(figsize=(10,4))\nplt.hist(df.Demand_MWh, bins=200)\nplt.xlim(6000,22000)\nplt.title('Hourly Demand for Duke Energy Carolinas - MWh')\nplt.grid()\nplt.show()","a9e87292":"# smoothed version\nplt.figure(figsize=(10,4))\ndf.Demand_MWh.plot(kind='kde')\nplt.title('Hourly Demand for Duke Energy Carolinas - MWh [KDE]')\nplt.xlim(6000,22000)\nplt.grid()\nplt.show()","af312de8":"# boxplot of demand\nplt.figure(figsize=(10,4))\nsns.boxplot(data=df, x='Demand_MWh')\nplt.title('Hourly Demand for Duke Energy Carolinas - MWh')\nplt.grid()\nplt.show()","92e86e06":"# boxplot of demand - split by year\nplt.figure(figsize=(10,4))\nsns.violinplot(data=df, x='Year', y='Demand_MWh')\nplt.title('Hourly Demand for Duke Energy Carolinas - MWh')\nplt.grid()\nplt.show()","562508b1":"# boxplot of demand - split by month\nplt.figure(figsize=(10,4))\nsns.violinplot(data=df, x='Month', y='Demand_MWh')\nplt.title('Hourly Demand for Duke Energy Carolinas - MWh')\nplt.grid()\nplt.show()","23d43b49":"# plot full time series \/ color each year differently\nmy_alpha = 0.1\nfig, ax = plt.subplots(figsize=(18,5))\nax.scatter(df.Timestamp, df.Demand_MWh, c=df.Year, \n           alpha=my_alpha, s=10)\nax.xaxis.set_major_locator(plt.MaxNLocator(20)) # reduce number of x-axis labels\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","5effd579":"# plot time series - subset\ndf_sub = df[(df.Year==2020) & (df.Month==12) & (df.Day==31)]\n\nmy_alpha = 1\nfig, ax = plt.subplots(figsize=(18,5))\nax.scatter(df_sub.Timestamp, df_sub.Demand_MWh, alpha=my_alpha)\nplt.xticks(rotation=90)\nplt.title('Day 2020\/12\/31')\nplt.grid()\nplt.show()","d9758e47":"# plot time series - subset\ndf_sub = df[(df.Year==2020) & (df.Month==12) & ((df.Day >= 25) & (df.Day <= 31))]\n\nmy_alpha = 1\nfig, ax = plt.subplots(figsize=(18,5))\nax.scatter(df_sub.Timestamp, df_sub.Demand_MWh, alpha=my_alpha)\nax.xaxis.set_major_locator(plt.MaxNLocator(21)) # reduce number of x-axis labels\nplt.xticks(rotation=90)\nplt.title('Week 2020\/12\/25 - 2020\/12\/31')\nplt.grid()\nplt.show()","eb939f9f":"# plot time series - subset\ndf_sub = df[df.Year==2020]\n\nmy_alpha = 0.5\nfig, ax = plt.subplots(figsize=(18,5))\nax.scatter(df_sub.Timestamp, df_sub.Demand_MWh, \n           c=df_sub.Month, cmap='Spectral',\n           alpha=my_alpha, s=10)\nax.xaxis.set_major_locator(plt.MaxNLocator(20)) # reduce number of x-axis labels\nplt.xticks(rotation=90)\nplt.title('Year 2020')\nplt.grid()\nplt.show()","9a8a1ccb":"# clean up\ndel df_sub","0d0ccae4":"# lower\/upper limit for plots\nymin = 8000\nymax = 15000","aaa34182":"# evaluation by year\ndf_by_year = df.groupby(['Year']).agg(\n     Mean = ('Demand_MWh','mean')).reset_index()\n\nfig, ax = plt.subplots(figsize=(10,5))\nax.scatter(df_by_year.Year, df_by_year.Mean)\nplt.ylim(ymin,ymax)\nplt.grid()\nplt.title('Demand Mean by Year')\nplt.show()","ffee3565":"# evaluation by month\ndf_by_month = df.groupby(['Month']).agg(\n     Mean = ('Demand_MWh','mean')).reset_index()\n\nfig, ax = plt.subplots(figsize=(10,5))\nax.scatter(df_by_month.Month, df_by_month.Mean)\nplt.ylim(ymin,ymax)\nplt.grid()\nplt.title('Demand Mean by Month')\nplt.show()","9229d409":"# evaluation by hour\ndf_by_hour = df.groupby(['Hour']).agg(\n     Mean = ('Demand_MWh','mean')).reset_index()\n\nfig, ax = plt.subplots(figsize=(10,5))\nax.scatter(df_by_hour.Hour, df_by_hour.Mean)\nplt.ylim(ymin,ymax)\nplt.grid()\nplt.title('Demand Mean by Hour')\nplt.show()","df7b19a9":"# highest values\ndf.nlargest(n=10, columns='Demand_MWh')","6e941086":"# lowest values\ndf.nsmallest(n=10, columns='Demand_MWh')","b17b0aa6":"# extract year 2019 => df1\ndf_1 = df[df.Year==2019].copy()\ndf_1 = df_1.reset_index(drop=True);\n\n# extract year 2020 => df2\ndf_2 = df[df.Year==2020].copy()\n# ... 2020 is a leap year => remove 29th of February to simplify comparison\ndf_2 = df_2[~((df_2.Month == 2) & (df_2.Day == 29))]\ndf_2 = df_2.reset_index(drop=True);\n\n# now combine values in one data frame\ndf_comp = df_1\ndf_comp['time'] = df_comp.Month.astype(str) + '\/' + df_comp.Day.astype(str) + '-' + df_comp.Hour.astype(str)\ndf_comp['val_2019'] = df_1.Demand_MWh\ndf_comp['val_2020'] = df_2.Demand_MWh\ndf_comp = df_comp.drop(['Timestamp', 'Demand_MWh', 'Year'], axis=1)\ndf_comp.head()","4effb00a":"# clean up\ndel df_1, df_2","a414a363":"# overlay of two time series\nmy_alpha = 0.25\nfig, ax = plt.subplots(figsize=(18,5))\nax.scatter(df_comp.time, df_comp.val_2019,\n           alpha=my_alpha, s=10, label='2019')\nax.scatter(df_comp.time, df_comp.val_2020,\n           alpha=my_alpha, s=10, label='2020')\nax.xaxis.set_major_locator(plt.MaxNLocator(20)) # reduce number of x-axis labels\nplt.xticks(rotation=90)\nplt.title('Compare 2019 and 2020 [leap day removed]')\nplt.legend()\nplt.grid()\nplt.show()","ae9661b1":"# scatter plot\nplt.figure(figsize=(7,7))\nplt.scatter(df_comp.val_2019, df_comp.val_2020, alpha=0.2, s=5)\nplt.title('2020 vs 2019')\nplt.grid()\nplt.show()","0ca1e327":"# interactive version\n\n# convert month to object so we can filter it by clicking on the legend\ndf_comp.Month = df_comp.Month.astype(object)\n\nfig = px.scatter(data_frame=df_comp, x='val_2019', y='val_2020', \n                 color='Month', opacity=0.25,\n                 hover_data=['time'],\n                 width=600, height=600)\nfig.update_layout(title='2020 vs 2019 - colored by month',\n                  xaxis_title='2019',  \n                  yaxis_title='2020')\nfig.show()\n\ndf_comp.Month = df_comp.Month.astype(int) # undo conversion","66f07bc6":"### One specific year (colored by month)","b88b816b":"#### Interesting shape!","f2dad09f":"### Show all complete years","2c924c96":"<a id='1'><\/a>\n# Import and data preparation","4f50a0a6":"### One specific week","91ac60b1":"<a id='2b'><\/a>\n## Time Series","d306684e":"<a id='2'><\/a>\n# EDA","429a9b90":"### Use only complete years:","f0360765":"### One specific day","a7d3e8f0":"<a id='2c'><\/a>\n## Group By Year\/Month\/Hour","1bb99fd0":"#### We see a change of the distribution shape over the months. Summer looks different than winter.","8b011fca":"<a id='4'><\/a>\n# Compare two years","de4eb692":"<a id='3'><\/a>\n# Highest and lowest historical demands","21d63f6c":"#### Double-click on the legend to select individual month!","a57d7ab6":"<a id='2a'><\/a>\n## Demand distribution","f2dbda84":"# Starter notebook for US electricity data\n\n## Table of Contents\n1. [Import and data preparation](#1)\n1. [EDA](#2)\n * [Demand distribution](#2a)\n * [Time Series](#2b)\n * [Group By Year\/Month\/Hour](#2c)\n1. [Highest and lowest historical demands](#3)\n1. [Compare two years](#4)","b20abe4a":"### Parse timestamp"}}