{"cell_type":{"f5966218":"code","c72b9071":"code","678f3180":"code","7735797f":"code","be71bf84":"code","b0e158d3":"code","5e2a0df8":"code","15a60e93":"code","68c845cd":"code","b6319a97":"code","d83aea5e":"code","76a4057b":"code","8394e490":"code","ba5fc82d":"markdown"},"source":{"f5966218":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c72b9071":"!pip uninstall -y kaggle\n!pip install --upgrade pip\n!pip install kaggle==1.5.6\n!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\n!ls -lha kaggle.json\n!chmod 600 ~\/.kaggle\/kaggle.json\n!kaggle competitions download -c cold\n!unzip cold.zip","678f3180":"import numpy as np\nimport torch\nimport torch.optim as optim\nimport pandas as pd\nimport torch.nn.functional as F\nfrom sklearn.preprocessing import MinMaxScaler  # \ub370\uc774\ud130 \uc815\uaddc\ud654\nfrom sklearn import preprocessing\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\nfrom torch.utils.data import  TensorDataset, DataLoader\nimport matplotlib.pyplot as plt","7735797f":"device = torch.device('cuda') # \ub514\ubc14\uc774\uc2a4 GPU \uc124\uc815\ntorch.manual_seed(777)\nrandom.seed(777)\ntorch.cuda.manual_seed_all(777)\n\nlearning_rate = 0.001\ntraining_epochs = 1000\nbatch_size = 200\ndrop_prob = 0.3","be71bf84":"xy_train = pd.read_csv('train.csv', header = None, skiprows=1)\nxy_train[0] = xy_train[0] % 10000 \/ 100\nx_data = xy_train.loc[:, 0:4]\ny_data = xy_train.loc[:, [5]]\nx_data = np.array(x_data)\ny_data = np.array(y_data)\n\nscaler = preprocessing.StandardScaler()\nx_data = scaler.fit_transform(x_data)\n\nx_train = torch.FloatTensor(x_data).to(device)\ny_train = torch.FloatTensor(y_data).to(device) ","b0e158d3":"train_dataset = TensorDataset(x_train, y_train)\ndata_loader = torch.utils.data.DataLoader(dataset = train_dataset,\n                                           batch_size = batch_size, \n                                           shuffle = True, \n                                           drop_last = True)","5e2a0df8":"linear1 = torch.nn.Linear(5, 8,bias=True)\nlinear2 = torch.nn.Linear(8, 16,bias=True)\nlinear3 = torch.nn.Linear(16, 16,bias=True)\nlinear4 = torch.nn.Linear(16, 16,bias=True)\nlinear5 = torch.nn.Linear(16, 8,bias=True)\nlinear6 = torch.nn.Linear(8, 8,bias=True)\nlinear7 = torch.nn.Linear(8, 1,bias=True)\nrelu = torch.nn.ReLU()\ndropout = torch.nn.Dropout(p = 0.3)\n\ntorch.nn.init.xavier_normal_(linear1.weight)\ntorch.nn.init.xavier_normal_(linear2.weight)\ntorch.nn.init.xavier_normal_(linear3.weight)\ntorch.nn.init.xavier_normal_(linear4.weight)\ntorch.nn.init.xavier_normal_(linear5.weight)\ntorch.nn.init.xavier_normal_(linear6.weight)\ntorch.nn.init.xavier_normal_(linear7.weight)\n\nmodel = torch.nn.Sequential(linear1, relu, dropout,\n                            linear2, relu, dropout,\n                            linear3, relu, dropout,\n                            linear4, relu, dropout,\n                            linear5, relu, dropout,\n                            linear6, relu, dropout,\n                            linear7).to(device)","15a60e93":"loss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr = learning_rate)\n\nlosses = []\nmodel_history = []\nerr_history = []\n\ntotal_batch = len(data_loader)\nmodel.train()\n\nfor epoch in range(training_epochs + 1):\n  avg_cost = 0\n\n  for X, Y in data_loader:\n    X = X.to(device)\n    Y = Y.to(device)\n\n    optimizer.zero_grad()\n    hypothesis = model(X)\n    cost = loss(hypothesis, Y)\n    cost.backward()\n    optimizer.step()\n\n    avg_cost += cost \/ total_batch\n\n  model_history.append(model)\n  err_history.append(avg_cost)\n  \n  if epoch % 10 == 0:  \n    print('Epoch:', '%d' % (epoch + 1), 'Cost =', '{:.9f}'.format(avg_cost))\n  losses.append(cost.item())\nprint('Learning finished')","68c845cd":"plt.plot(losses)\nplt.plot(err_history)\nplt.show()","b6319a97":"best_model = model_history[np.argmin(err_history)]","d83aea5e":"xy_test = pd.read_csv('test.csv', header = None, skiprows=1)\nxy_test[0] = xy_test[0] % 10000 \/ 100\nx_data = xy_test.loc[:, :]\nx_data = np.array(x_data)\nx_data = scaler.transform(x_data)\nx_test = torch.FloatTensor(x_data).to(device)\n\nwith torch.no_grad():\n    model.eval()  # \uc8fc\uc758\uc0ac\ud56d (dropout=False)\n    \n    predict = best_model(x_test)","76a4057b":"submit = pd.read_csv('sample.csv')\nsubmit['Expected'] = submit['Expected'].astype(float)\nfor i in range(len(predict)):\n  submit['Expected'][i] = predict[i]\nsubmit.to_csv('submit.csv', mode = 'w', index = False, header = True)","8394e490":"!kaggle competitions submit -c cold -f submit.csv -m \"18011876 \uc774\ubcd1\ucc2c\"","ba5fc82d":"# \uae30\uc874\uacfc\uc758 \ucc28\uc774\uc810\n1. \ubaa8\ub378 \uc124\uc815 (\ub808\uc774\uc5b4 \uac1c\uc218 \ubc0f input output \ubcc0\uacbd)\n\ub808\uc774\uc5b4 \uac1c\uc218 5 -> 7\n5 -> 8 -> 16 -> 8 -> 1"}}