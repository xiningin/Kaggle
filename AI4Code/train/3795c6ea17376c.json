{"cell_type":{"ce0fa790":"code","f48a1150":"code","da0a6ded":"code","8a8eee52":"code","532fc7c4":"code","9e8b60db":"code","d9595041":"code","40fe803c":"code","9d0fea07":"code","80c29a11":"code","3a137b51":"code","ab202c8b":"code","429d2c77":"code","229a4226":"code","53915ba8":"code","23d7025b":"code","4960fb63":"code","8a673165":"code","d9fa1e07":"code","b3cc5727":"code","93a5a773":"code","c6188e2d":"code","8b05c598":"code","3a189afd":"code","5bcca33e":"code","0b254c34":"code","7538fcc2":"code","ec1eece8":"code","b5577dc1":"code","ec6dd836":"code","3977a5d9":"code","0e8cdd10":"code","db8285e0":"code","3ea6a8e7":"code","0d75e604":"code","ef40604b":"code","2c845a79":"code","e97715db":"markdown","9198f489":"markdown"},"source":{"ce0fa790":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f48a1150":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline","da0a6ded":"df = pd.read_csv(\"\/kaggle\/input\/sf-salaries\/Salaries.csv\",decimal='.')","8a8eee52":"df.head()","532fc7c4":"df.shape     #checking shape of data\ndf.columns","9e8b60db":"df.dtypes  #checking data types\ndf.info()","d9595041":"df.isna().mean()   #checking % of na in each column\n\ndf.isna().sum()","40fe803c":"df","9d0fea07":"df = df[df['EmployeeName'] != 'Not provided']  #removing all \"not provided\"\ndf = df[df['JobTitle'] != 'Not provided']\ndf = df[df['BasePay'] != 'Not Provided']  #removing all \"not provided\"\ndf = df[df['OvertimePay'] != 'Not Provided']\ndf = df[df['OtherPay'] != 'Not Provided']  #removing all \"not provided\"\ndf = df[df['Benefits'] != 'Not Provided']\ndf.reset_index(inplace = True, drop = True)\ndf","80c29a11":"df[df.duplicated()]  #checking duplicates","3a137b51":"df.info()","ab202c8b":"col_list = [\"OvertimePay\",\"OtherPay\",\"Benefits\",\"BasePay\"]   #retutn columns to numeric \n\nfor i in col_list:\n    df[i] = pd.to_numeric(df[i], errors = \"coerce\")\n\n    \ndf[[\"Id\",\"Year\"]] = df[[\"Id\",\"Year\"]].astype(\"category\") #return data into a correct data type","429d2c77":"df.describe()     #checking numerical data","229a4226":"# Filling the Null values in \"Benefits\" column.\n# The \"Benefits\" column can be calculated by Subtracting \"Total Pay\" column from \"Total Pay Benefits\" column.\ndf.loc[df['Benefits'].isna(), 'Benefits'] = df.loc[df['Benefits'].isna(), \n                                    'Benefits'].fillna(df['TotalPayBenefits'] - df['TotalPay'])\n\n# Filling the Null values in \"BasePay\" column.\n# The \"BasePay\" column can be calculated by Subtracting \"OvertimePay\" column and \"OtherPay\" column from \"Total Pay\" column.\n\ndf.loc[df['BasePay'].isna(), 'BasePay'] = df.loc[df['BasePay'].isna(), \n             'BasePay'].fillna(round(df['TotalPay'] - df['OtherPay'] - df['OvertimePay'],0).abs())\n","53915ba8":"mask_list = [\"OvertimePay\",\"OtherPay\",\n             \"Benefits\",\"BasePay\", \"TotalPay\", \"TotalPayBenefits\"]  #removing all negative values\n\nfor i in mask_list:\n    mask = df[i]<=100\n    df=df.drop(df.index[mask])\n\n","23d7025b":"df = df.drop(columns = ['Notes', 'Status']) #removing 2 unnecessary columns","4960fb63":"df.describe()","8a673165":"df.nunique()    # number of unique values in each column","d9fa1e07":"df.head()","b3cc5727":"df[\"JobTitle\"].value_counts()","93a5a773":"df[\"JobTitle\"] = df.JobTitle.str.upper()  #all JobTitle \"large\"","c6188e2d":"#checking titles which contains nurse\ndf.loc[df['JobTitle'].str.lower().str.contains('nurse'), 'JobTitle'].value_counts() \n","8b05c598":"df.loc[df['JobTitle'].str.lower().str.contains('aide'), 'JobTitle'].value_counts()","3a189afd":"#groups of jobs\ndf.loc[df.JobTitle.str.contains(\"POLICE|SHERIFF|SERGEANT\"), \"JobCategories\"] = 'POLICE'\ndf.loc[df.JobTitle.str.contains(\"NURSE|PATIENT\"), \"JobCategories\"] = 'NURSE'\ndf.loc[df.JobTitle.str.contains(\"CLERK\"), 'JobCategories'] = \"CLERK\"\ndf.loc[df.JobTitle.str.contains(\"HEALTH WORKER\"), 'JobCategories'] = \"HEALTH WORKER\"\ndf.loc[df.JobTitle.str.contains(\"FIRE\"), 'JobCategories'] = \"FIREFIGHTER\"\ndf.loc[df.JobTitle.str.contains(\"SCHOOL|LIBRA\"), 'JobCategories'] = \"SCHOOL EMPLOYEES\"\ndf.loc[df.JobTitle.str.contains(\"ACCOUNTANT\"), 'JobCategories'] = \"ACCOUNTANT\"\ndf.loc[df.JobTitle.str.contains(\"TRANSIT\"), 'JobCategories'] = \"TRANSIT OPERATOR\"\ndf.loc[df.JobTitle.str.contains(\"ENGINEER\"), 'JobCategories'] = \"ENGINEER\"\ndf.loc[df.JobTitle.str.contains(\"CUSTODIAN\"), 'JobCategories'] = \"CUSTODIAN\"\ndf.loc[df.JobTitle.str.contains(\"RECREATION LEADER\"), 'JobCategories'] = \"RECREATION LEADER\"\ndf.loc[df.JobTitle.str.contains(\"GUARD\"), 'JobCategories'] = \"GUARD\"\ndf.loc[df.JobTitle.str.contains(\"ADMINISTRATIVE ANALYST\"), 'JobCategories'] = \"ADMINISTRATIVE ANALYST\"\ndf.loc[df.JobTitle.str.contains(\"AIDE\"), 'JobCategories'] = \"AIDE\"\ndf.loc[df.JobCategories.isnull(), \"JobCategories\"] = df.JobTitle  #all empty rows fill with the data from JobTitle","5bcca33e":"df.head(20)\ndf[\"JobCategories\"].isna().sum()","0b254c34":"df[\"JobCategories\"].value_counts().head(10)","7538fcc2":"df.isna().sum()","ec1eece8":"sns.pairplot(data=df);  #checking correlation","b5577dc1":"df.head(15)","ec6dd836":"#the most popular jobs\ntop_jobs = df[\"JobCategories\"].value_counts().reset_index()\ntop_jobs.columns = [\"JobCategories\", \"count\"]\ntop_jobs","3977a5d9":"#Visualization \"jobs\"\nplt.style.use(\"grayscale\")\n\nfig_jobs, ax_jobs = plt.subplots(figsize = (10,6))\n\ntop_jobs[:10].plot(kind = 'barh', ax = ax_jobs)\n\nylabels = top_jobs[\"JobCategories\"][:10]              #ylabel\nax_jobs.set_yticklabels(ylabels, fontsize = 13);\n\nax_jobs.set_xlabel(\"count\", fontstyle = \"italic\") #xlabel\n\nax_jobs.set_title(\"The most common jobs in San Francisco between 2012 and 2014\",          #title style\n          fontweight=\"bold\", color = 'black', fontsize=14, fontname=\"sans\", loc = \"left\")\n\nax_jobs.grid(axis =\"x\", drawstyle=\"steps\", fillstyle = \"left\",   #grid style\n          linestyle = \"--\")","0e8cdd10":"df[\"BasePay\"]=pd.to_numeric(df[\"BasePay\"], errors = \"coerce\")","db8285e0":"df_2 = pd.pivot_table(index = df[\"Year\"], \n        columns = df.loc[:,\"JobCategories\"], \n                      values=\"BasePay\", fill_value = 0, \n                      data =df,\n                     dropna = True)  #pivot table of jobs and BasePay\ndf_2","3ea6a8e7":"value_counts_total= df['Year'].value_counts().reset_index()\nvalue_counts_total.columns = ['Year', 'Number of people doing job']\nvalue_counts_total=value_counts_total.sort_values(by=\"Year\")\n","0d75e604":"value_counts_total_per= df['Year'].value_counts(normalize=True).reset_index()\nvalue_counts_total_per.columns = ['Year', 'Percentage of people']\nvalue_counts_total_per","ef40604b":"fig_per_total, ax_per_total=plt.subplots(figsize=(10,6))\n\nmypalette=[\"#bfcbdb\", \"#800000\", \"#146356\",\"#a4a2a8\"]\nvalue_counts_total_per.plot(kind=\"pie\", y=\"Percentage of people\", ax=ax_per_total,\n                           pctdistance= 0.7, shadow = True, labels=value_counts_total_per[\"Year\"],  labeldistance=1.1,\n               fontsize = 15, colors=mypalette,\n               wedgeprops = {'linewidth':0.8, 'edgecolor':'black'},\n               autopct='%1.1f%%', startangle = 60, ylabel=\"\")\n\n#circle\ncentre_circle = plt.Circle((0,0),0.50,fc='white')\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n#title\nax_per_total.set_title(\"Percentage of people doing theirs job in SF between 2012 and 2014\",          #title style\n          fontstyle='italic', \n          fontweight=\"bold\", color = 'black', fontsize=18, fontname=\"sans\");","2c845a79":"fig_jobs_total, ax_jobs_total = plt.subplots(figsize = (10,6))\n\nvalue_counts_total.plot(kind = 'bar', ax = ax_jobs_total, color=\"#800000\", legend = False)\n\nxlabel=value_counts_total[\"Year\"]\nax_jobs_total.set_xticklabels(xlabel)\nax_jobs_total.set_ylabel(\"count\", fontstyle = \"italic\") #ylabel\n\nax_jobs_total.set_title(\"The count of people, doing jobs in San Francisco between 2012 and 2014\",          #title style\n          fontweight=\"bold\", color = 'black', fontsize=14, fontname=\"sans\", loc = \"left\")\n\nax_jobs_total.grid(axis =\"x\", drawstyle=\"steps\", fillstyle = \"left\",   #grid style\n          linestyle = \"--\")","e97715db":"# Cleaning data","9198f489":"# Visualization "}}