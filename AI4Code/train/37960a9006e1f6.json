{"cell_type":{"0c47948f":"code","298beeac":"code","ffa54e4b":"code","6ce227f3":"code","176ac3ac":"code","7e30b631":"code","b22cd3cf":"code","32adbfba":"code","3da2bc2e":"code","880212bd":"code","9a587bc7":"code","f29c7089":"code","2f8c2393":"code","8d490761":"code","d9e3a0ef":"code","0df00bf8":"code","eab82ac3":"code","08fcf733":"code","1e978ae2":"code","a3a0d0ab":"code","34f4ef6f":"code","f057f850":"code","2495ca16":"code","cb1468eb":"markdown","83be4d88":"markdown","7ba6d777":"markdown","bf9e3d4b":"markdown","5b7f7309":"markdown","5627ffa8":"markdown","3ef9972e":"markdown"},"source":{"0c47948f":"!pip install googlemaps","298beeac":"import pandas as pd\npd.set_option('max_columns', 100)\nimport numpy as np\nfrom collections import Counter\nimport re\nimport datetime as dt\nimport googlemaps\nfrom kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"gmaps\")\nimport os\nimport glob\nimport tqdm\nimport random\nimport warnings\nwarnings.filterwarnings('ignore')\nimport pickle\nimport base64\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nimport seaborn as sns\nimport plotly_express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom IPython.display import HTML","ffa54e4b":"display(HTML('<iframe width=\"700\" height=\"500\" src=\"https:\/\/www.youtube.com\/embed\/3t6hM5tRlfA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>'))","6ce227f3":"games = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/games.csv')\nplayers = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/players.csv')\nplays = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/plays.csv')","176ac3ac":"def add_image_plotly(fig,filename,**kwargs):\n    \"\"\"Adds background image to plotly figure.\"\"\"\n    img = base64.b64encode(open(filename, 'rb').read())\n    fig.update_layout(images=[\n        dict(\n            source  = 'data:image\/png;base64,{}'.format(img.decode()),\n            xref    = kwargs.get('xref','paper'), \n            yref    = kwargs.get('yref','paper'),\n            x       = kwargs.get('x',0),\n            y       = kwargs.get('y',1),\n            sizex   = kwargs.get('sizex',0.5),\n            sizey   = kwargs.get('sizey',0.5),\n            xanchor = kwargs.get('xanxhor','left'),\n            yanchor = kwargs.get('yanchor','top'),\n            opacity = kwargs.get('opacity',0.5),\n            sizing  = kwargs.get('sizing',None),\n            layer   = kwargs.get('layer','below')\n        )\n    ])","7e30b631":"games['gameDateT'] = pd.to_datetime(games.gameDate, format='%m\/%d\/%Y')\ngames['hours'] = games.gameTimeEastern.apply(lambda x: \\\n                                          np.round(sum([int(num)\/(60**i) \\\n                                          for i,num in enumerate(x.split(':'))]),2))\ngames['game'] = games.apply(lambda x: f\"{x.homeTeamAbbr} vs {x.visitorTeamAbbr}\",axis=1)","b22cd3cf":"fig = px.scatter(data_frame=games, x='gameDateT', y='hours', color='week', hover_name='game', custom_data=['gameTimeEastern'])\nadd_image_plotly(fig,'\/kaggle\/input\/nfl2021images\/NFL.png',x=0.4,y=0.8,sizex=1,sizey=0.6)\nfig.update_traces(hovertemplate = '<b>%{hovertext}<\/b><br><br>'+\n                  '<b>Game Date<\/b>: %{x}<br><b>Time<\/b>: %{customdata[0]}<br>'+\n                  '<b>Week<\/b>: %{marker.color}<extra><\/extra>')\nfig.update_layout(\n    template=\"plotly_dark\",title = 'NFL Schedule, 2018 Season', title_font_family='Rockwell',\n    width=700,height=300,\n    xaxis=dict(title='Game Date'),\n    yaxis=dict(title='Hour of the Day'))\nfig.show()","32adbfba":"d_def = {\n    'CB': 'Cornerbacks',\n    'SS': 'Safeties',  #'Strong Safeties',\n    'FS': 'Safeties',  #'Free Safeties',\n    'MLB': 'Linebackers',  #'Middle Linebackers',\n    'ILB': 'Linebackers', #'Inside Linebackers',\n    'OLB': 'Linebackers', #'Outside Linebackers',\n    'DE': 'Defensive ends',\n    'LB': 'Linebackers',\n    'DB': 'Defensive Backs',\n    'S': 'Safeties',\n    'NT': 'Nose Tackles',\n    'DT': 'Defensive Tackles'\n}\n\nd_ofs = {\n    'WR': 'Wide Recievers',\n    'QB': 'Quarterbacks',\n    'TE': 'Tight Ends',\n    'RB': 'Running Backs',\n    'FB': 'Fullbacks',\n    'HB': 'Halfbacks',\n    \n}\n\nd_spe = {\n    'P': 'Punters',\n    'K': 'Kickers',\n    'LS': 'Long Snappers'\n}\ndef generate_colors(n):\n    colors = []\n    random.seed(42)\n    for i in range(n):\n        rgb_color=f\"rgb({random.randint(0,255)},{random.randint(0,255)},{random.randint(0,255)})\"\n        colors.append(rgb_color)\n    return colors","3da2bc2e":"players.birthDate = pd.to_datetime(players.birthDate)\nplayers['Age'] = dt.datetime.now() - players.birthDate\nplayers.Age = np.round(players.Age.dt.days\/365.25, 2)\nplayers.height = players.height.apply(lambda x: int(x) if '-' not in x \\\n                     else round(int(x.split('-')[0])*12+int(x.split('-')[1])))\nplayers['height_jitter'] = players.height.apply(lambda x: x + random.randrange(-50,51)\/100)\nplayers['weight_jitter'] = players.weight.apply(lambda x: x + random.randrange(-50,51)\/100)\nplayers['pos_desc'] = players.position.apply(lambda x: d_def.get(x,d_ofs.get(x,d_spe.get(x,None))))\nplayers['type'] = players.position.apply(lambda x: 'Offensive' if x in d_ofs.keys() \\\n                                         else 'Defensive' if x in d_def.keys() \\\n                                         else 'Special')","880212bd":"fig = px.box(data_frame=players, x='Age', color='type',template='plotly_dark',width=700, height=300)\n                 # barmode='overlay',nbins=20)\nfig.for_each_trace(lambda trace: trace.update(hovertemplate=trace.hovertemplate.replace('=',': ')))\nfig.update_layout(title = 'NFL Player Age, 2018 Season', title_font_family='Rockwell',\n                  legend=dict(title='Type', x=0.18,y=1.1,orientation='h'), xaxis_title='Age')\nfig.show()","9a587bc7":"if os.path.exists('\/kaggle\/input\/nflcolleges\/college.pickle'):\n    with open('\/kaggle\/input\/nflcolleges\/college.pickle', 'rb') as handle:\n        d = pickle.load(handle)\nelse:\n    gmaps = googlemaps.Client(key=secret_value_0)\n    d = {}\n    colleges = players.collegeName.unique().tolist()\n    for college in colleges:\n        data = gmaps.geocode(college)\n        d[college] = data[0]['geometry']['location']\n    with open('college.pickle', 'wb') as handle:\n        pickle.dump(d, handle, protocol=pickle.HIGHEST_PROTOCOL)\n    \ndef get_coords(college):\n    lat = d[college]['lat']\n    lng = d[college]['lng']\n    return (lat,lng)\n\nplayers['Latitude'] = players.apply(lambda x: get_coords(x['collegeName'])[0],axis=1)\nplayers['Longitude'] = players.apply(lambda x: get_coords(x['collegeName'])[1],axis=1)\nplayers['num_of_players'] = players.collegeName.map(Counter(players.collegeName))","f29c7089":"fig = go.Figure()\nfig.add_trace(go.Scattergeo(\n    lat=players['Latitude'],\n    lon=players['Longitude'],\n    marker_size=players['num_of_players'],\n    text = players['collegeName'].astype(str) +\\\n           ' (' +players['num_of_players'].astype(str) +')',\n    hoverinfo='text'\n))\nfig.update_layout(\n        title = 'Players and their respective Colleges',\n        template='plotly_dark',\n        title_font_family='Rockwell',\n        margin=dict(l=0,r=0,t=50,b=0),\n        geo_scope='usa',\n        width=700,\n        height=300\n    )\nfig.show()","2f8c2393":"fig = px.scatter(\n    data_frame=players,\n    x='height_jitter',\n    y='weight_jitter',\n    width=700, height=400,\n    color='pos_desc',\n    facet_col='type',\n    trendline=\"ols\",\n    opacity=0.3, \n    custom_data=['displayName','Age','type','collegeName','position']\n)\n\nfig.update_traces(line_width=5)\nhovertemplate='<b>%{customdata[0]}<\/b><br><br>'+\\\n              '<b>Position<\/b>: %{customdata[4]}<br>'+\\\n              '<b>Age<\/b>: %{customdata[1]} years<br>'+\\\n              '<b>Height<\/b>: %{x} inches<br><b>Weight<\/b>: %{y} lbs<br>'+\\\n              '<b>College<\/b>: %{customdata[3]}'\nfig.for_each_trace(lambda trace: trace.update(hovertemplate=None)\\\n                   if 'OLS trendline' in trace.hovertemplate \\\n                   else trace.update(hovertemplate=hovertemplate))\n\nfor col in range(1,4):\n    label = 'Height (inches)' if col == 2 else None \n    fig.update_xaxes(title_text=label,row=1, col=col), \nfig.update_yaxes(title_text='Weight (lbs)', row=1, col=1)\n\nadd_image_plotly(fig,'\/kaggle\/input\/nfl2021images\/Daco_6014349.png',x=-0.2,y=1,sizex=1,sizey=1)\n\nfig.for_each_annotation(lambda annot : annot.update(text=annot.text[5:]))\n\nfig.update_layout(\n    title = 'NFL Player Size, 2018 Season',\n    title_font_family='Rockwell',\n    template='plotly_dark', \n    legend_title='Position',\n    legend_font_size=8,\n    legend_font_family='Rockwell'\n)\nfig.show()","8d490761":"player_game_stats = pd.DataFrame()\nfiles = glob.glob('\/kaggle\/input\/nfl-big-data-bowl-2021\/week*.csv')\nfor file in tqdm.tqdm(files):\n    week_data = pd.read_csv(file)\n    week_data = week_data[week_data['displayName']!='Football']\n    week_data['jerseyNumber'] = week_data['jerseyNumber'].astype(np.int8)\n    week_data['nflId'] = week_data['nflId'].astype(np.int64)\n    player_game_stats = player_game_stats.append(week_data.groupby(['gameId','nflId'],\n                        as_index=False).agg({'s':'mean','a':'mean','dis':'sum'}))","d9e3a0ef":"player_stats = player_game_stats.groupby('nflId',as_index=False)\\\n               .agg(avg_speed = ('s',np.mean),avg_acc = ('a',np.mean),\n                    avg_distance = ('dis',np.mean),total_distance = ('dis',np.sum))\n\nplayer_stats = pd.merge(players, player_stats, on='nflId')","0df00bf8":"columns = ['displayName','position','pos_desc','collegeName','height','weight',\n           'avg_speed','avg_acc','avg_distance','total_distance']\ndisplay_cols = ['displayName','position','collegeName','height_feet','weight','avg_speed','avg_acc','total_distance']\nplayer_stats_req = player_stats[columns]\nfor col in columns[-4:]:\n    player_stats_req[col] = np.round(player_stats_req[col],2)\nplayer_stats_req['height_feet'] = player_stats_req['height'].apply(lambda x: f\"{int(x\/12)}' {x%12}\\\"\")\nplayer_stats_req.sort_values('total_distance', ascending=False, inplace=True)","eab82ac3":"MARKER_SIZE = 7\nLINE_WIDTH = 0.5\nfig = make_subplots(rows=3,cols=2,specs=[[{'type':'table','colspan':2},None],[{},{}],[{},{}]])\nfig.add_trace(go.Table(\n        columnorder=[1,2,3,4,5,6,7,8],\n        columnwidth=[100,60,120,50,50,100,120,100],\n        header=dict(\n            values=[\"<b>Name<\/b>\", \"<b>Position<\/b>\", \"<b>College<\/b>\",\n                    \"<b>Height<\/b><br>in feet\",'<b>Weight<\/b><br>in lbs',\n                    \"<b>Avg. Speed<\/b><br>in yards\/s\",\n                    \"<b>Avg. Acceleration<\/b><br>in yards\/s<sup>2<\/sup>\",\n                    \"<b>Total Distance<\/b><br>covered in yards\"],\n            line_color='black',\n            fill_color='black',\n            font=dict(color='white', size=8),\n            align=['center']\n        ),\n        cells=dict(\n            values=[player_stats_req[k].tolist() for k in display_cols],\n            align = \"center\",\n            line_color='black',\n            fill=dict(color=['paleturquoise', 'black']),\n            font=dict(size=8,color=['black','white']))\n    ),1,1)\npositions = player_stats_req.pos_desc.unique().tolist()\ncolors = generate_colors(len(positions))\nfor i,position in enumerate(positions):\n    df_plot = player_stats_req[player_stats_req['pos_desc']==position]\n    fig.add_trace(go.Scatter(name=position,legendgroup=position,showlegend=True,\n                         x=df_plot.weight,y=df_plot.avg_speed,mode='markers',opacity=0.7,\n                             marker_color = colors[i],\n                         #marker_size=MARKER_SIZE,marker_line_width=LINE_WIDTH,\n                         text=player_stats_req['displayName'],\n                         textposition='bottom center'),2,1)\n    fig.add_trace(go.Scatter(name=position,legendgroup=position,showlegend=False,\n                         x=df_plot.weight,y=df_plot.avg_acc,mode='markers',opacity=0.7,\n                             marker_color = colors[i],\n                         #marker_size=MARKER_SIZE,marker_line_width=LINE_WIDTH,\n                         text=player_stats_req['displayName'],\n                         textposition='bottom center'),2,2)\n    fig.add_trace(go.Scatter(name=position,legendgroup=position,showlegend=False,\n                         x=df_plot.avg_speed,y=df_plot.avg_acc,mode='markers',opacity=0.7,\n                             marker_color = colors[i],\n                         #marker_size=MARKER_SIZE,marker_line_width=LINE_WIDTH,\n                         text=player_stats_req['displayName'],\n                         textposition='bottom center'),3,1)\n    fig.add_trace(go.Scatter(name=position,legendgroup=position,showlegend=False,\n                         x=df_plot.height,y=df_plot.total_distance,mode='markers',opacity=0.7,\n                             marker_color = colors[i],\n                         #marker_size=MARKER_SIZE,marker_line_width=LINE_WIDTH,\n                         text=player_stats_req['displayName'],\n                         textposition='bottom center'),3,2)\n\nfig.update_xaxes(title_text='Weight (lbs)',title_font_size=8,row=2,col=1)\nfig.update_xaxes(title_text='Weight (lbs)',title_font_size=8,row=2,col=2)\nfig.update_xaxes(title_text='Speed (yards\/s)',title_font_size=8,row=3,col=1)\nfig.update_xaxes(title_text='Height (inches)',title_font_size=8,row=3,col=2)\n\nfig.update_yaxes(title_text='Speed (yards\/s)',title_font_size=8,row=2,col=1)\nfig.update_yaxes(title_text='Acceleration (yards\/s<sup>2<\/sup>)',title_font_size=8,side='right',row=2,col=2)\nfig.update_yaxes(title_text='Acceleration (yards\/s<sup>2<\/sup>)',title_font_size=8,row=3,col=1)\nfig.update_yaxes(title_text='Total Distance (yards)',side='right',title_font_size=8,row=3,col=2)\n\nfig.update_layout(template='plotly_dark',width=700,height=800,\n                  title='Player Statistics, 2018 Season',\n                  title_font_family='Rockwell',margin=dict(l=20,r=20,t=50),\n                  legend=dict(orientation='h',y=-0.1,font_size=8)\n                 )\nfig.show()                   ","08fcf733":"game_player_details = pd.merge(player_game_stats,games,on='gameId')\ngame_player_details = pd.merge(game_player_details,players,on='nflId')\ngame_player_details.sort_values(['gameDateT','hours'],inplace=True)\ngame_player_details.reset_index(drop=True, inplace=True)\ngame_player_details['game'] = game_player_details.groupby('gameId').ngroup() + 1\n\ngameplay_stats = game_player_details.groupby(['gameId','game','gameDateT','gameTimeEastern','pos_desc','type'],as_index=False)\\\n                   .agg(average_speed = ('s','mean'),\n                        average_acc = ('a','mean'),\n                        total_distance = ('dis','sum'))","1e978ae2":"fig = px.bar(data_frame=gameplay_stats, x='game', y='total_distance', color='pos_desc',facet_row='type')\nfig.update_traces(hovertemplate='%{y} yards')\nfig.layout.xaxis.update(title_text='Game Number')\nfig.layout.yaxis.update(matches=None,title_text='')\nfig.layout.yaxis2.update(matches=None,title_text='Total Distance covered in yards')\nfig.layout.yaxis3.update(matches=None,title_text='')\nfig.for_each_annotation(lambda annot : annot.update(text=annot.text[5:]))\nfig.update_layout(title = 'Total Distance covered per Game, 2018 Season', title_font_family='Rockwell',\n                  template='plotly_dark', hovermode='x', barmode='stack',width=700,height=400,\n                  margin=dict(l=10,r=10,t=50,b=10),\n                  legend_title='Position', legend_font_size=7, legend_font_family='Rockwell')\nfig.show()","a3a0d0ab":"fig = px.scatter(data_frame=gameplay_stats, x='game', y='average_speed',\n                 opacity=0.7,color='pos_desc',facet_row='type')\nfig.update_traces(hovertemplate='%{y:.2f} yards\/s')\nfig.layout.xaxis.update(title_text='Game Number')\nfig.layout.yaxis.update(matches=None,title_text='')\nfig.layout.yaxis2.update(matches=None,title_text='Average Speed in yards\/s')\nfig.layout.yaxis3.update(matches=None,title_text='')\nfig.for_each_annotation(lambda annot : annot.update(text=annot.text[5:]))\nfig.update_layout(title = 'Average Speed per Game, 2018 Season', title_font_family='Rockwell',\n                  template='plotly_dark', hovermode='x',width=700,height=400,\n                  margin=dict(l=10,r=10,t=50,b=10),\n                  legend_title='Position', legend_font_size=7, legend_font_family='Rockwell')\nfig.show()","34f4ef6f":"fig = px.scatter(data_frame=gameplay_stats, x='game', y='average_acc',\n                 opacity=0.7,color='pos_desc',facet_row='type')\nfig.update_traces(hovertemplate='%{y:.2f} yards\/s<sup>2<\/sup>')\nfig.layout.xaxis.update(title_text='Game Number')\nfig.layout.yaxis.update(matches=None,title_text='')\nfig.layout.yaxis2.update(matches=None,title_text='Average Acceleration in yards\/s<sup>2<\/sup>')\nfig.layout.yaxis3.update(matches=None,title_text='')\nfig.for_each_annotation(lambda annot : annot.update(text=annot.text[5:]))\nfig.update_layout(title = 'Average Acceleration per Game, 2018 Season', title_font_family='Rockwell',\n                  template='plotly_dark', hovermode='x',width=700,height=400,\n                  margin=dict(l=10,r=10,t=50,b=10),\n                  legend_title='Position', legend_font_size=7, legend_font_family='Rockwell')\nfig.show()","f057f850":"#Buffer to keep a week's data handy(Saves some time!)\nbuffer = pd.DataFrame()\nif len(buffer) == 0:\n    buffer = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/week1.csv')\n    buffer.name = 'week1'\n\ndef add_newline(s):\n    words = s.split()\n    l = 0\n    for i,word in enumerate(words):\n        l += len(word) + 1\n        if l < 80:\n            continue\n        else:\n            words.insert(i, '<br>')\n            l = 0\n    return ' '.join(words)\n\ndef plot_gameplay(gameId, playId):\n    \"\"\"Presents the gameplay using game and play Id.\"\"\"\n    \n    global buffer\n    path = '\/kaggle\/input\/nfl-big-data-bowl-2021\/'\n    \n    #Get the title of the plot\n    week,home,visitor,date,time = games.loc[games['gameId']==gameId,['week','homeTeamAbbr',\n                                              'visitorTeamAbbr','gameDateT',\n                                              'gameTimeEastern']].iloc[0]\n    desc = add_newline(plays.loc[(plays['gameId']==gameId)&(plays['playId']==playId),\n                     'playDescription'].iloc[0])\n    title = f\"<b>{home}(Home) vs {visitor}(Away), {time[:-3]} ET, {date.day} {date.month_name()}<\/b><br>{desc}\"\n    \n    #Check if buffer can be used\n    name = f\"week{week}\"\n    if buffer.name != name:\n        buffer = pd.read_csv(os.path.join(path,f\"{name}.csv\"))\n        buffer.name = name\n    game_data = buffer[(buffer['gameId']==gameId)&(buffer['playId']==playId)]\n    \n    #Plot the gameplay\n    fig = px.scatter(data_frame=game_data,x='x',y='y',color='team',animation_frame='frameId',\n                custom_data=['displayName','jerseyNumber','position','team'])\n    fig.update_traces(marker_line_color='black', marker_line_width=1, marker_size=10)\n    hovertemplate='<b>%{customdata[0]}<\/b><br><br>'+\\\n                  '<b>Jersey No.<\/b>: %{customdata[1]}<br>'+\\\n                  '<b>Position<\/b>: %{customdata[2]}<br>'+\\\n                  '<b>Team<\/b>: %{customdata[3]}<extra><\/extra>'\n    fig.for_each_trace(lambda trace: trace.update(hovertemplate=None) if 'football' in trace.hovertemplate \\\n                       else trace.update(hovertemplate=hovertemplate))\n    add_image_plotly(fig,'\/kaggle\/input\/nfl2021images\/Field.png',x=0,y=1,\n                     opacity=1,sizex=1,sizey=1,sizing='stretch')\n    \n    fig.update_layout(title=title,showlegend=False, hovermode='closest',\n                      width=700, height=500,margin=dict(l=0, r=0,t=150,b=0),\n                      xaxis=dict(title='',range=[-3,123],showgrid=False,\n                                 zeroline=False,showticklabels=False),\n                      yaxis=dict(title='',range=[-3,56.3],showgrid=False,\n                                 zeroline=False,showticklabels=False))\n    fig.show()","2495ca16":"plot_gameplay(2018090600,75)","cb1468eb":"# \ud83c\udfc8 Plays\nIn this section I have tried to visualize the plays. Below is an example of a random play.","83be4d88":"# Lot more analysis coming up. Stay Tuned :)","7ba6d777":"# \ud83c\udfc8\ud83c\udfc8 Player Age Distribution\nThe below plot shows the age distribution of the three task-specific platoons of players. \n- All the three platoons share quite a similar age distribution with Offense and Defence having more younger players (almost 75%) below the age of 30. \n- Offense and Defense have outliers too with one player reaching an age of 43 years. While, Special teams don't have any outliers. \n- The youngest player in NFL Season 2018 was a 22.52 year old defensive player while the eldest being a 43.26 years old offensive player.","bf9e3d4b":"# \ud83c\udfc8 NFL Season Schedule\nThe NFL's 17-week regular season runs from early September to late December, with each team playing 16 games and having one bye week. \n\nThe below plot shows the game start timings and their respective dates on which they were played. Hovering on the points will provide further details about the game.","5b7f7309":"# \ud83c\udfc8 NFL Players\nThere are so many ways to break down how NFL teams build their roster.  Some teams build with youth while others collect veteran players.  While no one formula for stacking an NFL roster is iron-clad, one rule in the NFL is: Teams are only allowed to have 53 players on their active roster.  Of these 53, only 46 players can dress out for the actual game. \n<img src='https:\/\/i.pinimg.com\/originals\/85\/54\/6e\/85546e169ea765819ec6ae68fb0f66a1.png'\/>\n\nIn American football, the specific role that a player takes on the field is referred to as their **position**. Under the modern rules of American football, both teams are allowed 11 players on the field at one time and have **unlimited free substitutions**, meaning that they may change any number of players during any dead ball situation. This has resulted in the development of three task-specific **platoons** of players within any single team: the `offense` (the team with possession of the ball, which is trying to score), the `defense` (the team trying to prevent the other team from scoring, and to take the ball from them), and the so-called `special teams` (who play in all kicking situations). Within these three separate platoons, various positions exist depending on the job that player is doing.","5627ffa8":"# \ud83c\udfc8\ud83c\udfc8 Player Positions\nWithin the three platoons: Offense, Defence & Special teams, various positions exist depending on the job that player is doing. The figure shows these various positions. Its missing the special teams' positions but just like their name, they come into only in all kicking situations. So, they don't have a particular position.\n<img src='https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/2\/25\/American_Football_Positions.svg\/800px-American_Football_Positions.svg.png' height=400 width=500\/>\n\nClick on this [link](https:\/\/en.wikipedia.org\/wiki\/American_football_positions) to know all the positions in NFL. In this Dataset we are provided with the following positions:-\n\n<h3>Offense<\/h3>\n<ul style=\"list-style-type:square;\">\n  <li>Wide Recievers <span class=\"label label-danger\">WR<\/span><\/li>\n  <li>Quarterbacks <span class=\"label label-danger\">QB<\/span><\/li>\n  <li>Tight Ends <span class=\"label label-danger\">TE<\/span><\/li>\n  <li>Running Backs <span class=\"label label-danger\">RB<\/span><\/li>\n  <li>Fullbacks <span class=\"label label-danger\">FB<\/span><\/li>\n  <li>Halfbacks <span class=\"label label-danger\">WR<\/span><\/li>\n<\/ul>\n<h3>Defence<\/h3>\n<ul style=\"list-style-type:square;\">\n  <li>Cornerbacks <span class=\"label label-info\">CB<\/span><\/li>\n  <li>Safeties <span class=\"label label-info\">S<\/span><\/li>\n      <ul style=\"list-style-type:circle;\">\n          <li>Strong Safeties <span class=\"label label-info\">SS<\/span><\/li>\n          <li>Free Safeties <span class=\"label label-info\">FS<\/span><\/li>\n      <\/ul>\n  <li>Linebackers <span class=\"label label-info\">LB<\/span><\/li>\n      <ul style=\"list-style-type:circle;\">\n          <li>Middle Linebackers <span class=\"label label-info\">MLB<\/span><\/li>\n          <li>Inside Linebackers <span class=\"label label-info\">ILB<\/span><\/li>\n          <li>Outside Linebackers <span class=\"label label-info\">OLB<\/span><\/li>\n      <\/ul>  \n  <li>Defensive ends <span class=\"label label-info\">DE<\/span><\/li>\n  <li>Nose Tackles <span class=\"label label-info\">NT<\/span><\/li>\n  <li>Defensive Tackles <span class=\"label label-info\">DT<\/span><\/li>\n  <li>Halfbacks <span class=\"label label-info\">WR<\/span><\/li>\n<\/ul>\n<h3>Special Teams<\/h3>\n<ul style=\"list-style-type:square;\">\n  <li>Punters <span class=\"label label-success\">P<\/span><\/li>\n  <li>Kickers <span class=\"label label-success\">K<\/span><\/li>\n  <li>Long Snappers <span class=\"label label-success\">LS<\/span><\/li>\n<\/ul>","3ef9972e":"# NFL Big Data Bowl 2021 \nThe **National Football League (NFL)** is a professional American football league consisting of 32 teams, divided equally between the National Football Conference (**NFC**) and the American Football Conference (**AFC**). The NFL is one of the four major North American professional sports leagues, the highest professional level of American football in the world, the wealthiest professional sport league by revenue, and the sport league with the most valuable teams.The NFL's 17-week regular season runs from early September to late December, with each team playing 16 games and having one bye week. Following the conclusion of the regular season, seven teams from each conference (four division winners and three wild card teams) advance to the playoffs, a single-elimination tournament culminating in the Super Bowl, which is usually held on the first Sunday in February and is played between the champions of the NFC and AFC.\n<br>\n<img src='https:\/\/images.daznservices.com\/di\/library\/sporting_news\/65\/c8\/lambeau-field-080515-getty-ftrjpg_17qhlqkbvtfti1t9g9rx5mhyku.jpg?t=-20443826&quality=100' height=500 width=700\/>\n<br>\nWith the help of this notebook, I'll be doing an extensive study of the **2018 NFL Seaso**n. Along with that, the data bowl also provides us with all the player tracking data for all drop-back pass plays from the 2018 regular season so that we can measure defensive performance on these plays.\n\n> Here's a one minute introductory video for all the beginners out there like me \ud83d\ude1c"}}