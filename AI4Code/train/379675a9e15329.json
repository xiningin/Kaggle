{"cell_type":{"f06afac9":"code","e049aa91":"code","3b98e4de":"code","4f1b8ca0":"code","50eaf27b":"code","ccfc5350":"code","79e59e15":"code","983f28c7":"code","cb4835d9":"code","2e17d6f6":"code","48a17839":"code","9490003d":"code","63c95ec3":"code","b4117f74":"code","59b810c5":"code","26916546":"code","e1dc923a":"code","1022cbff":"code","446ffb32":"code","7c3393ee":"code","664b7fef":"code","f00f4ad8":"code","ccd76d22":"code","04212a87":"code","321cbf61":"markdown","8efa07ce":"markdown","8dddd52e":"markdown","b846b81b":"markdown","ab8bf5d8":"markdown"},"source":{"f06afac9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: \n# https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) \n# will list all files under the input directory\n\nimport os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames\n          #print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) \n# that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, \n# but they won't be saved outside of the current session","e049aa91":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\nimport tensorflow as tf\nimport cv2, os, gc, glob\nfrom tqdm import tqdm\n\nfrom tensorflow.keras import layers, models\n\nimport keras\nfrom keras.models import Sequential, Model\nfrom keras.layers import Conv2D, MaxPool2D\nfrom keras.layers import Activation, Dropout, BatchNormalization, Flatten, Dense\nfrom keras.optimizers import Adam\nfrom keras.utils import to_categorical, np_utils\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.preprocessing import LabelEncoder","3b98e4de":"os.listdir('\/kaggle\/input')","4f1b8ca0":"os.listdir('\/kaggle\/input\/covid19-radiography-database')","50eaf27b":"os.listdir('\/kaggle\/input\/covid19-radiography-database\/COVID-19 Radiography Database')","ccfc5350":"# Image paths\n\nimagePaths = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        if (filename[-3:] == 'png'):\n            imagePaths.append(os.path.join(dirname, filename))","79e59e15":"# Data - Label\n\nData = []\nTarget = []\nresize = 150\n\ncat = {'Viral Pneumonia': 'Pneumonia', 'NORMAL': 'Normal', 'COVID-19': 'Covid-19'}\n\nfor imagePath in tqdm(imagePaths):\n    label = imagePath.split(os.path.sep)[-2]\n    image = cv2.imread(imagePath)\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    image = cv2.resize(image, (resize, resize)) \/255\n\n    Data.append(image)\n    Target.append(cat[label])","983f28c7":"# Count by Label\n\ndf = pd.DataFrame(Target,columns=['Labels'])\nsns.countplot(df['Labels'])\nplt.show()\n\nprint('Covid-19:',Target.count('Covid-19'))\nprint('Normal:',Target.count('Normal'))\nprint('Pneumonia: ',Target.count('Pneumonia'))","cb4835d9":"# Images shape\n\nsize = []\nfor file in imagePaths: \n    image = plt.imread(file)\n    size.append(image.shape)\npd.Series(size).value_counts()","2e17d6f6":"# Show Images\n\nplt.figure(figsize=(20,20))\nfor n , i in enumerate(list(np.random.randint(0,len(imagePaths),25))) : \n    plt.subplot(5,5,n+1)\n    plt.imshow(Data[i] , cmap='gray')\n    plt.title(Target[i])\n    plt.axis('off')     \nplt.show()","48a17839":"# encode labels as integers\n\nle = LabelEncoder()\nlabels = le.fit_transform(Target)\nlabels = to_categorical(labels)\n\nprint(le.classes_)\nprint(labels[0])","9490003d":"# split Data\n\n(x_train, x_test, y_train, y_test) = train_test_split(Data, labels,test_size=0.20,\n                                                      stratify=labels,random_state=42)\n\ntrainX = np.array(x_train)\ntestX = np.array(x_test)\ntrainY = np.array(y_train)\ntestY = np.array(y_test)\n\nprint(trainX.shape)\nprint(testX.shape)\nprint(trainY.shape)\nprint(testY.shape)","63c95ec3":"trainX[0]","b4117f74":"s = 150 # size","59b810c5":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size =(3,3), activation = \"relu\", input_shape=(s,s,3), kernel_initializer='he_normal',))\n# model.add(BatchNormalization())\nmodel.add(MaxPool2D(pool_size = (2,2)))\n\nmodel.add(Conv2D(filters = 64, kernel_size =(3,3), activation = \"relu\"))\nmodel.add(MaxPool2D(pool_size = (2,2)))\n\nmodel.add(Conv2D(filters = 128, kernel_size =(3,3), activation = \"relu\"))\nmodel.add(MaxPool2D(pool_size = (2,2), strides = (1,1)))\n\nmodel.add(Dropout(0.25))\n\n#fully connected\nmodel.add(Flatten())\nmodel.add(Dense(64, activation = \"relu\"))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(3, activation = \"softmax\"))","26916546":"# Compile \n\nmodel.compile(optimizer = keras.optimizers.Adam(),\n              loss= keras.losses.categorical_crossentropy,\n              metrics= ['accuracy'])","e1dc923a":"# Model Details\n\nprint(model.summary())","1022cbff":"epochs = 30\n\nThisModel = model.fit(trainX, trainY, epochs=epochs, batch_size=40, verbose=1)","446ffb32":"modelLoss, modelAccuracy = model.evaluate(testX, testY, verbose=0)\n\nprint('Test Loss is {}'.format(modelLoss))\nprint('Test Accuracy is {}'.format(modelAccuracy ))","7c3393ee":"class_names = ['COVID-19','Normal','Viral Pneumonia']\n\ny_pred = model.predict(testX)\nprint(class_names[np.argmax(y_pred[1])])","664b7fef":"# classification report on train\nbatch_size=40\n\npredIdxs = model.predict (trainX, batch_size=batch_size)\npredIdxs = np.argmax(predIdxs, axis=1)\nprint(classification_report(trainY.argmax(axis=1), predIdxs, target_names=le.classes_, digits = 5))","f00f4ad8":"# classification report on test\n\npredIdxs = model.predict(testX, batch_size=batch_size)\npredIdxs = np.argmax(predIdxs, axis=1)\nprint(classification_report(testY.argmax(axis=1), predIdxs, target_names=le.classes_, digits = 5))","ccd76d22":"# Plotting Confusion Matrix\nx = confusion_matrix(testY.argmax(axis=1),y_pred.argmax(axis=1))\nConfusion_Matrix = pd.DataFrame(x, index=class_names, columns=class_names)\n\nsns.set(font_scale=1.5, color_codes=True, palette='deep')\nsns.heatmap(Confusion_Matrix, annot=True, annot_kws={'size':16}, fmt='d', cmap='YlGnBu')\n\nplt.ylabel(\"Actual\")\nplt.xlabel(\"Predicted\")\nplt.title('Confusion Matrix')\nplt.show()","04212a87":"model.save('CNN_Covid19_Xray_V1.h5') ","321cbf61":"# Results","8efa07ce":"# import Libraries","8dddd52e":"# Model","b846b81b":"# ****Explorer****","ab8bf5d8":"# Prepare Data"}}