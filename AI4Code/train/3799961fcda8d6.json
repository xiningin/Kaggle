{"cell_type":{"2c5d6da3":"code","bb230c4a":"code","36195d02":"code","8d155a23":"code","b06295b9":"code","07ecdc92":"code","fe8aa942":"code","29fb7030":"code","314d6951":"code","ab0956db":"code","be21d2cf":"code","40661ab6":"code","a22dde33":"code","446af281":"code","5d87f57c":"code","93fdd913":"code","4cf41463":"code","72b0337e":"code","98c0e7eb":"code","c9be83ff":"code","63821e79":"code","90fced46":"code","f5f11c4d":"code","21bde0ba":"code","9a73dbaa":"code","065fb749":"code","468d4982":"code","7e3272b9":"code","26374efb":"code","fdfece13":"code","a52ff928":"code","841d1685":"code","874538aa":"markdown","d58e8650":"markdown","fca733b8":"markdown","87458505":"markdown"},"source":{"2c5d6da3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bb230c4a":"train = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/train.csv', encoding='latin_1')\ntest  = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/test.csv', encoding='latin_1')\nsub = pd.read_csv('..\/input\/tabular-playground-series-feb-2021\/sample_submission.csv', encoding='latin_1')","36195d02":"import matplotlib\nimport sklearn\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder as LE\n\n\npd.set_option('display.max_columns', None)\nsns.set_style(\"darkgrid\")\nprint(f\"Numpy version : Numpy {np.__version__}\")\nprint(f\"Pandas version : Pandas {pd.__version__}\")\nprint(f\"Matplotlib version : Matplotlib {matplotlib.__version__}\")\nprint(f\"Seaborn version : Seaborn {sns.__version__}\")\nprint(f\"SkLearn version : SkLearn {sklearn.__version__}\")","8d155a23":"train","b06295b9":"train.describe()","07ecdc92":"def detailed(data):\n    ddata = pd.DataFrame(index=['total', '% missing' , 'data Type', 'range'])\n    \n    for cols in data.columns:\n        size = data[cols].size\n        pnul=round(data[cols].isna().sum()\/size,2)\n        nul_val = f\"{pnul*100}% - {data[cols].isna().sum()}\/{size}\"\n        dtype = 'categorical' if data[cols].dtype == object else 'Numerical' \n        rng = f\"{len(data[cols].unique())} labels\"\\\n        if dtype == 'categorical' else\\\n        f\"{round(data[cols].min(),2)}-{round(data[cols].max(),2)}\"\n        ddata[cols] = [size,nul_val,dtype,rng]\n    return ddata","fe8aa942":"detailed(train)","29fb7030":"detailed(test)","314d6951":"train.drop(['id'],axis=1, inplace= True)\n# test.drop(['id'], axis=1, inplace=True)","ab0956db":"train","be21d2cf":"plt.figure(figsize=[20,10])\ntrain['target'].plot.hist()","40661ab6":"plt.figure(figsize=[10,20])\ntrain['target'].plot.box()","a22dde33":"# train.index","446af281":"train['target'].describe()","5d87f57c":"def outlier_idx(data):\n    \n    Q1, Q3 = np.quantile(data,[0.25, 0.75])\n    \n    IQR = Q3-Q1\n    \n    UB = Q3 + (IQR * 1.5)\n    LB = Q1 - (IQR * 1.5)\n    \n    return np.where((data>UB)|(data<LB))","93fdd913":"idx=outlier_idx(train['target'])","4cf41463":"train.drop(idx[0], inplace=True)","72b0337e":"train","98c0e7eb":"from sklearn.preprocessing import MinMaxScaler","c9be83ff":"def preprocess(d):\n    data = d.copy()\n    \n    categories = ['cat0','cat1','cat2','cat3','cat4','cat5','cat6','cat7','cat8','cat9']\n    \n    for col in categories:\n        le = LE()\n        data[col] = le.fit_transform(data[col])\n#         test[col] = le.fit_transform(test[col])\n    scaler = MinMaxScaler()\n    if 'target' == data.columns[-1]:\n        X = data[data.columns[:-1]]\n    else:\n        X = data\n    X=scaler.fit_transform(X)\n    return X","63821e79":"X = preprocess(train)\ny = train['target']","90fced46":"from sklearn.model_selection import train_test_split","f5f11c4d":"x_train, x_test, y_train, y_test = train_test_split(X,y,test_size=0.2, shuffle=True, random_state=111 )","21bde0ba":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor","9a73dbaa":"lr = LinearRegression()","065fb749":"lr.fit(x_train, y_train)","468d4982":"y_preds = lr.predict(x_test)","7e3272b9":"mean_absolute_error(y_test, y_preds)","26374efb":"# preprocess(test[testt.col])","fdfece13":"target_X = preprocess(test[test.columns[1:]])","a52ff928":"sub['target']=lr.predict(target_X)","841d1685":"sub.to_csv('submission.csv', index=False)","874538aa":"## BASIC MODELLING ","d58e8650":"## PRE-PROCESSING  ","fca733b8":"### Scaling ","87458505":"## EDA"}}