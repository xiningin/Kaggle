{"cell_type":{"85963ea0":"code","70cf3b0b":"code","15e68f36":"code","b655d5be":"code","885b7e4c":"markdown","45dedeeb":"markdown"},"source":{"85963ea0":"import os\nprint(os.listdir(\"..\/input\"))","70cf3b0b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport scipy.sparse as scs # sparse matrix construction \nimport scipy.linalg as scl # linear algebra algorithms\nimport scipy.optimize as sco # for minimization use\nimport matplotlib.pylab as plt # for visualization\n\ndef fixed_constraints(N=9):\n    rowC = np.zeros(N)\n    rowC[0] =1\n    rowR = np.zeros(N)\n    rowR[0] =1\n    row = scl.toeplitz(rowC, rowR)\n    ROW = np.kron(row, np.kron(np.ones((1,N)), np.eye(N)))\n    \n    colR = np.kron(np.ones((1,N)), rowC)\n    col  = scl.toeplitz(rowC, colR)\n    COL  = np.kron(col, np.eye(N))\n    \n    M = int(np.sqrt(N))\n    boxC = np.zeros(M)\n    boxC[0]=1\n    boxR = np.kron(np.ones((1, M)), boxC) \n    box = scl.toeplitz(boxC, boxR)\n    box = np.kron(np.eye(M), box)\n    BOX = np.kron(box, np.block([np.eye(N), np.eye(N) ,np.eye(N)]))\n    \n    cell = np.eye(N**2)\n    CELL = np.kron(cell, np.ones((1,N)))\n    \n    return scs.csr_matrix(np.block([[ROW],[COL],[BOX],[CELL]]))\n\n\n\n\n# For the constraint from clues, we extract the nonzeros from the quiz string.\ndef clue_constraint(input_quiz, N=9):\n    m = np.reshape([int(c) for c in input_quiz], (N,N))\n    r, c = np.where(m.T)\n    v = np.array([m[c[d],r[d]] for d in range(len(r))])\n    \n    table = N * c + r\n    table = np.block([[table],[v-1]])\n    \n    # it is faster to use lil_matrix when changing the sparse structure.\n    CLUE = scs.lil_matrix((len(table.T), N**3))\n    for i in range(len(table.T)):\n        CLUE[i,table[0,i]*N + table[1,i]] = 1\n    # change back to csr_matrix.\n    CLUE = CLUE.tocsr() \n    \n    return CLUE","15e68f36":"!pip install cvxopt","b655d5be":"from cvxopt import solvers, matrix\nimport time\nsolvers.options['show_progress'] = False\n\n# We test the following algoritm on small data set.\ndata = pd.read_csv(\"..\/input\/small1.csv\") \n\ncorr_cnt = 0\nstart = time.time()\nfor i in range(len(data)):\n    quiz = data[\"quizzes\"][i]\n    solu = data[\"solutions\"][i]\n    A0 = fixed_constraints()\n    A1 = clue_constraint(quiz)\n\n    # Formulate the matrix A and vector B (B is all ones).\n    A = scs.vstack((A0,A1))\n    A = A.toarray()\n    B = np.ones(A.shape[0])\n\n\n    # Because rank defficiency. We need to extract effective rank.\n    u, s, vh = np.linalg.svd(A, full_matrices=False)\n    K = np.sum(s > 1e-12)\n    S_ = np.block([np.diag(s[:K]), np.zeros((K, A.shape[0]-K))])\n    A = S_@vh\n    B = u.T@B\n    B = B[:K]\n\n    c = matrix(np.block([ np.ones(A.shape[1]), np.ones(A.shape[1]) ]))\n    G = matrix(np.block([[-np.eye(A.shape[1]), np.zeros((A.shape[1], A.shape[1]))],\\\n                         [np.zeros((A.shape[1], A.shape[1])), -np.eye(A.shape[1])]]))\n    h = matrix(np.zeros(A.shape[1]*2))\n    H = matrix(np.block([A, -A]))\n    b = matrix(B)\n\n    sol = solvers.lp(c,G,h,H,b)\n\n    # postprocessing the solution\n    X = np.array(sol['x']).T[0]\n    x = X[:A.shape[1]] - X[A.shape[1]:]\n    \n    # map to board\n    z = np.reshape(x, (81, 9))\n    if np.linalg.norm(np.reshape(np.array([np.argmax(d)+1 for d in z]), (9,9) ) \\\n                      - np.reshape([int(c) for c in solu], (9,9)), np.inf) >0:\n        pass\n    else:\n        #print(\"CORRECT\")\n        corr_cnt += 1\n    \n    if (i+1) % 5 == 0:\n        end = time.time()\n        print(\"Aver Time: {t:6.2f} secs. Success rate: {corr} \/ {all} \".format(t=(end-start)\/(i+1), corr=corr_cnt, all=i+1) )\n\nend = time.time()\nprint(\"Aver Time: {t:6.2f} secs. Success rate: {corr} \/ {all} \".format(t=(end-start)\/(i+1), corr=corr_cnt, all=i+1) )","885b7e4c":"``CVXOPT`` is a package used for LP. Just ``pip install cvxopt`` to install. ","45dedeeb":"In this example kernel, we try to demonstrate the LP for the Sudoku game. To study the problem \n\n$$\\min_{X} \\|X\\|_{L^1} $$\nsubject to equality constraint $AX = B$."}}