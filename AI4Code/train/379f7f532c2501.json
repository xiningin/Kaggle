{"cell_type":{"5d655266":"code","565ee841":"code","8793f7ed":"code","7f34a9e4":"code","d920d94f":"code","f459d98e":"code","319a113e":"code","83fb46cd":"code","3b15c340":"code","a2875b5f":"code","ab0acfe1":"code","ebed5f7e":"code","994df75f":"code","11f8dc3c":"code","d8a49193":"code","22ffdd03":"code","0bd482c6":"markdown","9fed0471":"markdown","7303b1e7":"markdown","625849ba":"markdown","18770d43":"markdown","4b85375a":"markdown","e7b11b47":"markdown","752ba4e0":"markdown","eee6cf51":"markdown","275338f0":"markdown"},"source":{"5d655266":"import numpy as np\nfrom __future__ import division\nimport random\nfrom keras.callbacks import History \nfrom keras.layers import Dense, Activation, Flatten, Conv2D, Lambda\nfrom keras.layers import MaxPooling2D, Dropout, BatchNormalization\nfrom keras.utils import print_summary\nfrom keras.models import Sequential\nfrom keras.callbacks import ModelCheckpoint\nfrom keras.callbacks import EarlyStopping\nfrom keras.optimizers import Adam\nimport keras.backend as K\nimport pickle\nimport csv\nimport cv2\nimport os\nimport numpy as np\nimport scipy\nimport pickle\nimport matplotlib.pyplot as plt\nfrom itertools import islice\nimport warnings\nimport pandas as pd\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle\nfrom keras.models import load_model\nimport keras.utils\n\n#For Visualizations\nfrom scipy.stats import norm, skew\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Any results you write to the current directory are saved as output.","565ee841":"print(os.listdir('..\/input\/'))","8793f7ed":"features_directory = '..\/input\/training\/training data\/Training Data\/'\nlabels_file = '..\/input\/train-data\/train_Data.txt'","7f34a9e4":"def image_preprocessing(img):\n    resized_image = cv2.resize((cv2.cvtColor(img, cv2.COLOR_RGB2HSV))[:, :, 1], (100, 100))\n    return resized_image","d920d94f":"def Load_training():\n    X = []\n    y = []\n    features = []\n\n    with open(labels_file) as fp:\n        for line in fp:\n            X.append(features_directory + line.split()[0])\n            y.append(float(line.split()[1]) * scipy.pi \/ 180)\n\n    for i in range(len(X)):\n        img = plt.imread(X[i])\n        features.append(image_preprocessing(img))\n    \n    return features, y","f459d98e":"features, labels = Load_training()\n\nfeatures = np.array(features).astype('float32')\nlabels = np.array(labels).astype('float32')\n\nwith open(\"features\", \"wb\") as f:\n    pickle.dump(features, f, protocol=4)\nwith open(\"labels\", \"wb\") as f:\n    pickle.dump(labels, f, protocol=4)\n","319a113e":"features.shape","83fb46cd":"labels.shape","3b15c340":"import warnings\nimport pandas as pd\n\nwarnings.filterwarnings('ignore')\n\npan = pd.Panel(features)\ndf = pan.swapaxes(1, 2).to_frame()\ndf.index = df.index.droplevel('major')\ndf.index = df.index+1","a2875b5f":"import gc\ndf.shape","ab0acfe1":"%matplotlib inline\nplt.style.use('seaborn')\n\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of Skewness values per column in the Data set\")\nsns.distplot(df.skew(axis=0),color=\"blue\", kde=True,bins=120, label='train')\nplt.legend()\nplt.show()","ebed5f7e":"%matplotlib inline\nplt.style.use('seaborn')\n\nplt.figure(figsize=(16,6))\nplt.title(\"Distribution of Kurtosis values per column in the Data set\")\nsns.distplot(df.kurtosis(axis=0),color=\"green\", kde=True,bins=120, label='train')\nplt.legend()\nplt.show()","994df75f":"def keras_model():\n    \n    model = Sequential()\n    model.add(Lambda(lambda x: x \/ 127.5 - 1., input_shape=(100, 100, 1)))\n\n    model.add(Conv2D(32, (3, 3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D((2, 2), padding='valid'))\n    \n    model.add(Conv2D(32, (3, 3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D((2, 2), padding='valid'))\n\n    model.add(Conv2D(64, (3, 3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D((2, 2), padding='valid'))\n    \n    model.add(Conv2D(64, (3, 3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D((2, 2), padding='valid'))\n\n    model.add(Conv2D(128, (3, 3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D((2, 2), padding='valid'))\n    \n    model.add(Conv2D(128, (3, 3), padding='same'))\n    model.add(Activation('relu'))\n    model.add(MaxPooling2D((2, 2), padding='valid'))\n\n    model.add(Flatten())\n    model.add(Dropout(0.5))\n    \n    model.add(BatchNormalization())\n    model.add(Dense(64))\n    model.add(Dense(1))\n    \n    model.compile(optimizer=Adam(lr=0.0001), loss=\"mse\")\n    model.summary()\n    return model","11f8dc3c":"def loadFromPickle():\n    with open(\"features\", \"rb\") as f:\n        features = np.array(pickle.load(f))\n    with open(\"labels\", \"rb\") as f:\n        labels = np.array(pickle.load(f))\n    return features, labels","d8a49193":"warnings.filterwarnings('ignore')\n\nfeatures, labels = loadFromPickle()\nfeatures, labels = shuffle(features, labels)\n\n#do a Train Test Split\ntrain_x, test_x, train_y, test_y = train_test_split(features, labels, random_state=42, test_size=0.20)\ntrain_x, val_x, train_y, val_y = train_test_split(train_x, train_y, random_state=42, test_size=0.10)\n\ntrain_x = train_x.reshape(train_x.shape[0], 100, 100, 1)\nval_x = val_x.reshape(val_x.shape[0], 100, 100, 1)\n\nmodel = keras_model()\nfilepath = \".\/SelfDriving.h5\"\n\nes = EarlyStopping(monitor='val_loss', verbose=1)\ncheckpoint = ModelCheckpoint(filepath, verbose=1,monitor='val_loss', save_best_only=True)\nhist = History()\ncallbacks_list = [es,checkpoint,hist]\n    \nmodel.fit(train_x, train_y, validation_data=(val_x, val_y), epochs=10, batch_size=32,callbacks=callbacks_list)\n\nprint_summary(model)\n\nmodel.save(filepath)","22ffdd03":"plt.plot(hist.history['loss'])\nplt.plot(hist.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.legend(['train', 'validation'])\nplt.show()","0bd482c6":"<html>\n    <body>\n         <img src = \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/1\/16\/Driver_free_car.jpg\" >\n        <br\/>\n        <p>\nWe all know Self Driving Cars is one of the hottest areas of research and business for the tech giants. What seemed like a science-fiction, a few years ago, now seems more like  something which is soon to become a part and parcel of our regular life. Companies like Tesla, Nissan, Cadillac do have self-driving car assistance software, but, they still require a human to keep an eye on the road and take control when needed. However, it is fascinating to see how far we have come in terms of innovation and how fast technology is advancing. So much so, that now, with the help of basic deep learning, neural network magic, we can build our own pipeline for autonomous driving using Deep Learning Methodologies.<\/p>\n        <pre>\n<a id = \"main\"><b>Contents<\/b><\/a>\n<a href = \"#1\"><b> - Import Packages<\/b><\/a>\n<a href = \"#2\"><b> - Load the Training Data<\/b><\/a>\n<a href = \"#21\"><b> - Distribution of Skewness values per column in the Dataset<\/b><\/a>\n<a href = \"#22\"><b> - Distribution of Kurtosis values per row in the Dataset<\/b><\/a>\n<a href = \"#3\"><b> - Create Sequential Model<\/b><\/a>\n<a href = \"#4\"><b> - Serialize the Data<\/b><\/a>\n<a href = \"#5\"><b> - Fit The Training Data<\/b><\/a>\n<a href = \"#6\"><b> - Evaluating the Model Performance<\/b><\/a>\n<\/pre>\n    <\/body>\n<\/html>","9fed0471":"<pre><b><a id = 5>Fit The Training Data<\/b><\/a><\/pre>\n","7303b1e7":"<pre><b><a id = 2>Load the Training Data<\/b><\/a><\/pre>","625849ba":"![](http:\/\/)<pre><b><a id = 4>Serialize and Augment the Data<\/b><\/a><\/pre>","18770d43":"<pre><b><a id = 3>Create Sequential Model<\/b><\/a><\/pre>\n<b><pre>Reference to the Orginal Paper <a href = \"https:\/\/images.nvidia.com\/content\/tegra\/automotive\/images\/2016\/solutions\/pdf\/end-to-end-dl-using-px.pdf\" target=\"_blank\">Click Here <\/a><\/pre><\/b>","4b85375a":"<pre><b>I used Panel to convert the X and Y into Data Frames to perform 2-D Visualizations<\/pre><\/b>","e7b11b47":"<pre><b><a id = 22>Distribution of Kurtosis values per row in the Dataset<\/b><\/a><\/pre>","752ba4e0":"<pre><b><a id = 6>Evaluating the Model Performance<\/b><\/a><\/pre>","eee6cf51":"<pre><b><a id = 21>Distribution of Skewness values per column in the Dataset<\/b><\/a><\/pre>","275338f0":"<b><a id = 1><pre>Import Packages<\/pre><\/a><\/b>"}}