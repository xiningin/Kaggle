{"cell_type":{"1783b546":"code","06653863":"code","8f035afd":"code","4acfa84c":"code","f0a8ef09":"code","5a91a8d3":"code","fec24e3b":"code","b48d0fbe":"code","9bcf6023":"code","cde20945":"code","3d83b34e":"code","ad62ff98":"code","25510c37":"code","549e905e":"code","53f775ce":"code","2ca8188b":"code","5f79f6ae":"code","642e53d4":"code","49b151b1":"code","a2aa5fbd":"code","54f7a610":"code","e2acf1ce":"code","34e9d813":"code","985a6925":"code","1d7cb1c6":"code","80240859":"code","b1ccaa3e":"code","1f9a5896":"code","7c5a590f":"code","f480d4d7":"code","643cf348":"code","129548e1":"code","ac53e726":"code","f5958080":"code","54d138d8":"code","8c883026":"code","52e42a76":"code","6848f558":"code","7e3bafce":"code","b672877b":"code","9dcad724":"markdown"},"source":{"1783b546":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndf = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ndf.shape\n","06653863":"df.head(10)","8f035afd":"df.count","4acfa84c":"df.info()","f0a8ef09":"#So here we can see that Age and Cabin has a significant amount of null values.\n#We can use a useful stuff from seaborn to visualize this.\nsns.heatmap(df.isnull(),yticklabels= False, cbar = False, cmap = \"viridis\") #cbar ","5a91a8d3":"df.describe()","fec24e3b":"df.columns","b48d0fbe":"df_num = df[[\"Age\", \"SibSp\", \"Parch\", \"Fare\"]]\nfor x in df_num.columns:\n    plt.hist(df_num[x])\n    plt.title(x)\n    plt.show() #if show is not there only fare will appear","9bcf6023":"print(df_num.corr())\nsns.heatmap(df_num.corr())","cde20945":"pd.pivot_table(df, index = \"Survived\", values = ['Age','SibSp','Parch','Fare'])","3d83b34e":"df_cat = df[['Survived','Pclass','Sex','Embarked']]\nfor y in df_cat.columns:\n    df[y].value_counts().plot(kind='bar');\n    plt.title(y)\n    plt.show()","ad62ff98":"#how to show the above as percentage?\n\ndf.Survived.value_counts(normalize = True).plot(kind = \"bar\",alpha = 0.5) #ndex.value_counts() function returns object containing counts of unique values. The resulting object will be in descending order so that the first element is the most frequently-occurring element. Excludes NA values by default.\nplt.title(\"Survived\")\nplt.show()\n","25510c37":"fig = plt.figure(figsize = (18,8))\nplt.title(\"Age and Survival Status\")\nplt.scatter(df.Survived, df.Age, alpha = 0.1) #Matplotlib allows you to adjust the transparency of a graph plot using the alpha attribute. Greater the value less the transparency. Snce the dots lie on top of each other we want less transparency. ","549e905e":"for x in [1,2,3]:\n    df.Age[df.Pclass==x].plot(kind=\"kde\")# first we make the plot then we add a titile and legend.\nplt.title(\"Class wrt Age\")\nplt.legend([\"1st\",\"2nd\",\"3rd\"])","53f775ce":"fig = plt.figure(figsize = (18,8)) \nplt.subplot (2,2,1)\ndf.Survived[df.Sex==\"male\"].value_counts(normalize = True).plot(kind = \"bar\",alpha = 0.5)\nplt.title(\"Men Survival Status\")\nplt.subplot(2,2,2)\nplt.title(\"Women Survival Status\")\ndf.Survived[df.Sex==\"female\"].value_counts(normalize = True).plot(kind = \"bar\",alpha = 0.5, color = \"#FFB6C1\")\nplt.subplot(2,2,3)\nplt.title(\"Comparison of Men and Women Survival Status\")\ndf.Sex[df.Survived == 1].value_counts(normalize = True).plot(kind = \"bar\",alpha = 0.5, color = [\"#FFB6C1\",\"b\"])\nplt.subplot(2,2,4)\nfor x in [1,2,3]:\n    df.Survived[df.Pclass==x].plot(kind=\"kde\")\nplt.title(\"Class wrt Survival Status\")\nplt.legend([\"1st\",\"2nd\",\"3rd\"])\n#Now we try to see if survival is affected by both class and sex","2ca8188b":"#Survival Status according to Passenger Class\nsns.set_style(\"whitegrid\")\nsns.countplot(x=\"Survived\", hue = \"Pclass\", data = df, palette = \"rainbow\")","5f79f6ae":"fig = plt.figure(figsize = (10,15))\nplt.subplot (3,1,1)\ndf.Survived[(df.Sex==\"male\") & (df.Pclass == 1)].value_counts(normalize = True).plot(kind = \"bar\",alpha = 0.5)\nplt.title(\"Survival Status when you are Male and Rich\")\nplt.subplot (3,1,2)\ndf.Survived[(df.Sex==\"male\") & (df.Pclass == 2)].value_counts(normalize = True).plot(kind = \"bar\",alpha = 0.5)\nplt.title(\"Survival Status when you are Male and Middle Class\")\nplt.subplot (3,1,3)\ndf.Survived[(df.Sex==\"male\") & (df.Pclass == 3)].value_counts(normalize = True).plot(kind = \"bar\",alpha = 0.5)\nplt.title(\"Survival Status when you are Male and Poor\")","642e53d4":"fig = plt.figure(figsize = (10,15))\nplt.subplot (3,1,1)\ndf.Survived[(df.Sex==\"female\") & (df.Pclass == 1)].value_counts(normalize = True).plot(kind = \"bar\",alpha = 0.5, color = \"#FFB6C1\")\nplt.title(\"Survival Status when you are Female and Rich\")\nplt.subplot (3,1,2)\ndf.Survived[(df.Sex==\"female\") & (df.Pclass == 2)].value_counts(normalize = True).plot(kind = \"bar\",alpha = 0.5,color = \"#FFB6C1\")\nplt.title(\"Survival Status when you are Female and Middle Class\")\nplt.subplot (3,1,3)\ndf.Survived[(df.Sex==\"female\") & (df.Pclass == 3)].value_counts(normalize = True).plot(kind = \"bar\",alpha = 0.5,color = \"#FFB6C1\")\nplt.title(\"Survival Status when you are Female and Poor\")","49b151b1":"#Any relationship b\/w age and passenger class?\nplt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=df,palette='winter')","a2aa5fbd":"#cleaning data\ndf[\"Fare\"] = df[\"Fare\"].fillna(df[\"Fare\"].dropna().median())\ndf[\"Age\"] = df[\"Age\"].fillna(df[\"Age\"].dropna().median())\ndf.loc[df.Sex==\"male\",\"Sex\"] = 0\ndf.loc[df.Sex==\"female\",\"Sex\"] = 1 \ndf[\"Embarked\"] = df[\"Embarked\"].fillna(\"S\")\ndf.loc[df.Embarked==\"S\",\"Embarked\"] = 0\ndf.loc[df.Embarked==\"C\",\"Embarked\"] = 1\ndf.loc[df.Embarked==\"Q\",\"Embarked\"] = 2","54f7a610":"sns.heatmap(df.isnull(),yticklabels= False, cbar = False, cmap = \"viridis\")\n# i just don't think cabin is useful. And since there are a lot of null values and to modify it I will have to use feature engineering and I don't know it much gonna drop it.","e2acf1ce":"df.drop(\"Cabin\", axis = 1, inplace = True)","34e9d813":"sns.heatmap(df.isnull(),yticklabels= False, cbar = False, cmap = \"viridis\")","985a6925":"df.drop([\"Name\", \"Ticket\"], axis = 1, inplace  = True)\n#obviously name and ticket also plays no role in what we are going to predict.\n","1d7cb1c6":"df.head(10)","80240859":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df.drop('Survived',axis=1), \n                                                    df['Survived'], test_size=0.30, \n                                                    random_state = 101)\nfrom sklearn.linear_model import LogisticRegression\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)\npredictions = logmodel.predict(X_test)\npredictions","b1ccaa3e":"from sklearn.metrics import confusion_matrix\naccuracy=confusion_matrix(y_test,predictions)\naccuracy","1f9a5896":"from sklearn.metrics import accuracy_score\naccuracy=accuracy_score(y_test,predictions)\naccuracy","7c5a590f":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head(10)\n#We have to clean test like we did to df\n","f480d4d7":"test.drop([\"Name\",\"Ticket\",\"Cabin\"],  axis = 1, inplace = True)\n","643cf348":"test.head(10)","129548e1":"test[\"Fare\"] = test[\"Fare\"].fillna(test[\"Fare\"].dropna().median())\ntest[\"Age\"] = test[\"Age\"].fillna(test[\"Age\"].dropna().median())\ntest.loc[test.Sex==\"male\",\"Sex\"] = 0\ntest.loc[test.Sex==\"female\",\"Sex\"] = 1 \ndf[\"Embarked\"] = df[\"Embarked\"].fillna(\"S\")\ntest.loc[test.Embarked==\"S\",\"Embarked\"] = 0\ntest.loc[test.Embarked==\"C\",\"Embarked\"] = 1\ntest.loc[test.Embarked==\"Q\",\"Embarked\"] = 2\ntest.head(10)","ac53e726":"sns.heatmap(test.isnull(),yticklabels= False, cbar = False, cmap = \"viridis\")","f5958080":"test.info()","54d138d8":"test","8c883026":"test[\"Embarked\"] = test[\"Embarked\"].fillna(test[\"Embarked\"].dropna().median())","52e42a76":"test.info()","6848f558":"df.info()","7e3bafce":"X_train = df.drop('Survived', axis=1)\ny_train = df['Survived']\nX_test = test\nclf = LogisticRegression()\nclf.fit(X_train, y_train)\ny_pred_log_reg = clf.predict(X_test)\ny_pred_log_reg\n\n","b672877b":"my_submission = pd.DataFrame({'PassengerId ': test.PassengerId, 'Survived': y_pred_log_reg})\nmy_submission.to_csv('submission.csv', index=False)\n","9dcad724":"### Going to the training part"}}