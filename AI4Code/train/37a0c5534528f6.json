{"cell_type":{"2a5f434a":"code","7a7cfc76":"code","8fa9df54":"code","8c43e271":"code","ecb44d4f":"code","40e6f5d7":"code","2241c30a":"code","7b81640b":"code","a784ea69":"code","149fe3c5":"code","ed1a6093":"code","39ee7cb5":"code","e42a26b3":"code","a64a16da":"code","a0d04f40":"code","8d3a42b5":"code","9327b8e1":"code","0e98b85a":"code","e8fe12af":"code","81b87a4a":"code","15c21acf":"code","60ea1f97":"code","e3ff82c2":"code","d8584e4a":"code","497780ab":"code","7a17f394":"markdown","a71c415a":"markdown","5f73ad35":"markdown","89b4b163":"markdown","8f0f1e7b":"markdown","42c6198e":"markdown","7007391a":"markdown","787f16ee":"markdown","b21ab689":"markdown","63a07662":"markdown","aa84ca53":"markdown","4f27d867":"markdown","076470b2":"markdown","080a737d":"markdown","2f200504":"markdown"},"source":{"2a5f434a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a7cfc76":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import linear_kernel \nimport warnings\nwarnings.filterwarnings('ignore')","8fa9df54":"data = pd.read_csv(\"..\/input\/movielens-100k-dataset\/movielens_100k.csv\")","8c43e271":"data.head()","ecb44d4f":"data.shape","40e6f5d7":"# check number of null entries in each columns of data\ndata.isnull().sum()","2241c30a":"data.dropna(subset=['directors','actors','genres'],axis=0,how='all',inplace=True)\ndata.reset_index(drop=True,inplace=True)","7b81640b":"data.isnull().sum()","a784ea69":"data.fillna('',inplace=True)","149fe3c5":"data.isnull().sum()","ed1a6093":"data.drop_duplicates(subset=['title','year','directors','actors','genres'],\n                     ignore_index=True,inplace=True)","39ee7cb5":"data.shape","e42a26b3":"import re\n\ndef listToString(list):\n    str1 = \" \"\n    return (str1.join(list))\n\ndef combine_feature(row):\n  comb = row['directors']+' '+row['actors']+' '+row['genres']\n  lst=re.findall('.[^A-Z]*', comb)\n  convertedStr = listToString(lst)\n  return convertedStr.replace('  ',' ')","a64a16da":"data['combined'] = data.apply(lambda x: combine_feature(x),axis=1)\ndata['combined'] = data['combined'].str.lower()\ndata['combined'] = data['combined'].str.replace('[^\\w\\s]','')","a0d04f40":"data.head()","8d3a42b5":"df = data[['title','combined']]\ndf.head()","9327b8e1":"tf = TfidfVectorizer(analyzer='word', ngram_range=(1, 3), min_df=0, stop_words='english')\ntfidf_matrix = tf.fit_transform(df['combined'])","0e98b85a":"tfidf_matrix","e8fe12af":"linear_similarities = linear_kernel(tfidf_matrix, tfidf_matrix)","81b87a4a":"linear_similarities.shape","15c21acf":"indices = pd.Series(df.index, index=df.title)\nindices.head()","60ea1f97":"def recommend(movie):\n    try:\n        idx = indices[movie]\n        similar_indices = linear_similarities[idx].argsort()[::-1][:20] \n        similar_items = [(df['title'][i], linear_similarities[idx][i]) for i in similar_indices] \n        return similar_items\n\n    except:\n        similar_items = []\n        n = len(indices[movie])\n        for idx in indices[movie]:\n            similar_indices = linear_similarities[idx].argsort()[::-1][:int(20\/n)] \n            similar_items.append([(df['title'][i], linear_similarities[idx][i]) for i in similar_indices]) \n        return similar_items","e3ff82c2":"data.directors.value_counts()","d8584e4a":"data[data.directors=='Alfred Hitchcock']","497780ab":"recommend('psycho')","7a17f394":"Now the last step.\n\nMaking a function which recommends the top 20 movies.\n\nOutput: list of tuple which contains movie title and score","a71c415a":"Make object of TfidfVectorizer.\n\nFit and transform the combined column to the TfidfVectorizer object.","5f73ad35":"Making linear kernel score for tfidf_matrix.","89b4b163":"# Have a look at the dataset","8f0f1e7b":"Our results contain movie directed by Alfred Hitchcock ex:'birds the', 'vertigo', 'north by northwest' etc...\n\nThat's it we have implemented a simple movie recommendation system.","42c6198e":"Extract movies directed by Alfred Hitchcock.\n\nThen check the result by recommending one of the movie directed by Alfred Hitchcock. Let's say recommend 'psycho' movie.","7007391a":"Time to recommend some movie.","787f16ee":"Now we have to create a new column 'combined' which contains the 'director', 'actors', 'genres' of each movie. For this I used a function 'combine_feature'.","b21ab689":"For content based recommendation we need 'directors','actors','genres' columns.\nThere for if all the rows are NaN for these three columns we will drop that rows.\nThen reset the index so that index range for 0,1,...n-1.","63a07662":"Now we will replace each NaN with empty string ''.","aa84ca53":"Now the dataset has no NaN value.\n\nNow we have to drop the duplicate movies from the data.","4f27d867":"Apply the 'combine_feature' to each row.\n\nLower each string of combined column.\n\nRemove any punctuation from each string in combined","076470b2":"Now the dataset is ready.\n\nWe need title and combined columns.","080a737d":"Upvote if you like this notebook.","2f200504":"Making series which contains title of movie and their index value."}}