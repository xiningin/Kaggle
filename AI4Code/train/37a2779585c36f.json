{"cell_type":{"01da38f5":"code","ea0a6f18":"code","670be13c":"code","13730ad1":"code","bf1ab8ec":"code","91fa3225":"code","59b94a94":"code","2feaee12":"code","458d284f":"code","2fad98a0":"code","6467e22a":"code","95e00e4a":"code","9e459c71":"code","2a7f1221":"code","47cfd47d":"code","93e0e8cf":"code","b8f19ca3":"code","bd2c270f":"code","7b78dac5":"code","ca1aa512":"code","cb015bc4":"code","2d84c18a":"markdown","87536121":"markdown","1574bc0b":"markdown","fbce43fa":"markdown","ca208146":"markdown","7cc6db85":"markdown","6e75f5d5":"markdown","d0d0dfc5":"markdown","0d74b517":"markdown","f5394701":"markdown","bc42dc83":"markdown","7e9a0c6f":"markdown","3fe7afbb":"markdown","cfd271ac":"markdown","2a3610b3":"markdown","5288d6e3":"markdown","e937c39e":"markdown","ee99e3e0":"markdown"},"source":{"01da38f5":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nimport xgboost as xgb\nimport matplotlib.pyplot as plt\nimport seaborn as sn\n\n%matplotlib inline","ea0a6f18":"df = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")\ndf = df.drop(['Unnamed: 32'], axis=1)\ndf.head()","670be13c":"df.dtypes","13730ad1":"df.isnull().sum()","bf1ab8ec":"df[\"diagnosis\"].unique()","91fa3225":"le = LabelEncoder()\nle.fit([\"M\",\"B\"])\ndf[\"diagnosis\"] = le.transform(df[\"diagnosis\"])","59b94a94":"df.head()","2feaee12":"X = df[df.columns[df.columns!=\"diagnosis\"]]\nX.head()","458d284f":"y = df[\"diagnosis\"]\ny.head()","2fad98a0":"dmatrix = xgb.DMatrix(data = X,label = y)","6467e22a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state = 123, stratify = y)","95e00e4a":"xgb_css = xgb.XGBClassifier(n_estimators = 100,objective = \"reg:logistic\",colsample_bytree = 0.3,learning_rate = 0.1, max_depth = 5,alpha =10)","9e459c71":"xgb_css.fit(X_train,y_train)","2a7f1221":"pred = xgb_css.predict(X_test)","47cfd47d":"#Evaluation\nfrom sklearn.metrics import confusion_matrix,classification_report\nimport itertools\ndef plot_confusion_matrix(cm,classes,\n                         normalize = False,\n                         title='Confusion Matrix',\n                         cmap = plt.cm.Blues):\n    if normalize:\n        cm = cm.astype('float')\/cm.sum(axis = 1)[:,np.newaxis]\n        print(\"After Normalization\")\n    else:\n        print(\"Without Normalization\")\n    print(cm)\n    plt.imshow(cm,interpolation='nearest',cmap = 'Wistia')\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks,classes,rotation = True,color='white')\n    plt.yticks(tick_marks,classes,rotation =True,color='white')\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max()\/2\n    for i,j in itertools.product(range(cm.shape[0]),range(cm.shape[1])):\n        plt.text(j,i,format(cm[i,j],fmt),\n                horizontalalignment = \"center\",\n                color = 'white' if cm[i,j]>thresh else \"black\")\n        \n    plt.tight_layout()\n    plt.xlabel(\"Predicted\",color='white',size=20)\n    plt.ylabel(\"True\",color='white',size=20)","93e0e8cf":"cnf_matrix=confusion_matrix(y_test,pred,labels=[0,1])\nnp.set_printoptions(precision = 2)\nplt.figure()\nplot_confusion_matrix(cnf_matrix,classes=['benign(0)','malignant(1)'],normalize=False,title='Confusion Matrix')","b8f19ca3":"print(classification_report(y_test,pred))","bd2c270f":"from sklearn.metrics import f1_score\nf1_score(y_test,pred,average='weighted')","7b78dac5":"params = {\"objective\":\"reg:logistic\",\"colsample_bytree\":\"0.3\",\"learning_rate\": \"0.1\",\"max_depth\":\"5\",\"alpha\":\"10\"}\ncv_results = xgb.cv(dtrain = dmatrix, params = params, nfold = 3,early_stopping_rounds =10,metrics=\"error\", as_pandas = True, seed = 123)","ca1aa512":"cv_results.head()","cb015bc4":"print((cv_results[\"test-error-mean\"]).tail(1))","2d84c18a":"# Feature and Target Set","87536121":"# K-fold Cross Validation using xgb.cv()","1574bc0b":"# <center> Breast Cancer Prediction using XGBoost <\/center>\n## <center> Authored by: Pratham Tripathi <\/center>\n\n# Contents:\n\n## <u>1.Aim:<\/u>\nTo predict whether the patient has malignant(1) or Benign(0) cells.\n## <u>2.Approach:<\/u> \nThe Approach was to build a classifier that could efficient predict the same.\n## <u>3.Model:<\/u> \nThe model used here is XGBoost Classifier.\n## <u>4.About the model:<\/u> \nXGBoost is an optimized distributed gradient boosting library designed to be highly efficient, flexible and portable. It implements machine learning algorithms under the Gradient Boosting framework. XGBoost provides a parallel tree boosting (also known as GBDT, GBM) that solve many data science problems in a fast and accurate way.\nThus, with proper tuning, the model could easily identify the significant columns on its own and build effective and generalized model easily.","fbce43fa":"# Classification Report","ca208146":"# Confusion Matrix","7cc6db85":"# CV Results","6e75f5d5":"# F1 Score of the Model","d0d0dfc5":"# XGBoost Classifier Model","0d74b517":"# Creating DMatrix for XGBClassifier","f5394701":"# Predciting Outcomes","bc42dc83":"# Data Analysis ","7e9a0c6f":"# About Test-error-Mean and Accuracy\nThe model has very less loss (O.06) and a high F1 Score (0.96)\nHence, the model is highly efficient in this case.","3fe7afbb":"# Last Validation Score","cfd271ac":"# Reading The CSV file","2a3610b3":"# Training the Model","5288d6e3":"# Stratified Spliting of Data","e937c39e":"# Label Encoding \"Diagnosis\"","ee99e3e0":"# Importing Major Libraries"}}