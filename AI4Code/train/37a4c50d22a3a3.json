{"cell_type":{"c2d1d7e9":"code","987b4c07":"code","3e0d2b9b":"code","883205eb":"code","b1721515":"code","dac77a7c":"code","c219053b":"code","dad73bca":"code","9e9293c9":"code","d15a8661":"code","1a784237":"code","fcb61bfe":"code","61db81f9":"code","869f901a":"code","7c66d5ef":"code","f048ba13":"code","3890c229":"code","7abebc7b":"code","42d86ac4":"code","c3f4ea96":"code","b8141d14":"code","037209d2":"code","df6f4488":"code","66e9007f":"code","94a2d171":"code","fb764eec":"code","79751fca":"code","ae65ac94":"code","8e90f693":"code","78ae8bc6":"code","ab2b902a":"code","a8af1455":"code","5e7ac91f":"code","075398cf":"code","ec322c3f":"code","d4c34b86":"code","ac654298":"code","41fc9dc6":"code","bc53bf5f":"code","c4bb4950":"code","3d11a4b5":"code","acaca8da":"code","d196ffad":"code","fd0ab336":"code","cc5ff5b4":"code","2633bfd1":"code","3d5a5523":"code","70b0ae32":"code","7f5245b7":"code","b102bcdb":"code","37a51204":"code","93c886d5":"code","13477b53":"code","1b768325":"code","0b431db0":"code","8c314c15":"code","f0b293d8":"code","73c56639":"code","da4c691d":"code","fcd09b8a":"code","41841503":"code","3241ce98":"markdown","64a148a1":"markdown","adb450d7":"markdown","8b71b0f0":"markdown","eec65aed":"markdown","1d6f90c5":"markdown","fdc9d5d7":"markdown","ea88cd15":"markdown","5bf5bb69":"markdown","6d4d3a30":"markdown","be827e36":"markdown","f164061f":"markdown","cbfdbf4f":"markdown","21af432c":"markdown","1ae89b7b":"markdown","e882b583":"markdown","0d61cbf6":"markdown","406c66d7":"markdown","004c249c":"markdown","cc72409f":"markdown","dc187b55":"markdown","8d4c33a3":"markdown","e913183f":"markdown","a530f05d":"markdown","fe1dd8d8":"markdown","456badb4":"markdown","127fc351":"markdown","d39db1b9":"markdown","1b6f38d1":"markdown","9d2996fc":"markdown","930b91d1":"markdown","5444dcc5":"markdown"},"source":{"c2d1d7e9":"import numpy as np \nimport pandas as pd \nfrom matplotlib import pyplot as plt\nimport seaborn as sns","987b4c07":"pd.set_option('display.max.rows', 50)","3e0d2b9b":"# The Paycheck Protection Program is a $669-billion business loan program established by the 2020 US Federal government \n# Coronavirus Aid, Relief, and Economic Security Act to help certain businesses, self-employed workers, sole proprietors,\n# certain nonprofit organizations, and tribal businesses continue paying their workers\n# source: wikipedia.com\n\n# The files\n\n# File acquisition date - July 8, 2020\nfile_150kplus = \"..\/input\/ppp-data-150k-plus\/PPP_Data_150k_plus.csv\"\n\n# File acquisition date - July 7, 2020\nfile_150kless = \"..\/input\/ppp-loan-data\/foia_less_than_150k.csv\"","883205eb":"df = pd.read_csv(file_150kplus)  # Loans above $150,000\ndf2 = pd.read_csv(file_150kless) # Loans below $150,000","b1721515":"df.head(50)","dac77a7c":"# Adding BusinessName and Address column to df2\ndf2['BusinessName'] = ['-' for i in range(df2.count().max())]\ndf2['Address'] = ['-' for i in range(df2.count().max())]\n\n# Renaming LoanAmount to LoanRange\ndf2.rename(columns={'LoanAmount': 'LoanRange'}, inplace=True)","c219053b":"# Dropping unnecessary column in df2\ndf2.drop('Unnamed: 0', axis=1,inplace=True)\n\n# Reordering tables to suit df\ndf2 = df2[[i for i in df.columns]]","dad73bca":"total = max(df.count())\nprint(f\"The total number of items that should be in each df column is {total}.\")\n\n# Getting an idea of missing values\n# print()\n# print(df.count())","9e9293c9":"total2 = max(df2.count())\nprint(f\"The total number of items that should be in each df2 column is {total2}.\")\n\n# Getting an idea of missing values\n# print()\n# print(df2.count())","d15a8661":"# df.dtypes","1a784237":"# Missing business names are renamed 'ommited'.\ndf['BusinessName'].replace(np.NaN, 'Omitted', inplace=True)\ndf['BusinessName'].replace('-', 'Omitted', inplace=True)\n\ndf2['BusinessName'].replace(np.NaN, 'Omitted', inplace=True)\ndf2['BusinessName'].replace('-', 'Omitted', inplace=True)\n\n# Missing JobRetained data is filled as 0.\ndf['JobsRetained'].replace(np.NaN, 0, inplace=True)\ndf2['JobsRetained'].replace(np.NaN, 0, inplace=True)\n\n# Replacing 0 with them mean value in JobRetained column.\ndf['JobsRetained'].replace(0, round(df['JobsRetained'].mean()), inplace=True)\ndf2_mean = df2['JobsRetained'].mean()\nprint(df2_mean)\ndf2['JobsRetained'].replace(0, round(df2_mean), inplace=True)\n","fcb61bfe":"df_new = pd.concat([df,df2])","61db81f9":"df_new.count()","869f901a":"# Getting an understanding of missing data in RaceEthnicity column.\n\nprint(f\"There are {df_new['RaceEthnicity'][df_new['RaceEthnicity'] == 'Unanswered'].count()} missing values in the RaceEthnicity column.\")","7c66d5ef":"# Unit testing if the columns below have no missing values\nprint(f'BussinessName: {df_new[\"BusinessName\"].count()} items')\nprint(f'JobsRetained: {df_new[\"JobsRetained\"].count()} items')\n\ndf[\"BusinessName\"].count() == df[\"JobsRetained\"].count() == total","f048ba13":"notable = pd.concat([df[df['BusinessName'].str.contains('YEEZY')], \n                     df[df['BusinessName'].str.contains('CARDONE TRAINING')], \n                     df[df['BusinessName'].str.contains('CARDONE REAL ESTATE')]])\nnotable","3890c229":"df_new.dtypes","7abebc7b":"# New DataFrame\ndf_i = df_new[['LoanRange', 'JobsRetained']]\ndf_i['LoanRange'] = df_i['LoanRange'].astype(str)\n\n# df_.sort_values(by='LoanRange', ascending=True, inplace=True)\n\ndf_ii = df_new[['LoanRange', 'JobsRetained']] \n\n# Renaming df_i's column\ndf_i.columns = ['LoanRange', 'Jobs Retained - AVG']","42d86ac4":"# Grouping data by Loan Category for data extraction\ndf_group = df_i.groupby(['LoanRange'], as_index=False)\n\n# Extracting mean job(s) retained for each loan category.\nmean_jobs_retained = df_group.mean()\nmean_jobs_retained.sort_values(by='LoanRange', ascending=False, inplace=True) # sorted to ensure shell's LoanRange column matches\n# print(mean_jobs_retained)\n\n# Extracting sum of job(s) retained by each loan category.\nsum_jobs_retained = df_group.sum()\nsum_jobs_retained.columns = ['LoanRange', 'Total Jobs Retained']\nsum_jobs_retained.sort_values(by='LoanRange', ascending=False, inplace=True) # sorted to ensure shell's LoanRange column matches\n# print(sum_jobs_retained)\n\nno_companies_eachcategory = df_i['LoanRange'].value_counts(ascending=True).to_frame()\nno_companies_eachcategory.columns = ['No of Applicants | Recipients']\nno_companies_eachcategory.index.name = 'index'\nno_companies_eachcategory.sort_values(by='index', ascending=False, inplace=True) # sorted to ensure shell's LoanRange column matches\n# print(no_companies_eachcategory)\n\n# Checking if the above DataFrames are equally ordered\nprint(mean_jobs_retained.LoanRange.to_list() \n      == sum_jobs_retained.LoanRange.to_list() \n      == no_companies_eachcategory.index.to_list())\n\n# Completing informative table as shell.\nshell = pd.DataFrame({'LoanRange': mean_jobs_retained.LoanRange.to_list()})\nshell['No of Applicants | Recipients'] = no_companies_eachcategory['No of Applicants | Recipients'].to_list()\nshell['Jobs Retained - AVG'] = mean_jobs_retained['Jobs Retained - AVG'].to_list()\nshell['Total Jobs Retained'] = sum_jobs_retained['Total Jobs Retained'].to_list()","c3f4ea96":"above_150k = shell[:5][::-1].reset_index(drop=True)\nabove_150k","b8141d14":"# Removing loan amount of '-199659'. It's possibly loan repayment or error in data entry.\nshell.drop(424229, axis=0, inplace=True)\n\nbelow_150k = shell[5:][::-1].reset_index(drop=True)\nbelow_150k","037209d2":"summary_below_150k = pd.DataFrame() # summary of loans below $150k\nsummary_below_150k['LoanRange'] = ['f $1 - 150,000']\nsummary_below_150k['No of Applicants | Recipients'] = below_150k['No of Applicants | Recipients'].sum()\n\nsummary_below_150k['Jobs Retained - AVG'] = below_150k['Total Jobs Retained'].sum() \/ (df2['JobsRetained'].count() - 1)\n# 1 was subtracted from the denominator due to entry drop in the cell above\n\nsummary_below_150k['Total Jobs Retained'] = below_150k['Total Jobs Retained'].sum()\n# print(df2['JobsRetained'].sum())\n\nsummary_all_loans = pd.concat([above_150k, summary_below_150k])\nsummary_all_loans.reset_index(drop=True, inplace=True)\nsummary_all_loans","df6f4488":"(summary_all_loans['No of Applicants | Recipients'].iloc[:3].sum()\/summary_all_loans['No of Applicants | Recipients'].sum()) * 100","66e9007f":"# QUICK STATS\n\n# COVID-19 categorised as a pandemic = March 11, 2020 # source: https:\/\/time.com\/5791661\/who-coronavirus-pandemic-declaration\/\n# PPP Application Start Date = April 3, 2020          # source: https:\/\/home.treasury.gov\/system\/files\/136\/PPP--Fact-Sheet.pdf\n# PPP Application Deadline (original) = June 30, 2020 # source: https:\/\/www.investopedia.com\/your-guide-to-the-paycheck-protection-program-ppp-and-how-to-apply-4802195\n# PPP Deadline Extension signed = July 4, 2020        # source: https:\/\/www.investopedia.com\/your-guide-to-the-paycheck-protection-program-ppp-and-how-to-apply-4802195\n# Date of data acquisition = July 8, 2020             # source: file directory info\n\nus_population_jan_2020 = 329227746                    # source: https:\/\/en.wikipedia.org\/wiki\/Demographics_of_the_United_States\nus_population_july10_2020 = 329926866                 ## preferred - source: https:\/\/www.census.gov\/popclock\/\n\nus_labor_force_feb_2020 = 164546000                   # source: http:\/\/www.dlt.ri.gov\/lmi\/laus\/us\/usadj.htm\nus_unemployment_rate_feb_2020 = 3.5\/100               # source: http:\/\/www.dlt.ri.gov\/lmi\/laus\/us\/usadj.htm\n\nus_labor_force_july_2020 = 159932000                  # source: http:\/\/www.dlt.ri.gov\/lmi\/laus\/us\/usadj.htm\nus_unemployment_rate_july_2020 = 11\/100               # source: http:\/\/www.dlt.ri.gov\/lmi\/laus\/us\/usadj.htm\n\nus_unemployed_july_2020 = int(us_unemployment_rate_july_2020 * us_labor_force_july_2020)\n\n# US STATS\nprint(f\"US population           - July, 2020: {us_population_july10_2020:,}\")\nprint(f\"US labor force          - July, 2020: {us_labor_force_july_2020:,}\")\nprint(f\"Percentage unemployed   - July, 2020: {us_unemployment_rate_july_2020 * 100}%\")\nprint(f\"No of people unemployed - July, 2020: {us_unemployed_july_2020:,}\")\n\n# GUAGING PRE-PPP PLAUSIBLE LAYOFFS.\nprint()\nprint(f\"Effects of loans received from Paycheck Protection Program:\")\ntotal = int(summary_all_loans['Total Jobs Retained'].sum())\nprint(f\"1a. Total number of jobs retained - As at July 10, 2020: {total:,} jobs\")\n\nif_all_layedoff = ((us_unemployed_july_2020 + total)  \/ us_labor_force_july_2020) * 100\n\nprint(f\"1b. If the Paycheck Protection Program wasn't created and all applicants layedoff all their employees, {if_all_layedoff:.2f}% \"\n      f\"of the labor force would be unemployed. i.e {us_unemployed_july_2020 + total:,} people.\")\n\n# STATS OF RECIPIENTS OF $1M AND BELOW.\none_mill_below_rec = (summary_all_loans['No of Applicants | Recipients'].iloc[3:6].sum()  \/ summary_all_loans['No of Applicants | Recipients'].sum()) * 100\n\nprint()\nprint(f\"2a. Small employers: {(one_mill_below_rec):.2f}% of applicants.\")\n\nretained_one_mill_below_recipients = int(summary_all_loans['Total Jobs Retained'].iloc[3:6].sum())\n\nprint(f\"2b. Jobs retained by small employers: {retained_one_mill_below_recipients:,} jobs\")\n\npercentjobs_retained_one_mill_below = (summary_all_loans['Total Jobs Retained'].iloc[3:6].sum() \/ summary_all_loans['Total Jobs Retained'].sum()) * 100\nprint(f\"2c. %Jobs retained by small employers: {percentjobs_retained_one_mill_below}%\")\n\n\n# STATS OF RECIPIENTS OF $1M AND ABOVE.\nprint()\nprint(f\"3a. Large employers: {(100 - one_mill_below_rec):.2f}% of applicants.\")\nprint(f\"3b. Jobs retained by large employers: {int(total - retained_one_mill_below_recipients):,} jobs.\")\nprint(f\"3c. %Jobs retained by large employers: {100 - percentjobs_retained_one_mill_below}%\")\n\nprint('Note that large employers refers to the large spenders who recieved loans beyond $1m and employ between 117 and 344 people on \\n'\n     'average while the small employers refers to the small spenders who received loans amounting to $1m & below and employ between 5 and 56 people on average.')\n\n# JOBS RETAINED BY EACH CATEGORY OF LOAN RECIPIENT\nprint()\nprint(f\"4. Jobs retained by each category of loan recipients:\")\n\ngroups = summary_all_loans['LoanRange'].to_list()\nretained = summary_all_loans['Total Jobs Retained'].to_list()\ngroups_dict = {}\n\nfor num, i in enumerate(groups):\n    groups_dict[f\"Category {i[:1].upper()} ({i[2:]})\"] = f\"{int(retained[num])}\"\n    \nfor i in groups_dict.items():\n    print(f\"{i[0]}: {int(i[1]):,} jobs i.e {(int(i[1]) \/ total) * 100:.2f}%\")\n\n\n# Jobs retained by Non Profit institutions\nprint()\nnon_profit_retained = df[df['NonProfit'] == 'Y']['JobsRetained'].sum()\nprint(f\"NonProfits retained {int(non_profit_retained):,} jobs\")\n\n# Non Profit's percentage of total\nnon_profit_percentage = (non_profit_retained \/ total) * 100\nprint(f\"Non Profit's retained {non_profit_percentage:.2f}% of jobs.\")\n\n# Number of recipients\nprint()\nabove150k_recipients = len(df['BusinessName'].unique())\nprint(f\"More than {above150k_recipients:,} businesses have received loans above $150,000.\")\n\napplications_150kbelow = df2['BusinessName'].count()\napplications_150kabove = df['BusinessName'].count()\nprint(f\"There've been upto {applications_150kbelow:,} applications for Paycheck Protection Program loans below $150,000.\")\nprint(f\"Overall, {applications_150kbelow + applications_150kabove:,} applications were made for the PPP loans.\")\n\n# EMPLOYERS \nprint()\nlarge_loans_rec = summary_all_loans.loc[0:3, 'No of Applicants | Recipients'].sum()\nsmall_loans_rec = summary_all_loans.loc[3:6, 'No of Applicants | Recipients'].sum()\n\nprint(f\"Total number of large employers: {large_loans_rec:,}\")\nprint(f\"Total number of small employers: {small_loans_rec:,}\")\nprint(f\"Small employer:Large employers - There are {int(round(small_loans_rec \/ large_loans_rec))} small employers for every large employer. \")","94a2d171":"# Functions to plot small or big sized charts\n\ndef small_chart(plot):\n    plot.rcParams.update(plt.rcParamsDefault)\n    \ndef big_chart(plot):\n    parameters = {'xtick.labelsize': 50, 'ytick.labelsize': 50, 'axes.labelsize':100, 'legend.title_fontsize':50, 'axes.titlesize':150}\n    plot.rcParams.update(parameters)","fb764eec":"small_chart(plt)\nsns.barplot('LoanRange', 'Jobs Retained - AVG', data=summary_all_loans)\nplt.xticks(rotation=90)\nplt.title('How many jobs were retained by each Loan Group on average?')\nplt.xlabel('Loan Range')\nplt.ylabel('Jobs Retained - AVG')\nplt.show()","79751fca":"small_chart(plt)\nsns.barplot('LoanRange', 'Total Jobs Retained', data=summary_all_loans)\nplt.xticks(rotation=90)\nplt.title('How many jobs in total were retained by each Loan Group?')\nplt.xlabel('Loan Range')\nplt.ylabel('Total Jobs Retained')\nplt.show()","ae65ac94":"small_chart(plt)\nsns.barplot('LoanRange', 'No of Applicants | Recipients', data=summary_all_loans)\nplt.xticks(rotation=90)\nplt.title('How many businesses applied for each Loan category?')\nplt.xlabel('Loan Range')\nplt.ylabel('No of Applicants | Recipients')\nplt.show()","8e90f693":"# Businesses whose names appear more than once.\n# Note that they could be different businesses with the same name except in some:\n\nall_businesses = df['BusinessName'].to_list()\n\n# removing missing values\nbusinesses_minus_omitted = df[df['BusinessName'] != 'Omitted']\nbusinesses_minus_omitted = businesses_minus_omitted[businesses_minus_omitted['BusinessName'] != '-']\n\n\nbusinesses_minus_omitted.columns.name = 'S\/N'\nbusinesses_duplicated = businesses_minus_omitted[businesses_minus_omitted.duplicated(subset=['BusinessName'], keep=False)]\nbusinesses_duplicated.sort_values(by='BusinessName', ascending=True, inplace=True)\n\napplied_more_than_once = len(businesses_duplicated['BusinessName'].unique())\n\nprint(f\"Upto {applied_more_than_once} businesses (with the same name) applied more than one time.\")\n\n# businesses_duplicated.head(50)","78ae8bc6":"num_nonprofit = df_new[df_new['NonProfit'] == 'Y']['NonProfit'].count()\nprint(f'Upto {num_nonprofit:,} NonProfits applied for the PPP loan.')","ab2b902a":"#### NON PROFITS AND FOR PROFITS\n\ncategory_list = ['a $5-10 million', 'b $2-5 million', 'c $1-2 million', 'd $350,000-1 million', 'e $150,000-350,000', 'f $1 - 150,000']\n\nnonprofit_no = {}\n\nfor num, i in enumerate(category_list):\n    result = df[df['LoanRange'] == i]['NonProfit'].count()\n    nonprofit_no[i[:1]] = result\n    \nprint(nonprofit_no)\n\nnonprofit_jobs_retained = {}\n\nfor num, i in enumerate(nonprofit_no):\n    result_ = df[df['LoanRange'] == category_list[num]]\n    result = int(result_[result_['NonProfit'] == 'Y']['JobsRetained'].sum())\n    nonprofit_jobs_retained[i] = result\n    \nprint(nonprofit_jobs_retained)","a8af1455":"#Prepping rank DataFrame\nlenders = df_new['Lender'].value_counts().to_frame()\nlenders.columns = ['No of Loans']\n\ndf_lenders = pd.DataFrame({\"Lender's Name\": [i for i in lenders.index],\n                         \"No of Loans\": [i for i in lenders['No of Loans']]})\n\n# Getting number of lenders and loans.\nnum_of_lenders = len(df['Lender'].unique())\nnum_of_loans = df_new['Lender'].value_counts().sum()\n\n# Presenting number of lenders and loans.\nprint(f\"{num_of_lenders} lenders processed {num_of_loans} loans.\")\n\nprint()\nprint('Top 5 lenders')\ndf_lenders.head()","5e7ac91f":"big_chart(plt)\nplt.figure(figsize=(100,75))\nsns.barplot(\"Lender's Name\", 'No of Loans', data=df_lenders[:51])\nplt.xticks(rotation=90)\nplt.title('How many Paycheck Protection loans did banks lend out?')\nplt.xlabel('Bank Name')\nplt.ylabel('No of loans')\nplt.show()","075398cf":"group_a = df[df['LoanRange'] == 'a $5-10 million']\n# group_a.describe(include='all')\nhighest_groupa_lenders = group_a['Lender'].value_counts().to_frame()\nhighest_groupa_lenders.columns = ['No of $5m+ loans']\ntop_5mplus = pd.DataFrame({\"Lender's Name\": [i for i in highest_groupa_lenders.index],\n                          \"No of Loans\": [i for i in highest_groupa_lenders['No of $5m+ loans']]})\ntop_5mplus.head(15)","ec322c3f":"plt.figure(figsize=(100,75))\nsns.barplot(\"Lender's Name\", 'No of Loans', data=top_5mplus[:50])\nplt.xticks(rotation=90)\nplt.title('How many $5m+ Paycheck Protection loans did banks lend out?')\nplt.xlabel('Bank Name')\nplt.ylabel('No of loans')\nplt.show()","d4c34b86":"group_b = df[df['LoanRange'] == 'b $2-5 million']\n# group_b.describe(include='all')\nhighest_groupb_lenders = group_b['Lender'].value_counts().to_frame()\nhighest_groupb_lenders.columns = ['No of $2-5m loans']\ntop_2m5m = pd.DataFrame({\"Lender's Name\": [i for i in highest_groupb_lenders.index],\n                          \"No of Loans\": [i for i in highest_groupb_lenders['No of $2-5m loans']]\n                          })\ntop_2m5m.head(15)","ac654298":"plt.figure(figsize=(100,75))\nsns.barplot(\"Lender's Name\", 'No of Loans', data=top_2m5m[:50])\nplt.xticks(rotation=90)\nplt.title('How many $2m-5m Paycheck Protection loans did banks lend out?')\nplt.xlabel('Bank Name')\nplt.ylabel('No of loans')\nplt.show()","41fc9dc6":"approvals_general = pd.DataFrame({'Date of Approval': df_new['DateApproved'].value_counts().index.to_list(),\n                                  'No of Approvals': df_new['DateApproved'].value_counts().to_list()})\nplt.figure(figsize=(100,75))\nplt.xticks(rotation=90)\nsns.barplot(approvals_general['Date of Approval'], approvals_general['No of Approvals'])\nplt.title('Determining the most active and least active days of approvals')\nplt.ylabel('No of loans approved')\nplt.show()","bc53bf5f":"approvals_general.sort_values(by='Date of Approval', inplace=True)\nplt.figure(figsize=(100,75))\nplt.xticks(rotation=90)\nsns.barplot(approvals_general['Date of Approval'], approvals_general['No of Approvals'])\nplt.title('How all loan approvals played out over time.')\nplt.ylabel('No of loans approved')\nplt.show()","c4bb4950":"approvals_early = approvals_general[approvals_general['Date of Approval'] < '04\/13\/2020']['No of Approvals'].sum()\napplications_early  = approvals_early\n\ntotal_applications = approvals_general['No of Approvals'].sum()\n\npercent_applications_early = (applications_early \/ total_applications) * 100\n\nprint(f\"Overall, {percent_applications_early:.2f}% of all businesses applied early i.e within 9 days of the program's commencement.\")","3d11a4b5":"frame_after_412 = approvals_general['Date of Approval'] > '04\/12\/2020'\nframe_before_503 = approvals_general['Date of Approval'] < '05\/03\/2020'\n\napprovals_peak_periods = approvals_general[(frame_after_412) & (frame_before_503)]['No of Approvals'].sum()\n\ntotal_applications = approvals_general['No of Approvals'].sum()\n\npercent_applications_peakperiods = (approvals_peak_periods \/ total_applications) * 100\n\nprint(f\"Overall, {percent_applications_peakperiods:.2f}% of all businesses applied during the peak periods i.e between April 13 and May 3rd.\")","acaca8da":"approvals_late = approvals_general[approvals_general['Date of Approval'] > '06\/22\/2020']['No of Approvals'].sum()\napplications_late = approvals_late\n\ntotal_applications = approvals_general['No of Approvals'].sum()\n\npercent_applications_late = (applications_late \/ total_applications) * 100\n\nprint(f\"Overall, {percent_applications_late:.2f}% of all businesses applied late i.e within 8 days to June 30.\")","d196ffad":"# Prepping group e DataFrame\ne = df2.copy()\ne['LoanRange'] = 'f $1 - 150,000'\n# e.head()","fd0ab336":"# POPULATING doa_dict\ndoa_dict = {} # to contain DataFrames of each loan group\n\n    # Using loan group names from category_list to map the DataFrames\nfor i in category_list:\n    if i[0] in 'abcde':\n        doa_dict[i] = df[df['LoanRange'] == i]\n    elif i[0] == 'f':\n        doa_dict[i] = e[e['LoanRange'] == i]\n\n# Accounting for number of loans approved on the most active and least active days of approval.\napproved_415 = 0\napproved_607 = 0\n\nfor i in doa_dict.keys():\n    in_sight_dates = doa_dict[i][['DateApproved','Lender']]\n    in_sight_415_banks = in_sight_dates[in_sight_dates['DateApproved'] == '05\/03\/2020']\n    approved_415 += in_sight_415_banks['DateApproved'].count()\n    \n    in_sight_607_banks = in_sight_dates[in_sight_dates['DateApproved'] == '06\/07\/2020']\n    approved_607 += in_sight_607_banks['DateApproved'].count()\n    \nprint(f\"Overall, {approved_415:,} loans were approved on the peak day for approvals     - 04\/15\/2020\")\nprint(f\"Overall, {approved_607:,} loans were approved on the least active day for approvals   - 06\/07\/2020\")","cc5ff5b4":"doa_refined = {}\nfor i in doa_dict.keys():\n    \n    doa_value_count = doa_dict[i]['DateApproved'].value_counts()\n    \n    doa_refined[i] = pd.DataFrame({i + ' loan dates': doa_value_count.index.to_list(),\n                                          'No of Group ' + i + ' loans approved': doa_value_count.to_list()})\n    \npercent_early = []\npercent_peak = []\npercent_late = []\n\nfor i in doa_refined.keys():\n    \n    # APPLICATIONS\n    # early applications\n    approvals_early = doa_refined[i][doa_refined[i][i + ' loan dates'] < '04\/13\/2020']['No of Group ' + i + ' loans approved'].sum()\n    applications_early  = approvals_early\n    total_applications = doa_refined[i]['No of Group ' + i + ' loans approved'].sum()\n    percent_applications_early = (applications_early \/ total_applications) * 100\n    percent_early.append(percent_applications_early)\n    print(f\"{percent_applications_early:.2f}% of {i[2:]} PPP loan applicants applied early i.e within 9 days of the program's commencement.\")\n    \n    # peak periods applications\n    frame_after_412 = doa_refined[i][i + ' loan dates'] > '04\/12\/2020'\n    frame_before_503 = doa_refined[i][i + ' loan dates'] < '05\/03\/2020'\n    approvals_peak_periods = doa_refined[i][(frame_after_412) & (frame_before_503)]['No of Group ' + i + ' loans approved'].sum()    \n    total_applications = doa_refined[i]['No of Group ' + i + ' loans approved'].sum()\n    percent_applications_peakperiods = (approvals_peak_periods \/ total_applications) * 100\n    percent_peak.append(percent_applications_peakperiods)\n    print(f\"{percent_applications_peakperiods:.2f}% of {i[2:]} PPP loan applicants applied for the PPP loans during the peak periods i.e between April 13 and May 3rd.\")\n    \n    \n    # late applications\n    approvals_late = doa_refined[i][doa_refined[i][i + ' loan dates'] > '06\/22\/2020']['No of Group ' + i + ' loans approved'].sum()\n    applications_late = approvals_late\n    total_applications = doa_refined[i]['No of Group ' + i + ' loans approved'].sum()\n    percent_applications_late = (applications_late \/ total_applications) * 100\n    percent_late.append(percent_applications_late)\n    print(f\"{percent_applications_late:.2f}% of {i[2:]} PPP loan applicants applied late i.e within 8 days to June 30.\")\n    \n    doa_refined[i].sort_values(by=i + ' loan dates', inplace=True)\n    plt.figure(figsize=(100,75))\n    sns.barplot(doa_refined[i][i + ' loan dates'], doa_refined[i]['No of Group ' + i + ' loans approved'])\n    plt.xlabel('Dates of Approval')\n    plt.ylabel('No of loans approved')\n    plt.xticks(rotation=90)\n    plt.title('How approvals played out for ' + i[2:] + ' loans')\n    plt.show()\n    ","2633bfd1":"pd.set_option('display.width', 3000)","3d5a5523":"summary_all_loans['% Early Applications'] = percent_early\nsummary_all_loans['% Peak Period Applications'] = percent_peak\nsummary_all_loans['% Late Applications'] = percent_late\n\nsummary_all_loans.head(6)","70b0ae32":"titles = ['How many businesses made early loan applications?', \n          'What percentage of businesses applied during the peak period',\n         '% late applications for each loan group?']\n\nsmall_chart(plt)\nfor num, i in enumerate(summary_all_loans.columns[4:7]):\n    sns.barplot('LoanRange', i, data=summary_all_loans)\n    plt.title(titles[num])\n    plt.xticks(rotation=90)\n    plt.show()","7f5245b7":"lenders_pd_dict = {} # to be populated with 'Approval Dates' DataFrames of the top 5 lenders\n\n# Populating the lenders_pd_dict\nfor i in df_lenders[\"Lender's Name\"].to_list()[0:5]:\n\n    df_JP = df_new[df_new['Lender'] == i]\n    approvals_JP = pd.DataFrame({'Date of Approval': df_JP['DateApproved'].value_counts().index.to_list(),\n                                  'No of Approvals': df_JP['DateApproved'].value_counts().to_list()})\n    approvals_JP.sort_values(by='Date of Approval', inplace=True)\n    \n    \n    lenders_pd_dict[i] = approvals_JP\n    \n    peak_approval_day_info = lenders_pd_dict[i][lenders_pd_dict[i]['No of Approvals'] == lenders_pd_dict[i]['No of Approvals'].max()]\n    peak_approval_day = peak_approval_day_info.loc[0, 'Date of Approval']\n    peakday_no_approvals = peak_approval_day_info.loc[0, 'No of Approvals']\n    \n    print(f\"'{i}' approved {peakday_no_approvals:,} Paycheck Protection Program loans on it's peak day for approvals - {peak_approval_day}\")\n    \n    big_chart(plt)\n    \n    # charts\n    plt.figure(figsize=(100, 75))\n    sns.barplot(lenders_pd_dict[i]['Date of Approval'], lenders_pd_dict[i]['No of Approvals'])\n    plt.xticks(rotation=90)\n    plt.title('How ' + i + ' processed loans.')\n    plt.show()\n    \n    \n# approvals_JP.head(50)","b102bcdb":"# STATES LOANS BELOW $150,000k WENT - TOP 100 CITIES.\n\ncities_informative = df_new['State'].value_counts().to_frame()\ncities_informative.columns = ['No of Loans']\n\ncities_no_loans = pd.DataFrame({'States': cities_informative.index.to_list()[:51],\n                                'No of Loans': cities_informative['No of Loans'].to_list()[:51]})\n\ncities_total_loans_below150k_50 = df2[['State', 'LoanRange']].groupby(['State'], as_index=False).sum()[:51]\ncities_total_loans_below150k_50.sort_values(by='LoanRange', ascending=False, inplace=True)\n# cities_no_loans_below150k\n\ncities_info = [cities_no_loans, cities_total_loans_below150k_50]\ntitles = ['No of loans that went to each state - Top 50', '$1-150,000 loans that went to each state - Top 50']\n\n\nbig_chart(plt)\n\nfor num, i in enumerate(cities_info):\n    plt.figure(figsize=(100,75))\n    sns.barplot(i[i.columns[0]], i[i.columns[1]], data=i)\n    plt.title(titles[num])\n    plt.xticks(rotation=90)\n\n    plt.xlabel(i.columns[0])\n    plt.ylabel(i.columns[1])\n    if num == 1:\n        plt.ylabel('Loan Amount')\n    plt.show()","37a51204":"df_new['NAICSCode'] = df_new['NAICSCode'].astype(str)\ndf_new['NAICSCode'] = [i[:2] for i in df_new['NAICSCode'].to_list()]\ndf_new[df_new['NAICSCode'].isnull()] = '99'","93c886d5":"df_n = pd.read_csv('..\/input\/2017-naics-codes-summary\/2017_NAICS_Structure_Summary_Table .csv')","13477b53":"# Including Unclassified businesses in NAICSCodes  file. Source: https:\/\/classcodes.com\/naics-code-list\/\ndf_n.loc[25] = [99, 'Unclassified']","1b768325":"# Delicate\ndf_n.drop(0, axis=0, inplace=True)\ndf_n.rename({'Sector': 'NAICSCode', 'Name': 'Industry'}, axis=1, inplace=True)\ndf_n['NAICSCode'] = df_n['NAICSCode'].astype(str)\ndf_n['NAICSCode'] = [i[:2] for i in df_n['NAICSCode'].to_list()]\ndf_n.reset_index(drop=True, inplace=True)","0b431db0":"# Including the industries each business belongs to in df_new_industry\ndf_new_industry = pd.merge(df_new, df_n, on='NAICSCode', how='left')\ndf_new_industry = df_new_industry[['LoanRange', 'BusinessName', 'Address', 'City', 'State', 'Zip', 'NAICSCode', 'Industry', 'BusinessType', 'RaceEthnicity', 'Gender', 'Veteran', 'NonProfit', 'JobsRetained', 'DateApproved', 'Lender', 'CD']]\n","8c314c15":"df_new_industry['NAICSCode'].count()","f0b293d8":"df_new_industry_ = df_new_industry['Industry'].value_counts().to_frame()\ndf_new_industry_.columns = ['No of loans']","73c56639":"# Plotting \nbig_chart(plt)\nplt.figure(figsize=(100,75))\nplot = sns.barplot(df_new_industry_.index, df_new_industry_['No of loans'])\nplt.title('How many loans went to each industry?')\nplt.xticks(rotation=90)\nplt.xlabel('No of loans')\nplot.xaxis.label.set_size(50)\nplt.show()","da4c691d":"# Another delicate\n\ndf2_industry = df2.copy()\n\n# converting null values to 99 i.e unclassified\ndf2_industry[df2_industry['NAICSCode'].isnull()] = '99'\n\ndf2_industry['LoanRange'] = df2_industry['LoanRange'].astype(float)\ndf2_industry['NAICSCode'] = df2_industry['NAICSCode'].astype(str)\ndf2_industry['NAICSCode'] = [i[:2] for i in df2_industry['NAICSCode'].to_list()]\n\n# Merging files\ndf2_industry_ = pd.merge(df2_industry, df_n, on='NAICSCode', how='left')\n\n# Including the industries each business belongs to in df2_industry\ndf2_industry_ = df2_industry_[['LoanRange', 'BusinessName', 'Address', 'City', 'State', 'Zip', 'NAICSCode', 'Industry', 'BusinessType', 'RaceEthnicity', 'Gender', 'Veteran', 'NonProfit', 'JobsRetained', 'DateApproved', 'Lender', 'CD']]","fcd09b8a":"df2_industry_ii = df2_industry_[['Industry', 'LoanRange']].groupby(['Industry'], as_index=False).sum()\ndf2_industry_ii.sort_values(by='LoanRange', ascending=False, inplace=True)","41841503":"# Plotting \nbig_chart(plt)\nplt.figure(figsize=(100,75))\nplot = sns.barplot(df2_industry_ii.Industry, df2_industry_ii.LoanRange)\nplt.title('How much loans upto $150,000 went to each industry?')\nplt.xticks(rotation=90)\nplt.xlabel('Loan Amount')\nplot.xaxis.label.set_size(50)\nplt.show()","3241ce98":"**How each category of loan was processed over time**","64a148a1":"#### CONCATENATING THE FILES","adb450d7":"**How top five lenders processed loans.** <br>\nTop five lenders being lenders who processed the highest number of loans.","8b71b0f0":"#### Notable companies, how much they collected and other data.","eec65aed":"Determining the peak and least active loan approval days for all lenders","1d6f90c5":"DETERMINING HOW APPROVALS PLAYED OUT FOR EACH LOAN GROUP OVER TIME","fdc9d5d7":"#### APPLICATIONS\n\nIt is obvious from the general loan approval chart above that applications when through different phases:\n   - The early applications period : 04\/03\/2020 - 04\/12\/2020 (within 9 days of the program's commencement)\n   - The peak periods              : 04\/13\/2020 - 05\/03\/2020 (started when the SBA announced new guidelines for applications)\n   - The ease outs                 : 05\/04\/2020 - 06\/11\/2020\n   - The revamp period             : 06\/12\/2020 - Initial deadline; 06\/30\/2020\n   - Late applications             : 06\/22\/2020 - Initial deadline; 06\/30\/2020 (Within 8 days to the program's initial deadline)\n\n16. Overall, 17.45% of all businesses applied early i.e within 9 days of the program's commencement, 49.45% applied during the peak periods i.e between April 13 & May 3rd and 4.30% of all businesses applied late i.e within 8 days to June 30.","ea88cd15":"### THE LENDERS","5bf5bb69":"**Guaging applicant's behaviour for each loan category**","6d4d3a30":"### PREPPING INFORMATIVE DATAFRAME TO DRAW CONCLUSIONS","be827e36":"#### Dealing with missing columns in df2","f164061f":"LENDERS WHO PROCESSED THE HIGHEST NUMBER OF $5M+ LOANS - TOP 15","cbfdbf4f":"LENDERS WHO PROCESSED THE HIGHEST NUMBER OF LOANS - TOP 50","21af432c":"#### How much data are there in each column?","1ae89b7b":"What percentage of businesses applied early - within 9 days of the program's commencement?","e882b583":"<b>Businesses that applied more than once<\/b>","0d61cbf6":"How much loans upto $150,000 that went to each industry?","406c66d7":"CITIES","004c249c":"What percentage of businesses applied late i.e within 8 days to the initial deadline?","cc72409f":"#### Getting a feel for the number of items in Dataframe 1 and 2","dc187b55":"#### CONTINUED ANALYSIS OF APPLICANTS","8d4c33a3":"### WHERE DID THE MONEY GO? Analysis by <a  href='https:\/\/www.linkedin.com\/in\/daniel-o-27292b168\/'> Oyebolu Daniel. <\/a>","e913183f":"#### NON PROFITS","a530f05d":"#### DEALING WITH MISSING DATA IN DATAFRAME 1 AND 2.","fe1dd8d8":"INDUSTRIES","456badb4":"Summary for loans above $150k.","127fc351":"Summary for loans below $150k.","d39db1b9":"## ANALYSIS OF PAYCHECK PROTECTION PROGRAM DATA - (July 8, 2020) - Oyebolu Daniel.\n\n**First of all, from the tables in the analysis, businesses that spend less on monthly payroll mostly applied for the smaller Paycheck Protection loans, and vice versa.**\n\nAs a result of the fact that businesses that earn a lot could have small number of employees, I'll avoid calling them small businesses. That said, businesses that took out Paycheck Protection(PP) loans beyond \\\\$1million and employ upto 344 people on average will be called **'large employers'** while those who took out PP loans between 150k dollars & a million dollars and employ below 57 people on average will be termed **'small employers'**.\n<br>\n\nThis <a href='https:\/\/www.forbes.com\/sites\/brianthompson1\/2020\/04\/05\/how-to-calculate-payroll-costs-for-your-paycheck-protection-program-loan\/#52432aa93710'>Forbes article<\/a> details provides information on how the applicable Payroll Protection Program Loan should be calculated.  \n\n\nNow, the charts and tables in the analysis show the following:\n\n1. **Over 656,593 businesses received PPP loan above $150,000.**\n2. There've been upto 4,224,170 applications for Paycheck Protection Program loans below \\\\$150,000. Overall, 4,885,388    applications were made for PPP loans.\n3. **Large employers account for 1.69% of applicants while small employers account for 98.31% of applicants.**\n3. Upto 59,362,678 jobs were retained by the applicants.\n3. The lower the loan being applied for, the lower the number of people (avg) employed by the applying business and vice versa.\n4. Large employers have at least 117 employees on average while small employers have a maximum of 56 employees on average.\n5. Large employers retained more jobs per business when compared to small employers. However, small employers retained far more jobs than the large employers when aggregates are considered. To put that in perspective, small employers retained 32,910,814 more jobs than large employers. This is as a result of the number of businesses that applied for the smaller loans. They were so many... for every large employer who applied for the PPP loan, there were about 17 small employers.  All in all, **small employers retained 46,136,746 jobs while large employers retained  13,225,932 jobs**.\n6. Jobs retained by each category of loan recipients:\n    - Group A \\(\\$5-10 million\\)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 1,669,710 jobs i.e 2.81%.\n    - Group B \\(\\$2-5 million\\)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 5,322,692 jobs i.e 8.97%\n    - Group C \\(\\$1-2 million\\)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 6,233,530 jobs i.e 10.50%\n    - Group D \\(\\$350,000-1 million\\)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 11,255,084 jobs i.e 18.96%\n    - Group E \\(\\$150,000-350,000\\)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 11,268,041 jobs i.e 18.98% \n    - Group F \\(\\$1-150,000\\)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: 23,613,621 jobs i.e 39.78%\n\n7. Notable businesses that received over 2 million dollars in PPP loan include **YEEZY LLC and CARDONE TRAINING TECHNOLOGIES, INC**.\n\n8. Up to 181,680 nonprofits applied for the PPP loan. Also, nonprofits retained about 6% of total jobs retained.\n\n9. Excluding businesses whose names were not included in the PPP Loan data, **3734 businesses applied for the loan more than once.**\n\n#### The Lenders\n\n10. **4322 lenders processed 4,885,388 loans.**\n\n11. **Banks that lent out the highest number of loans:**\n    - Bank of America, National Association&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;334,761  loans\n    - JPMorgan Chase Bank, National Association&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;269,424 loans\n    \n    - Wells Fargo Bank, National Association&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;185,598 loans\n    - Celtic Bank Corporation&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t148,606 loans\n\t- Cross River Bank&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t134,472 loans\n\n12. **Banks that processed the highest number of \\\\$2m-\\$10m dollars loans:**<br>\n    - With the exception of 'Wells Fargo Bank, National Association', Celtic Bank and Cross River Bank, the banks above     including 'PNC Bank, National Association', KeyBank National Association, and 'Truist Bank d\/b\/a Branch Banking &       Trust Co' processed the highest number of \\\\$2m-\\\\$10m dollars loans. <br>\n    For \\\\$5m+ loans, Truist Bank processed the least at 137 loans while 'JPMorgan Chase, National Association'         processed the most at 276 loans. JPMorgan Chase Bank processed nearly 4 times more $5m+ loans and 5 times more           \\\\$2m-\\\\$5m loans when compared with Wells Fargo.  <br>\n    \n\n13. **Overall, May 3rd was the peak day for loan approvals. 516,044 loans applications were approved that day.** <br>\n    It should be noted that <a href='https:\/\/www.youtube.com\/watch?v=uS_4dUlQD2Q'>new guidelines for sole proprietors, partnerships, LLCs, and others was announced<\/a> by the **Small Businesses Administration (SBA) on April 14th and April 15th.** <br>\n\n    On the other hand, **the least active day for loan approvals was on the 7th of June**. 1,368 loans were           approved that day.\n    \n14. JP Morgan Chase & Co Bank's peak day for loan approvals was on 1st May, the day it got over 198,323 loans approved. Note that 2 days prior to the approvals, JP Morgan informed small business clients that it had <a href='https:\/\/www.reuters.com\/article\/health-coronavirus-jp-morgan-loans\/jpmorgan-received-almost-18-billion-in-ppp-loan-applications-bank-idUSL1N2CI0GP'>\"submitted roughly 220,000 applications that week to the Small Business Administration for the Paycheck Protection Program.\"<\/a><br>    \n\n15. Loan applications had the following phases different phases:\n   - The early applications period : 04\/03\/2020 - 04\/12\/2020 (within 9 days of the program's commencement)\n   - The peak periods              : 04\/13\/2020 - 05\/03\/2020 (started when the SBA announced new guidelines for applications)\n   - The ease outs                 : 05\/04\/2020 - 06\/11\/2020\n   - The revamp period             : 06\/12\/2020 - Initial deadline; 06\/30\/2020\n   - Late applications             : 06\/22\/2020 - Initial deadline; 06\/30\/2020 (Within 8 days to the program's initial deadline)\n\nOverall, 17.45% of all businesses applied early i.e within 9 days of the program's commencement, 49.45% applied during the peak periods i.e between April 13 & May 3rd and 4.30% of all businesses applied late i.e within 8 days to June 30.\n\n17. Large employers were more proactive in applying early for PPP loans than small employers. This is evident in the results from the analysis of the applicants' behaviours below i.e behaviour of applicants at the starting and ending period of the program.","1b6f38d1":"What percentage of businesses applied during the peak periods 04\/13\/2020 - 05\/03\/2020?","9d2996fc":"LENDERS WHO PROCESSED THE HIGHEST NUMBER OF \\\\$2M-$5m LOANS - TOP 15","930b91d1":"**APPROVALS**","5444dcc5":"#### HOW THE PROGRAM IMPACTED NUMBER OF JOBS RETAINED"}}