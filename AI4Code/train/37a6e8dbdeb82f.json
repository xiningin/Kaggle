{"cell_type":{"e1ea46b9":"code","1eba45b7":"code","b66f770a":"code","7cc138c4":"code","99c3f3f9":"code","c2231379":"code","f984be48":"code","aeee82c6":"code","79e7b953":"code","4515c787":"code","26924eb8":"code","3a54a17c":"code","b5b3aa0c":"code","f0615667":"code","62e7c780":"code","51d44c0f":"code","cbbf155f":"code","dca3ff21":"code","d05df91f":"code","8d341299":"code","4c7c2c80":"markdown","1609c242":"markdown","56490f1d":"markdown","2e5a72a4":"markdown","c0513efd":"markdown","0d8751d4":"markdown","ef24b48f":"markdown"},"source":{"e1ea46b9":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom keras.layers import Dense\nfrom keras.models import Sequential\nfrom matplotlib import pyplot as plt \nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split as tts","1eba45b7":"data = pd.read_csv('..\/input\/pima-indians-diabetes-database\/diabetes.csv')\ndata.describe()","b66f770a":"#Checking for 0's in columns. \nfor i in range(1,8):\n    flag = 0\n    check = data.iloc[:, i].values\n    for j in check:\n        if j == 0:\n            flag += 1\n    print(\"Column no : \" + str(i) + ' => |0| value : ' + str(flag))","7cc138c4":"#Replacing the 0's with mean of that column data.\ndata['Glucose'] = data['Glucose'].replace(0, data['Glucose'].mean())\ndata['BloodPressure'] = data['BloodPressure'].replace(0, data['BloodPressure'].mean())\ndata['SkinThickness'] = data['SkinThickness'].replace(0, data['SkinThickness'].mean())\ndata['Insulin'] = data['Insulin'].replace(0, data['Insulin'].mean())\ndata['BMI'] = data['BMI'].replace(0, data['BMI'].mean())","99c3f3f9":"#Correlation b\/w the data. \nsns.heatmap(data.corr(), annot = True, cmap = 'PiYG')   \nfig = plt.gcf()\nfig.set_size_inches(15,12)\nplt.show","c2231379":"data.hist(figsize=(15,12))","f984be48":"#Declaring features and labels for the model.\nfeatures = data.iloc[:, [1,4,5,6,7]]\nlabels = data.iloc[:, -1]","aeee82c6":"features","79e7b953":"labels","4515c787":"#Scaling the data.\nscaler = StandardScaler()\nfeatures = scaler.fit_transform(features)","26924eb8":"#Splitting the data.\nfeatures_train, features_test, labels_train, labels_test = tts(features, labels, random_state = 0)","3a54a17c":"features_train.shape","b5b3aa0c":"#Building the model.\nmodel = Sequential()\n#First Hidden layer.\nmodel.add(Dense(units = 3, kernel_initializer = 'uniform', activation = 'relu', input_dim = 5))\n#Second hidden layer.\nmodel.add(Dense(units = 3, kernel_initializer = 'uniform', activation='relu'))\n#Output layer.\nmodel.add(Dense(units = 1, kernel_initializer='uniform', activation='sigmoid'))\n#Compiling the NN.\nmodel.compile(optimizer = 'Adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","f0615667":"#Training the model. \nmodel.fit(features_train, labels_train, batch_size = 74, epochs = 100)","62e7c780":"#Checking on test data. \nx_pred = model.predict(features_test)\nx_pred = np.argmax(x_pred, axis = 1)\nconfusion_matrix(labels_test, x_pred)","51d44c0f":"history = model.fit(features_train,labels_train, validation_data = (features_test, labels_test), epochs = 100, batch_size = 64)","cbbf155f":"model.summary()","dca3ff21":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","d05df91f":"plt.xlabel('Epoch Number')\nplt.ylabel('Loss Magnitude')\nplt.plot(history.history['loss'])\nplt.show()","8d341299":"model.save('diabetes_nn.h5')","4c7c2c80":"#### Selecting the following features based on the insights gained by the heatmap :\n1. Glucose\n2. Insulin\n3. BMI\n4. Diabetes Pedigree Function\n5. Age","1609c242":"## Model Performance.","56490f1d":"## Gaining insights from data visualization.","2e5a72a4":"## Importing dependencies.","c0513efd":"## Building the Neural Network Model.","0d8751d4":"## Preparing data for the model","ef24b48f":"## Feature Engineering"}}