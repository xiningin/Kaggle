{"cell_type":{"03dd2635":"code","c8b218eb":"code","fc3969d9":"code","8519c929":"code","f879aee2":"code","bdf03561":"code","1fef155c":"code","81c89369":"code","957c2bb6":"code","2a5aa6cc":"code","f466be1f":"markdown"},"source":{"03dd2635":"!pip install pdpipe\n!pip install plotly\n!pip install calmap\n!pip install pycountry_convert","c8b218eb":"#created by Kamal Das\n\n#import required libraries\n\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport re\n\nfrom datetime import datetime\n\nfrom IPython.display import display\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n# for offline ploting\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)","fc3969d9":"#the data is sourced from Johns Hopkins GitHub repo\n\nconfirmed_link = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/\" \\\n                      \"csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv\"\nrecovered_link = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/\" \\\n                      \"csse_covid_19_time_series\/time_series_covid19_recovered_global.csv\"\ndeaths_link = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/\" \\\n             \"csse_covid_19_time_series\/time_series_covid19_deaths_global.csv\"\n                        \nconfirmed_df = pd.read_csv(confirmed_link)\nrecovered_df = pd.read_csv(recovered_link)\ndeaths_df    = pd.read_csv(deaths_link)\n\n\n# we drop and remove some unwanted columns; rename some column names\ndrop_col = [\"Province\/State\", \"Lat\", \"Long\"]\nrename_col= { \"Country\/Region\": \"Country\"}\n\nconfirmed_df = confirmed_df.rename(columns=rename_col).drop(columns=drop_col)\nrecovered_df = recovered_df.rename(columns=rename_col).drop(columns=drop_col)\ndeaths_df    = deaths_df.rename(columns=rename_col).drop(columns=drop_col)\n\n# we group regions in the same country together\n\nconfirmed_df2=confirmed_df.groupby(['Country'],as_index = False).sum()\nrecovered_df2=recovered_df.groupby(['Country'],as_index = False).sum()\ndeaths_df2=deaths_df.groupby(['Country'],as_index = False).sum()\nconfirmed_df2.head(10)\n","8519c929":"# We transpose the data\nrename_col= { \"Country\": \"Date\"}\nconfirmed_df5 = confirmed_df2.rename(columns=rename_col)\nconfirmed_df6= confirmed_df5.transpose()\nconfirmed_df6= confirmed_df6.rename(columns=confirmed_df6.iloc[0]).drop(confirmed_df6.index[0])\nconfirmed_df6.head(10)","f879aee2":"#We convert the panel data to a time series data\n\nconfirmed_df7 = confirmed_df6.unstack()\ndisplay(confirmed_df7.head())\nconfirmed_df7.tail(20)","bdf03561":"#We convert the panel data to a time series data\n\nconfirmed_df8 = confirmed_df7.reset_index()\nconfirmed_df8.columns = ['Country','Date','Confirmed']\nconfirmed_df8[\"Date\"]= pd.to_datetime(confirmed_df8[\"Date\"]) \nconfirmed_df9=confirmed_df8.sort_values(by=\"Date\", ascending=True)\ndisplay(confirmed_df9.head(10))\nconfirmed_df9.tail(10)","1fef155c":"#We plot the data using Plotly choropleth\n\nconfirmed_df10=confirmed_df9\nconfirmed_df10[\"Date\"]=confirmed_df10[\"Date\"].astype(str)\n\nchoro_map=px.choropleth(confirmed_df10, \n                    locations=\"Country\", \n                    locationmode = \"country names\",\n                    color=\"Confirmed\", \n                    hover_name=\"Country\", \n                    animation_frame=\"Date\"\n                   )\n\nchoro_map.update_layout(\n    title_text = 'Global Spread of Coronavirus Confirmed cases',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nchoro_map.show()","81c89369":"deaths_df5 = deaths_df2.rename(columns=rename_col)\ndeaths_df6= deaths_df5.transpose()\ndeaths_df6= deaths_df6.rename(columns=deaths_df6.iloc[0]).drop(deaths_df6.index[0])\n\n\ndeaths_df7 = deaths_df6.unstack()\ndeaths_df8 = deaths_df7.reset_index()\ndeaths_df8.columns = ['Country','Date','Deaths']\ndeaths_df8[\"Date\"]= pd.to_datetime(deaths_df8[\"Date\"]) \ndeaths_df9=deaths_df8.sort_values(by=\"Date\", ascending=True)\n\ndeaths_df10=deaths_df9\ndeaths_df10[\"Date\"]=deaths_df10[\"Date\"].astype(str)\n\nchoro_map=px.choropleth(deaths_df9, \n                    locations=\"Country\", \n                    locationmode = \"country names\",\n                    color=\"Deaths\", \n                    hover_name=\"Country\", \n                    animation_frame=\"Date\"\n                   )\n\nchoro_map.update_layout(\n    title_text = 'Global Coronavirus Deaths',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nchoro_map.show()\n\n","957c2bb6":"recovered_df5 = recovered_df2.rename(columns=rename_col)\nrecovered_df6= recovered_df5.transpose()\nrecovered_df6= recovered_df6.rename(columns=recovered_df6.iloc[0]).drop(recovered_df6.index[0])\n\n\nrecovered_df7 = recovered_df6.unstack()\nrecovered_df8 = recovered_df7.reset_index()\nrecovered_df8.columns = ['Country','Date','Recovered']\nrecovered_df8[\"Date\"]= pd.to_datetime(recovered_df8[\"Date\"]) \nrecovered_df9=recovered_df8.sort_values(by=\"Date\", ascending=True)\n\nrecovered_df10=recovered_df9\nrecovered_df10[\"Date\"]=recovered_df10[\"Date\"].astype(str)\n\nchoro_map=px.choropleth(recovered_df9, \n                    locations=\"Country\", \n                    locationmode = \"country names\",\n                    color=\"Recovered\", \n                    hover_name=\"Country\", \n                    animation_frame=\"Date\"\n                   )\n\nchoro_map.update_layout(\n    title_text = 'Global Coronavirus Recovered cases',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nchoro_map.show()\n\n","2a5aa6cc":"existing_df6=confirmed_df6 - deaths_df6 - recovered_df6\n\nexisting_df7 = existing_df6.unstack()\nexisting_df8 = existing_df7.reset_index()\nexisting_df8.columns = ['Country','Date','Existing']\nexisting_df8[\"Date\"]= pd.to_datetime(existing_df8[\"Date\"]) \nexisting_df9=existing_df8.sort_values(by=\"Date\", ascending=True)\nexisting_df10=existing_df9\nexisting_df10[\"Date\"]=existing_df10[\"Date\"].astype(str)\n\nchoro_map=px.choropleth(existing_df9, \n                    locations=\"Country\", \n                    locationmode = \"country names\",\n                    color=\"Existing\", \n                    hover_name=\"Country\", \n                    animation_frame=\"Date\"\n                   )\n\nchoro_map.update_layout(\n    title_text = 'Global Coronavirus Existing cases',\n    title_x = 0.5,\n    geo=dict(\n        showframe = False,\n        showcoastlines = False,\n    ))\n    \nchoro_map.show()\n\n","f466be1f":"This is WIP\n\nthe code works in Colab ( https:\/\/colab.research.google.com\/drive\/1qefpxRj52tH4D380MdPVc9RG9FZjY3Ht?usp=sharing) \nam trying to get it to work in Kaggle\n\nHowever images do not render\/display here..."}}