{"cell_type":{"33c87ed3":"code","822683f1":"code","12592f49":"code","18ba0a89":"code","c2eb141f":"code","26b74810":"code","6ae99b27":"code","6920183f":"code","f3f0ab6a":"code","40138854":"code","083bdf7e":"code","84c82992":"code","65560afc":"code","ad91dc9a":"code","ef317fa6":"code","74a11c35":"code","fad21b15":"code","39269ef5":"code","a8556110":"code","08023012":"code","f0e2df0f":"code","445469bd":"code","224a0b45":"code","a8d5fed0":"code","56de99f9":"code","e812f721":"code","37daa5b2":"code","ca1815f9":"code","5e07f965":"code","ff50d5a0":"markdown","36567d93":"markdown","ba16294c":"markdown","65b90e97":"markdown","b7b07c7a":"markdown","c021000b":"markdown","f09f2639":"markdown","9e5ac1d5":"markdown","a46eb86b":"markdown","cabe946c":"markdown","b4d8b24b":"markdown"},"source":{"33c87ed3":"\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","822683f1":"data = pd.read_csv(\"\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\ndata.dropna(inplace = True)","12592f49":"data.info()","18ba0a89":"data.describe()","c2eb141f":"columns = data.columns\ndata.columns","26b74810":"print(data.anaemia.value_counts())\nlabels = '0', '1',\nsizes = [170, 129]\ncolors = ['darkkhaki','darkcyan']\nexplode = (0, 0)\nfig1, ax1 = plt.subplots(figsize =(10,10))\nax1.pie(sizes,colors = colors ,explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title(\"Anaemia\")\nplt.show()","6ae99b27":"print(data.diabetes.value_counts())\nlabels = '0', '1',\nsizes = [174, 125]\ncolors = ['forestgreen','darkmagenta']\nexplode = (0, 0)\nfig1, ax1 = plt.subplots(figsize =(10,10))\nax1.pie(sizes,colors = colors ,explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title(\"Diabetes\")\nplt.show()","6920183f":"print(data.high_blood_pressure.value_counts())\nlabels = '0', '1',\nsizes = [194, 105]\ncolors = ['silver','firebrick']\nexplode = (0, 0)\nfig1, ax1 = plt.subplots(figsize =(10,10))\nax1.pie(sizes,colors = colors ,explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title(\"High Blood Pressure\")\nplt.show()","f3f0ab6a":"print(data.sex.value_counts())\nlabels = 'Female', 'Male',\nsizes = [105, 194]\ncolors = ['khaki','mediumslateblue']\nexplode = (0, 0)\nfig1, ax1 = plt.subplots(figsize =(10,10))\nax1.pie(sizes,colors = colors ,explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title(\"Gender\")\nplt.show()","40138854":"print(data.smoking.value_counts())\nlabels = '0', '1',\nsizes = [203, 96]\ncolors = ['turquoise','peru']\nexplode = (0, 0)\nfig1, ax1 = plt.subplots(figsize =(10,10))\nax1.pie(sizes,colors = colors ,explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title(\"Smoking\")\nplt.show()","083bdf7e":"print(data.DEATH_EVENT.value_counts())\nlabels = '0', '1',\nsizes = [203, 96]\ncolors = ['whitesmoke','crimson']\nexplode = (0, 0)\nfig1, ax1 = plt.subplots(figsize =(10,10))\nax1.pie(sizes,colors = colors ,explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title(\"Death Event\")\nplt.show()","84c82992":"plt_columns = ['age', 'creatinine_phosphokinase',\n       'ejection_fraction', 'platelets',\n       'serum_creatinine', 'serum_sodium', 'time'\n       ]\nfor each in plt_columns:\n    fig1, ax1 = plt.subplots(figsize =(10,10))\n    plt.hist(data[each], bins=50,color = \"darkmagenta\")\n    plt.xlabel(each)\n    plt.ylabel(\"Frequency\")\n    plt.grid()\n    plt.show()","65560afc":"f, ax = plt.subplots(figsize =(15,10))\ncorrMatrix = data.corr()\nsns.heatmap(corrMatrix, annot=True)\nplt.show()","ad91dc9a":"y = data.DEATH_EVENT\ndata.drop([\"DEATH_EVENT\" ,\"anaemia\" , \"diabetes\" , \"high_blood_pressure\" ,\"sex\" , \"smoking\" ], axis = 1, inplace = True)\nx = (data - np.min(data)) \/ (np.max(data) - np.min(data)) ","ef317fa6":"from sklearn.model_selection import train_test_split\nx_train , x_test , y_train, y_test = train_test_split(x,y,test_size = 0.2 , random_state = 42)\n","74a11c35":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import GridSearchCV\ngrid = {\"n_neighbors\" : np.arange(1,50)}\nknn = KNeighborsClassifier()\nknn_cv = GridSearchCV(knn,grid , cv = 10)\nknn_cv.fit(x_train,y_train)\nprint(knn_cv.best_params_)\nprint(knn_cv.best_score_)","fad21b15":"knn1 = KNeighborsClassifier(n_neighbors = 3)\nknn1.fit(x_train,y_train)\nknn_max = knn1.score(x_test,y_test)\nprint(\"K-NN max score : \",knn1.score(x_test,y_test))","39269ef5":"y_pred = knn1.predict(x_test)\ny_true = y_test\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_true,y_pred)\nf, ax = plt.subplots(figsize =(10,10))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"blue\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","a8556110":"from sklearn.linear_model import LogisticRegression\ngrid = {\"C\" : np.logspace(-3,3,7) , \"penalty\" : [\"l1\",\"l2\"]}\nlr = LogisticRegression()\nlr_cv = GridSearchCV(lr,grid , cv = 10)\nlr_cv.fit(x_train,y_train)\nprint(\"best parameters : \",lr_cv.best_params_)\nprint(\"max score : \",lr_cv.best_score_)","08023012":"lr2 = LogisticRegression(C = 10.0 , penalty = \"l2\")\nlr2.fit(x_train,y_train)\nprint(\"Logistic Regression Max Score : \",lr2.score(x_test,y_test))\nlr_max = lr2.score(x_test,y_test)","f0e2df0f":"y_pred = lr2.predict(x_test)\ny_true = y_test\ncm = confusion_matrix(y_true,y_pred)\nf, ax = plt.subplots(figsize =(10,10))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"blue\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","445469bd":"score_list = []\nfrom sklearn.ensemble import RandomForestClassifier\nfor each in range (1,100):\n    rf = RandomForestClassifier(n_estimators = each,random_state = 41)\n    rf.fit(x_train,y_train)\n    score_list.append(rf.score(x_test,y_test))\nprint(np.max(score_list))\nrf_max = np.max(score_list)","224a0b45":"fig1, ax1 = plt.subplots(figsize =(10,10))\nplt.plot(score_list,c = \"r\")\nplt.xlabel(\"n_estimators\")\nplt.ylabel(\"Accuracy\")\nplt.grid()\nplt.show()","a8d5fed0":"from sklearn.ensemble import RandomForestClassifier\nrf1 = RandomForestClassifier(n_estimators = 7,random_state = 41)\nrf1.fit(x_train,y_train)\ny_pred = rf1.predict(x_test)\ny_true = y_test\ncm = confusion_matrix(y_true,y_pred)\nf, ax = plt.subplots(figsize =(10,10))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"blue\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","56de99f9":"from sklearn.svm import SVC\nsvm = SVC()\nsvm.fit(x_train,y_train)\nprint(svm.score(x_test,y_test))\nsvm_score = svm.score(x_test,y_test)","e812f721":"y_pred = svm.predict(x_test)\ny_true = y_test\ncm = confusion_matrix(y_true,y_pred)\nf, ax = plt.subplots(figsize =(10,10))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"blue\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","37daa5b2":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train,y_train)\nprint(nb.score(x_test,y_test))\nnb_score = nb.score(x_test,y_test)","ca1815f9":"y_pred = nb.predict(x_test)\ny_true = y_test\ncm = confusion_matrix(y_true,y_pred)\nf, ax = plt.subplots(figsize =(10,10))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"blue\",fmt = \".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.show()","5e07f965":"result = ({\"Random Forest Classifier\" : rf_max , \"Logistic Regression\" : lr_max , \"K-Nearest Neighbor\" : knn_max , \"Support Vector Machine\" : svm_score,\"Naive Bayes\" : nb_score})\nresult","ff50d5a0":"# Introduction\nHeart Failure Prediction with 5 classifications of Supervised Learning\n\n<font color ='red'>\nContent :\n    \n    \n    \n1.[ Load and Check Data](#1)\n\n2.[ Visualizing Data](#2)\n    \n3.[ Normalization](#3)\n   \n4.[ Model Selection](#4)    \n    \n5.[ Grid Search (with K-Nearest Neighbor)](#5)   \n    \n6.[ Grid Search (with Logistic Regression)](#6)    \n    \n7.[ Random Forest Classifier](#7)    \n    \n8.[ Support Vector Machine Classification](#8)    \n    \n9.[ Naive Bayes Classification](#9)    \n    \n10.[ RESULTS](#10)    ","36567d93":"<a id = \"2\"><\/a>\n<font color ='red'>\n## 2. Visualizing Data","ba16294c":"<a id = \"5\"><\/a>\n<font color ='red'>\n## 5. Grid Search (with K-Nearest Neighbor)","65b90e97":"<a id = \"7\"><\/a>\n<font color ='red'>\n## 7. Random Forest Classifier","b7b07c7a":"<a id = \"4\"><\/a>\n<font color ='red'>\n## 4. Model Selection","c021000b":"<a id = \"8\"><\/a>\n<font color ='red'>\n## 8. Support Vector Machine Classification","f09f2639":"<a id = \"9\"><\/a>\n<font color ='red'>\n## 9. Naive Bayes Classification","9e5ac1d5":"<a id = \"6\"><\/a>\n<font color ='red'>\n## 6. Grid Search (with Logistic Regression)","a46eb86b":"<a id = \"1\"><\/a>\n<font color ='red'>\n## 1. Load and Check Data","cabe946c":"<a id = \"3\"><\/a>\n<font color ='red'>\n## 3. Normalization","b4d8b24b":"<a id = \"10\"><\/a>\n<font color ='red'>\n## 10. RESULTS"}}