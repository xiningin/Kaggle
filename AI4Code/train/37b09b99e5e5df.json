{"cell_type":{"cbdd3eec":"code","6c8b5baf":"markdown"},"source":{"cbdd3eec":"import numpy as np\nimport matplotlib.pyplot as plt\n\nwalks_simulated = 5000\nN =1000\n\nd = np.matmul(np.random.randint(3, size=(walks_simulated,N))-1,np.triu(np.ones((N,N),dtype=np.int8)))\nstd = np.std(d,axis=0)\n\nplt.plot(std)","6c8b5baf":"I wanted to calculate the stdev of the score of a random RPS agent versus the number of plays. This is useful for a strategy where you want to switch to random if you are far enough ahead, or if you want to know when to declare a match a tie. The expected value of the random agent is 0, but the stdev is not.\n\nI know normal random walks are proportional to sqrt(n), but wanted to see how it behaves with choices[-1,0,1].\n\nHere is a very simple and fast implementation. The total distance walked can be easily calculated by multiplying with a triangular matrix of ones."}}