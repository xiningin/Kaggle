{"cell_type":{"bcbec98b":"code","d5f63875":"code","4aac4764":"code","3cce2b88":"code","e97b3fb4":"code","3700a85b":"code","e91df1e8":"code","4aefed24":"code","d69428a0":"code","cc0efcf3":"code","2bcc0356":"code","7b6adc7a":"code","87c9edc7":"code","200bf962":"code","521871a2":"code","53ac5770":"code","ddfd0863":"code","af66831d":"code","d47a327f":"code","e6b26612":"code","676fc21b":"code","b4a32cc0":"code","19e073c7":"code","4d43a308":"code","9586b311":"code","09dbbf31":"code","ce25d847":"code","fb220c06":"code","13fea96f":"code","0d0a9f12":"code","5fe16adb":"code","f4c2f114":"code","56ce4d06":"code","80d1a10e":"code","35e199a5":"code","b069cbd6":"code","5510121b":"code","042fa2d7":"code","157d7a5c":"code","aa3daa7f":"code","2a5a99a6":"code","6479fc3f":"code","75764e70":"code","b38bc9a8":"code","22a81302":"code","a802bfd0":"code","31257c02":"code","3bbc569b":"code","610d9d8e":"code","03369b81":"code","1a8dd13c":"code","7dc73eec":"markdown","cc01824f":"markdown","c8c98723":"markdown","6674725c":"markdown","82cfdf48":"markdown","19e18645":"markdown","e19621eb":"markdown","b20f2810":"markdown","f8a3af46":"markdown","ce87e599":"markdown","ed85afb3":"markdown","91ce82fb":"markdown","3104201c":"markdown","65d09c75":"markdown","82937686":"markdown","fa0ebeb2":"markdown","0cb55052":"markdown","75de3b4b":"markdown","2acdc759":"markdown","37b2c296":"markdown","4ffd8bc5":"markdown","3fcbda11":"markdown","cdc02fa1":"markdown","baaf51ea":"markdown","4d5a92e4":"markdown","2a2544ce":"markdown","6174871d":"markdown","f49c453a":"markdown","9a68f772":"markdown","7bccb24e":"markdown","365aaf86":"markdown","71bb60c9":"markdown","d5123b90":"markdown","cf59ec60":"markdown","817e3d39":"markdown","8ef587d7":"markdown","e4ebae67":"markdown","09207d20":"markdown","bab98617":"markdown","1dfc55af":"markdown","b8b8f008":"markdown","0a7dca75":"markdown","d6d50a65":"markdown","ae367106":"markdown","8d53839d":"markdown","865945e9":"markdown","35321291":"markdown","a8fc91eb":"markdown","52b6d46e":"markdown","dc1db6d6":"markdown","d1cc6dc4":"markdown","5b51d41f":"markdown","b64f1767":"markdown","04290d91":"markdown","b0e14a5a":"markdown","b11b3a35":"markdown","5160479b":"markdown","62c8cca6":"markdown","b3087126":"markdown","b4a84843":"markdown","5601b009":"markdown","329df912":"markdown","0a8c1efe":"markdown","41605719":"markdown"},"source":{"bcbec98b":"import matplotlib.pyplot as plt\nimport cv2\nfrom pylab import rcParams\n\nrcParams['figure.figsize'] = 50,20\nimg=cv2.imread(\"..\/input\/private-score\/score.JPG\")\nplt.imshow(img)","d5f63875":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\/\"))\nimport warnings\nwarnings.filterwarnings(\"ignore\")","4aac4764":"train = pd.read_csv('..\/input\/mercedes-benz-greener-manufacturing\/train.csv')\ntest = pd.read_csv('..\/input\/mercedes-benz-greener-manufacturing\/test.csv')\ndf = train","3cce2b88":"print(train.shape)\ntrain.head()","e97b3fb4":"numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\ndf_num = df.select_dtypes(include=numerics)       #  numeric dataframe\nobjects = ['O']\ndf_cat = df.select_dtypes(include=objects)\nprint(df_num.shape,df_cat.shape)\nprint(df_cat.columns,'\\n','--------------------------------------------------------------------------------','\\n',df_num.columns)","3700a85b":"for i in df_cat.columns:\n    print('The unique values in '+i+' are: ',df[i].nunique(),'\\n',df_cat[i].unique(),'\\n',\"--------------------------------------------------------------------------------\")","e91df1e8":"print(df.isnull().sum().sum(axis=0))","4aefed24":"temp=df.y.values\ndf_cat['y']=temp\nprint(df_cat.head())","d69428a0":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(rc={'figure.figsize':(14,9)})\nplt.subplot(221)\nplt.title(\"Outlier Detection in target column via Boxplot\")\nplt.ylabel(\"Values of y\")\nplt.grid(True)\nsns.boxplot(y=df[\"y\"],color='gold')\nplt.subplot(222)\nplt.title(\"Outlier Detection in target column via Histogram\")\nplt.grid(True)\nax = sns.distplot(df.y,color='green',bins=22)\nplt.show()","cc0efcf3":"sns.set(rc={'figure.figsize':(20,7)})\nplt.title(\"y Analysis\")\nplt.ylabel(\"Values of y\")\nplt.scatter(range(df.shape[0]),np.sort(df.y.values),color='orange')","2bcc0356":"print((df.loc[df.y>150,'y'].values))\ndf=df[df.y<150]\nprint(\"Removing outliers based on above information and setting 150 as a threshold value . . . . . . . . . . . . . . . . . . . . \")\nprint(df.shape)\ndf_cat=df_cat[df_cat.y<150]\ndf_num=df_num[df_num.y<150]","7b6adc7a":"sns.set(rc={'figure.figsize':(20,7)})\nsns.regplot(x='ID', y='y', data=df,color='maroon')","87c9edc7":"from scipy import stats\nrcParams['figure.figsize'] = 15, 7\nres = stats.probplot(df['y'], plot=plt)","200bf962":"res = stats.probplot(np.log1p(train[\"y\"]), plot=plt)","521871a2":"rcParams['figure.figsize'] = 22, 8\nfor i in df_cat.columns:\n    if i not in 'y':\n        plt.figure()\n        plt.xlabel=i\n        sns.stripplot(x=i, y=\"y\", data=df,jitter=True, linewidth=1,order=np.sort(df[i].unique()))\n        sns.boxplot(x=i, y=\"y\", data=df, order=np.sort(df[i].unique()))\n        plt.show()","53ac5770":"pd.crosstab([df_cat.X2], [df_cat.X0], margins=True).style.background_gradient(cmap='autumn_r')","ddfd0863":"temp = []\nfor i in df_num.columns:\n    if df[i].var()==0:\n        temp.append(i)\nprint(len(temp))\nprint(temp)","af66831d":"count=0\nlow_var_col=[]\nfor i in test.columns:\n    if test[i].dtype == 'int64':\n        if test[i].var()<0.01:\n            low_var_col.append(i)\n            count+=1\nprint(count)\n\ndf.drop(low_var_col,axis=1,inplace=True)\ndf_num.drop(low_var_col,axis=1,inplace=True)\ntest.drop(low_var_col,axis=1,inplace=True)","d47a327f":"numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\ndf_num = df.select_dtypes(include=numerics)","e6b26612":"dic={}\nfor i in df_num.columns:\n    if i!='y':\n        if df[i].corr(df.y)>0.25 or df[i].corr(df.y)<-0.25:\n            dic[i]=df[i].corr(df.y)\nprint(\"Important Features with there respective correlations are \",'\\n','---------------------------------------------------------','\\n',dic)","676fc21b":"print(df.X119.corr(df.X118),'\\n', df.X29.corr(df.X54) ,'\\n', df.X54.corr(df.X76) ,'\\n', df.X263.corr(df.X279))","b4a32cc0":"# Dublicate features\nd = {}; done = []\ncols = df.columns.values\nfor c in cols: d[c]=[]\nfor i in range(len(cols)):\n    if i not in done:\n        for j in range(i+1, len(cols)):\n            if all(df[cols[i]] == df[cols[j]]):\n                done.append(j)\n                d[cols[i]].append(cols[j])\ndub_cols = []\nfor k in d.keys():\n    if len(d[k]) > 0: \n        dub_cols += d[k]        \nprint('Dublicates:','\\n', dub_cols)","19e073c7":"corrs=[]\nhigh_corr=[]\nfor i in range(0,len(dub_cols)):\n    for j in range(i+1,len(dub_cols)):\n        if df[dub_cols[i]].corr(df[dub_cols[j]]) >=0.90:\n            corrs.append(df[dub_cols[i]].corr(df[dub_cols[j]]))\n            high_corr.append((dub_cols[i],dub_cols[j]))\nprint(corrs)\nprint(\"\\n\")\nprint(high_corr)","4d43a308":"df.drop(['X279','X76','X37','X134','X147','X222','X244','X326'] , axis=1 , inplace=True)","9586b311":"test.drop(['X279','X76','X37','X134','X147','X222','X244','X326'] , axis=1 , inplace=True)\ndf_num.drop(['X279','X76','X37','X134','X147','X222','X244','X326'] , axis=1 , inplace=True)","09dbbf31":"from sklearn import preprocessing\ncategorical=[]\nfor i in df.columns:\n    if df[i].dtype=='object':\n        le = preprocessing.LabelEncoder()\n        le.fit(list(df[i].values) + list(test[i].values))\n        print(\"Categories in the encoded order from 1 to the size of \"+i+\" are : \")\n        print(le.classes_)\n        print(\"--------------------------------------------------------------------------\")\n        df[i] = le.transform(list(df[i].values))\n        test[i] = le.transform(list(test[i].values))\n        categorical.append(i)","ce25d847":"correlation_map = df[df.columns[1:10]].corr()\nobj = np.array(correlation_map)\nobj[np.tril_indices_from(obj)] = False\nfig,ax= plt.subplots()\nfig.set_size_inches(9,10)\nsns.heatmap(correlation_map, mask=obj,vmax=.7, square=True,annot=True)","fb220c06":"import xgboost as xgb\ntrain_y = df[\"y\"].values\ntrain_X = df.drop(['y'], axis=1)\n\ndef xgb_r2_score(preds, final):\n    labels = dtrain.get_label()\n    return 'r2', r2_score(labels, preds)\n\nxgb_params = {\n    'n_trees': 520, \n    'eta': 0.0045,\n    'max_depth': 4,\n    'subsample': 0.98,\n    'objective': 'reg:linear',\n    'eval_metric': 'rmse',\n    'base_score': np.mean(train_y), # base prediction = mean(target)\n    'silent': 1\n}\n\nfinal = xgb.DMatrix(train_X, train_y, feature_names=train_X.columns.values)\nmodel = xgb.train(dict(xgb_params), final, num_boost_round=200, feval=xgb_r2_score, maximize=True)\n\nfig, ax = plt.subplots(figsize=(10,10))\nxgb.plot_importance(model, max_num_features=40, height=0.8, ax=ax, color = 'coral')\nprint(\"Feature Importance by XGBoost\")\nplt.show()\n\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=200, max_depth=10, min_samples_leaf=4, max_features=0.2, n_jobs=-1, random_state=0)\nmodel.fit(train_X, train_y)\nfeat_names = train_X.columns.values\n\nimportances = model.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in model.estimators_], axis=0)\nindices = np.argsort(importances)[::-1][:40]\n\nplt.subplots(figsize=(10,10))\nplt.title(\"Feature importances by RandomForestRegressor\")\nplt.ylabel(\"Features\")\nplt.barh(range(len(indices)), importances[indices], color=\"green\", align=\"center\")\nplt.yticks(range(len(indices)), feat_names[indices], rotation='horizontal')\nplt.ylim([-1, len(indices)])\nplt.show()","13fea96f":"df['X314_plus_X315'] = df.apply(lambda row: row.X314 + row.X315, axis=1)\ntest['X314_plus_X315'] = test.apply(lambda row: row.X314 + row.X315, axis=1)","0d0a9f12":"print(\"Correalation between X314_plus_X315 and y is :  \",df.y.corr(df['X314_plus_X315']))\nprint(\"Which makes it pretty much high !! Awesome !!\")","5fe16adb":"#df['X122_plus_X128'] = df.apply(lambda row: row.X122 + row.X128, axis=1)\n#test['X122_plus_X128'] = test.apply(lambda row: row.X122 + row.X128, axis=1)","f4c2f114":"#print(\"Correlation between X122_plus_X128 and y is :  \",df.y.corr(df['X122_plus_X128']))","56ce4d06":"df['X118_plus_X314_plus_X315'] = df.apply(lambda row: row.X118 + row.X314 + row.X315, axis=1)\ntest['X118_plus_X314_plus_X315'] = test.apply(lambda row: row.X118 + row.X314 + row.X315, axis=1)","80d1a10e":"print(\"Correalation between X118_plus_X314_plus_X315 and y is :  \",df.y.corr(df['X118_plus_X314_plus_X315']))\nprint(\"Which makes it pretty much high !! Awesome !!\")","35e199a5":"df[\"X10_plus_X54\"] = df.apply(lambda row: row.X10 + row.X54, axis=1)\ntest[\"X10_plus_X54\"] = test.apply(lambda row: row.X10 + row.X54, axis=1)\nprint(\"Correalation between X10_plus_X54 and y is :  \",df.y.corr(df['X10_plus_X54']))","b069cbd6":"df[\"X10_plus_X29\"] = df.apply(lambda row: row.X10 + row.X29, axis=1)\ntest[\"X10_plus_X29\"] = test.apply(lambda row: row.X10 + row.X29, axis=1)\nprint(\"Correalation between X10_plus_X29 and y is :  \",df.y.corr(df['X10_plus_X29']))","5510121b":"train_X['X314_plus_X315']=df['X314_plus_X315']\n#train_X['X122_plus_X128']=df['X122_plus_X128']\ntrain_X['X118_plus_X314_plus_X315']=df['X118_plus_X314_plus_X315']\ntrain_X[\"X10_plus_X54\"] = df[\"X10_plus_X54\"]\ntrain_X[\"X10_plus_X29\"] = df[\"X10_plus_X29\"]","042fa2d7":"corr_val=[]\nsame_features=[]\nfor i in range(0,len(df_num.columns)-1):\n    for j in range(i+1,len(df_num.columns)):\n        temp_corr=df[df_num.columns[i]].corr(df[df_num.columns[j]])\n        if temp_corr>=0.95 or temp_corr<=-0.95: \n            same_features.append((df_num.columns[i],df_num.columns[j]))\n            corr_val.append(temp_corr)\nprint(len(corr_val))\nprint(same_features)","157d7a5c":"booler = np.ones(400)\nfor i in same_features:\n    if booler[int(i[1][1:])]==1:\n        booler[int(i[1][1:])]=0\n        df_num.drop(i[1],axis=1,inplace=True)\n        df.drop(i[1],axis=1,inplace=True)\n        test.drop(i[1],axis=1,inplace=True)\n        train_X.drop(i[1],axis=1,inplace=True)\n    elif booler[int(i[0][1:])]==1:\n        booler[int(i[0][1:])]=0\n        df_num.drop(i[0],axis=1,inplace=True)\n        df.drop(i[0],axis=1,inplace=True)\n        test.drop(i[0],axis=1,inplace=True)\n        train_X.drop(i[0],axis=1,inplace=True)","aa3daa7f":"model = RandomForestRegressor(n_estimators=200, max_depth=10, min_samples_leaf=4, max_features=0.2, n_jobs=-1, random_state=0)\nmodel.fit(train_X, train_y)\nfeature_names = train_X.columns.values\n\nimportances = model.feature_importances_\nstd = np.std([tree.feature_importances_ for tree in model.estimators_], axis=0)\nindices = np.argsort(importances)[::-1][:40]\n\nplt.subplots(figsize=(10,10))\nplt.title(\"Feature importances by RandomForestRegressor\")\nplt.ylabel(\"Features\")\nplt.barh(range(len(indices)), importances[indices], color=\"green\", align=\"center\")\nplt.yticks(range(len(indices)), feature_names[indices], rotation='horizontal')\nplt.ylim([-1, len(indices)])\nplt.show()\n\nfinal = xgb.DMatrix(train_X, train_y, feature_names=train_X.columns.values)\nmodel = xgb.train(dict(xgb_params), final, num_boost_round=1350, feval=xgb_r2_score, maximize=True)\n\nfig, ax = plt.subplots(figsize=(10,10))\nxgb.plot_importance(model, max_num_features=40, height=0.8, ax=ax,color = 'coral')\nprint(\"Feature Importance by XGBoost\")\nplt.show()","2a5a99a6":"print(train_X.shape , test.shape)","6479fc3f":"list(set(train_X.columns)-set(test.columns))","75764e70":"'''from sklearn.preprocessing import OneHotEncoder\ntotal_hot=np.concatenate( (train_X.values[:,1:9], test.values[:,1:9]), axis=0)\nenc = OneHotEncoder()\nenc.fit(total_hot)\ntotal_hot=enc.transform(total_hot)'''","b38bc9a8":"'''total_hot.todense().shape'''","22a81302":"'''train_hot=total_hot.todense()[:4194,:]\ntest_hot=total_hot.todense()[4194:8404,:]\nprint(train_hot.shape)\ntrain_X_hot=np.concatenate( (train_X.values[:,0].reshape(4194,1),train_hot) , axis=1)\ntest_hot=np.concatenate( (test.values[:,0].reshape(4209,1),test_hot) , axis=1)\ntrain_X_hot=np.concatenate( (train_X_hot,train_X.values[:,9:]) , axis=1)\ntest_hot=np.concatenate( (test_hot,test.values[:,9:]) , axis=1)'''","a802bfd0":"'''print(train_X_hot.shape, test_hot.shape)'''","31257c02":"'''from sklearn.decomposition import PCA\npca=PCA(n_components=6 , random_state=7)\npca.fit(train_X_hot)\npca_train_X = pca.transform(train_X_hot)\npca_test = pca.transform(test_hot)\n\nprint(pca.explained_variance_ratio_.sum())\nprint(\"--------------------------------------------------------------\")\nprint(pca.components_)\nprint(\"--------------------------------------------------------------\")\nprint(pca.components_.shape)\nprint(\"--------------------------------------------------------------\")\nprint(pca_train_X.shape , pca_test.shape)\n'''","3bbc569b":"import xgboost as xgb\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_valid, y_train, y_valid = train_test_split(train_X, train_y, test_size=0.2, random_state=420)\n\nd_train = xgb.DMatrix(x_train, label=y_train)\nd_valid = xgb.DMatrix(x_valid, label=y_valid)\nd_test = xgb.DMatrix(test)\n\nxgb_params = {\n    'n_trees': 500, \n    'eta': 0.0050,\n    'max_depth': 3,\n    'subsample': 0.95,\n    'objective': 'reg:linear',\n    'eval_metric': 'rmse',\n    'base_score': np.mean(train_y), # base prediction = mean(target)\n    'silent': 1\n}\n\ndef xgb_r2_score(preds, dtrain):\n    labels = dtrain.get_label()\n    return 'r2', r2_score(labels, preds)\n\nwatchlist = [(d_train, 'train'), (d_valid, 'valid')]\n\nclf = xgb.train(xgb_params, d_train, 1050 , watchlist, early_stopping_rounds=70, feval=xgb_r2_score, maximize=True, verbose_eval=10)","610d9d8e":"d_train = xgb.DMatrix(train_X, label=train_y)\n#d_valid = xgb.DMatrix(x_valid, label=y_valid)\nd_test = xgb.DMatrix(test)\n\nxgb_params = {\n    'n_trees': 500, \n    'eta': 0.0050,\n    'max_depth': 3,\n    'subsample': 0.95,\n    'objective': 'reg:linear',\n    'eval_metric': 'rmse',\n    'base_score': np.mean(train_y), \n    'silent': 1\n}\n\ndef xgb_r2_score(preds, dtrain):\n    labels = dtrain.get_label()\n    return 'r2', r2_score(labels, preds)\n\nwatchlist = [(d_train, 'train')]\n\nclf = xgb.train(xgb_params, d_train, 1050 , watchlist, early_stopping_rounds=70, feval=xgb_r2_score, maximize=True, verbose_eval=10)","03369b81":"Answer = clf.predict(d_test)\n\nsub = pd.DataFrame()\nsub['ID'] = test.ID\nsub['y'] = Answer\nsub.to_csv('mercedes_benz_The_best_or_Nothing.csv', index=False)","1a8dd13c":"sub.head()","7dc73eec":"# \u2666 Mercedes Benz - The Best or Nothing \u2666","cc01824f":"\n**Bivariate analysis using Cross-tabulation**","c8c98723":"Updating the dataframe for feature importance , the one we used above.","6674725c":"Later tried to append the PCA , SVD ,sparse random projections to the dataframe but still got degraded model performance...Please do tell me if anybody knows the answer for this....","82cfdf48":"**Duplicate features. **","19e18645":"Taking a total of 378 feature count to 185...","e19621eb":"**But ,  YOU MUST SEE THAT SOME FEATURES ARE HAVING SAME CORRELATIONS THAT COULD INDICATE THE POSSIBLE DUPLICATE FEATURES. Lets check them too . . **","b20f2810":"Getting the dictionary of important correlated features with target column y","f8a3af46":"## That look great the new features engineered have outperformed the existing features in the data in the RandomForrest feature importance plot.","ce87e599":"The y values of the dataset appears to be skewed","ed85afb3":"**y wrt ID of dataframe.**","91ce82fb":"### Down is the full kernel . . . .","3104201c":"Making a dense matrix from sparse","65d09c75":"** Taking 0.25 as threshold on grounds of experimental changes . . .**","82937686":"## Some important feature correlations with the target variable.","fa0ebeb2":"<img src=\"http:\/\/starchop.altervista.org\/wp-content\/uploads\/2015\/02\/Mercedes-Benz-Logo-Rain-HD-Wallpaper.jpg\"   \/>","0cb55052":"\n## Now lets see some jitter on boxplots . . .","75de3b4b":"Taking X10 and X54","2acdc759":"## Check for output tab of the notebook and check the score after submitting it . . . ","37b2c296":"**This dataset has some real problem with the number of categories.**","4ffd8bc5":"**There seems a difference between the feature importances by the two models. You can check above, RandomForest is giving the feature importance more on the basis of the important correlations of target wrt numerical features that we have already figured out above.**","3fcbda11":"This dataset is very dirty !! Believe it ....We have to clean it to the utmost level we can to feed into our model to achieve the high accuracy that we aspire.","cdc02fa1":"## Please upvote if you like . . . ","baaf51ea":"* Booler is the array of 1 and 0 for keeping the track of the features that we have dropped from the multiple dataframes and allowing the execution of cell without off any error of column not found. (Also the features are being repeated in multiple pairs.) \n* Initially the booler is taken as all of 1,  considering the fact that all features are present in the dataframe and later we would make them zeroes one by one. \n* The steps are like , we will target the 2nd feature of each pair and check for its existence, if its present then remove it or else if check for the 1st feature in the pair , and if this also is not present then simply skip that particular pair of feature. \n* The booler would be used to check the existence of that features in dataframes.","4d5a92e4":"Checking correlations among a set of duplicate features and preparing pairs who are highly correlated.","2a2544ce":"**STEPS for removing above redundancy . . .**","6174871d":"Taking X10 and X29","f49c453a":"\nUpdating the df_num dataframe after droping the features from original dataframe df.","9a68f772":"Taking Log Transformation","7bccb24e":"**This clearly shows the outliers are above a value of approx. 137.5. Well we will remove outliers after 150.**","365aaf86":"<img src=\"https:\/\/media.giphy.com\/media\/fQoCOuFL7DlR6zYRnw\/giphy.gif\" \/>","71bb60c9":"Taking X122 and X128","d5123b90":"# Lets do some Feature Engineering . . .\n\n* Following are some features that I have engineered after multiple trials  .\n* These are just the results (the new features engineered) of the work that I have done for long.\n* Since the features are anonymised, that makes pretty much difficult to do feature engineering.\n* I have made some 2 way and 3 way interactions of the features which prove to be pretty much useful.\n* Also there correlations are higher than their parent features which makes them even better.\n* Feel free to write new features engineered by yourself in the comment section below.","cf59ec60":"## Further data cleaning . . .  ","817e3d39":"### Till here I was in 20 % on private leaderboard but after hyperparameter tuning I landed in top 2% .","8ef587d7":"### Outlier detection and removal .... A bit cleaning....","e4ebae67":"\n**370 numerical features and 8 categorical features**","09207d20":"#### Now, finding correlations of each category with other . The increasing or decreasing class encoded value can be found from the categories written in the encoded order above.","bab98617":"\n**Preparing the data for feature importance**","1dfc55af":"This also shows the gradient of change using colour change. As you can see as in X2 is the most popular category and leaving most of them with zero. Similarly it can be tested on any 2 more than two categories at the same time to check concurrent occurences of any pairs, triads, quadruplets , etc . . . . ","b8b8f008":"Though in XGboost they have earned a little less position but still higher enough to be considered as good work for model performance.","0a7dca75":"### Below is the code for one hot encoding and creating a sparse matrix of around 211 features. But commented it out because it gave me degraded performance. Don't know why ....if anybody knows the answer than please comment it below... I would love to listen.","d6d50a65":"* Taking the numeric dataframe df_num and finding all the features with very high correlation an dchecking for them. Also making the pairs of them as above.\n* Turns out to be a list of 63 features again that are highly correlated. \n**Again, the value of 0.95 has been experimentally judged and taken , there is no thumb rule to take the threshold value.**","ae367106":"There are different number of categories in train and test datset. Encountered","8d53839d":"Now, training the whole dataset on selected parameters so as to avoid any data loss.","865945e9":"\n\nIn these stripplots with boxplots superimposed,  we find the following:\n\n*     X0 and X2 have a large amount of diversity in their levels. Among those two, X0 shows the most obvious effect of grouping.\n\n*     The lowest y values (i.e. shortest times) appear to be predominantly caused by 6 feature levels: X0:az, X0:bc, X1:y, X2:n, X5:h, X5:x. Together, these ones are a pretty good predictor for having low y.\n\n*     Level X0:aa appears to have a notably higher average y than all other features, but consists only of two data points. This is very obvious with the jitter plots.\n\n*     X3, X5, X6, X8 and to a certain extent X1 show distributions that are largely similar among the different levels","35321291":"Taking X118 , X314 and X315","a8fc91eb":"**Looking into each categorical feature **","52b6d46e":"Taking X314 and X315","dc1db6d6":"**A very distinct and conspicuous point around 275 in boxplot and also the green area in histogram. This noise has to removed.**","d1cc6dc4":"Label encoding the categorical features ","5b51d41f":"Turn out to be there are 146 columns for removal purpose.","b64f1767":"**This states that X29, X54, X76, X127, X136, X162, X166, X178,  X232,  X250,  X261, X263, X272,  X276, X279, X313, X314, X328  are important features later we will select using some selection techniques. **","04290d91":"**A separate dataframe to study only categorical features and there mutual relationship and also the one with target column y.**","b0e14a5a":"## Making the submission file ...Check yourself for the authentication of script claiming 78th place on private leaderboard with a score of 0.55282 which is Top 2 %. ","b11b3a35":"\nThis shows that are dataframe is containing some duplicate features which are having correlation of approx. 1. We will remove this redundancy also using some feature selection . .  .","5160479b":"Appending the encoded categories to ID vector and then appending the rest dataframe of numerical features to this newly formed dataframe. Similarly doing this to test matrix.","62c8cca6":"Again setting a threshold of 0.01 for variance for each column and removing them too. The removed columns are also being removed from all the temporary dataframes.","b3087126":"Validating our XGboost...Finding the best hyperparameters.","b4a84843":"Using 12 as components so as to still retain a variance of ~98%.","5601b009":"\n* Removing the features from the main dataframe that are involving zero variance or are having constant value inorder to remove redundancy and increase model performance later.\n* Also checking the individual correlation of the features and getting some idea about individual feature importance.\n* There are total 13 variables with zero variance , therefore they must be dropped.\n* Checking for duplicate features in this large set.\n* Feature selection multiple times .....","329df912":"**Again, correlation threshold of 0.9 has been judged and taken after multiple experiments .....**","0a8c1efe":"Removing columns with zero ovariance","41605719":"**This shows a very slight decreasing trend of y wrt ID , maybe cars later in series took less time in test bench. This gives ID an importance while estimating y.**"}}