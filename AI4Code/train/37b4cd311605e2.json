{"cell_type":{"ea75e867":"code","9bf21c75":"code","9d8ccb6f":"code","ded4fced":"code","74346ac3":"code","e256ca27":"code","b4f71379":"code","376884d9":"code","ef8e32db":"code","969a863b":"code","6d28932a":"code","2f86c719":"code","32faf8ef":"code","c11d2b19":"code","0f02416e":"code","10ddbed8":"code","db753e7d":"code","5b36d5e5":"code","ba4ae88d":"code","eb93a293":"code","440a77f7":"code","9b496691":"code","1aa595a6":"code","bc8cc480":"code","909d50ad":"code","d4db60ea":"code","d8707a2d":"markdown","ab2e2752":"markdown","00d33e88":"markdown"},"source":{"ea75e867":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9bf21c75":"data=pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")","9d8ccb6f":"data","ded4fced":"f,ax=plt.subplots(figsize=(14,7))\nplt.scatter(data.trestbps, data.chol)\nplt.show()","74346ac3":"f,ax=plt.subplots(figsize=(14,7))\nplt.scatter(data.trestbps, data.thalach)\nplt.show()","e256ca27":"data1=pd.DataFrame({\"trestbps\": data.trestbps, \"thalach\": data.thalach, \"target\": data.target})","b4f71379":"data1","376884d9":"data2=data1.drop([\"target\"], axis=1)","ef8e32db":"from sklearn.cluster import KMeans\n\nwcss=[]\nfor each in range(1,15):\n    kmeans2=KMeans(n_clusters=each)\n    kmeans2.fit(data2)\n    wcss.append(kmeans2.inertia_)\nf,ax=plt.subplots(figsize=(10,5))\nplt.plot([*range(1,15)], wcss)\nplt.show()","969a863b":"kmeans=KMeans(n_clusters=2)\nclusters=kmeans.fit_predict(data2)\ndata1[\"kmeans\"]=clusters","6d28932a":"clusters","2f86c719":"plt.scatter(data1.trestbps[data1.kmeans==0], data1.thalach[data1.kmeans==0])\nplt.scatter(data1.trestbps[data1.kmeans==1], data1.thalach[data1.kmeans==1])\nplt.show()","32faf8ef":"plt.scatter(data.trestbps[data.target==1], data.thalach[data.target==1])\nplt.scatter(data.trestbps[data.target==0], data.thalach[data.target==0])\nplt.show()","c11d2b19":"data1","0f02416e":"success_kmeans=[]\nfor i in range(data.shape[0]):\n    if (data1.target[i]==data1.kmeans[i]):\n        success_kmeans.append(1)\n    else:\n        success_kmeans.append(0)","10ddbed8":"print(\"Success Rate:\", 100*np.mean(success_kmeans), \"%\")","db753e7d":"from scipy.cluster.hierarchy import linkage,dendrogram\nmerg=linkage(data2, method=\"ward\")\ndendrogram(merg, leaf_rotation=90)\nplt.show()","5b36d5e5":"from sklearn.cluster import AgglomerativeClustering\nhc=AgglomerativeClustering(n_clusters=2, linkage=\"ward\", affinity=\"euclidean\")\nclusters=hc.fit_predict(data1)\ndata1[\"hier\"]=clusters","ba4ae88d":"data1","eb93a293":"plt.scatter(data1.trestbps[data1.hier==0], data1.thalach[data1.hier==0])\nplt.scatter(data1.trestbps[data1.hier==1], data1.thalach[data1.hier==1])\nplt.show()","440a77f7":"plt.scatter(data1.trestbps[data1.target==1], data1.thalach[data1.target==1])\nplt.scatter(data1.trestbps[data1.target==0], data1.thalach[data1.target==0])\nplt.show()","9b496691":"success_hier=[]\nfor i in range(data.shape[0]):\n    if (data1.hier[i]==data1.target[i]):\n        success_hier.append(1)\n    else:\n        success_hier.append(0)","1aa595a6":"print(\"Hierarchical Clustering Success:\", 100*np.mean(success_hier), \"%\")","bc8cc480":"plt.scatter(data.trestbps[data.target==0], data.thalach[data.target==0], color=\"green\", label=\"0\")\nplt.scatter(data.trestbps[data.target==1], data.thalach[data.target==1], color=\"red\", label=\"1\")\nplt.title(\"Data\")\nplt.xlabel(\"trestbps\")\nplt.ylabel(\"thalach\")\nplt.legend()\nplt.show()","909d50ad":"plt.scatter(data1.trestbps[data1.kmeans==0], data1.thalach[data1.kmeans==0], color=\"green\", label=\"0\")\nplt.scatter(data1.trestbps[data1.kmeans==1], data1.thalach[data1.kmeans==1], color=\"red\", label=\"1\")\nplt.title(\"KMeans Clustering\")\nplt.xlabel(\"trestbps\")\nplt.ylabel(\"thalach\")\nplt.legend()\nplt.show()\nprint(\"Success Rate:\", 100*np.mean(success_kmeans), \"%\")","d4db60ea":"plt.scatter(data1.trestbps[data1.hier==0], data1.thalach[data1.hier==0], color=\"green\", label=\"0\")\nplt.scatter(data1.trestbps[data1.hier==1], data1.thalach[data1.hier==1], color=\"red\", label=\"1\")\nplt.title(\"Hierarchical Clustering\")\nplt.xlabel(\"trestbps\")\nplt.ylabel(\"thalach\")\nplt.legend()\nplt.show()\nprint(\"Success Rate:\", 100*np.mean(success_hier), \"%\")","d8707a2d":"# Conclusion","ab2e2752":"# Hierarchical Clustering","00d33e88":"# KMeans Clustering"}}