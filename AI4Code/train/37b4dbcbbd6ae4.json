{"cell_type":{"24eb2bbe":"code","4ecf42d9":"code","a17c8145":"code","c2b66de0":"code","5a8ccf77":"code","b13aa91d":"code","14bd7471":"code","ce32df98":"code","d0ca870a":"code","1fffa9fe":"code","b45a5ae7":"code","0762fb0f":"code","04aab691":"code","1462ad9e":"code","36661ac1":"code","952f7ca1":"code","8a4f00b7":"code","82a22a02":"code","8780b937":"code","6a08b63c":"code","e9085bf0":"code","bb8fd6c9":"code","ebfc5232":"code","225479f9":"code","1ad963a1":"code","33bf561e":"code","7f5a6516":"code","c235324a":"code","103ef34c":"code","b8d23445":"code","017204d0":"code","cfb73a7a":"code","96da11b1":"code","4651b7ef":"code","e1726b20":"code","e83769ab":"code","9cf2484b":"code","69b686e2":"code","4d5e8924":"code","5af3498e":"code","cc8ec2ff":"code","19ca1498":"code","3ca2d2e5":"code","7dfc3c06":"code","f725cdd6":"code","bdeeb4d9":"code","e1f595e1":"markdown","370a5185":"markdown","348d2ed0":"markdown","f940b455":"markdown","175e52bd":"markdown","631a4cf3":"markdown","00e2fdf3":"markdown","52ae126f":"markdown","96bed829":"markdown","86a41e3f":"markdown","94b1d534":"markdown","cbc0c4c1":"markdown"},"source":{"24eb2bbe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4ecf42d9":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport os\n%matplotlib inline\nos.getcwd()","a17c8145":"train_c=pd.read_csv('\/kaggle\/input\/ihsmarkit-hackathon-june2020\/train_data.csv')\ntest_c=pd.read_csv('\/kaggle\/input\/ihsmarkit-hackathon-june2020\/oos_data.csv')\n#sample=pd.read_csv('\/kaggle\/input\/ihsmarkit-hackathon-june2020\/oos_data.csv')\n#train_c=pd.read_csv('\/Users\/dharmendraverma\/Downloads\/Python\/ihsmarkit-hackathon-june2020\/train_data.csv',encoding='utf-8')\n#test_c=pd.read_csv('\/Users\/dharmendraverma\/Downloads\/Python\/ihsmarkit-hackathon-june2020\/oos_data.csv')\n\ntrain=train_c.copy()\ntest=test_c.copy()","c2b66de0":"train.info()","5a8ccf77":"[col for col in train.columns if train[col].dtype=='object']\n","b13aa91d":"#columns below that contain some unknown values\nTRAIN=train.replace('unknown',np.nan)\n#.groupby('Body_Type')['Body_Type'].count().sum()\n#train=train[train['Fuel_Type']!='unknown']\n#train=train[train['Brand']!='unknown']\n#train=train[train['Body_Type']!='unknown']\ntrain.isnull().sum()","14bd7471":"from sklearn.base import TransformerMixin\n\nclass DataFrameImputer(TransformerMixin):\n\n    def __init__(self):\n\n        \"\"\"Impute missing values.\n\n        Columns of dtype object are imputed with the most frequent value \n\n        in column.\n\n        Columns of other types are imputed with mean of column.\n\n        \"\"\"\n\n    def fit(self, X, y=None):\n\n        self.fill = pd.Series([X[c].value_counts().index[0]\n\n            if X[c].dtype == np.dtype('O') else X[c].mean() for c in X],\n\n            index=X.columns)\n\n        return self\n\n    def transform(self, X, y=None):\n\n        return X.fillna(self.fill)","ce32df98":"train.groupby('Body_Type')['Body_Type'].count()\ntrain[train['Body_Type']=='unknown'][\"Body_Type\"]\n#train.groupby('Body_Type')['Body_Type'].count()\n","d0ca870a":"train['power_to_wt']=train['Engine_KW']\/train['Curb_Weight']\ntest['power_to_wt']=test['Engine_KW']\/test['Curb_Weight']\ntrain['volume']=train['Length']*train['Width']*train['Height']\ntest['volume']=test['Length']*test['Width']*test['Height']\ntrain['density']=train['Curb_Weight']\/train['volume']\ntest['density']=test['Curb_Weight']\/test['volume']","1fffa9fe":"train=train.loc[train['Price_USD']<500000]\n\ntrain=train.loc[train['Price_USD']>5000]","b45a5ae7":"train.groupby(train.Nameplate.str.contains('unknown'))['Nameplate'].count()","0762fb0f":"train.groupby(train.Driven_Wheels.str.contains('unknown'))['Driven_Wheels'].count()","04aab691":"train.groupby(train.Transmission.str.contains('unknown'))['Transmission'].count()","1462ad9e":"train.groupby(train.Turbo.str.contains('unknown'))['Turbo'].count()","36661ac1":"train.groupby(train.Fuel_Type.str.contains('unknown'))['Fuel_Type'].count()","952f7ca1":"train.groupby(train.PropSysDesign.str.contains('unknown'))['PropSysDesign'].count()","8a4f00b7":"train.groupby(train.Plugin.str.contains('unknown'))['Plugin'].count()","82a22a02":"train.isnull().sum()","8780b937":"train.corr()","6a08b63c":"train.columns","e9085bf0":"train['vehicle_life']=train['year']-train['Generation_Year']\ntest['vehicle_life']=test['year']-test['Generation_Year']\ntrain['vehicle_life'].loc[train['vehicle_life']<0]=0\ntrain.vehicle_life.describe()","bb8fd6c9":"train['date']=pd.to_datetime(train['date']).dt.date\ntrain['date'].head()","ebfc5232":"plt.plot(train[train['country_name']=='China'].groupby(['year'])['vehicle_id'].count())\nplt.xlabel('Year')\nplt.ylabel('Count of Vehicles')\nplt.title('Vehicle Sales')\nplt.plot(train[train['country_name']=='Germany'].groupby(['year'])['vehicle_id'].count())\nplt.plot(train[train['country_name']=='USA'].groupby(['year'])['vehicle_id'].count())\n","225479f9":"train_cat=[col for col in train.columns if train[col].dtype=='object']\n\ntrain_num=[col for col in train.columns if train[col].dtype in ['int64','float64']]# or train[col].dtype in 'float64']]","1ad963a1":"train[train_cat].nunique()\ntrain_num","33bf561e":"train.groupby(['Brand'])['vehicle_id'].count().sort_values(ascending=False).head(20)","7f5a6516":"cat_data=train[train_cat].drop(['date','Brand','Nameplate'],axis=1)\n\nfrom sklearn.preprocessing import StandardScaler\n\ntrain_X=train[train_num].drop(['Price_USD','vehicle_id','Generation_Year','year'], axis=1)\ntrain_y=train['Price_USD']\ntest_X=test[['Length','Height','Width','Engine_KW','No_of_Gears','Curb_Weight','CO2','Fuel_cons_combined','vehicle_life','power_to_wt', 'volume', 'density']]\n\nscaler=StandardScaler()\ntrain_X_scaled=scaler.fit_transform(train_X)\ntest_X_scaled=scaler.fit_transform(test_X)\ntrain_X_scaled","c235324a":"import numpy as np\ndef mape(y_true, y_pred):\n    y_val = np.maximum(np.array(y_true), 1e-8)\n    return (np.abs(y_true -y_pred)*100\/y_val).mean()","103ef34c":"#output=ypredict_OO.to_csv('submission.csv')","b8d23445":"train[train_cat].columns","017204d0":"print('train[\"Body_Type\"] - ',train['Body_Type'].nunique())#.sort()\nprint('test[\"Body_Type\"] - ',test['Body_Type'].nunique())","cfb73a7a":"#checking for categorical variables where number of categories in each variable are same in train and test set\ncat_to_be_used=[col for col in train[train_cat] if train[col].nunique()== test[col].nunique()]\n","96da11b1":"#using label encoding\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder","4651b7ef":"le=LabelEncoder()\nonehot=OneHotEncoder()\nprint(train_cat )\ncat_to_be_used","e1726b20":"for col in cat_to_be_used:\n    # Using whole data to form an exhaustive list of levels\n    data=train[col].append(test[col])\n    le.fit(data.values)\n    train[col]=le.transform(train[col])\n    test[col]=le.transform(test[col])","e83769ab":"print(cat_to_be_used)","9cf2484b":"from sklearn.preprocessing import StandardScaler\n\ncol_scaled=train_num+cat_to_be_used\nremove_items=['vehicle_id', 'Generation_Year','year','Price_USD','No_of_Gears']\n#col_scaled=col_scaled.remove('vehicle_id')\ncol_keep=[x for x in col_scaled if x not in remove_items]\ntraining_labeled_X=train[col_keep]\ny=train['Price_USD']\ntest_labeled_X=test[col_keep]\ncol_keep","69b686e2":"from sklearn.preprocessing import StandardScaler,MinMaxScaler\nscaler=MinMaxScaler()\ntrain_labeled_X_scaled=scaler.fit_transform(training_labeled_X)\ntest_labeled_X_scaled=scaler.fit_transform(test_labeled_X)\ntest_labeled_X_scaled","4d5e8924":"#spliting training data in train and test for model creation\nfrom sklearn.model_selection import train_test_split\ntrX, tsX, trY,tsY=train_test_split(train_labeled_X_scaled, y, test_size=.3, random_state=0)\nfrom sklearn.ensemble import RandomForestRegressor\nrandom=RandomForestRegressor(random_state=0) \nrandom.fit(trX, trY)\npred_Y=random.predict(tsX)\npred_y_r=random.predict(trX)\nplt.scatter(trY, pred_y_r, c='b')\nplt.scatter(tsY,pred_Y, c='r')\nmape(tsY, pred_Y)","5af3498e":"from sklearn.compose import TransformedTargetRegressor\ntt = TransformedTargetRegressor(regressor=RandomForestRegressor(),func=np.log, inverse_func=np.exp)\ntt.fit(trX, trY)\ny_pred_tt1=tt.predict(tsX)\ny_pred_tr1=tt.predict(trX)\nplt.scatter(trY, y_pred_tr1, c='b')\nplt.scatter(tsY, y_pred_tt1, c='r')\nmape(tsY, y_pred_tt1)","cc8ec2ff":"predY=tt.predict(test_labeled_X_scaled)\n\npredY=pd.DataFrame(predY,columns=['Price_USD'])\nl=[]\nfor i in test['vehicle_id']:\n    l.append(i)\npredY.index=l\npredY.index.name='vehicle_id'\npredY.head()","19ca1498":"from xgboost import XGBRegressor, plot_importance  \nxgb_model1 = XGBRegressor()\nxgb_model1.fit(trX, trY, verbose=False)\npred_y_xgb1=xgb_model1.predict(tsX)\nmape(tsY,pred_y_xgb1)","3ca2d2e5":"xgb_model2 = XGBRegressor(n_estimators=1000)\nxgb_model2.fit(trX, trY, early_stopping_rounds=5, \n             eval_set=[(tsX, tsY)], verbose=False)\npred_y_xgb2=xgb_model2.predict(tsX)\nmape(tsY,pred_y_xgb2)","7dfc3c06":"\nxgb_model3 = XGBRegressor(n_estimators=1000, learning_rate=0.1)\nxgb_model3.fit(trX, trY, early_stopping_rounds=5, \n             eval_set=[(tsX, tsY)], verbose=False)\npred_y_xgb3=xgb_model3.predict(tsX)\nmape(tsY,pred_y_xgb3)","f725cdd6":"predY=tt.predict(test_labeled_X_scaled)\n\npredY=pd.DataFrame(predY,columns=['Price_USD'])\nl=[]\nfor i in test['vehicle_id']:\n    l.append(i)\npredY.index=l\npredY.index.name='vehicle_id'\npredY.head()","bdeeb4d9":"output=predY.to_csv('submission.csv',float_format='%g')","e1f595e1":"output=ypredict_OO.head()","370a5185":"ypredict_OO=pd.DataFrame(ypredict_OOS,columns=['Price_USD'])","348d2ed0":"from sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\nlinear=LinearRegression()\nlinear.fit(train_X_scaled, train_y)\ny_predict=linear.predict(test_X_scaled)\n\nprint('Mean absolute percent error for Linear Regression')\n","f940b455":"train_c=pd.read_csv('\/Users\/dharmendraverma\/Downloads\/Python\/ihsmarkit-hackathon-june2020\/train_data.csv')\ntest=pd.read_csv('\/Users\/dharmendraverma\/Downloads\/Python\/ihsmarkit-hackathon-june2020\/oos_data.csv')\n\ntrain.head()\ntrain=train.copy()\ntest.info()","175e52bd":"from sklearn.compose import TransformedTargetRegressor\ntt = TransformedTargetRegressor(regressor=RandomForestRegressor(),func=np.log, inverse_func=np.exp)\ntt.fit(Xtrain, ytrain)\ny_pred_tt=tt.predict(Xtest)\ny_pred_tr=tt.predict(Xtrain)\nplt.scatter(ytrain, y_pred_tr, c='b')\nplt.scatter(ytest, y_pred_tt, c='r')\nmape(ytest, y_pred_tt)","631a4cf3":"from sklearn.model_selection import train_test_split\nXtrain, Xtest, ytrain, ytest=train_test_split(train_X_scaled, train_y, test_size=.3, random_state=0)\nlinear=LinearRegression()\nlinear.fit(Xtrain, ytrain)\nypredict=linear.predict(Xtest)\nprint('Mean absolute percent error for Linear Regression',mape(ytest, ypredict))\n","00e2fdf3":"tree=DecisionTreeRegressor()\ntree.fit(Xtrain, ytrain)\nypredict_tree=tree.predict(Xtest)\nprint('Mean absolute percent error for Decision Tree Regression',mape(ytest, ypredict_tree))\n","52ae126f":"l=[]\nfor i in test['vehicle_id']:\n    l.append(i)\nypredict_OO.index=l\nypredict_OO.index.name='vehicle_id'\n","96bed829":"ypredict_OOS=random.predict(test_X_scaled)\nypredict_OOS.shape","86a41e3f":"random=RandomForestRegressor(random_state=0)\nrandom.fit(Xtrain, ytrain)\nypredict_random=random.predict(Xtest)\nprint('Mean absolute percent error for RandomForestRegressor',mape(ytest, ypredict_random))\nrandom","94b1d534":"n_estimators=[10,10,100,1000]\nmax_depth=[2,4,6,8,10]\nfor n in n_estimators:\n    for m in max_depth:\n        random=RandomForestRegressor(n_estimators=n, max_depth=m)\n        random.fit(Xtrain, ytrain)\n        ypredict_random=random.predict(Xtest)\n        print('Mean absolute percent error for Linear Regression for n:{0},m:{1}'.format(n,m) ,mape(ytest, ypredict_random))\n","cbc0c4c1":"for col in train[train_cat].columns:\n    print(\"{0} unique values in {1}, {2} are\".format(col,'Train set', 'Test set'),train[col].nunique(),\", \", test[col].nunique()\n         , \"and are equal\", train[col].nunique()== test[col].nunique() ,\"\\n\")"}}