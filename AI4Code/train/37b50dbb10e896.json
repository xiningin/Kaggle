{"cell_type":{"10320eda":"code","3f019bbe":"code","e24c4673":"code","9576703a":"code","877b76ce":"code","1817fde0":"code","e44f2b1c":"code","3d9f9f66":"code","7ceade32":"code","25a6fc71":"code","c789472e":"code","d00e9b00":"code","6362e5a7":"code","3c1df7f9":"code","c8aaded6":"code","5354c522":"code","c2bdfdc3":"code","85ca9349":"code","a4ce1b92":"code","e4f01721":"code","0f034f24":"code","197bbd6f":"code","7bd6e3c0":"code","8238fb3b":"code","86e6ec3a":"code","4df1d46e":"code","c4ed9903":"markdown","a454b2e7":"markdown","5893d999":"markdown","537963f6":"markdown","7290e2d8":"markdown","aac7f87d":"markdown","d448b990":"markdown","e758e953":"markdown","a1c97262":"markdown","8a3d0f67":"markdown","d38131b9":"markdown","64abe8fd":"markdown","fceeba4a":"markdown","4c5c9b7e":"markdown","b0a3c9fe":"markdown","69d3e7ee":"markdown","df1afa46":"markdown","e07d8699":"markdown"},"source":{"10320eda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3f019bbe":"import sqlite3\ncon = sqlite3.connect('..\/input\/census.sqlite')\n","e24c4673":"from sqlalchemy import create_engine\n\nengine = create_engine('sqlite:\/\/\/..\/input\/census.sqlite')","9576703a":"print(engine.table_names())","877b76ce":"from sqlalchemy import MetaData, Table\nmetadata = MetaData()\ncensus = Table('census', metadata, autoload=True, autoload_with=engine)\nprint(repr(census))","1817fde0":"stmt = 'Select * from census'\nresult_proxy = engine.execute(stmt)\nresults = result_proxy.fetchall()\nresults","e44f2b1c":"print('First Row : ', results[0])\nprint('Keys : ',results[0].keys())\nprint('Keys : ',results[0].state)","3d9f9f66":"from sqlalchemy.sql import select\nstmt = select([census])\nstmt = stmt.where(census.columns.state == 'California')\nresults = engine.execute(stmt).fetchall()\n\nfor result in results:\n    print(result.state, result.age)","7ceade32":"stmt = select([census])\nstmt = stmt.where(census.columns.state.startswith('New'))\nresults = engine.execute(stmt).fetchall()\n\nfor result in results:\n    print(result.state, result.age)","25a6fc71":"stmt = select([census])\nstmt = stmt.where(census.columns.state.startswith('New'))\n#results = engine.execute(stmt).fetchall()\n\nfor result in engine.execute(stmt).fetchall():\n    print(result.state, result.age)","c789472e":"from sqlalchemy import or_\nstmt = select([census])\n\nstmt = stmt.where(or_(census.columns.state == 'California',census.columns.state == 'New York'))\n\nfor result in engine.execute(stmt):\n    print(result.state, result.sex)","d00e9b00":"stmt = select([census.columns.state])\nstmt = stmt.order_by(census.columns.state)\nresults = engine.execute(stmt).fetchall()\nprint(results[:10])","6362e5a7":"stmt = select([census.columns.state, census.columns.sex])\nstmt = stmt.order_by(census.columns.state, census.columns.sex)\nresults = engine.execute(stmt).first()\nprint(results)","3c1df7f9":"from sqlalchemy import func\nstmt = select([func.sum(census.columns.pop2008)])\nresults = engine.execute(stmt).scalar()\nprint(results)","c8aaded6":"stmt = select([census.columns.sex, func.sum(census.columns.pop2008)])\nstmt = stmt.group_by(census.columns.sex)\nresults = engine.execute(stmt).fetchall()\nprint(results)","5354c522":"stmt = select([census.columns.sex, census.columns.age, func.sum(census.columns.pop2008)])\nstmt = stmt.group_by(census.columns.sex, census.columns.age)\nresults = engine.execute(stmt).fetchall()\nprint(results)","c2bdfdc3":"print(results[0].keys())\n","85ca9349":"stmt = select([census.columns.sex, func.sum(census.columns.pop2008).label('pop2008_sum')])\nstmt = stmt.group_by(census.columns.sex)\nresults = engine.execute(stmt).fetchall()\nprint(results[0].keys())","a4ce1b92":"import pandas as pd\ndf = pd.DataFrame(results)\ndf.columns = results[0].keys()\nprint(df)","e4f01721":"import matplotlib.pyplot as plt\ndf.plot.barh()\nplt.show()","0f034f24":"from sqlalchemy import desc\nstmt = select([census.columns.age,(census.columns.pop2008 - census.columns.pop2000).label('pop_change')])\nstmt = stmt.group_by(census.columns.age)\nstmt = stmt.order_by(desc('pop_change'))\nstmt = stmt.limit(5)\nresults = engine.execute(stmt).fetchall()\nprint(results)","197bbd6f":"from sqlalchemy import case\nstmt = select([func.sum(case([(census.columns.state == 'New York',census.columns.pop2008)], else_=0))])\nresults = engine.execute(stmt).fetchall()\nprint(results)","7bd6e3c0":"from sqlalchemy import case, cast, Float\nstmt = select([(func.sum(case([(census.columns.state == 'New York',census.columns.pop2008)], else_=0)) \/cast(func.sum(census.columns.pop2008),\n                                                                        Float) * 100).label('ny_percent')])\nresults = engine.execute(stmt).fetchall()\nprint(results)","8238fb3b":"## Reflection for state_fact\nstate_fact = Table('state_fact', metadata, autoload=True, autoload_with=engine)\nprint(repr(state_fact))","86e6ec3a":"stmt = select([census.columns.pop2008, state_fact.columns.abbreviation])\nresults = engine.execute(stmt).fetchall()\nprint(results)","4df1d46e":"stmt = select([func.sum(census.columns.pop2000)])\nstmt = stmt.select_from(census.join(state_fact, census.columns.state == state_fact.columns.name))\nstmt = stmt.where(state_fact.columns.census_division_name == 'East South Central')\nresult = engine.execute(stmt).scalar()\nprint(result)","c4ed9903":"# Label()","a454b2e7":"## Automatic Join","5893d999":"## Conjunctions","537963f6":"## Relationship","7290e2d8":"## Where Clauses","aac7f87d":"## Case Statement ","d448b990":"## Graphing Example","e758e953":"## Printing Table Names","a1c97262":"## Connecting to Database Using SQLite3","8a3d0f67":"## Order By","d38131b9":"## Calculating Difference","64abe8fd":"## Select_From Example","fceeba4a":"## SQL Queries","4c5c9b7e":"## Calculating Percentages","b0a3c9fe":"## Expression","69d3e7ee":"## Reflection","df1afa46":"## Creating Connection to a Database","e07d8699":"## Group By"}}