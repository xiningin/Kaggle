{"cell_type":{"8f42349f":"code","67fae9f5":"code","e808ce9b":"code","d25e10de":"code","b95c4f2a":"code","f8fabce8":"code","061017aa":"code","6636c759":"code","580cd8af":"code","078dc651":"code","1a29035d":"code","c63ca57d":"code","91ed8833":"code","6a2c527b":"code","1d614b31":"code","a6608724":"code","df591228":"code","e911c676":"code","276fd6f6":"code","eb34bead":"code","f4af3d16":"code","bcabda54":"code","22b4a290":"code","036aa3b3":"code","9f7e23cb":"markdown","fc7f063a":"markdown","1e6a54e1":"markdown","a1cdfa6b":"markdown","ef1e6a22":"markdown","92df9b37":"markdown","e6c60761":"markdown","cd6c3809":"markdown","331bf3de":"markdown","f9ce79f5":"markdown","6806460f":"markdown","50fb90dc":"markdown","04926f3d":"markdown","42e83f09":"markdown","b339f607":"markdown","8acecddf":"markdown"},"source":{"8f42349f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67fae9f5":"import numpy as np\nimport pandas as pd\nimport random as rn\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nimport tensorflow.keras.layers as L\nfrom tensorflow.keras.losses import SparseCategoricalCrossentropy\nfrom tensorflow.keras.optimizers import Adam\n\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import confusion_matrix, accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\n\nimport nltk\nfrom nltk.corpus import stopwords\n\nimport seaborn as sns\nimport re","e808ce9b":"DESC_FILE = \"..\/input\/fiction-corpus-for-agebased-text-classification\/description.csv\"\nCOLS = ['file_name', 'book_title', 'author', 'age_rating', 'genres']\n\ndesc_df = pd.read_csv(DESC_FILE, encoding=\"utf-8\", delimiter=';', names=COLS)\ndesc_df.head()","d25e10de":"TRAIN_DIR = \"..\/input\/fiction-corpus-for-agebased-text-classification\/train\/\"\nTEST_DIR = \"..\/input\/fiction-corpus-for-agebased-text-classification\/test\/\"\n\ndef get_text(row):\n    \n    ## Find a file in train directory if not \n    ## found go to test directory\n    \n    try:\n        f = open(TRAIN_DIR + row['file_name'], \"r\")\n        row['file_name'] = ' '.join(f.read().split())\n        row['data'] = 'Train'\n        return row\n    \n    except FileNotFoundError:\n        \n        f = open(TEST_DIR + row['file_name'], \"r\")\n        row['file_name'] = ' '.join(f.read().split())\n        row['data'] = 'Test'\n        return row\n    \n\ndesc_df['data'] = 'All'\ndata = desc_df[['file_name','age_rating', 'data']].apply(get_text, axis=1)\ndata.columns = ['text', 'age', 'data']\n\ndata.head()","b95c4f2a":"train_df = data.query(\"data == 'Train'\").reset_index(drop=True)\ntrain_df.head()","f8fabce8":"test_df = data.query(\"data == 'Test'\").reset_index(drop=True)\ntest_df.head()","061017aa":"data_dist = data['data'].value_counts()\nfig = go.Figure(go.Bar(x = data_dist.index, y = data_dist.values))\n\nfig.update_layout(title_text=\"Data Distribution\")\nfig.show()","6636c759":"age_dist_train = train_df['age'].value_counts()\nage_dist_test = test_df['age'].value_counts()\n\nfig = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=(\"Train\",\"Test\")\n)\n\nfig.add_trace(\n    go.Bar(x = age_dist_train.index, y = age_dist_train.values),\n    col=1, row=1\n)\n\nfig.add_trace(\n    go.Bar(x = age_dist_test.index, y = age_dist_test.values),\n    col=2, row=1\n)\n\nfig.update_layout(title_text=\"Age Distribution\")","580cd8af":"bins = [0, 6, 12, 18]\nlabels = ['0-6','7-12','13-18']\nbinned_age_train = pd.cut(train_df['age'], bins=bins, labels=labels).value_counts()\nbinned_age_test = pd.cut(test_df['age'], bins=bins, labels=labels).value_counts()\n\nfig = make_subplots(\n    rows=1, cols=2,\n    subplot_titles=(\"Train\",\"Test\")\n)\n\nfig.add_trace(\n    go.Bar(x = binned_age_train.index, y = binned_age_train.values),\n    col=1, row=1\n)\n\nfig.add_trace(\n    go.Bar(x = binned_age_test.index, y = binned_age_test.values),\n    col=2, row=1\n)\n\nfig.update_layout(title_text=\"Binned Age Distribution\")","078dc651":"X_train = train_df['text'].copy()\ny_train = pd.cut(train_df['age'], bins=bins, labels=labels).copy()\n\nX_test = test_df['text'].copy()\ny_test = pd.cut(test_df['age'], bins=bins, labels=labels).copy()","1a29035d":"%%time\n#from nltk.stem.snowball import SnowballStemmer\nfrom nltk.tokenize import word_tokenize\n#stemmer = SnowballStemmer(\"russian\")\n\ndef data_cleaner(text):\n    \n    text = re.sub(\" \\d+\", \" \", text)\n    \n    \n    #removing stop words\n    text = text.lower().split()\n    text = \" \".join([word for word in text if not word in stop_words])\n    \n    #Stemming\n    #text = \" \".join([stemmer.stem(w) for w in text])\n    \n    return text\n\n#ps = PorterStemmer() \nstop_words = set(stopwords.words('russian'))\n\nX_train_cleaned = X_train.apply(data_cleaner)\nX_test_cleaned = X_test.apply(data_cleaner)\n\nX_train_cleaned.head()","c63ca57d":"length_dist = [len(x.split(\" \")) for x in X_train]\nplt.hist(length_dist)\nplt.title(\"Sequence length distribution\")\nplt.show()","91ed8833":"%%time\n\nvocab_size = 80000\n\ntokenizer = Tokenizer(lower=False, num_words=vocab_size)\ntokenizer.fit_on_texts(X_train)\n\nX_train_enc = tokenizer.texts_to_sequences(X_train)\nX_test_enc = tokenizer.texts_to_sequences(X_test)\n\n#vocab_size = len(tokenizer.word_index)+1\n#exp_sen = 1\n\nprint(\"Vocabulary size: {}\".format(vocab_size))\n#print(\"max length of sentence: {}\".format(max_length))\n#print(\"\\nExample:\\n\")\n#print(\"Sentence:\\n{}\".format(X_train[exp_sen]))\n#print(\"\\nAfter tokenizing :\\n{}\".format(X_train_enc[exp_sen]))","6a2c527b":"max_len = 10000\n\nX_train_pd = pad_sequences(X_train_enc, padding='post', maxlen=max_len)\nX_test_pd = pad_sequences(X_test_enc, padding='post', maxlen=max_len)","1d614b31":"encoding = {'0-6': 0,\n            '7-12': 1,\n            '13-18': 2}\n\nlabels = ['0-6', '7-12', '13-18']\n\ny_train_enc = y_train.copy()\ny_test_enc = y_test.copy()\n\ny_train_enc.replace(encoding, inplace=True)\ny_test_enc.replace(encoding, inplace=True)","a6608724":"tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\ntf.config.experimental_connect_to_cluster(tpu)\ntf.tpu.experimental.initialize_tpu_system(tpu)\ntpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)","df591228":"seed_value = 1337\nnp.random.seed(seed_value)\ntf.random.set_seed(seed_value)\nrn.seed(seed_value)\n\n\n\n# hyper parameters\nEPOCHS = 5\nBATCH_SIZE = 256\nembedding_dim = 16\n\nwith tpu_strategy.scope():\n    model = tf.keras.Sequential([\n        L.Embedding(vocab_size, embedding_dim, input_length=X_train_pd.shape[1]),\n        L.Bidirectional(L.LSTM(64,return_sequences=True)),\n        L.Conv1D(64,8),\n        L.MaxPool1D(),\n        L.Bidirectional(L.LSTM(64,return_sequences=True)),\n        L.Conv1D(64,6),\n        L.MaxPool1D(),\n        L.Bidirectional(L.LSTM(64,return_sequences=True)),\n        L.Conv1D(64,3),\n        L.MaxPool1D(),\n        #L.LSTM(64,return_sequences=True),\n        #L.Conv1D(64,2),\n        #L.GlobalMaxPooling1D(),\n        L.Flatten(),\n        L.Dropout(0.5),\n        L.Dense(128, activation=\"relu\"),\n        L.Dropout(0.5),\n        L.Dense(64, activation=\"relu\"),\n        L.Dropout(0.5),\n        L.Dense(3, activation=\"softmax\")\n    ])\n\n\n    model.compile(loss=SparseCategoricalCrossentropy(),\n                  optimizer='adam',metrics=['accuracy']\n                 )\n\nmodel.summary()","e911c676":"history = model.fit(X_train_pd, y_train_enc, epochs=EPOCHS, validation_split=0.12, batch_size=BATCH_SIZE)","276fd6f6":"fig = px.line(\n    history.history, y=['loss', 'val_loss'],\n    labels={'index': 'epoch', 'value': 'loss'}\n)\n\nfig.show()","eb34bead":"fig = px.line(\n    history.history, y=['accuracy', 'val_accuracy'],\n    labels={'index': 'epoch', 'value': 'accuracy'}\n)\n\nfig.show()","f4af3d16":"pred = model.predict_classes(X_test_pd[0:1000], batch_size=8)","bcabda54":"print('Accuracy: {}'.format(accuracy_score(pred, y_test_enc)))","22b4a290":"conf = confusion_matrix(y_test_enc, pred)\n\ncm = pd.DataFrame(\n    conf, index = [i for i in labels],\n    columns = [i for i in labels]\n)\n\nplt.figure(figsize = (12,7))\nsns.heatmap(cm, annot=True, fmt=\"d\")\nplt.show()","036aa3b3":"print(classification_report(y_test_enc, pred, target_names=labels))","9f7e23cb":"### Padding","fc7f063a":"## Distributions","1e6a54e1":"### Accuracy","a1cdfa6b":"The age distribution is quite imbalanced so it is very difficult to train a good model on this data, lets try to bin the age feature","ef1e6a22":"## Model building and training","92df9b37":"### Test data","e6c60761":"### Training history","cd6c3809":"### Train data","331bf3de":"### Label encoding","f9ce79f5":"### Classification report","6806460f":"## Loading train\/test data from directories","50fb90dc":"### Confusion matrix","04926f3d":"### Cleaning","42e83f09":"## Evaluation","b339f607":"### Tokenization","8acecddf":"## Data preprocessing"}}