{"cell_type":{"cee3df4b":"code","ad38cd0e":"code","a240d663":"code","56734275":"code","834483fc":"code","f88bba05":"code","af18fce1":"code","bbd0074a":"code","4871be9c":"code","e6e6a8f5":"code","8537c790":"code","4df7925a":"code","4e0c3e75":"code","53be2864":"code","3ba3ddea":"code","8c1c8412":"code","1eacdad1":"code","3ce60c60":"code","9375d97c":"code","0043c921":"code","0f4fa0b4":"code","cc0a42b5":"code","96f13887":"code","3869f502":"code","0230a610":"code","e48b6baa":"code","3ab88e00":"code","213f9ad1":"code","9d471d44":"code","d3058aa4":"code","e5748bc8":"code","19deb993":"markdown","8dc1a46a":"markdown"},"source":{"cee3df4b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ad38cd0e":"# for basic mathematics operation \nimport numpy as np\n\n# for dataframe manipulations\nimport pandas as pd\n\n# for Data Visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns","a240d663":"df = pd.read_csv('..\/input\/ccdata\/CC GENERAL.csv')\ndf.head()","56734275":"df.isnull().sum()","834483fc":"df.shape","f88bba05":"df.dropna(inplace=True)","af18fce1":"df.isnull().sum()","bbd0074a":"df.shape","4871be9c":"df.drop(['CUST_ID'], axis=1, inplace=True)","e6e6a8f5":"plt.figure(figsize=(20,8))\nsns.heatmap(df.corr(), annot = True, cmap = 'copper')\nplt.title('Correlation Heatmap of the Data', fontsize = 15)\nplt.show()","8537c790":"df.columns","4df7925a":"plt.figure(figsize=(20,60))\nfor i, col in enumerate(df.columns):\n    if df[col].dtype != 'object':\n        ax = plt.subplot(15, 2, i+1)\n        sns.kdeplot(df[col], ax=ax)\n        plt.xlabel(col)\n        \nplt.show()","4e0c3e75":"cols = ['BALANCE', 'ONEOFF_PURCHASES', 'INSTALLMENTS_PURCHASES', 'CASH_ADVANCE',\n 'ONEOFF_PURCHASES_FREQUENCY','PURCHASES_INSTALLMENTS_FREQUENCY', 'CASH_ADVANCE_TRX',\n  'PURCHASES_TRX', 'CREDIT_LIMIT', 'PAYMENTS', 'MINIMUM_PAYMENTS', 'PRC_FULL_PAYMENT']","53be2864":"df_loged = df.copy()","3ba3ddea":"for col in cols:\n    df_loged[col] = np.log1p(df_loged[col])","8c1c8412":"plt.figure(figsize=(20,60))\nfor i, col in enumerate(df_loged.columns):\n    if df_loged[col].dtype != 'object':\n        ax = plt.subplot(15, 2, i+1)\n        sns.kdeplot(df_loged[col], ax=ax)\n        plt.xlabel(col)\n        \nplt.show()","1eacdad1":"from sklearn.manifold import TSNE\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import AgglomerativeClustering\nfrom sklearn.metrics import silhouette_score\n\nimport plotly \nimport plotly.graph_objects as go\nimport plotly.express as px","3ce60c60":"df_new = StandardScaler().fit_transform(df)","9375d97c":"df_new","0043c921":"df","0f4fa0b4":"# import scipy.cluster.hierarchy as shc\n# plt.figure(figsize=(10, 7))  \n# plt.title(\"Dendrograms\")  \n# dend = shc.dendrogram(shc.linkage(df, method='ward'))\n","cc0a42b5":"tsne_projection = TSNE(n_components=2, \n                       perplexity=2.5, \n                       learning_rate=1, \n                       init='pca', \n                       method='barnes_hut', \n                       n_jobs=2, \n                       n_iter=10**4, \n                       random_state=0).fit_transform(df_new.T)\n\ntsne_projection = pd.DataFrame(tsne_projection, index=df.columns)","96f13887":"tsne_projection.shape","3869f502":"fig = px.scatter(x=tsne_projection[0], y=tsne_projection[1], text=tsne_projection.index)\nfig.update_traces(textposition='top center')\nfig.update_layout(height=1000, width=1200, title_text='TSNE')\nfig.show()","0230a610":"range_n_cluster = list(range(2,15))\nsilhoutte_score = []\nbest_cluster_model = None \n\nfor n_clusters in range_n_cluster:\n    cluster_model  = AgglomerativeClustering(n_clusters=n_clusters, linkage='ward')\n    cluster_labels = cluster_model.fit_predict(tsne_projection)\n    \n    silhouette_avg = silhouette_score(tsne_projection, cluster_labels)\n    silhoutte_score += [silhouette_avg]\n    \n    if silhouette_avg >= np.max(silhoutte_score):\n        best_cluster_model = cluster_model","e48b6baa":"plt.plot(range_n_cluster, silhoutte_score)\nplt.axvline(best_cluster_model.n_clusters, color='black')","3ab88e00":"cluster_labels = [\"group_\" + str(label) \n                 for label in best_cluster_model.labels_]","213f9ad1":"cluster_labels","9d471d44":"fig = px.scatter(x=tsne_projection[0], \n                 y=tsne_projection[1], \n                 text=tsne_projection.index, \n                 color=cluster_labels)\nfig.update_traces(textposition='top center')\nfig.update_layout(height=1000, width=1200, title_text='Cluster')\nfig.show()","d3058aa4":"# How to better write this\ngroups_clusters = tsne_projection.index.to_series().groupby(cluster_labels).apply(list)","e5748bc8":"for cluster, features in groups_clusters.items():\n    print(cluster)\n    print(features)","19deb993":"- CUSTID : Identification of Credit Card holder (Categorical)\n- BALANCE : Balance amount left in their account to make purchases (\n- BALANCEFREQUENCY : How frequently the Balance is updated, score between 0 and 1 (1 = frequently updated, 0 = not frequently updated)\n- PURCHASES : Amount of purchases made from account\n- ONEOFFPURCHASES : Maximum purchase amount done in one-go\n- INSTALLMENTSPURCHASES : Amount of purchase done in installment\n- CASHADVANCE : Cash in advance given by the user\n- PURCHASESFREQUENCY : How frequently the Purchases are being made, score between 0 and 1 (1 = frequently purchased, 0 = not frequently purchased)\n- ONEOFFPURCHASESFREQUENCY : How frequently Purchases are happening in one-go (1 = frequently purchased, 0 = not frequently purchased)\n- PURCHASESINSTALLMENTSFREQUENCY : How frequently purchases in installments are being done (1 = frequently done, 0 = not frequently done)\n- CASHADVANCEFREQUENCY : How frequently the cash in advance being paid\n- CASHADVANCETRX : Number of Transactions made with \"Cash in Advanced\"\n- PURCHASESTRX : Numbe of purchase transactions made\n- CREDITLIMIT : Limit of Credit Card for user\n- PAYMENTS : Amount of Payment done by user\n- MINIMUM_PAYMENTS : Minimum amount of payments made by user\n- PRCFULLPAYMENT : Percent of full payment paid by user\n- TENURE : Tenure of credit card service for user","8dc1a46a":"#### As we can see that all of features are skewed and we will try to handle it with log"}}