{"cell_type":{"277df506":"code","ce93296c":"code","e2c97186":"code","cf62f10c":"code","35df744d":"code","aaf38f15":"code","5deee33f":"code","f7a18cc4":"code","a69b33d1":"code","f42bbb03":"code","21b96514":"code","b726481e":"code","687bb081":"code","bfcdf2dc":"code","25d3370d":"code","7803f306":"code","00b47efe":"code","d98edb7d":"code","25706c64":"code","16538059":"code","fda7483e":"code","d28efbf6":"code","79c6072d":"code","0f44060a":"code","15d59762":"code","c3b335a0":"code","45d9df09":"code","ca0dfab2":"markdown","6631c56d":"markdown","0f7dee1b":"markdown","449025d7":"markdown","6089860c":"markdown","a97d9d46":"markdown","0ccc7531":"markdown","a02c261a":"markdown","ef6981f7":"markdown","5b5cd3ea":"markdown","23754a01":"markdown","c280e0cb":"markdown","9843f6d1":"markdown","5ae8c348":"markdown","65766075":"markdown"},"source":{"277df506":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce93296c":"scores=pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/genome_scores.csv')","e2c97186":"movie=pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/movie.csv')","cf62f10c":"scores.head()","35df744d":"scores.shape","aaf38f15":"scores['movieId'].unique()","5deee33f":"scores['movieId'].nunique()","f7a18cc4":"scores['tagId'].unique()","a69b33d1":"scores['tagId'].nunique()","f42bbb03":"scores.describe()","21b96514":"movie_tag_pivot=pd.pivot_table(columns='tagId',index='movieId',values='relevance',data=scores)","b726481e":"movie_tag_pivot","687bb081":"movie_tag_pivot.fillna(-100,inplace=True)","bfcdf2dc":"from sklearn.neighbors import  NearestNeighbors","25d3370d":"nn=NearestNeighbors(algorithm='brute',metric='minkowski',p=8)","7803f306":"nn.fit(movie_tag_pivot)","00b47efe":"def recommend(movie_id):\n    distances,suggestions=nn.kneighbors(movie_tag_pivot.loc[movie_id,:].values.reshape(1,-1),n_neighbors=16)\n    return movie_tag_pivot.iloc[suggestions[0]].index.to_list()","d98edb7d":"scores_movie=movie[movie['movieId'].isin(movie_tag_pivot.index.to_list())]","25706c64":"scores_movie[scores_movie['title'].str.contains('avengers',case=False)]","16538059":"recommendations=recommend(89745)","fda7483e":"recommendations","d28efbf6":"for movie_id  in recommendations[1:]:\n    print(movie[movie['movieId']==movie_id]['title'].values[0])","79c6072d":"scores_movie[scores_movie['title'].str.contains('harry potter',case=False)]","0f44060a":"recommendations=recommend(4896)","15d59762":"for movie_id  in recommendations[1:]:\n    print(movie[movie['movieId']==movie_id]['title'].values[0])","c3b335a0":"import pickle","45d9df09":"pickle.dump(nn,open('engine.pkl','wb'))\npickle.dump(movie_tag_pivot,open('movie_tag_pivot_table.pkl','wb'))\npickle.dump(scores_movie,open('movie_names.pkl','wb'))","ca0dfab2":"## Importing the dataset","6631c56d":"#### Filling the missing values just in case there is any","0f7dee1b":"## Making the pivot table with rows as `Movies`, columns as `Tags` and values as their `Relevance`","449025d7":"### How many tags are associated with every movie?","6089860c":"### Let's see what these recommedations are!","a97d9d46":"### Let's see what recommendations we get on passing Sorcerer's Stone(movie id: 4896) to our recommend function","0ccc7531":"### How many movies are there?","a02c261a":"# Movie Recommender\n\n### In this notebook, we try to build a movie recommender engine using the Tags of the movies(genome_scores.csv).","ef6981f7":"### Let's filter our movie DataFrame to have only the moovies that are there in the pivot_table","5b5cd3ea":"### Let's see what recommendations we get on passing Avengers(movie id: 89745) to our recommend function","23754a01":"### Let's dump our model","c280e0cb":"### Let's search for an Avengers movie","9843f6d1":"## Function to give the recommendations on providing a Movie Id ","5ae8c348":"### Let's search for Harry Potter","65766075":"#### Taking a Preview"}}