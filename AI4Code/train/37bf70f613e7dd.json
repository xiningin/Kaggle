{"cell_type":{"22d13d73":"code","c91d8eb5":"code","a0e260fb":"code","a48bd6cd":"code","42e84d5f":"code","482b752d":"code","73506265":"code","53081c8e":"code","9c6c859b":"code","0aa5111f":"code","6db9e8a1":"code","88bb8222":"code","ef376a8c":"code","9ef8ab97":"code","df7e0fd6":"code","667acde0":"code","2b7bbc48":"code","3f09cfee":"code","2cecab6a":"code","179e974f":"markdown","872962fe":"markdown","41c74206":"markdown","6b5718ae":"markdown","3b45055a":"markdown","5bf6bd18":"markdown","115b0e5d":"markdown"},"source":{"22d13d73":"! pip install pycaret","c91d8eb5":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom pycaret.regression import setup, compare_models, blend_models, finalize_model, predict_model","a0e260fb":"train = pd.read_csv(r'..\/input\/30-days-of-ml\/train.csv')\ntest = pd.read_csv(r'..\/input\/30-days-of-ml\/test.csv')\nsubmission = pd.read_csv(r'..\/input\/30-days-of-ml\/sample_submission.csv')","a48bd6cd":"train.shape, test.shape, submission.shape","42e84d5f":"train.head()","482b752d":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","73506265":"train.nunique()","53081c8e":"plt.figure(figsize=(15,5))\nsns.kdeplot(train['target'], shade = True, alpha = 0.9, linewidth = 1.5, facecolor=(1, 1, 1, 0), edgecolor=\".2\")\nplt.title(\"Target\", fontdict={'fontsize':20})\nplt.show()","9c6c859b":"# plot the boxplot of area distribution\nplt.figure(figsize=(15,5))\nsns.boxplot(train.target,color = 'white',linewidth=2.5)\nplt.title('target Distribution')\nplt.xlabel('target')\nplt.show()","0aa5111f":"fig, axes =plt.subplots(5,2, figsize=(15,15), sharex=True)\naxes = axes.flatten()\nobject_bol = train.dtypes == 'object'\nfor ax, catplot in zip(axes, train.dtypes[object_bol].index):\n    sns.countplot(y=catplot, data=train, ax=ax)\nplt.tight_layout()     \nplt.show()","6db9e8a1":"fig = plt.figure(figsize = (15, 60))\nfor i in range(len(train.columns.tolist()[10:24])):\n    plt.subplot(20,5,i+1)\n    sns.set_style(\"white\")\n    plt.title(train.columns.tolist()[10:24][i], size = 12, fontname = 'monospace')\n    a = sns.kdeplot(train[train.columns.tolist()[10:24][i]], shade = True, alpha = 0.9, linewidth = 1.5, facecolor=(1, 1, 1, 0), edgecolor=\".2\")\n    plt.ylabel('')\n    plt.xlabel('')\n    plt.xticks(fontname = 'monospace')\n    plt.yticks([])\n    for j in ['right', 'left', 'top']:\n        a.spines[j].set_visible(False)\n        a.spines['bottom'].set_linewidth(1.2)\n        \nfig.tight_layout(h_pad = 3)\nplt.show()","88bb8222":"fig = plt.figure(figsize = (15, 60))\nfor i in range(len(train.columns.tolist()[10:24])):\n    plt.subplot(20,5,i+1)\n    sns.set_style(\"white\")\n    plt.title(train.columns.tolist()[10:24][i], size = 12, fontname = 'monospace')\n    a = sns.boxplot(train[train.columns.tolist()[10:24][i]], linewidth = 2.5,color = 'white')\n    plt.ylabel('')\n    plt.xlabel('')\n    plt.xticks(fontname = 'monospace')\n    plt.yticks([])\n    for j in ['right', 'left', 'top']:\n        a.spines[j].set_visible(False)\n        a.spines['bottom'].set_linewidth(1.2)\n        \nfig.tight_layout(h_pad = 3)\nplt.show()\n","ef376a8c":"print('train continuous features: ')\ntrain.describe().T.style.bar(subset=['mean'], color='#606ff2')\\\n                            .background_gradient(subset=['std'], cmap='PuBu')\\\n                            .background_gradient(subset=['50%'], cmap='PuBu')","9ef8ab97":"print('test continuous features: ')\ntest.describe().T.style.bar(subset=['mean'], color='#606ff2')\\\n                            .background_gradient(subset=['std'], cmap='PuBu')\\\n                            .background_gradient(subset=['50%'], cmap='PuBu')","df7e0fd6":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ncat_cols = ['cat0','cat1','cat2','cat3','cat4','cat5','cat6','cat7','cat8','cat9']\nfor i in cat_cols:\n    train[i] = le.fit_transform(train[i])\n    test[i] = le.transform(test[i])","667acde0":"from sklearn.preprocessing import MinMaxScaler\nss = MinMaxScaler()\ncont_cols = ['cont0','cont1','cont2','cont3','cont4','cont5','cont6','cont7','cont8','cont9','cont10','cont11','cont12','cont13']\nfor i in cont_cols:\n    train[i] = ss.fit_transform(np.array(train[i]).reshape(-1,1))\n    test[i] = ss.transform(np.array(test[i]).reshape(-1,1))","2b7bbc48":"def pycaret_model(train, target,test, n_select, fold, opt):\n    print('Setup Your Data....')\n    setup(data=train,\n          target=target,\n          silent= True,\n         use_gpu = True)\n  \n    print('Comparing Models....')\n    best = compare_models(sort=opt, n_select=n_select, fold = fold,include=['xgboost','lightgbm','catboost'])\n    \n    \n    print('Blending Models....')\n    blended = blend_models(estimator_list= best, fold=fold, optimize=opt)\n    pred = predict_model(blended)\n    \n    \n    print('Finallizing Models....')\n    final_model = finalize_model(blended)\n    print('Done...!!!')\n\n    pred_test = predict_model(final_model, test)\n    re = pred_test['Label']\n\n    return re\n","3f09cfee":"submission['target'] = pycaret_model(train,'target',test, 2, 10, 'RMSE')","2cecab6a":"submission.to_csv('submission.csv',index=False)","179e974f":"### **Data preprocessinng**","872962fe":"#### **PyCaret**","41c74206":"### **Data Visualization**\n","6b5718ae":"#### **Continuous Features**","3b45055a":"![](https:\/\/i1.wp.com\/pycaret.org\/wp-content\/uploads\/2020\/04\/thumbnail.png?fit=1166%2C656&ssl=1)","5bf6bd18":"\u2699\ufe0f Install PyCaret & Import Libraries\nKaggle notebooks do not provide pycaret by default. So, you can install it with the following command :\n\n> !pip install pycaret","115b0e5d":"#### **Categorical features**"}}