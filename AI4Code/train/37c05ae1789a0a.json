{"cell_type":{"d5db4379":"code","680c0bc9":"code","3b805d0b":"code","7353c5a1":"code","ffa98b19":"code","78143795":"code","29ca7f7d":"code","98b7a421":"code","470aa8bf":"code","e3d72f83":"code","72104940":"code","68c3e766":"code","2bea80ee":"code","5c8ec20b":"code","eecc92f6":"code","18bef6f9":"code","1b367301":"code","46e2ccb8":"code","67b5c1a9":"markdown"},"source":{"d5db4379":"#importing required libraries\nimport numpy as np\nimport pandas as pd\n\nimport os","680c0bc9":"import tensorflow as tf\ntf.__version__","3b805d0b":"from tensorflow import keras","7353c5a1":"#importing required libraries\nimport cv2\nfrom tensorflow.keras.preprocessing.image import load_img ,img_to_array\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.models import Sequential \nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import MaxPooling2D,AveragePooling2D\nfrom tensorflow.keras.layers import Dense,Activation\nfrom tensorflow.keras.layers import Flatten,Dropout,SpatialDropout2D\nfrom tensorflow.keras.optimizers import SGD\nfrom tensorflow.keras.optimizers import Adam","ffa98b19":"#accesing dataset\npath = \"\/kaggle\/input\/breast-ultrasound-images-dataset\/Dataset_BUSI_with_GT\"\ndir_list = [os.path.join(path,i) for i in os.listdir(path)]\nsize_dict = {}\nfor i,value in enumerate(dir_list):\n    size_dict[os.listdir(path)[i]] = len(os.listdir(value))\nsize_dict ","78143795":"import re\ndef clean(name):\n    name = re.sub('[benign ().p]','',str(name))\n    return name","29ca7f7d":"df = pd.DataFrame(os.listdir(dir_list[0]))\n# df = df.apply(str,axis=1)\ndf = df[0].apply(clean)\n# print(df.info())\ndf = df[~df.str.contains('mask',regex =False)]\ndf = df.apply(int)\ndf_list = list(df)\ntype(df_list)\ndf_list.sort()\nprint(len(df_list))","98b7a421":"img_size = 128\nimg_channel = 1\nX_b , Xm_b , y_b = np.zeros((437,img_size,img_size,img_channel)) , np.zeros((437,img_size,img_size,img_channel)) , np.full(437,'benign') \nX_n , Xm_n , y_n = np.zeros((133,img_size,img_size,img_channel)) , np.zeros((133,img_size,img_size,img_channel)) , np.full(133,'normal') \nX_m , Xm_m , y_m = np.zeros((210,img_size,img_size,img_channel)) , np.zeros((210,img_size,img_size,img_channel)) , np.full(210,'malignant')","470aa8bf":"img1_path = os.path.join(os.path.join(path,'benign'),os.listdir(os.path.join(path,'benign'))[1])\n\npil_img = load_img(img1_path,color_mode = 'grayscale',target_size=(img_size,img_size))\nimg = img_to_array(pil_img)\nimg_shape = img.shape\nprint(img_shape)\n\ndef img_num(filename):\n    \n    val = 0\n    \n    for i in range(len(filename)) :\n        if filename[i] == '(' :\n            while True :\n                i += 1\n                if filename[i] == ')' :\n                    break\n                val = (val*10) + int(filename[i])\n            break\n    \n    return val\n\nfor tumor_path in dir_list :\n    for image in os.listdir(tumor_path) :\n        p = os.path.join(tumor_path, image)\n        pil_img = load_img(p,color_mode = 'grayscale',target_size=(img_size,img_size))  # read image as grayscale and resize it\n        \n        if image[-5] == ')' :                                   #if real image \n            \n            if image[0] == 'b' :\n                X_b[img_num(image)-1]+= img_to_array(pil_img)  # If image is real add it\n            if image[0] == 'n' :                               # to X as benign , normal\n                X_n[img_num(image)-1]+= img_to_array(pil_img)  # or malignant.\n            if image[0] == 'm' :\n                X_m[img_num(image)-1]+= img_to_array(pil_img)\n        else :                                                 #else masked image\n            \n            if image[0] == 'b' :\n                Xm_b[img_num(image)-1]+= img_to_array(pil_img)  # Similarly add the target\n            if image[0] == 'n' :                               # mask to y.\n                Xm_n[img_num(image)-1]+= img_to_array(pil_img)\n            if image[0] == 'm' :\n                Xm_m[img_num(image)-1]+= img_to_array(pil_img)","e3d72f83":"X = np.concatenate((X_b, X_n, X_m), axis = 0)\nXm = np.concatenate((Xm_b, Xm_n, Xm_m), axis = 0)\ny = np.concatenate((y_b, y_n, y_m), axis = 0)\n\nprint(X.shape)\nprint(Xm.shape)\nprint(y.shape)\nX \/= 255.0\nXm \/= 255.0\n\nprint(X.max())\nprint(Xm.min())","72104940":"plt.figure(figsize = (10,30))\ni = 0\nwhile i < 16 :\n    \n    x = np.random.randint(0,780)\n    \n    plt.subplot(8,2,i+1)\n    plt.imshow(X[x],'gray')\n    plt.title('Real Image' + str(x) + str(y[x]))\n    plt.axis('off')\n    \n    plt.subplot(8,2,i+2)\n    plt.imshow(Xm[x],'gray')\n    plt.title('Mask Image'+ str(x))\n    plt.axis('off')\n    \n    i += 2\nplt.show()","68c3e766":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\n\nencoder  = OneHotEncoder()\n# y = y.toarray()\ny=encoder.fit_transform(y.reshape(y.shape[0],1))\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.15,shuffle=True,random_state=42)\nXm_train,Xm_test,ym_train,ym_test = train_test_split(Xm,y,test_size = 0.15,shuffle=True,random_state=42)\n\nclass_list = encoder.categories_\nprint(X_train.shape,X_test.shape)\nprint(y_train.shape,y_test.shape)","2bea80ee":"from sklearn.metrics import f1_score,roc_auc_score,cohen_kappa_score\ndef evaluation(model,X_train,y_train,X_val,y_val,X_test,y_test,history):\n    train_loss , train_acc = model.evaluate(X_train,y_train.toarray())\n    val_loss, val_acc = model.evaluate(X_val,y_val.toarray())\n    test_loss_value , test_accuracy = model.evaluate(X_test, y_test.toarray())\n    y_pred = model.predict(X_test)\n    y_pred_label = np.argmax(y_pred,axis=1)\n    y_true_label = np.argmax(y_test,axis=1)\n    f1_measure = f1_score(y_true_label,y_pred_label,average='weighted')\n    roc_score = roc_auc_score(y_test.toarray(),y_pred)\n    kappa_score = cohen_kappa_score(y_true_label,y_pred_label)\n    print(\"Train accuracy = \"+str(train_acc))\n    print(\"Validation accuracy = \"+str(val_acc))\n    print('Test accuracy = ' + str(test_accuracy))\n    print(\"f1_measure = \"+str(f1_measure))\n    print(\"KAPPA = \"+str(kappa_score))\n    print(\"roc_area = \"+str(roc_score))","5c8ec20b":"import matplotlib.pyplot as plt\ndef Train_Val_Plot(acc,val_acc,loss,val_loss):\n    \n    fig, (ax1, ax2) = plt.subplots(1,2, figsize= (15,10))\n    fig.suptitle(\" MODEL'S METRICS VISUALIZATION \")\n\n    ax1.plot(range(1, len(acc) + 1), acc)\n    ax1.plot(range(1, len(val_acc) + 1), val_acc)\n    ax1.set_title('History of Accuracy')\n    ax1.set_xlabel('Epochs')\n    ax1.set_ylabel('Accuracy')\n    ax1.legend(['training', 'validation'])\n\n\n    ax2.plot(range(1, len(loss) + 1), loss)\n    ax2.plot(range(1, len(val_loss) + 1), val_loss)\n    ax2.set_title('History of Loss')\n    ax2.set_xlabel('Epochs')\n    ax2.set_ylabel('Loss')\n    ax2.legend(['training', 'validation'])\n    plt.show()","eecc92f6":"import tensorflow as tf\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n\n\ndef fit_evaluate(model,X_train,y_train,X_test,y_test,Epochs,patience):\n    es = EarlyStopping(monitor='val_loss', mode='min', patience=patience,restore_best_weights=True, verbose=1)\n    X1_train,X_val,y1_train,y_val = train_test_split(X_train,y_train,test_size=0.1,random_state=42)\n    history = model.fit(X1_train,y1_train.toarray(),epochs=Epochs,validation_data = (X_val,y_val.toarray()), callbacks=[es])\n    evaluation(model,X1_train,y1_train,X_val,y_val,X_test,y_test,history)\n    Train_Val_Plot(history.history['acc'],history.history['val_acc'],history.history['loss'],history.history['val_loss'])","18bef6f9":"def cnn_2():\n    model = Sequential()\n    \n    model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='valid', input_shape=img_shape)) \n    model.add(MaxPooling2D((2,2)))\n    \n    model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', padding='valid'))   \n    model.add(MaxPooling2D((2,2)))\n    \n    model.add(Dropout(0.5))\n    model.add(Flatten())     \n    \n#     model.add(Dense(128,activation='relu'))\n#     model.add(Dense(128,activation='relu'))\n    model.add(Dense(128,activation='relu'))\n    model.add(Dense(3,activation='softmax'))\n\n    model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['acc'])\n                  \n    return model","1b367301":"model = cnn_2()\nmodel.summary()\nfit_evaluate(model,X_train,y_train,X_test,y_test,30,4)","46e2ccb8":"model = cnn_2()\nfit_evaluate(model,Xm_train,ym_train,Xm_test,ym_test,30,4)","67b5c1a9":"In this way, CNN is trained and cancer is detected in ultrasound images of breast."}}