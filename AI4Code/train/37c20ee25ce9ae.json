{"cell_type":{"eb986856":"code","76fe5b6d":"code","83198ecb":"code","a4b2cdb6":"code","0f8ba1dc":"code","bfa32044":"code","61a4f36d":"code","de4ccde9":"code","7d90dc4f":"code","849f4367":"code","6ad091ea":"code","5ed57612":"code","3d1d3396":"code","bd50daa9":"code","7f15c170":"code","dffb963a":"code","bd53b112":"markdown","ad4e1634":"markdown","95b50e62":"markdown","730686c9":"markdown","12918268":"markdown","2951f131":"markdown","21346588":"markdown","30b2b561":"markdown","716a388e":"markdown","6528d789":"markdown","dfeb4ba6":"markdown","0e260b95":"markdown"},"source":{"eb986856":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","76fe5b6d":"df = pd.read_csv(\"\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\")\ndf = df.iloc[1:, :]","83198ecb":"from IPython.display import display\nfrom ipywidgets import widgets\nfrom IPython.display import clear_output\nfrom ipywidgets import Layout","a4b2cdb6":"import matplotlib.pyplot as plt\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nimport plotly.express as px","0f8ba1dc":"dict1 = {\"Age\" : [\"Q1\",True], \"Gender\" : [\"Q2\",True], \"Country\" : [\"Q3\",True], \"Education\" : [\"Q4\",True], \"Current Title\" : [\"Q5\",True], \"Programming Language\" : [\"Q7\",False], \"Visualization Library\" : [\"Q14\",False], \"Course Platforms\" : [\"Q37\",False]}\ndropdown1 = widgets.Dropdown(\n    options=dict1.keys(),\n    value='Age',\n    description='Feature'\n)\n\n\ndef get_user_selection(change):\n    with out:\n        clear_output(True)\n        if(dict1[dropdown1.value][1]==True):\n            fig = go.Figure([go.Bar(x=df[dict1[dropdown1.value][0]].value_counts().index, y=df[dict1[dropdown1.value][0]].value_counts().values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown1.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df[dict1[dropdown1.value][0]].value_counts().index, values=df[dict1[dropdown1.value][0]].value_counts().values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown1.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[0m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df[dict1[dropdown1.value][0]].value_counts().index[0]} \\033[0m\\033[0m({df[dict1[dropdown1.value][0]].value_counts()[0]}), \\033[1m\\033[95m{df[dict1[dropdown1.value][0]].value_counts().index[1]} \\033[0m\\033[0m({df[dict1[dropdown1.value][0]].value_counts()[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df[dict1[dropdown1.value][0]].value_counts().index[-1]} \\033[0m\\033[0m({df[dict1[dropdown1.value][0]].value_counts()[-1]}), \\033[1m\\033[95m{df[dict1[dropdown1.value][0]].value_counts().index[-2]} \\033[0m\\033[0m({df[dict1[dropdown1.value][0]].value_counts()[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown1.value} \\033[0mcount range : [ \\033[1m\\033[95m{df[dict1[dropdown1.value][0]].value_counts()[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df[dict1[dropdown1.value][0]].value_counts()[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df[dict1[dropdown1.value][0]].value_counts()[0]\/df[dict1[dropdown1.value][0]].value_counts().sum())*100,2)\n            low_perc = np.round((df[dict1[dropdown1.value][0]].value_counts()[-1]\/df[dict1[dropdown1.value][0]].value_counts().sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown1.value} \\033[0mwith highest %(based on the count): \\033[1m\\033[95m{df[dict1[dropdown1.value][0]].value_counts().index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown1.value} \\033[0mwith lowest %(based on the count): \\033[1m\\033[95m{df[dict1[dropdown1.value][0]].value_counts().index[-1]}\\033[0m\\033[0m({low_perc}%)\")\n        else:\n            df_subset = df[[i for i in df.columns if dict1[dropdown1.value][0] in i]]\n            df_subset_count = pd.Series(dtype='int')\n            for i in df_subset.columns:\n                df_subset_count[df_subset[i].value_counts().index[0]] = df_subset[i].count()\n            fig = go.Figure([go.Bar(x=df_subset_count.index, y=df_subset_count.values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown1.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_subset_count.index, values=df_subset_count.values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown1.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[1m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[0]} \\033[0m\\033[0m({df_subset_count[0]}), \\033[1m\\033[95m{df_subset_count.index[1]} \\033[0m\\033[0m({df_subset_count[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[-1]} \\033[0m\\033[0m({df_subset_count[-1]}), \\033[1m\\033[95m{df_subset_count.index[-2]} \\033[0m\\033[0m({df_subset_count[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown1.value} \\033[0mcount range : [ \\033[1m\\033[95m{df_subset_count[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_subset_count[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_subset_count[0]\/df_subset_count.sum())*100,2)\n            low_perc = np.round((df_subset_count[-1]\/df_subset_count.sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown1.value} \\033[0mwith highest %(based on the count): \\033[1m\\033[95m{df_subset_count.index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown1.value} \\033[0mwith lowest %(based on the count): \\033[1m\\033[95m{df_subset_count.index[-1]}\\033[0m\\033[0m({low_perc}%)\")\nbutton = widgets.Button(description = \"Get Insights\")\nbutton.style.button_color = 'lightblue'\nbutton.on_click(get_user_selection)\nui = widgets.HBox([dropdown1,button])\ndisplay(ui)\nout = widgets.Output()\ndisplay(out)","bfa32044":"dict1_suppli = {\"Cloud computing platforms\" : [\"Q26_B\",False], \"Cloud computing products\" : [\"Q27_B\",False], \"Machine learning products\" : [\"Q28_B\",False], \"Big data products\" : [\"Q29_B\",False], \"Business intelligence tools\" : [\"Q31_B\",False], \"Category of automated machine learning tools\" : [\"Q33_B\",False], \"Automated machine learning tools\" : [\"Q34_B\",False], \"Tools for managing ML experiments\" : [\"Q35_B\",False]}\ndropdown1 = widgets.Dropdown(\n    options=dict1_suppli.keys(),\n    value='Cloud computing platforms',\n    description='Feature'\n)\n\n\ndef get_user_selection(change):\n    with out:\n        clear_output(True)\n        if(dict1_suppli[dropdown1.value][1]==True):\n            fig = go.Figure([go.Bar(x=df[dict1_suppli[dropdown1.value][0]].value_counts().index, y=df[dict1_suppli[dropdown1.value][0]].value_counts().values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown1.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df[dict1_suppli[dropdown1.value][0]].value_counts().index, values=df[dict1_suppli[dropdown1.value][0]].value_counts().values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown1.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[0m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df[dict1_suppli[dropdown1.value][0]].value_counts().index[0]} \\033[0m\\033[0m({df[dict1_suppli[dropdown1.value][0]].value_counts()[0]}), \\033[1m\\033[95m{df[dict1_suppli[dropdown1.value][0]].value_counts().index[1]} \\033[0m\\033[0m({df[dict1_suppli[dropdown1.value][0]].value_counts()[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df[dict1_suppli[dropdown1.value][0]].value_counts().index[-1]} \\033[0m\\033[0m({df[dict1_suppli[dropdown1.value][0]].value_counts()[-1]}), \\033[1m\\033[95m{df[dict1_suppli[dropdown1.value][0]].value_counts().index[-2]} \\033[0m\\033[0m({df[dict1_suppli[dropdown1.value][0]].value_counts()[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown1.value} \\033[0mcount range : [ \\033[1m\\033[95m{df[dict1_suppli[dropdown1.value][0]].value_counts()[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df[dict1_suppli[dropdown1.value][0]].value_counts()[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df[dict1_suppli[dropdown1.value][0]].value_counts()[0]\/df[dict1_suppli[dropdown1.value][0]].value_counts().sum())*100,2)\n            low_perc = np.round((df[dict1_suppli[dropdown1.value][0]].value_counts()[-1]\/df[dict1_suppli[dropdown1.value][0]].value_counts().sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown1.value} \\033[0mwith highest %(based on the count): \\033[1m\\033[95m{df[dict1_suppli[dropdown1.value][0]].value_counts().index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown1.value} \\033[0mwith lowest %(based on the count): \\033[1m\\033[95m{df[dict1_suppli[dropdown1.value][0]].value_counts().index[-1]}\\033[0m\\033[0m({low_perc}%)\")\n        else:\n            df_subset = df[[i for i in df.columns if dict1_suppli[dropdown1.value][0] in i]]\n            df_subset_count = pd.Series(dtype='int')\n            for i in df_subset.columns:\n                df_subset_count[df_subset[i].value_counts().index[0]] = df_subset[i].count()\n            fig = go.Figure([go.Bar(x=df_subset_count.index, y=df_subset_count.values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown1.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_subset_count.index, values=df_subset_count.values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown1.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[1m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[0]} \\033[0m\\033[0m({df_subset_count[0]}), \\033[1m\\033[95m{df_subset_count.index[1]} \\033[0m\\033[0m({df_subset_count[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[-1]} \\033[0m\\033[0m({df_subset_count[-1]}), \\033[1m\\033[95m{df_subset_count.index[-2]} \\033[0m\\033[0m({df_subset_count[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown1.value} \\033[0mcount range : [ \\033[1m\\033[95m{df_subset_count[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_subset_count[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_subset_count[0]\/df_subset_count.sum())*100,2)\n            low_perc = np.round((df_subset_count[-1]\/df_subset_count.sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown1.value} \\033[0mwith highest %(based on the count): \\033[1m\\033[95m{df_subset_count.index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown1.value} \\033[0mwith lowest %(based on the count): \\033[1m\\033[95m{df_subset_count.index[-1]}\\033[0m\\033[0m({low_perc}%)\")\nbutton = widgets.Button(description = \"Get Insights\")\nbutton.style.button_color = 'lightblue'\nbutton.on_click(get_user_selection)\nui = widgets.HBox([dropdown1,button])\ndisplay(ui)\nout = widgets.Output()\ndisplay(out)","61a4f36d":"dict_gender = {\"Country\" : [\"Q3\",True], \"Education\" : [\"Q4\",True], \"Current Title\" : [\"Q5\",True], \"Programming Language\" : [\"Q7\",False], \"Machine Learning Experience\" : [\"Q15\",True], \"Compensation\" : [\"Q24\",True]}\nstyle = {'description_width': 'initial'}\ndropdown1 = widgets.Dropdown(\n    options=df[\"Q2\"].unique().tolist(),\n    value='Man',\n    description='Gender',\n    style=style\n)\ndropdown2 = widgets.Dropdown(\n    options=dict_gender.keys(),\n    value='Country',\n    description='Other Feature',\n    style=style\n)\n\ndef get_user_selection(change):\n    with out:\n        clear_output(True)\n        df_sub = df[df[\"Q2\"]==dropdown1.value]\n        if(dict_gender[dropdown2.value][1]==True):\n            fig = go.Figure([go.Bar(x=df_sub[dict_gender[dropdown2.value][0]].value_counts().index, y=df_sub[dict_gender[dropdown2.value][0]].value_counts().values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for gender <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_sub[dict_gender[dropdown2.value][0]].value_counts().index, values=df_sub[dict_gender[dropdown2.value][0]].value_counts().values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for gender <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[0m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown2.value}\\033[0m for gender \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_gender[dropdown2.value][0]].value_counts().index[0]} \\033[0m\\033[0m({df_sub[dict_gender[dropdown2.value][0]].value_counts()[0]}), \\033[1m\\033[95m{df_sub[dict_gender[dropdown2.value][0]].value_counts().index[1]} \\033[0m\\033[0m({df_sub[dict_gender[dropdown2.value][0]].value_counts()[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown2.value}\\033[0m for gender \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_gender[dropdown2.value][0]].value_counts().index[-1]} \\033[0m\\033[0m({df_sub[dict_gender[dropdown2.value][0]].value_counts()[-1]}), \\033[1m\\033[95m{df_sub[dict_gender[dropdown2.value][0]].value_counts().index[-2]} \\033[0m\\033[0m({df_sub[dict_gender[dropdown2.value][0]].value_counts()[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for gender \\033[1m{dropdown1.value}\\033[0m : [ \\033[1m\\033[95m{df_sub[dict_gender[dropdown2.value][0]].value_counts()[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_sub[dict_gender[dropdown2.value][0]].value_counts()[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_sub[dict_gender[dropdown2.value][0]].value_counts()[0]\/df_sub[dict_gender[dropdown2.value][0]].value_counts().sum())*100,2)\n            low_perc = np.round((df_sub[dict_gender[dropdown2.value][0]].value_counts()[-1]\/df_sub[dict_gender[dropdown2.value][0]].value_counts().sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith highest %(based on the count) for gender \\033[1m{dropdown1.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_gender[dropdown2.value][0]].value_counts().index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith lowest %(based on the count) for gender \\033[1m{dropdown1.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_gender[dropdown2.value][0]].value_counts().index[-1]}\\033[0m\\033[0m({low_perc}%)\")\n        else:\n            df_subset = df_sub[[i for i in df_sub.columns if dict_gender[dropdown2.value][0] in i]]\n            df_subset_count = pd.Series(dtype='int')\n            for i in df_subset.columns:\n                df_subset_count[df_subset[i].value_counts().index[0]] = df_subset[i].count()\n            fig = go.Figure([go.Bar(x=df_subset_count.index, y=df_subset_count.values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for gender <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_subset_count.index, values=df_subset_count.values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for gender <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[1m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown2.value}\\033[0m for gender \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[0]} \\033[0m\\033[0m({df_subset_count[0]}), \\033[1m\\033[95m{df_subset_count.index[1]} \\033[0m\\033[0m({df_subset_count[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown2.value}\\033[0m for gender \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[-1]} \\033[0m\\033[0m({df_subset_count[-1]}), \\033[1m\\033[95m{df_subset_count.index[-2]} \\033[0m\\033[0m({df_subset_count[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for gender \\033[1m{dropdown1.value}\\033[0m: [ \\033[1m\\033[95m{df_subset_count[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_subset_count[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_subset_count[0]\/df_subset_count.sum())*100,2)\n            low_perc = np.round((df_subset_count[-1]\/df_subset_count.sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith highest %(based on the count) for gender \\033[1m{dropdown1.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith lowest %(based on the count) for gender \\033[1m{dropdown1.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[-1]}\\033[0m\\033[0m({low_perc}%)\")\nbutton = widgets.Button(description = \"Get Insights\")\nbutton.style.button_color = 'lightblue'\nbutton.on_click(get_user_selection)\nui = widgets.HBox([dropdown1,dropdown2, button])\ndisplay(ui)\nout = widgets.Output()\ndisplay(out)","de4ccde9":"dict_age = {\"Education\" : [\"Q4\",True], \"Current Title\" : [\"Q5\",True], \"Programming Language\" : [\"Q7\",False], \"Machine Learning Experience\" : [\"Q15\",True], \"Compensation\" : [\"Q24\",True]}\nstyle = {'description_width': 'initial'}\ndropdown1 = widgets.Dropdown(\n    options=df[\"Q1\"].unique().tolist(),\n    value='18-21',\n    description='Age Group',\n    style = style\n)\ndropdown2 = widgets.Dropdown(\n    options=dict_age.keys(),\n    value='Education',\n    description='Other Feature',\n    style=style\n)\n\ndef get_user_selection(change):\n    with out:\n        clear_output(True)\n        df_sub = df[df[\"Q1\"]==dropdown1.value]\n        if(dict_age[dropdown2.value][1]==True):\n            fig = go.Figure([go.Bar(x=df_sub[dict_age[dropdown2.value][0]].value_counts().index, y=df_sub[dict_age[dropdown2.value][0]].value_counts().values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for age group <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_sub[dict_age[dropdown2.value][0]].value_counts().index, values=df_sub[dict_age[dropdown2.value][0]].value_counts().values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for age group <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[0m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown2.value}\\033[0m for age group \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_age[dropdown2.value][0]].value_counts().index[0]} \\033[0m\\033[0m({df_sub[dict_age[dropdown2.value][0]].value_counts()[0]}), \\033[1m\\033[95m{df_sub[dict_age[dropdown2.value][0]].value_counts().index[1]} \\033[0m\\033[0m({df_sub[dict_age[dropdown2.value][0]].value_counts()[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown2.value}\\033[0m for age group \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_age[dropdown2.value][0]].value_counts().index[-1]} \\033[0m\\033[0m({df_sub[dict_age[dropdown2.value][0]].value_counts()[-1]}), \\033[1m\\033[95m{df_sub[dict_age[dropdown2.value][0]].value_counts().index[-2]} \\033[0m\\033[0m({df_sub[dict_age[dropdown2.value][0]].value_counts()[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for age group \\033[1m{dropdown1.value}\\033[0m : [ \\033[1m\\033[95m{df_sub[dict_age[dropdown2.value][0]].value_counts()[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_sub[dict_age[dropdown2.value][0]].value_counts()[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_sub[dict_age[dropdown2.value][0]].value_counts()[0]\/df_sub[dict_age[dropdown2.value][0]].value_counts().sum())*100,2)\n            low_perc = np.round((df_sub[dict_age[dropdown2.value][0]].value_counts()[-1]\/df_sub[dict_age[dropdown2.value][0]].value_counts().sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith highest %(based on the count) for age group \\033[1m{dropdown1.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_age[dropdown2.value][0]].value_counts().index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith lowest %(based on the count) for age group \\033[1m{dropdown1.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_age[dropdown2.value][0]].value_counts().index[-1]}\\033[0m\\033[0m({low_perc}%)\")\n        else:\n            df_subset = df_sub[[i for i in df_sub.columns if dict_age[dropdown2.value][0] in i]]\n            df_subset_count = pd.Series(dtype='int')\n            for i in df_subset.columns:\n                df_subset_count[df_subset[i].value_counts().index[0]] = df_subset[i].count()\n            fig = go.Figure([go.Bar(x=df_subset_count.index, y=df_subset_count.values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value} <\/b> for age group <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_subset_count.index, values=df_subset_count.values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for age group <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[1m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown2.value}\\033[0m for age group \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[0]} \\033[0m\\033[0m({df_subset_count[0]}), \\033[1m\\033[95m{df_subset_count.index[1]} \\033[0m\\033[0m({df_subset_count[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown2.value}\\033[0m for age group \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[-1]} \\033[0m\\033[0m({df_subset_count[-1]}), \\033[1m\\033[95m{df_subset_count.index[-2]} \\033[0m\\033[0m({df_subset_count[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for age group \\033[1m{dropdown1.value}\\033[0m: [ \\033[1m\\033[95m{df_subset_count[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_subset_count[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_subset_count[0]\/df_subset_count.sum())*100,2)\n            low_perc = np.round((df_subset_count[-1]\/df_subset_count.sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith highest %(based on the count) for age group \\033[1m{dropdown1.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith lowest %(based on the count) for age group \\033[1m{dropdown1.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[-1]}\\033[0m\\033[0m({low_perc}%)\")\nbutton = widgets.Button(description = \"Get Insights\")\nbutton.style.button_color = 'lightblue'\nbutton.on_click(get_user_selection)\nui = widgets.HBox([dropdown1,dropdown2, button])\ndisplay(ui)\nout = widgets.Output()\ndisplay(out)","7d90dc4f":"dict_title = {\"Education\" : [\"Q4\",True], \"Programming Language\" : [\"Q7\",False], \"Coding\/Programming Experience\" : [\"Q6\",True], \"Compensation\" : [\"Q24\",True], \"Integrated Development Environments (IDE's)\" : [\"Q9\",False]}\nstyle = {'description_width': 'initial'}\ndropdown1 = widgets.Dropdown(\n    options=df[\"Q5\"].unique().tolist(),\n    value='Student',\n    description='Current Title',\n    style = style\n)\ndropdown2 = widgets.Dropdown(\n    options=dict_title.keys(),\n    value='Education',\n    description='Other Feature',\n    style=style\n)\n\ndef get_user_selection(change):\n    with out:\n        clear_output(True)\n        df_sub = df[df[\"Q5\"]==dropdown1.value]\n        if(dict_title[dropdown2.value][1]==True):\n            fig = go.Figure([go.Bar(x=df_sub[dict_title[dropdown2.value][0]].value_counts().index, y=df_sub[dict_title[dropdown2.value][0]].value_counts().values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for current title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_sub[dict_title[dropdown2.value][0]].value_counts().index, values=df_sub[dict_title[dropdown2.value][0]].value_counts().values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for current title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[0m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown2.value}\\033[0m for current title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_title[dropdown2.value][0]].value_counts().index[0]} \\033[0m\\033[0m({df_sub[dict_title[dropdown2.value][0]].value_counts()[0]}), \\033[1m\\033[95m{df_sub[dict_title[dropdown2.value][0]].value_counts().index[1]} \\033[0m\\033[0m({df_sub[dict_title[dropdown2.value][0]].value_counts()[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown2.value}\\033[0m for current title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_title[dropdown2.value][0]].value_counts().index[-1]} \\033[0m\\033[0m({df_sub[dict_title[dropdown2.value][0]].value_counts()[-1]}), \\033[1m\\033[95m{df_sub[dict_title[dropdown2.value][0]].value_counts().index[-2]} \\033[0m\\033[0m({df_sub[dict_title[dropdown2.value][0]].value_counts()[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for current title \\033[1m{dropdown1.value}\\033[0m : [ \\033[1m\\033[95m{df_sub[dict_title[dropdown2.value][0]].value_counts()[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_sub[dict_title[dropdown2.value][0]].value_counts()[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_sub[dict_title[dropdown2.value][0]].value_counts()[0]\/df_sub[dict_title[dropdown2.value][0]].value_counts().sum())*100,2)\n            low_perc = np.round((df_sub[dict_title[dropdown2.value][0]].value_counts()[-1]\/df_sub[dict_title[dropdown2.value][0]].value_counts().sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith highest %(based on the count) for current title \\033[1m{dropdown1.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_title[dropdown2.value][0]].value_counts().index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith lowest %(based on the count) for current title \\033[1m{dropdown1.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_title[dropdown2.value][0]].value_counts().index[-1]}\\033[0m\\033[0m({low_perc}%)\")\n        else:\n            df_subset = df_sub[[i for i in df_sub.columns if dict_title[dropdown2.value][0] in i]]\n            df_subset_count = pd.Series(dtype='int')\n            for i in df_subset.columns:\n                df_subset_count[df_subset[i].value_counts().index[0]] = df_subset[i].count()\n            fig = go.Figure([go.Bar(x=df_subset_count.index, y=df_subset_count.values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value} <\/b> for current title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_subset_count.index, values=df_subset_count.values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for current title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[1m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown2.value}\\033[0m for current title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[0]} \\033[0m\\033[0m({df_subset_count[0]}), \\033[1m\\033[95m{df_subset_count.index[1]} \\033[0m\\033[0m({df_subset_count[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown2.value}\\033[0m for current title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[-1]} \\033[0m\\033[0m({df_subset_count[-1]}), \\033[1m\\033[95m{df_subset_count.index[-2]} \\033[0m\\033[0m({df_subset_count[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for current title \\033[1m{dropdown1.value}\\033[0m: [ \\033[1m\\033[95m{df_subset_count[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_subset_count[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_subset_count[0]\/df_subset_count.sum())*100,2)\n            low_perc = np.round((df_subset_count[-1]\/df_subset_count.sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith highest %(based on the count) for current title \\033[1m{dropdown1.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith lowest %(based on the count) for current title \\033[1m{dropdown1.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[-1]}\\033[0m\\033[0m({low_perc}%)\")\nbutton = widgets.Button(description = \"Get Insights\")\nbutton.style.button_color = 'lightblue'\nbutton.on_click(get_user_selection)\nui = widgets.HBox([dropdown1,dropdown2, button])\ndisplay(ui)\nout = widgets.Output()\ndisplay(out)","849f4367":"dict_ds_ml = {\"Compensation\" : [\"Q24\",True],\"Education\" : [\"Q4\",True],\"Programming Language\" : [\"Q7\",False], \"Integrated Development Environments (IDE's)\" : [\"Q9\",False], \"Hosted Notebook Products\" : [\"Q10\",False], \"Specialized Hardware\" : [\"Q12\",False],\"Visualization Library\" : [\"Q14\",False], \"Machine Learning Experience\" : [\"Q15\",True], \"Machine Learning Framework\" : [\"Q16\",False], \"Machine Learning Product\" : [\"Q28_A\",False], \"Automated Machine Learning Tools\" : [\"Q34_A\",False], \"Tools for managing Machine Learning Experiments\" : [\"Q35_A\",False],\"Platforms for publicy sharing\/deploying Data Analysis or Machine Learning Applications\" : [\"Q36\",False]}\nstyle = {'description_width': 'initial'}\ndropdown1 = widgets.Dropdown(\n    options=[\"Data Scientist\", \"Machine Learning Engineer\"],\n    value='Data Scientist',\n    description='Data Scientist vs ML Engineer',\n    style = style\n)\ndropdown2 = widgets.Dropdown(\n    options=dict_ds_ml.keys(),\n    value='Compensation',\n    description='Other Feature',\n    style=style\n)\n\ndef get_user_selection(change):\n    with out:\n        clear_output(True)\n        df_sub = df[df[\"Q5\"]==dropdown1.value]\n        if(dict_ds_ml[dropdown2.value][1]==True):\n            fig = go.Figure([go.Bar(x=df_sub[dict_ds_ml[dropdown2.value][0]].value_counts().index, y=df_sub[dict_ds_ml[dropdown2.value][0]].value_counts().values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_sub[dict_ds_ml[dropdown2.value][0]].value_counts().index, values=df_sub[dict_ds_ml[dropdown2.value][0]].value_counts().values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[0m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_ds_ml[dropdown2.value][0]].value_counts().index[0]} \\033[0m\\033[0m({df_sub[dict_ds_ml[dropdown2.value][0]].value_counts()[0]}), \\033[1m\\033[95m{df_sub[dict_ds_ml[dropdown2.value][0]].value_counts().index[1]} \\033[0m\\033[0m({df_sub[dict_ds_ml[dropdown2.value][0]].value_counts()[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_ds_ml[dropdown2.value][0]].value_counts().index[-1]} \\033[0m\\033[0m({df_sub[dict_ds_ml[dropdown2.value][0]].value_counts()[-1]}), \\033[1m\\033[95m{df_sub[dict_ds_ml[dropdown2.value][0]].value_counts().index[-2]} \\033[0m\\033[0m({df_sub[dict_ds_ml[dropdown2.value][0]].value_counts()[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for title \\033[1m{dropdown1.value}\\033[0m : [ \\033[1m\\033[95m{df_sub[dict_ds_ml[dropdown2.value][0]].value_counts()[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_sub[dict_ds_ml[dropdown2.value][0]].value_counts()[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_sub[dict_ds_ml[dropdown2.value][0]].value_counts()[0]\/df_sub[dict_ds_ml[dropdown2.value][0]].value_counts().sum())*100,2)\n            low_perc = np.round((df_sub[dict_ds_ml[dropdown2.value][0]].value_counts()[-1]\/df_sub[dict_ds_ml[dropdown2.value][0]].value_counts().sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith highest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_ds_ml[dropdown2.value][0]].value_counts().index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith lowest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_ds_ml[dropdown2.value][0]].value_counts().index[-1]}\\033[0m\\033[0m({low_perc}%)\")\n        else:\n            df_subset = df_sub[[i for i in df_sub.columns if dict_ds_ml[dropdown2.value][0] in i]]\n            df_subset_count = pd.Series(dtype='int')\n            for i in df_subset.columns:\n                df_subset_count[df_subset[i].value_counts().index[0]] = df_subset[i].count()\n            fig = go.Figure([go.Bar(x=df_subset_count.index, y=df_subset_count.values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value} <\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_subset_count.index, values=df_subset_count.values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[1m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[0]} \\033[0m\\033[0m({df_subset_count[0]}), \\033[1m\\033[95m{df_subset_count.index[1]} \\033[0m\\033[0m({df_subset_count[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[-1]} \\033[0m\\033[0m({df_subset_count[-1]}), \\033[1m\\033[95m{df_subset_count.index[-2]} \\033[0m\\033[0m({df_subset_count[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for title \\033[1m{dropdown1.value}\\033[0m: [ \\033[1m\\033[95m{df_subset_count[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_subset_count[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_subset_count[0]\/df_subset_count.sum())*100,2)\n            low_perc = np.round((df_subset_count[-1]\/df_subset_count.sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith highest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith lowest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[-1]}\\033[0m\\033[0m({low_perc}%)\")\nbutton = widgets.Button(description = \"Get Insights\")\nbutton.style.button_color = 'lightblue'\nbutton.on_click(get_user_selection)\nui = widgets.HBox([dropdown1,dropdown2, button])\ndisplay(ui)\nout = widgets.Output()\ndisplay(out)","6ad091ea":"dict_da_ba = {\"Compensation\" : [\"Q24\",True],\"Education\" : [\"Q4\",True],\"Programming Language\" : [\"Q7\",False], \"Coding\/Programming Experience\" : [\"Q6\",True],\"Visualization Library\" : [\"Q14\",False], \"Business Intelligence Tools\" : [\"Q31_A\",False], \"Primary Tool for Data Analysis\" : [\"Q38\",True]}\nstyle = {'description_width': 'initial'}\ndropdown1 = widgets.Dropdown(\n    options=[\"Data Analyst\", \"Business Analyst\"],\n    value='Data Analyst',\n    description='Data Analyst vs Business Analyst',\n    style = style\n)\ndropdown2 = widgets.Dropdown(\n    options=dict_da_ba.keys(),\n    value='Compensation',\n    description='Other Feature',\n    style=style\n)\n\ndef get_user_selection(change):\n    with out:\n        clear_output(True)\n        df_sub = df[df[\"Q5\"]==dropdown1.value]\n        if(dict_da_ba[dropdown2.value][1]==True):\n            fig = go.Figure([go.Bar(x=df_sub[dict_da_ba[dropdown2.value][0]].value_counts().index, y=df_sub[dict_da_ba[dropdown2.value][0]].value_counts().values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_sub[dict_da_ba[dropdown2.value][0]].value_counts().index, values=df_sub[dict_da_ba[dropdown2.value][0]].value_counts().values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[0m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_da_ba[dropdown2.value][0]].value_counts().index[0]} \\033[0m\\033[0m({df_sub[dict_da_ba[dropdown2.value][0]].value_counts()[0]}), \\033[1m\\033[95m{df_sub[dict_da_ba[dropdown2.value][0]].value_counts().index[1]} \\033[0m\\033[0m({df_sub[dict_da_ba[dropdown2.value][0]].value_counts()[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_da_ba[dropdown2.value][0]].value_counts().index[-1]} \\033[0m\\033[0m({df_sub[dict_da_ba[dropdown2.value][0]].value_counts()[-1]}), \\033[1m\\033[95m{df_sub[dict_da_ba[dropdown2.value][0]].value_counts().index[-2]} \\033[0m\\033[0m({df_sub[dict_da_ba[dropdown2.value][0]].value_counts()[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for title \\033[1m{dropdown1.value}\\033[0m : [ \\033[1m\\033[95m{df_sub[dict_da_ba[dropdown2.value][0]].value_counts()[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_sub[dict_da_ba[dropdown2.value][0]].value_counts()[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_sub[dict_da_ba[dropdown2.value][0]].value_counts()[0]\/df_sub[dict_da_ba[dropdown2.value][0]].value_counts().sum())*100,2)\n            low_perc = np.round((df_sub[dict_da_ba[dropdown2.value][0]].value_counts()[-1]\/df_sub[dict_da_ba[dropdown2.value][0]].value_counts().sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith highest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_da_ba[dropdown2.value][0]].value_counts().index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith lowest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_da_ba[dropdown2.value][0]].value_counts().index[-1]}\\033[0m\\033[0m({low_perc}%)\")\n        else:\n            df_subset = df_sub[[i for i in df_sub.columns if dict_da_ba[dropdown2.value][0] in i]]\n            df_subset_count = pd.Series(dtype='int')\n            for i in df_subset.columns:\n                df_subset_count[df_subset[i].value_counts().index[0]] = df_subset[i].count()\n            fig = go.Figure([go.Bar(x=df_subset_count.index, y=df_subset_count.values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value} <\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_subset_count.index, values=df_subset_count.values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[1m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[0]} \\033[0m\\033[0m({df_subset_count[0]}), \\033[1m\\033[95m{df_subset_count.index[1]} \\033[0m\\033[0m({df_subset_count[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[-1]} \\033[0m\\033[0m({df_subset_count[-1]}), \\033[1m\\033[95m{df_subset_count.index[-2]} \\033[0m\\033[0m({df_subset_count[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for title \\033[1m{dropdown1.value}\\033[0m: [ \\033[1m\\033[95m{df_subset_count[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_subset_count[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_subset_count[0]\/df_subset_count.sum())*100,2)\n            low_perc = np.round((df_subset_count[-1]\/df_subset_count.sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith highest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith lowest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[-1]}\\033[0m\\033[0m({low_perc}%)\")\nbutton = widgets.Button(description = \"Get Insights\")\nbutton.style.button_color = 'lightblue'\nbutton.on_click(get_user_selection)\nui = widgets.HBox([dropdown1,dropdown2, button])\ndisplay(ui)\nout = widgets.Output()\ndisplay(out)","5ed57612":"dict_rs_st = {\"Compensation\" : [\"Q24\",True],\"Education\" : [\"Q4\",True],\"Programming Language\" : [\"Q7\",False], \"Coding\/Programming Experience\" : [\"Q6\",True], \"Specialized Hardware\" : [\"Q12\",False]}\nstyle = {'description_width': 'initial'}\ndropdown1 = widgets.Dropdown(\n    options=[\"Statistician\", \"Research Scientist\"],\n    value='Statistician',\n    description='Statistician vs Research Scientist',\n    style = style\n)\ndropdown2 = widgets.Dropdown(\n    options=dict_rs_st.keys(),\n    value='Compensation',\n    description='Other Feature',\n    style=style\n)\n\ndef get_user_selection(change):\n    with out:\n        clear_output(True)\n        df_sub = df[df[\"Q5\"]==dropdown1.value]\n        if(dict_rs_st[dropdown2.value][1]==True):\n            fig = go.Figure([go.Bar(x=df_sub[dict_rs_st[dropdown2.value][0]].value_counts().index, y=df_sub[dict_rs_st[dropdown2.value][0]].value_counts().values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_sub[dict_rs_st[dropdown2.value][0]].value_counts().index, values=df_sub[dict_rs_st[dropdown2.value][0]].value_counts().values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[0m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_rs_st[dropdown2.value][0]].value_counts().index[0]} \\033[0m\\033[0m({df_sub[dict_rs_st[dropdown2.value][0]].value_counts()[0]}), \\033[1m\\033[95m{df_sub[dict_rs_st[dropdown2.value][0]].value_counts().index[1]} \\033[0m\\033[0m({df_sub[dict_rs_st[dropdown2.value][0]].value_counts()[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_rs_st[dropdown2.value][0]].value_counts().index[-1]} \\033[0m\\033[0m({df_sub[dict_rs_st[dropdown2.value][0]].value_counts()[-1]}), \\033[1m\\033[95m{df_sub[dict_rs_st[dropdown2.value][0]].value_counts().index[-2]} \\033[0m\\033[0m({df_sub[dict_rs_st[dropdown2.value][0]].value_counts()[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for title \\033[1m{dropdown1.value}\\033[0m : [ \\033[1m\\033[95m{df_sub[dict_rs_st[dropdown2.value][0]].value_counts()[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_sub[dict_rs_st[dropdown2.value][0]].value_counts()[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_sub[dict_rs_st[dropdown2.value][0]].value_counts()[0]\/df_sub[dict_rs_st[dropdown2.value][0]].value_counts().sum())*100,2)\n            low_perc = np.round((df_sub[dict_rs_st[dropdown2.value][0]].value_counts()[-1]\/df_sub[dict_rs_st[dropdown2.value][0]].value_counts().sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith highest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_rs_st[dropdown2.value][0]].value_counts().index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith lowest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_rs_st[dropdown2.value][0]].value_counts().index[-1]}\\033[0m\\033[0m({low_perc}%)\")\n        else:\n            df_subset = df_sub[[i for i in df_sub.columns if dict_rs_st[dropdown2.value][0] in i]]\n            df_subset_count = pd.Series(dtype='int')\n            for i in df_subset.columns:\n                df_subset_count[df_subset[i].value_counts().index[0]] = df_subset[i].count()\n            fig = go.Figure([go.Bar(x=df_subset_count.index, y=df_subset_count.values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value} <\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_subset_count.index, values=df_subset_count.values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[1m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[0]} \\033[0m\\033[0m({df_subset_count[0]}), \\033[1m\\033[95m{df_subset_count.index[1]} \\033[0m\\033[0m({df_subset_count[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[-1]} \\033[0m\\033[0m({df_subset_count[-1]}), \\033[1m\\033[95m{df_subset_count.index[-2]} \\033[0m\\033[0m({df_subset_count[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for title \\033[1m{dropdown1.value}\\033[0m: [ \\033[1m\\033[95m{df_subset_count[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_subset_count[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_subset_count[0]\/df_subset_count.sum())*100,2)\n            low_perc = np.round((df_subset_count[-1]\/df_subset_count.sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith highest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith lowest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[-1]}\\033[0m\\033[0m({low_perc}%)\")\nbutton = widgets.Button(description = \"Get Insights\")\nbutton.style.button_color = 'lightblue'\nbutton.on_click(get_user_selection)\nui = widgets.HBox([dropdown1,dropdown2, button])\ndisplay(ui)\nout = widgets.Output()\ndisplay(out)","3d1d3396":"dict_de_dba = {\"Compensation\" : [\"Q24\",True],\"Education\" : [\"Q4\",True],\"Programming Language\" : [\"Q7\",False], \"Coding\/Programming Experience\" : [\"Q6\",True], \"Big Data Products\" : [\"Q29_A\",False],\"Cloud Computing Platforms\" : [\"Q26_A\",False],\"Cloud Computing Products\" : [\"Q27_A\",False]}\nstyle = {'description_width': 'initial'}\ndropdown1 = widgets.Dropdown(\n    options=[\"Data Engineer\", \"DBA\"],\n    value='Data Engineer',\n    description='Data Engineer vs DBA',\n    style = style\n)\ndropdown2 = widgets.Dropdown(\n    options=dict_de_dba.keys(),\n    value='Compensation',\n    description='Other Feature',\n    style=style\n)\n\ndef get_user_selection(change):\n    with out:\n        clear_output(True)\n        df_sub = df[df[\"Q5\"]==dropdown1.value]\n        if(dict_de_dba[dropdown2.value][1]==True):\n            fig = go.Figure([go.Bar(x=df_sub[dict_de_dba[dropdown2.value][0]].value_counts().index, y=df_sub[dict_de_dba[dropdown2.value][0]].value_counts().values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_sub[dict_de_dba[dropdown2.value][0]].value_counts().index, values=df_sub[dict_de_dba[dropdown2.value][0]].value_counts().values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[0m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_de_dba[dropdown2.value][0]].value_counts().index[0]} \\033[0m\\033[0m({df_sub[dict_de_dba[dropdown2.value][0]].value_counts()[0]}), \\033[1m\\033[95m{df_sub[dict_de_dba[dropdown2.value][0]].value_counts().index[1]} \\033[0m\\033[0m({df_sub[dict_de_dba[dropdown2.value][0]].value_counts()[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_de_dba[dropdown2.value][0]].value_counts().index[-1]} \\033[0m\\033[0m({df_sub[dict_de_dba[dropdown2.value][0]].value_counts()[-1]}), \\033[1m\\033[95m{df_sub[dict_de_dba[dropdown2.value][0]].value_counts().index[-2]} \\033[0m\\033[0m({df_sub[dict_de_dba[dropdown2.value][0]].value_counts()[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for title \\033[1m{dropdown1.value}\\033[0m : [ \\033[1m\\033[95m{df_sub[dict_de_dba[dropdown2.value][0]].value_counts()[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_sub[dict_de_dba[dropdown2.value][0]].value_counts()[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_sub[dict_de_dba[dropdown2.value][0]].value_counts()[0]\/df_sub[dict_de_dba[dropdown2.value][0]].value_counts().sum())*100,2)\n            low_perc = np.round((df_sub[dict_de_dba[dropdown2.value][0]].value_counts()[-1]\/df_sub[dict_de_dba[dropdown2.value][0]].value_counts().sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith highest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_de_dba[dropdown2.value][0]].value_counts().index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith lowest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_de_dba[dropdown2.value][0]].value_counts().index[-1]}\\033[0m\\033[0m({low_perc}%)\")\n        else:\n            df_subset = df_sub[[i for i in df_sub.columns if dict_de_dba[dropdown2.value][0] in i]]\n            df_subset_count = pd.Series(dtype='int')\n            for i in df_subset.columns:\n                df_subset_count[df_subset[i].value_counts().index[0]] = df_subset[i].count()\n            fig = go.Figure([go.Bar(x=df_subset_count.index, y=df_subset_count.values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value} <\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_subset_count.index, values=df_subset_count.values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown2.value}<\/b> for the title <b>{dropdown1.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown2.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[1m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[0]} \\033[0m\\033[0m({df_subset_count[0]}), \\033[1m\\033[95m{df_subset_count.index[1]} \\033[0m\\033[0m({df_subset_count[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown2.value}\\033[0m for title \\033[1m{dropdown1.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[-1]} \\033[0m\\033[0m({df_subset_count[-1]}), \\033[1m\\033[95m{df_subset_count.index[-2]} \\033[0m\\033[0m({df_subset_count[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for title \\033[1m{dropdown1.value}\\033[0m: [ \\033[1m\\033[95m{df_subset_count[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_subset_count[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_subset_count[0]\/df_subset_count.sum())*100,2)\n            low_perc = np.round((df_subset_count[-1]\/df_subset_count.sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith highest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mwith lowest %(based on the count) for title \\033[1m{dropdown1.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[-1]}\\033[0m\\033[0m({low_perc}%)\")\nbutton = widgets.Button(description = \"Get Insights\")\nbutton.style.button_color = 'lightblue'\nbutton.on_click(get_user_selection)\nui = widgets.HBox([dropdown1,dropdown2, button])\ndisplay(ui)\nout = widgets.Output()\ndisplay(out)","bd50daa9":"dict_gender_country = {\"Compensation\" : [\"Q24\",True],\"Education\" : [\"Q4\",True],\"Current Title\" : [\"Q5\",True]}\nstyle = {'description_width': 'initial'}\ndropdown1 = widgets.Dropdown(\n    options=df[\"Q2\"].unique().tolist(),\n    value='Man',\n    description='Gender',\n    style = style\n)\ndropdown2 = widgets.Dropdown(\n    options=df[\"Q3\"].unique().tolist(),\n    value='India',\n    description='<b> + <\/b> Country',\n    style=style\n)\ndropdown3 = widgets.Dropdown(\n    options=dict_gender_country.keys(),\n    value='Compensation',\n    description='Other Feature',\n    style=style\n)\n\ndef get_user_selection(change):\n    with out:\n        clear_output(True)\n        df_sub = df[(df[\"Q2\"]==dropdown1.value) & ((df[\"Q3\"]==dropdown2.value))]\n        if(dict_gender_country[dropdown3.value][1]==True):\n            fig = go.Figure([go.Bar(x=df_sub[dict_gender_country[dropdown3.value][0]].value_counts().index, y=df_sub[dict_gender_country[dropdown3.value][0]].value_counts().values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown3.value}<\/b> for the gender <b>{dropdown1.value}<\/b> and country <b>{dropdown2.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown3.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_sub[dict_gender_country[dropdown3.value][0]].value_counts().index, values=df_sub[dict_gender_country[dropdown3.value][0]].value_counts().values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown3.value}<\/b> for the gender <b>{dropdown1.value}<\/b> and country <b>{dropdown2.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown3.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[0m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown3.value}\\033[0m for the gender \\033[1m{dropdown1.value}\\033[0m and country \\033[1m{dropdown2.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_gender_country[dropdown3.value][0]].value_counts().index[0]} \\033[0m\\033[0m({df_sub[dict_gender_country[dropdown3.value][0]].value_counts()[0]}), \\033[1m\\033[95m{df_sub[dict_gender_country[dropdown3.value][0]].value_counts().index[1]} \\033[0m\\033[0m({df_sub[dict_gender_country[dropdown3.value][0]].value_counts()[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown3.value}\\033[0m for the gender \\033[1m{dropdown1.value}\\033[0m and country \\033[1m{dropdown2.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_gender_country[dropdown3.value][0]].value_counts().index[-1]} \\033[0m\\033[0m({df_sub[dict_gender_country[dropdown3.value][0]].value_counts()[-1]}), \\033[1m\\033[95m{df_sub[dict_gender_country[dropdown3.value][0]].value_counts().index[-2]} \\033[0m\\033[0m({df_sub[dict_gender_country[dropdown3.value][0]].value_counts()[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mcount range for the gender \\033[1m{dropdown1.value}\\033[0m and country \\033[1m{dropdown2.value}\\033[0m : [ \\033[1m\\033[95m{df_sub[dict_gender_country[dropdown3.value][0]].value_counts()[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_sub[dict_gender_country[dropdown3.value][0]].value_counts()[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_sub[dict_gender_country[dropdown3.value][0]].value_counts()[0]\/df_sub[dict_gender_country[dropdown3.value][0]].value_counts().sum())*100,2)\n            low_perc = np.round((df_sub[dict_gender_country[dropdown3.value][0]].value_counts()[-1]\/df_sub[dict_gender_country[dropdown3.value][0]].value_counts().sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mwith highest %(based on the count) for the gender \\033[1m{dropdown1.value}\\033[0m and country \\033[1m{dropdown2.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_gender_country[dropdown3.value][0]].value_counts().index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mwith lowest %(based on the count) for the gender \\033[1m{dropdown1.value}\\033[0m and country \\033[1m{dropdown2.value}\\033[0m: \\033[1m\\033[95m{df_sub[dict_gender_country[dropdown3.value][0]].value_counts().index[-1]}\\033[0m\\033[0m({low_perc}%)\")\n        else:\n            df_subset = df_sub[[i for i in df_sub.columns if dict_gender_country[dropdown3.value][0] in i]]\n            df_subset_count = pd.Series(dtype='int')\n            for i in df_subset.columns:\n                df_subset_count[df_subset[i].value_counts().index[0]] = df_subset[i].count()\n            fig = go.Figure([go.Bar(x=df_subset_count.index, y=df_subset_count.values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown3.value} <\/b> for the gender <b>{dropdown1.value}<\/b> and country <b>{dropdown2.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown3.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_subset_count.index, values=df_subset_count.values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown3.value}<\/b> for the gender <b>{dropdown1.value}<\/b> and country <b>{dropdown2.value}<\/b>\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown3.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[1m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown3.value}\\033[0m for the gender \\033[1m{dropdown1.value}\\033[0m and country \\033[1m{dropdown2.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[0]} \\033[0m\\033[0m({df_subset_count[0]}), \\033[1m\\033[95m{df_subset_count.index[1]} \\033[0m\\033[0m({df_subset_count[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown3.value}\\033[0m for the gender \\033[1m{dropdown1.value}\\033[0m and country \\033[1m{dropdown2.value}\\033[0m w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[-1]} \\033[0m\\033[0m({df_subset_count[-1]}), \\033[1m\\033[95m{df_subset_count.index[-2]} \\033[0m\\033[0m({df_subset_count[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mcount range for the gender \\033[1m{dropdown1.value}\\033[0m and country \\033[1m{dropdown2.value}\\033[0m : [ \\033[1m\\033[95m{df_subset_count[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_subset_count[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_subset_count[0]\/df_subset_count.sum())*100,2)\n            low_perc = np.round((df_subset_count[-1]\/df_subset_count.sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mwith highest %(based on the count) for the gender \\033[1m{dropdown1.value}\\033[0m and country \\033[1m{dropdown2.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mwith lowest %(based on the count) for the gender \\033[1m{dropdown1.value}\\033[0m and country \\033[1m{dropdown2.value}\\033[0m : \\033[1m\\033[95m{df_subset_count.index[-1]}\\033[0m\\033[0m({low_perc}%)\")\nbutton = widgets.Button(description = \"Get Insights\")\nbutton.style.button_color = 'lightblue'\nbutton.on_click(get_user_selection)\nui = widgets.HBox([dropdown1,dropdown2, dropdown3, button])\ndisplay(ui)\nout = widgets.Output()\ndisplay(out)","7f15c170":"dict_ds_coding = {\"Compensation\" : [\"Q24\",True],\"Education\" : [\"Q4\",True], \"Integrated Development Environments (IDE's)\" : [\"Q9\",False], \"Visualization Library\" : [\"Q14\",False], \"Machine Learning Product\" : [\"Q28_A\",False]}\nstyle = {'description_width': 'initial'}\ndropdown1 = widgets.Dropdown(\n    options=[\"Data Scientist\", \"Machine Learning Engineer\"],\n    value='Data Scientist',\n    description='Data Scientist vs ML Engineer',\n    style = style\n)\ndropdown2 = widgets.Dropdown(\n    options=df[\"Q15\"].unique().tolist(),\n    value='Under 1 year',\n    description='<b> + <\/b> ML Experience',\n    style=style\n)\ndropdown3 = widgets.Dropdown(\n    options=dict_ds_coding.keys(),\n    value='Compensation',\n    description='Other Feature',\n    style=style\n)\n\ndef get_user_selection(change):\n    with out:\n        clear_output(True)\n        df_sub = df[(df[\"Q5\"]==dropdown1.value) & ((df[\"Q15\"]==dropdown2.value))]\n        if(dict_ds_coding[dropdown3.value][1]==True):\n            fig = go.Figure([go.Bar(x=df_sub[dict_ds_coding[dropdown3.value][0]].value_counts().index, y=df_sub[dict_ds_coding[dropdown3.value][0]].value_counts().values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown3.value}<\/b> for the title <b>{dropdown1.value}<\/b> with <b>{dropdown2.value}<\/b> years of experience\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown3.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_sub[dict_ds_coding[dropdown3.value][0]].value_counts().index, values=df_sub[dict_ds_coding[dropdown3.value][0]].value_counts().values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown3.value}<\/b> for the title <b>{dropdown1.value}<\/b> with <b>{dropdown2.value}<\/b> years of experience\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown3.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[0m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown3.value}\\033[0m for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_ds_coding[dropdown3.value][0]].value_counts().index[0]} \\033[0m\\033[0m({df_sub[dict_ds_coding[dropdown3.value][0]].value_counts()[0]}), \\033[1m\\033[95m{df_sub[dict_ds_coding[dropdown3.value][0]].value_counts().index[1]} \\033[0m\\033[0m({df_sub[dict_ds_coding[dropdown3.value][0]].value_counts()[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown3.value}\\033[0m for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_ds_coding[dropdown3.value][0]].value_counts().index[-1]} \\033[0m\\033[0m({df_sub[dict_ds_coding[dropdown3.value][0]].value_counts()[-1]}), \\033[1m\\033[95m{df_sub[dict_ds_coding[dropdown3.value][0]].value_counts().index[-2]} \\033[0m\\033[0m({df_sub[dict_ds_coding[dropdown3.value][0]].value_counts()[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mcount range for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience : [ \\033[1m\\033[95m{df_sub[dict_ds_coding[dropdown3.value][0]].value_counts()[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_sub[dict_ds_coding[dropdown3.value][0]].value_counts()[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_sub[dict_ds_coding[dropdown3.value][0]].value_counts()[0]\/df_sub[dict_ds_coding[dropdown3.value][0]].value_counts().sum())*100,2)\n            low_perc = np.round((df_sub[dict_ds_coding[dropdown3.value][0]].value_counts()[-1]\/df_sub[dict_ds_coding[dropdown3.value][0]].value_counts().sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mwith highest %(based on the count) for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience : \\033[1m\\033[95m{df_sub[dict_ds_coding[dropdown3.value][0]].value_counts().index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mwith lowest %(based on the count) for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience : \\033[1m\\033[95m{df_sub[dict_ds_coding[dropdown3.value][0]].value_counts().index[-1]}\\033[0m\\033[0m({low_perc}%)\")\n        else:\n            df_subset = df_sub[[i for i in df_sub.columns if dict_ds_coding[dropdown3.value][0] in i]]\n            df_subset_count = pd.Series(dtype='int')\n            for i in df_subset.columns:\n                df_subset_count[df_subset[i].value_counts().index[0]] = df_subset[i].count()\n            fig = go.Figure([go.Bar(x=df_subset_count.index, y=df_subset_count.values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown3.value} <\/b> for the title <b>{dropdown1.value}<\/b> with <b>{dropdown2.value}<\/b> years of experience\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown3.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_subset_count.index, values=df_subset_count.values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown3.value}<\/b> for the title <b>{dropdown1.value}<\/b> with <b>{dropdown2.value}<\/b> years of experience\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown3.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[1m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown3.value}\\033[0m for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[0]} \\033[0m\\033[0m({df_subset_count[0]}), \\033[1m\\033[95m{df_subset_count.index[1]} \\033[0m\\033[0m({df_subset_count[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown3.value}\\033[0m for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[-1]} \\033[0m\\033[0m({df_subset_count[-1]}), \\033[1m\\033[95m{df_subset_count.index[-2]} \\033[0m\\033[0m({df_subset_count[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mcount range for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience : [ \\033[1m\\033[95m{df_subset_count[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_subset_count[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_subset_count[0]\/df_subset_count.sum())*100,2)\n            low_perc = np.round((df_subset_count[-1]\/df_subset_count.sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mwith highest %(based on the count) for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience : \\033[1m\\033[95m{df_subset_count.index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mwith lowest %(based on the count) for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience : \\033[1m\\033[95m{df_subset_count.index[-1]}\\033[0m\\033[0m({low_perc}%)\")\nbutton = widgets.Button(description = \"Get Insights\")\nbutton.style.button_color = 'lightblue'\nbutton.on_click(get_user_selection)\nui = widgets.HBox([dropdown1,dropdown2, dropdown3, button])\ndisplay(ui)\nout = widgets.Output()\ndisplay(out)","dffb963a":"dict_da_coding = {\"Compensation\" : [\"Q24\",True],\"Education\" : [\"Q4\",True], \"Business Intelligence Tools\" : [\"Q31_A\",False], \"Primary Tool for Data Analysis\" : [\"Q38\",True], \"Visualization Library\" : [\"Q14\",False]}\nstyle = {'description_width': 'initial'}\ndropdown1 = widgets.Dropdown(\n    options=[\"Data Analyst\", \"Business Analyst\"],\n    value='Data Analyst',\n    description='Data Analyst vs Business Analyst',\n    style = style\n)\ndropdown2 = widgets.Dropdown(\n    options=df[\"Q15\"].unique().tolist(),\n    value='Under 1 year',\n    description='<b> + <\/b> ML Experience',\n    style=style\n)\ndropdown3 = widgets.Dropdown(\n    options=dict_da_coding.keys(),\n    value='Compensation',\n    description='Other Feature',\n    style=style\n)\n\ndef get_user_selection(change):\n    with out:\n        clear_output(True)\n        df_sub = df[(df[\"Q5\"]==dropdown1.value) & ((df[\"Q15\"]==dropdown2.value))]\n        if(dict_da_coding[dropdown3.value][1]==True):\n            fig = go.Figure([go.Bar(x=df_sub[dict_da_coding[dropdown3.value][0]].value_counts().index, y=df_sub[dict_da_coding[dropdown3.value][0]].value_counts().values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown3.value}<\/b> for the title <b>{dropdown1.value}<\/b> with <b>{dropdown2.value}<\/b> years of experience\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown3.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_sub[dict_da_coding[dropdown3.value][0]].value_counts().index, values=df_sub[dict_da_coding[dropdown3.value][0]].value_counts().values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown3.value}<\/b> for the title <b>{dropdown1.value}<\/b> with <b>{dropdown2.value}<\/b> years of experience\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown3.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[0m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown3.value}\\033[0m for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_da_coding[dropdown3.value][0]].value_counts().index[0]} \\033[0m\\033[0m({df_sub[dict_da_coding[dropdown3.value][0]].value_counts()[0]}), \\033[1m\\033[95m{df_sub[dict_da_coding[dropdown3.value][0]].value_counts().index[1]} \\033[0m\\033[0m({df_sub[dict_da_coding[dropdown3.value][0]].value_counts()[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown3.value}\\033[0m for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience w.r.t their counts : [ \\033[1m\\033[95m{df_sub[dict_da_coding[dropdown3.value][0]].value_counts().index[-1]} \\033[0m\\033[0m({df_sub[dict_da_coding[dropdown3.value][0]].value_counts()[-1]}), \\033[1m\\033[95m{df_sub[dict_da_coding[dropdown3.value][0]].value_counts().index[-2]} \\033[0m\\033[0m({df_sub[dict_da_coding[dropdown3.value][0]].value_counts()[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mcount range for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience : [ \\033[1m\\033[95m{df_sub[dict_da_coding[dropdown3.value][0]].value_counts()[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_sub[dict_da_coding[dropdown3.value][0]].value_counts()[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_sub[dict_da_coding[dropdown3.value][0]].value_counts()[0]\/df_sub[dict_da_coding[dropdown3.value][0]].value_counts().sum())*100,2)\n            low_perc = np.round((df_sub[dict_da_coding[dropdown3.value][0]].value_counts()[-1]\/df_sub[dict_da_coding[dropdown3.value][0]].value_counts().sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mwith highest %(based on the count) for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience : \\033[1m\\033[95m{df_sub[dict_da_coding[dropdown3.value][0]].value_counts().index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mwith lowest %(based on the count) for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience : \\033[1m\\033[95m{df_sub[dict_da_coding[dropdown3.value][0]].value_counts().index[-1]}\\033[0m\\033[0m({low_perc}%)\")\n        else:\n            df_subset = df_sub[[i for i in df_sub.columns if dict_da_coding[dropdown3.value][0] in i]]\n            df_subset_count = pd.Series(dtype='int')\n            for i in df_subset.columns:\n                df_subset_count[df_subset[i].value_counts().index[0]] = df_subset[i].count()\n            fig = go.Figure([go.Bar(x=df_subset_count.index, y=df_subset_count.values)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown3.value} <\/b> for the title <b>{dropdown1.value}<\/b> with <b>{dropdown2.value}<\/b> years of experience\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown3.value,yaxis_title=\"count\")\n            fig.update_layout(width=500,height=500)\n            display(fig)\n            fig = go.Figure([go.Pie(labels=df_subset_count.index, values=df_subset_count.values,hole=.3)])\n            fig['layout'].update(title={\"text\" : f\"Distribution of <b>{dropdown3.value}<\/b> for the title <b>{dropdown1.value}<\/b> with <b>{dropdown2.value}<\/b> years of experience\",'y':0.9,'x':0.5,'xanchor': 'center','yanchor': 'top'}, xaxis_title=dropdown3.value,yaxis_title=\"count\")\n            fig.update_layout(legend_x = 1.3, legend_y = 0.9,legend_itemsizing = \"trace\",legend_yanchor = \"bottom\",legend_xanchor = \"right\")\n            display(fig)\n            print(\"\\033[1mKey Insights\\033[1m\")\n            print(f\"\\n\\u2022 Top 2 \\033[1m{dropdown3.value}\\033[0m for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[0]} \\033[0m\\033[0m({df_subset_count[0]}), \\033[1m\\033[95m{df_subset_count.index[1]} \\033[0m\\033[0m({df_subset_count[1]})]\")\n            print(f\"\\n\\u2022 Least 2 \\033[1m{dropdown3.value}\\033[0m for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience w.r.t their counts : [ \\033[1m\\033[95m{df_subset_count.index[-1]} \\033[0m\\033[0m({df_subset_count[-1]}), \\033[1m\\033[95m{df_subset_count.index[-2]} \\033[0m\\033[0m({df_subset_count[-2]})]\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown2.value} \\033[0mcount range for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience : [ \\033[1m\\033[95m{df_subset_count[0]}\\033[0m\\033[0m(max) - \\033[1m\\033[95m{df_subset_count[-1]}\\033[0m\\033[0m(min)]\")\n            high_perc = np.round((df_subset_count[0]\/df_subset_count.sum())*100,2)\n            low_perc = np.round((df_subset_count[-1]\/df_subset_count.sum())*100,2)\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mwith highest %(based on the count) for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience : \\033[1m\\033[95m{df_subset_count.index[0]}\\033[0m\\033[0m({high_perc}%)\")\n            print(f\"\\n\\u2022 \\033[1m{dropdown3.value} \\033[0mwith lowest %(based on the count) for the title \\033[1m{dropdown1.value}\\033[0m with \\033[1m{dropdown2.value}\\033[0m years of experience : \\033[1m\\033[95m{df_subset_count.index[-1]}\\033[0m\\033[0m({low_perc}%)\")\n\nbutton = widgets.Button(description = \"Get Insights\")\nbutton.style.button_color = 'lightblue'\nbutton.on_click(get_user_selection)\nui = widgets.HBox([dropdown1,dropdown2, dropdown3, button])\ndisplay(ui)\nout = widgets.Output()\ndisplay(out)","bd53b112":"## 1. Univariate Analysis\n\n### 1.1 Analysing Age, Gender, Country, Education, Current Title, Programming Language, Visualization Library, Course Platforms ","ad4e1634":"### 2. Analysing supplimentry questions - users familiarity with products\/platforms\/tools\/experimentes for next 2 years","95b50e62":"### 5. (Data Analyst\/Business Analyst) vs. Other Features","730686c9":"### 3. Current Title vs. Other Features","12918268":"### 2. Age vs. Other Features","2951f131":"### 7. (Data Engineer\/DBA) vs. Other Features","21346588":"## Bi-Variate Analysis\n\n### 1. Gender vs. Other Features","30b2b561":"### 3.3 (Data Analyst\/Business Analyst + Coding\/Programming Experience) vs Other Features","716a388e":"### 3.2 (Data Scientist\/ML Engineer + Coding\/Programming Experience) vs Other Features","6528d789":"### 4. (Data Scientist\/ML Engineer) vs. Other Features","dfeb4ba6":"## 3. Multi-variate Analysis\n\n### 3.1 (Gender + Country) vs Other Features","0e260b95":"### 6. (Research Scientist\/Statistician) vs. Other Features"}}