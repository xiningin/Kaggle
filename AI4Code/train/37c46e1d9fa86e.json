{"cell_type":{"f08da146":"code","dca3cc24":"code","fc2255bd":"code","ff74852e":"code","6fd977ae":"code","d817d568":"code","a6af6bea":"code","f67e282f":"code","501619ea":"code","569fc385":"code","26f83f8b":"code","498a93c0":"code","e9123b9f":"code","08a46171":"code","688edf57":"code","6e96ad70":"code","b8109364":"code","e772da21":"code","4e70e687":"code","77f09d42":"code","707ea7c1":"code","88109a40":"code","724c8780":"code","08c35807":"code","04bb4670":"code","b7d73a9e":"code","89bcf96f":"code","82f71bfe":"code","19fa0f67":"code","0e4c37c9":"code","a70a0e85":"code","8f92c2b4":"code","2502e908":"code","b4b0553d":"code","78bb4a8a":"code","6b5890c6":"code","cb732943":"code","78519167":"code","3b10e146":"code","72cb38be":"code","43d7cfd9":"code","f024e049":"code","8067d0bc":"code","13a5135e":"code","f1885788":"code","019a07a7":"code","fb26bad4":"code","8ea4e878":"code","e47f3024":"code","e565de74":"code","db9cb767":"code","d02d1a9e":"code","3cda4e60":"code","6ca16080":"code","045ba984":"markdown","d96c808e":"markdown","f37a883b":"markdown","ff3509eb":"markdown","7e3e87b5":"markdown","1e566a79":"markdown","3e907f30":"markdown","9734255a":"markdown","83120f66":"markdown","e7baa4c7":"markdown","eb591159":"markdown","d6529a63":"markdown","bc1717c2":"markdown","d98b3507":"markdown","a1739076":"markdown","39ad0c1f":"markdown","2b7b0796":"markdown","ae5f6256":"markdown","c60073a1":"markdown","d4c2409f":"markdown","a6874806":"markdown","35c23dae":"markdown"},"source":{"f08da146":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport statsmodels.api as sn\n\nfrom sklearn.linear_model import LinearRegression","dca3cc24":"data = pd.read_csv(\"..\/input\/car-dataset\/car_dataset.csv\")","fc2255bd":"data.head()","ff74852e":"data.describe(include='all')","6fd977ae":"nw_data= data.drop(['Model'],axis=1)","d817d568":"nw_data.describe(include='all')","a6af6bea":"data.isnull().sum()","f67e282f":"#removing null values\nnmdata=data.dropna(axis=0)","501619ea":"sns.distplot(data[\"Price\"])","569fc385":"q=nmdata['Price'].quantile(.99)\ndata1=nmdata[nmdata[\"Price\"]<q]\n","26f83f8b":"sns.distplot(data1['Price'])","498a93c0":"sns.distplot(nmdata['Mileage'])","e9123b9f":"q=nmdata['Mileage'].quantile(.99)\ndata2=data1[data1[\"Mileage\"]<q]","08a46171":"sns.distplot(data2['Mileage'])","688edf57":"sns.distplot(nmdata['Year'])","6e96ad70":"q = nmdata['Year'].quantile(.01)\ndata3=data2[data2['Year']>q]","b8109364":"sns.distplot(data3['Year'])","e772da21":"data4=data3[data3['EngineV']<6.5]","4e70e687":"sns.distplot(data4[\"EngineV\"])","77f09d42":"mdata=data4.reset_index(drop=True)","707ea7c1":"f, (ax1, ax2, ax3) = plt.subplots(1, 3, sharey=True, figsize =(15,3))\n\nax1.scatter(mdata['Year'],mdata['Price'])\nax1.set_title('Price and Year')\n\nax2.scatter(mdata['EngineV'],mdata['Price'])\nax2.set_title('Price and EngineV')\n\nax3.scatter(mdata['Mileage'],mdata['Price'])\nax3.set_title('Price and Mileage')\n\n\nplt.show()","88109a40":"\nlog_price= np.log(mdata[\"Price\"])\nmdata['log price'] = log_price\n","724c8780":"mdata.describe(include='all')","08c35807":"f, (ax1, ax2, ax3) = plt.subplots(1, 3, sharey=True, figsize =(15,3))\n\nax1.scatter(mdata['Year'],mdata['log price'])\nax1.set_title('log price and Year')\n\nax2.scatter(mdata['EngineV'],mdata['log price'])\nax2.set_title('log price and EngineV')\n\nax3.scatter(mdata['Mileage'],mdata['log price'])\nax3.set_title('log price and Mileage')\n\n\nplt.show()","04bb4670":"mdata.columns.values","b7d73a9e":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nvariables = mdata[['Mileage','Year','EngineV']]\nvif = pd.DataFrame()\nvif[\"VIF\"] = [variance_inflation_factor(variables.values, i) for i in range(variables.shape[1])]\nvif[\"features\"] = variables.columns","89bcf96f":"vif","82f71bfe":"gdata= mdata.drop([\"Year\"],axis=1)\ngdata=gdata.drop(['Model'],axis=1)\ngdata=gdata.drop(['Price'],axis=1)\n\ngdata.head()","19fa0f67":"dmdata=pd.get_dummies(gdata,drop_first=True)","0e4c37c9":"dmdata.head()","a70a0e85":"dmdata.columns.values","8f92c2b4":"cols = ['log price', 'Mileage', 'EngineV',  'Brand_BMW',\n       'Brand_Mercedes-Benz', 'Brand_Mitsubishi', 'Brand_Renault',\n       'Brand_Toyota', 'Brand_Volkswagen', 'Body_hatch', 'Body_other',\n       'Body_sedan', 'Body_vagon', 'Body_van', 'Engine Type_Gas',\n       'Engine Type_Other', 'Engine Type_Petrol', 'Registration_yes']","2502e908":"data_processed = dmdata[cols] \ndata_processed.head()","b4b0553d":"y=data_processed['log price']\nx1= data_processed.drop(['log price'],axis=1)","78bb4a8a":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(x1)","6b5890c6":"x = scaler.transform(x1)","cb732943":"x1","78519167":"from sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=1)","3b10e146":"reg = LinearRegression()\nreg.fit(x_train,y_train)","72cb38be":"y_hat = reg.predict(x_train)","43d7cfd9":"plt.scatter(y_train,y_hat)\nplt.xlabel('Targets',size=18)\nplt.ylabel('Predictions',size=18)\nplt.xlim(6,13)\nplt.ylim(6,13)\nplt.show()","f024e049":"sns.distplot(y_train - y_hat)\nplt.title(\"Residuals PDF\", size=18)","8067d0bc":"reg.score(x_train,y_train)","13a5135e":"#weight\nreg.coef_","f1885788":"fm = pd.DataFrame()\nfm['feature']= x1.columns.values\nfm['weight']=reg.coef_\nfm","019a07a7":"#bias\nreg.intercept_","fb26bad4":"y_hat_test= reg.predict(x_test)","8ea4e878":"plt.scatter(y_test,y_hat_test,alpha=0.2)\n\nplt.xlabel(\"targets\")\nplt.ylabel(\"prediction\")\n\nplt.xlim(6,13)\nplt.ylim(6,13)\nplt.show()","e47f3024":"df_pf = pd.DataFrame(np.exp(y_hat_test),columns=['prediction'])\ndf_pf","e565de74":"df_pf['Target'] = np.exp(y_test)\ndf_pf\n","db9cb767":"y_test=y_test.reset_index(drop=True)","d02d1a9e":"df_pf['Target'] = np.exp(y_test)\ndf_pf","3cda4e60":"df_pf['dif']=df_pf['Target']-df_pf['prediction']\ndf_pf","6ca16080":"df_pf['Difference%'] = np.absolute(df_pf['dif']\/df_pf['Target']*100)\ndf_pf","045ba984":"As far as I know, we can remove data <5% of total data , so here we are safe remove data , otherwise we have to fill missing values with help of mean,median or mode.  ","d96c808e":"## Train Test Split","f37a883b":"### Create dummy variable ","ff3509eb":"## Multicollinearity","7e3e87b5":"it would be great to check null values frist ","1e566a79":"Actually, natural value of engine is less than 6.5\n#reference \n#https:\/\/en.wikipedia.org\/wiki\/Engine_displacement","3e907f30":"## Scale the data","9734255a":"Here,year is too correlated with other features","83120f66":"Positive weight means particular feature directly proportional to price.\ni.e engine volume high, price will be high .\n\n\nNegative weight means particular feature indirectly proportional to price.\ni.e  mileage is less,then price would be decreased .","e7baa4c7":"# Numpy use","eb591159":"Here, 75% is accuracy of our model","d6529a63":"we deleted number of rows, so now I need to reset index","bc1717c2":"To convert prices into normally distribution, here I am using a log transformation to deal with this issue","d98b3507":"## Testing","a1739076":"## Rearrange a bit","39ad0c1f":"## EDA","2b7b0796":"It's seems like non-linear pattern in all plots , because price attribute is not normally distributed as seen above figure of price distribution.","ae5f6256":"as it is clear that price attribute have outlier.Therefore I am removing top 1% outlier ","c60073a1":"VIF between 1 to 5 is significant or perfect valu\n","d4c2409f":"It might be arduous task to deal with model attribute as it has large number of unique values,So here I remove first model attribute","a6874806":"##  Linear Regression model\n","35c23dae":"#### Create a dependent and independent variable"}}