{"cell_type":{"1b59491f":"code","0d8d1407":"code","a85b2bab":"code","c33ca20a":"code","cf57550a":"code","06b9f19b":"code","7f8aa006":"code","7ab209ca":"code","6e2bddfd":"code","1497f566":"code","5d7275b8":"code","314a66ed":"code","94270bd6":"code","69de5f74":"code","b4c764dc":"code","0984a340":"code","a462f8e7":"code","251b6fb1":"code","f3ca15df":"code","8f8ec6d8":"code","bfe94818":"code","0edec104":"code","2d2c6f7e":"code","da8c3c7e":"code","6843e280":"code","bf72dfe2":"code","06712156":"code","44b01b9f":"markdown","538c6898":"markdown","729b5484":"markdown","a72df783":"markdown","d2239488":"markdown","6985fb92":"markdown","f262e790":"markdown","7ac2b67c":"markdown","e189a8ed":"markdown","c474deba":"markdown","66320944":"markdown","c620095e":"markdown","487f8c56":"markdown","488453b0":"markdown","505489a9":"markdown","11de6052":"markdown","27093712":"markdown","e1bd0c51":"markdown","c735db96":"markdown","22cc4fc3":"markdown","e71e26f3":"markdown"},"source":{"1b59491f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport tensorflow as tf\nimport random\nimport seaborn as sns\nimport cv2\nimport os\n\nfrom pathlib import Path\nfrom keras.utils import to_categorical\nfrom collections import Counter\nfrom plotly.subplots import make_subplots\nfrom keras.models import Sequential\nfrom keras.layers import Activation, Dense, Dropout, Conv2D, MaxPooling2D, Flatten\nfrom keras.layers.experimental import preprocessing as ps\nfrom keras.callbacks import EarlyStopping\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix","0d8d1407":"print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))","a85b2bab":"train_path = {'pneumonia': [], 'normal': []}\n\npath = Path('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray')\nnormal_train_path = path \/ 'train' \/ 'NORMAL'\npneumonia_train_path = path \/ 'train' \/ 'PNEUMONIA'\n\nnormal_test_path = path \/ 'test' \/ 'NORMAL'\npneumonia_test_path = path \/ 'test' \/ 'PNEUMONIA'\n\nnormal_val_path = path \/ 'val' \/ 'NORMAL'\npneumonia_val_path = path \/ 'val' \/ 'PNEUMONIA'\n\nnormal_path = [normal_train_path, normal_test_path, normal_val_path]\npneumonia_path = [pneumonia_train_path, pneumonia_test_path, pneumonia_val_path]","c33ca20a":"np.random.seed(42)\nrandom.seed(42)","cf57550a":"label2category = {'normal_case': 0, 'pneumonia_case': 1}\ncategory2label = {0: 'normal_case', 1: 'pneumonia_case'}","06b9f19b":"data = []\n\nfor path in normal_path:\n    for img in path.glob('*.jpeg'):\n        data.append({'img_path': str(img), 'label': 'normal_case'})\n    \nfor path in pneumonia_path:\n    for img in path.glob('*.jpeg'):\n        data.append({'img_path': str(img), 'label': 'pneumonia_case'})\n        \nnp.random.shuffle(data)","7f8aa006":"def counter_label(data=None, key=None, index=None):\n    label = []\n\n    for value in data:\n        label.append(value[key])\n\n    return Counter(label)","7ab209ca":"# counter_df = counter_df(data=data, key='label', index='without_augmentation')\nimg_l_counter = counter_label(data, 'label')\nkeys = list(img_l_counter.keys())\nvalues = list(img_l_counter.values())\n\npx.bar(x=keys, y=values, color=keys, width=800, height=400)","6e2bddfd":"plt.figure(figsize=(20,7))\n\nfor i, data_ in enumerate(data[:10]):\n    path, label = data_['img_path'], data_['label']\n    plt.subplot(2,5,i+1)\n    img = cv2.imread(path)\n    plt.imshow(img)\n    plt.xlabel(label)\n    \nplt.show()","1497f566":"aug_model = Sequential()\naug_model.add(ps.RandomFlip())","5d7275b8":"%%time\n\nimages_array = []\nimages_label = []\n\nIMG_SIZE = (64,64)\n\nfor data_ in data:\n    category = label2category[data_['label']]\n    label = to_categorical(category, 2)\n    img = cv2.imread(data_['img_path'])\n\n    if category == 0:\n        for i in range(2):\n            batch = tf.expand_dims(img, 0)\n            aug_img = aug_model(batch)\n            aug_img = np.array(aug_img[0])\n            img = cv2.resize(aug_img, IMG_SIZE)\n            img = img \/ 255\n            images_array.append(img)\n            images_label.append(label)\n\n    else:\n\n        img = cv2.resize(img, IMG_SIZE)\n        img = img \/ 255\n        images_array.append(img)\n        images_label.append(label)","314a66ed":"images_array = np.array(images_array)\nimages_label = np.array(images_label)\n\nprint('shape of images array: {}'.format(images_array.shape))\nprint('shape of images label: {}'.format(images_label.shape))","94270bd6":"def to_labels(labels):\n    label_list = []\n    for label in labels:\n        am = label.argmax()\n        label_list.append(category2label[am])\n        \n    return Counter(label_list)","69de5f74":"img_l_counter = to_labels(images_label)\nkeys = list(img_l_counter.keys())\nvalues = list(img_l_counter.values())\n\npx.bar(x=keys, y=values, color=keys, width=800, height=400)","b4c764dc":"x_train, x_test, y_train, y_test = train_test_split(images_array, images_label, test_size=0.2, random_state=7)","0984a340":"print('train input shape: {}'.format(x_train.shape))\nprint('train output shape: {}'.format(y_train.shape))\nprint('test input shape: {}'.format(x_test.shape))\nprint('test output shape: {}'.format(y_test.shape))","a462f8e7":"model = Sequential()\n\nmodel.add(Conv2D(32, (3,3), input_shape=x_train.shape[1:], activation='relu'))\nmodel.add(MaxPooling2D((2,2), strides=(1,1), padding='same'),)\n\nmodel.add(Conv2D(64, (3,3), activation='relu'),)\nmodel.add(MaxPooling2D((2,2), strides=(1,1), padding='same'),)\n\nmodel.add(Conv2D(128, (3,3), activation='relu'),)\nmodel.add(MaxPooling2D((2,2), strides=(1,1), padding='same'),)\nmodel.add(Dropout(0.2))\n\nmodel.add(Conv2D(512, (3,3), activation='relu'),)\nmodel.add(MaxPooling2D((2,2), strides=(1,1), padding='same'),)\n\nmodel.add(Flatten())\n\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\n\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))","251b6fb1":"model.summary()","f3ca15df":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","8f8ec6d8":"callback = EarlyStopping(monitor='val_accuracy', patience=10)","bfe94818":"EPOCHS = 40","0edec104":"history = model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=EPOCHS, callbacks=[callback])","2d2c6f7e":"model.evaluate(x_test, y_test)","da8c3c7e":"yhat = model.predict(x_test)\nyhat = yhat.argmax(axis=1)\nytrue = y_test.argmax(axis=1)\n\nplt.figure(figsize=(5,4))\nplot_confusion_matrix(confusion_matrix(ytrue, yhat), figsize=(12,8), hide_ticks=True, cmap=plt.cm.Greens)\nplt.xticks(range(2), ['Normal', 'Pneumonia'], fontsize=16)\nplt.yticks(range(2), ['Normal', 'Pneumonia'], fontsize=16)\nplt.show()","6843e280":"_loss, _val_loss = history.history['loss'], history.history['val_loss']\n_accuracy, _val_accuracy = history.history['accuracy'], history.history['val_accuracy']\n_epochs = range(len(_loss))","bf72dfe2":"plt.figure(figsize=(20,5))\n\nplt.subplot(1,2,1)\nplt.plot(_epochs, _loss, label='loss')\nplt.plot(_epochs, _val_loss, label='val_loss')\n\nplt.xlabel('epochs')\nplt.ylabel('loss')\n\nplt.subplot(1,2,2)\nplt.plot(_epochs, _accuracy, label='accuracy')\nplt.plot(_epochs, _val_accuracy, label='val_accuracy')\n\nplt.xlabel('epochs')\nplt.ylabel('accuracy')\n\nplt.show()","06712156":"## uncomment the code below and save the model\n# model.save('pneumonia_detector.h5')","44b01b9f":"## Visualize the number of labels after images augmentation","538c6898":"## Test the model","729b5484":"## Create the augmetation model","a72df783":"## Model hyperparameters","d2239488":"## Train the model","6985fb92":"## Visualize the number of labels","f262e790":"## Save the model","7ac2b67c":"## Labels","e189a8ed":"## Convert image path to array","c474deba":"## Create the model","66320944":"## Split the input and output data","c620095e":"## Visualize training results","487f8c56":"## Import libraries","488453b0":"## Get images path","505489a9":"## Set the seed","11de6052":"## Create the callbacks","27093712":"## Get data","e1bd0c51":"## Model Summary","c735db96":"## Compile the model","22cc4fc3":"## Gpu Setup","e71e26f3":"## Visualize the data"}}