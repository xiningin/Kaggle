{"cell_type":{"e2937dcd":"code","143d9214":"code","b16d14f2":"code","33151020":"code","cea8b8e8":"code","0d01e9ef":"code","05c3ab64":"code","4dbc7701":"code","88f11bbf":"code","8667d2bb":"code","5fa56579":"code","c7fea2ad":"code","70ba3a1d":"code","e2f0bb24":"code","6b61ed42":"code","126a4ec1":"code","ac855913":"code","8d4f78bf":"code","61de2a7b":"code","643e8b33":"code","3e8b82e9":"code","6b1a358e":"code","b75737bf":"code","bcb7c2e5":"code","50475021":"code","7db3539b":"markdown","55e33394":"markdown","37d969fc":"markdown","f48d0b78":"markdown","d1abab19":"markdown","b3204118":"markdown","72e7945a":"markdown","a21681d7":"markdown","dda61752":"markdown","3f19cf88":"markdown"},"source":{"e2937dcd":"import sklearn, re\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import Imputer,StandardScaler\nfrom sklearn import preprocessing\nfrom sklearn.decomposition import PCA\nimport seaborn as se\nfrom fancyimpute import KNN\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score,adjusted_mutual_info_score,adjusted_rand_score,homogeneity_score","143d9214":"df_proteomes = pd.read_csv('..\/input\/breastcancerproteomes\/77_cancer_proteomes_CPTAC_itraq.csv',index_col = 0)\nclinical = pd.read_csv('..\/input\/breastcancerproteomes\/clinical_data_breast_cancer.csv',index_col=0)\nPAM50  = pd.read_csv('..\/input\/breastcancerproteomes\/PAM50_proteins.csv',header = 0)","b16d14f2":"df_proteomes","33151020":"clinical","cea8b8e8":"PAM50","0d01e9ef":"proteomes = df_proteomes.drop(['gene_symbol','gene_name'], axis=1)","05c3ab64":"proteomes.rename(columns=lambda x: \"TCGA-%s\" % (re.split('[_|-|.]',x)[0]) if bool(re.search(\"TCGA\",x)) is True else x,inplace=True)\nproteomes = proteomes.transpose()","4dbc7701":"proteomes","88f11bbf":"clinical = clinical.loc[[x for x in clinical.index.tolist() if x in proteomes.index],:]","8667d2bb":"clinical","5fa56579":"merged_data = proteomes.merge(clinical,left_index=True,right_index=True)","c7fea2ad":"numerical_data = merged_data.loc[:,[x for x in merged_data.columns if bool(re.search(\"NP_|XP_\",x)) == True]]\npam50_data = numerical_data.iloc[:,numerical_data.columns.isin(PAM50['RefSeqProteinID'])]","70ba3a1d":"pam50_data","e2f0bb24":"pam50_data_ = KNN(k=3).fit_transform(pam50_data)","6b61ed42":"pam50_data_","126a4ec1":"scaler = StandardScaler().fit(pam50_data_)\npam50_data_ = scaler.transform(pam50_data_)\nnp.set_printoptions(precision=3)\nprint(pam50_data_[0:5,:])","ac855913":"n_clusters = [2,3,4,5,6,7,8,10,20,79]\n\ndef compare_k_means(k_list,data):\n    ## Run clustering with different k and check the metrics\n    for k in k_list:\n        clusterer = KMeans(n_clusters=k, n_jobs=4)\n        clusterer.fit(data)\n        ## The higher (up to 1) the better\n        print(\"Silhouette Coefficient for k == %s: %s\" % (\n        k, round(silhouette_score(data, clusterer.labels_), 4)))\n        ## The higher (up to 1) the better\n        print(\"Homogeneity score for k == %s: %s\" % (\n        k, round(homogeneity_score(merged_data['PAM50 mRNA'], clusterer.labels_),4)))\n        print(\"Ajusted Rand score for k == %s: %s\" % (\n        k, round(adjusted_rand_score(merged_data['PAM50 mRNA'], clusterer.labels_),4)))\n        print(\"------------------------\")","8d4f78bf":"imputer = Imputer()\nprocessed_numerical_random = numerical_data.iloc[:,np.random.choice(range(numerical_data.shape[1]),43)]\nimputer_rnd = imputer.fit(processed_numerical_random)\nprocessed_numerical_random = imputer_rnd.transform(processed_numerical_random)","61de2a7b":"## Check different numbers of clusters for the PAM50 proteins, there are 4 subtypes of cancer in this data\n## 3 samples of healthy patients were dropped at the beginning...\ncompare_k_means(n_clusters,pam50_data_)\n## seems that k==3 works good, the silhouette score is still high and the homogeneity score jumps ~2-fold\n## this is what they report in the paper to be the best number of clusters!\n## k == 79 has homogeneity score of 1.0, no wonder since the algorithm can assign all the points their separate clusters!\n## However, for our application, such clustering would be worthless.","643e8b33":"## Use random proteins for comparison\ncompare_k_means(n_clusters,processed_numerical_random)\n## The scores should be significantly lower than for the PAM50 proteins!","3e8b82e9":"## Visualize data using k==3\nclusterer_final = KMeans(n_clusters=3, n_jobs=4)\nclusterer_final = clusterer_final.fit(pam50_data_)\nprocessed_p50_plot = pd.DataFrame(pam50_data_)\nprocessed_p50_plot['KMeans_cluster'] = clusterer_final.labels_\nprocessed_p50_plot.sort_values('KMeans_cluster',axis=0,inplace=True)\nfig = plt.figure(figsize=(12,8))\n\nplt.scatter(pam50_data_[:,0], pam50_data_[:,1], c=clusterer_final.labels_, cmap=\"Set1_r\", s=25)\nplt.scatter(clusterer_final.cluster_centers_[:,0] ,clusterer_final.cluster_centers_[:,1], color='black', marker=\"x\", s=250)\nplt.title(\"Kmeans Clustering \\n Breast cancer preteomics\", fontsize=16)\nplt.show()","6b1a358e":"for n_component in range(1, 16, 2):\n    pca = PCA(n_components=n_component)\n    reduced_data = pca.fit_transform(pam50_data_)\n    print('\\nComponents: {}'.format(n_component))\n    print('% of Variance Explained: {}'.format(sum(pca.explained_variance_ratio_)))\n    compare_k_means(n_clusters, reduced_data)","b75737bf":"pca=PCA(n_components=5)\nProteomicsX_pca=pca.fit(pam50_data_)\nProteomicsX_pca2=ProteomicsX_pca.transform(pam50_data_)\nprint(pca.explained_variance_ratio_)","bcb7c2e5":"n_clusters = 5\nKMeansModel=KMeans(n_clusters=n_clusters, init='k-means++')\nKMeanData=ProteomicsX_pca2\nKMeansModel.fit(KMeanData)\nlabels=KMeansModel.labels_\ncentroids=KMeansModel.cluster_centers_\nprint(\"LABELS\",labels)\nprint(\"----------------------------\")\nprint(\"Centroids\",centroids)","50475021":"fig = plt.figure(figsize=(12,8))\n\nplt.scatter(KMeanData[:,0], KMeanData[:,1], c=KMeansModel.labels_, cmap=\"Set1_r\", s=25)\nplt.scatter(KMeansModel.cluster_centers_[:,0] ,KMeansModel.cluster_centers_[:,1], color='black', marker=\"x\", s=250)\nplt.title(\"Kmeans Clustering \\n Breast cancer preteomics\", fontsize=16)\nplt.show()","7db3539b":"#### After analysis Kmeans clustering with 5 PCA components","55e33394":"###### Referred kernal -https:\/\/www.kaggle.com\/mlesna\/kmeans-example\n- suggested to take random set of proteins values for better clustering","37d969fc":"#### Match patient id between datasets","f48d0b78":"## Breast Cancer Proteomes - With Merging clinical info and proteins data\n - Source - https:\/\/www.kaggle.com\/piotrgrabo\/breastcancerproteomes","d1abab19":"##### After analysis taking value of k -3","b3204118":"###### Drop clinical entries for samples not in our protein data set\n","72e7945a":"### Data preprocessing\n#### Null Value Imputatation with KNN Imputer\n","a21681d7":"###### File: 77_cancer_proteomes_CPTAC_itraq.csv\nRefSeq_accession_number: RefSeq protein ID (each protein has a unique ID in a RefSeq database)\ngene_symbol: a symbol unique to each gene (every protein is encoded by some gene)\ngene_name: a full name of that gene Remaining columns: log2 iTRAQ ratios for each sample (protein expression data, most important), three last columns are from healthy individuals\n\n###### File: clinical_data_breast_cancer.csv\nFirst column \"Complete TCGA ID\" is used to match the sample IDs in the main cancer proteomes file (see example script). All other columns have self-explanatory names, contain data about the cancer classification of a given sample using different methods. 'PAM50 mRNA' classification is being used in the example script.\n\n##### File: PAM50_proteins.csv\nContains the list of genes and proteins used by the PAM50 classification system. The column RefSeqProteinID contains the protein IDs that can be matched with the IDs in the main protein expression data set.\n\n##### References\n- https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC6547580\/\n- https:\/\/www.nature.com\/articles\/s41598-019-44339-4.pdf?origin=ppub ","dda61752":"### Merging Data for clinical and protiens","3f19cf88":"### Building model with  PCA and Kmeans "}}