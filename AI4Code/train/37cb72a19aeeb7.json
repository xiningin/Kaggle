{"cell_type":{"2352cfa6":"code","36c2284f":"code","0edb1038":"code","e87916cf":"code","a7052ee9":"code","5367cb0d":"code","fb6865fc":"code","86572fc5":"code","72361090":"code","e77df4a6":"code","141010eb":"code","a0f949ae":"code","dd1291d1":"code","9ea1a10b":"code","f5002eee":"code","7f9a9509":"code","de15e978":"code","6ea99fcc":"code","6c782d37":"code","27a25a03":"code","b39dac31":"code","a2790038":"code","e99947f0":"code","f4413ecc":"code","76976e55":"code","49b00e05":"code","68d5f2b3":"code","1effabb7":"code","0c93accd":"code","f215e747":"code","5ef549d3":"code","cb923bbc":"code","abe0a9c4":"code","7f3e16e8":"code","a1b1986b":"markdown","208ece29":"markdown","235a7485":"markdown","0438102c":"markdown"},"source":{"2352cfa6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","36c2284f":"os.environ[\"WANDB_API_KEY\"] = \"0\" ## to silence warning","0edb1038":"from transformers import BertTokenizer,TFBertModel\nimport tensorflow as tf\nimport matplotlib as mlp\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nfrom random import random","e87916cf":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept ValueError:\n    strategy = tf.distribute.get_strategy() # for CPU and single GPU\n    print('Number of replicas:', strategy.num_replicas_in_sync)","a7052ee9":"MLP_XKCD_COLOR = mlp.colors.XKCD_COLORS\nMLP_BASE_COLOR = mlp.colors.BASE_COLORS\nMLP_CNAMES = mlp.colors.cnames\nMLP_CSS4 = mlp.colors.CSS4_COLORS\nMLP_HEX = mlp.colors.hexColorPattern\nMLP_TABLEAU = mlp.colors.TABLEAU_COLORS\nprint('I like COLORS :>')\ndef random_color_generator(color_type=None):\n    if color_type is None:\n        colors = sorted(MLP_CNAMES.items(), key=lambda x: random())\n    else:\n        colors = sorted(color_type.items(), key=lambda x: random())\n    return dict(colors)","5367cb0d":"path = '\/kaggle\/input\/contradictory-my-dear-watson\/'\ntrain = pd.read_csv(path+'train.csv')\ntest = pd.read_csv(path+'test.csv')","fb6865fc":"train.head()","86572fc5":"train.info()","72361090":"colors = random_color_generator()\ntrain.language.value_counts().plot(kind='bar',color=colors)\nplt.show()","e77df4a6":"plt.figure(figsize=(12,8))\nlabels,freq = np.unique(train.language.values,return_counts=True)\nprint(labels,freq)\nplt.pie(freq,labels=labels,autopct = '%1.1f%%')\nplt.show()","141010eb":"colors = random_color_generator()\nfig, axes = plt.subplots(ncols=1, figsize=(8, 5), dpi=100)\ntrain.label.value_counts().sort_values(ascending=True).plot(kind='bar',color=colors)\naxes.set_xticklabels(['neutral', 'contradiction','entailment'])\nplt.show()","a0f949ae":"train.premise[100]","dd1291d1":"train.hypothesis[100]","9ea1a10b":"train.label[100]","f5002eee":"import nltk\nfrom nltk.corpus import stopwords\nimport string\nnltk.download('stopwords')","7f9a9509":"STOPWORDS = set(stopwords.words('english'))\nPUNCTUATIONS = string.punctuation\n#print(PUNCTUATIONS)","de15e978":"from wordcloud import WordCloud\ncolors = random_color_generator()\ndef show_word_cloud(data,title=None):\n    word_cloud = WordCloud(\n        background_color = list(colors.keys())[1],\n        max_words =100,\n        width=800,\n        height=400,\n        stopwords=STOPWORDS,\n        max_font_size = 40, \n        scale = 3,\n        random_state = 42 ).generate(data)\n    fig = plt.figure(1, figsize = (20, 20))\n    plt.axis('off')\n    if title: \n        fig.suptitle(title, fontsize = 20)\n        fig.subplots_adjust(top = 2.3)\n\n    plt.imshow(word_cloud)\n    plt.show()","6ea99fcc":"#Most Comman words in entailment Prases\nentailment = \" \".join(train[train.label==0]['premise'])\nshow_word_cloud(entailment,'TOP 100 Entailment Words')","6c782d37":"#Most Comman words in Neutral Prases\nneutral = \" \".join(train[train.label==1]['premise'])\nshow_word_cloud(neutral,'TOP 100 Neutral Words')","27a25a03":"#Most Comman words in Contradictory Prases\ncontradiction = \" \".join(train[train.label==2]['premise'])\nshow_word_cloud(contradiction,'TOP 100 Contradiction Words')","b39dac31":"model_name = 'bert-base-multilingual-cased'\ntokenizer = BertTokenizer.from_pretrained(model_name)","a2790038":"def encode_sentence(sentence):\n    tokens = list(tokenizer.tokenize(sentence))\n    tokens.append('[SEP]')\n    return tokenizer.convert_tokens_to_ids(tokens)","e99947f0":"encode_sentence('Are you lost Baby Girl ?')","f4413ecc":"def bert_encode(premise,hypothesis,tokenizer):\n    sentence_1 = tf.ragged.constant([encode_sentence(s) for s in np.array(premise)])\n    sentence_2 = tf.ragged.constant([encode_sentence(s) for s in np.array(hypothesis)])\n    cls = [tokenizer.convert_tokens_to_ids(['[CLS]'])] * sentence_1.shape[0]\n    #print('CLS -- ',cls)\n    input_word_ids = tf.concat([cls,sentence_1,sentence_2],axis=-1)\n    #print('Input Word Ids --- ',input_word_ids)\n    input_mask = tf.ones_like(input_word_ids).to_tensor()\n    #print('Input Mask -- ',input_mask)\n    type_cls = tf.zeros_like(cls)\n    type_s1 = tf.zeros_like(sentence_1)\n    type_s2 = tf.ones_like(sentence_2)\n    input_type_ids = tf.concat([type_cls, type_s1, type_s2], axis=-1).to_tensor()\n    inputs = {'input_word_ids':input_word_ids.to_tensor(),\n              'input_mask':input_mask,\n              'input_type_ids':input_type_ids}\n    return inputs","76976e55":"train_input = bert_encode(train.premise.values, train.hypothesis.values, tokenizer)","49b00e05":"def build_model(max_len=50):\n    bert_encoder = TFBertModel.from_pretrained(model_name)\n    input_word_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    input_type_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_type_ids\")\n    \n    embedding = bert_encoder([input_word_ids, input_mask, input_type_ids])[0]\n    output = tf.keras.layers.Dense(3, activation='softmax')(embedding[:,0,:])\n    \n    model = tf.keras.Model(inputs=[input_word_ids, input_mask, input_type_ids], outputs=output)\n    model.compile(tf.keras.optimizers.Adam(lr=1e-5), loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n    return model","68d5f2b3":"with strategy.scope():\n    model = build_model()\n    model.summary()","1effabb7":"history = model.fit(train_input,train.label.values, epochs = 10, verbose = 1, \n          batch_size = 64, validation_split = 0.2)","0c93accd":"plt.figure(figsize=(10, 6))\nplt.plot(history.history['accuracy'],label='Accuracy')\nplt.plot(history.history['loss'],label='Loss')\nplt.legend(loc='best')\nplt.title('Model Accuracy Vs Model Loss')\nplt.show()","f215e747":"test_input = bert_encode(test.premise.values, test.hypothesis.values, tokenizer)","5ef549d3":"predictions = model.predict(test_input)\npredictions = [np.argmax(prob) for prob in predictions]\npredictions[:10]","cb923bbc":"submission = test.id.copy().to_frame()\nsubmission['prediction'] = predictions","abe0a9c4":"submission.head()","7f3e16e8":"submission.to_csv(\"submission.csv\", index = False)","a1b1986b":"> 0 for entailment, 1 for neutral, 2 for contradiction","208ece29":"BERT uses three kind of input data- **input word IDs**, **input masks**, and **input type IDs**.","235a7485":"That's Neutral","0438102c":"Setup TPU !"}}