{"cell_type":{"4fd0981f":"code","a3e80615":"code","4f3dc2a2":"code","e287da18":"code","b094591d":"code","43c0aabd":"code","310a80cb":"code","f854e924":"code","0d4fe99d":"code","efee48e8":"code","727284ce":"code","6dff7452":"code","85620a56":"markdown","3bf5a8d5":"markdown","1c3ec1e2":"markdown","369bfbe7":"markdown","68fd0044":"markdown","f4fb69ce":"markdown"},"source":{"4fd0981f":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxISEhUSExMWFhUXFxoXFhgYFxcaGBoYGBYaGBgYGhsYHSggGBonHxgaITIhJSkrLi4uGB8zODMsNygtLisBCgoKDg0OGxAQGy0lICU1Ny0tLy0tLS0rLS0uLS0tLTUtLS01LS8tLS0tLS0tLS0rLS8tLS0tLS0tLS0tLS0tK\/\/AABEIAJ0BQQMBIgACEQEDEQH\/xAAbAAACAgMBAAAAAAAAAAAAAAAABQQGAQIDB\/\/EAEkQAAIBAwIDBgQCBgYJAQkAAAECAwAREgQhBRMxBiJBUWFxFDKBkQcjQlJyobHBM2KSstHwFTQ1U3OCw9LhkyQlNkNEg6K0wv\/EABoBAAMBAQEBAAAAAAAAAAAAAAACAwEEBQb\/xAAxEQACAgECBQIDCAMBAQAAAAAAAQIRAxIhBBMxQVFh8CJx0TJSgZGhscHxFELhIwX\/2gAMAwEAAhEDEQA\/AFdFFFekfLBRRRQAUUUUAFFFFABRWrMB1NZoAzRWrOB1IFZoAzRWrMB1IrNAGaK1yF7X3ragAooooAKKKKACitVcHoRW1ABRRRQAUUUUAFFahxe1962oAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAMZDzoyHnSaitotyvUc5DzoyHnSaiig5XqOch50ZDzpNRRQcr1HOQ86Mh50ltUjh+iaeWOFPmkdUHpkbX9gN\/pRRqw2eu\/h7p44NMsktgdXJgl\/EBWwX64u3\/NXn\/GNB8PPLAf0GIW\/ip3Q\/wBkinP4ocUEM+l0sBCjSIjqL7Bxblg+yoPo9Z\/FLTrMul4jH8k8YVvfHmR\/WxcH9kVzwvVb7nbmxRlj0L\/X2\/1Gv4Sn83U\/sR\/3pKoGmYYL+yP4Vc\/wU\/pdV+xF\/ekrzTT\/ACL7D+FUivjl+BHJj\/8AGC+f7nq\/4WH\/AFz9iL\/q1QYGGK7+A\/hVz\/BgC+tB2GEN\/b86oidluCWAHFD0\/wB5D\/2UmpRnKyj4dzxQp9L\/AHGOgP8A7in\/AOJ\/1Y6pS7kAbk7ADck+QA6mr\/xTQ6aHgeoTSzc6PIHO6nvGaO4uoA2qhdkOL6nTTE6WESyMpGPLZ2A8xh3lFyL72Pj4Ebje0mvJmfCrhFvt8ztqNFNGMpIZUX9Z43VfuwAqPkPOvQ+yvGOLSakR6zTkwSBgxMWITukj3UkY2N\/mqkvwGM8XOjAtEdRa3kmPMKDyFrrWxnu0xJ8IqTi3vtujjp9HLILxxSyDzSN3H3UGo+oBXJWBVgNwwII28QdxV27Z9uJ9JqTo9IkarEFBul7koGCqAQFUKwFIu0vFX4gkZnhjQxqblbksT13O4Tocd9\/E1kZyfYTNgxY0\/i3XoWL8TD+Xov2H\/uxVSotO7gsqOyjqVRmAsLm5AsNt69I7XcBbWfBRKNgjlmI2RbRXPv5DxP1qvdvNSYIhw3SqY4YwOb4NJcZWv4qb3J\/SO3QG6Y5bKKL8ThTm5ydLb8XRVIwWIVQWY9AoJJ9gNzXbU6SWMXkikjB2BeN0H3YCt+xvGdZpmkXSQCV3Ay\/KZ2W3Q3SxC9dibX+t792R1\/EdRI8HENMTC8bd5osRfYYHwIIJ9dqpOTiTx8LGa6u\/lsUjs5oxPqYoyhdC4zAy2XxJK7qPXapnbPhS6fUuscbJD3cScytygJAdr3N77X8DUfsbqn0nFDBERi076dshclFkYDfwPdG9TfxX41M+obSHHlRmORdu9kYz1N+neNZb5irpQywwWB31sb8X\/wBiab1dB+97VTNRpJYwDJFJGD0LxugPsWAvV5TjB0nBNNMiK0gxEeYuqsSwyt5gZfet+w\/aN+KLqNJq0Rhhe6ra6scSCLncGxBH8qSMnFN1tZXJw8ckoq96R54WHmKlJw+dlzWCYr1yEUhW3nkFtapP4acISbXhJQGESPJYjZmRlRbjxF2y+gptxb8TtVHqZAiR8mORlCFTkyoxUktfZjYkbWFx18ayk7qKOePDR06puirBh5iuzadxiTG4z+S6N3ri4x2722+1Pfxe4dGk0OojUDnoxe212TCzH1Iex\/ZFWHj\/AB99Fw3QSRIhlaOJFZxcIOQCxAuNzYD6ml5myaXU1cGk5KUuhQdTppI7cyOSO\/TNGS\/tkBeuWQ86v\/AOMNxbQ6uHUqmca3DKLDvKxRrEmzKyHp6V5KhuAaeDbtPqhMnDKNOL2Y7yHnRkPOktZp6Jcr1HOQ86Mh50moooOV6jnIedGQ86TVi1FByvUdZDzopNRRQcr1CiiimKhRRRQAUUUUAFXr8JOGh9TJqX+TTobE9A7gi\/0QN\/aFUWpmk4tqIo3hjlZI5L5qLWbJcTfa+4AFJOLlGkUxSUZJsvE34oIzFv9Hxtc7M0gyI8CfyjY2ttem+n4mvGeH6qFYVikjsUQNkLgZxkHFbXZWW1vPzrySpnDOKT6cloJWjLCzFbbgbgG4qbwqvh6lY8TK\/j6F6\/BM3k1R\/qRf3pK8103yL+yP4Uy4fxjUQM7wzNGz\/OVt3tyd9vMn71AUWFhVIxak35JymnBR8Ho\/4N\/wD137EX\/WrzWD5V9h\/CmHDeLT6fLkytHmAHxt3gL2vceGR+9bcO4dnYn5fAedZWmTfkXJkWhLwXXhCFuz04G5Mpt\/60dTfw50skeh1nJx+KLdw7E25Yw+bY97O19r0hh1LrEYFciIm5T9Em4N\/uB9qzpdVJE2cbsjdLqbbeR8CPQ1JwbT9dxf8ANipRdbJV\/RZuyw4udVFz5JjCC3MDxoq2wa2+IJ72PT+FIuIzRafjZnlkVQJwSCQLAxhCT6C97+laa\/tPqVXmSamTubixVd7EWsoAY+96qkWcztPMcpJDdifsP3ACsUHf0HfExcFTezvej0ntb2VmfVPqIY+YJcTcFbgqipY5EbWUG\/rSXjnA5tKqmUL31NrG9iBup9bW3G1LOHdodXp1CRTuIx0TutYf1cwSo9BtXafWNMc3dpCRa7Ek28v6o9BWxjJbMhxE8Mrkk7f5IvPbfjMsGmhSI4mRd3HzKEVdl8icuvp60s4m44jo11kYHOh7k6jxA3b7XzHoxHWq7q9bLKFEkjOFBChvAG17fYfatOHaiTTljC7R52yxPW17X+5+9KsbS26lJ8ZGcmpXpaLZ2fjlHC5jorDUGQ3IClvmXoG2J5fS9Y7DPxY6r\/2symAI181RRlcY27oYnr6VVNFrpYXvDI0ZtvibA+Vx0P1FTpOP6skMdRJcdLEAb+gAB97UPG9+m42PjYRUbvbx0E\/DmC8ZBOw+OkFz5mZwP3kUw\/FbhUy6t9SU\/Jflor3WxYR\/La+QPdPhaokq5Es27ElifEkm5PvfepWt4hNMgSWVpFU3Aax3AIBva5Niep8apT1JiLi4ODi0+ton8d\/+H9L+0n8Xrl+DH+tT\/wDBH98Ur4hM7wchpG5S7ql+6CLkEfc\/eq9wzic+nYtBI0bEWJW1yL3tuKFBuDRaHExlOM12LT+GWtSLibBzbmLLGt\/1jIrgfXAj3tWvGfw+1zaqVUjBjkkZllyTEK7E3YE5XAO4tvbaqcxub+N739b3v707j7YcQVcBq5cbW3xLf22Ut++tcJXcTY5IOOmaf4Fk\/GLVIZNNp1N2ijcv6Z4BQfWyE29R511\/EL\/ZfDf2Y\/8A9evO5HLEsxLMTcsxJJPmSdyal6zis8qJFJKzpHbBTay2GItYeW1CxVp9DXmT1epefwj\/AKPiH\/Dj\/uzV5vF8o9hU\/h\/FZ4A4hlaMOAHC27wF7XuP6x+9QgKeMak35ElNOMY+DNFFFOSCiiigAooooAKKKKACiiigDrBpncOVW4jQyPuBZAyqTud92AsN9643ptwNgI9bva+jcD1POh296sPFtcE+NCJB+QmleA8mElXcRLIwuvfNnb5rgWG21Tc2nRZY043fvf6FIvRer18O5bWtpIoTLfRMgwhKgyQM8uAk7ouSbgeF\/LaJxbVRwJqm0wh\/18oh5cUgEfIYsEzUgJkLbfSsWW+xrw0rbKhei9XLiEQXTSMFhGmGngOlcLDzDqfystx+YzX5uYbawroRo+dpyRHy9XOuokBtaJAlhC19lXntJcbCyLfajm+gcn1KSWFr+FNtX2c1USuzxCyDJwJYXZV23ZEcsBuN7bXqT22WwiDRMkuEmbMumQupIwuumdlGPeAJtcEdbVZO0UFpNdKYY4leBlXUia7SEoloxGzkd+2HdUEDe\/njyPajVhVtPsU5eBakxc4RHl4GT5ky5Y6yCPLMp\/Wxt49KxHwLUtFzhESmJcd5Mig6uIy2ZQfrAWptxTQSS4auOREhXSxKZeYFKtHAI3hspzzJBXEDfLyqfp9JHI0OpkF9OujiQzLqOW0LxQFHjxU5M5YY4+OXjc0cx0asKuvfz+XuyscK4VLqMjGoKpjmS8aAZkhd5GAN8T0qwyaVojy3UqwA2NvEXBBGxHqNqXdmdJJLpdZHGoaQ\/CkLkq3xkkLWyIG1WaM7qFIaSDSRoyRiCVjJm2SJzDyyyhxcgm1iBWTnTZCeDXFV39+9xJPMEVnN8VxyIBNsyQt7dLkED2pfJxpf0EZz7Yj7nf8AdVj16YDiSxhbOmlkK2iv\/RqZsbXtYnop2J2rtxnRKmlcGzctoeVII9OisDcOYzF3mU7E5eNj1pVOxXwsYp96\/wC\/QpLI8rBpTsPlQdB\/ifWpWSiwuBc2Hv5VaYNMq6Jy9mT4WSUNhAESUXYDmf0plW1t9rbWtSfiupEonixi5aaCCeIiOMOJwNPdg4GRYh2BF+g976p1sh1wzkrbpUK9QzhHlVSUjKhzcbFyQosTvcg9KY8M4dqJESWJARICyqZIgzhSVNkL5k3UjYeHjTLtXE3w+sFohpi2k+FwEV2jBJJunfcdDdr7k28aXnXwQw8PdtPzZY0Z425zIqMupkZckVTluAeovRqk+nvYf\/GxraT93Xqco+IodmOJ8m2H36V0+Ni\/3if2l\/xrOp4qBFo1kEZSZS2pYRx5\/wCtvclschZfIjY064mY4mWSeKDEaorGESHvaIo6vYRjvIAUKlt8qNbXYi+Dj5K7HxFDnh32VS5AIHdW17FiATuNhcnwBqJnqZldl\/LRApexBIDMEBJO+5IGwqyS6KKEy6ZeW\/I0U3fsvemYq+QPiQCqjyxNTOLHHT6gARrpjFpeQVEeTDmwmQgr32OWROXjas1DR4eKuuxWOFqykqXLC36RuQfc00kjZcchbJQ67jdSSAdvVT9qccfjjUHGPu8wchwunVeVi3dUxMXdT3Tdx1Hhe1R9RqQilu4WThoKZKrAONTYd1gQWAPlQp7WSlw9zcWyv8XlxiPrYffr+69IuScM9scsL3W+WOXy3ytYdbW8L1fYpc2DJDk8mm08hMQ0uaOygyFItR3Dl0aw2v4XqJFpdMsgWQwug4nGrMFjVShgJKkL3QgawIHduDTLL6F8XDaY9Sn6PTPK4SMZMQxAuBsql23Jtsqk\/StII2e+ALWUsbb2VRdmPoBvV70qyxyaN9SkSTZa\/PFYVBA0owDiPunrYA72I89+HA9YzHTyqIhqJtHq4zaOFQ7oWEIKYhA2wHQXAsdq3mvx73+hTkrz72+pSL105LYZ4nDLDK22Vssb+dje1WzSacNw\/wCQRIIHJfHSSRyOCxBLH8+OY7KAOhA2qNwuUNoY0kK8leIR84EJcQsqXJPzWJyFx5W6C1NzBeV69rKwDWatPayJliHOSFJfiXEPLESk6XDb+i6oGxxLb7mqtTRlqViThpdBRRRTCBRRRQAUUUUAFFFFABRRRQBgijEeVZooA6x6llieEWwkZGYW8Y8sd\/D5zXG1ZorDbMBR1tvXT4d8DJg2ANi+LYA7bFrWB3G1\/EVpVs7IcR0\/wmt0WpkWNJlDRlrkcy1r7DwKxn6Gsk2lY0IqTpsq0+leI4vG0ZtezoyG3nZgNtjv6VIXgmo6jSz+4gk\/7asHa3isGr4fpJOYPi4k5cqG+RW1i3Sx3UN7OavHa1+Kgab4DPHlfmYiE97u435o8r9Kk8r2LLAne91XT1PHJIirEMpVh1DAhh7g7iuml0bytjHG0j+SIWa3nZQSBV9\/FGQ\/C6P4gJ8dYmQLa+GJyBttbPH0vlapPajiLcH08Gj0uKSuuc0uILE7C4uCCSb9b2CgD03m2lS3ZjwJN29l\/J57r+FTRW50EkYOwMkbKCfIFhYn0rOl0Us0YSON5LyC6ojPZQDYkAGwuBvTZtXruIcuGeZmQyLhkqbO3cBuqg273S9XXtVxCTQImi4euBUIXZUDyOWNrAEG7Ebk2J32talnN7IRRg7d7L87KXqeGyxAcyGSMeBeNlF\/QkWvSrWcQjjNrXfyUC\/1PhVl4rxDXSRhdTzjGGDfmRFQGsVHewH6xFr1Ro4bO+W7ZG5+u37qeNsgscHJ9a9TGod5j3gFX9UePufGu6RgCwFbUXqiVFG+xgIPIVm1BYedF60UncN0iEM7i4BsB0ubXJJHgNvvXDicUeIdF5ZUgd0kXDePW97\/AHv6UylXCNI9rgXa3m25\/kPpSbi8nyRjfrIw9rqn\/wDW3tUpPc6owSjuSdA87tgkTTHrZEJcDzsoP32qfLwl4yHkgliJ6cyNkubeBYWJ9qu\/aHUvwnTw6PR4pKycyaawLE\/LcXBBJN+t7BQB6UebjGr17w6abUM4M6BSQl1djy8gVUHo52pU3LfsSnhgvhv4vToMuEaR5MuXG7kHfBC3h44jaumr0RBxkjKnrZ1Kn3sR++rR2s482jkTRaU8qOJFLlQMiWvbcg+AuT1JJ+srg+rbiOnngmIeSNQ8UlgCCQbXttsRbbqGtS63VtbEXw0dehSer9DzTj2jK4ExsqEd0lCFN99iRY7b7VB0cbl15SF3BDKFTM93f5bHIbdCLV6M0fxvCJYusmmIlj8TiLtb+yZEHsKX\/hwF00Gr4m4uI05cXqxsxA9yY1v6mn5nwv8AItjxJ6aezV3+5VOISaiYd6ErHDkCscHLiiJIL5BFARiQL5b7Co0HDZpBkkErre10idhceF1BF6unZaRm4RxRmN2ZizHzZkUk\/UkmpPBOJS6bgUksL4SDUWDWU2ykQHZgR0J8KNbWyXeinLUnbfazz3UaVo2tJGyMegdCp\/8AyANaWr0bsl2pfXyfAa9UmSUNgxUKwZVLfo2HQGzAAggee1E4zovh55YCb8uRkBPiAdj7kWNPGTbprcnOCS1RexEVQOgrNN+zXZ6XXO6xNGoQBnZyQACSAdgbnY+XvUrth2X+AMI5wl5qs1wmIGOPTvNkDl19K3Wr09xeXLTqrYr1FWng\/ZFH0y6vV6pdNC5xjuuTP136i3QkCxuBfYVF7T9lW0vKYTJJBPblzqLAX37wBPgcrg7gGs5kbo14pJXQn+Bl7h5Uln\/ozy379xcYbd\/bfa9c5oWRirqyMOqspVhcXFwdxsQfrXpr9o9EeIQtzlGm0enIhNm70rAIQotvZAB7ivOOJa5p5pJ3+aRy59LnZfYCw+lZCbl1Q2THGK2dkaiiiqEQooooAKKKKACiiigAooooAKKKKANJeh9jXsXbPhPEZ\/hjonkVVis+E5iGRxtcBhltevIK7fFy\/wC9k\/tv\/jU5wcmmi2PIopp9z0Dt0Wj4ZFptXKsutzyUg5Mq5HcmwPy2W56k+Nr0w4toV4vHBrNPi0qJhLESAyk7236EG\/WwIa4Pn5R6+J6+tdIZWQ5IzI36ysVP3U3pOTt13GlmUrTWz29di+ajhWo0nLmkiwCyKVuyG7KcwO6Tb5TvVj43w6TUyJrtCwYkC4BUOrrexs\/dvY2KnpbxvXli8Zn2zkeQD\/eMzfYk3FMuG8Vu2xaNz4qxF\/qLH6UPHLqc2qOO1T09eu6aLzx5dWOEEa0kzc5bk4fLzRj\/AEfd6V5VxRLOreDCx9x0\/d\/CrNrcpbZO7EdCzM38TVb421lAPUSAH7GjGtKNeZZcia8Vub6KBWBLeHh62\/hUfWWUi1x9z639q0WVl+U\/zFvao7h2a7Em17eG3laquwjF3bZZ+zXak6SNkGnhlybK8guR3QLD02v9TS6D8\/UM5UAM7yso2UAsXKjyG+I+lQQKacE07swVNmlYRqTuLEi5+9v7NY0o3ItBubUextMxd\/UmkRfmO8g2BNl9FUYr+4CnfauSOKWeOEHEHlK2V+8RZz08Dn4+ApPp0sAKSG7srmelaT1HtPw5uMQQ6vROOaiFJosgrC9mxudgQb9bAhrg+dLk7O6zhxi1M8WAWZCt3RiWU8wDuMbDuGlUMrI2SMyN+srFT91N631GslktzJJJLbjN3f8AvE2rYwcduxOWWMt63PTO0\/A217Jr9FaVZI1VkyUMCP2iADY2IO4t61jh0P8AojSTz6kqs0y4RRBgTcXt026tc2uAF63Ned8P4i6bKzqSOsbFTYdAcSD41w1s7zOCbkiwZnuWIB8crk1NwdaW9jObHW51v89i+dhuJCLUR79yQcpvLvfKf7QA\/wCY0fiPy9Hp4OGw7Ldpn87F2KA+mRb\/ANMVX+GrZbeR\/wDNQ+OwnaS5J6G5J9utaofEmQw8Rpi8X5MsnZP\/AGPxL3\/6a1M7P8Ll1XA5IYVyc6i4BIGyyIx3O3QV59CshVsBIUHz45FRt+lbbp51kPKgsGkQd1rAsos65Kdv1lsR5imeNvo+9nTHKlVrtR6B2a7Mf6NkGu18kcYjDcuMNk7MylfqbEgKL3v4WqucP7XNFqNTqDBFKdQ+WMgvgAzEAfRgD+yKrpuzXN2bz3Lbb+9YrVju3LcV5apQ2odjQ6jik8zQQoCQrNGrKqKAoQWyIB3F\/cmrt+IXZrVTRaQxxgiCBhL3kGJCx+Z3+U9PKvM9OXueWXBsScCwOKjJicfAAE\/SuynUMLgzsD5c0g\/yNY4O00+g0ci0tNPcuOn12i1\/D9PpZtSNLLp7WLrdGABUEbgG6kbXBBHiOs3tZpYYuCaeOObnIJ\/y5LWyJMpaw8AO8B6Cq9wnTcIaNDqJNUkyj81EUlSVO5uEYqPqLeladre0I1hh0+niMenhskMf6TMbKCQL722AuTufOwTT8W11dlNdQbdW1WxWqKywIJBFiNiPIjqKxXScYUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABW0b2II8CK1qRw7T8xx5Lv9aWTpA6rcsaHYVVu0MoM2I81v7hf\/IqwcR1ghS\/Vjso8z\/hSNOHZAM5OdySfO\/Wp9yGCovUyPWRTWHTKvQXPn1NR+IwbFwLEbn1Hj9arZRZE3RCq39mgIBNqTYjTRHC\/QzPsv7yR\/zCqeDT7j8j6fRaTTD55mbUy5Ek4\/LGpHUCxv7p71PLukkdnDtJtsrmpYs4BJJF2Y+bNv8Aw\/jXYVyiQ3LHqTeu1PFUiWWWqVhWDWRU3S6S27dfAUxKUkjfRwWFz1Nd1jFbVJ00P6R+lIzmlJ9TvAlgBXLia3if2v8AbepNR+ItaJ\/a332rF1JR+0iNxbnhYhFzfh+RHy8M8CTGOflhtnzOZlffz2tUoaNJHUNcgtwmMgMwBWTSgNcA2JsNj1G9rXNV2LUOoKq7qG+YKzAHw3ANj9a15h\/WPh4n9HZft4eVGhnq8xFi4fooZCjrGY7TaiLuSSXZU0pkUsS18r3vjiCDa1RW4bf4aKOAEzJA3OYy2Z5sclurBFQMxjIxLXU73pMrkdCR49T1IsT9tq2EzY4ZNhe+ORxv543tf1o0PyGuNdCztoo0CyRqFz0+vVrLOqnl6fYhdQS4P5hB3t3fA3FLeE62VdNqwssgCxxYgOwC31UV7WO17np5mlck7sbs7sd92ZidxY7k+IAHsK5gnf16+vjv50KG24PIr2Vf0P2giuyhCCNDz3k5kpd3fSpKb962GTElbG\/ibbVP0\/Blj5RKqJYtRpASgnseYwJDNISjnobpa2\/UEVUsj5npbqelrW9rbWrdp3IALuQtsQWay23GIvt9KxwfkFkj4HOu0aNDK6IM0Z2mZxMG31JRTEwPJZbMqlSMr5kXtsirdp3KhC7FQbhSzFQT1IW9gdzv61pTxTXUSck3sFFFFMIFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAAiFiFHU\/uFWbR6YRqAKQ6CcI+RBO1tqaHjEfk32H+NTabZHMpPZGdTw3OXmFtgAALdKkpplHrUZeMR+TD6D\/ABrtDxCNujWPkdqymiMtdbkkCoHGZAqqfEsB73BuKYUo4y2UkaeAu5\/gP51jDErkL9PqeX+U8McqA3swKsQfKRCG+9xt0qTxviMWqlfUNzY5SFUR2V47KLAK4Ksvnup3J3rfU6UPa+xHQ\/y9qjDQHzH76bSrs7Y51VEQGu0GnZvQef8AnrU2LRqPU+v+FSVUnoKdsjLJ4OMMAXp18661ITSHxNqkxxAdBS2QlM4Qabxb7VKoopSbdhS3jktkC+LH9w\/82qZqdQsYyY+w8T7VXtXqDI2R9gPIU0UVwwbdnGiiinOsKKKKACiiigAooooAKKKKACiiigAooooAnaPhpeSNCwUO6IW\/VDMFLfS9\/pVl7T9ntNBNp4hHqI1KrzCShLDvC63FhLe1\/wBEAiw81EZUMCy5LcZLe2QvuL2Nrja9PuN8aheGCCESFYxExMjAlTGrLgAABl3t2GxsKjNytUbiyR0PVVi\/S9ntOdU+mYzs3xLwpgyDCJSQZnLKciLElRbZSb9BWvC+zkMiwo7SGTUGYI6FRGgiyCkoVJfIrc94WBFTk4tATqmdJg2okY5RmPJYWbIx9+9rn5rdQAK04dxeKMRExyF4DLybMoQiW5\/M2vcFj8vWluZRThfb21\/FkCHgEJhAJk5zaRtWGDLyxjkRFhjke6nzZdT0rabs\/EInVTJzk00epLFl5Zz5ZaMIFyFhKLNluQdqkx8UjEQGD84aZtKDkvKwbIZkWyzs526dK2k4rGY2tG4meBNOxLLysUw7yi2WREaix2Fz1ouZmvHXb3\/JC0HA4jAkkkWokZ5XQiFlGIQRkGxja7HM7XHSuHEuy0sZmIeIxxySortIiFjEASApNy1j0HiDUxOKusCQxvIhEkjsUdlDB1QAHEi9sT186jz6gNAkNt1eR7+B5ixgD37h+9MtdiPLDTXp+pqey8rztDHy1YFAEknjDktGr93YZ9b7Da4FRYezs7KWUIRdwo5iZScv+kMak3kCjfb6XqxHjEDSTyskwaVURWQpkiiNUktlsC2Nr9bEgWua10fHRHCsS81TGZOUV5O4diwzLoSpBJ+Tres1THvHfXz++xXdBwKaYFlMYVWVSzyKgBe+Iu1r3xI29K66bsxqXLAKilZDFZ5EQtKOsaZHvt7bbjem3DGhGmlWbMrzYLCMqH2Wa5AfqPA+Vx7GSvHYnfmTROSupbUxhHUC7FDy3yHy3jXvDfrtWucrdGR0aU5PqV7Sdm9RKuaqm5YKrOqu5QXcRoxu5XxtWuv4TgsDKb8yESNc7Zc2RO7t0sg6+tWDQ8aReU8kbtLC8rx4sojJlbOz3GQAbfu9RtS7U6hWjgUBg0UZjY3GJAdnUjxB75B9hQpSvcWUoKOz3\/r\/AKJPgm9PvR8E\/p96ZUVSzn5jI2mMydCCPIm4\/wDFdZULSiS2xUA+NiCf8etdK2jexvSsXV3ARk9AftXVdKfHapSNcXraiyTkcU0yj196xPqAuwFz5dBWdRNiNupqDQalfU0biMl7flj03+njUiLWv+kg+h\/kRSTUQyFzjbEn9YfXam16xO+xacIpKicupX2rnNrAPl3PhfYVGpequ0rPYgL3FB8iRk1DEjjTNp4ZHN2IJ9+noK5\/BN6fepWcn6o+4+3WusZNtxY02opqaXYgfBN6fesHSt6femdcXFDkxoTbe5CGkb0+9Z+Cb0+9T463oUjJTadC34JvT70fBt6feps6sR3TY+9v5GokyP8ApDK3sRv7pt0ocqNjJvujQ6VhuStvehNKSLgqR5g3qBxPQO9gFJUIbgbFiCSq92wFz5jyptwm\/KAKFLXAU2uFHTptSqbbqik1phqTOPwTen3o+Db0+9Mqi67mY9y1+u97HzBI6e9Zky6I2PweKXEZljtL328v0I40ben3o+Cb0+9Y0uqkyAaEqPE5KR9LG539BTKkwZ+YvU6P\/pcJLhJpJ3F9G1XzF3wTen3rNMaKvZ5vMkSeFxB54UYXVpY1YdLhnAI26bGpkPBCVc5k4RB1dQCjtyWlOJvfDu2Bt53sRjSqgEjYEgHY2Ph5fvP3pGnexsJQSqSsdy8BCnrKbZggRC7FDp1yjGXeS897+SGt4OAB3xyZQocFgpYsV1csOVr+CqpIHmvnela8SkBQ3XuAhRy47C4AJtjYkhV367VGZySWJNySSb7ktux+vjS6Z+SrnhXSJN0fDS6BjmC0nLBWPJF2jOcjEjFCJNjbopNTBwNMwpeVQxjVQ0YDhpJpIQWUvst48uu4P1pL6eB6jzt0oub3ub7ePl0rWpeRFPGl9kbaTRxh1c3eNlQKHAU5yytDYgEjYRyuCD+ivjW+o4KoLkc6wFwgivKLzSR3xy+T8u97\/pKPWk+Zxxucb5W9bWv+8\/c1i563N7Wvc3t5e3pWaZeTeZjqtI6PAL4Krtm\/dXJLIzCKOXutfdMXYA+ajzrGm4EJFV1kYBpAFJUd6NpHRWADfMcPlNtzb1KuXUuyohIxQd0BVXwAucQLmwG58veuV9rXNvK+32oqXk1zxX9kZw8LBs2M+8gQAw7r3Y2Jl73dU8zYjqFJrvHwRXZVEhDFlvdBiFeaSIY965a6dD1va9JSx33O\/Xc726X86xW1LyYsmP7o80vDkScK3fUyQRAMpByndSwI81QOLjxZCLVy0PBRKAVd8WjV1JVQciZRZgGO14W3HgfurMjEWJNsi3X9IgAn3so+1agkdCR4bHw629qzTLyHMx\/d2HGn4OpbBmZbwh+ZIuMQLNAckbLv2WQje19ul9uuj4ECYjJmoadI2QgBsXkdBuG2buWI9T5boj5eHS3hbraslj5nrfqevn70aZeQWTH90cJwlH5QVnViIA4ZR\/8ANVzcd7d7x2x2F2AFaPwdQPncFlYorIARjphqLSd7um112v1B9KU0E+p9fr1o0y8g8mN\/6nSCbH2qQ+pXw3qHRT0czibopdgL7swFz03IH23qfp+DZPy5A5vyxiosQJJMMmyU91bXOwvcbilhrJY3vc36Xvvv1rGn2KwlFdUTU4ArhLG5bEklbKAYFlvcmxAJt9K3TgDqNim7KtgTe7MsYsD4ZCQf\/Zf0peCR0JFvI\/58z96x\/n+dZpfko8kH1T\/MlNo8ZhCxvdkW6+T4kEeHRh5\/WpsfBc3IUkKrIpuSzWZrFheNNgPCx6eW9KSb7+NZZyepJv1uT4bihp+RIygrtDOHgpK5s1gQ2I6HLIKmXWynK52vt9a48R4aYRu4Y5ldumyI258D3iLel6gkk7Em3v57mgsT1JPuaEpeTZSx1tEZabhyskbd+759DsMS4G3LIN8R+mDv0rZuDSBWYuuKxhyfPZjiPH9AjexuRsL7LAx6XNutrm1\/OsXPmelup6eXt6Vji2NHJBLp+o3TgMjNjmlwTc32A7uPhvcOjXv0bpcUufT2ZFyF2EZJsbLzFVhuetgwvbauINum3t7W\/htWK2MWhZzg+i3+Y41HB8d8J\/CyDEvvJKmZ7liv5YNrDd7ZC1zy13Co0jLhiSIyxFwwyCwGx7gx\/pj3btsAb0tLHzPS3U9OlvbYfaijTLyM8mPtEcf6EjBfv5YmQd24IwMIAYiJiD+ab4qeg9aJ+ChdgzMfzBiLZKU5+GQAN8zEAAPJt91pQGI3BI+taj\/P3v8Ax3rNMvIczH90mw6Mc5YmLAYKzeBBOnErD5TaxuOht6mpTcCY3KOuOSqLm5JKRsxFlGYvJsQoyAvtcXU0A+p8D18R0P0rWpeRYzguqG8\/AwNle7FAwUizFmkjQbY7L3\/E3vaoev0HKAuwJLEbDa3KikU36XtL09PGohNBYnqSfc3rIxaHy5lNb36W7CiiiqHMf\/\/Z',width=400,height=400)","a3e80615":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4f3dc2a2":"df = pd.read_csv('..\/input\/hackathon\/task_1-google_search_english_original_metadata.csv', encoding='ISO-8859-2')\ndf.head()","e287da18":"plt.style.use('fivethirtyeight')\nsns.countplot(df['is_pdf'],linewidth=3,palette=\"Set2\",edgecolor='black')\nplt.show()","b094591d":"# Let's See The Correlation Among The Features .\n\n# Below chart is used to visualize how one feature is correlated with every other Features Present in the dataset .\n# if we have two highly correlated features then we will consider only one of them to avoid overfitting .\n\n# since in our Dataset There is now two  features which are highly correlated ,\n# hence we have consider all the features for training our Model .\n\n\nplt.rcParams['figure.figsize'] = (6, 4)\nsns.heatmap(df.corr(),annot = True ,cmap = 'rainbow_r',annot_kws = {\"Size\":14})\nplt.title( \"Chart Shows Correlation Among Features   : \")","43c0aabd":"plt.rcParams['figure.figsize'] = (14,5)\nplt.subplot(1,2,1)\nsns.kdeplot(df['char_number'][df.is_pdf == 1],shade = True,color = \"red\")\nplt.title('char_number')\nplt.xlabel('char_number Distribution ')","310a80cb":"numerical_df = df.select_dtypes(exclude='object')\n\nfor i in range(len(numerical_df.columns)):\n    f, ax = plt.subplots(figsize=(7, 4))\n    fig = sns.distplot(numerical_df.iloc[:,i].dropna(), rug=True, hist=False, label='UW', kde_kws={'bw':0.1})\n    plt.xlabel(numerical_df.columns[i])","f854e924":"from category_encoders import OneHotEncoder\nfrom sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler\n\ncols_selected = ['country']\nohe = OneHotEncoder(cols=cols_selected, use_cat_names=True)\ndf_t = ohe.fit_transform(df[cols_selected+['char_number']])\n\n#scaler = MaxAbsScaler()\nX = df_t.iloc[:,:-1]\ny = df_t.iloc[:, -1].fillna(df_t.iloc[:, -1].mean()) \/ df_t.iloc[:, -1].max()\n\nmdl = Ridge(alpha=0.1)\nmdl.fit(X,y)\n\npd.Series(mdl.coef_, index=X.columns).sort_values().head(10).plot.barh()","0d4fe99d":"df['char_number'].hist(figsize=(8,3), bins=20)","efee48e8":"ax = df['language'].value_counts().plot.barh(figsize=(10, 4))\nax.set_title('language Distribution', size=18)\nax.set_ylabel('language', size=10)\nax.set_xlabel('char_number', size=10)","727284ce":"from scipy.stats import norm, skew #for some statistics\nimport seaborn as sb\nfrom scipy import stats #qqplot\n#Lets check the ditribution of the target variable (Placement?)\nfrom matplotlib import rcParams\n# figure size in inches\nrcParams['figure.figsize'] = 4,2\n\nsb.distplot(df['char_number'], fit=norm)\n\n#Get the QQ-plot\nfig = plt.figure()\nres = stats.probplot(df['char_number'], plot=plt)\nplt.show()","6dff7452":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQiLK5MpXbZBg2pHK73UhS4x4533r7l1pJ4CnQLgfGO63qq2xef&usqp=CAU',width=400,height=400)","85620a56":"elisagenie.com","3bf5a8d5":"#Codes from Vinod R https:\/\/www.kaggle.com\/vinodsunny1\/let-s-think-like-a-heart-surgeon","1c3ec1e2":"All in English! We should take a chance on other languages so that we can find out many relevant, worthy, researchs. If we are fighting a pandemic (as never seen before), all languages should be tried\/welcomed. We can't discharge anything. ","369bfbe7":"twitter.com","68fd0044":"Das war's Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke","f4fb69ce":"#Codes from Mario Filho https:\/\/www.kaggle.com\/mariofilho\/live26-https-youtu-be-zseefujo0zq"}}