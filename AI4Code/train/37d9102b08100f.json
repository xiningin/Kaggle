{"cell_type":{"39443e1f":"code","1a2d6dfe":"code","e403fd1a":"code","94b0a6de":"code","c1224c12":"code","544fffdb":"code","7021affb":"code","9c754cfe":"code","5a8d3333":"code","528f5308":"code","278961b2":"code","a88ecae5":"code","36c9f29a":"code","e7802e88":"code","a9135590":"code","16c55b6c":"code","8140dbe6":"markdown","805083e0":"markdown","e9fdc3be":"markdown","3e01604e":"markdown","b57f6d5e":"markdown","84278d46":"markdown","851a9ab5":"markdown"},"source":{"39443e1f":"from IPython.core.display import HTML\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n%matplotlib inline\n\nfrom datetime import datetime, timedelta\nfrom urllib.request import urlopen\nimport folium\nimport geopandas as gpd\n\n\n\n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndf1 = pd.read_csv('..\/input\/covid19-corona-virus-india-dataset\/complete.csv',parse_dates=['Date'])\ndf2 = pd.read_csv('..\/input\/covid19-corona-virus-india-dataset\/patients_data.csv',parse_dates=['date_announced','status_change_date','estimated_onset_date'])\n","1a2d6dfe":"HTML('''<div class=\"flourish-embed flourish-cards\" data-src=\"visualisation\/1786965\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1786965\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>''')","e403fd1a":"## We will do some data cleaning activities on both the datasets since both are public datasets and might have missing\/mistyped\/unwanted values\n## df1 dataset seems a clean one, all the features are relevant for making visualizations. Also df1 contains no missing values.\ndf1.isnull().sum()","94b0a6de":"## We will do some basic data changes.\n## For instance executing the following command : df1['Name of State \/ UT'].unique() displays values such as\n## Union Territory of Chandigarh and Union Territory of Jammu and Kashmir\n## We will remove the words 'Union Territory of' and will simply keep the state name\n## For example: 'Union Territory of Jammu and Kashmir' will become 'Jammu and Kashmir'\n\ndf1['State'] = df1['Name of State \/ UT'].str.replace('Union Territory of ','')\n\n## Also we do not require the following features for our current visualization: \n## Total Confirmed cases (Indian National) \n## Total Confirmed cases ( Foreign National ) \n## So we will be droppin those columns\ndf1.drop(['Total Confirmed cases (Indian National)','Total Confirmed cases ( Foreign National )'], axis = 1, inplace = True)\n\n## After we check the existing column names, we will do a slightly more intuitive column renaming. But before that we should rearrange\n## the column ordering\n## For checking -> df1.columns\n## Rearranging:\ndf1 = df1[['Date', 'Name of State \/ UT', 'Latitude', 'Longitude', 'Total Confirmed cases', 'Death', 'Cured\/Discharged\/Migrated']]\n## Renaming\ndf1.columns = ['Date', 'State\/UT', 'Latitude', 'Longitude', 'Confirmed', 'Deaths', 'Cured']\n\n## Next we will do some feature engineering\n## We will create three new features - > 'Active', 'Mortality rate','Recovery rate'\ndf1['Active'] = df1['Confirmed'] - df1['Cured']- df1['Deaths']\n\n## Next let us rearrange once more\ndf1= df1[['Date', 'State\/UT', 'Latitude', 'Longitude', 'Confirmed', 'Active', 'Deaths', 'Cured']]\n\n## df1[df1['State\/UT'] == 'Kerala']\n\n## Lets view the final dataframe\ndf1.head(5)\n## So our dataset contains daily date wise count of covid-19 instances statewise.\n##. eg:  Date\t    State\/UT\tLatitude\tLongitude\tConfirmed\tActive\tDeaths\tCured\n##      2020-04-23\tKerala\t    10.8505\t    76.2711\t      438\t      112\t 3\t    323","c1224c12":"summary_data = df1[df1['Date'] == max(df1['Date'])].reset_index(drop = True)\nsummary_data = summary_data.groupby(['Date'], sort=False)['Confirmed','Active','Cured','Deaths'].sum().reset_index()\nsummary_data['Date'] = summary_data['Date'].dt.strftime('%d %B %Y')\nsummary_data.style.format({\"Total Confirmed Cases\": \"{:,.0f}\", \"Active Cases\": \"{:,.0f}\", \"Cured\/Discharged\/Migrated\": \"{:,.0f}\", \"Death\": \"{:,.0f}\"})\n\n\nstyles = [\n    dict(selector=\"th\", props=[(\"font-size\", \"120%\"),\n                               (\"text-align\", \"center\"),\n                              (\"font-weight\", \"normal\"),\n                              (\"color\", \"grey\")]),\n    dict(selector=\"td\", props=[(\"font-size\", \"300%\"),\n                               (\"text-align\", \"center\"),\n                              (\"background-color\", \"white\"),\n                           (\"color\", \"dodgerblue\")]),\n    #dict(selector=\".row_heading, .blank\", props=[(\"display\", \"none;\")])\n]\n\nhtml = (summary_data.style.set_table_styles(styles))\nhtml","544fffdb":"\nplt.figure(figsize=(10, 7))\nplt.barh('Confirmed Cases',df1['Confirmed'].sum())\nplt.barh('Active Cases', df1['Active'].sum())\nplt.barh('Deaths',df1['Deaths'].sum())\nplt.barh('Cured',df1['Cured'].sum())\nplt.title('# of Coronavirus Confirmed Cases', size=20)\nplt.xticks(size=10)\nplt.yticks(size=10)\nplt.show()","7021affb":"## We also wish to add one more feature 'New Cases'. It will be derived by subtracting the current day's number of\n## cases and the previous days number of cases.\ncurr_day = df1[df1['Date'] == max(df1['Date'])].set_index('State\/UT')\nprev_day = df1[df1['Date'] == max(df1['Date'])- timedelta(days= 1)].set_index('State\/UT')\nnew_cases = curr_day['Confirmed'] - prev_day['Confirmed']\nnew_cases = new_cases.fillna(0)\nnew_cases","9c754cfe":"## So we will create a new dataset that will have two additional columns namely 'Mortality Rate' and 'Recovery Rate'\n## From the current dataframe, we will choose the row corresponding to the maximum date, so that we can calculate the latest 'Mortality Rate' and 'Recovery Rate'\n## Since the rows will correspond to the latest rows from the original dataset, so the indexes will be also from the old dataset.\n## Hence we should be re-setting the indexes as well\ndf = df1[df1['Date'] == max(df1['Date'])].reset_index(drop = True)\n\n## We are adding the feature 'new_cases'\ndf['New Cases'] = df['State\/UT'].map(new_cases)\n\n## Next we are adding two new features that we have derived.They are 'Mortality Rate' and 'Recovery Rate'.\ndf['Mortality Rate'] = df['Deaths']\/df['Confirmed']\ndf['Recovery Rate'] =  df['Cured']\/df['Confirmed']\n\n## We are dropping the date column, since it contains the same date. (maximum date)\ndf.drop( ['Date'], axis = 1, inplace = True )\n# fix datatype\n# for i in ['Confirmed', 'Deaths', 'Cured']:\n#    df[i] = df[i].astype('int')\n","5a8d3333":"temp = df[['State\/UT', 'Confirmed', 'Active', 'New Cases', 'Deaths', 'Mortality Rate', 'Cured', 'Recovery Rate']]\ntemp = temp.sort_values('Confirmed', ascending=False).reset_index(drop=True)\n\ntemp.style\\\n    .background_gradient(cmap=\"Blues\", subset=['Confirmed', 'Active', 'New Cases'])\\\n    .background_gradient(cmap=\"Greens\", subset=['Cured', 'Recovery Rate'])\\\n    .background_gradient(cmap=\"Reds\", subset=['Deaths', 'Mortality Rate'])","528f5308":"## Lets us visualize the covid-19 affected statewise in a geographical map\n## We will be using python folium library\n## https:\/\/coderzcolumn.com\/tutorials\/data-science\/interactive-maps-choropleth-scattermap-using-folium\n## https:\/\/thedatafrog.com\/en\/articles\/choropleth-maps-python\/\n\n## To create a choropleth, we need two files. The first file will be the shape file and the second file will be the data file.\n## The shape file contains the coordinate information related to the outlines of the map\n\n## Shape files\n\n## .shp files can be read using geopandas using .read_file() function\n## .shp files contain geometry column in which the shape of each individual piece inside a map\n## geometry can be a point, line, polygon, or multipolygon\n\n## First Step:\n# import shape file\ndist = gpd.read_file('..\/input\/india-states\/Igismap\/Indian_States.shp')\ndist.plot()\n## On plotting the shape file, we get the map of india having all the states outlined.\ndist.head(40)","278961b2":"## The column 'st_nm' is the key. So we need to make sure that the values of the column 'State\/UT' in the dataframe \n## matches with the values with the column 'st_nm' in the shape file. We find that there are discrepancies. So we need to fix them first.\n\n## Copy the columns State\/UT' and 'Confirmed' of dataframe df to a new dataframe\n#df_choropleth = df[['State\/UT','Confirmed']].copy()\n\n\n## Some data manipulation on dataset df1, since this datset is pathetic with highly inconsistent records\ndf1['State\/UT'] = df1['State\/UT'].str.replace('Union Territory of Jammu and Kashmir','Jammu & Kashmir')\ndf1['State\/UT'] = df1['State\/UT'].str.replace('Jammu and Kashmir','Jammu & Kashmir')\ndf1['State\/UT'] = df1['State\/UT'].str.replace('Union Territory of Ladakh', 'Ladakh')\ndf1['State\/UT'] = df1['State\/UT'].str.replace('Union Territory of Chandigarh', 'Chandigarh')\n\n## Also I found that the data has certain discrepancies, such as all State\/UT records are not present for every date.\n## So I had to create a dataset from the df1 dataframe by grouping on the State\/UT column and taking all the rows that correspond to the\n## maximum Date for that particular State.\n## eg:Rajasthan                              2020-04-26\n##    Uttar Pradesh                          2020-04-25\ndf_choropleth = df1.groupby(['State\/UT'], sort=False)['Date'].max().reset_index('State\/UT')\n\n## Next I need to merge df_choropleth with the original dataframe df1, so that I can get the remaining columns.\ndf_choropleth = pd.merge(df1, df_choropleth,  how='inner', left_on=['State\/UT','Date'], right_on = ['State\/UT','Date'])\n\n\n## change the state names to match with the names in the shape file\ndf_choropleth['State\/UT'] = df_choropleth['State\/UT'].str.replace('Andaman and Nicobar Islands', 'Andaman and Nicobar Island')\ndf_choropleth['State\/UT'] = df_choropleth['State\/UT'].str.replace('Delhi', 'NCT of Delhi')\ndf_choropleth['State\/UT'] = df_choropleth['State\/UT'].str.replace('Jammu and Kashmir', 'Jammu & Kashmir')\ndf_choropleth['State\/UT'] = df_choropleth['State\/UT'].str.replace('Ladakh', 'Jammu & Kashmir') ## to match our shape file\ndf_choropleth['State\/UT'] = df_choropleth['State\/UT'].str.replace('Telengana', 'Telangana')\ndf_choropleth['State\/UT'] = df_choropleth['State\/UT'].str.replace('Arunachal Pradesh', 'Arunanchal Pradesh')\n\n## We may get two rows with the same State\/UT name because of the rename just done above. We want to combine them as one and have the\n## sum of the Confirmed cases based on State\/UT.\ndf_choropleth[['State\/UT','Confirmed']].groupby(['State\/UT'],as_index = False).sum()\n\n","a88ecae5":"## https:\/\/python-visualization.github.io\/folium\/quickstart.html\n\n## The first dimension I wanted to show is geolocation.\n## I defined my map to initialize at these coordinates.\nlatitude = 23.00\nlongitude = 78.98\ncovid_map = folium.Map(location=[latitude, longitude], min_zoom=4, max_zoom=6, zoom_start=4)\n\n## User defined bin intervals.Bins are generally equidistant.\nbin_range = [0, 10000]\nbin_input = '10, 50, 100, 300, 600, 1000 , 3000, 5000'\nbin_input_parsed = [int(x.strip()) for x in bin_input.split(',')]\n\nbins = [bin_range[0]] + bin_input_parsed + [bin_range[1]]\npd.cut(df_choropleth['Confirmed'], bins)\n\n# NO More Used Block\n## The second dimension wanted to show is covid confirmed cases.\n## I grouped the 'Confirmed' variable into 4 bins.\n#bins  = df_choropleth['Confirmed'].cut([0, 10, 50, 100, 300, 600, 1000, 2000 , 3000, 4000, 5000 ,10000])\n\n## Next, I created a dictionary for the colors of my markers. \n## I decided on a range of primary colors from lightblue (0) to red (3). \n## I wanted the highest quartile (i.e. the most congested cities) to stand out with a bold red, \n## and the lowest quartile (i.e. the least congested and least viable candidates) to more or less fade into the base-map.\n\n# NO More Used Block ends here\n\nfolium.Choropleth(dist, ## name of the shape file\n                  data = df_choropleth, ## name of datafile\n                  key_on='feature.properties.st_nm', ## key feature on the shape file\n                  columns=['State\/UT', 'Confirmed'], ## corresponding key column(to the shape file) and the data column\n                  fill_color= 'YlGnBu',              ## colour scale\n                  bins = bins, ## user defined bins and bin-size. \n                  ## We could also specify like this :bins = 9. This would create 9 equal bins. Note that 9 is the maximum number\n                  line_weight=0.9, ## The border lines\n                  line_opacity=0.5,\n                  legend_name='No. of reported cases').add_to(covid_map)\n\nfolium.LayerControl().add_to(covid_map)\ncovid_map\n\n","36c9f29a":"# BARPLOTS FOR STATE WISE REPRESENTATION\nfig = px.bar(df_choropleth.sort_values('Confirmed', ascending= False).sort_values('Confirmed', ascending=False), \n             color='State\/UT',\n             x=\"Confirmed\", y=\"State\/UT\", \n             title='Total Confirmed Cases Statewise', \n             text='Confirmed', \n             orientation='h', \n             width=800, height=1000,color_discrete_sequence = px.colors.cyclical.Phase)\nfig.update_layout(plot_bgcolor='rgb(275, 260, 265)')\n\nfig.show()","e7802e88":"# BARPLOTS FOR STATE WISE REPRESENTATION\nfig = px.bar(df_choropleth.sort_values('Active', ascending= False).sort_values('Active', ascending=False), \n             color='State\/UT',\n             x=\"Active\", y=\"State\/UT\", \n             title='Total Active Cases Statewise', \n             text='Active', \n             orientation='h', \n             width=800, height=1000,color_discrete_sequence = px.colors.cyclical.Phase)\nfig.update_layout(plot_bgcolor='rgb(275, 260, 265)')\n\nfig.show()","a9135590":"# BARPLOTS FOR STATE WISE REPRESENTATION\nfig = px.bar(df_choropleth.sort_values('Cured', ascending= False).sort_values('Cured', ascending=False), \n             color='State\/UT',\n             x=\"Cured\", y=\"State\/UT\", \n             title='Total Cured Cases Statewise', \n             text='Cured', \n             orientation='h', \n             width=800, height=1000,color_discrete_sequence = px.colors.cyclical.Phase)\nfig.update_layout(plot_bgcolor='rgb(275, 260, 265)')\n\nfig.show()","16c55b6c":"# BARPLOTS FOR STATE WISE REPRESENTATION\nfig = px.bar(df_choropleth.sort_values('Deaths', ascending= False).sort_values('Deaths', ascending=False), \n             color='State\/UT',\n             x=\"Deaths\", y=\"State\/UT\", \n             title='Total Deaths Statewise', \n             text='Cured', \n             orientation='h', \n             width=800, height=1000,color_discrete_sequence = px.colors.cyclical.Phase)\nfig.update_layout(plot_bgcolor='rgb(275, 260, 265)')\n\nfig.show()","8140dbe6":"# Summary of Covid outcomes at a glimpse","805083e0":"# 1. View By Background Gradient","e9fdc3be":"# Feature Extraction","3e01604e":"# 2. View By Choropleth","b57f6d5e":"# HORIZONTAL BAR PLOT","84278d46":"# 3. Data Visualization By Bar charts","851a9ab5":"The first case of the 2019\u201320 coronavirus pandemic in India was reported on 30 January 2020, originating from China. Experts suggest the number of infections could be much higher as India's testing rates are among the lowest in the world. The infection rate of COVID-19 in India is reported to be 1.7, significantly lower than in the worst affected countries.\n\nThe outbreak has been declared an epidemic in more than a dozen states and union territories, where provisions of the Epidemic Diseases Act, 1897 have been invoked, and educational institutions and many commercial establishments have been shut down. India has suspended all tourist visas, as a majority of the confirmed cases were linked to other countries.\n\nOn 22 March 2020, India observed a 14-hour voluntary public curfew at the instance of the prime minister Narendra Modi. The government followed it up with lockdowns in 75 districts where COVID cases had occurred as well as all major cities. Further, on 24 March, the prime minister ordered a nationwide lockdown for 21 days, affecting the entire 1.3 billion population of India."}}