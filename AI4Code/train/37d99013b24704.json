{"cell_type":{"38965fd9":"code","73c6b343":"code","599ed6fe":"code","d7a8d752":"code","1ca6712a":"code","19ed6d69":"code","f53f30d7":"code","2599a77d":"code","05b3e3f8":"code","71d450c7":"code","7b284995":"markdown","d5c00a03":"markdown","1daccd91":"markdown","9c1074ef":"markdown","ac3947c6":"markdown","6b8f81e8":"markdown","568d90c5":"markdown","e0723fd8":"markdown","4d46be91":"markdown","1adf1c1a":"markdown","3d280010":"markdown"},"source":{"38965fd9":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","73c6b343":"print(os.listdir('..\/input'))","599ed6fe":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","d7a8d752":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","1ca6712a":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","19ed6d69":"df = pd.read_csv('..\/input\/kaggle_rankings.csv', delimiter=',')\ndf.dataframeName = 'kaggle_rankings.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","f53f30d7":"df.head(5)","2599a77d":"plotPerColumnDistribution(df, 10, 5)","05b3e3f8":"plotCorrelationMatrix(df, 8)","71d450c7":"plotScatterMatrix(df, 15, 10)","7b284995":"There is 1 csv file in the current version of the dataset:\n","d5c00a03":"Now you're ready to read in the data and use the plotting functions to visualize the data.","1daccd91":"Scatter and density plots:","9c1074ef":"### Let's check the file: ..\/input\/kaggle_rankings.csv","ac3947c6":"## Introduction\nGreetings! This is a kernel with starter code demonstrating how to read in the data and begin exploring. Click the blue \"Fork Notebook\" button at the top of this kernel to begin editing.","6b8f81e8":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","568d90c5":"## Conclusion\nThis concludes the starter analysis! Please \"Upvote\" the kernel if you find it useful.\n\nHappy Kaggling! ","e0723fd8":"Distribution graphs (histogram\/bar graph) of sampled columns:","4d46be91":"Let's take a quick look at what the data looks like:","1adf1c1a":"## Exploratory Analysis\nTo begin this exploratory analysis, first use `matplotlib` to import libraries and define functions for plotting the data.","3d280010":"Correlation matrix:"}}