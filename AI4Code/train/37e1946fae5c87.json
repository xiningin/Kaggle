{"cell_type":{"9e6e6bd7":"code","3ae8a942":"code","9ba293b9":"code","3d9a0d0f":"code","440cd7cc":"code","5ddbcab9":"code","dddf4994":"code","b083642c":"code","3a036a2b":"code","969220fa":"code","8f0ef934":"code","af2eb060":"code","cccd57ec":"code","c4eb0573":"code","7be8ff1e":"code","514b2de7":"code","3ecba166":"code","22743912":"code","6692ce02":"code","9a5f2a61":"code","a78f5fc9":"code","2359d989":"code","4bce0759":"code","3cb4e153":"code","b8c953f8":"code","a53e3f70":"markdown","afaa4f90":"markdown","4b659bb7":"markdown","8a244285":"markdown","418417ef":"markdown","0405e281":"markdown"},"source":{"9e6e6bd7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3ae8a942":"from IPython.core.display import display, HTML\n\nimport pandas as pd\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\nimport os\nimport gc\nimport cv2\n\nfrom joblib import Parallel, delayed\n\nfrom sklearn import preprocessing, model_selection\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn.metrics import r2_score\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport numpy.matlib\nimport warnings\nfrom PIL import Image, ImageFilter\nwarnings.simplefilter('ignore')","9ba293b9":"train = pd.read_csv('..\/input\/tensorflow-great-barrier-reef\/train.csv')\ntrain","3d9a0d0f":"train.annotations.unique()","440cd7cc":"test = pd.read_csv('..\/input\/tensorflow-great-barrier-reef\/test.csv')\ntest","5ddbcab9":"sub = pd.read_csv('..\/input\/tensorflow-great-barrier-reef\/example_sample_submission.csv')\nsub","dddf4994":"sample_test = np.load('..\/input\/tensorflow-great-barrier-reef\/example_test.npy') \nsample_test[0][0]","b083642c":"fig = plt.figure(figsize=(30,20))\nfor i in range(3):\n    fig.add_subplot(4, 5, i+1)\n    plt.title(i)\n    plt.imshow(sample_test[i])","3a036a2b":"len(train)","969220fa":"anno = train[train.annotations!='[]']\nanno","8f0ef934":"video0 = anno[anno.video_id==0].reset_index(drop=True)\nvideo0","af2eb060":"video1 = anno[anno.video_id==1].reset_index(drop=True)\nvideo1","cccd57ec":"video2 = anno[anno.video_id==2].reset_index(drop=True)\nvideo2","c4eb0573":"a = video0.annotations.loc[0][2:-2]\na = a.split(',')\na","7be8ff1e":"x = int(a[0].split(':')[1])\ny = int(a[1].split(':')[1])\nwidth = int(a[2].split(':')[1])\nheight = int(a[3].split(':')[1])","514b2de7":"fig = plt.figure(figsize=(30,20))\n\nvideo_imid = ('..\/input\/tensorflow-great-barrier-reef\/train_images\/video_0\/16' +'.jpg')\nimg = cv2.imread(video_imid)\n\nimg = cv2.rectangle(img,\n              pt1=(x, y),\n              pt2=(x+height, y-width),\n              color=(0, 255, 0),\n              thickness=3,\n              lineType=cv2.LINE_4,\n              shift=0)\n\nplt.imshow(img)","3ecba166":"for i in range(15):\n    video0[f'x_{i}'] =str()\n    video0[f'y_{i}'] = str()\n    video0[f'width_{i}'] = str()\n    video0[f'height_{i}'] = str()\nvideo0['path'] =str()\n\nfor x in video0.index:\n    a = video0.annotations.loc[x][2:-2]\n    a = a.split(',')\n    \n    for i in range(int(len(a)\/4)):\n        video0[f'x_{i}'][x] = int(a[0].split(':')[1])\n        video0[f'y_{i}'][x] = int(a[1].split(':')[1])\n        video0[f'width_{i}'][x] = int(a[2].split(':')[1])\n        video0[f'height_{i}'][x] = int(a[3].split(':')[1].split('}')[0])\n    video0['path'][x] = '..\/input\/tensorflow-great-barrier-reef\/train_images\/video_0\/' + str(video0.video_id.loc[i]) +'.jpg'","22743912":"fig = plt.figure(figsize=(30,20))\nfor i in range(12):\n    fig.add_subplot(4, 3, i+1)\n    plt.title(video0.image_id[i])\n    img = cv2.imread(video0.path[i])\n    for z in range(15):\n        if video0[f'x_{z}'][i] !=str():\n            x = video0[f'x_{z}'][i]\n            y = video0[f'x_{z}'][i]\n            width=  video0[f'width_{z}'][i]\n            height= video0[f'height_{z}'][i]\n            img = cv2.rectangle(img,\n              pt1=(x, y),\n              pt2=(x+height, y-width),\n              color=(0, 255, 0),\n              thickness=3,\n              lineType=cv2.LINE_4,\n              shift=0)\n\n    plt.imshow(img)\n","6692ce02":"for i in range(25):\n    video1[f'x_{i}'] =str()\n    video1[f'y_{i}'] = str()\n    video1[f'width_{i}'] = str()\n    video1[f'height_{i}'] = str()\nvideo1['path'] =str()\n\nfor x in video1.index:\n    a = video1.annotations.loc[x][2:-2]\n    a = a.split(',')\n    \n    for i in range(int(len(a)\/4)):\n        video1[f'x_{i}'][x] = int(a[0].split(':')[1])\n        video1[f'y_{i}'][x] = int(a[1].split(':')[1])\n        video1[f'width_{i}'][x] = int(a[2].split(':')[1])\n        video1[f'height_{i}'][x] = int(a[3].split(':')[1].split('}')[0])\n    video1['path'][x] = '..\/input\/tensorflow-great-barrier-reef\/train_images\/video_0\/' + str(video0.video_id.loc[i]) +'.jpg'","9a5f2a61":"video1[video1[f'x_{17}'] !=str()] ","a78f5fc9":"i=1759\nfor z in range(25):\n            x = video1[f'x_{z}'][i]\n            y = video1[f'x_{z}'][i]\n            width=  video1[f'width_{z}'][i]\n            height= video1[f'height_{z}'][i]\n            print(x,y,width,height)","2359d989":"i=1760\nfor z in range(25):\n            x = video1[f'x_{z}'][i]\n            y = video1[f'x_{z}'][i]\n            width=  video1[f'width_{z}'][i]\n            height= video1[f'height_{z}'][i]\n            print(x,y,width,height)","4bce0759":"fig = plt.figure(figsize=(30,20))\nfor i in range(12):\n    fig.add_subplot(4, 3, i+1)\n    plt.title(video1.image_id[i])\n    img = cv2.imread(video1.path[i])\n    for z in range(25):\n        if video1[f'x_{z}'][i] !=str():\n            x = video1[f'x_{z}'][i]\n            y = video1[f'x_{z}'][i]\n            width=  video1[f'width_{z}'][i]\n            height= video1[f'height_{z}'][i]\n            img = cv2.rectangle(img,\n              pt1=(x, y),\n              pt2=(x+height, y-width),\n              color=(0, 255, 0),\n              thickness=3,\n              lineType=cv2.LINE_4,\n              shift=0)\n    print(x,y,width,height)\n\n    plt.imshow(img)","3cb4e153":"for i in range(25):\n    video2[f'x_{i}'] =str()\n    video2[f'y_{i}'] = str()\n    video2[f'width_{i}'] = str()\n    video2[f'height_{i}'] = str()\nvideo2['path'] =str()\n\nfor x in video2.index:\n    a = video2.annotations.loc[x][2:-2]\n    a = a.split(',')\n    \n    for i in range(int(len(a)\/4)):\n        video2[f'x_{i}'][x] = int(a[0].split(':')[1])\n        video2[f'y_{i}'][x] = int(a[1].split(':')[1])\n        video2[f'width_{i}'][x] = int(a[2].split(':')[1])\n        video2[f'height_{i}'][x] = int(a[3].split(':')[1].split('}')[0])\n    video2['path'][x] = '..\/input\/tensorflow-great-barrier-reef\/train_images\/video_0\/' + str(video0.video_id.loc[i]) +'.jpg'","b8c953f8":"fig = plt.figure(figsize=(30,20))\nfor i in range(12):\n    fig.add_subplot(4, 3, i+1)\n    plt.title(video2.image_id[i])\n    img = cv2.imread(video2.path[i])\n    for z in range(25):\n        if video2[f'x_{z}'][i] !=str():\n            x = video2[f'x_{z}'][i]\n            y = video2[f'x_{z}'][i]\n            width=  video2[f'width_{z}'][i]\n            height= video2[f'height_{z}'][i]\n            img = cv2.rectangle(img,\n              pt1=(x, y),\n              pt2=(x+height, y-width),\n              color=(0, 255, 0),\n              thickness=3,\n              lineType=cv2.LINE_4,\n              shift=0)\n\n    plt.imshow(img)","a53e3f70":"\u628a\u6ce8\u89e3\u548c\u7167\u7247\u5408\u5e76\u8d77\u6765\u5c55\u793a\u4e00\u4e0b","afaa4f90":"\u63d0\u4ea4\u6587\u4ef6","4b659bb7":"\u6309\u89c6\u9891\u5212\u5206\u6570\u636e","8a244285":"\u9884\u8ba1\u5728\u6d4b\u8bd5\u96c6\u4e2d\u770b\u5230\u5927\u7ea6 13,000 \u5f20\u56fe\u50cf\u3002","418417ef":"image_id - \u56fe\u50cf\u7684 ID \u4ee3\u7801\uff0c\u683c\u5f0f\u4e3a '{video_id}-{video_frame}' \u6ce8\u91ca - \u4efb\u4f55\u6d77\u661f\u68c0\u6d4b\u7684\u8fb9\u754c\u6846\uff0c\u5b57\u7b26\u4e32\u683c\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u7528 Python \u8bc4\u4f30\u3002","0405e281":"\u8bad\u7ec3\u6570\u636e\u8bfb\u53d6"}}