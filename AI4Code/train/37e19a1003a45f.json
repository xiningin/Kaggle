{"cell_type":{"0bb1c661":"code","dee955b0":"code","48dcad88":"code","f4af6a2c":"markdown","436db029":"markdown","55232f8b":"markdown"},"source":{"0bb1c661":"# Install zarr and load packages\n!pip install -qq zarr\nimport cv2, zarr, json, gc\nimport matplotlib.pyplot as plt, numpy as np, pandas as pd\nfrom pathlib import Path\ngc.enable()","dee955b0":"path = Path('\/kaggle\/input\/hubmap-kidney-segmentation')\ndf_train = pd.read_csv(path\/\"train.csv\")\ndf_info = pd.read_csv(path\/\"HuBMAP-20-dataset_information.csv\")\ng_out = zarr.group(f'\/kaggle\/working\/anatomy')","48dcad88":"for _, row in df_info.iterrows():\n    \n    print(row)\n    idx = Path(row.image_file).stem\n    split = 'train' if idx in df_train['id'].values else 'test'\n    \n    # Open json\n    with open(path\/split\/row.anatomical_structures_segmention_file) as json_file:\n        data = json.load(json_file)  \n\n    # Empty mask\n    umat = cv2.UMat(np.zeros((row.height_pixels, row.width_pixels), dtype=np.int32))\n        \n    # Fill array\n    for poly in data:\n        coords = poly['geometry']['coordinates']\n        value = 1 if poly['properties']['classification']['name']=='Cortex' else 2\n        coords_cand = [coords] if len(coords)==1 else coords\n        for coord in coords_cand:\n            coords2 = cv2.UMat(np.array([[int(a),int(b)] for a,b in coord[0]]))\n            umat = cv2.fillConvexPoly(umat, coords2, value)\n\n    # Workaround RAM overflow\n    g_out[idx] = umat.get()\n    del umat\n    gc.collect()\n    g_out[idx] = g_out[idx][:].astype('uint8')\n    #print(g_out[idx].info)\n    \n    plt.imshow(cv2.resize(g_out[idx][:], dsize=(512, 512)))\n    plt.show()","f4af6a2c":"Settings","436db029":"# HuBMAP anatomical structure (.zarr)\n\n> Convert anatomical structure segmentations from json to masks (.zarr files)","55232f8b":"Conversion"}}