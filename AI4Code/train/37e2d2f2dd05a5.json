{"cell_type":{"1b9848cd":"code","e6775129":"code","751682e9":"code","2292ae13":"code","52d11405":"code","61ec25f1":"code","9bfce9ef":"code","ed64c2ac":"code","e940ea5e":"code","217b7206":"code","f5225b38":"code","0b402a33":"code","3a90dd9e":"code","d0f2271a":"code","37a6c7c7":"code","a68e6bd1":"code","1af73af1":"code","d7b56c8a":"code","ab3fd6a5":"code","74a3f284":"code","ccf4d623":"code","1e649c50":"code","f75e79f2":"markdown","258924f0":"markdown","068acf58":"markdown","ebb38585":"markdown","1596b9a2":"markdown","a8c86d46":"markdown","84fa6258":"markdown","3222e660":"markdown","6bf4e56c":"markdown"},"source":{"1b9848cd":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e6775129":"df = pd.read_csv('..\/input\/hose-data\/pr_house_data.csv')\ndf.head()","751682e9":"df.isnull().sum()","2292ae13":"df.describe().transpose()","52d11405":"plt.figure(figsize=(10,5))\nsns.distplot(df['price'])","61ec25f1":"sns.countplot(df['bedrooms'])","9bfce9ef":"plt.figure(figsize=(10,5))\nsns.scatterplot(x='price',y='sqft_living',data=df)","ed64c2ac":"plt.figure(figsize=(10,5))\nsns.boxplot(x='bedrooms',y='price',data=df)","e940ea5e":"df['date'] = pd.to_datetime(df['date'])\ndf['month'] = df['date'].apply(lambda date:date.month)\ndf['year'] = df['date'].apply(lambda date:date.year)","217b7206":"plt.figure(figsize=(10,5))\n\nplt.subplot(2, 2, 1)\ndf.groupby('month').mean()['price'].plot()\n\nplt.subplot(2, 2, 2)\ndf.groupby('year').mean()['price'].plot()","f5225b38":"import pandas_profiling as pp\npp.ProfileReport(df)","0b402a33":"df = df.drop('date',axis=1)\ndf.columns","3a90dd9e":"df['zipcode'].value_counts()","d0f2271a":"df = df.drop('zipcode',axis=1)\ndf.head()","37a6c7c7":"X = df.drop('price',axis=1)\ny = df['price']","a68e6bd1":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\n\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=101)\n\nscaler = MinMaxScaler()\n\nX_train= scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)\n\nprint(X_train.shape)\nprint(X_test.shape)","1af73af1":"from sklearn import metrics\n\ndef print_evaluate(true, predicted, train=True):  \n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    if train:\n        print(\"========Training Result=======\")\n        print('MAE: ', mae)\n        print('MSE: ', mse)\n        print('RMSE: ', rmse)\n        print('R2 Square: ', r2_square)\n    elif not train:\n        print(\"=========Testing Result=======\")\n        print('MAE: ', mae)\n        print('MSE: ', mse)\n        print('RMSE: ', rmse)\n        print('R2 Square: ', r2_square)","d7b56c8a":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Input, Dense, Activation, Dropout\nfrom tensorflow.keras.optimizers import Adam","ab3fd6a5":"model = Sequential()\n\nmodel.add(Dense(X_train.shape[1],activation='relu'))\nmodel.add(Dense(32,activation='relu'))\nmodel.add(Dense(32,activation='relu'))\n# model.add(Dropout(0.2))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(64,activation='relu'))\n# model.add(Dropout(0.2))\n\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1))\n\nmodel.compile(optimizer=Adam(0.001), loss='mse')","74a3f284":"m = model.fit(X_train, y_train.values,\n              validation_data=(X_test,y_test.values),\n              batch_size=128,\n              epochs=600)","ccf4d623":"plt.figure(figsize=(10, 5))\n\nplt.plot(m.history['loss'], label='loss')\nplt.plot(m.history['val_loss'], label='val_loss')\nplt.legend()","1e649c50":"y_train_pred = model.predict(X_train)\ny_test_pred = model.predict(X_test)\n\nprint_evaluate(y_train, y_train_pred, train=True)\nprint_evaluate(y_test, y_test_pred, train=False)","f75e79f2":"#### Training Model","258924f0":"# 3- Project \n## Using Deep learning","068acf58":"#### Feature Engineering","ebb38585":"#### Scaling and Train Test Split","1596b9a2":"# Good luck\n","a8c86d46":"#### Uesing Lib tensorflow & keras","84fa6258":"#### Exploratory Data Analysis \n##### Check for missing values","3222e660":"#### Evaluation the test","6bf4e56c":"####  Building the model"}}