{"cell_type":{"0e94b138":"code","5e5c8b63":"code","957e5c01":"code","e3cfe3fc":"code","ed02d2df":"code","518089f2":"code","cf1c22b8":"code","7e22eae1":"code","4531a7b2":"code","0c9e2498":"code","ff8af4aa":"code","227e5a19":"code","f8f4aa53":"code","420de741":"code","f9a26721":"code","b352226d":"code","3a91556d":"code","98349b5b":"markdown","b0dfd4f3":"markdown","d39a976d":"markdown","fc8ea868":"markdown","b017bdf7":"markdown","990ec2dd":"markdown","4d0c01e5":"markdown","09b9e9fb":"markdown","f8f580b4":"markdown","b5bdfac8":"markdown","5dfd6fda":"markdown","a3933568":"markdown","215565d3":"markdown","4d25fbe3":"markdown"},"source":{"0e94b138":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5e5c8b63":"import tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, Flatten, Dropout, Dense, MaxPool2D\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nfrom keras.utils.np_utils import to_categorical\nfrom keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt","957e5c01":"X_test = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\nY_train = train[\"label\"]\nX_train = train.drop(labels=[\"label\"],axis = 1)\ndel train","e3cfe3fc":"print(X_test.shape)\nprint(X_train.shape)\nprint(Y_train.shape)","ed02d2df":"X_train.isnull().any().describe()","518089f2":"X_test.isnull().any().describe()","cf1c22b8":"X_train = X_train \/ 255.0\nX_test = X_test \/ 255.0\nX_train = X_train.values.reshape(-1,28,28,1)\nX_test = X_test.values.reshape(-1,28,28,1)\nprint(X_train.shape)\nprint(X_test.shape)","7e22eae1":"Y_train = to_categorical(Y_train, num_classes=10)","4531a7b2":"X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.20, random_state=10)","0c9e2498":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dense(10, activation = \"softmax\"))","ff8af4aa":"model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])","227e5a19":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(X_train)","f8f4aa53":"history = model.fit(datagen.flow(X_train, Y_train, batch_size=84), steps_per_epoch=(X_train.shape[0]\/\/84), epochs=2, validation_data=(X_val, Y_val))","420de741":"fig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","f9a26721":"Y_pred = model.predict(X_val)\nY_pred_final = np.argmax(Y_pred, axis=1)\nY_true = np.argmax(Y_val, axis = 1)\nprint(confusion_matrix(Y_true, Y_pred_final))","b352226d":"res = model.predict(X_test)\nresults = np.argmax(res,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","3a91556d":"test_output = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\ntest_output.to_csv(\"test_output.csv\", index=False)","98349b5b":"# **Set the optimizer and Annealer**","b0dfd4f3":"# **Loading of Data**","d39a976d":"# **Data Augmentation**","fc8ea868":"# **Importing the required modules**","b017bdf7":"# **Normalization and Reshaping the data**","990ec2dd":"# **Splitting the data into Training and Validation**","4d0c01e5":"# **Fit the Data**","09b9e9fb":"# **Label Encoding**","f8f580b4":"# **CNN Model**","b5bdfac8":"# **Saving the Test Values**","5dfd6fda":"# **Shape of the data**","a3933568":"# **Confusion Matrix**","215565d3":"# **Checking for Missing Data**","4d25fbe3":"# **Training and Validation Curves**"}}