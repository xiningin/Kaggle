{"cell_type":{"ad1c3ffb":"code","f8f94a1f":"code","cbf4cd8f":"code","6ae78f3a":"code","f322911e":"code","01dd9c2d":"code","94c58133":"code","cab40c81":"code","0a601252":"code","7b80fc0c":"code","a2cef21a":"code","72058a73":"code","8663e255":"code","becbbb38":"code","caaef007":"code","02bd2db6":"code","aa52cf6b":"code","38d672be":"code","ddd3893c":"code","b687aff8":"code","688b4f9e":"code","1a01cc81":"code","2320f443":"code","d722802a":"code","ea0e968b":"code","81febf56":"code","79fe0b1e":"code","b9818c68":"code","22b6e477":"code","1917f26d":"code","eae0a1f6":"code","d548c8e2":"code","dc2a7ba4":"code","1d185a09":"code","8024639a":"code","80419f1d":"code","fc580603":"code","813aab80":"code","3d1569bd":"code","268246f8":"code","5c7880d4":"code","c166a407":"code","79170b40":"code","38ee1664":"code","e1d9e5d3":"code","a8de21f2":"code","b387049c":"code","5447b2f3":"code","abef2086":"code","53b0c488":"code","bcb918b2":"code","267a67a9":"code","c6b29a20":"code","076cf0a9":"markdown","95631b10":"markdown","f5bc9f04":"markdown","8d6e58b7":"markdown","9bc014c1":"markdown","729afc65":"markdown","a9fecb12":"markdown","d0b5c05a":"markdown","40daea9b":"markdown","c63ec82f":"markdown","14e3977c":"markdown","b5022eda":"markdown","ce1c6f58":"markdown"},"source":{"ad1c3ffb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f8f94a1f":"import pandas as pd\ndata=pd.read_csv(\"\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv\")\n","cbf4cd8f":"data.info()\n#It gives general information of our dataset like data type,data names ..etc.","6ae78f3a":"data.corr()\n","f322911e":"import matplotlib.pyplot as plt\nimport seaborn as sns#for visualization\n\nf,ax=plt.subplots(figsize=(10,10))\n#(18,18): type size (1.00)\n#If you reduce the size,type size will grow\nsns.heatmap(data.corr(),annot=True,linewidths=2,fmt='.2f',ax=ax)\n#fmt='.2f' :Digits to be displayed after the point\n#For Example: fmt='.3f':1.000,0.740 ..\n#annot=True : print on \nplt.show()","01dd9c2d":"data.head(4)\n#default is 5 \n#try it: data.head()","94c58133":"data.columns","cab40c81":"%matplotlib inline\nimport matplotlib.pyplot as plt","0a601252":"a=data.plot(kind='line', x='year', y='suicides_no',alpha = 1,color = 'purple')\nplt.xlabel('year')              # label = name of label\nplt.ylabel('suicides_no')\nplt.title('suicides number & year  Line Plot') \n\n\n\n\n#if your dataset is too large ,you can get the logarithm of the values.You can use both of scales","7b80fc0c":"a=data.plot(kind='area', x='year', y='suicides_no',alpha = 0.4,color = 'green')\nplt.xlabel('year')              # label = name of label\nplt.ylabel('suicides_no')\nplt.title('suicides number & year  Line Plot') \nplt.show()","a2cef21a":"import plotly.express as px\nfig=px.area(data,x=\"year\",y=\"suicides_no\",color=\"country\",line_group=\"sex\")\nfig.show()","72058a73":"\nfig=px.area(data,x=\"year\",y=\"suicides_no\",color=\"country\",line_group=\"sex\")\nfig.show()","8663e255":"a=data.suicides_no.plot(kind = 'hist',bins = 50,figsize = (12,12))\na.set_xscale('log') \na.set_yscale('log')#\nplt.show()","becbbb38":"import seaborn as sn\nimport matplotlib.pyplot as plt\n#sn.distplot(data['suicides_no'])\nsn.distplot(data['HDI for year'],bins=25)","caaef007":"a=sn.distplot(a=data['suicides_no'],hist=True,kde=False,rug=False)\na.set_xscale('log') \na.set_yscale('log')","02bd2db6":"sn.distplot(a=data['suicides_no'],rug=True,rug_kws={'color':'r','alpha':1,'linewidth':5})\n","aa52cf6b":"data.plot(kind='scatter', x='suicides_no', y='year',alpha = 0.5,color = 'blue')\nplt.xlabel('suicides_no')              # label = name of label\nplt.ylabel('year')\nplt.title('suicides_no year Scatter Plot')            # title = title of plot","38d672be":"from IPython.display import display, HTML\ndisplay(data.describe(include=\"all\").T)","ddd3893c":"sns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(15,10)})\nax=sns.regplot(data=data, x='year', y='suicides_no', x_jitter=0.2, order=4)\nax.set_yscale('log')","b687aff8":"data.groupby(['country','sex']).suicides_no.sum().nlargest(10).plot(kind='barh')","688b4f9e":"from numpy import median\nimport seaborn as sns\n\nax = sns.catplot(x=\"sex\", y=\"suicides_no\",col='age', data=data, estimator=median,height=4, aspect=.7,kind='bar')","1a01cc81":"data.groupby(by=['age','sex'])['suicides_no'].sum().unstack().reset_index().melt(id_vars='age')","2320f443":"from numpy import sum\nsns.catplot('age','suicides_no',hue='sex',col='year',data=data,kind='bar',col_wrap=3,estimator=sum)\n#Also you can try this. It gives you all countries suicide scores in diffrent ages\n'''\nfrom numpy import sum\nsns.catplot('age','suicides_no',hue='sex',col='country',data=data,kind='bar',col_wrap=3,estimator=sum)\n'''","d722802a":"data.groupby(['country']).suicides_no.sum().nlargest(10).plot(kind='pie')  \n","ea0e968b":"#If you want more country inside of circle ,you should increase nlargest(num)\n#It means 10 country will show in this graph\n\ndata.groupby(['country']).suicides_no.sum().nlargest(5).plot(kind='pie')  \n ","81febf56":"data.groupby(['country']).suicides_no.sum().nlargest(20).plot(kind='pie')","79fe0b1e":"#When you re grouping the data,you can add more features\ndata.groupby(['country','sex']).suicides_no.sum().nlargest(10).plot(kind='pie')  ","b9818c68":"from matplotlib.colors import LogNorm\ndf = data.groupby(['year','age']).suicides_no.sum().reset_index()\ndf['age'] = df.age.astype(pd.api.types.CategoricalDtype(categories = ['5-14 years','15-24 years','25-34 years','35-54 years','55-74 years','75+ years']))\nsns.set(rc={'figure.figsize':(15,10)})\nsns.lineplot('year','suicides_no',hue='age',style='age',data=df,hue_norm=LogNorm(),palette=\"ch:2.5,.25\",sort=False)\n","22b6e477":"'''sns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(15,10)})\nax=sns.regplot(data=data, x='year', y='suicides_no', x_jitter=0.2, order=4)\n#ax.set_yscale('log')\n'''\nsns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(15,10)})\nax=sns.regplot(data=data, x='population', y='suicides_no', x_jitter=0.2, order=4)\nax.set_yscale('log')","1917f26d":"sns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(15,10)})\nax=sns.regplot(data=data, x='year', y='suicides\/100k pop', x_jitter=0.2, order=4)\nax.set_yscale('log')","eae0a1f6":"x = sns.stripplot(x = \"country\", y = \"suicides_no\", data = data, jitter = True)\nplt.xticks(rotation = 90)\nx.set_yscale('log')\nplt.title(\"Countries Suicide Score\", color = 'blue', fontsize = 15)\nplt.show()\n\n","d548c8e2":"!pip install wordcloud","dc2a7ba4":"# Python program to generate WordCloud \n  \n# importing all necessery modules \nfrom wordcloud import WordCloud, STOPWORDS \nimport matplotlib.pyplot as plt \nimport pandas as pd \n  \n\ncomment_words=' '\nstopwords = set(STOPWORDS) \n  \n# iterate through the csv file \nfor val in data.country: \n      \n    # typecaste each val to string \n    val = str(val) \n  \n    # split the value \n    tokens = val.split() \n      \n    # Converts each token into lowercase \n    for i in range(len(tokens)): \n        tokens[i] = tokens[i].lower() \n          \n    for words in tokens: \n        comment_words = comment_words  + words+ ' '\n  \n  \nwordcloud = WordCloud(width = 800, height = 800, \n                background_color ='white', \n                stopwords = stopwords,\n                min_font_size = 10).generate(comment_words) \n  \n# plot the WordCloud image                        \nplt.figure(figsize = (8, 8), facecolor = None) \nplt.imshow(wordcloud) \nplt.axis(\"off\") \nplt.tight_layout(pad = 0) \n  \nplt.show() ","1d185a09":"my_dict = {'country': 'Germany', 1: [2, 4, 3]}\nprint(my_dict.get(1))\nprint(my_dict.keys())\nprint(my_dict.values())\n\nmy_dict['population'] = 20000    # adding new entries\nprint(my_dict)\n\ndel my_dict         # delete entire dictionary     \n#print(my_dict) ","8024639a":"import pandas as pd\ndic = dict()\n#filenames = filenames.split('\\n')\ndic = pd.read_csv(\"\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv\")","80419f1d":"dic['country'].sample(20)\n","fc580603":"dic['country'].value_counts().plot.bar()\n","813aab80":"dic['country'].value_counts().hist(bins = 40)","3d1569bd":"x = data['population']>10000000   \ndata[x]\n\ny=data['population']<10000000\ndata[y]","268246f8":"import matplotlib.pyplot as plt\na=data[x].plot(kind='line', x='year', y='suicides_no',alpha = 1,color = 'purple')\nplt.xlabel('year')              # label = name of label\nplt.ylabel('suicides_no')\nplt.title('Number of suicides in countries with a population more than 10000000') \n\nb=data[y].plot(kind='line', x='year', y='suicides_no',alpha = 1,color = 'orange')\nplt.xlabel('year')              # label = name of label\nplt.ylabel('suicides_no')\nplt.title('Number of suicides in countries with a population less than 10000000') ","5c7880d4":"data[x].plot(kind='scatter', x='suicides_no', y='year',alpha = 0.5,color = 'blue')\ndata[y].plot(kind='scatter', x='suicides_no', y='year',alpha = 0.5,color = 'green')\nplt.xlabel('suicides_no')              # label = name of label\nplt.ylabel('year')\nplt.title('suicides_no year Scatter Plot')            # title = title of plot","c166a407":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly library\n\n#import matplotlib.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n\n# matplotlib library\nimport matplotlib.pyplot as plt\n\n\ndf=data[x]\ntrace1 = go.Scatter (x = df.country,\n                     y = df.suicides_no,\n                     mode = 'lines',\n                     name = 'crowded countries',\n                     marker = dict(color = 'rgba(16, 122, 2, 0.8)'),\n                     text = df.country)\nd=data[y]\ntrace2 = go.Scatter (x = d.country,\n                     y = d.suicides_no,\n                     mode = 'lines+markers',\n                     name = 'undercrowded countries',\n                     marker = dict(color = 'rgba(80, 26, 80, 0.8)'),\n                     text = d.country)\n\ndata_last = [trace1, trace2]\nlayout = dict(title = 'Number of suicides in countries with a different populations',\n              xaxis = dict(title = 'Countries', ticklen = 5, zeroline = False)\n              )\n\nfig = dict(data = data_last, layout = layout)\niplot(fig)\nplt.savefig('line_plot_using_plotly.png')\nplt.show()\n","79170b40":"df=data[x]\ndata_last = go.Scatter (x = df.country,\n                     y = df.suicides_no,\n                     mode = 'lines',\n                     name = 'crowded countries',\n                     marker = dict(color = 'rgba(16, 122, 2, 0.8)'),\n                     text = df.country)\n\nlayout = dict(title = 'Number of suicides in countries with a population more than 10000000',\n              xaxis = dict(title = 'Countries', ticklen = 5, zeroline = False)\n              )\n\nfig = dict(data = data_last, layout = layout)\niplot(fig)\nplt.savefig('line_plot_using_plotly.png')\nplt.show()","38ee1664":"df=data[y]\ndata_last = go.Scatter (x = df.country,\n                     y = df.suicides_no,\n                     mode = 'lines',\n                     name = 'crowded countries',\n                     marker = dict(color = 'rgba(16, 12, 112, 0.8)'),\n                     text = df.country)\n\nlayout = dict(title = 'Number of suicides in countries which has population less than 10000000',\n              xaxis = dict(title = 'Countries', ticklen = 5, zeroline = False)\n              )\n\nfig = dict(data = data_last, layout = layout)\niplot(fig)\nplt.savefig('line_plot_using_plotly.png')\nplt.show()","e1d9e5d3":"r = data['country']==\"Russian Federation\"    \ndata[r]\n\nj = data['country']==\"Japan\"     \ndata[j]","a8de21f2":"df=data[r]\ntrace1 = go.Scatter (x = df.year,\n                     y = df.suicides_no,\n                     mode = 'lines',\n                     name = 'Russia',\n                     marker = dict(color = 'rgba(16, 122, 2, 0.8)'),\n                     text = df.country)\nd=data[j]\ntrace2 = go.Scatter (x = d.year,\n                     y = d.suicides_no,\n                     mode = 'lines+markers',\n                     name = 'Japan',\n                     marker = dict(color = 'rgba(180, 26, 80, 0.8)'),\n                     text = d.country)\n\ndata_last = [trace1, trace2]\nlayout = dict(title = 'Number of suicides in Russia and Japan',\n              xaxis = dict(title = 'Countries', ticklen = 5, zeroline = False)\n              )\n\nfig = dict(data = data_last, layout = layout)\niplot(fig)\nplt.savefig('line_plot_using_plotly.png')\nplt.show()\n","b387049c":"femaleS=data[np.logical_and(data['suicides_no']>1000, data['sex']==\"female\" )]\n\ndf=femaleS\ndata_last = go.Scatter (x = df.country,\n                     y = df.suicides_no,\n                     mode = 'lines',\n                     name = 'crowded countries',\n                     marker = dict(color = 'rgba(16, 12, 112, 0.8)'),\n                     text = df.country)\n\nlayout = dict(title = 'Number of suicides in countries which has population less than 10000000',\n              xaxis = dict(title = 'Countries', ticklen = 5, zeroline = False)\n              )\n\nfig = dict(data = data_last, layout = layout)\niplot(fig)\nplt.savefig('line_plot_using_plotly.png')\nplt.show()","5447b2f3":"import pandas as pd\ndata=pd.read_csv(\"\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv\")\n\n#data.columns\n#data.info() \n\nimport numpy as np\nimport pandas as pd \nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n\ndataframe=data[(data['gdp_per_capita ($)']>20000) & (data['population']<100000)]\n\n# first plot\ntrace1 = go.Scatter (x = dataframe.country,\n                     y = dataframe.suicides_no,\n                     name = 'Suicide Score',\n                     marker = dict(color = 'rgba(10,140,2,0.8)'),\n                    )\n# second line\ntrace2 = go.Scatter (x = dataframe.country,\n                     y = dataframe.population,\n                     xaxis = 'x2',\n                     yaxis = 'y2',\n                     name = 'Population',\n                     marker = dict(color = 'rgba(10,60,160,0.8)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout (xaxis2 = dict(domain = [0.6, 0.95], anchor = 'y2'),\n                    yaxis2 = dict(domain = [0.6, 0.95], anchor = 'x2'),\n                    title = 'income and teaching vs world rank of universities')\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)\nplt.savefig('inset-plot.png')","abef2086":"import pandas as pd\nnewData=pd.read_csv('\/kaggle\/input\/suicide-rates-overview-1985-to-2016\/master.csv')\nnewData.head()  # head shows first 5 rows","53b0c488":"# tail shows last 5 rows\nnewData.tail()","bcb918b2":"# columns gives column names of features\nnewData.columns","267a67a9":"# shape gives number of rows and columns in a tuble\nnewData.shape\n#Output shows us our newData has 12 columns ,27 820 rows","c6b29a20":"# info gives data type like dataframe, number of sample or row, number of feature or column, feature types and memory usage\nnewData.info()","076cf0a9":"### data.corr()\n  The term \"correlation\" refers to a mutual relationship or association between quantities\nIt is useful to express one quantity in terms of its relationship with others\n\n   Now we are gonna use corr() function to find the correlation among the columns. \nThe output dataframe can be interpreted as for any cell, row variable correlation with the column variable is the value of the cell. The correlation of a variable with itself is 1. For that reason all the diagonal values are 1.00\n","95631b10":"### **We can specialize the data under the conditions we want.**\nSome examples about that:","f5bc9f04":"# CLEANING DATA\nData cleaning is the process of detecting and correcting (or removing) corrupt or inaccurate records from a record set, table, or database and refers to identifying incomplete, incorrect, inaccurate or irrelevant parts of the data and then replacing, modifying, or deleting the dirty or coarse data.Data cleansing may be performed interactively with data wrangling tools, or as batch processing through scripting.\n\n* Column name inconsistency like upper-lower case letter or space between words\n* missing data\n* different language","8d6e58b7":"# PIE CHART\nA pie chart is a circular statistical graphic divided into slices to illustrate numerical proportion.","9bc014c1":"# WHY BUILD VISUALS\n1. For exploratory data analysis\n2. Communicate data clearly\n3. Share unbiased represent\n4. Use them to support recommendations to different stakeholders\n\nAnalytics approach to transform this into a visual thats more effective,attractive and impactive","729afc65":"# AREA PLOT\n* Also known as area chart or area graph\n* Commonly used to represent cumulated totals using numbers or percentages over time\n* Is based on the line plot","a9fecb12":"# SCATTER PLOT\n\u0130f you compare two features","d0b5c05a":"You can find correlations easily if you use heatmap","40daea9b":"# DICTIONARY\nPython dictionary is an unordered collection of items. While other compound data types have only value as an element, a dictionary has a key: value pair.\nCreating a dictionary is as simple as placing items inside curly braces {} separated by comma.\n    \n    my_dict1 = {1: 'country', 2: 'year'} \n    #or dictionary can have mixed keys\n    my_dict = {'country': 'Germany', 1: [2, 4, 3]}\n    print(my_dict['country']) #output is Germany\n    print(my_dict.get(1)) #output is [2, 4, 3]","c63ec82f":"# HISTOGRAM\nA histogram is a way of representing the frequency distribution of a variable.","14e3977c":"# BAR PLOT\nA bar plot in Python, also known as a bar chart, represents how a numerical variable relates to a categorical variable","b5022eda":"# LINE PLOTS\nA line plot is type of plot which displays information as a series of data points called 'markers' connected by straight line segments\n    The best use case for a line plot is when you have a continuous dataset and you re interested in visualizing the data over a period of time.","ce1c6f58":"# WORD CLOUD\nWord Cloud is a data visualization technique used for represending text data in which the size of each word indicates its frequency or importance."}}