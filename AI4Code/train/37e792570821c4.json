{"cell_type":{"bcaa2ef0":"code","0400089d":"code","73459530":"code","fcc90fb1":"code","1631debc":"code","99d4556b":"code","61877d09":"code","04eff65d":"code","b6d73a6f":"code","1b985e27":"code","8a9d5915":"code","223ce772":"code","15725cc9":"code","196177f4":"code","0ba7d1b8":"code","b1b6fb94":"markdown"},"source":{"bcaa2ef0":"import os\nimport keras\nimport cv2\nfrom sklearn.preprocessing import LabelEncoder\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras.layers import *\nfrom keras import optimizers\nfrom keras.models import Sequential, Model\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.applications import ResNet50, Xception, VGG19,EfficientNetB7, InceptionV3\nfrom keras.callbacks import ModelCheckpoint\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np","0400089d":"Path = '..\/input\/honeybee\/bees\/train'","73459530":"Train_X = []\nTrain_Y = []\nfor labels in os.listdir(Path):\n    path = os.path.join(Path, labels)\n    for images in os.listdir(path):\n        path1 = os.path.join(path,images)\n        img = cv2.imread(path1)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        img = cv2.resize(img, (224,224), interpolation = cv2.INTER_AREA)\n        Train_X.append(img)\n        Train_Y.append(labels)","fcc90fb1":"Path = '..\/input\/honeybee\/bees\/test'","1631debc":"Test_X = []\nTest_Y = []\nfor labels in os.listdir(Path):\n    path = os.path.join(Path, labels)\n    for images in os.listdir(path):\n        path1 = os.path.join(path,images)\n        img = cv2.imread(path1)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        img = cv2.resize(img, (224,224), interpolation = cv2.INTER_AREA)\n        Test_X.append(img)\n        Test_Y.append(labels)","99d4556b":"print(len(Train_X))","61877d09":"plt.figure(figsize=(10,8))\nplt.subplot(1,4,1)\nplt.imshow(Train_X[500])\nplt.title(Train_Y[500])\nplt.subplot(1,4,2)\nplt.imshow(Train_X[1000])\nplt.title(Train_Y[1000])\nplt.subplot(1,4,3)\nplt.imshow(Train_X[1200])\nplt.title(Train_Y[1200])\nplt.subplot(1,4,4)\nplt.imshow(Train_X[1500])\nplt.title(Train_Y[1500])","04eff65d":"Train_X, Val_X, Train_Y, Val_Y = train_test_split(Train_X, Train_Y, test_size=0.20, random_state=0)\n\nTrain_X = np.array(Train_X)\nTrain_X = Train_X.reshape(Train_X.shape[0],224,224,3)\n\nVal_X = np.array(Val_X)\nVal_X = Val_X.reshape(Val_X.shape[0],224,224,3)\n\nTest_X = np.array(Test_X)\nTest_X = Test_X.reshape(Test_X.shape[0],224,224,3)\n\nlabel = LabelEncoder()\nTrain_Y = label.fit_transform(Train_Y)\nTrain_Y = to_categorical(Train_Y,4)\n\nVal_Y = label.fit_transform(Val_Y)\nVal_Y = to_categorical(Val_Y,4)\n\nTest_Y = label.fit_transform(Test_Y)\nTest_Y = to_categorical(Test_Y,4)\n\nprint(Train_X.shape)\nprint(Train_Y.shape)\n\nprint(Val_X.shape)\nprint(Val_Y.shape)\n\nprint(Test_X.shape)\nprint(Test_Y.shape)","b6d73a6f":"InceptionV3 = InceptionV3(include_top=False, weights='imagenet', input_shape=(224,224,3))\n\nInceptionV3.trainable = False\n\n\nmodel = Sequential()\nmodel.add(InceptionV3)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dense(units=1024, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=4, activation='softmax'))\nmodel.summary()","1b985e27":"checkpoint = ModelCheckpoint('.\/HoneyBee_model.h5',\n                             monitor = 'val_loss',\n                             mode = 'min',\n                             save_best_only=True,\n                             verbose = 1\n                            )\ncallbacks = [checkpoint]","8a9d5915":"optimizers = keras.optimizers.Adam(0.001)\nmodel.compile(loss='categorical_crossentropy', optimizer=optimizers, metrics=[\"accuracy\"])\n\nhistory = model.fit(x = Train_X, y = Train_Y, epochs=50, batch_size = 16, validation_data=(Val_X,Val_Y), callbacks =callbacks, verbose = 1)","223ce772":"from keras.models import load_model\nmodel = load_model('.\/HoneyBee_model.h5')","15725cc9":"score = model.evaluate(Train_X,Train_Y)\nprint('Training Accuracy', score[1])","196177f4":"score = model.evaluate(Val_X,Val_Y)\nprint('Validation Accuracy', score[1])","0ba7d1b8":"Score = model.evaluate(Test_X,Test_Y)\nprint(' Test Accuracy ', Score[1])\nprint(' Test Loss ', Score[0])","b1b6fb94":"## Training Accuracy:    90.97 %\n## Validation Accuracy:  86 %\n## Test Accuracy:        84.79 %"}}