{"cell_type":{"f38e19b0":"code","8f48901a":"code","ad0ccd3a":"code","e696e999":"code","812bd0d2":"code","172fca25":"code","969b6144":"code","4a3204c2":"code","88855ad5":"code","3b159869":"code","b5e5a282":"code","8f8ee956":"code","625233a6":"code","df4bf0df":"code","488ed46d":"code","8ff51df8":"code","43c28c6a":"code","e67df720":"code","b8abd37d":"code","62d464a9":"code","d200d2b2":"code","5050f923":"code","c415be22":"code","0eaf54f2":"code","9c71ca49":"code","ab4f3f32":"code","bfef24f1":"code","efc5cbc5":"code","590f1cfd":"code","044405ce":"code","72e35015":"code","c0bb429c":"code","610ae92d":"code","e6a2fdbf":"code","a405bb51":"code","dead9dfb":"code","d4cfe76f":"markdown","7fa62bff":"markdown","9d6b8700":"markdown","3a21adaa":"markdown","55a518d2":"markdown","df6b239d":"markdown","63730fab":"markdown","0bbc079e":"markdown","3a7eea31":"markdown","0762a408":"markdown","ef764940":"markdown","10f4ff0c":"markdown","2883f248":"markdown","4a0330fd":"markdown","3d3bbe28":"markdown","948707be":"markdown","c03703fb":"markdown","a095c8e7":"markdown","33918561":"markdown","8edfadba":"markdown"},"source":{"f38e19b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8f48901a":"# importing other libraries I will need\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Other:\nimport warnings\nwarnings.filterwarnings('ignore')\nsns.set_style('darkgrid')","ad0ccd3a":"# importing the dataset\ndata = pd.read_csv(\"..\/input\/data.csv\")","e696e999":"data.head()","812bd0d2":"# Drop useless variables\ndata = data.drop(['Unnamed: 32','id'],axis = 1)","172fca25":"data.shape","969b6144":"# checking for missing values\ndata.isna().any()","4a3204c2":"f,ax = plt.subplots(figsize=(10,5))\nsns.countplot(y = data['diagnosis'], palette = \"husl\", ax=ax)","88855ad5":"features = data.iloc[:, 1:]","3b159869":"from sklearn.preprocessing import MinMaxScaler\nx = features.values #returns a numpy array\nmin_max_scaler = MinMaxScaler()\nx_scaled = min_max_scaler.fit_transform(x)\nfeat = pd.DataFrame(x_scaled, index = features.index, columns = features.columns)","b5e5a282":"feat.shape","8f8ee956":"diag = data.iloc[:,0]","625233a6":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(feat.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)","df4bf0df":"# Create correlation matrix\ncorr_matrix = feat.corr().abs()\n\n# Select upper triangle of correlation matrix\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n\n# Find index of feature columns with correlation greater than 0.9\nto_drop = [column for column in upper.columns if any(upper[column] > 0.9)]\nto_drop","488ed46d":"# Drop features \nfeat = feat.drop(to_drop, axis=1)\nfeat.shape","8ff51df8":"df = pd.concat([diag, feat], axis=1, sort=False)\ndf.head()","43c28c6a":"# rewriting the categorical values in the target column as numerical\ny = data['diagnosis'].apply(lambda x: 1 if 'M' in x else 0)\ny.head()\n\n# putting the dataframe back together\ndf_encoded = pd.concat([y, feat], axis=1, sort=False)\ndf_encoded.head()","e67df720":"import math\n\nvars = df_encoded.drop('diagnosis', axis = 1).keys()\nplot_cols = 5\nplot_rows = math.ceil(len(vars)\/plot_cols)\n\nplt.figure(figsize = (5*plot_cols,5*plot_rows))\n\nfor idx, var in enumerate(vars):\n    plt.subplot(plot_rows, plot_cols, idx+1)\n    sns.boxplot(x = 'diagnosis', y = var, data = df_encoded)","b8abd37d":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(df_encoded.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)","62d464a9":"df_select = df.iloc[:,0:8]\nsns.pairplot(df_select, hue = 'diagnosis')","d200d2b2":"df_select = df.iloc[:,[0,8,9,10,11,12,13,14,15]]\nsns.pairplot(df_select, hue = 'diagnosis')","5050f923":"df_select = df.iloc[:,[0,16,17,18,19,20]]\nsns.pairplot(df_select, hue = 'diagnosis')","c415be22":"df_encoded = df_encoded.drop('concavity_mean', axis = 1)\ndf_encoded = df_encoded.drop('concavity_se', axis = 1)\ndf_encoded = df_encoded.drop('concavity_worst', axis = 1)","0eaf54f2":"df_encoded.head()","9c71ca49":"df_encoded.shape","ab4f3f32":"X = df_encoded.iloc[:,1:].values\ny = df_encoded.iloc[:,0].values","bfef24f1":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","efc5cbc5":"# Fitting K-NN to the Training set\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)","590f1cfd":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)","044405ce":"# Making the confusion matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\ncm","72e35015":"# checking the accuracy score\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","c0bb429c":"# Applying 10-fold cross-validation\nfrom sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)","610ae92d":"accuracies.mean()","e6a2fdbf":"# Applying grid search to find the best model and the best parameters\nfrom sklearn.model_selection import GridSearchCV\n# specifying the parameters I want to find optimal values for\nparameters = [{'n_neighbors': [3,5,8,10], 'weights':['uniform']}, \n              {'n_neighbors': [3,5,8,10], 'weights':['distance']}\n             ]\ngrid_search = GridSearchCV(estimator = classifier,\n                          param_grid = parameters,\n                          scoring = 'accuracy',\n                          cv = 10)\ngrid_search = grid_search.fit(X_train, y_train)","a405bb51":"best_accuracy = grid_search.best_score_\nbest_accuracy","dead9dfb":"best_parameters = grid_search.best_params_\nbest_parameters","d4cfe76f":"There are almost twice as many benign cases in the dataset as malignant ones:","7fa62bff":"Lets see how the not so highly correlated features relate to each other. Looks like diagnosis is most highly correlated with the radius (radius_mean and radius_se), concavity (concavity_mean and concavity_worst), and compactness (compactness_mean and compactness_worst).","9d6b8700":"Looks like the best accuracy score I could get for my model is 95.16%, which is not much better from the already achieved 95.13%. Let's check which parameter choices would assure the highest possible accuracy.","3a21adaa":"First, lets get to know the data. ","55a518d2":"Now that the features have been scaled, lets take a closer look at them. ","df6b239d":"**K-NN Classifier**","63730fab":"After performing cross-validation, the model seems to be 95% accurate. However, I picked the initial number of K nearest neighbors and weights at random. Lets see if we can improve the model's performance even better by finding the optimal hyperparameters through gridsearch.","0bbc079e":"Putting my dataframe back together: the diagnosis column first, the features deemed not too highly correlated next.","3a7eea31":"Lets see how each predictor variable varies by diagnosis. For a lot of the predictor variables, average values are higher in the malignant group. There are also plenty of outliers, especially in the benign data.","0762a408":"Looks like compactness and concavity are too highly correlated indeed. I will drop concavity from my choice of selected features.","ef764940":"Looks like we have some highly correlated features. Features with high correlation are more linearly dependent and hence have almost the same effect on the dependent variable. When two features have high correlation, we should drop one. I will identify and drop them.","10f4ff0c":"The model is 92% accurate. I will use K-fold cross-validation to better evaluate my model's performance.","2883f248":"In this notebook, I will build a K-NN classification model to predict  whether breast cancer is malignant or benign based on the features computed from a digitized image of a fine needle aspirate of a breast mass. The data is from the Breast Cancer Wisconsin data set. I will aslo use seaborn to visualize the data and help select the best features for my model.","4a0330fd":"The most appropriate parameters for our K-NN model are the initially selected uniform as weights and K=5. \n\nThe default data included 33 features. By selecting the most appropriate 17 features, I was able to build a classification model with a 95% accuracy. ","3d3bbe28":"My final choice for the model are the 17 features.","948707be":"My dataset consists of 31 columns and 569 observations. Lets see if there is any missing data.","c03703fb":"Before analyzing further, I need to normlalize the data in the features columns to be able to adequately present it in plots.","a095c8e7":"I see two columns that would be useless in my further analysis: the id column is not relevant, and the last column is empty. I will drop them.","33918561":"My suspicion is that compactness and concavity are still too highly correlated in all three groups (mean, se, and worst) to include them in the model. Lets check if I am right.","8edfadba":"**Exploratory Data Analysis**"}}