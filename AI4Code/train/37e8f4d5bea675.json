{"cell_type":{"b2ad405c":"code","8e97d331":"code","15982319":"code","4670af50":"code","03802a4b":"code","f67d2fa0":"code","8f0e7eb7":"code","5bfb4bae":"code","78c21b37":"code","88b66e99":"markdown"},"source":{"b2ad405c":"# Importing the libraries\nimport pandas as pd\nimport math\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, explained_variance_score, r2_score\n\n# Importation de Keras\nfrom keras.models import Sequential   \nfrom keras.layers import Dense        \nfrom keras.layers import Dropout      \n\n# Classifiers\nfrom keras.wrappers.scikit_learn import KerasRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV","8e97d331":"# Configuration\nEPOCHS = 100\nRATIO_TRAIN_TEST = 0.20\nBATCH_SIZE = 16\nCROSS_VALIDATION = 3","15982319":"def compute_score(y_pred, y_test): \n    mse = mean_squared_error(y_test, y_pred)\n    rmse = math.sqrt(mse)\n    mae = mean_absolute_error(y_test, y_pred)\n    var = explained_variance_score(y_test, y_pred)\n    r2sc = r2_score(y_test, y_pred)\n    \n    print(\"Mean Squarred Error: %.4f\" % mse)\n    print(\"Root Mean Squarred Error: %.4f\" % rmse)\n    print(\"Mean Absolute Error: %.4f\" % mae)\n    print(\"Variance Score (Best possible score is 1): %.4f\" % var)\n    print(\"R2Score (Best possible score is 1): %.4f\" % r2sc)","4670af50":"def plot_history_detail(history):\n    hist = pd.DataFrame(history.history)\n    hist['epoch'] = history.epoch\n    hist.tail()\n    \n    plt.figure()\n    plt.xlabel('Epoch')\n    plt.ylabel('Mean Error')\n    plt.plot(hist['epoch'], hist['mean_absolute_error'], label='Train mean_absolute_error')\n    plt.plot(hist['epoch'], hist['mean_squared_error'], label='mean_squared_error')\n    plt.legend()\n    plt.ylim([0,1])","03802a4b":"# Importing the dataset\ndataset = pd.read_csv(\"..\/input\/home_data(3).csv\", delimiter=\",\")\ndataset = dataset.drop(columns=['id', 'date'])\nX = dataset.drop(columns=['price']).astype(\"float64\")\ny = dataset.price.astype(\"float64\").values.reshape(-1, 1)\nprint(\"X Shape is {}\".format(X.shape))","f67d2fa0":"# Scaling data\nX_scaler = StandardScaler()\ny_scaler = StandardScaler()\nX_scaled = pd.DataFrame.from_records(data=X_scaler.fit_transform(X), columns=X.columns)\ny_scaled = pd.DataFrame.from_records(data=y_scaler.fit_transform(y))","8f0e7eb7":"# Spliting train\/test\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size = RATIO_TRAIN_TEST, random_state = 0)\nprint(\"X_train shape: {}\".format(X_train.shape))","5bfb4bae":"# Construct Regressor NN\ndef build_regressor_NN():\n    regressor = Sequential()\n    regressor.add(Dense(units=18, activation=\"relu\", kernel_initializer=\"normal\", input_dim=18))\n    regressor.add(Dropout(rate=0.1))   \n    regressor.add(Dense(units=64, activation=\"relu\", kernel_initializer=\"normal\"))\n    regressor.add(Dropout(rate=0.1))\n    regressor.add(Dense(units=1, kernel_initializer=\"normal\", activation='linear'))\n    regressor.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae', 'mse'])\n    regressor.summary()\n    return regressor ","78c21b37":"# First Training the regressor without Cross Validation\nregressor = build_regressor_NN()\nhistory = regressor.fit(X_train, y_train, batch_size=BATCH_SIZE, epochs=EPOCHS)\ny_pred = y_scaler.inverse_transform(regressor.predict(X_test))\ny_true = y_scaler.inverse_transform(y_test)\nplot_history_detail(history)\ncompute_score(y_pred, y_true)","88b66e99":"**Seattle House Price Predictions with Keras and Tensorflow**"}}