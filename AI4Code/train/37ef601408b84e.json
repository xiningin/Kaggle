{"cell_type":{"3289ec7e":"code","fb154bab":"code","ad2dff18":"code","f953fc4b":"code","7cb44b6e":"code","71105d80":"code","75359b35":"code","3ee7c9fa":"code","e0819199":"code","32f94c57":"code","25dc6b1e":"code","00701c40":"code","75d8e05c":"code","dcb308c8":"code","cec0feab":"code","c2b95a38":"code","66bbf3c4":"code","61115a1e":"code","71ff6ed3":"code","66921822":"code","ef441877":"code","18e7f99b":"code","582a222a":"code","6a56ff05":"code","ba0b173d":"code","6554a891":"code","40bbd71b":"code","e735da7d":"code","b3674001":"code","9ceea920":"code","9936deb4":"code","1b35ce99":"code","78001dc9":"code","38b795f5":"code","88f0d22b":"code","d4b3cdcc":"code","52c35b06":"code","b768fb21":"code","bc37af7a":"code","a7be5eff":"code","284c7b92":"code","be37f8a5":"code","45d0b4b5":"code","20024399":"code","62809c8b":"code","19d95f93":"code","48b6cc0f":"code","fb773892":"code","b722c450":"code","e8cb7cbe":"code","d5e15ffc":"code","b3ea5327":"code","2c419b8c":"code","d6453bba":"code","83eebae4":"code","06f6702f":"code","c46fff2d":"code","523e6958":"code","65c97a8c":"code","8d206e34":"code","9e4cad29":"code","9728bb33":"code","245490b8":"code","052c368b":"code","4e9be602":"code","de59290c":"code","756b8934":"code","44aaa40f":"code","72cb3f6a":"code","11aa5611":"code","0a9c1695":"code","e6931fc8":"code","cc66bbee":"code","e660262c":"code","25637bec":"code","f1f64b89":"code","b540434a":"code","87082b2c":"code","ebdd0445":"code","a3185f42":"code","1226dd1b":"code","e1471715":"code","4a1deec1":"code","59dd5e13":"code","9ffa51ce":"code","d77d08df":"markdown","e1898d72":"markdown","6b40d5f8":"markdown","3158c3cc":"markdown","aa0f7152":"markdown","b1d7f1aa":"markdown","f2baaf10":"markdown","f502ebc3":"markdown","d80becfb":"markdown","700aa523":"markdown","fd6c470a":"markdown","53792477":"markdown","6e2085d3":"markdown","6aca2623":"markdown","20071666":"markdown","49406974":"markdown","1a96240c":"markdown","2fc0537c":"markdown","797325cb":"markdown","06c8bdf8":"markdown","7d3a1515":"markdown","e8820b09":"markdown","3f750712":"markdown","191c9722":"markdown","2ade065a":"markdown","32c70ab2":"markdown","c0151580":"markdown","ab22fb21":"markdown","4d5c52cb":"markdown","5f1618be":"markdown","bb9e323f":"markdown","2837e41d":"markdown","3c6b1f95":"markdown","edb5c78c":"markdown","1f5dc5a0":"markdown","c2c3b24d":"markdown","217ee357":"markdown","d48b26bf":"markdown","0322ed13":"markdown","ef052eda":"markdown","51711b8a":"markdown","093e7895":"markdown","4174b7da":"markdown","d7301937":"markdown","d40fb3c3":"markdown","a6236a1b":"markdown","6d769f66":"markdown"},"source":{"3289ec7e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-pastel\")\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fb154bab":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerId=test_df[\"PassengerId\"]","ad2dff18":"train_df.columns","f953fc4b":"train_df.head()","7cb44b6e":"train_df.describe()","71105d80":"train_df.info()","75359b35":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # Get Feature\n    var=train_df[variable]\n    # Count Number of Categorical Variable(Value\/Sample)\n    varValue=var.value_counts()\n    # Visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","3ee7c9fa":"category1=[\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","e0819199":"category2=[\"Cabin\",\"Name\",\"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","32f94c57":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable],bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist \".format(variable))\n    plt.show()","25dc6b1e":"numericVar=[\"Fare\", \"Age\", \"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","00701c40":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","75d8e05c":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","dcb308c8":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","cec0feab":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by=\"Survived\",ascending=False)","c2b95a38":"def detect_outliers(df,features):\n    outlier_indices=[]\n    \n    for c in features:\n        #1st quartile\n        Q1=np.percentile(df[c],25)\n        #3rd quartile\n        Q3=np.percentile(df[c],75)\n        #IQR\n        IQR=Q3-Q1\n        #Outlier Step\n        outlier_step=IQR*1.5\n        #Detect outlier and their indices\n        outlier_list_col=df[(df[c]<Q1-outlier_step) | (df[c]>Q3+outlier_step)].index\n        #Store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices=Counter(outlier_indices)\n    multiple_outliers=list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","66bbf3c4":"train_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","61115a1e":"#Drop Outliers\ntrain_df=train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop=True)","71ff6ed3":"train_df_len=len(train_df)\ntrain_df=pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","66921822":"train_df.head()","ef441877":"train_df.columns[train_df.isnull().any()]","18e7f99b":"train_df.isnull().sum()","582a222a":"train_df[train_df[\"Embarked\"].isnull()]","6a56ff05":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","ba0b173d":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","6554a891":"train_df[train_df[\"Fare\"].isnull()]","40bbd71b":"train_df[\"Fare\"]=train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","e735da7d":"train_df[train_df[\"Fare\"].isnull()]","b3674001":"list1=[\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(),annot=True,fmt=\".2f\")\nplt.show()","9ceea920":"g=sns.factorplot(x=\"SibSp\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","9936deb4":"g=sns.factorplot(x=\"Parch\",y=\"Survived\",kind=\"bar\",data=train_df,size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","1b35ce99":"g=sns.factorplot(x=\"Pclass\",y=\"Survived\",data=train_df,kind=\"bar\",size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","78001dc9":"g=sns.FacetGrid(train_df,col=\"Survived\")\ng.map(sns.distplot,\"Age\",bins=25)\nplt.show()","38b795f5":"g=sns.FacetGrid(train_df, col=\"Survived\",row=\"Pclass\",size=3)\ng.map(plt.hist,\"Age\",bins=25)\ng.add_legend()\nplt.show()","88f0d22b":"g=sns.FacetGrid(train_df, row=\"Embarked\", size=3)\ng.map(sns.pointplot, \"Pclass\", \"Survived\", \"Sex\")\ng.add_legend()\nplt.show()","d4b3cdcc":"g=sns.FacetGrid(train_df,row=\"Embarked\", col=\"Survived\", size=3.5)\ng.map(sns.barplot,\"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","52c35b06":"train_df[train_df[\"Age\"].isnull()]","b768fb21":"sns.factorplot(x=\"Sex\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","bc37af7a":"sns.factorplot(x=\"Sex\",y=\"Age\", hue=\"Pclass\",data=train_df,kind=\"box\")\nplt.show()","a7be5eff":"sns.factorplot(x=\"Parch\",y=\"Age\",data=train_df,kind=\"box\")\nsns.factorplot(x=\"SibSp\",y=\"Age\",data=train_df,kind=\"box\")\nplt.show()","284c7b92":"train_df[\"Sex\"]=[1 if i==\"male\" else 0 for i in train_df[\"Sex\"]] ","be37f8a5":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(),annot=True)\nplt.show()","45d0b4b5":"index_nan_age=list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred=train_df[\"Age\"][((train_df[\"SibSp\"]==train_df.iloc[i][\"SibSp\"])& (train_df[\"Parch\"]==train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"]==train_df.iloc[i][\"Pclass\"]))].median()\n    age_med=train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i]=age_pred\n    else:\n        train_df[\"Age\"].iloc[i]=age_med","20024399":"train_df[train_df[\"Age\"].isnull()]","62809c8b":"age_pred","19d95f93":"train_df[\"Name\"].head(10)","48b6cc0f":"name=train_df[\"Name\"]\ntrain_df[\"Title\"]=[i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","fb773892":"train_df[\"Title\"].head(10)","b722c450":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=60)\nplt.show()","e8cb7cbe":"# Convert to categorical\ntrain_df[\"Title\"]=train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"Other\")\ntrain_df[\"Title\"]=[0 if i==\"Master\" else 1 if i==\"Miss\" or i==\"Ms\" or i==\"Mlle\" or i==\"Mrs\" else 2 if i==\"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","d5e15ffc":"sns.countplot(x=\"Title\",data=train_df)\nplt.xticks(rotation=360)\nplt.show()","b3ea5327":"g=sns.factorplot(x=\"Title\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_xticklabels([\"Master\",\"Miss-Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","2c419b8c":"train_df.drop(labels=[\"Name\"],axis=1,inplace=True)","d6453bba":"train_df.head()","83eebae4":"train_df=pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","06f6702f":"train_df[\"Fsize\"]=train_df[\"SibSp\"]+train_df[\"Parch\"]+1","c46fff2d":"train_df.head()","523e6958":"g=sns.factorplot(x=\"Fsize\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","65c97a8c":"train_df[\"family_size\"]=[1 if i<5 else 0 for i in train_df[\"Fsize\"]]","8d206e34":"train_df.head(20)","9e4cad29":"sns.countplot(x=\"family_size\",data=train_df)\nplt.show()","9728bb33":"g=sns.factorplot(x=\"family_size\",y=\"Survived\",data=train_df,kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","245490b8":"train_df=pd.get_dummies(train_df, columns=[\"family_size\"])\n\ntrain_df.head()","052c368b":"sns.countplot(x=\"Embarked\",data=train_df)\nplt.show()","4e9be602":"train_df=pd.get_dummies(train_df,columns=[\"Embarked\"])\ntrain_df.head()","de59290c":"train_df[\"Ticket\"].head(20)","756b8934":"tickets=[]\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    \n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"]=tickets","44aaa40f":"train_df[\"Ticket\"].head(20)","72cb3f6a":"train_df=pd.get_dummies(train_df,columns=[\"Ticket\"],prefix=\"T\")\ntrain_df.head(10)","11aa5611":"sns.countplot(x=\"Pclass\",data=train_df)\nplt.show()","0a9c1695":"train_df[\"Pclass\"]=train_df[\"Pclass\"].astype(\"category\")\ntrain_df=pd.get_dummies(train_df,columns=[\"Pclass\"])\ntrain_df.head()","e6931fc8":"train_df[\"Sex\"]=train_df[\"Sex\"].astype(\"category\")\ntrain_df=pd.get_dummies(train_df,columns=[\"Sex\"])\ntrain_df.head()","cc66bbee":"train_df.drop(labels=[\"PassengerId\",\"Cabin\"],axis=1,inplace=True)","e660262c":"train_df.columns","25637bec":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn. ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","f1f64b89":"train_df_len","b540434a":"test=train_df[train_df_len:]\ntest.drop(labels=[\"Survived\"],axis=1,inplace=True)","87082b2c":"test.head()","ebdd0445":"train=train_df[:train_df_len]\nx_train=train.drop(labels=\"Survived\",axis=1)\ny_train=train[\"Survived\"]\nx_train,x_test,y_train,y_test=train_test_split(x_train,y_train,test_size=0.33,random_state=42)\nprint(\"x_train\",len(x_train))\nprint(\"x_test\",len(x_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","a3185f42":"logreg=LogisticRegression()\n# x_train has features, y_train has survived value\nlogreg.fit(x_train,y_train)\nacc_log_train=round(logreg.score(x_train,y_train)*100,2)\nacc_log_test=round(logreg.score(x_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","1226dd1b":"random_state=42\nclassifier=[DecisionTreeClassifier(random_state=random_state),\n           SVC(random_state=random_state),\n           RandomForestClassifier(random_state=random_state),\n           LogisticRegression(random_state=random_state),\n           KNeighborsClassifier()]\n\ndt_param_grid={\"min_samples_split\":range(10,500,20),\n              \"max_depth\":range(1,10,2)}\n\nsvc_param_grid={\"kernel\":[\"rbf\"],\n               \"gamma\":[0.001,0.01,0.1,1],\n               \"C\":[1,10,50,100,200,300,1000]}\n\nrf_param_grid={\"max_features\":[1,3,10],\n              \"min_samples_split\":[2,3,10],\n              \"min_samples_leaf\":[1,3,10],\n              \"bootstrap\":[False],\n              \"n_estimators\":[100,300],\n              \"criterion\":[\"gini\"]}\n\nlogreg_param_grid={\"C\":np.logspace(-3,3,7),\n                  \"penalty\":[\"l1\",\"l2\"]}\n\nknn_param_grid={\"n_neighbors\":np.linspace(1,19,10, dtype=int).tolist(),\n               \"weights\":[\"uniform\",\"distance\"],\n               \"metric\":[\"euclidean\",\"manhattan\"]}\n\nclassifier_param=[dt_param_grid,\n                 svc_param_grid,\n                 rf_param_grid,\n                 logreg_param_grid,\n                 knn_param_grid]","e1471715":"cv_result=[]\nbest_estimators=[]\nfor i in range(len(classifier)):\n    clf=GridSearchCV(classifier[i],param_grid=classifier_param[i],cv=StratifiedKFold(n_splits=10),scoring=\"accuracy\",n_jobs=-1,verbose=1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","4a1deec1":"cv_results=pd.DataFrame({\"Cross Validation Means\":cv_result,\"ML Models\":[\"DecisionTreeClassifier\",\"SVM\",\"RandomForestClassifier\",\"LogisticRegression\",\"KNeighborsClassifier\"]})\n\ng=sns.barplot(\"Cross Validation Means\",\"ML Models\",data=cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")\nplt.show()","59dd5e13":"votingC=VotingClassifier(estimators=[(\"dt\",best_estimators[0]),\n                                    (\"rfc\",best_estimators[2]),\n                                     (\"lr\",best_estimators[3])],\n                                     voting=\"soft\",n_jobs=-1)\nvotingC=votingC.fit(x_train,y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))\n# x_test is for prediction, y_test is for test","9ffa51ce":"test_survived=pd.Series(votingC.predict(test),name=\"Survived\").astype(int)\nresults=pd.concat([test_PassengerId,test_survived],axis=1)\nresults.to_csv(\"titanic.csv\",index=False)","d77d08df":"\n* float64(2): Fare and Age\n* int64(5): Pclass, SibSp, Parch, PassengerId and Survived\n* object(5): Cabin, Embarked, Ticket, Name and Sex\n","e1898d72":"* Having a lot of SibSp have less chance to survive\n* if SibSp == 0 or 1 or 2, passenger has more chance to survive\n* We can consider a new feature describing these categories","6b40d5f8":"* Pclass is important featyre for model training","3158c3cc":"* Age is not correlated with Sex but it is correlated with Parch, SibSp and Pclass","aa0f7152":"<a id=\"5\"><\/a><br>\n## Numerical Variable","b1d7f1aa":"<a id=\"2\"><\/a><br>\n# Variable Description\n1. PassengerId: Unique id number to each passenger\n1. Survived: Passenger survive(1) or died(0)\n1. Pclass: Passenger class\n1. Name: Name of passenger\n1. Sex: Gender of passenger\n1. Age: Age of passenger\n1. SibSp: Number of siblings\/spouses\n1. Parch: Number of parents\/children\n1. Ticket: Ticket number\n1. Fare: Amount of money spent on ticket\n1. Cabin: Cabin category\n1. Embarked: Port where passenger embarked (C: Cherbourg, Q: Queenstown, S: Southampton","f2baaf10":"<a id=\"12\"><\/a><br>\n## Correlation Between SibSp -- Parch -- Age -- Fare -- Survived","f502ebc3":"<a id=\"27\"><\/a><br>\n## Sex","d80becfb":"<a id=\"3\"><\/a><br>\n# Univariate variable Analysis\n* Categorical Variable: Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, SibSp, Parch\n* Numerical Variable: Fare, Age and PassengerId","700aa523":"<a id=\"9\"><\/a><br>\n## Find Missing Value","fd6c470a":"<a id=\"13\"><\/a><br>\n## SibSp -- Survived","53792477":"<a id=\"11\"><\/a><br>\n# Visualization","6e2085d3":"<a id=\"24\"><\/a><br>\n## Embarked","6aca2623":"<a id=\"10\"><\/a><br>\n## Fill Missing Value\n* Embarked has 2 missing value\n* Fare has only 1","20071666":"* Sex is not informative for age prediction, age distribution seems to be same","49406974":"<a id=\"30\"><\/a><br>\n## Train Test Split","1a96240c":"<a id=\"6\"><\/a><br>\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","2fc0537c":"<a id=\"31\"><\/a><br>\n## Simple Logistic Regression","797325cb":"<a id=\"22\"><\/a><br>\n## Name -- Title","06c8bdf8":"<a id=\"4\"><\/a><br>\n## Categorical Variable","7d3a1515":"* Female passengers have much better survival rate than male passengers\n* Males have better survival rate in Pclass 3 in C\n* Embarked and Sex will be used in training","e8820b09":"<a id=\"18\"><\/a><br>\n## Embarked -- Sex -- Pclass -- Survived\n","3f750712":"<a id=\"19\"><\/a><br>\n## Embarked -- Sex -- Fare -- Survived","191c9722":"* First class passenger are older than 2nd, and 2nd is older than 3rd class","2ade065a":"<a id=\"28\"><\/a><br>\n## Drop PassengerId and Cabin","32c70ab2":"* Small families have more chance to survive than large families","c0151580":"<a id=\"16\"><\/a><br>\n## Age -- Survived","ab22fb21":"<a id=\"32\"><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation\nWe will compare 5 machine learning classifier and evaluate mean accuracy of each of them by stratified cross validation\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","4d5c52cb":"<a id=\"21\"><\/a><br>\n# Feature Engineerig","5f1618be":"<a id=\"23\"><\/a><br>\n## Family Size","bb9e323f":"<a id=\"26\"><\/a><br>\n## Pclass","2837e41d":"* Fare feature seems to have correlation with survived feature (0.26)","3c6b1f95":"<a id=\"20\"><\/a><br>\n## Fill Mising: Age Feature","edb5c78c":"<a id=\"15\"><\/a><br>\n## Pclass -- Survived","1f5dc5a0":"<a id=\"7\"><\/a><br>\n# Outlier Detection ","c2c3b24d":"<a id=\"29\"><\/a><br>\n# Modeling","217ee357":"* Passengers who pay higher Fare have better survival\n* Fare can be used as categorical for training","d48b26bf":"<a id=\"25\"><\/a><br>\n## Ticket","0322ed13":"<a id=\"14\"><\/a><br>\n## Parch -- Survived","ef052eda":"<a id=\"1\"><\/a><br>\n# Load and Check Data","51711b8a":"* Black line indicates standard deviation\n* SibSp and Parch can be used for new feature extraction with th=3\n* Small families have more chance to survive\n* There is a std in survival of passenger with Parch=3","093e7895":"<a id=\"34\"><\/a><br>\n## Prediction and Submission","4174b7da":"# Introduction\nThe Titanic was a British steamship that sank in the early hours of April 15, 1912 after striking an iceberg,leading to the deaths of more than 1,500 passengers and crew.\n<font color='blue'\/>\nContent:\n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n   * [Univariate Variable Analysis](#3)\n       * [Categorical Variable](#4)\n       * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)\n4. [Outlier Detection](#7)\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Visualization](#11)\n    * [Correlation Between SibSp -- Parch -- Age -- Fare -- Survived](#12)\n    * [SibSp -- Survived](#13)\n    * [Parch -- Survived](#14)\n    * [Pclass -- Survived](#15)\n    * [Age -- Survived](#16)\n    * [Pclass -- Survived -- Age](#17)\n    * [Embarked -- Sex -- Pclass -- Survived](#18)\n    * [Embarked -- Sex -- Fare -- Survived](#19)\n    * [Fill Mising: Age Feature](#20)\n7. [Feature Engineering](#21)\n    * [Name -- Title](#22)\n    * [Family Size](#23)\n    * [Embarked](#24)\n    * [Ticket](#25)\n    * [Pclass](#26)\n    * [Sex](#27)\n    * [Drop PassengerId and Cabin](#28)\n8. [Modeling](#29)\n    * [Train Test Split](#30)\n    * [Simple Logistic Regression](#31)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#32)\n    * [Ensemble Modeling](#33)\n    * [Prediction and Submission](#34)","d7301937":"<a id=\"17\"><\/a><br>\n## Pclass -- Survived -- Age","d40fb3c3":"<a id=\"33\"><\/a><br>\n## Ensemble Modeling\n","a6236a1b":"<a id=\"8\"><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","6d769f66":"* Age <= 10 has a high survival rate\n* Oldest passenger (about 80 years old) survived\n* Large number of 20 years old did not survive\n* Most passengers are in 15-35 age range\n* Use age feature in training\n* Use age distribution for missing value of age"}}