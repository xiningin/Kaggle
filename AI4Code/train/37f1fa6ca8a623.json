{"cell_type":{"f4f4c241":"code","b4bafe45":"code","615e6a4c":"code","7e9e83c7":"code","2ed54299":"code","de0b63ca":"code","a774a858":"code","8fddfec4":"code","555c1d6c":"code","4510a560":"code","4c83f065":"code","cf50f3fe":"code","cb8f99a6":"code","b075f662":"code","405c57e0":"code","f2df3936":"code","204208ee":"code","f1962c7e":"code","9bd908bd":"code","794187a0":"code","e5794b7d":"code","b0a3b090":"code","18cbea60":"code","17d159d4":"markdown","b0560eae":"markdown","8674b459":"markdown","638e7b57":"markdown","c874d484":"markdown"},"source":{"f4f4c241":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4bafe45":"import pandas as pd\npd.set_option('display.max_columns', 5)","615e6a4c":"def create_user_movie_df():\n    import pandas as pd\n    movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\n    rating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\n    df = movie.merge(rating, how=\"left\", on=\"movieId\")\n    comment_counts = pd.DataFrame(df[\"title\"].value_counts())\n    rare_movies = comment_counts[comment_counts[\"title\"] <= 1000].index\n    common_movies = df[~df[\"title\"].isin(rare_movies)]\n    user_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\n    return user_movie_df\n\nuser_movie_df = create_user_movie_df()","7e9e83c7":"# Determine the movies watched by the user to be suggested.\nrandom_user = 108170\n\nrandom_user_df = user_movie_df[user_movie_df.index == random_user]\n\nmovies_watched = random_user_df.columns[random_user_df.notna().any()].tolist()\n\nmovies_watched","2ed54299":"len(movies_watched)   \n\n# We need to go to watch movies that a random user is watching.","de0b63ca":"# You access the data and Ids of users broadcasting from the same players\n\nmovies_watched_df = user_movie_df[movies_watched]  \n\nmovies_watched_df.head()\n# line above is the movie 138493 that says the same thing as this person.\n#There is someone who watched at least 1 of these 186 movies.\n# not work . There must be users watching your en few packages.\n# 1 watching doesn't show the same behavior pattern as this person","a774a858":"movies_watched_df.shape","8fddfec4":"user_movie_count = movies_watched_df.T.notnull().sum()\n# where all users have discovered how many discoveries\n# In the output, we reached the information of how many movies the user of each user watched.\n# user movie counts have arrived.\n\nuser_movie_count = user_movie_count.reset_index()    \n# We saved the index of user ids. We converted them to variables.\n# and has information about how many movies he has watched in total in user usages\n\nuser_movie_count","555c1d6c":"user_movie_count.columns = [\"userId\", \"movie_count\"]\nuser_movie_count.head()","4510a560":"perc = len(movies_watched) * 60 \/ 100\n\nusers_same_movies = user_movie_count[user_movie_count[\"movie_count\"] > perc][\"userId\"]\n# who has more common views than random users\n\nusers_same_movies.head()","4c83f065":"users_same_movies.count()","cf50f3fe":"# In the most similar way to the user to be suggested\n\nfinal_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(users_same_movies)],\n                      random_user_df[movies_watched]])\n\nfinal_df.shape   \n# (2327,186) There are 2327 users. We also have 186 movies","cb8f99a6":"corr_df = final_df.T.corr().unstack().sort_values()\ncorr_df = pd.DataFrame(corr_df, columns=[\"corr\"])\ncorr_df.index.names = ['user_id_1', 'user_id_2']\ncorr_df = corr_df.reset_index()","b075f662":"# make a choice when shopping 65 percent or more with random users\ntop_users = corr_df[(corr_df[\"user_id_1\"] == random_user) & (corr_df[\"corr\"] >= 0.65) & (corr_df[\"user_id_2\"] != random_user)][\n    [\"user_id_2\", \"corr\"]].reset_index(drop=True)\n\ntop_users = top_users.sort_values(by='corr', ascending=False)\ntop_users","405c57e0":"top_users.rename(columns={\"user_id_2\": \"userId\"}, inplace=True)\ntop_users\n\n# it should show the most similar behavior with the random user now\n# now we need to go to the rating table of these users. now only on duty.","f2df3936":"rating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')\ntop_users_ratings = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]], how='inner')\n# We have merged.. We have merged the top users list with the userid, movie id and rating in your table.\n# random user has the highest annual.65+ and apply for them\n#measurements and which movie they rated\n\ntop_users_ratings.head()\n# users, movies and given points..","204208ee":"# Calculate WeightedAverageAdvicePoints and keep the first 5 movies\n# we are also with you.\n\ntop_users_ratings['weighted_rating'] = top_users_ratings['corr'] * top_users_ratings['rating']\ntop_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\n# at the weight center ceremonies singularized according to the movies\n\nrecommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\nrecommendation_df = recommendation_df.reset_index()\n","f1962c7e":"recommendation_df[recommendation_df[\"weighted_rating\"] > 4]\nmovies_to_be_recommend = recommendation_df[recommendation_df[\"weighted_rating\"] > 4].sort_values(\"weighted_rating\", ascending=False)[0:5]","9bd908bd":"movie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\nmovies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]]).index","794187a0":"# Item Based Suggestion\n# According to the name of the movie that the user gave the most recent highest rating from their movies\n# Suggest 5 user-based, 5 item-based\n\nuser = 108170\n\nmovie = pd.read_csv('..\/input\/movielens-20m-dataset\/movie.csv')\nrating = pd.read_csv('..\/input\/movielens-20m-dataset\/rating.csv')","e5794b7d":"# Users with the most up-to-date ratings from movies that have given 5 points from \n# movie recommendation users:\n\nmovie_id = rating[(rating[\"userId\"] == user) & (rating[\"rating\"] == 5.0)]. \\\n    sort_values(by=\"timestamp\", ascending=False)[\"movieId\"][0:1].values[0]","b0a3b090":"def item_based_recommender(movie_name, user_movie_df):\n    movie = user_movie_df[movie_name]\n    return user_movie_df.corrwith(movie).sort_values(ascending=False).head(10)","18cbea60":"movies_from_item_based = item_based_recommender(movie[movie[\"movieId\"] == movie_id][\"title\"].values[0], user_movie_df)\n\nmovies_from_item_based[1:6].index.to_list()","17d159d4":"## \ud83d\udca1**RESULT**","b0560eae":"[![1_70hEtObAo19n-1tA8t9xMQ.png](attachment:91114118-40b4-4429-98f7-81c6dde02417.png)](http:\/\/)","8674b459":"##  Hybrid Recommender  :\n\n### \ud83d\udccc Business Problem :\n\n* Estimate using item-based and user-based recommender methods for the user whose ID is given.\n\n### \ud83d\udccc Dataset Story :\n\n* The dataset is the movie provided by MovieLens, a recommendation service. It contains the scores made for these movies. It includes 27.2 2.000.0263 movies. This path is targeted by 138,493 users between January 09, 1995 and March 31, 2015. This data set is used on 17 October 2016. All selected users teach at least 20 movies the information they give.\n\n### \ud83d\udccc Variables :\n\n* title \u2013 Movie name\n* userid \u2013 Unique user.\n* (UniqueID)movieId \u2013 Unique movie.\n* (UniqueID)rating \u2013 User-rated movie\n* timestamp \u2013 Evaluation date","638e7b57":"--- \n\n\n\nI\u2764\ufe0fVBO","c874d484":"* ##### \ud83d\udccc so far, we have created a subset like that, and we brought random users and those who watch similar movies by more than 60 percent. There is no similarity in behavior at the moment, there is only watching the same movies, I don't know whether you like it or not."}}