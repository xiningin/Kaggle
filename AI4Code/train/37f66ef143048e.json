{"cell_type":{"209857bd":"code","7aabc927":"code","0d08fb45":"code","beff2dc5":"code","9a7ae988":"code","fee8734b":"code","f96bf1f9":"code","9206a4f3":"code","71fcd1f4":"code","9f3a0b90":"code","d4f69e28":"code","c66d0a2b":"code","3adb9f63":"code","22338f29":"code","11cbf6d5":"code","853807c6":"code","c8c4eb55":"code","09b6f98f":"code","b8f06ff9":"code","638b384e":"code","3189acc6":"code","38387818":"code","352cd67d":"code","4db4fc5a":"code","29528565":"code","df542a34":"code","52d8a847":"code","81772193":"code","d96fe6d5":"code","e2f55ea8":"code","c94db303":"code","2874ce68":"code","ba7e1602":"code","0af60954":"code","5689500d":"code","7a50a262":"code","db68aca9":"code","7fd20057":"code","4fbf628d":"code","7f728fa5":"code","b79355f3":"code","b08c85ff":"code","11bf3404":"code","8f1f4114":"code","0cea3551":"code","b6a44810":"code","7a5d87ff":"code","522a56d5":"code","53aaf621":"code","90a2dcf7":"code","8130e03b":"code","9fdc5390":"code","bfebf100":"code","df2d65e9":"code","1617c6a8":"code","6fb4bd1a":"code","4cb327f4":"code","4a46a4ed":"code","e0f80867":"code","eeec500c":"code","47cc095a":"code","9568971f":"code","3fb1bec1":"code","52c27869":"code","bed25618":"code","5c82bc27":"code","33812771":"code","caf921a0":"code","7b33f6f2":"code","b0331ae4":"code","51f16296":"code","eb9ef10d":"code","e7a0f51f":"code","0c488b3b":"code","d4aafb3e":"code","22160b90":"code","bd5b1a2a":"code","9d05d4a8":"code","157504cc":"code","b2a1578c":"code","0de73a5a":"code","3183ca1e":"code","7ce8d177":"code","39ad2ab1":"code","d02be16f":"code","89c4ab6b":"code","01d5c901":"code","f04eed7e":"code","8ec6f27a":"code","e1cc70dc":"code","db01de81":"code","56a2e0be":"code","b846e793":"code","3235f639":"code","19b50497":"code","2fb10804":"code","33ceaa69":"code","93b69981":"code","e9de40fa":"code","700d286c":"code","2f9f1a5d":"code","6f7f9869":"code","a1fa6732":"code","1581d050":"code","bb06dff7":"code","11503c68":"code","154ef63e":"code","ef99d9fe":"code","9eebdd10":"code","936709da":"code","a7bdcba3":"code","b115de99":"code","c11186b4":"code","a600c462":"code","64a0e7e2":"code","6ba885b3":"code","a3247afe":"code","19599f9d":"code","95dc6c32":"code","09d65931":"code","0605893b":"code","88f859a5":"code","8d7208a9":"code","7022b2a0":"code","7da3d349":"code","78f04a92":"code","304035af":"code","ae907f57":"code","36f87e9d":"code","80f9dee1":"code","e2a6ffe1":"code","d924a692":"code","45efeb1a":"markdown","a652c400":"markdown","3765bf3b":"markdown","4c3e1a9c":"markdown","35e34abb":"markdown","8e14e524":"markdown","41bdc7cc":"markdown","e6cd66ec":"markdown","7b14bed2":"markdown","1a3a961f":"markdown","258566e0":"markdown","b2f7daea":"markdown","9d4557c7":"markdown","93b22ddc":"markdown","91cd4022":"markdown","d60935ab":"markdown","cb08b3f2":"markdown","e6ded0c2":"markdown","d25f74dd":"markdown","c1f868e8":"markdown","56ed54cb":"markdown","24a5dc4a":"markdown","dfb6d674":"markdown","be35de65":"markdown","7ca7fa87":"markdown","fbc71c5e":"markdown","6135dfba":"markdown","d46bca8f":"markdown","a9b9291e":"markdown","b32b6f3f":"markdown","928e1fac":"markdown","69ba3ee2":"markdown","584ca52a":"markdown","cd03b07a":"markdown","c34279dc":"markdown","299dae9e":"markdown","fc46c316":"markdown","5d8d99ca":"markdown","cb33d3bb":"markdown","e77c9e7a":"markdown","818ec900":"markdown","39481b43":"markdown","6d59ec0e":"markdown","270e4937":"markdown","8e4ede72":"markdown","b5db8371":"markdown","282b882b":"markdown","e9d3e351":"markdown","4855fdd9":"markdown","4e34a3f8":"markdown","1871b2ef":"markdown"},"source":{"209857bd":"import pandas as pd\nimport numpy as np\nimport pylab as pl\nimport matplotlib.pyplot as plt\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\npd.set_option('display.max_rows', None)","7aabc927":"df = pd.read_csv('..\/input\/beer-datacsv\/beer_data.csv', encoding='iso-8859-1')","0d08fb45":"df.head()","beff2dc5":"#checking % of missing values\ndf.isnull().sum() * 100 \/ len(df)","9a7ae988":"df.count()","fee8734b":"#checking review count for each rating\ndf.review_overall.value_counts()","f96bf1f9":"#Checking the review_profilename null rows\ndf.loc[df.review_profilename.isnull()].count()","9206a4f3":"#since very small no. of rows for null values so removing those\ndf = df[~df.review_profilename.isnull()]","71fcd1f4":"\ndf.isnull().sum() * 100 \/ len(df)","9f3a0b90":"df.duplicated().sum()","d4f69e28":"df.drop_duplicates(keep = 'first', inplace = True)","c66d0a2b":"df.duplicated().sum()","3adb9f63":"reviews_count_beer_id = df.groupby('beer_beerid').review_overall.count().to_frame('Reviews_count').sort_values(by = \"Reviews_count\", ascending=False)","22338f29":"reviews_count_beer_id.head()","11cbf6d5":"reviews_count_beer_id.reset_index(inplace=True)","853807c6":"reviews_count_beer_id.head()","c8c4eb55":"reviews_count_analyze = reviews_count_beer_id.Reviews_count.value_counts().to_frame().reset_index()","09b6f98f":"reviews_count_analyze.columns = ['number_of_reviews','number_of_beer_ids']","b8f06ff9":"reviews_count_analyze.head()","638b384e":"#calculating percentage of each beer_id and also their cummulative percentage\nreviews_count_analyze['percentage_beers'] = (reviews_count_analyze['number_of_beer_ids']*100)\/reviews_count_analyze.number_of_beer_ids.sum()\nreviews_count_analyze['cumulative_percentage_beers'] = reviews_count_analyze.percentage_beers.cumsum()","3189acc6":"reviews_count_analyze.head(10)","38387818":"reviews_count_analyze.count()","352cd67d":"import seaborn as sns\n\nsns.set(rc={'figure.figsize':(25,7)})\nax = sns.barplot(x=reviews_count_analyze[0:100].number_of_reviews, y=reviews_count_analyze[0:200].number_of_beer_ids, palette=\"rocket\")\nax.set(yscale=\"log\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=90,fontsize=10)\nax","4db4fc5a":"reviews_count_by_profilename = df.groupby('review_profilename').review_overall.count().to_frame('count_reviews').sort_values(by = \"count_reviews\", ascending = False)","29528565":"reviews_count_by_profilename.reset_index(inplace=True)","df542a34":"reviews_count_by_profilename.head()","52d8a847":"reviews_count_by_profilename.count()","81772193":"#now lets explore number of users with number of reviews they have given\nreviews_count_user = reviews_count_by_profilename.count_reviews.value_counts().to_frame().reset_index()","d96fe6d5":"reviews_count_user.columns = ['number_of_reviews','number_of_users']","e2f55ea8":"reviews_count_user.head()","c94db303":"reviews_count_user.count()","2874ce68":"reviews_count_user['percentage_users'] = (reviews_count_user['number_of_users']*100)\/reviews_count_user.number_of_users.sum()\nreviews_count_user['cumul_percentage_users'] = reviews_count_user.percentage_users.cumsum()","ba7e1602":"reviews_count_user.head()","0af60954":"#visualizing number of users with number of reviews\n\nsns.set(rc={'figure.figsize':(25,7)})\nax = sns.barplot(x=reviews_count_user[0:100].number_of_reviews, y=reviews_count_user[0:200].number_of_users, palette=\"rocket\")\nax.set(yscale=\"log\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=90,fontsize=10)\nax","5689500d":"#unique values for each metric\ndf.beer_beerid.nunique()","7a50a262":"df.review_profilename.nunique()","db68aca9":"df.review_overall.nunique()","7fd20057":"df.beer_beerid.count()","4fbf628d":"beer_ids_no_of_ratings_grt_30 = reviews_count_beer_id.loc[reviews_count_beer_id.Reviews_count>=30].beer_beerid.to_frame('beer_beerid')\nusers_no_of_ratings_grt_30 = reviews_count_by_profilename.loc[reviews_count_by_profilename.count_reviews>=30].review_profilename.to_frame('review_profilename')","7f728fa5":"rating2 = pd.merge(df, beer_ids_no_of_ratings_grt_30, how='inner', on='beer_beerid')\nrating2 = pd.merge(rating2, users_no_of_ratings_grt_30, how='inner', on='review_profilename')","b79355f3":"rating2.head()","b08c85ff":"rating2.count()","11bf3404":"np.sort(rating2.review_overall.unique())","8f1f4114":"rating2.head()","0cea3551":"rating2.groupby('beer_beerid').review_overall.mean()","b6a44810":"plt.hist(rating2.groupby('beer_beerid').review_overall.mean(), color=\"m\")","7a5d87ff":"#sns.distplot(rating2.groupby('beer_beerid').review_overall.mean(), kde=False, color=\"b\")\nsns.distplot(rating2.groupby('beer_beerid').review_overall.mean(), color=\"m\")","522a56d5":"rating2.groupby('beer_beerid').review_overall.mean().mean()","53aaf621":"rating2.groupby('review_profilename').review_overall.mean()","90a2dcf7":"plt.hist(rating2.groupby('review_profilename').review_overall.mean(), color=\"m\")","8130e03b":"rating2.groupby('review_profilename').review_overall.mean().mean()","9fdc5390":"#we already deleted beerid records having only upto 5 ratings, so lets reform this dataframe.","bfebf100":"reviews_count_beer_id2 = rating2.groupby('beer_beerid').review_overall.count().to_frame('Reviews_count').sort_values(by = \"Reviews_count\", ascending = False)","df2d65e9":"reviews_count_beer_id2.head()","1617c6a8":"sns.distplot(reviews_count_beer_id2, color=\"m\")","6fb4bd1a":"reviews_count_beer_id2.Reviews_count.mean()","4cb327f4":"\n\nreview_count_user = rating2.groupby('review_profilename').review_overall.count().to_frame('Reviews_count').sort_values(by = \"Reviews_count\", ascending = False)","4a46a4ed":"review_count_user.head()","e0f80867":"sns.distplot(review_count_user, color=\"m\")","eeec500c":"review_count_user.Reviews_count.mean()","47cc095a":"import sklearn\nfrom sklearn.model_selection import train_test_split","9568971f":"train, test = train_test_split(rating2, test_size=0.30, random_state=31)","3fb1bec1":"print(train.shape)\nprint(test.shape)","52c27869":"train.head()","bed25618":"train.reset_index(inplace=True,drop=True)\ntest.reset_index(inplace=True,drop=True)","5c82bc27":"train.head()","33812771":"# pivot ratings beer features\ndf_beer_features = train.pivot_table(index='review_profilename',columns='beer_beerid',values='review_overall').fillna(0)","caf921a0":"df_beer_features.head()","7b33f6f2":"dummy_train = train.copy()\ndummy_test = test.copy()","b0331ae4":"dummy_train['review_overall'] = dummy_train['review_overall'].apply(lambda x: 0 if x>=1 else 1)\ndummy_test['review_overall'] = dummy_test['review_overall'].apply(lambda x: 1 if x>=1 else 0)","51f16296":"# The beers not rated by user is marked as 1 for prediction. \ndummy_train = dummy_train.pivot_table(\n    index='review_profilename',\n    columns='beer_beerid',\n    values='review_overall'\n).fillna(1)\n\n# The beers not rated by user is marked as 0 for evaluation. \ndummy_test = dummy_test.pivot_table(\n    index='review_profilename',\n    columns='beer_beerid',\n    values='review_overall'\n).fillna(0)","eb9ef10d":"dummy_train.head()","e7a0f51f":"dummy_test.head()","0c488b3b":"from sklearn.metrics.pairwise import pairwise_distances\n\n#User Similarity Matrix\nuser_correlation = 1 - pairwise_distances(df_beer_features, metric='cosine')\nuser_correlation[np.isnan(user_correlation)] = 0","d4aafb3e":"print(user_correlation)","22160b90":"user_correlation.shape","bd5b1a2a":"beer_features = train.pivot_table(\n    index='review_profilename',\n    columns='beer_beerid',\n    values='review_overall'\n)","9d05d4a8":"beer_features.head()","157504cc":"mean = np.nanmean(beer_features, axis=1)\ndf_subtracted = (beer_features.T-mean).T","b2a1578c":"df_subtracted.head()","0de73a5a":"from sklearn.metrics.pairwise import pairwise_distances\n\n# User Similarity Matrix\nuser_correlation = 1 - pairwise_distances(df_subtracted.fillna(0), metric='cosine')\nuser_correlation[np.isnan(user_correlation)] = 0\nprint(user_correlation)","3183ca1e":"user_correlation[user_correlation<0]=0\nuser_correlation","7ce8d177":"user_predicted_ratings = np.dot(user_correlation, beer_features.fillna(0))\nuser_predicted_ratings","39ad2ab1":"user_predicted_ratings.shape","d02be16f":"user_final_rating = np.multiply(user_predicted_ratings,dummy_train)\nuser_final_rating.head()","89c4ab6b":"#Finding the top 5 recommendation for the user 1\nuser_final_rating.iloc[0].sort_values(ascending=False)[0:5]","01d5c901":"beer_features = train.pivot_table( index='review_profilename', columns='beer_beerid', values='review_overall' ).T\n\nbeer_features.head()\n","f04eed7e":"mean = np.nanmean(beer_features, axis=1)\ndf_subtracted1 = (beer_features.T-mean).T","8ec6f27a":"from sklearn.metrics.pairwise import pairwise_distances\n\n# User Similarity Matrix\nitem_correlation = 1 - pairwise_distances(df_subtracted1.fillna(0), metric='cosine')\nitem_correlation[np.isnan(item_correlation)] = 0\nprint(item_correlation)","e1cc70dc":"item_correlation[item_correlation<0]=0\nitem_correlation","db01de81":"item_predicted_ratings = np.dot((beer_features.fillna(0).T),item_correlation)\nitem_predicted_ratings","56a2e0be":"item_predicted_ratings.shape","b846e793":"dummy_train.shape","3235f639":"item_final_rating = np.multiply(item_predicted_ratings,dummy_train)\nitem_final_rating.head()","19b50497":"#Top 5 prediction for the user -1\n\n\nitem_final_rating.iloc[0].sort_values(ascending=False)[0:5]","2fb10804":"user_correlation","33ceaa69":"user_correlation.shape","93b69981":"user_correlation1= user_correlation","e9de40fa":"np.fill_diagonal(user_correlation1, 0)","700d286c":"def largest_indices(ary, n):\n    \"\"\"Returns the n largest indices from a numpy array.\"\"\"\n    flat = ary.flatten()\n    indices = np.argpartition(flat, -n)[-n:]\n    indices = indices[np.argsort(-flat[indices])]\n    return np.unravel_index(indices, ary.shape)","2f9f1a5d":"a = largest_indices(user_correlation1, 20)\na","6f7f9869":"user_correlation1[largest_indices(user_correlation1, 20)]","a1fa6732":"for i in list(a[0]):\n     print(str(i) + \"-\" + beer_features.columns.get_values()[i])","1581d050":"largest_indices(user_correlation1, 20)","bb06dff7":"sns.set(rc={'figure.figsize':(20,20)})\nsns.heatmap(df_subtracted.iloc[:,list(a[0])].dropna(thresh=1),cmap='RdBu')","11503c68":"item_correlation.shape","154ef63e":"item_correlation1 = item_correlation\n\nnp.fill_diagonal(item_correlation1, 0)\nb = largest_indices(item_correlation1, 20)\nb","ef99d9fe":"item_correlation1[largest_indices(item_correlation1, 20)]","9eebdd10":"#heat map for comparing ratings of similar beers\n#index to beer_id mapping\nfor i in list(b[0]):\n   print(str(i) + \"-\" + str(beer_features.T.columns.get_values()[i]))","936709da":"sns.set(rc={'figure.figsize':(20,20)})\nsns.heatmap(df_subtracted1.iloc[list(b[0]),:].dropna(thresh=1).T,cmap='RdBu')","a7bdcba3":"test.head()","b115de99":"test.info()","c11186b4":"test_beer_features = test.pivot_table(\n    index='review_profilename',\n    columns='beer_beerid',\n    values='review_overall'\n)\nmean = np.nanmean(test_beer_features, axis=1)\ntest_df_subtracted = (test_beer_features.T-mean).T\n\n# User Similarity Matrix\ntest_user_correlation = 1 - pairwise_distances(test_df_subtracted.fillna(0), metric='cosine')\ntest_user_correlation[np.isnan(test_user_correlation)] = 0\nprint(test_user_correlation)","a600c462":"test_user_correlation[test_user_correlation<0]=0\ntest_user_predicted_ratings = np.dot(test_user_correlation, test_beer_features.fillna(0))\ntest_user_predicted_ratings","64a0e7e2":"test_user_final_rating = np.multiply(test_user_predicted_ratings,dummy_test)\ntest_user_final_rating.head()","6ba885b3":"from sklearn.preprocessing import MinMaxScaler\nfrom numpy import *\n\nX  = test_user_final_rating.copy() \nX = X[X>0]\n\nscaler = MinMaxScaler(feature_range=(1, 5))\nprint(scaler.fit(X))\ny = (scaler.transform(X))\nprint(y)","a3247afe":"test_ = test.pivot_table(\n    index='review_profilename',\n    columns='beer_beerid',\n    values='review_overall'\n)","19599f9d":"# Finding total non-NaN value\ntotal_non_nan = np.count_nonzero(~np.isnan(y))","95dc6c32":"rmse = (sum(sum((test_ - y )**2))\/total_non_nan)**0.5\nprint(rmse)","09d65931":"#Using Item Similarity\ntest_beer_features = test.pivot_table(\n    index='review_profilename',\n    columns='beer_beerid',\n    values='review_overall'\n).T\n\nmean = np.nanmean(test_beer_features, axis=1)\ntest_df_subtracted = (test_beer_features.T-mean).T\n\ntest_item_correlation = 1 - pairwise_distances(test_df_subtracted.fillna(0), metric='cosine')\ntest_item_correlation[np.isnan(test_item_correlation)] = 0\ntest_item_correlation[test_item_correlation<0]=0","0605893b":"test_item_correlation.shape","88f859a5":"test_beer_features.shape","8d7208a9":"test_item_predicted_ratings = (np.dot(test_item_correlation, test_beer_features.fillna(0))).T\ntest_item_final_rating = np.multiply(test_item_predicted_ratings,dummy_test)\ntest_item_final_rating.head()","7022b2a0":"test_ = test.pivot_table(\n    index='review_profilename',\n    columns='beer_beerid',\n    values='review_overall'\n)","7da3d349":"from sklearn.preprocessing import MinMaxScaler\nfrom numpy import *\n\nX  = test_item_final_rating.copy() \nX = X[X>0]\n\nscaler = MinMaxScaler(feature_range=(1, 5))\nprint(scaler.fit(X))\ny = (scaler.transform(X))\n\n\ntest_ = test.pivot_table(\n    index='review_profilename',\n    columns='beer_beerid',\n    values='review_overall'\n)\n\n# Finding total non-NaN value\ntotal_non_nan = np.count_nonzero(~np.isnan(y))","78f04a92":"rmse = (sum(sum((test_ - y )**2))\/total_non_nan)**0.5\nprint(rmse)","304035af":"#Top 5 beer recommendations to Cokes using User Collaborative Filtering Model\nuser_final_rating.loc['cokes',:].sort_values(ascending=False)[0:5]","ae907f57":"#Top 5 beer recommendations to genog using User Collaborative Filtering Model\nuser_final_rating.loc['genog',:].sort_values(ascending=False)[0:5]","36f87e9d":"#Top 5 beer recommendations to giblet using User Collaborative Filtering Model\nuser_final_rating.loc['giblet',:].sort_values(ascending=False)[0:5]","80f9dee1":"#Top 5 beer recommendations to Cokes using Item Collaborative Filtering Model\nitem_final_rating.loc['cokes',:].sort_values(ascending=False)[0:5]","e2a6ffe1":"#Top 5 beer recommendations to genog using Item Collaborative Filtering Model\nitem_final_rating.loc['genog',:].sort_values(ascending=False)[0:5]","d924a692":"#Top 5 beer recommendations to giblet using Item Collaborative Filtering Model\nitem_final_rating.loc['giblet',:].sort_values(ascending=False)[0:5]","45efeb1a":"#Here, not removing the NaN values and calculating the mean only for the beers rated by the user","a652c400":"\n\nTaking the transpose of the rating matrix to normalize the rating around the mean for different beer id. In the user based similarity, we had taken mean for each user intead of each beer","3765bf3b":"\n\nWe will create another copy of item_correlation and set the diagonal elements to 0, as they are correlations of the beers with itself.","4c3e1a9c":"Doing prediction for the beers rated by the user","35e34abb":"Normalising the beer rating for each beer","8e14e524":"#Finding cosine similarity","41bdc7cc":"Finding RMSE","e6cd66ec":"Now we will follow dummy train-test analogy as studied in Recommendation systems module--\n\nLets first Copy train and test dataset\n\nThese dataset further will be used for prediction and evaluation.\n\nDummy train will be used later for prediction of the beers which has not been rated by the user. To ignore the beers rated by the user, we will mark it as 0 during prediction. The beers not rated by user is marked as 1 for prediction.\nDummy test will be used for evaluation. To evaluate, we will only make prediction on the beers rated by the user. So, this is marked as 1. This is just opposite of dummy_train","7b14bed2":"#As per problem to filter N for only Beer wise reviews we will remove records for users who have given less than 30 reviews.\n\n#we will also remove the users  who have given less than 30 reviews","1a3a961f":"\nItem Based Similarity\nUsing Correlation","258566e0":"# Recommendation Models","b2f7daea":"#There are more beerids having very less no of reviews.","9d4557c7":"Building user-based and item-based models.","93b22ddc":"we are doing the prediction for the users which are positively related with other users, \nand not the users which are negatively related as \nwe are interested in the users which are more similar to the current users. \nSo, ignoring the correlation for values less than 0.","91cd4022":"Determine how similar the first 10 users are to each other and visualise it.","d60935ab":"# User Similarity Matrix","cb08b3f2":"df_subtracted1.head()","e6ded0c2":"You are the sales manager for \"BeerMart\", an online beer store in the United States. You want to build a recommendation system (collaborative) for your store, where customers will be recommended the beer that they are most likely to buy. You collect data about the ratings that the customers have given in the past","d25f74dd":"\n\nAdjacent pairs (gestyr,bboelens), (jushoppy2beer, Rio), (bboelens, Mississipping) and so on were correlated as per user similarity matrix, corresponding heat map above.","c1f868e8":"* user_predicted_ratings = np.dot(user_correlation, beer_features.fillna(0))\nuser_predicted_ratings","56ed54cb":"\nThe average beer ratings","24a5dc4a":"Filtering the rating only for the movies not rated by the user for recommendation","dfb6d674":"Filtering the correlation only for which the value is greater than 0. (Positively correlated)","be35de65":"# Prediction","7ca7fa87":"# Prediction","fbc71c5e":"The average number of ratings given by the users\u00b6","6135dfba":"item_correlation","d46bca8f":"unique values of ratings","a9b9291e":"Calculating the RMSE for only the movies rated by user. For RMSE, normalising the rating to (1,5) range.","b32b6f3f":"\n\nWe will create another copy of user_correlation and set the diagonal elements to 0, as they are correlations of the users with itself.","928e1fac":"\n\nheat map for comparing the ratings for Beers that they have rated m","69ba3ee2":"Data preparation\nChoose only those beers that have at least N number of reviews.\n\n    Figure out an appropriate value of N using EDA; this may not have one correct answer, but you should not choose beers that have an extremely low number of ratings.\n\nData exploration\n\n    What are the unique values of ratings?\n\n    Visualise the rating values and notice:\n\n        The average beer ratings\n\n        The average user ratings\n\n        The average number of ratings given to the beers\n\n        The average number of ratings given by the users\n\nRecommendation Models\n\n    Divide your data into training and testing dataset.\n\n    Build user-based and item-based models.\n    Determine how similar the first 10 users are to each other and visualise it.\n    Compute and visualise the similarity between the first 10 beers.\n\n    Compare the performance of the two models using test data and suggest the one that should be deployed.\n\n     Give the names of the top 5 beers that you would recommend to the users 'cokes','genog' and 'giblet' using both the models.","584ca52a":"# Problem Statement","cd03b07a":"Give the names of the top 5 beers that you would recommend to the users 'cokes', 'genog' and 'giblet' using both the models.","c34279dc":"# Data preparation","299dae9e":"Using User Similarity","fc46c316":"Since we are interested only in the beers not rated by the user, we will ignore the beers rated by the user by making it zero.","5d8d99ca":"\n\nFinding the cosine similarity. Note that since the data is normalised, both the cosine metric and correlation metric will give the same value.","cb33d3bb":"\n\nAgain my assumption here is that by first 10 beers it is meant that first 10 pairs of beers with highest correlations. Similar to users, we will find the same for beers and plot heat map.","e77c9e7a":"# Data exploration","818ec900":"# Using Cosine Similarity","39481b43":"Compare the performance of the two models using test data and suggest the one that should be deployed.","6d59ec0e":"The average number of ratings given to the beers","270e4937":"\n\nRating predicted by the user (for beers rated as well as not rated) is the weighted sum of correlation with the beer rating (as present in the rating dataset)","8e4ede72":"\n4 .Compute and visualise the similarity between the first 10 beers","b5db8371":"\nThe average user ratings","282b882b":"Evaluations on test data","e9d3e351":"#Normalising the rating of the beer for each user aroung 0 mean","4855fdd9":"#splitting dataset into test and train set","4e34a3f8":"#Choose only those beers that have at least N number of reviews.","1871b2ef":"RMSE for User Based Collaborative Filtering on test data : 1.7250379412127204\nRMSE for Item Based Collaborative Filtering on test data : 2.184570092719688\nSo the User Based Collaborative Filtering has performed better here.\nSo the model which should be deployed would be User Based Collaborative Filtering.\u00b6"}}