{"cell_type":{"45c9d100":"code","787eb053":"code","46d4b835":"code","9771dbf3":"code","aae41f5b":"code","a4e9697e":"code","fc6906e3":"code","0df4a9c0":"code","dd281a3a":"code","28a91b3e":"code","2e49aa4e":"code","3428aa98":"code","ef2a7a21":"code","38fe3373":"code","75077aaf":"code","ccac4117":"code","d74671a3":"code","c8bc8d00":"code","1a3f7a0a":"code","cc949285":"code","9028cac5":"markdown","f5009053":"markdown","b3e12360":"markdown","887d300f":"markdown","028997f8":"markdown","f752a9d9":"markdown","733732d7":"markdown","a0cae054":"markdown","3642aad5":"markdown","aab90c33":"markdown","8c2edff9":"markdown","e653b65c":"markdown","0c694202":"markdown","3aeb5e8a":"markdown","ce24aed0":"markdown","ed445e6b":"markdown","8e4fe9fb":"markdown","388b08e7":"markdown","2649750d":"markdown","b6fb9a58":"markdown"},"source":{"45c9d100":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","787eb053":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense","46d4b835":"dataset = pd.read_csv('..\/input\/hypothyroid.csv')\ndataset.head()","9771dbf3":"data_copy = dataset.copy(deep = True)\ndata_copy.replace(to_replace='?', inplace=True, value=np.NaN)\nprint(data_copy.isnull().sum())","aae41f5b":"from sklearn.preprocessing import LabelEncoder\nencoder = LabelEncoder()\ndata_copy['Unnamed: 0'] = encoder.fit_transform(data_copy['Unnamed: 0'])\ndata_copy['Sex'] = data_copy['Sex'].replace({'M':0, 'F':1})\ndata_copy = data_copy.replace(to_replace={'f':0,'t':1, 'y':1, 'n':0})\nprint(data_copy.head())","a4e9697e":"# Columns with dtype as 'object'\ncols = data_copy.columns[data_copy.dtypes.eq('object')]\n# Convert to numeric values\ndata_copy[cols] = data_copy[cols].apply(pd.to_numeric, errors='coerce')\ndata_copy.info()","fc6906e3":"p = data_copy.hist(figsize = (20,20))","0df4a9c0":"data_copy['Age'].fillna(data_copy['Age'].mean(), inplace = True)\ndata_copy['Sex'].fillna(0, inplace = True)\ndata_copy['TSH'].fillna(data_copy['TSH'].mean(), inplace = True)\ndata_copy['T3'].fillna(data_copy['T3'].median(), inplace = True)\ndata_copy['TT4'].fillna(data_copy['TT4'].median(), inplace = True)\ndata_copy['FTI'].fillna(data_copy['FTI'].median(), inplace = True)\ndata_copy['T4U'].fillna(data_copy['T4U'].mean(), inplace = True)\ndata_copy['TBG'].fillna(data_copy['TBG'].mean(), inplace = True)","dd281a3a":"p = data_copy.hist(figsize = (20,20))","28a91b3e":"data_copy.isnull().sum()","2e49aa4e":"X = data_copy.iloc[:,1:]\nY = data_copy.iloc[:, 0]\nprint(X.shape, Y.shape)","3428aa98":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=42)\nprint(X_train.shape, Y_train.shape)","ef2a7a21":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","38fe3373":"import pickle\nwith open('scaler.obj', 'wb') as scaler_file:\n    pickle.dump(scaler, scaler_file)","75077aaf":"model = Sequential()\nmodel.add(Dense(64, kernel_initializer='uniform', input_dim=25, activation='relu'))\nmodel.add(Dense(1, kernel_initializer='uniform', activation='sigmoid'))","ccac4117":"model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])","d74671a3":"history = model.fit(X_train, Y_train, epochs=50, validation_split=0.2, batch_size=40,  verbose=2)","c8bc8d00":"scores = model.evaluate(X_test, Y_test)\nprint(\"%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))","1a3f7a0a":"import matplotlib.pyplot as plt\n\n# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","cc949285":"model.save('model.h5')","9028cac5":"#### Load dataset from csv using pandas","f5009053":"#### Now, compile the model with 'adam' optimizer and loss function as 'binary_crossentropy'","b3e12360":"#### Here, we separate the features and target attributes into X and Y respectively","887d300f":"#### We now scale the train and test data using sklearn's StandardScaler class","028997f8":"To load the object back from file, we can use scaler = pickle.load(scaler_file)","f752a9d9":"#### Now, we split the dataset into train and test data. I have specified test_size as 20% and also randomness factor","733732d7":"#### We can now plot training and validation losses using matplotlib and visualize that the losses have converged at a very good rate","a0cae054":"#### Convert dtype='object' to 'int64' or 'float64' to view the statistics later","3642aad5":"#### I am saving scaler object to file so that it can later used to scale the test data for the saved model","aab90c33":"#### Now again check the number of NaN values for each column","8c2edff9":"#### Visualize the imputed data","e653b65c":"#### From the statistics plotted above, we can then replace the NaN values with appropriate values","0c694202":"#### We now replace '?' values in dataset with NaN values so that it becomes easy to count them","3aeb5e8a":"#### We now save the trained model","ce24aed0":"#### Now, as the model is trained, we can evaluate it on test data. Yay! We got a very good accuracy of 98%","ed445e6b":"#### We call fit() on training data with validation split=0.2 for 50 iterations","8e4fe9fb":"#### Here, now we define a sequential model with one hidden layer and one output layer. Here, input_dim=25 as we have 25 features","388b08e7":"#### Import keras to our build classifier for Hypothyroid data","2649750d":"#### Then replace\/encode categorical values using sklearn's LabelEncoder() class or panda's replace() method","b6fb9a58":"#### Plot the statistics column wise to visualize the patterns or trends in data"}}