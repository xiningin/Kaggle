{"cell_type":{"10305fd1":"code","71d58ccf":"code","75e6bc0d":"code","9f9e3448":"code","11f79b5e":"code","f25345e7":"code","c70aacae":"code","514cfeda":"code","991082b5":"code","b3401bab":"code","fb52c15e":"code","8cf9691f":"code","0cf89847":"code","09a4d785":"code","270b91bd":"code","50b9c01a":"code","a1afad57":"code","a3c34d35":"code","a064de35":"code","e9806795":"code","dfdefc70":"code","d54d445d":"markdown","664f812d":"markdown","5d2a8dd4":"markdown","2d929326":"markdown","55a88b9a":"markdown","a82e28f4":"markdown","f2126cf3":"markdown","8f1a7d58":"markdown"},"source":{"10305fd1":"import numpy as np\nimport pandas as pd\nfrom jinja2 import Template\nfrom IPython.display import HTML","71d58ccf":"!pip install squarify","75e6bc0d":"!pip install plotly_express","9f9e3448":"import datetime\nimport requests\nimport warnings\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport matplotlib.dates as mdates\nimport seaborn as sns\nimport squarify\nimport plotly.offline as py\nimport plotly_express as px\n\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import train_test_split\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\n\nfrom IPython.display import Image\nwarnings.filterwarnings('ignore')\n%matplotlib inline","11f79b5e":"\n\n# FETCH\nbase_url = 'https:\/\/raw.githubusercontent.com\/pratapvardhan\/notebooks\/master\/covid19\/'\npaths = {\n    'mapping': base_url + 'mapping_countries.csv',\n    'overview': base_url + 'overview.tpl'\n}\n\ndef get_mappings(url):\n    df = pd.read_csv(url)\n    return {\n        'df': df,\n        'replace.country': dict(df.dropna(subset=['Name']).set_index('Country')['Name']),\n        'map.continent': dict(df.set_index('Name')['Continent'])\n    }\n\nmapping = get_mappings(paths['mapping'])\n\ndef get_template(path):\n    from urllib.parse import urlparse\n    if bool(urlparse(path).netloc):\n        from urllib.request import urlopen\n        return urlopen(path).read().decode('utf8')\n    return open(path).read()\n\ndef get_frame(name):\n    url = (\n        'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/'\n        f'csse_covid_19_time_series\/time_series_covid19_{name}_global.csv')\n    df = pd.read_csv(url)\n    # rename countries\n    df['Country\/Region'] = df['Country\/Region'].replace(mapping['replace.country'])\n    return df\n\ndef get_dates(df):\n    dt_cols = df.columns[~df.columns.isin(['Province\/State', 'Country\/Region', 'Lat', 'Long'])]\n    LAST_DATE_I = -1\n    # sometimes last column may be empty, then go backwards\n    for i in range(-1, -len(dt_cols), -1):\n        if not df[dt_cols[i]].fillna(0).eq(0).all():\n            LAST_DATE_I = i\n            break\n    return LAST_DATE_I, dt_cols","f25345e7":"\nCOL_REGION = 'Country\/Region'\n# Confirmed, Recovered, Deaths\ndf = get_frame('confirmed')\n# dft_: timeseries, dfc_: today country agg\ndft_cases = df\ndft_deaths = get_frame('deaths')\ndft_recovered = get_frame('recovered')\nLAST_DATE_I, dt_cols = get_dates(df)\n\ndt_today = dt_cols[LAST_DATE_I]\ndt_5ago = dt_cols[LAST_DATE_I-5]\n\n\ndfc_cases = dft_cases.groupby(COL_REGION)[dt_today].sum()\ndfc_deaths = dft_deaths.groupby(COL_REGION)[dt_today].sum()\ndfp_cases = dft_cases.groupby(COL_REGION)[dt_5ago].sum()\ndfp_deaths = dft_deaths.groupby(COL_REGION)[dt_5ago].sum()","c70aacae":"\ndf_table = (pd.DataFrame(dict(Cases=dfc_cases, Deaths=dfc_deaths, PCases=dfp_cases, PDeaths=dfp_deaths))\n             .sort_values(by=['Cases', 'Deaths'], ascending=[False, False])\n             .reset_index())\ndf_table.rename(columns={'index': 'Country\/Region'}, inplace=True)\nfor c in 'Cases, Deaths'.split(', '):\n    df_table[f'{c} (+)'] = (df_table[c] - df_table[f'P{c}']).clip(0)  # DATA BUG\ndf_table['Fatality Rate'] = (100 * df_table['Deaths'] \/ df_table['Cases']).round(1)\ndf_table['Continent'] = df_table['Country\/Region'].map(mapping['map.continent'])\ndf_table.head(20)","514cfeda":"\n#delete problematic countries from table\ndf_table = df_table[~df_table['Country\/Region'].isin(['Cape Verde', 'Cruise Ship', 'Kosovo'])]","991082b5":"\n# world, china, europe, us\nmetrics = ['Cases', 'Deaths', 'Cases (+)', 'Deaths (+)']\ns_china = df_table[df_table['Country\/Region'].eq('China')][metrics].sum().add_prefix('China ')\ns_us = df_table[df_table['Country\/Region'].eq('US')][metrics].sum().add_prefix('US ')\ns_eu = df_table[df_table['Continent'].eq('Europe')][metrics].sum().add_prefix('EU ')\nsummary = {'updated': pd.to_datetime(dt_today), 'since': pd.to_datetime(dt_5ago)}\nsummary = {**summary, **df_table[metrics].sum(), **s_china, **s_us, **s_eu}\nsummary","b3401bab":"\ndft_ct_cases = dft_cases.groupby(COL_REGION)[dt_cols].sum()\ndft_ct_new_cases = dft_ct_cases.diff(axis=1).fillna(0).astype(int)\ndft_ct_new_cases.head(28)","fb52c15e":"hotspots = ['China','Germany','Iran','Italy','Spain','US','Korea, South','France','Turkey','United Kingdom','India']\ndates = list(confirmed_df.columns[4:])\ndates = list(pd.to_datetime(dates))\ndates_india = dates[8:]\n\ndf1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country\/Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\nglobal_confirmed = {}\nglobal_deaths = {}\nglobal_recovered = {}\nglobal_active= {}\n\nfor country in hotspots:\n    k =df1[df1['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_confirmed[country] = k.values.tolist()[0]\n\n    k =df2[df2['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_deaths[country] = k.values.tolist()[0]\n\n    k =df3[df3['Country\/Region'] == country].loc[:,'1\/30\/20':]\n    global_recovered[country] = k.values.tolist()[0]\n    \nfor country in hotspots:\n    k = list(map(int.__sub__, global_confirmed[country], global_deaths[country]))\n    global_active[country] = list(map(int.__sub__, k, global_recovered[country]))\n    \nfig = plt.figure(figsize= (15,15))\nplt.suptitle('Active, Recovered, Deaths in Hotspot Countries and India as of May 15',fontsize = 20,y=1.0)\n#plt.legend()\nk=0\nfor i in range(1,12):\n    ax = fig.add_subplot(6,2,i)\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\n    ax.bar(dates_india,global_active[hotspots[k]],color = 'green',alpha = 0.6,label = 'Active');\n    ax.bar(dates_india,global_recovered[hotspots[k]],color='grey',label = 'Recovered');\n    ax.bar(dates_india,global_deaths[hotspots[k]],color='red',label = 'Death');   \n    plt.title(hotspots[k])\n    handles, labels = ax.get_legend_handles_labels()\n    fig.legend(handles, labels, loc='upper left')\n    k=k+1\n\nplt.tight_layout(pad=3.0)","8cf9691f":"\ntemplate = Template(get_template(paths['overview']))\nhtml = template.render(\n    D=summary, table=df_table,  # REMOVE .head(20) to see all values\n    newcases=dft_ct_new_cases.loc[:, dt_cols[LAST_DATE_I-50]:dt_cols[LAST_DATE_I]],\n    np=np, pd=pd, enumerate=enumerate)\nHTML(f'<div>{html}<\/div>')","0cf89847":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_confirmed_global.csv')","09a4d785":"deaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_deaths_global.csv')","270b91bd":"recovered_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_covid19_recovered_global.csv')","50b9c01a":"latest_data = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/04-04-2020.csv')\n\nindia_covid_19 = pd.read_csv('..\/input\/covid19-in-india\/covid_19_india.csv')\nstate_testing = pd.read_csv('..\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\npopulation = pd.read_csv('..\/input\/covid19-in-india\/population_india_census2011.csv')\nindia_covid_19['Date'] = pd.to_datetime(india_covid_19['Date'],dayfirst = True)\nstate_testing['Date'] = pd.to_datetime(state_testing['Date'])","a1afad57":"dates = list(confirmed_df.columns[4:])\ndates = list(pd.to_datetime(dates))\ndates_india = dates[8:]","a3c34d35":"df1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country\/Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\nk = df1[df1['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_confirmed = k.values.tolist()[0] \n\nk = df2[df2['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_deaths = k.values.tolist()[0] \n\nk = df3[df3['Country\/Region']=='India'].loc[:,'1\/30\/20':]\nindia_recovered = k.values.tolist()[0] \n\nplt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 11)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Total Confirmed, Active, Death in India\" , fontsize = 20)\n\nax1 = plt.plot_date(y= india_confirmed,x= dates_india,label = 'Confirmed',linestyle ='-',color = 'b')\nax2 = plt.plot_date(y= india_recovered,x= dates_india,label = 'Recovered',linestyle ='-',color = 'g')\nax3 = plt.plot_date(y= india_deaths,x= dates_india,label = 'Death',linestyle ='-',color = 'r')\nplt.legend();","a064de35":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nimport statsmodels.api as sm","e9806795":"df1 = confirmed_df.groupby('Country\/Region').sum().reset_index()\ndf2 = deaths_df.groupby('Country\/Region').sum().reset_index()\ndf3 = recovered_df.groupby('Country\/Region').sum().reset_index()\n\nk =df1[df1['Country\/Region']=='India'].loc[:,'6\/10\/20':]\nindia_confirmed = k.values.tolist()[0] \n\ngrowth_diff = []\n\nfor i in range(1,len(india_confirmed)):\n    growth_diff.append(india_confirmed[i] \/ india_confirmed[i-1])\n\ngrowth_factor = sum(growth_diff)\/len(growth_diff)\nprint('Average growth factor',growth_factor)","dfdefc70":"prediction_dates = []\n\nstart_date = dates_india[len(dates_india) - 1]\nfor i in range(15):\n    date = start_date + datetime.timedelta(days=1)\n    prediction_dates.append(date)\n    start_date = date\nprevious_day_cases = global_confirmed['India'][len(dates_india) - 1]\npredicted_cases = []\n\nfor i in range(15):\n    predicted_value = previous_day_cases *  growth_factor\n    predicted_cases.append(predicted_value)\n    previous_day_cases = predicted_value\n\nplt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 11)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Predicted Values for the next 15 Days\" , fontsize = 20)\nax1 = plt.plot_date(y= predicted_cases,x= prediction_dates,linestyle ='-',color = 'c')","d54d445d":"# COVID-19 Live Forecasting\n> Tracking coronavirus total cases, deaths and new cases by countries.","664f812d":"prediction in next 15 days","5d2a8dd4":"## Forcasting Plot in Latest dates \n\n* this plot shows the new real time caes statistics in the following countries.\n* As we see India stands at 5th position with with 2,97,583 cases.","2d929326":"Time Series Forecasting for the perticular dates","55a88b9a":"Avg Growth Rate","a82e28f4":"____","f2126cf3":"##Prediction In India\n___","8f1a7d58":"___\n\n## India Covid-19 Pandemic"}}