{"cell_type":{"d1622907":"code","feeedbfb":"code","1daff05a":"code","30b8f1d9":"code","d6f257b9":"code","526317b4":"code","82c2560f":"code","86226ff7":"code","ce9b34b2":"code","1c3987b7":"code","379de679":"code","c4df4cd4":"code","a1c18da6":"code","b12d2d1b":"code","e391dfa8":"code","49f28265":"code","a831276a":"code","047244a4":"code","d8e0ffd8":"code","aeabaf3e":"code","ab18d363":"code","4aece33a":"code","e78bf73b":"code","b8136e51":"code","4f50fe9d":"code","d7757877":"code","2b43327e":"code","30ab2aa7":"code","47d3b58a":"code","97316cc2":"code","a3e60125":"code","b220e60c":"code","35c875c6":"code","98255621":"code","6b0d2b72":"code","24ad46b7":"markdown","e6620a7d":"markdown","34b26816":"markdown","ad9468d7":"markdown","72c75e02":"markdown","1152f800":"markdown","a2bb1148":"markdown","1061df36":"markdown","1f60c1c4":"markdown","8cf80448":"markdown"},"source":{"d1622907":"import pandas as pd\nimport numpy as np\nfrom sympy import *\nimport seaborn as sns\nimport matplotlib.pyplot as plt","feeedbfb":"path = {'train': '\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv', 'test':'\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv'}\ndata = pd.read_csv(path['train'])\ntest_data = pd.read_csv(path['test'])","1daff05a":"data.SalePrice.describe()","30b8f1d9":"sns.boxplot(data.SalePrice.values)\nplt.title(\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 - SalePrice\\n\", fontsize=15)\nplt.xlabel('\u0426\u0435\u043d\u0430')\nplt.ylabel(\"\u041a\u043e\u043b-\u0441\u0442\u0432\u043e\")\nplt.show();","d6f257b9":"gr_liv_area_data = pd.concat([data['SalePrice'], data['GrLivArea']], axis=1)\ngr_liv_area_data.plot.scatter(x='GrLivArea', y='SalePrice', ylim=(0,800_000))","526317b4":"total_bsmtSF = pd.concat([data.SalePrice, data.TotalBsmtSF], axis=1)\ntotal_bsmtSF.plot.scatter(x='TotalBsmtSF', y='SalePrice', ylim=(0,800_000))","82c2560f":"overallQual = pd.concat([data.SalePrice, data.OverallQual], axis=1)","86226ff7":"f, ax = plt.subplots(figsize=(14,8))\nfig = sns.boxplot(x=\"OverallQual\", y='SalePrice', data=overallQual)\nfig.axis(ymin=0, ymax=800_000)","ce9b34b2":"corrmat = data.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","1c3987b7":"k = 9 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\nf, ax = plt.subplots(figsize=(14, 10))\nsns.heatmap(data[cols].corr(), vmax=.8, square=True);","379de679":"cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars']\nsns.pairplot(data[cols], size = 4);","c4df4cd4":"total = data.isnull().sum()\ntotal","a1c18da6":"percent = (total\/ data.isnull().count()).sort_values(ascending=False)\npercent","b12d2d1b":"missing_data = pd.concat([total.sort_values(ascending=False), percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","e391dfa8":"x = data['GrLivArea']\n\ny = data['SalePrice']","49f28265":"def feature_scaling(data):\n    data_ = (data - data.mean()) \/ data.std()\n    return np.c_[np.ones(data_.shape[0]), data_]","a831276a":"x = feature_scaling(x)","047244a4":"x.shape ","d8e0ffd8":"class LinearRegression:\n    \n    \"\"\"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\"\"\"\n    \n    def predict(self, X):\n        return np.dot(X, self._W)\n\n    \n    def loss(self, y_prediction, y):\n        return sum((y_prediction - y)**2) \/ len(y)\n   \n\n    def _step_gradient_descent(self, X, y, prediction, step_learn):\n        error = prediction - y\n        self._W -= step_learn * 2 * np.dot(X.T, error) \/ len(X)\n\n        \n    def fit(self, X, y, iterations = 100_000, step_learn = .01):\n        self._W = np.zeros(X.shape[1])\n        self._cost_history = []\n        self._w_history = [self._W]\n        \n        for i in range(iterations):\n            \n            prediction = self.predict(X)\n            cost = self.loss(prediction, y)\n            self._cost_history.append(cost)\n            self._step_gradient_descent(X, y, prediction, step_learn)\n            self._w_history.append(self._W.copy())\n        return \"=> \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u0448\u043b\u043e \u0443\u0441\u043f\u0435\u0448\u043d\u043e <=\"    ","aeabaf3e":"simple_regression = LinearRegression()\nsimple_regression.fit(x, y , iterations=2000, step_learn=0.01)","ab18d363":"simple_regression._W","4aece33a":"plt.title('Cost Function J')\nplt.xlabel('No. of iterations')\nplt.ylabel('Cost')\nplt.plot(simple_regression._cost_history)\nplt.show()","e78bf73b":"simple_regression._cost_history[0]","b8136e51":"simple_regression.predict([x[0]]) - data.SalePrice[0]","4f50fe9d":"x_m = data[['OverallQual', 'GrLivArea', 'GarageCars']]\nx_m = feature_scaling(x_m)","d7757877":"multivariable_regression = LinearRegression()\nmultivariable_regression.fit(x_m, y, iterations=2000, step_learn=0.01)","2b43327e":"multivariable_regression._W","30ab2aa7":"plt.title('Cost Function J')\nplt.xlabel('No. of iterations')\nplt.ylabel('Cost')\nplt.plot(multivariable_regression._cost_history)\nplt.show()","47d3b58a":"multivariable_regression._cost_history[-1]","97316cc2":"simple_regression._cost_history[-1]","a3e60125":"test_simple = test_data['GrLivArea']\ntest_multi =  test_data[['OverallQual', 'GrLivArea', 'GarageCars']]\ntest_simple = feature_scaling(test_simple)\ntest_multi = feature_scaling(test_multi)","b220e60c":"predictions_simple = simple_regression.predict(test_simple)\npredictions_simple","35c875c6":"predictions_multi = multivariable_regression.predict(test_multi)\npredictions_multi","98255621":"def save(feature, result:pd.DataFrame, name:np.ndarray) -> None:\n    output_multi = pd.DataFrame({'Id': feature.Id, 'SalePrice': result})\n    output_multi.to_csv(f'{name}_submission.csv', index=False)\n    print(\"=> Your submission was successfully saved! <=\")","6b0d2b72":"save(test_data, predictions_simple, 'Simple_regression')\nsave(test_data, predictions_multi, 'Multi_regression')","24ad46b7":"#  \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","e6620a7d":"# Feature scaling\n\nWe will do a little preprocessing to our data using the following formula (standardization):\n\n$$x'= \\frac{x - \\mu}{\\sigma}$$\n\u0413\u0434\u0435 \u00b5 - \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0441\u043e\u0432\u043e\u043a\u0443\u043f\u043d\u043e\u0441\u0442\u0438, \u0430 \u03c3 - \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435.","34b26816":"# \u0418\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445","ad9468d7":"# \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438","72c75e02":"# \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","1152f800":"$$Y = bX + a$$\n\n![](https:\/\/spss-tutorials.com\/img\/simple-linear-regression-equation-linear-relation.png)\n","a2bb1148":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u043d\u0435\u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445","1061df36":"# \u041c\u043d\u043e\u0433\u043e\u043c\u0435\u0440\u043d\u0430\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f","1f60c1c4":"# \u0421\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432","8cf80448":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043f\u043e\u0442\u0435\u0440\u044c \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438"}}