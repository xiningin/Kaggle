{"cell_type":{"f32e87b0":"code","f752a3b6":"code","8aecb0c8":"code","528a3690":"code","72858a0a":"code","b67212e5":"code","11fc0929":"code","35d6bd29":"code","42f67c53":"code","f47d2026":"markdown","a77fbaad":"markdown","40ac5aa3":"markdown","c998ae6e":"markdown"},"source":{"f32e87b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f752a3b6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# \uc804\ucc98\ub9ac\nfrom sklearn.preprocessing import LabelEncoder\n\n# \ubaa8\ub378\nfrom xgboost import XGBRegressor, plot_importance\nfrom sklearn.ensemble import RandomForestRegressor\n\n# \uad50\ucc28\uac80\uc99d\nfrom sklearn.model_selection import cross_val_score\n\n# \ud3c9\uac00\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error","8aecb0c8":"# \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\nX_train = pd.read_csv(\"..\/input\/student-performance-data-set-competition-form\/X_train.csv\", index_col=0)\nX_test = pd.read_csv(\"..\/input\/student-performance-data-set-competition-form\/X_test.csv\", index_col=0)\ny_train = pd.read_csv(\"..\/input\/student-performance-data-set-competition-form\/y_train.csv\", index_col=0)\ny_test = pd.read_csv(\"..\/input\/student-performance-data-set-competition-form\/test_label\/y_test.csv\", index_col=0)","528a3690":"# \ubc94\uc8fc\uac12 \uccb4\ud06c\nfor df in [X_train, X_test]:\n    for col in df.select_dtypes(\"object\"):\n        print(col, df[col].unique())","72858a0a":"# \ub77c\ubca8 \uc778\ucf54\ub529\nle = LabelEncoder()\nfor col in X_train.select_dtypes(\"object\"):\n    le.fit(X_train[col].unique())\n    X_train[col] = le.transform(X_train[col])\n    X_test[col] = le.transform(X_test[col])","b67212e5":"# \ubaa8\ub378\ub9c1\nmodel1 = XGBRegressor(\n    n_estimators = 200,\n    max_depth = 4,\n    reg_lambda = 6, #6\n    reg_alpha = 19, #19\n    seed = 100,\n#     subsample = 0.9\n)\nmodel2 = RandomForestRegressor(\n    n_estimators = 200,\n    max_depth = 4,\n    random_state= 100,\n)\nscores = cross_val_score(model2, X_train, y_train[\"G3\"])\nprint(f\"RF 5-fold \uad50\ucc28\uac80\uc99d R^2 \ud3c9\uade0 = {np.mean(scores):.3f}\")\nscores = cross_val_score(model1, X_train, y_train[\"G3\"])\nprint(f\"XGB 5-fold \uad50\ucc28\uac80\uc99d R^2 \ud3c9\uade0 = {np.mean(scores):.3f}\")","11fc0929":"# \uacb0\uacfc\nmodel2.fit(X_train, y_train[\"G3\"])\npred_test = model2.predict(X_test)\nprint(\"Random Forest \ud14c\uc2a4\ud2b8\uc14b \uc608\uce21 \uacb0\uacfc\")\nprint(f\"RMSE = {np.sqrt(mean_squared_error(y_test, pred_test)):.1f}\")\nprint(f\"MAE = {mean_absolute_error(y_test, pred_test):.1f}\")\nr2 = r2_score(y_test, pred_test)\nprint(f\"R^2 = {r2:.2f}\")\nprint(f\"Adj R^2 = {1-(1 - r2)*(len(y_test)-1)\/(len(y_test)-X_test.shape[1]-1):.2f}\")\nmodel1.fit(X_train, y_train[\"G3\"])\npred_test = model1.predict(X_test)\nprint(\"-----------------------------------\")\nprint(\"XGBoost \ud14c\uc2a4\ud2b8\uc14b \uc608\uce21 \uacb0\uacfc\")\nprint(f\"RMSE = {np.sqrt(mean_squared_error(y_test, pred_test)):.1f}\")\nprint(f\"MAE = {mean_absolute_error(y_test, pred_test):.1f}\")\nr2 = r2_score(y_test, pred_test)\nprint(f\"R^2 = {r2:.2f}\")\nprint(f\"Adj R^2 = {1-(1 - r2)*(len(y_test)-1)\/(len(y_test)-X_test.shape[1]-1):.2f}\")","35d6bd29":"# \ubcc0\uc218 \uc911\uc694\ub3c4\nplot_importance(model1)\nplt.show()","42f67c53":"# \uacb0\uacfc \ub0b4\ubcf4\ub0b4\uae30\nresult = pd.DataFrame(pred_test, index=X_test.index, columns=[\"pred_G3\"])\nresult.to_csv(\"result.csv\")\nresult.head()","f47d2026":"# **\uacb0\uacfc**","a77fbaad":"# **\uc804\ucc98\ub9ac**","40ac5aa3":"# **\ub77c\uc774\ube0c\ub7ec\ub9ac**","c998ae6e":"# **\ubaa8\ub378\ub9c1**"}}