{"cell_type":{"3d9185bc":"code","7f6a9dd4":"code","b34ac005":"code","d1e65661":"code","cf68ddb6":"code","ef46e196":"code","9d8fcf66":"code","c5263b63":"code","bb8e1fbc":"code","f6c2dc6e":"code","dce1912e":"code","ee7633b9":"code","79b9c69e":"markdown","ea677afe":"markdown","40cfe1e2":"markdown","d9022123":"markdown","70bba6d8":"markdown"},"source":{"3d9185bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nimport random\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f6a9dd4":"vidObj = cv2.VideoCapture('\/kaggle\/input\/tiktok-trending-december-2020\/videos\/6875468410612993286.mp4')\n\ncount = 0\n\nwhile True: \n      \n    success, image = vidObj.read() \n    \n    if success:\n        cv2.imwrite(f\"frame{count}.jpg\", image) \n    else: \n        break\n        \n    count += 1","b34ac005":"#https:\/\/stackoverflow.com\/questions\/25359288\/how-to-know-total-number-of-frame-in-a-file-with-cv2-in-python\n\ncap = cv2.VideoCapture(\"\/kaggle\/input\/tiktok-trending-december-2020\/videos\/6875468410612993286.mp4\")\nlength = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\nprint( length )","d1e65661":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nfor i in range(0, 700, 100):  ## the original was 0,1300,100 The length is 702 above \n    img = mpimg.imread(f'.\/frame{i}.jpg')\n    imgplot = plt.imshow(img)\n    plt.show()","cf68ddb6":"face_cascade = cv2.CascadeClassifier('\/kaggle\/input\/haarcascade\/haarcascade_frontalface_default.xml')\neye_cascade = cv2.CascadeClassifier('\/kaggle\/input\/haarcascade\/haarcascade_eye.xml')\nsmile_cascade = cv2.CascadeClassifier('\/kaggle\/input\/haarcascade\/haarcascade_smile.xml')","ef46e196":"class FaceDetector():\n\n    def __init__(self,faceCascadePath):\n        self.faceCascade=cv2.CascadeClassifier(faceCascadePath)\n\n\n    def detect(self, image, scaleFactor=1.1,\n               minNeighbors=5,\n               minSize=(5,5)):\n        \n        #function return rectangle coordinates of faces for given image\n        rects=self.faceCascade.detectMultiScale(image,\n                                                scaleFactor=scaleFactor,\n                                                minNeighbors=minNeighbors,\n                                                minSize=minSize)\n        return rects","9d8fcf66":"#Frontal face of haar cascade loaded\nfrontal_cascade_path=\"\/kaggle\/input\/haarcascade\/haarcascade_frontalface_default.xml\"\n\n#Detector object created\nfd=FaceDetector(frontal_cascade_path)","c5263b63":"my_image=cv2.imread(\"frame500.jpg\") #Any below 702 the length of the frame ","bb8e1fbc":"def get_my_image():\n    return np.copy(my_image)\n\ndef show_image(image):\n    plt.figure(figsize=(18,15))\n    #Before showing image, bgr color order transformed to rgb order\n    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()","f6c2dc6e":"show_image(get_my_image())","dce1912e":"def detect_face(image, scaleFactor, minNeighbors, minSize):\n    # face will detected in gray image\n    image_gray=cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    faces=fd.detect(image_gray,\n                   scaleFactor=scaleFactor,\n                   minNeighbors=minNeighbors,\n                   minSize=minSize)\n\n    for x, y, w, h in faces:\n        #detected faces shown in color image\n        cv2.rectangle(image,(x,y),(x+w, y+h),(127, 255,0),3)\n\n    show_image(image)","ee7633b9":"detect_face(image=get_my_image(), \n            scaleFactor=1.9, \n            minNeighbors=3, \n            minSize=(30,30))","79b9c69e":"#I don't know why there is no Box detecting the face. Any clue?\n\n#What the heck are those skates\/sun glasses doing in a Library?","ea677afe":"#Check the length of the total number of Frame in a file with cv2 in python.\n To avoid Error with the next snippet  (for i in range) ","40cfe1e2":"#Code by Jeff Herman https:\/\/www.kaggle.com\/jth359\/video-to-frames-and-face-detection-using-opencv\/data","d9022123":"#Add Haarcascades Dataset","70bba6d8":"#Haarcascade by Sarthak1799  https:\/\/www.kaggle.com\/sarthak1799\/haarcascade "}}