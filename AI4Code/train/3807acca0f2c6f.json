{"cell_type":{"7abf24dd":"code","b01e9b89":"code","2667e21c":"code","ad794713":"code","0c5e28cd":"code","a687db8a":"code","e2a08eb7":"code","0352317d":"code","16778d1f":"code","6aedcb7f":"code","c62de573":"code","c43ac53c":"code","11c48126":"code","074da2d5":"code","5f99845b":"code","cd6980b7":"code","eadc2f4d":"code","3876e376":"code","b26fe3af":"code","d2aa4278":"code","a3f9ce92":"code","eaa680f2":"code","3e619068":"code","d0acad0f":"code","9b16b483":"code","7ea78e33":"code","195526f8":"code","611cb45c":"code","ef798a67":"code","7a2f8322":"code","dcb80a06":"code","72a63f20":"code","ea46d5d6":"code","982f4da4":"code","99d8f0a6":"code","2195d857":"code","6be45362":"markdown","f9223ee4":"markdown","07b16986":"markdown","a1f57743":"markdown","55ff00f6":"markdown","b8dd45f9":"markdown","e8289db3":"markdown","1a72edc9":"markdown","dad4fe56":"markdown","c4c02f86":"markdown","d2d00f70":"markdown","3fdae50d":"markdown"},"source":{"7abf24dd":"# importing the libraries\n\nimport pandas as pd\nimport sqlalchemy as db\nfrom sqlalchemy.orm import sessionmaker\nimport plotly.graph_objects as go\nimport plotly.express as px","b01e9b89":"# For the sake of simplicity, I'll create a sqlite table with all data\n# This will make it easier to access the data using SQLAlchemy\n\nengine = db.create_engine('sqlite:\/\/')\ndata_url = 'https:\/\/raw.githubusercontent.com\/Isabela192\/Pokedex\/master\/pokedex_data\/Pokemon_cleaned.csv'\ndf = pd.read_csv(data_url)\n\ndf.to_sql(name='pokemon', con=engine, if_exists='replace')\nSession=sessionmaker(bind=engine)\nsession=Session()\nmeta=db.MetaData(engine)\n\npokemon=db.Table('pokemon', meta, autoload=True)","2667e21c":"df.head(2)","ad794713":"def get_stats(gen):\n  columns = (pokemon.c.name, pokemon.c.type1, pokemon.c.type2, pokemon.c.hp, pokemon.c.attack, \n           pokemon.c.defense, pokemon.c.sp_attack, pokemon.c.sp_defense, pokemon.c.speed, \n           pokemon.c.abilities, pokemon.c.generation)\n  db_query = session.query(pokemon).with_entities(*columns)\n  db_query = db_query.filter(pokemon.c.generation==gen)\n  data = pd.read_sql(db_query.statement, engine)\n\n  return data\n\ndef get_weakness(types, gen):\n  columns = (pokemon.c.name, pokemon.c.type1, pokemon.c.type2,\n             pokemon.c.against_bug, pokemon.c.against_dark, \n             pokemon.c.against_dragon, pokemon.c.against_electric,\n             pokemon.c.against_fairy, pokemon.c.against_fight,\n             pokemon.c.against_fire, pokemon.c.against_flying,\n             pokemon.c.against_ghost, pokemon.c.against_grass,\n             pokemon.c.against_ground, pokemon.c.against_ice,\n             pokemon.c.against_normal, pokemon.c.against_poison,\n             pokemon.c.against_psychic, pokemon.c.against_rock,\n             pokemon.c.against_steel, pokemon.c.against_water)\n  db_query = session.query(pokemon).with_entities(*columns)\n  db_query = db_query.filter(pokemon.c.type1.in_(types))\n  db_query = db_query.filter(pokemon.c.generation == gen)\n  data = pd.read_sql(db_query.statement, engine)\n  return data\n\ndef xp_points(names):\n  columns = (pokemon.c.name, pokemon.c.experience_growth,\n              pokemon.c.type1, pokemon.c.type2, pokemon.c.base_happiness)\n  db_query = session.query(pokemon).with_entities(*columns)\n  db_query = db_query.filter(pokemon.c.name.in_(names))\n  data = pd.read_sql(db_query.statement, engine)\n\n  return data","0c5e28cd":"gen1 = get_stats(1)\ngen1.describe().style.background_gradient(cmap = 'Blues')","a687db8a":"corr_gen1 = gen1.drop('generation', axis=1)\ncorr_gen1.corr().style.background_gradient(cmap='Blues')","e2a08eb7":"px.scatter(gen1, x='attack', y='defense', color = 'type1', \n           hover_data=['name', 'sp_attack',  'sp_defense', 'speed'], \n           size = 'hp', color_discrete_sequence=px.colors.qualitative.Light24,\n           title = 'Attack x Defense by Type', size_max = 30)","0352317d":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=gen1['type1'], name='Type1'))\nfig.add_trace(go.Histogram(x=gen1['type2'], name='Type2'))\nfig.update_layout(barmode='overlay', title = 'Types 1\/2 Distribuition')\nfig.update_traces(opacity=0.75)","16778d1f":"gen2 = get_stats(2)\ngen2.describe().style.background_gradient(cmap = 'Blues')","6aedcb7f":"corr_gen2=gen2.drop('generation', axis=1)\ncorr_gen2.corr().style.background_gradient(cmap = 'Blues')","c62de573":"px.scatter(gen2, x='attack', y='defense', color = 'type1', hover_data=['name'], \n           size = 'hp', color_discrete_sequence=px.colors.qualitative.Light24,\n           title = 'Attack x Defense by Type', size_max = 30)","c43ac53c":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=gen2['type1'], name='Type1'))\nfig.add_trace(go.Histogram(x=gen2['type2'], name='Type2'))\nfig.update_layout(barmode='overlay', title = 'Types 1\/2 Distribuition')\nfig.update_traces(opacity=0.75)","11c48126":"gen3 = get_stats(3)\ngen3.describe().style.background_gradient(cmap = 'Blues')","074da2d5":"corr_gen3=gen3.drop('generation', axis=1)\ncorr_gen3.corr().style.background_gradient(cmap = 'Blues')","5f99845b":"px.scatter(gen3, x='attack', y='defense', color = 'type1', hover_data=['name'], \n           size = 'hp', color_discrete_sequence=px.colors.qualitative.Light24,\n           title = 'Attack x Defense by Type', size_max = 30)","cd6980b7":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=gen3['type1'], name='Type1'))\nfig.add_trace(go.Histogram(x=gen3['type2'], name='Type2'))\nfig.update_layout(barmode='overlay', title = 'Types 1\/2 Distribuition')\nfig.update_traces(opacity=0.75)","eadc2f4d":"gen4=get_stats(4)\ngen4.describe().style.background_gradient(cmap = 'Blues')","3876e376":"corr_gen4=gen4.drop('generation', axis=1)\ncorr_gen4.corr().style.background_gradient(cmap='Blues')","b26fe3af":"px.scatter(gen4, x='attack', y='defense', color = 'type1', hover_data=['name'], \n           size='hp', color_discrete_sequence=px.colors.qualitative.Light24,\n           title = 'Attack x Defense by Type', size_max=30)","d2aa4278":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=gen4['type1'], name='Type1'))\nfig.add_trace(go.Histogram(x=gen4['type2'], name='Type2'))\nfig.update_layout(barmode='overlay', title = 'Types 1\/2 Distribuition')\nfig.update_traces(opacity=0.75)","a3f9ce92":"gen5=get_stats(5)\ngen5.describe().style.background_gradient(cmap='Blues')","eaa680f2":"corr_gen5=gen5.drop('generation', axis=1)\ncorr_gen5.corr().style.background_gradient(cmap='Blues')","3e619068":"px.scatter(gen5, x='attack', y='defense', color = 'type1', hover_data=['name'], \n           size = 'hp', color_discrete_sequence=px.colors.qualitative.Light24,\n           title = 'Attack x Defense by Type', size_max=30)","d0acad0f":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=gen5['type1'], name='Type1'))\nfig.add_trace(go.Histogram(x=gen5['type2'], name='Type2'))\nfig.update_layout(barmode='overlay', title = 'Types 1\/2 Distribuition')\nfig.update_traces(opacity=0.75)","9b16b483":"gen6 = get_stats(6)\ngen6.describe().style.background_gradient(cmap='Blues')","7ea78e33":"corr_gen6 = gen6.drop('generation', axis=1)\ncorr_gen6.corr().style.background_gradient(cmap='Blues')","195526f8":"px.scatter(gen6, x='attack', y='defense', color = 'type1', hover_data=['name'], \n           size = 'hp',color_discrete_sequence=px.colors.qualitative.Light24,\n           title = 'Attack x Defense by Type', size_max = 30)","611cb45c":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=gen6['type1'], name='Type1'))\nfig.add_trace(go.Histogram(x=gen6['type2'], name='Type2'))\nfig.update_layout(barmode='overlay', title = 'Types 1\/2 Distribuition')\nfig.update_traces(opacity=0.75)","ef798a67":"gen7=get_stats(7)\ngen7.describe().style.background_gradient(cmap='Blues')","7a2f8322":"corr_gen7 = gen7.drop('generation', axis=1)\ncorr_gen7.corr().style.background_gradient(cmap='Blues')","dcb80a06":"px.scatter(gen7, x='attack', y='defense', color = 'type1', hover_data=['name'], \n           size = 'hp', color_discrete_sequence=px.colors.qualitative.Light24,\n           title = 'Attack x Defense by Type', size_max=30)","72a63f20":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=gen7['type1'], name='Type1'))\nfig.add_trace(go.Histogram(x=gen7['type2'], name='Type2'))\nfig.update_layout(barmode='overlay', title = 'Types 1\/2 Distribuition')\nfig.update_traces(opacity=0.75)","ea46d5d6":"columns = (pokemon.c.name, pokemon.c.type1, pokemon.c.type2, pokemon.c.hp, pokemon.c.attack, \n          pokemon.c.defense, pokemon.c.sp_attack, pokemon.c.sp_defense, pokemon.c.speed, \n          pokemon.c.abilities, pokemon.c.generation, pokemon.c.is_legendary)\nqry = session.query(pokemon).with_entities(*columns)\nqry = qry.filter(pokemon.c.is_legendary == 1)\nlgdr = pd.read_sql(qry.statement, engine)\nlgdr.describe().style.background_gradient(cmap='inferno')","982f4da4":"lgdr.loc[lgdr['type1'] =='water']","99d8f0a6":"px.scatter(lgdr, x='attack', y='defense', color = 'type1', hover_data=['name'],\n           size = 'hp',color_discrete_sequence=px.colors.qualitative.Light24,\n           title = 'Attack x Defense by Type', size_max=30)","2195d857":"qry = session.query(pokemon).with_entities(pokemon.c.type1)\ntypes = pd.read_sql(qry.statement, engine)\npie_chart = types.value_counts().reset_index().rename(columns={'type1':'type', 0:'totals'})\npx.pie(pie_chart, names=pie_chart['type'], values=pie_chart['totals'], \n       color=pie_chart['type'], color_discrete_sequence=px.colors.qualitative.Light24,\n       title = 'Types Distribuition')","6be45362":"#4th Generation","f9223ee4":"# Checking the Legendaries","07b16986":"Let's take a look at the columns we have.\n","a1f57743":"# 3rd Generation","55ff00f6":"Let's also create a function that allows us to get the legendary pokemon\nWe can use that the legendary classification is a Boolean to take those data later. For now, we'll take a look at each generation individually.","b8dd45f9":"#7th Generation","e8289db3":"#5th Generation","1a72edc9":"#6th Generation","dad4fe56":"# 1st Generation (The greatest one :3)\n\n","c4c02f86":"<a href=\"https:\/\/colab.research.google.com\/github\/Isabela192\/EDA_Notebooks\/blob\/master\/Pokemon_EDA.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","d2d00f70":"# 2nd Generation","3fdae50d":"# Exploring Pok\u00e9mon\n\nThis dataset was obtained from [Kaggle](https:\/\/www.kaggle.com\/rounakbanik\/pokemon) and conatins the data from 7 generations of Pok\u00e9mon:\n\n  - I: Red and Green (151 Pok\u00e9mon);\n  - II: Gold and Silver (100 Pok\u00e9mon);\n  - III: Ruby and Sapphire (135 Pok\u00e9mon);\n  - IV: Diamond and Pearl (107 Pok\u00e9mon **fairy type showed up here**);\n  - V: Black and White (156 Pok\u00e9mon);\n  - VI: X and Y (72 Pok\u00e9mon);\n  - VII: Sun and Moon (88 Pok\u00e9mon)\n\nWe'll be analyzing each generation individually. The goal is to practice some exploratory data analysis techniques and plot some data with Plotly.\n\nLet's Go!\n\n"}}