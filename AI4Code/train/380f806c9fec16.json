{"cell_type":{"755222b4":"code","21dbaace":"code","08819191":"code","a782c39d":"code","06bcac71":"code","41e43ff1":"code","e523df50":"code","f15676e4":"code","21e36e18":"code","36b68326":"code","af3d5fcc":"code","91eda010":"code","8aa11ff5":"code","346ed376":"code","f8854d31":"code","e79b2c74":"code","f2657d4f":"code","903c9ed6":"code","1ae3a9f5":"code","16bdbe8f":"code","9847d9b3":"code","c5dd4f28":"code","8ac2f547":"code","def1b90c":"code","39ee9fcd":"code","3d8f063b":"code","e87e9ea7":"code","bad5f375":"code","1916d47c":"code","33ca8a63":"markdown","50dae8c3":"markdown","2da24e21":"markdown","6f284ed4":"markdown","42065b82":"markdown","631b9c56":"markdown","4c0eba20":"markdown","9af1f255":"markdown","99c47ae3":"markdown","e40ffdb8":"markdown","08b09f86":"markdown"},"source":{"755222b4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\nimport datetime\nimport matplotlib\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","21dbaace":"data=pd.read_csv(\"..\/input\/bitflyerJPY_1-min_data_2017-07-04_to_2018-06-27.csv\")","08819191":"data.Timestamp = pd.to_datetime(data.Timestamp, unit='s') #timestamp to date converting","a782c39d":"data.info()","06bcac71":"data1.describe()","41e43ff1":"data.head(10)","e523df50":"data.corr()# show us to which column relation with other 1 is most","f15676e4":"f,ax=plt.subplots(figsize=(15,15))#managing the table size\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.2f',ax=ax)\nplt.show()","21e36e18":"data.columns","36b68326":"#line plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Low.plot(kind='line', color='g', label='Low',linewidth=2,alpha = 0.5,grid = True,linestyle = ':')\ndata.High.plot(color = 'r',label = 'High',linewidth=1, alpha = 0.5,grid = True,linestyle = ':')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","af3d5fcc":"#plt.scatter(data.Low,data.High)\n#data = data.rename(columns={'Volume_(Currency)': 'Volume_Currency'})\ndata.columns = data.columns.str.replace('\\(','')\ndata.columns = data.columns.str.replace('\\)','')\ndata.columns","91eda010":"# Scatter Plot \n# x = Volume_(BTC), y = High\ndata.plot(kind='scatter', x='Volume_Currency', y='Volume_BTC',alpha = 0.5,color = 'b')\n\nplt.xlabel('Volume_Currency')              # label = name of label\nplt.ylabel('Volume_BTC')\nplt.title('Volume_Currency - Volume_BTC Scatter Plot')   ","8aa11ff5":"# Histogram\n# bins = number of bar in figure\ndata.Volume_BTC.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","346ed376":"# 1 - Filtering Pandas data frame\nx = data['Volume_BTC']>400.5   \ndata[x]","f8854d31":"#we have two way to filtering \n#data[(data['Volume_BTC']>400.5) & (data['Weighted_Price']>1044666.710220)] \ndata[np.logical_and(data['Volume_BTC']>400.5, data['Weighted_Price']>1044666.710 )]","e79b2c74":"for i in data:\n    print('i is: ',data[i])\nprint('')","f2657d4f":"# For pandas we can achieve index and value \n#generate first ten rows ([0:10])\nfor index,value in data[['Low']][0:10].iterrows():\n    print(index,\" : \",value)","903c9ed6":"def tuble_ex():\n    \"\"\" return defined t tuble\"\"\"\n    t = (1,2,3)#i just learn accidentally when you write this: (1,2,a) and then print = 1 2 1\n    # but you want to print a and then  t = (1,2,'a')\n    return t\na,b,c = tuble_ex()# and then print = 1 2 1\nprint(a,b,c)","1ae3a9f5":"x=2\ndef f():\n    x=3\n    return x\nprint(x)\nprint (f()) #guess what?","16bdbe8f":"import builtins # How can we learn what is built in scope\ndir(builtins)","9847d9b3":"def f(a,b=1,c=2):\n    y=a+b+c\n    return y\nprint (f(5)) #this case b and c is default a is flexible and it is 5.\nprint(f(5,4,3))","c5dd4f28":"def f (*args):\n    for i in args:\n        print (i)\nf(1)\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    for key,value in kwargs.items():\n        print (key,\" \",value)\nf(country = 'spain', capital = 'madrid', population = 123456)","8ac2f547":"square=lambda x:x**2\nprint(square(4))\n\ntp=lambda a,b,c:a+b+c\nprint (tp(1,2,3))","def1b90c":"num_lst=[1,2,3]\ny=map(lambda x:x**2,num_lst)\nprint (list(y))","39ee9fcd":"name=\"istanbul\"\nit=iter(name)\nprint (next(it))#print first char\nprint(*it)#print remaining\nprint (it)","3d8f063b":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz=zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","e87e9ea7":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","bad5f375":"num1 = [1,2,3]\nnum2=[i+1 for i in num1]\nprint (num2)","1916d47c":"# Conditionals on iterable\nnm1 = [5,10,15]\nnm2 =[i**2 if i==10 else i-5 if i<7 else i+5 for i in nm1]\nprint (nm2)","33ca8a63":"SCOPE\u00b6\nscope is an like a variable the other programming language \n\nglobal: defined main body in script\nlocal: defined in a function\nbuilt in scope: names in predefined built in scope (used by programming language for the future, module,language etc.) module such as print, len \n\nLets make some basic examples","50dae8c3":"**LIST COMPREHENS\u0130ON**\n    \n    One of the most important topic of this kernel \n    We use list comprehension for data analysis often.\n    less code more work\n    \n    How it works: Logically loops or conditions are on the end, first thing (result or condition) on the left the others is right. \n    ","2da24e21":"**LAMBDA FUNCTION**","6f284ed4":"Default argument example: \ndef f(a, b=1):\n   \"\"\" b = 1 is default argument\"\"\"  a is need to be filled\n   \nFlexible argument example: \ndef f(*args):\n \"\"\" *args can be one or more\"\"\"\n\ndef f(** kwargs) \n \"\"\" **kwargs is a dictionary\"\"\"\n","42065b82":"**ANONYMOUS FUNCTION**\n\nLike lambda function but it can take more than one arguments.\n\n    map(func,seq) : applies a function to all the items in a list","631b9c56":"USER DEFINED FUNCTION\ntuble: sequence of immutable python objects. \ncant modify values \ntuble uses paranthesis like tuble = (1,2,3) \nunpack tuble into several variables like a,b,c = tuble","4c0eba20":"* Line plot is better when x axis is time.\n* Scatter is better when there is correlation between two variables\n* Histogram is better when we need to see distribution of numerical data.\n* Customization: Colors,labels,thickness of line, title, opacity, grid, figsize, ticks of axis and linestyle","9af1f255":"**Iterators**","99c47ae3":"**data.rename(columns={'Volume_(Currency)': 'Volume_Currency'})\nrenaming column due to avoid the error ,'(' paranthesis sometimes give an error.****","e40ffdb8":"**ZIP example**","08b09f86":"Using heatmap is actually coloring the chart. \n* annot =True --is writng value of cell\n* linewidths=.5  --line widths\n* fmt= '.2f'  -- is dealing with '.' after 0.\n* ax=ax -- is x axis\nand some good stuff about heatmap \nhttps:\/\/matplotlib.org\/gallery\/images_contours_and_fields\/image_annotated_heatmap.html"}}