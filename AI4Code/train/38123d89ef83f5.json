{"cell_type":{"2c063f55":"code","5d53ff4f":"code","4e7bd99d":"code","2b13bd95":"code","0c2a22af":"code","e01e7843":"code","d4f49cde":"code","bf04d961":"code","a1bb2a67":"code","a54d992b":"code","7929ee4d":"code","47081b50":"code","9832517a":"code","7d78c73f":"code","71f74cd0":"code","13eaa2da":"code","3dd83b62":"code","fee35942":"markdown","3d3a4184":"markdown","a7f13a98":"markdown","5843bdfe":"markdown","b0d32ec7":"markdown","1776e816":"markdown","8c17405e":"markdown","b3b1aaf9":"markdown","ca94d484":"markdown","a90155b0":"markdown","5a7ca133":"markdown","004820e9":"markdown","dba6f54e":"markdown","4ffd5dc7":"markdown","fec80167":"markdown","f0bab1b4":"markdown","0bac9cac":"markdown","67dc42fa":"markdown"},"source":{"2c063f55":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as tkr\nimport matplotlib.dates as mdates\nimport seaborn as sns\nimport statsmodels.api as sm\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n%matplotlib inline\nsns.set_theme(style='darkgrid', palette='deep')\n\n# number format function for Matplotlib\nnumber_format = lambda x, p: format(int(x), ',') # adding a , seprator to thousands\n\n# read latest data\ndf = pd.read_csv('https:\/\/covid.ourworldindata.org\/data\/owid-covid-data.csv', parse_dates=['date'])\n\n# copy non-country data (e.g. World, continent) to a new df\ndf_aggregate = df[df['continent'].isna()]\n\n# remove non-country data from current df\ndf = df[df['continent'].notna()]","5d53ff4f":"# plot total cases and deaths globally\nwith sns.axes_style(\"white\"):\n    fig, ax = plt.subplots(nrows=1, ncols=1, sharex=True, figsize=(12, 5))\n\n    # plot total cases world-wide\n    total_cases = df_aggregate.pivot(index='date', columns='location', values='total_cases')\n    total_cases['World'].plot(ax=ax, kind='line', ylabel='Total Cases')\n    ax.yaxis.set_major_formatter(tkr.FuncFormatter(number_format))\n    ax.set_title('World-wide total Cases and Deaths')\n    ax.xaxis.label.set_visible(False)\n\n    # plot total deaths world-wide\n    ax_ext = ax.twinx()\n    total_deaths = df_aggregate.pivot(index='date', columns='location', values='total_deaths')\n    total_deaths['World'].plot(ax=ax_ext, kind='line', style='r--', grid=False)\n    ax_ext.tick_params(axis='y', labelcolor='tab:red')\n    ax_ext.yaxis.set_major_formatter(tkr.FuncFormatter(number_format))\n    ax_ext.set_ylabel( ylabel='Total Deaths', color='tab:red')","4e7bd99d":"# list of continents\ncontinents = ['Africa', 'Asia', 'Europe', 'North America', 'Oceania', 'South America']\n\n# create plot figure\nfig, (ax1, ax2) = plt.subplots(nrows=2, ncols=1, sharex=True, figsize=(12, 10))\n\n# plot new cases by continent\nnew_cases = df_aggregate.pivot(index='date', columns='location', values='new_cases_smoothed')\nnew_cases[continents].plot(ax=ax1, kind='area', ylabel='New Cases')\nax1.yaxis.set_major_formatter(tkr.FuncFormatter(number_format))\n\n# plot new deaths by continent\nnew_deaths = df_aggregate.pivot(index='date', columns='location', values='new_deaths_smoothed')\nnew_deaths[new_deaths < 0] = 0 # removing negative death record in Oceania\nnew_deaths[continents].plot(ax=ax2, kind='area', ylabel='New Deaths', xlabel='Date')\nax2.yaxis.set_major_formatter(tkr.FuncFormatter(number_format))\nax2.xaxis.label.set_visible(False)\n\n# plots format\nfig.suptitle('New Cases and Deaths by Continents', size=16)\nplt.show()","2b13bd95":"# recent period (in days)\nperiod = 28\n\n# end date of period = most recent date - 1 day\n# adjusted due to delay between countries' data\nend = df['date'].max() - pd.to_timedelta(1, unit='D') \n\n# start date of recent period \nstart = end - pd.to_timedelta(period, unit='D')\nprint('For recent period between: {:%d-%b-%Y} to {:%d-%b-%Y}'.format(start, end))\n\n# create df with data from recent period (defined above)\ndf_recent = df.loc[(df['date'] >= start) & (df['date'] <= end), :]\n\n# average by Country \ndf_avg = df_recent.groupby('location').mean()\n\n# rank by Country's average new cases and new cases rate\ndf_rank = df_avg[['new_cases', 'new_cases_per_million']].rank(method='min', ascending=False)\n\n# countries with highest avg new case in recent period\ntop10_new_cases = df_rank[df_rank['new_cases'] <= 10].index\n\n# countries with highest avg new case rate (new case per million) in recent period\ntop10_new_cases_rate = df_rank[df_rank['new_cases_per_million'] <= 10].index\n\n# countries with highest avg new case rate and at bottom 50% of GDP per Capita\ngdp_median = df_avg['gdp_per_capita'].median()\ndf_rank_low_gdp = df_avg.loc[df_avg['gdp_per_capita'] <= gdp_median, \n                     ['new_cases', 'new_cases_per_million']].rank(method='min', ascending=False)\ntop10_new_cases_rate_low_gdp = df_rank_low_gdp[df_rank_low_gdp['new_cases_per_million'] <= 10].index","0c2a22af":"# plot countries with highest avg new case in recent period\nfig, ax = plt.subplots(figsize=(12, 5))\nsns.lineplot(data=df[df['location'].isin(top10_new_cases)], x='date', y='new_cases_smoothed', hue='location', ax=ax)\nax.yaxis.set_major_formatter(tkr.FuncFormatter(number_format))\nax.xaxis.set_major_formatter(mdates.DateFormatter('%b-%y'))\nax.xaxis.label.set_visible(False)\nax.set_title('Countries with highest avg. number of infections (new cases) - last {} days'.format(period))\nplt.show()","e01e7843":"# plot countries with highest avg new case per million in recent period\nfig, ax = plt.subplots(figsize=(12, 5))\nsns.lineplot(data=df[df['location'].isin(top10_new_cases_rate)], x='date', y='new_cases_smoothed_per_million', hue='location', ax=ax)\nax.yaxis.set_major_formatter(tkr.FuncFormatter(number_format))\nax.xaxis.set_major_formatter(mdates.DateFormatter('%b-%y'))\nax.xaxis.label.set_visible(False)\nax.set_title('Countries with highest avg. infection rate (new case per million) - last {} days'.format(period))\nplt.show()","d4f49cde":"# plot low GDP countries (bottom 50%) with highest avg new case per million in recent period\nfig, ax = plt.subplots(figsize=(12, 5))\nsns.lineplot(data=df[df['location'].isin(top10_new_cases_rate_low_gdp)], x='date', y='new_cases_smoothed_per_million', hue='location', ax=ax)\nax.yaxis.set_major_formatter(tkr.FuncFormatter(number_format))\nax.xaxis.set_major_formatter(mdates.DateFormatter('%b-%y'))\nax.xaxis.label.set_visible(False)\nax.set_title('Countries with bottom 50% GDP and highest avg. infection rate (new case per million) - last {} days'.format(period))\nplt.show()","bf04d961":"# countries with reported vaccinations as of most recent data point\nend_vac = end - pd.to_timedelta(1, unit='D') # data for vaccination date is typically up to 2 days delay\ndf_vac = df[(df['date'] == end_vac) & (df['total_vaccinations_per_hundred'] > 0)]\ndf_vac = df_vac.sort_values('total_vaccinations_per_hundred', ascending=False) # sort by vaccination rate\n\n# print summary\ncountry_count = df['location'].nunique()\ncountry_vac_count = df_vac['location'].nunique()\n\nprint('{} out of {} countries world wide reported vaccination progress - Date: {:%d-%b-%y}'.format(country_vac_count, country_count, end_vac))\nprint('-'*85)\nprint('Top 10 with highest vaccination rate:')\nprint(df_vac[['location', 'total_vaccinations_per_hundred']].head(10))","a1bb2a67":"# all historical data for countries with reported vaccinations\ndf_vac_all = df[df['location'].isin(df_vac['location'])]\n\n# average of all data by dates\ndf_vac_avg = df_vac_all.groupby('date').mean()\n\n# plot avg. infection rate against vaccination\nwith sns.axes_style(\"white\"):\n    fig, ax = plt.subplots(figsize=(12, 5))\n    ax.set_title('Average Infection Rate & Vaccincation Rate - for Countries reported vaccination progress')\n    \n    # plot new cases (smoothed) per million\n    sns.lineplot(data=df_vac_avg, x='date', y='new_cases_smoothed_per_million', ax=ax)\n    ax.xaxis.label.set_visible(False)\n\n    # plot vaccination rate per hundred on the same figure\n    ax_ext = ax.twinx()\n    sns.lineplot(data=df_vac_avg, x='date', y='total_vaccinations_per_hundred', ax=ax_ext, color='forestgreen', linestyle='dotted')\n    ax_ext.tick_params(axis='y', labelcolor='forestgreen')\n    ax_ext.set_ylabel( ylabel='Vaccination per hundred', color='forestgreen')\n    ax_ext.xaxis.set_major_formatter(mdates.DateFormatter('%b-%y'))","a54d992b":"# plot avg. death rate against vannication rate\nwith sns.axes_style(\"white\"):\n    fig, ax = plt.subplots(figsize=(12, 5))\n    ax.set_title('Average Death Rate & Vaccincation Rate - for Countries reported vaccination progress')\n    \n    # plot new deaths (smoothed) per million\n    sns.lineplot(data=df_vac_avg, x='date', y='new_deaths_smoothed_per_million', ax=ax, color='tab:red')\n    ax.xaxis.label.set_visible(False)\n\n    # plot vaccination rate per hundred on the same figure\n    ax_ext = ax.twinx()\n    sns.lineplot(data=df_vac_avg, x='date', y='total_vaccinations_per_hundred', ax=ax_ext, color='forestgreen', linestyle='dotted')\n    ax_ext.tick_params(axis='y', labelcolor='forestgreen')\n    ax_ext.set_ylabel( ylabel='Vaccination per hundred', color='forestgreen')\n    ax_ext.xaxis.set_major_formatter(mdates.DateFormatter('%b-%y'))","7929ee4d":"# Function plotting infection rate, death rate and vaccination rate for a country\ndef plot_country(country, title=''):\n    # plot infection rate against vannication rate\n    with sns.axes_style(\"white\"):\n        fig, (ax1, ax2) = plt.subplots(figsize=(20, 5), nrows=1, ncols=2)\n        fig.suptitle('{} - {}'.format(country, title), fontsize=16)\n\n        # plot new deaths (smoothed) per million\n        sns.lineplot(data=df[df['location'] == country], x='date', y='new_cases_smoothed_per_million', ax=ax1)\n        ax1.xaxis.label.set_visible(False)\n        ax1.set_title('Infection Rate & Vaccincation Rate')\n\n        # plot vaccination rate per hundred on the same ax\n        ax1_ext = ax1.twinx()\n        sns.lineplot(data=df[df['location'] == country], x='date', y='total_vaccinations_per_hundred', ax=ax1_ext, color='forestgreen', linestyle='dotted')\n        ax1_ext.tick_params(axis='y', labelcolor='forestgreen')\n        ax1_ext.set_ylabel( ylabel='Vaccination per hundred', color='forestgreen')\n        ax1_ext.xaxis.set_major_formatter(mdates.DateFormatter('%b-%y'))\n\n        # plot new deaths (smoothed) per million\n        sns.lineplot(data=df[df['location'] == country], x='date', y='new_deaths_smoothed_per_million', ax=ax2, color='tab:red')\n        ax2.xaxis.label.set_visible(False)\n        ax2.set_title('Death Rate & Vaccincation Rate')\n\n        # plot vaccination rate per hundred on the same ax\n        ax2_ext = ax2.twinx()\n        sns.lineplot(data=df[df['location'] == country], x='date', y='total_vaccinations_per_hundred', ax=ax2_ext, color='forestgreen', linestyle='dotted')\n        ax2_ext.tick_params(axis='y', labelcolor='forestgreen')\n        ax2_ext.set_ylabel( ylabel='Vaccination per hundred', color='forestgreen')\n        ax2_ext.xaxis.set_major_formatter(mdates.DateFormatter('%b-%y'))\n\n    \n# plot example countries\n# Israel: country with highest vaccination rate\n# United States: country with highest vaccination doses\nplot_country('Israel', 'country with highest vaccination rate')\nplot_country('United States', 'country with highest vaccination doses')","47081b50":"# Select source data for analysis and model\n\n# list of columns to be selected from main dataframe\nvariables = ['date', \n             'location',\n             'continent', \n             'new_cases_per_million', \n             'total_vaccinations_per_hundred',\n             'stringency_index',\n             'population_density', \n             'median_age', \n             'aged_65_older', \n             'gdp_per_capita', \n             'diabetes_prevalence', \n             'life_expectancy', \n             'human_development_index']\n\n# select & clean data\ndata = df[variables]\ndata = data.fillna(value={'new_cases_per_million': 0, \n                          'total_vaccinations_per_hundred': 0, \n                          'stringency_index': 0\n                         })\ndata = data[data['new_cases_per_million'] >= 0] # remove negative new cases?\ndata = data.dropna()","9832517a":"# create expanding data frame for adding new features\ndata_ex = data\n\n# add new features (avg new cases previous x days)\nrolling_days = [7, 14, 28]\n\nfor day in rolling_days:\n    new_cases_rolling = data.groupby('location')['new_cases_per_million'].rolling(day).mean()\n    new_cases_rolling = new_cases_rolling.reset_index(level='location')\n    col_name = 'avg_new_case_{}days'.format(day)\n    data_ex[col_name] = new_cases_rolling['new_cases_per_million']\n\n# one-hot encode categorical data in continent\ndata_ex = pd.concat((data_ex, pd.get_dummies(data['continent'], drop_first=True)), axis=1)\n\n# clean N\/A record from rolling days calculations\ndata_ex = data_ex.dropna()\n\n# check N\/A\ndata_ex.isna().sum().sum()","7d78c73f":"# create list of variables for ML model\ntarget = ['new_cases_per_million'] # infection rate\nnum_features = data_ex.iloc[:, 4:-5].columns # numeric variables\ncat_features = data_ex.iloc[:, -5:].columns # categorical variables\n\n# plot infection rate (target) against predictors\nfig, axs = plt.subplots(nrows=3, ncols=4, figsize=(20,15), sharey=True)\n\nfor i in range(len(num_features)):\n    row = i \/\/ 4\n    col = i % 4\n    sns.scatterplot(data=data_ex, x=num_features[i], y='new_cases_per_million', hue='continent', ax=axs[row, col])\n    axs[row, col].legend(loc='upper left')\n\nfig.suptitle('Infection Rate (new cases per million) vs Country Variables', y=1.0)\nfig.tight_layout()","71f74cd0":"# OLS Regression fit for Infection Rate vs all features\nall_features = list(num_features) + list(cat_features)\nX = data_ex[all_features]\ny = data_ex[target]\n\nX = sm.add_constant(X)\nresults = sm.OLS(y, X).fit()\nprint(results.summary())","13eaa2da":"# Simple linear model\n# select features\nX_important_features = X[['total_vaccinations_per_hundred', 'avg_new_case_7days', 'avg_new_case_14days', 'avg_new_case_28days']]\n\n# create train and test data\nX_train, X_test, y_train, y_test = train_test_split(X_important_features, y, test_size=0.25, random_state=1)\n\n# model fit & prediction\nregr = linear_model.LinearRegression()\nregr.fit(X_train, y_train)\ny_pred = regr.predict(X_test)\n\n\n# Linear model with all features plus their interactions\n# transform select features\nX_interactions = PolynomialFeatures(interaction_only=True).fit_transform(X)\n\n# create train and test data\nX_train, X_test, y_train, y_test = train_test_split(X_interactions, y, test_size=0.25, random_state=1)\n\n# model fit & prediction\nregr_interactions = linear_model.LinearRegression()\nregr_interactions.fit(X_train, y_train)\ny_pred_interactions = regr_interactions.predict(X_test)\n\n\n# print out models scores\nprint('Model scores:')\nprint('-'*80) # line\n\n# mean square error\nmse = mean_squared_error(y_test, y_pred, squared=False)\nprint('Simple Linear Regression - Mean square error: {:.2f}'.format(mse))\n\nmse_interactions = mean_squared_error(y_test, y_pred_interactions, squared=False)\nprint('Linear Regression with all variables and their interactions - Mean square error: {:.2f}'.format(mse_interactions))\n\nprint('-'*80) # line\n\n# R-square score\nr2 = r2_score(y_test, y_pred)\nprint('Simple Linear Regression - Coeff of determinant (R^2): {:.2f}'.format(r2))\n\nr2_interaction = r2_score(y_test, y_pred_interactions)\nprint('Linear Regression with all variables and their interactions - Coeff of determinant (R^2): {:.2f}'.format(r2_interaction))","3dd83b62":"coef = regr.coef_\nintercept = float(regr.intercept_)\nprint('Simple Linear Model:')\nprint(' Infection Rate = {:.2f}*Vaccine Rate + {:.2f}*Infection Rate past 7days + {:.2f}*Infection Rate past 14days + {:.2f}* Infection Rate past 28days + {:.2f}'\n      .format(coef[0, 1], coef[0, 1], coef[0, 2], coef[0, 3], intercept))","fee35942":"<a id=\"countries-stats\"><\/a>\n# Countries at risk - highest infection rates & new cases","3d3a4184":"* Formula for the Simple Linear Regression Model as below:","a7f13a98":"* The charts below show relationships between Covid-19 infection rates and all country specific variables\n* Based on observations, there aren't many obvious patterns between the variables - except for a few such as infection rates in previous periods.","5843bdfe":"* Similar to infection rate, death rate has also been trending down since the start of vaccination programs.","b0d32ec7":"<a id=\"vaccines-stats\"><\/a>\n# Effect of Covid-19 Vaccinations\n* Data seems to indicate possitive effectivess of vaccines - reducing both infection rates and death rates. ","1776e816":"<a id=\"global-stats\"><\/a>\n# Impacts of COVID-19 pandemic world-wide\nAs of early May 2021, more than **160 millions COVID-19 cases** have been reported, with more than **3 million deaths** world wide - making it one of the deadliest pandemic in history :( \n\nWith the rate of new infections continues to climb globally, please don't let your guard down! Continue to practice preventive measures where possible: *social distancing, wearing masks in public, washing hands* regularly - all will help. \n","8c17405e":"* The chart below shows less wealthy countries (bottom 50% GPD per capita) that are having highest infection rates recently.\n* Of those, countries with the highest recent infection rates are: Jordan, Cape Verde, Mongolia, Palestine, Georgia.","b3b1aaf9":"<a id=\"continent-stats\"><\/a>\n# New cases & deaths by Continents\n* Since the start of pandemic, **North America and Europe** have accounted for the majority of new Covid-19 cases and related deaths.\n* However, in recent months (since March 2021), **Asia** has accounted for most of new Covid-19 cases, by far.\n* **South America** has also reported signicant number of Covid-19 related deaths recently - at a similar level compared to Asia, despite having much lower number of cases.\n* Across all continents, number of new infections seem to peak at around 800,000 new cases per day recently - and number of deaths has peaked in Feb-2021, at around 14,000 per day. With vaccination programs starting around the world, hopefully the worst is now behind us.","ca94d484":"* The chart below shows top 10 countries with the highest infection rates (new cases per million) world-wide.\n* Some countries with the highest recent infection rates (> 1,000 per million) are: Seychelles, Maldives, Uruguay and Cyprus.","a90155b0":"* The chart below shows daily new cases for 10 countries with the highest new cases recently.\n* India, as covered in world-wide media, unfornately is dealing with a very difficult situations.The recent numbers of new cases daily has by far exceeded previous records :(","5a7ca133":"* Below compares 2 linear models - one is a simple linear model using only statistically significant predictors, the other is an expanded linear models utilising all country variables as well as the interactions between them.\n* Data is split by 80\/20 for training and testing the two models","004820e9":"* The chart below exammines some of the front runner in vaccination progress.\n* **Israel**: new cases and deaths has been trending down - as the country approaches fully vaccinated status, infection rates and death rates is approaching zero in recent days.\n* **United States**: new cases and deaths has also trended down significantly as vaccination takes up - however, it seems the country is still some way off full-vaccination and recent new cases rate still remains in the 100s range.","dba6f54e":"# Coronavirus (COVID-19) visualisation & modelling\n\n**The COVID-19 pandemic**, also known as the coronavirus pandemic, is an ongoing global pandemic of coronavirus disease 2019 (COVID-19) caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2). The virus was first identified in December 2019 in Wuhan, China.The pandemic has resulted in significant global social and economic disruption, and is one of the most deadliest pandemics in history. (*Source: Wikipedia*)\n\nThis notebook provides further visualisation of COVID-19 data and a workflow to construct simple ML model for predictions. Statistics related to the pandemic has been covered extensively, I aim to present a few different angles in this notebook\n\nMany thanks to the awesome team at https:\/\/ourworldindata.org\/ for this expanded dataset! \n\nI just recently set out to learn more about AI, ML and all that cool stuffs. This is my first public work at Kaggle - *any comments, tips on how I could improve the approach \/ codes would be super appreciated.*","4ffd5dc7":"* Below chart indicates that Covid-19 infection rate (new cases per million) has been trending down, as vaccination rate taking up.","fec80167":"* Below is results form a Least Square Regression fit - using Statmodels library.\n* Base on p-value, the features with significant statistical correlation with infection rates are: **vaccination rates and infections in previous periods**.\n* Suprisingly, factors such as Goverment responses (stringy_index), population density, median age don't seem to have a significant correlation with infection rates.","f0bab1b4":"# Contents of this notebook:\n* [Recap of pandemic impacts world-wide](#global-stats)\n* [Current trends by continents](#continent-stats)\n* [High risk countries - in the last 28 days](#countries-stats)\n* [Effectiveness of vaccination programs](#vaccines-stats)\n* [Infection rate analysis & modelling](#infection-rate-stats)","0bac9cac":"Given non-linearity relationships between Infection Rate and most variables, a non-linear non-parametric approach could potentially do a much better job at predicting here. Please feel free to share your thoughts.\n\nThanks all & stay safe.","67dc42fa":"<a id=\"infection-rate-stats\"><\/a>\n# Infection rates analysis and modelling\nThis section examines if\/how Covid-19 infection rate (measured by new cases per million) is effected by a number of country specific variables such as:\n* Country location\n* Vaccination rate\n* Stringecy index - Oxford COVID-19 Government Response Tracker, Blavatnik School of Government\n* Population density\n* Population median age\n* GDP per capita\n* Diabetes prevalence\n* Life expectancy\n* Human development index\n* Infections from previous periods (7, 14, 28 days)\n\nThis section also outlines approach for constructing a ML models to predict daily Covid-19 infection rates. I chose linear models here - for the simplicity, and ease of explaining relationship between the variables."}}