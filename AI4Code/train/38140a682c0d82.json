{"cell_type":{"378a3cb7":"code","0557b37a":"code","92a0458c":"code","f48e6a54":"code","50478ebf":"code","ff0cd9b6":"code","5d4d8800":"code","4bdd0c52":"code","a22787f5":"code","445fdbb4":"code","c9625fd4":"code","d49c45dc":"code","4520d90b":"code","5b99b835":"code","85093229":"code","a8818ad1":"code","bf23ebc9":"code","c6472366":"code","91c74544":"code","9d3ca1fc":"code","c7061eb2":"code","73c79ec6":"code","4c4a17ba":"code","60081864":"markdown","7e053333":"markdown","5910daed":"markdown","92a76da2":"markdown","6972b890":"markdown","933c8b6d":"markdown","61502ebe":"markdown","5c987e44":"markdown","2537591b":"markdown","df19849a":"markdown","12daa7d4":"markdown","80ceabc6":"markdown"},"source":{"378a3cb7":"import zipfile\nimport os\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nimport numpy as nps\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split","0557b37a":"with zipfile.ZipFile('..\/input\/dogs-vs-cats\/train.zip', 'r') as z :\n    z.extractall()","92a0458c":"filenames = os.listdir(\".\/train\")\ncategories = []\nfor image in filenames :\n    category = image.split('.')[0]\n    if category == 'dog' :\n        categories.append(1)\n    else :    \n        categories.append(0)","f48e6a54":"df = pd.DataFrame({'filename' : filenames, 'category' : categories})\ndf.head()","50478ebf":"df['category'].value_counts()","ff0cd9b6":"for i in range(10) :\n    sample = filenames[i+10]\n    image = tf.keras.preprocessing.image.load_img('.\/train\/' + sample)\n    plt.imshow(image)\n    plt.title('dog' if categories[i+10]==1 else 'cat')\n    plt.show()","5d4d8800":"#model \nmodel = keras.models.Sequential()\n\n##  Conv_1\nmodel.add(keras.layers.Conv2D(32, 3,input_shape = [128, 128, 3], activation = 'relu', padding = 'same'))\nmodel.add(keras.layers.BatchNormalization())\nmodel.add(keras.layers.MaxPool2D(2))\nmodel.add(keras.layers.Dropout(0.2))\n\n## Conv_2\nmodel.add(keras.layers.Conv2D(64, 3, activation = 'relu', padding = 'same'))\nmodel.add(keras.layers.BatchNormalization())\nmodel.add(keras.layers.MaxPool2D(2))\nmodel.add(keras.layers.Dropout(0.2))\n\n## Conv_3\nmodel.add(keras.layers.Conv2D(128, 3, activation = 'relu', padding = 'same'))\nmodel.add(keras.layers.BatchNormalization())\nmodel.add(keras.layers.MaxPool2D(2))\nmodel.add(keras.layers.Dropout(0.2))\n\n## Conv_4\nmodel.add(keras.layers.Conv2D(256, 3, activation = 'relu', padding = 'same'))\nmodel.add(keras.layers.BatchNormalization())\nmodel.add(keras.layers.MaxPool2D(2))\nmodel.add(keras.layers.Dropout(0.2))\n\n## Flatten\nmodel.add(keras.layers.Flatten())\n\n## fc_1\nmodel.add(keras.layers.Dense(1024, activation = 'relu'))\nmodel.add(keras.layers.Dropout(0.25))\n\n## fc_2\nmodel.add(keras.layers.Dense(2, activation = 'sigmoid'))\n\n## optimizer and loss\n#optimizer = keras.optimizers.RMSprop(lr = 0.01)\nmodel.compile(loss = 'categorical_crossentropy', optimizer = 'rmsprop', metrics = ['accuracy'])\n\nmodel.summary()","4bdd0c52":"earlystop = keras.callbacks.EarlyStopping(patience=10)\nlearning_rate_reduction = keras.callbacks.ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\ncallbacks = [earlystop, learning_rate_reduction]","a22787f5":"df['category'] = df['category'].map({0 : 'cat', 1 : 'dog'})","445fdbb4":"train_df, valid_df = train_test_split(df, test_size=0.2, random_state=42)\ntrain_df = train_df.reset_index(drop=True)\nvalid_df = valid_df.reset_index(drop=True)","c9625fd4":"total_train = train_df.shape[0]\ntotal_valid = valid_df.shape[0]\nbatch_size = 10","d49c45dc":"train_data = keras.preprocessing.image.ImageDataGenerator(rotation_range=20,\n                                                         rescale = 1.\/255,\n                                                         horizontal_flip=True)\ntrain_generator = train_data.flow_from_dataframe(train_df,\n                                                '.\/train\/',\n                                                x_col = 'filename',\n                                                y_col = 'category',\n                                                target_size=[128,128],\n                                                class_mode='categorical',\n                                                batch_size=batch_size)\n","4520d90b":"valid_data = keras.preprocessing.image.ImageDataGenerator(rescale = 1.\/255)\n                                                         \n                                                         \nvalid_generator = valid_data.flow_from_dataframe(valid_df,\n                                                '.\/train\/',\n                                                x_col = 'filename',\n                                                y_col = 'category',\n                                                target_size=[128,128],\n                                                class_mode='categorical',\n                                                batch_size=batch_size)\n","5b99b835":"epochs = 30\nhistory = model.fit_generator(\n    train_generator, \n    epochs=epochs,\n    validation_data=valid_generator,\n    validation_steps=total_valid\/\/batch_size,\n    steps_per_epoch=total_train\/\/batch_size,\n    callbacks=callbacks)\n","85093229":"model.save_weights(\"model.h5\")","a8818ad1":"import numpy as np\nplt.plot(history.history['loss'], color='b', label=\"Training loss\")\nplt.plot(history.history['val_loss'], color='r', label=\"validation loss\")\nplt.xticks(np.arange(1, epochs, 1))\nplt.yticks(np.arange(0, 1, 0.1))\nplt.legend()\nplt.title('Training Loss VS Validation Loss')\nplt.show()","bf23ebc9":"plt.plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nplt.plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nplt.xticks(np.arange(1, epochs, 1))\nplt.title('Training Accuracy VS Validation Accuracy')\nplt.legend()\nplt.show()","c6472366":"with zipfile.ZipFile('..\/input\/dogs-vs-cats\/test1.zip', 'r') as z :\n    z.extractall()","91c74544":"filenames = os.listdir(\".\/test1\")\ntest_df = pd.DataFrame({'filename' : filenames})    \nsamples = test_df.shape[0]","9d3ca1fc":"test_data = keras.preprocessing.image.ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_data.flow_from_dataframe(\n    test_df, \n    \".\/test1\/\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=[128,128],\n    batch_size=batch_size,\n    shuffle=False)","c7061eb2":"predict = model.predict_generator(test_generator, steps=np.ceil(samples\/batch_size))\n","73c79ec6":"test_df['category'] = np.argmax(predict, axis=-1)\ntest_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })","4c4a17ba":"submission_df = test_df.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","60081864":"1. Encoding labels","7e053333":"## Training Model ","5910daed":"## Show some images ","92a76da2":"2. Create Validation Set","6972b890":"## Saving Parameters","933c8b6d":"## Train Generator","61502ebe":"## Valid Generator","5c987e44":"## Create The Model ","2537591b":"## Prepaing Test Data","df19849a":"## Impots","12daa7d4":"## Get The Images","80ceabc6":"## Data Preparation\n"}}