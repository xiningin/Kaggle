{"cell_type":{"94b05090":"code","c9536400":"code","79570d40":"code","df46f903":"code","21593cbd":"code","e39fd037":"code","3bbd00dc":"code","9392d089":"code","060b92ea":"code","b9da3e04":"code","10bdfbb1":"code","25add3e9":"code","457cdf40":"code","9fb6841f":"code","194986a2":"code","005f00eb":"code","e55ce3a8":"code","3c6e4ebc":"code","40ac9817":"code","af62022f":"code","54ff60a0":"code","244b1bb5":"code","20fe2f68":"code","db611a45":"code","b028fe82":"code","da176da0":"code","f7e585c1":"code","2f5c3d11":"code","d610bf05":"code","6c61a0a0":"code","875cd463":"code","5319efed":"code","1feb1cf1":"code","a01e9aa0":"code","ed98a54f":"code","088246d4":"code","42db92fe":"code","c0348dd2":"code","89ddce00":"code","0cc03147":"code","87eef85b":"code","32e9f0d6":"code","f7b408fd":"code","90a757e3":"code","bcb0db32":"code","4093c5a0":"code","6de51796":"markdown","f4845cde":"markdown","e9839d4b":"markdown","79bb8fec":"markdown","aff21623":"markdown","9ac3518c":"markdown","4f95ac1d":"markdown","52923294":"markdown","3e979e1e":"markdown","32f747c6":"markdown","5077827b":"markdown","1450fdd9":"markdown","3c75a970":"markdown","534cc312":"markdown","ab6807ae":"markdown","5e55e9c5":"markdown","b35fb75c":"markdown","9b8ff6c1":"markdown","43637242":"markdown","c8bad38a":"markdown","dfb04114":"markdown","805ac581":"markdown","e344ba80":"markdown","9ed0bedf":"markdown","b3150524":"markdown","6f2afed2":"markdown","bf684b8d":"markdown","bb356dc3":"markdown","9712f797":"markdown"},"source":{"94b05090":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.metrics import accuracy_score, roc_curve\n\nimport warnings \nwarnings.filterwarnings(\"ignore\")","c9536400":"#read data\ndf= pd.read_csv(\"\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")","79570d40":"df.head()","df46f903":"# describe basic statistics of data\ndf.describe()","21593cbd":"# information about data frame\ndf.info()","e39fd037":"# missing value\ndf.isnull().sum()","3bbd00dc":"df.columns","9392d089":"df['sex'].value_counts().shape[0]","060b92ea":"# show unique values to decide whether categorical \nfor i in list(df.columns):\n    print(\"{} -- {}\".format(i, df[i].value_counts().shape[0]))","b9da3e04":"categorical_list=[\"sex\", \"cp\", \"fbs\", \"restecg\", \"exng\", \"slp\", \"caa\", \"thall\", \"output\"]","10bdfbb1":"df_categoric = df.loc[:, categorical_list]\nfor i in categorical_list:\n    plt.figure()\n    sns.countplot(x=i, data=df_categoric, hue=\"output\")\n    plt.title(i)","25add3e9":"numeric_list = [\"age\", \"trtbps\",\"chol\",\"thalachh\",\"oldpeak\",\"output\"]","457cdf40":"df_numeric= df.loc[:, numeric_list]\nsns.pairplot(df_numeric, hue=\"output\", diag_kind=\"kde\")\nplt.show()","9fb6841f":"scaler=StandardScaler()\nscaled_array = scaler.fit_transform(df[numeric_list[:-1]]) #except output","194986a2":"#pd.DataFrame(scaled_array).describe()","005f00eb":"df_dummy = pd.DataFrame(scaled_array, columns = numeric_list[:-1])\ndf_dummy.head()","e55ce3a8":"df_dummy = pd.concat([df_dummy, df.loc[:, \"output\"]], axis = 1)\ndf_dummy.head()","3c6e4ebc":"data_melted = pd.melt(df_dummy, id_vars = \"output\", var_name = \"features\", value_name = \"value\")\ndata_melted.head(20)","40ac9817":"# box plot\nplt.figure()\nsns.boxplot(x = \"features\", y = \"value\", hue = \"output\", data= data_melted)\nplt.show()","af62022f":"# swarm plot\nplt.figure()\nsns.swarmplot(x = \"features\", y = \"value\", hue = \"output\", data= data_melted)\nplt.show()","54ff60a0":"sns.catplot(x = \"exng\", y = \"age\", hue = \"output\", col = \"sex\", kind = \"swarm\", data = df)\nplt.show()","244b1bb5":"plt.figure(figsize = (15,10))\nsns.heatmap(df.corr(), annot = True, fmt = \".1f\", linewidths = .7)\nplt.show()","20fe2f68":"numeric_list = [\"age\", \"trtbps\",\"chol\",\"thalachh\",\"oldpeak\"]\ndf_numeric = df.loc[:, numeric_list]\ndf_numeric.head()","db611a45":"df.describe()","b028fe82":"# outlier detection\nfor i in numeric_list:\n    \n    # IQR\n    Q1 = np.percentile(df.loc[:, i],25)\n    Q3 = np.percentile(df.loc[:, i],75)\n    \n    IQR = Q3 - Q1\n    \n    print(\"Old shape: \", df.loc[:, i].shape)\n    \n    # upper bound\n    upper = np.where(df.loc[:, i] >= (Q3 +2.5*IQR))\n    \n    # lower bound\n    lower = np.where(df.loc[:, i] <= (Q1 - 2.5*IQR))\n    \n    print(\"{} -- {}\".format(upper, lower))\n    \n    try:\n        df.drop(upper[0], inplace = True)\n    except: print(\"KeyError: {} not found in axis\".format(upper[0]))\n    \n    try:\n        df.drop(lower[0], inplace = True)\n    except:  print(\"KeyError: {} not found in axis\".format(lower[0]))\n        \n    print(\"New shape: \", df.shape)","da176da0":"df1 = df.copy()","f7e585c1":"df1 = pd.get_dummies(df1, columns = categorical_list[:-1], drop_first = True)\ndf1.head()","2f5c3d11":"X = df1.drop([\"output\"], axis = 1)\ny = df1[[\"output\"]]","d610bf05":"scaler = StandardScaler()\nscaler","6c61a0a0":"X[numeric_list[:-1]] = scaler.fit_transform(X[numeric_list[:-1]])\nX.head()","875cd463":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 3)\nprint(\"X_train: {}\".format(X_train.shape))\nprint(\"X_test: {}\".format(X_test.shape))\nprint(\"y_train: {}\".format(y_train.shape))\nprint(\"y_test: {}\".format(y_test.shape))","5319efed":"logreg = LogisticRegression()\nlogreg","1feb1cf1":"# fitting = training\nlogreg.fit(X_train, y_train)","a01e9aa0":"# calculate probabilities\ny_pred_prob = logreg.predict_proba(X_test)\ny_pred_prob","ed98a54f":"y_pred = np.argmax(y_pred_prob, axis = 1)\ny_pred","088246d4":"dummy_ = pd.DataFrame(y_pred_prob)\ndummy_[\"y_pred\"] = y_pred\ndummy_.head()","42db92fe":"print(\"Test accuracy: {}\".format(accuracy_score(y_pred, y_test)))","c0348dd2":"# ROC Curve\n# In order to draw a ROC curve, the results must be probabilistic.\nfpr, tpr, thresholds = roc_curve(y_test, y_pred_prob[:,1])","89ddce00":"# plot curve\nplt.plot([0,1],[0,1],\"k--\")\nplt.plot(fpr, tpr, label = \"Logistic Regression\")\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.title(\"Logistic Regression ROC Curve\")\nplt.show()","0cc03147":"lr = LogisticRegression()\nlr","87eef85b":"penalty = [\"l1\", \"l2\"]\nparameters = {\"penalty\":penalty}","32e9f0d6":"lr_searcher = GridSearchCV(lr, parameters)","f7b408fd":"lr_searcher.fit(X_train, y_train)","90a757e3":"print(\"Best parameters: \",lr_searcher.best_params_)","bcb0db32":"y_pred = lr_searcher.predict(X_test)","4093c5a0":"print(\"Test accuracy: {}\".format(accuracy_score(y_pred, y_test)))","6de51796":"## Heart Attack Analysis & Prediction","f4845cde":"* We will find positive and negative correlated features and analyse their effect on output\n* If the correlation between two features is \"1\", the correlation between these two features is 100% in a positive way, if -1 then the correlation between these two features is 100% in a negative way, if 0 that means there is no correlation between these two features.","e9839d4b":"<a id=2><\/a>\n## Data Content\n* **Age:** Age of the patient\n* **Sex:** Sex of the patient\n* **exang:** exercise induced angina (1 = yes; 0 = no)\n* **ca:** number of major vessels (0-3)\n* **cp:** Chest Pain type chest pain type\n<ul>\n    <li> Value 1: typical angina\n    <li> Value 2: atypical angina\n    <li> Value 3: non-anginal pain\n    <li> Value 4: asymptomatic\n<\/ul>\n* **trtbps:** resting blood pressure (in mm Hg)\n* **chol:** cholestoral in mg\/dl fetched via BMI sensor\n* **fbs:** (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n* **rest_ecg:** resting electrocardiographic results\n<ul>\n   <li> Value 0: normal\n   <li> Value 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\n   <li> Value 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\n<\/ul>\n* **thalach:** maximum heart rate achieved\n* **target:** 0= less chance of heart attack 1= more chance of heart attack","79bb8fec":"<a id=17><\/a>\n## Logistic Regression","aff21623":"<a id=19><\/a>\n## Logistic Regression Hyperparameter Tuning","9ac3518c":"<a id=13><\/a>\n## Outlier Detection\n* Outliers can disrupt ML process.\n* ![image.png](attachment:9b64e05c-cf1f-445c-a4e1-dc900c2dc612.png)","4f95ac1d":"<a id=3><\/a>\n## Read and Analyse Data\n* In this section we read our dataset heart.csv","52923294":"<a id=14><\/a>\n## Modelling","3e979e1e":"![heart-attack.jpg](attachment:10920807-ee24-469e-a803-ba7109210d19.jpg)","32f747c6":"* With the help of Swarm Plot Analysis, we can see all the individuals that we cannot see individually in the box plot.","5077827b":"## Introduction\n* A heart attack, also called a myocardial infarction, happens when a part of the heart muscle doesn't get enough blood.\n* The more time that passes without treatment to restore blood flow, the greater the damage to the heart muscle.\n* Coronary artery disease (CAD) is the main cause of heart attack.","1450fdd9":"<a id=1><\/a>\n## Python Libraries\n* In this section, we import some python libraries","3c75a970":"<a id=8><\/a>\n## Standardization","534cc312":"<a id=18><\/a>\n## * Encoding Categorical Columns\n![image.png](attachment:788323e2-ee47-4a1f-a258-238373a618a0.png)","ab6807ae":"<a id=6><\/a>\n## Numeric Feature Analysis\n* Bivariate data analysis with scatter plot","5e55e9c5":"i.e. For the first line; 0.94 prob output is \"0\" and 0.057 output is \"1\"","b35fb75c":"<a id=10><\/a>\n## Swarm Plot Analysis","9b8ff6c1":"<a id=15><\/a>\n## Scaling","43637242":"<a id=6><\/a>\n## Categorical Feature Analysis","c8bad38a":"<a id=12><\/a>\n## Correlation Analysis","dfb04114":"<a id=9><\/a>\n## Box Plot Analysis","805ac581":"<a id=11><\/a>\n## Cat Plot Analysis","e344ba80":"<a id=16><\/a>\n## Train\/Test Split","9ed0bedf":"* Lets make a comment about above cat plot at right. For example if your \"exng\" is \"1\" and your sex is \"1\", then the output is \"0\". So the risk of heart attack is low. You can play with the parameters in the catplot then make better analysis.","b3150524":"## What will you learn from this project\n* EDA\n* Missing Value Analysis\n* Categoric and Numeric Features\n* Standardization\n* Box- Swarm - Cat - Correlation Plot Analysis\n* Outlier Detection\n* Modelling and Tuning Machine Learning Model","6f2afed2":"<a id=5><\/a>\n## Unique Value Analysis","bf684b8d":"## Analysis Content\n1. [Python Libraries](#1)\n2. [Data Content](#2)\n2. [Read and Analyse Data](#3)\n2. [Missing Value Analysis](#4)\n5. [Unique Value Analysis](#5)\n5. [Categorical Feature Analysis](#6)\n5. [Numeric Feature Analysis](#7)\n5. [Standardization](#8)\n5. [Box Plot Analysis](#9)\n5. [Swarm Plot Analysis](#10)\n5. [Cat Plot Analysis](#11)\n5. [Correlation Analysis](#12)\n5. [Outlier Detection](#13)\n5. [Modelling](#14)\n    1. [Encoding Categorical Columns](#18)\n    5. [Scaling](#15)\n    5. [Train\/Test Split](#16)\n    5. [Logistic Regression](#17)\n    5. [Logistic Regression Hyperparameter Tuning](#19)","bb356dc3":"* ROC Curve\n![image.png](attachment:f77302de-ed4e-4f4f-a0ca-3d024fbbe6b9.png)","9712f797":"<a id=4><\/a>\n## Missing Value Analysis"}}