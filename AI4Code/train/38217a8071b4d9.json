{"cell_type":{"fb00e230":"code","87bf7643":"code","9e567b19":"code","a0f7f30d":"code","18bc7ead":"code","61b6dbfe":"code","b080d417":"code","879321f3":"code","742003a0":"code","df70800c":"code","a8374551":"code","ecb2aa18":"code","57259938":"code","e779cdfb":"code","9b855900":"code","e2c701ac":"code","07f6253b":"code","a341b63c":"code","85be62df":"code","3cf85dd3":"code","e6ef164b":"markdown","46042a49":"markdown","067b5260":"markdown","5e7be8aa":"markdown","7ccec29e":"markdown","7edbbb9f":"markdown","6274fc5f":"markdown","c1cedc1c":"markdown","c5999731":"markdown","81cd920b":"markdown"},"source":{"fb00e230":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87bf7643":"#Import Libraries \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom sklearn.preprocessing import LabelBinarizer\n\n# Precision, recall, f1-score for all the classes\nfrom sklearn.metrics import classification_report, confusion_matrix\n\n#Image data gen for possible data augmentation\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n#Keras and relevant libraries for modeling \nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPool2D, Flatten, Dropout","9e567b19":"df_train = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_train\/sign_mnist_train.csv')\ndf_test = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_test\/sign_mnist_test.csv')","a0f7f30d":"#Checking out info \nprint(df_train.info())\n#Exploring data \ndf_train.head()","18bc7ead":"#Checking out null values\nprint(df_train.isnull().sum())","61b6dbfe":"#Reshaping\n# In this section you will have to add another dimension to the data\n# So, for example, if your array is (10000, 28, 28)\n# You will need to make it (10000, 28, 28, 1)\n\nY_train = df_train['label'].values\nY_test = df_test['label'].values\n\nX_train = df_train.drop([\"label\"],axis=1).values\nX_test = df_test.drop([\"label\"],axis=1).values\n\nprint(X_train.shape)\nprint(X_test.shape)\n\ntraining_images = X_train.reshape(-1,28,28,1)\ntesting_images = X_test.reshape(-1,28,28,1)\n\nprint(training_images.shape)\nprint(testing_images.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","b080d417":"#Normalizing \ntraining_images  = training_images \/ 255.0\ntesting_images = testing_images \/ 255.0\nprint(training_images.shape)\nprint(testing_images.shape)","879321f3":"f, ax = plt.subplots(2,4)\nf.set_size_inches(8,8)\n\nk = 0\nfor i in range(2):\n    for j in range(4):\n        ax[i,j].set_xlabel(chr(Y_test[k] + 65))\n        ax[i,j].imshow(testing_images[k].reshape(28,28)\n                       ,cmap='gray')\n        k += 1\n    plt.tight_layout()","742003a0":"#Label Encoding \nlabel_binrizer = LabelBinarizer()\nY_train = label_binrizer.fit_transform(Y_train)\nY_test = label_binrizer.fit_transform(Y_test)\nprint('First image label after encoding: ',Y_train[0])","df70800c":"#Using unique to find out different numeric intrepretation of symbols\nlabel_unique = df_train.label.values\nunique_val = np.array(label_unique)\nnp.unique(unique_val)","a8374551":"#Count plot to show freauency of different labels\nplt.figure(figsize=(10,5))\nsns.countplot(label_unique, color = 'black')","ecb2aa18":"#Now create Image generator object for train images \ntrain_datagen = ImageDataGenerator(rotation_range=40, width_shift_range=0.2, \n                             height_shift_range=0.2, shear_range=0.2, \n                             zoom_range=0.2, horizontal_flip = True, \n                             fill_mode='nearest')\n","57259938":"#for validation data \nvalidation_datagen = ImageDataGenerator()","e779cdfb":"#Checking shape of training and testing data \nprint(training_images.shape)\nprint(testing_images.shape)","9b855900":"# Making layers\nmodel= Sequential()\n\n\nmodel.add(Conv2D(filters= 128 , kernel_size=(3,3), padding = 'same', \n                  activation = 'relu' , input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2), strides = 2 , \n                    padding = 'same'))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3) , padding = 'same',\n                 activation = 'relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides = 2 , \n                    padding = 'same'))\n\nmodel.add(Conv2D(filters=32, kernel_size=(3,3), padding = 'same',\n                 activation = 'relu'))\nmodel.add(MaxPool2D(pool_size=(2,2) , strides = 2 , \n                    padding = 'same'))\n\nmodel.add(Flatten())\n\nmodel.add(Dense(512,kernel_initializer=\"he_normal\", activation = 'relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(24, activation = 'softmax'))\n\n\n          \n","e2c701ac":"#Compiling Model \nmodel.compile(optimizer= 'adam' ,loss = 'categorical_crossentropy',\n              metrics = ['accuracy'])\nmodel.summary()","07f6253b":"# Train the Model\n\nhistory = model.fit_generator(train_datagen.flow(training_images, Y_train, batch_size=32),\n                              steps_per_epoch=len(training_images) \/ 32,\n                              epochs=10,\n                              validation_data=validation_datagen.flow(testing_images, Y_test, batch_size=32),\n                              validation_steps=len(testing_images) \/ 32)\n\n","a341b63c":"model.evaluate(testing_images, Y_test, verbose=0)\n","85be62df":"fig , ax = plt.subplots(1,2)\ntrain_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\nfig.set_size_inches(12,4)\n\nax[0].plot(history.history['accuracy'])\nax[0].plot(history.history['val_accuracy'])\nax[0].set_title('Training Accuracy vs Validation Accuracy')\nax[0].set_ylabel('Accuracy')\nax[0].set_xlabel('Epoch')\nax[0].legend(['Train', 'Validation'], loc='upper left')\n\nax[1].plot(history.history['loss'])\nax[1].plot(history.history['val_loss'])\nax[1].set_title('Training Loss vs Validation Loss')\nax[1].set_ylabel('Loss')\nax[1].set_xlabel('Epoch')\nax[1].legend(['Train', 'Validation'], loc='upper left')\n\nplt.show()\n","3cf85dd3":"# Predict the values from the validation dataset\nY_pred = model.predict(testing_images)\n\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n\n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_test,axis = 1) \n\n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(16, 12))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=sns.cubehelix_palette(8),fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"Actual Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","e6ef164b":"# Load Data ","46042a49":"# Testing Accuracy of Model \n","067b5260":"# EDA and Data Preprocessing","5e7be8aa":"# Modeling ","7ccec29e":"Confusion Matrix is used for checking results of the model.","7edbbb9f":"Lets see the first 8 images with their required labels.","6274fc5f":"lets check out the labels mentioned in the description","c1cedc1c":"There is no null values and the pixel appears to be ready for further analysis.","c5999731":"We need to do three task in order to make our data ready for modeling.\n1.  **Reshaping:** As we need our image in shape of total_data x 28 x 28 x 1 where 1 represent the channels\n2.  **Normalization:**  To get our data between 0-1 and this will result in incrreasing the speed of CNN.\n3.  **Label encoding:** our labels using Onehot Encoder or Label Binirizer ","81cd920b":"# Data Augmentation "}}