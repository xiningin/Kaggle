{"cell_type":{"62fc85da":"code","1d7eca76":"code","bc1ca341":"code","d2cdda23":"code","7cb6d258":"code","506574c8":"code","ac2fc197":"code","109f1eb5":"code","837aa735":"code","391d4c59":"code","af4e8773":"code","3231b84a":"code","099566cd":"code","9a49cb03":"code","edef322c":"code","8f389418":"code","354d6952":"code","17811064":"code","eceb1ccf":"code","8275cbf6":"code","89816382":"code","2f7ccb4b":"code","e5db10d0":"code","6701e128":"code","b5e970e5":"code","f197496f":"code","cbbdac3a":"code","6273e960":"code","e224905c":"markdown","b217cc04":"markdown"},"source":{"62fc85da":"# imports\nimport altair as alt\nfrom altair import datum\nimport pandas as pd\nimport numpy as np\nimport matplotlib \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\n# alt.renderers.enable('notebook')","1d7eca76":"# Load the bike sharing data as a 'bike'\nbike = pd.read_csv('..\/input\/bike-sharing-dataset\/day.csv')","bc1ca341":"#Data Analysis","d2cdda23":"plt.figure(figsize=(20,5))\nmask = np.zeros_like(bike.corr(), dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(bike.corr(),cmap='RdBu_r',mask=mask, annot=True)","7cb6d258":"# Our heat data is normalised data( The values are derived via (t-t_min)\/(t_max-t_min), t_min=-8, t_max=+39). For readability and visualisation we multiply it by 100\nbike['temp'] = bike['temp']*100\n# Also we have many decimal numbers in the data set so we round off to 1 decimal place\nbike = bike.round(1)","506574c8":"bike['holiday'][bike['holiday'] == 0] = 'Not Holiday'\nbike['holiday'][bike['holiday'] == 1] = 'Holiday'","ac2fc197":"# Change the values of the categorical data to improve the readability on visualization. \nbike['holiday'][bike['holiday'] == 0] = 'Not Holiday'\nbike['holiday'][bike['holiday'] == 1] = 'Holiday'\nbike['weathersit'][bike['weathersit'] == 1] = 'Clear'\nbike['weathersit'][bike['weathersit'] == 2] = 'Cloudy'\nbike['weathersit'][bike['weathersit'] == 3] = 'Snowy'\nbike['yr'][bike['yr'] == 0] = '2011'\nbike['yr'][bike['yr'] == 1] = '2012'\nbike['season'][bike['season'] == 1] = 'winter'\nbike['season'][bike['season'] == 2] = 'spring'\nbike['season'][bike['season'] == 3] = 'summer'\nbike['season'][bike['season'] == 4] = 'fall'","109f1eb5":"# We drop the column 'instant' because it is useless.\nbike.drop('instant', axis = 1, inplace = True)\n# We create new column 'tem_range' by using pandas cut method. 4 equal interval is created from temperature feature.\nbike['temp_range'] = pd.cut(x=bike['temp'], bins=[5, 25, 45, 65,87], labels=['5-24', '25-45', '46-65','66-87'])","837aa735":"# Our first five samples\nbike.head()","391d4c59":"bike.describe()","af4e8773":"bike.dtypes","3231b84a":"#Check the missing value\nsns.heatmap(bike.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')\n# Fortunately we have not missing value","099566cd":"# We should create dummy variables because regression can't understand categorical variable\nseason = pd.get_dummies(bike['season'],drop_first = True)\nyear = pd.get_dummies(bike['yr'],drop_first = True)\nweather = pd.get_dummies(bike['weathersit'],drop_first = True)\nbike = pd.concat([bike,season,year,weather],axis =1)","9a49cb03":"bike","edef322c":"bike.columns","8f389418":"y = bike['cnt']\nX = bike[['spring','summer','winter','2012','temp','Cloudy','Snowy']]\n# We take selected features as a parameter based on my task","354d6952":"# We divided the X and y into train and test data\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.4, random_state = 101)","17811064":"lm = LinearRegression()","eceb1ccf":"lm.fit(X_train,y_train)","8275cbf6":"pd.DataFrame(lm.coef_,X.columns,columns =['Coeff'])","89816382":"pred = lm.predict(X_test)\nmse = np.mean((pred - y_test)**2)\nprint(lm.score(X_test,y_test))                  #R^2 value of Linear Regression\nmse                                             # MSE value of Linear Regression","2f7ccb4b":"plt.scatter(y_test,pred)\nplt.xlabel('Acutal number of shared bikes')\nplt.ylabel('Predicted number of sahred bikes')","e5db10d0":"df = pd.DataFrame({'Actual': y_test.tolist(), 'Predicted': pred.tolist()})\ndf","6701e128":"sns.regplot(x= 'temp',y= 'cnt', data=bike)\nplt.xlabel('Normalized temperature')\nplt.ylabel('Number of shared bikes')\nplt.title('Normalized temperature vs Number of shared bikes')","b5e970e5":"sns.barplot(x=\"season\", y=\"cnt\", hue=\"yr\", data=bike)\nplt.xlabel('Seasons')\nplt.ylabel('Number of shared bikes')\nplt.title('Seasons vs Number of Shared Bikes')","f197496f":"# Lasso Regression\nlasso = Lasso(alpha=0.3, normalize=True)\nlasso.fit(X_train,y_train)\npred = lasso.predict(X_test)\nmse = np.mean((pred - y_test)**2)\nprint(lasso.score(X_test,y_test))\nmse","cbbdac3a":"Yr = ['2011', '2012'] \nselect = alt.selection_single(name = 'Select',\n                              fields=['yr'],init={'yr': Yr[0]},\n                              bind= alt.binding_radio(options = Yr))\npts = alt.selection(type=\"single\", encodings=['x'])\nbrush = alt.selection_interval(encodings=['x'],empty='all')\nbase = alt.Chart(bike).encode(\n    alt.X('month(dteday):T',title = ' Months '),\n    alt.Y('mean(cnt):Q',scale = alt.Scale(domain = [0,9000],round = True),title = 'Mean Number of Shared Bikes')\n).properties(\n    width=450,\n    height=400,title = 'Months of the Selected Year vs Mean Number of Shared Bikes' \n)\nscale = alt.Scale(domain=['5-24', '25-45', '46-65','66-87'],\n                  range=['#636363', '#3182bd','#ff7f0e','#e41a1c'])\ncolor = alt.Color('temp_range:N', scale=scale)\nbar = base.mark_bar(size =20).add_selection(select).encode(\ncolor = alt.condition(pts, alt.ColorValue(\"steelblue\"), \n                      alt.ColorValue(\"grey\")),\ntooltip = [alt.Tooltip('mean(cnt):Q',title = 'Count of average rental bikes')]).transform_filter(select).add_selection(pts)\nline = alt.Chart(bike).mark_line(color = 'grey').encode(\n    alt.X('date(dteday):O',title = 'Days'),\n    alt.Y('cnt:Q',scale = alt.Scale(domain = [0,9000]),title = 'Number of Shared Bikes')).transform_filter(select).transform_filter(pts).properties(\n    width=400,\n    height=400,title = 'Days of the Selected Month vs Number of Shared Bikes'\n)\n\npoints = alt.Chart(bike).mark_point(filled = True,size = 75).add_selection(brush).encode(alt.X('date(dteday):O'),\n    alt.Y('cnt:Q'),\ntooltip = [alt.Tooltip('cnt:Q',title = 'Count of rental bikes'),alt.Tooltip('temp:Q')],\ncolor = alt.condition(brush,color,alt.value('lightgray'))).transform_filter(select).transform_filter(pts)\nbar_weather = alt.Chart(bike).mark_bar().encode(\n    y='weathersit:N',\n    x='count():Q',\n).transform_filter(select).transform_filter(pts).transform_filter(brush)\ntext = bar_weather.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  \n).encode(text = 'count(weathersit):Q')\n\n\nrule = alt.Chart(bike).mark_rule(color = 'black').encode(\n    y='mean(cnt)',\n    size=alt.value(2)).transform_filter(select).transform_filter(pts)\nrule2 = alt.Chart(bike).mark_rule(color = 'black').encode(\n    y='mean(cnt)',\n    size=alt.value(2)).transform_filter(select)\n\n\nbar + rule2 | ((line + points) + rule) & bar_weather + text\n","6273e960":"label = alt.selection_single(\n    encodings=['x'],  \n    on='mouseover',  \n    nearest=True,     \n    empty='none'     \n)\npts = alt.selection(type=\"single\", encodings=['x'])\n\nbase = alt.Chart().mark_line().encode(\n    alt.X('mnth:N',title = 'Months'),\n    alt.Y('mean(cnt):Q',scale = alt.Scale(domain = [0,9000]),title = 'Mean Number of Shared Bikes'),\n    alt.Color('yr:N')\n).properties(width = 450,height = 400,title = 'Months vs Mean Number of Shared Bikes')\n\nx = alt.layer(\n    base, \n    alt.Chart().mark_rule(color='#aaa').encode(\n        x='mnth:N'\n    ).transform_filter(label),\n    base.mark_circle(filled = True,size = 200).add_selection(pts).encode(\n        opacity=alt.condition(label, alt.value(1), alt.value(0)),\n        color = alt.condition(pts,'yr:N',alt.value('lightgray'))\n    ).add_selection(label),\n    base.mark_text(align='left', dx=5, dy=-5, stroke='white', strokeWidth=2).encode(\n        text='mean(cnt):Q'\n    ).transform_filter(label),\n    base.mark_text(align='left', dx=5, dy=-5).encode(\n        text='mean(cnt):Q' ).transform_filter(label),\n     data=bike\n).properties(\n    width=700,\n    height=400\n)\nbase2 = alt.Chart().mark_line().encode(\n    alt.X('date(dteday)', title = 'Days'),\n    alt.Y('cnt:Q',scale = alt.Scale(domain = [0,9000]),title = 'Number of Shared Bikes'),\n    alt.Color('yr:N')\n).properties(width =400,height=400,title = 'Days of the Selected Month vs Number of Shared Bikes')\n\ny = alt.layer(\n    base2, \n    alt.Chart().mark_rule(color='#aaa').encode(\n     x = 'date(dteday)'\n    ).transform_filter(label),   \n    base2.mark_circle(filled = True,size = 200).add_selection(pts).encode(\n        opacity=alt.condition(label, alt.value(1), alt.value(0))\n    ).add_selection(label),\n    base2.mark_text(align='left', dx=5, dy=-5, stroke='white', strokeWidth=2).encode(\n        text='cnt:Q'\n    ).transform_filter(label),\n    base2.mark_text(align='left', dx=5, dy=-5).encode(\n        text='cnt:Q' ).transform_filter(label),\n     data=bike\n).properties(\n    width=700,\n    height=400\n).transform_filter(pts)\n\nbase3 = alt.Chart().mark_line().encode(\n    alt.X('date(dteday)',title = 'Days'),\n    alt.Y('temp:Q',scale = alt.Scale(domain = [0,90]),title = 'Normalized Temperature'),\n    alt.Color('yr:N')).properties(width =400,height=400,title = 'Days of the Selected Month vs Normalized Temperature')\n\nz = alt.layer(\n    base3, \n    alt.Chart().mark_rule(color='#aaa').encode(\n     x = 'date(dteday)'\n    ).transform_filter(label),\n    base3.mark_circle(filled = True,size = 200).add_selection(pts).encode(\n        opacity=alt.condition(label, alt.value(1), alt.value(0))\n    ).add_selection(label),\n    base3.mark_text(align='left', dx=5, dy=-5, stroke='white', strokeWidth=2).encode(\n        text='temp:Q'\n    ).transform_filter(label),\n    base3.mark_text(align='left', dx=5, dy=-5).encode(\n        text='temp:Q' ).transform_filter(label),\n     data=bike\n).properties(\n    width=700,\n    height=400\n).transform_filter(pts)\nx|y&z\n\n","e224905c":"Our First Visualization","b217cc04":"Our Second Visualization"}}