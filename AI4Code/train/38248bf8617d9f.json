{"cell_type":{"e7416981":"code","cf63865d":"code","c8e3e999":"code","495196fd":"code","a6a65ce1":"code","a58a996d":"code","552e3135":"code","3f4a1b7f":"code","7df77f08":"code","d103f23b":"code","6070e8ea":"code","672e24fb":"code","a39cb602":"code","96a607d3":"code","7c18a04e":"code","b32e3d4c":"code","85496710":"code","7d9fdb05":"code","9773ee8f":"code","ee735a5c":"code","8351e70e":"code","1b6396a5":"code","a11089c7":"code","cb7343c2":"code","f4a94995":"markdown","3ec36169":"markdown","a1c3b708":"markdown","84b8935e":"markdown","3e2fa7b7":"markdown","b6ced872":"markdown","e49c4d81":"markdown","bad04f0c":"markdown","da3a57f0":"markdown","20805509":"markdown","dbecc3ee":"markdown","295cfd83":"markdown","a0f696cb":"markdown","6f3dd794":"markdown","f8da2c0a":"markdown","321ba209":"markdown","e524c37f":"markdown","5a46269f":"markdown","4054a886":"markdown","07dd15d5":"markdown","dfdd8dd6":"markdown","7d71f271":"markdown","c321df99":"markdown","13d00199":"markdown","a97bb902":"markdown","092d4b8b":"markdown"},"source":{"e7416981":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode, iplot\n\ndf = pd.read_csv(\"..\/input\/netflix-shows\/netflix_titles.csv\")\n\ndf.head()","cf63865d":"types = df['type'].value_counts().reset_index()\ntypes = types.rename(columns = {'type' : \"count\", \"index\" : 'type'})\nfig = go.Figure(data=[go.Pie(labels=types['type'], values=types['count'], hole=.3,textinfo='label+percent')],\n                layout=go.Layout(title=\"Content Type\"))\nfig.update_traces(marker=dict(colors=['gold', 'Indigo']))\nfig.show()","c8e3e999":"df[\"date_added\"] = pd.to_datetime(df['date_added'])\ndf['year'] = df['date_added'].dt.year\n\nmovie = df[df[\"type\"] == \"Movie\"]\ntv = df[df[\"type\"] == \"TV Show\"]\n\nmovie = movie['year'].value_counts().reset_index()\nmovie = movie.rename(columns = {'year' : \"count\", \"index\" : 'year'})\nmovie = movie.sort_values('year')\n\ntv = tv['year'].value_counts().reset_index()\ntv = tv.rename(columns = {'year' : \"count\", \"index\" : 'year'})\ntv = tv.sort_values('year')\n\n\nfig = go.Figure(data=[go.Scatter(x=movie['year'], y=movie[\"count\"], name=\"Movies\",marker=dict(color='gold')),\n                      go.Scatter(x=tv['year'], y=tv[\"count\"], name=\"TV Shows\",marker=dict(color='Indigo'))], \n                layout=go.Layout(title=\"Content Added Over Years\"))\nfig.show()","495196fd":"movie = df[df[\"type\"] == \"Movie\"]\n\nfrom wordcloud import WordCloud,STOPWORDS,ImageColorGenerator\nplt.rcParams['figure.figsize'] = (10, 10)\nwordcloud = WordCloud(stopwords=STOPWORDS, background_color = 'black', width = 500,  height = 500, \n                      max_words = 100).generate(' '.join(movie['title'].str.lower()))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Most Popular Words in Movie Title',fontsize = 30)\nplt.show()","a6a65ce1":"movie_c = movie['country'].value_counts().reset_index()\nmovie_c = movie_c.rename(columns = {'country' : \"count\", \"index\" : 'country'})\nmovie_c = movie_c.head(10)\n\nfig = go.Figure(go.Treemap(\n    labels = movie_c['country'],\n    values = movie_c[\"count\"], parents=[\"\",\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",],\n    textinfo = \"label+value\"), layout=go.Layout(title=\"Top 10 Countries with Most Movies\"))\n\nfig.show()","a58a996d":"from collections import Counter\ndirector_split = \", \".join(movie['director'].fillna(\"missing\")).split(\", \")\ndirector_split = Counter(director_split).most_common(11)\ndel director_split[0]\nfig = go.Figure(data=[go.Bar(y=[_[0] for _ in director_split][::-1], \n                             x=[_[1] for _ in director_split][::-1], orientation='h',marker=dict(color='DarkTurquoise'))], \n                layout=go.Layout(title=\"Director with Most Movies\"))\nfig.show()","552e3135":"movie_y = movie['release_year'].value_counts().reset_index()\nmovie_y = movie_y.rename(columns = {'release_year' : \"count\", \"index\" : 'release_year'})\nmovie_y = movie_y.sort_values('release_year')\n\nfig = go.Figure(data=[go.Bar(x=movie_y['release_year'], y=movie_y[\"count\"],marker=dict(color='Coral'))], \n                layout=go.Layout(title=\"Movie by Release Year\"))\nfig.show()","3f4a1b7f":"old_movie = movie.sort_values(\"release_year\", ascending = True)\nold_movie = old_movie[old_movie['duration'] != \"\"]\nold_movie = old_movie[[\"title\",\"country\",\"release_year\",\"rating\",\"listed_in\"]][:10]\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=list(old_movie.columns),\n                fill_color='gold',\n                align='left'),\n    cells=dict(values=[old_movie.title, old_movie.country, old_movie.release_year, old_movie.rating, old_movie.listed_in],\n               fill_color='white',\n               align='left'))],layout=go.Layout(title=\"10 Oldest Movies\"))\nfig.show()","7df77f08":"movie_r = movie['rating'].value_counts().reset_index()\nmovie_r = movie_r.rename(columns = {'rating' : \"count\", \"index\" : 'rating'})\n\nfig = go.Figure(data=[go.Bar(x=movie_r['rating'], y=movie_r['count'])], \n                layout=go.Layout(title=\"Movies by Guideline Group\"))\nfig.update_layout(xaxis={'categoryorder':'total descending'})","d103f23b":"genre_split = \", \".join(movie['listed_in']).split(\", \")\ngenre_split = Counter(genre_split).most_common(20)\n\nfig = go.Figure(data=[go.Pie(labels=[_[0] for _ in genre_split][::-1], values=[_[1] for _ in genre_split][::-1], \n                textinfo='label')], layout=go.Layout(title=\"Movies by Genre\"))\nfig.show()","6070e8ea":"imdb_ratings=pd.read_csv('..\/input\/imdb-extensive-dataset\/IMDb ratings.csv')\nimdb_titles=pd.read_csv('..\/input\/imdb-extensive-dataset\/IMDb movies.csv')\nratings = pd.DataFrame({'Title':imdb_titles.title,\n                    'Rating': imdb_ratings.weighted_average_vote})\nratings.drop_duplicates(subset=['Title','Rating'], inplace=True)\nratings.dropna()\njoin=ratings.merge(movie,left_on='Title',right_on='title',how='inner')\njoin=join.sort_values(by='Rating', ascending=False)\n\nimport plotly.express as px\ntop_rated=join[0:10]\nfig =px.sunburst(\n    top_rated,\n    path=['title','country'],\n    values='Rating',\n    color='Rating')\nfig.show()","672e24fb":"join_drama = join[join[\"listed_in\"].str.contains(\"Dramas\")]\ntop_rated=join_drama[0:15]\ntop_rated = top_rated[[\"title\",\"country\",\"release_year\",\"director\",\"Rating\"]]\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=list(top_rated.columns),\n                fill_color='pink',\n                align='left'),\n    cells=dict(values=[top_rated.title, top_rated.country, top_rated.release_year, top_rated.director, top_rated.Rating],\n               fill_color='white',\n               align='left'))],layout=go.Layout(title=\"Top Rated Drama Movies\"))\nfig.show()","a39cb602":"join_action = join[join[\"listed_in\"].str.contains(\"Action\")]\ntop_rated=join_action[0:15]\ntop_rated = top_rated[[\"title\",\"country\",\"release_year\",\"director\",\"Rating\"]]\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=list(top_rated.columns),\n                fill_color='orange',\n                align='left'),\n    cells=dict(values=[top_rated.title, top_rated.country, top_rated.release_year, top_rated.director, top_rated.Rating],\n               fill_color='white',\n               align='left'))],layout=go.Layout(title=\"Top Rated Action & Adventure Movies\"))\nfig.show()","96a607d3":"join_thriller = join[join[\"listed_in\"].str.contains(\"Thriller\")]\ntop_rated=join_thriller[0:15]\ntop_rated = top_rated[[\"title\",\"country\",\"release_year\",\"director\",\"Rating\"]]\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=list(top_rated.columns),\n                fill_color='lightblue',\n                align='left'),\n    cells=dict(values=[top_rated.title, top_rated.country, top_rated.release_year, top_rated.director, top_rated.Rating],\n               fill_color='white',\n               align='left'))],layout=go.Layout(title=\"Top Rated Thriller Movies\"))\nfig.show()","7c18a04e":"def ratecountry(name):\n    join_c = join[join[\"country\"].fillna('missing').str.contains(name)]\n    top_rated=join_c[0:10]\n    trace = go.Bar(y=top_rated[\"title\"], x=top_rated['Rating'], orientation=\"h\", \n                   marker=dict(color=\"purple\"))\n    return trace\n\nfrom plotly.subplots import make_subplots\ntraces = []\ntitles = [\"United Kingdom\",\"\",\"Canada\",\"\",\"Spain\"]\nfor title in titles:\n    if title != \"\":\n        traces.append(ratecountry(title))\n\nfig = make_subplots(rows=1, cols=5, subplot_titles=titles)\nfig.add_trace(traces[0], 1,1)\nfig.add_trace(traces[1], 1,3)\nfig.add_trace(traces[2], 1,5)\n\nfig.update_layout(height=500, showlegend=False, yaxis={'categoryorder':'total ascending'})\nfig.show()","b32e3d4c":"tv = df[df[\"type\"] == \"TV Show\"]\n\nplt.rcParams['figure.figsize'] = (10, 10)\nwordcloud = WordCloud(stopwords=STOPWORDS, background_color = 'black', width = 500,  height = 500, \n                      max_words = 100).generate(' '.join(tv['title'].str.lower()))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Most Popular Words in TV Show Title',fontsize = 30)\nplt.show()","85496710":"tv_c = tv['country'].value_counts().reset_index()\ntv_c = tv_c.rename(columns = {'country' : \"count\", \"index\" : 'country'})\ntv_c = tv_c.head(10)\n\nfig = go.Figure(go.Treemap(\n    labels = tv_c['country'],\n    values = tv_c[\"count\"], parents=[\"\",\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",],\n    textinfo = \"label+value\"), layout=go.Layout(title=\"Top 10 Countries with Most TV Shows\"))\n\nfig.show()","7d9fdb05":"def genrecountry(c):\n    c = tv[tv[\"country\"].fillna('missing').str.contains(c)]\n    genre_split = \", \".join(c['listed_in']).split(\", \")\n    genre_split = Counter(genre_split).most_common(10)\n    genre_name = [_[0] for _ in genre_split][::-1]\n    genre_count = values=[_[1] for _ in genre_split][::-1]\n    trace = go.Bar(y=genre_name, x=genre_count, orientation=\"h\", \n                   marker=dict(color=\"Indigo\"))\n    return trace\n\ntraces = []\nclist = [\"United Kingdom\",\"\",\"Japan\",\"\",\"South Korea\"]\nfor c in clist:\n    if c != \"\":\n        traces.append(genrecountry(c))\n\nfig = make_subplots(rows=1, cols=5, subplot_titles=clist)\nfig.add_trace(traces[0], 1,1)\nfig.add_trace(traces[1], 1,3)\nfig.add_trace(traces[2], 1,5)\n\nfig.update_layout(height=500, showlegend=False, yaxis={'categoryorder':'total ascending'},title=\"Top 10 TV Show Genre from Each Country\")\nfig.show()","9773ee8f":"tv_d = tv['duration'].value_counts().reset_index()\ntv_d = tv_d.rename(columns = {'duration' : \"count\", \"index\" : 'duration'})\n\nfig = go.Figure(data=[go.Bar(x=tv_d['duration'], y=tv_d['count'],marker=dict(color='Darkgreen'))], \n                layout=go.Layout(title=\"TV Shows by Seasons\"))\nfig.update_layout(xaxis={'categoryorder':'total descending'})\nfig.show()","ee735a5c":"manyseason = ['10 Seasons','11 Seasons','12 Seasons','13 Seasons','14 Seasons']\ntv_long = tv[tv['duration'].isin(manyseason)]\n\ntv_long = tv_long[[\"title\",\"country\",\"release_year\",\"director\",\"duration\",\"listed_in\"]]\n\nfig = go.Figure(data=[go.Table(\n    header=dict(values=list(tv_long.columns),\n                fill_color='lightgreen',\n                align='left'),\n    cells=dict(values=[tv_long.title, tv_long.country, tv_long.release_year, tv_long.director, \n                       tv_long.duration, tv_long.listed_in],\n               fill_color='white',\n               align='left'))],layout=go.Layout(title=\"Longest TV Shows\"))\nfig.show()","8351e70e":"from sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ndf2 = df[['title','type','director','rating','listed_in','description']]\ndf2.head()\ndf2['description'] = df2['description'].fillna('')\ndf2['director'] = df2['director'].fillna('')\ndf2['rating'] = df2['rating'].fillna('')\ndf2['listed_in'] = df2['listed_in'].map(lambda x: x.lower().split(','))\ndf2.set_index('title', inplace = True)\n\ndf2['Key_words'] = ''\ncolumns = df2.columns\nfor index, row in df2.iterrows():\n    words = ''\n    for col in columns:\n        words = words + ''.join(row[col])+ ' '\n    row['Key_words'] = words\n    \ndf2.drop(columns = [col for col in df2.columns if col!= 'Key_words'], inplace = True)","1b6396a5":"# instantiating and generating the count matrix\ncount = CountVectorizer()\ncount_matrix = count.fit_transform(df2['Key_words'])\n\n# generating the cosine similarity matrix\ncosine_sim = cosine_similarity(count_matrix, count_matrix)\n\nindices = pd.Series(df2.index)\nindices[:5]\n\n# returning 10 recommended movies \ndef recommendations(title, cosine_sim = cosine_sim):\n    recommended_movies = []\n    idx = indices[indices == title].index[0]\n    score_series = pd.Series(cosine_sim[idx]).sort_values(ascending = False)\n    top_10_indexes = list(score_series.iloc[1:11].index)\n    for i in top_10_indexes:\n        recommended_movies.append(list(df2.index)[i])\n    return recommended_movies","a11089c7":"recommendations('The Lord of the Rings: The Return of the King')","cb7343c2":"recommendations('I Am Mother')","f4a94995":"Next I will dive deeper into movies by breaking down the movie count by country, released year, guideline group, genre, and finally duration. ","3ec36169":"The top 3 movie genres are International Movies, Dramas, and Comedies; however, these genres are not mutually exclusive. A movie is international as long as it is not from USA.  ","a1c3b708":"As shown by the results, Netflix has about 2X more movies than TV shows. Since 2016, we see an increasing number of content being added to Netflix, especially movies. ","84b8935e":"What directors have the most movies on Netflix?","3e2fa7b7":"TV-MA which is for adults only has the most movies, followed by TV-14, and R and TV-PG. Thus movies on Neftlix are more adult and teen friendly. ","b6ced872":"Many TV shows are from United Kingdom, Japan, and South Korea. We can take a closer look into the top 10 genres for each of the three countries. ","e49c4d81":"# Movie - Exploration","bad04f0c":"# TV Show - Exploration","da3a57f0":"As shown below, the Netflix dataset contains useful information on type, director, cast, country, release year, duration, genre, and description. ","20805509":"The recommendations seem reasonable as most of them are from the same genre as the movie title I entered. ","dbecc3ee":"I am interested in knowing the IMDb ratings of the movies on Netflix - what are the top rated movies by genre and country, and what are their directors and cast? Thus, I joined the Netflix dataset with the IMDb Extensive Dataset (note that the data size is smaller as 1\/3 of data did not find a match). The sunburst chart shows the top 10 results from the join. ","295cfd83":"Next I divided the exploration into two sections: Movie and TV shows. Starting with the movies on Netflix, it is fun to see what the most popular words are in the movie titles. \"Love\", \"man\", and \"christmas\" are the common words. ","a0f696cb":"This notebook contains two main parts: (1) an exploratory data analysis (EDA) that visualizes the content data on Netflix, and (2) a content-based recommender system.\nWith EDA, I try to answer questions that allow us to describe and understand the content better, such as what are the countries\/directors\/genres with largest number of movies\/TV shows on Netflix, what are the top rated movies (using IMDb ratings), and what are the longest TV shows, etc.. \nThe recommender system, based on what we enter, picks content with similar attributes on Netflix. ","6f3dd794":"(2)\"I Am Mother\"","f8da2c0a":"# Content-based Recommendation System with NLP","321ba209":"# Getting Started","e524c37f":"While most TV shows have only 1 season, there are some TV shows with more than 10 seasons. What are they?","5a46269f":"What are the top rated movies by country? I will select UK, Canada, and Spain as examples. ","4054a886":"Testing the results - I will enter a few titles and see the top 10 content it recommends to me: \n(1) \"Lord of Rings: The Return of the King')\"","07dd15d5":"Moving on to TV shows, I will explore the title, country, release year, genre, and seasons. ","dfdd8dd6":"# Movie - IMBd Ratings","7d71f271":"We can see that most movies were released in recent years, especially during the period from 2016 to 2018. What are the oldest movies on Netflix? Looking at below, they are all documentaries about war from USA. ","c321df99":"What are the top movies from some of the genres? I picked Dramas, Action & Adventure, and Thriller out of personal interests.  ","13d00199":"First of all, I would like to know (1) what the proportion of movies versus TV shows is on Netflix as of Jan 2020, and (2) what the trend of adding content looks like on Netflix over the years.  ","a97bb902":"Lastly, I want to build a recommendation system that is based on type, director, guideline group, genre and description. \nhttps:\/\/towardsdatascience.com\/how-to-build-from-scratch-a-content-based-movie-recommender-with-natural-language-processing-25ad400eb243","092d4b8b":"Similar to movies, \"love\" is the most popular word in titles. "}}