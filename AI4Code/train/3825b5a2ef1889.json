{"cell_type":{"88ab580c":"code","2b063680":"code","3c3130cb":"code","187c1a74":"code","5ff65163":"code","9fb95822":"code","2f6b791a":"code","7f5d63aa":"code","e7864672":"code","a7cb6b27":"code","9197c5c4":"code","20c1fdec":"code","36f387a5":"code","c70fe769":"code","c1ba36a5":"code","9a1c0aaa":"code","fd41af42":"code","ac9fbe03":"code","4e50d266":"code","2b41c31c":"code","e147e6f5":"code","bd47ca86":"code","d0bcc94a":"code","1d2c27b1":"code","36bdf83a":"code","f156c0b9":"code","d55a0289":"code","05ec3637":"code","2a5db447":"code","04875d73":"code","39f830bb":"code","35eca5ac":"code","31dbfd44":"code","76947294":"code","0a65c642":"code","3e5cc5a2":"code","8118b6a5":"code","7e9e88f6":"code","1bcb80d7":"code","79f13b46":"code","c1492a28":"code","2848cfd8":"code","9d922a74":"code","499d89d2":"code","fd6416db":"code","f1b83dfa":"code","b3762d82":"code","fb813a31":"code","790301ca":"code","930d6000":"code","051fd272":"code","277223da":"code","8bcf6fe4":"code","d285db54":"code","1215934f":"code","8ec24292":"code","51db43c1":"code","1cb90dfe":"code","913b3360":"code","34b06d2c":"code","3a65c1b1":"code","01953a0c":"code","cf0c8a5d":"code","534a0812":"code","bf3c78f7":"code","9acf7a6b":"code","249131f8":"code","1d720a39":"code","d77be814":"code","2b31150b":"code","80ed69d9":"code","80a936f2":"code","8c4c495c":"code","a480dd3a":"code","786b55f2":"code","1db9aa30":"code","6cacc177":"code","d2f88f54":"code","40278c0b":"code","c918d549":"code","a7a9c31a":"markdown","caaeb98f":"markdown","3bd32b8e":"markdown","8a1ce1cd":"markdown","19ec79d1":"markdown","ac0a11f2":"markdown","8774d8e9":"markdown","1fd67bfe":"markdown","3182a63d":"markdown","0b6bf71f":"markdown","a7980202":"markdown","0b4fb101":"markdown","1212e146":"markdown","fb0853d0":"markdown","e8ef8ec6":"markdown","590dc8ec":"markdown","d43d9412":"markdown","91442c27":"markdown","00f039c2":"markdown","a81a856d":"markdown","204f3a55":"markdown","4f6696d2":"markdown","5bc6f63c":"markdown","b592942a":"markdown","09744641":"markdown","fcf278ea":"markdown","b18cf3b3":"markdown","576bec69":"markdown","6274fc17":"markdown","808a2f86":"markdown","a7105242":"markdown","a43e5b8a":"markdown","dc2b3a69":"markdown","e5f6a808":"markdown","47c9d37e":"markdown","75005300":"markdown","4eabe7eb":"markdown","041997e7":"markdown","06491233":"markdown","2e8516c5":"markdown","f425ed08":"markdown"},"source":{"88ab580c":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns","2b063680":"df_train = pd.read_csv('..\/input\/bigmart-sales-data\/Train.csv')","3c3130cb":"print(\"Train Shape: \", df_train.shape)","187c1a74":"df_train.head()","5ff65163":"df_train.dtypes","9fb95822":"categorical_df = df_train.select_dtypes(include = 'object')\nnumerical_df = df_train.select_dtypes(exclude = 'object')","2f6b791a":"print(f\"There are {len(categorical_df.columns)} Categorical Attributes\")\nprint(f\"There are {len(numerical_df.columns)} Numerical Attributes\")","7f5d63aa":"df_train.describe()","e7864672":"xdf = df_train.copy()","a7cb6b27":"import matplotlib.pyplot as plt\nimport seaborn as sns","9197c5c4":"plt.figure(figsize = (8,8))\nsns.heatmap(xdf.isnull(), cbar = False);","20c1fdec":"## Let's list them out:\n\ntotal = xdf.isnull().sum().sort_values(ascending = False)\npercent = ((xdf.isnull().sum() \/ xdf.shape[0]) * 100).sort_values(ascending = False)\npercent = np.round(percent, 3)\ntypes = xdf[percent.index].dtypes\n\nmissing_data = pd.concat([total, percent, types], axis = 1, keys = [\"Total\",\"Percent\",\"Type\"])\nmissing_data.head(5)","36f387a5":"xdf['Outlet_Size'].fillna(xdf['Outlet_Size'].mode()[0], inplace = True)","c70fe769":"xdf['Item_Weight'].fillna(xdf['Item_Weight'].median(), inplace = True)","c1ba36a5":"xdf.isnull().sum()","9a1c0aaa":"xdf['Item_Outlet_Sales'].describe()","fd41af42":"plt.figure(figsize = (10,6))\nsns.histplot(data = xdf, x = 'Item_Outlet_Sales', kde = True);","ac9fbe03":"## let's confirm the outliers\n\nplt.figure(figsize = (10,8))\nsns.boxplot( x = 'Item_Outlet_Sales', data = xdf);","4e50d266":"## First we will remove the outliers from this attribute\n## function to remove outlier\n\ndef remove_outliers(dataframe, column):\n    \n    Q3 = dataframe[column].quantile(0.75)\n    Q1 = dataframe[column].quantile(0.25)\n    \n    IQR = Q3 - Q1\n    \n    upper = Q3 + (1.5 * IQR)\n    lower = Q1 - (1.5 * IQR)\n    \n    df_no_outlier = dataframe[(dataframe[column] > lower ) & (dataframe[column] < upper)]\n\n    return df_no_outlier","2b41c31c":"# Removing Outliers form Item_Outlet_Sales\n\nxdf = remove_outliers(xdf, \"Item_Outlet_Sales\")","e147e6f5":"# Quickly checking the result in boxplot\n\nplt.figure(figsize = (8,8))\nsns.boxplot(x = 'Item_Outlet_Sales', data = xdf);","bd47ca86":"## Function for fixing positive skewness\ndef sqrt_transformation(dataframe):\n    return np.sqrt(dataframe)","d0bcc94a":"xdf['Item_Outlet_Sales'] = xdf['Item_Outlet_Sales'].map(sqrt_transformation)","1d2c27b1":"# After fixing skewness\n\nplt.figure(figsize = (10,6))\nsns.histplot(data = xdf, x = 'Item_Outlet_Sales', kde = True);","36bdf83a":"xxdf = xdf.copy()","f156c0b9":"numerical_df.columns","d55a0289":"for i in numerical_df:\n    sns.displot(data = xxdf, x = i, kde = True, aspect = 2, height = 6);\n    plt.xlabel(i, fontsize = 12)","05ec3637":"# Checking for outliers\n\nfor i in numerical_df:\n    plt.figure(figsize =(8,6))\n    sns.scatterplot(data = xxdf, y = xdf.index, x = i);\n    plt.xlabel(i, fontsize = 12)","2a5db447":"# Confirming the outliers\n\nfor i in numerical_df:\n    plt.figure(figsize =(8,6))\n    sns.boxplot(data = xxdf, y = i);\n    plt.xlabel(i, fontsize = 12)","04875d73":"sns.displot(data = xxdf, x = 'Item_Visibility', kde = True, aspect = 2, height = 6);","39f830bb":"## First Removing strange '0'\n\nxxdf['Item_Visibility'].replace(0, xxdf['Item_Visibility'].median(), inplace = True)","35eca5ac":"# Treating Postive skewness\n\nxxdf['Item_Visibility'] = xxdf[\"Item_Visibility\"].map(sqrt_transformation)","31dbfd44":"# Removing Outliers\n\nxxdf = remove_outliers(xxdf, \"Item_Visibility\")","76947294":"# After remvoing skewness and fixing outliers on trainset\n\nsns.displot(x = 'Item_Visibility', data = xxdf, aspect = 2, height = 6, kde = True);","0a65c642":"for i in numerical_df:\n    plt.figure(figsize =(8,6))\n    sns.scatterplot(data = xxdf, x = i, y = xxdf['Item_Outlet_Sales']);\n    plt.xlabel(i, fontsize = 12)\n    plt.ylabel(\"Sales\")","3e5cc5a2":"bi_df = xxdf.copy()","8118b6a5":"categorical_df.columns","7e9e88f6":"for i in categorical_df:\n    plt.figure(figsize = (10,8))\n    sns.countplot( y = i, data = bi_df);   ","1bcb80d7":"bi_df['Item_Fat_Content'].unique()","79f13b46":"bi_df['Item_Fat_Content'] = bi_df['Item_Fat_Content'].map({\"low fat\": \"Low Fat\",\n                                                           \"Low Fat\": \"Low Fat\",\n                                                         \"LF\":\"Low Fat\",\n                                                         \"Regular\":\"Regular\",\n                                                         \"reg\":\"Regular\"})","c1492a28":"bi_df['Item_Fat_Content'].value_counts()","2848cfd8":"for i in categorical_df:\n    plt.figure(figsize = (10,8))\n    sns.boxplot( y = i, x = bi_df['Item_Outlet_Sales'],data = bi_df);","9d922a74":"for i in numerical_df:\n    print(\"\\n\")\n    print(i)\n    print(\"-\" * 20)\n    print(\"Skewness: %f\" % bi_df[i].skew())\n    print(\"Kurtosis: %f\" % bi_df[i].kurt())\n    print(\"-\" * 20)","499d89d2":"tf_df = bi_df.copy()","fd6416db":"categorical_df.columns","f1b83dfa":"from sklearn import preprocessing","b3762d82":"label_encoder = preprocessing.LabelEncoder()","fb813a31":"categorical_df = tf_df.select_dtypes(include = 'object')","790301ca":"label_df = tf_df.copy()\nfor i in categorical_df:\n    label_df[i] = label_encoder.fit_transform(tf_df[i])","930d6000":"corrmat =label_df.corr()\nf, ax = plt.subplots(figsize = (20,9))\nsns.heatmap(corrmat, vmax = .8, annot = True)","051fd272":"drop_columns = ['Item_Visibility','Outlet_Size','Outlet_Establishment_Year','Outlet_Type','Item_Weight','Item_Identifier']\n\ntf_df.drop(drop_columns, axis =1 , inplace = True) ","277223da":"tf_df","8bcf6fe4":"tf_df = pd.get_dummies(tf_df)","d285db54":"tf_df","1215934f":"X = tf_df.drop(['Item_Outlet_Sales'], axis = 1)\ny = tf_df['Item_Outlet_Sales']","8ec24292":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\nX1 = scaler.fit_transform(X)\nX = pd.DataFrame(data = X1, columns = X.columns)","51db43c1":"X.head()","1cb90dfe":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 101)\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","913b3360":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\nimport math\n\n\nlr = LinearRegression(normalize = True)\nlr.fit(X_train, y_train)","34b06d2c":"lr_predict = lr.predict(X_test)","3a65c1b1":"yp = lr.predict(X_test)\nprint(\"R2 Score:\", r2_score(y_test, lr_predict))\nprint(\"Mean Squarred Error:\", mean_squared_error(y_test, lr_predict))\nprint(\"RMSE:\", math.sqrt(mean_squared_error(y_test, lr_predict)))\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(y_test,lr_predict)))","01953a0c":"from xgboost import XGBRegressor\n\nxgb = XGBRegressor(n_estimators = 1000, learning_rate = 0.05)\nxgb.fit(X_train, y_train)\n\npredict = xgb.predict(X_test)\n","cf0c8a5d":"print(\"R2 Score:\", r2_score(y_test, predict))\nprint(\"Mean Squarred Error:\", mean_squared_error(y_test, predict))\nprint(\"RMSE:\", math.sqrt(mean_squared_error(y_test, predict)))\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(y_test,predict)))","534a0812":"from sklearn.linear_model import Lasso","bf3c78f7":"ls = Lasso(alpha = 0.01)\nls.fit(X_train, y_train)","9acf7a6b":"lasso_pred = ls.predict(X_test)","249131f8":"print(\"R2 Score:\", r2_score(y_test, lasso_pred))\nprint(\"Mean Squarred Error:\", mean_squared_error(y_test, lasso_pred))\nprint(\"RMSE:\", math.sqrt(mean_squared_error(y_test, lasso_pred)))\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(y_test,lasso_pred)))","1d720a39":"from lightgbm import LGBMRegressor","d77be814":"lgbm = LGBMRegressor()","2b31150b":"lgbm.fit(X_train, y_train)","80ed69d9":"lgbm_pred = lgbm.predict(X_test)","80a936f2":"print(\"R2 Score:\", r2_score(y_test, lgbm_pred))\nprint(\"Mean Squarred Error:\", mean_squared_error(y_test, lgbm_pred))\nprint(\"RMSE:\", math.sqrt(mean_squared_error(y_test, lgbm_pred)))\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(y_test,lgbm_pred)))","8c4c495c":"from sklearn.ensemble import RandomForestRegressor","a480dd3a":"rf = RandomForestRegressor(n_estimators = 50, max_depth = 15, random_state = 47, min_samples_leaf = 10)","786b55f2":"rf.fit(X_train, y_train)","1db9aa30":"rf_pred = rf.predict(X_test)","6cacc177":"print(\"R2 Score:\", r2_score(y_test, rf_pred))\nprint(\"Mean Squarred Error:\", mean_squared_error(y_test, rf_pred))\nprint(\"RMSE:\", math.sqrt(mean_squared_error(y_test, rf_pred)))\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(y_test,rf_pred)))","d2f88f54":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn import metrics\nfrom sklearn.model_selection import GridSearchCV","40278c0b":"dt = DecisionTreeRegressor()\n\nparam_dist = {\n            'max_depth': [2,5,10,50,25,30,40,],\n}\n\ndt_gs = GridSearchCV(dt, param_grid = param_dist, cv = 6)\ndt_gs.fit(X_train, y_train)\n\ndt_predict = dt_gs.predict(X_test)","c918d549":"print(\"R2 Score:\", r2_score(y_test, dt_predict))\nprint(\"Mean Squarred Error:\", mean_squared_error(y_test, dt_predict))\nprint(\"RMSE:\", math.sqrt(mean_squared_error(y_test, dt_predict)))\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(y_test,dt_predict)))","a7a9c31a":"We will not be fixing skewness in our <b> target attribute <\/b> as it given incorrect <b> RMSE <\/b>","caaeb98f":"<b> Observations: <\/b>\n\n- Item Identifier: There are lot of individual Item Identifiers.\n- Item_Fat_Content: We have multiple same values, let's fix it.\n- Fruits & Vegies, Frozen food, Dariy, Household and Snacks has highest number of counts.\n- Supermarket has higher number of counts.\n\nFirst let's fix, <b> Item_Fat_Content","3bd32b8e":"# Modeling and Evaluation Metrics","8a1ce1cd":"### Bivariate Analysis\n\nFirst let's see the scatter plot of all the <b> Numerical variables<\/b> in term of <b> Item_Outlet_Sales <\/b>","19ec79d1":"## Correlation","ac0a11f2":"### Linear Regression","8774d8e9":"Let's take a note, which <b> feature <\/b> has skewed dataset.","1fd67bfe":"## Univariate Analysis\n\nStarting with the analyzation of <b> Target Attribute <\/b>","3182a63d":"### Scaling the Dataset","0b6bf71f":"### Dropping unrelated Columns","a7980202":"## Outline:\n\n- 1. Dataset Observation\n\n     \n     \n- 2. Exploratory Data Analysis and Cleaning\n    \n   - Missing Values\n   - Univariate Analysis (Target)\n   - Univariate Analysis (Independent Variables)\n   - Multivariate Analysis\n   - Outliers\n   - Normalization\n   - Correlation\n        \n    \n- 3. Model Preparation\n\n    - Split training and testing\n    - Encoding\n    \n    \n- 5. Models and Tuning \/ Evaluation Metrics\n    \n    - Regression Algorithms\n    - RMSE \/ MSE \/ MAE","0b4fb101":"As we can see, it is positively skewed and also containes some outliers.First let's remove outliers.","1212e146":"## Univariate Analysis (Independent Variables)","fb0853d0":"### DecisionTreeRegressor","e8ef8ec6":"### One Hot Encoding","590dc8ec":"### Bivariate Analysis (Categorical)","d43d9412":"<b> Observations: <\/b>\n\nItem_Visibility contains outliers, and as well as it is positively skewed on both the dastaset. Let's fix this.","91442c27":"## Dataset Transformation","00f039c2":"These are the values in <b> % <\/b>. <b> 28.27% <\/b> and<b> 17.16 % <\/b> values are missing in <b> Outlet_Size <\/b> and <b> Item_Weight <\/b> respectively.","a81a856d":"It contains a 0 value, let's fix that too.","204f3a55":"### RandomForestRegressor","4f6696d2":"<b> Observations: <\/b>\n- In terms of 'Outlet_Type', Supermarket has highest demand (Type1 and Type3)\n- Starchy Food, Dairy, Fruits & Vegetables and Households has highest sales. But most of them all equal in terms of overall sales.\n","5bc6f63c":"# 1. Data Observation","b592942a":"We observe, <b> Item_MRP <\/b> has linear relationship","09744641":"Also, let's take a note which <b> Attribute <\/b> contains outliers.","fcf278ea":"### Splitting Dataset","b18cf3b3":"# 2. Exploratory Data Analysis\n\nExploratory data analysis is an approach to analyzing data sets to summarize their main characteristics, often using statistical graphics and other data visualization methods.\n\nWe will be improve our features as we go through the visulizations. \n\nBut first, let's analyze the missing values.","576bec69":"### LGBMRegressor","6274fc17":"<b> In term of Sales? <\/b>\n","808a2f86":"### Item_Weight \n\nIt is a numeric variable, so we will be replacing it by <b> median <\/b>","a7105242":"### Label Encoding \n\nLet's encode all the categorical values, and check the correlation of all the values with 'SalePrice'","a43e5b8a":"### Outlet_Size \n\nSince this is a categorical attribute we will impute by using mode","dc2b3a69":"<b> Countplot","e5f6a808":"## Skewness on Numbers","47c9d37e":"### Preparing the Dataset","75005300":"<b> Let's check the distribution of the Target Attribute\n","4eabe7eb":"### LASSO REGRSSOR","041997e7":"### XGBOOST REGRESSOR","06491233":"## Missing Values","2e8516c5":"### Let's confirm the impute","f425ed08":"Now, we know <b> Item_Weight <\/b> and <b> Outlet_Size <\/b> contains huge number of \"NaN\" but how much?"}}