{"cell_type":{"7a401b6d":"code","a5bfee99":"code","b8a4f0f8":"code","252baf6a":"code","183bcdb6":"code","424c183e":"code","460285de":"code","21a8fa9f":"code","ba3cb7cc":"code","af896ab8":"code","ee4a22c6":"code","315a6784":"code","189f3dfa":"code","e0574694":"code","9adad580":"code","378e6239":"code","2a988280":"code","d69d9f0f":"code","1ecf52f2":"code","69e72709":"code","3093260b":"code","ad86a263":"code","32400645":"code","29b40913":"code","e1ef89da":"code","f9c8bc0e":"code","888133a7":"code","4ba1baa7":"code","b6e079a3":"code","3a5f134b":"code","03b40ecc":"code","dee35ac1":"code","58741c8a":"code","461721a2":"code","5730920c":"markdown","3f21188b":"markdown","9d9ddced":"markdown","c0319e2a":"markdown"},"source":{"7a401b6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5bfee99":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nimport pandas as pd \nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport numpy as np\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.linear_model import Lasso,Ridge,ElasticNet\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import GridSearchCV","b8a4f0f8":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","252baf6a":"sns.set_style(\"white\")\nsns.set_color_codes(palette='deep')\nf, ax = plt.subplots(figsize=(8, 7))\n#Check the new distribution \nsns.distplot(train['SalePrice'], color=\"b\")\nax.xaxis.grid(False)\nax.set(ylabel=\"Frequency\")\nax.set(xlabel=\"SalePrice\")\nax.set(title=\"SalePrice distribution\")\nsns.despine(trim=True, left=True)\nplt.show()","183bcdb6":"train","424c183e":"test.shape","460285de":"data = pd.concat([train,test])","21a8fa9f":"corr = data.corr()\ncolormap = sns.diverging_palette(220, 10, as_cmap = True)\nplt.figure(figsize = (20,20))\nsns.heatmap(corr,\n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values,\n            annot=True,fmt='.2f',linewidths=0.30,\n            cmap = colormap, linecolor='white')\nplt.show()","ba3cb7cc":"data.info()","af896ab8":"data.index = range(2919)\ndata.drop(['Id','Utilities'],axis=1,inplace=True)  \n\ndata['MoSold'] = data['MoSold'].astype(str)\ndata['YrSold'] = data['YrSold'].astype(str)","ee4a22c6":"l2 = ['LotFrontage','MasVnrArea']\nl3 = ['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath','GarageYrBlt','GarageCars','GarageArea']\n\nfor item in l2 :\n    data[item]= data[item].fillna(data[item].mean())\nfor item in l3 :\n    data[item]= data[item].fillna(0)","315a6784":"data['FireplaceQu'] = data['FireplaceQu'].fillna('None')\ndata['MiscFeature'] = data['MiscFeature'].fillna('None')\ndata['Alley']=data['Alley'].fillna('None')","189f3dfa":"l1 = data['MSZoning'].unique().tolist()\nfor i in range(len(l1)-1):\n    j = np.random.randint(0,4)\n    data['MSZoning'] = data['MSZoning'].fillna(l1[j])  ","e0574694":"data['Electrical'] = data['Electrical'].fillna(data['Electrical'].mode()[0])\ndata['KitchenQual'] = data['KitchenQual'].fillna(data['KitchenQual'].mode()[0])\ndata['SaleType'] = data['SaleType'].fillna(data['SaleType'].mode()[0])","9adad580":"data['Exterior1st'] = data['Exterior1st'].fillna('None')\ndata['Exterior2nd'] = data['Exterior2nd'].fillna('None')\ndata['MasVnrType'] = data['MasVnrType'].fillna('None') \n\ndata['BsmtQual'] = data['BsmtQual'].fillna('None')      #  no Bsmt\ndata['BsmtCond'] = data['BsmtCond'].fillna('None')\ndata['BsmtExposure'] = data['BsmtExposure'].fillna('None')\ndata['BsmtFinType1'] = data['BsmtFinType1'].fillna('None')\ndata['Fence'] = data['Fence'].fillna('None')\ndata['Functional'] = data['Functional'].fillna('Typical')\ndata['BsmtFinType2'] = data['BsmtFinType2'].fillna('None')\n\ndata['GarageType'] = data['GarageType'].fillna('None')  #no Garage\ndata['GarageFinish'] = data['GarageFinish'].fillna('None')\ndata['GarageQual'] = data['GarageQual'].fillna('None')\ndata['GarageCond'] = data['GarageCond'].fillna('None')\n\ndata['PoolQC'] = data['PoolQC'].fillna('None')     # no Pool","378e6239":"cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', 'HouseStyle',\n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1','Neighborhood', 'SaleCondition',\n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope','Condition1','Condition2',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond','GarageType','SaleType','BldgType')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lb = LabelEncoder() \n    lb.fit(list(data[c].values)) \n    data[c] = lb.transform(list(data[c].values))","2a988280":"data = pd.get_dummies(data)","d69d9f0f":"data.shape","1ecf52f2":"data['Total_Bathrooms'] = data['FullBath'] + 0.5 * data['HalfBath'] + data['BsmtFullBath'] + 0.5 * data['BsmtHalfBath']\ndata['GarageScale'] = data['GarageCars'] * data['GarageArea']                                   \ndata['GarageOrdinal'] = data['GarageQual'] + data['GarageCond']+data['GarageType']                 \ndata['GarageState'] = data['GarageFinish'] + data['GarageYrBlt'] + data['PavedDrive']              \ndata['Porchtotal'] = data['OpenPorchSF'] + data['EnclosedPorch'] + data['3SsnPorch'] + data['ScreenPorch']  \ndata['Extertotal'] = data['ExterQual'] + data['ExterCond']                                       \ndata['KitchenCombined'] = data['KitchenQual'] * data['KitchenAbvGr']                               \ndata['FireplaceCombined'] = data['FireplaceQu'] * data['Fireplaces']                               \ndata['BsmtOrdinal'] = data['BsmtQual'] + data['BsmtCond']                                          \ndata['BsmtFinishedAll'] = data['BsmtFinSF1'] + data['BsmtFinSF2']                                  \ndata['AllFlrSF'] = data['1stFlrSF'] + data['2ndFlrSF']                                             \ndata['OverallCombined'] = data['OverallQual'] + data['OverallCond']                                \ndata['TotalSF'] = data['AllFlrSF'] + data['TotalBsmtSF']                                           \ndata['YrBltAndRemod'] = data[\"YearRemodAdd\"] + data['YearBuilt']                                   \ndata['roomtotal'] = data['BedroomAbvGr'] + data['KitchenAbvGr']+ data['TotRmsAbvGrd']              \ndata['SaleState'] = data['SaleType'] + data['SaleCondition']                                \ndata['HouseComment'] = data['BldgType']  + data['HouseStyle'] + data['OverallCond']                \ndata['Condition'] = data['Condition1'] + data['Condition2'] +  data['Neighborhood']               ","69e72709":"#Log features\uff1aGaussian\ndef logs(res, ls):\n    m = res.shape[1]\n    for l in ls:\n        res = res.assign(newcol=pd.Series(np.log(1.01+res[l])).values)   \n        res.columns.values[m] = l + '_log'\n        m += 1\n    return res\n\nlog_features = ['LotFrontage','LotArea','MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF',\n                 'TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea',\n                 'BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr',\n                 'TotRmsAbvGrd','Fireplaces','GarageCars','GarageArea','WoodDeckSF','OpenPorchSF',\n                 'EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea','MiscVal','YearRemodAdd','Total_Bathrooms'\n               ,'GarageScale','GarageOrdinal','Porchtotal','Extertotal','KitchenCombined','FireplaceCombined','BsmtOrdinal',\n                'BsmtFinishedAll','AllFlrSF','OverallCombined','TotalSF','YrBltAndRemod','roomtotal','SaleState','HouseComment','Condition']\ndata = logs(data, log_features)","3093260b":"#square_features\ndef square(res, ls):\n    m = res.shape[1]\n    for l in ls:\n        res = res.assign(newcol=pd.Series(np.square(res[l])).values)   \n        res.columns.values[m] = l + '_square'\n        m += 1\n    return res\n\nsquare_features = ['LotFrontage','LotArea','MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF',\n                 'TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea',\n                 'BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr',\n                 'TotRmsAbvGrd','Fireplaces','GarageCars','GarageArea','WoodDeckSF','OpenPorchSF',\n                 'EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea','MiscVal','YearRemodAdd','Total_Bathrooms'\n               ,'GarageScale','GarageOrdinal','Porchtotal','Extertotal','KitchenCombined','FireplaceCombined','BsmtOrdinal',\n                'BsmtFinishedAll','AllFlrSF','OverallCombined','TotalSF','YrBltAndRemod','roomtotal','SaleState','HouseComment','Condition']\ndata = square(data, square_features)","ad86a263":"# # value**1.5\n# def s_r(res, ls):\n#     m = res.shape[1]\n#     for l in ls:\n#         res = res.assign(newcol=pd.Series(np.power(res[l],1.5)).values)   \n#         res.columns.values[m] = l + '_c'\n#         m += 1\n#     return res\n\n# square_root_features = ['LotFrontage','LotArea','MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF',\n#                  'TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea',\n#                  'BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr',\n#                  'TotRmsAbvGrd','Fireplaces','GarageCars','GarageArea','WoodDeckSF','OpenPorchSF',\n#                  'EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea','MiscVal','YearRemodAdd','Total_Bathrooms'\n#                ,'GarageScale','GarageOrdinal','Porchtotal','Extertotal','KitchenCombined','FireplaceCombined',\n#                'BsmtOrdinal','BsmtFinishedAll','AllFlrSF','OverallCombined','TotalSF','YrBltAndRemod']\n# data = s_r(data, square_root_features)","32400645":"data.shape","29b40913":"train_data = data[:1460]\ntest_data = data[1460:].drop(['SalePrice'],axis = 1)","e1ef89da":"y = np.log1p(train_data['SalePrice'])    #smoothing\nx = train_data.drop(['SalePrice'],axis=1)","f9c8bc0e":"xtrain ,xtest ,ytrain ,ytest = train_test_split(x,y,test_size = 0.3, random_state = 4200 )","888133a7":"la = Lasso(alpha=0.1,max_iter=500)\nla.fit(x,y)\npred1 = np.expm1(la.predict(test_data))","4ba1baa7":"R = Ridge(alpha=1.0,max_iter=500)\nR.fit(x,y)\npred2 = np.expm1(R.predict(test_data))","b6e079a3":"xgbr = XGBRegressor(  booster='gbtree'\n                    , colsample_bylevel=1\n                    , colsample_bynode=1\n                    , colsample_bytree=0.6\n                    , gamma=0\n                    , importance_type='gain'\n                    , learning_rate=0.01\n                    , max_delta_step=0\n                    , max_depth= 3 \n                    , min_child_weight=1.5\n                    , n_estimators=5400\n                    , n_jobs=-1\n                    , nthread=None\n                    , objective='reg:squarederror'\n                    , reg_alpha=0.3\n                    , reg_lambda=0.7\n                    , scale_pos_weight=1\n                    , silent=None\n                    , subsample=0.6\n                    , verbosity=1)\nxgbr.fit(x,y)\npred3 = np.expm1(xgbr.predict(test_data))","3a5f134b":"lgmb = LGBMRegressor(objective='regression',\n                    boosting_type='gbdt',\n                    num_leaves= 5,\n                    max_depth = 3,\n                    learning_rate=0.01,\n                    n_estimators=6300,\n                    subsample_for_bin=100,\n                    class_weight=None,\n                    min_split_gain=0.0,\n                    min_child_weight=1.3,\n                    min_child_samples=3,\n                    subsample=0.1,\n                    subsample_freq=0,\n                    colsample_bytree=0.6,\n                    reg_alpha=0.1,\n                    reg_lambda=0.6,\n                    random_state=None,\n                    n_jobs= -1,\n                    silent=True,\n                    importance_type='gain')\nlgmb.fit(x,y)\npred4 = np.expm1(lgmb.predict(test_data))","03b40ecc":"gbrt = GradientBoostingRegressor(alpha=0.5, ccp_alpha=0.0,\n                                 criterion='friedman_mse',\n                                 init=None, learning_rate=0.01,\n                                 loss='huber',  max_depth=3,\n                                 max_leaf_nodes=5,\n                                 min_impurity_decrease=0.0,\n                                 min_impurity_split=None,\n                                 min_samples_leaf=10,\n                                 min_samples_split=3,\n                                 min_weight_fraction_leaf=0.0,\n                                 n_estimators=3350,\n                                 n_iter_no_change=None,\n                                 random_state=5,subsample=0.6,\n                                 tol=0.0001,\n                                 validation_fraction=0.1,\n                                 verbose=0)\ngbrt.fit(x,y)\npred5 = np.expm1(gbrt.predict(test_data))","dee35ac1":"E = ElasticNet(alpha=0.1,l1_ratio=0.1)\nE.fit(x,y)\npred6 = np.expm1(E.predict(test_data))","58741c8a":"#0.12056\n#pred =  0.01* pred1 + 0.25* pred2  + 0.35*pred3 + 0.35*pred4 +0.01* pred5+0.03* pred6    \n\n#0.11902\npred =  0.0* pred1 + 0.2* pred2  + 0.37*pred3 + 0.38*pred4 +0.00* pred5+0.05* pred6    ","461721a2":"pred = pd.DataFrame({\"id\": test['Id'], \"SalePrice\": pred})\npred.to_csv('sample_submission.csv',index=False)","5730920c":"# Feature design","3f21188b":"# Model Blending","9d9ddced":"# data processing","c0319e2a":"# Modelling"}}