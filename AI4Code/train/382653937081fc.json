{"cell_type":{"ce825e07":"code","6499cef0":"code","9698fc0f":"code","066163b6":"code","8c584f0f":"code","3d2188f0":"code","4b8fd5c1":"code","fb69be4e":"code","2ebb1386":"code","903eba29":"code","b8074ba5":"code","cf093929":"code","362a31f8":"code","af687173":"code","6708fc74":"code","d6f44f9d":"code","e7f82111":"code","5cc0294f":"code","d4036e35":"code","039110bf":"code","875a3ac4":"code","da185af8":"code","2bf22f13":"code","e0cebeaf":"code","2762063a":"code","52d15f26":"code","8f744023":"code","3dc69075":"code","1339178b":"code","062af53f":"code","7e596c75":"code","8c2b96e2":"code","3d32bf7b":"code","15896730":"code","da4540e8":"code","3e77c180":"code","001533c5":"code","8317e395":"code","6da11a15":"code","dd023224":"code","da665ac2":"code","6aa4dc5a":"code","2429c4fb":"code","64d2c8d9":"code","b665b07c":"code","a547a169":"code","aa6ec3b1":"code","416ef77b":"markdown","eb00288a":"markdown","f4beab1c":"markdown","b9cf1c64":"markdown","6ee40c07":"markdown","cf6efb62":"markdown","e2c451dd":"markdown","cc821534":"markdown","5545920d":"markdown","908a7e64":"markdown","8e3b0e16":"markdown","8deaa858":"markdown","1591d087":"markdown","0f00e128":"markdown","60caf7af":"markdown"},"source":{"ce825e07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6499cef0":"!apt-get install p7zip\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/train.tsv.7z\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/test.tsv.7z\n!p7zip -d -f -k \/kaggle\/input\/mercari-price-suggestion-challenge\/sample_submission.csv.7z","9698fc0f":"!unzip \/kaggle\/input\/mercari-price-suggestion-challenge\/sample_submission_stg2.csv.zip\n!unzip \/kaggle\/input\/mercari-price-suggestion-challenge\/test_stg2.tsv.zip","066163b6":"from sklearn.linear_model import Ridge, LogisticRegression\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","8c584f0f":"train_df = pd.read_csv('train.tsv', sep='\\t')\ntrain_df.shape","3d2188f0":"test_df = pd.read_csv('test_stg2.tsv', sep='\\t')\ntest_df.shape","4b8fd5c1":"train_df.head()","fb69be4e":"train_df.info()","2ebb1386":"plt.figure(figsize=(6, 4))\nsns.distplot(train_df['price'], kde=False)","903eba29":"sns.distplot(np.log1p(train_df['price']), kde=False)","b8074ba5":"train_df['price'] = np.log1p(train_df['price'])","cf093929":"train_df['shipping'].value_counts()","362a31f8":"train_df['item_condition_id'].value_counts()","af687173":"train_df['item_description'].value_counts()","6708fc74":"train_df[train_df['item_description'] == 'No description yet']['item_description'].count()","d6f44f9d":"def split_cat(category_name):\n    try:\n        return category_name.split('\/')\n    except:\n        return ['Other_Null', 'Other_Null', 'Other_Null']","e7f82111":"train_df['cat_dae'], train_df['cat_jung'], train_df['cat_so'] = zip(*train_df['category_name'].apply(lambda x: split_cat(x)))\ntest_df['cat_dae'], test_df['cat_jung'], test_df['cat_so'] = zip(*test_df['category_name'].apply(lambda x: split_cat(x)))","5cc0294f":"print(train_df['cat_dae'].nunique())\nprint(train_df['cat_jung'].nunique())\nprint(train_df['cat_so'].nunique())","d4036e35":"train_df['brand_name'] = train_df['brand_name'].fillna(value='Other_Null')\ntrain_df['category_name'] = train_df['category_name'].fillna(value='Other_Null')\ntrain_df['item_description'] = train_df['item_description'].fillna(value='Other_Null')\n\ntest_df['brand_name'] = test_df['brand_name'].fillna(value='Other_Null')\ntest_df['category_name'] = test_df['category_name'].fillna(value='Other_Null')\ntest_df['item_description'] = test_df['item_description'].fillna(value='Other_Null')","039110bf":"train_df.isnull().sum()","875a3ac4":"test_df.isnull().sum()","da185af8":"train_df['brand_name'].nunique()","2bf22f13":"train_df['brand_name'].value_counts()[:5]","e0cebeaf":"train_df['name'].nunique()","2762063a":"train_df['name'].value_counts()[:10]","52d15f26":"train_df['item_description'].str.len().mean()","8f744023":"train_df['item_description'][:2]","3dc69075":"cnt_vec = CountVectorizer()\n\nX_train_name = cnt_vec.fit_transform(train_df['name'])\nX_test_name = cnt_vec.transform(test_df['name'])","1339178b":"print(X_train_name.shape)\nprint(X_test_name.shape)","062af53f":"tfidf_descp = TfidfVectorizer(max_features=50000, ngram_range=(1, 3), stop_words='english')\n\nX_train_descp = tfidf_descp.fit_transform(train_df['item_description'])\nX_test_descp = tfidf_descp.transform(test_df['item_description'])","7e596c75":"print(X_train_descp.shape)\nprint(X_test_descp.shape)","8c2b96e2":"from sklearn.preprocessing import LabelBinarizer\n\nlb_brand_name = LabelBinarizer(sparse_output=True)\nX_train_brand = lb_brand_name.fit_transform(train_df['brand_name'])\nX_test_brand = lb_brand_name.transform(test_df['brand_name'])\n\nlb_item_cond_id = LabelBinarizer(sparse_output=True)\nX_train_item_condition_id = lb_item_cond_id.fit_transform(train_df['item_condition_id'])\nX_test_item_condition_id = lb_item_cond_id.transform(test_df['item_condition_id'])\n\nlb_shipping = LabelBinarizer(sparse_output=True)\nX_train_shipping = lb_shipping.fit_transform(train_df['shipping'])\nX_test_shipping = lb_shipping.transform(test_df['shipping'])\n\nlb_cat_dae = LabelBinarizer(sparse_output=True)\nX_train_cat_dae = lb_cat_dae.fit_transform(train_df['cat_dae'])\nX_test_cat_dae = lb_cat_dae.transform(test_df['cat_dae'])\n\nlb_cat_jung = LabelBinarizer(sparse_output=True)\nX_train_cat_jung = lb_cat_jung.fit_transform(train_df['cat_jung'])\nX_test_cat_jung = lb_cat_jung.transform(test_df['cat_jung'])\n\nlb_cat_so = LabelBinarizer(sparse_output=True)\nX_train_cat_so = lb_cat_so.fit_transform(train_df['cat_so'])\nX_test_cat_so = lb_cat_so.transform(test_df['cat_so'])","3d32bf7b":"print(type(X_train_brand), type(X_train_item_condition_id), type(X_train_shipping))\nprint(type(X_test_brand), type(X_test_item_condition_id), type(X_test_shipping))\n\nprint('X_train_brand shape:', X_train_brand.shape)\nprint('X_train_item_cond_id shape:', X_train_item_condition_id.shape)\nprint('X_train_shipping shape:', X_train_shipping.shape)\nprint('X_train_cat_dae shape:', X_train_cat_dae.shape)\nprint('X_train_cat_jung shape:', X_train_cat_jung.shape)\nprint('X_train_cat_so shape:', X_train_cat_so.shape)\n\nprint('X_test_brand shape:', X_test_brand.shape)\nprint('X_test_item_cond_id shape:', X_test_item_condition_id.shape)\nprint('X_test_shipping shape:', X_test_shipping.shape)\nprint('X_test_cat_dae shape:', X_test_cat_dae.shape)\nprint('X_test_cat_jung shape:', X_test_cat_jung.shape)\nprint('X_test_cat_so shape:', X_test_cat_so.shape)","15896730":"from scipy.sparse import hstack\nimport gc\n\nsparse_matrix_list = (X_train_name, X_train_descp, X_train_brand, X_train_item_condition_id, X_train_shipping, X_train_cat_dae, X_train_cat_jung, X_train_cat_so)\n\nX_train = hstack(sparse_matrix_list).tocsr()\nprint(type(X_train), X_train.shape)\n\ndel X_train\ngc.collect()","da4540e8":"def rmsle(y, y_pred):\n    return np.sqrt(np.mean(np.power(np.log1p(y) - np.log1p(y_pred), 2)))\n\ndef evaluate_orig_price(y_test, preds):\n    preds_exmpm = np.expm1(preds)\n    y_test_exmpm = np.expm1(y_test)\n    \n    return rmsle(y_test_exmpm, preds_exmpm)","3e77c180":"def model_train_predict(model, matrix_list):\n    X = hstack(matrix_list).tocsr()\n    X_train, X_test, y_train, y_test = train_test_split(X, train_df['price'], test_size=0.2)\n\n    model.fit(X_train, y_train)\n    preds = model.predict(X_test)\n    \n    del X, X_train, X_test, y_train\n    gc.collect()\n    \n    return preds, y_test","001533c5":"linear_model = Ridge(solver='lsqr', fit_intercept=False)\n\nsparse_matrix_list = (X_train_name, X_train_brand, X_train_item_condition_id, X_train_shipping, X_train_cat_dae, X_train_cat_jung, X_train_cat_so)\nlinear_preds, y_test = model_train_predict(model=linear_model, matrix_list=sparse_matrix_list)\nprint('Item Description\uc744 \uc81c\uc678\ud588\uc744 \ub54c rmsle \uac12:', evaluate_orig_price(y_test, linear_preds))\n\nsparse_matrix_list = (X_train_name, X_train_descp, X_train_brand, X_train_item_condition_id, X_train_shipping, X_train_cat_dae, X_train_cat_jung, X_train_cat_so)\nlinear_preds, y_test = model_train_predict(model=linear_model, matrix_list=sparse_matrix_list)\nprint('Item Description\uc744 \ud3ec\ud568\ud55c rmsle \uac12:', evaluate_orig_price(y_test, linear_preds))","8317e395":"from lightgbm import LGBMRegressor\n\nlgbm_model = LGBMRegressor(n_estimators=200, learning_rate=0.5, num_leaves=125)\n\nsparse_matrix_list = (X_train_name, X_train_descp, X_train_brand, X_train_item_condition_id, X_train_shipping, X_train_cat_dae, X_train_cat_jung, X_train_cat_so)\nlgbm_preds, y_test = model_train_predict(model=lgbm_model, matrix_list=sparse_matrix_list)\nprint('LightGBM rmsle \uac12:', evaluate_orig_price(y_test, lgbm_preds))","6da11a15":"sparse_matrix_list = (X_train_name, X_train_descp, X_train_brand, X_train_item_condition_id, X_train_shipping, X_train_cat_dae, X_train_cat_jung, X_train_cat_so)\nX_train = hstack(sparse_matrix_list).tocsr()\nX_train","dd023224":"y_train = train_df['price']\ny_train","da665ac2":"lgbm_model = LGBMRegressor(n_estimators=200, learning_rate=0.5, num_leaves=125)\nlgbm_model.fit(X_train, y_train)","6aa4dc5a":"sparse_matrix_list = (X_test_name, X_test_descp, X_test_brand, X_test_item_condition_id, X_test_shipping, X_test_cat_dae, X_test_cat_jung, X_test_cat_so)\nX_test = hstack(sparse_matrix_list).tocsr()","2429c4fb":"preds = lgbm_model.predict(X_test)\npreds","64d2c8d9":"preds = np.expm1(preds)\npreds","b665b07c":"submission = pd.read_csv('sample_submission_stg2.csv')\nsubmission","a547a169":"submission.loc[:, 'price'] = preds\nsubmission","aa6ec3b1":"submission.to_csv('submission.csv', index=False)","416ef77b":"# Overview other features","eb00288a":"# One-hot encoding via LabelBinarizer (for CSR sparse matrix)","f4beab1c":"## 'No description yet'","b9cf1c64":"# Data preparation","6ee40c07":"# item_description","cf6efb62":"## Apply log1p to price","e2c451dd":"# Target's distribution","cc821534":"# Submission","5545920d":"# Prediction","908a7e64":"# Evalutation","8e3b0e16":"# category_name","8deaa858":"# brand_name","1591d087":"## Preview X_train","0f00e128":"# Vectorize name, item_description","60caf7af":"# name"}}