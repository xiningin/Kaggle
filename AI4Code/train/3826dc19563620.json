{"cell_type":{"d898b6d5":"code","21d781b6":"code","0d8e3018":"code","5f365d09":"code","5d05b6aa":"code","69a1f34b":"code","509e6014":"code","bb23c30f":"code","bda25275":"code","44575534":"code","f712f37a":"code","691e266c":"code","d685bafe":"code","e6ca03e8":"code","773b4151":"code","2745aa49":"code","6f614cf1":"code","4c82bb51":"code","9e42ed83":"code","79d8af50":"code","9580b22a":"code","13bd59e5":"code","f90428fe":"code","8eb114dd":"code","9bb860cb":"code","4c8c0004":"code","0ca5240d":"code","03340e61":"code","2b855170":"code","63bc8c74":"code","f54d13e5":"code","a0e0447a":"code","f202cc68":"code","b5639b9c":"code","75a56bf4":"code","d8366d9f":"code","658291db":"code","df95c19d":"code","d5306474":"code","ea317244":"code","b2efce90":"code","1be457cc":"code","7dc79d39":"code","ea695615":"code","9514b8ee":"code","792abea0":"code","8167c577":"code","a721f588":"code","d31bd090":"code","4d20f397":"code","27752165":"code","e0984d19":"code","9d7a875d":"code","2fea5325":"code","b9dfe512":"code","fc4e9821":"code","e9aff5f1":"code","7f1a6970":"code","6b239578":"code","57ae9f4f":"code","b2e586c0":"code","04c84ab7":"code","4b8b99bf":"code","dc3d418b":"markdown","dbd8f95f":"markdown","232d7d26":"markdown","cc5b3fd7":"markdown","fd2a5828":"markdown","c6add78e":"markdown","a1b59b05":"markdown","5826e916":"markdown","9d8a1aa1":"markdown","2f238da9":"markdown","780994b8":"markdown","60f145ef":"markdown","b90b2fea":"markdown","ff2c4965":"markdown"},"source":{"d898b6d5":"# Import libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport plotly.offline as py \npy.init_notebook_mode(connected=True)                  \nimport plotly.graph_objs as go                         \nimport plotly.tools as tls                             \nfrom collections import Counter                        \nimport plotly.figure_factory as ff\n\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split, KFold, cross_val_score, GridSearchCV                                         # to split the data\nfrom sklearn.metrics import mean_squared_error, roc_auc_score, roc_curve, r2_score, accuracy_score, confusion_matrix, classification_report, fbeta_score     # to evaluate our model\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression, LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import FeatureUnion\nfrom sklearn.decomposition import PCA\nfrom sklearn.feature_selection import SelectKBest\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import Sequential\nfrom tensorflow.keras.layers import Flatten, Dense\n\nimport warnings\nimport missingno as msno\nfrom sklearn.exceptions import ConvergenceWarning\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(\"ignore\", category=ConvergenceWarning)\nwarnings.filterwarnings(\"ignore\")\n\npd.pandas.set_option('display.max_columns', None)\npd.set_option('display.float_format', lambda x: '%.3f' % x)","21d781b6":"df = pd.read_csv('..\/input\/german-credit-data-with-risk\/german_credit_data.csv', index_col=0)","0d8e3018":"df.head()","5f365d09":"# The size of the data set was examined. It consists of 1000 observation units and 10 variables.\ndf.shape","5d05b6aa":"#Feature information\ndf.info()","69a1f34b":"df.describe([0.10,0.25,0.50,0.75,0.90,0.95,0.99]).T","509e6014":"# Are there any null values?\ndf.isnull().values.any()","bb23c30f":"# How Many ?\ndf.isnull().sum()","bda25275":"cat_cols = [col for col in df.columns if df[col].dtypes == 'O']\nprint(cat_cols,\"\\n\")\nprint('Number of Categoric Variable: ', len(cat_cols))\n\nfor col in cat_cols:\n    print(df[col].value_counts(), \"\\n\\n\")","44575534":"num_cols = [col for col in df.columns if df[col].dtypes != 'O' and col not in \"Id\"]\nprint(num_cols,\"\\n\")\nprint('Number of Numerical Variable: ', len(num_cols))","f712f37a":"trace0 = go.Bar(\n            x = df[df[\"Risk\"]== 'good'][\"Risk\"].value_counts().index.values,\n            y = df[df[\"Risk\"]== 'good'][\"Risk\"].value_counts().values,\n            name='Good credit')\n\ntrace1 = go.Bar(\n            x = df[df[\"Risk\"]== 'bad'][\"Risk\"].value_counts().index.values,\n            y = df[df[\"Risk\"]== 'bad'][\"Risk\"].value_counts().values,\n            name='Bad credit')\n\n\ndata = [trace0, trace1]\nlayout = go.Layout(yaxis=dict(title='Count'),\n                   xaxis=dict(title='Risk Variable'),title='Target variable distribution')\n\nfig = go.Figure(data=data, layout=layout)\nfig.data[0].marker.line.width = 4\nfig.data[0].marker.line.color = \"black\"\nfig.data[1].marker.line.width = 4\nfig.data[1].marker.line.color = \"black\"\npy.iplot(fig, filename='grouped-bar')","691e266c":"df_good = df.loc[df[\"Risk\"] == 'good']['Age'].values.tolist()\ndf_bad = df.loc[df[\"Risk\"] == 'bad']['Age'].values.tolist()\ndf_age = df['Age'].values.tolist()\n\n#First plot\ntrace0 = go.Histogram(x=df_good,histnorm='probability', name=\"Good Credit\")\n#Second plot\ntrace1 = go.Histogram(x=df_bad, histnorm='probability', name=\"Bad Credit\")\n#Third plot\ntrace2 = go.Histogram(x=df_age, histnorm='probability', name=\"Overall Age\")\n\n#Creating the grid\nfig = tls.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]], \n                        subplot_titles=('Good','Bad', 'General Distribuition'))\n\n#setting the figs\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\n\nfig['layout'].update(showlegend=True, title='Age Distribuition', bargap=0.05)\npy.iplot(fig, filename='custom-sized-subplot-with-subplot-titles')","d685bafe":"#See together in graphs accordings to Frequency and Count:\ndf_good = df[df[\"Risk\"] == 'good']\ndf_bad = df[df[\"Risk\"] == 'bad']\n\nfig, ax = plt.subplots(nrows=2, figsize=(12,8))\nplt.subplots_adjust(hspace = 0.4, top = 0.8)\n\ng1 = sns.distplot(df_good[\"Age\"], ax=ax[0], color=\"g\")\ng1 = sns.distplot(df_bad[\"Age\"], ax=ax[0], color='r')\ng1.set_title(\"Age Distribuition\", fontsize=15)\ng1.set_xlabel(\"Age\")\ng1.set_xlabel(\"Frequency\")\n\ng2 = sns.countplot(x=\"Age\",data=df, palette=\"hls\", ax=ax[1], hue = \"Risk\")\ng2.set_title(\"Age Counting by Risk\", fontsize=15)\ng2.set_xlabel(\"Age\")\ng2.set_xlabel(\"Count\")\nplt.show()","e6ca03e8":"#Let's look the Credit Amount column\ninterval = (18, 25, 35, 60, 120)\n\ncats = ['Student', 'Young', 'Adult', 'Senior']\ndf[\"Age_cat\"] = pd.cut(df.Age, interval, labels=cats)\n\n# And let's re-create \"df_bad\" dataframes with \"df_good\" we created.\ndf_good = df[df[\"Risk\"] == 'good']\ndf_bad = df[df[\"Risk\"] == 'bad']","773b4151":"trace0 = go.Box(y=df_good[\"Credit amount\"], x=df_good[\"Age_cat\"], name='Good credit', marker=dict(color='LightSkyBlue'))\n\ntrace1 = go.Box(y=df_bad['Credit amount'], x=df_bad['Age_cat'], name='Bad credit', marker=dict(color='DarkSlateGrey'))\n    \ndata = [trace0, trace1]\n\nlayout = go.Layout(yaxis=dict(title='Credit Amount (Deutsch Mark)',zeroline=False),xaxis=dict(title='Age Categorical'),boxmode='group')\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='box-age-cat')","2745aa49":"#First plot\ntrace0 = go.Bar(\n                x = df[df[\"Risk\"]== 'good'][\"Housing\"].value_counts().index.values,\n                y = df[df[\"Risk\"]== 'good'][\"Housing\"].value_counts().values,\n                name='Good credit'\n                )\n\n#Second plot\ntrace1 = go.Bar(\n                x = df[df[\"Risk\"]== 'bad'][\"Housing\"].value_counts().index.values,\n                y = df[df[\"Risk\"]== 'bad'][\"Housing\"].value_counts().values,\n                name=\"Bad Credit\"\n                )\n\ndata = [trace0, trace1]\n\nlayout = go.Layout(title='Housing Distribuition')\n\n\nfig = go.Figure(data=data, layout=layout)\nfig.data[0].marker.line.width = 4\nfig.data[0].marker.line.color = \"black\"\nfig.data[1].marker.line.width = 4\nfig.data[1].marker.line.color = \"black\"\n\npy.iplot(fig, filename='Housing-Grouped')\nplt.show()","6f614cf1":"fig = {\n    \"data\": [{\n            \"type\": 'violin',\n            \"x\": df_good['Housing'],\n            \"y\": df_good['Credit amount'],\n            \"legendgroup\": 'Good Credit',\n            \"scalegroup\": 'No',\n            \"name\": 'Good Credit',\n            \"side\": 'negative',\n            \"box\": {\"visible\": True},\n            \"meanline\": {\"visible\": True},\n            \"line\": {\"color\": '#673D43'}},\n            {\n            \"type\": 'violin',\n            \"x\": df_bad['Housing'],\n            \"y\": df_bad['Credit amount'],\n            \"legendgroup\": 'Bad Credit',\n            \"scalegroup\": 'No',\n            \"name\": 'Bad Credit',\n            \"side\": 'positive',\n            \"box\": {\"visible\": True},\n            \"meanline\": {\"visible\": True},\n            \"line\": {\"color\": '#AB9C2B'}\n             }],\"layout\" : { \"yaxis\": {\"zeroline\": False,},\"violingap\": 0,\"violinmode\": \"overlay\"}}\n\npy.iplot(fig, filename = 'violin\/split', validate = False)","4c82bb51":"#First plot\ntrace0 = go.Bar(x = df[df[\"Risk\"]== 'good'][\"Sex\"].value_counts().index.values,\n                y = df[df[\"Risk\"]== 'good'][\"Sex\"].value_counts().values,\n                name='Good credit')\n\n#First plot 2\ntrace1 = go.Bar(x = df[df[\"Risk\"]== 'bad'][\"Sex\"].value_counts().index.values,\n                y = df[df[\"Risk\"]== 'bad'][\"Sex\"].value_counts().values,\n                name=\"Bad Credit\")\n\n#Second plot\ntrace2 = go.Box(x = df[df[\"Risk\"]== 'good'][\"Sex\"],\n                y = df[df[\"Risk\"]== 'good'][\"Credit amount\"],\n                name=trace0.name)\n\n#Second plot 2\ntrace3 = go.Box(x = df[df[\"Risk\"]== 'bad'][\"Sex\"],\n                y = df[df[\"Risk\"]== 'bad'][\"Credit amount\"],\n                name=trace1.name)\n\ndata = [trace0, trace1, trace2,trace3]\n\nfig = tls.make_subplots(rows=1, cols=2, subplot_titles=('Sex Count', 'Credit Amount by Sex'))\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 2)\n\nfig['layout'].update(height=400, width=800, title='Sex Distribuition', boxmode='group')\npy.iplot(fig, filename='sex-subplot')\nplt.show()","9e42ed83":"#First plot\ntrace0 = go.Bar(x = df[df[\"Risk\"]== 'good'][\"Job\"].value_counts().index.values,\n                y = df[df[\"Risk\"]== 'good'][\"Job\"].value_counts().values,\n                name='Good credit Distribuition')\n\n#Second plot\ntrace1 = go.Bar(x = df[df[\"Risk\"]== 'bad'][\"Job\"].value_counts().index.values,\n                y = df[df[\"Risk\"]== 'bad'][\"Job\"].value_counts().values,\n                name=\"Bad Credit Distribuition\")\n\ndata = [trace0, trace1]\n\nlayout = go.Layout(title='Job Distribuition')\n\nfig = go.Figure(data=data, layout=layout)\nfig.data[0].marker.line.width = 4\nfig.data[0].marker.line.color = \"black\"\nfig.data[1].marker.line.width = 4\nfig.data[1].marker.line.color = \"black\"\npy.iplot(fig, filename='grouped-bar')","79d8af50":"trace0 = go.Box(x=df_good[\"Job\"],\n                y=df_good[\"Credit amount\"],\n                name='Good credit',\n                marker=dict(color='LightSkyBlue'))\n\ntrace1 = go.Box(x=df_bad['Job'],\n                y=df_bad['Credit amount'],\n                name='Bad credit',\n                marker=dict(color='DarkSlateGrey'))\n    \ndata = [trace0, trace1]\n\nlayout = go.Layout(yaxis=dict(title='Credit Amount distribuition by Job',zeroline=False),\n                   xaxis=dict(title='Job'),boxmode='group')\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig, filename='box-age-cat')\nplt.show()","9580b22a":"fig = {\"data\": [{\n                 \"type\": 'violin',\n                 \"x\": df_good['Job'],\n                 \"y\": df_good['Age'],\n                 \"legendgroup\": 'Good Credit',\n                 \"scalegroup\": 'No',\n                 \"name\": 'Good Credit',\n                 \"side\": 'negative',\n                 \"box\": {\"visible\": True},\n                 \"meanline\": {\"visible\": True},\n                 \"line\": {\"color\": '#673D43'}\n                 },\n                 {\n                 \"type\": 'violin',\n                 \"x\": df_bad['Job'],\n                 \"y\": df_bad['Age'],\n                 \"legendgroup\": 'Bad Credit',\n                 \"scalegroup\": 'No',\n                 \"name\": 'Bad Credit',\n                 \"side\": 'positive',\n                 \"box\": {\"visible\": True},\n                 \"meanline\": {\"visible\": True},\n                 \"line\": {\"color\": 'green'}\n                 }],\n            \"layout\" : {\n            \"yaxis\": {\n            \"zeroline\": False,},\n            \"violingap\": 0,\n            \"violinmode\": \"overlay\"}}\npy.iplot(fig, filename = 'Age-Housing', validate = False)\nplt.show()","13bd59e5":"fig, ax = plt.subplots(figsize=(12,12), nrows=2)\n\ng1 = sns.boxplot(x=\"Job\", y=\"Credit amount\", data=df, \n            palette=\"husl\", ax=ax[0], hue=\"Risk\")\ng1.set_title(\"Credit Amount by Job\", fontsize=15)\ng1.set_xlabel(\"Job Reference\", fontsize=12)\ng1.set_ylabel(\"Credit Amount\", fontsize=12)\n\ng2 = sns.violinplot(x=\"Job\", y=\"Age\", data=df, ax=ax[1],  \n               hue=\"Risk\", split=True, palette=\"Blues\")\ng2.set_title(\"Job Type reference x Age\", fontsize=15)\ng2.set_xlabel(\"Job Reference\", fontsize=12)\ng2.set_ylabel(\"Age\", fontsize=12)\n\nplt.subplots_adjust(hspace = 0.4,top = 0.9)\n\nplt.show()","f90428fe":"# Add histogram data\nx1 = np.log(df_good['Credit amount']) \nx2 = np.log(df_bad[\"Credit amount\"])\n\n# Group data together\nhist_data = [x1, x2]\n\ngroup_labels = ['Good Credit', 'Bad Credit']\ncolors = ['rgb(0, 0, 100)', 'rgb(0, 200, 200)']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, group_labels, bin_size=.1, colors=colors)\n\n# Plot!\npy.iplot(fig, filename='Distplot with Multiple Datasets')","8eb114dd":"#Ploting the good and bad dataframes in distplot\nplt.figure(figsize = (8,5))\n\ng= sns.distplot(df_good['Credit amount'], color='y')\ng = sns.distplot(df_bad[\"Credit amount\"], color='g')\ng.set_title(\"Credit Amount Frequency distribuition\", fontsize=18)\nplt.show()","9bb860cb":"count_good = go.Bar(x = df_good[\"Saving accounts\"].value_counts().index.values,\n                    y = df_good[\"Saving accounts\"].value_counts().values,\n                    name='Good credit')\ncount_bad = go.Bar(x = df_bad[\"Saving accounts\"].value_counts().index.values,\n                   y = df_bad[\"Saving accounts\"].value_counts().values,\n                   name='Bad credit')\n\n\nbox_1 = go.Box(x=df_good[\"Saving accounts\"],\n               y=df_good[\"Credit amount\"],\n               name='Good credit')\n\nbox_2 = go.Box(x=df_bad[\"Saving accounts\"],\n               y=df_bad[\"Credit amount\"],\n               name='Bad credit')\n\nscat_1 = go.Box(x=df_good[\"Saving accounts\"],\n                y=df_good[\"Age\"],\n                name='Good credit')\n\nscat_2 = go.Box(x=df_bad[\"Saving accounts\"],\n                y=df_bad[\"Age\"],\n                name='Bad credit')\n\ndata = [scat_1, scat_2, box_1, box_2, count_good, count_bad]\n\nfig = tls.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],\n                          subplot_titles=('Count Saving Accounts','Credit Amount by Savings Acc', \n                                          'Age by Saving accounts'))\n\nfig.append_trace(count_good, 1, 1)\nfig.append_trace(count_bad, 1, 1)\n\nfig.append_trace(box_2, 1, 2)\nfig.append_trace(box_1, 1, 2)\n\nfig.append_trace(scat_1, 2, 1)\nfig.append_trace(scat_2, 2, 1)\n\nfig['layout'].update(height=700, width=800, title='Saving Accounts Exploration', boxmode='group')\n\npy.iplot(fig, filename='combined-savings')\nplt.show()","4c8c0004":"print(\"Values describe: \")\nprint(pd.crosstab(df.Purpose, df.Risk))\n\nplt.figure(figsize = (14,12))\n\nplt.subplot(221)\ng = sns.countplot(x=\"Purpose\", data=df,palette=\"husl\", hue = \"Risk\")\n\ng.set_xticklabels(g.get_xticklabels(),rotation=45)\ng.set_xlabel(\"\", fontsize=12)\ng.set_ylabel(\"Count\", fontsize=12)\ng.set_title(\"Purposes Count\", fontsize=20)\n\nplt.subplot(222)\ng1 = sns.violinplot(x=\"Purpose\", y=\"Age\", data=df, \n                    palette=\"Blues\", hue = \"Risk\",split=True)\ng1.set_xticklabels(g1.get_xticklabels(),rotation=45)\ng1.set_xlabel(\"\", fontsize=12)\ng1.set_ylabel(\"Count\", fontsize=12)\ng1.set_title(\"Purposes by Age\", fontsize=20)\n\nplt.subplot(212)\ng2 = sns.boxplot(x=\"Purpose\", y=\"Credit amount\", data=df, \n               palette=\"Set2\", hue = \"Risk\")\ng2.set_xlabel(\"Purposes\", fontsize=12)\ng2.set_ylabel(\"Credit Amount\", fontsize=12)\ng2.set_title(\"Credit Amount distribuition by Purposes\", fontsize=20)\n\nplt.subplots_adjust(hspace = 0.6, top = 0.8)\n\nplt.show()","0ca5240d":"plt.figure(figsize = (12,14))\n\ng= plt.subplot(311)\ng = sns.countplot(x=\"Duration\", data=df, \n              palette=\"husl\",  hue = \"Risk\")\ng.set_xlabel(\"Duration Distribuition\", fontsize=12)\ng.set_ylabel(\"Count\", fontsize=12)\ng.set_title(\"Duration Count\", fontsize=20)\n\ng1 = plt.subplot(312)\ng1 = sns.pointplot(x=\"Duration\", y =\"Credit amount\",data=df,\n                   hue=\"Risk\", palette=\"Set2\")\ng1.set_xlabel(\"Duration\", fontsize=12)\ng1.set_ylabel(\"Credit Amount(US)\", fontsize=12)\ng1.set_title(\"Credit Amount distribuition by Duration\", fontsize=20)\n\ng2 = plt.subplot(313)\ng2 = sns.distplot(df_good[\"Duration\"], color='y')\ng2 = sns.distplot(df_bad[\"Duration\"], color='b')\ng2.set_xlabel(\"Duration\", fontsize=12)\ng2.set_ylabel(\"Frequency\", fontsize=12)\ng2.set_title(\"Duration Frequency x good and bad Credit\", fontsize=20)\n\nplt.subplots_adjust(wspace = 0.4, hspace = 0.4,top = 0.9)\n\nplt.show()","03340e61":"#First plot\ntrace0 = go.Bar(\n    x = df[df[\"Risk\"]== 'good'][\"Checking account\"].value_counts().index.values,\n    y = df[df[\"Risk\"]== 'good'][\"Checking account\"].value_counts().values,\n    name='Good credit Distribuition' \n    \n)\n\n#Second plot\ntrace1 = go.Bar(\n    x = df[df[\"Risk\"]== 'bad'][\"Checking account\"].value_counts().index.values,\n    y = df[df[\"Risk\"]== 'bad'][\"Checking account\"].value_counts().values,\n    name=\"Bad Credit Distribuition\"\n)\n\ndata = [trace0, trace1]\n\nlayout = go.Layout(\n    title='Checking accounts Distribuition',\n    xaxis=dict(title='Checking accounts name'),\n    yaxis=dict(title='Count'),\n    barmode='group'\n)\n\n\nfig = go.Figure(data=data, layout=layout)\nfig.data[0].marker.line.width = 4\nfig.data[0].marker.line.color = \"black\"\nfig.data[1].marker.line.width = 4\nfig.data[1].marker.line.color = \"black\"\npy.iplot(fig, filename = 'Age-ba', validate = False)","2b855170":"df_good = df[df[\"Risk\"] == 'good']\ndf_bad = df[df[\"Risk\"] == 'bad']\n\ntrace0 = go.Box(\n    y=df_good[\"Credit amount\"],\n    x=df_good[\"Checking account\"],\n    name='Good credit'\n)\n\ntrace1 = go.Box(\n    y=df_bad['Credit amount'],\n    x=df_bad['Checking account'],\n    name='Bad credit'\n    \n)\n    \ndata = [trace0, trace1]\n\nlayout = go.Layout(\n    yaxis=dict(\n        title='Cheking distribuition'\n    ),\n    boxmode='group'\n)\nfig = go.Figure(data=data, layout=layout)\n\npy.iplot(fig, filename='box-age-cat')","63bc8c74":"print(\"Total values of the most missing variable: \")\nprint(df.groupby(\"Checking account\")[\"Checking account\"].count())\n\nplt.figure(figsize = (12,10))\n\ng = plt.subplot(221)\ng = sns.countplot(x=\"Checking account\", data=df,palette=\"husl\", hue=\"Risk\")\ng.set_xlabel(\"Checking Account\", fontsize=12)\ng.set_ylabel(\"Count\", fontsize=12)\ng.set_title(\"Checking Account Counting by Risk\", fontsize=20)\n\ng1 = plt.subplot(222)\ng1 = sns.violinplot(x=\"Checking account\", y=\"Age\", data=df, palette=\"Set2\", hue = \"Risk\",split=True)\ng1.set_xlabel(\"Checking Account\", fontsize=12)\ng1.set_ylabel(\"Age\", fontsize=12)\ng1.set_title(\"Age by Checking Account\", fontsize=20)\n\ng2 = plt.subplot(212)\ng2 = sns.boxplot(x=\"Checking account\",y=\"Credit amount\", data=df,hue='Risk',palette=\"pastel\")\ng2.set_xlabel(\"Checking Account\", fontsize=12)\ng2.set_ylabel(\"Credit Amount(US)\", fontsize=12)\ng2.set_title(\"Credit Amount by Cheking Account\", fontsize=20)\n\nplt.subplots_adjust(wspace = 0.2, hspace = 0.3, top = 0.9)\n\nplt.show()","f54d13e5":"plt.figure(figsize = (10,6))\n\ng = sns.violinplot(x=\"Housing\",y=\"Job\",data=df,\n                   hue=\"Risk\", palette=\"deep\", as_cmap=True, split=True)\ng.set_xlabel(\"Housing\", fontsize=12)\ng.set_ylabel(\"Job\", fontsize=12)\ng.set_title(\"Housing x Job - Dist\", fontsize=20)\n\nplt.show()","a0e0447a":"print(\"Job status by gender\", pd.crosstab(df.Sex, df.Job), sep=\"\\n\\n\")\nprint(\"\\n\\n\\nAccount status by gender\\n\\n\", pd.crosstab(df[\"Checking account\"],df.Sex))","f202cc68":"def hist_for_nums(data, numeric_cols):\n    col_counter = 0\n    data = data.copy()\n    for col in numeric_cols:\n        data[col].plot.hist(alpha=0.5, color='y')\n        plt.xlabel(col)\n        plt.title(col)\n        plt.show()\n        col_counter += 1\n    print(col_counter, \"variables have been plotted\")\n\nhist_for_nums(df, num_cols)","b5639b9c":"df_good = df.loc[df[\"Risk\"] == 'good']['Age'].values.tolist()\ndf_bad = df.loc[df[\"Risk\"] == 'bad']['Age'].values.tolist()\ndf_age = df['Age'].values.tolist()\n\n#First plot\ntrace0 = go.Histogram(x=df_good,\n                      histnorm='probability',\n                      name=\"Good Credit\")\n#Second plot\ntrace1 = go.Histogram(x=df_bad,\n                      histnorm='probability',\n                      name=\"Bad Credit\")\n#Third plot\ntrace2 = go.Histogram(x=df_age,\n                      histnorm='probability',\n                      name=\"Overall Age\")\n\n#Creating the grid\nfig = tls.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],\n                          subplot_titles=('Good','Bad', 'General Distribuition'))\n\n#setting the figs\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\n\nfig['layout'].update(showlegend=True, title='Age Distribuition', bargap=0.05)\npy.iplot(fig, filename='custom-sized-subplot-with-subplot-titles')","75a56bf4":"df_good = df[df[\"Risk\"] == 'good']\ndf_bad = df[df[\"Risk\"] == 'bad']\n\nfig, ax = plt.subplots(nrows=2, figsize=(12,8))\nplt.subplots_adjust(hspace = 0.4, top = 0.8)\n\ng1 = sns.distplot(df_good[\"Age\"], ax=ax[0], color=\"g\")\ng1 = sns.distplot(df_bad[\"Age\"] , ax=ax[0], color='r')\ng1.set_title(\"Age Distribuition\", fontsize=15)\ng1.set_xlabel(\"Age\")\ng1.set_xlabel(\"Frequency\")\n\ng2 = sns.countplot(x=\"Age\",data=df, palette=\"hls\", ax=ax[1], hue = \"Risk\")\n\ng2.set_title(\"Age Counting by Risk\", fontsize=15)\ng2.set_xlabel(\"Age\")\ng2.set_xlabel(\"Count\")\nplt.show()","d8366d9f":"#Let's look the Credit Amount column\ninterval = (18, 25, 35, 60, 80)\n\ncats = ['Student', 'Young', 'Adult', 'Senior']\ndf[\"Age_cat\"] = pd.cut(df.Age, interval, labels=cats)\ndf.head()","658291db":"# And let's re-create \"df_bad\" dataframes with \"df_good\" we created.\ndf_good = df[df[\"Risk\"] == 'good']\ndf_bad = df[df[\"Risk\"] == 'bad']","df95c19d":"#First plot\ntrace0 = go.Bar(x = df[df[\"Risk\"]== 'good'][\"Housing\"].value_counts().index.values,\n                y = df[df[\"Risk\"]== 'good'][\"Housing\"].value_counts().values,\n                name='Good credit')\n\n#Second plot\ntrace1 = go.Bar(x = df[df[\"Risk\"]== 'bad'][\"Housing\"].value_counts().index.values,\n                y = df[df[\"Risk\"]== 'bad'][\"Housing\"].value_counts().values,\n                name=\"Bad Credit\")\n\ndata = [trace0, trace1]\n\nlayout = go.Layout(title='Housing Distribuition')\n\nfig = go.Figure(data=data, layout=layout)\nfig.data[0].marker.line.width = 4\nfig.data[0].marker.line.color = \"black\"\nfig.data[1].marker.line.width = 4\nfig.data[1].marker.line.color = \"black\"\n\npy.iplot(fig, filename='Housing-Grouped')","d5306474":"#First plot\ntrace0 = go.Bar(x = df[df[\"Risk\"]== 'good'][\"Sex\"].value_counts().index.values,\n                y = df[df[\"Risk\"]== 'good'][\"Sex\"].value_counts().values,\n                name='Good credit')\n\n#First plot 2\ntrace1 = go.Bar(x = df[df[\"Risk\"]== 'bad'][\"Sex\"].value_counts().index.values,\n                y = df[df[\"Risk\"]== 'bad'][\"Sex\"].value_counts().values,\n                name=\"Bad Credit\")\n\ndata = [trace0, trace1]\n\nlayout = go.Layout(title='Sex Distribuition')\n\nfig = go.Figure(data=data, layout=layout)\nfig.data[0].marker.line.width = 4\nfig.data[0].marker.line.color = \"black\"\nfig.data[1].marker.line.width = 4\nfig.data[1].marker.line.color = \"black\"\n\npy.iplot(fig, filename='Sex_Distribuition')","ea317244":"#First plot\ntrace0 = go.Bar(x = df[df[\"Risk\"]== 'good'][\"Job\"].value_counts().index.values,\n                y = df[df[\"Risk\"]== 'good'][\"Job\"].value_counts().values,\n                name='Good credit Distribuition')\n\n#Second plot\ntrace1 = go.Bar(x = df[df[\"Risk\"]== 'bad'][\"Job\"].value_counts().index.values,\n                y = df[df[\"Risk\"]== 'bad'][\"Job\"].value_counts().values,\n                name=\"Bad Credit Distribuition\")\n\ndata = [trace0, trace1]\n\nlayout = go.Layout(title='Job Distribuition')\n\nfig = go.Figure(data=data, layout=layout)\nfig.data[0].marker.line.width = 4\nfig.data[0].marker.line.color = \"black\"\nfig.data[1].marker.line.width = 4\nfig.data[1].marker.line.color = \"black\"\npy.iplot(fig, filename='grouped-bar')","b2efce90":"print(\"Description of Distribuition Saving accounts by Risk:  \")\nprint(pd.crosstab(df[\"Saving accounts\"],df.Risk))\n\nfig, ax = plt.subplots(3,1, figsize=(12,12))\ng = sns.countplot(x=\"Saving accounts\", data=df, palette=\"husl\", ax=ax[0],hue=\"Risk\")\ng.set_title(\"Saving Accounts Count\", fontsize=15)\ng.set_xlabel(\"Saving Accounts type\", fontsize=12)\ng.set_ylabel(\"Count\", fontsize=12)\n\ng1 = sns.violinplot(x=\"Saving accounts\", y=\"Job\", data=df, palette=\"Blues\", hue = \"Risk\", ax=ax[1],split=True)\ng1.set_title(\"Saving Accounts by Job\", fontsize=15)\ng1.set_xlabel(\"Savings Accounts type\", fontsize=12)\ng1.set_ylabel(\"Job\", fontsize=12)\n\ng = sns.boxplot(x=\"Saving accounts\", y=\"Credit amount\", data=df, ax=ax[2], hue = \"Risk\",palette=\"pastel\")\ng2.set_title(\"Saving Accounts by Credit Amount\", fontsize=15)\ng2.set_xlabel(\"Savings Accounts type\", fontsize=12)\ng2.set_ylabel(\"Credit Amount(US)\", fontsize=12)\n\nplt.subplots_adjust(hspace = 0.4,top = 0.9)\n\nplt.show()","1be457cc":"def missing_values_table(dataframe):\n    variables_with_na = [col for col in dataframe.columns if dataframe[col].isnull().sum() > 0]\n    n_miss = dataframe[variables_with_na].isnull().sum().sort_values(ascending=False)\n    ratio = (dataframe[variables_with_na].isnull().sum() \/ dataframe.shape[0] * 100).sort_values(ascending=False)\n    missing_df = pd.concat([n_miss, np.round(ratio, 2)], axis=1, keys=['n_miss', 'ratio'])\n    print(missing_df)\n    return variables_with_na\n##################################################################################################################\ndef outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.05)\n    quartile3 = dataframe[variable].quantile(0.95)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n##################################################################################################################\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n##################################################################################################################\ndef has_outliers(dataframe, num_col_names, plot=False):\n    variable_names = []\n    for col in num_col_names:\n        low_limit, up_limit = outlier_thresholds(dataframe, col)\n        if dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].any(axis=None):\n            number_of_outliers = dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].shape[0]\n            print(col, \":\", number_of_outliers)\n            variable_names.append(col)\n            if plot:\n                sns.boxplot(x=dataframe[col])\n                plt.show()\n    return variable_names\n##################################################################################################################\ndef rare_analyser(dataframe, categorical_columns, target, rare_perc):\n    rare_columns = [col for col in categorical_columns\n                    if (dataframe[col].value_counts() \/ len(dataframe) < rare_perc).any(axis=None)]\n    for var in rare_columns:\n        print(var, \" : \", len(dataframe[var].value_counts()))\n\n        print(pd.DataFrame({\"COUNT\": dataframe[var].value_counts(),\n                            \"RATIO\": dataframe[var].value_counts() \/ len(dataframe),\n                            \"TARGET_MEAN\": dataframe.groupby(var)[target].mean(),\n                            \"TARGET_MEDIAN\": dataframe.groupby(var)[target].median()}),\n              end=\"\\n\\n\\n\")\n\n    print(\"There are\",len(rare_columns), \"variables with rare classes.\")\n##################################################################################################################    \ndef label_encoder(dataframe, categorical_columns):\n    labelencoder = preprocessing.LabelEncoder()\n    for col in categorical_columns:\n        if dataframe[col].nunique() == 2:\n            dataframe[col] = labelencoder.fit_transform(dataframe[col])\n    return dataframe\n################################################################################################################## \ndef one_hot_encoder(dataframe, categorical_columns, nan_as_category=False):\n    original_columns = list(dataframe.columns)\n    dataframe = pd.get_dummies(dataframe, columns=categorical_columns,\n                               dummy_na=nan_as_category, drop_first=True)\n    new_columns = [col for col in dataframe.columns if col not in original_columns]\n    return dataframe, new_columns","7dc79d39":"df = pd.read_csv('..\/input\/german-credit-data-with-risk\/german_credit_data.csv', index_col=0)\ndf.head()","ea695615":"num_cols = [col for col in df.columns if df[col].dtypes != 'O' and col not in \"Id\"]\nprint(num_cols,\"\\n\")\nprint('Number of Numerical Variable: ', len(num_cols))","9514b8ee":"cat_cols = [col for col in df.columns if df[col].dtypes == 'O']\nprint(cat_cols,\"\\n\")\nprint('Number of Categoric Variable: ', len(cat_cols))","792abea0":"missing_values_table(df)","8167c577":"interval = (18, 25, 35, 60, 120)\ncats = ['Student', 'Young', 'Adult', 'Senior']\ndf[\"Age_cat\"] = pd.cut(df.Age, interval, labels=cats)\n\ndf[\"Saving accounts\"] = df.groupby([\"Sex\", \"Risk\", \"Age_cat\"])[\"Saving accounts\"].transform(\n    lambda x: x.fillna(x.mode()[0]))\n\n# Let's try to fill in the missing values \u200b\u200blogically by taking groupby.\ndf[\"Checking account\"] = df.groupby([\"Sex\", \"Risk\", \"Age_cat\"])[\"Checking account\"].transform(\n    lambda x: x.fillna(x.mode()[0]))","a721f588":"missing_values_table(df)","d31bd090":"has_outliers(df, [\"Age\", \"Credit amount\", \"Duration\"])","4d20f397":"label_columns = [\"Sex\", \"Risk\"]\nlabel_encoder(df, label_columns)","27752165":"temp_cat = [\"Sex\", \"Job\", \"Housing\", \"Saving accounts\", \"Checking account\", \"Duration\", \"Purpose\"]\nrare_analyser(df, temp_cat, \"Risk\", 0.5)","e0984d19":"df.loc[df[\"Duration\"] == 5, [\"Duration\"]] = 4\ndf.loc[df[\"Duration\"] == 7, [\"Duration\"]] = 4\ndf.loc[df[\"Duration\"] == 11, [\"Duration\"]] = 4\n\ndf.loc[df[\"Duration\"] == 8, [\"Duration\"]] = 6\ndf.loc[df[\"Duration\"] == 10, [\"Duration\"]] = 6\n\ndf.loc[df[\"Duration\"] == 12, [\"Duration\"]] = 9\n\ndf.loc[df[\"Duration\"] == 24, [\"Duration\"]] = 21\n\ndf.loc[df[\"Duration\"] == 28, [\"Duration\"]] = 27\ndf.loc[df[\"Duration\"] == 30, [\"Duration\"]] = 27\ndf.loc[df[\"Duration\"] == 33, [\"Duration\"]] = 27\n\ndf.loc[df[\"Duration\"] == 42, [\"Duration\"]] = 39\n\ndf.loc[df[\"Purpose\"] == \"domestic appliances\", [\"Purpose\"]] = \"furniture\/equipment\"\n\nrare_analyser(df, temp_cat, \"Risk\", 0.5)","9d7a875d":"# Deriving Year variable from Duration variable.\n# Thus, it will be understood how many years of customers there are.\ndf[\"Year\"] = str(df[\"Duration\"])\ndf.loc[df[\"Duration\"] <= 12, \"Year\"] = \"0-1 year\"\ndf.loc[(df[\"Duration\"] > 12) & (df[\"Duration\"] <= 24), \"Year\"] = \"1-2 year\"\ndf.loc[(df[\"Duration\"] > 24) & (df[\"Duration\"] <= 36), \"Year\"] = \"2-3 year\"\ndf.loc[(df[\"Duration\"] > 36) & (df[\"Duration\"] <= 48), \"Year\"] = \"3-4 year\"\ndf.loc[(df[\"Duration\"] > 48) & (df[\"Duration\"] <= 60), \"Year\"] = \"4-5 year\"\ndf.loc[(df[\"Duration\"] > 60) & (df[\"Duration\"] <= 72), \"Year\"] = \"5-6 year\"\ndf.loc[(df[\"Duration\"] > 72) & (df[\"Duration\"] <= 84), \"Year\"] = \"6-7 year\"\n\ndf[\"Status\"] = pd.qcut(df[\"Credit amount\"], 4, labels=[\"poor\", \"mid\", \"upper\", \"rich\"])\ndf.head()","2fea5325":"num_cols = [col for col in df.columns if df[col].dtypes != 'O']\nprint(num_cols)","b9dfe512":"num_cols = [col for col in df.columns if df[col].dtypes != 'O' and\n            col not in \"Risk\" and\n            col not in \"more_cat_cols\"]\nnum_cols","fc4e9821":"has_outliers(df, ['Age', 'Sex', 'Job','Duration'])","e9aff5f1":"one_hot_columns = [\"Job\",\"Housing\", \"Saving accounts\", \"Checking account\", \"Purpose\", \"Age_cat\", \"Year\",\"Status\"]\ndf, one_hot_encodeds = one_hot_encoder(df, one_hot_columns)\ndf.head()","7f1a6970":"like_num = [col for col in df.columns if df[col].dtypes != 'O' and len(df[col].value_counts()) < 20]\n\n\ncols_need_scale = [col for col in df.columns if col not in \"Risk\"\n                   and col not in \"Age\"\n                   and col not in \"Credit amount\"\n                   and col not in \"Duration\"\n                   and col not in like_num]\n\n\ndef robust_scaler(variable):\n    var_median = variable.median()\n    quartile1 = variable.quantile(0.05)\n    quartile3 = variable.quantile(0.95)\n    interquantile_range = quartile3 - quartile1\n    if int(interquantile_range) == 0:\n        quartile1 = variable.quantile(0.05)\n        quartile3 = variable.quantile(0.95)\n        interquantile_range = quartile3 - quartile1\n        z = (variable - var_median) \/ interquantile_range\n        return round(z, 3)\n    else:\n        z = (variable - var_median) \/ interquantile_range\n    return round(z, 3)\n\n\nfor col in cols_need_scale:\n    df[col] = robust_scaler(df[col])\n    \ndf.drop(\"Age\", axis=1, inplace = True)    \ndf.head()","6b239578":"X = df.drop(\"Risk\", axis=1)\ny = np.ravel(df[[\"Risk\"]])\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state = 357)","57ae9f4f":"X_train.head()","b2e586c0":"# Let's set the parameters to find the best parameter to use in our models. These parameters will be chosen as the best to visit with GridSearchCV.\nrf_params = {\"max_depth\": [3, 5, 8],\n             \"max_features\": [8, 15, 25],\n             \"n_estimators\": [200, 500, 1000],\n             \"min_samples_split\": [2, 5, 10]}\n\nlgbm_params = {\"learning_rate\": [0.01, 0.1],\n               \"n_estimators\": [200, 500, 1000],\n               \"max_depth\": [3, 5, 8],\n               \"colsample_bytree\": [1, 0.8, 0.5]}\n\nrf = RandomForestClassifier(random_state=357)\nlgbm = LGBMClassifier(random_state=357)\n\n# Let's try the parameters one by one with the help of GridSearchCV and find the best parameter.\ngs_cv_rf = GridSearchCV(rf, rf_params, cv=10, n_jobs=-1, verbose=2).fit(X_train, y_train)\ngs_cv_lgbm = GridSearchCV(lgbm, lgbm_params, cv=10, n_jobs=-1, verbose=2).fit(X_train, y_train)","04c84ab7":"ann = Sequential()\nann.add(Dense(X.shape[1], activation='relu', input_dim = X.shape[1]))\nann.add(Dense(254, activation='relu'))\nann.add(Dense(1, activation = 'sigmoid'))\nann.compile(optimizer='adam', loss = 'binary_crossentropy', metrics=['accuracy'])\n\nann_tuned = ann.fit(X_train, np.array(y_train), batch_size = 10, epochs = 10, verbose = 0)\nknn_tuned = KNeighborsClassifier().fit(X_train, y_train)\nsvm_tuned = SVC(random_state=357,gamma='auto').fit(X_train, y_train)\ngnb_tuned = GaussianNB().fit(X_train, y_train)\ndtc_tuned = DecisionTreeClassifier(random_state=357).fit(X_train, y_train)\n\n# Let's tune the models with the best parameters found.\nrf_tuned = RandomForestClassifier(**gs_cv_rf.best_params_, random_state=357).fit(X_train, y_train)\nlgbm_tuned = LGBMClassifier(**gs_cv_lgbm.best_params_, random_state=357).fit(X_train, y_train)","4b8b99bf":"# Result\nmodels = [(\"ANN\", ann_tuned),\n          (\"KNN\", knn_tuned),\n          (\"SVM\", svm_tuned),\n          (\"GNB\", gnb_tuned),\n          (\"DTC\", dtc_tuned),\n          (\"RF\", rf_tuned),\n          (\"LGBM\", lgbm_tuned)]\n\nfor name, model in models:\n    if name != \"ANN\":\n        y_pred = model.predict(X_test)\n        ann.evaluate(X_test, np.array(y_test),verbose = 0)\n    else:\n        y_pred = ann.predict_classes(X_test)\n    acc = accuracy_score(y_test, y_pred)\n    msg = \"%s: (%f)\" % (name, acc)\n    print(msg)","dc3d418b":"### 1.3. Numerical Variables","dbd8f95f":"## 3.1. Label Encoding","232d7d26":"# 1. EDA (Exploratory of Data Analysis)\n## 1.1. Data Preperation","cc5b3fd7":"## 2.2. Outlies Analysis","fd2a5828":"## 2.1. Missing Value Analysis","c6add78e":"\n<font size=\"5\"><center><b>  CREDIT RISK ESTIMATION WITH MACHINE LEARNING AND ARTIFICIAL NEURAL NETWORKS ALGORITHMS <\/b><\/center><\/font>\n\n<center><img src=\"https:\/\/i.hizliresim.com\/4mmw6x6.png\" style=\"width:30%;height:10%;\"><\/center>\n\n<center>One of the most important services of banks that attract their customers is credit. If  the prices of customers special needs has high prices, customers usually pay by credit. For this reason, many credit applications are made to banks. Banks compare various  information of customers while giving credit. As a result of this comparison, it gives credit  to the customer or not. Banks can give credit to customers in the long term. If the total  repayment amount of the credit given in the long term is too high with the interest,  sometimes customers cannot pay back. This situation causes the bank to money loss. Therefore, banks must sure that customers can repay their credit. <\/center>\n\n\n\n## Features\n<center>This dataset is available on the kaggle platform. The aim is to determine the risk of a bank credit given to customers. The risk status of the customers for the new credit will be determined by using some machine learning, artificial neural network model with this dataset. The dataset includes the following features:<\/center>\n\n<p> <b>Age:<\/b> This variable bank contains the age information of the customers.<\/p>\n<p> <b>Sex:<\/b> This variable contains the gender information of the bank customers.<\/p>\n<p> <b>Job:<\/b> This variable contains occupational information of bank customers. Professions are divided into four categories according to skill level. (0 - unskilled and non\u0002resident, 1 - unskilled and resident, 2 - skilled, 3 - highly skilled)<\/p>\n<p> <b>Housing:<\/b> This variable includes the housing status of the bank customers.<\/p>\n<p> <b>Saving Accounts:<\/b> This variable bank contains customers savings information.Customers savings are classified as little, moderate, quite rich, rich.<\/p>\n<p> <b>Checking Accounts:<\/b> This variable show the cash in the accounts of bank customers.<\/p>\n<p> <b>Credit Amount:<\/b> This variable shows how much credit the bank customers get. \n<p> <b>DM :Dustsch Mark<\/b> is used as currency.<\/p>\n<p> <b>Duration:<\/b> This variable contains the specified time to pay the credit.<\/p>\n<p> <b>Purpose:<\/b> This variable shows the purpose for which the bank customer taking  credit. Taking credit by customers are classified as car, furniture \/ equipment, radio \/ TV, domestic appliances, repairs, education, business, vacation \/ others.<\/p>\n<p> <b>Risk:<\/b> This variable contains the customers risk information. Customers in the Data  Set have previously taken credit from banks. A value of 1 was given for customers who paid the credit and 0 for customers who could not.<\/p>","a1b59b05":"### 1.2. Categorical Variable","5826e916":"### 1.4. Data Visualization","9d8a1aa1":"# 3.Feature Engineering","2f238da9":"### 1.5. Numerical Variable Analysis","780994b8":"# 4.Model","60f145ef":"# 2. Data Preprocessing","b90b2fea":"## 2.3. Rare Analysis","ff2c4965":"### All Functions"}}