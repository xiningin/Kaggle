{"cell_type":{"dcb923d7":"code","62e95127":"code","cf864f30":"code","3bcea1d6":"code","cc264ec6":"code","e277fe4f":"code","64a445ef":"code","9fbbe4f4":"code","90a26648":"code","4fcd7235":"code","c791754e":"code","8d48588f":"code","b37cde05":"code","53df33ce":"code","e5e355ed":"code","ac572b74":"code","be2c009e":"code","e4c96d6e":"code","7bdf944e":"code","b78de5ec":"code","91e3370c":"code","d7e1b119":"code","67de81ce":"code","357d0811":"code","9771fd11":"code","0c55c5a9":"code","6ceb81be":"code","bf4923a8":"code","277160ed":"code","83162cad":"code","7905bde8":"markdown","9d6b3847":"markdown","1d2f89c5":"markdown","38e554cc":"markdown","9ead8084":"markdown","9a8a89f1":"markdown","ecf1b471":"markdown","3b73b5b9":"markdown","5003e047":"markdown","a73931ae":"markdown","3a2374a2":"markdown","a691e2bc":"markdown","e7ed0736":"markdown","e8606ce7":"markdown","3e96498d":"markdown","7a46f279":"markdown","980ad17b":"markdown","6e406baf":"markdown","3b71cbf3":"markdown","5761e98d":"markdown","d9046bfa":"markdown","faf43b35":"markdown","cf3612ce":"markdown","126ae85a":"markdown","05591263":"markdown"},"source":{"dcb923d7":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom datetime import datetime\nfrom sklearn.model_selection import train_test_split\n\nimport statsmodels.api as sm\nfrom statsmodels.tsa.arima_model import ARIMA\n\n%matplotlib inline\n\n# We are required to do this in order to avoid \"FutureWarning\" issues.\nfrom pandas.plotting import register_matplotlib_converters\nregister_matplotlib_converters()","62e95127":"cov = pd.read_csv('..\/input\/covid19-global-forecasting-week-1\/train.csv')","cf864f30":"cov.head()","3bcea1d6":"cov.info()","cc264ec6":"cov.describe()","e277fe4f":"cov['Date']","64a445ef":"cov_confirmed = cov.groupby('Date')[['ConfirmedCases']].sum()","9fbbe4f4":"cov_confirmed.tail()","90a26648":"# Code modified from code written by Matthew Garton.\n\ndef plot_series(cov_confirmed, cols=None, title='Title', xlab=None, ylab=None, steps=1):\n    \n    # Set figure size to be (18, 9).\n    plt.figure(figsize=(18,9))\n    \n    # Iterate through each column name.\n    for col in cols:\n            \n        # Generate a line plot of the column name.\n        # You only have to specify Y, since our\n        # index will be a datetime index.\n        plt.plot(cov_confirmed[col])\n        \n    # Generate title and labels.\n    plt.title(title, fontsize=26)\n    plt.xlabel(xlab, fontsize=20)\n    plt.ylabel(ylab, fontsize=20)\n    \n    # Enlarge tick marks.\n    plt.yticks(fontsize=18)\n    plt.xticks(cov_confirmed.index[0::steps], fontsize=18);","4fcd7235":"# Generate a time plot.\nplot_series(cov_confirmed, ['ConfirmedCases'], title = 'Worldwide Count of Confirmed COVID-19 Cases', steps = 14)","c791754e":"# first 5 values of the COVID-19 series.\ncov_confirmed['ConfirmedCases'][0:5]","8d48588f":"cov_confirmed['ConfirmedCases'][:5].diff(1)","b37cde05":"cov_confirmed['ConfirmedCases'][:5].diff(1).diff(1)","53df33ce":"cov_confirmed['ConfirmedCases'][:5].diff(1).diff(1).diff(1)","e5e355ed":"cov_confirmed['first_diff_confirmed'] = cov_confirmed['ConfirmedCases'].diff(1)\ncov_confirmed['second_diff_confirmed'] = cov_confirmed['ConfirmedCases'].diff(1).diff(1)\ncov_confirmed['third_diff_confirmed'] = cov_confirmed['ConfirmedCases'].diff(1).diff(1).diff(1)\ncov_confirmed.head()","ac572b74":"# Examine confirmed cases, differenced once.\nplot_series(cov_confirmed,\n            ['first_diff_confirmed'],\n            title = \"Change in Confirmed Cases from Day to Day\",\n            steps=14)","be2c009e":"# Examine confirmed cases, differenced twice.\nplot_series(cov_confirmed,\n            ['second_diff_confirmed'],\n            title = \"Change in Confirmed Cases from Day to Day\",\n            steps=14)","e4c96d6e":"# Examine confirmed cases, differenced thrice.\nplot_series(cov_confirmed,\n            ['third_diff_confirmed'],\n            title = \"Change in Confirmed Cases from Day to Day\",\n            steps=14)","7bdf944e":"# Import Augmented Dickey-Fuller test.\nfrom statsmodels.tsa.stattools import adfuller\n\n# Run ADF test on original (non-differenced!) data.\nadfuller(cov_confirmed['ConfirmedCases'])","b78de5ec":"# Code written by Joseph Nelson.\n\ndef interpret_dftest(dftest):\n    dfoutput = pd.Series(dftest[0:2], index=['Test Statistic','p-value'])\n    return dfoutput","91e3370c":"# Run ADF test on original (non-differenced!) data.\n\ninterpret_dftest(adfuller(cov_confirmed['ConfirmedCases']))","d7e1b119":"# Run the ADF test on our once-differenced data.\ninterpret_dftest(adfuller(cov_confirmed['first_diff_confirmed'].dropna()))","67de81ce":"# Run the ADF test on our twice-differenced data.\ninterpret_dftest(adfuller(cov_confirmed['second_diff_confirmed'].dropna()))","357d0811":"# Create train-test split.\ny_train, y_test = train_test_split(cov_confirmed['second_diff_confirmed'], test_size=0.1, shuffle=False)","9771fd11":"# Starting AIC, p, and q.\nbest_aic = 99 * (10 ** 16)\nbest_p = 0\nbest_q = 0\n# Use nested for loop to iterate over values of p and q.\nfor p in range(5):\n    for q in range(5):\n        # Insert try and except statements.\n        try:\n            # Fitting an ARIMA(p, 2, q) model.\n            print(f'Attempting to fit ARIMA({p}, 2, {q}).')\n            # Instantiate ARIMA model.\n            arima = ARIMA(endog = y_train.dropna(), # endog = Y variable\n                          order = (p, 2, q)) # values of p, d, q\n            # Fit ARIMA model.\n            model = arima.fit()\n            # Print out AIC for ARIMA(p, 2, q) model.\n            print(f'The AIC for ARIMA({p},2,{q}) is: {model.aic}')\n            # Is my current model's AIC better than our best_aic?\n            if model.aic < best_aic:\n                # If so, let's overwrite best_aic, best_p, and best_q.\n                best_aic = model.aic\n                best_p = p\n                best_q = q\n        except:\n            pass\nprint()\nprint()\nprint('MODEL FINISHED!')\nprint(f'Our model that minimizes AIC on the training data is the ARIMA({best_p},2,{best_q}).')\nprint(f'This model has an AIC of {best_aic}.')","0c55c5a9":"# Instantiate best model.\nmodel = ARIMA(endog = y_train.dropna(),  # Y variable\n              order = (4, 2, 2))\n# Fit ARIMA model.\narima = model.fit()\n# Generate predictions based on test set.\npreds = model.predict(params = arima.params,\n                      start = y_test.index[0],\n                      end = y_test.index[-1])\n# Plot data.\nplt.figure(figsize=(12,8))\n# Plot training data.\nplt.plot(y_train.index, pd.DataFrame(y_train).diff(), color = 'blue')\n# Plot testing data.\nplt.plot(y_test.index, pd.DataFrame(y_test).diff(), color = 'orange')\n# Plot predicted test values.\nplt.plot(y_test.index, preds, color = 'green')\nplt.title(label = 'Twice-Differenced Confirmed Cases with ARIMA(0, 2, 1) Predictions', fontsize=16)\nplt.show();","6ceb81be":"cov_fatal = cov.groupby('Date')[['Fatalities']].sum()","bf4923a8":"cov_fatal.tail()","277160ed":"# Code modified from code written by Matthew Garton.\n\ndef plot_series(cov_fatal, cols=None, title='Title', xlab=None, ylab=None, steps=1):\n    \n    # Set figure size to be (18, 9).\n    plt.figure(figsize=(18,9))\n    \n    # Iterate through each column name.\n    for col in cols:\n            \n        # Generate a line plot of the column name.\n        # You only have to specify Y, since our\n        # index will be a datetime index.\n        plt.plot(cov_fatal[col])\n        \n    # Generate title and labels.\n    plt.title(title, fontsize=26)\n    plt.xlabel(xlab, fontsize=20)\n    plt.ylabel(ylab, fontsize=20)\n    \n    # Enlarge tick marks.\n    plt.yticks(fontsize=18)\n    plt.xticks(cov_confirmed.index[0::steps], fontsize=18);","83162cad":"# Generate a time plot.\nplot_series(cov_fatal, ['Fatalities'], title = 'Worldwide Count of COVID-19 Fatalities', steps = 14)","7905bde8":"## Create a modified dataframe that lists Date as the index and another column with the sum of the Confirmed cases from all countries on each date.","9d6b3847":"## Grid Search to determeine best p and q","1d2f89c5":"## Still trending upward, lets look at the second diff","38e554cc":"## Now, the second diff provides a p-value that is significantly lower than 0.01 - we'll go with this one. No need to even bother testing the third diff.\n","9ead8084":"## Read in the training data and look at the head","9a8a89f1":"## Instantiate Best Model and Plot the Data","ecf1b471":"### Difference to generate a stationary model that can be forecasted","3b73b5b9":"## First 5 values of the COVID-19 series differenced thrice.","5003e047":"## First 5 values of the COVID-19 series differenced twice.","a73931ae":"## with an alpha of 0.01, a p-value of nearly 1 is too high, lets look at the results of the first diff","3a2374a2":"### Create train-test split","a691e2bc":"## Now to have a look at the fatalities using the same methods...... future work","e7ed0736":"## The Third Diff looks stationary, lets test them all with Augmented Dickey Fuller test","e8606ce7":"## Generate plot of Worldwide Confirmed Cases of COVID-19","3e96498d":"## First 5 values of the COVID-19 series differenced once.","7a46f279":"## Time to interpret the results","980ad17b":"## Looking better, but still a slight upward trend, lets try one more","6e406baf":"## Starting with the non-differenced data","3b71cbf3":"## The p-value appears to be 1 for the first diff as well","5761e98d":"## Fit an Arima Model using d=2","d9046bfa":"## Plot first diff to see how much more stationary the data looks","faf43b35":"# Predicting Daily Forecast of Confirmed COVID-19 Cases and Fatalities\n***\n## Import Packages","cf3612ce":"## Create a plot_series function to generate line plots with 4 basic arguments","126ae85a":"## Create first_diff_confirmed and second_diff_confirmed columns in cov_confirmed","05591263":"## Our training data has 8 columns and 170,040 rows (cases). Its arannged by country in alphabetical order with each country displaying all dates from January 22nd until March 21st."}}