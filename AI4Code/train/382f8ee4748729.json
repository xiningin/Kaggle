{"cell_type":{"949aacdc":"code","e7974ad5":"code","7a74b2b1":"code","96dfd345":"code","9fab7a31":"code","6dcbf148":"code","aef110f9":"code","59ae8cab":"code","999690ff":"code","f0e86630":"code","ab12db43":"code","9522cd72":"code","dd3404d2":"code","d7384cf2":"code","4cbe322b":"code","bc231111":"code","5a6bfe5a":"code","29dd3a5b":"code","7629bb2e":"code","4ea159e3":"code","50ba69c2":"code","a979cf43":"code","fe692d7f":"code","1aa5faba":"markdown","76bde821":"markdown","5fc5ddd4":"markdown","9808df08":"markdown","dddad99e":"markdown","1527b235":"markdown","6f26325a":"markdown"},"source":{"949aacdc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e7974ad5":"import seaborn as sns\nsns.set(style=\"darkgrid\")\n\n# to make this notebook's output stable across runs\nnp.random.seed(42)\n\n# To plot figures\n%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\nplt.rcParams['axes.labelsize'] = 14\nplt.rcParams['xtick.labelsize'] = 12\nplt.rcParams['ytick.labelsize'] = 12\n\nimport warnings\nwarnings.filterwarnings(action=\"ignore\")","7a74b2b1":"def load_digit_data(filename, house_path):\n    csv_path = os.path.join(house_path, filename)\n    return pd.read_csv(csv_path)","96dfd345":"train_data = load_digit_data('train.csv',\"..\/input\")","9fab7a31":"digits = train_data.copy()","6dcbf148":"digits.head()","aef110f9":"X_train = digits.drop(['label'], axis=1).values\ny_train = digits['label']\nprint(X_train.shape)\nprint(y_train.shape)","59ae8cab":"X_valid, X_train = X_train[:5000], X_train[5000:]\ny_valid, y_train = y_train[:5000], y_train[5000:]","999690ff":"some_digit = X_train[3]\nsome_digit_image = some_digit.reshape(28, 28)\nplt.imshow(some_digit_image, cmap = matplotlib.cm.binary,\n           interpolation=\"nearest\")\nplt.axis(\"off\")\nplt.show()","f0e86630":"# EXTRA\ndef plot_digits(instances, images_per_row=10, **options):\n    size = 28\n    images_per_row = min(len(instances), images_per_row)\n    images = [instance.reshape(size,size) for instance in instances]\n    n_rows = (len(instances) - 1) \/\/ images_per_row + 1\n    row_images = []\n    n_empty = n_rows * images_per_row - len(instances)\n    images.append(np.zeros((size, size * n_empty)))\n    for row in range(n_rows):\n        rimages = images[row * images_per_row : (row + 1) * images_per_row]\n        row_images.append(np.concatenate(rimages, axis=1))\n    image = np.concatenate(row_images, axis=0)\n    plt.imshow(image, cmap = matplotlib.cm.binary, **options)\n    plt.axis(\"off\")","ab12db43":"plt.figure(figsize=(9,9))\nexample_images = np.r_[X_train[:12000:600], X_train[13000:30600:600], X_train[30600:60000:590]]\nplot_digits(example_images, images_per_row=10)\nplt.show()","9522cd72":"# reshape and scale data\nX_train = X_train.reshape(X_train.shape[0], 28, 28, 1)\nX_train = X_train \/ 255\n\nX_valid = X_valid.reshape(X_valid.shape[0], 28, 28, 1)\nX_valid = X_valid \/ 255","dd3404d2":"import tensorflow as tf\ntf.__version__","d7384cf2":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Flatten(),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\nmodel.summary()","4cbe322b":"early_stopping_cb = tf.keras.callbacks.EarlyStopping(patience=5)\ncheckpoint_cb = tf.keras.callbacks.ModelCheckpoint(\"cnn.h5\", save_best_only=True)\n\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n\nhistory = model.fit(X_train, y_train, epochs=100, validation_data=(X_valid, y_valid), callbacks=[early_stopping_cb, checkpoint_cb])","bc231111":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend(loc=0)\nplt.show()","5a6bfe5a":"test_data = load_digit_data('test.csv','..\/input')\ntest_data.head()","29dd3a5b":"model = tf.keras.models.load_model(\"cnn.h5\") # rollback to best model\nmodel.evaluate(X_valid, y_valid)","7629bb2e":"X_test = test_data.values\nX_test = X_test.reshape(X_test.shape[0], 28, 28, 1)\nX_test = X_test \/ 255\n\ny_pred = model.predict(X_test, batch_size=32)","4ea159e3":"print(y_pred.shape)\ny_pred[:2]","50ba69c2":"test_data['Label'] = np.argmax(y_pred, axis=1)\ntest_data['ImageId']= np.arange(1, len(test_data)+1)\ntest_data[['ImageId','Label']].head(10)","a979cf43":"idx = 4\nlabel = test_data['Label'].values[idx]\nsome_digit = test_data.drop(['ImageId','Label'], axis=1).values[idx].reshape(28, 28)\nplt.imshow(some_digit, cmap = matplotlib.cm.binary, interpolation=\"nearest\")\nplt.title('Digit {}'.format(label))\nplt.axis(\"off\")\nplt.show()","fe692d7f":"test_data[['ImageId','Label']].to_csv('submission.csv', index=False)","1aa5faba":"<a id=\"exploration\"><\/a>\n# Explore MNIST Dataset","76bde821":"<a id=\"get_data\"><\/a>\n# Get the Data","5fc5ddd4":"# Table of Contents\n* [Setup](#setup)\n* [Get the Data](#get_data)\n* [Explore MNIST Dataset](#exploration)\n* [Convolutional Neural Networks](#cnn)\n* [Make Predictions](#predictions)","9808df08":"<a id=\"cnn\"><\/a>\n# Convolutional Neural Networks","dddad99e":"<h1 align=center><font size = 4>MNIST Digit Recognizer<\/font><\/h1>\n<h1 align=center><font size = 5>Model Multi-Label Classifiers<\/font><\/h1>","1527b235":"<a id=\"predictions\"><\/a>\n# Make Predictions","6f26325a":"<a id=\"setup\"><\/a>\n# Setup"}}