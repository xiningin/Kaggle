{"cell_type":{"2b197061":"code","0de9e377":"code","037463bf":"code","929463a8":"code","58983ebc":"code","6af9b0df":"code","2c6ec6fd":"code","9c278539":"code","e7468e36":"code","b56872ec":"code","955f3ab8":"code","df8a9fff":"code","878f1c9c":"code","11ec9304":"code","960c7db4":"code","6a6827ae":"code","83593b9d":"code","ec1e6d8e":"code","a68006cf":"markdown","a5a5c81b":"markdown","ad7f7508":"markdown","c9e2d012":"markdown","c8473ba1":"markdown","9940b578":"markdown","7fc058df":"markdown"},"source":{"2b197061":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport matplotlib.image as immg\nfrom pathlib import Path\nimport os\nimport gc\nimport cv2\nfrom tqdm.notebook import tqdm\nimport zipfile\nimport io\nfrom sklearn.decomposition import PCA","0de9e377":"img_dir = Path('..\/input\/ranzcr-clip-catheter-line-classification\/train')","037463bf":"df = pd.read_csv(\"..\/input\/ranzcr-clip-catheter-line-classification\/train.csv\")","929463a8":"df.head()","58983ebc":"df.shape","6af9b0df":"files = [str(x)+'.jpg' for x in df.StudyInstanceUID.tolist()]","2c6ec6fd":"files[0]","9c278539":"img = immg.imread(img_dir\/files[0]);img.shape","e7468e36":"plt.figure(1,figsize=(20,8))\nplt.subplot(121)\nplt.imshow(img);\nplt.subplot(122)\nplt.imshow(img,cmap='gray');","b56872ec":"OUT_TRAIN = 'trainXray_512.zip'","955f3ab8":"x_tot,x2_tot = [],[]\nwith zipfile.ZipFile(OUT_TRAIN, 'w') as img_out:\n    for idx in tqdm(range(len(files))):\n        name = str(files[idx])[:-4]\n        img = cv2.imread(str(img_dir\/files[idx]), 1) \n        img = cv2.resize(img, (512, 512))\n        x_tot.append((img\/255.0).mean())\n        x2_tot.append(((img\/255.0)**2).mean()) \n        \n        img = cv2.imencode('.jpg',img)[1]\n        img_out.writestr(name + '.jpg', img)","df8a9fff":"img_avr =  np.array(x_tot).mean()\nimg_std =  np.sqrt(np.array(x2_tot).mean() - img_avr**2)\nprint('mean:',img_avr, ', std:', img_std)","878f1c9c":"OUT_TRAIN = 'trainXray_256.zip'","11ec9304":"x_tot,x2_tot = [],[]\nwith zipfile.ZipFile(OUT_TRAIN, 'w') as img_out:\n    for idx in tqdm(range(len(files))):\n        name = str(files[idx])[:-4]\n        img = cv2.imread(str(img_dir\/files[idx]), 1) \n        img = cv2.resize(img, (256, 256))\n        x_tot.append((img\/255.0).mean())\n        x2_tot.append(((img\/255.0)**2).mean()) \n        \n        img = cv2.imencode('.jpg',img)[1]\n        img_out.writestr(name + '.jpg', img)","960c7db4":"img_avr =  np.array(x_tot).mean()\nimg_std =  np.sqrt(np.array(x2_tot).mean() - img_avr**2)\nprint('mean:',img_avr, ', std:', img_std)","6a6827ae":"OUT_TRAIN = 'trainXray_128.zip'","83593b9d":"x_tot,x2_tot = [],[]\nwith zipfile.ZipFile(OUT_TRAIN, 'w') as img_out:\n    for idx in tqdm(range(len(files))):\n        name = str(files[idx])[:-4]\n        img = cv2.imread(str(img_dir\/files[idx]), 1) \n        img = cv2.resize(img, (128, 128))\n        x_tot.append((img\/255.0).mean())\n        x2_tot.append(((img\/255.0)**2).mean()) \n        \n        img = cv2.imencode('.jpg',img)[1]\n        img_out.writestr(name + '.jpg', img)","ec1e6d8e":"img_avr =  np.array(x_tot).mean()\nimg_std =  np.sqrt(np.array(x2_tot).mean() - img_avr**2)\nprint('mean:',img_avr, ', std:', img_std)","a68006cf":"## Sample Image","a5a5c81b":"* lets see a sample image size","ad7f7508":"## Resizing 128x128","c9e2d012":"# Resizing image for faster training","c8473ba1":"## Saving 256x256","9940b578":"## So I will reduce and save to 512x512 of its size","7fc058df":"## Image stats"}}