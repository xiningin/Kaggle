{"cell_type":{"97977600":"code","218706ec":"code","acdeccb2":"code","32d1845d":"code","daeec84d":"code","1554528d":"code","62841993":"code","e569913f":"code","df80582b":"code","c02aa5f2":"code","f44de438":"code","fb3c03aa":"code","ce99c44a":"code","49132be3":"code","90d101f6":"code","7d94bacc":"code","4bfa38c4":"code","344d3fa4":"code","74a8725d":"code","51284a1b":"code","ceca3de4":"code","7e955168":"code","adc6e2ac":"code","1db3c285":"code","5bc7b570":"code","af13b299":"code","b9989417":"code","a5bd0410":"markdown","db64d1e4":"markdown","23788a91":"markdown","ad385b84":"markdown","4fdd25e1":"markdown","270d1ee4":"markdown","50eeaafb":"markdown","a121fb31":"markdown","944cb715":"markdown","ea844bee":"markdown","b68938bd":"markdown","2982f1be":"markdown","818bb102":"markdown","122c891c":"markdown","8bc0c650":"markdown","d8ba0e66":"markdown","d2d0baf4":"markdown","26d599a4":"markdown","838e91b9":"markdown","003ccca2":"markdown","9004bd36":"markdown","0399efda":"markdown","679f881d":"markdown","c38ebd8a":"markdown","fd691cd7":"markdown","0577e3c4":"markdown","c67c5626":"markdown","5a10b7ba":"markdown","7e9568f0":"markdown","c6d54cfb":"markdown","f21e3233":"markdown"},"source":{"97977600":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt # plotting\nimport seaborn as sns # advanced plotting\n\nimport datetime as dt # date processing","218706ec":"df_train   = pd.read_csv('\/kaggle\/input\/desafio-falconi-i\/train.csv', parse_dates=['date'])\ndf_test    = pd.read_csv('\/kaggle\/input\/desafio-falconi-i\/test.csv', parse_dates=['date'])\ndf_product = pd.read_csv('\/kaggle\/input\/desafio-falconi-i\/product.csv')\ndf_events  = pd.read_csv('\/kaggle\/input\/desafio-falconi-i\/events.csv', parse_dates=['date'])","acdeccb2":"# Combina as tabelas de treino, produto e feriados em uma \u00fanica tabela\ndf = df_train.merge(df_product)\ndf = df.merge(df_events.drop_duplicates(subset='date', keep='first'), how='left', on='date').fillna('Dia Letivo')\n\n# Cria novas colunas\ndf['revenue'] = df['sale_quantity']*df['week_avg_price']\ndf['month-year'] = df['date'].dt.to_period('M')\n\ndf.head()","32d1845d":"def show_values_on_bars(axs, h_v=\"v\", space=0):\n    def _show_on_single_plot(ax):\n        if h_v == \"v\":\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() \/ 2\n                _y = p.get_y() + p.get_height() + float(space)\n                value = int(p.get_height())\n                ax.text(_x, _y, value, ha=\"center\") \n        elif h_v == \"h\":\n            for p in ax.patches:\n                _x = p.get_x() + p.get_width() + float(space)\n                _y = p.get_y() + p.get_height()\n                value = int(p.get_width())\n                ax.text(_x, _y, value, ha=\"left\")\n\n    if isinstance(axs, np.ndarray):\n        for idx, ax in np.ndenumerate(axs):\n            _show_on_single_plot(ax)\n    else:\n        _show_on_single_plot(axs)","daeec84d":"fig = plt.figure(figsize=(10,7))\ndf_aux = df.cod_store.value_counts().sort_index()\nax = sns.barplot(x=df_aux.index , y=df_aux)\nfig.add_axes(ax)\nshow_values_on_bars(ax)\nplt.show()","1554528d":"fig = plt.figure(figsize=(10,7))\ndf_aux = df.groupby('cod_store')['cod_product'].nunique().sort_index()\nax = sns.barplot(x=df_aux.index , y=df_aux)\nfig.add_axes(ax)\nshow_values_on_bars(ax)\nplt.show()","62841993":"df_aux = df.groupby('cod_store').agg({'date': ['min', 'max']})\ndf_aux","e569913f":"df_aux = df.groupby(['cod_store', 'date'])[['sale_quantity', 'revenue']].sum().reset_index()\nfig, axes = plt.subplots(2, 1, figsize=(20,15))\nsns.lineplot(x=df_aux.date, y=df_aux.sale_quantity, hue=df_aux.cod_store, ax=axes[0], palette='pastel')\naxes[0].set_title('Sales x Time')\nsns.lineplot(x=df_aux.date, y=df_aux.revenue, hue=df_aux.cod_store, ax=axes[1], palette='pastel')\naxes[1].set_title('Revenue x Time')\nplt.show()","df80582b":"# Datas que temos certeza que envolvem o intervalo sem vendas da loja 2\nsup_limit = dt.datetime(day=1, month=12, year=2020)\ninf_limit = dt.datetime(day=1, month=3, year=2020)\n\n#Delimitando o intervalo desejado\ndf_filtered = df[(df.date > inf_limit) & (df.date < sup_limit) & (df.cod_store==2)]\n\n#Agrupando por data\ndf_grouped = df_filtered[['date', 'sale_quantity', 'cod_store']].groupby('date').agg({'cod_store': 'first', 'sale_quantity': 'sum'})\n\n#Filtrando por valor\ndf_grouped = df_grouped[df_grouped.sale_quantity == 0].reset_index()\n\ndf_grouped","c02aa5f2":"df_grouped = df_grouped.drop(columns=['sale_quantity'])\ndf_merged = df.merge(df_grouped, on=['cod_store', 'date'], how='left', indicator=True)\ndf_merged = df_merged[df_merged._merge == 'left_only'].drop(columns=['_merge'])\ndf_filtered = df_merged.reset_index(drop=True)\ndf_filtered","f44de438":"fig = plt.figure(figsize=(10,7))\ndf_aux = df_filtered.cod_store.value_counts().sort_index()\nax = sns.barplot(x=df_aux.index , y=df_aux)\nfig.add_axes(ax)\nshow_values_on_bars(ax)\nplt.show()","fb3c03aa":"ax = df.groupby(['cod_store','month-year']).agg({'revenue':'sum'}).unstack()['revenue'].transpose().plot(figsize=(18,7))\nax.set_title(\"Receita mensal estimada por loja\")\nplt.show()","ce99c44a":"df_grouped = df.groupby(['cod_store','category']).agg({'revenue':'sum'}).rename(columns={'revenue':'% share revenue'})\ndf_grouped = df_grouped \/ df_grouped.groupby(['cod_store']).transform('sum')\n\nfig = plt.figure(figsize=(10,7))\nax = sns.barplot(x='% share revenue',y='category', data=df_grouped.reset_index(), hue='cod_store')\nfig.add_axes(ax)\nplt.show()","49132be3":"fig = plt.figure(figsize=(10,7))\ntop_products = df.groupby(['category','subcategory'])['revenue'].sum().reset_index().sort_values(['category','revenue'], ascending=False).groupby('category').head(3)\nax = sns.barplot(x='revenue',y='subcategory', data=top_products, hue='category')\nfig.add_axes(ax)\nplt.show()","90d101f6":"def add_var_sazonais(df):\n    df['week_day'] = df.date.dt.weekday.astype('int16')\n    df['year'] = df.date.dt.year.astype('int16')\n    df['month'] = df.date.dt.month.astype('int16')\n    df['week'] = df.date.dt.isocalendar().week.astype('int16')\n    df['month_week'] = df.date.apply(lambda d: (d.day-1) \/\/ 7 + 1)\n    df['month_day'] = df.date.dt.day.astype('int16')\n\nadd_var_sazonais(df)\nadd_var_sazonais(df_filtered)\n\ndf_filtered","7d94bacc":"def plot_boxplots(df, y, x, hue=None, figsize=(20, 7)):\n    \n    n_columns = 2 if hue else 1\n    fig, axes = plt.subplots(1, n_columns, figsize=figsize)\n    \n    ax1 = axes[0] if hue else axes\n    \n    df_aux = df[['date', x, y]].groupby('date').agg({x: 'first', y: 'sum'})\n    sns.boxplot(x=df_aux[x], y=df_aux[y], ax=ax1)\n    \n    if hue:\n        df_aux = df[['date', hue, x, y]].groupby([hue, 'date']).agg({x: 'first', y: 'sum'}).reset_index()\n        sns.boxplot(x=df_aux[x], y=df_aux[y], ax=axes[1], hue=df_aux[hue])","4bfa38c4":"plot_boxplots(df_filtered, 'sale_quantity', 'week_day', 'cod_store')","344d3fa4":"plot_boxplots(df_filtered, 'sale_quantity', 'year', 'cod_store')","74a8725d":"plot_boxplots(df_filtered, 'sale_quantity', 'month', 'cod_store')","51284a1b":"plot_boxplots(df_filtered, 'sale_quantity', 'week')","ceca3de4":"plot_boxplots(df_filtered, 'sale_quantity', 'month_week', 'cod_store')","7e955168":"plot_boxplots(df_filtered, 'sale_quantity', 'month_day')","adc6e2ac":"plot_boxplots(df_filtered, 'sale_quantity', 'type', 'cod_store')","1db3c285":"## Econtrando dias sem venda por produto\ndf_aux = df_filtered.loc[df.sale_quantity == 0].groupby(['cod_store', 'cod_product'])['date'].count().rename('days_without_sale').to_frame()\n\n## Encontrando n\u00famero de datas dispon\u00edveis por produto\ndf_aux2 = df_filtered.groupby(['cod_store', 'cod_product'])['date'].count().rename('total_days').to_frame()\n\n## Unindo os dataframes\ndf_merged = df_aux.merge(df_aux2, right_index=True, left_index=True, how='right')\n\n## Tratando NaNs\ndf_merged.days_without_sale = df_merged.days_without_sale.fillna(0).astype('int32')\n\n## Calculando percentual\ndf_merged['%_days_without_sale'] = df_merged.days_without_sale \/ df_merged.total_days\n\n## Ordenando\ndf_merged = df_merged.reset_index().sort_values(['cod_store', '%_days_without_sale'], ascending=False).set_index(['cod_store', 'cod_product'])\ndf_merged","5bc7b570":"df_merged.loc[df_merged['%_days_without_sale'] == 1.0]","af13b299":"fig, axes = plt.subplots(3, 1, figsize=(20,21))\nfor i in range(3):\n    df_aux = df_merged.loc[i+1]['%_days_without_sale']\n    order = df_aux.index\n    sns.barplot(x=df_aux.index, y=df_aux, ax=axes[i], order=order)\n    axes[i].set_title(f'Loja {i+1}')\n    axes[i].grid(axis='y')\n    plt.tight_layout()","b9989417":"from random import sample, seed\n\nseed(13)\nprods = df[['cod_store', 'cod_product']].set_index(['cod_store', 'cod_product']).index.unique().tolist()\nrandom_prods = sample(prods, 10)\n\ndf_aux = df.set_index(['cod_store', 'cod_product']).loc[random_prods].sort_index()\nfig, axes = plt.subplots(len(random_prods), 1, figsize=(20, len(random_prods) * 7))\nfor i in range(len(random_prods)):\n    df_aux2 = df_aux.loc[random_prods[i]].set_index('date')['sale_quantity']\n    sns.scatterplot(x=df_aux2.index, y=df_aux2, ax=axes[i])\n    sns.lineplot(x=df_aux2.index, y=df_aux2, ax=axes[i])\n    axes[i].set_title(f'Loja {random_prods[i][0]} - Produto {random_prods[i][1]} - {len(df_aux2)} linhas')","a5bd0410":"#### Distribui\u00e7\u00e3o de vendas por m\u00eas","db64d1e4":"#### Fun\u00e7\u00e3o BoxPlots","23788a91":"#### Considera\u00e7\u00f5es Importantes:\n- H\u00e1 muitos produtos com percentuais de dias sem venda extremamente altos. S\u00e3o fortes candidatos a terem sa\u00eddo de linha por algum per\u00edodo de tempo","ad385b84":"#### Produtos sem hist\u00f3rico de vendas por loja","4fdd25e1":"#### S\u00e9ries Temporais de Vendas e Receita por Loja","270d1ee4":"### An\u00e1lise Inicial do Dataset\n#### Fun\u00e7\u00e3o para mostrar valores em barplots","50eeaafb":"#### Distribui\u00e7\u00e3o de vendas por semana do m\u00eas","a121fb31":"#### Distribui\u00e7\u00e3o de dias sem vendas de cada produto por loja","944cb715":"#### Datas M\u00e1ximas e M\u00ednimas de Vendas por Loja","ea844bee":"#### Distribui\u00e7\u00e3o de vendas por dia do m\u00eas","b68938bd":"#### Distribui\u00e7\u00e3o de vendas por tipo de feriado \/ dia letivo","2982f1be":"#### Encontrando datas em que a Loja 2 teve as vendas zeradas","818bb102":"#### Distribui\u00e7\u00e3o de vendas por ano","122c891c":"### Leitura dos dados\n\nLeitura das bases de dados em tabelas (*dataframes*).","8bc0c650":"#### Produtos por Loja","d8ba0e66":"### 2. Sazonalidade\n#### Criar vari\u00e1veis sazonais","d2d0baf4":"#### Considera\u00e7\u00f5es Importantes:\n- Loja 2 possui um per\u00edodo de alguns meses com vendas zeradas (Filtrar?)\n- Lojas parecem ter sazonalidades parecidas (Vari\u00e1veis sazonais?)\n- Lojas parecem ter volatilidades diferentes em suas vendas (Vari\u00e1veis que expressam variabilidade por loja?)","26d599a4":"### 1. Vendas","838e91b9":"#### Retirando as observa\u00e7\u00f5es correspondentes do dataset original","003ccca2":"#### Linhas por Loja (Per\u00edodo sem vendas da Loja 2 filtrado)","9004bd36":"#### Distribui\u00e7\u00e3o de vendas por dia da semana","0399efda":"#### Considera\u00e7\u00f5es Importantes:\n- Aparentemente, as s\u00e9ries de novos produtos come\u00e7am no dia do lan\u00e7amento, sem valores zerados anteriores\n- Aparentemente, quando produtos saem de linha a s\u00e9rie continua mesmo com as vendas zeradas\n- H\u00e1 produtos que saem de linha temporariamente e depois voltam a vender","679f881d":"## An\u00e1lise explorat\u00f3ria dos dados - Data & Analytics\n\nPreparamos essa an\u00e1lise explorat\u00f3ria da base da competi\u00e7\u00e3o para ajudar os participantes a ter um entendimento melhor da base.\n\nDe acordo com o que formos avan\u00e7ando a an\u00e1lise iremos atualizando este notebook.\n\nO n\u00edvel de dificuldade de cada an\u00e1lise est\u00e1 classificado com * (asteriscos), de 1 a 3.\n\n### Hip\u00f3teses a serem testadas:\n\n1. Vendas *\n    - Qual o per\u00edodo de data dispon\u00edvel na base para cada loja? \n    - Quais lojas vendem mais?\n    - Quais s\u00e3o os produtos\/categorias\/subcategorias mais vendidos?\n2. Sazonalidade **\n    - Existe sazonalidade nas vendas? Em quais frequ\u00eancias (m\u00eas, semana, dias)?\n3. Produtos obsoletos *\n    - Existem produtos que sairam de linha?\n4. Outliers **\n    - Existem outliers nas vendas (dia com venda muito acima ou abaixo do comportamento normal)?\n5. Vari\u00e1veis ex\u00f3genas **\n    - Os feriados impactam a venda? E v\u00e9speras de feriados?\n    - Dados de temperatura e precipita\u00e7\u00e3o influenciam a venda de algum tipo de produto?\n6. Canibaliza\u00e7\u00e3o ***\n    - Existe canibaliza\u00e7\u00e3o entre produtos da mesma subcategoria?","c38ebd8a":"#### Desse ponto em diante, realizaremos nossas an\u00e1lises a partir de dois datasets, de acordo com a pertin\u00eancia de cada um para a an\u00e1lise em quest\u00e3o:\n    - df: dataset que cont\u00e9m observa\u00e7\u00f5es da Loja 2 correspondentes ao per\u00edodo de vendas zeradas\n    - df_filtered: dataset que n\u00e3o cont\u00e9m observa\u00e7\u00f5es da Loja 2 correspondentes ao per\u00edodo de vendas zeradas","fd691cd7":"#### S\u00e9ries temporais de 10 produtos aleat\u00f3rios","0577e3c4":"### Deixe aqui seu coment\u00e1rio\n\nQual outra hip\u00f3tese voc\u00ea gostaria de testar?","c67c5626":"### 4. Outliers","5a10b7ba":"#### Distribui\u00e7\u00e3o de vendas por semana do ano","7e9568f0":"#### Linhas por Loja","c6d54cfb":"### Pr\u00e9-processamento\n\nNesta etapa criaremos vari\u00e1veis de interesse para nossa an\u00e1lise.\n\n- revenue: receita da venda estimada de cada produto\n- month-year: m\u00eas-ano em que a venda foi realizada","f21e3233":"### 3. Produtos Obsoletos\n#### Encontrando percentual de dias sem vender por produto em cada loja\n"}}