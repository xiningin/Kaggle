{"cell_type":{"7267f47c":"code","fba326b0":"code","dbcbe1fc":"code","3178eed5":"code","979a1261":"code","75419ade":"code","a09fef1f":"code","742d822d":"code","1167f230":"code","5642a393":"code","4335fd5d":"code","7d6210da":"code","669bc367":"markdown","141eba32":"markdown","b66e98c0":"markdown","44ecb75f":"markdown","0cdb5d70":"markdown","eecc47a6":"markdown","b61fc541":"markdown","5e66a63e":"markdown","2b8f5d85":"markdown","43d38eda":"markdown","03e33f53":"markdown","21469a2e":"markdown"},"source":{"7267f47c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fba326b0":"from collections import Counter\nfrom sklearn.preprocessing import StandardScaler\nfrom keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score,  log_loss, classification_report, confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nimport os\nimport tensorflow as tf\nfrom keras.layers import Dense, Flatten, InputLayer, Dropout, Input\nfrom tensorflow.keras import Sequential, Model\n\nfrom matplotlib.pylab import rcParams\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport datatable as dt","dbcbe1fc":"data_folder = '\/kaggle\/input\/tabular-playground-series-nov-2021\/'\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '1'\nseed = 2021\nprint(\"Tensorflow Number of GPUs Available: \",len(tf.config.list_physical_devices('GPU')))","3178eed5":"def class_weight(target, smooth_factor=0):\n    counter = Counter(target)\n    if smooth_factor > 0:\n        p = max(counter.values()) * smooth_factor\n        for k in counter.keys():\n            counter[k] += p\n    majority = max(counter.values())\n    return {cls: float(majority \/ count) for cls, count in counter.items()}","979a1261":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n\n    for col in df.columns:\n        col_type = df[col].dtype\n\n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(\n        100 * (start_mem - end_mem) \/ start_mem))\n\n    return df","75419ade":"data_df = reduce_mem_usage(dt.fread(data_folder+'train.csv').to_pandas())\ndata_df.drop(['id'], axis=1, inplace=True)\n\ntest_data_df = reduce_mem_usage(dt.fread(data_folder+'test.csv').to_pandas())\ntest_data_df.drop(['id'], axis=1, inplace=True)\n\nsample_submission = reduce_mem_usage(dt.fread(data_folder+'sample_submission.csv').to_pandas())\n\nX_test = test_data_df.copy()\n\ny = data_df['target']\ntemp = data_df.copy()\ndata_df.drop(['target'], axis=1, inplace=True)\ntemp_X = data_df.copy()","a09fef1f":"# 'liblinear','newton-cg','lbfgs','sag','saga'\nlr_model_1 = LogisticRegression(solver='liblinear')\nlr_model_1.fit(temp_X, y)\nprediction = lr_model_1.predict(temp_X)\ntemp['new_target'] = prediction\ntemp = temp[temp['target'] == temp['new_target']]\n\ny = temp['target']\nX = temp.copy()\nX.drop(['target', 'new_target'], axis=1, inplace=True)","742d822d":"train_var = pd.DataFrame(X.var().reset_index()).rename(\n    columns={'index': 'features', 0: 'var'}).sort_values('var', ascending=False).iloc[0:3, 0].to_list()\n\nvalid_cols = [col for col in X_test.columns if col not in train_var]\nX = X[valid_cols]\nX_test = X_test[valid_cols]","1167f230":"scaler = StandardScaler()\n\nX = pd.DataFrame(columns=X.columns, data=scaler.fit_transform(X))\nX_test = pd.DataFrame(columns=X_test.columns, data=scaler.transform(X_test))\n","5642a393":"def neural_model_1(train_features, name, activation, learning_rate):\n    model = Sequential(name=name)\n    model.add(InputLayer(input_shape=(train_features.shape[1])))\n    model.add(Dense(128, activation=activation))\n    model.add(Dropout(rate=0.5))\n    model.add(Dense(64, activation=activation))\n    model.add(Dropout(rate=0.5))\n    model.add(Dense(32, activation=activation))\n    model.add(Dense(1, activation='sigmoid'))\n    opt = tf.keras.optimizers.Adam(learning_rate=learning_rate)\n    model.compile(optimizer=opt, loss='binary_crossentropy', metrics=['AUC'])\n    return model","4335fd5d":"folds = 5\nactivation = 'swish'\nbatch_size = 2048\nepochs = 100\nlearning_rate = 0.001\n\nearlystop = EarlyStopping(monitor='val_loss', min_delta=0,\n                          patience=20, verbose=0, mode='min', restore_best_weights=True)\nplateau = ReduceLROnPlateau(\n    monitor='val_loss', factor=0.2, patience=7, verbose=0, mode='min')\n\ncallbacks_list = [earlystop, plateau]\n\ncv = StratifiedKFold(n_splits=folds, shuffle=True, random_state=seed)\n\nscores = {fold: None for fold in range(cv.n_splits)}\npredictions = []\n\nfor fold, (idx_train, idx_valid) in enumerate(cv.split(X, y)):\n    X_train, y_train = X.iloc[idx_train], y.iloc[idx_train]\n    X_valid, y_valid = X.iloc[idx_valid], y.iloc[idx_valid]\n\n    model = neural_model_1(\n        X, name='Baseline', activation=activation, learning_rate=learning_rate)\n\n    print('**'*20)\n    print(f\"Fold {fold+1} || Training\")\n    print('**'*20)\n\n    history = model.fit(X_train, y_train, validation_data=(X_valid, y_valid),\n                        batch_size=batch_size, epochs=epochs, verbose=0, callbacks=callbacks_list)\n    scores[fold] = (history.history)\n    print(\n        f\"Fold {fold+1} || Max Validation AUC: {np.max(scores[fold]['val_auc'])}\")\n    prediction = model.predict(X_test).reshape(1, -1)[0]\n    predictions.append(prediction)","7d6210da":"sample_submission['target'] = np.mean(np.column_stack(predictions), axis=1)\nsample_submission.to_csv('\/kaggle\/working\/submission.csv', index=False)","669bc367":"# A simple NN with 3 layers","141eba32":"# The validation accuracy is 99+% after removing the mislabelled classes.If the test data is also mislabelled then it is just an overfitting :)","b66e98c0":"# Use datatable to read CSV and convert to Pandas DF","44ecb75f":"# Train with 5 fold validation","0cdb5d70":"# Wrapper function to compute class balance","eecc47a6":"# Find the mislabelled classes with simple LogisticRegression and ignore those records","b61fc541":"# Compute the unbiased varaince of features and ignore the features with high variance","5e66a63e":"# Reduce memory usage by converting the dtypes","2b8f5d85":"# This notebook is based on the paper : Classification of mislabelled microarrays using robust sparse logistic regression","43d38eda":"# Scale the selected features to the values between 0 and 1","03e33f53":"![Untitled.png](attachment:449be18d-0a98-49b0-9b28-e6281ebd2913.png)","21469a2e":"**[https:\/\/academic.oup.com\/bioinformatics\/article\/29\/7\/870\/253956](http:\/\/)**"}}