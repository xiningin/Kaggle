{"cell_type":{"83f4c89e":"code","c6dd6a5b":"code","d2485db4":"code","ca5b2523":"code","5d8e104e":"code","a592585e":"code","5e35c789":"markdown","a361f4c5":"markdown","cbb40214":"markdown","296beba0":"markdown","155ee85c":"markdown"},"source":{"83f4c89e":"#import packages \nimport pandas as pd\nfrom io import StringIO\nimport matplotlib as plt\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\nimport datetime\nimport seaborn as sns","c6dd6a5b":"#file paths\nflow_sch = \"..\/input\/flow_schwartau.csv\"\ntemperature_sch = \"..\/input\/temperature_schwartau.csv\"\nweight_sch = \"..\/input\/weight_schwartau.csv\"\nhumidity_sch = \"..\/input\/humidity_schwartau.csv\"\n\n#group data per day: sum of flow (=netflow) and mean temperature, weight and humidity\ndef mean_per_hour(ifile):\n    name = str(ifile)\n    ifile = pd.read_csv(ifile, sep=',', decimal=\".\")\n    ifile['timestamp'] = pd.to_datetime(ifile['timestamp'])\n    ifile.sort_values(by=\"timestamp\")  #sort values by date\n    ifile.set_index('timestamp', inplace=True) #date as index\n    if \"flow\" in name: \n        ifile = ifile.groupby(pd.Grouper(freq='D')).sum() #group by day and sum\n        ifile.ffill() #if NaN fill with value of previous day\n    else: \n        ifile = ifile.groupby(pd.Grouper(freq='D')).mean() #group by day and calculates mean\n        ifile.ffill() #if NaN fill with value of previous day\n    return ifile \n\n#calling mean_per_hour function on the input files\nnetflow_sch = mean_per_hour(flow_sch)\ntemperature_sch = mean_per_hour(temperature_sch)\nweight_sch = mean_per_hour(weight_sch)\nhumidity_sch = mean_per_hour(humidity_sch)","d2485db4":"ax = netflow_sch[netflow_sch < 0].plot(title=\"Flow per hour\", color=\"green\")\nnetflow_sch[netflow_sch > 0].plot(ax=ax, color=\"orange\")\nax.legend([\"inflow\", \"outflow\"])\n\n#mark input=output line \nax.axhline(y=0, color='blue', linestyle='--', linewidth=0.5)","ca5b2523":"#seperate low and optimal data\nlow_humid = humidity_sch[humidity_sch < 50]\noptimal_humid = humidity_sch[(humidity_sch > 50) & (humidity_sch < 60)]\n\n#plot all, low and optimal data\nax1=humidity_sch.plot(color=\"red\", alpha = 0.4)\nlow_humid.plot(ax=ax1, color=\"yellow\")\noptimal_humid.plot(ax=ax1, color=\"green\")\nax1.legend([\"high\",\"low\",\"optimal\"])\n\n#mark optimal boarder in graph\nax1.axhline(y=50, color='blue', linestyle='--', linewidth=0.5)\nax1.axhline(y=60, color='blue', linestyle='--', linewidth=0.5)","5d8e104e":"#seperate optimal data\noptimal_temp = temperature_sch[(temperature_sch > 30) & (temperature_sch < 35)]\n\n#plot all and optimal data\nax2=temperature_sch.plot(color=\"red\", alpha = 0.4)\noptimal_temp.plot(ax=ax2, color=\"green\")\nax2.legend([\"low\",\"optimal\"])\n\n#mark optimal boarder in graph\nax2.axhline(y=30, color='blue', linestyle='--', linewidth=0.5)\nax2.axhline(y=35, color='blue', linestyle='--', linewidth=0.5)","a592585e":"#seperate above mean\nabove_mean = weight_sch[weight_sch > weight_sch[\"weight\"].mean()]\n\n#plot all and above mean data\nax3 = weight_sch.plot(color=\"red\", alpha = 0.4)\nabove_mean.plot(ax=ax3, color=\"green\")\nax3.legend([\"below mean weight\",\"above mean\"])\n\n#mark mean\nax3.axhline(y=weight_sch[\"weight\"].mean(), color='blue', linestyle='--', linewidth=0.5)","5e35c789":"**Temperature**\n\nOptimal temperature for breeding is between the 30-35 degrees. From the graph it can be noted, that the conditions have been optimal around the summer of 2017, 2018 and 2019. ","a361f4c5":"**Weight** \n\nIn the period of May and June 2019, the weight measurements seem to be off as they approach 0. Overall the weight has seemed to decrease a bit. The weight at the end of summer in 2017 was higher than 2018. This might point at a smaller honey reserve, which could lead to increased death in winter. \n","cbb40214":"**Humidity**\n\nHumidity between the 50% and 60% is optimal for breeding. From the graph it can be noted, that the conditions have been optimal around the summer of 2019. ","296beba0":"**Data per day**\n\nThe function mean_per_hour() takes the files as input argument and groups the data per day. ","155ee85c":"**Netflow**\n\nThe netflow is positive during the summer months. In the other seasons, the inflow in seems to approach the outflow, therefore the netflow is around 0. "}}