{"cell_type":{"477867a1":"code","c39c7308":"code","bf49d621":"code","f8adea15":"code","dcbbf48a":"code","82728bc0":"code","cca9e02a":"code","b3b6f948":"code","1ed29707":"code","d32112d6":"code","1c15d0db":"code","4625cc4f":"markdown","57ee045e":"markdown","fb2899b0":"markdown","f7211f85":"markdown","71c3df4e":"markdown","a243d14d":"markdown","529b7df4":"markdown","d6f4cd21":"markdown","84094e3a":"markdown"},"source":{"477867a1":"%matplotlib inline\nimport pandas as pd\nimport numpy as np\nfrom scipy import sparse\n\nimport matplotlib.pylab as plt\n\nfrom functools import partial\nfrom pathlib import Path","c39c7308":"DATA_DIR = Path(\"..\/input\/santa-workshop-tour-2019\/\")\nfamily_data = pd.read_csv(DATA_DIR\/\"family_data.csv\", index_col=\"family_id\")\nsubmission = pd.read_csv(DATA_DIR\/\"sample_submission.csv\", index_col=\"family_id\")\n\ndf = family_data.join(submission)\nprint(\"shape: %d x %d\" % df.shape)\ndf.head(2)","bf49d621":"choices = df.loc[:, \"choice_0\":\"choice_9\"].values\nfam_sizes = df[\"n_people\"].values\nn_fams = fam_sizes.shape[0]\nn_days = 100","f8adea15":"MIN_OCCUPANCY, MAX_OCCUPANCY = 125, 300\nOCCUPANCY_PENALTY = 1e4 # Auxiliary cost that will help satisfy occupancy constraint\n\nGIFT_CARD = [0, 50, 50, 100, 200, 200, 300, 300, 400, 500, 500]\nBUFFET_OFF = [0, 0, .25, .25, .25, .5, .5, 1., 1., 1., 1.]\nBUFFET = 36\nRIDE = 398\n\ngift_cost = lambda x: GIFT_CARD[x]\nbuffet_cost = lambda x: int(BUFFET_OFF[x] * BUFFET)\nride_cost = lambda x: int(max(0, .5 * (x % 11 - 8)) * RIDE)\n\ndef preference_cost(choice, n_people):\n    \"\"\" Function to compute preference cost provided by Santa \"\"\"\n    return gift_cost(choice) + \\\n        (buffet_cost(choice) + ride_cost(choice)) * n_people\n\ndef make_penalties_matrix(min_fam_size, max_fam_size, n_choices=11):\n    \"\"\" Create matrix of all possible penalties \"\"\"\n    return np.asarray([[preference_cost(i, n) for i in range(n_choices)]\n                        for n in range(min_fam_size, max_fam_size + 1)])\n\ndef make_choice_matrix(choices, n_days):\n    \"\"\" Create auxiliary matrix (n_families, n_days+1)\n        with choice numbers as values \"\"\"\n    n_families = choices.shape[0]\n    choice_matrix = sparse.lil_matrix((n_families, n_days+1), dtype=np.int8)\n    for i, row in enumerate(choices):\n        for j in range(len(row)):\n            choice_matrix[i, row[j]] = j + 1\n    return choice_matrix\n\ndef costs_and_occupancy(submissions, fam_sizes, n_days, choice_matrix,\n        penalties_matrix, min_fam_size):\n    \"\"\" Compute array of actual penalties \"\"\"\n    l = submissions.shape[0]\n    costs = np.zeros(shape=(l,), dtype=np.float64)\n    occupancy = np.zeros(shape=(n_days+1, ), dtype=np.float64)\n    for i in range(l):\n        day = submissions[i]\n        choice = choice_matrix[i, day] - 1\n        fam_size = fam_sizes[i]\n\n        costs[i] = penalties_matrix[fam_size - min_fam_size, choice]\n        occupancy[day] += fam_size\n    return costs, occupancy\n\ndef accounting_penalty(n_cur, n_prev):\n    \"\"\" Function to calculate one day accounting penalty \"\"\"\n    p = .5 + np.abs(n_cur - n_prev) \/ 50.\n    p = np.power(n_cur, p)\n    res = (n_cur - 125) \/ 400\n    return res * p","dcbbf48a":"class SantasAccountant(object):\n\n    \"\"\" Accountant, who fairly calculates preference costs for each family\n        and provides up-to-date each day accountant penalties \"\"\"\n\n    def __init__(self, choices, fam_sizes, days=None, n_days=100, n_fams=None,\n            min_occupancy=MIN_OCCUPANCY, max_occupancy=MAX_OCCUPANCY):\n\n        # Static\n        self.choices, self.fam_sizes = choices, fam_sizes\n        self.n_days = n_days\n        self.n_fams = n_fams or len(fam_sizes)\n        self.min_occupancy, self.max_occupancy = min_occupancy, max_occupancy\n        self.min_fam_size, self.max_fam_size = tuple(map(int,\n            (self.fam_sizes.min(), self.fam_sizes.max())))\n\n        # Solution array\n        self.days = self.init_days() if isinstance(days, type(None)) else days\n\n        # Costs calculation\n        self.choice_matrix = make_choice_matrix(choices, n_days)\n        self.penalties_matrix = make_penalties_matrix(\n            self.min_fam_size, self.max_fam_size)\n        self.costs_and_occupancy = partial(\n            costs_and_occupancy,\n            n_days=self.n_days,\n            choice_matrix=self.choice_matrix,\n            penalties_matrix=self.penalties_matrix,\n            min_fam_size=self.min_fam_size)\n        self.reset_occupancy()\n\n    def init_days(self):\n        \"\"\" Random days initialization \"\"\"\n        return np.random.randint(1, self.n_days+1, size=(self.n_fams, ))\n\n    def reset_occupancy(self):\n        \"\"\" Calculate preference cost, occupancy and accounting\n            penalties based on self.days \"\"\"\n        self.preference_costs, self.occupancy = \\\n            self.costs_and_occupancy(self.days, self.fam_sizes)\n        self.make_acc_penalties()\n\n    def make_acc_penalties(self):\n        \"\"\" Calculate accounting penalties for all days \"\"\"\n        self.acc_penalties = \\\n            np.zeros(shape=(self.n_days+1,), dtype=np.float64)\n\n        for i in range(1, self.n_days):\n            self.acc_penalties[i] = self.day_acc_penalty(i)\n\n    def day_acc_penalty(self, day):\n        \"\"\" Calculate accounting penalties for one day \"\"\"\n        # Following line requires 2 excessive zero values in acc_penalty\n        # matrix, but makes life easier\n        if day in (0, 100): return 0\n\n        occ = self.occupancy[day]\n\n        # That helps find solutions satisfying occupancy constraint\n        if occ > self.max_occupancy:\n            return (occ - self.max_occupancy) * OCCUPANCY_PENALTY\n        elif occ < self.min_occupancy:\n            return (self.min_occupancy - occ) * OCCUPANCY_PENALTY\n\n        return accounting_penalty(occ, self.occupancy[day+1])\n\n    def update_acc_penalty(self, day):\n        \"\"\" Update account penalties for selected day \"\"\"\n        for d in range(day-1, day+1):\n            self.acc_penalties[d] = self.day_acc_penalty(d)\n\n    def get_preference_cost(self, fam_id, day):\n        \"\"\" Get preference cost for family in selected day \"\"\"\n        choice = self.choice_matrix[fam_id, day] - 1\n        fam_size = self.fam_sizes[fam_id] -  self.min_fam_size\n        return self.penalties_matrix[fam_size, choice]\n\n    def cost(self):\n        \"\"\" Resulting cost \"\"\"\n        cost = np.sum(self.preference_costs) + np.sum(self.acc_penalties)\n        return cost","82728bc0":"accountant = SantasAccountant(choices, fam_sizes)\n\ntrue_acc_penalties = accountant.acc_penalties\nfor i in 1, 50, 99:\n    accountant.update_acc_penalty(i)\n    test_acc_penalties = accountant.acc_penalties\n    assert np.all(np.equal(true_acc_penalties, test_acc_penalties)), f\"Day {i} problem\"","cca9e02a":"class Sleigh (SantasAccountant):\n\n    \"\"\" Sleight can move family from one day to another day throught schedules\n        and forecast any move's cost improvement \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def get_acc_penalty(self, day):\n        \"\"\" Get acc penalty between day - 1 and day + 1 \"\"\"\n        acc_penalty = [self.acc_penalties[day + i - 1] for i in range(2)]\n        return acc_penalty\n\n    def try_acc_penalty(self, inc_day, fam_size, dec_day=None):\n        \"\"\" Calculate acc penalty between day - 1 and day + 1 if\n            day occupancy is increased by fam_size \"\"\"\n        day_occs = list()\n        for i in range(3):\n            d = inc_day + i - 1\n            if d in (0, 101): continue\n\n            day_occs.append(self.occupancy[d])\n            if i == 1:\n                day_occs[-1] += fam_size\n\n        dec_day = dec_day or 0\n        if isinstance(dec_day, type(None)):\n            pass\n        elif dec_day == inc_day - 1 or dec_day == inc_day + 1:\n            add_if_not_day_1 = 1 * (min(dec_day, inc_day) > 1)\n            dec_day_id = dec_day - inc_day + add_if_not_day_1\n            day_occs[dec_day_id] -= fam_size\n\n        acc_penalty = [accounting_penalty(i, j)\n            for i, j in zip(day_occs[:-1], day_occs[1:])]\n        return acc_penalty\n\n    def acc_penalty_imp(self, fam_id, dec_day, inc_day):\n        \"\"\" Calculate change in accounting penalty\n            if family moved from dec_day to inc_day \"\"\"\n        fam_size = self.fam_sizes[fam_id]\n\n        # Sort days\n        day_0, day_1 = sorted([dec_day, inc_day])\n        decrease_0 = np.power(-1, int(day_0==dec_day))\n\n        penalties_0 = self.get_acc_penalty(day_0)\n        penalties_1 = self.try_acc_penalty(day_0, decrease_0*fam_size, day_1)\n\n        if day_1 == day_0 + 1:\n            penalties_0.pop()\n            penalties_1.pop()\n\n        penalties_0 += self.get_acc_penalty(day_1)\n        penalties_1 += self.try_acc_penalty(day_1,-decrease_0*fam_size, day_0)\n\n        imp = sum(penalties_1) - sum(penalties_0)\n\n        return imp\n\n    def pref_cost_imp(self, fam_id, dec_day, inc_day):\n        \"\"\" Calculate change in accounting penalty\n            if family moved from dec_day to inc_day \"\"\"\n        dec_day = self.days[fam_id]\n        pref_cost_1 = self.get_preference_cost(fam_id, inc_day)\n        pref_cost_0 = self.preference_costs[fam_id]\n        imp = pref_cost_1 - pref_cost_0\n        return imp\n\n    def improvement(self, fam_id, inc_day):\n        \"\"\" Get improvement if family moved to inc_day \"\"\"\n        dec_day = self.days[fam_id]\n        return self.acc_penalty_imp(fam_id, dec_day, inc_day) + \\\n            self.pref_cost_imp(fam_id, dec_day, inc_day)\n\n    def move(self, fam_id, inc_day):\n        \"\"\" Move family to inc_day \"\"\"\n        fam_size = self.fam_sizes[fam_id]\n        dec_day = self.days[fam_id]\n        self.days[fam_id] = inc_day\n\n        # Update reference cost\n        self.preference_costs[fam_id] += \\\n            self.pref_cost_imp(fam_id, dec_day, inc_day)\n\n        # Update occupations\n        self.occupancy[dec_day] -= fam_size\n        self.occupancy[inc_day] += fam_size\n\n        # Update acc_penalties\n        self.update_acc_penalty(inc_day)\n        self.update_acc_penalty(dec_day)","b3b6f948":"class Reindeer (Sleigh):\n\n    \"\"\" Reindeer drives search. It finds moves and travels with Sleight \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n        self.reset_costs()\n        self.best_cost = self.cost()\n        self.best_days = self.days.copy()\n\n    def reset_costs(self):\n        \"\"\" Reset costs list (e.g. to remove early enormous costs) \"\"\"\n        self.costs = list()\n\n    def feasible(self):\n        \"\"\" Check if solution satisfies occupancy constraint \"\"\"\n        return np.all([\n            np.all(self.occupancy[1:] <= self.max_occupancy),\n            np.all(self.occupancy[1:] >= self.min_occupancy),])\n\n    def select_dec_day(self, thresh_occ=None):\n        \"\"\" Select any day with occupancy above threshold \"\"\"\n        thresh_occ = thresh_occ or self.min_occupancy\n\n        possible_days = np.argwhere(np.where(self.occupancy > thresh_occ,\n                                     self.acc_penalties, 0)).flatten()\n        if len(possible_days) == 0: return 0\n\n        dec_day = np.random.choice(possible_days)\n        return dec_day\n\n    def select_family(self, day):\n        \"\"\" Select random family among families with assigned day \"\"\"\n        fam_id = np.random.choice(\n            np.argwhere(self.days == day).flatten())\n        return fam_id\n\n    def select_inc_day(self, fam_id, dec_day):\n        \"\"\" Find the day that minimizes cost function\n            for the selected family \"\"\"\n        improvements = np.zeros(shape=(self.choices.shape[1], ))\n\n        # Filter days with low occupancy in separate list\n        little_occ_days, big_occ_days = list(), list()\n        for i, inc_day in enumerate(self.choices[fam_id]):\n            improvements[i] = 9e9 if inc_day == dec_day \\\n                else self.improvement(fam_id, inc_day)\n            if self.occupancy[inc_day] < self.min_occupancy:\n                little_occ_days.append(i)\n            else:\n                big_occ_days.append(i)\n\n        # Select day among days with low occupancy first\n        got_little = False\n        if len(little_occ_days):\n            got_little = True\n            ix_min_little = np.argmin(improvements[little_occ_days])\n            ix_min = little_occ_days[ix_min_little]\n\n        # Select day among others if choice from previous block is bad\n        if not got_little or improvements[ix_min_little] > 0:\n            ix_min_big = np.argmin(improvements[big_occ_days])\n            ix_min_big = big_occ_days[ix_min_big]\n            if not got_little or ix_min_big < ix_min:\n                ix_min = ix_min_big\n        return self.choices[fam_id, ix_min]\n\n    def find_move(self):\n        \"\"\" Find next family to move and its destination day \"\"\"\n        dec_day = self.select_dec_day(self.max_occupancy)\n        if dec_day == 0:\n            dec_day = self.select_dec_day(self.min_occupancy)\n        fam_id = self.select_family(dec_day)\n        inc_day = self.select_inc_day(fam_id, dec_day)\n\n        return fam_id, inc_day\n\n    def travel(self, fam_id, inc_day):\n        \"\"\" Move family to selected day, check if it improves cost function\n            and save if best \"\"\"\n        self.move(fam_id, inc_day)\n        cost = self.cost()\n        self.costs.append(cost)\n        if self.feasible() and cost < self.best_cost:\n            self.best_cost = cost\n            self.best_days = self.days.copy()\n\n    def search(self, n_steps=100):\n        \"\"\" Random (with little priorities) local search \"\"\"\n        for _ in range(n_steps):\n            fam_id, inc_day = self.find_move()\n            self.travel(fam_id, inc_day)","1ed29707":"Prancer = Reindeer(choices, fam_sizes)\nPrancer.days","d32112d6":"%%time\nc_prev = Prancer.cost()\nPrancer.search(n_steps=50000)\n\nprint(f\"Best cost: {Prancer.best_cost:.0f}\")\nprint(f\"Cost improvement: {c_prev - Prancer.best_cost:.0f}\")\nplt.plot(range(len(Prancer.costs)), Prancer.costs)\nplt.show()","1c15d0db":"submission['assigned_day'] = Prancer.best_days\nfinal_score = Prancer.best_cost\nsubmission.to_csv(f'submission_{final_score:.0f}.csv')","4625cc4f":"Now, just sit, relax and let Prancer the Reindeer search the minimal cost.","57ee045e":"The current search algorithm gets stuck near $500k, but I haven't thought about search optimization yet.\n\nI've implemented templates, so anyone can enjoy the ride with the Local Search squad including SantasAccountant, Sleigh and Reindeer, you know... I want to help Santa to save money, so he can buy more socks, more candies, more GPUs, more pianos, more board games and more other Christmas presents for little kids!\n\nLet's make Christmas merry again!","fb2899b0":"As we all know, Santa faced the hard problem. I'll show you technique, called Local Search, that might help Santa. It's fun.\n\nThe current idea is basic:\n\n1. Initialize any solution (schedule) for all families.\n2. For n iterations do:\n    1. Find family and day, where to move it\n    2. Move selected family from `dec_day` (decreasing occupancy day) to `inc_day` (increasing occupancy day).\n    3. If cost is better, then the solution is the best one, save it.\n    \nSounds like a plan! I know couple of hard workers (described as classes below), who will help us, I'll introduce them in the notebook. All described classes are tested, and work as expected (hopefully).\n\nLet's look at the data again and create several matrices and constants:","f7211f85":"# Run\n\nWe're ready to travel towards the best schedule. Let's first initialize Reindeer:","71c3df4e":"# The crew\n## 0. Cost calculation\n\nThe functions below describe preference cost and accounting penalty calculations.\n\nThe `cost_and_occupancy` function was inspired by Faster Cost Function kernel.\n\nReferences:\n - Faster Cost Function: https:\/\/www.kaggle.com\/xhlulu\/santa-s-2019-faster-cost-function-24-s","a243d14d":"## 2. Sleigh\n\nSanta's Sleigh is a very versatile vehicle. \n\nOne interesting thing about it is it can move a family from one day to another day between the schedules. SantasAccountant is a good guy, but she can only use formulas. So Sleigh is quite useful in our journey. Let's grab it too!\n\nMoreover, Sleigh can not only move families between days, it also can forecast cost improvement before moves! Wow... That might be helpful.\n\nWho knows what else it can do?!\n\n> That class is stable for single moves.","529b7df4":"## 3. Reindeer\n\nTurned out, that Reindeers can travel through days schedule finding moves for families. They're good at just that, but they should be taught. Let's ride them and let them drive the search.\n\nActually, we've taken them because they memorize well, as any deer, duh... Otherwise we could simply lose our precious best schedule.\n\n> The current Reindeer is very inexperienced and random, it needs to be improved for better search.","d6f4cd21":"Here's an example of testing SantasAccountant skills, if you want to examine her:","84094e3a":"## 1. Santa's Accountant\n\nThat's lots of simple maths. It's boring and I don't want to calculate it every time on my own.\n\nWe need the guy, who understands those formulas above. Let's take Santa's Accountant.\n\n> SantasAccountant works just fine for her purpose. I believe, she won't get changed during the journey."}}