{"cell_type":{"5be5694f":"code","a1e1772c":"code","c3cbdc14":"code","c3845d70":"code","341c1550":"code","f5f8827d":"code","c9377e83":"code","dc5b6dd5":"code","5fcd96f8":"code","03414356":"code","a7702e0f":"code","d8f243da":"code","6ee5162e":"code","00db51b9":"code","e9c262e2":"code","9e45c50b":"code","622874ea":"code","38386367":"code","f3f1a3ea":"markdown","3b931081":"markdown","f6bd9b38":"markdown","ee7df2f9":"markdown","ad2adb51":"markdown","477163a8":"markdown","7f3fee71":"markdown","05b527f0":"markdown","eb6e8b5d":"markdown"},"source":{"5be5694f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a1e1772c":"train = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntrain","c3cbdc14":"test = pd.read_csv(\"\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntest","c3845d70":"train.shape,test.shape","341c1550":"#for now lets remove every row that has a null \n#train = train.dropna(how='any',axis=1)\ntrain.info()","f5f8827d":"print() \nprint('------------------------------------------------------------')\nprint('---------------------- Training set ------------------------')\nprint('------------------------------------------------------------')\nprint()\n\ncount = 1\nfor i in train.columns:\n    #checks each column, if each column has null values > 0. continue.\n    if train[i].isnull().sum()>0:\n        #Its categorical if its an object.\n        if train[i].dtypes == 'object':\n            print(i + ' is a Categorical Variable')\n            print('Total null values:',train[i].isnull().sum())\n            #Round it to one, and find the percentage total\n            print('Null values as a % of total:',round((train[i].isnull().sum()*100)\/train['SalePrice'].count(),1)) \n            print('Categorical Variable No: '+ str(count))\n            count = count + 1\n            print()\n            \nprint()            \nprint('------------------------------------------------------------')\nprint('------------------------ -------- --------------------------')\nprint('------------------------------------------------------------')\nprint() \n","c9377e83":"print()            \nprint('------------------------------------------------------------')\nprint('------------------------ Test set --------------------------')\nprint('------------------------------------------------------------')\nprint() \n\ntestcount = 1\nfor i in test.columns:\n    #checks each column, if each column has null values > 0. continue.\n    if test[i].isnull().sum()>0:\n        #Its categorical if its an object.\n        if test[i].dtypes == 'object':\n            print(i + ' is a Categorical Variable')\n            print('Total null values:',test[i].isnull().sum())\n            #Round it to one, and find the percentage total\n            print('Null values as a % of total:',round((test[i].isnull().sum()*100)\/train['SalePrice'].count(),1)) \n            print('Categorical Variable No: '+ str(testcount))\n            testcount = testcount + 1\n            print()\n            \nprint()            \nprint('------------------------------------------------------------')\nprint('------------------------ -------- --------------------------')\nprint('------------------------------------------------------------')\nprint() ","dc5b6dd5":"train = train.drop(['Alley', 'FireplaceQu','PoolQC','Fence','MiscFeature'], axis=1)\ntest = test.drop(['Alley', 'FireplaceQu','PoolQC','Fence','MiscFeature'], axis=1)","5fcd96f8":"train.shape,test.shape","03414356":"train = train.apply(lambda x:x.fillna(x.value_counts().index[0]))\ntest = test.apply(lambda x:x.fillna(x.value_counts().index[0]))","a7702e0f":"#Categories are \ncats = ['MSZoning','Street','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle','RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC','CentralAir','Electrical','KitchenQual','Functional','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive','SaleType','SaleCondition']","d8f243da":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OneHotEncoder\n\n#initialize label endoce as first step.\nle = LabelEncoder()\n\nfor i in train[cats]:\n    if train[i].dtype:\n        train[i] = le.fit_transform(train[i].values)\n        print(i + ' has been label encoded')","6ee5162e":"for i in test[cats]:\n    if test[i].dtype:\n        test[i] = le.fit_transform(test[i].values)\n        print(i + ' has been label encoded')","00db51b9":"train.shape, test.shape","e9c262e2":"#Sale is target variable\ny_train = train[\"SalePrice\"]\ny_test = train[\"SalePrice\"]\nfeatures = ['MSZoning','Street','LotShape','LandContour','Utilities','GarageQual','LandSlope','Neighborhood','SaleType','SaleCondition']\nX_train =  pd.get_dummies(train[features])\nX_test = pd.get_dummies(test[features])","9e45c50b":"X_train.shape,X_test.shape,y_train.shape,y_test.shape","622874ea":"#mean_squared_error(y_true, y_pred)\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\n\n#Last bit - scale labels\nfrom sklearn.preprocessing import MinMaxScaler\nsc_X = MinMaxScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n\nmodel = linear_model.Lasso(alpha=0.1)\nmodel.fit(X_train, y_train)\n\npredictions = model.predict(X_test)\n\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","38386367":"\n#Code required to submit for competition\noutput = pd.DataFrame({'Id': test.Id, 'SalePrice': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","f3f1a3ea":"# Check what categorical columns are actually there (training set)\nWe only need to focus on the categoricals variables for missing values, as anything else can be sorted out with label encoding and one-hot encoding.","3b931081":"Before imputing, we need to take care of all the categorical data, we simply label encode everything for now\nThis will hopefully make the score somewhat better.","f6bd9b38":"Lasso regression\n\nIn statistics and machine learning, lasso is a regression analysis method that performs both variable selection and regularization in order to enhance the prediction accuracy and interpretability of the resulting statistical model - wikipedia","ee7df2f9":"We must drop (alley, fireplace,PoolQC, fence and misc feature) as they have nanas above 60%+","ad2adb51":"# Missing values for train set and test set\nSince we removed the major columns with nans\nWe can now move onto the smaller ones","477163a8":"Before imputing we made sure to take care of test set aswell","7f3fee71":"Linear Regression\n\nLogistic Regression\n\nPolynomial Regression\n\nStepwise Regression\n\nRidge Regression\n\nLasso Regression\n\nElasticNet","05b527f0":"# Do the same for the test set","eb6e8b5d":"these are all the categorical columns we can now transform by label encoding\n\nin total there are 38 categorical columns(objects)"}}