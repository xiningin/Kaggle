{"cell_type":{"57ebbac7":"code","54ee89fb":"code","cf445bab":"code","ac11b5b9":"code","3c93849f":"code","74a3a8d0":"code","b7b6a965":"code","085f59d2":"code","a6970b86":"code","3c2c8b86":"code","c0260ede":"code","d6638cb1":"code","db6c0128":"code","229959a2":"code","7d52c3fd":"code","1d5dc118":"code","958df310":"code","137724a3":"code","9f51b4b4":"code","2c683b8e":"code","233f8f4f":"code","ae46155c":"code","e15ff5a6":"code","f430ad21":"code","3be9ebbf":"code","1630ea64":"code","af1d1249":"code","a02edf24":"code","5a5bb4e1":"code","c1d43708":"code","f85fb1ef":"code","5d858cc4":"code","86532981":"code","ff673f41":"code","695e9d10":"code","7a2f2109":"code","bc303732":"code","ab5a44ba":"code","e980caf2":"code","4bfd1b7f":"code","6411a044":"code","ec64e156":"code","106c56dc":"code","65a6764f":"code","bd377513":"code","7a924320":"code","2d613e86":"code","5fc6e760":"code","cacd461e":"code","d7961b1f":"code","9c430d3d":"code","4a7fb268":"code","3aeabcc7":"code","463e6398":"code","722b44bc":"markdown","72a038c5":"markdown","41dfdba9":"markdown","c3291a31":"markdown","74dc1f6c":"markdown","8e7adc50":"markdown","9f50f45f":"markdown","032915e9":"markdown"},"source":{"57ebbac7":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","54ee89fb":"from sklearn.ensemble import RandomForestClassifier","cf445bab":"%matplotlib inline","ac11b5b9":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3c93849f":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain.head()","74a3a8d0":"train.info()","b7b6a965":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.head()","085f59d2":"test.info()","a6970b86":"# Using Matplotlib\nages = train['Age'].dropna().tolist()\n\nplt.figure(figsize=(16,5))\nplt.hist(ages, histtype = 'bar', color = 'gray', \n         bins=50, density=True)\nplt.xlabel('Age Groups')\nplt.ylabel('Percentage of the Population')\nplt.title('Age Distribution Among the Population')\nplt.grid(True)\nplt.show()","3c2c8b86":"# You can leave the following two lines unchanged or make changes to better fit the visualization\nsns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(16,5)})\n\n# Using Seaborn\nsns.distplot(a = ages, bins = 80, color = 'gray', vertical = False\n            ).set_title('Age Distribution Among the Population')","c0260ede":"# Using Matplotlib\nsex = train['Sex'].dropna().tolist()\nplt.figure(figsize=(7,5))\nplt.hist(sex, histtype = 'bar', color = 'gray', bins=2, density=True)\nplt.xlabel('Male vs Female')\nplt.ylabel('Percentage of the Population')\nplt.title('Gender Distribution Among the Population')\nplt.grid(True)\nplt.show()","d6638cb1":"sns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(7,5)})\n\n# Using Seaborn\nsns.countplot(x=\"Sex\", \n              data = train, \n              color = 'gray', \n              edgecolor=sns.color_palette(\"dark\", 1)\n             ).set_title('Gender Distribution Among the Population')","db6c0128":"# Gender Distribution among the Three Classes of Population\nsns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(8,5)})\n\nsns.countplot(x=\"Pclass\", hue=\"Sex\", \n              data = train, color = 'gray', \n              edgecolor=sns.color_palette(\"dark\", 1)\n             ).set_title('Gender Distribution Among the Three Classes of Population')","229959a2":"# Gender distribution among the Survived and the Deceased \nsns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(8,5)})\n\nsns.countplot(x=\"Survived\", hue=\"Sex\", \n              data = train, color = 'gray', \n              edgecolor=sns.color_palette(\"dark\", 1)\n             ).set_title('Gender distribution among the Survived and the Deceased')","7d52c3fd":"# Survival Distribution among the Three Classes of Individuals\nsns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(8,5)})\n\nsns.countplot(x=\"Survived\", hue=\"Pclass\", \n              data = train, color = 'gray', \n              edgecolor=sns.color_palette(\"dark\", 1)\n             ).set_title('Survival Distribution among the Three Classes of Individuals')","1d5dc118":"# Plotting the Survial of the Population with respect to their Gender and Class\nsns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(12,5)})\n\nsns.catplot(x=\"Pclass\", hue=\"Sex\", col=\"Survived\", \n            data=train, kind=\"count\", color = 'gray', \n            edgecolor=sns.color_palette(\"dark\", 1))","958df310":"# Using Matplotlib\nSibSp = train['SibSp'].dropna().tolist()\n\nplt.figure(figsize=(8,5))\nplt.hist(SibSp, histtype = 'bar', color = 'gray', bins=8, density=True)\nplt.xlabel('Number of Family Members')\nplt.ylabel('Population with \\'x\\' Number of Family Members')\nplt.title('Distribution by the Number of Family Members Aboard')\nplt.grid(True)\nplt.show()","137724a3":"# Using Seaborn\nsns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(8,5)})\n\nsns.countplot(x=\"SibSp\", data = train, \n              color = 'gray', edgecolor=sns.color_palette(\"dark\", 1)\n             ).set_title('Distribution by the Number of Family Members Aboard')","9f51b4b4":"# Distribution of the Population with Different Number of Family Members Aboard Grouped by Gender\nsns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(8,5)})\n\nsns.countplot(x=\"Sex\", hue=\"SibSp\", data = train, color = 'gray', \n              edgecolor=sns.color_palette(\"dark\", 1)\n             ).set_title('Distribution by the Number of Family Members Aboard, Grouped by Gender')","2c683b8e":"# Visualizing the Port by which the the Three Classes of the Population came aboard\nsns.set(style=\"darkgrid\")\nsns.set(rc={'figure.figsize':(8,5)})\n\nsns.countplot(x=\"Pclass\", hue=\"Embarked\", data = train, color = 'gray', \n              edgecolor=sns.color_palette(\"dark\", 1)\n             ).set_title('Distribution of the Three Classes of the Population, Grouped by Port')","233f8f4f":"train.columns.values","ae46155c":"train.head()","e15ff5a6":"train.info()","f430ad21":"## Uncomment the following line to see a list of all the unique names in the Train File\n## This is used to determine the list items to include in the titles list in the next cell.\n\n# train['Name'].unique().tolist()","3be9ebbf":"titles = ['Mrs', 'Mr', 'Don', 'Jonkheer', 'Master', 'Miss', 'Major', \n          'Rev', 'Dr', 'Ms', 'Mlle','Col', 'Capt', 'Mme', 'Countess']\n\ndef get_title(name):\n    for title in titles:\n        if title in name:\n            return title\n    return 'None'\n        \nprint(get_title('Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)'))\nprint(get_title('Williams, Mr. Charles Eugene'))","1630ea64":"train['Title'] = train['Name'].apply(lambda x: get_title(x))\ntrain.head()","af1d1249":"train['Age'].mean()","a02edf24":"train['Age'].fillna(train['Age'].mean(), inplace = True)\ntrain.head()","5a5bb4e1":"train.drop('Cabin', axis = 1, inplace = True)\ntrain.head()","c1d43708":"train.info()","f85fb1ef":"train.dropna(inplace = True)\ntrain.info()","5d858cc4":"train.head()","86532981":"x_train = train[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Title']]\ny_train = train['Survived']","ff673f41":"x_train.head()","695e9d10":"y_train.head()","7a2f2109":"x_train = pd.get_dummies(x_train)","bc303732":"x_train.head()","ab5a44ba":"x_train.info()","e980caf2":"# Intializing the Model\nclf = RandomForestClassifier(max_depth=75, random_state=0)","4bfd1b7f":"# Training the Model\nclf.fit(x_train, y_train)","6411a044":"# Preprocessing the Test Set\ntest['Title'] = test['Name'].apply(lambda x: get_title(x))\ntest['Age'].fillna(test['Age'].mean(), inplace = True)\ntest.drop('Cabin', axis = 1, inplace = True)\ntest.head()","ec64e156":"test.info()","106c56dc":"test['Fare'].fillna(test['Fare'].mean(), inplace = True)\ntest.info()","65a6764f":"x_test = test[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked', 'Title']]\nx_test.head()","bd377513":"x_test = pd.get_dummies(x_test)","7a924320":"x_test.info()","2d613e86":"total_titles = train['Title'].unique().tolist()\ntest_titles = test['Title'].unique().tolist()\n\nfor title in total_titles:\n    if title not in test_titles:\n        print('Title ' + str(title) + ' not in Test Set')\n        x_test['Title_' + str(title)] = 0","5fc6e760":"x_test.info()","cacd461e":"Survived = clf.predict(x_test)\nSurvived","d7961b1f":"gender_submission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')\ngender_submission.head()","9c430d3d":"gender_submission.info()","4a7fb268":"output = pd.DataFrame({'PassengerId': test.PassengerId, 'Survived': Survived})\noutput.head()","3aeabcc7":"output.info()","463e6398":"output.to_csv('Submission_RandomForest.csv', index=False)","722b44bc":"## Preprocessing","72a038c5":"## Generating the Submission File","41dfdba9":"## Viewing the Sample Submission File","c3291a31":"## Importing and Analyzing the Train and Test CSVs  ","74dc1f6c":"## Import Python Packages and Environment Setup","8e7adc50":"## Model Testing","9f50f45f":"## Data Visualizations","032915e9":"## Model Training"}}