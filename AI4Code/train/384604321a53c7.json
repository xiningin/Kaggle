{"cell_type":{"fcbbe9d1":"code","b1320333":"code","c6e4fade":"code","1b2ae7bc":"code","b9d5d0d9":"code","33f6fa17":"code","80475d9d":"code","a6fde79a":"code","1adf0c1f":"code","2d7b3314":"code","414d7ed5":"code","ec2d4bc0":"code","c21c7c73":"code","7b0d1c16":"code","f5185d6e":"code","22105ee7":"code","b33aadbd":"code","a979537b":"code","0f16fbf9":"code","f923cdc6":"code","79e0e862":"code","68e34bc3":"code","7c18fc6d":"code","bdd08c4c":"code","876dcb04":"code","e35e80b6":"code","c624941c":"code","d85b029a":"code","8abcf4a8":"code","56244ae3":"code","71de2fa7":"code","5e7e140b":"code","7b8bdec1":"code","d17d6b98":"code","1f658a79":"code","2458d52a":"code","6a314056":"code","0a5e3a24":"code","276cd459":"code","f4000616":"code","18fcd2aa":"code","01b26cc7":"code","4c020963":"code","f35b3e26":"code","3dab176d":"code","b441d158":"code","6cc62af6":"code","e8fb0032":"code","583761dc":"code","7b47b4f2":"code","96d9bf50":"code","ba6c2d74":"code","12e32eda":"code","19f4f2de":"code","653fe122":"code","7520b6fb":"code","e7783676":"code","2978ce04":"code","c0d8f99e":"code","1a77abad":"code","91cd884a":"code","f7292904":"code","9746e430":"code","90af1b29":"code","90844195":"code","c6261782":"code","ebe09884":"code","87c61e9c":"code","45de97d3":"code","d1f8e430":"code","ddcf49f8":"code","f8f5e74c":"code","d0c685d8":"code","181a8f03":"code","53dc8eca":"code","59af6998":"code","4501de40":"code","bafd703e":"code","1bea08f4":"code","ccffdf0b":"code","cced29f9":"code","809e4f9e":"code","da669549":"code","285d6229":"code","63d2fb8a":"code","c9753b2a":"code","402f10d3":"code","a4200add":"code","cd96b606":"code","7d5a08fa":"code","0948dacb":"code","4c141f41":"code","edbb0e5a":"code","510d4ebe":"code","35a0d0cd":"code","9607dd4d":"code","b16fc012":"code","0fc8e8a0":"code","b9898024":"code","b9875c58":"code","2c80ddb4":"code","ed370357":"code","39f3c77d":"code","6d7a8c3b":"code","0d489d6b":"code","2992000f":"code","f840e45f":"markdown","fad4b792":"markdown","e8d51797":"markdown","c150e797":"markdown","49d4f0ef":"markdown","c323335f":"markdown","788a31b3":"markdown","b00a6f45":"markdown","28b9e256":"markdown","2d22c2ff":"markdown","be533cd5":"markdown","71d27864":"markdown","866ff56e":"markdown","1d5281cc":"markdown","fb97a506":"markdown","4d2e270e":"markdown","3d39180b":"markdown","fc74f528":"markdown","2232cb36":"markdown","2f087eb3":"markdown","7499de4c":"markdown","1194e1dc":"markdown"},"source":{"fcbbe9d1":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(action='ignore')","b1320333":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV, cross_val_score, KFold, cross_validate\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import Lasso, Ridge, LinearRegression, ElasticNet\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.decomposition import PCA","c6e4fade":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsub = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')","1b2ae7bc":"print(train.shape, test.shape)","b9d5d0d9":"train_test = pd.concat([train, test]).reset_index(drop=True)\nprint(train_test.shape)","33f6fa17":"nan_dict = {\"CNT\":train.isna().sum(),\n            \"RATE\": train.isna().sum()\/train.shape[0] *100\n}\nnan_df = pd.DataFrame(nan_dict)\nprint(nan_df[nan_df[\"RATE\"]>0].sort_values(\"CNT\", ascending=False))\n\n# PoolQC        1453  99.520548     Pool quality                                              NA\tNo Pool\n# MiscFeature   1406  96.301370     Miscellaneous feature not covered in other categories,    NA\tNone\n# Alley         1369  93.767123     Type of alley access to property,                         NA \tNo alley access\n# Fence         1179  80.753425     Fence quality,                                            NA\tNo Fence\n# FireplaceQu    690  47.260274     Fireplace quality                                         NA\tNo Fireplace\n# LotFrontage    259  17.739726     Linear feet of street connected to property\n\n# GarageType      81   5.547945     Garage location                          NA\tNo Garage         \n# GarageYrBlt     81   5.547945     Year garage was built\n# GarageFinish    81   5.547945     Interior finish of the garage            NA\tNo Garage\n# GarageQual      81   5.547945     Garage quality                           NA\tNo Garage\n# GarageCond      81   5.547945     Garage condition                         NA\tNo Garage     \n\n# BsmtExposure    38   2.602740      Refers to walkout or garden level walls                 NA\tNo Basement     No\tNo Exposure\n# BsmtFinType2    38   2.602740      Rating of basement finished area (if multiple types)    NA\tNo Basement\n# BsmtFinType1    37   2.534247      Rating of basement finished area                        NA\tNo Basement\n# BsmtCond        37   2.534247      Evaluates the general condition of the basement         NA\tNo Basement\n# BsmtQual        37   2.534247      Evaluates the height of the basement                    NA\tNo Basement","80475d9d":"nan_dict = {\"CNT\":test.isna().sum(),\n            \"RATE\": test.isna().sum()\/test.shape[0] *100\n}\nnan_df = pd.DataFrame(nan_dict)\nprint(nan_df[nan_df[\"RATE\"]>0].sort_values(\"CNT\", ascending=False))\n\n# train\uc5d0\ub294 \uc5c6\ub294 null \n# MSZoning         4   0.274160            Identifies the general zoning classification of the sale.\n# BsmtFullBath     2   0.137080            Basement full bathrooms\n# BsmtHalfBath     2   0.137080\n# Functional       2   0.137080\n# Utilities        2   0.137080\n# GarageCars       1   0.068540\n# GarageArea       1   0.068540\n# TotalBsmtSF      1   0.068540\n# KitchenQual      1   0.068540\n# BsmtUnfSF        1   0.068540\n# BsmtFinSF2       1   0.068540\n# BsmtFinSF1       1   0.068540\n# Exterior2nd      1   0.068540\n# Exterior1st      1   0.068540\n# SaleType         1   0.068540","a6fde79a":"nan_features_list = nan_df[nan_df[\"RATE\"]>50]\nprint(nan_features_list.index)","1adf0c1f":"train.drop(nan_features_list.index, axis=1, inplace=True)\ntest.drop(nan_features_list.index, axis=1, inplace=True)","2d7b3314":"train.drop('Id', axis=1, inplace=True)\ntest.drop('Id', axis=1, inplace=True)","414d7ed5":"print(train.shape, test.shape)","ec2d4bc0":"corr_s = train.corrwith(train[\"SalePrice\"]).sort_values(ascending=False)\nprint(corr_s)","c21c7c73":"corr_features_list = corr_s[abs(corr_s)<0.1]\nprint(corr_features_list.index)","7b0d1c16":"train.drop(corr_features_list.index, axis=1, inplace=True)\ntest.drop(corr_features_list.index, axis=1, inplace=True)","f5185d6e":"print(train.shape, test.shape)","22105ee7":"nan_dict = {\"CNT\":train.isna().sum(),\n            \"RATE\": train.isna().sum()\/train.shape[0] *100,\n            \"TYPE\": train.dtypes\n}\nnan_df = pd.DataFrame(nan_dict)\nprint(nan_df[nan_df[\"RATE\"]>0].sort_values(\"CNT\", ascending=False))\n\n# null \uc758\ubbf8 \n# LotFrontage   259  17.739726  float64 --> mean \n# GarageType     81  5.547945   object  NO\n# GarageYrBlt    81  5.547945  float64  Year garage was built --> 0             corr    GarageYrBlt      0.486362\n# GarageFinish   81  5.547945   object  NO\n# GarageQual     81  5.547945   object  NO\n# GarageCond     81  5.547945   object  NO\n# BsmtExposure   38  2.602740   object  NO\n# BsmtFinType2   38  2.602740   object  NO\n# BsmtQual       37  2.534247   object  NO\n# BsmtCond       37  2.534247   object  NO\n# BsmtFinType1   37  2.534247   object  NO\n# MasVnrType      8  0.547945   object  Masonry veneer area in square feet  --> None \n# MasVnrArea      8  0.547945  float64  Masonry veneer type  --> 0 \n# Electrical      1  0.068493   object  Electrical system  ---> \ucd5c\ube48\uac12","b33aadbd":"train[[\"GarageYrBlt\", \"MasVnrArea\"]] = train[[\"GarageYrBlt\", \"MasVnrArea\"]].fillna(0)\ntest[[\"GarageYrBlt\", \"MasVnrArea\"]] = test[[\"GarageYrBlt\", \"MasVnrArea\"]].fillna(0)","a979537b":"train[\"LotFrontage\"].fillna(train[\"LotFrontage\"].mean(), inplace=True)\ntest[\"LotFrontage\"].fillna(test[\"LotFrontage\"].mean(), inplace=True)","0f16fbf9":"train[\"MasVnrType\"].fillna(\"None\", inplace=True)\ntest[\"MasVnrType\"].fillna(\"None\", inplace=True)","f923cdc6":"nan_dict = {\"CNT\":train.isna().sum(),\n            \"RATE\": train.isna().sum()\/train.shape[0] *100,\n            \"TYPE\": train.dtypes\n}\nnan_df = pd.DataFrame(nan_dict)\nprint(nan_df[nan_df[\"RATE\"]>0].sort_values(\"CNT\", ascending=False))","79e0e862":"train[nan_df[nan_df[\"RATE\"]>0].index] = train[nan_df[nan_df[\"RATE\"]>0].index].fillna(\"NO\")\ntest[nan_df[nan_df[\"RATE\"]>0].index] = test[nan_df[nan_df[\"RATE\"]>0].index].fillna(\"NO\")","68e34bc3":"nan_dict = {\"CNT\":train.isna().sum(),\n            \"RATE\": train.isna().sum()\/train.shape[0] *100,\n            \"TYPE\": train.dtypes\n}\nnan_df = pd.DataFrame(nan_dict)\nprint(nan_df[nan_df[\"RATE\"]>0].sort_values(\"CNT\", ascending=False))","7c18fc6d":"nan_dict = {\"CNT\":test.isna().sum(),\n            \"RATE\": test.isna().sum()\/test.shape[0] *100,\n            \"TYPE\": test.dtypes\n}\nnan_df = pd.DataFrame(nan_dict)\nprint(nan_df[nan_df[\"RATE\"]>0].sort_values(\"CNT\", ascending=False))","bdd08c4c":"nan_index = nan_df[nan_df[\"RATE\"]>0].index","876dcb04":"test[nan_index] = test[nan_index].fillna(test.mode().iloc[0])","e35e80b6":"nan_dict = {\"CNT\":test.isna().sum(),\n            \"RATE\": test.isna().sum()\/test.shape[0] *100,\n            \"TYPE\": test.dtypes\n}\nnan_df = pd.DataFrame(nan_dict)\nprint(nan_df[nan_df[\"RATE\"]>0].sort_values(\"CNT\", ascending=False))","c624941c":"train.info()","d85b029a":"test.info()","8abcf4a8":"cols = train.select_dtypes(include='float').columns\nprint(cols)\ntrain[cols] = train[cols].astype(int)","56244ae3":"cols = test.select_dtypes(include='float').columns\nprint(cols)\ntest[cols] = test[cols].astype(int)","71de2fa7":"train.select_dtypes(include='object')","5e7e140b":"object_index = train.select_dtypes(include='object').columns   # 38\uac1c","7b8bdec1":"for col in object_index:\n    print(col, train[col].unique())","d17d6b98":"print(train.shape, test.shape)","1f658a79":"le_encoder = LabelEncoder()\n\ncols = object_index\nfor col in cols:   \n    le_encoder.fit(train[col])\n    train[\"LE_\"+ col] = le_encoder.transform(train[col])\n    test[\"LE_\"+ col] = le_encoder.transform(test[col])\n\ntrain.head()","2458d52a":"test.head()","6a314056":"train.drop(object_index, axis=1, inplace=True)\ntest.drop(object_index, axis=1, inplace=True)","0a5e3a24":"print(train.shape, test.shape)","276cd459":"train.info()","f4000616":"test.info()","18fcd2aa":"corr_s = train.corrwith(train[\"SalePrice\"]).sort_values(ascending=False)\nprint(corr_s[abs(corr_s)<0.2])","01b26cc7":"corr_features_list = corr_s[abs(corr_s)<0.1]\n\ntrain.drop(corr_features_list.index, axis=1, inplace=True)\ntest.drop(corr_features_list.index, axis=1, inplace=True)\nprint(train.shape, test.shape)","4c020963":"corr_s = train.corrwith(train[\"SalePrice\"]).sort_values(ascending=False)\nprint(corr_s)","f35b3e26":"def search_like(df, search_keys, map=1, size=(7, 5)) :\n#     like_ = []    \n    like_ = np.array([])\n    for search in search_keys:\n#         like_ += df.columns[df.columns.str.contains(search, case=False)]\n        like_ = np.append(like_, df.columns[df.columns.str.contains(search, case=False)])\n    like_ = np.unique(like_)\n    like_ = np.append(like_, np.array(['SalePrice']))\n    print(like_)\n    if map == 1:\n        plt.figure(figsize=size)\n        try :\n            sns.set(font_scale=1.5)\n            sns.heatmap(df[like_].corr(), annot=True, fmt='.2f', cmap='RdBu', vmin=-1, vmax=1)\n            plt.show()\n        except :\n            print(df[like_].corr())","3dab176d":"search_like(train, ['year','yr','mo'])  #, map=1","b441d158":"train['T_built_remod'] = train['YearBuilt'] + train['YearRemodAdd'] \ntest['T_built_remod'] = test['YearBuilt'] + test['YearRemodAdd'] ","6cc62af6":"train.drop(['YearBuilt', 'YearRemodAdd'], axis=1, inplace=True)\ntest.drop(['YearBuilt', 'YearRemodAdd'], axis=1, inplace=True)\nprint(train.shape, test.shape)","e8fb0032":"# \ub9e4\ubb3c\ucd1d\ud3c9\n#['OverallQual','OverallCond','KitchenQual','HeatingQC','FireplaceQu','ExterQual','ExterCond','BsmtQual','BsmtCond','GarageQual','GarageCond','PoolQC']  \nsearch_like(train, ['Overall','Qual' ,'QC', 'Qu', 'Cond'], size=(10, 8)) ","583761dc":"train['T_garage_cq'] = train['LE_GarageCond'] + train['LE_GarageQual'] \ntest['T_garage_cq'] = test['LE_GarageCond'] + test['LE_GarageQual'] ","7b47b4f2":"train.drop(['LE_GarageCond', 'LE_GarageQual'], axis=1, inplace=True)\ntest.drop(['LE_GarageCond', 'LE_GarageQual'], axis=1, inplace=True)\nprint(train.shape, test.shape)","96d9bf50":"# \ud310\ub9e4\uc720\ud615\n#['SaleType','SaleCondition','MSSubClass','MSZoning','BldgType','HouseStyle','Functional']\nsearch_like(train, ['SaleType','SaleCondition','MSSubClass','MSZoning','BldgType','HouseStyle','Functional'])","ba6c2d74":"# \uc804\uc6a9\uba74\uc801\n# ['GrLivArea','1stFlrSF','2ndFlrSF','LotArea','LandSlope','LandContour']\nsearch_like(train,  ['GrLivArea','1stFlrSF','2ndFlrSF','LotArea','Land','Lot'])    ","12e32eda":"train['T_grArea_flrSF'] = train['1stFlrSF'] + train['2ndFlrSF'] + train['GrLivArea'] \ntest['T_grArea_flrSF'] = test['1stFlrSF'] + test['2ndFlrSF'] + test['GrLivArea'] ","19f4f2de":"train.drop(['1stFlrSF', '2ndFlrSF', 'GrLivArea'], axis=1, inplace=True)\ntest.drop(['1stFlrSF', '2ndFlrSF', 'GrLivArea'], axis=1, inplace=True)\nprint(train.shape, test.shape)","653fe122":"# \ub0b4\ubd80\uc2dc\uc124\n# ['TotRmsAbvGrd','Bedroom','FullBath','HalfBath','Kitchen','Utilities','Heating','HeatingQC','Fireplaces','CentralAir','Electrical']\nsearch_like(train,  ['TotRmsAbvGrd','bed','bath','kitchen','util','heat','fire','air','elec'], size=(12, 8))    ","7520b6fb":"# TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n# BedroomAbvGr: ?    \n\ntrain.drop(['BedroomAbvGr'], axis=1, inplace=True)\ntest.drop(['BedroomAbvGr'], axis=1, inplace=True)\nprint(train.shape, test.shape)","e7783676":"train['T_bath_sum'] = (train['FullBath'] + (0.5 * train['HalfBath']) + train['BsmtFullBath'])\ntest['T_bath_sum'] = (test['FullBath'] + (0.5 * test['HalfBath']) + test['BsmtFullBath'])","2978ce04":"train.drop(['HalfBath', 'FullBath', 'BsmtFullBath'], axis=1, inplace=True)\ntest.drop(['HalfBath', 'FullBath', 'BsmtFullBath'], axis=1, inplace=True)\nprint(train.shape, test.shape)","c0d8f99e":"# \uc678\ubd80\uc2dc\uc124 : \ud3ec\uce58,\ub370\ud06c,\uc218\uc601\uc7a5,\uae30\ud0c0\nsearch_like(train,  ['porch','deck','pool', 'mise'], size=(8, 5))  ","1a77abad":"train['T_porch_area_sum'] = (train['OpenPorchSF']  + train['EnclosedPorch'] + train['ScreenPorch'] + train['WoodDeckSF'])\ntest['T_porch_area_sum'] = (test['OpenPorchSF'] + test['EnclosedPorch'] + test['ScreenPorch'] + test['WoodDeckSF'])","91cd884a":"train.drop(['OpenPorchSF', 'EnclosedPorch', 'ScreenPorch', 'WoodDeckSF'], axis=1, inplace=True)\ntest.drop(['OpenPorchSF', 'EnclosedPorch', 'ScreenPorch', 'WoodDeckSF'], axis=1, inplace=True)\nprint(train.shape, test.shape)","f7292904":"#\uc678\ubd80\uc2dc\uc124 : \uc9c0\ud558\uc2e4,\ucc28\uace0\nsearch_like(train,  ['bsmt','garage'], size=(12, 9)) ","9746e430":"# GarageArea, GarageCars, GarageYrBlt \ntrain.drop(['GarageCars', 'GarageYrBlt'], axis=1, inplace=True)\ntest.drop(['GarageCars', 'GarageYrBlt'], axis=1, inplace=True)\nprint(train.shape, test.shape)","90af1b29":"# TotalBsmtSF, BsmtFinSF1, BsmtUnfSF\ntrain.drop(['BsmtFinSF1', 'BsmtUnfSF'], axis=1, inplace=True)\ntest.drop(['BsmtFinSF1', 'BsmtUnfSF'], axis=1, inplace=True)\nprint(train.shape, test.shape)","90844195":"# \uacf5\uc0ac\uc9c4\ud589\uc5ec\ubd80 \nsearch_like(train_test,  ['LowQualFinSF','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF']) ","c6261782":"# \uc678\uc7a5\uc7ac\nsearch_like(train,  ['exter' , 'masv', 'fense', 'roof']) ","ebe09884":"# LE_Exterior1st, LE_Exterior2nd\ntrain.drop(['LE_Exterior2nd'], axis=1, inplace=True)\ntest.drop(['LE_Exterior2nd'], axis=1, inplace=True)\nprint(train.shape, test.shape)","87c61e9c":"# \ub3c4\ub85c\nsearch_like(train,  ['street', 'drive', 'alley','condition','hood']) ","45de97d3":"# ## \uc218\uce58\ud615 \ud53c\uccd0 \uc0c1\uad00\ubd84\uc11d\n# plt.figure(figsize=(30,16))\n# sns.heatmap(train.corr(), annot=True, fmt='0.2f')\n# plt.show()","d1f8e430":"saleprice_corr_feature  = train.corr().nlargest(15, 'SalePrice').index\nprint(saleprice_corr_feature)\nplt.figure(figsize=(12,8))\nsns.heatmap(train[saleprice_corr_feature].corr(), annot=True, cmap='Blues', fmt='0.2f')\nplt.show()","ddcf49f8":"corr_s = train.corrwith(train[\"SalePrice\"]).sort_values(ascending=False)\nprint(corr_s)","f8f5e74c":"corr_features_list = corr_s[abs(corr_s)<0.2]\nprint(corr_features_list.index)","d0c685d8":"# train.drop(corr_features_list.index, axis=1, inplace=True)\n# test.drop(corr_features_list.index, axis=1, inplace=True)\n\n# print(train.shape, test.shape)","181a8f03":"train.columns","53dc8eca":"train.iloc[:, 0:23].describe()","59af6998":"# fig, axes = plt.subplots(ncols=8, nrows=3, figsize=(30,20))\n# for i, feature in enumerate(train.columns):\n#     cols = i%8\n#     rows = i\/\/8     \n#     sns.distplot(train[feature], kde=True, ax=axes[rows][cols])\n#     axes[rows][cols].set_title(feature)","4501de40":"scale_features = ['LotFrontage', 'LotArea', 'OverallQual', 'MasVnrArea', 'TotalBsmtSF',\n       'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageArea', 'SalePrice',\n       'T_built_remod', 'T_garage_cq', 'T_grArea_flrSF',\n       'T_bath_sum', 'T_porch_area_sum']\nfor sf in scale_features:\n    train[sf] = np.log1p(train[sf])\ntrain.head()    ","bafd703e":"scale_features = ['LotFrontage', 'LotArea', 'OverallQual', 'MasVnrArea', 'TotalBsmtSF',\n       'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageArea',\n       'T_built_remod', 'T_garage_cq', 'T_grArea_flrSF',\n       'T_bath_sum', 'T_porch_area_sum']\nfor sf in scale_features:\n    test[sf] = np.log1p(test[sf])\ntest.head()    ","1bea08f4":"corr_s = train.corrwith(train[\"SalePrice\"]).sort_values(ascending=False)\nprint(corr_s)","ccffdf0b":"corr_features_list = corr_s[abs(corr_s)<0.2]\nprint(corr_features_list.index)","cced29f9":"train.drop(corr_features_list.index, axis=1, inplace=True)\ntest.drop(corr_features_list.index, axis=1, inplace=True)","809e4f9e":"print(train.shape, test.shape)","da669549":"print(train.columns)\nprint(test.columns)","285d6229":"train.info()","63d2fb8a":"test.info()","c9753b2a":"# cols = train.select_dtypes(include='float').columns\n# print(cols)\n# train[cols] = train[cols].astype(int)","402f10d3":"X_df = train.drop([\"SalePrice\"], axis=1)\ny_df = train[\"SalePrice\"]\n\nX_train, X_val, y_train, y_val = train_test_split(X_df, y_df, test_size=0.2, shuffle=True, random_state = 121)\nprint(X_df.shape, y_df.shape)\nprint(X_train.shape, y_train.shape)","a4200add":"# LinearRegression()\nlasso = Lasso(alpha=1.0)    # a*|W|\nridge = Ridge(alpha=1.0)    # a*W^2\nelsnet = ElasticNet(alpha=1.0, l1_ratio=0.2)  # Lasso + Ridge      # 0.2(a*|W|) + 0.8(a*W^2)","cd96b606":"models = [lasso, ridge, elsnet]\nfor model in models:\n    model.fit(X_train, y_train)\n    pred = model.predict(X_val)\n    mse = mean_squared_error(y_val, pred, squared=True)\n    rmse = mean_squared_error(y_val, pred, squared=False)\n    print(f'{model.__class__.__name__} MSE:{mse:.5f} RMSE:{rmse:.5f}') \n    \n# Lasso MSE:0.15270 RMSE:0.39077\n# Ridge MSE:0.01522 RMSE:0.12338\n# ElasticNet MSE:0.07162 RMSE:0.26761","7d5a08fa":"cv_model = GridSearchCV(ridge, param_grid={'alpha':[0.01, 0.05, 1.0, 5.0, 10]},\n            scoring='neg_root_mean_squared_error',\n            cv = 10, refit=True)\ncv_model.fit(X_train, y_train)\nprint(f'RMSE: {cv_model.best_score_ * -1:.5f}')\nprint(cv_model.best_params_)","0948dacb":"pred = cv_model.predict(X_val)  \n#print(pred)\nmse = mean_squared_error(y_val, pred, squared=True)\nrmse = mean_squared_error(y_val, pred, squared=False)\nprint(f'MSE:{mse:.5f} RMSE:{rmse:.5f}')\n\n# MSE:0.01502 RMSE:0.12257","4c141f41":"pred = cv_model.predict(test)","edbb0e5a":"print(pred) #sclaer\ub41c pred\n\npredo = np.round(np.expm1(pred), 6)\nprint(predo)","510d4ebe":"sub","35a0d0cd":"print(sub.shape)\nprint(len(predo))","9607dd4d":"sub[\"SalePrice\"] = np.array(predo).reshape(-1, 1)","b16fc012":"sub","0fc8e8a0":"# sub_df.to_csv(\"gcv_submission.csv\", index=False)","b9898024":"corr_s = train.corrwith(train[\"SalePrice\"]).sort_values(ascending=False)\nprint(corr_s)","b9875c58":"corr_features_list = corr_s[abs(corr_s)<0.3]\nprint(corr_features_list.index)","2c80ddb4":"train.drop(corr_features_list.index, axis=1, inplace=True)\ntest.drop(corr_features_list.index, axis=1, inplace=True)\n\nprint(train.shape, test.shape)","ed370357":"X_df = train.drop([\"SalePrice\"], axis=1)\ny_df = train[\"SalePrice\"]\n\nX_train, X_val, y_train, y_val = train_test_split(X_df, y_df, test_size=0.2, shuffle=True, random_state = 121)\nprint(X_df.shape, y_df.shape)\nprint(X_train.shape, y_train.shape)","39f3c77d":"cv_model = GridSearchCV(ridge, param_grid={'alpha':[0.01, 0.05, 1.0, 5.0, 10]},\n            scoring='neg_root_mean_squared_error',\n            cv = 10, refit=True)\ncv_model.fit(X_train, y_train)\nprint(f'RMSE: {cv_model.best_score_ * -1:.5f}')\nprint(cv_model.best_params_)\n\npred = cv_model.predict(X_val)  \n#print(pred)\nmse = mean_squared_error(y_val, pred, squared=True)\nrmse = mean_squared_error(y_val, pred, squared=False)\nprint(f'MSE:{mse:.5f} RMSE:{rmse:.5f}')\n\n# RMSE: 0.15108\n# {'alpha': 0.01}\n# MSE:0.01786 RMSE:0.13365","6d7a8c3b":"pca = PCA(n_components=20)\n#pipeline = make_pipeline(std_scaler, pca)\npca_res = pca.fit_transform(X_df)\nprint(pca_res.shape)\nprint(\"\uc8fc\uc131\ubd84(PC) 15\uac1c\uac00 \uc804\uccb4 \ub370\uc774\ud130\ub97c \uc5bc\ub9c8\ub098 \uc124\uba85\ud560\uc218 \uc788\ub294\uac00?\\n\", np.sum(pca.explained_variance_ratio_), pca.explained_variance_ratio_)\n","0d489d6b":"pca_df = pd.DataFrame(data=pca_res)\npca_df[\"SalePrice\"] = y_df\npca_df\n# \uc5b4\ub5a0\ud55c \ud53c\uccd0\uac00 \ud569\uccd0\uc9c4\uac74\uc9c0\ub294 \uc54c \uc218 \uc5c6\uc74c ","2992000f":"pca_df_y = pca_df[\"SalePrice\"]  #df[\"traget\"]  \npca_df_X = pca_df[pca_df.columns.difference([\"SalePrice\"])]\nX_train_pca, X_val_pca, y_train_pca, y_val_pca = train_test_split(pca_df_X, pca_df_y, test_size=0.2,  random_state=36, shuffle=True)\n\nmodels = [lasso, ridge, elsnet]\nfor model in models:\n    model.fit(X_train_pca, y_train_pca)\n    pred = model.predict(X_val_pca)\n    mse = mean_squared_error(y_val_pca, pred, squared=True)\n    rmse = mean_squared_error(y_val_pca, pred, squared=False)\n    print(f'{model.__class__.__name__} MSE:{mse:.5f} RMSE:{rmse:.5f}') \n\n# n = 20\n# Lasso MSE:0.18575 RMSE:0.43099\n# Ridge MSE:0.02982 RMSE:0.17268\n# ElasticNet MSE:0.07380 RMSE:0.27166\n\n# n = 15    \n# Lasso MSE:0.18575 RMSE:0.43099\n# Ridge MSE:0.03514 RMSE:0.18745\n# ElasticNet MSE:0.07380 RMSE:0.27166\n\n# n = 10\n# Lasso MSE:0.18575 RMSE:0.43099\n# Ridge MSE:0.03728 RMSE:0.19307\n# ElasticNet MSE:0.07380 RMSE:0.27166","f840e45f":"#### \ud310\ub9e4\uc720\ud615","fad4b792":"### Object --> Numeric","e8d51797":"### \uacb0\uce21\uce58 \ucc44\uc6b0\uae30","c150e797":"#### \uc804\uc6a9\uba74\uc801","49d4f0ef":"### columns 28","c323335f":"### \uacb0\uce21\uce58 \ud655\uc778","788a31b3":"## \uac00\uacf5","b00a6f45":"### \uc0c1\uad00\ubd84\uc11d","28b9e256":"#### \uc678\ubd80\uc2dc\uc124","2d22c2ff":"## \ub370\uc774\ud130 \ud655\uc778","be533cd5":"### columns 37","71d27864":"#### \ub9e4\ubb3c\ucd1d\ud3c9","866ff56e":"### Scaler","1d5281cc":"#### \ub0a0\uc9dc","fb97a506":"#### \ubd88\ud544\uc694\ud55c \ud53c\uccd0 \uc0ad\uc81c","4d2e270e":"#### \ub0b4\ubd80\uc2dc\uc124","3d39180b":" - https:\/\/www.kaggle.com\/c\/house-prices-advanced-regression-techniques\/overview","fc74f528":"## \uc810\uc218\ud655\uc778","2232cb36":"#### \ubd88\ud544\uc694\ud55c \ud53c\uccd0 \uc0ad\uc81c","2f087eb3":"#### \ubd88\ud544\uc694\ud55c \ud53c\uccd0 \uc0ad\uc81c","7499de4c":"## PCA ","1194e1dc":"### \uc720\uc0ac \uceec\ub7fc \ucc3e\uae30"}}