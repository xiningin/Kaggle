{"cell_type":{"c496bf0b":"code","8c46bb6c":"code","72ff5876":"code","d444b1a3":"code","af44bbcf":"code","19ff3f4a":"code","6361e231":"code","21f6134f":"code","3d95902c":"code","8d2f5d4e":"code","18c66932":"code","8a44b627":"code","401b1739":"code","d417f4bc":"code","27e115ee":"code","ea61ac09":"code","3cc41662":"code","d7a98b0b":"code","1183d6cd":"code","c0b35694":"code","377e4ba6":"code","5ea9561d":"code","2eb3b9ab":"code","dde585cc":"code","f7c9aacd":"code","264cf0d1":"code","646283d8":"code","3f5cdf40":"code","47fff399":"code","8376b738":"code","0fd03273":"code","bb3eb43a":"code","ab8903f1":"code","9de3fc63":"markdown","aeed132f":"markdown","ee308c18":"markdown","6bfe4e37":"markdown","d0c0ea54":"markdown","c18b8b01":"markdown","fc455db3":"markdown","d93f4568":"markdown","e5cbd68b":"markdown","079caaf9":"markdown","71c3b033":"markdown","ee24ad17":"markdown","85d23d29":"markdown","94a3df1c":"markdown","48fe7782":"markdown","8487fe41":"markdown","b8b3b96e":"markdown","4589cebf":"markdown","ceac6402":"markdown","a1d51041":"markdown","e07266f4":"markdown","aecab88b":"markdown"},"source":{"c496bf0b":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('whitegrid')\nplt.style.use(\"fivethirtyeight\")\n%matplotlib inline\n\n# For reading stock data from yahoo\nfrom pandas_datareader.data import DataReader\n\n# For time stamps\nfrom datetime import datetime","8c46bb6c":"# The tech stocks we'll use for this analysis\ntech_list = ['AAPL', 'GOOG', 'MSFT', 'AMZN']\n\n# Set up End and Start times for data grab\nend = datetime.now()\nstart = datetime(end.year - 1, end.month, end.day)\n\n\n#For loop for grabing yahoo finance data and setting as a dataframe\nfor stock in tech_list:   \n    # Set DataFrame as the Stock Ticker\n    globals()[stock] = DataReader(stock, 'yahoo', start, end)","72ff5876":"# for company, company_name in zip(company_list, tech_list):\n#     company[\"company_name\"] = company_name","d444b1a3":"company_list = [AAPL, GOOG, MSFT, AMZN]\ncompany_name = [\"APPLE\", \"GOOGLE\", \"MICROSOFT\", \"AMAZON\"]\n\nfor company, com_name in zip(company_list, company_name):\n    company[\"company_name\"] = com_name\n    \ndf = pd.concat(company_list, axis=0)\ndf.tail(10)","af44bbcf":"# Summary Stats\nAAPL.describe()","19ff3f4a":"# General info\nAAPL.info()","6361e231":"# Let's see a historical view of the closing price\n\n\nplt.figure(figsize=(12, 8))\nplt.subplots_adjust(top=1.25, bottom=1.2)\n\nfor i, company in enumerate(company_list, 1):\n    plt.subplot(2, 2, i)\n    company['Adj Close'].plot()\n    plt.ylabel('Adj Close')\n    plt.xlabel(None)\n    plt.title(f\"{tech_list[i - 1]}\")","21f6134f":"# Now let's plot the total volume of stock being traded each day\nplt.figure(figsize=(12, 8))\nplt.subplots_adjust(top=1.25, bottom=1.2)\n\nfor i, company in enumerate(company_list, 1):\n    plt.subplot(2, 2, i)\n    company['Volume'].plot()\n    plt.ylabel('Volume')\n    plt.xlabel(None)\n    plt.title(f\"{tech_list[i - 1]}\")","3d95902c":"ma_day = [10, 20, 50]\n\nfor ma in ma_day:\n    for company in company_list:\n        column_name = f\"MA for {ma} days\"\n        company[column_name] = company['Adj Close'].rolling(ma).mean()","8d2f5d4e":"print(GOOG.columns)","18c66932":"df.groupby(\"company_name\").hist(figsize=(12, 12));","8a44b627":"fig, axes = plt.subplots(nrows=2, ncols=2)\nfig.set_figheight(8)\nfig.set_figwidth(15)\n\nAAPL[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[0,0])\naxes[0,0].set_title('APPLE')\n\nGOOG[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[0,1])\naxes[0,1].set_title('GOOGLE')\n\nMSFT[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[1,0])\naxes[1,0].set_title('MICROSOFT')\n\nAMZN[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']].plot(ax=axes[1,1])\naxes[1,1].set_title('AMAZON')\n\nfig.tight_layout()","401b1739":"# We'll use pct_change to find the percent change for each day\nfor company in company_list:\n    company['Daily Return'] = company['Adj Close'].pct_change()\n\n# Then we'll plot the daily return percentage\nfig, axes = plt.subplots(nrows=2, ncols=2)\nfig.set_figheight(8)\nfig.set_figwidth(15)\n\nAAPL['Daily Return'].plot(ax=axes[0,0], legend=True, linestyle='--', marker='o')\naxes[0,0].set_title('APPLE')\n\nGOOG['Daily Return'].plot(ax=axes[0,1], legend=True, linestyle='--', marker='o')\naxes[0,1].set_title('GOOGLE')\n\nMSFT['Daily Return'].plot(ax=axes[1,0], legend=True, linestyle='--', marker='o')\naxes[1,0].set_title('MICROSOFT')\n\nAMZN['Daily Return'].plot(ax=axes[1,1], legend=True, linestyle='--', marker='o')\naxes[1,1].set_title('AMAZON')\n\nfig.tight_layout()","d417f4bc":"# Note the use of dropna() here, otherwise the NaN values can't be read by seaborn\nplt.figure(figsize=(12, 12))\n\nfor i, company in enumerate(company_list, 1):\n    plt.subplot(2, 2, i)\n    sns.distplot(company['Daily Return'].dropna(), bins=100, color='purple')\n    plt.ylabel('Daily Return')\n    plt.title(f'{company_name[i - 1]}')\n# Could have also done:\n#AAPL['Daily Return'].hist()","27e115ee":"# Grab all the closing prices for the tech stock list into one DataFrame\nclosing_df = DataReader(tech_list, 'yahoo', start, end)['Adj Close']\n\n# Let's take a quick look\nclosing_df.head() ","ea61ac09":"# Make a new tech returns DataFrame\ntech_rets = closing_df.pct_change()\ntech_rets.head()","3cc41662":"# Comparing Google to itself should show a perfectly linear relationship\nsns.jointplot('GOOG', 'GOOG', tech_rets, kind='scatter', color='seagreen')","d7a98b0b":"# We'll use joinplot to compare the daily returns of Google and Microsoft\nsns.jointplot('GOOG', 'MSFT', tech_rets, kind='scatter')","1183d6cd":"# We can simply call pairplot on our DataFrame for an automatic visual analysis \n# of all the comparisons\n\nsns.pairplot(tech_rets, kind='reg')","c0b35694":"# Set up our figure by naming it returns_fig, call PairPLot on the DataFrame\nreturn_fig = sns.PairGrid(tech_rets.dropna())\n\n# Using map_upper we can specify what the upper triangle will look like.\nreturn_fig.map_upper(plt.scatter, color='purple')\n\n# We can also define the lower triangle in the figure, inclufing the plot type (kde) \n# or the color map (BluePurple)\nreturn_fig.map_lower(sns.kdeplot, cmap='cool_d')\n\n# Finally we'll define the diagonal as a series of histogram plots of the daily return\nreturn_fig.map_diag(plt.hist, bins=30)","377e4ba6":"# Set up our figure by naming it returns_fig, call PairPLot on the DataFrame\nreturns_fig = sns.PairGrid(closing_df)\n\n# Using map_upper we can specify what the upper triangle will look like.\nreturns_fig.map_upper(plt.scatter,color='purple')\n\n# We can also define the lower triangle in the figure, inclufing the plot type (kde) or the color map (BluePurple)\nreturns_fig.map_lower(sns.kdeplot,cmap='cool_d')\n\n# Finally we'll define the diagonal as a series of histogram plots of the daily return\nreturns_fig.map_diag(plt.hist,bins=30)","5ea9561d":"# Let's go ahead and use sebron for a quick correlation plot for the daily returns\nsns.heatmap(tech_rets.corr(), annot=True, cmap='summer')","2eb3b9ab":"sns.heatmap(closing_df.corr(), annot=True, cmap='summer')","dde585cc":"# Let's start by defining a new DataFrame as a clenaed version of the oriignal tech_rets DataFrame\nrets = tech_rets.dropna()\n\narea = np.pi*20\n\nplt.figure(figsize=(12, 10))\nplt.scatter(rets.mean(), rets.std(), s=area)\nplt.xlabel('Expected return')\nplt.ylabel('Risk')\n\nfor label, x, y in zip(rets.columns, rets.mean(), rets.std()):\n    plt.annotate(label, xy=(x, y), xytext=(50, 50), textcoords='offset points', ha='right', va='bottom', \n                 arrowprops=dict(arrowstyle='-', color='blue', connectionstyle='arc3,rad=-0.3'))","f7c9aacd":"#Get the stock quote\ndf = DataReader('AAPL', data_source='yahoo', start='2012-01-01', end=datetime.now())\n#Show teh data\ndf","264cf0d1":"plt.figure(figsize=(16,8))\nplt.title('Close Price History')\nplt.plot(df['Close'])\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.show()","646283d8":"#Create a new dataframe with only the 'Close column\ndata = df.filter(['Close'])\n#Convert the dataframe to a numpy array\ndataset = data.values\n#Get the number of rows to train the model on\ntraining_data_len = int(np.ceil( len(dataset) * .8 ))\n\ntraining_data_len","3f5cdf40":"#Scale the data\nfrom sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset)\n\nscaled_data","47fff399":"#Create the training data set\n#Create the scaled training data set\ntrain_data = scaled_data[0:int(training_data_len), :]\n#Split the data into x_train and y_train data sets\nx_train = []\ny_train = []\n\nfor i in range(60, len(train_data)):\n    x_train.append(train_data[i-60:i, 0])\n    y_train.append(train_data[i, 0])\n    if i<= 61:\n        print(x_train)\n        print(y_train)\n        print()\n        \n# Convert the x_train and y_train to numpy arrays \nx_train, y_train = np.array(x_train), np.array(y_train)\n\n#Reshape the data\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\n# x_train.shape","8376b738":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM\n\n#Build the LSTM model\nmodel = Sequential()\nmodel.add(LSTM(128, return_sequences=True, input_shape= (x_train.shape[1], 1)))\nmodel.add(LSTM(64, return_sequences=False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\n#Train the model\nmodel.fit(x_train, y_train, batch_size=1, epochs=1)","0fd03273":"#Create the testing data set\n#Create a new array containing scaled values from index 1543 to 2002 \ntest_data = scaled_data[training_data_len - 60: , :]\n#Create the data sets x_test and y_test\nx_test = []\ny_test = dataset[training_data_len:, :]\nfor i in range(60, len(test_data)):\n    x_test.append(test_data[i-60:i, 0])\n    \n# Convert the data to a numpy array\nx_test = np.array(x_test)\n\n# Reshape the data\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))\n\n# Get the models predicted price values \npredictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)\n\n# Get the root mean squared error (RMSE)\nrmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))\nrmse","bb3eb43a":"# Plot the data\ntrain = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n# Visualize the data\nplt.figure(figsize=(16,8))\nplt.title('Model')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Close Price USD ($)', fontsize=18)\nplt.plot(train['Close'])\nplt.plot(valid[['Close', 'Predictions']])\nplt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\nplt.show()","ab8903f1":"#Show the valid and predicted prices\nvalid","9de3fc63":"Now that we have all the closing prices, let's go ahead and get the daily return for all the stocks, like we did for the Apple stock.","aeed132f":"# 4. What was the correlation between different stocks closing prices?","ee308c18":"Quick note: Using globals() is a sloppy way of setting the DataFrame names, but its simple","6bfe4e37":"# 3. What was the daily return of the stock on average?","d0c0ea54":"Finally, we could also do a correlation plot, to get actual numerical values for the correlation between the stocks' daily return values. By comparing the closing prices, we see an interesting relationship between Microsoft and Apple.","c18b8b01":"# Data Project - Stock Market Analysis \n\n![techAnalysis-1000x500.jpg](attachment:techAnalysis-1000x500.jpg)","fc455db3":"# 1. What was the change in price of the stock overtime?\n\nIn this section we'll go over how to handle requesting stock information with pandas, and how to analyze basic attributes of a stock.","d93f4568":"# 5. How much value do we put at risk by investing in a particular stock?","e5cbd68b":"Now that we've seen the visualizations for the closing price and the volume traded each day, let's go ahead and caculate the moving average for the stock.","079caaf9":"Now that we've done some baseline analysis, let's go ahead and dive a little deeper. We're now going to analyze the risk of the stock. In order to do so we'll need to take a closer look at the daily changes of the stock, and not just its absolute value. Let's go ahead and use pandas to retrieve teh daily returns for the Apple stock.","71c3b033":"Let's go ahead and play aorund with the AAPL DataFrame to get a feel for the data","ee24ad17":"Great, now let's get an overall look at the average daily return using a histogram. We'll use seaborn to create both a histogram and kde plot on the same figure.","85d23d29":"Now we can compare the daily percentage return of two stocks to check how correlated. First let's see a sotck compared to itself.","94a3df1c":"# 2. What was the moving average of the various stocks?","48fe7782":"Now what if we wanted to analyze the returns of all the stocks in our list? Let's go ahead and build a DataFrame with all the ['Close'] columns for each of the stocks dataframes.","8487fe41":"In this notebook we will be looking at data from the stock market, particularly some technology stocks. We will learn how to use pandas to get stock information, visualize different aspects of it, and finally we will look at a few ways of analyzing the risk of a stock, based on its previous performance history. We will also be predicting future stock prices through a Long Short Term Memory (LSTM) method!\n\nWe'll be answering the following questions along the way:\n\n    1.) What was the change in price of the stock over time?\n    2.) What was the daily return of the stock on average?\n    3.) What was the moving average of the various stocks?\n    4.) What was the correlation between different stocks'?\n    5.) How much value do we put at risk by investing in a particular stock?\n    6.) How can we attempt to predict future stock behavior? (Predicting the closing price stock price of APPLE inc using LSTM)\n   ","b8b3b96e":"# 6. Predicting the closing price stock price of APPLE inc:","4589cebf":"There are many ways we can quantify risk, one of the most basic ways using the information we've gathered on daily percentage returns is by comparing the expected return with the standard deviation of the daily returns.","ceac6402":"Fantastic! Just like we suspected in our PairPlot we see here numerically and visually that Microsoft and Amazon had the strongest correlation of daily stock return. It's also interesting to see that all the technology comapnies are positively correlated.","a1d51041":"So now we can see that if two stocks are perfectly (and positivley) correlated with each other a linear relationship bewteen its daily return values should occur. \n\nSeaborn and pandas make it very easy to repeat this comparison analysis for every possible combination of stocks in our technology stock ticker list. We can use sns.pairplot() to automatically create this plot","e07266f4":"Above we can see all the relationships on daily returns between all the stocks. A quick glance shows an interesting correlation between Google and Amazon daily returns. It might be interesting to investigate that individual comaprison. While the simplicity of just calling sns.pairplot() is fantastic we can also use sns.PairGrid() for full control of the figure, including what kind of plots go in the diagonal, the upper triangle, and the lower triangle. Below is an example of utilizing the full power of seaborn to achieve this result.","aecab88b":"Now let's go ahead and plot all the additional Moving Averages"}}