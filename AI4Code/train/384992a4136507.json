{"cell_type":{"f9a194f2":"code","c1587a1c":"code","55c471c4":"code","7ed9cedd":"code","5f44a096":"code","9d788b15":"code","1ab570a0":"code","24346dfa":"code","975c066d":"code","89eba599":"code","5450c994":"code","b9332b29":"code","727d9070":"code","95073e16":"code","eef9d781":"code","43ec39c3":"code","fb0939cb":"code","8c86c87c":"code","bf03ba7a":"code","9cd44d68":"code","727a8ab0":"code","24f0dc05":"code","4374c9c7":"code","220ea29f":"code","232fcc46":"code","e26a8d5c":"code","d31d853f":"code","5fdb5225":"code","cd086f46":"code","976bd99c":"code","a1f757f2":"code","24988ef0":"code","7f246bc0":"code","71c96898":"code","521dafbd":"code","3c09cfa3":"code","b89f37ec":"code","8ae097b2":"code","4c7933ac":"code","2de375f1":"code","eab84632":"code","1314bdec":"code","55366cd5":"code","b561d5fb":"code","ed0895ea":"code","aa30bced":"code","c0bf2642":"code","4e96ac03":"code","7e60be97":"markdown","a51b42a1":"markdown","7ddffe69":"markdown","6d11a8c7":"markdown","53fc533d":"markdown","414cd035":"markdown","382f16f4":"markdown","998c292b":"markdown","c3f3731d":"markdown","f52b6669":"markdown","5e4b3c25":"markdown","159cd6c3":"markdown"},"source":{"f9a194f2":"import numpy as np\nimport pandas as pd\nimport pandas_profiling as pp\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nimport datetime","c1587a1c":"import warnings  \nwarnings.filterwarnings('ignore')","55c471c4":"HOME_PATH = r'..\/input'\nos.listdir(HOME_PATH)","7ed9cedd":"train_set = pd.read_csv(HOME_PATH+'\/train.csv')","5f44a096":"%pylab inline","9d788b15":"def split_datetime(df):\n    splitted_date = df['datetime'].str.split('-')\n    df['year'] = [int(date[0]) for date in splitted_date]\n    df['year'].loc[df['year']==2011] = 1\n    df['year'].loc[df['year']==2012] = 2\n#     df['month'] = [date[1] for date in splitted_date]\n#     df['day'] = [int(date[2].split(\" \")[0]) for date in splitted_date]\n    df['time'] = [date[2].split(\" \")[1] for date in splitted_date]","1ab570a0":"def round_temp(df):\n    df['rounded_temp'] = df['temp'].round()\n    df['rounded_atemp'] = df['atemp'].round()","24346dfa":"def month_to_num(df):\n    \"\"\" Convert month to numerical \"\"\"\n    for i in range(1,10):\n        df['month'].loc[df['month']=='0'+str(i)] = i\n    for i in range(10,13):\n        df['month'].loc[df['month']==str(i)] = i","975c066d":"def time_to_num(df):\n    \"\"\" Convert time to numerical \"\"\"\n    for i in range(0,10):\n        df['time'].loc[df['time']=='0'+str(i)+':00:00'] = i\n    for i in range(10,24):\n        df['time'].loc[df['time']==str(i)+':00:00'] = i","89eba599":"def weekend(df):\n    df['weekend'] = np.zeros_like(df['holiday'])\n    df['weekend'].loc[(df['workingday'] == 0) & (df['holiday'] == 0)] = 1","5450c994":"def weekday(df):\n    df['weekday'] = df['datetime'].apply(lambda date : \\\n                                         datetime.datetime.strptime(str(date.split()[0]),\"%Y-%m-%d\").weekday())","b9332b29":"def process_df(df):\n    split_datetime(df)\n    round_temp(df)\n#     month_to_num(df)\n    time_to_num(df)\n    weekend(df)\n    weekday(df)\n    return df.drop('datetime', axis=1)","727d9070":"pp.ProfileReport(train_set)","95073e16":"train_set = process_df(train_set)","eef9d781":"train_set['count_bin'] = np.zeros_like(train_set['count'])\ntrain_set['count_bin'].loc[(train_set['count']>20) & (train_set['count']<100)] = 1\nfor i in range(2,10):\n    train_set['count_bin'].loc[(train_set['count']>(i-1)*100) & (train_set['count']<(i)*100)] = i\ntrain_set['count_bin'].loc[train_set['count']>900] = 10","43ec39c3":"fig = plt.figure(figsize=(10, 4))\nfig.add_subplot(1,2,1)\nsns.countplot(x='year', hue='count_bin', data=train_set.loc[train_set['year']==1])\nfig.add_subplot(1,2,2)\nsns.countplot(x='year', hue='count_bin', data=train_set.loc[train_set['year']==2])","fb0939cb":"# sns.factorplot(x=\"month\",y=\"count\",data=train_set,kind='bar')","8c86c87c":"fig = plt.figure(figsize=(20, 6))\nfig.add_subplot(1,2,1)\nsns.countplot(x='weekday', hue='count_bin', data=train_set)\nfig.add_subplot(1,2,2)\nsns.countplot(x='time', hue='count_bin', data=train_set)","bf03ba7a":"sns.factorplot(x=\"weekday\",y=\"count\",data=train_set,kind='bar')\nsns.factorplot(x=\"time\",y=\"count\",data=train_set,kind='bar')","9cd44d68":"# train_set['high_time'] = np.zeros_like(train_set['time'])\n# train_set['high_time'].loc[(((train_set['time'] > 6) & (train_set['time'] < 15)) | (train_set['time'] == 20))] = 1\n# train_set['high_time'].loc[((train_set['time'] == 8) | (train_set['time'] == 16) | (train_set['time'] == 19))] = 2\n# train_set['high_time'].loc[((train_set['time'] == 17) | (train_set['time'] == 18))] = 3","727a8ab0":"# fig = plt.figure(figsize=(10, 4))\n# fig.add_subplot(1,2,1)\nsns.factorplot(x=\"weekend\",y=\"count\",data=train_set,kind='bar')\n# sns.countplot(x='weekend', hue='count_bin', data=train_set.loc[train_set['weekend']==1])\n# fig.add_subplot(1,2,2)\nsns.factorplot(x=\"workingday\",y=\"count\",data=train_set,kind='bar')\n# sns.countplot(x='workingday', hue='count_bin', data=train_set.loc[train_set['workingday']==1])","24f0dc05":"sns.factorplot(x=\"rounded_temp\",y=\"count\",data=train_set,kind='bar')","4374c9c7":"sns.factorplot(x=\"rounded_atemp\",y=\"count\",data=train_set,kind='bar')","220ea29f":"fig = plt.figure()\nfig.add_subplot(2,2,1)\nplt.hist(train_set['count'].loc[(train_set['count']<50) & (train_set['season']==1)])\n\nfig.add_subplot(2,2,2)\nplt.hist(train_set['count'].loc[(train_set['count']<50) & (train_set['season']==2)])\n\nfig.add_subplot(2,2,3)\nplt.hist(train_set['count'].loc[(train_set['count']<50) & (train_set['season']==3)])\n\nfig.add_subplot(2,2,4)\nplt.hist(train_set['count'].loc[(train_set['count']<50) & (train_set['season']==4)])","232fcc46":"sns.factorplot(x=\"season\",y=\"count\",data=train_set,kind='bar')","e26a8d5c":"sns.factorplot(x=\"weather\",y=\"count\",data=train_set,kind='bar')","d31d853f":"train_set['temp_bin'] = np.floor(train_set['temp'])\/\/5","5fdb5225":"sns.factorplot(x=\"temp_bin\",y=\"count\",data=train_set,kind='bar')","cd086f46":"from sklearn.metrics import mean_squared_log_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import KFold, cross_val_score, GridSearchCV\nimport lightgbm as lgb\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import accuracy_score, make_scorer","976bd99c":"train_set = pd.get_dummies(train_set, columns=['season', 'weather', 'weekday', 'holiday'])\n# train_set = pd.get_dummies(train_set, columns=['season', 'weather', 'weekday', 'year', 'month', 'time'])","a1f757f2":"train_set['temp_weather_1'] = train_set['temp'] * train_set['weather_1']\ntrain_set['temp_weather_2'] = train_set['temp'] * train_set['weather_2']\ntrain_set['temp_weather_3'] = train_set['temp'] * train_set['weather_3']\ntrain_set['temp_weather_4'] = train_set['temp'] * train_set['weather_4']","24988ef0":"y = train_set.loc[:, 'count']\nX = train_set.drop(['count', 'count_bin', 'casual', 'registered'], axis=1) ","7f246bc0":"rf = RandomForestRegressor(random_state=42, n_jobs=-1, n_estimators=200, oob_score=True, min_samples_split=4, max_features=0.9, max_depth=17)\nrf.fit(X, y)","71c96898":"scores = cross_val_score(rf, X, y, cv=5, scoring='neg_mean_squared_log_error')\nprint(\"score, root score: \", scores, np.sqrt(np.abs(scores)))","521dafbd":"d_importance = pd.DataFrame(columns=['features'], data=X.columns)\nd_importance['importance'] = rf.feature_importances_\nd_importance.sort_values(by='importance',ascending=False).head(20)","3c09cfa3":"# def RMSLE(y_hat, data):\n#     y_true = data.get_label()\n#     y_hat = np.round(y_hat)\n#     y_hat[y_hat<0]=0\n#     return 'rmlse', np.sqrt(mean_squared_log_error(y_true, y_hat)), True","b89f37ec":"# d_train = lgb.Dataset(X, label=y)\n# params = {'objective': 'regression', 'metric': 'rmsle', 'random_state': 501, 'verbose': 0, 'reg_alpha ': 0.1, 'reg_lambda': 0.1}","8ae097b2":"# lgb_cv = lgb.cv(\n#             params, \n#             d_train,\n#             metrics = 'rmsle',\n#             feval= RMSLE,\n#             nfold=5,\n#             verbose_eval = 5)","4c7933ac":"# lgb_model = lgb.train(\n#             params, \n#             d_train,\n#             feval= RMSLE,\n#             verbose_eval = 5)","2de375f1":"# d_importance = pd.DataFrame(columns=['features'], data=X.columns)\n# d_importance['gain_importance'] = lgb_model.feature_importance(importance_type='gain')\n# d_importance['split_importance'] = lgb_model.feature_importance(importance_type='split')\n# d_importance.sort_values(by='gain_importance',ascending=False).head(25)","eab84632":"# xgb_model = XGBRegressor(colsample_bytree=0.7, learning_rate=0.05, max_depth=7, min_child_weight=4, subsample=0.7, random_state=42)\n# xgb_model.fit(X, y)","1314bdec":"# def rmsle(y_true, y_hat):\n#     y_hat = np.round(y_hat)\n#     y_hat[y_hat<0]=0\n#     return np.sqrt(mean_squared_log_error(y_true, y_hat))\n\n# rmsle_score = make_scorer(rmsle, greater_is_better=False)","55366cd5":"# scores = cross_val_score(xgb_model, X, y, cv=5, scoring=rmsle_score)\n# print(\"scores \", np.abs(scores))","b561d5fb":"# d_importance = pd.DataFrame(columns=['features'], data=X.columns)\n# d_importance['importance'] = xgb_model.feature_importances_\n# d_importance.sort_values(by='importance',ascending=False).head(20)","ed0895ea":"test_set = pd.read_csv(HOME_PATH+'\/test.csv')\ny_test = test_set['datetime']\ntest_set = process_df(test_set)\ntest_set = pd.get_dummies(test_set, columns=['season', 'weather', 'weekday', 'holiday'])","aa30bced":"test_set['temp_weather_1'] = test_set['temp'] * test_set['weather_1']\ntest_set['temp_weather_2'] = test_set['temp'] * test_set['weather_2']\ntest_set['temp_weather_3'] = test_set['temp'] * test_set['weather_3']\ntest_set['temp_weather_4'] = test_set['temp'] * test_set['weather_4']\n\ntest_set['temp_bin'] = np.floor(test_set['temp'])\/\/5\n\n# test_set['high_time'] = np.zeros_like(test_set['time'])\n# test_set['high_time'].loc[(((test_set['time'] > 6) & (test_set['time'] < 15)) | (test_set['time'] == 20))] = 1\n# test_set['high_time'].loc[((test_set['time'] == 8) | (test_set['time'] == 16) | (test_set['time'] == 19))] = 2\n# test_set['high_time'].loc[((test_set['time'] == 17) | (test_set['time'] == 18))] = 3","c0bf2642":"test_set.head()","4e96ac03":"predictions = np.zeros_like(y_test)\npredictions = (rf.predict(test_set)).round().astype(int)\npredictions[predictions < 0] = 0\n\nsubmission = pd.concat([y_test, pd.Series(predictions, name=\"count\")], axis=1)\nprint(submission.head(30))\n\nsubmission.to_csv(\"submission.csv\", index=False)","7e60be97":"### Random forest","a51b42a1":"# Bike sharing challenge","7ddffe69":"## Model","6d11a8c7":"### XGB","53fc533d":"### Datetime","414cd035":"### Season","382f16f4":"## Submission","998c292b":"### Temp and atemp","c3f3731d":"### LGB","f52b6669":"### Preprocessing","5e4b3c25":"## Feature functions","159cd6c3":"## Data exploration"}}