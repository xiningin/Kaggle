{"cell_type":{"a6eda205":"code","7bff3e31":"code","8df53794":"code","34fc6e87":"code","3e9a1476":"code","92bb89aa":"code","2908e951":"code","a0688366":"code","675fb58d":"code","13c087fa":"code","b18f557a":"code","5b163638":"code","4d8b0d09":"code","635b8973":"code","b2a89b65":"code","4a792a6f":"code","222b6e6e":"code","3ee6e82c":"code","d5017b5e":"code","5896ca8f":"code","3029a01a":"code","f8b562a4":"code","8071536a":"code","003ff32c":"code","9b87e8eb":"code","eecb390c":"code","49a4de3a":"code","57562bd7":"code","9a95ab7a":"code","ec404cb3":"code","8d5a12bc":"code","e99a7b9b":"code","1f6b0bb6":"code","357d1cea":"code","7f53d4ca":"code","4dc8a2af":"code","6b435faf":"markdown","371f2913":"markdown","9f5051a9":"markdown","c8ec8645":"markdown","9339e700":"markdown","3a5e04a8":"markdown","48ca25bb":"markdown","d03b8c99":"markdown","03aa102b":"markdown","7442d60e":"markdown","c18c4ec0":"markdown","67046614":"markdown","3cc1c475":"markdown","a698e6dd":"markdown","26d2ea06":"markdown","6cc2430d":"markdown","1a14b2c7":"markdown","ff694d91":"markdown","b2dc0d84":"markdown","647b47d0":"markdown","1e4a56f4":"markdown","f52a847f":"markdown","554bd699":"markdown","8aae0847":"markdown","b45f2980":"markdown","95f96b0e":"markdown","c12ecece":"markdown","e443e531":"markdown","341dceeb":"markdown","3facfc2b":"markdown"},"source":{"a6eda205":"import numpy as np \nimport pandas as pd \nimport math\nfrom sklearn.cluster import KMeans\n\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom matplotlib import style\nfrom sklearn.preprocessing import MinMaxScaler\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport os","7bff3e31":"DATADIR = '..\/input\/summer-products-and-sales-in-ecommerce-wish'\nos.listdir(DATADIR)","8df53794":"#loading dataset\ndf = pd.read_csv(DATADIR + '\/summer-products-with-rating-and-performance_2020-08.csv')\n","34fc6e87":"df.head()","3e9a1476":"df.info()","92bb89aa":"df.describe()","2908e951":"def tag_number(tags):\n    ls = tags.split(',')\n    return len(ls)","a0688366":"df['tags_count'] = df['tags'].apply(tag_number)","675fb58d":"df.iloc[:,[43]]","13c087fa":"#deleting categorical attributes\ndf.drop(labels = ['title', 'currency_buyer', 'product_color', 'product_variation_size_id', 'origin_country', 'theme', 'crawl_month','title_orig', 'merchant_profile_picture', 'product_url', 'product_picture', 'product_id', 'merchant_id', \n                     'merchant_info_subtitle', 'merchant_name', 'merchant_title', 'shipping_option_name', 'urgency_text','tags'], axis=1, inplace=True)","b18f557a":"df.info()","5b163638":"# rating features\ndf['rating_five_count'].replace(np.nan, 0, inplace=True)\ndf['rating_four_count'].replace(np.nan, 0, inplace=True)\ndf['rating_three_count'].replace(np.nan, 0, inplace=True)\ndf['rating_two_count'].replace(np.nan, 0, inplace=True)\ndf['rating_one_count'].replace(np.nan, 0, inplace=True)\n\n# urgency banner\ndf['has_urgency_banner'].replace(np.nan, 0, inplace=True)","4d8b0d09":"fig_dims = (25, 25)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.heatmap(df.corr(),\n            annot=True,\n            ax=ax)\nax.add_patch(plt.Rectangle((0,2),31,1, \n                           fill = False, \n                           edgecolor = 'blue', \n                           lw = 3))\nplt.xticks(rotation=45, ha='right')\nplt.yticks(rotation=45, ha='right')\nplt.show()","635b8973":"df.iloc[:,[2,4,5]].info()","b2a89b65":"indexNames = df[ df['rating_count'] == 0 ].index","4a792a6f":"indexNames","222b6e6e":"df.drop(indexNames , inplace=True)","3ee6e82c":"# create a list of our conditions\nconditions = [\n    (df['units_sold'] <= 999),\n    (df['units_sold'] >=1000 ) & (df['units_sold'] <= 9999),\n    (df['units_sold'] >= 10000),\n    ]\n\n# create a list of the values we want to assign for each condition\nvalues = [0, 1, 2]\n\n# create a new column and use np.select to assign values to it using our lists as arguments\ndf['units_sold_en'] = np.select(conditions, values)\n\n# display updated DataFrame\n","d5017b5e":"# create a list of our conditions\nconditions = [\n    (df['rating'] < 3),\n    (df['rating'] >= 3 ) & (df['rating'] < 4),\n    (df['rating'] >= 4),\n    ]\n\n# create a list of the values we want to assign for each condition\nvalues = [0, 1, 2]\n\n# create a new column and use np.select to assign values to it using our lists as arguments\ndf['rating_en'] = np.select(conditions, values)\n\n# display updated DataFrame\n","5896ca8f":"# create a list of our conditions\nconditions = [\n    (df['rating_count'] <=100),\n    (df['rating_count'] > 100 ) & (df['rating_count'] <=1000 ),\n    (df['rating_count'] > 1000),\n    ]\n\n# create a list of the values we want to assign for each condition\nvalues = [0, 1, 2]\n\n# create a new column and use np.select to assign values to it using our lists as arguments\ndf['rating_count_en'] = np.select(conditions, values)\n\n# display updated DataFrame\n","3029a01a":"df.iloc[:,[2,4,5]]","f8b562a4":"df.columns[df.isna().any()].tolist()","8071536a":"#units_sold_en\nsns.boxplot(x = df[\"units_sold_en\"])","003ff32c":"#units_sold_en\nsns.boxplot(x = df[\"rating_en\"])","9b87e8eb":"#units_sold_en\nsns.boxplot(x = df[\"rating_count_en\"])","eecb390c":"ss = MinMaxScaler()\nss_df = ss.fit_transform(df.iloc[:,[25,26,27]]) # 25 - units_sold, 26 - rating, 27 - ratings_count\nss_df","49a4de3a":"sse =[]","57562bd7":"for i in range(1,11):\n    KM = KMeans(n_clusters=i)\n    KM.fit(ss_df)\n    sse.append(KM.inertia_)","9a95ab7a":"sse","ec404cb3":"plt.plot(range(1,11), sse)","8d5a12bc":"k_means = KMeans(n_clusters = 4)\nk_means.fit(ss_df)\ncluster = k_means.labels_","e99a7b9b":"df['product_success']= cluster\n\n","1f6b0bb6":"df['product_success']","357d1cea":"df.groupby('product_success')[['units_sold','rating','rating_count']].describe().T","7f53d4ca":"labels = k_means.labels_\ncentroids = k_means.cluster_centers_","4dc8a2af":"trace1 = go.Scatter3d(\n    x= df['units_sold'],\n    y= df['rating'],\n    z= df['rating_count'],\n    mode='markers',\n     marker=dict(\n        color = df['product_success'], \n        size= 10,\n        line=dict(\n            color= df['product_success'],\n            width= 12\n        ),\n        opacity=0.8\n     )\n)\ndf1 = [trace1]\n\nlayout = go.Layout(\n    title = 'Character vs Gender vs Alive or not',\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    ),\n    scene = dict(\n            xaxis = dict(title  = 'units_sold'),\n            yaxis = dict(title  = 'rating'),\n            zaxis = dict(title  = 'rating_count')\n        )\n)\n\nfig = go.Figure(data = df1, layout = layout)\npy.iplot(fig)","6b435faf":"#### 2. find outliers","371f2913":"for columns  [rating_five_count], [rating_four_count], [rating_three_count], [rating_five_count], [rating_two_count], [rating_one_count], [has_urgency_banner], there are null value which represet not found, so it should be converted to zero","9f5051a9":"No missing values are found","c8ec8645":"## Modelling K-means Clustering\n\n","9339e700":"### Removing Null Values","3a5e04a8":"#### 3. rating_count","48ca25bb":"# Product Clustering based on product success","d03b8c99":"### Drop categorical columns","03aa102b":"# Visualization","7442d60e":"#### Scaling using Standard Scaler","c18c4ec0":"### Tag to Number of tag","67046614":"## Data Tranformation for Encoded dataset\n\n","3cc1c475":"#### 1. find missing values","a698e6dd":"  condition                     |       label      | encode value\n----------------------------------------------------------------\n1. rating_count <= 100               low sold            0\n2. 100 < rating_count <= 1000       medium sold          1\n3. rating_count > 1000               High sold           2","26d2ea06":"## Data Cleaning for Encoded dataset\n","6cc2430d":"### Loading Dataset","1a14b2c7":"No outliers are found","ff694d91":"  condition                  |       label      | encode value\n----------------------------------------------------------------\n1. rating < 3                      low rating          0\n2. 3 <= rating < 4                medium rating        1\n3. rating >= 4                     High rating         2","b2dc0d84":"### Importing Libraries","647b47d0":"# final clusters","1e4a56f4":"#### 2. rating","f52a847f":"#### Encoding result","554bd699":"## Choosing Attributes for clustering\n\nFrom data from correlation matrix and our primary goal to cluster products according their success, I have chose three attributes\n\n#### [units_sold] [rating] [rating_count]","8aae0847":"#### Finding K value","b45f2980":"  condition                  |       label      | encode value\n----------------------------------------------------------------\n1. Units_sold < 1000                low sold            0\n2. 1000 <= units_sold <10000       medium sold          1\n3. units_sold >= 10000              High sold           2","95f96b0e":"In order to group the products according to their success factors we need to specify, what interval of values specify success. In order to do that we can implement encoding.","c12ecece":"## Encoding of values","e443e531":"#### 1. units_sold","341dceeb":"### Data Understanding ","3facfc2b":"### correlation matrix"}}