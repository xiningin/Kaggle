{"cell_type":{"489052b8":"code","120ce40b":"code","5b71fedd":"code","0b67a0fd":"code","690a6212":"code","4ec26047":"code","11ad3069":"code","d3a72c3c":"code","98facfb5":"code","3c933c17":"code","0a1ca6ca":"code","10b5c28d":"code","97357184":"code","de0f8385":"code","2964e031":"code","e83a5674":"code","674ebd0e":"code","45e3e474":"code","c608ecb7":"code","69660433":"code","8c7bc56d":"code","01154eaf":"code","dada8030":"code","5f5043cb":"markdown","13334e13":"markdown","bf0b8647":"markdown","9a18963f":"markdown"},"source":{"489052b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib as mlp\nimport matplotlib.pyplot as plt\n%matplotlib inline\nsns.set()\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))     ##???????\n\n# Any results you write to the current directory are saved as output.","120ce40b":"df = pd.read_csv('..\/input\/free_throws.csv')\ndf.head()","5b71fedd":"# df.shape\n# #(537577, 12) rows and columns\n# df.describe()\n# #used for general stat\n# df.isnull()  #no empty value","0b67a0fd":"#Attempted free throws\nd1=df.groupby(by=[\"season\", \"playoffs\"])['shot_made'].count()\n#Succesfull free throws\ndf.groupby([\"season\", \"playoffs\"])['shot_made'].sum()\n\n#unstack for plotting purposes\nt1=df.groupby([\"season\", \"playoffs\"])['shot_made'].count().unstack()\n\n# this has to be divided by the number of games for each season to get an average\nngames=df.groupby([\"season\", \"playoffs\"])['game_id'].nunique().unstack()\n\naverage_for_each_season = t1\/ngames","690a6212":"#Plot average throws for each season\naverage_for_each_season.plot(marker='o', figsize=(18,7), xticks=range(10),color=['b','r'], rot=90)\nplt.xlabel('season')\nplt.ylabel('count')\nplt.legend(loc=2, prop={'size': 20})\nplt.title('Average number of free throws per period ', fontsize=25)\nplt.show()","4ec26047":"#Not all the throws were successfull, only those corresponding to shot_made=1\n\nsuccessful_throws=df.groupby([\"season\", \"playoffs\"])['shot_made'].sum().unstack()\naveraged_successful= successful_throws\/ngames","11ad3069":"#Plot together\nf, (ax1) = plt.subplots(figsize=(18,18))\nfirst=average_for_each_season.plot(ax=ax1, marker='o', figsize=(15,8), xticks=range(10), color=['b','r'], rot=90)\nsecond=averaged_successful.plot(ax=ax1, marker='o', linestyle='--', figsize=(15,8), xticks=range(10), color=['b','r'], rot=90)\nax1.set_title('Average number of free throws per period. Attempted vs Successful)', size=25)\nlegend=plt.legend((' playoffs attempted','regular attempted','playoffs successful','regular successful'), loc=6, prop={'size': 15})\nax1.add_artist(legend)\nplt.show()\n","d3a72c3c":"(average_for_each_season.mean()-averaged_successful.mean())*100\/average_for_each_season.mean()\n# On average we have 24% of missed throws for both regular season and playoffs","98facfb5":"#Who made the most throws\nplayers=df.groupby([\"player\"])\nplayers['shot_made'].count().sort_values(ascending=False)[:10]","3c933c17":"#Who made the most successful throws\nplayers_success=df.groupby([\"player\"])\nplayers_success['shot_made'].sum().sort_values(ascending=False)[:10]","0a1ca6ca":"#Let's build a dataframe that show the most successfull players based on the percentage of successful shots","10b5c28d":"df_count=pd.DataFrame(players['shot_made'].count())\ndf_count=df_count.rename(columns={\"shot_made\": \"attempt\"})\ndf_sum=pd.DataFrame(players_success['shot_made'].sum())\ndf_sum=df_sum.rename(columns={\"shot_made\": \"success\"})\ndf_pct=pd.DataFrame((players['shot_made'].sum()\/players_success['shot_made'].count())*100)\ndf_pct=df_pct.rename(columns={\"shot_made\": \"pct_success\"})","97357184":"df_pct.head()","de0f8385":"#Merge datasets\n\ndf_merge=pd.concat([df_count, df_sum, df_pct], axis=1)\ndf_merged=df_merge.sort_values(by=\"pct_success\", ascending=False)\ndf_merged.head()    # probabilistically the most successful players are the one with less throws","2964e031":"#Distribution of successful attempts\ndf_merged['pct_success'].hist(bins=80, figsize=(10,7))\n\nplt.title(\"Distribution of Shooting Percentages\", fontsize=15)\nplt.xlabel(\"Percentage of successfull throws\")\nplt.show()","e83a5674":"df_merge.head()\n","674ebd0e":"#Players with more than 900 throws\nmore_than900_attempts=df_merge[df_merge.attempt>900]\nsorted_success=more_than900_attempts.sort_values(['pct_success'],ascending=False)\nsorted_success.head()     ","45e3e474":"# Plot of most successful players\nplt.subplots(figsize=(18,3))\nsorted_success.head(20)['pct_success'].plot('bar', color='m')\nplt.xlabel('Occupation')\nplt.ylabel('Count')\nplt.title('User by Occupation')\nplt.show()","c608ecb7":"df['Consec_id'] = df['time'] == df.shift(1)['time']   \n#false is first throw, true is second throw\ndf.groupby([\"Consec_id\"])['shot_made'].sum()\ndf.groupby([\"Consec_id\"])['shot_made'].count()\n\ndf_first_second=df.groupby([\"Consec_id\"])['shot_made'].sum()\/df.groupby([\"Consec_id\"])['shot_made'].count()*100\n\nindexNamesArr = df_first_second.index.values # get a list of all the column names \nindexNamesArr[0] = 'First'  #rename them\nindexNamesArr[1] = 'Second'\n\ndf_first_second.plot('bar',color=['#cc0066','#606060'])  \nplt.xlabel('Throws')\nplt.ylabel('Pct of success')\nplt.title('Percentage of success first and second throw')\nplt.show()\n#second throws are in general more successful than first ones","69660433":"df.groupby([\"period\"])['shot_made'].count().plot()\nplt.xlabel('period')\nplt.ylabel('Count of throws')\nplt.title('Throws per period')\nplt.show()","8c7bc56d":"##### this reflect the fact that period 5,6,7,8 last only 5 minute. There are more free throws as the game progresses \n# from period 1 to 4 as the stakes are higher","01154eaf":"#analysis by time\ntest=df.groupby([\"period\",\"time\"])['shot_made'].count().unstack()\n#remove period 5,6,7,8\ntest = test.drop([5.0, 6.0, 7.0, 8.0], axis=0)\n#transpose dataframe\ntest2=test.transpose()\ntest3=test2\ntest3.index = pd.to_datetime(test2.index)\ntest3=test3.sort_index() #otherwise 10.00 comes after 0:59\ntest3=test3.reset_index()\n\n\n#see https:\/\/stackoverflow.com\/questions\/20618804\/how-to-smooth-a-curve-in-the-right-way\ndef smooth(y, box_pts):\n    box = np.ones(box_pts)\/box_pts\n    y_smooth = np.convolve(y, box, mode='same')\n    return y_smooth\n\nplt.subplots(figsize=(16,8))\nplt.plot(list(range(534)),smooth(test3[1.0],10), color='blue', lw=2) \nplt.plot(list(range(534)),smooth(test3[2.0],10), color='green', lw=2) \nplt.plot(list(range(534)),smooth(test3[3.0],10), color='red', lw=2) \nplt.plot(list(range(534)), smooth(test3[4.0],10), color='yellow', lw=2)   \nlabels=('first', 'second','third','fourth')\nplt.legend(labels, fontsize=15)\nplt.title('Number of throws for each period by time', fontsize=20)\nplt.xlabel('time', fontsize=15)\nplt.ylabel('count', fontsize=15)\nplt.show()","dada8030":"# I don't understand why at time zero there are such a high number of throws (more investigation needed)\n# As the game progresses, under pressure, more fouls are committed and free throws awarded at the end of the period\n# (between 200 and 300). The drop around 350 corresponds to overtime which does not happen at each game.\n# The fourth period, when the stakes are higher, is when more free throws are given.","5f5043cb":"#### Difference in first and second throw success","13334e13":"#### We now want to identify the most successful player based on this chosen criteria: more than 900 throws attempted and highest percentage of success","bf0b8647":"# NBA free throws analysis.","9a18963f":"#### Number of throws per period"}}