{"cell_type":{"975c8e54":"code","c960a21f":"code","5723f75a":"code","5945e544":"code","cab84a06":"code","7c005782":"code","0bd5aa8a":"code","601e6191":"code","1e9b860e":"code","7dd72019":"code","aa613376":"code","811c8dd7":"code","f0bdc8fe":"code","da7e6eed":"code","1aa90834":"code","4f700f87":"code","f2b58d59":"markdown","72ac9836":"markdown","71bb8ed0":"markdown","ce9884aa":"markdown","69f2c6c5":"markdown","3ee2a006":"markdown","1d5da9a9":"markdown","bef7097b":"markdown","91e3f8b4":"markdown","18e6d4c7":"markdown"},"source":{"975c8e54":"import pandas as pd\nimport numpy as np\nimport gc\nimport os\nimport glob\nfrom tqdm import tqdm\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib_venn import venn2\n%matplotlib inline\n\npd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 100)\npd.set_option('display.width', 100)\npd.set_option('display.max_colwidth', 100)\npd.set_option(\"display.precision\", 8)","c960a21f":"print (os.listdir('\/kaggle\/input\/used-car-price-forecasting'))","5723f75a":"inputPath = '\/kaggle\/input\/used-car-price-forecasting\/'\ntrain = pd.read_csv(inputPath + 'train.csv')\ntest = pd.read_csv(inputPath + 'test.csv')\nsub = pd.read_csv(inputPath + 'sample_submission.csv')\nprint ('train shape',train.shape)\ndisplay(train.head())\nprint ('test shape',test.shape)\ndisplay(test.head())\nprint ('sub shape',sub.shape)\ndisplay(sub.head())","5945e544":"target = 'price'\nplt.figure(figsize=(20, 10))\nsns.distplot(train[target])","cab84a06":"# transform to normal distribution\nplt.figure(figsize=(20, 10))\nsns.distplot(np.log1p(train[target]))","7c005782":"print ('train missing values percentage')\ndisplay(train.isnull().sum() * 100 \/ len(train))\nprint ('test missing values percentage')\ndisplay(test.isnull().sum() * 100 \/ len(test))","0bd5aa8a":"num_cols = ['odometer','lat','long']\nprint ('train numerical columns')\ndisplay(train[num_cols].describe())\nprint ('test numerical columns')\ndisplay(test[num_cols].describe())","601e6191":"cat_cols = ['region', 'year', 'manufacturer', 'model', 'condition', 'cylinders', 'fuel',\n        'title_status', 'transmission', 'vin', 'drive', 'size', 'type', 'paint_color', 'state']\nfor i in cat_cols:\n    print ('==================== ' + str(i) + ' ====================')\n    print ('train unique number ', train[i].nunique())\n    print ('test unique number', test[i].nunique())","1e9b860e":"for i in cat_cols:\n    print ('==================== ' + str(i) + ' ====================')\n    print ('train top unique number percentage')\n    print (train[i].value_counts(dropna=False, normalize=True).head())\n    print ('test top unique number percentage')    \n    print (test[i].value_counts(dropna=False, normalize=True).head())","7dd72019":"print ('Overlap Of Train And Test')\nplt.figure(figsize=(30,30), facecolor='w')\nc = 5\nr = (len(cat_cols) \/\/ c) + 1\nfor i, col in tqdm(enumerate(cat_cols)):\n    plt.subplot(r,c,i+1)\n    s1 = set(train[col].unique().tolist())\n    s2 = set(test[col].unique().tolist())\n    venn2(subsets=[s1, s2], set_labels=['Train', 'Test'])\n    plt.title(str(col), fontsize=14)\nplt.show()","aa613376":"from mpl_toolkits.basemap import Basemap \nplt.figure(figsize=(16,8))\nm = Basemap(projection='merc', # mercator projection\n            llcrnrlat = 20,\n            llcrnrlon = -170,\n            urcrnrlat = 70,\n            urcrnrlon = -60,\n            resolution='l')\n\nm.shadedrelief()\nm.drawcoastlines() # drawing coaslines\nm.drawcountries(linewidth=2) # drawing countries boundaries\nm.drawstates(color='b') # drawing states boundaries\n\nprint ('train lat long distribution')    \nfor index, row in train.sample(frac=0.2).iterrows():\n    latitude = row['lat']\n    longitude = row['long']\n    x_coor, y_coor = m(longitude, latitude)\n    m.plot(x_coor,y_coor,'.',markersize=0.5,c=\"red\")\n    \n    \nplt.figure(figsize=(16,8))\nm = Basemap(projection='merc', # mercator projection\n            llcrnrlat = 20,\n            llcrnrlon = -170,\n            urcrnrlat = 70,\n            urcrnrlon = -60,\n            resolution='l')\n\nm.shadedrelief()\nm.drawcoastlines() # drawing coaslines\nm.drawcountries(linewidth=2) # drawing countries boundaries\nm.drawstates(color='b') # drawing states boundaries\n\nprint ('test lat long distribution')    \nfor index, row in test.sample(frac=0.4).iterrows():\n    latitude = row['lat']\n    longitude = row['long']\n    x_coor, y_coor = m(longitude, latitude)\n    m.plot(x_coor,y_coor,'.',markersize=0.5,c=\"red\")","811c8dd7":"pd.set_option('display.max_colwidth', 1000)\ntext_col = 'description'\ntrain[text_col].head()","f0bdc8fe":"train['len_chars'] = train[text_col].apply(len) # Count number of Characters\ntrain['len_words'] = train[text_col].apply(lambda x: len(x.split())) # Count number of Words\ntest['len_chars'] = test[text_col].apply(len) # Count number of Characters\ntest['len_words'] = test[text_col].apply(lambda x: len(x.split())) # Count number of Words\nprint ('train characters and words length')\ndisplay(train[['len_chars','len_words']].describe())\nprint ('test characters and words length')\ndisplay(test[['len_chars','len_words']].describe())","da7e6eed":"from wordcloud import WordCloud , STOPWORDS\ndef plot_wordcloud(text,mask=None,max_words=500,max_font_size=100,figure_size=(24.0,16.0),title = None, title_size=40, image_color=False):\n    stopwords = set(STOPWORDS)\n    more_stopwords = {'one', 'br', 'Po', 'th', 'sayi', 'fo', 'Unknown'}\n    stopwords = stopwords.union(more_stopwords)\n\n    wordcloud = WordCloud(background_color='black',\n                    stopwords = stopwords,\n                    max_words = max_words,\n                    max_font_size = max_font_size, \n                    random_state = 42,\n                    width=800, \n                    height=400,\n                    mask = mask)\n    wordcloud.generate(str(text))\n    \n    plt.figure(figsize=figure_size)\n    plt.imshow(wordcloud);\n    plt.title(title, fontdict={'size': title_size, 'color': 'black', \n                              'verticalalignment': 'bottom'})\n    plt.axis('off');\n    plt.tight_layout()      \nplot_wordcloud(train[text_col], title=\"Word Cloud of Train Text\")    \nplot_wordcloud(test[text_col], title=\"Word Cloud of Test Text\")    ","1aa90834":"import cv2\nfrom joblib import Parallel, delayed\n\ndef get_shape(img):\n    path = images_path + img\n    im = cv2.imread(path)\n    h,w,c = im.shape\n    return pd.DataFrame([[img,h,w,c]])\n\nimages_path = inputPath + 'images\/train_images\/'\ntrain_imgs = os.listdir(images_path) \nmy_list = Parallel(n_jobs=4, verbose=0)(delayed(get_shape)(i)for i in train_imgs) \ntrain_shape = pd.concat(my_list,axis=0)\ntrain_shape.columns = ['img','height','weight','channel']\nprint ('train image shape')\ndisplay(train_shape.describe())\n\nimages_path = inputPath + 'images\/test_images\/'\ntest_imgs = os.listdir(images_path) \nmy_list = Parallel(n_jobs=4, verbose=0)(delayed(get_shape)(i)for i in test_imgs) \ntest_shape = pd.concat(my_list,axis=0)\ntest_shape.columns = ['img','height','weight','channel']\nprint ('test image shape')\ndisplay(test_shape.describe())","4f700f87":"top_expensive = train.sort_values(['price'],ascending=False)[['price','id']].head()\ntop_cheap = train.sort_values(['price'],ascending=True)[['price','id']].head()\nmedian_cheap = train.sort_values(['price'],ascending=True)[['price','id']][len(train)\/\/2:len(train)\/\/2+5]\n\nprint ('Most Expensive Cars')\nplt.figure(figsize=(30,30), facecolor='w')\nfor i, z in tqdm(enumerate(list(zip(top_expensive['price'],top_expensive['id'])))):\n    plt.subplot(1,5,i+1)\n    im = cv2.imread(inputPath + 'images\/train_images\/' + str(z[1]) + '.jpg')\n    plt.imshow(im)\n    plt.title(str(z[0]), fontsize=14)\nplt.show()    \n\nprint ('Most Cheap Cars')    \nplt.figure(figsize=(30,30), facecolor='w')\nfor i, z in tqdm(enumerate(list(zip(top_cheap['price'],top_cheap['id'])))):\n    plt.subplot(1,5,i+1)\n    im = cv2.imread(inputPath + 'images\/train_images\/' + str(z[1]) + '.jpg')\n    plt.imshow(im)\n    plt.title(str(z[0]), fontsize=14)    \nplt.show()  \n\nprint ('Median Cheap Cars')        \nplt.figure(figsize=(30,30), facecolor='w')\nfor i, z in tqdm(enumerate(list(zip(median_cheap['price'],median_cheap['id'])))):\n    plt.subplot(1,5,i+1)\n    im = cv2.imread(inputPath + 'images\/train_images\/' + str(z[1]) + '.jpg')\n    plt.imshow(im)  \n    plt.title(str(z[0]), fontsize=14)    \nplt.show()      ","f2b58d59":"## Files List","72ac9836":"# Text Data","71bb8ed0":"## Import Library","ce9884aa":"# Missing Values","69f2c6c5":"# Categorical Columns","3ee2a006":"# Geo Data","1d5da9a9":"# Numerical Columns","bef7097b":"# Target","91e3f8b4":"## Load Train and Test and Submission Sample","18e6d4c7":"# Image Data"}}