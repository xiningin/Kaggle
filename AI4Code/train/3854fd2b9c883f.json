{"cell_type":{"280adb5e":"code","823bfd15":"code","18468db4":"code","26945a8f":"code","4455b9a6":"code","813cc6c1":"code","04f3e07b":"code","5bd588ab":"code","2eee4639":"code","d32120c8":"code","cedd79de":"code","8c0f9268":"code","10a63625":"code","a750ff54":"code","13144d13":"code","9500b255":"code","4ebe1c82":"code","1e23a12a":"code","090ff538":"code","1d1c6d30":"code","0c5be04b":"code","413ff2e4":"markdown","596e371c":"markdown","e023ae0c":"markdown","b4b4e586":"markdown","6bfe0bc5":"markdown","54227090":"markdown","ad22d51d":"markdown","c9765cff":"markdown","735577b7":"markdown","d23d6e4b":"markdown","abb85a9f":"markdown","baaba493":"markdown","08d49fa9":"markdown","309333c7":"markdown","758ac165":"markdown","f2cdcf01":"markdown","03531031":"markdown","57acc7a1":"markdown","e317cc1b":"markdown","f85ec8f7":"markdown","cd174888":"markdown","e57e6a5a":"markdown","2290e540":"markdown","08a46db7":"markdown","e770e54c":"markdown","a15dc0e9":"markdown","5005539c":"markdown","6278d205":"markdown"},"source":{"280adb5e":"import numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n\nimport seaborn as sns","823bfd15":"grades = pd.read_excel(\"\/kaggle\/input\/grades\/OOPGrades.xlsx\")","18468db4":"grades.head()","26945a8f":"grades.info()","4455b9a6":"grades.describe()","813cc6c1":"avarageOfGrades = []\n\n\"For Labs\"\nfor i in grades.loc[:,\"Lab-1\":\"Lab-14\"].columns:\n    avarageOfColumn = sum(grades[i])\/len(grades[i])\n    avarageOfGrades.append(avarageOfColumn)\n    \n    \n\"\"\"\nFor Quizes, Midterm and Final. They are different from Calculation of Labs Because There Are NaN Values as we saw\nin First-Looking Data Step.\nNaN means not zero.\n\n\"\"\"\nfor a in grades.loc[:,\"Quiz-1\":\"Final\"].columns:\n    avarageOfColumn2 = sum(grades[grades[a]>=0][a])\/len(grades[grades[a]>=0][a])\n    avarageOfGrades.append(avarageOfColumn2)  \n    \n    \n\"Sorting the DataFrame by Magnitude of Exam Grades\"    \ndataOfAvarageLabs = pd.DataFrame({\"labNames\":grades.loc[:,\"Lab-1\":\"Final\"].columns,\n                                  \"avarageOfGrades\":avarageOfGrades})\nnewIndex = dataOfAvarageLabs.avarageOfGrades.sort_values(ascending=False).index.values\ndataOfAvarageLabs = dataOfAvarageLabs.reindex(newIndex)","04f3e07b":"plt.figure(figsize=(15,10))\nsns.barplot(x=dataOfAvarageLabs[\"labNames\"],y=dataOfAvarageLabs[\"avarageOfGrades\"],\n            palette=sns.cubehelix_palette(len(dataOfAvarageLabs[\"labNames\"])))\nplt.xticks(rotation=45)\nplt.xlabel(\"Names of Exams\")\nplt.ylabel(\"Avarage Grades\")\nplt.title(\"Avarage Of Exams\")\nplt.show()","5bd588ab":"\"\"\"\nLab %7\nQuiz %18\nMidterm %25\nFinal %50\n\"\"\"\n\ngrades[\"ID\"]=grades[\"ID\"].astype(\"object\")\n\nsumOfGrades=0\ndictOfStudents={}\nfor i in range(len(grades.ID)):\n    avarageOfLab = sum(grades.loc[i,\"Lab-1\":\"Lab-14\"])\/14\n    avarageOfQuiz = sum([j for j in grades.loc[i,\"Quiz-1\":\"Quiz-6\"] if (j >= 0)])\/6\n    if grades.loc[i,\"Midterm\"]>=0:\n        if grades.loc[i,\"Final\"]>=0:\n            avarageOfGrade = (avarageOfLab*7\/100+avarageOfQuiz*18\/100+grades.loc[i,\"Midterm\"]*25\/100+grades.loc[i,\"Final\"]*50\/100)\/1\n        else:\n            avarageOfGrade = (avarageOfLab*7+avarageOfQuiz*18+grades.loc[i,\"Midterm\"]*25)\/100\n    else:\n        if grades.loc[i,\"Final\"]>=0:\n            avarageOfGrade = (avarageOfLab*7+avarageOfQuiz*18+grades.loc[i,\"Final\"]*50)\/100\n        else:\n            avarageOfGrade = (avarageOfLab*7+avarageOfQuiz*18)\/100             \n    dictOfStudents[grades.loc[i,\"ID\"]]=avarageOfGrade\n    \n    \ndfOfStudents = pd.DataFrame({\"ID\": list(dictOfStudents.keys()),\"Grades\": list(dictOfStudents.values())})\nnewIndex2 = dfOfStudents[\"Grades\"].sort_values(ascending=False).index.values\ndfOfStudents = dfOfStudents.reindex(newIndex2)","2eee4639":"plt.figure(figsize=(15,10))\nsns.barplot(x=dfOfStudents[\"ID\"],y=dfOfStudents[\"Grades\"])\nplt.xticks(rotation=90)\nplt.xlabel(\"IDs of Students\")\nplt.ylabel(\"Grades of Students\")\nplt.show()","d32120c8":"dfOfStudents.head()","cedd79de":"avaragesOfLabs=[]\navaragesOfQuizes=[]\navaragesOfMidterm=[]\navaragesOfFinal=[]\nfor i in range(len(grades.ID)):\n    avarageOfLab = (sum(grades.loc[i,\"Lab-1\":\"Lab-14\"])\/14)*8\/100\n    avaragesOfLabs.append(avarageOfLab)\n    \n    avarageOfQuiz = (sum([j for j in grades.loc[i,\"Quiz-1\":\"Quiz-6\"] if (j >= 0)])\/6)*17\/100\n    avaragesOfQuizes.append(avarageOfQuiz)\n    \n    if grades.loc[i,\"Midterm\"] >=0:\n        avarageOfMidterm = (grades.loc[i,\"Midterm\"])*25\/100\n    else:\n        avarageOfMidterm = 0\n    avaragesOfMidterm.append(avarageOfMidterm)\n    \n    if grades.loc[i,\"Final\"] >=0:\n        avarageOfFinal = (grades.loc[i,\"Final\"])*50\/100\n    else:\n        avarageOfFinal = 0\n    avaragesOfFinal.append(avarageOfFinal)","8c0f9268":"f, ax = plt.subplots(figsize=(20,15))\nsns.barplot(y=avaragesOfLabs,x=list(grades[\"ID\"]),color=\"yellow\",alpha= 0.8,label=\"AvaragesOfLabs\")\nsns.barplot(y=avaragesOfQuizes,x=list(grades[\"ID\"]),color=\"green\",alpha=0.7,label=\"AvaragesOfQuizes\")\nsns.barplot(y=avaragesOfMidterm,x=list(grades[\"ID\"]),color=\"blue\",alpha=0.6,label=\"AvaragesOfMidterm\")\nsns.barplot(y=avaragesOfFinal,x=list(grades[\"ID\"]),color=\"red\",alpha=0.5,label=\"AvaragesOfFinal\")\n\nax.legend(loc=\"lower right\", frameon= True)\nplt.xticks(rotation=90)\nax.set(ylabel=\"Value Of Grades\",xlabel=\"IDs Of Students\")\nplt.show()","10a63625":"f, ax = plt.subplots(figsize=(15,10))\nsns.pointplot(x=grades.loc[:,\"Lab-1\":\"Final\"].columns,y=grades.loc[dfOfStudents[\"ID\"].head().index.values[0],\"Lab-1\":\"Final\"],color=\"red\")\nsns.pointplot(x=grades.loc[:,\"Lab-1\":\"Final\"].columns,y=grades.loc[dfOfStudents[\"ID\"].head().index.values[1],\"Lab-1\":\"Final\"],color=\"blue\")\nsns.pointplot(x=grades.loc[:,\"Lab-1\":\"Final\"].columns,y=grades.loc[dfOfStudents[\"ID\"].head().index.values[2],\"Lab-1\":\"Final\"],color=\"green\")\nax.set(xlabel=\"Names Of the Exams\",ylabel=\"Grades\")\nplt.text(16,31,'First Student',color='Red',fontsize = 12,style = 'normal')\nplt.text(16,26,'Second Student',color='Blue',fontsize = 12,style = 'normal')\nplt.text(16,21,'Third Student',color='Green',fontsize = 12,style = 'normal')\n\n\nplt.show()","a750ff54":"newIndex = pd.Series(range(len(dfOfStudents[\"Grades\"])))\ndfOfStudents.set_index(newIndex)\npieDict={\"0-49\":0,\n         \"50-59\":0,\n         \"60-69\":0,\n         \"70-79\":0,\n         \"80-89\":0,\n         \"90-100\":0}\n\nfor i in dfOfStudents[\"Grades\"].index.values:\n    if dfOfStudents.loc[i,\"Grades\"] < 50:\n        pieDict[\"0-49\"]+=1\n    elif dfOfStudents.loc[i,\"Grades\"] > 50 and dfOfStudents.loc[i,\"Grades\"] < 60:\n        pieDict[\"50-59\"]+=1\n    elif dfOfStudents.loc[i,\"Grades\"] > 60 and dfOfStudents.loc[i,\"Grades\"] < 70:\n        pieDict[\"60-69\"]+=1\n    elif dfOfStudents.loc[i,\"Grades\"] > 70 and dfOfStudents.loc[i,\"Grades\"] < 80:\n        pieDict[\"70-79\"]+=1\n    elif dfOfStudents.loc[i,\"Grades\"] > 80 and dfOfStudents.loc[i,\"Grades\"] < 90:\n        pieDict[\"80-89\"]+=1\n    else:\n        pieDict[\"90-100\"]+=1\n        \n        \n","13144d13":"labels = pieDict.keys()\nsizes = pieDict.values()\ncolors = [\"brown\",\"red\",\"orange\",\"yellow\",\"green\",\"blue\"]\nexplode = [0.2,0.2,0.2,0.2,0.2,0.2]\n\nplt.figure(figsize=(7,7))\nplt.pie(sizes, explode = explode, labels = labels,colors = colors, autopct=\"%1.1f%%\",shadow=True)\nplt.show()","9500b255":"\nlistOfAboveOrBelow = [\"Above50\" if i >=50 else \"Below50\" for i in grades[grades[\"Midterm\"] >= 0][\"Midterm\"]]\nlistOfAboveOrBelow2 = [\"Above50\" if i >=50 else \"Below50\" for i in grades[grades[\"Final\"] >= 0][\"Final\"]]\ndfOfCountPlot = pd.DataFrame({\"Midterm\": listOfAboveOrBelow})\ndfOfCountPlot2 = pd.DataFrame({\"Final\": listOfAboveOrBelow2})","4ebe1c82":"newDataFrame = grades.loc[:,[\"Midterm\",\"Final\"]]\nnewDataFrame[\"AbOrBelForMid\"] = [\"AboveAvarage\" if i >= newDataFrame.Midterm.mean() else \"BelowAvarage\" for i in newDataFrame.Midterm]\nnewDataFrame[\"AbOrBelForFinal\"] = [\"AboveAvarage\" if a >= newDataFrame.Final.mean() else \"BelowAvarage\" for a in newDataFrame.Final]\n","1e23a12a":"print(\"Midterm Avarage is\", newDataFrame.Midterm.mean())\nprint(\"Final Avarage is\", newDataFrame.Final.mean())","090ff538":"plt.figure(figsize=(10,8))\nplt.subplot(2, 2, 1)\nsns.countplot(x=dfOfCountPlot.Midterm, palette=\"rainbow\")\nplt.ylabel(\"Number Of Grades\")\n\nplt.subplot(2, 2, 2)\nsns.countplot(x=dfOfCountPlot2.Final, palette=\"rainbow\")\nplt.ylabel(\"Number Of Grades\")\n\n\nplt.subplot(2, 2, 3)\nsns.boxplot(x=\"AbOrBelForMid\",y=\"Midterm\",data=newDataFrame, palette=\"rainbow\")\nplt.xlabel(\"Midterm\")\n\n\nplt.subplot(2, 2, 4)\nsns.boxplot(x=\"AbOrBelForFinal\",y=\"Final\",data=newDataFrame, palette=\"rainbow\")\nplt.xlabel(\"Final\")\nplt.show()","1d1c6d30":"for i in range(len(grades[\"ID\"])):\n    grades.loc[i,\"AvarageOfLabs\"] = sum(grades.loc[i,\"Lab-1\":\"Lab-14\"]) \/ 14\n    grades.loc[i,\"AvarageOfQuizes\"] = sum(grades.loc[i,\"Quiz-1\":\"Quiz-6\"]) \/ 6\nnewDfForViolin = grades.loc[:,[\"AvarageOfLabs\",\"AvarageOfQuizes\"]]","0c5be04b":"pal = sns.cubehelix_palette(2, rot=-.5, dark=.3)\nsns.violinplot(data=newDfForViolin,palette=pal,inner=\"points\")\nplt.show()","413ff2e4":"## The contribution of Each Exam to Total Grade","596e371c":"#### Algorithm of Calculation Avarages Quizes and Labs","e023ae0c":"#### To see more clear the Rank:","b4b4e586":"****\n1. **Aims of That Graph is show the Contributions of Each Exams. I mean, looking at the grap we can analyze good and bad exams of each Students. **\n1. **For instance, choose two students in graph and look the distance between of Final Line which is top and Midterm line, when the distance bigger than the others. It Means the contribution of Midterm more less than Final by other student.**","6bfe0bc5":"#### Visualization Of Each Exam Contributions","54227090":"#### Algoritm of Finding Above or Below Than Avarage of Class","ad22d51d":"#### Importing Our Data ####","c9765cff":"#### Algorithm of Finding the Avarage of Each Exams","735577b7":"#### Algorithm of Calculation the Range of Exam Grades","d23d6e4b":"#### Visualization Of Each Exam Contributions","abb85a9f":"#### First-Looking Of Our Data","baaba493":"## Comparison the Grades Of Labs And Quizes ##","08d49fa9":"#### Visualization of Avarages Quizes and Labs","309333c7":"## Avarage of the Total Grade","758ac165":"#### Visualization Of These Algorithms","f2cdcf01":"**INTRODUCTION**\n\n1. \u0130mporting and First Looking to Our Data\n1. Visualizations and My Intuitive Comments\n  * Avarage of the Exams\n  * Avarage of the Total Grade \n  * The contribution of Each Exam to Total Grade\n  * Comparison The Top of Three Student in Class  \n  * Class Status According to Range of Exam Grades    \n  * Class Status According to Above or Below than Avarage and 50\n  * Comparison the Grades Of Labs And Quizes   ","03531031":"## Class Status According to Range of Exam Grades  ##","57acc7a1":"1. **When we compare the top three students, we see that for labs and quizes the green more better than the others but when we look at the general. The green is third.This graph show that us the reason of that the grades of green is decreasing each exam. We can see that looking each quiz carefully on the grap but the grade of others are increasing.**\n1. **On the other hand, Labs of the blue are not good by the others but has so nice grades of midterm and final.**","e317cc1b":"## Class Status According to Above or Below than Avarage and 50  ##","f85ec8f7":"#### Algorithm of Calculation the Contributions","cd174888":"#### Visualization Of Avarages Of the Exams","e57e6a5a":"#### Algorithm of Finding the Avarage of Each Exams","2290e540":"#### Visualization Of Avarages Of the Exams","08a46db7":"## Avarage of the Exams","e770e54c":"**The graph shows that:**\n1. The last labs(12-11-10-13-14) more difficult from the previous as we expect.\n1. The Quizes are more difficult than the Labs because Their avarage less than the Labs. We could not say that without the graph or it will be more time just looking the Data.\n1. Final and Midterm are the hardest exams as we see clearly.","a15dc0e9":"#### Visualization Of Class Status","5005539c":"## Comparison The Top of Three Student in Class##","6278d205":"#### Algoritm of Finding Above or Below Than 50"}}