{"cell_type":{"19e2b8f8":"code","2fa3a44d":"code","634812bf":"code","4df3b8d6":"code","1df8f594":"code","fb575f8f":"code","723de34f":"code","88c61ca6":"code","3bd35582":"code","04526c64":"code","a34c9212":"code","3eebcc06":"code","504716de":"code","e1ca56e1":"code","d9ddd948":"code","d920964e":"code","d8ab9f3e":"code","f3b5c857":"code","8eca8732":"code","d1e0cd0b":"code","273627d6":"code","521a6343":"code","d5949f7c":"code","3ecedd35":"code","62c57ccc":"code","03535c4e":"code","701659ab":"code","a6666ec7":"code","45363ac4":"code","ea0b2fb3":"markdown","cd61b2ce":"markdown","0a4539b6":"markdown","b4a2ae1e":"markdown","88fa928b":"markdown","da84a638":"markdown","620a2baa":"markdown"},"source":{"19e2b8f8":"import pandas as pd\nimport numpy as np\nimport operator \nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\n\nfrom keras import backend as K\nfrom keras.layers import *\nfrom keras import initializers, regularizers, constraints, optimizers, layers\nfrom keras.models import Model\nfrom keras.preprocessing import text, sequence\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.callbacks import Callback, ReduceLROnPlateau, ModelCheckpoint, EarlyStopping\nfrom keras.initializers import glorot_normal,orthogonal\n\nimport gc\nimport warnings\nwarnings.filterwarnings('ignore')","2fa3a44d":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","634812bf":"# preprocessing: https:\/\/www.kaggle.com\/theoviel\/improve-your-score-with-some-text-preprocessing\ncontraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\", \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\", \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\", \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\", \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\", \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\", \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\", \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\", \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\", \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\" }\n\ndef clean_contractions(text, mapping):\n    specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n    for s in specials:\n        text = text.replace(s, \"'\")\n    text = ' '.join([mapping[t] if t in mapping else t for t in text.split(\" \")])\n    return text\n\ntrain['question_text'] = train['question_text'].apply(lambda x: clean_contractions(x, contraction_mapping))\ntest['question_text'] = test['question_text'].apply(lambda x: clean_contractions(x, contraction_mapping))\n","4df3b8d6":"punct = \"\/-'?!.,#$%\\'()*+-\/:;<=>@[\\\\]^_`{|}~\" + '\"\"\u201c\u201d\u2019' + '\u221e\u03b8\u00f7\u03b1\u2022\u00e0\u2212\u03b2\u2205\u00b3\u03c0\u2018\u20b9\u00b4\u00b0\u00a3\u20ac\\\u00d7\u2122\u221a\u00b2\u2014\u2013&'\npunct_mapping = {\"\u2018\": \"'\", \"\u20b9\": \"e\", \"\u00b4\": \"'\", \"\u00b0\": \"\", \"\u20ac\": \"e\", \"\u2122\": \"tm\", \"\u221a\": \" sqrt \", \"\u00d7\": \"x\", \"\u00b2\": \"2\", \"\u2014\": \"-\", \"\u2013\": \"-\", \"\u2019\": \"'\", \"_\": \"-\", \"`\": \"'\", '\u201c': '\"', '\u201d': '\"', '\u201c': '\"', \"\u00a3\": \"e\", '\u221e': 'infinity', '\u03b8': 'theta', '\u00f7': '\/', '\u03b1': 'alpha', '\u2022': '.', '\u00e0': 'a', '\u2212': '-', '\u03b2': 'beta', '\u2205': '', '\u00b3': '3', '\u03c0': 'pi', }\n\ndef clean_special_chars(text, punct, mapping):\n    for p in mapping:\n        text = text.replace(p, mapping[p])\n    \n    for p in punct:\n        text = text.replace(p, f' {p} ')\n    \n    specials = {'\\u200b': ' ', '\u2026': ' ... ', '\\ufeff': '', '\u0915\u0930\u0928\u093e': '', '\u0939\u0948': ''}  # Other special characters that I have to deal with in last\n    for s in specials:\n        text = text.replace(s, specials[s])\n    \n    return text\n\ntrain['question_text'] = train['question_text'].apply(lambda x: clean_special_chars(x, punct, punct_mapping))\ntest['question_text'] = test['question_text'].apply(lambda x: clean_special_chars(x, punct, punct_mapping))","1df8f594":"mispell_dict = {'colour': 'color', 'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater', 'cancelled': 'canceled', 'labour': 'labor', 'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ', 'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What', 'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can', 'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I', 'theBest': 'the best', 'howdoes': 'how does', 'mastrubation': 'masturbation', 'mastrubate': 'masturbate', \"mastrubating\": 'masturbating', 'pennis': 'penis', 'Etherium': 'Ethereum', 'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', 'airhostess': 'air hostess', \"whst\": 'what', 'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization', 'demonetisation': 'demonetization'}\n\ndef correct_spelling(x, dic):\n    for word in dic.keys():\n        x = x.replace(word, dic[word])\n    return x\n\ntrain['question_text'] = train['question_text'].apply(lambda x: correct_spelling(x, mispell_dict))\ntest['question_text'] = test['question_text'].apply(lambda x: correct_spelling(x, mispell_dict))\n","fb575f8f":"def latex_tag_in_text(text):\n    x = text.lower()\n    return ' [ math ] ' in x\n    \ntrain['latex_tag_in_text'] = train['question_text'].apply(lambda x: latex_tag_in_text(x))","723de34f":"train['latex_tag_in_text'].value_counts()","88c61ca6":"train1 = train[train['target'] == 1]\ntrain0 = train[train['target'] == 0]","3bd35582":"train1['latex_tag_in_text'].value_counts()","04526c64":"train0['latex_tag_in_text'].value_counts()","a34c9212":"train1[train1['latex_tag_in_text']]['question_text'].values.tolist()","3eebcc06":"train_ques_lens = train['question_text'].map(lambda x: len(x.split(' ')))\ntest_ques_lens = test['question_text'].map(lambda x: len(x.split(' ')))\nprint('Train text max len:', train_ques_lens.max())\nprint('Test text max len:', test_ques_lens.max())\nplt.figure(figsize=(10, 4))\nsns.kdeplot(train_ques_lens)\nsns.kdeplot(test_ques_lens)\nplt.legend(('train', 'test'))\nplt.show()\ndel train_ques_lens; del test_ques_lens\ngc.collect()\npass","504716de":"EMBED_SIZE = 300\nMAX_WORDS_LEN = 70\nMAX_VOCAB_FEATURES = 200000","e1ca56e1":"%%time\nprint('tokenize and padding')\nall_text = train['question_text'].values.tolist() + test['question_text'].values.tolist()\n\ntokenizer = Tokenizer(num_words=MAX_VOCAB_FEATURES, filters='')\ntokenizer.fit_on_texts(all_text)\n\n# tokenize\ntrain_X = tokenizer.texts_to_sequences(train['question_text'])\ntest_X = tokenizer.texts_to_sequences(test['question_text'])\n\n# Pad the sentences \ntrain_X = pad_sequences(train_X, maxlen=MAX_WORDS_LEN)\ntest_X = pad_sequences(test_X, maxlen=MAX_WORDS_LEN)\n\ntrain_y = train['target'].values\n\nword_index = tokenizer.word_index\nnb_words = min(MAX_VOCAB_FEATURES, len(word_index))\n\ndef load_glove():\n    print(\"Extracting Glove embedding\")\n    EMBEDDING_FILE = '..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt'\n    emb_mean, emb_std = -0.005838499, 0.48782197\n\n    embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, EMBED_SIZE))\n    with open(EMBEDDING_FILE, 'r', encoding=\"utf8\") as f:\n        for line in f:\n            word, vec = line.split(' ', 1)\n            if word not in word_index:\n                continue\n            i = word_index[word]\n\n            if i >= nb_words:\n                continue\n            embedding_vector = np.asarray(vec.split(' '), dtype='float32')[:300]\n            if len(embedding_vector) == 300:\n                embedding_matrix[i] = embedding_vector\n\n    print('Glove:', embedding_matrix.shape)\n    return embedding_matrix\n\nglove_embedding_matrix = load_glove()","d9ddd948":"def f1(y_true, y_pred):\n    '''\n    metric from here \n    https:\/\/stackoverflow.com\/questions\/43547402\/how-to-calculate-f1-macro-in-keras\n    '''\n    def recall(y_true, y_pred):\n        \"\"\"Recall metric.\n\n        Only computes a batch-wise average of recall.\n\n        Computes the recall, a metric for multi-label classification of\n        how many relevant items are selected.\n        \"\"\"\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n        recall = true_positives \/ (possible_positives + K.epsilon())\n        return recall\n\n    def precision(y_true, y_pred):\n        \"\"\"Precision metric.\n\n        Only computes a batch-wise average of precision.\n\n        Computes the precision, a metric for multi-label classification of\n        how many selected items are relevant.\n        \"\"\"\n        true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n        predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n        precision = true_positives \/ (predicted_positives + K.epsilon())\n        return precision\n    \n    precision = precision(y_true, y_pred)\n    recall = recall(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))","d920964e":"# https:\/\/www.kaggle.com\/sudalairajkumar\/a-look-at-different-embeddings\/notebook\ndef simple_model(embedding_matrix):\n    inp = Input(shape=(MAX_WORDS_LEN,))\n    x = Embedding(nb_words, EMBED_SIZE, weights=[embedding_matrix], trainable=False)(inp)\n    x = Bidirectional(CuDNNGRU(64, return_sequences=True))(x)\n    x = GlobalMaxPool1D()(x)\n    x = Dense(16, activation=\"relu\")(x)\n    x = Dropout(0.1)(x)\n    x = Dense(1, activation=\"sigmoid\")(x)\n    model = Model(inputs=inp, outputs=x)\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=[f1])\n    print(model.summary())\n    return model","d8ab9f3e":"X_train, X_valid, y_train, y_valid = train_test_split(train_X, train_y, test_size=0.1, random_state=2018)","f3b5c857":"model = simple_model(glove_embedding_matrix)","8eca8732":"model.fit(X_train, y_train, batch_size=512, epochs=2, validation_data=(X_valid, y_valid))","d1e0cd0b":"def clean_latex_tag(text):\n    corr_t = []\n    for t in text.split(\" \"):\n        t = t.strip()\n        if t != '':\n            corr_t.append(t)\n    text = ' '.join(corr_t)\n    \n    text = re.sub('(\\[ math \\]).+(\\[ \/ math \\])', 'mathematical formula', text)\n    return text","273627d6":"train['question_text'] = train['question_text'].map(clean_latex_tag)\ntest['question_text'] = test['question_text'].map(clean_latex_tag)","521a6343":"train_ques_lens = train['question_text'].map(lambda x: len(x.split(' ')))\ntest_ques_lens = test['question_text'].map(lambda x: len(x.split(' ')))\nprint('Train text max len:', train_ques_lens.max())\nprint('Test text max len:', test_ques_lens.max())\nplt.figure(figsize=(10, 4))\nsns.kdeplot(train_ques_lens)\nsns.kdeplot(test_ques_lens)\nplt.legend(('train', 'test'))\nplt.show()\ndel train_ques_lens; del test_ques_lens\ngc.collect()\npass","d5949f7c":"def latex_tag_in_text(text):\n    x = text.lower()\n    return 'mathematical formula' in x\n    \ntrain['latex_tag_in_text'] = train['question_text'].apply(lambda x: latex_tag_in_text(x))\ntrain1 = train[train['target'] == 1]\ntrain0 = train[train['target'] == 0]","3ecedd35":"print(train1['latex_tag_in_text'].value_counts())\nprint(train0['latex_tag_in_text'].value_counts())","62c57ccc":"train1[train1['latex_tag_in_text']]['question_text'].values.tolist()","03535c4e":"%%time\nprint('tokenize and padding')\nall_text = train['question_text'].values.tolist() + test['question_text'].values.tolist()\n\ntokenizer = Tokenizer(num_words=MAX_VOCAB_FEATURES, filters='')\ntokenizer.fit_on_texts(all_text)\n\n# tokenize\ntrain_X = tokenizer.texts_to_sequences(train['question_text'])\ntest_X = tokenizer.texts_to_sequences(test['question_text'])\n\n# Pad the sentences \ntrain_X = pad_sequences(train_X, maxlen=MAX_WORDS_LEN)\ntest_X = pad_sequences(test_X, maxlen=MAX_WORDS_LEN)\n\ntrain_y = train['target'].values\n\nword_index = tokenizer.word_index\nnb_words = min(MAX_VOCAB_FEATURES, len(word_index))\n\ndef load_glove():\n    print(\"Extracting Glove embedding\")\n    EMBEDDING_FILE = '..\/input\/embeddings\/glove.840B.300d\/glove.840B.300d.txt'\n    emb_mean, emb_std = -0.005838499, 0.48782197\n\n    embedding_matrix = np.random.normal(emb_mean, emb_std, (nb_words, EMBED_SIZE))\n    with open(EMBEDDING_FILE, 'r', encoding=\"utf8\") as f:\n        for line in f:\n            word, vec = line.split(' ', 1)\n            if word not in word_index:\n                continue\n            i = word_index[word]\n\n            if i >= nb_words:\n                continue\n            embedding_vector = np.asarray(vec.split(' '), dtype='float32')[:300]\n            if len(embedding_vector) == 300:\n                embedding_matrix[i] = embedding_vector\n\n    print('Glove:', embedding_matrix.shape)\n    return embedding_matrix\n\nglove_embedding_matrix = load_glove()","701659ab":"X_train, X_valid, y_train, y_valid = train_test_split(train_X, train_y, test_size=0.1, random_state=2018)","a6666ec7":"model = simple_model(glove_embedding_matrix)","45363ac4":"model.fit(X_train, y_train, batch_size=512, epochs=2, validation_data=(X_valid, y_valid))","ea0b2fb3":"# Simple math tag cleaning","cd61b2ce":"## simple cleaning the math tags","0a4539b6":"# Check LaTeX tags","b4a2ae1e":"After checking some bad cases, I have found some interesting questions about math LaTeX tag. I hope it can help to preprocess or apply some regulations.","88fa928b":"With simple check, we can see that after cleaning math tag:\n- Valid logloss decrease from **0.0994** to **0.0992**, and f1_score increased from **0.6313** to **0.6641**. \n- The length distribution of question text becomes much more beautiful and reliable.\n\nWe need more check because the randomness. Hope this can help you! :)","da84a638":"As we can see here, some normal math questions are labeled as 1, very strange to me... for example:\n```\nWhat is  [ math ]   \\\\  mathbb Z  [ x ]    \/    \\\\  left   \\\\  langle 3   \\\\  right   \\\\  rangle [   \/  math ]  ?\n\nWhat is the answer to  [ math ] 5   \\\\  underset {   \\\\  otimes }  {   \\\\  overset {   \\\\  oslash }  {   \\\\  otimes }  }  6  [   \/  math ]  ? \n```\nAnd the most interesting finding is list below, maybe this tell us some info:\n```\n'Why cannot [ math ] \\\\ LaTeX [ \/ math ] be used in a Quora question ?'\n```\n\n","620a2baa":"Seems more cleaning, right? Let's retrain the model."}}