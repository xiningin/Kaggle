{"cell_type":{"af427646":"code","502f7f2c":"code","90311c29":"code","ce0a4ae5":"code","a8b57b1a":"code","c22229e0":"code","e1104a23":"code","1e011597":"code","8b213e1c":"code","8e50754e":"code","c68accae":"code","42373491":"code","1332876b":"code","7218a0a3":"code","510da896":"code","2c04238a":"code","85a9a0de":"code","fc217edf":"code","2d59fecc":"code","3c5d30fe":"code","10afe458":"code","b5133c08":"code","f4d4d973":"code","a4b68c19":"code","ef9557d3":"code","3ab06859":"code","413a8beb":"code","484037c3":"code","9f596bd2":"code","e54441ff":"code","95810475":"code","22e76f61":"code","fa24d465":"markdown","53ff07cb":"markdown","b758513e":"markdown","2f11649d":"markdown","55c8eacd":"markdown","6b4ef19e":"markdown","136047d7":"markdown","7bdad89d":"markdown","9bd3e2af":"markdown","49e97ec3":"markdown","bb6e0ef4":"markdown","1009b684":"markdown","4b695234":"markdown"},"source":{"af427646":"import pandas as pd\nimport numpy as np\nimport warnings\nfrom sklearn.exceptions import DataConversionWarning\nwarnings.filterwarnings(action='ignore', category=DataConversionWarning)","502f7f2c":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ndata = pd.concat([train, test], sort=False)","90311c29":"data.head()","ce0a4ae5":"# Information about features\ndata.info()","a8b57b1a":"# stattistics desci\ndata.describe()","c22229e0":"data.select_dtypes(include = 'object').head()","e1104a23":"data.select_dtypes(include = ['int64','float64']).head()","1e011597":"data.select_dtypes(include = 'object').isnull().sum()[data.select_dtypes(include = 'object').isnull().sum()>0]","8b213e1c":"data.select_dtypes(include = ['int64','float64']).isnull().sum()[data.select_dtypes(include = ['int64','float64']).isnull().sum()>0]","8e50754e":"train.Fare = train.Fare.fillna(train.Fare.mean())\ntest.Fare = test.Fare.fillna(test.Fare.mean())","c68accae":"train.Embarked = train.Embarked.fillna(train.Embarked.mode()[0])\ntest.Embarked = test.Embarked.fillna(test.Embarked.mode()[0])","42373491":"train[\"Cabin\"].fillna(\"None\", inplace = True) \ntest[\"Cabin\"].fillna(\"None\", inplace = True)","1332876b":"train['title']=train.Name.apply(lambda x: x.split('.')[0].split(',')[1].strip())\ntest['title']=test.Name.apply(lambda x: x.split('.')[0].split(',')[1].strip())","7218a0a3":"train.title.unique()","510da896":"newTitles = {\n    \"Capt\":       \"Officer\",\n    \"Col\":        \"Officer\",\n    \"Major\":      \"Officer\",\n    \"Jonkheer\":   \"Royalty\",\n    \"Don\":        \"Royalty\",\n    \"Sir\" :       \"Royalty\",\n    \"Dr\":         \"Officer\",\n    \"Rev\":        \"Officer\",\n    \"the Countess\":\"Royalty\",\n    \"Dona\":       \"Royalty\",\n    \"Mme\":        \"Mrs\",\n    \"Mlle\":       \"Miss\",\n    \"Ms\":         \"Mrs\",\n    \"Mr\" :        \"Mr\",\n    \"Mrs\" :       \"Mrs\",\n    \"Miss\" :      \"Miss\",\n    \"Master\" :    \"Master\",\n    \"Lady\" :      \"Royalty\"}\n\n#Copied","2c04238a":"train['title'] = train.title.map(newTitles)\ntest['title'] = test.title.map(newTitles)","85a9a0de":"train.groupby(['title','Sex']).Age.mean()","fc217edf":"# x = train[train.Age.isnull()][[\"title\",\"Sex\",\"Age\"]]\n# y = test[test.Age.isnull()][[\"title\",\"Sex\",\"Age\"]]","2d59fecc":"# x.drop_duplicates(inplace=True) \n# y.drop_duplicates(inplace=True) ","3c5d30fe":"def newAge (cols):\n    title=cols[0]\n    Sex=cols[1]\n    Age=cols[2]\n    if pd.isnull(Age):\n        if title=='Master' and Sex==\"male\":\n            return 4.57\n        elif title=='Miss' and Sex=='female':\n            return 21.8\n        elif title=='Mr' and Sex=='male': \n            return 32.37\n        elif title=='Mrs' and Sex=='female':\n            return 35.72\n        elif title=='Officer' and Sex=='female':\n            return 49\n        elif title=='Officer' and Sex=='male':\n            return 46.56\n        elif title=='Royalty' and Sex=='female':\n            return 40.50\n        else:\n            return 42.33\n    else:\n        return Age\n    \n#copied","10afe458":"train.Age = train[['title','Sex','Age']].apply(newAge, axis=1)\ntest.Age = test[['title','Sex','Age']].apply(newAge, axis=1)","b5133c08":"train.drop(['PassengerId','Name','Ticket','Ticket'],axis=1,inplace=True)\ntest.drop(['PassengerId','Name','Ticket','Ticket'],axis=1,inplace=True)","f4d4d973":"Total_df = pd.concat([train, test], sort=False)\nTotal_df = pd.get_dummies(Total_df)\ntrain = Total_df[:len(train)]\ntest = Total_df[len(train):]","a4b68c19":"# convert target feature into int\ntrain.Survived=train.Survived.astype('int64')\ntrain.Survived.dtype # check dtype","ef9557d3":"xtrain=train.drop(\"Survived\",axis=1) # drop Srvived feature\nytrain=train['Survived']","3ab06859":"# drop Srvived feature\nxtest = test.drop(\"Survived\",axis=1)","413a8beb":"#import packages\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\n\n# model object\nRF = RandomForestClassifier(random_state=1)\n\n#parameter for RF\nPRF = [{'n_estimators':[10,100],'max_depth':[3,6],'criterion':['gini','entropy']}]\n\n#parameter tunning by GridSearchCV\nGSRF = GridSearchCV(estimator=RF, param_grid=PRF, scoring='accuracy',cv=2)\n\n#score with cross validation 5\nrf_scores = cross_val_score(GSRF,xtrain,ytrain,scoring='accuracy',cv=5)","484037c3":"#mean of scores\nnp.mean(rf_scores) ","9f596bd2":"#survived prediction for submission\nmodel = GSRF.fit(xtrain, ytrain)\npred = model.predict(xtest)\n\n# for PassengerId\ntest2 = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\n# save submission.csv with PassengerId and Survived\noutput= pd.DataFrame({'PassengerId':test2['PassengerId'],'Survived':pred})\noutput.to_csv('..\/input\/output\/submission.csv', index=False)","e54441ff":"#import packages\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\n\n## model object and Construct a Pipeline from the given estimators\nsvc = make_pipeline(StandardScaler(),SVC(random_state=1))\n\n#parameter for svc\nr=[0.0001,0.001,0.1,1,10,50,100]\nPSVM=[{'svc__C':r, 'svc__kernel':['linear']},\n      {'svc__C':r, 'svc__gamma':r, 'svc__kernel':['rbf']}]\n\n#parameter tunning by GridSearchCV\nGSSVM=GridSearchCV(estimator=svc, param_grid=PSVM, scoring='accuracy', cv=2)\n\n#score with cross validation 5\nsvm_scores=cross_val_score(GSSVM, xtrain.astype(float), ytrain,scoring='accuracy', cv=5)","95810475":"#mean of scores\nnp.mean(svm_scores) ","22e76f61":"#survived prediction for submission\nmodel = GSSVM.fit(xtrain, ytrain)\npred = model.predict(xtest)\n\n# for PassengerId\ntest2 = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n\n# save submission.csv with PassengerId and Survived\noutpu t= pd.DataFrame({'PassengerId':test2['PassengerId'],'Survived':pred})\noutput.to_csv('..\/input\/output\/submission.csv', index=False)","fa24d465":"### Data Types","53ff07cb":"### Missing values","b758513e":"**Cabin**","2f11649d":"## Import Packages","55c8eacd":"**Embarked**","6b4ef19e":"**SVC from support vector machine**","136047d7":"**Fare**","7bdad89d":"## Model","9bd3e2af":"## Pre-processing","49e97ec3":"### Imputation","bb6e0ef4":"**RandomForestClassifier**","1009b684":"**Age**","4b695234":"**Load dataset**"}}