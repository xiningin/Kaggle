{"cell_type":{"7b1d4cda":"code","7fed8ae8":"code","b3444779":"code","61a3ce72":"code","a108e5d2":"code","2a8f20f7":"code","971ef4b1":"code","c0667a75":"code","ac5352c5":"code","63fda2f5":"code","627c22b7":"code","95110d46":"code","424c6bf1":"code","428846f3":"code","fcba55b2":"code","c0fbab0a":"code","64e8ca38":"code","e2364d40":"markdown","bb1753d2":"markdown","77b4dff3":"markdown","3bed0496":"markdown","cba682f0":"markdown","0b8f19e4":"markdown"},"source":{"7b1d4cda":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7fed8ae8":"# import define\n# os:\uc6b4\uc601\uccb4\uc81c\uc5d0\uc11c \uc81c\uacf5\ub418\ub294 \uc5ec\ub7ec \uae30\ub2a5\uc744 \ud30c\uc774\uc36c\uc5d0\uc11c \uc218\ud589\ud560 \uc218\uc788\uac8c \ud568\n# json: Json \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\uae30 \uc704\ud574\uc11c \uc0ac\uc6a9\ub418\ub294 \ud30c\uc774\uc36c \ub0b4\uc7a5 \ubaa8\ub4c8\n# numpy(np): \uace0\uc131\ub2a5\uc758 \uc218\uce58\uacc4\uc0b0. \ub300\uaddc\ubaa8 \ub2e4\ucc28\uc6d0 \ubc30\uc5f4\uacfc \ud589\ub82c \uc5f0\uc0b0\uc5d0 \ud544\uc694\ud55c \ub2e4\uc591\ud55c \ud568\uc218 \uc81c\uacf5\n# pandas(pd): \ub370\uc774\ud130\ubd84\uc11d \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \ud589\uacfc\uc5f4\ub85c \uc774\ub8e8\uc5b4\uc9c4 \ub370\uc774\ud130 \uac1d\uccb4\ub97c \ub9cc\ub4e4\uc5b4 \ub2e4\ub8f8.\n# seaborn(sn): \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ub2e4\uc591\ud55c \ud1b5\uacc4 \uc9c0\ud45c\ub97c \ub0bc\uc218 \uc788\ub294 \uc2dc\uac01\ud654 \ucc28\ud2b8\ub97c \uc81c\uacf5\n# matplotlib.pyolot(plt): \ub370\uc774\ud130\ub97c \ucc28\ud2b8\ub098 \ud50c\ub86f(Plot)\uc73c\ub85c \uadf8\ub824\uc8fc\ub294 \ub370\uc774\ud130 \uc2dc\uac01\ud654\n#                       \ub77c\uc778\ud50c\ub86f, \ubc14 \ucc28\ud2b8, \ud30c\uc774\ucc28\ud2b8, \ud788\uc2a4\ud1a0\uadf8\ub7a8, BoxPlot \ub4f1\n# cv2: openCV \ucef4\ud4e8\ud130 \ube44\uc804 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \uac1d\uccb4 \uc5bc\uad74 \ud589\ub3d9 \ubaa8\uc158 \ucd94\uc801 \ub4f1\uc758 \uc751\uc6a9\uc5d0\uc11c \uc0ac\uc6a9\n# albumentations:  \uc774\ubbf8\uc9c0 \ud615\ud0dc \ubcc0\ud658\n# \nimport os\nimport json\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sn\nimport matplotlib.pyplot as plt\nimport cv2\nimport albumentations as A\nfrom sklearn import metrics as sk_metrics","b3444779":"# Kaggle base diretory def\n\nBASE_DIR = \"..\/input\/cassava-leaf-disease-classification\/\"","61a3ce72":"#os.path.join: \uacbd\ub85c\ub97c \ubcd1\ud569\ud558\uc5ec \uc0c8 \uacbd\ub85c\ub97c \uc0dd\uc131\nwith open(os.path.join(BASE_DIR, \"label_num_to_disease_map.json\")) as file:\n    \n    #file \ub370\uc774\ud130\ub97c json.load()\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac1d\uccb4\ub85c \uc77d\uc5b4\uc624\uae30 -> map_classes\n    map_classes = json.loads(file.read())\n    \n    # for var in \ubb38\uc790\uc5f4(\ud29c\ud50c, \ubb38\uc790\uc5f4)\n    map_classes = {int(k) : v for k, v in map_classes.items()}\n\n    #json.dumpsL \uac1d\uccb4\ub97c json \ub370\uc774\ud130\ub85c \uc4f0\uae30, \uc9c1\ub82c\ud654 ,\uc778\ucf54\ub529\nprint(json.dumps(map_classes, indent=4))","a108e5d2":"#os.listdir \ud574\ub2f9 \ub514\ub809\ud1a0\ub9ac\uc5d0 \uc788\ub294 \ud30c\uc77c\ub4e4\uc758 \ub9ac\uc2a4\ud2b8\ub97c \uad6c\ud568\ninput_files = os.listdir(os.path.join(BASE_DIR, \"train_images\"))\n\n#len() \ub9ac\uc2a4\ud2b8\uc5d0 \ub4e4\uc5b4 \uc788\ub294 \uc6d0\uc18c\uc758 \uac2f\uc218\nprint(f\"Number of train images: {len(input_files)}\")","2a8f20f7":"img_shapes = {}\nfor image_name in os.listdir(os.path.join(BASE_DIR, \"train_images\"))[:300]:\n    \n    #cv2.imread: \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uc774\ubbf8\uc9c0 \ud30c\uc77c\uc744 \uc77d\uc74c\n    image = cv2.imread(os.path.join(BASE_DIR, \"train_images\", image_name))\n    #shape image \ubcc0\uc218\uc758 \uc774\ubbf8\uc9c0 shape\ub97c \ud655\uc778(height, width, channl)\n    img_shapes[image.shape] = img_shapes.get(image.shape, 0) + 1\n\nprint(img_shapes)","971ef4b1":"#pandas library\uc758 read_csv() \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec train.csv \ud568\uc218\ub97c \uc77d\uc74c\ndf_train = pd.read_csv(os.path.join(BASE_DIR, \"train.csv\"))\n\n#map\uc740 \ub9ac\uc2a4\ud2b8\uc758 \uc694\uc18c\ub97c \uc9c0\uc815\ub41c \ud568\uc218\ub85c \ucc98\ub9ac\ud574\uc8fc\ub294 \ud568\uc218\n# list(map(\ud568\uc218, \ub9ac\uc2a4\ud2b8))\n# https:\/\/dojang.io\/pluginfile.php\/13699\/mod_page\/content\/3\/022019.png\ndf_train[\"class_name\"] = df_train[\"label\"].map(map_classes)\n\ndf_train","c0667a75":"#figure() \ud568\uc218\ub294 matplotlib\uc5d0\uc11c figure\ub97c \ub9cc\ub4e4\uace0 \ud3b8\uc9d1\ud560 \uc218 \uc788\uac8c \ub9cc\ub4e4\uc5b4\uc8fc\ub294 \ud568\uc218\n# ex1) fig=figure(num=figure number, figsize = (x,y))\n# ex2) fig=figure(figure number, (x,y))\n# ex3) fig=girure()\n plt.figure(figsize=(8, 4))\n\n#countplot \uce74\ud14c\uace0\ub9ac\ubcc4 \ub370\uc774\ud130 \uc591 \ud655\uc778 \nsn.countplot(y=\"class_name\", data=df_train);","ac5352c5":"plt.figure(figsize=(4, 10))\n\n#countplot \uce74\ud14c\uace0\ub9ac\ubcc4 \ub370\uc774\ud130 \uc591 \ud655\uc778 \nsn.countplot(x=\"class_name\", data=df_train);","63fda2f5":"# define visualize_batch \ndef visualize_batch(image_ids, labels):\n    plt.figure(figsize=(16, 12))\n    \n    #enumerate :\ubc18\ubcf5\ubb38 \uc0ac\uc6a9\uc2dc \uba87\ubc88\uc9f8 \ubc18\ubcf5\ubb38\uc778\uc9c0 \ud655\uc778\uc774 \ud544\uc694\ud560 \uc218 \uc788\uc74c\n    #\uc778\ub371\uc2a4 \ubc88\ud638\uc640 \uceec\ub809\uc158\uc758 \uc6d0\uc18c\ub97c tuple \ud615\ud0dc\ub85c \ubc18\ud658\n    \n    for ind, (image_id, label) in enumerate(zip(image_ids, labels)):\n        \n        #subplot \ud55c \ud654\uba74\uc5d0 \uc5ec\ub7ec \uadf8\ub798\ud504\ub97c \ub098\ub220\uc11c \uadf8\ub824\uc8fc\ub294 \uae30\ub2a5\n        plt.subplot(3, 3, ind + 1)\n        image = cv2.imread(os.path.join(BASE_DIR, \"train_images\", image_id))\n        \n        #open cv\uc5d0\ub294 color-space\ub97c \ubcc0\ud658\ubc29\ubc95\uc774 \uc57d 150\uac00\uc9c0 \uc788\uc74c\n        #cv2.cvtColor( image_src , color_code )\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\n        #imshow() \uc774\ubbf8\uc9c0\ub97c \ubaa8\ub2c8\ud130\uc5d0 \ucd9c\ub825\n        plt.imshow(image)\n        plt.title(f\"Class: {label}\", fontsize=12)\n        # x,y\ucd95\uc758 \ubc94\uc704\ub97c \uc124\uc815\ud560\uc218 \uc788\uac8c \ud558\ub294\uac83\uacfc \ub3d9\uc2dc\uc5d0 \uc5ec\ub7ec \uc635\uc158\uc744 \uc124\uc815\ud560 \uc218 \uc788\ub294 \ud568\uc218\n        plt.axis(\"off\")\n    \n    plt.show()","627c22b7":"#smaple(\uceec\ub799\uc158, \uc0d8\ud50c\uc218) \uc9c0\uc815\ub41c \uceec\ub809\uc158\uc73c\ub85c \ubd80\ud130 \uc0d8\ud50c\uc218 \ub9cc\ud07c \ucd94\ucd9c\ntmp_df = df_train.sample(9)\n\nimage_ids = tmp_df[\"image_id\"].values\nlabels = tmp_df[\"class_name\"].values\n\nvisualize_batch(image_ids, labels)","95110d46":"#smaple(\uceec\ub799\uc158, \uc0d8\ud50c\uc218) \uc9c0\uc815\ub41c \uceec\ub809\uc158\uc73c\ub85c \ubd80\ud130 \uc0d8\ud50c\uc218 \ub9cc\ud07c \ucd94\ucd9c\ntmp_df = df_train.sample(6)\n\nimage_ids = tmp_df[\"image_id\"].values\nlabels = tmp_df[\"class_name\"].values\n\nvisualize_batch(image_ids, labels)","424c6bf1":"tmp_df = df_train[df_train[\"label\"] == 0]\nprint(f\"Total train images for class 0: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image_id\"].values\nlabels = tmp_df[\"label\"].values\n\nvisualize_batch(image_ids, labels)","428846f3":"tmp_df = df_train[df_train[\"label\"] == 1]\nprint(f\"Total train images for class 1: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image_id\"].values\nlabels = tmp_df[\"label\"].values\n\nvisualize_batch(image_ids, labels)","fcba55b2":"tmp_df = df_train[df_train[\"label\"] == 2]\nprint(f\"Total train images for class 2: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image_id\"].values\nlabels = tmp_df[\"label\"].values\n\nvisualize_batch(image_ids, labels)","c0fbab0a":"tmp_df = df_train[df_train[\"label\"] == 3]\nprint(f\"Total train images for class 3: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image_id\"].values\nlabels = tmp_df[\"label\"].values\n\nvisualize_batch(image_ids, labels)","64e8ca38":"tmp_df = df_train[df_train[\"label\"] == 4]\nprint(f\"Total train images for class 4: {tmp_df.shape[0]}\")\n\ntmp_df = tmp_df.sample(9)\nimage_ids = tmp_df[\"image_id\"].values\nlabels = tmp_df[\"label\"].values\n\nvisualize_batch(image_ids, labels)\n","e2364d40":"* 1 - CBSD - Cassava Brown Streak Disease\n* ","bb1753d2":"* 1. 0 - CBB - Cassava Bacterial Blight(\uce74\uc0ac\ubc14 \ubc15\ud14c\ub9ac\uc544 \ubcd1\uade0)\n","77b4dff3":"* 4 - Healthy\n* ","3bed0496":"* 3 - CMD - Cassava Mosaic Disease\n* ","cba682f0":"> notebook Sample code learning","0b8f19e4":"* 2 - CGM - Cassava Green Mottle\n"}}