{"cell_type":{"3c22d8df":"code","bebfb64d":"code","92f4269e":"code","459d7c53":"code","629858ba":"code","c0185db9":"code","523c5db7":"code","9f29a93d":"code","96057d10":"code","25e8c16d":"code","cb50dbda":"code","5c2f1bac":"code","6a597a13":"code","04a946f0":"code","c2f3f1e7":"code","781772e2":"code","a1b057dd":"code","11712f57":"code","377019fe":"code","ed6fe979":"code","c0385f0c":"code","0e8bdda3":"code","ce9071e1":"code","7227e594":"code","866df17f":"code","975ca048":"code","5c817cf1":"code","2364c9e4":"markdown","4a7bc00c":"markdown","0c904db6":"markdown","dae5c171":"markdown","351244a3":"markdown","5db47037":"markdown","84cbbc62":"markdown","3262d1a4":"markdown","4c2d00f6":"markdown","ce79b2ae":"markdown","9afeb8cd":"markdown","c0b5b7d1":"markdown","0e6c97ef":"markdown","c0600767":"markdown"},"source":{"3c22d8df":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.simplefilter(\"ignore\")","bebfb64d":"# Load the dataset\n\ntelecomChurn = pd.read_csv(\"..\/input\/telecom-users-dataset\/telecom_users.csv\")\ntelecomChurn.head()","92f4269e":"# check the data structure\ntelecomChurn.info()","459d7c53":"# Check for any missing values\ntelecomChurn.isna().sum()","629858ba":"# Explore the response variable\n\nsns.countplot(x='Churn', data=telecomChurn)\nplt.grid()\nprint(telecomChurn['Churn'].value_counts())\nprint(\"\\n\")\nprint(f\"The numbr of churns is {telecomChurn['Churn'].value_counts()[1]\/len(telecomChurn)*100} % of total\")","c0185db9":"# Visualize the categorical variables\n\nfig = plt.figure(figsize=(22, 11))\nfig.subplots_adjust(hspace=0.4, wspace=0.4)\nax = fig.add_subplot(3, 5, 1)\nsns.countplot(x='gender', hue='Churn', data=telecomChurn, ax=ax)\nax = fig.add_subplot(3, 5, 2)\nsns.countplot(x='SeniorCitizen', hue='Churn', data=telecomChurn, ax=ax)\nax = fig.add_subplot(3, 5, 3)\nsns.countplot(x='Partner', hue='Churn', data=telecomChurn, ax=ax)\nax = fig.add_subplot(3, 5, 4)\nsns.countplot(x='Dependents', hue='Churn', data=telecomChurn, ax=ax)\nax = fig.add_subplot(3, 5, 5)\nsns.countplot(x='PhoneService', hue='Churn', data=telecomChurn, ax=ax)\nax = fig.add_subplot(3, 5, 6)\nsns.countplot(x='MultipleLines', hue='Churn', data=telecomChurn, ax=ax)\nax = fig.add_subplot(3, 5, 7)\nsns.countplot(x='InternetService', hue='Churn', data=telecomChurn, ax=ax)\nax = fig.add_subplot(3, 5, 8)\nsns.countplot(x='DeviceProtection', hue='Churn', data=telecomChurn, ax=ax)\nax = fig.add_subplot(3, 5, 9)\nsns.countplot(x='TechSupport', hue='Churn', data=telecomChurn, ax=ax)\nax = fig.add_subplot(3, 5, 10)\nsns.countplot(x='StreamingTV', hue='Churn', data=telecomChurn, ax=ax)\nax = fig.add_subplot(3, 5, 11)\nsns.countplot(x='StreamingMovies', hue='Churn', data=telecomChurn, ax=ax)\nax = fig.add_subplot(3, 5, 12)\nsns.countplot(x='Contract', hue='Churn', data=telecomChurn, ax=ax)\nax = fig.add_subplot(3, 5, 13)\nsns.countplot(x='PaperlessBilling', hue='Churn', data=telecomChurn, ax=ax)\nax = fig.add_subplot(3, 5, 14)\nsns.countplot(x='PaymentMethod', hue='Churn', data=telecomChurn, ax=ax)\nplt.show()","523c5db7":"# Understand the tenure with respect to Churn\nsns.displot(data=telecomChurn, x=\"tenure\", hue=\"Churn\", kind='kde')","9f29a93d":"# Understand the average tenure\nsns.catplot(x=\"Churn\", y=\"tenure\", kind=\"box\", data=telecomChurn)\n\ntelecomChurn.groupby(\"Churn\").mean()['tenure']","96057d10":"# Understand the MonthlyCharges with respect to Churn\nsns.displot(data=telecomChurn, x=\"MonthlyCharges\", hue=\"Churn\", kind='kde')","25e8c16d":"# Understand the average MonthlyCharges\nsns.catplot(x=\"Churn\", y=\"MonthlyCharges\", kind=\"box\", data=telecomChurn)\n\n# Understand the average MonthlyCharges\ntelecomChurn.groupby(\"Churn\").mean()['MonthlyCharges']","cb50dbda":"# We will convert the TotalCharges column to numeric .. The blank entries will be coerced to NaN..\ntelecomChurn['TotalCharges'] = pd.to_numeric(telecomChurn['TotalCharges'], errors='coerce')","5c2f1bac":"# we will check all the rows where TotalCharges column is NaN\n\ntelecomChurn[telecomChurn['TotalCharges'].isna()]","6a597a13":"telecomChurn['TotalCharges'] = telecomChurn['TotalCharges'].replace(np.nan, 0, regex=True)","04a946f0":"from sklearn.preprocessing import LabelEncoder\n\nlabel_encoder = LabelEncoder()","c2f3f1e7":"telecomChurn['gender'] = label_encoder.fit_transform(telecomChurn['gender'])                                        # Gender\ntelecomChurn['Partner'] = label_encoder.fit_transform(telecomChurn['gender'])                                       # Partner\ntelecomChurn['Dependents'] = label_encoder.fit_transform(telecomChurn['gender'])                                    # Dependents\ntelecomChurn['PhoneService'] = label_encoder.fit_transform(telecomChurn['PhoneService'])                            # PhoneService\ntelecomChurn['MultipleLines'] = telecomChurn['MultipleLines'].apply(lambda x : 1 if x == 'Yes' else 0)              # MultipleLines\ntelecomChurn['InternetService'] = telecomChurn['InternetService'].apply(lambda x : 0 if x == 'No' else 1)           # Internet Service\ntelecomChurn['OnlineSecurity'] = telecomChurn['OnlineSecurity'].apply(lambda x : 1 if x == 'Yes' else 0)            # OnlineSecurity\ntelecomChurn['OnlineBackup'] = telecomChurn['OnlineBackup'].apply(lambda x : 1 if x == 'Yes' else 0)                # OnlineBackup\ntelecomChurn['DeviceProtection'] = telecomChurn['DeviceProtection'].apply(lambda x : 1 if x == 'Yes' else 0)        # DeviceProtection\ntelecomChurn['TechSupport'] = telecomChurn['TechSupport'].apply(lambda x : 1 if x == 'Yes' else 0)                  # TechSupport\ntelecomChurn['StreamingTV'] = telecomChurn['StreamingTV'].apply(lambda x : 1 if x == 'Yes' else 0)                  # StreamingTV\ntelecomChurn['StreamingMovies'] = telecomChurn['StreamingMovies'].apply(lambda x : 1 if x == 'Yes' else 0)          # DeviceProtection\ntelecomChurn['Contract'] = label_encoder.fit_transform(telecomChurn['Contract'])                                    # Contract\ntelecomChurn['PaperlessBilling'] = label_encoder.fit_transform(telecomChurn['PaperlessBilling'])                    # PaperlessBilling\ntelecomChurn['PaymentMethod'] = label_encoder.fit_transform(telecomChurn['PaymentMethod'])                          # PaymentMethod\ntelecomChurn['Churn'] = label_encoder.fit_transform(telecomChurn['Churn'])                                          # Churn","781772e2":"telecomChurn.head()","a1b057dd":"# Extract features and target\n\nfeatures = telecomChurn.drop(labels=[\"Unnamed: 0\", \"customerID\", \"Churn\"], axis=1)\ntarget = telecomChurn['Churn']","11712f57":"# Check the feautures set\nfeatures.head()","377019fe":"# Perform Train-test split\n\nfrom sklearn.model_selection import train_test_split\n\nfeatures_train, features_test, target_train, target_test = train_test_split(features, \n                                                                            target, \n                                                                            test_size=0.3, random_state=101,\n                                                                           stratify = target)","ed6fe979":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\n# We will run it on a grid, to see the best params\nparam_grid = {'n_estimators': [50, 100, 200], 'max_features': ['auto', 'sqrt'], 'bootstrap': [True, False], \n              'criterion':['entropy', 'gini']}\nrfcgrid = GridSearchCV(RandomForestClassifier(random_state=101), param_grid, verbose=100, cv=10, n_jobs=-2)\nrfcgrid.fit(features_train, target_train)\n\nprint(f\"The best params - {rfcgrid.best_params_}\")","c0385f0c":"# Run the prediction and check evaluation metrics\n\nfrom sklearn.metrics import confusion_matrix, classification_report, f1_score, accuracy_score, balanced_accuracy_score\n\nrfcpredictions = rfcgrid.predict(features_test)\n\nprint(\"Confusion Matrix - Random Forest Using Entropy Index\")\nprint(confusion_matrix(target_test,rfcpredictions))\nprint(\"\\n\")\nprint(\"Accuracy Score - Random Forest\")\nprint(accuracy_score(target_test, rfcpredictions))\nprint(\"\\n\")\nprint(\"Classification Report - Random Forest\")\nprint(classification_report(target_test,rfcpredictions))\nprint(\"\\n\")\nprint(\"F1 Score - Random Forest\")\nprint(f1_score(target_test, rfcpredictions))","0e8bdda3":"from xgboost import XGBClassifier\n\nparam_grid = {'n_estimators':[50, 100, 200, 300], 'max_depth' : [3, 4, 5], 'learning_rate':[0.001, 0.01, 0.1, 1, 10]}\nxggrid = GridSearchCV(XGBClassifier(objective = 'binary:logistic', random_state = 101), param_grid, verbose=1, cv=10, n_jobs=-2)\nxggrid.fit(features_train, target_train)\n\nprint(f\"The best params are {xggrid.best_params_}\")","ce9071e1":"xggrid_predictions = xggrid.predict(features_test)\n\nprint(\"Confusion Matrix\")\nprint(confusion_matrix(target_test, xggrid_predictions))\nprint(\"\\n\")\nprint(\"Accuracy Score\")\nprint(accuracy_score(target_test, xggrid_predictions))\nprint(\"\\n\")\nprint(\"Classification Report\")\nprint(classification_report(target_test, xggrid_predictions))\nprint(\"F1 Score \\n\")\nprint(f1_score(target_test, xggrid_predictions))","7227e594":"from sklearn.naive_bayes import GaussianNB\n\n# Build the Model\ngaussianNBClassifier = GaussianNB()\ngaussianNBClassifier.fit(features_train, target_train)","866df17f":"predictionsGaussianNB = gaussianNBClassifier.predict(features_test)\nprint(\"Confusion Matrix - GaussianNB\")\nprint(confusion_matrix(target_test, predictionsGaussianNB))\nprint(\"\\n\")\nprint(\"Accuracy Score - GaussianNB\")\nprint(accuracy_score(target_test, predictionsGaussianNB))\nprint(\"\\n\")\nprint(\"Classification Report - GaussianNB\")\nprint(classification_report(target_test, predictionsGaussianNB))\nprint(\"F1 Score \\n\")\nprint(f1_score(target_test, predictionsGaussianNB))","975ca048":"from sklearn.linear_model import LogisticRegression\n\nparam_grid = {'solver':['lbfgs', 'liblinear']}\nlogmodel = GridSearchCV(LogisticRegression(), param_grid, verbose=1, cv=10, n_jobs=-2)\nlogmodel.fit(features_train, target_train)\n\nprint(f\"The best params - {logmodel.best_params_}\")","5c817cf1":"logisticPredictions = logmodel.predict(features_test)\n\nprint(\"Confusion Matrix\")\nprint(confusion_matrix(target_test, logisticPredictions))\nprint(\"\\n\")\nprint(\"Accuracy Score\")\nprint(accuracy_score(target_test, logisticPredictions))\nprint(\"\\n\")\nprint(\"Classification Report\")\nprint(classification_report(target_test, logisticPredictions))\nprint(\"F1 Score \\n\")\nprint(f1_score(target_test, logisticPredictions))","2364c9e4":"## XGBoost Classifier","4a7bc00c":"## Extracting Feautures, Target and Train-Test Split","0c904db6":"### Preparing features for Modelling","dae5c171":"LogisticRegression has performed the best with higher precision on classifying the Churn and also a F1 score of 0.6. This is followed by XGBoost\n\nThe overall accuracy touches at 80%","351244a3":"## Exploratory Data Analysis","5db47037":"## Gaussian Naive Bayes Classifier","84cbbc62":"## Logistic Regression","3262d1a4":"## Conclusion","4c2d00f6":"There are no missing values in the dataset","ce79b2ae":"## Library imports","9afeb8cd":"## Load Dataset and Validate Data load","c0b5b7d1":"** It is observed thst TotalCharges column is NaN for those customers, whose tenure is 0, which means customer who have not completed one month, there has not been any charge made to the customer. We can handle this NaN in two ways\n- We made all of them as 0.0 (since no billing has happened yet) - Hence there are no charges to the customer\n- OR, we can made the TotalCharges of these rows to be equal to MonthlyCharges as the same will be billed towards end of the month\"\n\nThese are situations where we need a SME\/Domain Expert to provide guidance \n\nFor now we proceed on to make these values as 0.0 **","0e6c97ef":"# Telecom Users - Churn Prediction","c0600767":"## Random Forest Classifier"}}