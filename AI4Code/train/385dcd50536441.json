{"cell_type":{"4806b912":"code","ea867da3":"code","f8620323":"code","6615e19d":"code","17d143b3":"code","39e756af":"code","50cdbfff":"code","55051613":"code","3be6fd2d":"code","d1350e7f":"code","f57aea63":"code","20c1b3b4":"code","15986640":"code","29d24db9":"code","12dd1d8f":"code","123c1af1":"code","b3f64b20":"code","2c8b8451":"code","68497323":"markdown","289e385d":"markdown","221e3a64":"markdown","e2ef8f01":"markdown","582d35c1":"markdown","ecb0e0d9":"markdown","1c6a345d":"markdown","00dec7d1":"markdown","be5f896d":"markdown","8a9ec0c3":"markdown"},"source":{"4806b912":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom sklearn.linear_model import LinearRegression\nimport seaborn as sns\nsns.set()\nfrom sklearn.cluster import KMeans\nfrom mpl_toolkits.mplot3d import Axes3D\nimport tensorflow as tf \nimport tensorflow_datasets as tfds\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.corpus import stopwords\nfrom collections import  Counter\nimport nltk\nnltk.download('stopwords')\nimport re\n\nfrom collections import defaultdict\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler,OneHotEncoder, OrdinalEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline, FeatureUnion, make_pipeline\nfrom xgboost import XGBRegressor\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.metrics import mean_absolute_error\nfrom scipy import stats\nfrom scipy.stats import norm, skew \nfrom scipy.special import boxcox1p\nfrom sklearn.preprocessing import RobustScaler\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ea867da3":"data = pd.read_csv('..\/input\/water-potability\/water_potability.csv')","f8620323":"data","6615e19d":"missing_value = data.isnull().sum().sort_values(ascending = False)\nmissing_perc = (data.isnull().sum()*100\/data.shape[0]).sort_values(ascending = False)\nvalue = pd.concat([missing_value,missing_perc],axis=1,keys=['Count','%'])\ndisplay(value.head(20).style.background_gradient(cmap = 'Reds', axis = 0))","17d143b3":"data.describe(include='all')","39e756af":"# Filling up the null values with the median\ndata = data.apply(lambda x: x.fillna(x.median()),axis=0)","50cdbfff":"data.describe(include='all')","55051613":"fig = plt.figure(figsize=(18,15))\ngs = fig.add_gridspec(3,3)\nax0 = fig.add_subplot(gs[0,0])\nax1 = fig.add_subplot(gs[0,1])\nax2 = fig.add_subplot(gs[0,2])\nax3 = fig.add_subplot(gs[1,0])\nax4 = fig.add_subplot(gs[1,1])\nax5 = fig.add_subplot(gs[1,2])\nax6 = fig.add_subplot(gs[2,0])\nax7 = fig.add_subplot(gs[2,1])\nax8 = fig.add_subplot(gs[2,2])\nsns.kdeplot(ax=ax0,data = data, x= 'ph',hue='Potability',fill=True)\nsns.kdeplot(ax=ax1,data = data, x= 'Hardness',hue='Potability',fill=True)\nsns.kdeplot(ax=ax2,data = data, x= 'Solids',hue='Potability',fill=True)\nsns.kdeplot(ax=ax3,data = data, x= 'Chloramines',hue='Potability',fill=True)\nsns.kdeplot(ax=ax4,data = data, x= 'Sulfate',hue='Potability',fill=True)\nsns.kdeplot(ax=ax5,data = data, x= 'Conductivity',hue='Potability',fill=True)\nsns.kdeplot(ax=ax6,data = data, x= 'Organic_carbon',hue='Potability',fill=True)\nsns.kdeplot(ax=ax7,data = data, x= 'Trihalomethanes',hue='Potability',fill=True)\nsns.kdeplot(ax=ax8,data = data, x= 'Turbidity',hue='Potability',fill=True)","3be6fd2d":"f, ax = plt.subplots(1, 1, figsize=(10, 10))\ndf_corr = data.corr()\nsns.heatmap(df_corr,fmt=\".2f\",annot=True,cmap='YlGnBu',ax=ax)\n","d1350e7f":"from sklearn.preprocessing import MinMaxScaler\nX = data.drop('Potability',axis=1)\ny = data['Potability']\n\nscaler = MinMaxScaler()\nX[X.columns] = scaler.fit_transform(X)\n","f57aea63":"X_train, X_valid, y_train, y_valid = train_test_split(X,y, test_size = 0.3)\n","20c1b3b4":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score\n\ngaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\ny_pred = gaussian.predict(X_valid)\nacc_gaussian = round(accuracy_score(y_pred, y_valid) * 100, 2)\nprint(acc_gaussian)","15986640":"from sklearn.ensemble import RandomForestClassifier\n\nrandomforest = RandomForestClassifier()\nrandomforest.fit(X_train, y_train)\ny_pred = randomforest.predict(X_valid)\nacc_randomforest = round(accuracy_score(y_pred, y_valid) * 100, 2)\nprint(acc_randomforest)\n","29d24db9":"from sklearn.svm import SVC\nsvm = SVC()\nsvm.fit(X_train, y_train)\ny_pred = svm.predict(X_valid)\nacc_svm = round(accuracy_score(y_pred, y_valid)*100,2)\nprint(acc_svm)","12dd1d8f":"#Gradient Boosting Classifier\nfrom sklearn.ensemble import GradientBoostingClassifier\n\ngbk = GradientBoostingClassifier()\ngbk.fit(X_train, y_train)\ny_pred = gbk.predict(X_valid)\nacc_gbk = round(accuracy_score(y_pred, y_valid) * 100, 2)\nprint(acc_gbk)","123c1af1":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlo = logreg.fit(X_train,y_train)\ny_pred = lo.predict(X_valid)\nacc_log = round(accuracy_score(y_pred, y_valid) * 100, 2)\nprint(acc_log)","b3f64b20":"result = pd.DataFrame({'Model' : ['Logistic Regression', 'RandomForest', 'Gradient Boosting', \n                         'SVM', 'GaussianNB'],\n                         'Score' : [acc_log, acc_randomforest, acc_gbk, acc_svm, acc_gaussian]})\n\nresult.sort_values(by='Score', ascending=False, inplace=True)","2c8b8451":"sns.barplot(y = 'Model',x = 'Score', data = result)","68497323":"# Result","289e385d":"# Determining the Potability using various Classifiers","221e3a64":"# Preprocessing the data","e2ef8f01":"# Importing Libraries","582d35c1":"# Importing the Data","ecb0e0d9":"# Checking for Missing values","1c6a345d":"The Sulfate, PH and Trihalomethanes have missing values.","00dec7d1":"**Have Got around 70% accuracy using RandomForest Classifier.**","be5f896d":"# Correlation Map","8a9ec0c3":"# Properties V\/S Potability"}}