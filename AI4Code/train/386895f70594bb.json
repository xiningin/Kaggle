{"cell_type":{"ea827c66":"code","2e6bc5ff":"code","077995e6":"code","e6eaa866":"code","4d4d1f5e":"code","938d1241":"code","fa74127b":"code","7da99536":"code","ef813513":"markdown","c26b1f76":"markdown","eae132ec":"markdown","ce44359d":"markdown","1154bf96":"markdown","4a0d6657":"markdown","c0aff020":"markdown","dc9c538e":"markdown","1da679e1":"markdown","85801222":"markdown","29b3ea68":"markdown","bf3ab8cc":"markdown","13164f74":"markdown","56f7da74":"markdown"},"source":{"ea827c66":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom time import sleep\nfrom math import sin\nfrom scipy.signal import find_peaks\nimport matplotlib.patches as patches\nfrom numba import guvectorize,float64\n\n\ndef create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12, 6.33)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return fig, ax\n\ndef plot_frame_on_field(tracking_frame):\n    example_play_home = tracking_frame.query('team == \"home\"')\n    example_play_away = tracking_frame.query('team == \"away\"')   \n    fig, ax = create_football_field()\n    example_play_home.plot(x='x', y='y', kind='scatter', ax=ax, color='orange', s=5, legend='Away')\n    example_play_away.plot(x='x', y='y', kind='scatter', ax=ax, color='blue', s=5, legend='Home')\n    plt.title(tracking_frame.Unique_play_ID.unique())\n    plt.legend()\n    plt.show()\n    \n    \n@guvectorize([(float64, float64, float64, float64[:], float64[:], float64[:], float64[:])], '(),(),(),(n),(n),(n)->(n)')\ndef v_calc(x, y, shape, players_q,players_x,players_y, V):\n    for i in range(players_q.shape[0]):\n      V[i] = players_q[i]\/((x-players_x[i])**2+(y-players_y[i])**2)**(0.5)**(shape)\n\ndef plot_field_potential(players):\n    players = np.asarray(players[['sign_value','x','y']])\n    y = np.linspace(0,53.3,num=212)\n    x = np.linspace(0,120,num=500)\n    xxs, yys = np.meshgrid(x, y, sparse=True)\n\n    vvs = np.add.reduce(v_calc(xxs ,yys, 1, players[:,0], players[:,1], players[:,2]),axis=2)\n\n\n    clim0,clim1 = -100,100\n    vvs[np.where(vvs<clim0)] = clim0*0.999999 # to avoid error\n    vvs[np.where(vvs>clim1)] = clim1*0.999999 # to avoid error\n\n    fig, ax = plt.subplots()\n    im = ax.imshow(vvs, interpolation='bilinear', cmap='bwr',\n               origin='lower', extent=[0, 120, 0, 53.3],\n               vmax=abs(vvs\/2).max(), vmin=-abs(vvs\/2).max())\n\n    cbar = plt.colorbar(im,ax=ax)\n    cbar.set_clim(clim0,clim1)\n    cbar.set_ticks(np.linspace(clim0,clim1,21))\n    return plt","2e6bc5ff":"tracking_files = ['tracking2018.csv', 'tracking2019.csv', 'tracking2020.csv']\n\ndef make_unique_play_id(game_id, play_id):\n    return game_id.astype(str)+play_id.astype(str)\n \n\ndef find_primary_returner(value):\n  try:\n    return float(value)\n  except:\n    return float(str.split(value,';')[0])","077995e6":"def make_potential(plays_df,tracking_df,shape_1=1,shape_2=1.5,scaling_value=100):\n    '''\n    Makes a potential of every frame in a play\n    '''\n    tracking = pd.merge(tracking_df,plays_df[['Unique_play_ID','Primary_returner','home_possession']],on='Unique_play_ID',how='left')\n\n    tracking['sign_value'] = -1\n    tracking['sign_value']=tracking['sign_value'].mask(((tracking['team'].eq('home') & tracking['home_possession'].eq(True)) | (tracking['team'].eq('away') & tracking['home_possession'].eq(False))),1)\n    tracking['sign_value']=tracking['sign_value']*scaling_value\n\n    tracking=pd.merge(kick_returner(tracking),tracking,on=['Unique_play_ID','frameId'])    \n\n    tracking=tracking[tracking['team'] != 'football']\n    tracking = tracking[tracking['nflId'] != tracking['Primary_returner']]\n\n    tracking['relative_velocity_mask'] = tracking[['returner_s','returner_dir','s','dir']].apply(lambda x: relative_velocity(*x), axis=1)\n\n    tracking['potential_shape_1']=tracking['sign_value']\/(((tracking['returner_x']-tracking['x'])**2+(tracking['returner_y']-tracking['y'])**2)**(0.5))**shape_1\n    tracking['potential_shape_2']=tracking['sign_value']\/(((tracking['returner_x']-tracking['x'])**2+(tracking['returner_y']-tracking['y'])**2)**(0.5))**shape_2\n\n    tracking['potential_shape_1_rv_masked'] = tracking['potential_shape_1'].where(tracking['relative_velocity_mask'])\n    tracking['potential_shape_2_rv_masked'] = tracking['potential_shape_2'].where(tracking['relative_velocity_mask'])\n    \n    tracking['diff_rv_masked']= tracking['potential_shape_1_rv_masked']-tracking['potential_shape_2_rv_masked']\n\n    tracking['potential_diff'] = tracking['potential_shape_1']-tracking['potential_shape_2']\n\n    potential=tracking[['Unique_play_ID','frameId','potential_shape_1','potential_shape_2','potential_diff','potential_shape_1_rv_masked',\n    'potential_shape_2_rv_masked','diff_rv_masked','event']].groupby(by=['Unique_play_ID','frameId','event'],as_index=True).mean()\n    \n    potential['event']=potential.index.get_level_values(2)\n    potential.index=potential.index.droplevel(2)  \n    return potential, tracking[['Unique_play_ID','x','y','sign_value','frameId','potential_shape_1','potential_shape_2','potential_diff','potential_shape_1_rv_masked',\n    'potential_shape_2_rv_masked','diff_rv_masked','event']]\n    return potential","e6eaa866":"play_data=pd.read_csv('plays.csv')\ngames = pd.read_csv('games.csv',usecols=['gameId','homeTeamAbbr','visitorTeamAbbr'])\nplay_data = pd.merge(play_data,games,on='gameId',how='left')\nplay_data['Unique_play_ID'] = make_unique_play_id(play_data['gameId'], play_data['playId'])\nplay_data['Primary_returner'] = play_data['returnerId'].apply(find_primary_returner)\nplay_data['home_possession'] = play_data['possessionTeam'] == play_data['homeTeamAbbr']\nplay_data = play_data[play_data['specialTeamsResult'] == 'Return']\n\npunts_data = play_data[play_data['specialTeamsPlayType'] == 'Punt']\nkickoff_data = play_data[play_data['specialTeamsPlayType'] == 'Kickoff']\n\ntracking = pd.read_csv(tracking_files[0])\ntracking['Unique_play_ID'] = make_unique_play_id(tracking['gameId'], tracking['playId'])","4d4d1f5e":"punts_potential,punts_field_plotting = make_potential(punts_data,tracking)\npunts_potential = drop_play_before_reception(punts_potential)\nkickoff_potential, kickoff_field_plotting = make_potential(kickoff_data,tracking)\nkickoff_potential = drop_play_before_reception(kickoff_potential)","938d1241":"temp = pd.DataFrame(punts_potential).groupby(by='Unique_play_ID').mean()\nplot_temp= pd.merge(temp,play_data[['Unique_play_ID','kickReturnYardage']],how='left',on='Unique_play_ID')\nplot_temp.plot(x='kickReturnYardage',y='potential_shape_1_rv_masked',kind='scatter',ylim=(-3,15),)","fa74127b":"i=0\nfor plays in punts_potential.index.get_level_values(level=0).unique():\n    print(plays)\n    #print(find_peaks(punts_potential.loc[plays,'diff_rv_masked'])[0])\n    #print(find_peaks(punts_potential.loc[plays,'diff_rv_masked']*-1)[0])\n    \n    i=i+1\n    punts_potential.loc[plays].plot(ylim=[-30,30],legend=False)\n    print(tracking[['Unique_play_ID','frameId','event']].query(f\"event != 'None' and Unique_play_ID == '{plays}'\").groupby(by='event').mean().head(10))\n    plt.show()\n    for frame in range(20,100,10):\n        plot_field_potential(punts_field_plotting[['sign_value','x','y','Unique_play_ID','frameId']].query(f'Unique_play_ID == \"{plays}\" and frameId == \"{frame}\"'))\n        plt.show()\n    plot_frame_on_field(tracking.query(f\"Unique_play_ID == '{plays}'\"))\n    \n    sleep(.5)\n    if i == 10:\n        break","7da99536":"temp = pd.DataFrame(potential).groupby(by='Unique_play_ID').mean()\nplot_temp= pd.merge(temp,play_data[['Unique_play_ID','kickReturnYardage']],how='left',on='Unique_play_ID')\n#plot_temp['heck']=\nplot_temp.plot(x='kickReturnYardage',y='potential_shape_1',kind='scatter',ylim=(-3,15),)","ef813513":"![play_potential_graph.jpeg](attachment:20af37d0-91dc-4ece-8537-da1db85a1006.jpeg)\n![rv_masked_plays.jpeg](attachment:af17f292-a67f-4112-804c-48c8b22e2091.jpeg)","c26b1f76":"![Screenshot 2021-12-04 16.10.53.png](attachment:fe55c75b-05f3-4ea5-af48-cac8b37f4e20.png)","eae132ec":"![play_potential_graph.jpeg](attachment:11779385-06b7-4758-b08e-5cc8938191ad.jpeg)","ce44359d":"**Conclusion**\n\nThis indicator looks like is has some potential. Measuring the potential currently doesn't do anything usefull, it can't differentiate between impressive plays and average plays with normal descriptive statistics. Looking at the field as a series of point charges does present an opportunity to highlight where on the field either team lacks presence but doesn't do much when looking strictly at the returner","1154bf96":"**Problem 2**\n\n\nBelow I have a screen shot of a punt return that lead to a touchdown. This is what many of these high yardage plays look like: ~3 players chasing at ~5 yards with this indicator this looks like a moderate to high potential for the 4-6 seconds. This frame looks to have a value of ~15 which is hecking high given that these punt returners are almost impossible to catch when they're off to the races but even more the averages we saw the first figure were ~2-3 for this length of play so we defenitly need to break down plays better. To state the problem more explicitly; there are times when opponents don't stand a chance but show up as not being blocked.","4a0d6657":"![heatmap.jpeg](attachment:e5a508c3-0c31-40ca-930f-f47e5f59971c.jpeg)","c0aff020":"**Solution**\nWe can mask all players that have a negative relative velocity. Once again this doesn't make much of a difference, there are only minor differences on the outhliers.","dc9c538e":"# **I attempted to model blocking effectiveness as a system of point charges. We'll explore what the model is and why it didn't work.**","1da679e1":"![results.jpeg](attachment:cd06a336-2539-460e-9989-2b4105c608d0.jpeg)","85801222":"# **Apendix with Code:**","29b3ea68":"This is a random example to illustrate why using point charges could be useful. We have a system of interference with both 'home' and 'away' colours with areas behind representing a 'safe zone'. The formulation is super simple $\\sum{\\frac{q}{d^{\\alpha}}}$ where $q$ represents a scaling constant and it's sign determines team, $d$ is distance to runner, and $\\alpha$ is a shape parameter representing how effective a player is at distance. Lets see how this works on punt plays.","bf3ab8cc":"In this higher potential mean's the runner is closer to opposing players negative values means the ball is closer on average to friendly players.\n\n\nGraphically we can some correlation and we can see that high yardage plays actually have more blocking than average.  Case closed right? Wrong, we can see that the best plays have a values between [0-4], this value isn't really different than plays that don't go anywhere. But the upper left quadrant reprsents worse blocking and worse yardage right? Also wrong, this likely has nothing to do with actual blocking effectiveness we'll take a look at an average play below. ","13164f74":"**Solution**\nWe can remove the last few frames before the play is marked as a tackle or OB. The results are the same, there is just too much noise to use this indicator.","56f7da74":"Above is an average play this is the summation of all players on the field, with 2 different $\\alpha$ exponents (1 and 1.5) this impies at 10 yards a players 'threat' or 'block importance' is 10(blue) or 3(orange).\n\n**Problem 1**\n\n\nIn this play there is a huge spike when being tackled and this is likely to contribute substantially to having a higher 'potential' so in shorter plays this liekly plays a bigger role. Also when the runner shrugs a tackle (~frame 97,106) it contributes substantially to the average of the play. These are problematic for descriptive statistics like a mean. I also plotted the difference between the two and this looks promising as an indicator of key blocks and dodged tackles. "}}