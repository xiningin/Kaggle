{"cell_type":{"dd5e7a91":"code","0979ee6f":"code","089b5837":"code","7d008d61":"code","4c8f7f9b":"code","a834ca78":"code","dc0df92a":"code","1d083e13":"code","5524b944":"code","dc89825d":"code","60120009":"code","272ba830":"code","35b6cb24":"code","4a1de79b":"code","6fb9fdcb":"code","4128465f":"code","05402724":"code","ff720ee7":"code","c74cc2a1":"code","5c4e8dc3":"code","d1c18e2d":"code","ab2ab17e":"code","887140db":"code","b057f3ca":"code","8c9267ce":"code","89245cef":"code","b56b16e8":"code","6c141b9b":"code","7285afdc":"code","9c1b6e67":"code","c4d6ad9a":"code","871eeb2c":"code","2ddcf001":"code","39e0b6ad":"code","8b22c54a":"markdown","0e461e0f":"markdown","b8a02963":"markdown","4f8c32de":"markdown","ecf6a754":"markdown","c8ea6c54":"markdown","047d7496":"markdown","a69259fb":"markdown"},"source":{"dd5e7a91":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# plotly library\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","0979ee6f":"data=pd.read_csv(\"..\/input\/column_2C_weka.csv\")","089b5837":"data.tail()","7d008d61":"data.info()","4c8f7f9b":"data.describe()","a834ca78":"#correlation map\nf,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.2f',ax=ax)\nplt.show()","dc0df92a":"plt.subplots(figsize=(10,10))\nplt.plot(data[\"pelvic_incidence\"],linestyle=\":\")\nplt.plot(data[\"pelvic_tilt numeric\"],linestyle=\"-.\")\nplt.legend()\nplt.grid()\nplt.show()","1d083e13":"plt.subplots(figsize=(10,10))\nplt.plot(data[\"pelvic_incidence\"],linestyle=\":\",color=\"green\")\nplt.plot(data[\"lumbar_lordosis_angle\"],linestyle=\"-\")\nplt.legend()\nplt.grid()\nplt.show()","5524b944":"plt.subplots(figsize=(10,10))\nplt.plot(data[\"pelvic_incidence\"],linestyle=\":\")\nplt.plot(data[\"pelvic_radius\"],linestyle=\"-\")\nplt.legend()\nplt.grid()\nplt.show()","dc89825d":"pelvic=data[\"pelvic_incidence\"]\npelvic_tilt=data[\"pelvic_tilt numeric\"]\nlumbar=data[\"lumbar_lordosis_angle\"]\nsacral_s=data[\"sacral_slope\"]\nradius=data[\"pelvic_radius\"]\n\nplt.subplots(figsize=(12,12))\n\nplt.subplot(5,1,1)\nplt.title(\"pelvic_incidence-pelvic_tilt numeric-lumbar_lordosis_angle-sacral_slope-pelvic_radius subplot\")\nplt.plot(pelvic,color=\"r\",label=\"pelvic_incidence\")\nplt.legend()\nplt.grid()\n\nplt.subplot(5,1,2)\nplt.plot(pelvic_tilt,color=\"b\",label=\"pelvic_tilt numeric\")\nplt.legend()\nplt.grid()\n\nplt.subplot(5,1,3)\nplt.plot(lumbar,color=\"g\",label=\"lumbar_lordosis_angle\")\nplt.legend()\nplt.grid()\n\nplt.subplot(5,1,4)\nplt.plot(sacral_s,color=\"purple\",label=\"sacral_slope\")\nplt.legend()\nplt.grid()\n\nplt.subplot(5,1,5)\nplt.plot(radius,color=\"lime\",label=\"pelvic_radius\")\nplt.legend()\nplt.grid()\n\nplt.show()\n","60120009":"data[\"pelvic_incidence\"].plot(kind=\"hist\", bins=80,figsize=(10,10),color=\"purple\",grid=\"True\")\nplt.xlabel(\"pelvic_incidence\")\nplt.legend(loc=\"upper right\")\nplt.title(\"pelvic_incidence Histogram\")\nplt.show()","272ba830":"data[\"sacral_slope\"].plot(kind=\"hist\", bins=80,figsize=(10,10),color=\"green\",grid=\"True\")\nplt.xlabel(\"sacral_slope\")\nplt.legend(loc=\"upper right\")\nplt.title(\"sacral_slope Histogram\")\nplt.show()","35b6cb24":"plt.subplots(figsize=(10,10))\nplt.scatter(data[\"sacral_slope\"],data[\"pelvic_incidence\"],color=\"green\",marker = '*')\nplt.xlabel(\"sacral_slope\")\nplt.ylabel(\"pelvic_incidence\")\nplt.legend(loc=\"upper left\")\nplt.grid()\nplt.show()","4a1de79b":"\n# class-sacral_slope bar plot\nplt.subplots(figsize=(8,8))\nplt.bar(data[\"class\"],data[\"sacral_slope\"],color=\"r\")\nplt.xlabel(\"class\")\nplt.ylabel(\"sacral_slope\")\nplt.title(\"class-sacral_slope bar plot\")\nplt.show()\n\n","6fb9fdcb":"# class-pelvic_incidence bar plot\nplt.subplots(figsize=(8,8))\nplt.bar(data[\"class\"],data[\"pelvic_incidence\"],color=\"r\")\nplt.xlabel(\"class\")\nplt.ylabel(\"pelvic_incidence\")\nplt.title(\"class-pelvic_incidence bar plot\")\nplt.show()","4128465f":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\ndata2=data.copy()\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = np.arange(0,310),\n                    y = data2[data2['class']=='Normal'].sacral_slope,\n                    mode = \"markers\",\n                    name = \"Normal\",\n                    marker = dict(color = 'rgba(0, 100, 255, 0.8)'),\n                    text= data2['class'])\n# creating trace2\ntrace2 =go.Scatter(\n                    x = np.arange(0,310),\n                    y = data2[data2['class']=='Abnormal'].sacral_slope,\n                    mode = \"markers\",\n                    name = \"Abnormal\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= data2['class'])\n\ndf = [trace1, trace2]\nlayout = dict(title = 'sacral_slope',\n              xaxis= dict(title= 'index',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Values',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = df, layout = layout)\niplot(fig)","05402724":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = np.arange(0,310),\n                    y = data2[data2['class']=='Normal'].pelvic_incidence,\n                    mode = \"markers\",\n                    name = \"Normal\",\n                    marker = dict(color = 'rgba(12, 50, 196, 0.6)'),\n                    text= data2['class'])\n# creating trace2\ntrace2 =go.Scatter(\n                    x = np.arange(0,310),\n                    y = data2[data2['class']=='Abnormal'].pelvic_incidence,\n                    mode = \"markers\",\n                    name = \"Abnormal\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= data2['class'])\n\ndf = [trace1, trace2]\nlayout = dict(title = 'pelvic_incidence',\n              xaxis= dict(title= 'index',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Values',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = df, layout = layout)\niplot(fig)","ff720ee7":"# pelvic_radius vs class scatter plot\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# creating trace1\ntrace1 =go.Scatter(\n                    x = np.arange(0,310),\n                    y = data2[data2['class']=='Normal'].pelvic_radius,\n                    mode = \"markers\",\n                    name = \"Normal\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= data2['class'])\n# creating trace2\ntrace2 =go.Scatter(\n                    x = np.arange(0,310),\n                    y = data2[data2['class']=='Abnormal'].pelvic_radius,\n                    mode = \"markers\",\n                    name = \"Abnormal\",\n                    marker = dict(color = 'rgba(125, 12, 255, 0.6)'),\n                    text= data2['class'])\n\ndf = [trace1, trace2]\nlayout = dict(title = 'pelvic_radius',\n              xaxis= dict(title= 'index',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Values',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = df, layout = layout)\niplot(fig)","c74cc2a1":"data[\"class\"].value_counts().unique","5c4e8dc3":"sns.countplot(x=\"class\", data=data)\nplt.title(\"classes\", color=\"red\")\nplt.show()","d1c18e2d":"pie1_list=data[\"class\"].value_counts().values\nlabels = data[\"class\"].value_counts().index\n# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1_list,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"class\",\n      \"hoverinfo\":\"label+percent\",\n      \"hole\": .3,\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Class Type\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"class\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","ab2ab17e":"data.tail()","887140db":"data1 = data[data['class'] =='Abnormal']\nx=data1[\"pelvic_incidence\"].values.reshape(-1,1)\ny=data1[\"sacral_slope\"].values.reshape(-1,1)\n\n#plot\nplt.figure(figsize=(10,10))\nplt.scatter(x=x,y=y)\nplt.xlabel(\"pelvic_incidence\")\nplt.ylabel(\"sacral_slope\")\nplt.title(\"Abnormal Class\")\nplt.grid()\nplt.show()","b057f3ca":"#linear regression\n#sklearn library\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n\n#regression\nlinear_reg=LinearRegression()\n\n#fit\nlinear_reg.fit(x,y)\n\n#prediction\n# we need these values to plot the regression line.\nx_=np.linspace(min(x), max(x)).reshape(-1,1) # \ny_head=linear_reg.predict(x_)\n\n#R2 score with LinearRegression library\nprint(\"R_square score: \",linear_reg.score(x,y))\n# R2 score with sklearn.metrics\nprint(\"R_2 score with sklearn.metrics library: \",r2_score(y,linear_reg.predict(x)))\n\n# Plot regression line and scatter\nplt.subplots(figsize=(10,10))\nplt.plot(x_, y_head, color='green', linewidth=3)\nplt.scatter(x=x,y=y)\nplt.xlabel('pelvic_incidence')\nplt.ylabel('sacral_slope')\nplt.grid()\nplt.show()","8c9267ce":"A=data[data[\"class\"]==\"Abnormal\"]\nN=data[data[\"class\"]==\"Normal\"]","89245cef":"# pelvic_incidence vs sacral_slope scatter plot in terms of class type \nplt.figure(figsize=(8,8))\nplt.scatter(A.pelvic_incidence,A.sacral_slope,color=\"red\",label=\"abnormal\",alpha=0.5)\nplt.scatter(N.pelvic_incidence, N.sacral_slope,color=\"green\",label=\"normal\",alpha=0.5)\nplt.xlabel(\"pelvic_incidence\")\nplt.ylabel(\"sacral_slope\")\nplt.legend()\nplt.grid()\nplt.show()","b56b16e8":"# determine the values\ndata[\"class\"]=[1 if i==\"Abnormal\" else 0 for i in data[\"class\"]]\n\ny=data[\"class\"].values\nx_data=data.drop([\"class\"],axis=1)","6c141b9b":"# normalize the values\nx=(x_data-np.min(x_data))\/(np.max(x_data)-np.min(x_data))","7285afdc":"# train test split\nfrom sklearn.model_selection import train_test_split\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=1)","9c1b6e67":"#knn model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=3)\nknn.fit(x_train,y_train)\nprediction=knn.predict(x_test)\n","c4d6ad9a":"prediction","871eeb2c":"y_test","2ddcf001":"print(\"{} nn score: {}\".format(3,knn.score(x_test,y_test)))","39e0b6ad":"# find the convenient k value for range (1,21)\nscore_list=[]\nfor i in range(1,25):\n    knn2=KNeighborsClassifier(n_neighbors=i)\n    knn2.fit(x_train,y_train)\n    score_list.append(knn2.score(x_test,y_test))\nplt.figure(figsize=(10,10))   \nplt.plot(range(1,25),score_list)\nplt.xlabel(\"k values\")\nplt.ylabel(\"accuracy\")\nplt.show()","8b22c54a":"<a id=\"4\"><\/a> <br>\n# Conclusion\n\nAs it seen in the above graph, \n* when k=19, we have the most corrected results.","0e461e0f":"<a id=\"3\"><\/a> <br>\n# KNN Algorithm","b8a02963":"# Scatter Plot in Plotly","4f8c32de":"We need to normalize our values.","ecf6a754":"Now, lets split our data into 2 parts as train and test.","c8ea6c54":"# Introduction\n\nIn this kernel, we will apply Linear Regression and KNN Algortihm to \"Biomedical features of orthopedic patients\" dataset.\n1. [EDA(Exploratory Data Analysis)](#1)\n1. [Linear Regression](#2)\n1. [KNN Algorithm](#3)\n1. [Conclusion](#4)\n","047d7496":"<a id=\"2\"><\/a> <br>\n# Linear Regression","a69259fb":"<a id=\"1\"><\/a> <br>\n# EDA (Exploratory Data Analysis)"}}