{"cell_type":{"0d2c62c0":"code","ee36989e":"code","378900bb":"code","52696509":"code","0393af2c":"code","7befe068":"code","f1a3dbe2":"code","14c9d8bf":"code","b3652c6a":"code","80d7ea11":"code","d3cb873a":"code","bc2b2de5":"code","7a0085ac":"code","435cea1b":"code","6ad47a0c":"code","4c03a8d2":"code","8ed75b83":"code","12eb441f":"code","5e401061":"code","786e06ea":"code","c6fc2f9a":"code","27f08c82":"code","0e0d61c1":"code","b60078f2":"code","e840e4ad":"code","66330a14":"code","c188bfbe":"code","ac24c7e3":"code","f1a2b1f9":"code","08ae514e":"code","454831b1":"markdown","6bd3303f":"markdown"},"source":{"0d2c62c0":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ee36989e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVR\nfrom matplotlib.colors import ListedColormap\n\n","378900bb":"test=pd.read_csv(\"..\/input\/disease-prediction-using-machine-learning\/Testing.csv\") \ntrain=pd.read_csv(\"..\/input\/disease-prediction-using-machine-learning\/Training.csv\")","52696509":"train.sample(n=1)\n#This will indicate any random 1 data will be retreived \n\n","0393af2c":"data = pd.concat([train, test])\n","7befe068":"data.sample(10)\n#This will give us randome sample data \n","f1a3dbe2":"data.head(5)\n# This will retrieve the 1st 5 data \n","14c9d8bf":"data.tail(5)\n# This will retrive the last 5 data ","b3652c6a":"data.columns\n# This will retrieve all the colums associated with the dataset ","80d7ea11":"data.shape\n# It has 4961 rows and 133 columns ","d3cb873a":"data.info()","bc2b2de5":"# What we are expecting from visualization. ? \ndata.boxplot(column ='skin_rash', by='itching') #boxplot shows outlier, median,Q3,Q1\n","7a0085ac":"\n# # What we are expecting from visualization. ? \n\ndata1 =data.loc[:,[\"itching\",\"skin_rash\",\"coma\"] ]\ndata1.plot()","435cea1b":"## What we are expecting from visualization. ? \n\ndata1.plot(subplots =True)\n","6ad47a0c":"data.plot(kind= \"scatter\",x=\"depression\", y=\"muscle_pain\")\n","4c03a8d2":"data.plot(kind=\"hist\", y=\"acidity\", bins = 50, range=(0,250))\n","8ed75b83":"data.isnull().sum()\n","12eb441f":"#Importing the train_test_split functionality \nfrom sklearn.model_selection import train_test_split\n\nX, y=data.iloc[:,:-1], data.iloc[:,-1]\n\n#Spliting the dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3)\n#70% training and 30% test ","5e401061":"#Import Random Forest Model\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Create a Gaussian Classifier\nclf=RandomForestClassifier(n_estimators=100)\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nclf.fit(X_train,y_train)\n\ny_pred=clf.predict(X_test)","786e06ea":"#Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import metrics\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","c6fc2f9a":"feature_imp = pd.Series(clf.feature_importances_,index=list(data.columns[:-1])).sort_values(ascending=False).head(50)\nfeature_imp[::-1]","27f08c82":"feature_imp[::-1].index\n","0e0d61c1":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfig = plt.gcf()\nfig.set_size_inches(16, 12)\n\n# Creating a bar plot\nsns.set_style(\"whitegrid\")\nsns.barplot(x=feature_imp, y=feature_imp.index, palette='Blues_d',color='white')\n\n# Add labels to your graph\nplt.xlabel('Feature Importance Score')\nplt.ylabel('Features')\nplt.title(\"Visualizing Important Features\")\nplt.legend()\nplt.show()","b60078f2":"X_reduced, y = data[['receiving_blood_transfusion', 'red_sore_around_nose',\n       'abnormal_menstruation', 'continuous_sneezing', 'breathlessness',\n       'blackheads', 'shivering', 'dizziness', 'back_pain', 'unsteadiness',\n       'yellow_crust_ooze', 'muscle_weakness', 'loss_of_balance', 'chills',\n       'ulcers_on_tongue', 'stomach_bleeding', 'lack_of_concentration', 'coma',\n       'neck_pain', 'weakness_of_one_body_side', 'diarrhoea',\n       'receiving_unsterile_injections', 'headache', 'family_history',\n       'fast_heart_rate', 'pain_behind_the_eyes', 'sweating', 'mucoid_sputum',\n       'spotting_ urination', 'sunken_eyes', 'dischromic _patches', 'nausea',\n       'dehydration', 'loss_of_appetite', 'abdominal_pain', 'stomach_pain',\n       'yellowish_skin', 'altered_sensorium', 'chest_pain', 'muscle_wasting',\n       'vomiting', 'mild_fever', 'high_fever', 'red_spots_over_body',\n       'dark_urine', 'itching', 'yellowing_of_eyes', 'fatigue', 'joint_pain',\n       'muscle_pain']], data.iloc[:,-1]\n\n# Split dataset into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(X_reduced, y, test_size=0.3) # 70% training and 30% test","e840e4ad":"X_reduced.head()\n","66330a14":"#Create a Gaussian Classifier\nclf2=RandomForestClassifier(n_estimators=100)\n\n#Train the model using the training sets y_pred=clf.predict(X_test)\nclf2.fit(X_train,y_train)\n\ny_pred=clf2.predict(X_test)\n\n# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","c188bfbe":"feature_imp2 = pd.Series(clf2.feature_importances_,index=list(X_reduced.columns)).sort_values(ascending=False)\nfeature_imp2[::-1]","ac24c7e3":"fig = plt.gcf()\nfig.set_size_inches(16, 12)\n\n# Creating a bar plot\nsns.set_style(\"whitegrid\")\nsns.barplot(x=feature_imp2, y=feature_imp2.index, palette='Blues_d',color='white')\n\n# Add labels to your graph\nplt.xlabel('Feature Importance Score')\nplt.ylabel('Features')\nplt.title(\"Visualizing Important Features\")\nplt.legend()\nplt.show()","f1a2b1f9":"#looking how much percent each diseases having\ndata['prognosis'].value_counts(normalize = True)","08ae514e":"#Plotting through bar chart \ndata['prognosis'].value_counts(normalize = True).plot.bar()\nplt.subplots_adjust(left = 0.9, right = 2 , top = 2, bottom = 1)","454831b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matpoltlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6bd3303f":"Retriving the path of dataset "}}