{"cell_type":{"a7fb3c3b":"code","bdc520c9":"code","19e44df2":"code","430dba9c":"code","99683790":"code","933ce90b":"code","efc2afe7":"code","b18f78d7":"code","4e544fb0":"code","ff81ec13":"code","80dd8e8c":"code","8c5469c7":"code","44dc1f61":"code","2a06a175":"code","f10c5094":"code","23e71e3a":"code","84cd08fb":"code","940f73a7":"code","01bafc78":"code","93c90c87":"code","fc1f2403":"code","a14b03b1":"code","ecaf4445":"code","145d2610":"code","18aed293":"code","05acd1a8":"code","b45be7af":"code","af68c9b7":"code","e8d07763":"code","63f01d5e":"markdown","d4034de3":"markdown","d1c1dfe7":"markdown","9f1ca9cf":"markdown","9185038d":"markdown","258c6994":"markdown","9c15fd13":"markdown","f132ab28":"markdown","8721f0e5":"markdown"},"source":{"a7fb3c3b":"# Importing Necessary libraries.\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","bdc520c9":"df = pd.read_csv('..\/input\/headbrain.csv')\ndf.head()","19e44df2":"df.info()","430dba9c":"df.isnull().sum()","99683790":"df.shape","933ce90b":"# Taking x and y variables\nX = df['Head Size(cm^3)'].values\nY =  df['Brain Weight(grams)'].values","efc2afe7":"X.shape","b18f78d7":"Y.shape","4e544fb0":"mean_X = np.mean(X)\nmean_Y = np.mean(Y)\n\nn = len(X)\n\nnum =0\ndenom = 0\n\nfor i in range(n):\n    num += (X[i]-mean_X)* (Y[i]-mean_Y)\n    denom +=(X[i]-mean_X)**2\nm = num\/denom\nc = mean_Y - (m*mean_X)\n\nprint(m,',',c)","ff81ec13":"plt.scatter(X,Y)","80dd8e8c":"min_x = np.min(X)-100\nmax_x = np.max(X)+100","8c5469c7":"x = np.linspace(min_x,max_x,1000)","44dc1f61":"y = m*x+c","2a06a175":"plt.scatter(X,Y,color='g')\nplt.plot(x,y,color='r')\nplt.title('Simple Linear Regression')\nplt.xlabel('Head size cm^3')\nplt.ylabel('Brain weight in grams')","f10c5094":"sum_pred = 0\nsum_act = 0\n\nfor i in range(n):\n    y_pred = (m*X[i]+c)\n    sum_pred += (Y[i]-y_pred)**2\n    sum_act +=(Y[i]-mean_Y)**2\n\nr2 = 1-(sum_pred\/sum_act)\nprint(r2)","23e71e3a":"def predict(x):\n    y = m*x + c\n    print(y)","84cd08fb":"predict(4177)","940f73a7":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\n\nX  = X.reshape((n,1))","01bafc78":"X.shape","93c90c87":"y.shape","fc1f2403":"lg = LinearRegression()","a14b03b1":"lg.fit(X,Y)","ecaf4445":"y_pred = lg.predict(X)","145d2610":"mse = mean_squared_error(Y,y_pred)","18aed293":"rmse = np.sqrt(mse)","05acd1a8":"r2_score = lg.score(X,Y)","b45be7af":"print(rmse)\nprint(r2_score)","af68c9b7":"lg.predict([[4177]])","e8d07763":"lg.intercept_","63f01d5e":"Here , we calculate m and b. Now we need to find the line","d4034de3":"<li>Our dataset has no categorical values we can move forward.<\/li>\n<li> we don't have any null values in our dataset.","d1c1dfe7":"Here we can observe that we got R**2> 0.5 . so we have good model","9f1ca9cf":"#### Calculating the error","9185038d":"### creating dummy test set","258c6994":"#### Method 2:  using scikit learn","9c15fd13":"we got the same error R**2 value as above method-1","f132ab28":"#### Method 1:  munual coding","8721f0e5":"here we predict the brain wieght for given head size(cm^3)"}}