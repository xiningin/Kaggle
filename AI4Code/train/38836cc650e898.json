{"cell_type":{"b5d7ce1b":"code","0ba2152b":"code","137a6256":"code","1e24042a":"code","c0beed12":"code","78781d75":"code","b95afdbb":"code","f7549794":"code","f76fccf4":"code","e523994b":"code","240d12f9":"code","35f52e3b":"code","ab3cb1ff":"code","4baf6e0a":"code","1777073a":"code","2ff96213":"code","e091115f":"code","6fce10bd":"code","8d98e8a3":"code","510f2f2b":"code","42001841":"code","da09b50c":"code","68cbccf9":"code","f55ece27":"code","2b44fbfa":"code","1c4b988a":"code","06b586e4":"code","bb4abac1":"code","9e0a532f":"markdown","a22d898d":"markdown"},"source":{"b5d7ce1b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0ba2152b":"#Utils\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import classification_report, roc_auc_score, make_scorer, accuracy_score, roc_curve\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC \nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.cluster import KMeans\nfrom kmodes.kmodes import KModes\nfrom sklearn.preprocessing import PowerTransformer\nfrom sklearn.model_selection import StratifiedKFold\nimport lightgbm\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform as sp_uniform\nfrom scipy.stats import randint as sp_randint\nfrom scipy.stats import uniform as sp_uniform\nfrom sklearn.metrics import pairwise_distances\nfrom sklearn.metrics.pairwise import pairwise_kernels\nfrom sklearn.metrics.pairwise  import cosine_similarity\nfrom sklearn.metrics.pairwise import chi2_kernel\nfrom catboost import CatBoostClassifier\nimport seaborn as sns\nimport plotly.io as pio\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\nfrom sklearn.manifold import TSNE\nfrom sklearn.ensemble import IsolationForest","137a6256":"pd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)","1e24042a":"!pip install -q -U matplotlib==3.1.3","c0beed12":"!pip install -q -U git+https:\/\/github.com\/mljar\/mljar-supervised.git@master","78781d75":"from supervised.automl import AutoML","b95afdbb":"train= pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/train.csv', sep=',')\nsub_sample = pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/sample_submission.csv', sep=',')\ntest= pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/test.csv', sep=',')","f7549794":"train = train.set_index('id')","f76fccf4":"test = test.set_index('id')","e523994b":"fig = px.histogram(train, x=\"target\",\n                   width=600, \n                   height=400,\n                   histnorm='percent',\n                   template=\"simple_white\"\n                   )\nfig.update_layout(title=\"Target Description\", \n                  font_family=\"San Serif\",\n                  titlefont={'size': 20},\n                  showlegend=True,\n                  legend=dict(\n                      orientation=\"v\", \n                      y=1, \n                      yanchor=\"top\", \n                      x=1.0, \n                      xanchor=\"right\"\n                  )                \n                 ).update_xaxes(categoryorder='total descending')#\nfig.update_traces( \n                  marker_line_width=1.5, opacity=0.99)\nfig.show()","240d12f9":"cols = train.columns[:-1] \ndf1= train[train['target']==train.target.unique()[0]]\ndf2= train[train['target']==train.target.unique()[1]]\ndf3= train[train['target']==train.target.unique()[2]]\ndf4= train[train['target']==train.target.unique()[3]]\n\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(go.Scatter(y=df1[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[0]),\n                         line=dict(color='royalblue', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df2[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[1]),\n                         line=dict(color='red', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df3[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[2]),\n                         line=dict(color='orange', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df4[cols].mean(),\n                         x=cols,\n                         name = str(train.target.unique()[3]),\n                         line=dict(color='green', width=2, dash='solid')\n                         ))\n\n\nfig.update_layout(title='<b>Average value by Class<b>',\n                  xaxis_title='Features',\n                  yaxis_title='Average Value',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=900, height=500)\n\nfig.update_yaxes(title_text=\"<b>values<\/b>\", secondary_y=True)\n\nfig.show()    ","35f52e3b":"fig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.add_trace(go.Scatter(y=df1[cols].std(),\n                         x=cols,\n                         name = str(train.target.unique()[0]),\n                         line=dict(color='royalblue', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df2[cols].std(),\n                         x=cols,\n                         name = str(train.target.unique()[1]),\n                         line=dict(color='red', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df3[cols].std(),\n                         x=cols,\n                         name = str(train.target.unique()[2]),\n                         line=dict(color='orange', width=2, dash='solid')\n                         ))\nfig.add_trace(go.Scatter(y=df4[cols].std(),\n                         x=cols,\n                         name = str(train.target.unique()[3]),\n                         line=dict(color='green', width=2, dash='solid')\n                         ))\n\n\nfig.update_layout(title='<b>Std.Dev by value by Class<b>',\n                  xaxis_title='Features',\n                  yaxis_title='Average Value',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=900, height=500)\n\nfig.update_yaxes(title_text=\"<b>values<\/b>\", secondary_y=True)\n\nfig.show()    ","ab3cb1ff":"train['sum_row'] = train[cols].sum(axis=1)\nfig = px.box(train,x='target', y=\"sum_row\")\n\nfig.update_layout(title='<b>Sum row wise by class<b>',\n                  xaxis_title='Class',\n                  yaxis_title='Sum of features',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=900, height=500)\n\nfig.show()\ntrain = train.drop(columns=['sum_row'])","4baf6e0a":"fig3 = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig3.add_trace(go.Scatter(y=(train[cols]<0).sum(),\n                         x=cols,\n                         name = str(train.target.unique()[0]),\n                         line=dict(color='royalblue', width=2, dash='solid')\n                         ))\nfig3.update_layout(title='<b>#Negative istances by feature in training set<b>',\n                  xaxis_title='Feature',\n                  yaxis_title='#Negatives',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=1000, height=500)\nfig3.show()","1777073a":"fig3 = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig3.add_trace(go.Scatter(y=(test[cols]<0).sum(),\n                         x=cols,\n                         name = '#negative',\n                         line=dict(color='green', width=2, dash='solid')\n                         ))\nfig3.update_layout(title='<b>#Negative istances by feature in test set<b>',\n                  xaxis_title='Feature',\n                  yaxis_title='#Negatives',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=1000, height=500)\nfig3.show()","2ff96213":"df = pd.concat([train[cols], test[cols]], axis=0)","e091115f":"unique_df = pd.DataFrame(df.nunique()).reset_index()\nunique_df.columns=['features','count']\n\nfig1 = px.bar(unique_df, y='count', x=cols)\n\nfig1.update_layout(title='Feature cardinality in train+test set',\n                  xaxis_title='features',\n                  yaxis_title='# unique values',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=900, height=500)\nfig1.show()","6fce10bd":"fig3 = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig3.add_trace(go.Scatter(y=(train[cols]==0).mean(),\n                         x=cols,\n                         name = str(train.target.unique()[0]),\n                         line=dict(color='royalblue', width=2, dash='solid')\n                         ))\nfig3.update_layout(title='<b>% features=0 in training Set set<b>',\n                  xaxis_title='Feature',\n                  yaxis_title='#Negatives',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=1000, height=500)\nfig3.show()","8d98e8a3":"fig3 = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig3.add_trace(go.Scatter(y=(test[cols]==0).mean(),\n                         x=cols,\n                         name = str(train.target.unique()[0]),\n                         line=dict(color='green', width=2, dash='solid')\n                         ))\nfig3.update_layout(title='<b>% features=0 in test Set set<b>',\n                  xaxis_title='Feature',\n                  yaxis_title='#Negatives',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=1000, height=500)\nfig3.show()","510f2f2b":"corr = train[train.columns[:-2]].corr()\nfig = go.Figure(data= go.Heatmap(z=corr,\n                                 x=corr.index.values,\n                                 y=corr.columns.values,\n                                 zmin=-0.05,\n                                 zmax=0.05\n                                 )\n                )\nfig.update_layout(title_text='<b>Correlation Matrix<b>',\n                  title_x=0.5,\n                  titlefont={'size': 24},\n                  width=900, height=800,\n                  xaxis_showgrid=False,\n                  yaxis_showgrid=False,\n                  yaxis_autorange='reversed', \n                  paper_bgcolor=None,\n                  )\nfig.show()","42001841":"clf=IsolationForest(n_estimators=100, max_samples='auto', contamination=0.001, \\\n                        max_features=1.0, bootstrap=False, n_jobs=-1, random_state=22, verbose=0)\nclf.fit(train[cols])\npred = clf.predict(train[cols])\ntrain['anomaly']=pred\noutliers=train.loc[train['anomaly']==-1]\noutlier_index=list(outliers.index)","da09b50c":"pca = PCA(2)\npca.fit(train[cols])\nres=pd.DataFrame(pca.transform(train[cols]))\nZ = np.array(res)","68cbccf9":"fig2 = go.Figure()\n\n# Add traces\nfig2.add_trace(go.Scatter(x=res[0], y=res[1],\n                    mode='markers',\n                    name='Normal'))\n\nfig2.add_trace(go.Scatter(x=res.iloc[outlier_index,0], y=res.iloc[outlier_index,1],\n                    mode='markers',\n                    name='Predicted Outliers'))\n\nfig2.update_layout(title='Isolation Forest',\n                  xaxis_title='pca1',\n                  yaxis_title='pca2',\n                  titlefont={'size': 28, 'family':'Serif'},\n                  template='simple_white',\n                  showlegend=True,\n                  width=900, height=500)\n\nfig2.show()","f55ece27":"train= pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/train.csv', sep=',')\ntest= pd.read_csv('\/kaggle\/input\/tabular-playground-series-may-2021\/test.csv', sep=',')\ntrain = train.set_index('id')\ntest = test.set_index('id')","2b44fbfa":"cols = train.columns[:-1]\ntarget = train['target']\ntrain = train[cols]","1c4b988a":"# create train and test sets\nX_train, X_val, y_train, y_val = train_test_split(train, target, train_size=0.75, test_size=0.25, stratify=target, random_state=2)","06b586e4":"# train using Explain\nautoml = AutoML(mode=\"Explain\",ml_task = 'multiclass_classification',eval_metric='logloss', explain_level=2)\nautoml.fit(X_train, y_train)","bb4abac1":"automl.report()","9e0a532f":"### Load Data","a22d898d":"### Utils"}}