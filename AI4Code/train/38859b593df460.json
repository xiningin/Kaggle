{"cell_type":{"4ae1e8dc":"code","d0be077e":"code","7a34b6bd":"code","11288003":"code","e9fa4094":"code","10be5c3b":"code","e5df1365":"code","c2345524":"code","2177385e":"code","b2b45ec5":"code","887b62b4":"code","43a7bbb4":"code","cd38d439":"code","f242777f":"code","cdb18a2d":"code","0e37e4af":"code","23ecefd1":"code","513083d5":"code","7a42085b":"code","f65c10bb":"code","e15c19f4":"code","8a0cf3ad":"code","b266a9c2":"code","7efa873e":"code","74a600bd":"code","830d42ea":"code","92fca56c":"code","01e648b2":"code","4479c593":"code","ccce051d":"code","2ecb3426":"code","4c33b4ff":"code","423ba366":"code","55b79f57":"code","799c2449":"code","54864234":"code","1d8eb38b":"code","a4fd6a32":"code","13d51d44":"code","e241b51b":"code","88a8efba":"code","f8d0e6ee":"code","539d97b8":"code","1c360d0c":"code","3ef57b6e":"code","8cd322e1":"code","e469b755":"code","5b9610eb":"markdown","9f9fd395":"markdown","2d77aa4a":"markdown","13c9702e":"markdown","6c6c7f97":"markdown","4691a92b":"markdown","46d4f123":"markdown","e2111e06":"markdown"},"source":{"4ae1e8dc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","d0be077e":"df = pd.read_csv('..\/input\/eval-lab-1-f464-v2\/train.csv')\ntest = pd.read_csv('..\/input\/eval-lab-1-f464-v2\/test.csv')","7a34b6bd":"df.head(10)","11288003":"df.isnull().sum()","e9fa4094":"df['rating'].value_counts()","10be5c3b":"df = df.fillna(value = df.mean())\ntest = test.fillna(value=df.mean())","e5df1365":"df.drop(['id'],axis=1,inplace=True)\ndf.drop_duplicates(inplace=True)","c2345524":"sns.boxplot(x=\"type\", y=\"rating\", data=df)","2177385e":"sns.regplot(x=\"feature11\", y=\"rating\", data=df)","b2b45ec5":"df.corr()","887b62b4":"# Compute the correlation matrix\ncorr = df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(12, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n\nplt.show()\n","43a7bbb4":"X = df.drop('rating',axis=1).copy()\nY = df[\"rating\"].copy()","cd38d439":"X.head()","f242777f":"sns.distplot(df['feature11'],kde = False)","cdb18a2d":"numerical_features = list(X.columns)\nnumerical_features.remove('type')\ncategorical_features = [\"type\"]","0e37e4af":"from sklearn.preprocessing import StandardScaler\ns = StandardScaler()\nX[numerical_features]=s.fit_transform(X[numerical_features])\ntest[numerical_features]=s.transform(test[numerical_features])","23ecefd1":"#one hot encoding\nX = pd.get_dummies(data = X, columns = [\"type\"])\ntest = pd.get_dummies(data=test,columns=['type'])","513083d5":"from sklearn.model_selection import train_test_split","7a42085b":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.3,stratify=Y)","f65c10bb":"X_train.columns","e15c19f4":"Y_train.value_counts()","8a0cf3ad":"Y_test.value_counts()","b266a9c2":"from sklearn.ensemble import ExtraTreesClassifier, ExtraTreesRegressor,RandomForestClassifier,RandomForestRegressor,GradientBoostingRegressor,AdaBoostRegressor, AdaBoostClassifier,GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import ExtraTreeClassifier, ExtraTreeRegressor\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier,MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier,KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error","7efa873e":"mlp = MLPRegressor(hidden_layer_sizes=(15,20,40,20,15),alpha=0.0001,batch_size=X_train.shape[0],random_state=100,max_iter=5000)\nmlp.fit(X_train,Y_train)\nnp.sqrt(mean_squared_error(Y_test,mlp.predict(X_test).round()))","74a600bd":"rf = RandomForestClassifier(n_estimators = 2000, random_state=100)\nrf.fit(X_train,Y_train)\nnp.sqrt(mean_squared_error(Y_test,rf.predict(X_test)))","830d42ea":"svc = SVC(C=1.0,kernel='rbf',degree=3,random_state=100)\nsvc.fit(X_train,Y_train)\nnp.sqrt(mean_squared_error(Y_test,svc.predict(X_test)))","92fca56c":"gdb = GradientBoostingRegressor(n_estimators=2000,random_state=100)\ngdb.fit(X_train,Y_train)\nnp.sqrt(mean_squared_error(Y_test,gdb.predict(X_test).round()))","01e648b2":"gdbc = GradientBoostingClassifier(n_estimators=2000,random_state=100)\ngdbc.fit(X_train,Y_train)\nnp.sqrt(mean_squared_error(Y_test,gdbc.predict(X_test).round()))","4479c593":"adb = AdaBoostRegressor(n_estimators=2000,random_state=100)\nadb.fit(X_train,Y_train)\nnp.sqrt(mean_squared_error(Y_test,adb.predict(X_test).round()))","ccce051d":"adbc = AdaBoostClassifier(n_estimators=2000,random_state=100)\nadbc.fit(X_train,Y_train)\nnp.sqrt(mean_squared_error(Y_test,adbc.predict(X_test).round()))","2ecb3426":"rfr =  RandomForestRegressor(n_estimators=2000, random_state=100)\nrfr.fit(X_train,Y_train)\nnp.sqrt(mean_squared_error(Y_test,rfr.predict(X_test).round()))","4c33b4ff":"etc = ExtraTreesClassifier(n_estimators = 2000,random_state=504)\netc.fit(X_train,Y_train)\nnp.sqrt(mean_squared_error(Y_test,etc.predict(X_test).round()))","423ba366":"# Best result so far on n_estimators = 2600,random_state = 120\n# Second best on changing the above two values to n_estimators = 2400, random state = 504","55b79f57":"etr = ExtraTreesRegressor(n_estimators = 2600,random_state=120)\netr.fit(X_train,Y_train)\nnp.sqrt(mean_squared_error(Y_test,etr.predict(X_test).round()))","799c2449":"knnc = KNeighborsClassifier(15)\nknnc.fit(X_train,Y_train)\nnp.sqrt(mean_squared_error(Y_test,knnc.predict(X_test).round()))","54864234":"knn = KNeighborsRegressor(15)\nknn.fit(X_train,Y_train)\nnp.sqrt(mean_squared_error(Y_test,knn.predict(X_test).round()))","1d8eb38b":"# Trien mean and mode based classification","a4fd6a32":"from scipy.stats import mode","13d51d44":"rgrs = [('mlp',mlp),('rf',rfr),('adb',adb),('gdb',gdb),('knn',knn),('rfc',rf),]\nweights =[4,10,2,0,3,5]\n#weights = [1,1,1,1,1,1]\ndef voting_predict(X_train,Y_train,X_test,rgrs,weights):\n    predictions = []\n    for i in range(len(rgrs)):\n        if(weights[i]!=0):\n            predictions.append(weights[i]*rgrs[i][1].fit(X_train,Y_train).predict(X_test).round())\n    predictions = np.array(predictions)\n    mean_pred = np.sum(predictions,axis=0)\/np.sum(weights)\n    #mean_pred = mode(predictions,axis=0)\n    #mean_pred = np.array(mean_pred)[0][0]\n    return mean_pred.round()","e241b51b":"mean_pred = voting_predict(X_train,Y_train,X_test,rgrs,weights)","88a8efba":"np.sqrt(mean_squared_error(Y_test,mean_pred))","f8d0e6ee":"#pred = voting_predict(X,Y,(test.drop('id',axis=1)),rgrs,weights)\npred = etr.fit(X,Y).predict(test.drop('id',axis=1))","539d97b8":"pred = pred.round()\npred = np.array(list(map(int,pred)))","1c360d0c":"sub_csv = pd.DataFrame({'id':test['id'],'rating':pred},columns = ['id','rating'])","3ef57b6e":"sub_csv['rating'].value_counts()","8cd322e1":"sub_csv.to_csv('submission16.csv',index=False)","e469b755":"#pd.read_csv('submission-15.csv')['rating'].value_counts()","5b9610eb":"### Standard Scaling","9f9fd395":"### Voting Classifier","2d77aa4a":"### Training and Test Data split","13c9702e":"### Fitting to various models","6c6c7f97":"### Fill missing values; Drop duplicate rows","4691a92b":"#### Extra Trees Regressor","46d4f123":"### Selecting best result out of Voting Classifier\/ ExtraTreeRegressor","e2111e06":"### Compare to last best result"}}