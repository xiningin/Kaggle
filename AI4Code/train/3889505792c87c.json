{"cell_type":{"560219b6":"code","52ce076b":"code","a6e07da2":"code","2b8f761c":"code","db8ecf9a":"code","9ad50be7":"code","f19d8940":"code","8416ff15":"code","7371dc22":"code","e4e89c48":"code","bf1e23f4":"code","8d7a6023":"code","429b935e":"code","662dedd7":"code","07ba4bd0":"code","3ff8346b":"code","2d359e45":"code","58fc78fe":"code","5169e688":"code","4630c80e":"code","7ba7257e":"code","eba30cd9":"code","530c2ec8":"code","fd5a6371":"code","a272ffa1":"code","bc3630a7":"code","3793ce30":"code","27b839d1":"code","e62156b3":"code","4b090e34":"code","2dffa6bd":"code","3f3cff1b":"code","7613a62c":"code","d4fdb08a":"code","9692fc1a":"code","09d49f84":"code","e8c0931a":"code","01bf97bc":"code","9807be58":"code","7022526a":"code","d79965cf":"code","94b3db71":"code","6542c7e0":"markdown","d3505bad":"markdown","4e839b5c":"markdown","e44eb482":"markdown","c03a05dd":"markdown"},"source":{"560219b6":"import numpy as np, pandas as pd\nimport ast \nfrom sklearn import linear_model\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')\nimport spacy\nfrom nltk import Tree\nen_nlp = spacy.load('en')\nfrom nltk.stem.lancaster import LancasterStemmer\nst = LancasterStemmer()\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.ensemble import RandomForestClassifier\nimport xgboost as xgb\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV","52ce076b":"data = pd.read_csv(\"..\/input\/train_detect_sent.csv\",encoding=\"latin-1\")#.reset_index(drop=True)","a6e07da2":"data.shape","2b8f761c":"data.head(3)","db8ecf9a":"data=data.drop('Unnamed: 0',axis=1)","9ad50be7":"data.head()","f19d8940":"ast.literal_eval(data[\"sentences\"][0])","8416ff15":"data = data[data[\"sentences\"].apply(lambda x: len(ast.literal_eval(x)))<11].reset_index(drop=True)","7371dc22":"def create_features(data):\n    train = pd.DataFrame()\n     \n    for k in range(len(data[\"euclidean_dis\"])):\n        dis = ast.literal_eval(data[\"euclidean_dis\"][k])\n        for i in range(len(dis)):\n            train.loc[k, \"column_euc_\"+\"%s\"%i] = dis[i]\n    \n    print(\"Finished\")\n    \n    for k in range(len(data[\"cosine_sim\"])):\n        dis = ast.literal_eval(data[\"cosine_sim\"][k].replace(\"nan\",\"1\"))\n        for i in range(len(dis)):\n            train.loc[k, \"column_cos_\"+\"%s\"%i] = dis[i]\n            \n    train[\"target\"] = data[\"target\"]\n    return train","e4e89c48":"train = create_features(data)","bf1e23f4":"del data","8d7a6023":"train.head(3)","429b935e":"# train.fillna(10000, inplace=True)","662dedd7":"train.head(3).transpose()","07ba4bd0":"train.apply(max, axis = 0)","3ff8346b":"subset1 = train.iloc[:,:10].fillna(60)\nsubset2 = train.iloc[:,10:].fillna(1)","2d359e45":" subset1.head(3)","58fc78fe":" subset2.head(3)","5169e688":"train2 = pd.concat([subset1, subset2],axis=1, join_axes=[subset1.index])","4630c80e":"train2.head(3)","7ba7257e":"train2.apply(max, axis = 0)","eba30cd9":"scaler = MinMaxScaler()\nX = scaler.fit_transform(train2.iloc[:,:-1])","530c2ec8":"X","fd5a6371":"train_x, test_x, train_y, test_y = train_test_split(X,\ntrain.iloc[:,-1], train_size=0.8, random_state = 5)","a272ffa1":"mul_lr = linear_model.LogisticRegression(multi_class='multinomial', solver='newton-cg')\nmul_lr.fit(train_x, train_y)\n\nprint(\"Multinomial Logistic regression Train Accuracy : \", metrics.accuracy_score(train_y, mul_lr.predict(train_x)))\nprint(\"Multinomial Logistic regression Test Accuracy : \", metrics.accuracy_score(test_y, mul_lr.predict(test_x)))\n","bc3630a7":"predicted = pd.read_csv(\"..\/input\/train_detect_sent.csv\",encoding=\"latin-1\").reset_index(drop=True)","3793ce30":"predicted = predicted[predicted[\"sentences\"].apply(lambda x: len(ast.literal_eval(x)))<11].reset_index(drop=True)","27b839d1":"predicted.shape","e62156b3":"def get_columns_from_root(train):\n    \n    for i in range(train.shape[0]):\n        if len(ast.literal_eval(train[\"root_match_idx\"][i])) == 0: pass\n        \n        else:\n            for item in ast.literal_eval(train[\"root_match_idx\"][i]):\n                train.loc[i, \"column_root_\"+\"%s\"%item] = 1\n    return train","4b090e34":"predicted = get_columns_from_root(predicted)","2dffa6bd":"predicted.head(3).transpose()","3f3cff1b":"subset3 = predicted[[\"column_root_0\",\"column_root_1\",\"column_root_2\",\"column_root_3\",\"column_root_4\",\"column_root_5\",\\\n             \"column_root_6\",\"column_root_7\",\"column_root_8\",\"column_root_9\"]]","7613a62c":"subset3.fillna(0, inplace=True)","d4fdb08a":"train3 = pd.concat([subset3, train2],axis=1, join_axes=[subset3.index])","9692fc1a":"train3.head(3).transpose()","09d49f84":"train3 = train3[[\"column_root_0\",\"column_root_1\",\"column_root_2\",\"column_root_3\",\"column_root_4\",\"column_root_5\",\\\n             \"column_root_6\",\"column_root_7\",\"column_root_8\",\"column_root_9\", \"column_cos_0\",\"column_cos_1\",\\\n           \"column_cos_2\",\"column_cos_3\",\"column_cos_4\",\"column_cos_5\",\\\n             \"column_cos_6\",\"column_cos_7\",\"column_cos_8\",\"column_cos_9\", \"target\"]]","e8c0931a":"train_x, test_x, train_y, test_y = train_test_split(train3.iloc[:,:-1],\ntrain3.iloc[:,-1], train_size=0.8, random_state = 5)","01bf97bc":"mul_lr = linear_model.LogisticRegression(multi_class='multinomial', solver='newton-cg')\nmul_lr.fit(train_x, train_y)\n\nprint(\"Multinomial Logistic regression Train Accuracy : \", metrics.accuracy_score(train_y, mul_lr.predict(train_x)))\nprint(\"Multinomial Logistic regression Test Accuracy : \", metrics.accuracy_score(test_y, mul_lr.predict(test_x)))\n","9807be58":"rf = RandomForestClassifier(min_samples_leaf=8, n_estimators=60)\nrf.fit(train_x, train_y)\n\nprint(\"Multinomial Logistic regression Train Accuracy : \", metrics.accuracy_score(train_y, rf.predict(train_x)))\nprint(\"Multinomial Logistic regression Test Accuracy : \", metrics.accuracy_score(test_y, rf.predict(test_x)))","7022526a":"model = xgb.XGBClassifier()\nparam_dist = {\"max_depth\": [3,5,10],\n              \"min_child_weight\" : [1,5,10],\n              \"learning_rate\": [0.07, 0.1,0.2],\n               }\n\n# run randomized search\ngrid_search = GridSearchCV(model, param_grid=param_dist, cv = 3, \n                                   verbose=5, n_jobs=-1)\ngrid_search.fit(train_x, train_y)","d79965cf":"grid_search.best_estimator_","94b3db71":"xg = xgb.XGBClassifier(max_depth=5)\nxg.fit(train_x, train_y)\n\nprint(\"Multinomial Logistic regression Train Accuracy : \", metrics.accuracy_score(train_y, xg.predict(train_x)))\nprint(\"Multinomial Logistic regression Test Accuracy : \", metrics.accuracy_score(test_y, xg.predict(test_x)))","6542c7e0":"### Random Forest","d3505bad":"### Standardize","4e839b5c":"### Fitting Multinomial Logistic Regression","e44eb482":"### XgBoost","c03a05dd":"### Logistic-Regression with Root Match feature"}}