{"cell_type":{"2c3f9c9b":"code","74853ca4":"code","0b7afc62":"code","9c07d4dd":"code","2fa0066d":"code","6349de1c":"code","7a8db3aa":"code","ed70246a":"markdown","a15f7de1":"markdown","fc1be1e2":"markdown"},"source":{"2c3f9c9b":"import covid19_tools as c19\nimport cdc_clinical_trials_api as cdc\n\nimport pandas as pd\nimport numpy as np\nimport datetime\n\nfrom IPython.core.display import display, HTML\nimport html\n\napi_output = cdc.run_query()\nclinical_trials = cdc.json_to_df(api_output)\nintervent = clinical_trials[clinical_trials.StudyType == 'Interventional'].copy()\n\nstop_words = ['of', 'and', 'is', 'in', 'for', 'at', 'or',\n              'standard', 'care', 'oral', 'treatment',\n              'tablet', 'tablets', 'human', 'injection', 'therapy',\n              'placebo', 'placebos', 'cells', 'mg', 'with', 'usual',\n              'inhalation', 'a', 'group', 'control', 'gas', '1', '2',\n              'iv', 'intravenous', 'recombinant', 'health', 'sterile',\n              'information', 'solution', 'medicine', 'medicines',\n              'sulfate', 'vaccine', 'normal', 'blood', 'dose',\n              'convalescent', 'infusion', 'combined', 'training',\n              'medical', 'practice', 'phosphate', 'day', 'days',\n              'hydrochloride', 'saline', 'device', 'chinese',\n              'intensive', 'therapy', 'high', 'best', 'sars-cov',\n              'sars', 'cov', 'based', 'derived', 'low', 'anti',\n              'alpha', 'beta', 'non', 'use', 'n', 'i', 'granules',\n              'via'\n             ]\n\ntherapies = (intervent.InterventionName\n             .str.lower()\n             .str.replace('vitamin ', 'vitamin_') # Trick for joining vitamins\n             .str.replace(' acid', '_acid')\n             .str.replace(' blocker', '_blocker')\n             .str.replace(r'uc\\-mscs|uc mscs', 'mscs')\n             .str.replace('car-nk', 'nk')\n             .str.replace(r'\\b\\d+\\b', ' ')\n             .str.replace('abidol', 'arbidol') # This appears to be a typo in the data\n             .str.replace('stem ', 'stem_')\n             .str.replace('nitric oxide', 'nitric_oxide') # Join compound names\n             .str.replace(r';|\/|,|\\.|\\+|-|:|%|\\(|\\)', ' ')\n             .str.replace('|'.join([f'\\\\b{sw}\\\\b' for sw in stop_words]), ' ')\n             .str.split(expand=True)\n             .stack()\n             .str.strip()\n             .value_counts())\n\nfor therapy in therapies[therapies > 2].index:\n    intervent.loc[intervent.InterventionName\n                        .str.lower()\n                        .str.replace('-', ' ')\n                        .str.contains(r'\\b' + therapy.replace('_', ' ')),\n                  f'tag_therapy_{therapy}'\n                  ] = True\n    intervent[f'tag_therapy_{therapy}'] = intervent[f'tag_therapy_{therapy}'].fillna(False)","74853ca4":"html_string = ''\nabbr = ['nk', 'mscs']\nfor therapy in therapies[therapies > 2].index:\n    relevant_trials = intervent[intervent[f'tag_therapy_{therapy}']]\n    if therapy in abbr:\n        therapy = therapy.upper()\n    else:\n        therapy = therapy.title()\n    html_string += f'<p><h2>{therapy.replace(\"_\", \" \")}<\/h2><\/p>'\n    html_string += f'{len(relevant_trials)} clinical trials found<br>'\n    html_string += '<table><tr><th>Title<\/th><th>Interventions<\/th>'\n    html_string += '<th>Allocation<\/th><th>Masking<\/th><th>First Submission Date<\/th><\/tr>'\n\n    for row in relevant_trials.itertuples():\n        html_string += f'<tr>'\n        html_string += f'<td>{html.escape(row.OfficialTitle)}<\/td>'\n        html_string += f'<td>'\n        for inv in row.InterventionName.split('; '):\n            html_string += f'{inv}<br>'\n        html_string += '<\/td>'\n        try:\n            html_string += f'<td>{html.escape(row.DesignAllocation)}<\/td>'\n        except:\n            html_string += '<td><\/td>'\n        try:\n            html_string += f'<td>{html.escape(row.DesignMasking)}<\/td>'\n        except:\n            html_string += '<td><\/td>'\n        try:\n            html_string += f'<td>{html.escape(row.StudyFirstSubmitDate)}<\/td>'\n        except:\n            html_string += '<td><\/td>'\n        html_string += '<\/tr>'\n    html_string += '<\/table><br><br>'\ndisplay(HTML(html_string))","0b7afc62":"meta = c19.load_metadata('..\/input\/CORD-19-research-challenge\/metadata.csv')\nmeta, _ = c19.add_tag_covid19(meta)\nmeta = meta[meta.tag_disease_covid19]\nprint(f'filtering down to {len(meta)} papers on Covid-19')","9c07d4dd":"full_text = c19.load_full_text(meta, '..\/input\/CORD-19-research-challenge')","2fa0066d":"full_text_df = pd.DataFrame(full_text)","6349de1c":"html_string = ''\nfor therapy in therapies[therapies > 2].index:\n    therapy_df = full_text_df[full_text_df.body_text.astype(str)\n                              .str.lower()\n                              .str.contains(r'\\b' + therapy.replace('_', ' ') + r'\\b')]\n    html_string += f'<h2>{therapy.title()}<\/h2>'\n    html_string += f'<i>found {len(therapy_df)} papers<\/i><br>'\n\n    for row in therapy_df.itertuples():\n        url = meta[meta.sha == row.paper_id].doi.values[0]\n        html_string += f'<b><a href=\"{url}\">{html.escape(row.metadata[\"title\"])}<\/a><\/b>, '\n        try:\n            authors = row.metadata['authors'][0]['last']\n            if authors == '':\n                authors = 'Authors not listed'\n            elif len(row.metadata['authors']) > 1:\n                authors += ' et al'\n        except:\n            authors = 'Authors not listed'\n        html_string += f'{authors}'\n        html_string += '<ul>'\n        for item in row.body_text:\n            sentences = item['text'].split('. ')\n            for s in sentences:\n                if therapy.replace('_', ' ') in s.lower():\n                    html_string += f'<li>{html.escape(s)}<\/li>'\n        html_string += '<\/ul>'\ndisplay(HTML(html_string))","7a8db3aa":"timestamp = datetime.datetime.now().date().isoformat()\nintervent.to_csv(f'clinical_trials_{timestamp}.csv', index=False)","ed70246a":"# Therapeutics in CORD-19\n\nNow iterate over the names identified in the trials database to find additional info in CORD-19.","a15f7de1":"# Therapeutics in trials database","fc1be1e2":"# COVID-19 Treatments being trialled\n\n**Aim**: match Covid-19 interventional trials to relevant research papers.\n\n**Method**: this uses the CDC Clinical Trials API to find treatments that are being trialled, see:\n\n- https:\/\/www.kaggle.com\/ajrwhite\/covid-19-clinical-trials-api-access (Notebook)\n- https:\/\/www.kaggle.com\/ajrwhite\/cdc-clinical-trials-api (Utility Script)"}}