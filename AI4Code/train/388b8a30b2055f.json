{"cell_type":{"3bd9c6fa":"code","f7985f7f":"code","61261ef3":"code","204741a2":"code","6edaaad2":"code","96869bf3":"code","b1f3aef5":"code","88855831":"code","08e77cf0":"code","edf2b585":"code","c28a487c":"code","202b8063":"code","7c8defb7":"code","7d23b04e":"code","00c631d1":"code","5a04dd9b":"code","887e5770":"code","e6f6cb4b":"code","584ac255":"code","daee2df2":"code","7ac1d15f":"code","49d0a827":"code","e9aa8e48":"code","3298f9e7":"code","70037934":"code","7517116c":"code","0c6141b7":"code","5865b882":"code","f8cee4ba":"code","4f67a720":"code","2133ddbc":"code","291ea6ce":"code","320c5b6d":"code","1af5e374":"code","57368727":"markdown","818c669c":"markdown","221fb5a8":"markdown","fe34606b":"markdown","f93f16e3":"markdown","aa8365cf":"markdown","d64752e0":"markdown","9984d489":"markdown","b511d501":"markdown","7d39f490":"markdown","8a920293":"markdown","d94cfa91":"markdown","b6624029":"markdown"},"source":{"3bd9c6fa":"import pandas as pd\nimport numpy as np\nfrom tqdm.auto import tqdm\nfrom bs4 import BeautifulSoup\nfrom collections import defaultdict\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n\nimport re \nimport scipy\nfrom scipy import sparse\n\nfrom IPython.display import display\nfrom pprint import pprint\nfrom matplotlib import pyplot as plt \n\nimport time\nimport scipy.optimize as optimize\nimport warnings\nwarnings.filterwarnings(\"ignore\")\npd.options.display.max_colwidth=300\npd.options.display.max_columns = 100\n\nfrom sklearn.model_selection import train_test_split\nfrom nltk.tokenize import word_tokenize\nfrom sklearn.linear_model import Ridge, Lasso, BayesianRidge\nfrom sklearn.svm import SVR","f7985f7f":"df_train = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-classification-challenge\/train.csv\")\n# df_test = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-classification-challenge\/test.csv\")\n# df_test_label = pd.read_csv(\"..\/input\/jigsaw-toxic-comment-classification-challenge\/test_labels.csv\").replace(-1,0)\ndf_sub = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\")","61261ef3":"df_train.head(2)","204741a2":"# Create a score that measure how much toxic is a comment\ncat_mtpl = {'obscene': 0.16, 'toxic': 0.32, 'threat': 1.5, \n            'insult': 0.64, 'severe_toxic': 1.5, 'identity_hate': 1.5}\n\nfor category in cat_mtpl:\n    df_train[category] = df_train[category] * cat_mtpl[category]\n\ndf_train['score'] = df_train.loc[:, 'toxic':'identity_hate'].sum(axis=1)\n\ndf_train['y'] = df_train['score']\n\nmin_len = (df_train['y'] > 0).sum()  # len of toxic comments\ndf_y0_undersample = df_train[df_train['y'] == 0].sample(n=min_len, random_state=201)  # take non toxic comments\ndf_train_new = pd.concat([df_train[df_train['y'] > 0], df_y0_undersample])  # make new df\ndf_train_new.head(2)","6edaaad2":"df_train = df_train.rename(columns={'comment_text':'text'})","96869bf3":"def text_cleaning(text):\n    '''\n    Cleans text into a basic form for NLP. Operations include the following:-\n    1. Remove special charecters like &, #, etc\n    2. Removes extra spaces\n    3. Removes embedded URL links\n    4. Removes HTML tags\n    5. Removes emojis\n    \n    text - Text piece to be cleaned.\n    '''\n    template = re.compile(r'https?:\/\/\\S+|www\\.\\S+') #Removes website links\n    text = template.sub(r'', text)\n    \n    soup = BeautifulSoup(text, 'lxml') #Removes HTML tags\n    only_text = soup.get_text()\n    text = only_text\n    \n    emoji_pattern = re.compile(\"[\"\n                               u\"\\U0001F600-\\U0001F64F\"  # emoticons\n                               u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n                               u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n                               u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n                               u\"\\U00002702-\\U000027B0\"\n                               u\"\\U000024C2-\\U0001F251\"\n                               \"]+\", flags=re.UNICODE)\n    text = emoji_pattern.sub(r'', text)\n    \n    text = re.sub(r\"[^a-zA-Z\\d]\", \" \", text) #Remove special Charecters\n    text = re.sub(' +', ' ', text) #Remove Extra Spaces\n    text = text.strip() # remove spaces at the beginning and at the end of string\n\n    return text","b1f3aef5":"tqdm.pandas()\ndf_train['text'] = df_train['text'].progress_apply(text_cleaning)","88855831":"df = df_train.copy()","08e77cf0":"df['y'].value_counts()","edf2b585":"df['y'].value_counts(normalize=True)","c28a487c":"min_len = (df['y'] >= 0.1).sum()\ndf_y0_undersample = df[df['y'] == 0].sample(n=min_len * 2, random_state=402)\ndf = pd.concat([df[df['y'] >= 0.1], df_y0_undersample])\ndf['y'].value_counts()","202b8063":"vec = TfidfVectorizer(min_df= 3, max_df=0.5, analyzer = 'char_wb', ngram_range = (3,5))\nX = vec.fit_transform(df['text'])\nX","7c8defb7":"# vec_c = CountVectorizer(min_df= 3, max_df=0.5, analyzer = 'char_wb', ngram_range = (3,5))\n# X_c = vec_c.fit_transform(df['text'])\n# X_c","7d23b04e":"%%time\nmodel = Ridge(alpha=0.5)\nmodel.fit(X, df['y'])","00c631d1":"%%time\nl_model = Ridge(alpha=1.)\nl_model.fit(X, df['y'])","5a04dd9b":"%%time\ns_model = Ridge(alpha=2.)\ns_model.fit(X, df['y'])","887e5770":"# %%time\n# o_model = Ridge(alpha=2.)\n# o_model.fit(X_c, df['y'])\n\n# p1 = o_model.predict(X_less_toxic)\n# p2 = o_model.predict(X_more_toxic)\n# # Validation Accuracy\n# (p1 < p2).mean()","e6f6cb4b":"df_val = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv\")","584ac255":"df_val.head()","daee2df2":"tqdm.pandas()\ndf_val['less_toxic'] = df_val['less_toxic'].progress_apply(text_cleaning)\ndf_val['more_toxic'] = df_val['more_toxic'].progress_apply(text_cleaning)","7ac1d15f":"X_less_toxic = vec.transform(df_val['less_toxic'])\nX_more_toxic = vec.transform(df_val['more_toxic'])","49d0a827":"p1 = model.predict(X_less_toxic)\np2 = model.predict(X_more_toxic)","e9aa8e48":"# Validation Accuracy\n(p1 < p2).mean()","3298f9e7":"p1 = l_model.predict(X_less_toxic)\np2 = l_model.predict(X_more_toxic)\n# Validation Accuracy\n(p1 < p2).mean()","70037934":"p1 = s_model.predict(X_less_toxic)\np2 = s_model.predict(X_more_toxic)\n# Validation Accuracy\n(p1 < p2).mean()","7517116c":"df_sub = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\")","0c6141b7":"tqdm.pandas()\ndf_sub['text'] = df_sub['text'].progress_apply(text_cleaning)","5865b882":"X_test = vec.transform(df_sub['text'])\np3 = model.predict(X_test)","f8cee4ba":"p4 = l_model.predict(X_test)\np5 = s_model.predict(X_test)\n# p6 = o_model.predict(X_test)","4f67a720":"df_sub['score'] = (p3 + p4 + p5) \/ 3.","2133ddbc":"df_sub['score'].count()","291ea6ce":"df_sub['score'] = df_sub['score'] ","320c5b6d":"# 9 comments will fail if compared one with the other\ndf_sub['score'].nunique()","1af5e374":"df_sub[['comment_id', 'score']].to_csv(\"submission.csv\", index=False)","57368727":"<h2>Prepare submission file<\/h2>","818c669c":"# Prepare validation data","221fb5a8":"<h2>Text cleaning<\/h2>","fe34606b":"<h1>Fit Ridge<\/h1>","f93f16e3":"# Prepare submission data ","aa8365cf":"<h2>Text cleaning<\/h2>","d64752e0":"# Undersampling","9984d489":"# Prepare train data","b511d501":"# TF-IDF","7d39f490":"<h2>Prediction<\/h2>","8a920293":"<h2>\u30100.860\u3011TFIDF_Ridge_simple_baseline<\/h2>\n\nData from [Toxic Comment Classification Challenge](https:\/\/www.kaggle.com\/c\/jigsaw-toxic-comment-classification-challenge)\n","d94cfa91":"# Import Library","b6624029":"<h3>Text Cleaning<\/h3>"}}