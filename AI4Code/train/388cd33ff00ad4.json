{"cell_type":{"ca6a4dbf":"code","54c98b0c":"code","b8cca8e8":"code","65f7dd4b":"code","915862be":"code","2578a15f":"code","fa443ba2":"code","4fa4fdab":"code","44930f5a":"code","2d495165":"code","4be3537c":"code","1cffbf5c":"code","811a40b2":"code","c5537333":"code","3da9bf87":"code","d8c71f76":"code","5f31258c":"code","90f63261":"code","43e5bc58":"code","5c4ec823":"code","b73ecd2a":"code","8aedc650":"code","a2eca98d":"code","d3d70487":"code","30d9cb16":"code","dbe51686":"code","3ce85940":"code","c42d7dd9":"code","61a3d87b":"code","4afd2616":"code","09f2735e":"code","a2749433":"code","cef50dbe":"code","b6f7299a":"code","caa3596b":"code","1f8dfa7f":"code","d7ce20aa":"code","1092f3e6":"code","b103b6f1":"code","11e6d3a0":"code","a0a1ee05":"code","8ee11be8":"code","4b0bea4d":"code","42a73cf2":"code","15c92854":"code","42ebc58d":"code","14c5997a":"code","0346501c":"code","9f50d22e":"code","a16d19a3":"code","e42c2bda":"code","205c7293":"code","7e5e3b5d":"code","2c4b128f":"code","1e4af7d4":"code","687eaf4c":"code","50192567":"code","462a4644":"code","db24013a":"code","c4b39872":"code","aa46b015":"code","fe15d434":"code","efad60af":"code","a4344b2d":"code","7672322d":"code","3a25c0d4":"code","c3d8453b":"code","9873882b":"code","31b4b01a":"code","febdb45e":"code","cca94628":"code","1f5c4993":"code","d5305013":"code","2cc62435":"code","453e32bb":"code","e075d5b5":"code","76a0cfff":"code","3fca3638":"code","8d4d646e":"code","bc2e7c72":"code","265e7a1e":"code","11344e5f":"code","227cef28":"code","b10e77da":"code","7be5a9b4":"markdown","bda83039":"markdown","af163620":"markdown","773b1481":"markdown","851ffba7":"markdown","7495800f":"markdown","5cb6d8ef":"markdown","4f4b492a":"markdown","8a980fc9":"markdown","3b363a14":"markdown","e54f8740":"markdown","10048822":"markdown","fb62da8c":"markdown","c66fe9f8":"markdown","36194a1e":"markdown","8a6db1bf":"markdown","6e8a2ab1":"markdown","a12db271":"markdown","2f684378":"markdown","e93a601e":"markdown","6d8c357a":"markdown","5b2e38a1":"markdown","461ab661":"markdown","11cfe4c1":"markdown","73084abe":"markdown"},"source":{"ca6a4dbf":"#Import TensorFlow\nimport tensorflow as tf\nprint(tf.__version__)","54c98b0c":"# Create tensors with tf.constant()\nscalar = tf.constant(7)\nscalar","b8cca8e8":"#Check the number of dimensions of a tensor (ndim stands for number of dimensions)\nscalar.ndim","65f7dd4b":"#Create a vector\nvector = tf.constant([10,10])\nvector","915862be":"#Check dimension of our vector\nvector.ndim","2578a15f":"#Create a matrix (has more than 1 dimension)\nmatrix = tf.constant([[10,7],\n                      [7,10]])\nmatrix","fa443ba2":"matrix.ndim","4fa4fdab":"#Create another matrix\nanother_matrix = tf.constant([[10.,7.],\n                              [3.,2.],\n                              [8.,9.]], dtype=tf.float16) #specify the datatype\nanother_matrix","44930f5a":"#Number of dims of another_matrix\nanother_matrix.ndim","2d495165":"#Lets create a Tensor\ntensor = tf.constant([[[1,2,3],\n                       [4,5,6]],\n                       [[7,8,9],\n                        [10,11,12]],\n                       [[13,14,15],\n                        [16,17,18]]])\ntensor","4be3537c":"tensor.ndim","1cffbf5c":"#Create the same tensor with tf.Variable() as above\nchangeable_tensor = tf.Variable([10,7])\nunchangeable_tensor = tf.constant([10,7])\nchangeable_tensor, unchangeable_tensor","811a40b2":"#Lets try to change one of the elements in changeable tensor\nchangeable_tensor[0].assign(7)\nchangeable_tensor","c5537333":"#Create two random (but the same) tensors\nrandom_1 = tf.random.Generator.from_seed(42)\nrandom_1 = random_1.normal(shape=(3,2))\nrandom_2 = tf.random.Generator.from_seed(42)\nrandom_2 = random_2.normal(shape=(3,2))\n\n#Are they equal?\nrandom_1,random_2, random_1==random_2","3da9bf87":"# Shuffle a tensor (valuable for when you want to shuffle your data so inherent order doesn't affect learning)\nnot_shuffled = tf.constant([[10,7],\n                            [3,4],\n                            [2,5]])\nnot_shuffled","d8c71f76":"#Shuffle our non-shuffled tensor\ntf.random.shuffle(not_shuffled)","5f31258c":"tf.random.set_seed(42) #Global Random Seed\ntf.random.shuffle(not_shuffled, seed=42) #Operational Level Random Seed","90f63261":"tf.random.shuffle(not_shuffled, seed=42)","43e5bc58":"#Create a Tensor of all ones\ntf.ones([10,7])","5c4ec823":"#Create a Tensor of all zeros\ntf.zeros(shape=(3,4))","b73ecd2a":"import numpy as np\nnumpy_A = np.arange(1,25, dtype = np.int32) #Create a numpy array between 1 and 25\nnumpy_A","8aedc650":"A = tf.constant(numpy_A,shape = (2,3,4))\nB = tf.constant(numpy_A)\n\nprint(\"A:\",A,\"\\n\\nB:\",B)","a2eca98d":"A = tf.constant(numpy_A,shape = (3,8))\nB = tf.constant(numpy_A)\n\nprint(\"A:\",A,\"\\n\\nB:\",B)","d3d70487":"# Create a rank 4 tensor (4 dimensions)\n\nrank_4_tensor = tf.zeros(shape=[2,3,4,5])\nrank_4_tensor","30d9cb16":"rank_4_tensor[0]","dbe51686":"rank_4_tensor.shape","3ce85940":"rank_4_tensor.ndim","c42d7dd9":"tf.size(rank_4_tensor)","61a3d87b":"#Get various attributes of our tensor\nprint(\"Datatype of every element:\", rank_4_tensor.dtype)\nprint(\"Number of dimensions: \", rank_4_tensor.ndim)\nprint(\"Shape of Tensor: \", rank_4_tensor.shape)\nprint(\"Elements along the 0 axis: \", rank_4_tensor.shape[0])\nprint(\"Elements along the last axis: \", rank_4_tensor.shape[-1])\nprint(\"Total number of elements in our tensor: \", tf.size(rank_4_tensor).numpy())","4afd2616":"# Get the first 2 elements of each dimension\nrank_4_tensor[:2,:2,:2,:2]","09f2735e":"# Get the first element from each dimension from each index except for the final one\nrank_4_tensor[:1, :1, :1,:]","a2749433":"# Create a rank 2 tensor (2 dimensions)\nrank_2_tensor = tf.constant([[10,7],\n                        [3,4]])\nprint(\"Datatype of every element:\", rank_2_tensor.dtype)\nprint(\"Number of dimensions: \", rank_2_tensor.ndim)\nprint(\"Shape of Tensor: \", rank_2_tensor.shape)\nprint(\"Elements along the 0 axis: \", rank_2_tensor.shape[0])\nprint(\"Elements along the last axis: \", rank_2_tensor.shape[-1])\nprint(\"Total number of elements in our tensor: \", tf.size(rank_2_tensor).numpy())","cef50dbe":"# Get the last item of each row of our rank 2 tensor\nrank_2_tensor[:,-1]","b6f7299a":"# Add in extra dimension to our rank 2 tensor\nrank_3_tensor = rank_2_tensor[...,tf.newaxis]\nrank_3_tensor","caa3596b":"# Alternative to tf.newaxis\ntf.expand_dims(rank_2_tensor, axis=-1) # \"-1\" means expand the final axis","1f8dfa7f":"# Expand 0 axis\ntf.expand_dims(rank_2_tensor, axis=0)","d7ce20aa":"# You can add values to a tensor using addition operator\ntensor = tf.constant([[10,7],\n                      [3,4]])\ntensor + 10","1092f3e6":"# Multiplication also works\ntensor*10","b103b6f1":"#Substraction if you want\ntensor - 10","11e6d3a0":"# We can use the tensorflow built-in funcition too\ntf.multiply(tensor, 10)","a0a1ee05":"tf.add(tensor, 10)","8ee11be8":"#Matrix multiplication in tensorflow\nprint(tensor)\ntf.matmul(tensor, tensor)","4b0bea4d":"# Matrix multiplication with python operator\ntensor @ tensor","42a73cf2":"# Create a tensor of shape (3,2)\nX = tf.constant([[1,2],\n                [3,4],\n                [5,6]])\nY= tf.constant([[7,8],\n               [9,10],\n               [11,12]])\nX,Y","15c92854":"# Lets change the shape of Y\ntf.reshape(Y, shape=(2,3))","42ebc58d":"# MatMul X and reshaped Y\nX @ tf.reshape(Y, shape= (2,3))","14c5997a":"# MatMul Reshaped X and Y\ntf.reshape(X, shape =(2,3)) @ Y","0346501c":"# We can do the same with Transpose\nX, tf.transpose(X), tf.reshape(X, shape = (2,3))","9f50d22e":"# Try MatMul with Transpose instead of Reshape\ntf.matmul(tf.transpose(X), Y)","a16d19a3":"# Perform the dot product on X and Y (requires X or Y to be transposed)\ntf.tensordot(tf.transpose(X), Y, axes=1)","e42c2bda":"# Perform matrix multiplication between X and Y (reshaped)\nX @ tf.reshape(Y, shape= (2,3))","205c7293":"X @ tf.transpose(Y)","7e5e3b5d":"# Check the values of Y, reshape Y and transposed Y\nprint(\"Normal Y:\")\nprint(Y, \"\\n\")\nprint(\"Y reshaped to (2,3)\")\nprint(tf.reshape(Y, shape=(2,3)),\"\\n\")\nprint(\"Y transposed\")\nprint(tf.transpose(Y))","2c4b128f":"# Create a new tensor with default datatype (float32)\nB = tf.constant([1.7,7.4])\nB.dtype","1e4af7d4":"C = tf.constant([7,10])\nC.dtype","687eaf4c":"# Change from float32 to float16\nB = tf.cast(B, dtype = tf.float16)\nB.dtype","50192567":"# Change from int32 to float32\nE = tf.cast(C, dtype=tf.float32)\nE, E.dtype","462a4644":"# Get the absolute values\nD = tf.constant([-7,-10])\nD","db24013a":"tf.abs(D)","c4b39872":"np.random.seed(42)\nY = tf.constant(np.random.randint(0,100,size=30))\nprint(f\"Y:{Y} \\n\\n\")\nprint(\"Min: \",tf.reduce_min(Y).numpy())\nprint(\"Max: \", tf.reduce_max(Y).numpy())\nprint(\"Mean: \", tf.reduce_mean(Y).numpy())\nprint(\"Sum: \", tf.reduce_sum(Y).numpy())\nprint(\"Standard Deviation: \", tf.math.reduce_std(tf.cast(Y, dtype=tf.float64)).numpy())\nprint(\"Variance: \",tf.math.reduce_variance(tf.cast(Y, dtype=tf.float64)).numpy())","aa46b015":"# Another Way to find variance\nimport tensorflow_probability as tfp\ntfp.stats.variance(Y).numpy()","fe15d434":"#Create a new tensor for finding positional minimum and maximum\ntf.random.set_seed(42)\nF = tf.random.uniform(shape=[50])\nF","efad60af":"#Find the positional maximum\ntf.argmax(F)","a4344b2d":"#Index on our largest value position\nF[tf.argmax(F)]","7672322d":"# Find max value of F\ntf.reduce_max(F)","3a25c0d4":"# Check for equality\nF[tf.argmax(F)] == tf.reduce_max(F)","c3d8453b":"# Find the positional minimum\ntf.argmin(F)","9873882b":"# Find the minimum using the positional minimum index\nF[tf.argmin(F)]","31b4b01a":"# Create a tensor to get started\ntf.random.set_seed(42)\nG = tf.constant(tf.random.uniform(shape=[50]), shape=(1,1,1,1,50))\nG","febdb45e":"G.shape","cca94628":"G_squeezed = tf.squeeze(G)\nG_squeezed, G_squeezed.shape","1f5c4993":"# Create a list of indices\nsome_list = [0,1,2,3] # Could be red, green, blue, purple\n\n#One Hot Encode\ntf.one_hot(some_list, depth=4)","d5305013":"# Specify custom values\ntf.one_hot(some_list, depth=4, on_value=\"Yes!\", off_value=\"Oh no!\")","2cc62435":"# Create a new tensor\nH = tf.range(1,10)\nH","453e32bb":"# Square it\ntf.square(H)","e075d5b5":"# Square root (will error, method required non int type)\ntf.sqrt(tf.cast(H,dtype=tf.float64))","76a0cfff":"tf.math.log(tf.cast(H, dtype=tf.float32))","3fca3638":"# Create a tensor directly from NumPy array\nJ = tf.constant(np.array([3.,7.,10.]))\nJ","8d4d646e":"#Convert to NumPy Array\nnp.array(J), type(np.array(J))","bc2e7c72":"#Convert tensor J to a Numpy Array\nJ.numpy(), type(J.numpy())","265e7a1e":"#The default types of each are slightly different\nnumpy_J = tf. constant(np.array([3.,7.,10.]))\ntensor_J = tf.constant([3.,7.,10.])\n\n#Check datatype\nnumpy_J.dtype, tensor_J.dtype","11344e5f":"tf.config.list_physical_devices()","227cef28":"tf.config.list_physical_devices(\"GPU\")","b10e77da":"!nvidia-smi","7be5a9b4":"### Squaring, Log, Square Root","bda83039":"## Introduction to Tensors","af163620":"#### Find the positional maximum and minimum","773b1481":"### Creating Random Tensors","851ffba7":"### Other ways to make `Tensors`","7495800f":"**Basic Operations**\n\n`+`, `-`, `*`, `\/`","5cb6d8ef":"### Aggregating Tensors\nAggregating tensors = condensing them from multiple values down to a smaller amount of values.","4f4b492a":"### Shuffle the order of elements in a tensor","8a980fc9":"Generally, when performing matrix multiplication on two tensors and one of the axes doesn't line up, you will transpose rather than reshape one of the tensors to satisfy matrix multplication rules.","3b363a14":"### Getting Information from Tensors\n\n* Shape\n* Rank\n* Axis or Dimension\n* Size\n\n\n","e54f8740":"### Creating tensors with tf.Variable","10048822":"#### You can also turn NumPy arrays into Tensors\n\nThe main difference between Numpy Arrays and Tensorflow tensors is that Tensors can be run on a GPU (much faster for numerical computing)","fb62da8c":"### Finding Access to GPUs","c66fe9f8":"What we've created so far:\n* Scalar: A single number\n* Vector: A number with direction\n* Matrix : A 2-dimensional array of numbers\n* Tensor: A n-dimensional array of numbers (where n can be any number, a 0 dimensional tensor is a scalar, a 1 dimensional tensor is a vector)","36194a1e":"Let's go through the following forms of aggregation:\n\n1. Get the minimum\n2. Get the maximum\n3. Get the mean of a tensor\n4. Get the sum of a tensor","8a6db1bf":"### Changing the datatype of a tensor","6e8a2ab1":"### Manipulating tensors (tensor operations)","a12db271":"### Squeezing a tensor (Removing all single dimensions)","2f684378":"**Dot Product**\nMatix Multiplication is also referred to as Dot Product.\n\nYou can perform matrix multiplication using:\n* `tf.matmul()`\n* `tf.tensordot()`","e93a601e":"***Matrix Multiplication***","6d8c357a":"### Indexing tensor\n\nTensors can be indexed just like Python lists.","5b2e38a1":"# *TensorFlow*\n### In this notebook, we're going to cover some of the most fundamental concepts of tensors using Tensorflow\n\nMore Specifically, we're going to cover:\n* Introduction to tensors\n* Getting information from tensors\n* Manipulating tensors\n* Tensors and Numpy\n* Using @tf.function (a way to speed up your python functions)\n* Using GPUs with TensorFlow (or TPUs)\n* Exercises to try for yourself","461ab661":"### One Hot Encoding Tensors","11cfe4c1":"### Tensors and NumPy\nTensorFlow interacts beautifully with NumPy arrays.","73084abe":"***Two Rules we need to fulfill for matrix multiplication:***\n1. The inner dimensions must match\n2. The resulting matrix has the shape of outer dimensions\n"}}