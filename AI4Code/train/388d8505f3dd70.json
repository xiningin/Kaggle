{"cell_type":{"c41cdfb0":"code","15a65262":"code","c9d75a9e":"code","186d4d19":"code","9f5da6cd":"code","927e8446":"code","f1d8a8c0":"code","19538458":"code","0cca7ee6":"code","08d5664e":"code","267a1e3d":"code","4c84ae30":"code","d41bb359":"code","3a38336b":"code","5164a34a":"code","b7d9e1b8":"code","11fe79f1":"code","c75e4f12":"code","4997e5b1":"code","70b941b1":"code","4847e49e":"code","8025463e":"markdown","01282167":"markdown","ec90b467":"markdown","6e06872b":"markdown","b325c8c4":"markdown","a7aa6b32":"markdown","c69772a4":"markdown","9fd49845":"markdown","2fd56cc5":"markdown","5a4a0097":"markdown","949c1b79":"markdown","9639f6b0":"markdown","d1988793":"markdown","c54c5d86":"markdown","a9747b41":"markdown","aeb94bc0":"markdown","b5ae7f04":"markdown","7a387e8c":"markdown","59579710":"markdown"},"source":{"c41cdfb0":"!pip install openpyxl\nimport io\nimport openpyxl\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","15a65262":"customer_ds = pd.read_csv(\"..\/input\/credit-card-exploratory-data-analysis\/Customer Acqusition.csv\", sep=\",\")\nspend_ds = pd.read_csv(\"..\/input\/credit-card-exploratory-data-analysis\/spend.csv\", sep=\",\")\nrepayment_ds = pd.read_csv(\"..\/input\/credit-card-exploratory-data-analysis\/Repayment.csv\", sep=\",\")\n\ncustomer_spend_ds = customer_ds.merge(spend_ds, on=\"Customer\", how=\"left\")\ncustomer_payment_ds = customer_ds.merge(repayment_ds, on=\"Customer\", how=\"left\")\n\ncustomer_spend_ds\ncustomer_payment_ds","c9d75a9e":"#Checking a dataset sample\n\npd.set_option(\"display.max_rows\", 100)\npd.set_option(\"display.max_columns\", 100)\npd.options.display.float_format=\"{:,.2f}\".format\n\nprint(\"Customer Spend:\")\ncustomer_spend_ds.sample(n=10, random_state=0)\nprint(\"Customer Payment:\")\ncustomer_payment_ds.sample(n=10, random_state=0)","186d4d19":"#Checking dataset info by feature\n\nprint(\"Customer Spend:\")\ncustomer_spend_ds.info(verbose=True, null_counts=True)\nprint(\"\")\nprint(\"Customer Payment:\")\ncustomer_payment_ds.info(verbose=True, null_counts=True)","9f5da6cd":"#Checking the existence of zeros in rows\n\nprint(\"Customer Spend:\")\n(customer_spend_ds==0).sum(axis=0).to_excel(\"customer_spend_ds_zeros_per_feature.xlsx\")\n(customer_spend_ds==0).sum(axis=0)\nprint(\"Customer Payment:\")\n(customer_payment_ds==0).sum(axis=0).to_excel(\"customer_payment_ds_zeros_per_feature.xlsx\")\n(customer_payment_ds==0).sum(axis=0)","927e8446":"#Checking the existence of duplicated rows\n\nprint(\"Customer Spend:\")\ncustomer_spend_ds.duplicated().sum()\nprint(\"Customer Payment:\")\ncustomer_payment_ds.duplicated().sum()","f1d8a8c0":"#Checking basic statistical data by feature\n\nprint(\"Customer Spend:\")\ncustomer_spend_ds.describe(include=\"all\")\nprint(\"Customer Payment:\")\ncustomer_payment_ds.describe(include=\"all\")","19538458":"#1\n\ncustomer_spend_ds.rename({\"Month\": \"Spend_Date\", \"Type\": \"Spend_Type\", \"Amount\": \"Spend_Amount\"}, axis=1, inplace=True)\ncustomer_payment_ds.rename({\"Month\": \"Payment_Date\", \"Amount\": \"Payment_Amount\"}, axis=1, inplace=True)\n\n#2\n\ncustomer_spend_ds[\"Spend_Month\"] = pd.DatetimeIndex(customer_spend_ds[\"Spend_Date\"]).month\ncustomer_spend_ds[\"Spend_Year\"] = pd.DatetimeIndex(customer_spend_ds[\"Spend_Date\"]).year\ncustomer_payment_ds[\"Payment_Month\"] = pd.DatetimeIndex(customer_payment_ds[\"Payment_Date\"]).month\ncustomer_payment_ds[\"Payment_Year\"] = pd.DatetimeIndex(customer_payment_ds[\"Payment_Date\"]).year\ncustomer_spend_ds[\"Spend Amount to Limit Ratio\"] = customer_spend_ds[\"Spend_Amount\"] \/ customer_spend_ds[\"Limit\"]\n\n#3\n\ncustomer_spend_ds.drop([\"No\", \"Company\", \"Sl No:\"], axis=1, inplace=True)\ncustomer_payment_ds.drop([\"SL No:\", \"Unnamed: 4\"], axis=1, inplace=True)\n\n#4\n\ncustomer_spend_ds[\"Product_Level\"] = customer_spend_ds[\"Product\"].apply(lambda x: [\"Silver\", \"Gold\", \"Platimum\"].index(x))+1\ncustomer_payment_ds[\"Product_Level\"] = customer_payment_ds[\"Product\"].apply(lambda x: [\"Silver\", \"Gold\", \"Platimum\"].index(x))+1\n\ncustomer_spend_ds = pd.concat([customer_spend_ds, pd.get_dummies(customer_spend_ds[\"Segment\"], prefix=\"Segment\")], axis=1)\ncustomer_payment_ds = pd.concat([customer_payment_ds, pd.get_dummies(customer_payment_ds[\"Segment\"], prefix=\"Segment\")], axis=1)\n\n# customer_spend_ds = pd.concat([customer_spend_ds, pd.get_dummies(customer_spend_ds[\"Spend_Type\"], prefix=\"Spend_Type\")], axis=1)\n\n\ncustomer_spend_ds.to_excel(\"customer_spend_ds_clean.xlsx\")\ncustomer_payment_ds.to_excel(\"customer_payment_ds_clean.xlsx\")","0cca7ee6":"#Checking Top Customers by Spend Amount\n\npivot = customer_spend_ds.pivot_table(index=[\"Customer\", \"Age\", \"City\", \"Product\", \"Limit\", \"Segment\"], columns=[\"Spend_Year\"], values=[\"Spend_Amount\"], aggfunc=np.sum, margins=True).reset_index()\npivot.reindex(pivot[\"Spend_Amount\"].sort_values(by=\"All\", ascending=False).index)","08d5664e":"#Checking Top Customers by Payment Amount\n\npivot = customer_payment_ds.pivot_table(index=[\"Customer\", \"Age\", \"City\", \"Product\", \"Limit\", \"Segment\"], columns=[\"Payment_Year\"], values=[\"Payment_Amount\"], aggfunc=np.sum, margins=True).reset_index()\npivot.reindex(pivot[\"Payment_Amount\"].sort_values(by=\"All\", ascending=False).index)","267a1e3d":"#Checking Customers by Product and Limit\n\nimport matplotlib\nfont = {'family' : 'normal',\n        'weight' : 'bold',\n        'size'   : 12}\nmatplotlib.rc('font', **font)\n\npivot = customer_spend_ds.pivot_table(index=[\"Customer\", \"Product\"], columns=[], values=[\"Limit\"], aggfunc=np.mean).reset_index()\nfig = px.treemap(pivot, path=[\"Customer\", \"Product\"], values=\"Limit\", color=\"Product\", title=\"Customers by Product and Limit\").show()","4c84ae30":"#Checking Customers by City and Spend Amount\n\npivot = customer_spend_ds.pivot_table(index=[\"Customer\", \"City\"], columns=[], values=[\"Spend_Amount\"], aggfunc=np.sum).reset_index()\nfig = px.treemap(pivot, path=[\"Customer\", \"City\"], values=\"Spend_Amount\", color=\"City\", title=\"Customers by City and Spend Amount\").show()","d41bb359":"#Checking Customers by Segment and Spend Amount\n\npivot = customer_spend_ds.pivot_table(index=[\"Customer\", \"Segment\"], columns=[], values=[\"Spend_Amount\"], aggfunc=np.sum).reset_index()\nfig = px.treemap(pivot, path=[\"Customer\", \"Segment\"], values=\"Spend_Amount\", color=\"Segment\", title=\"Customers by Segment and Spend Amount\").show()","3a38336b":"#Checking Customers by Spend Type and Amount\n\npivot = customer_spend_ds.pivot_table(index=[\"Customer\", \"Spend_Type\"], columns=[], values=[\"Spend_Amount\"], aggfunc=np.sum).reset_index()\nfig = px.treemap(pivot, path=[\"Customer\", \"Spend_Type\"], values=\"Spend_Amount\", color=\"Spend_Type\", title=\"Customers by Spend Type and Amount\").show()","5164a34a":"#Checking Customers by Age and Spend Amount\n\n# !pip install ipywidgets\n# !jupyter nbextension enable --py widgetsnbextension --sys-prefix\n\n%matplotlib inline\nimport plotly.offline as offline\nimport ipywidgets as widgets\n\ndef update_map(customer_spend_ds, year, month):\n    print(f\"Year range: {year}\")\n    print(f\"Month range: {month}\")\n    global update_ds, pivot, fig\n    update_ds = customer_spend_ds[(customer_spend_ds[\"Spend_Year\"] >= year[0]) & (customer_spend_ds[\"Spend_Year\"] <= year[-1]) &\n    (customer_spend_ds[\"Spend_Month\"] >= month[0]) & (customer_spend_ds[\"Spend_Month\"] <= month[-1])][[\"Spend_Year\", \"Spend_Month\", \"Age\", \"Spend_Amount\", \"Spend_Type\", \"Customer\"]]\n    pivot = update_ds.pivot_table(index=[\"Age\", \"Customer\"], columns=[], values=[\"Spend_Amount\"], aggfunc=np.sum).reset_index()\n    fig = px.scatter(pivot, x=\"Age\", y=\"Spend_Amount\", size=\"Spend_Amount\", color=\"Customer\", hover_name=\"Customer\", size_max=30, title=\"Customers by Age and Spend Amount\").show()\n    \nyear_select = widgets.SelectionRangeSlider(\n              options=sorted(customer_spend_ds[\"Spend_Year\"].unique().tolist()),\n              index=(0,1),\n              description=\"Select year:\",\n              disabled=False)\n\nmonth_select = widgets.SelectionRangeSlider(\n              options=sorted(customer_spend_ds[\"Spend_Month\"].unique().tolist()),\n              index=(0,1),\n              description=\"Select month:\",\n              disabled=False)\n\nwidgets.interactive(update_map, customer_spend_ds=widgets.fixed(customer_spend_ds), year=year_select, month=month_select)","b7d9e1b8":"# Checking Spend Amount by City\n\ncoordinates_ds = pd.DataFrame({\"City\": [\"COCHIN\", \"BANGALORE\", \"CHENNAI\", \"CALCUTTA\", \"BOMBAY\", \"PATNA\", \"TRIVANDRUM\", \"DELHI\"], \"Lat\": [9.9312, 12.9716, 13.0827, 22.5726, 19.0760, 25.5941, 8.5241, 28.7041], \"Lon\": [76.2673, 77.5946, 80.2707, 88.3639, 72.8777, 85.1376, 76.9366, 77.1025]})\nplotly_ds = customer_spend_ds.merge(coordinates_ds, on=\"City\", how=\"left\") \npivot = plotly_ds.pivot_table(index=[\"Lat\", \"Lon\", \"City\"], columns=[], values=[\"Spend_Amount\"], aggfunc=np.sum).reset_index()\n\nfig = px.scatter_mapbox(pivot,\n                       lat=\"Lat\",\n                       lon=\"Lon\",\n                       color=\"City\",\n                       size=\"Spend_Amount\",\n                       hover_name=\"Spend_Amount\",\n                       color_continuous_scale=px.colors.cyclical.IceFire,\n                       size_max=50,\n                       zoom=3.5)\n\nfig.update_layout(mapbox_style=\"open-street-map\", height=600, margin={\"r\":0, \"t\":0, \"l\":0, \"b\":0})","11fe79f1":"#Checking Dataset Behaviour Along the Time\n\nsns.set(font_scale=1.2)\n\nfig, axarr = plt.subplots(1, 1, figsize=(30, 10))\nsns.lineplot(data=customer_spend_ds, x=\"Spend_Year\", y=\"Spend_Amount\", estimator=\"sum\")\nfig.suptitle(\"Spend Amount Behaviour Along The time\", fontsize=25)\n\nfig, axarr = plt.subplots(1, 1, figsize=(30, 10))\nsns.lineplot(data=customer_payment_ds, x=\"Payment_Year\", y=\"Payment_Amount\", estimator=\"sum\")\nfig.suptitle(\"Payment Amount Behaviour Along The time\", fontsize=25)","c75e4f12":"#Plotting Categorical Variables\n\nfig, ax = plt.subplots(1, 2, figsize=(15,5))\ncustomer_spend_ds[\"City\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\ncustomer_spend_ds[\"City\"].value_counts().plot.pie(autopct='%1.1f%%', shadow=True,ax=ax[1])\nfig.suptitle(\"City Frequency\", fontsize=25)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2, figsize=(15,5))\ncustomer_spend_ds[\"Product\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\ncustomer_spend_ds[\"Product\"].value_counts().plot.pie(autopct='%1.1f%%', shadow=True,ax=ax[1])\nfig.suptitle(\"Product Frequency\", fontsize=25)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2, figsize=(15,5))\ncustomer_spend_ds[\"Segment\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\ncustomer_spend_ds[\"Segment\"].value_counts().plot.pie(autopct='%1.1f%%', shadow=True,ax=ax[1])\nfig.suptitle(\"Segment Frequency\", fontsize=25)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 2, figsize=(15,5))\ncustomer_spend_ds[\"Spend_Type\"].value_counts().plot.bar(color=\"purple\", ax=ax[0])\ncustomer_spend_ds[\"Spend_Type\"].value_counts().plot.pie(autopct='%1.1f%%', shadow=True,ax=ax[1])\nfig.suptitle(\"Spend Type Frequency\", fontsize=25)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)","4997e5b1":"#Plotting Numerical Variables\n\nfig, ax = plt.subplots(1, 3, figsize=(15,5))\nfig.suptitle(\"Age Distribution\", fontsize=25)\nsns.histplot(customer_spend_ds[\"Age\"], ax=ax[0])\nsns.boxplot(customer_spend_ds[\"Age\"], ax=ax[1])\nsns.violinplot(customer_spend_ds[\"Age\"], ax=ax[2])\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 3, figsize=(15,5))\nfig.suptitle(\"Limit Distribution\", fontsize=25)\nsns.histplot(customer_spend_ds[\"Limit\"], ax=ax[0])\nsns.boxplot(customer_spend_ds[\"Limit\"], ax=ax[1])\nsns.violinplot(customer_spend_ds[\"Limit\"], ax=ax[2])\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 3, figsize=(15,5))\nfig.suptitle(\"Spend Amount Distribution\", fontsize=25)\nsns.histplot(customer_spend_ds[\"Spend_Amount\"], ax=ax[0])\nsns.boxplot(customer_spend_ds[\"Spend_Amount\"], ax=ax[1])\nsns.violinplot(customer_spend_ds[\"Spend_Amount\"], ax=ax[2])\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, 3, figsize=(15,5))\nfig.suptitle(\"Payment Amount Distribution\", fontsize=25)\nsns.histplot(customer_payment_ds[\"Payment_Amount\"], ax=ax[0])\nsns.boxplot(customer_payment_ds[\"Payment_Amount\"], ax=ax[1])\nsns.violinplot(customer_payment_ds[\"Payment_Amount\"], ax=ax[2])\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)","70b941b1":"#Alternatively using Profile Report to see variables statistics and correlations\n\n# from pandas_profiling import ProfileReport\n# profile = ProfileReport(customer_spend_ds, title=\"Credit Card Exploratory Data Analysis\")\n# profile.to_file(output_file=\"Credit Card Exploratory Data Analysis.html\")","4847e49e":"#Deleting categorical columns\n\ncustomer_spend_ds2 = customer_spend_ds.drop([\"Customer\", \"City\", \"Product\", \"Segment\", \"Spend_Type\", \"Spend_Date\", \"Spend_Type\", \"Spend_Month\", \"Spend Amount to Limit Ratio\"], axis=1)\ncustomer_payment_ds2 = customer_payment_ds.drop([\"No\", \"Customer\", \"City\", \"Product\", \"Company\", \"Segment\", \"Payment_Date\", \"Payment_Month\"], axis=1)\n\n\n#Plotting a Heatmap\n\nsns.set(font_scale=1)\n\nfig, ax = plt.subplots(1, figsize=(20,20))\nsns.heatmap(customer_spend_ds2.corr(), annot=True, fmt=\",.2f\")\nplt.title(\"Heatmap Correlation - Customer Spend\", fontsize=20)\nplt.tick_params(labelsize=12)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\nfig, ax = plt.subplots(1, figsize=(20,20))\nsns.heatmap(customer_payment_ds2.corr(), annot=True, fmt=\",.2f\")\nplt.title(\"Heatmap Correlation - Customer Payment\", fontsize=20)\nplt.tick_params(labelsize=12)\nplt.xticks(rotation=90)\nplt.yticks(rotation=45)\n\n\n#Plotting a Pairplot\n\nsns.pairplot(customer_spend_ds2)\nsns.pairplot(customer_payment_ds2)","8025463e":"# 6.7 Checking Customers by Age and Spend Amount Using Bubble Chart","01282167":"# 6.10 Checking Categorical Variables Bar and Pie Charts","ec90b467":"# 6. Data Exploration","6e06872b":"# 3. Data Collection","b325c8c4":"# 6.5 Checking Customers by Segment and Spend Amount Using TreeMap","a7aa6b32":"# 6.4 Checking Customers by City and Spend Amount Using TreeMap","c69772a4":"# 6.1 Checking Top Customers by Spend Amount","9fd49845":"# 6.2 Checking Top Customers by Payment Amount","2fd56cc5":"# 6.6 Checking Customers by Spend Type and Amount Using TreeMap","5a4a0097":"# 6.9 Checking Dataset Behaviour Along the Time Using Line Chart","949c1b79":"# 4. Data Preliminary Exploration","9639f6b0":"# 1. Introduction: Business Goal & Problem Definition\n\nIF YOU LIKE IT OR IF IT HELPS YOU SOMEHOW, COULD YOU PLEASE UPVOTE? THANK YOU VERY MUCH!!!\n\nThis project\u00b4s goal is doing an exploratory data analysis (EDA) in the Credit Card Industry to help the company with proactive offers and services to the customers, gain market share and minimize customer churn. The goal is to analyze the data set to summarize its main characteristics using several different visual methods, primarily for seeing what the data can tell us. The available dataset features for analysis are:\n\n* Customer\n* Age\n* City\n* Product\n* Limit\n* Company\n* Segment\n* Spend Month\n* Spend Type\n* Spend Amount\n* Payment Month\n* Payment Amount","d1988793":"# 8. Conclusions\n\nIF YOU LIKE IT OR IF IT HELPS YOU SOMEHOW, COULD YOU PLEASE UPVOTE? THANK YOU VERY MUCH!!!\n\nThe dataset brings information about 100 customers.\n\n\nSilver clients: they represent 21% of our customers, are in average 49 Years Old, have an average of 167k Limit and their Spend Amount grew 7% from 2004 to 2006, from 27.389M to 29.324M. The average spends per client in 2006 is 0.978M. The Payment Amount in 2006 is 27.923M, meaning it represents 95% of Spend Amount, what could be a yellow light in terms of default, so we should review their Limits. Their main jobs are in Government (26%) and in Multinational Corporations (24%), meaning there\u00b4s some job and salary stability to them. Their main spends are in Transportation Tickets (27%), Petro (14%) and Camera (13%), indicating it\u00b4s probably a niche with high interest in leisure trips. The strategy advice for this niche is keeping it as a stable base of clients, but with a potential to grow, offering them trip related products.\n\n\nGold clients: they represent 41% of our customers, are in average 47 Years Old, have an average of 500k Limit and their Spend Amount grew 33% from 2004 to 2006, from 39.424M to 52.287M. The average spends per client in 2006 is 1.376M. The Payment Amount in 2006 is 58.515M, meaning it represents 112% of Spend Amount, what probably means they\u00b4re good payers, so we should consider increasing their Limits. Their main jobs are as Self Employed (24%) and Normal Job (24%), making it the group that can oscillate most in terms of job and salary stability, what\u00b4s also a point to consider when increasing their Limits. Their main spends are in Transportation Tickets (28%), Petro (14%) and Camera (12%). It\u00b4s also probably a niche with high interest in leisure trips, so we could increase advertisements related to it. This group is the one that will probably most grow in spends in times of economic growth and will most decrease in times of economic depression, but it\u00b4s currently growing fast, so the company should take the opportunity to bring this type of customers from the market and gain market share.\n\n\nPlatinum clients: they represent 38% of our customers, are in average 43 Years Old, have an average of 140k Limit and their Spend Amount grew 33% from 2004 to 2006, from 37.679M to 50.044M. The average spends per client in 2006 is 1.564M. The Payment Amount in 2006 is 54.410M, meaning it represents 109% of Spend Amount, what probably means they\u00b4re good payers as well, so we should consider increasing their Limits, but not so much as for the Gold clients. Their main jobs are Normal Salary (41%), followed by Government and Salaried Pvt, both with 17% each, indicating it\u00b4s a group that can oscillate a bit in terms of job stability and salary. Their main spend are Transportation Tickets (21%), Petro (13%) and Food (12%). This niche represents the one with the highest spends per client, plus they have some salary stability and are good payers, so they really need to be treated with special attention as premium clients. The company strategy here needs to be in retaining them, investing in relationship, offering products they want and maybe increasing their Limits.","c54c5d86":"# 6.11 Checking Numerical Variables Histogram, Boxplot and Violinplot","a9747b41":"# 6.3 Checking Customers by Product and Limit Using TreeMap","aeb94bc0":"# 5. Data Cleaning\n\n    We\u00b4ll perform the following:\n    \n    \n    1. Change some columns names for better interpretability:\n        1.1 Month_x: Spend Date\n        1.2 Type: Spend Type\n        1.3 Amount_x: Spend Amount\n        1.4 Month_y: Payment Date\n        1.5 Amount_y: Payment Amount\n    \n    \n    2. Create calculated feature that could bring relevant information to the analysis:\n        2.1 Spend Month\n        2.2 Spend Year\n        2.3 Payment Month\n        2.4 Payment Year\n        2.5 Spend Amount to Limit Ratio\n        \n        \n    3. Remove irrelevant features for the analysis:\n        3.1 No\n        3.2 Company\n        3.3 Sl No:\n        3.4 SL No:\n        3.5 Unnamed: 4\n    \n        \n    4. Convert categorical features to dummies so we can analyze their correlations in step 7:\n        4.1 Product\n        4.2 Segment\n        4.3 Spend Type (in this exercise we won\u00b4t convert Spend Type in order to simplify the model)\n        \n        \n    * No duplications found\n    * No missing, zero or invalid values to treat\n    * No outliers found\n    * The entire dataset will be taken","b5ae7f04":"# 2. Importing Basic Libraries","7a387e8c":"# 7. Correlations Analysis","59579710":"# 6.8 Checking Spend Amount by City Using Geographic Map"}}