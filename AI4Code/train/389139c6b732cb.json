{"cell_type":{"f58c054b":"code","75a1c02e":"code","53bd7baf":"code","e1818db8":"code","b1455bf4":"code","f9d57abb":"code","0cce5ee2":"code","849d1737":"code","489834e2":"markdown","e641a685":"markdown","7ab87d01":"markdown","3d3d687d":"markdown","8df1f646":"markdown","7bc6815e":"markdown","a8b7d3f2":"markdown"},"source":{"f58c054b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","75a1c02e":"# Import packages\nimport tensorflow as tf\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\n\ndataset = pd.read_csv('\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv')\nX = dataset.iloc[:, 3:-1].values\ny = dataset.iloc[:, -1].values","53bd7baf":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX[:, 2] = le.fit_transform(X[:, 2])\nprint(X)","e1818db8":"\nct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')\nX = np.array(ct.fit_transform(X))\nprint(X)\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 47)\n","b1455bf4":"sc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","f9d57abb":"ann = tf.keras.models.Sequential()\nann.add(tf.keras.layers.Dense(units=15, activation='relu'))\nann.add(tf.keras.layers.Dense(units=25, activation='relu'))\nann.add(tf.keras.layers.Dense(units=15, activation='relu'))\nann.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))\nann.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nann.fit(X_train, y_train, verbose=1, batch_size=64, epochs=100)\nann.summary()\n","0cce5ee2":"y_pred = ann.predict(X_test)\ny_pred = (y_pred > 0.5)\nprint(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))","849d1737":"cm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","489834e2":"> **Now, I would like to compare with Ann and machine learning models for this dataset. PyCaret helps us to compare lots of model easily. However, it will be the next part. Thank you for your time**","e641a685":"We taught the machine with deep learning :) now let's see our accuracy and predict customers.","7ab87d01":"Import the libraries first and be excited for ANN for churn prediction !","3d3d687d":"We need to encode our categoric columns, unless we can not predict any values.","8df1f646":"Now, Artificial Neural Network is trying to understand which customer will churn, which is not. ann variable is equal to Keras Sequential.","7bc6815e":"Let's divide our dataset with train and test datasets. you can give different test_size if you want.","a8b7d3f2":"Everything is great. Our accuracy almost reached 87%. I just want to look at confusion matrix too. Thank you for your time. Don't hesitate to ask questions."}}