{"cell_type":{"ae59f484":"code","6df26879":"code","51409131":"code","27cafed0":"code","42f58915":"code","99e5b8af":"code","cfcc3c98":"code","3be348d3":"code","e91d3998":"code","08db6f7c":"code","fe0f8a8e":"code","a5074e2f":"code","b3ddc2a1":"code","1765e5b7":"code","7e237802":"code","219acbf9":"markdown","15cda3c6":"markdown","f748926b":"markdown","f161e157":"markdown","dd2c6ced":"markdown","fcd6b9b1":"markdown"},"source":{"ae59f484":"import numpy as np\nimport pandas as pd\nimport random as rn\nimport tensorflow as tf\nfrom keras import backend as K\n\nsession_conf = tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)\nsess = tf.Session(graph=tf.get_default_graph(), config=session_conf)\nK.set_session(sess)\n\n\nrn.seed(20)\nnp.random.seed(8)\ntf.set_random_seed(1998)","6df26879":"train = pd.read_csv(\"..\/input\/train.csv\")\nprint(train.shape)\nprint(train.head())","51409131":"test = pd.read_csv(\"..\/input\/test.csv\")\nprint(test.shape)\nprint(test.head())","27cafed0":"XTrain = train.iloc[:,1:].values.astype('float32')\nyTrain = train.iloc[:,0].values.astype('int32')\n\nXTest = test.values.astype('float32')","42f58915":"#Converting Flattened images to its 2D matrix form\nXTrain = XTrain.reshape(XTrain.shape[0], 28, 28)\nXTest = XTest.reshape(XTest.shape[0], 28, 28)","99e5b8af":"import matplotlib.pyplot as plt\n\nfor i in range(6):\n    plt.subplot(231 + i) #2 row, 3 col -> 6 cells; place image in 1st, 2nd,..6th cell\n    plt.imshow(XTrain[100+i])\n    plt.title(yTrain[100+i])\n","cfcc3c98":"#Expand one more dimension for Colour channel Gray\nXTrain = XTrain.reshape(XTrain.shape[0], 28, 28, 1)\nXTest = XTest.reshape(XTest.shape[0], 28, 28, 1)\n\n#Normalise inputs from 0-255 to 0-1\nXTrain = XTrain\/255\nXTest = XTest\/255","3be348d3":"#OneHot Encoding of labels\nfrom keras.utils.np_utils import to_categorical\nyTrain = to_categorical(yTrain)\n\n#Plotting one of the label\nimport matplotlib.pyplot as plt\nplt.figure()\nplt.title(yTrain[1000])\nplt.plot(yTrain[1000])\nplt.xticks(range(10))","e91d3998":"#import libraries\nfrom keras.models import Sequential\nfrom keras.layers import Convolution2D, MaxPooling2D, BatchNormalization, Flatten, Dense, Dropout","08db6f7c":"def convNeuralNetwork():\n    model = Sequential([\n        Convolution2D(32, input_shape=(28,28,1), kernel_size=(3,3), strides=(1,1), padding='same', activation='relu'),\n        MaxPooling2D(pool_size=(2,2), strides=(2,2)),\n        BatchNormalization(),\n        Dropout(0.3),\n        Convolution2D(32, kernel_size=(3,3), strides=(1,1), padding='same', activation='relu'),\n        MaxPooling2D(pool_size=(2,2), strides=(2,2)),\n        BatchNormalization(),\n        Dropout(0.3),\n        Convolution2D(32, kernel_size=(3,3), strides=(1,1), padding='same', activation='relu'),\n        MaxPooling2D(pool_size=(2,2), strides=(2,2)),\n        BatchNormalization(),\n        Dropout(0.3),\n        Flatten(),\n        Dense(96, activation='relu'),\n        Dense(10, activation='softmax')\n    ])\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n    return model\n    ","fe0f8a8e":"classifier = convNeuralNetwork()\nclassifier.optimizer.lr = 0.01\nprint(classifier.summary())","a5074e2f":"#Fit Model\nhistory = classifier.fit(XTrain, yTrain, batch_size=10, epochs=20, validation_split=0.2,  verbose=1)","b3ddc2a1":"from sklearn.metrics import confusion_matrix, accuracy_score\nyPred = classifier.predict(XTrain)\nprint(yPred[0])\ncm = confusion_matrix(np.argmax(yTrain,axis=1),np.argmax(yPred,axis=1))\nprint(\"Confusion Matrix\\n:\",cm)\naccuracy = accuracy_score(np.argmax(yTrain,axis=1),np.argmax(yPred,axis=1))\nprint(\"Accuracy on dataset = \",accuracy)\n\nfrom matplotlib import pyplot as plt\nplt.figure()\nplt.plot(history.history['acc'],'green',label='Training Accuracy')\nplt.plot(history.history['val_acc'],'blue',label='Validation Accuracy')\nplt.plot(history.history['loss'],'red',label='Loss')\nplt.plot(history.history['val_loss'],'orange',label='Validation Loss')\nplt.title('Validation Accuracy & Loss')\nplt.xlabel('Epoch')\n","1765e5b7":"predictions = classifier.predict_classes(XTest, verbose=1)\nresult = pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nresult.to_csv(\"result4.csv\", index=False, header=True)","7e237802":"#Serialize model to JSON\nmodel_json = classifier.to_json()\nwith open(\"model4.json\", \"w\") as json_file:\n    json_file.write(model_json)\n\n#Serialize weights to HDF5\nclassifier.save_weights(\"model4.h5\")","219acbf9":"## Build Convolution Neural Network","15cda3c6":"## Predicting Test Set Results\n","f748926b":"### Image Visualisation","f161e157":"## Load Dataset","dd2c6ced":"# MNIST Digit Recognizer using Convolutional Neural Network","fcd6b9b1":"### Save the Model"}}