{"cell_type":{"4c780a2b":"code","44b7fe9c":"code","12ec505b":"code","b2de68fe":"code","5739b9d5":"code","3be3d02c":"code","3f445b86":"code","85bf1625":"code","0ff1d8ea":"markdown","362734fd":"markdown","60afedec":"markdown","89d2de5d":"markdown","d29f54d4":"markdown","fa34ab92":"markdown","35115674":"markdown","3fd22a9f":"markdown","9ba58185":"markdown","866b0f34":"markdown","24a8bb4c":"markdown","b9db3999":"markdown","14435247":"markdown","44d778d3":"markdown","e5a9fe3e":"markdown","0b895896":"markdown","6a1a2f84":"markdown","2af88718":"markdown","71ae6fd3":"markdown","406d0407":"markdown","b6d30155":"markdown","cf991f3c":"markdown","70af8721":"markdown","65bd8082":"markdown","6608a67b":"markdown","d038e91e":"markdown"},"source":{"4c780a2b":"from IPython.display import Image\nImage(\"\/kaggle\/input\/some-glimpses-of-financial-data-wrangling\/Lesson2GoalHeaderImage.png\")\n","44b7fe9c":"from IPython.display import Image\nImage(\"\/kaggle\/input\/some-glimpses-of-financial-data-wrangling\/Lesson2Fig2_1.png\")","12ec505b":"#function to eliminate empty rows in a dataset\ndef EmptyRowsElimination(dfAssetPrices):\n\n    # read dataset and extract its dimensions\n    [Rows, Columns] = dfAssetPrices.shape\n    dFrame = dfAssetPrices.iloc[0:Rows, 0:Columns]\n    \n    # call dropna method from Pandas \n    dFClean = dFrame.dropna(axis =0, how ='all')\n    return dFClean","b2de68fe":"#empty rows elimination from stock prices dataset\n\n#dependencies\nimport numpy as np\nimport pandas as pd\n\n#input dataset and dimensions of the dataset\nStockFileName = '\/kaggle\/input\/some-glimpses-of-financial-data-wrangling\/Lesson2FinDataWranglingSampledata.csv'\nRows = 12      #excluding headers\nColumns = 18  #excluding date\n\n#read stock prices \ndf = pd.read_csv(StockFileName,  nrows= Rows)\n\n#extract asset Names\nassetNames = df.columns[1:Columns+1].tolist()\nprint(assetNames)\n\n#clean the stock dataset of empty rows\nStockData = df.iloc[0:, 1:]\ndfClean = EmptyRowsElimination(StockData)\nprint('\\nData cleaning completed!')\n[rows, cols]=dfClean.shape\nprint('Dimensions of the cleaned dataset', dfClean.shape)\nprint('Cleaned dataset: \\n', dfClean)","5739b9d5":"from IPython.display import Image\nImage(\"\/kaggle\/input\/some-glimpses-of-financial-data-wrangling\/Lesson2Fig2_1.png\")\n","3be3d02c":"#function to fill missing values of daily stock prices\n#Mandatory requirements: (1) The dataset should have been cleaned of all empty rows \n#before missing values are filled, and \n#(2) the opening row of the dataset should not have any empty fields\n\ndef FillMissingValues(StockPrices):\n    \n    import numpy as np\n    print('Fill missing values...')\n    \n    #identify positions of the missing values in StockPrices\n    [rows, cols] = np.where(np.asarray(np.isnan(StockPrices)))\n    \n    #replace missing value with the previous day's price\n    for t in range(rows.size):\n        i=rows[t]\n        j = cols[t]\n        if (i-1) >= 0:           \n            StockPrices.iloc[i,j]= StockPrices.iloc[i-1, j].copy()\n        else:\n            print('error')\n    return StockPrices","3f445b86":"#filling missing values of stock prices dataset\n\n#dependencies\nimport numpy as np\nimport pandas as pd\n\n#input dataset and the dimensions of the cleaned dataset\nStockFileName = '\/kaggle\/input\/some-glimpses-of-financial-data-wrangling\/Lesson2MissingValBSE200.csv'\nRows = 11  #excluding header\nColumns = 5  #excluding date\n\n#read stock prices from the dataset as a pandas dataframe\ndf = pd.read_csv(StockFileName,  nrows= Rows)\nStockData = df.iloc[0:, 1:]\n\n#extract asset labels\nassetLabels = df.columns[1:Columns+1].tolist()\nprint('Asset Labels:',assetLabels)\n\n#impute missing data with previous day's trading price\nstockDataClean = FillMissingValues(StockData)\nprint('Filling missing values completed!\\n')\nprint(stockDataClean)\n","85bf1625":"from IPython.display import Image\nImage(\"\/kaggle\/input\/some-glimpses-of-financial-data-wrangling\/Lesson2ExitTailImage.png\")","0ff1d8ea":"##  ***Next .....***\n","362734fd":"#### Fig. 2.1 Snapshot of a finance dataset that calls for data wrangling","60afedec":"The \"raw\" financial datasets based on which crucial investment decisions are taken, cannot be used on an as-is-where-is basis, despite the fact that these are dynamically generated on-line as the trading proceeds at the stock exchanges concerned. The financial datasets need to be cleaned and transformed to enable smooth functioning of the models that work over these datasets.","89d2de5d":"Many a time, datasets are seen interspersed with quite a few empty fields which can only be attributed to improper handling of data downstream or errors that propagated during data handling at source. Termed **missing values** or **missing data** in data analytics, this is a serious problem that cannot be overlooked and needs to be redressed. Fortunately,  a variety of methods are available to tackle missing data in a dataset. Different models working over these datasets adopt different techniques to tackle the missing values in the dataset, based on their justifications and requirements of analyses. \n","d29f54d4":"##  Lesson 2\n ","fa34ab92":"There are innumerable books and blogs that have been written on Data Wrangling or more familiarly Data Pre-processing. It is therefore left to the reader's choice to select those that cater to their individual needs.   \n\n**scikit-learn** is a Python Library built on **NumPy**, **SciPy** and **matplotlib**,  and comprises a  repertoire of tools to work on **machine learning**. The package **sklearn.preprocessing** in scikit-learn, provides numerous utility functions and transformers to help undertake data preprocessing. ","35115674":"Summarizing, a finance dataset has to be essentially cleaned of all empty rows and columns, to enable successful working of models over it. ","3fd22a9f":"This work, considering the fact that the dataset describes the daily prices of stocks traded on a particular day, the missing values are replaced by the previous day's trading price which is logical and therefore acceptable to the models that will work on such datasets. Needless to say, filling missing values using this method,  insist on the following mandatory requirements:  \n\n(1) The dataset should have been cleared of all empty rows and empty columns (as \n    discussed in Sec. 2.2), and  \n    \n(2) The opening row of the dataset cannot have missing values.  \n\n\nA snapshot of an S&P BSE200 dataset (Bombay Stock Exchange, India) during August 16, 2001 to August 31, 2001 is shown in Fig.2.2. Observe that the dataset is interspersed with quite a few missing values. The data set however, has been cleaned to remove empty rows \/columns for the period concerned and the important requirement of  the opening row not having any missing values has been ensured. ","9ba58185":"**Lesson3: Heuristic Portfolio Selection**    \n\n(Goal: Given the vast and variegated universe of securities, how can one make a prudent and efficient choice of securities for one's portfolio?)  \n\nKaggle Kernel: Heuristic Portfolio Selection\n ","866b0f34":"## References\nGitHub Repository\nPythonFinance-PortfolioOptimization https:\/\/github.com\/PaiViji","24a8bb4c":"The Python code invoking the function **EmptyRowsElimination** over the example dataset shown in Fig. 2.1 is given below. The output shows that the  two empty rows corresponding to dates, 23-02-2002 and 24-02-2002 have been removed. ","b9db3999":"The Python code to undertake missing values filling for the dataset shown in Fig. 2.2 is shown below.","14435247":"##   2.3 Filling Missing Values","44d778d3":"##   2.1   Introduction","e5a9fe3e":"## Suggested further reading","0b895896":"With regard to \"raw\" financial datasets, the following problems may be encountered:  \n\n(1) blank tuples (rows) in the dataset, and   \n(2) missing values of certain fields in the dataset  \n\nFig. 2.1 illustrates a snapshot of a financial dataset extracted from S&P BSE200 (Bombay Stock Exchange, India) for the period Feb 17, 2002 to Feb 28, 2002, that has these aformentioned problems. The empty rows, columns and missing values,  can be seen in the \"raw\" dataset.","6a1a2f84":"Considering the size of the finance datasets,  which needless to say can be very huge, the removal of empty rows from the dataset can be accomplished by coding a function for the same. The Python function **EmptyRowsElimination**,  reads the stock prices from the dataset to eliminate the empty rows in the dataset using **dropna** method of Pandas. ","2af88718":"## 2.2      Eliminating empty rows","71ae6fd3":"The two functions **EmptyRowsElimination** and **FillMissingValues** have been independently demonstrated over two live datasets only for purposes of illustration. In practice, needless to say, every stock price dataset will have to undergo the two cleaning operations in a sequence, to render them fit for models that will work on critical investment decision making using these historical datasets. ","406d0407":"The function **FillMissingValues** undertakes to fill the missing stock prices with the previous day's prices for a dataset satisfying the mandatory requirements.","b6d30155":"# Some Glimpses of Financial Data Wrangling ","cf991f3c":"####     Fig. 2.2  Snapshot of a finance dataset that calls for filling missing data values ","70af8721":"**Data wrangling** or **Data munging** or the more familiar **Data pre-processing**, deals with a slew of techniques that serve to clean the data, transform the data  and render it fit for use by various models that will work over it, to undertake operations or analysis or research. ","65bd8082":"It can be clearly seen that rows 6 and 7 which held empty rows have been eliminated. However, the two empty columns corresponding to stocks NTPC Ltd and Tata Consultancy Services Ltd., continue to persist.  To eliminate columns that are wholly empty one merely has to use **dropna** method with axis =1.  \n  \nHowever, this was not done for the given S&P BSE200 data set only  to draw attention to the fact that empty columns in a stock dataset during a  given period,  may be indicative of the fact that the stocks were not listed on the exchange during the period concerned. Therefore, models which work on such datasets may either choose to eliminate such columns (ignoring short series data as it is said),   if the time period is important for the study, or may choose to work over the dataset pulled for an appropriate time period,  when the stocks were listed on the exchange and traded, thereby leaving no columns empty, for reasons otherwise. ","6608a67b":"* **Python for Portfolio Optimization: The Ascent! **\n\n*First working lessons to ascend the hilly terrain of Portfolio Optimization in seven strides (Lessons), beginning with the fundamentals (Lesson 1) and climbing slope after slope (Lessons 2-6), to reach the first peak of constrained portfolio optimization models (Lesson 7), amongst a range of peaks waiting beyond! * \n  \n* **Lesson 1 Fundamentals of Risk and Return of a Portfolio **\n","d038e91e":"## *Prologue*"}}