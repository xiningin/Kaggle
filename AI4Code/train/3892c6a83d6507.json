{"cell_type":{"eda94c64":"code","64c8e338":"code","398f3552":"code","bf437e48":"code","7b189041":"markdown","688b6d3d":"markdown","7d64e12a":"markdown"},"source":{"eda94c64":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom sklearn import svm\nfrom sklearn.model_selection import cross_val_score\n\nLINE = \"#5FAD56\"\nA = \"#0075a2\"\nB = \"#481620\"\nC = \"#D55672\"\nOTHER = \"#F2C14E\"","64c8e338":"data = pd.read_csv('..\/input\/letterrecognition-using-svm\/letter-recognition.csv')\ndata = data.dropna()\ndata","398f3552":"x = data.iloc[:, 1:]\ny = data['letter'].tolist()\nprint(x)\n\n# Select 4000 rows data as a testing dataset\nx_test = x.iloc[0:4000, :].values.astype('float32') # all pixel values \ny_test = y[0:4000] # Select label for testing data\nx_train = x.iloc[4000:, :].values.astype('float32') # all pixel values \ny_train = y[4000:]\n\n# Normalizing the data\nx_train = x_train\/255.0\nx_test = x_test\/255.0\n\n# Printing the shape of the Datasets\nprint('x_train shape:', x_train.shape)\nprint(x_train.shape[0], 'train samples')\nprint(x_test.shape[0], 'test samples')","bf437e48":"model_clf = svm.SVC(C=5, kernel ='poly')\n\n# Train the svm algorithm\nmodel_clf.fit(x_train, y_train)\n\n# Apply the trained svm to make prediction of test data\ny_pred = model_clf.predict(x_test)","7b189041":"# Ajuste un modelo SVM\n* Escoger el dataset (2 pts)\n* Ajustar el modelo incluidos sus hiperpar\u00e1metros (3 pts)\n* Muestre UN contorno de las clases tal como se muestra en el notebook 1 (2pts)","688b6d3d":"### SVM Model","7d64e12a":"### Get X and y"}}