{"cell_type":{"4da331d6":"code","619998de":"code","68299bc1":"code","7548a3c7":"code","b6f13a70":"code","9c5287f2":"code","aafed80e":"code","dbad556a":"code","fc81cd9e":"code","be23c600":"code","c5ac0a98":"code","c889c2a6":"code","bc8eab64":"code","134540b2":"markdown","5849b92a":"markdown","2f17d691":"markdown","bb7f5835":"markdown","658918f2":"markdown"},"source":{"4da331d6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","619998de":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n%matplotlib inline","68299bc1":"data = pd.read_csv('..\/input\/50-startups\/50_Startups.csv')\ndata.head()","7548a3c7":"X=data.iloc[:,:4]\ny=data.iloc[:,4]","b6f13a70":"X.head()","9c5287f2":"y.head()","aafed80e":"states=pd.get_dummies(data['State'],drop_first=True)\nstates.head()","dbad556a":"X_data=pd.concat([X,states],axis=1).drop('State',axis=1)\nX_data.head()","fc81cd9e":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler()\nX_scaled=scaler.fit_transform(X_data)\nX_scale=pd.DataFrame(X_scaled)\nX_scale.columns=['R&D Spend','Administration','Marketing Spend','Florida','New York']\nX_scale.head()\n","be23c600":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X_scale,y,test_size=0.2,random_state=0)\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","c5ac0a98":"from sklearn.linear_model import LinearRegression\nregressor=LinearRegression()\nregressor.fit(X_train,y_train)","c889c2a6":"y_pred=regressor.predict(X_test)\ny_pred","bc8eab64":"from sklearn.metrics import r2_score\nscore=r2_score(y_test,y_pred)\nscore","134540b2":"# Creating The Model","5849b92a":"# Splitting The Data","2f17d691":"**Since 'state' has categorical data, so converting the data into dummy variables**","bb7f5835":"# Scaling The Data","658918f2":"# Accuracy of the Data"}}