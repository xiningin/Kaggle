{"cell_type":{"9fdaaa07":"code","736946c2":"code","31f35401":"code","ca1f6662":"code","c943bb10":"code","f5f6ff3b":"code","36c07bf9":"code","8bc72791":"code","5e9caff5":"code","93296335":"code","8a950978":"code","f6e7f3b9":"code","6ab4e6cc":"code","4342a738":"code","ffbf1fec":"code","f391290f":"code","0db3828d":"code","896267de":"code","02c21c53":"code","4fe4932b":"code","df713a7b":"code","cc185904":"code","8e596cab":"code","fb99a748":"code","dab1d2fe":"code","bbb1ae41":"code","00904c8c":"code","5350dba9":"code","e9f55c27":"code","9fa9e459":"code","b910ebfe":"code","3d3b2496":"code","af16c498":"markdown","9af3c9d5":"markdown","712a5e16":"markdown","f2258f9a":"markdown","366a200a":"markdown","3bc1bdca":"markdown","deedbdbc":"markdown","68d26ac0":"markdown","a69dd0a5":"markdown","f9ee1da4":"markdown","c502aaea":"markdown","2b816df4":"markdown","33bc4358":"markdown"},"source":{"9fdaaa07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","736946c2":"import numpy as np\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.datasets import load_wine","31f35401":"wine=load_wine()\nwine.data.shape","ca1f6662":"set(wine.target)","c943bb10":"Xtrain,Xtest,Ytrain,Ytest= train_test_split(wine.data,wine.target,test_size=0.3)\n#wine.data,wine.target need to be imput separately ","f5f6ff3b":"clf = DecisionTreeClassifier(random_state=0)# only one tree\nrfc = RandomForestClassifier(random_state=0)\n                             \nclf=clf.fit(Xtrain,Ytrain)\nrfc=rfc.fit(Xtrain,Ytrain)\n                             \nscore_c=clf.score(Xtrain,Ytrain)\nscore_r=rfc.score(Xtrain,Ytrain)\n                             \nprint('single tree:{}'.format(score_c),'forest:{}'.format(score_r))","36c07bf9":"rfc=RandomForestClassifier(n_estimators=25)\nrfc_s=cross_val_score(rfc,wine.data,wine.target,cv=10)# initial data as x,y\n\nclf = DecisionTreeClassifier()\nclf_s=cross_val_score(rfc,wine.data,wine.target,cv=10)\n\nplt.plot(range(1,11),rfc_s,label='RandomForest')#11 means cv=10\nplt.plot(range(1,11),clf_s,label='DecisionTree')\nplt.legend()\nplt.show()","8bc72791":"# learning curve\nsuperpa=[]\nfor i in range(200):\n    rfc=RandomForestClassifier(n_estimators=i+1,n_jobs=-1)\n    rfc_s=cross_val_score(rfc,wine.data,wine.target,cv=10).mean()\n    superpa.append(rfc_s)\nprint(max(superpa),superpa.index(max(superpa))+1)# list.index(object)>>> the index of object in list\nplt.figure(figsize=[20,5])\nplt.plot(range(1,201),superpa)\nplt.show()\n","5e9caff5":"rfc=RandomForestClassifier(n_estimators=25,random_state=2)\nrfc=rfc.fit(Xtrain,Ytrain)\nrfc.estimators_  # look the statues in random forest","93296335":"type(rfc.estimators_[0]) \n# this type can' be store at dataframe to extract specific parameter value","8a950978":"# to know the estimators_ function\nfor i in range(len(rfc.estimators_)):\n    print(rfc.estimators_[i].random_state)","f6e7f3b9":"# identify the performance on test data\nrfc.score(Xtest,Ytest)","6ab4e6cc":"rfc.feature_importances_ # zip","4342a738":"rfc.predict_proba(Xtest) # the proba for each category result","ffbf1fec":"from sklearn.datasets import load_boston\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestRegressor\n","f391290f":"boston=load_boston()\nboston","0db3828d":"boston.data.shape","896267de":"regressor=RandomForestRegressor(n_estimators=100,random_state=0)\ncross_val_score(regressor,boston.data,boston.target,cv=10,scoring='neg_mean_squared_error')\n# if not using scoring, it will output R2 ,(-infinite,1) the more colser to 1, the better.\n# the absoult value of neg_mean_squared_error is mse","02c21c53":"# if you don't know what kind of metrics can be choose on scoring ,you can check here.\nimport sklearn\nsorted(sklearn.metrics.SCORERS.keys())","4fe4932b":"'''\nx_missing_reg=x_missing.copy()\n# find the order of missing value,and return the index from small size to large of missing value\nsortindex=np.argsort(x_mising_reg.isnull().sum(axis=0)).values\nfor i in sortindex:\n    df=x_missing_reg.copy()\n    fillc=df.iloc[:,i]\n    # new matrix drop th smallest columns first and add label\n    df=pd.cancat([df.iloc[:,df.columns!=i],pd.DataFrame(y_full),axis=1)\n    df_0=SimpleImputer(missing_values=np.nan,stragtegy='constant',fill_value=0).fit_transform(df)\n    ytrain=fillc[fillc.notnull()]\n    ytest=fillc[fillc.isnull()]\n    xtrain=df_0[Ytrain.index,:]\n    xtest=df_0[Ytest.index,:]\n    rfc=RandomForestRegressor(n_estimator=100)\n    rfc=rfc.fit(xtrain,ytrain)\n    Ypredict=rfc.predict(xtest)\n    x_missing_reg.lic[x_missing_reg.iloc[:,i].isnull(),i]=ypredict\n\n'''","df713a7b":"# to evaluate the score of four type of X_train\n\n'''\nX=[x_full,x_missing_mean,x_missing_0,x_missing_reg]\nmse=[]\nstd=[]\nfor x in x:\n    estimator=RandomForestRegressor(random_state=0,n_estimators=100)\n    scores=cross_val_score(estimator,x,y_full,scoring='neg_mean_squared_error',cv=5).mean()\n    mse.append(scores*-1) # the smaller mse the better\n[*zip(['x_full','x_missing_mean','x_missing_0','x_missing_reg'],mse)]\n'''","cc185904":"# plt to pic\n'''\nX=[x_full,x_missing_mean,x_missing_0,x_missing_reg]\ncolors=['r','g','b','orange']\nplt.figure(figsize=(12,6))\nax=plt.subplot(111)\n\nfor i in range(len(mse)):\n    ax.barh(i,mes[i],color=colors[i],alpha=0.6,align='center')\n\nax.set_xlim(left=np.min(mse)*0.9,right=np.max(mse)*1.1)\nax.set_ylim(np.range(len(mse))\nax.invert_yaxis()\nplt.show()\n'''","8e596cab":"from sklearn.datasets import load_breast_cancer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np","fb99a748":"data=load_breast_cancer()\ndata.data.shape","dab1d2fe":"set(data.target)","bbb1ae41":"rfc=RandomForestClassifier(n_estimators=100,random_state=90)\nscore_pre=cross_val_score(rfc,data.data,data.target,cv=10).mean()\nscore_pre","00904c8c":"# learning curve to check the range of n_estimator\n\nscore1=[]\nfor i in range(0,200,10):\n    rfc=RandomForestClassifier(n_estimators=i+1,n_jobs=-1,random_state=90) # n_jobs means All cpu cores\n    score=cross_val_score(rfc,data.data,data.target,cv=10).mean()\n    score1.append(score)\nprint(max(score1),(score1.index(max(score1))*10)+1)# find the best score and its number for n_estimators\nplt.figure(figsize=[20,5])\nplt.plot(range(1,201,10),score1)\nplt.show()","5350dba9":"# for the detail number of n_estimators\nscore2=[]\nfor i in range(65,75):\n    rfc=RandomForestClassifier(n_estimators=i,n_jobs=-1,random_state=90) # n_jobs means All cpu cores\n    score=cross_val_score(rfc,data.data,data.target,cv=10).mean()\n    score2.append(score)\nprint(max(score2),(score2.index(max(score2)))+65)# find the best score and its number for n_estimators\nplt.figure(figsize=[20,5])\nplt.plot(range(65,75),score2)\nplt.show()","e9f55c27":"# gridsearch\nparam_grid={'max_depth':np.arange(1,20,1)}\nrfc=RandomForestClassifier(n_estimators=73,random_state=90)\nGS=GridSearchCV(rfc,param_grid,cv=10)\nGS.fit(data.data,data.target)","9fa9e459":"print('best_params_:{}'.format(GS.best_params_))# return the best parameter","b910ebfe":"print('best_score_:{}'.format(GS.best_score_))# return the best score","3d3b2496":"# max_features\nparam_grid={'max_features':np.arange(5,30,1)}\nrfc=RandomForestClassifier(n_estimators=73,random_state=90)\nGS=GridSearchCV(rfc,param_grid,cv=10)\nGS.fit(data.data,data.target)\nprint('best_params_:{}'.format(GS.best_params_),'best_score_:{}'.format(GS.best_score_))","af16c498":"# training","9af3c9d5":"# The basic idea of tuning","712a5e16":"* criterion='mse'#(mean squared error)","f2258f9a":"* nestimators(the number of tree in forest) the largernumber , the higher score\n* criterion(index besed on impurity, there are Gini coefficient and entropy)","366a200a":"# Breast cancer tuning case","3bc1bdca":"# how to use randomforest to fill missing value","deedbdbc":"# cross_validation","68d26ac0":"# RandomForestClassifier","a69dd0a5":"* genelization error which measure the accuracy of the model on unknown data\n\n* When the model complexity is too simple, the learning data is simple, \nso, the model is under-fitting, and the generalization error is relatively large.\nOn the contrary, when the model complexity is too large, \nthe learned data can only be applied to the training data, \nso the model is over-fitted and the generalization error is relatively large.","f9ee1da4":"### max_feature is only the feature can change the model to left or right of genelization error graph","c502aaea":"* since the score is as same as the best n_estimators model, \nso probably we are at the left or middle area of genelization error graph.\nTherefore, even we change the min_samples_leaf,min_samples_split,there will not\nimprove the score","2b816df4":"#### we should first tuning n_estimators ,which will not influence the complexity of model. \n#### and the larger number of n_estimators the better score.\n\n#### then we also can consider to tunning max_depth,min_samples_leaf,min_samples_split, \n#### which can cut down leaf and make model simple.","33bc4358":"# RandomForestRegressor"}}