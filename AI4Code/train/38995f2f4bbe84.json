{"cell_type":{"7b78d9c4":"code","c7c57565":"code","b9ace997":"code","eed1fb1f":"code","014113d7":"code","78f8cac0":"code","e3959eea":"code","3d0eb5eb":"code","d7878fdd":"code","92eb48c6":"code","6f6ebc4e":"code","89b93e59":"code","5ca309ce":"code","b919f1af":"code","cfef6930":"code","174d7983":"code","0812a412":"code","e300d2fe":"code","034d00d5":"code","3b847979":"code","c949ec9b":"code","6bd9f7d4":"code","2cb99869":"code","1542a3dd":"code","9d438ad3":"code","13bb8dd7":"code","8c589abf":"code","63bc6bd7":"code","21678492":"code","b9dd8ccf":"code","3cd78383":"code","b8689b99":"code","e2ed70ca":"code","cd90102d":"code","4dd575ec":"code","c81c4173":"code","b168dec9":"code","435d83bd":"code","a2076ed8":"code","704cadae":"code","cdacdad1":"code","bcc379b5":"code","f5051397":"code","b82b2613":"code","400e6647":"code","826b3776":"code","4ec759d4":"markdown"},"source":{"7b78d9c4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c7c57565":"from numpy.random import seed\nseed(1)\nfrom tensorflow import set_random_seed\nset_random_seed(2)","b9ace997":"df = pd.read_csv('..\/input\/creditcard.csv')","eed1fb1f":"df.head()","014113d7":"df.describe()","78f8cac0":"df.isnull().sum()","e3959eea":"df = df.drop('Time',axis=1)","3d0eb5eb":"X = df.drop('Class',axis=1).values \ny = df['Class'].values","d7878fdd":"X.shape","92eb48c6":"X -= X.min(axis=0)\nX \/= X.max(axis=0)","6f6ebc4e":"X.mean()","89b93e59":"X.shape","5ca309ce":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train,y_test = train_test_split(X,y,test_size=0.1)","b919f1af":"from keras.models import Model\nfrom keras.layers import Input, Dense","cfef6930":"data_in = Input(shape=(29,))\nencoded = Dense(12,activation='tanh')(data_in)\ndecoded = Dense(29,activation='sigmoid')(encoded)\nautoencoder = Model(data_in,decoded)","174d7983":"autoencoder.compile(optimizer='adam',loss='mean_squared_error')","0812a412":"autoencoder.fit(X_train,\n                X_train,\n                epochs = 20, \n                batch_size=128, \n                validation_data=(X_test,X_test))","e300d2fe":"X_test.mean()","034d00d5":"pred = autoencoder.predict(X_test[0:10])","3b847979":"import matplotlib.pyplot as plt\nimport numpy as np\n\nwidth = 0.8\n\nprediction   = pred[9]\ntrue_value    = X_test[9]\n\nindices = np.arange(len(prediction))\n\nfig = plt.figure(figsize=(10,7))\n\nplt.bar(indices, prediction, width=width, \n        color='b', label='Predicted Value')\n\nplt.bar([i+0.25*width for i in indices], true_value, \n        width=0.5*width, color='r', alpha=0.5, label='True Value')\n\nplt.xticks(indices+width\/2., \n           ['V{}'.format(i) for i in range(len(prediction))] )\n\nplt.legend()\n\nplt.show()","c949ec9b":"encoder = Model(data_in,encoded)","6bd9f7d4":"enc = encoder.predict(X_test)","2cb99869":"np.savez('enc.npz',enc,y_test)","1542a3dd":"#from sklearn.manifold import TSNE","9d438ad3":"#tsne = TSNE(verbose=1,n_iter=300)","13bb8dd7":"#res = tsne.fit_transform(enc)","8c589abf":"'''\nfig = plt.figure(figsize=(10,7))\nscatter =plt.scatter(res[:,0],res[:,1],c=y_test,cmap='coolwarm', s=0.6)\nscatter.axes.get_xaxis().set_visible(False)\nscatter.axes.get_yaxis().set_visible(False)\n'''","63bc6bd7":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\n\nfrom keras.layers import Input, Dense, Lambda\nfrom keras.models import Model\nfrom keras import backend as K\nfrom keras import metrics","21678492":"batch_size = 100\noriginal_dim = 29\nlatent_dim = 6\nintermediate_dim = 16\nepochs = 50\nepsilon_std = 1.0\n","b9dd8ccf":"x = Input(shape=(original_dim,))\nh = Dense(intermediate_dim, activation='relu')(x)\nz_mean = Dense(latent_dim)(h)\nz_log_var = Dense(latent_dim)(h)","3cd78383":"def sampling(args):\n    z_mean, z_log_var = args\n    epsilon = K.random_normal(shape=(K.shape(z_mean)[0], latent_dim), mean=0.,\n                              stddev=epsilon_std)\n    return z_mean + K.exp(z_log_var \/ 2) * epsilon","b8689b99":"# note that \"output_shape\" isn't necessary with the TensorFlow backend\nz = Lambda(sampling, output_shape=(latent_dim,))([z_mean, z_log_var])","e2ed70ca":"# we instantiate these layers separately so as to reuse them later\ndecoder_h = Dense(intermediate_dim, activation='relu')\nh_decoded = decoder_h(z)\n\ndecoder_mean = Dense(original_dim)\nx_decoded_mean = decoder_mean(h_decoded)","cd90102d":"# instantiate VAE model\nvae = Model(x, x_decoded_mean)","4dd575ec":"# Compute VAE loss\nxent_loss = original_dim * metrics.mean_squared_error(x, x_decoded_mean)\nkl_loss = - 0.5 * K.sum(1 + z_log_var - K.square(z_mean) - K.exp(z_log_var), axis=-1)\nvae_loss = K.mean(xent_loss + kl_loss)","c81c4173":"vae.add_loss(vae_loss)","b168dec9":"from keras.optimizers import RMSprop\nvae.compile(optimizer=RMSprop(lr=0.1))\n#vae.summary()\n","435d83bd":"vae.fit(X_train,\n        shuffle=True,\n        epochs=epochs,\n        batch_size=256,\n        validation_data=(X_test, None))","a2076ed8":"pred = autoencoder.predict(X_test[0:10])","704cadae":"\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nwidth = 0.8\n\nprediction   = pred[1]\ntrue_value    = X_test[1]\n\nindices = np.arange(len(highPower))\n\nfig = plt.figure(figsize=(10,7))\n\nplt.bar(indices, prediction, width=width, \n        color='b', label='Predicted Value')\n\nplt.bar([i+0.25*width for i in indices], true_value, \n        width=0.5*width, color='r', alpha=0.5, label='True Value')\n\nplt.xticks(indices+width\/2., \n           ['T{}'.format(i) for i in range(len(pred))] )\n\nplt.legend()\n\nplt.show()","cdacdad1":"frauds = np.where(y_train == 1)","bcc379b5":"encoder = Model(x,z_mean)","f5051397":"fraud_encodings = encoder.predict(X_train[frauds],batch_size=128)","b82b2613":"fraud_encodings.shape","400e6647":"decoder_input = Input(shape=(latent_dim,))\n_h_decoded = decoder_h(decoder_input)\n_x_decoded_mean = decoder_mean(_h_decoded)\ngenerator = Model(decoder_input, _x_decoded_mean)","826b3776":"more_frauds = generator.predict(fraud_encodings)","4ec759d4":"# VAE"}}