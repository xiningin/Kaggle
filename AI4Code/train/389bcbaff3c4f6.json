{"cell_type":{"b16aa948":"code","6f22237c":"code","639161b7":"code","127373ca":"code","2faf8b73":"code","e70bbceb":"code","521e518f":"code","8b38cc8f":"code","d787de64":"code","b06148e5":"code","dba9d53e":"code","5cba10e5":"code","f6e04517":"code","553df394":"code","ef335ba6":"code","cc5ada92":"code","1788a771":"code","925499d1":"code","1773962a":"code","1ace33e9":"code","6202e89e":"code","446b0034":"code","e7b856a4":"code","e9804c5d":"code","66550279":"code","95376018":"markdown","bef6ba0c":"markdown","001214d8":"markdown","e34338da":"markdown","d27c42d8":"markdown","16b6a452":"markdown","7d2632a6":"markdown","8dafdbf7":"markdown","4e611429":"markdown"},"source":{"b16aa948":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6f22237c":"import matplotlib.pyplot as plt\nimport seaborn as sns","639161b7":"df = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')","127373ca":"df.head()","2faf8b73":"df.info() #Zero null values","e70bbceb":"df.describe()","521e518f":"df['output'].unique() #Validating that theri is no noise data in output column","8b38cc8f":"print(f\"Percentage of people with more chance of heart-attack (1): {df['output'].value_counts()[1]\/df['output'].count()*100}%\")\nprint(f\"Percentage of people with less chance of heart-attack (1): {df['output'].value_counts()[0]\/df['output'].count()*100}%\")","d787de64":"df.nunique().plot()\nplt.show()\nprint(df.nunique())","b06148e5":"df_numeric_cols = [['age', 'trtbps'], \n                   ['chol', 'thalachh'], \n                   ['oldpeak']]\nrow_num = 3\ncol_num = 2\nfig, axes = plt.subplots(row_num, col_num, figsize=(15,15))\nfor row in range(row_num):\n    for col in range(col_num):\n        if row == row_num-1 and col == col_num-1:\n            axes[row,col].set_axis_off()\n            break\n        sns.kdeplot(data=df, \n                    x=df_numeric_cols[row][col], \n                    ax=axes[row,col],\n                    hue = 'output',\n                    bw_adjust=.30)\n        axes[row,col].set_xlabel(f\"{df_numeric_cols[row][col].title()}\\n\\n{df.groupby(['output']).describe()[df_numeric_cols[row][col]]}\")\nplt.subplots_adjust(wspace=0.25, hspace=0.6)","dba9d53e":"import scipy\ncorr_values = np.zeros(shape=(5,2))\ncorr_values = pd.DataFrame(corr_values, columns = ['Feature', 'Point-Biserial Correlation'])\nfor index, col in enumerate(['age','trtbps','chol','thalachh','oldpeak']):\n    corr, p_value = scipy.stats.pointbiserialr(df[col], df['output'])\n    corr_values.loc[index,[\"Feature\"]] = col\n    corr_values.loc[index, [\"Point-Biserial Correlation\"]] = corr","5cba10e5":"df_numeric_cols = [['age', 'trtbps'], \n                   ['chol', 'thalachh'], \n                   ['oldpeak']]\nrow_num = 3\ncol_num = 2\nfig, axes = plt.subplots(row_num, col_num, figsize=(15,12))\nfor row in range(row_num):\n    for col in range(col_num):\n        if row == row_num-1 and col == col_num-1:\n            axes[row,col].set_axis_off()\n            break\n        sns.scatterplot(data=df, \n                    x=df_numeric_cols[row][col], \n                    y='output', \n                    ax=axes[row,col],\n                    hue = 'output')\n        axes[row,col].set_xlabel(f\"{df_numeric_cols[row][col].title()}\")","f6e04517":"corr_values.style.set_table_attributes(\"style='display:inline'\").set_caption('Point-Biserial Correlation b\/w Feature and Output')","553df394":"df_cat_cols = [['sex', 'cp', 'fbs'], \n                ['restecg', 'exng', 'slp'], \n                ['caa', 'thall', 'output']]\nrow_num = 3\ncol_num = 3\nfig, axes = plt.subplots(row_num, col_num, figsize=(20,15))\nfor row in range(row_num):\n    for col in range(col_num):\n        if row == row_num-1 and col == col_num-1:\n            axes[row,col].set_axis_off()\n            break\n        sns.countplot(data=df, \n                    x=df_cat_cols[row][col],\n                    ax=axes[row,col],\n                    hue = 'output')\n        axes[row,col].set_xlabel(f\"{df_cat_cols[row][col].title()}\")\nplt.subplots_adjust(hspace=0.25)","ef335ba6":"from sklearn.model_selection import train_test_split","cc5ada92":"X_train, X_test, y_train, y_test=train_test_split(df.drop('output', axis  = 1),\n                                                  df['output'],\n                                                  random_state=1)","1788a771":"import sklearn\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import make_pipeline, Pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier, StackingClassifier\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import auc","925499d1":"numeric_cols = ['age', 'trtbps','chol', 'thalachh','oldpeak']\ncat_cols = ['sex', 'cp', 'fbs','restecg', 'exng', 'slp','caa', 'thall']","1773962a":"numeric_features = numeric_cols\ncat_features = cat_cols\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', StandardScaler(with_mean=False), numeric_features),\n        ('cat', OneHotEncoder(handle_unknown = 'ignore'), cat_features)\n        ])\n\nX_train_scale=preprocessor.fit_transform(X_train)\nX_test_scale=preprocessor.transform(X_test)","1ace33e9":"models = [('clf_Grad',GradientBoostingClassifier(learning_rate = 0.005,\n                                                 n_estimators = 30)),\n          ('clf_DN1',MLPClassifier(early_stopping  = True)),\n          ('clf_SVC',SVC())]","6202e89e":"stacking=StackingClassifier(estimators=models,\n                            cv=10,\n                            n_jobs=-1)","446b0034":"stacking.fit(X_train_scale,y_train)","e7b856a4":"print(f\"Accuracy of the model on Test Data: {stacking.score(X_test_scale,y_test)*100}%\")","e9804c5d":"preds = stacking.predict(X_test_scale)\nfpr, tpr, thresholds = sklearn.metrics.roc_curve(y_test, preds)","66550279":"print(f\"AUC metric of the model on Test Data: {auc(fpr,tpr)*100}%\")","95376018":"## **Exploratory Data Analysis - Story-Telling**\n\n### **Basic Information and Summary Statistics**","bef6ba0c":"### **As observed**: \n\n* **Slight Negative Correlation**: We observe that **trtbps** is **slightly low** when **output** is 1 (more chance of heart attack)\n* **Moderate Negative Correlation**: We observe that **age** is **moderately low** when **output** is 1 (more chance of heart attack)\n\n* **Moderately High Negative Correlation**: We observe that **oldpeak** is **moderately low** when **output** is 1 (more chance of heart attack)\n\n* **Moderately Positive Correlation**: We observe that **thalachh** is **moderately high** when **output** is 1 (more chance of heart attack)","001214d8":"### **Correlation between numerical features and 'output' variable with two discrete values - 0,1**:\n**Note**: Since one variable is continuous and the other is categorical, we use Point-Biserial Correlation","e34338da":"### **As observed**:\n* **Zero 'caa' (number of major vessels (0-3))**: High chance of heart attack (1) can be found among groups with zero major vessel\n* **'thall' (Thal rate)**: People having thal rate as 2 have high chance of heart attack\n* **'cp' (Chest Pain type)**: People having chest pain type 0 (no chest pain) have low chance of heart attack; chest pain type 2 (atypical angina) has high chance of heart attack","d27c42d8":"### **Pre-processing Numerical and Categorical Data**","16b6a452":"### **As observed from above distributions, following variables has a proper numerical distribution and are not mere numerically encoded categorical varibles**:\n\n* **age**: Age of the patient\n* **trtbps**: resting blood pressure (in mm Hg)\n* **chol**: cholestoral in mg\/dl fetched via BMI sensor\n* **thalachh**: maximum heart rate achieved\n* **oldpeak**: Previous peak","7d2632a6":"## **Predictive Modeling**","8dafdbf7":"### **Model Evaluation: Accuracy and AUC**","4e611429":"### **Stacking Models**"}}