{"cell_type":{"08e7f388":"code","b9f2aff6":"code","9975fffc":"code","c400681e":"code","34051aad":"code","87710648":"code","3f39f4eb":"code","55680afa":"code","063caf06":"code","ad1d4a51":"code","9308de75":"code","55d6ea35":"code","bb774e6c":"code","990a0dcb":"code","87512946":"code","ef3d3c26":"code","380485b7":"code","ba49afe9":"code","0dcfc9ae":"code","bf909327":"code","1e8e00d5":"code","54782edc":"code","024badc7":"code","04cb4d0d":"code","7ca4d63a":"code","93b607f9":"code","a704ab68":"code","dfbead8d":"code","8fe14cd5":"code","5d1d3d4c":"code","20623537":"code","fd9c67bb":"code","af86a500":"code","20fb2c75":"code","0bc171a1":"code","75611be6":"code","fab69cb5":"code","86dce960":"code","a26e5b1a":"code","0cd96061":"markdown","bdb64ee7":"markdown","2b2dd955":"markdown","a81398de":"markdown","69eee2db":"markdown"},"source":{"08e7f388":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b9f2aff6":"stroke=pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","9975fffc":"stroke","c400681e":"stroke.shape","34051aad":"stroke.info()","87710648":"stroke.describe(include=['object'])","3f39f4eb":"data_cat= [col for col in stroke.columns.values if stroke[col].dtype=='object']","55680afa":"data_cat","063caf06":"categorical_values=stroke[data_cat]\ncategorical_values","ad1d4a51":"numerical_variables=stroke.drop(categorical_values,axis=1)\nnumerical_variables","9308de75":"total=numerical_variables.isnull().sum().sort_values(ascending=True)\npercentage=(numerical_variables.isnull().sum())\/(numerical_variables.isnull().count()).sort_values(ascending=True)\nmissing_values_num=pd.concat([total,percentage],axis=1,keys=['total','percenatge'])\nmissing_values_num","55d6ea35":"for col in numerical_variables.columns.values:\n    missing_values=stroke[col].isnull().sum()\n    \nif missing_values>50:\n        numerical_variables=numerical_variables.drop(col,axis=1)\nelse:\n        numerical_variables=numerical_variables.fillna(numerical_variables[col].median())\n","bb774e6c":"from scipy.stats import skew\nnumerical_variables_skew=numerical_variables.apply(lambda x:skew(x.dropna()))","990a0dcb":"numerical_variables_skew=numerical_variables_skew[numerical_variables_skew>1]","87512946":"numerical_variables_skew","ef3d3c26":"numerical_variables_skew.index","380485b7":"numerical_variables[numerical_variables_skew.index]=np.log1p(numerical_variables[numerical_variables_skew.index])","ba49afe9":"numerical_variables.hist(figsize=(20,10),bins=50,xlabelsize=8,ylabelsize=8)","0dcfc9ae":"numerical_variables=(numerical_variables-numerical_variables.min())\/(numerical_variables.max()-numerical_variables.min())","bf909327":"numerical_variables","1e8e00d5":"total=categorical_values.isnull().sum().sort_values(ascending=True)\npercentage=(categorical_values.isnull().sum())\/(categorical_values.isnull().count()).sort_values(ascending=True)\nmissing_values_cat=pd.concat([total,percentage],axis=1,keys=['total','percenatge'])\nmissing_values_cat","54782edc":"for col in categorical_values.columns.values:\n    missing_values=categorical_values[col].isnull().sum()\n    \nif missing_values>50:\n        categorical_values=categorical_values.drop(col,axis=1)\nelse:\n        categorical_values=categorical_values.fillna('XXX')\n","024badc7":"new_data=pd.concat([numerical_variables,categorical_values],axis=1)","04cb4d0d":"new_data.shape","7ca4d63a":"new_data","93b607f9":"new_data.shape","a704ab68":"new_data","dfbead8d":"from sklearn.preprocessing import LabelEncoder\nlab=LabelEncoder()\n\n\nnew_data['gender']=lab.fit_transform(new_data['gender'])\nnew_data['ever_married']=lab.fit_transform(new_data['ever_married'])\nnew_data['work_type']=lab.fit_transform(new_data['work_type'])\nnew_data['Residence_type']=lab.fit_transform(new_data['Residence_type'])\nnew_data['smoking_status']=lab.fit_transform(new_data['smoking_status'])","8fe14cd5":"x=new_data.iloc[:,new_data.columns!='stroke']\ny=new_data.iloc[:,new_data.columns=='stroke']\n","5d1d3d4c":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=1234)","20623537":"from sklearn.preprocessing import StandardScaler\ndt=StandardScaler()\nx_train_s=dt.fit_transform(x_train)\nx_test_s=dt.transform(x_test)","fd9c67bb":"print('y_train',y_train.shape)\nprint('y_test',y_test.shape)\nprint('x_train',x_train.shape)\nprint('x_test',x_test.shape)","af86a500":"import statsmodels.api as sm\nlogit=sm.Logit(y_train,x_train_s)\nmodel1=logit.fit()\nmodel1.summary()","20fb2c75":"predict1=model1.predict(x_test_s)","0bc171a1":"predicted1=pd.DataFrame(predict1)","75611be6":"predicted1","fab69cb5":"predicted1=np.where(predicted1[0]>0.50,0,1)","86dce960":"from sklearn.metrics import classification_report\nprint(classification_report(predicted1,y_test))\n","a26e5b1a":"cols = ['Model','R-Squared Value','ROC Score', 'Precision Score', 'Recall Score','Accuracy Score',\n        'Kappa Score']\nmodels_report = pd.DataFrame(columns = cols)\nfrom sklearn import metrics\ntmp1 = pd.Series({'Model': \" Logistic Regression Base Model\",\n                  'R-Squared Value': model1.prsquared,\n                 'ROC Score' : metrics.roc_auc_score(y_test, predicted1),\n                 'Precision Score': metrics.precision_score(y_test, predicted1),\n                 'Recall Score': metrics.recall_score(y_test, predicted1),\n                 'Accuracy Score': metrics.accuracy_score(y_test, predicted1),\n                 'Kappa Score':metrics.cohen_kappa_score(y_test, predicted1)})\n\nmodel_report1 = models_report.append(tmp1, ignore_index = True)\nmodel_report1","0cd96061":"Label Encoder","bdb64ee7":"Checking the number of categorical variables ","2b2dd955":"missing values treatment of categorical variables","a81398de":"splitting OF DATASETS","69eee2db":"Categorical variables missing values treatment"}}