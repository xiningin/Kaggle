{"cell_type":{"8bb3d752":"code","0848f83e":"code","29241e4e":"code","98532026":"code","184065ff":"code","a51ebc29":"code","24f141d3":"code","83e7df21":"code","7686021a":"code","c5d571e5":"code","cf8fe260":"code","d207a56d":"code","eea7228e":"code","4608bde6":"code","9d912d24":"code","4dd0f946":"code","a78da501":"code","d4185c07":"code","56956f4b":"code","af0b83e5":"code","c9cdff6a":"code","e0015fe0":"code","9be2a352":"code","94f45f47":"code","51a775b9":"code","2fe411fa":"code","45cca27d":"code","5e4fa741":"code","c368974b":"code","1cecba27":"code","e2c8d5f6":"code","89aac1dc":"code","33560126":"code","423283b2":"code","87f54347":"code","6f5d47f0":"code","fa0d80e7":"code","3e630583":"code","10c6b9b0":"code","7d4c0828":"markdown","baeb6c50":"markdown","fbf1203f":"markdown","32e8df83":"markdown","7632b2cb":"markdown","fc78dfce":"markdown","ca20f8af":"markdown","48e02942":"markdown","7610a63b":"markdown","ad0ea786":"markdown","b52e9d1d":"markdown","3045ba01":"markdown"},"source":{"8bb3d752":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline\n\n# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets","0848f83e":"from keras.datasets import mnist\n\nfrom keras.models import Sequential, load_model\n\nfrom keras.layers import Dense, Dropout, Flatten\n\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\nfrom keras.utils.np_utils import to_categorical","29241e4e":"# Affichage des fichiers dans le r\u00e9pertoire de donn\u00e9es Kaggle\nimport cv2\nimport os\nimport glob","98532026":"global_dir=\"\/kaggle\/input\/dice-d4-d6-d8-d10-d12-d20-images\/dice-d4-d6-d8-d10-d12-d20\/dice\/train\/\"\nlabels = ['d10','d12','d20','d4','d6', 'd8']\nX=[]\ny=[]\nfor img_dir in os.listdir(global_dir):\n    if img_dir in labels:\n        data_path = os.path.join(global_dir + \"\/\" + img_dir,'*g')\n        files = glob.glob(data_path)\n        for f1 in files:\n            img = cv2.imread(f1)\n            img = cv2.resize(img, (100,100))\n            img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n            X.append(np.array(img))\n            y.append(labels.index(img_dir))","184065ff":"np.array(X).shape\nX = np.array(X)\ny = np.array(y)\nX.shape","a51ebc29":"X[0][0]","24f141d3":"X = X \/ 255\nprint(X[0][0])","83e7df21":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)\n","7686021a":"plt.figure(figsize=(20,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(X_train[i])\n    plt.title(labels[y_train[i]])","c5d571e5":"y_train1 = to_categorical(y_train)\ny_test1 = to_categorical(y_test)\nnum_classes = len(labels)","cf8fe260":"y_train","d207a56d":"y_train1","eea7228e":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(100, 100, 3), activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","4608bde6":"model.summary()","9d912d24":"train = model.fit(X_train, y_train1, validation_data=(X_test, y_test1), epochs=20, batch_size=200, verbose=1)","4dd0f946":"scores = model.evaluate(X_test, y_test1, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","a78da501":"print(train.history['accuracy'])\nprint(train.history['val_accuracy'])","d4185c07":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","56956f4b":"plot_scores(train)","af0b83e5":"y_cnn = model.predict_classes(X_test)\ncm = confusion_matrix(y_cnn,y_test)\nprint(cm)\nplt.figure(figsize = (12,10))","c9cdff6a":"plt.figure(figsize=(40,50))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j]) & (i<50):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        pred_classe = y_cnn[j].argmax(axis=-1)\n        plt.title('%s \/ %s' % (labels[int(y_cnn[j])], labels[int(y_test[j])]))\n        i+=1","e0015fe0":"model = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(100, 100, 3), activation='relu'))\nmodel.add(Conv2D(32, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Conv2D(20, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","9be2a352":"model.summary()","94f45f47":"train = model.fit(X_train, y_train1, validation_data=(X_test, y_test1), epochs=30, batch_size=200, verbose=1)\n\n# Test\nscores = model.evaluate(X_test, y_test1, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","51a775b9":"plot_scores(train)","2fe411fa":"scores = model.evaluate(X_test, y_test1, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","45cca27d":"from keras.applications import VGG16","5e4fa741":"vgg16 = VGG16(weights='imagenet', include_top=False, input_shape=(100,100,3))\nvgg16.trainable = False","c368974b":"vgg16.summary()\n","1cecba27":"model = Sequential()\nmodel.add(vgg16)\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(1))","e2c8d5f6":"model.summary()\n","89aac1dc":"model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])\n","33560126":"train = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200, verbose=1)\n","423283b2":"# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","87f54347":"for layer in vgg16.layers[15:]:\n    layer.trainable=True\nfor layer in vgg16.layers[0:15]:\n    layer.trainable=False","6f5d47f0":"model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])\ntrain = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200, verbose=1)","fa0d80e7":"plot_scores(train)","3e630583":"y_cnn = model.predict_classes(X_test)\n","10c6b9b0":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (y_cnn[j] != y_test[j]) & (i<50):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        pred_classe = y_cnn[j].argmax(axis=-1)\n        plt.title('%d \/ %d' % (y_cnn[j], y_test[j]))\n        i+=1","7d4c0828":"on utilise le dataset dice-d4-d6-d8-d10-d12-d20 : https:\/\/www.kaggle.com\/ucffool\/dice-d4-d6-d8-d10-d12-d20-images","baeb6c50":"## Transfert Learning","fbf1203f":"On d\u00e9finit une fonction pour afficher un graphique des scores :","32e8df83":"On attrivue \u00e0 chaque image un label correspondant \u00e0 son r\u00e9pertoire.","7632b2cb":"On va utiliser un mod\u00e8le pr\u00e9d\u00e9fini dans Keras (VGG16) :\n","fc78dfce":"On d\u00e9compose en ensemble d'apprentissage et de validation :","ca20f8af":"On affiche 50 erreurs faites par notre mod\u00e8le.","48e02942":"Normalisation entre 0 et 1","7610a63b":"## Une couche convolutionnelle","ad0ea786":"On va utiliser utiliser une couche convolutionnelle pour l'extraction des caract\u00e9ristiques, et une couche dense pour la classification :","b52e9d1d":"## Mod\u00e8le CNN plus profond","3045ba01":"On transforme les listes Python en tableau :"}}