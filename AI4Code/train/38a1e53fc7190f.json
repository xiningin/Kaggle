{"cell_type":{"eaa7ccf7":"code","0a5f5331":"code","0e2052d6":"code","91c9fede":"code","5fbf3392":"code","4ccd20b2":"code","d9a1d09b":"code","5f8f12f8":"code","8497818b":"code","09b88c23":"code","ac6b9f0d":"code","961bee85":"code","ba036725":"code","9e24c2d6":"code","ef2b9e4c":"code","225de3f1":"code","9a713c66":"code","9fe57152":"code","a685595b":"code","393cfeff":"code","1b869dcf":"code","8def98f4":"code","ea4ac584":"code","2c909ceb":"code","cb5ee77f":"code","4d7eec1a":"code","be09fc28":"code","f19d57c5":"code","4c27bb74":"code","f54155df":"code","74f47bb8":"code","2960d897":"markdown","8001f7eb":"markdown","2b568277":"markdown","0fdf77f8":"markdown","09f2b156":"markdown","4764055f":"markdown","e4544531":"markdown","8b813491":"markdown","4315172e":"markdown","b127daa3":"markdown","1d4a2c53":"markdown","cbbec679":"markdown","c63e29f8":"markdown","fa41a52a":"markdown","26b2683e":"markdown","174252f6":"markdown","d8364114":"markdown","c578e285":"markdown","d82fb8e3":"markdown","1eac085c":"markdown","373de105":"markdown","c2fab6d7":"markdown","5a9f0b0f":"markdown","b269ff3e":"markdown","1b69d3ec":"markdown","de7050cb":"markdown","c33a2af5":"markdown","1202baa2":"markdown","c90ebbc6":"markdown","353a4766":"markdown","479ed31c":"markdown","a5a7da2b":"markdown","1764b052":"markdown","b5deb064":"markdown","60782045":"markdown","25e3c195":"markdown","f83cc07a":"markdown","f1579cba":"markdown","ddc41b30":"markdown","74d9207c":"markdown","e047a8c3":"markdown","32c5107c":"markdown","86931444":"markdown","03fcc715":"markdown","c4458f45":"markdown","3005c361":"markdown","50a25305":"markdown","f426a577":"markdown","720f34a0":"markdown","6d039e7f":"markdown","ce074516":"markdown","5943d1b6":"markdown","9ba0afb5":"markdown","b72c0503":"markdown","c39b589a":"markdown","78ef16f6":"markdown","4d43f44a":"markdown","eb70544b":"markdown","d9fbebae":"markdown","cb6479e8":"markdown","680e0dae":"markdown"},"source":{"eaa7ccf7":"import pandas as pd\nimport numpy as np","0a5f5331":"dummy_data1 = {\n        'id': ['1', '2', '3', '4', '5'],\n        'Feature1': ['A', 'C', 'E', 'G', 'I'],\n        'Feature2': ['B', 'D', 'F', 'H', 'J']}\n\ndf1 = pd.DataFrame(dummy_data1, columns = ['id', 'Feature1', 'Feature2'])\n\ndf1","0e2052d6":"dummy_data2 = {\n        'id': ['1', '2', '6', '7', '8'],\n        'Feature1': ['K', 'M', 'O', 'Q', 'S'],\n        'Feature2': ['L', 'N', 'P', 'R', 'T']}\ndf2 = pd.DataFrame(dummy_data2, columns = ['id', 'Feature1', 'Feature2'])\n\ndf2","91c9fede":"dummy_data3 = {\n        'id': ['1', '2', '3', '4', '5', '7', '8', '9', '10', '11'],\n        'Feature3': [12, 13, 14, 15, 16, 17, 15, 12, 13, 23]}\ndf3 = pd.DataFrame(dummy_data3, columns = ['id', 'Feature3'])\n\ndf3","5fbf3392":"df_row = pd.concat([df1, df2],ignore_index=True)\n\ndf_row","4ccd20b2":"df_merge_col=pd.merge(df_row,df3,on='id')","d9a1d09b":"df_merge_col","5f8f12f8":"df_merge_difkey = pd.merge(df_row, df3, left_on='id', right_on='id')\n\ndf_merge_difkey","8497818b":"user_usage=pd.read_csv('https:\/\/raw.githubusercontent.com\/shanealynn\/Pandas-Merge-Tutorial\/master\/user_usage.csv')\nuser_usage.head()","09b88c23":"# user_usage shape\nuser_usage.shape","ac6b9f0d":"# user device data\nuser_device=pd.read_csv('https:\/\/raw.githubusercontent.com\/shanealynn\/Pandas-Merge-Tutorial\/master\/user_device.csv')\nuser_device.head()","961bee85":"# user_device shape\nuser_device.shape","ba036725":"device=pd.read_csv('https:\/\/raw.githubusercontent.com\/shanealynn\/Pandas-Merge-Tutorial\/master\/android_devices.csv')\ndevice.head()","9e24c2d6":"# device shape\ndevice.shape","ef2b9e4c":"data1=pd.merge(user_usage,user_device[['use_id', 'platform', 'device']],on='use_id',how='outer',indicator=True)\ndata1.head()","225de3f1":"data1.shape","9a713c66":"data1.head()","9fe57152":"result = pd.merge(user_usage,\n                 user_device[['use_id', 'platform', 'device']],\n                 on='use_id')\n\nresult.head()","a685595b":"print(result.shape)","393cfeff":"result = pd.merge(user_usage,\n                 user_device[['use_id', 'platform', 'device']],\n                 on='use_id', \n                 how='left')","1b869dcf":"result.tail()","8def98f4":"result = pd.merge(user_usage,\n                 user_device[['use_id', 'platform', 'device']],\n                 on='use_id', \n                 how='right')","ea4ac584":"result.head()","2c909ceb":"result.tail()","cb5ee77f":"result = pd.merge(user_usage,\n                 user_device[['use_id', 'platform', 'device']],\n                 on='use_id', \n                 how='outer', \n                 indicator=True)","4d7eec1a":"print(user_usage.shape)\nprint(user_device.shape)","be09fc28":"# First, add the platform and device to the user usage - use a left join this time.\n\nresult = pd.merge(user_usage,\n                 user_device[['use_id', 'platform', 'device']],\n                 on='use_id',\n                 how='left')\n","f19d57c5":"result.head()","4c27bb74":"result.shape","f54155df":"# Now, based on the \"device\" column in result, match the \"Model\" column in devices.\ndevice.rename(columns={\"Retail Branding\": \"manufacturer\"}, inplace=True)\nresult = pd.merge(result, \n                  device[['manufacturer', 'Model']],\n                  left_on='device',\n                  right_on='Model',\n                  how='left')\n\n","74f47bb8":"result.head()","2960d897":"<a id=\"section8\"><\/a>\n### 8. Comming back to our original problem of phones ","8001f7eb":"<center><img src=\"https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets%2F784297%2F1347930%2Fmerge_ops.jpg?GoogleAccessId=databundle-worker-v2@kaggle-161607.iam.gserviceaccount.com&Expires=1595224271&Signature=WPlHfSH3a2RdTi2TbBp3gGBf8VuMriyBFRTh5VaChWYLQfcV8ekmET%2Fhff%2Fq3%2FQmn9bRh%2BuaWtXa%2BfoY3edztz2QrPK2aX6Z3TtXHarId4D%2BHUeJEH8EuQbRJ1RAKhumxmDcjSM40UwxrSHzXDjHcXHyyzFR814jzUmNJ7uq8uiIsrBzBXQKoqVDMp%2FLRqrpXY%2F9y9sQiwBtJSvee825v4yexpiPpJZ%2FBLuxZQC%2BcDfnGTDoCP1p5mq8MdpdR4XgUE4GFe0yJS1eVn5%2FyIzkgqlf8TF0p17aOQMsg1cvLUfRkDVZR2yNqFtssxPfVzf1d43gxtSUJOxfn5lVzO5Cgw%3D%3D\"\/><\/center>","2b568277":"<a id=\"section402\"><\/a>\n### 4.2 User Device Data\n\n- Dataset containing details of an individual \u201cuse\u201d of the system, with dates and device information.","0fdf77f8":"### Using left_on and right_on to merge with different column names","09f2b156":"<a id=\"section302\"><\/a>\n### 3.2 Merge DataFrames\n","4764055f":"## Joining DataFrames in Pandas","e4544531":"<a id='section2'><\/a>\n## 2. Import library","8b813491":"Left join example in pandas. Specify the join type in the __how__ command. A __left join__, or __left merge__, keeps every row from the left dataframe.","4315172e":"Using all above three dataset we would like to determine if the usage patterns for __users differ__ between __different devices__. For example, do users using <font color='red'>__Samsung devices__<\/font> use __more__ call minutes than those using <font color='red'>__LG devices__<\/font>? This is a toy problem given the small sample size in these dataset, but is a perfect example of __where merges are required__.","b127daa3":"### Case 1","1d4a2c53":"<a id=\"section6\"><\/a>\n## 7. Setps to Follow \n\n- In this example scenario, we will need to perform the following steps:","cbbec679":"<a id=\"section3\"><\/a>\n## 3. Create dataframe to perform different operations","c63e29f8":"<center><img src=\"https:\/\/images.squarespace-cdn.com\/content\/v1\/5732253c8a65e244fd589e4c\/1464122981217-RIYH5VL2MF1XWTU2DKVQ\/ke17ZwdGBToddI8pDm48kMjn7pTzw5xRQ4HUMBCurC5Zw-zPPgdn4jUwVcJE1ZvWEV3Z0iVQKU6nVSfbxuXl2c1HrCktJw7NiLqI-m1RSK4p2ryTI0HqTOaaUohrI8PIO5TUUNB3eG_Kh3ocGD53-KZS67ndDu8zKC7HnauYqqk\/image-asset.png\" height=300 width=300\/>","fa41a52a":"You can notice that the DataFrames are now merged into a single DataFrame based on the __common values present__ in the __id column__ of both the DataFrames. \n    - For example, here id value 1 was present with both A, B and K, L in the DataFrame df_row hence this id got repeated twice in the final DataFrame df_merge_col with repeated value 12 of Feature3 which came from DataFrame df3.","26b2683e":"__Observation__ : __Decrement__ in the number of __rows__\n\n- Result of merging __user_usage__ with user __user_device__ based on a common column.\n","174252f6":"<a id=\"section403\"><\/a>\n### 4.3 Different devices data\n\n- Dataset with device and manufacturer data, which lists all __Android devices__ and their __model code__.","d8364114":"<a id=\"section702\"><\/a>\n### 7.2  Left merge \/ Left join","c578e285":"## Table of Content\n\n1. [Introduction](#section1)\n2. [Library import](#section2)\n3. [Create DataFrame](#section3)\n    - 3.1 [Concatenate DataFrames](#section301)\n    - 3.2 [Merge DataFrames](#section302)\n    \n4. [With Real Life dataset](#section4)\n    - 4.1 [User usage data](#section401)\n    - 4.2 [User Device Data](#section402)\n    - 4.3 [Different devices data](#403)\n5. [Problem Statement](#section5)\n6. [Different merge operations](#section6)\n7. [Setps to Follow](#section7)\n    - 7.1 [Inner Merge \/ Inner Join](#section701)\n    - 7.2 [Left merge \/ Left join](#section702)\n    - 7.3 [Right merge \/ Right join](#section703)\n    - 7.4 [Outer merge \/ Full outer join](#section704)\n    \n8. [Comming back to our original problem of phones](#section8)","d82fb8e3":"<a id=\"section301\"><\/a>\n### 3.1 Concatenate DataFrames","1eac085c":"<a id=\"section1\"><\/a>\n## 1. Introduction\n\n\n__Joining__ and __merging DataFrames__ is the core process to start with __data analysis__ and __machine learning__ tasks. It is one of the __toolkits__ which every __Data Analyst or Data Scientist__ should master because in almost all the cases data comes from __multiple source__ and __files__.\n\n-  When you want to build some machine learning model on a data came from __multiple sources__ you need you may need to merge multiple csv files together in a __single DataFrame__.\n\n- Thankfully you have the most popular library in python, __pandas__ to your rescue! pandas provides various facilities for easily combining together __Series__, __DataFrames__, and __Panel objects__ with various kinds of set logic for the indexes and relational algebra functionality in the case of __join \/ merge-type__ operations.\n\nTo join these DataFrames, pandas provides multiple functions like \n- <font color='blue'>concat()<\/font>\n- <font color='blue'>merge()<\/font>\n- <font color='blue'>join()<\/font>","373de105":"### Note: \nThe merging operation at its simplest takes a __left dataframe__ (the first argument), a __right dataframe__ (the second argument), and then a __merge column name__, or a column to merge __on__. \n- In the __output\/result__, rows from the left and right dataframes are matched up where there are common values of the merge column specified by \u201con\u201d.","c2fab6d7":"#### Step 1:\n\nFor each row in the __user_usage__ dataset \u2013 make a new column that contains the __device__ code from the __user_devices__ dataframe. i.e. for the first row, the __use_id__ is __22787__, so we go to the __user_devices__ dataset, find the __use_id 22787__, and copy the value from the __device__ column across.\n\n#### Step 2: \n\nAfter this is complete, we take the new device columns, and we find the corresponding __Retail Branding__ and __Model__ from the devices dataset.\n\n#### Step 3: \n\nFinally, we can look at different statistics for usage splitting and grouping data by the __device manufacturers__ used.","5a9f0b0f":"<a id=\"section703\"><\/a>\n### 7.3 Right merge \/ Right join","b269ff3e":"<img src=\"https:\/\/files.realpython.com\/media\/Merging-Joining-and-Concatenating-in-Pandas_Watermarked_1.e45698a508a4.jpg\" height=600 width=600\/>\n\n<center>\n[Real Python](https:\/\/files.realpython.com)\n<\/center>","1b69d3ec":"An __outer merge__ using __Pandas__, also referred to as a __full outer join__ or just __outer join__. An outer join can be seen as a combination of left and right joins, or the opposite of an inner join. In outer joins, every row from the left and right dataframes is retained in the result, with NaNs where there are no matched join variables.","de7050cb":"- At this point, the platform and device columns are included\n\n\n- In the result along with all columns from user_usage","c33a2af5":"Refrence: \n\n- https:\/\/www.shanelynn.ie\/merge-join-dataframes-python-pandas-index-1\/\n","1202baa2":"- Lets see how we can correctly add the __device__ and __platform__ columns to the __user_usage__ dataframe using the Pandas Merge command.","c90ebbc6":"# <center> Merge() | Join() | Concat()<\/center>","353a4766":"DataFrames df_row (which you created by concatenating __df1__ and __df2__ along the row) and __df3__ on the common column (or key) __id__.","479ed31c":"- Outer merge result using Pandas. Every row from the __left__ and __right__ dataframes is retained in the result, with missing values or numpy NaN values where the merge column doesn\u2019t match.","a5a7da2b":"<center><img src=\"https:\/\/storage.googleapis.com\/kagglesdsdata\/datasets%2F784297%2F1347930%2Fdata%20Merge.png?GoogleAccessId=databundle-worker-v2@kaggle-161607.iam.gserviceaccount.com&Expires=1595219747&Signature=s1q7hSdnci%2BMvhHymlBQq5idowG4%2BXokagmIMOAWMlt86xD2iPbGT65z2v7x%2FS%2B1HKWaaqqrUlyFSCebIWFqJ4EyuVP5LcfZ01E9HzwW751DBq0glWpJZkAO7HTGR8OcNSbgLks%2FjgaM%2BTGhAYrG7ZiY4EeSYoi9G764XQyUCdMWGpP5%2FNJysES6XoJtmFivN9PlM8sa1NKCqgqw%2FQHi8xdw701q2pEqrkfpIzqD3iGybV1f9WdCYa0zjCAF%2BPSRWHD%2Fw9Tqwnw9YfFsZu%2FgNdHjkiAgupe9pGJatda7uZO0U8Hsqb8c0Sofbvg0U0tc2YkpJ8Fywzd%2BVn5QPkeDiw%3D%3D\"\/><\/center>","1764b052":"<a id=\"section5\"><\/a>\n## 5. Problem Statement ","b5deb064":"We can repeat this process with a __right join \/ right merge__, simply by replacing __how=left__ with __how=right__ in the Pandas merge command.\n\n","60782045":"[See the complete blog Better to read from this blog](https:\/\/www.shanelynn.ie\/merge-join-dataframes-python-pandas-index-1\/)","25e3c195":"It might happen that the column on which you want to merge the DataFrames have different names (unlike in this case). For such merges, you will have to specify the arguments __left_on__ as the left DataFrame name and __right_on__ as the right DataFrame name, like :","f83cc07a":"__Question__: \n\nWe want to form a single dataframe with columns for user usage figures (__calls per month__, __sms per month__ etc) and also columns with device information (__model, manufacturer__, etc). We will need to __merge__ (or __join__) our sample datasets together into one single dataset for analysis.","f1579cba":"### Important Note: \n\nThere are __linking__ attributes between the sample datasets that are important to note \u2013: __use_id__ is shared between the __user_usage__ and __user_device__, and the __device column__ of __user_device__ and __Model__ column of the __devices dataset__ contain common codes.","ddc41b30":"<a id=\"section4\"><\/a>\n## 4. With Real Life dataset\n\nLet's try to get the better and deeper intution using some some practical data set.\n\n- To explain this we have taken some real data from the __KillBiller application__.","74d9207c":"If you guys have any suggestion for this notebook so we can build this notebook much better further let me know in the comment section.\n\n<center>................**Waiting for your response**...................<\/center>\n<br>\n\n<center><img src='https:\/\/clientinsight.ca\/wp-content\/uploads\/2018\/03\/waiting-for-phone.jpg' height=400 width=500\/><\/center>","e047a8c3":"### Case 2","32c5107c":"<a id=\"section704\"><\/a>\n### 7.4 Outer merge \/ Full outer join","86931444":"<a id=\"section701\"><\/a>\n### 7.1 Inner Merge \/ Inner Join\n\n- Merging user_usage with user_devices","03fcc715":"Question : Where can i implement this knowledge?\n\n- Check this competion\/data and try to apply what you learn. \n    - [Competition to practice](kaggle.com\/vin1234\/starter-janatahack-healthcare-analytics)","c4458f45":"- Result from left-join or left-merge of two dataframes in Pandas. Rows in the left dataframe that have __no corresponding join value__ in the right dataframe are left with __NaN__ values.","3005c361":"<center><img src=\"https:\/\/qph.fs.quoracdn.net\/main-qimg-968c26fb806e35f0f0477328db6f72d8\" height=400 width=400\/><\/center>","50a25305":"<img src=\"https:\/\/shanelynnwebsite-mid9n9g1q9y8tt.netdna-ssl.com\/wp-content\/uploads\/2017\/03\/pandas-merge-join-different-variable-names-copy-e1488722312527.jpg\"\/>","f426a577":"<center><img src=\"https:\/\/images.squarespace-cdn.com\/content\/v1\/5732253c8a65e244fd589e4c\/1464122744888-MVIUN2P80PG0YE6H12WY\/ke17ZwdGBToddI8pDm48kMjn7pTzw5xRQ4HUMBCurC5Zw-zPPgdn4jUwVcJE1ZvWlExFaJyQKE1IyFzXDMUmzc1HrCktJw7NiLqI-m1RSK4p2ryTI0HqTOaaUohrI8PI-FpwTc-ucFcXUDX7aq6Z4KQhQTkyXNMGg1Q_B1dqyTU\/image-asset.png\" height=300 width=300\/>","720f34a0":"<center><img src=\"https:\/\/shanelynnwebsite-mid9n9g1q9y8tt.netdna-ssl.com\/wp-content\/uploads\/2017\/02\/pd-merge_intro_image-e1488724380571.png\"\/><\/center>","6d039e7f":"This particular explaination is take form [shanelynn blog](https:\/\/www.shanelynn.ie\/merge-join-dataframes-python-pandas-index-1\/) . For more indepth knowledge check his blog.","ce074516":"#### <font color='red'> Question : Can I use a for loop?<\/font>\n\n__Yes__. You could write for loops for this task. The first would loop through the use_id in the user_usage dataset, and then find the right element in user_devices. The second for loop will repeat this process for the devices.\n\nHowever, using for loops will be much slower and more verbose than using Pandas merge functionality. So,  if you come across this situation \u2013 __don\u2019t use for loops__.","5943d1b6":"## 6. Different merge operations ","9ba0afb5":"[Read here more cases of concat](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/merging.html)","b72c0503":"<center><img src=\"https:\/\/shanelynnwebsite-mid9n9g1q9y8tt.netdna-ssl.com\/wp-content\/uploads\/2017\/03\/pandas-merge-join-different-variable-names-copy-e1488722312527.jpg\"\/>","c39b589a":"### Using merge indicator to track merges\n\nTo assist with the identification of where rows originate from, Pandas provides an [indicator parameter](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.merge.html) that can be used with the merge function which creates an additional column called ___merge__ in the output that labels the original source for each row.","78ef16f6":"<a id=\"section401\"><\/a>\n### 4.1  User usage data\n\n- Dataset containing users monthly mobile usage statistics","4d43f44a":"The result expected will have the same number of rows as the __right dataframe__, __user_device__, but have several empty, or __NaN__ values in the columns originating in the __left dataframe__, __user_usage__ (namely \u201coutgoing_mins_per_month\u201d, \u201coutgoing_sms_per_month\u201d, and \u201cmonthly_mb\u201d).\n- Conversely, we expect no missing values in the columns originating in the right dataframe, \u201cuser_device\u201d.","eb70544b":"- The columns used in a merge operator do not need to be named the same in both the left and right dataframe. In the second merge above, note that the device ID is called \u201cdevice\u201d in the left dataframe, and called \u201cModel\u201d in the right dataframe.\n\n\n- Different column names are specified for merges in Pandas using the __left_on__ and __right_on__ parameters, instead of using only the \u201con\u201d parameter.\n\n\n- Merging dataframes with different names for the joining variable is achieved using the left_on and right_on arguments to the pandas merge function.","d9fbebae":"The operation above we perform above is called <font color ='red'>__Inner merge__<\/font>\n-  The merging operation at its simplest takes a left dataframe (the first argument), a right dataframe (the second argument), and then a merge column name, or a column to merge \u201con\u201d. In the output\/result, rows from the left and right dataframes are matched up where there are common values of the merge column specified by \u201con\u201d.\n\n\n<center><h3> Through Venn Diagram(Inner Merge)<\/h3><\/center>\n\n<center><img src=\"https:\/\/images.squarespace-cdn.com\/content\/v1\/5732253c8a65e244fd589e4c\/1464122775537-YVL7LO1L7DU54X1MC2CI\/ke17ZwdGBToddI8pDm48kMjn7pTzw5xRQ4HUMBCurC5Zw-zPPgdn4jUwVcJE1ZvWMv8jMPmozsPbkt2JQVr8L3VwxMIOEK7mu3DMnwqv-Nsp2ryTI0HqTOaaUohrI8PIvqemgO4J3VrkuBnQHKRCXIkZ0MkTG3f7luW22zTUABU\/image-asset.png\" height=250 width=250\/><\/center>","cb6479e8":"- For our __left merge__, we expect the result to have the same number of rows as our __left dataframe__ \u201cuser_usage\u201d (240), with missing values for all but 159 of the merged \u201cplatform\u201d and \u201cdevice\u201d columns (81 rows).\n\n\n- In __merge operations__ where a single row in the __left dataframe__ is matched by __multiple rows__ in the __right dataframe__, multiple result rows will be generated. \n\n    i.e. if a __use_id__ value in __user_usage__ appears __twice__ in the __user_device__ dataframe, there will be __two rows__ for that __use_id__ in the join result.","680e0dae":"<center><img src=\"https:\/\/images.squarespace-cdn.com\/content\/v1\/5732253c8a65e244fd589e4c\/1464122797709-C2CDMVSK7P4V0FNNX60B\/ke17ZwdGBToddI8pDm48kMjn7pTzw5xRQ4HUMBCurC5Zw-zPPgdn4jUwVcJE1ZvWEV3Z0iVQKU6nVSfbxuXl2c1HrCktJw7NiLqI-m1RSK4p2ryTI0HqTOaaUohrI8PIO5TUUNB3eG_Kh3ocGD53-KZS67ndDu8zKC7HnauYqqk\/image-asset.png\" height=300 width=300\/>"}}