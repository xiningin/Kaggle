{"cell_type":{"479fb8dc":"code","ec13d4e0":"code","cac2432f":"code","9343fcb4":"code","0db77d9e":"code","5b279071":"code","7060a820":"code","34dac6a9":"code","e225c796":"code","e699800e":"code","7b1aefc5":"code","53f561a8":"code","07132a94":"code","8acbb166":"code","db76255f":"markdown","b7bfb699":"markdown","9b1260b7":"markdown","a6e8801a":"markdown","773e03fb":"markdown","fb63863b":"markdown","f4c3dae5":"markdown","9986026c":"markdown","77386b69":"markdown","a52507a3":"markdown","722caad7":"markdown","6d141186":"markdown","e811d70d":"markdown"},"source":{"479fb8dc":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"openaq\" dataset\ndataset_ref = client.dataset(\"openaq\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)\n\n# List all the tables in the \"openaq\" dataset\ntables = list(client.list_tables(dataset))\n\n# Print names of all tables in the dataset (there's only one!)\nfor table in tables:  \n    print(table.table_id)","ec13d4e0":"# Construct a reference to the \"global_air_quality\" table\ntable_ref = dataset_ref.table(\"global_air_quality\")\n\n# API request - fetch the table\ntable = client.get_table(table_ref)\n\n# Preview the first five lines of the \"global_air_quality\" table\nclient.list_rows(table, max_results=5).to_dataframe()","cac2432f":"table.schema","9343fcb4":"result = [\"{0} {1}\".format(schema.name,schema.field_type) for schema in table.schema]\nresult","0db77d9e":"query=\"\"\"\n    SELECT city FROM `bigquery-public-data.openaq.global_air_quality`\n    \"\"\";\n# Set up the query\nquery_job = client.query(query)\n# API request - run the query, and return a pandas DataFrame\ncities = query_job.to_dataframe()\ncities[:10]","5b279071":"# What five cities have the most measurements?\ncities.city.value_counts().head()","7060a820":"query=\"\"\"\n    SELECT * FROM `bigquery-public-data.openaq.global_air_quality` WHERE averaged_over_in_hours>0.25\n    \"\"\";\n# Set up the query\nquery_job = client.query(query)\n# API request - run the query, and return a pandas DataFrame\ncities = query_job.to_dataframe()\ncities[:15]","34dac6a9":"query=\"\"\"\n    SELECT city FROM `bigquery-public-data.openaq.global_air_quality`\n    GROUP BY \n    city\n    \"\"\";\n# Set up the query\nquery_job = client.query(query)\n# API request - run the query, and return a pandas DataFrame\ncities = query_job.to_dataframe()\ncities[:10]","e225c796":"query=\"\"\"\n    SELECT city,COUNT(*) FROM `bigquery-public-data.openaq.global_air_quality`\n    GROUP BY \n    city\n    \"\"\";\n# Set up the query\nquery_job = client.query(query)\n# API request - run the query, and return a pandas DataFrame\ncities = query_job.to_dataframe()\ncities[:15]","e699800e":"query=\"\"\"\n    SELECT city,COUNT(*)  AS total_city FROM `bigquery-public-data.openaq.global_air_quality`\n    GROUP BY \n    city\n    \"\"\";\n# Set up the query\nquery_job = client.query(query)\n# API request - run the query, and return a pandas DataFrame\ncities = query_job.to_dataframe()\ncities[:15]","7b1aefc5":"query=\"\"\"\n    SELECT city,COUNT(*)  AS total_city FROM `bigquery-public-data.openaq.global_air_quality`\n    GROUP BY city\n    ORDER BY city\n    \"\"\";\n# Set up the query\nquery_job = client.query(query)\n# API request - run the query, and return a pandas DataFrame\ncities = query_job.to_dataframe()\ncities[:15]","53f561a8":"query=\"\"\"\n    SELECT city,COUNT(*)  AS total_city FROM `bigquery-public-data.openaq.global_air_quality`\n    GROUP BY city\n    ORDER BY total_city\n    \"\"\";\n# Set up the query\nquery_job = client.query(query)\n# API request - run the query, and return a pandas DataFrame\ncities = query_job.to_dataframe()\ncities[:10]","07132a94":"query=\"\"\"\n    SELECT city,COUNT(*)  AS total_city FROM `bigquery-public-data.openaq.global_air_quality`\n    GROUP BY city\n    ORDER BY total_city DESC\n    \"\"\";\n# Set up the query\nquery_job = client.query(query)\n# API request - run the query, and return a pandas DataFrame\ncities = query_job.to_dataframe()\ncities[:10]","8acbb166":"query=\"\"\"\n    SELECT city,COUNT(*)  AS total_city FROM `bigquery-public-data.openaq.global_air_quality`\n    GROUP BY city\n    ORDER BY total_city DESC\n    \"\"\";\n# Set up the query\nquery_job = client.query(query)\n# API request - run the query, and return a pandas DataFrame\ncities = query_job.to_dataframe()\ncities.to_csv('cityname_and_totalcity.csv',encoding='utf-8', index=False)","db76255f":"## SQL Keywords: GROUP BY, COUNT, AS, and ORDER BY \n## GROUP BY\nThe `GROUP BY` keyword will aggregate result-set rows that share common criteria (e.g. a column value) and will return all of the unique entries found for such criteria.\n\nThis is a useful keyword for figuring out categorical information on tables.","b7bfb699":"## The Basics of SQL\n### Databases and Tables\n`SQL` allows you to get information from \"structured datasets\". Structured datasets have clear rules and formatting and often times are organized into tables, or data that's formatted in rows and columns.\n\nAn example of unstructured data would be an image file. Unstructured data is inoperable with SQL and cannot be stored in BigQuery datasets or tables (at least natively.)\n\nThe following is an example of a structured dataset\u2014a simple table:\n\n|User|Price|Shipped |\n|---|---|---|---|\n|sani   |35   |yes   |\n|john   |67   | yes  | \n|priya   |75   |no   | \n\nAs we see, the table has columns for User, Price, and Shipped and three rows that are composed of filled in column values.\n\nA Database is essentially a collection of one or more tables. SQL is a structured database management tool, but quite often you will be running queries on one or a few tables joined together\u2014not on whole databases.","9b1260b7":"## AS\nSQL also has an `AS` keyword, which creates an alias of a table or column. An alias is a new name that's given to the returned column or table\u2014whatever `AS` specifies.","a6e8801a":"## Running SELECT, FROM, and WHERE in BigQuery\nYou now have a basic understanding of SQL querying keywords and the BigQuery data paradigm and some data to work with.","773e03fb":"## SELECT and FROM\nSQL is phonetic by nature and before running a query, it's always helpful to first figure out what question you want to ask your data (unless you're just exploring for fun.)\n\nSQL has predefined keywords which you use to translate your question into the pseudo-english SQL syntax so you can get the database engine to return the answer you want.\n\nThe most essential keywords are `SELECT` and `FROM`:\n\n- Use `SELECT` to specify what fields you want to pull from your dataset.\n- Use `FROM` to specify what table or tables we want to pull our data from.\n\nAn example may help understanding. Assume that we have the following table `student`, which has columns `ROLL NO`, `NAME`,`ADDRESS`,`PHONE` and `AGE`:\n![](https:\/\/lh3.googleusercontent.com\/vUlrvCsBWPFZVShRzg67-bd50rD3NsjM6_yqmtwGPCjCAtinFG-9keTUKxnxe5N80mm8BFJenKpq5W9oRjb2VqhYtOwQsA6b_nRPj3VimHDP-h4-yibzgZhTa6HtLFBAzfpxEIYTYHBD2Z1tGz7DeCV7jSbqava_Tu060pJcDPaAFa44lgam_K5qusZRAZM01MqTm9NFoR3bXpNjSuqDoLgFLJwh-jlAUFrnKeBiGNrEn4Px68g_nMyuF7SKemFfe931n8kFpEAfmISCn78NI7axx1VxAiemdmv1uGHaB1UJCck520LrMf1V-VZVQOrDTvFQUMWTzwOKnBqRkaZ6S08_Bpx0GRkXmSfjhC3-RE56vXS6XannuZHvP1q-2JpkI8wbdJzKYxoxR6FiShqUnvUQODhRght0xGW5p82ANoR8hqGdaMsPV6SLBWgV5n57Zgix-t3v8pC1cDZ2rxne42O7i7XEpOBPHI371e_DOrDWJpCWQpgJeYMu72wjvTRYHdHxooAWcf9LChIyblG4otNwhtdy0JTnxTsGzeTCtKbrWYzEdOT3lYmNp4lpjq5-3cEkvaFC4nqvcD77gZ-kvKobxof2uOY8YkpTPBWB6U_ay4bqLx69FrV513mMdzHHVzrWmKV0w388GIm2FF6eZNx5BPm6B_8=w817-h415-no)","fb63863b":"## Save as CSV files","f4c3dae5":"## WHERE\nThe `WHERE` keyword is another `SQL` command that filters tables for specific column values. Say that you want to pull the `NAME` from `student` whose age were greater than 18. You can supplement the query with a `WHERE`, like the following:\n\n`SELECT NAME FROM student WHERE age > 18`\n\nRunning the above returns all NAMES whose age have been greater than 18 to from memory:","9986026c":"## Introduction to SQL for BigQuery\n## Overview\nSQL (Structured Query Language) is a standard language for data operations that allows you to ask questions and get insights from structured datasets. It's commonly used in database management and allows you to perform tasks like transaction record writing into relational databases and petabyte-scale data analysis.","77386b69":"# What is BigQuery\nBigQuery is Google's fully managed, NoOps, low cost analytics database. With BigQuery you can query terabytes and terabytes of data without having any infrastructure to manage or needing a database administrator. BigQuery uses SQL and can take advantage of the pay-as-you-go model. BigQuery allows you to focus on analyzing data to find meaningful insights.","a52507a3":"## Contents\n- Distinguish databases from tables and projects.\n- Use the `SELECT`, `FROM`, and `WHERE` keywords to construct simple queries.\n- Load databases and tables into BigQuery.\n- Execute simple queries on tables.\n- Learn about the `COUNT`, `GROUP BY`, `AS`, and `ORDER BY` keywords.\n- Execute and chain the above commands to pull meaningful data from datasets.\n- Export a subset of data into a CSV file.","722caad7":"And let's say that we want to just pull the data that's found in the `NAME` column. We can do this by running the following query that uses `SELECT` and `FROM`:\n\n`SELECT NAME FROM student`\n\nIf we executed the above command, we would select all the data from the `NAME` column that are found in `student`.\n\nYou can also select multiple columns with the SQL `SELECT` keyword. Say that you want to pull the data that's found in the `ADDRESS` and `PHONE` columns. To do this, modify the previous query by adding another column value to our `SELECT` query (making sure it's separated by a comma!):\n\n`SELECT ADDRESS, PHONE FROM student`\n\nRunning the above retrieves the `ADDRESS` and the `PHONE` data from memory:","6d141186":"## COUNT\nThe `COUNT()` function will return the number of rows that share the same criteria (e.g. column value). This can be very useful in tandem with a `GROUP BY`.","e811d70d":"## ORDER BY\nThe `ORDER BY` keyword sorts the returned data from a query in ascending or descending order based on a specified criteria or column value."}}