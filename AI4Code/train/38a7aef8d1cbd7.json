{"cell_type":{"132f7840":"code","1a4bdd53":"code","e7a8260b":"code","3ffa4200":"code","ede62fc7":"code","05321ac6":"code","e3fde221":"code","9a5c1eb2":"code","dae41841":"code","d0778755":"code","b7f98bfc":"code","663db3dc":"code","c76c4c59":"code","9512de54":"code","7184b763":"code","aa5e2b70":"code","003bf6cd":"code","df2863b9":"code","5b7ead8e":"code","7c814b22":"code","0dbf39e3":"code","c5e2a770":"code","881db940":"code","effa999b":"code","44c61dbe":"code","cccacb1d":"code","def422f4":"code","ab475181":"code","cf5c1424":"code","9e1224be":"code","48ce616a":"code","f5307bd9":"code","293f1b4a":"code","2de1a297":"code","e52605ab":"code","2c3f55c3":"code","5687f6cf":"code","6712deae":"code","5a812364":"code","cf207c4d":"code","2b6eb93a":"code","48193b27":"code","1fd615d8":"code","abf32e54":"code","04207eb6":"code","6fa6b609":"code","1bc326fa":"code","ada0f391":"code","3b5c6772":"code","3945aa19":"code","e4ebfcc5":"code","dc52d88b":"code","85007e05":"code","8eb3bf17":"code","45dd86af":"code","70393d74":"code","a2277904":"code","f7aca18b":"code","18442964":"code","dd8ff4be":"code","3e77e06b":"code","cb6d4a2a":"code","5c6844d5":"code","ba50c136":"code","031664a1":"code","e05f3c83":"code","930cda8a":"code","d7ebaf68":"code","9a2e5a71":"code","77e3c15d":"code","7e33cc08":"code","3af40cd1":"code","6241bda4":"code","1befe584":"code","f19b3537":"code","570fffaf":"markdown","a3cde7e4":"markdown","ef6b8c6c":"markdown","cdc4f4f2":"markdown","4743fd88":"markdown","9a79ac29":"markdown","11c957fc":"markdown","c9ab6753":"markdown","983e9def":"markdown","a564e85b":"markdown","5c599186":"markdown","71cc0665":"markdown","826c440f":"markdown","4b8996e9":"markdown","bd1cd8c0":"markdown","1a157bd6":"markdown","91caf821":"markdown","fa3f77d8":"markdown","6f8ea9c7":"markdown","23029640":"markdown","7799ddee":"markdown","3d848743":"markdown","691162c2":"markdown","fe970fbc":"markdown","a674854a":"markdown","72f8ece9":"markdown","45df503b":"markdown","d6df5c7c":"markdown","aa237d05":"markdown"},"source":{"132f7840":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #data visualization\nimport seaborn as sns #data visualization\nfrom collections import Counter\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1a4bdd53":"train_df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_Passenger_Id = test_df[\"PassengerId\"]","e7a8260b":"train_df.head()","3ffa4200":"train_df.describe()","ede62fc7":"train_df.info()","05321ac6":"def bar_plot(variable):\n    #get variable\n    var = train_df[variable]\n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))","e3fde221":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","9a5c1eb2":"category2 = [\"Cabin\", \"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n\".format(train_df[c].value_counts()))","dae41841":"def plot_hist(variable):\n    plt.figure(figsize=(9,3))\n    plt.hist(train_df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(f\" {variable} distribution with hist\")\n    plt.show()","d0778755":"numeric_var = [\"Fare\",\"Age\",\"PassengerId\"]\nfor i in numeric_var:\n    plot_hist(i)","b7f98bfc":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"],as_index= False).mean().sort_values(by=\"Survived\",ascending=False)","663db3dc":"train_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"],as_index= False).mean().sort_values(by=\"Survived\",ascending=False)","c76c4c59":"train_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"],as_index= False).mean().sort_values(by=\"Survived\",ascending=False)","9512de54":"train_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"],as_index= False).mean().sort_values(by=\"Survived\",ascending=False)","7184b763":"def detect_outliers(df,features):\n    outlier_indices=[]\n    \n    for i in features:\n        # 1st quartile\n        Q1 = np.percentile(df[i],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[i],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # Detect outliers and their indices\n        outlier_list_col = df[(df[i] < Q1 - outlier_step) | (df[i] > Q3 + outlier_step)].index\n        # Store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i , v in outlier_indices.items() if v>2)\n    \n    return multiple_outliers","aa5e2b70":"train_df.iloc[detect_outliers(train_df, [\"Age\", \"SibSp\",\"Parch\",\"Fare\"])]","003bf6cd":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","df2863b9":"train_df.columns[train_df.isnull().any()]","5b7ead8e":"train_df.isnull().sum()","7c814b22":"train_df[train_df[\"Embarked\"].isnull()]","0dbf39e3":"train_df.boxplot(column=\"Fare\",by=\"Embarked\")\nplt.show()","c5e2a770":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","881db940":"train_df[train_df[\"Fare\"].isnull()]","effa999b":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"]==3][\"Fare\"]))","44c61dbe":"train_df[train_df[\"Fare\"].isnull()]","cccacb1d":"train_df[train_df[\"Age\"].isnull()]","def422f4":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()\n#Sex is not informative for age prediction, age distribution seems to be same.","ab475181":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\", data = train_df, kind = \"box\")\nplt.show()\n# 1st class passengers are older than 2nd, and is 2nd older than 3nd class.","cf5c1424":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","9e1224be":"train_df[\"Sex\"] = [1 if i == \"male\" else 0 for i in train_df[\"Sex\"]]#list comprehension\nsns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), annot = True)\nplt.show()","48ce616a":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med=train_df.Age.median()\n    if not np.isnan(age_pred):\n        train_df.Age.iloc[i]=age_pred\n    else:\n        train_df.Age.iloc[i]=age_med","f5307bd9":"train_df[train_df[\"Age\"].isnull()]","293f1b4a":"list1=[\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Pclass\", \"Survived\"]\nf, ax=plt.subplots(figsize=(11,9))\nsns.heatmap(train_df[list1].corr(), annot=True, fmt=\" .2f\", ax=ax)\nplt.show()","2de1a297":"train_df[\"Name\"].head(10)","e52605ab":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","2c3f55c3":"train_df[\"Title\"].head(10)","5687f6cf":"sns.countplot(x = \"Title\", data = train_df)\nplt.xticks(rotation=60)\nplt.show()","6712deae":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Sir\",\"Major\",\"Rev\",\"Jonkheer\",\"Dona\"], \"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]","5a812364":"sns.countplot(x = \"Title\", data = train_df)\nplt.xticks(rotation=60)\nplt.show()","cf207c4d":"train_df[\"Title\"].head(10)","2b6eb93a":"g=sns.factorplot(x=\"Title\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_xticklabels([\"Master\", \"Mrs\", \"Mr\", \"Other\"])\ng.set_ylabels(\"Survival Possibility\")\nplt.show()","48193b27":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)\ntrain_df.head()","1fd615d8":"train_df=pd.get_dummies(train_df, columns=[\"Title\"])\ntrain_df.head()","abf32e54":"train_df.head()","04207eb6":"train_df[\"FSize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","6fa6b609":"train_df.head()","1bc326fa":"g=sns.factorplot(x=\"FSize\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survival Possibility\")\nplt.show()","ada0f391":"train_df[\"FamilySize\"] = [1 if i < 5 else 0 for i in train_df[\"FSize\"]]","3b5c6772":"train_df.head()","3945aa19":"g=sns.factorplot(x=\"FamilySize\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","e4ebfcc5":"train_df = pd.get_dummies(train_df, columns = [\"FamilySize\"])\ntrain_df.head()","dc52d88b":"train_df=pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head(10)","85007e05":"train_df[\"Ticket\"].head()","8eb3bf17":"ticket = []\nfor each in train_df.Ticket:\n    if not each.isdigit():\n        ticket.append(each.replace(\".\", \"\").replace(\"\/\", \"\").strip().split(\" \")[0])\n    else:\n        ticket.append(\"t_i\")\ntrain_df[\"Ticket\"] = ticket\n","45dd86af":"train_df[\"Ticket\"].head(10)","70393d74":"train_df = pd.get_dummies(train_df, columns = ['Ticket'], prefix = \"T\")\ntrain_df.head(10)","a2277904":"sns.countplot(x=\"Pclass\", data=train_df)\nplt.show()","f7aca18b":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Pclass\"])\ntrain_df.head()","18442964":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df=pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head(10)","dd8ff4be":"train_df.drop([\"PassengerId\", \"Cabin\"], axis=1, inplace=True)\ntrain_df","3e77e06b":"train_df_len","cb6d4a2a":"test = train_df[train_df_len:]\ntest.drop(labels =[\"Survived\"], axis = 1, inplace = True)","5c6844d5":"test.head()","ba50c136":"train = train_df[:train_df_len]\nx_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size = 0.3, random_state = 17)","031664a1":"print(\"x_train : \",len(x_train))\nprint(\"x_test : \",len(x_test))\nprint(\"y_train : \",len(y_train))\nprint(\"y_test : \",len(y_test))\nprint(\"test : \",len(test))","e05f3c83":"x_train.head()","930cda8a":"y_train.head()","d7ebaf68":"train_df.head()","9a2e5a71":"random_state = 17\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000],\n                  \"probability\":[False]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","77e3c15d":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","7e33cc08":"cv_result=[100*each for each in cv_result]","3af40cd1":"results=pd.DataFrame({\"Cross Validation Best Scores\": cv_result, \"ML Models\": [\"DecisionTreeClassifier\", \"SVM\", \"RandomForestClassifier\", \"KNeighborsClassifier\", \"LogisticRegression\"]})\nf,ax=plt.subplots(figsize=(12,7))\ng = sns.barplot(data=results, y=\"ML Models\", x=\"Cross Validation Best Scores\")\ng.set_ylabel(\"\")\ng.set_xlabel(\"Accuracy %\")\nplt.show()\nfor i in range(len(results)):\n    print(results[\"ML Models\"][i], \"Accuracy:\", results[\"Cross Validation Best Scores\"][i], \"%\")","6241bda4":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(x_train, y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","1befe584":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_Passenger_Id, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","f19b3537":"test_survived","570fffaf":"<a id='23'><\/a><br>\n\n## Ensemble Modeling","a3cde7e4":"<a id='2'><\/a><br>\n# Variable Description\n\n    1.PassengerId : Unique id number to each passenger\n    2.Survived : Passenger survive(1) or die(0)\n    3.Pclass : Passenger class\n    4.Name : Name\n    5.Sex : Gender of passenger\n    6.Age : Age of passenger\n    7.SibSp : Number of siblings\/spouses\n    8.Parch : Number of parents\/children\n    9.Ticket : Ticket number\n    10.Fare : Amount of money spent on ticket\n    11.Cabin : Cabin category\n    12.Embarked : Port where passenger embarked(C = Cherbourg, Q = Queenstown, S = Southampton)","ef6b8c6c":"<a id='14'><\/a><br>\n## Family Size","cdc4f4f2":"<a id='3'><\/a><br>\n# Univarite Variable Analysis\n* Categorical Variable : Survived, Sex, Pclass, Embarked, Cabin, Name, Ticket, Sibsp and Parch\n* Numerical Variable : Age, PassengerId and Fare","4743fd88":"### SibSp - Survived","9a79ac29":"<a id='18'><\/a><br>\n## Sex","11c957fc":"<a id='9'><\/a><br>\n## Find Missing Value","c9ab6753":"<a id='17'><\/a><br>\n## Pclass","983e9def":"<a id='22'><\/a><br>\n## Hyperparameter Tuning -- Grid Search -- Cross Validation","a564e85b":"### Pclass - Survived","5c599186":"<a id='4'><\/a><br>\n## Categorical Variable :","71cc0665":"<a id='7'><\/a><br>\n# Outlier Detection","826c440f":"<a id='10'><\/a><br>\n## Fill Missing Value","4b8996e9":"<a id='21'><\/a><br>\n\n## Train - Test Split","bd1cd8c0":"<a id='11'><\/a><br>\n# Correlation Between SibSp -- Parch -- Age -- Fare -- Pclass -- Survived","1a157bd6":"<a id='19'><\/a><br>\n## Drop Passenger ID and Cabin","91caf821":"# **Introduction**\n<img src= \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/f\/fd\/RMS_Titanic_3.jpg\" alt =\"Titanic\" style='width: 640px;'>\n\nRMS Titanic was a British passenger liner operated by the White Star Line that sank in the North Atlantic Ocean on 15 April 1912, after striking an iceberg during her maiden voyage from Southampton to New York City. Of the estimated 2,224 passengers and crew aboard, more than 1,500 died, making the sinking at the time one of the deadliest of a single ship and the deadliest peacetime sinking of a superliner or cruise ship to date. With much public attention in the aftermath, the disaster has since been the material of many artistic works and a founding material of the disaster film genre.\n\n<font color = 'blue'>\nContent:\n    \n1. [Load and Check Data](#1)\n2. [Variable Description](#2)\n    * [Univarite Variable Analysis](#3)\n        * [Categorical Variable](#4)\n        * [Numerical Variable](#5)\n3. [Basic Data Analysis](#6)   \n4. [Outlier Detection](#7) \n5. [Missing Value](#8)    \n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n6. [Correlation Between SibSp -- Parch -- Age -- Fare -- Pclass -- Survived](#11)    \n7. [Feature Engineering](#12)  \n    * [Name -- Title](#13)\n    * [Family Size](#14)\n    * [Embarked](#15)\n    * [Ticket](#16)\n    * [Pclass](#17)\n    * [Sex](#18)\n    *[Drop Passenger ID and Cabin](#19)\n8. [Modeling](#20) \n    * [Train - Test Split](#21)\n    * [Hyperparameter Tuning -- Grid Search -- Cross Validation](#22)\n    * [Ensemble Modeling](#23)\n    * [Prediction and Submission](#24)","fa3f77d8":"<a id='13'><\/a><br>\n## Name -- Title","6f8ea9c7":"<a id='15'><\/a><br>\n## Embarked","23029640":"<a id='5'><\/a><br>\n## Numerical Variable :","7799ddee":"<a id='6'><\/a><br>\n\n# Basic Data Analysis\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","3d848743":"<a id='1'><\/a><br>\n\n# Load and Check Data","691162c2":"<a id='8'><\/a><br>\n# Missing Value\n    * Find Missing Value\n    * Fill Missing Value","fe970fbc":"<a id='24'><\/a><br>\n\n## Prediction and Submission","a674854a":"<a id='12'><\/a><br>\n# Feature Engineering","72f8ece9":"<a id='20'><\/a><br>\n\n# Modeling","45df503b":"### Sex - Survived","d6df5c7c":"<a id='16'><\/a><br>\n## Ticket","aa237d05":"### Parch - Survived"}}