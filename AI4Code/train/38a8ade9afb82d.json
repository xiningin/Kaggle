{"cell_type":{"23c60ce3":"code","84716fac":"code","a8c88dd3":"code","8f4f52ab":"code","5999fb17":"code","f531135a":"code","7a589444":"code","68e6f11f":"code","538a5376":"code","769f1172":"code","a6f2eec1":"code","603d3dec":"code","39d96fbd":"code","a08185d4":"code","bb676568":"code","68c7f600":"code","38d1c469":"code","be1bc128":"code","a3fd8620":"code","73418de1":"code","b25234a3":"code","74a72c2a":"code","cd5dd168":"code","193248aa":"code","db6e8f13":"code","0e08f84a":"code","846a148c":"code","d86cef3d":"code","d5ccab2d":"code","4dfce4bd":"code","2b6bad88":"code","62b30d03":"code","d35e27c5":"code","e7c0c508":"code","405f37c4":"markdown","4da81c67":"markdown","f7764613":"markdown","5b4909d4":"markdown","a23b1f4e":"markdown","68f56f98":"markdown","486b3d5a":"markdown","b1a2239e":"markdown","aea5e80c":"markdown","3beeb25a":"markdown","d59cb53b":"markdown"},"source":{"23c60ce3":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nimport numpy as np \nimport pandas as pd \n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier","84716fac":"train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv')","a8c88dd3":"train_df.head()","8f4f52ab":"train_df.info()","5999fb17":"train_df.describe()","f531135a":"#Finding numerical and categorical data column names\nnum_variables = [ i for i in train_df.columns if train_df.dtypes[i]!='object' ]\ncat_variables = [ i for i in train_df.columns if train_df.dtypes[i]=='object' ]","7a589444":"num_variables","68e6f11f":"cat_variables","538a5376":"train_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","769f1172":"train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)","a6f2eec1":"train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)","603d3dec":"g = sns.FacetGrid(train_df, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","39d96fbd":"grid = sns.FacetGrid(train_df, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","a08185d4":"def show_missing(df):\n    #Shows percentage of null values in each column\n    pd.options.display.max_rows = None\n    display(((df.isnull().sum()\/len(df))*100))\n","bb676568":"show_missing(train_df)","68c7f600":"show_missing(test_df)","38d1c469":"train_df = train_df.drop(['Ticket', 'Cabin'], axis=1)\ntest_df = test_df.drop(['Ticket', 'Cabin'], axis=1)","be1bc128":"train_df['Title'] = train_df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\npd.crosstab(train_df['Title'], train_df['Sex'])","a3fd8620":"train_df['Title'] = train_df['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ntrain_df['Title'] = train_df['Title'].replace('Mlle', 'Miss')\ntrain_df['Title'] = train_df['Title'].replace('Ms', 'Miss')\ntrain_df['Title'] = train_df['Title'].replace('Mme', 'Mrs')\ntrain_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","73418de1":"test_df['Title'] = test_df.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\npd.crosstab(test_df['Title'], test_df['Sex'])","b25234a3":"test_df['Title'] = test_df['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\ntest_df['Title'] = test_df['Title'].replace('Mlle', 'Miss')\ntest_df['Title'] = test_df['Title'].replace('Ms', 'Miss')\ntest_df['Title'] = test_df['Title'].replace('Mme', 'Mrs')","74a72c2a":"#Encoding Title column\nle = LabelEncoder()\nle.fit(train_df['Title'])\ntrain_df['Title'] = le.transform(train_df['Title'])\ntest_df['Title'] = le.transform(test_df['Title'])","cd5dd168":"train_df = train_df.drop(['Name', 'PassengerId'], axis=1)\ntest_df = test_df.drop(['Name'], axis=1)","193248aa":"#Encoding Sex column\nle_sex = LabelEncoder()\nle_sex.fit(train_df['Sex'])\ntrain_df['Sex'] = le_sex.transform(train_df['Sex'])\ntest_df['Sex'] = le_sex.transform(test_df['Sex'])","db6e8f13":"train_df['FamilySize'] = train_df['SibSp'] + train_df['Parch'] + 1\ntest_df['FamilySize'] = test_df['SibSp'] + test_df['Parch'] + 1","0e08f84a":"show_missing(train_df)","846a148c":"show_missing(test_df)","d86cef3d":"# Fill missing values with mean and mode\ntrain_df['Age'].fillna(train_df['Age'].mean(), inplace =True)\ntest_df['Age'].fillna(train_df['Age'].mean(), inplace =True)\n\ntrain_df['Embarked'].fillna(train_df['Embarked'].mode()[0], inplace =True)\ntest_df['Embarked'].fillna(train_df['Embarked'].mode()[0], inplace =True)\n\n\ntest_df['Fare'].fillna(train_df['Fare'].mean(), inplace =True)","d5ccab2d":"show_missing(train_df)","4dfce4bd":"#Encoding Embarked column\nle_emb = LabelEncoder()\nle_emb.fit(train_df['Embarked'])\ntrain_df['Embarked'] = le_emb.transform(train_df['Embarked'])\ntest_df['Embarked'] = le_emb.transform(test_df['Embarked'])","2b6bad88":"#Training data splitting to train and validation sets\nX_train, X_test, y_train, y_test = train_test_split(train_df.drop(['Survived'], axis = 1), train_df['Survived'], test_size = 0.2, random_state = 0)","62b30d03":"#Try Logestic Regression Model\nlogreg = LogisticRegression(solver='liblinear')\nlogreg.fit(X_train, y_train)\nacc_log = round(logreg.score(X_test, y_test) * 100, 2)\nprint('Validation Accuracy =', acc_log)\ny_pred = logreg.predict(test_df.drop(['PassengerId'], axis=1))","d35e27c5":"#Try KNN\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, y_train)\nacc_knn = round(knn.score(X_test, y_test) * 100, 2)\nprint('Validation Accuracy =', acc_knn)\npredictions = knn.predict(test_df.drop(['PassengerId'], axis=1))","e7c0c508":"sample_submission= pd.DataFrame({'PassengerId':np.asarray(test_df.PassengerId), 'Survived':y_pred})\nsample_submission.to_csv(\"submission.csv\", index=False)","405f37c4":"This shows that there is a relation between survival rate and Pclass coulmn (higher survival rate for females)","4da81c67":"This shows that there is a relation between survival rate and SibSp coulmn (higher survival rate for persons who had Sibling or Spouse)","f7764613":"* Most passengers in Pclass=1 survived\n* Infant passengers in Pclass=2 and Pclass=3 mostly survived\n* Pclass=3 had most passengers, however most did not survive","5b4909d4":"# Model Implementation","a23b1f4e":"### Add a new column 'FamilySize' equals to number of persons in family ","68f56f98":"# Data Preprocessing & Feature Engineering","486b3d5a":"* Infants (Age <=4) had high survival rate.\n* Oldest passengers (Age = 80) survived.\n* Large number of 15-25 year olds did not survive.","b1a2239e":"# Data Exploration","aea5e80c":"### Add a new coulmn 'Title'","3beeb25a":"I'll choose logestic regression model","d59cb53b":"This shows that there is a relation between survival rate and Pclass coulmn (higher survival rates for class 1)"}}