{"cell_type":{"f1bc3dfd":"code","1903d142":"code","ac62b6ee":"code","2b4220c0":"code","8c0a894b":"code","72106279":"code","17462551":"code","4c1a2248":"code","aef5e2d2":"code","d6fb4d42":"markdown","75400215":"markdown","1e1799e0":"markdown","0c7803a4":"markdown"},"source":{"f1bc3dfd":"from tqdm import tqdm\nimport zipfile\nimport gzip\nimport os\nimport shutil \nfrom glob import glob\nimport numpy as np \n# neural imaging\nimport nilearn as nl\nimport nibabel as nib\nimport nilearn.plotting as nlplt\nfrom scipy import  ndimage as ndimage\nfrom PIL import Image\n\nimport cv2 \nimport os\nimport torch\nimport pandas as pd\nfrom skimage import io, transform\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision import transforms, utils\nimport uuid\n# Ignore warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nplt.ion()","1903d142":"def save_as_image(image,folder,root_dir):\n    # only save images with at least 50*50 non zero pixels\n    if np.count_nonzero(image)<50*50:\n        return\n    save_dir = os.path.join(root_dir,folder)\n    if not os.path.exists(save_dir):\n        os.makedirs(save_dir)\n    name = str(uuid.uuid4())\n    image = (image - image.min()) \/ (image.max() - image.min()) * 255.0 \n    image = np.array(image).astype(np.uint8)\n    image = cv2.resize(image,(256,256))\n    cv2.imwrite(f\"{save_dir}\/{name}.png\", image )\n","ac62b6ee":"brast_root = \"..\/input\/preprocessing\/dataset\"\ntumor_modalities= [\"*t1.nii*\",\"*t2.nii*\", \"*t1ce.nii*\", \"*flair.nii*\"]\nbrast_seg_paths =glob(os.path.join(brast_root,\"*\/*\" , \"*seg.nii*\"))\n\nbrast_paths = []\nfor modal in tumor_modalities:\n    brast_paths.extend(glob(os.path.join(brast_root,\"*\/*\" , modal)))\nbrast_paths = np.asarray(brast_paths).reshape(-1,4, order=\"F\")\n# # filter slices that segmentation has value as tumor and others as normal and save them as image\nprint(brast_paths[0])\nprint(brast_seg_paths[0])\nbrast_paths = brast_paths[:50]\nbrast_seg_paths = brast_seg_paths[:50]\nnormal_root_dir =\"dataset\/normal_brast\"\ntumor_root_dir =\"dataset\/tumor_brast\"\nseg_treshhold =50\nfor i in range(len(brast_seg_paths)):\n    seg = np.asanyarray(nib.load(brast_seg_paths[i]).dataobj)\n    modalites = [np.asanyarray(nib.load(modal).dataobj) for modal in brast_paths[i]]\n    # normalize image\n    modalites =[((image\/(image.max()- image.min()+1.0))*255).astype(np.uint8) for image in modalites]\n    folder = brast_seg_paths[i].split(\"\/\")[-2]\n    print(folder,i)\n    # axial\n    for slice in range(seg.shape[-1]):\n        if np.sum(seg[...,slice])>seg_treshhold :\n            [save_as_image(image[...,slice],folder+\"_axial\",tumor_root_dir) for image in modalites]\n        elif np.sum(seg[...,slice])==0:\n            [save_as_image(image[...,slice],folder+\"_axial\",normal_root_dir) for image in modalites ] \n    # coronal\n    for slice in range(seg.shape[0]):\n        if np.sum(seg[slice])>seg_treshhold :\n            [save_as_image(image[slice],folder+\"_coronal\",tumor_root_dir) for image in modalites]\n        elif np.sum(seg[slice])==0:\n            [save_as_image(image[slice],folder+\"_coronal\",normal_root_dir) for image in modalites ] \n\n    # sagittal\n    for slice in range(seg.shape[1]):\n        if np.sum(seg[:,slice,:])>seg_treshhold :\n            [save_as_image(image[:,slice,:],folder+\"_sagittal\",tumor_root_dir) for image in modalites]\n        elif np.sum(seg[:,slice,:])==0:\n            [save_as_image(image[:,slice,:],folder+\"_sagittal\",normal_root_dir) for image in modalites ] \n","2b4220c0":"# Tcga","8c0a894b":"tcga_root = \"..\/input\/lgg-mri-segmentation\/\"\nnormal_root_dir =\"dataset\/normal\"\ntumor_root_dir =\"dataset\/tumor_tcga\"\nall = glob(os.path.join(tcga_root,\"*\/*\", \"*.tif\"))\nmasks= glob(os.path.join(tcga_root,\"*\/*\", \"*mask.tif\"))\ntumor_images = list(set(all)^set(masks))\ntumor_images = sorted(tumor_images)\nfor i, path in enumerate(tumor_images):\n    mask_path = path.replace(\".tif\", \"_mask.tif\")\n    if(os.path.isfile(mask_path)):\n        mask_sum  = np.sum(cv2.imread(mask_path))\n        if mask_sum > 10:\n            image= cv2.imread(path)\n            image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n            image = np.asanyarray(image)\n            folder = path.split(\"\/\")[-2]\n            print(folder , i)\n            save_as_image(image,folder,tumor_root_dir)\n\n","72106279":"! cp -r ..\/input\/brain-mri-images-for-brain-tumor-detection\/no .\/dataset\/normal\/\n! cp -r ..\/input\/brain-mri-images-for-brain-tumor-detection\/yes .\/dataset\/tumor\/\n","17462551":"! cp -r  ..\/input\/brain-tumor-classification-mri\/Training\/glioma_tumor .\/dataset\/tumor\/\n! cp -r  ..\/input\/brain-tumor-classification-mri\/Training\/meningioma_tumor .\/dataset\/tumor\/\n! cp -r  ..\/input\/brain-tumor-classification-mri\/Training\/pituitary_tumor .\/dataset\/tumor\/\n! cp -r  ..\/input\/brain-tumor-classification-mri\/Training\/no_tumor .\/dataset\/normal\/\n\n! cp -r  ..\/input\/brain-tumor-classification-mri\/Testing\/glioma_tumor .\/dataset\/tumor\/\n! cp -r  ..\/input\/brain-tumor-classification-mri\/Testing\/meningioma_tumor .\/dataset\/tumor\/\n! cp -r  ..\/input\/brain-tumor-classification-mri\/Testing\/pituitary_tumor .\/dataset\/tumor\/\n! cp -r  ..\/input\/brain-tumor-classification-mri\/Testing\/no_tumor .\/dataset\/normal\/","4c1a2248":"# shutil.make_archive(\"dataset\",\"zip\",\".\/dataset\")\n# !rm -r dataset","aef5e2d2":"\n# import torchvision\n# ixi_no_skull = \"1zBQl0mL3RQ3f8OrREQupUDsqS-6pHKGZ\" #1-3SmcOUvzs_9QCo0YyDcHVae6HFPacJ4\n# torchvision.datasets.utils.download_file_from_google_drive(ixi_no_skull, \".\/\", filename=\"ixinoskull.zip\", md5=None)\n# shutil.unpack_archive(\"ixinoskull.zip\", \".\/dataset\/normal_ixi_no_skull\")\n# os.remove(\"ixinoskull.zip\")\n# ixi = \"1ORrUE_EO_BtdOzZIog6zBtt6pU2DXBmz\" #1-2Cxtx-g7pt791dDDf5Gf-JONI6HO9aT\n# torchvision.datasets.utils.download_file_from_google_drive(ixi, \".\/\", filename=\"ixi.zip\", md5=None)\n# shutil.unpack_archive(\"ixi.zip\", \".\/dataset\/normal_ixi\")\n# os.remove(\"ixi.zip\")\n","d6fb4d42":"# Brast","75400215":"# Others","1e1799e0":"# TCGA ","0c7803a4":"# IXI"}}