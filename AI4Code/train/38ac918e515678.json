{"cell_type":{"925815ae":"code","21a6a817":"code","39f61e03":"code","45b82200":"code","76dcca76":"code","849d3c5d":"code","2f6d2b90":"code","2ad29269":"code","12c2a984":"code","76269d8f":"code","3de8f0d8":"code","4bef2edc":"code","089e9c76":"code","fe5c791a":"code","4476ac8d":"code","22aa85e5":"code","ca54d1d2":"code","04b2ffec":"code","3c2b0389":"code","b79e05a9":"code","2ea0d311":"code","3e34af03":"code","a305954a":"code","89973b7b":"markdown","498ec543":"markdown","2686d59e":"markdown","7c23a5f1":"markdown","0ef37e34":"markdown","1c823d6a":"markdown","e05d0773":"markdown","20b0d592":"markdown","422d8844":"markdown","d0891a13":"markdown","9c5efcc4":"markdown","6a1d94e4":"markdown"},"source":{"925815ae":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# model building libraries\n\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics","21a6a817":"df = pd.read_csv('..\/input\/real-estate-price-prediction\/Real estate.csv')","39f61e03":"df.head(10)","45b82200":"df.info()","76dcca76":"df.drop('No', axis = 1, inplace = True)","849d3c5d":"df","2f6d2b90":"sns.pairplot(df)","2ad29269":"X = df.drop(['Y house price of unit area'], axis = 1)\ny = df['Y house price of unit area']","12c2a984":"train_RMSE_List = []\ntest_RMSE_List = []\n\nfor i in range(1,10):\n    \n    #preprocessing\n    \n    polynomial_converter = PolynomialFeatures(degree=i, include_bias=False)\n    poly_features = polynomial_converter.fit_transform(X)\n    \n    #split\n    \n    X_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)\n    \n    #train the model\n    \n    polymodel = LinearRegression()\n    polymodel.fit(X_train, y_train)\n    \n    #predicting on both train and test data\n    \n    y_train_pred = polymodel.predict(X_train)\n    y_test_pred = polymodel.predict(X_test)\n    \n    #evaluation\n    \n    train_RMSE = np.sqrt(metrics.mean_squared_error(y_train, y_train_pred))\n    test_RMSE = np.sqrt(metrics.mean_squared_error(y_test, y_test_pred))\n    \n    #append\n    \n    train_RMSE_List.append(train_RMSE)\n    test_RMSE_List.append(test_RMSE)","76269d8f":"train_RMSE_List","3de8f0d8":"test_RMSE_List","4bef2edc":"plt.plot(range(1,6), train_RMSE_List[:5], label = 'Train RMSE')\nplt.plot(range(1,6), test_RMSE_List[:5], label = 'Test RMSE')\n\nplt.title('polynomial degree VS RMSE', fontsize = 15, y=1.07)\nplt.xlabel('polynomial degree', fontsize = 12)\nplt.ylabel('RMSE', fontsize = 12)\n\nplt.legend()","089e9c76":"final_polynomial_converter = PolynomialFeatures(degree=2, include_bias=False)\nfinal_poly_features = final_polynomial_converter.fit_transform(X)","fe5c791a":"X_trainf, X_testf, y_trainf, y_testf = train_test_split(final_poly_features, y, test_size=0.3, random_state=101)","4476ac8d":"final_polymodel = LinearRegression()\nfinal_polymodel.fit(X_trainf, y_trainf)","22aa85e5":"y_predf = final_polymodel.predict(X_testf)","ca54d1d2":"RMSE = np.sqrt(metrics.mean_squared_error(y_testf, y_predf))\n\nRMSE","04b2ffec":"y.mean()","3c2b0389":"test_residuals = y_testf - y_predf","b79e05a9":"pd.DataFrame({'Y_testf':y_testf, 'Y_predf':y_predf, 'Residuals':test_residuals}).head()","2ea0d311":"sns.scatterplot(x = y_testf, y = y_predf)\n\nplt.title('predicted house price vs test house price', fontsize = 15, y=1.07)\nplt.xlabel('final test house price', fontsize = 12)\nplt.ylabel('final predicted house price', fontsize = 12)","3e34af03":"sns.scatterplot(x = y_testf, y=test_residuals)\n\nplt.title('final test house price VS test residuals', fontsize = 15, y=1.07)\nplt.xlabel('final test house price', fontsize = 12)\nplt.ylabel('test residuals', fontsize = 12)\nplt.axhline(y=0, color='r', ls = '--')\n","a305954a":"sns.displot(test_residuals, bins = 15, kde= True)\n\nplt.title('test residuals histogram', fontsize = 15, y=1.07)\nplt.xlabel('test residuals', fontsize = 12)\nplt.ylabel('count', fontsize = 12)","89973b7b":"# EDA","498ec543":"# Getting Started","2686d59e":"Without any Null or Missing data","7c23a5f1":"# Data Overview","0ef37e34":"# Import Data","1c823d6a":"# Determine the Features and Label","e05d0773":"In this Notebook we are going to build a polynomial regression model of Real estate dataset to predict the price of an unknown house with given features.\n\n","20b0d592":"# Final Model","422d8844":"# Residuals","d0891a13":"Now we figured out that the number 2 is the best degree for our polynomial model","9c5efcc4":"# Import necessary libraries","6a1d94e4":"# Preprocessing & Adjusting Model Parameters"}}