{"cell_type":{"5ec41ae5":"code","454f4a23":"code","e11c0e80":"code","ceed39a5":"code","67d343ed":"code","22f48281":"code","d6aa89bf":"code","383cbf5a":"code","892b2066":"code","ebe605b2":"code","3b55258d":"code","0e214636":"code","594941ec":"code","b88ed537":"code","55ff8887":"code","3171d91f":"code","b57ab0f7":"code","fbb39326":"code","ec97b929":"code","b51ab52e":"code","50ea111e":"code","0f927b45":"code","593e61a3":"code","25d7b369":"code","14ae58fe":"code","89bc7fb3":"code","20b60065":"code","8d6350b5":"code","99fc7e80":"code","585be287":"code","b7eee9fc":"code","3371517b":"code","efc16a06":"code","27e7a39c":"code","4d977d11":"code","6d058624":"code","e0426ea7":"code","b4e61f8a":"code","8f985be1":"code","4e0fff7e":"code","39dacac2":"code","4f40cd75":"code","c5d7cc99":"code","9cfca719":"code","03376a37":"code","400dcefe":"code","e2b5b9f7":"code","7fdb3385":"code","c807d058":"code","9cbe34e5":"code","8794c677":"code","5c8624b3":"code","76015690":"code","0e1d01c6":"code","753c998e":"code","81871c4b":"code","0e693f92":"code","426db4ca":"code","7e26aecf":"code","45c198ab":"code","177f413f":"markdown","e0ec2b20":"markdown","c123f05d":"markdown","29d8978c":"markdown","6f92f36e":"markdown","9e004893":"markdown","7ccebf4f":"markdown","e6648bce":"markdown","76d8f5c4":"markdown","dc78eb35":"markdown","da715fb1":"markdown","1dda7266":"markdown","b0c08323":"markdown","c5d6c337":"markdown","366545da":"markdown"},"source":{"5ec41ae5":"import pandas as pd\n\ndata = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\n\nprint(data.shape)\n\ndata.tail()","454f4a23":"import matplotlib.pyplot as plt\nimport numpy as np\nplt.scatter(data['GrLivArea'],\n            data['SalePrice'],\n            c=data['GrLivArea'])\nplt.xlabel(\"GrLivArea\")\nplt.ylabel(\"SalePrice\")","e11c0e80":"data=data.drop(data.loc[(data['SalePrice'] < 200000) & (data['GrLivArea'] >4000)].index)\n\ndata.shape","ceed39a5":"plt.scatter(data['GrLivArea'],\n            data['SalePrice'],\n            c=data['GrLivArea'])\nplt.xlabel(\"GrLivArea\")\nplt.ylabel(\"SalePrice\")","67d343ed":"corr= data.drop(data.columns[0],1).corr().sort_values(by=data.columns[-1],ascending=False)\n\ncorr[data.columns[-1]]","22f48281":"import seaborn as sns\nplt.subplots(figsize=(10,7))\nsns.heatmap(corr)\nplt.show()","d6aa89bf":"x = corr[data.columns[-1]].head(8).index","383cbf5a":"# Data Splitting\n\n# ids =X_test[X_test.columns[0]]\n# print(ids.shape)\n\n# y_train = X_train[X_train.columns[-1]]\n# print(y_train.shape)\n\n# data=pd.concat((X_train,X_test)).reset_index(drop=True)\n# data=data.drop(['SalePrice','Id'],1)\n# data.shape","892b2066":"data_missing=data.isnull().sum().sort_values(ascending = False)\n\ndata_missing=data_missing.drop(data_missing[data_missing==0].index)\n\ndata_missing","ebe605b2":"data['PoolQC']=data['PoolQC'].fillna('no')","3b55258d":"data['MiscFeature']=data['MiscFeature'].fillna('no')","0e214636":"data['Alley']=data['Alley'].fillna('no')","594941ec":"data['Fence']=data['Fence'].fillna('no')","b88ed537":"data['FireplaceQu']=data['FireplaceQu'].fillna('no')","55ff8887":"data['GarageCond']=data['GarageCond'].fillna('no')\n\ndata['GarageQual']=data['GarageQual'].fillna('no')\n\ndata['GarageFinish']=data['GarageFinish'].fillna('no')","3171d91f":"data['GarageYrBlt']=data['GarageYrBlt'].fillna(0)","b57ab0f7":"data['GarageType']=data['GarageType'].fillna(0)\n","fbb39326":"data['GarageArea']=data['GarageArea'].fillna(0)\n","ec97b929":"data['GarageCars']=data['GarageCars'].fillna(0)","b51ab52e":"data['BsmtExposure']=data['BsmtExposure'].fillna('no')\ndata['BsmtCond']=data['BsmtCond'].fillna('no')\n","50ea111e":"data['BsmtQual']=data['BsmtQual'].fillna('no')\ndata['BsmtFinType2']=data['BsmtFinType2'].fillna('no')\ndata['BsmtFinType1']=data['BsmtFinType1'].fillna('no')","0f927b45":"\ndata['Fence']=data['Fence'].fillna('no')\n\ndata['FireplaceQu']=data['FireplaceQu'].fillna('no')\n","593e61a3":"data['BsmtFinSF1']=data['BsmtFinSF1'].fillna(0)\ndata['BsmtFinSF2']=data['BsmtFinSF2'].fillna(0)","25d7b369":"data['MasVnrType']=data['MasVnrType'].fillna('no')\ndata['MasVnrArea']=data['MasVnrArea'].fillna(0)","14ae58fe":"data['BsmtFullBath']=data['BsmtFullBath'].fillna(0)\n\n\ndata['BsmtHalfBath']=data['BsmtHalfBath'].fillna(0)\n\ndata['BsmtUnfSF']=data['BsmtUnfSF'].fillna(0)","89bc7fb3":"data['Exterior2nd']=data['Exterior2nd'].fillna('NA')\n\ndata['Exterior1st']=data['Exterior1st'].fillna('NA')","20b60065":"data['TotalBsmtSF']=data['TotalBsmtSF'].fillna(0)","8d6350b5":"# fill nan with the most frequent value","99fc7e80":"# note: the hash sign is another solution","585be287":"# from collections import Counter\n# print(dict(Counter(data['MSZoning'])))","b7eee9fc":"# data['MSZoning']=data['MSZoning'].fillna('RL')\ndata['MSZoning']=data['MSZoning'].fillna( data['MSZoning'].value_counts().index[0])","3371517b":"# print(dict(Counter(data['Utilities'])))","efc16a06":"# data['Utilities'] = data['Utilities'].fillna('AllPub')\ndata['Utilities'] = data['Utilities'].fillna(data['Utilities'].value_counts().index[0])","27e7a39c":"# print(dict(Counter(data['Functional'])))","4d977d11":"# data['Functional']=data['Functional'].fillna('Typ')\ndata['Functional']=data['Functional'].fillna(data['Functional'].value_counts().index[0])","6d058624":"# print(dict(Counter(data['SaleType'])))","e0426ea7":"# data['SaleType']=data['SaleType'].fillna('WD')\ndata['SaleType']=data['SaleType'].fillna(data['SaleType'].value_counts().index[0])","b4e61f8a":"# print(dict(Counter(data['KitchenQual'])))","8f985be1":"# data['KitchenQual']=data['KitchenQual'].fillna(\"Gd\")\n\ndata['KitchenQual']=data['KitchenQual'].fillna(data['KitchenQual'].value_counts().index[0])","4e0fff7e":"# print(dict(Counter(data['Electrical'])))","39dacac2":"# data['Electrical']=data['Electrical'].fillna('SBrkr')\ndata['Electrical']=data['Electrical'].fillna(data['Electrical'].value_counts().index[0])","4f40cd75":"data['LotFrontage']=data['LotFrontage'].fillna(data['LotFrontage'].dropna().mean())","c5d7cc99":"data_missing=data.isnull().sum().sort_values(ascending = False)\ndata_missing=data_missing.drop(data_missing[data_missing==0].index)\ndata_missing","9cfca719":"# there are no missng values\n# really wonderful !!","03376a37":"# replace [ YearBuilt ] , [ YearRemodAdd ] columns, with new column [ Year ]\n\ndata['Year']=0\ndata.loc[data['YearBuilt']!=data['YearRemodAdd'],'Year']=1\ndata=data.drop(['YearRemodAdd','YearBuilt'],1)\n\n(data['Year']==1).sum()","400dcefe":"# the number of columns with categorical data\n\ndt_cat = data.dtypes=='object'\ndt_cat = dt_cat[dt_cat].index\nlen(dt_cat)","e2b5b9f7":"\nfor i in dt_cat:\n    data=pd.get_dummies(data=data,columns= [i],prefix=[i])\n        \n        ","7fdb3385":"# let's check the catedorical data\n\ndt_cat = data.dtypes=='object'\ndt_cat = dt_cat[dt_cat].index\nprint(len(dt_cat))\ndt_cat","c807d058":"# there is no any categorical data\n# great job ^_^","9cbe34e5":"# extract [X_train, X_test] from data after data-processing\n\nX_train = data.iloc[:955,1:-1]\ny_train = data.iloc[:955,-1]\n\nX_test  = data.iloc[955:,1:-1]\ny_test = data.iloc[955:,-1]\n\nprint(X_train.shape) \nprint(y_train.shape)\n\nprint(X_test.shape)\nprint(y_test.shape)","8794c677":"from sklearn.preprocessing import StandardScaler","5c8624b3":"from xgboost import XGBRegressor\nXGBR = XGBRegressor(n_estimators=1158,\n                    learning_rate=0.06,\n                    random_state=44)\n\nXGBR.fit(X_train, y_train,\n        early_stopping_rounds=5, \n        eval_set=[(X_train, y_train)],\n        verbose=False)","76015690":"from sklearn.pipeline import Pipeline\n\nsteps = [ ('scaling',StandardScaler()),('model', XGBR)]\n\npl = Pipeline(steps)\n\npl.fit(X_train,y_train)","0e1d01c6":"# Score","753c998e":"pl.score(X_train,y_train)","81871c4b":"pl.score(X_test,y_test)","0e693f92":"# Error","426db4ca":"y_pred = pl.predict(X_test)","7e26aecf":"from sklearn.metrics import mean_squared_error\n\nerror = mean_squared_error(y_test,y_pred)\nerror","45c198ab":"submission = pd.DataFrame()\nsubmission.to_csv('Ayad')","177f413f":"# @@@@@@@@@@@@@@@Ayad@@@@@@@@@@@@@@@\n","e0ec2b20":"###  StandardScaler","c123f05d":"# 1- drop outliers","29d8978c":"# Thanks a lot @_@","6f92f36e":"# 5- Data spliting","9e004893":"# 2- find out the correlation between data","7ccebf4f":"## Pipeline","e6648bce":"# 6- Pipeline","76d8f5c4":"# @@@@@@@@@@@@@@@Ayad@@@@@@@@@@@@@@@\n","dc78eb35":"A sequence of data processing components is called a data pipeline. Pipelines are very\ncommon in Machine Learning systems, since there is a lot of data to manipulate and\nmany data transformations to apply.\nComponents typically run asynchronously. Each component pulls in a large amount\nof data, processes it, and spits out the result in another data store, and then some time\nlater the next component in the pipeline pulls this data and spits out its own output,\nand so on. Each component is fairly self-contained: the interface between components\nis simply the data store. This makes the system quite simple to grasp (with the help of\na data flow graph), and different teams can focus on different components. Moreover,\nif a component breaks down, the downstream components can often continue to run\nnormally (at least for a while) by just using the last output from the broken component.\nThis makes the architecture quite robust.\n\nOn the other hand, a broken component can go unnoticed for some time if proper\nmonitoring is not implemented. The data gets stale and the overall system\u2019s performance\ndrops\n\n\n#### note: this text is from a book called \"Hands on machine Learning and deep learning\"","da715fb1":"# 3- Find out columns with missing values and fix it","1dda7266":"# 4- Encodin categorical data","b0c08323":"### XGBRegressor Model","c5d6c337":"## About Pipeline","366545da":"# Data"}}