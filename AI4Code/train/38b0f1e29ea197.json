{"cell_type":{"7b89145c":"code","a7ba563b":"code","5769f5d6":"code","8aca6ab6":"code","a0e64e96":"code","330451e1":"code","23a1c681":"code","a444f701":"code","f11af265":"code","a615d55b":"code","cabf4d41":"code","44fac5bc":"code","d4163e15":"markdown","bcee24d1":"markdown","3c644f19":"markdown","cf1fb8e8":"markdown","5a8dac5c":"markdown","6b999490":"markdown","b996b3a5":"markdown","7857147c":"markdown","1572be91":"markdown","fbd18ea4":"markdown","a4933056":"markdown","86e0f519":"markdown","296dd5bb":"markdown","9f6b6c24":"markdown","8d0efd7d":"markdown","d291810c":"markdown","d555d4ca":"markdown","e39a8bb8":"markdown","e2b1104d":"markdown","b31e0c8c":"markdown","a1cc8883":"markdown","e48ab1f6":"markdown","f9342b02":"markdown","d436a024":"markdown","6911a3a0":"markdown","79169aee":"markdown"},"source":{"7b89145c":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F","a7ba563b":"LEARNING_RATE = 0.01\nBATCH_SIZE = 32\nEPOCHS = 10","5769f5d6":"# \u3053\u3053\u3067\u306f\uff0c28 * 28\u306e\u767d\u9ed2\u753b\u50cf(\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb)\u3092\u5165\u529b\u3059\u308b\u3068\u4eee\u5b9a\u3057\u3066\uff0c10\u30af\u30e9\u30b9\u306e\u5206\u985e\u3092\u884c\u3046\u3082\u306e\u3068\u3057\u307e\u3059\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        # \u5165\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u65701\uff0c\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u65706, kernel size 5\u306eCNN\u3092\u5b9a\u7fa9\u3059\u308b\n        self.conv1 = nn.Conv2d(1, 6, 5)\n        # \u6b21\u306b\uff0c\u7dda\u5f62\u5909\u63db\u3092\u884c\u3046\u5c64\u3092\u5b9a\u7fa9\u3057\u3066\u3042\u3052\u307e\u3059: y = Wx + b\n        # nn.Linear\u306f fully-connected layer (\u5168\u7d50\u5408\u5c64)\u306e\u3053\u3068\u3067\u3059\uff0e\n        # self.conv1\u306e\u3042\u3068\uff0cmaxpooling\u3092\u901a\u3059\u3053\u3068\u3067\uff0c\n        # self.fc1\u306b\u5165\u529b\u3055\u308c\u308bTensor\u306e\u6b21\u5143\u306f 6 * 12 * 12 (Channel, height, width) \u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n        # \u3053\u308c\u309210\u30af\u30e9\u30b9\u5206\u985e\u306a\u306e\u3067\uff0c10\u6b21\u5143\u306b\u5909\u63db\u3059\u308b\u3088\u3046\u306aLinear\u5c64\u3092\u5b9a\u7fa9\u3057\u307e\u3059\n        self.fc1 = nn.Linear(6 * 12 * 12, 10)\n\n    \n    def forward(self, x):\n        batch_size = x.shape[0]\n        # forward\u95a2\u6570\u306e\u4e2d\u3067\u306f\uff0c\uff0c\u5165\u529b x \u3092\u9806\u756a\u306b\u30ec\u30a4\u30e4\u30fc\u306b\u901a\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0e    \n        # \u307e\u305a\u306f\uff0c\u753b\u50cf\u3092CNN\u306b\u901a\u3057\u307e\u3059\n        x = self.conv1(x)\n\n        # \u6d3b\u6027\u5316\u95a2\u6570\u3068\u3057\u3066relu\u3092\u4f7f\u3044\u307e\u3059\n        x = F.relu(x)\n        \n        # \u6b21\u306b\uff0cMaxPooling\u3092\u304b\u3051\u307e\u3059\uff0e\n        x = F.max_pool2d(x, (2, 2))\n        \n        # \u5c11\u3057\u30c8\u30ea\u30c3\u30ad\u30fc\u306a\u3053\u3068\u304c\u8d77\u304d\u307e\u3059\uff0e\n        # CNN\u306e\u51fa\u529b\u7d50\u679c\u3092 fully-connected layer \u306b\u5165\u529b\u3059\u308b\u305f\u3081\u306b\n        # 1\u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\u306b\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n        # \u6b63\u78ba\u306b\u306f\uff0c\u3000(batch_size, channel, height, width) --> (batch_size, channel * height * width)\n        x = x.view(batch_size, -1)\n        \n        # linear\u3068\u6d3b\u6027\u5316\u95a2\u6570\u306b\u901a\u3057\u307e\u3059\n        x = self.fc1(x)\n        x = F.relu(x)\n        return x","8aca6ab6":"net = Net()","a0e64e96":"print(net)","330451e1":"sample_input = torch.randn(1, 1, 28, 28)\n\nprint(sample_input)\nprint(sample_input.shape)  # \u6b21\u5143\u3092\u307f\u3066\u307f\u3088\u3046\uff0c\u6b63\u3057\u304f\u751f\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u306d","23a1c681":"sample_output = net(sample_input)\n\n# Q.\u3053\u308c\u306f\u4f55\u3092\u8868\u3057\u3066\u3044\u308b\u3093\u3067\u3057\u305f\u3063\u3051\uff1f\nprint(sample_output.shape)","a444f701":"sample_target = torch.randn(1, 10)","f11af265":"criterion = nn.MSELoss()","a615d55b":"sample_loss = criterion(sample_output, sample_target)\nprint(sample_loss)","cabf4d41":"net.zero_grad()\n\n# \u3053\u3053\u3067 backpropagate \u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\uff0e\nsample_loss.backward()","44fac5bc":"# optimizer\u3092\u7528\u610f\u3057\u307e\u3059\noptimizer = torch.optim.SGD(net.parameters(), lr=LEARNING_RATE)\n\n# epoch\u30eb\u30fc\u30d7\u3092\u56de\u3057\u307e\u3059\uff0e\n# [\u767a\u5c55] \u3053\u306e\u30eb\u30fc\u30d7\u306e\u5185\u5074\u3067\uff0c\u5b9f\u969b\u306b\u306f Dataloader \u3092\u4f7f\u7528\u3057\u305f iteration \u30eb\u30fc\u30d7\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u304c\uff0c\u4eca\u56de\u306f\u5272\u611b\u3057\u307e\u3059\uff0e\nfor epoch in range(EPOCHS):\n    optimizer.zero_grad()  # \u3055\u3063\u304d\u306e net.zero_grad()\u306e\u4ee3\u308f\u308a\u306b\u3053\u308c\u3067 gradient \u3092\u30bc\u30ed\u306b\u3059\u308b\n    sample_output = net(sample_input) # \u9806\u4f1d\u64ad\u3092\u884c\u3046\n    loss = criterion(sample_output, sample_target) # \u51fa\u529b\u3068\u6b63\u89e3\u3092\u6bd4\u8f03\u3057\u3066\u640d\u5931\u306e\u8a08\u7b97\n    print(f'Loss value: {loss.item()}')\n    loss.backward()  # \u9006\u4f1d\u64ad\u306e\u8a08\u7b97\n    optimizer.step()  # \u9006\u4f1d\u64ad\u306e\u7d50\u679c\u304b\u3089\u30e2\u30c7\u30eb\u3092\u66f4\u65b0\u3059\u308b","d4163e15":"\u5b9f\u969b\u306b\u30e2\u30c7\u30eb\u306b\u5165\u308c\u3066\u307f\u307e\u3057\u3087\u3046","bcee24d1":"\u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\uff0e\n\n\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\uff0c\u30eb\u30fc\u30d7\u304c\u9032\u3080\u306b\u3064\u308c\u3066\u640d\u5931\u304c\u5c0f\u3055\u304f\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u304b\uff1f","3c644f19":"\u3069\u3093\u306a\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u306b\u3057\u3066\u3082\u57fa\u672c\u7684\u306b\u3084\u308b\u3053\u3068\u306f\u540c\u3058\u3067\u3059\uff0e  \n\u3082\u3061\u308d\u3093\u3069\u3093\u3069\u3093\u8907\u96d1\u306b\u306a\u3063\u305f\u308a\u7279\u6b8a\u306a\u64cd\u4f5c\u304c\u5165\u3063\u305f\u308a\u3057\u307e\u3059\u304c\uff0c\u4ee5\u4e0b\u3092\u62bc\u3055\u3048\u3066\u304a\u3051\u3070\uff0c\u300c\u4f55\u3092\u3057\u305f\u3089\u3044\u3044\u3093\u3060\u30fc\u30fc\u30fc\u30fc\u300d\u3067\u6b62\u307e\u308b\u3053\u3068\u306f\u5c11\u306a\u304f\u306a\u308a\u307e\u3059\uff0e\n\n\n### 1. \u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u3092\u6e96\u5099 \n- ex. mnist\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u304d\u3066\uff0c\u753b\u50cf\u3092\u30e1\u30e2\u30ea\u306b\u8aad\u307f\u8fbc\u3080\n\n### 2. \u30e2\u30c7\u30eb\u3092\u6e96\u5099\n\n### 3. \u6e96\u5099\u3057\u305f\u30c7\u30fc\u30bf\u3092\u30e2\u30c7\u30eb\u306b\u5165\u529b\n- ex. \u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u60c5\u5831\u3092\u30e2\u30c7\u30eb\u306b\u6e21\u3059\n\n### 4. \u30e2\u30c7\u30eb\u304c\u8a08\u7b97\u3092\u5b9f\u884c (\u6e96\u4f1d\u64ad)\n- ex. y = Wx + b  \u307f\u305f\u3044\u306a\u8a08\u7b97\u304c\u3053\u3053\u3067\u5b9f\u884c\u3055\u308c\u308b\n- PyTorch \u3067\u306f\uff0c\u30e2\u30c7\u30eb\u5b9a\u7fa9\u6642\u306b\u4f5c\u6210\u3057\u305f`forward`\u95a2\u6570\u5185\u90e8\u304c\u3053\u3053\u3067\u5b9f\u884c\u3055\u308c\u308b\n\n### 5. Loss (\u640d\u5931) \u3092\u8a08\u7b97 \n- ex. 3\u3068\u3044\u3046\u753b\u50cf\u3092\u6e21\u3057\u305f\u6642\u306b3\u3068\u6b63\u3057\u304f\u5206\u985e\u3055\u308c\u3066\u3044\u308b\u306a\u3089\u826f\u3044\u304c\uff0c8\u3060\u3068\u8aa4\u5206\u985e\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u30e2\u30c7\u30eb\u3092\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n- \u3053\u3053\u3067\u767b\u5834\u3059\u308b\u306e\u304c\u640d\u5931\u95a2\u6570(Loss function)\u3068\u547c\u3070\u308c\u308b\u95a2\u6570\u3067\uff0c\u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u30c7\u30fc\u30bf\u3092\u6bd4\u8f03\u3057\u3066\u30e2\u30c7\u30eb\u304c\u3069\u306e\u304f\u3089\u3044\u306e\u7cbe\u5ea6\u3067\u30bf\u30b9\u30af\u3092\u5b9f\u884c\u3067\u304d\u3066\u3044\u308b\u304b\u3092\u8a08\u7b97\u3059\u308b\uff0e\n- Loss function \u306e\u5024\u3092\u6e1b\u5c11\u3055\u305b\u308b\uff0c\u3064\u307e\u308a\u30e2\u30c7\u30eb\u306e\u6027\u80fd\u3092\u4e0a\u6607\u3055\u305b\u308b\u3053\u3068\u304c\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u76ee\u7684\u3067\u3042\u308b\uff0e\n- \u95a2\u6570\u306e\u7a2e\u985e\u306f\u3044\u308d\u3044\u308d\u3042\u308b\u3051\u3069\u304a\u3044\u304a\u3044\u7406\u89e3\u3057\u3066\u3044\u3051\u3070\u3044\u3044\u306e\u3067\u6c17\u8ca0\u308f\u305a\u306b\u3044\u304d\u307e\u3057\u3087\u3046\n\n### 6. BackPropagation\uff08\u8aa4\u5dee\u9006\u4f1d\u64ad\uff09\n- \u8907\u96d1\u305d\u3046\u306a\u504f\u5fae\u5206\u3068\u304b\u304c\u305f\u304f\u3055\u3093\u51fa\u3066\u305f\u8a08\u7b97\u3092\u5b9f\u884c\n- \u306a\u3093\u3068PyTorch\u3067\u306f\u9762\u5012\u306a\u3053\u306e\u90e8\u5206\u3092\u81ea\u52d5\u7684\u306b\u88cf\u5074\u3067\u3084\u3063\u3066\u304f\u308c\u307e\u3059\uff0e\u3059\u3070\u3089\u3057\u3044\u3067\u3059\u306d\uff0e\n\n### 7. \u91cd\u307f\u306e\u4fee\u6b63 (\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2)\n- 6\uff0e\u306e\u7d50\u679c\u3092\u7528\u3044\u3066\u30e2\u30c7\u30eb\u3092\u4fee\u6b63\u3057\u307e\u3059\uff0e\n\n\u57fa\u672c\u306f\u4e0a\u8a18\u306e\u3088\u3046\u306a\u6d41\u308c\u306b\u306a\u308a\u307e\u3059\uff0e\n\u3068\u306b\u304b\u304f\uff0c\u624b\u3092\u52d5\u304b\u3057\u306a\u304c\u3089\u7406\u89e3\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046","cf1fb8e8":"\u30e2\u30c7\u30eb\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\uff0e  \nPyTorch\u3067\u306f\uff0cprint\u3059\u308b\u3053\u3068\u3067\uff0c\u30e2\u30c7\u30eb\u306e\u69cb\u6210\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059","5a8dac5c":"\u6700\u3082\u7c21\u5358\u306a\u91cd\u307f\u66f4\u65b0\u306e\u65b9\u6cd5\u306f Stochastic Gradient Descent\u3067\u3059\u304c\uff0c  \nAdam\u306a\u3069\u3044\u308d\u3044\u308d\u306a\u624b\u6cd5\u304c\u63d0\u6848\u3055\u308c\u3066\u304a\u308a\uff0c\u305f\u3044\u3066\u3044\u306e\u624b\u6cd5\u306f\u7c21\u5358\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\n\n\u3053\u308c\u3092\u53f8\u3069\u308b optimizer \u3092\u7528\u610f\u3057\u3066\u3042\u3052\u307e\u3057\u3087\u3046  \n\u5b66\u7fd2\u7387(Learning rate)\u306f\u3053\u3053\u3067\u8a2d\u5b9a\u3057\u307e\u3059\n\n\u3067\u306f\uff0c\u3053\u3053\u307e\u3067\u3092\u307e\u3068\u3081\u3066\uff0c\u5b66\u7fd2\u306e\u6d41\u308c\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046","6b999490":"\u30bf\u30b9\u30af\u3068\u3057\u3066\uff0cMNIST\u306e\u5206\u985e (\u624b\u66f8\u304d\u6570\u5b57\u306e\u5206\u985e) \u3092\u884c\u3044\u307e\u3059\uff0e\n![subject.jpg](attachment:subject.jpg)\n\n\n\u3053\u3053\u3067\u306f\uff0c\u6b21\u306e\u56f3\u306e\u3088\u3046\u306a\u30e2\u30c7\u30eb\u3092\u69cb\u7bc9\u3057\u3066\u307f\u307e\u3057\u3087\u3046 (\u56f3\u3067\u306f\u6d3b\u6027\u5316\u95a2\u6570\u306f\u7701\u7565\u3055\u308c\u3066\u3044\u307e\u3059)\n![architecture.jpg](attachment:architecture.jpg)","b996b3a5":"Backpropagate\u3092\u884c\u3063\u3066\u30e2\u30c7\u30eb\u3092\u4fee\u6b63\u3057\u307e\u3059\n\nPytorch\u3067\u306f\uff0c\u901a\u5e38 Backpropagate\u3092\u884c\u3046\u524d\u306b\u6bce\u56de gradient \u3092\u30bc\u30ed\u306b\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e  \n\u8a73\u7d30\u306f\u5272\u611b\u3057\u307e\u3059 (RNN\u306a\u3069\u3092\u5b66\u7fd2\u3059\u308b\u969b\uff0cgradient\u304c\u84c4\u7a4d\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b)","7857147c":"[Hint] \u30e2\u30c7\u30eb\u5185\u3067\u4f55\u304c\u8d77\u304d\u3066\u3044\u308b\u304b\u8abf\u3079\u308b\u969b\u306b\u306f\uff0c`forward()`\u95a2\u6570\u306b `x.shape()`\u3092\u66f8\u304d\u8fbc\u3093\u3067\u307f\u308b\u3068\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n\n(\u5b9f\u969b\u306bCNN\u3092\u4f7f\u3046\u6642\u306b\u51fa\u529b\u6b21\u5143\u3092\u8a08\u7b97\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u6642\u306b\u3084\u3063\u305f\u308a\u3057\u307e\u3059)","1572be91":"## PyTorch \u3068\u306f\uff1f\n- Python \u5411\u3051\u306b Facebook \u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b\u6df1\u5c64\u5b66\u7fd2\u5c02\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n- numpy \u3092\u4f7f\u3063\u3066\u3044\u308b\u4eba\u306a\u3089\u76f4\u611f\u7684\u306b\u64cd\u4f5c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n- [\u767a\u5c55] \u4ed6\u306b\u3082 tensorflow, keras, nnabla \u306a\u3069 python \u306b\u306f\u69d8\u3005\u306a\u6df1\u5c64\u5b66\u7fd2\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5b58\u5728\u3059\u308b\u304c\uff0c\u8a08\u7b97\u30b0\u30e9\u30d5\u3092\u300c\u52d5\u7684\u300d\u306b\u69cb\u7bc9\u3059\u308b PyTorch \u306f\u30c7\u30d0\u30c3\u30b0\u304c\u3057\u3084\u3059\u3044\uff0c\u7406\u89e3\u3057\u3084\u3059\u3044\u306a\u3069\u306e\u5229\u70b9\u304c\u3042\u308b (\u7b46\u8005\u306e\u4e3b\u89b3\u306b\u3088\u308b)\n\n## \u306a\u305c PyTorch ?\n- numpy\u306b\u8fd1\u3044\u64cd\u4f5c\u304c\u53ef\u80fd\u3067\uff0c\u300c\u9759\u7684\u300d\u30b0\u30e9\u30d5\u3092\u69cb\u6210\u3059\u308b tensorflow \u306a\u3069\u306b\u6bd4\u3079\u3066\u7406\u89e3\u3057\u3084\u3059\u3044\uff0e\n- TPU\u3092\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u3092\u9664\u3044\u3066 kaggle \u3067\u306f keras \u3088\u308a\u3082\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u3089\u3057\u3044 (@tiginkgo)","fbd18ea4":"## \u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u8a2d\u5b9a","a4933056":"## \u91cd\u307f\u306e\u66f4\u65b0","86e0f519":"\u5b9f\u969b\u306b\u30e2\u30c7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff0e","296dd5bb":"\u640d\u5931\u95a2\u6570\u306f\u81ea\u5206\u306e\u884c\u3044\u305f\u3044\u30bf\u30b9\u30af\u3084\uff0c\u30c7\u30fc\u30bf\u306e\u5f62\u72b6\u306b\u3088\u3063\u3066\u69d8\u3005\u306a\u3082\u306e\u3092\u4f7f\u3044\u5206\u3051\u307e\u3059\uff0e  \n\u4ee3\u8868\u7684\u306a\u3082\u306e\u3068\u3057\u3066\u306f\n- MSE: Mean Squared Error\n- BCE: Binary Cross Entropy\n- L1 Loss\n\n\u306a\u3069\u306a\u3069\u304c\u3042\u308a\u307e\u3059\uff0e\n\u4eca\u56de\u306fMSE\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046 (\u4eca\u56de\u306e\u30bf\u30b9\u30af\u306b\u304a\u3044\u3066MSE\u304c\u6700\u9069\u3068\u3044\u3046\u610f\u5473\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u4f8b\u3068\u3057\u3066\u53d6\u308a\u4e0a\u3052\u308b\u3060\u3051\u3067\u3059\uff0e)\n\nMSE\u306f\u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee\u3068\u3044\u3044\u307e\u3059\uff0e  \n\u4e2d\u8eab\u306f\u305d\u306e\u307e\u3093\u307e\u3067\uff0c\u8aa4\u5dee\u3068\u6b63\u3057\u3044\u5024\u306e\u5dee\u3092\u4e8c\u4e57\u3057\u3066\u5e73\u5747\u3092\u3068\u3063\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\uff0e","9f6b6c24":"## \u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3057\u3087\u3046","8d0efd7d":"# Neural Network\u3092 PyTorch \u3067\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u306e\u5dfb","d291810c":"\u9069\u5f53\u306a\u753b\u50cf\u3082\u3069\u304d\u3092\u7528\u610f\u3057\u307e\u3059\n\n\u3053\u306e\u8fba\u306e\u95a2\u6570\u306f\uff0c\u4f7f\u3044\u306a\u304c\u3089\u899a\u3048\u3066\u3044\u3051\u3070\u5927\u4e08\u592b\u3067\u3059\uff0e  \n[\u88dc\u8db3] pytorch\u306f\u30c1\u30e3\u30f3\u30cd\u30eb\u30d5\u30a1\u30fc\u30b9\u30c8\u3067\u3059\uff0e \n(Batch, Channel, Height, Width) \u3068\u3044\u3046\u9806\u756a\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\uff0e  \ntensorflow\u3068\u304b\u306f\u30c1\u30e3\u30f3\u30cd\u30eb\u30e9\u30b9\u30c8\u3067\uff0c(Batch, Height, Width, Channel)\u3060\u3063\u305f\u304b\u306a\uff0c\u3053\u306e\u8fba\u308a\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u306e\u3067\u5c11\u3057\u7d1b\u3089\u308f\u3057\u3044\u3067\u3059\u306d\uff0e","d555d4ca":"\u3042\u308a\u304c\u305f\u3044\u3053\u3068\u306b\uff0c\u57fa\u672c\u7684\u306a\u640d\u5931\u95a2\u6570\u306f PyTorch\u306b\u6a19\u6e96\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff0e  \n\u5ba3\u8a00\u3057\u3066\u3042\u3052\u307e\u3057\u3087\u3046","e39a8bb8":"- \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u306f\u5b66\u7fd2\u3067\u304d\u308b\u30d1\u30e9\u30e1\u30fc\u30bf (\u91cd\u307f\u3084\u30d0\u30a4\u30a2\u30b9\u306a\u3069) \u3068\u81ea\u5206\u3067\u5024\u3092\u6c7a\u3081\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u304c\u5b58\u5728\u3059\u308b\n- \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u3053\u3053\u3067\u8a2d\u5b9a\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046","e2b1104d":"## \u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9","b31e0c8c":"\u57fa\u672c\u7684\u306bPyTorch\u3067\u306f\uff0c\u30e2\u30c7\u30eb\u3092\u30af\u30e9\u30b9\u3068\u3057\u3066\u5ba3\u8a00\u3057\u307e\u3059\uff0e\n\n\u30af\u30e9\u30b9\u306f`nn.Module`\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3067\uff0cPyTorch\u306e\u6069\u6075\u3092\u53d7\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n1. `__init__(self)`: \u30af\u30e9\u30b9\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u305f\u3068\u304d\u306b\u81ea\u52d5\u7684\u306b\u5b9f\u884c\u3055\u308c\u308b\u95a2\u6570\u3067\u3059\uff0e  \nPyTorch\u3067\u306f\u57fa\u672c\u7684\u306b\u3053\u3053\u3067\u30e2\u30c7\u30eb\u306e\u4e2d\u8eab\u3092\u8a2d\u5b9a\u3057\u3066\u3084\u308a\u307e\u3059\uff0e   \n\u57fa\u672c\u7684\u306b\u306f\u300c\u5b66\u7fd2\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u91cd\u307f\u300d\u3092\u6301\u3063\u3066\u3044\u308b\u5c64\u304c\u3053\u3053\u3067\u8a2d\u5b9a\u3055\u308c\u307e\u3059\uff0e  \n\u4ed6\u306b\u3082\uff0c\u6d3b\u6027\u5316\u95a2\u6570\u306a\u3069\u3092\u3053\u3053\u3067\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff0e\n\n2. `forward(self, x)`  (\u9806\u4f1d\u64ad\u95a2\u6570)  \nPyTorch\u3067\u306f\uff0c\u5b9f\u969b\u306b\u4f55\u304b\u3092\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u5165\u529b\u3057\u305f\u5834\u5408\u306b\u306f\u3053\u306e\u95a2\u6570\u306e\u4e2d\u8eab\u304c\u5b9f\u884c\u3055\u308c\uff0c\u8a08\u7b97\u7d50\u679c\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\uff0e  \n\n    \u3082\u306e\u3059\u3054\u30fc\u3044\u7c21\u7565\u5316\u3057\u3066\u304b\u304f\u3068\uff0c\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\uff0e  \n    `model = Net()`  <-- \u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b  \n    `output = model(input_images)`  <-- \u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\uff0cinput_images \u304c forward()\u306b\u6e21\u3055\u308c\u3066\uff0c\u8a08\u7b97\u7d50\u679c\u304c output \u306b\u6e21\u3055\u308c\u308b  \n    \n","a1cc8883":"## \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8","e48ab1f6":"## \u57fa\u672c\u7684\u306a\u6d41\u308c","f9342b02":"\u5b9f\u969b\u306b\u640d\u5931\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3059","d436a024":"- \u76ee\u7684: \u5b9f\u88c5\u3092\u901a\u3057\u3066 PyTorch \u306e\u4f7f\u3044\u65b9\u304a\u3088\u3073\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u5bfe\u3059\u308b\u7406\u89e3\u3092\u6df1\u3081\u308b","6911a3a0":"mnist\u306e\u5834\u5408\u672c\u6765\u306f\u300c\u6b63\u3057\u3044\u30e9\u30d9\u30eb\u304c1\u306b\u306a\u3063\u3066\u3044\u308bone-hot vector\u300d\u3092\u6b63\u89e3 (\u6559\u5e2b\u30c7\u30fc\u30bf) \u3068\u3057\u3066\u7528\u610f\u3057\u307e\u3059\uff0e  \n\u304c\uff0c\u3068\u308a\u3042\u3048\u305a\u3053\u3053\u3067\u306f\u30e9\u30f3\u30c0\u30e0\u306a\u5024\u3092\u4f5c\u308a\u307e\u3059\n\nshape = (batch_size, num_class)  \n\u3053\u3053\u3067\u306f\uff0c1\u679a\u306e\u753b\u50cf\u306b\u5bfe\u3057\u3066\u884c\u3046\u306e\u3067 batch_size=1, \u6570\u5b57\u306f10\u7a2e\u985e\u306a\u306e\u3067 num_class=10\u3067\u3059\uff0e","79169aee":"## \u640d\u5931\u95a2\u6570\u306e\u5b9a\u7fa9"}}