{"cell_type":{"44a44bf6":"code","28033f3b":"code","fa2b23ac":"code","b0e67dc7":"code","ee8dc43c":"code","0118d2f3":"code","049a9e8b":"code","cfd8d800":"code","0b6871b9":"code","914b8f75":"code","eae6db64":"code","7268386e":"code","5204711f":"code","ee7a3f84":"code","25913653":"code","179e91ca":"code","0b5d9753":"code","1498fc23":"code","48658026":"code","b1ee2685":"code","40384b22":"code","8f974cd5":"code","0798f913":"markdown","0ea81671":"markdown","56babc84":"markdown","3cca4399":"markdown","bc17737c":"markdown","2605737a":"markdown","61546789":"markdown","bfb72aec":"markdown","a8680be8":"markdown"},"source":{"44a44bf6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom tensorflow import keras\nimport os\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')","28033f3b":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()","fa2b23ac":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","b0e67dc7":"features = ['Sex', 'Pclass', 'SibSp', 'Parch', 'Embarked']\nfig, saxis = plt.subplots(1, len(features),figsize=(len(features) * 6,6))\nfor ind, x in enumerate(features):\n    print('Survival Correlation by:', x)\n    print(train[[x, \"Survived\"]].groupby(x, as_index=False).mean()) \n    print('-'*10, '\\n')\n    \n    #draw a bar plot of survival by sex\n    sns.barplot(x, y=\"Survived\", data=train, ax = saxis[ind])","ee8dc43c":"change = {'female':0,'male':1}\ntrain.Sex = train.Sex.map(change)\ntest.Sex = test.Sex.map(change)\n\nchange = {'S':0,'C':1,'Q':2}\ntrain.Embarked = train.Embarked.map(change)\ntest.Embarked = test.Embarked.map(change)","0118d2f3":"drop_column = ['Cabin']\ntrain.drop(drop_column, axis=1, inplace = True)\ntest.drop(drop_column,axis=1,inplace=True)","049a9e8b":"columns = ['Pclass', 'Sex','Embarked','SibSp', 'Parch', 'Survived']\n\nplt.figure(figsize=(16, 14))\nsns.set(font_scale= 1.2)\nsns.set_style('ticks')\n\nfor i, feature in enumerate(columns):\n    plt.subplot(3, 3, i+1)\n    sns.countplot(data=train, x=feature, hue='Survived', palette='Paired')\n    \nsns.despine()","cfd8d800":"data = [train,test]\n\nfor dataset in data:\n    dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\\.', expand = False)\n    \n    least_occuring = ['Rev','Dr','Major', 'Col', 'Capt','Jonkheer','Countess']\n    dataset.Title = dataset.Title.replace(['Ms', 'Mlle','Mme','Lady'], 'Miss')\n    dataset.Title = dataset.Title.replace(['Countess','Dona'], 'Mrs')\n    dataset.Title = dataset.Title.replace(['Don','Sir'], 'Mr')\n\n    dataset.Title = dataset.Title.replace(least_occuring,'Rare')\n\n    dataset.Title.unique()\n\nfor dataset in data:\n    dataset['family_size'] = dataset['SibSp'] + dataset['Parch']\n\nfor dataset in data:\n    dataset['Fare_Range'] = pd.cut(dataset['Fare'], bins=[0,7.91,14.45,31,120], labels=['Low_fare','median_fare',\n                                                                                      'Average_fare','high_fare'])\n\nfor dataset in data:\n    dataset['Age_Range'] = pd.cut(dataset['Age'], bins=[0,5,20,40,100], labels=['Children','Teenage','Adult','Elder'])\n\nfor dataset in data:\n    drop_column = ['Fare','Name','Age','Ticket','PassengerId']\n    dataset.drop(drop_column, axis=1, inplace = True)","0b6871b9":"test = pd.get_dummies(test, columns = [\"Title\",\"Age_Range\",\"Embarked\",\"Fare_Range\"],\n                             prefix=[\"Title\",\"Age_type\",\"Em_type\",\"Fare_type\"])\n\ntrain = pd.get_dummies(train, columns = [\"Title\",\"Age_Range\",\"Embarked\",\"Fare_Range\"],\n                             prefix=[\"Title\",\"Age_type\",\"Em_type\",\"Fare_type\"])","914b8f75":"target = train['Survived'].values\ntrain.drop(['Survived'], axis=1, inplace = True)","eae6db64":"train","7268386e":"test","5204711f":"sc.fit(train)\ntrain_scaled = sc.transform(train)\ntest_scaled = sc.transform(test)","ee7a3f84":"train.shape,test.shape","25913653":"X_train, X_valid, y_train, y_valid = train_test_split(train_scaled, target, test_size = 0.2, random_state = 2021)","179e91ca":"opt = tf.keras.optimizers.Adam(learning_rate = 0.003)","0b5d9753":"def build_model():   \n    classifier = tf.keras.Sequential()\n    classifier.add(layers.Dense(activation=\"relu\", input_dim=21, units=64))\n\n    classifier.add(layers.Dense(activation=\"relu\", units=32, kernel_initializer='random_normal'))\n    \n    classifier.add(layers.Dropout(0.5))\n    \n    classifier.add(layers.Dense(activation=\"relu\", units=32, kernel_initializer='random_normal'))\n    \n    classifier.add(layers.Dense(activation=\"sigmoid\", units=1))\n\n    classifier.compile(optimizer = opt, loss='binary_crossentropy', metrics = ['accuracy'])\n\n    classifier.summary()\n\n    return classifier\n\nmodel = build_model()\n#model = tf.keras.models.load_model(\".\/TitanicModel.h5\")","1498fc23":"call_back = tf.keras.callbacks.ModelCheckpoint(\"TitanicModel.h5\", monitor='val_accuracy',verbose=1,save_best_only=True)\nhistory = model.fit(X_train, y_train, callbacks = [call_back], batch_size = 32, epochs = 50, validation_data=(X_valid,y_valid), verbose = 1)","48658026":"model = tf.keras.models.load_model(\".\/TitanicModel.h5\")","b1ee2685":"print('Training Data Evaluation')\nprint(model.evaluate(X_train,y_train))\n\nprint('\\n')\n\nprint('Validation Data Evaluation')\nprint(model.evaluate(X_valid,y_valid))","40384b22":"pred = model.predict(test_scaled).round().astype(int)","8f974cd5":"submission_file = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nsubmission_file['Survived'] = pred\nsubmission_file.to_csv('submission.csv', index=False)","0798f913":"**Dataset for Training \/ Teting**","0ea81671":"**Submission**","56babc84":"**Featured Engneering**","3cca4399":"**Model Evalutation**","bc17737c":"**Scaling the Data**","2605737a":"Get Dummy for strings in datasets","61546789":"87% of Women survived but only 13% of Men survived so We use name as a new feature","bfb72aec":"**Building Model**","a8680be8":"**Prediction**"}}