{"cell_type":{"e85402a1":"code","f116e48f":"code","0f14470d":"code","037b8e39":"code","8e27fce6":"code","2510db34":"code","f765c12b":"code","68b70410":"code","365f9b28":"code","89538d80":"code","2cced015":"code","0c3c10bd":"code","1f2a874e":"code","4e3c1277":"code","d642742b":"code","8384d4c7":"code","4946a275":"code","016e1e97":"code","47ad98d9":"code","607fb4e8":"code","5deb23aa":"code","c48e849d":"code","ab8199a0":"code","dfcd6c86":"code","9765ab87":"code","70cf957b":"code","3de8371a":"markdown","db887ff6":"markdown","0d30c3a4":"markdown","39de8767":"markdown","425b4880":"markdown","a4ae77d1":"markdown","e9ad5358":"markdown"},"source":{"e85402a1":"import pandas as pd \nimport sqlite3 ","f116e48f":"conn = sqlite3.connect('..\/input\/..\/input\/chinook\/chinook.db')\nc = conn.cursor()","0f14470d":"def sq(str,con=conn):\n    return pd.read_sql('''{}'''.format(str), con)","037b8e39":"tables = sq(\n    '''select * \n    from sqlite_master\n    where type='table';''' \n    ,conn)\ntables","8e27fce6":"album = sq('''select * from Album''')\nalbum.head(2)","2510db34":"artist = sq('''select * from Artist''')\nartist.head(2)","f765c12b":"customer = sq('''select * from Customer''')\ncustomer.head(2)","68b70410":"employee = sq('''select * from Employee''')\nemployee.head(2)","365f9b28":"genre = sq('''select *from Genre''')\ngenre.head(2)","89538d80":"invoice_line = sq('''select * from InvoiceLine''')\ninvoice_line.head(2)","2cced015":"invoice = sq('''select * from Invoice''')\ninvoice.head(2)","0c3c10bd":"media_type = sq('''select * from MediaType''')\nmedia_type.head(2)","1f2a874e":"playlist = sq('''select * from Playlist''')\nplaylist.head(2)","4e3c1277":"playlist_track = sq('''select * from PlaylistTrack''')\nplaylist_track.head(2)","d642742b":"track = sq('''select * from Track''')\ntrack.head(2)","8384d4c7":"# Join Track and MediaType\nsq('''select \nt.name as track_name ,\nt.Composer,\nMilliseconds as duration_in_ms,\nt.UnitPrice ,\nm.Name as media_type\nfrom Track as t \njoin MediaType as m\nwhere track_name=\"For Those About To Rock (We Salute You)\"\n''').rename(columns = lambda x: x.replace('_',' ').upper())","4946a275":"sq('''select * \nfrom invoice\nwhere total < (select avg(total) from invoice)\n''').head(2)","016e1e97":"sq('''select * \nfrom (select total from invoice where total > 5)\n''').head()","47ad98d9":"sq('''select total\nfrom invoice \nwhere total > 5''').head()","607fb4e8":"# Grouping with Countries and make a new coulumn called Total\nsq('''SELECT BillingCountry ,\nCASE\n    WHEN total > 0  and total <= 7  THEN '0 - 10'\n    WHEN total > 7  and total <= 15 THEN '10 - 15'\n    WHEN total > 15 and total <= 26 THEN '15 - 26'\n    ELSE 'NONE'\nEND AS Total\nFROM Invoice\n''').rename(columns = lambda x:x.replace('_' ,' ').lower())","5deb23aa":"sq('''\nselect t.Name as Trace_name, t.Composer as composer, \n       t.Milliseconds as duration_in_ms, t.UnitPrice,\n       m.Name as media_type, p.Name as playlist_name,\n       ab.Title as title, art.Name as artist_name,\n       g.Name as genre, vl.Quantity, v.InvoiceDate,v.Total\nfrom Track as t\nleft join MediaType as mt on mt.MediaTypeId = t.MediaTypeId\nleft join MediaType as m on t.MediaTypeId = m.MediaTypeId\nleft join PlaylistTrack as pt on pt.TrackId = t.TrackId\nleft join Playlist as p on p.PlaylistId = pt.PlaylistId\nleft join Album as ab on ab.AlbumId = t.AlbumId \nleft join Artist as art on art.ArtistId = ab.ArtistId\nleft join Genre as g on g.GenreId = t.GenreId\nleft join InvoiceLine as vl on vl.TrackId = t.TrackId\nleft join Invoice as v on v.InvoiceId = vl.InvoiceId\nleft join Customer as c on c.CustomerId = v.CustomerId\nleft join Employee as em on em.EmployeeId = c.SupportRepId\norder by Trace_name\n''').rename(columns= lambda x : x.replace('_',' ').lower().capitalize()).head()","c48e849d":"sq('''select BillingCountry, count(*) as number_invoices \nfrom Invoice \ngroup by 1\norder by 2 desc\n''').head()","ab8199a0":"sq('''select billingcity, sum(Total) as sum_of_total\nfrom Invoice\ngroup by 1\norder by 2 desc\nlimit 1''').rename(columns= lambda x:x.replace('_',' ').lower().capitalize())","dfcd6c86":"sq('''select c.CustomerId, c.FirstName ,c.LastName ,sum(invl.UnitPrice)\nfrom Invoice as i\njoin Customer as c on i.CustomerId = c.CustomerId\njoin InvoiceLine as invl on invl.Invoiceid = i.Invoiceid \ngroup by c.CustomerId, c.FirstName ,c.LastName\norder by 4 desc\nlimit 1\n''')","9765ab87":"sq('''select  c.email, c.FirstName, c.LastName ,g.Name as genre_name\nfrom Track as t\njoin InvoiceLine as invl on invl.TrackId = t.TrackId\njoin Invoice as inv on invl.InvoiceId = inv.InvoiceId\njoin Customer as c on c.CustomerId = inv.CustomerId\njoin Genre as g on g.GenreId = t.GenreId\nwhere genre_name='Rock'\ngroup by email\n''').drop_duplicates().head()","70cf957b":"sq('''with c as(select Invoice.CustomerId as id_cst, Invoice.BillingCountry as Country, sum(Invoice.Total) as som from Invoice\njoin Customer on Invoice.BillingCountry = Customer.Country and Invoice.CustomerId = Customer.CustomerId\ngroup by 1,2\norder by 2 ),\nCustomers as (select Customer.CustomerId as cust_id, Customer.FirstName as name_customer, Customer.LastName as lastname_customer from Customer)\n\nselect customers.cust_id, customers.name_customer,customers.lastname_customer, b.country, b.max_som \nfrom Customers,\n(select a.country as country, max(a.som) as max_som from\n(select Invoice.CustomerId as id_cst, Invoice.BillingCountry as Country, sum(Invoice.Total) as som \nfrom Invoice join Customer on Invoice.BillingCountry = Customer.Country and Invoice.CustomerId = Customer.CustomerId\ngroup by 1,2\norder by 2 ) as a\ngroup by 1\norder by 2 ) as b\njoin c\non c.country = b.country and c.som = b.max_som\nwhere Customers.cust_id = c.id_cst\n''').head()","3de8371a":"### We would like to throw a promotional Music Festival in the city we made the most money. Write a query that returns the 1 city that has the highest sum of invoice totals. Return both the city name and the sum of all invoice totals.","db887ff6":"<h2>Chinook sample database<\/h2>\n<p>Chinook is a sample database available for SQL Server, Oracle, MySQL, etc. It can be created by running a single SQL script. Chinook database is an alternative to the Northwind database, being ideal for demos and testing ORM tools targeting single and multiple database servers.<\/p>\n<b>You can also see:<\/b><br>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-analysis-with-cufflinks-and-pandas'>Superstore Analysis With Cufflinks and pandas<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/superstore-data-analysis-with-plotly'>Superstore Analysis With Plotly\n<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/european-soccer-database-with-sqlite3'>European soccer database with sqlite3<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/suicide-rates-visualization-and-geographic-maps\/edit\/run\/53135916'>Suicide Rates visualization and Geographic maps<\/a>\n<li><b><a href='https:\/\/www.kaggle.com\/alaasedeeq\/chinook-questions-with-sqlite'>Chinook data questions with sqlite3<\/a>\n<img src=\"https:\/\/docs.yugabyte.com\/images\/sample-data\/chinook\/chinook-er-diagram.png\" alt=\"Chinook sample database\"> \n","0d30c3a4":"### The customer who has spent the most money will be declared the best customer. Build a query that returns the person who has spent the most money. I found the solution by linking the following three:                                      Invoice, InvoiceLine, and Customer tables to retrieve this information, but you can probably do it with fewer!","39de8767":"### Case Statement","425b4880":"### The team at Chinook would like to identify all the customers who listen to Rock music. Write a query to return the email, first name, last name, and Genre of all Rock Music listeners. Return your list ordered alphabetically by email address starting with 'A'.","a4ae77d1":"### Write a query that determines the customer that has spent the most on music for each country. Write a query that returns the country along with the top customer and how much they spent. For countries where the top amount spent is shared, provide all customers who spent this amount. You should only need to use the Customer and Invoice tables.","e9ad5358":"### Use the Invoice table to determine the countries that have the most invoices. Provide a table of BillingCountry and Invoices ordered by the number of invoices for each country. The country with the most invoices should appear first."}}