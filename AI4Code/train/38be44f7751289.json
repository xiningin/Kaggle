{"cell_type":{"143ff86a":"code","d2467c0c":"code","f21945b3":"code","c8cc2712":"code","5828efa5":"code","7a35fd18":"code","730dfc61":"code","7f735481":"code","ebb19970":"code","27f0a877":"code","0bdca829":"code","c4a8700d":"code","f6171980":"code","04fa478d":"code","33e01357":"code","0ce86568":"code","26c892a5":"code","68b06204":"code","beb2e7a3":"code","74a56257":"code","4a991616":"code","11d8de93":"code","78edb8c5":"code","41ecfcda":"code","3b004d45":"code","be7fe779":"code","9b76c731":"code","76df73e5":"code","04b95e16":"code","62adb55b":"code","3f165b67":"code","9f41ccfe":"code","74789649":"code","af0b3a7a":"code","da01d496":"code","d07dbbe8":"code","78ab172e":"code","09977566":"code","28d03f11":"code","d0f318ec":"code","fee2ef2a":"code","9706ab10":"code","a35689ed":"code","03683fbe":"code","da0681dd":"code","25668af0":"code","4afa72d4":"code","f698e5fa":"code","73530675":"code","66570a20":"code","bbc85db2":"code","08db200f":"code","bcf6ea57":"code","2597b6e9":"code","85e2e95d":"code","3cf5416b":"code","214f6762":"code","9e5959f1":"code","8cc3b481":"markdown","cb8f2989":"markdown","cda97c5e":"markdown","173cb6a6":"markdown","3f858730":"markdown","682dffa1":"markdown","c419953c":"markdown","00f7ccb8":"markdown","a7e07164":"markdown","d1e2d35b":"markdown","886378d7":"markdown","da1fb45a":"markdown","6fc362e6":"markdown","b5ca80e8":"markdown","c74c7664":"markdown","2f703e93":"markdown","e33e28ca":"markdown","92e81455":"markdown","2ba98e8e":"markdown","dd193253":"markdown","ea1b539a":"markdown","64690b1d":"markdown","b62fab6a":"markdown","11f9289c":"markdown","c92bd409":"markdown","d0d34676":"markdown","0660c746":"markdown","ff5ecef8":"markdown","6e198c77":"markdown","5d25897b":"markdown","b68492ff":"markdown","b5332019":"markdown","17c250aa":"markdown","3948528f":"markdown","264f0484":"markdown","32072d5f":"markdown","6719b188":"markdown","9fb5fd60":"markdown","5406b89b":"markdown","87b13768":"markdown","b64aa2c6":"markdown","eb97c969":"markdown","c72733b6":"markdown","7690400a":"markdown","d96c13ae":"markdown","b0c6e456":"markdown"},"source":{"143ff86a":"from statsmodels.graphics.tsaplots import plot_pacf\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom sklearn.preprocessing import LabelEncoder\nfrom plotly.offline import init_notebook_mode\nfrom datetime import datetime, timedelta\ninit_notebook_mode(connected=False)\nfrom keras.models import Sequential\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nfrom fbprophet import Prophet\nfrom sklearn import metrics\nimport plotly.express as px\nimport plotly.offline as py\nfrom keras import layers\nimport lightgbm as lgb\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport gc\nimport os\n\n\n","d2467c0c":"print(os.listdir(\"..\/input\/novel-corona-virus-2019-dataset\/\"))\npath=\"..\/input\/novel-corona-virus-2019-dataset\/\"","f21945b3":"df_one = pd.read_csv(path+'time_series_covid_19_recovered.csv')","c8cc2712":"df_one.head()","5828efa5":"df_two=pd.read_csv(path+\"time_series_covid_19_deaths.csv\")\ndf_two=pd.melt(df_two,id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],var_name=['Date'],value_name='Deadths')\ndf_two.rename({'Province\/State':\"State\",\"Country\/Region\":'Country'},axis=1,inplace=True)\ndf_two['Date']=pd.to_datetime(df_two['Date'])\n","7a35fd18":"def melt_and_merge(agg=True):\n\n    df_one = pd.read_csv(path+'time_series_covid_19_recovered.csv')\n    df_one=pd.melt(df_one,id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],var_name=['Date'],value_name='Recovered')\n    df_one.rename({'Province\/State':\"State\",\"Country\/Region\":'Country'},axis=1,inplace=True)\n    df_one['Date']=pd.to_datetime(df_one['Date'])\n\n    df_two=pd.read_csv(path+\"time_series_covid_19_deaths.csv\")\n    df_two=pd.melt(df_two,id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],var_name=['Date'],value_name='Deaths')\n    df_two.rename({'Province\/State':\"State\",\"Country\/Region\":'Country'},axis=1,inplace=True)\n    df_two['Date']=pd.to_datetime(df_two['Date'])\n\n    df_three=pd.read_csv(path+\"time_series_covid_19_confirmed.csv\")\n    df_three=pd.melt(df_three,id_vars=['Province\/State', 'Country\/Region', 'Lat', 'Long'],var_name=['Date'],value_name='Confirmed')\n    df_three.rename({'Province\/State':\"State\",\"Country\/Region\":'Country'},axis=1,inplace=True)\n    df_three['Date']=pd.to_datetime(df_three['Date'])\n    \n    if (agg):\n        col={\"Lat\":np.mean,\"Long\":np.mean,\"Recovered\":sum}\n        df_one=df_one.groupby(['Country',\"Date\"],as_index=False).agg(col)\n        \n        col={\"Lat\":np.mean,\"Long\":np.mean,\"Deaths\":sum}\n        df_two=df_two.groupby(['Country',\"Date\"],as_index=False).agg(col)\n        \n        col={\"Lat\":np.mean,\"Long\":np.mean,\"Confirmed\":sum}\n        df_three=df_three.groupby(['Country',\"Date\"],as_index=False).agg(col)\n\n    else:\n        df_one['State'].fillna(df_one['Country'],inplace=True)\n        df_two['State'].fillna(df_two['Country'],inplace=True)\n        df_three['State'].fillna(df_three['Country'],inplace=True)\n    \n    \n    print(\"The shape of three datasets are equal :\",(df_three.shape[0]==df_one.shape[0]==df_two.shape[0]))\n    \n    merge=pd.merge(df_one,df_two)\n    merge=pd.merge(merge,df_three)\n    \n    return merge","730dfc61":"data=melt_and_merge(True)","7f735481":"data.head()","ebb19970":"print(\"There are {} rows are {} columns in our data\".format(data.shape[0],data.shape[1]))","27f0a877":"print(\"The data starts from the date {} and ends in {}\".format(data.Date.min().date(),data.Date.max().date()))\nprint(\"So we have {} of data\".format(data.Date.max().date()-data.Date.min().date()))\nprint(\"From {} countries\".format(data.Country.nunique()))","0bdca829":"x=data.groupby(['Country'],as_index=False)['Deaths'].last().sort_values(by=\"Deaths\",ascending=False)\nfig=px.pie(x,\"Country\",\"Deaths\")\nfig.update_layout(title=\"Global Covid-19 Deaths\")","c4a8700d":"df_four=pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/COVID19_open_line_list.csv\",usecols=['age','sex','province','country','wuhan(0)_not_wuhan(1)',\n                                                                                              \"latitude\",'longitude'])\ndf_four.head()","f6171980":"df_four.sex.fillna('Unknown',inplace=True)\ndf_four.sex=df_four['sex'].map({\"Female\":\"female\",\"Male\":\"male\",\"male\":\"male\",'female':'female',\"Unknown\":\"Unknown\"})\n","04fa478d":"sex= df_four.sex.value_counts()[1:]\nfig=px.pie(sex,sex.index,sex)\nfig.update_layout(title=\"Male vs Female infected Globally\")","33e01357":"most_effected=data.groupby(['Country'],as_index=False)['Deaths'].last().sort_values(by=\"Deaths\",ascending=False)[:10]\nfig=px.bar(most_effected,x=\"Country\",y=\"Deaths\",title=\"Most affected countries by Number of Deaths\")\nfig.show()","0ce86568":"most_effected=data.groupby(['Country'],as_index=False)['Confirmed'].last().sort_values(by=\"Confirmed\",ascending=False)[:10]\nfig=px.bar(most_effected,x=\"Country\",y=\"Confirmed\",title=\"Most affected countries by Number of Confirmed Cases\")\nfig.show()","26c892a5":"most_affected=data.groupby(['Country'],as_index=False)['Recovered'].last().sort_values(by=\"Recovered\",ascending=False)[:10]\nfig=px.bar(most_affected,x=\"Country\",y=\"Recovered\",title=\"Most affected countries by Number of Recovered Cases\")\nfig.show()","68b06204":"fig = go.Figure()\nfor country in [\"China\",\"Italy\",\"Iran\",\"Spain\"]:\n   \n\n    fig.add_trace(go.Scatter(\n        x=data[data['Country']==country]['Date'],\n        y=data[data['Country']==country]['Confirmed'],\n        name = country, # Style name\/legend entry with html tags\n        connectgaps=True # override default to connect the gaps\n    ))\nfig.update_layout(title=\"Timeseries plot of number of Confirmed Cases\") \nfig.update_traces(mode='markers+lines', marker_line_width=2.5, marker_size=3)\nfig.show()","beb2e7a3":"fig = go.Figure()\nfor country in ['China',\"Italy\",\"Iran\",\"Spain\"]:\n   \n\n    fig.add_trace(go.Scatter(\n        x=data[data['Country']==country]['Date'],\n        y=data[data['Country']==country]['Deaths'],\n        name = country, # Style name\/legend entry with html tags\n        connectgaps=True # override default to connect the gaps\n    ))\nfig.update_layout(title=\"Timeseries plot of number of deaths\")    \nfig.update_traces(mode='markers+lines', marker_line_width=2.5, marker_size=3)\n\nfig.show()","74a56257":"fig = go.Figure()\nfor country in ['China',\"Italy\",\"Iran\",\"Spain\"]:\n   \n\n    fig.add_trace(go.Scatter(\n        x=data[data['Country']==country]['Date'],\n        y=data[data['Country']==country]['Confirmed'],\n        name = country, # Style name\/legend entry with html tags\n        connectgaps=True # override default to connect the gaps\n    ))\nfig.update_layout(title=\"Timeseries plot of number of Recovered Cases\")  \nfig.update_traces(mode='markers+lines', marker_line_width=2.5, marker_size=3)\nfig.show()","4a991616":"fig = go.Figure()\nfor country in ['China',\"Italy\",\"Iran\"]:\n   \n    lag_1=data[data['Country']==country]['Confirmed'].shift(1)\n    change=(data[data['Country']==country]['Confirmed']-lag_1).fillna(0)\n    fig.add_trace(go.Scatter(\n        x=data[data['Country']==country]['Date'],\n        y=change,\n        name = country, # Style name\/legend entry with html tags\n        connectgaps=True # override default to connect the gaps\n    ))\nfig.update_layout(title=\"Timeseries plot of number of Confirmed cases each day\")    \nfig.update_traces(mode='markers+lines', marker_line_width=2.5, marker_size=3)\n\nfig.show()","11d8de93":"fig = go.Figure()\nfor country in ['China',\"Italy\",\"Iran\"]:\n   \n    lag_1=data[data['Country']==country]['Deaths'].shift(1)\n    change=(data[data['Country']==country]['Deaths']-lag_1).fillna(0)\n    fig.add_trace(go.Scatter(\n        x=data[data['Country']==country]['Date'],\n        y=change,\n        name = country, # Style name\/legend entry with html tags\n        connectgaps=True # override default to connect the gaps\n    ))\nfig.update_layout(title=\"Timeseries plot of number of Deaths each day\")   \nfig.update_traces(mode='markers+lines', marker_line_width=2.5, marker_size=3)\n\nfig.show()","78edb8c5":"locations=pd.read_csv(\"..\/input\/plotlycountrycodes\/plotly_countries_and_codes.csv\",usecols=['COUNTRY','CODE'])\ndf=pd.merge(data,locations,left_on=['Country'],right_on=['COUNTRY'],how=\"left\")\n","41ecfcda":"df_country=df.groupby(['Country',\"CODE\"],as_index=False)[['Recovered',\"Deaths\",\"Confirmed\"]].last()","3b004d45":"fig = px.choropleth(df_country, locations=\"CODE\",\n                    color=\"Deaths\", # lifeExp is a column of gapminder\n                    hover_name=\"Country\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig.update_layout(title=\"Global COVID-19 Deaths\")\nfig.show()","be7fe779":"fig = px.choropleth(df_country, locations=\"CODE\",\n                    color=\"Confirmed\", # lifeExp is a column of gapminder\n                    hover_name=\"Country\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig.update_layout(title=\"Global COVID-19 Confirmed Cases\")\nfig.show()","9b76c731":"fig = px.choropleth(df_country, locations=\"CODE\",\n                    color=\"Recovered\", # lifeExp is a column of gapminder\n                    hover_name=\"Country\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig.update_layout(title=\"Global COVID-19 Recovered Cases\")\nfig.show()","76df73e5":"china=data[data['Country']==\"China\"]\nfig = go.Figure()\nfor i in [\"Confirmed\",\"Recovered\",\"Deaths\"]:\n   \n\n    fig.add_trace(go.Scatter(\n        y=china[i],\n        x=china['Date'],\n        name = i, # Style name\/legend entry with html tags\n        connectgaps=True # override default to connect the gaps\n    ))\nfig.update_layout(title=\"Timeseries plot of China \") \nfig.update_traces(mode='markers+lines', marker_line_width=2.5, marker_size=3)\n\nfig.show()","04b95e16":"df=melt_and_merge(False)","62adb55b":"china=df[df['Country']==\"China\"]\nfig = go.Figure()\nstates=china.State.unique().tolist()\nstates.remove('Hubei')\nfor country in states:\n   \n\n    fig.add_trace(go.Scatter(\n        x=china[china['State']==country]['Date'],\n        y=china[china['State']==country]['Confirmed'],\n        name = country, # Style name\/legend entry with html tags\n        connectgaps=True # override default to connect the gaps\n    ))\nfig.update_layout(title=\"Timeseries plot of number of Confirmed Cases in Provinces except Hubei\")  \nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.update_traces(mode='lines', marker_line_width=2.5, marker_size=3)\n\nfig.show()\n","3f165b67":"china=df[df['Country']==\"China\"]\nfig = go.Figure()\nstates=china.State.unique().tolist()\nstates.remove('Hubei')\nfor country in states:\n   \n\n    fig.add_trace(go.Scatter(\n        x=china[china['State']==country]['Date'],\n        y=china[china['State']==country]['Deaths'],\n        name = country, # Style name\/legend entry with html tags\n        connectgaps=True # override default to connect the gaps\n    ))\nfig.update_layout(title=\"Timeseries plot of number of Deaths Cases in Provinces except Hubei\")\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()","9f41ccfe":"china=df[df['Country']==\"China\"].groupby(['State'],as_index=False)[[ 'Lat', 'Long', 'Date', 'Recovered', 'Deaths',\"Confirmed\"]].last()","74789649":"fig=px.bar(china,x=\"State\",y=\"Confirmed\")\nfig.update_layout(title=\"Confirmed Cases in Provinces of China\")\nfig.update_layout(coloraxis=dict(colorscale='Bluered_r'), showlegend=False)\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()","af0b3a7a":"Hubei=df[df['State']==\"Hubei\"]\nHubei.loc[:,'lag_1']=Hubei['Confirmed'].shift(1)\nHubei.loc[:,'Daily']=(Hubei['Confirmed']-Hubei['lag_1']).fillna(0).values\nfig=px.bar(Hubei,x=\"Date\",y=\"Daily\")\nfig.update_layout(coloraxis=dict(colorscale='Bluered_r'), showlegend=False)\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.update_layout(title=\"Daily Confirmed Cases in Hubei province\")\nfig.show()","da01d496":"Hubei=df[df['State']==\"Hubei\"]\nHubei.loc[:,'lag_1']=Hubei['Recovered'].shift(1)\nHubei.loc[:,'Daily']=(Hubei['Recovered']-Hubei['lag_1']).fillna(0)\nfig=px.bar(Hubei,x=\"Date\",y=\"Daily\")\nfig.update_layout(title=\"Daily recovered in Hubei province\")\nfig.update_layout(coloraxis=dict(colorscale='Bluered_r'), showlegend=False)\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()\n","d07dbbe8":"Hubei=df[df['State']==\"Hubei\"]\nHubei.loc[:,'lag_1']=Hubei['Deaths'].shift(1)\nHubei.loc[:,'Daily']=(Hubei['Deaths']-Hubei['lag_1']).fillna(0)\nfig=px.bar(Hubei,x=\"Date\",y=\"Daily\",)\nfig.update_layout(title=\"Daily Deaths in Hubei province\")\nfig.update_layout(coloraxis=dict(colorscale='Bluered_r'), showlegend=False)\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\nfig.show()","78ab172e":"restof_world=data[data['Country']!=\"China\"].groupby(['Date'],as_index=False)[['Confirmed',\"Recovered\",\"Deaths\"]].agg(sum)\nchina=data[data['Country']==\"China\"]","09977566":"\nfig = go.Figure()\nfig.add_trace(go.Bar(x=china['Date'],\n                y=china['Confirmed'],\n                name='China',\n                marker_color='rgb(255, 0, 0)'\n                ))\nfig.add_trace(go.Bar(x=restof_world['Date'],\n                y=restof_world['Confirmed'],\n                name='Rest of world',\n                marker_color='rgb(0, 0, 255)'\n                ))\n\nfig.update_layout(\n    title='Global Confirmed Cases, China and Rest of World',\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Confirmed Cases',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15, # gap between bars of adjacent location coordinates.\n    bargroupgap=0.1 # gap between bars of the same location coordinate.\n)\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\n\nfig.show()\n\n","28d03f11":"\nfig = go.Figure()\nfig.add_trace(go.Bar(x=china['Date'],\n                y=china['Deaths'],\n                name='China',\n                marker_color='rgb(255, 0, 0)'\n                ))\nfig.add_trace(go.Bar(x=restof_world['Date'],\n                y=restof_world['Deaths'],\n                name='Rest of world',\n                marker_color='rgb(0, 0, 255)'\n                ))\n\nfig.update_layout(\n    title='Global Deaths China and Rest of World',\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Death Cases',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(250, 242, 242,0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15, # gap between bars of adjacent location coordinates.\n    bargroupgap=0.1 # gap between bars of the same location coordinate.\n)\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\n\nfig.show()\n\n","d0f318ec":"\nfig = go.Figure()\nfig.add_trace(go.Bar(x=china['Date'],\n                y=china['Recovered'],\n                name='China',\n                marker_color='rgb(255, 0, 0)'\n                ))\nfig.add_trace(go.Bar(x=restof_world['Date'],\n                y=restof_world['Recovered'],\n                name='Rest of world',\n                marker_color='rgb(0, 0, 255)'\n                ))\n\nfig.update_layout(\n    title='Global Recovered Cases, China and Rest of World',\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Recovered Cases',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    legend=dict(\n        x=0,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n    barmode='group',\n    bargap=0.15, # gap between bars of adjacent location coordinates.\n    bargroupgap=0.1 # gap between bars of the same location coordinate.\n)\nfig.update_layout(plot_bgcolor='rgb(250, 242, 242)')\n\nfig.show()\n\n","fee2ef2a":"from plotly.subplots import make_subplots\n\nfig = make_subplots(\n    rows=2, cols=2,\n    subplot_titles=(\"Italy\",\"Korea, South\",\"Spain\", \"India\",))\n\ncountries=[\"Italy\",\"Korea, South\",\"Spain\", \"India\",]\n\n    \ncountry=data[data['Country']==countries[0]]\nfig.add_trace(go.Scatter(x=country['Date'], y=country['Confirmed'],\n                    marker=dict(color=country['Confirmed'], coloraxis=\"coloraxis\")),\n              1, 1)\n    \ncountry=data[data['Country']==countries[1]]\nfig.add_trace(go.Scatter(x=country['Date'], y=country['Confirmed'],\n                    marker=dict(color=country['Confirmed'], coloraxis=\"coloraxis\")),\n              1,2 )\n    \ncountry=data[data['Country']==countries[2]]\nfig.add_trace(go.Scatter(x=country['Date'], y=country['Confirmed'],\n                    marker=dict(color=country['Confirmed'], coloraxis=\"coloraxis\")),\n              2, 1)\n    \ncountry=data[data['Country']==countries[3]]\nfig.add_trace(go.Scatter(x=country['Date'], y=country['Confirmed'],\n                    marker=dict(color=country['Confirmed'], coloraxis=\"coloraxis\")),\n              2,2 )\nfig.update_layout(title=\"Confirmed cases in Italy,S.Korea,Spain and India\")\n\nfig.show()   ","9706ab10":"fig = make_subplots(\n    rows=2, cols=2,\n    subplot_titles=(\"Italy\",\"Korea, South\",\"Spain\", \"India\",))\n\ncountries=[\"Italy\",\"Korea, South\",\"Spain\", \"India\",]\n\n    \ncountry=data[data['Country']==countries[0]]\nfig.add_trace(go.Scatter(x=country['Date'], y=country['Deaths'],\n                    marker=dict(color=country['Deaths'], coloraxis=\"coloraxis\")),\n              1, 1)\n    \ncountry=data[data['Country']==countries[1]]\nfig.add_trace(go.Scatter(x=country['Date'], y=country['Deaths'],\n                    marker=dict(color=country['Deaths'], coloraxis=\"coloraxis\")),\n              1,2 )\n    \ncountry=data[data['Country']==countries[2]]\nfig.add_trace(go.Scatter(x=country['Date'], y=country['Deaths'],\n                    marker=dict(color=country['Deaths'], coloraxis=\"coloraxis\")),\n              2, 1)\n    \ncountry=data[data['Country']==countries[3]]\nfig.add_trace(go.Scatter(x=country['Date'], y=country['Deaths'],\n                    marker=dict(color=country['Deaths'], coloraxis=\"coloraxis\")),\n              2,2 )\nfig.update_layout(title=\"Deaths in Italy,S.Korea,Spain and India\")\n\nfig.show()   ","a35689ed":"fig = make_subplots(\n    rows=2, cols=2,\n    subplot_titles=(\"Italy\",\"Korea, South\",\"Spain\", \"India\",))\n\ncountries=[\"Italy\",\"Korea, South\",\"Spain\", \"India\",]\n\n    \ncountry=data[data['Country']==countries[0]]\nfig.add_trace(go.Scatter(x=country['Date'], y=country['Recovered'],\n                    marker=dict(color=country['Recovered'], coloraxis=\"coloraxis\")),\n              1, 1)\n    \ncountry=data[data['Country']==countries[1]]\nfig.add_trace(go.Scatter(x=country['Date'], y=country['Recovered'],\n                    marker=dict(color=country['Recovered'], coloraxis=\"coloraxis\")),\n              1,2 )\n    \ncountry=data[data['Country']==countries[2]]\nfig.add_trace(go.Scatter(x=country['Date'], y=country['Recovered'],\n                    marker=dict(color=country['Recovered'], coloraxis=\"coloraxis\")),\n              2, 1)\n    \ncountry=data[data['Country']==countries[3]]\nfig.add_trace(go.Scatter(x=country['Date'], y=country['Recovered'],\n                    marker=dict(color=country['Recovered'], coloraxis=\"coloraxis\")),\n              2,2 )\nfig.update_layout(title=\"Recovered in Italy,S.Korea,Spain and India\")\n\nfig.show()   ","03683fbe":"data=pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")","da0681dd":"data.isna().sum()\ndata.fillna(\"Unknown\",inplace=True)\ndata=data[['ObservationDate',\"Province\/State\",\"Country\/Region\",\"Confirmed\",\"Deaths\",\"Recovered\"]]\n\ndata.rename({'ObservationDate':\"ds\",\"Province\/State\":\"State\",\"Country\/Region\":\"Country\"},axis=1,inplace=True)\ndata['ds']=pd.to_datetime(data['ds'])","25668af0":"data.head()","4afa72d4":"\n\ndef train_test_split(df,test_days):\n    df=data.copy()\n    max_date=df.ds.max()-timedelta(test_days)\n    \n    for col in [\"State\",\"Country\"]:\n        lb=LabelEncoder()\n        df[col]=lb.fit_transform(df[col])\n    \n    train = df[df['ds'] < max_date]\n    #y_train = df[df['ds'] < max_date] [['Confirmed',\"Deaths\",\"Recovered\"]]\n    \n    test = df[df['ds'] > max_date]\n    #y_test = df[df['ds'] > max_date] [['Confirmed',\"Deaths\",\"Recovered\"]]\n    \n    return train,test\n\n","f698e5fa":"train,test= train_test_split(data,7)","73530675":"def train_predict(train,test):\n    targets=['Confirmed',\"Deaths\",\"Recovered\"]\n    predictions=pd.DataFrame()\n    for col in targets:\n        \n        trainX=train[['ds',\"State\",\"Country\"]+[col]]\n        X_test=test[['ds','State', 'Country']]\n        \n        m= Prophet()\n        trainX.rename({col:\"y\"},axis=1,inplace=True)\n        m.add_regressor(\"State\")\n        m.add_regressor(\"Country\")\n        m.fit(trainX)\n        \n        future=m.predict(X_test)\n        \n        predictions[col]=future['yhat']\n        \n    return predictions\n","66570a20":"sub=train_predict(train,test)\nsub['ds']=test['ds'].values","bbc85db2":"sub.head()","08db200f":"plot_acf(data[(data['Country']==\"Mainland China\") & (data['State']==\"Hubei\")][['Recovered']])","bcf6ea57":"plot_pacf(data[(data['Country']==\"Mainland China\") & (data['State']==\"Hubei\")][['Recovered']])","2597b6e9":"def simple_fe(df):\n    \n    df['year']=df['ds'].dt.year\n    df['month']=df['ds'].dt.month\n    df['day']=df['ds'].dt.day\n    \n    ##lag features\n    df.loc[:,'rec_lag_2']=df.groupby(['Country','State'])['Recovered'].transform(lambda x: x.shift(1))\n    df.loc[:,'conf_lag_2'] = df.groupby(['Country'])['Confirmed'].transform(lambda x: x.shift(1))\n    df.loc[:,'deaths_lag_2'] =df.groupby(['Country'])['Deaths'].transform(lambda x: x.shift(1))\n    \n    ##rolling mean\n    df['rec_rollmean_7']=df.groupby(['Country','State'])['Recovered'].transform(lambda x: x.rolling(7).mean())\n    df['conf_rollmean_7'] = df.groupby(['Country'])['Confirmed'].transform(lambda x: x.rolling(7).mean())\n    df['deaths_rollmean_7'] =df.groupby(['Country'])['Deaths'].transform(lambda x: x.rolling(7).mean())\n    \n    ##rolling std\n    df['rec_rollstd_7']=df.groupby(['Country','State'])['Recovered'].transform(lambda x: x.rolling(7).std())\n    df['conf_rollstd_7'] = df.groupby(['Country'])['Confirmed'].transform(lambda x: x.rolling(7).std())\n    df['deaths_rollstd_7'] =df.groupby(['Country'])['Deaths'].transform(lambda x: x.rolling(7).std())\n    \n    #df.drop(['ds'],axis=1,inplace=True)\n    df.fillna(0,inplace=True)\n    \n    return df\n    ","85e2e95d":"data= simple_fe(data)","3cf5416b":"def run_lgb(data,target):\n    \n    features=['year', 'month','State', 'Country','Recovered',\n               'day', 'rec_lag_2', 'conf_lag_2', 'deaths_lag_2',\n               'rec_rollmean_7', 'conf_rollmean_7', 'deaths_rollmean_7',\n               'rec_rollstd_7', 'conf_rollstd_7', 'deaths_rollstd_7']\n     \n    train,test=train_test_split(data,7)\n    x_train=train[features]\n    y_train=train[target]\n    print(x_train.shape)\n    x_val=test[features]\n    y_val=test[target]\n    print(x_val.shape)\n\n    # define random hyperparammeters\n    params = {\n        'boosting_type': 'gbdt',\n        'metric': 'rmse',\n        'objective': 'regression',\n        'n_jobs': -1,\n        'seed': 236,\n        'learning_rate': 0.1,\n        'bagging_fraction': 0.75,\n        'bagging_freq': 10, \n        'colsample_bytree': 0.75}\n\n    train_set = lgb.Dataset(x_train[features], y_train,categorical_feature=['State',\"Country\",'year','month','day'])\n    val_set = lgb.Dataset(x_val[features], y_val,categorical_feature=['State',\"Country\",'year','month','day'])\n\n    del x_train, y_train\n\n    model = lgb.train(params, train_set, num_boost_round = 500, early_stopping_rounds = 50, valid_sets = [train_set, val_set],\n                      verbose_eval = 100,)\n    val_pred = model.predict(x_val[features])\n    val_score = np.sqrt(metrics.mean_squared_error(val_pred, y_val))\n    print(val_score)\n\n    #y_pred = model.predict(x_val)\n    #test[targets] = y_pred.values\n    return val_pred","214f6762":"sub=pd.DataFrame()\nsub['ds']=test['ds'].values\ntargets=['Confirmed', 'Deaths', 'Recovered']\nfor target in targets:\n    \n        sub[target]=run_lgb(data,target)","9e5959f1":"sub.head()","8cc3b481":"## <font color=\"blue\"  >More to come.. <\/font> <a id=\"1\"><\/a>\n\n<font color=\"red\" size=4>Please upvote this kernel if you like it. It motivates me to produce more quality content ;)<\/font>","cb8f2989":"### <font color='red' size=\"3\">Autocorrelation<\/font>","cda97c5e":"\n## <font color=\"red\"  >Loading Required libraries <\/font> <a id=\"1\"><\/a>","173cb6a6":"### <font color=\"red\" >What happened in Hubei? <\/font> <a id=\"1\"><\/a>","3f858730":"![](https:\/\/media.giphy.com\/media\/SsNnE066ZyWmeNLtyJ\/giphy.gif)","682dffa1":"- Hubei also recorded the largest number of deaths due to covid-19 on `feb 13`.","c419953c":"- Most  number of the cases  are confirmed from China,followed by Italy,Iran and S.Korea.\n- As you can see the numbers\/cases in China is much higher than any other country.","00f7ccb8":"- The above plot shows the number of confirmed cases reported per day,till this time we were looking at cumilative sum.\n- The number cases increased exponentially in China on `Feb 13`.,Then it started falling down and in last day it rose it just 13.\n- But incase of Italy the situation seems to be going worse by this time. More than 5k cases on `March 13`\n\nIs `13` really a bad number ?","a7e07164":"## <font size=\"5\" color=\"red\"> LightGBM Starter.<\/font> <a id=\"7\" ><\/a>","d1e2d35b":"- partial autocorrelation indicates that the day before is an important feature.So we will set our lag values to 1.","886378d7":"## <font color=\"red\"  >Data preprocessing <\/font> <a id=\"6\"><\/a>","da1fb45a":"## <font color=\"red\"  >The Prophet forecasting Model <\/font> <a id=\"1\"><\/a>\n\n![](https:\/\/cdn.analyticsvidhya.com\/wp-content\/uploads\/2018\/05\/tumblr_inline_omh3tnv5zk1r1x9ql_500.png)    \n\nWe use a decomposable time series model with three main model components: trend, seasonality, and holidays. They are combined in the following equation:\n\n![](https:\/\/cdn.analyticsvidhya.com\/wp-content\/uploads\/2018\/04\/eqn_ts-300x49.jpg)    \n\n    g(t): piecewise linear or logistic growth curve for modelling non-periodic changes in time series\n    s(t): periodic changes (e.g. weekly\/yearly seasonality)\n    h(t): effects of holidays (user provided) with irregular schedules\n    \u03b5t: error term accounts for any unusual changes not accommodated by the model\n\nUsing time as a regressor, Prophet is trying to fit several linear and non linear functions of time as components. Modeling seasonality as an additive component is the same approach taken by exponential smoothing in Holt-Winters technique . We are, in effect, framing the forecasting problem as a curve-fitting exercise rather than looking explicitly at the time based dependence of each observation within a time series.\n\n  ","6fc362e6":"## <font size=\"5\" color=\"red\">The Story of Rest of World<\/font> <a id=\"8\"><\/a>","b5ca80e8":"- The deaths due to covid virus is steeply increasing in Italy and South Korea.\n- The deaths in India is comparatively low.\n","c74c7664":"- The data contains many unknown values\n- From the data we can conclude that more number of males were infected than females.","2f703e93":" ## <font size=\"8\" color=\"blue\"> Contents<\/font>\n\n\n* [Introduction](#0)\n* [Loading required libraries](#1)\n* [Data preparation](#2)\n* [Getting Basic Ideas](#3)\n* [General Exploratory data analysis](#4)\n\n    * [Most affected Countries]()\n    * [Timeseries analysis of most affected counties]()\n    * [Timeseries of cases reported\/deaths\/recovered per day]()\n    * [Global chloropeth map visualization]()\n    \n* [The Story of China](#5)\n\n    * [Timeseris of cases in China]()\n    * [Most affected Provinces of China]()\n    * [Insights from Wuhan]()\n    \n* [ China vs Rest of world](#8)\n    \n    * [Compare cases in China vs rest of world]()\n    * [The story of Italy,S korea,Spain]()\n    \n* [Prophet forecasting Model](#6)\n\n    * [Data preprocessing]()\n    * [Prophet Baseline]()\n    \n    \n* [LightGBM Starter](#7)\n     * [Feature Engineering]()\n     * [Train and Predict]()\n   ","e33e28ca":"Almost the same pattern as above !","92e81455":"- We will split the data for training and testing.\n- One thing to keep an eye on is about the split in timeseries,I have kept last 7 days of data for test set.","2ba98e8e":"- Simple autocorrelation may indicate indirect relationship and hence is not of much use to us.","dd193253":"- Hubei province is the most affected province\n- followed by `Guangdong` and `Henan`\n- `Macau` and `Tibet` are the least affected Provinces with less than 20 cases.","ea1b539a":"- Now,let's do a baseline with  lightgbm.","64690b1d":"-  major outbreak occured on `Feb 13`th when the number of infected people rised heavily.\n- Now the infeected and recovered cases slowly started convergig leaving a gap of 15k people.So almost 12k people are yet in the hospitals and 3k people died.","b62fab6a":"## <font color=\"red\" size=\"5\">Introduction<\/font><a id=\"0\"><\/a>","11f9289c":"- Cases started reporting in other countries outside China from `february 8th`.\n- Since then,the cases has increased drastically in other Counties.\n- But by the end of February the cases has stabilizied in China,but the situation has worsened in rest of the world.","c92bd409":"Autocorrelation and partial autocorrelation plots are heavily used in time series analysis and forecasting.\nThese are plots that graphically summarize the strength of a relationship with an observation in a time series with observations at prior time steps.","d0d34676":"## <font color=\"red\"  > The Story of China <\/font> <a id=\"5\"><\/a>","0660c746":"2019 Novel Coronavirus (2019-nCoV) is a virus (more specifically, a coronavirus) identified as the cause of an outbreak of respiratory illness first detected in Wuhan, China. Early on, many of the patients in the outbreak in Wuhan, China reportedly had some link to a large seafood and animal market, suggesting animal-to-person spread. However, a growing number of patients reportedly have not had exposure to animal markets, indicating person-to-person spread is occurring. At this time, it\u2019s unclear how easily or sustainably this virus is spreading between people - CDC\n\nThis dataset has daily level information on the number of affected cases, deaths and recovery from 2019 novel coronavirus. Please note that this is a time series data and so the number of cases on any given day is the cumulative number.\n\nThe data is available from 22 Jan, 2020.\n\n<font color=\"blue\" size=3>Please upvote this kernel if you like it. It motivates me to produce more quality content ;)<\/font>","ff5ecef8":"- `Henan` recorded second most number of deaths in China after `Hubei`","6e198c77":"- More than 50% of the cases and deadths are from China where the initial cases was reported.\n- Italy is the second most affected country with 24% of global deadth.\n- Iran follows Italy with 10% of global deadth reported.","5d25897b":"- Let's check what happened in Rest of the world,against the condition of China.\n- This would greatly reveal the trend in Countries such as Italy,Span,S. Korea,India etc..","b68492ff":" ### <font color=\"red\" size=\"4\">Feature Engineering.<\/font> <a id=\"7.1\"><\/a>","b5332019":"### <font color=\"red\"  >Provinces of China<\/font> <a id=\"1\"><\/a>","17c250aa":"## <font color=\"red\"  >Exploratory Data Analysis <\/font> <a id=\"4\"><\/a>","3948528f":"## <font color=\"red\"  >Getting a basic Idea <\/font> <a id=\"3\"><\/a>","264f0484":"- The COVID-19 cases strated increasing steeply from February.\n- The cases started stabilising by March first week.\n- At the same time the cases started increasing in other countries steaply.","32072d5f":"- Again `Feb 13` recorded most number of deadths in China and `March 13` on Italy !","6719b188":"<font size=\"3\" color='red'>Simple Feature Engineering<\/font>","9fb5fd60":"- Note : Corrections will be fixed soon..","5406b89b":"- Since the transfer of the pandemic to other countries from china,the death rates have constantly increased.\n- The death is is actually increasing in a dangerous manner as the first quarter in china.","87b13768":"### <font size=\"3\" color=\"red\">Partial autocorrelation<\/font>","b64aa2c6":"- We will prepare our dataset using `time_series_covid_19_recovered.csv`,`time_series_covid_19_confirmed.csv` and `time_series_covid_19_deaths.csv`.\n- We will use `pd.melt` function to tranform the dataset to suitable format.","eb97c969":"## <font color=\"red\"  >Data preparation <\/font> <a id=\"2\"><\/a>","c72733b6":"- Hubei province in China has recorded the largest number of cases (67k).\n- The highest number of cases in China is in the Hubei province, where the virus is believed to have originated.`Wuhan City` is located in this province.\n- Within Hubei, the city of Wuhan accounts for the highest number of confirmed cases, followed by Zhejiang, Guangdong, and Hunan. The province registered a 30% spike in new confirmed cases of 14,840 on 13 February 2020. ","7690400a":" I saw an interesting fact here,Eventhough Italy has reported more cases than Iran,they lag behind Iran in the recovery rate.The same issue happends between S.Korea and  Spain too.","d96c13ae":"## <font color=\"red\" size=\"5\">Story of Italy,Spain,India and South Korea<\/font>","b0c6e456":"### <font size=\"4\" color='red'> Train and predict<\/font><a id=\"7.2\"><\/a>"}}