{"cell_type":{"16cc0d93":"code","55795e73":"code","920336f5":"code","c24b7e42":"code","14657724":"code","4f871c78":"code","8e09dfa1":"code","59941995":"code","d274de36":"code","a3edd6e1":"code","f2273e4d":"code","e74556da":"code","1b21d3ba":"code","14c4cb66":"code","803d21b3":"code","c9c35432":"markdown","c9cef4d6":"markdown"},"source":{"16cc0d93":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport os\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nos.listdir(\"..\/input\")","55795e73":"dat=pd.read_csv('\/kaggle\/input\/fifa19\/data.csv',encoding='utf-8')\ndat = dat.drop(dat.columns[0], axis = 1)\ndat.head()\n# Removing spaces in the column names to enable easy column reference  \ndat.columns = dat.columns.str.replace(' ','')\n# Removing special characters (e.g. euro dollar sign)\neuro_sign = dat['ReleaseClause'][0][:3]\ndat['ReleaseClause'] = dat['ReleaseClause'].str.replace(euro_sign,'')\ndat['Value'] = dat['Value'].str.replace(euro_sign,'')\ndat['Wage'] = dat['Wage'].str.replace(euro_sign,'')\ndat['ReleaseClause'] = dat['ReleaseClause'].str.replace('M','') # Removing Millions in the field\ndat['Value'] = dat['Value'].str.replace('M','') # Removing Millions in the field\ndat['Wage'] = dat['Wage'].str.replace('K','') # Removing Thousands in the field\n\n# Converting wages,release clause, value from string into integers\/float\ndat.ReleaseClause = pd.to_numeric(dat.ReleaseClause, errors='coerce')\ndat.Value = pd.to_numeric(dat.Value, errors='coerce')\ndat.Wage = pd.to_numeric(dat.Wage, errors='coerce')\n\n# Converting Weight from string into integers\/float\ndat['Weight'] = dat['Weight'].str.replace('lbs','') # Removing lbs in the field\ndat.Weight = pd.to_numeric(dat.Weight, errors='coerce')\n# Use Regular Expression to convert Height from feet + inches into cm. Convert from text into integer\nr = re.compile(r\"([0-9]+)'([0-9]+)\")    # to set the pattern e.g. 5'7 , 4'12 etc\ndef get_cm(height):\n    height = str(height)\n    m = r.match(height)\n    if m == None:\n        return float('NaN')\n    else:\n        return float(m.group(1))*30.48 + float(m.group(2))*2.54\ndat[\"Height\"] = dat[\"Height\"].apply(lambda x:get_cm(x))\n\n# check\n# dat['ReleaseClause'].head()\n# dat['Wage'].head()\n# dat['Value'].head()\n# dat['Weight'].head()\n# dat['Height'].head()\n\n# Drop unnecessary columns that are not used for analyzing a player's performance\n# This inclues: 'Real Face', 'Jersey Number', 'Loaned From' LS, ST, RS, LW, LF, CF, RF, RW, LAM, CAM, RAM, LM, LCM, CM, RCM, RM, LWB, LDM\n# CDM, RDM, RWB LB, LCB, CB, RCB, RB\ndat = dat.drop(dat.columns[27:53], axis = 1)\ndat = dat.drop(labels = ['RealFace','JerseyNumber','LoanedFrom'], axis = 1)\n#dat.head()\n\n# Check for missing values\n# Check if there any null values in the dataset \ndat.isnull().values.any() # There are indeed missing values in some rows in the dataset\ndat.isnull().columns\n#cols = ['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys','Dribbling','Curve','FKAccuracy','LongPassing','BallControl','Acceleration','SprintSpeed','Agility','Reactions','Balance','ShotPower','Jumping','Stamina','Strength','LongShots','Aggression','Interceptions','Positioning','Vision','Penalties','Composure','Marking','StandingTackle','SlidingTackle','GKDiving','GKHandling','GKKicking','GKPositioning']\n# set mean values to all empty entries\ndat['Crossing'].fillna(dat['Crossing'].mean(),inplace=True)\ndat['Finishing'].fillna(dat['Finishing'].mean(),inplace=True)\ndat['HeadingAccuracy'].fillna(dat['HeadingAccuracy'].mean(),inplace=True)\ndat['ShortPassing'].fillna(dat['ShortPassing'].mean(),inplace=True)\ndat['Volleys'].fillna(dat['Volleys'].mean(),inplace=True)\ndat['Dribbling'].fillna(dat['Dribbling'].mean(), inplace=True)\ndat['Curve'].fillna(dat['Curve'].mean(),inplace=True)\ndat['FKAccuracy'].fillna(dat['FKAccuracy'].mean(),inplace=True)\ndat['LongPassing'].fillna(dat['LongPassing'].mean(),inplace=True)\ndat['BallControl'].fillna(dat['BallControl'].mean(),inplace=True)\ndat['Acceleration'].fillna(dat['Acceleration'].mean(),inplace=True)\ndat['SprintSpeed'].fillna(dat['SprintSpeed'].mean(),inplace=True)\ndat['Agility'].fillna(dat['Agility'].mean(),inplace=True)\ndat['Reactions'].fillna(dat['Reactions'].mean(),inplace=True)\ndat['Balance'].fillna(dat['Balance'].mean(),inplace=True)\ndat['ShotPower'].fillna(dat['ShotPower'].mean(),inplace=True)\ndat['Jumping'].fillna(dat['Jumping'].mean(),inplace=True)\ndat['Stamina'].fillna(dat['Stamina'].mean(),inplace=True)\ndat['Strength'].fillna(dat['Strength'].mean(),inplace=True)\ndat['LongShots'].fillna(dat['LongShots'].mean(),inplace=True)\ndat['Aggression'].fillna(dat['Aggression'].mean(),inplace=True)\ndat['Interceptions'].fillna(dat['Interceptions'].mean(),inplace=True)\ndat['Positioning'].fillna(dat['Positioning'].mean(),inplace=True)\ndat['Vision'].fillna(dat['Vision'].mean(),inplace=True)\ndat['Penalties'].fillna(dat['Penalties'].mean(),inplace=True)\ndat['Composure'].fillna(dat['Composure'].mean(),inplace=True)\ndat['Marking'].fillna(dat['Marking'].mean(),inplace=True)\ndat['StandingTackle'].fillna(dat['StandingTackle'].mean(),inplace=True)\ndat['SlidingTackle'].fillna(dat['SlidingTackle'].mean(),inplace=True)\ndat['GKDiving'].fillna(dat['GKDiving'].mean(),inplace=True)\ndat['GKHandling'].fillna(dat['GKHandling'].mean(),inplace=True)\ndat['GKKicking'].fillna(dat['GKKicking'].mean(),inplace=True)\ndat['GKPositioning'].fillna(dat['GKPositioning'].mean(),inplace=True)\n\n# Develop the FIFA attributes: Pace, Shooting, Passing, Dribbling, Defending, Physical\n# Each of these attributes are made up of the following skills (https:\/\/www.fifauteam.com\/fifa-18-attributes-guide\/)\n# Pace: Sprint Speed, Acceleration\n# Shooting: FINISHING, LONG SHOTS, PENALTIES, POSITIONING, SHOT POWER, VOLLEYS\n# PASSING: CROSSING, CURVE, FREE KICK, LONG PASSING, SHORT PASSING, VISION\n# DRIBBLING: AGILITY, BALANCE, BALL CONTROL, COMPOSURE, DRIBBLING, REACTIONS\n# DEFENDING: HEADING, INTERCEPTIONS, MARKING, SLIDING TACKLE, STANDING TACKLE\n# PHYSICAL: AGGRESSION, JUMPING, STAMINA, STRENGTH\n# GOALKEEPING: DIVING, HANDLING, KICKING, POSITIONING\ndat['Pace'] = ( dat['SprintSpeed'] + dat['Acceleration'] ) \/2 \ndat['Shooting'] = ( dat['Finishing'] + dat['LongShots'] + dat['Penalties'] + dat['Positioning'] + dat['ShotPower'] + dat['Volleys'] ) \/ 6\ndat['Passing'] = ( dat['Crossing'] + dat['Curve'] + dat['FKAccuracy'] + dat['LongPassing'] + dat['ShortPassing'] + dat['Vision'] ) \/ 6\ndat['Dribbling Skill'] = ( dat['HeadingAccuracy'] + dat['Interceptions'] + dat['Marking'] + dat['StandingTackle'] + dat['SlidingTackle'] ) \/ 5\ndat['Physical'] = ( dat['Aggression'] + dat['Jumping'] + dat['Stamina'] + dat['Strength'] ) \/ 4\ndat['Goal Keeping'] = ( dat['GKDiving'] + dat['GKHandling'] + dat['GKKicking'] + dat['GKPositioning'] ) \/ 4\ndat.head()","920336f5":"# The top 10 players based on the overall score are:\ntop_10 = dat.nlargest(10, 'Overall')\ntop_10[['Name','Overall','Club','Position']]","c24b7e42":"# The best players in each position are (based on the overall score):\ntop_3_position = dat.groupby(['Position']).apply(lambda x: x.sort_values(['Overall'],ascending = False) )\ntop_3_position.groupby(level=0).head(1).sort_values(['Overall'],ascending = False)","14657724":"# The best players in each position are (based on the overall score):\ntop_3_position = dat.groupby(['Position']).apply(lambda x: x.sort_values(['Overall'],ascending = False) )\ntop_3_position.groupby(level=0).head(3)\n# We would like to understand the characteristics of the best players","4f871c78":"# Function for plotting a radar plot. Taken from (https:\/\/stackoverflow.com\/questions\/52910187\/how-to-make-a-polygon-radar-spider-chart-in-python)\n\nimport matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Circle, RegularPolygon\nfrom matplotlib.path import Path\nfrom matplotlib.projections.polar import PolarAxes\nfrom matplotlib.projections import register_projection\nfrom matplotlib.spines import Spine\nfrom matplotlib.transforms import Affine2D\n\ndef radar_factory(num_vars, frame='circle'):\n    \"\"\"Create a radar chart with `num_vars` axes.\n\n    This function creates a RadarAxes projection and registers it.\n\n    Parameters\n    ----------\n    num_vars : int\n        Number of variables for radar chart.\n    frame : {'circle' | 'polygon'}\n        Shape of frame surrounding axes.\n\n    \"\"\"\n    # calculate evenly-spaced axis angles\n    theta = np.linspace(0, 2*np.pi, num_vars, endpoint=False)\n\n    class RadarAxes(PolarAxes):\n\n        name = 'radar'\n\n        def __init__(self, *args, **kwargs):\n            super().__init__(*args, **kwargs)\n            # rotate plot such that the first axis is at the top\n            self.set_theta_zero_location('N')\n\n        def fill(self, *args, closed=True, **kwargs):\n            \"\"\"Override fill so that line is closed by default\"\"\"\n            return super().fill(closed=closed, *args, **kwargs)\n\n        def plot(self, *args, **kwargs):\n            \"\"\"Override plot so that line is closed by default\"\"\"\n            lines = super().plot(*args, **kwargs)\n            for line in lines:\n                self._close_line(line)\n\n        def _close_line(self, line):\n            x, y = line.get_data()\n            # FIXME: markers at x[0], y[0] get doubled-up\n            if x[0] != x[-1]:\n                x = np.concatenate((x, [x[0]]))\n                y = np.concatenate((y, [y[0]]))\n                line.set_data(x, y)\n\n        def set_varlabels(self, labels):\n            self.set_thetagrids(np.degrees(theta), labels)\n\n        def _gen_axes_patch(self):\n            # The Axes patch must be centered at (0.5, 0.5) and of radius 0.5\n            # in axes coordinates.\n            if frame == 'circle':\n                return Circle((0.5, 0.5), 0.5)\n            elif frame == 'polygon':\n                return RegularPolygon((0.5, 0.5), num_vars,\n                                      radius=.5, edgecolor=\"k\")\n            else:\n                raise ValueError(\"unknown value for 'frame': %s\" % frame)\n\n        def draw(self, renderer):\n            \"\"\" Draw. If frame is polygon, make gridlines polygon-shaped \"\"\"\n            if frame == 'polygon':\n                gridlines = self.yaxis.get_gridlines()\n                for gl in gridlines:\n                    gl.get_path()._interpolation_steps = num_vars\n            super().draw(renderer)\n\n\n        def _gen_axes_spines(self):\n            if frame == 'circle':\n                return super()._gen_axes_spines()\n            elif frame == 'polygon':\n                # spine_type must be 'left'\/'right'\/'top'\/'bottom'\/'circle'.\n                spine = Spine(axes=self,\n                              spine_type='circle',\n                              path=Path.unit_regular_polygon(num_vars))\n                # unit_regular_polygon gives a polygon of radius 1 centered at\n                # (0, 0) but we want a polygon of radius 0.5 centered at (0.5,\n                # 0.5) in axes coordinates.\n                spine.set_transform(Affine2D().scale(.5).translate(.5, .5)\n                                    + self.transAxes)\n\n\n                return {'polar': spine}\n            else:\n                raise ValueError(\"unknown value for 'frame': %s\" % frame)\n\n    register_projection(RadarAxes)\n    return theta\n\ntop_10_plot = top_10[['Name','Age','Nationality','Club','Position','Pace','Shooting',\n                     'Passing','Dribbling Skill','Physical','Goal Keeping']]\nradar_plot_data = top_10[['Pace','Shooting','Passing','Dribbling Skill','Physical','Goal Keeping']]\nradar_plot_data  = radar_plot_data.values.tolist()\n\ntheta = radar_factory(6, frame='polygon') # Since there are 6 attributes: Pace, Shooting,...,Goal Keeping\nspoke_labels = ['Pace','Shooting','Passing','Dribbling Skill','Physical','Goal Keeping']\n\n\n\ncount = 0\nfor d in radar_plot_data:\n    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\n    fig.subplots_adjust(top=0.85, bottom=0.05)\n    ax.set_rgrids([20,40, 60, 80])\n    ax.set_title(top_10['Name'][count] + \" Overall:\" + str(top_10['Overall'][count]) + \" Pos:\"+ top_10['Position'][count],  position=(0.5, 1.1), ha='center')\n    count += 1\n    line = ax.plot(theta, d, linewidth=1, linestyle='solid')\n    ax.fill(theta, d,  alpha=0.25)\n    ax.set_varlabels(spoke_labels)\n\nplt.show()","8e09dfa1":"# The skill distribution of top 20 players in each position are:\n\ntop_20_position = dat.groupby(['Position']).apply(lambda x: x.sort_values(['Overall'],ascending = False) )\ntop20_data = top_20_position.groupby(level=0).head(20)\ntop20_data = top20_data[['Name','Age','Nationality','Overall','Club','Position','Pace','Shooting',\n                     'Passing','Dribbling Skill','Physical','Goal Keeping']]\nPositions = ['GK','LB','CB','RB','CM','CAM','RW','LW','ST','RF']\nfor position in Positions: \n    dat1 = top20_data[top20_data['Position']==position]\n    radar_plot_data = dat1[['Pace','Shooting','Passing','Dribbling Skill','Physical','Goal Keeping']]\n    radar_plot_data = radar_plot_data.values.tolist()\n    theta = radar_factory(6, frame='polygon') # Since there are 6 attributes: Pace, Shooting,...,Goal Keeping\n    spoke_labels = ['Pace','Shooting','Passing','Dribbling Skill','Physical','Goal Keeping']\n    fig, ax = plt.subplots(figsize=(6, 6), subplot_kw=dict(projection='radar'))\n    fig.subplots_adjust(top=0.85, bottom=0.05)\n    ax.set_rgrids([20,40, 60, 80])\n    ax.set_title(\"Position: \" + position + \" Top 20 Score: \"+ str(int(dat1['Overall'].mean())),  position=(0.5, 1.1), ha='center')\n    for d in radar_plot_data:\n        line = ax.plot(theta, d, linewidth=1, linestyle='solid')\n        ax.fill(theta, d,  alpha=0.25)\n        ax.set_varlabels(spoke_labels)\n    plt.show()","59941995":"from matplotlib import rcParams\n\n# figure size in inches\nrcParams['figure.figsize'] = 11.7,8.27\n\ntop_20_position = dat.groupby(['Position']).apply(lambda x: x.sort_values(['Overall'],ascending = False) )\ntop20_data = top_20_position.groupby(level=0).head(20)\n\n\n# Distribution of their ages\np1=sns.kdeplot(top20_data['Age'], shade=True, color=\"r\", label='Top 20 Players')\np2=sns.kdeplot(dat['Age'], shade=True, color=\"b\", label='Average Players')\np1.axvline(top20_data['Age'].mean(), color='r', linestyle='--')\np2.axvline(dat['Age'].mean(), color='b', linestyle='--')\nplt.xlabel('Age')\nplt.yticks([])\nplt.title('Top players continue to peak after 25 while average players drop off after 25')\nplt.show()\n\n# Distribution of their nationality\np1 = sns.countplot(x=\"Nationality\", data=top20_data)\nplt.xticks([])\nplt.title('Top players come from: Brazil, Spain, Germany, France, Argentina')\nplt.show()\n\n# Distribution of their height\np1=sns.kdeplot(top20_data['Height'], shade=True, color=\"r\", label='Top 20 Players')\np2=sns.kdeplot(dat['Height'], shade=True, color=\"b\", label='Average Players')\np1.axvline(top20_data['Height'].mean(), color='r', linestyle='--')\np2.axvline(dat['Height'].mean(), color='b', linestyle='--')\nplt.xlabel('Height')\nplt.yticks([])\nplt.title('Height does not play a crucial role in determining a top player')\nplt.show()\n\n# Distribution of their weight\np1=sns.kdeplot(top20_data['Weight'], shade=True, color=\"r\", label='Top 20 Players')\np2=sns.kdeplot(dat['Weight'], shade=True, color=\"b\", label='Average Players')\np1.axvline(top20_data['Weight'].mean(), color='r', linestyle='--')\np2.axvline(dat['Weight'].mean(), color='b', linestyle='--')\nplt.xlabel('Weight')\nplt.yticks([])\nplt.title('Weight does not play a crucial role in determining a top player')\nplt.show()\n\n\n# Distribution of their reputation and ratings","d274de36":"# Distribution of their work rate\nplt, ax =plt.subplots(1,2)\nplt.suptitle(\"Top Players do not necessarily work harder than Average Players\", fontsize=14)\n\ng = sns.countplot(x=\"WorkRate\", data=top20_data, color=\"r\", label='Top 20 Players', ax=ax[0])\ng.set_xticklabels(g.get_xticklabels(),rotation=30)\ng.set(xlabel = 'Work Rate for Top Players')\n\n\ng2 = sns.countplot(x=\"WorkRate\", data=dat, color=\"b\", label='Average Players',ax=ax[1])\ng2.set_xticklabels(g.get_xticklabels(),rotation=30)\ng2.set(xlabel='Work Rate for Average Players')\nplt.show()","a3edd6e1":"# Distribution of their skill moves\np1 = sns.countplot(x=\"SkillMoves\", data=top20_data, color=\"r\")\np1.set(xlabel='Number of Skill Moves for Top Players')\n#plt.title('Top Players have more Skill Moves than Average Players')\nplt.show()","f2273e4d":"g2 = sns.countplot(x=\"SkillMoves\", data=dat, color=\"b\")\ng2.set(xlabel='Number of Skill Moves for Average Players')\nplt.show()","e74556da":"# Distribution of their reputation of top players\np1 = sns.countplot(x=\"InternationalReputation\", data=top20_data, color=\"r\")\np1.set(xlabel='International Reputation for Top Players')\nplt.show()","1b21d3ba":"# Distribution of their reputation of average players\np2 = sns.countplot(x=\"InternationalReputation\", data=dat, color=\"b\")\np2.set(xlabel='International Reputation for Average Players')\nplt.show()","14c4cb66":"g = sns.lineplot(top20_data['Age'], top20_data['Overall'], palette = 'Wistia')\ng.set(xlabel = 'Age vs Overall Top Players')\nplt.show()","803d21b3":"g = sns.lineplot(dat['Age'], dat['Overall'], palette = 'Wistia')\ng.set(xlabel = 'Age vs Overall Average Players')\n\nplt.show()","c9c35432":"## Characteristics of the best players:\n\nWe would like to understand who are the best players for each player position in FIF19. Further we will like to analyse what are the characteristics of the best players. Do they have similar characteristics that are not observed in the less well-performed group of players? Further, we would like to analyse in the possibility that whether certain characteristics like weight, height, age, nationality, club, work rate, reputation, ratings and skills favors\/discriminates against the overall performance.\n\n- Are these players of a certain nationality?\n- Are these players of a certain height and weight?\n- Do players performs well at a certain age?\n- Are the best players the players with a strong work rate?\n- Do the reputation and ratings of the players correlate strongly with the overall performance?","c9cef4d6":"## Insights on the characteristics of the best players:\n\nIn this study, the top players are defined as the top 20 players in each playing position based on their overall performance. Based on the analysis and comparison of the top players with the average players on the characteristics like weight, height, age, nationality, club, work rate, reputation and skills. We have identified the following characteristics:\n\n- Top players tend to peak after 25 while average players play worse off after 25\n- Height and weight do not play an important role in identifying top and average players\n- Top players are often from Europe (France, Germany, Spain) and South America (Argentina, Brazil)\n- Top players do not necessarily have a higher work rate as compared to the average players\n- Top players have more skills than the average players \n- Top players know how to maintain their overall performance for a longer period of their careers (until 35 years old)\n"}}