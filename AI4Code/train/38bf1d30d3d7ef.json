{"cell_type":{"67bcee36":"code","18746e9d":"code","d5c6e2ea":"code","86b2ce4f":"code","27805817":"code","f73bdd37":"code","6807d1a4":"code","7950d86d":"code","1b4f70e6":"code","2edb0d1d":"code","14c57f6d":"code","1b04553c":"code","37776d3f":"code","127c29e3":"code","b80d9b53":"code","6185c19d":"code","a8155fb1":"code","369a4e88":"code","48c67430":"code","eee4be44":"code","a5b1a3f7":"code","3993f9bc":"code","be70073b":"code","e173efad":"code","379d6aa2":"code","5a132cad":"code","24385ab2":"code","aa260d67":"code","b79a5d4a":"code","0ed0c9d4":"code","ee26ba80":"code","23ca78d7":"code","d7b052cf":"code","39aafd2c":"code","82e835b5":"code","af023b26":"code","e6b85bfd":"code","71183e76":"code","44e6b9b9":"code","d1fdf6bd":"code","fb4531cb":"code","f7c6b578":"code","2c9603ff":"code","fdbef45f":"code","8fc26288":"code","2cdd2600":"code","57cbb9ec":"code","48a3b8af":"code","a7b36781":"code","3ec8d466":"code","178d5b12":"code","58e67747":"code","53b45697":"code","7420504d":"code","263ea333":"code","878373ca":"markdown","421b7697":"markdown","4239ad15":"markdown","cb82d682":"markdown"},"source":{"67bcee36":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18746e9d":"# from google.colab import drive\n# drive.mount('\/content\/drive')","d5c6e2ea":"import os\nimport pandas as pd\nfrom sklearn.model_selection import TimeSeriesSplit, GridSearchCV\nimport xgboost as xgb\nimport numpy as np","86b2ce4f":"TRAINING=True","27805817":"# train = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')","f73bdd37":"# %%time\n# print('Filling...')\n# f_mean = train[features[3:]].mean()\n# # train = train.query('weight > 0').reset_index(drop = True)\n# train[features[3:]] = train[features[3:]].fillna(f_mean)\n# train['action'] = (train['resp'] > 0).astype('int')\n\n# print('Converting...')\n\n# f_mean = np.array(f_mean)\n# np.save('f_mean.npy', f_mean)\n\n# print('Finish.')","6807d1a4":"train = pd.read_csv('..\/input\/jane-street-market-prediction\/train.csv')\ntrain = train.query('date > 85').reset_index(drop = True) \ntrain = train.astype({c: np.float32 for c in train.select_dtypes(include='float64').columns}) #limit memory use\ntrain.fillna(train.mean(),inplace=True)\ntrain = train.query('weight > 0').reset_index(drop = True)\n#train['action'] = (train['resp'] > 0).astype('int')\ntrain['action'] =  (  (train['resp_1'] > 0 ) & (train['resp_2'] > 0 ) & (train['resp_3'] > 0 ) & (train['resp_4'] > 0 ) &  (train['resp'] > 0 )   ).astype('int')\nfeatures = [c for c in train.columns if 'feature' in c]\n\nresp_cols = ['resp_1', 'resp_2', 'resp_3', 'resp', 'resp_4']","7950d86d":"f_mean = np.mean(train[features[1:]].values,axis=0)","1b4f70e6":"len(f_mean)","2edb0d1d":"def reduce_memory_usage(df):\n    \n    start_memory = df.memory_usage().sum() \/ 1024**2\n    print(f\"Memory usage of dataframe is {start_memory} MB\")\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != 'object':\n            c_min = df[col].min()\n            c_max = df[col].max()\n            \n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    pass\n        else:\n            df[col] = df[col].astype('category')\n    \n    end_memory = df.memory_usage().sum() \/ 1024**2\n    print(f\"Memory usage of dataframe after reduction {end_memory} MB\")\n    print(f\"Reduced by {100 * (start_memory - end_memory) \/ start_memory} % \")\n    return df","14c57f6d":"# train = reduce_memory_usage(train)","1b04553c":"f_mean = np.mean(train[features[1:]].values,axis=0)","37776d3f":"len(f_mean)","127c29e3":"from sklearn.model_selection._split import _BaseKFold, indexable, _num_samples\nfrom sklearn.utils.validation import _deprecate_positional_args\n\n# https:\/\/github.com\/getgaurav2\/scikit-learn\/blob\/d4a3af5cc9da3a76f0266932644b884c99724c57\/sklearn\/model_selection\/_split.py#L2243\nclass GroupTimeSeriesSplit(_BaseKFold):\n    \"\"\"Time Series cross-validator variant with non-overlapping groups.\n    Provides train\/test indices to split time series data samples\n    that are observed at fixed time intervals according to a\n    third-party provided group.\n    In each split, test indices must be higher than before, and thus shuffling\n    in cross validator is inappropriate.\n    This cross-validation object is a variation of :class:`KFold`.\n    In the kth split, it returns first k folds as train set and the\n    (k+1)th fold as test set.\n    The same group will not appear in two different folds (the number of\n    distinct groups has to be at least equal to the number of folds).\n    Note that unlike standard cross-validation methods, successive\n    training sets are supersets of those that come before them.\n    Read more in the :ref:`User Guide <cross_validation>`.\n    Parameters\n    ----------\n    n_splits : int, default=5\n        Number of splits. Must be at least 2.\n    max_train_size : int, default=None\n        Maximum size for a single training set.\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from sklearn.model_selection import GroupTimeSeriesSplit\n    >>> groups = np.array(['a', 'a', 'a', 'a', 'a', 'a',\\\n                           'b', 'b', 'b', 'b', 'b',\\\n                           'c', 'c', 'c', 'c',\\\n                           'd', 'd', 'd'])\n    >>> gtss = GroupTimeSeriesSplit(n_splits=3)\n    >>> for train_idx, test_idx in gtss.split(groups, groups=groups):\n    ...     print(\"TRAIN:\", train_idx, \"TEST:\", test_idx)\n    ...     print(\"TRAIN GROUP:\", groups[train_idx],\\\n                  \"TEST GROUP:\", groups[test_idx])\n    TRAIN: [0, 1, 2, 3, 4, 5] TEST: [6, 7, 8, 9, 10]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a']\\\n    TEST GROUP: ['b' 'b' 'b' 'b' 'b']\n    TRAIN: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] TEST: [11, 12, 13, 14]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a' 'b' 'b' 'b' 'b' 'b']\\\n    TEST GROUP: ['c' 'c' 'c' 'c']\n    TRAIN: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\\\n    TEST: [15, 16, 17]\n    TRAIN GROUP: ['a' 'a' 'a' 'a' 'a' 'a' 'b' 'b' 'b' 'b' 'b' 'c' 'c' 'c' 'c']\\\n    TEST GROUP: ['d' 'd' 'd']\n    \"\"\"\n    @_deprecate_positional_args\n    def __init__(self,\n                 n_splits=5,\n                 *,\n                 max_train_size=None\n                 ):\n        super().__init__(n_splits, shuffle=False, random_state=None)\n        self.max_train_size = max_train_size\n\n    def split(self, X, y=None, groups=None):\n        \"\"\"Generate indices to split data into training and test set.\n        Parameters\n        ----------\n        X : array-like of shape (n_samples, n_features)\n            Training data, where n_samples is the number of samples\n            and n_features is the number of features.\n        y : array-like of shape (n_samples,)\n            Always ignored, exists for compatibility.\n        groups : array-like of shape (n_samples,)\n            Group labels for the samples used while splitting the dataset into\n            train\/test set.\n        Yields\n        ------\n        train : ndarray\n            The training set indices for that split.\n        test : ndarray\n            The testing set indices for that split.\n        \"\"\"\n        if groups is None:\n            raise ValueError(\n                \"The 'groups' parameter should not be None\")\n        X, y, groups = indexable(X, y, groups)\n        n_samples = _num_samples(X)\n        n_splits = self.n_splits\n        n_folds = n_splits + 1\n        group_dict = {}\n        u, ind = np.unique(groups, return_index=True)\n        unique_groups = u[np.argsort(ind)]\n        n_samples = _num_samples(X)\n        n_groups = _num_samples(unique_groups)\n        for idx in np.arange(n_samples):\n            if (groups[idx] in group_dict):\n                group_dict[groups[idx]].append(idx)\n            else:\n                group_dict[groups[idx]] = [idx]\n        if n_folds > n_groups:\n            raise ValueError(\n                (\"Cannot have number of folds={0} greater than\"\n                 \" the number of groups={1}\").format(n_folds,\n                                                     n_groups))\n        group_test_size = n_groups \/\/ n_folds\n        group_test_starts = range(n_groups - n_splits * group_test_size,\n                                  n_groups, group_test_size)\n        for group_test_start in group_test_starts:\n            train_array = []\n            test_array = []\n            for train_group_idx in unique_groups[:group_test_start]:\n                train_array_tmp = group_dict[train_group_idx]\n                train_array = np.sort(np.unique(\n                                      np.concatenate((train_array,\n                                                      train_array_tmp)),\n                                      axis=None), axis=None)\n            train_end = train_array.size\n            if self.max_train_size and self.max_train_size < train_end:\n                train_array = train_array[train_end -\n                                          self.max_train_size:train_end]\n            for test_group_idx in unique_groups[group_test_start:\n                                                group_test_start +\n                                                group_test_size]:\n                test_array_tmp = group_dict[test_group_idx]\n                test_array = np.sort(np.unique(\n                                              np.concatenate((test_array,\n                                                              test_array_tmp)),\n                                     axis=None), axis=None)\n            yield [int(i) for i in train_array], [int(i) for i in test_array]","b80d9b53":"import tensorflow as tf","6185c19d":"from tensorflow.keras.layers import Reshape, Input, Dense, Activation,Dropout,Flatten,BatchNormalization\nfrom tensorflow.keras.models import Model,Sequential","a8155fb1":"def build_auto_encoder(shape,parameters):\n    encoder = Sequential()\n    encoder.add(tf.keras.Input((shape,)))\n    # encoder.add(tf.keras.layers.BatchNormalization(input_shape = (shape,)))\n    encoder.add(tf.keras.layers.GaussianNoise(0.2))\n    encoder.add(Flatten())\n    # encoder.add(Dense(int(shape*.75),activation = 'relu',input_shape = (shape,)))\n    encoder.add(Dense(parameters,activation = 'relu',input_shape = (shape,)))\n    \n    decoder = Sequential()\n    decoder.add(tf.keras.Input(parameters))\n    decoder.add(tf.keras.layers.Dropout(0.2))\n    # decoder.add(tf.keras.layers.GaussianNoise(0.2))\n    decoder.add(Dense(shape,activation = 'sigmoid',input_shape = (shape,)))\n    decoder.add(Reshape((shape,)))\n    return (encoder,decoder)","369a4e88":"from keras.layers import BatchNormalization,GaussianNoise,Dense,Dropout\nfrom keras.optimizers import Adam","48c67430":"def create_autoencoder(input_dim,output_dim,noise=0.05):\n    i = Input(input_dim)\n    encoded = BatchNormalization()(i)\n    encoded = GaussianNoise(noise)(encoded)\n    encoded = Dense(int(input_dim*.6))(encoded)\n    encoded = Dense(int(input_dim*.55))(encoded)\n    encoded = Dense(64,activation='relu')(encoded)\n    decoded = Dropout(0.2)(encoded)\n    decoded = Dense(int(64 * (100\/55)))(decoded)\n    decoded = Dense(int(64 * (100\/55) * (100\/60)))(decoded)\n    decoded = Dense(input_dim,name='decoded')(decoded)\n    x = Dense(32,activation='relu')(decoded)\n    x = BatchNormalization()(x)\n    x = Dropout(0.2)(x)\n    x = Dense(output_dim,activation='sigmoid',name='label_output')(x)\n    \n    encoder = Model(inputs=i,outputs=encoded)\n    autoencoder = Model(inputs=i,outputs=[decoded,x])\n    \n    autoencoder.compile(optimizer=Adam(0.001),loss={'decoded':'mse','label_output':'binary_crossentropy'})\n    return autoencoder, encoder","eee4be44":"class AutoEncoder(Model):\n    def __init__(self,orig_shape,latent_dim):\n        super(AutoEncoder,self).__init__()\n        self.latent_dim = latent_dim\n        self.encoder,self.decoder = build_auto_encoder(orig_shape,latent_dim)\n    def call(self,x):\n        encoded = self.encoder(x)\n        decoded = self.decoder(encoded)\n        return decoded","a5b1a3f7":"def Neural_Network(shape,learning_rate,label_smoothing)->Model:\n    model = tf.keras.Sequential()\n    model.add(tf.keras.layers.Input(shape = shape))\n    # model.add(tf.keras.layers.BatchNormalization())\n    # model.add(tf.keras.layers.GaussianNoise(0.1))\n    model.add(Dense(64, activation='relu'))\n    model.add(tf.keras.layers.Dropout(.6))\n    model.add(Dense(32, activation='relu'))\n    \n    model.add(tf.keras.layers.GaussianNoise(0.1))\n  \n    model.add(Dense(2,activation = 'softmax',kernel_regularizer='l2'))\n    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = learning_rate),loss = tf.keras.losses.BinaryCrossentropy(label_smoothing = label_smoothing),metrics=tf.keras.metrics.AUC(name = 'auc'))\n    return model","3993f9bc":"def TCN_Model(shape,learning_rate,label_smoothing)->Model:\n    model = tf.keras.Sequential()\n    \n    model.add(tf.keras.layers.Reshape((shape,1),input_shape=(shape,)))\n    model.add(tf.keras.layers.Conv1D(filters = 3,kernel_size=2,padding='valid',activation = 'relu'))\n    model.add(tf.keras.layers.MaxPooling1D(pool_size=2,strides=1,padding='valid'))\n    \n    model.add(tf.keras.layers.UpSampling1D(size = 2))\n    model.add(tf.keras.layers.Conv1DTranspose(filters = 3,kernel_size=2,padding='valid',activation = 'relu'))\n    model.add(Flatten())\n   \n    model.add(tf.keras.layers.BatchNormalization())\n\n    model.add(Dense(2,activation = 'softmax'))\n    model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = learning_rate),loss = tf.keras.losses.BinaryCrossentropy(label_smoothing = label_smoothing),metrics=tf.keras.metrics.AUC(name = 'auc'))\n    return model","be70073b":"batch_size = 4096\nlabel_smoothing = 1e-2\nlearning_rate = 1e-3","e173efad":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import Normalizer","379d6aa2":"def one_hot(y_true):\n    n_y = []\n    for val in y_true:\n        if val == 1:\n            n_y.append([0,1])\n        else:\n            n_y.append([1,0])\n    n_y = np.array(n_y)\n    return n_y","5a132cad":"tnn = TCN_Model(shape=64,learning_rate = learning_rate,label_smoothing = label_smoothing)","24385ab2":"tnn.summary()","aa260d67":"nn = Neural_Network(shape=64,learning_rate = learning_rate,label_smoothing = label_smoothing)","b79a5d4a":"nn.summary()","0ed0c9d4":"from sklearn.metrics import explained_variance_score\nfrom sklearn.decomposition import PCA\n","ee26ba80":"def calculate_tf_positive_rates(y_true,y_pred):\n    true_pos = 0\n    false_pos = 0\n    false_neg = 0\n    true_neg = 0\n    for true,pred in zip(y_true,y_pred):\n        t = np.argmax(true)\n        p = np.argmax(pred)\n        if t == p:\n            if t == 1:\n                true_pos+=1\n            if t == 0:\n                false_pos+=1\n        else:\n            if p == 1:\n                true_neg+=1\n            if p == 0:\n                false_neg +=1\n    \n    true_pos_rate = true_pos\/(true_pos+false_neg)\n    false_pos_rate = false_pos\/(false_pos+true_neg)\n    return float(true_pos_rate),float(false_pos_rate)\n                \n\n","23ca78d7":"def one_hot(y_vals):\n    one_h = []\n    for val in y_vals:\n        if val == 1:\n            one_h.append([0,1])\n        else:\n            one_h.append([1,0])\n    one_h = np.array(one_h)\n    return one_h","d7b052cf":"import seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_auc_score\n# plt.style.use('ggplot')\ncolor_pal =  [x['color'] for x in plt.rcParams['axes.prop_cycle']]\n","39aafd2c":"def graph_roc_auc_curve(result_table):\n    fig = plt.figure(figsize=(8,6))\n\n    for i in result_table.index:\n        plt.plot(result_table.loc[i]['fpr'], \n                result_table.loc[i]['tpr'], \n                label=\"{}, AUC={:.3f}\".format(result_table.loc[i]['classifiers'], result_table.loc[i]['auc']))\n    \n    plt.plot([0,1], [0,1], color='orange', linestyle='--')\n\n    plt.xticks(np.arange(0.0, 1.1, step=0.1))\n    plt.xlabel(\"Flase Positive Rate\", fontsize=15)\n\n    plt.yticks(np.arange(0.0, 1.1, step=0.1))\n    plt.ylabel(\"True Positive Rate\", fontsize=15)\n\n    plt.title('ROC Curve Analysis', fontweight='bold', fontsize=15)\n    plt.legend(prop={'size':13}, loc='lower right')\n\n    plt.show()","82e835b5":"def get_best_model(results):\n    roc_set = {}\n    res = np.array(results)\n    roc_set['True Positive'] = res[:,0]\n    # roc_set['True Positive'] = roc_set['True Positive'].mean()\n    roc_set['True Negative'] = res[:,1]\n    # roc_set['True Negative']= roc_set['True Negative'].mean()\n    roc_set['ROC\/AUC'] = res[:,2]\n    roc_set['Model'] = res[:,3]\n    # roc_set['ROC\/AUC'] = roc_set['ROC\/AUC'].mean()\n    roc_set['Dimension reduction'] = res[:,4]\n    \n    roc_set['True Positive'] = roc_set['True Positive'].astype('float32',copy=True)\n    roc_set['True Negative'] = roc_set['True Negative'].astype('float32',copy=True)\n\n    roc_df = pd.DataFrame.from_dict(roc_set)\n    # return roc_df\n    roc_df = roc_df.sort_values(by='True Positive',ascending=True)\n    roc_df = roc_df.sort_values(by='True Negative',ascending=True)\n    return roc_df[roc_df['ROC\/AUC'] == roc_df['ROC\/AUC'].max()].values","af023b26":"from sklearn.metrics import roc_curve, auc\nfrom typing import Tuple, List, Dict\nimport time","e6b85bfd":"def m_roc_curve(y_true,y_pred):\n    y_t = []\n    y_p = []\n    for t in y_true:\n        y_t.append(np.argmax(t))\n    for p in y_pred:\n        y_p.append(np.argmax(p))\n    fpr,tpr,_ = roc_curve(np.array(y_t),np.array(y_p))\n    return fpr,tpr","71183e76":"import pickle\nimport statistics as stat","44e6b9b9":"model_names= ['tcn-ae.h5','nn-ae.h5','pca-tcn.h5','pca-nn.h5']","d1fdf6bd":"models = []","fb4531cb":"import pickle","f7c6b578":"\nif TRAINING:\n\n    oof = np.zeros(len(train['action']))\n    gkf = GroupTimeSeriesSplit(n_splits = 4)\n    for fold, (tr, te) in enumerate(gkf.split(train['action'].values, train['action'].values, train['date'].values)):\n        results_set = []\n        \n        result_table = pd.DataFrame(columns = ['classifiers', 'fpr','tpr','auc'])\n        # print(\"#\"*75)\n        # print(tr, features)\n        Standardizer = StandardScaler()\n        Transformer = Normalizer()\n        X_tr, X_val = train.loc[tr, features].values, train.loc[te, features].values\n        y_tr, y_val = train.loc[tr, 'action'].values, train.loc[te, 'action'].values\n        X_tr = Standardizer.fit_transform(X_tr)\n        # X_tr = Transformer.fit_transform(X_tr)\n        X_val = Standardizer.transform(X_val)\n        # X_val = Transformer.transform(X_val)\n        with open('Standardizer.pkl', 'wb') as pickle_file:\n            pickle.dump(Standardizer, pickle_file)\n        \n        y_tr = one_hot(y_tr)\n        y_val = one_hot(y_val)\n        shape = len(X_tr[0])\n        size = len(X_tr)\n        # auto_encoder = AutoEncoder(shape,64)\n        # auto_encoder.compile(optimizer=tf.keras.optimizers.Adam(learning_rate = learning_rate),loss = 'mse',metrics = 'mse')\n        # shape = int(shape*.75)\n        autoencoder, encoder = create_autoencoder(X_tr.shape[-1],y_tr.shape[-1],noise=0.1)\n\n        autoencoder.fit(X_tr,(X_tr,y_tr),\n                        epochs=1000,\n                        batch_size=4096, \n                        validation_split=0.1,verbose = 0,\n                        callbacks=[tf.keras.callbacks.EarlyStopping('val_loss',patience=10,restore_best_weights=True)])\n        epochs = 1000\n        ae_callback = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=10,mode = 'min',restore_best_weights = True)\n        # encoder.fit(x = X_tr,y = X_tr,epochs = 1000,shuffle = False ,batch_size = 4096,verbose = 0,callbacks = [ae_callback],validation_data = (X_val,X_val))\n        autoencoder.evaluate(X_val,(X_val,y_val))\n        encoder.save('autoencoder.h5')\n        X_tr = encoder(X_tr).numpy()\n        X_val = encoder(X_val).numpy()\n        \n        \n        verbose = 2\n        callback = tf.keras.callbacks.EarlyStopping(monitor='val_auc',patience = 10,mode = 'max',restore_best_weights = True)\n       \n        shape = len(X_tr[0])\n        temporal_neural_net = TCN_Model(shape=shape,learning_rate = learning_rate,label_smoothing = label_smoothing)\n\n        print(\"Train TCN\")\n        temporal_neural_net.fit(X_tr,y_tr,batch_size = batch_size,epochs=epochs,shuffle = False,verbose = verbose,validation_data=(X_val,y_val),callbacks = [callback])\n        neural_network = Neural_Network(shape = shape,learning_rate = learning_rate,label_smoothing = label_smoothing)\n        temporal_neural_net.save('tcn-ae.h5')\n        print(\"Train NN\")\n        neural_network.fit(X_tr,y_tr,batch_size = batch_size, epochs=epochs,shuffle = False,verbose = verbose,validation_data = (X_val,y_val),callbacks= [callback])\n        neural_network.save('nn-ae.h5')\n        print(\"TCN results are:\")\n        temporal_neural_net.evaluate(X_val,y_val)\n        tcn_predictions = temporal_neural_net(X_val,training=False).numpy()\n        tcn_true_pos,tcn_false_neg = m_roc_curve(y_val,tcn_predictions)\n        result_table = result_table.append({'classifiers':'tcn-ae',\n                                            'fpr':tcn_true_pos, \n                                            'tpr':tcn_false_neg, \n                                            'auc':roc_auc_score(y_val,tcn_predictions)}, ignore_index=True)\n        results_set.append([np.mean(tcn_true_pos),np.mean(tcn_false_neg),roc_auc_score(y_val,tcn_predictions),'tcn-ae','autoencoder'])\n\n        print(\"TCN ROC\/AUC score is : \", roc_auc_score(y_val,tcn_predictions))\n        print(\"Neural Network results are:\")\n        neural_network.evaluate(X_val,y_val)\n    \n        nn_predictions = neural_network(X_val,training=False).numpy()\n        nn_true_pos,nn_false_neg = m_roc_curve(y_val,nn_predictions)\n        result_table = result_table.append({'classifiers':'nn-ae',\n                                            'fpr':nn_true_pos, \n                                            'tpr':nn_false_neg, \n                                            'auc':roc_auc_score(y_val,nn_predictions)}, ignore_index=True)\n        results_set.append([np.mean(nn_true_pos),np.mean(nn_false_neg),roc_auc_score(y_val,nn_predictions),'nn-ae','autoencoder'])\n\n        print(\"NN ROC\/AUC score is : \", roc_auc_score(y_val,nn_predictions))\n        \n        \n        ensembeled = []\n        for v1,v2 in zip(tcn_predictions,nn_predictions):\n            p_zero = stat.mean([v1[0],v2[0]])\n            p_one = stat.mean([v1[1],v2[1]])\n            ensembeled.append([p_zero,p_one])\n        ensembeled = np.array(ensembeled)\n        ensemble_true_pos,ensemble_false_neg = m_roc_curve(y_val,ensembeled)\n        results_set.append([np.mean(ensemble_true_pos),np.mean(ensemble_false_neg),roc_auc_score(y_val,ensembeled),'ensemble','e'])    \n        result_table = result_table.append({'classifiers':'ensemble',\n                                            'fpr':ensemble_true_pos, \n                                            'tpr':ensemble_false_neg, \n                                            'auc':roc_auc_score(y_val,ensembeled)}, ignore_index=True)\n        print(\"Ensemble ROC\/AUC scores are:\",roc_auc_score(y_val,ensembeled))\n        print(f\"train split shape is {X_tr.shape}, validation split shape is {X_val.shape}\")\n        best_model = get_best_model(results_set)\n        print(\"------------Best Performing Model is --------------\")\n        print(best_model[0][3])\n        print(best_model[0][3],'ROC\/AUC is', best_model[0][2])\n        print(f\"train split shape is {X_tr.shape}, validation split shape is {X_val.shape}\")\n        train_steps = int(len(tr)\/\/batch_size)\n\n        val_steps = int(len(te)\/\/batch_size)\n        graph_roc_auc_curve(result_table)\n        print(f\"batch_size is {batch_size}\")\n        print(f\"train_steps is {train_steps}, val_steps is {val_steps}\")","2c9603ff":"def load_model(name:str):\n    return tf.keras.models.load_model('store_model.h5')","fdbef45f":"def get_models(mods):\n    m = []\n    for model in mods:\n        m.append(load_model(model))","8fc26288":"def load_standardizer():\n        with open('Standardizer.pkl', 'rb') as pickle_file:\n             return pickle.load(pickle_file)","2cdd2600":"def standardize(df,standardizer):\n    standardizer.transform(df.values)","57cbb9ec":"TRAINING=False","48a3b8af":"from tqdm import tqdm","a7b36781":"models = [temporal_neural_net,neural_network]","3ec8d466":"from tqdm import tqdm\nfrom random import choices\nimport random\n\n\nimport kerastuner as kt\n","178d5b12":"f_mean = f_mean[0:129]","58e67747":"len(f_mean)","53b45697":"if not TRAINING:\n    import janestreet\n    #janestreet.competition.make_env.__called__ = False\n    env = janestreet.make_env()\n    th = 0.5\n    #w = np.asarray([0.1,0.1,0.1,0.5,0.2])\n    \n    for (test_df, pred_df) in tqdm(env.iter_test()):\n        if test_df['weight'].item() > 0:\n            x_tt = test_df.loc[:, features]\n            if np.isnan(x_tt.iloc[:, 1:].values.sum()):\n                \n                x_tt.iloc[:, 1:] = np.nan_to_num(x_tt.iloc[:, 1:]) + np.isnan(x_tt.iloc[:, 1:]) * f_mean\n\n            \n            x_tt = x_tt.values\n            x_tt = Standardizer.transform(x_tt)\n            x_tt = encoder(x_tt).numpy()\n            pred = np.mean([model(x_tt,training=False) for model in models],axis=0).squeeze()\n            pred = np.mean(pred)\n            pred_df.action = np.where(pred > th, 1, 0).astype(int)\n        else:\n            pred_df.action = 0\n        env.predict(pred_df)\n","7420504d":"pred_df.to_csv('predcitions',index=False)","263ea333":"\n# if not TRAINING:\n#     import janestreet\n#     #janestreet.competition.make_env.__called__ = False\n# #     env = janestreet.make_env()\n# #     models = get_models(model_names)\n#     standard = load_standardizer()\n#     th = 0.5\n#     #w = np.asarray([0.1,0.1,0.1,0.5,0.2])\n#     for (test_df, pred_df) in tqdm(env.iter_test()):\n#         if test_df['weight'].item() > 0:\n#             x_tt = test_df.loc[:, features].values\n#             if np.isnan(x_tt[:, 1:].sum()):\n#                 x_tt[:, 1:] = np.nan_to_num(x_tt[:, 1:]) + np.isnan(x_tt[:, 1:]) * f_mean\n#             x_tt = standardize(x_tt,standard)\n#             pred = np.mean([model.predict(x_tt) for model in models],axis=0).squeeze()\n#             pred = np.mean(pred)\n#             pred_df.action = np.where(pred > th, 1, 0).astype(int)\n#         else:\n#             pred_df.action = 0\n#         env.predict(pred_df)","878373ca":"## Build a simple Temporal Convolutional Neural Network","421b7697":"A Simple Neural network for comparison with the Temporal Neural Network","4239ad15":"## Cross Fold validate and compare the TCN using the Bottle Neck Auto Encoder as well as PCA","cb82d682":"I used an auto encoder for denoising based off of the bottleneck auto encoder in this notebook: https:\/\/www.kaggle.com\/aimind\/bottleneck-encodermlp-keras-tuner-8601c5"}}