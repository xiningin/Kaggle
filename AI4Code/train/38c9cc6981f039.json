{"cell_type":{"f23594c9":"code","4cebe1ee":"code","5c17a1b9":"code","26781b3b":"code","222a0bab":"code","0a06cd55":"code","d0e3ecab":"code","64404c0a":"code","d250c545":"code","c6700ef5":"code","3bb7b356":"code","0cbc4210":"code","3bd72634":"code","42e9a864":"code","c14f70ad":"code","dc18e22f":"code","8b409ed7":"code","33e0bbe0":"code","1be1e0ba":"code","1da5fe74":"markdown","59ffa910":"markdown","8225d10c":"markdown","ed0e6cdf":"markdown","3f09e145":"markdown","74dd4a41":"markdown","2ee17b26":"markdown","0985d078":"markdown","666a46b9":"markdown","4f5f9f54":"markdown","a9c499e1":"markdown","70650b54":"markdown","2e04bbc6":"markdown","654b6dc6":"markdown","08eaa331":"markdown","0df495a5":"markdown","628212f9":"markdown","138c4679":"markdown","df68b56a":"markdown","4cab5813":"markdown","21b4e3d9":"markdown","e037ee86":"markdown"},"source":{"f23594c9":"import datetime\nimport numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import cm\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nfrom scipy.optimize import curve_fit\nimport os\n\n# Input data files are available in the '\/kaggle\/input' or '..\/..\/..\/datasets\/extracts\/' directory.\nfile_input=['\/kaggle\/input','..\/..\/..\/datasets\/extracts\/']\nfiles={}\nfor dirname, _, filenames in os.walk(file_input[0]):\n    for filename in filenames:\n        print(dirname,filename)\n        if 'csv' in filename:\n            files[filename.replace('.csv','')]=os.path.join(dirname, filename)\n            print(filename.replace('.csv',''))","4cebe1ee":"IndiaDF = pd.read_csv(files['covid_19_india'],\n                      converters={\n                          'ConfirmedIndianNational':lambda row: int(row.replace('-','0')),\n                          'ConfirmedForeignNational':lambda row: int(row.replace('-','0')),\n                          'Deaths':lambda row: int(''.join(filter(str.isdigit,row))) if row!='' else 0\n                      })\nIndiaDF = IndiaDF.rename({'State\/UnionTerritory':'State','Cured':'Recovered'},axis=1)\nIndiaDF['Active'] = IndiaDF['Confirmed'] - ( IndiaDF['Recovered']+ IndiaDF['Deaths'])\nIndiaDF.head()","5c17a1b9":"IndiaDF['Date'] = pd.to_datetime(IndiaDF['Date'],format='%d\/%m\/%y')\nIndiaDF.sort_values('Date',inplace=True)\nIndiaTotalDF = IndiaDF[['Date','Recovered','Deaths','Active','Confirmed']].groupby('Date').sum().reset_index()\n\nfig = px.line(pd.melt(IndiaTotalDF,id_vars=['Date'], var_name='Value Type', value_name='Count'),\n            x = 'Date',\n            y = 'Count',\n            color = 'Value Type',\n            line_shape='spline',\n            template='plotly_dark',\n            title='Reported cases in India over Time')\nfig.update_layout(yaxis={'type':'linear'})\nfig.show()","26781b3b":"columns=['Active','Recovered','Deaths']\nIndiaPercDF=IndiaTotalDF.set_index('Date')[columns]\nIndiaPercDF=IndiaPercDF.div(IndiaPercDF.sum(axis=1), axis=0).multiply(100)\nIndiaPercDF.reset_index(inplace=True)\n\nfig=go.Figure(data=go.Pie(labels=columns,\n                values=[IndiaPercDF.iloc[IndiaPercDF['Date'].idxmax(axis=1)]['Active'],\n                        IndiaPercDF.iloc[IndiaPercDF['Date'].idxmax(axis=1)]['Recovered'],\n                       IndiaPercDF.iloc[IndiaPercDF['Date'].idxmax(axis=1)]['Deaths']\n                       ]),layout={'template':'plotly_dark'})\nfig.update_layout(title_text=\"Coronavirus Cases in India a\/o \"+IndiaTotalDF['Date'].max().strftime(\"%d-%b'%y\"))\nfig.show()\n\nmeltedDF=pd.melt(IndiaPercDF[columns[::-1]+['Date']],id_vars=['Date'], var_name='Value Type', value_name='Share Percentage')\nfig = px.bar(meltedDF, \n       x = \"Share Percentage\",\n       animation_frame = meltedDF['Date'].astype(str), \n       color = 'Value Type', \n       barmode = 'stack', height=400,\n       template='plotly_dark',\n       title='Cases percentage share over time',\n       orientation='h')\nfig.show()","222a0bab":"DeltaColumns = ['Date','Confirmed', 'Recovered', 'Deaths']\nfig = px.line(pd.melt((IndiaTotalDF[DeltaColumns].set_index('Date').diff()).reset_index(),id_vars=['Date'], var_name='Value Type', value_name='Count'),\n            x = 'Date',\n            y = 'Count',line_shape='spline',\n            color = 'Value Type',\n            template = 'plotly_dark',\n            title='Cases per Day')\nfig.update_layout(yaxis={'type':'linear'})\nfig.show()\n\nfig = px.line(pd.melt((IndiaTotalDF[DeltaColumns].set_index('Date').ewm(span=14).mean().diff()).reset_index(),id_vars=['Date'], var_name='Value Type', value_name='Count'),\n            x = 'Date',\n            y = 'Count',line_shape='spline',\n            color = 'Value Type',\n            template = 'plotly_dark',\n            title='Exponential Weight 14 days Mean Cases per Day')\nfig.update_layout(yaxis={'type':'linear'})\nfig.show()\n\nfig = px.line(pd.melt((IndiaTotalDF[DeltaColumns].set_index('Date').pct_change().ewm(span=14).mean()).reset_index(),id_vars=['Date'], var_name='Value Type', value_name='Count'),\n            x = 'Date',\n            y = 'Count',line_shape='spline',\n            color = 'Value Type',\n            template = 'plotly_dark',  \n            title='Percentage Change per day with EWM 14 days mean')\nfig.update_layout(yaxis={'type':'linear'})\nfig.show()","0a06cd55":"IndianStatesDF = IndiaDF.sort_values(['State','Date']).drop_duplicates('State', keep='last')[['State','Recovered','Deaths','Confirmed','Active']]\nIndianStatesDF['State'] = IndianStatesDF['State'].str.replace('#','')\nIndianStatesDF = IndianStatesDF.groupby('State').sum().reset_index()\n\nfor item in columns:\n    fig = px.treemap(IndianStatesDF,\n                     path = ['State'],\n                     values = item,\n                     color = item,\n                     title = item+' cases on different states',\n                     template = 'plotly_dark')\n    fig.show()","d0e3ecab":"# Converting absolute values into percentage share\nIndiaStateDF = IndiaDF.set_index(['Date','State'])[['Recovered','Deaths','Active']]\nIndiaStateDF = IndiaStateDF.div(IndiaStateDF.sum(axis=1), axis=0).multiply(100)                          \nIndiaStateDF.reset_index(inplace=True)\nIndiaStateDF.sort_values('Date',inplace=True)\n\n# Ranking the starting point of each States as 1st day for the the respective state\nIndiaStateRankDF = pd.concat([IndiaStateDF,\n           IndiaStateDF.groupby('State')['Date'].rank(\"dense\",ascending=True).rename('Days')],\n          axis=1)\n\n# Bar chart race for showing contries infection rate over time (showing 10 ten at a time)\nplt.rcParams[\"animation.html\"] = \"jshtml\"\nfig = plt.figure(figsize=(15, 8))\nax = fig.add_subplot()\nconfirmed_col = 'Recovered'\n\ncolors = dict(zip(\n    IndiaStateRankDF['State'].unique(),\n    cm.rainbow(np.linspace(0,1,len(IndiaStateRankDF['State'].unique()))\n)))\n\ndef draw_barchart(current_year):\n    dff = IndiaStateRankDF[(IndiaStateRankDF['Date'].eq(current_year))].sort_values(by=[confirmed_col,'State'], ascending=True).tail(10).fillna(0)\n    \n    ax.clear()\n    ax.barh(dff['State'], dff[confirmed_col], color=[colors[x] for x in dff['State']])\n    dx = dff[confirmed_col].max() \/ 100\n    \n    for i, (value, name) in enumerate(zip(dff[confirmed_col], dff['State'])):\n        ax.text(value-dx, i,     name,             size=14, weight=600, ha='right', va='bottom')\n        ax.text(value+dx, i,     f'{value:,.0f}',  size=14, ha='left',  va='center')\n\n    ax.text(1, 0, current_year, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=800)\n    ax.text(0, 1.06, confirmed_col, transform=ax.transAxes, size=12, color='#777777')\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'+'%'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis='x', colors='#777777', labelsize=12)\n    ax.set_yticks([])\n    ax.margins(0, 0.01)\n    \n    ax.grid(which='major', axis='x', linestyle='-')\n    ax.set_axisbelow(True)\n    ax.text(0, 1.15, 'Recovered Rate(%) over Time',\n            transform=ax.transAxes, size=24, weight=600, ha='left', va='top')\n    ax.text(1, -0.1, 'by @Arnab Majumdar', transform=ax.transAxes, color='#777777', ha='right',\n            bbox=dict(facecolor='white', alpha=0.8, edgecolor='white'))\n    plt.box(False)\n    plt.close()\n    \n# animating each frame of matplotlib chart using Funcanimation\nanimator = animation.FuncAnimation(fig, \n                                   draw_barchart, \n                                   frames=pd.date_range(start=IndiaStateRankDF[IndiaStateRankDF['Recovered']>0]['Date'].min(),\n                                                        end=IndiaStateRankDF['Date'].max(),\n                                                        freq='D').strftime('%Y-%m-%d'),\n                                                        repeat=False,\n                                                        cache_frame_data=True,\n                                    interval=500)\nanimator","64404c0a":"ICMRdf = pd.read_csv(files['ICMRTestingLabs'])\nICMRdf['type'] = ICMRdf['type'].str.replace('Laboratory','Lab')\n\nfig = px.treemap(ICMRdf.groupby(['state','city','type'])['lab'].count().rename('count').reset_index(),\n                 path=['state','city','type'],\n                 values='count',\n                 color='count',\n                 title='ICMR Testing Labs in India',\n                 height=700,\n                 template='plotly_dark')\nfig.update_layout(annotations= [{\n    'text': \"Click on State name\/City name to deep dive\",\n      'font': {\n      'size': 13,\n      'color': 'rgb(256, 256, 256)',\n    },\n    'showarrow': False,\n    'align': 'center',\n    'x': 0.5,\n    'y': 1,\n    'xref': 'paper',\n    'yref': 'paper',\n  }])\nfig.show()","d250c545":"ICMRTestingDF = pd.read_csv(files['StatewiseTestingDetails'])\nICMRTestingDF['Date'] = pd.to_datetime(ICMRTestingDF['Date'],format='%Y-%m-%d')\nICMRTestingDF = ICMRTestingDF[ICMRTestingDF['Date']<pd.to_datetime('today')]\nICMRTestingDF.sort_values('Date',inplace=True)\nICMRTestingDF = ICMRTestingDF.groupby('Date').sum().reset_index()\nICMRTestingDF['Cases\/Total Tested Ratio'] = ICMRTestingDF['Positive']*100\/ICMRTestingDF['TotalSamples']\n\nfig = px.line(ICMRTestingDF,\n              x = 'Date',\n              y = 'Cases\/Total Tested Ratio',\n              template = 'plotly_dark',\n              title = 'Positive cases\/Total Tested Ratio')\nfig.show()","c6700ef5":"IndivDF = pd.read_csv(files['IndividualDetails'])\nIndivDF['diagnosed_date'] = pd.to_datetime(IndivDF['diagnosed_date'],format='%d\/%m\/%Y')\nIndivDF['status_change_date'] = pd.to_datetime(IndivDF['status_change_date'],format='%d\/%m\/%Y')\nIndivDF['StatusChangeDays'] = (IndivDF['status_change_date'] - IndivDF['diagnosed_date']).dt.days\n\n# remove negative records, because it can never be negative, so they must be either wrong information or \n# recontacted disease, since we dont know, what is the reason, we will drop them\nIndivDF = IndivDF[IndivDF['StatusChangeDays']>=0]\nIndivDF['age'] = IndivDF['age'].str.split('-',expand=True)[0].astype(float)\n\nIndivDF.head()","3bb7b356":"# since recovered days cannot be 0(unless patient is tested on recovery\/retested on recovery)\nfig = px.histogram(IndivDF[(IndivDF['current_status']=='Recovered') & (IndivDF['StatusChangeDays']>0)].fillna('N\/A'),\n             x = 'StatusChangeDays', \n             color = 'gender',\n             marginal = \"box\",\n             template = 'plotly_dark',\n             title = 'Recovery Time Distribution'\n            )\nfig.show()","0cbc4210":"fig = px.box(IndivDF.fillna('N\/A'), \n             x = \"gender\",\n             y = \"age\",\n             color = 'gender',\n             points = 'all',\n             template = 'plotly_dark',\n             title = 'Age\/Gender share of confirmed cases')\nfig.show()","3bd72634":"highConfStates = IndivDF.groupby(['detected_state'])['id'].count().nlargest(10).index\n\nfig = px.box(IndivDF[IndivDF['detected_state'].isin(highConfStates)].fillna('N\/A'), \n             x = \"gender\",\n             y = \"age\",\n             color = 'gender',\n             points = 'all',\n             facet_col='detected_state', facet_col_wrap=2,\n             template = 'plotly_dark',height=1600,\n             title = 'Age\/Gender distribution for most infected States')\nfig.show()","42e9a864":"popCensusDF = pd.read_csv(files['population_india_census2011'])\npopCensusDF['Density'] = popCensusDF['Density'].str.split('\/km2',expand=True)[0].str.replace(',','').astype(float)\npopCensusDF['Area'] = popCensusDF['Area'].str.split('\\xa0',expand=True)[0].str.replace(',','').astype(float)\n\nfig = go.Figure(data=[\n    go.Bar(name='Rural Population', \n           x=popCensusDF['State \/ Union Territory'].str.slice(0,15), \n           y=popCensusDF['Rural population']),\n    go.Bar(name='Urban Population',  \n           x=popCensusDF['State \/ Union Territory'].str.slice(0,15), \n           y=popCensusDF['Urban population'])\n])\n\nfig.update_layout(barmode='stack',\n                  xaxis=dict(ticks=\"inside\",tickangle = 45),\n                  template='plotly_dark',\n                 title='Population Share')\nfig.show()","c14f70ad":"IndianStatesConDF = pd.merge(IndianStatesDF,popCensusDF,left_on='State',right_on='State \/ Union Territory', how='left')\nIndianStatesConDF.drop(['Sno','State \/ Union Territory'],axis=1,inplace=True)\n\n# Creating correlation matrix\ncorrMatrix = IndianStatesConDF.corr()\ncorrMatrix.style.background_gradient('Blues')","dc18e22f":"columnsWConf = columns + ['Confirmed']\nfor column in columnsWConf:\n    possCorr = ','.join([item for item in corrMatrix[corrMatrix[column]>0].sort_values(column,ascending=False)\\\n                .index.tolist() if item not in columnsWConf])\n    negCorr = ','.join([item for item in corrMatrix[corrMatrix[column]<0].sort_values(column,ascending=False)\\\n                .index.tolist() if item not in columnsWConf])\n    print('\\033[4m\\033[1m\\033[36m'+column+' cases\\033[0m')\n    print('Features with positive correlation: \\033[1m\\033[91m'+possCorr+'\\033[0m')\n    print('Features with negative correlation: \\033[1m\\033[91m'+negCorr+'\\033[0m')\n    print('-')\n","8b409ed7":"WorldDF = pd.read_csv(files['covid_19_data'],usecols=['ObservationDate','Province\/State','Country\/Region','Confirmed','Deaths','Recovered'])\nWorldDF = WorldDF[(WorldDF['Country\/Region']=='Mainland China')]\nWorldDF = WorldDF.groupby(['ObservationDate']).sum().reset_index()\nWorldDF['ObservationDate'] = pd.to_datetime(WorldDF['ObservationDate'])\nWorldDF.sort_values('ObservationDate',inplace=True)\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(\n              x = WorldDF['ObservationDate'],\n              y = WorldDF['Confirmed']))\nfig.add_trace(go.Scatter(\n              x = WorldDF['ObservationDate'],\n              y = WorldDF.rolling('3D',on='ObservationDate')['Confirmed'].mean()))\n\nfig.update_layout(template = 'plotly_dark',\n                  title = 'Confirmed Cases in China over Time')\nfig.show()","33e0bbe0":"predIndiaDF = IndiaTotalDF.reset_index()\nextended_period = 500\n\ndef sigmoid(x, L, k, x0):\n    return L \/ (1 + np.exp(-k * (x - x0))) + 1\n\npopt, pcov = curve_fit(sigmoid,  (predIndiaDF.index+1).astype(float), predIndiaDF['Confirmed'],  p0=(0,0,0) )\n\nx0 = int(popt[2])\nprint('\\033[1mx0 (point\/day of inflexion):\\033[0m',int(popt[2]))\nprint('\\033[1mL (Maximum no.of cases):\\033[0m',int(popt[0]) )\nprint('\\033[1mk (Growth Rate):\\033[0m',round(float(popt[1]),2) )\nprint('\\033[1mPCOV: \\033[0m\\n',pcov )\n\nfig = go.Figure()\ndateRange = pd.date_range(pd.to_datetime(predIndiaDF['Date'].min()),\\\n                                         pd.to_datetime(predIndiaDF['Date'].min())+pd.DateOffset(extended_period))\n\nfig.add_trace(go.Scatter(x = predIndiaDF['Date'],\n                         y = predIndiaDF['Confirmed'],\n                         mode = 'lines',\n                         name = 'Observed'))\nfig.add_trace(go.Scatter(x = dateRange,\n                         y = sigmoid([x for x in range(extended_period)],*popt),\n                         mode = 'lines',\n                         name = 'Predicted'))\nfig.add_trace(go.Scatter(x = [dateRange[x0], dateRange[x0]],\n                         y = [0,  sigmoid([x for x in range(extended_period)],*popt)[x0]],\n                         name = 'X0 - Inflexion point',\n                         mode = 'lines'))\nfig.update_layout(template='plotly_dark',title='Projected Confirmed Cases')\nfig.show()","1be1e0ba":"fx = sigmoid([x for x in range(250)],*popt)\nApproxPeak = np.argmin(fx<(0.9999*fx.max()))\n\n# ApproxPeak\nprint('Date of reaching Approx Peak: \\033[1m',\\\n      (pd.to_datetime(predIndiaDF['Date'].min())+pd.DateOffset(ApproxPeak)).strftime(\"%d-%b'%Y\"))\nprint('\\033[0mConfirmed cases on reaching Approx Peak: \\033[1m',int(0.999*popt[0]))","1da5fe74":"# Effect of Covid on different states","59ffa910":"# Recovered Rate over time","8225d10c":"# ICMR testing labs distribution in India","ed0e6cdf":"# Delta Changes in cases over Time","3f09e145":"# Correlation Matrix","74dd4a41":"### Indian Population Database","2ee17b26":"# Projected Confirmed cases in India over time\n\nFitting data into a Logistic Curve\/Sigmoid equation:\n\\begin{equation*}\ny = \\frac{L}{1+\ud835\udc52^{\u2212\ud835\udc58(\ud835\udc65\u2212\ud835\udc65_0)}} + 1\n\\end{equation*}","0985d078":"# Data Preparation","666a46b9":"## Conclusion\n\n> Based on above projected sigmoidal graph, the Confirmed cases should start flattenning by **October Start**, and should reach approximate peak by **August 05**","4f5f9f54":"> To find a pattern on covid situation in India, and how it can reach a end state, i.e flattening of curve, we need to look at the country, where it has already flattened, i.e China","a9c499e1":"> Of all values, one of the promient positive correlation is the positive **Urban Population** with Confirmed Cases, which shows the inter-dependency of both features","70650b54":"# Reported cases in India over Time","2e04bbc6":"> Based on delta change over time, **Recovered delta rate is more than Confirmed delta cases**, hence proving that if current situation continues, India will be able to fully recover through Covid Situation","654b6dc6":"# Individual Details from confirmed cases","08eaa331":"# Importing Python Libraries and Data Files","0df495a5":"![Coronavirus](https:\/\/images.unsplash.com\/flagged\/photo-1584036561584-b03c19da874c \"Coronavirus\")\n\nCoronavirus disease (COVID-19) is an infectious disease caused by a newly discovered\/mutates coronavirus.\nMost people who fall sick with COVID-19 will experience mild to moderate symptoms and recover without special treatment. The virus that causes COVID-19 is mainly transmitted through droplets generated when an infected person coughs, sneezes, or exhales. These droplets are too heavy to hang in the air, and quickly fall on floors or surfaces.\n\n### The objective of this notebook is visualize and analyze the situation of coronavirus in India, and then predict based on current and past scenario to find the flattening point for Covid cases in India\n\nThe notebook is divided into following sections:\n1. [Data Preparation](#Data-Preparation)\n2. [Reported cases in India over Time](#Reported cases in India over Time)\n3. [Delta Changes in cases over Time](#Delta-Changes-in-cases-over-Time)\n4. [Effect of Covid on different states](#Effect-of-Covid-on-different-states)\n5. [Recovered Rate over time](#Recovered-Rate-over-time)\n6. [ICMR testing labs Distribution in India](#ICMR-testing-labs-distribution-in-India)\n7. [Individual Details from confirmed cases](#Individual-Details-from-confirmed-cases)\n8. [Overall Age\/Gender distribution](#Overall-Age\/Gender-distribution)\n9. [Age\/Gender distribution for most infected States](#Age\/Gender-distribution-for-most-infected-States)\n10. [Indian Population Database preparation](#Indian-Population-Database)\n11. [Correlation Matrix](#Correlation-Matrix)\n12. [Prediction](#Prediction)\n14. [Conclusion](#Conclusion)\n\nPic credit: Photo by [Fusion Medical Animation on Unsplash](https:\/\/unsplash.com\/@fusion_medical_animation?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)","628212f9":"# Prediction","138c4679":"> While there are few missing data in the plots, but looking at near-end points, the ratio of Positive Cases\/Total Tested cases seems to be in between **3-5%** for the growing confirmed cases","df68b56a":"**Note:** \n1. while there is a possibility of having a better fit for the curve, and have tried many, but almost all of them shows **August early** as the flattening point\n2. Based on ICMR data, Positive\/Total Tested cases lingers between 3-5% even after increase in number of testing, hence it shouldnt effect the growth factor very much.\n\nIf you like the notebook, please give an upvote, and comment your thoughts below, if any.","4cab5813":"# Age\/Gender distribution for most infected States","21b4e3d9":"> If you see the above graph, you can see it looks like a rough **sigmoidal graph**, which can be smoothened with a rolling average to remove sudden short trends.\nSince the graph is sigmoidal in nature, we will curve fit the India's confirmed cases with a sigmoidal to find an expected\/approximate trend.","e037ee86":"# Overall Age\/Gender distribution"}}