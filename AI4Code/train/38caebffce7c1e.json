{"cell_type":{"e2495dcc":"code","fdeee9e1":"code","e1a2d237":"code","0d027518":"code","5b899450":"code","41a442df":"code","c22d6a9f":"code","1d9d57f8":"code","dffcc0fa":"code","48f5e0d8":"code","41d1c476":"code","5efbc3f4":"code","4543d6f1":"code","425276fe":"code","70369f02":"code","244a1924":"code","c38be959":"code","5a9014de":"markdown","ad48c112":"markdown","05e0e6e1":"markdown"},"source":{"e2495dcc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fdeee9e1":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom matplotlib import pyplot\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e1a2d237":"df_dataset = pd.read_csv(r'\/kaggle\/input\/casos-covid-19\/casos_covid19.csv')\ndf_dataset.head(20)","0d027518":"# Procesamiento de fechas\ndef datetime_processing(df, columns):\n    df = df.copy()\n    for column in columns:\n        df[column] = pd.to_datetime(df[column], format='%d%b%Y:%H:%M:%S.%f')\n    return df","5b899450":"columns = ['fecha_apertura_snvs', 'fecha_toma_muestra', 'fecha_clasificacion', 'fecha_fallecimiento', 'fecha_alta']\ndf = datetime_processing(df_dataset, columns)\ndf = df.drop(columns='numero_de_caso')\ndf","41a442df":"df.head(20)","c22d6a9f":"plt.style.use('default')\nax = sns.pairplot(df, hue='provincia', palette='hls', diag_kind='hist', height=3)","1d9d57f8":"plt.style.use('default')\nsns.pairplot(ax)","dffcc0fa":"df['provincia'].value_counts()","48f5e0d8":"ax = sns.pairplot(df_dataset2, hue='comuna', palette='hls', diag_kind='hist', height=3)","41d1c476":"df_dataset2['comuna'].value_counts()","5efbc3f4":"df_comuna_casos.values","4543d6f1":"df_comuna_casos = df_dataset2[['comuna', 'edad']]\nsns.heatmap(df_comuna_casos)","425276fe":"df_dataset2['comuna']","70369f02":"df_heat = df.pivot(\"comuna\", \"edad\", \"provincia\")\nax = sns.heatmap(df_heat)","244a1924":"fallecidos_por_comuna = df.groupby(['comuna', 'edad'], as_index=False).count() # separado agrupar tambien por fecha\nfallecidos_por_comuna","c38be959":"plt.subplots(figsize=(17, 14))\nsns.heatmap(fallecidos_por_comuna.pivot('edad', 'comuna', 'fallecido'))","5a9014de":"## Importo paquetes:","ad48c112":"## Descargo el dataset:","05e0e6e1":"# Procesamiento de datos"}}