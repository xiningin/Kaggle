{"cell_type":{"4cad56b8":"code","a7d604b2":"code","2ad560b7":"code","f982823d":"code","4330a485":"code","54579f02":"code","ff84e203":"code","d095d297":"code","60c2633b":"code","d5ffe7df":"code","9aaf61b2":"markdown","26ba33a7":"markdown","fa4e4cdb":"markdown","c34b2816":"markdown","b508e4c8":"markdown","11a74f14":"markdown"},"source":{"4cad56b8":"import torch\nimport numpy as np\nimport pandas as pd\nimport itertools","a7d604b2":"df = pd.read_csv('assignments_Find+same+or+wimilar+shoes+in+an+online+store_31-01-2020 (6).tsv', sep='\\t')\ndf.head()","2ad560b7":"res_df = pd.DataFrame(columns = ['INPUT:image', 'INPUT:left_link', 'INPUT:right_link']) \n\nfor first_index, first_row in df.iterrows():\n    for second_index, second_row in df.iterrows():\n        if (int(second_index) > int(first_index) and str(first_row['INPUT:image']) == str(second_row['INPUT:image'])):\n            new_row = {'INPUT:image': first_row['INPUT:image'],\n                    'INPUT:left_link': first_row['OUTPUT:found_link'],\n                    'INPUT:right_link': second_row['OUTPUT:found_link']}\n            \n            res_df = res_df.append(new_row, ignore_index=True)\nres_df.to_csv('res_output.tsv', sep='\\t', encoding='utf-8', index=False) \ndf = pd.read_csv('res_output.tsv', sep='\\t')\nres_df.head()\n   \n","f982823d":"res = pd.read_csv('assignments_Which+shoes+look+more+similar+than+origin%3F_31-01-2020 (1).tsv', sep='\\t')\nres['OUTPUT:result'] = res['OUTPUT:result'].apply(lambda x: 1 if x == 'LEFT' else -1)\nres['query'] = res['INPUT:image'].apply(lambda x: x + ' ')\nres['left_item'] = res[['query','INPUT:left_link']].sum(1)\nres['right_item'] = res[['query','INPUT:right_link']].sum(1)\n\ntotal = len(np.unique(res['ASSIGNMENT:worker_id'].values))\nid2ind = dict(zip(np.unique(res['ASSIGNMENT:worker_id'].values), range(total)))\nres['ASSIGNMENT:worker_id'] = res['ASSIGNMENT:worker_id'].map(id2ind)\n\nunique_urls = np.unique((*res['left_item'].values, *res['right_item'].values))\ntotal = len(unique_urls)\nurl2ind = dict(zip(unique_urls, range(total)))\nres['left_id'] = res['left_item'].map(url2ind)\nres['right_id'] = res['right_item'].map(url2ind)\n\n\n\nres.head()","4330a485":"total_items = len(url2ind)\ntotal_workers = len(id2ind)\n\ns = torch.rand(total_items, requires_grad=True)\nq = torch.rand(total_workers, requires_grad=True)\ngamma = torch.rand(total_workers, requires_grad=True)","54579f02":"def count_log_likelihood():\n\n    total = torch.zeros(1)\n    sigmoid = torch.nn.Sigmoid()\n\n    for row in res[['left_id', 'right_id', 'OUTPUT:result', 'ASSIGNMENT:worker_id']].iterrows():\n        s_i, s_j, y, k = row[1]\n        y = torch.Tensor([y])\n\n        total += torch.log(sigmoid(gamma[k]) * sigmoid(y * (s[s_i] - s[s_j])) + (1 - sigmoid(gamma[k])) * sigmoid(y * q[k]))\n\n    return -total","ff84e203":"opt = torch.optim.Adam([s, q, gamma], lr=0.001)","d095d297":"for iteration in range(100):\n    \n    opt.zero_grad()\n    loss = count_log_likelihood()\n    loss.backward()\n    opt.step()\n\n    if iteration % 10 == 9:\n        print('Iteration: {}, likelihood: {}'.format(iteration + 1, -loss.item()))","60c2633b":"for query in set(res['INPUT:image']):\n    rows = res[res['INPUT:image'] == query]\n    items = list(set(rows['left_item'].values) | set(rows['right_item'].values))\n    scores = [s[url2ind[item]].item() for item in items]\n    urls = [items[i].split(' ')[1] for i in range(len(items))]\n    print(\"Initial image: \", query)\n    for url, score in sorted(zip(urls, scores), key=lambda pair: pair[1] ,reverse = True):\n        print(url)\n    print('\\n\\n')","d5ffe7df":"import matplotlib.pyplot as plt\n\nsigmoid = torch.nn.Sigmoid()\n\nfig, axs = plt.subplots(1, 2, figsize=(10, 4))\n\naxs[0].set_title('Left\/right bias for random answers')\naxs[0].hist(sigmoid(q).detach().numpy(), bins=10, density=True)\naxs[0].grid()\n\naxs[1].set_title('Workers reliability')\naxs[1].hist(sigmoid(gamma).detach().numpy(), bins=10, density=True)\naxs[1].grid()\n\nplt.show()","9aaf61b2":"Maximize log likelihood of observed pairwise comparisons","26ba33a7":"Rank found images for each initial image","fa4e4cdb":"Load found objects ds","c34b2816":"Apply Bradley Terry Model and optimaze parameters using gradient descent","b508e4c8":"Load pairwise comparisons","11a74f14":"Analysis of workers parameters"}}