{"cell_type":{"e85a7d48":"code","0c26306f":"code","1b478611":"code","80d8a899":"code","13594645":"code","eb7188cd":"code","a56ba08b":"code","7161ccee":"code","3a067add":"code","fa26b38b":"code","aaf79675":"code","7bdf2ce6":"code","820bf599":"code","b5950667":"code","bf1bf858":"code","d349dde6":"code","e22d0fa3":"code","c4ab4457":"code","ccc5eb75":"code","2cc95f1a":"markdown","c957061e":"markdown","06b19f87":"markdown","bbfc56de":"markdown","e53c8fcd":"markdown","04bfb4bd":"markdown","9b7e508c":"markdown","b32cb0a8":"markdown","190bc33d":"markdown","4516d265":"markdown","3d08c00a":"markdown","3c32796e":"markdown","f0b4137c":"markdown","fe934cff":"markdown","1960666a":"markdown","9dec35da":"markdown","1397d680":"markdown","1089d5b1":"markdown","13a390a1":"markdown","bd517280":"markdown","3d839a7d":"markdown","a49fe40c":"markdown","f5bfa2bf":"markdown","1c00e59b":"markdown","8bbf6939":"markdown"},"source":{"e85a7d48":"import warnings\nwarnings.filterwarnings('ignore')\n\nfrom tqdm import tqdm\nimport pandas as pd\nimport numpy as np\nimport itertools\nimport pprint\nimport random\nimport os\n\nfrom plotly.offline import iplot, init_notebook_mode\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom plotly import tools\nimport plotly.io as pio\n\n!pip install tslearn\nfrom tslearn.clustering import TimeSeriesKMeans\nfrom sklearn.model_selection import KFold\n\npp = pprint.PrettyPrinter(indent=4)\npio.templates.default = \"plotly_white\"\n\ninit_notebook_mode()","0c26306f":"# Load train\ntrain = pd.read_csv(\"\/kaggle\/input\/ventilator-pressure-prediction\/train.csv\")\ntest = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')","1b478611":"def describe_df(dataframe, train=True):\n    if train:\n        print(f\"Train dataset contains:\\n   {dataframe.shape[0]} rows\\n   {dataframe.shape[1]} columns\\n   {len(dataframe.breath_id.unique())} breath_id\\n\\n\")\n    else:\n        print(f\"Test dataset contains:\\n   {dataframe.shape[0]} rows\\n   {dataframe.shape[1]} columns\\n   {len(dataframe.breath_id.unique())} breath_id\\n\\n\")\n    \ndescribe_df(dataframe = train)\ndescribe_df(dataframe = test, train=False)","80d8a899":"train.describe()","13594645":"train.head()","eb7188cd":"# Check missing values\ntrain.isnull().sum()","a56ba08b":"print(f\"Unique values of R : {train.R.unique()}\")\nprint(f\"Unique values of C : {train.C.unique()}\")\n\n#(train['R'].astype(str) + '-' + train['C'].astype(str)).unique()","7161ccee":"def plot_sample(dataframe, seed = 42):\n    \"\"\" Plot time series for each combinations of R and C \"\"\"\n    \n    np.random.seed(seed)\n    \n    cols = ['u_in', 'u_out', 'pressure']\n\n    for (r, c) in list(itertools.product(dataframe.R.unique(), dataframe.C.unique())):\n        \n        subfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n        \n        plot_data = dataframe[(dataframe.R.isin([r]) & dataframe.C.isin([c]))]\n        sample_id = plot_data.breath_id.sample(n=1)\n        plot_data = plot_data[plot_data.breath_id.isin(sample_id)]\n\n        x_breath_changing_state = plot_data.loc[max(plot_data.loc[plot_data.u_out < 1].index), 'time_step']\n\n        fig1 = px.line()\n        fig1.add_scatter(x=plot_data.time_step, y=plot_data.pressure, name='pressure')\n        fig1.add_scatter(x=plot_data.time_step, y=plot_data.u_in, name='u_in')\n        fig1.add_vline(x_breath_changing_state)\n        \n        fig2 = px.line()\n        fig2.add_scatter(x=plot_data.time_step, y=plot_data.u_out, name='u_out')\n        fig2.update_traces(yaxis=\"y2\")\n\n        subfig.add_traces(fig1.data + fig2.data)\n        subfig.for_each_trace(lambda t: t.update(line=dict(color=t.marker.color)))\n                \n        subfig.layout.title = f'Sample {sample_id.values[0]} - R={r}, C={c}'\n        subfig.layout.yaxis1.title=\"u_in\/pressure Y\"\n        subfig.layout.yaxis2.title=\"u_out Y\"\n        \n        subfig.show()\n        #title=f'Sample {sample_id.values[0]} - R={r}, C={c}'\n        \nplot_sample(train)","3a067add":"breath_ids = train.breath_id.sample(n = 5000\/\/80, replace = False)\ntrain_EDA = train.loc[train.breath_id.isin(breath_ids), :].reset_index(drop = True)","fa26b38b":"fig = px.histogram(\n    train_EDA, \n    x=\"pressure\",\n    marginal=\"box\",\n    color=\"u_out\",\n    hover_data=train_EDA.columns,\n    nbins = 50\n)\n\nfig.update_layout(\n    title=\"Pressure distribution\"\n)\n\nfig.show()","aaf79675":"fig = px.histogram(\n    train_EDA, \n    x=\"u_in\",\n    marginal=\"box\",\n    color=\"u_out\",\n    hover_data=train_EDA.columns,\n    nbins = 50\n)\n\nfig.update_layout(\n    title=\"u_in distribution\"\n)\n\nfig.show()","7bdf2ce6":"dict_data = dict(train_EDA.u_out.value_counts())\n\nfig = go.Figure(\n    data=[\n        go.Bar(\n            x = list(dict_data.keys()),\n            y = list(dict_data.values())\n        )\n    ],\n    layout_title_text=\"u_out distribution\",\n)\n\nfig.update_layout(\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 0,\n        dtick = 1\n    )\n)\n\nfig.show()\n\ndel dict_data","820bf599":"corr = train_EDA.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\nfig = px.imshow(corr.mask(mask))\nfig.show()\n\ndel corr, mask","b5950667":"def display_ts_examples(dataframe, graph_indexes = np.arange(9)):\n    \n    # plot first few images\n    plt.figure(figsize=(12,12))\n    \n    for graph_index in graph_indexes:\n        \n        breath_id = random.choice(dataframe.breath_id.unique())\n        \n        # define subplot\n        plt.subplot(330 + 1 + graph_index)\n        plt.title('Breath id: %s \\n'%breath_id,\n                 fontsize=18)\n        # plot raw pixel data\n        ts_to_plot = dataframe.loc[dataframe.breath_id == breath_id, ['time_step', 'pressure']]\n        pd.Series(ts_to_plot.pressure.values, index=ts_to_plot.time_step.values).plot()\n        \n    plt.subplots_adjust(bottom = 0.001)  # the bottom of the subplots of the figure\n    plt.subplots_adjust(top = 1.25)\n    # show the figure\n    plt.show()\n    \ndisplay_ts_examples(train_EDA)","bf1bf858":"def generate_matrix_cluster(dataframe, n = 300, seed = 42):\n    \"\"\" Clustering of time series based on dynamic time warp \"\"\"\n    \n    np.random.seed(seed)\n    matrix = []\n\n    for breath_id in tqdm(breath_ids):\n        df_ = dataframe.loc[dataframe.breath_id == breath_id, ['time_step', 'pressure']]\n        matrix.append(np.array(pd.Series(df_.pressure.values, index=df_.time_step.values)))\n        \n    matrix = np.matrix(matrix)[:,:,np.newaxis]\n    \n    return matrix\n\ndef run_clustering(matrix):\n    \"\"\" Perform KMeans on matrix of time series \"\"\"\n    \n    model = TimeSeriesKMeans(n_clusters=3, metric=\"dtw\", max_iter=10)\n    model.fit(matrix)\n    \n    return model\n\nmatrix = generate_matrix_cluster(train_EDA)\ncluster_p_model = run_clustering(matrix)","d349dde6":"def display_ts_clusters(model, n_clusters=3):\n    \n    # plot first few images\n    plt.figure(figsize=(12,12))\n    \n    for graph_index in range(n_clusters):\n                \n        # define subplot\n        plt.subplot(330 + 1 + graph_index)\n        plt.title('Cluster No: %s \\n'%graph_index,\n                 fontsize=18)\n        \n        # plot raw pixel data\n        array_cluster = model.cluster_centers_[graph_index]\n        pd.Series(array_cluster.ravel()).plot()\n        \n    plt.subplots_adjust(bottom = 0.001)\n    plt.subplots_adjust(top = 1.25)\n    plt.show()\n    \ndisplay_ts_clusters(cluster_p_model)","e22d0fa3":"NB_FOLDS = 5\n\ndef create_folds(dataframe):\n    \"\"\" Return a dataframe with kfold column generated \"\"\"\n\n    # Initialize kfold column with -1\n    dataframe[\"kfold\"] = -1\n    y = dataframe.pressure.values\n\n    # Chose the number of folds\n    kf = KFold(n_splits = NB_FOLDS)\n\n    # Assigning fold for each observation\n    for fold_, (_, val_) in enumerate(\n            kf.split(\n                X = dataframe,\n                y = y,\n                groups = dataframe.breath_id.values\n            ),1):\n        dataframe.loc[val_, \"kfold\"] = fold_\n\n    return dataframe","c4ab4457":"train_EDA_with_folds = create_folds(train_EDA)","ccc5eb75":"def create_features(dataframe, list_of_features = ['u_in', 'time_step']):\n    \n    # u_in cumsum\n    dataframe['u_in_cumsum'] = dataframe.groupby('breath_id')['u_in'].cumsum()\n    \n    # u_in shift change \n    for lag in np.arange(1, 3, 1):\n        dataframe[f'u_in_lag_fwrd{lag}'] = dataframe.groupby('breath_id')['u_in'].shift(lag).fillna(0)\n        dataframe[f'u_in_lag_back{lag}'] = dataframe.groupby('breath_id')['u_in'].shift(int(-lag)).fillna(0)\n        \n    # time diff\n    dataframe['time_diff'] = dataframe.groupby('breath_id')['time_step'].diff(1).fillna(0)\n    \n    # u_in area\n    dataframe['area'] = dataframe['time_step'] * dataframe['u_in']\n    dataframe['area'] = dataframe.groupby('breath_id')['area'].cumsum()\n    dataframe['u_in_cumsum'] = dataframe.groupby('breath_id')['u_in'].cumsum()\n    \n    for feature in list_of_features:\n    \n        grouped_dataframe = dataframe.groupby('breath_id')[feature].agg([max, min, np.mean, np.median])    \n        \n        dataframe = dataframe.merge(\n            grouped_dataframe, \n            how='left', \n            on='breath_id'\n        )\n        \n        dataframe = dataframe.rename(\n            columns = {\n                'max':feature+'_max', \n                'min':feature+'_min', \n                'mean':feature+'_mean', \n                'median':feature+'_median'\n            }\n        )\n    \n        dataframe[f'{feature}_range'] = (dataframe[f'{feature}_max'] - dataframe[f'{feature}_min']).apply(lambda x: max(0,x))\n  \n    # R, C\n    dataframe['RC'] = dataframe['C'] * dataframe['R']\n    dataframe['R\/C'] = dataframe['R'] \/ dataframe['C']\n    dataframe['C\/R'] = dataframe['C'] \/ dataframe['R']\n        \n    return dataframe\n\ntrain_EDA_ft = create_features(train_EDA)\ntrain_EDA_ft.head()","2cc95f1a":"# <div id=\"chap4\">IV. Preprocessing<\/div>","c957061e":"# <div id=\"chap3\">III. Clustering<\/div>","06b19f87":"<font color=\"blue\"><b>id<\/b><\/font> - globally-unique time step identifier across an entire file<br><br>\n<font color=\"blue\"><b>breath_id<\/b><\/font> - globally-unique time step for breaths<br><br>\n<font color=\"blue\"><b>R<\/b><\/font> - lung attribute indicating how restricted the airway is (in cmH2O\/L\/S). Physically, this is the change in pressure per change in flow (air volume per time). Intuitively, one can imagine blowing up a balloon through a straw. We can change R by changing the diameter of the straw, with higher R being harder to blow.<br><br>\n<font color=\"blue\"><b>C<\/b><\/font> - lung attribute indicating how compliant the lung is (in mL\/cmH2O). Physically, this is the change in volume per change in pressure. Intuitively, one can imagine the same balloon example. We can change C by changing the thickness of the balloon\u2019s latex, with higher C having thinner latex and easier to blow.<br><br>\n<font color=\"blue\"><b>time_step<\/b><\/font> - the actual time stamp.<br><br>\n<font color=\"blue\"><b>u_in<\/b><\/font> - the control input for the inspiratory solenoid valve. Ranges from 0 to 100.<br><br>\n<font color=\"blue\"><b>u_out<\/b><\/font> - the control input for the exploratory solenoid valve. Either 0 or 1.<br><br>\n<font color=\"blue\"><b>pressure<\/b><\/font> - the airway pressure measured in the respiratory circuit, measured in cmH2O.","bbfc56de":"**<font color=\"blue\" size=\"5\">Create features<\/font>**","e53c8fcd":"**<font color=\"blue\" size=\"5\">Stats train<\/font>**","04bfb4bd":"--------\n\n**<font size=\"2\"><a href=\"#summary\">Back to summary<\/a><\/font>**","9b7e508c":"**<font color=\"blue\" size=\"5\">Create folds properly<\/font>**","b32cb0a8":"**<font color=\"blue\" size=\"5\">Insight train<\/font>**","190bc33d":"**<font color=\"blue\" size=\"5\">Display sample of pressure evolution over time_sleep<\/font>**","4516d265":"# <div id=\"chap2\">II. Exploratory Data Analysis<\/div>","3d08c00a":"**<font color=\"blue\" size=\"5\">Display<\/font>**","3c32796e":"**<font color=\"blue\" size=\"5\">Missing values train<\/font>**","f0b4137c":"--------\n\n**<font size=\"2\"><a href=\"#summary\">Back to summary<\/a><\/font>**","fe934cff":"# <div id=\"chap1\">I. Data info<\/div>","1960666a":"<div align='center'><font size=\"5\" color='#353B47'>Ventilator Pressure Prediction<\/font><\/div>\n<div align='center'><font size=\"4\" color=\"#353B47\">EDA<\/font><\/div>\n<br>\n<hr>","9dec35da":"# <div id=\"summary\">Table of contents<\/div>\n**<font size=\"2\"><a href=\"#chap1\">I. Data info<\/a><\/font>**\n**<br><font size=\"2\"><a href=\"#chap2\">II. Exploratory Data Analysis<\/a><\/font>**\n**<br><font size=\"2\"><a href=\"#chap3\">III. Clustering<\/a><\/font>**\n**<br><font size=\"2\"><a href=\"#chap4\">IV. Preprocessing<\/a><\/font>**","1397d680":"> More information about DTW in these insightful articles: <br><p><a href=https:\/\/towardsdatascience.com\/dynamic-time-warping-3933f25fcdd>DTW<\/a><br><a href=https:\/\/towardsdatascience.com\/how-to-apply-k-means-clustering-to-time-series-data-28d04a8f7da3>KMeans Clustering on time series data<\/a>","1089d5b1":"**<font color=\"blue\" size=\"5\">Reminder<\/font>**","13a390a1":"**<font color=\"blue\" size=\"5\">Create clusters with pressure data<\/font>**","bd517280":"This analysis will focus on a sample of trainset, including 62 breath_ids","3d839a7d":"<hr>\n<div align='justify'><font color=\"#353B47\" size=\"4\">Thank you for taking the time to read this notebook. I hope that I was able to answer your questions or your curiosity and that it was quite understandable. <u>any constructive comments are welcome<\/u>. They help me progress and motivate me to share better quality content. I am above all a passionate person who tries to advance my knowledge but also that of others. If you liked it, feel free to <u>upvote and share my work.<\/u> <\/font><\/div>\n<br>\n<div align='center'><font color=\"#353B47\" size=\"3\">Thank you and may passion guide you.<\/font><\/div>","a49fe40c":"**<font color=\"blue\" size=\"5\">Description<\/font>**","f5bfa2bf":"**<font color=\"blue\" size=\"5\">Time series<\/font>**","1c00e59b":"--------","8bbf6939":"--------\n\n**<font size=\"2\"><a href=\"#summary\">Back to summary<\/a><\/font>**"}}