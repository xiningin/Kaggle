{"cell_type":{"f37a54ea":"code","88f0bb34":"code","11beae40":"code","5d32fd52":"code","0e07e28c":"code","c6a1f067":"code","f4d8fa6e":"code","9c5a7aa6":"code","726914ae":"code","9acbdfc1":"code","b49717ac":"code","c68b5e0d":"code","bdb40f34":"code","73d7b6b2":"code","4d8d9abc":"code","22da887d":"code","68b67c89":"code","019d36f8":"code","515f60c8":"code","5f63412f":"code","da9f9945":"code","c423c0c7":"code","c4513b9c":"code","98d01168":"code","9b31ffd4":"code","b679195d":"markdown","4be200ab":"markdown","0bb612ff":"markdown","7e769765":"markdown","a6eb270e":"markdown","b7e0c6e5":"markdown","4ecf83f2":"markdown","e3867d4a":"markdown","7893fdcb":"markdown","3000fb56":"markdown","fa1d8f9f":"markdown"},"source":{"f37a54ea":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nimport matplotlib.pyplot as plt # data visualization\nimport seaborn as sns # advanced data visualization\n\nfrom sklearn.model_selection import train_test_split # split data into train and test\nfrom sklearn.preprocessing import MinMaxScaler # scale the data between 0 - 1\nfrom tensorflow.keras.models import Sequential # initiate the mode \nfrom tensorflow.keras.layers import Dense, Activation, Dropout # add the layers\nfrom tensorflow.keras.optimizers import Adam # optimizer \n\nfrom tensorflow.keras.callbacks import EarlyStopping # Early Stopping\n\nfrom sklearn.metrics import classification_report,confusion_matrix # Model Evaluation ","88f0bb34":"# read the data\ndf = pd.read_csv('..\/input\/breast-cancer-wisconsin-data\/data.csv')","11beae40":"# top 5 rows \ndf.head()","5d32fd52":"# info\ndf.info()","0e07e28c":"# statistical distribution of various features\ndf.describe().round(2).transpose()","c6a1f067":"# drop Unnamed: 32\ndf = df.drop('Unnamed: 32', axis = 1)","f4d8fa6e":"# Convert Diagnosis to numeric 0 - 1\ndf['diagnosis'] = df['diagnosis'].apply(lambda x: 1 if x == 'M' else 0)","9c5a7aa6":"# count plot of the diagnosis\nplt.figure(figsize = (8, 4), dpi = 100)\nsns.countplot(data = df, x = 'diagnosis')\nplt.show()","726914ae":"# Correlation between features \nplt.figure(figsize = (8, 4), dpi = 100)\ndf.corr()['diagnosis'].sort_values().plot(kind  = 'bar');","9acbdfc1":"# correlation analysis using heatmap\nplt.figure(figsize = (8, 4), dpi = 100)\nsns.heatmap(df.corr());","b49717ac":"# seprate X and y\nX = df.drop('diagnosis', axis = 1).values\ny = df['diagnosis'].values ","c68b5e0d":"# train test split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.25,random_state=101)","bdb40f34":"# intiate the scaler \nscaler = MinMaxScaler()\n# fit the scaler and scale training data \nX_train= scaler.fit_transform(X_train)\n# scale the test data \nX_test = scaler.transform(X_test)","73d7b6b2":"# build model architecture\nmodel = Sequential()\nmodel.add(Dense(30,activation='relu'))\nmodel.add(Dense(15,activation='relu'))\nmodel.add(Dense(1,activation='sigmoid'))\n\n# compile the model\nmodel.compile(optimizer='adam',loss='binary_crossentropy');","4d8d9abc":"# fit the model\nmodel.fit(x=X_train,y=y_train,\n          validation_data=(X_test,y_test),epochs=600)","22da887d":"# compare train and validation loss \nmodel_loss = pd.DataFrame(model.history.history)\nplt.figure(figsize=(8,4), dpi = 100)\nplt.plot(model_loss)\nplt.show()","68b67c89":"# build model architecture\nmodel = Sequential()\nmodel.add(Dense(30,activation='relu'))\nmodel.add(Dense(15,activation='relu'))\nmodel.add(Dense(1,activation='sigmoid'))\n\n# compile the model\nmodel.compile(optimizer='adam',loss='binary_crossentropy');","019d36f8":"# Define Early Stopping \nearly_stop = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=25)","515f60c8":"# fit the model\nmodel.fit(x=X_train,y=y_train,\n          validation_data=(X_test,y_test),epochs=600, callbacks = [early_stop])","5f63412f":"# compare train and validation loss \nmodel_loss = pd.DataFrame(model.history.history)\nplt.figure(figsize=(8,4), dpi = 100)\nplt.plot(model_loss)\nplt.show()","da9f9945":"# build model architecture\nmodel = Sequential()\nmodel.add(Dense(30,activation='relu'))\nmodel.add(Dropout(0.5)) # Drop Out Layer \nmodel.add(Dense(15,activation='relu'))\nmodel.add(Dropout(0.5)) # Drop Out Layer\nmodel.add(Dense(1,activation='sigmoid'))\n\n# compile the model\nmodel.compile(optimizer='adam',loss='binary_crossentropy');","c423c0c7":"# fit the model\nmodel.fit(x=X_train,y=y_train,\n          validation_data=(X_test,y_test),epochs=600, callbacks = [early_stop])","c4513b9c":"# compare train and validation loss \nmodel_loss = pd.DataFrame(model.history.history)\nplt.figure(figsize=(8,4), dpi = 100)\nplt.plot(model_loss)\nplt.show()","98d01168":"# Predictions\ny_pred = model.predict(X_test)\npredictions = np.round(y_pred).astype(int)","9b31ffd4":"# Classification Report \nprint(classification_report(y_test,predictions))","b679195d":"# Model Evaluation","4be200ab":"Very strong correlation, we should be able to get very good predictions based on this analysis here ","0bb612ff":"# Drop Out ","7e769765":"# Exploratory Data Analysis","a6eb270e":"# Feature Engineering","b7e0c6e5":"# Dealing with Overfitting ","4ecf83f2":"# Model Building","e3867d4a":"## Early Stopping","7893fdcb":"Validation loss is increasing while training loss is decreasing. This is a strong sign of verfitting. We can use 'early stopping' or dropout to aviod overfitting  ","3000fb56":"# Required Packages","fa1d8f9f":"# Read the Data and Check It"}}