{"cell_type":{"4567225c":"code","24f535e5":"code","cf1e3fa0":"code","323d1834":"code","5f2a900a":"code","314859db":"code","6fceebf6":"code","7664ca06":"markdown","9fe73322":"markdown"},"source":{"4567225c":"import numpy as np","24f535e5":"# Simulator to simulate student marks in m exams. \ndef studentMarksInExams(lower_limit_tm, upper_limt_tm, m):\n    '''\n    Params\n        - lower_limit_tm : Lower limit of exams's total marks for simulation.\n        - lower_limit_tm : upper limit of exam's total marks for simulation.\n        - m : Number of exams conducted to the student.\n    return\n        - a : Student marks at each exam (m exams). Student gets minimum  35% and max 100% in each exam.\n        - b : Total marks of each exam (m exams)\n    '''\n    # util\n    def _get_random_numbers(ll, ul, size):\n        return np.random.randint(ll, ul, size=(size))\n    a = []\n    b = []\n    # If you would like to have each exam for 100 marks then un comment bellow like and comment next two lines.\n#     b = [100] * m\n    b = _get_random_numbers(lower_limit_tm, upper_limt_tm, m)\n    b = list(b)\n    for tm in b:\n        # Student gets minimum  35% and max 100% in each exam.\n        a.append(list(_get_random_numbers(int(0.35 * tm), tm, 1))[0])\n    return np.array(a), np.array(b)","cf1e3fa0":"# As per Dinkelbach theorem. But need to find optimal \"lda\" to get student's best top n exams.\n# We are going to find that using Golden section search-https:\/\/en.wikipedia.org\/wiki\/Golden-section_search. Implementation available in next function.\n\ndef top_n_exams(lda, a, b, n):\n    m = len(a)\n    values = []\n    for i in range(m):\n        values.append(a[i]-(lda * b[i]))\n    #values.sort(reverse=True)\n    return sum(values[-n:]), np.argsort(values)[-n:]","323d1834":"# Golden section search-https:\/\/en.wikipedia.org\/wiki\/Golden-section_search\ndef gss(m, n, a, b, l, r):\n    for k in range(m):\n        # Here 0.618 is the gss factor. More information go through above link.\n        xl = r - 0.618*(r-l)\n        xr = l + 0.618*(r - l)\n        fl, tmp = top_n_exams(xl,a, b, n)\n        fl = fl**2\n        fr, tmp = top_n_exams(xr,a, b, n)\n        fr = fr**2\n        if(fl>=fr):\n            l = xl\n        else:\n            r = xr\n    # l,r function  boundary, 0.5*(l+r) can be minimum value of given function.\n    return l, r\n    \n    ","5f2a900a":"# Total number of exams\nm = 10\n# Choose top n exams which student scored good marks. \nn =5\n# Students marks in m exams\na, b = studentMarksInExams(35, 100, m)","314859db":"# here l - minimum and r - maximum are initial boundary which we assumed for GSS.\nl = 0\nr = np.sum(np.sort(a)[-n:])\/np.sum(np.sort(b)[:n])\n# min_boundary \nl, r= gss(m, n, a, b, l, r)","6fceebf6":"# This is something which we were looking for\nf, subs = top_n_exams(0.5*(l+r), a, b, n)\nprint(\"Total number of exams m = \", m)\nprint(\"Consider for calulation best top n = \", n)\nprint(\"Student marks in each exam a = \",a)\nprint(\"Total marks of each exam b =   \", b)\nprint('The optimal subset consists of the ' + str(np.sort(subs)) + ' elements. This list is indexes of our a and b list. Index start with 0.')\nprint('The optimal value is: ' + str(np.sum(a[subs])\/np.sum(b[subs])))\n    ","7664ca06":"### Overview\n1. [Introduction](#id_introduction)\n1. [Problem formulation](#id_problem_formulation)\n1. [Fractional programming](#id_fractional_programming)\n1. [Dinkelbach theorem](#id_dinkelbach_theorem)\n1. [Golden Section Search](#id_golden_section_search)\n1. [Further problem formulation](#id_further_problem_formulation)\n1. [Code](#id_code)\n\n<a id=\"id_introduction\"><\/a>\n### Introduction\nIn our school or college, we might have written many tests (assume \u201c**m**\u201d) for each subject over a year. At year end, teachers might have considered our best top \u201c**n**\u201d scores and average them for each subject.This is a simple calculation when each exam conducted for the same marks as below.\n\n| Scenario 1       | Test 1     | Test 2     | Test 3     |Test 4     |Test 5     |Test 6     |Test 7     |Test 8     |Test 9     |Test 10     |\n| :------------- | :----------: | -----------: |-----------: |-----------: |-----------: |-----------: |-----------: |-----------: |-----------: |-----------: |\n| Student marks | 32   | 64    | 72   | 50    |66   | 81    |92   | 54    |36   | 90    |\n| Total Marks   | 100 | 100 |100 |100 |100 |100 |100 |100 |100 |100 |\n\n\nSteps involved in the calculation,  \n- Sort the student scores in exam in descending order.  \n- Average top n scores.\n\nBut, what if the scenario as below?  \n\n| Scenario 2       | Test 1     | Test 2     | Test 3     |Test 4     |Test 5     |Test 6     |Test 7     |Test 8     |Test 9     |Test 10     |\n| :------------- | :----------: | -----------: |-----------: |-----------: |-----------: |-----------: |-----------: |-----------: |-----------: |-----------: |\n| Student marks | 32   | 64    | 72   | 50    |66   | 81    |92   | 54    |36   | 90    |\n| Total Marks   | 60 | 80 |75 |85 |70 |90 |100 |65 |50 |100 |\n\n\nNow the calculation is a little harder than the first scenario.  \n\nSteps involved in the calculation,  \n- Doing sort on the student scores alone, doesn\u2019t help here. Because the denominator is not the same for all exam scores. We need some better methods to find them. This notebook is to solve this problem.\n- Once we select the top n scores, then average them. \n\nSeems the introduction left us with one question, how to select the best top \u201c**n**\u201d student scores in scenario 2? \n\n<a id=\"id_problem_formulation\"><\/a>\n### Problem formulation \n\nGiven,  \n\n$ A = \\{{a_1, a_2, ...,a_m}\\} \\in R ^+ $  \n$ B = \\{{b_1, b_2, ...,b_m}\\} \\in R ^+ $\n\nfind a subset $ J = \\{{j_1, j_2, ...,j_n}\\}$ of size \"**n**\" which maximizes the ratio,  \n\n$ \\frac{\\sum\\limits _{{i}\\in{J}} a_{j}} {\\sum\\limits _{{i}\\in{J}} b_{j}} $\n\nI solved this problem by considering the problem formulation as Fractional Programming,used the Dinkelbach theorem for further simplification, and used Golden Section Search for optimization.\n\n<a id=\"id_fractional_programming\"><\/a>\n### Fractional programming\n\nFractional programming refer to the family of optimization problems.\n\nLet *f* and *g* functions defined on set C, the non-linear program  ${max} _{{x}\\in{C}} \\frac{f(x)} {g(x)} $, where ${g(x)} > {0}$ on C  is called a fractional program.\n\n<a id=\"id_dinkelbach_theorem\"><\/a>\n### Dinkelbach theorem\nSuppose ${f(x)}$ and ${g(x)}$ are continuous functions on the set C.   \nThen,  \n> $ \\lambda ^{*} = \\frac{f(x ^{*})} {g(x ^{*})} = {max} _{{x}\\in{c}} \\frac{f(x)} {g(x)}$  *if and only if*  \n>\n> $ {F(\\lambda ^{*})} = {max} _{{x}\\in{c}}{f(x)} - {\\lambda ^{*}g(x)} = 0 $  \n\nThis theorm helps us to reduce complexity of fractional program by removing denominator.  Once we find optimal ${\\lambda ^{*}}$ value which makes   $ {F(\\lambda ^{*})} = 0$, it means we solved our problem. Since ${F(\\lambda ^{*})}$ is unimodel, golden section search algorithem can help us to find optimal ${\\lambda ^{*}}$ value.\n\n<a id=\"id_golden_section_search\"><\/a>\n### Golden Section Search\nThis is one way of finding minimum value of unimodel functions(functions which have only one minimum). For more information please refere [here](https:\/\/en.wikipedia.org\/wiki\/Golden-section_search). \n\n<a id=\"id_further_problem_formulation\"><\/a>\n### Further Problem formulation \n\nBelow two notation as per Dinkelbash theorm.\n\n$ {F(\\lambda ^{*})} = {max _{x \\in \\{0,1\\} ^m}}{\\sum\\limits _{i=0} ^m} {a_{i}x_{i}} - {\\lambda ^{*}\\sum\\limits _{i=0} ^m} {b_{i}x_{i}}  $  \n\n$ {F(\\lambda ^{*})} = {max _{x \\in \\{0,1\\} ^m}}{\\sum\\limits _{i=0} ^m} ({a_{i}} - {\\lambda ^{*}}{b_{i}}){x_{i}}  $  \n\nIn our problem, calculating $ {F(\\lambda ^{*})} $ is easy. For every given ${\\lambda ^{*}}$, calculate $({a_{i}} - {\\lambda ^{*}}{b_{i}})_{i \\in [1,10]}$ for every exam, sort them and sum up top \"**n**\". We can find best ${\\lambda ^{*}}$ using Golden Section Search that can maximise student top \"n\" scores ratio. Implementation available below. \n\n<a id=\"id_code\"><\/a>\n### Code","9fe73322":"### Thank you!"}}