{"cell_type":{"9c73bcaa":"code","116a5d1c":"code","357e66cd":"code","0335bf73":"code","b3b452bd":"code","c05f0b07":"code","2e1f55ed":"code","e21cab06":"code","ea9eedbe":"code","c2a28b54":"code","7a7d4fe6":"code","ce2e694f":"markdown","238f5b4c":"markdown","66daa9d7":"markdown","b39f9af3":"markdown","35a58180":"markdown","e0ebc716":"markdown","910ac18b":"markdown","4f1e4700":"markdown","b7194643":"markdown","07c31402":"markdown","9ea33885":"markdown","f5019c9f":"markdown"},"source":{"9c73bcaa":"import pandas as pd\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot","116a5d1c":"df = pd.read_csv(\"..\/input\/billboard-the-hot-100-songs\/charts.csv\")\n\ndf[\"date\"] = pd.to_datetime(df[\"date\"])\ndf[\"year\"] = df[\"date\"].dt.year\n\ndf.info()","357e66cd":"is_number1 = df[\"peak-rank\"] == 1\nnumber1_no_duplicates = df[is_number1].groupby(\"song\").first().sort_values(\"date\", ascending = True)\nnumber1_no_duplicates.sample(5)","0335bf73":"def get_decade(year):\n    year = str(year)\n    decade = year[0:3] + \"0's\"\n    return decade\n\nnumber1_no_duplicates[\"decade\"] = number1_no_duplicates[\"year\"].apply(get_decade)\nnumber1_no_duplicates.sample(5)","b3b452bd":"# change this to see more or fewer artists\ntop_num = 15\n\ngraph_data = number1_no_duplicates[[\"artist\", \"decade\"]].value_counts().head(top_num)\ngraph_data.sample(5)","c05f0b07":"# default plot aesthetics\ndefault_layout = {\n    # display title with bigger font\n    \"title\": dict(\n        font = {\"size\": 30}\n    ),\n    \n    # change plot font\n    \"font\" : dict(\n        family = \"arial\",\n        size = 16,\n        color = \"white\"\n    ),\n    \n    # plot colors and size\n    \"paper_bgcolor\" : \"#3d3d3d\",\n    \"plot_bgcolor\" : \"rgba(0,0,0,0)\",\n    \"height\" : 700,\n    \"yaxis\" : {\"showgrid\": False},\n    \n    # move the legend\n    \"legend\" : dict(\n        orientation = \"v\",\n        x=.7,\n        y=.93,\n        traceorder=\"normal\",\n    )\n}","2e1f55ed":"# ordered list of unique decades in our graph data\ndecade_index = sorted(graph_data.index.get_level_values(1).unique())\n\n# dict defining decades by color\ndecade_colors = {\n    \"1950's\" : \"#cd4b42\",\n    \"1960's\" : \"#cd7e42\",\n    \"1970's\" : \"#b13e55\",\n    \"1980's\" : \"#42cd56\",\n    \"1990's\" : \"#42b8cd\",\n    \"2000's\" : \"#606faf\",\n    \"2010's\" : \"#9677bb\",\n    \"2020's\" : \"#b771ab\"\n}\n\n# will become our final list of traces\ndata = []\n\nfor decade in decade_index:\n    search_filter = graph_data.index.get_level_values(1) == decade\n    subset = graph_data[search_filter]\n    \n    # create the bars for the decade\n    trace = go.Bar(\n        x = subset.index.get_level_values(0),\n        y = subset,\n\n        # annotate text above the bars\n        text = subset,\n        textposition = \"outside\",\n        \n        # change bar color based of custom dict decade_colors\n        marker = {\"color\" : decade_colors[decade]},\n        \n        name = decade\n    )\n    # add trace to the data list\n    data.append(trace)\n\nfig = go.Figure(data = data, layout = default_layout)\n\n# updates to the default layout\nfig.update_layout(\n    {\n    \"title\": dict(\n            text = f\"Top {top_num} Artists by Number of #1 Billboard Songs\"\n        ),\n    \"xaxis\": dict(\n            categoryorder = 'array',\n            categoryarray = graph_data.index.get_level_values(0)\n        ),\n    \"legend\": dict(\n            orientation = \"v\",\n            x=.7,\n            y=.93,\n            traceorder=\"normal\"\n        )\n    }\n)\n\n# display the plot!\niplot(fig)","e21cab06":"# filter out every week's number 1 song\nall_number1 = df[df[\"rank\"]==1]\nall_number1.head()","ea9eedbe":"def get_decade(year):\n    year = str(year)\n    decade = year[0:3] + \"0's\"\n    return decade\n\nall_number1[\"decade\"] = all_number1[\"year\"].apply(get_decade)\nall_number1.head()","c2a28b54":"# after building the plot, I saw that a title of one of the songs was too long and made the chart ugly, so I crop it here\nis_long_song = all_number1[\"song\"]==\"Candle In The Wind 1997\/Something About The Way You Look Tonight\"\nall_number1.loc[is_long_song, \"song\"] = \"Candle In The Wind\"\n\ntop_songs = all_number1[[\"song\", \"decade\"]].value_counts()\n\ntop_songs.head()","7a7d4fe6":"# change this number to see more or fewer songs\nnum_songs = 15\ngraph_data = top_songs.head(num_songs)\n\ndecade_index = sorted(graph_data.index.get_level_values(1).unique())\ndata = []\n\nfor decade in decade_index:\n    search_filter = graph_data.index.get_level_values(1) == decade\n    subset = graph_data[search_filter]\n    \n    # create the bars for the decade\n    trace = go.Bar(\n        x = subset.index.get_level_values(0),\n        y = subset,\n\n        # annotate text above the bars\n        text = subset,\n        textposition = \"outside\",\n        \n        # change bar color based of custom dict decade_colors\n        marker = {\"color\" : decade_colors[decade]},\n        name = decade,\n        \n        # prevent the text annotations from being cropped by the top of the plot\n        cliponaxis = False\n    )\n    # add trace to the data list\n    data.append(trace)\n\nfig = go.Figure(data = data, layout = default_layout)\n\n# updates to the default layout\nfig.update_layout(\n    {\n    \"title\": dict(\n            text = f\"Top {top_num} Songs by Total Weeks as Billboard #1\"\n        ),\n    \"xaxis\": dict(\n            categoryorder = 'array',\n            categoryarray = graph_data.index.get_level_values(0)\n        ),\n    \"legend\": dict(\n            orientation = \"v\",\n            x=.9,\n            y=1,\n            traceorder=\"normal\"\n        )\n    }\n)\n\n# display the plot!\niplot(fig)","ce2e694f":"### Removing Duplicate Songs ###\nSome songs appear more than once at number 1 on different weeks or months. So I will filter out the songs whose `peak-rank` is `1`, and create a `groupby` object by `song`, taking only the first instance of each song. This will give one entry per song for the first week it appeared at number one. Then, we will `sort_values` by ascending `date` to get a view of our data chronologically.","238f5b4c":"Interestingly enough, we can see that songs from more recent decades (1990's and beyond) spend far more time at number 1 than older songs. To speculate, my instinct says that this is because of the rise of digital music, which emphasizes singles over albums. The Beatles, for example, may release an album with multiple number one songs, but each overtakes the other during the life cycle of the album. But again, that's speculative. Unfortunately, this dataset does not contain album names so we are doomed to speculate. If you agree or disagree with my rationale, let me know! Thanks for reading!","66daa9d7":"# Connect with me! #  \n### Watch me build these types of things live on Twitch! https:\/\/twitch.tv\/Mitchsworkshop ###  \n### Twitter is where these charts get posted! https:\/\/twitter.com\/MitchsWorkshop ###  \n### Join the Discord to give or receive programming advice. https:\/\/discord.gg\/2hcWnTF ###","b39f9af3":"Our data is ready to plot! Using the same logic as last time we made our plot, we will loop through the decades and apply a different color each time.","35a58180":"# Who are the top Billboard artists ever? Let's find that out and more! #\nIf you want to ask me questions or make comments on the code, do so here or on Twitch in real time! https:\/\/twitch.tv\/MitchsWorkshop  \n\nFirst, we import pandas and plotly:","e0ebc716":"## Which songs spent the most total weeks at number 1? ##\nTo find out, we can simply get every week's number 1 song by filtering the dataframe by where the value of `1` from the `rank` column. After we do that, we can simply `value_counts()` the `song` column of the filtered dataframe, and we will have our answer! After that, it's a simple matter of plotting!","910ac18b":"Now that we've separated out the number 1 songs, we can see how many times each appears using `value_counts()`.","4f1e4700":"## Artists with the most #1 Billboard hits by decade! ##\nEverything looks to be in order. Let's graph these suckers! To do so, we need a `Series` object that is the `value_count` of the `artist` column in our newly prepped data.","b7194643":"Now let's build the final product. Since plotly demands a different `trace` for each varying hue (especially since we're using a legend), we are going to perform a little trick. Using a `for` loop that iterates through every unique decade in our graphed data, we can create a list containing each `trace` and use that list as our `data` parameter for our graph. We can fix the order of the bars afterwards when we create our final `figure`.  \n  \nFirst, let's create some default values for plot aesthetics and use them for our future plots.","07c31402":"Now that we have our data sorted and clean, let's define a function called `get_decade` and `map` it to our dataframe to populate a `decade` column of strings (1980's, 2010's, etc).","9ea33885":"Now let's re-define our function to add a `decade` column just to remember the syntax, and use it on our new subset of our data so we can tint our next plot by decade like we did the first time.","f5019c9f":"Now, let's import our data, convert our `date` column to `datetime` type, and create a `year` column from that. We can use that to give our graph different hues for whichever decade the artists first appeared at number 1."}}