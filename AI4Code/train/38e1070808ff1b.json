{"cell_type":{"3f9bcffb":"code","f0f3432e":"code","a66510b3":"code","23cc71d0":"code","bb5f21ae":"code","0cc0131b":"code","099ccbd3":"code","c34ca4fc":"code","b69c452f":"code","bb8fa247":"code","fcb27d3f":"code","f9cd2a44":"code","ef588c81":"code","5f866f6b":"code","defe6b90":"code","90071433":"code","c9653d55":"code","0f7845c0":"code","9895532c":"code","ab0fb9b9":"code","f79ad55c":"code","27068446":"code","51b0bdc8":"code","4a567b77":"code","8ce6d446":"code","853dae95":"code","310efaa4":"code","6208c4c0":"code","b777f931":"code","254be6e4":"code","ac213fc0":"code","1ebe1b9c":"code","1da64168":"code","a5819e61":"code","31354a97":"code","a6849d39":"code","3dca2ef6":"code","3f9d9789":"code","79e532d5":"code","10176eb0":"code","44cf8dd3":"code","281c3595":"code","e87d30c4":"code","9885499d":"code","2ede7e12":"code","fae5833c":"code","0dd20c56":"code","1739769f":"code","8b1c91c1":"code","bd0df177":"code","8b225543":"code","38e0fee0":"code","a45a5ae8":"code","4d453cf0":"code","776e2f3d":"code","d9e43a66":"code","e2627ff4":"code","5937917a":"code","69f17717":"code","3cba25be":"code","150e96e2":"code","84712c9f":"code","cbb772b3":"code","243f8dd2":"code","f91a66c8":"code","137e71a4":"code","4544b2d7":"code","0fe1960b":"code","a5abfed9":"code","63ac917b":"code","fab9a780":"code","ba46bc3d":"code","aabb057e":"code","729775f3":"code","2b95e278":"code","97dc1bd4":"code","6df3827f":"code","4afab0eb":"code","199abcea":"code","58a55316":"code","78c4ebe6":"code","21a8ec20":"code","1de369ae":"code","efcb6460":"code","ceba997a":"code","6b098bef":"code","625a0e89":"code","f5222af6":"code","2c6ba13e":"code","e6a66da5":"code","c34826d8":"code","b3d46634":"code","1d2fb67c":"code","13188c69":"code","8492bbb2":"code","5445a168":"code","40385d44":"code","14f90ff1":"code","eb979624":"code","4bb99401":"code","b68f3abd":"code","f929c9ca":"code","003d91f5":"code","056bbf14":"code","9ecdf28b":"code","90c145aa":"code","f49532d9":"code","5e73ae94":"code","02b371c5":"code","e7a888c3":"code","83400645":"code","60f563f6":"code","4ed78cec":"code","de95ea17":"code","73fd0cbd":"code","f62bfec0":"code","fedfc94a":"code","4d26e476":"code","4d8afe0b":"code","daa5dde7":"code","6e9dd7f7":"code","b742eac1":"code","00dc2ce0":"code","2836afca":"code","626054fe":"code","cf8c95b6":"code","affa0bee":"code","8751fcfd":"code","eeec9202":"code","7a5d22bd":"code","f7549480":"code","13d8dbfe":"code","18dc59c6":"code","5eaffd3c":"code","612e33b0":"code","25b3315f":"code","73edd236":"code","77f0f840":"code","594afb34":"markdown","4be8efce":"markdown","7d5cacfd":"markdown","914f0a23":"markdown","284c067d":"markdown","4b4500eb":"markdown","64718d27":"markdown","27c08243":"markdown","ee89110c":"markdown","eb64e989":"markdown","6fe1e06b":"markdown","b740c59f":"markdown","cafa9c61":"markdown","e12ed26b":"markdown","b76d392e":"markdown","c4f1fb75":"markdown","c2c62732":"markdown","1debe02f":"markdown","275f7a7c":"markdown","e9062613":"markdown","32241a46":"markdown","069f5e48":"markdown","cf80ed1e":"markdown","5c83e18c":"markdown","99143327":"markdown","4ee7246a":"markdown","b31c53c9":"markdown","826fd7e6":"markdown","060dbdc0":"markdown","0d5f68d2":"markdown","626d59ce":"markdown","07e11426":"markdown","1a8da97d":"markdown","5dd2e33f":"markdown","fd33f405":"markdown","fe611a08":"markdown","a788d92e":"markdown","20ea294c":"markdown","440fcfc7":"markdown"},"source":{"3f9bcffb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport re\nimport datetime\nfrom datetime import datetime, timedelta\nfrom itertools import combinations #\u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430 \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430\nfrom scipy.stats import ttest_ind #\u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430 \u0421\u0442\u044c\u044e\u0434\u0435\u043d\u0442\u0430\nfrom sklearn.preprocessing import StandardScaler #\u0434\u043b\u044f std \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\nfrom sklearn.preprocessing import MinMaxScaler#\u0434\u043b\u044f std \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\n        # Any results you write to the current directory are saved as output.","f0f3432e":"# \u0432\u0441\u0435\u0433\u0434\u0430 \u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0439\u0442\u0435 RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u0432\u0430\u0448\u0438 \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b!\nRANDOM_SEED = 42","a66510b3":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt","23cc71d0":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\n# \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 (train, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438)\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\n# \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 (test, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438)\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","bb5f21ae":"df_train.info()","0cc0131b":"df_train.head(5)","099ccbd3":"df_test.info()","c34ca4fc":"df_test.head(5)","b69c452f":"sample_submission.head(5)","bb8fa247":"sample_submission.info()","fcb27d3f":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","f9cd2a44":"copy_data = data.copy()","ef588c81":"data.info()","5f866f6b":"data.sample(5)","defe6b90":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\ndef func_(df, col, with_bins):\n    \n    #\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 NaN \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u0447\u043a\u0430     \n    df[col] = df[col].apply(lambda x: None if str(x).strip()=='' else x)\n    \n    display(pd.DataFrame(df[col].value_counts()))\n    print(\"\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435\", col, \"\u0431\u043e\u043b\u0435\u0435 10 \u0440\u0430\u0437:\", (df[col].value_counts()>10).sum())\n    print(\"\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439:\", df[col].nunique())\n    df.loc[:, [col]].info()\n    \n    if with_bins == 1:\n    \n        fig = plt.figure()\n        axes = fig.add_axes([0, 0, 1, 1])\n        axes.hist(df[col], bins = int(df[col].median()),color = 'green') \n        #axes.set_title('\u041e\u0431\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u0441\u0447\u0435\u0442\u0430')\n        axes.set_ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e')\n        axes.set_xlabel(col)  \n        \n    else: # \u0431\u0435\u0437 bins \u0440\u0430\u0432\u043d\u043e\u043c\u0443 \u043c\u0435\u0434\u0438\u0430\u043d\u0435\n        fig = plt.figure()\n        axes = fig.add_axes([0, 0, 1, 1])\n        axes.hist(df[col], color = 'green')        \n        axes.set_ylabel('\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e')\n        axes.set_xlabel(col)  ","90071433":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u0439 \u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\ndef func_quantile(df, col):   \n    \n    IQR = df[col].quantile(q=0.75) - df[col].quantile(0.25)\n    perc25 = df[col].quantile(0.25)\n    perc75 = df[col].quantile(0.75)\n    print('25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc25), '75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc75), \"IQR: {}, \".format(IQR), \"\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{f}, {l}].\".format(f=perc25 - 1.5*IQR, l=perc75 + 1.5*IQR))\n    \n    # \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432\n    print(\"\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435\",col,\":\",df[df[col]<perc25 - 1.5*IQR][col].count() + df[df[col]>perc75 + 1.5*IQR][col].count())\n    #print(\"\u0412\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435\",col,\":\",(df[df[col]<perc25 - 1.5*IQR][col]).to_list())\n    #print(\"\u0412\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435\",col,\":\",(df[df[col]>perc75 + 1.5*IQR][col]).to_list())\n    df[col].loc[df[col].between(perc25 - 1.5*IQR, perc75 + 1.5*IQR)].hist(bins = 20, label = 'IQR')\n    plt.legend()  ","c9653d55":"#\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u043c \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u043c\ndef filling_quantile(df, col, change_quant): #quant=0.25 \u0438\u043b\u0438 0.75\n    IQR = df[col].quantile(q=0.75) - df[col].quantile(0.25)\n    perc25 = df[col].quantile(0.25)\n    perc75 = df[col].quantile(0.75)\n    high_border = perc75 + 1.5*IQR\n    low_border = perc25 - 1.5*IQR\n    if change_quant == 0.75:\n        df[col] = df[col].apply(lambda x: high_border if x>high_border else x)\n    elif change_quant == 0.25:\n        df[col] = df[col].apply(lambda x: low_border if x<low_border else x)\n    else:\n        print('\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c 0.25 \u0438\u043b\u0438 0.75 :)')","0f7845c0":"#\u0421\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043d\u043e\u043c\u0438\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\ndef get_boxplot(column):\n    fig, ax = plt.subplots(figsize = (8, 4))\n    sns.boxplot(x=column, y='Rating', \n                data=data.loc[data.loc[:, column].isin(data.loc[:, column].value_counts().index[:20])],\n               ax=ax)\n    plt.xticks(rotation=45)\n    ax.set_title('Boxplot for ' + column)\n    plt.show()","9895532c":"#\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0435\u0434\u0438\u043d\u0438\u0447\u043a\u043e\u0439, \u0442\u0430\u043c \u0433\u0434\u0435 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435 Number of Reviews \u043d\u0435\u0442 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\ndata['isNAN'] = pd.isna(data['Number of Reviews']).astype('uint8')\n\n# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\nmedian = data.groupby('City')['Number of Reviews'].median()\ndata['Number_of_Reviews'] = data[data['isNAN'] > 0].City.apply(\n    lambda x: round(median.loc[x]))\n","ab0fb9b9":"data['Number of Reviews'].value_counts().min()","f79ad55c":"data['Number_of_Reviews'].value_counts().min()","27068446":"data['Number of Reviews'].fillna(0, inplace=True)\ndata['Number_of_Reviews'].fillna(0, inplace=True)\ndata['Number of Reviews'] = data['Number of Reviews'] + data['Number_of_Reviews']\n\n#\u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u0437\u044f\u043b\u0438, \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c\ndata.drop(['Number_of_Reviews'], axis = 1, inplace = True)","51b0bdc8":"data[data['isNAN'] ==0]","4a567b77":"data.nunique(dropna=False)","8ce6d446":"#Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435","853dae95":"func_(data,'Ranking',10)","310efaa4":"func_quantile(data,'Ranking')","6208c4c0":"sns.boxplot(x= 'Ranking', data = data)","b777f931":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e\ndata.loc[:,'Rating'].astype('float64').corr(data.loc[:,'Ranking']).astype('float64')","254be6e4":"sns.pairplot(data, vars = [\"Ranking\",\"Rating\"], kind = 'reg',diag_kind=\"kde\")","ac213fc0":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0430 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0439 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c Q3\n#filling_quantile(data, 'Ranking',0.75)\n#\u041f\u0440\u0438 \u0437\u0430\u043c\u0435\u043d\u0435 MAE \u0443\u0445\u0443\u0434\u0448\u0430\u0435\u0442\u0441\u044f \u043d\u0430 0,2. \u0412\u0441\u0435 \u0442\u0430\u043a\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0433\u0440\u0443\u043f\u043f\u0430 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435. \u041d\u0435\u043b\u044c\u0437\u044f \u0435\u0435 \u0443\u0431\u0438\u0440\u0430\u0442\u044c. \n#\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0433\u0440\u0443\u043f\u043f\u044b.","1ebe1b9c":"def func(x):\n    if x > 972 and x < 5241:\n        return 1\n    elif x < 972:\n        return 2\n    else: return 3     ","1da64168":"data['Ranking_group'] = data['Ranking'].apply(func)","a5819e61":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e\ndata.loc[:,'Rating'].astype('float64').corr(data.loc[:,'Ranking_group']).astype('float64')","31354a97":"#\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0430\u043c\u043c\u0438-\u043f\u0435\u0440\u0435\u043c\u043d\u043d\u044b\u0435\ndata = pd.get_dummies(data, columns=['Ranking_group'], dummy_na=False)\n#\u041d\u0435\u043c\u043d\u043e\u0433\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0441\u044f MAE","a6849d39":"rest_count_in_city = data.groupby('City')['Restaurant_id'].count().reset_index()\nrest_count_in_city.sort_values(by = 'Restaurant_id',ascending=False)\nrest_count_in_city.rename(columns = {'Restaurant_id':'count_in_city'}, inplace = True)\nrest_count_in_city","3dca2ef6":"data = data.merge(rest_count_in_city, on='City', how='left',sort=False)","3f9d9789":"data.head(10)","79e532d5":"data.loc[:,['Restaurant_id','count_in_city','Ranking']]","10176eb0":"#\u041f\u0440\u043e\u0431\u043e\u0432\u0430\u043b\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e, \u043d\u043e \u043c\u0438\u043d \u043c\u0430\u043a\u0441 \u043d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u0435\u0442 \u043b\u0443\u0447\u0448\u0438\u0439 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u044c MAE\nscaler = MinMaxScaler()#StandardScaler()\nRanking_norm = scaler.fit_transform(data.loc[:,['count_in_city','Ranking']]) \n#Ranking_norm = scaler.fit_transform(data.loc[:,['Ranking']]) \nRanking_norm","44cf8dd3":"df_norm_Ranking = pd.DataFrame(Ranking_norm,\n                  columns = ['Ranking_norm_1', 'Ranking_norm_2'])\n\n#df_norm_Ranking = pd.DataFrame(Ranking_norm,\n#                  columns = ['Ranking_norm_1'])\n\ndf_norm_Ranking['City']=data ['City']\ndf_norm_Ranking","281c3595":"data['Ranking_norm_1'] = df_norm_Ranking['Ranking_norm_1']\ndata['Ranking_norm_2'] = df_norm_Ranking['Ranking_norm_2']","e87d30c4":"data['Ranking_norm_1'].hist()","9885499d":"data.groupby('Restaurant_id')['Rating'].mean().hist()","2ede7e12":"# \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f, \u0437\u043d\u0430\u0447\u0438\u0442 \u044d\u0442\u043e \u043d\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430, \u0430 \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430, \u043c\u043e\u0436\u0435\u0442 \u0441\u0435\u0442\u0435\u0432\u044b\u0435.\nlen(data['Restaurant_id'].value_counts())","fae5833c":"data.sample(5)","0dd20c56":"#\u041d\u0430\u0439\u0434\u0435\u043c \u0441\u0435\u0442\u0435\u0432\u044b\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u044b\nnetwork = (data['Restaurant_id'].value_counts()>2).reset_index()","1739769f":"network_list = list(network[network.Restaurant_id == True]['index'])\n","8b1c91c1":"df_network = network[network.Restaurant_id == True]","bd0df177":"df_network['chain'] = '1'","8b225543":"df_network.rename(columns = {\n                        'index':'Restaurant_id', \n                        'Restaurant_id':'True\/Not', \n                         }, inplace = True)","38e0fee0":"df_network","a45a5ae8":"df_network = df_network.drop(['True\/Not'], axis=1)\ndf_network","4d453cf0":"data.head()","776e2f3d":"data = data.merge(df_network, on='Restaurant_id', how='left')\ndata['chain'].fillna(0, inplace=True) #\u0433\u0434\u0435 \u043d\u0435 \u0441\u0435\u0442\u044c, \u0441\u0442\u0430\u0432\u0438\u043c 0","d9e43a66":"data.head()","e2627ff4":"data.Rating[data.chain == '1'].hist()\n","5937917a":"#\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u043d\u043e \u043e\u043d\u0430 \u043d\u0435 \u043d\u0443\u0436\u043d\u0430. \u0421\u0434\u0435\u043b\u0430\u043b\u0430 \u0447\u0435\u0440\u0435\u0437 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\n#def function(x):\n#    if x in network_list:\n#        return 'network'\n#    else:\n#        return 'not network'\n#data['Network_new'] = data['Restaurant_id'].apply(function)\n","69f17717":"display(data['Price Range'].unique())\ndata['Price Range'].value_counts()","3cba25be":"# \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"Price Range\"\ndata['isNAN'] = pd.isna(data['Price Range']).astype('uint8')\nprice_dict = {\"$$$$\": 3, \"$$ - $$$\": 2, \"$\": 1}\ndata['Price Range'] = data['Price Range'].replace(to_replace=price_dict)\n# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0441\u0440\u0435\u0434\u043d\u0438\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\nmedian = data.groupby('City')['Price Range'].median()\ndata['Price_Range'] = data[data['isNAN'] > 0].City.apply(\n    lambda x: median.loc[x])\ndata['Price Range'].fillna(0, inplace=True)\ndata['Price_Range'].fillna(0, inplace=True)\ndata['Price Range'] = data['Price Range'] + data['Price_Range']\ndata.drop(['Price_Range'], axis = 1, inplace = True)","150e96e2":"display(data['Price Range'].unique())\ndata['Price Range'].value_counts()","84712c9f":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 \u0445\u0443\u0436\u0435 \u0435\u0441\u043b\u0438 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 One-Hot Encoding\n#data = pd.get_dummies(data, columns=['Price Range'], dummy_na=False)","cbb772b3":"data.info()\n","243f8dd2":"data['Number of Reviews'].value_counts()","f91a66c8":"#\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0433\u043e\u0440\u043e\u0434 \nNumber_of_Reviws_Sum = data.groupby(['City'])['Number of Reviews'].sum().sort_values(ascending=False)\nNumber_of_Reviws_Sum","137e71a4":"Number_of_Reviws_Count = data.groupby(['City'])['Number of Reviews'].count().sort_values(ascending=False)\nNumber_of_Reviws_Count\n","4544b2d7":"#\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0432\u0442\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043d\u0430 \u043e\u0434\u0438\u043d \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0432 \u0433\u043e\u0440\u043e\u0434\u0435: \nmed_number_of_reviws_dict = {}\nfor city in list(data.City.unique()):\n    med_number_of_reviws_dict[city] = round(Number_of_Reviws_Sum[city]\/Number_of_Reviws_Count[city])\n\nmed_number_of_reviws_dict # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430","0fe1960b":"# \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u044e \u0434\u0440\u0443\u0433\u0438\u043c \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443\ntable = Number_of_Reviws_Sum.reset_index().merge(Number_of_Reviws_Count.reset_index(), on='City', how='right')\ntable['city_reviews_mean'] = table['Number of Reviews_x']\/table['Number of Reviews_y']\ntable","a5abfed9":"city_reviews = table.groupby('City')['city_reviews_mean'].apply(list).to_dict()\ncity_reviews","63ac917b":"# \u0417\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u0432\u0441\u0435 \u043d\u0443\u043b\u0438 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 (\u043f\u043e \u0438\u0442\u043e\u0433\u0443 \u044d\u0442\u043e \u043d\u0435 \u043e\u0441\u043e\u0431\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u043b\u043e MAE):\n\ndef number_of_reviews_med(row):\n    if row['Number of Reviews'] == 0:\n        result = med_number_of_reviws_dict[row['City']]\n    else:\n        result = row['Number of Reviews']\n    return result\n\ndata['Number of Reviews'] = data.apply(lambda row: number_of_reviews_med(row),axis = 1)\n","fab9a780":"#\u0412\u0432\u0435\u0434\u0451\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0433\u043e\u0440\u043e\u0434 \u0441\u0442\u043e\u043b\u0438\u0446\u0435\u0439\ncapital = ['Amsterdam', 'Athens', 'Berlin', 'Bratislava', 'Brussels', 'Budapest', 'Copenhagen', 'Dublin', 'Edinburgh', 'Helsinki',\n           'Lisbon', 'Ljubljana', 'London', 'Luxembourg', 'Madrid', 'Oslo', 'Paris', 'Prague', 'Rome', 'Stockholm', 'Vienna', 'Warsaw']\ndata['Capital'] = data['City'].apply(lambda x: 1 if x in (capital) else 0)\n\n# \u041f\u0440\u0438\u0437\u043d\u0430\u043a Capital \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u043e\u0446\u0435\u043d\u043a\u0443 \u043e\u0431\u0443\u0447\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0435\u0441\u043b\u0438 \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f One-Hot Encoding\ndata = pd.get_dummies(data, columns=['Capital'], dummy_na=False)","ba46bc3d":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443 (\u0432 \u0442\u044b\u0441.)\n#city_population = {'London': 10979, 'Paris': 11020, 'Madrid': 6026, 'Barcelona': 4588,\n#                   'Berlin': 6177, 'Milan': 4907, 'Rome': 3900, 'Prague': 1308,\n#                   'Lisbon': 2942, 'Vienna': 2300, 'Amsterdam': 2400, 'Brussels': 1831,\n#                   'Hamburg': 1841, 'Munich': 1471, 'Lyon': 1748, 'Stockholm': 2352,\n #                  'Budapest': 2965, 'Warsaw': 3100, 'Dublin': 1347,\n #                  'Copenhagen': 1308, 'Athens': 3168, 'Edinburgh': 513,\n #                  'Zurich': 1334, 'Oporto': 1313, 'Geneva': 496, 'Krakow': 1200,\n #                  'Oslo': 1558, 'Helsinki': 1299, 'Bratislava': 700,\n  #                 'Luxembourg': 626, 'Ljubljana': 508}\n\n#data['\u0421ity_population'] = data['City'].map(city_population)\n#\u042d\u0442\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u043e MAE","aabb057e":"# \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043a-\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\n#restaurant_stat = {'Paris': 17593, 'Stockholm': 3131, 'London': 22366, 'Berlin': 8110, 'Munich': 3367,'Oporto': 2060,\n#    'Milan': 7940, 'Bratislava': 1331, 'Vienna': 4387, 'Rome': 12086, 'Barcelona': 10086, 'Madrid': 11562,\n#    'Dublin': 2706, 'Brussels': 3703, 'Zurich': 1901, 'Warsaw': 3210, 'Budapest': 3445, 'Copenhagen': 2637,\n#    'Amsterdam': 4189, 'Lyon': 2833, 'Hamburg': 3501, 'Lisbon': 4985, 'Prague': 5850, 'Oslo': 1441,\n#    'Helsinki': 1661, 'Edinburgh': 2248, 'Geneva': 1753, 'Ljubljana': 647, 'Athens': 2814,\n#    'Luxembourg': 759, 'Krakow': 1832}\n\n#data['Rest_count'] = data['City'].map(restaurant_stat)","729775f3":"#data['Rest_per_1k'] = data['Rest_count'] \/ data['\u0421ity_population']","2b95e278":"# Cuisine Style: \u041a\u0443\u0445\u043d\u044f\ndata.loc[0, 'Cuisine Style']","97dc1bd4":"data.info()","6df3827f":"data['Cuisine Style'] = data['Cuisine Style'].apply(lambda x: str(x).replace('[',''))\ndata['Cuisine Style'] = data['Cuisine Style'].apply(lambda x: str(x).replace(']',''))\ndata['Cuisine Style'] = data['Cuisine Style'].apply(lambda x: str(x).replace(' ',''))","4afab0eb":"def parse_values(x):\n    if 'VegetarianFriendly' in x:\n           return 1\n    elif 'European' in x:\n           return 2\n    else:\n         return 3\ndata['Cuisine'] = data['Cuisine Style'].apply(parse_values)","199abcea":"#\u0425\u0443\u0436\u0435 MAE \u0441 \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u043e\u0439 \n#data = pd.get_dummies(data, columns=[ 'Cuisine',], dummy_na=True)","58a55316":" #\u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u0443\u0445\u043e\u043d\u044c, \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u043e\u0435, \u0442\u043e \u043a\u0443\u0445\u043d\u044f \u043e\u0434\u043d\u0430\ndef modify_cuisine_style(value):\n    if pd.isnull(value):\n        return []\n    else:\n        result = value.replace('[', '') \n        result = result.replace(']', '') \n        result = result.replace(', ', ',')\n        return result.split(\",\")\n\ndata['Cuisine Style'] = data['Cuisine Style'].apply(modify_cuisine_style)\ndata['Cuisine_Style'] = data['Cuisine Style'].apply(lambda x: 1 if len(x)==0 else len(x))","78c4ebe6":"# \u0434\u043b\u044f One-Hot Encoding \u0432 pandas \u0435\u0441\u0442\u044c \u0433\u043e\u0442\u043e\u0432\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f - get_dummies. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e \u0440\u0430\u0434\u0443\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 dummy_na\ndata = pd.get_dummies(data, columns=[ 'City',], dummy_na=True)","21a8ec20":"data['Reviews'] = data['Reviews'].apply(lambda x: str(x).replace('[',''))\ndata['Reviews'] = data['Reviews'].apply(lambda x: str(x).replace(']',''))\ndata['Reviews'] = data['Reviews'].apply(lambda x: str(x).replace(' ',''))","1de369ae":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 Review_Dates \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0434\u0430\u0442 \u043e\u0442\u0437\u044b\u0432\u043e\u0432:\npattern = re.compile('\\d+\\\/\\d+\\\/\\d+')\ndata['Review_Date'] = data.Reviews.apply(pattern.findall)","efcb6460":"# \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0431\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u0442:\ndata['Number_of_Date'] = data.Review_Date.apply(lambda x: len(list(x)))\ndata.Number_of_Date.value_counts()","ceba997a":"#\u0412\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043f\u0435\u0440\u0432\u0430\u044f \u0434\u0430\u0442\u0430 \u043f\u0440\u043e\u043f\u0438\u0441\u0430\u043d\u0430 \u0432 \u043e\u0442\u0437\u044b\u0432\u0435 ","6b098bef":"# \u0423\u0431\u0438\u0440\u0430\u0435\u043c \u0434\u0430\u0442\u044b \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c\u044b\u0435 \u0438\u0437 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432:\ndata.Review_Date = data.Review_Date.apply(lambda x: [x[-2], x[-1]] if len(x) > 2 else x)\n\n# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c:\ndata['Number_of_Date'] = data.Review_Date.apply(lambda x: len(list(x))) \ndata.Number_of_Date.value_counts() ","625a0e89":"# \u0420\u0430\u0437\u043d\u043e\u0441\u0438\u043c \u0434\u0430\u0442\u044b \u043f\u043e 2-\u043c \u043d\u043e\u0432\u044b\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c, \u0442\u0430\u043a \u0447\u0442\u043e\u0431\u044b \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 Date_Rev_1 \u0431\u044b\u043b\u0430 \u0431\u041e\u043b\u044c\u0448\u0430\u044f \u0434\u0430\u0442\u0430\n# \u0438 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0438\u0445 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 datetime:\n\ndef date_rev_1_func(x):\n    if len(x) == 0:\n        result = None\n    elif len(x) == 1:\n        result = x[0]\n    else: \n        result = max(x)\n    return result","f5222af6":"def date_rev_2_func(x):\n    if len(x) == 0:\n        result = None\n    elif len(x) == 1:\n        result = x[0]\n    else:\n        result = min(x)\n    return result","2c6ba13e":"data['Date_Rev_1'] = pd.to_datetime(data.Review_Date.apply(lambda x: date_rev_1_func(x)))\ndata['Date_Rev_2'] = pd.to_datetime(data.Review_Date.apply(lambda x: date_rev_2_func(x)))","e6a66da5":"# C\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043c\u0435\u0436\u0434\u0443 \u0434\u0430\u0442\u0430\u043c\u0438 2-\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u0435\u0435 \u043c\u0430\u043ac\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435:\ndata['Date_Rev_delta'] = (data.Date_Rev_1 - data.Date_Rev_2)\/ np.timedelta64(1, \"D\")\n\nx = list(data['Date_Rev_delta'].unique()) \nx.sort()\nprint(x[-1])","c34826d8":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0434\u043d\u0435\u0439, \u043e\u0442\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043e\u0442\u0437\u044b\u0432 \u043e\u0442 date_max:\n\n# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u0430\u0442\u0443 \u043e\u0442\u0437\u044b\u0432\u0430 \u0432 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435:\ndate_max = data['Date_Rev_1'].max()\ndisplay(date_max)\n\n# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0443:\ndata['Date_Rev_From_Max'] = data.apply(lambda row: None if len(row.Review_Date) == 0  \n                                       else ((date_max-row.Date_Rev_1)), axis=1) \/ np.timedelta64(1, \"D\")  \n\n# \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435:\nbad_date = data['Date_Rev_From_Max'].max()\n\n# \u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0432 \u043a\u043e\u043b\u043e\u043d\u043a\u0435:\ndata.Date_Rev_From_Max.fillna(bad_date, inplace = True)","b3d46634":"#ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor","1d2fb67c":"df_ID_TA = data.ID_TA.value_counts()[:].reset_index()\ndf_ID_TA[df_ID_TA.ID_TA ==2]","13188c69":"#data['ID_TA_type'] = data['ID_TA'].apply(lambda x: 1 if len(x)==0 else len(x))\ndata['ID_TA_type'] = data['ID_TA'].apply(lambda x: len(x))","8492bbb2":"data['ID_TA_type'].hist()","5445a168":"Rating_median_ID_TA_type = data.groupby('ID_TA_type')['Rating'].mean()\nRating_median_ID_TA_type","40385d44":"for i in ['ID_TA_type']:\n    get_boxplot(i)","14f90ff1":"#\u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u043d\u043e\u043c\u0435\u0440\u0430 \u0441 \u0434\u043b\u0438\u043d\u043e\u0439 8 \u0438 9 \u0432 \u043e\u0434\u043d\u0443 \u0433\u0440\u0443\u043f\u043f\u0443, \u0430 \u0441 \u0434\u043b\u0438\u043d\u043e\u0439 7 - \u0432 \u0434\u0440\u0443\u0433\u0443\u044e.\ndef len_ID_TA(x):\n    if x == 8 or x == 9:\n        return 1\n    else: return 0  ","eb979624":"data['type_ID_TA2'] = data['ID_TA_type'].apply(len_ID_TA)","4bb99401":"#data = pd.get_dummies(data, columns=['type_ID_TA2'], dummy_na=False)\n#\u0442\u0430\u043a \u0445\u0443\u0436\u0435 MAE \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f","b68f3abd":"get_boxplot('ID_TA')","f929c9ca":"plt.rcParams['figure.figsize'] = (10,7)\ndf_train['Ranking'].hist(bins=100)","003d91f5":"df_train['City'].value_counts(ascending=True).plot(kind='barh')","056bbf14":"df_train['Ranking'][df_train['City'] =='London'].hist(bins=100)","9ecdf28b":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0442\u043e\u043f 10 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\nfor x in (df_train['City'].value_counts())[0:10].index:\n    df_train['Ranking'][df_train['City'] == x].hist(bins=100)\nplt.show()","90c145aa":"df_train['Rating'].value_counts(ascending=True).plot(kind='barh')","f49532d9":"df_train['Ranking'][df_train['Rating'] == 5].hist(bins=100)","5e73ae94":"df_train['Ranking'][df_train['Rating'] < 4].hist(bins=100)","02b371c5":"plt.rcParams['figure.figsize'] = (15,10)\nsns.heatmap(data.drop(['sample'], axis=1).corr(),)","e7a888c3":"def get_stat_dif_2(column):\n    \n    cols = data[data['sample'] == 1].loc[:, column].value_counts().index[:]\n    combinations_all = list(combinations(cols, 2))\n    # \u0422\u0435\u0441\u0442 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0435\u0437 NA \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0434\u043b\u044f \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430, \n    # \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0441 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c, \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0432 0 \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043e\u043a\n    stud_stat = data[data['sample'] == 1]\n    for comb in combinations_all:\n        if ttest_ind(stud_stat.loc[data[data['sample'] == 1].loc[:, column] == comb[0], 'Rating'],\n                     stud_stat.loc[data[data['sample'] == 1].loc[:, column] == comb[1], 'Rating']).pvalue <= 0.05\/len(combinations_all):  # \u0443\u0447\u043b\u0438 \u043f\u043e\u043f\u0440\u0430\u0432\u043a\u0443 \u0411\u043e\u043d\u0444\u0435\u0440\u043e\u043d\u0438\n            # print('\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438', column)\n            pass\n        else:\n            return column \n            break","83400645":"def get_stat_dif(column):\n    cols = data.loc[:, column].value_counts().index[:10]\n    combinations_all = list(combinations(cols, 2))\n    for comb in combinations_all:\n        if ttest_ind(data.loc[data.loc[:, column] == comb[0], 'Rating'], \n                        data.loc[data.loc[:, column] == comb[1], 'Rating']).pvalue \\\n            <= 0.05\/len(combinations_all): # \u0423\u0447\u043b\u0438 \u043f\u043e\u043f\u0440\u0430\u0432\u043a\u0443 \u0411\u043e\u043d\u0444\u0435\u0440\u043e\u043d\u0438\n            print('\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043b\u043e\u043d\u043a\u0438', column)\n        #    break\n        else:\n            return column\n            break","60f563f6":"data.info()","4ed78cec":"from sklearn.preprocessing import PolynomialFeatures","de95ea17":"pf = PolynomialFeatures(2)\npoly_features = pf.fit_transform(data[['Ranking', 'Number of Reviews']])#Price Range\npoly_features","73fd0cbd":"df = pd.DataFrame(poly_features,\n                  columns = ['poly1', 'poly2', 'poly3','poly4','poly5','poly6']                  )\ndisplay(df)","f62bfec0":"#data['1'] =df['1']+df['2']+df['3']+df['4']+df['5']+df['6']\ndata['poly1'] =df['poly1']\ndata['poly2'] =df['poly2']\ndata['poly3'] =df['poly3']\ndata['poly4'] =df['poly4']\ndata['poly5'] =df['poly5']\n#data['poly6'] =df['poly6'] \u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u043a\u0430\u043a \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439, \u0443\u0431\u0440\u0430\u043b\u0430","fedfc94a":"for col in ['Restaurant_id', 'Reviews', 'URL_TA', 'ID_TA', 'City_Amsterdam',  'City_Athens',  'City_Barcelona', 'City_Berlin',  \n                'City_Bratislava',  'City_Brussels',  'City_Budapest',  'City_Copenhagen',  \n                'City_Dublin',  'City_Edinburgh',  'City_Geneva',  'City_Hamburg',  \n                'City_Helsinki', 'City_Krakow',  'City_Lisbon',  'City_Ljubljana',  \n                'City_London',  'City_Luxembourg',  'City_Lyon',  'City_Madrid',  'City_Milan',  \n                'City_Munich',  'City_Oporto',  'City_Oslo',  'City_Paris', 'City_Prague',  \n                'City_Rome',  'City_Stockholm',  'City_Vienna',  'City_Warsaw',  'City_Zurich',  \n                'City_nan','poly1','poly2','poly3','poly4','poly5','Ranking_norm_1','Ranking_norm_2','Ranking']:\n    get_stat_dif(col)","4d26e476":"# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u044e \u043f\u043e\u0440\u044f\u0434\u043e\u043a Restaurant_id\ndata.head()","4d8afe0b":"#df_preproc = pd.DataFrame()","daa5dde7":"df_preproc = data.copy()\ndf_preproc = df_preproc.drop(['Restaurant_id', 'Cuisine Style', 'Reviews', 'Review_Date', \n                              'Number_of_Date', 'Date_Rev_1', 'Date_Rev_2', 'Date_Rev_delta', \n                              'isNAN','URL_TA','ID_TA'], axis=1)#'ID_TA_type'\n\n#df_preproc['City_Athens'] = data['City_Athens']\n#df_preproc['City_Berlin'] = data['City_Berlin']\n#df_preproc['City_Madrid'] = data['City_Madrid']\n#df_preproc['City_Milan'] = data['City_Milan']\n#df_preproc['City_Oporto'] = data['City_Oporto']\n#df_preproc['City_Rome'] = data['City_Rome']\n#df_preproc['City_Stockholm'] = data['City_Stockholm']\n#df_preproc['City_Vienna'] = data['City_Vienna']\n#df_preproc['Price Range'] = data['Price Range']\n#df_preproc['poly2'] = data['poly2']\n#df_preproc['poly3'] = data['poly3']\n#df_preproc['poly4'] = data['poly4']\n#df_preproc['poly5'] = data['poly5']\n#df_preproc['Cuisine'] = data['Cuisine']\n#df_preproc['Cuisine_Style'] = data['Cuisine_Style']\n#df_preproc['Number of Reviews'] = data['Number of Reviews']\n#df_preproc['Ranking'] = data['Ranking']\n#df_preproc['1'] = data['1']\n#df_preproc['2'] = data['2']\n#df_preproc['count_in_city'] = data['count_in_city']\n#df_preproc['Date_Rev_From_Max'] = data['Date_Rev_From_Max']\n#df_preproc['sample'] = data['sample']\n#df_preproc['Rating'] = data['Rating']\n\n\n#'URL_TA', 'ID_TA'\n#'City_Helsinki', 'City_Hamburg', 'City_Bratislava', 'City_Geneva', 'City_Zurich', 'City_Copenhagen', 'City_Luxembourg'\n#df_preproc = df_preproc.drop(['City'], axis=1)\n\n# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","6e9dd7f7":"df_preproc.head()","b742eac1":"df_preproc.info()","00dc2ce0":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","2836afca":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","626054fe":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","cf8c95b6":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","affa0bee":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","8751fcfd":"# \u0422\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0438\u043c\u0435\u0435\u0442 \u0448\u0430\u0433 0.5, \u043e\u043a\u0440\u0443\u0433\u043b\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435.\ny_pred = np.round(y_pred * 2) \/ 2","eeec9202":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","7a5d22bd":"#MAE: 0.18075\n#MAE: 0.1769375\n#MAE: 0.176625\n#MAE: 0.1755\n#MAE: 0.1750625","f7549480":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","13d8dbfe":"feat_importances.nlargest(15)","18dc59c6":"test_data.sample(10)","5eaffd3c":"test_data = test_data.drop(['Rating'], axis=1)","612e33b0":"sample_submission","25b3315f":"predict_submission = model.predict(test_data)","73edd236":"predict_submission","77f0f840":"#y_pred = np.round(y_pred * 2) \/ 2\nsample_submission['Rating'] = np.round(predict_submission * 2) \/ 2\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","594afb34":"# \u041c\u041e\u0419 \u0422\u0420\u0415\u041d\u0418\u0420\u041e\u0412\u041e\u0427\u041d\u042b\u0419 \u0412\u0410\u0420\u0418\u0410\u041d\u0422","4be8efce":"# Model \n\u0421\u0430\u043c ML","7d5cacfd":"\u041a\u0430\u043a \u0432\u0438\u0434\u0438\u043c, \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043e\u0447\u0438\u0441\u0442\u043a\u0438 \u0438 \u043f\u0440\u0435\u0434\u0432\u0430\u0440\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.","914f0a23":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439","284c067d":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\n* City: \u0413\u043e\u0440\u043e\u0434 \n* Cuisine Style: \u041a\u0443\u0445\u043d\u044f\n* Ranking: \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435\n* Price Range: \u0426\u0435\u043d\u044b \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0432 3 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u0445\n* Number of Reviews: \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* Reviews: 2 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u0430 \u0438 \u0434\u0430\u0442\u044b \u044d\u0442\u0438\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432\n* URL_TA: \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 'www.tripadvisor.com' \n* ID_TA: ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 TripAdvisor\n* Rating: \u0420\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430","4b4500eb":" ### \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"Price Range\"","64718d27":"### \u0418 \u043e\u0434\u0438\u043d \u0438\u0437 \u043c\u043e\u0438\u0445 \u043b\u044e\u0431\u0438\u043c\u044b\u0445 - [\u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432](https:\/\/ru.wikipedia.org\/wiki\/\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f)\n\u041d\u0430 \u044d\u0442\u043e\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0435 \u0443\u0436\u0435 \u0441\u0435\u0439\u0447\u0430\u0441 \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0438 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.","27c08243":"\u0417\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u043b\u0430\u0431\u0430\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u0430\u044f (\u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0432\u0441\u0435\u0433\u043e -0,1)","ee89110c":" ### \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"Reviews\"","eb64e989":" ### \u043f\u0440\u0438\u0437\u043d\u0430\u043a Restaurant_id","6fe1e06b":"## \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","b740c59f":" ### \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"Cuisine Style\"","cafa9c61":"\u0412\u043e\u043e\u0431\u0449\u0435 \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0432 \u044d\u0442\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u044b\u0445 \u0444\u0430\u043a\u0442\u043e\u0432, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440:\n* \u0433\u0434\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u041f\u0438\u0446\u0435\u0440\u0438\u0439 \u0432 \u041c\u0430\u0434\u0440\u0438\u0434\u0435 \u0438\u043b\u0438 \u041b\u043e\u043d\u0434\u043e\u043d\u0435?\n* \u0432 \u043a\u0430\u043a\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435 \u043a\u0443\u0445\u043d\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0437\u043d\u043e\u043e\u0431\u0440\u0430\u0437\u043d\u0430?\n\n\u043f\u0440\u0438\u0434\u0443\u043c\u0430\u0439\u0442\u0435 \u0441\u0432\u043e\u0438 \u0432\u043e\u043f\u0440\u043e\u0441 \u0438 \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u043d\u0430 \u043d\u0435\u0433\u043e \u043e\u0442\u0432\u0435\u0442 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445)","e12ed26b":"> \u0414\u043b\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u0432 \u041c\u041b \u0434\u0430\u0436\u0435 \u0434\u043b\u044f \u043d\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c One-Hot Encoding, \u0438 \u044d\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438. \u041f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u043a \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 - \u043d\u0438\u043a\u0442\u043e \u043d\u0435 \u0437\u043d\u0430\u0435\u0442 \u0437\u0430\u0440\u0430\u043d\u0435\u0435, \u0447\u0442\u043e \u043c\u043e\u0436\u0435\u0442 \u0432\u0437\u043b\u0435\u0442\u0435\u0442\u044c.","b76d392e":"\u0410 \u043a\u0442\u043e-\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u043b, \u0447\u0442\u043e \u0444\u0440\u0430\u043d\u0446\u0443\u0437\u044b \u043b\u044e\u0431\u044f\u0442 \u043f\u043e\u0435\u0441\u0442\u044c=) \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u0441\u044f \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432 \u0431\u043e\u043b\u044c\u0448\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435:","c4f1fb75":"\u041c\u044b \u0432\u0438\u0434\u0438\u043c,\u0447\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043e\u0442 2 \u0434\u043e 4 ","c2c62732":"### \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"Number of Reviews\"","1debe02f":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e Ranking \u0438\u043c\u0435\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u0441\u0442\u043e \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u0438\u0437-\u0437\u0430 \u043c\u044b \u044d\u0442\u043e\u0433\u043e \u0438\u043c\u0435\u0435\u043c \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435.\n\n>\u041f\u043e\u0434\u0443\u043c\u0430\u0439\u0442\u0435 \u043a\u0430\u043a \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u0432\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. \u042f \u043f\u043e\u043a\u0430\u0436\u0443 \u0432\u0430\u043c \u043f\u0440\u0438\u043c\u0435\u0440, \u043a\u0430\u043a \u0432\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0438. \u0410 \u0434\u0430\u043b\u0435\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u0439\u0442\u0435 \u0431\u0435\u0437 \u043f\u043e\u0434\u0441\u043a\u0430\u0437\u043e\u043a =) \n","275f7a7c":"\u0423 \u043d\u0430\u0441 \u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0434\u043e\u0442\u044f\u0433\u0438\u0432\u0430\u044e\u0442 \u0438 \u0434\u043e 2500 \u043c\u0435\u0441\u0442\u0430 \u0432 \u0441\u0432\u043e\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0435, \u0430 \u0447\u0442\u043e \u0442\u0430\u043c \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c?","e9062613":"# EDA \n[Exploratory Data Analysis](https:\/\/ru.wikipedia.org\/wiki\/\u0420\u0430\u0437\u0432\u0435\u0434\u043e\u0447\u043d\u044b\u0439_\u0430\u043d\u0430\u043b\u0438\u0437_\u0434\u0430\u043d\u043d\u044b\u0445) - \u0410\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u044d\u0442\u043e\u043c \u044d\u0442\u0430\u043f\u0435 \u043c\u044b \u0441\u0442\u0440\u043e\u0438\u043c \u0433\u0440\u0430\u0444\u0438\u043a\u0438, \u0438\u0449\u0435\u043c \u0437\u0430\u043a\u043e\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438, \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0438, \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0438\u043b\u0438 \u0441\u0432\u044f\u0437\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438.\n\u0412 \u043e\u0431\u0449\u0435\u043c \u0446\u0435\u043b\u044c \u044d\u0442\u043e\u0433\u043e \u044d\u0442\u0430\u043f\u0430 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u044d\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043d\u0430\u043c \u0434\u0430\u0442\u044c \u0438 \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0432\u0437\u0430\u0438\u043c\u043e\u0441\u0432\u044f\u0437\u0430\u043d\u044b \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439.\n\u041f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435, \u0431\u043e\u043b\u0435\u0435 \u0441\u0438\u043b\u044c\u043d\u044b\u0435 \u0438, \u0442\u0435\u043c \u0441\u0430\u043c\u044b\u043c, \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043d\u0430\u0448\u0443 \u043c\u043e\u0434\u0435\u043b\u044c \u043b\u0443\u0447\u0448\u0435.\n![](https:\/\/miro.medium.com\/max\/2598\/1*RXdMb7Uk6mGqWqPguHULaQ.png)","32241a46":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430","069f5e48":"# What's next?\n\u0418\u043b\u0438 \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c, \u0447\u0442\u043e\u0431 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n* \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0434\u043b\u044f \u043c\u0430\u0448\u0438\u043d\u044b \u0444\u043e\u0440\u043c\u0430\u0442\n* \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c, \u0447\u0442\u043e \u0435\u0449\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0432\u043b\u0435\u0447\u044c \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n* \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n* \u041f\u043e\u0434\u0433\u0440\u0443\u0437\u0438\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440: \u043f\u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044e \u0438\u043b\u0438 \u0431\u043b\u0430\u0433\u043e\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044e \u0433\u043e\u0440\u043e\u0434\u043e\u0432\n* \u041f\u043e\u0434\u043e\u0431\u0440\u0430\u0442\u044c \u0441\u043e\u0441\u0442\u0430\u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n\u0412 \u043e\u0431\u0449\u0435\u043c, \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0442\u0432\u043e\u0440\u0447\u0435\u0441\u043a\u0438\u0439 \u0438 \u0432\u0435\u0441\u044c\u043c\u0430 \u0443\u0432\u043b\u0435\u043a\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439! \u0423\u0434\u0430\u0447\u0438 \u0432 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438!\n","cf80ed1e":"![](https:\/\/www.pata.org\/wp-content\/uploads\/2014\/09\/TripAdvisor_Logo-300x119.png)\n# Predict TripAdvisor Rating\n## \u0412 \u044d\u0442\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432\u00a0TripAdvisor\n**\u041f\u043e \u0445\u043e\u0434\u0443 \u0437\u0430\u0434\u0430\u0447\u0438:**\n* \u041f\u0440\u043e\u043a\u0430\u0447\u0430\u0435\u043c\u00a0\u0440\u0430\u0431\u043e\u0442\u0443 \u0441 pandas\n* \u041d\u0430\u0443\u0447\u0438\u043c\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 Kaggle Notebooks\n* \u041f\u043e\u0439\u043c\u0435\u043c \u043a\u0430\u043a \u0434\u0435\u043b\u0430\u0442\u044c \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n* \u041d\u0430\u0443\u0447\u0438\u043c\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 (Nan)\n* \u041f\u043e\u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0432\u0438\u0434\u0430\u043c\u0438 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n* \u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c\u00a0[Feature Engineering](https:\/\/ru.wikipedia.org\/wiki\/\u041a\u043e\u043d\u0441\u0442\u0440\u0443\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435_\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432) (\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438)\n* \u0418 \u0441\u043e\u0432\u0441\u0435\u043c \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0437\u0430\u0442\u0440\u043e\u043d\u0435\u043c ML\n* \u0418 \u043c\u043d\u043e\u0433\u043e\u0435 \u0434\u0440\u0443\u0433\u043e\u0435...   \n\n\n\n### \u0418 \u0441\u0430\u043c\u043e\u0435 \u0432\u0430\u0436\u043d\u043e\u0435, \u0432\u0441\u0435 \u044d\u0442\u043e \u0432\u044b \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e!\n\n*\u042d\u0442\u043e\u0442 \u041d\u043e\u0443\u0442\u0431\u0443\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u0441\u044f \u041f\u0440\u0438\u043c\u0435\u0440\u043e\u043c\/\u0428\u0430\u0431\u043b\u043e\u043d\u043e\u043c \u043a \u044d\u0442\u043e\u043c\u0443 \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044e (Baseline) \u0438 \u043d\u0435 \u0441\u043b\u0443\u0436\u0438\u0442 \u0433\u043e\u0442\u043e\u0432\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c!*   \n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043a\u0430\u043a \u043e\u0441\u043d\u043e\u0432\u0443 \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044f.\n\n> \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 baseline \u0440\u0435\u0448\u0435\u043d\u0438\u0435, \u0437\u0430\u0447\u0435\u043c \u043e\u043d\u043e \u043d\u0443\u0436\u043d\u043e \u0438 \u043f\u043e\u0447\u0435\u043c\u0443 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c baseline \u043a \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044e \u0441\u0442\u0430\u043b\u043e \u0432\u0430\u0436\u043d\u044b\u043c \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u043c \u043d\u0430 kaggle \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0430\u0445.   \n**baseline** \u0441\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u0430\u043a \u0448\u0430\u0431\u043b\u043e\u043d, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0441 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438 \u0447\u0442\u043e \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u041c\u041b \u043d\u0430\u0447\u0438\u043d\u043a\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e\u0439, \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430. \u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0431\u044b\u0441\u0442\u0440\u0435\u0435 \u043f\u0440\u0438\u0441\u0442\u0443\u043f\u0438\u0442\u044c \u043a \u0441\u0430\u043c\u043e\u043c\u0443 \u041c\u041b, \u0430 \u043d\u0435 \u0442\u0440\u0430\u0442\u0438\u0442\u044c \u0446\u0435\u043d\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f \u043d\u0430 \u0447\u0438\u0441\u0442\u043e \u0438\u043d\u0436\u0435\u043d\u0435\u0440\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \n\u0422\u0430\u043a\u0436\u0435 baseline \u044f\u0432\u043b\u044f\u0435\u0442\u044c\u0441\u044f \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u043e\u043f\u043e\u0440\u043d\u043e\u0439 \u0442\u043e\u0447\u043a\u043e\u0439 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435. \u0415\u0441\u043b\u0438 \u0442\u0432\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0445\u0443\u0436\u0435 baseline - \u0442\u044b \u044f\u0432\u043d\u043e \u0434\u0435\u043b\u0430\u0435\u0448\u044c \u0447\u0442\u043e-\u0442\u043e \u043d\u0435 \u0442\u043e \u0438 \u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u0443\u0442\u044c) \n\n\u0412 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0435 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u044f baseline \u0438\u0434\u0435\u0442 \u0441 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u043c\u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u043c\u0438 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438, \u0438 \u0441 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0435\u0439, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0442\u044c \u0434\u0430\u043b\u044c\u0448\u0435, \u0447\u0442\u043e\u0431\u044b \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.  \u0412\u043e\u043e\u0431\u0449\u0435 \u0433\u043e\u0442\u043e\u0432\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u044d\u0442\u043e \u0441\u043b\u043e\u0436\u043d\u043e \u043d\u0430\u0437\u0432\u0430\u0442\u044c, \u0442\u0430\u043a \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432\u0441\u0435\u0433\u043e 2 \u0441\u0430\u043c\u044b\u0445 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 (\u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f).","5c83e18c":"\u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u0432 \u0434\u0435\u0439\u0442\u0430\u0441\u0435\u0442\u0435 \u0443 \u043d\u0430\u0441 9 \u043a\u043e\u043b\u043e\u043d\u043e\u043a, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0442\u043e\u043b\u044c\u043a\u043e <b>Ranking<\/b> \u0438 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f <b>Rating<\/b> \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 - \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435.","99143327":"\u0414\u043b\u044f \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0435\u0441\u0442\u044c \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432:\n* Label Encoding\n* One-Hot Encoding\n* Target Encoding\n* Hashing\n\n\u0412\u044b\u0431\u043e\u0440 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438.\n\u041d\u0435 \u0431\u0443\u0434\u0435\u043c \u0441\u0435\u0439\u0447\u0430\u0441 \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u0433\u0440\u0443\u0436\u0430\u0442\u044c\u0441\u044f \u0432 \u044d\u0442\u0443 \u0442\u0435\u043c\u0430\u0442\u0438\u043a\u0443, \u0434\u0430\u0432\u0430\u0439\u0442\u0435 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043b\u0443\u0447\u0448\u0435 \u043f\u0440\u0438\u043c\u0435\u0440 \u0441 One-Hot Encoding:\n![](https:\/\/i.imgur.com\/mtimFxh.png)","4ee7246a":" ### \u043f\u0440\u0438\u0437\u043d\u0430\u043a \"ID_TA\"","b31c53c9":" ### \u043f\u0440\u0438\u0437\u043d\u0430\u043a Ranking","826fd7e6":"# Cleaning and Prepping Data\n\u041e\u0431\u044b\u0447\u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043a\u0443\u0447\u0443 \u043c\u0443\u0441\u043e\u0440\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0447\u0438\u0441\u0442\u0438\u0442\u044c, \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0438\u0432\u0435\u0441\u0442\u0438 \u0438\u0445 \u0432 \u043f\u0440\u0438\u0435\u043c\u043b\u0435\u043c\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442. \u0427\u0438\u0441\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u2014 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0439 \u044d\u0442\u0430\u043f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0447\u0442\u0438 \u043b\u044e\u0431\u043e\u0439 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438.   \n![](https:\/\/analyticsindiamag.com\/wp-content\/uploads\/2018\/01\/data-cleaning.png)","060dbdc0":"\u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0443 \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0434\u043b\u0438\u043d\u043e\u0439 8 \u0438 9, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0448\u0435.","0d5f68d2":"\u041d\u0430\u0439\u0434\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435","626d59ce":"# import","07e11426":"## 1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 NAN \n\u0423 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u0440\u0438\u0447\u0438\u043d\u044b, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0443\u0436\u043d\u043e \u043b\u0438\u0431\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c, \u043b\u0438\u0431\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0430\u0431\u043e\u0440\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e. \u041d\u043e \u0441 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u043c\u0438 \u043d\u0443\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, **\u0434\u0430\u0436\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u0430\u0436\u043d\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u043c!**   \n\u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u0435\u0440\u0435\u0434 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 NAN \u043b\u0443\u0447\u0448\u0435 \u0432\u044b\u043d\u0435\u0441\u0442\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u043b\u0438\u0447\u0438\u0438 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430 \u043a\u0430\u043a \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a ","1a8da97d":"\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441\u0442\u0430\u043b\u0430 \u0435\u0449\u0435 \u043d\u0438\u0436\u0435. ","5dd2e33f":"# DATA","fd33f405":"# Submission\n\u0415\u0441\u043b\u0438 \u0432\u0441\u0435 \u0443\u0441\u0442\u0440\u0430\u0435\u0432\u0430\u0435\u0442 - \u0433\u043e\u0442\u043e\u0432\u0438\u043c Submission \u043d\u0430 \u043a\u0430\u0433\u043b","fe611a08":"# Data Preprocessing","a788d92e":"### 2. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443 \u043d\u0430\u0441 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438.","20ea294c":"**\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \n\u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.**","440fcfc7":"### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430"}}