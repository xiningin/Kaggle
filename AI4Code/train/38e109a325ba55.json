{"cell_type":{"2c8f6e05":"code","0d613e11":"code","4a597c3c":"code","21390d96":"code","2f70104f":"code","629ad85d":"code","5a94cab0":"code","94769f61":"code","01248852":"code","83d76d0a":"code","a5aa9bb2":"code","04fe82ff":"code","dd9426be":"code","deb6ae11":"code","a467f0f4":"code","197c0ec3":"code","e84a7d34":"code","06c8890d":"code","bf3e6772":"code","cbb71645":"code","8e322c26":"code","14c21183":"code","6835c6d9":"code","cdc3d62b":"markdown","6f0c2aa9":"markdown","884f3114":"markdown"},"source":{"2c8f6e05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d613e11":"data = pd.read_csv('..\/input\/iris\/Iris.csv')","4a597c3c":"data.sample(10)\n#Iris-virginica\n#Iris-setosa\n#Iris-versicolor","21390d96":"data.shape","2f70104f":"data.info()","629ad85d":"data.describe()","5a94cab0":"X = data.drop(['Species','Id'],axis = 1)","94769f61":"import matplotlib.pyplot as plt\nimport seaborn as sns","01248852":"from sklearn.cluster import KMeans","83d76d0a":"km_3 = KMeans(n_clusters = 3).fit(X)\nX['Cluster'] = km_3.labels_","a5aa9bb2":"X.head()","04fe82ff":"data.head()","dd9426be":"plt.figure(figsize = (10,10))\nsns.scatterplot(x = X['PetalLengthCm'],y = X['PetalWidthCm'],hue = X['Cluster'],palette = 'bright')\nplt.title('KMeans with 3 clusters')\nplt.show()","deb6ae11":"plt.figure(figsize = (10,10))\nsns.scatterplot(x = data['PetalLengthCm'],y = data['PetalWidthCm'],hue = data['Species'],palette = 'bright')\nplt.title('Different Species')\nplt.show()","a467f0f4":"from sklearn.cluster import AgglomerativeClustering","197c0ec3":"AC = AgglomerativeClustering(n_clusters = 3,linkage = 'average').fit(X)\nX['Cluster_AC'] = AC.labels_","e84a7d34":"X.head()","06c8890d":"plt.figure(figsize = (10,10))\nsns.scatterplot(x = X['PetalLengthCm'],y = X['PetalWidthCm'],hue = X['Cluster_AC'],palette = 'bright')\nplt.title('Agglomerative Clustering with 3 clusters')\nplt.show()","bf3e6772":"plt.figure(figsize = (10,10))\nsns.scatterplot(x = data['PetalLengthCm'],y = data['PetalWidthCm'],hue = data['Species'],palette = 'bright')\nplt.title('Different Species')\nplt.show()","cbb71645":"from sklearn.cluster import DBSCAN ","8e322c26":"db= DBSCAN(eps=1, min_samples=6).fit(X)\nX['Cluster_DB'] = db.labels_","14c21183":"X.head()","6835c6d9":"plt.figure(figsize = (10,10))\nsns.scatterplot(x = X['PetalLengthCm'],y = X['PetalWidthCm'],hue = X['Cluster_DB'],palette = 'bright')\nplt.title('DBScan')\nplt.show()","cdc3d62b":"> #### DBScan","6f0c2aa9":"> #### KMeans Clustering","884f3114":"> #### Agglomerative Clustering"}}