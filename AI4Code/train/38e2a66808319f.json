{"cell_type":{"5a1a6d4a":"code","0ef90ed8":"code","5fbd8510":"code","14229c5f":"code","4ea2b611":"code","0215e7c6":"code","62d6d8b4":"code","372a48a4":"code","2197f647":"code","f1594217":"code","d1ec4f9d":"code","edd7c454":"code","63bee2df":"code","ee6d36da":"code","181987a1":"code","e12c2aa3":"code","4bff3109":"code","4d35bfc9":"code","953fc837":"markdown","f0a52573":"markdown","325704df":"markdown","a17ec627":"markdown","87dbbb92":"markdown","29195ba7":"markdown","752f2e8c":"markdown","ae8f425c":"markdown","406731a6":"markdown"},"source":{"5a1a6d4a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport geopandas as gpd\nfrom geopandas import GeoDataFrame\nfrom shapely.geometry import Point,Polygon\n\nimport folium\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster\n\nimport requests ","0ef90ed8":"URL = \"https:\/\/coronavirus-tracker-api.herokuapp.com\/v2\/locations\"","5fbd8510":"# sending get request and saving the response as response object \nr = requests.get(url = URL) \n\n# extracting data in json format \ndata = r.json() ","14229c5f":"coordintes_confirmed = []\nfor values in data['locations']:\n    country = values['country']\n    latitude = float((values['coordinates'])['latitude'])\n    longitude = float((values['coordinates'])['longitude'])\n    confirmed = int((values['latest'])['confirmed'])\n    deaths = int((values['latest'])['deaths'])\n    if(values['province'] != \"\"):\n        province = values['province']\n    else:\n        province = 'Nan'\n    coordintes_confirmed.append((country,latitude,longitude,province,confirmed,deaths))","4ea2b611":"world_frame = pd.DataFrame(coordintes_confirmed, columns=['Country', 'Latitude', 'Longitude', 'Province','Confirmed_Cases','Deaths'])","0215e7c6":"world_frame.head()","62d6d8b4":"world_frame_map = world_frame.copy()","372a48a4":"world_frame_map.head()","2197f647":"world_frame_map_copy = world_frame_map.copy()\ngeometry_copy = [Point(xy) for xy in zip(world_frame_map.Latitude, world_frame_map.Longitude)]\ncrs = {'init' : 'epsg:4326'}\ngdf_world_copy = GeoDataFrame(world_frame_map_copy, crs=crs, geometry=geometry_copy)","f1594217":"# save the GeoDataFrame\ngdf_world_copy.to_file(driver = 'ESRI Shapefile', filename= \"CoronaVirus.shp\")","d1ec4f9d":"world_frame_map=  world_frame_map[world_frame_map['Confirmed_Cases']>0]","edd7c454":"world_frame = world_frame[world_frame['Confirmed_Cases']>0]","63bee2df":"world_frame_map = world_frame_map.reindex(world_frame.index.repeat(world_frame.Confirmed_Cases))","ee6d36da":"geometry = [Point(xy) for xy in zip(world_frame_map.Latitude, world_frame_map.Longitude)]\nworld_frame_map = world_frame_map.drop(['Confirmed_Cases', 'Province', 'Deaths'], axis = 1)\ncrs = {'init' : 'epsg:4326'}\ngdf_world = GeoDataFrame(world_frame_map, crs=crs, geometry=geometry)","181987a1":"gdf_world_indexed = gdf_world.set_index('Country')","e12c2aa3":"plot_dict = gdf_world.Country.value_counts()\nplot_dict.head()","4bff3109":"#read world map shape file\nworld = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))","4d35bfc9":"# Create a base map\nm_2 = folium.Map(location=[25.0376,76.4563], tiles='openstreetmap', zoom_start=2)\n\n# Add a heatmap to the base map\nHeatMap(data=world_frame_map[['Latitude', 'Longitude']], radius=10).add_to(m_2)\n\n# Display the map\nm_2","953fc837":"**Preprocessing for Choropleth maps**","f0a52573":"**Count No of Confirmed in each Country**","325704df":"**Couting Country with no of confirmed Case**","a17ec627":"**Copy in other dataset for further analysis for Maps**","87dbbb92":"**Make Pandas DataFrame from the list**","29195ba7":"**Readint the datainto GeoDataFrame**","752f2e8c":"**World CoronaData**","ae8f425c":"**HeatMap World**","406731a6":"**Save a copy of final Dataframe with coordiantes**"}}