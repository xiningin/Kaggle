{"cell_type":{"231bad0f":"code","83255e7d":"code","816a08c0":"code","4b9e86df":"code","76a2c8d5":"code","37c674ce":"code","d608a017":"code","d3e32bff":"code","1089c56e":"code","b8aa2115":"code","98f2ef38":"code","4a561f6d":"code","bf06f5e3":"code","36fc7d71":"code","3d60a255":"code","428329f4":"code","25f57cdb":"code","714fc529":"code","a94f30ff":"code","62c14910":"code","dde82c33":"code","29a28369":"code","a5d265bb":"code","60d0ce64":"code","ce951dc6":"code","3a6c7a54":"code","a2dab640":"code","fc6c32a8":"code","f2d47532":"code","1bdb61d1":"code","84103e62":"code","75c352a1":"code","62785b48":"code","59bf37e0":"code","3d1ee512":"code","edb3661b":"code","32be7ddc":"code","255ecc60":"code","8f27780b":"code","8e190889":"code","d102a485":"code","e69ccea7":"code","5d4806a7":"code","24cb2b4a":"code","eb75d190":"code","9cfbf64c":"code","b50418f8":"code","1d859927":"code","d317ed83":"code","1458866e":"code","56e8258a":"code","08ced6b7":"code","a202d470":"code","0719fb5b":"code","9cd03864":"code","ab112eee":"code","83d51800":"markdown","c6f06aaf":"markdown","934c8c0b":"markdown","d8a541e6":"markdown","dc4e87da":"markdown"},"source":{"231bad0f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","83255e7d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","816a08c0":"data = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/train.csv')\nstore= pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\ntest= pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/test.csv')","4b9e86df":"print(data.shape)\nprint(store.shape)","76a2c8d5":"data.head()","37c674ce":"store.head()","d608a017":"data.info()\n# data.dtypes","d3e32bff":"data.describe(include='object')","1089c56e":"data.describe()[['Sales','Customers']]","b8aa2115":"data.describe()[['Sales','Customers']].loc['mean']","98f2ef38":"data.describe()[['Sales','Customers']].loc['min']","4a561f6d":"data.describe()[['Sales','Customers']].loc['max']","bf06f5e3":"data.Store.nunique()","36fc7d71":"data.head()\ndata.Store.value_counts().head(50).plot.bar()","3d60a255":"data.Store.value_counts().tail(50).plot.bar()","428329f4":"data.Store.value_counts()","25f57cdb":"data.DayOfWeek.value_counts()","714fc529":"data.Open.value_counts()","a94f30ff":"data.Promo.value_counts()","62c14910":"data['Date']=pd.to_datetime(data['Date'],format='%Y-%m-%d')\nstore_id= data.Store.unique()[0]\nprint(store_id)\nstore_rows=data[data['Store']==store_id]\nprint(store_rows.shape)\n# store_rows.resample('1D',on='Date')['Sales'].sum().plot.line(figsize=(14,4))","dde82c33":"# store_rows[store_rows['Sales']==0]","29a28369":"test['Date']=pd.to_datetime(test['Date'],format='%Y-%m-%d')\nstore_test_rows = test[test['Store']==store_id]\nstore_test_rows['Date'].min(),store_test_rows['Date'].max()","a5d265bb":"store_rows['Sales'].plot.hist()\n# it is slightly skewed.","60d0ce64":"data['Sales'].plot.hist()\n# it is slightly skewed.","ce951dc6":"store.head()","3a6c7a54":"# store.isna.sum()","a2dab640":"store_id=store[store['Store']==1].T","fc6c32a8":"store[~store['Promo2SinceYear'].isna()].iloc[0]","f2d47532":"# Method1\nstore = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\nstore['Promo2SinceWeek']= store['Promo2SinceWeek'].fillna(0)\nstore['Promo2SinceYear']= store['Promo2SinceYear'].fillna(store['Promo2SinceYear'].mode().iloc[0])\nstore['PromoInterval']= store['PromoInterval'].fillna(store['PromoInterval'].mode().iloc[0]) \n\nstore['CompetitionDistance']=store['CompetitionDistance'].fillna(store['CompetitionDistance'].max())\nstore['CompetitionOpenSinceMonth']= store['CompetitionOpenSinceMonth'].fillna(store['CompetitionOpenSinceMonth'].mode().iloc[0])\nstore['CompetitionOpenSinceYear']= store['CompetitionOpenSinceYear'].fillna(store['CompetitionOpenSinceYear'].mode().iloc[0])\nstore.isna().sum()\n      ","1bdb61d1":"data_merged = data.merge(store, on='Store',how='left')\nprint(data.shape)\nprint(data_merged.shape)\nprint(data_merged.isna().sum().sum()) #to cross check if there are any missing values","84103e62":"# encoding\n# 3 categorical column,1 date column, rest are numerical\n# data_merged.dtypes\ndata_merged['day']=data_merged['Date'].dt.day\ndata_merged['month']=data_merged['Date'].dt.month\ndata_merged['year']=data_merged['Date'].dt.year\n#data_merged['dayofweek']=data_merged['Date'].dt.strftime('%a')\n","75c352a1":"# Decision tress - label encoding should be used.\n# regression - one hot encoding must be used.","62785b48":"# data_merged.dtypes\n# StateHoliday,StoreType,Assortment,PromoInterval\ndata_merged['StateHoliday'].unique()\n# for creating dummy variables - label encoding is used\ndata_merged['StateHoliday']=data_merged['StateHoliday'].map({'0':0,0:0,'a':1,'b':2,'c':3})\ndata_merged['StateHoliday']=data_merged['StateHoliday'].astype(int)\ndata_merged","59bf37e0":"# encoding assorted\ndata_merged['Assortment']\n# for creating dummy variables - label encoding is used\ndata_merged['Assortment']=data_merged['Assortment'].map({'a':1,'b':2,'c':3})\ndata_merged['Assortment']=data_merged['Assortment'].astype(int)\ndata_merged","3d1ee512":"data_merged['StoreType'].unique()\ndata_merged['StoreType']=data_merged['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ndata_merged['StoreType']=data_merged['StoreType'].astype(int)\ndata_merged","edb3661b":"data_merged['PromoInterval'].unique()\nmap_promo = {'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ndata_merged['PromoInterval']=data_merged['PromoInterval'].map(map_promo)\ndata_merged","32be7ddc":"# Train and validate Split\nfeatures= data_merged.columns.drop(['Sales','Date'])\nfrom sklearn.model_selection import train_test_split\ntrain_x,validate_x,train_y,validate_y = train_test_split(data_merged[features],np.log(data_merged['Sales']+1),test_size=0.2,random_state=1)\ntrain_x.shape,validate_x.shape,train_y.shape,validate_y.shape","255ecc60":"# from sklearn.tree import DecisionTreeRegressor\n\n# model_dt = DecisionTreeRegressor(max_depth=20,random_state=1).fit(train_x,train_y)\n# validate_y_pred = model_dt.predict(validate_x)\n\nfrom sklearn.tree import DecisionTreeRegressor\nmodel_dt=DecisionTreeRegressor(max_depth=10,random_state=1).fit(train_x,train_y)\nvalidate_y_pred=model_dt.predict(validate_x)","8f27780b":"!pip install pydotplus","8e190889":"def draw_tree(model, columns):\n    import pydotplus\n    from sklearn.externals.six import StringIO\n    from IPython.display import Image\n    import os\n    from sklearn import tree\n    \n    graphviz_path = 'C:\\Program Files (x86)\\Graphviz2.38\/bin\/'\n    os.environ[\"PATH\"] += os.pathsep + graphviz_path\n\n    dot_data = StringIO()\n    tree.export_graphviz(model,\n                         out_file=dot_data,\n                         feature_names=columns)\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n    return Image(graph.create_png())","d102a485":"draw_tree(model_dt,features)","e69ccea7":"validate_y_pred = model_dt.predict(validate_x)\nfrom sklearn.metrics import mean_squared_error\nvalidate_y_inv = np.exp(validate_y) - 1\nvalidate_y_pred_inv = np.exp(validate_y_pred) - 1\nnp.sqrt(mean_squared_error(validate_y_inv , validate_y_pred_inv))","5d4806a7":"def ToWeight(y):\n    w = np.zeros(y.shape, dtype=float)\n    ind = y != 0\n    w[ind] = 1.\/(y[ind]**2)\n    return w\n\ndef rmspe(y, yhat):\n    w = ToWeight(y)\n    rmspe = np.sqrt(np.mean( w * (y - yhat)**2 ))\n    return rmspe\nvalidate_y_inv = np.exp(validate_y) - 1\nvalidate_y_pred_inv = np.exp(validate_y_pred) - 1\nnp.sqrt(mean_squared_error(validate_y_inv , validate_y_pred_inv))\nrmspe(validate_y_inv,validate_y_pred_inv)","24cb2b4a":"# submitting the train on test data set","eb75d190":"model_dt.feature_importances_","9cfbf64c":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nplt.barh(features,model_dt.feature_importances_)\npd.Series(model_dt.feature_importances_,index=features)","b50418f8":"from sklearn.model_selection import GridSearchCV\n\nparameters = {'max_depth':list(range(5,20))}\nbase_model = DecisionTreeRegressor()\ncv_model = GridSearchCV(base_model,param_grid =parameters,cv=5,return_train_score =True).fit(train_x,train_y)\n","1d859927":"cv_model.best_params_","d317ed83":"df_cv_results=pd.DataFrame(cv_model.cv_results_).sort_values(by='mean_test_score',ascending=False)[['param_max_depth','mean_test_score']]\ndf_cv_results.set_index('param_max_depth')['mean_test_score'].plot.line()","1458866e":"df_cv_results[df_cv_results['param_max_depth']==11].T","56e8258a":"stores_avg_cust = data.groupby(['Store'])[['Customers']].mean().reset_index().astype(int)\ntest_1 = test.merge(stores_avg_cust,on='Store',how='left')\ntest.shape,test_1.shape\ntest_merged = test_1.merge(store,on='Store',how='inner')\ntest_merged['Open']=test_merged['Open'].fillna(1)\ntest_merged['Date']=pd.to_datetime(test_merged[\"Date\"],format='%Y-%m-%d')\ntest_merged['day']=test_merged['Date'].dt.day\ntest_merged['month']=test_merged['Date'].dt.month\ntest_merged['year']=test_merged['Date'].dt.year\ntest_merged['StateHoliday']=test_merged['StateHoliday'].map({'0':0,'a':1})\ntest_merged['StateHoliday']=test_merged['StateHoliday'].astype(int)\ntest_merged['Assortment']=test_merged['Assortment'].map({'a':1,'b':2,'c':3})\ntest_merged['Assortment']=test_merged['Assortment'].astype(int)\ntest_merged['StoreType']=test_merged['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ntest_merged['StoreType']=test_merged['StoreType'].astype(int)\nmap_promo = {'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ntest_merged['PromoInterval']=test_merged['PromoInterval'].map(map_promo)\n","08ced6b7":"test_merged","a202d470":"test_pred = model_dt.predict(test_merged[features])\ntest_pred_inv = np.exp(test_pred) - 1","0719fb5b":"submission = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/sample_submission.csv')\nsubmission_predicted = pd.DataFrame({'Id':test['Id'],'Sales':test_pred_inv})\nsubmission_predicted.to_csv('submission.csv',index=False)\nsubmission_predicted.head()","9cd03864":"import xgboost as xgb","ab112eee":"dtrain = xgb.Dmatrix(train_x[features],train_y)\ndvalidate =xgb.Dmatrix(validate_x[features],validate_y)\n\nparams ={'max_depth':2,'eta':0.1,'objective':'reg:linear'}\nmodel_xg = xgb.train(param,dtrain,5)\npredict_y = ","83d51800":"# steps done in the current ml data\n\n* summary stats\n* understand your data\n* data preprocessing\n --missing value imputation\n --transformation\n --scaling\n --encoding\n* model fitting'\n* model summary\n* Prediction\n* Evaluation","c6f06aaf":"store_test_rows","934c8c0b":"****Granularity - Here it is the metadata of the branches with respect to promotional events events conducted overall****","d8a541e6":"****Granularity - One big brand has various number of branches and each rows is the data of that branch day wise****","dc4e87da":"****Store - It is categorical column hence min and max must not be done. we do value counts to check if every category has same amount of data********"}}