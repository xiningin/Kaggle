{"cell_type":{"41f0e5e4":"code","b7d4f287":"code","ebb1961c":"code","124ef3dc":"code","9504ff4a":"code","4b56c1cb":"code","dce9f2fd":"code","74b07a31":"code","5af861d5":"code","fcceff03":"code","50b05a54":"code","e246111a":"code","99a4c1cc":"code","638861aa":"code","49666a9f":"code","47aa5dd8":"code","a81825c1":"code","d7254623":"code","b68bd25d":"code","6beb9049":"markdown","523e00d9":"markdown","9b36f0c5":"markdown","66a1870a":"markdown","765747a1":"markdown","c045a11f":"markdown","1c9d72bd":"markdown"},"source":{"41f0e5e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nstyle.use('dark_background')\nimport warnings\nwarnings.filterwarnings('ignore')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b7d4f287":"data_dir='\/kaggle\/input\/digit-recognizer\/'","ebb1961c":"train=pd.read_csv(data_dir+'train.csv')\ntest=pd.read_csv(data_dir+'test.csv')","124ef3dc":"y_train=train['label']\nx_train=train.drop('label',axis=1)","9504ff4a":"x_train.shape","4b56c1cb":"def image_printer(i,df):\n    idx=i\n    data=df.iloc[idx].to_numpy().reshape(28,28).astype('uint8')\n    plt.imshow(data)","dce9f2fd":"plt.figure(figsize=(20,20))\nfor i in range(100):\n    plt.subplot(10,10,i+1)\n    image_printer(i,x_train)\n    ","74b07a31":"x_test=test","5af861d5":"import tensorflow as tf\nimport keras\nfrom keras import backend as k\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Activation, BatchNormalization\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils import plot_model\nfrom keras.callbacks import EarlyStopping","fcceff03":"img_cols=28\nimg_rows=28","50b05a54":"if k.image_data_format=='channels_first':\n    x_train=x_train.values.reshape(x_train.shape[0],1,img_rows,img_cols)\n    test=test.values.reshape(test.shape[0],1,img_rows,img_cols)\n    x_train=x_train\/255.0\n    test=test\/255.0\n    input_shape=(1,img_rows,img_cols)\nelse:\n    x_train=x_train.values.reshape(x_train.shape[0],img_rows,img_cols,1)\n    test=test.values.reshape(test.shape[0],img_rows,img_cols,1)\n    x_train=x_train\/255.0\n    test=test\/255.0\n    input_shape=(img_rows,img_cols,1)\n    \n    ","e246111a":"input_shape","99a4c1cc":"earlystopping=EarlyStopping(monitor='val_accuracy',mode='auto',patience=10,restore_best_weights=True)\nmodelacc=[]\nnfilters=[64,128,256]\nconv_layers=[1,2,3,4,5]\ndense_layers=[0,1,2,3,4]\ndropouts=[0.5]\nfor filters in nfilters:\n    for conl in conv_layers:\n        for densel in dense_layers:\n            for dp in dropouts:\n                    cnnsays='Feature Maps: {} Convlayers: {} Denselayers: {} Dropouts: {}'.format(filters,conl,densel,dp)\n                    print(cnnsays)\n                    model=Sequential()\n                    model.add(Conv2D(filters,(3,3),input_shape=input_shape))\n                    model.add(BatchNormalization())\n                    model.add(Activation(\"relu\"))\n                    model.add(MaxPooling2D(pool_size=(2,2)))\n                    model.add(Dropout(dp))\n                    for i in range(conl-1):\n                        model.add(Conv2D(filters,(3,3),padding='same'))\n                        model.add(BatchNormalization())\n                        model.add(Activation(\"relu\"))\n                        model.add(MaxPooling2D(pool_size=(2,2),padding='same'))\n                        model.add(Dropout(dp))\n                    \n                    model.add(Flatten())\n                    \n                    for i in range(densel):\n                        \n                        model.add(Dense(256))\n                        model.add(BatchNormalization())\n                        model.add(Activation(\"relu\"))\n                        model.add(Dropout(dp))\n                    \n                    model.add(Dense(10,activation='softmax'))\n                    model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\n                    EPOCHS=30\n                    history=model.fit(x_train,y_train,batch_size=32,epochs=EPOCHS,validation_split=0.2,callbacks=[earlystopping])\n                    modelacc.append([round(100*max(history.history['val_accuracy']),2),cnnsays])\n                 \n                \n                                    \n                \n                \n                \n                \n\n","638861aa":"print('Highest validation accuracy {}'.format(round(100*max(history.history['val_accuracy']),2)))","49666a9f":"modelacc.sort(reverse=True)\nmodelacc","47aa5dd8":"loss_train=history.history['loss']\nloss_val=history.history['val_loss']\nepochs=range(1,len(loss_val)+1)\nplt.plot(epochs,loss_train,'g',label='Trainning loss')\nplt.plot(epochs,loss_val,'b',label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","a81825c1":"acc_train=history.history['accuracy']\nacc_val=history.history['val_accuracy']\nepochs=range(1,len(acc_val)+1)\nplt.plot(epochs,acc_train,'g',label='Trainning Accuracy')\nplt.plot(epochs,acc_val,'b',label='Validation Accuracy')\nplt.title('Training and validation Accuracy')\nplt.xlabel('epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()","d7254623":"pred=model.predict([test])\nsoln=[]\nfor i in range(len(pred)):\n    soln.append(np.argmax(pred[i]))\n    ","b68bd25d":"final=pd.DataFrame()\nfinal['ImageId']=[i+1 for i in x_test.index]\nfinal['Label']=soln\nfinal.to_csv('newmnistcnn',index=False)","6beb9049":"# Importing necessary libraries","523e00d9":"# model loss","9b36f0c5":"# model accuracy","66a1870a":"# Lets predict","765747a1":"# Visualizing some sample points","c045a11f":"# Output","1c9d72bd":"# Reshaping and Normalizing the data"}}