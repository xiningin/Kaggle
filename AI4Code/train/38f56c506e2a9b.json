{"cell_type":{"e162cf55":"code","86e75d0d":"code","6c699a1a":"code","34ef7c1a":"code","3dd65de7":"code","5d9eabf3":"code","a1c4d308":"code","40a3894f":"code","cc7b540d":"code","4784bd6c":"code","2a4c0103":"code","8866a478":"code","a3bfa8ee":"code","0a61e13e":"code","b3a8bd33":"code","4ced7357":"code","e13155b8":"code","e74c6ecc":"code","4192cd7c":"code","9c719323":"code","c13a7125":"code","11f4867f":"code","9eec8558":"code","e2c2994f":"code","dae07abb":"code","8fb054e6":"code","e959a704":"code","7764b59e":"code","a14ba349":"code","cb09ce9d":"code","6ea9037f":"code","3084cd2c":"code","739b6c77":"markdown","1acd543b":"markdown","8e5138a1":"markdown","dbff46ab":"markdown","afdf49c4":"markdown","5c9e156b":"markdown","523a36b5":"markdown","09837128":"markdown","1b1a8c80":"markdown","ded5a21a":"markdown","fec7ebdb":"markdown"},"source":{"e162cf55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","86e75d0d":"\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, RandomizedSearchCV, GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix, accuracy_score, recall_score, precision_score, f1_score, plot_roc_curve\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6c699a1a":"df = pd.read_csv('..\/input\/water-quality\/water_potability.csv')","34ef7c1a":"df.head()","3dd65de7":"df.tail()","5d9eabf3":"df.shape","a1c4d308":"for i in df.columns:\n    print(i)","40a3894f":"df.info()","cc7b540d":"df.isnull().sum()","4784bd6c":"#fill mising values with mean score of each features respectively\ndf['ph'].fillna(df['ph'].mean(), inplace=True)\ndf['Sulfate'].fillna(df['Sulfate'].mean(), inplace=True)\ndf['Trihalomethanes'].fillna(df['Trihalomethanes'].mean(), inplace=True)","2a4c0103":"df.isnull().sum()","8866a478":"df.describe()","a3bfa8ee":"# How 'potability distributed throghout the dataset'\ndf['Potability'].value_counts()","0a61e13e":"# Visualize how 'potability distributed throghout the dataset'\nplt.figure(figsize=(10,8.5))\nsns.countplot(df['Potability'])\nplt.xticks(rotation='vertical',size=15)\nplt.show()","b3a8bd33":"# correlation between each variable\nplt.figure(figsize=(15,12))\nsns.heatmap(df.corr(),annot=True)\nplt.show()","4ced7357":"# How 'potability' correlated with each other features\nsns.pairplot(df, hue='Potability')","e13155b8":"# Each features Value Range\ndf.hist(figsize=(15,15))\nplt.show()","e74c6ecc":"x = df.drop(['Potability'],axis=1)\ny = df['Potability']","4192cd7c":"x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=0)","9c719323":"def models(mod,x_t,y_t,x_tes,y_tes,x_source,y_source):\n    \n    #Fit model\n    mod.fit(x_t,y_t)\n    \n    #Predict Model\n    pred = mod.predict(x_tes)\n    \n    #Accuracy Score\n    accuracy = accuracy_score(y_tes,pred)\n    \n    #Cross Validation Score\n    cross_validation = cross_val_score(mod,x_source,y_source,cv=5)\n    print(\"Accuracy Is : \",accuracy,\"%\")\n    \n    print(\"-------------------------------------------\")   \n    \n    print('Cross validations mean score ',round(np.mean(cross_validation)*100,4))\n    \n    print(\"-------------------------------------------\")\n    \n    #Confusion Metrix\n    print(confusion_matrix(y_tes, pred))\n    \n    print(\"-------------------------------------------\")    \n    \n    #Recall Score , Percision Score, F1 Score\n    print(\"Recall Score :\",recall_score(y_tes, pred, average='weighted'))\n    print(\"Percision Score :\",precision_score(y_tes, pred, average='weighted'))\n    print(\"F1 Score :\",f1_score(y_tes, pred, average='weighted'))\n    ","c13a7125":"model_1 = DecisionTreeClassifier(random_state=0,criterion='gini',max_depth=None)\nmodels(model_1,x_train,y_train,x_test,y_test,x,y )","11f4867f":"model_2 = RandomForestClassifier(n_estimators=170,random_state=0)\nmodels(model_2,x_train,y_train,x_test,y_test,x,y )","9eec8558":"\nmodel_3 = ExtraTreesClassifier(n_estimators= 200,random_state=0)\nmodels(model_3,x_train,y_train,x_test,y_test,x,y )\n","e2c2994f":"model_4 = XGBClassifier()\nmodels(model_4,x_train,y_train,x_test,y_test,x,y )","dae07abb":"model_5 = GaussianNB()\nmodels(model_5,x_train,y_train,x_test,y_test,x,y )\n","8fb054e6":"model_best = ExtraTreesClassifier(random_state=0)\nparameters={'n_estimators':[10,100,200,300,400,500,600,700,800,900,1000,1100],\n            'max_depth':[5,10,20,30,40,50,60,70,80,90,100],\n       'min_samples_leaf':[1,10,20,30]}\n\ncheck= RandomizedSearchCV(model_best, param_distributions=parameters,cv=5, random_state=0)","e959a704":"check.fit(x_train,y_train)","7764b59e":"check.best_estimator_","a14ba349":"best_mod_param = ExtraTreesClassifier(n_estimators= 200,max_depth=70,random_state=0)\nbest_mod_param.fit(x_train,y_train)\n","cb09ce9d":"best_predict = best_mod_param.predict(x_test)","6ea9037f":"df_best_predict = pd.DataFrame({'Actual': y_test, 'Predicted': best_predict})\ndf_best_predict.head(10)","3084cd2c":"acc_per = accuracy_score(y_test,best_predict)\nprint('Model Accuracy : '+ str(round(acc_per*100,1))+\" %\")","739b6c77":"## Model Bulding","1acd543b":"## Pre Proccessing","8e5138a1":"## Getting Know About Dataset","dbff46ab":"> # Parameter Tuning with Extra Trees Classifier","afdf49c4":"> # XG Boost Classifier","5c9e156b":"> # Extra Trees Classifier","523a36b5":"## Exploratory Data Analysis","09837128":"> # Decision Tree Classifier","1b1a8c80":"> # Select Best Parameters & Build The Modle","ded5a21a":"## Import Libraries ","fec7ebdb":"> # Random Forest Classifier"}}