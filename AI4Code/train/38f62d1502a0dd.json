{"cell_type":{"b716b361":"code","d9d58cd1":"code","ef930085":"code","2c9d8b44":"code","597c0af8":"code","a7077aff":"code","4a90413d":"code","72114177":"code","2ced1b9d":"code","a55b8e31":"code","488e639b":"code","ad6735ab":"code","faac9adf":"code","e26f4cf0":"code","5a2dce81":"code","7f8c3602":"markdown","c168fdad":"markdown","97ba6f22":"markdown","7d4a5972":"markdown","5cef506c":"markdown","834d157a":"markdown"},"source":{"b716b361":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\nimport seaborn as sns\n \n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \nstyle.use('fivethirtyeight')\nsns.set(style='whitegrid',color_codes=True)\n\n#model selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix,roc_curve,roc_auc_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\n\n#preprocess.\nfrom keras.preprocessing.image import ImageDataGenerator\n\n#dl libraraies\nfrom keras import backend as K\nfrom keras import regularizers\nfrom keras.models import Sequential\nfrom keras.models import Model\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam,SGD,Adagrad,Adadelta,RMSprop\nfrom keras.utils import to_categorical\nfrom keras.callbacks import ReduceLROnPlateau\n\n# specifically for cnn\nfrom keras.layers import Dropout, Flatten,Activation\nfrom keras.layers import Conv2D, MaxPooling2D, BatchNormalization\nfrom keras.layers import InputLayer\n\nfrom keras.applications.resnet import ResNet50\n \nimport tensorflow as tf\nimport random as rn\n\n# specifically for manipulating zipped images and getting numpy arrays of pixel values of images.\nimport cv2                  \nimport numpy as np  \nfrom tqdm import tqdm\nimport os                   \nfrom random import shuffle  \nfrom zipfile import ZipFile\nfrom PIL import Image\n\n#TL pecific modules\n#from keras.applications.resnet50 import ResNet50\n#from keras.applications.vgg16 import VGG16\n!pip install keras_vggface\nfrom keras_vggface.vggface import VGGFace","d9d58cd1":"os.listdir('..\/input\/humain\/dataset')","ef930085":"def assign_label(img,label):\n    return label","2c9d8b44":"def make_train_data(label,DIR):\n    for img in tqdm(os.listdir(DIR)):\n        path = os.path.join(DIR,img)\n        img = cv2.imread(path,cv2.IMREAD_COLOR)\n        img = cv2.resize(img, (IMG_SIZE,IMG_SIZE))\n        \n        X.append(np.array(img))\n        Z.append(str(label))","597c0af8":"base_model=VGGFace(include_top=False, weights=None,input_shape=(150,150,3), pooling='max')\nweights_path='..\/input\/humain\/dataset\/vgg_face_weights.h5' # 16 to 13 layers\nbase_model.load_weights(weights_path,by_name='True') \nbase_model.summary()","a7077aff":"X=[]\nZ=[]\nIMG_SIZE=150\nGENDER_MALE_DIR='..\/input\/humain\/dataset\/gender\/G_Male'\nGENDER_FEMALE_DIR='..\/input\/humain\/dataset\/gender\/G_Female'\n\nmake_train_data('Male',GENDER_MALE_DIR)\nmake_train_data('Female',GENDER_FEMALE_DIR)","4a90413d":"fig,ax=plt.subplots(2,5)\nplt.subplots_adjust(bottom=0.3, top=0.7, hspace=0)\nfig.set_size_inches(10,10)\n\nfor i in range(2):\n    for j in range (5):\n        l=rn.randint(0,len(Z))\n        ax[i,j].imshow(X[l][:,:,::-1])\n        ax[i,j].set_title('Gender: '+Z[l])\n        ax[i,j].set_aspect('equal')","72114177":"le=LabelEncoder()\nY=le.fit_transform(Z)\nY=to_categorical(Y,2)\nX=np.array(X)\n#X=X\/255\n\nx_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.1,random_state=1337)\n\nnp.random.seed(42)\nrn.seed(42)\ntf.set_random_seed(42)","2ced1b9d":"print(x_train.shape)","a55b8e31":"gendermodel=Sequential()\ngendermodel.add(base_model)\n#gendermodel.add(Dropout(0.4))\ngendermodel.add(Dense(512,activation='relu'))\n#gendermodel.add(Dropout(0.15))\ngendermodel.add(Dense(256,activation='relu'))\n#gendermodel.add(Dropout(0.3))\ngendermodel.add(Dense(128,activation='relu'))\ngendermodel.add(Dense(64,activation='relu'))\ngendermodel.add(Dense(2,activation='softmax'))","488e639b":"datagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=True,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\n\ndatagen.fit(x_train)","ad6735ab":"epochs=100\nbatch_size=32\nred_lr=ReduceLROnPlateau(monitor='val_acc', factor=0.1, min_delta=0.0001, patience=2, verbose=1)\n\nbase_model.trainable=True # setting the VGG model to be trainable.\ngendermodel.summary()","faac9adf":"gendermodel.compile(optimizer=Adam(lr=1e-5),loss='categorical_crossentropy',metrics=['accuracy'])\n\nHistory = gendermodel.fit_generator(datagen.flow(x_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (x_test,y_test),\n                              verbose = 1, steps_per_epoch=x_train.shape[0] \/\/ batch_size)\n\ngendermodel.save('..\/working\/gendermodel.h5')","e26f4cf0":"plt.plot(History.history['accuracy'])\nplt.plot(History.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","5a2dce81":"plt.plot(History.history['loss'])\nplt.plot(History.history['val_loss'])\nplt.title('Model Loss')\nplt.ylabel('Loss')\nplt.xlabel('Epochs')\nplt.legend(['train', 'test'])\nplt.show()","7f8c3602":"### **Data Augmentation **","c168fdad":"### Importing Libraries","97ba6f22":"### **Importing Pre-trained Model VGG Face for Transfer Learning**","7d4a5972":"### Training Model","5cef506c":"### Model Architechture","834d157a":"## Gender Model\n\nThere will be 4 seperate models trained to predict age, gender, ethnicity and emotion.\n\nTraining Approach : Transfer learning on a pre-trained vggface convolutional neural network."}}