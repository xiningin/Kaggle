{"cell_type":{"d6734bac":"code","41607401":"code","c4bdf6b8":"code","043f4138":"code","65770839":"code","f5e79471":"code","a03fe2b4":"code","8958af68":"code","f7b17dca":"code","ea261aeb":"code","373eac82":"code","ecf1eef5":"code","e8b76327":"code","70e54782":"markdown","d16e36ed":"markdown","fe3888c9":"markdown"},"source":{"d6734bac":"from keras.datasets import mnist\nimport  matplotlib.pyplot as plt\n(x_train, y_train), (x_test, y_test) = mnist.load_data()","41607401":"plt.imshow(x_train[0])","c4bdf6b8":"y_train[0]","043f4138":"import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.utils import np_utils","65770839":"x_test.shape","f5e79471":"x_train.shape","a03fe2b4":"x_train=x_train.reshape(60000, 28*28)\nx_test=x_test.reshape(10000, 28*28)","8958af68":"x_train = x_train \/ 255\nx_test = x_test \/ 255","f7b17dca":"y_train = np_utils.to_categorical(y_train)\ny_test = np_utils.to_categorical(y_test)","ea261aeb":"y_test.shape","373eac82":"def baseline_model():\n    model = Sequential()\n    model.add(Dense(784, input_dim=28*28, activation='relu'))\n    model.add(Dense(250,  activation='relu'))\n    model.add(Dropout(0.2))\n    model.add(Dense(10,  activation='softmax'))\n    \n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics='accuracy')\n    return model","ecf1eef5":"model = baseline_model()","e8b76327":"model.fit(x_train, y_train, validation_data=(x_test, y_test), epochs=10, batch_size=32)","70e54782":"**\u062a\u0628\u062f\u06cc\u0644 \u062a\u0646\u0633\u0648\u0631 \u0628\u0647 \u0628\u0631\u062f\u0627\u0631(\u0633\u0647 \u0628\u0639\u062f\u06cc \u0628\u0647 \u062f\u0648\u0628\u0639\u062f\u06cc)**","d16e36ed":"# one hot encode\n\u0627\u06cc\u0646\u06a9\u0627\u0631 \u0628\u0631\u0627\u06cc \u062a\u0628\u062f\u06cc\u0644 \u0645\u0642\u0627\u062f\u06cc\u0631 \u0648\u06cc\u0698\u06af\u06cc \u0647\u062f\u0641 \u0628\u0647 \u0645\u0642\u062f\u0627\u0631 \u0647\u0627\u06cc \u06a9\u062a\u06af\u0648\u0631\u06cc\u06a9\u0627\u0644 \u0627\u0633\u062a. \u0645\u062b\u0644\u0627 \u0627\u06af\u0631 \u0647\u062f\u0641 \u062a\u0634\u062e\u06cc\u0635 \u0633\u06af \u06cc\u0627 \u06af\u0631\u0628\u0647 \u0628\u0648\u062f\u0646 \u0639\u06a9\u0633 \u0647\u0627 \u0628\u0627\u0634\u062f\u060c \u0628\u062c\u0627\u06cc \u0633\u06af \u0648 \u06af\u0631\u0628\u0647 0 \u0648 1 \u0642\u0631\u0627\u0631 \u0645\u06cc\u062f\u0647\u06cc\u0645.\n\u062f\u0631 \u0627\u06cc\u0646 \u062f\u06cc\u062a\u0627\u0633\u062a \u0648\u06cc\u0698\u06af\u06cc \u0647\u062f\u0641 \u0634\u0627\u0645\u0644 \u0627\u0639\u062f\u0627\u062f 0 \u0648 1 \u0648 2 \u0648 3 \u0648 4 \u0648 5 \u0648 6 \u0648 7 \u0648 8 \u0648 9 \u0645\u06cc\u0628\u0627\u0634\u062f","fe3888c9":"**\u0646\u0631\u0645\u0627\u0644\u0633\u0627\u0632\u06cc \u0648\u0631\u0648\u062f\u06cc \u0647\u0627 \u0627\u0632 \u0628\u0627\u0632\u0647 0 \u062a\u0627 255 \u0628\u0647 0 \u062a\u0627 1**"}}