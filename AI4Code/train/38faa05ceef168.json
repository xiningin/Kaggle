{"cell_type":{"cfd2920f":"code","b54eb0af":"code","00f6c1ce":"code","bc2fe5e3":"code","4bacdf3b":"code","de08baa0":"code","9f43349a":"code","f6c44477":"code","61455eff":"code","d1dfe9a7":"code","d9c9cbec":"code","768209ba":"code","30abac74":"code","4e4beba6":"code","553e10e9":"code","bd67a7e9":"code","0f52835f":"code","18eef75d":"code","b46d9ead":"code","fb9d7476":"code","366530d8":"code","8f93a70e":"code","6e44f03c":"code","554bc804":"code","cd4621cb":"code","58c37fa5":"code","4c59f627":"code","0a57110f":"code","ad26ecde":"code","6df96fe4":"markdown","82407964":"markdown","c385a43b":"markdown","013f0d1c":"markdown","6f6963b4":"markdown","bcf3ba5d":"markdown","fcb4167e":"markdown","3bda267f":"markdown","e88cddcb":"markdown","f377860b":"markdown"},"source":{"cfd2920f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sb\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b54eb0af":"url_train = '..\/input\/train.csv'\ntitanic = pd.read_csv(url_train)\ntitanic.head()","00f6c1ce":"#Checking if our target variable is binary or not\n#sb.countplot(x='Survived',data=titanic)","bc2fe5e3":"#Checking Null values\ntitanic.isnull().sum()","4bacdf3b":"titanic_data = titanic.drop(['PassengerId','Name','Ticket'],1)\ntitanic_data.head()","de08baa0":"sb.boxplot(x='Pclass',y='Age',data=titanic_data)","9f43349a":"def age_approx(cols):\n    age = cols[0]\n    pclass = cols[1]\n    if pd.isnull(age):\n        if pclass == 1:\n            return 37\n        elif pclass == 2:\n            return 29\n        else:\n            return 24\n    else:\n        return age","f6c44477":"titanic_data['Age'] = titanic_data[['Age', 'Pclass']].apply(age_approx, axis=1)\ntitanic_data.isnull().sum()","61455eff":"def cabin_approx(cols):\n    cabin = cols[0]\n    pclass = cols[1]\n    if pd.isnull(cabin):\n        return 0\n    elif cabin[0] == ('C' or 'B'):\n        return 3\n    elif cabin[0] == ('A' or 'D' or 'E' or 'T'):\n        return 2\n    elif cabin[0] == ('F' or 'G'):\n        return 1\n    else:\n        return 0","d1dfe9a7":"titanic_data['Cabin'] = titanic_data[['Cabin', 'Pclass']].apply(cabin_approx, axis=1)\n#titanic_data.isnull().sum()\nsb.boxplot(x='Cabin',y='Fare',data=titanic_data)","d9c9cbec":"titanic_data.dropna(inplace=True)\ntitanic_data.isnull().sum()","768209ba":"gender = pd.get_dummies(titanic_data['Sex'],drop_first=True)\ngender.head()","30abac74":"embark_location = pd.get_dummies(titanic_data['Embarked'],drop_first=True)\nembark_location.head()","4e4beba6":"titanic_data.drop(['Sex','Embarked'],axis=1,inplace=True)\ntitanic_data.head()","553e10e9":"titanic_dmy = pd.concat([titanic_data, gender, embark_location],axis=1)\ntitanic_dmy.tail()","bd67a7e9":"#Checking for correlation between variables.\nsb.heatmap(titanic_dmy.corr(),square=True)\n#print(titanic_dmy.corr())","0f52835f":"X = titanic_dmy.ix[:,(1,2,3,4,5,6,7,8,9)].values\ny = titanic_dmy.ix[:,0].values\nfrom sklearn.cross_validation import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.1, random_state=2)","18eef75d":"from sklearn.ensemble import RandomForestClassifier\n#from sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.ensemble import VotingClassifier\n\nclf1 = SVC(kernel='linear',C=1.0,random_state=3)\nclf2 = XGBClassifier(random_state=3)\nclf3 = RandomForestClassifier(n_estimators=30, max_depth=10, random_state=300)\neclf = VotingClassifier(estimators=[('clf1', clf1), ('clf2', clf2),('clf3',clf3)], voting='hard')\n\neclf.fit(X_train, y_train)\ny_pred = eclf.predict(X_test)\nprint(confusion_matrix(y_test, y_pred))\nprint(eclf.score(X_test, y_test))","b46d9ead":"url = '..\/input\/test.csv'\ntest = pd.read_csv(url)\ntest.head()","fb9d7476":"test.isnull().sum()","366530d8":"test.describe()","8f93a70e":"sb.set(rc={'figure.figsize':(11.7,8.27)})\nax = sb.boxplot(x='Pclass',y='Fare',data=test,width=0.9)","6e44f03c":"def fare_approx(cols):\n    fare = cols[0]\n    pclass = cols[1]\n    if pd.isnull(fare):\n        if pclass == 1:\n            return 55\n        elif pclass == 2:\n            return 20\n        else:\n            return 10\n    else:\n        return fare","554bc804":"test_data = test.drop(['Name','Ticket'],1)\ntest_data['Age'] = test_data[['Age', 'Pclass']].apply(age_approx, axis=1)\ntest_data['Fare'] = test_data[['Fare','Pclass']].apply(fare_approx, axis=1)\ntest_data['Cabin'] = test_data[['Cabin','Pclass']].apply(cabin_approx, axis=1)\n#\ngender_test = pd.get_dummies(test_data['Sex'],drop_first=True)\nembark_location_test = pd.get_dummies(test_data['Embarked'],drop_first=True)\ntest_data.drop(['Sex','Embarked'],axis=1,inplace=True)\ntest_dmy = pd.concat([test_data, gender_test, embark_location_test],axis=1)\n\n#test_dmy.describe()\ntest_data.dropna(inplace=True)\ntest_dmy.isnull().sum()","cd4621cb":"test_dmy.head()","58c37fa5":"X_competition = test_dmy.ix[:,(1,2,3,4,5,6,7,8,9)].values","4c59f627":"y_comp = eclf.predict(X_competition)","0a57110f":"submission = pd.DataFrame({'PassengerId':test_data['PassengerId'],'Survived':y_comp})\nsubmission.head()","ad26ecde":"filename = 'Titanic Predictions 1.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","6df96fe4":"Dropping PassengerId, Name and Ticket because they are unique.\nDropping Cabin because of too many null values.","82407964":"Getting dummy variables from categorical ones.","c385a43b":"**Cleaning up the test data:**\nDropping variables, approximating age and fare, dummy variables.","013f0d1c":"There are two null values in Embarked, we can just drop them.","6f6963b4":"**Now taking in Competition Data.**","bcf3ba5d":"There are 86 null values in Age, so we approximate them like we did earlier.\nThere are 327 null values in Cabin, so we drop it altogether.\nThere is 1 null value in Fare, so we approximate it according to the median of each class of the null position.","fcb4167e":"The train test split is done for parameter tuning.\nWe now deploy the models.","3bda267f":"**Prediction for Competition Data**","e88cddcb":"If Passenger belongs to Pclass 3, age assigned is 24, if 2, age is assigned 29, if 1 then 37.","f377860b":"Now need to take care of the missing data for Age variable. Need to approximate- one way, to take mean age for all the missing values.\nOr, find if age is related to Pclass, and assign respective means."}}