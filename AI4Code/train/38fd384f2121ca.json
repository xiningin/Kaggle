{"cell_type":{"c310c945":"code","bbd2e4e7":"code","8b7d3868":"code","ffff1d2e":"code","2bcaee13":"code","6967c2e9":"code","0f653077":"code","309ba6ec":"code","53307743":"code","6a8b4a7e":"code","4d4133e9":"code","46387369":"code","248a56cd":"code","7abc0c63":"code","64575e20":"code","9a3a035e":"markdown"},"source":{"c310c945":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor","bbd2e4e7":"path = '..\/input\/house-prices-advanced-regression-techniques'\ndf_train = pd.read_csv(f'{path}\/train.csv')\ndf_test  = pd.read_csv(f'{path}\/test.csv')","8b7d3868":"# find the column names which have quantitative data\nquantitative_columns = [column for column in df_train.columns \n                        if df_train.dtypes[column] in ['int64', 'float64']]\n\n# remove the price and id\nquantitative_columns.remove('SalePrice')\nquantitative_columns.remove('Id')","ffff1d2e":"# extract test ids for later\ntest_id = df_test['Id']\n\n# remove ids from both data sets\ndf_train.drop(['Id'], axis=1, inplace=True)\ndf_test.drop(['Id'], axis=1, inplace=True)","2bcaee13":"# select only the quantitative columns\ntrain_input = df_train[quantitative_columns].values\ntest_input  = df_test[quantitative_columns].values","6967c2e9":"# standardise the inputs (zero mean and unit variance)\nscaler = StandardScaler().fit(train_input)\n\ntrain_input = scaler.transform(train_input)\ntest_input  = scaler.transform(test_input)","0f653077":"# select the output\ntrain_output = df_train.SalePrice.values\nplt.hist(train_output);","309ba6ec":"# remove skewness in the output (log)\ntrain_output = np.log1p(train_output)\nplt.hist(train_output);","53307743":"# create the model\nmodel = XGBRegressor()","6a8b4a7e":"# train the model\nmodel = model.fit(train_input, train_output)","4d4133e9":"# test the model on the training data\n# (using root mean squared error, RMSE, as the metric)\nnp.sqrt(mean_squared_error(\n    train_output,\n    model.predict(train_input)))","46387369":"# predict the outputs for the test data\npredictions = model.predict(test_input)","248a56cd":"# transform the predictions back from a logscale\npredictions = np.expm1(predictions)","7abc0c63":"# create submission dataframe\ndf_predictions = pd.DataFrame.from_dict({\n    'Id': test_id,\n    'SalePrice': predictions\n})\ndf_predictions","64575e20":"# submit dataframe\ndf_predictions.to_csv('submission.csv', index=False)","9a3a035e":"#### A simple guide to get started with House Prices (using XGBoost)  \n\nThis sets you up with a quick and basic model that does okay (achieves a RMSE on the test data of approximately 0.15).  \n\nFrom here you can try and improve the predictions (e.g., exploring the data, adjusting the model, trying different models, analysing the errors).\n\nA lot of good advice can be found in other notebooks."}}