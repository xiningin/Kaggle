{"cell_type":{"caab1ec0":"code","21d3a279":"code","64d9be1b":"code","e652528b":"code","0301f378":"code","cede64fe":"code","d5a0f951":"code","0d05bdaf":"markdown","d6fe0d7f":"markdown","c613ce06":"markdown","8745457f":"markdown","ed4b82fd":"markdown"},"source":{"caab1ec0":"import numpy as np\nimport pandas as pd\nimport os\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\ndf_animal = pd.read_csv('\/kaggle\/input\/massachusetts-arbovirus-survalliance-data-201419\/animal_cases.csv')\ndf_animal.dropna(inplace=True)\ndf_human = pd.read_csv('\/kaggle\/input\/massachusetts-arbovirus-survalliance-data-201419\/human_arbovirus_cases.csv')\ndf_mosquito = pd.read_csv('\/kaggle\/input\/massachusetts-arbovirus-survalliance-data-201419\/mosquito_totals.csv')\ndf_testing = pd.read_csv('\/kaggle\/input\/massachusetts-arbovirus-survalliance-data-201419\/total_tests_per_year.csv')","21d3a279":"from folium import plugins\nfrom geopy.geocoders import Nominatim\n\ngeolocator = Nominatim(user_agent=\"jeff_braun\")\n\nfor i in range(df_human.shape[0]):\n    town = df_human.loc[i, 'County']\n    loc = town + ' County, Massachusetts, United States of America'\n    location = geolocator.geocode(loc)\n    df_human.loc[i, 'Latitude'] = location.latitude\n    df_human.loc[i, 'Longitude'] = location.longitude\n    \n\nfor i in range(df_animal.shape[0]):\n    town = df_animal.loc[i, 'Town or City']\n    loc = town + ', Massachusetts, United States of America'\n    location = geolocator.geocode(loc)\n    df_animal.loc[i, 'Latitude'] = location.latitude\n    df_animal.loc[i, 'Longitude'] = location.longitude\n","64d9be1b":"from branca.element import Template, MacroElement\n\n# Thank you to the author of this jupyter notebook for the legend code:\n# https:\/\/nbviewer.jupyter.org\/gist\/talbertc-usgs\/18f8901fc98f109f2b71156cf3ac81cd\n\ntemplate = \"\"\"\n{% macro html(this, kwargs) %}\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery UI Draggable - Default functionality<\/title>\n  <link rel=\"stylesheet\" href=\"\/\/code.jquery.com\/ui\/1.12.1\/themes\/base\/jquery-ui.css\">\n\n  <script src=\"https:\/\/code.jquery.com\/jquery-1.12.4.js\"><\/script>\n  <script src=\"https:\/\/code.jquery.com\/ui\/1.12.1\/jquery-ui.js\"><\/script>\n  \n  <script>\n  $( function() {\n    $( \"#maplegend\" ).draggable({\n                    start: function (event, ui) {\n                        $(this).css({\n                            right: \"auto\",\n                            top: \"auto\",\n                            bottom: \"auto\"\n                        });\n                    }\n                });\n});\n\n  <\/script>\n<\/head>\n<body>\n\n \n<div id='maplegend' class='maplegend' \n    style='position: absolute; z-index:9999; border:2px solid grey; background-color:rgba(255, 255, 255, 0.8);\n     border-radius:6px; padding: 10px; font-size:14px; right: 20px; bottom: 20px;'>\n     \n<div class='legend-title'>Legend<\/div>\n<div class='legend-scale'>\n  <ul class='legend-labels'>\n    <li><span style='background:red;opacity:1;'><\/span>Human<\/li>\n    <li><span style='background:green;opacity:1;'><\/span>Animal<\/li>\n    <li><span style='background:blue;opacity:0.2;'><\/span>Mosquito<\/li>\n\n  <\/ul>\n<\/div>\n<\/div>\n \n<\/body>\n<\/html>\n\n<style type='text\/css'>\n  .maplegend .legend-title {\n    text-align: left;\n    margin-bottom: 5px;\n    font-weight: bold;\n    font-size: 90%;\n    }\n  .maplegend .legend-scale ul {\n    margin: 0;\n    margin-bottom: 5px;\n    padding: 0;\n    float: left;\n    list-style: none;\n    }\n  .maplegend .legend-scale ul li {\n    font-size: 80%;\n    list-style: none;\n    margin-left: 0;\n    line-height: 18px;\n    margin-bottom: 2px;\n    }\n  .maplegend ul.legend-labels li span {\n    display: block;\n    float: left;\n    height: 16px;\n    width: 30px;\n    margin-right: 5px;\n    margin-left: 0;\n    border: 1px solid #999;\n    }\n  .maplegend .legend-source {\n    font-size: 80%;\n    color: #777;\n    clear: both;\n    }\n  .maplegend a {\n    color: #777;\n    }\n<\/style>\n{% endmacro %}\"\"\"\n\nimport folium\n\nmass_map = folium.Map([42.368002, -71.922023], zoom_start=8)\n\nmap_title = 'Arbovirus Surveillance (2014-2019)'\ntitle_html = '''\n             <h3 align=\"center\" style=\"font-size:16px\"><b>{}<\/b><\/h3>\n             '''.format(map_title) \nmass_map.get_root().html.add_child(folium.Element(title_html))\n\nhuman_color = 'red'\nanimal_color = 'green'\n\nfor i in range(df_human.shape[0]):\n    folium.CircleMarker([df_human.loc[i, 'Latitude'], df_human.loc[i, 'Longitude']],\n                        radius=15,\n                        popup='Onset Date: ' + df_human.loc[i, 'Onset Date'],\n                        fill_color = human_color,\n                        line_color = human_color,\n                        fill_opacity = 1,\n                        ).add_to(mass_map)\n    \nfor i in range(df_animal.shape[0]):\n    folium.CircleMarker([df_animal.loc[i, 'Latitude'], df_animal.loc[i, 'Longitude']],\n                        radius=15,\n                        popup='Onset Year: ' + str(df_animal.loc[i, 'Onset Year']),\n                        fill_color= animal_color,\n                        fill_opacity = 1,\n                        ).add_to(mass_map)\n\nmacro = MacroElement()\nmacro._template = Template(template)\n\nmass_map.get_root().add_child(macro)\n\nmass_map","e652528b":"from tqdm.notebook import tqdm\n\ntown_list = list(df_mosquito.Town.unique())\ntown_dict = {}\n\nfor town in town_list:\n    loc = town + ', Massachusetts, United States of America'\n    location = geolocator.geocode(loc)\n    lat = location.latitude\n    long = location.longitude\n    town_dict[town] = [lat, long]\n    \ndef get_lat(town):\n    return town_dict[town][0]\n\ndef get_long(town):\n    return town_dict[town][1]\n\ndf_mosquito['Latitude'] = df_mosquito.Town.apply(lambda x: get_lat(x))\ndf_mosquito['Longitude'] = df_mosquito.Town.apply(lambda x: get_long(x))","0301f378":"town_counts = dict(df_mosquito.Town.value_counts())\nmosquito_color = 'blue'\n\nfor town in town_list:\n    loc = town_dict[town]\n    num = float(town_counts[town])\n    label = str(int(num)) + ' mosquitoes'\n    folium.CircleMarker([loc[0], loc[1]],\n                        radius = num\/4,\n                        fill_color = mosquito_color,\n                        fill_opacity = 0.2,\n                        popup = label,\n                        ).add_to(mass_map)\n\nmass_map","cede64fe":"template = \"\"\"\n{% macro html(this, kwargs) %}\n\n<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>jQuery UI Draggable - Default functionality<\/title>\n  <link rel=\"stylesheet\" href=\"\/\/code.jquery.com\/ui\/1.12.1\/themes\/base\/jquery-ui.css\">\n\n  <script src=\"https:\/\/code.jquery.com\/jquery-1.12.4.js\"><\/script>\n  <script src=\"https:\/\/code.jquery.com\/ui\/1.12.1\/jquery-ui.js\"><\/script>\n  \n  <script>\n  $( function() {\n    $( \"#maplegend\" ).draggable({\n                    start: function (event, ui) {\n                        $(this).css({\n                            right: \"auto\",\n                            top: \"auto\",\n                            bottom: \"auto\"\n                        });\n                    }\n                });\n});\n\n  <\/script>\n<\/head>\n<body>   \n<div id='maplegend' class='maplegend' \n    style='position: absolute; z-index:9999; border:2px solid grey; background-color:rgba(255, 255, 255, 0.8);\n     border-radius:6px; padding: 10px; font-size:14px; right: 20px; bottom: 20px;'>\n     \n<div class='legend-title'>Legend<\/div>\n<div class='legend-scale'>\n  <ul class='legend-labels'>\n    <li><span style='background:blue;opacity:0.2;'><\/span>Mosquito<\/li>\n\n  <\/ul>\n<\/div>\n<\/div>\n \n<\/body>\n<\/html>\n\n<style type='text\/css'>\n  .maplegend .legend-title {\n    text-align: left;\n    margin-bottom: 5px;\n    font-weight: bold;\n    font-size: 90%;\n    }\n  .maplegend .legend-scale ul {\n    margin: 0;\n    margin-bottom: 5px;\n    padding: 0;\n    float: left;\n    list-style: none;\n    }\n  .maplegend .legend-scale ul li {\n    font-size: 80%;\n    list-style: none;\n    margin-left: 0;\n    line-height: 18px;\n    margin-bottom: 2px;\n    }\n  .maplegend ul.legend-labels li span {\n    display: block;\n    float: left;\n    height: 16px;\n    width: 30px;\n    margin-right: 5px;\n    margin-left: 0;\n    border: 1px solid #999;\n    }\n  .maplegend .legend-source {\n    font-size: 80%;\n    color: #777;\n    clear: both;\n    }\n  .maplegend a {\n    color: #777;\n    }\n<\/style>\n{% endmacro %}\"\"\"\n\ndf_pop = pd.read_csv('\/kaggle\/input\/massachusetts-population-full\/mass_population.csv')\n\ndf_pop = df_pop[['NAME','POPESTIMATE2016']]\ndf_pop.dropna(inplace=True)\ndf_pop.drop_duplicates(inplace=True)\ndf_pop.sort_values(['POPESTIMATE2016'], ascending=False,inplace=True)\ndf_pop.reset_index(inplace=True)\ndf_pop.drop(columns=['index'], inplace=True)\ndf_pop.drop(index = 0, inplace=True)\ndf_pop.reset_index(inplace=True)\ndf_pop = df_pop[~df_pop.NAME.str.contains(\" County\")]\ndf_pop.reset_index(inplace=True)\ndf_pop = df_pop.drop(columns = ['level_0', 'index'])\n\ndf_pop.replace('Town city', '', regex=True, inplace=True)\n\ndf_pop_plot = df_pop[0:200]\n\nfor i in range(df_pop_plot.shape[0]):\n    town = df_pop_plot.loc[i, 'NAME']\n    loc = town + ', Massachusetts, United States of America'\n    location = geolocator.geocode(loc)\n    if location != None:\n        df_pop_plot.loc[i, 'Latitude'] = location.latitude\n        df_pop_plot.loc[i, 'Longitude'] = location.longitude\n    else:\n        df_pop_plot.loc[i, 'Latitude'] = np.nan\n        df_pop_plot.loc[i, 'Longitude'] = np.nan\n        \ndf_pop_plot.dropna(inplace=True)\n    \nmass_pop_map = folium.Map([42.368002, -71.922023], zoom_start=8)\n\nmap_title = 'Population (2016 Estimate) overlayed with Arbovirus Positive Mosquitoes'\ntitle_html = '''\n             <h3 align=\"center\" style=\"font-size:16px\"><b>{}<\/b><\/h3>\n             '''.format(map_title) \nmass_pop_map.get_root().html.add_child(folium.Element(title_html))\n\ndf_pop_plot.POPESTIMATE2016 = df_pop_plot.POPESTIMATE2016 * (1\/10000)\n\nlocationArr = df_pop_plot[['Latitude', 'Longitude', 'POPESTIMATE2016']]\n\n# plot heatmap\nmass_pop_map.add_child(plugins.HeatMap(locationArr))\n\nfor town in town_list:\n    loc = town_dict[town]\n    num = float(town_counts[town])\n    label = str(int(num)) + ' mosquitoes'\n    folium.CircleMarker([loc[0], loc[1]],\n                        radius = num\/4,\n                        fill_color = mosquito_color,\n                        fill_opacity = 0.2,\n                        popup = label,\n                        ).add_to(mass_pop_map)\n    \nmacro = MacroElement()\nmacro._template = Template(template)\n\nmass_pop_map.get_root().add_child(macro)\n    \nmass_pop_map\n","d5a0f951":"from sklearn import preprocessing\nfrom sklearn.linear_model import LinearRegression\n\ndf_pop = pd.read_csv('\/kaggle\/input\/massachusetts-population-full\/mass_population.csv')\n\ndf_pop = df_pop[['NAME','POPESTIMATE2016']]\ndf_pop.dropna(inplace=True)\ndf_pop.drop_duplicates(inplace=True)\ndf_pop.sort_values(['POPESTIMATE2016'], ascending=False,inplace=True)\ndf_pop.reset_index(inplace=True)\ndf_pop.drop(columns=['index'], inplace=True)\ndf_pop.drop(index = 0, inplace=True)\ndf_pop.reset_index(inplace=True)\ndf_pop = df_pop[~df_pop.NAME.str.contains(\" County\")]\ndf_pop.reset_index(inplace=True)\ndf_pop = df_pop.drop(columns = ['level_0', 'index'])\n\ndf_pop.replace(' Town city', '', regex=True, inplace=True)\ndf_pop.replace([\" city\", \" town\"], [\"\", \"\"], regex=True, inplace=True)\ndf_town = df_mosquito.Town.value_counts().to_frame('arbovirus_pos_mosquitoes')\n\nfor i in df_town.index:\n    val = df_pop[df_pop.NAME == i]['POPESTIMATE2016']\n    if len(val) != 0:\n        df_town.loc[i, 'pop'] = int(val)\n    else:\n        df_town.loc[i, 'pop'] = np.nan\n   \ndf_town.dropna(inplace=True)\ndf_town = (df_town - df_town.mean())\/df_town.std()\n\nprint(\"Correlation: Pearson Method\")\nprint(df_town.corr())\n\nmodel = LinearRegression()\nmodel.fit(df_town['pop'].values[:,np.newaxis], df_town['arbovirus_pos_mosquitoes'].values)\n\nplt.figure(figsize=(7,7))\ndf_town.drop('Boston', inplace=True)\nsns.scatterplot(data = df_town, x = 'pop', y = 'arbovirus_pos_mosquitoes')\nplt.title(\"Population vs. Number of Arbovirus Positive Mosquitoes (Scaled)\")\nplt.show()\n    ","0d05bdaf":"Let's visualize incidences of arbovirus in humans and animals","d6fe0d7f":"Now, let's add where the mosquitoes were found to have arbovirus","c613ce06":"Surely we can be more 'mathematical' in our approach to see that population is correlated with number of arbovrius-positive Mosquitoes identified.","8745457f":"Keep in mind that we don't have the location distribution of all tests. So it makes sense that Boston has the most arbovirus-positive mosquitoes since more people live there, hence the higher potential to conduct tests. ","ed4b82fd":"The population heat map isn't perfect (I only use the top 200 towns or so, and the folium heatmap is being a bit weird with weights), but its good enough for our visualizaion purposes. Here is a more complete population map I've found:\n![](https:\/\/jbdowse.com\/poib\/i\/mass-pop-rank-small.png)"}}