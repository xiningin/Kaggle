{"cell_type":{"addfef2e":"code","35817a7a":"code","19a55e32":"code","4939c975":"code","66c982fc":"code","1d4d9930":"code","545df6b4":"code","bae4ebdd":"code","20556a81":"code","f226db0a":"code","70e1e26d":"code","97a4ed92":"code","1e43fc98":"code","56959eec":"code","9724066b":"markdown","b7ced43e":"markdown","9563c42c":"markdown","f58deaf1":"markdown","e98af8db":"markdown","8f5d7cbb":"markdown","2a59c324":"markdown","d3a3d1ff":"markdown","eedb3a86":"markdown","d6816793":"markdown","10744a2e":"markdown","c88351bf":"markdown","1079f234":"markdown","72679ace":"markdown","5f75e0d1":"markdown","e346897c":"markdown","d9640112":"markdown"},"source":{"addfef2e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","35817a7a":"body_data = pd.read_csv('\/kaggle\/input\/500-person-gender-height-weight-bodymassindex\/500_Person_Gender_Height_Weight_Index.csv')\nbody_data.head()   # prints first 5 rows of DataFrame","19a55e32":"print(body_data.shape)    # prints the number of (rows, cols)\nprint(body_data.columns)  # prints list of columns","4939c975":"body_data.isnull().any()","66c982fc":"print(body_data.Gender.describe())\nprint(body_data.Gender.unique())","1d4d9930":"body_data.Gender = body_data.Gender.replace({'Male': 1})\nbody_data.Gender = body_data.Gender.replace({'Female': 2})\nbody_data.Gender","545df6b4":"body_data.head(10)","bae4ebdd":"# features are ['Gender', 'Height', 'Weight']\nX = body_data.drop('Index', axis=1) # Keeps all columns except Index\nX.head()","20556a81":"y = body_data.Index","f226db0a":"y","70e1e26d":"from sklearn import linear_model\nreg = linear_model.LinearRegression()\n\nreg.fit(X,y)","97a4ed92":"predictions = reg.predict(X)  # Stored in a numpy array\npredictions[:10]","1e43fc98":"print(\"Predicted Mean\", predictions.mean())\nprint(\"Actual Mean\", y.mean())\nprint('\\n')\nprint(\"Predicted Standard Deviation\", predictions.std())\nprint(\"Actual Standard Deviation\", y.std())\nprint('\\n')\nfrom sklearn.metrics import mean_squared_error\n\nlin_mse = mean_squared_error(y, predictions)\nlin_rmse = np.sqrt(lin_mse)\nprint(\"Prediction Error\", lin_rmse)","56959eec":"from matplotlib import pyplot as plt\nfig, ax = plt.subplots()\nax.scatter(y, predictions, edgecolors=(0, 0, 0))\nax.plot([y.min(), y.max()], [y.min(), y.max()], 'k--', lw=4)\n\nax.set_xlabel('Measured')\nax.set_ylabel('Predicted')\nplt.show()","9724066b":"Lastly, lets visualize the data between our training model and actual `Index` values.","b7ced43e":"# Step 2: Prepare the Data","9563c42c":"Now onto deciding our **ML model**. Since we are predicting the `Index`, lets first look at the values `Index` has.","f58deaf1":"Lets now fit and train a Linear Regression model. Thanks to our prior data preparation, training a model becomes very simple:","e98af8db":"The cleaned up data now looks like this:","8f5d7cbb":"# Step 4: Evaluate Your Model\nNow that we have our working Linear Regression model, Lets evaluate and visualize the prediction values compared to the actual values. We can **evaluate the accuracy** of a training model using Scikit-Learn's `mean_squared_error` function.","2a59c324":"# Step 3: Select & Train Your Model\nNow that the data is prepared, let's identify our **target variable** (what we want to predict) and our **feature variables** (the data used to create predictions).\n* Target(y): The `Index` column, since this is what we will be predicting.\n* Features(X): The 'Gender', 'Height, and 'Weight' columns. The data within these columns will be used to **fit** and **train** our model.\n\nSince all other columns will be used as feature variables, lets put them together...","d3a3d1ff":"As we can see, the DataFrame contains 500 rows with 4 columns (thats alot of data!)","eedb3a86":"Let's identify the model we intend on training using the information we know:\n* The data we have **includes the desired solution** (`Index`), making this a **supervised learning** system.\n* The predictions we want are **specific numeric values**, making this a **regression problem**.\n* There are **multiple feature variables** we are dealing with, so we should use a **Multiple Linear Regression Model**.","d6816793":"...The `Index` column will be our solution, so it will be stored in its own variable.","10744a2e":"# Step 1: Load & Review the Data\nLet's begin by loading and examining the dataset.","c88351bf":"We can see that there are only two string values, `Male` and `Female`. These can be easily converted to integers.\n* `1` will represent `Male`\n* `2` will represent `Female`\n\nWe can convert these values by using a simple dictionary and the pandas `replace` method.","1079f234":"Quick and easy. Now that our model is trained, we can create predictions using this model on our feature variables. Since the data is so large, lets display the first 10 predictions made by our model:","72679ace":"### Data Cleaning \nBefore we can begin building our model it is important to make sure the data is properly analyzed and cleaned (to avoid future issues). Let's check to make sure we do not have **missing values**.\n* `isnull().any()` will return True if there is any missing data within each column.","5f75e0d1":"Below is the default cell that comes with this notebook. It imports `numpy` and `pandas`, two libraries that are essential for data science. It also imports other input files to set up our coding environment.","e346897c":"### Handling Text\nLuckily, there is no missing data (yay!). Lets now handle any string values to make training our ML algorithm simpler. Let's take a look at the `Gender` column.","d9640112":"# Objective\nHello! This is my first notebook on Kaggle as I have just started with machine learning. This notebook does not cover advanced ML, but I will be practicing new ML concepts that I have learned (step-by-step).\n\nIn this project I will predict the BMI of a person using multiple variables."}}