{"cell_type":{"351364da":"code","9a7b7a24":"code","f5371a2a":"code","6e18b5ae":"code","e4691788":"code","8a3c3558":"code","7cd93167":"code","5d615ff7":"code","dd900427":"code","3e1dbbc5":"code","fe4119c0":"code","1cf9b3fb":"code","1da87aa7":"code","1050a428":"code","2e4b9ec6":"markdown","a1b48327":"markdown","f5a31940":"markdown","9dafc8fd":"markdown","1676d216":"markdown","56e025c3":"markdown","4e2d93b4":"markdown"},"source":{"351364da":"import pandas as pd\nimport numpy as np\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nos.listdir('..\/input')","9a7b7a24":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nsample_submission = pd.read_csv('..\/input\/gender_submission.csv')\n\n# Sex\u306e\u5909\u63db\ngenders = {'female': 0, 'male':1}\ntrain['Sex'] = train['Sex'].map(genders)\ntest['Sex'] = test['Sex'].map(genders)\n\n# Embarked\u306e\u5909\u63db \u4eca\u56de\u306fonehot encoding\u3057\u306a\u3044\nembarked = {'S':0, 'C':1, 'Q':2}\ntrain['Embarked'] = train['Embarked'].map(embarked)\ntest['Embarked'] = test['Embarked'].map(embarked)\n\n# \u4e0d\u8981\u306a\u5217\u306e\u524a\u9664\ntrain.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\ntest.drop(['PassengerId', 'Name', 'Cabin', 'Ticket'], axis=1, inplace=True)\n","f5371a2a":"X_train = train.drop('Survived', axis=1)\nY_train = train['Survived']","6e18b5ae":"X_train.head()","e4691788":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(X_train, Y_train, test_size=0.33, random_state=0)\n\n# LightGBM\u306e\u5206\u985e\u5668\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\ngbm = lgb.LGBMClassifier(objective='binary')  # , importance_type='gain'\n# train\u3068valid\u3092\u6307\u5b9a\u3057\u5b66\u7fd2\ngbm.fit(train_x, train_y,\n        eval_set = [(valid_x, valid_y)],\n        categorical_feature=['Sex', 'Embarked'],  # \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u3092\u6307\u5b9a\u3059\u308b\n        early_stopping_rounds=20,\n        verbose=-1)\n\n# valid_x\u306b\u3064\u3044\u3066\u63a8\u8ad6\noof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\nprint('score', round(accuracy_score(valid_y, oof)*100,2));  # valid\u306escore\n","8a3c3558":"# valid_x\u306b\u3064\u3044\u3066\u63a8\u8ad6\noof = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\nprint('score', round(accuracy_score(valid_y, oof)*100,2))  # valid\u306escore\n","7cd93167":"test_pred = gbm.predict(test, num_iteration=gbm.best_iteration_)\nsample_submission['Survived'] = test_pred\nsample_submission.to_csv('train_test_split.csv', index=False)  # score:75.119\n","5d615ff7":"# \u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u542b\u3081\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u5f97\ngbm.get_params()","dd900427":"gbm.feature_importances_\n# importance\u306ftraining data\u306e\u5217\u9806\u306b\u8868\u793a\u3055\u308c\u308b","3e1dbbc5":"# \u898b\u3084\u3059\u304f\u3059\u308b\npd.DataFrame({'\u7279\u5fb4': X_train.columns,\n    'importance':gbm.feature_importances_}).sort_values('importance',\n    ascending=False)","fe4119c0":"gbm.feature_importances_# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(X_train, Y_train, test_size=0.33, random_state=0)\n\n# LightGBM\u306e\u5206\u985e\u5668\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\ngbm = lgb.LGBMClassifier(objective='binary', importance_type='gain') \n# train\u3068valid\u3092\u6307\u5b9a\u3057\u5b66\u7fd2\ngbm.fit(train_x, train_y,\n        eval_set = [(valid_x, valid_y)],\n        categorical_feature=['Sex', 'Embarked'],\n        early_stopping_rounds=20,\n        verbose=-1);","1cf9b3fb":"pd.DataFrame({'\u7279\u5fb4': X_train.columns,\n    'importance':gbm.feature_importances_}).sort_values('importance',\n    ascending=False)","1da87aa7":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3092train\u3068valid\u306b\u5206\u5272\ntrain_x, valid_x, train_y, valid_y = train_test_split(X_train, Y_train, test_size=0.33, random_state=0)\n\n# lab.Dataset\u3092\u4f7f\u3063\u3066\u3001train\u3068valid\u3092\u4f5c\u3063\u3066\u304a\u304f\nlgb_train= lgb.Dataset(train_x, train_y, categorical_feature=['Sex', 'Embarked'])\nlgb_eval = lgb.Dataset(valid_x, valid_y, categorical_feature=['Sex', 'Embarked'])\n\nlgbm_params = {'objective': 'binary'}\nevals_result = {}\n\n# lgb.train\u3067\u5b66\u7fd2\ngbm = lgb.train(params = lgbm_params,  # \u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u8f9e\u66f8\u3067\u6e21\u3059\n                        train_set = lgb_train,\n                        valid_sets=[lgb_train, lgb_eval],\n                        early_stopping_rounds=20,\n                        verbose_eval=5,\n                        evals_result=evals_result)\n\n# predict\u306f\u30010\u304b\u30891\u306e\u5c11\u6570\u3067\u306e\u51fa\u529b\u5024\u306enumpy array\u3067\u306e\u51fa\u529b\u3068\u306a\u308b\noof = gbm.predict(valid_x, num_iteration=gbm.best_iteration)\n\npreds = (oof > 0.5).astype(int)\nprint('score', round(accuracy_score(valid_y, preds)*100,2))\n","1050a428":"import matplotlib.pyplot as plt\n\nplt.plot(evals_result['training']['binary_logloss'], label='train_loss')\nplt.plot(evals_result['valid_1']['binary_logloss'], label='valid_loss')\nplt.title('train_loss and valid_olss')\nplt.legend();","2e4b9ec6":"importance_type='gain'\u3092\u6307\u5b9a\u3057\u3066\u5b9f\u65bd","a1b48327":"# \u53c2\u8003","f5a31940":"## B.4 Scikit-learn interface\u3092\u4f7f\u7528\u3057\u306a\u3044\u65b9\u6cd5","9dafc8fd":"## B.2 \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u6307\u5b9a\n","1676d216":"* [Santender\u30b3\u30f3\u30da\u3067\u91d1\u30e1\u30c0\u30eb\u3068\u308b\u307e\u3067\u306e\u904e\u7a0b\u30fb\u30b3\u30f3\u30da\u306e\u307e\u3068\u3081](http:\/\/www.currypurin.com\/entry\/santander)\n* [Kaggle\u306eGrandmaster\u3084master\u306e\u6761\u4ef6\u3084\u4eba\u6570\u306b\u3064\u3044\u3066\u8abf\u3079\u305f\u306e\u3067\u3001\u8a73\u7d30\u306b\u66f8\u304d\u3068\u3081\u307e\u3059\u3002](http:\/\/www.currypurin.com\/entry\/2018\/02\/21\/011316)\n* [\u3053\u306e\u672c\u3092\u8aad\u3093\u3067\u6a5f\u68b0\u5b66\u7fd2\u3092\u5b66\u3073\u3001Kaggle\u306e\u91d1\u30e1\u30c0\u30eb\u3092\u3068\u308a\u307e\u3057\u305f](https:\/\/note.mu\/currypurin\/n\/n2607e22ccc60)\n* [Python\u306e\u672c\u3092\u6559\u3048\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u304c\u3001\u96e3\u3057\u304f\u611f\u3058\u307e\u3059\u3002\u3069\u3046\u3059\u3079\u304d\u3067\u3057\u3087\u3046\u304b\u3002](https:\/\/note.mu\/currypurin\/n\/n8605b7fd4051)\n* [Kaggle\u3067Silver\u53d6\u308b\u305f\u3081\u306b\u3069\u3046\u3044\u3046\u6bb5\u968e\u3092\u8e0f\u3093\u3067\u3044\u3051\u3070\u3088\u3044\u3067\u3059\u304b\uff1f](https:\/\/note.mu\/currypurin\/n\/n6a3c2bfd27c0)\n\n","56e025c3":"# \u6b21\u306eNotebook\nhttps:\/\/www.kaggle.com\/currypurin\/simple-lightgbm","4e2d93b4":"## B.3 \u91cd\u8981\u5ea6\u306e\u8868\u793a"}}