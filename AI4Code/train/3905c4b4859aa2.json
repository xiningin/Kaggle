{"cell_type":{"e5f7e1e4":"code","5be95f4e":"code","c115e5fb":"code","631ae31a":"code","cae38caa":"code","60dafcd9":"code","0700850c":"code","2cccb0c1":"code","f62d2146":"code","d9009305":"code","c8182bfe":"code","8d54c2ad":"code","7ae35f1f":"code","494af6a0":"code","3146fac4":"code","7d900478":"markdown","30fa3d22":"markdown","006df58a":"markdown","2f660448":"markdown","dd99e236":"markdown","f9f438df":"markdown","82d2b760":"markdown","32cf5b77":"markdown","8ac2cb67":"markdown","21f76409":"markdown","c2ad44e0":"markdown","5af8551a":"markdown","a5e5ef64":"markdown"},"source":{"e5f7e1e4":"import numpy as np \nimport pandas as pd\nimport os\nimport random\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom collections import Counter\nimport cv2\n\n# from tensorflow.python.keras.applications.vgg16 import VGG16, preprocess_input\n# from tensorflow.python.keras.applications.resnet import ResNet50, preprocess_input \nfrom tensorflow.python.keras.applications.mobilenet_v2 import MobileNetV2, preprocess_input \n# from tensorflow.python.keras.applications.efficientnet import EfficientNetB6, preprocess_input \n\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\nfrom tensorflow.keras.optimizers import Adam, SGD\n\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Dense, Flatten, Dropout, Input","5be95f4e":"base_dir = \"\/kaggle\/input\/knee-osteoarthritis-dataset-with-severity\"\n\ntrain_dir = os.path.join(base_dir,'train')\nval_dir = os.path.join(base_dir,'val')\ntest_dir = os.path.join(base_dir, 'test')","c115e5fb":"fig, ax = plt.subplots(5,5, figsize=(18,18))\n\nfor class_id in range(5):\n    folder = os.path.join(train_dir,str(class_id))\n    os.chdir(folder)\n    samples = random.sample(os.listdir(folder), 5)\n    \n    for col in range(5):\n        image = cv2.imread(samples[col])\n        ax[class_id, col].imshow(image)\n        ax[class_id, col].set_title(\"class_\" + str(class_id))\n        ax[class_id, col].set_axis_off()\n    \nplt.show()","631ae31a":"def show_distribution(folder):\n    \n    datagen = ImageDataGenerator()\n    generator = datagen.flow_from_directory(folder)\n\n    counter = Counter(generator.classes)                          \n    total_images = sum(counter.values())\n    distribution = [(class_id,round(num_images \/ total_images * 100,2)) for class_id, num_images in counter.items()]\n\n    for class_id, percentage in distribution:\n        print(class_id, percentage)\n","cae38caa":"print(\"The distribution for the training data is :\\n\")\nshow_distribution(train_dir)","60dafcd9":"print(\"The distribution for the validation data is :\\n\")\nshow_distribution(val_dir)","0700850c":"print(\"The distribution for the test data is :\\n\")\nshow_distribution(test_dir)","2cccb0c1":"train_datagen = ImageDataGenerator()\ntrain_generator = train_datagen.flow_from_directory(train_dir)\n\ncounter = Counter(train_generator.classes)                          \nmax_val = float(max(counter.values()))       \nclass_weights = {class_id : max_val\/num_images for class_id, num_images in counter.items()}   \nprint(\"\\nThe class weights are : \\n\\n\", class_weights)","f62d2146":"folder = os.path.join(train_dir,'0')\nos.chdir(folder)\nsamples = random.sample(os.listdir(folder), 5)\n\nfor filename in samples:\n    image = cv2.imread(filename)\n    print(image.shape)","d9009305":"NUM_CLASSES = 5\nIMAGE_SIZE=[224, 224]\nBATCH_SIZE=32","c8182bfe":"# Create the Generators\ntrain_val_generator = ImageDataGenerator(\n                                        preprocessing_function=preprocess_input,    \n                                        rotation_range=10,\n                                        width_shift_range=0.2,\n                                        height_shift_range=0.2,\n                                        shear_range=0.1,\n                                        zoom_range=0.2,\n                                        horizontal_flip=True,\n                                        vertical_flip=False,\n                                        fill_mode='nearest'\n                                        )\n\n\n# Train data generator\ntrain_data = train_val_generator.flow_from_directory(train_dir, \n                                                    target_size=IMAGE_SIZE,\n                                                    batch_size=BATCH_SIZE,\n                                                    class_mode='categorical',\n                                                    color_mode='rgb',\n                                                    shuffle=True\n                                                    )\n\n# Validation data generator\nval_data = train_val_generator.flow_from_directory(val_dir, \n                                                  target_size=IMAGE_SIZE,\n                                                  batch_size=BATCH_SIZE,\n                                                  class_mode='categorical',\n                                                  color_mode='rgb',\n                                                  shuffle=True\n                                                  )\n\n# Test data generator\ntest_generator  = ImageDataGenerator(preprocessing_function=preprocess_input)\ntest_data = test_generator.flow_from_directory(test_dir, \n                                               target_size=IMAGE_SIZE,\n                                               batch_size=1,\n                                               class_mode='categorical',\n                                               color_mode='rgb',\n                                               shuffle=False\n                                               )","8d54c2ad":"base_model = MobileNetV2(input_shape=IMAGE_SIZE + [3],\n                            include_top=False,\n                            weights='imagenet',\n                            pooling='avg'\n                           )\n\nfor layer in base_model.layers:\n    layer.trainable = False","7ae35f1f":"x_input = base_model.input\n\nx = Dense(128,activation='relu')(base_model.output)\nx = Dropout(0.2)(x)\n\noutput = Dense(NUM_CLASSES, activation='softmax')(x)\n\nmodel = Model(x_input, output)\n\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","494af6a0":"reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=10, min_lr=0.0001)\nearly_stopping = EarlyStopping(monitor='val_loss', patience=10)\n\nhist = model.fit(train_data,\n                 validation_data=val_data,\n                 epochs=50,\n#                  class_weight=class_weights,\n                 callbacks=[reduce_lr, early_stopping],\n                 verbose=1)","3146fac4":"model.evaluate(test_data)","7d900478":"The training stopped as the Early Stopping callback was triggered. That's ok. This is a very tough dataset and even getting around 52-53% accuracy across 5 classes is decent, if not the best","30fa3d22":"### Define the folder paths","006df58a":"### Evaluate the model","2f660448":"### Let us check the distribution of the various classes for train, test and validation datasets","dd99e236":"We can see that the images are all (224 X 224). We will have to choose the Transfer Model accordingly","f9f438df":"#### Load the base model","82d2b760":"### Let us plot some sample images from each of the classes","32cf5b77":"### Check the size of the images","8ac2cb67":"We got an accuracy of 52.3% on the test set. The model is not overfitting and is giving a decent results. Please suggest other ways to improve this further. Would be very happy to hear your thoughts.","21f76409":"#### Now add our own layer to classify each image into one of the possible classes","c2ad44e0":"### Dealing with imbalanced classes\n\nWe can see that the distributions are not balanced. Hence we would need to use ways to work with imbalanced data while training the model. One option is to use **\"class_weights\"**\n\nLet us calculate the appropriate class weights","5af8551a":"#### Train the model\n\nI have tried providing class_weights but found that the model was quite unstable and was not giving good accuracy. Hence not using the class weights parameter","a5e5ef64":"## Build the model"}}