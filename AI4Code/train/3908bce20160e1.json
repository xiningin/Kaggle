{"cell_type":{"87de9262":"code","d747fb56":"code","53b58b81":"code","57c5a27e":"code","23c2dbdc":"code","71f34552":"code","94eebac0":"code","66ab75b6":"code","d2dedb23":"code","9b84e2ce":"code","a9b1dfd1":"code","8dc899e0":"markdown","1090fd4c":"markdown","ab494f88":"markdown","0f3c687c":"markdown","7157ff71":"markdown","2101e14c":"markdown"},"source":{"87de9262":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_auc_score, roc_curve\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d747fb56":"df = pd.read_csv(\"..\/input\/email-spam-classification-dataset-csv\/emails.csv\")\ndf.head(10)","53b58b81":"df.info()","57c5a27e":"df.isnull().sum()","23c2dbdc":"X = df.iloc[:,1:3001]\ny = df.iloc[:,-1].values\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.25, random_state=5)","71f34552":"rfc = RandomForestClassifier(random_state=4)\n\nrfc.fit(X_train,y_train)\n\nprint(\"Train Results \\n\")\ny_train_pred  = rfc.predict(X_train)\ny_train_prob = rfc.predict_proba(X_train)[:,1]\n\nprint(\"Confusion Matrix for Train : \\n\", confusion_matrix(y_train, y_train_pred))\nprint(\"Accuracy Score for Train : \", accuracy_score(y_train, y_train_pred))\nprint(\"ROC AUC for Train : \", roc_auc_score(y_train, y_train_prob))\n\nprint(\"+\"*50)\nprint(\"Test Results \\n\")\ny_test_pred  = rfc.predict(X_test)\ny_test_prob = rfc.predict_proba(X_test)[:,1]\n\nprint(\"Confusion Matrix for Test : \\n\", confusion_matrix(y_test, y_test_pred))\nprint(\"Accuracy Score for Test : \", accuracy_score(y_test, y_test_pred))\nprint(\"ROC AUC for Test : \", roc_auc_score(y_test, y_test_prob))","94eebac0":"from sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint as sp_randint\n\nrfc = RandomForestClassifier(random_state=4)\n\n\n\nparams = {'n_estimators': sp_randint(50,400),\n          'max_features' : sp_randint(2,16),\n          'max_depth' : sp_randint(2,10),\n          'min_samples_split' : sp_randint(2,25),\n          'min_samples_leaf' : sp_randint(1,25),\n          'criterion':['gini','entropy']}\n\nrsearch = RandomizedSearchCV(rfc,\n                             param_distributions=params,\n                             n_iter=50,\n                             cv=3, \n                             return_train_score = True,\n                             scoring='roc_auc',\n                             n_jobs=-1,\n                            random_state=5)\n\nrsearch.fit(X,y)","66ab75b6":"rsearch.best_params_","d2dedb23":"from sklearn.metrics import accuracy_score, roc_auc_score, roc_curve\n\nrfc = RandomForestClassifier(**rsearch.best_params_,random_state=4,oob_score=True)\nrfc.fit(X_train,y_train)\n\nprint(\"Train Results \\n\")\ny_train_pred  = rfc.predict(X_train)\ny_train_prob = rfc.predict_proba(X_train)[:,1]\n\nprint(\"Confusion Matrix for Train : \\n\", confusion_matrix(y_train, y_train_pred))\nprint(\"Accuracy Score for Train : \", accuracy_score(y_train, y_train_pred))\nprint(\"ROC AUC for Train : \", roc_auc_score(y_train, y_train_prob))\nprint(\"OOB Score for Train : \", rfc.oob_score_)\n\nprint(\"+\"*50)\nprint(\"Test Results \\n\")\ny_test_pred  = rfc.predict(X_test)\ny_test_prob = rfc.predict_proba(X_test)[:,1]\n\nprint(\"Confusion Matrix for Test : \\n\", confusion_matrix(y_test, y_test_pred))\nprint(\"Accuracy Score for Test : \", accuracy_score(y_test, y_test_pred))\nprint(\"ROC AUC for Test : \", roc_auc_score(y_test, y_test_prob))","9b84e2ce":"fpr, tpr, thresholds = roc_curve(y_test,y_test_prob)\nthresholds[0] = thresholds[0]-1","a9b1dfd1":"fig, ax = plt.subplots(figsize=(10,6))\nax.plot(fpr,tpr,'black')\nax.plot(fpr,fpr,'green')\nax1=ax.twinx()\nax1.plot(fpr,thresholds)\nax1.set_ylabel(\"Thresholds\")\nax.set_xlabel(\"FPR\")\nax.set_ylabel(\"TPR\")\nplt.show()","8dc899e0":"# **Random Forest Classifier**","1090fd4c":"# **Email Spam Classification-Random Forest**","ab494f88":"# **Applying Best Params**","0f3c687c":"**Observations:**\n- As the **Accuracy Score** and **ROC_AUC Score** is 1.0.\n- It is clear that, our model is overfitting means, it is learning too much from the data.\n- Solution: We will RandomizedSearchCV (Cross-Validation Method) to search for best parameters of Random Forest for better prediction.\n","7157ff71":"# **ROC-AUC Curve for Test Data**","2101e14c":"# **RandomizedSearchCV**"}}