{"cell_type":{"33c1e2d5":"code","6d0d0b35":"code","0b1e6096":"code","b824b6ef":"code","946cabbe":"code","3a676d25":"code","fe62ca96":"code","d0c6d0db":"code","1ec5edcb":"code","05214bf1":"code","a355528b":"code","fb9c42a3":"code","bab868fe":"code","23a92173":"code","87701bb7":"code","cd827e88":"code","923f9e1a":"code","d463f0df":"code","9b7c2169":"code","96209ba7":"code","ba640a97":"code","cad4bc16":"code","91d8c4e9":"code","16f4f30d":"code","791c66d6":"code","138b6cb7":"code","f8d7b500":"code","b5118c57":"code","65bb7303":"code","ce0d68ad":"code","765da236":"code","7362d0bd":"code","d15a6ae7":"code","c1306c62":"code","757e6f99":"code","4fef2228":"code","e0b1fe5d":"code","a8165714":"code","c869ebc3":"code","73e010a9":"code","5a46a4e7":"code","aee0ed7a":"code","240027cc":"markdown","d4c016c6":"markdown","0d0dcd1d":"markdown","505db7f5":"markdown","6219be7c":"markdown","d744d833":"markdown","76e6b731":"markdown","751656f0":"markdown","f11434a4":"markdown","d7f5969b":"markdown","884175e8":"markdown","81b6cce3":"markdown","660de352":"markdown","68ed7e97":"markdown","eeba31d5":"markdown","3c7a9bc6":"markdown","56fac0c3":"markdown","b377c641":"markdown","abd569bf":"markdown","befb532b":"markdown","68f76337":"markdown","c7573b19":"markdown"},"source":{"33c1e2d5":"# Import libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport os\nimport os.path\nimport matplotlib.pyplot as plt\n!pip install klib\nimport klib\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc, precision_recall_curve, classification_report, average_precision_score\n\nfrom sklearn.ensemble import ExtraTreesClassifier\n\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import precision_score,f1_score\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.linear_model import LogisticRegression\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn import preprocessing\nfrom sklearn.metrics import mean_squared_error\n\n# import packages for hyperparameters tuning\nfrom hyperopt import STATUS_OK, Trials, fmin, hp, tpe\n\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","6d0d0b35":"#input data\nroot_dir = '\/kaggle\/input\/widsdatathon2021\/'\n\nsample_submission = pd.read_csv(os.path.join(root_dir, \n                    'SampleSubmissionWiDS2021.csv'))\nsolution_template = pd.read_csv(os.path.join(root_dir, \n                    'SolutionTemplateWiDS2021.csv'))\nData_dictionary = pd.read_csv(os.path.join(root_dir,   \n                   'DataDictionaryWiDS2021.csv'))\nUnlabled_data = pd.read_csv(os.path.join(root_dir,     \n                'UnlabeledWiDS2021.csv'))\nTraining_data = pd.read_csv(os.path.join(root_dir,     \n                'TrainingWiDS2021.csv'))","0b1e6096":"display(Data_dictionary.shape)\ndisplay(Unlabled_data.shape)\ndisplay(Training_data.shape)\ndisplay(solution_template.shape)","b824b6ef":"Training_data.isna().any().any()","946cabbe":"Training_data.drop('Unnamed: 0', axis = 1, inplace = True)","3a676d25":"display(Training_data.shape)","fe62ca96":"display(Unlabled_data.shape)\nUnlabled_data.head()","d0c6d0db":"Unlabled_data.isna().any().any()","1ec5edcb":"Unlabled_data.drop('Unnamed: 0', axis = 1, inplace = True)","05214bf1":"display(Unlabled_data.shape)\nUnlabled_data.head()","a355528b":"Training_data.info(verbose=True, null_counts=True)","fb9c42a3":"Training_data.dtypes.value_counts()","bab868fe":"Training_data.isnull().sum()","23a92173":"def calc_missing_values(df_name):\n    \n    '''\n    Returns total number and percentage of missing value in each column of a\n    given dataframe.    \n    '''\n    # sum of missing values in each column\n    missing_values = df_name.isnull().sum() \n    \n    # percentage of missing values in each column\n    per_missing = df_name.isnull().sum() * 100 \/ len(df_name)\n    \n    # Table with sum and percentage of missing values\n    missing_table = pd.concat([missing_values, per_missing],axis = 1)\n        \n    # Assign column names\n    missing_table_rename = missing_table.rename(columns ={0: 'Missing Values', 1:'% of missing values'})\n    \n    # Sort it by percentage of missing values\n    \n    sorted_table = missing_table_rename[missing_table_rename.iloc[:,1] !=0].\\\n    sort_values('% of missing values', ascending = False).round(1)\n    \n    print('Out of ' + str(df_name.shape[1])+ ' columns in this dataframe '+ str(sorted_table.shape[0])+ \\\n                         ' columns have missing values')\n    \n    return sorted_table\n        ","87701bb7":"# Training data\nmissing_train = calc_missing_values(Training_data)\nmissing_train[:20].style.background_gradient(cmap='viridis')","cd827e88":"# Test data\nmissing_test = calc_missing_values(Unlabled_data)\nmissing_test[:20].style.background_gradient(cmap='cividis')","923f9e1a":"train_df = klib.data_cleaning(Training_data) # removes duplicate and empty row\/col","d463f0df":"test_df = klib.data_cleaning(Unlabled_data) # removes duplicate and empty row\/cols#","9b7c2169":"#train_df = Training_data\n#test_df = Unlabled_data","96209ba7":"train_df['diabetes_mellitus'].value_counts(normalize = True)","ba640a97":"train_df['diabetes_mellitus'].astype(int).plot.hist();","cad4bc16":" train_df.dtypes","91d8c4e9":"cat_col_train = Training_data.select_dtypes('object').columns\ndisplay(len(cat_col_train))\ndisplay(cat_col_train)","16f4f30d":"cat_col_test = Unlabled_data.select_dtypes('object').columns\ndisplay(len(cat_col_test))\ndisplay(cat_col_test)","791c66d6":"#klib.cat_plot(test_df)","138b6cb7":"cat_list = Training_data.select_dtypes('object').columns\ndisplay(cat_list)","f8d7b500":"# Creating Label Encoder object\nle = LabelEncoder()\nfor ob in cat_list:\n    train_df[ob] = le.fit_transform(train_df[ob].astype(str))\n    test_df[ob] = le.fit_transform(test_df[ob].astype(str))\nprint(train_df.info())    \nprint(test_df.info()) ","b5118c57":"train_df.fillna(-9999,inplace = True)\ntrain_df.isnull().sum()","65bb7303":"test_df.fillna(-9999,inplace = True)\ntest_df.isnull().sum()","ce0d68ad":"Target = 'diabetes_mellitus'\ntrain_labels = train_df[Target]\ntrain_df_NT = train_df.drop(columns = [Target])\nfeatures = list(train_df_NT.columns)\nprint('Training data shape:', train_df_NT.shape)\nprint('Test data shape:', test_df.shape)","765da236":"X, y = train_df_NT, train_labels","7362d0bd":"# Tree-based feature selection\nclf_f = ExtraTreesClassifier(n_estimators=50)\nclf_f = clf_f.fit(X, y)\nmodel = SelectFromModel(clf_f, prefit=True)\nX_new = model.transform(X)\nX_test_new = model.transform(test_df)","d15a6ae7":"X_new.shape,X_test_new.shape","c1306c62":"#create the train and validation set for cross-validation\nX_train, X_val, y_train, y_val = train_test_split(X_new, y, test_size=0.2, random_state=123)","757e6f99":"!nvidia-smi","4fef2228":"# A parameter grid for XGBoost\nparams = {\n        'min_child_weight': [1, 5, 10],\n        'gamma': [0.5, 1, 1.5, 2, 5],\n        'subsample': [0.6, 0.8, 1.0],\n        'colsample_bytree': [0.6, 0.8, 1.0],\n        'max_depth': [3, 5, 7, 10],\n        'learning_rate': [0.01, 0.02, 0.05]    \n        }","e0b1fe5d":"%%time \nfolds = 3\nparam_comb = 1\n\ntarget = 'target'\n#predictors = train_df.columns.values.tolist()[2:]\n\n\n\nskf = StratifiedKFold(n_splits=folds, shuffle = True, random_state = 1001)\n\nxgb = XGBClassifier(learning_rate=0.02, n_estimators=1000, objective='binary:logistic',\n                    silent=True, nthread=6, tree_method='gpu_hist', eval_metric='auc')\n\nrandom_search = RandomizedSearchCV(xgb, param_distributions=params, n_iter=param_comb, scoring='roc_auc', n_jobs=4, cv=skf.split(X_train,y_train), verbose=3, random_state=1001 )\n\n\nrandom_search.fit(X_train, y_train)","a8165714":"y_pred_val = random_search.predict_proba(X_val)","c869ebc3":"y_pred_scores = y_pred_val[:, 1]","73e010a9":"fpr, tpr, _ = roc_curve(y_val, y_pred_scores)\nroc_auc = auc(fpr, tpr)\naverage_precision = average_precision_score(y_val, y_pred_scores)\nprecision, recall, _ = precision_recall_curve(y_val, y_pred_scores)\nprint(roc_auc)","5a46a4e7":"xgb_cls_pred = random_search.predict_proba(X_test_new)[:,1]","aee0ed7a":"# Submission dataframe\nsubmit = test_df[['encounter_id']]\nsubmit['diabetes_mellitus'] = xgb_cls_pred\nsubmit.to_csv('xgb_cls.csv',index=False)\nsubmit.head()","240027cc":"There are three unique datatypes.","d4c016c6":"## <span style='color:purple'>  Import libraries <\/span>","0d0dcd1d":"# Missing  data handling","505db7f5":"# Feature selection using SelectFromModel","6219be7c":"## <span style='color:purple'> Data Exploration <\/span>\n","d744d833":"## <span style='color:purple'> Input data <\/span>","76e6b731":"## Training data","751656f0":"# Categorical features","f11434a4":"## Missing values","d7f5969b":"Test data has 10234 entries and 179 variables which is 1 less than the training data due to the presence of TARGET column.","884175e8":"This column do not contain useful information so let's drop it.","81b6cce3":"There are some missing data in training data.","660de352":"Training data has 130157 entries and 180 variables. ","68ed7e97":"## Test data","eeba31d5":"## Target Column in Training data","3c7a9bc6":"### Column types in training and test data","56fac0c3":"# Missing Values","b377c641":"### Columns","abd569bf":"Training data has 130157 entries and 181 variables. ","befb532b":"There is class imbalance in this dataset.","68f76337":"# <span style='color:purple'>  Women in Data Science Datathon 2021       <\/span>\n\n<div style=\"text-align: justify;\n             font-size:18px\">\nObjective of <span style='color:purple'> WiDS Datathon 2021  <\/span> is to develop models and make predictions to determine whether a patient admitted to ICU has been diagnosed with a particular type of diabetes, Diabetes Mellitus, using labeled training data from the first 24 hours of intensive care.\n    <\/div>","c7573b19":"### Number of unique column datatypes "}}