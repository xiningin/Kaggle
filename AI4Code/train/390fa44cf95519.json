{"cell_type":{"47ca1697":"code","a71cb901":"code","4d9fea74":"code","6e7cf7eb":"code","92684b47":"code","84360d74":"code","3a5741a4":"code","8419bfec":"markdown","25986732":"markdown"},"source":{"47ca1697":"\nimport numpy as np # arrayleri i\u015flemek i\u00e7in\nimport pandas as pd #heart.csv datas\u0131n\u0131 i\u015flemek i\u00e7in\n\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\")) #input i\u00e7inde bulunan dosyalar\u0131 yazd\u0131r\n\n","a71cb901":"data = pd.read_csv(\"..\/input\/heart.csv\")# Heart.csv verimizi data ya \u00e7ekiyoruz\ndata.info() # Veri hakkinda bilgi al\u0131yoruz\ndata.head() # s\u00fct\u00fcnlar\u0131 ve sat\u0131rlar\u0131 inceliyoruz\n","4d9fea74":"y_data = data.target.values # Verideki  Target S\u00fctununu y_data ya e\u015fitliyoruz \nx_data = data.drop(['target'], axis=1) # Geri kalan t\u00fcm S\u00fctunlar x_data ya e\u015fitleniyor\n ","6e7cf7eb":"# %% normalization\n#Normalizasyon (Ayr\u0131\u015ft\u0131rma), veritabanlar\u0131nda \u00e7ok fazla s\u00fctun ve sat\u0131rdan olu\u015fan bir tabloyu tekrarlardan ar\u0131nd\u0131rmak i\u00e7in daha az sat\u0131r ve s\u00fctun i\u00e7eren alt k\u00fcmelerine ayr\u0131\u015ft\u0131rma i\u015flemidir.\nX = (x_data -np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values\nY = y_data.reshape(X.shape[0],1) # Y mizi 303 e 1 lik matrix haline getiriyoruz \nprint(Y)","92684b47":"#matrizlerimizin boyutlar\u0131na bak\u0131yoruz\nprint(\"X shape: \" , X.shape)\nprint(\"Y shape: \" , Y.shape)","84360d74":"from keras.models import Sequential\nfrom keras.layers import Dense\nmodel = Sequential()\nmodel.add(Dense(12, input_dim=13, init='uniform', activation='relu'))\nmodel.add(Dense(8, init='uniform', activation='relu'))\nmodel.add(Dense(1, init='uniform', activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X,Y,epochs=50,batch_size=10,validation_split=0.13)\npredictions = model.predict(X)","3a5741a4":"predict = numpy.array([44,1,0,112,290,0,0,153,0,0,2,1,2]).reshape(1,13)\nprint(model.predict_classes(predict))","8419bfec":"**AGE** = Y\u0131llar i\u00e7inde ya\u015f\n**SEX** = (1 = erkek; 0 = kad\u0131n)\n**Cp**  = g\u00f6\u011f\u00fcs a\u011fr\u0131s\u0131 tipi\n**Trestbps** = dinlenme kan bas\u0131nc\u0131 (hastaneye giri\u015fte mm Hg cinsinden)\n**Chol** = kolestoral mg \/ dl cinsinden\n**Fbs** = (a\u00e7l\u0131k kan \u015fekeri> 120 mg \/ dl) (1 = do\u011fru; 0 = yanl\u0131\u015f)\n**Restecg** = elektrokardiyografik sonu\u00e7lar\u0131n dinlenmesi\n**Thalach** = elde edilen maksimum kalp at\u0131\u015f h\u0131z\u0131\n**Exang** = egzersize ba\u011fl\u0131 anjin (1 = evet; 0 = hay\u0131r)\n**Oldpeak** = Dinlenmeye g\u00f6re egzersizle ind\u00fcklenen ST depresyonu\n**Slope** = Tepe egzersizi ST segmentinin e\u011fimi\n**CA** = floroskopi ile renklendirilmi\u015f ana damarlar\u0131n (0-3) say\u0131s\u0131\n**Tal** = normal; 6 = sabit hata; 7 = tersinir kusur\n**Target** = 1 veya 0","25986732":"Gerekli k\u00fct\u00fcphaneleri import ediyoruz"}}