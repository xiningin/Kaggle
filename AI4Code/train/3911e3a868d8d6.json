{"cell_type":{"24c11a31":"code","3269db65":"code","c70a3b36":"code","5a32f8ff":"code","00907368":"code","980aabf9":"code","d30b3e0d":"code","88b527dc":"code","4d601271":"code","8ca263fd":"code","6f66f96e":"code","f9fe5fae":"code","8ae9f205":"code","39d6b290":"code","1e366f49":"code","17b18d96":"code","65e10475":"code","413e7844":"code","97f77900":"code","7d122a3c":"code","32f60e21":"code","983da90b":"code","b51e5b47":"code","8beb7e48":"code","aa689666":"code","e1511b57":"code","eace5131":"code","833e0b1d":"code","2e5237f4":"code","f1620408":"code","0850fd78":"code","6f62b8da":"code","c080d4cb":"code","ae5e7fa5":"code","a77dc95b":"code","6f77c398":"code","a7214379":"code","be44d1f2":"code","823dc407":"code","12095156":"code","09f87964":"code","b17c33fe":"code","8060b8d9":"code","9a4abdde":"code","056473bf":"code","964123ad":"code","ce352ce9":"code","b7c50f3a":"code","9e9d69c4":"code","f13bda12":"code","fea1bd66":"code","e5db8c82":"code","29be892b":"code","5548278a":"code","1787e838":"code","5bdf1b18":"code","25a12f5d":"code","5a613c10":"code","23d0dd20":"code","c4d93211":"code","88e83c95":"code","1200df8d":"code","9fbff406":"code","01245726":"code","b0490002":"code","03289fde":"code","bd99cd1c":"code","28621b70":"code","0a326de2":"code","0ebfd7df":"code","bc2ef055":"code","743eff03":"code","ec0c2465":"code","76a30f70":"code","8f1a5a20":"code","760850d8":"code","a6bd8572":"code","c72f273c":"code","7bbabc51":"code","f4e0cec1":"code","b88a0b6b":"code","24bd40d4":"code","3b79b9f7":"code","e71d7caa":"code","e3c91fea":"code","e5f70167":"code","089e41bb":"code","5246d67a":"code","7971e3a3":"code","47b2ba4e":"code","cc08bfdc":"code","ffdb11ae":"code","bcc5134b":"code","efef7ca9":"code","d8ca55a6":"markdown","6d7d6d0e":"markdown","434ee0f8":"markdown","e008894a":"markdown","0c6e4d4e":"markdown","c31122be":"markdown","850f1eef":"markdown","eafd4c69":"markdown","56204616":"markdown","eb86d999":"markdown","f3a59b91":"markdown","11b85f1c":"markdown","f63813d4":"markdown","abad041c":"markdown","4d7c69d8":"markdown","4f35c662":"markdown","72425300":"markdown","2086eafe":"markdown","da6386c8":"markdown"},"source":{"24c11a31":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings","3269db65":"df_tr = pd.read_csv('\/kaggle\/input\/predict-the-housing-price\/train.csv')\ndf_ts = pd.read_csv('\/kaggle\/input\/predict-the-housing-price\/Test.csv')\nprint(\"Train:\",df_tr.shape)\nprint(\"Test:\",df_ts.shape)","c70a3b36":"df_tr.head(5)","5a32f8ff":"print('Train Dataset Infomarion')\nprint (\"Rows     : \" ,df_tr.shape[0])\nprint (\"Columns  : \" ,df_tr.shape[1])\nprint (\"\\nFeatures : \\n\" ,df_tr.columns.tolist())\nprint (\"\\nMissing values :  \",df_tr.isnull().sum().values.sum())\nprint (\"\\nUnique values :  \\n\",df_tr.nunique())","00907368":"df_ts.head(5)","980aabf9":"print('Test Dataset Infomarion')\nprint (\"Rows     : \" ,df_ts.shape[0])\nprint (\"Columns  : \" ,df_ts.shape[1])\nprint (\"\\nFeatures : \\n\" ,df_ts.columns.tolist())\nprint (\"\\nMissing values :  \",df_ts.isnull().sum().values.sum())\nprint (\"\\nUnique values :  \\n\",df_ts.nunique())","d30b3e0d":"### Train Null values\nsns.heatmap(df_tr.isnull())","88b527dc":"# Train null list\nnullist = []\nnullist = df_tr.isnull().sum()\n#nullist.loc[nullist != 0]\nnul = pd.DataFrame(nullist.loc[nullist != 0])\nnul","4d601271":"# Numeric Nulls in Train\ncols_tr = df_tr.columns\nnum_cols_tr= df_tr._get_numeric_data().columns\ncat_cols_tr = list(set(cols_tr) - set(num_cols_tr))\n\nsns.heatmap(df_tr[num_cols_tr].isnull())","8ca263fd":"## Categorical nulls in Train\nsns.heatmap(df_tr[cat_cols_tr].isnull())","6f66f96e":"# Test null list\nnullist1 = []\nnullist1 = df_ts.isnull().sum()\n#nullist.loc[nullist != 0]\nnul1 = pd.DataFrame(nullist1.loc[nullist1 != 0])\nnul1","f9fe5fae":"### Test Null values\nsns.heatmap(df_ts.isnull())","8ae9f205":"# Numeric Nulls in Test\ncols = df_ts.columns\nnum_cols = df_ts._get_numeric_data().columns\ncat_cols = list(set(cols) - set(num_cols))\n\nsns.heatmap(df_ts[num_cols].isnull())","39d6b290":"### Categorical null cols in test\nsns.heatmap(df_ts[cat_cols].isnull())","1e366f49":"### Droping cols with too many nulls\ndrop_columns = ['FireplaceQu','PoolQC','Fence','MiscFeature','BsmtUnfSF']\ndf_tr.drop(drop_columns, axis = 1, inplace = True)\ndf_ts.drop(drop_columns, axis = 1, inplace = True)","17b18d96":"cols = df_tr.columns\nnum_cols = df_tr._get_numeric_data().columns\ncat_cols = list(set(cols) - set(num_cols))","65e10475":"fill_col = ['Alley','MasVnrType','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n            'GarageType','GarageFinish','GarageCond']\nfor i in fill_col:\n    print(i,\"values :\\n\",df_tr[i].value_counts())\n    print(\"_____________________\")","413e7844":"### Categorical data\nfor i in cat_cols:\n    print(i,\"values :\\n\",df_tr[i].value_counts())\n    print(\"_____________________\")","97f77900":"## Filling No where Nan in Categorical data\nfor col in df_tr[fill_col]:\n    df_tr[col] = df_tr[col].fillna('None')\nfor col in df_ts[fill_col]:\n    df_ts[col] = df_ts[col].fillna('None')","7d122a3c":"colfil = ['BsmtFinSF1','BsmtFinSF2','TotalBsmtSF','BsmtFullBath','BsmtHalfBath','GarageCars', \n            'GarageArea']\nfor coll in colfil:\n    df_ts[coll].fillna(df_ts[coll].median(), inplace = True)","32f60e21":"num_cols = df_tr._get_numeric_data().columns\ncat_cols = list(set(cols) - set(num_cols))","983da90b":"df_tr['LotFrontage'].describe()","b51e5b47":"(df_tr['LotFrontage'].plot.box()) ","8beb7e48":"sns.violinplot(df_tr['LotFrontage'])","aa689666":"### replace null with median as there are many outliers\ndf_tr['LotFrontage'].fillna(value=df_tr['LotFrontage'].median(),inplace=True)\ndf_ts['LotFrontage'].fillna(value=df_ts['LotFrontage'].median(),inplace=True)","e1511b57":"df_tr.GarageYrBlt.describe()","eace5131":"(df_tr['GarageYrBlt'].plot.box()) ","833e0b1d":"sns.violinplot(df_tr['GarageYrBlt'])","2e5237f4":"### replace null with mean as there are many outliers\ndf_tr['GarageYrBlt'].fillna(value=df_tr['GarageYrBlt'].mean(),inplace=True)\ndf_ts['GarageYrBlt'].fillna(value=df_ts['GarageYrBlt'].mean(),inplace=True)","f1620408":"df_tr['MasVnrArea'].describe()","0850fd78":"(df_tr['MasVnrArea'].plot.box()) ","6f62b8da":"### replace null with median as there are many outliers\ndf_tr['MasVnrArea'].fillna(value=df_tr['MasVnrArea'].median(),inplace=True)\ndf_ts['MasVnrArea'].fillna(value=df_ts['MasVnrArea'].median(),inplace=True)","c080d4cb":"#sns.heatmap(df_tr.isnull())\ndf_tr.isnull().sum()","ae5e7fa5":"df_tr.columns","a77dc95b":"### Creating some Featrues \nboth_col = [df_tr, df_ts]\nfor col in both_col:\n    col['YrBltAndRemod'] = col['YearBuilt'] + col['YearRemodAdd']\n    col['TotalSF'] = col['TotalBsmtSF'] + col['1stFlrSF'] + col['2ndFlrSF']\n    col['Total_sqr_footage'] = (col['BsmtFinSF1'] + col['BsmtFinSF2'] +\n                                 col['1stFlrSF'] + col['2ndFlrSF'])\n\n    col['Total_Bathrooms'] = (col['FullBath'] + (0.5 * col['HalfBath']) +\n                               col['BsmtFullBath'] + (0.5 *col['BsmtHalfBath']))\n\n    col['Total_porch_sf'] = (col['OpenPorchSF'] + col['3SsnPorch'] +\n                              col['EnclosedPorch'] + col['ScreenPorch'] +\n                              col['WoodDeckSF'])","6f77c398":"## Binary some feature\nboth_col = [df_tr, df_ts]\nfor col in both_col:\n    col['haspool'] = col['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\n    col['has2ndfloor'] = col['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\n    col['hasgarage'] = col['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\n    col['hasbsmt'] = col['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\n    col['hasfireplace'] = col['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)","a7214379":"plt.subplots(figsize=(30,30))\nsns.heatmap(df_tr.corr(),cmap=\"GnBu\",vmax=0.9, square=True)","be44d1f2":"### droping some columns\ndrop_col = ['Exterior2nd','GarageYrBlt','Condition2','RoofMatl','Electrical','HouseStyle','Exterior1st',\n            'Heating','GarageQual','Utilities','MSZoning','Functional','KitchenQual']\ndf_tr.drop(drop_col, axis = 1,inplace = True)\ndf_ts.drop(drop_col, axis = 1,inplace = True)","823dc407":"df_tr","12095156":"df_ts","09f87964":"cols = df_tr.columns\nnum_cols = df_tr._get_numeric_data().columns\ncat_cols = list(set(cols) - set(num_cols))","b17c33fe":"sns.heatmap(df_tr.isnull())","8060b8d9":"sns.heatmap(df_ts.isnull())","9a4abdde":"df_ts[cat_cols]","056473bf":"df_tr[cat_cols]","964123ad":"### value counts in categorical data in train\nfor i in df_tr[cat_cols]:\n    print(i,\":\",len(df_tr[i].unique()))","ce352ce9":"### value counts in categorical data in test\nfor i in df_ts[cat_cols]:\n    print(i,\":\",len(df_ts[i].unique()))","b7c50f3a":"### LabelEncoding of categorical data","9e9d69c4":"from sklearn.preprocessing import LabelEncoder","f13bda12":"dftr = df_tr[cat_cols].apply(LabelEncoder().fit_transform)","fea1bd66":"dfts = df_ts[cat_cols].apply(LabelEncoder().fit_transform)","e5db8c82":"df_tr_final = df_tr[num_cols].join(dftr)","29be892b":"num_cols = df_ts._get_numeric_data().columns\ndf_ts_final = df_ts[num_cols].join(dfts)","5548278a":"df_tr_final","1787e838":"df_ts_final","5bdf1b18":"ids = df_ts['Id']\ndf_tr_final.drop('Id',axis=1,inplace=True)\ndf_ts_final.drop('Id',axis=1,inplace=True)","25a12f5d":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nimport numpy as np\nimport statsmodels.api as sm","5a613c10":"### SLR on all columns\nfor i in df_tr_final.columns:\n    X = df_tr_final[[i]]#.values.reshape(1,-1)\n    y = df_tr_final[['SalePrice']]#.values.reshape(1,-1)\n\n    X_train,X_test,y_train,y_test = train_test_split(X,y,train_size=.7,random_state=101)\n    LR = LinearRegression()\n    LR.fit(X_train,y_train)\n    y_pred = LR.predict(X_test)\n    print(i,\"gives R2 score\",r2_score(y_pred,y_test))\n    print(i,'gives MSE is:',mean_squared_error(y_test, y_pred))\n    rms = np.sqrt(mean_squared_error(y_test, y_pred))\n    print(i,'gives RMSE is:',rms)\n    print(\"------------------------------------------\")\n    #print('Coefficient is',LR.coef_[0][0])\n    #print('intercept is',LR.intercept_[0])","23d0dd20":"X = df_tr_final.drop('SalePrice',axis=1)#.values.reshape(1,-1)\ny = df_tr_final['SalePrice']#.values.reshape(1,-1)\n\nX_train,X_test,y_train,y_test = train_test_split(X,y,train_size=.7,random_state=101)","c4d93211":"### Using Rfe\nfrom sklearn.feature_selection import RFE\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\n#X_train1 = scaler.fit_transform(X_train)\n#y_train1 = scaler.fit_transform(y_train)\nrfe = RFE(LR, 10)\nrfe.fit(X_train,y_train)","88e83c95":"#rfe.support_","1200df8d":"X_train.columns[rfe.support_]","9fbff406":"cols = X_train.columns[rfe.support_]","01245726":"LR.fit(X_train[cols],y_train)","b0490002":"y_pred = LR.predict(X_test[cols])\nprint(\"gives R2 score\",r2_score(y_pred,y_test))\nprint('gives MSE is:',mean_squared_error(y_test, y_pred))\nrms = np.sqrt(mean_squared_error(y_test, y_pred))\nprint('gives RMSE is:',rms)\nprint(\"-----------------------------\")","03289fde":"y_pred = LR.predict(df_ts_final[cols])","bd99cd1c":"#For creating Output CSV file\ndef makecsv(y_pred,subno): ### input file name in \"\"\n    subdf = pd.DataFrame()\n    subdf['Id'] = df_ts['Id']\n    subdf['SalePrice'] = y_pred\n    subdf.to_csv(subno, index=False)","28621b70":"# makecsv(y_pred,\"rfesol.csv\")","0a326de2":" import scipy.stats as stats","0ebfd7df":"stats.ttest_1samp(a=df_tr['OverallQual'],popmean=df_tr['SalePrice'].mean())","bc2ef055":"model = sm.OLS(y, X)\nresults = model.fit()\nprint(results.summary())","743eff03":"X = df_tr_final.drop('SalePrice',axis=1)#.values.reshape(1,-1)\ny = df_tr_final['SalePrice']#.values.reshape(1,-1)\nX_train,X_test,y_train,y_test = train_test_split(X,y,train_size=.7,random_state=101)","ec0c2465":"### For using rfe selected features\n#X_train = X_train[cols]\n#X_test = X_test[cols]","76a30f70":"LR.fit(X_train,y_train)","8f1a5a20":"### Multiple Linear regression fo all\ny_pred = LR.predict(X_test)\nprint(\"Multiple Linear regression gives R2 score\",r2_score(y_pred,y_test))\nprint('Multiple Linear regression gives MSE is:',mean_squared_error(y_test, y_pred))\nrms = np.sqrt(mean_squared_error(y_test, y_pred))\nprint('Multiple Linear regression gives RMSE is:',rms)\nprint(\"-------------------------------------------\")","760850d8":"## Testing on Test Dataset\ny_pred = LR.predict(df_ts_final)","a6bd8572":"#makecsv(y_pred,\"MLsol.csv\")","c72f273c":"from sklearn.ensemble import RandomForestRegressor","7bbabc51":"rf = RandomForestRegressor(n_estimators = 300, random_state = 0)\nrf.fit(X_train,y_train)","f4e0cec1":"y_pred = rf.predict(X_test)","b88a0b6b":"print('all gives R2 score',r2_score(y_pred,y_test))\nprint('all gives MSE is:',mean_squared_error(y_test, y_pred))\nrms = np.sqrt(mean_squared_error(y_test, y_pred))\nprint('all gives RMSE is:',rms)\nprint(\"-----------------------------------------\")","24bd40d4":"## Testing on Test Dataset\ny_pred = rf.predict(df_ts_final)","3b79b9f7":"#makecsv(y_pred,\"Rfsol.csv\")","e71d7caa":"import xgboost as xgb","e3c91fea":"model_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =42, nthread = -1)","e5f70167":"model_xgb.fit(X_train,y_train)","089e41bb":"y_pred = model_xgb.predict(X_test)\nprint('XGB score:',model_xgb.score(X_train,y_train))\nprint('all gives R2 score',r2_score(y_pred,y_test))\nprint('all gives MSE is:',mean_squared_error(y_test, y_pred))\nrms = np.sqrt(mean_squared_error(y_test, y_pred))\nprint('all gives RMSE is:',rms)\nprint(\"-----------------------------------------\")","5246d67a":"## Testing on Test Dataset\ny_pred = model_xgb.predict(df_ts_final)","7971e3a3":"#makecsv(y_pred,\"xgbsol.csv\")","47b2ba4e":"from sklearn import ensemble","cc08bfdc":"GBoost = ensemble.GradientBoostingRegressor(n_estimators = 3000, max_depth = 5,max_features='sqrt',\n                                            min_samples_split = 10,learning_rate = 0.005,loss = 'huber',\n                                            min_samples_leaf=15,random_state =10)\nGBoost.fit(X_train, y_train)","ffdb11ae":"y_pred = GBoost.predict(X_test)\nprint('GBosst score:',GBoost.score(X_train,y_train))\nprint('all gives R2 score',r2_score(y_pred,y_test))\nprint('all gives MSE is:',mean_squared_error(y_test, y_pred))\nrms = np.sqrt(mean_squared_error(y_test, y_pred))\nprint('all gives RMSE is:',rms)\nprint(\"-----------------------------------------\")","bcc5134b":"#Testing on Test Dataset\ny_pred = GBoost.predict(df_ts_final)","efef7ca9":"makecsv(y_pred,\"gbsol.csv\")","d8ca55a6":"#### The End","6d7d6d0e":"### RandomForest  Algorithm","434ee0f8":"#### Make Csv for  result","e008894a":"### XGB Regressor Algorithm","0c6e4d4e":"# Predict the Housing Price\n##### By Chinmay","c31122be":"#### Make Csv for reult","850f1eef":"### Models Using all Features","eafd4c69":"### Gradient Boosting Algorithm","56204616":"##### Make Csv for result","eb86d999":"#### Single Linear Regression On all feat","f3a59b91":"## Multiple LInear Regression Algorithm","11b85f1c":"##### Make Csv for result","f63813d4":"##### NO More NUll values","abad041c":"#### Data Analysis","4d7c69d8":"## Model build","4f35c662":"### Multiple LInear Regression Using RFE","72425300":"##### Make Csv for result","2086eafe":"##### Data Cleaning","da6386c8":"#### Input features 'n' u want to train model with"}}