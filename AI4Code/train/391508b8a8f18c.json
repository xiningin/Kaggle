{"cell_type":{"8aaee713":"code","3a6eca00":"code","470e96fa":"code","d5ad770e":"code","86bceac2":"code","20a0844c":"code","fb36eaf5":"code","c0ef4398":"code","bb00f77e":"code","36525496":"markdown","db4b666a":"markdown","4d0d9e5a":"markdown","af9d1159":"markdown"},"source":{"8aaee713":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n'''\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n'''\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a6eca00":"#download YOLO-V5\n!git clone https:\/\/github.com\/ultralytics\/yolov5.git\n\n#install all requirements\n!pip install -r requirements.txt\n\n!pip install bs4","470e96fa":"from glob import glob\nfrom bs4 import BeautifulSoup\nfrom distutils.dir_util import copy_tree\nfrom sklearn.model_selection import train_test_split\nimport yaml\n\nlabels_dir = list(sorted(glob(\"\/kaggle\/input\/dog-and-cat-detection\/annotations\/*.xml\")))\n\n#1. change labels from xml to txt for train\n#YOLO-V5 need label with (class x y width height)\ntext_labels_dir = '\/dataset\/export\/labels'\nos.makedirs(text_labels_dir, exist_ok = True)\n\nfor labels in labels_dir : \n    with open(labels, 'r') as f :\n        data = f.read()\n        soup = BeautifulSoup(data, 'xml')\n\n        img_size = soup.find('size')\n        img_width = int(img_size.find('width').text)\n        img_height = int(img_size.find('height').text)\n\n        objects = soup.find_all('object')\n        obj_list = []\n        class_lambda = lambda x : 0 if x == 'cat' else 1\n        for obj in objects :\n            label = class_lambda(obj.find('name').text)\n            xmin = int(obj.find('xmin').text)\n            ymin = int(obj.find('ymin').text)\n            xmax = int(obj.find('xmax').text)\n            ymax = int(obj.find('ymax').text)\n\n            x = ((xmin + xmax) \/ 2) \/ img_width\n            y = ((ymin + ymax) \/ 2) \/ img_height\n            width = (xmax - xmin) \/ img_width\n            height = (ymax - ymin) \/ img_height\n\n            obj_list.append([label, x, y, width, height])\n        \n        txt_label_dir = text_labels_dir + '\/' + labels[47:-4] + '.txt'\n        with open(txt_label_dir, 'w') as f :\n            for obj in obj_list :\n                f.write(str(obj[0]) + ' ' +\\\n                        str(obj[1]) + ' ' +\\\n                        str(obj[2]) + ' ' +\\\n                        str(obj[3]) + ' ' +\\\n                        str(obj[4]))\n\n                \n                \n#2. copy images to dataset\/export\/images\nimgs_dir = '\/dataset\/export\/images'\nos.makedirs(imgs_dir, exist_ok = True)\ncopy_tree(\"\/kaggle\/input\/dog-and-cat-detection\/images\",\\\n          imgs_dir)\n\n\n#3. split train and valid datas\nimg_list = glob(imgs_dir + '\/*.png')\ntrain_img, valid_img = train_test_split(img_list, test_size = 0.1, random_state = 0)\n\n\n#4. save train and valid img list\nwith open('\/dataset\/train.txt', 'w') as f:\n    f.write('\\n'.join(train_img) + '\\n')\nwith open('\/dataset\/val.txt', 'w') as f:\n    f.write('\\n'.join(valid_img) + '\\n')\n\n#5. make yaml file for train\nwith open('dataset\/data.yaml', 'w') as f:\n    data = {\n        'train' : '\/dataset\/train.txt',\n        'val' : '\/dataset\/val.txt',\n        'nc' : 2, #number of classes\n        'names' : ['cat', 'dog']\n    }\n    yaml.dump(data, f)","d5ad770e":"%cd \/dataset\n%ls\n%cd \/dataset\/export\n%ls","86bceac2":"import wandb\nfrom kaggle_secrets import UserSecretsClient\n\n#U can insert your wandb-key on Add-ons tab\n\nuser_secrets = UserSecretsClient()\npersonal_key = user_secrets.get_secret(\"wandb-key\")\n\n!wandb login $personal_key","20a0844c":"%cd \/yolov5\n\n!python train.py \\\n--img 416 \\\n--batch 16 \\\n--epochs 10 \\\n--data \/dataset\/data.yaml \\\n--cfg .\/models\/yolov5s.yaml \\\n--weights yolov5s.pt \\\n--name cat_and_dog_yolov5s_results","fb36eaf5":"#check the model path (the last one)\n\n%cd \/yolov5\/runs\/train\n%ls","c0ef4398":"from IPython.display import Image\nimport os\n\nval_img = valid_img[55]\nprint(val_img)\n\n%cd \/yolov5\n!python detect.py \\\n--weights \/yolov5\/runs\/train\/cat_and_dog_yolov5s_results10\/weights\/best.pt \\\n--img 416 \\\n--conf 0.5 \\\n--source \"{val_img}\"","bb00f77e":"#U can check the path on the output of above.\n#In this case, I can check the path on\n# \"Results saved to runs\/detect\/exp6\"\nImage(os.path.join('\/yolov5\/runs\/detect\/exp7', os.path.basename(val_img)))","36525496":"## Train data\nyou can get tips from\n\nhttps:\/\/github.com\/ultralytics\/yolov5\/wiki\/Train-Custom-Data","db4b666a":"## Show Valid","4d0d9e5a":"## Install YOLO-V5\ngithub :\n\nhttps:\/\/github.com\/ultralytics\/yolov5","af9d1159":"## Preprocess Datas"}}