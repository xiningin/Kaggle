{"cell_type":{"c1a4955a":"code","b3b40663":"code","49e9b805":"code","7f715d70":"code","53d55791":"code","129abec1":"code","fd160fbf":"code","c13592cb":"code","c218fe47":"code","5b791326":"code","d3fc2ccc":"code","ebfb2772":"code","18a774aa":"code","d1e9980e":"code","055a38a6":"code","7cec804f":"code","2c555282":"code","1e8ae753":"code","d4d925f8":"code","9267252d":"code","d1bae66a":"code","62153060":"code","f7925e74":"code","3569ac54":"code","199ae6af":"code","87fdb158":"code","7409a06a":"code","a0162989":"code","bcdb8943":"code","d8204082":"code","eb87f928":"code","6ef207df":"code","ddb6e1a3":"code","3829f5ad":"code","2748b424":"code","f6e8ea32":"code","9fa49533":"code","fc27c543":"code","53972420":"code","bade9d95":"code","57418388":"code","104b442f":"code","b1be26ca":"markdown","b7f50e66":"markdown","7f4b3811":"markdown","723dd021":"markdown","d820383f":"markdown","7fb9a508":"markdown","cfbe43f1":"markdown","116268c3":"markdown","2a93e957":"markdown","c7c9beb7":"markdown","8f17db53":"markdown","613a3764":"markdown","cbdb0cc7":"markdown","51cb988e":"markdown","a0166b4d":"markdown","eee1a422":"markdown","89bad2b7":"markdown","aee355bd":"markdown","3488aae2":"markdown","e658400a":"markdown","9bbe140b":"markdown","5c4d02f6":"markdown","291ec281":"markdown","27f1095c":"markdown","76a18218":"markdown","113514d1":"markdown","c3286475":"markdown","c61cdbf9":"markdown","db386b8b":"markdown","aff43553":"markdown"},"source":{"c1a4955a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b3b40663":"import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (9, 5)","49e9b805":"df = pd.read_csv('\/kaggle\/input\/iris\/Iris.csv', header=0, names = ['sepal_length','sepal_width','petal_length','petal_width','species'])\ndf.head()","7f715d70":"# dimensions of the dataset\ndf.ndim","53d55791":"# shape of the dataset\n# prints no. of row and columns\ndf.shape","129abec1":"# size of the dataset (total umber of elements)\ndf.size","fd160fbf":"# columns present in our dataset\ndf.columns","c13592cb":"# print a concise summary of a DataFrame\ndf.info()","c218fe47":"# provides detailed description of dataframe \n# default: make staistical analysis only in numerrical columns\ndf.describe()","5b791326":"# number of samples in each class\ndf['species'].value_counts()","d3fc2ccc":"# check for null values\ndf.isnull().sum()","ebfb2772":"# Visualisations on target column\nplt.title('Species Count')\nsns.countplot(x=df['species'])","18a774aa":"# comparison between sepal length and sepal width\nplt.title('Comparison between sepal width and length')\nsns.scatterplot(x=df['sepal_length'], y=df['sepal_width'])","d1e9980e":"# comparison between sepal length and sepal width on the basis of species\nplt.title('Comparison between various species based on sepal lenght and width')\nsns.scatterplot(x = df['sepal_length'], y = df['sepal_width'], hue = df['species']);","055a38a6":"# comparison between petal length and petal width\nplt.title('Comparison between petal width and length')\nsns.scatterplot(x = df['petal_length'], y = df['petal_width'])","7cec804f":"# comparison between petal length and petal width on the basis of species\nplt.title('Comparison between various species based on petal lenght and width')\nsns.scatterplot(x = df['petal_length'], y = df['petal_width'], hue = df['species'])","2c555282":"# to determine correlation between features\nsns.pairplot(df, hue = 'species')\nplt.show()","1e8ae753":"plt.figure(figsize=(12,10))\nplt.subplot(2,2,1)\nsns.boxplot(x=df[\"species\"],y=df['sepal_length'])\nplt.subplot(2,2,2)\nsns.boxplot(x=df[\"species\"],y=df['sepal_width'])\nplt.subplot(2,2,3)\nsns.boxplot(x=df[\"species\"],y=df['petal_length'])\nplt.subplot(2,2,4)\nsns.boxplot(x=df[\"species\"],y=df['petal_width'])","d4d925f8":"plt.figure(figsize=(12,10))\nplt.subplot(2,2,1)\nsns.violinplot(x=df[\"species\"],y=df['sepal_length'])\nplt.subplot(2,2,2)\nsns.violinplot(x=df[\"species\"],y=df['sepal_width'])\nplt.subplot(2,2,3)\nsns.violinplot(x=df[\"species\"],y=df['petal_length'])\nplt.subplot(2,2,4)\nsns.violinplot(x=df[\"species\"],y=df['petal_width'])","9267252d":"#Plot 1\nsns.FacetGrid(df, hue=\"species\", height=5) \\\n.map(sns.distplot, \"sepal_length\") \\\n.add_legend()\n\n#Plot 2\nsns.FacetGrid(df, hue=\"species\", height=5) \\\n.map(sns.distplot, \"sepal_width\") \\\n.add_legend()\n\n#Plot 3\nsns.FacetGrid(df, hue=\"species\", height=5) \\\n.map(sns.distplot, \"petal_length\") \\\n.add_legend()\n\n#Plot 4\nsns.FacetGrid(df, hue=\"species\", height=5) \\\n.map(sns.distplot, \"petal_width\") \\\n.add_legend()\n\nplt.show()","d1bae66a":"df.groupby('species').agg(['mean', 'median'])","62153060":"df.corr()","f7925e74":"sns.heatmap(df.corr(), cmap='Blues', annot = True)","3569ac54":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","199ae6af":"df['species'] = le.fit_transform(df['species'])\ndf.head()","87fdb158":"le.classes_","7409a06a":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import svm\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics","a0162989":"# train test split\nX = df.drop(columns=['species'])\nY = df['species']\n\nx_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.25, random_state = 5 )\nprint(x_train.shape)\nprint(x_test.shape)","bcdb8943":"# model training\nlr_model = LogisticRegression()\nlr_model.fit(x_train,y_train)\nlr_model","d8204082":"# model prediction\nlr_predict = lr_model.predict(x_test)\nlr_accuracy = metrics.accuracy_score(lr_predict,y_test)\nprint(\"Logistic Regression Model Accuracy is {} \".format(lr_accuracy))","eb87f928":"# model training\nknn_model = KNeighborsClassifier(n_neighbors = 5)\nknn_model.fit(x_train,y_train)\nknn_model","6ef207df":"# model prediction\nknn_predict = knn_model.predict(x_test)\nknn_accuracy = metrics.accuracy_score(knn_predict, y_test)\nprint(\"KNN Model Accuracy is {} \".format(knn_accuracy))","ddb6e1a3":"# experimenting with different n_neighbours values\nk_range = list(range(1,26))\nscores = []\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    knn.fit(x_train, y_train)\n    y_pred = knn.predict(x_test)\n    scores.append(metrics.accuracy_score(y_test, y_pred))\n    \nplt.plot(k_range, scores)\nplt.xlabel('Value of k for KNN')\nplt.ylabel('Accuracy Score')\nplt.title('Accuracy Scores for Values of k of k-Nearest-Neighbors')\nplt.show()","3829f5ad":"# retrain model with best n_neighbour value\n# model training\nknn_model = KNeighborsClassifier(n_neighbors = 20)\nknn_model.fit(x_train,y_train)\n\n# model prediction\nknn_predict = knn_model.predict(x_test)\nknn_accuracy = metrics.accuracy_score(knn_predict, y_test)\nprint(\"KNN Model Accuracy is {} \".format(knn_accuracy))","2748b424":"# model training\nsvm_model = svm.SVC()\nsvm_model.fit(x_train,y_train)\nsvm_model","f6e8ea32":"# model prediction\nsvm_predict = svm_model.predict(x_test)\nsvm_accuracy = metrics.accuracy_score(svm_predict,y_test)\nprint(\"SVM Model Accuracy is {} \".format(svm_accuracy))","9fa49533":"# model training\ntree_model = DecisionTreeClassifier()\ntree_model.fit(x_train,y_train)\ntree_model","fc27c543":"# model prediction\ntree_predict = tree_model.predict(x_test)\ntree_accuracy = metrics.accuracy_score(tree_predict,y_test)\nprint(\"DecisionTree Model Accuracy is {} \".format(tree_accuracy))","53972420":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, knn_predict)\ncm","bade9d95":"# Classification report\nprint('Classification Report\\n',metrics.classification_report(y_test, knn_predict))","57418388":"# to visualise confusion matrix\nimport seaborn as sn\nplt.figure(figsize = (8,6))\nsn.heatmap(cm, annot=True)\nplt.xlabel('Predicted')\nplt.ylabel('Actual')","104b442f":"report = { 'model' : ['Logistic Regression','K-Nearest Neighbours','SVM','Decision Tree'],\n           'accuracy' : [lr_accuracy,knn_accuracy,svm_accuracy,tree_accuracy]}\n\nreport_df = pd.DataFrame(report)\nreport_df","b1be26ca":"### Analysis:\n    Setosa is having less distribution and density in case of petal length & width.\n    Versicolor is distributed in a average manner and average features in case of petal length & width.\n    Virginica is highly distributed with large no .of values and features in case of sepal length & width.\n    High density values are depicting the mean\/median values, for example: Iris Setosa has highest density at 5.0 cm ( sepal length feature) which is also the median value(5.0).","b7f50e66":"## K-Nearest Neighbours Model","7f4b3811":"### Analysis:\n\n(1) Plot 1 shows that there is a significant amount of overlap between the species on sepal length, so it is not an effective Classification feature. <br>\n(2) Plot 2 shows that there is even higher overlap between the species on sepal width, so it is not an effective Classification feature. <br>\n(3) Plot 3 shows that petal length is a good Classification feature as it clearly separates the species . The overlap is extremely less (between Versicolor and Virginica) , Setosa is well separated from the rest two.<br>\n(4) Plot 4 also shows that petal width is a good Classification feature . The overlap is significantly less (between Versicolor and Virginica) , Setosa is well separated from the rest two.<br>\n\n### Choosing Plot 3 as the best parameter for estimation,\n(1) The pdf curve of Iris Setosa ends roughly at 2.1. <br>\n(2) If petal length < 2.1, then species is Iris Setosa. <br>\n(3) The point of intersection between pdf curves of Versicolor and Virginica is roughly at 4.8 <br>\n(4) If petal length > 2.1 and petal length < 4.8 then species is Iris Versicolor. <br> \n(5) If petal length > 4.8 then species is Iris Virginica. <br>","723dd021":"### Analysis:\n    Iris Setosa species has smaller sepal length but higher width.\n    Versicolor lies in almost middle for length as well as width.\n    Virginica has larger sepal lengths and smaller sepal widths.","d820383f":"## Note:\nSince, this is a small dataset, here We perform training will all the features. <br>\nBut, From the Visualizations, We may conclude that 'petal_length' and 'petal_width' are the best parameters for classification. So, We may also only use these features in training.<br>\nBoth model gives the same performance. So, You may also try only with 'petal_length' and 'petal_width' features.","7fb9a508":"### Analysis:\n    petal length and petal width are the most useful features to identify various flower types.\n    While Setosa can be easily identified (linearly separable), virginica and Versicolor have some overlap (almost linearly separable).","cfbe43f1":"## Correlation Between Variables","116268c3":"# Import modules and Load data","2a93e957":"### Analysis:\n    Setosa species have the smallest petal length as well as petal width.\n    Versicolor species have average petal length and petal width.\n    Virginica species have the highest petal length as well as petal width.","c7c9beb7":"## Pair Plot\n**In seaborn library we have pairplot function which is very useful to scatter plot all the features at once instead of plotting them individually.** <br>\nPair plot will only plot the variables which are numerical. The variables which are of String type, by default pair plot won\u2019t plot automatically. If you want to plot, then you need to encode it as numerical. However, Seaborn will encode internally and assign a label to each unique value in the non-numerical values.","8f17db53":"### Analysis:\n    Setosa is having smaller feature and less distributed.\n    Versicolor is distributed in a average manner and average features.\n    Virginica is highly distributed with large no .of values and features.\n    Clearly the mean\/ median values are being shown by each plots for various features.","613a3764":"## Dataset Information:\nThe data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2, the latter are NOT linearly separable from each other.\n\n## Attribute Information:\n<ul>\n<li>sepal length in cm <\/li>\n<li>sepal width in cm <\/li>\n<li>petal length in cm <\/li>\n<li>petal width in cm <\/li>\n<\/ul>\n\n## Target Class: \n<ul>\n<li>Iris Setosa <\/li>\n<li>Iris Versicolour <\/li>\n<li>Iris Virginica<\/li>\n<\/ul>","cbdb0cc7":"# Model Training\n### Label Encoding\nMachines understand numbers, not text. We need to convert each text category to numbers in order for the machine to process them using mathematical equations. <br>\nLabel Encoding is a popular encoding technique for handling categorical variables. In this technique, each label is assigned a unique integer based on alphabetical ordering.","51cb988e":"### Import libraries","a0166b4d":"## Logistic Regression Model","eee1a422":"## Visualization","89bad2b7":"# Classification of iris-plants","aee355bd":"## Count Plot","3488aae2":"## DecisionTreeClassifier Model","e658400a":"## SVM Model","9bbe140b":"## Violin Plot\n**Using Violin plot, we can visualize how the categorical feature \u201cSpecies\u201d is distributed with all other four input variables. <br>\nThe violinplot shows density of the length and width in the species. The thinner part denotes that there is less density whereas the fatter part conveys higher density**","5c4d02f6":"## Confusion Matrix","291ec281":"# Exploratory Data Analysis (EDA)\n## Understanding Data","27f1095c":"# Conclusion:\nThus, we may conclude that KNN model has the best accuracy.","76a18218":"## Final Classification Report (Model Comparison)","113514d1":"## Scatter Plots\n### Visualising relations between variables","c3286475":"## Check mean and median","c61cdbf9":"## Histograms and PDF\nA histogram is an accurate graphical representation of the distribution of numerical data. It is an estimate of the probability distribution of a continuous variable.To construct a histogram, the first step is to \u201cbin\u201d the range of values \u2014 that is, divide the entire range of values into a series of intervals \u2014 and then count how many values fall into each interval. The bins are usually specified as consecutive, non-overlapping intervals of a variable. <br>\n\n***EG: For Petal-length, sns.FacetGrid(df, hue=\"species\", height=5).map(sns.distplot, \"petal_width\").add_legend()** <br>\nHere in the figure, x-axis is the petal length and the y axis is a count of no of points that exist in the given range. And using this plot we can able to observe how many points are there in particular regions.Histogram basically represents how many points exist for each value on the x-axis.","db386b8b":"## Box Plot\nUse boxplot to see how the categorical feature \u201cSpecies\u201d is distributed with all other four input variables.","aff43553":"### Analysis:\nFor the chosen parameter (Petal Length),\n\n    By looking at mean we can say that satosa has less patel length in compare to virginica and versicolor. \n    And virginica and versicolor both have slightly closer Patel length."}}