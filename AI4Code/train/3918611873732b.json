{"cell_type":{"91c5dd87":"code","bbabe3f1":"code","c5889e6f":"code","9b6bf2fd":"code","96009a98":"code","2204e364":"code","869f7773":"code","15224639":"code","3574b8a7":"code","102e7fa3":"code","3b1c123a":"code","c8ddbe87":"code","df056455":"code","c6239ef3":"code","f42e00c1":"code","ae8ccd98":"code","da042248":"code","8c6bc3d5":"code","4ae1676e":"code","945afdbe":"code","0d129b93":"code","b03d87c4":"code","f97c03ab":"code","630980c3":"code","2ef36bbd":"code","cc16cb09":"code","0fa3765b":"markdown","3249190f":"markdown","1c19ccae":"markdown","18ef6eea":"markdown","f174a840":"markdown","870d1eeb":"markdown","0cd0c62f":"markdown","c113ef81":"markdown","fa23f239":"markdown","054a7e57":"markdown","80b57577":"markdown","fc3869e4":"markdown","6b23f76e":"markdown","5a33457c":"markdown","e69d03f2":"markdown","d5348307":"markdown","6d4e7d19":"markdown","ea0eef8b":"markdown","e5c74eaa":"markdown","c08c6804":"markdown"},"source":{"91c5dd87":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ndf = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndf.head()","bbabe3f1":"df.isnull().sum()","c5889e6f":"df.describe()","9b6bf2fd":"not_renting_out = np.array(df['availability_365']==0).sum()\nprint(not_renting_out)\nprint(not_renting_out\/len(df['price'])*100)","96009a98":"print(df.shape)\ndf = df[df['availability_365']!=0]\nprint(df.shape) #New DF shape","2204e364":"df.dtypes","869f7773":"print(\"Room types - \", len(df['room_type'].value_counts()))\nprint(\"Neighbourhood groups - \", len(df['neighbourhood_group'].value_counts()))\nprint(\"Neighbourhoods - \", len(df['neighbourhood'].value_counts()))","15224639":"f, axs = plt.subplots(1,2, figsize=(12,5))\n#In decscending order by frequency\/counts - \nsns.countplot(df['room_type'], order=df['room_type'].value_counts().index,ax=axs[0])\nsns.countplot(df['neighbourhood_group'], order=df['neighbourhood_group'].value_counts().index, ax=axs[1])","3574b8a7":"df['room_type'] = df['room_type'].astype('category').cat.codes\ndf['neighbourhood_group'] = df['neighbourhood_group'].astype('category').cat.codes\nf, axs = plt.subplots(1,2, figsize=(12,5))\nsns.countplot(df['room_type'], ax=axs[0], order=df['room_type'].value_counts().index)\nsns.countplot(df['neighbourhood_group'],order=df['neighbourhood_group'].value_counts().index, ax=axs[1])","102e7fa3":"df.head()","3b1c123a":"df.drop(['id', 'name', 'host_id', 'host_name', 'neighbourhood', 'last_review', 'reviews_per_month'], axis=1, inplace=True)","c8ddbe87":"df.head()","df056455":"plt.figure(figsize=(10,10))\nsns.heatmap(df.corr().round(3), annot=True)","c6239ef3":"from sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\n\nY = df['price']\nX = df[['neighbourhood_group', 'longitude', 'room_type', 'availability_365', 'calculated_host_listings_count']]\nX = preprocessing.normalize(X)\nX = np.hstack((np.ones( (len(df['price']) ,1)), X))\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","f42e00c1":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error,r2_score\n\nlin_model = LinearRegression().fit(X_train, Y_train)","ae8ccd98":"y_train_predict = lin_model.predict(X_train)\nrmse = (np.sqrt(mean_squared_error(Y_train, y_train_predict)))\nr2 = r2_score(Y_train, y_train_predict)\n\nprint(\"The model performance for training set\")\nprint(\"--------------------------------------\")\nprint('RMSE is {}'.format(rmse))\nprint('R2 score is {}'.format(r2*100))\nprint(\"\\n\")\n\n# model evaluation for testing set\ny_test_predict = lin_model.predict(X_test)\nrmse = (np.sqrt(mean_squared_error(Y_test, y_test_predict)))\nr2 = r2_score(Y_test, y_test_predict)\n\nprint(\"The model performance for testing set\")\nprint(\"--------------------------------------\")\nprint('RMSE is {}'.format(rmse))\nprint('R2 score is {}'.format(r2*100))","da042248":"error_frame = pd.DataFrame({'Actual': np.array(Y_test).flatten(), 'Predicted': y_test_predict.flatten()})\nerror_frame.head(10)","8c6bc3d5":"df1 = error_frame[:50]\ndf1.plot(kind='bar',figsize=(24,20))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","4ae1676e":"Q1 = df.quantile(0.25)\nQ3 = df.quantile(0.75)\nIQR = Q3 - Q1","945afdbe":"IQR_df = df[~((df < (Q1 - 1.5 * IQR)) |(df > (Q3 + 1.5 * IQR))).any(axis=1)]\nIQR_df.shape","0d129b93":"IQR_df.describe()","b03d87c4":"Y = IQR_df['price']\nX = IQR_df[['neighbourhood_group', 'longitude', 'room_type', 'availability_365', 'calculated_host_listings_count']]\nX = preprocessing.normalize(X)\nX = np.hstack((np.ones( (len(IQR_df['price']) ,1)), X))\n\n\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","f97c03ab":"lin_model = LinearRegression().fit(X_train, Y_train)","630980c3":"y_train_predict = lin_model.predict(X_train)\nrmse = (np.sqrt(mean_squared_error(Y_train, y_train_predict)))\nr2 = r2_score(Y_train, y_train_predict)\n\nprint(\"The model performance for training set\")\nprint(\"--------------------------------------\")\nprint('RMSE is {}'.format(rmse))\nprint('R2 score is {}'.format(r2*100))\nprint(\"\\n\")\n\n# model evaluation for testing set\ny_test_predict = lin_model.predict(X_test)\nrmse = (np.sqrt(mean_squared_error(Y_test, y_test_predict)))\nr2 = r2_score(Y_test, y_test_predict)\n\nprint(\"The model performance for testing set\")\nprint(\"--------------------------------------\")\nprint('RMSE is {}'.format(rmse))\nprint('R2 score is {}'.format(r2*100))","2ef36bbd":"error_frame = pd.DataFrame({'Actual': np.array(Y_test).flatten(), 'Predicted': y_test_predict.flatten()})\nerror_frame.head(10)","cc16cb09":"df1 = error_frame[:50]\ndf1.plot(kind='bar',figsize=(24,20))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","0fa3765b":"Convert the room types and neighbourhood groups to numerical categorical data. ","3249190f":"Let's find out how many unique categories lie in those three","1c19ccae":"Let's further examine the data frame in detail. There seem to be 3 kinds of categorical data - neighbourhood_group, neighbourhood and room_type.","18ef6eea":"Much better, but we also had to ignore a large amount of data to get here.\n\nStill a lot of scope for improvement.","f174a840":"Split the new DataFrame into X_train, Y_train, X_test and Y_test again.","870d1eeb":"Checking the dataframe","0cd0c62f":"Now our DataFrame has only numerical data. Let's go ahead and plot the correlation plot and find what affects the price the most - ","c113ef81":"Well that's a very disappointing R2 result (this is out of 100).\nIt means that our model can't explain 95%+ variability of the model.","fa23f239":"Checking the missing data. As of now, nothing is changed. \n\nThings to do - Fill the last review data and use the datetime to find how many days it has passed since the last review.","054a7e57":"We will use the IQR metric to remove outliers, then fit again. \nFrom wikipedia - \n>The interquartile range (IQR), also called the midspread or middle 50%, or technically H-spread, is a measure of statistical dispersion, being equal to the difference between 75th and 25th percentiles, or between upper and lower quartiles, IQR = Q3 \u2212 Q1.","80b57577":"Make a new DataFrame with outliers removed.","fc3869e4":"**#Work in Progress**\n\nLinear regression on New York City Airbnb Open Data. Linear regression is probably not a good model here, but this dataset reminds me of Boston housing data set and I was curious.\n\nImporting essential libraries and examining the data.","6b23f76e":"We take in consideration only the features that seem important and normalize them. Normalizing refers to making the features on the same scale. For example, price can vary from 0 to thousands of dollars, but room_type can only be varied from 0, 1 and 2, so we use normalization to scale all of the features to 0 to 1.\n\nThen we split the overall data into 80% training data and 20% testing data.","5a33457c":"We can see neighbourhood_group and room_type were replaced to be numerical data. \nWe will drop features that are unlikely to affect the price - ID, name, host_id, host_name.\nWe will also drop features that have largely incomplete data - last_review, reviews_per_month or have too many categories - neighbourhood.","e69d03f2":"It's unlikely that owners that don't bother to rent out their homes even once a year are updated with the prices, so we will remove them from our considerations.\n\nAlso, many pranksters could rent a place at an extravagant price or (0 price) and keep it at 0 day availability, and that is harmful to our model.\n\nWe can see that the row length of our dataframe fell down by 17533. We  could also extrapolate this logic to those with availability less than 5 days, but they might be more aware of price and less likely to be pranksters.","d5348307":"A few inferences - \nThe std. dev for price is very high.\n\nThe 25% Q1  for availablity_365 is 0, so many owners don't rent out their properties for even a single day in an year.\n\nIf we find exactly how many such cases are there, it's 17533, which is about 35.85% of the dataset.","6d4e7d19":"Import LinearRegression from sklearn and fit our training data. We will be using 2 metrics- RMSE and R2.","ea0eef8b":"Work in progress.","e5c74eaa":"Let's try and plot 50 results. ","c08c6804":"There are too many neighbourhood categories. \nWe will be proceeding with only room types and neighbourhood groups, because it is likely that neighbourhood inferences are covered in (latitude, longitude) already.\n\nVisualizing the room types and neighbourhoods - "}}