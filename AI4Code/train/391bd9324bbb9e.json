{"cell_type":{"ccc23144":"code","e51b7463":"code","df573bd7":"code","eafb1475":"code","a1fa2ac4":"code","ba2fd326":"code","76446cf4":"code","bc7ec62f":"code","29900c72":"code","e9a78b65":"code","0e434fad":"code","fbc144e4":"code","826fb71a":"code","ec5cceff":"code","94c8552d":"code","87f28576":"code","adee20b2":"code","21e695f4":"code","36512b8e":"code","9bee16e3":"code","5778af65":"code","ee287d4d":"code","fa1f4c2a":"code","41eacf02":"code","df65f1d4":"code","b04239b4":"code","bacbafd6":"code","2531b5b0":"code","0867f50c":"code","32c5be1a":"code","d92a2b50":"code","a237d93a":"code","58a82017":"code","a26dd4b0":"code","0c8921cd":"code","f428178d":"code","7d57ad98":"code","a87f3105":"code","0afcfc32":"code","b47b2e45":"code","c9fdf23e":"code","cf0913a6":"code","307967cc":"code","b63abf64":"code","1e940ae7":"code","2c24bd22":"code","cd2ab333":"code","59dd3452":"code","b3c6afe6":"code","c40a154e":"code","7972f20f":"code","8f0516d6":"code","4261ff40":"code","b46e18eb":"code","a9b9ae6b":"code","6f98012d":"code","14d892e3":"code","c01b9076":"code","203e29e2":"code","eeabbad1":"code","c31f02c1":"code","089d5dff":"code","9d84264c":"code","4673b853":"code","0c65e22b":"code","0fa4de70":"code","3c8b873e":"code","03082a98":"code","f9b2a74f":"code","496fc176":"code","7cf62f79":"code","11b211ba":"markdown","9efcf5a2":"markdown","2f81cc3a":"markdown","0176efa1":"markdown","a6f6718e":"markdown","7b0fafdf":"markdown","af13444a":"markdown","0fdc6fe0":"markdown","5694aa2d":"markdown","3603c31e":"markdown","af8af600":"markdown","baf5b5c3":"markdown","11f2be92":"markdown","79c7dc74":"markdown","b94e1a17":"markdown","880866a9":"markdown","904f1d79":"markdown","c2bcb468":"markdown","2df35317":"markdown","de165f50":"markdown","da3dbe52":"markdown"},"source":{"ccc23144":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingRegressor\nfrom sklearn.ensemble  import HistGradientBoostingClassifier\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import accuracy_score","e51b7463":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')","df573bd7":"print(df_train.shape)\nprint(df_test.shape)","eafb1475":"print(df_train.info())\ndf_train.head(5)","a1fa2ac4":"print(df_test.info())\ndf_test.head(5)","ba2fd326":"print(df_train.isnull().sum())","76446cf4":"print(df_test.isnull().sum())","bc7ec62f":"df_corr = df_train.corr()\ndf_corr[\"Age\"].sort_values(ascending=False)","29900c72":"# Copied from https:\/\/www.kaggle.com\/gunesevitan\/titanic-advanced-feature-engineering-tutorial?scriptVersionId=27280410&cellId=14\n\nage_by_pclass_sex = df_train.groupby(['Sex', 'Pclass']).median()['Age']\n\nfor pclass in range(1, 4):\n    for sex in ['female', 'male']:\n        print('Median age of Pclass {} {}s: {}'.format(pclass, sex, age_by_pclass_sex[sex][pclass]))\nprint('Median age of all passengers: {}'.format(df_train['Age'].median()))","e9a78b65":"df_train['Age'] = df_train.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))","0e434fad":"df_test['Age'] = df_test.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))","fbc144e4":"df_train[df_train['Embarked'].isnull()]","826fb71a":"df_train['Embarked'] = df_train['Embarked'].fillna('S')","ec5cceff":"df_corr[\"Fare\"].sort_values(ascending=False)","94c8552d":"df_test[df_test['Fare'].isnull()]","87f28576":"mid_fare = df_train.groupby(['Pclass', 'Parch', 'SibSp']).Fare.median()[3][0][0]\nmid_fare","adee20b2":"df_test['Fare'] = df_test['Fare'].fillna(mid_fare)","21e695f4":"df_train = df_train.drop('Cabin', axis=1)\ndf_test = df_test.drop('Cabin', axis=1)","36512b8e":"print(df_train.isnull().sum())","9bee16e3":"print(df_test.isnull().sum())","5778af65":"survived_count = df_train['Survived'].value_counts()[1]\nnot_survived_count = df_train['Survived'].value_counts()[0]","ee287d4d":"print('survived : ' + str(survived_count))\nprint('not_survived : ' + str(not_survived_count))","fa1f4c2a":"survived_per = survived_count \/ df_train.shape[0] * 100\nnot_survived_per = not_survived_count \/ df_train.shape[0] * 100","41eacf02":"print('survived % : ' + str(survived_per))\nprint('not_survived % : ' + str(not_survived_per))","df65f1d4":"plt.figure(figsize=(10, 8))\nsns.countplot(df_train['Survived'])\n\nplt.xlabel('Survival', size=15, labelpad=15)\nplt.ylabel('Passenger Count', size=15, labelpad=15)\nplt.xticks((0, 1), ['Not Survived ({0:.2f}%)'.format(not_survived_per), 'Survived ({0:.2f}%)'.format(survived_per)])\nplt.tick_params(axis='x', labelsize=13)\nplt.tick_params(axis='y', labelsize=13)\n\nplt.show()","b04239b4":"df_train = df_train.drop(['PassengerId'], axis=1)\ndf_test = df_test.drop(['PassengerId'], axis=1)","bacbafd6":"plt.figure(figsize = (15,9))\nsns.heatmap(df_train.corr(), annot = True, cmap='coolwarm')","2531b5b0":"plt.figure(figsize = (15,9))\nsns.heatmap(df_test.corr(), annot = True, cmap='coolwarm')","0867f50c":"cont_features = ['Age', 'Fare']\nsurv = df_train['Survived'] == 1\n\nfig, axs = plt.subplots(ncols=2, nrows=2, figsize=(20, 20))\nplt.subplots_adjust(right=1.5)\n\nfor i, feature in enumerate(cont_features):    \n    # Distribution of survival in feature\n    sns.distplot(df_train[~surv][feature], label='Not Survived', hist=True, color='#e74c3c', ax=axs[0][i])\n    sns.distplot(df_train[surv][feature], label='Survived', hist=True, color='#2ecc71', ax=axs[0][i])\n    \n    # Distribution of feature in dataset\n    sns.distplot(df_train[feature], label='Training Set', hist=False, color='#e74c3c', ax=axs[1][i])\n    sns.distplot(df_test[feature], label='Test Set', hist=False, color='#2ecc71', ax=axs[1][i])\n    \n    axs[0][i].set_xlabel('')\n    axs[1][i].set_xlabel('')\n    \n    for j in range(2):        \n        axs[i][j].tick_params(axis='x', labelsize=20)\n        axs[i][j].tick_params(axis='y', labelsize=20)\n    \n    axs[0][i].legend(loc='upper right', prop={'size': 20})\n    axs[1][i].legend(loc='upper right', prop={'size': 20})\n    axs[0][i].set_title('Distribution of Survival in {}'.format(feature), size=20, y=1.05)\n\naxs[1][0].set_title('Distribution of {} Feature'.format('Age'), size=20, y=1.05)\naxs[1][1].set_title('Distribution of {} Feature'.format('Fare'), size=20, y=1.05)\n        \nplt.show()","32c5be1a":"cat_features = ['Embarked', 'Parch', 'Pclass', 'Sex', 'SibSp']\n\nfig, axs = plt.subplots(ncols=2, nrows=3, figsize=(20, 20))\nplt.subplots_adjust(right=1.5, top=1.25)\n\nfor i, feature in enumerate(cat_features, 1):    \n    plt.subplot(2, 3, i)\n    sns.countplot(x=feature, hue='Survived', data=df_train)\n    \n    plt.xlabel('{}'.format(feature), size=20, labelpad=15)\n    plt.ylabel('Passenger Count', size=20, labelpad=15)    \n    plt.tick_params(axis='x', labelsize=20)\n    plt.tick_params(axis='y', labelsize=20)\n    \n    plt.legend(['Not Survived', 'Survived'], loc='upper center', prop={'size': 18})\n    plt.title('Count of Survival in {} Feature'.format(feature), size=20, y=1.05)\n\nplt.show()","d92a2b50":"# df_feature = df_train","a237d93a":"# df_feature['Fare'] = pd.qcut(df_feature['Fare'], 13)\n\n# fig, axs = plt.subplots(figsize=(22, 9))\n# sns.countplot(x='Fare', hue='Survived', data=df_feature)\n\n# plt.xlabel('Fare', size=15, labelpad=20)\n# plt.ylabel('Passenger Count', size=15, labelpad=20)\n# plt.tick_params(axis='x', labelsize=10)\n# plt.tick_params(axis='y', labelsize=15)\n\n# plt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 15})\n# plt.title('Count of Survival in {} Feature'.format('Fare'), size=15, y=1.05)\n\n# plt.show()","58a82017":"# df_feature['Age'] = pd.qcut(df_feature['Age'], 10)\n\n# fig, axs = plt.subplots(figsize=(22, 9))\n# sns.countplot(x='Age', hue='Survived', data=df_feature)\n\n# plt.xlabel('Age', size=15, labelpad=20)\n# plt.ylabel('Passenger Count', size=15, labelpad=20)\n# plt.tick_params(axis='x', labelsize=15)\n# plt.tick_params(axis='y', labelsize=15)\n\n# plt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 15})\n# plt.title('Survival Counts in {} Feature'.format('Age'), size=15, y=1.05)\n\n# plt.show()","a26dd4b0":"df_train['Ticket_Frequency'] = df_train.groupby('Ticket')['Ticket'].transform('count')\ndf_test['Ticket_Frequency'] = df_test.groupby('Ticket')['Ticket'].transform('count')","0c8921cd":"df_train = df_train.drop(['Ticket'], axis=1)\ndf_test = df_test.drop(['Ticket'], axis=1)","f428178d":"df_train.head()","7d57ad98":"df_test.head()","a87f3105":"fig, axs = plt.subplots(figsize=(12, 9))\nsns.countplot(x='Ticket_Frequency', hue='Survived', data=df_train)\n\nplt.xlabel('Ticket Frequency', size=15, labelpad=20)\nplt.ylabel('Passenger Count', size=15, labelpad=20)\nplt.tick_params(axis='x', labelsize=15)\nplt.tick_params(axis='y', labelsize=15)\n\nplt.legend(['Not Survived', 'Survived'], loc='upper right', prop={'size': 15})\nplt.title('Count of Survival in {} Feature'.format('Ticket Frequency'), size=15, y=1.05)\n\nplt.show()","0afcfc32":"df_train['Title'] = df_train['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\ndf_train['Is_Married'] = 0\ndf_train['Is_Married'].loc[df_train['Title'] == 'Mrs'] = 1","b47b2e45":"df_test['Title'] = df_test['Name'].str.split(', ', expand=True)[1].str.split('.', expand=True)[0]\ndf_test['Is_Married'] = 0\ndf_test['Is_Married'].loc[df_test['Title'] == 'Mrs'] = 1","c9fdf23e":"df_train['Title'] = df_train['Title'].replace(['Miss', 'Mrs','Ms', 'Mlle', 'Lady', 'Mme', 'the Countess', 'Dona'], 'Miss\/Mrs\/Ms')\ndf_train['Title'] = df_train['Title'].replace(['Dr', 'Col', 'Major', 'Jonkheer', 'Capt', 'Sir', 'Don', 'Rev'], 'Dr\/Military\/Noble\/Clergy')","cf0913a6":"df_test['Title'] = df_test['Title'].replace(['Miss', 'Mrs','Ms', 'Mlle', 'Lady', 'Mme', 'the Countess', 'Dona'], 'Miss\/Mrs\/Ms')\ndf_test['Title'] = df_test['Title'].replace(['Dr', 'Col', 'Major', 'Jonkheer', 'Capt', 'Sir', 'Don', 'Rev'], 'Dr\/Military\/Noble\/Clergy')","307967cc":"df_train = df_train.drop(['Name'], axis=1)\ndf_test = df_test.drop(['Name'], axis=1)","b63abf64":"df_train.head()","1e940ae7":"encoder_sex = OneHotEncoder(handle_unknown='ignore') #\"ignore\"\u306b\u3059\u308b\u306e\u5927\u4e8b\nencoder_sex.fit(df_train[\"Sex\"].values.reshape(-1, 1))\n\nencoder_train_sex = encoder_sex.transform(df_train[\"Sex\"].values.reshape(-1, 1))\nencoder_test_sex = encoder_sex.transform(df_test[\"Sex\"].values.reshape(-1, 1))\n\nencoder_train_sex = pd.DataFrame(encoder_train_sex.toarray().astype('int64'), columns=encoder_sex.categories_)\nencoder_test_sex = pd.DataFrame(encoder_test_sex.toarray().astype('int64'), columns=encoder_sex.categories_)","2c24bd22":"encoder_Embarked = OneHotEncoder(handle_unknown='ignore') #\"ignore\"\u306b\u3059\u308b\u306e\u5927\u4e8b\nencoder_Embarked.fit(df_train[\"Embarked\"].values.reshape(-1, 1))\n\nencoder_train_Embarked = encoder_Embarked.transform(df_train[\"Embarked\"].values.reshape(-1, 1))\nencoder_test_Embarked = encoder_Embarked.transform(df_test[\"Embarked\"].values.reshape(-1, 1))\n\nencoder_train_Embarked = pd.DataFrame(encoder_train_Embarked.toarray().astype('int64'), columns=encoder_Embarked.categories_)\nencoder_test_Embarked = pd.DataFrame(encoder_test_Embarked.toarray().astype('int64'), columns=encoder_Embarked.categories_)","cd2ab333":"encoder_Title = OneHotEncoder(handle_unknown='ignore') #\"ignore\"\u306b\u3059\u308b\u306e\u5927\u4e8b\nencoder_Title.fit(df_train[\"Title\"].values.reshape(-1, 1))\n\nencoder_train_Title = encoder_Title.transform(df_train[\"Title\"].values.reshape(-1, 1))\nencoder_test_Title = encoder_Title.transform(df_test[\"Title\"].values.reshape(-1, 1))\n\nencoder_train_Title = pd.DataFrame(encoder_train_Title.toarray().astype('int64'), columns=encoder_Title.categories_)\nencoder_test_Title = pd.DataFrame(encoder_test_Title.toarray().astype('int64'), columns=encoder_Title.categories_)","59dd3452":"encoder_Pclass = OneHotEncoder(handle_unknown='ignore') #\"ignore\"\u306b\u3059\u308b\u306e\u5927\u4e8b\nencoder_Pclass.fit(df_train[\"Pclass\"].values.reshape(-1, 1))\n\nencoder_train_Pclass = encoder_Pclass.transform(df_train[\"Pclass\"].values.reshape(-1, 1))\nencoder_test_Pclass = encoder_Pclass.transform(df_test[\"Pclass\"].values.reshape(-1, 1))\n\ncolumns = ['Pclass_1', 'Pclass_2', 'Pclass_3']\n\nencoder_train_Pclass = pd.DataFrame(encoder_train_Pclass.toarray().astype('int64'), columns=columns)\nencoder_test_Pclass = pd.DataFrame(encoder_test_Pclass.toarray().astype('int64'), columns=columns)","b3c6afe6":"encoder_test_Pclass.tail()","c40a154e":"encoder_test_Pclass.shape","7972f20f":"df_train = pd.concat([df_train, encoder_train_Pclass, encoder_train_Title, encoder_train_Embarked, encoder_train_sex], axis=1)\ndf_test = pd.concat([df_test, encoder_test_Pclass, encoder_test_Title, encoder_test_Embarked, encoder_test_sex], axis=1)","8f0516d6":"df_train = df_train.drop(['Pclass', 'Sex', 'Embarked', 'Title'], axis=1)\ndf_test = df_test.drop(['Pclass', 'Sex', 'Embarked', 'Title'], axis=1)","4261ff40":"df_train.head()","b46e18eb":"df_test.tail()","a9b9ae6b":"print(df_train.isnull().sum())","6f98012d":"print(df_test.isnull().sum())","14d892e3":"df_train.shape","c01b9076":"df_test.shape","203e29e2":"st = StandardScaler()\ncolumns= ['Fare', 'Age', 'SibSp', 'Parch', 'Ticket_Frequency']\nst = st.fit(df_train[columns])\ndf_train[columns] = st.transform(df_train[columns])\ndf_test[columns] = st.transform(df_test[columns])","eeabbad1":"df_train.head()","c31f02c1":"df_test.head()","089d5dff":"train_x = df_train.drop(['Survived'], axis = 1)\ntrain_y = df_train['Survived']","9d84264c":"train_x.shape","4673b853":"rf = RandomForestClassifier(criterion='gini',\n                            n_estimators=1750,\n                            max_depth=7,\n                            min_samples_split=6,\n                            min_samples_leaf=6,\n                            max_features='auto',\n                            oob_score=True,\n                            random_state=0,\n                            n_jobs=-1,\n                            verbose=1)\nrf.fit(train_x, train_y)","0c65e22b":"rf_pred = rf.predict(df_test)","0fa4de70":"df_submission = pd.read_csv('..\/input\/titanic\/test.csv')","3c8b873e":"submission = pd.DataFrame(columns=['PassengerId', 'Survived'])","03082a98":"submission['PassengerId'] = df_submission['PassengerId']\nsubmission['Survived'] = rf_pred","f9b2a74f":"submission.head()","496fc176":"submission.shape","7cf62f79":"submission.to_csv('submissions.csv', header=True, index=False)","11b211ba":"## Target Distribution in Features","9efcf5a2":"# Importing The Dataset","2f81cc3a":"### Encoding Ticket ","0176efa1":"Fare has a large correlation with Pclass.","a6f6718e":"## Target Distribution","7b0fafdf":"### Title & Is Married","af13444a":"## Missing values in Embarked","0fdc6fe0":"According to google, Mrs.George Nelson (Martha Evelyn), who embarked from S (Southampton) with Amelie.","5694aa2d":"# OneHotEncoding","3603c31e":"## Missing values in Age","af8af600":"# EDA","baf5b5c3":"It can be seen that the correlation between Pclass and age is high.\nGroup ages by passenger class.","11f2be92":"It can be seen that the median age for each Pclass differs depending on the gender.","79c7dc74":"## Feature Engineering","b94e1a17":"According to the graph below, groups with 2,3 and 4 members had a higher survival rate.","880866a9":"### This section is Copied from https:\/\/www.kaggle.com\/gunesevitan\/titanic-advanced-feature-engineering-tutorial?scriptVersionId=27280410&cellId=45","904f1d79":"## Correlations","c2bcb468":"### Copied from https:\/\/www.kaggle.com\/gunesevitan\/titanic-advanced-feature-engineering-tutorial?scriptVersionId=27280410&cellId=38","2df35317":"## Missing values in Cabin","de165f50":"# Model","da3dbe52":"## Missing values in Fare"}}