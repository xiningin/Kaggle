{"cell_type":{"d409d1ee":"code","1ef76e92":"code","3636227a":"code","37eb2a0e":"code","674cd788":"code","7bc21d1d":"code","ecfb607f":"code","78239c69":"code","fea5d602":"code","34fe4a8b":"code","8eef51c1":"code","01405b98":"code","f6ff29e7":"code","7409ec26":"code","83c9c79a":"code","1d6b780a":"code","174dbe7b":"code","1a8ae165":"code","50ced245":"code","92db92a1":"code","0f38c856":"code","68a75ea1":"code","696803f8":"code","26bb0a9b":"code","cf35a82b":"code","80f26ac7":"code","09a97841":"code","2435e80d":"code","918c9ad7":"code","5a560d51":"code","2c8dad5c":"code","18f9ac87":"code","03a06287":"code","183cd64b":"code","bec36697":"code","e0d56691":"code","7e8367aa":"code","d3d73cdc":"code","81f40a4b":"code","7da05fea":"code","369f9fbd":"code","e32b5652":"code","55aadc9e":"code","c21e8a26":"code","493ea0a4":"code","28aa4180":"code","15320c8a":"code","cdcbac55":"code","1a625979":"markdown","edeac616":"markdown","d7dc8b0d":"markdown","ab32bbdc":"markdown","dfba56d2":"markdown","3a2de12c":"markdown","684dd0a0":"markdown","a4dbb62c":"markdown","c316dc1f":"markdown","0e4c66f5":"markdown","5caee163":"markdown","a64cacd4":"markdown","7a7314f3":"markdown","552ed175":"markdown","32738974":"markdown","4e5ae13f":"markdown","fd6cedca":"markdown","2c47928c":"markdown","f519710f":"markdown","4cf71e53":"markdown","56473ac4":"markdown","e1a7eef5":"markdown","5a3f6c2f":"markdown","e2157fdc":"markdown","1d3cc201":"markdown","3007ac4a":"markdown","b28c46bd":"markdown","11fbcb1e":"markdown","e9726f44":"markdown","2195a79b":"markdown","e312f498":"markdown","1ef15ccf":"markdown","40347c4d":"markdown","9cf3fc94":"markdown","4d1209ea":"markdown","6f980eb8":"markdown","d8af1f4b":"markdown"},"source":{"d409d1ee":"import sympy as sm\nfrom sympy import Function\nfrom sympy.stats import Normal, cdf\n\nimport altair as alt\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport warnings\nfrom IPython.display import Image, HTML\nimport io\n\n\n# import sys\n# sys.path.insert(0,'\/usr\/lib\/chromium-browser\/chromedriver')","1ef76e92":"# Define and register a kaggle renderer for Altair\n\nimport altair as alt\nimport json\nfrom IPython.display import HTML\n\nKAGGLE_HTML_TEMPLATE = \"\"\"\n<style>\n.vega-actions a {{\n    margin-right: 12px;\n    color: #757575;\n    font-weight: normal;\n    font-size: 13px;\n}}\n.error {{\n    color: red;\n}}\n<\/style>\n<div id=\"{output_div}\"><\/div>\n<script>\nrequirejs.config({{\n    \"paths\": {{\n        \"vega\": \"{base_url}\/vega@{vega_version}?noext\",\n        \"vega-lib\": \"{base_url}\/vega-lib?noext\",\n        \"vega-lite\": \"{base_url}\/vega-lite@{vegalite_version}?noext\",\n        \"vega-embed\": \"{base_url}\/vega-embed@{vegaembed_version}?noext\",\n    }}\n}});\nfunction showError(el, error){{\n    el.innerHTML = ('<div class=\"error\">'\n                    + '<p>JavaScript Error: ' + error.message + '<\/p>'\n                    + \"<p>This usually means there's a typo in your chart specification. \"\n                    + \"See the javascript console for the full traceback.<\/p>\"\n                    + '<\/div>');\n    throw error;\n}}\nrequire([\"vega-embed\"], function(vegaEmbed) {{\n    const spec = {spec};\n    const embed_opt = {embed_opt};\n    const el = document.getElementById('{output_div}');\n    vegaEmbed(\"#{output_div}\", spec, embed_opt)\n      .catch(error => showError(el, error));\n}});\n<\/script>\n\"\"\"\n\nclass KaggleHtml(object):\n    def __init__(self, base_url='https:\/\/cdn.jsdelivr.net\/npm'):\n        self.chart_count = 0\n        self.base_url = base_url\n        \n    @property\n    def output_div(self):\n        return \"vega-chart-{}\".format(self.chart_count)\n        \n    def __call__(self, spec, embed_options=None, json_kwds=None):\n        # we need to increment the div, because all charts live in the same document\n        self.chart_count += 1\n        embed_options = embed_options or {}\n        json_kwds = json_kwds or {}\n        html = KAGGLE_HTML_TEMPLATE.format(\n            spec=json.dumps(spec, **json_kwds),\n            embed_opt=json.dumps(embed_options),\n            output_div=self.output_div,\n            base_url=self.base_url,\n            vega_version=alt.VEGA_VERSION,\n            vegalite_version=alt.VEGALITE_VERSION,\n            vegaembed_version=alt.VEGAEMBED_VERSION\n        )\n        return {\"text\/html\": html}\n    \nalt.renderers.register('kaggle', KaggleHtml())\nprint(\"Define and register the kaggle renderer. Enable with\\n\\n\"\n      \"    alt.renderers.enable('kaggle')\")","3636227a":"from IPython.display import Math, HTML\n\ndef load_mathjax_in_cell_output():\n    display(HTML(\"<script src='https:\/\/www.gstatic.com\/external_hosted\/\"\n               \"mathjax\/latest\/MathJax.js?config=default'><\/script>\"))\n\ndef init_print(sm, use_matplotlib):\n    if use_matplotlib:\n        sm.init_printing(use_latex='matplotlib')\n    else:\n        get_ipython().events.register('pre_run_cell', load_mathjax_in_cell_output)\n\ndef get_items(items_id, dict_var):\n    return [dict_var.get(item_id) for item_id in items_id]","37eb2a0e":"alt.renderers.enable('kaggle')","674cd788":"# init_print(sm, use_matplotlib=True)\nsm.init_printing()","7bc21d1d":"s, k, tau, t, T, r, sigma, x, y = sm.symbols('s, k, tau, t, T, r, sigma, x, y', real=True)\ns, k, tau, t, T, r, sigma, x, y","ecfb607f":"class Option:\n    def __init__(self, option, name):\n        self.name = name\n        self.option = option\n        self.delta = self.option.diff(s).simplify()\n        self.gamma = self.delta.diff(s).simplify()\n        self.theta = -self.option.diff(tau).simplify()\n        self.vega = self.option.diff(sigma).simplify()\n        self.rho = self.option.diff(r).simplify()\n\n        self.option_np = sm.lambdify([s, k, tau, r, sigma], self.option, modules=['numpy', 'sympy'])\n        self.delta_np = sm.lambdify([s, k, tau, r, sigma], self.delta, modules=['numpy', 'sympy'])\n        self.gamma_np = sm.lambdify([s, k, tau, r, sigma], self.gamma, modules=['numpy', 'sympy'])\n        self.theta_np = sm.lambdify([s, k, tau, r, sigma], self.theta, modules=['numpy', 'sympy'])\n        self.vega_np = sm.lambdify([s, k, tau, r, sigma], self.vega, modules=['numpy', 'sympy'])\n        self.rho_np = sm.lambdify([s, k, tau, r, sigma], self.rho, modules=['numpy', 'sympy'])\n  \n    def _plot(self, name, s_vals, k_val, tau_vals, r_val, sigma_val, numeric_tau):\n        fn = getattr(self, name + '_np')\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"ignore\")\n            data_dict = {('tau = ' + str(tau_i)) : [fn(x, k_val, tau_i, r_val, sigma_val) for x in s_vals] for tau_i in tau_vals}\n\n        source = pd.DataFrame({\n          's': s_vals,\n            **data_dict\n        }, dtype='float64')\n\n        if 0 in tau_vals:\n            source.loc[s_vals == k_val, 'tau = 0'] = 0 if np.isnan(source.loc[s_vals == k_val, 'tau = 0'].values)[0] else source.loc[s_vals == k_val, 'tau = 0']\n        # source.fillna(0, inplace=True)\n\n        data = source.melt('s', value_name=name, var_name='tau')\n        if numeric_tau:\n            data.tau = [x.replace('tau = ', '') for x in data.tau]\n            data.tau = data.tau.astype('float64')\n        return data\n\n    def plot(self, name, s_vals, k_val, tau_vals, r_val, sigma_val, numeric_tau=True, interactive=True):\n        data = self._plot(name, s_vals, k_val, tau_vals, r_val, sigma_val, numeric_tau)\n        plot = alt.Chart(data, title=self.name).mark_line().encode(\n            x='s',\n            y=name,\n            color='tau'\n        )\n        if interactive:\n            plot = plot.interactive()\n        plot = plot.properties(width=325, height=250)\n        return plot\n\n    def plot2(self, ax, palette, name, s_vals, k_val, tau_vals, r_val, sigma_val, numeric_tau=True):\n        data = self._plot(name, s_vals, k_val, tau_vals, r_val, sigma_val, numeric_tau)\n        plot = sns.lineplot(x=\"s\", y=name, hue=\"tau\", data=data, ax=ax, palette=palette).set_title(self.name)\n        return plot","78239c69":"N =  sm.simplify(cdf(Normal('x', 0, 1)))\nN","fea5d602":"d1 = (sm.ln(s\/k) + (r + sigma**2\/2)*tau)\/(sigma*sm.sqrt(tau))\nd2 = d1 - sigma*sm.sqrt(tau)\nd1, d2","34fe4a8b":"call_price = s*N(d1) - k*sm.exp(-r*tau)*N(d2)\nput_price = call_price + k*sm.exp(-r*tau) - s\ncall_put_price = call_price - put_price","8eef51c1":"call = Option(call_price, 'call')\nput = Option(put_price, 'put')\ncall_put = Option(call_put_price, 'call-put')","01405b98":"def plot(name):\n    chart = alt.vconcat(alt.hconcat(call.plot(name, s_vals, k_val, tau_vals, r_val, sigma_val,numeric_tau=numeric_tau_val, interactive=interactive_val),\n                                  put.plot(name, s_vals, k_val, tau_vals, r_val, sigma_val,numeric_tau=numeric_tau_val, interactive=interactive_val)),\n                      call_put.plot(name, s_vals, k_val, tau_vals, r_val, sigma_val,numeric_tau=numeric_tau_val, interactive=interactive_val))\n#     with io.StringIO() as f:\n#         chart.save(f, format='html')\n#         chart_html = f.getvalue()\n    return chart\n\ndef plot2(name):\n    palette = sns.color_palette(\"Blues_d\")\n    fig, axs = plt.subplots(2,2, figsize=(15,15))\n    fig.subplots_adjust(wspace=0.3, hspace=0.3)\n    call.plot2(axs[0, 0], palette, name, s_vals, k_val, tau_vals, r_val, sigma_val,numeric_tau=numeric_tau_val)\n    put.plot2(axs[0, 1], palette, name, s_vals, k_val, tau_vals, r_val, sigma_val,numeric_tau=numeric_tau_val)\n    call_put.plot2(axs[1, 0], palette, name, s_vals, k_val, tau_vals, r_val, sigma_val,numeric_tau=numeric_tau_val)\n    fig.delaxes(axs[1, 1])\n    plt.show()","f6ff29e7":"s_vals = np.arange(50, 150, 0.5)\nk_val = 100\ntau_vals = [0, 0.1, 1, 3, 5, 9, 12] # month\n# r_val = 0.01\nsigma_val = 0.1\ninteractive_val = False\nnumeric_tau_val = True","7409ec26":"r_val = 0.01","83c9c79a":"name = 'option'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","1d6b780a":"name = 'delta'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","174dbe7b":"name = 'gamma'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","1a8ae165":"name = 'theta'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","50ced245":"name = 'vega'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","92db92a1":"name = 'rho'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","0f38c856":"r_val = 0.0","68a75ea1":"name = 'option'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","696803f8":"name = 'delta'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","26bb0a9b":"name = 'gamma'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","cf35a82b":"name = 'theta'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","80f26ac7":"name = 'vega'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","09a97841":"name = 'rho'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","2435e80d":"r_val = 0.075","918c9ad7":"name = 'option'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","5a560d51":"name = 'delta'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","2c8dad5c":"name = 'gamma'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","18f9ac87":"name = 'theta'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","03a06287":"name = 'vega'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","183cd64b":"name = 'rho'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","bec36697":"r_val = 0.1","e0d56691":"name = 'option'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","7e8367aa":"name = 'delta'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","d3d73cdc":"name = 'gamma'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","81f40a4b":"name = 'theta'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","7da05fea":"name = 'vega'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","369f9fbd":"name = 'rho'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","e32b5652":"r_val = 0.15","55aadc9e":"name = 'option'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","c21e8a26":"name = 'delta'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","493ea0a4":"name = 'gamma'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","28aa4180":"name = 'theta'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","15320c8a":"name = 'vega'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","cdcbac55":"name = 'rho'\nprint('call - put   ' + name + ' : ')\ndisplay(getattr(call_put, name))\nplot(name)","1a625979":"## Theta","edeac616":"## Rho","d7dc8b0d":"## Option Price","ab32bbdc":"## Rho","dfba56d2":"## Gamma","3a2de12c":"# r = 0.01","684dd0a0":"## Gamma","a4dbb62c":"## Delta","c316dc1f":"## Theta","0e4c66f5":"## Gamma","5caee163":"## Theta","a64cacd4":"## Option Price","7a7314f3":"## Option Price","552ed175":"# r = 0.075","32738974":"## Delta","4e5ae13f":"## Vega","fd6cedca":"## Option Price","2c47928c":"## Rho","f519710f":"## Gamma","4cf71e53":"## Theta","56473ac4":"## Delta","e1a7eef5":"## Gamma","5a3f6c2f":"## Vega","e2157fdc":"## Option Price","1d3cc201":"# r = 0.0","3007ac4a":"# setup","b28c46bd":"## Vega","11fbcb1e":"$C + Ke^{-r\\tau} = P + S$","e9726f44":"## Vega","2195a79b":"## Rho","e312f498":"## Delta","1ef15ccf":"## Rho","40347c4d":"## Vega","9cf3fc94":"## Delta","4d1209ea":"## Theta","6f980eb8":"# r = 0.15","d8af1f4b":"# r = 0.1"}}