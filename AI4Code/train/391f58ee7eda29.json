{"cell_type":{"cd5831c5":"code","04de8788":"code","7e4435fc":"code","0c9e7a80":"code","70debae3":"code","fd612e3d":"code","32f111c9":"code","f1033eec":"code","4c37d210":"code","21ce11b0":"code","b8fbab1a":"code","08fcfc50":"code","f8f05a8a":"code","949b9d27":"code","87e3bea1":"code","e2b02816":"code","7a157494":"code","17490998":"code","91af3f35":"code","a4f4fcf6":"code","ec35eff2":"code","30626c4a":"code","6e7406ab":"code","6d76cec3":"code","5db89706":"code","cd026432":"code","9a043179":"code","e1f8cd1a":"markdown","851f7486":"markdown","892c0e80":"markdown","a6808de9":"markdown","0addee1f":"markdown","569e312f":"markdown","7e6244de":"markdown","08e92060":"markdown","f42db803":"markdown"},"source":{"cd5831c5":"import warnings\nimport numpy as np \nimport pandas as pd\nimport plotly as py\nimport seaborn as sns\nimport statistics as stat\nfrom datetime import date\nfrom plotly.subplots import make_subplots\n\nimport plotly.express as px\nimport plotly.graph_objs as go\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', 100)\npd.set_option(\"plotting.backend\", \"plotly\")\n\nimport plotly.offline as pyo\npyo.init_notebook_mode()\n\nimport matplotlib.lines as lines\nimport matplotlib.pyplot as plt","04de8788":"df = pd.read_csv('..\/input\/myanimelist-scrappind-a-decade-of-anime\/MAL-all-from-winter2011-to-fall2021.csv')\ndf","7e4435fc":"df['studio'].value_counts()","0c9e7a80":"df['studio'] = df['studio'].str.replace('\\W', '').replace(r'^\\s*$', np.nan, regex=True)\ndf['studio'].value_counts()","70debae3":"# fix typo\ndf = df.rename(columns={'realase-date': 'release-date',})\n\n# Studio column contains many cells with white spaces\n\n\ndf['year']  = pd.DatetimeIndex(df['release-date']).year\ndf['month'] = pd.DatetimeIndex(df['release-date']).month","fd612e3d":"def EDA(df):\n    print('\\033[1m' + 'Shape of the data :' + '\\033[0m')\n    print(df.shape, \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n    print('\\033[1m' + 'All columns from the dataframe :' + '\\033[0m')\n    print(df.columns, \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n    print('\\033[1m' + 'Datatpes and Missing values:' + '\\033[0m')\n    print(df.info(), \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n    print('\\033[1m' + 'Missing value count:' + '\\033[0m')\n    print(df.isnull().sum(),\n          '\\n------------------------------------------------------------------------------------\\n')\n    \n    print('\\033[1m' + 'Summary statistics for the data' + '\\033[0m')\n    print(df.describe(include='all'), \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n    print('\\033[1m' + 'Outliers in the data :' + '\\033[0m')\n    Q1 = df.quantile(0.25)\n    Q3 = df.quantile(0.75)\n    IQR = Q3 - Q1\n    outliers = (df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))\n    print(outliers.sum(), \n          '\\n------------------------------------------------------------------------------------\\n')\n        \n    print('\\033[1m' + 'Memory used by the data :' + '\\033[0m')\n    print(df.memory_usage(), \n          '\\n------------------------------------------------------------------------------------\\n')\n    \n    print('\\033[1m' + 'Number of duplicate values :' + '\\033[0m')\n    print(df.duplicated().sum())\n    \nEDA(df)","32f111c9":"# data still contains year from \ndf = df.dropna(subset=['release-date'])\ndf = df[ df['year'].isin([2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021]) ]","f1033eec":"def make_line_plot(data, xdata, ydata, cdata, title, legend=True, width=900, height=600):\n    import plotly.express as px\n\n    fig = px.line(data, \n                  x= xdata,\n                  y= ydata, \n                  color= cdata, \n                  symbol= cdata,\n                 )\n\n    fig.update_layout(\n        title= title,\n        xaxis_tickfont_size=14,\n        yaxis=dict(\n            title='',\n            titlefont_size=16,\n            tickfont_size=14,\n        ),\n        legend=dict(\n            x=1.02,\n            y=0.98,\n            bgcolor='rgba(255, 255, 255, 0)',\n            bordercolor='rgba(255, 255, 255, 0)',\n        ),\n        showlegend= legend,\n        height= height,\n        width= width,\n    )\n    \n    return fig\n\ndef make_stacked_area_chart(df, xdata, ydata, title, legend=True, stackperc=False, height=600, width=800):\n    \"\"\"\n    df: Dataframe in long format.\n    \n    \"\"\"\n    types = df[ ydata ].unique()\n\n    if stackperc == True:\n        fig = go.Figure()\n        for i in range(len(types)):\n            fig.add_trace(go.Scatter(\n                x= df['year'].unique(),\n                y= df[ df['type'].isin([types[i]]) ]['count'],\n                name= types[i],\n                mode= 'lines',\n                stackgroup='one',\n                groupnorm='percent',\n            ))\n            \n        fig.update_layout(\n            yaxis= dict(\n                type= 'linear',\n                range=(0, 100),\n            ),\n        )\n    \n    else:\n        fig = go.Figure()\n        for i in range(len(types)):\n            fig.add_trace(go.Scatter(\n                x= df[ xdata ].unique(),\n                y= df[ df[ ydata ].isin([types[i]]) ]['count'],\n                name= types[i],\n                mode= 'lines',\n                stackgroup='one',\n            ))\n            \n    fig.update_layout(\n        title= title,\n        showlegend= legend,\n        height= height,\n        width= width,\n    )\n\n    return fig","4c37d210":"temp = df.copy()\ntemp['count'] = 1\ntemp = pd.DataFrame( temp.groupby(['year', 'type']).sum() ).reset_index()","21ce11b0":"# Unstacked Line\nmake_line_plot(temp, 'year', 'members', 'type', 'Number of anime views, by type')","b8fbab1a":"# Stacked line\nmake_stacked_area_chart(temp, 'year', 'type', 'Number of anime releases, by type', stackperc=False, height=500)","08fcfc50":"make_stacked_area_chart(temp, 'year', 'type', 'Number of anime releases, by type', stackperc=True, height=500)","f8f05a8a":"df_val = df.loc[:, 'episodes':]\ndimensions = []\n\nfor col in df_val:\n    dimensions.append(dict(label = col, values = df_val[col]))\n    \nfig = go.Figure()\n\nfig.add_trace(\n    go.Splom(\n        dimensions = dimensions,\n        showupperhalf=False,\n        diagonal_visible=False,\n        marker=dict(\n            color='rgba(135, 206, 250, 0.5)',\n            size=5,\n            line=dict(\n                color='MediumPurple',\n                width=0.5))\n        )\n)\n\nfig.update_layout(\n    title='Pairplot for mean attributes of the dataset',\n    width=900,\n    height=800,\n)\n\nfig.show()","949b9d27":"top_n = 10\n\ntemp = df.copy()\ntemp['count'] = 1\ntop = list( temp.studio.value_counts().head(top_n).index )\ntop_temp = temp[ temp['studio'].isin(top) ]\ntemp = pd.DataFrame( top_temp.groupby(['year', 'studio']).sum() ).reset_index()\ntemp","87e3bea1":"make_stacked_area_chart(temp, 'year', 'studio', 'Number of Anime releases, by studio', stackperc=False, height=500)","e2b02816":"def make_box_plot(data, xdata, ydata, cdata, title, facet_data='', height=800, width=900, log_x=False, log_y=False, yreverse= False, legend= True):    \n    if facet_data == '':\n        fig = px.strip(data.sort_values( by=[ cdata, xdata ] ), \n                       x= xdata, \n                       y= ydata,\n                       color= cdata,\n                       hover_name= data['title'],\n                       log_x = log_x,\n                       log_y = log_y,\n                       category_orders= { \n                           ydata: ordering\n                         },\n                      )\n    else:\n        fig = px.strip(data.sort_values( by=[ cdata, xdata ] ), \n                       x= xdata, \n                       y= ydata,\n                       color= cdata,\n                       hover_name= data['title'],\n                       log_x = log_x,\n                       log_y = log_y,\n                       category_orders= { \n                           ydata: ordering\n                       },\n                       facet_row= facet_data,\n                      )\n    \n    ##########################################\n    if yreverse == True:\n        yaxis_update = dict(\n            title= f'{ydata}',\n            titlefont_size=12,\n            tickfont_size=12,\n            autorange= 'reversed'\n        )\n    else:\n        yaxis_update = dict(\n            title= f'{ydata}',\n            titlefont_size=12,\n            tickfont_size=12,\n        )\n\n    #####################################\n    fig.update_layout(\n        title= title,\n        xaxis_tickfont_size=12,\n        xaxis=dict(\n            title= f'{xdata}',\n        ),\n        yaxis= yaxis_update,\n        height = height,\n        width= width,\n        showlegend= legend\n    )\n    \n    fig.for_each_yaxis(lambda yaxis: yaxis.update(title=''))\n\n    return fig","7a157494":"ordering = top\n\nmake_box_plot(df, 'year', 'score', 'release-season', 'Anime Ratings by season, year, and type', 'type', height=1600, yreverse= False)","17490998":"make_box_plot(df, 'year', 'members', 'release-season', 'Anime by year, by views (log y-axis)', log_y=True)","91af3f35":"top_n = 20\ntemp = df.copy()\ntop = list( temp.studio.value_counts().head(top_n).index )\n\nordering = top#[::-1]\ntop_temp = temp[ temp['studio'].isin(top) ]\n\nmake_box_plot(top_temp, 'score', 'studio', 'year', f'Top {top_n} Anime Studios By Releases & Ratings for Past Decade', yreverse=False, height=4000, width = 800, )","a4f4fcf6":"make_box_plot(top_temp, 'members', 'studio', 'year', f'Top {top_n} Anime Studios By Releases & Views for Past Decade', log_x=True, yreverse=False, height=4000, width = 800, )","ec35eff2":"def make_scatter_plot(df, xdata, ydata, cdata, sdata, title, size_max=40, log_x=True, log_y=False, height=800, width=800):\n    fig = px.scatter(df,\n                     x= xdata, \n                     y= ydata, \n                     color= cdata,\n                     size= sdata,\n                     size_max= size_max, \n                     hover_name='title',\n                     trendline=\"ols\",\n                     trendline_options=dict(log_x= log_x, \n                                            log_y= log_y),\n                     log_x= log_x,\n                     log_y= log_y,\n                    ).update_traces(visible='legendonly')\n    \n    fig.update_layout(\n        title= title,\n        height = height,\n        width= width,\n    )\n\n    return fig","30626c4a":"temp = df.copy()\ntemp = temp[ temp['members'] > 0 ]\ntemp = temp[ temp['score'] > 0 ]\ntemp = temp[ temp['episodes'] > 0 ]\n\n# Better bubble chart (but loses hover data details)\nsize_data= 'episodes'\ntemq = (temp[ size_data ].max() - temp[ size_data ].min()) \/ 16\ntemp['scale'] = (temp[ size_data ] - temp[ size_data ].min()) \/ temq + 0.5\n\nmake_scatter_plot(temp, 'members', 'score', 'type', 'scale', 'ttt', log_x=True, height=600)","6e7406ab":"make_scatter_plot(temp, 'members', 'score', 'source-material', 'episodes', 'Anime ratings and views, by source material', log_x=True, height=600)","6d76cec3":"temp['year'] = temp['year'].astype(str)\n\nmake_scatter_plot(temp, 'members', 'score', 'year', 'episodes', 'Anime views and rating, by year', log_x=True, height=600)","5db89706":"# Make bubbles more scaled, hover details get fuzzy as consequence\nsize_data= 'score'\ntemq = (temp[ size_data ].max() - temp[ size_data ].median()) \/ 16\ntemp['scale'] = (temp[ size_data ] - temp[ size_data ].min()) \/ temq + 0.5\n\nmake_scatter_plot(temp, 'year', 'episodes', 'type', 'scale', 'Anime ratings, by year and episodes', size_max=20, log_y=True, height=600)","cd026432":"top_n = 15\ntop = list( temp.studio.value_counts().head(top_n).index )\ntop_temp = temp[ temp['studio'].isin(top) ]\n\nmake_scatter_plot(top_temp, \n                  xdata='members', \n                  ydata='score', \n                  cdata='studio', \n                  sdata='episodes', \n                  title= f'Top {top_n} animation studios, views and rating', \n                  log_x=True, height=600)","9a043179":"fig = px.violin(\n    temp,\n    'year',\n    'episodes',\n    box=True\n)\n\nfig.update_layout(\n    title= 'Bad title',\n    height = 400,\n    width= 1600,\n    yaxis= dict(\n        range=(0, 60),\n    ),\n)\n\nfig.show()","e1f8cd1a":"Click legend to populate the chart. Double click to reset the chart.","851f7486":"Episodes get shorter as time goes on. It has to do with shorter attention span of viewers for animation. ","892c0e80":"## Line Plot\nIdentifies general trend","a6808de9":"More anime episodes cluster at either 12 episodes or 24 episodes as time progress. ","0addee1f":"Regex ends up removing the legitimate spaces in between names as well. Oh well, just make do with what we have. We won't be using every studios\/multi-studios anyway.","569e312f":"## Box plots (although more accurately it becomes a strip chart)","7e6244de":"## Scatter Plot and Linear Regression","08e92060":"## Violin Plots to identify binomial distributions","f42db803":"## Exploratory Data Analysis"}}