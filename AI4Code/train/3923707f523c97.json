{"cell_type":{"73ac5c18":"code","c88770f6":"code","a9068ff4":"code","4df35cb8":"code","20d4c067":"code","7e196612":"code","c1da5940":"markdown","1f4627b8":"markdown","7af28b42":"markdown","5d765683":"markdown","6dc22818":"markdown","d7c3555a":"markdown","3a7584f9":"markdown"},"source":{"73ac5c18":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pylab as plt\nimport plotly\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nplt.style.use('ggplot')\ncolor_pal = [x['color'] for x in plt.rcParams['axes.prop_cycle']]\n\n# Format the data\ndf = pd.read_csv('..\/input\/lanl-leaderboard\/LANL-Earthquake-Prediction-publicleaderboard_06_03_2019.csv')\ndf['SubmissionDate'] = pd.to_datetime(df['SubmissionDate'])\ndf = df.set_index(['TeamName','SubmissionDate'])['Score'].unstack(-1).T\ndf.columns = [name for name in df.columns]","c88770f6":"# Interative Plotly\ninit_notebook_mode(connected=True)\nTOP_TEAMS = df.min().loc[df.min() < 1.29].index.values\ndf_filtered = df[TOP_TEAMS].ffill()\ndf_filtered = df_filtered.loc[df_filtered.index > '2019-04-21']\n# Create a trace\ndata = []\nfor col in df_filtered.columns:\n    data.append(go.Scatter(\n                        x = df_filtered.index,\n                        y = df_filtered[col],\n                        name=col)\n               )\n    \niplot(data)","a9068ff4":"# Scores of top teams over time\nALL_TEAMS = df.columns.values\ndf[ALL_TEAMS].ffill().plot(figsize=(20, 10),\n                           ylim=(1.0, 1.8),\n                           color=color_pal[0],\n                           legend=False,\n                           alpha=0.01,\n                           title='All LANL Teams Scores over Time')\nplt.show()","4df35cb8":"# Create Top Teams List\nTOP_TEAMS = df.min().loc[df.min() < 1.35].index.values\ndf[TOP_TEAMS].min().sort_values().plot(kind='barh',\n                                       xlim=(1.0, 1.36),\n                                       title='Teams with Scores less than 1.35',\n                                       figsize=(12, 15),\n                                       color=color_pal[3])\nplt.show()","20d4c067":"df[TOP_TEAMS].nunique().sort_values().plot(kind='barh',\n                                           figsize=(12, 15),\n                                           color=color_pal[1],\n                                           title='Count of Submissions improving LB score by Team')\nplt.show()","7e196612":"df.ffill().count(axis=1).plot(figsize=(20, 5), title='Number of Teams in the Competition by Date')\nplt.show()","c1da5940":"# Public LB Scores of Top Teams over time","1f4627b8":"# Count of LB Submissions that improved score\n## \"Slow and Steady wins the race\" ~or~ \"Keep overfitting until LB improves\"?\nThis is the count of times the person submitted and got the fun \"You're score improved\" notification. This is not the total submission count.","7af28b42":"# Looking at how teams improved Public LB score over time.\n** Last Updated June 3, 2019 - The final day of the competition**","5d765683":"# Top LB Scores","6dc22818":"Example of how the plot works (gif not up to date with latest data):\n![](https:\/\/i.imgur.com\/DHR598A.gif)","d7c3555a":"# Number of teams by date","3a7584f9":"# All competitors LB Position over Time"}}