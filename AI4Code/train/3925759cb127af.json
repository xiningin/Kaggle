{"cell_type":{"a2760917":"code","47a4c7f5":"code","d30209df":"code","8974bd3a":"code","0b5da270":"code","da128175":"code","d20ab452":"code","c9170695":"code","857a0ca0":"code","0bebb9db":"code","a3becd1a":"code","4941b036":"code","e8c15705":"code","ca2bde60":"code","b7c5378e":"code","29da1118":"code","056e558f":"code","ac649dff":"code","d4e9005b":"markdown","11b1b736":"markdown","f90078b3":"markdown","c1890b0f":"markdown","93a1ede9":"markdown","bf0ecd01":"markdown","be224404":"markdown","5f70145c":"markdown","3e68f4b3":"markdown","4d791420":"markdown","ddfe216e":"markdown","ee58d526":"markdown"},"source":{"a2760917":"# Data handling \nimport pandas as pd\nimport numpy as np\n\n# preprocessing\nfrom sklearn.impute import KNNImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom sklearn.model_selection import train_test_split\n\n# Models\nfrom xgboost import XGBClassifier\n\n# Evaluation\nfrom sklearn.metrics import accuracy_score","47a4c7f5":"# Import data\ntrain_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain_df.head()","d30209df":"# Dropping columns \ntrain_df.drop(columns=[\"Name\", \"Ticket\", \"Cabin\"], inplace=True)\n\n# Defining response and explanatory variables\ny = train_df[\"Survived\"]\nX = train_df.drop(columns=[\"Survived\"])\n\n# Train test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=2)\n\n# Split numeric and categorical \nX_train_categorical = X_train.select_dtypes(include=\"object\")\nX_test_categorical = X_test.select_dtypes(include=\"object\")\nX_train_numeric = X_train.select_dtypes(exclude=\"object\")\nX_test_numeric = X_test.select_dtypes(exclude=\"object\")","8974bd3a":"# Fill missing categorical variables\nX_train[\"Embarked\"].fillna(\"S\", inplace=True)\nX_train[\"Embarked\"].fillna(\"S\", inplace=True)\n\n# Ordinal encoder \nencoder = OneHotEncoder(drop=\"first\", sparse=False)\ncolumns = [\"Sex\", \"Embarked\"]\nlabel_X_train = pd.DataFrame(encoder.fit_transform(X_train[columns]), index=X_train.index)\nlabel_X_test = pd.DataFrame(encoder.transform(X_test[columns]), index=X_test.index)","0b5da270":"X_train_numeric = X_train.select_dtypes(exclude=\"object\")\nX_test_numeric = X_test.select_dtypes(exclude=\"object\")\nX_train = pd.concat([X_train_numeric, label_X_train], axis=1, ignore_index=True)\nX_test = pd.concat([X_test_numeric, label_X_test], axis=1, ignore_index=True)","da128175":"X_train","d20ab452":"# KNN Imputer\nimputer = KNNImputer()\nX_train = pd.DataFrame(imputer.fit_transform(X_train), columns=X_train.columns, index=X_train.index)\nX_test = pd.DataFrame(imputer.transform(X_test), columns=X_test.columns, index=X_test.index)","c9170695":"lof = LocalOutlierFactor()\ny_hat = pd.DataFrame(lof.fit_predict(X_train), columns=[\"Outliers_d\"], index=X_train.index)\noutliers_index = y_hat[y_hat[\"Outliers_d\"] == -1].index\n\nX_train.drop(outliers_index, inplace=True)\ny_train.drop(outliers_index, inplace=True)","857a0ca0":"# Initial model \nmodel = XGBClassifier(random_state=0, objective=\"binary:logistic\", eval_metric=\"logloss\", use_label_encoder=False)\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\nscore = accuracy_score(y_test, predictions)\nprint(\"Score: {0:0.5f}\".format(score))","0bebb9db":"# 1st model improvement \nfor n in range(100, 210, 10): \n    model_1 = XGBClassifier(n_estimators=n, objective=\"binary:logistic\", eval_metric=\"logloss\", random_state=0, use_label_encoder=False)\n    model_1.fit(X_train, y_train)\n    predictions_1 = model_1.predict(X_test)\n    score_1 = accuracy_score(y_test, predictions_1)\n    print(\"n_estimators: {0}, Score: {1:0.5f}\".format(n, score_1))","a3becd1a":"# 2nd model improvement\nfor max_depth in range(1, 11, 1): \n    model_2 = XGBClassifier(max_depth=max_depth, n_estimators=140, objective=\"binary:logistic\", \n                            eval_metric=\"logloss\", random_state=0, use_label_encoder=False)\n    model_2.fit(X_train, y_train)\n    predictions_2 = model_2.predict(X_test)\n    score_2 = accuracy_score(y_test, predictions_2)\n    print(\"max_depth: {0}, Score: {1:0.5f}\".format(max_depth, score_2))","4941b036":"# 3rd model improvement\nfor learning_rate in range(20, 31, 1): \n    learning_rate = learning_rate \/ 100\n    model_3 = XGBClassifier(learning_rate=learning_rate, max_depth=9, n_estimators=140, objective=\"binary:logistic\", \n                            eval_metric=\"logloss\", random_state=0, use_label_encoder=False)\n    model_3.fit(X_train, y_train)\n    predictions_3 = model_3.predict(X_test)\n    score_3 = accuracy_score(y_test, predictions_3)\n    print(\"learning_rate: {0}, Score: {1:0.5f}\".format(learning_rate, score_3))","e8c15705":"# Import data\ntest_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_df.head()","ca2bde60":"test = test_df.drop(columns=[\"Name\", \"Ticket\", \"Cabin\"])\ntest.isna().sum()","b7c5378e":"# Categorical Encoding\ncolumns = [\"Sex\", \"Embarked\"]\nlabel_test = pd.DataFrame(encoder.transform(test[columns]), index=test.index)\ntest_numeric = test.select_dtypes(exclude=\"object\")\ntest = pd.concat([test_numeric, label_test], axis=1, ignore_index=True)\n\n# Missing values\ntest = imputer.transform(test)","29da1118":"XGB_model = XGBClassifier(learning_rate=0.28, max_depth=9, n_estimators=140, objective=\"binary:logistic\", \n                            eval_metric=\"logloss\", random_state=0, use_label_encoder=False)\nXGB_model.fit(X_train, y_train)\ntest_predictions = XGB_model.predict(test)","056e558f":"output = pd.DataFrame({\"PassengerId\":test_df[\"PassengerId\"], \n                      \"Survived\": test_predictions})\noutput.to_csv(\"submission.csv\", index=False)","ac649dff":"output","d4e9005b":"## Outliers","11b1b736":"# Model v","f90078b3":"Optimal max_depth = 9","c1890b0f":"# Packages","93a1ede9":"Optimal n_estimators=140","bf0ecd01":"## Preprocessing","be224404":"# Numeric Values","5f70145c":"# Preprocessing","3e68f4b3":"# Submission","4d791420":"Optimal learning_rate = 0.28","ddfe216e":"## Categorical Variables","ee58d526":"## Predictions"}}