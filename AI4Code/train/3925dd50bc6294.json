{"cell_type":{"51125a46":"code","11111230":"code","6da677d8":"code","cdce0627":"code","e63504a1":"code","721b22db":"code","ee48ea64":"code","a1a6a6c9":"code","7c415112":"code","0df8ed32":"code","d5182d39":"code","b8b3d7e9":"code","8d7ef6b5":"code","de3e0328":"code","43f97aca":"code","91b6000a":"code","0890888d":"code","5b19e206":"code","4efef15f":"code","2fd33cd6":"code","c44f7914":"code","5ef0f70d":"code","94c494f1":"code","c8ef23f8":"code","8b54f07e":"code","6d60bf07":"code","db057008":"markdown","041d070e":"markdown","2b04ba51":"markdown","c30d6556":"markdown","d9f6eff8":"markdown","29f25d89":"markdown","1c93f923":"markdown","7675959e":"markdown","b29717b8":"markdown","9c70d308":"markdown","fef6d619":"markdown","a5947d1c":"markdown","f99bcfca":"markdown","46f77174":"markdown","97666a5e":"markdown","1412a30b":"markdown","be8e3451":"markdown","a25fa4aa":"markdown","90db537e":"markdown","a2e9e677":"markdown","d82df181":"markdown","1fdfb3a1":"markdown","ca7abd97":"markdown","07dbbbb6":"markdown","c9b11784":"markdown","460dab0a":"markdown","f823c5d2":"markdown","6d27d022":"markdown","21655963":"markdown","53405683":"markdown","6dd460bb":"markdown","001e3801":"markdown","baef7ffb":"markdown"},"source":{"51125a46":"import numpy as np # linear algebra\nimport pandas as pd # data processing\n\n#plotly\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom plotly import tools\n\n#color scales\nimport colorlover as cl\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n#load multiple choice data into variable\nmultiple_choice = pd.read_csv(\"..\/input\/multipleChoiceResponses.csv\")\n","11111230":"#dictionary used to shorten answers for major\nmajors_dict = {\"Computer science (software engineering, etc.)\":\"Computer Sci & Eng\",\n               \"Engineering (non-computer focused)\":\"Engineering\",\n               \"Mathematics or statistics\":\"Mathematics\",\n               \"A business discipline (accounting, economics, finance, etc.)\":\"Business\", \n               \"Physics or astronomy\":\"Physics\", \n               \"Information technology, networking, or system administration\":\"Info Tech\", \n               \"Medical or life sciences (biology, chemistry, medicine, etc.)\": \"Life Sciences\", \n               \"Social sciences (anthropology, psychology, sociology, etc.)\": \"Social Sciences\", \n               \"Humanities (history, literature, philosophy, etc.)\": \"Humanities\", \n               \"Environmental science or geology\": \"Earth Sciences\", \n               \"Fine arts or performing arts\" : \"Arts\",\n               \"I never declared a major\":\"Undeclared\"}\n\n#dictionary used to shorten answers for degree\ndegree_dict = {\"Some college\/university study without earning a bachelor\u2019s degree\":\"Some college\/university\",\n               \"No formal education past high school\":\"High school\"}\n#dictionary used to shorten answers for degree\nindustry_dict = {\"I am a student\":\"Student\"}\n\n#multiple_choice is filtered by reported degrees\n#columns were renamed to make code easier to use\/read\n#columns that were used in analysis were selected\n#dictionaries listed above were used to shorten survey answers\neducation = (multiple_choice[(multiple_choice.Q4.notnull())\n                             &(multiple_choice.Q4!=\"I prefer not to answer\")]     \n          .rename(columns={'Q2':'age',\n                           'Q3':'country',\n                           'Q4':'degree',\n                           'Q5':'major',\n                           'Q6':'job',\n                           'Q7':'industry',\n                           'Q8':'experience',\n                           'Q9':'salary',\n                           'Q12_MULTIPLE_CHOICE':'software',\n                           'Q17':'language'})\n          .replace({'major': majors_dict,'degree':degree_dict,'industry':industry_dict})\n          .loc[:,['age','country','degree','major','job','industry',\n                  'experience','salary','software','language']])[1:]\n\n#value counts for each of the following attributes were taken and used\nmajors = education.major.value_counts()\ndegrees = education.degree.value_counts()\nage = education.age.value_counts()\njobs = education.job.value_counts()\nindustries = education.industry.value_counts()\nexperience = education.experience.value_counts()\nsoftwares = education.software.value_counts()\nlanguages = education.language.value_counts()\nsalaries = education.salary.value_counts()\n","6da677d8":"#plotly pie graph chart code for degrees\n#all pie charts follow a similar if not exact format\ndegrees_layout = go.Layout(title= 'Degrees',font=dict(size=15))\ndata = [go.Pie(labels=degrees.index,\n               values=degrees.values,\n               marker=dict(colors=[\"crimson\",\"goldenrod\",\"firebrick\",\n                                   \"darkkhaki\",\"gray\",\"dimgray\"]))]\nfigure = go.Figure(data=data,layout=degrees_layout)\niplot(figure)\n","cdce0627":"#plotly pie graph chart code for majors\nmajors_layout = go.Layout(title= 'Majors', font=dict(size=15))\ndata = [go.Pie(labels=majors.index,values=majors.values)]\nfigure = go.Figure(data=data,layout=majors_layout)\n\niplot(figure)","e63504a1":"# Pre-defined functions were used in analysis for making stacked bar chart subplots\n# Functions are used repeatedly for Distributions with Degree Distributions\n# This is to keep the plotting code from looking messy\n# Note: I could have used some for-loops within these functions\n\n# Calculates the number of each degree for every element within a given attribute\n# as a *percentage of the total count for the attribute*.\n# Attributes include: age, major,job and industry\n# Stacks each degree for every element within the given attribute\n# As a result, stacked bar graph also shows the overall distribution of each attribute\ndef degree_percentage(attribute):\n    phd = education[education.degree=='Doctoral degree'][attribute].value_counts().reindex(idx)\/total*100\n    ms = education[education.degree=='Master\u2019s degree'][attribute].value_counts().reindex(idx)\/total*100\n    bs = education[education.degree=='Bachelor\u2019s degree'][attribute].value_counts().reindex(idx)\/total*100\n    prof = education[education.degree=='Professional degree'][attribute].value_counts().reindex(idx)\/total*100\n    some = education[education.degree=='Some college\/university'][attribute].value_counts().reindex(idx)\/total*100\n    high = education[education.degree=='High school'][attribute].value_counts().reindex(idx)\/total*100\n    \n    phd_tr = go.Bar(y=phd.index,x=phd.values,name='Doctoral degree',marker=dict(color=\"firebrick\"),orientation = 'h')\n    ms_tr = go.Bar(y=ms.index,x=ms.values,name='Master\u2019s degree',marker=dict(color=\"crimson\"),orientation = 'h')\n    bs_tr = go.Bar(y=bs.index,x=bs.values,name='Bachelor\u2019s degree',marker=dict(color=\"goldenrod\"),orientation = 'h')\n    prof_tr = go.Bar(y=prof.index,x=prof.values,name='Professional degree',marker=dict(color=\"darkkhaki\"),orientation = 'h')\n    some_tr = go.Bar(y=some.index,x=some.values,name='Some college\/university',marker=dict(color=\"gray\"),orientation = 'h')\n    high_tr = go.Bar(y=high.index,x=high.values,name='High school',marker=dict(color=\"dimgray\"),orientation = 'h')\n    \n    data = [high_tr,some_tr,prof_tr,bs_tr,ms_tr,phd_tr]\n    return data\n\n# Performs same thing as before but as a *percentage of each element*.\n# As a result, stacked bar graph shows the degree distribution for each element\ndef normalized_degree_percentage(attribute):\n    norm_phd = (education[education.degree=='Doctoral degree'][attribute].value_counts().reindex(idx)\/education[attribute].value_counts()*100)\n    norm_ms = (education[education.degree=='Master\u2019s degree'][attribute].value_counts().reindex(idx)\/education[attribute].value_counts()*100)\n    norm_bs = (education[education.degree=='Bachelor\u2019s degree'][attribute].value_counts().reindex(idx)\/education[attribute].value_counts()*100)\n    norm_prof = (education[education.degree=='Professional degree'][attribute].value_counts().reindex(idx)\/education[attribute].value_counts()*100)\n    norm_some = (education[education.degree=='Some college\/university'][attribute].value_counts().reindex(idx)\/education[attribute].value_counts()*100)\n    norm_high = (education[education.degree=='High school'][attribute].value_counts().reindex(idx)\/education[attribute].value_counts()*100)\n    \n    phd_ntr = go.Bar(y=norm_phd.index,x=norm_phd.values,name='Doctoral degree',showlegend=False,marker=dict(color=\"firebrick\"),orientation = 'h')\n    ms_ntr = go.Bar(y=norm_ms.index,x=norm_ms.values,name='Master\u2019s degree',showlegend=False,marker=dict(color=\"crimson\"),orientation = 'h')\n    bs_ntr = go.Bar(y=norm_bs.index,x=norm_bs.values,name='Bachelor\u2019s degree',showlegend=False,marker=dict(color=\"goldenrod\"),orientation = 'h')\n    prof_ntr = go.Bar(y=norm_prof.index,x=norm_prof.values,name='Professional degree',showlegend=False,marker=dict(color=\"darkkhaki\"),orientation = 'h')\n    some_ntr = go.Bar(y=norm_some.index,x=norm_some.values,name='Some college\/university',showlegend=False,marker=dict(color=\"gray\"),orientation = 'h')\n    high_ntr = go.Bar(y=norm_high.index,x=norm_high.values,name='High school',showlegend=False,marker=dict(color=\"dimgray\"),orientation = 'h')\n\n    norm_data = [high_ntr,some_ntr,prof_ntr,bs_ntr,ms_ntr,phd_ntr]\n    return norm_data\n\n\n# Appends degree percentage and normalized degree percentage\n# to the first and second subplots respectively.\ndef append_degrees(figure,data,norm_data):\n    figure.append_trace(data[0],1,1)\n    figure.append_trace(data[1],1,1)\n    figure.append_trace(data[2],1,1)\n    figure.append_trace(data[3],1,1)\n    figure.append_trace(data[4],1,1)\n    figure.append_trace(data[5],1,1)\n    \n    figure.append_trace(norm_data[0],1,2)\n    figure.append_trace(norm_data[1],1,2)\n    figure.append_trace(norm_data[2],1,2)\n    figure.append_trace(norm_data[3],1,2)\n    figure.append_trace(norm_data[4],1,2)\n    figure.append_trace(norm_data[5],1,2)\n    return figure","721b22db":"# Used idx to manually sort age group strings into numerical order \nidx = ['80+','70-79','60-69','55-59','50-54','45-49','40-44','35-39','30-34','25-29','22-24','18-21']\n# Defined total as sum of ages\ntotal = age.sum()\n\n# Stacked bar sublots for age \n# All stacked bar subplots follow same format\n\n# Using pre-defined functions degree_percentage and normalized_degree_percentage\ndata = degree_percentage('age')\nnorm_data = normalized_degree_percentage('age')\n\nfigure = tools.make_subplots(print_grid=False,rows=1, cols=2,shared_yaxes=True)\n\nfigure['layout'].update(title='Age Distribution with Degree Distributions',font=dict(size=15), barmode='stack',\n                        height=600,margin=dict(t=100,l=100),yaxis=dict(title='Age [Years]'))\n\nfigure['layout']['xaxis1'].update(title='% of Total',dtick=5,tickangle=45,ticks='outside')\nfigure['layout']['xaxis2'].update(title='% of Age Group',dtick=20,tickangle=45,ticks='outside')\n\nappend_degrees(figure,data,norm_data)\n\niplot(figure)","ee48ea64":"# Defined idx according to value_counts of major \nidx = majors.index[::-1]\n\n# Defined total as sum of majors\ntotal = majors.sum()\n\n# Stacked bar sublots for major \ndata = degree_percentage('major')\nnorm_data = normalized_degree_percentage('major')\n\nfigure = tools.make_subplots(print_grid=False,rows=1, cols=2, shared_yaxes=True)\nfigure['layout'].update(title='Major Distribution with Degree Distributions',font=dict(size=15), barmode='stack',\n                        xaxis=dict(tickangle=45),height=700,margin=dict(t=100,b=160,l=180))\n\nfigure['layout']['xaxis1'].update(title='% of Total')\nfigure['layout']['xaxis2'].update(title='% of Major')\n\nappend_degrees(figure,data,norm_data)\n\niplot(figure)\n","a1a6a6c9":"# Used dictionary to combined reported majors \ncombined_dict = {\"Life Sciences\":\"Non-Computer Science\",\"Social Sciences\":\"Non-Computer Science\",\n                 \"Earth Sciences\":\"Non-Computer Science\",\"Physics\":\"Non-Computer Science\",\n                 \"Humanities\":\"Other\",\"Arts\":\"Other\"}\n\n# Value counts taken of combined majors\ncombined_majors = (education\n                  .replace({'major': combined_dict})\n                  .major\n                  .value_counts())\n\n# Pie chart of combined majors\ncombined_majors_layout = go.Layout(title= 'Majors (Combined)', font=dict(size=15))\n\ndata =[go.Pie(labels=combined_majors.index,values=combined_majors.values)]\n\nfigure = go.Figure(data=data,layout=combined_majors_layout)\n\niplot(figure)\n","7c415112":"# Pie chart of jobs\njobs_layout = go.Layout(title= 'Jobs', font=dict(size=15))\ndata = [go.Pie(labels=jobs.index,values=jobs.values)]\nfigure = go.Figure(data=data,layout=jobs_layout)\n\niplot(figure)","0df8ed32":"# Pie chart of industries\nindustries_layout = go.Layout(title= 'Industries', font=dict(size=15))\ndata = [go.Pie(labels=industries.index,values=industries.values)]\nfigure = go.Figure(data=data,layout=industries_layout)\n\niplot(figure)","d5182d39":"# Defined idx according to value_counts of jobs \nidx = jobs.index[::-1]\n# Defined total as sum of jobs \ntotal = jobs.sum()\n# Same as before, stacked bar subplots for jobs\ndata = degree_percentage('job')\nnorm_data = normalized_degree_percentage('job')\n\nfigure = tools.make_subplots(print_grid=False,rows=1,cols=2,shared_yaxes=True)\n\nfigure['layout'].update(title='Job Distribution with Degree Distributions',font=dict(size=15),\n                        barmode='stack',xaxis=dict(tickangle=45),height=700,\n                        margin=dict(t=100,b=160,l=200))\n\nfigure['layout']['xaxis1'].update(title='% of Total')\nfigure['layout']['xaxis2'].update(title='% of Occupation')\n\nappend_degrees(figure,data,norm_data)\n\nbar = iplot(figure)","b8b3d7e9":"# Defined idx according to value_counts of industry\nidx = industries.index[::-1]\n# Defined total as sum of industries \ntotal = industries.sum()\n# Same as before, stacked bar subplots for industries\ndata = degree_percentage('industry')\nnorm_data = normalized_degree_percentage('industry')\n\nfigure = tools.make_subplots(print_grid=False,rows=1, cols=2, shared_yaxes=True)\n\nfigure['layout'].update(title='Industry Distribution with Degree Distributions',font=dict(size=15),\n                        barmode='stack',xaxis=dict(tickangle=45),height=700,\n                        margin=dict(t=100,b=160,l=300))\n\nfigure['layout']['xaxis1'].update(title='% of Total')\nfigure['layout']['xaxis2'].update(title='% of Industry')\n\nappend_degrees(figure,data,norm_data)\n\nbar = iplot(figure)","8d7ef6b5":"# Used yrs_idx to sort years of experience\nyrs_idx = ['0-1','1-2','2-3','3-4','4-5','5-10', '10-15','15-20','20-25','25-30','30 +']\n\n# exp is the value count for years of experience as a percentage of the sum\nexp = (experience\/experience.sum()*100).reindex(yrs_idx)\n\n# Simple bar chart for years of experience distribution\n# All simple bar charts follow similar format\nexperience_layout = go.Layout(title= 'Years of Experience', font=dict(size=15),\n                              xaxis=dict(tickangle=45,title='Age [Years]'),\n                              yaxis=dict(title='Percent of Total'),margin=dict(b=100))\n\ndata=[go.Bar(x=exp.index,\n             y=exp.values,\n             marker=dict(color=exp.values,\n                         colorscale='Viridis',\n                         showscale=True,\n                         reversescale=True))]\n\nfigure = go.Figure(data=data,layout=experience_layout)\n\niplot(figure)","de3e0328":"# lang is the value count for years of experience as a percentage of the sum\nlang = languages\/languages.sum()*100\n\n#Simple bar chart for languages \nlanguages_layout = go.Layout(title= 'Languages', font=dict(size=15),xaxis=dict(tickangle=45),\n                             yaxis=dict(title='Percent of Total'),margin=dict(b=160))\n\ndata=[go.Bar(x=lang.index,\n             y=lang.values,\n             marker=dict(color=lang.values,\n                         colorscale='Jet',\n                         showscale=True,\n                         reversescale=True))]\n\nfigure = go.Figure(data=data,layout=languages_layout)\n\niplot(figure)\n","43f97aca":"# Used other_dict to group all languages other than Python and R\nother_dict={'SQL':'Other',\n            'Java':'Other',\n            'C\/C++':'Other',\n            'C#\/.NET':'Other',\n            'Javascript\/Typescript':'Other',\n            'MATLAB':'Other',\n            'SAS\/STATA':'Other',\n            'PHP':'Other',\n            'Visual Basic\/VBA':'Other',\n            'Scala':'Other',\n            'Bash':'Other',\n            'Ruby':'Other',\n            'Go':'Other',\n            'Julia':'Other'}\n# Selected multiple choice data for Python and R\npythonR = (education[(education.language=='Python')|(education.language=='R')]\n           .copy())\n# Selected multiple choice data for other languages and unspecified languages\nother = (education[(education.language!='Python')&(education.language!='R')]\n         .copy()\n         .replace({'language': other_dict})\n         .dropna())\n# Concatenated both data sets so all languages are only Python, R or Other\npro = pd.concat([pythonR,other])\n\n# Value counts of each attribute used for this section\npro_majors = pro.major.value_counts()\npro_jobs = pro.job.value_counts()\npro_ages = pro.age.value_counts()\npro_exp = pro.experience.value_counts()\n\n# List of index names for sorting in plots\nlang_idx = ['Python', 'Other', 'R']\nyrs_idx = ['0-1','1-2','2-3','3-4','4-5','5-10', '10-15','15-20','20-25','25-30','30 +']\nmaj_idx = majors.index\njob_idx = jobs.index\n# Used similar color as bar plot before\ncolor_idx = [\"blue\",\"orange\",\"red\"]","91b6000a":"# Used for-loop to quickly calculate the normalized percentages of each language\n# for every years of experience group.\n# Stored values and made a trace for each language.\n# Appended each trace to list called data\n# Stacked bar chart of language by years of experience\n# The other two bar charts in this section follow the same format.\n\ncount=0\ndata=[]\n\nfor i in lang_idx:\n    langs = pro[pro.language==i].experience.value_counts().reindex(yrs_idx)\n    norm = (langs\/pro_exp.reindex(yrs_idx)*100)\n    trace = go.Bar(x=norm.index,\n                   y=norm.values,\n                   name=i,\n                   marker=dict(color=color_idx[count]))                      \n    count=count+1\n    data.append(trace)\n\nlang_age_layout = go.Layout(title= 'Language Distribution by Years of Experience',font=dict(size=15),\n                            xaxis=dict(tickangle=45,title='Experience [Years]'),\n                            yaxis=dict(title='Percent of Year Range'),\n                            barmode='stack')\nfigure = go.Figure(data=data,layout=lang_age_layout)\n\niplot(figure)","0890888d":"# Stacked bar chart of languages by major\n\ncount=0\ndata=[]\n\nfor i in lang_idx:\n    langs = pro[pro.language==i].major.value_counts().reindex(maj_idx)\n    norm = (langs\/pro_majors.reindex(maj_idx)*100)\n    trace = go.Bar(x=norm.index,\n                   y=norm.values,\n                   name=i,\n                   marker=dict(color=color_idx[count]))                      \n    count=count+1\n    data.append(trace)\n\nlang_maj_layout = go.Layout(title= 'Language Distributions by Major',font=dict(size=15),\n                            xaxis=dict(tickangle=45),yaxis=dict(title='Percent of Major'),\n                            barmode='stack',margin=dict(b=160))\n\nfigure = go.Figure(data=data,layout=lang_maj_layout)\n\niplot(figure)","5b19e206":"# Stacked bar chart of languages by job\n\ncount=0\ndata=[]\n\nfor i in lang_idx:\n    langs = pro[pro.language==i].job.value_counts().reindex(job_idx)\n    profession = (langs\/pro_jobs.reindex(job_idx)*100)\n    trace = go.Bar(x=profession.index,\n                   y=profession.values,\n                   name=i,\n                   marker=dict(color=color_idx[count]))                      \n    count=count+1\n    data.append(trace)\n\nlang_job_layout = go.Layout(title= 'Language Distributions by Job',font=dict(size=15),\n                            xaxis=dict(tickangle=45),yaxis=dict(title='Percent of Job'),\n                            barmode='stack',margin=dict(b=200))\nfigure = go.Figure(data=data,layout=lang_job_layout)\niplot(figure)","4efef15f":"# Used yrs_dict to group years of experience into three groups\nyrs_dict = {'0-1':'0-2','1-2':'0-2','2-3':'2-5','3-4':'2-5',\n            '4-5':'2-5','5-10':'5+','10-15':'5+','15-20':'5+',\n            '20-25':'5+','25-30':'5+','30 +':'5+'}\n# Used deg_dict to group degrees into three groups\ndeg_dict = {'High school':'No College Degree',\n            'Some college\/university':'No College Degree',\n            'Professional degree':'Undergraduate Degree',\n            'Bachelor\u2019s degree':'Undergraduate Degree',\n            'Master\u2019s degree':'Graduate Degree',\n            'Doctoral degree':'Graduate Degree'}\nsal_dict = {'0-10,000':'0-20,000',\n            '10-20,000':'0-20,000',\n            '20-30,000':'20-40,000',\n            '30-40,000':'20-40,000',\n            '40-50,000':'40-60,000',\n            '50-60,000':'40-60,000',\n            '60-70,000':'60-80,000',\n            '70-80,000':'60-80,000',\n            '80-90,000':'80-100,000',\n            '90-100,000':'80-100,000',\n            '200-250,000':'200,000+',\n            '250-300,000':'200,000+',\n            '300-400,000':'200,000+',\n            '400-500,000':'200,000+',\n            '500,000+':'200,000+'}\n\n# reported_salaries is the selected data based on the criteria written \n# in the Markdown above\nreported_salaries = (education[(education.salary!='I do not wish to disclose my approximate yearly compensation')\n                                &(education.salary.notnull())\n                                &(education.job!='Student')\n                                &(education.job!='Not employed')\n                                &(education.job.notnull())\n                                &(education.industry!='Student')\n                                &(education.country=='United States of America')]\n                     .loc[:,['degree','experience','salary','job','industry']]\n                     .replace({'experience': yrs_dict,'degree':deg_dict}))\n\nreported_employment = (education[(education.job!='Student')\n                                 &(education.job.notnull())\n                                 &(education.industry!='Student')\n                                 &(education.country=='United States of America')]\n                       .loc[:,['degree','experience','salary','job','industry']])\n\n\n# reported_salaries with index rename as Used\nreported = (pd.Series([reported_salaries.salary.value_counts().sum()])\n            .rename(index={0:'Used'}))\n# Sum of all salaries in originally selected data\nall_salaries_sum = (education.salary\n                    .fillna('nada')\n                    .value_counts()\n                    .sum())\n# unreported is difference between the sum of all salaries \n# and the sum of Used entries\nunreported = (pd.Series([all_salaries_sum-reported_salaries.salary.value_counts().sum()])\n              .rename(index={0:'Unused'}))\n\n# Concatenated used and unused into single df\nrep = pd.concat([reported,unreported])\n\n# lists yearly incomes in numberical order \nsal_idx = ['0-10,000','10-20,000','20-30,000','30-40,000','40-50,000',\n           '50-60,000','60-70,000','70-80,000','80-90,000','90-100,000',\n           '100-125,000','125-150,000','150-200,000','200-250,000',\n           '250-300,000','300-400,000','400-500,000','500,000+']\n\n# lists years of experience in numerical order\nyrs_idx = ['0-2','2-5','5+']\n#lists degrees in chronological order\ndeg_idx = ['No College Degree','Undergraduate Degree','Graduate Degree']\n#lists colors in order\ncolor_idx = [\"gray\",\"goldenrod\",\"firebrick\"]\n\n# Grouping yearly incomes into three groups \ngrouped_salaries = (reported_salaries\n                    .replace({'salary': sal_dict}))\n\n# Value counts for grouped incomes\ngroup_jobs = grouped_salaries.job.value_counts()\ngroup_inds = grouped_salaries.industry.value_counts()\n\n# Numerical order of grouped incomes\ngroup_idx = ['0-20,000','20-40,000','40-60,000','60-80,000','80-100,000','100-125,000',\n             '125-150,000','150-200,000','200,000+']\n","2fd33cd6":"# Pie chat of Used and Unused data\nrep_layout = go.Layout(title= 'Used & Unused Portions',font=dict(size=15))\n\ndata= [go.Pie(labels=rep.index,values=rep.values)]\nfigure = go.Figure(data=data,layout=rep_layout)\n\niplot(figure)","c44f7914":"# Bar chart of yearly incomes selected by the before mentioned criteria\nsal = ((reported_salaries.salary.value_counts()\/reported_salaries.salary.value_counts().sum()*100)\n       .reindex(sal_idx))\n\nsalaries_layout = go.Layout(title= 'Yearly Incomes',font=dict(size=15),\n                            xaxis=dict(tickangle=45,title='Yearly Income [$]'),\n                            yaxis=dict(title='Percent of Total'),margin=dict(b=200))\n\ndata=[go.Bar(x=sal.index,\n             y=sal.values,\n             marker=dict(color=sal.values,\n                         colorscale='Viridis',\n                         showscale=True,\n                         reversescale=True),\n             orientation='v')]\n\n\nsalaries_bar = iplot(go.Figure(data=data,layout=salaries_layout))","5ef0f70d":"# Used for-loop to quickly calculate the distributions of yearly income\n# Normalized by each years of experience group \n# Stored values and made a trace for each degree.\n# Appended each trace to list called data\n# Line chart of yearly income distributions for each years of experience group\n# The other line charts in this section follow the same format.\n\ncount=0\ndata=[]\n\nfor i in yrs_idx:\n    sals = (reported_salaries[reported_salaries.experience==i]\n            .salary\n            .value_counts()\n            .reindex(sal_idx,fill_value=0))\n    \n    exp = sals\/sals.sum()*100\n    trace = go.Scatter(x=exp.index,\n                       y=exp.values,\n                       name=i,\n                       mode='lines',\n                       connectgaps=True,\n                       line=dict(color=color_idx[count],\n                                 width=8,\n                                 shape='linear'))\n                               \n    count=count+1\n    data.append(trace)\n\nsal_exp_layout = go.Layout(title= 'Yearly Income Distributions for Years of Experience',\n                           font=dict(size=15),margin=dict(b=160),\n                           xaxis=dict(showgrid=False,tickangle=45,\n                                      title=('Yearly Income [$]')),\n                           yaxis=dict(title='Percent of Age Group'))\n\nfigure = go.Figure(data=data,layout=sal_exp_layout)\n\niplot(figure)","94c494f1":"# Normalized by each degree group \n# Line chart of yearly income distributions for each degree group.\n\ncount=0\ndata=[]\n\nfor i in deg_idx:\n    sals = (reported_salaries[reported_salaries.degree==i]\n            .salary.value_counts()\n            .reindex(sal_idx,fill_value=0))\n    \n    deg = sals\/sals.sum()*100\n    trace = go.Scatter(x=deg.index,\n                       y=deg.values,\n                       name=i,\n                       mode='lines',\n                       line=dict(color=color_idx[count],\n                                 width=8,\n                                 shape='linear'))\n                               \n    count=count+1\n    data.append(trace)\n\nsal_deg_layout = go.Layout(title= 'Yearly Income Distributions for Degrees',font=dict(size=15),\n                           xaxis=dict(showgrid=False,tickangle=45,\n                                      title='Yearly Income [$]'),\n                           yaxis=dict(title='Percent of Degree'),\n                           margin=dict(b=160))\nfigure = go.Figure(data=data,layout=sal_deg_layout)\n\niplot(figure)","c8ef23f8":"#Simple bar chart of unemployment\ndegree_idx = ['High school','Some college\/university','Professional degree',\n              'Bachelor\u2019s degree', 'Master\u2019s degree', 'Doctoral degree']\n\ntotal = reported_employment.degree.value_counts().reindex(degree_idx)\nunemployment = reported_employment[reported_employment.job=='Not employed'].degree.value_counts().reindex(degree_idx)\n\nnorm = unemployment\/total*100\n\ntrace = go.Bar(x=norm.index,\n               y=norm.values,\n               name='Unemployed')\ndata = [trace]\n\nlayout = go.Layout(title= 'Unemployment Rate by Degree',font=dict(size=15),\n                            xaxis=dict(tickangle=45),\n                            yaxis=dict(title='Percent of Year Range'),\n                            barmode='stack',\n                            margin=dict(b=160))\n\nfigure = go.Figure(data=data,layout=layout)\n\niplot(figure)","8b54f07e":"# Simialar to what was done in languages\n# For incomes and jobs\ncolor_idx = cl.scales['9']['div']['Spectral']\n\ncount=0\ndata=[]\n\nfor i in group_idx:\n    sals = grouped_salaries[grouped_salaries.salary==i].job.value_counts().reindex(group_jobs.index)\n    norm = (sals\/group_jobs.reindex(group_jobs.index)*100)\n    trace = go.Bar(x=norm.index,\n                   y=norm.values,\n                   name=i,\n                   marker=dict(color=color_idx[count]))                      \n    count=count+1\n    data.append(trace)\n\nlayout = go.Layout(title= 'Yeary Income [$] Distribution by Job',font=dict(size=15),\n                            xaxis=dict(tickangle=45),\n                            yaxis=dict(title='Percent of Year Range'),\n                            barmode='stack',\n                            margin=dict(b=160))\nfigure = go.Figure(data=data,layout=layout)\n\niplot(figure)","6d60bf07":"# Simialar to what was done in languages\n# For incomes and industries\ncolor_idx =cl.scales['9']['div']['Spectral']\n\ncount=0\ndata=[]\n\nfor i in group_idx:\n    sals = grouped_salaries[grouped_salaries.salary==i].industry.value_counts().reindex(group_inds.index)\n    norm = (sals\/group_inds.reindex(group_inds.index)*100)\n    trace = go.Bar(x=norm.index,\n                   y=norm.values,\n                   name=i,\n                   marker=dict(color=color_idx[count]))                      \n    count=count+1\n    data.append(trace)\n\nlang_age_layout = go.Layout(title= 'Yeary Income [$] Distribution by Industry',font=dict(size=15),\n                            xaxis=dict(tickangle=45,tickfont=dict(size=12)),\n                            yaxis=dict(title='Percent of Year Range'),\n                            barmode='stack',\n                            margin=dict(b=200))\nfigure = go.Figure(data=data,layout=lang_age_layout)\n\niplot(figure)","db057008":"## Educations  \n\nLets get started! The first portion of this analysis is focused on education.  We look look at degrees, majors, age, jobs, industries and how they relate to each other.\n","041d070e":"**Yearly Income Distribution by Years of Experience**  \nThe values for years of experience were regrouped into three main categories: 0-2, 2-5 and 5+. This was rationalized looking looking at the distribution of experience in the previous plot and dividing it roughly into three even chunks.  Yearly income distributions were taken as percentage of each years of experience group (i.e. the integral of each curve equals 100%). The graph shows an expected trend:  the salary distribution shifts towards higher values as the years of experience are increased (from gray to red).  Generally,  more experience often results higher income.","2b04ba51":"**Yearly Income Distribution**  \nLet's first look at the yearly income distribution. The largest income group is $100-125,000 after the removal of students and unemployed. Now, let's  see how years of experience and degrees pay off.","c30d6556":"### Degree Distributions by Jobs and Industries  \n\nSimilar to what was done before with the ages and majors,  let's see the degree distributions from jobs and industries. ","d9f6eff8":"### Language Distributions by Major  \nAn interesting aspect to this plot of langauge distributions  by major is how much the percentage of R flucatuates. Mathematics and Social Sciences have the highest percentages (~31%), followed by the rest of the Business,  Earth Sciences and Life Sciences. This indicates that those with a strong statistics background are more likely to use R. Let's see if this holds true when we examine the distributions by job. ","29f25d89":"## Incomes  \nNow for the part that everybody cares about: money. However, some cleaning is in order.  For this section, we will examine the yearly US income because the US has largest number of respondents and yearly income is reported in USD. It is very difficult to compare yearly income across different countries due to a host of various reasons. If yearly income was not reported in the survey or 'I do not wish to disclose my approximate yearly compensation' was selected, the entry was removed from analysis. Furthermore, all entries listed as students, unemployed or unspecified occupation\/industry were removed from analysis. (Note: I do not mean to offend any students or unemployed. I've been there.)  \n\n\nAll variables and index lists are in the code below. Dictionaries were also used to regroup years of experience and degrees. Further explanation of these groupings are provided later in the analysis.","1c93f923":"### Majors  \nAs expected, the majority of respondents are from strong computational backgrounds, with 41% of all majors being in Computer Science\/Engineering followed by Non-Computer Engineering and Mathematics. Interestingly, a significant chunk comes from Business too. All of the Science majors are distributed over smaller percentages between Physics, Life Sciences, Social Sciences and Earth Sciences. ","7675959e":"### Yearly Income Distribution by Industry  \n\nLet's examine pay distributions for industries. There is nothing too interesting except for the income distribution for Academics\/Education (Remember: students are discluded). The incomes for Academics\/Education are distributed over significantly lower values than most other industries. If we consider the fact that Academics\/Education is the second most populated industry, most low incomes in the overall distribution come from this group. Furthermore, Academics\/Education generally requires more advanced degrees as shown in the beginning of this notebook. It seems that degrees play a huge role for  career advancement in Academics\/Education but the industry by itself generally doesn't pay that much. This could explain why we don't notice a huge difference in income distributions for different degree types. ","b29717b8":"### Unemployment by Degree  \nThe previous plot before ignores one important aspect of income: unemployment. The graph below shows the unemployment by degree. It seems that just having at least some college or university greatly increases one's chances of being employed. In fact, those with a professional degree have the lowest rates.  Therefore, education seems to only have a noticeable impact on employment as long as somebody has at least some educational experience past high school. If somebody wants to increase their chances of getting a job, the best thing to do would to get a professional degree as far as degrees go. ","9c70d308":"## Languages\n\nProgramming languages are an important aspect of working in data science. In this section, let's see how one's years of experience, major and job impact the languages they use. Before we do this though, let's just look at the overall distribution of **languages that respondents said they used the most**. The pie bar chart is shown below and indicates that majority use Python the most, followed by R and a host of others. ","fef6d619":"#### Major Distribution with Degree Distributions  \nThe major distibutions follow accordingly to the pie chart of majors. Interestingly, Computer Science\/Engineering has the largest percentage of Bachelor's with respect to both the entire population and its own population.  Furthermore, a huge percentage of Physics majors have a Doctoral degree, ~44%. In fact, all of the other science majors have large relative percentages, ~22.8-34.8%. In fact, we might have remake the previous pie chart of majors.","a5947d1c":"### Years of Experience  \nThe most important part of an education is how much you practice. Although not perfect, the best measure that we have of this is years of experience. The bar plot below shows the percent distribution for years of experience that is sorted by yearly range. Approximately 28% of all respondents are within there first year with data science, the largest percentage out of any group. This probably due to the fact that most users are using Kaggle to learn and gain experience. Generally,  the percentage decreases as years of experiences increases. The exception is between ranges 4-5 and 5-10. This is probably due to the fact that 5-10 is a larger range and more counts can be included.","f99bcfca":"### Opening Statement  \n\nExperience in data science and analytics is an increasingly popular requirement for many job openings. Due to its inherently interdisciplinary nature, data scientists and analysts come from a diverse range of educational and professional backgrounds. In this notebook, these backgrounds are used to see how Kaggle users develop professionally. Specifically, we will explore these developments via the 2018 Kaggle Survey in an attempt to understand respondents' education, work and pay.   ","46f77174":"### Multiple Choice: Cleaning and Selecting\n\nFor the sake of time, only the multiple choice questions were used in this analysis. It was noticed that some of the answers to the multiple choice were long. These answers were shortened using dictionaries in the code below.  Since this analysis has a heavy emphasis on education, a survey entry was removed if a degree was not given  or 'I prefer not to answer' was selected in Question 4. As a result only 23093 out of the 23860 surveys were used in this analysis. The selected attributes for this analysis were age, educational degree, educational major, current job, current industry, years of experience and most-used programming language. ","97666a5e":"**Yearly Income Distribution by Degree**  \nThe values for degrees were regrouped into three main categories: no college degree, undergraduate degree and graduate degree. Yearly income was plotted the same way as before but for these degree groupings. As can be seen from the graph below, there isn't any noticable shift for more advanced degrees. Surprisingly, this suggests that income isn't as heavily dependent on a college degree as it is with experience. As stated before, this is the case only for employed respondents and we really should examine how degrees affect employment. ","1412a30b":"To keep it simple and clear,  all of the languages that are not Python or R will grouped together as \"Other\". The code below does this and declares all variables that are used in this section.","be8e3451":"#  Professional Development in 2018 Kaggle Survey  \n  \n\n> \"The number of jobs requiring data science and analytics skills is rising steadily every year, but a lack of college graduates with the knowledge to get them means many aren't being filled.\"    \n\n *Source: Crunching the Numbers: An Atlantic Forum on Data Analytics & Tomorrow's Workforce*    \n \n If interested, watch forum hosted by *Atlantic* in the link below :  \nhttps:\/\/www.theatlantic.com\/live\/events\/crunching-the-numbers\/2017\/\n\n ","a25fa4aa":"## Conclusion  \n\nThe degree held by a survey respondents seems to be mostly dependent on their discipline which can be defined by their major, job and industry. Graduate degrees seem to only be important in certain fields, particularly the sciences and academia. The programming language that a respondent uses most often is dependent upon years of experience and whether one comes from a statistics-heavy background. Years of experience does have a significant effect on the distribution of Python users where less experienced users are more likely to use Python. However, the percent of R users remains relatively constant with respect to years of experience but can change dramatically depending on whether someone works or comes from statistics-heavy background . Overall, experienced respondents tended to earn more than less experienced users as noticed by the shift in yearly income distributions. This, however, didn't carry over to college degrees, where very little to no consistent change occured in the income distributions.  The significance of college degrees is mostly found in Academics\/Education, in which income is generally lower than for most other industries. However,  it was found that just having at least some college experience can greatly reduce somebody's chance of unemployment. \n\n","90db537e":"### Degree Distributions by Age and Major  \n\nNow that we have a general idea of how degrees and majors are distributed over the entire population, let's examine how the degrees are distributed over age and major. Futhermore, we'll show this distribution in two: over the entire population and for each degree. By doing this, we can see how these percentages relate to the entire population as well as within each age group and major.  We'll do this by using sets of two stacked bar charts. Since performing this operation in plotly can be cumbersome to look at, the code below defines a handful of functions that are used to append the stacked bar charts together.  As a result, the code for plotting these charts looks a little cleaner.  \n*(Side note: All distributions in this notebook are percent distributions)*","a2e9e677":"### Language Distributions by Experience\n\nThe plot shows the distribution of languages by years of experience.  The percentage of R remains relatively constant throughout the age range. However, the percentage of Python is relatively higher for amateurs (~60%) than experts (~40%) , roughly resulting a 20% difference. The specific percentages are in the chart. This could be a result of two factors: beginners find Python to be a good starting language and\/or Python is just becoming a more popular language in recent years. But, let's see what else we can figure out.","d82df181":"### Degrees  \nIn the plot below, the majority of degrees held by respondents is a Master's degree followed by a Bacholor's and Doctoral degree. The color scheme indicates how advance the degree is, where warmer colors represent more advanced degrees. This scheme will be used continuously thorughout the notebook.","1fdfb3a1":"### Jobs  \nBelow is pie chart of all the listed jobs. The most common occupation is Student followed by Data Scientist, Software Engineer and Data Analyst. There is nothing that is necessarily interesting or unexpected in this chart for this analysis. However, it is important to show this chart because we will examine jobs in more detail later on.\n","ca7abd97":"### Language Distributions by Job  \nAs stated before, it appears R is more popular for those with statistics-heavy backgrounds. The plot below verifies this statement. The majority of Statisticians used R, approximately 58%. Furthermore, any type of analyst generally have a higher percentages of R. We could go further and examine this by industry but let's not give anybody a headache and see what else we can look at. ","07dbbbb6":"#### Job Distribution with Degree Distributions  \nData scientist has a signicantly higher relative percentage of graduate degrees than Software engineer: ~75% versus ~51%, respectively . Data analysts fall in between with ~59% graduate degrees. Research Scientist and Principal Investigator have huge relative percentage of Doctoral degrees: ~64% and ~68%, respectively. This is not surprising considering that these professions often requires Doctoral degrees.","c9b11784":"## Table of Contents   \n1. [Introduction](#Introduction)\n2. [Educations](#Educations)\n3. [Languages](#Languages)\n4. [Incomes](#Incomes)\n5. [Conclusion](#Conclusion)","460dab0a":"## Introduction \n \n\n","f823c5d2":"#### Industry Distribution with Degree Distributions  \n  \n  There isn't anything too intesting here other than Academics\/Education has a high relative percentage of Doctoral degrees for. This validates a earlier point that a significant portion of Kaggle users are professors, graduate assistants, post-docs, etc. This could be further examined but, for the sake of conciseness, let's see what else is going on in other parts of our data. ","6d27d022":"### Visualization Method: Plotly  \n\n\nPlotly was used for graphing in this notebook due to its advanced capability of making \"interactive,  publication-quality graphs online.\" - as stated on Plotly-Python page: https:\/\/plot.ly\/python\/  \n\nAlthough the graphs look amazing and are interactive, there is one major downside: it's not as user friendly. This is especially the the case when making subplots of stacked bar charts. Nevertheless, it is doable and arguably worth it for the quality of graph that is produced. Below, the appropriate libraries were imported.","21655963":"### Industries  \nAgain, the pie chart of Industry seems to line up accordingly with what was seen in the previous pie chart of jobs. However, there is a significant percentage of those who work in Academics\/Education. This can be expected considering the fact that Kaggle is a popular educational resource and that many teachers, professors, research assistants and research scientists. But it would be hard to break this down because teachers and professors aren't included as an option. With this in mind, let's move on.\n","53405683":"#### Age Distribution with Degree Distributions  \n\nA significant majority of respondents are 18 to 34 with 25-29 being the most populated age group.  As expected, the degree distribution shifts more towards graduate degrees (Master's and Doctoral)  as age increases for younger ages, 18-29, and stays realtively constant for older ages, 30-69. of course. This, of course, discludes ages 70+ due to the extremely small sample sizes. \n","6dd460bb":"**Unreported Yearly Income**  \nBefore we go any further, it is important to note that only 12.2% of the originally selected data is actually being used after filtering according to the above criteria listed above. Now, we can procede.","001e3801":"### Yearly Income Distribution by Job  \nThe graph before shows there isn't any noticeable trend that stands between degrees, experience and yearly income for respondents in the US.  Now, let's look into which jobs that pay more.  As can be seen, Data Scientists make more money than Data Analysists. The distiction between these two jobs might be subtle but the difference has a significant impact on their income. Read more about the difference between the two professions on the Quora thread below.\n\nhttps:\/\/www.quora.com\/What-is-the-difference-between-a-data-analyst-and-a-data-scientist-1","baef7ffb":"### Combining Majors  \nThe latter plot shows that are significant similarities in degree distribution between all of the sciences. This suggests that the science might be better represented if they were combined. Considering that these disciplines are also heavily oriented towards academia, combining them might make sense. The following pie chart shows just this. It also groups together all of the less populated majors for the sake of simplicity.  With all of the sciences combined into Non-Computer Science, they make up a larger percentage of the entire population than Business majors and fall just short of Mathematics. "}}