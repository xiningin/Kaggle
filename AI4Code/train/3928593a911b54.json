{"cell_type":{"30a2cd9a":"code","d31eecdc":"code","e9f271a2":"code","5dfcb477":"code","9efb2207":"code","35c6abd1":"code","3d4433b4":"code","2ddc91d5":"code","a836fdd6":"code","2c563ab3":"code","01ed2bb4":"code","8a03e23a":"markdown"},"source":{"30a2cd9a":"# Importing required modules\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom datetime import datetime\nfrom sklearn.metrics import roc_auc_score\nimport numpy as np","d31eecdc":"# Importing datasets\ndata_train = pd.read_csv('..\/input\/cat-in-the-dat\/train.csv')\ndata_test = pd.read_csv('..\/input\/cat-in-the-dat\/test.csv')","e9f271a2":"# Checking Cardinality of various columns and their data types\nfor col in data_train.columns:\n    print(col,\" --- \",len(data_train[col].value_counts()),\"--- \",data_train[col].dtype)","5dfcb477":"# Checking the uniqe value to predict\nprint(data_train['target'].value_counts())","9efb2207":"# Dropping target and id and select the categorical columns\ny = data_train['target']\ndata_id = data_test['id']\n\ndata_train=data_train.drop(['id','target'],axis=1)\ndata_test=data_test.drop(['id'],axis=1)\n\ncate_cols = [cols for cols in data_train.columns if data_train[cols].dtype == 'object']","35c6abd1":"# Label Encoding the categorical columns \nencoder = LabelEncoder()\nfor col in cate_cols:\n    data_train[col] = pd.DataFrame(encoder.fit_transform(data_train[col]))\n    data_test[col] = pd.DataFrame(encoder.fit_transform(data_test[col]))   \nx_train,x_valid,y_train,y_valid = train_test_split(data_train,y,random_state=1)","3d4433b4":"# Describing our model with 200 estimators and 2 scaled position weight (For imbalanced data)\nclf = XGBClassifier(n_estimators=200,scale_pos_weight=2,random_state=1,colsample_bytree=0.5)\nclf.fit(x_train,y_train)","2ddc91d5":"predictions = clf.predict_proba(x_valid)[:,1]","a836fdd6":"# Calculating the score using roc_auc_score\nscore = roc_auc_score(y_valid,predictions)\nprint(score)","2c563ab3":"predict = clf.predict_proba(data_test)[:,1]","01ed2bb4":"submission = pd.DataFrame({'id': data_id, 'target': predict})\nsubmission.to_csv('submission.csv', index=False)","8a03e23a":"Hello kagglers,\nThis is my first public kaggle kernel.In this, i have used XGBClassifier which is trained on LabelEnocded categorical data having low cardinality.\nYour feedback is important. :) "}}