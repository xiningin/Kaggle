{"cell_type":{"737d9159":"code","7ea7e607":"code","a1b50238":"code","3b899527":"code","7f5964a5":"code","840ff35f":"code","f5fcab36":"code","02e822ea":"code","862b6e81":"code","115b1b10":"code","479d96d2":"code","640d2472":"code","eb9970c6":"code","22bee2d4":"code","9c9e9be6":"code","77d58a0d":"code","1b94064d":"code","c8c7a437":"code","8c9918e7":"code","ffe04147":"code","1e7e7b18":"code","42232ef5":"code","82029963":"code","a6e2c174":"code","cc37be31":"code","7c310fee":"code","182638d4":"code","04a8831b":"code","c0f08b68":"code","cb57c63b":"code","1062dcb2":"code","2d4a99fd":"code","db466f64":"code","93c6e55a":"code","8dfd2859":"code","11db967d":"code","8744a582":"code","193f887f":"code","cfdd8a46":"code","271c8510":"code","e0425ec2":"code","bf1cbb8b":"code","133ad0eb":"code","e3b6c11b":"markdown","2951c811":"markdown","4d81560a":"markdown","6b674cd1":"markdown","f9663848":"markdown","35da8ca1":"markdown"},"source":{"737d9159":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline\n\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n\nfrom xgboost import XGBClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import GridSearchCV","7ea7e607":"data = pd.read_csv('..\/input\/passenger-list-for-the-estonia-ferry-disaster\/estonia-passenger-list.csv')","a1b50238":"data.head()","3b899527":"data.tail()","7f5964a5":"data.info()","840ff35f":"data.describe().T","f5fcab36":"data.isnull().sum()","02e822ea":"data.Survived.value_counts()","862b6e81":"data.columns","115b1b10":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(18, 14))\nsns.countplot(data=data,palette=\"Set3\", x=\"Sex\",ax=axes[0][0])\nsns.countplot(data=data,palette=\"Set3\", x=\"Category\",ax=axes[0][1])\nsns.countplot(data=data,palette=\"Set3\", x=\"Survived\",ax=axes[1][0])\nsns.histplot(data=data, x=\"Age\",hue=\"Survived\", kde=True,ax=axes[1][1])","479d96d2":"sns.catplot(x = \"Category\", y=\"Survived\", kind = 'bar',data = data)","640d2472":"sns.catplot(x = \"Sex\", y=\"Survived\", kind = 'bar',data = data)","eb9970c6":"\nsns.catplot(x = \"Country\", y=\"Survived\", kind = 'bar',data = data,height=9, aspect=13\/9)\nplt.show","22bee2d4":"data = pd.get_dummies(data, columns = ['Category', 'Sex'],drop_first=True)\ndata.head()","9c9e9be6":"data = data.drop(['PassengerId','Country','Firstname','Lastname'],axis=1)","77d58a0d":"data.head()","1b94064d":"data.corr()","c8c7a437":"X = data.drop([\"Survived\"],axis=1)\ny = data[\"Survived\"]","8c9918e7":"X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.3,random_state=42,stratify=y)","ffe04147":"over = SMOTE()\nunder = RandomUnderSampler()\nsteps = [('o', over), ('u', under)]\npipeline = Pipeline(steps=steps)","1e7e7b18":"X_train, y_train = pipeline.fit_resample(X_train, y_train)","42232ef5":"standard_sc = StandardScaler() ","82029963":"X_train=standard_sc.fit_transform(X_train)\nX_test=standard_sc.transform(X_test)","a6e2c174":"def confusion(y_test,y_test_pred,X):\n    names=['Survived','Dead']\n    cm=confusion_matrix(y_test,y_test_pred)\n    f,ax=plt.subplots(figsize=(10,10))\n    sns.heatmap(cm,annot=True,linewidth=.5,linecolor=\"r\",fmt=\".0f\",ax=ax)\n    plt.title(X, size = 25)\n    plt.xlabel(\"y_pred\")\n    plt.ylabel(\"y_true\")\n    ax.set_xticklabels(names)\n    ax.set_yticklabels(names)\n    plt.show()\n\n    return","cc37be31":"RF = RandomForestClassifier()\nRF.fit(X_train, y_train)\npred = RF.predict(X_test)\nscore = RF.score(X_test,y_test)","7c310fee":"score","182638d4":"confusion(y_test,pred,\"RF\")","04a8831b":"print(classification_report(y_test, pred))","c0f08b68":"gbm = XGBClassifier(verbosity=1)\ngbm.fit(X_train,y_train)\ngbm_pred = gbm.predict(X_test)\ngbm_score = gbm.score(X_test,y_test)","cb57c63b":"gbm_score","1062dcb2":"confusion(y_test,gbm_pred,\"XGB\")","2d4a99fd":"print(classification_report(y_test, gbm_pred))","db466f64":"clf = MLPClassifier(random_state=42)\nclf.fit(X_train,y_train)\nclf_pred = clf.predict(X_test)\nclf_score = clf.score(X_test,y_test)","93c6e55a":"clf_score","8dfd2859":"confusion(y_test,clf_pred,\"MLP\")","11db967d":"print(classification_report(y_test, clf_pred))","8744a582":"params_xgb = {\n        \"n_estimators\":[250,500,1000,1500],\n        \"learning_rate\":[0.01,0.1,0.3,0.6],\n        'gpu_id': [0],\n        \"predictor\":[\"gpu_predictor\"],\n        'tree_method': ['gpu_hist'],\n        \"updater\":[\"grow_gpu_hist\"],\n        \"sampling_method\":[\"gradient_based\"],\n        \"updater\":[\"grow_gpu_hist\"]\n}","193f887f":"model_xgb = GridSearchCV(gbm,param_grid=params_xgb, cv=3,n_jobs=-1)\nmodel_xgb.fit(X_train,y_train)","cfdd8a46":"print(\"Best params: \"+str(model_xgb.best_params_))\nprint(\"Best Score: \"+str(model_xgb.best_score_)+'\\n')","271c8510":"scores = pd.DataFrame(model_xgb.cv_results_)\nscores.sort_values(by=\"rank_test_score\")","e0425ec2":"y_train_pred_xgb = model_xgb.predict(X_train)\ny_test_pred_xgb = model_xgb.predict(X_test)","bf1cbb8b":"confusion(y_test,y_test_pred_xgb,\"Optimized XGB\")","133ad0eb":"print(classification_report(y_test, y_test_pred_xgb))","e3b6c11b":"## EDA","2951c811":"## MLP","4d81560a":"## XGB","6b674cd1":"## RF","f9663848":"## Optimized XGB","35da8ca1":"## Preprocessing"}}