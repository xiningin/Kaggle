{"cell_type":{"5d8b67d6":"code","3785062a":"code","63fdf8e9":"code","62005dcc":"code","f2b513dd":"code","06c35032":"code","8eb59e12":"code","f4aeea5c":"code","4effce52":"code","5f0d19e9":"code","c2ed644d":"code","603a7c97":"code","d5815fd8":"code","c8cb26c4":"code","8792504e":"code","1a79cfb4":"code","7fd58eb3":"code","49849b7c":"code","2cd07420":"code","7114ca61":"code","cc302ebc":"code","6f614353":"code","dbe81dfe":"code","0ace1f51":"markdown","8a2dda2c":"markdown","f65f1b7d":"markdown","78465ec0":"markdown","428a2c57":"markdown","0831f189":"markdown","a60c8ae4":"markdown","4f95412b":"markdown","dde572c4":"markdown","773e8823":"markdown","1c4add03":"markdown","6764297a":"markdown","ba7f1259":"markdown","641695bf":"markdown","c7dc89d3":"markdown","67d52542":"markdown","11a822d9":"markdown","738b199b":"markdown","2904f128":"markdown","f0650962":"markdown","4fec9bef":"markdown","0b0cd49c":"markdown","41e7934b":"markdown","eb4dfb39":"markdown"},"source":{"5d8b67d6":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport itertools\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom xgboost import plot_importance\n\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler, Normalizer, Binarizer, KernelCenterer, MaxAbsScaler, MinMaxScaler, RobustScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import make_pipeline\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.metrics import precision_recall_curve\n\nimport warnings\nwarnings.filterwarnings('ignore')","3785062a":"df_treino = pd.read_csv('..\/input\/dataset_treino.csv')\ndf_teste = pd.read_csv('..\/input\/dataset_teste.csv')","63fdf8e9":"df_treino.head(5)","62005dcc":"df_teste.head(5)","f2b513dd":"print(\"O dataset treino tem {} linhas e {} colunas\".format(df_treino.shape[0], df_treino.shape[1]))\nprint(\"O dataset teste tem {} linhas e {} colunas\".format(df_teste.shape[0], df_teste.shape[1]))","06c35032":"df_treino.dtypes","8eb59e12":"df_teste.dtypes","f4aeea5c":"df_treino.drop(columns='id', inplace=True)","4effce52":"target = 'classe'\nfeatures = df_treino.columns.tolist()\nfeatures.remove(target)\n\nX = df_treino[features]\ny = df_treino[target]\n\nprint('Vari\u00e1vel alvo:', target)\nprint('Vari\u00e1vel preditoras:', features)","5f0d19e9":"df_treino.isnull().sum()","c2ed644d":"df_teste.isnull().sum()","603a7c97":"for var in ['glicose', 'pressao_sanguinea', 'grossura_pele', 'insulina', 'bmi']:\n    df_treino[var].replace(0, np.NAN, inplace=True)\n    df_treino[var].fillna(df_treino[var].mean(), inplace=True)","d5815fd8":"labels = ['Com diabetes' if label == 1 else 'Sem diabetes' for label in y]\npalette = {'Com diabetes': '#f56b69', 'Sem diabetes': '#3bbbb3'}\n\nax = sns.countplot(labels, palette=palette)\nplt.title('Quantidade de pessoas com e sem diabetes')\nplt.ylabel('Quantidade de pessoas')\nplt.show()\n\nporcentagem_tipos = y.value_counts(normalize=True)*100\ncontagem_tipos = y.value_counts()\nprint('Com diabetes: {} ({}%)'.format(contagem_tipos[1], round(porcentagem_tipos[1],2)))\nprint('Sem diabetes: {} ({}%)'.format(contagem_tipos[0], round(porcentagem_tipos[0],2)))","c8cb26c4":"df_treino.groupby('classe').describe()","8792504e":"i = 1\nfor feature in features:                       \n    if i == 1:\n        plt.figure(figsize=[20,5])\n                \n    plt.subplot(1, 3, i)\n    sns.boxplot(y=feature, data=X)\n    plt.title('Boxplot da vari\u00e1vel {}'.format(feature))\n    \n    i+=1\n\n    if i == 4:    \n        plt.tight_layout()\n        plt.show()\n        i = 1","1a79cfb4":"Q1 = df_treino.quantile(0.25)\nQ3 = df_treino.quantile(0.75)\nIQR = Q3 - Q1\nprint('IQR das vari\u00e1veis:\\n')\nprint(IQR)\n\nprint()\nprint('Dimens\u00f5es do dataset com outliers:', df_treino.shape)\n\ndf_treino = df_treino[~((df_treino < (Q1 - 1.5 * IQR)) |(df_treino > (Q3 + 1.5 * IQR))).any(axis=1)]\nX = df_treino[features]\ny = df_treino[target]\n\nprint('Dimens\u00f5es do dataset sem outliers:', df_treino.shape)","7fd58eb3":"i = 1\nfor feature in features:                       \n    if i == 1:\n        plt.figure(figsize=[20,5])\n                \n    plt.subplot(1, 3, i)\n    sns.boxplot(y=feature, data=X)\n    plt.title('Boxplot da vari\u00e1vel {}'.format(feature))\n    \n    i+=1\n\n    if i == 4:    \n        plt.tight_layout()\n        plt.show()\n        i = 1","49849b7c":"sns.pairplot(data=df_treino, hue='classe', diag_kind='kde', palette={1: '#f56b69', 0: '#3bbbb3'})\nplt.show()","2cd07420":"correlacao = df_treino.corr()\nplt.figure(figsize=(14,14))\n\nsns.heatmap(correlacao, cbar=True, square=True, annot=True, fmt='.2f', annot_kws={'size': 15}, cmap='coolwarm')\nplt.show()","7114ca61":"model = XGBClassifier()\nmodel.fit(X, y)\nplot_importance(model)\nplt.show()","cc302ebc":"# X_train, X_test, y_train, y_test = train_test_split(X[features], y, test_size=0.3, random_state=42)\n# X_train.head()\n\nX_train = X\ny_train = y","6f614353":"pipelines = []\n\nfor clf in [\n    LogisticRegression(),\n    SVC(kernel='linear'),\n    KNeighborsClassifier(),\n    RandomForestClassifier(),\n    XGBClassifier(),\n    GaussianNB(),\n    MLPClassifier(),\n    AdaBoostClassifier(),\n    GradientBoostingClassifier()\n]:\n    \n    for normalizer in [\n        None,\n        StandardScaler(),\n        Normalizer(), \n        Binarizer(), \n        FunctionTransformer(np.log1p),\n        MaxAbsScaler(), \n        MinMaxScaler(),\n    ]:\n        clf_pipeline = make_pipeline(normalizer, clf)\n        \n        pipelines.append({\n            'Algoritmo': clf.__class__.__name__,\n            'Normalizer': normalizer.__class__.__name__,\n            'Acuracia': cross_val_score(clf_pipeline, X_train, y_train, cv=10).mean()\n        })\n        \npd.DataFrame(pipelines).sort_values(by='Acuracia', ascending=False)","dbe81dfe":"pipeline = Pipeline([\n    ('normalizer',MinMaxScaler()),\n    ('classifier', MLPClassifier()),\n])\npipeline.fit(X_train, y_train)\npreds = pipeline.predict(df_teste[features])\n\ndf_submission = df_teste[['id']]\ndf_submission['classe'] = preds\ndf_submission.to_csv('submission.csv', index=False)","0ace1f51":"### An\u00e1lise da import\u00e2ncia das vari\u00e1veis","8a2dda2c":"# Descri\u00e7\u00e3o dos Arquivos\n* **dataset_treino.csv** - cont\u00e9m o conjunto de dados de treinamento\n* **dataset_teste.csv** - cont\u00e9m o conjunto de dados de teste\n* **sampleSubmission.csv** - cont\u00e9m o template para voc\u00ea enviar a sua solu\u00e7\u00e3o","f65f1b7d":"### An\u00e1lise de correla\u00e7\u00e3o entre as vari\u00e1veis","78465ec0":"### Quais as dimens\u00f5es dos datasets?","428a2c57":"Analisando o gr\u00e1fico anterior, conclu\u00edmos que cerca de 1\/3 das pessoas foram diagnosticadas com diabetes no nosso conjunto de dados de treino.","0831f189":"### An\u00e1lise dos resultados de acur\u00e1cia","a60c8ae4":"# Importando bibliotecas a serem usadas na an\u00e1lise","4f95412b":"### Predi\u00e7\u00e3o com base no melhor algoritmo","dde572c4":"### Imprimindo as primeiras 5 linhas do dataset para ter contato incial com os dados.","773e8823":"# Leitura dos datasets","1c4add03":"<img src=\"https:\/\/ak8.picdn.net\/shutterstock\/videos\/20675458\/thumb\/12.jpg\" \/>\n\n# Desafio DSA de Machine Learning - Edi\u00e7\u00e3o Janeiro\/2019\n## Previs\u00e3o de diabetes em pacientes do sexo feminino\n<br>por [Willian Silvano Maria](https:\/\/willsm.com.br\/)","6764297a":"### Separa as vari\u00e1veis preditoras da vari\u00e1vel alvo","ba7f1259":"Ambos os datasets possuem a coluna **id** que \u00e9 um sequ\u00eancial e pode ser removido.","641695bf":"# Introdu\u00e7\u00e3o\nO conjunto de dados \u00e9 do Instituto Nacional de Diabetes e Doen\u00e7as Digestivas e Renais (National Institute of Diabetes and Digestive and Kidney Diseases). O objetivo \u00e9 prever com base em medidas de diagn\u00f3stico, se um paciente tem diabetes. V\u00e1rias restri\u00e7\u00f5es foram colocadas na sele\u00e7\u00e3o dessas inst\u00e2ncias de um banco de dados maior. Em particular, todos os pacientes aqui s\u00e3o do sexo feminino com pelo menos 21 anos de idade.","c7dc89d3":" # Conhecendo os dados ","67d52542":"### Remo\u00e7\u00e3o dos outliers","11a822d9":"# Descri\u00e7\u00e3o dos Campos\n* **num_gestacoes** - N\u00famero de vezes gr\u00e1vida\n* **glicose** - Concentra\u00e7\u00e3o plasm\u00e1tica de glicose em teste oral de toler\u00e2ncia \u00e0 glicose\n* **pressao_sanguinea** - Press\u00e3o arterial diast\u00f3lica em mm Hg\n* **grossura_pele** - Espessura da dobra da pele do tr\u00edceps em mm\n* **insulina** - Insulina em mu U \/ ml\n* **bmi** - \u00cdndice de massa corporal medido em peso em kg \/ (altura em m) ^ 2\n* **indice_historico** - \u00cdndice de hist\u00f3rico de diabetes (Pedigree Function)\n* **idade** - Idade em anos\n* **classe** - Classe (0 - n\u00e3o desenvolveu a doen\u00e7a \/ 1 - desenvolveu a doen\u00e7a)","738b199b":"### Resumo estat\u00edstico dos dados do conjunto de treino agrupado por classe","2904f128":"### Vamos verificar a exist\u00eancia de dados **missing** nos datasets.","f0650962":"### Quais as colunas e respectivos tipos de dados que est\u00e3o presentes nos datasets?","4fec9bef":"### An\u00e1lise dos outliers","0b0cd49c":"### Qual a propor\u00e7\u00e3o de pessoas com e sem diabetes no dataset de treino?","41e7934b":"### An\u00e1lise de padr\u00f5es entre as vari\u00e1veis","eb4dfb39":"Como observado, n\u00e3o h\u00e1 dados **missing**, ou nulos, nos datasets de treino e teste. Mas por outro lado, existem algumas vari\u00e1veis com valor 0, tais como glicose, press\u00e3o sangu\u00ednea, bmi, grossura da pele, insulina. Isso \u00e9 estranho e parece ser informa\u00e7\u00f5es faltantes que foram atribu\u00eddas como valor 0 onde n\u00e3o tinham a informa\u00e7\u00e3o. Uma forma de trabalhar com esse tipo de informa\u00e7\u00e3o \u00e9 atribuir a m\u00e9dia dos valores da vari\u00e1vel em quest\u00e3o."}}