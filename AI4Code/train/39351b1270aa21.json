{"cell_type":{"10da0193":"code","aaed154c":"code","8e0e23d4":"code","0d606675":"code","30f63a19":"code","10e89894":"code","61b68d2c":"code","9cd1dccc":"code","aac44856":"markdown"},"source":{"10da0193":"import pandas as pd \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport seaborn","aaed154c":"apps = pd.read_csv(r\"..\/input\/google-play-store-apps\/googleplaystore.csv\")","8e0e23d4":"print(apps.head())\nprint(apps.tail())\napps.info()","0d606675":"apps['Rating'] = apps.Rating.fillna(0) # removing nulls in Rating\n#apps = apps.drop(index=9148) # removing nulls in Type\napps['Content Rating'] = apps['Content Rating'].fillna(\"0\") # removing nulls in COntent Rating\napps['Current Ver'] = apps['Current Ver'].fillna(\"1.0.0\")# removing nulls in Current Ver\napps['Android Ver'] = apps['Android Ver'].fillna(\"Varies with device\") # removing nulls in Anroid Ver","30f63a19":"apps['Reviews'] = apps.Reviews.str.replace(\"M\",\"000000\")\napps['Reviews'] = pd.to_numeric(apps.Reviews)\n\napps['Size'] = apps['Size'].str.replace(\"Varies with device\",\"0\")\napps['Size'] = apps['Size'].str.replace(\"M\",\"\")\napps['Size'] = apps['Size'].str.replace(\"k\",\"000\")\napps['Size'] = apps['Size'].str.replace(\",\",\"\")\napps['Size'] = apps['Size'].str.replace(\"+\",\"\")\napps['Size'] = pd.to_numeric(apps['Size'])\n\napps['Installs'] = apps['Installs'].str.replace(\",\",\"\")\napps['Installs'] = apps['Installs'].str.replace(\"+\",\"\")\napps['Installs'] = apps.Installs.str.replace(\"Free\",\"\")\napps['Installs'] = pd.to_numeric(apps.Installs)\n\napps['Price'] = apps.Price.str.replace(\"Everyone\",\"\")\napps['Price'] = apps.Price.str.replace(\"$\",\"\")\napps['Price'] = pd.to_numeric(apps['Price'])\n\napps['Content Rating'] = apps['Content Rating'].str.replace(\"Unrated\",\"Everyone\")\napps['Content Rating'] = apps['Content Rating'].str.replace(\"0\",\"Everyone\")\n","10e89894":"apps =  apps.drop_duplicates(subset=\"App\").reset_index()","61b68d2c":"# credit to https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\nreduce_mem_usage(apps)","9cd1dccc":"apps['Rating'] = apps.Rating.astype(\"category\")","aac44856":"# Data Prperocessing \n\n* [Importing Libraires](#1)\n* [Importing Data as apps](#2)\n* [Understanding the Data](#3)\n* [Replacing Missing Data](#4)\n* [Converting data to correct types](#5)\n* [Drop duplicates](#6)\n* [Encoding Categorical Data](#7)"}}