{"cell_type":{"40e01559":"code","37f03ba8":"code","f2e35dd4":"code","c1d937be":"code","6eea58ff":"code","9241061d":"code","8576d0a5":"code","9a2f500c":"code","904480b4":"code","61f1cb31":"code","57a6d94a":"code","1d21bfc0":"code","39895d42":"code","9f134828":"code","77a490f9":"code","245a6f3f":"code","f1a5a7cb":"code","9e5f18b0":"code","6ccc6630":"code","e4e4e4d0":"code","ad1a2ed8":"code","d6afdc5a":"code","3a211ea9":"code","274968da":"code","c88ff143":"code","23b7cb61":"code","926b603e":"code","1aadba4b":"code","23498340":"code","ea29eb14":"code","705287bd":"code","cf7c193b":"code","864e54ac":"code","964bb4b9":"code","b6355234":"code","388b0ae4":"code","53420021":"code","578051f8":"code","35c2752f":"code","d112ea7f":"code","c0387fd8":"code","c9e6902c":"code","0fd51718":"code","f81e0b9d":"code","e8779f97":"code","1e668b58":"code","ecbf5d24":"code","e9322b36":"code","708e0176":"code","9634c209":"code","dfb020c3":"code","f7c139fa":"code","99f71e6a":"code","424139f2":"code","899734bc":"code","516f81a1":"code","e67353a8":"code","1174c825":"code","d563cbaf":"code","2ad9465e":"code","2b249d58":"code","8691e554":"code","1bea6a87":"code","a7f206d6":"code","0719f98d":"code","3378022e":"code","d2fc3f64":"code","f0826d37":"code","75cc27e1":"code","2e644703":"code","c7fe67f7":"code","87d8b022":"code","a9995697":"code","2dfb2e4c":"code","51aa5b78":"code","1500bbfe":"code","9b8910e5":"markdown","f03e9c2d":"markdown","68612046":"markdown","f2d2b225":"markdown","ed4f628c":"markdown","271c4ba6":"markdown","828554f1":"markdown","1d983d5d":"markdown","c0d2e37a":"markdown","bd11a180":"markdown","0abf5a5a":"markdown","350f9fe6":"markdown","f0807375":"markdown","233b1634":"markdown","a7a5b4bf":"markdown","68715f4a":"markdown","bbb2313a":"markdown","da76dc67":"markdown","46a237ec":"markdown","bc1510fd":"markdown","8dbba45e":"markdown","0017f80a":"markdown","cd1c3496":"markdown","7e98432d":"markdown","afdc612d":"markdown","accdcd37":"markdown","5ef5e3da":"markdown","b2f7ba27":"markdown","92978fd8":"markdown","744f138e":"markdown","7a974941":"markdown","2634ae16":"markdown","e7339632":"markdown","b076d41b":"markdown","0492cfe3":"markdown"},"source":{"40e01559":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport plotly.express as px\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import svm\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\n\n\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","37f03ba8":"\n\ntitan = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntitan.head()\n\n","f2e35dd4":"\n\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest.head()\n\n","c1d937be":"titan.describe()","6eea58ff":"titan.select_dtypes('object').describe()","9241061d":"titan.info()","8576d0a5":"titan.groupby(['Survived'])['PassengerId'].count()","9a2f500c":"titan.groupby(['Survived'])['PassengerId'].count()\/titan['Survived'].count()","904480b4":"# Select features to examine the survival rate \ncols = ['Pclass', 'Age', 'SibSp', 'Parch', 'Sex','Cabin','Embarked']\n\nfor col in cols:\n    table = titan.pivot_table(columns = 'Survived', index = col, values = 'PassengerId', aggfunc = 'count')\n    fig = px.bar(table, barmode = 'group')\n    fig.show()","61f1cb31":"title =[ i.split(',')[1].split('.')[0].strip() for i in titan.Name ]","57a6d94a":"titan['title'] =[ i.split(',')[1].split('.')[0].strip() for i in titan.loc[:,'Name']]\ntitan.head()","1d21bfc0":"Surbytitle = titan.pivot_table(index = 'Survived', columns = 'title' , values = 'PassengerId', aggfunc = 'count')\nSurbytitle","39895d42":"Titlesurvival_rate = Surbytitle.iloc[1].fillna(0)\/Surbytitle.sum()\nTitlesurvival_rate.sort_values( ascending=False)\n","9f134828":"ticket_letter = [i.lower().split(' ')[0].replace('\/','').replace('.','') if i.isnumeric()==False else i.replace(i,'Numeric') for i in titan.Ticket]","77a490f9":"ticket_numeric = [i if i.isnumeric() else i.split(' ')[-1] for i in titan.Ticket]","245a6f3f":"titan['ticket_letter'] = ticket_letter\ntitan['ticket_numeric'] = ticket_numeric\ntitan.head()","f1a5a7cb":"titan.groupby(['ticket_letter','Survived']).PassengerId.count()","9e5f18b0":"# create 3 digit class feature for all numeric tickets (1st digit be len of the number of digits ) (next 2 digit slice of the first 2 numbers ) ex: 17655 will be 517.\ntitan.loc[ titan.ticket_letter == 'Numeric','ticket_letter'] = titan.ticket_numeric.str.len().astype(str) + titan.ticket_numeric.str.slice(0,2).astype(str)\n","6ccc6630":"pd.options.display.max_rows = 100\ntitan.groupby(['ticket_letter','Survived'])['PassengerId'].count().head(100)","e4e4e4d0":"for i in range(1,4):\n    print('class:',i)\n    print(titan[titan['Pclass']==i]['Fare'].describe())","ad1a2ed8":"#pd.options.display.max_rows = 200\nfor i in range(1,4):\n    fig = px.scatter(titan.pivot_table(columns = 'Survived',index = titan[titan['Pclass']==i]['Fare'], values = 'PassengerId',aggfunc = 'count'),title = 'Pclass'+str(i))\n    fig.show()","d6afdc5a":"# revert back original\ntitan = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntitan['Dataset'] = 0\ntest['Dataset'] = 1   # 1 is data from the test set\ntitan_all = pd.concat([titan,test])\n","3a211ea9":"titan_all_copy = titan_all.copy()\ntitan_all_copy=titan_all_copy.reset_index()\ntitan_all_copy.head()","274968da":"titan_all_copy.tail()","c88ff143":"titan_all_copy['title'] =[ i.split(',')[1].split('.')[0].strip() for i in titan_all_copy.loc[:,'Name']]\ntitan_all_copy.head()","23b7cb61":"titan_all_copy['title'].value_counts()","926b603e":"titlelist = ['Mr','Mrs','Master','Miss','Rev','Dr']\nMrslist = ['Mlle','the Countess','Mme','Lady','Dona']\nMslist = ['Ms']\nMrlist = ['Col','Major','Capt','Don','Sir','Jonkheer']\n","1aadba4b":"titan_all_copy.loc[titan_all_copy['title'].isin(Mrslist),'title'] = 'Mrs'\ntitan_all_copy.loc[titan_all_copy['title'].isin(Mrlist),'title'] = 'Mr'\ntitan_all_copy.loc[titan_all_copy['title'].isin(Mslist),'title'] = 'Miss'","23498340":"titan_all_copy.tail()","ea29eb14":"titan_all_copy[titan_all_copy.title == 'Master'].Age.max()","705287bd":"titan_all_copy[titan_all_copy.title == 'Mr'].Age.min()","cf7c193b":"def Maturity(x):\n    for i in range(len(x['Age'])):\n        if pd.isna(x['Age'][i]):\n            if x['Parch'][i] == 0 or x['title'][i] in ['Mr','Mrs']:\n                x.loc[i,'Maturity']= 'Adult'\n            elif x['title'][i] == 'Master':\n                x.loc[i,'Maturity']= 'Child'    \n            else:\n                x.loc[i,'Maturity']= 'Child'\n        if x.loc[i,'Age'] >= 14:\n            x.loc[i,'Maturity']= 'Adult'\n        if x['Age'][i]<14:\n            x.loc[i,'Maturity']='Child'\n        if x.loc[i,'Age'] >= 50:\n            x.loc[i,'Maturity']= 'Elderly'\n","864e54ac":"Maturity(titan_all_copy)\ntitan_all_copy.head(10)","964bb4b9":"# Family name to find group of travellers who are in the same family \ntitan_all_copy['fname']=titan_all_copy.Name.str.split(',',expand= True)[0]\ntitan_all_copy['fname']\n","b6355234":"# find all the children with their respective family names and ticket no. \nfchild = titan_all_copy.loc[titan_all_copy.Maturity == 'Child',['fname','Ticket']]\nfchild.head()","388b0ae4":"def travelwithchild(x):\n    for i in range(len(x.fname)):\n        for j,g in fchild.values:\n            if x.fname[i] == j and x.Ticket[i] == g and (x.Maturity[i] == 'Adult' or x.Maturity[i] == 'Elderly'):\n                x.loc[i,'TravelwChild'] =  x.Sex[i] +'withChild'\n                break\n            else:\n                x.loc[i,'TravelwChild'] = 'NotwithChild'","53420021":"travelwithchild(titan_all_copy)\n","578051f8":"#(titan_all_copy['TravelwChild'] !=  'NotwithChild').sum()\n((titan_all_copy.TravelwChild == 'femalewithChild') | ( titan_all_copy.TravelwChild == 'malewithChild')).sum()","35c2752f":"\ntitan_all_copy[(titan_all_copy['TravelwChild'] == 'femalewithChild')|(titan_all_copy['TravelwChild'] == 'malewithChild')].head()","d112ea7f":"titan_all_copy.Pclass = titan_all_copy.Pclass.astype(str)","c0387fd8":"titan_all_copy.dtypes","c9e6902c":"# breaking down passengers in each class into male , female and child.\ntitan_all_copy['Pclass'] = [titan_all_copy.Pclass[i]+titan_all_copy.Sex[i] if titan_all_copy.Maturity[i] != 'Child' else titan_all_copy.Pclass[i]+ 'Child' for i in range(len(titan_all_copy.Pclass))]","0fd51718":"titan_all_copy.head(10)","f81e0b9d":"# creat ticket_letter\nticket_letter = [i.lower().split(' ')[0].replace('\/','').replace('.','') if i.isnumeric()==False else i.replace(i,'Numeric') for i in titan_all_copy.Ticket]\n# create ticket_numeric\nticket_numeric = [i if i.isnumeric() else i.split(' ')[-1] for i in titan_all_copy.Ticket]\ntitan_all_copy['ticket_letter'] = ticket_letter\ntitan_all_copy['ticket_numeric'] = ticket_numeric\ntitan_all_copy.head()","e8779f97":"titan_all_copy.ticket_letter.describe()","1e668b58":"# create 3 digit feature for all numeric tickets (1st digit len ) (next 2 digit slice)\ntitan_all_copy.loc[ titan_all_copy.ticket_letter == 'Numeric','ticket_letter'] = titan_all_copy.ticket_numeric.str.len().astype(str) + titan_all_copy.ticket_numeric.str.slice(0,2).astype(str)\n","ecbf5d24":"#keep all that has more than 20 samples\npd.options.display.max_rows = 200\ntitan_all_copy.ticket_letter.value_counts().head(50)","e9322b36":"#SELECT THOSE WITH HAVE HIGH SURVIVED OR DEATH RATES\ntitan_all_copy.groupby(['ticket_letter','Survived']).Survived.count()","708e0176":"#Option 1 : Select those with more than 20 samples and above or those with clear leanings towards a result\n#ticklist = ['634','611','pc','426','441','475','a4','638','ca','623','636','624','635','637','a5','633','631','stono','511','sotonoq','519','528','513','731']\n\n#Option 2:  Deleted some with 20 or less samples and  those with big samples but do not show strong relationship with survival.\nticklist = ['634','611','pc','426','ca','623','636','624','635','637','a5','633','631','stono','511','sotonoq','519','528','513']\n\ntitan_all_copy.loc[~titan_all_copy.ticket_letter.isin(ticklist),'ticket_letter'] = 'Others'\ntitan_all_copy.head()","9634c209":"titan_all_copy['Embarked'].mode()","dfb020c3":"r = titan_all_copy['Embarked'].isna()\ntitan_all_copy.loc[r,'Embarked']='S'","f7c139fa":"titan_all_copy['Embarked'].isna().sum()# should turn up NO rows as NaN are converted to S","99f71e6a":"# Combine Embarked with Plcass to form Passenger Profiles\ntitan_all_copy['Embarked'] = titan_all_copy.Embarked + titan_all_copy.Pclass","424139f2":"titan_all_copy.head(10)","899734bc":"def GenderComp(x):\n    for i in range(len(x.Sex)):\n        if x.Sex[i] == 'female' and x.Parch[i] == 0 and x.SibSp[i] == 0:\n            x.loc[i,'GenderComp'] = 'FS'\n        elif x.Sex[i] == 'female' and (x.Parch[i] > 0 or x.SibSp[i] > 0):\n            x.loc[i,'GenderComp'] = 'FC'\n        elif x.Sex[i] == 'male' and x.Parch[i] == 0 and x.SibSp[i] == 0:\n            x.loc[i,'GenderComp'] = 'MS'\n        elif x.Sex[i] == 'male' and (x.Parch[i] > 0 or x.SibSp[i] > 0):\n            x.loc[i,'GenderComp'] = 'MC'","516f81a1":"GenderComp(titan_all_copy)\ntitan_all_copy.head()","e67353a8":"titan_all_copy.info()","1174c825":"#dummies = pd.get_dummies(titan_all_copy[['Pclass','Embarked','title','ticket_letter','Maturity','GenderComp']])\ndummies = pd.get_dummies(titan_all_copy[['Embarked','title','ticket_letter','Maturity','GenderComp','TravelwChild']])","d563cbaf":"dummies","2ad9465e":"print('No. of features:',len(dummies.columns))","2b249d58":"dummies.columns  ","8691e554":"dummies.drop('TravelwChild_NotwithChild', axis = 1, inplace = True)\nprint('No. of features:',len(dummies.columns))","1bea6a87":"dummies['dataset'] = titan_all_copy.Dataset\ntrain_X = dummies[dummies.dataset == 0]\ntrain_X.drop(\"dataset\", axis = 1, inplace = True)\ntrain_X","a7f206d6":"train_Y = titan.Survived","0719f98d":"test_X = dummies[dummies.dataset == 1]","3378022e":"test_X.drop(\"dataset\", axis = 1,inplace = True)\ntest_X","d2fc3f64":"# Base Score\nmodel = svm.SVC()\nmodel.fit(train_X,train_Y)\npredictionsSVM = model.predict(train_X)\nacc = accuracy_score(train_Y,predictionsSVM)\nacc","f0826d37":"# RBF\nC = [0.1, 0.2, 0.3, 0.5,0.6,0.7,0.8,0.9, 1, 1.5, 2, 3,4,5,6,7,8,9,10,20,50,100]\ngamma = [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.5, 2, 3,4,5,6,7,8,9,10,20,50,100]\nbest = 0\nfor i in C:\n    for j in gamma:\n        model = svm.SVC(C= i, kernel = 'rbf', gamma = j)\n        model.fit(train_X,train_Y)\n        predictionsSVM = model.predict(train_X)\n        acc = accuracy_score(train_Y,predictionsSVM)\n        if acc > best:\n            best = acc\n            print('best score so far:',acc , '  Kernel:rbf ', 'C:',i,' gamma:',j)","75cc27e1":"# Poly (Best results so far)\nC = [ 0.1, 0.2, 0.3, 0.5, 1, 2, 3,4,5,6,7,8,9,10,20,50,100]\ndegree = [0,1, 2, 3,4,5,6]\nbest = 0\npara_C = []\npara_degree =[]\nfor i in C:\n    for j in degree:\n        model = svm.SVC(C= i, kernel = 'poly', degree = j)\n        model.fit(train_X,train_Y)\n        predictionsSVM = model.predict(train_X)\n        acc = accuracy_score(train_Y,predictionsSVM)\n        if acc >= best:\n            if acc==best:\n                para_C.append(i)\n                para_degree.append(j)    \n            best = acc\n            print('best score so far:',acc , '  Kernel:poly ', 'C:',i,' degree:',j)","2e644703":"para_C = set(para_C)\npara_degree =set(para_degree)\nmodelGrid = GridSearchCV(svm.SVC(),[{'kernel': ['poly'], 'degree' : list(para_degree), 'C': list(para_C)}],\n                     cv=10,\n                     return_train_score = False\n                    )","c7fe67f7":"modelGrid.fit(train_X,train_Y)","87d8b022":"df = pd.DataFrame(modelGrid.cv_results_)\ndf[['param_C','param_kernel','mean_test_score']].sort_values('mean_test_score',ascending = False)\ndf.sort_values('mean_test_score',ascending = False).head(10)","a9995697":"model = svm.SVC(C= 4, kernel = 'poly', degree = 3)","2dfb2e4c":"model.fit(train_X,train_Y)\npredictionsSVM = model.predict(test_X)\n","51aa5b78":"results = pd.DataFrame({'PassengerId':test.PassengerId,'Survived':predictionsSVM})","1500bbfe":"results.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","9b8910e5":"# <span style=\"color:Green\">START MODELING <\/span>","f03e9c2d":"# <span style=\"color:Green\">PREPARING DATA FOR MODELING <\/span>\n","68612046":"### 2.2 TICKET_NUMERIC\n\nThe ticket numbers are unique to each passenger or their group of travellers(family).\n\nExamination of the ticket_numerics show:\n- there are different number of digits (3, 4, 5, 6, 7)\n- tickets that the same number of digit and that share similar numbers in the first 2 or 3 digits belong to the same class or might be embarked from the same location","f2d2b225":"#### To test out creating categories : gender travelling with different group\nOption 2:\n\ndef GenderComp(x):\n    for i in range(len(x.Sex)):\n        if x.Sex[i] == 'female' and x.Parch[i] + x.SibSp[i] == 0:\n            x.loc[i,'GenderComp'] = 'FS0'\n            \n        elif x.Sex[i] == 'female' and (0 < x.Parch[i] + x.SibSp[i] < 3):\n            x.loc[i,'GenderComp'] = 'FC1-2'\n            \n        elif x.Sex[i] == 'female' and  2 < x.Parch[i] + x.SibSp[i] < 5:\n            x.loc[i,'GenderComp'] = 'FC3-4'\n            \n        elif x.Sex[i] == 'female' and  4 < x.Parch[i] + x.SibSp[i] < 7:\n            x.loc[i,'GenderComp'] = 'FC5-6'\n            \n        elif x.Sex[i] == 'female' and  x.Parch[i] + x.SibSp[i] > 6:\n            x.loc[i,'GenderComp'] = 'FC>6'      \n            \n        elif x.Sex[i] == 'male' and x.Parch[i] == 0 and x.SibSp[i] == 0:\n            x.loc[i,'GenderComp'] = 'MS0'\n            \n        elif x.Sex[i] == 'male' and (x.Parch[i] + x.SibSp[i] >= 1) and (x.Parch[i] + x.SibSp[i] < 3):\n            x.loc[i,'GenderComp'] = 'MC1-2'\n            \n        elif x.Sex[i] == 'male' and  2 < x.Parch[i] + x.SibSp[i] < 5:\n            x.loc[i,'GenderComp'] = 'MC3-4'\n        \n        elif x.Sex[i] == 'male' and  4 < x.Parch[i] + x.SibSp[i] < 7:\n            x.loc[i,'GenderComp'] = 'MC5-6'\n            \n        elif x.Sex[i] == 'male' and  x.Parch[i] + x.SibSp[i] > 6:\n            x.loc[i,'GenderComp'] = 'MC>6'  ","ed4f628c":"## Using Dummies to create features","271c4ba6":"## MODELLING WITH SVM","828554f1":"##  Feature Creation\n1. - From Names derive titles feature:\n    1. Mr\n    2. Mrs\n    3. Master\n    4. Miss\n    5. Rev\n    6. Dr\n    - Retain the above 6 titles as features . The rest will be group into Mr or Mrs or Miss accordingly\n    \n    \n2. - Create Maturity feature:\n    1. adults are age 14 and above\n    2. children are age 13 and below\n    3. Elder are age 50 and above\n    - For NaN , if Parch = 0 set as adult or Title = Mr or Mrs.\n    - if title = Master or Miss set as child\n\n\n3. - From Maturity Info segregate into male or female Adults who are travelling with children.\n    1. male with Child\n    2. female with Child\n    3. travel with No Child\n\n\n4. - Pclass break down passengers in each class into male , female and child.\n    1. class1 male\n    2. class1 female\n    3. class1 child\n\n5. - Create ticket_letter and ticket_numeric\n    1. ticket letters \n    2. and create new categories from ticket_numeric\n    3. Replace numeric tickets in ticket_letter with new categories from ticket_numeric\n    \n6. - Embarked\n    1. NaN cells in Embarked to be replace with the most passengers embarked location\n    2. Embark to be combine with Pclass to form passenger profiles\n        - 3 class types , 3 embark locations , 2 sex gender and child.\n        - Potentially : Total of 27 passenger profile types .\n   \n \n   \n7. - from Parch and SibSip create new feature Gender-Companion\n    1. To have male and female passenger who travelled alone or with companions\n     \n     \n- Remove : \n    1. Sex\n    2. Names\n    3. PassengerId\n    4. Ticket\n    5. Fare\n    6. cabin\n    7. Ticket_Numeric\n     \n     \n     \n#### 'Embarked', 'title', 'ticket_letter', 'Maturity', 'Gender-Companions', 'TravelwithChild' will be first use for exploration\n","1d983d5d":"### Comparing results from GridSearch and my own tuning \n\nGridSearchCV: Best mean results:  \n* score : 0.809238    {'C': 4, 'degree': 3, 'kernel': 'poly'} \t\n\n\n\nTuning:\n- best score so far: 0.8765432098765432   Kernel:poly  C: 4  degree: 4\n- best score so far: 0.8765432098765432   Kernel:poly  C: 4  degree: 5\n- best score so far: 0.8765432098765432   Kernel:poly  C: 4  degree: 6\n\n\n","c0d2e37a":"Most passengers are from S. From replace NaN 'Embarked' cells with S","bd11a180":"I will use the average of age 13 and below to determine if a passenger is a child ","0abf5a5a":"## Feature Engineering 1) titles","350f9fe6":"# <span style=\"color:Green\">EXAMINE FEATURES : BUILD PROFILES<\/span>\n\n\n**'Pclass', 'Name', 'Sex', 'Age', 'SibSp','Parch','Embarked','Fare' features can be use to build passenger profiles which determine their base odds of survival.**\n\n**So PCLASS, SEX and EMBARKED plots shows very clear relation to survival rates.** \n1. Can combine the 3 features to create distinct passenger profiles\n    - Example : Female Class 1 Passenger from C \n    - Example : Male Class 2 Passenger from S\n    - 2 Sex , 3 Pclass, 3 Embark , total of 18 passenger profile tpyes\n    \n2. Name contains titles:\n    - Mr, Mrs, Miss, Master, Rev , Dr . 6 titles to be created as features\n    - other titles have too few samples are to be grouped into Mr or Mrs\n    \nAGE wise young children tend to have higher survival rates and the elderly seem to have a lower chance of survival.    \n\n3. Create a new feature to distinct between children (0-14)  , adults and elderly (50 -80)\n\n\nSibSp and Parch will help determine they are travelling alone or with families.                \n\n4. Create features to segregate those travelling alone and those with children\n\n\nFare wise , there seems to be more survivors among those passengers who paid higher than the mean fare for class 1 and 2.\n\n5. Can create a feature to differentiate passengers who paid a higher fare than usual for class 1 and class 2\n\n\n\n**'Ticket',  'Cabin' are environment attributes which will increase or decrease a passenger rate of survival.**\n\nFrom exploration of the data, i find cabin feature does not contribute much to determine survival or death rates and there are too many missing data.\nTickets seems to be more useful. \n1. Create features from the letters of each tickets and from the numeric ones create a 3 digit class feature. From them select feartures that have good amount of samples or display strong disposition towards a result. \n               \n\n\n","f0807375":"## Feature Engineering 7) Combine Sex with Parch and SibSip to  Create Gender-Companions Feature\n\n#### GenderComp Feature : Females that are single and Females with companions as well Males that are single or with companions\n- FS for single females   \n    - Sex= female and Parch and SibSp = 0\n\n\n- FC for females with ompanions \n    - Sex - female and ( Parch >0 or SibSp >0)\n\n\n- MS for single males            \n    - Sex= female and Parch and SibSp = 0 \n    \n    \n- MC for males with companions\n    - Sex - male and ( Parch >0 or SibSp >0)\n    \n","233b1634":"Convert female titles to Mrs\n1. MIle\n2. the Countess\n3. Mme\n4. Lady\n5. Dona\n\nConvert female titles to Miss\n1. Ms\n\nConvert male titles to Mr\n1. Col\n2. Major\n3. Capt\n4. Don\n5. Sir\n6. Jonkheer","a7a5b4bf":"## Feature Engineering 4) Turn Pclass into categorical data","68715f4a":"- Some ticket_letters like wc, a4, a5 show clear leaning to one side in survivor rates","bbb2313a":"#  <span style=\"color:Green\">EXPLORE THE DATA <\/span>","da76dc67":"## Feature Engineering 5) Turn tickets into Features","46a237ec":"## Feature Engineering 3) From Maturity Info segregate into Male or Female Adults who are travelling with children","bc1510fd":"## EXAMINE REMAING FEATURES:  1.'NAME' | 2.'TICKETS | 3. 'FARE'\n\n## 1.Name\n- will be looking at each individual titles to separate into different groups\n- based on feature examination 'Sex' . Found that women are more likely to survived . \n- However among women are singles and married, who is more likely to survive ?\n- Examine Miss and Mrs\n- Master is a title for young male that are still not of age . Will that have any impact for death rate among males ?\n- Break down the types of titles and examine further","8dbba45e":"## Combine Test and Titan dataset for feature creation across the 2 datasets","0017f80a":"#### 1.1) Convert unwanted titles to others","cd1c3496":"### SPLIT DUMMIES INTO TRAIN_X , TEST_X","7e98432d":"There is missing data in\n   - Age\n   - Cabin\n   - Embarked\n   \nThere is quite alot of missing data from Age and Cabin.","afdc612d":"# <span style=\"color:Green\">FEATURE ENGINEERING<\/span>","accdcd37":"From the table\n- Mrs holds the highest survival rate follow by Miss and Master \n- Mrs are definitely adults \n- Miss and Master consist of children and young adults\n- Will look at adding Mr, Mrs,Miss and Master to features\n- Rev seems to have all perished. Might add Rev as feature as well \n- Might add Dr as well","5ef5e3da":"### 2.3 FARE","b2f7ba27":"### 2.1 TICKET_LETTER","92978fd8":"## PLOT OUT 'SURVIVAL VS DEMISE' ON SELECTED FEATURES \n","744f138e":"## Feature Engineering 2) Maturity ","7a974941":"For class 1 and 2 , it looks like there are more red dots with high values (Survivors) beyond the mean fare","2634ae16":"## 2.Tickets\n\n Wiki info:\n- according to wiki there are deck A to deck G .\n- lower decks are mostly occupied by 3 class passengers\n- likelyhood that the top deck passengers are more likely to survive\n- perhaps the numbering or alphabets of the ticket could have reference to which deck and which part of it, the passenger is located\n- breaking the tickets into letters and numbers might help in finding trends.\n","e7339632":"## OBSERVATIONS ON PLOTS\n1. Pclass\n    - class 3 has the most passengers \n    - among the 3 class , it has the most passenger who perished\n    - class 3 death rate is nearly 3 times as high compare to the other classes \n    - class 1 clearly has the best odds of survival \n    \n2. Age\n    - from the chart it seems young children have better survival rates\n    - the elderly seem to have a lower chance of survival\n    - no clear pattern as to how age might contribute to survivor rate \n    - there are quite alot of missing data as well . 177 empty cells\n    \n3. SibSp and Parch\n    - out of 342 survivors . 210 travelled alone which is like 61% of survivors\n    - its seems that travel alone or with just 1 or 2 family members seems to improve odds of survival.\n4. Sex\n    - gender plays quite a distinct role in determining if a passenger will survival\n    - it will be interesting to examine the data to find among the women who die and men who survived if there is any particular attribute that improves their survival\n5. Cabin\n    - could not see any clear trend from the plots\n    - cabin have a lot of missing data\n    - examination with excel: looking at cabin with other features , could find any relation it has with other features.\n    - other than most class 1 passengers have their cabins recorded\n6. Embarked\n    - majority of passengers boarded from S\n    - majority of passengers from S did not survived as well. Many class 3 passengers are also from S\n    - C passengers looks to have the highest chance of survival \n    ","b076d41b":"## Feature Engineering 6) Embarked : Passenger Profiles\n","0492cfe3":"Base survival rate is 0.3838"}}