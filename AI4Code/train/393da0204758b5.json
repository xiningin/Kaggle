{"cell_type":{"8032e325":"code","a8b4e442":"code","bbc34152":"code","7f797006":"code","9477a46d":"code","01adcc8a":"code","364d2e71":"code","edbee12e":"code","3efcc867":"code","752bb5a7":"code","89cfea3b":"code","dbbc3f8b":"code","4c8cbb42":"code","77457c62":"code","3f826abe":"code","77b7b70f":"code","cef064ac":"code","ec7fa75d":"code","78725535":"code","f1885b12":"code","197d6833":"code","4b2e18dd":"code","a96845cb":"code","db390bb0":"code","b28e7414":"code","7c867df9":"code","9e4ffca5":"code","6c5d4661":"code","98219b50":"code","568a59b4":"code","8c425112":"code","c7982082":"code","bd81faa4":"code","62ce6e33":"code","a28d9fd3":"code","63823848":"code","92a4f8c2":"markdown","2b276c4a":"markdown","3bff81fd":"markdown","0b5dc198":"markdown","5c07feb3":"markdown","be0a41d1":"markdown","1829d2b2":"markdown","5b338d97":"markdown","d987da41":"markdown","9cb40d41":"markdown","9ad90179":"markdown","7350d98e":"markdown","24e6975e":"markdown","90a7bd02":"markdown","26603ba9":"markdown"},"source":{"8032e325":"!pip install catboost","a8b4e442":"#Importing Scientific Computing Libraries\nimport numpy as np\n\n#Importing Data Manipulation Library\nimport pandas as pd\n\n#Importing Visualization Libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n#Importing Classifier Libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom catboost import CatBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, ExtraTreesClassifier, AdaBoostClassifier\n\n#Importing Model Evaluation Library\nfrom sklearn import metrics","bbc34152":"#Importing Warning to filter future warnings\nimport warnings\nwarnings.simplefilter(\"ignore\")\nsns.set_theme()","7f797006":"train = pd.read_csv(\"..\/input\/merchandise-popularity-prediction-challenge\/Train.csv\") #Train dataSET\ntest  = pd.read_csv(\"..\/input\/merchandise-popularity-prediction-challenge\/Test.csv\") #Test dataSET","9477a46d":"train.head()","01adcc8a":"#Function to Analyze dataset\ndef evaluate(data):\n  print('Dimension of dataset:{}'.format(data.shape),'\\n',67*'-')\n  print('Number of duplicated values:{}'.format(data.duplicated().sum()),'\\n',67*'-')\n  print('rows contain null values:\\n{}'.format(data.isnull().sum()),'\\n',67*'-')\n  print('Schema of the dataset:\\n',data.info(),'\\n',67*'-')\n  print('Descriptive Analysis:\\n{}'.format(data.describe()),'\\n',67*'-')\n  print('Correlation:\\n{}'.format(data.corr()),'\\n',67*'-')","364d2e71":"#Training dataset\nevaluate(train)","edbee12e":"#removing duplicate values\ntrain.drop_duplicates(inplace = True)","3efcc867":"train.head(3)","752bb5a7":"train['add'] = train['Store_Ratio']\/train[\"Basket_Ratio\"]","89cfea3b":"train.head(3)","dbbc3f8b":"#Training dataset columns\ntrain.columns","4c8cbb42":"X = train[['Store_Ratio', 'Basket_Ratio', 'Category_1', 'Store_Score',\n       'Category_2', 'Store_Presence', 'Score_1', 'Score_2', 'Score_3',\n       'Score_4', 'time', 'add']]\ny = train['popularity']","77457c62":"#Splitting dataset into train and test sets \nx_train, x_valid, y_train, y_valid = train_test_split(X,y, random_state = 0, test_size = 0.2)","3f826abe":"DTC = DecisionTreeClassifier(max_depth=13, min_samples_leaf=5).fit(x_train, y_train)\npredict = DTC.predict(x_valid)\ncm = metrics.confusion_matrix(y_valid, predict) \nmatrix = metrics.classification_report(y_valid, predict)\n\nprint(cm , '\\n')\nprint(matrix)","77b7b70f":"from sklearn.neighbors import KNeighborsClassifier\nKNeighborsClassifier()","cef064ac":"knn = KNeighborsClassifier().fit(x_train, y_train)\npredict1 = knn.predict(x_valid)\ncm1 = metrics.confusion_matrix(y_valid, predict1) \nmatrix1 = metrics.classification_report(y_valid, predict1);\n\nprint(cm1, '\\n')\nprint(matrix1)","ec7fa75d":"from sklearn.naive_bayes import GaussianNB\nGaussianNB()","78725535":"GNB = GaussianNB().fit(x_train, y_train)\nPredict2 =GNB.predict(x_valid)\n\ncm2 = metrics.confusion_matrix(y_valid, Predict2) \nmatrix2 = metrics.classification_report(y_valid, Predict2);\nprint(cm2, \"\\n\")\nprint(matrix2)","f1885b12":"RFC = RandomForestClassifier(n_estimators = 100, max_depth = 20).fit(x_train, y_train)\nPredict3 = RFC.predict(x_valid)\ncm3 = metrics.confusion_matrix(y_valid, Predict3) \nmatrix3 = metrics.classification_report(y_valid, Predict3);\nprint(cm3, \"\\n\")\nprint(matrix3)","197d6833":"from xgboost import XGBClassifier\nXGBClassifier()","4b2e18dd":"xgb = XGBClassifier(max_depth=13).fit(x_train, y_train)\npredict4 = xgb.predict(x_valid)\ncm4 = metrics.confusion_matrix(y_valid, predict4) \nmatrix4 = metrics.classification_report(y_valid, predict4);\nprint(cm4, \"\\n\")\nprint(matrix4)","a96845cb":"gbc = GradientBoostingClassifier().fit(x_train, y_train)\npredict5 = gbc.predict(x_valid)\ncm5 = metrics.confusion_matrix(y_valid, predict5) \nmatrix5 = metrics.classification_report(y_valid, predict5);\nprint(cm5, \"\\n\")\nprint(matrix5)","db390bb0":"ExtraTreesClassifier()","b28e7414":"etc = ExtraTreesClassifier(n_estimators = 150).fit(x_train, y_train)\npredict6 = etc.predict(x_valid)\ncm6 = metrics.confusion_matrix(y_valid, predict6) \nmatrix6 = metrics.classification_report(y_valid, predict6);\nprint(cm6, \"\\n\")\nprint(matrix6)","7c867df9":"AdaBoostClassifier()","9e4ffca5":"abc = AdaBoostClassifier().fit(x_train, y_train)\npredict7 = abc.predict(x_valid)\ncm7 = metrics.confusion_matrix(y_valid, predict7) \nmatrix7 = metrics.classification_report(y_valid, predict7);\nprint(cm7, \"\\n\")\nprint(matrix7)","6c5d4661":"cbc = CatBoostClassifier(task_type = \"GPU\", eval_metric = 'Accuracy', iterations = 500, random_state=0).fit(x_train, y_train)\npredict8 = cbc.predict(x_valid)\ncm8 = metrics.confusion_matrix(y_valid, predict8) \nmatrix8 = metrics.classification_report(y_valid, predict8);\nprint(cm8, \"\\n\")\nprint(matrix8)","98219b50":"print(metrics.accuracy_score(y_valid, predict))\nprint(metrics.accuracy_score(y_valid, predict1))\nprint(metrics.accuracy_score(y_valid, Predict2))\nprint(metrics.accuracy_score(y_valid, Predict3))\nprint(metrics.accuracy_score(y_valid, predict4))\nprint(metrics.accuracy_score(y_valid, predict5))\nprint(metrics.accuracy_score(y_valid, predict6))\nprint(metrics.accuracy_score(y_valid, predict7))\nprint(metrics.accuracy_score(y_valid, predict8))","568a59b4":"test['add'] = test['Store_Ratio']\/test[\"Basket_Ratio\"]","8c425112":"test.head()","c7982082":"#Evaluating Test Dataset\nevaluate(test)","bd81faa4":"#Filling Null Values\ntest['add'].fillna(test['add'].mean(), inplace=True)","62ce6e33":"test = test[['Store_Ratio', 'Basket_Ratio', 'Category_1', 'Store_Score',\n       'Category_2', 'Store_Presence', 'Score_1', 'Score_2', 'Score_3',\n       'Score_4', 'time', 'add']]","a28d9fd3":"ans1 =  DTC.predict(test)\nans2 = RFC.predict(test)\nans3 = xgb.predict(test)\nans4 = gbc.predict(test)\nans5 = etc.predict(test)\nans6 = abc.predict(test)\nans7 = cbc.predict(test)","63823848":"plt.figure(figsize = (18,15))\nplt.subplot(3,2,1)\nsns.countplot(ans1, palette = \"winter\")\nplt.title(\"Decision Tree\")\n\nplt.subplot(3,2,2)\nsns.countplot(ans2, palette = \"winter\")\nplt.title(\"Random Forest\")\n\nplt.subplot(3,2,3)\nsns.countplot(ans3, palette = \"winter\")\nplt.title(\"XGBoost\");\n\nplt.subplot(3,2,4)\nsns.countplot(ans4, palette = \"winter\")\nplt.title(\"Gradient Boosting\");\n\nplt.subplot(3,2,5)\nsns.countplot(ans5, palette = \"winter\")\nplt.title(\"Extra-Trees\");\n\nplt.subplot(3,2,6)\nsns.countplot(ans6, palette = \"winter\")\nplt.title(\"Cat-Boost\");","92a4f8c2":"## **RANDOM FOREST CLASSIFIER**","2b276c4a":"## **INSTALLING CATBOOST**","3bff81fd":"##**KNN CLASSIFIER**","0b5dc198":"## **EXTRACTING DATASET**","5c07feb3":"## **VISUALIZING OUTPUT**","be0a41d1":"##**DECISION TREE CLASSIFIER**","1829d2b2":"## **XGBOOST CLASSIFIER**","5b338d97":"## **IMPORTING REQUIRED LIBRARIES**","d987da41":"## **TEST DATASET**","9cb40d41":"## **ADA BOOST CLASSIFIER**","9ad90179":"## **EXTRA TREES CLASSIFIER**","7350d98e":"## **ACCURACY SCORES OF CLASSIFIERS**","24e6975e":"## **GRADIENT BOOSTING CLASSIFIER**","90a7bd02":"## **NAIVE BAYES CLASSIFIER**","26603ba9":"## **CATBOOST CLASSIFIER**"}}