{"cell_type":{"176c3aa3":"code","e760c0fa":"code","155b2f56":"code","b1e53565":"code","8dd509cc":"code","05cc6d2b":"code","0416e216":"code","96b3df01":"code","ae8237b7":"code","c41c126d":"code","26354bf6":"code","c5d14af3":"code","0b11645a":"code","193f74f6":"code","bc7645b3":"code","a128d4af":"code","6b96c3d9":"code","2ab655cc":"code","f1b00ee9":"code","7cc065bf":"code","cd90e657":"code","e5690d4c":"code","882ccf53":"code","71b87739":"code","ddfff012":"code","9c96cbb7":"code","ef8bdc7e":"code","73e0c38e":"code","dfae8766":"code","af9c87a0":"code","2197a2ff":"code","e5de3a9c":"markdown","89f53856":"markdown","a18b7cd4":"markdown","7f92c1ce":"markdown","ede1cdf4":"markdown"},"source":{"176c3aa3":"import warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e760c0fa":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","155b2f56":"pd.set_option(\"display.max_columns\",None)\npd.set_option(\"display.max_colwidth\",100)","b1e53565":"store = pd.read_csv(\"\/kaggle\/input\/17k-apple-app-store-strategy-games\/appstore_games.csv\")\nstore.head()","8dd509cc":"store.shape","05cc6d2b":"store.info(verbose=False)","0416e216":"# percentage of NaN values\n\nstore.isna().sum().sort_values(ascending=False)\/store.shape[0]*100","96b3df01":"#Percentage of Unique values\n\nstore.nunique().sort_values(ascending=False)\/store.shape[0]*100","ae8237b7":"#Duplicaeted Entries\n\nstore.duplicated(store.columns).shape","c41c126d":"#Most Prefered Gaming Language\n\nimport collections\nfrom collections import Counter #For frequency count\n\n#create a single documents of all rows of Language column\n\ns = \"\"\nfor i in store.Languages:\n    s=s+\",\"+str(i)\n\ns=s.strip(\",\")\n\nfrequency_count = Counter(s.split(\",\"))\n\nmost_20_word = [i[0] for i in frequency_count.most_common(20)]\nmost_20_word_frequency = [i[1] for i in frequency_count.most_common(20)]\n\n#plotting\n\nplt.figure(figsize=(12,7))\nsns.barplot(x=most_20_word_frequency,y=most_20_word)\nplt.show()","26354bf6":"#Primary Genre Catrgories and Their Frequencies\n\nplt.figure(figsize=(12,7))\nstore['Primary Genre'].value_counts().plot.bar()\nplt.show()","c5d14af3":"#Average User Rating Count Paid vs Free Games\n\nstore['FreePaidTag']  = [\"Free\" if i ==0 else \"Paid\" for i in store.Price]\n\n#store.FreePaidTag\n\nstore.groupby(['FreePaidTag'])['User Rating Count'].mean().plot.bar(color=[\"red\",\"blue\"])\nplt.title(\"Average User Rating Count Paid vs Free Games\")\nplt.show()","0b11645a":"#Average User Rating Paid vs Free Games\n\nstore['FreePaidTag']  = [\"Free\" if i ==0 else \"Paid\" for i in store.Price]\n\n#store.FreePaidTag\n\nstore.groupby(['FreePaidTag'])['Average User Rating'].mean().plot.bar(color=[\"red\",\"blue\"])\nplt.title(\"Average User Rating Paid vs Free Games\")\nplt.show()","193f74f6":"age = store[['Description','Age Rating']]\nage.head()","bc7645b3":"age.shape","a128d4af":"age.info()","6b96c3d9":" #NaN values\n\nage.isna().sum()","2ab655cc":"# drop duplicate entry in description\nage.drop_duplicates(['Description'],inplace=True)\nage.shape","f1b00ee9":"import re\nfrom string import punctuation\nfrom nltk.corpus import stopwords","7cc065bf":"stopword = stopwords.words('english')","cd90e657":"def preprocessing(x):\n    text = x.strip().lower()\n    text_ = re.sub(r'\\\\[un]',\"\",text)\n    text = [w for w in text_.split() if \"www.\" not in w]\n    text_ = [w for w in text if \"http:\" or \"https:\" not in w]\n    text = \" \".join([w for w in text_ if w not in stopword])\n    text_ = \"\".join([ch if ch not in punctuation else \" \" for ch in text])\n    text = [w for w in text_.split() if w.isalpha() and len(w) > 1]\n    return text","e5690d4c":"age.Description[0]","882ccf53":"\" \".join(age.Description.apply(preprocessing)[0])","71b87739":"#creating features from text data using CountVectorizer and TF-IDF\n\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfTransformer\nfrom sklearn.model_selection import train_test_split","ddfff012":"X_train,X_test,y_train,y_test = train_test_split(age[['Description']],age['Age Rating'],test_size=0.2,random_state=42)\nprint(X_train.shape,X_test.shape)","9c96cbb7":"# Creating Bag of Words(BoW) on X_train data. We can use this also to train our model. But we will use this also to create TF-IDF Matrix.\n\ncv = CountVectorizer(analyzer=preprocessing).fit(X_train.Description)\ncv_trans = cv.transform(X_train.Description)\n\ncv_trans.shape","ef8bdc7e":"tfidf = TfidfTransformer().fit(cv_trans)\ntfidf_trans = tfidf.transform(cv_trans)\n\ntfidf_trans.shape","73e0c38e":"# Creating feature for test data aslo.\n\ncv_trans_test = cv.transform(X_test.Description)\ntfidf_trans_test = tfidf.transform(cv_trans_test)","dfae8766":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import LinearSVC\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score","af9c87a0":"models = [DecisionTreeClassifier(random_state=42),RandomForestClassifier(random_state=42),LinearSVC(random_state=42),XGBClassifier(random_state=42)]\nmodel_score = []\nfor i in models:\n    model = i\n    model.fit(cv_trans,y_train)\n    model_score.append(accuracy_score(y_test,model.predict(cv_trans_test)))\nmodel_score","2197a2ff":"summary = pd.DataFrame({'Model':models,'Accuracy Score':model_score})\n\nsummary.style.highlight_max(['Accuracy Score']) #hightlighting maximum accuracy score","e5de3a9c":"# EDA","89f53856":"**You can build other models also and can do hyperparameters tuning to achieve a more accurate model.**","a18b7cd4":"# Text Preprocessing And Feature Creation","7f92c1ce":"# Age Rating Prediction\n\n**We will create a model to predict Age Rating provided to a particular application of app store. For this we will use description provided with each and every application.**\n\n**Explanatory Variable : `Description`**\n\n**Response Variable : `Age Rating`**","ede1cdf4":"<h1 style=\"color:skyblue;font-size:70px;text-align:center;\">Thank You!\ud83d\ude4f<\/h1>"}}