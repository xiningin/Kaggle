{"cell_type":{"9f7a1f69":"code","3fea7a1a":"code","47fa441e":"code","b766b232":"code","15769edc":"code","2195b3d2":"code","456cb397":"code","baa3c64b":"code","112de3b1":"code","890efc4b":"code","8581bb8b":"code","8a4c882b":"code","2e9789cb":"code","ffdf4b93":"code","dbc55b4c":"code","5a3d62c6":"code","59100434":"code","75ec82b0":"code","34fab8d5":"code","e18417cf":"code","4364c91a":"code","302a39ec":"code","9504779b":"code","fd008302":"code","50db5f59":"code","3728fba2":"code","dda9450c":"code","4a90c02c":"code","64995a44":"code","5af076f6":"code","116fe328":"code","e604ad62":"code","b78937c6":"code","a31f1a3d":"code","da02f00b":"code","dcc94489":"code","cdcb0c5d":"code","44edd1e0":"code","1019709b":"code","4b3e88ee":"code","6c431d3e":"code","c2d0857d":"markdown","f1d98598":"markdown","ea8fbde3":"markdown","7182de92":"markdown","a1a31a7b":"markdown","eb280d13":"markdown","f3b8d2bb":"markdown","cb03f605":"markdown"},"source":{"9f7a1f69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\/\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3fea7a1a":"df = pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')","47fa441e":"df.head()","b766b232":"df.shape","15769edc":"df.isnull().sum()","2195b3d2":"df.dtypes","456cb397":"df = df.fillna(df.mode().iloc[0])","baa3c64b":"df.shape","112de3b1":"df.describe().transpose()","890efc4b":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ndf['WindGustDir'] = le.fit_transform(df['WindGustDir'])\ndf['WindDir9am'] = le.fit_transform(df['WindDir9am'])\ndf['WindDir3pm'] = le.fit_transform(df['WindDir3pm'])\ndf['RainToday'] = le.fit_transform(df['RainToday'])\ndf['RainTomorrow'] = le.fit_transform(df['RainTomorrow'])","8581bb8b":"df.dtypes","8a4c882b":"import seaborn as sns \nimport matplotlib.pyplot as plt \nfig = plt.figure(figsize = (20,15))\nax = fig.gca()\ndf.hist(ax=ax)\nplt.show()","2e9789cb":"df = df.drop(['Date','Location'],axis=1)","ffdf4b93":"colum_name = df.columns","dbc55b4c":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ndf_scale = pd.DataFrame(scaler.fit_transform(df))","5a3d62c6":"df_scale.columns = colum_name\ndf_scale['RainTomorrow'] = le.fit_transform(df_scale['RainTomorrow'])","59100434":"df_scale.head()","75ec82b0":"X = df_scale.drop(['RainTomorrow'],axis=1)\ny = df_scale['RainTomorrow']","34fab8d5":"X.head()","e18417cf":"from yellowbrick.target import FeatureCorrelation\nfeature_names = list(X.columns)","4364c91a":"visualizer = FeatureCorrelation(labels = feature_names)\nvisualizer.fit(X, y)\nvisualizer.poof()","302a39ec":"boxplot = df_scale.boxplot(figsize=(40, 12))","9504779b":"from sklearn.model_selection import train_test_split\nX_train_s, X_test_s, y_train_s, y_test_s = train_test_split(X, y, test_size = 0.33, random_state = 42)","fd008302":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(X_train_s, y_train_s)","50db5f59":"y_pred_s = model.predict(X_test_s)","3728fba2":"from sklearn.metrics import accuracy_score\naccuracy_score(y_pred_s,y_test_s)","dda9450c":"def drop_outliers(df,field_name):\n    iqr = 1.5 * (np.percentile(df[field_name],75) - np.percentile(df[field_name],25))\n    df.drop(df[df[field_name] > (iqr + np.percentile(df[field_name], 75))].index , inplace=True)\n    df.drop(df[df[field_name] < (np.percentile(df[field_name], 25))].index , inplace=True)","4a90c02c":"df_scale.columns","64995a44":"drop_outliers(df_scale,'MinTemp')\ndrop_outliers(df_scale,'Rainfall')\ndrop_outliers(df_scale,'Evaporation')\ndrop_outliers(df_scale,'WindGustSpeed')\ndrop_outliers(df_scale,'WindSpeed9am')\ndrop_outliers(df_scale,'WindSpeed3pm')\ndrop_outliers(df_scale,'Humidity9am')\ndrop_outliers(df_scale,'Pressure9am')\ndrop_outliers(df_scale,'Pressure3pm')\ndrop_outliers(df_scale,'Temp9am')\ndrop_outliers(df_scale,'Temp3pm')","5af076f6":"boxplot = df_scale.boxplot(figsize=(40, 12))","116fe328":"df_scale.shape","e604ad62":"X = df_scale.drop(['RainTomorrow'],axis=1)\ny = df_scale['RainTomorrow']","b78937c6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)","a31f1a3d":"model_2 = RandomForestClassifier()\nmodel_2.fit(X_train, y_train)","da02f00b":"y_pred = model_2.predict(X_test)","dcc94489":"accuracy_score(y_pred,y_test)","cdcb0c5d":"X_less_corr = df_scale.drop(['RainTomorrow','MaxTemp','Pressure9am','Pressure3pm','Sunshine','Temp3pm'],axis=1)\ny_less_corr = df_scale['RainTomorrow']","44edd1e0":"X_train, X_test, y_train, y_test = train_test_split(X_less_corr, y_less_corr, test_size = 0.2)","1019709b":"model_3 = RandomForestClassifier()\nmodel_3.fit(X_train, y_train)","4b3e88ee":"y_lcorr_pred = model_3.predict(X_test)","6c431d3e":"accuracy_score(y_lcorr_pred,y_test)","c2d0857d":"##  Model 1 Before Removing Outlier  ","f1d98598":"## Model 2 After Removing Outlier ","ea8fbde3":"# Exploring Data","7182de92":"## Standardization Data","a1a31a7b":"# Visualizing Data","eb280d13":"### Feature Correlation ","f3b8d2bb":"# Preprocessing","cb03f605":"## Model 3 Drop Less Corr. Features "}}