{"cell_type":{"3bcc52ad":"code","2680ca3b":"code","d744703c":"code","5f313253":"code","5f252ed5":"code","4d7fb490":"markdown"},"source":{"3bcc52ad":"#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Sep 21 2020\n@author: _drTom_ (Thomas Plocher)\n\"\"\"\n\n# This Python function generates a Pareto-Chart and returns some data characteristics.\n# It can be used as utility fuction and as tutorial for applying Python and Matplotlib-Pyplot\n\nimport numpy as np # linear algebra\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndef paretoChart(dList, nameList=[], figSize=(10,6), barCol=\"C0\", percCol=\"C1\", percMark=\"D\", \n                percLinestyle='--', truncate=False, treshold=80):\n    '''\n    Display Pareto-Chart and return bin-Indices of most frquented bins.\n    \n    Parameters\n    ----------\n    dList : list with bin values; e.g. (int)-values.\n    nameList: list of x-axis labels to display instead of index number\n    figSize : (width, height) of chart, optional. The default is (10,6).\n    barCol : histogram bar color, optional. The default is \"C0\".\n    percCol : percentage line color, optional. The default is \"C1\".\n    percMark : percentage marker type, optional. The default is \"D\".\n    percLinestyle: Default is dashed '--'\n    truncate : boolean, optional\n        truncate bins after treshold-percentage value has been reached. \n        The default is False.\n    treshold : float, optional. Treshold value in percent. The default is 80 (%).\n\n    Returns\n    -------\n    - (truncated) list of bin-numbers according to x-coordinates of Pareto-Chart\n    - probability ]0,1] of visiting 'treshold-bin'\n    - total count\n    Author: Thomas Plocher; created 20200921\n    '''\n    from matplotlib.ticker import PercentFormatter\n    n = len(dList)\n    xs = np.sum(dList) # normalizing factor to get to total of 100%\n    dat = np.zeros((n, 2)) # array holds [0] bin-values and [1] cumulative-percentage\n    xCum = 0\n    xCoords = [] # string-coordinates needed for bin-plot (x-values will be automatically sorted by PyPlot otherwise)\n    n80 = None   # treshold index to first bin exceeding cumulative percentage treshold\n    for i, j in enumerate(reversed(list(np.argsort(dList)))):\n        xCum += 100*dList[j]\/xs\n        dat[i] = [dList[j], xCum]\n        xCoords.append(str(j))\n        if n80 == None and xCum >= treshold:\n            n80 = i\n            if truncate:\n                break\n    if truncate:\n        dat = dat[:n80+1]\n    dat = dat.transpose()\n    fig, ax = plt.subplots(figsize=figSize)\n    if len(nameList) != n:\n        xAxisLabels = xCoords\n    else:\n        xAxisLabels = [nameList[int(i)] for i in xCoords]\n    ax.bar(xAxisLabels, dat[0], color=barCol)\n    ax2 = ax.twinx()\n    ax2.plot(xAxisLabels, dat[1], ls=percLinestyle, color=percCol, marker=percMark, ms=7)\n    ax2.yaxis.set_major_formatter(PercentFormatter())\n    ax.tick_params(axis=\"y\", colors=barCol)\n    ax2.tick_params(axis=\"y\", colors=percCol)\n    plt.title(f\"Pareto-Chart; cumulative percentage including element '{xCoords[n80]}' \"+\n              f\"is {int(dat[1,n80])}%; count = {int(dat[0,n80])}\")\n    plt.show()\n    return [int(s) for s in xCoords], dat[0,n80]\/xs, int(xs)","2680ca3b":"nList = [2,6,88,20,10,8,60,5]\nxLabel = ['one', 'two', '3', 'cat 4', '5', 'six', '7', '8']\nparetoChart(nList, xLabel, barCol=\"C2\", percCol=\"C3\", percMark=\"o\", percLinestyle='--')","d744703c":"# the for loop uses np.argsort and enumerate to generate a (reverse-)sorted sequence:\nprint('nList =', nList)\nfor i, j in reversed(list(enumerate(np.argsort(nList)))):\n    print(i,j)","5f313253":"# The matplotlib.pyplot plot-command sorts x-values if they are numbers.\nplt.plot(nList,nList)","5f252ed5":"# Therefore, the xCoord string-labels need to be generated for plotting the Pareto-chart above.\nplt.plot(xLabel,nList)","4d7fb490":"This Python function generates a Pareto-Chart and returns some data characteristics.\nIt can be used as utility fuction and as tutorial for applying Python and Matplotlib-Pyplot"}}