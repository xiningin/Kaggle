{"cell_type":{"9dceedc1":"code","1b9d85ea":"code","8dbe0f1a":"code","5c0f2ca0":"code","00a50138":"code","aa741113":"code","d3667bc1":"code","21a39e04":"code","3b20a3d8":"code","9a2a4372":"code","c7e1a686":"markdown","308ab716":"markdown","357286b4":"markdown","e674012b":"markdown","3b124b12":"markdown","e84fabbb":"markdown","42acb8e7":"markdown","732c28da":"markdown","7739d6dc":"markdown","214f4e1d":"markdown","68df9692":"markdown"},"source":{"9dceedc1":"# List Variable\nexample = ['use','enumerate','instead','of','iteration']\n\n# Ideal Way\nfor i in range(len(example)):\n    print(f\"# {i + 1}: {example[i]}\")\n          \n# Pythonic way - enumerate\nfor i, value in enumerate(example, 1):\n    print(f\"# {i}: {value}\")","1b9d85ea":"# Lists \nEmployees = ['Employee1','Employee2','Employee3','Employee4']\nAge = [30,25,35,40]\n\n# Ideal Way\nfor i in range(len(Employees)):\n    employee = Employees[i]\n    age = Age[i]\n    print(f\"Employee name is {employee} and age is {age}\")\n    \n# Pythonic way - zip\nfor employee, age in zip(Employees, Age):\n    print(f\"Employee name is {employee} and age is {age}\")","8dbe0f1a":"# Lists \nEmployees = ['Employee1','Employee2','Employee3','Employee4']\n\n# Ideal way\nfor i in range(1,len(Employees) + 1):\n    print(f\"Approach 1 - Employee came to office after covid 19 is {Employees[-i]}\")\nfor employee in Employees[::-1]:\n    print(f\"Approach 2 - Employee came to office after covid 19 is {employee}\")\n    \n# Pythonic way - reversed()\nfor employee in reversed(Employees):\n    print(f\"Using revered -  Employee came to office after covid 19 is {employee}\")","5c0f2ca0":"# List\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\n#Ideal way\nfor number in numbers:\n    if number % 2:\n        print(f\"Odd Number : {number}\")\n\n# Pythonic way - filter()\nfor number in filter(lambda x: x %2, numbers):\n    print(f\"Odd Number : {number}\")             ","00a50138":"from itertools import chain\n\n#Lists\noddValues = [1,3,5,7,9]\nevenValues = [2,4,6,8,10]\n\n# Ideal way\nvalues = oddValues + evenValues\nfor value in values:\n    print(f\"value is : {value}\")\n\n# Pythonic way - chain()\nfor value in chain(oddValues, evenValues):\n    print(f\"value is : {value}\")","aa741113":"# Dict\nEmployees = {\"Employee1\": 30, \"Employee2\": 35, \"Employee3\": 40, \"Employee4\": 45}\n\n#Ideal way\nfor key in Employees:\n    print(f\"Employee Name is : {key}\")\nfor key in Employees.keys():\n    print(f\"Employee Name is : {key}\")\nfor value in Employees.values():\n    print(f\"Age is : {value}\")\nfor value in Employees:\n    print(f\"Age is : {Employees[value]}\")\n    \n#Pythonic way\nfor key, value in Employees.items():\n    print(f\"Employee came to office after covid 19 is {key} and age is {value}\")\n    ","d3667bc1":"### list\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\n#Ideal way\nsquaredNumbers = list()\nfor square in numbers:\n    squaredNumbers.append(square * square)\nprint(squaredNumbers)\n\n#Using list comprehension\nsquaredNumbers = [x * x for x in numbers]\nprint(squaredNumbers)\n\n#Ideal way\nsquaredNumbers = dict()\nfor square in numbers:\n    squaredNumbers[square] = square * square\n    \n#Using list comprehension\nsquaredNumbers = {x: x*x for x in numbers}\nprint(squaredNumbers)\n\n#Ideal way\nsquaredNumbers = set()\nfor square in numbers:\n    squaredNumbers.add(square)\nprint(squaredNumbers)\n\n#Using list comprehension\nsquaredNumbers = [x*x for x in numbers]\nprint(squaredNumbers)    ","21a39e04":"# For Loop\nfor n in range(2, 10):\n    for x in range(2, n):\n        if n % x == 0:\n            print( n, 'equals', x, '*', n\/x)\n            break\n    else:\n        # loop fell through without finding a factor\n        print(n, 'is a prime number')\n\n# While Loop\ncount = 2\nwhile (count < 1):     \n    count = count+1\n    print(count) \n    break\nelse: \n    print(\"No Break\")","3b20a3d8":"    #Traditional\n    value = True\n    if value:\n        v = 1\n    else:\n        v = 0\n    print(v)\n\n    #Using ternary\n    value = True\n    v = 1 if value else 0\n    print(v)","9a2a4372":"    # Tip1: Accept Multiple Inputs\n\n    # Traditional Approach\n\n    x = input(\"Enter Any Number: \")\n    print(x)\n\n    y = input(\"Enter Any Number: \") \n    print(y)\n\n    z = input(\"Enter Any Number: \") \n    print(z)\n\n    t = input(\"Enter Any Number: \") \n    print(t)\n\n    p = input(\"Enter Any Number: \") \n    print(p)\n\n    # Pythonic way\n    x,y,z,t,p = input(\"Enter Any Number: \").split(' ')\n    print(x,y,z,t,p)\n\n    # Tip2: Multi Condition Check\n\n    salary = 40000\n    age = 25\n    weight = 70\n\n    # Traditional Approach\n\n    if salary > 20000 and age > 20 and weight > 65:         \n    \tprint (\"All conditions satisfied\")\n\n    if salary > 20000 or age > 20 or weight > 65:\n    \tprint (\"Any one condition is satisfied\")\n\n    # Pythonic way using list\n\n    check = [\n    \tsalary > 20000,\n    \tage > 20,\n    \tweight > 65\n    ]\n\n    if all(check):\n    \tprint(\"Pythonic way of checking conditions\")\n\n    if any(check):\n    \tprint(\"Pythonic way of checking any one condition\")\n\n    # Tip 3: swapping in python\n\n    # Traditional approach\n\n    x = \"tip1\"\n    y = 'tip2'\n\n    temp = x\n    x = y\n    y = temp\n\n    print(x,y)\n\n    # Pythonic way\n    x = 'tip3'\n    y = 'tip4'\n    x,y = y,x\n    print(x,y)\n\n    # Tip 4: Removing duplicates\n\n    # Traditional approach - with out list comprehension\n    numbers = [1,2,1,3,4,2,1,2,5,67,2,3,56,78,34,12,3,4,5,6,7,8]\n    result = []\n    for num in numbers:\n    \tif num not in result:\n    \t\tresult.append(num)\n    print(\"final list is :\" + str(result))\n\n    # with list comprehension\n    resultComp = []\n    [resultComp.append(num) for num in numbers if num not in resultComp]\n    print(\"final list using comprehension:\" + str(resultComp))\n\n    # Pythonic way\n\n    # Using set\n    resultSet = list(set(numbers))\n    repeatedNumbers = max(set(numbers), key=numbers.count)\n    print(\"Using set final list is :\" + str(resultSet))\n    print(\"Most repeated is :\", repeatedNumbers)\n\n    # Using Dictionary\n    resultDict = list(dict.fromkeys(numbers))\n    repeatedNumbers = max(dict.fromkeys(numbers), key=numbers.count)\n    print(\"Most repeated is :\", repeatedNumbers)\n    print(\"Using dictionary final list is :\" + str(resultDict))\n\n    # Tip 5: Call by Reference\n\n    # Traditional way of implementing the sum function\n    def finalString(x,y):\n    \treturn x + y\n    print(finalString('Python is very simple',' to learn'))\n\n    # Using Pythonic way\n\n    def finalString1(*x):\n    \tresult = ''\n    \tfor s in x:\n    \t\tresult += s\n    \treturn result\n\n    print(finalString1('Python is very simple', ' to learn', ' and can be used \\\n    in', ' Test Automation, Machine learning, Data Science, Web', \\\n    'desktop apps development.'))\n\n    # Tip 6: Reverse String\n\n    # Traditional approach\n    s = 'python is fun to learn'\n    print(s[::-1])\n\n    # Pythonic way\n    s = 'python is fun to learn'[::-1]\n    print(s)\n\n    # Tip 7: Palidrome\n\n    checkString = input(\"Enter the string value :\")\n    result = checkString.find(checkString[::-1])==0\n    if result:\n    \tprint(\"String is Palindrome \" + str(result))\n    else:\n    \tprint(\"Not Palindrome\")    ","c7e1a686":"## \ud83d\udc49 Best Practise 3 \u2192 Using reversed() - Fetch elements reversly","308ab716":"### \ud83d\udc49 Best Practise 7 \u2192 Using Comprehension() - Comprehensions for lists, dictionaries & set","357286b4":"### \ud83d\udc49 Best Practise 8 \u2192 Using else clause - For and While Loops","e674012b":"# Python Best Coding Practises","3b124b12":"## \ud83d\udc49 Best Practise 5 \u2192 Using Chain() - Concatenate values from lists","e84fabbb":"### Best Practise 9 \u2192 **Using Ternary Opertor** - Ternary Opertor*","42acb8e7":"## \ud83d\udc49 Best Practise 4 \u2192 Using filter() - Data Filtering","732c28da":"## \ud83d\udc49 Best Practise 1 \u2192 Using enumerate() - Fetch elements from list","7739d6dc":"## \ud83d\udc49 Best Practise 6 \u2192 Using Dictionaries() - Retrieve keys & values from dictionary","214f4e1d":"### \ud83d\udc49 **Best Practise 10 \u2192 **Accept Multiple Inputs, remove duplicates, call by reference..etc****","68df9692":"## \ud83d\udc49 Best Practise 2 \u2192 Using zip() - Fetch elements from multiple lists"}}