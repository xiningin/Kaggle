{"cell_type":{"0a792007":"code","48e4c0cd":"code","7a884085":"code","c0473b63":"code","84fe0f6b":"code","a9df5aec":"code","6039dc08":"code","8dd54c70":"code","1445b0ba":"code","7ff7deac":"code","2378dd10":"code","db1b7875":"markdown"},"source":{"0a792007":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","48e4c0cd":"track_test = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2022\/tracking2018.csv\")","7a884085":"track_test.head()","c0473b63":"play_test = track_test.loc[(track_test['gameId'] == 2018123000) & (track_test['playId'] == 36)]","84fe0f6b":"play_test.shape","a9df5aec":"import matplotlib as mlp\nimport matplotlib.pyplot as plt","6039dc08":"play_frame2 = play_test.loc[(play_test['time'] == '2018-12-30T21:25:38.900')]\nplay_frame2['team'] = (play_frame2['team'] != 'home').astype(int)\nx = play_frame2['x']\ny = play_frame2['y']\ncolor = play_frame2['team']","8dd54c70":"# general plot of field\n\nfig, ax = plt.subplots(figsize=(12, 6))\n\nplt.xlim([0, 120])\nplt.ylim([0, 53.3])\n\nplt.axvline(x=10, c='r')\nplt.axvline(x=20, c='k')\nplt.axvline(x=30, c='k')\nplt.axvline(x=40, c='k')\nplt.axvline(x=50, c='k')\nplt.axvline(x=60, c='g')\nplt.axvline(x=70, c='k')\nplt.axvline(x=80, c='k')\nplt.axvline(x=90, c='k')\nplt.axvline(x=100, c='k')\nplt.axvline(x=110, c='r')\n\nplt.scatter(x,y, c=color)","1445b0ba":"import plotly.express as px\n\npx.scatter(play_test, x='x', y='y', animation_frame='time', color='team', range_x=[0, 120], range_y=[0, 53.3])","7ff7deac":"def play_plotter(season_df, gameID, playID):\n    \n    play = season_df.loc[(season_df['gameId'] == gameID) & (track_test['playId'] == playID)]\n    \n    return px.scatter(play, x='x', y='y', animation_frame='time', color='team', range_x=[0, 120], range_y=[0, 53.3])","2378dd10":"play_plotter(track_test, 2018123000, 36)","db1b7875":"## Notebook tasks\n\n- create grid for field\n- add any field markings that my be relevant\n- plot every player at a given time\n- plot representations of player speed, angle, etc if necessary"}}