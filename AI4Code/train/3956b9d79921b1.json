{"cell_type":{"4b55f2aa":"code","b24adb8f":"code","12db7a22":"code","60c0147e":"code","9720b807":"code","0f451b8f":"code","96d6fafe":"code","2d31b359":"code","1f838882":"code","b692d4b1":"code","bccdc3c7":"code","6da410e6":"code","3fb62b83":"code","4c08b622":"code","922ff4ab":"code","83db3021":"code","3c91eec0":"code","9b5597d7":"code","e01dd6ed":"code","1d79e67f":"code","5c9b6ee8":"code","bef96d2f":"code","05dc5ab7":"code","ce853158":"code","6a9d9ea2":"code","8ea913bd":"code","d2367e6d":"code","e87957e2":"code","dbecd167":"code","0c7924fa":"code","92d64804":"code","5b7d8bd9":"code","073f597d":"code","e9045736":"code","56005b83":"code","643fbbc5":"code","7d76a8e3":"markdown","6fa7032e":"markdown","5413be90":"markdown","8bb12c48":"markdown","2f18f858":"markdown","dad245fc":"markdown","f57bbeec":"markdown","9e31e668":"markdown","42ea184f":"markdown","4fe20a17":"markdown"},"source":{"4b55f2aa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom hyperopt import STATUS_OK, Trials, fmin, hp, tpe\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b24adb8f":"train = pd.read_csv(\"..\/input\/airline-passenger-satisfaction\/train.csv\")\ntest = pd.read_csv(\"..\/input\/airline-passenger-satisfaction\/test.csv\")","12db7a22":"train.shape","60c0147e":"test.shape","9720b807":"train.info()","0f451b8f":"train.describe()","96d6fafe":"train.head(5)","2d31b359":"train.drop(labels=[\"Unnamed: 0\"],axis=1,inplace=True)\ntest.drop(labels=[\"Unnamed: 0\"],axis=1,inplace=True)","1f838882":"train.head(5)","b692d4b1":"feedback = ['satisfied', 'neutral or dissatisfied']\nca_features = ['Gender', 'Customer Type', 'Type of Travel', 'Class']","bccdc3c7":"def proportion_stacked_bar(feature):\n    ctab = pd.crosstab([train[feature].fillna('Unknown')], train.satisfaction, dropna=False).apply(lambda x: x\/x.sum(), axis=1)\n    plt = ctab[feedback].plot(kind='bar', colormap='Accent',stacked=True, fontsize = 12)\n    plt.legend(loc='center left', bbox_to_anchor=(1, 0.5),prop={'size': 12})\n    plt.set_xticklabels(train[feature].unique().tolist(), rotation=0)","6da410e6":"for i in ca_features:\n    proportion_stacked_bar(i)","3fb62b83":"train[\"satisfaction\"]=[1 if i == \"satisfied\" else 0 for i in train['satisfaction']]\ntrain.head()","4c08b622":"plt.figure(figsize=(10,10))\nlist1=['Age','Inflight wifi service',\n       'Departure\/Arrival time convenient', 'Ease of Online booking',\n       'Gate location', 'Food and drink', 'Online boarding', 'Seat comfort',\n       'Inflight entertainment', 'On-board service', 'Leg room service',\n       'Baggage handling', 'Checkin service', 'Inflight service',\n       'Cleanliness','satisfaction']\nsns.heatmap(train[list1].corr(),annot=True,fmt=\".2f\")\nplt.show()","922ff4ab":"plt.figure(figsize=(20,1))\nlist1=['Age','Inflight wifi service',\n       'Departure\/Arrival time convenient', 'Ease of Online booking',\n       'Gate location', 'Food and drink', 'Online boarding', 'Seat comfort',\n       'Inflight entertainment', 'On-board service', 'Leg room service',\n       'Baggage handling', 'Checkin service', 'Inflight service',\n       'Cleanliness','satisfaction']\ncorr_matrix = train[list1].corr()\ntype(corr_matrix)\nsns.heatmap(corr_matrix.iloc[15:16,0:],annot=True,fmt=\".2f\")\nplt.yticks(rotation=0)\nplt.xticks(rotation=30)\nplt.show()","83db3021":"fig, axes = plt.subplots(2, 3, figsize=(15, 7), sharey=True)\nfig.suptitle('Satisfaction with Highly Correlated Features')\n\nsns.countplot(ax=axes[0,0],x='Online boarding',hue=\"satisfaction\",data=train,palette=['grey', 'green'])\naxes[0,0].legend([],[],frameon=False)\n\nsns.countplot(ax=axes[0,1], x='Seat comfort',hue=\"satisfaction\",data=train,palette=['grey', 'green'])\n\nsns.countplot(ax=axes[0,2], x='Inflight entertainment',hue=\"satisfaction\",data=train,palette=['grey', 'green'])\naxes[0,2].legend([],[],frameon=False)\n\nsns.countplot(ax=axes[1,0], x='On-board service',hue=\"satisfaction\",data=train,palette=['grey', 'green'])\naxes[1,0].legend([],[],frameon=False)\n\nsns.countplot(ax=axes[1,1], x='Leg room service',hue=\"satisfaction\",data=train,palette=['grey', 'green'])\naxes[1,1].legend([],[],frameon=False)\n\nsns.countplot(ax=axes[1,2], x='Cleanliness',hue=\"satisfaction\",data=train,palette=['grey', 'green'])\naxes[1,2].legend([],[],frameon=False)","3c91eec0":"numerical_features = train.select_dtypes(exclude=['object']).copy()\nnumerical_features = numerical_features.columns.tolist()\nnumerical_features","9b5597d7":"train.head()\ntrain.shape","e01dd6ed":"def remove_outliers(df,col):\n    Q1 = df[col].quantile(0.25)\n    Q3 = df[col].quantile(0.75)\n\n    # IQR\n    IQR= Q3-Q1\n    fence_low  = Q1-1.5*IQR\n    fence_high = Q3+1.5*IQR\n    df = df.loc[(df[col] > fence_low) & (df[col] < fence_high)]\n    return df","1d79e67f":"for i in numerical_features:\n    train = remove_outliers(train,i)\n\ntrain.describe()","5c9b6ee8":"train.isnull().sum()","bef96d2f":"train.drop(labels=['id'],axis=1,inplace=True)\ntrain.head()","05dc5ab7":"for i in ca_features:\n    train = pd.get_dummies(train,columns=[i])\ntrain.head()","ce853158":"# check missing values\ntest.isnull().sum()","6a9d9ea2":"# fill missing values with mean\nnp.mean(test[\"Arrival Delay in Minutes\"])\ntest[\"Arrival Delay in Minutes\"]=test[\"Arrival Delay in Minutes\"].fillna(np.mean(test[\"Arrival Delay in Minutes\"]))\ntest[test[\"Arrival Delay in Minutes\"].isnull()]","8ea913bd":"# drop id\ntest_id = test['id']\ntest.drop(labels=['id'],axis=1,inplace=True)\ntest.head()","d2367e6d":"# get dummies\nfor i in ca_features:\n    test = pd.get_dummies(test,columns=[i])\ntest.head()","e87957e2":"from sklearn.model_selection import train_test_split, cross_val_score,StratifiedKFold,GridSearchCV\nfrom sklearn import model_selection as cv\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score,classification_report,roc_auc_score\nfrom sklearn.metrics import confusion_matrix","dbecd167":"y_train = train['satisfaction']\nX_train = train.drop(labels='satisfaction',axis=1)\n\ny_test = [1 if i == \"satisfied\" else 0 for i in test['satisfaction']]\nX_test = test.drop(labels=['satisfaction'],axis=1)\n\n# print('X_train',len(X_train))\n# print('X_test',len(X_test))\n# print('y_train',len(y_train))\n# print('y_test',len(y_test))\n# print('test',len(test))","0c7924fa":"def cm_terms(confusion_matrix):\n    TN, FP, FN, TP = confusion_matrix.ravel()\n\n    FP = FP.astype(float)\n    FN = FN.astype(float)\n    TP = TP.astype(float)\n    TN = TN.astype(float)\n\n    # Sensitivity, hit rate, recall, or true positive rate\n    TPR = TP\/(TP+FN)\n    # Specificity or true negative rate\n    TNR = TN\/(TN+FP)\n    accuracy = (TP+TN)\/(TP+FP+FN+TN)\n    misclass = 1 - ((TP+TN)\/(TP+FP+FN+TN))\n    result = [TPR, TNR, accuracy, misclass]\n#     print(f\"TPR is {round(TPR,3)}\")\n#     print(f\"TNR is {round(TNR,3)}\")\n#     print(f\"accuracy is {round(accuracy,4)}\")\n#     print(f\"misclass is {round(misclass,4)}\")\n    return result","92d64804":"classifiers = [LogisticRegression(solver='liblinear'), DecisionTreeClassifier(), RandomForestClassifier(), KNeighborsClassifier()]\n\nfor classifier in classifiers:\n    classifier.fit(X_train, y_train)\n    probs = classifier.predict_proba(X_test)[:, 1]\n    y_pred = classifier.predict(X_test)\n    terms = cm_terms(confusion_matrix(y_test,y_pred))\n    print(f\"Scores for {classifier} are:\")\n    print(f\"Accuracy: {round(classifier.score(X_test, y_test), 3)}\")\n    print(f\"AUC: {round(roc_auc_score(y_test, probs),3)}\")\n    print(f\"TPR: {round(terms[0], 3)}\")\n    print(f\"TNR: {round(terms[1], 3)}\")\n    print(f\"Misclassification Rate: {round(terms[3], 3)}\", \"\\n\")","5b7d8bd9":"rf_param_grid={\"max_features\":[1,3,10],\n              \"min_samples_split\":[2,3,10],\n              \"min_samples_leaf\":[1,3,10],\n              \"bootstrap\":[False],\n              \"n_estimators\":[100,300],\n              \"criterion\":[\"gini\"]}","073f597d":"# cv_result=[]\n# best_estimators=[]\n# clf=GridSearchCV(RandomForestClassifier(),param_grid=rf_param_grid,cv=StratifiedKFold(n_splits=5),scoring=\"accuracy\",n_jobs=-1,verbose=1)\n# clf.fit(X_train,y_train)\n# cv_result.append(clf.best_score_)\n# best_estimators.append(clf.best_estimator_)\n","e9045736":"# print(cv_result)\n# print(best_estimators)\n\n# [0.959988492052612]\n# [RandomForestClassifier(bootstrap=False, max_features=10, min_samples_split=10, n_estimators=300)]","56005b83":"tuned_classifiers = RandomForestClassifier(bootstrap=False,\n                                            max_features=10,\n                                            min_samples_split=10,\n                                            n_estimators=300)\n\ntuned_classifiers.fit(X_train, y_train)\nprobs = tuned_classifiers.predict_proba(X_test)[:, 1]\ny_pred = tuned_classifiers.predict(X_test)\nterms = cm_terms(confusion_matrix(y_test,y_pred))\nprint(f\"Scores for Tuned Ramdom Forest Classifier are:\")\nprint(f\"Accuracy: {round(tuned_classifiers.score(X_test, y_test), 3)}\")\nprint(f\"AUC: {round(roc_auc_score(y_test, probs),3)}\")\nprint(f\"TPR: {round(terms[0], 3)}\")\nprint(f\"TNR: {round(terms[1], 3)}\")\nprint(f\"Misclassification Rate: {round(terms[3], 3)}\", \"\\n\")","643fbbc5":"test_satisfaction = pd.Series(tuned_classifiers.predict(X_test), name = \"satisfaction\").astype(int)\nresults = pd.concat([test_id, test_satisfaction],axis = 1)\nresults = results[results['id'].notna()]\nresults['satisfaction'] = ['satisfied' if i == 1 else 'neutral or dissatisfied' for i in results['satisfaction']]\nresults.to_csv(\"satisfaction.csv\", index = False)\nresults.head()","7d76a8e3":"After tuning, Random Forest gives the best accuracy score which is 0.962. It also has the highest AUC, TPR and TNR scores and the lowest misclassification rate among all models selected.","6fa7032e":"## Variable Description\n1. id : Unique id number to each passenger.\n2. Gender: Gender of the passengers (Female, Male)\n3. Customer Type: The customer type (Loyal customer, disloyal customer)\n4. Age: The actual age of the passengers\n5. Type of Travel: Purpose of the flight of the passengers (Personal Travel, Business Travel)\n6. Class: Travel class in the plane of the passengers (Business, Eco, Eco Plus)\n7. Flight distance: The flight distance of this journey\n8. Inflight wifi service: Satisfaction level of the inflight wifi service (0:Not Applicable;1-5)\n9. Departure\/Arrival time convenient: Satisfaction level of Departure\/Arrival time convenient\n10. Ease of Online booking: Satisfaction level of online booking\n11. Gate location: Satisfaction level of Gate location\n12. Food and drink: Satisfaction level of Food and drink\n13. Online boarding: Satisfaction level of online boarding\n14. Seat comfort: Satisfaction level of Seat comfort\n15. Inflight entertainment: Satisfaction level of inflight entertainment\n16. On-board service: Satisfaction level of On-board service\n17. Leg room service: Satisfaction level of Leg room service\n18. Baggage handling: Satisfaction level of baggage handling\n19. Check-in service: Satisfaction level of Check-in service\n20. Inflight service: Satisfaction level of inflight service\n21. Cleanliness: Satisfaction level of Cleanliness\n22. Departure Delay in Minutes: Minutes delayed when departure\n23. Arrival Delay in Minutes: Minutes delayed when Arrival\n24. Satisfaction: Airline satisfaction level(Satisfaction, neutral or dissatisfaction)","5413be90":"Since all missing values have been cleaned out, we can move on to do feature engineering.\n\nFirst, we want to drop ID as it is meaningless to fit in models.","8bb12c48":"We then move on to check if there's any missing values left.","2f18f858":"We select features that has relatively high correlation score (greater than 0.3) with satisfaction in the last column. They are Online Boarding, Seat comfort, Inflight entertainment, On-board service, Leg room service, and Cleaniess.","dad245fc":"## Exploratary Data Analysis\nLet's first explore the how categorical data fields are related to satisfaction.(Gender, Customer Type, Type of Travel, Class)","f57bbeec":"We then want to convert categorical fields to dummies.","9e31e668":"We do the same procedure for test data.","42ea184f":"## Machine Learning\nWe test Logistic Regression, Decision Tree, Random Forest, XGB and KNN to fit and see which one performs better.","4fe20a17":"## Feature Engineering and Preparetion for ML\nWe want to first remove ourliers from our dataset."}}