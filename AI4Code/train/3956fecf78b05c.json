{"cell_type":{"c9d72e58":"code","d25e6ac9":"code","c2f744d5":"code","5977d31c":"code","897eea18":"code","9bedd987":"code","f17b8e0e":"code","3fdc8559":"code","a71f24f5":"code","bb67b056":"code","dc193c75":"code","6d8ea5c3":"code","317de158":"markdown","2e032227":"markdown"},"source":{"c9d72e58":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport ipywidgets as widgets\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d25e6ac9":"df1 = pd.read_csv('..\/input\/super_hero_powers.csv')\n","c2f744d5":"df1['names']=df1['hero_names']\ndf1=df1.drop(columns='hero_names')\ndf1.head()","5977d31c":"# Convert True\/False labels to 0,1\ndf1*=1\nprint(df1.shape)\ndf1.head()\n","897eea18":"# Optimize number of clusters by KMeans distortion, normalized mutual information score, and adjusted rand score\nimport matplotlib.pyplot as plt\nfrom scipy.cluster.vq import kmeans, vq\nimport scipy.cluster.hierarchy as shc\n\ndf = np.array(df1.drop(columns='names').astype(float))\n\nplt.figure(figsize=(20,20))\ndend=shc.dendrogram(shc.linkage(df, method='ward'))\n# Best separation occurs at k~40","9bedd987":"from sklearn.cluster import AgglomerativeClustering\ncluster=AgglomerativeClustering(n_clusters=40, affinity='euclidean', linkage='ward')\ncluster.fit_predict(df)\n\n","f17b8e0e":"from sklearn.manifold import TSNE\nnp.random.seed(777)\ntsne=TSNE(n_components=2, verbose=1, perplexity=22, n_iter=10000) # perplexity determined by 667 entries \/ 40 clusters ~ 22\nresults=tsne.fit_transform(df)\nplt.figure(figsize=(12,12))\nplt.scatter(results[:,0], results[:,1], c=cluster.labels_, cmap='cool')","3fdc8559":"df1['clusters'] = cluster.labels_\ndf1['clusters'].value_counts()\n","a71f24f5":"print(df1.loc[df1['clusters']==36]['names'])\nprint(df1.loc[df1['clusters']==36][df1==1].dropna(axis=1).columns.values)","bb67b056":"df2 = df1.loc[(df1['clusters'] != 36) & (df1['clusters'] != 37)] # These clusters have < 3 entries\ndf2['clusters'].value_counts()","dc193c75":"#Run this cell, select an entry from the drop down menu, then run the next cell\nimport random\na=[36,37]\nc=[]\nfor i in range(5):\n    b = random.randint(0,39)\n    while b in a: \n        b = random.randint(0,39)\n    c.append(b)\n    a.append(b)\ne=[]\nfor i in c:\n    df_temp=df2.loc[df2['clusters']==i]\n    df_temp=df_temp.reset_index(drop=True)\n    d = random.randint(0,len(df_temp)-1)\n    e.append(df_temp.iloc[d,:]['names'])\n\nprint(\"Select your favorite hero\")\ndd = widgets.Dropdown(options=e, disabled=False)\ndd\n\n    ","6d8ea5c3":"df2_temp=df2.loc[df2['names']==dd.value]\n#print(dd.value+\" has the following powers:\")\n#print(df2_temp.dropna(axis=1).drop(columns=['names', 'clusters']).columns.values)\n\nv = df2_temp['clusters'].values\ndf3_temp = df2.loc[df2['clusters'].isin(v)].reset_index(drop=True)\nnp.random.seed()\naa=[dd.value]\ncc=[]\nfor i in range(2):\n    bb = random.randint(0,len(df3_temp)-1)\n    while df3_temp.iloc[bb,:]['names'] in aa:\n        bb = random.randint(0,len(df3_temp)-1)\n    aa.append(df3_temp.iloc[bb,:]['names'])\n    cc.append(df3_temp.iloc[bb,:]['names'])\n\nprint(\"If you like\", dd.value+\", then you may also like\", cc[0], \"or\", cc[1]+\".\")\n","317de158":"****The first basic clustering will use only the heros' powers. This will identifiy which heroes have similar powers, and a recommendation engine will be built.","2e032227":"Working with 40 clusters seems to give good separation."}}