{"cell_type":{"f9381d40":"code","072838bb":"code","ad7ad9a9":"code","34124c43":"code","f175130d":"code","7f8e9d85":"code","31752e07":"code","6234ff12":"code","7dac8e98":"code","3aba0e9d":"code","84294542":"code","8e5df365":"code","f7ef584f":"code","c13d6d91":"code","a84b6690":"code","4c4864e0":"code","0a87cfd3":"code","98dc93d1":"code","390056a0":"code","9ff4a9f3":"code","9a02b066":"code","a83d11c6":"code","7d6b998c":"code","3ac06b2e":"markdown","0a746a91":"markdown","32066aa3":"markdown","d2104c43":"markdown","7f0d6050":"markdown","655736c9":"markdown"},"source":{"f9381d40":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","072838bb":"import h2o\nfrom h2o.automl import H2OAutoML\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport numpy as np\nimport re\nimport nltk\nfrom nltk.stem.porter import PorterStemmer\nfrom sklearn.model_selection import train_test_split\nfrom nltk import word_tokenize","ad7ad9a9":"h2o.init()","34124c43":"nltk.download('punkt')","f175130d":"train = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/nlp-getting-started\/test.csv')\ntrain","7f8e9d85":"train['target'].value_counts()","31752e07":"X_train, X_test = train_test_split(train,test_size=0.2,random_state=111)","6234ff12":"stemmer = nltk.stem.SnowballStemmer('english')\n\nnltk.download('stopwords')\nstop_words = set(nltk.corpus.stopwords.words('english'))","7dac8e98":"def tokenize(text):\n    tokens = [word for word in word_tokenize(text) if word.isalpha()]\n    tokens = map(str.lower,tokens)\n    stems = [stemmer.stem(item) for item in tokens if (item not in stop_words)]\n    \n    return stems","3aba0e9d":" vectorizer_tf = TfidfVectorizer(tokenizer=tokenize,stop_words=None, max_df=0.75, max_features=1000, lowercase=False, ngram_range=(1,2))\n train_vectors = vectorizer_tf.fit_transform(X_train.text)","84294542":"test_vectors = vectorizer_tf.transform(X_test.text)","8e5df365":"train_df = pd.DataFrame(train_vectors.toarray(),columns=vectorizer_tf.get_feature_names())\ntrain_df = pd.concat([train_df,X_train['target'].reset_index(drop=True)],axis=1)\ntrain_df","f7ef584f":"test_df = pd.DataFrame(test_vectors.toarray(),columns=vectorizer_tf.get_feature_names())\ntest_df = pd.concat([test_df,X_test['target'].reset_index(drop=True)],axis=1)\ntest_df","c13d6d91":"h2o_train_df = h2o.H2OFrame(train_df)\nh2o_test_df = h2o.H2OFrame(test_df)","a84b6690":"h2o_train_df['target'] = h2o_train_df['target'].asfactor()\nh2o_test_df['target'] = h2o_test_df['target'].asfactor()","4c4864e0":"aml = H2OAutoML(max_models=10,seed=10,exclude_algos=['StackedEnsemble'],verbosity=\"info\",nfolds=0,balance_classes=True,max_after_balance_size=0.3)","0a87cfd3":"x = vectorizer_tf.get_feature_names()\ny = 'target'","98dc93d1":"aml.train(x=x, y=y, training_frame=h2o_train_df, validation_frame=h2o_test_df)","390056a0":"aml.leaderboard","9ff4a9f3":"pred = aml.leader.predict(h2o_test_df)","9a02b066":"aml.leader.model_performance(h2o_test_df)","a83d11c6":"model_ids = list(aml.leaderboard['model_id'].as_data_frame().iloc[:,0])\nout = h2o.get_model([mid for mid in model_ids if \"GLM\" in mid][0])","7d6b998c":"out","3ac06b2e":"Import all the required packages","0a746a91":"Intialize a H2o instance","32066aa3":"Define AutoML. Here we can change thw parameters to get better results","d2104c43":"Custom tokenization function","7f0d6050":"Stemming ans stop words","655736c9":"Convert data frame to H2o object"}}