{"cell_type":{"dcd3240a":"code","c0d8a2a3":"code","c616cbbc":"code","b6df597e":"code","f90cd723":"code","b20c1eb2":"code","2b8f5547":"code","c0ea115c":"code","6326f88d":"code","07d08613":"code","834945ad":"code","c96e519b":"code","f8f55012":"code","2cea2969":"code","b8c5f013":"code","7619047c":"code","07949b73":"code","4fe21cb8":"code","8083de91":"code","e4204595":"code","3e3f31fc":"code","bbd2d303":"code","d4614540":"code","dc2b6b40":"markdown","d5c56be9":"markdown","f5fc33cd":"markdown","de293c97":"markdown","90211054":"markdown","758585f0":"markdown","d5e8706e":"markdown","661e1723":"markdown","742a7fad":"markdown","d0005225":"markdown","4221059a":"markdown","c3b22dae":"markdown","74db6dc9":"markdown"},"source":{"dcd3240a":"import numpy as np\nimport pandas as pd \nimport os\nimport pathlib\nimport PIL\nfrom pathlib import Path\nfrom PIL import Image, ImageDraw\nfrom math import sqrt\nimport ast\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\n\nimport warnings\nwarnings.filterwarnings('ignore')","c0d8a2a3":"train = pd.read_csv(\"..\/input\/tensorflow-great-barrier-reef\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tensorflow-great-barrier-reef\/test.csv\")\nsub = pd.read_csv(\"..\/input\/tensorflow-great-barrier-reef\/example_sample_submission.csv\")\n\npath = Path('..\/input\/tensorflow-great-barrier-reef\/train_images')\nfilepaths = list(path.glob(r'**\/*.jpg'))","c616cbbc":"# checking the train test lengths\nprint(\"Number of training samples: \", len(train))\nprint(\"Number of testing samples: \", len(test))","b6df597e":"train.head(150)","f90cd723":"# lets see how many frames with no starfishes\ntrain_clean = train.loc[train[\"annotations\"] != \"[]\"]\nprint(f\"No starfishes in {len(train)-len(train_clean)} samples.\")\nprint(f\"The clean train set has {len(train_clean)} images for us to work with.\")","b20c1eb2":"train_clean.head()","2b8f5547":"# Checking out the number of sequences\nlen(train_clean.sequence.value_counts())","c0ea115c":"# rows per each sequence\nprint(\"Sequence Samples\")\nprint(train_clean.sequence.value_counts())","6326f88d":"seq_df = train_clean.sequence.value_counts().to_frame()\nplt.figure(figsize=(16, 9))\nsns.barplot(x=seq_df.index, y=list(seq_df.sequence), palette=\"Greens_d\")\nplt.title(\"Distribution of Sequences\")\nplt.xlabel(\"Sequence Id\")\nplt.ylabel(\"Frequency\")\nplt.show()","07d08613":"num_boxes = []\nannotations_clean = []\nfor elem in train_clean.annotations:\n    ann = ast.literal_eval(elem)\n    num_boxes.append(len(ann))\n    annotations_clean.append(ann)","834945ad":"# adding num boxes per row and changing the annotations column to a proper python parseable list of dictionaries\ntrain_clean[\"num_boxes\"] = num_boxes\ntrain_clean[\"annotations\"] = annotations_clean","c96e519b":"train_clean.head()","f8f55012":"print(\"#box Frequency\")\nprint(train_clean.num_boxes.value_counts())","2cea2969":"# number of bounding boxes in the clean train datasets\nprint(f\"Number of Bounding Boxes in the dataset: {train_clean.num_boxes.sum()}\")","b8c5f013":"box_count = train_clean.num_boxes.value_counts().to_frame()","7619047c":"plt.figure(figsize=(16, 9))\nsns.barplot(x=box_count.index, y=list(box_count.num_boxes), palette=\"Greens_d\")\nplt.title(\"Distribution of Num_boxes\")\nplt.xlabel(\"# of Boxes\")\nplt.ylabel(\"Frequency\")\nplt.show()","07949b73":"#structure of a annotation\nlist(train_clean[\"annotations\"])[0]","4fe21cb8":"# generating paths for input images\nsrc = '..\/input\/tensorflow-great-barrier-reef\/train_images'\npaths = []\nfor row in train_clean.image_id:\n    vid_num = row.split('-')[0]\n    img_num = row.split('-')[1]\n    paths.append(os.path.join(src,f'video_{vid_num}',img_num+'.jpg'))\n","8083de91":"train_clean['paths'] = paths","e4204595":"# classic way of iterating through and drawing the bounding boxes on an image\ndef vis_boxes(img_path, bboxes):\n    coords = []\n    for box in bboxes:\n        x1 = box['x']\n        y1 = box['y']\n        x2 = x1 + box['width']\n        y2 = y1 + box['height']\n        coords.append([x1, y1, x2, y2])\n        \n    img = Image.open(img_path)\n    img1 = img.copy()\n    draw = ImageDraw.Draw(img1)\n    for elem in coords:\n        draw.rectangle(elem, outline='red', width=7)\n    \n    return img1","3e3f31fc":"train_clean.head()","bbd2d303":"# number of bounding boxes per each sequence\ntrain_clean.groupby('sequence').num_boxes.sum().to_frame()","d4614540":"# lets plot a few\n# some inspiration from https:\/\/www.kaggle.com\/sjyangkevin\/eda-bounding-box-analysis-annotated-videos\n\nplt.figure(figsize=(16, 9))\nn_images = 9\ncount = 0\nr,c = int(sqrt(n_images)), int(sqrt(n_images))\ntrain_plot = train_clean.sample(n = n_images)\n\nfor _, row in train_plot.iterrows():\n    img_path = row['paths']\n    bboxes = row['annotations']\n    plt.subplot(r, c, count + 1)\n    img_out = vis_boxes(img_path, bboxes)\n    plt.imshow(img_out)\n    count+=1\n\nplt.show()\nplt.tight_layout()","dc2b6b40":"## Lets look at some samples ","d5c56be9":"### Sequences with max bounding boxes","f5fc33cd":"**If you like it so far, consider upvoting \ud83d\ude04** \n\n<img src=\"https:\/\/media.giphy.com\/media\/eunrMjB8lBUKeL1fqD\/giphy-downsized.gif\">","de293c97":"## Number Of Boxes","90211054":"## Distribution of Sequences","758585f0":"## Time to gear up! : Lets Import","d5e8706e":"## Let us Begin!!!","661e1723":"Looks like a lot of these frames dont have our starfishes \n\n\n<img src=\"https:\/\/media.giphy.com\/media\/jsN192JGdyWvS1gqTb\/giphy.gif\">","742a7fad":"## Looking at the boxes","d0005225":"## Distribution of number of bounding boxes","4221059a":"## What Next?\n- Some Advanced EDA\n- Baseline model\n- Error Analysis of Baseline\n- Advanced model","c3b22dae":"# Lets go on a small adventure looking for starfishes \n\nThis notebook houses some basic EDA which will be updated frequently as the competition goes on with a simple aim of getting to the depths of data and extracting any key insights which could shape the solution\n\n\n<img src=\"https:\/\/media.giphy.com\/media\/QvSkfOVGFEH7Nydll2\/giphy.gif\">","74db6dc9":"So looks like 57% of the data points have only one bounding box, followed by 19.1% with 2 bounding boxes \n"}}