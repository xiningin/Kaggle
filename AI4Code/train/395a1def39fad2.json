{"cell_type":{"568f96de":"code","b200275a":"code","df952a7d":"code","1501ece6":"code","a500a8b8":"code","2f013c9c":"code","dbd96d2d":"code","4ff155e9":"code","9e120149":"code","fdae2252":"code","72030c0f":"code","b976b2d4":"code","6001408f":"code","16a29fd3":"code","1c3539b8":"code","922ecbbd":"code","30268386":"code","e64587bf":"markdown"},"source":{"568f96de":"import os\nimport pandas as pd\nimport numpy as np\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.resnet50 import ResNet50\nfrom keras import models, Model\nfrom keras.layers import Dense, Flatten\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau, EarlyStopping, TensorBoard\nfrom keras.optimizers import Adam","b200275a":"df = pd.read_csv(\"..\/input\/data\/Data_Entry_2017.csv\")\ndf.head()","df952a7d":"df.drop(columns=[\"Unnamed: 11\"], inplace=True)\ndf[\"Targets\"] = df[\"Finding Labels\"].apply(lambda x: x.split(\"|\"))\ndf.head()","1501ece6":"labels = [\"Atelectasis\", \"Consolidation\", \"Infiltration\", \"Pneumothorax\", \"Edema\", \"Emphysema\", \"Fibrosis\", \"Effusion\", \"Pneumonia\",\n\"Pleural_thickening\", \"Cardiomegaly\", \"Nodule Mass\", \"Hernia\", \"No Finding\"]\nprint(labels)","a500a8b8":"df.to_csv(\"NIH_complete.csv\", index=False)","2f013c9c":"img_dir = \"..\/input\/data\/images_005\/images\"","dbd96d2d":"df2 = df.copy()\nfor i, img in enumerate(df2):\n    if img not in os.listdir(img_dir):\n        df2.drop(i, inplace=True)\nprint(\"Done\")","4ff155e9":"input_height, input_width, input_channels = 224, 224, 3\nnum_classes = 14","9e120149":"train_datagen = ImageDataGenerator( width_shift_range=0.25, # horizontal shift\n        height_shift_range=0.25, # vertical shift\n        rescale=1.\/255)\n\nvalid_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_gen = train_datagen.flow_from_dataframe(\n    df2,\n    directory=img_dir,\n    x_col='Image Index',\n    y_col=\"Targets\", #[\"Atelectasis\", \"Consolidation\", \"Infiltration\", \"Pneumothorax\", \"Edema\", \"Emphysema\", \"Fibrosis\", \"Effusion\", \"Pneumonia\",\"Pleural_thickening\", \"Cardiomegaly\", \"Nodule Mass\", \"Hernia\", \"No Finding\"],\n    weight_col=None,\n    target_size=(input_height, input_width),\n    color_mode='rgb',\n    classes=labels,\n    class_mode='categorical',\n    batch_size=8,\n    shuffle=True,\n    seed=None,\n    save_to_dir=None,\n    save_prefix='',\n    save_format='png',\n    subset=\"training\",\n    interpolation='nearest',\n    validate_filenames=True,)\n\nvalid_gen = valid_datagen.flow_from_dataframe(\n    df2,\n    directory=img_dir,\n    x_col='Image Index',\n    y_col=\"Targets\", #[\"Atelectasis\", \"Consolidation\", \"Infiltration\", \"Pneumothorax\", \"Edema\", \"Emphysema\", \"Fibrosis\", \"Effusion\", \"Pneumonia\",\"Pleural_thickening\", \"Cardiomegaly\", \"Nodule Mass\", \"Hernia\", \"No Finding\"],\n    weight_col=None,\n    target_size=(input_height, input_width),\n    color_mode='rgb',\n    classes=labels,\n    class_mode='categorical',\n    batch_size=8,\n    shuffle=True,\n    seed=None,\n    save_to_dir=None,\n    save_prefix='',\n    save_format='png',\n    subset=\"validation\",\n    interpolation='nearest',\n    validate_filenames=True,)","fdae2252":"model = ResNet50(weights='imagenet')\nmodel.summary()","72030c0f":"restnet = ResNet50(include_top=True, weights='imagenet', input_shape=(input_height, input_width, input_channels))\noutput = restnet.layers[-1].output\noutput = Flatten()(output)\noutput = Dense((num_classes+2)*2, activation=\"relu\")(output)\noutput = Dense(num_classes, activation=\"sigmoid\")(output)\nmodel = Model(inputs=restnet.input, outputs=output)\nadam = Adam(learning_rate=1e-04, epsilon=1e-07,decay=1e-12)\nmodel.compile(optimizer=adam, loss='binary_crossentropy', metrics=['accuracy'])\nmodel.summary()","b976b2d4":"model_name = \"NIH_V02\"","6001408f":"model_checkpoint = ModelCheckpoint(\"{}.hdf5\".format(model_name), monitor='val_loss', verbose=1,  save_best_only=True, \n                                   save_weights_only=False)\nreduce_lr = ReduceLROnPlateau(monitor='val_loss',  factor=0.2, patience=5, verbose=1, mode='auto', min_delta=1e-4,\n                              cooldown=0,  min_lr=1e-14)\nearly_stop = EarlyStopping(monitor='val_loss', min_delta=1e-8, patience=5, mode='auto', verbose=1, restore_best_weights=True)\n\ntensorboard = TensorBoard(log_dir='.\/Graph', histogram_freq=0,  \n          write_graph=True, write_images=False)\n\nmodel.fit_generator(train_gen,\n    steps_per_epoch=2000,\n    epochs=50,\n    verbose=1,\n    callbacks=[model_checkpoint, reduce_lr, early_stop, tensorboard],\n    validation_data=valid_gen,\n    validation_steps=200,\n    validation_freq=1,\n    class_weight=None,\n    max_queue_size=10,\n    workers=1,\n    use_multiprocessing=True,\n    shuffle=True,\n    initial_epoch=0,)\n\nmodel.save_weights(\"{}.weights\".format(model_name))","16a29fd3":"import cv2","1c3539b8":"label_map = (train_gen.class_indices)","922ecbbd":"file = os.path.join(img_dir, df[\"Image Index\"].iloc[0])\nprint(\"GT:\", df[\"Finding Labels\"].iloc[0])","30268386":"img = cv2.imread(file)\nx = cv2.resize(img, (input_height, input_width))\nx = np.reshape(x, (1,)+x.shape)\nres = model.predict(x)\nprint(\"Label Mapping:\", label_map)\nprint(\"Predicted Classes:\", res)","e64587bf":"## Testing"}}