{"cell_type":{"e95424fe":"code","f163399c":"code","d5c28988":"code","843a2314":"code","b4d21ebc":"code","7fca1ff9":"code","efc4ae55":"code","c3c5a1d3":"code","47b01ebd":"code","ecb07999":"code","2864a95a":"code","ed4aeb7c":"code","422ec274":"code","cf4091f8":"code","05a43a25":"code","48814923":"code","284969e0":"code","6efe6645":"code","e97e10f5":"code","ebbb003d":"code","ef9aa590":"code","54b7c10f":"code","8e2f33f2":"code","73362931":"code","2ac9cccd":"code","c3774f32":"code","61e426d3":"code","5c6a0928":"code","fb15df6e":"code","8a00f5f5":"code","b15fc755":"code","d56e7ad5":"code","5ef72ba8":"code","7c7d0ff4":"code","637a57d2":"code","a113fcfc":"code","796be3fe":"code","81b38f7a":"code","4a47d707":"code","78b730a7":"code","6d9d332b":"code","1c8890bb":"code","98962a7a":"code","cc6e41cb":"code","a71478c4":"code","21d28133":"code","a93468a0":"code","db43d88b":"code","07558833":"code","dfec7812":"code","62dcfd6c":"code","14d19296":"code","9aee0770":"code","d220ea8d":"code","96df0ffe":"code","9d6aa595":"code","a7ae0d4f":"code","11f55986":"code","3e39b238":"code","02045b56":"code","1828c43f":"code","f39a6a11":"code","0b510a50":"code","76be9648":"code","6272bf58":"code","f0815b7d":"code","40204eed":"code","bec3ec54":"code","4c367e80":"code","bd2df1e2":"markdown","a09cf9b8":"markdown","02eb34cc":"markdown","5da8e914":"markdown","6fe87129":"markdown","e791cf48":"markdown","d444dc61":"markdown","4009e663":"markdown","e0d367cf":"markdown","4aba95fc":"markdown","0ed50e85":"markdown","3bd86a10":"markdown","8034b7c8":"markdown","553068a0":"markdown","cfb72e7f":"markdown","b30b98a8":"markdown","b0c13b4c":"markdown","c2a522b9":"markdown","a87bb134":"markdown","92b0723f":"markdown","8f465918":"markdown","03982acc":"markdown","ef37bfbe":"markdown","26f8c2f8":"markdown","35e03971":"markdown"},"source":{"e95424fe":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport cufflinks as cf\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\ninit_notebook_mode(connected=True)\ncf.go_offline()\n%matplotlib inline","f163399c":"print( __version__)","d5c28988":"dataset = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndataset.head()","843a2314":"sns.heatmap(dataset.isnull())","b4d21ebc":"dataset.describe()","7fca1ff9":"dataset['DEATH_EVENT'].value_counts()","efc4ae55":"X1 = dataset.iloc[:,:-1]\ny1 = dataset.iloc[:,-1]","c3c5a1d3":"#feature selction\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nfit_best_features = SelectKBest(score_func=chi2,k=10)\nbest_features=fit_best_features.fit(X1,y1)\n\n","47b01ebd":"dataset_scores = pd.DataFrame(best_features.scores_)\ndataset_cols = pd.DataFrame(X1.columns)","ecb07999":"featurescores = pd.concat([dataset_cols,dataset_scores],axis=1)\nfeaturescores.columns=['column','scores']","2864a95a":"featurescores","ed4aeb7c":"print(featurescores.nlargest(10,'scores'))","422ec274":"from sklearn.ensemble import ExtraTreesClassifier\nee = ExtraTreesClassifier()\nee.fit(X1,y1)","cf4091f8":"fea_imp=pd.Series(ee.feature_importances_,index=X1.columns)\nfea_imp.nlargest(10).plot(kind='barh')\n","05a43a25":"X2 = dataset.iloc[:,:-1]\ny2 = dataset.iloc[:,-1]","48814923":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nX2=ss.fit_transform(X2)\n","284969e0":"from sklearn.feature_selection import VarianceThreshold\nfeature_high_variance = VarianceThreshold(threshold=(0.8*(1-0.8)))\nfalls=feature_high_variance.fit(X2)","6efe6645":"dataset_scores1 = pd.DataFrame(falls.variances_)\ndat1 = pd.DataFrame(X1.columns)\n","e97e10f5":"high_variance = pd.concat([dataset_scores1,dat1],axis=1)\nhigh_variance.columns=['variance','cols']","ebbb003d":"high_variance","ef9aa590":"high_variance[high_variance['variance']>0.8]","54b7c10f":"\nsns.distplot(dataset['age'],bins=30)","8e2f33f2":"sns.boxplot(x='DEATH_EVENT',y='age',data=dataset)","73362931":"ds = dataset['DEATH_EVENT'].value_counts().reset_index()\nds.columns = ['DEATH_EVENT', 'count']\nfig = px.pie(\n    ds, \n    values='count', \n    names='DEATH_EVENT',\n    title='DEATH_EVENT bar chart', \n    width=500, \n    height=500\n)\nfig.show()","2ac9cccd":"dataset.iplot(kind='bar',x='DEATH_EVENT',y='platelets')\n#dataset.count().iplot(kind='bar')","c3774f32":"dataset.iplot(kind='bar',x='DEATH_EVENT',y='time')\n#sns.barplot(x='diabetes',y='DEATH_EVENT',data=dataset)","61e426d3":"sns.violinplot(x='DEATH_EVENT',y='serum_creatinine',data=dataset)","5c6a0928":"dataset.iplot(kind='scatter',x='DEATH_EVENT',y='ejection_fraction',mode='markers')","fb15df6e":"dataset.iplot(kind='bar',x='DEATH_EVENT',y='ejection_fraction')","8a00f5f5":"sns.barplot(x='DEATH_EVENT',y='creatinine_phosphokinase',data=dataset)#yes","b15fc755":"sns.barplot(x='DEATH_EVENT',y='serum_sodium',data=dataset)#no","d56e7ad5":"sns.violinplot(x='DEATH_EVENT',y='serum_sodium',data=dataset)","5ef72ba8":"sns.barplot(x='DEATH_EVENT',y='anaemia',data=dataset)","7c7d0ff4":"dataset.iplot(kind='hist')","637a57d2":"dataset_corr = dataset.corr()","a113fcfc":"fig, ax=plt.subplots(figsize=(15,10))\nsns.heatmap(dataset_corr,annot=True)","796be3fe":"dataset.columns","81b38f7a":"X = dataset[['time','ejection_fraction','serum_creatinine']]\ny = dataset['DEATH_EVENT']","4a47d707":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=101)","78b730a7":"from sklearn.preprocessing import StandardScaler\nss = StandardScaler()\nX_train=ss.fit_transform(X_train)\nX_test=ss.transform(X_test)","6d9d332b":"from sklearn.linear_model import LogisticRegression\nlogistic_model = LogisticRegression(C=0.3,penalty='l1',solver='liblinear')\nlogistic_model.fit(X_train,y_train)","1c8890bb":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator=logistic_model, X=X_train ,y=y_train,cv=10)\nprint(\"accuracy is {:.2f} %\".format(accuracies.mean()*100))\nprint(\"std is {:.2f} %\".format(accuracies.std()*100))","98962a7a":"\nfrom sklearn.metrics import accuracy_score\npre = logistic_model.predict(X_test)","cc6e41cb":"Logistic_acc=accuracy_score(pre,y_test)\nprint(accuracy_score(pre,y_test))","a71478c4":"from sklearn.neighbors import KNeighborsClassifier\nscore=[]\n\nfor i in range(1,10):\n    \n    \n    knn=KNeighborsClassifier(n_neighbors=i,metric='minkowski',p=2)\n    knn.fit(X_train,y_train)","21d28133":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator=knn, X=X_train ,y=y_train,cv=10)\nprint(\"accuracy is {:.2f} %\".format(accuracies.mean()*100))\nprint(\"std is {:.2f} %\".format(accuracies.std()*100))","a93468a0":"pre1 = knn.predict(X_test)","db43d88b":"knn_acc=accuracy_score(pre1,y_test)\nprint(accuracy_score(pre1,y_test))","07558833":"from sklearn.svm import SVC\nsvm_model=SVC(kernel='rbf',C=0.3,gamma='scale')\nsvm_model.fit(X_train,y_train)","dfec7812":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator=svm_model, X=X_train ,y=y_train,cv=10)\nprint(\"accuracy is {:.2f} %\".format(accuracies.mean()*100))\nprint(\"std is {:.2f} %\".format(accuracies.std()*100))","62dcfd6c":"pre2 = svm_model.predict(X_test)\n","14d19296":"svm_rbf_acc=accuracy_score(pre2,y_test)\nprint(accuracy_score(pre2,y_test))","9aee0770":"from sklearn.tree import DecisionTreeClassifier\ndecision_model=DecisionTreeClassifier(criterion='entropy',max_leaf_nodes=3,random_state=30)\ndecision_model.fit(X_train,y_train)","d220ea8d":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator=decision_model, X=X_train ,y=y_train,cv=10)\nprint(\"accuracy is {:.2f} %\".format(accuracies.mean()*100))\nprint(\"std is {:.2f} %\".format(accuracies.std()*100))","96df0ffe":"pre3 = decision_model.predict(X_test)\n","9d6aa595":"decision_acc=accuracy_score(pre3,y_test)\nprint(accuracy_score(pre3,y_test))","a7ae0d4f":"from sklearn.ensemble import RandomForestClassifier\nrandomforest_model=RandomForestClassifier(n_estimators=55,criterion='entropy',random_state=1,max_features=0.5, max_depth=15)\nrandomforest_model.fit(X_train,y_train)","11f55986":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator=randomforest_model, X=X_train ,y=y_train,cv=10)\nprint(\"accuracy is {:.2f} %\".format(accuracies.mean()*100))\nprint(\"std is {:.2f} %\".format(accuracies.std()*100))","3e39b238":"pre4 = randomforest_model.predict(X_test)\n","02045b56":"random_acc=accuracy_score(pre4,y_test)\nprint(accuracy_score(pre4,y_test))","1828c43f":"from sklearn.svm import SVC\nsvmlinear_model=SVC(kernel='linear',C=0.1)\nsvmlinear_model.fit(X_train,y_train)","f39a6a11":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator=svmlinear_model, X=X_train ,y=y_train,cv=10)\nprint(\"accuracy is {:.2f} %\".format(accuracies.mean()*100))\nprint(\"std is {:.2f} %\".format(accuracies.std()*100))","0b510a50":"pre5 = svmlinear_model.predict(X_test)\n","76be9648":"svm_linear_acc=accuracy_score(pre5,y_test)\nprint(accuracy_score(pre5,y_test))\n","6272bf58":"from xgboost import XGBClassifier\nxgb_model = XGBClassifier()\nxgb_model.fit(X_train,y_train)","f0815b7d":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator=xgb_model, X=X_train ,y=y_train,cv=10)\nprint(\"accuracy is {:.2f} %\".format(accuracies.mean()*100))\nprint(\"std is {:.2f} %\".format(accuracies.std()*100))","40204eed":"pre5 = xgb_model.predict(X_test)\n","bec3ec54":"xgb_acc=accuracy_score(pre5,y_test)\nprint(accuracy_score(pre5,y_test))","4c367e80":"print(\"Logistic Accuracy:\",Logistic_acc)\nprint(\"knn Accuracy:\",knn_acc)\nprint(\"svm rbf model Accuracy :\",svm_rbf_acc)\nprint(\"svm linear model Accuracy:\",svm_linear_acc)\nprint(\"Decision tress Accuracy :\",decision_acc)\nprint(\"Random_forest _Accuracy:\",random_acc)\nprint(\"Xgb_boosdt_Accuracy:\",xgb_acc)","bd2df1e2":"> time","a09cf9b8":"**Dividing Independent and dependent variables.**","02eb34cc":"# Importing necessary libraries","5da8e914":"# EDA","6fe87129":"# Building Models","e791cf48":"> Overview of all features","d444dc61":"> Age","4009e663":"**Splitting dataset**","e0d367cf":"> DEATH EVENT ","4aba95fc":"# Overview of all models's accuracy","0ed50e85":"> creatinine phosphokinase","3bd86a10":"**Top 10 features scores**","8034b7c8":"# Feature selection","553068a0":"> ejection fraction","cfb72e7f":"**Correlation **\n> By looking into the correlation heatmap , we need to choose the features that is highly correlated with the dependent variable(DEATH_EVENT)and less correlation with other features.","b30b98a8":"**Choose important feature by looking into the plot below**","b0c13b4c":"**Heart failure prediction dataset**","c2a522b9":"> serum cretinine","a87bb134":"# Plz upvote \n**This will keep me motivated**","92b0723f":"# Task : Heart Rate Prediction\nHeart failure is a serious condition and number one cause of death in recent years.By building Machine Learning model we can predict the death events in advance ,so that necessary treatment , precautions can be taken.","8f465918":"> anaemia","03982acc":"**Checking whether the dataset has null values.**","ef37bfbe":"> Platelets","26f8c2f8":"> serum sodium","35e03971":"**The best model for this dataset(heart failure prediction) is knn model with 95% Accuracy**"}}