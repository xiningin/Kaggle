{"cell_type":{"96135880":"code","0d116a46":"code","22ec1e4d":"code","f82292f1":"code","252a81a5":"code","a75e0e82":"code","6d974e05":"code","65d976ce":"code","50028e5f":"code","aa5dc2ae":"code","2468edd5":"code","73dabb24":"code","bb495b5c":"code","9c3d6b34":"code","a4787595":"code","a7fd704b":"code","85cb0ca1":"code","305243bd":"code","7940f17a":"code","f5f2e162":"code","83e412c3":"code","b29eaf5d":"code","421c7be7":"code","8a8f9964":"code","bdd78489":"code","fb63d0e9":"code","0d23e502":"code","8fc65936":"code","ec297a4e":"code","aadce3b0":"code","07b66b2c":"code","6331ec35":"code","f48178ff":"code","557dc612":"code","c1726e88":"code","64e2aafb":"code","35edc785":"code","bf662c5e":"code","bedd8d50":"code","291001e8":"code","960ed00a":"code","3f31c8c0":"code","7310926c":"code","97d1a23f":"code","addb91c6":"code","007c3aae":"code","0eb909ef":"code","35816f18":"code","9186242d":"code","05a14f6c":"code","5c09b3c5":"code","38523dfe":"code","5334e1cb":"code","7d521b57":"code","a67b1879":"code","b78b033c":"code","e227ef78":"code","936eaa6f":"code","ea94c1d6":"markdown","3b7fda12":"markdown","d1673a8d":"markdown","34c640a1":"markdown","dc31b6f3":"markdown","1b11a11b":"markdown","acb5def5":"markdown","420cfa50":"markdown","c26e3461":"markdown","5fc94d8b":"markdown","6ddc1363":"markdown","b555c568":"markdown","386556ed":"markdown","136b0980":"markdown"},"source":{"96135880":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0d116a46":"data = pd.read_csv(\"\/kaggle\/input\/insurance\/insurance.csv\")","22ec1e4d":"data.head()","f82292f1":"data.columns","252a81a5":"data.describe()","a75e0e82":"data.info()","6d974e05":"data[\"sex\"] = np.where(data[\"sex\"].isin([\"male\"]),1,0)\ndata[\"smoker\"] = np.where(data[\"smoker\"].isin([\"yes\"]),1,0)","65d976ce":"data[\"sex\"] = pd.Categorical(data[\"sex\"])\ndata[\"smoker\"] = pd.Categorical(data[\"smoker\"])","50028e5f":"data.head()","aa5dc2ae":"data.info()","2468edd5":"def bar_plot(variable):\n    \"\"\"\n    input: variable ex: \"Sex\"\n    output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = data[variable]\n    #count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel(\"Count\")\n    plt.title(variable)\n    plt.show()\n    \n    print(\"{}:\\n{}\".format(variable,varValue))","73dabb24":"category1 = [\"sex\",\"smoker\",\"region\"]\n\nfor i in category1:\n    bar_plot(i)","bb495b5c":"def hist_plot(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(data[variable],bins = 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Count\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()\n    ","9c3d6b34":"category2 = [\"age\",\"children\",\"bmi\",\"charges\"]\nfor i in category2:\n    hist_plot(i)","a4787595":"# Sex - Charges\ndata.groupby(\"sex\")[\"charges\"].agg(\"mean\").reset_index()","a7fd704b":"# Sex - bmi\ndata.groupby(\"sex\")[\"bmi\"].agg(\"mean\").reset_index()","85cb0ca1":"# region - charges\ndata.groupby(\"region\")[\"charges\"].agg(\"mean\").reset_index()","305243bd":"# children - charges\ndata.groupby(\"children\")[\"charges\"].agg(\"mean\").reset_index()","7940f17a":"# smoker - charges\ndata.groupby(\"smoker\")[\"charges\"].agg(\"mean\").reset_index()","f5f2e162":"def detect_outliers(data,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(data[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(data[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = data[(data[c] < Q1 - outlier_step) | (data[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","83e412c3":"data.loc[detect_outliers(data,[\"age\",\"charges\",\"bmi\",\"children\"])]","b29eaf5d":"data.isnull().any()","421c7be7":"sns.heatmap(data.corr(),annot = True,fmt=\".2f\");","8a8f9964":"# Sex - Charges\nsns.barplot(data.sex,data.charges)\nplt.show()","bdd78489":"# Sex - bmi\nsns.barplot(data.sex,data.bmi)\nplt.show()","fb63d0e9":"# region - charges\nsns.barplot(x =\"region\", y =\"charges\",data = data)\nplt.show()","0d23e502":"# smoker - charges\nsns.barplot(x=\"smoker\",y=\"charges\",data=data)\nplt.show()","8fc65936":"dms = pd.get_dummies(data[\"region\"])\ndms","ec297a4e":"#train-test split\nfrom sklearn.model_selection import train_test_split,cross_val_score,cross_val_predict\nX = data.drop([\"charges\",\"region\"],axis=1)\nX = pd.concat([X,dms],axis = 1)\ny = data[[\"charges\"]]","aadce3b0":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.20,random_state = 42)","07b66b2c":"X_train.shape","6331ec35":"X_test.shape","f48178ff":"y_train.shape","557dc612":"y_test.shape","c1726e88":"training = data.copy()\ntraining.head()","64e2aafb":"import statsmodels.api as sm\nlm = sm.OLS(y_train,X_train)","35edc785":"model = lm.fit()","bf662c5e":"model.summary()","bedd8d50":"from sklearn.linear_model import LinearRegression","291001e8":"reg = LinearRegression()\nmodel = reg.fit(X_train,y_train)","960ed00a":"model.intercept_","3f31c8c0":"model.coef_","7310926c":"y_pred = model.predict(X_train)","97d1a23f":"y_pred[0:10]","addb91c6":"from sklearn.metrics import mean_squared_error, r2_score","007c3aae":"# e\u011fitim seti hatam\u0131z\nrmse = np.sqrt(mean_squared_error(y_train,model.predict(X_train)))\nrmse","0eb909ef":"rmse = np.sqrt(mean_squared_error(y_test,model.predict(X_test)))\nrmse","35816f18":"X","9186242d":"y","05a14f6c":"X_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.20,random_state = 144)","5c09b3c5":"lm = LinearRegression()\nmodel = lm.fit(X_train,y_train)","38523dfe":"np.sqrt(mean_squared_error(y_train,model.predict(X_train)))","5334e1cb":"np.sqrt(mean_squared_error(y_test,model.predict(X_test)))","7d521b57":"model.score(X_train, y_train)","a67b1879":"cross_val_score(model, X, y, cv =10,scoring=\"r2\").mean()","b78b033c":"cross_val_score(model, X_train, y_train, cv=10, scoring=\"r2\").mean()","e227ef78":"# gercek egitim hatam\nnp.sqrt(-cross_val_score(model, \n                X_train, \n                y_train, \n                cv = 10, \n                scoring=\"neg_mean_squared_error\")).mean()","936eaa6f":"np.sqrt(-cross_val_score(model, \n                X_test, \n                y_test, \n                cv = 10, \n                scoring=\"neg_mean_squared_error\")).mean()","ea94c1d6":"# Statsmodel ile model kurma","3b7fda12":"<a id = \"10\"><\/a><br>\n# Visualization","d1673a8d":"# Model Tuning(Model Do\u011frulama)","34c640a1":"<a id=\"1\"><\/a><br>\n## 1.Load and Check Data","dc31b6f3":"<a id=\"7\"><\/a><br>\n# Outlier Detection","1b11a11b":"<a id = \"5\"><\/a><br>\n## Numerical Variable","acb5def5":"# Scikitlearn ile model Kurma","420cfa50":"* float64(2):bmi,charges\n* int64(5): age,children\n* object(5):region\n* category : sex,smoker","c26e3461":"## Cross validation","5fc94d8b":"<a id = \"3\"><\/a><br>\n# Univariate Variable Analysis\n\n*     Categorical Variable: sex,smoker and region\n    \n*     Numerical Variable:age,children,bmi and charges","6ddc1363":"<a id =\"2\"><\/a><br>\n# Variable Description\n\n* age: age of primary beneficiary\n\n* sex: insurance contractor gender, female, male\n\n* bmi: Body mass index, providing an understanding of body, weights that are relatively high or low relative to height,\nobjective index of body weight (kg \/ m ^ 2) using the ratio of height to weight, ideally 18.5 to 24.9\n\n* children: Number of children covered by health insurance \/ Number of dependents\n\n* smoker: Smoking\n\n* region: the beneficiary's residential area in the US, northeast, southeast, southwest, northwest.\n\n* charges: Individual medical costs billed by health insurance","b555c568":" <a id=\"6\"><\/a><br>\n# Basic Data Analysis\n* Sex - Charges\n* Sex - bmi\n* region - charges\n* children - charges \n* smoker - charges","386556ed":"<a id=\"8\"><\/a><br>\n# Missing Value\n* Find Missing Value","136b0980":"# Tahmin"}}