{"cell_type":{"abb8ab6d":"code","ff74aa11":"code","02316e5d":"code","a8417900":"code","1d2ac4fb":"code","68a45388":"code","84b2590f":"code","79281180":"code","7e506d3f":"code","425ce9fe":"code","01ac8824":"code","6cd349ff":"code","0bbaa367":"code","244bb5ef":"code","1fb257cc":"code","c045ef17":"code","120d8013":"code","64f3154a":"code","85f26c17":"code","e0ee3a54":"code","5ff12743":"code","82af135c":"code","fce6616d":"code","b074ee2d":"code","9e576bec":"code","0606925f":"code","f300d498":"code","0c8bf034":"code","74e70dec":"code","dc6cd266":"code","e956a6cb":"code","0dde2f55":"code","33b61ad9":"code","cb6be560":"code","e1c8c671":"code","f8433a67":"code","3444d23c":"code","2df69ee8":"code","ae6ac460":"code","a6ca6c87":"code","ee3d51b5":"code","aa651d49":"code","7431fa5c":"code","6f6b34cf":"code","db61dd73":"code","660eb038":"code","ba1873ef":"code","55d0533e":"code","af51b467":"code","7e58cdc8":"code","41499c9f":"code","a8814d07":"code","28c18612":"code","18153f68":"code","2fdf0396":"code","1b1c87e1":"code","98aedace":"code","117a08d0":"code","57427671":"code","bede99fa":"code","803dbe79":"code","a66a78ef":"markdown","75265206":"markdown","6b03bc0d":"markdown","79a42023":"markdown","83994566":"markdown","754e0c7c":"markdown","846191b6":"markdown","54d318b7":"markdown","eb42f31d":"markdown","0d9f8479":"markdown","bd11cbf4":"markdown","dae1953c":"markdown","7d684d80":"markdown"},"source":{"abb8ab6d":"# Importing the Libraries\nimport pandas as pd\nimport numpy as np","ff74aa11":"# Importing the dataset\ndf = pd.read_csv(\"..\/input\/automobile-dataset\/Automobile_data.csv\")\ndf.head()","02316e5d":"# Printing the dataset\nprint(df)","a8417900":"# Checking for the information of the dataset\ndf.info()","1d2ac4fb":"# Replacing \"?\" in the dataset to NaN\ndf.replace(\"?\", np.nan, inplace = True)\ndf.head()","68a45388":"# Converting the missing observations to boolean values\nmissing_data = df.isnull()\nmissing_data.head()","84b2590f":"# Listing and counting of columns and their missing data\nfor column in missing_data.columns.values.tolist():\n    print(column)\n    print (missing_data[column].value_counts())\n    print(\"\")  ","79281180":"# Calculating the mean value for the \"normalized-losses\" attribute\navg_norm_loss = df[\"normalized-losses\"].astype(\"float\").mean(axis=0)\nprint(\"Average of normalized-losses:\", avg_norm_loss)","7e506d3f":"# # Replacing \"NaN\" with mean value in \"nomalized-losses\" attribute \ndf[\"normalized-losses\"].replace(np.nan, avg_norm_loss, inplace=True)\ndf.head()","425ce9fe":"# Calculating the mean value for the \"bore\" attribute\navg_bore = df[\"bore\"].astype(\"float\").mean(axis=0)\nprint(\"Average of bore:\", avg_bore)","01ac8824":"# Replacing \"NaN\" with mean value in \"bore\" attribute\ndf[\"bore\"].replace(np.nan, avg_bore, inplace=True)","6cd349ff":"# Calculating the mean value for the \"stroke\" attribute\navg_stroke = df[\"stroke\"].astype(\"float\").mean(axis=0)\nprint(\"Average of stroke:\", avg_stroke)","0bbaa367":"# Replacing \"NaN\" with mean value in \"stroke\" attribute\ndf[\"stroke\"].replace(np.nan, avg_stroke, inplace=True)","244bb5ef":"# Calculating the mean value for the \"horsepower\" attribute\navg_horsepower = df[\"horsepower\"].astype(\"float\").mean(axis=0)\nprint(\"Average of horsepower:\", avg_horsepower)","1fb257cc":"# Replacing \"NaN\" with mean value in \"horsepower\" attribute\ndf[\"horsepower\"].replace(np.nan, avg_horsepower, inplace=True)","c045ef17":"#  Calculating the mean value for the \"peak-rpm\" attribute\navg_peak_rpm = df[\"peak-rpm\"].astype(\"float\").mean(axis=0)\nprint(\"Average of peak-rpm:\", avg_peak_rpm)","120d8013":"# Replacing \"NaN\" with mean value in \"peak-rpm\" attribute\ndf[\"peak-rpm\"].replace(np.nan, avg_peak_rpm, inplace=True)","64f3154a":"# Dropping every row with NaN in \"price\" attribute\ndf.dropna(subset=[\"price\"], axis=0, inplace=True)\n\n# Reset index, because we droped four rows\ndf.reset_index(drop=True, inplace=True)","85f26c17":"# Counting the number of categories of the values in \"num-of doors\" attribute\ndf['num-of-doors'].value_counts()","e0ee3a54":"# Determining the most frequent number of cylinders in the automobile \ndf['num-of-doors'].value_counts().idxmax()","5ff12743":"# Replacing \"NaN\" with \"four\" in \"num-of-doors\" attribute\ndf[\"num-of-doors\"].replace(np.nan, \"four\", inplace=True)","82af135c":"# Replacing \"two\" with 2 in \"num-of-doors\" attribute\ndf[\"num-of-doors\"].replace(\"two\", 2, inplace=True)\ndf.head()","fce6616d":"# Replacing \"four\" with 4 in \"num-of-doors\" attribute\ndf[\"num-of-doors\"].replace(\"four\", 4, inplace=True)\ndf.head()","b074ee2d":"# Counting the number of categories of the values in \"num-of doors\" attribute\ndf['num-of-cylinders'].value_counts()","9e576bec":"# Determining the most frequent number of cylinders in the automobile \ndf['num-of-cylinders'].value_counts().idxmax()","0606925f":"# Replacing \"NaN\" with \"four\" in \"num-of-cylinders\" attribute\ndf[\"num-of-cylinders\"].replace(np.nan, \"four\", inplace=True)","f300d498":"# Replacing \"four\" with 4 in \"num-of-doors\" attribute\ndf[\"num-of-cylinders\"].replace(\"four\", 4, inplace=True)","0c8bf034":"# Replacing \"four\" with 6 in \"num-of-doors\" attribute\ndf[\"num-of-cylinders\"].replace(\"six\", 6, inplace=True)","74e70dec":"# Replacing \"four\" with 5 in \"num-of-doors\" attribute\ndf[\"num-of-cylinders\"].replace(\"five\", 5, inplace=True)","dc6cd266":"# Replacing \"four\" with 2 in \"num-of-doors\" attribute\ndf[\"num-of-cylinders\"].replace(\"two\", 2, inplace=True)","e956a6cb":"# Replacing \"four\" with 8 in \"num-of-doors\" attribute\ndf[\"num-of-cylinders\"].replace(\"eight\", 8, inplace=True)","0dde2f55":"# Replacing \"four\" with 3 in \"num-of-doors\" attribute\ndf[\"num-of-cylinders\"].replace(\"three\", 3, inplace=True)","33b61ad9":"# Replacing \"four\" with twelve in \"num-of-doors\" attribute\ndf[\"num-of-cylinders\"].replace(\"twelve\", 12, inplace=True)\ndf.head()","cb6be560":"# Converting mpg to L\/100km by dividing 235 by mpg values\ndf['city-L\/100km'] = 235\/df[\"city-mpg\"]\ndf.head()","e1c8c671":"# Converting mpg to L\/100km as earlier stated\ndf[\"highway-L\/100km\"] = 235\/df[\"highway-mpg\"]\n\n# Renaming attribute name from \"highway-mpg\" to \"highway-L\/100km\"\ndf.rename(columns={'\"highway-mpg\"':'highway-L\/100km'}, inplace=True)\n\n# Confirming the attribute that was transformed\ndf.head()","f8433a67":"# Listing of the data types for each attributes\ndf.dtypes","3444d23c":"# Converting the data types to proper data format\ndf[[\"normalized-losses\"]] = df[[\"normalized-losses\"]].astype(\"float\")","2df69ee8":"df[[\"stroke\", \"bore\"]] = df[[\"stroke\",\"bore\"]].astype(\"float\")","ae6ac460":"df[[\"normalized-losses\"]] = df[[\"normalized-losses\"]].astype(\"float\")","a6ca6c87":"df[[\"horsepower\",\"peak-rpm\",\"price\"]] = df[[\"horsepower\",\"peak-rpm\",\"price\"]].astype(\"float\")","ee3d51b5":"df[[\"engine-size\",\"city-mpg\",\"highway-mpg\",\"curb-weight\"]] = df[[\"engine-size\",\"city-mpg\",\"highway-mpg\",\"curb-weight\"]].astype(\"float\")","aa651d49":"df[[\"num-of-doors\"]] = df[[\"num-of-doors\"]].astype(\"float\")","7431fa5c":"df[[\"num-of-cylinders\"]] = df[[\"num-of-cylinders\"]].astype(\"float\")","6f6b34cf":"# Checking the converted data types format\ndf.dtypes","db61dd73":"# Finding the correlation among the attributes of the dataset\ndf.corr()","660eb038":"# Checking the information of the cleaned dataset\ndf.info()","ba1873ef":"# Defining the x variable\nx=df.drop([\"make\", \"aspiration\",\"fuel-type\",\"aspiration\",\"body-style\",\"drive-wheels\",\"engine-location\",\"engine-type\",\"fuel-system\",\"city-mpg\",\"highway-mpg\",\"price\"],axis=1)\nprint(x)","55d0533e":"# Defining the y variable\ny=df[\"price\"]\nprint(y)","af51b467":"# Splitting the dataset into training set and test set\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.25, random_state = 15)","7e58cdc8":"# Importing linear-model from scikit-learn \nfrom sklearn.linear_model import LinearRegression","41499c9f":"# Creating a linear regression object\nml= LinearRegression()","a8814d07":"# Fitting the linear regression model to the training set\nml.fit(x_train,y_train)","28c18612":"# Model prediction of the test set\ny_pred = ml.predict(x_test)\nprint(y_pred)","18153f68":"# Modeling the prediction of the sample of the dataset\nml.predict([[3,122.0,2.0,88.6,168.8,64.1,48.8,2548.0,4.0,130.0,3.47,2.68,9.0,111.0,5000.0,11.190476,8.703704]])","2fdf0396":"# Closeness of the regression line to the observation\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_pred)","1b1c87e1":"# Plotting the actual and the predicted value for the test set\nimport matplotlib.pyplot as plt\n%matplotlib inline \nplt.scatter(y_test,y_pred)\nplt.ylabel(\"Actual\")\nplt.xlabel(\"Predicted\")\nplt.title('Actual vs.Predicted')\nplt.show()","98aedace":"# Data frame of the difference between the actual and the predicted values\ny_pred_df=pd.DataFrame({\"Actual value\":y_test,\"Predicted value\":y_pred,\"Difference\":y_test-y_pred})\ny_pred_df[0:20]","117a08d0":"# Fitting the linear model of the dataset\nml.fit(x,y)","57427671":"# Obtaining Prediction\nyhat=ml.predict(x)","bede99fa":"# Calculating the intercept of the linear model\nml.intercept_","803dbe79":"# Calculating the coefficient of each predictors attributes\nml.coef_","a66a78ef":"## Evaluating the model","75265206":"##### This dataset consists of 26 columns and 205 rows","6b03bc0d":"## Conclusion","79a42023":"The certainty that the predicted and the actual price of the dataset will match is 90.17%. The r2 score estimated the accuracy of the process. The accuracy estmated by r2 score depends on the sample size of the test dataset and the number of the random state.\n\nThe distribution of the data points on the plots shows that the linear assumption on the model is correct. The data points tend to be close to one another on the visualization. The closeness of the data points in the model shows the level of accuracy of the predicted outcomes and the actual outcomes. The difference in the actual and the predicted outcomes might be due to some missing values in the dataset.\n\nCleaning intervention:\n\n(1) The missing numerical data type in some of the attributes was replaced by its average value (2) The missing categorical data type in some of the attributes was substituted by its most frequent. The numbers in the arrays are the coefficients of each predictors variables.\n\nAdding both the intercept and the product of each coefficient and its predictor variable will give the modeling equation of the price as the target variable.\nFeedbacks or comments are highly welcome and will be appreciated. \nThanks\n\n\n\n","83994566":"## Processing the dataset","754e0c7c":"##### The numbers in the arrays are the coefficients of each predictor variables","846191b6":"##### The dataset consists of 5 floats, 5 integers, and 16 objects also known as objects","54d318b7":"## Prediction on the test set","eb42f31d":"This dataset consist of data From 1985 Ward's Automotive Yearbook. Here are the sources of the dataset: \n(1) 1985 Model Import Car and Truck Specifications, 1985 Ward's Automotive Yearbook. \n(2) Personal Auto Manuals, Insurance Services Office, 160 Water Street, New York, NY 10038.\n(3) Insurance Collision Report, Insurance Institute for Highway Safety, Watergate 600, Washington, DC 20037","0d9f8479":"## Defining the dataset","bd11cbf4":"## Preparing the dataset","dae1953c":"## Building a linear model for the prediction of price","7d684d80":"## Training the model on the training set"}}