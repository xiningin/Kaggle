{"cell_type":{"cd1e70b4":"code","cfa0d455":"code","c46d7195":"code","25901f2e":"code","b2e8f499":"code","724bffe5":"code","e131a5d7":"code","eb356515":"code","26ed5401":"code","12c6478c":"code","9035c1ab":"code","2cb5e14a":"code","62680054":"code","849bd855":"code","ec695672":"code","3e8fd5ac":"code","4a8dea2d":"code","138f109b":"code","d09fef91":"code","538093a9":"code","5f070827":"code","348ff0d9":"code","8cae8474":"code","0ca6f0ce":"code","439d882f":"code","b2eea4a2":"markdown","36fe3178":"markdown","9a25358d":"markdown","e2671e20":"markdown","2808255a":"markdown","532b43cb":"markdown","afa24ff2":"markdown","d4824edd":"markdown","2707b488":"markdown","9490afb1":"markdown"},"source":{"cd1e70b4":"# import required libraries \nimport os\nimport pandas as pd\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications.vgg16 import VGG16\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.layers import Flatten,Dense,Dropout, Conv2D, MaxPooling2D\nfrom tensorflow.keras.models import Model,Sequential\nfrom tensorflow.keras.utils import to_categorical\n\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom sklearn.model_selection import train_test_split\n\nfrom tensorflow.keras.optimizers import Adam\n\nfrom sklearn.preprocessing import LabelEncoder","cfa0d455":"# Load train and test csv file for image class\ntrain = pd.read_csv('\/kaggle\/input\/identifythedanceform\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/identifythedanceform\/test.csv')\n\nprint(train.head())\nprint(test.head())\nprint(train['target'].value_counts())","c46d7195":"train.head()","25901f2e":"#Histogram chart for target\ntrain['target'].value_counts().plot(kind='bar')","b2e8f499":"base='\/kaggle\/input\/identifythedanceform'\ntrain_dir = os.path.join(str(base)+ '\/train\/')\ntest_dir = os.path.join(str(base)+'\/test\/')\n\ntrain_fnames = os.listdir(train_dir)\ntest_fnames = os.listdir(test_dir)\n\nprint(train_fnames[:9])\nprint(test_fnames[:9])","724bffe5":"# Images might be in different size. In this section I assigning all image at same size of 224*224\nimg_width = 224\nimg_height = 224","e131a5d7":"# this function reads image from the disk,train file for image and class maping and returning output in numpy array formate\n# for input and target data\ndef train_data_preparation(list_of_images, train, train_dir):\n    \"\"\"\n    Returns two arrays: \n        train_data is an array of resized images\n        train_label is an array of labels\n    \"\"\"\n    train_data = [] \n    train_label = [] \n    for image in list_of_images:\n        train_data.append(cv2.resize(cv2.imread(train_dir+image), (img_width,img_height), interpolation=cv2.INTER_CUBIC))\n        if image in list(train['Image']):\n            train_label.append(train.loc[train['Image'] == image, 'target'].values[0])\n    \n            \n    return train_data, train_label","eb356515":"def test_data_prepare(list_of_images, test_dir):\n    \"\"\"\n    Returns: \n        x is an array of resized images\n    \"\"\"\n    test_data = [] \n    \n    for image in list_of_images:\n        test_data.append(cv2.resize(cv2.imread(test_dir+image), (img_width,img_height), interpolation=cv2.INTER_CUBIC)) \n            \n    return test_data","26ed5401":"training_data, training_labels = train_data_preparation(train_fnames, train, train_dir)","12c6478c":"training_labels[:10]","9035c1ab":"training_data[1]","2cb5e14a":"\ndef show_batch(image_batch, label_batch):\n    plt.figure(figsize=(12,12))\n    for n in range(25):\n        ax = plt.subplot(5,5,n+1)\n        plt.imshow(image_batch[n])\n        plt.title(label_batch[n].title())\n        plt.axis('off')","62680054":"show_batch(training_data, training_labels)","849bd855":"testing_data = test_data_prepare(test_fnames, test_dir)","ec695672":"le =LabelEncoder()\ntraining_labels=le.fit_transform(training_labels)","3e8fd5ac":"training_labels[:10]","4a8dea2d":"X_train, X_val, y_train, y_val = train_test_split(training_data, training_labels, test_size=0.33, random_state=42)","138f109b":"train_datagenerator = ImageDataGenerator(\n        rescale=1. \/ 255,\n        featurewise_center=False,  \n        samplewise_center=False,  \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False,  \n        rotation_range=40,  \n        zoom_range = 0.20,  \n        width_shift_range=0.10,  \n        height_shift_range=0.10,  \n        horizontal_flip=True,  \n        vertical_flip=False) \n\n\nval_datagenerator=ImageDataGenerator(\n        rescale=1. \/ 255\n)\n\ntrain_datagenerator.fit(X_train)\nval_datagenerator.fit(X_val)\nX_train=np.array(X_train)\nX_val=np.array(X_val)","d09fef91":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_val.shape)\nprint(y_val.shape)","538093a9":"# traing using transfer learning\n\nvggmodel =VGG16(weights='imagenet', include_top=False, input_shape = (224, 224, 3),pooling='max')\n\n # Print the model summary\nvggmodel.summary()","5f070827":"vggmodel.trainable = False\nmodel = Sequential([\n  vggmodel, \n  Dense(1024, activation='relu'),\n  Dropout(0.15),\n  Dense(256, activation='relu'),\n  Dropout(0.15),\n  Dense(8, activation='softmax'),\n])","348ff0d9":"\nreduce_learning_rate = ReduceLROnPlateau(monitor='loss',\n                                         factor=0.1,\n                                         patience=2,\n                                         cooldown=2,\n                                         min_lr=0.00001,\n                                         verbose=1)\n\ncallbacks = [reduce_learning_rate]","8cae8474":"model.compile( optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nhistory =model.fit_generator(\n    train_datagenerator.flow(X_train, to_categorical(y_train,8), batch_size=16),\n    validation_data=val_datagenerator.flow(X_val, to_categorical(y_val,8), batch_size=16),\n    verbose=2,\n    epochs=30,\n    callbacks=callbacks\n)","0ca6f0ce":"history.history['val_accuracy']","439d882f":"import matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\n\nacc      = history.history['accuracy']\nval_acc  = history.history[ 'val_accuracy' ]\nloss     = history.history[ 'loss' ]\nval_loss = history.history['val_loss' ]\n\nepochs   = range(len(acc)) # Get number of epochs\n\n#------------------------------------------------\n# Plot training and validation accuracy per epoch\n#------------------------------------------------\nplt.plot( epochs, acc )\nplt.plot( epochs, val_acc )\nplt.title('Training and validation accuracy')\nplt.figure()\n\n#------------------------------------------------\n# Plot training and validation loss per epoch\n#------------------------------------------------\nplt.plot  ( epochs,     loss )\nplt.plot  ( epochs, val_loss )\nplt.title ('Training and validation loss'   )","b2eea4a2":"Using already trained model for our task and bulding 2 fully connected layer with *softmax* activation function","36fe3178":"In this section I am using ougumentation techniques to generate more data for given input","9a25358d":"In this file we are using Transfer Learning concept to classify Indian dance form. Transfer Learning used when we have very less training data. In image processing, training with less data does not give good results. So we are using Transfer Learning to get weights. This notebook use *tensorflow* *VGG16* and the purpose of this notbook to show how to use Transfer Learning for image classification","e2671e20":"In below code we are loading *VGG16* weights for image classifier using transfer learning","2808255a":"Below two section used for data preprocessing. We are reading image data using OpenCV and converting into numeric formate.","532b43cb":"Just showing loaded data for first 25 image","afa24ff2":"Basic Histrogram plot to check number of training data for each dance form.","d4824edd":"Using label incoder converting target class to numeric format","2707b488":"In the below code we are compiling and traing our image data","9490afb1":"# HackerEarth Deep Learning challenge: Identify the dance form\nThis International Dance Day, an event management company organized an evening of Indian classical dance performances to celebrate the rich, eloquent, and elegant art of dance. Post the event, the company planned to create a microsite to promote and raise awareness among the public about these dance forms. However, identifying them from images is a tough nut to crack.\nYou have been appointed as a Machine Learning Engineer for this project. Build an image tagging Deep Learning model that can help the company classify these images into eight categories of Indian classical dance.\n\n### Dataset\nThe dataset consists of 364 images belonging to 8 categories, namely manipuri, bharatanatyam, odissi, kathakali, kathak, sattriya, kuchipudi, and mohiniyattam.\nThe benefits of practicing this problem by using Machine Learning\/Deep Learning techniques are as follows:\nThis challenge will encourage you to apply your Machine Learning skills to build models that classify images into multiple categories\nThis challenge will help you enhance your knowledge of classification actively. It is one of the basic building blocks of Machine Learning and Deep Learning\nWe challenge you to build a model that auto-tags images and classifies them into various categories of Indian classical dance forms.\n\nThe data folder consists of two folders and two .csv files. The details are as follows:\ntrain: Contains 364 images for 8 classes \n* manipuri,\n* bharatanatyam\n* odissi\n* kathakali\n* kathak\n* sattriya\n* kuchipudi\n* mohiniyattam\n\ntest: Contains 156 images\ntrain.csv: 364 x 2\ntest.csv: 156 x 1\n\nData description\nThis data set consists of the following two columns:\n\n| Column Name | Description |\n|-------------|-------------|\n| Image       | Name of Image| \n|target       |Category of Image  ['manipuri','bharatanatyam','odissi','kathakali','kathak','sattriya','kuchipudi','mohiniyattam'] |"}}