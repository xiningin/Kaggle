{"cell_type":{"4edb0d68":"code","6cc15bf4":"code","c131d8d5":"code","d5380d09":"code","dbba64e6":"code","70a1e5c4":"code","f40f2e49":"code","13bf7e80":"code","16c9e651":"code","fd7bdbfc":"code","91423a79":"code","8c3f5e75":"code","81d0a450":"code","e040e6be":"code","effb9056":"code","9a549b47":"code","6477d25c":"markdown","855c92a4":"markdown","71b8165f":"markdown","4e611427":"markdown","f99053e9":"markdown","3965e26a":"markdown","678a2446":"markdown","63f1d9f1":"markdown","66f5ed98":"markdown","31a9cabf":"markdown","01b9640b":"markdown","2d0c8cd1":"markdown","189e2aba":"markdown","2aad04d8":"markdown","4ac70130":"markdown","e35efcd2":"markdown","14dea638":"markdown","01b18fca":"markdown"},"source":{"4edb0d68":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go","6cc15bf4":"data = pd.read_csv('..\/input\/g-research-crypto-forecasting\/train.csv') \nasset_details = pd.read_csv('..\/input\/g-research-crypto-forecasting\/asset_details.csv') ","c131d8d5":"data.head() ","d5380d09":"data.isnull().sum()","dbba64e6":"print(\"Total Null Target Rows = \" ,data[\"Target\"].isnull().sum())\nprint(\"Percentage of NUll rows in Training Data = {:.2f}%\".format(data[\"Target\"].isnull().sum()*100 \/ data.shape[0] ))","70a1e5c4":"asset_count= []\nfor i in range(14):\n    count = (data[\"Asset_ID\"]==i).sum()\n    asset_count.append(count)\nfig = px.bar(x = asset_details.sort_values(\"Asset_ID\")[\"Asset_Name\"],\n             y = asset_count , \n             color = asset_count ,\n             color_continuous_scale=\"Emrld\") \nfig.update_xaxes(title=\"Assets\")\nfig.update_yaxes(title = \"Number of Rows\")\nfig.update_layout(showlegend = True,\n    title = {\n        'text': 'Data Distribution ',\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'} ,\n        template=\"plotly_white\")\nfig.show()","f40f2e49":"def crypto_df(asset_id ,data= data ):\n    df = data[data[\"Asset_ID\"]==asset_id].reset_index(drop = True)\n    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='s')\n    df = df.set_index('timestamp')\n    return df\nbtc = crypto_df(asset_id = 1)\neth = crypto_df (asset_id = 6 )\nltc = crypto_df(asset_id = 9 )","13bf7e80":"def candelstick_chart(data,title):\n    candlestick = go.Figure(data = [go.Candlestick(x =data.index, \n                                               open = data[('Open')], \n                                               high = data[('High')], \n                                               low = data[('Low')], \n                                               close = data[('Close')])])\n    candlestick.update_xaxes(title_text = 'Time',\n                             rangeslider_visible = True)\n\n    candlestick.update_layout(\n    title = {\n        'text': '{:} Candelstick Chart'.format(title),\n        'y':0.90,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'} , \n    template=\"plotly_white\")\n\n    candlestick.update_yaxes(title_text = 'Price in USD', ticksuffix = '$')\n    return candlestick","16c9e651":"btc_plot = candelstick_chart(btc[-100:],title = \"Bitcoin(BTC)\")\nbtc_plot.show()","fd7bdbfc":"ltc_plot = candelstick_chart(ltc[-2500:],title = \"Litecoin(LTC)\")\nltc_plot.show()","91423a79":"def ohlc_chart(data,title):\n    ohlc = go.Figure(data = [go.Ohlc(x =data.index, \n                                               open = data[('Open')], \n                                               high = data[('High')], \n                                               low = data[('Low')], \n                                               close = data[('Close')])])\n    ohlc.update_xaxes(title_text = 'Time',\n                             rangeslider_visible = True)\n\n    ohlc.update_layout(\n    title = {\n        'text': '{:} OHLC Chart'.format(title),\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n        template=\"plotly_white\")\n\n    ohlc.update_yaxes(title_text = 'Price in USD', ticksuffix = '$')\n    return ohlc","8c3f5e75":"ohlc_chart(btc[:200], title = \"Bitcoin(BTC)\")","81d0a450":"ohlc_chart(eth[-100:], title = \"Ethereum(ETH)\")","e040e6be":"def vol_traded(data ,title,color):\n    area = px.area(data_frame=data,\n               x = data.index ,\n               y = \"Volume\",\n               markers = True)\n    area.update_traces(line_color=color)\n    area.update_xaxes(\n        title_text = 'Time',\n        rangeslider_visible = True)\n    area.update_yaxes(title_text = 'Number of trades every minute')\n    area.update_layout(showlegend = True,\n        title = {\n            'text': '{:} Volume Traded'.format(title),\n            'y':0.94,\n            'x':0.5,\n            'xanchor': 'center',\n            'yanchor': 'top'},\n        template=\"plotly_white\")\n    return area","effb9056":"vol_traded(eth[-50:], \"Ethereum (ETH)\",color = \"Red\")","9a549b47":"vol_traded(ltc[-300:], \"Litecoin(LTC)\",color = \"Blue\")","6477d25c":"**Created by Sanskar Hasija**\n\n**\ud83d\udcca G-Research Plots + EDA \ud83d\udcca**\n\n**3 NOVEMBER 2021**\n","855c92a4":"# <center>EDA<\/center> ","71b8165f":"# <center>OHLC CHARTS<\/center> ","4e611427":"# <center>If you find this notebook useful, support with an upvote\ud83d\udc4d<\/center>","f99053e9":"# <center>AREA PLOTS<\/center> ","3965e26a":"## Column Description\n*   **timestamp**: All timestamps are returned as second Unix timestamps (the number of seconds elapsed since 1970-01-01 00:00:00.000 UTC). Timestamps in this dataset are multiple of 60, indicating minute-by-minute data.\n*   **Asset_ID**: The asset ID corresponding to one of the crytocurrencies (e.g. `Asset_ID = 1` for Bitcoin). The mapping from `Asset_ID` to crypto asset is contained in `asset_details.csv`.\n*   **Count**: Total number of trades in the time interval (last minute).\n*   **Open**:\tOpening price of the time interval (in USD).\n*   **High**:\tHighest price reached during time interval (in USD).\n*   **Low**: Lowest price reached during time interval (in USD).\n*   **Close**:\tClosing price of the time interval (in USD).\n*   **Volume**:\tThe number of cryptoasset units traded during the minute.\n*   **VWAP**: The average price of the asset over the time interval, weighted by volume. VWAP is an aggregated form of trade data.\n*   **Target**: Residual log-returns for the asset over a 15 minute horizon. \n","678a2446":"### Bitcoin(BTC) OHLC Chart for first 200 rows","63f1d9f1":"# <center>\ud83d\udccaG-RESEARCH PLOTS + EDA \ud83d\udcca <\/center>","66f5ed98":"### Bitcoin(BTC) Candelstick Chart for last 100 rows","31a9cabf":"### Ethereum(ETH) OHLC Chart for last 100 rows","01b9640b":"# <center>CANDELSTICK CHARTS<\/center> ","2d0c8cd1":"### Checking Null Rows","189e2aba":"### Litecoin(LTC) Volume Traded for last 300 rows","2aad04d8":"# <center>IMPORTS<\/center> ","4ac70130":"### Training Data Distribution among differnet Assets (Crypto Currencies)","e35efcd2":"# <center>DATA DISTRIBUTION<\/center> ","14dea638":"### Ethereum(ETH) Volume Traded for last 50 rows","01b18fca":"### Litecoin(LTC) Candelstick Chart for last 2500 rows"}}