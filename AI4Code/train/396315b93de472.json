{"cell_type":{"76681e82":"code","54f9db40":"code","dc35a922":"code","ea50de51":"code","b9a48a32":"code","8eb9d094":"code","05dfb654":"code","21ec16a0":"code","adf1a1b3":"code","7b59facf":"code","3b66d778":"code","97699986":"code","cd7633ed":"code","807d8dff":"code","96c0ac98":"code","10a7b24f":"code","c6c3457d":"code","81250526":"code","b7109f01":"code","2ff65b1e":"code","755525b6":"code","00807d91":"code","7be8acc0":"code","6bae5299":"code","a9715601":"code","f3149143":"code","2bdaf19d":"code","d253eaa9":"code","2b60079d":"code","d2580baa":"code","51c35fae":"code","427e348e":"code","9400269e":"code","9afe680e":"code","42b82daf":"code","c560f4d2":"code","42407a13":"code","f2792eca":"code","76b7a938":"code","c94f16c0":"code","007df41f":"code","b25e2dc8":"code","3824bae9":"code","a5f3c7eb":"code","da601a81":"code","7e917689":"code","52ad46aa":"code","44fbfe0a":"code","549a75a6":"code","1694fbb1":"code","5bc86034":"code","6f1ef552":"code","d39cca33":"code","24fdb3a4":"code","cb10b853":"markdown","f635a29c":"markdown","b91d392c":"markdown","a0cc7732":"markdown","61eee698":"markdown","3130276e":"markdown","52e74a2c":"markdown","0ef1f15a":"markdown","a3ca4b27":"markdown","93dd7566":"markdown","69aa7c64":"markdown","30fb152f":"markdown","c276e1eb":"markdown","bf0d712a":"markdown","f6ac277d":"markdown","139ba99a":"markdown","1b3a9b55":"markdown","79c9249d":"markdown","fcd12574":"markdown","765b3705":"markdown","42175e9b":"markdown","f11588d3":"markdown","6b68d546":"markdown","9525f7da":"markdown","815b9493":"markdown","220c7fe2":"markdown","838b33f9":"markdown"},"source":{"76681e82":"\n## pre used in All Kaggle Notebooks.\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","54f9db40":"import numpy as np ## Import the Numpy Library : For using np arrays, algebra, matrices, tranformation\nimport pandas as pd ## Import the pandas Library to load and transform data in dataframes\nimport matplotlib.pyplot as plt\nimport missingno as msno\nimport seaborn as sns","dc35a922":"\ntitanic_train_df = pd.read_csv('..\/input\/titanic\/train.csv')\ntitanic_test_df = pd.read_csv('..\/input\/titanic\/test.csv')\ntitanic_test_df1 = pd.read_csv('..\/input\/titanic\/test.csv')","ea50de51":"##Checkout observations loaded in out pandas dataset\ntitanic_train_df.head(10)  ## Number of rows to be fetched is 10, if left blank, default is 5","b9a48a32":"## Using tail function on our test data. Tail will fetch last nth observations passed into the function, default is 5\ntitanic_test_df.tail(10)","8eb9d094":"titanic_train_df.shape","05dfb654":"titanic_test_df.shape","21ec16a0":"titanic_train_df.info()","adf1a1b3":"titanic_train_df.describe()","7b59facf":"titanic_train_df_survived = titanic_train_df[titanic_train_df['Survived'] == 1]","3b66d778":"survived_gender = titanic_train_df_survived.groupby('Sex', as_index=False).count()","97699986":"plt.bar(survived_gender['Sex'], survived_gender['Survived'])","cd7633ed":"##Ages that boarded the ship\nplt.hist(titanic_train_df['Age'])\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.title('Age vs Frequency Distribution')\nplt.grid(True)\nplt.xlim(0,90)\nplt.ylim(0,180)","807d8dff":"##Ages that survived More\nplt.hist(titanic_train_df_survived['Age'])\nplt.xlabel('Age that Survived')\nplt.ylabel('Frequency')\nplt.title('Survival wrt Age')\nplt.xlim(0,90)\nplt.ylim(0,180)\nplt.grid(True)","96c0ac98":"##To checkout which embarkment had max passengers\ntitanic_train_df_embark = titanic_train_df.groupby('Embarked', as_index=False).count()\ntitanic_train_df_survived_embark = titanic_train_df_survived.groupby('Embarked', as_index=False).count()","10a7b24f":"plt.bar(titanic_train_df_embark['Embarked'],titanic_train_df_embark['Survived'])","c6c3457d":"plt.bar(titanic_train_df_survived_embark['Embarked'],titanic_train_df_survived_embark['Survived'])","81250526":"titanic_train_df_survived_embark","b7109f01":"titanic_train_df_embark","2ff65b1e":"p=msno.bar(titanic_train_df)","755525b6":"plt.hist(titanic_train_df['SibSp'])","00807d91":"plt.hist(titanic_train_df_survived['SibSp'])\n","7be8acc0":"plt.hist(titanic_train_df['Fare'])","6bae5299":"plt.hist(titanic_train_df_survived['Fare'])","a9715601":"f, ax = plt.subplots(figsize = [25,16])\np=sns.heatmap(titanic_train_df.corr(),annot=True)","f3149143":"titanic_train_df.drop(columns=['Name','Cabin','Ticket'] , inplace=True)","2bdaf19d":"titanic_test_df.drop(columns=['Name','Cabin','Ticket'] , inplace=True)\n","d253eaa9":"titanic_test_df.shape","2b60079d":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\nle.fit(titanic_train_df['Sex'])","d2580baa":"titanic_train_df['Sex']= le.transform(titanic_train_df['Sex'])","51c35fae":"titanic_test_df['Sex'] = le.transform(titanic_test_df['Sex'])","427e348e":"titanic_test_df.shape","9400269e":"leembark=LabelEncoder()\nleembark.fit(titanic_train_df['Embarked'].astype(str))","9afe680e":"titanic_train_df['Embarked'] = leembark.transform(titanic_train_df['Embarked'].astype(str))\ntitanic_test_df['Embarked'] = leembark.transform(titanic_test_df['Embarked'].astype(str))\n","42b82daf":"titanic_test_df.shape\n","c560f4d2":"titanic_train_df_x = titanic_train_df.drop(columns=['Survived'])","42407a13":"titanic_train_df_y =titanic_train_df['Survived'].to_frame()","f2792eca":"titanic_train_df_x","76b7a938":"from sklearn.impute import SimpleImputer\nsi = SimpleImputer(missing_values=np.nan, strategy='mean')","c94f16c0":"titanic_train_df_x = si.fit_transform(titanic_train_df_x)","007df41f":"titanic_test_df = si.transform(titanic_test_df)","b25e2dc8":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()","3824bae9":"titanic_train_df_x = sc.fit_transform(titanic_train_df_x)","a5f3c7eb":"titanic_test_df = sc.transform(titanic_test_df)","da601a81":"titanic_test_df","7e917689":"from sklearn.svm import SVC","52ad46aa":"clf_svm = SVC(C=0.8)","44fbfe0a":"clf_svm.fit(titanic_train_df_x, titanic_train_df_y)","549a75a6":"svm_pred = clf_svm.predict(titanic_test_df)","1694fbb1":"svm_pred","5bc86034":"titanic_test_df1['PassengerId']","6f1ef552":"result_df = pd.DataFrame({'PassengerID':titanic_test_df1['PassengerId'],'Survived':svm_pred})","d39cca33":"result_df.head()","24fdb3a4":"result_df.to_csv('csv_to_submit.csv', index = False)\n","cb10b853":"## Doing EDA : Exploratory Data Analysis","f635a29c":"Correalation will be better seen after encoding of cateogrical values is done","b91d392c":"Age column has some null values","a0cc7732":"\"cabin\" column seems to have too many NA values.\nLet us check which columns have High NA values","61eee698":"## Supervised\/Unsupervised ","3130276e":"Lets checkout SibSp feature","52e74a2c":"a.Let's Checkout the size of data","0ef1f15a":"Range of fare was as follows: \n","a3ca4b27":"Name, Age, Sex, Ticket, Cabin, Embarked --> All are non integer values, rest are integer values. The .describe method further gives information about our data","93dd7566":"Now we will encode \"Embarked\" which is of type object","69aa7c64":"Parent\/Sibling that survived were :\n","30fb152f":"> In the Code Above, I have copied the input path from Top Right Corner of the window in location \n> <br>\n> DATA->input->train.csv (Click on icon \"Copy to Clipboard\"\n> <br>\n> Similarly to import test data\n> <br>\n> DATA->input->test.csv ","c276e1eb":"We will remove Name, Cabin values","bf0d712a":"We will be predicting this with svm","f6ac277d":"## APPLYING ML MODEL","139ba99a":"The Titan Dataset is the \"Hello World\" to the Machine Learning World. <br>\nWe will be doing the following steps:\n1. Defining the problem\n2. Acquring the Dataset\n3. Checking if its Supervised\/Unsupervised\n4. Doing EDA : Exploratory Data Analysis\n5. Do Feature Engineering\n6. Apply ML Model\n7. Check for Model Performance\n8. Tune the model and check the performance again\n\n\nLet's Checkout the Data","1b3a9b55":"b. Check for data type, via .info method","79c9249d":"## Feature Engineering","fcd12574":"## IMPORTING DATASET","765b3705":"Max boarders were from South Hampton. \n<BR>\nBelow graph will help us identify passengers from which embarkment survived more","42175e9b":"Age and Cabin values have NA value,\nCabin has high NA value, so this may be not be used as a feature","f11588d3":"Let us checkout our dataset. To checkout the data, we will use a function, \"head\" which fetches the top 5 observations from our data. \nSo, if we want to fetch more than 5 rows, (say we want to check 10 rows), we will simply pass the number of rows we want to see as an argument\nSimilarly, if we want to check the last 5 observations, we will use a function, \"tail\", and if we pass a whole number n, it will fetch n rows from the bottom.\nPrepared a sample below:","6b68d546":"418--> Number of training observation<br>\n891--> Number of testing observation","9525f7da":"**OKAY!!! So clearly, we can see that the train data has Survived Column, whereas testing data does not have it**\n\n![](http:\/\/)So basically, Above Problem is Supervised Machine Learning Problem, with our label (to be predicted) is *Survived* whereas the rest will be our features","815b9493":"Lets check some observations with graphs","220c7fe2":"We will now scale the data, Scaling is used to reduce the effect of feature with higher magintude to take over a feature will lower magnitude ","838b33f9":"Those that survived had paid in the fare range of :\n"}}