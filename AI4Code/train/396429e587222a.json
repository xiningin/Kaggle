{"cell_type":{"ea8de336":"code","19eb7353":"code","e3a100b4":"code","b29b9ca4":"code","c266594e":"code","cb19ef7e":"code","4d1734e5":"code","b24c40ad":"code","684cbc0c":"code","bc63ec21":"code","2c05282c":"code","315c9058":"code","6b7183a0":"code","dcc19508":"code","003c5d4c":"code","a3b84a76":"code","7513e60f":"markdown","fab63c05":"markdown","0a60c7b3":"markdown","6b1bf869":"markdown","5dfdeb59":"markdown","e1fdfb96":"markdown","3de91013":"markdown","25f42c20":"markdown"},"source":{"ea8de336":"#importing libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.metrics import accuracy_score","19eb7353":"#importing dataset\nds = pd.read_csv('..\/input\/sms-spam-collection-dataset\/spam.csv')\nds.head()","e3a100b4":"#checking for null values\nds.isnull().sum()","b29b9ca4":"#dropping last three columns\nds.drop(['Unnamed: 2','Unnamed: 3','Unnamed: 4'],axis = 1,inplace = True)\n\n#renaming columns(v1 and v2) for better understanding\nds.columns = ['category','message']\n\nds.head()","c266594e":"sns.countplot(x = 'category',data = ds)","cb19ef7e":"#text cleaning\nclean = []\nfor i in range(0,len(ds)):\n    \n    #removing punctuations with a space\n    text = re.sub('[^a-zA-Z]',' ', ds['message'][i])\n    \n    #converting all text to lowercase\n    text = text.lower()\n    \n    #tokenizing and stemming\n    text = text.split()\n    ps = PorterStemmer()\n    text = [ps.stem(word) for word in text if word not in set(stopwords.words('english'))]\n    text = ' '.join(text)\n    clean.append(text)\n    ","4d1734e5":"clean[0:5]","b24c40ad":"#creating bag of words\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer()\nx = cv.fit_transform(clean).toarray()\ny = ds.iloc[:,0].values","684cbc0c":"#encoding categorical data of y\nfrom sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ny=le.fit_transform(y)","bc63ec21":"#splitting dataset into training and testing sets.\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2, random_state = 0)","2c05282c":"#training model\nfrom sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nlr.fit(x_train,y_train)\n\n#getting confusion matrix\ny_pred = lr.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nlra = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',lra)","315c9058":"#training model\nfrom sklearn.svm import SVC\nsvc = SVC(kernel = 'rbf')\nsvc.fit(x_train,y_train)\n\n#getting confusion matrix\ny_pred = svc.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nsva = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","6b7183a0":"#training model\nfrom sklearn.naive_bayes import MultinomialNB\nnb = MultinomialNB()\nnb.fit(x_train,y_train)\n\n#getting confusion matrix\ny_pred = nb.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nnba = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","dcc19508":"#training model\nfrom sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(criterion = 'entropy')\ndt.fit(x_train,y_train)\n\n#getting confusion matrix\ny_pred = dt.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\ndta = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","003c5d4c":"#training model\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 20, criterion = 'entropy',random_state = 0)\nrf.fit(x_train,y_train)\n\n#getting confusion matrix\ny_pred = rf.predict(x_test)\ncm = confusion_matrix(y_test,y_pred)\nprint('confusion matrix:\\n',cm)\n\n#checking accuracy\nrfa = accuracy_score(y_test,y_pred)\nprint('accuracy score = ',accuracy_score(y_test,y_pred))","a3b84a76":"#comparing accuracies\nplt.figure(figsize= (8,7))\nac = [lra,sva,nba,dta,rfa]\nname = ['Logistic Regression','Kernel Svm','Multinomial Naive Bayes','Decision Tree', 'Random Forest']\nsns.barplot(x = ac,y = name,palette='pastel')\nplt.title(\"Plotting the Model Accuracies\", fontsize=16, fontweight=\"bold\")","7513e60f":"**TO MANY NULL VALUES IN THESE COLUMNS, THEREFORE DROPPING THEM ALL**","fab63c05":"# **Kernel SVM**","0a60c7b3":"**ALL MODELS GAVE ALMOST EQUAL ACCURACIES OF AROUND (97-98)%**","6b1bf869":"# **Decision Tree**","5dfdeb59":"**TOTAL VALUES OF HAM IS AROUND 4800 AND FOR SPAM IS AROUNF 800**","e1fdfb96":"# **Logistic Regression**","3de91013":"# **Multinomial Naive Bayes**","25f42c20":"# **Random Forest**"}}