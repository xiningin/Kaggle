{"cell_type":{"98bffbff":"code","beee54eb":"code","d9103735":"code","3ee81ac3":"code","e1848069":"code","75a0ee5e":"code","625526a0":"code","c77290c2":"code","1e2c75fe":"code","eb9c0f08":"code","f9460bb9":"code","d6b1dc05":"code","5b948985":"code","ca3c4906":"code","8337308c":"code","f2b114a8":"code","e866ec50":"code","237716d2":"code","4e7de887":"code","b77b0b5f":"code","6113422f":"code","5a717f0c":"code","5f315a01":"code","f4f18b63":"code","6bd702f0":"code","17361ad1":"code","0fe6a4fb":"code","f39096b6":"code","f2580c3b":"code","2348cb1b":"code","f7ab3e46":"code","9033c33e":"code","0c12360d":"code","036be5b9":"code","3e84bdb0":"code","12071ff3":"code","64f54467":"code","1334eebe":"code","5ace3166":"code","e946db93":"code","e07b8ce2":"code","ad2ec9fa":"code","d5de2c25":"markdown","9676a673":"markdown","1c591360":"markdown","c1ba1a26":"markdown","a5c12c20":"markdown","5f3a8dae":"markdown","d9d6addb":"markdown"},"source":{"98bffbff":"import tensorflow as tf\n\nfrom keras.models import Sequential\nfrom keras.applications import VGG16\nfrom keras.activations import relu, tanh\nfrom keras.optimizers import Adagrad\nfrom keras.losses import binary_crossentropy\nfrom keras.layers import Dropout, Dense, Conv1D, MaxPool1D, Activation, Flatten, Input, Conv2D, MaxPooling2D, MaxPool2D,BatchNormalization\n\nfrom skimage import io\nfrom keras.models import Model\nfrom skimage import io\nfrom keras.optimizers import Adam, Adadelta, Adam, RMSprop\n\nimport cv2, io\n\nfrom keras.utils import to_categorical \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","beee54eb":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","d9103735":"trainImageList = os.listdir(\"..\/input\/train\/train\/\")\ntrainImageList[:5]","3ee81ac3":"trainImageList[0]","e1848069":"import skimage, sklearn\n\nimage =  skimage.io.imread(\"..\/input\/train\/train\/0014d7a11e90b62848904c1418fc8cf2.jpg\", as_gray=False)\nimage.shape","75a0ee5e":"from skimage.filters import roberts, sobel, scharr, prewitt\n\n# edge_roberts = roberts(image)\n# edge_sobel = sobel(image)\n\n# plt.imshow(edge_sobel);","625526a0":"plt.imshow(image)\nplt.title('Cactus picture')\nplt.show()","c77290c2":"sns.countplot(train['has_cactus']);","1e2c75fe":"cnt = 0\nfor i in train[16+30:25+30].values:\n    cnt += 1\n    image = skimage.io.imread(f\"..\/input\/train\/train\/{i[0]}\", as_gray=False)\n    plt.subplot(250+cnt)\n    plt.axis(\"off\")\n    plt.imshow(image)\n    plt.title(['no_cactus','has_cactus'][i[1]])\nplt.show()","eb9c0f08":"train.shape, image.shape","f9460bb9":"Y = to_categorical(num_classes=2, y=train['has_cactus'])\nY.shape, Y[:10]","d6b1dc05":"num_classes = 2\nepochs = 5\nbatch_size = 128\nimage.shape, train.columns","5b948985":"inputs = Input(shape=(32, 32, 3))\n\n# vgg_conv = VGG16(weights='imagenet', include_top=False, input_shape=(32, 32, 3))\nconv1 = Conv2D(256, (4, 4), activation='elu')(inputs)\nbatch1 = BatchNormalization()(conv1)\npool1 = MaxPooling2D(padding='same', pool_size=(2,2))(batch1)\n\nconv2 = Conv2D(128, (4, 4), activation='relu')(pool1)\nbatch2 = BatchNormalization()(conv2)\npool2 = MaxPooling2D(padding='valid', pool_size=(3,3))(conv2)\n\nconv3 = Conv2D(64, (3, 3), activation='elu')(pool2)\nbatch3 = BatchNormalization()(conv3)\npool3 = MaxPooling2D(padding='same', pool_size=(3,3))(batch3)\n\nflatten = Flatten()(pool3)\n\ndropout = Dropout(rate = 0.7)(flatten)\n\noutput = Dense(2, activation='sigmoid')(dropout)\n\nmodel = Model(inputs=inputs, outputs=output)","ca3c4906":"# vgg_conv.summary()","8337308c":"# model = Sequential()\n# # Add the vgg convolutional base model\n# model.add(vgg_conv)\n \n# # Add new layers\n# model.add(Flatten())\n# model.add(Dense(1024, activation='relu'))\n# model.add(Dropout(1 - .70))\n# model.add(Dense(2, activation='sigmoid'))","f2b114a8":"model.summary()","e866ec50":"train['d'] = train['id'].apply(lambda x : \"..\/input\/train\/train\/\"+x)\ntrain['d'].head()","237716d2":"# train['data'] = train['d'].apply(lambda y: cv2.imread(y))\n# train['data'].head()\nY.shape","4e7de887":"from skimage import io\n\nall_images = []\nfor image_path in train['d'].values:\n#     print(image_path)\n    img = io.imread(image_path, as_gray=False)\n    img = img.reshape([32, 32,3])\n    all_images.append(img\/255)\nX = np.array(all_images)\nX.shape, type(X)","b77b0b5f":"X[0].shape\noptimizer = Adagrad(lr=0.001, decay=1e-3)","6113422f":"model.summary()","5a717f0c":"model.compile(loss='binary_crossentropy', optimizer=optimizer, metrics=['accuracy'])","5f315a01":"#Splits\n# X_val = x_train[16000:]\n# Y_val = Y[16000:]\n\nx_train, x_val, y_train, y_val = train_test_split(X, Y, test_size=0.2, shuffle=True, random_state=123)\nx_train.shape, y_train.shape","f4f18b63":"from keras.callbacks import EarlyStopping\nmonitor = EarlyStopping(monitor='val_loss', mode='max', verbose=1, patience=8)\n","6bd702f0":"model.fit(x=x_train, y=y_train, epochs=32, batch_size=512, shuffle=True, \n          validation_split=0.2, callbacks=[monitor])","17361ad1":"score = model.evaluate(x_val, y_val)\nscore","0fe6a4fb":"# a = np.array([[1.88852847e-01, 9.69758689e-01],\n#        [9.99574542e-01, 1.15156174e-04],\n#        [3.27082276e-02, 9.89496231e-01]])\n# np.where(a > 0.75)","f39096b6":"preds = np.array(model.predict(x_val, batch_size=32))\npreds = pd.DataFrame(preds)\n\nres = preds[0].apply(lambda x : 0 if x >0.75 else 1)","f2580c3b":"print(classification_report(np.argmax(y_val, axis=1), res))","2348cb1b":"c = confusion_matrix(np.argmax(y_val, axis=1), res)\nc","f7ab3e46":"sns.heatmap(c, annot=True);","9033c33e":"testImageList = os.listdir(\"..\/input\/test\/test\/\")\n# testImageList","0c12360d":"img = cv2.imread(\"..\/input\/test\/test\/f0720f7eac8fd0b72dd78cc7f63f4467.jpg\")\nimg.shape","036be5b9":"test_images = []\nfor image_path in os.listdir(\"..\/input\/test\/test\"):\n#     print(image_path)\n    img = skimage.io.imread('..\/input\/test\/test\/'+image_path, as_gray=False)\n    img = img.reshape([32, 32,3])\n    test_images.append(img\/255)\nx_test = np.array(test_images)\nx_test.shape","3e84bdb0":"predTest1 = model.predict(x_test, batch_size=128)\n\npredTest1 = pd.DataFrame(predTest1)\n\npredTest1 = preds[0].apply(lambda x : 0 if x >0.75 else 1)\npredTest1","12071ff3":"submission = pd.read_csv(\"..\/input\/sample_submission.csv\")\nsubmission.head()","64f54467":"# predTest = np.argmax(predTest1, axis=1)","1334eebe":"submission['has_cactus'] = pd.Series(predTest1)","5ace3166":"submission.to_csv(\"submission5.csv\", index=False)\nsubmission.head()","e946db93":"sns.countplot(submission['has_cactus']);","e07b8ce2":"submission[46:55].values","ad2ec9fa":"cnt = 0\n\nfor i in submission[46:55].values:\n    cnt += 1\n    image = skimage.io.imread(f\"..\/input\/test\/test\/{i[0]}\", as_gray=False)\n    plt.subplot(250+cnt)\n    plt.axis(\"off\")\n    plt.imshow(image)\n    plt.title(['no_cactus','has_cactus'][int(i[1])])\nplt.show()","d5de2c25":"## Create CNN Model","9676a673":"## Train Model","1c591360":"## Transformation","c1ba1a26":"## Evaluate Model","a5c12c20":"## Submit Predictions","5f3a8dae":"## Test Model","d9d6addb":"## Predict Model"}}