{"cell_type":{"3c1aab00":"code","2989d3d5":"code","eb54b067":"code","f21e4d2a":"code","216efbc7":"code","819e000b":"code","b93ff946":"code","57339791":"code","31a2a227":"code","8171052e":"code","8ee4df78":"code","8821b782":"code","67731fa9":"code","ff37aa11":"code","f98b8156":"code","d648a0c9":"code","5b89c82c":"code","5e24ec4a":"code","80399369":"code","f1d882b9":"code","4dd66a59":"code","cdae631d":"code","3c2969b8":"code","b907ad1a":"code","c27ffbc2":"code","ff8590b6":"code","4ac96bb9":"code","8d88deee":"code","2a53a30a":"code","87122ab5":"code","94056b6e":"code","f13e69b7":"code","8b71dca3":"code","6fb866c2":"code","b33a660d":"code","7b2a1729":"code","34d4064d":"code","e3d2307e":"code","fce6241e":"code","0c4da973":"code","b829f519":"code","5aa25131":"code","d948f4c9":"code","f03e4b48":"code","53fd16d4":"code","c3ba1826":"code","8c106051":"code","48013c05":"code","7041f8fe":"code","c1918420":"code","77a2d1b7":"code","e90f2b99":"code","7c38e2db":"code","b1287a6f":"markdown","612f2dfa":"markdown","e37299f1":"markdown","0f86f2af":"markdown","36548569":"markdown","3e78295e":"markdown","4313739f":"markdown","22222f3d":"markdown"},"source":{"3c1aab00":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import metrics\n\nimport warnings\nwarnings.filterwarnings('ignore')","2989d3d5":"df = pd.read_csv(\"..\/input\/abalone-uci\/abalone_original.csv\")\ndf.head()","eb54b067":"df.shape","f21e4d2a":"##---- rings in age feature ----##\n# df['age'] = df.rings + 1.5\n# df.head()","216efbc7":"df.info()","819e000b":"df.isna().sum()","b93ff946":"# df.drop('rings', 1, inplace=True)","57339791":"df.head()","31a2a227":"sns.countplot(x='sex', data=df)\nplt.show()","8171052e":"num_cols = df.select_dtypes('number').columns\nnum_cols","8ee4df78":"fig, axs = plt.subplots(nrows=4, ncols=2, figsize=(12,20))\naxs = np.ravel(axs)\n\nfor i, col in enumerate(num_cols):\n    plt.sca(axs[i])\n    sns.histplot(x=col, data=df, kde=True, color='orange')\n    \nplt.tight_layout()\nplt.show()","8821b782":"## checking outliers\ndf.loc[df.height>50]","67731fa9":"df = df.loc[~(df.height>50)]\ndf.shape","ff37aa11":"fig, axs = plt.subplots(nrows=4, ncols=2, figsize=(12,20))\naxs = np.ravel(axs)\n\nfor i, col in enumerate(num_cols):\n    plt.sca(axs[i])\n    sns.histplot(x=col, data=df, kde=True, color='orange')\n    \nplt.tight_layout()\nplt.show()","f98b8156":"final_df = pd.concat([pd.get_dummies(df.sex, drop_first=True), df.drop('sex', 1)], axis=1)\nfinal_df.head()","d648a0c9":"# X, y = final_df.drop('age', 1).values, final_df.age.values\n\nX, y = final_df.drop('rings', 1).values, final_df.rings.values\n\nX.shape, y.shape","5b89c82c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.1, random_state=101)\n\nX_train.shape, X_valid.shape, X_test.shape","5e24ec4a":"scaler = StandardScaler()\nscaler.fit(X_train[:, 2:]) # infant, male  column excluded","80399369":"X_train[:, 2:] = scaler.transform(X_train[:, 2:])\nX_valid[:, 2:] = scaler.transform(X_valid[:, 2:])\nX_valid[:, 2:] = scaler.transform(X_valid[:, 2:])","f1d882b9":"from sklearn.linear_model import LinearRegression","4dd66a59":"linear_reg = LinearRegression()\nlinear_reg.fit(X_train,y_train)","cdae631d":"preds = linear_reg.predict(X_valid)","3c2969b8":"def rmse(model, X, y):\n    preds = np.round(model.predict(X))\n    mse = metrics.mean_squared_error(y, preds)\n    return np.sqrt(mse)","b907ad1a":"def plot_residuals(y_true, y_pred):\n    residuals = y_valid - preds\n    plt.scatter(np.arange(len(residuals)), residuals, c='orange')\n    plt.xlabel(\"index\")\n    plt.ylabel(\"Residual\")\n    plt.title(\"Residual Plot\")\n    plt.show()\n    \nplot_residuals(y_valid, preds)","c27ffbc2":"print(f\"Train RMSE: {rmse(linear_reg, X_train, y_train):.3f}\")\nprint(f\"Valid RMSE: {rmse(linear_reg, X_valid, y_valid):.3f}\")","ff8590b6":"from sklearn.svm import SVR, LinearSVR","4ac96bb9":"linear_svm = LinearSVR(C=100, random_state=101)\nlinear_svm.fit(X_train, y_train)","8d88deee":"print(f\"Train RMSE: {rmse(linear_svm, X_train, y_train):.3f}\")\nprint(f\"Valid RMSE: {rmse(linear_svm, X_valid, y_valid):.3f}\")","2a53a30a":"svr_reg = SVR(kernel='rbf', degree=2, C=0.1)\nsvr_reg.fit(X_train ,y_train)","87122ab5":"print(f\"Train RMSE: {rmse(svr_reg, X_train, y_train):.3f}\")\nprint(f\"Valid RMSE: {rmse(svr_reg, X_valid, y_valid):.3f}\")","94056b6e":"from sklearn.neighbors import KNeighborsRegressor","f13e69b7":"knn = KNeighborsRegressor(n_neighbors=3)\nknn.fit(X_train, y_train)","8b71dca3":"print(f\"Train RMSE: {rmse(knn, X_train, y_train):.3f}\")\nprint(f\"Valid RMSE: {rmse(knn, X_valid, y_valid):.3f}\")","6fb866c2":"from sklearn.ensemble import RandomForestRegressor","b33a660d":"forest_reg = RandomForestRegressor(max_depth=5,min_samples_split=5, random_state=101)\nforest_reg.fit(X_train, y_train)","7b2a1729":"print(f\"Train RMSE: {rmse(forest_reg, X_train, y_train):.3f}\")\nprint(f\"Valid RMSE: {rmse(forest_reg, X_valid, y_valid):.3f}\")","34d4064d":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV","e3d2307e":"%%time\n\nparms = {'C':[0.001, 0.01, 0.1, 1, 10, 100, 1000],\n        'degree':[1,2,3]}\n\ngrid_search = GridSearchCV(svr_reg, parms, \n                           scoring=\"neg_mean_squared_error\", \n                           cv=3,n_jobs=True, \n                           return_train_score=True)\n\ngrid_search.fit(X_train, y_train)","fce6241e":"pd.DataFrame(grid_search.cv_results_)[['mean_train_score', 'mean_test_score', 'rank_test_score']]","0c4da973":"best_svm_model = grid_search.best_estimator_\nbest_svm_model.fit(X_train, y_train)","b829f519":"print(f\"Train RMSE: {rmse(best_svm_model, X_train, y_train):.3f}\")\nprint(f\"Valid RMSE: {rmse(best_svm_model, X_valid, y_valid):.3f}\")","5aa25131":"%%time\n\nparms = {'n_estimators':[100, 300, 500],\n        'max_depth':[3, 5, 7, 9],\n        'min_samples_split':[3,5,7,10]}\n\ngrid_search = GridSearchCV(forest_reg, parms, \n                           scoring=\"neg_mean_squared_error\", \n                           cv=3,n_jobs=True, \n                           return_train_score=True)\n\ngrid_search.fit(X_train, y_train)","d948f4c9":"pd.DataFrame(grid_search.cv_results_)[['mean_train_score', 'mean_test_score', 'rank_test_score']]","f03e4b48":"best_forest_model = grid_search.best_estimator_\nbest_forest_model.fit(X_train, y_train)\n\nprint(f\"Train RMSE: {rmse(best_forest_model, X_train, y_train):.3f}\")\nprint(f\"Valid RMSE: {rmse(best_forest_model, X_valid, y_valid):.3f}\")","53fd16d4":"from xgboost import XGBRegressor","c3ba1826":"xgb_reg = XGBRegressor()\nxgb_reg.fit(X_train, y_train)","8c106051":"print(f\"Train RMSE: {rmse(xgb_reg, X_train, y_train):.3f}\")\nprint(f\"Valid RMSE: {rmse(xgb_reg, X_valid, y_valid):.3f}\")","48013c05":"from scipy import stats","7041f8fe":"test_preds = svr_reg.predict(X_test)\n\nplot_residuals(y_test, test_preds)","c1918420":"rmse(svr_reg, X_test, y_test)","77a2d1b7":"## checking generalization error\n\nerror = (y_test - test_preds)**2\n\nnp.sqrt(stats.t.interval(0.95, df=len(error)-1, loc=error.mean(), scale=stats.sem(error)))","e90f2b99":"import joblib","7c38e2db":"joblib.dump(svr_reg, 'Abalone_SVR_model_v1.pkl')\njoblib.dump(scaler, 'Abalone_scaler_v1.pkl')","b1287a6f":"## Random Forest","612f2dfa":"## KNN","e37299f1":"## XGBOOST","0f86f2af":"## Final Model - SVR","36548569":"## Model Saving","3e78295e":"## SVM","4313739f":"## Linear Regression","22222f3d":"# Applying Grid Search and Random Search"}}