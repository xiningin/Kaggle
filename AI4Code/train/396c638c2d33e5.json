{"cell_type":{"8582cf9f":"code","38298cff":"code","4ac87022":"code","fa283dc4":"code","825668ec":"code","699ab1a7":"code","9209d0f7":"code","32aab26d":"code","4d65aacc":"code","eba5801d":"code","73f2bb03":"code","eeb2c652":"code","95606668":"code","2ba592ba":"code","f13cf843":"code","bd117a03":"code","adbcd1b9":"code","480c46b3":"code","9ac14084":"code","0029905a":"code","51ef235d":"code","35a7ae71":"code","3aa9dc34":"code","eeb247dd":"code","5e0a3ee0":"code","6e5031b4":"code","a783db2e":"code","81242e19":"code","27c94c2d":"code","7c907396":"code","640b8bf2":"code","f6ab6a60":"code","d17a1ae1":"code","97a3bf26":"code","8af25af5":"code","9784ab68":"code","9a132527":"code","0dcb3037":"code","ac823fad":"code","515eaf96":"code","1743d4aa":"code","06a84de8":"code","2adfe112":"code","233f9191":"code","8170d961":"code","a8c3c0d4":"code","7f9d462e":"code","e98bdf28":"code","277a0923":"code","5c1f8cee":"code","013881ea":"code","e20d9e26":"code","c5485279":"code","9c61c35f":"code","31dedc1c":"code","4d409135":"code","7278e83c":"code","0f56dfaf":"code","f6fc2ed4":"code","44810d5e":"code","e82ae1b7":"code","8bdefa89":"code","d4c7effa":"code","3e171786":"code","0d34766b":"code","e7fdce8f":"code","64387243":"code","a3c9afad":"code","be9c538e":"code","5fdd06a8":"code","8f992adb":"code","ae1b34dd":"code","397ce3cf":"code","900c517f":"code","3a6458a4":"markdown","849e3706":"markdown","581b83ac":"markdown","311843ca":"markdown","bdeba0d4":"markdown","0a2a3bec":"markdown","0b44321f":"markdown","562517c8":"markdown","acf182a9":"markdown","1d3b5d07":"markdown","9210b10f":"markdown","fabb50e0":"markdown","bfc01900":"markdown","231cd45d":"markdown","2e58891e":"markdown","6b4cfc21":"markdown"},"source":{"8582cf9f":"# importing libraries\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt","38298cff":"\ndata=pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/train.csv')\ndata.head()","4ac87022":"data.info()","fa283dc4":"data.shape","825668ec":"data.describe()","699ab1a7":"data.isnull().sum()","9209d0f7":"ax=sns.countplot(data['Response'])\nfor p in ax.patches:\n    ax.annotate('{:d}'.format(p.get_height()), (p.get_x()+0.25, p.get_height()+1))\n","32aab26d":"sns.distplot(data['Age'])","4d65aacc":"plt.figure(figsize=(20,8))\nax= sns.countplot(data['Age'],hue=data['Response'])\nplt.ylabel('Response')\nplt.show()","eba5801d":"sns.scatterplot(x=data['Age'],y=data['Annual_Premium'])","73f2bb03":"ax=sns.countplot(data['Gender'])\nfor p in ax.patches:\n    ax.annotate('{:d}'.format(p.get_height()), (p.get_x()+0.25, p.get_height()+1))","eeb2c652":"df=data.groupby(['Gender'])['Driving_License'].count().to_frame().reset_index()\ndf","95606668":"sns.catplot(x=\"Gender\", y=\"Driving_License\",\n                data=df, kind=\"bar\")","2ba592ba":"plt.figure(figsize=(10,8))\nax= sns.countplot(data['Previously_Insured'],hue=data['Response'])\nplt.ylabel('Response')\nfor p in ax.patches:\n    ax.annotate('{:d}'.format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))","f13cf843":"ax=sns.countplot(data['Vehicle_Age'])\nfor p in ax.patches:\n    ax.annotate('{:d}'.format(p.get_height()), (p.get_x()+0.25, p.get_height()+1))","bd117a03":"sns.countplot(data['Vehicle_Age'],hue=data['Response'])","adbcd1b9":"data['Vehicle_Damage'].value_counts()","480c46b3":"sns.countplot(data['Vehicle_Damage'])","9ac14084":"sns.countplot(data['Vehicle_Damage'],hue=data['Response'])","0029905a":"plt.figure(figsize=(10,8))\nax= sns.countplot(data['Driving_License'],hue=data['Response'])\nplt.ylabel('Response')\nfor p in ax.patches:\n    ax.annotate('{:d}'.format(p.get_height()), (p.get_x()+0.15, p.get_height()+1))","51ef235d":"sns.boxplot(data['Annual_Premium'])","35a7ae71":"sns.distplot(data['Vintage'])","3aa9dc34":"data.columns","eeb247dd":"c=data['Response'].value_counts()","5e0a3ee0":"(c[1]\/(c[1]+c[0]))*100","6e5031b4":"corr=data.corr()\nplt.figure(figsize=(10,8))\nsns.heatmap(corr,annot=True)","a783db2e":"from sklearn.preprocessing import StandardScaler\n\nScale = StandardScaler()\n\nNumfeature = [\n    'Annual_Premium',\n    'Vintage',\n]\n\nfor x in Numfeature :\n    data[[x]] = Scale.fit_transform(data[[x]])","81242e19":"data.head()","27c94c2d":"traindata=data","7c907396":"traindata.head()","640b8bf2":"traindata=traindata.rename(columns={\"Previously_Insured\": \"Previously_Insured_Yes\"})","f6ab6a60":"train_dummies = pd.get_dummies(data[['Gender',\n    'Vehicle_Damage',    \n    'Vehicle_Age'\n]],drop_first=True)\n\ntraindata = pd.concat([traindata, train_dummies], axis=1)\ntraindata.head()","d17a1ae1":"traindata = traindata.drop([\n    'id', \n    'Gender',\n    'Vehicle_Age',\n    'Vehicle_Damage',\n       \n    \n], axis=1)\ntraindata.head()","97a3bf26":"from sklearn.model_selection import train_test_split\nsplit = traindata\n\ny = split['Response'].values\nX = split.drop(labels = ['Response'], axis = 1)\n\n\n# Splitting the dataset \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)\n\nprint('Shape of training dataset ', X_train.shape)\nprint('Shape of test dataset ', X_test.shape)","8af25af5":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","9784ab68":"params = {\n    'max_depth': [1, 2, 5, 10],\n    'max_features': [2,3,4, 5],\n    'n_estimators': [10, 30, 50, 100, 200]\n}","9a132527":"classifier_rf = RandomForestClassifier(random_state=42, n_jobs=-1)","0dcb3037":"grid_search = GridSearchCV(estimator=classifier_rf, param_grid=params, \n                          cv=4, n_jobs=-1, verbose=1, scoring = \"roc_auc\")","ac823fad":"%%time\ngrid_search.fit(X_train,y_train)","515eaf96":"rf_best = grid_search.best_estimator_\nrf_best","1743d4aa":"rf_best.feature_importances_","06a84de8":"from sklearn import metrics ","2adfe112":"metrics.accuracy_score(y_train, rf_best.predict(X_train))","233f9191":"c=metrics.confusion_matrix(y_train, rf_best.predict(X_train))\nc","8170d961":"actuals=y_train\nprobs=rf_best.predict(X_train)","a8c3c0d4":"fpr, tpr, thresholds = metrics.roc_curve( actuals, probs,\n                                              drop_intermediate = False )","7f9d462e":"metrics.roc_auc_score( y_train,rf_best.predict(X_train) )","e98bdf28":"    auc_score = metrics.roc_auc_score( actuals, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()","277a0923":"metrics.accuracy_score(y_test, rf_best.predict(X_test))","5c1f8cee":"metrics.roc_auc_score(y_test, rf_best.predict(X_test))","013881ea":"c=metrics.confusion_matrix(y_test, rf_best.predict(X_test))\nc","e20d9e26":"from imblearn.over_sampling import SMOTE","c5485279":"\nX_resampled, y_resampled=SMOTE().fit_resample(X_train,y_train)","9c61c35f":"grid_search.fit(X_resampled, y_resampled)","31dedc1c":"rf = grid_search.best_estimator_\nrf","4d409135":"metrics.accuracy_score(y_resampled, rf.predict(X_resampled))","7278e83c":"c=metrics.confusion_matrix(y_resampled, rf.predict(X_resampled))\nc","0f56dfaf":"actuals=y_resampled\nprobs=rf.predict(X_resampled)","f6fc2ed4":"fpr, tpr, thresholds = metrics.roc_curve( actuals, probs,\n                                              drop_intermediate = False )\nauc_score = metrics.roc_auc_score( actuals, probs )\nplt.figure(figsize=(5, 5))\nplt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate or [1 - True Negative Rate]')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.legend(loc=\"lower right\")\nplt.show()","44810d5e":"metrics.accuracy_score(y_test, rf.predict(X_test))","e82ae1b7":"metrics.roc_auc_score(y_test, rf.predict(X_test))","8bdefa89":"# Applying Pre processing on  test.csv to apply model","d4c7effa":"test=pd.read_csv('..\/input\/health-insurance-cross-sell-prediction\/test.csv')\ntest.head()","3e171786":"for x in Numfeature :\n    test[[x]] = Scale.fit_transform(test[[x]])","0d34766b":"test=test.rename(columns={\"Previously_Insured\": \"Previously_Insured_Yes\"})","e7fdce8f":"test_dummies = pd.get_dummies(test[['Gender',\n    'Vehicle_Damage',    \n    'Vehicle_Age'\n]],drop_first=True)\n\ntest= pd.concat([test, test_dummies], axis=1)\ntest.head()","64387243":"submission=test['id']\nsubmission.head()","a3c9afad":"submit=pd.DataFrame({'id':submission})\nsubmit","be9c538e":"test = test.drop([\n    'id', \n    'Gender',\n    'Vehicle_Age',\n    'Vehicle_Damage',\n       \n    \n], axis=1)\ntest.head()","5fdd06a8":"prediction=rf.predict(test)","8f992adb":"prediction","ae1b34dd":"prediction = pd.DataFrame({'Response':prediction})\nprediction.head()","397ce3cf":"submit['Response']=prediction['Response']","900c517f":"submit.head()","3a6458a4":"## Test-Train Split","849e3706":"#### But the positive response  received from varied age group, shows age group 35-50 have high conversion rate","581b83ac":"#### Customer with driving license  responded positive than those who dont own","311843ca":"## Model Building- Random Forest( hyperparameter tuning)","bdeba0d4":"#### customer that were previously not insured most of turn positive response for vehicle insurance","0a2a3bec":"#### Data is imbalance as 12% response are positive ","0b44321f":"## Data preprocessing","562517c8":"### Using SMOTE to balance class and make model learn using random forest grid search CV","acf182a9":"## Importing dataset","1d3b5d07":"# EDA","9210b10f":"# Cross-sell PredictionPredict Health Insurance Owners' who will be interested in Vehicle Insurance","fabb50e0":"### As we see ROC is 0.50 and accuracy score of train and test varies by large value so model is learning as there is class imbalance. To balance class we are using SMOTE  ","bfc01900":"### Customer age distribution\n#### Most of the customer are in 20-30 age group","231cd45d":"#### Customer whose vehicle was damage responded positive ","2e58891e":"#     ","6b4cfc21":"#### Customer with vehicle age 1-2 years responded positive for vehicle insurance"}}