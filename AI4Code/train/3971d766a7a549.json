{"cell_type":{"6cb3220f":"code","7aa7e8bb":"code","7c9d9422":"code","10111bcd":"code","2ed15e21":"code","16a672da":"code","62e83138":"code","b4d9cd36":"code","f8a44eef":"code","303f8e99":"code","f55710fa":"code","5de8907f":"code","b454d5bb":"code","d1a45e89":"code","e052e5d1":"code","01b29519":"code","0e2372d0":"code","242f099d":"code","0874605e":"code","183b4541":"code","3bdf24f6":"code","63e27bb1":"code","e915e52f":"code","9fa939a2":"code","6985bcd0":"code","3486e52b":"code","206ef1cd":"code","3cca0ab6":"code","62da7084":"code","69abec12":"code","40ebb4b7":"code","36ec9b5e":"code","3549517b":"code","0658d2b1":"code","00bc4bf6":"code","08eab25e":"code","837dd03d":"code","abdd55cd":"code","e52c8998":"code","0894d2f6":"code","4b3ba6f3":"code","30a626f4":"code","2db71601":"code","ac648930":"code","455d2aa5":"code","77fbd578":"code","3677d46e":"code","bce0c214":"code","131c1e74":"code","e2428196":"code","200306a6":"code","b3388cef":"code","c62e418a":"code","cfdf6ca6":"code","7fe772c2":"code","0c330b14":"code","9ce87821":"code","06714799":"code","fb0002c0":"code","fdd4312d":"code","384a0a2b":"code","f34099c7":"code","d4358cae":"code","5e7236f3":"code","762768bb":"code","85d9d966":"code","6a54fcde":"code","19b50b93":"code","8642668c":"code","7907a453":"code","650e9480":"code","28a91997":"code","7cea2436":"code","09a56fa3":"code","0228412f":"code","1a38468e":"code","f30bb180":"code","b3f79ee1":"code","f8c0aa30":"code","2bbda966":"code","ecb57758":"code","b99e078a":"code","a30a08f8":"code","0c69ea78":"code","9a2ed73f":"code","52d63c1f":"code","4de69b9b":"code","7e7c56d8":"code","5a766c34":"code","34392faa":"code","f7850704":"code","a84c4ab6":"code","60d6916c":"code","2ef9c363":"code","32f03dac":"code","904359e7":"code","28775b98":"code","db320af3":"code","fb012249":"code","494d5f36":"code","3e8018e6":"code","5e4133d1":"code","511c854c":"code","26447975":"markdown","8d5bddb6":"markdown","f53b2bf9":"markdown","ca81ed17":"markdown","66ad3930":"markdown","e0fd0ad8":"markdown","027618be":"markdown","002d68bc":"markdown","430788ab":"markdown","5b65c055":"markdown","7e557f10":"markdown","97fcda65":"markdown","b21a710f":"markdown","0a67cc49":"markdown","d3f99c9c":"markdown","1396537a":"markdown","eed9e5a8":"markdown","46b9f6bd":"markdown","567aab6e":"markdown","35940085":"markdown","f55c3ae2":"markdown","1221a3c2":"markdown","d6dabbde":"markdown","77face1c":"markdown","b27eff21":"markdown","f4901980":"markdown","0956d9b4":"markdown","8e340ff2":"markdown","b7953991":"markdown","67d21251":"markdown","8875ad55":"markdown","c82cb30b":"markdown","72bd2ab6":"markdown"},"source":{"6cb3220f":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom warnings import filterwarnings\nfrom mpl_toolkits.mplot3d import Axes3D\nimport statsmodels.api as sm\nimport missingno as msno\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import scale\nfrom sklearn.neighbors import LocalOutlierFactor\nfrom scipy.stats import levene\nfrom scipy.stats import shapiro\nfrom scipy.stats.stats import pearsonr\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict\nfrom sklearn.preprocessing import scale\nfrom sklearn.model_selection import ShuffleSplit, GridSearchCV\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn import model_selection\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\nfrom sklearn import linear_model\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier\nimport xgboost as xgb\nfrom xgboost import XGBRegressor, XGBClassifier\nfrom lightgbm import LGBMRegressor, LGBMClassifier\nfrom catboost import CatBoostRegressor, CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn import tree\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve","7aa7e8bb":"filterwarnings(\"ignore\", category=DeprecationWarning) \nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning) ","7c9d9422":"CERN = pd.read_csv(\"..\/input\/cern-electron-collision-data\/dielectron.csv\")","10111bcd":"CERN = CERN.drop([\"Run\",\"Event\"],axis=1) # We will focus on numerical columns, we do not need event IDs\n# if you want to predict Event or Run, you should not run that process","2ed15e21":"CERN.rename(columns={'px1 ':'px1'}, inplace=True) # \"px 1\" is not comfortable","16a672da":"data = CERN.copy() # copy to protect main data","62e83138":"dataV = data.copy() # for visulazition\ndataV[\"Q1\"] = pd.Categorical(dataV[\"Q1\"])\ndataV[\"Q2\"] = pd.Categorical(dataV[\"Q2\"])\n# Q1 and Q2 refer to electron charges, we can think categorically","b4d9cd36":"df = dataV.select_dtypes(include=[\"float64\",\"int64\",\"int32\"]) # for mathematical analysis, to guarantee even though it is not necessary","f8a44eef":"print(data.head())","303f8e99":"print(data.shape)","f55710fa":"print(data.columns)","5de8907f":"print(data.info())","b454d5bb":"print(data.describe().T)","d1a45e89":"print(df.corr())","e052e5d1":"print(df.cov())","01b29519":"print(data.groupby([\"E1\",\"E2\"]).mean()[\"M\"])","0e2372d0":"print(data.groupby([\"px1\",\"px2\"]).mean()[\"M\"])","242f099d":"print(data.groupby([\"py1\",\"py2\"]).mean()[\"M\"])","0874605e":"print(data.groupby([\"pz1\",\"pz2\"]).mean()[\"M\"])","183b4541":"print(data.groupby([\"pt1\",\"pt2\"]).mean()[\"M\"])","3bdf24f6":"print(data.groupby([\"eta1\",\"eta2\"]).mean()[\"M\"])","63e27bb1":"print(data.groupby([\"phi1\",\"phi2\"]).mean()[\"M\"])","e915e52f":"print(data.where(data[\"E1\"] > 50).value_counts().sum())","9fa939a2":"print(data.where(data[\"E2\"] > 50).value_counts().sum())","6985bcd0":"print(data.where(data[\"px1\"] > data[\"px1\"].mean()).value_counts().sum())","3486e52b":"print(data.where(data[\"px2\"] > data[\"px2\"].mean()).value_counts().sum())","206ef1cd":"print(data.where(data[\"py1\"] < 0).value_counts().sum())","3cca0ab6":"print(data.where(data[\"py2\"] < 1).value_counts().sum())","62da7084":"print(data.where(data[\"pz1\"] < 1).value_counts().sum())","69abec12":"print(data.where(data[\"pz2\"] < data[\"pz2\"].mean()).value_counts().sum())","40ebb4b7":"print(data.where(data[\"pt1\"] < data[\"pt1\"].mean()).value_counts().sum())","36ec9b5e":"print(data.where(data[\"pt2\"] < data[\"pt2\"].mean()).value_counts().sum())","3549517b":"print(data.where(data[\"eta1\"] > data[\"eta1\"].mean()).value_counts().sum())","0658d2b1":"print(data.where(data[\"eta2\"] > data[\"eta2\"].mean()).value_counts().sum())","00bc4bf6":"print(data.where(data[\"phi1\"] > 1).value_counts().sum())","08eab25e":"print(data.where(data[\"phi2\"] > 1).value_counts().sum())","837dd03d":"print(data.duplicated().value_counts()) # That for Q1,Q2 -- you should not delete duplicated","abdd55cd":"print(data.isnull().sum()) # M has NaN","e52c8998":"print(data.isnull().all())","0894d2f6":"msno.matrix(data,figsize=(8,5))\nplt.show()","4b3ba6f3":"msno.bar(data,figsize=(8,5))\nplt.show()","30a626f4":"msno.heatmap(data,figsize=(8,5))\nplt.show()","2db71601":"# Let's add median corresponding to that data instead of the NaN data\ndata[\"M\"].fillna(data[\"M\"].median(),inplace=True)\nprint(data.isnull().sum()) # checking again","ac648930":"DataForA = data.copy() # to protect main copy data","455d2aa5":"clf = LocalOutlierFactor()\nclf.fit_predict(DataForA)","77fbd578":"score = clf.negative_outlier_factor_","3677d46e":"scoresorted = np.sort(score)\nprint(scoresorted[0:20]) # checking outlier, look where the biggest jump took place\n# for this data, outlier point is index 4 -- > -2.74668789","bce0c214":"point = scoresorted[4]\nprint(f\"Outlier Point -- > {point} \")\nprint(\"---\"*20)\nprint(\"Outlier Row -- >\\n\",DataForA[score==point])","131c1e74":"totaloutlier = DataForA < point\nprint(DataForA[totaloutlier].any())","e2428196":"print(data[score < point])\n# outlier values","200306a6":"CleanData = DataForA > point\nprint(data[CleanData])","b3388cef":"corrPearson = data.corr(method=\"pearson\")\ncorrSpearman = data.corr(method=\"spearman\")","c62e418a":"figure = plt.figure(figsize=(20,8))\nsns.heatmap(corrPearson,annot=True,vmin=-1,center=0,vmax=1)\nplt.title(\"PEARSON\")\nplt.show()","cfdf6ca6":"figure = plt.figure(figsize=(20,8))\nsns.heatmap(corrSpearman,annot=True,vmin=-1,center=0,vmax=1)\nplt.title(\"SPEARMAN\")\nplt.show()","7fe772c2":"covv = data.cov()","0c330b14":"figure = plt.figure(figsize=(20,8))\nsns.heatmap(covv,annot=True,vmin=-1,center=0,vmax=1)\nplt.title(\"COVARIANCE\")\nplt.show()","9ce87821":"for i in data.columns:\n    print(\"---\"*30)\n    print(i)\n    print(\"%.4f - %.4f\" % shapiro(data[i]))","06714799":"print(\"%.3f - %.3f\" % levene(data[\"E1\"],data[\"E2\"]))\nprint(\"%.3f - %.3f\" % levene(data[\"px1\"],data[\"px2\"]))\nprint(\"%.3f - %.3f\" % levene(data[\"py1\"],data[\"py2\"]))\nprint(\"%.3f - %.3f\" % levene(data[\"pt1\"],data[\"pt2\"]))\nprint(\"%.3f - %.3f\" % levene(data[\"pz1\"],data[\"pz2\"]))\nprint(\"%.3f - %.3f\" % levene(data[\"eta1\"],data[\"eta2\"]))\nprint(\"%.3f - %.3f\" % levene(data[\"phi1\"],data[\"phi1\"]))\nprint(\"%.3f - %.3f\" % levene(data[\"Q1\"],data[\"Q2\"]))","fb0002c0":"data.iloc[:,0:16].hist(figsize=(20,20))\nplt.show()","fdd4312d":"figure = plt.figure(figsize=(20,8))\nsns.boxplot(x=\"px1\",y=\"Q1\",data=dataV)\nplt.show()","384a0a2b":"figure = plt.figure(figsize=(20,8))\nsns.boxplot(x=\"px2\",y=\"Q2\",data=dataV)\nplt.show()","f34099c7":"figure = plt.figure(figsize=(20,8))\nsns.scatterplot(x=\"E1\",y=\"M\",data=data)\nplt.show()","d4358cae":"figure = plt.figure(figsize=(20,8))\nsns.scatterplot(x=\"px1\",y=\"M\",data=data)\nplt.show()","5e7236f3":"figure = plt.figure(figsize=(20,8))\nsns.scatterplot(x=\"py1\",y=\"M\",data=data)\nplt.show()","762768bb":"figure = plt.figure(figsize=(20,8))\nsns.scatterplot(x=\"pz1\",y=\"M\",data=data)\nplt.show()","85d9d966":"figure = plt.figure(figsize=(20,8))\nsns.scatterplot(x=\"pt1\",y=\"M\",data=data)\nplt.show()","6a54fcde":"figure = plt.figure(figsize=(20,8))\nsns.scatterplot(x=\"eta1\",y=\"M\",data=data)\nplt.show()","19b50b93":"figure = plt.figure(figsize=(20,8))\nsns.scatterplot(x=\"phi1\",y=\"M\",data=data)\nplt.show()","8642668c":"figure = plt.figure(figsize=(20,5))\nsns.histplot(\n    data,\n    x=\"E2\",\n    multiple=\"stack\",\n    edgecolor=\".3\",\n    linewidth=.5,\n    log_scale=True,\n)\nplt.show()","7907a453":"figure = plt.figure(figsize=(20,5))\nsns.histplot(\n    data,\n    x=\"px2\",\n    multiple=\"stack\",\n    edgecolor=\".3\",\n    linewidth=.5,\n    log_scale=True,\n)\nplt.show()","650e9480":"figure = plt.figure(figsize=(20,5))\nsns.histplot(\n    data,\n    x=\"py2\",\n    multiple=\"stack\",\n    edgecolor=\".3\",\n    linewidth=.5,\n    log_scale=True,\n)\nplt.show()","28a91997":"figure = plt.figure(figsize=(20,5))\nsns.histplot(\n    data,\n    x=\"pt2\",\n    multiple=\"stack\",\n    edgecolor=\".3\",\n    linewidth=.5,\n    log_scale=True,\n)\nplt.show()","7cea2436":"figure = plt.figure(figsize=(20,5))\nsns.histplot(\n    data,\n    x=\"pz2\",\n    multiple=\"stack\",\n    edgecolor=\".3\",\n    linewidth=.5,\n    log_scale=True,\n)\nplt.show()","09a56fa3":"figure = plt.figure(figsize=(20,5))\nsns.histplot(\n    data,\n    x=\"eta2\",\n    multiple=\"stack\",\n    edgecolor=\".3\",\n    linewidth=.5,\n    log_scale=True,\n)\nplt.show()","0228412f":"figure = plt.figure(figsize=(20,5))\nsns.histplot(\n    data,\n    x=\"phi2\",\n    multiple=\"stack\",\n    edgecolor=\".3\",\n    linewidth=.5,\n    log_scale=True,\n)\nplt.show()","1a38468e":"figure = plt.figure(figsize=(20,8))\nsns.jointplot(x=\"E1\",y=\"px1\", color=\"#4CB391\",data=data)\nplt.show()","f30bb180":"figure = plt.figure(figsize=(20,8))\nsns.jointplot(x=\"E1\",y=\"py1\", color=\"#4CB391\",data=data)\nplt.show()","b3f79ee1":"figure = plt.figure(figsize=(20,8))\nsns.jointplot(x=\"E1\",y=\"pt1\", color=\"#4CB391\",data=data)\nplt.show()","f8c0aa30":"figure = plt.figure(figsize=(20,8))\nsns.jointplot(x=\"E1\",y=\"pz1\", color=\"#4CB391\",data=data)\nplt.show()","2bbda966":"figure = plt.figure(figsize=(20,8))\nsns.jointplot(x=\"E1\",y=\"eta1\",color=\"#4CB391\",data=data)\nplt.show()","ecb57758":"figure = plt.figure(figsize=(20,8))\nsns.jointplot(x=\"E1\",y=\"phi1\", color=\"#4CB391\",data=data)\nplt.show()","b99e078a":"figure = plt.figure(figsize=(20,8))\nsns.distplot(data[data['E1'] > data['E1'].mean()][\"M\"], color='black',label='LESS') \nsns.distplot(data[data['E1'] < data['E1'].mean()][\"M\"], color='red',label='UPPER')\nplt.title('E1', fontsize=10)\nplt.legend()","a30a08f8":"figure = plt.figure(figsize=(20,8))\nsns.distplot(data[data['px1'] > data['px1'].mean()][\"M\"], color='black',label='LESS') \nsns.distplot(data[data['px1'] < data['px1'].mean()][\"M\"], color='red',label='UPPER')\nplt.title('px1', fontsize=10)\nplt.legend()","0c69ea78":"figure = plt.figure(figsize=(20,8))\nsns.distplot(data[data['py1'] > data['py1'].mean()][\"M\"], color='black',label='LESS') \nsns.distplot(data[data['py1'] < data['py1'].mean()][\"M\"], color='red',label='UPPER')\nplt.title('py1', fontsize=10)\nplt.legend()","9a2ed73f":"figure = plt.figure(figsize=(20,8))\nsns.distplot(data[data['pt1'] > data['pt1'].mean()][\"M\"], color='black',label='LESS') \nsns.distplot(data[data['pt1'] < data['pt1'].mean()][\"M\"], color='red',label='UPPER')\nplt.title('pt1', fontsize=10)\nplt.legend()","52d63c1f":"figure = plt.figure(figsize=(20,8))\nsns.distplot(data[data['pz1'] > data['pz1'].mean()][\"M\"], color='black',label='LESS') \nsns.distplot(data[data['pz1'] < data['pz1'].mean()][\"M\"], color='red',label='UPPER')\nplt.title('pz1', fontsize=10)\nplt.legend()","4de69b9b":"figure = plt.figure(figsize=(20,8))\nsns.distplot(data[data['eta1'] > data['eta1'].mean()][\"M\"], color='black',label='LESS') \nsns.distplot(data[data['eta1'] < data['eta1'].mean()][\"M\"], color='red',label='UPPER')\nplt.title('pz1', fontsize=10)\nplt.legend()","7e7c56d8":"figure = plt.figure(figsize=(20,8))\nsns.distplot(data[data['phi1'] > data['phi1'].mean()][\"M\"], color='black',label='LESS') \nsns.distplot(data[data['phi1'] < data['phi1'].mean()][\"M\"], color='red',label='UPPER')\nplt.title('pz1', fontsize=10)\nplt.legend()","5a766c34":"fig = plt.figure(figsize=(20,10))\nax = Axes3D(fig)\nax.scatter(data[\"px1\"], data[\"py1\"], data[\"pz1\"], c=\"red\", s=20, alpha=0.2)\nplt.show()","34392faa":"fig = plt.figure(figsize=(20,10))\nax = Axes3D(fig)\nax.scatter(data[\"E1\"], data[\"px1\"], data[\"eta1\"], c=\"black\", s=20, alpha=0.2)\nplt.show()","f7850704":"fig = plt.figure(figsize=(20,10))\nax = Axes3D(fig)\nax.scatter(data[\"E1\"], data[\"E2\"], data[\"M\"], c=\"green\", s=20, alpha=0.2)\nplt.show()","a84c4ab6":"fig = plt.figure(figsize=(20,10))\nax = Axes3D(fig)\nax.scatter(data[\"phi1\"], data[\"phi2\"], data[\"M\"], c=\"blue\", s=20, alpha=0.2)\nplt.show()","60d6916c":"fig = plt.figure(figsize=(20,10))\nsns.PairGrid(dataV, y_vars=\"M\",\n                 x_vars=[\"Q1\", \"Q2\"],height=10,aspect=.5).map(sns.pointplot, scale=1.3, errwidth=2, color=\"black\")\nplt.show()","2ef9c363":"x = data.drop(\"M\",axis=1)\ny = data[\"M\"]\n\nxTrain,xTest,yTrain,yTest = train_test_split(x,y,test_size=0.2,random_state=42)","32f03dac":"lm = LinearRegression().fit(xTrain,yTrain)\npls = PLSRegression().fit(xTrain,yTrain)\nridge = Ridge().fit(xTrain,yTrain)\nlasso = Lasso().fit(xTrain,yTrain)\nelasticnet = ElasticNet().fit(xTrain,yTrain)\nknnr = KNeighborsRegressor().fit(xTrain,yTrain)\ncartr = DecisionTreeRegressor(random_state=42).fit(xTrain,yTrain)\nbaggr = BaggingRegressor(random_state=42,bootstrap_features=True,verbose=False).fit(xTrain,yTrain)\nrfr = RandomForestRegressor(random_state=42,verbose=False).fit(xTrain,yTrain)\ngbmr = GradientBoostingRegressor(verbose=False).fit(xTrain,yTrain)\nxgbr = XGBRegressor().fit(xTrain,yTrain)\nlgbmr = LGBMRegressor().fit(xTrain,yTrain)\ncatbr = CatBoostRegressor(verbose=False).fit(xTrain,yTrain)","904359e7":"models = [lm,pls,ridge,lasso,elasticnet,knnr,\n         cartr,baggr,rfr,gbmr,xgbr,lgbmr,catbr]","28775b98":"for model in models:\n    name = model.__class__.__name__\n    R2CV = cross_val_score(model,xTest,yTest,cv=10,scoring=\"r2\").mean()\n    error = -cross_val_score(model,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\n    print(name + \": \")\n    print(\"-\" * 10)\n    print(R2CV)\n    print(np.sqrt(error))\n    print(\"-\" * 30)","db320af3":"params = {\n    \n    \"depth\": [2, 3, 4, 5, 6],\n    \"learning_rate\": [0.1, 0.01, 0.5]\n}","fb012249":"cv = GridSearchCV(catbr, params, cv=10, verbose=False).fit(xTrain, yTrain)\nprint(cv.best_params_)","494d5f36":"catbrtuned = CatBoostRegressor(depth=6,learning_rate=0.5,verbose=False).fit(xTrain,yTrain)\n\nR2CVtuned = cross_val_score(catbrtuned,xTest,yTest,cv=10,scoring=\"r2\").mean()\nprint(R2CVtuned)\nerrortuned = -cross_val_score(catbrtuned,xTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\nprint(np.sqrt(errortuned))","3e8018e6":"scaler = StandardScaler().fit(xTrain,yTrain)\nxRTrain = scaler.transform(xTrain)\nxRTest = scaler.transform(xTest)","5e4133d1":"mlpr = MLPRegressor().fit(xTrain,yTrain)\n\nR2CV = cross_val_score(mlpr,xRTest,yTest,cv=10,scoring=\"r2\").mean()\nerror = -cross_val_score(mlpr,xRTest,yTest,cv=10,scoring=\"neg_mean_squared_error\").mean()\n\nprint(R2CV)\nprint(np.sqrt(error))","511c854c":"ols = sm.OLS(yTrain,xTrain).fit()\nprint(ols.summary())","26447975":"CNN is so close to CatBoost, but CatBoost is still best","8d5bddb6":"### DISTPLOT","f53b2bf9":"### Exploratory Data Analysis","ca81ed17":"### HISTPLOT","66ad3930":"### CNN - ADDITIONAL","e0fd0ad8":"### Ignoring Warnings","027618be":"### X & Y ","002d68bc":"Best model is still CatBoost","430788ab":"### BASIC HIST","5b65c055":"### Models","7e557f10":"### FINAL DESICION ---> CATBOOST \/ 0.9898453825158777","97fcda65":"### TUNING BEST MODEL CATBOOST","b21a710f":"### Correlation","0a67cc49":"# PREDICTION MODELS","d3f99c9c":"### SCATTER","1396537a":"### 3D","eed9e5a8":"### Homogeneity","46b9f6bd":"# OUTLIER VALUES","567aab6e":"Let's take a look at the correlation between missing data by visualizing it","35940085":"# PACKAGES AND LIBRARIES","f55c3ae2":"### Normality","1221a3c2":"# VISUALIZATION","d6dabbde":"### Covariance","77face1c":"### JOINTPLOT","b27eff21":"### PAIRGRID","f4901980":"BEST PARAMETERS ARE DEFAULT PARAMETERS","0956d9b4":"# CORRELATION - COVARIANCE - NORMALITY - HOMOGENEITY","8e340ff2":"Scaling","b7953991":"# DATA SOURCE","67d21251":"BEST IS CATBOOST --> 0.9898453825158777","8875ad55":"### OLS - ADDITIONAL","c82cb30b":"### BOX","72bd2ab6":"it seems missing values are acceptable, but we will add median"}}