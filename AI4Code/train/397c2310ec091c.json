{"cell_type":{"3046ec05":"code","a1fcb588":"code","26c8b84b":"code","de4593b2":"code","8f3934f6":"code","3f8eaf9b":"code","73a27553":"code","7bda573e":"code","2cd7d7a2":"code","67b85894":"code","a477a373":"code","0a3125dd":"code","4d1b04e7":"code","ee232888":"code","c4ca5fbe":"code","67f3d1e9":"code","397b1df8":"code","8bcd3c2d":"code","896edc1f":"markdown","1749eb2a":"markdown","6e75812d":"markdown","7f34522d":"markdown","d2019f46":"markdown","a68fbaee":"markdown"},"source":{"3046ec05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a1fcb588":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport gc\nimport dill\nimport tensorflow as tf\nfrom tensorflow import keras\nimport random\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler\nfrom sklearn.model_selection import train_test_split","26c8b84b":"print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))\n#tf.debugging.set_log_device_placement(True)","de4593b2":"np.random.seed(1230)\nrandom.seed(1230)","8f3934f6":"train_df = pd.read_feather('\/kaggle\/input\/jane-street-market-dataset-to-feather\/train.feather')\nfeature_df = pd.read_feather('\/kaggle\/input\/jane-street-market-dataset-to-feather\/features.feather')\nfeature_df.set_index('feature',inplace=True)\ntrain_df.shape","3f8eaf9b":"# Remove weight == 0\ntrain_df = train_df.loc[train_df.weight != 0]\ntrain_df.shape","73a27553":"# Make the trade  when the expected return is positive\ntrain_df['target'] = (train_df.resp > 0).values.astype(np.int8)\ntrain_df.head(3)","7bda573e":"# Use all columns in the dataframe as a feature  except these\nignore_columns = ['resp_1', 'resp_2', 'resp_3', 'resp_4', 'resp','ts_id','target']\nfeature_cols = [col for col in train_df.columns if col not in ignore_columns]\n\n# We will need it during submission\ndill.dump(feature_cols,open('feature_cols.dill','wb'))","2cd7d7a2":"%%time\n# We will work with NumPy arrays\ntrain_df.fillna(0,inplace=True)\ny = train_df.target.values.astype(np.float32)\nX = train_df[feature_cols].values.astype(np.int8)\ndel train_df\n\n#scaler = StandardScaler().fit(X)\n#X = scaler.transform(X)\n\n#dill.dump(scaler,open('scaler.dill','wb'))","67b85894":"# Return two generators: one for training and the second for validation\ndef build_data_gen(X,y,lookback=10,delay=1,batch_size=128,val_split=0.1):\n    min_index = 0\n    max_index = X.shape[0]\n    # We will create a frame to hold the steps' indexes\n    idx = tf.signal.frame(tf.range(min_index,max_index),lookback,1).numpy().astype(np.int8)\n    # We cannot predict more values than the delay\n    idx = idx[tf.reduce_all(idx+delay <= max_index,axis=-1)]\n    \n    # We shuffle the frame and split it into validation and training\n    np.random.shuffle(idx)\n    val_size = int(idx.shape[0]*val_split)\n    val_idx = idx[-val_size:]\n    train_idx = idx[:-val_size]\n    print(idx.shape,train_idx.shape,val_idx.shape)\n    del idx\n    \n    # This function is our generator\n    def fn_data_gen(idx):\n        while True:\n            # We return batches from the frame, shuffle it a repeat again\n            for i in range(0,idx.shape[0],batch_size):\n                j = min(i+batch_size,idx.shape[0])\n                idx_tmp = idx[i:j]\n                # The target position is the last step+delay\n                y_idx = idx_tmp[...,-1]+delay\n                yield X.take(idx_tmp,axis=0),y.take(y_idx,axis=0)\n            np.random.shuffle(idx) #s huffle and repeat\n            \n    return lambda: fn_data_gen(train_idx),lambda: fn_data_gen(val_idx)","a477a373":"def prepare_dataset(X,y,window_length,batch_size,cache_name='train'):\n    x_ds = tf.data.Dataset.from_tensor_slices(X) \n    y_ds = tf.data.Dataset.from_tensor_slices(y[(window_length-1):])#ignore first window_length elements\n\n    x_ds = x_ds.window(window_length,shift=1,drop_remainder=True)\n    x_ds = x_ds.flat_map(lambda window: window.batch(window_length))\n\n    ds = tf.data.Dataset.zip((x_ds, y_ds)).repeat()#.cache(f'\/tmp\/{cache_name}').repeat()\n\n    ds = ds.shuffle(10000).batch(batch_size)\n    ds = ds.prefetch(30)\n    return ds","0a3125dd":"filepath=\"val_model.hdf5\"\ncallbacks_list = [\n    keras.callbacks.ModelCheckpoint(filepath, \n                                    verbose=1,\n                                    monitor='val_acc', \n                                    save_best_only=True, \n                                    mode='max'),\n]\nbatch_size = 2**12\nlookback = 10\nval_split = 0.2\nbatch_size","4d1b04e7":"input_layer = keras.layers.Input(shape=(lookback,len(feature_cols)))\n\ninput_norm = keras.layers.BatchNormalization()(input_layer)\n\n\nencoder = keras.layers.LSTM(64)(input_layer)\n\noutput = keras.layers.Dense(1,activation='sigmoid')(encoder)\n\n\nmodel = keras.models.Model(input_layer,output)\nmodel.compile(loss=keras.losses.binary_crossentropy,\n              optimizer=keras.optimizers.Adam(0.01),\n              metrics=[tf.keras.metrics.BinaryAccuracy(name='acc')]\n             )\nmodel.summary()","ee232888":"size = X.shape[0]\nval_size = int(size*val_split)\nX_train, X_test, y_train, y_test = X[:-val_size],X[-val_size:],y[:-val_size],y[-val_size:]\nX_train.shape,X_test.shape","c4ca5fbe":"train_steps = int(X.shape[0]\/\/batch_size*(1-val_split))\nval_steps = int(X.shape[0]\/\/batch_size*(val_split))\ntrain_steps,val_steps","67f3d1e9":"dataset = prepare_dataset(X_train,y_train,lookback,batch_size)\nval_dataset = prepare_dataset(X_test,y_test,lookback,batch_size)","397b1df8":"history = model.fit(dataset,\n          steps_per_epoch=train_steps,\n          validation_data=val_dataset,\n          validation_steps=val_steps,\n          epochs=60,\n          callbacks=callbacks_list)\nmodel.save('train_model.hdf5')","8bcd3c2d":"pd.DataFrame(history.history).plot()","896edc1f":"## Train","1749eb2a":"## [Check the submission notebook](https:\/\/www.kaggle.com\/tchaye59\/jmarket-rnn-with-keras-submit)","6e75812d":"### Prepare training and validation dataset ","7f34522d":"We converted the dataset to the **.feather** format in this [Notebook](https:\/\/www.kaggle.com\/tchaye59\/jane-street-market-dataset-to-feather). It is faster to load and support all build in pandas functionality.\n\n### Objective:\nWe will build a recurrent neural network. The network will take **n** consecutive data **steps** and predict the next **action** to take","d2019f46":"# Define the model","a68fbaee":"## Define The target"}}