{"cell_type":{"673f4e7a":"code","3da6a146":"code","9f73190a":"code","e5397a95":"code","d097d4d3":"code","a89fbca5":"code","beb807b9":"code","052a38e1":"code","ff46f89b":"code","64649781":"code","91fdf66f":"code","3023ce6e":"code","f1137bfa":"code","3cb2feb8":"code","578c2858":"code","ce2c9ef1":"code","e09e8409":"code","b3f9061d":"code","1dbb361d":"code","d419dfd3":"code","7c3045b2":"code","f2e9a8b1":"code","6f38488b":"code","cb7083f0":"code","7ccdc58d":"code","6215a3dc":"code","4db1613d":"code","f4eea65e":"code","eaa9f66b":"code","ae9ecbd1":"code","58984635":"code","228bab59":"code","fc22ed2d":"code","558f7261":"markdown","3d07ff48":"markdown","7412344e":"markdown","ae6fb4f5":"markdown","275d2318":"markdown","c2e6d317":"markdown","2434162f":"markdown","1df78dbe":"markdown","1d27c9a5":"markdown","7518ac50":"markdown","eb78d5f9":"markdown","c3a7933d":"markdown","08bc6d49":"markdown"},"source":{"673f4e7a":"first_var = 2\nprint(first_var)","3da6a146":"second_var = (3 + 2) * 10 ** 2 \/ 3\n- second_var","9f73190a":"second_var % first_var","e5397a95":"type(first_var)","d097d4d3":"type(second_var)","a89fbca5":"print(int(second_var))","beb807b9":"print(int('123'))","052a38e1":"def least_diff(a, b, c):\n    \"\"\"Return the smallest difference between any two numbers\n    among a, b and c.\n    \n    >>> least_difference(1, 5, -5)\n    4\n    \"\"\"\n    diff1 = abs(a - b)\n    # abs() is a built-in function for obtaining the absolute value of a number\n    diff2 = abs(b - c)\n    diff3 = abs(a - c)\n    # min() is a built-in function for finding the minimum value\n    return min(diff1, diff2, diff3)\n\nleast_diff(1, 4, 6)\n# You may also indicate explicitly how each value is assigned to each argument, such as:\n# least_diff(a=1, b=4, c=6)","ff46f89b":"help(min)","64649781":"help(least_diff)\n","91fdf66f":"9 >= 6","3023ce6e":"'5' == 5","f1137bfa":"test_var = -1\n(type(test_var) == int and test_var < 0) or (not type(test_var) == int and test_var > 0)","3cb2feb8":"test_var = 0.1\n(type(test_var) == int and test_var < 0) or (not type(test_var) == int and test_var > 0)","578c2858":"def number_check(x):\n    if type(x) != int:\n        print(x, \"is not an integer\")\n    elif x == 0:\n        print(x, \"is zero\")\n    elif x > 0:\n        print(x, \"is positive\")\n    else:\n        print(x, \"is negative\")\n        \nnumber_check(-11)","ce2c9ef1":"tutorials = ['TUT001','TUT002','TUT004','TUT003','TUT005','TUT006']\n# The indeces of a list start from 0\ntutorials[2]","e09e8409":"# Use negative indeces to access items from the end of the list\ntutorials[-1]","b3f9061d":"# You can modify item at the specified index\ntutorials[0] = 'LEC001'\ntutorials","1dbb361d":"tutorials[0] = 'TUT001'\ntutorials","d419dfd3":"# Start the selection at index 0 (can leave out the starting index if it is 0) \n# and end the selection at index 2 (item at index 2 will be excluded)\n\n# tutorials[0:2]\ntutorials[:2]","7c3045b2":"# Use a negative index after the colon to indicate which items to exclude \n# from the end of the list\ntutorials[2:-1]","f2e9a8b1":"# Start with a negative index to select items from the end of the list\ntutorials[-2:]","6f38488b":"len(tutorials)","cb7083f0":"# Use sorted() to sort a list in an alphabetical order\nsorted(tutorials, reverse=True)","7ccdc58d":"enrollment = [32, 27, 31, 30, 31, 30]\nsum(enrollment)","6215a3dc":"# max() can take lists as arguments\nmax(enrollment)","4db1613d":"# Use list.append() to add a new item at the end of the list\ntutorials.append('LEC001')\ntutorials","f4eea65e":"# Use list.pop() to remove one item at the end of the list\ntutorials.pop()\ntutorials","eaa9f66b":"# Use the in operator to check if a list contains an item\n'TUT001' in tutorials","ae9ecbd1":"# Use list.index() to get the index of an item\ntutorials.index('TUT001')","58984635":"# In each iteration, the loop will assign the next item \n# in tutorials to the variable tutorial\nfor tutorial in tutorials:\n    # Slicing can also be applied to str variables\n    # e.g., tutorial[-1:] gets the last character in tutorial\n    \n    # The default value for the end argument is the new line symbol: '\\n'\n    # Assign ' ' to the end argument will print in the same line\n    print(tutorial[-1:], end=' ')","228bab59":"# Create a list that contains the squares of 0 to 9\nsquares = [n**2 for n in range(10)]\nsquares","fc22ed2d":"# Create a sub set of squares that contains only even numbers\neven_squares = [square for square in squares if square%2 == 0]\neven_squares","558f7261":"## **Demonstration 7 Conditional Statements**\n\nUse \"if\", \"elif\", and \"else\" conditional statements to control code execution based on comparison operations","3d07ff48":"## **Demonstration 2 Arithmetic Operations**\n\nDefine another numeric variable named \"second_var\" and performe arithmetic operations","7412344e":"## **Demonstration 8 List Creation and Indexing**\n\nLearn how to create list, a ordered sequence of values, and access individual items in the list via indeces","ae6fb4f5":"## **Demonstration 10 Built-in Functions for Lists**\n\nUse built-in functions for lists ","275d2318":"## **Demonstration 3 Type and Casting**\n\nCheck variable type and cast a variable from one type to another","c2e6d317":"## **Demonstration 4 Functions**\n\nDefine and use a function that finds the least difference among three numbers","2434162f":"## **Demonstration 13 List Comprehension**\n\nList comprehension is a unique and powerful feature of Python for generating and modifying lists","1df78dbe":"## **Demonstration 12 Loop through Lists**\n\nUse for loop to access each item in a list","1d27c9a5":"## **Demonstration 5 Get Helps**\n\nUse the built-in help() function to learn about other functions","7518ac50":"## **Demonstration 1 Variable Definition and Assignment**\n\nDefine a numeric variable named \"first_var\" and assign a value of 2 to it","eb78d5f9":"## **Demonstration 9 List Slicing**\n\nUse slicing to select a sub sequece of a list ","c3a7933d":"## **Demonstration 11 List Methods**\n\nUse functions attached to a list object, a.k.a. methods","08bc6d49":"## **Demonstration 6 Booleans**\n\nUnderstand how comparison operations produce Boolean values and how Boolean values combine"}}