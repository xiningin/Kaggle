{"cell_type":{"033210c0":"code","bfa22533":"code","38958b5b":"code","83996c5e":"code","1f73e07d":"code","4c25c6cf":"code","5c29b230":"code","8adc6399":"code","d54dfa54":"code","29e9c576":"code","ba18a46c":"code","1917ad73":"code","d1cbf2f9":"code","2f9ae4d9":"code","baa89497":"code","7652ad9c":"code","8cb472b5":"code","0e7a50d6":"code","c9978966":"code","5e10b744":"code","e2e0c152":"code","733ba8f8":"code","b3e5c36b":"code","7e2585e8":"code","e0d54b76":"markdown","a966f606":"markdown"},"source":{"033210c0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport lightgbm as lgb\nfrom sklearn.model_selection import *\nfrom sklearn.metrics import mean_squared_error, make_scorer\nfrom scipy.stats import mode, skew, kurtosis, entropy\nfrom sklearn.ensemble import ExtraTreesRegressor\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport dask.dataframe as dd\nfrom dask.multiprocessing import get\n\nfrom tqdm import tqdm, tqdm_notebook\ntqdm.pandas(tqdm_notebook)\n\n# Any results you write to the current directory are saved as output.","bfa22533":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\ntransact_cols = [f for f in train.columns if f not in [\"ID\", \"target\"]]\ny = np.log1p(train[\"target\"]).values","38958b5b":"import gc\ngc.collect();\ncols = ['f190486d6', '58e2e02e6', 'eeb9cd3aa', '9fd594eec', '6eef030c1', '15ace8c9f', \n        'fb0f5dbfe', '58e056e12', '20aa07010', '024c577b9', 'd6bb78916', 'b43a7cfd5', \n        '58232a6fb', '1702b5bf0', '324921c7b', '62e59a501', '2ec5b290f', '241f0f867', \n        'fb49e4212', '66ace2992', 'f74e8f13d', '5c6487af1', '963a49cdc', '26fc93eb7', \n        '1931ccfdd', '703885424', '70feb1494', '491b9ee45', '23310aa6f', 'e176a204a', \n        '6619d81fc', '1db387535', 'fc99f9426', '91f701ba2', '0572565c2', '190db8488', \n        'adb64ff71', 'c47340d97', 'c5a231d81'\n       ]","83996c5e":"def get_beautiful_test(test):\n    test_rnd = np.round(test.iloc[:, 1:], 2)\n    ugly_indexes = []\n    non_ugly_indexes = []\n    for idx in tqdm(range(len(test))):\n        if not np.all(\n            test_rnd.iloc[idx, :].values==test.iloc[idx, 1:].values\n        ):\n            ugly_indexes.append(idx)\n        else:\n            non_ugly_indexes.append(idx)\n    print(len(ugly_indexes), len(non_ugly_indexes))\n    np.save('test_ugly_indexes', np.array(ugly_indexes))\n    np.save('test_non_ugly_indexes', np.array(non_ugly_indexes))\n    test = test.iloc[non_ugly_indexes].reset_index(drop=True)\n    return test, non_ugly_indexes, ugly_indexes","1f73e07d":"test, non_ugly_indexes, ugly_indexes = get_beautiful_test(test)\ntest[\"target\"] = train[\"target\"].mean()","4c25c6cf":"from multiprocessing import Pool\nCPU_CORES = 1\ndef _get_leak(df, cols, lag=0, verbose=False):\n    \"\"\" To get leak value, we do following:\n       1. Get string of all values after removing first two time steps\n       2. For all rows we shift the row by two steps and again make a string\n       3. Just find rows where string from 2 matches string from 1\n       4. Get 1st time step of row in 3 (Currently, there is additional condition to only fetch value if we got exactly one match in step 3)\"\"\"\n    series_str = df[cols[lag+2:]].apply(lambda x: \"_\".join(x.round(2).astype(str)), axis=1)\n    series_shifted_str = df[cols].shift(lag+2, axis=1)[cols[lag+2:]].apply(lambda x: \"_\".join(x.round(2).astype(str)), axis=1)\n    if verbose:\n        target_rows = series_shifted_str.progress_apply(lambda x: np.where(x == series_str)[0])\n    else:\n        target_rows = series_shifted_str.apply(lambda x: np.where(x == series_str)[0])\n    target_vals = target_rows.apply(lambda x: df.loc[x[0], cols[lag]] if len(x)==1 else 0)\n    return target_vals\n\ndef get_all_leak(df, cols=None, nlags=15):\n    \"\"\"\n    We just recursively fetch target value for different lags\n    \"\"\"\n    df =  df.copy()    \n    for i in range(nlags):\n        if \"leaked_target_\"+str(i) not in df.columns:\n            print(\"Processing lag {}\".format(i))\n            df[\"leaked_target_\"+str(i)] = _get_leak(df, cols, i)\n    return df\n\ndef compiled_leak_result():\n    \n    max_nlags = len(cols) - 2\n    train_leak = train[[\"ID\", \"target\"] + cols]\n    train_leak[\"compiled_leak\"] = 0\n    train_leak[\"nonzero_mean\"] = train[transact_cols].apply(\n        lambda x: np.expm1(np.log1p(x[x!=0]).mean()), axis=1\n    )\n    \n    scores = []\n    leaky_value_counts = []\n    leaky_value_corrects = []\n    leaky_cols = []\n    \n    for i in range(max_nlags):\n        c = \"leaked_target_\"+str(i)\n        \n        print('Processing lag', i)\n        train_leak[c] = _get_leak(train_leak, cols, i)\n        \n        leaky_cols.append(c)\n        train_leak = train.join(\n            train_leak.set_index(\"ID\")[leaky_cols+[\"compiled_leak\", \"nonzero_mean\"]], \n            on=\"ID\", how=\"left\"\n        )\n        zeroleak = train_leak[\"compiled_leak\"]==0\n        train_leak.loc[zeroleak, \"compiled_leak\"] = train_leak.loc[zeroleak, c]\n        leaky_value_counts.append(sum(train_leak[\"compiled_leak\"] > 0))\n        _correct_counts = sum(train_leak[\"compiled_leak\"]==train_leak[\"target\"])\n        leaky_value_corrects.append(_correct_counts\/leaky_value_counts[-1])\n        print(\"Leak values found in train\", leaky_value_counts[-1])\n        print(\n            \"% of correct leaks values in train \", \n            leaky_value_corrects[-1]\n        )\n        tmp = train_leak.copy()\n        tmp.loc[zeroleak, \"compiled_leak\"] = tmp.loc[zeroleak, \"nonzero_mean\"]\n        scores.append(np.sqrt(mean_squared_error(y, np.log1p(tmp[\"compiled_leak\"]).fillna(14.49))))\n        print(\n            'Score (filled with nonzero mean)', \n            scores[-1]\n        )\n    result = dict(\n        score=scores, \n        leaky_count=leaky_value_counts,\n        leaky_correct=leaky_value_corrects,\n    )\n    return train_leak, result","5c29b230":"train_leak, result = compiled_leak_result()","8adc6399":"result = pd.DataFrame.from_dict(result, orient='columns')\nresult\nresult.to_csv('train_leaky_stat.csv', index=False)\ntrain_leak.head()","d54dfa54":"best_score = np.min(result['score'])\nbest_lag = np.argmin(result['score'])\nprint('best_score', best_score, '\\nbest_lag', best_lag)","29e9c576":"def rewrite_compiled_leak(leak_df, lag):\n    leak_df[\"compiled_leak\"] = 0\n    for i in range(lag):\n        c = \"leaked_target_\"+str(i)\n        zeroleak = leak_df[\"compiled_leak\"]==0\n        leak_df.loc[zeroleak, \"compiled_leak\"] = leak_df.loc[zeroleak, c]\n    return leak_df","ba18a46c":"leaky_cols = [c for c in train_leak.columns if 'leaked_target_' in c]\ntrain_leak = rewrite_compiled_leak(train_leak, best_lag)\ntrain_leak[['ID']+leaky_cols+['compiled_leak']].head()","1917ad73":"train_res = train_leak[leaky_cols+['compiled_leak']].replace(0.0, np.nan)\ntrain_res.to_csv('train_leak.csv', index=False)","d1cbf2f9":"def compiled_leak_result_test(max_nlags):\n    test_leak = test[[\"ID\", \"target\"] + cols]\n    test_leak[\"compiled_leak\"] = 0\n    test_leak[\"nonzero_mean\"] = test[transact_cols].apply(\n        lambda x: np.expm1(np.log1p(x[x!=0]).mean()), axis=1\n    )\n    \n    scores = []\n    leaky_value_counts = []\n    # leaky_value_corrects = []\n    leaky_cols = []\n    \n    for i in range(max_nlags):\n        c = \"leaked_target_\"+str(i)\n        \n        print('Processing lag', i)\n        test_leak[c] = _get_leak(test_leak, cols, i, verbose=True)\n        \n        leaky_cols.append(c)\n        test_leak = test.join(\n            test_leak.set_index(\"ID\")[leaky_cols+[\"compiled_leak\", \"nonzero_mean\"]], \n            on=\"ID\", how=\"left\"\n        )[[\"ID\", \"target\"] + cols + leaky_cols+[\"compiled_leak\", \"nonzero_mean\"]]\n        zeroleak = test_leak[\"compiled_leak\"]==0\n        test_leak.loc[zeroleak, \"compiled_leak\"] = test_leak.loc[zeroleak, c]\n        leaky_value_counts.append(sum(test_leak[\"compiled_leak\"] > 0))\n        #_correct_counts = sum(train_leak[\"compiled_leak\"]==train_leak[\"target\"])\n        #leaky_value_corrects.append(_correct_counts\/leaky_value_counts[-1])\n        print(\"Leak values found in test\", leaky_value_counts[-1])\n        #print(\n        #    \"% of correct leaks values in train \", \n        #    leaky_value_corrects[-1]\n        #)\n        #tmp = train_leak.copy()\n        #tmp.loc[zeroleak, \"compiled_leak\"] = tmp.loc[zeroleak, \"nonzero_mean\"]\n        #scores.append(np.sqrt(mean_squared_error(y, np.log1p(tmp[\"compiled_leak\"]).fillna(14.49))))\n        #print(\n        #    'Score (filled with nonzero mean)', \n        #    scores[-1]\n        #)\n    result = dict(\n        # score=scores, \n        leaky_count=leaky_value_counts,\n        # leaky_correct=leaky_value_corrects,\n    )\n    return test_leak, result","2f9ae4d9":"test_leak, test_result = compiled_leak_result_test(max_nlags=38)","baa89497":"test_result = pd.DataFrame.from_dict(test_result, orient='columns')\ntest_result","7652ad9c":"test_result.to_csv('test_leaky_stat.csv', index=False)","8cb472b5":"test_leak = rewrite_compiled_leak(test_leak, best_lag)\ntest_leak[['ID']+leaky_cols+[\"compiled_leak\", \"nonzero_mean\"]].head()","0e7a50d6":"NLAGS = 15 #Increasing this might help push score a bit\nall_df = get_all_leak(all_df, cols=cols, nlags=NLAGS)","c9978966":"leaky_cols = [\"leaked_target_\"+str(i) for i in range(NLAGS)]\ntrain = train.join(all_df.set_index(\"ID\")[leaky_cols], on=\"ID\", how=\"left\")\ntest = test.join(all_df.set_index(\"ID\")[leaky_cols], on=\"ID\", how=\"left\")","5e10b744":"train[[\"target\"]+leaky_cols].head(10)","e2e0c152":"train[\"nonzero_mean\"] = train[transact_cols].apply(lambda x: np.expm1(np.log1p(x[x!=0]).mean()), axis=1)\ntest[\"nonzero_mean\"] = test[transact_cols].apply(lambda x: np.expm1(np.log1p(x[x!=0]).mean()), axis=1)","733ba8f8":"#We start with 1st lag target and recusrsively fill zero's\ntrain[\"compiled_leak\"] = 0\ntest[\"compiled_leak\"] = 0\nfor i in range(NLAGS):\n    train.loc[train[\"compiled_leak\"] == 0, \"compiled_leak\"] = train.loc[train[\"compiled_leak\"] == 0, \"leaked_target_\"+str(i)]\n    test.loc[test[\"compiled_leak\"] == 0, \"compiled_leak\"] = test.loc[test[\"compiled_leak\"] == 0, \"leaked_target_\"+str(i)]\n    \nprint(\"Leak values found in train and test \", sum(train[\"compiled_leak\"] > 0), sum(test[\"compiled_leak\"] > 0))\nprint(\"% of correct leaks values in train \", sum(train[\"compiled_leak\"] == train[\"target\"])\/sum(train[\"compiled_leak\"] > 0))\n\ntrain.loc[train[\"compiled_leak\"] == 0, \"compiled_leak\"] = train.loc[train[\"compiled_leak\"] == 0, \"nonzero_mean\"]\ntest.loc[test[\"compiled_leak\"] == 0, \"compiled_leak\"] = test.loc[test[\"compiled_leak\"] == 0, \"nonzero_mean\"]","b3e5c36b":"from sklearn.metrics import mean_squared_error\nnp.sqrt(mean_squared_error(y, np.log1p(train[\"compiled_leak\"]).fillna(14.49)))","7e2585e8":"#submission\nsub = test[[\"ID\"]]\nsub[\"target\"] = test[\"compiled_leak\"]\nsub.to_csv(\"baseline_submission_with_leaks.csv\", index=False)","e0d54b76":"Please go through Giba's post and kernel  to underrstand what this leak is all about\nhttps:\/\/www.kaggle.com\/titericz\/the-property-by-giba (kernel)\nhttps:\/\/www.kaggle.com\/c\/santander-value-prediction-challenge\/discussion\/61329 (post)\n\nAlso, go through this Jiazhen's kernel which finds more columns to exploit leak\nhttps:\/\/www.kaggle.com\/johnfarrell\/giba-s-property-extended-result\n\nI just exploit data property in brute force way and then fill in remaining by row non zero means! This should bring everyone on level-playing field.\n\n**Let the competition begin! :D**","a966f606":"We take time series columns from [here](https:\/\/www.kaggle.com\/johnfarrell\/giba-s-property-extended-result)"}}