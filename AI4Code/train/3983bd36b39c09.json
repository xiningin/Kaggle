{"cell_type":{"7913029f":"code","bbd1efc9":"code","79d7dc48":"code","695ff1a5":"code","32f47658":"code","9fb6f8d5":"code","cd38e2dd":"code","579c526d":"code","eeb4536e":"code","21c6347d":"code","c4af7783":"code","ae7fd62b":"code","b73cde91":"code","b65c17a0":"code","94127f39":"code","ae5875a7":"code","57a7bdb8":"code","4c0b3c4d":"code","206df071":"code","40be9183":"code","fa6bb001":"code","c9e4a951":"code","4cfa8eb4":"code","861e8623":"code","7d35db40":"code","cacc66c9":"code","e8606057":"code","4ab07056":"code","ecae1054":"code","d5e5bba8":"code","2a302ab5":"code","a2cd5765":"code","49bc6d07":"code","8756a300":"code","18afe4bb":"code","445df9df":"code","a6acd2cd":"code","5a11620b":"code","9a2a8f5e":"code","16fe02c5":"code","625388d4":"markdown","75408c67":"markdown","3930eaba":"markdown","dde807ec":"markdown","3c4d6a09":"markdown","748d38f0":"markdown","5f61dfcc":"markdown","461ce56f":"markdown","0e5804e8":"markdown","1fcd9fcd":"markdown","18b24f1b":"markdown","414ca2ac":"markdown","5060e8f8":"markdown","b47b04a1":"markdown","92c550ee":"markdown","09fb7bcc":"markdown","9446935c":"markdown","aedd038b":"markdown","a757ff39":"markdown","c9b9bbc0":"markdown","436db49c":"markdown","64b98510":"markdown"},"source":{"7913029f":"# Import libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport os\nimport os.path\nimport matplotlib.pyplot as plt\n!pip install klib\nimport klib\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve, auc, precision_recall_curve, classification_report, average_precision_score\n\nfrom sklearn.ensemble import ExtraTreesClassifier\n\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import precision_score,f1_score\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\n\nfrom sklearn.linear_model import LogisticRegression\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn import preprocessing\nfrom sklearn.metrics import mean_squared_error\n\nimport warnings\nwarnings.filterwarnings(action='ignore')","bbd1efc9":"#input data\nroot_dir = '\/kaggle\/input\/widsdatathon2021\/'\n\nsample_submission = pd.read_csv(os.path.join(root_dir, \n                    'SampleSubmissionWiDS2021.csv'))\nsolution_template = pd.read_csv(os.path.join(root_dir, \n                    'SolutionTemplateWiDS2021.csv'))\nData_dictionary = pd.read_csv(os.path.join(root_dir,   \n                   'DataDictionaryWiDS2021.csv'))\nUnlabled_data = pd.read_csv(os.path.join(root_dir,     \n                'UnlabeledWiDS2021.csv'))\nTraining_data = pd.read_csv(os.path.join(root_dir,     \n                'TrainingWiDS2021.csv'))","79d7dc48":"display(Data_dictionary.shape)\ndisplay(Unlabled_data.shape)\ndisplay(Training_data.shape)\ndisplay(solution_template.shape)","695ff1a5":"Training_data.isna().any().any()","32f47658":"Training_data.drop('Unnamed: 0', axis = 1, inplace = True)","9fb6f8d5":"display(Training_data.shape)","cd38e2dd":"display(Unlabled_data.shape)\nUnlabled_data.head()","579c526d":"Unlabled_data.isna().any().any()","eeb4536e":"Unlabled_data.drop('Unnamed: 0', axis = 1, inplace = True)","21c6347d":"display(Unlabled_data.shape)\nUnlabled_data.head()","c4af7783":"Training_data.info(verbose=True, null_counts=True)","ae7fd62b":"Training_data.dtypes.value_counts()","b73cde91":"Training_data.isnull().sum()","b65c17a0":"def calc_missing_values(df_name):\n    \n    '''\n    Returns total number and percentage of missing value in each column of a\n    given dataframe.    \n    '''\n    # sum of missing values in each column\n    missing_values = df_name.isnull().sum() \n    \n    # percentage of missing values in each column\n    per_missing = df_name.isnull().sum() * 100 \/ len(df_name)\n    \n    # Table with sum and percentage of missing values\n    missing_table = pd.concat([missing_values, per_missing],axis = 1)\n        \n    # Assign column names\n    missing_table_rename = missing_table.rename(columns ={0: 'Missing Values', 1:'% of missing values'})\n    \n    # Sort it by percentage of missing values\n    \n    sorted_table = missing_table_rename[missing_table_rename.iloc[:,1] !=0].\\\n    sort_values('% of missing values', ascending = False).round(1)\n    \n    print('Out of ' + str(df_name.shape[1])+ ' columns in this dataframe '+ str(sorted_table.shape[0])+ \\\n                         ' columns have missing values')\n    \n    return sorted_table\n        ","94127f39":"# Training data\nmissing_train = calc_missing_values(Training_data)\nmissing_train[:20].style.background_gradient(cmap='viridis')","ae5875a7":"# Test data\nmissing_test = calc_missing_values(Unlabled_data)\nmissing_test[:20].style.background_gradient(cmap='cividis')","57a7bdb8":"train_df = klib.data_cleaning(Training_data) # removes duplicate and empty row\/col","4c0b3c4d":"test_df = klib.data_cleaning(Unlabled_data) # removes duplicate and empty row\/cols#","206df071":"#train_df = Training_data\n#test_df = Unlabled_data","40be9183":"train_df['diabetes_mellitus'].value_counts(normalize = True)","fa6bb001":"train_df['diabetes_mellitus'].astype(int).plot.hist();","c9e4a951":" train_df.dtypes","4cfa8eb4":"cat_col_train = Training_data.select_dtypes('object').columns\ndisplay(len(cat_col_train))\ndisplay(cat_col_train)","861e8623":"cat_col_test = Unlabled_data.select_dtypes('object').columns\ndisplay(len(cat_col_test))\ndisplay(cat_col_test)","7d35db40":"#klib.cat_plot(test_df)","cacc66c9":"cat_list = Training_data.select_dtypes('object').columns\ndisplay(cat_list)","e8606057":"# Creating Label Encoder object\nle = LabelEncoder()\nfor ob in cat_list:\n    train_df[ob] = le.fit_transform(train_df[ob].astype(str))\n    test_df[ob] = le.fit_transform(test_df[ob].astype(str))\nprint(train_df.info())    \nprint(test_df.info()) ","4ab07056":"train_df.fillna(-9999,inplace = True)\ntrain_df.isnull().sum()","ecae1054":"test_df.fillna(-9999,inplace = True)\ntest_df.isnull().sum()","d5e5bba8":"Target = 'diabetes_mellitus'\ntrain_labels = train_df[Target]\ntrain_df_NT = train_df.drop(columns = [Target])\nfeatures = list(train_df_NT.columns)\nprint('Training data shape:', train_df_NT.shape)\nprint('Test data shape:', test_df.shape)","2a302ab5":"X, y = train_df_NT, train_labels","a2cd5765":"# Tree-based feature selection\nclf_f = ExtraTreesClassifier(n_estimators=50)\nclf_f = clf_f.fit(X, y)\nmodel = SelectFromModel(clf_f, prefit=True)\nX_new = model.transform(X)\nX_test_new = model.transform(test_df)","49bc6d07":"X_new.shape,X_test_new.shape","8756a300":"#create the train and validation set for cross-validation\nX_train, X_val, y_train, y_val = train_test_split(X_new, y, test_size=0.2, random_state=123)","18afe4bb":"xgb_cls = xgb.XGBClassifier(\n    max_depth = 4, \n    subsample = 0.8, \n    colsample_bytree = 0.8,\n    colsample_bylevel = 0.8,\n    scale_pos_weight = 1,\n    min_child_weight = 1,\n    reg_alpha = 4,\n    n_jobs = 4, \n    objective = 'binary:logistic',\n    nthread=20,\n   # gamma= 0.01,\n    #seed = 27,\n    #n_estimators=1000,\n)","445df9df":"\nxgb_cls.fit(X_train,y_train)\n\ny_pred = xgb_cls.predict_proba(X_val)\n","a6acd2cd":"y_scores = y_pred[:, 1]","5a11620b":"fpr, tpr, _ = roc_curve(y_val, y_scores)\nroc_auc = auc(fpr, tpr)\naverage_precision = average_precision_score(y_val, y_scores)\nprecision, recall, _ = precision_recall_curve(y_val, y_scores)\nprint(roc_auc)","9a2a8f5e":"xgb_cls_pred = xgb_cls.predict_proba(X_test_new)[:,1]","16fe02c5":"# Submission dataframe\nsubmit = test_df[['encounter_id']]\nsubmit['diabetes_mellitus'] = xgb_cls_pred\nsubmit.to_csv('xgb_cls.csv',index=False)\nsubmit.head()","625388d4":"Test data has 10234 entries and 179 variables which is 1 less than the training data due to the presence of TARGET column.","75408c67":"# Missing  data handling","3930eaba":"## <span style='color:purple'> Input data <\/span>","dde807ec":"Training data has 130157 entries and 181 variables. ","3c4d6a09":"## <span style='color:purple'> Data Exploration <\/span>\n","748d38f0":"There are some missing data in training data.","5f61dfcc":"There is class imbalance in this dataset.","461ce56f":"### Number of unique column datatypes ","0e5804e8":"# Feature selection using SelectFromModel","1fcd9fcd":"This column do not contain useful information so let's drop it.","18b24f1b":"# Categorical features","414ca2ac":"# <span style='color:purple'>  Women in Data Science Datathon 2021       <\/span>\n\n<div style=\"text-align: justify;\n             font-size:18px\">\nObjective of <span style='color:purple'> WiDS Datathon 2021  <\/span> is to develop models and make predictions to determine whether a patient admitted to ICU has been diagnosed with a particular type of diabetes, Diabetes Mellitus, using labeled training data from the first 24 hours of intensive care.\n    <\/div>","5060e8f8":"## Target Column in Training data","b47b04a1":"Training data has 130157 entries and 180 variables. ","92c550ee":"There are three unique datatypes.","09fb7bcc":"## Missing values","9446935c":"### Columns","aedd038b":"## Test data","a757ff39":"## Training data","c9b9bbc0":"# Missing Values","436db49c":"## <span style='color:purple'>  Import libraries <\/span>","64b98510":"### Column types in training and test data"}}