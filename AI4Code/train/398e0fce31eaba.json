{"cell_type":{"899eed29":"code","cc4a258b":"code","1df9061c":"code","cc47e86e":"code","c8a06ef4":"code","cedf0db5":"code","70a2b9cf":"code","2ac6f574":"code","d07041f6":"code","b2bfdb84":"code","42830712":"code","306f8857":"code","0c829326":"code","1300378c":"code","5f490ab2":"code","b175a13b":"code","ddadccb0":"code","22026c16":"code","31a68f93":"code","e035de5f":"code","cbbb5797":"code","9bbff63a":"code","d781f11a":"code","9d8031e4":"code","331b4c6c":"code","83084bf5":"code","33948864":"code","b29b615e":"code","c32a76f8":"markdown","e8842aec":"markdown","5a069366":"markdown","fe1881b0":"markdown","6fda0b03":"markdown","5769b34d":"markdown","935736f9":"markdown","0ce3b870":"markdown","4d327f72":"markdown","468997fc":"markdown","9032d656":"markdown","f1aaca44":"markdown","91ea702a":"markdown","e1a04713":"markdown","77ee05c6":"markdown","86b1587e":"markdown"},"source":{"899eed29":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cc4a258b":"pd.set_option('display.max_rows', 500)\n#plots\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n#nltk\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem import SnowballStemmer\n#re\nimport re\n#sklearn\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","1df9061c":"data = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')","cc47e86e":"data.head()","c8a06ef4":"data.info()","cedf0db5":"colors = px.colors.qualitative.D3\nvs_count = data.type.value_counts()\nfig = px.pie(values=vs_count.values, names=vs_count.index, title = 'Movies vs TV Shows', \\\n             color_discrete_sequence=colors)\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","70a2b9cf":"data['year_added'] = pd.DatetimeIndex(data['date_added']).year\nd1 = data[data[\"type\"] == \"TV Show\"].year_added.value_counts()\nd2 = data[data[\"type\"] == \"Movie\"].year_added.value_counts()\nd1.sort_index(inplace=True)\nd2.sort_index(inplace=True)\n\nt1 = go.Scatter(x = d1.index, y=d1.values ,\n                    mode='lines+markers',\n                    name='TV Show')\n\n\nt2 = go.Scatter(x = d2.index, y=d2.values ,\n                    mode='lines+markers',\n                    name='Movie')\n\nlayout = go.Layout(hovermode= 'closest', title = 'Content added over the years' , \\\n                   xaxis = dict(title = 'Year'), yaxis = dict(title = 'Content added'))\n\nfig = go.Figure(\n    data=[t1, t2],\n    layout=layout\n)\n\nfig.show()","2ac6f574":"country_count = data['country'].value_counts()[:25]\nfig = px.pie(values=country_count.values, names=country_count.index, \\\n             title='Conent share of countries', color_discrete_sequence=colors)\nfig.show()","d07041f6":"movie_duration = data[data.type == 'Movie'].duration\nmovie_duration = movie_duration.apply(lambda x : float(x.replace(' min','')))\nt1 = go.Histogram(\n                    x = movie_duration,\n                    xbins=dict(size=0.5),\n                    marker=dict(color = colors)\n                    )\n\nlayout = go.Layout(title = 'Distribution of movie duration', xaxis = dict(title = 'Minutes'))\nfig = go.Figure(data = [t1], layout = layout)\nfig.show()","b2bfdb84":"show_duration = data[data.type == 'TV Show'].duration\nshow_duration = show_duration.apply(lambda x : float(re.sub(' Seasons?','',x)))\nt2 = go.Histogram(\n                    x = show_duration,\n                    xbins=dict(size=0.5),\n                    marker=dict(color = colors)\n                    )\n\nlayout2 = go.Layout(title = 'Distribution of show duration', xaxis = dict(title = 'Seasons'))\nfig = go.Figure(data = [t2], layout = layout2)\nfig.show()","42830712":"data = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')","306f8857":"data.drop(['show_id','type','date_added','release_year','rating','duration'], axis=1, inplace=True)\ndata.head()","0c829326":"data.isna().sum().sort_values(ascending=False)","1300378c":"data.dropna(inplace=True)","5f490ab2":"library = data.copy()\nlibrary.reset_index(inplace=True, drop=True)","b175a13b":"english_stopwords = stopwords.words('english')\n#base of english stopwords\nstemmer = SnowballStemmer('english')\n#stemming algorithm\nregex = \"@\\S+|https?:\\S+|http?:\\S|[^A-Za-z0-9]+\"\n#regex used for cleaning text from all unwanted marks","ddadccb0":"def preprocess(content, stem=False):\n  content = re.sub(regex, ' ', str(content).lower()).strip()\n  tokens = []\n  for token in content.split():\n    if token not in english_stopwords:\n      tokens.append(stemmer.stem(token))\n  return \" \".join(tokens)","22026c16":"data.description = data.description.apply(lambda x: preprocess(x))\n\ndata.listed_in = data.listed_in.apply(lambda x: preprocess(x))\n\ndata.listed_in = data.listed_in.apply(lambda x: x.lower().split(\" \")) \n\ndata.description = data.description.apply(lambda x: x.lower().split(\" \"))\n\ndata.director = data.director.apply(lambda x: x.lower().split(\",\"))\n\ndata.cast = data.cast.apply(lambda x: x.lower().split(\",\"))\n\ndata.country = data.country.apply(lambda x: x.lower().split(\",\"))","31a68f93":"for index, row in data.iterrows():\n    row['director'] = [item.replace(\" \", \"\") for item in row['director']]\n    row['cast'] = [item.replace(\" \", \"\") for item in row['cast']]\n    row['country'] = [item.replace(\" \", \"\") for item in row['country']]","e035de5f":"data.set_index('title', inplace = True)\ndata.head()","cbbb5797":"columns = data.columns\ndata['bagofwords'] = \"\"\n\nfor index, row in data.iterrows():\n    words = ''\n    for column in columns:\n        words = words + ' '.join(row[column])+' '\n    row['bagofwords'] = words\n    \ndata.drop([column for column in columns], axis=1, inplace=True)","9bbff63a":"data.head()","d781f11a":"count = CountVectorizer()\ncount_matrix = count.fit_transform(data['bagofwords'])\ncosine_sim = cosine_similarity(count_matrix, count_matrix)","9d8031e4":"def recommender(title):\n    \n    \n    index = library[library['title']==str(title)].index[0]\n    \n    # creating a Series with the similarity scores in descending order\n    similar_indexes = pd.Series(cosine_sim[index]).sort_values(ascending=False)\n    # getting the indexes of the 10 most similar movies\n    top5 = list(similar_indexes.iloc[1:6].index)\n    \n    recommended_movies = library.iloc[pd.Index(library.index).get_indexer(top5)]\n\n    return recommended_movies","331b4c6c":"recommender('Bad Boys')","83084bf5":"recommender('Indiana Jones and the Kingdom of the Crystal Skull')","33948864":"recommender('Indiana Jones and the Kingdom of the Crystal Skull')","b29b615e":"recommender('Casino Royale')","c32a76f8":"### Distribution of movie duration\nAttempt to perform distplot equivalent do sns.distplot","e8842aec":"# Content-based recommender\nContent-based recommenders suggest similar items based on a particular item. This system uses item metadata, such as director, description, cast, etc. for movies, to make these recommendations. The general idea behind these recommender systems is that if a person likes a particular item, he or she will also like an item that is similar to it. And to recommend that, it will make use of the user's past item metadata. A good example could be YouTube, where based on your history, it suggests you new videos that you could potentially watch.","5a069366":"### More sophisticated recommender systems soon...","fe1881b0":"# EDA with Plotly\nDuring EDA i try to learn Plotly and prepare all of plots on my own. Not in popular kaggle manner of Cmd+C, Cmd+V.","6fda0b03":"### EDA to be continued...","5769b34d":"# In the end\n**<center>Presented notebook is not yet complete. I will try to improve it regularly with more interesting plots in the Plotly library and more complex recommendation systems. Another recommendation system I would like to build will be based on deep learning.<\/center>**\n\n**<center> More info soon... <\/center>**\n\n\n","935736f9":"### Content added over the years","0ce3b870":"# About notebook\nThis notebook was created to expand my knowledge of recommender systems. When working on the notebook, I will try to expand the information on recommender systems as much as possible. I will also try to conduct a exploratory data analysis using the Plotly library, which I have not dealt with before.\n\nI would like the notebook to be a kind of sandbox which will allow me to expand my knowledge and abilities on this subject. In next stages of the notebook's development I will try to integrate my recommender systems with other external datasets as suggested in the dataset description. ","4d327f72":"### Movies vs TV Shows","468997fc":"# Introduction\nThis dataset consists of tv shows and movies available on Netflix as of 2019. The dataset is collected from Flixable which is a third-party Netflix search engine.\n\nIn 2018, they released an interesting report which shows that the number of TV shows on Netflix has nearly tripled since 2010. The streaming service\u2019s number of movies has decreased by more than 2,000 titles since 2010, while its number of TV shows has nearly tripled. It will be interesting to explore what all other insights can be obtained from the same dataset.\n\nIntegrating this dataset with other external datasets such as IMDB ratings, rotten tomatoes can also provide many interesting findings.\n\nCurrently there has been an update and now we are able to process new data even from 2021. ","9032d656":"### Missing values","f1aaca44":"<h3 style=\"text-align:center;\"><center><font color='blue'>Upvotes and sugestions<\/font> are welcome<\/center><\/h2>","91ea702a":"### Content share of countries \nLimited to 25 countries of largest share.","e1a04713":"### Dropping unecessary columns","77ee05c6":"### Distribution of show duration","86b1587e":"<h1 style=\"font-family:verdana;\"> <center> \ud83c\udfac Netflix recommender systems \ud83c\udf7f<\/center> <\/h1>\n<img src=\"https:\/\/cdn.vox-cdn.com\/thumbor\/S8y46C9A3UraH2Xx4-0KZ4zpCwg=\/0x0:1280x720\/620x413\/filters:focal(538x258:742x462):gifv():no_upscale()\/cdn.vox-cdn.com\/uploads\/chorus_image\/image\/62980013\/netflix.0.gif\">"}}