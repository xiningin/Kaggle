{"cell_type":{"a56980a6":"code","b4ad438e":"code","69800930":"code","442e8d7d":"code","ab2e1da6":"code","90b1df6b":"code","e02c6366":"code","5d1911fb":"code","a269cad4":"code","59dc9486":"code","f2ca460d":"code","e3fb2d42":"code","f616fb1f":"code","67860b55":"code","614be554":"code","92064933":"code","69851dc2":"code","e267d4cf":"code","855e8880":"code","4535aa18":"code","2b0795a8":"code","5adbdddf":"code","9a2ee740":"code","4df46483":"code","04003eef":"code","4732cc82":"code","6eb5c50f":"code","062a97bc":"code","6bfd20c4":"code","29217691":"code","8813e8b4":"code","eaac6b46":"code","82d5b463":"code","4d1ec832":"code","c9f3daea":"code","65b0b496":"code","2f3ab74f":"code","c22ad49b":"code","e4ddefae":"code","445ff7a5":"code","fd565514":"markdown","bf2b89bf":"markdown","4fde3076":"markdown","aedb539e":"markdown","b2d6a505":"markdown","6452ea99":"markdown","fe4c8e07":"markdown"},"source":{"a56980a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b4ad438e":"import pandas as pd","69800930":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv')","442e8d7d":"train.info()","ab2e1da6":"test.info()","90b1df6b":"train.sample(3)","e02c6366":"train['Date'] = pd.to_datetime(train['Date'])\ntest['Date'] = pd.to_datetime(test['Date'])","5d1911fb":"train.head(5)","a269cad4":"train.tail(5)","59dc9486":"train['Date'] = train['Date'].astype('int64')\ntest['Date'] = test['Date'].astype('int64')","f2ca460d":"train.iloc[235:300,:]","e3fb2d42":"train.tail(5)","f616fb1f":"train.info()","67860b55":"from collections import defaultdict\ncountryCount = 0\ncountryList = []\nprovinceDict = defaultdict(list)\nfor country in train['Country\/Region'].unique():\n    countryList.append(country)\n    countryCount = countryCount+1\n    countryWithProvince = train[train['Country\/Region'] == country]\n    if countryWithProvince['Province\/State'].isna().unique() == True:\n        #print('No province in ', country)\n        continue\n    else:\n        provinceDict[country].append(countryWithProvince['Province\/State'].unique())\nprint(\"countryCount : \",len(countryList))\n# print(countryList)\nprint(\"\\nCountries with provinces :\" ,len(provinceDict.keys()))\n# for k,v in provinceDict.items():\n#     print('\\n',k,v)\n","614be554":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndef FunLabelEncoder(df):\n    for c in df.columns:\n        if df.dtypes[c] == object:\n            le.fit(df[c].astype(str))\n            #print(c)\n            #df[c].fillna('khali', inplace=True)\n            df[c] = le.transform(df[c].astype(str))\n    return df\n#trainX = FunLabelEncoder(trainX)","92064933":"train = FunLabelEncoder(train)\ntrain.info()\ntrain.iloc[235:300,:]","69851dc2":"test = FunLabelEncoder(test)\ntest.info()","e267d4cf":"train.iloc[:,:-2].sample(3)","855e8880":"X = train.iloc[:,:-2]\nprint(X.shape)\ndel X['Lat']\ndel X['Long']\nprint(X.shape)\nX.sample(3)","4535aa18":"Y = train.iloc[:,-2:]\nprint(Y.shape)\nY.sample(3)","2b0795a8":"from sklearn.model_selection import train_test_split \ntrainX , valX, trainY, valY = train_test_split(X, Y, random_state=1)","5adbdddf":"y1Train = trainY.iloc[:,0]\nprint(y1Train.shape)\ny1Train.sample(3)","9a2ee740":"y2Train = trainY.iloc[:,1]\ny2Train.sample(3)","4df46483":"y1Val = valY.iloc[:,0]\ny1Val.sample(3)","04003eef":"y2Val = valY.iloc[:,1]\ny2Val.sample(3)","4732cc82":"print(trainX.shape)\ntrainX.sample(3)","6eb5c50f":"print(trainX.info())","062a97bc":"trainX.iloc[:,1:].sample(3)","6bfd20c4":"from sklearn.tree import DecisionTreeRegressor\nlrModel1 = DecisionTreeRegressor(random_state = 27)\n%time lrModel1.fit(trainX.iloc[:,1:], y1Train)","29217691":"%time y1Pred = lrModel1.predict(valX.iloc[:,1:])\nprint(y1Pred[:,])","8813e8b4":"from sklearn.metrics import mean_absolute_error\n\nprint(\"Accuracy in train set : \", lrModel1.score(trainX.iloc[:,1:], y1Train))\nprint(\"RMSE : \", mean_absolute_error(y1Val, y1Pred)**(0.5))","eaac6b46":"lrModel2 = DecisionTreeRegressor(random_state = 27)\n%time lrModel2.fit(trainX.iloc[:,1:], y2Train)\n\n%time y2Pred = lrModel2.predict(valX.iloc[:,1:])\n\nprint(\"Accuracy in train set : \", lrModel2.score(trainX.iloc[:,1:], y2Train))\nprint(\"RMSE : \", mean_absolute_error(y2Val, y2Pred)**(0.5))","82d5b463":"print(test.shape)\ntest.sample(3)","4d1ec832":"del test['Lat']\ndel test['Long']\ntest.sample(3)","c9f3daea":"test.iloc[:,1:].sample(3)","65b0b496":"%time finalPred1 = lrModel1.predict(test.iloc[:,1:])\nprint(finalPred1[:,])","2f3ab74f":"%time finalPred2 = lrModel2.predict(test.iloc[:,1:])\nprint(finalPred2[:,])","c22ad49b":"outputFile = pd.DataFrame({\"ForecastId\": test.ForecastId,\n                           \"ConfirmedCases\": (finalPred1+0.5).astype('int'),\n                           \"Fatalities\": (finalPred2+0.5).astype('int')})","e4ddefae":"outputFile.sample(3)","445ff7a5":"outputFile.to_csv(\"submission.csv\", index=False)","fd565514":"## taking on test data","bf2b89bf":"## train-test split","4fde3076":"### country wise province segregation","aedb539e":"## model2 training : Fatalities","b2d6a505":"## label encoding","6452ea99":"## date output seggregation","fe4c8e07":"## model1 training : ConfirmedCases"}}