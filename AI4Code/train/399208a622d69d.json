{"cell_type":{"0087809c":"code","8020e387":"code","292a7a64":"code","902192e4":"code","93ae79a8":"code","f2657d23":"code","56e112fd":"code","52d9ba30":"code","055fe563":"code","fb177b58":"code","f12ec8d8":"code","7eed9396":"code","e31d4f46":"code","442ee966":"code","38b6a434":"code","38ebcfdf":"code","3497f26a":"markdown"},"source":{"0087809c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom sklearn.ensemble import RandomForestClassifier\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8020e387":"trainData = pd.read_csv('..\/input\/train.csv',index_col='ID_code')","292a7a64":"total = trainData.isnull().sum().sort_values(ascending=False)\npercent = (trainData.isnull().sum()\/trainData.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head()","902192e4":"model = RandomForestClassifier(random_state=1, max_depth=10,n_estimators=20)","93ae79a8":"X = trainData.drop(['target'],axis=1)\n\ny = trainData['target']\n\nmodel.fit(X,y)\n\n\n","f2657d23":"\nfeatures = X.columns\n\nimportances = model.feature_importances_\n\nindices = np.argsort(importances)[-20:]","56e112fd":"plt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='b', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","52d9ba30":"filteredFeatures = [features[i] for i in np.argsort(importances)[-100:]]","055fe563":"Xfinal = trainData.filter(filteredFeatures,axis=1)","fb177b58":"y = trainData['target']","f12ec8d8":"def plotCorrelation(df):\n    corr = df.corr()\n    # Generate a mask for the upper triangle\n    mask = np.zeros_like(corr, dtype=np.bool)\n    mask[np.triu_indices_from(mask)] = True\n    \n    # Set up the matplotlib figure\n    f, ax = plt.subplots(figsize=(11, 9))\n\n    # Generate a custom diverging colormap\n    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n    \n    # Draw the heatmap with the mask and correct aspect ratio\n    sns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","7eed9396":"plotCorrelation(Xfinal)","e31d4f46":"Xfinal.corr()","442ee966":"Xfinal['var81_139'] = Xfinal['var_81'] + Xfinal['var_139']","38b6a434":"Xfinal = Xfinal.drop(['var_81','var_139'],axis=1)","38ebcfdf":"plotCorrelation(Xfinal)","3497f26a":"Trying correlation amongst the filtered features and testing linearity between variables"}}