{"cell_type":{"cf9a8840":"code","3830a9e3":"code","0659a053":"code","5ec7c63a":"code","5c5325a1":"code","cad795e8":"code","a1e47739":"code","f75c0eb5":"code","f98bc02e":"code","07935b75":"code","f5041b95":"code","c035b588":"code","062cc9ac":"code","33624360":"code","d39e9f19":"markdown","53931220":"markdown","c335184c":"markdown","0ba6d6f9":"markdown","86fca7e2":"markdown","4283d458":"markdown","46e36baf":"markdown"},"source":{"cf9a8840":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","3830a9e3":"import os\nprint(os.listdir(\"..\/input\"))","0659a053":"import pandas as pd\n\ndat=pd.read_csv(\"..\/input\/roboBohr.csv\")","5ec7c63a":"dat.head(5)","5c5325a1":"df=dat.drop(['Unnamed: 0','pubchem_id'],axis=1)\ndf.shape","cad795e8":"X = df.drop(['Eat'], axis = 1)\nY = df['Eat']\ny=Y.values\nx=X.values","a1e47739":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.10, random_state=42)","f75c0eb5":"x_train.shape\n","f98bc02e":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras import backend as K\nfrom keras import regularizers\nfrom keras.callbacks import EarlyStopping","07935b75":"model = Sequential()","f5041b95":"model.add(Dense(1000, input_dim=x.shape[1],kernel_initializer='normal', activation='sigmoid'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(500,kernel_initializer='normal', activation='sigmoid'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(50,kernel_initializer='normal'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(1))\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmonitor = EarlyStopping(monitor='val_loss', min_delta=1e-3, patience=5, verbose=1, mode='auto')\n\nmodel.fit(x_train, y_train,validation_data=(x_test,y_test),callbacks=[monitor],verbose=2,epochs=1000)","c035b588":"prd=model.predict(x_test[4:6],verbose=1)","062cc9ac":"prd","33624360":"y_test[4:6]\n","d39e9f19":"**importing necessary packages**","53931220":"we import the dataset using pandas","c335184c":"Now we split the data to training and testing","0ba6d6f9":"Creating labels and converting them to arrays","86fca7e2":"any comments appriciated --   keep learning :)","4283d458":"Dropping the first column and id","46e36baf":"we shall see some results ."}}