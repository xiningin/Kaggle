{"cell_type":{"0f5bd9ae":"code","167cc9cd":"code","ad2a09aa":"code","a783885a":"code","fdc58a6c":"code","cc60da12":"code","9e5df67a":"code","1a78ce0c":"code","874ddebe":"code","cb241bcb":"code","e9148214":"code","ac24998b":"code","88a0d078":"code","974f3838":"code","c85203f0":"code","2f892e5c":"code","586e3956":"code","2b8242f8":"code","0fe5d089":"code","3fc933e2":"code","59da2e93":"code","11030609":"code","29c7e7fb":"code","3e68375a":"code","7b70c504":"code","ef57b520":"code","d40c83c6":"code","781ac1b4":"markdown","e610e8d7":"markdown","904ca2b1":"markdown","5f64eb36":"markdown","9924ff60":"markdown","8bf627fc":"markdown","a80dafd5":"markdown","fbb2ece4":"markdown","e40b208f":"markdown","ef7e5a08":"markdown","cf875ccc":"markdown","752da7ae":"markdown","51d6d419":"markdown","9f09bc03":"markdown","70fbf15d":"markdown","8913a54e":"markdown","2cb349ba":"markdown","3695118e":"markdown","5a8a9b35":"markdown","b9e9d642":"markdown","49d3de75":"markdown","ad239f6b":"markdown","839e49a7":"markdown","60f78c01":"markdown","27178a1c":"markdown","2b23db35":"markdown","ffc26818":"markdown","ebfce7d4":"markdown","5b3046e6":"markdown","c6df6812":"markdown","3086efd3":"markdown","204482c9":"markdown","863a33da":"markdown","efecb1e4":"markdown","ed6e2057":"markdown","c92878da":"markdown","a3fa84b2":"markdown","9d4d6274":"markdown","f9166676":"markdown","5458096a":"markdown","22a18c45":"markdown","77665124":"markdown","4b2ab380":"markdown","4be52e0d":"markdown","2598e519":"markdown","9b10d4cf":"markdown","8609748c":"markdown","27749c1a":"markdown"},"source":{"0f5bd9ae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","167cc9cd":"%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom matplotlib import ticker\nimport seaborn as sns\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf, month_plot\nfrom statsmodels.tsa.stattools import kpss, adfuller\nfrom statsmodels.tsa.seasonal import STL\nfrom pylab import rcParams\nfrom platform import python_version\n\nprint(f'Python Version: {python_version()}')","ad2a09aa":"rcParams['figure.figsize'] = (10, 6) \nsns.set_theme(palette='muted', style='whitegrid')","a783885a":"path = '..\/input\/hourly-energy-consumption\/COMED_hourly.csv'\ndf = pd.read_csv(path)\nprint(df.shape)\nprint(df.dtypes)\ndf.head()","fdc58a6c":"df.info(verbose=False)","cc60da12":"df.describe()","9e5df67a":"df.isnull().any()","1a78ce0c":"df['Datetime'] = df.Datetime.astype('Datetime64')\nprint(df.dtypes)\ndf.head()","874ddebe":"df['Datetime'].describe(datetime_is_numeric=True)","cb241bcb":"ax = sns.lineplot(data=df, x='Datetime', y='COMED_MW')\nax.yaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\nplt.xlabel('Datetime')\nplt.ylabel('Energy Consumption (MW)')\nplt.title('ComEd Hourly Energy Consumption', fontsize=16)\nplt.show()","e9148214":"# Get quarters from the datetime\ndf['QUARTER'] = df['Datetime'].dt.quarter\ndf.head()","ac24998b":"# Convert dataframe to average monthly format\ndf = df.resample('M', on='Datetime').mean().rename(columns={'COMED_MW':'MONTHLY_AVG'})\ndf['QUARTER'] = df['QUARTER'].astype(int)\ndf.head()","88a0d078":"ax = sns.lineplot(data=df, x='Datetime', y='MONTHLY_AVG')\nax.yaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\nplt.xlabel('Datetime')\nplt.ylabel('Avg. Energy Consumption (MW)')\nplt.title('ComEd Monthly Average Energy Consumption', fontsize=16)\nplt.show()","974f3838":"plt.figure(figsize=(12,12))\n\nfor i in range(1, 10):\n    ax=plt.subplot(3, 3, i)\n    # Create a lag plot for each quarter\n    pd.plotting.lag_plot(df.loc[df['QUARTER'] == 1, 'MONTHLY_AVG'], lag=i, c='firebrick', label='Q1')    \n    pd.plotting.lag_plot(df.loc[df['QUARTER'] == 2, 'MONTHLY_AVG'], lag=i, c='olive', label='Q2')\n    pd.plotting.lag_plot(df.loc[df['QUARTER'] == 3, 'MONTHLY_AVG'], lag=i, c='navy', label='Q3')\n    pd.plotting.lag_plot(df.loc[df['QUARTER'] == 4, 'MONTHLY_AVG'], lag=i, c='gold', label='Q4')\n    ax.yaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    plt.legend()\n    plt.title(f'Lag {i}')\n\nplt.tight_layout()\nplt.show()","c85203f0":"# Select a multiple of the seasonal frequency for the number of lags\nplot_acf(df['MONTHLY_AVG'])\nplt.xlabel('Lags')\nplt.tight_layout()\nplt.show()","2f892e5c":"plot_pacf(df['MONTHLY_AVG'])\nplt.xlabel('Lags')\nplt.tight_layout()\nplt.show()","586e3956":"diff = df['MONTHLY_AVG'].diff(1).dropna()\ndiff.head()","2b8242f8":"ax = sns.lineplot(data=diff)\nax.yaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\nplt.xlabel('Datetime')\nplt.ylabel('Difference')\nplt.title('ComEd Monthly Average Energy Consumption', fontsize=16)\nplt.show()","0fe5d089":"def kpss_test(timeseries):\n    # Create a metrics table for kpss test\n    print('KPSS Metrics:')    \n    kpsstest = kpss(timeseries, regression='c', nlags='auto')\n    kpss_output = pd.Series(\n        kpsstest[0:3], \n        index = ['Test Statistic', \n               'p-Value', \n               'Number of Lags'\n        ]\n    )\n    \n    for key, value in kpsstest[3].items():\n        kpss_output[f'Critical Value ({key})'] = value\n    \n    return kpss_output","3fc933e2":"kpss_test(diff)","59da2e93":"def adf_test(timeseries):\n    # Create a metrics table for adf test\n    print('Dickey-Fuller Metrics:')    \n    adftest = adfuller(timeseries, autolag='AIC')\n    adfoutput = pd.Series(\n        adftest[0:4],\n        index = [\n            'Test Statistic',\n            'p-Value',\n            'Number of Lags',\n            'Number of Observations'\n        ]\n    )\n    \n    for key, value in adftest[4].items():\n        adfoutput[f'Critical Value ({key})'] = value\n    \n    return adfoutput","11030609":"adf_test(diff)","29c7e7fb":"fig, ax = plt.subplots()\nsns.lineplot(ax=ax, data=df, x='QUARTER', y='MONTHLY_AVG', ci=95)\nax.yaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\nax.set_xticks([1,2,3,4])\nax.set_xticklabels(['Q1', 'Q2', 'Q3', 'Q4'])\nax.set_ylabel('Avg. Energy Consumption (MW)')\nax.set_xlabel('Seasonal Quarter')\nax.set_title('ComEd Monthly Average Energy Consumption (2011 - 2018)')\nplt.show()","3e68375a":"fig, ax = plt.subplots()\nmonth_plot(df['MONTHLY_AVG'], ax=ax)\nax.yaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\nplt.title('ComEd Monthly Average Energy Consumption')\nplt.ylabel('Avg. Energy Consumption (MW)')\nplt.show()","7b70c504":"# Create a 3 month moving average\ndf['MOVING_AVG'] = df['MONTHLY_AVG'].rolling(3, min_periods=3).mean()\ndf.head(12)","ef57b520":"fig, ax = plt.subplots()\nsns.lineplot(data=df[['MONTHLY_AVG', 'MOVING_AVG']])\nax.yaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\nplt.xlabel('Datetime')\nplt.ylabel('Avg. Energy Consumption (MW)')\nplt.legend(labels=['Energy Consumption', '3-Month Moving Average'])\nplt.title('ComEd Monthly Average Energy Consumption', fontsize=16)\nplt.show()","d40c83c6":"# Decompose the timeseries data\nres = STL(df['MONTHLY_AVG'], period=12).fit()\n\n# Create plots for each STL component\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1)\n\nplt.suptitle('STL Decomposition')\n\nsns.lineplot(data=df['MONTHLY_AVG'], ax=ax1)\nax1.set_title('ComEd Monthly Average Energy Consumption')\nax1.set_ylabel('')\nax1.yaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n\nsns.lineplot(data=res.trend, ax=ax2)\nax2.yaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n\nsns.lineplot(data=res.seasonal, ax=ax3)\nax3.yaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n\nsns.lineplot(data=res.resid, ax=ax4)\nax4.yaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n\nplt.tight_layout()\nplt.show()","781ac1b4":"We will add a `QUARTER` column to our timeseries dataframe. This will help with seasonal plotting later on.","e610e8d7":"## 1.1 Import Libraries","904ca2b1":"Here we see a seasonal component similar in pattern to our quarter and month plots. The smoothed trend displays a gradual drop in average energy usage from 2011 to 2016. The residual component is random and doesn't show significant signal from the trend or season.   ","5f64eb36":"A moving average is created by calculating the mean of timeseries values over a specified set of past timesteps.  This has the effect of smoothing out the time plot.  We'll plot a 3 month moving average that corresponds to each seasonal quarter.  ","9924ff60":"We can see that July is the month where peak average energy usage occurs.  January sees the highest usage out of the winter months, and the lowest points are in April and October. Overall, this is a close reflection of the pattern observed in the quarter plot. ","8bf627fc":"As displayed above the partial autocorrelation shows only the direct relationship between a timstep and its lag. The indirect relations are less significant and fall closer to zero.\n\nWhen deciding on a regression model, the timeseries will need to undergo a transformation known as differencing to remove any seasonality or trend. This will make the data stationary (no trend or seasonality) and better suited for modeling.","a80dafd5":"# 7. Timeseries Differencing","fbb2ece4":"Here we see the small p-value is below 0.05 so the null hypothesis is rejected. Both ADF and KPSS tests verify that the data is stationary so a second-order differencing is not needed. ","e40b208f":"The mean of a timeseries is stabilized when the difference is calculated between consecutive steps.  This reduces trend and seasonality. The data becomes stationary which means its statistical properties don't change over time.  The mean, variance, and covariance remain static.  ","ef7e5a08":"## 1.2 Configure Settings","cf875ccc":"## 8.1 Quarter Plot","752da7ae":"The second of our stationarity tests is the Augmented Dickey-Fuller ([ADF](https:\/\/en.wikipedia.org\/wiki\/Augmented_Dickey%E2%80%93Fuller_test)) Test.  This test assumes the data is non-stationary as the null hypothesis. A p-value below 0.05 indicates a stationary timeseries. This is opposite the KPSS test so care must be taken when making conclusions.     ","51d6d419":"Below we can see this timeseries runs from January 1st, 2011 to August 3rd, 2018.","9f09bc03":"# 5. Autocorrelation Plot","70fbf15d":"## 1.3 Load the ComEd Dataset","8913a54e":"# 8. Seasonal Plots","2cb349ba":"# Energy Timeseries Advanced Data Visualization","3695118e":"When learning data science it's easy to get lost in the endless assortment of data visualiztions. That being the case, visualizations specific to certain types of data can sometimes be overlooked. This notebook will focus on a selection of advanced visualization methods for timeseries data. These are methods that can be used to understand the properties of a timeseries. The dataset for this exercise is the [ComEd](https:\/\/en.wikipedia.org\/wiki\/Commonwealth_Edison) hourly energy consumption dataset which was recorded in megawatts (MW). ","5a8a9b35":"## 8.2 Month Plot","b9e9d642":"The positive linear relationship in lags 3, 6, and 9 demonstrates autocorrelation at regular intervals. This suggests that the data has seasonality (non-stationary) and rules out randomness.  We can further verify this with an autocorrelation plot. ","49d3de75":"In the `MOVING_AVG` column you can observe the consecutive means for each of the previous three monthly averages. This is called a moving average of the third order. The higher the order, the smoother the plot.","ad239f6b":"## 7.1 Kwiatkowski-Phillips-Schmidt-Shin Test","839e49a7":"We've employed various timeseries visualizations for analysis of our ComEd energy use case.  Beginning with a standard time plot, we worked through lag plots and autocorrelations to differencing, seasonal plots, a moving average, and STL decomposition.  The next phase in this timeseries exercise will be to explore forecasting methods.   ","60f78c01":"The Kwiatkowski-Phillips-Schmidt-Shin Test ([KPSS](https:\/\/en.wikipedia.org\/wiki\/KPSS_test)) checks for the stationarity of a timeseries by testing the null hypothesis that the data is stationary about a trend.  A p-value above 0.05 indicates the data is trend-stationary. We'll set up metric tables for our differenced data and view the results.","27178a1c":"# 1. Introduction ","2b23db35":"The autocorrelation plot is similar to the lag plot in that it also checks for randomness in the timeseries. Autocorrelations are calculated for the data at different lags. A completely random timeseries will show autocorrelations near zero for all lags. ","ffc26818":"Seasonal plots are similar to time plots but with data plotted against a seasonal period. The period can be daily, monthly, or specific to a particular use case.  Here we will plot energy data from all years against the quarterly periods. ","ebfce7d4":"The result below is a smoother time plot.  More practical when the use case involves monthly billing.","5b3046e6":"The large p-value is above 0.05, which means our differenced data is trend-stationary. The null hypothesis is accepted.","c6df6812":"# 2. Review Data Contents","3086efd3":"It looks like the third quarter sees the most monthly average energy usage each year.  We can further investigate this quarterly pattern by plotting the data against each month.","204482c9":"# 10. Seasonal Trend Decomposition using Loess","863a33da":"To review the `Datetime` column we need to make sure the contents are in the proper datetime format.","efecb1e4":"A lag plot is used to observe the underlying properties of a timeseries.  It's a type of scatter plot where a set of data from time step `y(t+i)` , with time `t` and lag `i`, is plotted against data from a later time step `y(t)`.  The pattern in a lag plot will show if the timeseries data is random, sinusoidal, autocorrelates, or contains outliers.  These patterns also provide information on suitable models for the data. ","ed6e2057":"The plot shows some significant non-zero autocorrelations.  We see an oscillation of negative and positive correlation values. A closer look reveals large autocorrelations at multiples of the seasonal frequency (3). This is another indicator of seasonality. ","c92878da":"Prior to any extensive analysis it's important to examine the initial data. ","a3fa84b2":"## 7.2 Augmented Dickey-Fuller Test","9d4d6274":"A plot of the 3-month moving average shows a smoother timeseries with less fluctuations. This is a method typically used to estimate the trend of a dataset when performing decomposition. ","f9166676":"As shown above the differenced data is more stable about the mean.  To confirm stationarity we'll utilize the following two tests.","5458096a":"Timeseries [decomposition](https:\/\/en.wikipedia.org\/wiki\/Decomposition_of_time_series) is a process that extracts the features for analysis.  Seasonal Trend Decomposition using Loess (STL) is a specific type of decomposition that can estimate non-linear relationships. This method is robust to outliers and can handle any kind of seasonality within the data. The function will return three components of the timeseries:\n* Season\n* Trend\n* Residual\n\nA residual or remainder component is what is left over after extracting the season and the trend. A residual that shows strong elements of the trend or season reflects an incomplete decomposition. Residual points that deviate significantly can be classified as outliers.    ","22a18c45":"# 3. Time Plot","77665124":"# 9. Seasonal Moving Average","4b2ab380":"# 4. Lag Plot","4be52e0d":"# 11. Conclusion","2598e519":"# 6. Partial Autocorrelation Plot","9b10d4cf":"Since we'll be looking at seasonality we can use resampling to convert the timeseries to an average monthly format.  This will also make visual interpretation easier. ","8609748c":"Partial autocorrelation is also a calculation for data at different lags, but with indirect correlations removed. This plot can be used to specify a regression model for the timeseries. The first autocorrelations are typically the most significant for analysis. ","27749c1a":"The starting point for our [EDA](https:\/\/en.wikipedia.org\/wiki\/Exploratory_data_analysis) will be the standard time plot. Here the energy observations are plotted against the hourly datetime records. This is to establish that we have our data in the proper format. Here everything looks okay so we will advance to a more thorough analysis. "}}