{"cell_type":{"a6ce87c0":"code","7be8aa8d":"code","60fcd766":"code","1eae5c2c":"code","b63ced4e":"code","5cdaf1df":"code","5bbfb8a5":"code","ffd48c7a":"code","02fee247":"code","d0b4ed3a":"code","ef686956":"code","c13d1353":"code","7a28c69a":"code","cbe2943b":"code","5ad49d25":"code","c8bd2b0b":"code","deff0b91":"code","e5a0ef67":"code","097a5f5b":"code","7eecf86d":"code","21c12e78":"code","d9f40d89":"code","b95e6d0c":"code","ef2bc4db":"code","5de7e980":"code","33bc32f8":"code","d79db791":"code","09c545af":"code","15170b1b":"code","0f099e5b":"code","a91ff2e8":"code","73969f2f":"code","8e5ad369":"code","83709c73":"code","c06e6730":"code","97da0ca3":"code","1dde0c47":"code","106ecbc8":"code","5faf770c":"code","4f9a51e2":"code","2aeffced":"code","ee18e40a":"code","97d9f6a9":"code","90a04326":"code","55453783":"code","7f00cc24":"code","c6e943f2":"code","578d125b":"code","2fd08a5f":"code","c287f4cc":"code","9096a753":"code","10be23ef":"code","b20f81e1":"code","adcba4b0":"code","abe224a8":"code","c758b033":"code","45de01ec":"code","5fb1f640":"code","0323506b":"code","907bbf96":"code","c2947bb1":"code","40e10562":"code","86442d64":"code","7eda30e0":"code","69f7afbc":"code","e3f0654a":"code","75a48307":"markdown","1bf11e5b":"markdown","56386675":"markdown","1a9aa053":"markdown","7d478bf5":"markdown","c65c9a27":"markdown","feab9475":"markdown","6b975e81":"markdown","143a11b7":"markdown","c189517c":"markdown","ffa68f8c":"markdown","753d38d8":"markdown","f8335a19":"markdown","489b5e6d":"markdown","1a4285c4":"markdown","177e9176":"markdown","8ad01e31":"markdown","cae41b61":"markdown","a50d4468":"markdown","3caf4440":"markdown","d7653e0d":"markdown"},"source":{"a6ce87c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7be8aa8d":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport plotly as py\n#import chart_stdio.plotly as py\nimport plotly.express as px\nimport cufflinks as cf\n\nfrom plotly.offline import iplot,plot, download_plotlyjs, init_notebook_mode\ncf.go_offline()","60fcd766":"#Let's load the data.\nT15 = pd.read_csv('..\/input\/world-happiness\/2015.csv')\nT16 = pd.read_csv('..\/input\/world-happiness\/2016.csv')\nT17 = pd.read_csv('..\/input\/world-happiness\/2017.csv')\nT18 = pd.read_csv('..\/input\/world-happiness\/2018.csv')\nT19 = pd.read_csv('..\/input\/world-happiness\/2019.csv')","1eae5c2c":"T15.head()","b63ced4e":"T16.head()","5cdaf1df":"T17.head()","5bbfb8a5":"T18.head()","ffd48c7a":"T19.head()","02fee247":"#Let's try to explore T15 dataset  and see what's going on.\nT15.describe()","d0b4ed3a":"T15.info()","ef686956":"T15['Region'].value_counts()","c13d1353":"Western_Europe = T15[T15.Region == 'Western Europe']\nSub_Saharan_Africa = T15[T15.Region == 'Sub-Saharan Africa']  \nCentral_and_Eastern_Europe  = T15[T15.Region == 'Central and Eastern Europe']\nLatin_America_and_Caribbean = T15[T15.Region == 'Latin America and Caribbean']\nMiddle_East_and_Northern_Africa  = T15[T15.Region == 'Middle East and Northern Africa']  \nSoutheastern_Asia  = T15[T15.Region == 'Southeastern Asia'] \nSouthern_Asia = T15[T15.Region == 'Southern Asia'] \nEastern_Asia = T15[T15.Region == 'Eastern Asia']\nAustralia_and_New_Zealand  = T15[T15.Region == 'Australia and New Zealand']  \nNorth_America = T15[T15.Region == 'North America'] ","7a28c69a":"#Have a look of Western Europe\nWestern_Europe","cbe2943b":"#Let's make a list of country belonging to specific region.\nCountry = Western_Europe['Country']\nWestern_Europe = np.array(Country)\nWestern_Europe","5ad49d25":"b = Sub_Saharan_Africa['Country']\nSub_Saharan_Africa = np.array(b)\nSub_Saharan_Africa","c8bd2b0b":"c = Central_and_Eastern_Europe['Country']\nCentral_and_Eastern_Europe = np.array(c)\nCentral_and_Eastern_Europe","deff0b91":"d = Latin_America_and_Caribbean['Country']\nLatin_America_and_Caribbean = np.array(d)\nLatin_America_and_Caribbean","e5a0ef67":"e = Middle_East_and_Northern_Africa['Country']\nMiddle_East_and_Northern_Africa = np.array(e)\nMiddle_East_and_Northern_Africa","097a5f5b":"f = Southeastern_Asia['Country']\nSoutheastern_Asia = np.array(f)\nSoutheastern_Asia","7eecf86d":"g = Southern_Asia['Country']\nSouthern_Asia = np.array(g)\nSouthern_Asia","21c12e78":"h = Eastern_Asia['Country']\nEastern_Asia = np.array(h)\nEastern_Asia","d9f40d89":"i = Australia_and_New_Zealand['Country']\nAustralia_and_New_Zealand = np.array(i)\nAustralia_and_New_Zealand","b95e6d0c":"j = North_America['Country']\nNorth_America = np.array(j)\nNorth_America","ef2bc4db":"#Lert's make a new 'region' feature for T17 dataset\nRegion = []\nT17Coun = T17['Country']\n\nfor i in T17Coun:\n    if i in Western_Europe:\n        Region.append('Western Europe')\n        \n    elif i in Sub_Saharan_Africa:\n         Region.append('Sub-Saharan Africa')\n            \n    elif i in Central_and_Eastern_Europe:\n         Region.append('Central and Eastern Europe')\n            \n    elif i in Latin_America_and_Caribbean:\n         Region.append('Latin_America_and_Caribbean')\n            \n    elif i in Middle_East_and_Northern_Africa:\n         Region.append('Middle East and Northern Africa')\n            \n    elif i in Southeastern_Asia:\n         Region.append('Southeastern_Asia')\n            \n    elif i in Eastern_Asia:\n         Region.append('Eastern Asia')\n            \n    elif i in Australia_and_New_Zealand:\n         Region.append('Australia and New Zealand')\n            \n    elif i in North_America:\n         Region.append('North America')\n            \n    elif i in Southern_Asia:\n         Region.append('Southern Asia')\n            \n    else:\n         Region.append('Others')\nlen(Region)","5de7e980":"Region[90]","33bc32f8":"Region = pd.Series(Region,name = 'Region')\nT17 = pd.concat([T17,Region], axis = 1)\nT17['Region'].value_counts()","d79db791":"Region = []\nT18Coun = T18['Country or region']\n\nfor i in T18Coun:\n    if i in Western_Europe:\n        Region.append('Western Europe')\n        \n    elif i in Sub_Saharan_Africa:\n         Region.append('Sub-Saharan Africa')\n            \n    elif i in Central_and_Eastern_Europe:\n         Region.append('Central and Eastern Europe')\n            \n    elif i in Latin_America_and_Caribbean:\n         Region.append('Latin_America_and_Caribbean')\n            \n    elif i in Middle_East_and_Northern_Africa:\n         Region.append('Middle East and Northern Africa')\n            \n    elif i in Southeastern_Asia:\n         Region.append('Southeastern_Asia')\n            \n    elif i in Eastern_Asia:\n         Region.append('Eastern Asia')\n            \n    elif i in Australia_and_New_Zealand:\n         Region.append('Australia and New Zealand')\n            \n    elif i in North_America:\n         Region.append('North America')\n            \n    elif i in Southern_Asia:\n         Region.append('Southern Asia')\n            \n    else:\n         Region.append('Others')\nlen(Region)","09c545af":"Region[79]","15170b1b":"T18.loc[79]","0f099e5b":"Region = pd.Series(Region,name = 'Region')\nT18 = pd.concat([T18,Region], axis = 1)\nT18['Region'].value_counts()","a91ff2e8":"Region = []\nT19Coun = T19['Country or region']\n\nfor i in T19Coun:\n    if i in Western_Europe:\n        Region.append('Western Europe')\n        \n    elif i in Sub_Saharan_Africa:\n         Region.append('Sub-Saharan Africa')\n            \n    elif i in Central_and_Eastern_Europe:\n         Region.append('Central and Eastern Europe')\n            \n    elif i in Latin_America_and_Caribbean:\n         Region.append('Latin_America_and_Caribbean')\n            \n    elif i in Middle_East_and_Northern_Africa:\n         Region.append('Middle East and Northern Africa')\n            \n    elif i in Southeastern_Asia:\n         Region.append('Southeastern_Asia')\n            \n    elif i in Eastern_Asia:\n         Region.append('Eastern Asia')\n            \n    elif i in Australia_and_New_Zealand:\n         Region.append('Australia and New Zealand')\n            \n    elif i in North_America:\n         Region.append('North America')\n            \n    elif i in Southern_Asia:\n         Region.append('Southern Asia')\n            \n    else:\n         Region.append('Others')\nlen(Region)","73969f2f":"Region[98]","8e5ad369":"T19.loc[98]","83709c73":"Region = pd.Series(Region,name = 'Region')\nT19 = pd.concat([T19,Region], axis = 1)\nT18['Region'].value_counts()","c06e6730":"T15.head()","97da0ca3":"#Let's divide the dataset into three parts Top, Medium, and high to analyze the data and find insights.\nTop = T15[T15['Happiness Rank'] < 50]\nMedium = T15[(T15['Happiness Rank'] > 50) & (T15['Happiness Rank'] < 100)]\nLow =  T15[T15['Happiness Rank'] >100]\n","1dde0c47":"fig = px.pie(Top ,names='Region',\n             title='Top happiest region',\n             hover_data=['Happiness Rank'])\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","106ecbc8":"fig = px.pie(Medium ,names='Region',\n             title='Medium happiest region',\n             hover_data=['Happiness Rank'])\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","5faf770c":"fig = px.pie(Low ,names='Region',\n             title='Lowest happiest region',\n             hover_data=['Happiness Rank'])\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","4f9a51e2":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\nfig = make_subplots(\n    rows=2, cols=4,\n    subplot_titles=(\"Standard Error\",\n                    \"Economy (GDP per Capita)\",\n                    \"Family\",\n                    \"Health (Life Expectancy)\",\n                    \"Freedom\",\n                    \"Trust (Government Corruption)\",\n                    \"Generosity\"))\n\nfig.add_trace(go.Histogram(x=Top['Standard Error'], y=Top['Country']),\n              row=1, col=1)\n\nfig.add_trace(go.Histogram(x=Top['Economy (GDP per Capita)'], y=Top['Happiness Rank']),\n              row=1, col=2)\n\nfig.add_trace(go.Histogram(x=Top['Family'], y=Top['Happiness Rank']),\n              row=1, col=3)\n\nfig.add_trace(go.Histogram(x=Top['Health (Life Expectancy)'], y=Top['Happiness Rank']),\n              row=1, col=4)\n\n\nfig.add_trace(go.Histogram(x=Top['Freedom'], y=Top['Happiness Rank']),\n              \n              row=2, col=1)\nfig.add_trace(go.Histogram(x=Top['Trust (Government Corruption)'], y=Top['Happiness Rank']),\n              row=2, col=2)\n\nfig.add_trace(go.Histogram(x=Top['Generosity'], y=Top['Country']),\n              row=2, col=3)\n\n\nfig.update_layout(height=500, width=900,template = \"plotly_dark\",\n                  title_text=\"Features Impact on Top Happiest Ccountry\")\n\nfig.show() ","2aeffced":"#For the Medium Country.\nimport plotly.graph_objects as go\n\nfig = make_subplots(\n    rows=2, cols=4,\n    subplot_titles=(\"Standard Error\",\n                    \"Economy (GDP per Capita)\",\n                    \"Family\",\n                    \"Health (Life Expectancy)\",\n                    \"Freedom\",\n                    \"Trust (Government Corruption)\",\n                    \"Generosity\"))\n\nfig.add_trace(go.Histogram(x=Medium['Standard Error'], y=Medium['Country']),\n              row=1, col=1)\n\nfig.add_trace(go.Histogram(x=Medium['Economy (GDP per Capita)'], y=Medium['Happiness Rank']),\n              row=1, col=2)\n\nfig.add_trace(go.Histogram(x=Medium['Family'], y=Medium['Happiness Rank']),\n              row=1, col=3)\n\nfig.add_trace(go.Histogram(x=Medium['Health (Life Expectancy)'], y=Medium['Happiness Rank']),\n              row=1, col=4)\n\n\nfig.add_trace(go.Histogram(x=Medium['Freedom'], y=Medium['Happiness Rank']),\n              \n              row=2, col=1)\nfig.add_trace(go.Histogram(x=Medium['Trust (Government Corruption)'], y=Medium['Happiness Rank']),\n              row=2, col=2)\n\nfig.add_trace(go.Histogram(x=Medium['Generosity'], y=Medium['Country']),\n              row=2, col=3)\n\n\nfig.update_layout(height=500, width=900,template = \"plotly_dark\",\n                  title_text=\"Features Impact on Medium Happiest Country\")\n\nfig.show() ","ee18e40a":"#For the Low \nimport plotly.graph_objects as go\n\nfig = make_subplots(\n    rows=2, cols=4,\n    subplot_titles=(\"Standard Error\",\n                    \"Economy (GDP per Capita)\",\n                    \"Family\",\n                    \"Health (Life Expectancy)\",\n                    \"Freedom\",\n                    \"Trust (Government Corruption)\",\n                    \"Generosity\"))\n\nfig.add_trace(go.Histogram(x=Low['Standard Error'], y=Low['Country']),\n              row=1, col=1)\n\nfig.add_trace(go.Histogram(x=Low['Economy (GDP per Capita)'], y=Low['Happiness Rank']),\n              row=1, col=2)\n\nfig.add_trace(go.Histogram(x=Low['Family'], y=Low['Happiness Rank']),\n              row=1, col=3)\n\nfig.add_trace(go.Histogram(x=Low['Health (Life Expectancy)'], y=Low['Happiness Rank']),\n              row=1, col=4)\n\n\nfig.add_trace(go.Histogram(x=Low['Freedom'], y=Low['Happiness Rank']),\n              \n              row=2, col=1)\nfig.add_trace(go.Histogram(x=Low['Trust (Government Corruption)'], y=Low['Happiness Rank']),\n              row=2, col=2)\n\nfig.add_trace(go.Histogram(x=Low['Generosity'], y=Low['Country']),\n              row=2, col=3)\n\n\nfig.update_layout(height=500, width=900,template = \"plotly_dark\",\n                  title_text=\"Features Impact on Country Lowest in happiness\")\n\nfig.show() ","97d9f6a9":"T16.head()","90a04326":"Top = T16[T16['Happiness Rank'] < 50]\nMedium = T16[(T16['Happiness Rank'] > 50) & (T16['Happiness Rank'] < 100)]\nLow =  T16[T16['Happiness Rank'] >100]\n","55453783":"fig = px.sunburst(Top, path=['Region', 'Country'], values='Happiness Rank',\n                  color='Happiness Score', hover_data=['Economy (GDP per Capita)'],\n                  color_continuous_scale='RdBu',\n                  title = 'Top Happiest Region in 2016',\n                  color_continuous_midpoint=np.average(Top['Health (Life Expectancy)'], weights=Top['Happiness Rank']))\nfig.show()","7f00cc24":"fig = px.sunburst(Medium, path=['Region', 'Country'], values='Happiness Rank',\n                  color='Happiness Score', hover_data=['Economy (GDP per Capita)'],\n                  color_continuous_scale='RdBu',\n                  title = 'Medium Happiest Region in 2016',\n                  color_continuous_midpoint=np.average(Medium['Health (Life Expectancy)'], weights=Medium['Happiness Rank']))\nfig.show()","c6e943f2":"fig = px.sunburst(Low, path=['Region', 'Country'], values='Happiness Rank',\n                  color='Happiness Score', hover_data=['Economy (GDP per Capita)'],\n                  color_continuous_scale='RdBu',\n                  title = 'Lower Happy Region in 2016',\n                  color_continuous_midpoint=np.average(Low['Health (Life Expectancy)'], weights=Low['Happiness Rank']))\nfig.show()","578d125b":"fig = make_subplots(\n    rows=2, cols=3,\n    subplot_titles=(\n                    \"Economy (GDP per Capita)\",\n                    \"Family\",\n                    \"Health (Life Expectancy)\",\n                    \"Freedom\",\n                    \"Trust (Government Corruption)\",\n                    \"Generosity\"))\n\n\nfig.add_trace(go.Histogram(x=Top['Economy (GDP per Capita)'], y=Top['Happiness Rank']),\n              row=1, col=1)\n\nfig.add_trace(go.Histogram(x=Top['Family'], y=Top['Happiness Rank']),\n              row=1, col=2)\n\nfig.add_trace(go.Histogram(x=Top['Health (Life Expectancy)'], y=Top['Happiness Rank']),\n              row=1, col=3)\n\n\nfig.add_trace(go.Histogram(x=Top['Freedom'], y=Top['Happiness Rank']),\n              \n              row=2, col=1)\nfig.add_trace(go.Histogram(x=Top['Trust (Government Corruption)'], y=Top['Happiness Rank']),\n              row=2, col=2)\n\nfig.add_trace(go.Histogram(x=Top['Generosity'], y=Top['Country']),\n              row=2, col=3)\n\n\nfig.update_layout(height=500, width=900,template = \"plotly_dark\",\n                  title_text=\"Features Impact on Top Happiest Country in 2016\")\n\nfig.show() ","2fd08a5f":"fig = make_subplots(\n    rows=2, cols=3,\n    subplot_titles=(\n                    \"Economy (GDP per Capita)\",\n                    \"Family\",\n                    \"Health (Life Expectancy)\",\n                    \"Freedom\",\n                    \"Trust (Government Corruption)\",\n                    \"Generosity\"))\n\n\nfig.add_trace(go.Histogram(x=Medium['Economy (GDP per Capita)'], y=Medium['Happiness Rank']),\n              row=1, col=1)\n\nfig.add_trace(go.Histogram(x=Medium['Family'], y=Medium['Happiness Rank']),\n              row=1, col=2)\n\nfig.add_trace(go.Histogram(x=Medium['Health (Life Expectancy)'], y=Medium['Happiness Rank']),\n              row=1, col=3)\n\n\nfig.add_trace(go.Histogram(x=Medium['Freedom'], y=Medium['Happiness Rank']),\n              \n              row=2, col=1)\nfig.add_trace(go.Histogram(x=Medium['Trust (Government Corruption)'], y=Medium['Happiness Rank']),\n              row=2, col=2)\n\nfig.add_trace(go.Histogram(x=Medium['Generosity'], y=Medium['Country']),\n              row=2, col=3)\n\n\nfig.update_layout(height=500, width=900,template = \"plotly_dark\",\n                  title_text=\"Features Impact on Medium Happiest Country in 2016\")\n\nfig.show() ","c287f4cc":"fig = make_subplots(\n    rows=2, cols=3,\n    subplot_titles=(\n                    \"Economy (GDP per Capita)\",\n                    \"Family\",\n                    \"Health (Life Expectancy)\",\n                    \"Freedom\",\n                    \"Trust (Government Corruption)\",\n                    \"Generosity\"))\n\n\n\nfig.add_trace(go.Histogram(x=Low['Economy (GDP per Capita)'], y=Low['Happiness Rank']),\n              row=1, col=1)\n\nfig.add_trace(go.Histogram(x=Low['Family'], y=Low['Happiness Rank']),\n              row=1, col=2)\n\nfig.add_trace(go.Histogram(x=Low['Health (Life Expectancy)'], y=Low['Happiness Rank']),\n              row=1, col=3)\n\n\nfig.add_trace(go.Histogram(x=Low['Freedom'], y=Low['Happiness Rank']),\n              \n              row=2, col=1)\nfig.add_trace(go.Histogram(x=Low['Trust (Government Corruption)'], y=Low['Happiness Rank']),\n              row=2, col=2)\n\nfig.add_trace(go.Histogram(x=Low['Generosity'], y=Low['Country']),\n              row=2, col=3)\n\n\nfig.update_layout(height=500, width=900,template = \"plotly_dark\",\n                  title_text=\"Features Impact on Country Lowest in happiness in 2016\")\n\nfig.show() ","9096a753":"T17.head()","10be23ef":"Top2017 = T17[T17['Happiness.Rank'] < 50]\nMedium2017 = T17[(T17['Happiness.Rank'] > 50) & (T17['Happiness.Rank'] < 100)]\nLow2017 =  T17[T17['Happiness.Rank'] >100]\n","b20f81e1":"data = dict(\n        type = 'choropleth',\n        colorscale = 'Viridis',\n         marker_line_width=1,\n        locations = Top2017['Country'],\n        locationmode = \"country names\",\n        z = Top2017['Happiness.Score'],\n        text = Top2017['Country'],\n        colorbar = {'title' : 'Happiness.Score'},\n        \n      )\nlayout = dict(title = 'Happiness Map',\n              geo = dict(projection = {'type':'mercator'}, showocean = False, showlakes = True, showrivers = True, )\n             )\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap,validate=False)","adcba4b0":"data = dict(\n        type = 'choropleth',\n        colorscale = 'Viridis',\n         marker_line_width=1,\n        locations = Medium2017['Country'],\n        locationmode = \"country names\",\n        z = Medium2017['Happiness.Score'],\n        text = Medium2017['Country'],\n        colorbar = {'title' : 'Happiness.Score'},\n        \n      )\nlayout = dict(title = 'Happiness Map',\n              geo = dict(projection = {'type':'mercator'}, showocean = False, showlakes = True, showrivers = True, )\n             )\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap,validate=False)","abe224a8":"data = dict(\n        type = 'choropleth',\n        colorscale = 'Viridis',\n         marker_line_width=1,\n        locations = Low2017['Country'],\n        locationmode = \"country names\",\n        z = Low2017['Happiness.Score'],\n        text = Low2017['Country'],\n        colorbar = {'title' : 'Happiness.Score'},\n        \n      )\nlayout = dict(title = 'Happiness Map',\n              geo = dict(projection = {'type':'mercator'}, showocean = False, showlakes = True, showrivers = True, )\n             )\nchoromap = go.Figure(data = [data],layout = layout)\niplot(choromap,validate=False)","c758b033":"\nfig = make_subplots(\n    rows=2, cols=3,\n    subplot_titles=(\n                    \"Economy (GDP per Capita)\",\n                    \"Family\",\n                    \"Health (Life Expectancy)\",\n                    \"Freedom\",\n                    \"Trust (Government Corruption)\",\n                    \"Generosity\"))\n\n\nfig.add_trace(go.Histogram(x=Top2017['Economy..GDP.per.Capita.'], y=Top2017['Happiness.Rank']),\n              row=1, col=1)\n\nfig.add_trace(go.Histogram(x=Top2017['Family'], y=Top2017['Happiness.Rank']),\n              row=1, col=2)\n\nfig.add_trace(go.Histogram(x=Top2017['Health..Life.Expectancy.'], y=Top2017['Happiness.Rank']),\n              row=1, col=3)\n\n\nfig.add_trace(go.Histogram(x=Top2017['Freedom'], y=Top2017['Happiness.Rank']),\n              \n              row=2, col=1)\nfig.add_trace(go.Histogram(x=Top2017['Trust..Government.Corruption.'], y=Top2017['Happiness.Rank']),\n              row=2, col=2)\n\nfig.add_trace(go.Histogram(x=Top2017['Generosity'], y=Top2017['Happiness.Rank']),\n              row=2, col=3)\n\n\nfig.update_layout(height=500, width=900,template = \"plotly_dark\",\n                  title_text=\"Features Impact on Top Happiest Ccountry on 2017\")\n\nfig.show() ","45de01ec":"\nfig = make_subplots(\n    rows=2, cols=3,\n    subplot_titles=(\n                    \"Economy (GDP per Capita)\",\n                    \"Family\",\n                    \"Health (Life Expectancy)\",\n                    \"Freedom\",\n                    \"Trust (Government Corruption)\",\n                    \"Generosity\"))\n\n\nfig.add_trace(go.Histogram(x=Medium2017['Economy..GDP.per.Capita.'], y=Medium2017['Happiness.Rank']),\n              row=1, col=1)\n\nfig.add_trace(go.Histogram(x=Medium2017['Family'], y=Medium2017['Happiness.Rank']),\n              row=1, col=2)\n\nfig.add_trace(go.Histogram(x=Medium2017['Health..Life.Expectancy.'], y=Medium2017['Happiness.Rank']),\n              row=1, col=3)\n\n\nfig.add_trace(go.Histogram(x=Medium2017['Freedom'], y=Medium2017['Happiness.Rank']),\n              \n              row=2, col=1)\nfig.add_trace(go.Histogram(x=Medium2017['Trust..Government.Corruption.'], y=Medium2017['Happiness.Rank']),\n              row=2, col=2)\n\nfig.add_trace(go.Histogram(x=Medium2017['Generosity'], y=Medium2017['Happiness.Rank']),\n              row=2, col=3)\n\n\nfig.update_layout(height=500, width=900,template = \"plotly_dark\",\n                  title_text=\"Features Impact on Medium Happiest Ccountry on 2017\")\n\nfig.show() ","5fb1f640":"\nfig = make_subplots(\n    rows=2, cols=3,\n    subplot_titles=(\n                    \"Economy (GDP per Capita)\",\n                    \"Family\",\n                    \"Health (Life Expectancy)\",\n                    \"Freedom\",\n                    \"Trust (Government Corruption)\",\n                    \"Generosity\"))\n\n\nfig.add_trace(go.Histogram(x=Low2017['Economy..GDP.per.Capita.'], y=Low2017['Happiness.Rank']),\n              row=1, col=1)\n\nfig.add_trace(go.Histogram(x=Low2017['Family'], y=Low2017['Happiness.Rank']),\n              row=1, col=2)\n\nfig.add_trace(go.Histogram(x=Low2017['Health..Life.Expectancy.'], y=Low2017['Happiness.Rank']),\n              row=1, col=3)\n\n\nfig.add_trace(go.Histogram(x=Low2017['Freedom'], y=Low2017['Happiness.Rank']),\n              \n              row=2, col=1)\nfig.add_trace(go.Histogram(x=Low2017['Trust..Government.Corruption.'], y=Low2017['Happiness.Rank']),\n              row=2, col=2)\n\nfig.add_trace(go.Histogram(x=Low2017['Generosity'], y=Low2017['Happiness.Rank']),\n              row=2, col=3)\n\n\nfig.update_layout(height=500, width=900,template = \"plotly_dark\",\n                  title_text=\"Features Impact on low Happiest Country on 2017\")\n\nfig.show() ","0323506b":"T18.head()","907bbf96":"Top2018 = T18[T18['Overall rank'] < 50]\nMedium2018 = T18[(T18['Overall rank'] > 50) & (T18['Overall rank'] < 100)]\nLow2018 =  T18[T18['Overall rank'] >100]\n","c2947bb1":"from wordcloud import WordCloud\ntext = Top2018['Region']\nwordcloud = WordCloud( \n                      colormap='vlag',\n                      width=1000, height=400,\n                          relative_scaling = 1.0,\n                          ).generate(\" \".join(text))\n    \nfig = plt.figure(1, figsize=(8, 4))\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.show()","40e10562":"text = Medium2018['Region']\nwordcloud = WordCloud(# font_path='\/Library\/Fonts\/Verdana.ttf',\n                       colormap='vlag',\n                       width=800, height=400,\n                       relative_scaling = 1.0,\n                          ).generate(\" \".join(text))\n    \nfig = plt.figure(1, figsize=(8, 4))\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.show()","86442d64":"text = Low2018['Region']\nwordcloud = WordCloud(# font_path='\/Library\/Fonts\/Verdana.ttf',\n                      colormap='vlag',\n                      width=800, height=400,\n                          relative_scaling = 1.0,\n                          ).generate(\" \".join(text))\n    \nfig = plt.figure(1, figsize=(8, 4))\nplt.axis('off')\nplt.imshow(wordcloud)\nplt.show()","7eda30e0":"fig = make_subplots(\n    rows=2, cols=3,\n    subplot_titles=(\n                    \"Economy (GDP per Capita)\",\n                    \"Social support\",\n                    \"Health (Life Expectancy)\",\n                    \"Freedom\",\n                    \"Perceptions of corruption\",\n                    \"Generosity\"))\n\nfig.add_trace(go.Histogram(x=Top2018['GDP per capita'], y=Top2018['Overall rank']),\n              row=1, col=1)\n\nfig.add_trace(go.Histogram(x=Top2018['Social support'], y=Top2018['Overall rank']),\n              row=1, col=2)\n\nfig.add_trace(go.Histogram(x=Top2018['Healthy life expectancy'], y=Top2018['Overall rank']),\n              row=1, col=3)\n\n\nfig.add_trace(go.Histogram(x=Top2018['Freedom to make life choices'], y=Top2018['Overall rank']),\n              \n              row=2, col=1)\nfig.add_trace(go.Histogram(x=Top2018['Perceptions of corruption'], y=Top2018['Overall rank']),\n              row=2, col=2)\n\nfig.add_trace(go.Histogram(x=Top2018['Generosity'], y=Top2018['Overall rank']),\n              row=2, col=3)\n\n\nfig.update_layout(height=500, width=900,template = \"plotly_dark\",\n                  title_text=\"Features Impact on Top Happiest Ccountry\")\n\nfig.show() ","69f7afbc":"fig = make_subplots(\n    rows=2, cols=3,\n    subplot_titles=(\n                    \"Economy (GDP per Capita)\",\n                    \"Social support\",\n                    \"Health (Life Expectancy)\",\n                    \"Freedom\",\n                    \"Perceptions of corruption\",\n                    \"Generosity\"))\n\nfig.add_trace(go.Histogram(x=Medium2018['GDP per capita'], y=Medium2018['Overall rank']),\n              row=1, col=1)\n\nfig.add_trace(go.Histogram(x=Medium2018['Social support'], y=Medium2018['Overall rank']),\n              row=1, col=2)\n\nfig.add_trace(go.Histogram(x=Medium2018['Healthy life expectancy'], y=Medium2018['Overall rank']),\n              row=1, col=3)\n\n\nfig.add_trace(go.Histogram(x=Medium2018['Freedom to make life choices'], y=Medium2018['Overall rank']),\n              \n              row=2, col=1)\nfig.add_trace(go.Histogram(x=Medium2018['Perceptions of corruption'], y=Medium2018['Overall rank']),\n              row=2, col=2)\n\nfig.add_trace(go.Histogram(x=Medium2018['Generosity'], y=Medium2018['Overall rank']),\n              row=2, col=3)\n\n\nfig.update_layout(height=500, width=900,template = \"plotly_dark\",\n                  title_text=\"Features Impact on Medium Happiest Ccountry\")\n\nfig.show() ","e3f0654a":"fig = make_subplots(\n    rows=2, cols=3,\n    subplot_titles=(\n                    \"Economy (GDP per Capita)\",\n                    \"Social support\",\n                    \"Health (Life Expectancy)\",\n                    \"Freedom\",\n                    \"Perceptions of corruption\",\n                    \"Generosity\"))\n\nfig.add_trace(go.Histogram(x=Low2018['GDP per capita'], y=Low2018['Overall rank']),\n              row=1, col=1)\n\nfig.add_trace(go.Histogram(x=Low2018['Social support'], y=Low2018['Overall rank']),\n              row=1, col=2)\n\nfig.add_trace(go.Histogram(x=Low2018['Healthy life expectancy'], y=Low2018['Overall rank']),\n              row=1, col=3)\n\n\nfig.add_trace(go.Histogram(x=Low2018['Freedom to make life choices'], y=Low2018['Overall rank']),\n              \n              row=2, col=1)\nfig.add_trace(go.Histogram(x=Low2018['Perceptions of corruption'], y=Low2018['Overall rank']),\n              row=2, col=2)\n\nfig.add_trace(go.Histogram(x=Low2018['Generosity'], y=Low2018['Overall rank']),\n              row=2, col=3)\n\n\nfig.update_layout(height=500, width=900,template = \"plotly_dark\",\n                  title_text=\"Features Impact on Lower Happy Country\")\n\nfig.show() ","75a48307":"Let's see how all the features are effecting in the happiness.","1bf11e5b":"Here I am seeing that there is strong relation among the country of specific region.And task is to find the reasons of that.\nAnd if i can cluster country with respect to region, that could help me in the way.But 'region' features is not available imn all the\ndataset.So i am going to create a region column based on the 'T15' dataset and then based on that put label of specific region for all the country in the dataset having no region column.","56386675":"# Happiness:\n![image.png](attachment:image.png)","1a9aa053":"Let's split the dataset into three parts, Top Medium and Low Country with respect \nto 'Happiness Score'.","7d478bf5":"# New T18:","c65c9a27":"Here we are seeing that most of the countries happiness rank below 50.","feab9475":"Here we are seeing that in the most Medium happiness country most of the country are from Central and eastern europe.","6b975e81":"Here we are seeing that in the most Lowest happiness country most of the country are from Sub -Sub_Saharan_Africa, Middle_East_and_Northern_Africa","143a11b7":"Here we are seeing that in the most Top happiness country most of the country are from Weatern europe and Latin America and Caribbean.","c189517c":"It's working nicely.NOw it's time to add this feature to T17 Dataset. \n","ffa68f8c":"# New T17:","753d38d8":"Let's eprlore dataset 2018","f8335a19":"Happiness is most importent part of the human life.Now Today's world is going through a hard period. We dont't \nhave any controll under the circimstances. But we have controll on ourselves and we can make a heaven out of hell by simply be happy and sharing our haelping hands to each others.\nSo let's analyze this data find the reason of happiness what's happier country's are doing and spread this knowledge. \n","489b5e6d":"Let's explore the 2017 dataset","1a4285c4":"Our Dataset is ready and now it's time to explore one by one let's start with 2015","177e9176":"Now let's see the effect of  features on happiness","8ad01e31":"Let's explore the dataset of 2016","cae41b61":"Let's check am i able to catagorize the country properly","a50d4468":"Work in progress.......","3caf4440":"Now it's time to make the region features for the each datasets not having region feature.","d7653e0d":"# New T19:"}}