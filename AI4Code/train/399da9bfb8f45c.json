{"cell_type":{"2da5a5c2":"code","685161d7":"code","739c055b":"code","16a27679":"code","8dce8008":"code","e01cbf31":"code","16689079":"code","e118ee64":"code","51f5ee8b":"code","06bdc4c3":"code","8709b6c8":"code","48435529":"code","1b08dea5":"code","dc74a37d":"code","3a1b2498":"code","f4b866b3":"code","f1ca39ba":"code","3a242b7e":"code","f67848c7":"code","e3847071":"code","c050de1d":"code","bcf48d5b":"code","2e58d860":"code","50ca3103":"code","4400ab62":"code","b7f863cd":"code","94a5b14a":"code","06b99621":"code","a5a1970f":"code","c33c9837":"code","49f3d741":"code","21934c74":"code","d58ac8d4":"code","cd7d130d":"code","aad354e9":"code","35b634f4":"code","7123bccb":"code","8284ce9a":"code","5dcbc54a":"code","f508ec44":"code","eddf5590":"code","548a0869":"code","1a38f850":"code","edfa86b6":"code","32b99333":"code","5b05d312":"code","48f6ddee":"code","2bbb427c":"code","1940e12f":"code","44608eb9":"code","239420b4":"code","6fe0b929":"code","ca4b97f3":"code","242b2347":"code","2d6ff162":"code","d38cd616":"code","5629a5bb":"code","d349b4ae":"code","277ff2c3":"code","97edcd62":"code","33411780":"code","c23848f9":"code","dd12543f":"code","7de3b4e2":"code","1e3a0aaa":"code","b2712f03":"code","a24c12e0":"code","9af8374d":"code","9d359ee6":"code","7e4fc7ba":"code","b089e7ac":"code","d0097d4e":"code","5b78fe67":"code","08db26ee":"code","49b07082":"code","eb6047d3":"code","bb2a0a0f":"code","cd90e715":"code","9dcd560d":"code","bb7f21e9":"code","62d1f526":"code","c9aad3ca":"code","db65393f":"code","68599c9d":"code","35f7385e":"code","d27751a3":"code","4fd6fc70":"code","72b8b7d3":"code","4d01dd21":"code","83025468":"code","484cd2c2":"code","9cad466a":"code","62030398":"code","55aea2cb":"code","9d476081":"code","c52ef0f8":"code","14d2a913":"code","0192376a":"code","0cf2391c":"code","188396ca":"code","37a3fd46":"code","65a5c5db":"code","b0a54d20":"code","ca2be413":"code","a75f6812":"code","dc03b32d":"code","a5ab7cdc":"code","271a1aee":"code","968a9697":"code","944c5216":"code","8b1af34f":"code","67b00e01":"code","07e2d357":"code","ef302bc6":"code","895d932b":"code","62573bf5":"code","8a62537a":"code","cc517b3b":"code","04060109":"code","bda2e785":"code","c4638bbf":"code","4ddae151":"code","e1634967":"code","0e1d5f13":"code","46f89c65":"code","455a102e":"code","2999cae5":"code","a989f49d":"code","5ea6307b":"code","e778cbbf":"code","def83a3b":"code","b7d69c0e":"code","923504a5":"code","d29f8179":"code","5e66ce29":"code","9fa0c25f":"code","deec5928":"code","9ca2a1b9":"code","075390e2":"code","59122324":"code","d2fb5cc1":"code","65abc001":"code","63c7dd83":"code","bb2b4724":"code","9ad97178":"code","47531f05":"code","7e4328e2":"code","f2ed67fa":"code","af2fb650":"code","eb2794a7":"code","ea2d3a3d":"code","bc6d4dbd":"code","ce69750b":"code","463cf62e":"code","9d234e20":"code","f6d33199":"code","94f9e1d9":"code","4c1a8d08":"code","59467eb0":"code","5ff2b120":"markdown","7c771086":"markdown","11eb9ccb":"markdown","b7246690":"markdown","b2ffb37b":"markdown","8b02689a":"markdown","d97882a3":"markdown","7fd0f1b5":"markdown","6607ff73":"markdown","b965c55e":"markdown","e1bce740":"markdown","e9740f10":"markdown","e619f8ae":"markdown","1444af60":"markdown","cfeaabd5":"markdown","e8cea640":"markdown","1b5cda23":"markdown","9a9939a5":"markdown","86084051":"markdown","a6154f73":"markdown","075c39e6":"markdown","212d3d82":"markdown","2e2ca071":"markdown","36f37ed2":"markdown","1b46afd4":"markdown","2bca42b5":"markdown"},"source":{"2da5a5c2":"import h2o","685161d7":"h2o.init()","739c055b":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","16a27679":"## import data \n!ls ","8dce8008":"df = h2o.import_file('..\/input\/irisdataset\/Iris.csv')","e01cbf31":"df.head()","16689079":"\ndf = h2o.import_file('..\/input\/irisdataset\/Iris.csv',col_names=['id','SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm','Species'],\n                    col_types=['numeric',\"numeric\", \"numeric\", \"numeric\", \"numeric\", \"enum\"])","e118ee64":"df.head()","51f5ee8b":"dfp = pd.read_csv('..\/input\/irisdataset\/Iris.csv')","06bdc4c3":"df = h2o.H2OFrame(dfp)","8709b6c8":"df.head()","48435529":"df.names","1b08dea5":"df.types","dc74a37d":"df.frame_id","3a1b2498":"df[['SepalLengthCm']].max()","f4b866b3":"df[['SepalLengthCm']].min()","f1ca39ba":"df[['SepalLengthCm']].mean()","3a242b7e":"df[['SepalLengthCm']].hist()","f67848c7":"df[['SepalWidthCm']].hist()","e3847071":"df[['PetalWidthCm']].hist()","c050de1d":"df[['PetalLengthCm']].hist()","bcf48d5b":"df.head()","2e58d860":"## dropping column","50ca3103":"df.drop('Id',axis=1)","4400ab62":"###or","b7f863cd":"df=df[:,1:]   ## take the datafrmame but lose the first column","94a5b14a":"df.head()","06b99621":"## applying seeding\ndf.frame_id","a5a1970f":"## describe data","c33c9837":"df.describe()","49f3d741":"df['sepal_ratio'] = df['SepalLengthCm']\/df['SepalWidthCm']","21934c74":"df.head()","d58ac8d4":"df['petal_ratio'] = df['PetalLengthCm']\/df['PetalWidthCm']","cd7d130d":"df.head()","aad354e9":"df.cor() ","35b634f4":"dfp.corr()","7123bccb":"sns.heatmap(dfp.corr())","8284ce9a":"dfp.corr(method='spearman')","5dcbc54a":"sns.heatmap(dfp.corr(method='spearman'))","f508ec44":"## in H20\ntrain_h,test_h,valid_h = df.split_frame([0.6,0.2])","eddf5590":"train_h","548a0869":"test_h","1a38f850":"valid_h","edfa86b6":"from sklearn.model_selection import train_test_split","32b99333":"xtrain,ytrain,xtest,ytest = train_test_split(dfp.drop('Species',axis=1),dfp[['Species']])","5b05d312":"xtrain.head()","48f6ddee":"ytrain.head()","2bbb427c":"xtest.head()","1940e12f":"ytest.head()","44608eb9":"#h2o.exportFile(d, \"\/path\/to\/d.csv\")\n#h2o.exportFile(d, \"s3:\/\/mybucket\/d.csv\")\n#h2o.exportFile(d, \"s3:\/\/<AWS_ACCESS_KEY>:<AWS_SECRET_KEY>@mybucket\/d.csv\")\n#h2o.exportFile(d, \"hdfs:\/\/namenode\/path\/to\/d.csv\")","239420b4":"h2o.export_file(df,'export.csv')","6fe0b929":"!ls","ca4b97f3":"!cat export.csv","242b2347":"df.as_data_frame().plot()","2d6ff162":"sns.heatmap(df.as_data_frame().corr())","d38cd616":"sns.heatmap(df.as_data_frame().corr(method='spearman'))","5629a5bb":"df.as_data_frame().plot.barh()","d349b4ae":"d = df.as_data_frame()","277ff2c3":"pd.plotting.scatter_matrix(d)","97edcd62":"## you can import the whole csv in  a folder\ntrain_h","33411780":"y = 'Species'","c23848f9":"x = df.names","dd12543f":"x.remove(y)","7de3b4e2":"## we will do a grid search for finding the best parameter","1e3a0aaa":"import math\nfrom h2o.estimators.gbm import H2OGradientBoostingEstimator\nfrom h2o.grid.grid_search import H2OGridSearch\n\n#We only provide the required parameters, everything else is default\ngbm = H2OGradientBoostingEstimator()\ngbm.train(x=x, y=y, training_frame=train_h)\n\n## Show a detailed model summary\nprint (gbm)\n\n","b2712f03":"perf = gbm.model_performance(valid_h)\n","a24c12e0":"print(perf)","9af8374d":"## with valid dataframne\ncv_gbm = H2OGradientBoostingEstimator(nfolds = 4, seed = 0xDECAF)\ncv_gbm.train(x = x, y = y, training_frame = train_h.rbind(valid_h))","9d359ee6":"cv_gbm","7e4fc7ba":"## now with grid search (this may take time depending on the spec of your computer .altough its run on jvm dont take too much time)","b089e7ac":"gbm_params1 = {'learn_rate': [0.01, 0.1],\n                'max_depth': [3, 5, 9],\n                'sample_rate': [0.8, 1.0],\n                'col_sample_rate': [0.2, 0.5, 1.0]}","d0097d4e":"gbm_grid1 = H2OGridSearch(model=H2OGradientBoostingEstimator,\n                          grid_id='gbm_grid1',\n                          hyper_params=gbm_params1)","5b78fe67":"gbm_grid1.train(x=x, y=y,\n                training_frame=train_h,\n                validation_frame=valid_h,\n                ntrees=100,stopping_metric = \"AUC\",\n                seed=1)","08db26ee":"gbm_grid1","49b07082":"## RANDOm GRID search ","eb6047d3":"gbm_params2 = {'learn_rate': [i * 0.01 for i in range(1, 11)],\n                'max_depth': list(range(2, 11)),\n                'sample_rate': [i * 0.1 for i in range(5, 11)],\n                'col_sample_rate': [i * 0.1 for i in range(1, 11)]}\n\n# Search criteria\nsearch_criteria = {'strategy': 'RandomDiscrete', 'max_models': 36, 'seed': 1}\n\n# Train and validate a random grid of GBMs\ngbm_grid2 = H2OGridSearch(model=H2OGradientBoostingEstimator,\n                          grid_id='gbm_grid2',\n                          hyper_params=gbm_params2,\n                          search_criteria=search_criteria)\ngbm_grid2.train(x=x, y=y,\n                training_frame=train_h,\n                validation_frame=valid_h,\n                ntrees=100,\n                seed=1)\n\n\n","bb2a0a0f":"gbm_grid2","cd90e715":"gbm_gridperf2 = gbm_grid2.get_grid(sort_by='mse', decreasing=True)","9dcd560d":"gbm_gridperf2\n\n# Grab the top GBM model, chosen by validation AUC\nbest_gbm2 = gbm_gridperf2.models[0]\n\n# Now let's evaluate the model performance on a test set\n# so we get an honest estimate of top model performance\n#best_gbm_perf2 = best_gbm2.model_performance(test)\n","bb7f21e9":"best_gbm2","62d1f526":"\nbest_gbm_perf2 = best_gbm2.model_performance(test_h)\n\nbest_gbm_perf2.mse()","c9aad3ca":"best_gbm_perf2.rmse()","db65393f":"## doing this thing again witha  differene","68599c9d":"predict = best_gbm2.predict(test_h)","35f7385e":"predict","d27751a3":"# Predict the contributions using the GBM model and test data.\nstaged_predict_proba = best_gbm2.staged_predict_proba(test_h)","4fd6fc70":"staged_predict_proba","72b8b7d3":"conf = best_gbm2.confusion_matrix(test_h)","4d01dd21":"conf","83025468":"from h2o.estimators.random_forest import H2ORandomForestEstimator\nm = H2ORandomForestEstimator(\nntrees=100,\nstopping_metric=\"misclassification\",\nstopping_rounds=3,\nstopping_tolerance=0.02, #2%\nmax_runtime_secs=60,\nmodel_id=\"RF:stop_test\"\n)\nm.train(x, y, train_h, validation_frame=valid_h)","484cd2c2":"m","9cad466a":"pref = m.model_performance(valid_h)","62030398":"pref","55aea2cb":"cv_m = H2OGradientBoostingEstimator()\ncv_m.train(x = x, y = y, training_frame = train_h.rbind(valid_h))","9d476081":"cv_m","c52ef0f8":"import h2o.grid\ng = h2o.grid.H2OGridSearch(\nh2o.estimators.H2ORandomForestEstimator(\nnfolds=10\n),\nhyper_params={\n\"ntrees\": [50, 100, 120],\n\"max_depth\": [40, 60],\n\"min_rows\": [1, 2]\n}\n)\ng.train(x, y, train_h)","14d2a913":"g_gridperf2 = g.get_grid(sort_by='mse', decreasing=True)","0192376a":"g_gridperf2","0cf2391c":"g.confusion_matrix(test_h)","188396ca":"from h2o.estimators import naive_bayes","37a3fd46":"nv = naive_bayes.H2ONaiveBayesEstimator()","65a5c5db":"nv.train(x,y,train_h)","b0a54d20":"nv","ca2be413":"pred = nv.predict(test_h)","a75f6812":"pred","dc03b32d":"nv.confusion_matrix(test_h)","a5ab7cdc":"nv.mse()","271a1aee":"nv.rmse()","968a9697":"nv.cross_validation_metrics_summary()","944c5216":"## this is the pojo model for the naive bias classifier","8b1af34f":"nv.download_pojo()","67b00e01":"cv_m = naive_bayes.H2ONaiveBayesEstimator()\ncv_m.train(x = x, y = y, training_frame = train_h.rbind(valid_h))","07e2d357":"cv_m","ef302bc6":"from h2o.automl import H2OAutoML","895d932b":"aml = H2OAutoML(max_models=25, seed=1)\naml.train(x=x, y=y, training_frame=train_h)","62573bf5":"lb = aml.leaderboard\nlb","8a62537a":"preds = aml.leader.predict(test_h)","cc517b3b":"preds","04060109":"preds = aml.predict(test_h)","bda2e785":"preds","c4638bbf":"aml.sort_metric","4ddae151":"aml.leaderboard","e1634967":"\n# save the model\nmodel_path = h2o.save_model(model=nv, path=\"\/tmp\/mymodel\", force=True)\n\nprint (model_path)\n\n\n","0e1d5f13":"# load the model\nsaved_model = h2o.load_model(model_path)","46f89c65":"saved_model","455a102e":"from h2o.estimators.stackedensemble import H2OStackedEnsembleEstimator","2999cae5":"nfolds = 5\n\n# There are a few ways to assemble a list of models to stack together:\n# 1. Train individual models and put them in a list\n# 2. Train a grid of models\n# 3. Train several grids of models\n# Note: All base models must have the same cross-validation folds and\n# the cross-validated predicted values must be kept.\n\n\n# 1. Generate a 2-model ensemble (GBM + RF)\n\n# Train and cross-validate a GBM\nmy_gbm = H2OGradientBoostingEstimator(\n                                      ntrees=10,\n                                      max_depth=3,\n                                      min_rows=2,\n                                      learn_rate=0.2,\n                                      nfolds=nfolds,\n                                      fold_assignment=\"Modulo\",\n                                      keep_cross_validation_predictions=True,\n                                      seed=1)\nmy_gbm.train(x=x, y=y, training_frame=train_h)\n\n\n# Train and cross-validate a RF\nmy_rf = H2ORandomForestEstimator(ntrees=50,\n                                 nfolds=nfolds,\n                                 fold_assignment=\"Modulo\",\n                                 keep_cross_validation_predictions=True,\n                                 seed=1)\nmy_rf.train(x=x, y=y, training_frame=train_h)\n\n\n# Train a stacked ensemble using the GBM and GLM above\nensemble = H2OStackedEnsembleEstimator(model_id=\"my_ensemble_binomiale\",\n                                       base_models=[my_gbm, my_rf])\nensemble.train(x=x, y=y, training_frame=train_h)\n\n# Eval ensemble performance on the test data\nperf_stack_test = ensemble.model_performance(test_h)","a989f49d":"# Compare to base learner performance on the test set\nperf_gbm_test = my_gbm.model_performance(test_h)\nperf_rf_test = my_rf.model_performance(test_h)\nbaselearner_best_auc_test = max(perf_gbm_test.mse(), perf_rf_test.mse())\nstack_auc_test = perf_stack_test.mse()\nprint(\"Best Base-learner Test MSE:  {0}\".format(baselearner_best_auc_test))\nprint(\"Ensemble Test MSE:  {0}\".format(stack_auc_test))\n\n# Generate predictions on a test set (if neccessary)\npred = ensemble.predict(test_h)","5ea6307b":"pred","e778cbbf":"from h2o.estimators import deeplearning\nm = h2o.estimators.deeplearning.H2ODeepLearningEstimator()\nm.train(x, y, train_h)\np = m.predict(test_h)","def83a3b":"p","b7d69c0e":"r2 = m.r2()\nmse = m.mse()\nrmse = m.rmse()\n","923504a5":"r2","d29f8179":"from h2o.estimators.deeplearning import H2ODeepLearningEstimator","5e66ce29":"model = H2ODeepLearningEstimator(\ndistribution=\"multinomial\",\nactivation=\"RectifierWithDropout\",\nhidden=[128,128,128,128],\ninput_dropout_ratio=0.2,\nsparse=True,\nl1=1e-5,\nepochs=10)","9fa0c25f":"model.train(\nx=x,\ny=y,\ntraining_frame=train_h,\nvalidation_frame=test_h)","deec5928":"model","9ca2a1b9":"model.predict(test_h)","075390e2":"model_cv = H2ODeepLearningEstimator(\ndistribution=\"multinomial\",\nactivation=\"RectifierWithDropout\",\nhidden=[32,32,32],\ninput_dropout_ratio=0.2,\nsparse=True,\nl1=1e-5,\nepochs=100,\nnfolds=5)","59122324":"model_cv.train(\nx=x,\ny=y,\ntraining_frame=train_h)","d2fb5cc1":"# View specified parameters of the Deep Learning model\nmodel.params","65abc001":"model_cv","63c7dd83":"model_cv.model_performance(train=True)\n","bb2b4724":"model_cv.model_performance(valid=True)","9ad97178":"model.mse(valid=True)\n\n# Cross-validated MSE\nmodel_cv.mse(xval=True)","47531f05":"model_cv.predict(test_h).head()","7e4328e2":"model_vi = H2ODeepLearningEstimator(\ndistribution=\"multinomial\",\nactivation=\"RectifierWithDropout\",\nhidden=[32,32,32],\ninput_dropout_ratio=0.2,\nsparse=True,\nl1=1e-5,\nepochs=10,\nvariable_importances=True)","f2ed67fa":"model_vi.train(\nx=x,\ny=y,\ntraining_frame=train_h,\nvalidation_frame=test_h)","af2fb650":"model_vi.varimp()","eb2794a7":"## grid Search in python deep learning book Deep Learning booket page 35","ea2d3a3d":"hidden_opt = [[32,32],[32,16,8],[100]]\n#l1_opt = [1e-4,1e-3]\nhyper_parameters = {\"hidden\":hidden_opt}\nfrom h2o.grid.grid_search import H2OGridSearch\nmodel_grid = H2OGridSearch(H2ODeepLearningEstimator,\nhyper_params=hyper_parameters)\nmodel_grid.train(x=x, y=y,\ndistribution=\"multinomial\", epochs=1000,\ntraining_frame=train_h, validation_frame=test_h,\nscore_interval=2, stopping_rounds=3,\nstopping_tolerance=0.05,\nstopping_metric=\"misclassification\")","bc6d4dbd":"model_grid","ce69750b":"model_grid.confusion_matrix(test_h)","463cf62e":"model_grid.r2","9d234e20":"model_grid.mse()","f6d33199":"hidden_opt =[[17,32],[8,19],[32,16,8],[100],[10,10,10,10]]\nl1_opt = [s\/1e6 for s in range(1,1001)]\nhyper_parameters = {\"hidden\":hidden_opt, \"l1\":l1_opt}\nsearch_criteria = {\"strategy\":\"RandomDiscrete\",\n\"max_models\":10, \"max_runtime_secs\":100,\n\"seed\":123456}\nfrom h2o.grid.grid_search import H2OGridSearch\nmodel_grid = H2OGridSearch(H2ODeepLearningEstimator,\nhyper_params=hyper_parameters,\nsearch_criteria=search_criteria)\nmodel_grid.train(x=x, y=y,\ndistribution=\"multinomial\", epochs=1000,\ntraining_frame=train_h, validation_frame=test_h,\nscore_interval=2, stopping_rounds=3,\nstopping_tolerance=0.05,\nstopping_metric=\"misclassification\")","94f9e1d9":"model_grid","4c1a8d08":"model_grid.confusion_matrix","59467eb0":"model_grid.mse()","5ff2b120":"## For saving to a location on the H2O server, use h2o.exportFile() (h2o.export_file() in\n# Python), where the first parameter is the frame to save, and the second is the disk path and\n# filename.","7c771086":"## importing data with h20 we can import data from pandas too","11eb9ccb":"# splitting data in h2o and in sklearn","b7246690":"## difference between pandas correlation and H2o correlation","b2ffb37b":"## df types","8b02689a":"## DEEP LEARNING","d97882a3":"## Featuer Engineering","7fd0f1b5":"# Random forest classification \n\n","6607ff73":"## names of the column","b965c55e":"## you can apply pandas function \n## but in order to do that you have to change it to a data frame in pandas","e1bce740":"## saving the naive bias model","e9740f10":"# Train Deep Learning model and validate on test set\n# and save the variable importances\n\n","e619f8ae":"<ul>\n<li>        If the distribution is bernoulli, the the response column must be 2-class categorical\n<li>        If the distribution is multinomial, the response column must be categorical.\n<li>        If the distribution is poisson, the response column must be numeric.\n<li>        If the distribution is laplace, the response column must be numeric.\n<li>        If the distribution is tweedie, the response column must be numeric.\n<li>        If the distribution is gaussian, the response column must be numeric.\n<li>        If the distribution is huber, the response column must be numeric.\n<li>        If the distribution is gamma, the response column must be numeric.\n<li>        If the distribution is quantile, the response column must be numeric.\n<\/ul>","1444af60":"### loading model","cfeaabd5":"## in sklearn","e8cea640":"# Naive bayes classifier","1b5cda23":"##  they are are some other option for importing data\n#df = h2o.import_file(\"hdfs:\/\/namenode\/user\/path\/to\/my.csv\")\n#df = h2o.import_file(\"s3:\/\/<AWS_ACCESS_KEY>:<AWS_SECRET_KEY>@mybucket\/my.csv\")\n#df = h2o.import_file(\"https:\/\/s3.amazonaws.com\/mybucket\/my.csv\")\n#df = h2o.import_file(\"\/path\/to\/my.csv\")\n","9a9939a5":"## POJO\n\n## pojo is  plain old java object\n## we can save our machine learning model or deep learning model in pojo format ","86084051":" # Random grid Search DEEP Learning","a6154f73":"## exporting data","075c39e6":"# <center> IRIS PROJECT WITH H2O <\/center>","212d3d82":"## importing with different parameter","2e2ca071":"# histogram plot","36f37ed2":"## all model possible (crazy right???!!!)","1b46afd4":"## we can see there is no misssing value","2bca42b5":"## we can use pandas dataframe too"}}