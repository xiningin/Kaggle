{"cell_type":{"9b812759":"code","f44880ab":"code","fd6652c5":"code","bb9b5440":"code","045b0422":"code","ac510ae1":"code","962e3e27":"code","a3342a6e":"code","31d7d55c":"code","e0b6b37d":"code","1247e86f":"code","8cd36c6a":"code","941d9f95":"code","6150ef54":"code","24f42e2b":"code","1f221bc9":"code","b8d37cb6":"code","05ef9171":"code","10d2f7ee":"code","d27d05ac":"code","2843e207":"code","58ae29cb":"code","6f6b7098":"code","7b2ee98e":"code","486d4a05":"code","92620b51":"code","be5c5529":"code","32495d1c":"code","3a26fdc6":"code","bfeb675f":"code","ba391a18":"code","3cb17277":"code","8a9d6e2b":"code","752d2b58":"code","a657d849":"code","63135247":"code","39316573":"code","97e1356c":"code","66f15aad":"markdown","b2c705d0":"markdown","b2b64141":"markdown"},"source":{"9b812759":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f44880ab":"data = pd.read_csv(\"\/kaggle\/input\/creditcardfraud\/creditcard.csv\")","fd6652c5":"data.head()","bb9b5440":"data.info()","045b0422":"data.Class.value_counts()","ac510ae1":"data.groupby(data.Class).Amount.mean().plot(kind = \"bar\")\nplt.show()\nprint(data.groupby(data.Class).Amount.mean())","962e3e27":"data[data.Amount > data.Amount.mean()].Class.value_counts()","a3342a6e":"data.Amount.mean()","31d7d55c":"data.Amount = (data.Amount-data.Amount.min())\/(data.Amount.max()-data.Amount.min())","e0b6b37d":"data[\"amount_mean_up\"] = data.Amount\ndata.amount_mean_up = [1 if i >  88.34961925087359 else 0 for i in data.amount_mean_up]\ndata.head()","1247e86f":"data.groupby(data.Class).Time.mean().plot(kind = \"bar\")\nplt.show()\nprint(data.groupby(data.Class).Time.mean())","8cd36c6a":"data.Time.mean()","941d9f95":"data[\"time_mean_up\"] = data.Time\ndata.time_mean_up = [1 if i <  94813.85957508067 else 0 for i in data.time_mean_up]\ndata.head()","6150ef54":"data.Time = (data.Time-data.Time.min())\/(data.Time.max()-data.Time.min())","24f42e2b":"data.groupby(data.Class).V4.mean().plot(kind = \"bar\")\nplt.show()\nprint(data.groupby(data.Class).V4.mean())","1f221bc9":"data.V4.mean()","b8d37cb6":"data[\"v4_mean_up\"] = data.Time\ndata.v4_mean_up = [1 if i >  2.782312291808533e-15 else 0 for i in data.v4_mean_up]\ndata.head()","05ef9171":"data.V4 = (data.V4-data.V4.min())\/(data.V4.max()-data.V4.min())","10d2f7ee":"y = data.Class.values\nX = data.drop(\"Class\",axis = 1).values","d27d05ac":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","2843e207":"from sklearn import metrics","58ae29cb":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_pred))","6f6b7098":"from sklearn.model_selection import cross_val_score","7b2ee98e":"y_pred = logreg.predict(X_test)\ny_true = y_test\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(y_true,y_pred)\nf, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"Confision Matrix\")\nplt.show()","486d4a05":"data = data.sample(frac=1,replace = False)\nfraud_df = data.loc[data['Class'] == 1]\nnon_fraud_df = data.loc[data['Class'] == 0][:492]\n\nnormal_distributed_df = pd.concat([fraud_df, non_fraud_df])\n\ndf = normal_distributed_df.sample(frac=1,replace = False, random_state= 42 )","92620b51":"sns.countplot(\"Class\",data = df)\nplt.show()","be5c5529":"yu = df.Class.values\nXu = df.drop(\"Class\",axis = 1).values\nXu_train, Xu_test, yu_train, yu_test = train_test_split(Xu, yu, test_size=0.33, random_state=42)","32495d1c":"logreg = LogisticRegression()\nlogreg.fit(Xu_train, yu_train)\nyu_pred = logreg.predict(Xu_test)\nprint(metrics.accuracy_score(yu_test, yu_pred))","3a26fdc6":"yu_pred = logreg.predict(Xu_test)\nyu_true = yu_test\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(yu_true,yu_pred)\nf, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"yu_pred\")\nplt.ylabel(\"yu_true\")\nplt.title(\"Confision Matrix\")\nplt.show()","bfeb675f":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(Xu_train,yu_train)\nyu_pred = knn.predict(Xu_test)\nprint(metrics.accuracy_score(yu_test, yu_pred))","ba391a18":"yu_pred = knn.predict(Xu_test)\nyu_true = yu_test\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(yu_true,yu_pred)\nf, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"yu_pred\")\nplt.ylabel(\"yu_true\")\nplt.title(\"Confision Matrix\")\nplt.show()","3cb17277":"k_range = list(range(1, 31))\nk_scores = []\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors=k)\n    scores = cross_val_score(knn, Xu, yu, cv=10, scoring='accuracy')\n    k_scores.append(scores.mean())\nplt.plot(k_range, k_scores)\nplt.xlabel('Value of K for KNN')\nplt.ylabel('Cross-Validated Accuracy')\nplt.show()","8a9d6e2b":"from sklearn.model_selection import GridSearchCV\nparam_grid = dict(n_neighbors=k_range)\ngrid = GridSearchCV(knn, param_grid, cv=10, scoring='accuracy', return_train_score=False)\ngrid.fit(Xu, yu)\nprint(grid.best_params_,grid.best_score_)","752d2b58":"from sklearn.ensemble import RandomForestClassifier\nrt=RandomForestClassifier(n_estimators=32,random_state=1)\nrt.fit(Xu_train,yu_train)\nyu_pred = rt.predict(Xu_test)\nprint(metrics.accuracy_score(yu_test, yu_pred))","a657d849":"score_list2=[]\nfor i in range(30,36):\n    rt2=RandomForestClassifier(n_estimators=i,random_state=1)\n    rt2.fit(Xu_train,yu_train)\n    score_list2.append(rt2.score(Xu_test,yu_test))\n\nplt.figure(figsize=(12,8))\nplt.plot(range(30,36),score_list2)\nplt.xlabel(\"Esimator values\")\nplt.ylabel(\"Acuuracy\")\nplt.show()","63135247":"yu_pred = rt.predict(Xu_test)\nyu_true = yu_test\nfrom sklearn.metrics import confusion_matrix\ncm=confusion_matrix(yu_true,yu_pred)\nf, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"yu_pred\")\nplt.ylabel(\"yu_true\")\nplt.title(\"Confision Matrix\")\nplt.show()","39316573":"rt2=RandomForestClassifier(n_estimators=32,random_state=42)\nrt2.fit(Xu_train,yu_train)\ny_pred = rt2.predict(X_test)\nprint(metrics.accuracy_score(y_test, y_pred))\ny_true = y_test","97e1356c":"\ncm=confusion_matrix(y_true,y_pred)\nf, ax = plt.subplots(figsize=(8,8))\nsns.heatmap(cm,annot = True,linewidths=0.5,linecolor=\"red\",fmt=\".0f\",ax=ax)\nplt.xlabel(\"y_pred\")\nplt.ylabel(\"y_true\")\nplt.title(\"Confision Matrix\")\nplt.show()\nplt.show()\nprint(\"Accuracy: \",metrics.accuracy_score(y_test, y_pred)*100)","66f15aad":"### Higher amount in fraudulent transactions then normal","b2c705d0":"### Longer time in normal transactions then fraudulent","b2b64141":"# Balanced data"}}