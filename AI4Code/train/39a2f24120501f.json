{"cell_type":{"9117e77d":"code","b153af7d":"code","2ab6ef74":"code","67a09086":"code","505283b4":"code","bef62709":"markdown","21e5f31f":"markdown","3500d5c2":"markdown","f5ef7b3a":"markdown","1112274e":"markdown","2a85d4dc":"markdown"},"source":{"9117e77d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b153af7d":"import matplotlib.pyplot as plt\n%matplotlib inline\n\n#Import ImageDataGenerator for Loading Images\nfrom keras.preprocessing.image import ImageDataGenerator","2ab6ef74":"# We specify image augmentation parameters as the arguments\n# Train - test\/validation split can be done with the argument - validation_split\ndatagen = ImageDataGenerator(rescale=1.\/255,\n                            validation_split = 0.1,rotation_range=30,\n                                    width_shift_range=0.2,\n                                    height_shift_range=0.2,\n                                    shear_range=0.2,\n                                    zoom_range=0.2,\n                                    horizontal_flip=True,\n                                    fill_mode='nearest')\n# flow_from_directory gets label for an image from the sub-directory it is placed in\n# Generate Train data\ntraingenerator = datagen.flow_from_directory(\n        '..\/input\/10_categories-1563192636507\/10_categories',\n        target_size=(75, 75),\n        batch_size=3350,\n        subset='training',\n        class_mode='categorical')\n\n# Generate Validation data\nvalgenerator = datagen.flow_from_directory(\n        '..\/input\/10_categories-1563192636507\/10_categories',\n        target_size=(75, 75),\n        batch_size=360,\n        subset='validation',\n        class_mode='categorical')","67a09086":"x_train,y_train = next(traingenerator)\n\nx_test,y_test = next(valgenerator)","505283b4":"plt.figure(figsize=(20,10))\nfor i in range(6):\n    plt.subplot(1,6,i+1)\n    plt.imshow(x_train[i])","bef62709":"### Import required Libraries","21e5f31f":"Plot few random images to check","3500d5c2":"We use ImageDataGenerator and Flow_from_directory functions which are part of keras preprocessing toolkit to Load the data.\nDetails about these classes can be found [here](http:\/\/keras.io\/preprocessing\/image\/)","f5ef7b3a":"### ****Loading Images from the directories along with their labels is an important step in any image classification problem. Pre-processing the image data with Augmentation,downsampling,rescaling,Train-Test split and finally feeding it to a CNN can be a tedious task and often gets cumbersome.This kernel trys to breakdown the entire process to simple steps to help us get started with image classification.****\n### This kernel uses a small MultiClass image dataset with 10 Classes (sub-directories as class tags)","1112274e":"## These can be further loaded into convnet models for classification","2a85d4dc":"### Split the data into Train and Test\n#### X for the image and y for its corresponding label (This step can be time consuming as this is where the iterator is initiated to load images)"}}