{"cell_type":{"b2921284":"code","6287e3a0":"code","aae8c4d4":"code","78a23a0e":"code","c7e4f1d4":"code","cd4d7a17":"code","d2f6b56c":"code","5c724f71":"code","0e9e7199":"code","c531dc45":"code","46e7db6f":"code","e7781cab":"code","9bd15be0":"code","c52906cb":"code","2ad2f377":"code","274a8ba9":"code","1c7bc008":"code","ff6bcbda":"code","781b9747":"markdown","7208976e":"markdown","1e43f735":"markdown","1ae327d5":"markdown","1f52c6a9":"markdown","a004a514":"markdown","77e6278d":"markdown","b26e65b5":"markdown","6fd85931":"markdown","6ffd8195":"markdown"},"source":{"b2921284":"from matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import datasets\nfrom pandas import DataFrame\nimport pandas as pd\niris=datasets.load_iris()\ndf = DataFrame(data=iris.data, columns=iris.feature_names)\ndf['class'] = iris.target\n\nprint(iris.DESCR)\ndf.head()","6287e3a0":"df.describe()","aae8c4d4":"fig, axs = plt.subplots(2,2)\naxes = [axs[0,0], axs[0,1], axs[1,0], axs[1,1]]\nfor i,ax in enumerate(axes):\n    ax.hist(iris.data[:,i], density=True)\n    ax.set_xlabel(iris.feature_names[i])\nfig.tight_layout() #To solve space between plots issues\nplt.show()","78a23a0e":"fig, axs = plt.subplots(2,2)\naxes = [axs[0,0], axs[0,1], axs[1,0], axs[1,1]]\nfor i,ax in enumerate(axes):\n    sns.histplot(data=iris.data[:,i], stat='density', kde=True, ax=ax)\n    ax.set_title(iris.feature_names[i])\nfig.tight_layout() #To solve space between plots issues\nplt.show()","c7e4f1d4":"\"\"\"\npd.melt: This function is useful to massage a DataFrame into a format where one or more columns are identifier variables (id_vars), while all other columns, considered measured variables (value_vars), are \u201cunpivoted\u201d to the row axis, leaving just two non-identifier columns, \u2018variable\u2019 and \u2018value\u2019.\n\"\"\"\ndfm = pd.melt(df, id_vars=\"class\")\nsns.boxplot(data=dfm, x=\"class\", y=\"value\", hue=\"variable\")","cd4d7a17":"dfm = pd.melt(df, id_vars=\"class\")\nsns.violinplot(data=dfm, x=\"class\", y=\"value\", hue=\"variable\")","d2f6b56c":"sns.boxplot(x=df['class'], y=df['petal length (cm)'])","5c724f71":"sns.violinplot(x=df['class'], y=df['petal length (cm)'])\n","0e9e7199":"sns.jointplot(kind='scatter', x=df['petal length (cm)'], y=df['sepal length (cm)'])","c531dc45":"sns.jointplot(kind='kde', x=df['petal length (cm)'], y=df['sepal length (cm)'])","46e7db6f":"sns.jointplot(kind='hist', x=df['petal length (cm)'], y=df['sepal length (cm)'])","e7781cab":"sns.jointplot(kind='reg', x=df['petal length (cm)'], y=df['sepal length (cm)'])","9bd15be0":"sns.jointplot(kind='resid', x=df['petal length (cm)'], y=df['sepal length (cm)'])","c52906cb":"jg = sns.JointGrid(x=df['petal length (cm)'], y=df['sepal length (cm)'])\njg.plot_joint(sns.histplot)\njg.plot_joint(sns.scatterplot)\njg.plot_marginals(sns.histplot, stat='density', kde=True)","2ad2f377":"sns.pairplot(df)","274a8ba9":"sns.pairplot(df, hue='class')","1c7bc008":"corr = df.corr()\nsns.heatmap(corr, annot=True)\n","ff6bcbda":"g = sns.PairGrid(df, hue='class')\ng.map_diag(sns.histplot)\ng.map_upper(sns.scatterplot)\ng.map_lower(sns.kdeplot, shade=True)","781b9747":"## Pair Plot","7208976e":"## Violin Plot","1e43f735":"## Box Plot","1ae327d5":"#### Overlaying","1f52c6a9":"## Heatmap","a004a514":"# Bivariate Analysis\n\n## Joint Plot\n\n### Two variables\nSeaborn jointplot:\n* kind={ \u201cscatter\u201d | \u201ckde\u201d | \u201chist\u201d | \u201chex\u201d | \u201creg\u201d | \u201cresid\u201d }","77e6278d":"## Box vs Violin Plot","b26e65b5":"## Custom Pair Plot","6fd85931":"### Seaborn","6ffd8195":"From AI-Bootcamp: https:\/\/github.com\/v-fuentec\/AI-bootcamp\n\n# Univariate Analysis\n\n## Density Histogram\n\n### Matplotlib"}}