{"cell_type":{"df1aa940":"code","ce79d110":"code","e63c4023":"code","f74816d0":"code","c0e5dae6":"code","0dc7bc0c":"code","38cf57bd":"code","3293a316":"code","36af23f3":"code","0649c50a":"code","1230a624":"code","74c08986":"code","55201887":"code","68604cc5":"code","da3c5a14":"code","efa55a3f":"markdown","e79e2924":"markdown","f6921f32":"markdown","59207276":"markdown","aa3a6140":"markdown","7b89d0ee":"markdown","9d4bb696":"markdown","ec361511":"markdown","0327c895":"markdown","75613520":"markdown"},"source":{"df1aa940":"import pandas as pd\n\ntrain_df = pd.read_csv(\"\/kaggle\/input\/genre-classification-dataset-imdb\/Genre Classification Dataset\/train_data.txt\",\n                       engine=\"python\",\n                       sep=\" ::: \",\n                       names=[\"id\", \"movie\", \"genre\", \"summary\"])\n\ntest_df = pd.read_csv(\"\/kaggle\/input\/genre-classification-dataset-imdb\/Genre Classification Dataset\/test_data_solution.txt\",\n                      engine=\"python\",\n                      sep=\" ::: \",\n                      names=[\"id\", \"movie\", \"genre\", \"summary\"])","ce79d110":"# Viewing training data\ntrain_df.head()","e63c4023":"# Viewing test data\ntest_df.head()","f74816d0":"train_shuffled = train_df.sample(frac=1)","c0e5dae6":"# Split the data using train_test_split from sklearn\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_val, y_train, y_val = train_test_split(train_shuffled[\"summary\"],\n                                                 train_shuffled[\"genre\"],\n                                                 test_size=0.1)\nX_test, y_test = test_df[\"summary\"], test_df[\"genre\"]","0dc7bc0c":"from sklearn.preprocessing import OneHotEncoder\n\nohe = OneHotEncoder(sparse=False)\nohe.fit(train_shuffled[\"genre\"].to_numpy().reshape(-1,1)) # Fit the encoder to genre of training data\n\ntrain_ohe = ohe.transform(y_train.to_numpy().reshape(-1, 1))\nval_ohe = ohe.transform(y_val.to_numpy().reshape(-1,1))\ntest_ohe = ohe.transform(y_test.to_numpy().reshape(-1,1))","38cf57bd":"train_sentences = X_train.tolist()\nval_sentences = X_val.tolist()\ntest_sentences = X_test.tolist()","3293a316":"import tensorflow_hub as hub\nembedding_layer = hub.KerasLayer(\"https:\/\/tfhub.dev\/google\/universal-sentence-encoder\/4\",\n                                        trainable=False,\n                                        name=\"universal_sentence_encoder\")","36af23f3":"from tensorflow.data import Dataset as tfd\nimport tensorflow as tf\n\nAUTOTUNE = tf.data.AUTOTUNE\n\ntrain_dataset = tfd.from_tensor_slices((X_train, train_ohe)).batch(32).prefetch(AUTOTUNE)\nval_dataset = tfd.from_tensor_slices((X_val, val_ohe)).batch(32).prefetch(AUTOTUNE)\ntest_dataset = tfd.from_tensor_slices((X_test, test_ohe)).batch(32).prefetch(AUTOTUNE)\n\ntrain_dataset, val_dataset, test_dataset","0649c50a":"classes = len(train_shuffled[\"genre\"].value_counts())","1230a624":"# Build the model\nfrom tensorflow.keras import layers\n\ninputs = layers.Input(shape=[], dtype=\"string\")\nx = embedding_layer(inputs)\nx = layers.Dense(512, activation=\"relu\")(x)\noutputs = layers.Dense(classes, activation=\"softmax\")(x)\n\nmodel = tf.keras.Model(inputs, outputs)","74c08986":"# Compile the model\nmodel.compile(loss=\"categorical_crossentropy\",\n              optimizer=tf.keras.optimizers.Adam(),\n              metrics=[\"accuracy\"])","55201887":"model.summary()","68604cc5":"history = model.fit(train_dataset,\n                  steps_per_epoch=int(0.1*len(train_dataset)),\n                  epochs=5,\n                  validation_data=val_dataset,\n                  validation_steps=int(0.1*len(val_dataset)))","da3c5a14":"model.evaluate(test_dataset)","efa55a3f":"# Creating Dataset","e79e2924":"## List (Summary)","f6921f32":"# Conclusion\n\nAccuracy: 57.87%\n\nBeats the original author's accuracy. Cleaning the data strangely gives lesser accuracy.","59207276":"## Shuffling the data","aa3a6140":"# Importing Data","7b89d0ee":"# Data Manipulation","9d4bb696":"# Model","ec361511":"## One-Hot Encoding (Labels)","0327c895":"## Splitting the data","75613520":"# Universal Serial Encoder (Embedding Layer)"}}