{"cell_type":{"f29261df":"code","747687ac":"code","cac5ee00":"code","0f85e9de":"code","9cf69a55":"code","1e5a5797":"code","e249aaae":"code","43e2f54d":"code","6785632a":"code","f88a89c5":"code","ac4ce289":"code","e241e956":"code","4d8494dd":"code","f560bf91":"code","479499f2":"code","eff4f558":"code","b6e1653c":"code","0ca9036d":"code","4b8ece6b":"code","238ee1fe":"code","b3b5dee2":"code","37b084ef":"code","66cc5a31":"code","b27ce6ed":"code","f9768474":"code","e7b79210":"code","c902ed72":"code","3a96f4bc":"code","588026e2":"code","ab4f0701":"code","1dd2f9ea":"code","28ef3921":"code","7bd6272d":"code","49efbcf0":"code","740893aa":"code","95267af3":"code","49c3cf7d":"code","43b7800a":"code","48133ccf":"code","ba69e4c8":"code","95ed3307":"code","3c6981d1":"code","494f44b1":"code","79bd485e":"code","5027a253":"code","afce76e4":"code","933826c2":"code","d1e81ff2":"code","e2cb84c4":"code","be08614a":"code","143b742f":"code","ed189247":"code","97ef24f1":"code","77392666":"code","78cf7e2c":"code","0d043e33":"code","92eea657":"code","b0b900a3":"code","1fb2e071":"code","c7304686":"code","61134aaa":"code","90660d45":"code","42b08615":"code","9b89bfbf":"code","2ec5f423":"code","79c130b0":"code","a6350468":"code","03ffbbdc":"code","f2793e50":"code","5717e57a":"code","c1b545f6":"code","0b6f3c0c":"code","b5ffa9e7":"code","9d5ae8ef":"markdown","ec590877":"markdown","372d996a":"markdown","810cc5ac":"markdown","cb2509e5":"markdown"},"source":{"f29261df":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport sklearn \nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom mpl_toolkits.axes_grid import ImageGrid\nplt.style.use(\"dark_background\")\nfrom mpl_toolkits.mplot3d import Axes3D","747687ac":"df = pd.read_csv(\"..\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv\")\ndf.head()","cac5ee00":"sns.heatmap(df.isnull())","0f85e9de":"df['CustomerID'] = df['CustomerID'].astype(object)","9cf69a55":"df.describe()","1e5a5797":"df.info()","e249aaae":"sns.heatmap(df.corr(),annot=True,cmap='viridis')","43e2f54d":"px.histogram(df['Age'],title='Age Distribution',template='plotly_dark')","6785632a":"px.histogram(df['Annual Income (k$)'],title='Annual Income Distribution',template='plotly_dark')","f88a89c5":"px.histogram(df['Spending Score (1-100)'],title='Spending Score (1-100)',template='plotly_dark')","ac4ce289":"df.head()","e241e956":"gender = df['Gender'].value_counts().to_frame().reset_index().rename(columns={'index':'Gender','Gender':'Count'})\n\n\npx.bar(data_frame=gender,x='Gender',y='Count',color='Gender',color_discrete_sequence=['pink','royalblue'],title='Count of Gender',template='plotly_dark',\n      text='Count')\n\n","4d8494dd":"fig = go.Figure(data=go.Scatter(x=df['Age'],\n                                y=df['Annual Income (k$)'],\n                                mode='markers',\n                                marker=dict(\n                                size=14,\n                                color=df['Annual Income (k$)'], \n                                colorscale='rainbow', \n                                showscale=True),\n                               ))\n\nfig.update_layout(title='Age v\/s Annual Salary (k$)',xaxis_title='Age',yaxis_title='Annual Income (k$)',template='plotly_dark')\nfig.show()","f560bf91":"px.scatter(data_frame=df,x='Age',y='Annual Income (k$)',color='Gender',size='Annual Income (k$)',title='Age v\/s Annual Income by Gender',template='plotly_dark',\n          color_discrete_sequence=['royalblue','pink'])","479499f2":"df.head(2)","eff4f558":"fig = go.Figure(data=go.Scatter(x=df['Age'],\n                                y=df['Spending Score (1-100)'],\n                                mode='markers',\n                                marker=dict(\n                                size=16,\n                                color=df['Spending Score (1-100)'], \n                                colorscale='Viridis', \n                                showscale=True),\n                               ))\n\nfig.update_layout(title='Age v\/s Spending Score (1-100))',xaxis_title='Age',yaxis_title='Spending Score (1-100)',template='plotly_dark')\nfig.show()","b6e1653c":"px.scatter(data_frame=df,x='Age',y='Spending Score (1-100)',color='Gender',size='Spending Score (1-100)',title='Age v\/s Spending Score (1-100) by Gender',\n          color_discrete_sequence=['royalblue','pink'],template='plotly_dark')","0ca9036d":"df.head()","4b8ece6b":"fig = go.Figure(data=go.Scatter(\n                x = df['Spending Score (1-100)'],\n                y = df['Annual Income (k$)'],\n                mode = 'markers',\n                marker = dict(size=14,color=df['CustomerID'],\n                colorscale='Spectral',\n                showscale=True)))\n\nfig.update_layout(title=\"Spending Score v\/s Annual Income by Customer Id\",xaxis_title='Spending Score (1-100)',yaxis_title = 'Annual Income (k$)',\n                 template='plotly_dark')\nfig.show()","238ee1fe":"px.scatter(data_frame=df,x='Spending Score (1-100)',y='Annual Income (k$)',color='Gender',size='Annual Income (k$)',\n           title='Spending Score (1-100) v\/s Annual Income (k$) by Gender',\n          color_discrete_sequence=['royalblue','pink'],template='plotly_dark')","b3b5dee2":"df.head()","37b084ef":"px.scatter_3d(data_frame=df,x='Annual Income (k$)',y='Spending Score (1-100)',z='Age',color='Gender',template='plotly_dark',\n             title='3D Scatter plot for KMeans Clusters')","66cc5a31":"group = df.groupby('CustomerID')['Spending Score (1-100)'].sum().reset_index().sort_values(by='Spending Score (1-100)',ascending=False).head(10)\ngroup","b27ce6ed":"fig = go.Figure(data=[go.Pie(labels=group['CustomerID'],\n                             values=group['Spending Score (1-100)'])])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent', textfont_size=20,\n                  marker=dict(line=dict(color='#ffffff', width=2)))\n\nfig.update_layout(title=\"Top 10 Customers by Spending Score\",template='plotly_dark')\nfig.show()\n\n\n\n# px.pie(data_frame=group,values='Spending Score (1-100)',names='CustomerID',template='plotly_dark',color_discrete_sequence=px.colors.sequential.Greens)","f9768474":"group = df.groupby('Gender')['Annual Income (k$)'].mean().reset_index().sort_values(by='Annual Income (k$)',ascending=False)\ngroup","e7b79210":"colors = ['royalblue','pink']\nfig = go.Figure(data=[go.Pie(labels=group['Gender'],\n                             values=group['Annual Income (k$)'],hole=0.3)])\nfig.update_traces(hoverinfo='label+percent', textinfo='value', textfont_size=20,\n                  marker=dict(colors=colors, line=dict(color='#ffffff', width=2)))\n\nfig.update_layout(title=\"Gender by Average Income\",template='plotly_dark')\nfig.show()","c902ed72":"px.box(data_frame=df,x='Gender',y='Annual Income (k$)',points='all',color='Gender',color_discrete_sequence=['royalblue','pink'],template='plotly_dark',\n      title=\"Box Plot for Annual Income (k$) for Gender\")","3a96f4bc":"px.box(data_frame=df,x='Gender',y='Spending Score (1-100)',notched=True,color='Gender',color_discrete_sequence=['royalblue','pink'],template='plotly_dark',\n      title=\"Box Plot for Spending Score (1-100) for Gender\")","588026e2":"import plotly.graph_objects as go\n\nfig = go.Figure()\nfig.add_trace(go.Box(\n    x=df['Gender'],y=df['Spending Score (1-100)'],\n    name='Mean & SD',\n    boxmean='sd'\n))\n\nfig.update_layout(template='plotly_dark',title=\"Box Plot for Spending Score v\/s Gender\")\nfig.show()","ab4f0701":"df['Age'].describe()","1dd2f9ea":"df['Age Category'] = pd.cut(x=df['Age'], bins=[15,30,45,60,75])","28ef3921":"df.head()","7bd6272d":"agecount = df['Age Category'].value_counts().to_frame().reset_index().rename(columns= {\"index\":\"Age Category\",\"Age Category\":\"Count\"})\nagecount['Age Category'] = agecount['Age Category'].astype(object)","49efbcf0":"agecount","740893aa":"plt.figure(figsize=(10,6))\nsns.barplot(data=agecount,x='Age Category',y='Count')\nplt.title(\"Count of Customers belonging to each age category\",size=16)\nplt.show()","95267af3":"mygroup = df.groupby(['Age Category','Gender'])['Annual Income (k$)'].mean().reset_index()\nmygroup","49c3cf7d":"plt.figure(figsize=(10,6))\nsns.barplot(data=mygroup,x='Age Category',y='Annual Income (k$)',hue='Gender',palette=['#0066ff','#cc66ff'],edgecolor='black')\nplt.title(\"Average Annual Income (k$) by Gender belonging to each age category\",size=14)\nplt.show()","43b7800a":"mygroup = df.groupby(['Age Category','Gender'])['Spending Score (1-100)'].mean().reset_index()\n\n\nplt.figure(figsize=(10,6))\nsns.barplot(data=mygroup,x='Age Category',y='Spending Score (1-100)',hue='Gender',palette=['#0066ff','#cc66ff'],edgecolor='black')\nplt.title(\"Average Spending Score (1-100) by Gender belonging to each age category\",size=14)\nplt.show()","48133ccf":"# df.drop(columns=['Age Category'],inplace=True,axis=1)\n\n# from sklearn.preprocessing import LabelEncoder\n# enc = LabelEncoder()\n# df['Gender'] = enc.fit_transform(df['Gender'])","ba69e4c8":"df = df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]\ndf.head()","95ed3307":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ndfscaled = scaler.fit_transform(df)","3c6981d1":"dfscaled[:5]","494f44b1":"from sklearn.cluster import KMeans\nsumofsq = {}\nfor k in range(1,15):\n    km = KMeans(n_clusters=k,init='k-means++',max_iter=1000)\n    km = km.fit(dfscaled)\n    sumofsq[k] = km.inertia_","79bd485e":"plt.figure(figsize=(14,8))\nplt.xlabel('Number of Clusters(k)')\nplt.ylabel('Sum of Square Distances')\nplt.title('Elbow Method For Optimal number of Clusters')\nsns.pointplot(x=list(sumofsq.keys()),y=list(sumofsq.values()),color='royalblue')\nplt.show()","5027a253":"kmeansmodel = KMeans(n_clusters=6, init= 'k-means++', max_iter= 1000)\nkmeansmodel.fit_transform(dfscaled)\n\nKmeansdf = df.copy()\nKmeansdf['Cluster_by_KMeans'] = kmeansmodel.labels_\nKmeansdf[\"Cluster_by_KMeans\"] = Kmeansdf[\"Cluster_by_KMeans\"].astype(str)","afce76e4":"\npx.scatter(data_frame=Kmeansdf,x='Spending Score (1-100)',y='Annual Income (k$)',color='Cluster_by_KMeans',template='plotly_dark',\n          title='Spending Score (1-100) v\/s Annual Income (k$) by KMeans Clusters')","933826c2":"Kmeansdf.head()","d1e81ff2":"px.scatter(data_frame=Kmeansdf,x='Age',y='Annual Income (k$)',color='Cluster_by_KMeans',template='plotly_dark',\n          title='Age v\/s Annual Income (k$) by KMeans Clusters')","e2cb84c4":"px.scatter(data_frame=Kmeansdf,x='Age',y='Spending Score (1-100)',color='Cluster_by_KMeans',template='plotly_dark',\n          title='Age v\/s Spending Score (1-100) by KMeans Clusters')","be08614a":"sns.countplot(Kmeansdf['Cluster_by_KMeans'])","143b742f":"from sklearn.metrics import silhouette_samples, silhouette_score\nimport matplotlib.cm as cm\n\nrange_n_clusters = [2, 3, 4, 5, 6,7,8,9,10]\nX = dfscaled.copy()\n\nfor n_clusters in range_n_clusters:\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    fig.set_size_inches(18, 7)\n    ax1.set_xlim([-0.1, 1])\n    ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])\n    clusterer = KMeans(n_clusters=n_clusters, random_state=10)\n    cluster_labels = clusterer.fit_predict(X)\n    silhouette_avg = silhouette_score(X, cluster_labels)\n    print(\"For n_clusters =\", n_clusters,\"The average silhouette_score is :\", silhouette_avg)\n    sample_silhouette_values = silhouette_samples(X, cluster_labels)\n\n    y_lower = 10\n    for i in range(n_clusters):\n        ith_cluster_silhouette_values = \\\n            sample_silhouette_values[cluster_labels == i]\n\n        ith_cluster_silhouette_values.sort()\n\n        size_cluster_i = ith_cluster_silhouette_values.shape[0]\n        y_upper = y_lower + size_cluster_i\n\n        color = cm.nipy_spectral(float(i) \/ n_clusters)\n        ax1.fill_betweenx(np.arange(y_lower, y_upper),\n                          0, ith_cluster_silhouette_values,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n\n        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n\n        y_lower = y_upper + 10  \n\n    ax1.set_title(\"The silhouette plot for the various clusters.\")\n    ax1.set_xlabel(\"The silhouette coefficient values\")\n    ax1.set_ylabel(\"Cluster label\")\n\n    ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n\n    ax1.set_yticks([])  # Clear the yaxis labels \/ ticks\n    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n    colors = cm.nipy_spectral(cluster_labels.astype(float) \/ n_clusters)\n    ax2.scatter(X[:, 0], X[:, 1], marker='.', s=30, lw=0, alpha=0.7,\n                c=colors, edgecolor='k')\n\n    centers = clusterer.cluster_centers_\n    ax2.scatter(centers[:, 0], centers[:, 1], marker='o',\n                c=\"white\", alpha=1, s=200, edgecolor='k')\n\n    for i, c in enumerate(centers):\n        ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1,\n                    s=50, edgecolor='k')\n\n    ax2.set_title(\"The visualization of the clustered data.\")\n    ax2.set_xlabel(\"Feature space for the 1st feature\")\n    ax2.set_ylabel(\"Feature space for the 2nd feature\")\n\n    plt.suptitle((\"Silhouette analysis for KMeans clustering on sample data \"\n                  \"with n_clusters = %d\" % n_clusters),\n                 fontsize=14, fontweight='bold')\n\nplt.show()","ed189247":"range_n_clusters = [2, 3, 4, 5, 6,7,8,9,10]\nsilscore = []\nX = dfscaled.copy()\n\nfor n_clusters in range_n_clusters:\n    clusterer = KMeans(n_clusters=n_clusters, random_state=10)\n    cluster_labels = clusterer.fit_predict(X)\n    silhouette_avg = silhouette_score(X, cluster_labels)\n    silscore.append(silhouette_avg)\n    print(\"For n_clusters =\", n_clusters,\"The average silhouette_score is :\", silhouette_avg)\n    sample_silhouette_values = silhouette_samples(X, cluster_labels)","97ef24f1":"plt.figure(figsize=(14,8))\nplt.xlabel('Number of Clusters(k)')\nplt.ylabel('Average Silhouette Score')\nplt.title('Silhouette Analysis For Optimal number of Clusters')\nsns.pointplot(x=range_n_clusters,y=silscore,color='royalblue')\nplt.show()","77392666":"clustercount = Kmeansdf['Cluster_by_KMeans'].value_counts().to_frame().reset_index().rename(columns={\"index\":\"Cluster\",\"Cluster_by_KMeans\":\"Count\"}).sort_values(by='Cluster',\nascending=True)\nclustercount","78cf7e2c":"# clustercount.set_index(\"Cluster\")","0d043e33":"Kmeansdf.head()","92eea657":"Kmeansdf.dtypes","b0b900a3":"px.scatter_3d(data_frame=Kmeansdf,x='Annual Income (k$)',y='Spending Score (1-100)',z='Age',color='Cluster_by_KMeans',template='plotly_dark',\n             title='3D Scatter plot for KMeans Clusters')","1fb2e071":"from sklearn.cluster import DBSCAN","c7304686":"dfscaled[:5]","61134aaa":"from sklearn.neighbors import NearestNeighbors\n\nneigh = NearestNeighbors()\nnbrs = neigh.fit(dfscaled)\ndistances, indices = nbrs.kneighbors(dfscaled)","90660d45":"distances = np.sort(distances, axis=0)\ndistances = distances[:,1]\nplt.plot(distances)","42b08615":"clustering = DBSCAN(eps=0.4).fit(dfscaled)\nclustering.labels_","9b89bfbf":"Kmeansdf[\"DBSCAN_clusters\"] = clustering.labels_\nKmeansdf.head()","2ec5f423":"Kmeansdf['DBSCAN_clusters'] = Kmeansdf['DBSCAN_clusters'].astype(\"str\")","79c130b0":"px.scatter_3d(data_frame=Kmeansdf,x='Annual Income (k$)',y='Spending Score (1-100)',z='Age',color='DBSCAN_clusters',template='plotly_dark',\n             title='3D Scatter plot for DBSCAN Clusters')","a6350468":"Kmeansdf.head()","03ffbbdc":"px.scatter(data_frame=Kmeansdf,x='Age',y='Spending Score (1-100)',color='DBSCAN_clusters',template='plotly_dark',\n          title='Age v\/s Spending Score (1-100) by DBSCAN Clusters')","f2793e50":"px.scatter(data_frame=Kmeansdf,x='Age',y='Annual Income (k$)',color='DBSCAN_clusters',template='plotly_dark',\n          title='Age v\/s Annual Income (k$) by DBSCAN Clusters')","5717e57a":"px.scatter(data_frame=Kmeansdf,x='Spending Score (1-100)',y='Annual Income (k$)',color='DBSCAN_clusters',template='plotly_dark',\n          title='Spending Score (1-100) v\/s Annual Income (k$) by DBSCAN Clusters')","c1b545f6":"from sklearn.cluster import AffinityPropagation\nfrom sklearn import metrics","0b6f3c0c":"af = AffinityPropagation(preference =-50).fit(dfscaled) \ncluster_centers_indices = af.cluster_centers_indices_ \nlabels = af.labels_ \n  \nn_clusters_ = len(cluster_centers_indices)\n\nprint(n_clusters)\n","b5ffa9e7":"from itertools import cycle \n  \nplt.close('all') \nplt.figure(1) \nplt.clf() \n  \ncolors = cycle('bgrcmykbgrcmykbgrcmykbgrcmyk') \n  \nfor k, col in zip(range(n_clusters_), colors): \n    class_members = labels == k \n    cluster_center = dfscaled[cluster_centers_indices[k]] \n    plt.plot(dfscaled[class_members, 0], dfscaled[class_members, 1], col + '.') \n    plt.plot(cluster_center[0], cluster_center[1], 'o', \n             markerfacecolor = col, markeredgecolor ='k', \n             markersize = 14) \n  \n    for x in dfscaled[class_members]: \n        plt.plot([cluster_center[0], x[0]],  \n                 [cluster_center[1], x[1]], col) \n  \nplt.title('Estimated number of clusters: % d' % n_clusters_) \nplt.show() ","9d5ae8ef":"# KMeans Clustering","ec590877":"# Affinity Clustering","372d996a":"# DBSCAN CLUSTERING","810cc5ac":"# The optimal value for epsilon will be found at the point of maximum curvature.**","cb2509e5":"# Optimal Clusters according to both Elbow method and Silhouette Analysis is 6."}}