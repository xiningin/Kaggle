{"cell_type":{"2f19e87a":"code","f24e475c":"code","349b23a8":"code","0834eabe":"code","062878ee":"code","4425dce3":"code","7487284a":"code","cbedbd99":"code","8f6ef5be":"code","962f20c0":"code","d7ae0509":"code","d51ebfa2":"code","6add5967":"code","40f2401d":"code","84052b19":"code","74d150c7":"code","bce72b77":"code","b927a20d":"code","3e2bf260":"code","b3b8a614":"code","b399efc3":"code","8066225f":"code","c187b690":"code","db45096d":"code","3cedf335":"code","c9d4f58e":"code","84f19b64":"code","39c50e03":"code","47d3fecf":"code","3468c447":"code","09e79eab":"code","dfe570ee":"code","07e29cb5":"code","7c812514":"code","6680462a":"code","e7c2e773":"code","fc82388f":"code","36f12e47":"code","390c2e27":"code","84a7ce65":"code","db33bd54":"code","1fdda8d5":"code","515c2a61":"code","b9b52ed7":"code","6bcfb32e":"code","cfd6ca30":"code","1c0aeae5":"code","b6e7320c":"code","0697bf40":"code","3faefa66":"code","9da3a136":"code","41b8d3a9":"code","0626bf16":"code","048e149a":"code","8737a538":"code","b842ccd4":"code","a0f9e86b":"code","2c4185a0":"code","2f4948dd":"code","bf4a4adb":"code","e49f7a8b":"code","eb4567a5":"code","2c854d71":"code","b7dd0cd4":"code","03105b08":"code","62c16cc8":"code","5c99e90c":"code","ed7daae3":"code","70151457":"code","6d04a382":"code","b5febb69":"code","fe5e294e":"code","fe33f303":"code","bf3ae23e":"code","453ebd05":"code","6f960645":"code","d04046af":"code","1f835815":"code","d401f7d4":"code","1763aa49":"code","106175c6":"code","8b295572":"code","7ada4134":"code","46df66f2":"code","a2ef903f":"code","e54ef03a":"code","f71c8e63":"code","2c903cb4":"markdown","2dc05de6":"markdown","a629ed68":"markdown","3f6579a2":"markdown","14864da1":"markdown","34107ff1":"markdown","e31d1f5f":"markdown","93b8e6f7":"markdown","08290502":"markdown","2cae31ee":"markdown","9a6b6870":"markdown","bc66b684":"markdown","414bf21c":"markdown","908b14a2":"markdown","e002a034":"markdown","f037651b":"markdown","2f2dfbb3":"markdown","65d9e7a7":"markdown","53c3031e":"markdown","1b94bfe6":"markdown","661339bd":"markdown","ce4ccba1":"markdown","6b347ed1":"markdown","f5670aa8":"markdown","e478a047":"markdown","1c7a3d36":"markdown","624f6ae9":"markdown","98ea85b4":"markdown","2fd0df5a":"markdown","cd4a0f53":"markdown","86c37753":"markdown","9395cd06":"markdown","e17986c0":"markdown","71e49807":"markdown","87589cf7":"markdown","a58a7090":"markdown","9349cdc3":"markdown","6786be0d":"markdown","ef169608":"markdown","098d3166":"markdown","f76b3119":"markdown","a5c70d46":"markdown","df8ad4da":"markdown","a0e11484":"markdown","591e7880":"markdown","f1041a6b":"markdown","a0a7afe1":"markdown","e0fc5cf1":"markdown","e276a5ab":"markdown","c2892dfd":"markdown","6c9cfe83":"markdown","8694c171":"markdown","8cbd7848":"markdown","da876331":"markdown","ae6f4589":"markdown","48ab14c3":"markdown","9ef3ba4e":"markdown","e235cefe":"markdown","49a987d6":"markdown","283dad99":"markdown","5d2b940a":"markdown","3baf836d":"markdown","1ef87999":"markdown","2d6b4f86":"markdown","306833a4":"markdown","f073d1a2":"markdown","420a0e4c":"markdown","78d2ca42":"markdown","b6c37348":"markdown","8ee88c47":"markdown","2279d7e7":"markdown","2be0a8eb":"markdown","0683d761":"markdown","181a5782":"markdown","7eda1846":"markdown","76f39642":"markdown","088bfdd2":"markdown"},"source":{"2f19e87a":"#Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\ncolor = sns.color_palette()\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()\nimport os\n# sklearn preprocessing for dealing with categorical variables\nfrom sklearn.preprocessing import LabelEncoder","f24e475c":"# List files available\nprint(os.listdir(\"..\/input\/\"))","349b23a8":"#Importing the dataset\ndf_train = pd.read_csv('..\/input\/application_train.csv')\ndf_test=pd.read_csv('..\/input\/application_test.csv')","0834eabe":"#Shape of dataset\ndf_train.shape","062878ee":"df_train.head(8)","4425dce3":"df_train.describe()","7487284a":"df_train['NAME_FAMILY_STATUS'].value_counts()","cbedbd99":"df_test.head(5)","8f6ef5be":"df_test.describe()","962f20c0":"df_train['TARGET'].value_counts()","d7ae0509":"df_train['TARGET'].astype(int).plot.hist();","d51ebfa2":"# Function to calculate missing values by column# Funct \ndef missing_values_table(df):\n        # Total missing values\n        mis_val = df.isnull().sum()\n        \n        # Percentage of missing values\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        \n        # Make a table with the results\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        \n        # Rename the columns\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        \n        # Sort the table by percentage of missing descending\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n        '% of Total Values', ascending=False).round(1)\n        \n        # Print some summary information\n        print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"      \n            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n              \" columns that have missing values.\")\n        \n        # Return the dataframe with missing information\n        return mis_val_table_ren_columns","6add5967":"# Missing values statistics\nmissing_values = missing_values_table(df_train)\nmissing_values.head(20)","40f2401d":"# Number of each type of column\ndf_train.dtypes.value_counts()","84052b19":"# Number of unique classes in each object column\ndf_train.select_dtypes('object').apply(pd.Series.nunique, axis = 0)","74d150c7":"from sklearn.preprocessing import LabelEncoder\n# Create a label encoder object\nle = LabelEncoder()\nle_count = 0\n\n# Iterate through the columns\nfor col in df_train:\n    if df_train[col].dtype == 'object':\n        # If 2 or fewer unique categories\n        if len(list(df_train[col].unique())) <= 2:\n            # Train on the training data\n            le.fit(df_train[col])\n            # Transform both training and testing data\n            df_train[col] = le.transform(df_train[col])\n            df_test[col] = le.transform(df_test[col])\n            \n            # Keep track of how many columns were label encoded\n            le_count += 1\n            \nprint('%d columns were label encoded.' % le_count)","bce72b77":"# one-hot encoding of categorical variables\ndf_train = pd.get_dummies(df_train)\ndf_test = pd.get_dummies(df_test)\n\nprint('Training Features shape: ', df_train.shape)\nprint('Testing Features shape: ', df_test.shape)","b927a20d":"train_labels = df_train['TARGET']\n\n# Align the training and testing data, keep only columns present in both dataframes\ndf_train, df_test = df_train.align(df_test, join = 'inner', axis = 1)\n\n# Add the target back in\ndf_train['TARGET'] = train_labels\n\nprint('Training Features shape: ', df_train.shape)\nprint('Testing Features shape: ', df_test.shape)","3e2bf260":"(df_train['DAYS_BIRTH'] \/ -365).describe()","b3b8a614":"df_train['DAYS_EMPLOYED'].describe()","b399efc3":"df_train['DAYS_EMPLOYED'].plot.hist(title = 'Days Employment Histogram');\nplt.xlabel('Days Employment');","8066225f":"# Missing values statistics\nmissing_values = missing_values_table(df_train)\nmissing_values.head(20)","c187b690":"#Omitting TARGET from Column list\ntrain= df_train.drop(columns = ['TARGET'])\n# Replace Nulls with NaN\n# mark zero values as missing or NaN\ntrain.iloc[:, :] = train.iloc[:, :].replace('' , np.NaN)\n# count the number of NaN values in each column\nprint(train.isnull().sum())","db45096d":"# print the first 20 rows of data\nprint(df_train.head(20))","3cedf335":"print (train.head(10))","c9d4f58e":"# drop rows with missing values\ntrain.dropna(inplace=True)\n# summarize the number of rows and columns in the dataset\n#Add in the TARGET\ntrain['TARGET']=df_train['TARGET']\nprint(train.shape)","84f19b64":"train.head(10)","39c50e03":"#Deploying Logistic Regression\n#Splitting the dataset\n\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt \nplt.rc(\"font\", size=14)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.cross_validation import train_test_split\n\nX = train.iloc[:, :1]\ny = train.iloc[:,1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\nfrom sklearn import metrics\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","47d3fecf":"y_pred = logreg.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))","3468c447":"from sklearn.metrics import classification_report,accuracy_score\nprint(classification_report(y_test, y_pred))\nprint(accuracy_score(y_test, y_pred))","09e79eab":"df_train = pd.read_csv('..\/input\/application_train.csv')","dfe570ee":"missing_values = missing_values_table(df_train)","07e29cb5":"print (df_test.shape)","7c812514":"# Number of unique classes in each object column\ndf_train.select_dtypes('object').apply(pd.Series.nunique, axis = 0)","6680462a":"print (list(df_train[col].unique()))","e7c2e773":"df_train = pd.get_dummies(df_train)\nprint('Training Features shape: ', df_train.shape)","fc82388f":"train_labels = df_train['TARGET']\n\n# Align the training and testing data, keep only columns present in both dataframes\ndf_train, df_test = df_train.align(df_test, join = 'inner', axis = 1)\n\n# Add the target back in\ndf_train['TARGET'] = train_labels\n\nprint('Training Features shape: ', df_train.shape)\nprint('Testing Features shape: ', df_test.shape)","36f12e47":"# Missing values statistics\nmissing_values = missing_values_table(df_train)\nmissing_values.head(20)","390c2e27":"df_train.head(10)","84a7ce65":"# Replace Nulls with NaN\n# mark zero values as missing or NaN\n\ndf_train.iloc[:, :1] = df_train.iloc[:, :1].replace('', np.NaN)\n# count the number of NaN values in each column\nprint(df_train.isnull().sum())\n\n# fill missing values with mean column values\ndf_train.fillna(df_train.mean(), inplace=True)\n# count the number of NaN values in each column\nprint(df_train.isnull().sum())","db33bd54":"df_train.head(10)","1fdda8d5":"#LDA\n\nfrom sklearn.preprocessing import Imputer\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\n# split dataset into inputs and outputs\n#values = dataset.values\nX = df_train.iloc[:, :-1]\ny = df_train.iloc[:, -1]\n# fill missing values with mean column values\nimputer = Imputer()\ntransformed_X = imputer.fit_transform(X)\n# evaluate an LDA model on the dataset using k-fold cross validation\nmodel = LinearDiscriminantAnalysis()\nkfold = KFold(n_splits=3, random_state=7)\nresult = cross_val_score(model, transformed_X, y, cv=kfold, scoring='accuracy')\nprint(result.mean())","515c2a61":"# Deploying Logistic Regression\n#Splitting the dataset\n#Keep the following 6 features (variables) which are important\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt \nplt.rc(\"font\", size=14)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.cross_validation import train_test_split\n\nX = df_train.iloc[:, :1]\ny = df_train.iloc[:,1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\nfrom sklearn import metrics\nlogreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","b9b52ed7":"y_pred = logreg.predict(X_test)\nprint('Accuracy of logistic regression classifier on test set: {:.2f}'.format(logreg.score(X_test, y_test)))","6bcfb32e":"from sklearn.metrics import classification_report,accuracy_score\nprint(classification_report(y_test, y_pred))\nprint(accuracy_score(y_test, y_pred))","cfd6ca30":"from sklearn.preprocessing import MinMaxScaler, Imputer\n\n# Drop the target from the training data\nif 'TARGET' in df_train:\n    train = df_train.drop(columns = ['TARGET'])\nelse:\n    train = df_train.copy()\n    \n# Feature names\nfeatures = list(train.columns)\n\n# Copy of the testing data\ntest = df_test.copy()\n\n# Median imputation of missing values\nimputer = Imputer(strategy = 'median')\n\n# Scale each feature to 0-1\nscaler = MinMaxScaler(feature_range = (0, 1))\n\n# Fit on the training data\nimputer.fit(train)\n\n# Transform both training and testing data\ntrain = imputer.transform(train)\ntest = imputer.transform(df_test)\n\n# Repeat with the scaler\nscaler.fit(train)\ntrain = scaler.transform(train)\ntest = scaler.transform(test)\n\nprint('Training data shape: ', train.shape)\nprint('Testing data shape: ', test.shape)","1c0aeae5":"from sklearn.linear_model import LogisticRegression\n\n# Make the model with the specified regularization parameter\nlog_reg = LogisticRegression(C = 0.0001)\n\n# Train on the training data\nlog_reg.fit(train, train_labels)","b6e7320c":"# Make predictions\n# Make sure to select the last column only\nlog_reg_pred = log_reg.predict_proba(test)[:, -1]","0697bf40":"# Submission dataframe\nsubmit = df_test[['SK_ID_CURR']]\nsubmit['TARGET'] = log_reg_pred\n\nsubmit.head()","3faefa66":"# Save the submission to a csv file\nsubmit.to_csv('log_reg_baseline.csv', index = False)","9da3a136":"def numeric(col):\n    plt.figure(figsize=(12,5))\n    plt.title(\"Distribution of \"+col)\n    ax = sns.distplot(df_train[col].dropna())","41b8d3a9":"numeric(\"AMT_CREDIT\")","0626bf16":"numeric(\"AMT_INCOME_TOTAL\")","048e149a":"numeric(\"AMT_ANNUITY\")","8737a538":"anom = df_train[df_train['DAYS_EMPLOYED'] == 365243]\nnon_anom = df_train[df_train['DAYS_EMPLOYED'] != 365243]\nprint('The non-anomalies default on %0.2f%% of loans' % (100 * non_anom['TARGET'].mean()))\nprint('The anomalies default on %0.2f%% of loans' % (100 * anom['TARGET'].mean()))\nprint('There are %d anomalous days of employment' % len(anom))","b842ccd4":"# Create an anomalous flag column\ndf_train['DAYS_EMPLOYED_ANOM'] = df_train[\"DAYS_EMPLOYED\"] == 365243\n\n# Replace the anomalous values with nan\ndf_train['DAYS_EMPLOYED'].replace({365243: np.nan}, inplace = True)\n\ndf_train['DAYS_EMPLOYED'].plot.hist(title = 'Days Employment Histogram');\nplt.xlabel('Days Employment');","a0f9e86b":"df_test['DAYS_EMPLOYED_ANOM'] = df_test[\"DAYS_EMPLOYED\"] == 365243\ndf_test[\"DAYS_EMPLOYED\"].replace({365243: np.nan}, inplace = True)\n\nprint('There are %d anomalies in the test data out of %d entries' % (df_test[\"DAYS_EMPLOYED_ANOM\"].sum(), len(df_test)))","2c4185a0":"(df_train['DAYS_BIRTH']\/365.0).describe()","2f4948dd":"from plotly.offline import init_notebook_mode, iplot\nfrom wordcloud import WordCloud\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport plotly.plotly as py\nfrom plotly import tools\nfrom datetime import date\nimport pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport random \nimport warnings\nwarnings.filterwarnings(\"ignore\")\ninit_notebook_mode(connected=True)\n\npath = \"..\/input\/\"\n\ndef bar_hor(df, col, title, color, w=None, h=None, lm=0, limit=100, return_trace=False, rev=False, xlb = False):\n    cnt_srs = df[col].value_counts()\n    yy = cnt_srs.head(limit).index[::-1] \n    xx = cnt_srs.head(limit).values[::-1] \n    if rev:\n        yy = cnt_srs.tail(limit).index[::-1] \n        xx = cnt_srs.tail(limit).values[::-1] \n    if xlb:\n        trace = go.Bar(y=xlb, x=xx, orientation = 'h', marker=dict(color=color))\n    else:\n        trace = go.Bar(y=yy, x=xx, orientation = 'h', marker=dict(color=color))\n    if return_trace:\n        return trace \n    layout = dict(title=title, margin=dict(l=lm), width=w, height=h)\n    data = [trace]\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig)\n\ndef bar_hor_noagg(x, y, title, color, w=None, h=None, lm=0, limit=100, rt=False):\n    trace = go.Bar(y=x, x=y, orientation = 'h', marker=dict(color=color))\n    if rt:\n        return trace\n    layout = dict(title=title, margin=dict(l=lm), width=w, height=h)\n    data = [trace]\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig)\n\n\ndef bar_ver_noagg(x, y, title, color, w=None, h=None, lm=0, rt = False):\n    trace = go.Bar(y=y, x=x, marker=dict(color=color))\n    if rt:\n        return trace\n    layout = dict(title=title, margin=dict(l=lm), width=w, height=h)\n    data = [trace]\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig)\n    \ndef gp(col, title):\n    df1 = df_train[df_train[\"TARGET\"] == 1]\n    df0 = df_train[df_train[\"TARGET\"] == 0]\n    a1 = df1[col].value_counts()\n    b1 = df0[col].value_counts()\n    \n    total = dict(df_train[col].value_counts())\n    x0 = a1.index\n    x1 = b1.index\n    \n    y0 = [float(x)*100 \/ total[x0[i]] for i,x in enumerate(a1.values)]\n    y1 = [float(x)*100 \/ total[x1[i]] for i,x in enumerate(b1.values)]\n\n    trace1 = go.Bar(x=a1.index, y=y0, name='Target : 1', marker=dict(color=\"#96D38C\"))\n    trace2 = go.Bar(x=b1.index, y=y1, name='Target : 0', marker=dict(color=\"#FEBFB3\"))\n    return trace1, trace2 \n\n","bf4a4adb":"target_distribution = df_train['TARGET'].value_counts()\ntarget_distribution.plot.pie(figsize=(10, 10),\n                             title='Target Distribution',\n                             fontsize=15, \n                             legend=True, \n                             autopct=lambda v: \"{:0.1f}%\".format(v))","e49f7a8b":"# Find correlations with the target and sort\ncorrelations = df_train.corr()['TARGET'].sort_values()\n\n# Display correlations\nprint('Most Positive Correlations:\\n', correlations.tail(15))\nprint('\\nMost Negative Correlations:\\n', correlations.head(15))","eb4567a5":"# Find the correlation of the positive days since birth and target\ndf_train['DAYS_BIRTH'] = abs(df_train['DAYS_BIRTH'])\ndf_train['DAYS_BIRTH'].corr(df_train['TARGET'])","2c854d71":"# Set the style of plots\nplt.style.use('fivethirtyeight')\n\n# Plot the distribution of ages in years\nplt.hist(df_train['DAYS_BIRTH'] \/ 365, edgecolor = 'k', bins = 25)\nplt.title('Age of Client'); plt.xlabel('Age (years)'); plt.ylabel('Count');","b7dd0cd4":"import seaborn as sns\nplt.figure(figsize = (10, 8))\n\n# KDE plot of loans that were repaid on time\nsns.kdeplot(df_train.loc[df_train['TARGET'] == 0, 'DAYS_BIRTH'] \/ 365, label = 'target == 0')\n\n# KDE plot of loans which were not repaid on time\nsns.kdeplot(df_train.loc[df_train['TARGET'] == 1, 'DAYS_BIRTH'] \/ 365, label = 'target == 1')\n\n# Labeling of plot\nplt.xlabel('Age (years)'); plt.ylabel('Density'); plt.title('Distribution of Ages');","03105b08":"# Age information into a separate dataframe\nage_data = df_train[['TARGET', 'DAYS_BIRTH']]\nage_data['YEARS_BIRTH'] = age_data['DAYS_BIRTH'] \/ 365\n\n# Bin the age data\nage_data['YEARS_BINNED'] = pd.cut(age_data['YEARS_BIRTH'], bins = np.linspace(20, 70, num = 11))\nage_data.head(10)","62c16cc8":"# Group by the bin and calculate averages\nage_groups  = age_data.groupby('YEARS_BINNED').mean()\nage_groups","5c99e90c":"plt.figure(figsize = (8, 8))\n\n# Graph the age bins and the average of the target as a bar plot\nplt.bar(age_groups.index.astype(str), 100 * age_groups['TARGET'])\n\n# Plot labeling\nplt.xticks(rotation = 75); plt.xlabel('Age Group (years)'); plt.ylabel('Failure to Repay (%)')\nplt.title('Failure to Repay by Age Group');","ed7daae3":"# Extract the EXT_SOURCE variables and show correlations\next_data = df_train[['TARGET', 'EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3', 'DAYS_BIRTH', 'DAYS_EMPLOYED', 'NAME_EDUCATION_TYPE_Higher education', 'CODE_GENDER_F']]\next_data_corrs = ext_data.corr()\next_data_corrs\n\nplt.figure(figsize = (25, 36))","70151457":"# Heatmap of correlations\nsns.heatmap(ext_data_corrs, cmap = plt.cm.RdYlBu_r, vmin = -0.02, annot = True, vmax = 0.5)\nplt.title('Correlation Heatmap');","6d04a382":"plt.figure(figsize = (10, 12))\n# iterate through the sources\nfor i, source in enumerate(['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']):\n    \n    # create a new subplot for each source\n    plt.subplot(3, 1, i + 1)\n    # plot repaid loans\n    sns.kdeplot(df_train.loc[df_train['TARGET'] == 0, source], label = 'target == 0')\n    # plot loans that were not repaid\n    sns.kdeplot(df_train.loc[df_train['TARGET'] == 1, source], label = 'target == 1')\n    \n    # Label the plots\n    plt.title('Distribution of %s by Target Value' % source)\n    plt.xlabel('%s' % source); plt.ylabel('Density');\n    \nplt.tight_layout(h_pad = 2.5)","b5febb69":"\n# Copy the data for plotting\nplot_data = ext_data.drop(columns = ['DAYS_BIRTH']).copy()\n\n# Add in the age of the client in years\nplot_data['YEARS_BIRTH'] = age_data['YEARS_BIRTH']\n\n# Drop na values and limit to first 100000 rows\nplot_data = plot_data.dropna().loc[:100000, :]\n\n# Function to calculate correlation coefficient between two columns\ndef corr_func(x, y, **kwargs):\n    r = np.corrcoef(x, y)[0][1]\n    ax = plt.gca()\n    ax.annotate(\"r = {:.2f}\".format(r),\n                xy=(.2, .8), xycoords=ax.transAxes,\n                size = 20)\n\n# Create the pairgrid object\ngrid = sns.PairGrid(data = plot_data, size = 3, diag_sharey=False,\n                    hue = 'TARGET', \n                    vars = [x for x in list(plot_data.columns) if x != 'TARGET'])\n\n# Upper is a scatter plot\ngrid.map_upper(plt.scatter, alpha = 0.2)\n\n# Diagonal is a histogram\ngrid.map_diag(sns.kdeplot)\n\n# Bottom is density plot\ngrid.map_lower(sns.kdeplot, cmap = plt.cm.OrRd_r);\n\nplt.suptitle('Ext Source and Age Features Pairs Plot', size = 32, y = 1.05);","fe5e294e":"n= len(df_train)\nprint(n)\nx = np.sort(df_train['TARGET'])\ny = np.arange(1,len(x)+1)\/float(len(x)) \nprint (y)\n\n_= plt.plot(x, y, marker = '.', linestyle = 'none')\n_= plt.xlabel('Customer Credibility to Repay Loan')\n_= plt.ylabel('ECDF')\n_= plt.margins(.02)\n\nplt.show()","fe33f303":"# Checking ECDF Distribution of Ability to Repay Loan across the real data and theoretical samples of data\ndef ecdf(data):\n    x= np.sort(data)\n    n= float(len(data))\n    y = np.arange(1, n+1)\/n\n    return x,y\n\n%matplotlib inline\nplt.figure(figsize=(25,20))\n\n# Seed the random number generator:\nnp.random.seed(15)\n#Sample data for theortical normal dist\nsamples = np.random.normal(np.mean(df_train.TARGET), np.std(df_train.TARGET), size=10000)\nsamples","bf3ae23e":"#find ecdf of data\nx_count, y_count = ecdf(df_train.TARGET)\nx_theor, y_theor = ecdf(samples)\n\nfig = plt.plot(x_count, y_count, marker='.', linestyle='none')\nfig = plt.plot(x_theor, y_theor, marker='.', linestyle='none')\n\n# Label axes and add legend and a title:\nfig = plt.title('Customer Credibility to Repay Loan VS Theoretical Normal Dist')\nfig = plt.xlabel('Customer to Repay Loan')\nfig = plt.ylabel('ECDF')\n\n# Save and display the plots:\n#plt.savefig('reports\/figures\/cdf_body_temps.png')\nplt.show()","453ebd05":"np.percentile(df_train['TARGET'], [25, 50, 75, 90, 98, 100])","6f960645":"pd.DataFrame.hist(df_train, column='TARGET')","d04046af":"np.var(df_train['TARGET'])","1f835815":"np.std(df_train['TARGET'])","d401f7d4":"np.cov(df_train['TARGET'], df_train['EXT_SOURCE_1'])","1763aa49":"np.cov(df_train['TARGET'], df_train['DAYS_BIRTH'])","106175c6":"np.corrcoef(df_train['TARGET'], df_train['DAYS_BIRTH'])","8b295572":"def bootstrap_replicate_1d(data, func):\n    return func(np.random.choice(df_train['TARGET'], size=len(df_train['TARGET'])))\n#np.random.choice() works on linear model","7ada4134":"def draw_bs_reps(data, func, size=1):\n    \"\"\"Draw bootstrap replicates.\"\"\"\n\n    # Initialize array of replicates: bs_replicates\n    bs_replicates = np.empty(size)\n\n    # Generate replicates\n    for i in range(size):\n        bs_replicates[i] = bootstrap_replicate_1d(data, func)\n\n    return bs_replicates","46df66f2":"# Take 10,000 bootstrap replicates of the mean: bs_replicates\nbs_replicates = draw_bs_reps(df_train['TARGET'], np.mean, 10000)\n\n# Compute and print SEM Standard Error of the Mean\nsem = np.std(df_train['TARGET']) \/ np.sqrt(len(df_train['TARGET']))\nprint(sem)\n\n# Compute and print standard deviation of bootstrap replicates\nbs_std = np.std(bs_replicates)\nprint(bs_std)\n\n# Make a histogram of the results\n_ = plt.hist(bs_replicates, bins=50, normed=True)\n_ = plt.xlabel('Credit Loan Default Risk')\n_ = plt.ylabel('ECDF')\n\n# Show the plot\nplt.show()","a2ef903f":"np.percentile(bs_replicates, [2.5, 97.5])","e54ef03a":"#Finding pairs bootstrap for slope & intercept of a linear function between Bike REntal Count and Registered User Type\ndef draw_bs_pairs_linreg(x, y, size=1):\n    \"\"\"Perform pairs bootstrap for linear regression.\"\"\"\n\n    # Set up array of indices to sample from: inds\n    inds = np.arange(len(x))\n\n    # Initialize replicates: bs_slope_reps, bs_intercept_reps\n    bs_slope_reps = np.empty(size)\n    bs_intercept_reps = np.empty(size)\n\n    # Generate replicates\n    for i in range(size):\n        bs_inds = np.random.choice(inds, size=len(inds))\n        bs_x, bs_y = x[bs_inds], y[bs_inds]\n        bs_slope_reps[i], bs_intercept_reps[i] = np.polyfit(bs_x, bs_y, 1)\n\n    return bs_slope_reps, bs_intercept_reps\n\n# Generate replicates of slope and intercept using pairs bootstrap\nbs_slope_reps, bs_intercept_reps = draw_bs_pairs_linreg(df_train['EXT_SOURCE_1'], df_train['TARGET'], 1000)\n\n# Compute and print 95% CI for slope\nprint(np.percentile(bs_slope_reps, [2.5, 97.5]))\n# Plot the histogram\n_ = plt.hist(bs_slope_reps, bins=50, normed=True)\n_ = plt.xlabel('slope')\n_ = plt.ylabel('PDF')\nplt.show()","f71c8e63":"def permutation_sample(data1, data2):\n    \"\"\"Generate a permutation sample from two data sets.\"\"\"\n\n    # Concatenate the data sets: data\n    data = np.concatenate((data1, data2))\n\n    # Permute the concatenated array: permuted_data\n    permuted_data = np.random.permutation(data)\n\n    # Split the permuted array into two: perm_sample_1, perm_sample_2\n    perm_sample_1 = permuted_data[:len(data1)]\n    perm_sample_2 = permuted_data[len(data1):]\n\n    return perm_sample_1, perm_sample_2\n\nfor _ in range(50):\n    # Generate permutation samples\n    perm_sample_1, perm_sample_2 = permutation_sample(\n                                    df_train['EXT_SOURCE_1'], df_train['EXT_SOURCE_2'])\n\n    # Compute and plot ECDF from permutation sample 1 \n    x1 = np.sort(perm_sample_1)\n    y1 = np.arange(1,len(x1)+1)\/float(len(x1)) \n    \n    # Compute and plot ECDF from permutation sample 2\n    x2 = np.sort(perm_sample_2)\n    y2 = np.arange(1,len(x2)+1)\/float(len(x2))\n\n\n    # Plot ECDFs of permutation sample\n    _ = plt.plot(x1, y1, marker='.', linestyle='none',\n                 color='red', alpha=0.02)\n    _ = plt.plot(x2, y2, marker='.', linestyle='none',\n                 color='blue', alpha=0.02)\n# Compute and plot ECDF from original 'registered'\nx11 = np.sort(df_train['EXT_SOURCE_1'])\ny11 = np.arange(1,len(x11)+1)\/float(len(x11)) \n\n_ = plt.plot(x11, y11, marker='.', color= 'red')\n\n# Compute and plot ECDF from original 'casual'\nx22 = np.sort(df_train['EXT_SOURCE_2'])\ny22 = np.arange(1,len(x22)+1)\/float(len(x22)) \n\n_ = plt.plot(x22, y22, marker='.', color= 'blue')\n# Make margins and label axes\nplt.margins(0.02)\n_ = plt.xlabel('External Data Source Influence')\n_ = plt.ylabel('ECDF')\n\n# Show the plot\nplt.show()","2c903cb4":"EXT_SOURCE_3 displays the greatest difference between the values of the target. We can clearly see that this feature has some relationship to the likelihood of an applicant to repay a loan. The relationship is not very strong (in fact they are all considered very weak, but these variables will still be useful for a machine learning model to predict whether or not an applicant will repay a loan on time.","2dc05de6":"From this information, we see this is an imbalanced class problem(http:\/\/www.chioka.in\/class-imbalance-problem\/). There are far more loans that were repaid on time than loans that were not repaid. Once we get into more sophisticated machine learning models, we can weight the classes by their representation in the data to reflect this imbalance.","a629ed68":"<h1> Data Wrangling","3f6579a2":"When it comes time to build our machine learning models, we will have to fill in these missing values (known as imputation). In later work, we will use models such as XGBoost that can handle missing values with no need for imputation. Another option would be to drop columns with a high percentage of missing values, although it is impossible to know ahead of time if these columns will be helpful to our model. Therefore, we will keep all of the columns for now.","14864da1":"The target == 1 curve skews towards the younger end of the range. Although this is not a significant correlation (-0.07 correlation coefficient), this variable is likely going to be useful in a machine learning model because it does affect the target. Let's look at this relationship in another way: average failure to repay loans by age bracket.\nTo make this graph, first we cut the age category into bins of 5 years each. Then, for each bin, we calculate the average value of the target, which tells us the ratio of loans that were not repaid in each age category.","34107ff1":"<h1> Missing Values Strategy # 1 - Identify Features with Missing Values -> Replace with NaN -> Remove all Features with Missing Value -> Assess Model using Logistic Regression ","e31d1f5f":"<h2> Pearson Correlation Coeffient","93b8e6f7":"Let's look at the number of columns of each data type. int64 and float64 are numeric variables (which can be either discrete or continuous). object columns contain strings and are categorical features. .","08290502":"<h1> Missing Values Strategy # 2 - Identify Features with Missing Values -> Replace with NaN -> Impute all Features with Missing Value -> Assess Model using Logistic Regression ","2cae31ee":"<h3> Step 2: Another function to generate multiple such bootstrap samples","9a6b6870":"\n<b> Predict how capable each applicant is of repaying a loan","bc66b684":"<h3> Function to Explore Numeric Data","414bf21c":"<h2> Variance","908b14a2":"<h1> Baseline Model ","e002a034":"As the client gets older, there is a negative linear relationship with the target meaning that as clients get older, they tend to repay their loans on time more often.\nLet's start looking at this variable. First, we can make a histogram of the age. We will put the x axis in years to make the plot a little more understandable.","f037651b":"All three EXT_SOURCE featureshave negative correlations with the target, indicating that as the value of the EXT_SOURCE increases, the client is more likely to repay the loan. We can also see that DAYS_BIRTH is positively correlated with EXT_SOURCE_1 indicating that maybe one of the factors in this score is the client age.\nNext we can look at the distribution of each of these features colored by the value of the target. This will let us visualize the effect of this variable on the target.","2f2dfbb3":"To get a baseline, we will use all of the features after encoding the categorical variables. We will preprocess the data by filling in the missing values (imputation) and normalizing the range of the features (feature scaling). The following code performs both of these preprocessing steps.\nTo get a baseline, we will use all of the features after encoding the categorical variables. We will preprocess the data by filling in the missing values (imputation) and normalizing the range of the features (feature scaling). The following code performs both of these preprocessing steps.","65d9e7a7":"<h1> Confidence Interval","53c3031e":"<h1> Imbalance of Data","1b94bfe6":"<h1> Extending Confidence Interval Concept to Pairs Bootstrap ","661339bd":"Those ages look reasonable. There are no outliers for the age on either the high or low end. How about the days of employment?","ce4ccba1":"<h1> Data\n\nThe data is provided by Home Credit, a service dedicated to provided lines of credit (loans) to the unbanked population. Predicting whether or not a client will repay a loan or have difficulty is a critical business need, and Home Credit is hosting this competition on Kaggle to see what sort of models the machine learning community can develop to help them in this task.\n\n\napplication_train\/application_test: the main training and testing data with information about each loan application at Home Credit. Every loan has its own row and is identified by the feature SK_ID_CURR. The training application data comes with the TARGET indicating 0: the loan was repaid or 1: the loan was not repaid.\n","6b347ed1":"<h3> Dropping Rows with Missing Values ->Baselining model with Logistic Regression ","f5670aa8":"Permutation samples ECDFs overlap and give a purple haze. Few of the ECDFs from the permutation samples overlap with the observed External Source Data1 data towards right of the graph & even fewer overlap towards left, suggesting that the hypothesis is not commensurate with the data. External Source Data1 & External Source Data2 are not identically distributed and do not influence data in similar way. So Null Hypothesis is rejected.\n","e478a047":"In this plot, the red indicates loans that were not repaid and the blue are loans that are paid. We can see the different relationships within the data. There does appear to be a moderate positive linear relationship between the EXT_SOURCE_1 and the DAYS_BIRTH (or equivalently YEARS_BIRTH), indicating that this feature may take into account the age of the client.","1c7a3d36":"<h1> Aligning Training and Testing Data","624f6ae9":"<h1> Anomalies","98ea85b4":"Exterior Sources The 3 variables with the strongest negative correlations with the target are EXT_SOURCE_1, EXT_SOURCE_2, and EXT_SOURCE_3. According to the documentation, these features represent a \"normalized score from external data source\". I'm not sure what this exactly means, but it may be a cumulative sort of credit rating made using numerous sources of data.\nLet's take a look at these variables.\nFirst, we can show the correlations of the EXT_SOURCE features with the target and with each other.","2fd0df5a":"<h1> Introduction: Home Credit Default Risk Competition\n\nIn this notebook, we will take an initial look at the Home Credit default risk machine learning competition currently hosted on Kaggle. The objective of this competition is to use historical loan application data to predict whether or not an applicant will be able to repay a loan. This is a standard supervised classification task:\n\nSupervised: The labels are included in the training data and the goal is to train a model to learn to predict the labels from the features\nClassification: The label is a binary variable, 0 (will repay loan on time), 1 (will have difficulty repaying loan). Related post to deal Imbalance in Data problem: https:\/\/www.kaggle.com\/tini9911\/imbalance-in-data\n\n\n","cd4a0f53":"<h1> Column Types","86c37753":"Let's implement the policy described above: for any categorical variable (dtype == object) with 2 unique categories, we will use label encoding, and for any categorical variable with more than 2 unique categories, we will use one-hot encoding.\nFor label encoding, we use the Scikit-Learn LabelEncoder and for one-hot encoding, the pandas get_dummies(df) function.","9395cd06":"<h1> Examine Missing Values","e17986c0":"<h1> Correlations ","71e49807":"<h1> Another Approach: Identify Features with Missing Values -> Replace with NaN -> Impute all Features with Missing Value -> Assess Model using Logistic Regression ","87589cf7":"<h1> Pairs Plot","a58a7090":"<h1> Hypothesis Testing ","9349cdc3":"The above steps may be repeated to show for Variance function as well","6786be0d":"![image](https:\/\/raw.githubusercontent.com\/WillKoehrsen\/Machine-Learning-Projects\/master\/label_encoding.png)","ef169608":"<h2> Dataset Prep for Another set of EDA ","098d3166":"<h3> Step 3: Plot the histogram for bootstrap replicates","f76b3119":"Let's take a look at some of more significant correlations: the DAYS_BIRTH is the most positive correlation. (except for TARGET because the correlation of a variable with itself is always 1!) Looking at the documentation, DAYS_BIRTH is the age in days of the client at the time of the loan in negative days (for whatever reason!). The correlation is positive, but the value of this feature is actually negative, meaning that as the client gets older, they are less likely to default on their loan (ie the target == 0). That's a little confusing, so we will take the absolute value of the feature and then the correlation will be negative.","a5c70d46":"The predictions must be in the format shown in the sample_submission.csv file, where there are only two columns: SK_ID_CURR and TARGET. We will create a dataframe in this format from the test set and the predictions called submit.","df8ad4da":"![image](https:\/\/raw.githubusercontent.com\/WillKoehrsen\/Machine-Learning-Projects\/master\/one_hot_encoding.png)","a0e11484":"The training and testing datasets now have the same features which is required for machine learning. The number of features has grown significantly due to one-hot encoding. At some point we probably will want to try dimensionality reduction (removing features that are not relevant) to reduce the size of the datasets.","591e7880":"<h1> Baseline with Feature Scaling ","f1041a6b":"Aligning Training and Testing Data There need to be the same features (columns) in both the training and testing data. One-hot encoding has created more columns in the training data because there were some categorical variables with categories not represented in the testing data. To remove the columns in the training data that are not in the testing data, we need to align the dataframes. First we extract the target column from the training data (because this is not in the testing data but we need to keep this information). When we do the align, we must make sure to set axis = 1 to align the dataframes based on the columns and not on the rows!","a0a7afe1":"<h2> Standard Deviation","e0fc5cf1":"<h1> Encoding Categorical Variables ","e276a5ab":"<h2> Covariance","c2892dfd":"We will use LogisticRegressionfrom Scikit-Learn for our first model. The only change we will make from the default model settings is to lower the regularization parameter, C, which controls the amount of overfitting (a lower value should decrease overfitting). This will get us slightly better results than the default LogisticRegression, but it still will set a low bar for any future models.\nHere we use the familiar Scikit-Learn modeling syntax: we first create the model, then we train the model using .fit and then we make predictions on the testing data using .predict_proba (remember that we want probabilities and not a 0 or 1).","6c9cfe83":"<h1> Label Encoding and One-Hot Encoding","8694c171":"Before we go any further, we need to deal with pesky categorical variables. A machine learning model unfortunately cannot deal with categorical variables (except for some models such as LightGBM). Therefore, we have to find a way to encode (represent) these variables as numbers before handing them off to the model. There are two main ways to carry out this process:\nLabel encoding: assign each unique category in a categorical variable with an integer. No new columns are created. An example is shown below image image","8cbd7848":"<h3> Classification Report for Logistic Regression","da876331":"One-hot encoding: create a new column for each unique category in a categorical variable. Each observation recieves a 1 in the column for its corresponding category and a 0 in all other new columns.\nimage","ae6f4589":"Just out of curiousity, let's subset the anomalous clients and see if they tend to have higher or low rates of default than the rest of the clients.","48ab14c3":"The submission has now been saved to the virtual environment in which our notebook is running. This runs the entire notebook and then lets us download any files that are created during the run.\nOnce we run the notebook, the files created are available in the Versions tab under the Output sub-tab.\nThis is Data Wrangling complete with Baseline Model determined with Logistic Regresssion; next we may proceed with EDA & Inferential Statistics.","9ef3ba4e":"As a final exploratory plot, we can make a pairs plot of the EXT_SOURCE variables and the DAYS_BIRTH variable. The Pairs Plot is a great exploration tool because it lets us see relationships between multiple pairs of variables as well as distributions of single variables. Here we are using the seaborn visualization library and the PairGrid function to create a Pairs Plot with scatterplots on the upper triangle, histograms on the diagonal, and 2D kernel density plots and correlation coefficients on the lower triangle.\nIf you don't understand this code, that's all right! Plotting in Python can be overly complex, and for anything beyond the simplest graphs, I usually find an existing implementation and adapt the code (don't repeat yourself)!","e235cefe":"Compare the distribution of the data to the theoretical distribution of the data. This is done by comparing the ecdf First define a function for computing the ecdf from a data set. Next use np.random.normal to sample the theoretical normal distribution and overlay the ecdf of both data sets to compare distribution. Since theoretical ECDF is continuous curve while real data set is contiguous bar for 0 & 1 since it's classification problem but we may consider any data points closer to value '0' indicates 'will repay loan on time', 1 (will have difficulty repaying loan)","49a987d6":"Now that the model has been trained, we can use it to make predictions. We want to predict the probabilities of not paying a loan, so we use the model predict.proba method. This returns an m x 2 array where m is the number of observations. The first column is the probability of the target being 0 and the second column is the probability of the target being 1 (so for a single row, the two columns must sum to 1). We want the probability the loan is not repaid, so we will select the second column.\nThe following code makes the predictions and selects the correct column.","283dad99":"The predictions represent a probability between 0 and 1 that the loan will not be repaid. If we were using these predictions to classify applicants, we could set a probability threshold for determining that a loan is risky.","5d2b940a":"<h3> Step 1: Build a function to create a bootstrap replicate","3baf836d":"One problem we always want to be on the lookout for when doing EDA is anomalies within the data. These may be due to mis-typed numbers, errors in measuring equipment, or they could be valid but extreme measurements. One way to support anomalies quantitatively is by looking at the statistics of a column using the describe method. The numbers in the DAYS_BIRTH column are negative because they are recorded relative to the current loan application. To see these stats in years, we can mutliple by -1 and divide by the number of days in a year:","1ef87999":"<b> Null Hypothesis- There is no significant difference between EXT_SOURCE_1 and EXT_SOURCE_2 mean on 'Ability to Repay Loan' \nH0: \u03bcEXT_SOURCE_1\u2212\u03bcEXT_SOURCE_2=0 Significance Level: 95% Confidence \u03b1=0.05 Alternate Hypothesis - There is significant difference between EXT_SOURCE_1 and EXT_SOURCE_2 mean on 'Ability to Repay Loan' \nHA : \u03bcEXT_SOURCE_1\u2212\u03bcEXT_SOURCE_2 != 0","2d6b4f86":"Let's now look at the number of unique entries in each of the object (categorical) columns.","306833a4":"<h1> Objective","f073d1a2":"<h1> EDA & Inferential Statistics","420a0e4c":"Now that we have dealt with the categorical variables and the outliers, let's continue with the EDA. One way to try and understand the data is by looking for correlations between the features and the target. We can calculate the Pearson correlation coefficient between every variable and the target using the .corr dataframe method.\nThe correlation coefficient is not the greatest method to represent \"relevance\" of a feature, but it does give us an idea of possible relationships within the data. Some general interpretations of the absolute value of the correlation coefficent are:\n.00-.19 \u201cvery weak\u201d\n.20-.39 \u201cweak\u201d\n.40-.59 \u201cmoderate\u201d\n.60-.79 \u201cstrong\u201d\n.80-1.0 \u201cvery strong\u201d","78d2ca42":"we will use Label Encoding for any categorical variables with only 2 categories and One-Hot Encoding for any categorical variables with more than 2 categories. This process may need to change as we get further into the project, but for now, we will see where this gets us. (We will also not use any dimensionality reduction in this notebook but will explore in future iter","b6c37348":"Most of the categorical variables have a relatively small number of unique entries. We will need to find a way to deal with these categorical variables!","8ee88c47":"There is a clear trend: younger applicants are more likely to not repay the loan! The rate of failure to repay is above 10% for the youngest three age groups and beolow 5% for the oldest age group. This is information that could be directly used by the bank: because younger clients are less likely to repay the loan, maybe they should be provided with more guidance or financial planning tips. This does not mean the bank should discriminate against younger clients, but it would be smart to take precautionary measures to help younger clients pay on time.","2279d7e7":"<h2> Exterior Sources ","2be0a8eb":"Well that is extremely interesting! It turns out that the anomalies have a lower rate of default. Handling the anomalies depends on the exact situation, with no set rules. One of the safest approaches is just to set the anomalies to a missing value and then have them filled in (using Imputation) before machine learning. In this case, since all the anomalies have the exact same value, we want to fill them in with the same value in case all of these loans share something in common. The anomalous values seem to have some importance, so we want to tell the machine learning model if we did in fact fill in these values. As a solution, we will fill in the anomalous values with not a number (np.nan) and then create a new boolean column indicating whether or not the value was anomalous.","0683d761":"By itself, the distribution of age does not tell us much other than that there are no outliers as all the ages are reasonable. To visualize the effect of the age on the target, we will next make a kernel density estimation plot (KDE) colored by the value of the target. A kernel density estimate plot shows the distribution of a single variable and can be thought of as a smoothed histogram (it is created by computing a kernel, usually a Gaussian, at each data point and then averaging all the individual kernels to develop a single smooth curve). We will use the seaborn kdeplot for this graph.","181a5782":"<b> This is bootstrap estimate of the probability distribution function of the mean of 'Credit Loan Default Risk'at the Home Credit Group. Remember, we are estimating the mean 'Credit Loan Default Risk' we would get if the Home Credit Group could repeat all of the measurements over and over again. This is a probabilistic estimate of the mean. I plot the PDF as a histogram, and I see that it is not Normal as it has slightly longer right tail.\nIn fact, it can be shown theoretically that under not-too-restrictive conditions, the value of the mean will always be Normally distributed. (This does not hold in general, just for the mean and a few other statistics.) The standard deviation of this distribution, called the standard error of the mean, or SEM, is given by the standard deviation of the data divided by the square root of the number of data points. I.e., for a data set. Notice that the SEM we got from the known expression and the bootstrap replicates is the same and the distribution of the bootstrap replicates of the mean is Normal.\nAssuming 95% Confidence interval i.e. give the 2.5th and 97.5th percentile of bootstrap replicates is stored as bs_replicates","7eda1846":"<h1> Effect of Age on Repayment","76f39642":"The distribution looks to be much more in line with what we would expect, and we also have created a new column to tell the model that these values were originally anomalous (becuase we will have to fill in the nans with some value, probably the median of the column). The other columns with DAYS in the dataframe look to be about what we expect with no obvious outliers. As an extremely important note, anything we do to the training data we also have to do to the testing data. Let's make sure to create the new column and fill in the existing column with np.nan in the testing data. The distribution looks to be much more in line with what we would expect, and we also have created a new column to tell the model that these values were originally anomalous (becuase we will have to fill in the nans with some value, probably the median of the column). The other columns with DAYS in the dataframe look to be about what we expect with no obvious outliers. As an extremely important note, anything we do to the training data we also have to do to the testing data. Let's make sure to create the new column and fill in the existing column with np.nan in the testing data.","088bfdd2":"That doesn't look right! The maximum value (besides being positive) is about 1000 years!"}}