{"cell_type":{"09208c52":"code","96a14399":"code","6ad23c10":"code","0aed2a52":"code","cd84b577":"code","ccfd9352":"code","05cea5b6":"code","e078a811":"code","72068bd6":"code","a0772ca5":"code","412ce068":"code","91b3a507":"code","287af88e":"code","e292a8a9":"code","aa0ce130":"code","419f0f54":"code","8480cbbc":"code","98336257":"code","cc9b1ab8":"code","0b74d183":"code","f5a2e6ee":"code","21002de6":"code","a26c1f27":"code","3dfd8c99":"code","e9d4368c":"code","e1d59b4b":"code","a015c4ef":"code","716b08e8":"code","2ba7e926":"code","25d1c64b":"code","844add18":"code","11368a18":"code","937bb9f5":"markdown","988025e5":"markdown","320bb851":"markdown","fe710ffc":"markdown","4dba4231":"markdown","f67a8e02":"markdown","2a756adb":"markdown"},"source":{"09208c52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","96a14399":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_validate\nfrom sklearn.linear_model import LinearRegression, Ridge, RidgeCV, Lasso, LassoCV, ElasticNet, ElasticNetCV\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom yellowbrick.regressor import PredictionError, ResidualsPlot\nfrom yellowbrick.model_selection import FeatureImportances\nfrom yellowbrick.features import RadViz\nplt.rcParams[\"figure.figsize\"] = (9,5)\nimport warnings\nwarnings.filterwarnings('ignore')","6ad23c10":"df = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndf.head()","0aed2a52":"df.shape","cd84b577":"df.info()","ccfd9352":"df.isnull().sum()","05cea5b6":"df = df.drop(\"id\", axis=1)\ndf.head()","e078a811":"for i in df.select_dtypes('object').columns:\n    #if len(df[i].unique())<100:\n        print(i , \"\\n\"\"\\n\", df[i].value_counts(),\"\\n\",\"\\n\",\"**********************************\"\"\\n\\n\")\n    #else :\n        #print(\"\\n\",\"***\",i,\"***\",\"\\n\")","72068bd6":"#### 'other' is dropping from gender column \n\ndf.drop(df[(df[\"gender\"] == \"Other\")].index, axis = 0, inplace=True)\n\n## second way\n## df = df[df[\"gender\"] != \"Other\"]","a0772ca5":"df.gender.value_counts() ## we can see the 'other' dropped","412ce068":"for i in df.select_dtypes(['int64','float64']).columns:\n    if len(df[i].unique())<100:\n        print(i , \"\\n\"\"\\n\", df[i].value_counts(dropna = False),\"\\n\",\"\\n\",\"**********************************\"\"\\n\\n\")\n    else :\n        print(\"\\n\",\"***\",i,\"***\",\"\\n\")","91b3a507":"sns.pairplot(df, hue='stroke')","287af88e":"sns.heatmap(df.corr(),annot = True)","e292a8a9":"##df['bmi_cat'] = pd.cut(df['bmi'], bins = [0, 19, 25,30,10000], labels = ['Underweight', 'Ideal', 'Overweight', 'Obesity'])\n##df['age_cat'] = pd.cut(df['age'], bins = [0,13,18, 45,60,200], labels = ['Children', 'Teens', 'Adults','Mid Adults','Elderly'])\n","aa0ce130":"df.bmi.value_counts(dropna=False)","419f0f54":"sns.scatterplot(x='bmi', y='age', data=df)","8480cbbc":"df.bmi.fillna(df['bmi'].mean(), inplace=True)","98336257":"df.bmi.isnull().sum()","cc9b1ab8":"# pip install pandas-profiling\nimport pandas_profiling\npandas_profiling.ProfileReport(df)","0b74d183":"df_new = pd.get_dummies(df, drop_first = True)\ndf_new.head()","f5a2e6ee":"X = df_new.drop('stroke',axis=1)\ny = df_new['stroke']","21002de6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 55)","a26c1f27":"X_train.shape, X_test.shape, y_train.shape, y_test.shape","3dfd8c99":"scaler = MinMaxScaler()","e9d4368c":"X_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","e1d59b4b":"from sklearn.linear_model import LogisticRegression","a015c4ef":"log_model = LogisticRegression(class_weight='balanced')","716b08e8":"log_model.fit(X_train_scaled, y_train)","2ba7e926":"y_pred = log_model.predict(X_test_scaled)","25d1c64b":"y_pred_proba = log_model.predict_proba(X_test_scaled)","844add18":"from sklearn.metrics import confusion_matrix, classification_report","11368a18":"print(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","937bb9f5":"### Modelling","988025e5":"### Train - Test Split","320bb851":"### import libraries","fe710ffc":"### **EDA**","4dba4231":"### bmi column\n","f67a8e02":"#### EDA - TO DO LIST\n1. id column will be dropped\n2. each column will maked value_counts \n3. checking null values\n4. checking oulier\n5. visulization (ex:heatmap)\n","2a756adb":"### Scaling"}}