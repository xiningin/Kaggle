{"cell_type":{"5a12104f":"code","aeb11988":"code","ef25220e":"code","b87ac667":"code","c8247a55":"code","b884583c":"code","3c936cc0":"code","ac775907":"code","9228fd34":"code","a78b9739":"code","0cabe0f4":"code","2ce23c4b":"code","06771621":"code","cddf1f81":"code","33fa90bc":"code","a1ab361b":"code","baf1f09f":"code","e727d318":"code","e8e34539":"markdown","3e250186":"markdown"},"source":{"5a12104f":"import numpy as np\nimport pandas as pd\nimport io\nimport glob\nimport base64\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.layers import Dense\nfrom keras.preprocessing import image\nfrom keras.models import Model\nfrom keras.layers import Input\nfrom keras.applications import inception_v3\nfrom keras.applications.inception_v3 import InceptionV3\nfrom keras.applications.inception_v3 import preprocess_input as inception_v3_preprocessor\nfrom keras.optimizers import Adam\nfrom keras.layers import GlobalAveragePooling2D\nfrom keras.layers import Dropout\n\n","aeb11988":"#STEP 1 Reading Directory Converting to csv\/DataFrame\ndef CreateCsv(path,encoded_category,category):\n    img = glob.glob(path)\n    img = pd.DataFrame(img)\n    img['path'] = img[0]\n    img = img.drop([0],axis=1)\n    img['label'] = encoded_category\n    img['category'] = category\n    return(img)\na = CreateCsv('..\/input\/flowers-recognition\/flowers\/flowers\/daisy\/*.jpg',0.0,'daisy')\nb = CreateCsv('..\/input\/flowers-recognition\/flowers\/flowers\/dandelion\/*.jpg',1.0,'dandelion')\nc = CreateCsv('..\/input\/flowers-recognition\/flowers\/flowers\/rose\/*.jpg',2.0,'rose')\nd = CreateCsv('..\/input\/flowers-recognition\/flowers\/flowers\/sunflower\/*.jpg',3.0,'sunflower')\ne = CreateCsv('..\/input\/flowers-recognition\/flowers\/flowers\/tulip\/*.jpg',4.0,'tulip')\n","ef25220e":"images = a.append([b,c,d,e],ignore_index=True)\nimages.head(5)\n","b87ac667":"\nim = []\ntrain_image = []\nfilename = images['path']\ndef mmeth(length,width):\n    \n    for filename in images['path']:\n        with open(filename, 'rb') as f:\n            fname = f.read()\n        image_1 = Image.open(io.BytesIO(fname))\n        image_1 = image_1.resize((length,width), Image.ANTIALIAS)\n        img = image.img_to_array(image_1)\n        img = img\/255\n        train_image.append(img)\n    return train_image\n\ntrain_image= mmeth(200,200)\nX = np.array(train_image)\ny = images[\"label\"].values\n","c8247a55":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n","b884583c":"import keras\ny_train_encoded = keras.utils.to_categorical(y_train, num_classes=5, dtype='int32')\ny_test_encoded = keras.utils.to_categorical(y_test, num_classes=5, dtype='int32')","3c936cc0":"y_train_encoded\n","ac775907":"pd.DataFrame([x for x in np.where(y_train_encoded ==1, y_train_encoded.columns,'').flatten().tolist() if len(x) >0],columns= ([\"Flower\"]) )\n","9228fd34":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.preprocessing.image import img_to_array\nfrom keras.preprocessing.image import load_img\nimport cv2\n\n\n\n","a78b9739":"base_model = InceptionV3(weights = 'imagenet', include_top = False, input_shape=(200, 200, 3))","0cabe0f4":"# Add a global spatial average pooling layer\nx = base_model.output\nx = GlobalAveragePooling2D()(x)\nx = Dense(1024, activation='relu')(x)\nx = Dropout(0.2)(x)\nx = Dense(1024, activation='relu')(x)\nx = Dropout(0.2)(x)\nx = Dense(2048, activation='relu')(x)\npredictions = Dense(5, activation='softmax')(x)\n# The model we will train\nmodel = Model(inputs = base_model.input, outputs = predictions)\n# first: train only the top layers i.e. freeze all convolutional InceptionV3 layers\nfor layer in base_model.layers:\n    layer.trainable = False","2ce23c4b":"model.compile(Adam(lr=.0001), loss='categorical_crossentropy', metrics=['accuracy'])","06771621":"model.fit(X_train, y_train_encoded, batch_size = 32, epochs = 50,validation_data = (X_test,y_test_encoded))\n","cddf1f81":"y_pred = model.predict(X_test)","33fa90bc":"max(y_pred[1])\n","a1ab361b":"for i in y_pred:\n    if y_pred[i]<0.5:\n        y_pred[i]=0\n    elif y_pred[i]>0.5 and y_pred[i]<1.5 :\n        y_pred[i]=1\n    elif y_pred[i]>1.5 and y_pred[i]<2.5 :\n        y_pred[i]=2\n    elif y_pred[i]>2.5 and y_pred[i]<3.5 :\n        y_pred[i]=3\n    else:\n        y_pred[i]=4","baf1f09f":"from sklearn.metrics import confusion_matrix as cm\ncm = cm(y_test,y_pred)\nprint(cm)","e727d318":"y_pred = model.predict_classes(X_test)\n","e8e34539":"DL Architecture","3e250186":"Libraries Required"}}