{"cell_type":{"3cda6b9c":"code","601b8f2d":"code","5680a141":"code","a583578a":"code","cd8f2877":"code","6815e543":"code","2f523923":"code","ff093cdf":"code","71689385":"code","46e380de":"code","3c354a7d":"code","9998089c":"markdown","32bfe2e5":"markdown","edefdabb":"markdown","64361ff3":"markdown","cd3cd383":"markdown","fc33b1eb":"markdown","fc28f4e9":"markdown","9436e2da":"markdown"},"source":{"3cda6b9c":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import LabelEncoder\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","601b8f2d":"train_data = pd.read_csv('\/kaggle\/input\/leaf-classification\/train.csv.zip')\ntest_data = pd.read_csv('\/kaggle\/input\/leaf-classification\/test.csv.zip')","5680a141":"train_data.describe()","a583578a":"print(\"Colums: \", train_data.columns.values)\nprint(\"Shape: \", train_data.shape)","cd8f2877":"print(\"Missing values:\")\nprint(train_data.isnull().sum())","6815e543":"def encode(train, test):\n    le = LabelEncoder().fit(train.species) \n    labels = le.transform(train.species)\n    classes = list(le.classes_)                   \n    test_ids = test.id                 \n\n    train = train.drop(['species', 'id'], axis=1)  \n    test = test.drop(['id'], axis=1)\n    \n    return train, labels, test, test_ids, classes\n\nX, y, test_data, test_ids, classes = encode(train_data, test_data)\ntrain_data.head(1)","2f523923":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y)","ff093cdf":"from sklearn.preprocessing import normalize\nX_train_norm=normalize(X_train)\nX_test_norm=normalize(X_test)","71689385":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nclf = LinearDiscriminantAnalysis()\n\nclf.fit(X_train_norm, y_train)\nprint(\"RF Accuracy: \" + repr(round(clf.score(X_test_norm, y_test) * 100, 2)) + \"%\")","46e380de":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(criterion='entropy',\n                             n_estimators=700,\n                             min_samples_split=5,\n                             min_samples_leaf=1,\n                             max_features = \"auto\",\n                             oob_score=True,\n                             random_state=0,\n                             n_jobs=-1)\n\nclf.fit(X_train_norm, y_train)\nprint(\"RF Accuracy: \" + repr(round(clf.score(X_test_norm, y_test) * 100, 2)) + \"%\")","3c354a7d":"clf = LinearDiscriminantAnalysis()\nclf.fit(X_train_norm, y_train)\nresult = clf.predict_proba(normalize(test_data))\ndf = pd.DataFrame(result, columns=classes)\ndf.insert(0, 'id', test_ids)\ndf.reset_index()\n\nprint(result.shape)\nfilename = 'Prediction.csv'\ndf.to_csv(filename,index=False)\nprint('Saved file: ' + filename)","9998089c":"# Export","32bfe2e5":"# Prepare data","edefdabb":"# Load data\n","64361ff3":"**Cool, there are no missing values =)**","cd3cd383":"# RandomForestClassifier","fc33b1eb":"# Analyze data\n\n**Describe data**\n\n* look at columns\n* check shape\n* check null columns","fc28f4e9":"# Encode data","9436e2da":"# LinearDiscriminantAnalysis"}}