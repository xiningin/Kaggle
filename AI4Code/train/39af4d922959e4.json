{"cell_type":{"344b134a":"code","d34f0e8e":"code","4f5c3e43":"code","7304bbc7":"code","955d714d":"code","b06bed6b":"code","2c5e845d":"code","28c0a46f":"code","bcbf8ea7":"code","5a821baa":"code","3ff51eda":"code","c88fe83c":"code","bc7b74f0":"code","711bd3a7":"code","55506e27":"code","b7f16ae4":"code","130c6d28":"code","8940ba2f":"code","2ed537a0":"code","5f6e5998":"code","2a422017":"code","b3655478":"code","af36bd35":"code","05aeac65":"code","11b835ec":"code","25c70b9e":"code","5ec54af3":"code","b6ff3dd3":"code","938d706a":"code","8c2808d4":"markdown","e215d246":"markdown","344a7442":"markdown","4a44efdc":"markdown","bb5cdfa6":"markdown","30605770":"markdown","a024c188":"markdown","9a4ed9a8":"markdown","637e750e":"markdown","d832ce3f":"markdown","3ba1241d":"markdown","596e32aa":"markdown","496a8c48":"markdown","54486e60":"markdown","d97cb625":"markdown","f297b659":"markdown"},"source":{"344b134a":"import pandas as pd\nimport tensorflow\nimport numpy\nimport sklearn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler","d34f0e8e":"df = pd.read_csv(\"..\/input\/server-logs-suspicious\/CIDDS-001-external-week1.csv\")","4f5c3e43":"df.head()","7304bbc7":"df.columns","955d714d":"df.isnull().sum()","b06bed6b":"df.dtypes","2c5e845d":"df[\"class\"].unique()","28c0a46f":"data = df.copy()\ndata.shape\n","bcbf8ea7":"sns.set(style = \"darkgrid\")\nsns.countplot(x = \"class\",data=data)","5a821baa":"df[\"Flags\"].unique()","3ff51eda":"df[\"A\"]=0\ndf[\"P\"]=0\ndf[\"S\"]=0\ndf[\"R\"]=0\ndf[\"F\"]=0\ndf[\"x\"]=0","c88fe83c":"def set_flag(data,check):\n    val=0;\n    if(check in list(data[\"Flags\"])):\n        val = 1 ;\n    return val;","bc7b74f0":"df.columns","711bd3a7":"df[\"A\"] = df.apply(set_flag,check =\"A\", axis = 1)\ndf[\"P\"] = df.apply(set_flag,check = \"P\" ,axis = 1)\ndf[\"S\"] = df.apply(set_flag,check =\"S\",axis = 1)\ndf[\"R\"] = df.apply(set_flag,check=\"R\" ,axis = 1)\ndf[\"F\"] = df.apply(set_flag,check =\"F\" ,axis = 1)\ndf[\"x\"] = df.apply(set_flag,check =\"x\" ,axis = 1)","55506e27":"sns.countplot(x=\"S\",hue = \"class\",data=df)","b7f16ae4":"sns.countplot(x = \"Proto\",hue = \"class\",data = df)","130c6d28":"df=df.drop(columns = [\"Date first seen\",\"attackType\",\"attackID\",\"attackDescription\",\"Flows\",\"Tos\",\"Flags\"])","8940ba2f":"df.head()","2ed537a0":"import re\ndef convtonum(data):\n    num1=data[\"Bytes\"]\n    if \"M\" in data[\"Bytes\"]:\n        num=re.findall(\"[0-9.0-9]\",data[\"Bytes\"])\n        num1 = float(\"\".join(num))*100000\n    num1 = float(num1)\n    return num1","5f6e5998":"df[\"Bytes\"] = df.apply(convtonum,axis = 1)","2a422017":"df.head()","b3655478":"from sklearn.preprocessing import LabelEncoder\ncol = [\"Proto\",\"class\",\"Src IP Addr\",\"Dst IP Addr\"]\nenc = LabelEncoder()\nfor col_name in col:\n    df[col_name]=enc.fit_transform(df[col_name])\n","af36bd35":"data1 = df.copy()\nplt.figure(figsize=(18,5))\nsns.heatmap(data1.corr(),annot=True,cmap = \"RdYlGn\")","05aeac65":"data_y = data1[\"class\"]\ndata_x = data1.drop(columns = [\"class\"])","11b835ec":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(data_x, data_y, test_size=0.3, random_state=1)","25c70b9e":"#decision-tree-classifier - single-tree-classifier  \/\/ using all features\n\nfrom sklearn.tree import DecisionTreeClassifier\n\nclf = DecisionTreeClassifier(criterion=\"entropy\", max_depth=10) # you can use GINI index also here as a critirion \nclf = clf.fit(X_train,y_train)\ny_pred = clf.predict(X_test)","5ec54af3":"from sklearn import metrics\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","b6ff3dd3":"feat_importances = pd.Series(clf.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(15).plot(kind='barh')\nplt.show()","938d706a":"# if you want to select most important features from an algorithm use recursive feature elimination and run algorithm on that\n\nfrom sklearn.feature_selection import RFE\n\nm = DecisionTreeClassifier(criterion=\"entropy\", max_depth=10)\nrfe = RFE(m,8)\nfit=rfe.fit(X_train,y_train)\n\nprint(X_train.columns)\nprint(\"Num Features: %d\" % fit.n_features_)\nprint(\"Selected Features: %s\" % fit.support_)\nprint(\"Feature Ranking: %s\" % fit.ranking_)","8c2808d4":"I ran this code on Google Colab with mounted Drive so specify path of dataset if running on local. If using Kaggle specify kaggle library.","e215d246":"We can see that majority of the data is suspicious sessions so our model will learn better on classifiying suspicious class.","344a7442":"The Bytes variable was an object as seen in head command and the model would not recognize it as a number. Therefore we convert the M in the number to a multiplication of 1M with the number part. This has been simply done using regex","4a44efdc":"This Dataset is of a server log for week1 and classifies sessions as suspicious or not. We are trying to see what factors are responsible for malicious activities. I have done some basic preprocessing steps followed by EDA.","bb5cdfa6":"Checking here the individual flag variables and impact of each variable on class. You can change the variable name in the below plot and see the impact.","30605770":"We got a 99% accuracy on the first go we can check further if it is overfitting and also see important variable in the model ","a024c188":"Checking for NULL values below. Some classification models on sklearn do not work well with missing values therefore it is necessary to remove or impute them with another well fitted statistical measure","9a4ed9a8":"Dropping some unnecessary columns and columns having a single value like flows and tos","637e750e":"Correlation Heatmap shows how each variable is correlated with class variable which we will try to predict.","d832ce3f":"Please upvote the kernel if it was helpful","3ba1241d":"The Flags field is a string of some flag variables which are necessary in the networking field. Wherever a certain flag is not set a \".\" is used. We need to break this columns into individual variables for flags as it will help the model learn faster and establish better relations. ","596e32aa":"Importing necessary libs","496a8c48":"Label Encoding categorical values.","54486e60":"We have the class variable which we need to predict later on. It has following unique values.","d97cb625":"We are using seaborn plots to visualize our data","f297b659":"Breaking dataset into train and test sets randomly"}}