{"cell_type":{"5d570141":"code","84c4b11c":"code","a0afb6e3":"code","ca3eba01":"code","e73d3dc7":"code","5be2ca4a":"code","3bcae292":"code","9978a41c":"code","b463c10d":"code","db507e34":"code","e74071dd":"code","b367bec5":"code","cf469a55":"code","4d5cf7c6":"code","2732c899":"code","68f284ab":"code","94df2712":"code","d20349e3":"code","80f6748b":"code","79c3848f":"code","0e4052d4":"markdown","fddb1686":"markdown","16c460ec":"markdown","1a02e7ce":"markdown","28502715":"markdown","a2d937d8":"markdown","547891d7":"markdown","16a00d77":"markdown","404592f8":"markdown","f49343f5":"markdown","909fd44c":"markdown","a68e0ba5":"markdown","6e97cdee":"markdown","e4a09694":"markdown","e73cee9e":"markdown","1dff51eb":"markdown","6ed8cbac":"markdown","ef4b660c":"markdown","6a18e6a3":"markdown"},"source":{"5d570141":"def show_bar(current, total):\n    \"\"\"\n    Displays progress bar. Use it in loops.\n    \n    Parameters:\n    ----------\n    current : int, number of current iteration, starts from 1!\n    \n    full : int, total amount of iterations\n    \"\"\"\n    output = '['+'\u25a0'*current+' '*(total-current)+']  '+str(int((current\/total)*100))+'%'\n    print(output, end=\"\\r\")","84c4b11c":"from time import sleep\n\ndef stuff(x=None):\n    \"\"\"Does lots of really important stuff!\"\"\"\n    sleep(0.5) # A delay to simulate execution of that very improtant stuff","a0afb6e3":"n_loops = 10\nfor i in range(n_loops):\n    stuff()                 # Do useful stuff here\n    show_bar(i+1, n_loops)  # Show progress bar","ca3eba01":"word_list = 'Apple orange tomato banana '.split()\nword_list","e73d3dc7":"for word in word_list:\n    stuff(word)                                        # Do useful stuff here\n    show_bar(word_list.index(word)+1, len(word_list))  # Show progress bar","5be2ca4a":"word_list = str('a '*5).split()\nword_list","3bcae292":"for word in word_list:\n    stuff(word)                                        # Do useful stuff here\n    show_bar(word_list.index(word)+1, len(word_list))  # Show progress bar","9978a41c":"iteration = 1\nfor word in word_list:\n    stuff(word)                          # Do useful stuff here\n    show_bar(iteration, len(word_list))  # Show progress bar\n    iteration += 1                       # Don't forget to increment iteration counter","b463c10d":"from sklearn.neighbors import KNeighborsRegressor\nparam_list = ['auto', 'ball_tree', 'kd_tree', 'brute']\n\nfor param_val in param_list:\n    # Create KNN with 'algorhitm' parameter successively set to one\n    # of its values: 'auto', 'ball_tree', 'kd_tree' and 'brute'\n    model = KNeighborsRegressor(algorithm=param_val)\n    # Fit the model.. Evaluate.. Store result.. Do what you need.. Etc..\n    sleep(0.5)\n    show_bar(param_list.index(param_val)+1, len(param_list))","db507e34":"HORIZONTAL_LINE = '-'*80 + '\\n'\n# Or maybe you can call it HL for short:\nHL = '-'*80 + '\\n'\n# Or HR like in HTML tag <hr>... Do as you like!","e74071dd":"print(HL + 'Experiment 1\\n\\t\u2022 Mass 1 = 12.3481 kg\\n\\t\u2022 Mass 2 = 42.0011 kg\\n')\nprint(HL + 'Experiment 2\\n\\t\u2022 Mass 1 = 11.2894 kg\\n\\t\u2022 Mass 2 = 48.4028 kg')","b367bec5":"HL = '\\n' + '='*30 + '\\n'\nprint(HL + 'A nu cheeki breeki i v damki' + HL)","cf469a55":"# Something like:\nclass color:\n    RED   = \"\\033[1;31m\"  \n    BLUE  = \"\\033[1;34m\"\n    CYAN  = \"\\033[1;36m\"\n    GREEN = \"\\033[0;32m\"\n    BOLD  = \"\\033[;1m\"\n    END   = '\\033[0m'","4d5cf7c6":"print(color.RED + 'Red text, ' + color.BLUE + 'blue text' + color.END)","2732c899":"print('Experiment results:')\nprint('\\t - Parameter 1 = 347\\n\\t - Parameter 2 = 7234\\n\\t - Parameter 3 = 234')\nprint('\\t ......')\nprint('\\t - Parameter n = 193')\nprint(color.RED  + '\\t - Total delta = -123.12')\nprint(color.CYAN + '\\t - Resulting sum = 939248.34' + color.END)","68f284ab":"print('The beauty is in the eye of the ' + color.BOLD + 'beer holder ' + color.END + '\ud83c\udf7a')","94df2712":"import matplotlib.pyplot as plt\n\ndef print_latex(text, size=15):\n    a = r'\\' + text + r'\n    ax = plt.axes([0,0,0.001,0.001]) #left,bottom,width,height\n    ax.set_xticks([])\n    ax.set_yticks([])\n    plt.text(0.3, 0.4, text, size=size)\n    plt.show()","d20349e3":"formula = '$y = X\\\\beta + \\\\varepsilon$'\nprint_latex(formula, size=20)","80f6748b":"formula = '$Q_c(\\\\mu, X^L) = \\mathrm{E}_n\\\\nu_n^k=\\\\frac{1}{N}\\\\sum_{N=1}^n\\\\nu_n^k$'\nprint_latex(formula, size=20)","79c3848f":"formula  = '$1st: y = ax + b$ \\n'\nformula += '$2nd: y = ax^2 + bx + c$ \\n'\nformula += '$3rd: y = ax^3 + bx^2 + cx + d$'\nprint_latex(formula, size=20)","0e4052d4":"And then you can output things like","fddb1686":"Just don't forget to close the colored or bold sequence with `Color.END`. There are a lot of other colors which you certainly may define if you need them.\n\nBy the way, yes, you can print various symbols. Not that it's particularly useful, but maybe you need to print a hourglass symbol \u231b (although I use \u29d6, like \u29d6 = 12.34 sec.) or arrows like \u27a1\ufe0f or whatever you may need.\n\n<br><hr><br>\n# Kernel markdown cells\n<br>\n\nSince Kaggle kernels are basically Jupyter notebooks (correct me if I'm wrong) and those are built upon HTML, you can use HTML tags. See this horizontal line above the caption? See those multiple blank lines? How did I do it? Well, with tags. The horizontal line is made by\n```HTML\n<hr>\n ```\n tag, so it looks like this:\n <hr>\n \n Multiple blank lines can be made by\n```HTML\n<br><br><br>\n ```\n\nAnd it looks like this:<br>\nLine 1...\n<br><br><br><br>\nLine 2...\n\n<br>\nColored markdown is like this:\n```HTML\n<font color='red'>Red text<\/font>\n ```\n which looks like: <font color='red'>Red text<\/font>.\n \n The \"bold\" tag\n ```HTML\n<b>bold text<\/b>\n ```\n is used just like `**bold text**`, it's basically the same thing. The result is <b>bold text<\/b>.\n \n In short, you may use various HTML tags in your cell markdown.\n \n <br><br><br>\n## Latex\n<br>\nYou can embed $\\LaTeX$ symbols and equations in your cells. You can't use the full potential of $\\LaTeX$, but writing equations $y = ax^2+bx+c$, using various symbols like $\\pi, \\alpha, \\mu$, subscripts $E_\\text{out}$, superscripts $2^S$ and other stuff becomes that much easier. Naturally you'll need to learn $\\LaTeX$ for a bit.\n \nIf you need to show it as output, you may write a function that uses something that was suggested [here](https:\/\/stackoverflow.com\/questions\/4028267\/print-latex-formula-with-python). Something like:","16c460ec":"which is a functional of complete cross validation.\n\nYou should also be able to output multiple lines:","1a02e7ce":"Usage:","28502715":"You may redefine it as you want too, maybe with an additional newline at the beginning, like:","a2d937d8":"How do you use it?\n\nWell, imagine you have some function that does the stuff you need:","547891d7":"<br><br><br>\n## Colored output\n<br>\nMay be used when:\n- You have a lot of output and you want to make it distinguishable\n- You want to emphasize certain parts of output\n\nAs suggested [here](https:\/\/stackoverflow.com\/questions\/287871\/print-in-terminal-with-colors) and [here](https:\/\/stackoverflow.com\/questions\/37340049\/how-do-i-print-colored-output-to-the-terminal-in-python\/37340245), you may define a class for colorful output:","16a00d77":"Usage:","404592f8":"Of course you may alter the `show_bar()` as you see fit and tailor it to your needs or to some specific scenario.\n\nI'm writing a kernel now which involves rather complex experiments which take tens of minutes to run, and `show_bar()` shows me the progress so I know that I may go grab something to eat because after 5 minutes my experiment's progress is 40%.\n<br><br><br>\n## Horizontal line\n<br>\nIt's something very trivial, but sometimes it's useful to define a horizontal line + '\\n' template: ","f49343f5":"Watch out for repetitions though:","909fd44c":"You see how it shows 20%? It didn't get stuck at 20%, it just showed 20% five times - instead of showing 20%, then 40, then 60, then 80 and finally 100. \n\nThat's because the first 'a' in this list has index 0, and all other elements are 'a's too, so this specific piece of code will always report 1\/5 of the progress, which is 20%. Of course it is easily fixed with adding an explicit iteration counter:","a68e0ba5":"Here in Kaggle kernel you can only see only the end result of the run, meaning you'll see here the full progress bar with 100% written next to it, but run this code yourself and you'll see the progress bar gradually filling.\n\nFor iterables like lists with `str`s, you may use:","6e97cdee":"Bold text would work too:","e4a09694":"Or with a more elegant solution which you may propose.\n\nI used it for several things, like changing a certain parameter of a model. Something like:","e73cee9e":"<br><br><br>\n# Have a nice little trick or idea?\n<br>\nFeel free to share in the comments and have a nice day!","1dff51eb":"Or maybe:","6ed8cbac":"which is a linear regression, or","ef4b660c":"**Good day to everyone!**\n\nThis is just a really small kernel for various little useful things I've found, written and used. I may enrich it with more stuff later.\n\nIf you have some little tricks like these and want to share them, please post them in the comment section. Thank you and have a nice day! \ud83c\udf7b\n\n<br><hr><br>\n# Output\n\n## Progress bar!\n<br>\nLet's start with a progress bar, which might help you if you have a loop which may take a long time to run. When I was writing one long theoretical kernel with loops that may take half an hour to run, I thought that it would be nice to have something indicating progress of the running experiment. So here's the function as I used it:","6a18e6a3":"Then the usage of the progress bar is like this:"}}