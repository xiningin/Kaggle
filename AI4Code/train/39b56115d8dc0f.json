{"cell_type":{"1a683340":"code","76e37c53":"code","df51ab57":"code","b166e478":"code","d897d870":"code","304ffdda":"code","eddee160":"code","2131a9e0":"code","afba3d59":"code","ce13eab2":"code","0504f7ec":"code","f2809d58":"code","aa376bf3":"code","7912a3ff":"code","b8080869":"code","69807f36":"code","51adb00e":"code","64a9294a":"code","165c7b53":"code","240bf6bf":"code","439f5c08":"code","18620c51":"code","c27d160f":"code","665272b2":"code","ea58af88":"code","878b977b":"code","35b523db":"code","83ae594c":"code","38e928e2":"markdown","a0fc458d":"markdown","123ed643":"markdown","370cdc8f":"markdown","b0fc600e":"markdown","60b7f03b":"markdown","795c5d5f":"markdown","324e67b3":"markdown","0b7ea01d":"markdown","5975435f":"markdown","b1feab05":"markdown","da9cf6cc":"markdown","20854c7f":"markdown","4b90a493":"markdown","1730a89b":"markdown"},"source":{"1a683340":"import pandas as pd\nimport numpy as np\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import cross_val_score, train_test_split\nfrom sklearn.decomposition import PCA\nfrom sklearn.pipeline import make_pipeline\nfrom  sklearn.preprocessing import RobustScaler, StandardScaler, Normalizer, QuantileTransformer, MinMaxScaler\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nimport optuna\nfrom sklearn.metrics import accuracy_score\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","76e37c53":"train=pd.read_csv('\/kaggle\/input\/forest-cover-type-prediction\/train.csv', index_col='Id')\ntest=pd.read_csv('\/kaggle\/input\/forest-cover-type-prediction\/test.csv', index_col='Id')\nsubmission=pd.read_csv('\/kaggle\/input\/forest-cover-type-prediction\/sampleSubmission.csv', index_col='Id')","df51ab57":"Ytrain=train['Cover_Type']\ntrain=train[list(test)]","b166e478":"train.isnull().sum()","d897d870":"test.isnull().sum()","304ffdda":"for col in ['Wilderness_Area1', 'Wilderness_Area2', 'Wilderness_Area3', 'Wilderness_Area4', 'Soil_Type1', 'Soil_Type2', 'Soil_Type3', 'Soil_Type4', 'Soil_Type5', 'Soil_Type6',\n            'Soil_Type7', 'Soil_Type8', 'Soil_Type9', 'Soil_Type10', 'Soil_Type11', 'Soil_Type12', 'Soil_Type13', 'Soil_Type14', 'Soil_Type15', 'Soil_Type16', 'Soil_Type17', \n            'Soil_Type18', 'Soil_Type19', 'Soil_Type20', 'Soil_Type21', 'Soil_Type22', 'Soil_Type23', 'Soil_Type24', 'Soil_Type25', 'Soil_Type26', 'Soil_Type27', 'Soil_Type28', \n            'Soil_Type29', 'Soil_Type30', 'Soil_Type31', 'Soil_Type32', 'Soil_Type33', 'Soil_Type34', 'Soil_Type35', 'Soil_Type36', 'Soil_Type37', 'Soil_Type38', 'Soil_Type39', \n            'Soil_Type40']:\n    if train[col].nunique() != test[col].nunique():\n        print(f'Different Values train-test : {col}')","eddee160":"train=train.drop(columns=['Soil_Type7','Soil_Type15'])\ntest=test.drop(columns=['Soil_Type7','Soil_Type15'])","2131a9e0":"sns.countplot(Ytrain)\nYtrain.value_counts()","afba3d59":"train.head()","ce13eab2":"train['Distance_To_Hydrology']=np.sqrt((train['Horizontal_Distance_To_Hydrology'] **2)  + (train['Vertical_Distance_To_Hydrology'] **2))\ntest['Distance_To_Hydrology']=np.sqrt((test['Horizontal_Distance_To_Hydrology'] **2)  + (test['Vertical_Distance_To_Hydrology'] **2))\n\n\nfigure, (ax1,  ax2) = plt.subplots(nrows=1, ncols=2)\nfigure.set_size_inches(14,6)\n\nsns.pointplot(data=train, x=Ytrain, y='Distance_To_Hydrology', ax=ax1)\nsns.distplot(train['Distance_To_Hydrology'], ax=ax2)","0504f7ec":"print(f\"Num_Kind of plants living in water? : {Ytrain.loc[train.loc[train['Distance_To_Hydrology']==0].index].nunique()}\")","f2809d58":"sns.distplot(np.log(train['Distance_To_Hydrology']+1), fit=norm)\ntrain['Distance_To_Hydrology']=np.log(train['Distance_To_Hydrology']+1)\ntest['Distance_To_Hydrology']=np.log(test['Distance_To_Hydrology']+1)\n\n\ntrain.loc[train['Distance_To_Hydrology']==0,'Distance_To_Hydrology']=np.nan\ntest.loc[test['Distance_To_Hydrology']==0,'Distance_To_Hydrology']=np.nan","aa376bf3":"qut=QuantileTransformer(output_distribution='normal')\npipeline=make_pipeline(qut, PCA(n_components=1))","7912a3ff":"train.corr()","b8080869":"sns.scatterplot(data=train, x='Elevation', y='Horizontal_Distance_To_Roadways', hue=Ytrain)","69807f36":"train['Elevation_Roadways']=pipeline.fit_transform(train[['Elevation','Horizontal_Distance_To_Roadways']])\ntest['Elevation_Roadways']=pipeline.transform(test[['Elevation','Horizontal_Distance_To_Roadways']])","51adb00e":"alpha=train[['Hillshade_9am','Hillshade_3pm']]\nalpha2=test[['Hillshade_9am','Hillshade_3pm']]","64a9294a":"train['Hillshade9am_Hillshade_3pm']=pipeline.fit_transform(alpha)\ntest['Hillshade9am_Hillshade_3pm']=pipeline.transform(alpha2)","165c7b53":"sns.lineplot(data=train, x=Ytrain, y='Hillshade9am_Hillshade_3pm')","240bf6bf":"alpha=train[['Aspect','Hillshade9am_Hillshade_3pm']]\nalpha2=test[['Aspect','Hillshade9am_Hillshade_3pm']]","439f5c08":"train['Aspect_Hillshade']=pipeline.fit_transform(alpha)\ntest['Aspect_Hillshade']=pipeline.transform(alpha2)","18620c51":"alpha=train[['Slope','Hillshade_Noon']]\nalpha2=test[['Slope','Hillshade_Noon']]","c27d160f":"train['Slope_Hillshade']=pipeline.fit_transform(alpha)\ntest['Slope_Hillshade']=pipeline.transform(alpha2)","665272b2":"Xtrain=train\nXtest=test","ea58af88":"rf=RandomForestClassifier(n_estimators=5000, random_state=18, n_jobs=-1)\nrf.fit(Xtrain.fillna(-999), Ytrain)\nfeature_importance_df=pd.DataFrame(data=None,  columns=['feature','importances'])\nfeature_importance_df['importances']=rf.feature_importances_\nfeature_importance_df['feature']=Xtrain.columns\n\nfeature_importance_df=feature_importance_df.sort_values(by='importances', ascending=False)\nfeature_importance_df.tail()","878b977b":"feature_names=feature_importance_df.head(56)['feature']\nXtrain=train[feature_names]\nXtest=test[feature_names]\nprint(Xtrain.shape, Ytrain.shape, Xtest.shape)","35b523db":"params={'n_estimators': 1222, 'learning_rate': 0.07307234151834806, 'num_leaves': 96, 'colsample_bytree': 0.8972376156262298, \n        'subsample': 0.9312856106293543, 'min_child_samples': 1}\n\nlightgbm=LGBMClassifier(random_state=18, subsample_freq=1, silent=False, **params)","83ae594c":"lightgbm.fit(Xtrain, Ytrain)\npredictions=lightgbm.predict(Xtest)\nsubmission['Cover_Type']=predictions\nsubmission.to_csv('LGBSingleModel.csv')\nsubmission.head()","38e928e2":"Are they aquatic plants? Hmm....","a0fc458d":"### Aspect & Hillshade","123ed643":"## Feature importance with RandomForest","370cdc8f":"### Hillshade 9am & 3pm","b0fc600e":"## Fit with Single model","60b7f03b":"## Check One-Hot Encoded Features","795c5d5f":"# Preprocessing for modeling","324e67b3":"## Distance To Hydrology","0b7ea01d":"### Slope & Hillshade","5975435f":"# EDA","b1feab05":"# Modeling","da9cf6cc":"## Check Target Variable","20854c7f":"## Check Missing Values","4b90a493":"# Load Data","1730a89b":"##  PCA with High Correlated Features"}}