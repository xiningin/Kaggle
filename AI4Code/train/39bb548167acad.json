{"cell_type":{"9789fc73":"code","8e21f1cd":"code","d5bb2e51":"code","8d95b414":"code","e755cb0a":"code","a6c17aca":"code","4b600964":"code","8a10b4ea":"code","61428c6e":"code","52abb625":"code","3cb2641c":"code","5aff949a":"code","7cc0eef6":"code","aa9dd958":"code","919736ac":"code","23f8fcab":"code","b4531e0d":"code","7579f13c":"code","14cb6ecf":"code","01f06d84":"code","ce954378":"code","23c22bbe":"code","1feefe0f":"code","78b1bf46":"code","c9c889c9":"code","d946de46":"markdown","c4e96682":"markdown","9b27206d":"markdown"},"source":{"9789fc73":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\nimport gc","8e21f1cd":"columns = ['groupId','assists','damageDealt','headshotKills','killPlace','killPoints','kills','killStreaks','matchDuration','matchType','revives','teamKills','winPlacePerc']\n\ncolumns_test = ['Id','groupId','assists','damageDealt','headshotKills','killPlace','killPoints','kills','killStreaks','matchDuration','matchType','revives','teamKills']\n\ndtypes = {\n        'assists'           : 'uint8',\n        'damageDealt'       : 'float32',\n        'headshotKills'     : 'uint8',\n        'killPlace'         : 'uint8',\n        'killPoints'        : 'uint16',\n        'kills'             : 'uint8',\n        'killStreaks'       : 'uint8',\n        'matchDuration'     : 'uint16',\n        'revives'           : 'uint8',\n        'teamKills'         : 'uint8',\n        'winPlacePerc'      : 'float16'\n}\n","d5bb2e51":"train = pd.read_csv(\"..\/input\/train_V2.csv\",usecols=columns, dtype=dtypes)\ntest = pd.read_csv(\"..\/input\/test_V2.csv\",usecols=columns_test, dtype=dtypes)","8d95b414":"#train.head()\n#train.describe()\n#train.describe(include='O')\n#train.info()\n#test.head()\n#test.describe()\n#test.describe(include='O')","e755cb0a":"train.loc[train['winPlacePerc'].isna()]","a6c17aca":"train.loc[train['groupId']=='12dfbede33f92b']","4b600964":"train.dropna(subset=['winPlacePerc'],inplace=True)","8a10b4ea":"train.info(memory_usage='deep')\nprint('\\n- * - * - * - * - * - * - * - * - * - * -\\n')\ntest.info(memory_usage='deep')","61428c6e":"train['groupId'] = train.groupId.astype('category')\ntrain['matchType'] = train.matchType.astype('category')\ntest['groupId'] = test.groupId.astype('category')\ntest['matchType'] = test.matchType.astype('category')","52abb625":"train.info(memory_usage='deep')\nprint('\\n- * - * - * - * - * - * - * - * - * - * -\\n')\ntest.info(memory_usage='deep')","3cb2641c":"#data = train\n\n#del train\n#gc.collect()","5aff949a":"#uniqueteams = data.groupId.unique().tolist()\n#for i in range(len(uniqueteams)):","7cc0eef6":"teamsize = train.groupby(['groupId']).size()\nteamsize = teamsize.to_dict()\nteamsize","aa9dd958":"train['groupId'] = train['groupId'].map(teamsize)\ntrain = train.rename(columns={'groupId':'Teamsize'})\ntrain.head()","919736ac":"teamsize_test = test.groupby(['groupId']).size()\nteamsize_test = teamsize_test.to_dict()\nteamsize_test","23f8fcab":"test['groupId'] = test['groupId'].map(teamsize_test)\ntest = test.rename(columns={'groupId':'Teamsize'})\ntest.head()","b4531e0d":"train = pd.get_dummies(train, columns = ['matchType'])\ntest = pd.get_dummies(test, columns = ['matchType'])","7579f13c":"y = train['winPlacePerc']\nX = train.drop('winPlacePerc',axis=1)","14cb6ecf":"from sklearn.model_selection import train_test_split\n\ntrain_X, val_X, train_y, val_y = train_test_split(X,y,random_state=1)","01f06d84":"import lightgbm as lgb\n\nparams={'learning_rate': 0.05,\n        'objective':'mae',\n        'metric':'mae',\n        'num_leaves': 31,\n        'verbose': 0,\n        'random_state':42,\n        'bagging_fraction': 0.7,\n        'feature_fraction': 0.7\n       }\nmodel = lgb.LGBMRegressor(**params, n_estimators=1000)\n#model.fit(train_X,train_y)","ce954378":"#pred = model.predict(val_X)\n\n#from sklearn.metrics import mean_absolute_error\n#mean_absolute_error(pred,val_y)","23c22bbe":"model.fit(X,y)","1feefe0f":"Idlist = test.Id\nfeatures = test.drop(['Id'],axis=1)\ntest_preds = model.predict(features)","78b1bf46":"output = pd.DataFrame({'Id': Idlist,\n                       'winPlacePerc': test_preds})\n\noutput.to_csv('submission_1.csv', index=False)","c9c889c9":"#Phew too tired, Later","d946de46":"Selected columns to read along with downcasting for int and float values(according to the max values needed by them)","c4e96682":"The memory usage can be still reduced by type conversion of objects to category","9b27206d":"Learnt something new about deleting variables and freeing up space"}}