{"cell_type":{"a4164789":"code","900bac6b":"code","103defe9":"code","20895725":"code","df56ec18":"code","a737b12e":"code","4cfbe462":"code","574bd9cd":"code","b2aed412":"code","3aed41aa":"code","95ada65a":"code","a4287e6c":"code","c89d653d":"code","c0d438e7":"code","f10adf2c":"code","a4118a68":"code","bd03b902":"markdown","4b46fc90":"markdown","b2dd7a28":"markdown"},"source":{"a4164789":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression\nimport tensorflow as tf","900bac6b":"data = pd.read_csv('..\/input\/fish-market\/Fish.csv')","103defe9":"data","20895725":"data.isnull().sum()","df56ec18":"y = data['Species']\nX = data.drop('Species', axis=1)","a737b12e":"X","4cfbe462":"scaler = StandardScaler()\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)","574bd9cd":"X","b2aed412":"encoder = LabelEncoder()\ny = encoder.fit_transform(y)\ny_mappings = {index: label for index, label in enumerate(encoder.classes_)}","3aed41aa":"y_mappings","95ada65a":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7)","a4287e6c":"logistic_model = LogisticRegression()\nlogistic_model.fit(X_train, y_train)\n\nlogistic_model.score(X_test, y_test)","c89d653d":"inputs = tf.keras.Input(shape=(6,))\nx = tf.keras.layers.Dense(16, activation='relu')(inputs)\nx = tf.keras.layers.Dense(16, activation='relu')(x)\noutputs = tf.keras.layers.Dense(7, activation='softmax')(x)\n\nnn_model = tf.keras.Model(inputs=inputs, outputs=outputs)\n\n\nnn_model.compile(\n    optimizer='adam',\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)\n\n\nbatch_size = 32\nepochs = 1000\n\nhistory = nn_model.fit(\n    X_train,\n    y_train,\n    validation_split=0.2,\n    batch_size=batch_size,\n    epochs=epochs,\n    verbose=0\n)","c0d438e7":"plt.figure(figsize=(14, 10))\n\nepochs_range = range(1, epochs + 1)\ntrain_loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nplt.plot(epochs_range, train_loss, label=\"Training Loss\")\nplt.plot(epochs_range, val_loss, label=\"Validation Loss\")\n\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\n\nplt.show()","f10adf2c":"np.argmin(val_loss)","a4118a68":"nn_model.evaluate(X_test, y_test)","bd03b902":"# Preprocessing","4b46fc90":"# Getting Started","b2dd7a28":"# Training"}}