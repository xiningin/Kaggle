{"cell_type":{"71e0796f":"code","eba4d666":"code","8699e326":"code","a1e685a8":"code","16aca3a0":"code","b7f8a228":"code","b4bce8af":"code","255548b1":"code","e1bb7892":"code","5cb250d7":"code","74e727b3":"code","f6ffbe8a":"code","87e9d7f9":"code","cfc6f437":"code","709874f8":"code","253c3673":"code","00c76a8b":"markdown","0f26a5cb":"markdown","d4276ca2":"markdown","481913ba":"markdown","6d981098":"markdown","1ec8e01a":"markdown"},"source":{"71e0796f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","eba4d666":"df = pd.read_csv(\"\/kaggle\/input\/dataset\/dataset.csv\")\ndf.head()","8699e326":"df.info()","a1e685a8":"df.drop(columns = df.columns[0],axis = 1,inplace = True)\ndf.head()","16aca3a0":"df.isnull().sum()","b7f8a228":"from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import OrdinalEncoder","b4bce8af":"SI = SimpleImputer()\ndf_fever = SI.fit_transform(df[['fever']])","255548b1":"OE = OrdinalEncoder(categories=[['Mild','Strong']])\ndf_cough = OE.fit_transform(df[['cough']])","e1bb7892":"OHE = OneHotEncoder(drop='first',sparse=False)\ndf_gender_city = OHE.fit_transform(df[['gender','city']])","5cb250d7":"df_age = df.drop(columns=['gender','fever','cough','city']).values","74e727b3":"df_transformed = np.concatenate((df_age,df_fever,df_gender_city,df_cough),axis=1)","f6ffbe8a":"df_transformed.shape","87e9d7f9":"df.head()","cfc6f437":"from sklearn.compose import ColumnTransformer\n\ntransformer = ColumnTransformer(transformers=[\n    ('tnf1',SimpleImputer(),['fever']),\n    ('tnf2',OrdinalEncoder(categories=[['Mild','Strong']]),['cough']),\n    ('tnf3',OneHotEncoder(sparse=False,drop='first'),['gender','city'])\n],remainder='passthrough')","709874f8":"df_transform = transformer.fit_transform(df)","253c3673":"df = pd.DataFrame(df_transform)\ndf.head()","00c76a8b":"# LONG METHOND","0f26a5cb":"### Using One Hot Encoding in column 'gender' , 'city'","d4276ca2":"Import ColumnTransformer class and make an object. The object will take 2 inputs - `transformers` and `remainder`. Transfomations are passed inside tuples and each tuple contains **name , transformers object , column**","481913ba":"### Using Simple Imputer to find missing values in column 'fever'","6d981098":"### Using Ordinal Encoding in column 'fever'","1ec8e01a":"# Column Transformer"}}