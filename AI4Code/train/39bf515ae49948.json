{"cell_type":{"52ac839e":"code","6a00ca99":"code","6847881a":"code","86d1e6be":"code","08dfe962":"code","392a7de3":"code","994861eb":"code","4532fac7":"code","1582157e":"code","3ef7bfba":"code","51e95586":"code","2f47d6c8":"code","61f2ea40":"code","35cd8264":"code","aebed21a":"code","9ab83ddc":"code","9081c45e":"code","94bdec16":"code","394e1ed3":"code","479e6dd3":"code","dc2b8c4a":"code","3531af7d":"code","2355721d":"code","8759688f":"code","90cab0f4":"code","c744b1b5":"code","6f98bcc7":"code","49bff5f8":"code","51464dda":"code","56dff6c7":"code","d764c30f":"code","422a0b90":"code","72260095":"code","79592c52":"code","e72ac44d":"code","7faf266f":"code","af5a4234":"code","cad70f90":"code","530730c9":"code","900039a2":"code","44b61e84":"code","97537304":"code","f2064c96":"code","4e3ce3ed":"code","20d1befd":"code","7563c7f8":"code","38bddd9d":"code","a0b04d4c":"code","898e22f7":"code","8fa82c66":"code","4fb8fc4b":"code","ed448d8d":"code","7ac9c2f8":"code","5c97aaf3":"code","03d8497f":"code","4485f2b7":"code","4069a57a":"code","0140bcfe":"code","b4b8538e":"code","bc0f4fb2":"code","0435adc5":"code","b3a77caa":"code","6082bc3c":"code","5a7f7961":"code","f34c0db8":"code","4fc75ca7":"code","7e9b63c3":"code","dcbeb8f3":"code","728e8372":"code","a0939e64":"code","4b6fc7b1":"code","325277d8":"code","7cdc75de":"code","3e611c9c":"code","0c02937d":"code","6696a72d":"code","61f781f7":"code","78a021e5":"code","99817aaa":"code","d534d969":"code","b228ab6e":"code","c6d71b82":"code","51e19e0a":"code","59b9385e":"code","036f53c5":"code","2427b160":"code","20d1ca22":"code","8e5980b8":"code","4c87d171":"code","88b9ec98":"code","9965ff02":"code","d1116948":"code","7fcf6ab4":"code","7be8b8e9":"code","2f988760":"code","bde5c9e0":"code","5d51c3be":"code","a453a12d":"code","dcd7ad4e":"code","45d53575":"code","4b0264f2":"code","73e8122c":"code","2fbc77ca":"code","dfe26d95":"code","a4d9432a":"code","81548b3d":"code","88876448":"code","1f2fbe40":"code","4a99c6c0":"code","d6e379d4":"code","7253682f":"code","eb8c83aa":"code","cb6ea67f":"code","41538365":"code","d1085687":"code","7c5560d3":"code","5c2707da":"code","67289a8d":"code","3ff23d6f":"code","91025f6a":"code","2b90ef5e":"code","d7f99ab7":"code","942f6d7e":"code","be0967f6":"code","8bd0da36":"code","e58219dc":"code","ddb1955a":"code","e8e46d4f":"code","c6d4a904":"code","67c03f0a":"code","0c561e90":"code","dc035131":"code","d421fda9":"code","6adec324":"code","59513aa1":"code","b85295ee":"code","823f5acb":"code","64a2240a":"code","a99332a3":"code","c45a3792":"code","9a886fb9":"code","1cc55e75":"code","402df88c":"code","6e47e476":"code","7421a5f4":"code","909fa242":"code","15a9c492":"code","5006eea6":"code","0c49e45d":"code","060583c1":"code","7476f24a":"code","d9bf6482":"code","916987cf":"code","569c2736":"code","44f5b72b":"code","333f58f3":"code","27e5e28e":"code","8ec09387":"code","47382c00":"code","944fe672":"code","044a3ba6":"code","040e7788":"code","8430f55f":"code","04aadaea":"code","7e176735":"code","409bd03d":"code","b96acaf1":"code","470fc5e8":"code","b4502e41":"code","403ca6ae":"code","994207e2":"code","a39ddc53":"code","ea2c8150":"code","faf2fd34":"code","b0bb7d74":"code","7ac0b2ce":"code","e0bdb280":"code","ec0aaf1a":"code","d1cc49b9":"code","fa5a5800":"code","1101fe44":"code","82aaa320":"code","340235ea":"code","007a7dd0":"code","c862a385":"code","0d839c73":"code","2784c354":"code","335cb36d":"code","fc89ade5":"code","a6d3f491":"code","677754ca":"code","b5f9b844":"code","471dda1e":"code","8c8d6181":"code","27d2cf3d":"code","faa3ac1d":"code","4f5ab652":"code","ac4f92ce":"code","22f6ca0d":"code","d6947867":"code","16a8a469":"code","988e5d99":"code","d3d35044":"code","08ed6239":"code","5876981f":"code","7aaf6347":"code","88f3c938":"code","19166a5d":"code","dd00e076":"code","659094a6":"code","3b180462":"code","acfee8d2":"code","82bb004d":"code","f7e47651":"code","0f6b7471":"code","b714f6b2":"code","52a96d72":"code","26abe82d":"code","e8be2a7e":"code","cfd47015":"code","cf351559":"code","67049e43":"code","107f992b":"code","e6b9d17c":"code","0a00b21e":"code","a4013f2e":"code","490b2645":"code","178a94ee":"code","bb2802b0":"code","6af1367e":"code","d8eb20d5":"code","e37abd05":"code","34bfefb5":"code","14f5af55":"code","ed438a2c":"code","c0e1e854":"code","c3b44862":"code","98e09c79":"code","8386913a":"code","c5f1f38e":"code","92b54482":"code","09cbdff9":"markdown","d774b3d4":"markdown","41a18007":"markdown","074af0b3":"markdown","1ca6d1dd":"markdown","c6d7ff67":"markdown","ffe70a57":"markdown","9edb10dd":"markdown","a15477b8":"markdown","c49a1f77":"markdown","cb7b82db":"markdown","1e53f53f":"markdown","1f609401":"markdown","0160d5c7":"markdown","9fef3d1b":"markdown","22020319":"markdown","9f5be7c2":"markdown","5e933601":"markdown","d07c5d66":"markdown","0f5a52a3":"markdown","eb7a1175":"markdown","1b18d5c3":"markdown","fc7b8189":"markdown","42fdb55e":"markdown","46c8f214":"markdown","b468b597":"markdown","1676cb2c":"markdown","51906057":"markdown","be4a5f5b":"markdown","fbe265cf":"markdown","ed44888d":"markdown","f0e91656":"markdown","314b8de0":"markdown","eed80964":"markdown","98e54baf":"markdown","8d5cf395":"markdown","860b54c3":"markdown","e0c19543":"markdown","fbf4339e":"markdown","ee1411c0":"markdown","71f1c74a":"markdown","2608f994":"markdown","01df6754":"markdown","c7584c16":"markdown","ab04f63c":"markdown","2defff3e":"markdown","215e9d86":"markdown","bbc6c618":"markdown","224fa808":"markdown","6fcdf867":"markdown","7c922301":"markdown","727a49f8":"markdown","8691aaa6":"markdown","60d22230":"markdown","29b01597":"markdown","78e8fff5":"markdown","9a2986f5":"markdown","44e0a56a":"markdown","f94ea836":"markdown","b21a7975":"markdown","7d918d9f":"markdown","5e91f974":"markdown","a32def31":"markdown","b4b9e258":"markdown","539aaa4f":"markdown","733e7956":"markdown","4a18feee":"markdown","b7a120f4":"markdown","bdd3c7cf":"markdown","92324e72":"markdown","35a5d765":"markdown","adaf8aff":"markdown","36fa3049":"markdown","b61e9ebd":"markdown","3d7dd896":"markdown","3264b772":"markdown","a550cb2a":"markdown","dd536bc4":"markdown","a957dac5":"markdown","0bea27f7":"markdown","7e9a0b9f":"markdown","deb5d4da":"markdown","f7457f4f":"markdown","001ccec5":"markdown","97af3a5f":"markdown","18b2f6db":"markdown","97a9e1aa":"markdown","87bb9d79":"markdown","76ff6d19":"markdown","25743dbe":"markdown","388fd796":"markdown","08d01bb3":"markdown","3f3e7188":"markdown","2318480f":"markdown","81d38d4e":"markdown","86cc7eb7":"markdown","9860edef":"markdown","51c75fe5":"markdown","c5f45959":"markdown","3e539495":"markdown"},"source":{"52ac839e":"!pip install lofo-importance","6a00ca99":"!pip install pandarallel","6847881a":"import numpy as np\nimport pandas as pd\nimport dateutil\nimport datetime as dt\nfrom datetime import date\nfrom pandarallel import pandarallel\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\nimport gc\nfrom tqdm.notebook import tqdm\nimport pickle\nimport statsmodels.api as sm\nfrom pylab import rcParams\nfrom itertools import permutations, product\n\nimport lightgbm as lgb\n\nfrom lightgbm import LGBMRegressor\nfrom lofo import LOFOImportance, FLOFOImportance, Dataset, plot_importance\n\nfrom sklearn.metrics import (mean_squared_log_error, mean_squared_error,\n                             mean_absolute_error)\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\n\nfrom sklearn.model_selection import train_test_split, KFold\nimport warnings","86d1e6be":"pandarallel.initialize()","08dfe962":"## Function to reduce the DF size\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","392a7de3":"train_df = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\ntest_df = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')\nitem_df = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv')\nitem_cat_df = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nshop_df = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv')","994861eb":"exch_rate = pd.read_csv('..\/input\/1c-params\/exchange_rate.csv', sep=',', parse_dates=['<DATE>'])\nexch_rate = exch_rate.drop(['<TICKER>', '<PER>', '<TIME>'], axis=1)\nexch_rate = exch_rate.rename(columns={'<DATE>':'date', '<CLOSE>':'rate'})","4532fac7":"train_df['date'] = train_df['date'].parallel_apply(dateutil.parser.parse, dayfirst=True)","1582157e":"def name_correction(x):\n    x = x.lower()\n    x = x.partition('[')[0]\n    x = x.partition('(')[0]\n    x = re.sub('[^A-Za-z0-9\u0410-\u042f\u0430-\u044f]+', ' ', x)\n    x = x.replace('  ', ' ')\n    x = x.strip()\n    return x","3ef7bfba":"item_df['item_name'] = item_df['item_name'].apply(name_correction)","51e95586":"item_df['item_name'].unique().shape","2f47d6c8":"item_df.shape","61f2ea40":"item_cat_df['new_cats'] = (item_cat_df['item_category_name']\n                           .str.split(' - ').apply(lambda x: x[0]))","35cd8264":"item_cat_df['new_cats'].unique()","aebed21a":"item_cat_df['new_subcats'] = (item_cat_df['item_category_name']\n                           .str.split(' - ').apply(lambda x: x[-1]))","9ab83ddc":"item_cat_df['new_subcats'].unique()","9081c45e":"shop_df['city'] = (shop_df['shop_name'].apply(name_correction)\n                   .str.split(' ').apply(lambda x: x[0]))","94bdec16":"shop_df.loc[shop_df['city']=='\u043d', 'city'] = '\u043d\u0438\u0436\u043d\u0438\u0439_\u043d\u043e\u0432\u0433\u043e\u0440\u043e\u0434'","394e1ed3":"shop_df['city'].unique()","479e6dd3":"shop_df['shop_type'] = (shop_df['shop_name'].apply(name_correction)\n                        .str.split(' ').apply(lambda x: x[1] if (len(x)>1) else 'other'))","dc2b8c4a":"shop_df['shop_type'].unique()","3531af7d":"shop_df.loc[(shop_df['shop_type']=='\u043e\u0440\u0434\u0436\u043e\u043d\u0438\u043a\u0438\u0434\u0437\u0435')|\n            (shop_df['shop_type']=='\u0443\u043b')|\n           (shop_df['shop_type']=='\u0440\u0430\u0441\u043f\u0440\u043e\u0434\u0430\u0436\u0430')|\n            (shop_df['shop_type']=='\u0442\u043e\u0440\u0433\u043e\u0432\u043b\u044f')|\n            (shop_df['shop_type']=='\u043c\u0430\u0433\u0430\u0437\u0438\u043d'), 'shop_type'] = 'other'","2355721d":"shop_df.loc[(shop_df['shop_type']=='\u043d\u043e\u0432\u0433\u043e\u0440\u043e\u0434')|\n           (shop_df['shop_type']=='\u043c\u0442\u0440\u0446'), 'shop_type'] = '\u0442\u0440\u0446'","8759688f":"shop_df.loc[(shop_df['shop_type']=='\u043f\u043e\u0441\u0430\u0434'),\n            'shop_type'] = '\u0442\u0446'","90cab0f4":"shop_df['shop_type'].unique()","c744b1b5":"item_df = pd.merge(item_df, item_cat_df[['item_category_id', 'new_cats', 'new_subcats']])","6f98bcc7":"item_df = item_df.rename(columns={'new_cats': 'item_category',\n                                    'new_subcats': 'item_subcategory'})","49bff5f8":"train_df = pd.merge(train_df, item_df[['item_name', 'item_id',\n                                      'item_category', 'item_subcategory']])","51464dda":"train_df = pd.merge(train_df, shop_df[['city', 'shop_type', 'shop_id']])","56dff6c7":"train_df = pd.merge(train_df, exch_rate)","d764c30f":"train_df['price_usd'] = train_df['item_price'] \/ train_df['rate']","422a0b90":"train_df['revenue'] = train_df['item_price'] * train_df['item_cnt_day']\ntrain_df['revenue_usd'] = train_df['price_usd'] * train_df['item_cnt_day']","72260095":"sns.distplot(train_df.loc[train_df['item_price']<5000, 'item_price'], kde=False)","79592c52":"train_df.loc[train_df['item_price']<0, :]","e72ac44d":"train_df.loc[train_df['item_price']<0, 'item_price'] = train_df.loc[\n    train_df['item_id']==train_df.loc[train_df['item_price']<0,\n                                      'item_id'].values[0], 'item_price'].mean()","7faf266f":"sns.distplot(np.log10(train_df['item_price']), kde=False)\nplt.yscale('log')","af5a4234":"train_df = train_df.loc[(train_df['item_price']<10**5), :]","cad70f90":"sns.distplot(train_df.loc[(train_df['item_cnt_day']<10000)&(train_df['item_cnt_day']>-5),\n                          'item_cnt_day'], kde=False)\nplt.yscale('log')","530730c9":"train_df = train_df.loc[(train_df['item_cnt_day']<750), :]","900039a2":"plt.figure(figsize=(12, 8))\nplt.scatter(train_df['item_price'], train_df['item_cnt_day'], alpha=0.025)\nplt.xscale('log')\nplt.yscale('log')\nplt.ylim((1e-1, 1e6))\nplt.show()","44b61e84":"train_df.loc[train_df['item_cnt_day']==1, :].shape[0] \/ train_df.shape[0]","97537304":"t_df = train_df.groupby(['date_block_num', 'item_id', 'shop_id'])[['item_cnt_day']].sum()\nt_df = t_df.reset_index().rename(columns={'item_cnt_day': 'item_cnt_month'})","f2064c96":"t_df.loc[t_df['item_cnt_month']==1, :].shape[0] \/ t_df.shape[0]","4e3ce3ed":"t_df.loc[t_df['item_cnt_month']<=5, :].shape[0] \/ t_df.shape[0]","20d1befd":"del t_df\ngc.collect()","7563c7f8":"t_df = train_df[['item_cnt_day', 'date']].copy()","38bddd9d":"t_df['month'] = t_df['date'].dt.month\nt_df['year'] = t_df['date'].dt.year","a0b04d4c":"data = t_df.groupby(\n    ['year','month']).agg({'item_cnt_day': np.sum}).reset_index().pivot(\n    index='month', columns='year', values='item_cnt_day')\ndata.plot(figsize=(12, 8))","898e22f7":"del t_df, data\ngc.collect()","8fa82c66":"temp_sum = train_df.groupby(['date_block_num'])[['item_cnt_day', 'revenue', 'revenue_usd']].sum()\ntemp_sum = temp_sum.reset_index().rename(columns={'item_cnt_day': 'item_cnt_month'})","4fb8fc4b":"rcParams['figure.figsize'] = 5, 7.5\ndecomposition = sm.tsa.seasonal_decompose(temp_sum['item_cnt_month'], freq=12, model='multiplicative')\nfig = decomposition.plot()\nplt.show()","ed448d8d":"decomposition = sm.tsa.seasonal_decompose(temp_sum['revenue'], freq=12, model='multiplicative')\nfig = decomposition.plot()\nplt.show()","7ac9c2f8":"temp_mean = train_df.groupby(['date_block_num'])[['item_cnt_day', 'revenue', 'revenue_usd']].mean()\ntemp_mean = temp_mean.reset_index().rename(columns={'item_cnt_day': 'item_cnt_mean',\n                                                    'revenue': 'av_revenue'})","5c97aaf3":"decomposition = sm.tsa.seasonal_decompose(temp_mean['item_cnt_mean'], freq=12, model='multiplicative')\nfig = decomposition.plot()\nplt.show()","03d8497f":"decomposition = sm.tsa.seasonal_decompose(temp_mean['av_revenue'], freq=12, model='multiplicative')\nfig = decomposition.plot()\nplt.show()","4485f2b7":"del temp_mean, temp_sum\ngc.collect()","4069a57a":"shop_sum = train_df.groupby(['shop_id'], as_index=False)[['item_cnt_day', 'revenue']].sum()\nshop_mean = train_df.groupby(['shop_id'], as_index=False)[['item_cnt_day', 'revenue']].mean()","0140bcfe":"shop_sum = shop_sum.rename(columns={'item_cnt_day': 'item_cnt_sum'}).sort_values(by='item_cnt_sum')\nshop_mean = shop_mean.rename(columns={'item_cnt_day': 'item_cnt_mean'})","b4b8538e":"f, axes = plt.subplots(2, 1, figsize=(15, 10))\nsns.barplot(x=shop_sum['shop_id'], y=shop_sum['item_cnt_sum'], ax=axes[0], order=shop_sum['shop_id'])\nsns.barplot(x=shop_mean['shop_id'], y=shop_mean['item_cnt_mean'], ax=axes[1], order=shop_sum['shop_id'])\nplt.show()","bc0f4fb2":"pd.merge(shop_sum, shop_df).tail()","0435adc5":"del shop_sum, shop_mean\ngc.collect()","b3a77caa":"item_sum = train_df.groupby(['item_category'], as_index=False)[['item_cnt_day', 'revenue']].sum()\nitem_mean = train_df.groupby(['item_category'], as_index=False)[['item_cnt_day', 'revenue']].mean()","6082bc3c":"item_sum = item_sum.rename(columns={'item_cnt_day': 'item_cnt_sum',\n                                   'revenue': 'revenue_sum'}).sort_values(by='item_cnt_sum')\nitem_mean = item_mean.rename(columns={'item_cnt_day': 'item_cnt_mean',\n                                     'revenue': 'av_revenue'})","5a7f7961":"f, axes = plt.subplots(2, 1, figsize=(15, 10), sharex=False)\nsns.barplot(x=item_sum['item_category'], y=item_sum['item_cnt_sum'], ax=axes[0],\n            order=item_sum['item_category'])\nsns.barplot(x=item_mean['item_category'], y=item_mean['item_cnt_mean'], ax=axes[1],\n            order=item_sum['item_category'])\nplt.subplots_adjust(hspace=1)\nfor ax in axes:\n    plt.sca(ax)\n    plt.xticks(rotation=45)\nplt.show()","f34c0db8":"movies_df = train_df.loc[train_df['item_category']=='\u041a\u0438\u043d\u043e',\n             :].groupby('item_id', as_index=False).sum()[['item_id', 'item_cnt_day']]","4fc75ca7":"top20_movies = pd.merge(movies_df, item_df).sort_values(by='item_cnt_day', ascending=False).head(20)","7e9b63c3":"top20_movies = top20_movies.rename(columns={'item_cnt_day': 'item_cnt_sum'})","dcbeb8f3":"plt.figure(figsize=(15, 5))\nsns.barplot(x=top20_movies['item_name'], y=top20_movies['item_cnt_sum'],\n            order=top20_movies['item_name'])\nplt.xticks(rotation=90)\nplt.show()","728e8372":"del top20_movies\ngc.collect()","a0939e64":"item_sum = item_sum.sort_values(by='revenue_sum')","4b6fc7b1":"f, axes = plt.subplots(2, 1, figsize=(15, 10), sharex=False)\nsns.barplot(x=item_sum['item_category'], y=item_sum['revenue_sum'], ax=axes[0],\n            order=item_sum['item_category'])\nsns.barplot(x=item_mean['item_category'], y=item_mean['av_revenue'], ax=axes[1],\n            order=item_sum['item_category'])\nplt.subplots_adjust(hspace=1)\nfor ax in axes:\n    plt.sca(ax)\n    plt.xticks(rotation=45)\nplt.show()","325277d8":"del item_sum, item_mean\ngc.collect()","7cdc75de":"games_df = train_df.loc[train_df['item_category']=='\u0418\u0433\u0440\u044b',\n             :].groupby('item_id', as_index=False).sum()[['item_id', 'revenue', 'item_cnt_day']]","3e611c9c":"top20_games = pd.merge(games_df, item_df).sort_values(by='revenue', ascending=False).head(20)","0c02937d":"plt.figure(figsize=(15, 5))\nsns.barplot(x=top20_games['item_name'], y=top20_games['revenue'],\n            order=top20_games['item_name'])\nplt.xticks(rotation=90)\nplt.show()","6696a72d":"consoles_df = train_df.loc[train_df['item_category']=='\u0418\u0433\u0440\u043e\u0432\u044b\u0435 \u043a\u043e\u043d\u0441\u043e\u043b\u0438',\n             :].groupby('item_id', as_index=False).sum()[['item_id', 'revenue', 'item_cnt_day']]","61f781f7":"top20_consoles = pd.merge(consoles_df, item_df).sort_values(by='revenue', ascending=False).head(20)","78a021e5":"plt.figure(figsize=(15, 5))\nsns.barplot(x=top20_consoles['item_name'], y=top20_consoles['revenue'],\n            order=top20_consoles['item_name'])\nplt.xticks(rotation=90)\nplt.show()","99817aaa":"test_df.head()","d534d969":"test_df.shape","b228ab6e":"pd.DataFrame(product(*[test_df['shop_id'].unique(), test_df['item_id'].unique()])).shape","c6d71b82":"gr_date = train_df.groupby('date_block_num')","51e19e0a":"t_d = gr_date.apply(lambda x: product(*[[x.name], x['shop_id'].unique(), x['item_id'].unique()]))","59b9385e":"all_vals = pd.DataFrame()\nfor t in tqdm(t_d.values):\n    all_vals = pd.concat([all_vals, pd.DataFrame(t)], axis=0)","036f53c5":"all_vals.columns = ['date_block_num', 'shop_id', 'item_id']\nall_vals.head()","2427b160":"test_vals = pd.DataFrame()\ntest_vals['shop_id'] = test_df['shop_id'].copy()\ntest_vals['item_id'] = test_df['item_id'].copy()\ntest_vals['date_block_num'] = 34","20d1ca22":"all_vals = pd.concat([all_vals, test_vals], axis=0)","8e5980b8":"gr_month = train_df.groupby(['shop_id', 'item_id', 'date_block_num'])","4c87d171":"month_sum = gr_month.sum()","88b9ec98":"month_sum.shape","9965ff02":"month_sum.head()","d1116948":"month_sum = month_sum.rename(columns={'item_cnt_day':'item_cnt_month'})","7fcf6ab4":"month_sum.head()","7be8b8e9":"month_sum['item_cnt_month'] = month_sum['item_cnt_month'].clip(0, 20)","2f988760":"month_sum = month_sum.reset_index()[['shop_id', 'item_id',\n                                     'item_cnt_month', 'date_block_num',\n                                    'revenue', 'revenue_usd']]","bde5c9e0":"month_sum = pd.merge(all_vals, month_sum,\n                     on=['shop_id','item_id', 'date_block_num'],\n                     how='left').fillna(0)","5d51c3be":"month_sum.head()","a453a12d":"month_sum.shape","dcd7ad4e":"month_sum = reduce_mem_usage(month_sum)\nshop_df = reduce_mem_usage(shop_df)\nitem_df = reduce_mem_usage(item_df)","45d53575":"month_sum = month_sum.merge(shop_df[['shop_id', 'city', 'shop_type']],\n                            how='left', on=['shop_id'])","4b0264f2":"alles = month_sum.merge(item_df, how='left', on=['item_id'])","73e8122c":"alles.head()","2fbc77ca":"exch_rate['month'] = exch_rate['date'].dt.month\nexch_rate['year'] = exch_rate['date'].dt.year","dfe26d95":"temp_mean = exch_rate.groupby(['year', 'month']).mean().reset_index()","a4d9432a":"temp_mean['date_block_num'] = range(35)","81548b3d":"temp_mean = reduce_mem_usage(temp_mean)","88876448":"temp_mean.head()","1f2fbe40":"alles = alles.merge(temp_mean, how='left', on=['date_block_num'])","4a99c6c0":"def lag_feature(df, lags, col):\n    tmp = df[['date_block_num','shop_id','item_id',col]]\n    for i in lags:\n        shifted = tmp.copy()\n        shifted.columns = ['date_block_num','shop_id','item_id', col+'_lag_'+str(i)]\n        shifted['date_block_num'] += i\n        df = pd.merge(df, shifted, on=['date_block_num','shop_id','item_id'], how='left')\n    return df","d6e379d4":"gr = train_df.groupby(['item_id', 'shop_id', 'date_block_num'])","7253682f":"m_price = gr.mean()","eb8c83aa":"m_price = m_price.rename(columns={'revenue': 'av_revenue', 'revenue_usd': 'av_revenue_usd', \n                                 'item_cnt_day': 'av_item_cnt_day', 'item_price': 'av_item_price',\n                                 'price_usd': 'av_price_usd'})","cb6ea67f":"m_price = m_price.drop(['rate'], axis=1)","41538365":"m_price['item_purchase_days'] = gr.count()['date']\nm_price = m_price.reset_index()\nm_price = reduce_mem_usage(m_price)","d1085687":"m_price.head()","7c5560d3":"m_price['av_item_cnt_day'] \/= m_price['item_purchase_days']","5c2707da":"m_group = m_price.groupby(['item_id'], as_index=False)['av_item_price'].mean()","67289a8d":"m_group = m_group.rename(columns={'av_item_price': 'mean_price'})","3ff23d6f":"m_price = pd.merge(all_vals, m_price,\n                     on=['shop_id','item_id', 'date_block_num'],\n                     how='left').fillna(0)","91025f6a":"m_price = pd.merge(m_price, m_group, on=['item_id'], how='left')","2b90ef5e":"m_price['price_dev'] = (m_price['av_item_price'] - m_price['mean_price']) \/ m_price['mean_price']","d7f99ab7":"m_price = lag_feature(m_price, [1, 2, 3, 6, 12], 'item_purchase_days')\nm_price = lag_feature(m_price, [1, 2, 3, 6, 12], 'av_item_cnt_day')\nm_price = lag_feature(m_price, [1, 2, 3], 'av_item_price')\nm_price = lag_feature(m_price, [1, 2, 3], 'av_price_usd')\nm_price = lag_feature(m_price, [1, 2, 3], 'price_dev')","942f6d7e":"m_price = lag_feature(m_price, [1, 2, 3], 'av_revenue')\nm_price = lag_feature(m_price, [1, 2, 3], 'av_revenue_usd')","be0967f6":"m_price.head()","8bd0da36":"m_price['proj_av_revenue'] = 2 * (m_price['av_revenue_lag_1'] -\n                           m_price['av_revenue_lag_2']) + m_price['av_revenue_lag_2']\n\nm_price['proj_av_revenue_2'] = 3 * (m_price['av_revenue_lag_1'] - \n                             m_price['av_revenue_lag_3']) \/ 2 + m_price['av_revenue_lag_3']","e58219dc":"m_price['proj_price'] = 2 * (m_price['av_item_price_lag_1'] - \n                             m_price['av_item_price_lag_2']) + m_price['av_item_price_lag_2']\n\nm_price['proj_price_2'] = 3 * (m_price['av_item_price_lag_1'] - \n                               m_price['av_item_price_lag_3']) \/ 2 + m_price['av_item_price_lag_3']","ddb1955a":"cols = [c for c in m_price.columns if c not in ['item_cnt_day', 'rate',\n                                                'av_item_price', 'av_price_usd',\n                                                'revenue', 'revenue_usd', 'item_purchase_days',\n                                                'av_item_cnt_day', 'price_dev',\n                                               'av_revenue', 'av_revenue_usd']]","e8e46d4f":"m_price = reduce_mem_usage(m_price.loc[:, cols])","c6d4a904":"alles = pd.merge(alles, m_price,\n        on=['item_id', 'date_block_num', 'shop_id'], how='left')","67c03f0a":"del m_price\ngc.collect()","0c561e90":"alles = lag_feature(alles, [1, 2, 3, 6, 12], 'item_cnt_month')","dc035131":"alles['proj_item_cnt'] = 2 * (alles['item_cnt_month_lag_1'] - \n                              alles['item_cnt_month_lag_2']) + alles['item_cnt_month_lag_2']\n\nalles['proj_item_cnt_2'] = 3 * (alles['item_cnt_month_lag_1'] -\n                                alles['item_cnt_month_lag_3']) \/ 2 + alles['item_cnt_month_lag_3']\n\nalles['proj_item_cnt_12'] = 12 * (alles['item_cnt_month_lag_1'] - \n                                  alles['item_cnt_month_lag_12']) \/ 11 + alles['item_cnt_month_lag_12']","d421fda9":"alles['mean_proj_item_cnt'] = np.mean([alles['proj_item_cnt'],\n                                       alles['proj_item_cnt_2'], alles['proj_item_cnt_12']], axis=0)","6adec324":"alles = lag_feature(alles, [1, 2, 3, 6, 12], 'revenue')\nalles = lag_feature(alles, [1, 2, 3, 6, 12], 'revenue_usd')","59513aa1":"alles['proj_monthly_revenue'] = 2 * (alles['revenue_lag_1'] - \n                                     alles['revenue_lag_2']) + alles['revenue_lag_2']\n\nalles['proj_monthly_revenue_2'] = 3 * (alles['revenue_lag_1'] - \n                                       alles['revenue_lag_3']) \/ 2 + alles['revenue_lag_3']\n\nalles['proj_monthly_revenue_12'] = 12 * (alles['revenue_lag_1'] - \n                                         alles['revenue_lag_12']) \/ 11 + alles['revenue_lag_12']","b85295ee":"alles['mean_proj_revenue'] = np.mean([alles['proj_monthly_revenue'],\n                                       alles['proj_monthly_revenue_2'],\n                                      alles['proj_monthly_revenue_12']], axis=0)","823f5acb":"alles = alles.drop(['revenue', 'revenue_usd'], axis=1)","64a2240a":"gr_shop = train_df.groupby(['shop_id', 'date_block_num'])","a99332a3":"pdf = pd.merge(all_vals, gr_shop.count()['date'], on=['shop_id', 'date_block_num'], how='left')","c45a3792":"pdf = pdf.rename(columns={'date':'purchases_per_month'})[['date_block_num',\n                                                         'shop_id',\n                                                          'purchases_per_month']].drop_duplicates()","9a886fb9":"tmp = pdf[['date_block_num','shop_id', 'purchases_per_month']]\nshifted = tmp.copy()\nshifted.columns = ['date_block_num','shop_id', 'purchases_per_month'+'_lag_'+str(1)]\nshifted['date_block_num'] += 1\npdf = pd.merge(pdf, shifted, on=['date_block_num','shop_id'], how='left')","1cc55e75":"pdf = reduce_mem_usage(pdf)","402df88c":"pdf = pdf.drop(['purchases_per_month'], axis=1)","6e47e476":"alles = pd.merge(alles, pdf, on=['shop_id', 'date_block_num'], how='left')","7421a5f4":"cc_df = pd.DataFrame(gr_shop.mean().groupby('shop_id').cumcount(), columns=['active_months'])\ncc_df = cc_df.reset_index()","909fa242":"cc_df = pd.merge(all_vals[['date_block_num', 'shop_id']], cc_df,\n                 on=['date_block_num', 'shop_id'], how='left').drop_duplicates()","15a9c492":"tmp = cc_df[['date_block_num','shop_id', 'active_months']]\nfor i in [1]:\n    shifted = tmp.copy()\n    shifted.columns = ['date_block_num','shop_id', 'active_months'+'_lag_'+str(i)]\n    shifted['date_block_num'] += i\n    cc_df = pd.merge(cc_df, shifted, on=['date_block_num','shop_id'], how='left')","5006eea6":"cc_df = cc_df.drop(['active_months'], axis=1)","0c49e45d":"for i in [1]:\n    cc_df['active_months_lag_'+str(i)] += i\n    cc_df['active_months_lag_'+str(i)] = cc_df['active_months_lag_'+str(i)].fillna(0).astype('int')","060583c1":"cc_df = reduce_mem_usage(cc_df)","7476f24a":"alles = pd.merge(alles, cc_df, on=['shop_id', 'date_block_num'], how='left')","d9bf6482":"gr_item = train_df.groupby(['item_id', 'date_block_num'])","916987cf":"cc_df = pd.DataFrame(gr_item.mean().groupby('item_id').cumcount(), columns=['item_active_months'])\ncc_df = cc_df.reset_index()","569c2736":"cc_df = pd.merge(all_vals[['date_block_num', 'item_id']], cc_df,\n                 on=['date_block_num', 'item_id'], how='left').drop_duplicates()","44f5b72b":"tmp = cc_df[['date_block_num','item_id', 'item_active_months']]\nfor i in [1]:\n    shifted = tmp.copy()\n    shifted.columns = ['date_block_num','item_id', 'item_active_months'+'_lag_'+str(i)]\n    shifted['date_block_num'] += i\n    cc_df = pd.merge(cc_df, shifted, on=['date_block_num','item_id'], how='left')","333f58f3":"cc_df = cc_df.drop(['item_active_months'], axis=1)","27e5e28e":"for i in [1]:\n    cc_df['item_active_months_lag_'+str(i)] += i\n    cc_df['item_active_months_lag_'+str(i)] = cc_df['item_active_months_lag_'+str(i)].fillna(0).astype('int')","8ec09387":"cc_df = reduce_mem_usage(cc_df)","47382c00":"alles = pd.merge(alles, cc_df, on=['item_id', 'date_block_num'], how='left')","944fe672":"cc_df = pd.DataFrame(gr.mean().groupby(['shop_id','item_id']).cumcount(), columns=['shop_item_active_months'])\ncc_df = cc_df.reset_index()","044a3ba6":"cc_df = pd.merge(all_vals, cc_df,\n                 on=['date_block_num', 'shop_id', 'item_id'], how='left').drop_duplicates()","040e7788":"cc_df = lag_feature(cc_df, [1], 'shop_item_active_months')","8430f55f":"for i in [1]:\n    cc_df['shop_item_active_months_lag_'+str(i)] += i\n    cc_df['shop_item_active_months_lag_'+str(i)] = cc_df['shop_item_active_months_lag_'\n                                                         +str(i)].fillna(0).astype('int')","04aadaea":"cc_df = cc_df.drop(['shop_item_active_months'], axis=1)","7e176735":"cc_df = reduce_mem_usage(cc_df)","409bd03d":"alles = pd.merge(alles, cc_df, on=['item_id', 'shop_id', 'date_block_num'], how='left')","b96acaf1":"cum_revs = gr_shop.mean()","470fc5e8":"cum_revs = cum_revs[['revenue', 'revenue_usd']]","b4502e41":"cum_revs = cum_revs.reset_index()","403ca6ae":"cum_revs = pd.merge(all_vals[['shop_id', 'date_block_num']],\n         cum_revs, on=['shop_id', 'date_block_num'], how='left').drop_duplicates()","994207e2":"cum_revs['c_shop_revenue_usd'] = cum_revs.groupby('shop_id')['revenue_usd'].cumsum().values\ncum_revs['c_shop_revenue'] = cum_revs.groupby('shop_id')['revenue'].cumsum().values","a39ddc53":"tmp = cum_revs[['date_block_num','shop_id', 'c_shop_revenue']]\nshifted = tmp.copy()\nshifted.columns = ['date_block_num','shop_id', 'c_shop_revenue'+'_lag_'+str(1)]\nshifted['date_block_num'] += 1\ncum_revs = pd.merge(cum_revs, shifted, on=['date_block_num','shop_id'], how='left')","ea2c8150":"tmp = cum_revs[['date_block_num','shop_id', 'c_shop_revenue_usd']]\nshifted = tmp.copy()\nshifted.columns = ['date_block_num','shop_id', 'c_shop_revenue_usd'+'_lag_'+str(1)]\nshifted['date_block_num'] += 1\ncum_revs = pd.merge(cum_revs, shifted, on=['date_block_num','shop_id'], how='left')","faf2fd34":"cum_revs = reduce_mem_usage(cum_revs)","b0bb7d74":"alles = pd.merge(alles, cum_revs[['shop_id', 'date_block_num',\n                                  'c_shop_revenue_lag_1', 'c_shop_revenue_usd_lag_1']],\n                                   on=['shop_id', 'date_block_num'], how='left')","7ac0b2ce":"cum_revs = gr.mean()","e0bdb280":"cum_revs = cum_revs[['revenue', 'revenue_usd']]","ec0aaf1a":"cum_revs = cum_revs.reset_index()","d1cc49b9":"cum_revs = pd.merge(all_vals, cum_revs, on=['shop_id', 'date_block_num', 'item_id'], how='left')","fa5a5800":"cum_revs['revenue'] = cum_revs['revenue'].fillna(0)\ncum_revs['revenue_usd'] = cum_revs['revenue_usd'].fillna(0)","1101fe44":"cum_revs['c_revenue_usd'] = cum_revs.groupby('shop_id')['revenue_usd'].cumsum().values\ncum_revs['c_revenue'] = cum_revs.groupby('shop_id')['revenue'].cumsum().values","82aaa320":"cum_revs = lag_feature(cum_revs, [1], 'c_revenue')","340235ea":"cum_revs = lag_feature(cum_revs, [1], 'c_revenue_usd')","007a7dd0":"cum_revs = reduce_mem_usage(cum_revs)","c862a385":"alles = pd.merge(alles, cum_revs[['shop_id', 'date_block_num', 'item_id',\n                                  'c_revenue_lag_1', 'c_revenue_usd_lag_1']],\n                                   on=['shop_id', 'date_block_num', 'item_id'], how='left')","0d839c73":"month_sum.head()","2784c354":"group = month_sum.groupby(['date_block_num'])\ngr_df = group.mean()\ngr_df = gr_df.rename(columns={'item_cnt_month':'av_month'}).reset_index()","335cb36d":"tmp = gr_df[['date_block_num', 'av_month']]\nshifted = tmp.copy()\nshifted.columns = ['date_block_num', 'av_month'+'_lag_'+str(1)]\nshifted['date_block_num'] += 1\ngr_df = pd.merge(gr_df, shifted, on=['date_block_num'], how='left')","fc89ade5":"gr_df = reduce_mem_usage(gr_df)","a6d3f491":"alles = pd.merge(alles, gr_df[['av_month_lag_1', 'date_block_num']], on=['date_block_num'], how='left')","677754ca":"group = month_sum.groupby(['date_block_num', 'item_id'])\ngr_df = group.mean()\ngr_df = gr_df.rename(columns={'item_cnt_month':'av_month_item'}).reset_index()","b5f9b844":"tmp = gr_df[['date_block_num', 'item_id', 'av_month_item']]\nshifted = tmp.copy()\nshifted.columns = ['date_block_num', 'item_id', 'av_month_item'+'_lag_'+str(1)]\nshifted['date_block_num'] += 1\ngr_df = pd.merge(gr_df, shifted, on=['date_block_num', 'item_id'], how='left')","471dda1e":"gr_df = reduce_mem_usage(gr_df)","8c8d6181":"alles = pd.merge(alles, gr_df[['av_month_item_lag_1', 'date_block_num', 'item_id']],\n                 on=['date_block_num', 'item_id'], how='left')","27d2cf3d":"group = month_sum.groupby(['date_block_num', 'shop_id'])\ngr_df = group.mean()\ngr_df = gr_df.rename(columns={'item_cnt_month':'av_month_shop'}).reset_index()","faa3ac1d":"tmp = gr_df[['date_block_num', 'shop_id', 'av_month_shop']]\nshifted = tmp.copy()\nshifted.columns = ['date_block_num', 'shop_id', 'av_month_shop'+'_lag_'+str(1)]\nshifted['date_block_num'] += 1\ngr_df = pd.merge(gr_df, shifted, on=['date_block_num', 'shop_id'], how='left')","4f5ab652":"gr_df = reduce_mem_usage(gr_df)","ac4f92ce":"alles = pd.merge(alles, gr_df[['av_month_shop_lag_1', 'date_block_num', 'shop_id']],\n                 on=['date_block_num', 'shop_id'], how='left')","22f6ca0d":"month_cat = pd.merge(month_sum, item_df)","d6947867":"group = month_cat.groupby(['date_block_num', 'item_category_id'])\ngr_df = group.mean()\ngr_df = gr_df.rename(columns={'item_cnt_month':'av_month_cat'}).reset_index()","16a8a469":"tmp = gr_df[['date_block_num', 'item_category_id', 'av_month_cat']]\nshifted = tmp.copy()\nshifted.columns = ['date_block_num', 'item_category_id', 'av_month_cat'+'_lag_'+str(1)]\nshifted['date_block_num'] += 1\ngr_df = pd.merge(gr_df, shifted, on=['date_block_num', 'item_category_id'], how='left')","988e5d99":"gr_df = reduce_mem_usage(gr_df)","d3d35044":"alles = pd.merge(alles, gr_df[['av_month_cat_lag_1', 'date_block_num', 'item_category_id']],\n                 on=['date_block_num', 'item_category_id'], how='left')","08ed6239":"group = month_cat.groupby(['date_block_num', 'item_subcategory'])\ngr_df = group.mean()\ngr_df = gr_df.rename(columns={'item_cnt_month':'av_month_subcat'}).reset_index()","5876981f":"tmp = gr_df[['date_block_num', 'item_subcategory', 'av_month_subcat']]\nshifted = tmp.copy()\nshifted.columns = ['date_block_num', 'item_subcategory', 'av_month_subcat'+'_lag_'+str(1)]\nshifted['date_block_num'] += 1\ngr_df = pd.merge(gr_df, shifted, on=['date_block_num', 'item_subcategory'], how='left')","7aaf6347":"gr_df = reduce_mem_usage(gr_df)","88f3c938":"alles = pd.merge(alles, gr_df[['av_month_subcat_lag_1', 'date_block_num', 'item_subcategory']],\n                 on=['date_block_num', 'item_subcategory'], how='left')","19166a5d":"group = month_sum.groupby(['shop_id', 'item_id'])\ngr_df = group.mean()\ngr_df = gr_df.rename(columns={'item_cnt_month':'av_shop_item'}).reset_index()","dd00e076":"gr_df = reduce_mem_usage(gr_df)","659094a6":"alles = pd.merge(alles, gr_df[['av_shop_item', 'shop_id', 'item_id']],\n                 on=['shop_id', 'item_id'], how='left')","3b180462":"alles['first_sale'] = (alles['date_block_num'] -\n                       alles.groupby(['item_id','shop_id'])['date_block_num'].transform('min'))\nalles['item_first_sale'] = (alles['date_block_num'] -\n                            alles.groupby('item_id')['date_block_num'].transform('min'))\nalles['shop_first_sale'] = (alles['date_block_num'] -\n                            alles.groupby('shop_id')['date_block_num'].transform('min'))","acfee8d2":"del train_df, month_sum, cum_revs, month_cat, shifted, tmp, gr_df, cc_df\ngc.collect()","82bb004d":"!mkdir data","f7e47651":"with open('data\/alles_final.pkl', 'wb') as handle:\n    pickle.dump(alles, handle)","0f6b7471":"%reset -f","b714f6b2":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport gc\nfrom tqdm.notebook import tqdm\nimport pickle\nimport lightgbm as lgb\nfrom lightgbm import LGBMRegressor\nfrom lofo import LOFOImportance, FLOFOImportance, Dataset, plot_importance\n\nfrom sklearn.metrics import (mean_squared_log_error, mean_squared_error,\n                             mean_absolute_error)\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\n\nfrom sklearn.model_selection import train_test_split, KFold\nimport warnings","52a96d72":"alles = pd.read_pickle('data\/alles_final.pkl')\nalles = alles.drop(['mean_price', 'av_shop_item'], axis=1)","26abe82d":"rows = alles['date_block_num'] > 11","e8be2a7e":"alles[['item_name', 'item_category', 'item_subcategory', 'city', 'shop_type']] = \\\nalles[['item_name', 'item_category',\n       'item_subcategory', 'city', 'shop_type']].apply(LabelEncoder().fit_transform)","cfd47015":"new_features = pd.read_pickle('..\/input\/1c-params\/new_features.pkl')","cf351559":"features = list(new_features) + ['date_block_num']\ncols = list(features)+['item_cnt_month']","67049e43":"data = alles.loc[rows, cols]\ndata = data.fillna(0)","107f992b":"train_rows = data.date_block_num < 33\ntest_rows = data.date_block_num == 33","e6b9d17c":"X_train = data[train_rows].drop(['item_cnt_month'], axis=1)\ny_train = data[train_rows]['item_cnt_month']\nX_test = data[test_rows].drop(['item_cnt_month'], axis=1)\ny_test = data[test_rows]['item_cnt_month']\n\nX_final_test = data[data.date_block_num == 34].drop(['item_cnt_month'], axis=1)","0a00b21e":"categorical_features = (data.dtypes[data.dtypes.apply(str).str.startswith('int')].index).tolist()","a4013f2e":"categorical_features","490b2645":"categorical_features = ['item_category_id',\n 'shop_id']","178a94ee":"params = pd.read_pickle('..\/input\/1c-params\/final_params.pkl')","bb2802b0":"kf = KFold(n_splits = 5, random_state=42)\nresu1 = 0\nimpor1 = 0\nresu3_mae=0\ny_pred = 0\ny_final_test = 0\nstack_train = np.zeros([X_train.shape[0], ])\nmodels = []\nfor train_index, test_index in tqdm(list(kf.split(X_train, y_train))):\n    X_train2 = X_train.iloc[train_index, :]\n    y_train2 = y_train.iloc[train_index]\n    X_test2 = X_train.iloc[test_index, :]\n    y_test2 = y_train.iloc[test_index]\n    \n    d_training = lgb.Dataset(X_train2, label=y_train2,\n                             categorical_feature=categorical_features,\n                             free_raw_data=False)\n    d_test = lgb.Dataset(X_test2, label=y_test2,\n                         categorical_feature=categorical_features,\n                         free_raw_data=False)\n    \n    clf = lgb.train(params, train_set=d_training, num_boost_round=1000,\n                      valid_sets=[d_training, d_test], verbose_eval=25,\n                      early_stopping_rounds=50)\n\n    models.append(clf)\n    temp_predict = clf.predict(X_test2, num_iteration=clf.best_iteration)\n    stack_train[test_index] = temp_predict\n\n    y_pred += clf.predict(X_test, num_iteration=clf.best_iteration)\/5\n    y_final_test += clf.predict(X_final_test, num_iteration=clf.best_iteration)\/5\n    mse = mean_squared_error(y_test2, temp_predict)\n    mae = mean_absolute_error(y_test2, temp_predict)\n\n    resu1 += mse\/5\n    resu3_mae += mae\/5 \n    impor1 += clf.feature_importance()\/5\n    del X_train2, y_train2, X_test2, y_test2; gc.collect()","6af1367e":"df_fimp = pd.DataFrame()\ndf_fimp[\"feature\"] = X_train.columns.values\ndf_fimp[\"importance\"] = impor1\n\n\nplt.figure(figsize=(15, 10))\nsns.barplot(x=\"importance\", y=\"feature\", data=df_fimp.sort_values(by=\"importance\", ascending=False))\nplt.title(\"LightGBM Feature Importance\")\nplt.tight_layout()","d8eb20d5":"test_df = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')\n\nsubmission = pd.DataFrame({\n    \"ID\": test_df.index, \n    \"item_cnt_month\": y_final_test\n})\nsubmission.to_csv('submission.csv', index=False)","e37abd05":"importance_df = pd.read_pickle('..\/input\/1c-params\/feature_importances.pkl')\nplot_importance(importance_df, figsize=(12,24))","34bfefb5":"group = alles.groupby(['shop_id', 'item_id'])\n\nplt.figure(figsize=(7.5, 5))\nplt.plot(group.get_group((59, 2269))['first_sale'], group.get_group((59, 2269))['item_cnt_month'])\nplt.plot(group.get_group((59, 10298))['first_sale'], group.get_group((59, 10298))['item_cnt_month'])\nplt.plot(group.get_group((59, 4164))['first_sale'], group.get_group((59, 4164))['item_cnt_month'])\nplt.ylabel('item_cnt_month')\nplt.xlabel('first_sale')\nplt.show()","14f5af55":"r_features = ['item_cnt_month_lag_1', 'item_category_id', 'item_subcategory',\n                   'item_category', 'shop_type', 'city', 'shop_id', 'date_block_num']\n\nr_cols = list(r_features)+['item_cnt_month']\n\ndata = alles.loc[rows, r_cols]\ndata = data.fillna(0)","ed438a2c":"X_train = data[train_rows].drop(['item_cnt_month'], axis=1)\ny_train = data[train_rows]['item_cnt_month']\nX_test = data[test_rows].drop(['item_cnt_month'], axis=1)\ny_test = data[test_rows]['item_cnt_month']\n\nX_final_test = data[data.date_block_num == 34].drop(['item_cnt_month'], axis=1)","c0e1e854":"categorical_features = (data.dtypes[data.dtypes.apply(str).str.startswith('int')].index).tolist()","c3b44862":"categorical_features","98e09c79":"categorical_features = ['item_category_id',\n 'item_subcategory',\n 'item_category',\n 'shop_type',\n 'city',\n 'shop_id']","8386913a":"kf = KFold(n_splits = 5, random_state=42)\nresu1 = 0\nimpor1 = 0\nresu3_mae=0\ny_pred = 0\ny_final_test = 0\nstack_train = np.zeros([X_train.shape[0], ])\nmodels = []\nfor train_index, test_index in tqdm(list(kf.split(X_train, y_train))):\n    X_train2 = X_train.iloc[train_index, :]\n    y_train2 = y_train.iloc[train_index]\n    X_test2 = X_train.iloc[test_index, :]\n    y_test2 = y_train.iloc[test_index]\n    \n    d_training = lgb.Dataset(X_train2, label=y_train2,\n                             categorical_feature=categorical_features,\n                             free_raw_data=False)\n    d_test = lgb.Dataset(X_test2, label=y_test2,\n                         categorical_feature=categorical_features,\n                         free_raw_data=False)\n    \n    clf = lgb.train(params, train_set=d_training, num_boost_round=1000,\n                      valid_sets=[d_training, d_test], verbose_eval=25,\n                      early_stopping_rounds=50)\n\n    models.append(clf)\n    temp_predict = clf.predict(X_test2, num_iteration=clf.best_iteration)\n    stack_train[test_index] = temp_predict\n\n    y_pred += clf.predict(X_test, num_iteration=clf.best_iteration)\/5\n    y_final_test += clf.predict(X_final_test, num_iteration=clf.best_iteration)\/5\n    mse = mean_squared_error(y_test2, temp_predict)\n    mae = mean_absolute_error(y_test2, temp_predict)\n\n    resu1 += mse\/5\n    resu3_mae += mae\/5 \n    impor1 += clf.feature_importance()\/5\n    del X_train2, y_train2, X_test2, y_test2; gc.collect()","c5f1f38e":"df_fimp = pd.DataFrame()\ndf_fimp[\"feature\"] = X_train.columns.values\ndf_fimp[\"importance\"] = impor1\n\n\nplt.figure(figsize=(15, 10))\nsns.barplot(x=\"importance\", y=\"feature\", data=df_fimp.sort_values(by=\"importance\", ascending=False))\nplt.title(\"LightGBM Feature Importance\")\nplt.tight_layout()","92b54482":"submission = pd.DataFrame({\n    \"ID\": test_df.index, \n    \"item_cnt_month\": y_final_test\n})\nsubmission.to_csv('submission_no_features.csv', index=False)","09cbdff9":"### Lagging revenues:","d774b3d4":"LGBM parameters estimated using Optuna (see, for example https:\/\/www.kaggle.com\/corochann\/optuna-tutorial-for-hyperparameter-optimization):","41a18007":"### Other mean values:","074af0b3":"### Data preparation","1ca6d1dd":"Top features description:\n\n1) __'item_cnt_month_lag_1'__ is the target variable value in the previous month;  \n2) __'item_first_sale'__ is the number of months since the introduction of a particular item on the market;  \n3) __'av_month_item_lag_1'__ is the value of the target varible in the previous month averaged over all the shops;  \n4) __'item_category_id'__  \n5) __'av_month_cat_lag_1'__ is the value of the target varible in the previous month averaged over the category_id of each item;  \n6) __'item_purchase_days_lag_1'__ number of days (in a month) when a particular item is purchased in a particular shop. Basically, it is the target variable that does not take into account the exact number of items purchased per day (i.e. it's always considered 1)\n7) __'av_month_shop_lag_1'__ is the value of the target varible in the previous month averaged over the shop_id of each item;  \n8) __'first_sale'__ is the number of months since the appearance of a particular item in a particular shop;  \n\nOverall, apart from the categorical features, the final prediction mostly relies in the market condition in the previous month. Two features that are different are 'item_first_sale' and 'first_sale':","c6d7ff67":"Parsing dates (pandarallel function parallel_apply):","ffe70a57":"Borrowed from https:\/\/www.kaggle.com\/dlarionov\/feature-engineering-xgboost:","9edb10dd":"### Lagging target variable:","a15477b8":"Mean over __fixed subcategory and month__:","c49a1f77":"Strangely enough, the test set contains a product (i.e. all possible combinations) of all the unique shops and items in it. Seems logical to do something similar with the train set...","cb7b82db":"LB score = 0.903","1e53f53f":"Taking a look at what's happening __inside the top categories__:","1f609401":"### Interpreting the results:","0160d5c7":"Taking a look at what's happening inside the top category (__'Movies'__):","9fef3d1b":"Retrieving cities from the shop names:","22020319":"## Import and prepare data","9f5be7c2":"## EDA:","5e933601":"### Cumulative shop revenue based on a particular item:","d07c5d66":"Cumulative __revenue__:","0f5a52a3":"Averaging the values based on the extrapolation over 1, 2, and 11 months:","eb7a1175":"Even though the volume is mostly determined by one set of categories, the situation in case of revenue is slightly different. One can see, for instance that __'Games'__ becomes the top category instead of __'Movies'__. The __'Game consoles'__, despite having relatively low volume, gets the second place due to its high price.","1b18d5c3":"Feature importances from LOFO:","fc7b8189":"Revenue:","42fdb55e":"### Merging everything together","46c8f214":"It seems that typically sales are high right after the item introduction and decay afterwards. So, by knowing how long ago an item first appeared on the market, one might tell something about the demand.","b468b597":"Adding test shops\/items @ last month:","1676cb2c":"### __Revenues__ distribution by category:","51906057":"Borrowed from https:\/\/www.kaggle.com\/kyakovlev\/1st-place-solution-part-1-hands-on-data :","be4a5f5b":"Mean over __all months__ (fixed shop\/item pairs):","fbe265cf":"### Including all possible combinations of unique shops\/items for each month in the train set:","ed44888d":"Looking at the test set:","f0e91656":"LB Score = 1.0","314b8de0":"## Model","eed80964":"As it can be seen, the score is heavily dominated by the __'item_cnt_month_lag_1'__ feature, i.e. the value of the target value in the previous month. So, it seems logical to build a minimalistic model based on this feature and other categorical ones, such as shop_id, item_category, etc.","98e54baf":"Average USD\/RUB exchange rate:","8d5cf395":"Features found via LOFO importance (see, for example https:\/\/www.kaggle.com\/aerdem4\/ashrae-lofo-feature-importance):","860b54c3":"### Submission","e0c19543":"Mean over __all shops__ (fixed item and month):","fbf4339e":"There are top 5 product categories dominating the overall sales volume.","ee1411c0":"Average __sales volume__:","71f1c74a":"Average __revenue__:","2608f994":"Mean over __fixed category id and month__:","01df6754":"Price in USD:","c7584c16":"USD\/RUB exchange rate taken from https:\/\/www.finam.ru\/profile\/forex\/usd-rub\/export\/ :","ab04f63c":"In case of monthly sales, this value is of around 70%:","2defff3e":"Number of active days (where a purchase has been done) for a particular item-shop pair:","215e9d86":"### Cross-validation ensemble","bbc6c618":"### __Item counts versus item prices__","224fa808":"Renaming and merging some of the types:","6fcdf867":"Retrieving shop types:","7c922301":"So, one can get slightly worse results (~10% lower rmse) by using only the value of the target variable in the previous month and some other readily available features, thus avoiding the tedious process of feature engineering.","727a49f8":"### Shop+item active months:","8691aaa6":"Average number of items bought (on active days):","60d22230":"Adding all the zero values:","29b01597":"# 1C Sales prediction","78e8fff5":"### __Seasonal decomposition:__","9a2986f5":"## Preparing target variable:","44e0a56a":"Selecting \"proper\" categorical features:","f94ea836":"### Sales distribution by __item_category__:","b21a7975":"### Lagging prices:","7d918d9f":"Mean over __all shops and all items__ (fixed month):","5e91f974":"There is an entry with negative price:","a32def31":"Mean item price over all shops and months and current deviation from its value:","b4b9e258":"As one can see, these are mostly located in Moscow and its outskirts:","539aaa4f":"Whereas the average number daily sales is around 1 for all the shops, there are several shops having larger cumulative amount of sales.","733e7956":"There is a __clear seasonality__ in both overall amount of sales and average sales per day. Moreover, there seems to be a __negative trend__ for the former and a __positive one__ for the latter.  \nIf one looks at the __revenues__, it can be seen that even though the __seasonality__ persists here, there is __no clear trend__ in case of cumulative value. The __average revenues__ follow the behaviour of the average number of sales.","4a18feee":"### __Item count per day__ distribution:","b7a120f4":"### __Price distribution:__","bdd3c7cf":"## Feature engineering","92324e72":"Training the LGBM models on 5 separate folds and using their average prediction for the final submission (y_final_test): ","35a5d765":"### Item active months:","adaf8aff":"### Sales distributions by __shop_id__:","36fa3049":"Linear extrapolation:","b61e9ebd":"There are some repeating items in the dataset","3d7dd896":"\"Projected\" values: silly linear extrapolation to the next month:","3264b772":"Clipping target variable according to the competition rules:","a550cb2a":"Replotting in log10 scale:","dd536bc4":"Lag everything:","a957dac5":"Reduce RAM usage. From https:\/\/www.kaggle.com\/caesarlupum\/ashrae-start-here-a-gentle-introduction:","0bea27f7":"### Cumulative shop revenue:","7e9a0b9f":"Averaging the extrapolated values:","deb5d4da":"### Shops data","f7457f4f":"### Items data","001ccec5":"However, in 95% of all cases, the monthly sales volume is not greater than 5:","97af3a5f":"Around 90% of all daily sales include only one item:","18b2f6db":"### First sales:","97a9e1aa":"### A simpler model","87bb9d79":"Filling it with the mean price of this particular item:","76ff6d19":"### Shop active months:","25743dbe":"The distribution of the sales in the top category ('Movies') is monotonous, no peculiarities are observed","388fd796":"### Item categories data","08d01bb3":"Cumulative __sales volume__:","3f3e7188":"### Target variable:","2318480f":"Pandarallel is needed to parse dates from the initial dataset a little faster:","81d38d4e":"Merging with the shop and item datasets:","86cc7eb7":"LGBM feature importances:","9860edef":"Linear extrapolation to the next month:","51c75fe5":"Mean over __all items__ (fixed month and shop):","c5f45959":"### Shop purchases per month (independent of the item_id):","3e539495":"### __Total sales behaviour depending on month\/year__"}}