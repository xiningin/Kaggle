{"cell_type":{"76a4bc6e":"code","0aebea9c":"code","03d44d7b":"code","28b8204d":"code","1eafdc06":"code","e964143b":"code","5140a1e9":"code","3400f5b6":"code","3cb2c582":"code","8871ae36":"code","37122ce8":"code","f7c144f0":"code","55b343f0":"code","dd412da6":"code","14ad79a6":"code","a782e31d":"code","d66dad20":"code","8b40f262":"markdown"},"source":{"76a4bc6e":"import os\nimport pandas as pd\nimport numpy as np\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn-bright')\n\nnp.random.seed(0)\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport tensorflow as tf\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Activation, Dropout, Conv2D, MaxPooling2D, BatchNormalization\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0aebea9c":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","03d44d7b":"print('Train Data Shape: {}'.format(train.shape))\nprint('Test Data Shape: {}'.format(test.shape))","28b8204d":"train.head()","1eafdc06":"plt.figure(figsize=(6, 4))\nsns.countplot(train['label'])\nplt.xlabel('Label')\nplt.ylabel('Count')","e964143b":"y_train = train.label.astype('float32')\nX_train = train.drop('label', axis=1).astype('float32')\nX_test = test.astype('float32')\n\nprint(X_train.shape, y_train.shape, X_test.shape)","5140a1e9":"X_train = X_train.values.reshape(-1, 28, 28, 1)\nX_train = X_train \/ 255.0\n\nX_test = X_test.values.reshape(-1, 28, 28, 1)\nX_test = X_test \/ 255.0\n\nprint(X_train.shape, X_test.shape)","3400f5b6":"plt.figure(figsize=(12, 12))\nfor i in range(1, 6):\n    plt.subplot(5, 5, i)\n    plt.imshow(X_train[random.randint(0, len(X_train))])","3cb2c582":"plt.figure(figsize=(12, 12))\nfor i in range(1, 6):\n    plt.subplot(5, 5, i)\n    plt.imshow(X_test[random.randint(0, len(X_test))])","8871ae36":"y_train = tf.keras.utils.to_categorical(y_train, 10)\ny_train.shape","37122ce8":"train['label'].head()","f7c144f0":"y_train[0:5, :]","55b343f0":"model = tf.keras.models.Sequential([\n    Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)), \n    Conv2D(32, (3, 3), activation='relu'),\n    MaxPooling2D(2, 2), \n    Conv2D(64, (3, 3), activation='relu', padding='Same'), \n    Conv2D(64, (3, 3), activation='relu', padding='Same'), \n    MaxPooling2D(pool_size=(2, 2), strides=(2, 2)), \n    Dropout(0.25), \n    Conv2D(64, (3, 3), activation='relu', padding='Same'), \n    Conv2D(64, (3, 3), activation='relu', padding='Same'), \n    MaxPooling2D(pool_size=(2, 2), strides=(2, 2)),\n    Dropout(0.25), \n    Flatten(), \n    Dense(256, activation='relu'), \n    Dense(256, activation='relu'), \n    Dropout(0.50), \n    Dense(10, activation='softmax')\n])\nmodel.summary()","dd412da6":"class Callback(tf.keras.callbacks.Callback):\n    def end_if(self, epoch, logs={}):\n        if (logs.get('accuracy') > 0.999):\n            print('Reached 0.99 accuracy')\n            self.model.stop_training = True\n            \ncallbacks = Callback()","14ad79a6":"optimizer = tf.keras.optimizers.Adam(\n                    learning_rate=0.0005, \n                    beta_1=0.9, \n                    beta_2=0.999, \n                    epsilon=1e-07, \n                    name='Adam')\n\nmodel.compile(optimizer=optimizer,\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X_train, y_train, batch_size=20, epochs=10, callbacks=[callbacks])","a782e31d":"pred = model.predict(X_test)\n\npred = np.argmax(pred, axis=1)\n\npred = pd.Series(pred, name='Label')","d66dad20":"submission = pd.concat([pd.Series(range(1, 28001), name='ImageID'), pred], axis=1)\nsubmission.to_csv('submission.csv', index=False)\n\nsubmission.head(10)","8b40f262":"#### "}}