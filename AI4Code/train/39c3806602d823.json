{"cell_type":{"2a99f6bf":"code","04878b40":"code","faa77011":"code","249c43db":"code","1bb6fb7a":"code","3d87d006":"code","93e8f080":"code","403d425d":"code","7c2c22d6":"code","3d10d34b":"code","cc035490":"code","868a3c6b":"code","e37bc8c6":"code","e0ff04e8":"code","800d8d54":"code","7cca5ac9":"code","2309b41a":"code","36ade3ff":"code","e04614f2":"code","35938968":"code","656e6881":"code","48e78fba":"code","746c6f4d":"code","3642ab20":"code","673537c6":"code","188e9dfc":"code","1cd0ab06":"code","f1631873":"code","6e0a2529":"code","40f311b6":"code","c1a79902":"code","d187fad7":"code","f8bbb16c":"markdown","045e9300":"markdown","8089ac9d":"markdown","cc6b8b3a":"markdown","e4ac9525":"markdown","29922cf2":"markdown","a34ea053":"markdown","7bd65b5e":"markdown","cb83bdae":"markdown","3367b197":"markdown","e79be120":"markdown","02493bf1":"markdown","d9e27e90":"markdown","34eafafa":"markdown","f996bafb":"markdown","b77a34ca":"markdown","6e35306d":"markdown","d8a1429e":"markdown","03f6615a":"markdown","60031f12":"markdown","7e510ed1":"markdown","855bf71d":"markdown","26e09db6":"markdown","2ace7c94":"markdown","7850732e":"markdown","edd4b7f5":"markdown","2db341bf":"markdown","945f8849":"markdown"},"source":{"2a99f6bf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04878b40":"import torch\nimport torchvision\nfrom torchvision import models\nfrom torch.utils.data import DataLoader\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nimport tarfile\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nfrom sklearn.model_selection import train_test_split\n\nimport albumentations as A\n\nfrom albumentations.pytorch import ToTensorV2\n\nfrom tqdm.notebook import tqdm\n\nimport warnings\nwarnings.filterwarnings('ignore')","faa77011":"!pip install albumentations==0.4.6","249c43db":"root_dir = '..\/input\/a-large-scale-fish-dataset\/Fish_Dataset\/Fish_Dataset'\npath = Path(root_dir)\npath_images = list(path.glob('**\/*.png'))\n\nimages_paths = [str(path_image) for path_image in path_images if 'GT' not in str(path_image)]\nprint(f'Number of training images :{len(images_paths)}')\n\nlabels = [os.path.split(os.path.split(name)[0])[1] for name in images_paths]\nprint(f'Number of labels :{len(labels)}')","1bb6fb7a":"classes = list(set(labels))\nlabels_dict = {label : i for i,label in enumerate(classes)}\nlabels_val = [labels_dict[label_key] for label_key in labels]","3d87d006":"print(\"No. of classes:\", len(classes))\nprint(\"Various Classes:\", classes)","93e8f080":"random_seed = 42\ntorch.manual_seed(random_seed);","403d425d":"#Splitting test data from the whole dataset\ndata, test_data, labels, test_labels = train_test_split(images_paths, labels_val, test_size=0.15, shuffle=True)\n#Splitting train data and validation data\ntrain_data, val_data, train_labels, val_labels = train_test_split(data, labels, test_size=0.1, shuffle=True)","7c2c22d6":"class FishDataset(torch.utils.data.Dataset):\n    def __init__(self, images: list, labels: list, transform=None):\n        super().__init__()\n        self.images = images\n        self.labels = labels\n        self.transform = transform\n\n    def __len__(self, ):\n        return len(self.labels)\n\n    def __getitem__(self, index):\n        input_image = self.images[index]\n        label = self.labels[index]\n        image = np.array(Image.open(input_image).convert(\"RGB\"))\n\n        if self.transform is not None:\n            augmentations = self.transform(image=image)\n            image = augmentations[\"image\"]\n\n        return image, label","3d10d34b":"train_transforms = A.Compose(\n    [\n        A.Resize(height=160, width=240),\n        A.Rotate(limit=35, p=1.0),\n        A.HorizontalFlip(p=0.5),\n        A.VerticalFlip(p=0.1),\n        A.Normalize(\n            mean=[0.0, 0.0, 0.0],\n            std=[1.0, 1.0, 1.0],\n            max_pixel_value=255.0,\n        ),\n        ToTensorV2(),\n    ],\n)\n\nval_transforms = A.Compose(\n    [\n        A.Resize(height=160, width=240),\n        A.Normalize(\n            mean=[0.0, 0.0, 0.0],\n            std=[1.0, 1.0, 1.0],\n            max_pixel_value=255.0,\n        ),\n        ToTensorV2(),\n    ],\n)","cc035490":"train_ds = FishDataset(images=train_data,labels=train_labels,transform=train_transforms)\n\nval_ds = FishDataset(images=val_data,labels=val_labels,transform=val_transforms)\n\ntest_ds = FishDataset(images=test_data,labels=test_labels,transform=val_transforms)","868a3c6b":"BATCH_SIZE = 128\n\ntrain_loader = DataLoader(train_ds,batch_size=BATCH_SIZE,num_workers=4,pin_memory=True,shuffle=True)   \n\nval_loader = DataLoader(val_ds,batch_size=BATCH_SIZE,num_workers=4,pin_memory=True)\n\ntest_loader = DataLoader(test_ds,batch_size=BATCH_SIZE,num_workers=4,pin_memory=True)","e37bc8c6":"class FishModel(nn.Module):\n    \n    def __init__(self, num_classes, pretrained=True):\n        super().__init__()\n        self.network = models.resnet34(pretrained=pretrained)\n        self.network.fc = nn.Linear(self.network.fc.in_features, num_classes)\n\n    def forward(self, xb):\n        return self.network(xb)\n\n    def training_step(self, batch):\n        images, labels = batch\n        out = self(images)                  # Generate predictions\n        loss = F.cross_entropy(out, labels)  # Calculate loss\n        return loss\n\n    def validation_step(self, batch):\n        images, labels = batch\n        out = self(images)                    # Generate predictions\n        loss = F.cross_entropy(out, labels)   # Calculate loss\n        acc = accuracy(out, labels)           # Calculate accuracy\n        return {'val_loss': loss.detach(), 'val_acc': acc}\n\n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_accs = [x['val_acc'] for x in outputs]\n        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}\n\n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}],{} train_loss: {}, val_loss: {}, val_acc: {}\".format(\n            epoch, \"last_lr: {:.5f},\".format(result['lrs'][-1]) if 'lrs' in result else '', \n            result['train_loss'], result['val_loss'], result['val_acc']))\n\n","e0ff04e8":"def accuracy(outputs, labels):\n        _, preds = torch.max(outputs, dim=1)\n        return torch.tensor(torch.sum(preds == labels).item() \/ len(preds))","800d8d54":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader,\n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n\n    # Set up custom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, steps_per_epoch=len(train_loader))\n\n    for epoch in range(epochs):\n        # Training Phase\n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n\n            # Gradient clipping\n            if grad_clip:\n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n\n            optimizer.step()\n            optimizer.zero_grad()\n\n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","7cca5ac9":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n\n\ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list, tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n\n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl:\n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)\n","2309b41a":"device = get_default_device()\ndevice","36ade3ff":"train_dl = DeviceDataLoader(train_loader, device)\nvalid_dl = DeviceDataLoader(val_loader, device)","e04614f2":"model = FishModel(len(classes))\nto_device(model, device);","35938968":"history = [evaluate(model, valid_dl)]\nhistory","656e6881":"epochs = 6\nmax_lr = 0.01\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","48e78fba":"%%time\nhistory += fit_one_cycle(epochs, max_lr, model, train_dl, valid_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","746c6f4d":"def eval_accuracy(loader):  \n    model.eval()\n    corrects = 0\n    total = 0\n    for images, labels in loader:\n        images, labels = to_device(images, device), to_device(labels, device)\n        predictions = model(images)\n        predict = to_device(torch.max(predictions.data, 1)[1], device)\n        total += len(labels)\n        corrects += (predict == labels).sum()\n    accuracy = 100 * corrects \/ float(total)\n    return accuracy","3642ab20":"test_acc = eval_accuracy(test_loader)\nprint(f' Accuracy on test images: {test_acc}')","673537c6":"def predict_image(image):\n    xb = to_device(image.unsqueeze(0), device)\n    yb = model(xb)\n    _, preds  = torch.max(yb, dim=1)\n    return classes[preds[0].item()]","188e9dfc":"img, label = test_ds[100]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', classes[label], ', Predicted:', predict_image(img))\n","1cd0ab06":"img, label = test_ds[500]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', classes[label], ', Predicted:', predict_image(img))","f1631873":"img, label = test_ds[800]\nplt.imshow(img.permute(1, 2, 0))\nprint('Label:', classes[label], ', Predicted:', predict_image(img))","6e0a2529":"def plot_losses(history):\n    losses = [x['val_loss'] for x in history]\n    plt.plot(losses, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.title('Loss vs. No. of epochs');\n\ndef plot_accuracies(history):\n    accuracies = [x['val_acc'] for x in history]\n    plt.plot(accuracies, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('accuracy')\n    plt.title('Accuracy vs. No. of epochs');","40f311b6":"plot_losses(history)","c1a79902":"plot_accuracies(history)","d187fad7":"print(\"We used a RESNET34 model to predict and classify fish images and achieved a test accuracy of {:.2f}%.\".format(test_acc))\n\n","f8bbb16c":"# Data Cleaning\n#### We will first try to separate the images from the GT images in the folders for each class and use their titles to create our labels.","045e9300":"#### To check the availability of the GPU","8089ac9d":"# Imports and downloads","cc6b8b3a":"# Model Training\n#### Mentioning some hyperparameters before calling the fit_one_cycle() function.","e4ac9525":"##### **I will be training a ResNet34 model on the Fish Dataset using Pytorch. This notebook is in an explanatory form so it will be easy for everyone to understand.**","29922cf2":"# Training on GPU","a34ea053":"#### We will now create a `FishModel()` class which will import the pretrained model for us and create a working model for our dataset. It also has a bunch of helper functions.","7bd65b5e":"#### The class `FishDataset()` below will be useful in creating the datasets further down the line.","cb83bdae":"#### Let us split the data first...","3367b197":"#### Here I created more helper functions which will be useful in fitting the data to the model and then evaluating the model performance afterwards. The `fit_one_cycle()` function takes in the number of epochs, our model, our dataloaders and optimization functions.","e79be120":"#### Lets see the number of classes and what they are.","02493bf1":"#### After loading the data on the GPU we will send our model on the GPU after instantiating it from our `FishModel()` class. The `len(classes)` is the number of classes which will generate a linear layer for 9 classes at the end of our pretrained model.","d9e27e90":"#### We will now check for the accuracy and losses by the model without any training.","34eafafa":"#### Testing some random images individually.","f996bafb":"#### The function `predict_image()` takes in test images, sends it to the device (i.e. GPU) and let our model predict it. This will generate a list of probabilities for each class and the function returns the class with the highest probability.","b77a34ca":"#### We can try to further improve this by changing the batch size, using a different optimization algorithm, increasing the number of epochs and\/or using different pretrained model such as RESNET50.","6e35306d":"# Creating Our Model","d8a1429e":"#### We will convert these datasets into dataloaders which will pass image samples in \u201cminibatches\" and reshuffle the data at every epoch to reduce model overfitting.","03f6615a":"#### Now, as the GPU is available, we will move the data on it.","60031f12":"#### Using albumentations to perform some image manipulations to make our model generalize better. We will use these transforms later while making the datasets.","7e510ed1":"#### The labels must be converted into numbers to make it easier to work with for our model.","855bf71d":"# Model Testing","26e09db6":"#### Now that our model is trained we will start with the testing and evaluation of our model.","2ace7c94":"#  So how well did our model perform?","7850732e":"#### Begin training...","edd4b7f5":"#### We will now check the availability of GPU and if available move the data and the model on it. These functions will be useful in doing so.","2db341bf":"#### The train, test and validation datasets can be created as shown below.","945f8849":"# Generating Train, Test and Validation Datasets"}}