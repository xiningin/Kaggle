{"cell_type":{"29b77fc5":"code","f27e7b3b":"code","dba52b7e":"code","aada74c1":"code","a8f7ebe2":"code","2da22703":"code","0124fc3d":"code","1539c48e":"code","3c7848f0":"code","cb1b1715":"code","0f354a89":"code","02fbb8d6":"code","95f6674f":"code","d2a8332a":"code","08da8cdb":"code","b2d1209f":"code","fbf3aee0":"code","21d19eac":"code","70bc0182":"code","857388d8":"code","b3047186":"code","d4d32d42":"code","b9f5b056":"code","1f3a141b":"code","558c39d5":"code","45e85ef3":"markdown","14a9a70d":"markdown","ebdce87d":"markdown"},"source":{"29b77fc5":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn-poster')\n%matplotlib inline\n\nfrom wordcloud import WordCloud\n\nimport nltk\nfrom nltk.stem import WordNetLemmatizer\n# nltk.download('stopwords')\nfrom nltk.corpus import stopwords\n\nfrom geopy.geocoders import Nominatim\nfrom folium.plugins import HeatMap\nimport folium\n\nimport os\n\nimport warnings\nwarnings.filterwarnings('ignore') ","f27e7b3b":"from IPython.display import HTML\n\nHTML('''<script>\ncode_show=true; \nfunction code_toggle() {\n if (code_show){\n $('div.input').hide();\n } else {\n $('div.input').show();\n }\n code_show = !code_show\n} \n$( document ).ready(code_toggle);\n<\/script>\n<form action=\"javascript:code_toggle()\"><input type=\"submit\" value=\"Click here to toggle on\/off the raw code.\"><\/form>''')","dba52b7e":"PATH_TO_DATA = '..\/input'","aada74c1":"df = pd.read_csv(os.path.join(PATH_TO_DATA, 'zomato.csv'))\ndf = df.drop(['url', 'address', 'phone', 'menu_item'], 1)","a8f7ebe2":"cloud = WordCloud(background_color='white',\n                            max_font_size=400,\n                            width=1500,\n                            height=700,\n                            max_words=50,\n                            stopwords = stopwords.words('english')\n                            ).generate(' '.join(df.name))\n\nplt.figure(figsize=(15,7))\nplt.axis('off')\nplt.imshow(cloud, interpolation=\"bilinear\")\nplt.title('Biryani is the most popular ethnic dish in Bangalore (judging by name)\\n', size=21)\nplt.show()","2da22703":"plt.figure(figsize=(15,9))\nnames_of_restaurants = df.name.value_counts()[:20]\nsns.barplot(x=names_of_restaurants,\n            y=names_of_restaurants.index, \n            palette='Blues_d')\nplt.title(\"Italian, Indian, American and Chinese food are the most popular (judging by name)\")\nplt.xlabel(\"Number of outlets\")\nplt.show()","0124fc3d":"df = df.dropna(subset=['cuisines'])\n\ncloud = WordCloud(background_color='white',\n                            max_font_size=400,\n                            width=1500,\n                            height=700,\n                            max_words=50,\n                            stopwords = stopwords.words('english')\n                            ).generate(' '.join(df.cuisines))\n\nplt.figure(figsize=(15,7))\nplt.axis('off')\nplt.imshow(cloud, interpolation=\"bilinear\")\nplt.title('Indian and Chinese food are the most popular (judging by cuisines)\\n')\nplt.show()","1539c48e":"df.rate = df.rate.str.replace('\/5$', '')\ndf.rate = df.rate.replace('NEW', np.nan)\ndf.rate = df.rate.replace('-', np.nan)\ndf = df.dropna(subset=['rate'])\ndf.rate = df.rate.astype('float')\ndf = df.dropna(subset=['rest_type'])","3c7848f0":"plt.figure(figsize=(15,9))\ntype_of_restaurants = df.rest_type.value_counts()[:10]\nsns.barplot(x=type_of_restaurants,\n            y=type_of_restaurants.index, \n            palette='Blues_d')\nplt.title(\"Fast food is the most popular type of restaurants in Bangalore\")\nplt.xlabel(\"Number of restaurants\")\nplt.show()","cb1b1715":"df.dish_liked = df.dish_liked.fillna('Uknown')\n\ncloud = WordCloud(background_color='white',\n                            max_font_size=400,\n                            width=1500,\n                            height=700,\n                            max_words=50,\n                            stopwords = stopwords.words('english')\n                            ).generate(' '.join(df.dish_liked[df.dish_liked != 'Uknown']))\n\nplt.figure(figsize=(15,7))\nplt.axis('off')\nplt.imshow(cloud, interpolation=\"bilinear\")\nplt.title('The most popular dish is a chicken in various states of aggregation (dish_liked)\\n')\nplt.show()","0f354a89":"df = df.rename(columns={'approx_cost(for two people)': 'approx_cost_for_two_people',\n                        'listed_in(type)': 'listed_in_type',\n                        'listed_in(city)': 'listed_in_city'})\ndf = df.dropna(subset=['approx_cost_for_two_people'])\ndf.approx_cost_for_two_people = df.approx_cost_for_two_people.str.replace(',', '')\ndf.approx_cost_for_two_people = df.approx_cost_for_two_people.astype('float')","02fbb8d6":"df['cleantext'] = df.reviews_list.str.lower()\ndf.cleantext = df.cleantext.str.replace('[-_]', ' ')\ndf.cleantext = df.cleantext.str.replace('[^a-z ]+', '')\n\nmorph = WordNetLemmatizer()\ndef text_normalization(input_text):\n    return ' '.join([morph.lemmatize(item) for item in input_text.split(' ')])\ndf.cleantext = df.cleantext.apply(text_normalization)\n\nstop_words = set(stopwords.words('english'))\ndef remove_stops(input_text):\n        return ' '.join([w for w in input_text.split() if not w in stop_words])\ndf.cleantext = df.cleantext.apply(remove_stops)\ndf.cleantext = df.cleantext.str.replace('rated ratedn ', '')\ndf.cleantext = df.cleantext.str.replace('wa', '')\n\ndf.reviews_list = df.pop('cleantext')","95f6674f":"cloud = WordCloud(background_color='white',\n                            max_font_size=400,\n                            width=1500,\n                            height=700,\n                            max_words=50,\n                            stopwords = stopwords.words('english')\n                            ).generate(' '.join(df.reviews_list[df.rate < np.quantile(df.rate, q=0.01)]))\n\nplt.figure(figsize=(15,7))\nplt.axis('off')\nplt.imshow(cloud, interpolation=\"bilinear\")\nplt.title('The main problem is service (reviews from 1% of the worst places)\\n')\nplt.show()","d2a8332a":"g = sns.catplot(y=\"listed_in_type\",x=\"rate\",data=df, kind=\"point\", height = 10, )\nplt.title('Deliveries have the lowest rate',size = 20)\nplt.show()","08da8cdb":"cloud = WordCloud(background_color='white',\n                            max_font_size=400,\n                            width=1500,\n                            height=700,\n                            max_words=50,\n                            stopwords = stopwords.words('english')\n                            ).generate(' '.join(df.reviews_list[df.rate > np.quantile(df.rate, q=0.99)]))\n\nplt.figure(figsize=(15,7))\nplt.axis('off')\nplt.imshow(cloud, interpolation=\"bilinear\")\nplt.title('Reviews from 1% of the best places: Non veg\\n')\nplt.show()","b2d1209f":"cuisines = []\nrate = []\nfor i in range(len(df.cuisines)):\n    n = df.cuisines.values[i].split(',')\n    cuisines.extend(n)\n    rate.extend(len(n)*[df.rate.values[i]])\ndf_cuisines_rate = pd.DataFrame({'cuisines': cuisines, \n                                 'rate': rate})\ndf_cuisines_rate.cuisines = df_cuisines_rate.cuisines.str.replace('^ ', '')\ndf_cuisines_rate_top = df_cuisines_rate[df_cuisines_rate.cuisines.isin\\\n                                        (df_cuisines_rate.cuisines.value_counts().index[0:10])]","fbf3aee0":"g = sns.catplot(y=\"cuisines\",x=\"rate\",data=df_cuisines_rate_top, kind=\"point\", height = 10, )\nplt.title('Italian and Continental food have the highest rate (among top 10 mass ones)',size = 20)\nplt.show()","21d19eac":"location_biryani = df.location[df.cuisines.str.contains('Biryani')]\nlocation_continental = df.location[df.cuisines.str.contains('Continental')]","70bc0182":"geo_codes_biryani = pd.DataFrame({'name': location_biryani.value_counts().index,\n                                  'num_of_outlets': location_biryani.value_counts().values}) \ngeo_codes_biryani.name = 'Bangalore '+geo_codes_biryani.name\ngeo_codes_biryani['Location'] = geo_codes_biryani.name.apply(lambda x: Nominatim(user_agent=\"app\").geocode(x))\ngeo_codes_biryani['lat'] = geo_codes_biryani.Location[-geo_codes_biryani.Location.isna()].apply(lambda x: x[-1][0])\ngeo_codes_biryani['lon'] = geo_codes_biryani.Location[-geo_codes_biryani.Location.isna()].apply(lambda x: x[-1][1])\ngeo_codes_biryani = geo_codes_biryani.dropna()\n\nmap_bangalore = folium.Map(location=[12.97, 77.59], control_scale=True, zoom_start=11)\n\nHeatMap(geo_codes_biryani[['lat','lon','num_of_outlets']].values.tolist(), radius=14).add_to(map_bangalore)","857388d8":"map_bangalore","b3047186":"geo_codes_continental = pd.DataFrame({'name': location_continental.value_counts().index,\n                                  'num_of_outlets': location_continental.value_counts().values}) \ngeo_codes_continental.name = 'Bangalore '+geo_codes_continental.name\ngeo_codes_continental['Location'] = geo_codes_continental.name.\\\napply(lambda x: Nominatim(user_agent=\"app\").geocode(x))\ngeo_codes_continental['lat'] = geo_codes_continental.\\\nLocation[-geo_codes_continental.Location.isna()].apply(lambda x: x[-1][0])\ngeo_codes_continental['lon'] = geo_codes_continental.\\\nLocation[-geo_codes_continental.Location.isna()].apply(lambda x: x[-1][1])\ngeo_codes_continental = geo_codes_continental.dropna()\n\nHeatMap(geo_codes_continental[['lat','lon','num_of_outlets']].values.tolist(),\n        radius=14).add_to(map_bangalore)","d4d32d42":"map_bangalore","b9f5b056":"cuisines = []\ncost = []\nfor i in range(len(df.cuisines)):\n    n = df.cuisines.values[i].split(',')\n    cuisines.extend(n)\n    cost.extend(len(n)*[df.approx_cost_for_two_people.values[i]])\ndf_cuisines_cost = pd.DataFrame({'cuisines': cuisines, \n                                 'cost': cost})\ndf_cuisines_cost.cuisines = df_cuisines_cost.cuisines.str.replace('^ ', '')\ndf_cuisines_cost_top = df_cuisines_cost[df_cuisines_cost.cuisines.isin\\\n                                        (df_cuisines_cost.cuisines.value_counts().index[0:10])]","1f3a141b":"g = sns.catplot(y=\"cuisines\",x=\"cost\",\n                data=df_cuisines_cost_top, kind=\"point\", height = 10, )\nplt.title('Italian and Continental are the most expensive cuisines (among top 10 mass ones)',size = 20)\nplt.show()","558c39d5":"plt.figure(figsize=[15, 9])\nplt.plot(df.rate, df.approx_cost_for_two_people, '.')\nplt.plot(df.rate, len(df.rate)*[df.approx_cost_for_two_people.median()], label='median cost')\nplt.plot(len(df.rate)*[df.rate.median()], df.approx_cost_for_two_people, label='median rate')\nplt.legend(title_fontsize=18)\nplt.xlabel('rate')\nplt.ylabel('approx_cost_for_two_people')\nplt.title('Very expencive doesn`t always mean very good')\nplt.show()","45e85ef3":"## Biryani is more in the south","14a9a70d":"# Some casual facts about Bangalore Rests (notices)","ebdce87d":"## Continental food is more in the center"}}