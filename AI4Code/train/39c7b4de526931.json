{"cell_type":{"d5359c00":"code","d85a0c3a":"code","8a5a2536":"code","bc2c8d08":"code","4290414d":"code","9893ef48":"code","1c442ab0":"code","62195ee3":"code","d9449334":"code","6516ee11":"code","b1485217":"code","119a571e":"code","d3783490":"code","a0370200":"code","de81ac79":"code","9476fe2a":"code","92c3166b":"code","2eac0fb2":"code","9444c457":"code","1e557a8c":"code","12006670":"code","7b2c6cc8":"code","28b01585":"code","201e736f":"code","25387915":"code","a33275c4":"code","920c3741":"code","bf0ae21e":"code","36751058":"code","52eee1d2":"code","9494ddfd":"code","cce5e4aa":"code","8b121050":"code","d2ff9c3a":"code","88a30378":"code","9e906356":"code","1915f677":"code","ca373f7a":"code","c90adf82":"code","54063813":"code","68ba628f":"code","37f70e76":"code","0d96215b":"code","e5be9046":"code","3fdb96c8":"code","8353386e":"code","1634fba4":"code","355cb31c":"code","3f2c9b2c":"code","ef383e42":"markdown","c06b054b":"markdown","bc196d5b":"markdown","9cba7e00":"markdown","f0f3288c":"markdown","7a652c53":"markdown","ac0c5769":"markdown","73a0ccad":"markdown","3400ef2c":"markdown","95e26c69":"markdown","6307f922":"markdown","9b0c8c81":"markdown","1ce721d6":"markdown","404b5c9f":"markdown","91e263ec":"markdown","92212d3e":"markdown","52ef50d0":"markdown","b41c8f41":"markdown","e79546ae":"markdown","1fc1f4fc":"markdown","e1bc826b":"markdown","8797a6c4":"markdown","a0242289":"markdown","87d9ac3f":"markdown","715610b6":"markdown","c7f89192":"markdown","b75f3315":"markdown","34b20f6c":"markdown","4495caae":"markdown","64f61d9e":"markdown","9e71b01a":"markdown","57c2d408":"markdown","475f1df4":"markdown","c3e75749":"markdown","6dcee3ae":"markdown","351e7e99":"markdown","3c4a389f":"markdown","6f24cfda":"markdown","4c519bbc":"markdown"},"source":{"d5359c00":"# Replace 'kaggle-competitions-project' with YOUR OWN project id here --  \nPROJECT_ID = 'kaggle-bq-geotag' #\n#PROJECT_ID='kaggle-competitions-project'\n\nfrom google.cloud import bigquery\nclient = bigquery.Client(project=PROJECT_ID, location=\"US\")\ndataset = client.create_dataset('bqml_example', exists_ok=True)\n\nfrom google.cloud.bigquery import magics\nfrom kaggle.gcp import KaggleKernelCredentials\nmagics.context.credentials = KaggleKernelCredentials()\nmagics.context.project = PROJECT_ID\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# create a reference to our table\ntable = client.get_table(\"kaggle-competition-datasets.geotab_intersection_congestion.train\")\n\n# look at five rows from our dataset\nclient.list_rows(table, max_results=5).to_dataframe()","d85a0c3a":"%load_ext google.cloud.bigquery","8a5a2536":"## Example to estimate quota usage\n\n# https:\/\/stackoverflow.com\/questions\/47172150\/google-cloud-bigquery-python-how-to-get-the-bytes-processed-by-query\n\nsql = \"\"\"\n    SELECT t.city AS city\n      FROM `kaggle-competition-datasets.geotab_intersection_congestion.train` t\n      LIMIT 20\"\"\"\n\njob_config = bigquery.QueryJobConfig()\njob_config.dry_run = True\n\nquery_job = client.query(sql, job_config)\n\nprint (\"This query will process: {0:.2f} MB\".format(\n    query_job.total_bytes_processed\/1024\/1024))\n\n\nquery_job = client.query(sql)\nquery_job.result()\nprint (\"Total bytes processed (first execution): {0:.2f} MB\".format(\n    query_job.total_bytes_processed\/1024\/1024))\n\n\nquery_job = client.query(sql)\nquery_job.result()\nprint (\"Total bytes processed (cached): {0:.2f} MB\".format(\n    query_job.total_bytes_processed\/1024\/1024))","bc2c8d08":"def run_sql(sql, dry=False):\n    if dry:\n        job_config = bigquery.QueryJobConfig()\n        job_config.dry_run = dry\n        query_job = client.query(sql, job_config)\n        print (\"This query will process: {0:.2f} MB\".format(query_job.total_bytes_processed\/1024\/1024))\n    else: \n        query_job = client.query(sql)\n        query_job.result()\n        print (\"Total bytes processed (cached): {0:.2f} MB\".format(query_job.total_bytes_processed\/1024\/1024))\n        ","4290414d":"# for documentation set model_changed here globaly, for development set later in the appropriate cells\nmodel_changed = False","9893ef48":"mod_names= ['TotalTimeStopped_p20','TotalTimeStopped_p50','TotalTimeStopped_p80',\n            'DistanceToFirstStop_p20','DistanceToFirstStop_p50','DistanceToFirstStop_p80']\n\n# general model will look like [x+'_general' for x in mod_names]\n","1c442ab0":"%%bigquery city_df --verbose\nSELECT t.city\n  FROM `kaggle-competition-datasets.geotab_intersection_congestion.test` t\nUNION DISTINCT\nSELECT t.city\n  FROM `kaggle-competition-datasets.geotab_intersection_congestion.train` t\n","62195ee3":"cities = list(city_df['city'])\ncities","d9449334":"# model_changed = False\n\nif model_changed:\n    for c in cities:\n        sql=\"\"\"DROP MODEL `bqml_example.model_cluster_\"\"\"+c+\"\"\"`\"\"\"\n        client.query(sql)\n\n        print('Dropped',c)\n    \n    \nfor c in cities:\n    sql=\"\"\"CREATE MODEL IF NOT EXISTS `bqml_example.model_cluster_\"\"\"+c+\"\"\"`\n    OPTIONS(model_type='kmeans',\n            NUM_CLUSTERS = 20) AS\n    SELECT\n        latitude,\n        longitude\n    FROM\n      `kaggle-competition-datasets.geotab_intersection_congestion.train` t\n    WHERE city = '\"\"\"+c+\"\"\"'\n    UNION DISTINCT\n    SELECT\n        latitude,\n        longitude\n    FROM\n      `kaggle-competition-datasets.geotab_intersection_congestion.test` t\n    WHERE city = '\"\"\"+c+\"\"\"'\"\"\"\n\n    client.query(sql).result()\n\n    print('Done with',c)","6516ee11":"sql=\"\"\n\nfor c in cities:\n    sql+= \"\"\"\n        SELECT\n          city,\n          intersectionid,\n          CONCAT(city,\"_\", CAST(MAX(CASE WHEN rk = 1 THEN centroid_id END) AS string)) city_cluster_1,\n          CONCAT(city,\"_\", CAST(MAX(CASE WHEN rk = 2 THEN centroid_id END) AS string)) city_cluster_2,\n          CONCAT(city,\"_\", CAST(MAX(CASE WHEN rk = 3 THEN centroid_id END) AS string)) city_cluster_3,\n          CONCAT(city,\"_\", CAST(MAX(CASE WHEN rk = 4 THEN centroid_id END) AS string)) city_cluster_4,\n          CONCAT(city,\"_\", CAST(MAX(CASE WHEN rk = 5 THEN centroid_id END) AS string)) city_cluster_5,\n          MAX(CASE WHEN rk = 1 THEN distance END) dist_to_cluster_center_1,\n          MAX(CASE WHEN rk = 2 THEN distance END) dist_to_cluster_center_2,\n          MAX(CASE WHEN rk = 3 THEN distance END) dist_to_cluster_center_3,\n          MAX(CASE WHEN rk = 4 THEN distance END) dist_to_cluster_center_4,\n          MAX(CASE WHEN rk = 5 THEN distance END) dist_to_cluster_center_5,\n          COUNT(DISTINCT CONCAT(city, CAST(intersectionid AS string))) OVER(PARTITION BY CONCAT(city,\"_\", CAST(MAX(CASE WHEN rk = 1 THEN centroid_id END) AS string))) intersections_per_cluster_1,\n          COUNT(DISTINCT CONCAT(city, CAST(intersectionid AS string))) OVER(PARTITION BY CONCAT(city,\"_\", CAST(MAX(CASE WHEN rk = 2 THEN centroid_id END) AS string))) intersections_per_cluster_2,\n          COUNT(DISTINCT CONCAT(city, CAST(intersectionid AS string))) OVER(PARTITION BY CONCAT(city,\"_\", CAST(MAX(CASE WHEN rk = 3 THEN centroid_id END) AS string))) intersections_per_cluster_3,\n          COUNT(DISTINCT CONCAT(city, CAST(intersectionid AS string))) OVER(PARTITION BY CONCAT(city,\"_\", CAST(MAX(CASE WHEN rk = 4 THEN centroid_id END) AS string))) intersections_per_cluster_4,\n          COUNT(DISTINCT CONCAT(city, CAST(intersectionid AS string))) OVER(PARTITION BY CONCAT(city,\"_\", CAST(MAX(CASE WHEN rk = 5 THEN centroid_id END) AS string))) intersections_per_cluster_5\n        FROM (\n          SELECT\n            b.*,\n            RANK()OVER(PARTITION BY intersectionid ORDER BY b.distance) rk,\n            a.* EXCEPT(centroid_id,\n              NEAREST_CENTROIDS_DISTANCE)\n          FROM\n            ML.PREDICT(MODEL `bqml_example.model_cluster_\"\"\"+c+\"\"\"`,\n              (\n              SELECT\n                longitude,\n                latitude,\n                intersectionid,\n                city\n              FROM\n                `kaggle-competition-datasets.geotab_intersection_congestion.train`\n              WHERE city = '\"\"\"+c+\"\"\"'\n              UNION DISTINCT\n              SELECT\n                longitude,\n                latitude,\n                intersectionid,\n                city\n              FROM\n                `kaggle-competition-datasets.geotab_intersection_congestion.test`\n              WHERE city = '\"\"\"+c+\"\"\"'))a\n          CROSS JOIN\n            UNNEST(NEAREST_CENTROIDS_DISTANCE)b)\n        GROUP BY\n          city,\n          intersectionid\n          \n        UNION ALL\"\"\"\n    \nsql = sql[:-len(\"UNION ALL\")]\n\n\nmodel_changed = False\n\nif model_changed:\n    sql=\"DROP TABLE IF EXISTS `bqml_example.city_cluster`\"\n    job_result=client.query(sql).result()\n\nsql = \"CREATE TABLE IF NOT EXISTS `bqml_example.city_cluster` as \" + sql\n\njob_result=client.query(sql).result()\nprint('Table CITY_CLUSTER created.')","b1485217":"def feature_sql(model_name, rowid_split, incl_rowid, tab): \n    \n    if incl_rowid:\n        rowid = \"t.RowId,\"\n    else:\n        rowid = \"\"\n    \n    if tab == 'test':\n        label = \"\"\n    elif model_name == 'ALL':\n        label = \"\"\"t.TotalTimeStopped_p20,\n                t.TotalTimeStopped_p50,\n                t.TotalTimeStopped_p80,\n                t.DistanceToFirstStop_p20,\n                t.DistanceToFirstStop_p50,\n                t.DistanceToFirstStop_p80,\"\"\"\n    else:\n        label = \"\"\"t.\"\"\"+model_name+\"\"\" as label,\"\"\"\n    \n    sql = \"\"\n    \n    for c in cities:\n        features = \"\"\"SELECT \"\"\"+label+\"\"\"\n                             \"\"\"+rowid+\"\"\"\n                             t.city,\n                             t.EntryHeading,\n                             t.ExitHeading,\n                             t.Hour,\n                             t.Weekend,\n                             t.Month,\n                             t.Latitude,\n                             t.Longitude,\n                             case \n                                 when t.entryheading = t.exitheading THEN\n                                  \"C\"\n                                 when (\"N\" in (t.entryheading, t.exitheading) and \"S\" in (t.entryheading, t.exitheading)) \n                                      OR \n                                      (\"E\" in (t.entryheading, t.exitheading) and \"W\" in (t.entryheading, t.exitheading)) \n                                      OR \n                                      (\"NE\" in (t.entryheading, t.exitheading) and \"SW\" in (t.entryheading, t.exitheading))  \n                                      OR \n                                      (\"SE\" in (t.entryheading, t.exitheading) and \"NW\" in (t.entryheading, t.exitheading)) \n                                 THEN\n                                  \"U\" \n                                 when (t.entryheading=\"N\" and t.exitheading = \"W\") \n                                      OR(t.entryheading=\"NW\" and t.exitheading = \"SW\") \n                                      OR(t.entryheading=\"W\" and t.exitheading = \"S\") \n                                      OR(t.entryheading=\"SW\" and t.exitheading = \"SE\") \n                                      OR(t.entryheading=\"S\" and t.exitheading = \"E\") \n                                      OR(t.entryheading=\"SE\" and t.exitheading = \"NE\") \n                                      OR(t.entryheading=\"E\" and t.exitheading = \"N\") \n                                      OR(t.entryheading=\"NE\" and t.exitheading = \"NW\") \n                                 THEN\n                                  \"L\" \n                                 when (t.entryheading=\"N\" and t.exitheading = \"E\") \n                                      OR(t.entryheading=\"NW\" and t.exitheading = \"NE\") \n                                      OR(t.entryheading=\"W\" and t.exitheading = \"N\") \n                                      OR(t.entryheading=\"SW\" and t.exitheading = \"NW\") \n                                      OR(t.entryheading=\"S\" and t.exitheading = \"W\") \n                                      OR(t.entryheading=\"SE\" and t.exitheading = \"SW\") \n                                      OR(t.entryheading=\"E\" and t.exitheading = \"S\") \n                                      OR(t.entryheading=\"NE\" and t.exitheading = \"SE\") \n                                 THEN\n                                  \"R\" \n                                 when (t.entryheading=\"N\" and t.exitheading = \"NW\") \n                                      OR(t.entryheading=\"NW\" and t.exitheading = \"W\") \n                                      OR(t.entryheading=\"W\" and t.exitheading = \"SW\") \n                                      OR(t.entryheading=\"SW\" and t.exitheading = \"S\") \n                                      OR(t.entryheading=\"S\" and t.exitheading = \"SE\") \n                                      OR(t.entryheading=\"SE\" and t.exitheading = \"E\") \n                                      OR(t.entryheading=\"E\" and t.exitheading = \"NE\") \n                                      OR(t.entryheading=\"NE\" and t.exitheading = \"N\") \n                                 THEN\n                                  \"CL\" \n                                 when (t.entryheading=\"N\" and t.exitheading = \"NE\") \n                                      OR(t.entryheading=\"NW\" and t.exitheading = \"N\") \n                                      OR(t.entryheading=\"W\" and t.exitheading = \"NW\") \n                                      OR(t.entryheading=\"SW\" and t.exitheading = \"W\") \n                                      OR(t.entryheading=\"S\" and t.exitheading = \"SW\") \n                                      OR(t.entryheading=\"SE\" and t.exitheading = \"S\") \n                                      OR(t.entryheading=\"E\" and t.exitheading = \"SE\") \n                                      OR(t.entryheading=\"NE\" and t.exitheading = \"E\") \n                                 THEN\n                                  \"CR\" \n                                 when (t.entryheading=\"N\" and t.exitheading = \"SW\") \n                                      OR(t.entryheading=\"NW\" and t.exitheading = \"S\") \n                                      OR(t.entryheading=\"W\" and t.exitheading = \"SE\") \n                                      OR(t.entryheading=\"SW\" and t.exitheading = \"E\") \n                                      OR(t.entryheading=\"S\" and t.exitheading = \"NE\") \n                                      OR(t.entryheading=\"SE\" and t.exitheading = \"N\") \n                                      OR(t.entryheading=\"E\" and t.exitheading = \"NW\") \n                                      OR(t.entryheading=\"NE\" and t.exitheading = \"W\") \n                                 THEN\n                                  \"UL\" \n                                 when (t.entryheading=\"N\" and t.exitheading = \"SE\") \n                                      OR(t.entryheading=\"NW\" and t.exitheading = \"E\") \n                                      OR(t.entryheading=\"W\" and t.exitheading = \"NE\") \n                                      OR(t.entryheading=\"SW\" and t.exitheading = \"N\") \n                                      OR(t.entryheading=\"S\" and t.exitheading = \"NW\") \n                                      OR(t.entryheading=\"SE\" and t.exitheading = \"W\") \n                                      OR(t.entryheading=\"E\" and t.exitheading = \"SW\") \n                                      OR(t.entryheading=\"NE\" and t.exitheading = \"S\") \n                                 THEN\n                                  \"UR\" \n                               else null end direction\n                       FROM `kaggle-competition-datasets.geotab_intersection_congestion.\"\"\"+tab+\"\"\"` t\n                      WHERE city = '\"\"\"+c+\"\"\"' \n                       AND rowid \"\"\"+rowid_split\n                            \n        sql += \"\"\"\n               SELECT (SELECT MIN(d.DISTANCE) FROM UNNEST(NEAREST_CENTROIDS_DISTANCE) d) AS dist_to_cluster_center, \n                      CONCAT(m.city,\"_\",CAST(m.CENTROID_ID AS STRING)) AS city_cluster,\n                      m.* EXCEPT (nearest_centroids_distance, CENTROID_ID,Latitude,Longitude) \n                 FROM ML.PREDICT(MODEL `bqml_example.model_cluster_\"\"\"+c+\"\"\"`, \n                              (\"\"\"+features+\"\"\")) m\n               UNION ALL\"\"\"\n        \n        \n    return sql[:-len(\"UNION ALL\")]","119a571e":"#model_changed = False\n\nif model_changed:\n    sql=\"DROP TABLE IF EXISTS `bqml_example.city_cluster_train`\"\n    job_result=client.query(sql).result()\n    sql=\"DROP TABLE IF EXISTS `bqml_example.city_cluster_test`\"\n    job_result=client.query(sql).result()\n\n    \nsql = \"CREATE TABLE IF NOT EXISTS `bqml_example.city_cluster_train` as \" + feature_sql('ALL','=rowid', True, 'train')\njob_result=client.query(sql).result()\nsql = \"CREATE TABLE IF NOT EXISTS `bqml_example.city_cluster_test` as \" + feature_sql('ALL','=rowid', True, 'test')\njob_result=client.query(sql).result()\n    \nprint('Done creating CITY_CLUSTER_TRAIN and CITY_CLUSTER_TEST')","d3783490":"%%bigquery\nCREATE TABLE IF NOT EXISTS\n  `bqml_example.zipcode_population` AS\nWITH\n\n  # population per zipcode\n\n  zip_info AS(\n  SELECT\n    SUM(pop.population) AS population,\n    zipcd.zipcode,\n    CASE zipcd.state_code\n      WHEN 'MA' THEN 'Boston'\n      WHEN 'IL' THEN 'Chicago'\n      WHEN 'GA' THEN 'Atlanta'\n      WHEN 'PA' THEN 'Philadelphia'\n  END\n    city,\n    zipcd.zipcode_geom\n  FROM\n    `bigquery-public-data.utility_us.zipcode_area` zipcd,\n    `bigquery-public-data.census_bureau_usa.population_by_zip_2010` pop\n  WHERE\n    zipcd.state_code IN ('MA',\n      'IL',\n      'PA',\n      'GA')\n    AND ( zipcd.city LIKE '%Atlanta%'\n      OR zipcd.city LIKE '%Boston%'\n      OR zipcd.city LIKE '%Chicago%'\n      OR zipcd.city LIKE '%Philadelphia%' )\n    AND SUBSTR(CONCAT('000000', pop.zipcode),-5) = zipcd.zipcode\n  GROUP BY\n    zipcd.zipcode,\n    CASE zipcd.state_code\n      WHEN 'MA' THEN 'Boston'\n      WHEN 'IL' THEN 'Chicago'\n      WHEN 'GA' THEN 'Atlanta'\n      WHEN 'PA' THEN 'Philadelphia'\n  END\n    ,\n    zipcd.zipcode_geom),\n  \n  # spatial test and train data\n  \n  train_and_test AS (\n  SELECT \n    t_all.intersectionId,\n    t_all.longitude,\n    t_all.latitude,\n    t_all.city,\n    count(1) num_observations\n  FROM (\n      SELECT\n        tr.intersectionId,\n        tr.longitude,\n        tr.latitude,\n        tr.city\n      FROM\n        `kaggle-competition-datasets.geotab_intersection_congestion.train` tr\n      UNION ALL\n      SELECT\n        ts.intersectionId,\n        ts.longitude,\n        ts.latitude,\n        ts.city\n      FROM\n        `kaggle-competition-datasets.geotab_intersection_congestion.test` ts\n      ) t_all\n  GROUP BY\n    t_all.intersectionId,\n    t_all.longitude,\n    t_all.latitude,\n    t_all.city\n  ),\n  \n  # Zipcode and Population per Intersection\n  \n  pop_per_intersection AS (\n  SELECT\n    t.intersectionId,\n    zi.population,\n    zi.zipcode,\n    t.city,\n    COUNT(DISTINCT t.intersectionId) OVER (PARTITION BY zi.zipcode) AS intersections_per_zipcode,\n    round(zi.population \/ COUNT(DISTINCT t.intersectionId) OVER (PARTITION BY zi.zipcode)) pop_intersec_ratio\n  FROM\n    train_and_test t,\n    zip_info zi\n  WHERE\n    t.city = zi.city\n    AND ST_CONTAINS( ST_GEOGFROMTEXT(zi.zipcode_geom),\n      ST_GeogPoint(longitude,\n        latitude)))\n  \n# fill empty zipcodes and population\n\nSELECT\n  t.city,\n  t.intersectionId,\n  coalesce(p.population,\n    round(AVG(p.population) OVER(PARTITION BY t.city))) AS population,\n  coalesce(p.zipcode, 'N\/A') AS zipcode,\n  coalesce(p.intersections_per_zipcode,\n    round(AVG(p.intersections_per_zipcode) OVER(PARTITION BY t.city))) AS intersections_per_zipcode,\n    coalesce(pop_intersec_ratio,round(AVG(p.pop_intersec_ratio) OVER(PARTITION BY t.city))) AS  pop_intersec_ratio,\n  CASE\n    WHEN p.zipcode IS NULL THEN 1\n  ELSE\n    0\n  END AS zip_code_na,\n  t.num_observations\nFROM\n  train_and_test t\nLEFT OUTER JOIN\n  pop_per_intersection p\nON\n  (t.city = p.city\n    AND t.intersectionId = p.intersectionId);\n","a0370200":"%%bigquery\n\ncreate table if not exists `bqml_example.approching_street`  as \n\nWITH\n  # entry and exit data per intersaction from train and test\n  tt AS (\n  SELECT\n    DISTINCT t.IntersectionId,\n    t.Longitude,\n    t.Latitude,\n    t.City,\n    t.ExitStreetName,\n    t.ExitHeading,\n    t.EntryStreetName,\n    t.EntryHeading\n  FROM\n    `kaggle-competition-datasets.geotab_intersection_congestion.train` t\n  UNION DISTINCT\n  SELECT\n    DISTINCT t.IntersectionId,\n    t.Longitude,\n    t.Latitude,\n    t.City,\n    t.ExitStreetName,\n    t.ExitHeading,\n    t.EntryStreetName,\n    t.EntryHeading\n  FROM\n    `kaggle-competition-datasets.geotab_intersection_congestion.test` t ),\n  # calculate all distances to intersection where exitheading and exitstreet are the same as the current intersections entry\n  # assuming the oncoming street follows the same direction\n  dist_to_t AS(\n  SELECT\n    t.*,\n    st_distance(ST_GEOGPOINT(t.longitude,\n        t.latitude),\n      ST_GEOGPOINT(t_from.longitude,\n        t_from.latitude))dist\n  FROM\n    tt AS t,\n    tt AS t_from\n  WHERE\n    t.city=t_from.city\n    AND t.entrystreetname = t_from.ExitStreetName\n    AND t.EntryHeading = t_from.ExitHeading\n    AND t.Longitude <> t_from.Longitude\n    AND t.Latitude <> t_from.Latitude)\n  # get length of street approching intersection\n  # assuming same direction\nSELECT\n  t.intersectionid,\n  t.city,\n  t.ExitStreetName,\n  t.ExitHeading,\n  t.EntryStreetName,\n  t.EntryHeading,\n  MIN(dist) app_st_length\nFROM\n  dist_to_t t\nGROUP BY\n  t.intersectionid,\n  t.city,\n  t.ExitStreetName,\n  t.ExitHeading,\n  t.EntryStreetName,\n  t.EntryHeading;","de81ac79":"%%bigquery\nWITH\n  # get train and test data\n  tt AS(\n  SELECT\n    DISTINCT t.intersectionid,\n    t.city,\n    t.ExitStreetName,\n    t.ExitHeading,\n    t.EntryStreetName,\n    t.EntryHeading\n  FROM\n    `kaggle-competition-datasets.geotab_intersection_congestion.train` t\n  UNION DISTINCT\n  SELECT\n    DISTINCT t.intersectionid,\n    t.city,\n    t.ExitStreetName,\n    t.ExitHeading,\n    t.EntryStreetName,\n    t.EntryHeading\n  FROM\n    `kaggle-competition-datasets.geotab_intersection_congestion.test` t ),\n  # gather deviation betweewn app_st_length and min\/avg values of app_st_length for several partitions\n  devs AS(\n  SELECT\n    #t.*,\n    #round(a.app_st_length, 1) as app_st_length,\n    ABS(ROUND(a.app_st_length, 1)-AVG(ROUND(a.app_st_length, 1) ) OVER (PARTITION BY t.city, t.EntryStreetName ))AS en_avg,\n    ABS(ROUND(a.app_st_length, 1)-MIN(ROUND(a.app_st_length, 1) ) OVER (PARTITION BY t.city, t.EntryStreetName ))AS en_min,\n    ABS(ROUND(a.app_st_length, 1)-AVG(ROUND(a.app_st_length, 1) ) OVER (PARTITION BY t.city, t.IntersectionId ))AS i_avg,\n    ABS(ROUND(a.app_st_length, 1)-MIN(ROUND(a.app_st_length, 1) ) OVER (PARTITION BY t.city, t.IntersectionId ))AS i_min,\n    ABS(ROUND(a.app_st_length, 1)-AVG(ROUND(a.app_st_length, 1) ) OVER (PARTITION BY t.city, t.ExitStreetName ))AS ex_avg,\n    ABS(ROUND(a.app_st_length, 1)- MIN(ROUND(a.app_st_length, 1) ) OVER (PARTITION BY t.city, t.ExitStreetName ))AS ex_min,\n    ABS(ROUND(a.app_st_length, 1)-AVG(ROUND(a.app_st_length, 1) ) OVER (PARTITION BY t.city ))AS c_avg,\n    ABS(ROUND(a.app_st_length, 1)-MIN(ROUND(a.app_st_length, 1) ) OVER (PARTITION BY t.city ))AS c_min\n  FROM\n    tt t\n  LEFT JOIN\n    `bqml_example.approching_street` a\n  ON\n    (t.intersectionid = a.intersectionid\n      AND t.city = a.city\n      AND t.ExitStreetName = a.ExitStreetName\n      AND t.ExitHeading = a.ExitHeading\n      AND t.EntryStreetName = a.EntryStreetName\n      AND t.EntryHeading = a.EntryHeading) )\n  # gather Stddev, Max and Mean for the deviations to decide which order the fallbacks to use\nSELECT\n  stddev(en_avg) stddev_en_avg,\n  stddev(en_min) stddev_en_min,\n  stddev(i_avg) stddev_i_avg,\n  stddev(i_min) stddev_i_min,\n  stddev(ex_avg) stddev_ex_avg,\n  stddev(ex_min) stddev_ex_min,\n  stddev(c_avg) stddev_c_avg,\n  stddev(c_min) stddev_c_min,\n  MIN(en_avg) MIN_en_avg,\n  MIN(en_min) MIN_en_min,\n  MIN(i_avg) MIN_i_avg,\n  MIN(i_min) MIN_i_min,\n  MIN(ex_avg) MIN_ex_avg,\n  MIN(ex_min) MIN_ex_min,\n  MIN(c_avg) MIN_c_avg,\n  MIN(c_min) MIN_c_min,\n  MAX(en_avg) MAX_en_avg,\n  MAX(en_min) MAX_en_min,\n  MAX(i_avg) MAX_i_avg,\n  MAX(i_min) MAX_i_min,\n  MAX(ex_avg) MAX_ex_avg,\n  MAX(ex_min) MAX_ex_min,\n  MAX(c_avg) MAX_c_avg,\n  MAX(c_min) MAX_c_min,\n  AVG(en_avg) AVG_en_avg,\n  AVG(en_min) AVG_en_min,\n  AVG(i_avg) AVG_i_avg,\n  AVG(i_min) AVG_i_min,\n  AVG(ex_avg) AVG_ex_avg,\n  AVG(ex_min) AVG_ex_min,\n  AVG(c_avg) AVG_c_avg,\n  AVG(c_min) AVG_c_min\nFROM\n  devs","9476fe2a":"%%bigquery\ncreate table if not exists `bqml_example.approching_street_imputed` as\n\n# Get stats to decide which app_st_length fallback to use\nWITH\n  # get train and test data\n  tt AS(\n  SELECT\n    DISTINCT t.intersectionid,\n    t.city,\n    t.ExitStreetName,\n    t.ExitHeading,\n    t.EntryStreetName,\n    t.EntryHeading\n  FROM\n    `kaggle-competition-datasets.geotab_intersection_congestion.train` t\n  UNION DISTINCT\n  SELECT\n    DISTINCT t.intersectionid,\n    t.city,\n    t.ExitStreetName,\n    t.ExitHeading,\n    t.EntryStreetName,\n    t.EntryHeading\n  FROM\n    `kaggle-competition-datasets.geotab_intersection_congestion.test` t )\n  # measures: app_st_length incl. fallbacks\nSELECT\n  t.intersectionid,\n  t.city,\n  t.ExitStreetName,\n  t.ExitHeading,\n  t.EntryStreetName,\n  t.EntryHeading,\n  ROUND(coalesce(a.app_st_length,\n      # fallback I_AVG\n      AVG(a.app_st_length) OVER (PARTITION BY t.city, t.IntersectionId),\n      # fallback EN_AVG\n      AVG(a.app_st_length) OVER (PARTITION BY t.city, t.EntryStreetName),\n      # fallback EX_AVG\n      AVG(a.app_st_length) OVER (PARTITION BY t.city, t.ExitStreetName),\n      # fallback C_AVG\n      AVG(a.app_st_length) OVER (PARTITION BY t.city)), 1) AS app_st_length,\n  CASE\n    WHEN a.app_st_length IS NULL THEN 1\n  ELSE\n  0\nEND\n  app_st_length_fallback\nFROM\n  tt t\nLEFT JOIN\n  `bqml_example.approching_street` a\nON\n  (t.intersectionid = a.intersectionid\n    AND t.city = a.city\n    AND t.ExitStreetName = a.ExitStreetName\n    AND t.ExitHeading = a.ExitHeading\n    AND t.EntryStreetName = a.EntryStreetName\n    AND t.EntryHeading = a.EntryHeading);","92c3166b":"%%bigquery\nCREATE OR REPLACE FUNCTION `bqml_example.direction`(entryheading string, exitheading string) \nAS (\n case \n   when entryheading = exitheading THEN\n    \"C\"\n   when (\"N\" in (entryheading, exitheading) and \"S\" in (entryheading, exitheading)) \n        OR \n        (\"E\" in (entryheading, exitheading) and \"W\" in (entryheading, exitheading)) \n        OR \n        (\"NE\" in (entryheading, exitheading) and \"SW\" in (entryheading, exitheading))  \n        OR \n        (\"SE\" in (entryheading, exitheading) and \"NW\" in (entryheading, exitheading)) \n   THEN\n    \"U\" \n   when (entryheading=\"N\" and exitheading = \"W\") \n        OR(entryheading=\"NW\" and exitheading = \"SW\") \n        OR(entryheading=\"W\" and exitheading = \"S\") \n        OR(entryheading=\"SW\" and exitheading = \"SE\") \n        OR(entryheading=\"S\" and exitheading = \"E\") \n        OR(entryheading=\"SE\" and exitheading = \"NE\") \n        OR(entryheading=\"E\" and exitheading = \"N\") \n        OR(entryheading=\"NE\" and exitheading = \"NW\") \n   THEN\n    \"L\" \n   when (entryheading=\"N\" and exitheading = \"E\") \n        OR(entryheading=\"NW\" and exitheading = \"NE\") \n        OR(entryheading=\"W\" and exitheading = \"N\") \n        OR(entryheading=\"SW\" and exitheading = \"NW\") \n        OR(entryheading=\"S\" and exitheading = \"W\") \n        OR(entryheading=\"SE\" and exitheading = \"SW\") \n        OR(entryheading=\"E\" and exitheading = \"S\") \n        OR(entryheading=\"NE\" and exitheading = \"SE\") \n   THEN\n    \"R\" \n   when (entryheading=\"N\" and exitheading = \"NW\") \n        OR(entryheading=\"NW\" and exitheading = \"W\") \n        OR(entryheading=\"W\" and exitheading = \"SW\") \n        OR(entryheading=\"SW\" and exitheading = \"S\") \n        OR(entryheading=\"S\" and exitheading = \"SE\") \n        OR(entryheading=\"SE\" and exitheading = \"E\") \n        OR(entryheading=\"E\" and exitheading = \"NE\") \n        OR(entryheading=\"NE\" and exitheading = \"N\") \n   THEN\n    \"CL\" \n   when (entryheading=\"N\" and exitheading = \"NE\") \n        OR(entryheading=\"NW\" and exitheading = \"N\") \n        OR(entryheading=\"W\" and exitheading = \"NW\") \n        OR(entryheading=\"SW\" and exitheading = \"W\") \n        OR(entryheading=\"S\" and exitheading = \"SW\") \n        OR(entryheading=\"SE\" and exitheading = \"S\") \n        OR(entryheading=\"E\" and exitheading = \"SE\") \n        OR(entryheading=\"NE\" and exitheading = \"E\") \n   THEN\n    \"CR\" \n   when (entryheading=\"N\" and exitheading = \"SW\") \n        OR(entryheading=\"NW\" and exitheading = \"S\") \n        OR(entryheading=\"W\" and exitheading = \"SE\") \n        OR(entryheading=\"SW\" and exitheading = \"E\") \n        OR(entryheading=\"S\" and exitheading = \"NE\") \n        OR(entryheading=\"SE\" and exitheading = \"N\") \n        OR(entryheading=\"E\" and exitheading = \"NW\") \n        OR(entryheading=\"NE\" and exitheading = \"W\") \n   THEN\n    \"UL\" \n   when (entryheading=\"N\" and exitheading = \"SE\") \n        OR(entryheading=\"NW\" and exitheading = \"E\") \n        OR(entryheading=\"W\" and exitheading = \"NE\") \n        OR(entryheading=\"SW\" and exitheading = \"N\") \n        OR(entryheading=\"S\" and exitheading = \"NW\") \n        OR(entryheading=\"SE\" and exitheading = \"W\") \n        OR(entryheading=\"E\" and exitheading = \"SW\") \n        OR(entryheading=\"NE\" and exitheading = \"S\") \n   THEN\n    \"UR\" \n   else null end\n);","2eac0fb2":"%%bigquery\nCREATE OR REPLACE FUNCTION `bqml_example.direction2degree`(dir string) AS (\n case dir\n   when \"C\" then\n    90\n   when 'CL' then\n    135\n   when \"L\" then\n    180\n   when 'UL' then\n    225\n   when \"U\" then\n    270\n   when 'UR' then\n    315\n   when \"R\" then\n    0\n   when 'CR' then\n    45\n    \n   when \"N\" then\n    90\n   when 'NW' then\n    135\n   when \"W\" then\n    180\n   when 'SW' then\n    225\n   when \"S\" then\n    270\n   when 'SE' then\n    315\n   when \"E\" then\n    0\n   when 'NE' then\n    45\n end\n);","9444c457":"%%bigquery\nCREATE OR REPLACE FUNCTION `bqml_example.road_encode`(road string) AS (\n case \n    when upper(road) like '%ROAD%' then 'ROAD'\n    when upper(road) like '%STREET%' then 'STREET'\n    when upper(road) like '%AVENUE%' then 'AVENUE'\n    when upper(road) like '%DRIVE%' then 'DRIVE'\n    when upper(road) like '%BROAD%' then 'BROAD'\n    when upper(road) like '%BOULEVARD%' then 'BOULEVARD'\n    else 'OTHERS'\n  end\n);\n","1e557a8c":"# model_changed = False\n\nsql=\"\"\"\nCREATE MODEL IF NOT EXISTS `bqml_example.model_adversarial`\n    OPTIONS(MODEL_TYPE='logistic_reg', labels= ['target']) AS\nSELECT * FROM\n(SELECT 0 as target,\n       concat(cc.city,cast(t.intersectionid as string)) i_id,\n       cc.city_cluster,\n       cc.city,\n       cc.hour,\n       cc.weekend,\n       cc.month,\n       cc.direction,\n       cc.entryheading,\n       cc.exitheading,\n       round(sin(bqml_example.direction2degree(cc.direction)*ACOS(-1)\/180),6) direction_sin,\n       round(cos(bqml_example.direction2degree(cc.direction)*ACOS(-1)\/180),6) direction_cos,\n       round(sin(bqml_example.direction2degree(cc.entryheading)*ACOS(-1)\/180),6) entryheading_sin,\n       round(cos(bqml_example.direction2degree(cc.entryheading)*ACOS(-1)\/180),6) entryheading_cos,\n       round(sin(bqml_example.direction2degree(cc.exitheading)*ACOS(-1)\/180),6) exitheading_sin,\n       round(cos(bqml_example.direction2degree(cc.exitheading)*ACOS(-1)\/180),6) exitheading_cos,\n       round(cc.dist_to_cluster_center,8) dist_to_cluster_center\n FROM `bqml_example.city_cluster_train` cc,\n      `kaggle-competition-datasets.geotab_intersection_congestion.train` t\nWHERE t.rowid = cc.rowid\nUNION ALL\nSELECT 1 as target,\n       concat(cc.city,cast(t.intersectionid as string)) i_id,\n       cc.city_cluster,\n       cc.city,\n       cc.hour,\n       cc.weekend,\n       cc.month,\n       cc.direction,\n       cc.entryheading,\n       cc.exitheading,\n       round(sin(bqml_example.direction2degree(cc.direction)*ACOS(-1)\/180),6) direction_sin,\n       round(cos(bqml_example.direction2degree(cc.direction)*ACOS(-1)\/180),6) direction_cos,\n       round(sin(bqml_example.direction2degree(cc.entryheading)*ACOS(-1)\/180),6) entryheading_sin,\n       round(cos(bqml_example.direction2degree(cc.entryheading)*ACOS(-1)\/180),6) entryheading_cos,\n       round(sin(bqml_example.direction2degree(cc.exitheading)*ACOS(-1)\/180),6) exitheading_sin,\n       round(cos(bqml_example.direction2degree(cc.exitheading)*ACOS(-1)\/180),6) exitheading_cos,\n       round(cc.dist_to_cluster_center,8) dist_to_cluster_center\n FROM `bqml_example.city_cluster_test` cc,\n      `kaggle-competition-datasets.geotab_intersection_congestion.test` t\nWHERE t.rowid = cc.rowid)\"\"\"\n\nif model_changed:\n    run_sql(sql)","12006670":"%%bigquery --verbose\nSELECT\n  *\nFROM\n  ML.TRAINING_INFO(MODEL `bqml_example.model_adversarial`)\nORDER BY iteration ","7b2c6cc8":"#model_changed = False\n\nsql=\"\"\"SELECT\n          *\n        FROM ML.EVALUATE(MODEL `bqml_example.model_adversarial`, (\n        (SELECT 0 as target,\n       concat(cc.city,cast(t.intersectionid as string)) i_id,\n       cc.city_cluster,\n       cc.city,\n       cc.hour,\n       cc.weekend,\n       cc.month,\n       cc.direction,\n       cc.entryheading,\n       cc.exitheading,\n       round(sin(bqml_example.direction2degree(cc.direction)*ACOS(-1)\/180),6) direction_sin,\n       round(cos(bqml_example.direction2degree(cc.direction)*ACOS(-1)\/180),6) direction_cos,\n       round(sin(bqml_example.direction2degree(cc.entryheading)*ACOS(-1)\/180),6) entryheading_sin,\n       round(cos(bqml_example.direction2degree(cc.entryheading)*ACOS(-1)\/180),6) entryheading_cos,\n       round(sin(bqml_example.direction2degree(cc.exitheading)*ACOS(-1)\/180),6) exitheading_sin,\n       round(cos(bqml_example.direction2degree(cc.exitheading)*ACOS(-1)\/180),6) exitheading_cos,\n       round(cc.dist_to_cluster_center,8) dist_to_cluster_center\n FROM `bqml_example.city_cluster_train` cc,\n      `kaggle-competition-datasets.geotab_intersection_congestion.train` t\nWHERE t.rowid = cc.rowid\nUNION ALL\nSELECT 1 as target,\n       concat(cc.city,cast(t.intersectionid as string)) i_id,\n       cc.city_cluster,\n       cc.city,\n       cc.hour,\n       cc.weekend,\n       cc.month,\n       cc.direction,\n       cc.entryheading,\n       cc.exitheading,\n       round(sin(bqml_example.direction2degree(cc.direction)*ACOS(-1)\/180),6) direction_sin,\n       round(cos(bqml_example.direction2degree(cc.direction)*ACOS(-1)\/180),6) direction_cos,\n       round(sin(bqml_example.direction2degree(cc.entryheading)*ACOS(-1)\/180),6) entryheading_sin,\n       round(cos(bqml_example.direction2degree(cc.entryheading)*ACOS(-1)\/180),6) entryheading_cos,\n       round(sin(bqml_example.direction2degree(cc.exitheading)*ACOS(-1)\/180),6) exitheading_sin,\n       round(cos(bqml_example.direction2degree(cc.exitheading)*ACOS(-1)\/180),6) exitheading_cos,\n       round(cc.dist_to_cluster_center,8) dist_to_cluster_center\n FROM `bqml_example.city_cluster_test` cc,\n      `kaggle-competition-datasets.geotab_intersection_congestion.test` t\nWHERE t.rowid = cc.rowid)\n        ))\"\"\"\n\nif model_changed:\n    client.query(sql).to_dataframe()","28b01585":"model_changed = False\n\nsql=\"\"\"\ncreate table if not exists `bqml_example.testalike_av` as\nSELECT\n          rowid,\n          (SELECT prob FROM UNNEST(predicted_target_probs) WHERE label=0 LIMIT 1) as prob_train,\n          (SELECT prob FROM UNNEST(predicted_target_probs) WHERE label=1 LIMIT 1) as prob_test\n        FROM ML.PREDICT(MODEL `bqml_example.model_adversarial`, (\n        (\nSELECT concat(cc.city,cast(t.intersectionid as string)) i_id,\n       cc.city_cluster,\n       cc.city,\n       cc.hour,\n       cc.weekend,\n       cc.month,\n       cc.direction,\n       cc.entryheading,\n       cc.exitheading,\n       round(sin(bqml_example.direction2degree(cc.direction)*ACOS(-1)\/180),6) direction_sin,\n       round(cos(bqml_example.direction2degree(cc.direction)*ACOS(-1)\/180),6) direction_cos,\n       round(sin(bqml_example.direction2degree(cc.entryheading)*ACOS(-1)\/180),6) entryheading_sin,\n       round(cos(bqml_example.direction2degree(cc.entryheading)*ACOS(-1)\/180),6) entryheading_cos,\n       round(sin(bqml_example.direction2degree(cc.exitheading)*ACOS(-1)\/180),6) exitheading_sin,\n       round(cos(bqml_example.direction2degree(cc.exitheading)*ACOS(-1)\/180),6) exitheading_cos,\n       round(cc.dist_to_cluster_center,8) dist_to_cluster_center,\n       t.rowid\n FROM `bqml_example.city_cluster_train` cc,\n      `kaggle-competition-datasets.geotab_intersection_congestion.train` t\nWHERE t.rowid = cc.rowid)\n        ))\"\"\"\n\nif model_changed:\n    run_sql(sql) #,dry=True)","201e736f":"%%bigquery df_av --verbose\nselect cc.city, cc.city_cluster, av.prob_test \n  from `bqml_example.testalike_av` av,\n       `bqml_example.city_cluster_train` cc\n where cc.rowid = av.rowid","25387915":"df_av.hist()","a33275c4":"df_av.hist(by='city')","920c3741":"df_av.describe()","bf0ae21e":"%%bigquery tts_q\nSELECT\nc.city_cluster_1,\ncount(1)cnt,\nmin(TotalTimeStopped_p20) tts20_min,\nmax(TotalTimeStopped_p20) tts20_max,\navg(TotalTimeStopped_p20) tts20_avg,\nstddev(TotalTimeStopped_p20) tts20_std,\nAPPROX_QUANTILES(TotalTimeStopped_p20,201)[SAFE_ORDINAL(200)] tts20_q99,\n\nmin(TotalTimeStopped_p50) tts50_min,\nmax(TotalTimeStopped_p50) tts50_max,\navg(TotalTimeStopped_p50) tts50_avg,\nstddev(TotalTimeStopped_p50) tts50_std,\nAPPROX_QUANTILES(TotalTimeStopped_p50,201)[SAFE_ORDINAL(200)] tts50_q99,\n\nmin(TotalTimeStopped_p80) tts80_min,\nmax(TotalTimeStopped_p80) tts80_max,\navg(TotalTimeStopped_p80) tts80_avg,\nstddev(TotalTimeStopped_p80) tts80_std,\nAPPROX_QUANTILES(TotalTimeStopped_p80,201)[SAFE_ORDINAL(200)] tts80_q99\n\nFROM\n  `kaggle-competition-datasets.geotab_intersection_congestion.train` t,\n  `bqml_example.city_cluster` c\nWHERE\n  c.city = c.city\n  AND t.intersectionid=t.intersectionid\nGROUP BY\n  c.city_cluster_1;","36751058":"tts_q.describe()","52eee1d2":"tts20_outlier_filter = tts_q['tts20_q99'].max()\ntts50_outlier_filter = tts_q['tts50_q99'].max()\ntts80_outlier_filter = tts_q['tts80_q99'].max()\n\nprint('TotalTimeStopped_20 filter:', tts20_outlier_filter)\nprint('TotalTimeStopped_50 filter:', tts50_outlier_filter)\nprint('TotalTimeStopped_80 filter:', tts80_outlier_filter)","9494ddfd":"%%bigquery dts_q20\nSELECT\nc.city_cluster_1,\ncount(1)cnt,\nmin(DistanceToFirstStop_p20) dts20_min,\nmax(DistanceToFirstStop_p20) dts20_max,\navg(DistanceToFirstStop_p20) dts20_avg,\nstddev(DistanceToFirstStop_p20) dts20_std,\nAPPROX_QUANTILES(DistanceToFirstStop_p20,201)[SAFE_ORDINAL(200)] dts20_q99\nFROM\n  `kaggle-competition-datasets.geotab_intersection_congestion.train` t,\n  `bqml_example.city_cluster` c\nWHERE\n  c.city = c.city\n  AND t.intersectionid=t.intersectionid\nGROUP BY\n  c.city_cluster_1","cce5e4aa":"dts_q20.describe()","8b121050":"%%bigquery dts_q50\nSELECT\nc.city_cluster_1,\ncount(1)cnt,\nmin(DistanceToFirstStop_p50) dts50_min,\nmax(DistanceToFirstStop_p50) dts50_max,\navg(DistanceToFirstStop_p50) dts50_avg,\nstddev(DistanceToFirstStop_p50) dts50_std,\nAPPROX_QUANTILES(DistanceToFirstStop_p50,201)[SAFE_ORDINAL(200)] dts50_q99\nFROM\n  `kaggle-competition-datasets.geotab_intersection_congestion.train` t,\n  `bqml_example.city_cluster` c\nWHERE\n  c.city = c.city\n  AND t.intersectionid=t.intersectionid\nGROUP BY\n  c.city_cluster_1;","d2ff9c3a":"dts_q50.describe()","88a30378":"%%bigquery dts_q80\nSELECT\nc.city_cluster_1,\ncount(1)cnt,\nmin(DistanceToFirstStop_p80) dts80_min,\nmax(DistanceToFirstStop_p80) dts80_max,\navg(DistanceToFirstStop_p80) dts80_avg,\nstddev(DistanceToFirstStop_p80) dts80_std,\nAPPROX_QUANTILES(DistanceToFirstStop_p80,201)[SAFE_ORDINAL(200)] dts80_q99\nFROM\n  `kaggle-competition-datasets.geotab_intersection_congestion.train` t,\n  `bqml_example.city_cluster` c\nWHERE\n  c.city = c.city\n  AND t.intersectionid=t.intersectionid\nGROUP BY\n  c.city_cluster_1;","9e906356":"dts_q80.describe()","1915f677":"dts20_outlier_filter = dts_q20['dts20_q99'].max()\ndts50_outlier_filter = dts_q50['dts50_q99'].max()\ndts80_outlier_filter = dts_q80['dts80_q99'].max()\n\nprint('DistanceToFirstStop_20 filter:', dts20_outlier_filter)\nprint('DistanceToFirstStop_50 filter:', dts50_outlier_filter)\nprint('DistanceToFirstStop_80 filter:', dts80_outlier_filter)","ca373f7a":"outliers_filter = {'TotalTimeStopped_p20':tts20_outlier_filter,\n                   'TotalTimeStopped_p50':tts50_outlier_filter,\n                   'TotalTimeStopped_p80':tts80_outlier_filter,\n                   'DistanceToFirstStop_p20':dts20_outlier_filter,\n                   'DistanceToFirstStop_p50':dts50_outlier_filter,\n                   'DistanceToFirstStop_p80':dts80_outlier_filter}\n\noutliers_filter","c90adf82":"%%time\n#model_changed = False\n\nif model_changed:\n    print(\"Let's go\")\n\n    for mn in mod_names:\n        sql=\"\"\"\n        CREATE OR REPLACE MODEL `bqml_example.model_\"\"\"+mn+\"\"\"`\n        OPTIONS(MODEL_TYPE='linear_reg') AS \n        SELECT  t.\"\"\"+mn+\"\"\" as label,\n                concat(t.city,cast(t.intersectionid as string)) i_id,\n                cc.city_cluster_1,\n                cc.city_cluster_2,\n                cc.city_cluster_3,\n                cc.city_cluster_4,\n                cc.city_cluster_5,\n                t.city,\n                t.hour,\n                t.weekend,\n                t.month,\n                --(case \n                --    when t.hour between 6 and 9 then 'RUSH_HOUR_MORNING'\n                --    when t.hour between 10 and 15 then 'MIDDAY'\n                --    when t.hour between 16 and 19 then 'RUSH_HOUR_EVENING'\n                --    else 'NIGHT'\n                --end) daytime,\n                --(case \n                --    when t.month between 4 and 6 then 'SPRING'\n                --    when t.month between 7 and 9 then 'SUMMER'\n                --    when t.month between 10 and 11 then 'FALL'\n                --    else 'WINTER'\n                --end) season,\n                `bqml_example.direction`(t.entryheading, t.exitheading) direction,\n                --`bqml_example.road_encode`(t.entrystreetname) road_type_entry,\n                --`bqml_example.road_encode`(t.exitstreetname) road_type_exit,\n                t.entryheading,\n                t.exitheading,\n                round(sin(bqml_example.direction2degree(`bqml_example.direction`(t.entryheading, t.exitheading))*ACOS(-1)\/180),6) direction_sin,\n                round(cos(bqml_example.direction2degree(`bqml_example.direction`(t.entryheading, t.exitheading))*ACOS(-1)\/180),6) direction_cos,\n                round(sin(bqml_example.direction2degree(t.entryheading)*ACOS(-1)\/180),6) entryheading_sin,\n                round(cos(bqml_example.direction2degree(t.entryheading)*ACOS(-1)\/180),6) entryheading_cos,\n                round(sin(bqml_example.direction2degree(t.exitheading)*ACOS(-1)\/180),6) exitheading_sin,\n                round(cos(bqml_example.direction2degree(t.exitheading)*ACOS(-1)\/180),6) exitheading_cos,\n                round(cc.dist_to_cluster_center_1,8) dist_to_cluster_center_1,\n                round(cc.dist_to_cluster_center_2,8) dist_to_cluster_center_2,\n                round(cc.dist_to_cluster_center_3,8) dist_to_cluster_center_3,\n                round(cc.dist_to_cluster_center_4,8) dist_to_cluster_center_4,\n                round(cc.dist_to_cluster_center_5,8) dist_to_cluster_center_5,\n                intersections_per_cluster_1,\n                intersections_per_cluster_2,\n                intersections_per_cluster_3,\n                intersections_per_cluster_4,\n                intersections_per_cluster_5,\n                count(1)over(partition by t.city, t.hour) \/ count(1)over(partition by t.city) observation_ratio_per_city,\n                zp.population,\n                zp.zipcode,\n                zp.intersections_per_zipcode,\n                zp.pop_intersec_ratio,\n                zp.zip_code_na,\n                concat(t.city,t.path) as path,\n                concat(t.city,t.entryStreetName) as entry_street_name,\n                concat(t.city,t.exitStreetName) as exit_street_name,\n                case when t.entryStreetName = t.exitStreetName then\n                    1\n                else\n                    0\n                end as same_street,\n                zp.num_observations,\n                a.app_st_length,\n                a.app_st_length_fallback\n          FROM `bqml_example.city_cluster` cc,\n               `kaggle-competition-datasets.geotab_intersection_congestion.train` t,\n               `bqml_example.testalike_av` av,\n               `bqml_example.zipcode_population` zp,\n               `bqml_example.approching_street_imputed` a\n         WHERE t.city = cc.city\n           AND t.intersectionid = cc.intersectionid\n           AND t.intersectionid = zp.intersectionid\n           AND t.city = zp.city\n           AND t.rowid = av.rowid\n           AND av.prob_test > 0.5\n           AND ifnull(t.intersectionid, -99 ) = ifnull(a.intersectionid,-99)\n           AND t.city = a.city\n           AND ifnull(t.ExitStreetName,'#_#') = ifnull(a.ExitStreetName,'#_#')\n           AND ifnull(t.ExitHeading,'#_#') = ifnull(a.ExitHeading,'#_#')\n           AND ifnull(t.EntryStreetName,'#_#') = ifnull(a.EntryStreetName,'#_#')\n           AND ifnull(t.EntryHeading,'#_#') = ifnull(a.EntryHeading,'#_#')\n        \"\"\"\n        \n        client.query(sql).result()\n\n        print('Done with',mn)","54063813":"%%time\n#model_changed = False\n\nif model_changed:\n    print(\"Let's go\")\n\n    for mn in mod_names:\n        sql=\"\"\"\n        CREATE OR REPLACE MODEL `bqml_example.model_\"\"\"+mn+\"\"\"_general`\n        OPTIONS(MODEL_TYPE='linear_reg',L2_REG=0.2,\n                LS_INIT_LEARN_RATE=0.4,\n                OPTIMIZE_STRATEGY='BATCH_GRADIENT_DESCENT') AS \n        SELECT  t.\"\"\"+mn+\"\"\" as label,\n                t.Longitude,\n                t.Latitude, \n                cc.city_cluster_1,\n                cc.city_cluster_2,\n                cc.city_cluster_3,\n                cc.city_cluster_4,\n                cc.city_cluster_5,\n                t.city,\n                t.hour,\n                t.weekend,\n                t.month,\n                `bqml_example.direction`(t.entryheading, t.exitheading) direction,\n                --`bqml_example.road_encode`(t.entrystreetname) road_type_entry,\n                --`bqml_example.road_encode`(t.exitstreetname) road_type_exit,\n                t.entryheading,\n                t.exitheading,\n                round(sin(bqml_example.direction2degree(`bqml_example.direction`(t.entryheading, t.exitheading))*ACOS(-1)\/180),6) direction_sin,\n                round(cos(bqml_example.direction2degree(`bqml_example.direction`(t.entryheading, t.exitheading))*ACOS(-1)\/180),6) direction_cos,\n                round(sin(bqml_example.direction2degree(t.entryheading)*ACOS(-1)\/180),6) entryheading_sin,\n                round(cos(bqml_example.direction2degree(t.entryheading)*ACOS(-1)\/180),6) entryheading_cos,\n                round(sin(bqml_example.direction2degree(t.exitheading)*ACOS(-1)\/180),6) exitheading_sin,\n                round(cos(bqml_example.direction2degree(t.exitheading)*ACOS(-1)\/180),6) exitheading_cos,\n                round(cc.dist_to_cluster_center_1,8) dist_to_cluster_center_1,\n                round(cc.dist_to_cluster_center_2,8) dist_to_cluster_center_2,\n                round(cc.dist_to_cluster_center_3,8) dist_to_cluster_center_3,\n                round(cc.dist_to_cluster_center_4,8) dist_to_cluster_center_4,\n                round(cc.dist_to_cluster_center_5,8) dist_to_cluster_center_5,\n                intersections_per_cluster_1,\n                intersections_per_cluster_2,\n                intersections_per_cluster_3,\n                intersections_per_cluster_4,\n                intersections_per_cluster_5,\n                count(1)over(partition by t.city, t.hour) \/ count(1)over(partition by t.city) observation_ratio_per_city,\n                zp.population,\n                zp.zipcode,\n                zp.intersections_per_zipcode,\n                zp.pop_intersec_ratio,\n                zp.zip_code_na,\n                case when t.entryStreetName = t.exitStreetName then\n                    1\n                else\n                    0\n                end as same_street,\n                zp.num_observations,\n                a.app_st_length,\n                a.app_st_length_fallback\n          FROM `bqml_example.city_cluster` cc,\n               `kaggle-competition-datasets.geotab_intersection_congestion.train` t,\n               `bqml_example.testalike_av` av,\n               `bqml_example.zipcode_population` zp,\n               `bqml_example.approching_street_imputed` a\n         WHERE t.city = cc.city\n           AND t.intersectionid = cc.intersectionid\n           AND t.intersectionid = zp.intersectionid\n           AND t.city = zp.city\n           AND t.rowid = av.rowid\n           and t.rowid < 2600000\n           AND ifnull(t.intersectionid, -99 ) = ifnull(a.intersectionid,-99)\n           AND t.city = a.city\n           AND ifnull(t.ExitStreetName,'#_#') = ifnull(a.ExitStreetName,'#_#')\n           AND ifnull(t.ExitHeading,'#_#') = ifnull(a.ExitHeading,'#_#')\n           AND ifnull(t.EntryStreetName,'#_#') = ifnull(a.EntryStreetName,'#_#')\n           AND ifnull(t.EntryHeading,'#_#') = ifnull(a.EntryHeading,'#_#')\n        \"\"\"\n        #\n         #  AND av.prob_test > 0.5\n         #  AND t.\"\"\"+mn+\"\"\" <= \"\"\"+str(outliers_filter[mn])+\"\"\"\n        #between 0.5 and 0.85\n    #< 2600000;\n        client.query(sql).result()\n\n        print('Done with',mn)","68ba628f":"%%time\n%%bigquery\nSELECT\n  *\nFROM\n  ML.TRAINING_INFO(MODEL `bqml_example.model_TotalTimeStopped_p20`)\nORDER BY iteration ","37f70e76":"%%time\n%%bigquery\nSELECT\n  *\nFROM\n  ML.TRAINING_INFO(MODEL `bqml_example.model_TotalTimeStopped_p20_general`)\nORDER BY iteration ","0d96215b":"%%time\n%%bigquery\nSELECT\n  *\nFROM\n  ML.FEATURE_INFO(MODEL `bqml_example.model_TotalTimeStopped_p20`)","e5be9046":"%%bigquery\nSELECT\n  *\nFROM\n  ML.WEIGHTS(MODEL  `bqml_example.model_TotalTimeStopped_p20`,\n    STRUCT(true AS standardize))","3fdb96c8":"# Using data below adversarial threshold as validation set :-\/ \nsql=\"\"\"SELECT\n          *\n        FROM ML.EVALUATE(MODEL `bqml_example.model_TotalTimeStopped_p20`, (\n        SELECT  t.TotalTimeStopped_p20 as label, \n                concat(t.city,cast(t.intersectionid as string)) i_id,\n                cc.city_cluster_1,\n                cc.city_cluster_2,\n                cc.city_cluster_3,\n                cc.city_cluster_4,\n                cc.city_cluster_5,\n                t.city,\n                t.hour,\n                t.weekend,\n                t.month,\n                --(case \n                --    when t.hour between 6 and 9 then 'RUSH_HOUR_MORNING'\n                --   when t.hour between 10 and 15 then 'MIDDAY'\n                --    when t.hour between 16 and 19 then 'RUSH_HOUR_EVENING'\n                --    else 'NIGHT'\n                --end) daytime,\n                --(case \n                --    when t.month between 4 and 6 then 'SPRING'\n                --    when t.month between 7 and 9 then 'SUMMER'\n                --    when t.month between 10 and 11 then 'FALL'\n                --    else 'WINTER'\n                --end) season,\n                `bqml_example.direction`(t.entryheading, t.exitheading) direction,\n                --`bqml_example.road_encode`(t.entrystreetname) road_type_entry,\n                --`bqml_example.road_encode`(t.exitstreetname) road_type_exit,\n                t.entryheading,\n                t.exitheading,\n                round(sin(bqml_example.direction2degree(`bqml_example.direction`(t.entryheading, t.exitheading))*ACOS(-1)\/180),6) direction_sin,\n                round(cos(bqml_example.direction2degree(`bqml_example.direction`(t.entryheading, t.exitheading))*ACOS(-1)\/180),6) direction_cos,\n                round(sin(bqml_example.direction2degree(t.entryheading)*ACOS(-1)\/180),6) entryheading_sin,\n                round(cos(bqml_example.direction2degree(t.entryheading)*ACOS(-1)\/180),6) entryheading_cos,\n                round(sin(bqml_example.direction2degree(t.exitheading)*ACOS(-1)\/180),6) exitheading_sin,\n                round(cos(bqml_example.direction2degree(t.exitheading)*ACOS(-1)\/180),6) exitheading_cos,\n                round(cc.dist_to_cluster_center_1,8) dist_to_cluster_center_1,\n                round(cc.dist_to_cluster_center_2,8) dist_to_cluster_center_2,\n                round(cc.dist_to_cluster_center_3,8) dist_to_cluster_center_3,\n                round(cc.dist_to_cluster_center_4,8) dist_to_cluster_center_4,\n                round(cc.dist_to_cluster_center_5,8) dist_to_cluster_center_5,\n                intersections_per_cluster_1,\n                intersections_per_cluster_2,\n                intersections_per_cluster_3,\n                intersections_per_cluster_4,\n                intersections_per_cluster_5,\n                count(1)over(partition by t.city, t.hour) \/ count(1)over(partition by t.city) observation_ratio_per_city,\n                zp.population,\n                zp.zipcode,\n                zp.intersections_per_zipcode,\n                zp.pop_intersec_ratio,\n                zp.zip_code_na,\n                concat(t.city,t.path) as path,\n                concat(t.city,t.entryStreetName) as entry_street_name,\n                concat(t.city,t.exitStreetName) as exit_street_name,\n                case when t.entryStreetName = t.exitStreetName then\n                    1\n                else\n                    0\n                end as same_street,\n                zp.num_observations,\n                a.app_st_length,\n                a.app_st_length_fallback\n  FROM `bqml_example.city_cluster` cc,\n               `kaggle-competition-datasets.geotab_intersection_congestion.train` t,\n               `bqml_example.testalike_av` av,\n               `bqml_example.zipcode_population` zp,\n               `bqml_example.approching_street_imputed` a\n         WHERE t.city = cc.city\n           AND t.intersectionid = cc.intersectionid\n           AND t.intersectionid = zp.intersectionid\n           AND t.city = zp.city\n           AND t.rowid = av.rowid\n           AND av.prob_test <= 0.5\n           AND ifnull(t.intersectionid, -99 ) = ifnull(a.intersectionid,-99)\n           AND t.city = a.city\n           AND ifnull(t.ExitStreetName,'#_#') = ifnull(a.ExitStreetName,'#_#')\n           AND ifnull(t.ExitHeading,'#_#') = ifnull(a.ExitHeading,'#_#')\n           AND ifnull(t.EntryStreetName,'#_#') = ifnull(a.EntryStreetName,'#_#')\n           AND ifnull(t.EntryHeading,'#_#') = ifnull(a.EntryHeading,'#_#')))\"\"\"\n\nclient.query(sql).to_dataframe()","8353386e":"# validation set by rowid\nsql=\"\"\"SELECT\n          *\n        FROM ML.EVALUATE(MODEL `bqml_example.model_TotalTimeStopped_p20_general`, (\n        SELECT  t.TotalTimeStopped_p20 as label, \n                t.Longitude,\n                t.Latitude, \n                cc.city_cluster_1,\n                cc.city_cluster_2,\n                cc.city_cluster_3,\n                cc.city_cluster_4,\n                cc.city_cluster_5,\n                t.city,\n                t.hour,\n                t.weekend,\n                t.month,\n                `bqml_example.direction`(t.entryheading, t.exitheading) direction,\n                --`bqml_example.road_encode`(t.entrystreetname) road_type_entry,\n                --`bqml_example.road_encode`(t.exitstreetname) road_type_exit,\n                t.entryheading,\n                t.exitheading,\n                round(sin(bqml_example.direction2degree(`bqml_example.direction`(t.entryheading, t.exitheading))*ACOS(-1)\/180),6) direction_sin,\n                round(cos(bqml_example.direction2degree(`bqml_example.direction`(t.entryheading, t.exitheading))*ACOS(-1)\/180),6) direction_cos,\n                round(sin(bqml_example.direction2degree(t.entryheading)*ACOS(-1)\/180),6) entryheading_sin,\n                round(cos(bqml_example.direction2degree(t.entryheading)*ACOS(-1)\/180),6) entryheading_cos,\n                round(sin(bqml_example.direction2degree(t.exitheading)*ACOS(-1)\/180),6) exitheading_sin,\n                round(cos(bqml_example.direction2degree(t.exitheading)*ACOS(-1)\/180),6) exitheading_cos,\n                round(cc.dist_to_cluster_center_1,8) dist_to_cluster_center_1,\n                round(cc.dist_to_cluster_center_2,8) dist_to_cluster_center_2,\n                round(cc.dist_to_cluster_center_3,8) dist_to_cluster_center_3,\n                round(cc.dist_to_cluster_center_4,8) dist_to_cluster_center_4,\n                round(cc.dist_to_cluster_center_5,8) dist_to_cluster_center_5,\n                intersections_per_cluster_1,\n                intersections_per_cluster_2,\n                intersections_per_cluster_3,\n                intersections_per_cluster_4,\n                intersections_per_cluster_5,\n                count(1)over(partition by t.city, t.hour) \/ count(1)over(partition by t.city) observation_ratio_per_city,\n                zp.population,\n                zp.zipcode,\n                zp.intersections_per_zipcode,\n                zp.pop_intersec_ratio,\n                zp.zip_code_na,\n                case when t.entryStreetName = t.exitStreetName then\n                    1\n                else\n                    0\n                end as same_street,\n                zp.num_observations,\n                a.app_st_length,\n                a.app_st_length_fallback\n  FROM `bqml_example.city_cluster` cc,\n               `kaggle-competition-datasets.geotab_intersection_congestion.train` t,\n               `bqml_example.testalike_av` av,\n               `bqml_example.zipcode_population` zp,\n               `bqml_example.approching_street_imputed` a\n         WHERE t.city = cc.city\n           AND t.intersectionid = cc.intersectionid\n           AND t.intersectionid = zp.intersectionid\n           AND t.city = zp.city\n           AND t.rowid = av.rowid\n           and t.rowid >= 2600000\n           AND ifnull(t.intersectionid, -99 ) = ifnull(a.intersectionid,-99)\n           AND t.city = a.city\n           AND ifnull(t.ExitStreetName,'#_#') = ifnull(a.ExitStreetName,'#_#')\n           AND ifnull(t.ExitHeading,'#_#') = ifnull(a.ExitHeading,'#_#')\n           AND ifnull(t.EntryStreetName,'#_#') = ifnull(a.EntryStreetName,'#_#')\n           AND ifnull(t.EntryHeading,'#_#') = ifnull(a.EntryHeading,'#_#')\n           ))\"\"\"\n\n#AND av.prob_test <= 0.5\n\nclient.query(sql).to_dataframe()","1634fba4":"def pred(mn, debug=False):\n    \n    if debug:\n        lmt='LIMIT 10'\n    else:\n        lmt=''\n    \n    ## Detailed model\n    \n    sql=\"\"\"\n    SELECT\n      RowId,\n      case when predicted_label < 0 then \n          0 \n      else \n          predicted_label \n      end as \"\"\"+mn+\"\"\"\n    FROM\n      ML.PREDICT(MODEL `bqml_example.model_\"\"\"+mn+\"\"\"`,\n        (\n        SELECT  t.RowId, \n                concat(t.city,cast(t.intersectionid as string)) i_id,\n                cc.city_cluster_1,\n                cc.city_cluster_2,\n                cc.city_cluster_3,\n                cc.city_cluster_4,\n                cc.city_cluster_5,\n                t.city,\n                t.hour,\n                t.weekend,\n                t.month,\n                --(case \n                --    when t.hour between 6 and 9 then 'RUSH_HOUR_MORNING'\n                --    when t.hour between 10 and 15 then 'MIDDAY'\n                --    when t.hour between 16 and 19 then 'RUSH_HOUR_EVENING'\n                --    else 'NIGHT'\n                --end) daytime,\n                --(case \n                --    when t.month between 4 and 6 then 'SPRING'\n                --    when t.month between 7 and 9 then 'SUMMER'\n                --    when t.month between 10 and 11 then 'FALL'\n                --    else 'WINTER'\n                --end) season,\n                `bqml_example.direction`(t.entryheading, t.exitheading) direction,\n                --`bqml_example.road_encode`(t.entrystreetname) road_type_entry,\n                --`bqml_example.road_encode`(t.exitstreetname) road_type_exit,\n                t.entryheading,\n                t.exitheading,\n                round(sin(bqml_example.direction2degree(`bqml_example.direction`(t.entryheading, t.exitheading))*ACOS(-1)\/180),6) direction_sin,\n                round(cos(bqml_example.direction2degree(`bqml_example.direction`(t.entryheading, t.exitheading))*ACOS(-1)\/180),6) direction_cos,\n                round(sin(bqml_example.direction2degree(t.entryheading)*ACOS(-1)\/180),6) entryheading_sin,\n                round(cos(bqml_example.direction2degree(t.entryheading)*ACOS(-1)\/180),6) entryheading_cos,\n                round(sin(bqml_example.direction2degree(t.exitheading)*ACOS(-1)\/180),6) exitheading_sin,\n                round(cos(bqml_example.direction2degree(t.exitheading)*ACOS(-1)\/180),6) exitheading_cos,\n                round(cc.dist_to_cluster_center_1,8) dist_to_cluster_center_1,\n                round(cc.dist_to_cluster_center_2,8) dist_to_cluster_center_2,\n                round(cc.dist_to_cluster_center_3,8) dist_to_cluster_center_3,\n                round(cc.dist_to_cluster_center_4,8) dist_to_cluster_center_4,\n                round(cc.dist_to_cluster_center_5,8) dist_to_cluster_center_5,\n                intersections_per_cluster_1,\n                intersections_per_cluster_2,\n                intersections_per_cluster_3,\n                intersections_per_cluster_4,\n                intersections_per_cluster_5,\n                count(1)over(partition by t.city, t.hour) \/ count(1)over(partition by t.city) observation_ratio_per_city,\n                zp.population,\n                zp.zipcode,\n                zp.intersections_per_zipcode,\n                zp.pop_intersec_ratio,\n                zp.zip_code_na,\n                concat(t.city,t.path) as path,\n                concat(t.city,t.entryStreetName) as entry_street_name,\n                concat(t.city,t.exitStreetName) as exit_street_name,\n                case when t.entryStreetName = t.exitStreetName then\n                    1\n                else\n                    0\n                end as same_street,\n                zp.num_observations,\n                a.app_st_length,\n                a.app_st_length_fallback\n          FROM `bqml_example.city_cluster` cc,\n               `kaggle-competition-datasets.geotab_intersection_congestion.test` t,\n               `bqml_example.zipcode_population` zp,\n               `bqml_example.approching_street_imputed` a\n         WHERE t.city = cc.city\n           AND t.intersectionid = cc.intersectionid\n           AND t.intersectionid = zp.intersectionid\n           AND t.city = zp.city\n           AND ifnull(t.intersectionid, -99 ) = ifnull(a.intersectionid,-99)\n           AND t.city = a.city\n           AND ifnull(t.ExitStreetName,'#_#') = ifnull(a.ExitStreetName,'#_#')\n           AND ifnull(t.ExitHeading,'#_#') = ifnull(a.ExitHeading,'#_#')\n           AND ifnull(t.EntryStreetName,'#_#') = ifnull(a.EntryStreetName,'#_#')\n           AND ifnull(t.EntryHeading,'#_#') = ifnull(a.EntryHeading,'#_#')\n           AND    EXISTS (\n                  SELECT\n                    1\n                  FROM\n                    `kaggle-competition-datasets.geotab_intersection_congestion.train` n\n                  WHERE\n                    n.IntersectionId = t.IntersectionId\n                    and n.EntryStreetName = t.EntryStreetName\n                    AND n.ExitStreetName = t.ExitStreetName\n                    AND n.Path = t.path)\n                          \n          \"\"\"+lmt+\"\"\"))\n        ORDER BY RowId ASC\"\"\"\n    \n    df=client.query(sql).to_dataframe()\n\n    ## general model\n    \n    sql=\"\"\"\n    SELECT\n      RowId,\n      case when predicted_label < 0 then \n          0 \n      else \n          predicted_label \n      end as \"\"\"+mn+\"\"\"\n    FROM\n      ML.PREDICT(MODEL `bqml_example.model_\"\"\"+mn+\"\"\"_general`,\n        (\n        SELECT  t.RowId, \n                t.Longitude,\n                t.Latitude, \n                cc.city_cluster_1,\n                cc.city_cluster_2,\n                cc.city_cluster_3,\n                cc.city_cluster_4,\n                cc.city_cluster_5,\n                t.city,\n                t.hour,\n                t.weekend,\n                t.month,\n                `bqml_example.direction`(t.entryheading, t.exitheading) direction,\n                --`bqml_example.road_encode`(t.entrystreetname) road_type_entry,\n                --`bqml_example.road_encode`(t.exitstreetname) road_type_exit,\n                t.entryheading,\n                t.exitheading,\n                round(sin(bqml_example.direction2degree(`bqml_example.direction`(t.entryheading, t.exitheading))*ACOS(-1)\/180),6) direction_sin,\n                round(cos(bqml_example.direction2degree(`bqml_example.direction`(t.entryheading, t.exitheading))*ACOS(-1)\/180),6) direction_cos,\n                round(sin(bqml_example.direction2degree(t.entryheading)*ACOS(-1)\/180),6) entryheading_sin,\n                round(cos(bqml_example.direction2degree(t.entryheading)*ACOS(-1)\/180),6) entryheading_cos,\n                round(sin(bqml_example.direction2degree(t.exitheading)*ACOS(-1)\/180),6) exitheading_sin,\n                round(cos(bqml_example.direction2degree(t.exitheading)*ACOS(-1)\/180),6) exitheading_cos,\n                round(cc.dist_to_cluster_center_1,8) dist_to_cluster_center_1,\n                round(cc.dist_to_cluster_center_2,8) dist_to_cluster_center_2,\n                round(cc.dist_to_cluster_center_3,8) dist_to_cluster_center_3,\n                round(cc.dist_to_cluster_center_4,8) dist_to_cluster_center_4,\n                round(cc.dist_to_cluster_center_5,8) dist_to_cluster_center_5,\n                intersections_per_cluster_1,\n                intersections_per_cluster_2,\n                intersections_per_cluster_3,\n                intersections_per_cluster_4,\n                intersections_per_cluster_5,\n                count(1)over(partition by t.city, t.hour) \/ count(1)over(partition by t.city) observation_ratio_per_city,\n                zp.population,\n                zp.zipcode,\n                zp.intersections_per_zipcode,\n                zp.pop_intersec_ratio,\n                zp.zip_code_na,\n                case when t.entryStreetName = t.exitStreetName then\n                    1\n                else\n                    0\n                end as same_street,\n                zp.num_observations,\n                a.app_st_length,\n                a.app_st_length_fallback\n          FROM `bqml_example.city_cluster` cc,\n               `kaggle-competition-datasets.geotab_intersection_congestion.test` t,\n               `bqml_example.zipcode_population` zp,\n               `bqml_example.approching_street_imputed` a\n         WHERE t.city = cc.city\n           AND t.intersectionid = cc.intersectionid\n           AND t.intersectionid = zp.intersectionid\n           AND t.city = zp.city\n           AND ifnull(t.intersectionid, -99 ) = ifnull(a.intersectionid,-99)\n           AND t.city = a.city\n           AND ifnull(t.ExitStreetName,'#_#') = ifnull(a.ExitStreetName,'#_#')\n           AND ifnull(t.ExitHeading,'#_#') = ifnull(a.ExitHeading,'#_#')\n           AND ifnull(t.EntryStreetName,'#_#') = ifnull(a.EntryStreetName,'#_#')\n           AND ifnull(t.EntryHeading,'#_#') = ifnull(a.EntryHeading,'#_#')\n           AND    NOT EXISTS (\n                  SELECT\n                    1\n                  FROM\n                    `kaggle-competition-datasets.geotab_intersection_congestion.train` n\n                  WHERE\n                    n.IntersectionId = t.IntersectionId\n                    and n.EntryStreetName = t.EntryStreetName\n                    AND n.ExitStreetName = t.ExitStreetName\n                    AND n.Path = t.path)\n                            \n          \"\"\"+lmt+\"\"\"))\n        ORDER BY RowId ASC\"\"\"\n        \n    df=df.append(client.query(sql).to_dataframe())\n        \n    return df\n    \ndf=None\nfor i, mn in enumerate(mod_names):\n    if i == 0:\n        print('Start', i)\n        df = pred(mn)\n        df['RowId'] = df['RowId'].apply(str) + '_'+str(i)\n        df.rename(columns={'RowId': 'TargetId', mn: 'Target'}, inplace=True)\n    else:\n        print('Start', i)\n        df_temp = pred(mn)\n        df_temp['RowId'] = df_temp['RowId'].apply(str) + '_'+str(i)\n        df_temp.rename(columns={'RowId': 'TargetId', mn: 'Target'}, inplace=True)\n        df=df.append(df_temp)\n\n    print('Done with',mn)","355cb31c":"print(df.shape)\ndf.head(100)","3f2c9b2c":"df.to_csv('submission.csv', index=False)","ef383e42":"Next, the table *APPROCHING_STREET_IMPUTED* with the approaching street length and the fallback for missing values is created.","c06b054b":"## General Model\n\nFor the test data that doesn't match intersections, path, entry and exit streets from train I build a more general model. BATCH_GRADIENT_DESCENT needs to be forced on this model, otherwise with the default optimize strategie the outliers in the prediction are very high. For this model the train-validation-split is done by rowid (split by adversiarial validation didn't improve the general model).","bc196d5b":"## Remove Outliers from train\n**!! This approach unfortunately didn't advance the model and was left out for the final model !!**\n\nThe main idea is to analyse the target values (TotalTimeStopped and DistanceToFirstStop) and considere values above the 99.x-quantil as outliers and use this value as either a cutoff (clip)-value for the predicted targets or remove them from the train data. In both cases the model didn't improve.\n\n** Step 1 **\n\nMark rows with target value > 99.5-percentile. Group by City-Cluster-1 to calculate quantil.\n\n(I needed to split SQL because of CPU-usage restriction on free tier.)","9cba7e00":"### General model","f0f3288c":"# Predict outcomes\nPredict the target values and generate the output file. Use detailed model for test data with intersection_id, path, exit and entry street existing in train. Use general model otherwise. Clip negative values to 0.\n","7a652c53":"## Evaluating the model\nSince I didn't leave out an appropriate validation set (e.g. top 10% of the test-alike train data) the evaluation is not a good indicator for the leaderboard. I rather used it briefly to check for slight improvments to the previous run. This is definitely a shortcoming of this kernel.\n","ac0c5769":"**Thanks for reading sofar. Please consider upvoting the kernel if it was usefull.**","73a0ccad":"## Train and Test data with one cluster\nThe following is a former version of the intersection clustering which combines train and test data with one cluster (the cluster where the intersection is located in). The query results are safed in the tables *CITY_CLUSTER_TRAIN* and *CITY_CLUSTER_TEST* which are used later on for adversarial validation. (Note: The two tables could probably be replaced by *CITY_CLUSTER* after a few changes to the adversarial validation model).","3400ef2c":"## Detailed model\nThe detailed prediction model is trained with data where the intersections and streets are also known in the test data set.\nThe entire dataset above the 0.5 adversarial threshold is used for train. Usualy I'd keep some amount for validation. But I dismissed it (as well as cross validatin) because of limited BQ quota. I only tried a couple of different hyper parameters for the same reason. The default settings fit best.","95e26c69":"## Output as CSV\n","6307f922":"## Get training statistics\nFor example TotalTimeStopped_p20 is shown in the notebook. Evaluation on the other models was done for convenience in the BigQuery console.","9b0c8c81":"There will by 12 Models. One for each percentile (20, 50, 80) per category (TotalTimeStopped, DistanceToFirstStop) per model typ (general or detailed).","1ce721d6":"# Some basic variables\nTo reduce consumption of BQ quota the tables and models are only rebuild if necessary. To rebuild the entire project set **model_changed = True**. Be aware your google account might get charged. \n\nIf you run on the free sandbox environment you don't have enough quota to run the entire kernel at once. You can then precede the kernel a few days after when your quota has been refreshed. In this case make sure to set the model_changed flag to **False** for the parts you already have built.","404b5c9f":"The fallback order for missing ap_st_length is:\n1. I_AVG (due to small stddev and avg)\n- EN_AVG\n- EX_AVG\n- C_AVG","91e263ec":"Since stddev of q99 is small I use the same filter values for all city clusters.\n\nDefine filter to remove outliers:","92212d3e":"# Introduction\nThis kernel includes all features and models that lead to my final submission to the [BigQuery-GeoTab Competition](https:\/\/www.kaggle.com\/c\/bigquery-geotab-intersection-congestion).\n\nMy personal objective of the competition is to tryout BigQuery (BQ) including the basic ML features. Therefore the kernel relies as much as possible on BQ. All features are generated in BQ with varying SQL-techniques. The prediction model is also build in BQ. \n\nSince the ML features in BQ are currently limited to Lineare Regression, KMeans and Logistic Regression there is a subcompetition within the competition, that ranks top BQML submissions separatly. (There is also a second subcompetition for using TensorFlow with BigQuery.) This kernel aims towards the BQML subcompetition. \n\nThe kernel uses all the provided ML algorithms:\n- KMeans for Geo-Spatial Clustering\n- Logistic Regression for Adversarial Validation\n- Linear Regression for Prediction Model\n\n\n## Summary\nFeatures:\n- intersectionid + city (*i_id*)\n- city, hour, weekend, month\n- path, entry_street_name, exit_street_name\n- 20 clusters of intersections per city\n- Distance to the 5 nearest cluster center\n- 8 directions of turn (left, right, centered, uturn, centered-left, ...)\n    - Directions, entry- and exit-heading are not embedded directly. Instead they are translated into degrees (e.g. centered = 90deg). \n    - Afterwards the degree features are split additionaly into two features sin(feature_x_deg) and cos(feature_x_deg).\n    - Besides the direction of the turn, sin and cos feature are added for entry heading and exit heading \n- number of intersections per cluster\n- number of observations per city and hour\n- zipcode\n- population of zipcode\n- population of zipcode per intersection\n- intersections per zipcode\n- flag, if entry and exit are the same_street\n- intersection observation frequency\n- approching street length\n- approching street length fallback flag, if approching street length was derived from a more general approach due of missing data\n\nFeatures that didn't improve the model:\n- daytime, season (removed from model, since not improving)\n- road_type_entry, road_type_exit (removed from model, since not improving)\n\nTrain-Valid-Split:\n- out of adversarial validation (drop 25 % of not test like data from train) (used by detailed model)\n- split by id range (used by general model)\n\nTrain-Valid-Split that didn't improved the model:\n- remove outliers (target > Q99) from train (removed from model, since not improving)\n\nModel:\n- Linear Regression\n    - Detailed Model for known path and intersections in train and test\n    - General Model for unknown path and intersections\n\n## External data\nThe kernel uses zipcodes and population data from the public *bigquery-public-data*-set:\n- bigquery-public-data.utility_us.zipcode_area\n- bigquery-public-data.census_bureau_usa.population_by_zip_2010\n\nThe dataset can be included in the bigquery console (*add ressources*). I shared a preparation of the data (including references to intersections and a csv file for python users) [here](https:\/\/www.kaggle.com\/joatom\/bqml-population-of-zip-code-per-intersection).\n\n## Credits\nSome of the ideas are inspired by the following kernels. Please visit them and give them upvotes if you like them.\n- This kernel is a forked from [BigQuery Machine Learning Tutorial](https:\/\/www.kaggle.com\/rtatman\/bigquery-machine-learning-tutorial).\n- The direction features are like the Flow feature in https:\/\/www.kaggle.com\/jpmiller\/intersection-level-eda\n- Intersection encoding in https:\/\/www.kaggle.com\/danofer\/baseline-feature-engineering-geotab-69-5-lb\n- Adversarial Validation: https:\/\/www.kaggle.com\/tunguz\/adversarial-geotab\n- Road encoding: https:\/\/www.kaggle.com\/bgmello\/how-one-percentile-affect-the-others)\n- Same_Street feature: https:\/\/www.kaggle.com\/ragnar123\/feature-engineering-and-forward-feature-selection\n- Remove Path and Intersection for general model: https:\/\/www.kaggle.com\/gaborfodor\/4-xgboost-general\n- Approching Street Lengt inspired by EntryLength: https:\/\/www.kaggle.com\/dan3dewey\/bbq-intersection-congestion","52ef50d0":"## Population of zipcode and observation frequency per intersection\nRetrieve population per zipcode. This kernel does not use age or gender specific information of the underlying data. \n\nExtract the features\n\n- population\n- zipcode,\n- intersections_per_zipcode,\n- pop_intersec_ratio (population \/ number of intersections of zipcode),\n- zip_code_na (if zipcode is unavailable for intersection) and\n- num_observations (number of intersections in train and test).","b41c8f41":"# Cluster Intersections per City\nBuild 20 geo spatial clusters of intersections per city:","e79546ae":"Since stddev of q99 is small I use the same filter values for all city clusters.\n\nDefine filter to remove outliers:","1fc1f4fc":"## Length of intersection approaching street\n(The idea of *EntryLength* feature is derived from https:\/\/www.kaggle.com\/dan3dewey\/bbq-intersection-congestion.)\n\n**Step 1**\n\nTo an entry street\/heading find all data sets that contain this entry point as an exit street \/ heading. For example:\n- Entry: Broadway \/ NW\n- search all Exit Broadway \/ NW\nCalculate the distances between matching entry and exit. Make the weak assumption that the distance equals the street length. Pick shortest distance as approaching street length (*app_st_length*).\n","e1bc826b":"Examin the test-alike probability of the train data:","8797a6c4":"** Step 4 **\n\nThere are about 200000 train data entries with a 0.1 probability to be similar to test. Looking at the histograms we dismiss every data entry with less then 0.5 test-probability for the detailed model later on.\nThe 0.5 threshold out of adversarial validation only worked on the detailed model. The general model did a simple validation-split by row number.","a0242289":"# Functions for direction features","87d9ac3f":"A basic analysis of the clusters can be found in an earlier kernel [here](https:\/\/www.kaggle.com\/joatom\/bqml-incl-intersection-clusters).","715610b6":"** Step 3 **\n\nSince train and test data don't look similar we try to get the test-alike train data.\n\nCreate table with adversarial probability of train beeing classified as test:","c7f89192":"### DistanceToFirstStop\nq=0.995","b75f3315":"# Build models\n(The idea of creating a general and a detailed model depending on intersection and street informations was derived from https:\/\/www.kaggle.com\/gaborfodor\/4-xgboost-general)","34b20f6c":"# Complex features","4495caae":"Results of adversarial validation:\n\n* precision: 0.74410540861649255\n* recall: 0.99994428055521567\n* accuracy: 0.7622297087132579\n* f1_score: 0.85326003277995766\n* log_loss: 0.47265372942498035\n* roc_auc: 0.756451\n\n==> train and test don't look similar","64f61d9e":"This function converts road names into road categories. (it's not used in the final model) ","9e71b01a":"# Test-Validation-Split\n## Adversarial Validation\n(The approach follows the basic idea of this kernel: https:\/\/www.kaggle.com\/tunguz\/adversarial-geotab)\n\n**Step 1**\n\nTry to figure out how similar the test and train data are. For that pick some general features (in the SELECT-part) for test and train and concatenate (UNION ALL) the data. Set the variable *TARGET = 0* for train data and *TARGET = 1* for test. Build a classifier (Logistic Regression model) to predict *TARGET*.","57c2d408":"### TotalTimeStopped\nusing q=0.995","475f1df4":"**Step 2**\n\nEvaluate the model to see if it can distinquish between test or train. If not (e.g. accuracy = 0.5) the data is assumed to be similar.","c3e75749":"This function converts exit and entry headings into turn directions.","6dcee3ae":"**Step 2**\n\nGather stats to decide how to impute missing *app_st_length*. \nExamine deviation from existing *app_st_length* to min and average values over several groups (City, City-EntryStreet, City-ExitStreet, City-Intersection).\nCalculate StdDev, Max and Mean for the deviations. Decide for a well balanced fallback solution.","351e7e99":"### General model","3c4a389f":"This function converts turn directions into degrees, where Center is 90 degrees and uturn 270 degrees.","6f24cfda":"Distinct cities","4c519bbc":"## Match closest clusters to intersection\nNow match the five closest cluster center to an intersection. Add distance from intersection to the five cluster center. Count number of intersection of the five surrouding clusters.\n\nSafe this for further usage in the *CITY_CLUSTER* table."}}