{"cell_type":{"84304783":"code","6c7f21d4":"code","b8570042":"code","fdcba139":"code","1942f3db":"code","af847515":"code","4f40a7b8":"code","38a246ae":"code","41fa64b0":"code","a28300a6":"code","1ac9300d":"code","cc1dd578":"code","533c9b71":"code","ea7fd77d":"code","9e3a61b3":"code","15e77bba":"code","5ecb8677":"markdown","f298781e":"markdown","d5957711":"markdown","c0e6056d":"markdown","8e6bf941":"markdown","4d659789":"markdown","e9b45d8a":"markdown","17fa6a94":"markdown","36cc2c00":"markdown","546b00aa":"markdown","dda783df":"markdown","14ed296d":"markdown","d4de2986":"markdown","39954318":"markdown","e5615b6b":"markdown","7e938d71":"markdown","331f8de6":"markdown","48a60f66":"markdown","96ce91c9":"markdown","2fe8962d":"markdown","96e2c45c":"markdown","42df6b89":"markdown","bfe43cf6":"markdown"},"source":{"84304783":"!pip install biopython\n!pip install Squiggle","6c7f21d4":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport numpy as np\nimport pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b8570042":"from Bio import SeqIO\nfor sequence in SeqIO.parse('..\/input\/coronavirus-genome-sequence\/MN908947.fna', \"fasta\"):\n    print(sequence.seq)\n    print(len(sequence),'nucliotides')","fdcba139":"from Bio.SeqRecord import SeqRecord\nfrom Bio import SeqIO\nDNAsequence = SeqIO.read('..\/input\/coronavirus-genome-sequence\/MN908947.fna', \"fasta\")\nDNAsequence","1942f3db":"DNA = DNAsequence.seq#Convert DNA into mRNA Sequence\nmRNA = DNA.transcribe() #Transcribe a DNA sequence into RNA.","af847515":"print(mRNA)","4f40a7b8":"print('Size : ',len(mRNA))","38a246ae":"Amino_Acid = mRNA.translate(table=1, cds=False)\nprint('Amino Acid', Amino_Acid)","41fa64b0":"print(\"Length of Protein:\",len(Amino_Acid))\nprint(\"Length of Original mRNA:\",len(mRNA))","a28300a6":"from Bio.Data import CodonTable\nprint(CodonTable.unambiguous_rna_by_name['Standard'])","1ac9300d":"#Identify all the Proteins (chains of amino acids)\nProteins = Amino_Acid.split('*') # * is translated stop codon\ndf = pd.DataFrame(Proteins)\ndf.describe()\nprint('Total proteins:', len(df))\n\ndef conv(item):\n    return len(item)\n\ndef to_str(item):\n    return str(item)\n\ndf['sequence_str'] = df[0].apply(to_str)\n\ndf['length'] = df[0].apply(conv)\ndf.rename(columns={0: \"sequence\"}, inplace=True)\ndf.head()# Take only longer than 20\nfunctional_proteins = df.loc[df['length'] >= 20]\nprint('Total functional proteins:', len(functional_proteins))\n\nfunctional_proteins.describe()","cc1dd578":"#This cell will produce very lengthy output :D\n\nfrom __future__ import division\npoi_list = []\nMW_list = []\nfrom Bio.SeqUtils import ProtParam\nfor record in Proteins[:]: \n    print(\"\\n\")\n    X = ProtParam.ProteinAnalysis(str(record))\n    POI = X.count_amino_acids()\n    poi_list.append(POI)\n    MW = X.molecular_weight()\n    MW_list.append(MW)\n    print(\"Protein of Interest = \", POI) \n    \n    try:\n        print(\"Amino acids percent = \", str(X.get_amino_acids_percent()))\n    except ZeroDivisionError:\n        pass\n    print(\"Molecular weight = \", MW)\n    \n    try:\n        print(\"Aromaticity = \", X.aromaticity()) \n    except ZeroDivisionError:\n        pass\n    print(\"Flexibility = \", X.flexibility()) \n    \n    try:\n        print(\"Secondary structure fraction = \", X.secondary_structure_fraction())\n    except ZeroDivisionError:\n        pass","533c9b71":"#Comparing Human Coronavirus RNA\nfrom Bio import pairwise2\n\nSARS = SeqIO.read(\"..\/input\/coronavirus-accession-sars-mers-cov2\/sars.fasta\", \"fasta\")\nMERS = SeqIO.read(\"..\/input\/coronavirus-accession-sars-mers-cov2\/mers.fasta\", \"fasta\")\nCOV2 = SeqIO.read(\"..\/input\/coronavirus-accession-sars-mers-cov2\/cov2.fasta\", \"fasta\")","ea7fd77d":"#Squiggle wont work in Kaggle kernels, you need to run this command on terminal.\n\nSquiggle cov2.fasta sars.fasta mers.fasta --method=gates --separate","9e3a61b3":"# Alignments using pairwise2 alghoritm\n\nSARS_COV = pairwise2.align.globalxx(SARS.seq, COV2.seq, one_alignment_only=True, score_only=True)\nprint('SARS\/COV Similarity (%):', SARS_COV \/ len(SARS.seq) * 100)\n\nMERS_COV = pairwise2.align.globalxx(MERS.seq, COV2.seq, one_alignment_only=True, score_only=True)\nprint('MERS\/COV Similarity (%):', MERS_COV \/ len(MERS.seq) * 100)\n\nMERS_SARS = pairwise2.align.globalxx(MERS.seq, SARS.seq, one_alignment_only=True, score_only=True)\nprint('MERS\/SARS Similarity (%):', MERS_SARS \/ len(SARS.seq) * 100)","15e77bba":"# Plot the data\nX = ['SARS\/COV2', 'MERS\/COV2', 'MERS\/SARS']\nY = [SARS_COV\/ len(SARS.seq) * 100, MERS_COV\/ len(MERS.seq)*100, MERS_SARS\/len(SARS.seq)*100]\nplt.title('Sequence identity (%)')\nplt.bar(X,Y,color=(0.2, 0.4, 0.6, 0.6))","5ecb8677":"### So we can conclude that COVID-19 is closely related to SARS rather then MERS.","f298781e":"We will use Bio.SeqIO from Biopython for parsing DNA sequence data(fasta). It provides a simple uniform interface to input and output assorted sequence file formats.","d5957711":"### Objective of this notebook\n\nIn this notebook, we will interpret, analyze the **COVID-19 DNA sequence data**, and try to get as many insights regarding the proteins that made it up. Later will compare COVID-19 DNA with **MERS** and **SARS** and we\u2019ll understand the relationship among them.","c0e6056d":"The emerging global infectious COVID-19 coronavirus disease by novel **Severe Acute Respiratory Syndrome Coronavirus 2 (SARS-CoV-2)** presents critical fulminations to global public health and the economy since it was identified in late December 2019 in China.\n\n\nCoronaviruses are a large family of viruses that can cause illnesses ranging widely in severity. The first known severe illness caused by a coronavirus appeared with the 2003 **Severe Acute Respiratory Syndrome (SARS)** epidemic in China. A second outbreak of severe illness originated in 2012 in Saudi Arabia with the **Middle East Respiratory Syndrome (MERS)**. And now the ongoing outbreak of COVID-19.\n\n\n\u201cBy comparing the available genome sequence data for known coronavirus strains, we can firmly determine that COVID-19 originated through natural processes,\u201d said Kristian Andersen, Ph.D., an associate professor of immunology and microbiology at Scripps Research and corresponding author on the paper.","8e6bf941":"Before comparing the similarity let us visualize the DNA each of COV2, SARS, and MERS respectively.","4d659789":"The `transcribe()` method will convert the DNA to mRNA.","e9b45d8a":"Protein Analysis With The Protparam Module In Biopython using ProtParam.\n\n\nAvailable Tools in ProtParam:\n\n**count_amino_acids**: Simply count the number times an amino acid is repeated in the protein sequence.\n\n**get_amino_acids_percent**: The same as only returns the number in the percentage of the entire sequence.\n\n**molecular_weight**: Calculates the molecular weight of a protein.\n\n**aromaticity**: Calculates the aromaticity value of a protein according to Lobry & Gautier (1994, Nucleic Acids Res., 22, 3174-3180).\n\n**flexibility**: Implementation of the flexibility method of Vihinen et al. (1994, Proteins, 19, 141-149).\n\n**isoelectric_point**: This method uses the module IsoelectricPoint to calculate the pI of a protein.\n\n**secondary_structure_fraction**: This method returns a list of the fraction of amino acids that tend to be in helix, turn, or sheet.\n\nAmino acids in Helix: V, I, Y, F, W, L.\n\nAmino acids in Turn: N, P, G, S.\n\nAmino acids in Sheet: E, M, A, L.\n\nThe list contains 3 values: [Helix, Turn, Sheet].","17fa6a94":"# Coronavirus COVID-19, MERS and SARS Genome Analysis","36cc2c00":"#### What are coronaviruses?\n\nThe coronaviruses are members of a family of enveloped viruses that replicate in the cytoplasm of animal host cells. They are identified by the presence of a single-stranded plus-sense RNA genome((+)ssRNA classification of viruses) about 30 kb in length that has a 5\u2032 cap structure and 3\u2032 polyadenylation tract. (Larget known virus).\n\n\nNow let us play with the COVID2\u201319 DNA sequence data using python.\n\n\nTo start with, install Python packages like Biopython and squiggle will help you when dealing with biological sequence data in Python.","546b00aa":"![2AP1TD2-b598c7937e0cb7c3ddb3d98f6d897d82.jpg](attachment:2AP1TD2-b598c7937e0cb7c3ddb3d98f6d897d82.jpg)","dda783df":"Let\u2019s now identify all the Proteins (chains of amino acids), basically separating at the stop codon, marked by *. Then let\u2019s remove any sequence less than 20 amino acids long, as this is the smallest known functional protein (if curious).","14ed296d":"Phylogenetic analysis of the complete viral genome (29,903 nucleotides) revealed that the COVID-19 virus was most closely related (83.3% nucleotide similarity) to a group of SARS-like coronaviruses (genus Betacoronavirus, subgenus Sarbecovirus) that had previously been found in bats in China.\n\nPlot the results:","d4de2986":"![3eee0b_dcb3e08e590a487298d0899272e7e6a4_mv2.webp](attachment:3eee0b_dcb3e08e590a487298d0899272e7e6a4_mv2.webp)\n\nA series of codons in part of a messenger RNA (mRNA) molecule. Each codon consists of three nucleotides, usually corresponding to a single amino acid. The nucleotides are abbreviated with the letters A, U, G, and C. This is mRNA, which uses U (uracil). DNA uses T (thymine) instead. This mRNA molecule will instruct a ribosome to synthesize a protein according to this code. Source\n\n","39954318":"### Load the basic libraries","e5615b6b":"So it produces the sequence and length of the sequence.","7e938d71":"Since input sequence is FASTA (DNA), and Coronavirus is RNA type of virus, we need to:\n\n1. Transcribe DNA to RNA (ATTAAAGGTT\u2026 => AUUAAAGGUU\u2026)\n\n2. Translate RNA to Amino acid sequence (AUUAAAGGUU\u2026 => IKGLYLPR*Q\u2026)\n\nIn the current scenario, the .fna file starts with ATTAAAGGTT, then we call transcribe() so T (thymine) is replaced with U (uracil), so we get the RNA sequence which starts with AUUAAAGGUU.","331f8de6":"![3eee0b_3c3d5e0780dc4654b761c740991872e3_mv2.webp](attachment:3eee0b_3c3d5e0780dc4654b761c740991872e3_mv2.webp)","48a60f66":"### Now let us compare the similarity among COVID-19\/COV2, MERS, and SARS.\n\n\nLoad the DNA sequence file (FASTA) each of SARS, MERS, and COVID-19.","96ce91c9":"Loading Complementary DNA Sequence into an alignable file.","2fe8962d":"As we can observe the DNA structure of COV2 and SARS are almost identical, while that of MERS is a little different than the two.\n\n\nNow let us use the Sequence alignment technique to compare the similarity among all the DNA sequences.\n\n\nSequence alignment is the process of arranging two or more sequences (of DNA, RNA, or protein sequences) in a specific order to identify the region of similarity between them.\n\nIdentifying the similar region enables us to infer a lot of information like what traits are conserved between species, how close different species genetically are, how species evolve, etc.\n\n\nPairwise sequence alignment compares only two sequences at a time and provides the best possible sequence alignments. Pairwise is easy to understand and exceptional to infer from the resulting sequence alignment.\n\n\nBiopython provides a special module, Bio.pairwise2 to identify the alignment sequence using the pairwise method. Biopython applies the best algorithm to find the alignment sequence and it is par with other software.","96e2c45c":"In our scenario, the sequence looks like this: **IKGLYLPR*QTNQLSISCRSVL*TNFKICVAVTRLHA,** where:\n\n\n**IKGLYLPR** encodes the first protein (every letter encodes single amino-acid) **QTNQLSISCRSVL** encodes the second protein, and so on.\n\n\nNote that there are fewer sequences in the protein than the mRNA that is because 3 mRNA\u2019s are used to produce a single subunit of a protein, known as an amino acid, using the codon table shown below. The * is used to denote a stop codon, in these regions the protein has finished its full length. Many of these occur frequently and result in short lengths of protein, more likely than not these play a little biological role and will be excluded in further analyses.\n\n\n#### Okay, first understand what are Genetic code and DNA codon?\n\n\nThe Genetic code is the set of rules used by living cells to translate information encoded within genetic material (DNA or mRNA sequences of nucleotide triplets, or codons) into proteins.\n\n\nThe standard genetic code is traditionally represented as an RNA codon table because, when proteins are made in a cell by ribosomes, it is mRNA that directs protein synthesis. The mRNA sequence is determined by the sequence of genomic DNA. Here are some features of codons:\n\nMost codons specify an amino acid\n\nThree \u201cstop\u201d codons mark the end of a protein\n\nOne \u201cstart\u201d codon, AUG, marks the beginning of a protein and also encodes the amino acid methionine.","42df6b89":"![Screenshot%202021-01-21%20at%2010.05.04%20PM.png](attachment:Screenshot%202021-01-21%20at%2010.05.04%20PM.png)","bfe43cf6":"The difference between the DNA and the mRNA is just that the bases T (for Thymine) are replaced with U (for Uracil).\n\n\nNext, we need to translate the mRNA sequence to amino-acid sequence using translate() method, we get something like IKGLYLPR*Q ( is so-called STOP codon, effectively is a separator for proteins)."}}