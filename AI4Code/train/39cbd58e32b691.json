{"cell_type":{"6b15d517":"code","674c9789":"code","2134938a":"code","8e1b772f":"code","cd40c724":"code","84a79b36":"code","93d22bfe":"code","11b5656a":"code","ae9968f6":"code","92cdbb52":"code","420cd260":"code","ab936fc0":"code","bb451e3a":"code","4f667c54":"code","3d487aad":"code","04e8fbc4":"code","676dd23f":"code","b653a455":"code","8993d928":"code","4a2f52db":"code","30c907a8":"code","527bec84":"code","abe48ae3":"code","9565bae8":"code","8729b8d0":"code","1aabfbf6":"code","0e1b42ec":"code","39323eae":"code","0b0d7b5d":"code","8106c9ed":"code","74f9443c":"code","8dbf2bf5":"code","1d3e6f6e":"code","47fae6d0":"code","b4c3f352":"code","f3764fd0":"code","4dfd8563":"markdown","5ac9d303":"markdown","94206686":"markdown","2847de82":"markdown","3440c65a":"markdown","2485613d":"markdown","4e3974b3":"markdown","9635cddb":"markdown","fd8d5408":"markdown","5f2aa4dc":"markdown","7ff46098":"markdown","f481b11b":"markdown","cb9d21be":"markdown","270328ea":"markdown","4870d4a0":"markdown","9db48318":"markdown","c0491af2":"markdown","94c9c795":"markdown"},"source":{"6b15d517":"import pandas as pd","674c9789":"fashion_train_df = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_train.csv',sep=',')\nfashion_test_df = pd.read_csv('..\/input\/fashionmnist\/fashion-mnist_test.csv', sep = ',')","2134938a":"import pandas as pd # Import Pandas for data manipulation using dataframes\nimport numpy as np # Import Numpy for data statistical analysis \nimport matplotlib.pyplot as plt # Import matplotlib for data visualisation\nimport seaborn as sns\nimport random\n%matplotlib inline\nsns.set_style(\"whitegrid\")","8e1b772f":"fashion_train_df.shape","cd40c724":"fashion_test_df.shape","84a79b36":"fashion_train_df.head()","93d22bfe":"# Create training and testing arrays\ntrain = np.array(fashion_train_df, dtype = 'float32')\ntest = np.array(fashion_test_df, dtype='float32')","11b5656a":"class_names = ['T_shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n\n# Let's view some images!\ni = random.randint(1,60000) # select any random index from 1 to 60,000\nplt.imshow(train[i,1:].reshape((28,28))) # reshape and plot the image\n\nplt.imshow(train[i,1:].reshape((28,28)) , cmap = 'gray') # reshape and plot the image\nlabel_index = fashion_train_df[\"label\"][i]\nplt.title(f\"{class_names[label_index]}\")","ae9968f6":"label = train[i,0]\nlabel","92cdbb52":"# Define the dimensions of the plot grid \nW_grid = 5\nL_grid = 5\n\n# fig, axes = plt.subplots(L_grid, W_grid)\n# subplot return the figure object and axes object\n# we can use the axes object to plot specific figures at various locations\n\nfig, axes = plt.subplots(L_grid, W_grid, figsize = (12,12))\n\naxes = axes.ravel() # flaten the 15 x 15 matrix into 225 array\n\nn_train = len(train) # get the length of the train dataset\n\n# Select a random number from 0 to n_train\nfor i in np.arange(0, W_grid * L_grid): # create evenly spaces variables \n\n    # Select a random number\n    index = np.random.randint(0, n_train)\n    # read and display an image with the selected index    \n    axes[i].imshow( train[index,1:].reshape((28,28)) )\n    label_index = int(train[index,0])\n    axes[i].set_title(class_names[label_index], fontsize = 8)\n    axes[i].axis('off')\n\nplt.subplots_adjust(hspace=0.4)","420cd260":"# Prepare the training and testing dataset \nX_train = train[:, 1:] \/ 255\ny_train = train[:, 0]\n\nX_test = test[:, 1:] \/ 255\ny_test = test[:,0]","ab936fc0":"plt.figure(figsize=(10, 10))\nfor i in range(25):\n    plt.subplot(5, 5, i + 1)\n    plt.xticks([])\n    plt.yticks([])\n    plt.grid(False)\n    plt.imshow(X_train[i].reshape((28,28)), cmap=plt.cm.binary)\n    label_index = int(y_train[i])\n    plt.title(class_names[label_index])\nplt.show()","bb451e3a":"from sklearn.model_selection import train_test_split\nX_train, X_validate, y_train, y_validate = train_test_split(X_train, y_train, test_size = 0.2, random_state = 12345)","4f667c54":"print(X_train.shape)\nprint(y_train.shape)","3d487aad":"# unpack the tuple\nX_train = X_train.reshape(X_train.shape[0], *(28, 28, 1))\nX_test = X_test.reshape(X_test.shape[0], *(28, 28, 1))\nX_validate = X_validate.reshape(X_validate.shape[0], *(28, 28, 1))","04e8fbc4":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_validate.shape)","676dd23f":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout\nfrom keras.optimizers import Adam\nfrom keras.callbacks import TensorBoard","b653a455":"cnn_model = Sequential()\n\ncnn_model.add(Conv2D(32, (3, 3), input_shape = (28,28,1), activation='relu'))\ncnn_model.add(MaxPooling2D(pool_size = (2, 2)))\ncnn_model.add(Dropout(0.25))\n\ncnn_model.add(Conv2D(64, (3, 3), input_shape = (28,28,1), activation='relu'))\ncnn_model.add(MaxPooling2D(pool_size = (2, 2)))\ncnn_model.add(Dropout(0.25))\n\ncnn_model.add(Conv2D(128, (3, 3), input_shape = (28,28,1), activation='relu'))\ncnn_model.add(MaxPooling2D(pool_size = (2, 2)))\ncnn_model.add(Dropout(0.25))\n\ncnn_model.add(Flatten())\ncnn_model.add(Dense(units = 512, activation = 'relu'))\ncnn_model.add(Dropout(0.25))\ncnn_model.add(Dense(units = 10, activation = 'softmax'))","8993d928":"cnn_model.summary()","4a2f52db":"cnn_model.compile(loss ='sparse_categorical_crossentropy', optimizer='adam' ,metrics =['accuracy'])","30c907a8":"history = cnn_model.fit(X_train, y_train, batch_size = 512, epochs = 200, verbose = 1, validation_data = (X_validate, y_validate))","527bec84":"plt.figure(figsize=(12, 8))\n\nplt.subplot(2, 2, 1)\nplt.plot(history.history['loss'], label='Loss')\nplt.plot(history.history['val_loss'], label='val_Loss')\nplt.legend()\nplt.title('Loss evolution')\n\nplt.subplot(2, 2, 2)\nplt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['val_accuracy'], label='val_accuracy')\nplt.legend()\nplt.title('Accuracy evolution')","abe48ae3":"# get the predictions for the test data\npredicted_classes = cnn_model.predict_classes(X_test)","9565bae8":"type(predicted_classes)","8729b8d0":"predicted_classes","1aabfbf6":"np.save(\"test_images.npy\", predicted_classes)","0e1b42ec":"test_img = X_test[0]\nprediction = cnn_model.predict(X_test)\nprediction[0]","39323eae":"np.argmax(prediction[0])","0b0d7b5d":"L = 7\nW = 7\nfig, axes = plt.subplots(L, W, figsize = (18,18))\naxes = axes.ravel()\n\nfor i in np.arange(0, L * W):  \n    axes[i].imshow(X_test[i].reshape(28,28))\n    axes[i].set_title(f\"Prediction Class = {predicted_classes[i]:0.1f}\\n True Class = {y_test[i]:0.1f}\")\n    axes[i].axis('off')\n\nplt.subplots_adjust(wspace=0.5)","8106c9ed":"class_names = ['T_shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']","74f9443c":"from sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\ncm = metrics.confusion_matrix(y_test, predicted_classes)","8dbf2bf5":"cm","1d3e6f6e":"#Defining function for confusion matrix plot\ndef plot_confusion_matrix(y_true, y_pred, classes,\n                          normalize=False,\n                          title=None,\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if not title:\n        if normalize:\n            title = 'Normalized confusion matrix'\n        else:\n            title = 'Confusion matrix, without normalization'\n\n    # Compute confusion matrix\n    cm = confusion_matrix(y_true, y_pred)\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n#     print(cm)\n\n    fig, ax = plt.subplots(figsize=(7,7))\n    im = ax.imshow(cm, interpolation='nearest', cmap=cmap)\n    ax.figure.colorbar(im, ax=ax)\n    # We want to show all ticks...\n    ax.set(xticks=np.arange(cm.shape[1]),\n           yticks=np.arange(cm.shape[0]),\n           # ... and label them with the respective list entries\n           xticklabels=classes, yticklabels=classes,\n           title=title,\n           ylabel='True label',\n           xlabel='Predicted label')\n\n    # Rotate the tick labels and set their alignment.\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"right\",\n             rotation_mode=\"anchor\")\n    # Loop over data dimensions and create text annotations.\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i in range(cm.shape[0]):\n        for j in range(cm.shape[1]):\n            ax.text(j, i, format(cm[i, j], fmt),\n                    ha=\"center\", va=\"center\",\n                    color=\"white\" if cm[i, j] > thresh else \"black\")\n    fig.tight_layout()\n    return ax\n\n\nnp.set_printoptions(precision=2)","47fae6d0":"plt.figure(figsize = (20,20))\nplot_confusion_matrix(y_test, predicted_classes, classes=class_names, title='Normalized Confusion matrix')\nplt.show()","b4c3f352":"plt.figure(figsize = (20,20))\nplot_confusion_matrix(y_test, predicted_classes, classes=class_names, normalize=True, title='Normalized Confusion matrix')","f3764fd0":"from sklearn.metrics import classification_report\n\nnum_classes = 10\n\nprint(classification_report(y_test, predicted_classes))","4dfd8563":"[Fashion MNIST Dataset (Kaggle)](https:\/\/www.kaggle.com\/zalando-research\/fashionmnist)","5ac9d303":"Comiling the CNN model","94206686":"#Reference Reading\n[Fashion Apparel Recognition using Convolutional Neural Network](https:\/\/analyticsindiamag.com\/fashion-apparel-recognition-using-convolutional-neural-network\/)","2847de82":"# Mounting the Google Drive","3440c65a":"#Multi-Class Image Classification: Convolutional Neural Network for Fashin MNIST Apparel Recognition\nIt will be implemented in following steps:-\n* Getting the dataset\n* Analyzing the dataset\n* Visualizing the random samples\n* Preprocessing the data sets\n* Defining the CNN model\n* Training the CNN model\n* Making Predictions\n* Evaluating the performance","2485613d":"#Visializing the random samples","4e3974b3":"#Visualize the training performance","9635cddb":"#Reading the dataset","fd8d5408":"# Training the CNN model","5f2aa4dc":"[Optimizaers in Keras](https:\/\/keras.io\/api\/optimizers\/)","7ff46098":"Confusion matrix","f481b11b":"#Evaluating the performance","cb9d21be":"#Making predictions","270328ea":"#Preprocessing the dataset","4870d4a0":"# Analyzing the dataset","9db48318":"Classification report","c0491af2":"[Fashion MNIST Dataset (Original)](https:\/\/github.com\/zalandoresearch\/fashion-mnist)","94c9c795":"#Defining the CNN Model"}}