{"cell_type":{"838bf2f7":"code","a5c9ca24":"code","6c1b07b9":"code","7c094cbe":"code","743c53d1":"code","29d525d2":"code","3a1a0509":"code","dc85c1d5":"code","3ec5190b":"code","2e84a3b0":"code","919dadff":"code","abba506a":"code","f4581d6d":"code","604ccd5e":"code","bb359f2f":"code","d2f20cb0":"code","210c39ff":"code","30a244af":"code","456b70b3":"code","aa4464da":"code","03263e9c":"code","ae067106":"code","f3bc073c":"code","0f3bf40f":"code","a09ee27f":"code","2a87969d":"code","98992d61":"code","9be43a6a":"code","29575286":"code","8790a860":"code","61d2a5a1":"code","33f7f590":"code","22d35c57":"code","f33ad576":"code","0b97ea3e":"code","c0f05465":"code","65d98aaf":"code","efc68b26":"code","1eccee2c":"code","e1ae3ba7":"code","1b7634d7":"code","4eaed6f7":"code","28a4e767":"code","e28b8a50":"code","d74e746a":"code","2e7b7775":"code","533c9bfe":"code","d2a413fa":"code","bf81502f":"code","2b3fe1b2":"code","c2577006":"code","3f6c11ab":"code","b6bab409":"code","7c565935":"code","cbaad837":"code","eee06313":"code","81edf4cd":"code","3c8ec635":"code","e7415560":"code","c6f02495":"code","4f8fc676":"code","e72b2504":"code","4079842f":"code","b177b077":"code","abdd69e6":"code","86d3d60c":"code","c7cba22c":"code","d469d62c":"code","01d0a611":"code","8e861235":"code","8158378d":"code","d6e49b85":"code","e52f57f4":"code","774ac1ca":"code","f7d88141":"code","7284be75":"code","ce57683e":"code","428572c0":"code","cbca0c08":"code","0fae8093":"code","d0db9fe7":"code","51881168":"code","384e5f4b":"code","ade21b88":"code","eb84cb17":"code","9581f129":"code","1593f33d":"code","bd8991d4":"code","3e5e163e":"code","8327bcd8":"code","4946c480":"code","487d1f4c":"code","ea261125":"code","226ce891":"code","66c7545b":"code","d53c49ec":"code","d94c4faa":"code","768db7d5":"code","e3f7c287":"code","9ae7fb69":"code","9d4623fb":"code","89c3698f":"code","e4794272":"code","b1106f4c":"code","55678d5d":"code","c1d36727":"code","0b18ab26":"code","bd1be0b2":"code","627a801f":"code","cdf368c3":"code","570e95ac":"code","809710ad":"code","81c3dff5":"code","dcb3405d":"code","9aa9b039":"markdown","f62bee37":"markdown","4ae4d5a0":"markdown","36f2f890":"markdown","07f2f015":"markdown","03a6a69b":"markdown","dcbfa89b":"markdown","f509ec77":"markdown","3f0b4861":"markdown","332143e6":"markdown","60817111":"markdown","521607cf":"markdown","7665eed7":"markdown","9ec767bd":"markdown","9fe9bf8c":"markdown"},"source":{"838bf2f7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a5c9ca24":"import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', usecols = ['Age', 'Fare', 'Survived'])\ndf.head()","6c1b07b9":"df.isnull().sum()","7c094cbe":"df.isnull().mean()","743c53d1":"df['Age'].dropna().sample(df['Age'].isnull().sum(), random_state = 0)","29d525d2":"def impute_nan(df, variable, median):\n    df[variable+\"_median\"] = df[variable].fillna(median)\n    df[variable+\"_random\"] = df[variable]\n    \n    ## It will have the random sample to fill the na\n    \n    random_sample = df[variable].dropna().sample(df[variable].isnull().sum(), random_state = 0)\n    ## Pandas need to have same index in order to merge the dataset\n    random_sample.index = df[df[variable].isnull()].index\n    df.loc[df[variable].isnull(), variable+\"_random\"] = random_sample","3a1a0509":"median = df.Age.median()","dc85c1d5":"median","3ec5190b":"impute_nan(df, \"Age\", median)","2e84a3b0":"df.head()","919dadff":"import matplotlib.pyplot as plt\n%matplotlib inline","abba506a":"fig = plt.figure()\nax = fig.add_subplot(111)\ndf['Age'].plot(kind = 'kde', ax = ax)\ndf.Age_median.plot(kind = 'kde', ax = ax, color = 'red')\ndf.Age_random.plot(kind = 'kde', ax = ax, color = 'green')\nlines, labels = ax.get_legend_handles_labels()\nax.legend(lines, labels, loc='best')","f4581d6d":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', usecols = ['Age', 'Fare', 'Survived'])\ndf.head()","604ccd5e":"import numpy as np\ndf['Age_NAN'] = np.where(df['Age'].isnull(), 1, 0)","bb359f2f":"df.head()","d2f20cb0":"df.Age.median()","210c39ff":"df['Age'].fillna(df.Age.median(), inplace=True)","30a244af":"df.head(50)","456b70b3":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', usecols = ['Age', 'Fare', 'Survived'])\ndf.head()","aa4464da":"df.Age.hist(bins = 20)","03263e9c":"extreme = df.Age.mean()+3*df.Age.std()","ae067106":"import seaborn as sns\nsns.distplot(df.Age)","f3bc073c":"sns.boxplot(df.Age)","0f3bf40f":"def impute_nan(df, variable, median, extreme):\n    df[variable+\"_end_distribution\"] = df[variable].fillna(extreme)\n    df[variable].fillna(median, inplace = True)","a09ee27f":"impute_nan(df, 'Age', df.Age.median(), extreme)","2a87969d":"df.head()","98992d61":"df['Age'].hist(bins=50)","9be43a6a":"df.head()","29575286":"sns.boxplot('Age_end_distribution', data = df)","8790a860":"import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', usecols = ['Age', 'Fare', 'Survived'])\ndf.head()","61d2a5a1":"import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', usecols = ['Age', 'Fare', 'Survived'])\ndf.head()","33f7f590":"def impute_nan(df, variable):\n    df[variable + \"_zeros\"] = df[variable].fillna(0)\n    df[variable + \"_hundred\"] = df[variable].fillna(100)","22d35c57":"df['Age'].hist(bins = 50)","f33ad576":"import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', usecols = ['Sex'])\ndf.head()","0b97ea3e":"pd.get_dummies(df, drop_first = True).head()","c0f05465":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', usecols = ['Embarked'])","65d98aaf":"df['Embarked'].unique()","efc68b26":"df.dropna(inplace=True)","1eccee2c":"pd.get_dummies(df, drop_first = False).head()","e1ae3ba7":"pd.get_dummies(df, drop_first = True).head()","1b7634d7":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', usecols = ['Cabin', 'Survived'])\ndf.head()","4eaed6f7":"df['Cabin'].fillna('Missing', inplace = True)","28a4e767":"df.head()","e28b8a50":"df['Cabin'] = df['Cabin'].astype(str).str[0]","d74e746a":"df.head()","2e7b7775":"df.Cabin.unique()","533c9bfe":"df.groupby(['Cabin'])['Survived'].mean()","d2a413fa":"df.groupby(['Cabin'])['Survived'].mean().sort_values().index","bf81502f":"ordinal_labels = df.groupby(['Cabin'])['Survived'].mean().sort_values().index\nordinal_labels","2b3fe1b2":"ordinal_labels2 = {k:i for i,k in enumerate(ordinal_labels,0)}\nordinal_labels2","c2577006":"df['Cabin_ordinal_labels'] = df['Cabin'].map(ordinal_labels2)\ndf.head()","3f6c11ab":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', usecols = ['Pclass', 'Age', 'Fare', 'Survived'])\ndf.head()","b6bab409":"df['Age'].fillna(df.Age.median(), inplace = True)","7c565935":"df.isnull().sum()","cbaad837":"#### Standardization: We use teh standardscaler from sklearn library\n\nfrom sklearn.preprocessing import StandardScaler","eee06313":"scaler = StandardScaler()\n\n### fit vs fit_transform\n\ndf_scaled = scaler.fit_transform(df)","81edf4cd":"pd.DataFrame(df_scaled, columns = df.columns)","3c8ec635":"import matplotlib.pyplot as plt\n%matplotlib inline","e7415560":"plt.hist(df_scaled[:, 1], bins=20)","c6f02495":"plt.hist(df_scaled[:, 2], bins=20)","4f8fc676":"plt.hist(df_scaled[:, 3], bins=20)","e72b2504":"plt.hist(df['Fare'], bins=20)","4079842f":"from sklearn.preprocessing import MinMaxScaler\nmin_max = MinMaxScaler()\ndf_minmax = pd.DataFrame(min_max.fit_transform(df), columns = df.columns)\ndf_minmax.head()","b177b077":"plt.hist(df_minmax['Pclass'], bins = 20)","abdd69e6":"plt.hist(df_minmax['Fare'], bins = 20)","86d3d60c":"plt.hist(df_minmax['Age'], bins = 20)","c7cba22c":"#### Robust Scaling\n\n\nfrom sklearn.preprocessing import RobustScaler\nscaler = RobustScaler()\ndf_robust = pd.DataFrame(scaler.fit_transform(df), columns = df.columns)\ndf_robust.head()","d469d62c":"plt.hist(df_robust['Age'], bins = 20)","01d0a611":"plt.hist(df_robust['Fare'], bins = 20)","8e861235":"plt.hist(df_robust['Pclass'], bins = 20)","8158378d":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', usecols = ['Survived', 'Age', 'Fare'])\ndf.head()","d6e49b85":"df['Age'] = df['Age'].fillna(df['Age'].median())","e52f57f4":"df.isnull().sum()","774ac1ca":"import scipy.stats as stat\nimport pylab","f7d88141":"def plot_data(df, feature):\n    plt.figure(figsize = (10,6))\n    plt.subplot(1,2,1)\n    df[feature].hist()\n    plt.subplot(1,2,2)\n    stat.probplot(df[feature], dist='norm', plot = pylab)\n    plt.show()\n    ","7284be75":"plot_data(df, 'Age')","ce57683e":"import numpy as np\ndf['Age_log'] = np.log(df['Age'])\nplot_data(df, 'Age_log')","428572c0":"df['Age_reciprocal'] = 1\/df['Age']\nplot_data(df, 'Age_reciprocal')","cbca0c08":"df['Age_square'] = df['Age']**(1\/2)\nplot_data(df, 'Age_square')","0fae8093":"df['Age_exponential'] = df['Age']**(1\/1.2)\nplot_data(df, 'Age_exponential')","d0db9fe7":"df['Age_Boxcox'], parameters = stat.boxcox(df['Age'])\nplot_data(df, 'Age_Boxcox')","51881168":"#### Fare\n\n#I have used 1p here to avoid the error of zero\n\ndf['Fare_log'] = np.log1p(df['Fare'])\nplot_data(df,'Fare_log')","384e5f4b":"df['Fare_Boxcox'], parameters = stat.boxcox(df['Fare']+1)\nplot_data(df, 'Fare_Boxcox')","ade21b88":"df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf.head()","eb84cb17":"df['Age'].isnull().sum()","9581f129":"import seaborn as sns\nsns.distplot(df['Age'])","1593f33d":"sns.distplot(df['Age'].dropna())","bd8991d4":"sns.distplot(df['Age'].fillna(100))","3e5e163e":"figure = df.Age.hist(bins=50)\nfigure.set_title('Age')\nfigure.set_xlabel('Age')\nfigure.set_ylabel('No of Passenger')","8327bcd8":"figure = df.boxplot(column='Age')","4946c480":"df['Age'].describe()","487d1f4c":"### Assuming age follows a gaussian distribution we will calculate the \n### boundaries which differentiate the outliers\n\ndf['Age'].mean()","ea261125":"upper_boundary = df['Age'].mean() + 3*df['Age'].std()\nlower_boundary = df['Age'].mean() - 3*df['Age'].std()","226ce891":"upper_boundary","66c7545b":"lower_boundary","d53c49ec":"### Interquantile range (IQR)\n\nIQR = df.Age.quantile(0.75)-df.Age.quantile(0.25)\nIQR","d94c4faa":"\n\nlower_bridge = df['Age'].quantile(0.25) - (IQR*1.5)\nupper_bridge = df['Age'].quantile(0.75) + (IQR*1.5)\n\nprint(lower_bridge)\nprint(upper_bridge)","768db7d5":"### Extreme Outliers\n\nlower_bridge = df['Age'].quantile(0.25) - (IQR*3)\nupper_bridge = df['Age'].quantile(0.75) + (IQR*3)\n\nprint(lower_bridge)\nprint(upper_bridge)","e3f7c287":"figure = df.Fare.hist(bins=50)\nfigure.set_title('Fare')\nfigure.set_xlabel('Fare')\nfigure.set_ylabel('No of Passenger')","9ae7fb69":"figure = df.boxplot(column='Fare')","9d4623fb":"df['Fare'].describe()","89c3698f":"### Interquantile range (IQR)\n\nIQR = df.Fare.quantile(0.75)-df.Fare.quantile(0.25)\nIQR","e4794272":"lower_bridge = df['Fare'].quantile(0.25) - (IQR*1.5)\nupper_bridge = df['Fare'].quantile(0.75) + (IQR*1.5)\n\nprint(lower_bridge)\nprint(upper_bridge)","b1106f4c":"## Extreme Outliers\n\nlower_bridge = df['Fare'].quantile(0.25) - (IQR*3)\nupper_bridge = df['Fare'].quantile(0.75) + (IQR*3)\n\nprint(lower_bridge)\nprint(upper_bridge)","55678d5d":"data = df.copy()","c1d36727":"data.loc[data['Age']>=73, 'Age'] = 73","0b18ab26":"data.head()","bd1be0b2":"data.loc[data['Fare'] >= 100, 'Fare'] = 100","627a801f":"data.head()","cdf368c3":"figure = data.Fare.hist(bins=50)\nfigure.set_title('Fare')\nfigure.set_xlabel('Fare')\nfigure.set_ylabel('No of Passenger')","570e95ac":"figure = data.Age.hist(bins=50)\nfigure.set_title('Age')\nfigure.set_xlabel('Age')\nfigure.set_ylabel('No of Passenger')","809710ad":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(data[['Age', 'Fare']].fillna(0), data['Survived'], test_size = 0.3)","81c3dff5":"###\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, roc_auc_score\n\n\nclassifier = LogisticRegression()\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\ny_pred1 = classifier.predict_proba(X_test)\n\n\nprint(\"Accuracy_score: {}\".format(accuracy_score(y_test, y_pred)))\nprint(\"roc_auc_score: {}\".format(roc_auc_score(y_test, y_pred1[:,1])))","dcb3405d":"###\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, roc_auc_score\n\n\nclassifier = RandomForestClassifier()\nclassifier.fit(X_train, y_train)\ny_pred = classifier.predict(X_test)\ny_pred1 = classifier.predict_proba(X_test)\n\n\nprint(\"Accuracy_score: {}\".format(accuracy_score(y_test, y_pred)))\nprint(\"roc_auc_score: {}\".format(roc_auc_score(y_test, y_pred1[:,1])))","9aa9b039":"#### Logarithmic Transformation","f62bee37":"### BoxCox Transformation","4ae4d5a0":"### Square Root Transformation","36f2f890":"## Capturing NAN Values with a new feature","07f2f015":"#### End of Distribution Imputation","03a6a69b":"### Exponential Transformation\n","dcbfa89b":"### Feature is Skewed","f509ec77":"### Gaussian Distribution","3f0b4861":"### Reciprocal Transformation","332143e6":"## Standardization and Transformations\n","60817111":"### Arbitrary Value Imputation","521607cf":"## Gaussian Tansformation","7665eed7":"### Outliers","9ec767bd":"### Day 3\n","9fe9bf8c":"## Categorical Features"}}