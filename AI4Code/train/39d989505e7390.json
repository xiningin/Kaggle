{"cell_type":{"ce1354f8":"code","84eacc8e":"code","a71df529":"code","053cf2b7":"code","be61fad5":"code","22e3b552":"code","59e1d0d0":"markdown","b86c4b98":"markdown"},"source":{"ce1354f8":"import numpy as np\nimport pandas as pd \nfrom skimage.data import imread\nimport matplotlib.pyplot as plt\nimport os\nfrom keras.preprocessing.image import load_img\nfrom tqdm import tqdm_notebook\nprint(os.listdir(\"..\/input\"))","84eacc8e":"Train_Image_folder='..\/input\/train\/'\nTest_Image_folder='..\/input\/test\/'\nTrain_Image_name=os.listdir(path=Train_Image_folder)\nTest_Image_name=os.listdir(path=Test_Image_folder)\nTrain_Image_path=[]\nTrain_Mask_path=[]\nTrain_id=[]\nfor i in Train_Image_name:\n    path1=Train_Image_folder+i\n    id1=i.split(sep='.')[0]\n    Train_Image_path.append(path1)\n    Train_id.append(id1)\n \ndf_Train_path=pd.DataFrame({'ImageId':Train_id,'Train_Image_path':Train_Image_path})\nprint('Train Shape: ',df_Train_path.shape)\ndf_Train_path.head()","a71df529":"Test_Image_path=[]\nTest_id=[]\nfor i in Test_Image_name:\n    path=Test_Image_folder+i\n    id2=i.split(sep='.')[0]\n    Test_Image_path.append(path)\n    Test_id.append(id2)\ndf_Test_path=pd.DataFrame({'ImageId':Test_id,'Test_Image_path':Test_Image_path})\nprint('Test Shape: ',df_Test_path.shape)\ndf_Test_path.head()","053cf2b7":"masks = pd.read_csv('..\/input\/train_ship_segmentations.csv')\nprint('Mask Shape: ',masks.shape)\nmasks.head()","be61fad5":"# ref: https:\/\/www.kaggle.com\/paulorzp\/run-length-encode-and-decode\ndef rle_decode(mask_rle, shape=(768, 768)):\n    '''\n    mask_rle: run-length as string formated (start length)\n    shape: (height,width) of array to return \n    Returns numpy array, 1 - mask, 0 - background\n\n    '''\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape).T  # Needed to align to RLE direction","22e3b552":"#https:\/\/www.kaggle.com\/inversion\/run-length-decoding-quick-start\nImageId = '0005d01c8.jpg'\n\nimg = imread('..\/input\/train\/' + ImageId)\nimg_masks = masks.loc[masks['ImageId'] == ImageId, 'EncodedPixels'].tolist()\n\n# Take the individual ship masks and create a single mask array for all ships\nall_masks = np.zeros((768, 768))\nfor mask in img_masks:\n    all_masks += rle_decode(mask)\n\nfig, axarr = plt.subplots(1, 3, figsize=(15, 40))\naxarr[0].axis('off')\naxarr[1].axis('off')\naxarr[2].axis('off')\naxarr[0].imshow(img)\naxarr[1].imshow(all_masks)\naxarr[2].imshow(img)\naxarr[2].imshow(all_masks, alpha=0.4)\nplt.tight_layout(h_pad=0.1, w_pad=0.1)\nplt.show()","59e1d0d0":"## 2. Basic Visualization","b86c4b98":"## 1. Loading Libraries and Dataset"}}