{"cell_type":{"ee050742":"code","cba76427":"code","b17ad3aa":"code","a4221bac":"code","8e9fea89":"code","c97c5afa":"code","39134b78":"code","e391efde":"code","d49fb2a8":"code","37fce62b":"code","f462d19a":"code","bcd322b4":"code","b25d3b26":"code","499711ea":"code","cb5802b7":"code","0a120bc4":"markdown","15fbc36a":"markdown","213c5fcd":"markdown","db462dc7":"markdown","86492b56":"markdown","e4842620":"markdown","f82bfcd4":"markdown","21e74bee":"markdown","139b0ad7":"markdown","86abc300":"markdown","183c4eff":"markdown"},"source":{"ee050742":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cba76427":"!pip install networkx\n!pip install gensim\n!pip install torch\n!pip install tensorflow","b17ad3aa":"train_df=pd.read_csv('..\/input\/google-quest-challenge\/train.csv')\ntrain_df.head()","a4221bac":"import networkx as nx\nimport scipy\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\n\ntrain_df=pd.read_csv('..\/input\/google-quest-challenge\/train.csv')\nprint(train_df.columns)\ng=nx.from_pandas_edgelist(train_df[:500],source='question_body',target='category')\nnx.draw(g)\nedgelist=[]\ned_c=g.number_of_edges()\nfor e in g.edges():\n    node1=e[0]\n    node2=e[1]\n    n_c=0\n    n_c+=len([j for j in g.neighbors(node1)])\n    n_c+=len([j for j in g.neighbors(node2)])\n    normalized_count=n_c\/ed_c\n    g[e[0]][e[1]]['weight']=normalized_count\n\nnx.draw(g,pos=nx.spring_layout(g))","8e9fea89":"import tensorflow as tf\n\nclass Loss():\n    def reconstruction_loss(self,beta):\n        self.beta=beta\n        def cal(y_pred,y_true):\n            delta=tf.square((y_pred-y_true)*self.beta)\n            return tf.reduce_sum(delta)\n        return cal\n    def loss_laplace(self,alpha):\n        self.alpha=alpha\n        def cal(y_true, y_pred):\n            L = y_true\n            Y = y_pred\n            batch_size = tf.cast(tf.keras.backend.shape(L)[0], tf.float32)\n            return self.alpha * 2 * tf.linalg.trace(tf.matmul(tf.matmul(Y, L, transpose_a=True), Y)) \/ batch_size\n        return cal\n\nclass SDNE():\n    def __init__(self,graph,alpha,beta,hidden_dims):\n        self.graph=graph\n        self.alpha=alpha\n        self.beta=beta\n        self.hidden_dims=hidden_dims\n        self.A=nx.adjacency_matrix(self.graph,nodelist=range(self.graph.number_of_nodes()))\n        idx=np.arange(self.graph.number_of_nodes())\n        degree_vals=np.array([(self.graph.degree[node]) for node in list(self.graph.nodes())])\n        n=self.graph.number_of_nodes()\n        #(data,row,columns)\n        self.D=scipy.sparse.coo_matrix((degree_vals,(idx,idx)),shape=(n,n))\n        #self.D=nx.from_scipy_sparse_matrix(D)\n        \n        L=self.D-self.A\n        L=nx.from_scipy_sparse_matrix(L)\n        self.L=nx.laplacian_matrix(L)\n        self.inputs=[self.A,self.L]\n        self.embeddings=[]\n        self.node_size=self.graph.number_of_nodes()\n        self.model()\n        \n    def create_model(self): \n        node_size=self.graph.number_of_nodes()\n        A = tf.keras.layers.Input(shape=(node_size,))\n        L = tf.keras.layers.Input(shape=(None,))\n        encoder_module = A\n        for i in range(len(self.hidden_dims)):\n            if i == len(self.hidden_dims) - 1:\n                encoder_module = tf.keras.layers.Dense(self.hidden_dims[i], activation='sigmoid', name='encoders')(encoder_module)\n            else:\n                encoder_module = tf.keras.layers.Dense(self.hidden_dims[i], activation='relu')(encoder_module)\n        Y = encoder_module\n        for i in reversed(range(len(self.hidden_dims) - 1)):\n            decoder_module = tf.keras.layers.Dense(self.hidden_dims[i], activation='relu')(encoder_module)\n\n        A_ = tf.keras.layers.Dense(node_size, 'relu', name='decoder')(decoder_module)\n        self.models = tf.keras.Model(inputs=[A, L], outputs=[A_, Y])\n        self.emb = tf.keras.Model(inputs=A, outputs=Y)\n        return self.models, self.emb\n\n    def model(self, opt='adam',epochs=10, initial_epoch=0, verbose=1):\n\n        self.models, self.emb_model = self.create_model()\n        loss=Loss()\n        self.models.compile(opt, [loss.reconstruction_loss(self.beta), loss.loss_laplace(self.alpha)])\n#         self.train(1,0,1)\n        self.get_embeddings()\n        batch_size = self.node_size\n        print(self.models.summary())\n        print(self.A.todense())\n        return self.models.fit([self.A.todense(), self.L.todense()], [self.A.todense(), self.L.todense()],\n                                  batch_size=batch_size, epochs=epochs, initial_epoch=initial_epoch, verbose=verbose)\n    #def train(self,epochs=10, initial_epoch=0, verbose=1):\n    def get_embeddings(self):\n        \n        embeddings = self.emb_model.predict(self.A.todense(), batch_size=self.node_size)\n        for _,emb in enumerate(embeddings):\n            self.embeddings.append(emb)\n        return self.embeddings   \n    \n    def node_level_embedding(self,node,embed):\n        embed_node=embed[node]\n        vals=list(self.graph.nodes())\n        def chebyshev_distance(node1,node2):\n            return scipy.spatial.distance.chebyshev(node1,node2)\n        distances=[]\n        questions=[]\n        for i in range(self.graph.number_of_nodes()):\n            if i!=node:\n                distances.append(chebyshev_distance(embed_node,embed[i]))\n                questions.append(vals[i])\n        return vals[node],distances,questions\ng=nx.from_pandas_edgelist(train_df[:5000],source='question_body',target='category')\n#nx.draw(g)\n\ndf=pd.DataFrame(columns=['Q1','Qn'])\ndf['Q1']=[train_df['question_body'][0]]*1000\nlist_ques=[]\nfor i in range(1001):\n    if i!=0:\n        list_ques.append(train_df['question_body'][i])\ndf['Qn']=list_ques\n#g=nx.from_pandas_edgelist(df,source='Q1',target='Qn')\nnx.draw(g)\nhidden_dims=[32,16]\nalpha=1e-4\nbeta=1e-5\nsdne=SDNE(g,alpha,beta,hidden_dims)\nsdne.model()\nemb=sdne.get_embeddings()\n\nnode_num=339\nnode,distances,questions=sdne.node_level_embedding(node_num,emb)\nsdne_df=pd.DataFrame(columns=['Question','Sample_Question','Chebyshev_Distance'])\nsdne_df['Question']=[node]*len(distances)\nsdne_df['Sample_Question']=questions\nsdne_df['Chebyshev_Distance']=distances\nsdne_df.head()\n\nsdne_df.to_csv('..\/SDNE_Embeddings.csv',index=False)\n#print(emb)","c97c5afa":"from plotly.offline import download_plotlyjs, init_notebook_mode, iplot\nimport plotly\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\nsdne_g=nx.from_pandas_edgelist(sdne_df,source='Question',target='Sample_Question',edge_attr='Chebyshev_Distance')\nG=sdne_g\ndef plotter(G,title):\n    pos = nx.spring_layout(G, k=0.5, iterations=50)\n    for n, p in pos.items():\n        G.nodes[n]['pos'] = p\n    edge_trace = go.Scatter(\n        x=[],\n        y=[],\n        line=dict(width=0.5,color='#888'),\n        hoverinfo='none',\n        mode='lines')\n\n    for edge in G.edges():\n        x0, y0 = G.nodes[edge[0]]['pos']\n        x1, y1 = G.nodes[edge[1]]['pos']\n        edge_trace['x'] += tuple([x0, x1, None])\n        edge_trace['y'] += tuple([y0, y1, None])\n    node_trace = go.Scatter(\n        x=[],\n        y=[],\n        text=[],\n        mode='markers',\n        hoverinfo='text',\n        marker=dict(\n            showscale=True,\n            colorscale='RdBu',\n            reversescale=True,\n            color=[],\n            size=15,\n            colorbar=dict(\n                thickness=10,\n                title='Node Connections',\n                xanchor='left',\n                titleside='right'\n            ),\n            line=dict(width=0)))\n\n    for node in G.nodes():\n        x, y = G.nodes[node]['pos']\n        node_trace['x'] += tuple([x])\n        node_trace['y'] += tuple([y])\n    for node, adjacencies in enumerate(G.adjacency()):\n        node_trace['marker']['color']+=tuple([len(adjacencies[1])])\n        node_info = adjacencies[0] +' # of connections: '+str(len(adjacencies[1]))\n        node_trace['text']+=tuple([node_info])\n    fig = go.Figure(data=[edge_trace, node_trace],\n             layout=go.Layout(\n                title=title,\n                titlefont=dict(size=16),\n                showlegend=False,\n                hovermode='closest',\n                margin=dict(b=20,l=5,r=5,t=40),\n                annotations=[ dict(\n                    text=\"No. of connections\",\n                    showarrow=False,\n                    xref=\"paper\", yref=\"paper\") ],\n                xaxis=dict(showgrid=False, zeroline=False, showticklabels=False),\n                yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)))\n\n    iplot(fig)\nplotter(G,'SDNE Distance')","39134b78":"import tensorflow as tf\n\nclass Loss():\n    def kldivergence_loss(self,beta):\n        self.beta=beta\n        def cal(y_pred,y_true):\n            delta=(y_true*self.beta)*((tf.square(y_pred-y_true))\/(y_pred+1e-2))\n            return tf.reduce_sum(delta)\n#             return tf.keras.losses.KLDivergence(y_pred,y_true)\n        return cal\nclass LINE():\n    def __init__(self,graph,alpha,beta,hidden_dims):\n        self.graph=graph\n        self.alpha=alpha\n        self.beta=beta\n        self.hidden_dims=hidden_dims\n        self.A=nx.adjacency_matrix(self.graph,nodelist=range(self.graph.number_of_nodes()))\n        idx=np.arange(self.graph.number_of_nodes())\n        degree_vals=np.array([(self.graph.degree[node]) for node in list(self.graph.nodes())])\n        n=self.graph.number_of_nodes()\n        #(data,row,columns)\n        self.D=scipy.sparse.coo_matrix((degree_vals,(idx,idx)),shape=(n,n))\n        #self.D=nx.from_scipy_sparse_matrix(D)\n        \n        L=self.D-self.A\n        L=nx.from_scipy_sparse_matrix(L)\n        self.L=nx.laplacian_matrix(L)\n        self.inputs=[self.A,self.L]\n        self.embeddings=[]\n        self.node_size=self.graph.number_of_nodes()\n        self.model()\n        \n    def create_model(self): \n        node_size=self.graph.number_of_nodes()\n        A = tf.keras.layers.Input(shape=(node_size,))\n        L = tf.keras.layers.Input(shape=(None,))\n        encoder_module = A\n        for i in range(len(self.hidden_dims)):\n            if i == len(self.hidden_dims) - 1:\n                encoder_module = tf.keras.layers.Dense(self.hidden_dims[i], activation='sigmoid', name='encoders')(encoder_module)\n            else:\n                encoder_module = tf.keras.layers.Dense(self.hidden_dims[i], activation='relu')(encoder_module)\n        Y = encoder_module\n        for i in reversed(range(len(self.hidden_dims) - 1)):\n            decoder_module = tf.keras.layers.Dense(self.hidden_dims[i], activation='relu')(encoder_module)\n\n        A_ = tf.keras.layers.Dense(node_size, 'relu', name='decoder')(decoder_module)\n        self.models = tf.keras.Model(inputs=[A, L], outputs=[A_, Y])\n        self.emb = tf.keras.Model(inputs=A, outputs=Y)\n        return self.models, self.emb\n\n    def model(self, opt='adam',epochs=10, initial_epoch=0, verbose=1):\n\n        self.models, self.emb_model = self.create_model()\n        loss=Loss()\n        self.models.compile(opt, [loss.kldivergence_loss(self.beta)])\n#         self.train(1,0,1)\n        self.get_embeddings()\n        batch_size = self.node_size\n        print(self.models.summary())\n        print(self.A.todense())\n        return self.models.fit([self.A.todense(), self.L.todense()], [self.A.todense(), self.L.todense()],\n                                  batch_size=batch_size, epochs=epochs, initial_epoch=initial_epoch, verbose=verbose)\n    #def train(self,epochs=10, initial_epoch=0, verbose=1):\n    def get_embeddings(self):\n        \n        embeddings = self.emb_model.predict(self.A.todense(), batch_size=self.node_size)\n        for _,emb in enumerate(embeddings):\n            self.embeddings.append(emb)\n        return self.embeddings   \n    \n    def node_level_embedding(self,node,embed):\n        embed_node=embed[node]\n        vals=list(self.graph.nodes())\n        def chebyshev_distance(node1,node2):\n            return scipy.spatial.distance.chebyshev(node1,node2)\n        distances=[]\n        questions=[]\n        for i in range(self.graph.number_of_nodes()):\n            if i!=node:\n                distances.append(chebyshev_distance(embed_node,embed[i]))\n                questions.append(vals[i])\n        return vals[node],distances,questions\ng=nx.from_pandas_edgelist(train_df[:5000],source='question_body',target='category')\n#nx.draw(g)\n\ndf=pd.DataFrame(columns=['Q1','Qn'])\ndf['Q1']=[train_df['question_body'][0]]*1000\nlist_ques=[]\nfor i in range(1001):\n    if i!=0:\n        list_ques.append(train_df['question_body'][i])\ndf['Qn']=list_ques\n#g=nx.from_pandas_edgelist(df,source='Q1',target='Qn')\nnx.draw(g)\nhidden_dims=[32,16]\nalpha=1e-4\nbeta=1e-5\nline=LINE(g,alpha,beta,hidden_dims)\nline.model()\nemb=line.get_embeddings()\n\nnode_num=339\nnode,distances,questions=line.node_level_embedding(node_num,emb)\nline_df=pd.DataFrame(columns=['Question','Sample_Question','Chebyshev_Distance'])\nline_df['Question']=[node]*len(distances)\nline_df['Sample_Question']=questions\nline_df['Chebyshev_Distance']=distances\nline_df.head()\n\nline_df.to_csv('..\/LINE_Embeddings.csv',index=False)\n#print(emb)","e391efde":"line_g=nx.from_pandas_edgelist(line_df[:500],source='Question',target='Sample_Question',edge_attr='Chebyshev_Distance')\nG=line_g\nplotter(G,'LINE Distance')","d49fb2a8":"!pip install torch_geometric\n#!pip install tensorflow","37fce62b":"!pip install torch-scatter -f https:\/\/pytorch-geometric.com\/whl\/torch-1.8.0+cu102.html\n!pip install torch-sparse -f https:\/\/pytorch-geometric.com\/whl\/torch-1.8.0+cu102.html","f462d19a":"\nimport tensorflow as tf\nfrom tensorflow.keras.initializers import Identity, glorot_uniform, Zeros\nfrom tensorflow.keras.layers import Dropout, Input, Layer, Embedding, Reshape,LSTM\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.regularizers import l2\nimport networkx as nx\nimport scipy\nfrom sklearn.preprocessing import LabelEncoder\n\nclass GraphConvolution(tf.keras.layers.Layer):  # ReLU(AXW)\n\n    def __init__(self, units,\n                 activation=tf.nn.relu, dropout_rate=0.5,\n                 use_bias=True, l2_reg=0, \n                 seed=1024, **kwargs):\n        super(GraphConvolution, self).__init__(**kwargs)\n        self.units = units\n        self.use_bias = use_bias\n        self.l2_reg = l2_reg\n        self.dropout_rate = dropout_rate\n        self.activation = tf.keras.layers.Activation(tf.keras.activations.relu)\n        self.seed = seed\n        self.graph=graph\n        \n        \n    def build(self, input_shapes):\n        input_dim = int(input_shapes[0][-1])\n        \n        self.kernel = self.add_weight(shape=(input_dim,\n                                             self.units),\n                                      initializer=glorot_uniform(\n                                          seed=self.seed),\n                                      regularizer=l2(self.l2_reg),\n                                      name='kernel' )\n        \n        self.bias = self.add_weight(shape=(self.units,),\n                                        initializer=Zeros(),\n                                        name='bias')\n\n        self.dropout = Dropout(self.dropout_rate, seed=self.seed)\n\n        self.built = True\n        print('kernel shape',self.kernel.shape)\n        print('input dimension',input_dim)\n\n    def call(self, inputs, training=None, **kwargs):        \n        features, A = inputs\n        A=tf.sparse.to_dense(A)\n        \n        v1=tf.matmul(A,features)\n        \n        output = tf.matmul(A,self.kernel)\n        output += self.bias\n        act = self.activation(output)\n        \n        #act._uses_learning_phase = features._uses_learning_phase\n        return act\n\n    def get_config(self):\n        config = {'units': self.units,\n                  'activation': self.activation,\n                  'dropout_rate': self.dropout_rate,\n                  'l2_reg': self.l2_reg,\n                  'use_bias': self.use_bias,\n                 \n                  'seed': self.seed\n                  }\n\n        base_config = super(GraphConvolution, self).get_config()\n        return dict(list(base_config.items()) + list(config.items()))\n\n\ndef GCN(adj_dim,feature_dim,n_hidden, num_class, num_layers=2,activation=tf.nn.relu,dropout_rate=0.5, l2_reg=0 ):\n    Adj = Input(shape=(None,), sparse=True,name='first')\n    \n    X_in = Input(shape=(feature_dim,), sparse=False,name='second')\n    emb = Embedding(adj_dim, feature_dim,\n                        embeddings_initializer=Identity(1.0), trainable=False)\n    X_emb = emb(X_in)\n#     X_emb=LSTM(3235,return_sequences='True')(X_emb)\n#     print('Xemb',X_emb)\n#     H = Reshape([X_emb.shape[-1]])(X_emb)\n    H=X_emb\n    print('H shape',H)\n    \n    \n#     print(type(Adj))\n#     H=X_in\n    for i in range(3):\n        if i == num_layers - 1:\n            activation = tf.nn.softmax\n            n_hidden = num_class\n        h = GraphConvolution(n_hidden, activation=activation, dropout_rate=dropout_rate, l2_reg=l2_reg)([H,Adj])\n    output = h\n    model = Model(inputs=[X_in,Adj], outputs=output)\n    print(model.summary())\n    \n    return model\n\ndef encode_onehot(labels):\n    classes = set(labels)\n    classes_dict = {c: np.identity(len(classes))[i, :] for i, c in enumerate(classes)}\n    labels_onehot = np.array(list(map(classes_dict.get, labels)), dtype=np.int32)\n    return labels_onehot\ndef normalize_adj(adj, symmetric=True):\n    if symmetric:\n        d = scipy.sparse.diags(np.power(np.array(adj.sum(1)), -0.5).flatten(), 0)\n        a_norm = adj.dot(d).transpose().dot(d).tocsr()\n    else:\n        d = scipy.sparse.diags(np.power(np.array(adj.sum(1)), -1).flatten(), 0)\n        a_norm = d.dot(adj).tocsr()\n    return a_norm\n\n\ndef preprocess_adj(adj, symmetric=True):\n    adj = adj + scipy.sparse.eye(adj.shape[0])\n    adj = normalize_adj(adj, symmetric)\n    return adj\n\n\nlabel_y= LabelEncoder()\nlabels=label_y.fit_transform(train_df['category'][:5000])\n\n# y_train=list(set(list(labels)))\n\ny_train=encode_onehot(labels)\n\n# print(len(y_train))\ngraph=nx.from_pandas_edgelist(train_df[:5000],source='question_body',target='category')\n#nx.draw(g)\n# A=nx.adjacency_matrix(graph,nodelist=range(graph.number_of_nodes()))\n# idx=np.arange(graph.number_of_nodes())\n# degree_vals=np.array([(graph.degree[node]) for node in list(graph.nodes())])\n# n=graph.number_of_nodes()\n# D=scipy.sparse.coo_matrix((degree_vals,(idx,idx)),shape=(n,n))\n# L=D-A\n# L=nx.from_scipy_sparse_matrix(L)\n# L=nx.laplacian_matrix(L)\n# inputs=[A,L]\n# A=nx.adjacency_matrix(graph,nodelist=range(graph.number_of_nodes()))\n# A=preprocess_adj(A)\n# X = np.arange(A.shape[-1])\n# print(X)\n# feature_dim = A.shape[-1]\n# X_n=[]\n# for i in range(feature_dim):\n#     X_n.append(X)\n# X=np.asarray(X_n)\n# model_input = [A, A]\n# print('X',type(X))\n# print('A',type(A))\n\n# # print('feature_dim',feature_dim)\n# model = GCN(A.shape[-1],feature_dim, 32, y_train.shape[-1],  dropout_rate=0.5, l2_reg=2.5e-4 )\n# model.compile(optimizer='adam', loss='categorical_crossentropy',\n#                   weighted_metrics=['categorical_crossentropy', 'acc'])\n# print(type(model_input[0]),type(model_input[1]))\n\n# model.fit(model_input,y_train[:X.shape[-1]])\n\n\nA=nx.adjacency_matrix(graph,nodelist=range(graph.number_of_nodes()))\nA=preprocess_adj(A)\nfeature_dim = A.shape[-1]\nX = np.arange(A.shape[-1])\nX_n=[]\nfor i in range(feature_dim):\n    X_n.append(X)\nX=np.asarray(X_n)\n# print('X',X)\nmodel_input = [X, A]\n# print('X',type(X))\n# print('A',type(A))\n\n# print('feature_dim',feature_dim)\nmodel = GCN(A.shape[-1],feature_dim, 32, y_train.shape[-1],  dropout_rate=0.5, l2_reg=2.5e-4 )\nmodel.compile(optimizer='adam', loss='categorical_crossentropy',\n                  weighted_metrics=['categorical_crossentropy', 'acc'])\n# print(type(model_input[0]),type(model_input[1]))\n\nmodel.fit(model_input,y_train[:A.shape[-1]],epochs=20)","bcd322b4":"\nimport tensorflow as tf\nfrom tensorflow.keras.initializers import Identity, glorot_uniform, Zeros\nfrom tensorflow.keras.layers import Dropout, Input, Layer, Embedding, Reshape,LSTM\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.regularizers import l2\nimport networkx as nx\nimport scipy\nfrom sklearn.preprocessing import LabelEncoder\n\nclass GraphConvolution(tf.keras.layers.Layer):  # ReLU(AXW)\n\n    def __init__(self, units,\n                 activation=tf.nn.relu, dropout_rate=0.5,\n                 use_bias=True, l2_reg=0, \n                 seed=1024, **kwargs):\n        super(GraphConvolution, self).__init__(**kwargs)\n        self.units = units\n        self.use_bias = use_bias\n        self.l2_reg = l2_reg\n        self.dropout_rate = dropout_rate\n        self.activation = tf.keras.layers.Activation(tf.keras.activations.relu)\n        self.seed = seed\n        self.graph=graph\n        \n        \n    def build(self, input_shapes):\n        input_dim = int(input_shapes[0][-1])\n        \n        self.kernel = self.add_weight(shape=(input_dim,\n                                             self.units),\n                                      initializer=glorot_uniform(\n                                          seed=self.seed),\n                                      regularizer=l2(self.l2_reg),\n                                      name='kernel' )\n        \n        self.bias = self.add_weight(shape=(self.units,),\n                                        initializer=Zeros(),\n                                        name='bias')\n\n        self.dropout = Dropout(self.dropout_rate, seed=self.seed)\n\n        self.built = True\n        print('kernel shape',self.kernel.shape)\n        print('input dimension',input_dim)\n\n    def call(self, inputs, training=None, **kwargs):        \n        features, A = inputs\n        A=tf.sparse.to_dense(A)\n        \n        v1=tf.matmul(A,features)\n        \n        output = tf.matmul(A,self.kernel)\n        output += self.bias\n        act = self.activation(output)\n        \n        #act._uses_learning_phase = features._uses_learning_phase\n        return act\n\n    def get_config(self):\n        config = {'units': self.units,\n                  'activation': self.activation,\n                  'dropout_rate': self.dropout_rate,\n                  'l2_reg': self.l2_reg,\n                  'use_bias': self.use_bias,\n                 \n                  'seed': self.seed\n                  }\n\n        base_config = super(GraphConvolution, self).get_config()\n        return dict(list(base_config.items()) + list(config.items()))\n\n\ndef GCN(adj_dim,feature_dim,n_hidden, num_class, num_layers=2,activation=tf.nn.relu,dropout_rate=0.5, l2_reg=0 ):\n    Adj = Input(shape=(None,), sparse=True,name='first')\n    \n    X_in = Input(shape=(feature_dim,), sparse=False,name='second')\n    emb = Embedding(adj_dim, feature_dim,\n                        embeddings_initializer=Identity(1.0), trainable=False)\n    X_emb = emb(X_in)\n#     X_emb=LSTM(3235,return_sequences='True')(X_emb)\n#     print('Xemb',X_emb)\n#     H = Reshape([X_emb.shape[-1]])(X_emb)\n    H=X_emb\n    print('H shape',H)\n    \n    \n#     print(type(Adj))\n#     H=X_in\n    for i in range(3):\n        if i == num_layers - 1:\n            activation = tf.nn.softmax\n            n_hidden = num_class\n        h = GraphConvolution(n_hidden, activation=activation, dropout_rate=dropout_rate, l2_reg=l2_reg)([H,Adj])\n    output = h\n    model = Model(inputs=[X_in,Adj], outputs=output)\n    print(model.summary())\n    \n    return model\n\ndef encode_onehot(labels):\n    classes = set(labels)\n    classes_dict = {c: np.identity(len(classes))[i, :] for i, c in enumerate(classes)}\n    labels_onehot = np.array(list(map(classes_dict.get, labels)), dtype=np.int32)\n    return labels_onehot\ndef normalize_adj(adj, symmetric=True):\n    if symmetric:\n        d = scipy.sparse.diags(np.power(np.array(adj.sum(1)), -0.5).flatten(), 0)\n        a_norm = adj.dot(d).transpose().dot(d).tocsr()\n    else:\n        d = scipy.sparse.diags(np.power(np.array(adj.sum(1)), -1).flatten(), 0)\n        a_norm = d.dot(adj).tocsr()\n    return a_norm\n\n\ndef preprocess_adj(adj, symmetric=True):\n    adj = adj + scipy.sparse.eye(adj.shape[0])\n    adj = normalize_adj(adj, symmetric)\n    return adj\n\n\nlabel_y= LabelEncoder()\nlabels=label_y.fit_transform(train_df['category'][:5000])\n\n# y_train=list(set(list(labels)))\n\ny_train=encode_onehot(labels)\n\n# print(len(y_train))\ngraph=nx.from_pandas_edgelist(train_df[:5000],source='question_body',target='category')\n#nx.draw(g)\nA=nx.adjacency_matrix(graph,nodelist=range(graph.number_of_nodes()))\nidx=np.arange(graph.number_of_nodes())\ndegree_vals=np.array([(graph.degree[node]) for node in list(graph.nodes())])\nn=graph.number_of_nodes()\nD=scipy.sparse.coo_matrix((degree_vals,(idx,idx)),shape=(n,n))\nL=D-A\nL=nx.from_scipy_sparse_matrix(L)\nL=nx.laplacian_matrix(L)\n# inputs=[A,L]\n# A=nx.adjacency_matrix(graph,nodelist=range(graph.number_of_nodes()))\n# A=preprocess_adj(A)\n# X = np.arange(A.shape[-1])\n# print(X)\n# feature_dim = A.shape[-1]\n# X_n=[]\n# for i in range(feature_dim):\n#     X_n.append(X)\n# X=np.asarray(X_n)\n# model_input = [A, A]\n# print('X',type(X))\n# print('A',type(A))\n\n# # print('feature_dim',feature_dim)\n# model = GCN(A.shape[-1],feature_dim, 32, y_train.shape[-1],  dropout_rate=0.5, l2_reg=2.5e-4 )\n# model.compile(optimizer='adam', loss='categorical_crossentropy',\n#                   weighted_metrics=['categorical_crossentropy', 'acc'])\n# print(type(model_input[0]),type(model_input[1]))\n\n# model.fit(model_input,y_train[:X.shape[-1]])\n\n\n# A=nx.adjacency_matrix(graph,nodelist=range(graph.number_of_nodes()))\n# A=preprocess_adj(A)\nA=L\nfeature_dim = A.shape[-1]\nX = np.arange(A.shape[-1])\nX_n=[]\nfor i in range(feature_dim):\n    X_n.append(X)\nX=np.asarray(X_n)\n# print('X',X)\nmodel_input = [X, A]\n# print('X',type(X))\n# print('A',type(A))\n\n# print('feature_dim',feature_dim)\nmodel = GCN(A.shape[-1],feature_dim, 32, y_train.shape[-1],  dropout_rate=0.5, l2_reg=2.5e-4 )\nmodel.compile(optimizer='adam', loss='categorical_crossentropy',\n                  weighted_metrics=['categorical_crossentropy', 'acc'])\n# print(type(model_input[0]),type(model_input[1]))\n\nmodel.fit(model_input,y_train[:A.shape[-1]],epochs=5)","b25d3b26":"\nimport tensorflow as tf\nfrom tensorflow.keras.initializers import Identity, glorot_uniform, Zeros\nfrom tensorflow.keras.layers import Dropout, Input, Layer, Embedding, Reshape,LSTM\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.regularizers import l2\nimport networkx as nx\nimport scipy\nfrom sklearn.preprocessing import LabelEncoder\n\nclass GraphConvolution(tf.keras.layers.Layer):  # ReLU(AXW)\n\n    def __init__(self, units,\n                 activation=tf.nn.relu, dropout_rate=0.5,\n                 use_bias=True, l2_reg=0, \n                 seed=1024, **kwargs):\n        super(GraphConvolution, self).__init__(**kwargs)\n        self.units = units\n        self.use_bias = use_bias\n        self.l2_reg = l2_reg\n        self.dropout_rate = dropout_rate\n        self.activation = tf.keras.layers.Activation(tf.keras.activations.relu)\n        self.seed = seed\n        self.graph=graph\n        \n        \n    def build(self, input_shapes):\n        input_dim = int(input_shapes[0][-1])\n        \n        self.kernel = self.add_weight(shape=(input_dim,\n                                             self.units),\n                                      initializer=glorot_uniform(\n                                          seed=self.seed),\n                                      regularizer=l2(self.l2_reg),\n                                      name='kernel' )\n        \n        self.bias = self.add_weight(shape=(self.units,),\n                                        initializer=Zeros(),\n                                        name='bias')\n\n        self.dropout = Dropout(self.dropout_rate, seed=self.seed)\n\n        self.built = True\n        print('kernel shape',self.kernel.shape)\n        print('input dimension',input_dim)\n\n    def call(self, inputs, training=None, **kwargs):        \n        features, A = inputs\n        A=tf.sparse.to_dense(A)\n        \n        v1=tf.matmul(A,features)\n        \n        output = tf.matmul(A,self.kernel)\n        output += self.bias\n        act = self.activation(output)\n        \n        #act._uses_learning_phase = features._uses_learning_phase\n        return act\n\n    def get_config(self):\n        config = {'units': self.units,\n                  'activation': self.activation,\n                  'dropout_rate': self.dropout_rate,\n                  'l2_reg': self.l2_reg,\n                  'use_bias': self.use_bias,\n                 \n                  'seed': self.seed\n                  }\n\n        base_config = super(GraphConvolution, self).get_config()\n        return dict(list(base_config.items()) + list(config.items()))\n\n\ndef GCN(adj_dim,feature_dim,n_hidden, num_class, num_layers=2,activation=tf.nn.relu,dropout_rate=0.5, l2_reg=0 ):\n    Adj = Input(shape=(None,), sparse=True,name='first')\n    \n    X_in = Input(shape=(feature_dim,), sparse=False,name='second')\n    emb = Embedding(adj_dim, feature_dim,\n                        embeddings_initializer=Identity(1.0), trainable=False)\n    X_emb = emb(X_in)\n#     X_emb=LSTM(3235,return_sequences='True')(X_emb)\n#     print('Xemb',X_emb)\n#     H = Reshape([X_emb.shape[-1]])(X_emb)\n    H=X_emb\n    print('H shape',H)\n    \n    \n#     print(type(Adj))\n#     H=X_in\n    for i in range(3):\n        if i == num_layers - 1:\n            activation = tf.nn.softmax\n            n_hidden = num_class\n        h = GraphConvolution(n_hidden, activation=activation, dropout_rate=dropout_rate, l2_reg=l2_reg)([H,Adj])\n    output = h\n    model = Model(inputs=[X_in,Adj], outputs=output)\n    print(model.summary())\n    \n    return model\n\ndef encode_onehot(labels):\n    classes = set(labels)\n    classes_dict = {c: np.identity(len(classes))[i, :] for i, c in enumerate(classes)}\n    labels_onehot = np.array(list(map(classes_dict.get, labels)), dtype=np.int32)\n    return labels_onehot\ndef normalize_adj(adj, symmetric=True):\n    if symmetric:\n        d = scipy.sparse.diags(np.power(np.array(adj.sum(1)), -0.5).flatten(), 0)\n        a_norm = adj.dot(d).transpose().dot(d).tocsr()\n    else:\n        d = scipy.sparse.diags(np.power(np.array(adj.sum(1)), -1).flatten(), 0)\n        a_norm = d.dot(adj).tocsr()\n    return a_norm\n\n\ndef preprocess_adj(adj, symmetric=True):\n    adj = adj + scipy.sparse.eye(adj.shape[0])\n    adj = normalize_adj(adj, symmetric)\n    return adj\ndef create_spline(adj):\n    diagonal= adj.diagonal(k=0)\n    adj=scipy.sparse.diags(diagonal)\n    return adj\nlabel_y= LabelEncoder()\nlabels=label_y.fit_transform(train_df['category'][:5000])\n\n# y_train=list(set(list(labels)))\n\ny_train=encode_onehot(labels)\n\n# print(len(y_train))\ngraph=nx.from_pandas_edgelist(train_df[:5000],source='question_body',target='category')\n#nx.draw(g)\n# inputs=[A,L]\n# A=nx.adjacency_matrix(graph,nodelist=range(graph.number_of_nodes()))\n# A=preprocess_adj(A)\n# X = np.arange(A.shape[-1])\n# print(X)\n# feature_dim = A.shape[-1]\n# X_n=[]\n# for i in range(feature_dim):\n#     X_n.append(X)\n# X=np.asarray(X_n)\n# model_input = [A, A]\n# print('X',type(X))\n# print('A',type(A))\n\n# # print('feature_dim',feature_dim)\n# model = GCN(A.shape[-1],feature_dim, 32, y_train.shape[-1],  dropout_rate=0.5, l2_reg=2.5e-4 )\n# model.compile(optimizer='adam', loss='categorical_crossentropy',\n#                   weighted_metrics=['categorical_crossentropy', 'acc'])\n# print(type(model_input[0]),type(model_input[1]))\n\n# model.fit(model_input,y_train[:X.shape[-1]])\n\n\n# A=nx.adjacency_matrix(graph,nodelist=range(graph.number_of_nodes()))\n# A=preprocess_adj(A)\n\nA=nx.adjacency_matrix(graph,nodelist=range(graph.number_of_nodes()))\nA=preprocess_adj(A)\nprint(type(A))\nA=create_spline(A)\nfeature_dim = A.shape[-1]\nX = np.arange(A.shape[-1])\nX_n=[]\nfor i in range(feature_dim):\n    X_n.append(X)\nX=np.asarray(X_n)\n# print('X',X)\nmodel_input = [X, A]\n# print('X',type(X))\n# print('A',type(A))\n\n# print('feature_dim',feature_dim)\nmodel = GCN(A.shape[-1],feature_dim, 32, y_train.shape[-1],  dropout_rate=0.5, l2_reg=2.5e-4 )\nmodel.compile(optimizer='adam', loss='categorical_crossentropy',\n                  weighted_metrics=['categorical_crossentropy', 'acc'])\n# print(type(model_input[0]),type(model_input[1]))\n\nmodel.fit(model_input,y_train[:A.shape[-1]],epochs=5)","499711ea":"\nimport tensorflow as tf\nfrom tensorflow.keras.initializers import Identity, glorot_uniform, Zeros\nfrom tensorflow.keras.layers import Dropout, Input, Layer, Embedding, Reshape,LSTM\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.regularizers import l2\nimport networkx as nx\nimport scipy\nfrom sklearn.preprocessing import LabelEncoder\n\nclass GraphConvolution(tf.keras.layers.Layer):  # ReLU(AXW)\n\n    def __init__(self, units,\n                 activation=tf.nn.relu, dropout_rate=0.5,\n                 use_bias=True, l2_reg=0, \n                 seed=1024, **kwargs):\n        super(GraphConvolution, self).__init__(**kwargs)\n        self.units = units\n        self.use_bias = use_bias\n        self.l2_reg = l2_reg\n        self.dropout_rate = dropout_rate\n        self.activation = tf.keras.layers.Activation(tf.keras.activations.relu)\n        self.seed = seed\n        self.graph=graph\n        \n        \n    def build(self, input_shapes):\n        input_dim = int(input_shapes[0][-1])\n        \n        self.kernel = self.add_weight(shape=(input_dim,\n                                             self.units),\n                                      initializer=glorot_uniform(\n                                          seed=self.seed),\n                                      regularizer=l2(self.l2_reg),\n                                      name='kernel' )\n        \n        self.bias = self.add_weight(shape=(self.units,),\n                                        initializer=Zeros(),\n                                        name='bias')\n\n        self.dropout = Dropout(self.dropout_rate, seed=self.seed)\n\n        self.built = True\n        print('kernel shape',self.kernel.shape)\n        print('input dimension',input_dim)\n\n    def call(self, inputs, training=None, **kwargs):        \n        features, A = inputs\n        A=tf.sparse.to_dense(A)\n        \n        v1=tf.matmul(A,features)\n        \n        output = tf.matmul(A,self.kernel)\n        output += self.bias\n        act = self.activation(output)\n        \n        #act._uses_learning_phase = features._uses_learning_phase\n        return act\n\n    def get_config(self):\n        config = {'units': self.units,\n                  'activation': self.activation,\n                  'dropout_rate': self.dropout_rate,\n                  'l2_reg': self.l2_reg,\n                  'use_bias': self.use_bias,\n                 \n                  'seed': self.seed\n                  }\n\n        base_config = super(GraphConvolution, self).get_config()\n        return dict(list(base_config.items()) + list(config.items()))\n\n\ndef GCN(adj_dim,feature_dim,n_hidden, num_class, num_layers=2,activation=tf.nn.relu,dropout_rate=0.5, l2_reg=0 ):\n    Adj = Input(shape=(None,), sparse=True,name='first')\n    \n    X_in = Input(shape=(feature_dim,), sparse=False,name='second')\n    emb = Embedding(adj_dim, feature_dim,\n                        embeddings_initializer=Identity(1.0), trainable=False)\n    X_emb = emb(X_in)\n#     X_emb=LSTM(3235,return_sequences='True')(X_emb)\n#     print('Xemb',X_emb)\n#     H = Reshape([X_emb.shape[-1]])(X_emb)\n    H=X_emb\n    print('H shape',H)\n    \n    \n#     print(type(Adj))\n#     H=X_in\n    for i in range(3):\n        if i == num_layers - 1:\n            activation = tf.nn.softmax\n            n_hidden = num_class\n        h = GraphConvolution(n_hidden, activation=activation, dropout_rate=dropout_rate, l2_reg=l2_reg)([H,Adj])\n    output = h\n    model = Model(inputs=[X_in,Adj], outputs=output)\n    print(model.summary())\n    \n    return model\n\ndef encode_onehot(labels):\n    classes = set(labels)\n    classes_dict = {c: np.identity(len(classes))[i, :] for i, c in enumerate(classes)}\n    labels_onehot = np.array(list(map(classes_dict.get, labels)), dtype=np.int32)\n    return labels_onehot\ndef normalize_adj(adj, symmetric=True):\n    if symmetric:\n        d = scipy.sparse.diags(np.power(np.array(adj.sum(1)), -0.5).flatten(), 0)\n        a_norm = adj.dot(d).transpose().dot(d).tocsr()\n    else:\n        d = scipy.sparse.diags(np.power(np.array(adj.sum(1)), -1).flatten(), 0)\n        a_norm = d.dot(adj).tocsr()\n    return a_norm\n\n\ndef preprocess_adj(adj, symmetric=True):\n    adj = adj + scipy.sparse.eye(adj.shape[0])\n    adj = normalize_adj(adj, symmetric)\n    return adj\n\n\ndef chebyshev_polynomial(adj,k):\n    L= scipy.sparse.eye(adj.shape[0]) - adj\n    list_k=[]\n    list_k.append(scipy.sparse.eye(adj.shape[0]))\n    list_k.append(L)\n    def recursion(n1,n2,L):\n        lap=scipy.sparse.csr_matrix(L,copy=True)\n        return 2*lap.dot(n1)-n2\n    for i in range(2,k+1):\n        list_k.append(recursion(list_k[-1],list_k[-2],L))\n    print(type(list_k[-1]))\n    return list_k[-1]\n    \n\nlabel_y= LabelEncoder()\nlabels=label_y.fit_transform(train_df['category'][:5000])\n\n# y_train=list(set(list(labels)))\n\ny_train=encode_onehot(labels)\n\n# print(len(y_train))\ngraph=nx.from_pandas_edgelist(train_df[:5000],source='question_body',target='category')\n#nx.draw(g)\n# A=nx.adjacency_matrix(graph,nodelist=range(graph.number_of_nodes()))\n# idx=np.arange(graph.number_of_nodes())\n# degree_vals=np.array([(graph.degree[node]) for node in list(graph.nodes())])\n# n=graph.number_of_nodes()\n# D=scipy.sparse.coo_matrix((degree_vals,(idx,idx)),shape=(n,n))\n# L=D-A\n# L=nx.from_scipy_sparse_matrix(L)\n# L=nx.laplacian_matrix(L)\n# inputs=[A,L]\n# A=nx.adjacency_matrix(graph,nodelist=range(graph.number_of_nodes()))\n# A=preprocess_adj(A)\n# X = np.arange(A.shape[-1])\n# print(X)\n# feature_dim = A.shape[-1]\n# X_n=[]\n# for i in range(feature_dim):\n#     X_n.append(X)\n# X=np.asarray(X_n)\n# model_input = [A, A]\n# print('X',type(X))\n# print('A',type(A))\n\n# # print('feature_dim',feature_dim)\n# model = GCN(A.shape[-1],feature_dim, 32, y_train.shape[-1],  dropout_ratecreate_spline2_reg=2.5e-4 )\n# model.compile(optimizer='adam', loss='categorical_crossentropy',\n#                   weighted_metrics=['categorical_crossentropy', 'acc'])\n# print(type(model_input[0]),type(model_input[1]))\n\n# model.fit(model_input,y_train[:X.shape[-1]])\n\n\nA=nx.adjacency_matrix(graph,nodelist=range(graph.number_of_nodes()))\nA=preprocess_adj(A)\n# A=create_spline(A)\nk=2\nA=chebyshev_polynomial(A,k)\nfeature_dim = A.shape[-1]\nX = np.arange(A.shape[-1])\nX_n=[]\nfor i in range(feature_dim):\n    X_n.append(X)\nX=np.asarray(X_n)\n# print('X',X)\n\nmodel_input = [X, A]\n# print('X',type(X))\n# print('A',type(A))\n\n# print('feature_dim',feature_dim)\nmodel = GCN(A.shape[-1],feature_dim, 32, y_train.shape[-1],  dropout_rate=0.5, l2_reg=2.5e-4 )\nmodel.compile(optimizer='adam', loss='categorical_crossentropy',\n                  weighted_metrics=['categorical_crossentropy', 'acc'])\n# print(type(model_input[0]),type(model_input[1]))\n\nmodel.fit(model_input,y_train[:A.shape[-1]],epochs=5)","cb5802b7":"## this can be found in the examples\n## Not working in kaggle\nfrom torch_geometric.datasets import Planetoid\nimport torch\nimport torch.nn.functional as F\nfrom torch_geometric.nn import MessagePassing\nfrom torch_geometric.utils import add_self_loops, degree\nimport networkx as nx\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nclass GCNConv(MessagePassing):\n    def __init__(self, in_channels, out_channels):\n        super(GCNConv, self).__init__(aggr='add')  # \"Add\" aggregation\n        self.lin = torch.nn.Linear(in_channels, out_channels)\n\n    def forward(self, x, edge_index):\n        # Step 1: Add self-loops\n        edge_index, _ = add_self_loops(edge_index, num_nodes=x.size(0))\n\n        # Step 2: Multiply with weights\n        x = self.lin(x)\n\n        # Step 3: Calculate the normalization\n        row, col = edge_index\n        deg = degree(row, x.size(0), dtype=x.dtype)\n        deg_inv_sqrt = deg.pow(-0.5)\n        norm = deg_inv_sqrt[row] * deg_inv_sqrt[col]\n\n        # Step 4: Propagate the embeddings to the next layer\n        return self.propagate(edge_index, size=(x.size(0), x.size(0)), x=x,\n                              norm=norm)\n\n    def message(self, x_j, norm):\n        # Normalize node features.\n        return norm.view(-1, 1) * x_j\n\n\nclass Net(torch.nn.Module):\n    def __init__(self, dataset):\n        super(Net, self).__init__()\n        self.conv1 = GCNConv(dataset.num_node_features, 16)\n        self.conv2 = GCNConv(16, dataset.num_classes)\n\n    def forward(self, data):\n        x, edge_index = data.x, data.edge_index\n\n        x = self.conv1(x, edge_index)\n        x = F.relu(x)\n        x = F.dropout(x, training=self.training)\n        x = self.conv2(x, edge_index)\n\n        return F.log_softmax(x, dim=1)\n\n\ndef plot_dataset(dataset):\n    edges_raw = dataset.data.edge_index.numpy()\n    edges = [(x, y) for x, y in zip(edges_raw[0, :], edges_raw[1, :])]\n    labels = dataset.data.y.numpy()\n\n    G = nx.Graph()\n    G.add_nodes_from(list(range(np.max(edges_raw))))\n    G.add_edges_from(edges)\n    plt.subplot(111)\n    options = {\n                'node_size': 30,\n                'width': 0.2,\n    }\n    nx.draw(G, with_labels=False, node_color=labels.tolist(), cmap=plt.cm.tab10, font_weight='bold', **options)\n    plt.show()\n\n\ndef test(data, train=True):\n    model.eval()\n\n    correct = 0\n    pred = model(data).max(dim=1)[1]\n\n    if train:\n        correct += pred[data.train_mask].eq(data.y[data.train_mask]).sum().item()\n        return correct \/ (len(data.y[data.train_mask]))\n    else:\n        correct += pred[data.test_mask].eq(data.y[data.test_mask]).sum().item()\n        return correct \/ (len(data.y[data.test_mask]))\n\n\ndef train(data, plot=False):\n    train_accuracies, test_accuracies = list(), list()\n    for epoch in range(100):\n            model.train()\n            optimizer.zero_grad()\n            out = model(data)\n            loss = F.nll_loss(out[data.train_mask], data.y[data.train_mask])\n            loss.backward()\n            optimizer.step()\n\n            train_acc = test(data)\n            test_acc = test(data, train=False)\n\n            train_accuracies.append(train_acc)\n            test_accuracies.append(test_acc)\n            print('Epoch: {:03d}, Loss: {:.5f}, Train Acc: {:.5f}, Test Acc: {:.5f}'.\n                  format(epoch, loss, train_acc, test_acc))\n\n    if plot:\n        plt.plot(train_accuracies, label=\"Train accuracy\")\n        plt.plot(test_accuracies, label=\"Validation accuracy\")\n        plt.xlabel(\"# Epoch\")\n        plt.ylabel(\"Accuracy\")\n        plt.legend(loc='upper right')\n        plt.show()\n\n\nif __name__ == \"__main__\":\n    dataset = Planetoid(root='\/tmp\/Cora', name='Cora')\n    plot_dataset(dataset)\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    model = Net(dataset).to(device)\n    data = dataset[0].to(device)\n    optimizer = torch.optim.Adam(model.parameters(), lr=0.01, weight_decay=5e-4)\n\n    train(data, plot=True)","0a120bc4":"## GCN using Torch Geometric\n\nTorch Geometric is a library which has different modules for creating GCNs,and variations of Graph networks and can be found in the links provided below. The original repository is [here](https:\/\/github.com\/rusty1s\/pytorch_geometric)","15fbc36a":"## Deep Graph Embeddings \n\nThis is a notebook which walks through 2 of the most popular deep learning based graph embeddings - SDNE and LINE. These architectures are different from the previous notebooks owing to the fact that these use first and second order proximity to determine the node representations. The first order proximity suggests that nodes can be related based on adjacency and the second order suggests that nodes are characterised based on the neighbourhood of the nodes.Both the papers associated with the embeddings are present here:\n\n- [SDNE](https:\/\/paperswithcode.com\/method\/sdne)\n- [LINE](https:\/\/paperswithcode.com\/method\/line)\n\nThese are very high order embeddings and used for capturing representations on exclusively large networks. These are scalable representations which are based on regressed adjacency properties and laplacian maps.\n\n<img src=\"https:\/\/pbs.twimg.com\/media\/DPJSagrX0AAYdSy.jpg\">","213c5fcd":"- [Colab](https:\/\/colab.research.google.com\/drive\/14OvFnAXggxB8vM4e8vSURUp1TaKnovzX?usp=sharing#scrollTo=imGrKO5YH11-)\n- [Torch Geometric](https:\/\/pytorch-geometric.readthedocs.io\/en\/latest\/notes\/introduction.html)\n- [Torch Geometric Examples](https:\/\/pytorch-geometric.readthedocs.io\/en\/latest\/notes\/colabs.html)\n\n## Conclusion\n\nYou have seen how to apply GNNs to real-world problems, and, in particular, how they can effectively be used for boosting a model's performance. \n\n<img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAj8AAAIxCAYAAACiptlHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+\/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOzdd3hlVbn48e\/a+\/QkJ32SyUxmMoUuKMMoAgKCFLFg9yqK\/eq1XX9ivSKWay\/Xci3gtSBiQywgKKIUkSYwSBk60yeZJJPkpJ6+916\/P9ZJPzVlWt7P8+QhOWeXdU6G5M1a73pfpbVGCCGEEGKpsPb3AIQQQggh9iUJfoQQQgixpEjwI4QQQoglRYIfIYQQQiwpEvwIIYQQYkmR4EcIIYQQS4qvkoObmpp0R0fHIg1FCCGEEGLh3H\/\/\/f1a6+aZj1cU\/HR0dLBp06aFG5UQQgghxCJRSu3M97gsewkhhBBiSZHgRwghhBBLigQ\/QgghhFhSJPgRQgghxJIiwY8QQgghlhQJfoQQQgixpEjwI4QQQoglRYIfIYQQQiwpEvwIIYQQYkmR4EcIIYQQS4oEP0IIIYRYUiT4EUIIIcSSIsGPEEIIIZYUCX6EEEIIsaRI8COEEEKIJUWCHyGEEEIsKRL8CCGEEGJJ8e3vAQghDjHagdSjoDMQWAe+hv09IiGEmEaCHyHEwtAahn4F\/ZcCTu4xB6pPg5ZPgx3dr8MTQohxEvwIIRZG7Icw8APAnf742C2Qego6fgNWeL8MTQghppKcHyHE\/LlDMHAZswIfADQ4nTB0zb4elRBC5CXBjxBi\/gavBrwiB2gYvHxfjUYIIYqS4EcIMX+jfy59jNsH7sjij0UIIUqQ4EcIMX\/ZHWUcpGHbWdD3TdDFZomEEGJxSfAjhJifTCegyztWZ2DoKuj\/30UdkhBCFCPBjxBifpIPVna8Tpkt8bIEJoTYTyT4EULMj7LncJIN8dsXfChCCFEOCX6EEPMTORFQFZ7kgTsM6W2Q7VmMUQkhREFS5FAIMT++Bog8FxJ3l3+OTkHf1zBBkwK7BVo+bqpBCyHEIpPgRwgBngfpx0CnIXQMWKHKzm\/7Fux6A2S2VHCSZiJR2t0De\/4T7AawooAF3jAoH1SdCvUXQmB1ZWMSQogCJPgRYqnr\/SoMX8W06syhDbDye+W3o7CC0PFbiN8NA5eC0wdeErwEkCl\/LG7MfEw1\/AcYuR7avg5Vzyv\/WkIIUYAEP0IsZV0fgPhtsx9P\/Qu2nQdrbwKrgh8TVSeZDzCNTsf+CrHLIb0dSM9xkC5oF\/Z8GNb+VRqkCiHmTRKehViqMjvyBz7jvCGI\/aD4NVKPQe8XTBDV9y3IduXOTQEO1JwLq38NHVeBWoCmpsPXzv8aQoglT2Z+hFiq+r5T+pihq6DpvbMf1w50fwzid5rChXgQvwsGf26CHB0HNASPhOYPgq91\/lWddQpSDwAXzu86QoglT2Z+hFiqsp2lj\/ES+R\/v+3Yu8Ekx2dA0CzigR3OPaUg\/Dp3vgqE\/gBWY\/5gXYvZICLHkSfAjxFLlayl9TL5dX14Shq\/OBT7l0DB0OQSPqWh4s6gIRM+b3zWEEAIJfoRYupreV\/qY6KtmP5Z6FHSlRQ3JtcGY648cG\/zLIXLyHM8XQohJEvwIsVSFDofQCYWfV1XQ9O48T2gq2r4+IcvkElmF7HpY+UNQFlp7ZN0EnnZLnyeEEHlIwrMQS1n7j6D7Yhi7gWmd2QOHw8ofmcdGrodsN\/iaoPos8K1gWk2gss0jWPHipD2Xzb0\/ZtvwrXjaQSmL1TXP47imfyPib5z7tYUQS47SWpc+Kmfjxo1606ZNizgcIcR+4Tmm0ahOm15dbh\/0fMZUfZ6QS1huuBBiVwDOPhueVhFuVx10ux7elCBKYeG3qzh39Zep9i\/bZ+MRQhwclFL3a603znxclr2EEKaQYc0ZEH2h2aG1640zAh8wS10ZiP2MabNE+4Crs2TdsWmBD4DGI+uOcV9Prh5RZjeM3W7yi2RZTAhRgCx7CSEmuUlTSVkXy+nJ7rPhTNAOMfz5n0ITTz6Eu\/MC7MxWUH5TU8gKQvNHIPqifTxYIcSBToIfIQTorGlDEbscdHJ\/j2YaDWynBqfARHUYh7PZhZXOzfToXBsNNwG9\/20KMtaev28GK4Q4KMiylxBLnTMEu\/8dBn58wAU+YFqEPUhzoWc5kR4CuOTdfK9T0Pc1E9wJIUSOBD9CLFWpR2H3O2DbmZB6kLk3Hp0vu+izloJGUuTLM3oW\/bSSzB\/4jNMuJO6b1wiFEIcWWfYSYilKbIKu91VQpXmx+HM5OgXaaOQcTx830Y4zJcypJ8VhDKNK1VvUKXCHCj6dzAyyq+tKqtO3YSsPL\/xcWpa\/FVt2jwlxyJLgR4ilRmvoufgACHwA5StrV1a9ynCm7uSftBDHj4XmCIawytp15hVsqrq9\/16a+z\/AahxCllkayyR34W77LYmWr1BTd2Ylr0YIcZCQ4EeIpSb1ILij+3sUhs6CVQ1e6SW3RpXmxexiSAfIYNFECkvBjmwrf44\/lycyHQCs9+\/mRVX\/ZH2ga\/Lk9BbovxTcAQisg+iLGcxCY\/8Hiagk1pTZo4ByARd6P4auuh7lL6MHmhDioCLBjxBLTXbP\/h7BFF6RJS+FSUucPjNUpya34d+TPIorR16Ig43OpTA+mlnL05lVvLrmFk6PPGQOHLoydz0HVAj6v0WMU1hBdlrgM\/3uHgO9l9O08uPzeYFCiAOQJDwLsdTYDVA8RXjRTS5WeTNqCgXMTJAKQvBIsKoKXmPEi3DlyAvJ4p8IfAxFBj9Xj55JvxvNPeYyUZFap0Cn6fBuJWQVrmfkVy524u6KX5sQ4sAnMz9CHMqyvTD0Cxi90QQZwWOg4U25XJv9MyRNkdDLjkLr58G\/ArreA95YwevcmTgO0JwYepQXVv2TFjuGi81D6fX8aexk9rp13JY4nlfV3Jb\/Vqr0G6D3c5AohFgcEvwIcahKPWbq9+gME1WZE3dCchNUnQpjN1NZl3UFdpv5r9s552EVDSe8hAmAsl3gDBQd3\/ZsKxdE\/8YJwacI5pKVbRw2BJ\/kuOAWvjv4arZn24qORWsK7hbLeD6y1ZLwLMShSJa9hDgUaTe3lT3O9HYU2iz7xG8H38oKLmiBFQU9At7e4oeqKP06jKMV7pTJFUcrsloxqANFzrXAjUHy\/pLb3w8P7GLDlMBnnK00QeXwrrprqC6yrDXO1fmjH0\/ZNLdeWPJ8IcTBR2Z+hDgUxe8Ar8hWdp0GK1LetVQQAuvNTimnl+LrZUGSXpZbaCOAy2EM06bjaBS7qGYbUTwUL9fb8eVbdtIO+NqAhzFzRIXvdXL40Ynt6fn48Di36p9FX1rGamHUSVOtEhP5PykvgIdFZvl3Cfnqi54vhDg4SfAjxKEo\/USJVhUavBhm8rfI0lfgMGj7Kjgx6Ho\/pROF0jxNAxpI4udhmniYpmlH+PDYQQ3rGZl9ur8dgmvBOwkGryz6GsKq+PZ4v8qyOhKCbADTkX4GFSK47L1kwy\/g0T2\/J5S4DZ\/y8FWfwqrlryPiK5xsLYQ4uEnwI8ShSIUw\/3sX6WmlgrDiMuh6Z4Hnq6H912DbZiapzP5Ye4ngFVlRd7DoITIt+NGAUhFo\/HcT9Hge+JpN7g\/5iyCWquxsKVC1L4OR6yG7e0ogpcz7E30xRF9KtVKc0HEhIEtcQiwVEvwIcSiqfj4MfK\/wRI0KQvSlUPUc6LgOuj4C2SdyT\/ogej40X2wCn\/Hjy9z5VE7V5QQ+nFyujUIz5u+g1gpBz6emVHy2QNlAYE4NVxUaIhuh\/vUwdgsM\/QbcQQishfo3QOhZpSMoIcQhSYIfIQ5FgdUQORUSd5j8nmmUCWZqX507th3W\/Lr49apOBb5c1q1XM8oAIZwCsz82HgOE+R3rCOChVDXnqiRktjJrpkoDVh1UnwmJe8HtK2sMht\/sdFN+qDnXfAghBLLbS4hD1\/IvQtVpoALmAx+oCPiWQ\/vl4Gso\/1r+5eArr83Dakax8cg37aTwCOFiqyBKBQkH1\/GCln8j7HRRcInOyzUlbbnEjL9syiydCSHEDDLzI8ShygpC29dM3szYbWYGKPQMCG+c23JPzYtg8CeUSnr2Kc3ZupNbWEEGCwcb0PjQRMhyqs9hsPnd1AbbqQuugu6LS25rZ\/QGsxQXWAXpPDNE+QTXmWKJQggxgwQ\/QhwqUk+YIMEdhuDREH0R2NUmAKi\/YP7Xr3uV6ZGlS9fOqVFZXqp30E2EXiIooI04y5RGNXyQaPSUyYO9eBk39yD2E1j5Q+j5BCTuAW0BBbbzqzC0fLKcVyWEWIIk+BHiYOelYM+HcoUBM4AH6kbo\/wYs\/wpUn74w9\/G3Qf2bYPDnplBiCZaCFSRYwZRZHV8r1J4\/\/cDws8xusvHeW4WkHgK7BlZ8xzRnTf7LVIEeuxXSj5mlPZ2BwOHQ8l8QOqby1yiEWBIk+BHiYKaz0PkeSD3MtOBhfHdU98dg1RVmh1P8blOo0LccIs\/O7aQqIdsFI38Bd8gsIzW8HbJ9MHrt3MYbWA1WePpjta+A\/u+WcfKU8frbzAdAw5vB6Qdnr2na6m+d29iEEEuGBD9CHKyGr4e9X8q1sChAZ6Dn85DdbhpZ4WFaVQSg9QtQdfKUY7OAbVpMaBe6PwFjf2OyCKIFvV8svzJ0PskHTKDim1L40K6Flouh97NFTrSmj3UmX9P0awohRBES\/AhxMBq5EfZ+vozlJw\/Sm2c\/7MZhz0Ww4nuQ2WHyaZw9gILwBvDSec7zgAx4pXN+ClIBc7+ZgUrtK8xrSt5L3orTyg\/hE2DsdggfZwImIYSYIwl+hDjYaA\/6vl5W3k3x6+RyhXRqyrW06fq+WLQH1pS2EVpD5mnTzb31U9DzGUhtztUm8kwlZp01M1EDuaUxnYGaF8Kyi82ONiGEqJAEP0IcbNJPlLlDqgzjNXT2Fe1A3\/+YnmH+FTD0M3BHTf6RzkDkFGj7OsTvBHcEUo+Y5GYy4I1NXmfkz5DpgvYfSZVmIUTFJPgR4mDjxXN5Oft7IHORMTNLyfuZ9gLGP43fboK71VeZis+7byJvU1IcSN0Po3+FqFRuFkJURio8C3Gw8a8qq9bOga1Q5OaY7esDP4I9H6NgHZ9xPZ\/KJXILIUT5JPgR4mDjbzFNOctsNHrwyZhiiu7eMo5Nw+hfFn1EQohDiwQ\/QhyMWv\/b7ICaKxUEqzHX8+tAVMFszuCVizcMIcQhSYIfIQ5G\/lZo+ihzmv1RYfCvBW8kV9unXBb78kfGiPbTr0MkdYlijJnt079ObIKu98PWc2D7+TDwY9PyQwghciThWYgDleeBFwMC4IvOfr7mHOj7fOXX1SnIPEH5sys+iJwI9ReaHVZ9n6v8nhXSGu6klTh+XBTLdJLnsJcqlacFxtRK1X3fhKGrclvlNbjgDVyKHrwc1f5zrGDHoo9dCHHgk+BHiAON50HPxTB2IxMF\/1QYGt4JjW81X+ssdL59jjeoYEnJboDmj0P0HPO1bytmtmlxk4w1sJ5hNtECQC9hbqSdF+pdRJQ7\/eDgM81\/43fA0G9m1T+ycPC8McZ2vg696jfUhlYt6tiFEAc+WfYS4kDiebDjfBi7gWmVjnUSBr4N3Z82Xw9dO3u5ZzG4CUjcPbmjKrDWBESLzFJQP2WLu8Yig80j5Ll3oN38N\/aTyZ5mM68HhHWa+3d9mIw7lvcYIcTSIcGPEAeSoV+A01n4+dFrId1lAqFSXdAXRMrsphqv+qwUNF0ELH5l5fSMH08axQ6is3e2x2\/LnfBk0espoI4Rtg7fsnCDFEIclCT4EeJAMvjT0sf0XgLe6KIPZYJOwt6vTH5d+2Jo\/k+zY0yFWYxE6KxWbGV2\/y4PhTszydvpy31SfPebBrLaY8fI7QszSCHEQUuCHyEOJOXsSko\/vvjjmCmzBWJXTH5d\/wZYexMs+xgEjyJvM9KCiqcauhrG8LOHqlnP2WjsmflGVrX5b80L8IrsfrOAPVThVbTDbZGkHoU9H4atZ8G2c2HvVyHbtb9HJcSSIcGPEAcSVcZykp7HcpcK52r7zGGvw8D3J3uKeUkTqFWdYdpRlMu3CoJH5n1KYwKfHiLczEr0jEDGwmMdwzNaefmh9pXm0\/q3Fqx95GjFTqpJEaA+eDR9yVHi2TKqZHsZ6L8Mdv87dL7X9Bybr6GrYPfbYewWcPvB6YWhq2HHqyH5wPyvL4QoSXZ7CXEgib4Ehq8qcdAcZi6sqAk66l9nqkP3fztXGdkGnSjzIjbEroSR68CZyyxFCLxBcHvyPquAYQLcyfLc0pZmvI6RhUcYl2OITRyvsfGsMI+6QXTfr1hZvZHe8EtZG\/8DNhofOjcfpeikijvc1Tw1dhx39NVgqxtwtMdhtc28du0JrKiqmz2g0Ruh++NM29mWuNMkfK\/+HfjqK38L0luh7xu5rfhTZc0Ovq73w9qbpVu9EItM6Qr64mzcuFFv2rRpEYcjxBLnJWDrGXl+OVZCQfjZ4KUhdDg0vAv8Tfnv1f9jGPpxmdf1MfckazXl\/OI\/cxLawgYCeDiYGZtRAhzNKEHLB8pCe2n2EuZe2hjTLqAIKB+rdR+HM0QYBxdFLxE200i\/W8Om2JlkdYCZE95By8dHnnk27dVTgpnUU7DrtYUHaTfAujkkTvd8Fkb+CLj5n1cRaPmECYKFEPOmlLpfa71x5uMy8yPEgUQ7sPwb0PtpsyQyjUXp3Boboi+H1ktK38uKwNhfKxjcPJbb7OYye3VBRE2+Rj+adXrULHX5VkDbV8lk+\/hr9\/8xqrOMBxF+HM7SO6gii0\/piXNX6DjVZPl+fOO0wGe53c\/6QCcaxePpDq546p98csN5k4PY+8Xig3RjMHYHVD+v3HfASD1EwcAHQCfoi13NiBdmVfRk\/Fa4susLIcoiwY8QBwJnAPZ+CeL\/MHkr2gFfO0ROgMB6s8W872tlXEhD4nbIdEJgZRmH74Pu8HYDhI6H+I3Fh6LNnJA1I2d5IsfHG4XQMWyJX0NixuzRBvqoJoM941yf0tTqDCf5dnA166hRcf6j7hpW+XsntsyrGs2TmTX0xTfQXGWKKpLaXPp17fkgrPgWVJ1S+tiJFxMq+rSnoS+9k829P+H+vT\/hxNb3sDpawfWFEGWRhGch9jd3CHa9Hsb+boIRL26WvZzdMHoDBFbB8B\/KvJgHTj90vqO8xOjQMWVed45\/J6kgzoof0Re\/B6\/ECrsGrqWDQV2g2apOQXoLO2O\/wZ3y2ny4rGJsVuAz8bzSPC\/8MEHSfKThl3T4uwkoh6BlPgLK5cjAdhI738nfdj+WS4QuJx0gC3suqixJOfrSogGQh2I3NXhkcHWGf3Z\/j72j90LXRfDUCfDUs+CpDbD73ZDtLf++QohpJPgRYn\/w4mbr+LYXwdazwdlL3mUlnYaeT0FmZyUXB3cE4mXUs2n979LH+Npg2X+Vd2tVDVigQujoq3ii7r38ftenuE3X4xT5ceNp2EOEFD5uZiWpfM1MlR9iP8H1pido15AtK1Q5ObyZWmsMn5q9dOhXLi3WHjbvuYFP3HcNY7m2GiXptElgLlf0pWa5Mc974WhFjCAxJoMjjywP7\/kcxG9hcrnMg+TdsP1FFf67EEKMk+BHiH3NHYadrzNbx509lNy95Q2VPmYmnTAzSaUon8nHKcRqhbV\/hrpXAQVmZCaOjcJhd8Dh\/4LVv6I\/00nV4A95hu4kiMdDNOLo\/NMzHorNNAEKD8VW8jRy1RrG\/k4LcdSUcKeDEXwlwh+f8tgQeoqQVfh9DKgsG4KbSbkO\/zd41uxK0oWknwB3sLxj7WpovwL8K0GF0ShcbQKfPkLcxopZp\/QRLDBr5sLud5Y5SCHEVBL8CLGv9X4Bst3z3NFVBl1G4cGB7xcprGhB1YbJL5d9uPi1Wi4xAUrvF9E7X0dj8h7aGeUIhjiPXVST5WEacLQiq9XEf5Pa5jbaGMq1zHCx2EnN7OsrC7THEQxh5YKdOtKsZ2RG7Z88Ah0E88z4THu1CiLKfE+2OyvZqk4tcdFxPrNzrlyBdui4FurfTLc2u9FuZBV\/Z2XB2bGCxRvdXshIcUQhKiXBjxD7kjsMY7eyT\/pyuTGKTl\/oLAz9DiiU9OzB2E1mCQ2g7rXQ\/FFm5\/8EoPXzUHM2DF4JI39E6fRE4rKtTN7NYQzjYPEH1nIvLTxAE3ewnGtZw14iM+48M+s5BA3vAAVRlWUje7HxOILBiUCoMB++ZR+iuf4kXF34R17a87Ej2wpAxnP5U+aV0PTREtfOsfOUEijGHYTYT4jlZtOWkSBU4N+EhZ7YwZZX8v7K7i2EkN1eQuxTmZ3sm4akQGITDF8LdS\/P\/7yzl5Jb51UAsrvBziVG118Ata+DkT+ZFg2RZ0I0t0VcOxD7sUlMzsOnNM\/QMbZSy658Mzvjt0TTTBKs8fYWFjRfZLbwD\/0SnBRr1ShNOoWNN2t32CzhZ0LVyUT8KyB+feEZNwV3p46d+NJCQcMFkLofxm4j3\/dN44foS1CVFiXs+TSQ4SgyKEywt4F+thDlXzTDRPCniRYMTnPsORRbFGKJk+BHiH0p20N5O4kWQhpiP4Dal5F3XUiFKRmIaXf67qTkY9D94VyuEjDya+j7Fiz\/EthRM5tURACPCA4J\/Eyt4DztlkBL\/QUQajV5RKGjTCCkFDS8G\/q+AjpFVJWTB2VBMBe4BVZD0\/+D\/m+jdXoib8jVCgebHw+\/mBZfjPX+Tizlo6O+zZy37GIT6LmxaaUBHBRxLP4xsoUjAzeyvu4cVMn1N2D076YcAUzsUBufvVqnR3CweJjJmaQENlkN\/ryXVhCRrfBCVEqCHyH2pQKzInOjch9FZm\/cAbPE4muY\/ZyvAfxrIPNU4fPtKATWms+Tm2H3m5gVvLm90Pk2WPapskZtobFyY86Xy9IcOoaO5jdA7Gcw9BVwR809wydA0\/ug\/kIYvCK3pFciAFIBiL5o8uv610PoSPTAD0mP3Y8HPJJew13JY3l1za0028PYykWj8CVuh93HQds3YPVv0IM\/Jxu7Ah9pUtrmKep4ijrCOkam7+vEhq+kseb5Jtj0FUki7\/sKWuePR31Kc4Qe4jHqcbABxREMm1moQkFz5mkIHVH8fRBCTCPBjxD7kl2N2TW1AMUFVRBQoJNzv0bzB02xvnxBmQqZmZLx39J7LqLorFX\/t8yxRQ5xUaSwWU6aZzS9mbuGbmfU6QbAb1XxrOYLWV97OnS+2xQanDqu5L3Q+e9Q\/xZo+gCkt4M3Bom7cg1XZ1ROVkEIb4TQjEaq4eOxVn6focQI\/\/PwTXhekovrL6PWGsOemlujXUg+aMay6kq6QydxJ3fjTIxJcwJ9rGUEpTV2pg898CQq9n\/Q+B5oeEve90A73UUTtD2glQSd1ODD40iGpo9r+tVg7+dh1ZWFLyiEmEWCHyH2pchJoPQ8Vr4CZteTfzm0\/Dd0ltjqbDcVzwmpOslcp\/czgDbLVioAeND8ocl8nmwvuH3F7+WNQPQ1MHpd3mAqqxVbiPIshlgXXI7V8Cpe0viayQN01swu9f3v7MBn4pjcUh5h8z7622HFd02j1tQjmD0cCnCg+kxo+UzB4bZGonzpOS9j154rqIlnCgQYWchsg+QDPD1045TAB45ikDWMTEtGVmTN93bgMvCvMEngs14D+Vb7plyDia37LSRKNjQxr1sIUQkJfoTYlwavLG8LeiF1rzGF8sZnM+peb5KAC83cNL4r\/\/rKuMxO0718apuL0HHQ+lnwTyn0l95a3vjCzwQvBvG7cmOaDAx8yuIY4lB9GrR+zgRxYJavYj+D2KW5nKEiva8mJM2lM1ug633Q8Tuz3Tz5oKldFDkRfKV3YPksm7X6LlDTk6B7nAb63VqiVpx2Xx9q9Abi2YGJ5xWaoxnEX2hGRqeg\/3t5g5+E8lNVZLlOAbHctn8LXSxOGr8ZBdfRhBB5SfAjxL6S2Wl2Q5X1y72AmrOnL+M0vcfsxorfngtgPMA2AUDd6yB6fuFrpbfArjfnls2mBGTJ+2H322D1r0zOD5TXJwwg0AHRr0PqQRi6CrJ7TBHF0FEofztEjgffsunn9H8PBn\/M3KbDNHhJE1Q2X2SSmivlTM5o7c4u46cjL6LXqcenXDxtUW0leKNviKrgMoYzuwGoJ116vNkucGKz8q22Wqs5yt1KEh9dVOFi0UCKVkytoGECjOSCnyGCZQQ\/lgQ+QlRIgh8h9pWh35g8kvlI3AfhZ01+rXzQ9jWzG2nod+D0mgCg7rUmECmm55Og43meyJpt8AM\/gGUfMQ8FVoFVY5qLFqLCEH6G+Tx8vPkoxR2CwZ8wvx1wWRi5zgQ\/lRr+Mzq7GwXscRr52uAFpLUfUGS1H4C0F+D73XW8ft1qfOoRnImdYkWSkCEXkMz+fo+GTuGmeJoRAmgwydV4+NCcRA\/3TGmtMUqAQYI06lThLf2hDQWeEEIUIsGPEItFa0jeZ4oa6iwkHmDeNX4GLjc9wfQYE9u4Wy42DUpby21SipmFSm8rckDWNFNtvghUrs9Wy2eg+0OFTym3\/9dUw3+iZK2hclRSYRlMENr\/PRj8ycTMyu9Hn09a+8iXkJPV8JfOGGe1Hktv8mGGtVe6uKIVBbtx1sNJb5Ahpjc3dbBx0NzKiln3v5NWXsTOXKiUR8uni49DCDGLBD9CLCQnBiPXmpmYxH3gpYHxfJw8zTorlpgy2eBBejPseh20fQuqn1\/+ZdJbKLnjTGfNLqrxpa+aF4D+skmOnppjpAKw7BNQW2SJbda1PRj8OfR\/p\/xzivGXuSwHJijt\/jiM\/X0iVSat\/TyW6aBY0fuhTIL1De+kIfk3nhz8Ezt0PR0M5u8rpkLQ8NbJvKackcweYqktBe5gZpKaSHA0gzhY7KCGbiJsIcrR5GlDEjwegu3lvnIhRI4EP0IslKHfmwJ8UKCK8DyXvIrZ8yFYfy9YZQZYw9eWcZAGKzz9oegLzUf8PlNfJrAWqp5b2Vi1hu6PwtjNLEzBR6vgtvK8UpshfgdTawQlvSAWHm6RANVWFgkny7FNr+WYxlcST3dB7yXozNOoiXIDygQ+1WeYZPQZusY2oYt2TFUk8bNCmTjnV4UAACAASURBVJmsNh0ngY9R\/HkODUHLR8p4wUKImST4EWIhJO6Bvq8ufrPSglwY\/jXUv6H0odo1tXFKCXSAyvNLF6Dq2eZjLpL\/WsDABwish5oXlT5u3PBvZ32fqq1EycRiR7s0hkzLDUv5qAmthlU\/hfidJrnb2Wtyo+peD+ENeZOQXZ3FK7H0ObXwo19pqnWW6LTdYQGw\/LD8KxA6usSohRD5SPAjxELo\/36F1ZvVZO8qL86CBAKJe8oLfrwRypqFsqLzHlJe\/d9hQVt8NL13Mi+pHNluxvOMxuMTn\/J4TvhR7k4em3f2R+HREQnTEKya8YQF1aeajzKEfaX6cGkamf7vyJ4VQ2lY\/k2oek5Z9xRCzCZd3YWYL+1C6uHKzgmsheVfzn18I9dna55UpPQxlRznayl9zFxkyqwZVK6+bxTvXj9TYBVT86\/GT31F9T9MlecZMzMKj5DKcGHoMhi5cX5DTTxR8pjDGCpxRBZil81rHEIsdRL8CDFvHpXNZCjwr4LIc6HqeVBzBtS+Kk8AZJvHVl4OwaNKXzZPjkleVhCCh5U+rpxZpDlZ4AlnpxeyO8o\/vu61pkRAjlImAKq2Unyy8QpOCz9EUGWwcfHh8JzQ41zS+FNa7F7o\/bSpK1QmT7vsHr2Hv+z4KL\/f8g62j\/y96PEWmkw5ifHJh8BbyD5xQiwtsuwlxHwpP2YmodyEZg2Jf8K2s2D5\/0DkBFj2YVOVePBySD9pdlBVnwMNbzJtElouhl1vLHxJezlEnln+mJd9FnZfQMGgLXDYZM2ehVZ9Koz8ceGup3ymXlC5gkeY4o\/Dv2f8eza+\/FVlpXhd9GZeW3MLae0noLIz2l5YMPpX07wUTNuP5L\/M55ETphVwdLw0N+26hMH09rKHZmG6xZemctWwQyWPFELMJsGPEAvCR0W7uXQS3CR0vsd0DY+cUDx3JPQMaP0S9FzMrLo4dgus\/nVlww0fZXpi7fng9NYWAIFjYdX\/VXa9SjR+AEauZ0Hq+4AZv6+tsnOaLoLh3xV82lKasMpTCkAnINtp8rS6PwmJOzHfewVkoepU07rDinBfz\/9VFPiACUXryml6a9eBVV3RtYUQkyT4EWK+kg8w9y7tadjzn2b2KPpi00Xdrsl\/aPQ8qH4BDP4MEveahOm615vO5cl7oOeXkN0Fvkao+zfT2LPQbi2AqlNg\/T0w9jeI32s6zte+BgIr5vhayuRvhOVfM9vd573934LQsdP7kJVj8OfMKfhSQbDqYPe7IPNULnCc8r2P3w6d7ya74lJ2jt5Z4cU1VWSJlvq3pEJQ\/2ZpaSHEPEjwI8R8aA\/2fIT57V5yTdL08B8hcT+s\/iVYBZKSrQA0vsN8jN+\/+78g\/o9cjy4guxNSj0PgCmj\/8exaPVMpBTXnmI850lrTn3yShDNA2NdAc\/gIlCqRTljzAki\/I9ehfa5sEwAW6dxe0EjhWZ\/itAkuM9tmz5iBeSz9FPHh61E4ZbUlnaRIYfM49TTpJE2ksNDTd3upMESeDfUXzHH8QgiQ4EeI+UncW3lrhYKyphHo4C8ng5tShn4F8dtmb7PXSdPxvPeLsPxzCzS+2Xrim\/lnz3fJuomJzGGfFeLE5e+hrapIb6+Rv0HsR\/O4s8\/MhDW+B\/zLKz\/d6a\/8FK2w6l+HNXarWf4qRCcJxS7Foh6vwqreGXw8gmmJodAcY8HRviy2N2Zyv+ovNLN\/pYJLIURREvwIMR\/ZXSxs5eaMKZhXTvCjNcQuL1xfSGdg9HqoeyOEjyh8HS9juqIP\/gK8MZNP0vA2qHtV0WWzvsQT\/KPry7jjMyC5yS\/HTXFH19c5feV\/0RLJkzSduAd6L6Hy902ZRPDmj0Ltyyur7TOTVQVennYROePb313URNHBR6nnmY3\/CXveW\/LyAW8YRamaPsVpFG7dK7CbZZZHiIUmfz4IMR92LQvTs2sKd7C847yhXMHCYjTs\/jfofF+Be8Vh2zkw8B3wYkAG3L3Q92XY\/vJcb7L8\/rX38snAZ+ZldYZ\/7b08\/4l93yy\/IKS1zOw8qz4HWj4F627NBWXzfM9rX0axv\/2yWFxDB7eznH\/Qxh9Yw97Qc7AsX67sQJFcKsDC4ygGsXN5RRYe1WSwKswz2jL4l4qOF0KUR2Z+hJiPqlNZsF1L4+xyKyv7TM5PORJ3mN1Jyz8\/\/fHOd5ggKh+ny+QTrfjGrKdGUl3ESuxkGs10E8\/2UeVvnnzQHYR0mUUOrQZYe23xnKW5qn8LjFyHdodRM75\/jlY8QBMp\/PRMCXLW155lPql7jVluLJHmdTSDKDTtjFE9pXDiKH7uoJXhMrapZ3USrTVKkpuFWFAy8yPEXGR2m6RiL2N+kRJcoAvbUHV6eRWL7RpTKbpco38Cb0r1YmcI0o8XPyd+a66ezKSUM8INO0sneSvlI+POyI3xUuXN2thNsOqKxQl8AHwNsOoXJHztOCgy2iKrFSltcx\/L2EbtjBMsVtbk2kmknypcJVuFGJ8JVAqOVkNU46AUEx81ZDmP3dRRevbLVgEJfIRYBDLzI0Ql4nfD3q+A05MLUNKYGi8L9QvKhdEbIPkgrPgWBFYXP7zpfWbLeFnLSBrGbjJd2cEkSpdzTnorhI6ceOS2zi\/jkS1yjuFphyp\/0\/QHfU0m+CkaN\/lg9W\/BV1fG+PJwx2D4D6aBqTcK\/vZcovCZ0xOF\/W3cpJeDVkTJkMUiRijvDq0VVRsI2jUw9Dvo+1r+99uqgeVfh5FrYPRGwEPr2TvSxytKn8Ye\/kjx4HXt+GyTEGJBycyPEOUauw32\/D\/TSkGnMIEPmN\/kC7j0pVPmHrveDE6s+LHVp0HzhyiVgzLBG5v8vOy8mcnjHC9LLP10yTMUFiuqNxKwZzYC9ZtaQqrQTJkfas6ae+Dj9MPO18DA98yWfzcGqYeg5xLo\/rApKTBFyh0mgZ8eqhggnDfw8akwG1veYYKqvq8WSTB3zLJe438AAfNyC8TESkEEl1CRDu9+q4pjGl9R1ssWQlRGgh+xpGmt6enp4Y477uCGG27gxhtv5OGHHyaRmLJco7MwcgPs+SjowgnACzwyk8w8+LPih2V2mi3Qbd8u77IDP4Idr4bYFRAqshV9gg3B9RNfDScexVdgl1YQhxoy+HGxVYATlr0t\/yUb\/8MkMasZOS8qBP42WPaJ8l5LPt0Xg7M3\/9b\/+F0w9FvzdfIh6PoAgRLfT4XNxpa3E\/E3mmKQxX5k6iQM\/cLM1jW+razKT7UTM4fT79oUOpLzOr5OeK5BoBCiKFn2EkuW1ppHHnmEzs5OXNf8Qnddl927d9PV1cVJJ51EXXA7dH0gV9BuXwU+4zyzBb3h7bOrPqe3mNmMzDYzm+KVuW3c7TE7zAcuhdgPMb\/Mi8xa1b4it07jQt83iQz+BodV0w6pJ8UG+mgkhYfCAoZ8HYQLBRZWCFZdDiPXmUrLzl6w60216tpXzD3PJ9sNqQcouIVep3BjP2Tz2EO4iX\/RTJx1+HicBrwCQY3PCrIqenLu+j2ThSQLjqHH\/DdyEgx8v+SQ4\/g5sv4lHN3wKhJOH1kvTrW\/1QRbQohFI8GPWLL6+vqmBT41gW5WRB\/GbyUZTi\/nsQf2ctLKy1ClfuEtKtcECE3vnnwoswt2vzlXXFHPbTZKp0oXpQ49C5ZdbD7f+xUY+SN30TztkAZSvIBOfLnmn3buog3OTtj1elh9FfimnwPklr9eaT4WSvopUweowPZ7AMvt58nEk3jUsI0ICgjgkUbNWvKyVYCNy96BhY+9icdJJbeyAh92kaUqfLkcp\/CxaPyoIrlRGSzSqoHjl70JgKCvquCxQoiFJcGPWLK2bt1KlW83NZFu1tXfSVVgAKU8LKVxPD+WckAfADtthq+eHvz0\/y94SebXUqMUn1l+UsrMzIxcw6inGSDE1GWaE+mdCHymUnjgDkP\/96H104s4zqk3DVLqPdGaiaKFTi6XycOllTi9RLABDz8hfwPHN7+FZeEjuXHnRxnNdKN0gpfjFs5tV2Gof8PEl2N1b6Fm6Id5D9ca7mMZzZEixSeFEItGgh+xJGjPJdH3JPE9D+Fm4li2zeGBu6hr\/xeWMjM\/U5NTfdb4X+yLFWBYTHaCL7Fk5U6pw6OzJvF6oWsLzaJh5PfgnWPyY1D0zdjOHyVDddFdXy6M\/hlaPlG8wepCCR9ftESA1tBDhJnRi0bRQJqT6GUMP76ac4ku\/ywAN+78KEPp3WhcwOZhGjlOD8wO+FQAAmug5tyJh2qa38PmkVs5xt0ybVHNxQQ+e1QTZzS8bH6vWQgxJxL8iEOe9hz6N1+DkxhA5+rcuA5UVcVRSu+H5tjK9KSqeQHE\/wl9Xyl+uD0l6XXB+oiV4prk4JHrc7NMLjZ+1JRgMIyTm0UpFiB64MWnv4bFYgVNflTsh3l3ZLkoNjM7l8bDYhc1HKdiBMmarvNKsTfxOKOZ7lzgYzxJPWlsnqn7CSgPRQBbKYi+xOy6mxLkKaVYs+q7XLvrkyzzeqnSCYYI0ks1lvLzjMbX0Bw5anHeCyFEURL8iEPeyK57ycb7p21ztq0xqsJPotRiz6DkY0PoaDNT4F9lko8LtalQAbM1fJxVbX7B6tJ1dubPmbY1vp0x7puS85PExio5M6ZMH619peFtJkAc\/BnkZqVcDS4Wd9FKrEBV5fGlMFRgosN919h9OHnyqXYQZQc1RHWWqL+JUPg4do7cjzv8dmoDKzk6ejLtwXZUYAU1gVZesubbbBu+he0jt+F4aVaF1nNkw0tpCFVQoFIIsaAk+BGHNO25JHoemVXfJRx8msXNmSnGgbGboepkU2un9fPQ\/ZE8ict+sJuh\/o2TDynbNPUcuhrKKDS4kCwFx+t+7mcZLhYjBInjo7bgOCyoeeG+WfIapxQ0vx+CR5jmqTpNL2Fup63gji6FxzISJvAJHYcOHkk800vCKdZjTTFCgJHsKCp7Fzq3DDmY3s49fVvpJslzVD8qdAyB1s9wZMNLObLhpYvwgoUQcyF1fsQhzc3E8+aBWHZ8P8365HhTdiRVnwYrvguBw80vYKvKJO\/WnAurfzl7m3vjf4C\/hf3xt8taRmkilWvYqbmXFpxCSeHKB42lO6AvisBKwCarLe5i+eTMTgFHEIfIc+msfRPXb\/9P\/rzjIrrG7i1xEw3oicBnnIPFTsLs0X5IPQi73gjZrnm9HCHEwpKZH3FIU7Yfnaf5p+vW4nk2llVmfRww\/aasarCikH6EOScdqwhUPXf6Y5FnQ8dvINtrlpr8rYWXi+wotP8UdrwKvOG5jWGOlIIzdBcxgmynhgw2nVSxSo9hzYwvtMoFaftB8Ciwa9ju+XOBT7Hgx+Y2+0jW+E\/kyZ5L83Sq13nPV2iCuDhYODP+jnSxeJw6VhA3OU\/934HlX57vqxJCLBAJfsQhzfaH8UUacOL90x5Ppg4jWlXqL\/uZF6uHjqvN51qbnUwDP4bstsquo\/xQfXb+5\/wtQBkBQ+Ie8PZ10UVDKWgkTWPJoo\/7dlluGqVg2cXs6voabokJbo0m6Y7w2OA1hS427Ssbj2OIcRjDWGgUpgTAgzQxwGSBxuGJ3XGeWebU2X27BCiEKEiWvcQhL9pxMsqaHud7OsRo4riymqdPyO6arOCrFERfDGt+Dx1\/MrNBeU25rwqamaOVl4IVqOg1zDL0GyijK\/h+5V+5f+9ffZpJKi9bOf8YNBqI4yOLhYVmkCCgOIVulhOfONI\/dWZQk9s1J4Q4EMjMjzjkheraqV1\/JsNbbgVAaxelLMaSG6mJPET5ic++6Y1BxwVWwPp\/mN5RI9eZx6Lnm1+8Q1dB\/E6TqFxztmnfYNfP\/0VNrf0zLwHMDE2574E\/d7zC\/Phw8p+rwtDwVvO558HQz2HoV2YJyL8Cmj4IVc+Z\/\/CdARMIjt1sktqrToK6C8DphoEf0ZbZRoxo3tmfMA4djFBFljH87CBKquSPRIWHYiu1bCeKnQuGFGYr\/XJM1W0LzRqmLEkqG6zI\/F+vEGJBKF3Bn74bN27UmzZtWsThCLF4tOeQim3HTY9h+SOEGtqxtj+\/aDuEaVQQ1t4MdvWijrMsXR+A+G0LcCEF1S+FseuobPdbyOQk6URu2\/2Ulg8qDJEToe0bpsrzjpfmDxrDJ0N76f5XBSUfhs53A9kp30M\/k6\/DIa0t\/siaGTk5mmMZ4CiGAI2twNEKBTxCPY\/lqQU0nSaASwabmUtiFh4KjY3mxewipFxTHrH2tabYoxBin1JK3a+13jjzcVn2EkuGsnyEmw6jesXxRJYdgVXRspENVWccGIEP5La\/L8T\/vhqSt1P5JHAKvIFco88pgY\/VCM0fNIGPssxOp3yBD0DyLui\/dG7D9lLQ9V7Q8RnB63ggZsYUVB6nswcfHlZuGWodIxzJELYygQ+AT2lspTmGQToolESuWccQ57EzF0zNToL2sHCxaCNOSLloDQoFda+d2+ushBOD5GbIbC9a6VoIIcteYimzqiDPTrD8PNM40x0xu632t\/BGCG+A5ALMxLpDZrZGW+TrXJ\/WFgl8BPGIqCJNPQG8Iej\/LoRPMEs9Tokt3oNXTO9bVq7YT8qudr1MJTlfb2cLtTxGHceSpz1Fjk9pjtMxdhBlZnBzTG62aAfREhvnFTuIEtEOz1Qxc509H4SOa8x7UkB3\/CEeHfgdsdRWFBZt1Rs4uuGV1IdWF3+BTh\/0fh4Sd+cauzqmwWrzx6D61OLnCrFESfAjli4rCFWnQvzvlF7y0ZDdCd3\/BSu\/tw8GV4JSsOL7sON8cHrmeTFTr4aGt8HQLye2z8e1j00000MEG42HIqozbKSPJlVo1swFbxS63g01ZRT10ynwHLAq+FE0cDnEfkQlpQaCyuMYBlmjR6YnIuc7FpfqXB7QeAAUwuGY3GxRStu4Bba+V5NFA2P4eZJ62nSCMA5PZhw6t74DrQK0hJ\/BkQ3nTwtqNvdfzeOxa3GnFLrcNXo3nWP3cnjdeaytPZPaYJ4EcncQdr7e\/Bd3chYs22kKZ7Z+wbRROYg4XoZH+39LV3wTYLE6ehJH1b8Mq5J\/I0KUIDk\/YmnL7ICdF5jclbJY0PHHXBG9A4CXMH\/1j90E2LllqDkKb4Sa89B9XyfpZfgLq8hgoWcsr9l4nEEXzQUDIEwtI\/9KyDxV+r7rN5Uf\/CQfhM7\/yNu7q1xaU7KfW6eOcBfLJxKljyLGsQxgK9iua9hE80RXeIXmaGIcyRAKjQIyWGymgWECDBHKlYS0csdbWMrHxpZ3sLb2DGKpbdy065I89YUmWfipC63meW0XUeWfbDFC37dg8BcUKiugrTrUupuLzjgdSPbEH+S2zi8y848Rhc1Zq\/6bpvDh+2dg4qAlOT9C5BPogFWXg91a5gme6cV1oLAisPyLsPavsOLbUPt6YI6\/6LQD0ReBr5mHaCSDPSvwAVPA7x5aJtJKEtpmQAeJ6ykBjE5AZkvpe6pwZbM+scvztAGpTDmNbFeQoGrKLrgqshP5Qe2M5UIcAM0pdHM0gwSUh19pfEoTUS4n0E8bCdwZAaTGw9UZNvX+iLFML0\/Erscr0avNI8tgaht\/3fkJMu6UHKrh31OsnpLrjaETFdaz2k9SzkjewAdA43LTrktwvDI3JwhRggQ\/QgSPAKuC4nOjN5jE0gNFphP6L4Oez5rCi3PtWRY+Hqwwuv1ydhGd8gt+tgQ+uohwk17JdXRwKyu4ntXcqNuJaVP3piwNb6lsjKnN7IuebErBmXTlalh7jOGfaOPhU5oT6cXGo4UkrSTy5hD5lOYohogUmpXRHk8O3cBgentuw3xxGo+sl2DL0E2Tj3mjJc+JxQ+O2foH+35Gse+txuOR\/qv33YDEIU2CHyHSWyDbXcEJHux+O4wtxFbzeYrfATtfDcNXm+Rib5g5t92w60B7OCqELpEOqNDcxXL6COFhkcXGwyJGiJtYmQuASozDboDGd1U2xn1YITmsXF7MLk7F\/NtQU34xr1ZjnMYejmEAX9HARbOGkbzPeDj0Jx7HX0H9H1dn2Dp88+TXqkALlInba3Ykniz7+vOltSaW2saesX8xnN5d0bldY6WDtF2jd851aEJMIxlkYmnR2lRqTj1p8mWsMCTvp+yZigkZ6P44rLvFXGN\/yPaYej9U0J+smIHLIPUgvtavYSkbVxe+7mTdnNnvm4vFdqI0lColUPW8ysdYfbYpHFlR64zxwox+iGwEXxuMXMu0LfoFKAXLSeSKF07XqkrnV9kKqossadlWkDXR0xlO78QpczkvO6VSdF\/wOJqTdxfcvZbFostxOaGsK89PT3wz9\/ZeRtoZQSkLT7tU+Zt57vL30RhaB4Djpdg5ciex1DYCdjWroydTFzSJ3+XMfnlF\/k0KUQkJfsTSoDUMXQ3938yTFGwx59mS0b+Yqs37mnZg15tZsMAHzPsSvxtr5Fo6oqexbfhWdNHr5w8YLTTH0lf6fpHTKh9j\/RtNnkuJHJnpxl9DFhL3Qi79eK68XGVri8lyOoXyiFwNcfLPVvlUiDXR01kdfR6PDvwO1xmY1SE+n9rAionPR6vOoiq1iSqdmchJGudoxd20EvIvQEXxEnoTj\/KPri9PJm3n3peRTCc37\/o0Z6\/6Akknxp17vpEbWwqFxZOD19MSOZbntV1EQ2gdvYniy8nLwscs5ssQS4gse4mlYe\/Xoe9LBXZDzTHw0UlIPz2vYc3Z2G3glhFgVEqnYPByjm36N4J2zbSlnnGqxPvVRhy7nOAi9VDl4\/O3wsofgFVrdpSVZep4XeabM5Rs\/TY9mOUmpUonUO8gX2FMhc8Kszr6PHxWkLNXf4HG0HpsVbznm08FObLh\/Imv22vP5CbWsI0ojlY4WuFq2KtD3MJKBlQ9h9efV+lLrNim3h8W3K3m6jR\/2fkRbuv6Co5O4eR26o0nfvcmNnNPz6WcsOxtJe+zoeVNCzpusXRJ8CMOfemnYfgqFj5R1ga7doGvWabhq5lz0FZKtpOwXcsLV32Odsaw8PDhYuHRTJK1BSsgGzVkyvvBMtfAMXwsrLsJWj8HkdPndo25qno+VdFTGLY7yOrylkrDuNjTZpsUIbuWNbWn0zl2H46XJuyr5+zVX+Dc1V\/myPrzUXkm5W0VpL3mJNqqNkxe21fH+oZX8oBaxe9Yy59YzTWs5WbaGVQ1RANttNc8dwFeeGGjmW7i2VKBuKbQLKWrM+weu4egs5tzQ9WcThcb2EsN04OpZ7e8k5CvbmEGLZY8WfYSh76hqygnv6NyFlSftQjXLYMzsIgX94FShP0tnKIGyOpekvgI4BFSLo\/q4sso6dy8T8nQwF9ueYE8lN8U76t5AYzcAL2fnVftn0k+8K2E0NHsHL2dh2ggkVu2qrejbGx4H43AqpVfgJ2vpFRAbSs4iy76dJAHaGHMbiHrxXG8FE\/ErsO2\/NzX8wM2tvw7a2pPozbYzvHLLmRt7fN5ZOC3dI1twtMO0UAbRze+ktU1z0PNmGo6tvG1hOwom\/uvJqOzKGVha4dVNSezseXtWPiIpbaTyPYR8tXSGDp81jXmI+2OYilf0TpFxSg0z9W7CXR9gBAOKA8PWKdHeJpaHqQJhY\/RTCWbEoQoToIfcejLbF+kC3umim77T8xOqX0p0AGZRVpysyLQ9w0IrIXq5+Mfuxn\/lATjZSSx0XmrHAN0Us1GtbfETRTUvXphxhs9D2peCMkHIPWYyYcauJR8rTpKCqyClT\/irr0\/ZyfTg7OYO8pfd\/0Xz2l5N+vqziSz\/H9wuz8KOBPLfPmCPg3UWxbt9W9mc+z3eDqLl3s\/Hc\/MhtzX+wOCdg1t1ccDUBts55S2D5Y1ZKUUh9efx\/q6cxhK78TTWaKBlQTsKvoST3Lnnv8h6Q7nxmURtKs5sfXdtFVvKHHl8tjKj+PNPfB8BgOsYAxrSiBpAZbSHKaHGSbAdmp5YvA6RjLdnL7yYwswarHUybKXOPT5li3ShV3I7II9H16k6xdRfwGo0OJc2xuBwZ9B7xdyneOndy9vIkX1lAKAMzmEyFafn\/e5CeFnQ+gZCzZklILIBsCB2GXMKfDBB1Vn0JXczs7R2wsedW\/vpWS8JIGaM7DX\/BG7\/kLwt4OvBaVC078vKoKy67Hbr+Cp4ZuK5MWYoofz2c1kKZuG0FqawkcQsKvoHnuYm3Z\/kqQ7CHhoPDQOKXeI27u+Rnd8DjlXMzw9eCN\/23VxWTu18tP0EuFRGkjo2X+L+5TmWGKM\/1vbE9\/EcLpz7gMWIkeCH3Hoq301EFykizum8F5mxyJdv4DQs0w1ZrWY2+yzpleUUmC3mF\/qVjXKquL5dpyIVY1vyi96hQ9bBThp+fsJLf8s1L+dvItf1S9cnP5oyc1mu\/6cl78cSD3EA30\/K3nk5r5fmU\/8y6H5IlhzHay9EdbfDq2fhZpzofocaLkY1tzIqKoi7RYvSBh39vL7p9\/K00N\/m+P4J2mtuWPPVws+7+Fwb88PqKS90UzdcfNeubpwIFyaYi8RnqCO61nNVl0z64gQLqEp+UIP9v1ijvcSYpIse4lDX3iDqe+SuJvFSRJWkLjfLEXtK0rBsksgeCwMfH9xdn6N0xlQGtqvBKcTrFoi4WfyEu2xe+yf7Bj5B46XZln4KNbXnUPE32jOa36\/KWIYvwPST5jZkerngz37F9yCGPzpZGPPuVJh4tlSS3awN\/FogfP9JvCpOXfaw45OYykLt0SMkNVJHtj7U1yd4cj6FwMwlukl5Q4T8TVOvrcldP9\/9s47Pq6rzN\/PufdOH2nUq2VbthzHLXYc2+m9FyBAKAnlB2QX2KUssBA6u8vSNkDosPSybFhaaElIT5w4iVPs2LEdd1vF6mWk0fS595zfH1eWJWuqJJfE8\/ARkWfOPffcmdGc977l+0a35tQNipqDjCa7KHU1Zh2XiW0Dv512ns\/RyLH78E3UUKaSVIrMaw+neumP7iIlY5Q6G\/A7a2dlDUVOLYrGT5FXPkJA4zeh7+sw\/ZYz5gAAIABJREFU8kfs5OeJu5AGvksgurGABqeTTgDiBDhRhYCy10LgRtv46v8iJDvsDVjF7HVNuk6daesCWSG7BYj\/0iOzCZ35pRcyv\/TCzMdpTii5zP7JQX9slCd69tEfC1Pp9nFB3ULqvAF6oyGe628lYiZp9JWxpnoebj2Ndk58OzM2bkuvQ0R\/ndORoWvZS9KPpsRZn3dIy1JJXuz\/DRWuZjb3\/ZxQshNNOLBUikr3QtbVvjenwdIV3pTHmRQJGc49LA1SWQzG8+jdViAWgh1UcBFHkpvj6MQn9KsLJTt5rPNLCASWSlHhWsC5DR\/E7zhW4e0ir0SKxk+RUwPhgIp3QWzz5E7jogRqPgGB6+2E2Y73Uni+iAXedbO52sKIbYa+\/wBzAITTTvg1GsCzEiKP20rWwmW\/Bjl6QWVGgxkktWZDKcWfWrfwSNcepJJYSqEheKx7L2VOD8FEFKUUFgqnpvPb\/Zu4dfF5rKpqmjxRDo2c3AjQS6n1rqArkt14aPEX9n47NA9NJefQFnoKlUfloVQmj3b8J3JsrDUm6tgf28UD7Z\/k6nn\/RYmzPuPxufSCbNRJaDAI+jgSyjWVYDsVTA6fSswJKtcD8d3c13ob1zd\/E0+xFL5InhRzfoqcGqT64eD1kw0fADUKvZ+G4J12Y8\/6L1DYPYEB3rPBMb3QwYyJbYHO90Gqw\/b2qCiQBLMLwo\/CnB\/Bomeh6VcFqiIfjWlXQh0DnuzZz6Nde0hJC2ssB0WiSEmL\/ngYU0msMVdMUlokpcVPdj9F6+hR5f4l187MABIuMPtziO0pDCQLhr6CbH0zrQO\/4e+tH+P3e9\/On\/e\/hxf7f0vCnNzLK2GN8kzP92kPPZ1DMXviWaxxw+doUjLOC33Z85LqfGfkkBpQeDDwGNNTf9aETsDZlHvgNJHKNnz2UcoBSnOOT8nIuHp0kSL5UDR+ipwa9H6WrP2g+r8G0rRzUgqponI0Qf1XZrq66dP3lcwJvioOfV+1PT5mD9N29AonlF5vl8DPMkop\/ta+jaQsLByXkhZ3t2+f\/GDZmzIbP8IFGdpMHBmjg1GN31nDxXM+hZj09agAhQPJdbQhZYInEiM8N\/gHhhOtmDJGzBxiZ\/Av3NP6kXHRv6QV5v7Wj9M68vhYeftsCG0quqNbJvX4OppaRw2eHOc7j0Mz8uYtr7oJXcx+IUGN5qJda+R+mniBGo54fbKbc\/2xnZlzsYoUOYpi2KvIKx+lIPpMjkHSVk3WA+Qd9hJOmPu\/x8QoyItUDyQPZB8T3wHmEBhV5Jvvo5Sde6GjEJrH9vhUf2zm601DMBElYk4vafal4FGid0YlNP0UDr3PDvWpGKDbRo13HThbYPh\/syRFa7YXD2jwnckbF\/0vO4N\/oyf4ewxriBUMUiFsA3qvCtCLF+uo+0epUiStUZ7s+gZXzfsSOwbvImYGkbPZgw0Q6CStMI6jmupKZbE7eC+7Bu8iPv71PlF9SCGAdfRSoyXBCoKWOXyWjbkl5xKMH2Tn0F\/z9mjlQhdOljd9ngr3QmrNIN3hLeiak5QVZXP\/L3ImWO8Y\/BM13mL\/ryK5KRo\/RV75qCR53XGHH4f45vzCQ8IN5W8H\/QQZPgDW8Fhyc5YNQThAjoBrid0Py8rsLVAKoujcyzwsNDRgvquF5XUfxnuMOtfLsc14WsemK9N2LbZLziNPQeIl20D1XwLOZjtpe\/Tvdm7U0SEl4bKr58SRr0RNM1hWdgXLBr8IYvL4nZRPMXwOo5AMJ9oYSXSyf+ShjOGrmaCQuPTJ4SCpLB4\/9BX6Yi+NGQlHDB5QlJKkiVEWEcIjLFACtJlV3q2svoVKdwtPdH21oOMEOhoG1tiNhiYcCATrat9LxVgHeI9RzoIyO8G+L7ozr6avA\/E9OccUKQJF46fIqUC+eSDJ3ZCjPBgcdpVV6Wug8r0zXtqMcNTlYaiZtsijEFD2Rhj8dsaRQkBEOTDHKmssYH9sP21tH+O6+V\/H56ievbWPUeHy4tSNgsNeAI2+DH3VhA7+C+2fieilRBu\/T7DtVurUMBYCDUUMg53aIlb5L2TKJ8Ua4WiPmVIQyfHVKdAZTrSSOgZJ4gKNOf51GNrkkFP76FP0xXam8Y7YRlAcg+UE0catTQV6uqark7G1gBQiQ0XjdJSiNWGwuuad9EW3k5JRKtwttJRdkTEHqdpzOoZwkVTZDUlRzOQokidF46fIKx8hwLXU9gRkI2cllAFlt0D5zTPrSzVb6GXgPRciT5C+xFu3S\/g1uwO57dXIXu4eYKoXyZQx1h\/6Ctc1f30WFj0ZTWhcM2cpf217sSADyKnpXNdUmEK0KVPc3fZZLFWFk3L8pEihMYoDrASHDnyA17X8ZNIxo7Ht+NN4p44WEZiCAIfmRRdOrJwGdf4INJy6nzOr3wZAwgzzwkArj\/d0Uun4A14j87kk0IWPOUSOPKjUeFv6mBkkkhrApflxO8qIJgfYPvQHDoWfRSoTr1HFkopX01RyDgdH1tMf24WhuZlXcn7h1yE0qjwttJRdnud4wbq6f2JD19eyjaLRd1bBaylyalI0foqcGtTlaETpvwIiT5I1KVpz2X2kTgbD5zA1n4L2N9shnUlGjWEbRzW3HXlI846FyTIbGWaGO+eRZDvR1ABeR9XsrHsClzeezqFIkM0DHaSkNf4OObUxbRcFybE1C8Ch6VxY18Lqo0vdc7Bj8PfjXpEkOkMTtGMAEtYIB0fW0xywO8X3R3fS3vttzjxiH9hrENCowhzCT6YkXFPGsVSC5tKL2T\/y8KzlxPgcNayteTcpGeOhtv9gfa+HgUQdEoO6qkjWYyWC8MSkb+dCEIJwspdne39EX\/QlQGVca9Qc4IW+X7Gp7+fowjH+WtqaQjnNwckoRYmjsFyjppKzqfWsoDe2Pe25dOFgaeWNBc1Z5NSl6CMscmrgarYVirWjy2Y1CLwBar+Yew5lwjEs750WjlqY9ztb6FC4sDuyuyHwWvtxY4Kx4r+YbCKAloKDZM4BaQ\/nShqfHpoQvOO0c\/nwistZVz2fBSWVrKmayweWX8rXzn4db25Zw\/ySSmo8JayqbOJDKy7jjQvPKrgz+f6RR3KO2Tn0VwCUkmzougNTmcg0Bs4KhsabmaZH8XT3d\/AbtWNJybPTRT2c6uHRzv\/k3tYPs2N4aNzwATBV9mo2DXAeNmyEBypuJZIa4P62T9AbfRGFmdNIk2MCoRNDa6aKU4jhowsnC8uuKFgoEuCiOR+n1rsCbUKA0hAuDOHigoaPEnCdZH+fRU5aip6fIqcOnuXQ8jjEdtjCgHo5lFwJmgupJHvVBTTLR3Fq6fIKnHbLgsMhpJMJoxpqPws1n7YrnIQnveK0UW3nKoX+NqU8Xirb67OXzCJxSs5+4u5hhBAsKK1iQelUz9L5dQs5v27hjM9hytzhp6Rle096o9sxZYwAibRGTplIconqZAP1WAjkWLaJieCwoWOpJFsG\/2c8mVcBhnCjsNCEMVaqPp3Sd\/uYcmcfhpYiKe2v8e7YfOZ5d6Fr6Q1cBXbIS3jGWnBcy4s93yMlp6NqPj0M4aLC3cLKqlumd7zm4rKmzzIU309b6EmSMkqlayHzAhdMqXwrUiQbReOnyKmHZ5n9M4H\/27eJ1qEm\/ingRlNRDHFkA0koB4ZzDnr1bUfPdHIhNBA5jLOaT6DQIPQnBDq2J0gjokzW0zChPHrK5FR5TpvlBR9fvI5KRpOdWceUuhoAGE1208wgLYTI5GCqEXFuVAfpwcsoDiSCLUw13uRYUrqGA5+jivMbPoylTB5q\/8yMemPpwqLJu5f94TMA6Io10+A5gFAJNDHZqNJRLNNSOD1nQ\/nbwHsuEkn76FN5VVHNBqXOJlZW3UyDfzWa0HMfkIUK98LxqrAiRaZDMexV5JRnOB6iJfoNPlr+K0q0CIaQSGXngg5Zfv4UvpQHtc\/kVRlzMjOS6GBD1zf57fBW\/iQb2UQ9vd6rkY3fY0\/gvYxOrXUax6WVUOU5\/TiudvZZWXVzzjFnVr8DAKfmZTl9GCK7Z0YT0CCiLCREEBfZwluSFOFUH33RXVS4m1kYuHxGIoGaUNS528f\/bSonm4OXMpyqwlIapnSgCReGcFPmWkSXYyUbRAtdeFAoTBm3P+THgRJHA9c338GckrUzNnyKFJkNisZPkVOeSNcXWOXag1OY45udJuzEVr8WZ3+yjif6Dp3gVc6Mgdhu7m\/7JB3hZ1BYJDDYI3XWRw7w2OA9rKi+GX+GRG4NBxc0frTgHJuTjaaSs6n2LM34\/LySCyh32y08GpxlOXJ6bJSyQ4bbqKAtjzYMlkqwZ\/geAFbXvJOzam7F56hBw0CgU+ps5PTyV2GI\/EI4+lH6Q0np5sXhC3h28EraIstwCi+mijOY2MdAYhcd4Y1sOPR1Hmj\/FADiOBgihnBzXsO\/HPPzFClSCMWwV5FTGytEnfkoeto8HzAwud73FL+OzjvOC5sllImSKTZ0fn1KybULkwYVwhkbpH+ogWvn3c62gT+wb+R+LGWiUNR6lrOq5q1UuJtP0AUUiDUMqU47sT1NcvoVc\/+DrX13snv4nvGQk6F5WF5xE0sqXz0+ziEMLBzkUvsWArqUl11U5L3EqDk0dqxgYdmlLAhcQlKGx8rYfaRkjL3D9+c1V8JKbyR5jRQLS7YTT5OnZZEgGG9jY\/d3Z70abSqCS5o+Q4V7wTGav0iR6VE0foqc2kSfxf4zSF\/irglY5jpIPRkE9U5WYttg8LsQfY4+5SZFA4dDMgLFavpZSAgJCAUEv4cR\/jNnNnyTlTW3kLIi6JpripDeSYvZD71fguiTEzrb10PNx8F3zqShK2tuYWXNLUhpAhqalsYB7pyPJkRe+chWgZVcLm1y+FQIgUs\/UmXn0DwsrbiRHYN\/RqbRXZqIRGCIJEoJLHQ0JEIYrCzbxhQV6wkoTLqjW7ly7hfpjDxPzBwmWyXgdNGFk+F4G9WexbM+d5EiM6EY9ipyaqNS9iaXBQ3JVXOWHKcFzQLh9XDoHyH6DD1mGQ\/GziApj4Q3VtPPAkLoQuEQCkPYncpJHYKOd6BZQ7iM0peR4TMEbTdD5HG71YcM29VsqYPQ9SG7bUkaNM1Ib\/gAaB5E6avJdX8YVjo7C\/D66MJJS9lVOcctq7yJpZU3ouU4v8+IcF7VvZxeuplm305WV47w6ZXr0MVIznMIpRFKdnLNvNuZX3rh2LkOG8gamsjRCDYPLJVgKJGj\/9xJiJSSffv2sX79eh577DF27NiBaR67ascix5+i56fIqY17OSJH76VhMYfl5Q3HaUEzRCag+5Og4mxNLOQnw6+mzNXNaa4RNCRuTBaOGT5TUXaX7+CdUP0yytEY+nnaNhSAbQT1fA4WPpK+\/D8b1R+B+E5IbEv79A5VznYq0uoApUOg4zbKWJSH8ZOwRgknexFCRyiJQB\/X2PEYFZxWdg268LJv5O8krFGWeEpYWvlaGnyr6Y1uQxPGpEoyBxZNhPFgEcWgAz8mCTb1\/pRG\/1qWVryGtbX\/SNwaIW7aP8\/2fJ9EPn3ucly182SUh8jCyMgIGzZsGGvrYRMOhzl48CBnnXUW9fXTawRb5OSiaPwUObVxNoH7DIhtIV2YwMJFRd0HXz7JvmFbyC8sPfxk+NUkcTCYbECILQA0EkECmdNcUzD8f5A4YCtal1xtiyOKk+SrIrEfhu+0w3qaFwKvgZG7yKrMLYchdA8EXlXYuTQ3zP05BH8LA99AYY2p9cAeVcoOKpBpnOcCnUVl19A++iSmjCOEhqVSNPhWs6723ThyNMMdjO3jwfZPTypBP\/x7vXc1lzR9cvzxxRVX288rRX9sF9sH\/0DcHMGSR16P0wiykkFbZwiFiWANfWyimgMSDoYe5WDoUeb6z2dd\/XvwO2o4NPoc1owNH9vTNa+08PYXx4JwKs767n1s7DtIyrKYV1LBVXOWsLD0SM86KSUbNmxAKolIY9Ru2rSJyy67DK\/3BDY0LjIrnCTfaEWKnEDqb4eOt4M5aIsEAiBAuNADr4eSK+yHlIL4djup1tkEzvknasWZSXWAirEhtnY8XcVSBgfDp9Ps34UhJFquRBYVg+h6+\/fwQ\/Z\/jVoouR7K32SLJZ4Igv8LA9+283kOe3kSuye8Z1kY\/G7hxg\/YRl\/FW6D8jTD6CG09XyWlkrxAdVrDB0Bh0RPdwo0Lf8hwog1TJih1NuAycleDATzU8bmM2jvd0c3sDv6dxeXXjj8WTQ3y6KEvEE31Yx6lGzSPECsZnFSy7xh7\/89S\/cTR6cLOQWoPP0n73qdZVfUWdgXvHlNunj66cFDtOf2kSHbuiY7wX1sfJGVZpMZapQwPRnkp2M3Vc5Zyw7wVhFNxdu7ZhSSFyLI17tixg7Vr1x6vpRc5RhSNnyJFjAqY9wcYvQ+Gf283OHUtgvK3gudMe0x4PfR+YayH1tjmK5xQ9jaovNX2QpwM6KUgnOxLziE1oY\/TodgiFBq1vueRmoaeR3KrVDCKjkTgT\/XgCP4KRv4P5vwE3MdZ8yf2Agx8B45uEprD8OlTbkZwUpqKUhvfNf11Cwei9GrilsWWvl8js3magHCqj7g1QnmBVXKtI0+MiyJmYvvA78eNH6lMHmr\/LFFzMI3BpFjFQEatIkMoVqnBcePHRrJl4H8KWvNEBDqaMFBIGnxncU79+6c912yhlOLb2x8jak42DBWQlBb3tG\/jyd79jCTjLIsazFXZc90GBgaO4WqLHC+Kxk+RImCHOAI32j9HE34cuj4GR1feqCQEfwqhv8K830zuozUDIql+9g4\/QDB+EJdeyoLApdR6l+cXevNfCf134BJHb6CCzlgLd8Xms7bqBwS0WEblYoBW5WcrVSTQ0VBIBPPUKGda\/Tg73wcLHoBjpRGTbIXoM4ACzxpwtcDQz6YaPlloV342UjupEktv+3fW1L2HBYFLp72008quoSu8iZ7oi1nHCbRphY0OhZ\/NOSYpR4+MH32WhDWa1lNUSgpnDiPXTwo3ZhZl72xoY\/9vgFDMK7mQSncLmqZT712J11E5jTlnnz0jfYRT2bvdDyXGWnwoLW24ayJJy+JgaIDmNK1Yirx8KBo\/RYpkQyno+wJTDJ+JWP3Q\/XFo+un4Q+FUH7sG\/0p7+GmkSlHmamZp5Y00+M7MerrdQ\/ewpf\/XqAndtTvDz1HmmselTZ\/B0NzZ12tUQtlbWBffyLbkAhJH3cVKDLYmTuMiz9aMU+xTfjZTizW2uR1OI26lhCFcXGkNYkSeAP8l2ddSKFYIuj4yln81tmkLHVzLILGPfPtgHVJenqSOo9WWLSye6fk+Am28c3uhCKFxfsO\/8qd9t44lIKdHEzpeI\/8qsCPzF2ZQtoY2ZAxP6cixZOzMr5ud\/zU9lWcxNrdDd3NG5ZtpKb9yWvMUSiTVz\/6RR4ikevE5alkQuBS\/oybj+LbwEKbKT8do0DBpSDlwZDCAFBYjmuKObQ\/zsZVXMtdf+Htc5OSgaPwUKZKNxEtghXOPi2+DZDs45zIY28sjHZ\/HUqlxA6Y\/9hIbOvezqOwqzqx5+5TDlZI81f0d2kc3THnOVHGGEgfY2P09Lmj819xrqfogK4SP8tEIfZaBnJDe7CDFOe6XMnp9lAIf1rjhMxGJxihODiqDRfEds2v8KAntb7Fzlo5+PL6Fo1U5pBI8GVvBA9F1DFoBnCLFWvdOrvVtZKNWTbY2E8\/1\/njaxg+AU\/cyP3AxraHH04aodOFkUdk1aNNIEl8UuJL20SezjvEbR5S4s\/UGG8WZM79LIYhNcxs4\/NlOWCE29\/+ShBxlWeXrpjVXXudTihcHfsOu4N2gFBITDZ2dQ3\/htLJrWVX91rTeUUNoaGhYeQg5djtMlscVqAyfH6HY7okRcHRwf9s3WVuzmLkl5xT7jL0MKer8FCmSDWuEbBvpOMqExE6kslh\/6CuUqyANjBCYoBBsqQR7hx+gJzK5dFopxf1tn0xr+BxGqhSdkU3j6sBZEQKt6h\/419Vvo8ol0TCx7\/ElpznbsgZChIBaMncbt9DYQxnMoCdVWkJ\/nWr4TMJuwApgKcH3hl\/H70Yvo8+qwEInptxsiJ3Bfwy+i2EzuyClpRIMxvbOaLln1byDgLNpSm8uQ7iocp\/G8qqbpjVvjW8Zbr0sx7nfOf57pbuFTJ9PE41WSrAybOSmEuwjkHepfjYslWD7wO+Jpo5dPsz+kYfZHbwXqVLjXjeJhVQp9g7fP0UV25QJklaEFRUNqDy9W1LARl+UFApzwjEKEyVMghUvckb9n1la+hw+fSc7h\/7M\/W2f5N6DHyFu5tZWKnLyUPT8FCmSDUcj2ZRyjyBRZpC9Hd\/lKmsHBpZdWiwswhhspI5hXFgqwc6hv1LnWzF+5O7hewnmIQSnodMf3Zl36XCpO8AbF\/h4qvt+hlN2hdZprr3oIvsdsBj7ybRdxDHAP\/28mbQM\/SyPQfaKnoydwZ5kE8mjGrFKdOJKsH3kHNZVPJQ1pymU6qHSs2jayzU0N1fO+wLtoafZE7yHmDWMz6hiccUNzPGvm1Hzzmvnf5W7D36IlIxMeW5eyUX4nbUAWDJF++hGsoW1XqCaChKUquSkxOeUEgRxsa0AgcZcSEzuPvghzql7P3NLz8l9QAEoJdk+8LspLVoOY6kEz\/XeyYbeElpKNeLJexhK7AVs9ezmkitpHYWUyp3oP6JLHi4JMzfpoCGlU2KMYno7SQT2YDjCaT5XipFkBw+2f5rrm79VbNz6MqFo\/BQpkg3nPHAutMNfWVAKNnRt4WzjIZxH9QkLqCRXqS72hy\/joGuEYa110vM7Bv4426sep8qzCL\/jLkqdw4ymAjwdOYv7k9cAgsXONq7xPcN8R8+kYyIYqCzeAAcKXLPs5k\/15B6jV4GM8ED07CmGzxE0EpaHUbOMUsfw+KM+UrSMeeLiGLg6HifRuABXWeO0l6wLB82Bi2gOXDTtOdLhNsq4adEvaB15gt3Be4hbIeLWMFKlaBt9nLbRx3FoXuaVXEjUzO5pMdF4kDnMZ5TT1DDuMZHDPZTRRknW93k6WCrBxp7vAIq5pecWdrA0IfgLGPmLLU7pWgo1t4GzkXCqj2QaY3AiSiV5Mbid5wfcOLUmVpW14tITxK1hGt1\/I25eTFfMj5XRAFIc9qKlNMV+d4Ju3yhrKx5GoiMVOLK8XJFUP92RLTT6zyrsuoucEIrGT5Eiuaj7T2h7fdYhh8wqztAexymmeok0Ybvn5zj34QldTCgRRSmJEBpKyUnVO9mQWFR7C2uzUeddgSY89MZq2D26ekybxg4fbUksYkdiATeXPMh53u2AbcTtJHPYRUNSWzrLXh\/s3JOc27BzPjR+m8GeP2UdJoQiapaMGz+nM8QKhhAodGGX8KP\/ieShp4nEvoivfuVsXMKsMz9wISXOeh5o\/+SU51Iyyr6R\/JqfSjQOEODAcepPZ6kkz\/f9lKaSsxH5qmonO6DtpskVfdH10LoeKt6NKr0RkSNLQxMWpcYQvYl5xCydrcPns7bikTFPTZxF\/odZU7GMvaEBEtJJb6KJUGqi5+voT6Agbnk5GFlCwvKwuHRz1vMrJK0j64vGz8uEYs5PkSK5sAbJlvejFNwdPj+t4XMYTSg8rlZ0NALJUsKdL9jHFlBp0+BbXXAFkRAalZ53sWv0LCQGE\/\/kFRpJHNw5eiVDVsnYeKgknkEHSCGEhzNr\/7GgNeRDQniyvhIKoOwtoHlw6tnv2QwkumYnItcTYQVDGMI2fMA2RjXNxOnohv4vYyWzexROJBu67jgh5230rSOvXLcMWCrBQGxP\/ge0vTmzlMHQj\/An9uSshBMCFpVsxRAJQCNu+RhJHSm3l5gEk1upcnfS4DnIysCTLPJvQbPb+6adU2LQHj2duMyvRUdSRvMaV+TEUzR+ihQZI2lF2D\/8MNsGfs\/+4YdJWWNfZPGXSPflGJUudifnsi3RjKVyFwwrJAHfk9SW\/QF36OOowR+jyRB+R+5eQQFHE+fUv6\/ga0pJi6f6gqgsf+oKwfroqvF\/LxBhzqFnvJXDYcpdC3jNgh\/g1DwFryMbiUQ7DjWccatVgIXTbrMBrK2ej5bNGEXjpnlvxWtUseIodeOJaMLC69pLtPu5GV7BsSFphoma\/SfgzIILGz\/KefUfwhBuDOHGLmw3xv6bO6dFIEhY+Xk0GX0IVHYDVBv4BqeXX5+z0atAUe9uA+wcsIRMn5gvBOja4dy37H+5GmDmafzUeJblNa7IiacY9ipSBNgT\/Dtb+n+NQGCqBLpwsanvZ6yqfjunCZfd5mCsrDipDP4vdAXPxpdgCAuFwFQa90fO5jX+DWgZNlsBeD17EML2qqihn0Dwl6wt\/xCPDvweMtRhufUKrm3++rT6i\/1qz0Z6YiGy3cWbGKyPreLp+HK8IsGFni2scu9EjdtLguaSizmnoXDjKx9Ghn5BRZYUawEk0DDGrv+apqU8199G3JpaZu7UNK6fu4aGwDJeU3oWas+arOdWSkNFNwOXzOwijgGRE2L42BVkQgjmlpxL1Bxg28Dv0NARQiCVTomznlAyW2UeSGWNJ2bnJHR37jGpdlrKrmLn0N+QKrOHVdckla4eOmKnIZBUubLnkhmaOcXInzrG4vXzQnRFvJgqs2dHoNFSfkX265gllFJYKoEmHMUE62lSNH6KnPK0hZ5kS\/+vJ2mmHK4q2dL\/K3xVb+ZwWqxUgm8F30Bbqo4UDlLqSAuJR6JrGJZ+3hn4+5RzKMVY7sERA0eoBKgEdcPfZUX5u9ke\/MsUpV6vUcN186dn+AQTUTYPdOQVWIspDzEFI5Tw5\/BF3Bs9mzMqnsCpJdCFgyWVryn4\/PmizCCaUlmjLPqEirsqt5\/bVl7Jf7\/0BCNJu72FECCV4vq5y7l6ztIJR2YX+QPQjEzJ0ycWb56K4QIH6qh2GxoOPEYZUXNoXI8nHzScLK96AwAvDvyG3cF7j1RYjb2MkVSZSomgAAAgAElEQVQPTlFKUoUyzuN31FLmmpvfSfOowFLA3Qc\/iJlHHzcx9jdU6eoe\/z0TFc7erF5RkFQ722gPZxYFPczZde\/HpZfkHJcLKSWadmRN4WTvmKhjP15HFUqZHAytJzmmP1bvW8Xp5a+ixNWARy\/LP8\/qFKdo\/BQ5pVFKsbX\/fzOKxVkqyabh+2hwrUDEN7Ej2UxHqnZS36zDJHGwKX461\/ieod4YmjBHjviyTLLcU8ncsjvYPXQvg\/H9uHQ\/i8uvp963ctpfZi8OddpGU4ECvkmcJKXBSyNrOaviWVbXvJOAa8601pAPunMBVmz9WO5FeuLCz0Rt60ZfGZ9fcwOt4UG6oyE8uoOlZbU4dP2IoSgMlDEfYR3MOK8QEkf18VEmLhSXUYLXqCRqDmYcowknq6puYefQX8bbXJS55qOQjCa7KOTN13CwouqNNPjOJGoOsSt4d1oRR0ulsLL0NtOFm3Pr\/2XSY0pJ4mOaWW49MNmYL7kSoo9nnE8BUQxSeeTTKAUljmF8ehCPFsmZteTQUjR69tEZWziWEzf5zLqwaPJlz10qcdRzdt37qPYuzrm+TISS3Txx6KuEJmhdVbhaKHfP52BoPSiJzGDEdkU20xXZjIaBQ\/eyuPwGypxzScoIpc56KsY8eUUmUzR+ipzShFO9Y1\/KmYmbw0TMQ\/iB9dFVJDKWWdsigE\/GVnBTid0VXSmISA+lepY7VhWFkb9RWqpYW34ZuGYnoTglLZTKvflpmJQ7+9GEJGyWErNKAI1Rs4qzaj\/HwsD0v9TzobzqXciRn2d8PoXADLxpyuNCCJpLqvDpfWwb+CV3De4EIOBsYnnVTTT5z0HUfBDVdRtiSq8zkFInqZbjCpw2exczy5xX\/yEe6vhsxufX1vwDC8ou5bTy60jJKAKNxw59kaH4\/qztNyYjaPSdxZk1\/48Sp60e3TbyxLTXXONZgnusg71Sij3D9\/HS4J9IyjCg8BiVrKh8E82BC+0DAq+yW8hk6d22lbqMz026EgEoxdLA8xgilVXr6TAL\/HZOX2dsIUxIfnZqCZYFnsGd5m\/XEG7Oqr2VeSXnoWu5PYdxc4SRZAe6cFDhXjhJ\/bsr\/ALrO7805ZihxD6GEvtyX8AYEpOEFeLFgTsRaGg4QIDHKOf8ho9QUWCT3Vc6ReOnyClNzAzmrLgSKLQxpeaRHImPEp0R60iX7IRyMiq92Y0fgOiTENsMSHA2Q\/1XwTkzb8t8fwW60DCz6JrM9+6kybcPNaYCLIQknCrjpdA6hCgllDr23ep13Uew4v2UDX0HXalJG5aJYERvpLIqvUF4YOQxnu\/98STP3UiynY3d32OgbC+ra96OrLgVhn4CSISQKAVKGVhiLs6F3z2p74qrvadz+Zx\/Z0P3HSSsI2EmQ7hZU\/sP4206hBA4dR8DsT0EE60FGD42Fa4FJKwQHlmOobmImkM5u8tnojv6An898D6WVbyeiNlLW+ipSeKEkVQvz\/X+kHCqmxVVb7QfbPql3d4kjXejVz+dNjP\/0J0Q4NXTiRFmHr+wZAdzfXsYTNZhSQOfESLgGMw4h6ni9Ea3sSBwSda5k1aYZ3r+m67IZnThQKEQaCyvegOLy64jYYVY3\/nlvK8tXxQSiwQoCKd6uL\/tNrxGFYvKrqal7Eqcen4J3K9kRD53hodZs2aNev7554\/hcooUOT5YKsXzPT+hdfSJnF\/yBjqvZzeaUPx0+HqeSyzJmCdgkGKxo51uq4qQ9OERCc73bOU630ZcWr4bkgZaKcy\/C6bRHPMwSik++\/zfGIiH05p3C3zbaPQcnFD1YiMVmNLJ1pFredfiy1he0TDtNRTCyPC9WAPfpMzqAyAhnIz6rqKq\/nNoae6uE9Yof9n\/nozd03Xh5PK5n6fSvRCSbcjBX6NiO1GiDFHxRvTSC8l7hzwJCCU6GU6043PWUulegKVStIeeYu\/wfcTNEH5HDQ7Ny6FI7s7wR6NhoGsOpJK0lF2F16jgxYHfZO0dlntOB\/Y2nP5zrwkHNzR\/C5\/DVh9HRqH\/OzD6d1ApcC6Amtt4ZmQDB0YemcYKBLXe5QzEdhd0HYe3xFwfDUO4ec3CH+DU\/WmfN2WC+1pvI5Lqm\/Ia6MLFkopXk0iNsjd0X95rmym6cODU\/Vw198t4HZW5D3gFIITYpJSaUvlQNH6KnJJs6LqDrvCmnF+KmnCwyN3M6vi9gOJgqo47hm4mmSbnx0ZhYGJOeN4rYnyh6kd4RAIt773WCeVvh+r353tAWnqiIW7f+gBJyyI1obO1T09xVsW9aCK9V0gpiFseblzwZSo801dBng5SJlAygT4WOsnErqG7s27QAsHckgs4r+GD9gPKBGsIhBv07HOf7KRkjIfaP8dosnuSV0WgF5TgnA5dOKn2nE5fbOe0vT\/5oGGwpOI1nFH95qzjOsObeKrrmxm712ee38G1879KUkZ4uuvbhM3evI\/N1wDyO+qp9S5lbsn51HqXT\/Ii7g0+wAv9v8rYkkMTDjQcWSvIjgUCjUr3Iq6c94Xjet4TRSbjp5gWXuSUYyRxKC\/DRxcuKlzNrKz7IIcTR5sdPZzj2Y6TqcdqWAjkJMMHIKo8fC14C6PSS1xmMpqOJgmhP+c5NjN13lI+v+YGrp27jBq3nzKnhzMqGrmp2Z\/VEBMC3HqMBzs+hpSFhVBmiqa5cho+AMOJtqzvoUIxkjgAfV+FPetg7xo4cBXsvwTabiY+9DvaDn2Ctv03EWt9Ewz9YqyR7cnPcz0\/JpQ8NGVjnanhA3aS\/0BsNy2BK3Pq6swEiUko2ZVzXL1vFW6jjEJFFy+Z8ylKXY04NE\/WpPF0CJGfUzCc6mb\/yMM80Xk797XdNknbaO\/wfRkNH7CN85l41qaLQhJMHGA02X3cz30yUTR+ipxytI0+iVTZNwlduFhX9x4un\/sf6M5acB1J+r2l5EHeXPIQldowOhYaFo16HxoSlUEArsus5lMD7yWSQXQtLbOkFut3uLl+7nL+c+2r+a+zX8v7ll2MR4+SSVfoMHb5eIqdwb\/NyjpmG7ceyNnywJU8CMN3wiRjVUJiJ0b\/l+mMbOZZU\/LXhMmG\/t9jHngVJApQJj4BJK0wHeGNWfVuZoqpEhwKpw+f6cKd9vFCEej4HLnL+TWhc9mcf8v5Xo+Px+Ccug9Q61sOwNPd3y04B6pQTBUnlOjg8UNfGX8sl8ijpZLjieHHG4FBMNF6Qs59slA0foqcciStcM47ZK+jkvmlFx6pyqj7LxgzbISA873b+WLVj\/h69Xf4RvW3+UDVw2hadsPGECbDsoAvuxkmPGcjmsreEHMi+4cfmt5JYtuh4z1w8NXQ8W6IbZvePBloDlw8qWrmaAyghUEylXsbQrGWfiQCiUYnbh6VpaiO99o5Jycpw4l2dJGPB3FmX+9RcyCt0WAVGH7KhMIilOwmlOzMOTZi9uZ1zS69lHPqPzDebHYk0UEwcWDGa80HiUUw0cpQ3JZW8Dtqso43hJs5\/nV5KWbPNkLY4c1TmWK1V5FTjnLXfAzhwszokhaUueZNfsg1H+q+CL3\/ZueOYCEEeDQNhBNVfztWX3YhNKU03Fqebm7hgfJ35Dd2Ghg5DLWJFOyalxIO\/QPEJzSCTLVDx9vAvRLm\/By0md93BVxNNPrX0Bl+fsoaNQz8RJlDOOc8jUTooASJxjAu+mSY2vBjtv7MSYg2VjVUGLnFHk8E3ZHN9Bx8kcVl19Ef30XSChNwzWFxxQ1Ue454WwfjBzImth\/GEB5eu\/DHk3SxdgenCo7mwxFR0sKQyqQnsoUKdzOLK25guPt7Wb5nFCur3kLCGqVjdOOshCzzX6ek1rv8uJ3vZKTo+SlyyjG39Lysz+vCwenlr5r6ROk1MO+PUPYmcLaAawlU\/jM0343Ht4T5JdmrJ7xanAY9D4+LcIP3bCi5JvfYaVLibCTfP\/9yV4H6ID2fm2z4TCS+FXo+U9h8WTi3\/gMsCFyGLhw4NA+G5kETDurdzVyuDeVMMNdQ+CZ4N0wEB5QLYptmbY2ziVQWCSuEyhG2HRs94feTz\/ABO\/9EkmTn8J8ZiO8ilDpER3gjD7V\/hvtaPz6uYqzn0cbB0NxTBEEHYrsKX5MCqTTkNF4yNfY\/gDn+dVR7l6KLqTcaunCyru6fcehuzqv\/IGfX\/RN+owHbSNWocLWwuvrWsb5q+VPlXkxL4Cr0LFpkhyvNCrkBeiVS9PwUOeVwaB7Oa\/gQT3Z9Y+xu8qhvOSV4ceBOFpffQIPvzMlfqM45UHNb2nlf37yKb2x7hJScujE5SPFG\/8O57yb1Kqh8LwReC8dQpr7Gu4xcOT+HWV37zvwnlhLC92YfE\/47yM+DNvOvH00YrKm9lTOq3kx\/bBdKWVR4WvBaA9D+aO7lIohPCjsIEuiQZfM4UbSHNvJc7w+RykLl0RLi5U4wcYDHDn2RK+d+iUb\/WbzQ\/6uMYzUM5qW5qdHz3OAPV3cpICWdOLQUY3qJBXmADOGk2rPEXpPQuajx4+wauptdwb+RkhGUklS4W1hZfQu1XrsJqhAazYGLxzWbDiOVxa7gX7DMRF6ePqdWyuVNn0fTNNbW\/SM9kW082fV1pLKwVHLMYyhZVHY1yyvfkP9FvUIpGj9FTkka\/Wu4Yu4X2DH4RzrDz09yOVsk6I1uZyC6mzrfSi5o\/GhezQMXllbzz0sv4me7nyIlLaRSaGNlrG8ueZDVnr05ZnCBcELfF+0fRzNUfwD8l87kUtOype9\/8hq3pPxGSp25u86PE3ue3EaVgtiz4MvugSsEp+6j0X\/WkQf0cruc3cwuLikAW7vbRkNSjkWHdjY7Ol5CKsVpgWoWllafUDHEzvBmnu759jEtPT8ZCSbaGIzvo8qziDn+tWlDnGAbwYvLb5jyeEvgSp6N51ZJPvzWKiVwaslphbwEGm6jAlPGaR99mjLXXEqdjSytfA1LKl5FUkbQhQNDy8+bowmdy5v+nYc7\/o2YOZwzLObSvZN6gtX5VvDalp\/QFd5MKNmFU\/cxx78OtxEo\/OJegRR1foqc0hwcWc8zPd+f0lD0MIf7HS2tvDHvOaWS7B7uoy\/UQ0nwW5zh2YqRQU8nNxqUvRVqPjLN46eilOS3e27OeM2HcWmlvG7RTwubPPIkdObR\/b3+m1BySWFzF8roI9D9SSB9zoWpBE9ZTTwWXUNvvAmpdNxaFJ8QjKgyLCWRSuHQNEodBu9dejZN\/qZju+Y0DMUO8ED7p45rTsjJxJKKG1lV\/RYsmeKp7m\/RFdkMyhZPNIQbXXNyceMnqfS0TDlWKos\/7n1nXg1RZ4KOCyE0FBKBsFXEsShzz+P8+g\/l3+E+DVKZbOz+AW2jT5AtfFntWcIVcz8\/7fO8Uinq\/BQpchRSWWzq+3lWI0CSYlfwbwWFGTShsaS8jvNrm5lv1qHN6M9MwvCvIb5jBnNMxlT5udGn1aHaszq\/cb51hc9dKCWXQd3nQZTAhNCWRBBTOg+ZLfx26HV0xZoxlQuJQVSW0m+VkJQWlrJfpaSUDCTi3L71AR5s+wIxc\/jYr32M0WQ3D7V\/9pQ1fAAsaXt6dM3BhY0f5br5X+eM6ptZUflGzm34IDcu\/FFawwds78k1825Hy6s6bnpUe5ZS7181Fl5KYKo4FnEkKYbi+7iv7Tbi5vT1ozRhsKr6luyVjcLFaeXXTvscpyLFsFeRUwsrBKP3QbKVPkvkFUZIyRhxawSPUV7QqXRXKSmxjHCkjxLfFuzeUtNJPJUw+CNo\/NY0jp2KIVxowsh57fNKLyh8cs0D7tVTEp6VgkFcdOEjTBmB4H0sKX812izk\/WSl9GoouRyiz0KqE5RC85zBcCrOQ9tfwFQO8hPP0zClwfbgCFHzk1w3\/+s49GPf9+zFgd9ipRHUPFXQhINq7+mTHitx1rOk4tV5HT8Q28uGzq\/lmSBeODXeZVzUcBt37fsHZIZO9ykZZVPfzzi\/4cM554ubI4wmuzE0D2WuueOhVq+jksXl17EnOFU4URMOAq4m5vjXzvyCTiGKxk+RU4eRv9q5NAhQceKqFEEV5NDZkMrKU1dlMkIIAs0XMLQ7Qjy5AK9nBw59AE2LoWsRhJAg8tStnUXPjxAazaUXs38ks36PQEtf8ZYPc74PB6+zW0kACaXxGI2M4MQ6fLUDv2HbwG+5eM6nqPetnN558kUYU\/KLEqlBEnI36RppZkLioDs+hxr309yx9Q6CqaUsKo2zwN9PhbuGhYHLZhTeOBqlFIdGn5m1+Y4VAi1nCBXsKiO\/o45wqns8NGRlCEkexhCuaW\/qPZFtPHroPzlWlW4CnZVVb6EzkqGycQLto09zrvoAAp2+2Evjobta73LqfCtJWKM81\/NDuqNb0YUDKU2E0Ch3L6DWu4wFgUtZWfUWXHqAlwb\/iBwLr0llMq\/0Qs6qeWdWz1CRqRRfrSKnBpGN0PclmHDXFCCOysP0KHM1ZWxemAt3xXzKWi5jZP9jjMaqUTKFIIXD6KQy8GD+gv2zLEi2ouqNHAo\/O6lT+ISTcX7DRzD0aZbCam5ofgiCv0AO\/ZoHVQlhHFNea4XksUNf5MaFPyzYqzZTOiPDiALbJQBIpaMJiyrXPg5EFvD8gMULgyWsqXiAXcG\/cXr59ZxRdcusJEdLZSJP8nCXQGNZxU3sDP4laysHXThoKbuC1TXvIBhvJZg4iC6cODQPj3d+FZVGTNEQbi5t+sy0NnWlFE903s6xLPF3al6qPIsIxg9k9PpMWBEPtn6WoeT+SWvaN\/wgDt2LUpKENYrCOuKRVdAfe4mB2C5eGvozp5ffwBlVN7O4\/DqGE61IZRJwNmX0QEpl0RXezIHQIyStKJXuhSwqu3pWDfSXM0Xjp8ipweD34Chl2nKRxKdShHCSyf8i0FhZdcuMTu2tXoSncgGJjp9jjTyNLoZxOQ8VVlFSOrWSZSZ4jHKumXc7z\/f+hO7IFoTQkMqixFnPutr3TAk1FIymQeW72E0VowPZKssUm3t\/yfmNH5rZ+QrErTsKrugRWAQcdo8oQ7M3KImOVILtI2dxVsV6dgfvweeooaVs5gKJuubApZdkMFALWXd+npnpoFAgFFfP+zLbBn5HR3jjlDG6cBJwNXFG1c0AlLvnU+6eP\/78a1t+xEuDf6I19AQpGcGheWkOXMri8uvxGGXTWldPdFvBjVALJSHDKKUocTbkNX4oObXqzFRxTDP7OhUSpSS7g\/fic1TTUnYlFe6F6ccqRSh5iHCqjxf6fknMDI6\/DoOx3ewdvo8zq9\/BovKr8lrzK5mi8VPklY+MQ\/yltE+dRw8P0YQFab1Aq2veQYM\/zyTeLAgVxZ38Mbizu\/nTY0D5u2a8hqPxOiq5aM7HSVijRFMDOPWSvHotFcKB0GM5x3RFjr+g4LLyeqwCKl0BBIpGr90qIW5NvNvWiJilRMwSfMYo2wfuZGHg8imCe9Nhcfl17Bi8a9oNMDUMXHopsbEQZDZ04cQQbhIyTL4aUKDYHbybpZWv5YLGf8WUCQ6OPMbu4L0krBAeo5zF5dczv\/QidC196Nill3Bmzds5s+bt+V\/YGEkrzGB8v92p3NOCQ\/MA0B1+oeC5CkUXDoQQY3o9x15B21IJtg\/8PuNnqyeyjed6f0TMDCJVaorBK7FAWbzQ\/0vKXE1Ue5cc0\/We7BSNnyKnABaZPDvlIsk1qp1tVIy1OAAnkirfOtbVvgePY5bCMeFHyZVblB4D5v4S9NlpJpkOl14yvcquPJAy96Z9rLwS2XAbDq6es4QHDu0kmUaU0t7IDn9mJBqS00pewKNHMaVOR3TRpNEOLYGl7Pc3bo0yFNtLpXcxM+X08ldxKPwcI4mOaRlACsbCUdk357kl540n5D7Q9mkG4\/k3d1XAcLyVSs8iDM3FovKrWVR+dcFrLQRTJni+96e0jW4Yz8eTyqQlcCWrat42rRy9w+jCxenlr2L38D2YMn2JvEBjbsn59u9CY2Hg8qw5dLNFUkYJp\/oocdZNerw7spUnOm\/P6zNiqSQ7Bu\/iEu+nj9UyXxYUjZ8ir3yEF4xKMHvTPl0iUpxHL0r12mmEwkCbc9eMTpm0TF4c6iSUjFPh9rGCIHqhm1fgTVD1fjhGhsnxoMa7jHAo\/et+mMAxbOCajRvmrkApeKBzJxoChUIg8BgOGr0O9od6kAjKHf00+fbiN0JYSmc4VUV\/onF8nkbPPhb4dyDGjDgFPNTxOZZXvYllla+b0Rp1zckVTZ9nd\/Dv7Bj8Y8F6NQqTpMze0dwQrklhukwbfibE2GuXcy1KkbBChFO9aEKnxFGfV8WcVBZdkc3sH36YhDVKmXM+wcQ+hhPtSMxJVYv7Rh4kag5xWvnV7Az+tSCJAB0nCkm5uxm3UcqyitexffAPaXOZdM3F8srXj\/97VfVbaQ09Pm0PXb7Yr\/Xka1JK8Vzvjwo6d39s52wv7WVH0fgp8spHCCi\/FTVwByJLHoAQoKOQRl3GMfnwRPdefnfgBYQAS0oMTUPg5B2lp7PKuT3HWr0gHND4bfAc4yqo48DK6rdwIPRIjjFv5dDoc1gySYNvLQ7j+LSWEELw6vlncOWcJWwf6iRmmTR4S8fVnAdje3lx4P\/ojW5HKkXCctMeXURnbCGHvULVrkMs8L+EPknEUiCRbB\/8Ay69lJayK2a0Tl1zsrTyNewbvh8zh2J1lqsdy\/2ZvHHqwkml5zRqPMvGHyt1NjKSPES+YRypLMpcc9M+p5RiJNHBwdBj7B95mJSMjq9HQ7MrlWrfhUPzEE72sn\/kYcKpXvyOWhYELsOtl\/Jwx78TSnSNV4Zl80pZKklXZBNLK1+Lz1FNONWT1zWUu5oZSbQDgoHYLoLxA4Ci0beWrugLYy+F3bfLa1RyfsNHJiUOC6FRiGDwdBFCYyh+kGe6f0DUHMCtB2j0r52GjtCJUys\/WSgaP0VODcpuQsS3YI4+hK4yy9encOKoKDz34DDP9rXyuwObJ4VSPGqUSzybadQ6CEs3Dkxc2tF34wb4zrcTm\/2X2AbQKwC3Ucqamn\/k+b4fp33eIXw8emiyKq1LC\/Cq5u\/iMI5dqG8iHsPB2pr5Ux6v9Czi0qbPIpVFZ2SQ27c+QlJObha6wL8DXaT3LkiV4rneH6KUnJpgKiMQ32X3b3MtsSvkcpCUkQKu6mgUDs2DpVLjrVqkMmkuvYTVNe+YVJ22uPx6uiIvZK3eOowunCwMXJa2ZUN76Gk29\/2SmBVkag6RQmJxMLSewdh+6v0r2Td8P1JJFBYCnd3Be3Dr5UTNgYI8OJZKsjd4H5fO+Rz3HvwIFrkTn0PJrkmVdYe9KJ2R5zmv\/kMIoZGSUUqdDZS7Fkyp5gslDqFrBlLOpP2ITjbpBV04cWp+nuv57\/FO8VFzkOFEBzJNtVxmxCnf0R2K7S2KnEoohRXZSG\/HV6jT2hBMblqYVA50zwr0ph9Oy\/hQSvGJZ\/\/McPLI3XmD0c\/Hyu\/EECbOsU1SKiafW7jAswoav2dr0rwCGYztY1PfzxmK26W+fkcd0dRgFp0XwRta7sTQT57XY89IHz986QlSMk5SStxahDWVjx7l9ZmKhoPVNWMVNjIJ\/V+D0F+OfMaUBWU3Q9X7IEsPuXsPfoSRZMe01+81Krm++ZsMxfejUFS4FqQNO9lhlB\/SGtqQ1QAyhJtKz2lcPOcTU3Js9g8\/wqa+n+YZitHREAVu4LnxO+qImoN5CJlmz4cqc83n2vlfzTpDMN7KQ+2fnUGFmbCNU2khSU5Zj4YDh+YhKcOzkCMncGo+DM3DwsBlnFZ+zbSlPF4OZGpvUTR+ipxySKXY3fsk2tAPadF3IFCYWgC94v+hV7x12l6Xzsgw\/7XlARJjORYCxZeqfkCZFkZL42ka7xjtPRcavgXayddJ\/FixN\/ggz\/f9KOuYRt8aLprz8eO0ovywlGT7wF56Or9PUoQIu0bzavttaB5et+DH6N0fgNjWSXpTAAg3+C+D+i9lnKM19ARPd3+H6VYVaei8auH38RoVOccqpTgw8ig7hv5INDWAQuHU\/HiMAJpw4nNUMb\/0QlJWHEslCLiaqPYsQQiBJZPcte\/WY15qPhtoOECQ1UAS6Ly+5WdTDMWEGaIj\/AwJK4zfUcPzvT8lKUenvRZDuDmv4V8oczUTjB\/gQOhRRhNdRMx+LJVi5tVk6Y08XTi5cu6XKHfPm+H8JyeZjJ+T57aqSJHjhCYES+ougLoLQElQJs5ZMDwSlok2YSNc4mzFK5JpDR+YsGfGXoChn0HVe2e8hpcLWwd+nXNMZ+Tku9HShcbK6sWsDHwMq\/PD\/CmpSOWZP9Eb\/AMNsW1TDR+wNajCD0NiL7gWTX0emFtyLruH7mEosX9aa5codgz8gbV17845VgjB\/MCFdEe2EksN\/X\/2zju+jfO+\/+\/n7rAIcO8talPDkm3JliwvecZxE2fPJm1G0yZtnKRJ0\/yy0+w4s0nqtGkz67iZjkfs2JZiDcuWrL0HRVLcEyABEPvunt8foChSBEAAHJJtvl8v2QRw99wD4HDP977rg8QkavqJRkcACOkeukb2o6AhhURBQVWslOesxjAjmBlo4V0qVGEl11JNQO9LbfwIMSEkJqXkyOCDnBp6DIGCKWOoinVU\/y\/7knddhukLHqPatQ6npZjynJUpZTMyJ\/G8DBllS8dneP3in7ysukTPC5vO8\/JGKDPmcSl35KKPi\/nXaX1YRBoXLhmGoZ+CMTIj83gxoJuXv1cgJdYa1IbfsiTvZtR0WhhISTSwE1JVa0kdvH9M+rIiNG6r+zeWFtyFIiwIFDJLXDVp9W1POzF3b++P6Q7sGw1HnTdmJCAJG8NIDAwimDKKLsNEDB\/t\/l10BfaNhm4ub9aUvI3NtZ8c9aokx6q4sCoXwkInPH\/g9NDjmDKGISNITHQzPBrim5mkZ3eoiUdbPjiDhk9qdDNEp3\/vnBzrcmHe+JlnnhnCqZ\/gCutp1NHchRgqZtqLkwqB7bM3ucsMZdmH+LoAACAASURBVIblOi4Vqyr+gZKcFWlsKcmVUxm3Buj9KbdQFStXl7+bNyz+GRsrP4iaojt5wiPIKNs6v0yrd\/uYWnoiQvoQbf5nZ710+1KhoLGs6G7sWgF1udclVX1XhY3GonvGEpx1M8IJ9x\/TSgbPFE3YqchZQ1\/wGFs7Pk\/EnF5n70zp8E\/uzv1S5uXj43qRE4hF2NXXzP6BdkwpWVlUxU2VSyi0zb6y9DxpMvBt3p7XRLvnHQwbLlpilWhpJycaMI18gRcbq4pfz+HBB1JuU2KffpPA2UYVFm6u+RQv9P4nrb5tJLvzd2hFWC0OWiPtCCRlhMgRFyf4WsDakHD\/kD5M09CTnPPvwDAjFNgaGAyfnlIYNBG9wcP0h45zeOABbqv7YkKtp57AIRSUOWg\/OXWYSBP2Gc8fKnZcCC2uK38P3kgH\/mjXWBVV\/Lg2Kl1XsazwlWPPDYROxePVM1zVLhDYtDwqclbzSOs\/Xhqj82VW\/T5v\/FwipJTsHWjjiLsLTVG4uWoJC3ITSwu0j3j45uEtRE197DfXHhji6c6TvH\/FjawqSk9b5jxN3n7aRjzkWeysLqrCMUd9VV7yhI\/hVCSfLvo5O0JrKFR8E\/oEp0ZNuvC9FGksuoejg79OWeFzffXH53BG2aMIlfUVf4c\/1s1QuHXCwhXvZmPBpubxeKAZhVLiZd6CKhlgI31oYvRXLQTkT26KOBzu4On2T2HI6FjJd2\/w0LTmbEqdkDHEXzr\/jVc1fH+SXIIp9bQaF04HgYZTK2VE70m5nSbsbKy8lxf6fkTUGAGUuKJ5liEhVdhYOa5BoUVxcEf9l+nw7+HM0J+JGMO4rBUsK\/wrKnKumOD16QsexZTTq0pTiMtinD9PNGHHouZwS81nGQw3ETOCU4wwOyzIu+GSHPdSMW\/8XAKafQN85+hfiI3rBfN8fytFthw+c+Vd5FguqGnHTIP7Dj+dsAW\/Lk3+48R2vrL+HgrS8ADt7W\/j5027JxxXQbC5ailvWHjVhGTdlwPncx9mQoF7dEQA7EqUO5wZxs8VJzjWz9A8Ln+EELxu0S94pPXvJ1XICFTuWvAtHFreJZpd5qjCwi21n+PM0BOc8jxG2BhCERo1ORsYirbgCTfHuxGPyzToxsk2qrhVdiEUOxS9DywTG2z2BU7wTOcXZk0CJKx76Q0eodK5dsLzRfaFzKQrQBU2kFDluora3I3k26o52PcAnYETCKEm7ZUEIIVBTe56anLXMxxpwxNuQREWKnOuwJA6O7u+iTfSPsELpmJFCBWQY14jgYoiVFYVv5FK58QGoorQqM\/bRH3epoRzOOV5jCOD\/weSaebhKLx28X\/R7P0LvYEjqMJCXd4manOvRRUWBkKnpzF29liUHKqcV1+SY18q5o2fOWYoEuS+w08nvKfyRIJ8bv+fuG\/Dhbu\/HT1NSbSH4hhS8nj7Md625JqUx93T38pPTj8\/6XkTyV+6T2NIk7cufukvvqZp0tL7MCe8fyIgvAgExaKWKyreQXn+2qkHSIWwQobuakNCTFrYb3k\/m2ZACPPFhEWz8PolPyGkezky8H+YMsqSwldS4kisWJ0tpjToGtnHOd8OdDNCWc4KFuXfil3Ln9HjqMJCY9GraSx6NYOhJo65f0d7YBfJYiQmCkPYGbQspLT0A5A7sRP0YKiJbZ1fnFXtM0NG6A0cTWD8LMJlLR\/tejw96nNvZE3pW7Fr+ajCQkSP8UDTE+wfrMSgBhDkWTwsdB4n3zpZgLXYvnTs7wJbPQW2iSXZt9d\/ke7AAc4M\/ZmQ7sZlKWdp4Sspc6ykO7CfZu9WokaAQlsDywrvIs9WffEhUtI09CRHBv9vRvJ8VKFhVV00Fr0al6WM7pEDDIROUWRrIM9WHVexzyqsNj1h1dtq\/20GbwJfHMwbP3PM71oOpDxFfbEwBwbaKLbnIpE82zN1WesBd0dK40c3DX5xZk\/S1yWwo+csd9etJs86N111LwVSSnY3fYkOeRxTOa\/DJBmU7Wzr+Srrw+9iYfkrsj+A6zbwP57BfOB4pIHfjdxCvxFmQ72Jqry8DCAAh5bPtZV\/Pytjh\/QhtrR\/lrA+POYBGAid5Lj791xX9WFqXDNv8HcHDvJs1zfTytvQUTioLuUW5\/WTLsYH+n86443\/EpJkzbux+l95uu2TRAz\/tAywlUWvZSB0iqAeYO+A4Pl+9+h4F8Lt3lgJh4c3sSJ\/LyW2C5IUqrCyoug1KcdXhEqNa33C77I291pqc6\/Neu6m1Dk8+KsZSnAWVDqvZCB0mmc6\/m3C+XF2+EnyLDXcXv8VlAwFkKud67GpLlp9O5FZni\/nfM+x9iXa5ycZL78r7SXmsKdrym3+69Quvn10C985upXu0NSaLbEUniGAY55u9Cn6bphIDrmz7x77YqC7f1vc8Lm4I68AU5jsHfop0enE20s\/Bqik2ze01yjih9430mcUI4GdvWezP\/Y8k5BSsq3zKwRi\/RMSZg0ZxZBRnu\/+LsHhh6DrQ9D+Duj7IkTS+w6klJz19rO9u4ndfa0EYvGFzDBjPNf93YwSVt3hJh5v\/RgR40L4zxftwRNuSXuMbFGERpXzyoSvuSxl3N3wPa4oeRsWxTn6bNxSUtK8by62LebJ9o+zu+fH\/OR0C8\/394\/mEk22uEw0TvquxpTnj6GyqvhNlOYsz\/h9zRQDodMY08zxOY8qLCzMv4Ut7Z9JeH74Yp38\/uzfkmutSlp9loig7qbcuRp1Gj16Tg4lb7HwUmXe8zPHpNP8SwJhI\/0fXIktdWtydyQ9TaCQMTc9JS4Vp9yPjHl8ktHc9xiNVW\/K7gBaEdT+DNHxTkwpkzY3BIiYFn7mfeWE5\/pCL59qr7nAHT6LP9qT0GuhYXKLbMbW\/xU4n8MRPgG+x6Dwb6Hk\/UnH7QoM8x8nduCPhjGRo9IMe7i5chnrS0Kjze4yQRLQ+9jS\/llurv4UBwZ+RvfI\/oz0rLIlRyuZIGp6MVbVyYrie1hRfA+B2CDt\/ueIGD40YeeY+3dTztEdicuZdAZrCOhO5JT32wJ3pJIyey8rS97IiuJ7Mn9TM4huhtKQx0iNKuI5nNdVfYizw0+ROjxl4g6fQUHDojiJpaHnNhRpIRgbnGYVmslg6AwljqVTbzoFEd1H1Axg1wqwKI5pjzdbzBs\/c0y+1YEnMrPZ\/H9Vvzrl67kWe1oR4aqcmc2BuNzw40mZw2kKE2+odXoHcayG+j8iO95FWPdjG9fkUCIwEZyN1vC7kc106BNLjMscudM79jwT6AseS+qBuZY+8omgTvhVGHGdraFfgH05uDZP2s8TCXDf4acT3ihs7zmDYQxgZhki8UU7eaz1g5iYTBYCnR1urf182rkeTksJjUWvBuKVT0fdv0ljr\/jn2xlcjJnGcmNKhbCZgyI0lhXcddFrxqhKu8BlKR8TaJ1Nci3VTLeu3a7mU+G8AgWN3sDhtPYx0cEU5Fmq8cWmjha4w83TrkJr9m6dlvEzGDzN870\/ZCTWw\/kLbXnOSjZW3IvDUjituc0G88bPHHNP\/Rp+emZy4nG2VOcUsKa4JuU2a4prUIWSMvRlVVRWFlbO2LwuRyzSSojkhqeQImOBP1NKTgz1cHCwA12aNBZUcHVpHZZFWwgMb+dk35\/pCY1wKlKL23QRNB0E5eS7IQFsKHv5lLrPBXGvxOSFy45ONQFUkWRRkyFw\/2dC4+fpjpNEzcSLTNQ0OOP1sjTPgplln5Y5yfEZpdi+hBxLcVb7tvufRxXWtHNhomZ6uYQCE5ti0lj0mjEtLSlNTg49wkn3w5gyhiTe7HFF0WtYXviqWU3UzbVWTL3RFAT0fpq9W2j1bsvo+5UY5Fqr0jJ+vJE2FuXfQov3max7BEWn0WG+J3CIbZ1f4cLvLf7\/vuAxHm39IK9q+AGaamMk2oem2HFZyi95gvW88TPHLMorpcyeS384uxCHihg7va4sqeWNC6\/iub4WvNEQYT1GZ2CIoUiQQlsOm6uWsaqoCpuq8YaGK\/lNywHMJHcx719xI8pLvNqowbGBo5Gnkoa+BIKFpXclfC0Rw5Eg3zqyFW80NCZmetDdwW9a9vOhVbdQX7iZKws3s8LQWTri4ZtHtiS9h7y9uhGHlp2g6jyJSZaXUkIYA3GR12ciMnKKQLQX10WL3wsDbRgpkrqGojWY8mh2E55DFGGhsSj7kJI30p5RErBFiRIx01luFG6ovJZVxa8de2ZP749o9z834XiGEeHQwC85593BjTWfwGlJ3CNtugghKLAtYDhybtpjZWrYSkz8sW6sIpeoTL1eBGIevOEOiuyLcYfOZGFEx99ntuzs+ibJtcMi\/LntX4iZAYTQkNLAoRVxVdnfUO2apDc6Z8wbP3NExND58aldnBzqQSAmhaHsqkbE0JNejgWCq0vqWF9ahwQW5ZXwQv85PrPvUQRMKofvCflo9g2yILeYe1fdzObqZdhUjd+0HCBsxMaOU2jN4X2N17Mwb3YuHukS1r2ccD9Ei\/cZYqP6R06tlNUlb2JB3g2TmrBlw+Kq13OmZQdhGUJedNevSIUKZTEFzoVpjRUzDb544AlG9IkLQMTQiQDfObqVL61\/FS6LHZuqsTi\/jM9ddTffO\/4MQ+PCnqpQuKtmxZShy3kyJ2okzpeQ4\/6bFAlPtX2SVzZ8Z0JJfKq2Ewo6S3L3TD32tIhfPaZTfaVgoci2mGL7UgwZQ80gufY8NjUXBXWC4GcqqhyttAWWpQx9aQJeVb+Wq8ou\/BY84ZZJhs94hqNtPNZyL6tL3kSJYykljqUzLs65OP9W9vX\/z4yOmS6maaKpdqJ6auPHJEp\/+AQAViWXWtdGeoMHCeoeVMWKYUZT5mcpQmNRwa1APJnfHT5DMObGrhVS6liW8vrbEzg8pSEcNobjf4zmT43EetnV\/R3Wl\/89Dfk3ptx3tpg3fuaIHx7fTrNvYFLoSUGQb3Vw76qb+cqhPxMzE1\/UVCG4rXoZDaNGyvN9LTzcdiRlpVfE1Gny9vN\/zfv56yXXcF3FIjaUL6QzMETU0KnIycNlufSl7d5IB0+1fXJSC\/uA3s8LvffTNbKfTVUfnrYBZLUXcHvtl3i2\/WsMqYMoo1UlUkjqlNVcs\/hf0xrHlJJvHnl6kuEzHl2aPNvbzCtqLySTVjrz+do1r6Ev5KMr4MWuaizJL8OizH7uwssRi+ogXtA68Tc1gGPKtNsB7ETNIHv7fkxj0aspti9BCEG5I5eOwFDCfZblHSBXc0863kwiULGreYSMyf1wUqEKK0IoSFOSYynBHT7Dwy3x9gK5lirWlr6NSuda1DRFfitz1nKY\/0v7+NWOFnpCC4iYAjmplFuiCcGbF63nxsqJivZNw09NGcYxiXF48AFUYUcRCqtL3szSgrtmLKxyqRoPAozofWR6PkVNP93B\/bxm0Y+I6D5CxhB2tYBDA7+i1fcMFxvnqrCytvSvydGK6AseZ3fPD0ZDYAKERBN2rqn4B6pdiZsg9gdPZPXeDBllX\/9\/U5e7EVWZe6\/3SzvOcZlwzu+m1T+YMOfGRBLUo7T63dxe3YglyQKvS5MHm\/dhmCamlDx07nDKu9Dx4+\/sPcvuvnjZrCIEda4iyh15tI8McXq4b8pS+dlESpNnOr6cVLvHxKArsI82307IuIpmMs7cWu5Y8QPuLP8cV7pex9W5b+GehvvZuPTTaf8ADw520O5PvACeJ2Ya7B9M3Dqg3JHHVSW1rCisnDd8ZpEa1\/qE5b9RVM6Riy4TL466FByjGIlB58genun4Io+0vJ\/ewFHurF2BNcF3ZlXClNp6UKeoJpwuEp2I6ceupp9AqmLj+qqPckPVx1EVDX+sa1w+lMQf62Jn9338tumd7Om9f0LJfSJC+hDbu7+WUf9nTdG5qmgbxdZeFAxUEUVBxyLCLHSe5sMryyYZPgCBaB\/petIMGSZmBjk88CtOeh7OYHap6UkzSTkTHFrxWBVYarI7n0K6mwdPv5nHz32U3sBRrEouGyrfz\/VVHyXPGm8sCYJi+xJuqP44SwvvYjDUxPbOrxLUB9FlGF2G0M0wYWOYXd3fpjdwJOGx7Op0CmUk3YED09g\/e+Y9P7OMNxri960HUxoqEVNnV18zH19zB71BHweS9NtpG\/HwrSNbePOiq\/FHMxP6+2XTC1Q7CymxO\/lF0x6OuLuwKPGsBykld9Q08sq6VXMucdEbPEp03MU2YtjpCdUTNHKxKmEqHW04NT8ne7\/Jgr6PxCUgSj4AjjUpRk2NEILCwhUUFqajxj2ZLV2nkuZOjSedtgbzzB75tlrKclbSHzyGcVG58n5KcaBTLkMoxNsS6DIejj5ACX1ckIvRZRhdD7O98yu4LFUUWsoYiFROCOEUWQeRUoGLe0jNAqaMETMCaQt+CiFwWso4MvAg0RSl0xKDVu92+gJHubbi\/RhSx2kpId9WO2G753u+T1gfTiP0plBqX46qWOgNHsaqRFlV8AIx00rQcKIKHafqR1OsLMj7RMIRtCxKpQ0Z4Zj7tywpuGMsaXp6zGwYUxUWFhfcxqriNxAzQ+zo\/AaDodOjIcSZPH9MwsYwBwd+zpmhx\/mrhn8fa\/poyvh6NL5i7mD\/z5OGrwwZ5dnub7O55tMUOxZPeK0h\/2YODPw0uxlKg5Ce+kZytpg3fmYJKSW\/az3Itu4zKRMkzxM2dAxpcnK4N+V2zf5Bfnrq+bQW3\/EYUvJExzF6gz76Qn50aaIbF35oT3aeYCQW4S2L5zYBzRNuxhjts9IRWERrYOXo\/agKmHSHGii1dbMyb298YQntgc5DUPHlSXIAc8VgeOqqCAXxkq+eezFwfdVH2df5FfpDhwlwwbNnorCDaooIswAfdmkwjI0W8ggnuSya6Phi7SzPa6c4Uk17cAlBIxebYqGxoBxFqjPWEG9KBNxQ\/XGODv6GwfCplJsqigWbmk9XYP+Uw0oMAvoAz3R+CU2xY0odl6WcDZUfpMjeQCA2wEDo1JSGj0urYGXJ61iQdyMg2dr+OTyRVkwZw6JEyVfioax4yOWdSY2U8pxVdAUy1MkjLijbObKXhvybMt430Rw6RmYyl0thcf7tSClp8z2LP9o1GmESyGnKVCQjoA\/wcPM\/EjG9SAwUNGpdG1lX\/l6sWg4Rw48nklpNIGYGeKr9\/2FXC7hzwdfJ0YoAsKo51Lk20j6SeRWzgkaOll3F4XSZD3vNEn9qP8aOniZ0aaaljiyAwdAIkTQaDfaEfRnPRyI56u5mMBxIGH6LmgY7e8\/iSbMh4kyhCAsSGIxU0hpYgYk6LidAwURjIFLFmZEreD60kphUQUag99NghuZ0rudxWqZ2VwshuLlq+g3D5pkeGiYb9N2UERpXJ3kBD3YOUMZzVHKCoqSGz3iEgDJ7F+uKtnFj6aNcW\/wQinx6hiQQ0kNKk2L7Im6v\/yKri9+CQuKQrSpsrCh6DVHDN1pmkeb4mMTMIIaM4o128GTbv7K75wf0BY9PmSAtULmr4T4W5m9GESqK0Nhc+1mWFNyBJuxowo4qrHGjquKfWFp4Z9Kx4gKkmS9TptSnDN+ly4ri12SVFD4ZgYKV66s+il3L5\/DgAxzo\/zkhY2i0hD9xa4aZImx6xpKeTXTaRnbyx5b3EdH9RI1A2l27w8Ywj7Xcizmu5cPGqg9RlZO4U7iYQq6j0jVNTcUsmff8zAJRQ+epzpNp5eScpy\/o45dNu2e1tVlUGlP+tvb0tXJr9XKkNPFEQjgttlnV+3JZV2BKaB1pTFoJYqLRFVrIA6F6tgTX8S+FD2JXBfifhPzUuj+zwc2VS\/hdywFiKcJaf7t0A0U2Z9LX55kj\/H8Gw8dyDNpxYcygUvkF5JwaPgAljmVj3pKVxa8jYvho9m7BlAZytJBfESoNeTexvPBVRAzfNAVSJa2+HbT5nkuj8EBOqrjSFBtXlf0ta0reRiA2gKJYcGqlUyYl59mqybfW4o22ZTRbE53DAw\/gCTezqvgNGYuZjqfIvoh15e9lX99\/I6WZVS8mm5rPgtzrWVZ0N05LKSPRPs4MPT4pHDvXGDLCM51f5La6zAR0DRnhxNAfWV54D1HTj13J46baTzIS7aNp+ClCuodC+0IW5N3AE60fJWImv2Hv8O+hPve6GanozYR542cWOOsbyLjSICZNmnyDszSj9NClyePtx\/lj28TENodq4Y0NV7KpcnGSPbPntDeGO1JF0Ejd3ViiEEOlVy\/mQf9tvCv\/cYhOsxtzliiQ1PARwC1Vy7imbMFcTmmeZHgfBhmiQMAaOchhSkYNoPjvU4wGWaeWXbh8UIWNtaV\/PfZYCMHV5e9iSeGdNA9vwR\/txWUtZ3H+bWOLvl3LJ99ay3CGRsREJCaxKW+gynNWJy03VxVrxobIdVUf5On2z6Bn6Ok10Wn376JrZC8313yK0pzGjPYfz8L8zZTnrKZp+EncoSY0YSOgD+CNdjLVB5JrqeLuhu8ihMCUJqY0afZuxUxXBHCWGYq0YpoG9XnXc867I23j7ujgbzk6+OuxxwW2BdxQ9TGuLHvH2HP+SE\/KPDNdhtjd80M6\/M9zfdVH59QAmjd+ZoGYabxok12jcrK3KmTE+MXZF\/DFItxVl1wHKBvCeoyTvqvSDAyCjsa+8HLenLuDnAwqXmaKNr+H37YeTPp6gdXBGxdeNYczmicl5oWeSsuEl2IZ5iRFDGBHAWoYwU6Mo5TO4aQSC3smQ8U2djNlURxsrLp3UtIpQJ61iivL3pl0nGsrPsCT7Z9guqEVgYpAJFwkVWHlitK3Tmv8iymw1XNn\/dc4MvAgnSN7Of\/5KcIyLlyUGIlElxF2dn+T1yz6r2lJYjgtJawtfTsQ72icqrHfeVRhYWPlBznq6ebRtiNjbRIKrVGqHCUTFOwvJZ5IM2tL\/5q+4DFCuidNqYyJa9xw5ByPtd7L3Q3fJddaScwMsaX9s1Pqv0l0ukb20+LbxqL8W6bxLjJj3viZBUwpMwp5vVj4Y9thbq9ZhqbM3GlTmZOPVbERyeDz0oROj1FMdc6tuAPDODTLnIWYnug4lvK7DehROgJD1LmK5mQ+80yBYzVEm2H0AlwiItxAz9jLMSk4wFw2+JTkEcGHjXQMIIuSQ2PRPeRoxTgtpZQ6lmd9d1zkWMhN1f+PnV3fmJaMhsQgz1rHSKwXgYIpdRRFQ0HjuqoPU2xflHxf02Cg81lCvcdQdBNTVbBXLKO05iYUNXleTZ61iuurP4ohY+hmGIuSA0hOef7E6aFHCRvelHM2zCi9gcNUuWbmxuSU57E0Q50KPzn1C9oCjcTGeXo8USvD0fUscJ6iztk0rbkoWFhd8mZ6A4fpC2XXXdymurCpubyi\/huc8PyRU55HsgqTSkx2dN3H3Q3fjlcFmqm\/lwv7GRwd+PW88fNi54GzL1zqKcwaf+44OaPdiNcUV6MqKmRg\/EgUOuVyvrP\/OVQhMKSkzJ7LmxddzbKC8qkHyBIpJYc9qXV2DCk54+2fN34uFwreHldqT+DRPE8beXM4ITGaVJ2e58eUBjWu9ZPKzbOlynUlb1r6AC3eZzjrfRpvpBMpDVTFQswMk65XqMjewO11X6RzZB8Rw0+utYJK59oxz4ohY0SNESxKDpoSLxAw9SjtB3+MGjWwoAIKqg7RzhN09J6i+qp3o1lSl6arwoI6zkhaUXwPjUWv5g9n35UyvGLKGN5oF1XMjPHjj3antd2IrtIysiRhda6JxrlAI6X2Lhxq9mLXJjE6\/S+wvOhVhIxhfNHErVKSoWCh0B7XFbSqTtaWvp1a17U81f7\/spqPL9rBcKSLnsAhMvEyZtq4c7rMGz8zTG\/Qiz82t8mPc0lvMPNKs1Roiso\/NN7A9489kzKBeDyGVPjV0BUwViQPXcFhvn98G3\/feD2ri7JPbkxFs28gjTi9RJmVpNp5ssK2EEo+DIPfi1cJjolbqBhInqUSY07zfSTRDC67itBo9e2gNndDSo9KJgihsKjg1jE5A3+0h8ioqOW2zi8TM4OkWrQ0YacubxMWNWeSNEHE8HN44AFavTuIB50kFTlruLLsHXhatqFFDdSLqn9UVIRu0nHyVzRc8d4s3o9AUxwpjR8hNKzKTPT8iWNVXQT0gSm36w42pFz+JdAdamCR6\/i05uOOnGF3z\/fJsRRzfeXHODP8BCFjmFxLJVbh5NzI9qT7rix53aTnegIHEShZJ8l3jbwwKn+SWUK3lHLOBE\/njZ8Zpn3k0jRsmivyrZk3HZuKZQXlfOqqu3i8\/RgHBzuJpbhLj0eIE5+2MdPg52f28I1rXzvWrLE\/5Gd3Xyu6NFhbXDstDbPn+6dOsDalZEXh9JWg55lBCt8K9pXg+QkyeJAebJwWVQyjEJ5GOXSOVkLE8GWoop1hIYQZ4KTnYc4MPUGRfSE3VX9ihhr3XSDXWsn5coO7FtzH4YEHafPvTLitQCXHUkxlzuQmoxHDz+Ot\/3xBx2mUnuAB+s8dY+PQtZMMn\/MoKGj+EHosgGbJPIS9MP8WTngewkxSPSUxqXGtz3jc8+hmhM6RvQRjg9jUfBbmb+bQQPeUoa8RPT+BnMf4eamM6NPpkHwBgygjsT6OeX7HK+q\/McGIkN1mwu90cd6drCp+w4TnegNHOOF5eFrVgVbFlfW+c8W88TPDaC9xuYK7arPrijwVlTn5vGf5prHHu3qbebB535ho64XWX6kXj9ionlmtq5D7Dj1Nd+hCzPnJzpO4NBv\/csVtVDgzv+D4IlNXmwgEYT3GgcEOpJQsyiuhwDazi9U8WeC4Aln1bZ7r+Xe6R\/ahp\/ASpEu+rYa63E0c6P8JUsYXWFPqKRI8J+uMpUe8lN4dPsvO7m9yS+1npzHr1DgtpVxXdS+ro2\/imY4vEta9GEQAgSqs5FkruanmUwnzjvb3\/WSS4XMeQ0YZ1oYojiW\/+ZDCxOs7S3HxRMMqagRo8f6FFu8z6GaYAnsDjYWvojRn+dg2SwtfQdPwk0QN36S+u\/UPFwAAIABJREFUaqqwsaTgTmxaPLypm2G80S4UVPJttVMmQZ\/z7uSF3v\/EZOJ3q2CZ0jtiVc57G5NdtyRWJd6lW6BiUZyY541pIVCERp3zOlr92zHS6OYtMfFHe3CHz1LiuCAXcl3VvVylv5MjA7\/BH+vGZS3nypJ3YNUmGynH3X+YVusGgUKutTxt0dvzFFjr58zrA\/PGz4zTWFCe9SXucidXs+FK0vNnKBJkd38rg+EApXYnG8sXTstLtKliEVeV1LF\/sI0W3yDP97WkFT02pcQTCfCTU7sYjk2+WIzoEf7t4ON8df095GdglJwY6uF4yu7bEqsIs6ZgJ892P0zEyKE3vISeUD0ri2p419KN2LXpNUpzh5s55XkET7gZVVhpyL+ZRfm3YlXn+wmlQ9PwU3SN7JuRnjyasLM4\/w5qctdTn7eJ3sARwoYXp1aKUythR\/fXCcYGMaWBEPGC+gJbHb5IN7rMrjmnKWMMhk7jjXTMWA5QMnKtFbxq4Q\/oCx6jP3gcIRQqnWvHBF4nz82g3f9c8gEFnHWdpWioOGmzRSEFXHTzGIgN8FTbJ8caLgIERgbpDRxmaeFdY9VXNjWXO+q\/wrNd38IX7USgEG9kYLCs8G6uKHkzEd3H7t4f0hs4ghDxijVFaKwqeeMEIVRTGgRi\/QD4oj3s6b0\/YfjGJIZAQaChCi2h1Eil4xwDkaokPcwkpdYuFruOjD4yKLEvZXHh7USNERxaIWU5K1CEistWxuGBX01ZOQXxfKu+4JEJxo9uRjjueWjU+yMZDJ\/GHTrLlWXvoNI5scmgJ5y60\/NUSEx2dt1HmaOR\/tDJpN648SjCwpqyt0\/ruJkyb\/zMMA7NyubKZWztuXRKwLNFyIgxFAlSOM5okFLyaNsRnuw8CcR7BWlC4ZG2o6wsrOSasgWsLqzKauG3qxrrSxfQF\/SlbUwKYCA0ktDwOY8hJb9tPch7x3maEiGlZDgawh0OcP+JHRhJc5Ikjbl7KLb1oY0KW+ZofupyDlNkbeO450a+fXQrn1h7B0qWlTon3A9xzP270aZocTPw6OCvOel5mNvrvkSudV5KIxVSSk54HpqxZoS51sqxyqGoMYKUJnY1nyL7Qqyqk1cu+A7u8BkGQ00oQqPKeSWGjPJkW2INq3QxZJTtnV9lU9VHKHZMFgKdSYQQVDhXU+GcusAhonunDJNElShBNYDTSBwSiSk6BfnLJjy3o+vrCRo0xj1hZ4aeoCxnBVXOeGdhl6WMVyz4Ot5IB0ORc2jCRrlzNZqwc3Tw\/zjueYixXKbzpdwSDg\/8ipDuYU3J2zg59Agn3Q+PNR+Ml9Inf18Sk1LHMhqL7uG05zEGQqcmVNLlW9zkWTz4YkUXGUCSxty9lNh7UMfpwfUEDzIUbeaOuq+SY7kg+1DmWIEiNIyUKQEXxh6PYUbZ0v4ZvNHOCYaIN9rOzq77uLbiA9Tnxa+FEcM\/pvs1HXQZRjfDFNsX4Q41J839iTfjVFhd8pax73GumDd+ZoE3LLqSM74+OgKJXcBT4dJsjOiXX9K0RVEZCI9MMH529p7l6a5TEyQzzv99xNPFcU83JhKbaiHfaufasgZuqlyMy5K8a7QpJdt7mniy4wTeaCgjHTOronFsaOpKjINJFNfP80J\/Kw+3HcEbDWOYRsrLuoKBRdHHDJ\/zaIpBrmWYSsdpeoMrOT7Uk1Uydn\/wJMfcv5+UW2LIKIYRY3vnV7m74Xtz6jJ+saHLMGE9vbLbqdAUB7fWfQFDRnmu+z\/oCuxHERqCuKxCQ95mri5\/FyWOZZQ4Ji7mudYqhiNtTKfXTkAfYGvHF7ix+l\/TMkzmgnTyQ0xMWnNaKYuUUxItQRmXaG5gECsvQ1Uu3CR5wi34o71JxzZkhBPuhyYtmvm22gmesQP9P6dp+M8k+8wNGeH00OOMRPvpDhzI2EB2h5ootDdwffXHeLr9UwRiA2O\/VSFgTcFeTvlXMRCuQYwaOmW2TkrtPSgXCeFKDMK6l13d3+b2+i+PPV\/sWIzLUpZWU0VVWCnPWTX2uMW7DV+0O6EHxpBRXuj9ETWua+gNHmZX93fS8i6lgyfSyk3Vn+aZzs8l3cai5HBn\/VdxWWevSjcZL562pi8iFKHwsStup9SeXdJXrasAyxy3+k4HQ5o4NevYY1NKHm07mrLvjTEagQ8bMfpCfp5oP85n9z1GbzC+EEkpOed3c8TdRVdgGCkl\/3NqF39oPchQNJixgOvfLtvISBrVdon0zc7zRPtxftn0AoPhQLxh5RRjmagMJ8llUIVBTc5ZImaMZ3uycyen9lhIgjE3RwYeZHvn19jW+RWahp4kdol0zy5X4mGQ6XfUVYWV9eV\/hyqsbG3\/PN6+AzS0woIWHYc3giFjtPq2sav7Own331T5YSyKg0wTny\/GkBF293wfeZk0U7VrBaOfcQoEuG1uTrtO83zRcwxrQ+joGBgMFwuWNrxtwubu8Fmm+s6Gwi0pXw\/pwzQNPzll0z4pTTpHXsjKMygx8YbbsapO7qz\/OleWvpM8azUWJWfUs2HQmHeAjSV\/pjFvH415+1iae2iS4TN+vKHIObyRLvqDxznh\/iPHBn8\/arxPfQ6b0mBX93fY3vE1fJEuTg\/9aYr3JWgafopd3d\/FkNFpyqBcQBUahwZ+lnKbqOnHMDMpGJg55j0\/s4Rds\/DpK+\/iky88TMDI7Mtt8g6gCjGbGndZkWuxU5VzIVG4P+QnnIYQ63hi0iCmG\/z7sW28ddE6HmjeSzAWRRECQ5q4LDb80cgUFV+Jed2CNUQNHXca4qyOJA3VhiNBHms\/mtI4SoRMsZhpIoaCkbU3zx06m\/J1gyinhh4dc7f3B09wePBXbKj4J4odi3Foc98J+3JDU2wU2RfhDmffUE4VNiqda6nP3US3exdX7Oin2DNR5HY432DX1SF6OMRQ+ByF9gUTXs+zVXPXgm+xq\/vb05oLQMQYoS94\/LLw\/ihCoy53U9IqsfGYSvyG4kj+UYpFLT7FTcwMcvrsfhbl30pj0auxa\/mowjKlGKtIIqNxnk7\/nrQEXafj7ZCYHBz4JRXONWiKjSWFd1KXdx2Ptdw7YVyLEs2go7Nga8fnMMzIqEEC6WaSSnSCupug7qb73H6m8nGYMkard8eM69MZUh\/1cqbmuOcPXFf1oRk9djpcfu6FlxB2zcK6svqsPuTL437uAhZF5a2L100IrZjSzDrU4ouFuf\/kToYiQSKmTsiIETUNPJFgxoaPguBti9dzRXENPz3zfFr73Fa9POHzz\/WlvpNMfHyDImt\/ym0kCrXO7IyQdFryj88zMGSEmBlkZ\/c3eLj5Azzc\/EFOeLanyFl6eXBFyVunVJhOhkBhTcnbuL7qnwFwPvIrStwCzZz4r3BYZfPzOZiGTqtvW8KxnJYSlhbehSamJxhsEmNP738QM7JvkDeTXF3+LuxKQdrbS2EySBtRc2RURT7AqaFH+FPrRwjEBqh0rsVMcSUUKNS4rkl5jKgZwEhLqmF6nriRaB8DoRNjj5uHt2bYAmEihowQMbzoMjzqiZnObzf1vhLJcDTz695UOLXStLxIMfPSnL\/zxs8sc2v1sozb0euj4nfZoKZ1n5M+Asiz2Pm75Zsm5auUOlKLkaYiZhpZL8YWoaAJhSJrDpsrl3LfhtdxU+USnuo8iW5OPWaxzcmdSUr2B8IjGXp94qWqBZbEorRSwlC0DInCzVVLMxj3ArW5G7JetON3gb0c6L+f+w5+jcfaj75sjSB1Ci9BKiQm7f5Rw7r9JA5\/FFVO\/qWpUuAIK1T1KSlzjGpc6yeVZGdDUHezp\/f+rPYN6UMc6P8Zv296N78+8zYea\/kQZ4e3ZJXw6o10sqf3R4RTqHenS9T081z393BohdTnXocqrAm3U4SFFcX3pBwrz1qFlmT\/yWR\/5TSIsLPrW+zq\/i7+SA8t3memZfzMJTOV43MxQX2QdD7Tohlq3pkp82GvWabckYdLs+JNUX10MQJYkl9Gi28wI42wXM3GB1bexLeObMk4bJMMRSh8fVzTwPEc9XShzrH9rAmF1zSsTei5OTaaXJ2KOmch\/7LmdixJ+jGF9fQvWBZFJWYa5Fk8mFJFFZO\/KxOV1sAKluSVUZEzWUZhJBbm+b5WuoNe8q0ONpY1UH7RdsuLXkWrdxv6NKow4rlHh9nSWcM5v5sPrLgp4Xf6UibeuC37z3AwfIpnu7\/NxpMFqCmGsRiChk4b\/tX1SbfRFDtXlf0N+\/p+gpyGzhZIukb2EdKHMgpv+qM9PNX2SXQzNNaPxR\/r5kD\/z2j3P8\/NNZ9MWwTUHW7mL+2fT1jqnS3u8FkCsQHWV\/w9hozRNbIXU5pIDDRhRwiFG6o\/Tp41dQFBletqhFBTphAoaCwuuINm79ZphX6ipp92\/y7a\/buyHmN2mdsmLHHjb6prjKCx6LVzMZ1JzBs\/s0wgFmEkgwUV4ovqaxespc3v5qFzh0fvEAW6aYw2jGeCzIIqFFYUVvCBxht5rr81vqjNUL6QKc2Ei+STHSd4rD11svNssa6kbsJjbzTEL87swZeGgbm8oByrmvi0N6XJsaGehK9dzKrCSjaUL6TQ4uCHJ7bTEoiy0HUCKeN61xIFU6qc8K0nbBTxnuXXTRpjZ08Tv245AMQ9YQqCLV2nWFdSxzuXXjtWFu+ylHFz7afZ0flVTAx0MzzaXE2S0RctocjaxplhO8eHumdNBuRyZbr9SyCu5t1lWUzNFNtpOizM35xym8UFt3PK8yj+WHrnXDIkEnfoLDW56Xcw3tX93VE5iIvKomWEwdApmoaeZFnRK6c+tpQ83\/3dGTV8IO5p80W7cFpK2VT1EfzRHjr8u4mZIQps9dS4rplQGZYMVVjYVPURdnZ9Y0KbiAuv27m24v3U511HxPDRObJ3kgGkChu5lnK80a5Z85LMBTWudfQEDqIIDVOaaIqVmBlOqw9P9qS+Pq0v\/zu0NL7H2WDe+JllTJkqFXYymlCodxWzIDf+b1PFIpq8A4SMKBWOPMpz8jjq7mJbTxO+WJhyRy63Vi1nUV4JQgiihp6G\/lT6FNsnN9AbigR5tO1I2lpcM4VVUbmxYsmEjskjsQhfPvhn\/NH0Lr5PdZ3i6a5T2FQLG8oauKOmcew9nhjqTTsUcdrbz+qiataX1nPfhtexo6eJh8\/tJ8\/SjaZECBlORvRKBIJ\/WnnThPYA8WP18IfWXRRbexCY+GJFBIx8TNNg\/2A7eRY7r1t4oYS31LGM1yz+MV3+vXgiLWjCjiI0jrt\/n\/bCoyomdiVAxNT5S9fpl53xo4rpX2QNGeF0xQA1xy2gJ140DEVirVmFXUvdRTykDxGITa0PNTUyo9C6N9KBL0XJtCHjCfTjjR\/TNAkbw2jChlWL\/16klLR4t+KPpc53yw45WhUXJ9dayYri7DwElc413F73JY66f0v3yAEkBk6tlKWFd7G04JUoo17gjZUf5Lj7IU4NPYoc9bIqQmNF8WupcV7DE20fTbPPzuWIYFPlRzFkGH+sD02x0Rc4zsEpqrFmAhUbpTnL6Q+dGDO0XFoF6yreS6VzskzKXDFv\/MwyLosNl8XGcDR16bGKQFEUluaX8b7l1489rykqjRdpRa0tqWVtSeIOr3WuIlShzFjYa03RxHvcqKGzpfPkjBpYF6MgKLTl4I2GsCjqmBTlnTUruKt25YRtn+48SSAWyagk\/nzp\/faeM+zub+GfV9\/KiB5ha9eptHKGIO6p+X3rQVwWG+tK67mlejk3VC5h\/0A7ewfa0E2Dmwsrub5iES7LxIqgUGyY3T2fZX3RcNx3IxUQgoCey3HvBiKmg2d6znB3\/Wps47xUqrBQl3cddcS9SIYZ49TQo+hGesaPIRUiZnxBGQxPX97hxUZ93vWc8jw6ITk8G0asISB5HokiNIquffeU43gjHaiKFdOc3nwAyhyNaW\/rCTcjp\/j9BvVBpDQxpM6u7m\/THTjAeWPJouSwsviNtPufZTjSTuahlAtiNcm3UCiyL85w3MQEY27Cho\/GwlezqfIjKEJNaCwKobCq5PWsKL4Hf7QHEORaK8fCf6tL3syhgf+dcu6XI6X2FSiKgkIORWpcwT1q+DNqlaBiG5U6yQwhFBbl38Lm2k9nvO9sMm\/8zDJCCO6qXcnvWw8mDBFpQqHWVci60npWF1ZNyvfIlEV5JeRZ7QyER6Y1znl29p7llXWrMKXkD60H2TfYjmGaGfffyQQh4J9X34pFVekYGcKiqCzMK0mYp\/Nsb3PWhl7cCNL56qEnsSoakQwXoahp8IfWQ1xdUocQAouisqG8gQ3lDUn36fDt4dmeb2FXJEKMRsRH+324tGGuLNzGXs\/tqMJCi29wkuE7HlWxcGvt59na8XkMM5qWB6g\/EjeaC2wzL1B7ubO08K54z5dpGhtW1YV4xTuRf\/4fMGLxrHYABGgWlFvejsgtSjmGIWMMR9rHOgmnJnWuRm3uhklip95IB\/5YLzYll2LHEhShYkqDo4O\/4aTnj1NW4SjCQpvvOV7o+9GkMFDMDHJo4OdpzPsCAjXeyE5Kih1L6PDtxiB5OsDi\/NvTzjlKRlj3srvnB\/SFjqMKCxKJQOGKkjeztPCuSdvHxUtfYCTai03NozZ3w9gcIoafM0OP82I0fCDu\/QrqHnK0+HlpSoOW4W0Z3AgIri5\/Nz2BQ\/QEDmYU5jTRJzRdvFyYN37mgJsql9A+4mHvQBsx0xj7+dgUjQW5RXxw1eakCbiZIoTgH1fexNcPPUUowx48iZDA1q7TPNfXjD8axpijH\/8jbUd49\/LryC9KvUgHM+yhlAgJGRs+5\/HHwgyERyhLo\/LNE27lud7vEQ9TTH5dEfGeQGW2doZjy9Kqysq31fLqhf9Bu\/85Ovx7GAidGm1wOHFfw1TpCC4matqxKRq3VC1LPOBLGIdWyK21X2B711eJGUF0GUEgMmrqpgoriwpuRylahywsx9z7BJw7FjeAapejXHM3omJByjGah7dycOAXmNKcMt8i31pHWU4jZ4e3JMw3cWplbKz84Njj4Ug7z\/f8O\/5oD4rQkJiowkaV8yo6\/LvT1BUTSGmyu\/cHM5bjogiFO+u\/hkVxIKVJgbWeQ4MPkMioK7DWc3X51J6zizHMKEIoKEIjZgR5su0ThPQhJMaEz\/nQwAPoZoQVxa8Ze67dt5s9vT8E4t3AVWHlwMDPaSx8NatL3sxx9x8IzVCH8EvBEfeDHHE\/SGXOWiqcqzky+Ju0hFLHsyD\/BhYV3EKrdzsv9P4XZgrj9TyqsFKfu2lMVPZyYt74mQOEELxz6Qaur1jMX7pP0x\/yk291cHPVEhoLKme06sYwTboDXsodeZwbcU97vJhp8GzvWUYyDC1N7dhOjiElB9wdvEWPkqOlLlPNs9inDCnOJspontXp4T62dp2mP+wn32pnc+VSriiunqDlddz9+ykXO00xqHS0MRBZzIIpvAcX9rGxMH8zC\/M3o5sRDvb\/krPeregmxFNHVc6NNNIdbsAy6mm8ovjlle9znkL7Au5ZeD89wcMMhVsZjrTT6X8hqfbQeAQKNjWPxfm3xh+X1qK+8n0ZHb\/Z+wz7+3+SVhm0goX1hbdREt7HMhuci4xwBhdRFBQ0lha+grWlfz3Wa8sf7WVL+6fHunufP4ZOmFbfMxnMUs5oYq9Apca5AYFCp38ve\/v+azTZerLhU+O8hmrXOnZ2fROJpMp5FQvyr5+Q\/zNhplJyZugJjnt+T8TwAYIS+1IKbHWjmmCT34chIxxz\/5bFBbdjVZ30B0+yu\/f7E76T83+fGnoMTTho9m6ZZlVeIqZzlcyU+HF6ggfpCR7MeO9CWwMxI8ghz0O0ep+Z0vARxI3QSuca1lX8XVYznm3EVLHf8axbt07u27dvFqfz8qIrMEyzbxBVCBoLKyiyTU+dO2LofPvIFnqCvqw9GdPFIlRqXAWU23PZPXAu63FsisaHV9\/CwrzEshHnebLjBI+2HyV2CarOIJ6EvbqoiqOeHqLjPnObolHjLODDq28Zqy777Zl3pOUuDupODOXdvK\/xxqznFTVCbOt+np29rXijLoRQMKXJpvJFvH7hlTPmaXyxEzVG+MPZv5tyYRMolOas4LrKe7PumG1Kg4fOvpeomV5IWgEqCbKJXlRhILGAEEQL3oGl5AOTwkLPdX+Pdv9z05InEKgzXNGkoI2GnBJVW001BxUrimJhc+1nKL6oH4xpmjzV\/gmGIq0Zz0oTdq4ufw8L82\/m8daP4o22p3gH1rS8HOmiCiuK0NhU+TF2dH01LcP7UqIKG+vK38vhgf8laoyMtUaYiEK18yrybfVEDC9W1cWCvBsosNUl2HZuEULsl1Kuu\/j5ec\/PJcAbDXH\/iR10BobHKsFMKVlTXM3fLt2YtBR7Kh48u5euwHBGVViaUECCPgP9H1Qh2FjewJsWXc2BwXYOujuzNsIips7BwQ6qnQUTkn4vZnPVUvb0t9IX8s9Ykne6aCLetfmop3tSPlfE1GkPePjfM7+mynEE3QyndbdvSggbTt69bMO05mZVHdxRewu31Uh6gl4MaVLhyMv63HqxENQ9GGaEHK0YVZm6uZ1VdbGi6NWc9DyadBGyqwVsrv3MtC\/kg6FTGGb6C50J9EgHz4tSrqcXQQwk2IYfAMdqcN08tq2UJh3+3dMyfFSsGDO4EKvCTlyBXc\/IoBq\/rUEUw4zyl\/bPc8+iH2FVL9wg7uv\/cVaGD8QlHUaivTx17lMpDR9gRgwfBY08azWqYiHfWkdAH2B\/\/48ptC\/AH+0lavqnfYyZR6AIjVXFb6Td9xxhw0ci41VBY1H+rayreO\/cT3EavLSvhJchUUPna4eeYigSmHQaHXZ38aOTO7l3Ver+IIkI6lH2DbZPaficd7TaVY1ryxZwW9VyvnV0K95oaNoO2KqcAt6+JN5uPqTHJnhCsuEvXac55O7gE2vvxDlaMdXk7efPHSdo9Q+iIKjPLeaa0nq6gj4OezoxpcSUJqX2XMJGbNZCYlZFpSInj\/6QP2Eiuyp0VuQ9j5UhPGEjYY5PIgSwruwKHFOE+9JFEYJqZ\/qSAy9GpJSccP+B4+MEYAWC8pwruK7qw9jU1ALDq0veghAaJ9wPITHGGRCC+tzrWVf+ngmLbraEdV\/yapl4K69JmELQZboYUTRcYvT3JMPgvn+C8WPI2LQFKSXmaA+Y6RlAqrBya90XOOH+I10je2dEKFOXYY4O\/nosF8gwo7R4\/5L1eCYmxz2\/n\/a8xpOjllCTew1nh5\/i\/JVWoOKwFHB91b\/gtJSwtf3ztPq2XfhMLlOnj0DQkHczq0reyGCoiZ7gIZJ57Ux0WnzbuLL8b2akncRcMW\/8zDF7B9oYjgQTnka6NDk93Ef7iIc6V3r5HjISYvjAUxhHtvOFaJheew5bKuo4kV\/MxSuuIgQfXHkzjQUVEzS5PnbFbXzzyBZ80fC0qrg84wRFczTrtI0pHRN3JMgvmvbw\/hU38kTHcR5vPzbB2Dg21M2xoW40oVBqd\/G2xeupdRXh0CxIKXmur5lfNr0w45H1qGkQiEYIJmlguSLvBfIsHtQkys3JyNEKWVeWONlTSkmLf5CB8AguzUZjQQWq8vJWqInoAR5p\/QD6RfpAEklv8DAPnX0Pdy\/4d3Jt5UnHEEKwuuSNNBa9it7gUcK6D6elhDLHirQa6aVLIJKkyWISw2dsfqagW89jqc1z4clIE5hRGPVuqcKKpjiImdm1MFCEhTrXdXQH9hOdhvGjoHF1+XvJtVTSHTgwYwrhAGe9W7iq7F0IIegPnZhybDPmIDiwmqi\/GqFGcZbvx+LqHb0szuQVQbCk4A7WlL4di+Jgdcmb6A4cRDdD5FtrKXEsQwjBto6vMBxtm+FjzzyqsFKes5prKz9A0\/DTHOj\/KVPPWRLRfeRYiudiijPCvPEzxzzVeTKlgaFLk919rWkZP4bfQ+CXn8cWCWEb9fgUxCI0BHwcKCzllw0rJhhAAmjILZ4kRlrqyOUr6+\/hU3sfYSiavcicc1w\/m1CSBnCZYkiTo54u9vafm2T4jEeXJr0hH\/ef3MFnr7obh2ZBCMHG8oVs7TpNT9A36XNXiCvVB41YVjlD7iSflUMdocA6kLHhU597A9dWvD\/hgtviG+S\/T+0aU4YXxO\/O3rzoKjaWz642ji\/aw\/6+nzAQOgVIiuyLuLrsXZMUy+caKSV\/av3QJMNnwjaYPHbuXl676L+mbDqoKXZqXOl3Sb6YvpCPA4MdhPQoNc5CriypvZBbNfhDBjx\/AiZ7kFQDjBRXYilAH3JBhefiV8b+EkKwtOBOTg09mmb5\/AXOh2TWVbyHU55yTnr+mJUulUDjFQvuI99WQ9fI\/rFGgTOFKWN0+vdQm7cB3UydOxdyL2W4+a\/iH5G0oGgB8hueStsDmw4KGnm2aq4uezdlORe0Aq2qkwV510\/YdiTWT2\/wKJe74SNQ4t7OivcS0oc50P\/TtDyBUppoyvSEeueaeeNnlvF6vbS3txMOh3E6nYSDwSnlTjoDQ2mN7f7Dd8iPBNEuSlq3mQZXDfVzOq+IF0oqx56vzMlPGk5RFQWXxZq18WNRVG6uvCDcaSJRhTIjIpqGlPz36eem3E4CEcPg6c6TvGnR1UC8xPajV9zG\/Sd2cG7EA0ikjC8Wda4iPrDiBnzRCP\/btIdmf2Jx0qmPOvELLbL2pbVnoW0hVjWHhfm3Uuu6dszoCQ91Eh46h8VZgrN8OV2BYf4\/e+8dH1dW3\/2\/z713ujTqvVm23LvXjV1vMdtrdmEhuwk1hF8oTwiBEMIDJPx4EpKHFghk0yC00MvCFrZ4e7O9694tybZ6l0ajmdG0e895\/hhZ1ljTJEuLAX1eL79e1txz25RzP+dbPp+vHH0mZf3UD1r3oQmNbeXptYViVpBTI4\/S6n+SmBXCoeeztOhmlhfdnraL5jzOjj7D3v5k48zB8Akeb\/8YG0rfzsqSu3K61\/lAT2g\/UZmmOz31AAAgAElEQVRL+7FkV8cnuaPxa9OI\/1zAlBbfat7N4eFupJJYSuHQDb7f+hrvW3k1K7W94PseitSF0t6ghq9App0XNAXFw3aYKvlkXwRasnjmqpJ76Aq+RjDelzMB0nGwueI9NHh3oGs2VpXczcD4MYYjZ5L0fTQMDM1Jgb2O4ciZpDqYRGePjWtrP0GBo5bRSAcvdX9pTqM+57G77+sUu5bgtac3GImPlyaIj7ywiHCVH2auicfNi\/5vznVgA+PH5\/Tc8wPBrQ1fpMCZ0AI768+9Q7DUtXxOUsOvJxbIzzxBKcXBgwfp7+9HSolSCiEEVyoXZxxRTjvTr6zsWvaPJTbUTf5I3zTicx4OKbm5t22S\/Ng1nbsXZZYSX19SS3fIP+PUlwAK7C6WFpRxYKgDh27QkFeELgTW67zQsZRkz8C5SfIDiYjUX62\/kZ6Qn9P+PgCWF1RQPVELk2dz8qG1O\/nbfY8QmHHqT5AoTdWmvJJ9f0vq7B2+BkPTkVopFW6FHDiO\/8xzSeP8rU+zz1ZMVKY+Zkxa\/PTsAbaULUopmRAx\/TzR\/jdELP\/kCi5ijXJi+Be0+V\/kpobPpZ20IubYNOIzFYeGvkdN\/ha89qq0Y+YTp0YezXnseHyY\/vFjVHrWzvl1fL\/lNQ4PdydFD6NWgqg+cOJ5PlH6c6pFhHzOdzslf04VgwZjebHU0R8JzoigNDqFzAgnlLxv2lBDc3JTw+c4MfxLWkYfJybHyfTAdxkl3LX4X5O6xnRhY2fd39I+9hKnfI8wHh9KkOXCW1hcuBOb5qI7uJ8Tww\/ii7ahCZ3avK2sKr4br6OG0WgHj7f\/9bx5YFkqyss9X2Fb5fvTjgl2bweZnA52Fp1B0+e2A7YgAwG7GImu6te3IWMmEOhsr\/zgJPEB8Ec7cor66MLBhvK3z+flzQsWyM884fTp0\/T392NZFyYBpRQ6gtqYDZ9mMWBPPUEsLSjPevzhzpN4sxiYVkTGsZkmyjC4d\/HGjF5OA+Egj3ccT\/vg1xDYdYPIRcKJmhAsL6hg3Izx+cO70Cd0bdTE6vc3YXwas1JPctWeAqo9qVMfTt3G36y\/ia8df46hSHDCk01gqexq1jYRw1I2EkkWg7F4YSJXkWYlrxT4YmX0jCeiFn3jfs60vcadjKUcvzk2Qj8u9pM6rByXFm2B4ZSyAPsGvjkp9DYVlooTig9waPB\/2Fr5ZymPe2jwu2nu+AL29\/83O+s+mXXcfGAm9S0Sk47AHqLWGK3+pwjG+tCEjWLnYpYX3UqJc9msokJjsTCvDral7TQ0pcXjY8vZ6h2kmdTfvZEii2Vn7TQvjmFpTPJo3QLdFFx9wIm+qhdLCRA29KK3Qf5NKY9laE7Wld3H2tI\/RKo4Z\/3PcXDw20ilJtv5deHAaRRwY\/3fp1RR1oROY8G1NBZcm\/IcNXlXUJN3BVJZDIWbiVpjE4rVnexq++S8m38OR5r5ddtfpt0e9TcCF9\/X3Eb8bMIzIz+1wcjpWUbCBIawT+yb6L4yZeSSo2oCDV3YEUKj0r2B1SX3TEtjJ9LEmbWINGHjutr\/PU2G4LcBC+RnHmBZFufOnUsiPgB+zeKYK8KobjFZc3fRb1JDZLRHOA+pGzmUoMGtvW1c6R+h8Mq3ph+nFP948HHMjKtEG5+54g40AV2hUYYiIYodborsbr589OlJEcT4lIkv1zZ3Q9OQUs2ZZUapM3N3TzoUOz383RW3cy4wNKG\/pBGMRXis6zhWWj0sSaF9iKX5h+kL1xO28rBr44gM9T4SnY7xCwrLMWlxqxhLy5eEgFsIs1+lJj8CQTiF0nXMCtId3Jf2YSQxaRt7kU3l78K4KIUC0Bc6mvYezmM40px1zHyhxNk0o1bntrHnOet\/Oun9CMZ76Qq+SpV7PTtqPoomZjYl7hs4jlImUyN\/UyGBQ9El5HEClWbMQInFmmYHlUMGzY0xfAUWuiVY1GWjocuOdElavAV0h5uwe3dyldUN5+4GYSRIUMG9YCTXCAoh0IWdpUU3UelZR\/Po4wyHmzE0F4sLdialWWeDjrHd7Bv4JpaKYkkLdTm1LakUEdDhpRju\/jmL\/qwueVPOY4fCzXSMvTzjcwh0nEYBt9R\/HomJQmETbh5r\/yjj5jCXksbThI17mr6R8nd\/Ho3ea2kd3ZW2\/ksXdq6s+nBSvdNvExbIzzxgbGxs2irSp1vs9oSwMixADKGxs3oZBfbsvkslTVegnvl+2u0SOFZYyq9rFvN4dSNXHnuOu1ZdnVSUfB5HfT1ZbSIiZhyXYcOm6awovFB88HD7EcbN2CURl4a8Em6oXs63mncn2X\/MBnZN56a66T\/G7uABDg18l0C8DyEE5a7VrC+7n+IUK5bG\/FIa8xNRlHEzxuNdJ0g30WhIat1nsGsx6j2tuCwXlZEqjOBSznrOYAqJEBPWrEogEZwJrmbMvPCwMjDRybw21YHlxDidwlDTVJIKV7J8vFKK4yOnkCrb6lQxHh\/B65ieuhI5eCuJOV5R5wpfpI32wEweKGKaR9V5SBWnd\/wwBwe+xxUV7875iMHYAHtOHUPaHInCnDQwlYaVsZ0Lnt86ztbDLrYfchGbmJYNpThaWML3GlcRHTXY5mrmXea\/gt+C86KMI53g+w7U\/ic4V6c8fL69kivK35XzfWXDieFfcXjoB1yuaRxHQTuRkWVMJaTjg+vIq81eNwgJYlCTt5nuwP4UGj+CPKOCpUWpI29ToZSkPfAy+\/q\/kfa7N\/W4LqOIqBVAQ0cqE6+jlrr8bcRkEK+jhrDp46nOTxExR7kU4qMLB8uLbstIfACKnI1UeTbSGzo4jQBpwkaBvY7qvE2zvo7fNBbIz+uEw65wRuIDUO7MIxiPcsLXy4rCyoy2F053Pkcb19J07ij2FE7kcU3j0ZrFmBOt0C+ODXL04ON8cuMt0wjQ7r6zWa9fovDHwtOiKi9fgrHoeXQFffyy\/XDOTvEaIiXZsms6ywsr2F6+KOn1l7q\/TGdw9+TfSkHf+GH624+yrfKDNBakV1J2G3besWwb3zq9O8UZFRXOdgpsI6BgcWgJ1ZFqRKIElLJoGf2OQc46+wmiCMaKaY8sYdzKp8jeT4WjE12YGNFSiBeTLTRfisXpKX8b0mLTyCDXjg1T1N2OrFuBWHcto4aNrxx9hvH4AOuLTPQMh7VUjBMjD7Kt8v3TCHt9\/nZO+R7OeE1V7o0Zt88HTBnlmc7\/n3iGLq\/pyPzdkirOGf\/TrCu7L2sR+Hm80roLMbQIqnozjsu3JWwXMsEyYPcVEcJjZZjdCULeml+I356I9pVoo7wt\/xG0i5WoVTTxr+sDsHjXZOv7fEApyd6+Bzg39vy8nWMukFe9h+joEtSUuh9luRg5eR\/FK3+M0KMZu76kipNnlLGl8k85PPiDic4ygcSkNm8rWyrem7WzSSnJ893\/RF\/oSE5pwBrPFq6p\/Rgj4bO80vtVQvEhxqKdHI91c2L4QUqcywjEewibF3f8zQwaBg3eK1lXel9O46+q\/jAHBr7NWf+zEylSgaXi1ORtZlvl+y\/ZfPY3iQXyMw\/wer1MtQ0JaBbjWnaC0BMeo2eiXbbU6eEj664nz5b+R7bijvdz5GdfYn13y+TUGhUaUgi+0bSWLvcFs00LxWhsnIfaj3J\/U7LSdy4dWYrUhdjhNPU1M0FUmvSHc1M4tWk6f7ZiB61jg5z29ycUraWk1OnhptqV7KhckuSn1eLblUR8pkKRmMwrPetwGemFALeVN+LSbfzXqZeTaph0oSGwIZVOTaSc6kg1+pRaAxs23NJJnlJIWwCXEcRmhHDqIexaDENLvHfKGIDRHdPOezFGhDH5DC+Ohvnoyf24LROHtIA+VO9Z1GuP8ciyDQzkebELM8H0spDujsArVHnW0+C9Kun1taVv5bTv0Yz1BePxISwZn1M9nGxoD7x8yUJ8qaAJDV\/kLOXu1BGUi9HaYsMRdWOP24naoikzXwaCJXldOR3PprkorXwbD8U6MOWFWjOb0LjRcwhbhs\/RlFGM4NPgne5WPlc4MfIr2gO5RU9+k3Dm+1i3LsyxowmtLykTb5yMVDB84n5K13wHRJY6Pj2PxQU7afRey2i0A0tFybdX49CzGxgDnPY9Rm8oNw8tgU6hsx5TRnmx5wuEzZELv7kJuYDBHHSNcjlTXf52tlV+IOc9NGGwueJPWVd6P0PhRN1SsbMp43z524IF8jMP0HWd+vp62tvbkVIS0VTit5ZjhiAqTfrCY3z9+PP8zYab046z6TY2vvXjDD77Q4oOP0NE0\/lp3TIOlFRMRnymwlKK3f1neeuSTZOFyZAwQ80Gh2bQFx4j3+ZIihCUOfPozLE1\/1IhgMX5JYxEQ9xSt5p7Gjdk3efI0A8ybldYtIw+ybrS9DVRAOtKavnqlW\/l+EgPrw60EVMWTd4yrqx4M4OhQ8gTryQRH4AOVzvt7nakkBO6PIoi+2DiXqZ8F4RhMa6N45bu9GkkASvqN3Ou8zgRM86fnz6INx5NPuNEMfq9p\/Zxdu16GqtfyVh7NLmbivJK71fxRdtYU\/LmyVWtoTl5Y91neLrzb9PuOxI7y+GhH7Cp\/J1ZzzNX6Anux8ySRtAwJjyI5qfdUClFPFwMaNT0VdNR04GFRJ1PfykQSlAmY6wvqefcWFvGCECpcxnbqj6I117N8qLl7Oo6SevYIIams7WsgWvkzxHx9AsNgwjdQ09SM0\/kRyqLUyO\/mhfSOR+4es02tjbZOHRqgN7BIDabzuqmUsjzs38o+3ei2JmouxRCm5We1bHhH+c8VmERivVzdvQZYlYwJcmZG9kANaE1NHPYdc9vdYorFRbIzzxh5cqVhEIhhoeHcUgrVQ1eRlhK0R0azar2rAlB+c77kJEgnf3nOFpUmpL4XDiuJGLGJ1Nfp0f7Oe3PrksTlxZfPvIUAJUuL3c0rGVTaT031q7gv0+njqzMFaa+daf9A5wLDPOzcwf50xVXsb4kfbtp1ArkZCLZHzoKWcgPJN7rtSU1rL3IEd3hXEEf+5laAxHSQ5PEJ+le0nwPTnhPsHl0MwqVkgC5ypYnisqVYlnAR0E8Nq2fZfI6peLOoeOcqonPQNRN0ex7lN7QQW6s\/wcMzUHMCnFs6CcZ97JUjDOju1hXel\/WGoLXE7qwI9XMNKukkhQ5F+c0VgiBbphYUbBZNho7GxnN9zOW70dqEkfUQdFYARVl++gKHs+S+hBcVfNR3BNFy\/V5xbxnRXIUTrVnTmdJBS1jI3T0PMCWyvfM+WcRiPUg51i0cD6gCztbK96PXfdg98DVVyTPDxFzKweGvpnx8xDouI3MhsqZYMkYcTkzW52OwG46AruRc+4cnwypfjOG15cjfr+18ecRmqaxZcsWtm7dysqqejwz7CIBMKXkuC9zPQEkVifare\/Fe\/W9WFmMKxUkGYU+0XUiJyNUiUqIpQK94TG+fXoP\/3biBZZ7s7flp4JN08mzOXJyFzeEPnluSHRHxaTFf516ic5g+qiTUon20KzHv9QHhVJJkTSALmcXcgartXEjxIGC\/cTE9MJzV8VqRMOVPNvTTExaLBvzTaS6UsNAsdgXmaGabcJ1OxDr4bTv15gyymNtH6M\/fCz7rkIjEMv+PZ2K8fgw\/mjXjB8SADV5WzBE5pqLGascCxtLCq7Pud4HoGmxDaElPi9NaRSPFbGoexGLOxdTM1CDO+rEWXIqKwEX6LT4nsg4Juy6nqhM\/9uOKRsHI0s5OXqI57o+N\/Hdvzwg5uExI9DRhYN8WxVMVNlVuNeys\/ZTLCpIn0J2GgUUODLr8zj1Arz29LIg2ZAwAJ0ZJOa8Ex+AEufSeT\/HbwsWIj\/zCCEEJSUllJSUkO+v5avHnpmR7o1CJdUOQSLc3uwfoC0wjK5prC2upsLlRQhB7ZJNeH1dDEVS658IYENJDcYUwtEeGJ7VvcWVxanRPr45g6iPDuTZnWwqqWdTWT1CKb52PHvxZDzNitOUJo+d\/i7\/34Z3g+6dtt2h52PT3Fn1YJYWpk8tXgypJJ3BUeLSospdgMdmR3fmg2bAlNb+oBGcsbRI0BbkUPlJbi3\/LFFfJ3ZPKa7SRCTiic4Tk+POE8HMh59JukeRR5wgdiwVp9n3awxhZ9zMTfHalBH2D3yLVSV3U+Ven1H\/pH\/8GAcGvs1YrAeBjlRxdGEHFHY9jxXFd7K08KaMLef1+W\/g0OB3Ma30FgfpHNpTQRM2Kt3r2DhDobbr1lxFS8te4hGdaboyWhxXyUkMZ3YFaoVJd\/A11pfdn3ZMOO9WnCP\/iU2ZaBd98KbSGLQKaTFr2SDbGAm30jd+lCpPZlHTmSDfXp0obp1FFnEulZ4N4cLQnDQWXMvyottwGUWTi5xcdZo2lL2dF7s\/n7KFWxd2Npa\/\/ZKUwO2am2z6OPOBEsdKhqMn027XhYPVJXe\/jld0eWOB\/LxOaCoo4y\/XXs+PzuyjOzSKoelErXjGn4ddM1g2RfCwf3yMfzn+HIFYhLi00ITgl+cOsbKoiveuuAq7bvDHTVt54MQLKb2qHLqNuxcl18lIwIVkG1E2iShOFMeVjYfxILM8XmPS4lyOlhCaEHx6421UTREZ7Az6JuJJafaZmNDSFWQrNI6FC6DzPdDww4TuyRQIobGm+M0cHPoe6SYiu5ZPTd6EGnS8G8KHAAHuLaCXnj8QSime723hofYjmEqiITClxcbSOu5fsoUWRyn1ZtdkI7pNzfynJdCodK\/D6a3C6U1uPffHwpNddacKSri+vxNnOp8zIeiuyH0VKYANDPIS1YAgYvk57fs1uU\/eisHwCV7uPkupaznX1H48pbtzd3A\/L\/d8ecpDJ0FQTJWI\/phmhAMD3+LY0M+4o\/ErOIwLhNYf7SRkDuHSiyh0NFCft4MW\/2M532MqeIwKSlxNsxY5dNqdvPOOLfzoqRcJ+r2T9VVKabjLD+NtmL3r+MUodFbwBf87eJ\/3+zhFDKcWR6pExGfAKuKrvrcmzmsEsbB4uefL3Lroi3hsZXNyfk3orCi+iyNDP5yT480GAp1KzzqWFF5PpXvtJEGeidggQJVnPdsqP8Crff8OJKKEurChUGwsewcN3uzNB5kwHDmDLuw5tLfPLdIRH4FAEzZWFd+TczH\/7wMWyM\/riMXeUv73xlvwRccJxqNErThfOfZsSqKiISh2uFniTUxeoXiMfzr8ZJKL+PnW8BO+Xv795It8aM1OVhVV8YFV1\/D91lcJxKJoQmAqSY27kHcu2065K7lbocZm405rACdqspvEQUJjJJZD6CKXlBnA1ZVLJomPUoqfnTvI870tmGke4IbQcOk2ItLMaJEhlUDGu9BCL0DeG6dtX158O4ORZrqCe7n4YW7T3Ny26EtIc4zWtv9LJHKOasNHmT4Kk\/oeAhxL2W\/dzM97PdMid\/uHOmjxDxKMh7kdGyuJYwCVkSr8xhhSyz3SpwkjrVdWuSsfu6YTkxZn8goYdjipDIdS1v1YQtC8KJfIRyJ+JFDspgoxWXEkCJkDOV\/3eZgqwmD4JEcGf8jG8nckbZPKYm\/fv+ZkmBmTAZ7q\/Ay3N36Z4XALe\/oeIBQfRBM6Ulm4jCJC8Zlf33nowsGq4ntYU\/rmWR\/jPLweN7e+sZAXz\/4PkWARaBYObxuakbsxqIaN6rwrMo7RNY3VlTv4264iVtiaWWrrxELjSLSJM\/EaNCwqne3oIvF9i8txdnV8itsbvzKjVF4mrCq+mxbfk4StmUSLxUQM5NKjIAqLruBeekOHQAm2R6+j5tQwjPSCzYFYvQOx\/jqEK7vIaYP3KmrzttAd3Jcg1UYRtXlbLtmcs3NsL7v7\/mVWxrAJCHRhm0jbqou2GFNqldT50RORtfTvr0Mv4Jrav\/mtVGGeTyyQn98AihxuihxuAN65dDvfadmDUmpyZe\/QDNyGnQ+t2YmYiDp89dgzScRnKkwlafYP0BMapdpTyKqiKv5+8110j48SiEUpdXooc6Vu0bxZ+nGjkrRgyrCyRn2mIluA16bp3Fm\/bvLvPf3neKG3Ja2TugZsr1jMjsrFfOHwroznXmTrQ1NhGH0wJfkRQmNH9UcYDJ\/g2PAvGIt1YdPcLCu6lSUF1\/NCTwu\/PLcHxTJgKevsrbyj4AkM1ETNjILoadaqs9zh3sAvgjuTjm8phS+aMKv9JR5exWKriFIYrQB3O1KMo6Vsq73wrokJClOfdyWOFOk7gC1li\/jZuYPnb4qvLdvIX51+lYJ4FNuEgFRcTxzv6Q2KYbsbD6lqTc5fi+B84kxO1mRMiDFeQprCUjFaJwqg9SmaMwPjx7FmUGw5FuukM7CX3b1fm1xBnyfBwXjfrK5NoGPXPawtvY+lhTfO6hipUJN3BQ73vyOcs7wuobGs8Jas426rW8PZsWGO+xWHoxdqNzRM8gw\/S\/KT67PiVog2\/4s5CfJlgpSSg4PfpnV014zqUgQ6hubEkrE5VYC2ZJTNR51U9LzMVPE09eojqENPo93\/SURB9oJlXbNT771y7q5Lxdnb\/8AlEB8oc61kY\/k7ODn8S\/rHj0\/Ui53\/XV5473Vhp8q9kTL3Sg4OfjvjMSPWKAX2uoxjfh+xQH5+w9hS3sCSglKe72mh2T+AXdd5Q\/liriirnywGfvDcIdqDmcWtLCk5MNQ5adYphKDWUwQZjHataJBiMzStMLZUSMqVRS86KgsJWl1UxZqian58dn\/K7RqCz2y8nfwJsTalFI90HstY+6RrOm9ZvBGnbsMQOlLFUloD2IlxmydRcxSOD2PGIpPnmQohBOXu1bzxopDvrq6TPNR+kJhKPKSdIsrbCp7EJlKkDEWc61wHORBZQZt5kRqyuPCfHgx+qQyEguqBG2go2oPNMYSm6ehCQ2JRm7cVj6jiXPB5InJospS8I\/gK7cGXWezdyRUVf5IkIOax2Xnr4o38sHUvEh3TFeWpnT5qBgX1PQa6JRgoMWmvjRMxNBxJ7YVqYn0oJulWasyNWrNSMBbrpsh5waZl3BxJbJgBDg9+f05TB4WOBm5q+NycC7NpwuDqmo\/xXNfnZnS9593Qr6n5a9y2kqzjdU3jz9dcx2sDJ\/nFuaeIWE4ceoQa1xlKHb3TSLapopwbe\/aSyc8T7R9nNNaWcYyGDQQYwklMBrFpThq917Gq5B6e6\/oHRqPtl3QNU1Hba1DfY8O4WDXWjINlIh\/6OvrbPzNn58sVvcFD02o0ZwKBjfWl91PiXMKOmo+yq\/3TDEVOpRxrqRhxFc45rTkYPkGVJ7s0yO8TFsjPZYBihyetZo0pLZ7qSf0DmAqJIpajl9Z5xMM+NM1ApbC2uFeE+C+VTxTSRoHsms5dDetYlF+C1+bkR2f3EYhfmPxXFJTz\/lXX4DQuRADGzXgiUpIFbYER3IaNmDRxihiW0ohNVNRoWBhIbvbsZZWjDVNpvDbm4sfdv2R1cTVvb9qakgRNRdQyeaj9CLEpQY5tzuMZK4ltwuJ692t8cyx1aioBidfS2B7KQ1MCW+gWLGMM6R7G5XSxcskm9vV9g5i2B4TFBZM3JleM58aeRxPGNKuFpd4wawsO0hxcxpK8oyAseiug96L6Hn2a\/rWgnjFKiHCI0gkzjfmDRXSaNYbLKEr0+c\/g2RCMZ5dgmAn8sQ4Csd6s3T6zQbl7FRvL3sH+gf\/O0dhT0FR4M2tL35KzcB4kaue2VazCa2vl0OD3yWYxEZfpi8JzQevorqzEx6UX01hwLUuLbpls15+KN1R9iKc6PoUpo0lRRU0YOLQCotbYjArUV55xTCc+56EU+PpRg52Istc32jFuDl1ix5bk2a7\/Q33+VawpvTct8TmP\/vEjuTdrzFRr5fcAC+TnMoZSktOjHRMFv5m\/vDah0ZCXffU4FZpuS7saLxKSDzDGy8rJfs2TlKKyT0Qx\/nTFVSzKT5xzc3kDm8sbiEmTiGmSZ9jRUugN5VJTGpcWDxx\/nrq8IgB0ZfHm\/GfZE1lDWDmpN\/q43r2fOlui7kOi8VRoA6aSHBvp5h8PPcGnN92Gy0ivOnxspGeafUitMYhDSz95aUJRY8tc4G1IjW0hD3YlJvV6dNOLPuYlHg7xSv+XQI9l\/DgtFaXVv4u1pW\/BrifqF2JWiH3936TI0csWe2ciaZXJLuqibefwEn3dlC0UebbKpFcq3Gtm3PKsCducRn6kMnmp54vc3viVOTvmVNh1D7qwYWbRw9GFg5XFd7E2B22pdFhZfBfj8WGaRx8jHaMUaJdc53Fs+GdZx5S6lrO+7I\/Sbi901HNzw+c5OvQTOgO7UUhsmoulhbeyuGAnj7b9xYxIsTeY5XskBGqg\/XUnP06jcEJcc3YpPoWFpSzax16gJ5Q6kn4xNGxkLzwQlLiaZnVNv8tYID+XIaSyOO17lJMjD9EX9qCLjVgqs8iZJjQ2ZBD8SwVbXjlC01Ey9Y81TyjuKirl3avvIhSPcnC4k1A8Rpkrn\/XFNegpyI1dM7Db03+t3IadUqcnq51FVJq0jiXUkIN4aInX8aGin2IjudU3qgweDu6g30qQMEspxuIRnu9t5pa69J0NQTOKeZGydUC6sJRAzyB9H5JZ9GUEPJMfYlHUzoqoA20Ky4kWHgEtnlN2ScOgJ3SIRd4dnBx5mMOD35+MKFzc6pwKSl1MgAQ9FPB6mVGORFon3Z7j1jgv935lwiMpNxTblzAa75jz6wrFhxiOnJmX4s9CR33WeilN2Li65mNz0oa+vuyPODv2LGYarSRNGCwvuuOSzhE1s2vW+GPZP6d8eyVXVn8Ipf7XRHeVHSFEQtF4hqkiKaYJC1wEAYYdS8aQWBjCeUmt67mixnMFc9HeLrGIWtnFWQFsmp1az1a6QnvTjqlyb8CuZ6h\/+D3FgsjhZQalFC\/3\/DNHh35C1PLj1kdQKnua4m1Lt6YkI5kghEb+ojckNGpSbdcM8hu2A+CxOdhR2cTNdavYVFo343NNxV0N67DnIG44FXsja\/iK7w85HmskpphG2MIAACAASURBVHTiSqc5VssDo29i1\/jWpLFxafF8b0vaY0kl2TfQNs2Q9bXIKqwM02pE2ngxnPmhpUSCALU5Yuxzh5O6XOLes1k9haZcZUI92f8sR4d+nGMqJRnBeB5SaVjSQMPGovwdlLlWos1z2gsupPCUkjzT9Vn6Q0dzvgePUc4bG\/6Ourxtk8XgF0OgoTOLLial8EfnnlQBFDjq8Npr01qU6MLBprJ3zZn+jqE5uLr6r9CFY1pUTRcO1pS8dVbWDACBaB\/PdHwmuyKwAlMmitwjZnZNIyE0DO2CRY5dz8Nrr57RtXVXxpEZfkdKxnlOe5Cftrydn7e8m1+dfT\/NvsfnXfhR1+xsqviTCd2qS0Uu1yooda1gR81HKLA3pByRZ1Syo+Yjc3A9v3tYiPxcZugdP0Rf6PBkuN+hRyi0DzISKycdVy2wOdl6kZN5rvBUrAIpGWtLGBYqJRGahtAMipbdhD1vdgrOmbC5rIHecT+PdR7HmsGq72y8hq+PviWnsaF46o6LzqCPfzvxAsPR6cKHvVYpR6JLWGs\/My39ZUmdiFlAa2hl4mPIspC0BAwZJiO6RYk18TMTudcDmCrKa33\/RaJJeGbERyqBPWwwMHgl7spK7qxfRoO3HpvmImoFeKrj04zHhzFVIhKTKLw1EBhYKjIHonTaZHdJ3\/hRxqLdaWshNGy4baWYMoJTL2B16ZsTpEcINpa\/k4HwcSLmWNJ7INAQ6FjMXB0axJy1fqfCjuqP8GTHJ4hb4aR7NoSDCvdalhReP6fnq\/Ss45ZFn+fkyK\/oCryGwqLUuZxVJfdQ7l45q2OORtp5vP3jifc8h4DJuDnEgYFvs3\/gWywtuJmVxXeBAKdemFPEZV3Z\/bzU\/cWcv3cnm2LU9NlIpSIhdY3W+gj9snXytbA5zKHB\/2EwfIorq\/5iXqNASwp2YhMuDg1+l4g1hiY0LGVS69lCT+jA5G9uLtCQfxXaxCLy1kVfoDv4GkeHfkLY8uHQvawueTP1+dszCob+PkPMJOS4efNmtW\/fvnm8nAU82\/n39I0fTnotJu0cGLmOmHQgL+KruhD83RW3U+FK3SKdK5RlEvG1I80wurMAR0HNjMXD0mHcjPFy3xn2DrQRlxZNBeXcULOcjoCPbzW\/Mi86qBWufD67+c6k186ODfHPR5\/O2GkmsLgv\/ymuch1DV4n7VyiGw40c7H0LcemmxR6h2RlDZptDFVTHDa4IJ2QNgot+irLNzG9qpjClQVza8Xeu58+bm9G234W29bakMZaK0xV4lTP+p4hZIYqcjSwvug2byOPRto9hysAMrTEuhkZi5SrQhQMry4Rfl7edHTUfTbktYvo5OvRjzo09j1KJQm6n7iVs+ZhNikHDxpuWfnNeCVDE9HPa9yhn\/c9iygh59gpWFN1Fg\/eqOe80mw882PpnRKzM3aWZIRLFzHo+q4vfTFPhjVkJx+HBH3Bi5MGcz1A6onPVPheaFOgWSC3B087VxTi4OpqyvlcXDnbUfJRqz8YZ3s\/MoZQiEO\/BlFHybBXYdQ8jkTM80\/lZLBnPqS5Ix06+vYrR2PROuRJnEzfU\/UPKusoFJEMIsV8ptXna6wvk5\/LCw2f\/PKWOiSkNesMN9EQWE5NOwMa64hr+qGkLXvv8TeSXir7xMb5weBcxaU4jHbWeQrpDozN+hDk0g5g00+5n13TubdzEtdUXtFCUUnx638MMRnLLpX+q0MATeRWE5PToKoYjFVzQxVHs9owzomdfGReZOjtCiXx7tPA4sZKDpFyyXiKUgtF4Kb3hRgaj1aAEX9v3DJphR7v7Q4j6zFEApRTfPv0zbPx8Uijv9UKFey1vrEvvHA8Qt8K83PNlBsInLklHZU3JWy6p0Ph3HaORTh5rz5ImmSoVlQW6cNDovZYtle\/NOrY7sI+Xe7+KVPEJYQZtIm2cOiIkJFQNGHiDGqah6Ko0iTgzzyaV7nXsrPt09gufJ8SsIE91\/C3+WGeWkRrLCm\/mioo\/oTd0mCNDPyJs+nAbJWwo\/SPKPQtKzbkiHflZiIddZnAZhSnJj6GZ1HnO0OBpZ23pfawq+YPfwNXNDHJCnDFopu7Y6QqNzuh4xXY3q4qq2Fq+iKgV5z9PvTxNKNEmdGo8hVxVmezO3RH04Y\/llibRENi9jUSCPpAm5XaJL3I+KJ9Iurwh5GaPO8SwIdM\/BBR4JsJDmqbhDq5BFPUQpT+ZAM3gYZIKUoEvVs5R\/1Qn8ImDmjHk3kfQs5Cfl\/vOEIq9SLF9lsRnlvegYVCcpvjYlBFO+x6l2fc4EWtm35V06AsdodqzkRLXgsFjKvij2R7KE8jxc7ZUlHNjz7Gk8AaKp+g+pUJN\/mbekvcd+saPEoj1YtM8nPY9gi96NuV4pUFPpUlPbpcCQCA2OyHKuYJdz8vJ+NQQdlaVvAlI2HHMpU\/bAhJYID+XGZYW3oIv0pY+NywEi2bpPdMdGuWlvlZGouOUO\/O5uqppmt3FXOLUaB+hNKrUs0HAjPL2Zdsm\/\/7wmjfyi7ZDtAWG0ISGITSurVrKHQ1rk8xbAYajQTShQQ71M7qmUVq1hv6eAwC49DjL8vvoGC8mbNkntZGXxOyM2MZTCjAC6AJWGUV4vQ6qq6upr69H02\/k1bYf0Bl9FqmNg9LwxJfj9RbQG90z4\/dEKbCUjZZAsk5UZWT8wlX1nct6nMe7TrDY47\/EdNfMIYRIqVUSl2F2tX+SYLz\/kiI9F2MocpqnOz\/Djpq\/el3SH79tmOqnNleQyqRl9HG2Vb6fcXOEFt8TdAX3opSiKm8DywtvI89eASQKoqs866l0r2N379fSEp\/ZYiaaSqkQjPVzdPindAb2IFUcj62cFUV3UZ+\/HSE0bJo7a4ove+pTsKL4TlxG4SVd6wIyY4H8XGaoy9\/GKd\/DjEY7kCo5L6wLB0sLb85JDXYqpFJ8r2Uvrw22Y0mJRKELwbO9zeysXsabFm3I+oMNxHppHd1FINaHx1bKksIbKHTUZ9zn7NgQUetSRL+ScXFrelNBGX+9\/kbCZpyYNMmzOdDT1Cl5bc6c\/YVKHR50u4viZTfha34SJS18uqQrz08UnXJL0il0jmpTNTYufv8ShcrbrlhMbV5yZOPKJe8C3oVpmWhCQ9M0jgz9mL6olnPR5\/lsdX+khnOhNUSle3Kb3TK5pWcK4clSuyWVZDASpMFlZOshRiiBuqjTRlMakgwRsDTQsLGp\/E\/w2KZbERwb+gmBeN+038BcwFIxXun5Km9q+sZCMehFKHevnEg3zV1nlELij3YxOH6S57o+h1TWZM1L0DfAmdGnubL6L6jN2zK5T2dwD13BV+fsGmBi\/izKbiOSCkopTvUc4lDg8yjMyUVCMN7HvoH\/ZN\/AfwIa+bYK1pb+IQ3eq9Ieqy5\/Oy2+J5PsKqZCEwaLvFfP6joXkDsWqqUuM2jC4Pq6z7Aofwe6sGHT3BjChV3zsLbkrWwoe1vWYygliY71EBk+R3zcx+Odx9k32E5cWpPav5ZSxKXFcz3NvNyffnWllOLgwPd4rO2jnPb9mu7Qa7SMPsGT7Z9gb98DGdtHozNQnNaFlqSJkwoVaaJULsNGgd2VkvgopfDHwhQ7PNjTtPRPhYbgitIEqXOWNOJZczff1sv4jsrnZZzsw87junOC+EB6gTGBROOB449OawEOxCK0+gfpDQcmSWdD\/pUZH8QCA5dejEMvoNDRyKqS+2gO3s\/Z0BsmiY9QErtlsn2ojy0jE+rIQkDj2oz3nHB9FvRGGrBkJvajUxmpQpc6utTRlIbDcrA0uAxNzXwqqc7bRFPhDdNel8qidfSpeSE+56GURU\/wwLwd\/7cVmtBZXZLB8FVBRcCLTnoB0VQIxvp5rvsfMVUkqdhXYWKpKK\/0fCVhgTKBkyO\/mlOBSw0Dj62chvyZe3mNBqJ851dH2Tf0r0nEZzokgXgve\/v+jSNDP057vBVFd6Cn+a1rwkaley359qqU2xcwd1hY9lyGMDQn26o+wMbyd+KPdqIJgyLnopxWqeODLYydewElLUCglEWVFHilm6EUy\/qYtHik4yhXVSxOGf0563+GltEnsFSckJlP53gTo7EyQNES6EepX7C96t6U1+KP5t6KLIDavCI6g75p5gyQKGK+pW5VzseDhIHqwx1HGI2GEUJg0\/TJPqR00DWNa6YUSv\/H2SN0mxbmFGKWvL8k\/RpCwxcr4uDgE7yh6q2MREL824kX6Az50ERCATrP5uDexk1sKW+gyrOB3tChaWkegYbLKOT2xn9Ocp1eXWJxYKiD546\/SCgeoyoc5Pr+DpYEp5At3Ya29faM75MQglWFVZwcjVHvbkEoOc0nylI69e5NLB0poCnURFgPoykNp3QiEAzaBxixj8wo+jMwfiLl6zEriJyFrtFMYKk4gVkapP6uY3XJmzk98hhxlaI5QAi0iiZqDBfdwX05E5SoHEMX6QmTQtHq28W6sj8EYCw2k0qezBDo1ORtZmvl+5LMdnNBJGbyo1+fJG60UWwbzyktbKkop0Z+RaP3mpQkxmMr47q6T\/F81z+ilDVR4qChC4NS1wquqv7LGV3jAmaHBfJzGcOueyhzr8h5\/PhgM\/7WZ1EXRVzKFLxHjPEfystoCgIUjEcZjYUnnebPQynFnv6HORNYxlCkkqg6rxKamAE6x11898w4xa5elhVO\/5GfCWS2gpiKJd5S3rnsDfzToScImzHiUyJKds1gQ0kN28szF0xOxUNtR9jVffJCh5niouLo1BW6Sin+8eDj7KhsYmlBGe3BkWliiMnIPBsKYXHCd4RS13V86ehTk2dN6BspRmNhvtW8m4gV48qqD\/Na\/3\/QHngFDX3S8LTQ0cCOmr9KIj4ANk1nW3kjW4tqkA99HbpbwJpYVdscoBTaHe9DlGVX\/r6rYR2nR\/t4beSNVDrb8dp8FNkGEEKhCYVdX8NVNX\/BQM930dDwWMmKsUtCTYzYX83ojXYxLo7sKKXoCu7lxPCD8xr1AdCF7ZLrP35X0R3clzYlA4qByHFuqPssDflXcXLkVwxHmnNIKauMtVtSxekPHwUS5McQdsxZ6ThdgECnwFHHtTWfwG2b7jmWC441DxGLW9i8A4n2shwhlaR19Ek2lr8z5fYy13LuWfJfdAVfZTjSiiEc1OVvn7Uo5QJmjgXy8zsCpSRjZ1+cRnwgYYdgV3CtiPArlVrmPNXk9UTnQV4cuGLC2T1FSgkdS8HXT7zAF7e9Gbue\/HWyZK6TheJNdXWUOD185orbeaG3lZf6WwmbcSpdXm6qXcn6ktqcxcmGIkGe7D45rRMMoAKT2xnHj2A\/TvrRMRFIFBYappL4YmEe7jiaNUqUGwQQ5SvHnkn7eLCU5Aet+9hW3sj2qv\/F+rI\/pi90BKlMSl3LKHBk9igSNjv6mz+C6m9Hnn4VouOI8gbEym2IHGUQWvz9KMBUDrrCyyCsEEiKbCNsKN3IvUuuRhMCT9U6gj2H4KLvmVu6aQysoTX\/JEIpNCFTWGwkwzvFYFQpxZ6+r9MV2Is5h+mOdFBY1OZtzT7w9xBnRp\/KKMZnqSinfA+xueK92PU8nu\/6hzn5zKZGhhq813Da9\/AlHW9l8d2sLb131nVd\/ePH2XuyH0fFUfJqdiNmIAGhsBiLdWcco2s2GrxXZawPWsD8YYH8\/I4gNtaHmmKoGNWidDk76Xf2YwkLt+WmerwOIsu4mMi4dBuF9uSozxOdJ3iw\/RRZK2BJPLheG2znqsrkwt4l3lL2DWWzElDc4HqNRSPfBO\/P8diKuLluFQ35xbT6B9E1jSKHZ0aqrC\/1nUGm0K8qx+LdIoAdqBMgZYxHSNy3laJwORfikyBI6cMdAoXX5soSPUoc45GOY7ypcQMuo4jGgmtzOPtF56poQK9ILXOfCS\/0tvCr9iMXXaNAoROwKtlasWrSBDa\/bjOxQB\/xQF8S0X5NuXgyshQtupQCexeFtgGUSijP1bjOTSNBunCwqvjuyb87A7vpDOzNOY3i1Aspc61iLN5NINaTIlJ03lhWTFPI1oWD1cX3LPgdpUE0h1bs9sArdAZfpcBeh5lDlE7DhhAibfTHEA4aphT5Li7YOWvyowkbywpvYX3ZfbPaH+Dk8EMcHf4J9rI1uMuPoOkzS8MKBM4UDvcLuHywQH5+RyDNCOcfwCE9xKGCg1jCmuzMCRpBWvNPs8o2xonAlsmx52tppjqct\/oHeLDtUM7njklJi39gGvm5tX51VvJjYHFn3itgWTD8Hfrz\/4SvHn2WQDwymbJ6qP0IutC4o34NN9WunNbGfjH6x8ewUpCNW8Q4dhLRiBZl8Ahu4rMV1wFQkGfpBI04MgVJ1DBZ7GmhO5xb6nL\/YDtvatyQfeAcwlKSX7YdTqt6HZcWvzx3mL9cl7BlEJpOyeo7iYycI9RzBCsaoFk42RWWmEhQMBitZTCaiOpomFjKoMFzwWtNoLPIe3VS5OX4yINZiY8u7OjCxuaK906uluMyzEvdX2IwfIIE0VEIBF57LdsqP8Chwe8yED6JLmyT29aUvpXlhbdlPNfvMwqdDfiibVk6vhRSxRmNtpHLMsGhezE0O8F4f4rjCgzNSUP+hQiI2yiGWcReNQzKnMtZV3b\/jPabCn+0k8P9DzLccgtFyx5BZBElTRXh1ISdpoLpxfwLuHywQH5+R2A4C0BJFIrj+ccwhTktGCGFpNjRR3msi8FoPTZNY0tZA2+sXp407hdth2auuqxP\/yrVeorYVFLHgeHUwmk6cd7gOo5TS6wGLd+3ebJzhOHoci6+eEtJHmo\/wjFfDx9Ze31GAlTs9KBNpLLOw42kbkqnxi7lujTiM4G4kGyIKw7bY6ASHV5iIhK0yHOGG2vX81h3IZC9\/mksPne+P7miLTCckihORfPYAHFpYZt4z4XQcJUswVWSILv\/sf9R4iq1qWWe4afIPpj0gCh1LmNtyX1J0bxczEYFGqtL7qUuf\/vkazbNxc66TxGI9dIXOoJCUupaMSmot7Mu4WM2GuvAEA5KXcsW2tuzYFnhbbSPvZyTvlIuLfEaNt5Y92lsuptnO\/+eULx\/Mk1mCCcOPZ+ddX+LoTkm97HrHgrsNTkoISdDYrKk4IaMxdXZcHLkUQZP3oPhSkQvRYbi+1QGCbqwU+XZQImradbXsID5x8Is8DsCm6cE3ellNNZGVIumLTo1NIsGTwtNhddwbdUyFuUnawZFzDhtgeEZnduhGWwqnaL5oyQh\/3Oo8d28q9ggEG3iTDA6OU26zDg39J9j\/egQLi3KmfINjNRG+Ul0J1GVvhtDAe2BEZ7taebG2vSKxVdVLOH53hbklGiGeyL5YQBBJRiZC2dzochzdZPnauVKYTEqnYQsL5qQOLQo2yrexLqya+gMH+VcYCgxUWbgW6kI5HwjYkaS0qWpIBBJ5Gcqxs0YfeHUaZJC2yBrC3dPs8sYijTzZMfHuWXRFyaLjnN5iJoqwpGhH9IbOsS1tZ9IEovLt1elbQ9220pmrI31+4wi5yJWFN3BiZGHMhQ+5wYNgxsb\/gGvowaAWxd9kcHwKXpDB5BIKtxrqHKvT+kjuK70fl7q+WdUDj5YU7F\/8Fs0FMy+jqa73485vg57Xjcia5GzQBc6umZLtCcoydLCm1hf9sezPv8CXh8skJ\/fIRQtu4mOU1+dKFBOjzwjxH3L3pByW0xaE7USucV+dCEod+WzrCDh\/t42coSCgQ\/jIjgZ0flzl4MTtlU8E1xJ0ZDF\/a1nEUphU4phu5OT4XqCZ20YxTpjjsytqKaS7Oo+NY38nBsb4rHO4zT7BxBCUGBzMjTFuT2ImKQ7cQS5aT1nu3eTZfkHJusBilSQQoY54d\/McKyajvAgWyokV1cu5WTzaVrs6VfSGoKtZYsu8YpmhpgV5NTIvxCX68hU2+XSDZx66pW0VDLN90Wxwrs\/pU+YwiJi+jkx\/CAby98xo2u2VIzB8Cnaxl5gccHOGe27gNyxrux+zvlfYtwayGm8QEcTOpYyAYkhnAihcW3N3yTZWgghKHevzMlxvjZ\/CxvK\/oiDg9+Z0bVHLT+mjEzrjswVgcHFKGlgRopRSs8Y+Sl2NnJ9\/WcYCZ9DCEGxs3HW513A64sF8vNbCMuyCAQSAnn5+flomoZSio6+UXpCFShXS8b9NWEjbMYYCAfZP9RO1DJp9JZyRWk9eTY7dt3AzGpLkQhjFDs8fHjtGxFCcGqkg4r+D+LVguhTdGIcWpR1tkOsdx\/HbF2DLgUS+J+GFbxaWokCLE3HbpmpE+gXwR8LI5WarFN6obeFn549QFxak4\/gsJm8WoygcRaDJmXiRc4w4TU9ZKNhsiL\/ALYphZDaxCpxVcE+Xh2+gZg0OD06QElcY2XMTRRFpz0+3XFagd0wuKE2d1mDucCe3n\/FtLoosFfhi5WTqqPPpulcX7MiqSZsKjyGA49hx39Ryi7f8GGIDK3NmJzxPzVj8gOJbqPX+r5BhXttSnXo1xsxK0RP6ACmjFDoqKfEuQwhRKJ1vy\/AibPDhMbjFBU4Wbm4hMrSy7\/QemB4nFDMR64m9AWOOrZVfoDOwB5MGaHE1URd3nZ0bfbpJ4AVxXcQiPXQ6t81o\/1MKzprEuLW6hhBIzraiJIG6Km\/x7pwYA69gQdePIElFZomWL6oh+u21ONyLjxaL3csfEK\/RZBScurUKdrb2ycnVyEES5YsQUrJ2bNnEaoqIeyTAkrBcLSSzvBSnu7\/WdJ6fXf\/OX7Uuo8Prr6WHRU1PNXdmrKI9wISD8PRWBhLyYQSdNu3uccdSSI+56ELRbytAqkSCjYP1jWxr6QSc0oqJZZj2semaZMP46FIkJ9MEJ+ke00RuXpMuXmHPoCuxdkUt7MPd5J4YSoYKIqwGEVHkIgWuUSURfkHKXWmE8lTVLvO0RNejy82ju9MH0pK1kWcCKDTfoGYCcCuBH+2eBvFjtfvoRg2ffSOH0ZOkLgDvuuISztyypSgY7Eor5ybMqQYhRDcXLdqWtG0Qw+TTfAnLsNIZaIJgzxbFcF4b87XL4nx8NkPckPdZyl1L8++wzxAKcnhoR\/S7HsUgY5CopSFrjmod9zJwT1NhMIX0kZtPWMcPj1IbXkef3B9EzZjDlKv8wDLkvx8VzP5awx0PXvKSRcOVhTdQbGzMat56WwgcmVgF\/bAYcxew6mpqp7unnaUtOFrvpviFT9FCBOhTZlTlI1xXwNdp2s4P4tKqTh5doSWdh\/vvmct+Z6ZCSou4PXFgr3FbwmCMR\/\/s\/sxvtt\/lCddo7xiH6OfKHEzTktLCy0tLViWhZB27L5VIJOJRNj0sGf4Zk6ObcEfT6yWp9KDqDQJW3G+duw5VhY4yDPGyCUxZEqLF3tbOTM2xGrbUZxa+skyPliATSnCms4L5bXE9JlP\/gK4ovRCO\/dzPc0p29rPQ5uwbiixD9NU9ByHil\/lUMEh7KVP49UD2KbVmiSEBQ0kOop1xHifCPDXYpQ\/E2O8Hz\/L8o5lID6gC0mRfQAhoNDuwu\/3T1y7YF3ExU0BN5tjOhtiGtvHndwY8mIM9RHqO0bU34PKcD+QcKYeGD9OIJY7WbgYw+HWyfM49Cibi5+hwXMKhzaOLuK4dT9N+Yf50OodWbvrdlYvZ31JLfapRNZyZY2uGcI5WXy8peK9M74HheSZrv+DJedXEDEdEsTnMSwVx1QRLBVDYhGX47SO\/4SwnJ4yklLRNRDksRezm83+ptDaMYppScJDq1Ay2yNCo8jZOM9aNTNrv6h0r01ZQ5QrVjdVTCpBxwN1DB97O5GR5SipoxSYkUJk\/y2MnL6bVATftBQ\/39U86\/Mv4PXBQuTnMse4OcIr3d\/g113FRCw31sQnNq6ZDBkm1XEb68POibqLBOwjG1FAvCjR\/mspwUHfNcSUnWx811QWrwyMEpEuxETfUiYo4ORoHxVuL54sImDn0z0t3iJ0qYjPYn5y6AZ31K+Z\/Ptslm4liWJTkYnXeAUmijeVSLwLa4ufYzi2lMHYFvyxCE7NYF1RJY6hZhwqznLi5E1EsTTAqySDQiegdPKzZOeUEuhCY3lhBZ2ahmVZgKLG5aPMEUROvLGaU+GLuYkMDuMPhBPqNIaD4hW3YM+vSDrmSOQcr\/b9G2OxbjRhIJVJnq2SrZXvo9S1dPpFZMAZ\/9NJxaw2LU6DpyWpJR0grkLYyZw+0ITgPcuv5NRoP8\/0nGYwHMBrL8dhHMKUqbvANAwWF14\/+XelZy3bK\/8Xe\/oeYCbtzZaK0Rnc87obQcasIKd9j6ZXolbgqThAoCOFd5lUnOv2MxaM4s1zpNj5N4uu\/gBxU2L1bsVddgxEdNp3PZGdFqwsvou1JW+d1w66Ks9GWkd35VQUbwgXO6o\/eknnc9h17ry2iYefO4MlJWa4jNHWP0AAui7YsamG59q6Mh5jxB8hFI7hcS1Efy5XLJCfyxgR088TbR9n3\/AKxi1Xcq2ISMRlemxxFkdseJUxZZPAObIJx8g6zLx2unQDSzmy1tJAwnbhwPAAUtlROQYGY9KiyO7iaGwRS4wOHFqaDpFqH9GxakyhzWgtJ0jUnhQ53Lx3xQ7K\/h977x0lx3neaz7fV1WduyfnGQwwg5wBAiAJkmIUKSpZsiTqKtmWLXu1tuUbVraP1vb11bWvg3x9vMde+3q99h7Lsi1LVqAlihYpkRQJigRJAEQOAwyAyTl17krf\/tGDwYTunoBAgKpHR4eYquqqrzpU\/er93vf9zTI4DS46VaaI6i9AgaoVIRxq\/efZX9\/GHbWfnlluNW9g7NR3UI5CTUcVXAUTSL6iwgTNRuoDPQWTeQFsV2PMXMWn1t2JJiR1dXX09vayJjxCzMgihULO+ijKfZm8zHSn406mxdjJf6Nm5xPowXIAJnNdPNf9X2c6714pQ54yu3m+54s83PLfllxam7bHGUwfW9K2T136HLtrP8268neW3E4IwaaKejZV1M8sG0zV8lLfHxfwKtPwaVG2XrRFzgAAIABJREFUVH5wzvI1ZffTGr2PjsnvcWnqRSbNbhZ\/6lcMp0\/fFPETz\/Vxauxb9CZfx1FmSUsHIRXBmtMFxc8VuvrjbFtfcyOGek1o019O14wxduoTVKz\/FtKXAhQoiZAOKr6Lj+79z8v2yloJDeGdSxI+NYFN3N\/8BQxtaV3NS7GmuYxPvm8Th04NcbFnEqWgqS7Cvm0NS+5c39UfZ3P7W5+T5lEYT\/zcophOilcH\/pyklQIcEIXrpDUlCKnC0xICHSPZznAohWMsvbYpH0lZelimPVpFW6yGr9h7eJwDRbfzNQ+R7WikORXHlYsLMQ1BzBfgvau20xKpYFWkYkGn5\/117ZyfGinqIF\/li6MJaybSMh8Xh4uTz88RP0a4irq9P0t2\/DKJrtewM+NIATW4\/DpxlGVw2PWTFukFH0m+nF3jfav\/A9ur8rYUa9euZXLoMjGjeD7UfJRrk+g5RMX6\/M3zyPDfF7UccFSOQ8N\/x2Otf1j4JOfRm3h9ut5tcVxl8ebw3xM16qkPl3aHn099eDsPNP8Wh4f\/PxJmP2I6WtUY3s2eul8goJfN2V4pxXjuAkJI2svfyWDqGH2pNxY9jiZu7A04ZY1weOjv6EsdXtbrRLGHAABFyenat5L2VeWcOD+KZeejHiPHfgkj0o8eGkE5PpzEWu7e1nZThA8wJ6pdDF0EWV\/5+HURPleoLAvy6P7VC5YPjhYwfC2AYdyaOV0eeTzxc4uhlOLM+JOcHPsGjjLRBGyMHUFxlDPxvYybc6dC2nK+RS8NBe6tJZFCLOvC\/GDjBqQQPLHuAf7mfA+\/FPsGUrj4piMjjgIXwXNaE0c2beazZzpoTca5FCnDkYVvwoYQPNS4kXev2kpAL14xsrOqmX\/zBxnNJHHmPYnrQlIXFEhkyedGW2WxXYuxbAaFoiYQRZOSYFUbAJMdP5yJAAmRvxjvmNrBsbJj5GQOZ7oDrCYCaNLHw6t+l3L\/1b5HkUiE9U0B3MnlfBCKzFgnFTxCzkkwkjlbcuvJXBdpa2xJ\/WwsN42zDONQR5mcHPv6ssUPQG1oM4+v\/p+krFFMJ0XYqMKnRRZslzSHeLHvD0lbo\/nyeSFwF2m+mEfgqBxZe5KAXr7s8S3GZK6LH3T9dkmvq2I42YriKwU01d6axqrNdVHKon7GJzPTDw0CK9mElcz36vH7NLauW1pEw3FNHGVhyNCyLGpmI4QkoJWTdSaLbqNwiRr1RddfK0opzl2e4OCxfsanlvZdWN0Yu2Hj8bh2PPFzi3F+8vucHPvmzFSBEKALB3DYUvYaRyfuJWFf9YxpsYzpOqTirDJ9jBgZ3CVee3QhMRdpfHeF9bE66kL5H\/mWikb09T\/HX19axUZeYl\/oKBKHXsJcoJzT6S30BKr5rR01bJoaI+DYZNFnCSCFAWzF5H3kCNmjizb+06Tk89vfyf86\/RI9qYk5VenrYjV8ZM0Oftz\/46KvVwq6U+v4tVe+iRQCiUATgnc2b+JdLZsJVK5G6D6UOVcs+JSfPZN7mfInSTdVo2Q+0bIpsmdO8z3IP+F3J4dYtdxrv2ujlCLnJJDouCUazmlCJ+vElyR+ynzN6MK\/rBv6SOYcSrkrTiQNG9VFy9JNJ8Wz3b817Sk1LRBndOJiPacUnVPP0Tn1HFWBdTzS8t+RcumXNTMxiJNLYIRr0YMLI1Ev9\/3pioSPUoLkwJ6i62sqQlRXXL8oxfVECMGHH13PN5\/tYDKRw7LzItTQJYYu+dCj6wn4S7\/Ho+lzXDr396QTXaRCkC0PsKHivWyqfP+K8oPWV7ybU9MPhIUIG9VU3IBKsyscONzL0XMj2PbSprzWt1bcstV8Hnk88XML4Sqb46P\/UtTjSOKwJnKa45P3zizTFzSNWUi1s5g8ukqVL0TWtYt6PV3BEBoN4Ri\/vGVursWG8jo27PoYfcm7ebbvC3OSavvS7fnyeQmnKhbmOgjgYdLsEyZCQGbkPNIIU7Zmf8mxxHwBfnPno\/SlJjk\/3eRwY3kddcEYSil8WhTbLnwDO5\/YzkB2NQoXZ9Y99t97TtGfnuLT6+7CqbuPsYuvYwiLqJbI5+tIHSkEa9f\/LL7Y1c7CSikGUkc5M\/4d4mYfhgwSMvYy5lg0KtCLfBCmMOkP9DPiH0ahKLPLaHU2IYQgqJXjLlJ55yh72g9pcRoju\/M3oGVGBNWi7TNXRufU89huhsIDuqJmFx\/sWPY83730a9zV8MsEtHJCeiW6DBQUbMmBk8QvvQyzRL40glRues9Movl49gIZe3xF5ySEwggNk5UWuBoz08jSIlae4MF7K69JTN5oQgGDT75vM33DSTp7JnEdRXN9lPaWcuQiU9ZjJ75B4KWn2WaDEgGkC8mwyxu7vsVQ+gQPNP\/2ggeExdhY8R56E68xZfbMEUACiSZ87G\/4Tys6z6VwvmuCw6eGlvxzqasO8fg7bpwQ87g+eOLnFmIsc750EqWAcmN02rUqf9FMS5eYW+pCkr953JEKciicyU\/\/FLl2aQj21LZSG4zytc7DBQWQQLC5vJ5Hmjeysby+aPM72+2dI3ws18CmdI6AgSIk1Ky8bEWq\/038ZU0EKhd3K28Kl9MUnjv1IYTg7oZf4fme\/7GgTX7SijKYXY0q0M\/IdB2Ojvbwte4JKhwNpcryScmqkrZqaGpZRah2I1K\/ek5KKV4f+mu64z+e8S7KAKOZcdxIFBKbC447qSU4WnYUV7gzRrQZLcOwGEVNbqS9\/CGawnfQk3ydQpVQAkFtcPOCHJpiSKFzX9Pn+VHvHy7ZRb3cv2rZN6ylcmnqRyV9pASSTRUfQErBxckXSTsjRbdN2yO80PN7MwmyEoP28ofZVvUR\/Ho+QpnsP5YXPvNwrQyjx79B9c4n8IVrmDJLV\/QsRqThEL5oH2OnPgHCprLtJQLVx9CkxstDLvpIkG3VT7B2kWTytwohBM11UZrrlj4953S8QeS5p9HnhZnLEpIHfuzj+fsu0BV7mTVl9y9rLPnp5C9yduK7dEz8+3Q0VKMlehfbqp8oam1yLSilePaVLk53ji5Z+IQDOh9\/96YVT\/F53Dw88XMLYavckpL7pHBwlAAEnX6TbZkAepHXacLlXChOt9QXnfaSUvJA43oq\/WEsx+Fbl48iyOf\/SCnwS53PbLyHDeV1pXcEnB57cs7fF5JLyxeJFLjMTHQ8Q\/2+X0As0m+mGCcnNI6M76ctcoKoMYmrJEK4dCa34pZI\/LVclwtamt1maM7yzjFJxZp6IvpcMdeVeHnaEDIvKKbMSi4kt5G088KplTQbcOYU3bm4HC87jiOcuaJU5LsgHx7+O6qD69ld+3MMZ05jOsl5lS8CQ4aX3SenNrSFx1r\/iNcH\/5rR7LmS22rCz9aqjyxr\/8thMQGmcFDCZlv1Jzk7\/tSi+5v9\/rhYXJh8lt7k67yr9Uv4ZJT4peLToAAT535A3e6PY8gQS0n814SP1dF3MJQ+QdIeml4qaYrsZv\/6\/4jYrfNC7xcZy3biKgt7+ituOzmODH+ZjD3Jtuob9\/7eLJRycZ7\/hwXCB\/ICXXMUm84JzlZ8d9niB0CXfrZWfZitVR\/GURYS\/YaKjFeP9XPu8nhB89JiWI7rCZ\/bBE\/83EKU+VoWTUR1lYajNK7cKXsNi0ZLp8rW5wmg6a6jSrA5HWUslMXU4MGG9RwY7MRRDo660sNGoEvJp9bluwyfHO\/nxcELOO7VH\/Lm8kY+veHuJZlvJsxBErO69dquzki2maIhp2k0oLVQXouC7PglgtXLd0key6T42sUjQCVvTt6PIXLo0iLnBOZ0My6IgLRceOVzXZfTp09TW1s7Z\/nJ0W\/O3MjHc7WcnLpz5hhN2LQJZ0G3gTHfGC5u0bfGVTbnJp5iX\/1neVfrlzg2+s90J16dnghSNEf2sbPmk4SN5ZdMl\/mbeWfr7zOQOsqbw19eEOkQSKTQ2VjxXlqidy57\/0ulItBG0hqm2NSWLgJU+PPTCMtJ1L6CwiVrT\/HmyD+wQ3us6HGu4GQmcF2XhvCOJZVYGzLIztpPzCRyu66LnJXI35M4yET2UsGeQI7KcXr826wtfyfBG5CwfVMZvIwwiwtZiaBpUOeIOXrNh7oW1\/alYDsuR04PLTnH5wrh4I0dl8f1wxM\/txAho4ra4GaG0ienPcjnIoXBhLmNOU+jAl4PZWg1DdpzfkIq35hQTt9NFQJHSfanI+y76y5qq6p5sHEDP+w7y7HxXpRSbCqv59HmTTSGyzk4dIl\/uvD61SmvaYF0cryPPzvxHJ\/f\/siiHX9T1jBS6DNTGRknnHdHLlKSP30gHiBDoXQC5VrYmeKVHqX4q9MvzvnbUn4sZ3ZjuRJW6wrCRcJl6XSadDpNKHQ1KpSw+vMvU3AmfscccbVfZAv+2OL6FI50UAqcXDnKMdACU8hpPyGFy3D6NJD\/ftzd8Dn21X0W003ik+HrUm7cEN5Jw5qdZKwJ+lNH6Em+hukkKfe3sr7i8TmVazeCTRXvpz95uOjUlxAazdF9APi1CFmncOPEUigcehIH2ejfvaTtXTuD7guzpepDnBr7ZtHoVJmvhfubvzCngk3Oq2A8N\/H0zDRoMbriL7Ox8r1LGtstSzYForRlsAAChIquv1UYHksv+zW6Jti1afGouMetgSd+bjHuavhVnu36AjknPudmoAs\/VcENvDmxAZiXvCugy2\/R5bdAgabg3Yl5ZZYKLpzroHZ\/NTXBCB9bu4ePMbcaxXRs\/unCGwVzfSzl0pea5LXhy9xT317yHPxaDDUrkVQTNmqRxGwJbBJFnuqljtSX3wnXch1604VFU1BL0BY+xZn43qIeZhqw2iwsLuRM12ZwXJene07iKoEUikmrGnee0GvBLijsJJLM2FoS3Q\/hWBGEcFFKEqw6Q6z1OaRuIuc95WrSIChLlFGvkKBRQXv5w7TP6rx8M6gKrmVz5Qc5Pf7tecmsGprQub\/pN2ee9DdVfmDZLt9XEbi+pT2ZSz1fibW58gMAnBr7JgKJUi4uDn4tzB11n2FV9K5F95WxJ0qud5VFyiqex3TbUF67aFsNR4M1VY\/enPFcA8vtwaRJQUUssOQWAB5vPZ74ucUI6uU8vvp\/cmHyh1yYena6N0oNGyveR2vsHo5PvsiEWdxXCiBYJFoxMTGBZVkYRuEbwNGx3pITU6br8FzfuUXFT7m\/Fb9ehm3lvY2CWgqfzJF1i3\/dqnGIFrtyKkWgqvQxCzGUiRdc7pdpdle8iC4sGoKXGMisXjAFpimot3TKncLCyHVdgsEgrnL5i1M\/4kJ8hPWReqr9\/eSc0IK6qGLPwpnhbUwNb0C5+c9kxpV+dDNmspG6bV+lNXZvkVe\/fdha\/WFqQps4PfZtxrIXkEKnJbKPjZXvJ+q72r9lffm7OTbyVVyKJ0gXQymHcPVGchcPU8pCQw9WzkRvhBBsqfogGyoeZyB1DMvNUOZrpjLQvuTcjrBeTdIq5QXnI+K7\/SMGoqIOUdWIGuoqeB1xpKJrtca6iltf\/NRWhnCLdUadhRQgNcnWtdXct7sJXbs1q\/c8FuKJn1sQnxZmc9VPsbnqpxase6JtN1888nTJ12\/MFfZiEkJg23ZR8TOeSy9wR5\/PpLl4OFgIwd66X+JA35dwVL5svT1ygjPxPQXzbAwpeYwrQkXM25dLqH47mm\/5oXI5Pfk3\/xLWGjqHJmyEgLWREwS1FF2pDTjTFiFSuGwzfTTN80ybfX5NTU1IqfHc6QskzmrUO43EY\/upXPNtfDKLEGrOgU\/jY6\/KzSl1t13B6aFNqELTgUrHyZWRHt7B2nU3NxLzVlEX2kJdaEvJbY6P\/suKhA9ATWgjASNGrO0+4hdfLLpdxcbHFizTZWDFeU\/rK9\/NWP+Fov2CFIrV0beHwJXv+gzuV\/8AZWbm\/HIcqchGfLQ+8kUM7daf9vIZGpvbqznVOYrjLBRBmhTs3VbPprYqomGfJ3puQ7xP7DajPlTGGgEFkzYVVNqSBruwuBFC4PcXnz4q8wUwFsnniRmlTS6v0BDewX1Nv0HYqEUXfhpDU2yInkQTDn6poQtJQNMJaDo\/V9PF3VVfx2cMADYCEyFMppTDGX2Yk+oiI5mltZSfTX0oRkBb+F7UBnry\/lrZSoIDD7Cx\/y4enargXtNmX\/AU91U+w\/7wJQLSWZC\/IaUkHA6zdt0Gvvr0GY4fmSScDhPKBQmOtDHR8UFi2uQCS9iDKrAg+tOfqqBk8q1r4Iw+MFOi7QFnJv5tRa\/ThJ9dNT8LQKRhK2VrH0LIud8N6YtQvfMJjNDS+iUtlabwHdQENxa04dCEj+3VH3vbfMaiqhH5qd9FbLoLpI4SAtfng90PE\/2ZPyMQun0iXA\/sa6GhOoyhX70GCEDXJJvaq7h7RyMVsYAnfG5ThFrG3OaePXvUoUOHbuBwPErhKpe\/PvEcp6eGseZVdglgsylpy0QolMArpWTVqlVs3bp1wborZG2Lz7\/2raLRH5\/U+PCa3dzfuHQHcaUUk7luck6csFGDX6vmxHg\/U2aGCn+IrWURjMvvgumEUNuJkrDq+MfUPs7a9WjCRSFw8bOhvI7PbLyHkL70JN8X+s\/xtc7DsySG4v6aJzGSqwgM3Zc3apz1DKCEjVV+kjafSZXVQjq2i96hKUzTxOfzsWbNGlatWsW\/v9zFxd7Jgk+FrjQZW32MCaJzzGGbsfm4SKIJ8KE4N1nHsdGWojlHAD5D8qsfX1qS7k8CXz239JJwgYZAI+Kr4a76X6EquPB7a6XGcHJJ9HAVun+h7cb1wlU2J0e\/Scfk07jKQeES1CvYUf1xWmP33LDjvpUo5YJtge67bcu\/lVJc7o9z7OwwqYxFRSzAzk21NNbcuO+Kx\/VFCHFYKbWg3bo37XUb8aP+Dk7HR+cJH8gXJSuUbmIIB1vJOTddKSWhUIiNGzeW3H9AN\/jwml1889KbC5KedSGpCUS4u255nUuFEFQE5jYovKNmVvVQ+ggIY0b8aDLB\/5N+Pz12HTb6TE8UcDk3OcSfHn+O39r1GHKJnXEfaFjPeDbND\/vO4k5Xdll2lOjQfQi18OsvlI4xuRVZfgldU6xe1cSGrXtIWln6U1OknX5OjH6HAWsQ4W\/FyVRj6w6aK9Gd6Wkz10ekdxvjzd35fQI+qTOoJD+s2MyHq2rR0mP4ZRwm3HwWaBFCAa90drkEtUrubfo8ppMkZFSVrFYzwlUY4cUtQa4VKXS213yUrdUfIm2NIYRGSK+6bUXBUhBCgrH8QoVbCSEEa5rKWNO0tAaiHrcPnvi5TVBKcaDnJNtUFgPFIBpd6FyJ8jgIzkmdR6ODJM0YY3Y5Gdsh6PfTvnoNa9asQdcX\/7gfaFxPSPfxrctHSVk5pBA4SrG3ppWPtt2Bbwl9fpaFMJjdReyctYp+uwa7wFfTVi4jmQRvdh1ldXoA185ihGuING5HDxbukSKE4ENtu3ioaQMvD16gJzlJOHk\/JaeblCSZqqe2PIMVrODvzxzgzHgnW8peIajHESiMRj9dsRRjZgPC1VAC\/Dk\/tWO1BHMBAqY\/X3knBL++4xHEtHgMz7oZ7Gt1OXLpKKZTOPlW1wS7N98+0wS3Cqui+6kuEOW5FZBCf1skN3t43O544uc2QLkOYxde4NP2EK7IJ2o5QBrJV1WEkelpEx3FkBAMR+CgSpN1LBRJNmZ1PpCpoikYY3BwkHQ6jd\/vp7GxsWDy877a1eytaWUoE8d0HWoD0ZLO6td0br71ZHOrsMwgQtq8kltDThU\/Vs61OdB7ggaRzwGyEkOkh08TbdlHtLn49FCFP8T7WrcD8ObRKH2qr+i2AknG8RNo3cmXjv2AsWyCXRUvEtRSSKEwXR9HJu\/HdP2ARE03QswGsvQ09NA80EwwF8AnNR5ftYU1scINCHVN8shdrTz7ymXsedNnQkAs4mfL2lu3dNZVDqBWZFS5UupC2xlKHy+5ze66n71Jo\/Hw8Lhd8cTPdaA7Oc4L\/R0MZRKU+4Lc37CO9WW11y2kPdn5I8yxzjmVQjpgKJdPiwR\/pWIkkSjgOYKMWwp7VkXM6clBzh97ln3pEDWOgeM4aJrGqVOn2LBhA+3tC8vIhRDUh25sqNeMDzJ25nvg3otyFeAy7kZZrBN0Zk5fQgWuQ6LnDYxIDYHylkWP6\/ctHor3h8o45mhM5NKUG\/34ZQY5XYp\/ObkRy\/VRqF5AScVg7SANI3XsqWmlMz7K\/3XiebZUNLC\/rp2wMTdfaWNbFfGUyctH5ooxpSCezDEwkmRVw62VDDucPs3x0a8xkjkDQNRoYEvVh1gdu++GT+M81PI7\/GvHz2CrTMH1d9b98g09voeHx9sDL039GlBK8dULb\/Anx37AwaFLdMZHODzazV+eepH\/+9SPsBcpG18KTi5JZuQ8uAttH6TIR3v2iXwJrQNMoGEXEA+WcnnDn8J28vtxHAfXdeno6KC7u\/uax7lc7GycsVPfQdlZ1IzbqkYTLlqJKSkNRWMhCwzXJtH9xpKO3dTUhKYVz7PRNI3V7Rt4YeA8putQF+hBl\/nPUikYzLYWNEO9gqVZ9DT0cXi0m5MT\/ZyZHOQ7Xcf5whtPcm5yaM622ZzNa8cHCu7HdhT\/9vwFsrkC5\/sWcXrsSZ7r+SIjmdPkpw4VCaufN4b+hkNDf3tTxvCR9f9AW9nDzBbJQVnFu1r\/hLbyB2\/KGDw8PG5vvMjPNXBgsJNXBi9SlROszQWJuBqOUPQZFl3uCN+89CYfbV+QZL4ssuOX83MgRfSAIWC7MjlAEANIl4iaOEIxojvU2lc\/dsdxOHfuHC0tLTc1+TLZ9yaqgKDbLXK8rIqX0wtgryjc58VKDhVcPp+ysjIqKysZGxvDdefm2wghCAQCNDQ0kOp9HQBtVufpvDRb5JlBgBKK3Kzzu5JA\/penXuT39r6PMl++g\/DJC6MljROVym+zZ0t98Y1uMEopBkdTPH\/8AJPJHFrwHYTrjqIHrnbPdlSOC1PPMpg+xo6aT9ASueuGfp\/urP8sd9Z\/9obt38PD4+2NF\/lZIUopnu4+yeaUwc5MkHI3byzqV5JW08c9U0GO9l4k51zbU7tyLaZDI0UxgH1kC1SBzdsXkJYL92VaFolE4hpGuXyyY50UUnRRoXg3afTpqMJVFDqKx0hTLpZnNliIPXv20NDQgJQSTdPQNA0pJRUVFezfvx9N06j0hwGYsqpxVP6nInEQi5ldlvgYXOXy4sD5mb+7B+LYRRKeIW+w2D1QuFP1zcBxXb77o06+\/sxphnqryE22kx64g5FjP0+iZ2GJdtIa4uDAX\/Lm8EotKDw8PDxuPJ74WSFJK0c4ZdFgGfPc1EFDoAO7UgF6kuPXdBzbTC0qfnwoHpFZ\/Iu4VQvAV8Bjy1bujE\/VzUK5xc9plzT5OAnKZ4kMCXyMJHtk8e6+\/rKmJR9f0zR27drFQw89xLZt29i6dSvveMc72L9\/\/0wjyEeaN+KTGv2Z1VxRNEJAXaAbUcK8sRSWcjkxfjW\/R5OL\/wSXss2N4sChPi73TeE4kquXCx2UQXJgH5nRhe0T8lGgHzKa6bipY\/Xw8PBYKp74WSFCCNbkfAuEz8x6BD5XMNVzjuEj\/8TAwf+XocP\/SLL\/OK5TxMBzHoneI6QHTi663ZVE6DvIlcyXAai1Csx0KkU4HF7SmK4XRqRwBdQVGoVDZNa5uAjSQuAUe7+lTqRl77LHEQgEaG5upqWlhUhkbuOyO6pbWBurARHmTHw3jtJwlWB1+Cy6sCjlD1Waq+ewYU3lnA6y8zF0ycY117fj8FKxLIfjHSMLKtFmcH0kegvbMjjK5Oz4d2\/g6Dw8PDxWjid+VkhY9xF1S799ApDDXdiZSZRj4mSniHe9yuixf8W1S\/sTuXaWRPfroEpFGASzb6R3ihx5S80CXjQKNmb9C8Sag6LfKO73daOINu9GyMIpZ66COJLeeUnF31MhtHDt3NcJDYRGrO0+\/LGG6zpGKSS\/uuUB3tOylazTzrGJBxnJtqBJyb6qN4jqcUr2CyqAITR2VF6NUK1bVU7Ap1EoPUYI8Ps01q4q3MPoRjM0lmaxoJOTK8e1C3XcVkyaPTdkXB4eHh7XipfwvEKEEEipQYl8DQB9fmWSa2Nnp5i6dICKEoaVmdFOhBAlk2Gl9BFb+w7il15GOTYhIfhFJ8WTIka3KzCkhqvyibetOYNV5tyblI0iJV3OhU3OTA6yueL6iodS+MtbCDfuJNl\/FOVerU8zFVgIvqrm2nQYKNZrkoYdH5ru7XMG18piRGoI1W1ekfHpUtCk5PFVW3isZTNpO4cutJmeR0OZOH9z5gCD6QSaEPmOtkohpSRjmwVlkRSCdzRcbcCnaZKPPr6Rf33mHOmsjWXnv0+GLgkFdD782Aa0t8g7aHmybiE+eXOjiR4eHh5LxRM\/KyQ93EG1PsmoEy3o\/H2FqF6gH4lyyYyep2zNfcgiPlWumS5YDTWHbJLAxQ6C+z6NlRzCtU1qguX8ZiDGeC7FYDqOX9N5eeACh0a6ycoMbTkfQSXJCcUlv0mfYeEq+KvTL\/Hp9XfPtZ64wYRX7eXb48O0pAaox8ZCcFT5OIKfLAJt2gPeRbCXLD\/VtBUhBL5YPb7Yza1+kkIQmWfqWheM8Tu738NAeoqBdJygZrC+rJYJM82fHPsBGceaSXj3SQ0pBJ\/b8iAx39z9xCJ+fv6nt9HVH6erP5\/c3NoYo7UxtmjFVMLM8oO+MxwY6MRyHaoCYT7StputlY3XfM51VSFct7QE0nxxhLYwiqkLP+vKH73mMXh4eHjcCDzxswJykz1Mdj5PQwAmc5Hp1Ne5NykbRY8vR4MUNBfYhxAaTnYKWST3RQtEEVJfKICUwhdP4J+YQpomauo0tO\/EVz33KJX+8Ey10qpIJQk7x+mJQfp96YLHs1yHr5x\/jR1VTeiLOLtfL46O9nI4neEVVdwk8AMkaRM2PiGI1G26KeNaLg2hMhpmNYSsDkT4H3vfz5utStW+AAAgAElEQVRjvRwe6cZRLpsrGrirdg1B3aA3OcGTl4\/Rk5rAr+k83LiBu+vaWN1UxupleAgNpKb4\/Tf\/HXtWQvxgJs5fnPoRa2M1\/PqOd17TefkMja3rqjl5frRg3o+QJpHmlxdM2Ql0gnolq6J3X9PxPTw8PG4UnvhZAfGug+A6+CSsjw3SmazBdjWuNB5WQJfPpDOQZXexqJByEVrxPJtAVRtTnS\/OWSZNk4oz55GmhXDdmT2rf\/591Md\/G1FdSGaBITV+dcsD\/OZr32bSLNwZF0ChODkxwM6qwvu5JpSC7AnIHMZ1bEza6b84wGfVFGGR75xjASfx8YoKMIGGRJEUEp8ALRBDD9xanY5LoUuNvTWt7K2Za+r6tc7DPN9\/bs6yf+48xLcvH+N373gPFf6lTd8ppfjjY8\/OET6zuRAf4Z\/Pv87H1+1b2QlMc\/+eFqYSJr1DiZkpOXBAuoTqjhCsPr3gNTXB9dzb+H+gycJRTQ8PD4+3Gk\/8LBPXNrFSozN\/BzWLLbF+Uo6fjGMgUQT0DIdEGBuNmkLdiAGhB9ACxZ\/ypeYj1vYOps4\/P62oFBVnzqNlcyjgcjhGWtOpy6WpzmVxv\/4l5C\/8EaLEzTNtl64yc5TLRK5wZOiasIag71dRVg+4JgKFD8mj4SrG44+hppsaasBuZbJNmPyjitKLzpSSIKBs7UPXf1w3mdeGLy0QPlfIOBZ\/fPRZ\/ujODyxpX+emhsgsUjX40uAFPrZ27zU1G9Q0yQceXkv\/cJLXz3TSP3ERLThCqO5NjNDYgu0lBnc3\/Bp+\/fYRqh4eHj95eOJnmSjlMH+KSwiI6Dkieg6ArAKfcnmIHJEi9x3XyhC\/\/CqRxu1o\/sLTPuG6TYiTr5Jwx9FyOaRpcbiiln9tXY8pNYRSOFLSnE7wc13nqT39CmLXI0XHHtX9TORs3CJjkkJS7guilMvQ8KtcSrxIlhTl4bWsr34vYaN0eXrhEzWh59MoeyjfG2f62AIHnzFKdflTjEx8iCsrpAA\/8CkSvIGPahRauJZA2bXnsLzVfOPimyXXT5hpLsVHWRNb3Mz00MjiliQK6EqOszpatdQhFkQIQVNdlPdUr+PbnV\/CVcVFly59BPS3pjrNw8PDY6l44meZSD2A1Axcu3gJug7sFTk2FYn6AKAcUv1vkho4Tmz13UQad8xZbWfjpAZOkIvpiHGFEU\/yemUtX121EWueL9XlUIw\/3rCT3+44QtUs8RM3swxm4ripLJM9A+wf0VBEyQrFBX+Oyz5rjo4TwDpD8vzJ\/8SoMYSLCwKGps7TMfUMW6o+xNaajyzn7YLkc+BMFmwKKISLJhP4jT5y1typNgPYj5lXlnYaOzOJHrx9b6pKKeJWdtHtDg5fWpL4cRdpfHmFqRLTnMvFp4VZFb2b7sSrBQWQJnysr3gPUtycnDGPn2yUUrjYaOLmtunweHvgiZ9lIoQg3LiTRO+hgmajtoIUgk3YBXu3LEA5xLsOogcrCFTkK63SoxeYPP9cvrOzciESwgz6+TqVWKKQk7gkB3w\/GuUT5CuA\/uH8a5yeGKDONtiR9CHJN14UCIJKsCkboMbWeSOUAZHPC\/pk61aOXvozRv1DuLMsJJRQKBxOjX2LWKB5eYms8adAFZ9KE8Im6L+wQPxcfe8UTi7F6IlvUXvHp5Al8qRuZZZaNu6U6m0wi3vq2\/nx0MVFt6sLXt\/ppz21v8BE9jJJawhH5WaW68JPVXA9W6o+eF2P5+Exn3iun0NDf8tQ5iSgkOisjr2DO2p\/Hl3zv9XD87hN8JocroBI8y78ZU0IufBGrAsoE2ppwucKrk2iJ2+iaWem8sLHtefYWlyW\/qLTVQCOlLwWLSNjm\/zh0Wc4NdGP47psTRpo06JnzjgRVNs6LY6PmkCEX9x4D+25YfoCPbgF\/L8AXGFzfOSrSzolpRSO46Cc0pEHIUCIxTpeK5Rj5d3tb1OkyPddWozdVS1L2l97rAbfIhGWqOGnPnR9xY+hhXis9Q\/ZU\/cLlPtXE9AqqAqs4876X+aB5t9CCu95yuPGMZ7p5OnL\/5mhzAmuPFK42FyMP8+TF\/83LGfx6KqHB3iRnxUhhKRy03vIjl0k1X8MOzuJY2VQarrn8gryS63EEEopkv3HoIDvVSm39ivkgBf6O4hbWRylqLf1oj2IXBQDhsWU5mBZOb7WeZhN7gBa1EDouYKvgbxxpeWkMbTCidWO49DZ2cmlS5ewbRv4IHWhTWyofpaof2ThOFwd0168Z49ybTIj5wjXb15021uVBxvW82zfmaLrA5rB5sqlN5r8jZ2P8ftvPl1wnUDwuS0PLHeIS0KTPtrKHqSt7MEbsn8Pj0IopXih9\/dRRWxlLDfFgf4v8VDLf73JI\/O4HfEiPytECEGwup3wusfpldtJWv7p5de239xUL4U8oypwUYsIoJgR4MDgBSw3n18TdiWFYgMuioPhNCeCWeLCIeNYjOVSHLQiHJx8ANMtHTpWRSZxHMfh1Vdf5cKFC1iWhVIKpQSDqQ283P1ZJjIFjEcFpLPrSx5v5riLNX28xfmp1dupC0TnLpye5pIIPr+9eLJ6IVoi5fzBnvfTEq6Yuzxcwe\/sfpzWa0x09vC4lRjLnsd0kyW3GUqfwCmRkO\/hcQUv8nMNZDIZDhw4gLRT1MdM5DKEj1JzhZIWqkYplbdIKEAjDlFcxgvKmXzOzkONG\/j33lMzyyyRf0aav8dOX44JzVkwjWYjcdwAZ+O72V7+asHjBGUFhiwc9enq6iIej+MuiFxJHOXnyMB\/4KE1f4oQoJRAoTEx9QhKLWGeXkj8ZTeg\/9BNIutY\/PmJFxjKJvILpkVP2Lb4eG8nG7fcRzi09AaHV6gKRvjt3Y9juQ5p2ySgGfg172ft8fZjNNOxpO0SuUHKA0ubPvb4ycW7Sl4DZ8+exTRNqn1Ln2e+ks86mgsT1PKCaSBbQXwiiOp7muYI1BhigTmpEPDTpPiyimLPWyvIG63eWbuag8OXGMzE8bmCJtNYIJUUios+q2j+kEIyadaQcwL4tbnnJZXG1ponivaNuXjxYgHhc5WcE2E4uYGyYD895mq+k97LkFNFo2HwQCRCbby7uJGrEIQbthbd963M2YkB\/uLUi3MbEk6\/hynd4Csta\/mDV7+D23sO+f5fKSqAS2FIjTJf8HoN2cPjlsOnLc0rTi7mxuvhgSd+VozjOAwMDCx5+yuiJ2n7uZyqwlSz\/dWv\/mswFaQqBoW8LJuEwy8S50CkjZOJsRkBpICUleN3Dn2XbZWNTGZT7E8GCaqFic4Am3J+joWKCzYpFBmrDL\/MTjdYFEgEbdH7C+Z5TObSxK0s2WxpEegqgwODn+BHkRSuzDvKA8Qtm86pBO+pXM2WiQ5QoE3LNhcXhWKiGhp8xW0wblVeG77MlzsO4hQrTReCrKbz\/eoGPtB9BtVxCLHh2roye3i8HVkV3c9rg39VchtN+IgaN8+g2eP2xRM\/K8Syrs4rJ+xAiS3zwidp++hM1uFOT0IVmyGzlcb5ZB1rI8NI4S6YSqsRLm2pPs7JMKZ7NUpiTd9cT00M0Kj8+KcFy3wEgibLoMPNkZGFc3c04WeTuAPbfhNT5oj5mthY\/wTVkY2Yjk3WsQjpPgYzcf75wht0JcbRpcYDBDBK5CUpFOf8WSyh5i0H03X4ztgI\/dHzbHaCVOfyDRUnjAn6Qr1YyqUiuYeW6J1F93+rkbEt\/vH8a8WFzxWE4KW6Zj7QfxF16PvgiR+PtxEDI0l+eLCLkfF85aehS3ZtqmP\/zoZlRWl06ac1eh9diQMAKFcjM7YBM9GCEA6Big7aa3cyPpXjRMcIk4kcZVE\/29fXUFXuRUU95uKJnxViGFfL3HOuQcr2EdZzBfN+XAS9mcoZ4TMbJRyc4ABK2shcOZpVTtrxc2KqmRp\/nObQ5NztFTynfJgFmgZCXkSMqBxbKW5zIYBNGT9HQ9mC01+61Lhv28+iiU8DeduLF\/s7eOrEN0jZZr6iDYGalfpsOy49Pkmr6UMrIoAU0G\/YRZWfoyQdmTaCFa9wKXxpwYtPjz95W4mfQyNdS942q+mYUuKbHL6BI\/LwuLmcuzTO916a24\/Ksl1ePzHAhe4Jfub9m5clgO5u+Bw5J0H38BDjZz4CSqJcP+CSHtrB+Fmdw+IUCmaqb090jLB5bTUP37nqmqxePN5eeJOjK0TTNOrrr5ZoX0zVkHUMHHX1x+UqcJWgO1VJxpmb1KtQ5MpPkmz7FzL1L5GtfYX0qqdItTyFqydQCEZz8yqDgDEkuUWqvrLKKVKPlUciaLANHk5ECM1TPz6p8VOtO9Cm804s1+GPjz7L1y4eIWWb02NnejJqLhf8Jo5QuEWOPqoVt9bII0jYFUXXxs2+Ui++5RjMxOdE5xbjz7fuI15fQ2a08waOysPj5uC6Lk8fKN6Ic3wqy8FjS08dgHyV7fbof2Hs5KdQTnBa+ED+VpZ\/lnfV1TQDBdiO4uT5UY6cHlr+SXi8bfHEzzWwadOmmQiQozTOJhq4lKxhPBdiygowboYYyMQQAuS88nWz4iRm1TGQNmhW\/v\/SwfWPk1r1PVwtQw74cyfGS66fzLSocmDRdsFVrr6IPMoLIJ8S3J0Mz+xPIHhf6zbub1w3s92Tl4\/RlRxf0vuRk4oD4RSTmlOwHD6tLd69WIriU0SauL1cwqOGH32pyctC0OMPcba2jolz32fgtb\/FNm+AyayHx03iyJlhFmtYfuTM8gXJC693UzxxoDCuq3jlaD+uu9Re6x5vdzzxcw0Eg0Huu+8+amtrkVKi6wZJN0zO30BZQFHuz1IfnKIlNM728l7q\/FOAQgkLs3Ja+MxHKBAWZvlpNARbkzF+rIL8lYox6QqSqTLcRX74NZZWtLnhbK4IoFpbRxeSL+x8jEebrzYRtFyHlwaW11U5rSl+HElzwWcuEEC1VulZVoFLjb9wdEeisTp237LG8lazr2b1sra3gKPkn2SVnWP09S\/jnngJ1fEGyvQ613rcXvQNle7JA2BaS\/Oom83gaGolw8GyXV47sbxIk8fbFy\/n5xoJhULs27cP0zTJZrNIO0Hi3FMox86\/uQKuhFbqg1O4CPqNMVASiuTtIF3s2AUCY3cQdSVt2QDngln+VUW5w4qxSmbo8hcuV5cKyuylG0vqCFoI8pkd99AarZyzbiSTXLIn1XzO+3O0m745EiykJHWWzpBRePpLU5LWQOGLkyb9bKx47wpH89ZQGQhzb307rwxdXOL0l5jTydtVNuYr38SwbHBdxF3vRex9t5e34HFb4DMWf7ZeyTf5Wr79B4\/1I4C7djRew1483g54kZ\/rhM\/nIxaLke47hFukE7EmFI2BSdByUGJ6B0DJfDWZhmC16QMlGEQjK1w25QKUOxrzZ5E0BZW2RoW7PFfte+raFggfAF1KFo1bFxw8VDt6wWqznZkAbcpGRyFR+bJ2BT5XcZdpUTW+B4GOLgJI4UMXAcJGLY+s+u+EjNuvY\/FH2\/fwaPMm\/FIvmgh+BQ1F\/TxBbEZDYGbBNlEHn0IdeuZGDtfD47qxZ+vitjW1VcULM4rR0rByvzql4LXjAyTT5or34fH2wIv8XEdGR0expnpLWlwoIGZHyKrSN0JhXe1pIwFDCVyhSAmXKqVzdyrEkG5z0W+SFS5BV9Jm+qgr4edVCE3TqK2tLbiuJhAhYgSYKJV7Mr\/b4vR4N2YWdm22UdQGJ9inJxlTktPKR28uQlWkA3\/ZWRAuCRQ6Plqid1Lpb6c80EpNcONtG+2QQvC+1u081ryZI6Pd\/MP514uWvgvgDjHLV00I5pQP2ibq4HdQOx9CGLdX\/pPHTx41FSEqywKMTxWfsn3k7tZl7\/fe3U10dk+uOCoNcKZzjL3bvH5AP8l44uc64bouRw4fYssiTUg1XceXqUC4PpRWxKvK1fFPXO1mLABHKIQCW1z1gmqwDRrshc7yeaYjK1CwxB7ylROBQIDq6uqZZRO5NC\/0n+P1kS5s16HMCE4bpS68YUsFbTmDjbl8n6MpzaHDbzJk2JwL5lif9RNz88ce0xz8gTirfUkcBeUoapIxRM1BnHAfyKsRD5sMXYkfE9QrWB96V5Hzu73waTp31bWRsHJ8p+v4gmkwA8VjpInN6oEkXBc9OU94CgE9Z6Btx80YtofHNfHJ927mH586vUAACQHvub+NuqqldW2eTWVZkMfuWc33f3x5RWNyXMVUsrh5s8dPBp74uU4MDw\/jKrCUhk8Uz+8QysV0\/QQHHyDd9CwIJ5\/kfAVXQ8vUoifagHxJvI0i4Eqy0qXKWdpHJlE0BCfQhWLcDOMqgYMk6+QjBpqm4fP5uOuuu2aiKt3Jcf70+HPYrjNjxZCwcsjpWJICdAVBR2IKRbvpo928GuEpd3R2pzU6\/Tk6AiaDhj0TGao3DH7Fr5NM+hg3g4zmomQDIzjh\/jnCZ+ZtUBZnJ56ivfwRIkbhyNTtyDubN9EULud73Se5GB8BFKuwuV9kWS1miWGlELaNL56YuwMFysxeU96Dh8fNQtclP\/eBrYxMpDl8ahDLcmmqi7JzY82C\/j5KKQZGU5y9OEY251BbFWLL2mqC\/oXXvM1rqxmdzHDo1PKrxTQpiEWW4Cfo8bbGEz\/XiUQigW3bDGVjNAYn0cTCoKyrwB+twZwy0LI1hLrfi1l1FDvcDcJF2GF8E1swpjYgZjpBC3TgvmSYbp\/JlSJ2Xdg4SqKKRHUUgipfGl26VPnz1RFK+unXtiM1jcbGRurq6mYuQK5y+YuTPyLrLHREdlGEXcndZgx\/zpkeFwWn13QEa3N++g2bpObi0zQihp\/\/svMxynxBeo8cYbC\/DxBYZWdBlHBqV4qLky+wveajxbe5Ddlc0cDminzIfez098hNXJ67geMgXEXF2QsL32HlIqq8ZE2P24uaihDvuret6HrLdnjyuQsMjKZw7HynsAvdE7zyZh+P3bOGDWsW5iSGgwaaFDgrKF\/f3H775Q96XF888XOd0HUdKSUjuSgxI0NEz80RQK7KdzA+PhjA5\/ORyWTQrDKCg\/cD+QhPsVwdOd1Puc3MR20MYbMh2s+FZD05V18ggCQu9YEpdOkuWL5j82p8kYWRlJPjA+SKJGoHXcG9yRC6cgomMRca7y7HR20gxQbS+FQSu\/N5zKbdtLe3MzDYh3LBNRIlSzdcbJLW27sxWdXm95Ae7iDRfRAnl0TYNqGBIUJDI0hnfkRMQHktosZzrPZ4e\/H9ly\/TP5LEca5eM+3pfz\/z48uUx\/wLpsjaWsp5+c3lNT7VdcmeLfVEQl7O3E86nvi5TjQ0NHDmzBlA0JmspdKXotYfxy9tHCSjuQgjuSiOUkBmwesXS1Kevb4uMIUuFRtig\/SkK5kwQzNrpVA0BCapCRTosSEEyi5c5dCdHCfnFBY\/mzIB9CJeYYWIaFl2+UeQLqDyT3G58cvkJnuJrdpH+6Ymzp\/uRtghUONFBZBEI2zULOmYtzOh2vWEatcDoFwH98k\/BzHOnFYIUgPDj3zf\/\/7WDNLD4waRSJlc7JksGsGxHZfXjg\/w\/gfXkrJGyNqTBPVKKmJVrG4s43L\/1BzRVIygX+fe3U1sW399rylquiL2di3K+EnlthE\/pmnS09NDb28vrutSWVlJW1sb0ehCC4i3gkAgQHNzM319fTiOw7gZYdy8\/i7k\/upyqpye6ViPYnV4jObgOFnXQKIIalbRajPlOujB8oLrDE1DE3JBYrOmoN4uXLZeCIGiPTKS79Q8\/3rk2sS7X6d920\/Tu\/EZcmMhHKXl854K7kzSXvbQko77dkFIDfmB\/4g6\/eN8WfvUKBg+2LwfuecxRKS4\/YeHx+1Iz2Acucj0Ve9kB890\/R2TuS40YeAoi0p\/G\/fc9RncV2L0DMZRWhwtNICTrsMxY2jTU\/rN9VH2baunuS563QSKUooT50d54+QgU4kcUgramsu4e2cjNRXLL9\/3uPncFuInkUjwyiuv4DgOrpu\/OadSKfr6+tiyZQstLS2Mjo6SyWQIBALU1CxMppuN7TocGe3h+f5zTJkZqvxhHm7ayI6qJuRS7QgKsG3bNjRNo6urCyEEruvOPBVcK0pB3PJxsddmc707J1qiS0VELta3QuCLNaD5CwuynVXNfLfrBPMfoHxKLKuktNxIU+oVrmNz8dizbFn7M5zzfZmBdOGyb034WVv+KBFf3TKO\/vZASInYeh9svb06Wnt4rAR3kSbPemiIsg3\/xHg2n4\/oqvx\/R7PneK73\/2T7ro8hxr9Pxpk2BRYS5fio9u3inpZfJOy\/vg\/ISim++6NOLvfFsR13+hwUnd2TXO6L88FH1tJSv\/JeRB43B7Gcm\/OePXvUoUOHbuBwFqKU4rnnniObLdwrQggxI3SUUjP\/3rZtG42NjYyOjhKPx9F1nbq6OoSh86fHf8hAOo45K8fFL3XaYtV8bssDM08MK8U0TUZHR+nq6mJsbOya9gVgu4KeeCWWq4GSvH\/1EUL6wsTkKyjF3OiPkEjdT82OJ4qKH4D\/dfolTo33Y82K\/mgKHotHF23Qd4Wm4Dh1gUTJbbKOzrnUKtatW0dNS4Ajw3\/PcOb09NSeQJcBtlZ9iHXl7\/JCyR4eb3Mm4lm+8p1TMzk+86na8hV80f4V7FlQ7m\/lsdY\/QorijV8ty+HMxTHOd0+ilGJ1Uxlb11YTmFdllsnaHDs3zNGzw6SzxQs1An6Nzz6xEym9a9etgBDisFJqz\/zlt3zkZ2RkBMsqdaNXOLMSQ69Eho4dO8aJEydQSuG6LkIITp06xflKQb89NecGD5BzbS7ER3i65xTva9224vHats2lS5dIpVJFBdty6UtUYDk6V8I95yYa2FbVuyChGfLCx1YSpcAQLlL3E6rbRKRpF5qvdDj2Mxvv4e\/OvsKx0Z78voRCEzCuW9TYBiWzk6dxpo9dSrO4SuA4Dh0dHdTXv4MHW34bR1kkzUEEkqivAXENETgPD4\/bh4pYgIbqCH0jiQVRIGkkMMIrLXpQJHL9DKSO0hS5o+AWoxMZvv7MWRxHYdn5g\/cPp3j1aD8\/\/c51NNXmo0YT8Sz\/8vRZLNspKtKu4DiKS31TtLcUTjHwuDW45e8wExMTc8TNUnFdF9u2cRxnRgCZrsNZc2KB8LmC5To833+uaAfexTh16hTf\/\/73OX\/+PP39\/aRSKzPgm03a1sjZV4UPwPmpOiZzQWx37sfnKnARXEjWcnKqhWPxNZgN76RszT2LCh8AQ2p8dvN9\/HLLXnaZkgfI8lGR5P7gCJpwWdROHpg0QyWNVx1XMGbmqzaUUnR1dQGgCYMyfwsxf1Np4ZO7AP2\/AefvhI474PITkHhmZTYcHh4etwTvfaCN8kgAQ7\/62xcCfIE0mijWyHVxHEw6p54ruG4ynuWfvneabM6ZET6QT7C2bJdv\/\/A8mayNUop\/e\/4C2Zy9qPABcFyXibhnRHyrc8uLn1K5O8tBoTjvz7GYrLFdh8ncwmqsxejo6ODSpUsrG1wJTgsWjNlF8nzfZk6NN5K1dZTKC59JM8TZeAMZJ9\/Ay3XdFUWftq5ey+5oC\/eKLG3CJqDbhCIjjGo2Lmrmf1eY\/e+s6yNp+3EL2HeoaXE2bkan\/1ZMTU0tfWDp16D7k5D8Iagc4IDZAYP\/DYZ\/zxNAtyFZe4qxzHkS5uBbPRSPt5BgwOBT79\/Mo\/esprUxRl1ViO3ra\/jgA3cUbIK6VJT6\/9l77\/i6zvtO83nfc87t6CAAAgRJACwgxd5EiuqyilVix0W2E8dOPMlOsklmk8xMEiczO5lJJm038WZ3M\/E6ZRI7ji1bdlxVrEJSEiWxSOwVIAGi93px2znnffePC4AAce\/FBQiSIHUffSh9dE97D+859\/2+vwoJd2bm64SrLVOWmFKa0w29dPWNMTqWyDr20ZASr2du\/RVz3HwWvdurrKyMxsbGeVl\/pnLaF6PFY8\/quVFaJxt6zpGGhoZ5jiwzZhp9qpCcG6ri3FAVUtqsKurj2pszDAO\/3z\/nawoh2LZzDxffukRIjjKA5NvSjx2K4lGCAldSZptUOBZePRGpc5XL4SXUBHvIt+Lo8W0aga0MLoXLcPXVe\/J4Zq+3obUmMdxCuOH7OM5HkDJG0HcOv+8SQrigozDyIoQ+BMF75ny\/OW4+Y3YvR7q+Qnf0DIawUNohaC1hR\/kvUh7YMPsJctx01EAnuvE4zlAPjWIZF8NB3FiU5aMXuCt+Hl\/pEuSup6B287xi9QxDsnZlMWtXTi9ouGRsLd2RM2Rjeb4WJ1pCfkHdjM9\/fOAy9ixWHMfVnLnUj8cy5pS4orRmVXUuK3Oxs+jFT0FBAQUFBQwNDU3G88yVYenS4rFRWbyPflfgvWZHrRXKjibTkE3fjGMGBwcXLKsLktauifNVeaF\/ordEChSKgGWTStVpramsnF81YCklK7Z\/lM73v8WbGEyE9yWkple6FLkGHi1mBEJP2ITOeTrxBkYo698GWjHmeBlzvdPGaRgG1dWZC\/ZprRlu3E+07xxaVQICV+UzHC5iNLqZJYU\/QMp4UgANfjUnfm4DIs4AL1\/5HRLuGBo1mb0zkmjnQNufcF\/Vb7M0mOtdtlhQgz3o5\/8PGB1gSObzfMFHSWBhSxPIo8PazCHPJp7pfZHqF74C6\/ciH\/6Z605WGAnH6egdo1Q\/S7\/4UxwdZeoP4cRPbrrLKNci0r2Vpu6t7JrSw3RgOMrAcHbW\/YHhGPuPtE6zbmfCNCRb15Xh9y36qfUDz23xDe3cuZPDhw8zODg4y54TdobpKDR+JRgzZnmANayMW1y+fJn169ejtSLc9j7hjhNoZYPWmIFi8lfswVe0fPKweHzhmuQZhsH69eupqqpKZq8ZBn\/13cPoMZGyEKIUgrLAzBdZSsmGDRswzfl\/xf5gPivv+XnOv\/3taS+\/XyVbWKTKABMItHBxgp0kfL1IYytEi2YIVykloVAobUf5CaK9F4n0XUz69aZcTyCGmqAAACAASURBVGPhunkMjjxISeHL4zufhKaPgLbBvwWKPge++nnff44bw+m+b08Kn2txdYLDXX\/DT9X+TS7TbxGgw4Por\/5ncB0Ugu\/m\/xQR4UdPictzZDIm54f5T\/L5wX8hePYtqNsMK+dnwYvFHV544zKt3aNIIZLixvwsFfVvYnvOo5SJEIrYYC2GZxQz2Iu8xjWmlUC7HqK9G4ioBP2DUUqKklbw\/qEYE\/bobMi2fYYhBbs2VnD3ply3+NuB20L8WJbF3r17uXz5MmfPnk2zl8bApcQTpidRwNSJskAZ3BcO8XL+KClCUSYRJIVSa2sr69bVM3D2x8RHOmBKSrwz1sfA+RcpqHuAYFlyYi0sXJiofsMwWLJkCcuXL5\/2w\/9LT27lf\/7oFImYQo67jJRQGELyxN4apJ1Pc3MzSimUUoRCIerr6ykvv\/4aOTGtuNbbXZ2YJQBRSzxD9cSW9hKtfJWasV+jq6tr0qKltaasrIwtW7bMOsGNth6Z9vc\/HYO4XYnr+jCMGOgI2FfGD+yC8OtQ+htQ9Oks7zbHjUZrTfPwgZTCZ4JEYoiB2CVK\/Ktu4shypEK9+TyMV35vtpYTE95pwmfavghO+tazJ3oUdeRFjAziR2uNvngUfeRFGOwCywvr9qC3Pspz+9oZHImjlMad+O2xi2g\/8RE0jyOsKMoOoJUHIeMUrfkenrw2EGr83AYqkcfA+U+iVTL+8d2TnTz1QC2Oq3j3RMdkfZ6FxDQE9bUlOdF+m3BbiJ8JampqaG5uJhIZY7qFJ\/mCuBj0JPK51gI00RvL1GDP8lxqwHVdYv1NM4TPJMph+NIB\/CW1SMODz+cjEAgQiUTmdV+maeL3+1m1ahWVlZUzXp68gJdf+8R2GloHOdHQjeNoVlYUsHltGUG\/BZSyevVq4vE4Ukq83oXrWHyou2nGGimkZMa6PwKJtJNFvqRhsG3bNuLx+GTNo6KioqxikbRWjI2N0RsvIup4MKRLqWeMfCs6aeoWwkGmLPCoQMeg70tJK1DOArQocHUi6ebKtAhxXaLhVsiJn1vPhat13a5Y1dgyfYyeK0wue2rYEz0Kfel7bmmtUS98BS6fAHvcam7H4f2f0HX6FPG8J1B65m9Y0gLjhfjVbVp5GTj\/KUxfH97CyyAVidFl2KNVTH3IuvqSmbcHjrRm7fLKcAOUuv1Y2mbQKCImk6EQcVvx1e+f5sGdy9m09s5vy3O7c1uJH9d1iUajBI0YY66Pqw\/3tIp+KY8VCEocky7LydBLCopdA5\/PR7jjeAaLQ5JY3yUC5esA2L17N6+\/\/vqc7geSVi3HcYhEIpw8eZLBwUHq6+tnuKukFKxdUUxdVT7d3d3Ytk0kPETAVzpZ6HE+wc2z0R4ZnmEcjgiNQqdteaHRKDOMxGB5\/l4AvF7vnOOPLl26zIWRpeiJkGoXRm0\/XsNmTV43htB4Pe1kNF9rOxkLtPSP53TtHDcGQ3gwXIFjZsiyEeDvHoTc\/HHrmeU3MC1W+gWYPn8ILh2Ha\/sMak1pvJvPx\/+Jk971vBW8J62V6VqcWClOV2na7R5LkrBdzjT2cV1GH60pVMN8cvh7aCEwtMtlawX7Qg8Qkz4cV7P\/SCulRX4qyxa+vVGOheO2Ej8Tlo3ZmoCmY3XCS6\/lkCpvTGgIKEkJHmpra3F792c+mXJw4lcrGQcCAWpra7l8+fKcxjRRwHEim62lpYW+vj7uvfdeANra2ujq6kJrjWEY9PX1IYRAa40QAsMw2L59OyUlJXO6brbkWV4kAjVFYLR67MkO8ykRDnbhBaT0UF\/01Lyu29vbS0NDw4yO9QpJzLW4GMmnsPgcNWZn8stLi4Lo8XmNIcfCI4Sgpt1HY3UUnWZe88clhUauQNyiwPKBnSyXsdJu4Zx3bVrrj6Ed6hKXwbAQd6VPPNBHXpgpfCYuN\/7rvDF+DonmQGhhWrworbnQNJAsnXI9mcNCEJZBhowCytw+AGrtZsqG+\/iXwk9iC0+yEeupTn76kdULMvYcN4ZFJX7C4TCnTp1iYGBgcrKvqalhzZo1SCnxeDwopQjr6VlD2VLoGqyLejnjT6ZgT5zC0GBpwZ5oiKLCIpYvX07fkB+VyFCkUJoY1nRLi9\/vR0o576w0SNbmiUQinD9\/ntbW1llT\/F3X5fDhw+zdu5f8\/IXvJ3N32UpeaT+PUlfHMWYoWjwJqhMezGuzvYSD8vdhhWI8UP1f5t2VvaGhIe29ayQRO0Svtw3L000hszwNYvZ0+hw3j\/XhdbTHjxH1aPQ15VAMB+4+lYd8YmZ6co5bwNZH4PCPAVhht+LXMRxtprTISBQbY+fA60FsztCQeHD2is0WDhvi5zgS2E5EXn+j0P6hGK8fask6aysTQmsGjcJJ8WOiCKoxNsTOcsy\/BYD27swtfnLcehZNkcO+vj72799Pf3\/\/ZJq367o0Njayf\/9+lFJYlkVpaXrTZjastD3sGQuw1DbJdyTFjsGGqI+HRkNsrFtDXl4eBw4c4HRfIR3RovQmUq3xlU6PSVi6dGGi\/JVSNDc3Z13byHVdLly4QDwe5+LFi+zbt4\/XXnuNY8eOTRYRtG2bK1eucPT9U7x1+BwNzb1ZBf1VBArYUrIMS06fpU774jT6EjgiGahtGBIhobBCsGPHdj6y6ssU++Y\/gc2W2adRGLFy2gmlLKg4ifBC\/pPzHkeOhce\/\/SM8+k4RK9otDDcpeKSCsj6Dh98NUSKXIcpX3Oph5gDk3U9DKFmzRqL52MgPCKoIlrpquTGVjaUTfGTsJwQL85Gf+T1EIEMzUTO7is0KQW2i+XqGPw1X6VmbqGaDQOPR0y1XFi6bY6en7ZVjcbNoLD+HDx9Ouy0SiXD27Fk2bNjAXXfdxYH9PfPW7wJBiWtSEp1+66FQiIsXL06\/Lnl0xfJYHeomz7qazi6kSahq2wzLj8\/nY+XKlZOZVzeTnp4eXn\/99clWHgAdHR10dXVRUVFBa1s3HaP5RG0LITScH0WIK+zZUsXODRUZMxR+Ye0evnXpfQ52X8IY389RCl9FCY+s3o2KxdFak5eXh2EsTGXTCdde2u0AQjOElz58lOoYZir3l\/BAwScWZEw5FgaxYj2+LU+y68hLbDubIO5RWLbAgxe8AeQnf\/1WDzHHOMLyIH\/hj1Ev\/T00HKVAjfLzQ1\/nkqeGi\/61uIUVrCwUrCtK4Fv6OaiomT3bac0uOP0mzNJGSKKmiQzTkFQvDdHUNrIQtzZvNIJqu23G5z6dnCMEsLIy19V9sbMoxE97e\/usYqGlpYWysjIikQjlFUvp6upkodS1lJJweGYJ9InzN4TL2VzUjWkoEAZ5y3cRrEidxrlu3TqGh4cXpJv7XLi2wevUz1paO7gyVIqjJSDQE5YSDe8cb8dxFPdsrUp7bkNIPrNqBx9duYmLwz24WlOTV0KRd9wc7Z1Z+PF6KS4upq+vL8MeBq4\/2RLhTSq5j45xASQBF0QAZACW\/Q8wizOcJ8etQO75CLpmE+bRlzF7rkDIi9h4H2L9PQjPwgfu55g\/wvJgPPMryfT0kX5MIanPK2LdPFO65a4Po84fmowlSodCEnLD7Iy8hywuo+b+Bxkcc2ntHM2qx1ba6wsBItm+Yq6Y2uaeyCHMFKUawjLZs9AwJLs25mr9LHZuufjRWnPp0qVZ91NKTVqHkv2+Fkb4GIaBZVmz9MAS9Ps2sH5tLVawNGPjTSEEiUTqYL5bxXDMj6uvbUKRxFVw5EwX29aX4\/NefRzCdpym0T4kkhV5xYQsL37Tw+aSZTdlzKtXr2ZgYCClKNbCwQm2os3kd+Yg2ccyCojzZMkzoBPg2wjBvSByPXYWK6KiBuPpX77Vw8iRJUIIRMH1hR0AiIIlyGd\/G\/Xdv4RoqkVnkom4HwMXp93EfP4V9I7PIEWQ+bS6mLy+gKVlQdq60l97BlpjYXPP2CG2xE\/P2JzA5ERgM6YhePzelZSVXH+cUo4byy0XPydPnmRkZG5mzPm4lAKBAFVVVfT29k7GwXg8Hurq6rLqy9XTP8KWUOZqxLeK2VxEw\/HAjKypaccDjS1DbFhdSk90lL87f5Ar4YFp29cUlPNv6u+h4CatyktKStiwYQOnTyd\/aJRSycJ4wsX19RMrPzjjmBH8UPJLN2V8OXLkmD+ifAXi336J8Le+hKfjwmSWFyQbOU8s1azxxjoebLCh\/MjXKct7mjZZMe9rK63pH5xjrR8hWG53sMm5MGOTK0zGAuUU7XqQX1pbgd83\/y70OW4et1T8jI6O0t6evhjWQpJIJLh06RKVlZXs2rULIQSmaSKEyEr8ZCu4HMehuLiYcDi8oP2+0mEYBl6vN2OBxWJ\/mL5IHu61qTXjuEoTizv0Rkf5w\/dfIKGucZ8BF4a7+W\/vvcAfbH+KPM\/Cu7lSsXz5csrKymhpaWFoeIi26Fs4+Y24vt6Uhr+lwa03ZVw5Fg7l2mgngbS8CHnL12I5biJnLw3wSux+6kLL2BE9RrE7gIvEwkWmqQAuHJtH9TG+Zj6F48wvrlJriMXnnu7e4q8lvPdXyD\/2I+i5AlIms343P0TJnp+iNMtA7hyLg1v6a9PW1nbTAoMdJ7mC6OjoIBaLsWPHDpqammhubp6stZOJTC0sEokEXV1dXL58mbGxsesSPRqddR2jYDDIqlWrMAyD999\/P+1++d4Yed4YA9EgA9EQ1yoH05AU5nv55qX3ZgifqYSdOC+1neWTtduyGt9C4PP5WLNmDQCBvhZO9b+Tcj8pLHZX\/OpNG9cHBncM7Q4hrDIQC\/fj7kSHGGl+m9jglaQfQoO\/dBX5K\/dgeIILdp0ci5P+oSivHbqCFoJGbx2N3mRmaKXdwU+NvoCRIRg6b7iZjXs1Jy+IrPtuXYs0BO4c44b8XpPC+o2IdZvRsQg4cQjkI2TOtX47ckvFTzR6nWXG54FSioGBAQ4cOEAikcg6nXzdunUzPjt79uyCZ3ZlK3xM02Tbtm0UFBRw4sSJzOdMxvdR7B\/DVZLh+PTJRUpBRUWAc1c6Z73um12NN1X8TGVD6SfwGiGO934dR1+N0Sr0ruShZb+P18yQXptjTujhd9EH\/wJ92Q8JCwwXVjjI+7+IKL7rus5tRwbpO\/k8yk0kn\/bxOWis5yLRwRbKt34qJ4DucN47241KIT5M7TJbPKdGMxj8Ejse3Evr6Yfo6JlD7M44Ugi00GSrnUxD8vDdV3suCl8AyMX13M7cUvETCNyah0cpNSfhtWrVKgoKCqZ99s4779z0jK6pKKXweJLF+yZimGZDCigNhBmOB5joamwakqcfqCXiJpIv9ixWq7jroLROZkzcAlYXPcHqoicIJ7qJucPke6vxyFx20EKihw6gvv1lGAuBGo8Vcw1oEqjWP0d+5rcQpZvnff7Bhn24TgJ5zSMkhUbZUXouvMnSjU9cxx3kWOy0dY2mDFnuM4sxdOYFadyjickEjR3tlBZ3Q8\/chbLW8OieFbz89pW0+5hGMrnGMCQf2r2c2upc1fE7iVsqfiYm78WM1+tl7dq10z7r6+ubk\/AJBoNEo9EFtRB5PJ7JXl4TLr1sEGi8hk3ctVhWHuSBnSsoLwkSdRJZuev8hnXLhM9UQp5yQlx\/1\/ocM1EH\/hLGiq8Knwm0BBvUj\/8C4\/NfTXu869o0NvyAIz0XOE8hMZXH6mARj6\/dTbXXRyLcPUP4TCAFOMNNaNdBGLkYoDsVw0j9AERkkBarihV2G0aKuB9Has4sDdL9\/hdASfrTxDHORmG+l7tWL6GqIo\/X322hpWsUrTQej8H29WUsX5pPOGLj91lUlYWQ6R7YHLcttzzgebFj2zaxWGxa09Bz587N6RxjY2Pk5eURiUSydrPNRiwW4+LFi5PCKltMqVhR0IdGYmoDn5ms7+M3PawvWsqpwY60xwrgwco11zv0HIsYHX4PrhTNFD6TSBgEPdiKKKqesfXSwCu81\/kPxCWwBOqFImwXcm54G6eOv8znqlZRrgQyQ215raG3b4Cy8sWZXZnj+llbU8zhk50p6\/W8EnqYTw1\/N1lJmqsLO9vQdOcbvB3+DDpF1\/esEC5ey+KZB5MxRoV5Pj72aPI3zVWKgaGkO72owEdl2aJpgJDjBnBLv91ZK4EuApRSnDp1aprVJlNmVTps22bz5s3k5eUlU9MXYGyNjY0cO3ZsTgHWGqjwjSBEsi3G1HihT9Vtx5MheK\/A4+fxZTNjn3LcQYyeSrZVz4RU0D9zAdA49Arvdf89rulgyuQfQyjyrAG2lryBMOL8oO0Csz39QmiGxm58pmSOW8emNUswjNTTT0z6+ZfCZ3krsJsBWUhE+OgNejiyOcqPCh6fh\/DRgEJaYYIVRyjf8k\/kTWm4rrXm8KlOvvzcCb754nmee+k8X37uOAePtc2rEGKO24NbKn6WLl26YO0Q5sJcRVdPTw+HDh2aFBmWNfesF9u2aW1tJRKJJCulonFTTAJ6\/J9smKsbTaAotCKU+0eYiDINh8OMjSUbuC7x5\/Gftz1JTV7JNcfB1pJl\/O\/bnsRvLn5XZY7rwF89e\/04LcA\/3SrjKptjPV\/FleOWTQ2l\/QbrGjysv+ShdMRlmb+Bfi0J2+knL6WhO1qIz5+L47qTCfgsnn18LQGfiZHCpWQLi5P+jXyt6DP8bfEv8K2iZ2gth3h4prVxVqRDyV1fp3z7X5O\/4gBKDHO++20SdvJZfeWdK7x7spN4wsV2FAk7+ee9Mz386MClm1KyJMfN55a6vUpLS\/H5fJOT782iuLh4snN8tgwMDNDT00N5eTl1dXWcOnVqTtfUWtPX1zd5TYkgMe7T1iQFxqjh0m04rEp4WWhJKFF4pMPy4ABmJMLykWYSwmIofynRaJRgMBk0WObP43e3PE7YjtMVGcYUBpXBAjy5+IsPBKLgYVjyN9CTT9qsG0tD5fSA567Iyclg+UBEcP\/hAP6YxBhP3lnfANvyO\/nzmnreHinisZI4ppwu3pUGV0vO9lWxpWk\/2r8bUZhzfd0uxBIO4TEbn9cgFJh9kbSkOMD\/8snNvPpOM2cu9WfMtXAT+WhlMrfKzhphJChc9UM8eR24doDRKw8Q7V9HuxC8xnEqSoN09YVTNrB2XMWVjhE6esNUleUySe80bumMJoRgz549vPvuu9ddH2curFmzhu7ubi5fvpz1MVprmpqaKC8vp7q6mvPnz2dVH2iCVFYaDxIHTYuVoMGXICE1QkPtgoofjV8mKPONUqIGKT59CSMWo1hLNALZ9R7u4EnUz3wROaXIXMjysqogN\/HcSfRGRxmxYxR5AxR702TICIHc8xDqR0eSGV7XIl3E3ofASaAuHkH3tiF8AWLLNaAxXHj47SC+uEBOiCcNUkPJsOTfXTjGV9bVc6Crlu0l7YSsOEoLpFAMxYO831PN9oF3Ed2XUEdegHW7kR\/6HCJTkFCOW0o4kuD1Qy1cbh0a75mVrIlz3\/YqNqxekvFYKQXVS\/O50DyInaFooTQSIOzkH539tFW27f9FGg6uHaDv5M+j7ABgoDW4aNpnSZO3HcXxcz058XMHcsuX8z6fjwceeIDe3l5OnDhBPB6f\/aDrQAhBcXGy0WVLS8ucMqUm+n85jjPeX+z6MRGstD30Wy5hS1IZLKSsuJSR1s7rDo4WKIo9Y6wIDiBsh9LT5xGOgwDklHLyRk8z+p\/\/ED73X6\/zbnIsRi6P9PHVhnfpjYYxpcRRiuWhYn5u9d1UBgtm7C\/qfhX5+P+F2n8U4uM\/EQIQGnHvXjDqUH\/968lZbrwsZ\/CCgp0uy9stLGeK8JmCoQVlsQhb1Dniq47zauMz+JwAfjNBxPEQc0weGX6bdYmL40e4cP4Qyh\/CuO8TN+zvJ8f8GYva\/PMPzxKJjf+Ojq9fo3GHn7x9hTONfXzi8bUYGX4v66oLeeXt5rTbpYQCfxHdR\/49Vy+STeiCwomW4gl1Mdp6H8r2wzyWla1do2itb4sY1RzZc8vFDyQFSVlZGY888ggdHR00Njam6bJ+\/UgpOXjwIFLKOYuLiYyvU6dOzUmkzdZ7SyLYGQmQb+azrnIdpaWlNAcLOH\/+PAC264z3upm9+NfEPhKFz7CpDgwmx97dC66b\/gx9bajeNuSSm9O4NMfN4WjvFf7u\/MFJZ4Ezbt+\/PNrHn514mS9ueYKKQP6M40T9byBXu9D8DfRQKyJUC6s+jj6+D\/2Tf7xmb01pP3jiihXtXiw3\/XPqUS7buwY5UhllyaZ\/xI6U4MSK8ZoxCgNtVB4MQGLKBOUk4Nhr6N3PIKx5ZvjkuGG8c7ydaCz9ArK9Z4z9h1t5ZPeKtPt4LIN7tlbx9rGOyedzAiFAKxgYnr344Uwk8eHlWIEeon13Md\/pLhp3uNg8yNqa4nkdn2NxsqhsyVJKli1bxoMPPkhZ2Y1xubiuy9DQ0JxjfqSU1NTUYNs23d3dWR\/j9\/spLc2uE\/LIyAiHDh3ixwdeRRX4uf+Rh8jPz6fFstN0umFacLTp6UdZgzj+Tqzik9TltaGEjYuLv7cPOcv96sMvZDXOHLcHveNNatN96zHX4fmmY2mPF4aBqPsscvsXEWs\/BZFR9BvPpd4XwZ5jfkwn8wQlgRWdJltPe0GDFejHV9yAN78VqTVD+SmedCmhozHjebMh4YZpGX2HpuE3GEncnJ6CdzJKac5eGpg1Cud0Qx\/xROaF5o67Krh\/xzK8HgOPJfFYEkMKivJ919O\/nXDbvUT61iWD9OeJ1nDo1OzV73PcXiwKy08q5lr92TAMPB4PQgii0eiCxg8JISgtLWXJkiWMjIwgpcwq00oIgeM4c0qNV2hGIxH+8vQ+hCGpdrwE0BwKRNge9WNogeRq5+MR6ZKnDEwEyyuf54zlxUUSBQa0pDhRgkd5KNVZxCfF557Cn2Px8s8Nh2edOM4NdhJzbHxZNGVUJ\/ZlrABeMmQSsxQKndLtNYFEUNPmIeLTXFiVAMCTgNorHpb0p3JLCLgOF7DSLsd6\/onG4VeRwgSt0SiKvDXsrfotAmZuRT8fHFfhpooUvgYhBJ29YVZWzXSxTmVLfRmb1iyhsy+MbStKCv1888W51VSbgbYIt3zousQPwMBwbPadctxWLFrxs3z5clpaWrJO53Zdl7Vr11JeXs6hQ4cYHR1dkIKCUkrq6upYvXo1QggMw8haWLmui+u6cwqMlgiCShJQghHh0iwjBLyShFDsC42yzYV8JUkAJy3FEILd8RDlrkml2c8ZKifPpYSiz9sLwFBegLKBzF+3qFiZ9ThzLG6i4SEahjpBZDbuCiEYcxJZiR9azs66i8\/OzphsuoJ1l7wIBcu7LApGJUok44Jm4NpQnt5tMhuHu75My+g7KG2jpiwC+mONvHLl93iy5ktYuRYpc8Y0JFKSMlNqKuN9a7NCSjEtuDiTSy1bTBGgrDxAe094tu49GceV485i0Yqf\/Px8Kisr6ejoyFoAHT9+nMcee4y9e\/cyODhIR0cHrutO\/neuCCGoq6ub1t4iGAzi9XrnVehwLhS4BiOGQgFRqdhsw+PeIbQBHsAG9gLHlJ9d2x\/FJwxCPRYlxOjFj75m5X2hNkHxsIGZIR6DXU\/fwDvKcbPQWjP6w\/+BXLoMN00huQmU1uRlG0uzwOUOLAfWN3gxx59VI93EVLMJMSUwu3vsDIPxy4SsCpbl7cx4jbDdw5XRg9NED4AvJqjslnjcKF2Rb7Jsw+cRswjFHNORUrB+VSmnLvZl3E8pTUXp\/BrVWqaB416fANI6GVTdOxid1f2Wjrplma1WOW4\/FvXbvnnzZlatWjWnKPsLFy5MZnRt2LCBzZs3z7uQotaa1tbWaZ8JIaipqZnX+bK+Lkn31wSugBaPi0eAVyRXUh4BloAdRpz8WBvFxcVYJR9nL30EsTGnRAkJFD1lCcJL0weRi4c\/izQXrRbOMRc6GgkOdKCzeG82FC3NuoaTWLsL5MI9IwIxKXwy7rUj2eS0dfRdvnXxs7ze9gcc6\/0qb3b8Od+88GkuDKSPVWsdfWeaq05o2Hray1P7Qmw56+Ou8wZl+95CfeU\/oDuzL32RI8k9W6rwWOmnEUMK1tYU4\/fO77nZXJ85VT5bykuD\/MxT66gqD2EYAo81tzlhNpddjtuPRT3bCSFYs2YNNTU1vP\/++\/T29s56TKp9ysvLZ4iYbJmaCh+LxTh69ChDQ0PzOle2SKDHnL5CGUszSUgUo61HCS7dhCj6LL7hf+VJt5VWgjSSj41BMTHWyCgFD\/0M+lQ+nHoDJlZTBaVJ4VOz8YbeU47rJz7cQbjtKImRTszRMHk9g5jhMYTlRazbjdjyMCKQj7p0HF88yoahfo4XLUmq5WvRGikln1mV2XIyFbF+D\/qd70P0xmRipsQwoOsyHXnDvNXxFzM2a1ze7\/2fIARriz48bdtQvIXm4YMYtkNdm4fCYUnBiCQ\/bEx3rzmAM4x6\/i+QP\/cHiMKFmXA\/CAT9Fj\/\/0Q1866ULDI1Oz4A1DUF5aTBjptds3L1xKe+f6SaRoQbQbHg9BlVlIYQQfOqJekbHEvQNRvne6w1Zu8Ga24e5a1V2iSs5bg8WtfiZwLIs7r77bl588cVZ3Vep6u\/U1dXN2\/U1EXgdiUTYv3\/\/gnZmT4WDptWTwJbT38pQRq+5JjHajbegEpZ\/DaPzP7Iy0cRKMS7StILiX4TiL8DDAh7+2Rt3AzluCOGOk4xceQeUQ6C9k2BHN0KpSUmsj7yIPvYa8lO\/MylsP97awMX8IiLSYFonUa2RaP63ux6iyJt9YoHw+JHP\/g7qX\/472FkEgC5fBx2Xkunq80aDVrzb\/dcZ9zre89VJ8aO1Hg9wfoXKNs3DJ5MxJKYS08pBzMBJoI68iPHo565jvB88QgEPX\/jYRjp6R3nvTA8jY3Hyg142rSll+dL866qPYxiSX\/z4Rr7x4nkGR+ZXA+6Je2umjSEv6OFKx8ic4n+6+m5uF4IcN57bQvxMUFpaOmua+bJlM+vUhEIhtm\/fNLIXxgAAIABJREFUznvvvYfWOmsBYxgGtbW1ALz99ts3TPgkc0+StFs2Z3zTX3ILzW6RabIRaD0u7DzVsOKbEG9M\/pEBCOyEXEDnbYsTHWbkytugXKzRMMGOLuS1DRddB1wH9a9\/hbj\/WfTpNylJxPjimcN8e\/lqzhaUIrXCFZK68BDP+ouoLqqY81hESSVi70fRB76VFNXpMEzEx34T\/dLfw6XjYE99pgVzCIElIRx2vGsTjAaJ+BSNK226ljiTZV8sG1a2SsbO\/jG+QAVdy7w0mq9SMOiy82QAc0qj1oy1srSCi0cgJ37mReWSPCofnL0ScjzhcKaxn4aWQbTW1C4rZOPqUvy+1EH3Pp\/Fxx9dw999Z24thZJjCrJ86cw6VqcbZvciTCUcsVFK5wKf7yBuK\/Fz1113ZRQ\/QohJsXItZWVlfOhDH6KtrY2BgQEGBgYyFiqUUlJcXExVVRV9fX2T1Z1vBALBiHR4PxAlck3UpykkS3DYRPrVs1YuVmB6M1K8q5J\/ctz2jHVO6ZvV0YXI0Glax5JuMEwP2HFKEjF+ufEUEcNk1PIQtBOEhET+3B\/MezyifCXatK4RNNdQUYOUBvrDvwRtF1DHXoOhHggWJIVae0Nm8TSBa2Pu\/y6VmAgEhaMGSwZM+oscDm2JsuG8j5q25KQpuQRcovQ8PBw0iXkkcq7rlesMrs2RmZ7+CN\/+yQVcpXHGXVk9\/REOnezko4+sproitXjq7B3DkAJ3Dl3WLVOya+PSlNu6++dmyRFCMDAco7Qot4i8U7itxE8gEGDHjh0cPXp0xjYhBPfee2\/GthOWZVFTUzMZsDw6Okpvby\/hcJhwOMzgYHIl4vP5qKurY8WKFQghaGpqmnVsXmmTZyYFUtjxElNXG\/tNmFwzVZUuUiYbYj7O+uLETDDGM0\/urajjQx5BrO0IqBQ\/zELiK1qO4UntvtCJDpzub6DiHShZgVn2LFZo\/j74HDefRLh3UihYY5GMIcLKjrPvxKuUPfZ5Nrzwt8nJXLkEXIeA1iANxGOfRxSVz39AlauSImaol5QWHMuD3PkkMP7sV9djVNejTr+FfuNbyTFlI3zGEVP+DWC5gtJ+k6dfy0PqmdYc04X8UUmhlrNWRZ9Bfi6u40ZhO4rnf3JhRsaV4yb7wn3vtQZ+8eOb0FrjKk3QbyGlwFFx+tU7FKw+iNaa2OAqov3rQaUvz2BIQXGBL2Wg8ljUnjU9\/1qEINfd\/Q7jthI\/ABUVFTzxxBNcvHiRnp4epJRUVVVRU1Mz535beXl55OVdXWlordHjgaBTSSTSW10kippQL3lmbFo0QcSxuDxWRkFxGevXrycvL4\/W1taM3eDLHYuqmJ+1WzcRyA9R7A1iSQOtFYPhLuJDreipAkiaGJ4QhasfnnkyrXHb\/xA59n1MNEIolGMi2r9J2H2GwNrfRxpZ1HbJccuR5pQO2bPETyghGXASfL\/tNJ8oLue+3nZAJLXDsjXIR37u+oQPSUEjP\/rvUN\/8E7ATyTo8E5ge2Hg\/onbT1c+cXtSF\/xMRfhuxGXRHMbqtGPT8k01NnTl+xxjfPmeGe3Bf+AryiV\/MNVNdYC42D2S03LhK84\/fO0XCVuM11QTrVvsYzP8LXOJ4i5KLS0\/BFfKX76f\/3KdxIlefZSGS1h7X1dRWF\/L43pUp3VTRmINhCFw3++dDCCgu8M3hbnMsdm478QNgmibr169n\/fr1C3peIUTK4LxQKMTg4GCKIzSr8roJGAmS79jVlylgJliT10X5xocIhpI+56qqKk6fPp1xBaGUYkkwn5A\/NGVckqL6DxMbaGKs4wRObBhp+ghWbMBftjaliHF7\/z9E+AcIeXWVJWVSOAWMHxG+WEj+ut+Y5W8kx2IgUL6OxHAHWtlES4oJdvUgUjxDE+0e+7w+bGnw\/LJatvd1EEAnN3ZcQve3X5f40UpBzxVIxBHP\/jZcfA999u1kUHPpMuTODyNWTHkvwwfQnb+NkAlE8fiYi8YQa9tRB9dCdP4TypytOtngOtD4Pvrtf0Xc+\/GFP\/8HmKb24Yyd25XSROMTv1cax4UT54awQo9TvO7bk7pfGjYYNiXrv0nP+7+CVh4MCfdsraIwz0dlWYigP\/3CLhiw0HNwn5mGZOu6coxZambluL24LcXPQuKoBBIzo9Vo5cqVtLW1zRAtITOO37BJFQMnBXilg9N7EkL3AknRtmTJEnp6etJeKxgMEgqFZnwuhMBfUou\/JHVM0zS0jRz6R4RMHb8ghYNP\/Qgn+guY\/lz9isWOr7gGwxvCiQ0TrVhCoKcX3KtlLDUQKV9CZGk5ymPx08BHwm18z8znaHE59\/eO97FyEuj9z6Hrts4rA0edfgv95vPg2MmlsOvAinXIn\/l9RIrmqNjt0Pk7CB2f1kxbmAotFXJPA+r1Dcy9YWWW4wVEmlYbmbO+bPT7r6LvfgZheVLvkwOA4XCco6e7uNA0gOMqigt87Ny4lDUrimY8Y\/MJFtbKwg5XERtYg7\/kwvSNwiVYdpZY71Ye27uS+pqS1Ce5Br\/XZEVlAU3tw7Pua5mSFZX57NlcOeu+OW4vPpBSNmL385Mr\/4lvXPgk3274WZ5r+BQ\/bvpN+mOpi5wVFBSkzCIr9oSRGUzrQkCkZ\/oLu379esw0xQQNw2DjxgWotxM7g54lpsIy+zna+BoDsVwK52JHCEnpxo\/hyV+K8voZumsdyrJQUqKAodW1hKsrUV5P8qETAhkK8DGPjc67prJuZAQG5t6kUb3\/Kvr1r0N0NJnmnogm3V3NZ1Bf\/yN0qr5wg\/8COnWMm5CAx4ElI3MeS7ZIAMEM95edtpT0FFwHeltuyLjuFLr7x\/jqD85w8mIvsYSL42p6BqL85GAzLx9snrFYXFVdiGXOfcrRysNY544Zn0vDpnxFC\/\/22c1ZC58JHr57OT6PkVL+SgnlJQHqa4r5+KNreObBulyW1x3IB078jCV6+cHlX6U\/Nl2UjCTa+MmV36EnkrqR3qZNm6ivr59mITJQs4VgoNX0H\/9QKMTevXspLCxESolpmhiGQSgU4u6776a4eAGaLGo7i0xiwZWRbv7Lez\/i7GCuY\/FiR1o+Sjd8lLKtnyaw8QmcT\/w6B2s3EC0uJFGQlywGOBUhwJCsKQ5Mr\/QsDUjMLXNRJ2Lot76Tul6PciEygj6xb+a2sYMkG7GkRpgKUTo6p7FMjimrbQKpxTQLj0JzZanNrPGuWqHHZrcM3A7EEy5dfWP0DkQYHInRPxTN6H7KBq0133+9EdtWM+rl2I6i4cogjS3Ti8HWLS\/Em0ZwzIabSGFZBPKDHryeuTswCvK8fPaZ9axeUYQhBaaR7CK\/ZmURX\/jpjfzs0+t58v5aKseLI+a48\/jAub0OtP8pmvTFDt9o\/zM+sfofZ3wuhGDVqlXU1dXR29tLZ2cnvvAQmmjGlzmVWykvL497772XSCRCNBrF6\/WmdHXNG+8ahMj84+YqH5eUH4+jeeXoOziVa6iurKKoqGjhxpFjwTH9hZj+QgBWe94hVlE2TfgIx8E7NIJQCjvgx\/H7iBcV4hsYj1lzbShcgh3pZ6zrLG5sBNNfQCC0jMTZfTjdDTg+D3LDfRSsfAgpJfryicwNUl0bfWI\/7Hpq+uez9MrSySSfeTMR45SOlKt6BMt6TGI+TTA2y6S2wL3MbjbxhMu+wy1caB5AMJFVlXTJG4Zkw6pS7t2+LGtrTCRmc\/RMFw3Ng9iOIpZIXxbAdhRHTnexesXV3xNDSp59op5vvXSeeMKdFGDZpLBLa6aFWuChKjTTIpQt+SEvTz9Yh+24xOIuPq+BZc6vFVKO24\/b++2eI46KMZzIbMq21Rj90UZK\/Klr5AghKCsro6ysDCe6kp73\/znj+Qpq9qbdFggEJitILyhGAcp\/HyL6BlLMFHpKmfSMbaZmpJCNOvmytzQ109LUjNfrZceOHTQ2NtLb24vWGo\/Hw6pVq254T7Mcc6NCWvRMNCXVmlBLO4Hu3nFLT1IaKI+HRP6460sa6JUbGW4\/SqT3YtJqgyY+CGPqGL6+XvLbupNFN5u+Tm\/xc4Q+8V\/xR0bH981AKrdX8GFItEG6GlWuRPfML+ZMeSy0YSDjiclK10rKZGLbLHnMhitoWpZg9RVP+ka\/Qk5rpnq7YTuK5157AyfvDUq3XAKhSIwuI9y+Gzu8DOUoTlzsobMvzKc+XI8xS2Zba+cIz79ycU5VkQeGZ1oYC\/O8\/JuPb+Ry6zCXWoZQWlNVFmLfkRbS15DVmP6ZcZKuI1hi7sl+QGmwzJzo+SDygXJ7jSayc+\/0xRqyO5+w2Oep4JsqyPMqwFltMTV70le6Gm\/BzFihm4Gx7I\/Qsgqlp+tbpUzGEss53P0YIW0gmO4WiMfjHDx4kO7ubpRSaK2Jx+OcOXOGN95442bfRo4MiMpa5PhEH7rShr+nD6E1UimkSv7XiMXw9w4k3V3BAqKbthHtvTheM2rKwyolsSWlRMtKkQhMV1DY79D7o\/+Myi+Y6Va7llAKi2HRp0CkXl9pBUQ8MDB3i6cGosVF9G9cx\/CaWqLlS4gsKWGkdjm9mzcA4EhNR5lNy1KbkdB04aYF9BW5NC1L4EiNEnr8vFP+Pvx5ULZ8zmNbLBy6tB9zxVfwlZxBWlGkGcdbeInidc\/hKUjGNioFXX0R\/uE7p2hsSZXNmiSWcHn+J3MTPkBai5IhJatXFPHEfTU8eX8tm+vL2LO5KkMIgSDWv57YYF1y3K6FcrwMXfg0ZxtvYp+5HHcUHyjLj88szGq\/gDl73M3+jot849JEscVkRkiD9uBH8QtmguUr7ia4dMN8h3r9yCDGqu\/g9H6Hsb6v4iFM3M3nUGQb74XXcZc255wqPDIywvnz56mvr79Bg84xF8TaXfhPv8zYkiIC48Jnxj6MF2dbWov4yK8SPvnc9FpRUzEMxqoqkiKKZC+synbFSN4+CuwM\/blMD2L7Yyk+XwLL\/hrafy2pdnQUAG1LiFuoQ2uYT6aXloJoRRkIQaIgn0TB1XgQrRVnVie4UBtjXNOgJRSMSPYcCxCMJqs+R\/yKYxscmpbZrL7ioWTQIG9sfLI2LMRDn0bM4rZbrNhuhBb1dwhj+vcsBIx27CYxWj3t89GIzQtvNLF7cyxlReSD77fN2TspJdTXZh+\/uHNDBYdPdaaPRdIWw02PAor40CqivXehlZfO3jEStsv5pgH6BiP4vRb1tcUU5SdLKGitaekcpWdgDNOQ1FUXkh\/yzvFuctyJfKDEj98swiNDJFT61YJAUhXM3Om6NTw4RfhcJYEggcH\/7QT4f8oXtgbRvBAWZtmnOS\/28LWGQ8THS\/ffH5u\/q62pqSknfhYJwvISvPtZ3KPfRguRUvzAuLwY6cPVCTL4FgBQhoHrsTATyUBlqSD\/7IX0B5gWlK9ArL8n9Xb\/Vqh9BUZehMhhNBbqzSZo95KN8JmwxggEttRoCQd3RIjlnWLj6EYsPT0VvTnQTHtxHPcaQ9VggeLVvWM8cSCIZQtq2ixGhhTehKBk0CB\/bPwAjw\/x8M8i1+6adWyLlaaRN1PGUtnREsY6doGeWQPHcRXvnOhgbU0xBdeIg4Yr6a1C6VAK3jvTTU9\/hEf3rKAwP3U9J9dNBkefG0+Vz3jORAGDF56d9tlINMaXnzuBEElXnxRw+HQna1YUsX19Bd\/f10gs7uC4CikFb7zXxqrqQh6\/twYzV7fnA80H7tvfWf5LGbevL\/nYrJWiv5lC+ExFac0r7amzxm4FW0uWETQ9k\/VOrGtcXanReKWNvCYvxnUdxjpP36CR5sgWrRXR\/ssMhC8jhEwrfCax41kFFxvRKEbiaoZW5idFwPbHkR\/\/94hMwcEyAIUfh8o\/Q1T+EfKBPwKPHwwLjWY0oBjMd0mkSEGfcMtqNLZH88NHRuktcQhbYY4XnJjmqrKFTWugFTfFebQE29Q0rrSRhsWaZi87TvvZeNGXFD7SQOz9GPJX\/gqZTsjdJvTHGhDGzCy7SNfWzFW1NZy8MLPh51z6aV1La9coX\/3BGfoGozPHORTlb58\/ySvvXKGpbXjObjUXl8GhOI6rJi1GSoPrai42D\/CNF84xOpbAdpIZaa6rcV3NpdYhXn5r9pZFOe5sPnDiZ3n+Pewq\/2UE18YwCNYX\/TSbSj816zmaR\/tn3ee93ivzHOHCY0qD\/7jpUUp9IbzSJCzdWUr\/azzSpj6\/k02FrawM9GJOCZwebj7IWPfZGz\/wHNPQWhMfaqPv1PfofPvLDJ5\/EXukHdvvm57OnoripckssUz7aU1RwxwmBcuDLF+BMOfWJkVU1CC\/8Kd03LuZFx+J8ZP7x9i3e4xTa2O4Mp31SmDZgpKh5HurhSYuowxYA5P79Hv6EDr9\/SkDmuoDiN3PgD+UjIMSElbchfz07yHvfiqziLtNsGSAVFY1J1oKM373ruIqTd\/QTJFSUnh9zTwdV\/PiW9NrqNm2y3MvXSASc+aVdq\/RyAzTl6vSizbH1TS2DjEcztCYN8cdz+3\/ps+DusJHqMl\/iCujbzIUbyFglbK64FGkXLi\/jsXWA6\/YF+S\/7Xia80PdnOtsgcvpq0wDVPqGMMaDJgo9EUJmnHOjFcmijsphpPltAmX1t21cxO2G1prhxn1E+xpmxOzYBXm4HgsZi5PA5Lx3DVes5Qg0qxKXqdPteHc+gZAGocrNhNuPpYz7sYZHkLaTfRSOHUddOo6xatuc7+eKfZzDeW\/h6nELhQHLOy0Mlf7qpgvVnSY9pUkh7kpFr9VJSTwZbO26MfQsFXxs4si7n0bveipZrNGw7gjBM5WV+fdyefh1XD19ck+miysyrXlDKdpC3Lutim+9lMH1mQUDQ1EGhqMUFySF1PmmAdy5dhcdJ2N17jlwqWWIbeuvr89djtuXO+utnwNSSmoKHpjXsdWhIppmsf5sLrk1WV6ZEEKwrqiCdUUVHA4fTtNmQ+OXCYo8V1eAUoApXSq8I3gngii1IjHahTc\/V\/b9ZhDtOU+kr2E8S+sahGDwrrU4J7v5fugptBDYIhkL02ItYx+ap321rARC1Tuwo4PEB5rHC3CO9\/1SLr6+gbmr9jl0Z5\/AVTZHe\/42GYM0BZlB+EDS+mNck5pujAyxpCcCowO4\/kGaNwmcNNYjgDwrGdArhEi63u5ASnyrKfbV0h9rROmr7q9A2Qnig6vQKn3Ljg2rZ3a1X1aeN97V\/PrGNTQSnxQ\/F68MzrvQ4kIIH6X0rDFGOe5scsv2efDpusyFtSSC5fFyvvbDM\/zDd0\/x4wOXGB3LkC1zC9i5cyd1dXXXxDdpSjyj1Od3zfCOSAFLfKMUTooigU5V8TfHDWG07Whq4TOOMkxeKn6ChPROCh8AW3pICA\/ffa2RhOMmm+SueYySDR\/Bv2Q1nvyl+MvrCa7ciWOquWX1WF7EirlnNHaOHU85kfaWOLgi\/QhsQ9NbctX9ajhQOmgg2y9jfP6PqXz4P2GY6QWNIbysK\/6pOY\/3dkMIwQPLvkhFYBOGsDCEB4mFFezA8PeRLvgrKXBSb1tXc32V510Fpxr6JgVHpubONwNDCpYU3ZniN0d2fGAtP9fDyrwSPrpyM99rPjFjmwBqO1fy+uXWyc+GRuNcaB5k9+al3LOl6iaOND1CCNatW0d9fT3hcJjYUAuJtoMIlb4dwdT2NtpNMHDhZVAuhidEsGoLwrCIDTSB1niLVhAoW4M0co0hrxetXNxY5h5YSgsKvFFGnRSZfONK9u1j7Ty4czlCCDx5FXjyKqZf56PrUX\/328m+VtlgehCrt2e37xSi7mDKKuuNKxOsavakD8wW0FI5\/fmsabUAhVAOsryGe\/N+l\/1t\/x2lE9Pi2gzhZWlwC9V5u+c83tsRS\/p5YNnvEk500xk5gdYuL72qcCLp3TyGFAyHEyxdoon2nCfcfgwnNoyQJltLamhtCzCamP\/7fKVjmH99tYFPPLaGlVUFdPSM3TDry0Sdz3SPkuNq3jvbTfXS\/FzW1weU3Lc+Tz5cfRd\/sO0p1hVWEDAsQqaXe8vr2NCxFiOaOgD03ROdXGqde9rojUQIQV5eHgWFJXN\/GMYL5bmJUUaa3mS4cR\/xgSbig82MNB+k+8g\/kRjtvgGj\/oAhBLOlhSsEjs5ciPDaXkszLhMsgLv2gjnLBCck+ILIT\/6HOQc7AwTMEoSYOdaIX3N4c3Ra4UEAV2hsQ\/PmzgiuAUIlrT57jvnx2hIs3+SYywLreHzFn1CdtwcpTEAQssrZVvbz3Fv5Wx+oGDWtNcGOXmpfOcnKb7zMz7a\/xo7Ie3hV6t5uQgq0UvSeeYHhy2\/gRAeTPc7cBO7gRZ5ccZoSfxRjnk0+HVfT1TdGa9coG1aVztoXcb5YpqQg5GXr+rKMY23pHOUr3zrBd1+9SHd\/rsHzB42c5ec6WBos4Dc2Pjz5\/1c6hvnOLNWh9x9ppa568fXPskLlCNODTqS3\/MzOlHWWctBA\/5kfUL7j55Bm6jofNxM3MUZiuAONxpu\/FMObd6uHlBVCSDz5S0mMdKTdR6Lpjc7\/frTWxBIuxn2fTuYDnTmYFDnKHW9tIcDjg8IlsOF+5Po9CM\/8vtOlwc2INFK7rdJhODTG3vf9k0UHbVNzdnWccEDhiwkqekzqmzzkh5Mp6tTvntZ8ssBbzd7K35y8rw9iY0qtNerVr6HOvoN0ExhAIbAr+h5bYqd4ruBjjBrTm4XatuLCqfcIlbZgymstMhqhbR6vaaLd\/yhNHSO0dY0y1yx421GcuNDLMw\/W8bEPrea7rzagtZ7sOwZJrb9zQwWtnaP0DkZQOhmjky0P7apmbU0xbd1hjp+fmbo\/lVjCpbl9hOb2ESrLgjz7+NpZS53kuDPIiZ8F5FRD36z7DI8uzjgZIQRFqx+h\/9wLGWJLJMzeD3s6WhHpPk+oasv1DnHeuIko\/Wd+gBOZ8v0IibewmqI1jyFns3QsAvKW303\/2R+m\/W4G4rPHL9Qum1nhXGvNsXM9HDndRSzuoDWUFu3gvqcfpjpyGew4orQaqtcumIiQwmR3xf\/KwY4voZh5P2ubPQSicjKw1WcLtp31sy1VdQXlwsn9uM2nEI9\/AblszbTNH0ThA0DDe6hzSeEzFQsXQ8d4evQlvlH47IzD1hZ0pBA+V9FOlALPKHFbzVn4TDAWTS6wqsrz+MLHNvDtn1xkYOiqNUprOHyqi2DA4tNP1rP\/SCttXdm3sZBS8L3XGun8\/9l77zA5zvvO8\/NWVeeenAMmIA5yBgkSoBjEHJWjLVleyWHl9d2eb29v71n7vHe+9Z73bJ\/92D57LYuyZStQWpKiJAYwAyRIEJkYDDDAYCImz\/R0TlX13h89g5nGdJyA2J\/n4SOhu7rq7Z7uqm\/9wvc3FshLNA2OBvnlwW72bq0nFIlT7LJRUlRwg75VKUjcJSSfH9qNiK10BRUbnkRzVYJQEaoFhIq9YiU1u7+OYs3fGVqaOpHJS9k3XCaMeJiRo99LFj4A0iTq6WX8zPPIBXQsXWtsJfWUrr4PFC3xHzCTChOancqGdRiZDOyAfduTO\/OklPzi3UscOn6ZYDiOYUpMKRmdDPHi4VHabetRdjyIaGpbchHRWLSH\/Q3\/DkUkC097RNA8YEHL0vmV\/EZM8I4hf\/xfMF76a2SuNUu3MOaRX6KkaUhQkJQZXir18TmPmYDEbUmdEptBN0w6OroYGV9YmkgIKC9JRAzfOdrH3\/74dJLwmUswFOelt7qoKMmvMPm193vpH\/YnRZNypbPHwz\/\/vIOfvdnFsy+e4V9+0ZHSoLHAzU8h8rOErFpRmrWuwmm\/sT9yW0k91du+gBH1Y+pRVFsRijZz93PtxJ0ZjxAcOZsooEZgr2jFVbM+Y\/pMSknMO0Bg8BR62ItqdWLEwyDTTyTXQ5NEPX3Yy1uW\/k0sMc6qtdjLWgiPX0APeVAsDhxVa9DsifTFJ5VRXv+gL+Vrn75\/NVZr8nevd9BH94A3ZdGpbpi8eaSPNS1l2K3L852td2\/n06v\/ng+H\/obLgSMocYM7TtjJ0KmenYsnMN\/4PupDX1+qZd6UyInLGavEJFBjjFFZGWNd6RB2VUcisnZhmRIi+sLvmVVFsL2tmneP9nOsPbPXGIA3EKO63IlFU3JujV\/sTahumOjTp4zh8SA\/fLmDrzy+gbKS65+6L7B03NhX4puMDasqeP1wb0Y7+L3bbg5fHNVWNK8mxla6gvDoubz2IxQNW3lrXq+J+YaYOPtS4kQ8nebRg2ME+o9SsfEprEXzO1aklHg6DxCd7L5i4GdEMgvRxAtNQiNnbwrxA6BoVly1G1M+t2VdNS0NJbx9pJ+BET9CJFJd+3c14rTPL0w+3jGS8YIiEJy7NMm2tuolW\/\/VWBQH+xr+LVE9QODFP6ZkcmhxLi7ShI7DyLs\/lSjgvl1R1Ixde1IotLaEsDsCV9JcYro\/Tsr0RuACGAqm\/1wVJfH6VBpKUwVb11VTUWrnWHvujRD9wz6qyp2MjAcXNWpjocTiJu8e6+fp+9dc82MXWD4Kaa8lRAjB5x5el\/bkvXpFKVvXLd+FZLlxN2wn7yncQuCqXp\/z5qYeTQgfI55U3yJNHWnEmGj\/GeZVdQx6eIqJM88TSeF+nAtGPJT3a25Uit02nrp\/Nb\/9pe381he38\/C+1pTCBxKmc5nQDROPL3MaZKmwaW5KA\/Pt60KqxvGyaj6sqGXInmPaVSjIS6ev\/FNKk9FQB32+9xkLn7\/uHjPXArlqO0aG32qsugy7w5hX3yMEaQ0NdVOhw1OLLtPfM29YVYHLaZ22xZBX\/rOpMaodPna0ldPeNZFXDFk3JNvaMnduLTfdl33E9fQR5AI3H4XIzxJTX+3mW5\/bwrvHBrjYN4VpSkrcNu7Z1cjKFfMLTm8mLM5yHDUbCI+0Z91WKBoIhYqNT6JYcg8Xh0bPZbSSldIkPNqJqy5hrufr+5DA5RPTHUkLw+KqWvBrb2acDgtT\/vQCSFEErhTjDpYNz2xvxUrTAAAgAElEQVQ0wAR+umINh6obUGUiImEiaAgH+ObFjymLZxBuUsJ0vctg8AQfDv01+pz2bovq5M7ab1Pr2rxMb+T6o935JLHOY5DCtyuOhq++Hi1LflE3BXJaQCkCOjx1tHvS+5QpisA0JKFwHE3o3NvQgUOLoQgTm2oSNxWmTp0n5tib13sxpeS193quqyOzIiAaM7Bome0kCtw8FMTPMuByWnl0\/8rrvYxlQeRyzyYU3Ct246rdlHcnVcTTmzl6Y+pEpnpx1W0iPH6R4OWTixI+AM7a\/F2KbwW2ratibDKUNvUlgPUrK67toqb5QfM6PqqoJa6ozL189zmLeL5xFb\/WfTZ9XENRENVNjITOcOjyf503RkPXI7x7+Y+5b8XvU+VYt1xv4boiymsxn\/o3RH72VyimgUYcAxUBnLOtodKSOYqiS4VznjpCug0pNAYDxcTMzBf+0iIbnb0eTFOyv+E8JdYw6hyBZZmOMtVGP8CpbSKkZ++kEgJ6Lnsxr3NPginBblv45dIbiHLi7Ahd\/V4kkub6YnZuqL1S\/F3g2lNIexXIj1yGv0qT0HD7guY+5TK3Z8Yjxt93ZEFprqv3NnH6J\/gHjt0W6ZC5rGkuo6zYnjKdoKkKW9uqKHJdQxsAWyKtNWm18WFlHbEUA0dVKfly7\/m03xI5s5\/61Rwb+Yd5wmcGQ8Y4Pvrskiz7RsWxcgPKb\/wpXRs+zYfOPbzn3MuzpV\/mTfe96FmEDBI8URfd\/ip6fGVZDTQFsGN9dcIywxakzBZKEj5zmQw7sKm5+Ym1NtwYdVvlxXY0VSEUjvPh6UFefPMCrxzqpm\/Il\/W80Tfk43svtnPy\/BjeQBRfIMaZC+N8\/6WzdPZMLmg9pinxB2OEwovxZbu9KUR+CuSFo2IV4ZGzWUWHEQsw1fU25W2P5Lf\/ylXEfEPIVOF6UyVs2omJahTPBHo4h4LmadJPgpZIUyfQfxSkpGhF5rlttxKqqvD5R9bxxge9dPZ6UBWFhHwQ7Nlcy+5Ntdl2sWTIWBgiidqrE2Xp6+J2ekbI2nXoKCIUGSIQz1xUOxXtIaxPYVeKofdVzAvvgmmiNG2FdZ9LWD3c5DgcNlbeex\/\/7bmKpGLhHn8lq0pGUNOpSAHDoYTwsFoUYvHsNzKtjaW8daSfuqIpFDF\/eynho7EWev2VWW0ZAFY3lRKO6Nc96gOwqqmUjksTHHi\/BwkY0230F3o9VJQ6+OxDa7Fa5gvEaMzgxTcvol8VXZUyUVP3yqFu6qvduJ253WSYpuSjM0McbR8hHjeRUmKzqtyzq5FNa27P9P1CKYifAnlhLa5DqNbsERdpEpnswYxH8qr5sVeuwddzOEn8RAyNnmA5IWN6P\/4hxMXLbCuVOVnkpxc+c5er4x84hqt+y201j8xqUXl0\/0ru3aMz7kmMLqipcKIu8bwjKSXj4fP0Bz7EkHGqHetpLNqDKqYFhncCLBaIGURUDT3NGIrGoB97hquhABjrw\/Z3f8iq9RY6m9ObiipoxL1dWF\/8S\/ADhgIIzPOvwTuvonz624ia3Qt+zzcKrx3qmdclddZTT3PROEIxuDrwp5sKJ8ebMKcjrLkIHwQMjPipKnPgjTg4Ob6CkG7DrsYptkZoKpqg318+LXxyq5u51D91Q5hUKgrousnLB7vnPRfXTcYmQ\/zi3Ut86oH53WBnuzIb30oJp86Pcff27DMfpZT87K2L9Az6ktr5IzGD197v5Wj7CF97euMN8ZndDBTET4GMRKNRTNPE4UgYjQkhMHOssRGKih6ZwmrJPYKgqBYqNn+KiTMvIA2dcFxyzleHSfJ8K4lCxLTgyBA+nxlsmUsqDRLvLerpw1G5Ouf13io4bBorapdn3EfU8PN2\/\/+JL3YZXcYASY\/3HY6OfIf7VvxvlNtXgdV2pXarNhzEZhpEU6S9wpoFA8h2+RSGzqazCjFhoacp9XdEShPn838JfgFzIxGGCmGJ+dxfIX7tT1Bu8oL47kHvvMcihpUDA5vYW3OREmsYUwoEEhPBqfEmLvnz60pNuDIP4QvEiOtlJH6rcvp\/TU6MN6EKM2fhA4k6GyHllT1dDzRVodht4XhH+iiiYUr6hnx4\/dF5jtADI4GMdhKGKekf9ue0lu7LXnqvEj5zmfRG+MlrnXzu4Vuzjm2pKYifAik5deoU\/f39SY+VlpZy5513gJG5RfoK0kQo+acOLM5yanZ9jcjEJbrPXMBMM1JjKFxCs2sCVcw\/GeQrfBIvkvPa6AssDiklbw\/8X0xFezHnTHLXZQRkhDf7\/5DHW\/8Ce3ElFJWDZ4QtU2Mosi3l\/o6VV\/PgUC9qDvVkminYes5O74o48qqvgUBlQ6ARERxJFj5ztiCmIP\/232M0rkXZ+zRiReo13eikK0kJxO0cGNhEkSVMsTVM3FQZCxchF1gKOnHFqVlc9b8KEtCv\/iPkQL6ix2HTEmNa8j5SMlZNwZCS1sZiLvV7MzWgAonzTN+wj81FyULZomX\/LHPZBuD42dGsPkf9w378wdi1rdW7SSkUPBeYx6FDh+YJH4CpqSneeP11SDGROxVCs6E5yxe0BqGoWMpamcrgLD8VdzESKcaUV0eFpveRt12eQHPceENnb2YmIhfxRvuThM9cDKlzceoAQgjE1sSQYIuUfLPrY6yGgbgqxTVpdTBid+Z8cVNMQaUn+UKgCA2nVs66y+HpVFc6pr8\/A52Yz\/+\/mKffyfGoNxf+uIPLwXJGwyULFj65sbzpGEUR7N5Uy5efWE9DtXtR+6qrcvP5h9chJTkZK0opUyq1tS1lGcWNRVNy7qic8ufmuZUpSlVgloL4KZCEx+Nhaip9IbGux\/HHcwgYKhrFLXcvKv8cj8ezvn44Usq5QAOGuwVr6QrslWsghxqfVCgWB9aia1fkeztwOXA0bccVgCnj9PnfT\/zDOpsyaPN5+J87PmKHZxSLYaCYJg0hP7\/SfZbGcCDnv64mrDQ7dmNREp1kVsVFW9mTPNLyf6MMRcj5gqzHkG\/9ABmcn0K60VmsELhZECJRJF1T4eILj7bx21\/cRukCB5P2Dvn40cvnuNSfW1OFYUqKXPOj3K0NJWmjMEKAzaqytiW3Gy5Hjq32wVAhep0LhbRXgSROnTqV8XmJYCxSRJE7Q+pLqJS07sNZtTg7eKvVmlP7ecxQsdXtorK6momzP1\/AkQRC1Shve6RQLLjESAyyJS\/kzOw1zQqaDfTEd6shHOTXL2U31MyEME1Wr\/wV1hT\/D0hpIqYLqU3TRAbz94eSHx9E3PnEotZ0rXl4Xwvfff5M1tTNQtHURPeTXObITjZqKpyUFs82V9htGo21RXgD0QW993wnaZw6P05TXWLOnqIkvmdSQnW5k0nv\/KiNw6bxxUfb0KabC2K6wfsnLnP24gS6YeJ2Wdm\/o5E1zQlxtHNDDb9MUXR9NTUVrvwWfptSED8FkohEsoVWBREjVR2PglA1nDUbKG66A5GiWDVfVFWlpqaGoaGhLCsyUCdPEFbWEPX05x31sZe3Utx6F5r9xvAUuZWocrRxQbyaqPFJgUCl2r4R8\/yHyLOHrwifJaNuJaI4kVYQczvIvGP578uII8fmp4NvdEqL7Hz1yQ389LVOQpHZLk0hoK21jAu9qYfbpkIIaKxxc3k0iDQlFUWCda6LfDTaRMy8vtYAoxNhxiaDDI0FGRoPYrWoNFa76egaZwED3vOmq3+KP\/+n40CiUHrnxhoMw+Rinyfl9rG4QSAUp9htY8of4XsvtCel2KZ8UV56u4vG2iI+\/\/C6xJDhI31EoplF+8bVlUv3pm5hCuKnQBKqqqLrmdvYNeWqH59QKVtzP\/bKNUseOVm\/fj2jQwMYJNqQr0Zg0uoaJzoRITp5CdIUR2ci6hvMOC2+wMKpc23HojrQ9dTip27MwvZXTyD1I0t\/cKsD5bFvpnxK6rmYw810K00jBDhvzhRSVZmT3\/zCNiamwlweCeC0a6xcUYKiKKxrneKlt7pyqm1xOSx89qF1CCEw4mFGjn6PzskKdPP6V1AYhsk\/\/7wDRVXQ9UR\/qKYpOGwWwjH9ijfPtUA3TD48nfmmTTckb3\/Uz5cfX8+\/\/KIj7ec\/MOzn\/ZOXuWtbA9\/41Cb+9senyKRVn3\/jAl96LPd5ircr1\/8bW+CGYu3atRmfVzCpsgWSHhOKAoq2LCkjh8PB+pIhSrQQcwclgsShRllTNEKxZfrCugBHaQBMndDI2aVZcIEkFKFyX+N\/xKq4UcVs7YNApWbSxl1H7Sg5CZF8ELBqO8qv\/2dEUZqC+xOv57Yry5y1qRaUjfsWv7ws+IMxXnuvh7\/4\/jH+7B+P8tc\/PMn7Jy5jLIHbX0Wpgy3rqljdXHYlNdPaUMIj+1py8sxqbSi58juPjF8EKeiYqsfMaj6w\/EgSqaoZQ0FJwocnHNUpK7JTWmRDmR7catFujPT28HiQ3sGprNGcY+2JIma7zcK\/\/tKOjNsOjQX54NTgkq3xVqUQ+SmQRHNzM2fPnsUw5v8YBSY2NU6p5aop6BJUa44Tt\/NECIHd4WKVMo4hBXFDRSKxqmbKFveFIE2d0Oj56an1BZaaEtsKnlz5l3R536LXdxBT6lQ7N7L1w24UM\/PdMYoyrXWzXPg1K2L7A4jmDdC4DqGkvxjLeBTOfTDzL1IXPUsoC6Bs6sc8uD5Rj9S4FlHbmnkdi2RkIsgPf9mRdGcfiep8cHqIk+dG+fqnNuG0L116aWwyxPNvXCAaM3Kqi5lbu6JHfMQNk4h+YzthG6Zkyh\/hV57ciMtpQQAHDvdyrnthoyWWmjc+6Mu6zVyvoIs5FGEfbR\/mzq31i1rXrU4h8lNgHg899BA222yXhMBEYFJqCbO2aGTeHaLQrFjcNcu2HntZEwCqkNg1HYdmLJnwmWHxM8IKZMKqullfnuiyeqz1T9np\/izK5Gj2F6oWcOZgvigE4s6nEE0bMgofALzjMLNN0dyIIrP\/3xVB7O0EVxTKo7DuDpSnvp19HYvANCU\/OdCZNqURiRk89+r5JTteMBznx6+eJxCKZzTiS1pDdPZ3olpdKCJ1OnqpSTV\/Lh8kCbNHq0XFYlEZz+ShcY2Z8ufXnXVpILv4ycmV+zanEPkpMA9VVXnwwQcJh8NcuHABMx6mLHoGi4wyr3NH0Shdde+ydknpoeW\/Q7MWLZ94K5CCWDghQHJwCxdb70N++HMw0ghUVUPseQxhydHYbY6btHJHFzKqIjsaIWgDWxyxdgilOuG6KxVQHt2HqPm13Pa9CHoGvcRimT+PSW+EcU+YyjJH2m1GJoJ09njQdZO6Kherm8uudBTN5dS50aSZUxU2PxvLL1Pj8IGAyYiL9skGhsOlV7YpL509rqNqDb7eD6i0+xmLFOfzVvPGZlWTirXzRoKcrqmJxQ08KbqvbmTstllBry1SCBZIUBA\/BdLicDjYsmULAHpkPVMX3yLmG0rcWUsTxeqiZOU9VyIzy4URD2XfaB55mOILFXf9tgUco8CCcedoJmmaiG0PQGkN8sCzEL+qG0xREbsegQ13YZ58E+JRRGUjNG9M1KLNQRo68sIx5MXjMNP5JUEpicCdF1MeXiAgj9l0i2FsMpw19SQlvNXZRaw8TJHVxp6qFmqdCeERixu88MYFhsdDV7q3zlxUeOPDPj71wBrqr\/L7Odc9eaXItsk9zp7qbhRhXpn1VeUIsK\/uAmcmGzg3VY+mKezYMDv2QrW6cNVvZUv4Em9fduU1uiJfQhEdl8NCcIFTzA1T0jfsY21LOaaUKIrIqcD7RiESNfjhy+f45N4mtq+v4czFiYzblxQVHJ6zURA\/BXJCsxdTuelpjGgQI+pDaHY0R+k18cXRbCUYeUxwT5D7ia24+U4s7pt7ftPNhrDYYN0eaH+PjH+rqkbQoyhte5BrdiC7zyB72xGmDjUtsHo78r3n4R\/+Q0LvGgZSs4LFivL07yDqVgIgPSOYP\/4vEItCfPauX46WwIpx0sxRBWEB551L9bYzksuYA1OYnJjoZyLmQUHwWv9ZNpU28K\/W38V\/P9DJ8HgIc46Cmkln\/fRAJ19\/ZlOS4d6MQLIqcfZUX0JT5v8dNMVkU\/kAI5FyGpsaqa9KFlDFzXeyyuIkbHby4VATAtCliiLktPN6eoSAR\/a1EgzHOXhsIKvwi0TjCJF+XEc2ugd8\/LefnGbXxuq087GWGlURSCnz9gxKxeBogH988Sy7NtZQ7LLgC6YXgvftWd4b0lsBkYuJ3Ay7du2SR48eXcblFLjZMOMRgiNniXr7EULFUbUWR8Wq7HUXeRCZ6mey45ewDHU51uJGKjc\/veT7LZAdGQlh\/vN\/StTgpBNAqgYI2HwPyn1fTPbqAYw3vp8QUHqKugmLDeVX\/xDcZZh\/\/79A0Dv\/OK4Iyv4OhJaqRkIDexs0fX8B7y5\/vIEo3\/npxxm3MYVJT2Mv8TldaMIUlASKqRlPn7pVFcG2tmo+sXvFlcdeeruLC70e1pUOsrl8IKX4gUQHVcDSwro9j6W92ZHSJOQd5WJ\/AH\/UwuB4mIGRQMptZygtsvGNT28mHjf4mx+dytlr6GoS3Vsq29qqOH52BMOUy2bomA9Om0ZZiZ3h8eCSR5ksmkBTFcIpusTu2dnIrk0Fp\/oZhBDHpJS7rn68EPkpsGAinj48515OXE6mhUnMO4iv530qN38azb40dQC2kkYU1YK5DOJHcxZmeV0vhN2J8it\/gDz+BvL4AYikuFjO1PmcfBPTP4Hy1LevXIBlyA9nDoGR5g5Yj2N+9ApKUxvEIqQUWEE75vGVKDsuJdY0I4KEEyy1UP8Xi3yXuVPittFcX0zvoJeUnlbSoE4f5smLhzlY3ciJsmp0RUEqEq\/LR\/V4dVqDT8OUnLkwRvdlL6FIHLfDmvD5EVBuCyUJHykhZmpIwKboV7bJFOUVQsFVWsvW6fKgF964kPX9xvTEhdtiUdm1sYYjZ4Zzjsio02krTVVoW1nOHVvqKHHb2LCqkpfevjhnyOq1RRHQVFdMW2s5F\/o89Az6liW9FtcThfmP7m+l\/eI40bhBbYWLu3c0YLcWLuu5UPiUCiwIPepPRGNk8p2HNOPImM7EmRep3vnVJUmLSSOGGV+ek5mtuG5Z9lsgN4TVgbjzCeTanZg\/\/M8QCabZUkLXScxX\/gHlkW8ghED2fJxohU9XIyxNOP0O5khPUqprHqMlmG9sRjSOIytDYC9HrP9dhOvunIf4LhXP7F\/B6X98lYPW3YBEFxaQJho6FbqHT\/lfxibjNIYCPDzYw\/+zfidhzUL5VPYBwtG4SXS60DcSDTMViCKEIKxbMGXiwt3nL+f0ZCOhuA0E2JQ4G8oG2ViSX91TLt1jc00H926r5+T50ax+N1dea0p+58vbsViS\/z7lJfYFR5AWi6oIFCUx3f3yqH9aoCwfpimZ9Eb47EPrlvU4tyoF8VNgQfh6Ds8TPrNIzHiY6FT\/khRDm\/EwQtGQ5tKb4Vnc1dk3u8UZDJ7g2Mh3CcQTnjsWxcWG8k+xoWJ504Ey5Ed2HEYOd8OFYzl1ftF5BNbthpVbIB7L4TUSRnqy7zeuIbtroRuw2BA1VeC+9sZ94uwhtgROs0Z00G5rY0SrwSpjtEU7adQHr8R17KZBVTTE1y618\/+t2UaZvzTvsS4znV7nPHWsLhmlw1PDWU\/DbOGyhLBh48R4MwGbncc35b7vkiIr\/cOZt5lbciFE\/qOIJ7wRaivnz7G6Xr1QhimvRHmuRU2RYUou9Hq4e3vDsh\/rVqQgfgrkhZSSixN99I71UIRKI0ZKZ1hpxolODSyJ+FEsTuRC3ZszoDrK0By39zyvc5MvcWLsH5Mei5tBTo1\/n6HgCR5o+t+X5bjm8deRB59LFGzk4\/Bs6JjHXkVduQXcpenb3xdDPIp5\/HXUpms\/IkAefwMwccgouyKZhwxbpGS9z0N5REdkKS7ORMS00Osvo93TiCnnF12bKJy\/HEO808WoJ0wkqlNSZGPnhhpWN5WhpGi9bqot5syFzB1JsbhJJKpjt2n0DflyjvrM8PN3uqitdLFzQw11cwqx17aUc+TjLMrrFkFKiZSSc92THDk9xKQ3gqIIWhtL2Lu1nqry5TGfvRUoiJ8COdM5NcKznR\/gj4UQ0pmoCQCeIshqsXwmgYpmxV7WRGSyh3y6uLLhbsxsE3+rE9MD84TPXEbD7VyaeouVpfct6XHlxRPId59beAH7cGKytexcxuaLwdSt78tOMPUQzHToiqAx6CWyCPEDgo\/GVmaNmJzrmV1bKKLz6ns9tHdN8PR9q+cJoNXNZZBlArlFE\/QP+6mvdvPimxfz\/mX7AjH8gRiX+r1sX1\/N\/p2NAOzeVMdHZ4ZviKLn5UQRsKK2iNfe6+F8r+dKJM8wJRf7prg04GXjqgp2bKihojS9L9TtSsHhuUBOdPvG+cv2t5mIBolJSRSFGAp+FH4k3XTLq3S0ULCXrUi9swVQ3LoPoVlZyqC279K7S7avm5FTEz\/Ius3piR8t+XHNt36wuM69eBRzahSWU\/xEApjnPly+\/afDmqenkASxJKdxBZnnfuK6Sf+Qn+NnR+Y9l4sjsxACU0pOnx9Nas\/PB0miZf\/kuVG6+hJ2GDaryjP3rV7Q\/m4mFEWhptJF5xzhMxfTlHx8YZzvvdjO3z13iin\/zWXsuNwUxE+BnPjxpePE0tRX6Ahelsl3FkK1Yi1pXLLja\/ZiqrZ+Hnt5KwgVoVhAqGiOMtKbtGRGGjEinuxzdW5VJsLZO3Iier7+SpkxPCPgz5wOyYpQkMdzHEy6COTLf4+czDJ7bKnZcm9em2sSdO\/WvOt95rKYngTdMDnaPszVlilCCKoyuFBDIkJRV+mia8C76Inrcd3kg9OzwzxbV5TyjU9tor5qfk3QzURpsRUhkm\/5VCXR5v7IvhbOXZrMqbg8EIrz7PNnCIbzG6VxK1NIe93GxEMefN2HiPoGEx0ljjLiVW28HgzT7Z\/AoqrcWb2SLeUN9AUyj5jwoOKRCmUi8UMsXXUPJpKPxwc4NTmAKWFjWR07Kleg5eEBJKUk6h0g5h0ABK66zVhLm4hOdoFQUCxO9IgfWFhNkK\/38LI7VN+oaEr2eoC5vjpSmnDpNOax18A7CvYixLb7EW13gKaB35MQou4M5peHX1z8wqUJvWdyK5Be5HHMt3+I+un\/cXmPMwdlz2OYR36ZfZArEEfjrGMDwuJEnVNsmy9treXEdPNK5CRfIjGDWNzAdlWL9R1b63nlYHfK7ishwO2w8JPXOvEFs1+QLZpANzL794xNJjvBewMxRj1hFME8k0GrRaG5vpjuAS8IkTJycr2xaIKNq6sYHAnQP5xombdaVFY3lXLXtgaKXFbeOtKf8\/5MCW9\/NMDj96xcxlXfPBTEz22Kb+A4gd7DSY\/poQmM3veokVbel05AMBw6yS\/6TqMIkbHcRkUSmb4\/Ue3FBFy1\/OlHPyMYj7LWDLFPRKgcP87gBVBLVlDdehcWV2XGNeoRHxNnXsSMh690egUGjiVvpGjops4L0kkPFu4TIXYQz\/luVg9OEB6\/iKPy1g+TX836sicZC7dn3KbBtRMAaZqYP\/8b6G2fHTHh9yDf+Cfkuz9OiB49ljCJcRUj7noGZcNd83fYndnEL2c8oyxl\/Vda+s8hwwGEw5192yVAWGzwlf8I3\/9PpH1\/QgFVRVu1g\/rdX+QLmkZlqQMpJf5gjHeO9tPV7835mOe7PYhFDAqWUqIo86Ova5vLGB4LcPLcGIZhXnk3miowDEkgFM9JsGmqwpZ1VZw+P5YxyiHmpNqiMYOfvXUxrajRDUl5iZ2GqiJMJB+dGSa8mNlhy4BuSD44NZgUFYvFDc53e1jZWEKRqxyrRc1r5MeF3kmgIH6gIH5uS8KTvfOEzwwasJ4Y57FwFisx00ib7pqLgaBUESiqg9K2J\/iD028wFQvyhAixScSwTp+XFMD09jN2+qeUr38Me2nquiBp6Iyf\/ilmPEzGi5ypowl4ghB\/Lks4K21sEnFs6V9x9ZHw9X247OLH7\/cTDAaxWCyUl5dfk7Eg2Wgo2oldLSVipLvjF+yoTgz0lCfegJ4z852UTQOiV81e800gX\/8nTO84yt6n5m+\/JFyjalZFhXAArpH4AVCrmzC\/+SfIV78D\/eem5zkIKK+D2hZEcSVi\/R2IslqSfXwFpcV2nr5\/Db5glBffuMiYJ\/v0clPKRX2c9VXutKM57tm1gjXNZRw\/O8L4VBhNVRj3hJGQc6RKN0w6uycxzMzRmZb6WVPVjq7xjNuapuTD08NXapOKXFYiUf2GKpKWknnpQCkTn8fLB7tprC1m89pK3j8xmLO3UZaP8LaiIH5uQ7yX3sn4vEXAXUQ4KxNzgKoxUJGMoKVMLilIVquCmpY7cVa3ccIzQsiIsRKdTcwKn9ntAVPH0\/EyNXu+gaLO\/xqGxy8gjTi5npUVYCsxjmAjgsAqZc7RHyPiw4xHUJZhgKXX6+XIkSNEo8kDOauqqti9e3fKO+ZryeMtf8bLvf+OkD6W9LgiLNzf+Ps4LeWJdtqjLycJH4lkuEpnoCaOkIIyn8KKIStWffpD12PII79AbtqHKJpjwFfRAMOXrsVbWxpMA5zLO7E8FUpRGXz29xb0Wt0wGRwJ4LRbEIQXLRMVJf1FU1MFd+\/I7DNTV+Xm8U+4CYbjPPvCmQWl5\/yhRDRXUURKDx1NVbhza\/2Vfw+MBnIzWpzely8QzbLltUNREhVc2WaCtV8YZ\/PaxEiPYNjMWbj96feO4rRrbGurZueGmnlGkbcLBfFzm2FEA5jRzDN3AOox+III4MakGoOoFHyHIgIoGHPK7xTArdn4xs7HcVsTBY4nJ\/qJGjp7RWSe8JmLNOOMfPQPFDXvxVW7KSkaEhrrzMvU0CpgAzGOSDsHpZ3HRfY73tmFyGURPz6fj4MHD6Z8bmxsjDfeeINPfvKT1zUKZNXcPL3qr5kIX6TT8wqmjFPv3olFcfDB0F8R1MwvmyUAACAASURBVEdBwupmjbXdVlxhhYjV5OCuEK0DFrZ1OBCAYkJMkxiAOvP9MCXyzEHE3lmzRHHfl5A\/+KPr8l7zRojEdHj7zeOVEgjF+NHL5whF9Jwu\/ulQlUTBssNhoaW+mEAoxvGOUQQC3TCvRHoe2ddKY01RTvt892g\/sdjCI39SJsSWICEKpEwMg5XAY\/tbqamYLW62qPndVMyIDE1VkqIoAlBVhQfvaubV97qXPXJit6lsXlNF35CPkYlQ2u10QzI0HmTXplq+9Nh6fv5OF6MToZyFZSii88HpQc51T\/DlxzdgvQ0FUEH83Gb0+8ZQyP6HFwLaiCNl4v9bheQ3pJ9D0sYxbEQRWIHtRNkvA9hD42BNpLBm2lar0s4dmEUacfw972NEA5S07J19fBHpES8qUSB3KSMZPfEDbGUrKF31CVRbbifzuRjRAMGhj4lMdiMBe1kzZwYznymj0SiXLl1i1apVeR9vqalwrGav49sAHBn6O7p8B2afFHCxKUb3ihh3f+SgfW2UPaccuEMK6hx\/GXv8KhEnDWTfeZj9s6LUrcTYdj+cfHM5387SYHWg3Pul672KvHjhjYt4A4vv6DFMSeuKUvbOiabs2ljHhV4P4WicEreNVU1lOU2iB4jrBp29nkVHoSTw+CdWMTIRIhLVqSp30tZaPu\/iva61nM5eT14CUABb1lYyMhFieCKIIgQtDSXcsaWO6nInHl+Eo+0jy1oc\/ZUn1lPitvPfD3Rm3dZmTbznIpeVLz22Ho83woHDPVkHys5gmjDpjfLmh308sq91Mcu+KSmIn9uIkxMDfK\/zQ35XypztcuYGJRxC8qCI8CCRK7OAAJDg6TxAze6vI4TChrI6Pp4cJCoFuaStpKkTHDyFq24T2rTwsJU0EA+MZhihkUxMQqe0ANCLRv73MSZRTx9jJ5+javsXUK25t8hGpwaY7PhFohtqukvHF\/bh8TSQ7YO+ePHiDSF+ZhgNdSQLn2mkCjpwaHeYNV2WecInLUMX5xUMq\/d\/BbN5I\/Klv1mc389yolnhmd9FlFZd75XkzOhEiPEcanxyQVUEtqsEhcOusWXdwj6PUERHEQJjkfJHEQKbVc060qG5vphitxWPN5IxdTQXCUx6I3zh0baUz+\/dWo\/VonL45OVlmdulKoJil42zXRNMeDP\/HVVVsH5lRdJjZSV2Pv9IGx99PMwHpwdzFn5nuya4e3uie+x2ouDzc5sQMeJ859x7hEyT01hzPiGk42oPM2nqRKcGANhd1YyqKByTNmI5H0cSGj135V+u2jwGCZH4Ip+YLnOOIziCjXje71Fi6hH8fUdyfoWpR5ns+CXS1JPak3OdrRiPL\/W8ssVxfPS7GZ83BTiiOQofSHjytL8372Fl1Ta4a3lnhy0KPQY\/+mOMt36wqCjktaR30JvVLFAAq5tKaahxk7HcTCS2WyrsVnVJppubpkmxO7mdIRozpouVk2eFff7hdVRXONHySIH1DfuZ8qU2AxRCsGtjLd\/6\/Da0HCNeMyiKoKw4cxuGqgq+9+IZXnu\/B38w83nBMCSHT17m+NkRAqHkSN\/uzbX8zld28Buf38qj+1uwqNl\/q0fP3B7jQOZSiPzcJhwd62UmCnFAOmkScSqkZO7vYibFtRCkaWJEfYkiPd8g36qs4YXRCKoM57ZfaaIHZ83vVJuL0rUPMnX+ldwWICTfKv4p9ZZRItLG4dBmwtHVWPLW95LQSAdFLXehatl7xhKCLUUBpsjtgnm9C56vxhcbzPi8VGGi3GBNrvYiRhx5+QLsejh5P3ocjvwiwwtzixouLzIxFT4eQX3o167zWrLjycHBVwJP3beaSFTn2RfOEE7R4aSpgrUt5fNExmKwWTUaa4roG\/Itaj+VZU5KptfV1TfFeycuM+kNgxC47Bp7ttSxZW0VQggcdgtffnwDw+NBjnw8RFf\/VNaiYNOUPPvCGSrLnHxidyMraucXu9ssKjvW13C0fTjnAabmtEdPc30xvYOpP4NY3GTSm3vh9cBIgKGxIAePD7BlbRWrm0o5fnaUSW8Yu01j67pqyortOd3odvZOct8dt5ff2Y115i2wbFwOeolNpxhiCP5elvC6tOOVAl1CSMKp6bTRQhCKgjQNRo7+I55zr1AyeppflV4UchdUkYkufL2zIwWclatydonWiLNK9VGqBqnVJnnSfYg1FT\/AXbcSZ\/1WFIsjDydoydjxf0aPZPdKiU4NJKI+V6EIKNJCZLuANzTcWBOZlWyfkQTNyFMhW1NcRHvOZHmRTLSZX29LACMOHR8gfZlbp28Eyopzr3Kz2zS+9Ph6KkodaKqCpgosmoKqCDasquShu1qWfH337l6BlkMUIhVCgNWi8vDdLQAcPzvML969xPhUGFMmxIU\/FOedowMcONybFAWqrXTx0F0tKQewpsKUMDoZ4vnXL9DVn9oGYu+2Ohpr8rM\/0FSFNc1leUWismGYEsOQnOwY5acHEuv1+KIMjQV544NeXn2vBzWHz3w50ng3OgXxc5vg0qyzXTgkUkMf4ODPZSl\/JMv4E1nG0TxKhOchJb6+I5ixwJUuLSHyv3YFBk8SGj1\/5d\/FLXeTS4GSEKCI2VyTphgoSoQi9XuUtu6jds83cDVsz2lfAGY8zPiZn105icrpjjDTiCWH1zO4Vbe6ZlyxU59YhBCsX3\/tJ4dnotG9J+PzmgFNg3mIZIsNZf3eeQ\/LkC+76Yhpgrs88zbXAgmy81j27a4zLfUlWbcpcs7+7UrcNn71qY188dE27tvTxAN3NvOtz23hk3ubcxYKmTBMk8ujfnoHvUz5Irx7rD9r5MWiKdisKmuby9CmxZiqCNY0l\/HVJ9ZT5LIy6Q1z8PjllN42um5y7tIkQ2PBpMftNo07NtfltX7dkLxyqDtldEcg2Ly6Mmsqa+772rC6gs6eyZw9efJBwrx1xnWTKV8Ehz17gqeidOltPm50Cmmv24TdVc28MtCeNu9uQbJTLMzrQigalqK66REUi8TU8fcfwVG1FiEEkYmLiYhNlsJngYGmTl31mAmxHoheANsazKiffFIpZtTH5LlXsLirCA6eROqzn49iceBu3I29YhVRT1\/KtnxNMdlUNECHvw4DlbnCy2KxsG\/fPqzWG6vIcFvVr9Lte5eUn5MEd1ChajLHcnJFhZJKaN4w7ylRXIHMGomTi58DthSYOvJqI8cbkKpyJ+XFdibT1KwoiuCOOd1bM1RXOKmuWLp2fikl7xzt52THaE4pF4smqK10oSgKq5tKWb+yAqtFxTQl0ZiBxaLQe9nHTw504suhk003TI53jFBfnRyZuWNLHRNTYc7PmU6fjXjcoKvPw5qWWRE+PB7kpwc6iebYtj8TtWprLaejK\/OYoKXGlOD1x7BqCrE0BdAz\/km9g16a6opvCAPWa0FB\/Nwm1DiL2V6xghMTA8STCjglVdYhWt0X8KtTHAQqohU0h5txGZnCugKhaAhVw1W3ZbpIeGlCp0Y0gKlHMPUYgYHjOew3jtt5PI1Fv4DIWbCtQaj5C43o5CWik\/NN+cx4GF\/PIazF9QjNhozpKddp1Uy2ll0mZgjGoiUgVFo376OyZumGvi4ldq2YBxr\/gDcH\/g\/kVVYFmmJn\/8hWhJhxHU6DUEDVoLoJ5enfSZoPdoWmDYl5YDdWvXdqLDZEeX5Rg+vF0\/ev5l9+cZaYnmx6p6qClvpiNq3OPFJmKXj+9Qv0pKlrSYVEsKa5nG1t1UmPK4rAYdc4fHKQw6cy16Jdjcc7XwAKIbh3z4q8xI8p4c0j\/VitGsVuK4oi+PGr53Nud7doCi6Hhc88uBaLptLSUMzweAB9kYNc86W+xs3lkQC6Md8MUUq4PBLgZ291UV5i57MPrZ03p+1W5NZ\/hwWu8PiKcjyRj+nyu1CQKCg0uz+mzt6LoiSaUCUwZhtjwjbBJt8myuKp0w6O6g24ajdgcVcxduIHLGlx6vSv03P+1Rz2m7D+N0w7ptRQxNX1NwJEIjTtqFpLePRcyhqdha3TJOYfpqhxF6HRc5ixYFpjRqsqaXBOAQIxcRJuUPEDUO3ayOfX\/AudU79kMHgcgUJr8SdoKdmPLBvA7P6j+WMuAFQLNKxBtGxCNG9AVKUeXQKJGjHl0W9i\/uyvUu9r2RBgsUE8e3Hw7EsEYs3O5VvSElJWYudrz2zi+NkR2rsmiMdNSoqs7N5Ux\/qVyz9WpW\/Il5fwgUSqqv3i+DzxA+ALxPIWPgAuR3Jq9kKvh8MnB7O2kKciGI7z4psXANA0NS\/h8\/T9q1lRW3Tlc9+8pooPTg1xrYv5L48G+OqTGzh+doSOromUUaC4bjLuCfOLdy7x6QfXXtP1XQ8K4uc2odPzMifHvk+DI0arWkqRdydxyxR+Rw9SXPVDEGBi0l7Uzl2Td6OkKA1z12\/G4qogHhjDiPqXdK2K1YkZj6IHx7JvjAA0guGtRGOtVJa9eJUAMsCVqDmxFtWiuSqJB8Zy9g\/KiqkTGjmLrWIloZFzZA9lSKJTAxjxMKrFsTRrWAYURaGt\/Anayp9IelxUNaI887uYP\/9rMIxEQbCiJgTr9gdQ9n825wusaNmE8tn\/CfPd52C4OxF\/N5bb90fCyi3QeTSnyemoGsoTv4XQFt4McK1xO63cs2sF9+xKLz6Xi0PHFpb6TicoDh7LfWr5XHoGffzp947icliorXTSO+hfVK3NTKRGz\/P7meh0nf09OOwazfVFeQ2eXQpmvuoP3NlMIBRLe3zDlPSP+JnyRyktWrpuvxuRgvi5DfDHhjg59n0MmbjDXhduokzonHF0I1NO65pl3DpGdazmqkcFmj1RXKmHp5a8I8fduJvw2LnsGyahoRvFBILbKHYfnV6mHUo+BWpirUIIKjY8ief8K0S9l3O7+OWAEfURGjyZ8\/ZCUTGjgRta\/GRCNLWh\/OafwaXTSM8w2JyINTsQjvydsUX9atQv\/q\/IaAh5+SLyl38LsTyiMguh86P8brwzFLUXSMbjz79uUAioq06dYr88urgbq2A4fs2FxgxSSqZ8EZrrk9vlJ1Ok5K4FMyKsbyjzZyqEoH\/YR2nRzWPwuRAK4ucWx9SjfNz7DxhmHAQoUqE0XopAENSCGZufDMUgoAWpvior4ahai5geRiq0fOpolGn7lvSiQ7EX46rdgKdzvstwdjSCkQ0UuU8n9FjRo1CVPBxS0axUbHyKeMjD2Il\/WcAxFo80jUTr\/U2MUFRYvT1Xo\/Ds+7M5YcU65LUYO53P6G5Dx3zl71G++V9vm0LQxaCpCtEcxtrMRVUEO9ZffYOVIBrLPcW0mFlmy4EiBHabRiAU40THKOd6JgmF4\/MmtV8LbFaVEnce5+rboPO90Op+C2PqEcZO\/ZjJaBdMFwMrcvYuVpWZta+QAi3FNu7G2foHW0ljThes8o1PU3fXb1Ky8hOgpDmuolKx\/vHpi8zCLjRS2pDl\/wZaXoLaPwCR+q7d4ixLv45lxuKqQLXl5xFyOyAsNth8D1yzFFOO37FoBAYvLu9SbhFWNmZvt5+LAPbtaKSybP7NQDxu5JSqaqorork+\/6jjcmNKcNo1vvvCGY62D+MPxK6L8NE0hTu21F0R7421mT8rKWXWbW4FCuLnFsbX8wFG1I86R\/DoIo45XeNTF6lDkem\/AgJBVTQ59ClUS1KNT2j0XE71M4H+jxBC4KrdQEnr3QjVkvhP0RCKBdXmpnLTM1icMwXWCz1JCETFl8GS+k5yLqr1+kzrLlm5\/7oc92ZA2f9ZqFuVmK213NhdYMnN30T6boCW+xucKV+EMxfzM4OsqXSyY0Pq3+qEN5JTkG7Pllp8gRurbVBTE4LjpXe6iMfnd1hdK1QFtq6tYuucmWx3bK5La7SoKIKGandehpk3KwXxc4siTYPw2HmQkrpIHao5LYAEDNovY2BQG61FM7WUOkORCpXRKhzm1Xdks3fLUkq83e\/ntJ6Yb4jJztcZOvy3eLveQag27JVrKF65n\/KNT1C981exFtXOHiVnN+ZkrMV1Ob\/WVbflmkd\/HNXrk95ngWSEZkF84gvZDRCXgmgQ8bnfS3R\/ZVwUCNfSzbm6VUk4K+e+vaoImjMYM775YW\/WfSiKoMRlz3m6\/FJSXmJHnWMGqYiEZ5HNorJ\/ZwNlxbbrEumZy8ZVlbStTO7Yra92c9+ehNv2XDNLi6ZQUWLniXtvnEHLy0mh5ucWxYzPtnRWxqrolt0Y0gABvc5eymLlOA0nO7w7aC9qT9T\/yES0xxQmNZEa1gTXzNuvlAbWosSdWnC4Hcxc25QlkbFZ52YzFiAy1okR8VGx8cl59RQWV2VCvOWJxT2\/XTYdzpoNhEY60MOeNHVIAqHZE+3rUk7XikgsxQ2UtO5l4syLSCOPNm2hUNx8Z+7b36bId350baa9S4l8\/wXYei8cfx3SDTCNRTAPPAt7n0ZpuwNxg81ju1EYGMmzOFmQFJGYy+hkkOHx7MaSpUU2SopsbGur5vJoIL\/jZ1ueyFwe5gvE+OqTG6godTDljzIxFcaiKTTUuFEVhbc\/6rvudUgfXxino3sSl8PCo\/tbKS2y0z\/sQ9MU9u9spOPSBMGwjtOusWdTLauaylK6e5umJBCKoaoKTrt2S9S\/FcTPLYpQrcjpC7qCwvapHbQXnyGgJU4Qp4tPURutY0V4Bdu9OwipQfyaH0UqlMXLsaSa8yVUnFVtKJoNKSWBgcVZ\/ktTJ+YfJjh8Fndd8hR3PZJ6pk42jFjuPh6KaqFy86fx9R4mNHI2hQCSSD2M6qzEXbcJoWjYypqudGm56jbn8RkolKy857ql2m4WZNh\/betr+joQD34Nee5DCPrSF+N7x+CV72C2v4fymX9bEEBXIaXMK+qjqQqf3NuE25k6vfn+idy8ffbtSMzGW9dazusf9ObsupwJRSTqdbK9H8M0OfLxEI\/uX0lpkW1ea7hFvf5dgpLpMRf+KD98+RwCEIqYF5EKhGK8fKibT+412bBq1gjTMExeOdRNZ6\/nyuehaQp3bq5jz5abw\/gzHYVf8C2KolmxFs9a2Vulle3eHeyY2sGq4CpaQyupj9RjlVYEApfhpjZaR3WsJrXwUVRsJfVX6lWM8BSmvgQtm6ZOcPDElX9KKQkOtxMabl\/Q7iLjnRjR3O8AFc1KUdPujB1oRmgcEDir1yW1p7sbtqNYcytcLl17P67ajTmv67YlHLi2qUghEJoF5Su\/D6u2Zjm2hP4OzJNvXLPl3SwIIeYN0Cw1pmiMD1CmzzoqKwJWN5Xy+UfWJV1kZ4jGdJ5\/\/QKXBnJrT5+bNvv605uw2xYmOARQX+WipCj3WjMpSTv4FGB1c+mSDjFdLFImRF2qVJyUCS+j1w\/30j392ZumyXefP8P5Hk+SENR1k0MnLvPqoe5rtfRl4cb5yxRYckpa7krqdjIxiIk4dt1BRaw8RT0PCIsTR9VarKVNqI5yNGc5jsq1lK55EGtJI77eDwgOt6PHgguuy7maGbEipcRz7hW8lw4uYm8SX\/+RvF7h6z6cdRt\/in0qmo3q7V9AaJnb1jVnJc6qdXmt6bbFWXJtUl4zqBrYXAhXCepT3050m2Xjg58v\/7puQjauqgCgSh\/jy1M\/5stTz\/G4\/1W+5P0JX\/X8gLr4EN\/6\/Faeum81tZWuea83Tclzr3bSO5SbQ7TbaUmq9XE5Lfz2F7fzzAOrsVnyOzdVVzh59J6VBELxnOaRzV1zOmoqXNRUOpPqgm50dENy8HjCqPLY2RF8wfRp\/fauCbwL8HW6USiIn1sYi7uKys3PgGZj0DaIxzJFiV5CqV6KisqIdYQY019uoaBoDqq2fIaytQ9SufFJanZ8iaptX0Sx2JjqPIC\/70OCgyfxdh9isuPnSGNpOizE9N12ZKKLiKd30e7L4ZFzBIfbk6avp0MPT+VUW2TGUtcfKJqdyk1PkfanJFRKV38i6\/4LJBB2JzRfowiZqsGWTySnsHo+zv66SAC57E7UNx\/37l5BveLhs94XqDImsKBjlzEs6FSYU3wm8Asck31pX98z6MXji2QUFHPZ3pa6S2xlY2lerdqqInj8E6s43z2Zd1dWdXnmNPYz96+hvtqNps4XQEJAkcvCjaaNPN4IoUico2dGsm47I5RuRgo1P7c41qJaJmst1AzUoKAgpru1FKlQGaskokZQsVNcswV3w\/Z5NSn+\/qOERjqSBcmS3pkLHFWJOTKByyeWaOyExHvpIBFPL+Vtj6YtzpPSZPzMC+TUVp8hymVxVVK55TNMXXwTPeJNRMSkiWoromT1fYXurjyQppGovVluNAuU1qDsffqqBeR49SvU\/MxD01Q+azsJpD4\/qGYc883vo371D1I+335xIucCYbtVZdem9HYWzfUleTk7a6ogFInnLLwgUfuSre7FZlX53MPrGPeEuTQwhWFKaiucNFS7UVUFVVWIxw1OnR\/lvRODmClqpxRF5LWuxSJEIrUViWU\/z6caIHuzUBA\/tzjh+BTOwXFU5vs2qKjYDTt6dSklrXfPe16aOsHLJ5ZuEGgKhGqhqHEHAHpkCW3opUF0spuxkz+ifN3DaM6yeZtEPb05d2vZy1syPm8tqqZ6+xfRQx6MWADF6prjWVQgV+SF4zCZ\/yDLnNBsYMTAWYzY\/gBi+ycTxopzWbUNTryeeT\/VzUuW8r2VkOEAYihzsboxNog+MYqtYn5XZiSa23nGblP50mPrM3YcrWsp5+0jfbmlsERi8Gl5iQNNU3IaXCqA7W3VrGzMzQKhssyR0sgRwGJR2bWpjjXN5RxtH+ZCrwfdMCl122huKKGloRiXQ+PZF87mdKzFohuSA+\/3oCoi6\/T5SW+Es13jKeu3bnQKv+BbnMHRd7CY6R1zVVTE+GjK52K+4YUaLeeEaiuicstnUG2JELWiLr2xnR6aYOz0T9BDnnnPhSd7c0zdCYpb9+V0PM1Zhq10RUH4LBB5\/ADEl6OOQCD+9V+ifOb3ENs\/mTBRDM4X28rOB7PO8hKf\/JVlWN8tQCSY9bPTUXjlwMfE4vMjvDUV2etjWhuK+Vef2ZLVhM9h19i0tiqnehvDkESiBisbS5A5RlgeuruF\/Tsbc9o2V0qKbDxwZzO\/+YVtfPvLO\/jqUxvZv7ORFbXFlJc4+eJjbUs9RjEtvUP+nDyKDFPyyqEenn3hDOa18OZaQgqRn1scI+pDCpkxs2MxU5+wEq3yy\/RrUzRKVt2bJBKcNRvw930EWYat5os0Yni7D1K65gH8A8cIj11A5tGpVrH5GbTCOIprQ2ByefZbWo387n9ItNLriTl38t3nYEUbylPfRlgSwlsUVyKe+C3kz\/8mpe+PePBrKLWty7PGmxzpcEM8OZLqVYrotaxACoW6+DDlhoeRmJVj7cPs3daQtO3WtmpOnkt9IwagqoIH72phdCLER2eGGR4PoqqClStKaGupoLrCidUyey67f08Tum5ytiuzO7cQ8MHpQT48PYiiKAhkxkT4Xdvq2Lj62kc66qvcfOGRNn7y2vmsEZmlIJ8jTHojvPpeD4\/uX7ls61lqCuLnFsdmqwQyX1BMkfprbnFVJmowlgMpsbiSTyCuuk0Ehz7GjGc3N8uX6NQAIx99jzzHeeNq3IFtjmVAgWXG4gDmR+kWTXAqOaI08zXobcf8zr9H+fU\/viKAlNXbkb\/+x5jHXoOLxxPbNW9E7PsMiqMggtMh331uenAxxNF4xf0AvdYmhJRIIRBIXGaIgHRw8tzYPPFT4rZxz65G3j16ed5ML01VuO\/\/b+\/OguO6zsSO\/8+59\/beDTSABoiNAAiSABdxlSVSK7UvtiR7LC+xp7xUZX3OQ55SU0mlUqlUKqlU3jJPqfHMxB7bSayxPbZLsmWNZFOStVDcF5EiCYDYgcbW270nD01CBLF1A92N7ftV8QGN2\/ceEsTt757zne97sJVTFwd495P+OTkwpy4McepCvq1GwG+RqA6yLRHmxq1JhseWr\/t1J8fGAJ7robXKL\/kssPzVmAjTuX3+EnqlNCbC+H02uZnKtPNQCoJ+m+nU8kuS56+O8NzD7egNkg8nwc8m19zwBL2fXVz0+x4eumbhpD3LFyJQ00Zq5NqSdXCKpjSBmvY5ydXGc0mP3cQfb2Nm8BKYUucZreBJSWsijfeVeBxiISabwXv9B+XL91kqiJ8ex\/vBv4NwNUyPQ7wBffgZ9OPfQJ34ZnnGs8mYyTE494fZSOK16PP0Oo24yp4zeTyuYwDMpHP86B\/Oc\/++bXS0VM3m7xzqbqCuOsQfT\/XSMzCJAloaohw72EQu5\/Gbd5ZueZFKu9zon+RG\/8qrPXueWTTBuG9wiv\/9i\/O8+uxuGhOVD4SVUjz7cDuv\/fZyRWZ\/HFvzpROdfHpzlPdPLz4rB\/kf\/fhkZsP0BZPgZ5Oz7QC6ZTfujUtYzF3e8vAwWrGt47lF31+980mGPvkpbipZmsRnZWEHq6je+cTsS+nxXkbO\/QKMW9bk6mLV7vmiVGSuAGMM3k\/\/G\/QsHqSv2nJb00dv5f8AjPThXTsDu46gX\/inktxcAPPpxxilUUC\/VUefsy0f+NzrrqSVm\/2T9A9\/SmdrNS882jGn6\/ir2+bXxfqff\/dxuYZflGzO45dvXeX7X9m\/Jm0eOpqr+PJTu3jj5HWSk2n07YrNNVUBhsdmiqpTtJxszmNodIZIsLB8zHVU03FZEvxsAS3bX6DfCpG+fmp2BkcbjRcK0dj9VWz\/4jUxtO0ncfDrzAxdur0klcIYDy+zsierWPtDhLftQ91OjMzNjDFy9rWKBj2WniTov4RlTZFzY8ykduGZ+Q1cfbGNXb59IzAjfXhv\/aS8gc9KuFk4fxIvEMF68ltrPZr1L5fBuC4KuOjbiUthlZazOY\/L18c4c3mY\/bsWz6NJpXNMTq+fzu1TM1kGRqZpqJ1frLEStjfG+N6X9zOWTJHKuMQiPoJ+m9d+d4UrN8ZK1kXeGHjrTzfRBQR5WitikY0x6wMS\/GwZDc2PXxLeEgAAGMpJREFUY5oeIz3Rh5ubwR9KYAdiBb1XaYtQfTeh+m4gnwg9cu6XpEevFT2OTLKPSNOB2a8nb35QvryieQzR0LtEQmcAg1IenrGIhd8nOXU\/UzOfj8tX1TwboIny8P7xp5gPfp1PQC4zwwpT9z96Ha\/rAXTzzhKPaHNRiVY8pdHGJaN9mCJmy3JuvkfWUsHPwEjp8wBXKzmZWbPg547qe5aYXjrRyTsf9XLyVF\/JrlFo7aXDewpvKr0ebKBJKrFaSikCsSbCNZ0FBz4Ln0dTs+eFZds6LCQ18umc6rgzI5+yonycFQgHThMOnUUpF6Vuz4ApF6VcouE\/EfB9mj9Q28TaHqzImLYq7\/zJ\/Lb2CgQ+4yE3v+Nxhczv\/raEo9mkWrrIOiEM0JAbwPEKq591x9hEeslCfneSkNeTYGD9zR0opXjoUBO72iqblN3WFOPx+1sres3VkuBHrIhSmrr9L6Ms35z+Ycu\/UZMev6skellrQ9x9s\/SIhj9Eq4WX17TKEQu\/j7Icarqek6rMZWb+8DPIFfcBuVJ\/OpDiZkN2mQ3MSxi8gZmeKO2gNhmlFKnn\/hUZ5aMz\/WnR02xKsWQNm211YfQ6Cn4cW9Ncvz53\/imleOC+bRWpCaSA5x5u56vP7C7\/xUpMgh+xYk64jvoj3ybScgQrUI0uYCZIofDuqqrsRMpZL+POh53CtkdYrn6QZU+x7ciXl63mLFbHZGZgfLAi10pbHq29Nk2DzoKhT0EBkWVDev0tu6w3dTt38fb+f8mZ0H4OTX9ceKsQ8sHNUsnDtqU5uq9hXuf41VIK\/I7GsTU+RxeUsKsUPH28reLJztmcx5nLQ\/z0Nxf5u19d4I+nepleZMv72SvDFZlQN8Dl64t3tl\/P1t+8ndhQLF+I2PYHiG1\/AGMMt\/74lxhvqaUMgxP8fEo22HgoX0m6rL+ppqAblVIWrGJ5RBShUtVgtaGjx4ftzv\/5Gww5y6A8sM0S\/z+MB5HC2hhsdU89dYA3q+J8eG7pbdH3GhyZJp1x8fsWn0U+frCJqZksZ68M47nFzOMZFNBWPYnnVDMwnl9G6+6o4ei+bURCDn1DU6TSOaqjAd473ceZy4sXRqyJ+elsrez\/h7GJND\/85XkyWXc2B6dvcJJ3P7nFSyc66WiumnP8xFSmQskEcLWnhG2JKkhmfkTJKKWIth1bsgmo5Y\/iRBIATNz8kPELv6TsjyjaRscOoJYLbHQQ7I3Xo2ajUb4ghKuWP7AEfFm9YOAD+VlI7Sl6ti2xJKY0dD0wvweYWJDWin2ddQt2MV+a4uyVoaWPUIpnjrfz3Zf3UbtIn6zPGTQuCo+m0CivtH\/AsbqzHK96hy+3\/ZFX2t7jQNV5rNw4py8P8YcPe3n\/dD9nrwxRHfUvuWo3PJ7mb35+jsHRyswGGmP48a8vMD2TnZN8nHMNuZzHa7+7QnIyX8DT8wx\/\/LiXqzcrF5B4nsGUantZBcnMjyipcON+UiNXyUzcuqf7u0JZDvHu5wFIjfUw8dk7y5ztdrnY1fJy4Nmo2j+D5P8Ds0DvKBWA+HeKy18SK9faBedPlv0yapnkE08bZgJm8eOi1ejHvl6GkW1ew+MzuEUWm8m5Hp\/1Jjm8Z\/FO7XdUxwLUVgUYGl24erNfZ9hZNUDAzrI9MoLf+vw+pACMh3EzDPTe5PX3org45G5vOL3ZX1huV\/\/wNH\/783Ps7azlqWPlXQK71ptkJpVb9E5oPMOH5wd47GgLf\/\/mFa71JIv+91+NmqrAmtQ7Wi2Z+RElpZSmdt9LxNofxgpUkb\/d5IMY42YY\/OiHjF56g9GLvynkbKUbl+WDxL+GwD5Q9xQuVEEIPwzx75bsemJpqqVr2SaYlaHouLlI419tob71FyhpaVGwmVSON9+7saI6M1YRFfJaty1em6wrfou98V52VQ3MCXzu5hnFGz3dpF17NvApVs41nL0ysmQ\/slK43ptccru56xmu3hznxq0JPutNzmsNUk6WpXjwwMashybBjyg5pTSRxv3Edz9z+5W77oTGY2bgHCY7VcCZSvdL7KaSGGxo+Uto\/I+Y4AMYpwNCj0LTf4XG\/yKzPhWkdh5ZentPhdgu+LML3AYtGw49iQ5J4FOMdz7qYSZdfMFSx9Z0tRe+PXvPjtpFvxf3TWPppaOvnqk4Oc9itQ9YOdfj5Km+8i77FDBEpeCj8wMF1+QpGQO7K7ytvlQk+BFlM3zmZ1Sqhs9ystPDjF3+LdNDV+i\/2EPf9YP09T7D4MgJ0tmWdfFBvJWoUBSOPAN2YWXzy8JyUNqe\/7PXNkRr0MdfXptxbVCu53HmynDRsz5KQcBv07m98CRix7EWjQlSrrNsi4e+qSpypjQPO5msR3KyfGUbOpqrcOwl8ii1orO1mvGJBZbzy8wYU\/BS4XojwY8oi3SyD+Ou7oagrBImmXo5ZgYvMnbpDdyZO1szDdmJWwyf+wVTt86U7lqiIPqRr8KRZyt\/YaXBcmD3\/ajv\/HvoeiAf8GgLfAE4\/CT62\/8W5Ze+bsVIZ1xMkbkmjq2JhX184\/kurCK7gUfCCwfOVycSuGaZc22gXZ2t26JEQs6iz2daKw511xONVP5BwjP5nWgbkSQ8i7JIj91Y9Tmq973E6Cc\/KapeyNIMmAUW+L0c45++RaB2B5ZTfNVqsTJKKaxHvoJ76neQWnkX7oJpC7Z1QKIVdeQZdPx2cu2L\/xzzvJsvuuj4pZHpCvmc5WdSbFvz6NFmxpL5D8z25iram2IrSpj9wr4G3nh3\/n1mYCbKSCpMbWASe5Hlr+bwGNcn6koy++NzNLEyBh5KKV59tosf\/cN5plO52aUt29IoBV95aheRkI\/D3fXc6JtYcunL0vnzJeIh+oYKST1Y3kxq\/TSjLoYEP6IstL26BnfRtuNM33iP\/ORkZXp\/TQ+cJ9p8uCLXEnlmahwyC+\/aKTnPhaGefMXma59gnv0+qjXfr05pC3wS+K6GbWk6Wqq4cn1s0cXucNDhUFd9SXYH3deV4NSlQYZGU\/d8R\/H7vm7uT1xle2QY14BzOwi6c9nG0Bg+K0cup1jNAohtaR480Fj23U7RsI\/vf+U+rtwY4+K1EVzPsH1blD2ddbO1kbY3xmhpiHLjVpKcO\/cnoLWisS7Mwe56dm6v5gevnS3Z2GqqN+bvjTziiLK40wS1WNoXIb73ZZxQTX72aKGZmnIwLrnpkcpcS8wyl\/4ERS53rEpmBrJpGB\/C+z\/\/HdNzqXLX3gIePdqC4yz887QtxdMl3BZuac23v7iXPTtq5n3PNZqTA5387NphTg7s5ORAByPpMDlPk\/MUrtGcaDyHT7vL9gwLBWz2dMRnZ1ogH0TZlmLvzloOdVemoafWil1tcb74eCcvP7GTQ3sa5hSFVErx8pOdHN7TgGPr2T+hgM3j97fy9ee76O6owbb0kjlExVAKEsvWXFqfZOZHlIW2ffhrO0kPXyniXYpw437GLvwK4+XylXUrRsmS11pITVWkuemCchm83\/4N1p\/\/xdpcfxOKxwJ884U9\/OrtqwyPzaC1xhhDKGDz9PF22ppW3lB5IZaleeHRHTx9rI03Tl7n0vVRMtn8faO9KUb\/8DQ9U\/lSBtcm6qnyTVMXmMCguDVdRcZziIUdEjUhbvSNk8nNnTGprwnytee68PtsjgxPceriIMnJDNVRPwe6EiTi6ysvzNKaR4+2cPxQE6PJFFop4rHAvL5o+3fVMTx+k9wqd4c11IaJx1Y3y79WJPgRZVPb\/TzDZ\/+e9OhnBb7DMHHj\/XuKI1aI1gRXOFslViHeAI4\/PxuzFob7MBMjqOj82QOxMnXxIN\/+0l7GkimSUxmCfpu6eLCsS0OOY\/HcIx08Rwc510MrhdaK\/\/HXH8w5bjwTYjwzN2DxjOGVJ3cCMDAyzc3+CRSK9qYY8arPP9gbasM8czxctr9DKdmWng3MRpMp3jt9i8vXR\/E8Q6ImxJG9DQR8FlOut+KUSsfWvPjYjhKOurIk+BFlVbv3S0z2niJ59a3C3rAmgY9NoKYDJyQfgJWmOg9j1P9auwFYVn72SYKfkquOBaheg1kB+65iiaGgzfjE0rtOo3ftGquvCVFfs75mc1bjeu84P339Mt5du\/B6+ifp6Z8kGLCJhf1MzeTbuygUrufl94UUcO5EPEh1dOO2fZGcH1FWbnqK5LJtLNaAtvNVn7VNuGEf8d1Pr\/WItiRlO+gX\/0W+qGCZLXhDd3MQ2ZhF2sTyjh9sWvaYx462VGAklffBuX5+\/JtLcwKfu82kckxOZ9jbWcuJ+1t54oFWHj7cjFVgX7aVFLNcTyT4EWU1det05Tp4FyEQbyPe9RzbvvB9qnY8Itub15DacQD1tX9T9nYX3r23O6WhbZ+0r9jE9nbWUVO1+OxTy7YozQ2Lt8rYqD65OMjv31u+3IjrGc5eGaK5Icp9uxN0d9TgFbgOFots3FkfkOBHlFlq5CrlrfK8sjyC1Mg13PQEei0rDItZumkH6tnv5YsNlol79+1OWxCMoJ\/687JdT6wP33l5L90d8TlFArWCw931fP25rrUbWJl4nuH3f7q5bJXrO1zP8MG5fiAf0DTWFfYwcKSAJrTrmeT8iLLKpcYLO1Dpond3KcuheueTjF1+A+MWuWPIuCSvvk2ovivf4kCsOb33IdxsBl7\/qxW93wDmdhPde5\/qsti8GzzKI+n38gHW3ofQx19GhatWO2yxzmmtefGxTp5\/xGM0mUYrRVXUh65kiYUK6h2YLKrXmDEwODI9+3VXRw29g5PLJkK3N5d2516lyV1flI2bmSpoycuJbsO4maLr7BjPwxdtoGrnk4xd+FXxA1SQGr1OsHbj7ljYbKyDJ3DrmuGH\/6no9xrgE\/8eQLE3fQGDQuMxZsV4J\/IwicNfQN\/3XbAdWebcgrTW1G7QgnzFyGSLr40W9H8eCsTCPhxbz5YMWPh4q+yFHctNgh9RNsZz81WwlnmCiLU\/wszQhaKDHydci+WPEvJH8bIz+R1lxTzxeB5etkLVhUXBdLwBz7LzycjFvA8ImjS\/jD7LW+GHiHqTZLGZsiLYtuaZ7nqUI8ucYnOrqQosmuS8EMfW3Lc7Mfv1crWYLK040FWZwo7lJI8\/omwsf2T5JSVl4YTj+GLNFJO\/o7RN1Y7HZr+ONN5Hw9HvFDdA48qS13qk9Ir6uRltM+arxbY0rrIZs6pJOVFsS\/PSiU4iIQl8xOZXHQuQKHC7vtaKqqifztbq2dcsS\/PUg21zSgbcoRQEAzZH927sfB+QmR9RRkppwk0HmOz5cOH6PcoiVN+NtnwEqltvzxIt\/6GnnSA1e76IL5r\/BTSeS2rkU3Iz4\/l8jiJqBaVGPyNUv\/mSHjcyFYzkt58nh4p7n4LDX3sVX2+Wi5\/lC7q1N1dxsCshgY\/YUl58dAd\/\/fNzpNO5RSfeLa3Y3hTjhUc75lWA3tNZi20rfvfeTVLpHEopXNejvTnG08fbCfg3fuiw8f8GYl2LthwlO3GLTLIv37LiNqVt7FANsY6HgXw7jHDTIaZ6P166n5e2SRz6JpYv\/2STGrnG6MVf5wtzecW3SUgNf4rxcjIDtN4EI8UFP7YP9eirBOK1HI3D0X3byjc2Ida5qqif776yj\/dP3+KTS0Nksi5aQyjg0NFSRXNDlNaG6JwCj\/fa1VbDzu1xhsdSZLIu1TE\/oYBTwb9FeckdX5SV0hY1e18iNXKVqd6P89vLfWEijQcI1O7Id9O+LVjbyczgRbzM5EInQimLePfzs4FPZqKfkQu\/WnVVaC+XwfLJr8K6MjZQ2HFKQUM7+vgrqI77yjsmIQqQyWS4cOECo6Oj2LZNR0cHjY2NFR9HOOjw+BdaefwLrSs+h1KKug3auHQ5cscXZaeUIli7Y8ldVenxXkbOvjZnduies2CAkXO\/IFDTQfXOJ5i4\/u7q22Eo0PbGLta1KRVS9qAqgf7ef0BVoDq0EIW4evUqZ86cmfPayMgIjuPwxBNP4PPJ8ut6IQnPYk14bobs1BC51Die5zF68TdLBD7kl8K8LJh8fs\/QJz8hPXZ9laNQBOt2zZl9EutEXQEtB1q7JPAR68bQ0NC8wOeObDbLm2++WeERiaXInUNUlJfLkLz6j0wPXUShMcZDWQ4mt3TzwTmMh5tKrnIkCu0EiLUdW+V5RDmoR\/4M86P\/vPQxx1+p0GiEWN7p06eX\/H46nWZ4eJja2toKjUgsRWZ+RMV4bpahUz9mevACeG4+Qdm4mFwKKK66s\/Fy+S3RxdI2KItA3U4Sh76B5QsXfw5Rdqp5N3Q9yILlD5SCh7+Clk7sYh2ZnFwgV\/Ee165dK\/9AREFk5kdUzHT\/WXLpZNFtLBajtIMxbsF5P\/54O1U7HkU7QbS1eXYtbEZKKfSL\/wzTsgvzh5\/BzCRgIFaHfuxrqF1H13qIQhTNW4dNnrcqCX5ExUz1nQKv+NLrizFeFn+8jczYjaXzhW7TvhB2YGP3o9lKlFKog09gDpzIBz9aowIyUyfWJ8dxyGaXLrfR0LDxiwNuFrLsJSqm5K0kjCGY2E317mewQ3XLHj7Tf5b+9\/8Kb7U7xERFKaVQoagEPmJd271795LfV0rR0lJAIr+oCAl+RMVop7CS64UzTPedZvza2+SmCyuI56aTDH3yf0s8DiHEVtfR0UFd3eIPYceOHdu0neQ3IvlJiIoJNx6gmP5dhcgke\/CK3PmVm+zHzUhDUyFEaR07dozDhw8TDAbzeWta09DQwFNPPSW7vNYZyfkRFRNu2MtU38cl2Ka+ejOD54k0H17rYQghNpnm5maam5vXehhiGTLzIypGWTZ1B7+BFYyv9VAwJdpxJoQQYuOR4EdUlGX7qD\/8T4jteBw9W2NH4UQaCNZ3V2wcwZrOil1LCCHE+iLLXqKkcrkcN2\/epKenB8\/zqK2tpb29nVDo82RnpRSRxv1EGvfjuVmU0kwPnGP86tsVGaPlj2KHqityLSGEEOuPBD+iZCYnJ3nnnXdwXRfXzdfzSSaTXLt2jUOHDtHU1DTvPQrFZN8pJq69U5ExKm1Te+DVilxLCCHE+iTBjygJYwwnT54kk8nMe90Yw0cffUQsFiMcDpNJ9pGbHsK4OSZ7P8bLpcoypuj2Y0z1n8bLzqC0Q7hhH5Ht96O1\/LcXQoitTD4FREkMDg7OC3zuZozh8sVzNHrn8LIzGM+j2H5exQjW7yHaepRoq7RBEEIIMZckPIuSGB4enl3qWogxhsFbPbjpidutKMq720pJMTEhhBCLkE8IURKFVS41ZR9HnsIJJyp0LSGEEBuNBD+iJOrr67GWCIAUHnHfVGUGozTBxK7KXEsIIcSGI8GPKInq6moCjmGx2R0FJPyT5R+I0tR0P4+2fOW\/lhBCiA1Jgh9REkopdscnCOosGo87QZDGw1IuO6P9OHrxnKBSsMMJEge\/RqCmvazXEUIIsbHJbi9RMn6fQ3esj8lcgNFsEM9oonaKuG8arcqb76N9YRIHX0UpieeFEEIsTYIfUTKhbfvITA4QdVJEnfLU7plHO2htUbvvFQl8hBBCFESCH1EywbqdjF99G1OmooX3UnaQ2PYHCNbvlhwfIYQQBZNHZVEyStvEdz1dsesZN4PlC0vgI4QQoigS\/IiS8se3Y4dqKnMx45K88W5lriWEEGLTkOBHlJRSitq9X0JZ\/opcLzc1hDHlrRYthBBic5HgR5Sc5Y8Sa38IJAFZCCHEOiSfTqIsAvE28qUNy8uJ1MsuLyGEEEWRTw1RFpY\/TKB2ByirbNdQ2ia6\/YGynV8IIcTmJMGPKJv4rifxVzWj9F0VFbQN2qaq8wlWNTOkNNHtD96eYRJCCCEKJ3V+RNkobVO77yWyk4NMD17E5NLYkQShRBfa9pEavkJ67PpKzkxN9wvSxkIIIcSKSPAjys6JJKiKJOa9Hmt\/iKFTfRgvW9T5LH8Ev8z4CCGEWCFZ9hJrxgnXUrv\/y1jBOErbKMuH0g7aCeaXxxaibao6T6BU+ZOphRBCbE4y8yPWlC9aT8ORb5GdGsJNTaB9QZxIA7mZMcYuvU52egilLDAe2glR1fk4gfj2tR62EEKIDUyCH7EuOOE6nHDd51+H4iQOvkoulcRNJdFOADtUKzM+QgghVk2CH7Gu2YEYdiC21sMQQgixiUjOjxBCCCG2FAl+hBBCCLGlSPAjhBBCiC1Fgh8hhBBCbCkS\/AghhBBiS5HgRwghhBBbigQ\/QgghhNhSJPgRQgghxJYiwY8QQgghthQJfoQQQgixpUjwI4QQQogtRYIfIYQQQmwpEvwIIYQQYkuR4EcIIYQQW4oEP0IIIYTYUiT4EUIIIcSWIsGPEEIIIbYUCX6EEEIIsaUoY0zhBys1CHxWvuEIIYQQQpRMmzEmce+LRQU\/QgghhBAbnSx7CSGEEGJLkeBHCCGEEFuKBD9CCCGE2FIk+BFCCCHEliLBjxBCCCG2FAl+hBBCCLGlSPAjhBBCiC1Fgh8hhBBCbCkS\/AghhBBiS\/n\/sk6CF1skVZEAAAAASUVORK5CYII=\">\n\n","db462dc7":"## Spline GNN (SGCN)\n\nSpline GCN involve computing smooth spectral filters to get localized spatial filters. The connection between smoothness in frequency domain and localization in space is based on Parseval\u2019s Identity (also Heisenberg uncertainty principle): smaller derivative of spectral filter (smoother function) ~ smaller variance of spatial filter (localization)\nIn this case, we wrap the vanilla GCN with an additional spline functionality by decomposing the laplacian to its diagonals (1-spline) . This represents the eigenvectors which can be added independently instead of taking the entire laplacian at one time.  The rest of the code segment remains the same.\n\n- [Blog](https:\/\/atcold.github.io\/pytorch-Deep-Learning\/en\/week13\/13-2\/)\n\n<img src=\"https:\/\/miro.medium.com\/max\/1838\/1*--D1tDMjYWwf1mv8ZYRo7A.png\">\n","86492b56":"## SDNE (Structural Deep Network Embeddings)\n\n<img src=\"https:\/\/www.programmersought.com\/images\/979\/223a8a8bc9b82f9255018d248c355c8b.png\">\n\n### SDNE algorithm principle\n\n#### Similarity definition\n\nThe definition of similarity in SDNE is the same as LINE. Simply put, the first-order similarity measures the similarity between two adjacent vertex pairs. The second-order similarity measures the similarity of the neighbor sets of two vertices.\n\n#### 2nd order similarity optimization goal\n\n``` L2nd\u200b=\u2211i=1n\u200b\u2223\u2223x^i\u200b\u2212xi\u200b\u2223\u222322\u200b```\n\nHere we use the adjacency matrix of the graph for input. For the i-th vertex, we have x_i=s_i xi\u200b=si\u200b,Every s_i si\u200bBoth contain the neighbor structure information of vertex i, so this reconstruction process can make vertices with similar structures have similar embedding representation vectors.\n\nOne problem here is that due to the sparseness of the graph, the number of non-zero elements in the adjacency matrix S is far fewer than zero elements, so for the neural network as long as all output 0 can achieve a good effect, this is not ours want.\n\nOne method given in the article is to use a weighted loss function, which has a higher penalty coefficient for non-zero elements.\n\n1st order similarity optimization goal\nCapture Reconstruction loss of the predicted and true values\n\n2nd order similarity optimization goal\nUse the trace of the laplacian matrix and normalize the results\n\nThe loss function can make the embedding vectors corresponding to two adjacent vertices in the graph close in the hidden space.\n\n\nWhere L is the Laplacian matrix corresponding to the graph, L = D-S L=D\u2212S, D is the degree matrix of the vertices in the graph, and S is the adjacency matrix.\n\n\nOverall optimization goal\nThe loss function of joint optimization is\n```Lmix\u200b=L2nd\u200b+\u03b1L1st\u200b+\u03bdLreg\u200b```\n\nL_{reg} Lreg\u200bIs the regularization term, \nalpha \u03b1To control the parameters of the first-order loss\n\n\nThe second order proximity is preserved by passing the adjacency matrix of te graph through an unsupervised autoencoder which has a built in reconstruction loss function it must minimize.\n\n<img src=\"https:\/\/miro.medium.com\/proxy\/1*44eDEuZBEsmG_TCAKRI3Kw@2x.png\">","e4842620":"## Vanilla GNN (VGCN)\n\nThe most important part of spectral convolution arises from Vanilla GNNs.\n- [Blog](https:\/\/atcold.github.io\/pytorch-Deep-Learning\/en\/week13\/13-2\/)\nThe steps to produce this include ,creating the adjacency matrix representation along with the node features from the inputs. The labels have to be one hot encoded to maintain the dimensions of the inputs. The model inputs are in the form of [node features,adjacency matrix] representation and the outputs are [one hot encoded node labels]. This matrix is then processed and additional layers such as Embedding Layer\/LSTM can be added to perform node classification. The classification uses the spectral graph convolution aspect where the formula is as follows:\n\n<img src=\"https:\/\/miro.medium.com\/max\/1400\/1*mFzCYa-PG3mUAZQE6oQASg.png\">\n\nA Vanilla GCN\/GNN utilizes the graph laplacian (not normalized laplacian) along with a spectral filter and recursively augments the weights of the next layer based on the previous layer. Here the spectral filter weights are initialized using keras\/tf. The rest of the part involves multiplying the Laplacian tuple [node_features,adjacency matrix] with the spectral filter (kernel) and applying an activation over the result. Generally a softmax activation is applied for classifying the outputs according to the labels.\n\nThe following image depicts how a particular node learns from the neighbours when passed through ```h``` number of deep learning layers.  The nodes are not ordered in any way.\n\n<img src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRytEdGzrDNOly1dOfkN52MxwrfoKx9zdNFlQ&usqp=CAU\">","f82bfcd4":"## Graph Neural Networks\n\nThe major difference between graph data and \u201cnormal\u201d data we encounter in other machine learning tasks is that we can derive knowledge from two sources:\nJust like in other machine learning applications every node has a set of features. For example, when we look at a social network every node can be a person with a certain age, gender, interests, political views, etc.\nInformation is also encoded in the structure of the graph. By looking at friends of a person it is often possible to get some insight into this person.\nSo, how does all of this come together as a neural network? Let\u2019s continue with our example of a social circle. We can first of all look just at one person itself. Then we can compile information about the friends of a person. Then information about friends of friends and so on. This is basically the idea of a graph net: we aggregate information of neighbors, and neighbors of neighbors, etc. of one node. Let\u2019s look at a simple example to make things clearer. The graph below shows a small friend group where an edge between two nodes means that these two people are friends with each other.\n\n<img src=\"https:\/\/miro.medium.com\/max\/556\/1*fuk3Tb36d8UV83qjQ8S73A.png\">\n\nA descriptive view of the same is provided here:\n\n<img src=\"https:\/\/miro.medium.com\/max\/875\/1*7tza4yVinxTs5znmNT0pEg.png\">\n\n\n<img src=\"https:\/\/miro.medium.com\/max\/875\/1*THVRB8-wHODA3yDUykasIg.png\">\n\n\nWe define that the nodes that don\u2019t have predecessors are in layer 0. The embeddings of these nodes are just their features. To calculate the embeddings of layer k we weight the average embeddings of layer k-1 and put it into an activation function. Notice two important thing here: first, the weights for all the neighboring nodes is the same, they don\u2019t have individual weights. Second, when we calculate the embedding for a node v we also want to include the features of this node, so we add self-loops to every node. This also makes sense intuitively: when characterizing a node the neighbors do play an important role but the node itself is also important.\nSo far we learned to know how vanilla graph nets work. Before we come to the implementation I want to introduce a slight modification that has shown to regularly outperform normal graph nets. This kind of neighborhood aggregation is called Graph Convolutional Networks (GCN, look here for a good introduction). There are two major differences (image 6):\nWe have just one set of weights in each layer, so no different weights W and B anymore. The features of the node itself are therefore multiplied by the same weights as all of its neighbors.\nThe normalization factor is not the same for all nodes but depends on their individual number of neighbors.\n\n<img src=\"https:\/\/miro.medium.com\/max\/875\/1*-qtRoHWZk5TI7sBCuZcCoA.png\">\n\n","21e74bee":"## ChebNets GNN (ChebGCN)\n\nThis is one of the most important parts of spectral GCN where Chebyshev polynomials are used instead of the laplacian. ChebNets are GCNs that can be used for any arbitrary graph domain, but the limitation is that they are isotropic. Standard ConvNets produce anisotropic filters because Euclidean grids have direction, while Spectral GCNs compute isotropic filters since graphs have no notion of direction (up, down, left, right).\n\nWe can extend ChebNets to multiple graphs using a 2D spectral filter. This may be useful, for example, in recommender systems where we have movie graphs and user graphs. \n\nFor implementing the Chebnets, an additional function has been added which recursively fills the Laplacian with the cheb polynomials upto k degree. Here for simplicity k has been chosen as 2.\n\n- [Papers with Code](https:\/\/paperswithcode.com\/paper\/chebnet-efficient-and-stable-constructions-of)\n\n<img src=\"https:\/\/atcold.github.io\/pytorch-Deep-Learning\/images\/week13\/13-2\/Figure2.png\">","139b0ad7":"## LINE (Large Scale Information Network Embedding)\n\n\n<img src=\"https:\/\/www.programmersought.com\/images\/996\/f42357dccce22d2ee44665a2ece8e63c.png\">\n\n### first-order proximity\nThe first-order similarity is used to describe the local similarity between pairs of vertices in the graph, and the formal description is if u u, v vThere are straight edges between them, then the edges are right w_{uv} wuv\u200bIt is the similarity between two vertices. If there are no straight edges, the first-order similarity is 0.\nAs shown in the figure above, there is a straight edge between 6 and 7, and the edge weight is larger, it is considered that the two are similar and the first-order similarity is higher, but there is no between 5 and 6 If the edges are directly connected, the first-order similarity between the two is 0.\n\n### second-order proximity\nIs only 1st order similarity enough? Obviously not enough. As shown in the figure above, although there are no straight edges between 5 and 6, they have many similar neighbor vertices (1,2,3,4). This can actually indicate that 5 and 6 are similar, and 2 Order similarity is used to describe this relationship.\nis formally defined as\nOrder p_u=(w_{u,1},...,w_{u,|V|}) pu\u200b=(wu,1\u200b,...,wu,\u2223V\u2223\u200b)Represents vertices u u1st order similarity with all other vertices, then u uversus v vThe second-order similarity can be passed p_u pu\u200bwith p_v pv\u200bThe similarity is expressed. If u uversus v vIf there are no identical neighbor vertices, the second-order similarity is 0.\n\nImplementation Details:\n\nFor creating Line embeddings, we  use the default SDNE script and convert the reconstruction loss (autoencoder loss for SDNE) to a KL divergence based loss.The goal of LINE is to minimize the difference between the input and embedding distributions. This is achieved using KL divergence:\n\n<img src=\"https:\/\/miro.medium.com\/max\/875\/0*O-MXQk5ztaOYsGQH\">\n\n\n \nLINE defines two joint probability distributions for each pair of nodes then minimizes the KL divergence of the distributions. The two distributions are the adjacency matrix and the dot product of node embedding. KL Divergence is an important similarity metric in information theory and entropy. The algorithm is used in probabilistic generative models like Variational Autoencoders, which embed inputs of an autoencoder into a latent space, which becomes the distribution.\nSince the algorithm has to define new functions for each increasing order of proximity, LINE doesn\u2019t perform very well if the application needs an understanding of node community structure.\nNevertheless, the simplicity and effectiveness of LINE are just a couple reasons why it was the most cited paper on WWW of 2015. This work helped inspire interest in Graph Learning as a niche in Machine Learning and eventually Deep Learning in specific.\n\n<img src=\"https:\/\/miro.medium.com\/max\/625\/0*UhcvOUeSRFGs8tp6.gif\">\n\nResource:\n- [blog](https:\/\/towardsdatascience.com\/overview-of-deep-learning-on-graph-embeddings-4305c10ad4a4)\n","86abc300":"## Laplacian GNN (LAPGCN)\n\nThis is another variation of GCNs where instead of a laplacian , we take the normalized laplacian matrix as the adjacency matrix and the feature matrix as inputs. The rest of the part is similar to the previous case . \n<img src=\"https:\/\/atcold.github.io\/pytorch-Deep-Learning\/images\/week13\/13-2\/Figure1.png\">\n\nSome points:\n\n-  Since no Laplacian eigen-decomposition is used, all operations are in the spatial (not spectral) domain,\n- Another drawback of LapGCNs is that convolutional layers involve sparse linear operations, which GPU\u2019s are not fully optimized for.","183c4eff":"## Conclusion of Spectral GCN\n\nSpectral GCN is the core part of GCN where we analysed laplacian transforms in the light of convolutions. The following are the resources which are helpful:\n\n- [blog](https:\/\/tkipf.github.io\/graph-convolutional-networks\/)\n- [blog](https:\/\/atcold.github.io\/pytorch-Deep-Learning\/en\/week13\/13-2\/)\n\n<img src=\"https:\/\/image.slidesharecdn.com\/smartbean-gcn-2019-03-07-naver-d2-sf-190311050200\/95\/graph-convolutional-neural-networks-22-638.jpg?cb=1552280822\">"}}