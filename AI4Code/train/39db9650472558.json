{"cell_type":{"27f39d5f":"code","9e9c7f89":"code","0d5560b4":"code","ffb28296":"code","4c75dff5":"code","3b9be1db":"code","ba74f733":"code","3dbf5d47":"code","dc3231d1":"code","f42ac228":"code","9a413eba":"code","d2959e3f":"code","765a4ae8":"code","9864460e":"code","4bac3b2d":"code","19a402dd":"code","2839d626":"code","fc648414":"code","e6a6c10e":"markdown","d6831f9b":"markdown","cd38b814":"markdown","8a9a4134":"markdown","8023a610":"markdown","3d3ffae8":"markdown","f3fae2bb":"markdown","568a88c7":"markdown","d5168b17":"markdown","9311b917":"markdown","77e0eb9b":"markdown","66e0fdfe":"markdown","faeeb02a":"markdown","d82c4546":"markdown"},"source":{"27f39d5f":"#Importing all libraries\nimport torch\nfrom torch import nn\nimport torch.nn.functional as F\nfrom torch import optim\n\nfrom torchvision import datasets, transforms\nfrom torch.utils.data import DataLoader, TensorDataset, Dataset\nfrom torchvision.utils import make_grid\nfrom torch.autograd import Variable\n\nimport time\nimport helper\nfrom tqdm import tqdm\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n%matplotlib inline","9e9c7f89":"#Import data\ntrain_df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest_df = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","0d5560b4":"#Labels(Targets) and Inputs\ntrain_labels = train_df['label'].values\ntrain_images = (train_df.iloc[:,1:].values).astype('float32')\ntest_images = (test_df.iloc[:,:].values).astype('float32')\n\n#Training and Validation Split\ntrain_images, val_images, train_labels, val_labels = train_test_split(train_images, \n                                                                      train_labels,\n                                                                      stratify=train_labels, \n                                                                      random_state=302,\n                                                                      test_size=0.2)","ffb28296":"#train\ntrain_images_tensor = torch.tensor(train_images)\/255.0\ntrain_labels_tensor = torch.tensor(train_labels)\ntrain_tensor = TensorDataset(train_images_tensor, train_labels_tensor)\n#val\nval_images_tensor = torch.tensor(val_images)\/255.0\nval_labels_tensor = torch.tensor(val_labels)\nval_tensor = TensorDataset(val_images_tensor, val_labels_tensor)\n#test\ntest_images_tensor = torch.tensor(test_images)\/255.0","4c75dff5":"#View Tensor shapes \ntrain_images_tensor.shape, train_labels_tensor.shape ","3b9be1db":"fig, axes = plt.subplots(2,5, figsize=(12,6))\naxes = axes.flatten()\nidx = np.random.randint(0,5000,size=10)\nfor i in range(10):\n    axes[i].imshow(train_images[idx[i],:].reshape(28,28), cmap='gray')\n    axes[i].axis('off') # hide the axes ticks\n    axes[i].set_title(str(int(train_labels[idx[i]])), color= 'black', fontsize=25)\nplt.show()","ba74f733":"#Dataloader\ntrain_loader = DataLoader(train_tensor, batch_size = 64, num_workers=2, shuffle=True)\nval_loader = DataLoader(val_tensor, batch_size = 64, num_workers=2, shuffle=True)\ntest_loader = DataLoader(test_images_tensor, batch_size = 32, num_workers=2, shuffle=False)","3dbf5d47":"len(train_loader)","dc3231d1":"model = nn.Sequential(nn.Linear(784, 512),\n                      nn.LeakyReLU(),\n                      nn.Linear(512, 256),\n                      nn.BatchNorm1d(256),\n                      nn.LeakyReLU(),\n                      nn.Linear(256, 10),\n                      nn.LogSoftmax(dim=1))\n\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=1e-5)\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\" )\ndevice","f42ac228":"model.to(device)\nmodel","9a413eba":"from utility import train_model, cal_accuracy","d2959e3f":"train_l, valid_l, train_a, valid_a= train_model(model, 20, train_loader, val_loader, \n            optimizer, criterion, device, model_save=True, model_name=\"model.pt\")","765a4ae8":"plt.plot(train_l, label='Training loss')\nplt.plot(valid_l, label='Validation loss')\nplt.legend(frameon=False)","9864460e":"plt.plot(train_a, label='Training Acc')\nplt.plot(valid_a, label='Validation Acc')\nplt.legend(frameon=False)","4bac3b2d":"model.load_state_dict(torch.load('model.pt'))","19a402dd":"def make_predictions(data_loader):\n    model.eval()\n    test_preds = torch.LongTensor()\n    \n    for i, data in enumerate(data_loader):\n        data = data.view(-1, 28*28).to(device)\n        output = model(data)\n        preds = output.data.max(1, keepdim=True)[1]\n        test_preds = torch.cat((test_preds.to(device), preds.to(device)), dim=0)\n    return test_preds","2839d626":"test_set_preds = make_predictions(test_loader)","fc648414":"sub = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\nsub['Label'] = test_set_preds.cpu().numpy().squeeze()\nsub.to_csv(\"MLP#1.csv\", index=False)\nsub.head()","e6a6c10e":"## 12. Submission\n---","d6831f9b":"## 3. Train and Validation datasets\n---\nSplitting dataset into train and validation. Also converting them to float values.","cd38b814":"## 5. Viewing the Images\n---","8a9a4134":"## 8. Functions for training and evaluation\n---","8023a610":"## 1. Importing Libraries\n---","3d3ffae8":"## 11. Prediction\n---","f3fae2bb":"## 10. Loading the saved model\n---","568a88c7":"## 9. Training the model over train dataset\n---","d5168b17":"## 2. Importing Dataset\n---","9311b917":"## 4. Reshaping the data to make Tensors\n---","77e0eb9b":"# Thank you!\n\nAuthor: Pratik Kumar","66e0fdfe":"## 7. Defining Model Architecture\n---","faeeb02a":"## 6. Feeding tensors to data loader\n---","d82c4546":"# Digit Recognition using MLP in PyTorch\n\nIn this competition, our goal is to correctly identify digits from a dataset of tens of thousands of handwritten images using custom multi-layered perceptron."}}