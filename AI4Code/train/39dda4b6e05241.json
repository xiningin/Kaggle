{"cell_type":{"94b5bb75":"code","5e4827c6":"code","98fd195c":"code","3e54054a":"code","05733c6f":"code","20bb92f6":"code","6af23ea4":"code","da73bad5":"code","2039d75c":"code","a4eb5b0c":"code","549882c1":"code","aae10705":"code","53bad714":"code","d3d88b65":"code","c993c1ac":"code","e1fe9aea":"code","ab0ab9cc":"code","4d494939":"code","17cbe0e9":"code","b8dba718":"code","a26a5475":"code","8fa7586c":"code","c945226c":"code","af9352b2":"code","88a747f9":"code","76f7c9a2":"code","1e40d5d6":"code","d43ff97b":"code","5a224bca":"code","35323c99":"code","b645c852":"code","83560a46":"code","f72616db":"code","730007c4":"code","a4cb0b3a":"code","14c65379":"code","30a5b567":"markdown","18828409":"markdown","08689d30":"markdown","2864e488":"markdown","e73c9dc3":"markdown","b4628e66":"markdown","fa5790de":"markdown","ce9e7ece":"markdown","4f241317":"markdown","9ca4242c":"markdown","40f36ac7":"markdown","283b1260":"markdown","ddafd87e":"markdown","3ec34824":"markdown","4f013128":"markdown","1260e9fb":"markdown","83362cd1":"markdown"},"source":{"94b5bb75":"\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport statsmodels as sm\nimport sklearn.preprocessing as preprocessing\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom scipy import stats\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nimport itertools\nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.pipeline import Pipeline\n#from xgboost import XGBClassifier\n#from catboost import CatBoostClassifier\nfrom sklearn.model_selection import StratifiedKFold\n#import xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')","5e4827c6":"# \u0641\u064a \u0643\u0644 \u0645\u0631\u0629   print \u0644\u0627\u0633\u062a\u0639\u0631\u0627\u0636 \u0643\u0644 \u0645\u062e\u0631\u062c\u0627\u062a \u0627\u0644\u062a\u0634\u063a\u064a\u0644 \u0641\u064a \u0646\u0641\u0633 \u0627\u0644\u062e\u0644\u064a\u0629 \u0645\u0646 \u063a\u064a\u0631 \u0627\u0644\u062d\u0627\u062c\u0647 \u0627\u0644\u0649 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0623\u0645\u0631  \nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","98fd195c":"# \u0642\u0631\u0627\u0621\u0629 \u0627\u0644\u0628\u06cc\u0627\u0646\u0627\u062a \ndata=pd.read_csv(\"..\/input\/wa-fnusec-telcocustomerchurn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")\n","3e54054a":"# \u0639\u0631\u0636 \u0627\u0648\u0644 10 \u0635\u0641\u0648\u0641\ndata.head(10)\n\n","05733c6f":"# \u0639\u0631\u0636 \u0622\u062e\u0631 10 \u0635\u0641\u0648\u0641\ndata.tail(10)","20bb92f6":"# \u0639\u0631\u0636 \u0627\u0628\u0639\u0627\u062f \u0642\u0627\u0639\u062f\u0629 \u0627\u0644\u0628\u06cc\u0627\u0646\u0627\u062a ( \u0639\u062f\u062f \u0627\u0644\u0635\u0641\u0648\u0641 \u0648 \u0627\u0644\u0623\u0639\u0645\u062f\u0629 )\ndata.shape","6af23ea4":"data.describe()","da73bad5":"data.info()","2039d75c":"# lowercase \u062a\u062d\u0648\u064a\u0644 \u062c\u0645\u064a\u0639 \u0627\u0644\u062d\u0631\u0648\u0641 \u0627\u0644\u0649\ndata.columns = map(str.lower, data.columns)\ndata.columns","a4eb5b0c":"# customerid \u063a\u064a\u0631 \u0645\u0641\u064a\u062f \u0644\u0630\u0627 \u0645\u0646 \u0627\u0644\u0623\u0641\u0636\u0644 \u062d\u0630\u0641\u0647\ndata.drop(['customerid'], axis=1, inplace=True)","549882c1":"#\u0627\u0633\u062a\u0639\u0631\u0627\u0636 \u0627\u0644\u0642\u064a\u0645 \u0627\u0644\u0641\u0631\u064a\u062f\u0647 \u0644\u0647\u0630\u0627 \u0627\u0644\u0639\u0645\u0648\u062f\ndata['totalcharges'].unique()\n","aae10705":"#total charges \u0641\u064a \u0639\u0645\u0648\u062f  nan \"\" \u0627\u0633\u062a\u0628\u062f\u0627\u0644 \u0627\u0644\u0642\u064a\u0645 \u0627\u0644\u0641\u0627\u0631\u063a\u0647 \ndata['totalcharges'] = data[\"totalcharges\"].replace(\" \",np.nan)\ndata.info()","53bad714":"# \u0641\u062d\u0635 \u0627\u0644\u0628\u06cc\u0627\u0646\u0627\u062a \u0644\u0644\u062a\u0623\u0643\u062f \u0647\u0644 \u0641\u06cc\u0647\u0627 \u0627\u064a \u0642\u06cc\u0645 nulls\ndata.isna().sum()","d3d88b65":"\ndata['totalcharges'].isna().sum()","c993c1ac":"print((data['totalcharges'].isna().sum()\/len(data))*100) # \u062d\u0633\u0627\u0628 \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064a\u0647 \u0644\u0644\u0642\u064a\u0645 \u0627\u0644\u0645\u0641\u0642\u0648\u062f\u0629\n","e1fe9aea":"#\u062d\u0630\u0641 \u0627\u0644\u0642\u064a\u0645 \u0627\u0644\u0645\u0641\u0642\u0648\u062f\u0647 \u0648\u0647\u064a \u0641\u0642\u0637 0.15% \ndata.dropna(inplace=True)","ab0ab9cc":"# \u0641\u062d\u0635 \u0627\u0644\u0628\u06cc\u0627\u0646\u0627\u062a \u0645\u0631\u0629 \u0623\u062e\u0631\u0649 \u0644\u0644\u062a\u0623\u0643\u062f \u0647\u0644 \u0641\u06cc\u0647\u0627 \u0627\u064a \u0642\u06cc\u0645 nulls\ndata.isna().sum()","4d494939":"#\u062a\u062d\u0648\u064a\u0644 \u0627\u0644\u0639\u0645\u0648\u062f \u0627\u0644\u0649 \u0646\u0648\u0639 \u0631\u0642\u0645\u064a \ndata[\"totalcharges\"] = data[\"totalcharges\"].astype(float)","17cbe0e9":"data.info()","b8dba718":"# \u0627\u0633\u062a\u0639\u0631\u0627\u0636 \u0645\u062d\u062a\u0648\u0649 \u0627\u0644\u0623\u0639\u0645\u062f\u0647\ndata['onlinesecurity'].value_counts()\ndata['onlinebackup'].value_counts()\ndata['deviceprotection'].value_counts()\ndata['techsupport'].value_counts()\ndata['streamingtv'].value_counts()\ndata['streamingmovies'].value_counts()","a26a5475":"#\u0627\u0633\u062a\u0628\u062f\u0627\u0644 'No internet service' \u0628 'No' \u0644\u0644\u0623\u0639\u0645\u062f\u0629 \u0627\u0644\u062a\u0627\u0644\u064a\u0629\n# \u0627\u0633\u062a\u0628\u062f\u0627\u0644 \nreplace_cols = [ 'onlinesecurity', 'onlinebackup', 'deviceprotection',\n                'techsupport','streamingtv', 'streamingmovies']\nfor i in replace_cols : \n    data[i]  = data[i].replace({'No internet service' : 'No'})","8fa7586c":"# \u0641\u062d\u0635 \u0645\u062d\u062a\u0648\u0649 \u0627\u0644\u0623\u0639\u0645\u062f\u0629 \u0645\u0646 \u062c\u062f\u064a\u062f\ndata['onlinesecurity'].unique()\ndata['onlinesecurity'].value_counts()\ndata['onlinebackup'].value_counts()\ndata['deviceprotection'].value_counts()\ndata['techsupport'].value_counts()\ndata['streamingtv'].value_counts()\ndata['streamingmovies'].value_counts()","c945226c":"# \u0627\u0633\u062a\u0628\u062f\u0627\u0644 \u0627\u0631\u0642\u0627\u0645 \u0635\u0641\u0631 \u0648 \u0648\u0627\u062d\u062f \u0628 yes , no \u0645\u0646 \u0627\u062c\u0644 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0645\u062b\u0644 \u0628\u0627\u0642\u064a \u0627\u0644\u0627\u0639\u0645\u062f\u0647 \u0627\u0644\u0641\u0626\u0648\u064a\u0647\ndata['seniorcitizen']=data['seniorcitizen'].replace({1:'Yes',0:\"No\"})\ndata['seniorcitizen'].value_counts()","af9352b2":"#   'zeo' \u0648 'one'\u0628  yes ,no \u0645\u0639\u0627\u0644\u062c\u0647 \u0627\u0644\u0639\u0645\u0648\u062f \u0627\u0644\u0647\u062f\u0641 \u0648\u0647\u0648 \u0627\u0644\u0645\u062e\u0631\u062c \u0627\u0644\u0630\u064a \u064a\u0635\u0646\u0641 \u0627\u0645\u0627 \u0635\u0641\u0631 \u0623\u0648 \u0648\u0627\u062d\u062f \u0648\u0644\u0630\u0627 \u0633\u064a\u062a\u0645 \u0627\u0633\u062a\u0628\u062f\u0627\u0644 \ndata['churn'] = data['churn'].apply(lambda x: x.strip().replace(\"Yes\", \"1\").replace(\"No\", \"0\"))\ndata['churn'] = data['churn'].astype('int')","88a747f9":"#### \u0639\u0645\u0644 labelencoder \u0644\u0644\u0641\u06cc\u062a\u0634\u0631\u0632 \u0627\u0644 categorical\ndf=pd.get_dummies(data, drop_first=True)","76f7c9a2":"df.info()\ndf.head()","1e40d5d6":"from sklearn.model_selection import train_test_split\n\n# \u062a\u0639\u0631\u064a\u0641 y\ny=df['churn'].copy()\n\n# \u062a\u0639\u0631\u064a\u0641 X\n\nX = df.drop(columns=['churn'], axis=1)\n\n\n\n#\u062a\u0642\u0633\u064a\u0645  \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0649 \u062a\u062f\u0631\u064a\u0628 \u0648\u0627\u062e\u062a\u0628\u0627\u0631\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.4,\n                                                 random_state=42)\n","d43ff97b":"# \u0628\u0646\u0627\u0621   logistic regression \u0643\u0645\u0648\u062f\u064a\u0644 \u0635\u0641\u0631\u064a \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 statsmodels\n\nimport statsmodels.api as sm\n# \u062a\u0639\u0631\u064a\u0641 y\ny=df['churn'].copy()\n\n# \u062a\u0639\u0631\u064a\u0641 X\n\nX = df.drop(columns=['churn'], axis=1)\n\n\n# \u062a\u0639\u0631\u064a\u0641 \u0627\u0644\u0639\u0646\u0635\u0631 \u0627\u0644\u062b\u0627\u0628\u062a \u0648\u0647\u0648 \u0627\u0644\u062d\u062f \u0627\u0644\u0642\u0627\u0637\u0639 \u0639\u0644\u0649 \u0645\u062d\u0648\u0631 \u0648\u0627\u064a \u0639\u0646\u062f\u0645\u0627 \u0627\u0643\u0633 \u062a\u0633\u0627\u0648\u064a \u0635\u0641\u0631\nX = sm.add_constant(X)\n\n# Fit model\nlogit_model = sm.Logit(y, X)\n\n# \u0646\u062a\u0627\u0626\u062c \u0627\u0644\u0646\u0645\u0630\u062c\u0629\nresult = logit_model.fit()\nresult.summary()","5a224bca":"#\u062d\u0630\u0641 \u0627\u0644\u0627\u0623\u0639\u0645\u062f\u0647 \u0630\u0627\u062a \u0642\u064a\u0645\u0629  p-value >0.05 \n# \u0644\u0643\u0648\u0646\u0647\u0627 \u0641\u064a\u062a\u0634\u0631 \u063a\u064a\u0631 \u0645\u0641\u064a\u062f\u0629 \u0628\u0633\u0628\u0628 \u0642\u064a\u0645\u0629 \u0627\u0644 \u0627\u0644\u0645\u0631\u062a\u0641\u0639\u0647 higher p-values\n\ndf.drop(['monthlycharges','gender_Male','partner_Yes','dependents_Yes','onlinesecurity_Yes','onlinebackup_Yes',\n 'deviceprotection_Yes','techsupport_Yes','streamingtv_Yes','streamingmovies_Yes','paymentmethod_Credit card (automatic)',\n 'paymentmethod_Mailed check'],axis=1, inplace=True)\ndisplay(df.columns)\nX=df.drop(columns=['churn'], axis=1) ### \u0627\u0639\u0627\u062f\u0629 \u062a\u0639\u0631\u064a\u0641 X \u0628\u0639\u062f \u062d\u0630\u0641 \u0627\u0644\u0641\u064a\u0634\u0631 \u063a\u064a\u0631  \u0627\u0644\u0645\u0647\u0645\u0629 \nX\ndf.info()","35323c99":"#scale \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0631\u0642\u0645\u064a\u0629 \nfrom sklearn.preprocessing import StandardScaler\nss = StandardScaler()\n# Scale \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u062f\u0631\u064a\u0628 \u0648\u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631\nX_train = ss.fit_transform(X_train)\nX_test = ss.transform(X_test)","b645c852":"import itertools\nfrom sklearn.metrics import confusion_matrix \n\n### \u062a\u0639\u0631\u064a\u0641 \u0631\u0633\u0645 \u062f\u0627\u0644\u0629 \u0627\u0644\u0643\u0648\u0646\u0641\u064a\u0648\u062c\u064a\u0646 \u0645\u0627\u062a\u0631\u064a\u0643\u0633\ndef plot_confusion_matrix(y_true, y_preds):\n    # Print confusion matrix\n    cnf_matrix = confusion_matrix(y_true, y_preds)\n    # Create the basic matrix\n    plt.imshow(cnf_matrix,  cmap=plt.cm.Blues)\n    # Add title and axis labels\n    plt.title('Confusion Matrix')\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    # Add appropriate axis scales\n    class_names = set(y) # Get class labels to add to matrix\n    tick_marks = np.arange(len(class_names))\n    plt.xticks(tick_marks, class_names, rotation=0)\n    plt.yticks(tick_marks, class_names)\n    # Add labels to each cell\n    thresh = cnf_matrix.max() \/ 2. # Used for text coloring below\n    # Here we iterate through the confusion matrix and append labels to our visualization\n    for i, j in itertools.product(range(cnf_matrix.shape[0]), range(cnf_matrix.shape[1])):\n            plt.text(j, i, cnf_matrix[i, j],\n                     horizontalalignment='center',\n                     color='white' if cnf_matrix[i, j] > thresh else 'black')\n    # Add a legend\n    plt.colorbar();\n    plt.show();\ndef metrics(model_name, y_train, y_test, y_hat_train, y_hat_test):\n    '''Print out the evaluation metrics for a given models predictions'''\n    print(f'Model: {model_name}', )\n    print('-'*60)\n    plot_confusion_matrix(y_test,y_hat_test)\n    print(f'test accuracy: {accuracy_score(y_test, y_hat_test)}')\n    print(f'train accuracy: {accuracy_score(y_train, y_hat_train)}')\n    print('-'*60)\n    print('-'*60)\n    print('Confusion Matrix:\\n', pd.crosstab(y_test, y_hat_test, rownames=['Actual'], colnames=['Predicted'],margins = True))\n    print('\\ntest report:\\n' + classification_report(y_test, y_hat_test))\n    print('~'*60)\n    print('\\ntrain report:\\n' + classification_report(y_train, y_hat_train))\n    print('-'*60)","83560a46":"## Define X, y and split data into training and testing\nfrom sklearn.model_selection import train_test_split\n\n# Split data into X and y\ny=df['churn'].copy()\n\n# Define X\n\nX = df.drop(columns=['churn'], axis=1)\n\n\n\n#importing train_test_split\nfrom sklearn.model_selection import train_test_split\n# Split the data into a training and a test set and set stratify=y to help with imbalance data\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.4,\n                                                 random_state=42)\n\n\n\n## logistic regression with sickit learn before smote\nlogreg = LogisticRegression()\nbase_log = logreg.fit(X_train, y_train)\nbase_log\n#predictions\ny_hat_train=base_log.predict(X_train)\ny_hat_test = base_log.predict(X_test)\n\n# model results\n\nmetrics(base_log, y_train, y_test, y_hat_train, y_hat_test)\n# To get the  coffients of all the variables of logistic Regression\nbase_log_cof = pd.Series(base_log.coef_[0], index=X.columns.values)\nprint(base_log_cof)\n\nbase_log_cof.sort_values(inplace=True)\nplt.figure(figsize=(15, 6))\nplt.xticks(rotation=90)\nfeatures=plt.bar(base_log_cof.index,base_log_cof.values)","f72616db":"# \u0646\u0645\u0648\u0630\u062c RandomForestClassifier with n_estimators=10\nforest_1 = RandomForestClassifier(n_estimators=10)\n\nforest_1.fit(X_train, y_train)\n\n#predictions\ny_hat_train=forest_1.predict(X_train)\ny_hat_test = forest_1.predict(X_test)\n\n# model results\n\nmetrics(forest_1, y_train, y_test, y_hat_train, y_hat_test)","730007c4":"rf_param = RandomForestClassifier()\nparam_grid = {\n     'criterion':['gini','entropy'],\n    'max_depth':[2,3,4,5,20],\n    'min_samples_split':[5,20,50],\n    'min_samples_leaf':[15,20,30],\n    'n_estimators': [1,5,10]\n}\ngs = GridSearchCV(forest_1, param_grid, cv=3, n_jobs=-1)\ngs.fit(X_train, y_train)\ngs.best_params_","a4cb0b3a":"# Instantiate and fit a RandomForestClassifier with n_estimators=100\nforest_2 = RandomForestClassifier(n_estimators=10,\n                                criterion= 'gini',\n                                max_depth= 20,\n                                min_samples_leaf= 15,\n                                min_samples_split= 50)\n\nforest_2.fit(X_train, y_train)\n\n#predictions\ny_hat_train=forest_2.predict(X_train)\ny_hat_test = forest_2.predict(X_test)\n\n# model results\n\nmetrics(forest_2, y_train, y_test, y_hat_train, y_hat_test)\n# To get the feature importance\nfeature_important=forest_2.feature_importances_\n# Plot features importances\nimp = pd.Series(data=forest_2.feature_importances_, index=X.columns).sort_values(ascending=False)\nplt.style.use('dark_background')\nplt.figure(figsize=(10,12))\nplt.title(\"Feature importance of Random Forest model\")\nax = sns.barplot(y=imp.index, x=imp.values, palette=\"RdBu\")","14c65379":"from xgboost import XGBClassifier\nimport xgboost as xgb\nfrom sklearn.metrics import recall_score\nfrom sklearn.model_selection import GridSearchCV\nclf_xgb = XGBClassifier()\nparam_grid = {\n    \"learning_rate\": [0.1,0.2,0.5,0.9],\n    'max_depth': [3, 9, 12],\n    'min_child_weight': [10, 18],\n    'subsample': [0.3, 0.9],\n    'n_estimators': [5, 30, 100, 150],\n    'nthread' : [-1],\n}\ngrid_clf = GridSearchCV(clf_xgb, param_grid, scoring='recall', cv=5, n_jobs=1)\ngrid_clf.fit(X_train, y_train)\n\nbest_parameters = grid_clf.best_params_\n\nprint(\"Grid Search found the following optimal parameters: \")\nfor param_name in sorted(best_parameters.keys()):\n    print(\"%s: %r\" % (param_name, best_parameters[param_name]))\n\ny_hat_train = grid_clf.predict(X_train)\ny_hat_test= grid_clf.predict(X_test)\nmetrics(grid_clf, y_train, y_test, y_hat_train, y_hat_test)\ntrain_accuracy=recall_score(y_train, y_hat_train)\ntest_accuracy = recall_score(y_test, y_hat_test)\nprint(\"\")\nprint(\"Training recall: {:.4}%\".format(train_accuracy * 100))\nprint(\"Test recall: {:.4}%\".format(test_accuracy * 100))","30a5b567":"\u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0627\u0644\u0623\u0633\u0627\u0633\u064a:logistic regression with sickit learn ","18828409":"\u0645\u0646 \u0623\u062c\u0644 \u0627\u062e\u062a\u06cc\u0627\u0631 \u0646\u0635\u0641 \u0639\u062f\u062f \u0627\u0644\u0641\u06cc\u062a\u0634\u0631\u0632\n\n\u0633\u0623\u0642\u0648\u0645  \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0627\u062d\u062f \u0627\u062f\u0648\u0627\u062a \u0627\u062e\u062a\u06cc\u0627\u0631 \u0627\u0644\u0641\u06cc\u062a\u0634\u0631\u0632 \n\n\u0639\u0628\u0631 \n\nstatsmodels\n\n\u0648\u0628\u0627\u0644\u062a\u0627\u0644\u064a \u0633\u0627\u0633\u062a\u0637\u064a\u0639 \u062d\u0630\u0641 \u0627\u0644\u0641\u064a\u062a\u0634\u0631 \u0627\u0644\u062a\u064a \u0642\u064a\u0645\u0629 \u0627\u0644\n\n\npvalue>0.05\n\n\u0648\u0644\u0643\u0646 \u0639\u0644\u064a \u0623\u0648\u0644\u0627 \u062a\u0642\u0633\u064a\u0645 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a  \u0627\u0644\u064a \u062a\u062f\u0631\u06cc\u0628 \u0648 \u0627\u062e\u062a\u0628\u0627\u0631 \n\u0639\u0644\u0649 \u0627\u0644\u0646\u062d\u0648 \u0627\u0644\u062a\u0627\u0644\u064a:\n\n","08689d30":"\u0639\u0645\u0644scaling \u0644\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0631\u0642\u0645\u064a\u0629","2864e488":"XGBoost","e73c9dc3":"### \u062f\u0642\u0629 \u0627\u0644\u0627\u062e\u062a\u0628\u0627\u0631: 0.7945254177035194\n\u062f\u0642\u0629 \u0627\u0644\u062a\u062f\u0631\u064a\u0628: 0.8260251244370704\n\u0645\u0646 \u0648\u062c\u0647\u0647 \u0646\u0638\u0631\u064a \n\nXGBoost ,Random forest \n\n\u0647\u064a \u0646\u0645\u0627\u0630\u062c \u0645\u0645\u062a\u0627\u0632\u0629 \u062e\u0635\u0648\u0635\u0627 \u0639\u0646\u062f \u062a\u0646\u0639\u064a\u0645\u0647\u0627 \n\n\u0648\u0644\u062a\u062d\u0633\u064a\u0646 \u0627\u0644\u0627\u062f\u0627\u0621 \u0623\u0642\u062a\u0631\u062d \u0639\u0645\u0644 \u0645\u0648\u0627\u0632\u0646\u0629 \u0641\u064a \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0639\u0645\u0648\u062f \u0627\u0644\u0647\u062f\u0641 \u0639\u0628\u0631 \u0627\u062d\u062f\u0649 \u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u062a\u0627\u0644\u064a\u0629:\n\n1- class_weight='balanced'\n\n2- stratify='y'\n\n\n3- smote","b4628e66":"\u0645\u0639 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 n-Estimator = 10 \u060c\n\n\u0648\u0627\u062c\u0647\u062a \u0645\u0634\u0643\u0644\u0629 \u0627\u0648\u0641\u0631\u0641\u064a\u062a\u064a\u0646\u062c \u060c \u0644\u0630\u0627 \u0633\u0623\u062c\u0631\u064a \u0628\u062d\u062b\u064b\u0627 \u0622\u062e\u0631 \u0645\u0639 \u0627\u0644\u0645\u0632\u064a\u062f \u0645\u0646 \u0627\u0644\u062a\u0646\u0639\u064a\u0645\n\n \n\u0641\u064a \u0645\u062d\u0627\u0648\u0644\u0629 \u0627\u062a\u0628\u0627\u0639 \u0623\u0641\u0636\u0644 \u0623\u062f\u0627\u0621 \u0639\u0645\u0644  \u0644\u0646\u0645\u0648\u0630\u062c\u064a \u0633\u0623\u0642\u0648\u0645 \u0628\u0627\u0644\u0628\u062d\u062b \u0639\u0646 \u0623\u0641\u0636\u0644 \u0628\u0627\u0631\u0627\u0645\u062a\u0631 \u0639\u0628\u0631  \n\nGridsearch \u0627\u0633\u062a\u062e\u062f\u0627\u0645\n\n","fa5790de":"\u062c\u0645\u064a\u0639 \u0627\u0644\u0623\u0639\u0645\u062f\u0647 \u0647\u064a \u0623\u0639\u0645\u062f\u0647  \u0641\u0626\u0648\u064a\u0629 \n\u0645\u0627 \u0639\u062f\u0627 \u0623\u0639\u0645\u062f\u0647 : senior citizen,tenure,  monthly charge\n    \u0644\u0643\u0646\u0646\u0627 \u0646\u0639\u0644\u0645 \u0645\u0633\u0628\u0642\u0627 \u0623\u0646 \u0639\u0645\u0648\u062f senior citizen : \u0647\u0648 \u0639\u0645\u0648\u062f \u0641\u0626\u0648\u064a \u0628\u0645\u0639\u0646\u0649 \u0623\u0630\u0627 \u0627\u0644\u0632\u0628\u0648\u0646 \u0645\u0633\u0646 \u064a\u0623\u062e\u0630 \u0631\u0642\u0645 \u0648\u0627\u062d\u062f \u0648\u0627\u0630\u0627 \u0627\u0644\u0632\u0628\u0648\u0646 \u063a\u064a\u0631 \u0645\u0633\u0646 \u064a\u0623\u062e\u0630 \u0631\u0642\u0645 \u0635\u0641\u0631 \u0644\u0630\u0627 \u064a\u062c\u0628 \u062a\u063a\u064a\u064a\u0631 \u0646\u0648\u0639 \u0647\u0630\u0627 \u0627\u0644\u0639\u0645\u0648\u062f \n    \u0627\u0644\u0649 \u0639\u0645\u0648\u062f \u0641\u0626\u0648\u064a \n\n\u0623\u064a\u0636\u0627 \u0639\u0645\u0648\u062f \u0641\u0626\u0648\u064a  TotalCharges \n \n \u0648\u064a\u062c\u0628 \u0623\u0646 \u064a\u062a\u0645 \u062a\u062d\u0648\u064a\u0644\u0647 \u0627\u0644\u0649 \u0639\u0645\u0648\u062f \u0631\u0642\u0645\u064a \u0644\u0627\u0646\u0647 \u064a\u0645\u062b\u0644 \u0627\u0644\u0645\u0628\u0644\u063a \u0627\u0644\u0643\u0627\u0645\u0644 \u0627\u0644\u0630\u064a \u064a\u062f\u0641\u0639\u0647 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645","ce9e7ece":"\u0639\u0646\u062f \u062a\u062c\u0631\u0628\u0629 \u0623\u0641\u0636\u0644 \u0627\u0644\u0628\u0627\u0631\u0627\u0645\u062a\u0631\u0627\u062a \u0627\u0644\u0645\u0642\u062a\u0631\u062d\u0629 \u0623\u0639\u0644\u0627\u0647 \u060c \u062d\u0635\u0644\u062a \u0639\u0644\u0649 \u0627\u062e\u062a\u0628\u0627\u0631 \u0646\u0645\u0648\u0630\u062c\u064a \u0623\u0641\u0636\u0644 \u0648\u062f\u0642\u0629 \u062a\u062f\u0631\u064a\u0628 \u0628\u0646\u0633\u0628\u0629 81\u066a.\n\u0648\u062f\u0642\u0647 \u0627\u062e\u062a\u0628\u0627\u0631 \u0628\u0646\u0633\u0628\u0629\u0668\u0660\u066a ","4f241317":"\u0645\u0639\u062f\u0644 \u0627\u0644\u0641\u062a\u0631\u0647 \u0627\u0644\u0632\u0645\u0646\u064a\u0629 \u0644\u0644\u0645\u0634\u062a\u0631\u0643\u064a\u0646 \u0663\u0662 \u0634\u0647\u0631 \u0648\u0627\u064c\u0642\u0635\u0649 \u0641\u062a\u0631\u0629 \u0632\u0645\u0646\u064a\u0629 \u0667\u0662 \u0634\u0647\u0631\n\n\n\u0645\u0639\u062f\u0644 \u0627\u0644\u0641\u0627\u062a\u0648\u0631\u0629 \u0627\u0644\u0634\u0647\u0631\u064a\u0647 \u062d\u0648\u0627\u0644\u064a \u0666\u0665 \u062f\u0648\u0644\u0627\u0631 \u0648\u0627\u0644\u062d\u062f \u0627\u0644\u0627\u062f\u0646\u0649 \u0644\u0647\u0627 \u0661\u0668 \u062f\u0648\u0644\u0627\u0631 \u062a\u0642\u0631\u064a\u0628\u0627. \u0648\u0627\u0644\u062d\u062f \u0627\u0644\u0623\u0639\u0644\u0649 \u0644\u0644\u0641\u0627\u062a\u0648\u0631\u0629 \u0627\u0644\u0634\u0647\u0631\u064a\u0647 \u062d\u0648\u0627\u0644\u064a \u062f\u0648\u0644\u0627\u0631 \u0661\u0661\u0669 ","9ca4242c":"\n### \u0645\u063a\u0627\u062f\u0631\u0647 \u0627\u0644\u0639\u0645\u0644\u0627\u0621 \u0644\u062e\u062f\u0645\u0647 \u0627\u0644\u0627\u062a\u0635\u0627\u0644\u0627\u062a\n### \u0627\u0644\u0645\u0642\u062f\u0645\u0629\n#### \u0645\u0627 \u0627\u0644\u0645\u0642\u0635\u0648\u062f \u0628\u0631\u062d\u064a\u0644 \u0627\u0644\u0632\u0628\u0648\u0646\u061f\n\u064a\u0639\u062a\u0628\u0631 \u0631\u062d\u064a\u0644 \u0627\u0644\u0639\u0645\u064a\u0644 \u0639\u0628\u0631 \u0627\u0644\u063a\u0627\u0621 \u0627\u0644\u0627\u0634\u062a\u0631\u0627\u0643 \u0641\u064a \u0634\u0631\u0643\u0647 \u0627\u0644\u0627\u062a\u0635\u0627\u0644\u0627\u062a \u062e\u0633\u0627\u0631\u0629 \u0643\u0628\u0631\u0649 \u0639\u0644\u0649 \u0627\u0644\u0634\u0631\u0643\u0647 \u0644\u0623\u0646 \u0627\u0644\u0634\u0631\u0643\u0647 \u0642\u0627\u0626\u0645\u0647 \u0639\u0644\u0649 \u0639\u062f\u062f  \u0627\u0644\u0639\u0645\u0644\u0627\u0621 \u0627\u0644\u0630\u064a\u0646 \u064a\u0633\u062a\u062e\u062f\u0645\u0648\u0646 \u062e\u062f\u0645\u0627\u062a\u0647\u0627 \u0648 \u0639\u0646\u062f\u0645\u0627 \u064a\u062a\u0648\u0642\u0641 \u0627\u0644\u0639\u0645\u064a\u0644 \u0639\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u062e\u062f\u0645\u0629 \u0627\u0644\u0634\u0631\u0643\u0629  \u0633\u062a\u0643\u0648\u0646 \u062e\u0633\u0627\u0631\u0629 \u0643\u0628\u0631\u0649 \u0639\u0644\u0649 \u0627\u0644\u0634\u0631\u0643\u0647 \u0648\u0633\u062a\u0643\u0648\u0646 \u0643\u0644\u0641\u0647 \u0627\u064a\u062c\u0627\u062f \u0645\u0634\u062a\u0631\u0643\u064a\u0646 \u062c\u062f\u062f \u0639\u0628\u0631 \u0627\u0644\u0627\u0639\u0644\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u062c\u0627\u0631\u064a\u0647 \u0645\u062b\u0644\u0627 \u0645\u0643\u0644\u0641\u0647 \u0623\u0643\u062b\u0631 \u0645\u0646 \u0627\u0644\u0645\u062d\u0627\u0641\u0638\u0647 \u0639\u0644\u0649 \u0627\u0644\u0645\u0634\u062a\u0631\u0643\u064a\u0646 \u0627\u0644\u0642\u062f\u0627\u0645\u0649.\n","40f36ac7":"\u062a\u0639\u0631\u064a\u0641 \u062f\u0627\u0644\u0629 \u0627\u0644\u0645\u064a\u062a\u0631\u064a\u0633 \u0648\u0631\u0633\u0645 \u0627\u0644\u0643\u0648\u0646\u0641\u064a\u0648\u062c\u064a\u0646 \u0645\u0627\u062a\u0631\u064a\u0643\u0633","283b1260":"\u0627\u0644\u0646\u0645\u0648\u0630\u062c \u0627\u0644\u0623\u0633\u0627\u0633\u064a \u0645\u0639 \u0627\u0644\u0627\u0646\u062d\u062f\u0627\u0631 \u0627\u0644\u0644\u0648\u062c\u0633\u062a\u064a \u0644\u062f\u064a\u0647 \u062f\u0642\u0629 80.5 \u066a \u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u062a\u062f\u0631\u064a\u0628 \u0648 80.0 \u066a \u0644\u0644\u0627\u062e\u062a\u0628\u0627\u0631 \u060c","ddafd87e":"\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0639\u0646 \u0645\u0644\u0641 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u0645\u0634\u0631\u0648\u0639:\n\n\n\u0639\u0645\u0648\u062f \"Churn\" \u0647\u0648 \u0647\u062f\u0641\u0646\u0627.\n\ncustomerID: \u0627\u0644\u0631\u0642\u0645 \u0627\u0644\u062a\u0639\u0631\u064a\u0641\u064a \u0644\u0644\u0639\u0645\u064a\u0644 \u0647\u0648 \u0642\u064a\u0645\u0629 \u0641\u0631\u064a\u062f\u0629 \u0648\u064a\u0648\u062c\u062f  \u0641\u064a\u0647 7043 \u0645\u062f\u062e\u0644\u0627.\n\ngender : \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0627\u0644\u0639\u0645\u064a\u0644 \u0630\u0643\u0631\u0627 \u0623\u0645 \u0623\u0646\u062b\u0649.\n\nSeniorCitizen: \u0645\u0627 \u0625\u0630\u0627 \u0627\u0644\u0639\u0645\u064a\u0644 \u0645\u0633\u0646\u0627 \u0623\u0645 \u0644\u0627 (1 \u060c 0)\n\n Partner: \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0644\u0644\u0639\u0645\u064a\u0644  \u0634\u0631\u064a\u0643 \u062d\u064a\u0627\u0629 \u0645\u0634\u062a\u0631\u0643\u0627 \u0645\u0639\u0647 \u0641\u064a \u062e\u062f\u0645\u0647 \u0627\u0644\u0627\u062a\u0635\u0627\u0644\u0627\u062a \u0623\u0645 \u0644\u0627 (\u0646\u0639\u0645 \u060c \u0644\u0627)\n\n Dependents  : \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0644\u0644\u0639\u0645\u064a\u0644 \u0623\u0642\u0627\u0631\u0628 \u064a\u0646\u0641\u0642 \u0639\u0644\u064a\u0647\u0645 \u062e\u062f\u0645\u0629 \u0627\u0644\u0627\u062a\u0635\u0627\u0644\u0627\u062a \u0623\u0645 \u0644\u0627 (\u0646\u0639\u0645 \u060c \u0644\u0627)\n\ntenure : \u0639\u062f\u062f \u0627\u0644\u0623\u0634\u0647\u0631 \u0627\u0644\u062a\u064a \u0642\u0636\u0627\u0647\u0627 \u0627\u0644\u0639\u0645\u064a\u0644 \u0641\u064a \u0627\u0644\u0634\u0631\u0643\u0629\n\nPhoneService: \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0644\u0644\u0639\u0645\u064a\u0644  \u062e\u062f\u0645\u0629 \u0647\u0627\u062a\u0641 \u0623\u0645 \u0644\u0627 (\u0646\u0639\u0645 \u060c \u0644\u0627)\n\nMultipleLines : \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0644\u0644\u0639\u0645\u064a\u0644 \u062e\u0637\u0648\u0637 \u0639\u062f\u0651\u0629 \u0623\u0645 \u0644\u0627 (\u0646\u0639\u0645 \u060c \u0644\u0627 \u060c \u0644\u0627 \u062a\u0648\u062c\u062f \u062e\u062f\u0645\u0629 \u0647\u0627\u062a\u0641)\n\nInternetService (DSL \u060c \u0627\u0644\u0623\u0644\u064a\u0627\u0641 \u0627\u0644\u0636\u0648\u0626\u064a\u0629 \u060c \u0644\u0627)\n\nOnlineSecurity: \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0644\u0644\u0639\u0645\u064a\u0644  \u062a\u0623\u0645\u064a\u0646 \u0639\u0644\u0649 \u0627\u0644\u0625\u0646\u062a\u0631\u0646\u062a \u0623\u0645 \u0644\u0627 (\u0646\u0639\u0645 \u060c \u0644\u0627 \u060c \u0644\u0627 \u062e\u062f\u0645\u0629 \u0625\u0646\u062a\u0631\u0646\u062a)\n\nOnlineBackup: \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0644\u0644\u0639\u0645\u064a\u0644  \u0646\u0633\u062e\u0629 \u0627\u062d\u062a\u064a\u0627\u0637\u064a\u0629 \u0639\u0628\u0631 \u0627\u0644\u0625\u0646\u062a\u0631\u0646\u062a \u0623\u0645 \u0644\u0627 (\u0646\u0639\u0645 \u060c \u0644\u0627 \u060c \u0644\u0627 \u062a\u0648\u062c\u062f \u062e\u062f\u0645\u0629 \u0625\u0646\u062a\u0631\u0646\u062a)\n\nDeviceProtection: \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0627\u0644\u0639\u0645\u064a\u0644 \u0644\u062f\u064a\u0647 \u062d\u0645\u0627\u064a\u0629 \u0644\u0644\u062c\u0647\u0627\u0632 \u0623\u0645 \u0644\u0627 (\u0646\u0639\u0645 \u060c \u0644\u0627 \u060c \u0644\u0627 \u062a\u0648\u062c\u062f \u062e\u062f\u0645\u0629 \u0625\u0646\u062a\u0631\u0646\u062a)\n\nTechSupport: \u0633\u0648\u0627\u0621 \u0643\u0627\u0646 \u0627\u0644\u0639\u0645\u064a\u0644 \u0644\u062f\u064a\u0647 \u062f\u0639\u0645 \u0641\u0646\u064a \u0623\u0645 \u0644\u0627 (\u0646\u0639\u0645 \u060c \u0644\u0627 \u060c \u0644\u0627 \u062e\u062f\u0645\u0629 \u0625\u0646\u062a\u0631\u0646\u062a)\n\nStreamingTV: \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0627\u0644\u0639\u0645\u064a\u0644 \u062e\u062f\u0645\u0647 \u0628\u062b \u0645\u0628\u0627\u0634\u0631 \u0623\u0645 \u0644\u0627 (\u0646\u0639\u0645 \u060c \u0644\u0627 \u060c \u0644\u0627 \u062e\u062f\u0645\u0629 \u0625\u0646\u062a\u0631\u0646\u062a)\n\nStreamingMovies: \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0644\u0644\u0639\u0645\u064a\u0644 \u062e\u062f\u0645\u0629 \u0623\u0641\u0644\u0627\u0645 \u062a\u0639\u0631\u0636 \u0628\u062b \u0645\u0628\u0627\u0634\u0631 \u0623\u0645 \u0644\u0627 (\u0646\u0639\u0645 \u060c \u0644\u0627 \u060c \u0644\u0627 \u062e\u062f\u0645\u0629 \u0625\u0646\u062a\u0631\u0646\u062a)\n\nContract  : \u0645\u062f\u0629 \u0627\u0644\u0639\u0642\u062f \u0644\u0644\u0639\u0645\u064a\u0644 (\u0634\u0647\u0631\u064a\u0627 \u060c \u0633\u0646\u0629 \u0648\u0627\u062d\u062f\u0629 \u060c \u0633\u0646\u062a\u0627\u0646)\n\nPaperlessBilling: \u0645\u0627 \u0625\u0630\u0627 \u0643\u0627\u0646 \u0644\u0644\u0639\u0645\u064a\u0644 \u062e\u062f\u0645\u0629 \u0627\u0631\u0633\u0627\u0644 \u0641\u0627\u062a\u0648\u0631\u0629 \u063a\u064a\u0631 \u0648\u0631\u0642\u064a\u0629 \u0623\u0645 \u0644\u0627 (\u0646\u0639\u0645 \u060c \u0644\u0627)\n\nPaymentMethod  : \u0637\u0631\u064a\u0642\u0629 \u0627\u0644\u062f\u0641\u0639 \u0644\u0644\u0639\u0645\u064a\u0644 (\u0634\u064a\u0643 \u0625\u0644\u0643\u062a\u0631\u0648\u0646\u064a \u060c \u0634\u064a\u0643 \u0628\u0627\u0644\u0628\u0631\u064a\u062f \u060c \u062a\u062d\u0648\u064a\u0644 \u0645\u0635\u0631\u0641\u064a (\u062a\u0644\u0642\u0627\u0626\u064a) \u060c \u0628\u0637\u0627\u0642\u0629 \u0627\u0626\u062a\u0645\u0627\u0646 (\u062a\u0644\u0642\u0627\u0626\u064a))\n\nMonthlyCharges: \u0627\u0644\u0645\u0628\u0644\u063a \u0627\u0644\u0645\u0637\u0644\u0648\u0628 \u0645\u0646 \u0627\u0644\u0639\u0645\u064a\u0644 \u0634\u0647\u0631\u064a\u064b\u0627\n\nTotalCharges:  \u0627\u0644\u0645\u0628\u0644\u063a \u0627\u0644\u0625\u062c\u0645\u0627\u0644\u064a  \u0627\u0644\u0645\u0637\u0627\u0644\u0628 \u0628\u0647 \u0627\u0644\u0639\u0645\u064a\u0644\n\nChurn: \u0641\u064a\u0645\u0627 \u0627\u0630\u0627 \u0643\u0627\u0646 \u0627\u0644\u0639\u0645\u064a\u0644 \u0623\u0644\u063a\u0649 \u0627\u0644\u0627\u0634\u062a\u0631\u0627\u0643 \u0623\u0645 \u0644\u0627 (\u0646\u0639\u0645 \u0623\u0648 \u0644\u0627)\n\n","3ec34824":"\u062a\u0648\u062c\u062f \u0661\u0661 \u0642\u064a\u0645\u0629 \u062a\u062d\u0648\u064a \u0639\u0644\u0649 nan\n\n\u0648\u062d\u064a\u062b \u0623\u0646 \u0647\u0630\u0647 \u0645\u062c\u0631\u062f \u0661\u0661 \u0642\u064a\u0645\u0647 \u0645\u0646 \u0627\u062c\u0645\u0627\u0644\u064a 7043\n11\/7043*100=0.15%\n\n\u0648\u0628\u0627\u0644\u062a\u0627\u0644\u064a \u062d\u0630\u0641\u0647\u0627 \u0644\u0646 \u064a\u0624\u062b\u0631 \u0644\u0643\u0648\u0646\u0647\u0627 \u0642\u0644\u064a\u0644\u0647 \u062c\u062f\u0627","4f013128":"\u064a\u0642\u062a\u0631\u062d Gridsearh {'\u0627\u0644\u0628\u0627\u0631\u0627\u0645\u062a\u0631\u0627\u062a': 'gini'\u060c 'max_depth': 20\u060c 'min_samples_leaf': 15 'min_samples_split': 50\u060c 'n_estimators': 10} \n\n\u0643\u0623\u0641\u0636\u0644 \u0628\u0627\u0631\u0627\u0645\u062a\u0631\u0627\u062a\n\n \u0644\u0630\u0644\u0643 \u0633\u0648\u0641 \u0623\u0642\u0648\u0645 \u0628\u062a\u0637\u0628\u064a\u0642\u0647\u0627  \u0641\u064a \n \n Randomforest \n\n\n\u0648\u0633\u0623\u062a\u062d\u0642\u0642 \u0645\u0646 \u0645\u0642\u0627\u064a\u064a\u0633 \u0627\u0644\u062f\u0642\u0629","1260e9fb":"\u0627\u0633\u062a\u064a\u0631\u0627\u062f \u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a \u0627\u0644\u0644\u0627\u0632\u0645\u0629","83362cd1":"\u0645\u0639\u0627\u0644\u062c\u0629 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a"}}