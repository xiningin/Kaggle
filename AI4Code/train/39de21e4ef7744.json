{"cell_type":{"f8c00522":"code","c49a47b6":"code","08396dd6":"code","1edf4c78":"code","92dbcc8d":"code","712d5eb0":"code","7c0ad958":"code","55042864":"code","1188b949":"code","f27393ed":"code","d703b73b":"markdown","a6850e0b":"markdown","cab55418":"markdown","a004fd92":"markdown","0be07e60":"markdown","f64b2341":"markdown"},"source":{"f8c00522":"import os, math, glob, re\nimport numpy as np\nimport pandas as pd\nimport cv2\n\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\n\nfrom tqdm import tqdm","c49a47b6":"IMAGE_WIDTH  = 704\nIMAGE_HEIGHT = 520\n\ndf = pd.read_csv(\"..\/input\/sartorius-cell-instance-segmentation\/train.csv\")\nuuids = df[\"id\"].unique()","08396dd6":"def rle_decode(mask_rle, shape):\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    img = np.zeros((shape[0] * shape[1], shape[2]), dtype=np.uint8)\n    for start, end in zip(starts, ends):\n        img[start : end] = 1\n    return img.reshape(shape)\n\n\ndef build_masks(image_id, shape):\n    labels = df[df[\"id\"] == image_id][\"annotation\"].tolist()\n    masks = []\n    \n    for label in labels:\n        masks.append(rle_decode(label, shape=shape))\n            \n    return np.squeeze(np.stack(masks, axis=-1))","1edf4c78":"sample_filename = '0030fd0e6378'\nsample_path = os.path.join(\"..\/input\/sartorius-cell-instance-segmentation\/train\", f\"{sample_filename}.png\")\nsample_img = cv2.imread(sample_path)\nsample_img = (sample_img \/255.).astype('float32')\nsample_masks = build_masks(sample_filename, shape=(IMAGE_HEIGHT, IMAGE_WIDTH, 1))\nprint(\"Image Shape: \", sample_img.shape, sample_img.dtype)\nprint(\"Label Shape: \", sample_masks.shape, sample_masks.dtype)\nfig, axs = plt.subplots(1, 2,figsize=(20, 20))\naxs[0].imshow(sample_img)\naxs[0].axis(\"off\")\naxs[1].imshow(np.sum(sample_masks, axis=-1))\naxs[1].axis(\"off\")\nplt.show()","92dbcc8d":"def _bytes_feature(value):\n    if isinstance(value, type(tf.constant(0))):\n        value = value.numpy() \n    return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\ndef _float_feature(value):\n    return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\ndef _int64_feature(value):\n    return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))","712d5eb0":"def serialize_example(image, label):\n    feature = {\n        'image': _bytes_feature(image.tobytes()),\n        'label': _bytes_feature(label.tobytes())\n    }\n    example_proto = tf.train.Example(features=tf.train.Features(feature=feature))\n    return example_proto.SerializeToString()","7c0ad958":"%%time\n! mkdir -p .\/tfrecords\/\noutpath = \".\/tfrecords\"\nwith tf.io.TFRecordWriter(os.path.join(outpath,'sartorius.tfrec'), options=tf.io.TFRecordOptions(compression_type=\"GZIP\")) as writer:\n    for i in tqdm(uuids, colour=\"#73d315\", ncols=100):\n        img_path = os.path.join(\"..\/input\/sartorius-cell-instance-segmentation\/train\", f\"{i}.png\")\n        img = cv2.imread(img_path)\n        img = (img\/255.).astype('float32')\n        mask = build_masks(i, shape=(IMAGE_HEIGHT, IMAGE_WIDTH, 1))\n        example = serialize_example(img, mask)\n        writer.write(example)","55042864":"def deserialize_example(serialized_string):\n    image_feature_description = {\n        'image': tf.io.FixedLenFeature([], tf.string),\n        'label': tf.io.FixedLenFeature([], tf.string)\n    }\n    parsed_record = tf.io.parse_single_example(serialized_string, image_feature_description)\n    image = tf.reshape(tf.io.decode_raw(parsed_record['image'], tf.float32),(IMAGE_HEIGHT, IMAGE_WIDTH, 3))\n    label = tf.reshape(tf.io.decode_raw(parsed_record['label'], tf.uint8),(IMAGE_HEIGHT, IMAGE_WIDTH, -1))\n    return image, label","1188b949":"train_set = tf.data.TFRecordDataset(os.path.join(outpath,\"sartorius.tfrec\"), compression_type=\"GZIP\").map(deserialize_example)","f27393ed":"ds = train_set.take(1)\nfor image, label in ds:\n    print(image.shape)\n    print(label.shape)\n\nfig, axs = plt.subplots(1, 2,figsize=(20, 20))\naxs[0].imshow(image)\naxs[0].axis('off')\naxs[1].imshow(np.sum(label, axis=-1))\naxs[1].axis('off')\nplt.show()","d703b73b":"# Load Images","a6850e0b":"## Plot Data","cab55418":"## Deserialize TFRecord","a004fd92":"# Test Written Data ","0be07e60":"# Convert to TFRecord","f64b2341":"# Read Data"}}