{"cell_type":{"4148a0d5":"code","132232b6":"code","f564df0d":"code","c183501f":"code","01595d01":"code","fa070632":"code","9ad15036":"code","a56b4212":"code","88b93da2":"code","e6dc0e35":"code","e699af90":"code","d276b190":"code","e2564390":"code","d1b334f2":"code","c4c17908":"code","90f04924":"code","628a9337":"code","4f9ca5e4":"code","6bc1c646":"code","4ef90e43":"code","cba551f5":"code","77ef15e0":"code","ab5e535c":"code","93008a82":"code","0eb1b1fb":"code","f3b45937":"code","192cba5e":"code","dd9214cc":"code","0d017970":"code","6adec739":"code","f215bc85":"code","34530b31":"code","f7857b78":"code","8cc8185f":"code","609871e9":"code","8ea2478d":"code","fc3db82c":"code","74e343ba":"code","8d55223e":"code","c43f713a":"code","565dfda8":"code","17ec883c":"code","bc660011":"code","8b4b262c":"code","ee6164d1":"code","61e4b2b1":"code","1063393b":"code","9b10c53f":"code","3462b968":"code","0db02dc5":"code","995169dd":"code","0b40b510":"code","431f3b7a":"code","3b04a4fc":"code","b02df373":"code","4f5aae67":"code","6a9d0627":"code","8fd53087":"code","7ec92dd8":"code","41f95691":"code","01eef4c4":"code","b682a9b8":"code","6832d3f2":"code","0c8f5256":"code","ee3b4cd8":"code","b95444a8":"code","b8c107e9":"code","61d1a8eb":"code","da222f98":"code","f9e1ab0c":"code","e359d0bf":"code","10e76118":"code","0f2decf6":"code","9f21c4f6":"code","894809c8":"code","43b16e57":"code","c3a9fac1":"code","026b82dd":"code","ea49cc51":"code","2486857b":"code","db10f082":"code","a6df0cbb":"code","41328aa6":"code","78c2822a":"code","59335bdd":"code","00ea96ab":"code","d8423dde":"code","11927efa":"code","a25dc1c4":"code","c2a1e9e2":"code","fbabba28":"code","fa362b23":"code","9145150f":"code","847e1616":"code","8ecf7a1d":"code","0af49044":"code","43347cdd":"code","3a2bf63e":"code","ff927852":"code","988f2fb6":"code","be46c706":"code","97c32b17":"code","c02c8d1e":"code","4e832ca3":"code","a5691f51":"code","ed876384":"code","a74dd053":"code","a9a5b20a":"code","56ba9e3c":"code","d99077c0":"code","c7f95256":"code","5e3fa1a7":"code","750bb348":"code","34ad9e0d":"code","2545ea0c":"code","c886355d":"markdown","49ff1a7d":"markdown","adaeca30":"markdown","362229ae":"markdown","84e42dd4":"markdown","e072250c":"markdown","8f9d1775":"markdown","931f73a9":"markdown","6bd734c5":"markdown","21e4b11b":"markdown","c3651716":"markdown","d9d625ee":"markdown","a7149c30":"markdown","cf524168":"markdown","69213e92":"markdown","eeeb7aeb":"markdown","ea2e88d5":"markdown","22c77bb1":"markdown","6fbdd954":"markdown","5db73342":"markdown","90dfc593":"markdown","51c01c21":"markdown","738416e4":"markdown","4671e0dc":"markdown","ba9554d8":"markdown","7cc40937":"markdown","dacea2a4":"markdown","e2abf0e7":"markdown","05175027":"markdown","397dd8fb":"markdown","832f90a7":"markdown","8f7ad83c":"markdown","9e8f117c":"markdown","0c932dc3":"markdown","8a9e0dff":"markdown","792b3898":"markdown","cc73328d":"markdown","e08cc91d":"markdown","2c5a704d":"markdown","f43830ad":"markdown","3bb9569a":"markdown","900a2330":"markdown","fbdad1c4":"markdown","34f347d1":"markdown","a3199284":"markdown","8a3e4854":"markdown","fed191fd":"markdown","a3fa574a":"markdown","a0e11eb0":"markdown","2034a36a":"markdown","e8daa453":"markdown","97edb04f":"markdown","f2af9f27":"markdown","f63a7c78":"markdown","e1a72fea":"markdown","f3d71ef1":"markdown","5c3e7918":"markdown","7100265e":"markdown","4c9773c4":"markdown","aabf21f5":"markdown","9d3a8651":"markdown","2fafd0ec":"markdown","53d16389":"markdown","059952fb":"markdown","789ee279":"markdown","67c269af":"markdown","9ab65fda":"markdown","dbc4830c":"markdown","1b275e28":"markdown","99335cfe":"markdown","b795cc90":"markdown","080ba6f2":"markdown","a5c7ff57":"markdown","017eba2e":"markdown","3e9887b4":"markdown","36d3d6e7":"markdown","839b5ae3":"markdown","c2b39eb8":"markdown","8740aa81":"markdown","bb5f1594":"markdown"},"source":{"4148a0d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","132232b6":"empty_list=[]\nprint(empty_list)\n\nlist_of_strings=['a','b','c']\nprint(list_of_strings)\n\nlist_of_numbers=[1,2,3,4,5]\nprint(list_of_numbers)\n\nlist_of_list=[list_of_strings, list_of_numbers]\nprint(list_of_list)\n\nlist_of_diff_data_type=['1',2,[3,4]]\nprint(list_of_diff_data_type)","f564df0d":"lst=[1,2,3,4,5]\nprint(len(lst))\n\n# len is a function","c183501f":"lst.append('appended item')\nprint(lst)","01595d01":"lst=[1,2,4]\nlst.insert(2,'three')\n# lst.insert(index, value)\n# value at the specified index shifts\nprint(lst)","fa070632":"# if we want to use insert to add items at the end\nlst.insert(4,'five')\nprint(lst)","9ad15036":"lst=['one','two','three','four','five','two']\nlst.remove('two') # it will always remove the first occurence of this element\nprint(lst)","a56b4212":"# Append\n# add the object at the end of the list\nlst1=[1,2,3,4,5]\nlst2=[6,7]\nlst1.append(lst2)\nprint(lst1)","88b93da2":"# Extend\n# add elements of the second list at the end\n# it will join the two lists\nlst1=[1,2,3,4,5]\nlst2=[6,7]\nlst1.extend(lst2)\nprint(lst1)","e6dc0e35":"# del \nlst=[1,2,3,4,5]\ndel lst[1]\nprint(lst)","e699af90":"# pop\nlst=[1,2,3,4,5]\npopped_item=lst.pop(1)\nprint('popped_item: ', popped_item)\nprint('list:', lst)\n","d276b190":"# remove: pass the element that you want to remove\nlst=[1,2,3,4,5]\nlst.remove(3)\nprint(lst)","e2564390":"x=['one','two','three']\nif 'two' in x:\n    print('two is there')\n    \nif 'four' not in x:\n    print('four is not there')","d1b334f2":"lst=[1,2,3,4]\nlst.reverse()\nprint(lst)","c4c17908":"# In ascending order\n\nlst=[3,1,6,2,8]\nsorted_lst=sorted(lst)\nprint('list sorted in ascending order: ')\nprint(sorted_lst, end='\\n\\n')\nprint('original list: ')\nprint(lst)","90f04924":"# in descending order\n\ndes_sorted_lst=sorted(lst, reverse=True)\nprint('list sorted in descending order: ')\nprint(des_sorted_lst, end='\\n\\n')\nprint('original list: ')\nprint(lst)","628a9337":"lst=[3,1,6,2,8]\nlst.sort()\nprint('Original list:', lst)\nprint('Sorted list',lst)","4f9ca5e4":"lst=[1,2,3,4,5]\n# lst is pointing towards [1,2,3,4,5]'s memory location\nabc=lst\n# now, abc is also pointing towards [1,2,3,4,5]'s memory location\n\n# we can call abc and lst as references to the same list\n\n# appending 6 to abc\nabc.append(6)\nprint('abc list:', abc)\nprint('lst list:', lst)\n\n\n# Any edits we do with abc will be reflected in abc","6bc1c646":"tags='tag1 : tag2 : tag3 : tag4'\ntag_list=tags.split(' : ')\nprint(tag_list)","4ef90e43":"# use case: split a sentence into words\ns='This is a python tutorial'\nword_list=s.split() # default is space\nprint(word_list)","cba551f5":"lst=['one','two','three','four','five']\nprint('first element:',lst[0])\nprint('last element:',lst[-1])","77ef15e0":"#  0  1  2  3  # indexes from beginning \n# [1, 2, 3, 4] # numbers\n# -4 -3 -2 -1  # indexes from the end","ab5e535c":"numbers=[10,20,30,40,50,60,70,80]\n\n# all numbers\nprint('all the the numbers')\nprint(numbers[:])\n\n# print numbers from index 0 to 3\nprint('print numbers from index 0 to 3')\nprint(numbers[0:4])","93008a82":"# alternate numbers in a list\nprint('alternate numbers in a list')\nprint(numbers[::2])\n# from first end to the end with a step size of 2","0eb1b1fb":"# all numbers\nprint('all the the numbers')\nprint(numbers[:])\nprint(numbers[2::2])","f3b45937":"lst1=[1,2,3]\nlst2=['four','five','six']\nprint(lst1+lst2)\n\n# combining both lists","192cba5e":"numbers=[1,2,3,1,4,5,1,7,8]\n# number of instances of 1\nprint('number of instances of 1:',numbers.count(1))\n\n# number of instances of 3\nprint('number of instances of 3:',numbers.count(3))\n","dd9214cc":"lst=['one','two','three','four']\nfor item in lst:\n    print(item)","0d017970":"# without using list comprehension\nsquares=[]\nfor num in range(10):\n    squares.append(num**2)\nprint(squares)","6adec739":"# using list comprehension\nsquares=[i**2 for i in range(10)]\nprint(squares)","f215bc85":"# using if with list comprehension\nlst=[-10, -20, 30, 40, 50]\nnew_list=[i for i in lst if i>0]\nprint(new_list)","34530b31":"lst=[1,2,3,4,5]\nnew_list=[(i, i**2) for i in lst]\nprint(new_list)","f7857b78":"# storing a matrix as a list of list\nm=[  #c1    \n    [ 1, 2, 3, 4], # row 1 of the matrix\n    [ 5, 6, 7, 8],\n    [ 9,10,11,12]\n]\n\n# transpose of a matrix\n\n# mt=[\n#     [1,5, 9],\n#     [2,6,10],\n#     [3,7,11],\n#     [4,8,12]\n# ]","8cc8185f":"# method 1\n\nmt1=[]\nfor i in range(len(m[1])):\n    sublist=[]\n    for row in m:\n        sublist.append(row[i])\n    mt1.append(sublist)\nprint(mt1)","609871e9":"# method2 \n[[row[i] for row in m] for i in range(4)]","8ea2478d":"# [row[1] for row in m]","fc3db82c":"# empty\nt=()\n\n# tuple of integers\nt_int=(1,2,3)\n\n# tuple of mixed data type\nt_mixed=(1,'two','three')\n\n# nested tuple\nt_nested=(1, (1,2),[1,2,3])","74e343ba":"t=('single')\nprint(t)\nprint(type(t))","8d55223e":"t=('single',)\nprint(t)\nprint(type(t))","c43f713a":"t='single',\nprint(t)\nprint(type(t))","565dfda8":"t=('one','two','three','four')\nprint(t[1])","17ec883c":"print(t[-1])","bc660011":"t=(1,(2,3,4))\nprint(t[1])","8b4b262c":"print(t[1][2])","ee6164d1":"t=(1,2,3,4,5,6)\nprint(t[1:4]) # from 2nd element to 4th element\n\nprint(t[:-2]) # upto 2nd last but not including\n\nprint(t[:]) # all elements","61e4b2b1":"t=(1,2,3,[4,5,6])\nt[3][1]='x'\nprint(t)","1063393b":"# t[3]='x'\n# print(t)","9b10c53f":"(1,2,3)+(4,)","3462b968":"(1,2,3)*3","0db02dc5":"t=(1,2,3,40)\ndel t\n# print(t)","995169dd":"t=(1,2,2,3,4,3,4,3)\nprint(t.count(3))","0b40b510":"t=(1,2,2,3,4,3,4,3)\nprint(t.index(3))","431f3b7a":"t=(1,2,3,4,5)\nprint(1 in t)\nprint(7 in t)","3b04a4fc":"#### Length\nt=(1,2,3,4,(2,3))\nlen(t)","b02df373":"#### Sort\nt=(7,4,9,3,6)\nnew_t=sorted(t)\n\n# Returns a list\n\n# does not alter the existing tuple\nprint(t)\nprint(new_t)","4f5aae67":"t=(7,4,9,3,6)\n# min \nprint('min:',min(t))\n\n# max\nprint('max:',max(t))\n\n# sum\nprint('sum:',sum(t))","6a9d0627":"s={1,2,3} # set elements\nprint(s)\nprint(type(s))","8fd53087":"# every value is stored only once\ns={1,2,3,1,4}\nprint(s)","7ec92dd8":"# making a set from a list\ns=set([1,2,3,1,4])\nprint(s)\nprint(type(s))","41f95691":"# initialize an empty set\n\ns={}\nprint(type(s))\n\nx=set()\nprint(type(x))","01eef4c4":"s={1,2,3}\n# print(s[1])\n# since they are unordered, they cannot be indexed","b682a9b8":"s={1,3}\n\n# adding single elements\n\ns.add(2)\nprint(s)","6832d3f2":"# adding multiple elements\n\n# using update function\n\ns.update([5,6,1]) # list\nprint(s)","0c8f5256":"s.update([7,8,9],{10,1,2})\nprint(s)","ee3b4cd8":"# discard\ns={1,2,3,7,8}\ns.discard(8)\nprint(s)","b95444a8":"# remove\ns.remove(7)\nprint(s)","b8c107e9":"# s.discard(7)\n# s.remove(7)","61d1a8eb":"# pop\n\n# removes on element at random\n\ns={1,2,3,4}\ns.pop()\nprint(s)","da222f98":"# clear\n\n# remove all the items from the set\n\ns={1,2,3,4}\ns.clear()\nprint(s)","f9e1ab0c":"s1={1,2,3,4}\ns2={3,4,5,6}","e359d0bf":"print(s1 | s2)\n\nprint(s1.union(s2))","10e76118":"print(s1&s2)\nprint(s1.intersection(s2))","0f2decf6":"# elements which are there in s1 but not in s2\nprint(s1-s2)\nprint(s1.difference(s2))","9f21c4f6":"print(s1^s2)\nprint(s1.symmetric_difference(s2))\nprint((s1|s2)-(s1&s2))","894809c8":"a={1,2,3,4}\nb={3,4}\nprint('is a subset of b:', a.issubset(b))\nprint('is b subset of a:', b.issubset(a))","43b16e57":"t1=(1,2)\nt2=(1,2)\nprint(id(t1))\nprint(id(t2))","c3a9fac1":"print(t1.__hash__())\nprint(t2.__hash__())","026b82dd":"d={t1:'1'}\nd[t2]","ea49cc51":"set1=frozenset([1,2,3,4])\nset2=frozenset([3,4,5,6])\n# set2.add(2)","2486857b":"# create a empty dict\nd={}\n\n# dict with integer keys\nd={1:'abc',2:'xyz'}\nprint(d)\n\n# dict with mixed keys\nd={'name':'arun',10:[89,90,92]}\nprint(d)\n\n# Internally, you can think of these as being stored in a table\n\n# create an empty dict\nd=dict()\nprint(d)\n\n# create a dictionary with a list of tuples\nd=dict([('name','abc'),(1,'xyz')])\nprint(d)","db10f082":"my_dict={'name':'Arun','age':27,'country':'India'}\nprint(my_dict['name']) # value corressponding to the key name\nprint(my_dict)","a6df0cbb":"# print(my_dict['degree'])\n\n# there is no key as degree\n# gives key error","41328aa6":"print(my_dict.get('name'))\nprint(my_dict.get('degree'))","78c2822a":"# modifying values in dict\n\nmy_dict={'name':'Arun','age':27,'country':'India'}\nmy_dict['name']='raju'\nprint(my_dict)","59335bdd":"# adding new values\n\nmy_dict['degree']='mba'\nprint(my_dict)\n","00ea96ab":"my_dict={'name':'Arun','age':27,'country':'India'}\nprint(my_dict)\nremoved_value=my_dict.pop('country')\nprint('removed value:',removed_value)\n\nprint(my_dict)","d8423dde":"my_dict={'name':'Arun','age':27,'country':'India'}\nprint(my_dict)\nmy_dict.popitem()\nprint(my_dict)","11927efa":"my_dict={'name':'Arun','age':27,'country':'India'}\ndel my_dict['age']\nprint(my_dict)","a25dc1c4":"my_dict.clear()\nprint(my_dict)","c2a1e9e2":"del my_dict\n# print(my_dict)","fbabba28":"# copy\nmy_dict={'name':'Arun','age':27,'country':'India'}\nmy_second_dict=my_dict.copy()\nprint(my_dict)\nprint(id(my_dict))\nprint(my_second_dict)\nprint(id(my_second_dict))\n\nprint('If we had not used copy method then the memory address would have been same', end='\\n\\n')\n\nmy_dict['degree']='MBA'\nprint(my_dict)\nprint(my_second_dict)\n\nprint('If we had not used copy, updating one would have also changed the other one')","fa362b23":"# fromkeys\n\n# create a dictionary with keys but same value\n\nmy_scores={}.fromkeys(['maths','english','science'],0)\nprint(my_scores)\n\n\nmy_scores={}.fromkeys(['maths','english','science'],[90,74,85])\nprint(my_scores)","9145150f":"my_dict={'name':'Arun','age':27,'country':'India'}\nprint(my_dict.items())\n\n# returns a list of tuples of keys and values","847e1616":"print(my_dict.keys())","8ecf7a1d":"print(my_dict.values())","0af49044":"print(dir(my_dict))","43347cdd":"print(my_dict)\nd=my_dict.copy()\nfor pair in d.items():\n    print(pair)","3a2bf63e":"# example 1\n\nnew_d={k.upper():v for k,v in d.items()}\nprint(new_d)\n\n\n# example 2\n\nd={'num1':1,'num2':3,'num3':4,'num4':7}\nprint({k:v for k,v in d.items() if v>2})\n\n\n# example 2\n\nd={'num1':1,'num2':3,'num3':4,'num4':7}\nprint({k+'_':v*2 for k,v in d.items() if v>2})","ff927852":"print('Hello, world!')\nprint(\"Hello, Universe!\")\nprint('''Hello, everyone!''')","988f2fb6":"s='Hello'\nprint(s[0])\nprint(s[-1])\nprint(s[3:])\n\n# if index is out of range or a decimal number then we will get an error","be46c706":"my_str='Hello'\n# my_str[0]='J'","97c32b17":"# we can but delete the whole string\ndel my_str\n# print(my_str)","c02c8d1e":"s1='Hello'\ns2='Arun'\n\n# Concatenation\nprint(s1+' '+s2)\n\n# Repeat the string n times\nprint('Ha'*4)","4e832ca3":"# Iterating through a string\n\n# Count number of times the character appears\ncount=0\nfor letter in 'Hello there':\n    if letter=='e':\n        count+=1\nprint(count, 'e letters counts')","a5691f51":"# Membership test\nprint('@' in 'myemail@emai.com')\nprint('@email.com' in 'myemail@email.com')","ed876384":"s='Hello'\nprint(s.lower())\nprint(s.upper())","a74dd053":"s='This is a sentence'\nwords=s.split()\nprint(words)\n\n\n# convert a string into a list\n# each word as element of the list","a9a5b20a":"# Reverse the above operation\nnew_s='*'.join(words)\nprint(new_s)","56ba9e3c":"# Index where the first character matches\nprint('Good Morning'.find('@'))\nprint('Good Morning'.find('Morn'))","d99077c0":"# Replace \ns='Bad Morning'\ns1=s.replace('Bad','Good') # creating a new string. not replacing the original string\nprint(s)\nprint(s1)","c7f95256":"my_str='Madam'\nmy_str=my_str.lower()\nrev_str=reversed(my_str) # The reversed() method returns an iterator that accesses the given sequence in the reverse order.","5e3fa1a7":"rev_string=''.join(list(rev_str))\nprint(rev_string)","750bb348":"if rev_string==my_str:\n    print('Palindrome')\nelse:\n    print('not palindrome')","34ad9e0d":"my_str='Program to sort words in alphabetical order'\nword_list=my_str.split(' ')\nwords=[word.lower() for word in word_list]\nprint(words)","2545ea0c":"words.sort()\nprint(words)","c886355d":"#### del ","49ff1a7d":"#### remove all items","adaeca30":"* We cannot remove or delete a single item or characters from a string","362229ae":"### Index of the first instance","84e42dd4":"### Looping through lists","e072250c":"#### Reverse a list","8f9d1775":"### Repeating elements of a tuple","931f73a9":"##### Using the function","6bd734c5":"### Deleting a tuple","21e4b11b":"### Indexing","c3651716":"## Sets\n* unordered collection of items: means that it cannot be indexed\n* sets are mutable, we can add or remove items from it","d9d625ee":"### List comprehensions\n* concise way to create lists","a7149c30":"### Operations","cf524168":"### Dictionary Comprehension\n* d.items() can be used to iterate over dictionaries","69213e92":"#### Removing an item from the list","eeeb7aeb":"### Count the number of instances of an item","ea2e88d5":"#### Indexing items in a particular order","22c77bb1":"## Strings\n* Sequence of characters\n* characters are stored using ASCII or Unicode (Standards on how to represent characters)\n* In Python, strings are sequence of unicode characters\n* Unicode can represent characters from more languages (than ASCII) (ASCII is older format)","6fbdd954":"### Remove an element from a set\n* remove and discard method\n    * remove function throw an error if we are trying to remove an item that is not present\n    * discard function doesn't throw any error in such a case\n* pop methods will remove a single element at random\n* clear method removes all the items in the set","5db73342":"### + Operator for extending lists","90dfc593":"#### delete the dictionary**","51c01c21":"* frozenset have same set operations as set","738416e4":"### String Operations","4671e0dc":"### Tuple Membership\n* in \n* not in","ba9554d8":"#### Intersection","7cc40937":"### Program to sort words in alphabetic order","dacea2a4":"#### Length","e2abf0e7":"### Don't allow duplicates, store only one instance[](http:\/\/)","05175027":"### Slicing Tuples","397dd8fb":"### What is it? type(d)\n### What all can we do with dictionary: dir(d)\n### know more: help(d)","832f90a7":"### Accessing elements in a tuple","8f7ad83c":"### Concatenating Tuples","9e8f117c":"### frozenset\n* tuples and lists are similar but tuples are immutable\n* a similar relationship exists between frozensets and sets \n* a frozenset is an immutable set\n* hashable objects: [Link](https:\/\/www.pythonforthelab.com\/blog\/what-are-hashable-objects\/)\n    * hashing: create an integer value based on contents but not on the identity of the object\n    * t=(1,2,3) and s=(1,2,3) will have different id but the contents are same. They have same hash value\n        * These can be used as keys of dictionary and they will refer to the same thing\n    * contents can be altered for immutable objects so they cannot be hashed and thus cannot be used as keys for dict\n* sets are mutable and unhashable so they cannot be used as dictionary keys, while frozenset are hashable and can be used as dictionary keys","0c932dc3":"### Adding items to the sets\n* sets are mutable so we can add items to sets","8a9e0dff":"### Built-in functions for Tuples","792b3898":"#### Symmetric Difference\n* Elements that are present only in A and B but not in both A and B\n* (a union b)-(a intersection b)","cc73328d":"* update method can be used to add items from list and(or) sets to an existing set\n* add will only add an item to a set","e08cc91d":"#### Union","2c5a704d":"### How to change or delete a string:\n* Strings are immutable: this means that the elements of a string cannot be changed once it has been assigned","f43830ad":"### Creating a string","3bb9569a":"#### Get a list of items, keys or values","900a2330":"#### Set Difference","fbdad1c4":"#### Creating a list of tuples, list using list comprehension","34f347d1":"* we cannot change or remove individual items in a tuple since tuples are immutable","a3199284":"### Python program to check if a string is palindrome or not\n* reversing it results in same string: madam","8a3e4854":"### Splitting a string into a list","fed191fd":"### Add or modify elements in a dictionary","a3fa574a":"#### Delete items in a list\n* del\n    * to remove item based on index position\n    * del lst[1]\n    * del does not return anything and make changes to the list\n\n* pop methods returns the items that is removed","a0e11eb0":"### Delete or remove elements of dictionary\n* pop will return the value associated with the key and remove the key: value pair\n* popitem() will remove any of they k:v pair randomly","2034a36a":"#### Adding an item to the list: Insert\n* adding an item at a specific location","e8daa453":"#### Nested Tuples","97edb04f":"#### Subset\n* If whole of B is a part of A, then we say that B is a subset of A","f2af9f27":"### Slicing a list\n* [start:end)\n* [start:end:step size]\n* if step size is 2, it will print the first element, then 3rd element and so forth","f63a7c78":"#### List related keywords\n* in: to check if an element is present in a list or not\n* not in","e1a72fea":"### Dictionary Methods","f3d71ef1":"### Changing tuples\n* changing element of a list which is part of a tuple is possible\n* [Link](http:\/\/radar.oreilly.com\/2014\/10\/python-tuples-immutable-but-potentially-changing.html)","5c3e7918":"##### Using the method\n* changes the original list\n* we can compare float to an int","7100265e":"### Methods of strings","4c9773c4":"# Data Structure:\n* a data structure is a collection of data elements (such as numbers, characters or even other data structures) that are structured in some way (eg, by numbering the elements) \n*  the most basic data structure in python is a list","aabf21f5":"### Count method\n* how many times a values occurs in a list","9d3a8651":"#### Append and Extend\n* Extend will join the lists ","2fafd0ec":"### Accessing elements in a dictionary","53d16389":"### List having multiple references","059952fb":"#### popitem","789ee279":"#### Create a list with squares","67c269af":"## List\n* It is a sequence data structure i.e. it stores items in a sequence\n* collection of other items (strings, numbers, lists)\n* []\n* lists are indexable\n* Lists are mutable: items in the lists can be changed","9ab65fda":"### Parentheis and comma\n\n* comma is essential if it is only one element\n* parenthesis is optional ","dbc4830c":"### Accessing characters in a string","1b275e28":"#### using .get method","99335cfe":"## Tuples\n* Similar to lists\n* Key difference: we can't change the elements of a tuple. That is why tuples are immutable and lists are mutable\n* mutable: change the elements of a list","b795cc90":"#### Adding an item to the list: Append\n* adds item at the end of the list","080ba6f2":"#### Sorting","a5c7ff57":"### List Creation","017eba2e":"#### pop","3e9887b4":"#### List comprehension for nested list\n* Extensively used in data science when we operate on vectors and matrices","36d3d6e7":"#### Filtering items before including them in list comprehension","839b5ae3":"### Indexing\n* each value has an assigned index starting from 0\n* last element has an index of -1","c2b39eb8":"## Dictionaries\n* unordered collection of items: you cannot index it\n    *  Tuples and Lists are ordered\n* Hashtable\n* think of it as a table: with key and values","8740aa81":"### how to create a set","bb5f1594":"### Python Set Operations\n* Union\n* Intersection\n* Symetric difference"}}