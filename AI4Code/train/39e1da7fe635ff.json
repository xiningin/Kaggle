{"cell_type":{"3e8b097e":"code","0b5e4369":"code","be56c300":"code","b8714173":"code","c8795023":"code","20357b85":"code","8e89da54":"code","48e57572":"code","09a0b516":"code","fc0f5c15":"code","36bc9300":"code","5ad6110f":"code","aeb39181":"code","d7a77a7f":"code","20d884f1":"code","50c4bb7d":"code","495ec2f2":"code","220420c0":"code","10ef7754":"code","828dfd50":"code","c00a5f68":"code","0064fea8":"markdown"},"source":{"3e8b097e":"import xgboost as xgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","0b5e4369":"train = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/test.csv\")","be56c300":"train.head()","b8714173":"Name0=train['target'].unique()\nName=sorted(Name0)\nprint(Name)","c8795023":"N=[]\nfor i in range(4):\n    N+=[i]\n    \nnormal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) ","20357b85":"target = train['target'].map(normal_mapping)\ndata = train.drop(['target','id'],axis=1)","8e89da54":"columns=data.columns.to_list()\nprint(columns)","48e57572":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param = {\n\n        'lambda': trial.suggest_uniform('lambda',0.001,0.1),\n        'alpha': trial.suggest_uniform('alpha',0.1,0.2),\n        'colsample_bytree': trial.suggest_uniform('colsample_bytree', 0.3,1.0),\n        'subsample': trial.suggest_uniform('subsample', 0.4,0.8),\n        'learning_rate': trial.suggest_uniform('learning_rate', 0.05,0.08),\n        'n_estimators': trial.suggest_int('n_estimators', 1000,4000),\n        'max_depth': trial.suggest_int('max_depth', 3,6),\n        'random_state': trial.suggest_int('random_state', 400,1000),\n        'min_child_weight': trial.suggest_int('min_child_weight', 10,100),\n        \n        'objective': trial.suggest_categorical('objective',['reg:logistic']), \n        'tree_method': trial.suggest_categorical('tree_method',['gpu_hist']),  # 'gpu_hist','hist'       \n        'use_label_encoder': trial.suggest_categorical('use_label_encoder',[False])\n    }\n    model = xgb.XGBClassifier(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","09a0b516":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=16)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","fc0f5c15":"study.trials_dataframe()","36bc9300":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","5ad6110f":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","aeb39181":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","d7a77a7f":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['alpha','lambda','colsample_bytree'])","20d884f1":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","50c4bb7d":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","495ec2f2":"Best_trial=study.best_trial.params\nprint(Best_trial)","220420c0":"sample = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/sample_submission.csv\")\nprint(sample.shape)","10ef7754":"preds = np.zeros((sample.shape[0],sample.shape[1]-1))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    model = xgb.XGBClassifier(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict_proba(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","828dfd50":"print(preds.shape)\nprint(preds[0])","c00a5f68":"subm = sample\nsubm[Name] = preds\nsubm.to_csv('submission.csv',index=False)\nsubm","0064fea8":"# XGBoost with Optuna tuning\n* doc: \nhttps:\/\/github.com\/optuna\/optuna"}}