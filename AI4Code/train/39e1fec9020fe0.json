{"cell_type":{"15632dcf":"code","4d5491a5":"code","a1e9fc15":"code","1028cb25":"code","9d08eae1":"code","3e2d2fbe":"code","66af82f5":"code","b213a801":"code","ef234e82":"code","b38da00f":"code","badb601f":"code","79a14c29":"code","de28a2b1":"code","40521899":"code","ecf281df":"code","db327917":"code","561a9191":"code","2f9bf2c6":"code","5d5af3b4":"code","2390bdd2":"code","3a10620e":"code","ad6f366b":"code","f7a13c5e":"code","7b3bb7a0":"code","4c18df8e":"code","1a75aaf0":"code","32abe1de":"code","9af805d5":"code","23c7c096":"code","a856b556":"code","af0df96f":"code","61a94944":"code","070b1ef0":"code","6c823b62":"code","de545e5e":"code","db90699a":"code","257285dd":"code","0c8cdbad":"code","02235f77":"code","9d0cc2b7":"code","32102798":"code","a4222461":"code","e9ff6897":"markdown"},"source":{"15632dcf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4d5491a5":"# \ud544\uc694\ud55c \ub3c4\uad6c\ub4e4(library) \ubd88\ub7ec\uc624\uae30\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nfrom glob import glob\nimport os, random, time, warnings, folium\nimport lightgbm as lgbm\nfrom sklearn.linear_model import Ridge, Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.metrics import mean_squared_error\nfrom catboost import CatBoostRegressor\nfrom datetime import datetime\nfrom folium import Marker, Icon, CircleMarker\nfrom pdpbox import pdp, info_plots\npd.set_option('max_columns', 500, 'max_rows', 500)\n%matplotlib inline","a1e9fc15":"# \uc704\uc758 \uac01 \ub370\uc774\ud130 \uacbd\ub85c\ub97c \ud1b5\ud574 csv \ud30c\uc77c 3\uac1c\ub97c \ubd88\ub7ec\uc634(\uc77d\uc74c)\ntrain = pd.read_csv('\/kaggle\/input\/dacon-2019-jeju-bus\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/dacon-2019-jeju-bus\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/dacon-2019-jeju-bus\/submission_sample.csv')\n# tarin, test, submission\uc758 \ud589,\uc5f4\uc218 \uc870\ud68c\nprint(train.shape, test.shape, submission.shape)\n# tarin, test, submission \uc758 data type, \ubc30\uc5f4, \ud2b9\uc9d5 \ub4f1\uc744 \ud655\uc778\ndisplay(train.head(3), test.head(3), submission.head(3))","1028cb25":"# train, test\ub294 \uc5b4\ub5bb\uac8c \ubd84\ub9ac\ub410\ub294\uc9c0\n# id\uc5f4\uc740 \ud589 \uad6c\ubd84\uc5d0\ub9cc \uc4f0\uc774\ubbc0\ub85c \ud544\uc694\uc5c6\uc74c\nprint('train_id: ', train['id'].min(), ' ~ ',train['id'].max(),' \/ ',len(train['id']))\nprint('test_id: ', test['id'].min(), ' ~ ',test['id'].max(),' \/ ',len(test['id']))","9d08eae1":"# train data\uc758 \uac01 \uc5f4 type \uc870\ud68c\ntrain.dtypes","3e2d2fbe":"# date\uc758 data type\uc744 object(\ubb38\uc790)\uc5d0\uc11c \ntrain['date'] = pd.to_datetime(train['date'])\ntest['date'] = pd.to_datetime(test['date'])\ntrain.dtypes.head(3)","66af82f5":"# train, test\uc758 date \ubc94\uc704 \ud655\uc778\nprint('train_date: ',train['date'].min(),'~', train['date'].max(),'\/',train['date'].max() - train['date'].min())\nprint('test_date: ',test['date'].min(),'~', test['date'].max(),'\/',test['date'].max() - test['date'].min())","b213a801":"# train, test_date\uc758 \ubd84\ud3ec \ud655\uc778\nplt.figure(figsize=(12,8))\n\ntrain['date'].value_counts().sort_index().plot(color='b', lw=2, label='train')\ntest['date'].value_counts().sort_index().plot(color='r', lw=2, label='test')\n\nplt.legend()\nplt.xlabel('date')\nplt.ylabel('# of rows')\nplt.title('distribution of date')","ef234e82":"# set(\uc9d1\ud569) \uc608\uc2dc, list\ub85c \ubcc0\ud658 \uac00\ub2a5, \uc8fc \ubaa9\uc801: \uc911\ubcf5\uac12 \uc81c\uac70\na = {'a', 'b', 'c'}\na, type(a)\na.add('d')\na.remove('b')\na.clear()\na\nb = set('hello')\nb\nlist(b)\nc = [1,1,2,2,2,3]\nlist(set(c))","b38da00f":"# \ubc84\uc2a4\uc815\ub958\uc7a5\uc758 \ucc28\uc774\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ntrain_bus_route_set = set(train['bus_route_id'])\ntest_bus_route_set = set(test['bus_route_id'])\nintersection_bus_route = train_bus_route_set.intersection(test_bus_route_set)\nlen(intersection_bus_route)","badb601f":"# train \uc5d4 \uc788\uace0 test\uc5d4 \uc5c6\ub294 \uacbd\ub85c \uac1c\uc218 - 30\uac1c\n# only_train_route = train_bus_route_set.difference(test_bus_route_set)\nonly_train_route = train_bus_route_set - test_bus_route_set\nlen(only_train_route)","79a14c29":"# test \uc5d4 \uc788\uace0 train \uc5c6\ub294 \uacbd\ub85c \uac1c\uc218 - 18\uac1c\n# only_test_route = test_bus_route_set.difference(train_bus_route_set)\nonly_test_route = test_bus_route_set - train_bus_route_set\nlen(only_test_route)","de28a2b1":"# test set\uc5d0\ub9cc \uc788\ub294 bus_route \ud655\uc778\ndisplay(test[test['bus_route_id'].isin(only_test_route)].head(3))\n\n# train, test set\uc5d0 \ub3d9\uc2dc\uc5d0 \uc788\ub294 bus_route \ud655\uc778\\\ndisplay(test[test['bus_route_id'].isin(intersection_bus_route)].head(3))","40521899":"a = [(1,2), (3,4), (5,6)]\nfor (first, last) in a:\n    print(first + last)","ecf281df":"# \uc81c\uc5b4\ubb38 - \ubc18\ubcf5\ubb38(for) \uc5f0\uc2b5\nfor i in [1,2,3]:\n    print(i)\n\nfor i in range(1,6,2):\n    print(i)\n\n# \uc774\uc911 \ubc18\ubcf5\ubb38\uacfc break\nfor i in [1,2,3]:\n    for j in ['a','b']:\n        print(str(i) + '_' + j)\n#         break\n    print('-----')\n#     break\n\n# 1\ubd80\ud130 10\uae4c\uc9c0 \ub354\ud558\uae30\nnum = 0\nfor i in range(11):\n    num += i\nprint(num)\n\n# \ubc18\ubcf5\ubb38\uc744 \uc774\uc6a9\ud574 list \ub9cc\ub4e4\uae30\nprint([i*10 for i in range(10)])\nprint([i*10 for i in range(10) if i > 5])","db327917":"# \uc81c\uc5b4\ubb38 - \uc870\uac74\ubb38 (if) \uc5f0\uc2b5\n# 1) if - elif - else 3\uc885\uc138\ud2b8 -> if\ub85c \uc2dc\uc791\ud574\uc57c \ud558\uba70, elif, else\ub294 \uc120\ud0dd\na = 33\nb = 200\nif a < b:\n    print('b is bigger than a')","561a9191":"a = 33\nb = 33\nif a < b:\n    print('b is bigger than a')\nelif a == b:\n    print('a and b are equal')","2f9bf2c6":"a = 200\nb = 33\nif a < b:\n    print('b is bigger than a')\nelif a == b:\n    print('a and b are equal')\nelse:\n    print('a is bigger than b')","5d5af3b4":"# \ubc18\ubcf5\ubb38, \uc870\uac74\ubb38 \uac19\uc774 \uc368\ubcf4\uae30 - 1~10 \uc911 3\uc758 \ubc30\uc218\ub9cc \ucd94\ub824\ub0b4\uae30\nnum3 = []\nnum = []\nfor i in range(1,11):\n    if i % 3 == 0:\n        num3.append(i)\n    else:\n        num.append(i)\nnum3, num","2390bdd2":"# Dataframe \ud569\uce58\uae30\ud558\uae30 (concat)\n# pd.merge(df_left, df_right, how='inner', on=None)\ndf1 = pd.DataFrame({'a':['a0','a1','a2','a3'],\n                   'b':['b0','b1','b2','b3'],\n                   'c':['c0','c1','c2','c3']},\n                  index = [0,1,2,3])\ndf2 = pd.DataFrame({'a':['a2','a3','a4','a5'],\n                   'b':['b2','b3','b4','b5'],\n                   'c':['c2','c3','c4','c5'],\n                   'd':['d2','d3','d4','d5']},\n                   index = [2,3,4,5])\ndisplay(df1, df2)","3a10620e":"# \uae30\ubcf8\uac12: \ud589 \ubc29\ud5a5 \ud569\uce58\uae30, \uc778\ub371\uc2a4 \uc7ac\ubc30\uc5f4\n# df3 = pd.concat([df1,df2])\nconcat_row = pd.concat([df1,df2], ignore_index=True)\nconcat_row","ad6f366b":"# \uc5f4 \ubc29\ud5a5 \ud569\uce58\uae30 axis =1 , defalut(\uae30\ubcf8\uac12)\uac00 outer - \ud569\uc9d1\ud569\nconcat_axis = pd.concat([df1,df2], axis=1)\nconcat_axis","f7a13c5e":"# \uc5f4 \ubc29\ud5a5 \ud569\uce58\uae30 - inner(\uad50\uc9d1\ud569)\nconcat_inner = pd.concat([df1,df2], axis=1, join='inner')\nconcat_inner","7b3bb7a0":"# \uc2b9\ucc28 \uc5f4, \ud558\uc790 \uc5f4 \ubb36\uc5b4\uc11c \uad6c\ubd84\ud558\uae30\nride_columns = [col for col in test.columns if '_ride' in col] + ['bus_route_id','date']\ntakeoff_columns = [col for col in test.columns if '_takeoff' in col] + ['bus_route_id','date']\nride_columns, takeoff_columns","4c18df8e":"# \uc2b9\ud558\ucc28 \uc2dc\uac04\uc744 1\uc2dc\uac04 -> 2\uc2dc\uac04\uc73c\ub85c \uad6c\ubd84\ud558\uae30\ntrain['6~8_ride'] = train['6~7_ride'] + train['7~8_ride']\ntrain['8~10_ride'] = train['8~9_ride'] + train['9~10_ride']\ntrain['10~12_ride'] = train['10~11_ride'] + train['11~12_ride']\ntrain['6~8_takeoff'] = train['6~7_takeoff'] + train['7~8_takeoff']\ntrain['8~10_takeoff'] = train['8~9_takeoff'] + train['9~10_takeoff']\ntrain['10~12_takeoff'] = train['10~11_takeoff'] + train['11~12_takeoff']\n\ntest['6~8_ride'] = test['6~7_ride'] + test['7~8_ride']\ntest['8~10_ride'] = test['8~9_ride'] + test['9~10_ride']\ntest['10~12_ride'] = test['10~11_ride'] + test['11~12_ride']\ntest['6~8_takeoff'] = test['6~7_takeoff'] + test['7~8_takeoff']\ntest['8~10_takeoff'] = test['8~9_takeoff'] + test['9~10_takeoff']\ntest['10~12_takeoff'] = test['10~11_takeoff'] + test['11~12_takeoff']\ntrain.head()","1a75aaf0":"# \uba87\uc9f8\uc8fc\uc778\uc9c0, \ubb34\uc2a8 \uc694\uc77c\uc778\uc9c0 \ub098\ud0c0\ub0b4\ub294 \uc5f4 \ucd94\uac00\ud558\uae30\ntrain['week'] = train['date'].dt.week\ntrain['weekday'] = train['date'].dt.weekday\ntest['week'] = test['date'].dt.week\ntest['weekday'] = test['date'].dt.weekday\ntrain.head()","32abe1de":"# \uacb0\uce21\uac12 \ud655\uc778\ud558\uae30(\uc2dc\uac01\ud654)\ndisplay(msno.matrix(train))\ndisplay(msno.matrix(test))","9af805d5":"# \uacb0\uce21\uac12 \ud655\uc778\ud558\uae30\nprint(train.isnull().sum())\nprint(test.isnull().sum())","23c7c096":"# target \ubcc0\uc218 \ubd84\ud3ec \ud655\uc778\ud558\uae30\ntarget_col = '18~20_ride'\ntrain[target_col].value_counts()[:10]","a856b556":"# \ubd84\ud3ec\ub3c4 \uadf8\ub824\ubcf4\uae30\nsns.distplot(train[target_col])\n# \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \ubcf4\uba74 0\uc774 \ub9e4\uc6b0 \ub9ce\uace0 \uc67c\ucabd\uc73c\ub85c \uce58\uc6b0\uc84c\uace0, \uac12\uc774 \ub9e4\uc6b0 \ud070 \uac12\ub4e4\uc774 \uc874\uc7ac","af0df96f":"# log \ubcc0\ud658 \ud6c4 \ubd84\ud3ec\ub3c4 \uadf8\ub824\ubcf4\uae30 \nsns.distplot(np.log1p(train[target_col]))\n# log \ubcc0\ud658\uc2dc \uce58\uc6b0\uce68\uc740 \uc644\ud654\ub418\uc9c0\ub9cc \uc815\uaddc\ubd84\ud3ec\uc640\ub294 \uac70\ub9ac\uac00 \uba40\ub2e4","61a94944":"# \uc2b9\ucc28\uc778\uc6d0\uc774 0\uc778 \uad6c\uac04\uacfc \uc544\ub2cc \uad6c\uac04\uc758 \ud1b5\uacc4\uce58 \uc870\ud68c\ndisplay(train[train[target_col] == 0].head(300).describe())\ndisplay(train[train[target_col] != 0].head(300).describe())","070b1ef0":"# modeling \ud558\uae30 \uc704\ud574 label encoding\nfrom sklearn.preprocessing import LabelEncoder\n\ncols = train.columns[train.dtypes == 'object']\nprint(\"Object Columns : \", cols)\ntrain[cols] = train[cols].apply(LabelEncoder().fit_transform)\n\ncols = test.columns[test.dtypes == 'object']\nprint(\"Object Columns : \", cols)\ntest[cols] = test[cols].apply(LabelEncoder().fit_transform)","6c823b62":"# \uc608\uce21\ubaa8\ub378\uc5d0 \ub0a0\uc9dc type\uc740 \uc0ac\uc6a9 \ubabb \ud558\ubbc0\ub85c date \uc5f4 \uc0ad\uc81c\ntrain = train.drop(['date'],1)\ntest = test.drop(['date'],1)","de545e5e":"y = pd.DataFrame(train['18~20_ride'])\nX = train.drop(['18~20_ride'],1)","db90699a":"# \uc6d0\ud65c\ud55c modeling \uc2e4\uc2b5\uc744 \uc704\ud574 data \ud06c\uae30 \uc904\uc774\uae30\nX = X.iloc[370000:]\ny = y.iloc[370000:]","257285dd":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split (X,y, test_size=0.3,  random_state=0)\n\nprint(X.shape, y.shape, \"-->\", X_train.shape, y_train.shape, X_valid.shape,y_valid.shape)","0c8cdbad":"# import lightgbm as lgb\n# model = lgb.LGBMRegressor (objective = 'regression', num_leaves=144,\n#                          learning_rate=0.005,n_estimators=720, max_depth=13,\n#                          metric='rmse', is_training_metric=True, max_bin=55,\n#                          bagging_fraction=0.8, verbose=-1, bagging_freq=5, feature_fraction=0.9)\nfrom sklearn.linear_model import Ridge, Lasso, RidgeCV, LassoCV\nmodel = Ridge(random_state = 0)\n\nmodel.fit(X_train, y_train)\npred_train = model.predict(X_train)\npred_valid = model.predict(X_valid)\n\n# RMSE \ud3c9\uac00\uc9c0\ud45c \ud65c\uc6a9\ndef rmse(actual, pred):\n    return np.sqrt(((actual['18~20_ride'] - pred) ** 2).mean())\n\nprint('train_RMSE: ', round(rmse(y_train, pred_train),3))\nprint('valid_RMSE: ', round(rmse(y_valid, pred_valid),3))\n# R2 \ud3c9\uac00\uc9c0\ud45c \ud65c\uc6a9\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n# print('train_R2: ', '%.3f' % (r2_score(y_train, pred_train) * 100))\n# print('valid_R2: ', '%.3f' % (r2_score(y_valid, pred_valid) * 100))\n\n# # MAPE \ud3c9\uac00\uc9c0\ud45c \ud65c\uc6a9 -> \uba54\ubaa8\ub9ac \uc694\uad6c\ub7c9\uc774 \ub9ce\uc544\uc11c \uc774 DATAset\uc73c\ub85c kaggle\uc5d0\uc11c \ubb34\ub9ac\n# def mape(actual, pred):\n#     actual, pred = np.array(actual), np.array(pred)\n#     return np.mean(np.abs((actual - pred) \/ actual)) * 100\n\n# print('train_MAPE: ', round(mape(y_train, pred_train),3))\n# print('valid_MAPE: ', round(mape(y_valid, pred_valid),3))\n\n# LGBM 2.446, 2.806\n# Ridge ","02235f77":"# feature importance - LGBM\nplt.figure(figsize=(24,5))\nplt.bar(train.drop(drop_cols,1).drop(['18~20_ride'],1))","9d0cc2b7":"# Target \uac12\uc774 0 \uc778 \ub370\uc774\ud130\uc758 \ud2b9\uc9d5 \ud655\uc778\ud558\uae30 -> \ub09c\uc774\ub3c4\uc0c1 \uc0dd\ub7b5\ntrain[train[target_col]==0][ride_columns].sum(axis=1).agg(['min','max'])","32102798":"# \ub370\uc774\ud130 \ud2b9\uc131 \ud30c\uc545\ud558\uae30 : \uac19\uc740 \uc815\ub958\uc7a5 \uc774\ub984\uc5d0 \uc815\ub958\uc7a5 \ucf54\ub4dc\uac00 \uc5ec\ub7ec\uac1c (8\uac1c\uae4c\uc9c0) \ub098\uc624\ub294 \uacbd\uc6b0\n# \uc9c0\ub3c4\uc0c1 \uc704\ub3c4, \uacbd\ub3c4 \ud655\uc778 \ud6c4 \uc911\ubcf5 \uc81c\uac70\ud558\uc5ec 1\uac1c\uc758 \uc815\ub958\uc7a5 \uc774\ub984\uc73c\ub85c \ud1b5\ud569 -> \ub09c\uc774\ub3c4\uc0c1 \uc0dd\ub7b5\ntrain.groupby('station_name')['station_code'].nunique().sort_values()","a4222461":"# validation \uc804\ub7b5 -> 35\uc9f8\uc8fc, 40\uc9f8\uc8fc\ub97c sample\ub85c \ub9cc\ub4e4\uc5b4 36~39\uc9f8\uc8fc\ub85c \ubcc0\ud658 -> \ub09c\uc774\ub3c4\uc0c1 \uc0dd\ub7b5\ntrain_date = train[['date']]\ntrain_date['week'] = train['date'].dt.week\ntrain_date['weekday'] = train['date'].dt.weekday\ntrain_date2 = pd.DataFrame(train_date.groupby(['week','weekday'])['weekday'].count())\ntrain_date2","e9ff6897":"### \ub370\uc774\ud130 \uc774\ud574\ud558\uae30"}}