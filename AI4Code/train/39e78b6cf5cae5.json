{"cell_type":{"1a709e95":"code","a6a6be72":"code","a2bb67bc":"code","0a82ce02":"code","68daa650":"code","733db79c":"code","3bb46a73":"code","1e79bbad":"markdown","d942d5c0":"markdown","72b27913":"markdown","c7f37999":"markdown","529149d5":"markdown","fb1de93d":"markdown","b3ba7bbb":"markdown","c899d310":"markdown","9066716f":"markdown"},"source":{"1a709e95":"import pandas as pd\nimport numpy as np\nimport datatable as dt\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score","a6a6be72":"catboost_oof = np.load('..\/input\/tps-oct-2021-catboost-301-w-oof\/oof_catboost.npz')['arr_0']\nxgboost_oof = np.load('..\/input\/tps-oct-2021-xgboost-301-w-oof\/oof_xgboost.npz')['arr_0']\nlgbm_oof = np.load('..\/input\/tps-oct-2021-lgbm-301-w-oof\/oof_lgbm.npz')['arr_0']","a2bb67bc":"train = dt.fread('..\/input\/tabular-playground-series-oct-2021\/train.csv').to_pandas()\ny = train['target']\ndel train","0a82ce02":"test_catboost = pd.read_csv(\"..\/input\/tps-oct-2021-catboost-301-w-oof\/submission_catboost_1.csv\")\ntest_xgboost = pd.read_csv(\"..\/input\/tps-oct-2021-xgboost-301-w-oof\/submission_xgboost_1.csv\")\ntest_lgbm = pd.read_csv(\"..\/input\/tps-oct-2021-lgbm-301-w-oof\/submission_lgbm_1.csv\")","68daa650":"stack_x_train = pd.DataFrame({'x': catboost_oof, 'y': xgboost_oof, 'z': lgbm_oof})\nstack_x_test = pd.DataFrame({'x': test_catboost.target, 'y': test_xgboost.target, 'z': test_lgbm.target})","733db79c":"folds = KFold(n_splits = 5, random_state = 102021, shuffle = True)\n\npredictions = np.zeros(len(stack_x_test))\nlr_oof = np.zeros(stack_x_train.shape[0])\n\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(stack_x_train)):\n\n    X_train, X_test = stack_x_train.iloc[trn_idx], stack_x_train.iloc[val_idx]\n    y_train, y_test = y.iloc[trn_idx], y.iloc[val_idx]\n\n    model = LogisticRegression(n_jobs = -1, random_state = 102021, C = 5, max_iter = 2000)\n    print(f\"model fit started for Fold: {fold}\")\n    model.fit(X_train, y_train)\n    pred = model.predict_proba(X_test)[:,1]\n    lr_oof[val_idx] = pred\n    roc = roc_auc_score(y_test, pred)\n    print(f\" roc_auc_score: {roc}\")\n    print(\"-\"*50)\n    \n    predictions += model.predict_proba(stack_x_test)[:,1] \/ folds.n_splits ","3bb46a73":"sub = dt.fread('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv').to_pandas()\nsub['target'] = predictions\nsub.to_csv(f'submission_stacking_201_1.csv',index = False)\nnp.savez_compressed('oof_stacking_201.npz', lr_oof)","1e79bbad":"# Load test predictions from catboost, lgbm and xgboost and use as features in level 2","d942d5c0":"# Store submission and oof","72b27913":"# Ensemble Model Architecture","c7f37999":"# Load OOF stored by following notebooks\n\n1. https:\/\/www.kaggle.com\/aayush26\/tps-oct-2021-catboost-301-w-oof\n2. https:\/\/www.kaggle.com\/aayush26\/tps-oct-2021-xgboost-301-w-oof\n3. https:\/\/www.kaggle.com\/aayush26\/tps-oct-2021-lgbm-301-w-oof\/ ","529149d5":"# Load train set to use only the target column","fb1de93d":"![Ensemble stacking.jpg](attachment:b16cdc90-5e63-49cc-b2c3-b1f3fe847b4e.jpg)","b3ba7bbb":"# Concatenate train OOFs and test predictions to make train and test data set respectively","c899d310":"# Imports","9066716f":"# 5-fold model training and prediction"}}