{"cell_type":{"69c80a49":"code","1c7be7f5":"code","46dcb7a2":"code","ad3a839c":"code","ea6a7a8f":"code","440e9ae3":"code","3b3a56bf":"code","d6185bed":"code","e3865c2d":"code","407e9258":"code","41a00544":"code","7b1fff51":"code","6afac90c":"code","72a9dfc5":"code","d0d6827b":"code","93dce13a":"code","8886cf25":"code","38addb28":"code","ddae89cb":"code","c598bdb3":"code","0f5dee5d":"markdown","f6a8ffb7":"markdown","1c4c0ab5":"markdown","47ad14fb":"markdown","16436f78":"markdown","e02abefe":"markdown","27c5d6ce":"markdown"},"source":{"69c80a49":"import scipy as sp\nimport scipy.io\nfrom scipy import stats\nimport os\nimport numpy as np\nimport pandas as pd\nimport glob\nimport csv\nfrom collections import Iterable\nimport matplotlib.pylab as plt\nimport matplotlib.patches as patch\nfrom datetime import datetime, timedelta\nimport matplotlib.dates as mdates","1c7be7f5":"plt.style.use('seaborn-white')\nplt.close('all')\nfont = {'family' : 'Arial',\n        'weight' : 'normal',\n        'size'   : 16}\nplt.rcParams['xtick.direction'] = 'out'\nplt.rc('font', **font)\nplt.rc('xtick', labelsize=16) \nplt.rc('ytick', labelsize=16)\nplt.rc('axes', labelsize=16)\nplt.rcParams['pdf.fonttype'] = 42\nplt.rcParams['ps.fonttype'] = 42","46dcb7a2":"# Load relevant DonorsChoose data\nprojects_df = pd.read_csv('..\/input\/Projects.csv')\ndonations_df = pd.read_csv('..\/input\/Donations.csv')\ndisplay(projects_df.info())\ndisplay(donations_df.info())","ad3a839c":"display(projects_df.head(2))\ndisplay(donations_df.head(2))","ea6a7a8f":"finished_projects_df = projects_df[projects_df['Project Current Status'].str.contains('Fully Funded|Expired')].copy()\n\n###convert date columns to datetime\nrel_date_cols = ['Project Posted Date', 'Project Fully Funded Date', 'Project Expiration Date']\nfinished_projects_df[rel_date_cols] = finished_projects_df[rel_date_cols].apply(pd.to_datetime)\n\n#### a few 'Project Expiration Date' are empty - fill in with 'Project posted date' + 4 months\nnulls = finished_projects_df['Project Expiration Date'].isnull()\nfinished_projects_df.loc[nulls, 'Project Expiration Date'] = (finished_projects_df.loc[nulls, 'Project Posted Date'] +\n                                                              pd.DateOffset(months = 4))\n\n### fill in 'project end date' for projects that expired with 'Project expiration date'\nexpired = finished_projects_df['Project Fully Funded Date'].isnull()\nfinished_projects_df.loc[expired, 'Project Fully Funded Date'] = finished_projects_df.loc[expired, 'Project Expiration Date']\nfinished_projects_df = finished_projects_df.rename(columns = {'Project Fully Funded Date':'Project End'})\n\n### certain projects did not have a valid expiration date - fill those in with posting date + 4 months\nnulls = finished_projects_df['Project End'].isnull()\nfinished_projects_df.loc[nulls, 'Project End'] = finished_projects_df.loc[nulls, 'Project Posted Date'] + pd.DateOffset(months = 4)\nfinished_projects_df['Days Open'] = ((finished_projects_df['Project End'] - finished_projects_df['Project Posted Date'])\/\n                                     np.timedelta64(1, 'D')).astype(int)\n\n### remove projects that have expiration dates that precede posting date (data entry error?)\nfinished_projects_df = finished_projects_df[finished_projects_df['Days Open']>0]\nfinished_projects_df= finished_projects_df.reset_index(drop = True)","440e9ae3":"# finished_projects_df = finished_projects_df.sample(frac = 0.2, random_state=42) #subset for faster prototyping\n# finished_projects_df= finished_projects_df.reset_index(drop = True)","3b3a56bf":"## Group all finished projects (expired + fully funded) by week\nfinished_projects_df['Project End'] = pd.to_datetime(finished_projects_df['Project End'])\nall_fin_proj_posted_grouped = finished_projects_df.groupby(pd.Grouper(key = 'Project Posted Date', freq = 'W'))\n\n## Group all fully funded project by week of fully funded date\nff_proj_completed_df = finished_projects_df[finished_projects_df['Project Current Status'] == 'Fully Funded']\nff_proj_completed_grouped = ff_proj_completed_df.groupby(pd.Grouper(key = 'Project End', freq = 'W'))\n\n## Group all fully funded project by week of posted date\nff_proj_posted_df = finished_projects_df[finished_projects_df['Project Current Status'] == 'Fully Funded']\nff_proj_posted_grouped = ff_proj_posted_df.groupby(pd.Grouper(key = 'Project Posted Date', freq = 'W'))\n\n## Group all expired projects by week of posted date\nexp_proj_df = finished_projects_df[finished_projects_df['Project Current Status'] == 'Expired']\nexp_proj_posted_grouped = exp_proj_df.groupby(pd.Grouper(key = 'Project Posted Date', freq = 'W'))","d6185bed":"## Find start and end of each school year\nweeks = pd.Series(ff_proj_completed_grouped.groups).reset_index()\nschool_start_inds = weeks['index'].apply(lambda x: x.week == 35)\nschool_end_inds = weeks['index'].apply(lambda x: x.week == 22)\n\nschool_start_inds.iloc[0] = True\nschool_end_inds.iloc[-1] = True\n\nschool_year = list(zip(weeks.loc[school_start_inds, 'index'], weeks.loc[school_end_inds, 'index']))\nschool_year","e3865c2d":"## count the number projects funded each week\nweekly_funded = ff_proj_completed_grouped.size()\n\n## plot\nfig,ax = plt.subplots(1,1, figsize = (15,4), sharex = True)\nax.bar(weekly_funded.index, weekly_funded, 7)\n\n# plot patches to denote school years\nymax = ax.get_ylim()[1]\nfor start, stop in school_year:\n    ax.add_patch(patch.Rectangle((mdates.date2num(start),0), \n                                 mdates.date2num(stop)-mdates.date2num(start), ymax, color = 'C4', alpha = 0.15))\n\n## find outlier weeks where a large number of projects were funded\nspikes = weekly_funded.nlargest(3)\n\n## annotate outliers and school years\nannotations = ['#BestSchoolDay(2018)', '#BestSchoolDay(2017)','Bill and Melinda Gates match']\nfor text, (spike_ind, spike) in zip(annotations, spikes.items()):\n    ax.annotate(text, xy=(mdates.date2num(spike_ind)-10, \n                spike+500), xytext=(mdates.date2num(spike_ind)-500,spike+3000), arrowprops = {'arrowstyle': '->'})\n    \nax.annotate('School\\n  year', xy=(mdates.date2num(school_year[4][0])+1, \n                27250), xytext=(mdates.date2num(school_year[4][0])+80,25000), arrowprops = {'arrowstyle': '->'}, color = 'C4')\nax.annotate('', xy=(mdates.date2num(school_year[4][1])-1, \n                27250), xytext=(mdates.date2num(school_year[4][1])-75,27250), arrowprops = {'arrowstyle': '->'}, color = 'C4')\n\n#clean up plot and label axes\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.set_ylabel('Number of projects fully funded')\nxrange = ax.get_xlim()\n\nfig.savefig('Funded_proj_timeline.png', format = 'PNG')","407e9258":"## list the days where each project was active\nranges = finished_projects_df[['Project Posted Date','Project End']].applymap(lambda x: int(x.timestamp()))\nranges = ranges.apply(lambda x: range(x[0], x[1], 86400), axis = 1) #86400 is number of seconds in a day\nranges = np.concatenate(ranges.apply(list).values)\n\n## bin and count how many projects were active during each day\nactive_hist, xvals = np.histogram(ranges, bins = np.arange(ranges.min(), ranges.max()+1, 86400))\nto_time_vec = np.vectorize(datetime.utcfromtimestamp)\nxvals = to_time_vec(xvals[:-1])\n\nactive_proj = pd.DataFrame({'date':xvals, 'Active Projects':active_hist})","41a00544":"## calculate how many projects were funded each day\ndaily_fund_rate = ff_proj_completed_df.groupby(pd.Grouper(key = 'Project End', freq = 'D')).size()\ndaily_fund_rate = daily_fund_rate.reset_index()\ndaily_fund_rate['Project End'] = pd.to_datetime(daily_fund_rate['Project End'])\ndaily_fund_rate = daily_fund_rate.rename(columns={0: 'Number funded'})\n\n# ## calculate fraction of active projects funded each day \n# active_proj = active_proj.merge(daily_fund_rate, left_on = 'date', \n#                                 right_on = 'Project End', how = 'inner').drop('Project End', axis = 1)\n# active_proj['frac_funded'] = active_proj.apply(lambda x: x[2]\/x[1], axis = 1)","7b1fff51":"## count number of projects that were posted each week\nweekly_posted_all = all_fin_proj_posted_grouped.size()\n\n## plot\nfig,ax = plt.subplots(1,1, figsize = (15,4), sharex = True)\nax.bar(xvals, active_hist, 1, alpha = 0.3, color = 'C7')\nax.bar(weekly_posted_all.index, weekly_posted_all, 7, color = 'C1', alpha = 0.7)\nax.bar(weekly_funded.index, weekly_funded, 7, color = 'C0', alpha = 0.7)\n\n## label things\nax.text(0.3, 0.9, 'Total live projects', color = 'C7', transform=ax.transAxes)\nax.text(0.3, 0.82, 'Total projects posted', color = 'C1', transform=ax.transAxes)\nax.text(0.3, 0.74, 'Total projects fully funded', color = 'C0', transform=ax.transAxes)\n\n## clean up figure\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.set_xlim(xrange)\nax.set_ylabel('Number of projects')\n\nfig.savefig('Stacked_proj_timeline.png', format = 'PNG')","6afac90c":"from numpy.polynomial.polynomial import polyfit\n\nfig,ax = plt.subplots(1,1, figsize = (6,6))\n\n## plot each week based on number of projects posted vs funded\nax.scatter(weekly_posted_all, weekly_funded.iloc[:-1], alpha = 0.4, s = 20,color = 'C3')\n\n## calculate best fit line and plot\nm, b, r_value, p_value, std_err = scipy.stats.linregress(weekly_posted_all, weekly_funded.iloc[:-1])\nax.plot(np.array([500,10000]), np.array([500,10000]) * m + b, 'k', linewidth = 1)\ntext\n\n## clean up figure and label things\nax.set_ylabel('Number of projects posted')\nax.set_xlabel('Number of projects funded')\nplt.xlim(0, 15000)\nplt.ylim(0, 15000)\nplt.gca().set_aspect('equal', adjustable='box')\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nfig.tight_layout()\nfig.savefig('correlation_posted_funded.png', format = 'png')\n\nprint('r2:' + str(r_value**2))\nprint('p: ' + str(p_value))","72a9dfc5":"#count number of projects posted that either were eventually funded or expired\nweekly_posted_exp = exp_proj_posted_grouped.size()\nweekly_posted = ff_proj_posted_grouped.size()\n\n# plot\nfig,ax = plt.subplots(1,1, figsize = (15,4), sharex = True)\nax.bar(weekly_posted.index, weekly_posted, 7, color = 'C1', alpha = 0.5)\nax.bar(weekly_posted_exp.index, weekly_posted_exp, 7, color = 'C1')\n\n# label things\nfor start, stop in school_year:\n    ax.add_patch(patch.Rectangle((mdates.date2num(start),0), \n                                 mdates.date2num(stop)-mdates.date2num(start), ymax, color = 'C4', alpha = 0.15))\nax.set_ylabel('Number of projects posted')\nax.text(0.2, 0.75, 'Fully funded', color = 'C1', transform=ax.transAxes, alpha = 0.7)\nax.text(0.2, 0.65, 'Expired', color = 'C1', transform=ax.transAxes)\n\n# clean up figure\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\n\nfig.savefig('Posted_proj_timeline_exp.png', format = 'PNG')","d0d6827b":"## caclulate the fraction of projects that are posted each week that ultimately get funded\nfrac_ffunded_by_post_day = weekly_posted\/weekly_posted_all\nfrac_ffunded_by_post_day = frac_ffunded_by_post_day.reset_index()\n\n## exclude any projects that are posted at during the last school year since it is incomplete\nfrac_ffunded_by_post_day = frac_ffunded_by_post_day[frac_ffunded_by_post_day['Project Posted Date'] < school_year[-1][0]]\n\n## group projects by week across the years to calculate means ect.\nfrac_ffunded_by_post_day['week'] = frac_ffunded_by_post_day['Project Posted Date'].apply(lambda x: x.week)\nfrac_ffunded_by_post_day = frac_ffunded_by_post_day.rename(columns = {0:'Fraction funded'})\nfrac_ffunded_by_post_day = frac_ffunded_by_post_day[frac_ffunded_by_post_day['week']<53]\n\n## calc means and sem for the fraction of funded projects\nmean_frac_funded_by_post_day = frac_ffunded_by_post_day.groupby('week').mean().reset_index()\nsem_frac_funded_by_post_day = frac_ffunded_by_post_day.groupby('week')['Fraction funded'].apply(stats.sem).reset_index()","93dce13a":"## reorder weeks to fit the academic year\norder = np.concatenate([np.where(mean_frac_funded_by_post_day['week']>21)[0], \n                        np.where(mean_frac_funded_by_post_day['week']<22)[0]])\n\nmean_frac_funded_by_post_day = mean_frac_funded_by_post_day.iloc[order].reset_index(drop=True)\nsem_frac_funded_by_post_day = sem_frac_funded_by_post_day.iloc[order].reset_index(drop = True)\norder","8886cf25":"## transform week representation from int to month\nmean_frac_funded_by_post_day['week'] = mean_frac_funded_by_post_day['week'].apply(lambda x: datetime.strptime(str(x)+'-0', '%W-%w'))\nmean_frac_funded_by_post_day['week'] = mean_frac_funded_by_post_day['week'].apply(lambda x: datetime.strftime(x, '%B'))","38addb28":"## Need to repeat the above but want to group number funded and total number of projects by week before calculating fraction\n## want to do this in order to calculate fraction funded during four week periods that we will compare statistically with \n## other four week periods\n\nfunded_proj_week = pd.concat([weekly_posted.to_frame(name = 'funded'), weekly_posted_all.to_frame(name = 'total')], axis = 1)\nfunded_proj_week = funded_proj_week.reset_index()\nfunded_proj_week['week'] = funded_proj_week['Project Posted Date'].dt.week\nfunded_proj_week['year'] = funded_proj_week['Project Posted Date'].dt.year\nfunded_proj_week = funded_proj_week[funded_proj_week['year']<2018]\nfunded_proj_week = funded_proj_week.groupby('year')\n\ndef calc_epoch_ff(week_range, grouped):\n    frac_ff = funded_proj_week.apply(lambda x: np.sum(x.loc[(x['week']>week_range[0]) &\n                                                            (x['week']<=week_range[1]), ['funded', 'total']], axis = 0))\n    frac_ff = (frac_ff['funded']\/frac_ff['total']).dropna()\n    return frac_ff\n\n## calculate the fraction of projects funded for three planned comparisons\nearly_frac_ff = calc_epoch_ff([32,36], funded_proj_week)\nlate_frac_ff = calc_epoch_ff([13,17], funded_proj_week)\nmiddle_frac_ff = calc_epoch_ff([39,43], funded_proj_week)","ddae89cb":"display(pd.DataFrame([early_frac_ff, late_frac_ff,middle_frac_ff], index = ['start', 'end', 'middle']))\n\n## calculate if means are significantly different for the different epochs\nstart_end_test = stats.mannwhitneyu(early_frac_ff,late_frac_ff)\nstart_middle_test = stats.mannwhitneyu(early_frac_ff,middle_frac_ff)\n\n## calculate effect size\ndef cliffs_d(stat,x1,x2):\n    return (2*stat\/(len(x1)*len(x2)))-1\n    \nprint('start vs end pvalue: ' + str(start_end_test.pvalue))\nprint('start vs middle pvalue: ' + str(start_middle_test.pvalue))\n\nprint('start vs end effect size: ' + str(cliffs_d(start_end_test.statistic, early_frac_ff,late_frac_ff)))\nprint('start vs middle effect size: ' + str(cliffs_d(start_middle_test.statistic, early_frac_ff,middle_frac_ff)))\n","c598bdb3":"fig, ax = plt.subplots(1,1, figsize = (7,6))\n\n## plot fraction funded by week\nax.plot(np.arange(0,52), mean_frac_funded_by_post_day['Fraction funded'], color = 'C2')\nax.fill_between(np.arange(0,52),\n                mean_frac_funded_by_post_day['Fraction funded'] -sem_frac_funded_by_post_day['Fraction funded'],\n                mean_frac_funded_by_post_day['Fraction funded'] +sem_frac_funded_by_post_day['Fraction funded'], alpha =0.4,color = 'C2')\n\n## label epochs that we compared\nweek_order = order +1\nstart = np.where(order == 33)[0]\nend = np.where(order == 14)[0]\nmiddle = np.where(order == 40)[0]\n\nax.plot([start,start,start+4,start+4], [0.84,0.84,0.84,0.84], 'C7')\nax.plot([end,end,end+4,end+4], [0.84,0.84,0.84,0.84], 'C7')\nax.plot([middle,middle,middle+4,middle+4], [0.84,0.84,0.84,0.84],'C7')\nax.plot([(start+start+4)\/2,(start+start+4)\/2, (end+end+4)\/2,(end+end+4)\/2], [0.9,0.92,0.92,0.9], 'C7')\nax.plot([(middle+middle+4)\/2,(middle+middle+4)\/2, (start+start+4)\/2,(start+start+4)\/2], [0.85,0.87,0.87,0.85], 'C7')\nax.scatter((end+start+4)\/2.1, .94, color = 'k', marker = '*')\nax.text((middle+start+4)\/2.1, .88, 'ns')\n\n## label academic year\nax.add_patch(patch.Rectangle((14,0), 37, ymax, color = 'C4', alpha = 0.15))\n\n## clean up figure\nxticks = np.sort(np.unique(mean_frac_funded_by_post_day['week'].values, return_index = True)[1])\nax.set_xticks(xticks)\nax.set_xticklabels(mean_frac_funded_by_post_day['week'].values[xticks], rotation = 65)\nax.spines['right'].set_visible(False)\nax.spines['top'].set_visible(False)\nax.set_ylim(0,1); ax.set_xlim(0,51)\nax.set_ylabel('Fraction of projects funded')\nax.set_xlabel('Date of project posting')\nax.text(0.5, 0.4, 'School year', transform = ax.transAxes, color = 'C4')\nfig.tight_layout()\nfig.savefig('fraction of projects funded')\n","0f5dee5d":"If the increase in project funding is entirely counterbalanced by an increase in the number of projects posted then the fraction of projects that are funded at the start of the year should not be significantly different from the fraction that are ultimately funded at any other point in the school year. To test this we sorted projects into those that were ultimately fully funded and those that expired before reaching their funding goal. The figure below shows that at the beginning of the school year, the number of projects posted that expired increased at what seems like a similar rate as those that were eventually funded.","f6a8ffb7":"The above pattern may be a good sign that posting a project at the beginning of the school year would increase the chances of it getting funded, however this may not be the case. While the total number of projects funded does increase, this could be accompanied by an increase in the number of projects being posted. If this were true, then the fraction of projects being funded in late August and early September may be similar or in fact lower than the fraction being funded at the end of the school year.\nTo get a better idea of whether this is the case we looked to see whether the number of projects posted and the number of total active\/live projects also varied across the school year. The figure below shows that indeed more projects are posted at the beginning of the school year which in turn leads to an increase in the number of live projects. This is also shown by the fact that the rate of funding projects and the rate of posting projects show a small but significant correlation ( r-squared= 0.22,  p<0.001).","1c4c0ab5":"## TL;DR:\n\nThe bottom\u00a0line:\nThere is a yearly pattern to how many projects get funded throughout the year. More projects get funded at the start of the school year. However, for the most part this is well balanced by an increase in projects being posted. As a result projects are as likely to get funded in the middle of the school year than at the start. The only significant effect is for projects posted at the end of the year and probably during the early summer. These are less likely to get funded than if they were posted at the start of the year.\nOne practical implication of the above findings are that if you want to post projects at the end of the year to say, fund a summer project, you may want to account for the decreased likelihood of your project being funded. For example, you may want to decrease your funding goal (see upcoming part 2 of this project).","47ad14fb":"# Crowdfunding Education with DonorsChoose.org\n## Part 1 (Does time of year affect project funding?)\n#### Exploratory data analysis in\u00a0Python","16436f78":"To test to see if this hypothesis is correct we first looked at whether the number of projects that reach their funding goal varied in a consistent way across the school year. \n\nFrom the figure below it appears that there tends to be a surge in the number of projects that get funded at the start of the school year, this number then recedes significantly around the summer time. While this pattern seems to hold on a yearly basis, it is accompanied by a slow but steady increase year to year. A few prominent spikes in the number of projects funded are also evident. These spikes are due to large gifts or exceptionally generous donation match partnerships from the likes of Ripple and Bill and Melinda Gates.","e02abefe":"We next calculated the average fraction of projects that were funded for each week throughout the year. We then tested to see if the fraction of funded projects posted in late August\/early September was significantly higher than the fraction of funded projects posted after the start of the school year (October\/early November) or during the end of the school year (late April\/May)\n\nWe found that the fraction of projects posted early in the school year that were eventually funded was significantly greater than that for projects posted at end of the school year (p<0.5 ) and showed a relatively large effect size (d = 0.81). However, the fraction of funded projects posted in the middle of the school year did not differ significantly from those that were posted at the start of the school year.","27c5d6ce":"DonorsChoose.org is a website that promotes and facilitates the crowdfunding of classroom projects from schools around the country. Through DonorsChoose.org teachers and school administrators have received the critical funding they need to help them do everything from buying kits used for frog dissections in biology class to setting up bullying prevention programs. Since their inception in 2000, DonorsChoose.org has helped fully fund 1,208,707 school projects and have estimated to have helped 28,958,906 students. Their mission statement is as follows:\n\n** \"We make it easy for anyone to help a classroom in need, moving us closer to a nation where students in every community have the tools and experiences they need for a great education.\" **\n\nIn this series of kernesl we will be diving into the DonorsChoose data-set posted on Kaggle  to find out which projects members of the public find worthy of their donations. Although we will explore an assortment of different potential factors that might predict whether a project gets funded, this is not meant to be an exhaustive or comprehensive analysis of the data-set. Also if you would rather just read the results of the analysis in a medium blog post you can find it [here ](http:\/\/medium.com\/@EricFinks\/crowdfunding-education-with-donorschoose-org-part-1-does-time-of-year-affect-project-funding-61b0b526f34a)\n\nIn the first part of this series of posts we will begin by testing the following hypothesis:\u00a0\n\n***\n** Hypothesis:**\n\n*Posting a project at the beginning of the school year makes it more likely that your project gets fully funded.*\n\n***\n\nAt first glance the stated hypothesis seems intuitive. For example, it seems reasonable that people looking for a good cause to donate to might be more likely to think of schools at the beginning of the school year, especially if they themselves are parents. Another possibility comes from the fact that DonorChoose.org often partners with companies and other organizations to set up match donation programs. These programs greatly improve the chances of projects reaching their funding goals. It seems likely that companies, looking to maximize good publicity of such partnerships, are more likely make arrangements with DonorsChoose.org at the beginning of the school year."}}