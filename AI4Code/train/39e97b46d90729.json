{"cell_type":{"847a2ce0":"code","2902a7be":"code","2c056285":"code","ef4fe7b5":"code","c7626e05":"code","d79b2527":"code","379793bf":"code","517afc0e":"code","978694eb":"code","89795e52":"code","ad8c812a":"code","5fa9e582":"code","4f91220c":"code","db162906":"code","10b00ff1":"code","682c2be0":"code","d053ed4a":"code","13274e52":"code","f23eb0b2":"code","832cd65d":"code","d5746d2e":"code","f80dd4d6":"code","f5fe8911":"code","8e846ab7":"code","47c3b2f9":"code","2bc7031c":"code","6bd95431":"code","85e63379":"code","d789b8ab":"code","3e94b00a":"code","9c09d554":"code","632b1b91":"code","5636aa21":"code","79d52f33":"code","44fff866":"code","2c14bab8":"code","9fa9581a":"code","259b6ef6":"code","89030f1f":"code","f0cc87a7":"code","96d78a1b":"code","36748e91":"code","7e5f6241":"code","a23428ce":"code","337ddf03":"code","6206d6d9":"code","eef059a8":"code","07308678":"code","77ae9d62":"code","75c567d2":"code","e51e7113":"code","19ca2c90":"code","c1d5bf14":"code","3d8fe40a":"markdown","57947b15":"markdown","53531800":"markdown","b8e5b113":"markdown","34b193fb":"markdown","31997f13":"markdown","db859988":"markdown","2b5949a3":"markdown","c20a22eb":"markdown","401981ad":"markdown","5651db26":"markdown","484b1ed2":"markdown","dfc7058d":"markdown","c790c78c":"markdown","a41cdcc5":"markdown"},"source":{"847a2ce0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2902a7be":"data = pd.read_csv('..\/input\/titanicdataset-traincsv\/train.csv')","2c056285":"#we will make the changes to this DataFrame\ndf = data.copy()","ef4fe7b5":"data.sample(10)","c7626e05":"data.shape","d79b2527":"data.info()","379793bf":"data.describe()","517afc0e":"#We have null values in Age, Cabin and Embarked column\ndata.isnull().sum()","978694eb":"# dropping PassengerId, Name,Fare and Ticket columns as we do not require it either for visualization or modelling.\ndf.drop(['PassengerId', 'Name','Ticket','Fare'],axis = 1, inplace = True)","89795e52":"import matplotlib.pyplot as plt\nimport seaborn as sns","ad8c812a":"sns.countplot(x = 'Survived', data = data)","5fa9e582":"survived_percent = round(len(data[data['Survived'] == 1])\/len(data) * 100,2)\nprint(\"Percentage of people survived = \", survived_percent,\"%\")","4f91220c":"#most passengers belonged to third class\nsns.countplot(x = 'Pclass', data = data)","db162906":"#first class passengers were more likely to survive than other passenger classes\nsns.countplot(x = 'Pclass', hue = 'Survived', data = data)","10b00ff1":"#As obvious male passengers were more than female passengers\nsns.countplot(x = 'Sex', data = data)","682c2be0":"#More female passengers survuved than male passengers\nsns.countplot(x = 'Sex',hue = 'Survived', data = data)","d053ed4a":"sns.displot(x = 'Age',kde = True, data = data)","13274e52":"print('Age mean = ', data['Age'].mean())","f23eb0b2":"print('Age median = ', data['Age'].median())","832cd65d":"df['Age'].fillna(df['Age'].median(skipna = True),inplace = True)","d5746d2e":"#we can see more children survived than older people\nplt.figure(figsize = (10,10))\nsns.displot(x = 'Age',hue = 'Survived', kde = True, data = data, multiple = 'stack')","f80dd4d6":"data['SibSp'].unique()","f5fe8911":"sns.countplot(x = 'SibSp',data = data)","8e846ab7":"sns.countplot(x = 'SibSp',hue = 'Survived', data = data)","47c3b2f9":"sns.countplot(x = 'Parch', data = data)","2bc7031c":"sns.countplot(x = 'Parch', hue = 'Survived', data = data)","6bd95431":"data['Cabin'].unique()","85e63379":"data['Cabin'].value_counts(dropna = False)","d789b8ab":"df.drop(['Cabin'], axis = 1, inplace = True)","3e94b00a":"data['Embarked'].unique()","9c09d554":"data['Embarked'].value_counts(dropna = False)","632b1b91":"df[\"Embarked\"].fillna(df['Embarked'].value_counts().idxmax(), inplace=True)","5636aa21":"sns.countplot(x = 'Embarked',data = data)","79d52f33":"sns.countplot(x = 'Embarked',hue = 'Survived',data = data)","44fff866":"#np.where(condition,x,y) if condition is true yield x, otherwise yield y.\n#np.where((train_data[\"SibSp\"]+train_data[\"Parch\"])>0, 0, 1) 0 - False 1 - True\ndf['TravelAlone'] = np.where((data[\"SibSp\"]+data[\"Parch\"])>0, 0, 1)","2c14bab8":"df.drop(['SibSp','Parch'],axis = 1,inplace = True)","9fa9581a":"df.head()","259b6ef6":"sns.countplot(x = 'TravelAlone', data = df)","89030f1f":"sns.countplot(x = 'TravelAlone',hue = 'Survived' ,data = df)","f0cc87a7":"#As we saw Embarked column is also not effecting the survival of passenger , we will drop it too\ndf.drop(['Embarked'],axis = 1, inplace = True)","96d78a1b":"x = df.drop(['Survived'],axis = 1)\ny = df['Survived']","36748e91":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder() \nx[\"Sex_n\"]=le.fit_transform(x[\"Sex\"])","7e5f6241":"x","a23428ce":"x.drop(['Sex'],axis = 1, inplace = True)","337ddf03":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x ,y, test_size = 0.2, random_state = 42)","6206d6d9":"x_train.shape","eef059a8":"x_test.shape","07308678":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()","77ae9d62":"model.fit(x_train, y_train) ","75c567d2":"model.score(x_test,y_test)","e51e7113":"y_pred = model.predict(x_test)","19ca2c90":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test,y_pred)\nsns.heatmap(cm, annot = True)","c1d5bf14":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","3d8fe40a":"Age column","57947b15":"Sex column","53531800":"Both SibSp and Parch relate to traveling with family. For simplicity's sake (and to account for possible multicollinearity), I'll combine the effect of these variables into one categorical predictor: whether or not that individual was traveling alone.","b8e5b113":"Cabin column","34b193fb":"Survived column ","31997f13":"Embarked column","db859988":"Most of the values of Cabin column are missing so we will drop it.","2b5949a3":"So only 2 values of the Embarked column are null so so we can just impute with the port where most people boarded.","c20a22eb":"Parch column","401981ad":"### EXPLORATORY DATA ANALYSIS","5651db26":"SibSp column","484b1ed2":"Pclass column","dfc7058d":"![image.png](attachment:0944386a-f322-4e9c-a429-8826e15ec6c6.png)\n\nAge is right-skewed (i.e. most of the data falls onto the right side of the curve)\nUsing the mean might give us biased results by filling in ages that are older than desired. To deal with this, we'll use the median to impute the missing values.","c790c78c":"### DATA DESCRIPTION","a41cdcc5":"#### Variable Description\n* Survived: Survived (1) or died (0); this is the target variable\n* Pclass: Passenger's class (1st, 2nd or 3rd class)\n* Name: Passenger's name\n* Sex: Passenger's sex\n* Age: Passenger's age\n* SibSp: Number of siblings\/spouses aboard\n* Parch: Number of parents\/children aboard\n* Ticket: Ticket number\n* Fare: Fare\n* Cabin: Cabin\n* Embarked: Port of embarkation"}}