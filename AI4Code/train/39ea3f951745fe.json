{"cell_type":{"fa21e49d":"code","3d00d87a":"code","e71b8318":"code","73d2ffb3":"code","75a23895":"code","dec6efc7":"code","e11bfe63":"code","d0a595f9":"code","7a978a05":"code","2e10fd00":"code","e9894370":"code","d6afc3f0":"code","c7a16f7e":"code","8946dfaa":"code","4d4d414f":"code","4f5a11e1":"code","9e239735":"markdown"},"source":{"fa21e49d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3d00d87a":"import nltk\nimport re\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(color_codes = True)","e71b8318":"df = pd.read_csv('\/kaggle\/input\/sms-spam-collection-dataset\/spam.csv',encoding='ISO-8859-1')\ndf.head()","73d2ffb3":"df = df.iloc[:,:2]\ndf.rename(columns = {'v1':'label','v2':'message'},inplace = True)","75a23895":"ax = sns.countplot(x=\"label\", data=df)","dec6efc7":"corpus = []","e11bfe63":"lm = WordNetLemmatizer()\nfor i in range(0, len(df)):\n    review = re.sub('[^a-zA-Z]', ' ', df['message'][i])\n    review = review.lower()\n    review = review.split()\n    review = [lm.lemmatize(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)","d0a595f9":"corpus","7a978a05":"# Creating the TF-IDF model\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ncv = TfidfVectorizer()\nX = cv.fit_transform(corpus).toarray()\nX","2e10fd00":"y=pd.get_dummies(df['label'])\ny=y.iloc[:,1].values","e9894370":"# Train Test Split\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)","d6afc3f0":"from sklearn import svm\n\nclf = svm.SVC()\nclf.fit(X_train,y_train)\ny_predicted = clf.predict(X_test)\nscore = clf.score(X_test,y_test)\n\nprint(score)","c7a16f7e":"from sklearn.metrics import confusion_matrix\n\n#Confusion Matrix\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_test, y_predicted)\nnp.set_printoptions(precision=2)\ncnf_matrix","8946dfaa":"import itertools\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()","4d4d414f":"classes = df[\"label\"].value_counts()","4f5a11e1":"#With Normalization\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes=classes.index,\n                      title='Confusion matrix, without normalization')\n# With normalization\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes= classes.index, normalize=True,\n                      title='Normalized confusion matrix')\n\nplt.show()","9e239735":"# 3.Built Model"}}