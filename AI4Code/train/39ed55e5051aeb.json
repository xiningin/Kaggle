{"cell_type":{"bd2761a8":"code","a0e04250":"code","1553a3a9":"code","1de430c1":"code","8e7e141c":"code","8963448f":"code","56aa8aa8":"code","c26a4589":"code","1ecfd2c9":"code","4171f389":"code","850fa11c":"code","dbbf8b84":"code","36fd6c4b":"code","904517bf":"code","8313427a":"markdown","20d62ceb":"markdown","91eab04f":"markdown","63ecb109":"markdown","1b0769f9":"markdown","22bc2bfa":"markdown","c2e5456a":"markdown","18376b7c":"markdown"},"source":{"bd2761a8":"import numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import  GradientBoostingRegressor","a0e04250":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","1553a3a9":"train.head()","1de430c1":"train['totalSF'] =( train['TotalBsmtSF'] + train['1stFlrSF'] + train['2ndFlrSF']  )\ntrain['total_bathrooms'] = (train['BsmtFullBath'] + 0.5*train['BsmtHalfBath'] + train['FullBath'] + 0.5*train['HalfBath'])\ntrain['ageHouse'] = (train['YrSold'] - train['YearBuilt'] )\ntest['totalSF'] =( test['TotalBsmtSF'] + test['1stFlrSF'] + test['2ndFlrSF']  )\ntest['total_bathrooms'] = (test['BsmtFullBath'] + 0.5*test['BsmtHalfBath'] + test['FullBath'] + 0.5*test['HalfBath'])\ntest['ageHouse'] = (test['YrSold'] - test['YearBuilt'] )","8e7e141c":"train.drop(['Id','Utilities','PoolQC','MiscFeature','Alley','Fence','GarageYrBlt'] , axis=1 , inplace=True)\ntrain.drop(['TotalBsmtSF' , '1stFlrSF' ,'2ndFlrSF'] , axis = 1 , inplace =True)\ntrain.drop(['BsmtFullBath' , 'BsmtHalfBath' , 'FullBath' , 'HalfBath'] , axis=1 , inplace=True)\ntrain = train.drop(columns = [ 'YearRemodAdd', 'GarageQual', 'GarageCond','YrSold','MoSold', 'YearBuilt', 'Heating'], axis = 1)\nY = train['SalePrice']\ntrain = train.drop(columns = ['SalePrice'], axis = 1)\nId = test['Id']\ntest.drop(['Id','Utilities','PoolQC','MiscFeature','Alley','Fence','GarageYrBlt'] , axis=1 , inplace=True)\ntest.drop(['TotalBsmtSF' , '1stFlrSF' ,'2ndFlrSF'] , axis = 1 , inplace =True)\ntest.drop(['BsmtFullBath' , 'BsmtHalfBath' , 'FullBath' , 'HalfBath'] , axis=1 , inplace=True)\ntest = test.drop(columns = [ 'YearRemodAdd', 'GarageQual', 'GarageCond','YrSold','MoSold', 'YearBuilt', 'Heating'], axis = 1)","8963448f":"mode =  ['MasVnrArea' , 'Electrical' , 'MSZoning' , 'SaleType','Exterior1st','Exterior2nd','KitchenQual']\nfor col in mode:\n    train[col]  = train[col].fillna(train[col].mode()[0])\nfor col in mode:\n    test[col]  = test[col].fillna(test[col].mode()[0])\nNo = ['GarageType','GarageFinish',\n                'BsmtExposure','BsmtFinType2','BsmtFinType1','BsmtCond','BsmtQual',\n                'FireplaceQu','MasVnrType']\nfor col in No:\n    train[col]=train[col].fillna('None')\nfor col in No:\n    test[col]=test[col].fillna('None')\ntrain['Functional'] = train['Functional'].fillna('Typ')\ntrain['LotFrontage'] = train['LotFrontage'].fillna(train['LotFrontage'].median())\ntest['Functional'] = test['Functional'].fillna('Typ')\ntest['LotFrontage'] = test['LotFrontage'].fillna(test['LotFrontage'].median())\nzero = ['total_bathrooms','totalSF','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','GarageArea','GarageCars' ]\nfor col in zero:\n    train[col] = train[col].fillna(0)\nfor col in zero:\n    test[col] = test[col].fillna(0)\ntrain.head()","56aa8aa8":"test.head()","c26a4589":"train.dropna(inplace = True)\ntest.dropna(inplace = True)","1ecfd2c9":"Label = ['MSZoning', 'Street', 'LotShape', 'LandContour', 'LotConfig', 'LandSlope', 'Condition1', 'RoofStyle', 'RoofMatl', 'MasVnrType', 'ExterCond', 'Electrical', 'Functional', 'PavedDrive', 'SaleType', 'Exterior1st', 'HeatingQC', 'BsmtCond', 'Foundation', 'SaleCondition', 'CentralAir', 'ExterQual' ,'BsmtQual', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'Neighborhood', 'OverallQual', 'FireplaceQu', 'KitchenQual' , 'Condition2', 'Exterior2nd', 'GarageType', 'GarageFinish', 'BldgType', 'HouseStyle']\nfor feature in Label:\n    ohe = pd.get_dummies(train[feature], prefix=feature)\n    train = pd.concat([train, ohe], axis=1)\ntrain = train.drop(columns = Label, axis = 1)\nfor feature in Label:\n    ohe = pd.get_dummies(test[feature], prefix=feature)\n    test = pd.concat([test, ohe], axis=1)\ntest = test.drop(columns = Label, axis = 1)","4171f389":"train = train.drop(columns = ['HouseStyle_2.5Fin','RoofMatl_Metal', 'RoofMatl_Roll', 'RoofMatl_Membran', 'RoofMatl_ClyTile', 'Electrical_Mix', 'Exterior1st_Stone', 'Exterior1st_ImStucc', 'Condition2_RRNn', 'Condition2_RRAn', 'Condition2_RRAe', 'Exterior2nd_Other'], axis = 1)","850fa11c":"train.head()","dbbf8b84":"test.head()","36fd6c4b":"model = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\nmodel.fit(X = train, y = Y)","904517bf":"test['SalePrice'] = model.predict(test)\ntest['Id'] = Id\ntest[['Id', 'SalePrice']].to_csv('price_submission.csv', index=False)","8313427a":"Trained the model","20d62ceb":"Dropped Non-Specific Columns to make the model less complex and Ground Truth(SalePrice) from Train dataframe ","91eab04f":"Done One hot encoding of Categorical Features","63ecb109":"Filled the missing values","1b0769f9":"Predicted on test set","22bc2bfa":"Added new features from present features","c2e5456a":"Dropped the new columns of train dataframe which are not in test dataframe","18376b7c":"Imported Libraries"}}