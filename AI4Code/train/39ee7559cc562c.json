{"cell_type":{"901c19ba":"code","253f806f":"code","604c6e72":"code","75130fe5":"code","ad0f5af0":"code","892a924d":"code","2b17b50c":"code","1ee3c995":"code","6591fac2":"code","d3957cc9":"markdown","1fa21274":"markdown","b43cdb95":"markdown","152eef8e":"markdown"},"source":{"901c19ba":"import pandas as pd\nimport numpy as np\nimport os\nfrom sklearn.metrics import r2_score\nimport glob\n","253f806f":"# A function to calculate realized volatility for all time intervals in a single book file\ndef realized_volatility_single_stock(file_path, prediction_column_name):\n    df_book_data = pd.read_parquet(file_path)\n    stock_id = file_path.split('=')[1]\n    time_ids, bpr, bsz, apr, asz = (df_book_data[col].values for col in ['time_id', 'bid_price1','bid_size1','ask_price1','ask_size1' ])\n    wap = (bpr * asz +apr * bsz) \/ (asz + bsz)\n    log_wap = np.log(wap)\n    ids, index = np.unique(time_ids, return_index=True)\n\n    splits = np.split(log_wap, index[1:])\n    ret=[]\n    for time_id, x in zip(ids.tolist(), splits):\n        log_ret = np.diff(x)\n        volatility = np.sqrt((log_ret ** 2).sum())\n        ret.append((f'{stock_id}-{time_id}', volatility.item()))\n    return pd.DataFrame(ret, columns=['row_id', prediction_column_name])","604c6e72":"def realized_volatility_all(files_list, prediction_column_name):\n    return pd.concat( [realized_volatility_single_stock(file, prediction_column_name) for file in files_list])","75130fe5":"list_order_book_file_train = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*')","ad0f5af0":"%%time\ndf_past_realized_train = realized_volatility_all(list_order_book_file_train, 'pred')","892a924d":"train = pd.read_csv('..\/input\/optiver-realized-volatility-prediction\/train.csv')\ntrain['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\ntrain = train[['row_id','target']]\ndf_joined = train.merge(df_past_realized_train[['row_id','pred']], on = ['row_id'], how = 'left')","2b17b50c":"def rmspe(y_true, y_pred):\n    return  (np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true))))\nR2 = round(r2_score(y_true = df_joined['target'], y_pred = df_joined['pred']),3)\nRMSPE = round(rmspe(y_true = df_joined['target'], y_pred = df_joined['pred']),3)\nprint(f'Performance of the naive prediction: R2 score: {R2}, RMSPE: {RMSPE}')","1ee3c995":"list_order_book_file_test = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/*')\ndf_naive_pred_test = realized_volatility_all(list_order_book_file_test,'target')\ndf_naive_pred_test.to_csv('submission.csv',index = False)","6591fac2":"pd.read_csv('submission.csv').head()","d3957cc9":"As a last step, we will make a submission via the tutorial notebook -- through a file written to output folder.  The naive submission scored a RMSPE 0.327 on public LB, the room of improvement is big for sure!","1fa21274":"## Introduction\nThis reproduces the naive solution from the [notebook](https:\/\/www.kaggle.com\/jiashenliu\/introduction-to-financial-concepts-and-data) provided by the contest organizers, but replaces data manipulation in pandas with a straight numpy calculation. For a 10x speed improvement","b43cdb95":"# Submission","152eef8e":"## Run on the train set to sanity check"}}