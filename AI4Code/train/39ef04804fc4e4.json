{"cell_type":{"06e00cf8":"code","40cc7e00":"code","a913b539":"code","382e53aa":"code","8d07dbbd":"code","0c019fd9":"code","3745b9e6":"code","6261fdc1":"code","ef9b20df":"code","1113a46a":"code","ccded0cd":"code","03ee9c17":"code","830be3fe":"code","265c68b0":"code","1d49233e":"code","20a5dbdb":"code","19c6450c":"code","abcd186a":"code","b3bfb921":"code","718587ee":"code","288d094a":"code","e15da8d3":"code","db062cdb":"code","55132d5a":"code","83406e16":"code","fea949dd":"code","b8c931d0":"code","2df5f80b":"code","b138d886":"code","ec95fb0f":"code","40c2870e":"code","e469137b":"code","22b7125c":"code","cca9e954":"code","39643fc2":"code","7efb7f38":"markdown","2c8fba85":"markdown","3fc941cd":"markdown","98d9bfd1":"markdown","effed426":"markdown","031db620":"markdown","b20e5a1e":"markdown","8e2fa5a2":"markdown","5351d72f":"markdown","2471013b":"markdown","1fc9a2b2":"markdown","f1a2c0ac":"markdown","4c58113b":"markdown","d810b912":"markdown","63962a45":"markdown","3a415af6":"markdown","1e05ccab":"markdown","0468c2e3":"markdown","e15120ae":"markdown","6daaef24":"markdown","cc5886f0":"markdown","d8694edf":"markdown","aea5d3cc":"markdown","5f0d26bd":"markdown","fc5ecafa":"markdown","fee5b55d":"markdown","74ce055e":"markdown","c530f35a":"markdown","859fb1b7":"markdown","15801a26":"markdown","5c090a27":"markdown","1bc8c6ca":"markdown","c545a453":"markdown"},"source":{"06e00cf8":"%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport pandas as pd\nimport numpy as np\nimport nltk\nimport string\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc\nfrom nltk.stem.porter import PorterStemmer\nimport re\nfrom nltk.corpus import stopwords\nfrom tqdm import tqdm_notebook as tqdm\nfrom prettytable import PrettyTable\nimport os\n\nfrom plotly import plotly\nimport plotly.offline as offline\nimport plotly.graph_objs as go\noffline.init_notebook_mode()","40cc7e00":"#Data taken from Kaggle: https:\/\/www.kaggle.com\/manasvee1\/donorschooseorg-application-screening\n\nproject_data = pd.read_csv('..\/input\/train.csv')\nresource_data = pd.read_csv('..\/input\/resources.csv')","a913b539":"# how to replace elements in list python: https:\/\/stackoverflow.com\/a\/2582163\/4084039\ncols = ['Date' if x=='project_submitted_datetime' else x for x in list(project_data.columns)]\n\n#sort dataframe based on time pandas python: https:\/\/stackoverflow.com\/a\/49702492\/4084039\nproject_data['Date'] = pd.to_datetime(project_data['project_submitted_datetime'])\nproject_data.drop('project_submitted_datetime', axis=1, inplace=True)\nproject_data.sort_values(by=['Date'], inplace=True)\n\n# how to reorder columns pandas python: https:\/\/stackoverflow.com\/a\/13148611\/4084039\nproject_data = project_data[cols]\n\nproject_data.head(2)","382e53aa":"catogories = list(project_data['project_subject_categories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\ncat_list = []\nfor i in catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp+=j.strip()+\" \" #\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_') # we are replacing the & value into \n    cat_list.append(temp.strip())\n    \nproject_data['clean_categories'] = cat_list\nproject_data.drop(['project_subject_categories'], axis=1, inplace=True)","8d07dbbd":"sub_catogories = list(project_data['project_subject_subcategories'].values)\n# remove special characters from list of strings python: https:\/\/stackoverflow.com\/a\/47301924\/4084039\n# https:\/\/www.geeksforgeeks.org\/removing-stop-words-nltk-python\/\n# https:\/\/stackoverflow.com\/questions\/23669024\/how-to-strip-a-specific-word-from-a-string\n# https:\/\/stackoverflow.com\/questions\/8270092\/remove-all-whitespace-in-a-string-in-python\n\nsub_cat_list = []\nfor i in sub_catogories:\n    temp = \"\"\n    # consider we have text like this \"Math & Science, Warmth, Care & Hunger\"\n    for j in i.split(','): # it will split it in three parts [\"Math & Science\", \"Warmth\", \"Care & Hunger\"]\n        if 'The' in j.split(): # this will split each of the catogory based on space \"Math & Science\"=> \"Math\",\"&\", \"Science\"\n            j=j.replace('The','') # if we have the words \"The\" we are going to replace it with ''(i.e removing 'The')\n        j = j.replace(' ','') # we are placeing all the ' '(space) with ''(empty) ex:\"Math & Science\"=>\"Math&Science\"\n        temp +=j.strip()+\" \"#\" abc \".strip() will return \"abc\", remove the trailing spaces\n        temp = temp.replace('&','_')\n    sub_cat_list.append(temp.strip())\n\nproject_data['clean_subcategories'] = sub_cat_list\nproject_data.drop(['project_subject_subcategories'], axis=1, inplace=True)","0c019fd9":"proj_grade_cat = []\n\nfor i in range(len(project_data)):\n    pgc = project_data[\"project_grade_category\"][i].replace(\" \", \"_\")\n    proj_grade_cat.append(pgc)\n    \nproject_data.drop(['project_grade_category'], axis=1, inplace=True)\nproject_data[\"project_grade_category\"] = proj_grade_cat","3745b9e6":"# merge two column text dataframe: \nproject_data[\"essay\"] = project_data[\"project_essay_1\"].map(str) +\\\n                        project_data[\"project_essay_2\"].map(str) + \\\n                        project_data[\"project_essay_3\"].map(str) + \\\n                        project_data[\"project_essay_4\"].map(str)","6261fdc1":"# https:\/\/gist.github.com\/sebleier\/554280\n# we are removing the words from the stop words list: 'no', 'nor', 'not'\nstopwords= ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', \"you're\", \"you've\",\\\n            \"you'll\", \"you'd\", 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', \\\n            'she', \"she's\", 'her', 'hers', 'herself', 'it', \"it's\", 'its', 'itself', 'they', 'them', 'their',\\\n            'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', \"that'll\", 'these', 'those', \\\n            'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', \\\n            'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', \\\n            'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after',\\\n            'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further',\\\n            'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more',\\\n            'most', 'other', 'some', 'such', 'only', 'own', 'same', 'so', 'than', 'too', 'very', \\\n            's', 't', 'can', 'will', 'just', 'don', \"don't\", 'should', \"should've\", 'now', 'd', 'll', 'm', 'o', 're', \\\n            've', 'y', 'ain', 'aren', \"aren't\", 'couldn', \"couldn't\", 'didn', \"didn't\", 'doesn', \"doesn't\", 'hadn',\\\n            \"hadn't\", 'hasn', \"hasn't\", 'haven', \"haven't\", 'isn', \"isn't\", 'ma', 'mightn', \"mightn't\", 'mustn',\\\n            \"mustn't\", 'needn', \"needn't\", 'shan', \"shan't\", 'shouldn', \"shouldn't\", 'wasn', \"wasn't\", 'weren', \"weren't\", \\\n            'won', \"won't\", 'wouldn', \"wouldn't\"]","ef9b20df":"# https:\/\/stackoverflow.com\/a\/47091490\/4084039\n\ndef decontracted(phrase):\n    # specific\n    phrase = re.sub(r\"won't\", \"will not\", phrase)\n    phrase = re.sub(r\"can\\'t\", \"can not\", phrase)\n\n    # general\n    phrase = re.sub(r\"n\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'re\", \" are\", phrase)\n    phrase = re.sub(r\"\\'s\", \" is\", phrase)\n    phrase = re.sub(r\"\\'d\", \" would\", phrase)\n    phrase = re.sub(r\"\\'ll\", \" will\", phrase)\n    phrase = re.sub(r\"\\'t\", \" not\", phrase)\n    phrase = re.sub(r\"\\'ve\", \" have\", phrase)\n    phrase = re.sub(r\"\\'m\", \" am\", phrase)\n    return phrase","1113a46a":"\n\ndef getProcessedData(txt_type, working_data):\n    preprocessed_data = []\n    # tqdm is for printing the status bar\n    \n    for sentance in tqdm(working_data[txt_type].values):\n        sent = decontracted(sentance)\n        sent = sent.replace('\\\\r', ' ')\n        sent = sent.replace('\\\\\"', ' ')\n        sent = sent.replace('\\\\n', ' ')\n        sent = re.sub('[^A-Za-z0-9]+', ' ', sent)\n        # https:\/\/gist.github.com\/sebleier\/554280\n        sent = ' '.join(e for e in sent.split() if e.lower() not in stopwords)\n        preprocessed_data.append(sent.lower().strip())\n        \n    return preprocessed_data","ccded0cd":"## Covered Above ...","03ee9c17":"def getCountDict(cat_type):\n    count_dict = {}\n    info_list = project_data[cat_type]\n    project_data.loc[project_data[cat_type].isnull(), cat_type] = 'nan'\n    \n    for phrase in info_list:\n        for data in phrase.split():\n            if data not in count_dict: count_dict[data] = 0\n            #elif data not in ['nan', np.nan]:\n            else:\n                count_dict[data] += 1\n            \n    return dict(sorted(count_dict.items(), key=lambda x: x[1]))","830be3fe":"from sklearn.feature_extraction.text import CountVectorizer\n\ndef getFitCAT_Vectorizer(working_data, cat_type, hstack_features):\n    '''\n    Fit on only train data.\n    '''\n    working_data.loc[working_data[cat_type].isnull(), cat_type] = 'nan'\n    #print (working_data.keys())\n    \n    if 1:\n        sorted_cat_dict = getCountDict(cat_type)\n        print ('Keys...', sorted_cat_dict.keys())\n        hstack_features += sorted_cat_dict.keys()\n        vectorizer = CountVectorizer(vocabulary=sorted_cat_dict.keys(), lowercase=False, binary=True)\n    \n    vectorizer.fit(working_data[cat_type].values)\n    return vectorizer\n    \ndef getVectorizeCategData(working_data, cat_type, data_type):\n    working_data.loc[working_data[cat_type].isnull(), cat_type] = 'nan'\n    \n    categories_one_hot = vectorizer.transform(working_data[cat_type].values)\n    #print(vectorizer.get_feature_names())\n    print(\"Shape of matrix after one hot encodig \",categories_one_hot.shape)\n    \n    return categories_one_hot","265c68b0":"def getFitBOW_Vectorizer(preprocessed_data):\n    vectorizer = CountVectorizer(min_df=10)\n    vectorizer.fit(preprocessed_data)\n    \n    return vectorizer\n\ndef getBOWVectorizeTxtData(preprocessed_data, vectorizer):\n    text_bow = vectorizer.transform(preprocessed_data)\n    print(\"Shape of matrix after one hot encodig \",text_bow.shape)\n    \n    return text_bow","1d49233e":"from sklearn.feature_extraction.text import TfidfVectorizer\n\ndef getFitTFIDF_Vectorizer(preprocessed_data):\n    vectorizer = TfidfVectorizer(min_df=10)\n    vectorizer.fit(preprocessed_data)\n    return vectorizer\n\ndef getTFIDFVectorizeTxtData(preprocessed_data, vectorizer):\n    text_tfidf = vectorizer.transform(preprocessed_data)\n    print(\"Shape of matrix after one hot encodig \",text_tfidf.shape)\n    return text_tfidf","20a5dbdb":"price_data = resource_data.groupby('id').agg({'price':'sum', 'quantity':'sum'}).reset_index()\nproject_data = pd.merge(project_data, price_data, on='id', how='left')","19c6450c":"from sklearn.preprocessing import Normalizer\nimport warnings \nwarnings.filterwarnings(\"ignore\") \n\ndef getFitNUM_Vectorizer(working_data, num_type):\n    '''\n    Fit on only train data.\n    '''\n    \n    num_scalar = Normalizer()\n    num_scalar.fit(working_data[num_type].values.reshape(-1,1)) # finding the mean and standard deviation of this data\n    return num_scalar\n\ndef getNUM_Vectors(working_data, num_type, num_scalar):\n    # Now standardize the data with above maen and variance.\n    num_standardized = num_scalar.transform(working_data[num_type].values.reshape(-1, 1))\n    #print(f\"Mean : {num_scalar.mean_[0]}, Standard deviation : {np.sqrt(num_scalar.var_[0])}\")\n    return num_standardized","abcd186a":"from scipy.sparse import hstack\n\ndef getMergedFeatures(working_data, merge_on):\n    valid_cols = []\n    for key, value in working_data.items():\n        if key in merge_on:\n            valid_cols.append(value)\n   \n    return hstack(tuple(valid_cols))","b3bfb921":"#Classes of X & project_data have almost same proportion.\nX = project_data[:10000]\n\ny = X['project_is_approved']\n\n# BOW matrix gave the best AUC value in NB Machine Learning model.\nset1_cols = ['school_state','clean_categories', 'clean_subcategories', 'project_grade_category', 'teacher_prefix',\n             'price', 'teacher_number_of_previously_posted_projects', \n             'essay_text_bow', 'project_title_text_bow']\n\nplt_title1 = 'BOW'","718587ee":"# Ordered dict will be used to ensure one to one correspondence between datapoints features and hstack_features.\n\nfrom collections import OrderedDict","288d094a":"data_dict = OrderedDict({})\ncols_dict = OrderedDict({'cat_cols': ['school_state','clean_categories', 'clean_subcategories', 'project_grade_category', 'teacher_prefix'],\n                 'num_cols': ['price', 'teacher_number_of_previously_posted_projects']\n            })\nhstack_features = []\n\nfor col_type, cols_name in cols_dict.items():\n    if col_type == 'cat_cols':\n        for cat_type in cols_name:\n            print (cat_type)\n            vectorizer = getFitCAT_Vectorizer(X, cat_type, hstack_features)\n            hot_encode = getVectorizeCategData(X, cat_type, vectorizer)\n            data_dict[cat_type] = hot_encode\n    else:\n        for num_type in cols_name:\n            vectorizer = getFitNUM_Vectorizer(X, num_type)\n            hstack_features.append(num_type)\n            num_vectors = getNUM_Vectors(X, num_type, vectorizer)\n            data_dict[num_type] = num_vectors\n        ","e15da8d3":"for col_type in ['essay','project_title']:\n    preprocessed_data = getProcessedData(col_type, X)\n    vectorizer_bog = getFitBOW_Vectorizer(preprocessed_data)\n    text_bow = getBOWVectorizeTxtData(preprocessed_data, vectorizer_bog)\n    data_dict['%s_text_bow'%col_type] = text_bow\n    \n    if col_type == \"essay\":\n        essay_hot_info = (vectorizer_bog.get_feature_names(), text_bow.toarray())\n           \n    hstack_features += vectorizer_bog.get_feature_names()","db062cdb":"# Reference: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_selection.SelectKBest.html\n# Reference: chi2 isn't working due to negative values; used https:\/\/stackoverflow.com\/questions\/25792012\/feature-selection-using-scikit-learn\n\nfrom sklearn.feature_selection import SelectKBest, f_classif \n\ndata_matrix = getMergedFeatures(data_dict, set1_cols)\nprint (data_matrix.shape, len(hstack_features))\n\nselector = SelectKBest(f_classif, k=5000)\nX_new = selector.fit_transform(data_matrix, y)","55132d5a":"from wordcloud import WordCloud\n\ndef getCorupusDict(essay_hot_info, y_pred):\n    one_hot_featr, one_hot_enc = essay_hot_info\n    one_hot_enc_cols = one_hot_enc.shape[1]\n    corpus_dict = {}\n    i = 0\n    for each_x in tqdm(y_pred):\n        if each_x not in corpus_dict: corpus_dict[each_x] = ''\n        for j in range(one_hot_enc_cols):\n            if one_hot_enc[i][j] >= 0.5:\n                corpus_dict[each_x] = \"%s %s\"%(corpus_dict[each_x], one_hot_featr[j].strip())\n        i += 1\n    \n    return corpus_dict\n\ndef plotWordCloud(word_corpus, i, algo_title):\n    wordcloud = WordCloud(width = 800, height = 800, \n                    background_color ='white', \n                    stopwords = stopwords,\n                    collocations = False,\n                    min_font_size = 10).generate(word_corpus) \n    \n    # plot the WordCloud image                        \n    plt.figure(figsize = (8, 8), facecolor = None) \n    plt.imshow(wordcloud) \n    plt.axis(\"off\") \n    plt.title('The word cloud with essay text for cluster no. %s for algorithm- %s'%(i, algo_title))\n    #plt.tight_layout(pad = 0) \n\n    plt.show() ","83406e16":"from sklearn.cluster import KMeans\ndef getLosses(hypers, data_matrix):\n    obj_loss = []\n    \n    for k in hypers:\n        kmeans = KMeans(n_clusters=k, random_state=0, n_jobs=-1).fit(data_matrix)\n        obj_loss.append(kmeans.inertia_)\n        \n    return obj_loss\n\ndef plotGraph(hypers, obj_loss):\n    plt.plot(hypers, obj_loss, label='knee')\n    \n    plt.title(\"Plot to find best K using elbow-knee method\")\n    plt.xlabel('number of clusters (K)')\n    plt.ylabel('loss value')\n    plt.legend()\n    ","fea949dd":"algo_title = 'Kmeans' \nhypers = [4, 9, 16, 25, 36]\nlosses = getLosses(hypers, X_new)\nplotGraph(hypers, losses)","b8c931d0":"kmeans = KMeans(n_clusters=15, random_state=0, n_jobs=-1).fit(X_new)\ncorpus_dict = getCorupusDict(essay_hot_info, kmeans.labels_)\ncorpus_dict = dict(sorted(list(corpus_dict.items()), key=lambda x: x[0]))\nfor key, val in corpus_dict.items():\n    plotWordCloud(val, key, algo_title)","2df5f80b":"from prettytable import PrettyTable\nfrom collections import Counter\n\ntable = PrettyTable()\ntable.field_names = [\"Cluster No\", \"No. of words in cluster\", \"Most frequent words\"]\n\nfor key, val in corpus_dict.items():\n    freq_dict = dict(sorted(list(Counter(val.split()).items()), key=lambda x: x[1], reverse=True))\n    table.add_row([key, len(val.split()), \",\".join(list(freq_dict.keys())[:10])])\n\nprint (table) ","b138d886":"import scipy.cluster.hierarchy as shc\n\nX_new_agg = X_new.todense()[:5000]\n\nalgo_title = 'Agglomerative Clustering'\nplt.figure(figsize=(10, 7))  \nplt.title(\"Dendogram\")  \ndend = shc.dendrogram(shc.linkage(X_new_agg, method='ward'))  ","ec95fb0f":"from sklearn.cluster import AgglomerativeClustering\n\ncluster = AgglomerativeClustering(n_clusters=3, affinity='euclidean', linkage='ward')  \ncluster.fit_predict(X_new_agg)  \n\ncorpus_dict = getCorupusDict(essay_hot_info, cluster.labels_)\ncorpus_dict = dict(sorted(list(corpus_dict.items()), key=lambda x: x[0]))\nfor key, val in corpus_dict.items():\n    plotWordCloud(val, key, algo_title)","40c2870e":"table = PrettyTable()\ntable.field_names = [\"Cluster No\", \"No. of words in cluster\", \"Most frequent words\"]\n\nfor key, val in corpus_dict.items():\n    freq_dict = dict(sorted(list(Counter(val.split()).items()), key=lambda x: x[1], reverse=True))\n    table.add_row([key, len(val.split()), \",\".join(list(freq_dict.keys())[:10])])\n\nprint (table) ","e469137b":"from sklearn.neighbors import KDTree\n\nalgo_title = 'DBSCAN Clustering'\nminPts = 8\ntree = KDTree(X_new_agg)\n\nidx = 0\nepss = []\nfor x_i in tqdm(X_new_agg):\n    epss.append(tree.query(X_new_agg[idx], return_distance=True, k=minPts)[0][0][-1])\n    idx += 1\nepss.sort()\n\nplt.plot(range(0,5000), epss[:5000])\nplt.title(\"Plot to find best eps using elbow-knee method\")\nplt.xlabel('Integers')\nplt.ylabel('eps-values')\nplt.legend('kneee')","22b7125c":"from sklearn.cluster import DBSCAN\n\ncluster = DBSCAN(eps=19, min_samples=minPts).fit(X_new_agg)\ncorpus_dict = getCorupusDict(essay_hot_info, cluster.labels_)\nprint (\"number of clusters gotten:\", len(corpus_dict))","cca9e954":"corpus_dict = dict(sorted(list(corpus_dict.items()), key=lambda x: x[0]))\nfor key, val in corpus_dict.items():\n    plotWordCloud(val, key, algo_title)","39643fc2":"table = PrettyTable()\ntable.field_names = [\"Cluster No\", \"No. of words in cluster\", \"Most frequent words\"]\n\nfor key, val in corpus_dict.items():\n    freq_dict = dict(sorted(list(Counter(val.split()).items()), key=lambda x: x[1], reverse=True))\n    table.add_row([key, len(val.split()), \",\".join(list(freq_dict.keys())[:10])])\n\nprint (table) ","7efb7f38":"<h2>$2.4$ Dimensionality Reduction on the selected features & defining Wordcloud functions <\/h2>","2c8fba85":"**Observations:**","3fc941cd":"### $1.5.3$ Vectorizing Numerical features\n","98d9bfd1":"## $1.2b$ preprocessing of `project_subject_subcategories`\n","effed426":"Selecting optimal radius $\\epsilon=19$ after analysing the plot. **Once selected, plotting wordcloud for each cluser.**","031db620":"**Observations** - ","b20e5a1e":"Selecting total clusters $=15$ after analysing the plot. **Once selected, plotting wordcloud for each cluser.**","8e2fa5a2":"## $1.3$ Text preprocessing","5351d72f":"- <font color='red'>step 1<\/font>: Choose any vectorizer (data matrix) that you have worked in any of the assignments, and got the best AUC value.\n- <font color='red'>step 2<\/font>: Choose any of the <a href='https:\/\/scikit-learn.org\/stable\/modules\/feature_selection.html'>feature selection<\/a>\/<a href='https:\/\/scikit-learn.org\/stable\/modules\/decomposition.html'>reduction algorithms<\/a> ex: selectkbest features, pretrained word vectors, model based feature selection etc and reduce the number of features to 5k features\n- <font color='red'>step 3<\/font>: Apply all three kmeans, Agglomerative clustering, DBSCAN\n    - <strong>K-Means Clustering:<\/strong> <br>\n        \u25cf Find the best \u2018k\u2019 using the elbow-knee method (plot k vs inertia_)<br>\n    - <strong>Agglomerative Clustering: <\/strong><br>\n        \u25cf Apply <a href='https:\/\/stackabuse.com\/hierarchical-clustering-with-python-and-scikit-learn\/'>agglomerative algorithm<\/a> and try a different number of clusters like 2,5 etc. <br>\n        \u25cf You can take less data points (as this is very computationally expensive one) to perform hierarchical clustering because they do take a considerable amount of time to run. <br>\n    - <strong>DBSCAN Clustering: <\/strong><br>\n        \u25cf Find the best \u2018eps\u2019 using the <a href='https:\/\/stackoverflow.com\/a\/48558030\/4084039'>elbow-knee method<\/a>.<br>\n        \u25cf You can take a smaller sample size for this as well.\n- <font color='red'>step 4<\/font>: Summarize each cluster by manually observing few points from each cluster.\n- <font color='red'>step 5<\/font>: You need to plot the word cloud with essay text for each cluster for each of algorithms mentioned in <font color='red'>step 3<\/font>.","2471013b":"$\\rightarrow$ Working on $5k$ data points.","1fc9a2b2":"<h2>$2.2$ Make Data Model Ready: encoding numerical, categorical features<\/h2>","f1a2c0ac":"#### 1.5.2.2 TFIDF vectorizer","4c58113b":"<h2>$2.1$ Choose the best data matrix on which you got the best AUC<\/h2>","d810b912":"## $1.2c$ preprocessing of `project_grade_category`","63962a45":"## $1.1$ Reading Data","3a415af6":"**Observations:**","1e05ccab":"#### $1.5.2.1$ Bag of words","0468c2e3":"### $1.5.2$ Vectorizing Text data","e15120ae":"### $1.5.1$ Vectorizing Categorical data","6daaef24":"### $1.5.4$ Merging all the above features","cc5886f0":"<h1>$2.$ Clustering <\/h1>","d8694edf":"$\\rightarrow$ Working on $10k$ data points.","aea5d3cc":"## $1.5$ Preparing data for models\nwe are going to consider\n\n       - school_state : categorical data\n       - clean_categories : categorical data\n       - clean_subcategories : categorical data\n       - project_grade_category : categorical data\n       - teacher_prefix : categorical data\n       \n       - project_title : text data\n       - text : text data\n       - project_resource_summary: text data (optinal)\n       \n       - quantity : numerical (optinal)\n       - teacher_number_of_previously_posted_projects : numerical\n       - price : numerical","5f0d26bd":"<h2>$2.3$ Make Data Model Ready: encoding eassay, and project_title<\/h2>","fc5ecafa":"<h2>$2.5$ Apply Kmeans<\/h2>","fee5b55d":"## $1.2a$ preprocessing of `project_subject_categories`","74ce055e":"Considering minPts $= log_e{\\|size\\ of\\ data set\\|} = \\lfloor log_e(5000) \\rfloor = 8$ (Reference [here](https:\/\/stackoverflow.com\/questions\/12893492\/choosing-eps-and-minpts-for-dbscan-r\/48558030#48558030))","c530f35a":"<h2><font color='red'> $1.4$ Preprocessing of `project_title`<\/font><\/h2>","859fb1b7":"Selecting total clusters $=3$ after analysing the dendogram. **Once selected, plotting wordcloud for each cluser.**","15801a26":"# Assignment $10$: Clustering","5c090a27":"<h2>$2.6$ Apply AgglomerativeClustering<\/h2>","1bc8c6ca":"<h2>$2.7$ Apply DBSCAN<\/h2>","c545a453":"$\\rightarrow$ Working on $5k$ data points."}}