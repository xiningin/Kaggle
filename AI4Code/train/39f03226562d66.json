{"cell_type":{"103843df":"code","5bfe2187":"code","b0bb862b":"code","40ae843f":"code","b6a640a8":"code","df631485":"code","f9974b39":"code","4ff5cb81":"code","595d7183":"code","11876fb2":"code","ab623357":"code","a8e4be07":"code","fefedf0b":"code","6c2b2628":"code","2b7fda00":"code","8e94ac00":"code","82cdd619":"code","8e9c23ce":"code","d2717c10":"code","cfe884cf":"code","c45a7a06":"code","b330b3f9":"code","29c338f7":"code","b3ea987d":"code","361c4228":"code","8b33e5ac":"code","63d1b2fa":"code","570d80c9":"code","1767618c":"markdown","2f3a9d49":"markdown","c3f67045":"markdown","3cfa69f2":"markdown","5d56bef0":"markdown","b908783e":"markdown","86b2502d":"markdown","b682bc3c":"markdown","e0ff0346":"markdown"},"source":{"103843df":"import torch\nimport torchvision\nfrom torch.utils.data import DataLoader\nfrom torchvision import datasets\nimport numpy as np\nimport pandas as pd\nimport os\nworkers = 0 if os.name == 'nt' else 4","5bfe2187":"device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')\nprint(device)","b0bb862b":"!git clone https:\/\/github.com\/timesler\/facenet-pytorch facenet_pytorch","40ae843f":"from facenet_pytorch import MTCNN, InceptionResnetV1","b6a640a8":"mtcnn = MTCNN(\n    image_size=160, margin=0, min_face_size=20,\n    thresholds=[0.6, 0.7, 0.7], factor=0.709, post_process=True,\n    device=device\n)","df631485":"net = InceptionResnetV1(pretrained='vggface2').eval().to(device)","f9974b39":"def collate_fn(x):\n    return x[0]\n\ndataset = datasets.ImageFolder('facenet_pytorch\/data\/test_images')\ndataset.idx_to_class = {i:c for c, i in dataset.class_to_idx.items()}\nloader = DataLoader(dataset, collate_fn=collate_fn, num_workers=workers)","4ff5cb81":"print(dataset.idx_to_class)","595d7183":"aligned = []\nnames = []\nfor x, y in loader:\n    x_aligned, prob = mtcnn(x, return_prob=True)\n    if x_aligned is not None:\n        print('Face detected with probability: {:8f}'.format(prob))\n        aligned.append(x_aligned)\n        names.append(dataset.idx_to_class[y])","11876fb2":"print(len(aligned))\nprint(names)","ab623357":"aligned = torch.stack(aligned).to(device)\nembeddings = net(aligned).detach().cpu()","a8e4be07":"print(len(embeddings))","fefedf0b":"print(embeddings[0].shape)","6c2b2628":"dists = [[(e1 - e2).norm().item() for e2 in embeddings] for e1 in embeddings]\nprint(pd.DataFrame(dists, columns=names, index=names))","2b7fda00":"from torchvision import transforms\nimport matplotlib.pyplot as plt","8e94ac00":"mtcnn = MTCNN(keep_all=False)","82cdd619":"img = plt.imread(\"facenet_pytorch\/data\/test_images\/angelina_jolie\/1.jpg\")\nplt.axis('off')\npic = plt.imshow(img)","8e9c23ce":"x_test, prob = mtcnn(img, return_prob=True)\nprint(prob)\nprint(x_test.shape)","d2717c10":"x_aligned=[]\nx_aligned.append(x_test)\ntest_aligned = torch.stack(x_aligned).to(device)\ntest_embeddings = net(test_aligned).detach().cpu()","cfe884cf":"print(len(embeddings), len(test_embeddings))","c45a7a06":"e1 = test_embeddings\ndists = [(e1 - e2).norm().item() for e2 in embeddings]\nprint(dists)","b330b3f9":"print(names[np.argmin(dists)])","29c338f7":"import urllib\nfrom PIL import Image\nimg = Image.open(urllib.request.urlopen(\"https:\/\/i.ytimg.com\/vi\/ITP9_kH4MFI\/sddefault.jpg\"))\nplt.axis('off')\nplt.imshow(img)\nplt.show()","b3ea987d":"mtcnn = MTCNN(keep_all=True)","361c4228":"x_test, prob = mtcnn(img, return_prob=True)\nprint(prob)\nprint(x_test.shape)","8b33e5ac":"test_aligned = x_test.to(device)\ntest_embeddings = net(test_aligned).detach().cpu()","63d1b2fa":"dists = [[(e1 - e2).norm().item() for e2 in embeddings] for e1 in test_embeddings]\ntest_no=[]\n[test_no.append(i) for i in range(len(test_embeddings))]\nprint(pd.DataFrame(dists, columns=names, index=test_no))","570d80c9":"dists = [[(e1 - e2).norm().item() for e2 in embeddings] for e1 in test_embeddings]\nfor dist in dists:\n    if any(e<1 for e in dist):\n        print(names[np.argmin(dist)])\n    else:\n        print('unknown')","1767618c":"## Test : single face picture","2f3a9d49":"## Repro [Github](https:\/\/github.com\/timesler\/facenet-pytorch)","c3f67045":"# FaceNet PyTorch","3cfa69f2":"### calculate image embeddings","5d56bef0":"## Test : multiple faces picture","b908783e":"## perform NTCNN face detection","86b2502d":"## Prepare Datasets","b682bc3c":"### print distance matrix for classes","e0ff0346":"## Evaluation"}}