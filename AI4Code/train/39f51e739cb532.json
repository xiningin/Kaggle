{"cell_type":{"a09d141f":"code","93d6cc74":"code","57c28102":"code","637c9251":"code","f8992f35":"code","eca8c688":"code","5add4c28":"code","7c22dccd":"code","85fbe12b":"code","e056917e":"code","ac290ee2":"code","1e25cf1a":"code","8293e556":"code","5f6cbc56":"markdown","687e1c86":"markdown","98415b97":"markdown","6e68b4b4":"markdown","63893ebc":"markdown","54f78650":"markdown","a4430b0f":"markdown","ddb25d9f":"markdown","2adce639":"markdown","36005f86":"markdown","299073af":"markdown","4ca47d9f":"markdown","9e735f03":"markdown","1fc18e26":"markdown","e8e32cd9":"markdown","22d6db26":"markdown","0d73d726":"markdown","f67dfa94":"markdown","7cfaf82d":"markdown","a917ac76":"markdown","1d95e593":"markdown"},"source":{"a09d141f":"import os\nimport torch\nimport torchvision\nimport numpy as np\nimport pandas as pd\nimport torch.nn as nn\nimport torch.optim as optim\nimport matplotlib.pyplot as plt\nimport torch.nn.functional as F\nfrom PIL import Image\nfrom torchvision import transforms, datasets\nfrom torch.utils.data import Dataset, DataLoader","93d6cc74":"# training batches of our network\nEPOCHS = 10\n# size of each batch\nBATCH_SIZE = 512\n\nDEVICE = (\"cuda\" if torch.cuda.is_available() else \"cpu\")\nclass_names = ['T-shirt\/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n\nprint(torch.__version__)\nprint(DEVICE)","57c28102":"train_csv = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_train.csv')\ntest_csv = pd.read_csv('\/kaggle\/input\/fashionmnist\/fashion-mnist_test.csv')\n\n\nprint(train_csv.shape)\nprint(test_csv.shape)","637c9251":"print(train_csv.info())\nprint(train_csv.head())","f8992f35":"class FashionDataset(Dataset):\n    def __init__(self, data, transform=None):        \n        self.fashion_MNIST = list(data.values)\n        self.transform = transform\n        \n        label, image = [], []\n        \n        for i in self.fashion_MNIST:\n            label.append(i[0])\n            image.append(i[1:])\n        self.labels = np.asarray(label)\n        self.images = np.asarray(image).reshape(-1, 28, 28).astype('float32')\n        \n    def __len__(self):\n        return len(self.images)\n    \n    def __getitem__(self, idx):\n        label = self.labels[idx]\n        image = self.images[idx]      \n        \n        if self.transform is not None:\n            # transfrom the numpy array to PIL image before the transform function\n            pil_image = Image.fromarray(np.uint8(image)) \n            image = self.transform(pil_image)\n            \n        return image, label","eca8c688":"AlexTransform = transforms.Compose([\n    transforms.Resize((227, 227)),\n    transforms.ToTensor(),\n    transforms.Normalize((0.1307,), (0.3081,))\n])","5add4c28":"train_loader = DataLoader(\n    FashionDataset(train_csv, transform=AlexTransform), \n    batch_size=BATCH_SIZE, shuffle=True)\n\ntest_loader = DataLoader(\n    FashionDataset(test_csv, transform=AlexTransform), \n    batch_size=BATCH_SIZE, shuffle=True)","7c22dccd":"# helper function to show an image\ndef matplotlib_imshow(img):\n    img = img.mean(dim=0)\n    img = img \/ 2 + 0.5     # unnormalize\n    npimg = img.numpy()\n    plt.imshow(npimg, cmap=\"Greys\")\n\n# get some random training images\ndataiter = iter(train_loader)\nimages, labels = dataiter.next()\n\n# creat grid of images\nimg_grid = torchvision.utils.make_grid(images[0])\n\n# show images & labels\nmatplotlib_imshow(img_grid)\nprint(class_names[labels[0]])","85fbe12b":"class fasion_mnist_alexnet(nn.Module):  \n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Sequential(\n            nn.Conv2d(in_channels=1, out_channels=96, kernel_size=11, stride=4, padding=0),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=3, stride=2)\n        )\n        self.conv2 = nn.Sequential(\n            nn.Conv2d(96, 256, 5, 1, 2),\n            nn.ReLU(),\n            nn.MaxPool2d(3, 2)\n        )\n        self.conv3 = nn.Sequential(\n            nn.Conv2d(256, 384, 3, 1, 1),\n            nn.ReLU()\n        )\n        self.conv4 = nn.Sequential(\n            nn.Conv2d(384, 384, 3, 1, 1),\n            nn.ReLU()\n        )\n        self.conv5 = nn.Sequential(\n            nn.Conv2d(384, 256, 3, 1, 1),\n            nn.ReLU(),\n            nn.MaxPool2d(3, 2)\n        )\n\n        self.fc1 = nn.Linear(256 * 6 * 6, 4096)\n        self.fc2 = nn.Linear(4096, 4096)\n        self.fc3 = nn.Linear(4096, 10)\n\n    def forward(self, x):\n        out = self.conv1(x)\n        out = self.conv2(out)\n        out = self.conv3(out)\n        out = self.conv4(out)\n        out = self.conv5(out)\n        out = out.view(out.size(0), -1)\n\n        out = F.relu(self.fc1(out))  # 256*6*6 -> 4096\n        out = F.dropout(out, 0.5)\n        out = F.relu(self.fc2(out))\n        out = F.dropout(out, 0.5)\n        out = self.fc3(out)\n        out = F.log_softmax(out, dim=1)\n\n        return out\n","e056917e":"model = fasion_mnist_alexnet().to(DEVICE)\ncriterion = F.nll_loss\noptimizer = optim.Adam(model.parameters())","ac290ee2":"def train(model, device, train_loader, optimer, epoch):\n    model.train()\n    for batch_idx, (data, target) in enumerate(train_loader):\n        target = target.type(torch.LongTensor)\n        data, target = data.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = model(data)\n        loss = criterion(output, target)\n        loss.backward()\n        optimizer.step()\n        if (batch_idx + 1) % 30 == 0:\n            print(\"Train Epoch:{} [{}\/{} ({:.0f}%)]\\tLoss: {:.6f}\".format(\n                epoch, batch_idx * len(data), len(train_loader.dataset),\n                100. * batch_idx \/ len(train_loader), loss.item()))","1e25cf1a":"def test(model, device, test_loader):\n    model.eval()\n    test_loss = 0\n    correct = 0\n    with torch.no_grad():\n        for data, target in test_loader:\n            data, target = data.to(device), target.to(device)\n            output = model(data)\n            test_loss += criterion(output, target, reduction='sum').item()\n            pred = output.max(1, keepdim=True)[1]\n            correct += pred.eq(target.view_as(pred)).sum().item()\n\n        test_loss \/= len(test_loader.dataset)  # loss\u4e4b\u548c\u9664\u4ee5data\u6570\u91cf -> mean\n        print(\"\\nTest set: Average loss: {:.4f}, Accuracy: {}\/{} ({:.0f}%)\\n\".format(\n            test_loss, correct, len(test_loader.dataset), 100. * correct \/ len(test_loader.dataset)))\n        print('='*50)\n","8293e556":"for epoch in range(1, EPOCHS+1):\n    train(model, DEVICE, train_loader, optimizer, epoch)\n    test(model, DEVICE, test_loader)","5f6cbc56":"Because the input size of AlexNet is $227*227$, and the image size of Fashion-MNIST is $28*28$, so we need to resize the image in the transform function\n> Since `transforms.Resize()` only works to the PIL Image,we transform the numpy array to PIL Image above","687e1c86":"# model\n","98415b97":"Here are the categories in the Fashion-MNIST\n\n|Label | Class |\n|-|-|\n|0|\tT-shirt\/top|\n|1|\tTrouser|\n|2|\tPullover|\n|3|\tDress|\n|4|\tCoat|\n|5|\tSandal|\n|6|\tShirt|\n|7|\tSneaker|\n|8|\tBag|\n|9|\tAnkle boot|\n\n","6e68b4b4":"To build our own dataset, need to create a class that inherits from the `Dataset`. Besides, function `get_item()` & `len()` must be defined at least\n\n- `get_item()` return the specified image and its label\n- `len()` return the number of dataset","63893ebc":"## Show images","54f78650":"# AlexNet","a4430b0f":"## train funation","ddb25d9f":"## Transform","2adce639":"After 10 epochs, we get 92% accuracy. I also run 20 epochs on the Colab but still 92% accuracy. \n\nThe Net completely from AlexNet, this maybe a bit overkill but I just use it to learn. \n\nHappy to get some suggests about the net or notebook!","36005f86":"## Dataset","299073af":"As the output, the first row is the label of each image, and each image has 784 pixels","4ca47d9f":"# Load data","9e735f03":"# Ready to work","1fc18e26":"# Begin to Train","e8e32cd9":"![](https:\/\/i.loli.net\/2020\/02\/17\/xd6oNRpWSK1cZy2.png)","22d6db26":"# Before\nIt's my first time to creat a neural network, please correct me if there is anything wrong in the notebook","0d73d726":"## DataLoader","f67dfa94":"# About Fashion MNIST","7cfaf82d":"## test function\n","a917ac76":"Define some global variables","1d95e593":"There are two ways to laod the Fashion-MNIST dataset:\n\n* use the dataset given in the `datasets.FashionMNIST`\n* use raw data \n\nHere I use the data on Kaggle, so we need to build the `dataset`\n\nFirstly, import the '.csv' files with `pd.read_csv`"}}