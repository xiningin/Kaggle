{"cell_type":{"487bd17d":"code","4cfd7004":"code","0b475314":"code","f7acd879":"code","fa9ee0a5":"code","df93b914":"code","8bbbd24c":"code","c864f21a":"code","e4ee7539":"code","57fc8119":"code","f1b4360d":"code","15854700":"code","305ee231":"code","7607d0ee":"code","697f5eb9":"code","11efc0dc":"code","113e8fc3":"code","f032a9c2":"code","89381ed1":"code","f7a55187":"code","64041c6e":"code","aaf2d70c":"code","fa0f35a1":"code","badb4669":"code","807f3013":"code","011f415f":"code","19887275":"code","e1ad734a":"code","62430e3c":"code","82e67adc":"code","9557fdd3":"code","f4ca1836":"code","92562ba2":"code","7728aebe":"code","dfb8b1e6":"markdown","90fe4b9a":"markdown","27d6e470":"markdown","ed0e47ed":"markdown","1a601d5b":"markdown","35436813":"markdown","e5e3491e":"markdown","8934ba3c":"markdown","cda09558":"markdown","fa4c5631":"markdown","625ddfff":"markdown","f3a38b6a":"markdown","60406512":"markdown","e67cb4a9":"markdown","e9edb1a8":"markdown","ff004ea0":"markdown","90844497":"markdown","198464c5":"markdown"},"source":{"487bd17d":"!ls -sSh ..\/input\/","4cfd7004":"import datetime\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import font_manager as fm\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom lightfm import LightFM\nfrom lightfm.evaluation import auc_score\nfrom scipy.sparse import coo_matrix\nfrom sklearn import preprocessing\n\nsns.set()","0b475314":"events = pd.read_csv('..\/input\/events.csv')\nprint('Shape:', events.shape)\nprint('Columns', events.columns.tolist())\nevents.head()","f7acd879":"data = events.event.value_counts()","fa9ee0a5":"labels = data.index\nsizes = data.values\nexplode = (0, 0.1, 0.2)\nfig, ax = plt.subplots(figsize=(6,6))\ncolors = ['b', 'g', 'r']\n\npatches, texts, autotexts = ax.pie(sizes, labels=labels, explode=explode, autopct='%1.2f%%', shadow=False, startangle=90, colors=colors)\n\nproperties = fm.FontProperties()\nproperties.set_size('x-large')\n# font size include: xx-small, x-small, small, medium, large, x-large, xx-large, larger, smaller, None\n\nplt.setp(autotexts, fontproperties=properties)\nplt.setp(texts, fontproperties=properties)\n\nax.axis('equal')\nplt.show()","df93b914":"items = events.itemid.value_counts()\nfor i in [2, 10, 50, 100, 1000]:\n    print(f'Items that appear less than {i:>4} times:\\\n          {round((items < i).mean() * 100, 2)}%')\n\nitems.head(10)","8bbbd24c":"plt.figure(figsize=(16, 9))\nplt.hist(items.values, bins=50, log=True)\nplt.xlabel('Number of times item appeared', fontsize=16)\nplt.ylabel('log(Count of displays with item)', fontsize=16)\nplt.show()","c864f21a":"visitors = events.visitorid.value_counts()\nfor i in [2, 5, 10, 15]:\n    print(f'Visitors that appear less than {i:>2} times:\\\n          {round((visitors < i).mean() * 100, 2):.02f}%')\n\nvisitors.head(10)","e4ee7539":"plt.figure(figsize=(16, 9))\nplt.hist(visitors.values, bins=50, log=True)\nplt.xlabel('Number of times visitor appeared', fontsize=16)\nplt.ylabel('log(Count of displays with visitor)', fontsize=16)\nplt.show()","57fc8119":"hour = lambda x: (datetime.datetime.fromtimestamp(x)-datetime.timedelta(hours=5)).hour\ntimestamp = events[['timestamp', 'event']].copy()\ntimestamp['timestamp'] = timestamp.timestamp \/ 1000\ntimestamp['hour'] = timestamp['timestamp'].apply(hour)\n\ntimestamp.head()","f1b4360d":"plt.figure(figsize=(12,6))\ntimestamp.hour.hist(bins=np.linspace(-0.5, 23.5, 25), alpha=1, density=True)\nplt.xlim(-0.5, 23.5)\nplt.xlabel(\"Hour of Day\")\nplt.ylabel(\"Fraction of Events\")\nplt.show()","15854700":"properties = pd.concat([pd.read_csv('..\/input\/item_properties_part1.csv'), pd.read_csv('..\/input\/item_properties_part2.csv')])\nprint('Shape:', properties.shape)\nprint('Columns', properties.columns.tolist())\nproperties.head()","305ee231":"properties = properties.loc[properties.property.isin(['categoryid', 'available']), :]\nprint('Shape:', properties.shape)\nproperties.head()","7607d0ee":"categoryid = properties[properties.property=='categoryid'].drop_duplicates('itemid', keep='first')\navailable = properties[properties.property=='available']","697f5eb9":"categoryid.head()","11efc0dc":"categories = categoryid.value.value_counts()\ncategories.head(10)","113e8fc3":"for i in [2, 10, 50, 100, 500, 1000, 5000]:\n    print(f'Categories that appear less than {i:>4} times:\\\n          {round((categories < i).mean() * 100, 2)}%')","f032a9c2":"plt.figure(figsize=(16, 9))\nplt.hist(categories.values, bins=50, log=True)\nplt.xlabel('Number of times categories appeared', fontsize=16)\nplt.ylabel('log(Count of displays with category)', fontsize=16)\nplt.show()","89381ed1":"item_category = categoryid[['itemid', 'value']]\nitem_category.columns = ['itemid', 'categoryid']\nitem_category.head()","f7a55187":"available.head()","64041c6e":"category = pd.read_csv('..\/input\/category_tree.csv').dropna()\nprint('Shape:', category.shape)\nprint('Columns', category.columns.tolist())\ncategory.head()","aaf2d70c":"category_parent_dict = category.set_index('categoryid').T.to_dict('list')\n\npd.options.mode.chained_assignment = None\nitem_category['parentid'] = item_category.categoryid.apply(lambda x: int(category_parent_dict.get(int(x), [x])[0]))\n\nitem_category.head()","fa0f35a1":"# Format the timestamp as a date and arrange it in chronological order.\n# \u5c06\u65f6\u95f4\u6233\u683c\u5f0f\u5316\u4e3a\u65e5\u671f\uff0c\u5e76\u4e14\u6309\u65f6\u95f4\u987a\u5e8f\u6392\u5217\u3002\nevents = events.assign(date=pd.Series(datetime.datetime.fromtimestamp(i\/1000).date() for i in events.timestamp))\nevents = events.sort_values('date').reset_index(drop=True)\nevents = events[['visitorid','itemid','event', 'date']]","badb4669":"events.head()","807f3013":"events.tail()","011f415f":"start_date = '2015-5-3'\nend_date = '2015-5-18'\nfd = lambda x: datetime.datetime.strptime(x, '%Y-%m-%d').date()\nevents = events[(events.date >= fd(start_date)) & (events.date <= fd(end_date))]","19887275":"# Divide training sets and test sets\n# \u5212\u5206\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\nsplit_point = np.int(np.round(events.shape[0]*0.8))\nevents_train = events.iloc[0:split_point]\nevents_test = events.iloc[split_point::]\nevents_test = events_test[(events_test['visitorid'].isin(events_train['visitorid'])) & (events_test['itemid'].isin(events_train['itemid']))]","e1ad734a":"id_cols=['visitorid','itemid']\ntrans_cat_train=dict()\ntrans_cat_test=dict()\n\nfor k in id_cols:\n    cate_enc=preprocessing.LabelEncoder()\n    trans_cat_train[k]=cate_enc.fit_transform(events_train[k].values)\n    trans_cat_test[k]=cate_enc.transform(events_test[k].values)","62430e3c":"ratings = dict()\n\ncate_enc=preprocessing.LabelEncoder()\nratings['train'] = cate_enc.fit_transform(events_train.event)\nratings['test'] = cate_enc.transform(events_test.event)","82e67adc":"n_users=len(np.unique(trans_cat_train['visitorid']))\nn_items=len(np.unique(trans_cat_train['itemid']))","9557fdd3":"rate_matrix = dict()\nrate_matrix['train'] = coo_matrix((ratings['train'], (trans_cat_train['visitorid'], trans_cat_train['itemid'])), shape=(n_users,n_items))\nrate_matrix['test'] = coo_matrix((ratings['test'], (trans_cat_test['visitorid'], trans_cat_test['itemid'])), shape=(n_users,n_items))","f4ca1836":"model = LightFM(no_components=5, loss='warp')\nmodel.fit(rate_matrix['train'], epochs=100, num_threads=8)","92562ba2":"auc_score(model, rate_matrix['train'], num_threads=8).mean()","7728aebe":"auc_score(model, rate_matrix['test'], num_threads=8).mean()","dfb8b1e6":"## Visitors\nUnique id of the visitor","90fe4b9a":"It doesn't seem to make sense.\n\n\u8fd9\u4e9b\u6570\u636e\u770b\u8d77\u6765\u6beb\u65e0\u610f\u4e49\uff0c\u6211\u4e0d\u77e5\u9053\u5b83\u4ee3\u8868\u4ec0\u4e48\u3002","27d6e470":"## Items\nUnique id of the item","ed0e47ed":"## Events\n\nUsers' click stream data","1a601d5b":"## Category Tree","35436813":"The timestamp is UTC standard time, while the US 48 states have four time zones UTC-5 to UTC-8, assuming a UTC-5 time zone.\n\n\u65f6\u95f4\u6233\u662fUTC\u6807\u51c6\u65f6\u95f4\uff0c\u800c\u7f8e\u56fd\u672c\u571f48\u5dde\u5171\u6709\u56db\u4e2a\u65f6\u533aUTC-5\u5230UTC-8\uff0c\u8fd9\u91cc\u5047\u8bbe\u91c7\u7528UTC-5\u65f6\u533a\u3002","e5e3491e":"All of them had been hashed excluding \"categoryid\" and \"available\", so most of the data doesn't make sense.\n\n\u5927\u90e8\u5206\u6570\u636e\u90fd\u662f\u65e0\u610f\u4e49\u7684\uff0c\u6211\u6253\u7b97\u5220\u6389\u5b83\u4eec\u3002","8934ba3c":"## Modeling by LightFM\n\n\u901a\u8fc7LightFM\u5efa\u7acb\u63a8\u8350\u7cfb\u7edf\u6a21\u578b","cda09558":"# Retailrocket EDA","fa4c5631":"Here, we got the relationship of **itemid - categoryid - parentid**.\n\n\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u83b7\u5f97\u4e86**\u5546\u54c1 - \u7c7b\u76ee - \u7236\u7c7b\u76ee**\u7684\u5173\u7cfb\u3002","625ddfff":"The time of viewing, adding to cart, purchasing, etc. is basically in line with daily routine.\n\n\u6d4f\u89c8\u3001\u6dfb\u52a0\u8d2d\u7269\u8f66\u3001\u8d2d\u4e70\u7b49\u884c\u4e3a\u53d1\u751f\u7684\u65f6\u95f4\u57fa\u672c\u7b26\u5408\u4e00\u822c\u4eba\u7684\u4f5c\u606f\u3002","f3a38b6a":"Not very big data.\n\n\u6570\u636e\u4e0d\u7b97\u592a\u5927\u3002","60406512":"First off: What files do we have?\n\n\u9996\u5148\uff0c\u770b\u4e00\u4e0b\u6211\u4eec\u6709\u54ea\u4e9b\u6570\u636e\u3002","e67cb4a9":"## Timestamp","e9edb1a8":"My understanding is that the category corresponding to the product, the similar products can be recommended.\n\n\u6211\u7684\u7406\u89e3\u662f\u8be5\u5546\u54c1\u5bf9\u5e94\u7684\u7c7b\u76ee\uff0c\u540c\u7c7b\u76ee\u5546\u54c1\u53ef\u4ee5\u6709\u63a8\u8350\u4ef7\u503c\u3002","ff004ea0":"Let'us do an Exploratory Data Analysis (EDA) .\n\n\u8ba9\u6211\u4eec\u5728\u5efa\u6a21\u4e4b\u524d\u505a\u4e00\u4e2a\u63a2\u7d22\u6027\u6570\u636e\u5206\u6790\u3002","90844497":"\u53ef\u4ee5\u770b\u5230\u6570\u636e\u96c6\u7684\u65f6\u95f4\u4ece2015-05-03\u6301\u7eed\u52302015-09-18\u3002\u7531\u4e8e\u8ba1\u7b97\u6bd4\u8f83\u8d39\u65f6\uff0c\u6211\u5e76\u4e0d\u6253\u7b97\u4f7f\u7528\u6240\u6709\u6570\u636e\u3002\n\nSince the calculation is time consuming, I am not going to use all the data.","198464c5":"## Item Properties"}}