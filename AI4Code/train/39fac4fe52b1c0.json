{"cell_type":{"8e8e3e5d":"code","fac774de":"code","c58a8987":"code","00c26788":"code","40c6c18e":"code","97718bb3":"code","0a6c68b7":"code","586c2ec9":"code","5da851e5":"code","c7d78126":"code","3b157808":"code","1bc2afd3":"code","d56964b2":"code","b1ebfde9":"code","fd4061bb":"code","aa7ae922":"code","0daa61f7":"code","af4862a2":"code","8f3364b4":"code","847c5e35":"code","df47f62c":"code","57015372":"code","60b725be":"code","1be57fb6":"code","fac7e287":"code","fd8dc594":"code","64647b1a":"code","978e4001":"code","16843966":"code","42e93465":"code","8b74b7b2":"code","719861dd":"code","026597da":"code","1468b629":"code","70ab65be":"code","bcc71966":"code","2f4a0fa0":"code","eba8233e":"code","1ffaff12":"code","5a345606":"code","6a288b8b":"code","5e77f7d4":"code","35084727":"code","f97bae10":"code","cddbff5f":"code","503e6548":"code","c8d5080e":"code","8a54b065":"code","255d172f":"code","0634b7b5":"code","5b711a89":"code","9ce229a9":"code","59ab405e":"code","d385934d":"code","92dd15c1":"code","8c0e6893":"code","560c7f1b":"code","d7c47944":"markdown","f3648411":"markdown","f818fb77":"markdown","440981ec":"markdown","a5b52a4a":"markdown","e0590567":"markdown","fc95b1d1":"markdown","4ffccf39":"markdown","38aa507d":"markdown","980a8380":"markdown","3238dc6f":"markdown","1c913eeb":"markdown","ffc79ee8":"markdown","28c4a422":"markdown","b20daa72":"markdown","f1c19931":"markdown","5405269b":"markdown","f9cee82e":"markdown","2b0e4e02":"markdown","dcf84b2c":"markdown","d98d1ec5":"markdown","90931dae":"markdown","f9c295ca":"markdown","46dbcac1":"markdown","1e4e9efa":"markdown","d65a303c":"markdown","e7436ea8":"markdown","78ca1487":"markdown","bdbcc45c":"markdown","f93378d0":"markdown","5eca59cb":"markdown","cdf50c66":"markdown","8ee95d32":"markdown","4f399a4c":"markdown","bbc01c63":"markdown","b9436216":"markdown"},"source":{"8e8e3e5d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,classification_report,confusion_matrix,roc_auc_score,roc_curve,auc\nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom collections import Counter\npd.set_option('Display.max_columns',None)\npd.options.plotting.backend = \"plotly\"\nfrom imblearn.over_sampling import SMOTE\n\n","fac774de":"df = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')","c58a8987":"df.head()","00c26788":"df.drop('id',axis = 1,inplace=True)","40c6c18e":"df.isna().sum()\/df.shape[0]","97718bb3":"df.describe(percentiles=[0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,0.95])","0a6c68b7":"# As we can see there are outliers in BMI feature, So its not safe to fill the null values based on Mean value of BMI\n\ndf.bmi = df.bmi.fillna(df.bmi.median())","586c2ec9":"df.isna().sum()","5da851e5":"sns.countplot(df.stroke)","c7d78126":"df.head()","3b157808":"plt.figure(figsize=(20,7))\nplt.xticks(rotation = 90)\nsns.countplot(df.gender,hue = df.stroke,palette='coolwarm')\nplt.show()","1bc2afd3":"plt.figure(figsize=(20,7))\nplt.xticks(rotation = 90)\nsns.countplot(df.age,hue = df.stroke,palette='coolwarm')\nplt.show()","d56964b2":"x = 'hypertension'\ncorrelation = round(df[x].corr(df.stroke),2)\nplt.figure(figsize=(10,7))\nplt.xticks(rotation = 90)\nsns.countplot(df.hypertension,hue = df.stroke,palette='coolwarm')\nplt.figtext(0.12, 0.01, 'Correlation :', fontname = 'monospace', size = 12, color = '#dd4124')\nplt.figtext(0.28, 0.01, f\"{round(df[x].corr(df.stroke),2)}\",fontname = 'monospace', size = 11, color = '#dd0120')\nif correlation > 0.4:\n    plt.figtext(0.12, 0.05, 'Highly Positively Correlated', fontname = 'monospace', size = 12, color = '#dd4524')\nelif correlation < 0.4 and correlation > 0.0:\n    plt.figtext(0.12, 0.05, 'Slightly Positively Correlated', fontname = 'monospace', size = 12, color = '#dd4124')\nelse:\n    plt.figtext(0.12, 0.05, 'Negatively Correlated', fontname = 'monospace', size = 12, color = '#dd4124')\nplt.show()","b1ebfde9":"x = 'heart_disease'\ncorrelation = round(df[x].corr(df.stroke),2)\nplt.figure(figsize=(10,7))\nplt.xticks(rotation = 90)\nsns.countplot(df[x],hue = df.stroke,palette='coolwarm')\nplt.figtext(0.12, 0.01, 'Correlation :', fontname = 'monospace', size = 12, color = '#dd4124')\nplt.figtext(0.28, 0.01, f\"{round(df[x].corr(df.stroke),2)}\",fontname = 'monospace', size = 11, color = '#dd0120')\nif correlation > 0.4:\n    plt.figtext(0.12, 0.05, 'Highly Positively Correlated', fontname = 'monospace', size = 12, color = '#dd4524')\nelif correlation < 0.4 and correlation > 0.0:\n    plt.figtext(0.12, 0.05, 'Slightly Positively Correlated', fontname = 'monospace', size = 12, color = '#dd4124')\nelse:\n    plt.figtext(0.12, 0.05, 'Negatively Correlated', fontname = 'monospace', size = 12, color = '#dd4124')\nplt.show()","fd4061bb":"df['ever_married'] = np.where(df['ever_married'] == 'Yes',1,0)  #Converting Yes -->1 & No-->0 ","aa7ae922":"x = 'ever_married'\ncorrelation = round(df[x].corr(df.stroke),2)\nplt.figure(figsize=(10,7))\nplt.xticks(rotation = 90)\nsns.countplot(df[x],hue = df.stroke,palette='coolwarm')\nplt.figtext(0.12, 0.01, 'Correlation :', fontname = 'monospace', size = 12, color = '#dd4124')\nplt.figtext(0.28, 0.01, f\"{round(df[x].corr(df.stroke),2)}\",fontname = 'monospace', size = 11, color = '#dd0120')\nif correlation > 0.4:\n    plt.figtext(0.12, 0.05, 'Highly Positively Correlated', fontname = 'monospace', size = 12, color = '#dd4524')\nelif correlation < 0.4 and correlation > 0.0:\n    plt.figtext(0.12, 0.05, 'Slightly Positively Correlated', fontname = 'monospace', size = 12, color = '#dd4124')\nelse:\n    plt.figtext(0.12, 0.05, 'Negatively Correlated', fontname = 'monospace', size = 12, color = '#dd4124')\nplt.show()","0daa61f7":"df['work_type'].value_counts().plot(kind = 'bar',template = 'plotly_dark',title = 'Count Distribution of Sub-Categories of Work Type')\n","af4862a2":"plt.figure(figsize=(20,7))\nplt.xticks(rotation = 90)\nsns.countplot(df.work_type,hue = df.stroke,palette='coolwarm')\nplt.show()","8f3364b4":"df['Residence_type'] = np.where(df['Residence_type'] == 'Urban',1,0)  #Converting Yes -->1 & No-->0 ","847c5e35":"x = 'Residence_type'\ncorrelation = round(df[x].corr(df.stroke),2)\nplt.figure(figsize=(10,7))\nplt.xticks(rotation = 90)\nsns.countplot(df[x],hue = df.stroke,palette='coolwarm')\nplt.figtext(0.12, 0.01, 'Correlation :', fontname = 'monospace', size = 12, color = '#dd4124')\nplt.figtext(0.28, 0.01, f\"{round(df[x].corr(df.stroke),2)}\",fontname = 'monospace', size = 11, color = '#dd0120')\nif correlation > 0.4:\n    plt.figtext(0.12, 0.05, 'Highly Positively Correlated', fontname = 'monospace', size = 12, color = '#dd4524')\nelif correlation < 0.4 and correlation > 0.1:\n    plt.figtext(0.12, 0.05, 'Slightly Positively Correlated', fontname = 'monospace', size = 12, color = '#dd4124')\nelif correlation < 0.1 and correlation > 0.0:\n    plt.figtext(0.12, 0.05, 'Almost No Correlation', fontname = 'monospace', size = 12, color = '#dd4124')\nelse:\n    plt.figtext(0.12, 0.05, 'Negatively Correlated', fontname = 'monospace', size = 12, color = '#dd4124')\nplt.show()","df47f62c":"plt.figure(figsize=(10,7))\nsns.histplot(df.avg_glucose_level,)","57015372":"s = df[df.stroke == 1]","60b725be":"print(f\"Average Glucose Level of people having Stroke = {round(s.groupby('stroke')['avg_glucose_level'].mean()[1],2)}\")","1be57fb6":"ns = df[df.stroke == 0]","fac7e287":"print(f\"Average Glucose Level of people having Stroke = {round(ns.groupby('stroke')['avg_glucose_level'].mean()[0],2)}\")","fd8dc594":"plt.figure(figsize=(10,7))\nsns.histplot(df.bmi)","64647b1a":"print(f\"Average BMI of people having Stroke = {round(s.groupby('stroke')['bmi'].mean()[1],2)}\")","978e4001":"print(f\"Average BMI of people having Stroke = {round(ns.groupby('stroke')['bmi'].mean()[0],2)}\")","16843966":"df['smoking_status'].value_counts().plot(kind = 'bar',template = 'plotly_dark',title = 'Count Distribution of Sub-Categories')\n","42e93465":"plt.figure(figsize=(20,7))\nplt.xticks(rotation = 90)\nsns.countplot(df.smoking_status,hue = df.stroke,palette='coolwarm')\nplt.show()","8b74b7b2":"sns.pairplot(df)","719861dd":"df = pd.get_dummies(df,drop_first=True)","026597da":"plt.figure(figsize = (15,10))\nsns.heatmap(df.corr(),cmap='coolwarm',annot = True)\nplt.show()","1468b629":"x = df.drop('stroke',axis = 1)\ny = df.stroke","70ab65be":"xtrain,xtest,ytrain,ytest = train_test_split(x,y,test_size=0.2,random_state=47)","bcc71966":"#Lets define every model with multiple parameters for the selection of best model with best parameters.\nmodel_params = {\n    'svm':{\n        'model': SVC(),\n        'params':{\n            'C' : [1,2,3],\n            'kernel' : ['linear', 'poly', 'rbf', 'sigmoid']\n        }\n    },\n    'logistic':{\n        'model':LogisticRegression(),\n        'params':{\n            'penalty' : ['l2'],\n            'solver' : ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']\n            \n        }\n    },\n    'RF':{\n        'model':RandomForestClassifier(n_jobs = -1),\n        'params':{\n            'n_estimators':[50,100],\n            'criterion' : [\"gini\", \"entropy\"]\n            \n        }\n    },\n    'DT':{\n        'model':DecisionTreeClassifier(),\n        'params':{\n            'criterion' : [\"gini\", \"entropy\"],\n            'splitter':[\"best\", \"random\"]\n        }\n    }\n}","2f4a0fa0":"scores = [] #List for all the best scores\nfor model_name, modelp in model_params.items():\n    clf = GridSearchCV(modelp['model'],modelp['params'],cv = 3,return_train_score=False,                         \n                         n_jobs=-1)\n    clf.fit(x,y)\n    scores.append({\n        'model': model_name,\n        'best_score': clf.best_score_,\n        'best_params': clf.best_params_\n    })\nscoreddf = pd.DataFrame(scores,columns=['model','best_score','best_params'])\nscoreddf","eba8233e":"rf = RandomForestClassifier(n_jobs=-1,criterion = 'gini', n_estimators = 50)","1ffaff12":"rf.fit(xtrain,ytrain)","5a345606":"ypred = rf.predict(xtest)","6a288b8b":"#Accuracy\nprint(f'Models Accuracy = {round(accuracy_score(ytest,ypred)*100,2)}%')","5e77f7d4":"matrix = confusion_matrix(ytest,ypred)","35084727":"matrix #TPR , TNR , FPR , FNR rates","f97bae10":"sns.heatmap(matrix,cmap = 'coolwarm',annot=True)","cddbff5f":"#Classification report:-\nclassification_scores=classification_report(ytest,ypred)\nprint(classification_scores)","503e6548":"smote = SMOTE(random_state=47)","c8d5080e":"sxtrain,sytrain =smote.fit_resample(xtrain,ytrain)","8a54b065":"sxtest,sytest = smote.fit_resample(xtest,ytest)","255d172f":"rf = RandomForestClassifier(n_jobs=-1,criterion = 'gini', n_estimators = 50)","0634b7b5":"rf.fit(sxtrain,sytrain)","5b711a89":"sypred = rf.predict(sxtest)","9ce229a9":"#Accuracy\nprint(f'After Balancing, Models Accuracy = {round(accuracy_score(sytest,sypred)*100,2)}%')","59ab405e":"matrix = confusion_matrix(sytest,sypred)","d385934d":"sns.heatmap(matrix,cmap = 'coolwarm',annot=True)","92dd15c1":"#ROC_AUC SCORE:-\nroc_score=roc_auc_score(sytest,sypred)\nprint('ROC score:',roc_score)","8c0e6893":"#ROC_AUC Curve:-\nplt.figure()\nfalse_positive_rate,recall,thresholds=roc_curve(sytest,sypred)\nroc_auc=auc(false_positive_rate,recall)\nplt.title('Reciver Operating Characteristics(ROC)')\nplt.plot(false_positive_rate,recall,'b',label='ROC(area=%0.3f)' %roc_auc)\nplt.legend()\nplt.plot([0,1],[0,1],'r--')\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.0])\nplt.ylabel('Recall(True Positive Rate)')\nplt.xlabel('False Positive Rate')\nplt.show()\nprint('AUC:',roc_auc)","560c7f1b":"#Classification report:-\nclassification_scores=classification_report(sytest,sypred)\nprint(classification_scores)","d7c47944":"## EDA","f3648411":"### Work Type","f818fb77":"## Overall Distribution","440981ec":"**Overall accuracy is decreased but the model isn't Baised towards one class now..It will perform better now on unseen data.**","a5b52a4a":"### Average Glucose Level","e0590567":"### Smoking Status","fc95b1d1":"***Highly Imbalanced Data***","4ffccf39":"## Overall Correlation","38aa507d":"## Model Selection (Halving GridSearch CV)","980a8380":"**Because of the imbalanced dataset model isn't able to read the overall trend properly and is biased towards a single target class, We need to Balance the Dataset**","3238dc6f":"## ROC-AUC Score","1c913eeb":"### Age","ffc79ee8":"## Confusion Matrix","28c4a422":"**Average Glucose Level of people not having Stroke**","b20daa72":"***From the above results, SVM is performing better than any other model though the difference isn't huge enough.So I'll be using Random Forest***","f1c19931":"## My Assumptions","5405269b":"## Smote for Balancing the Dataset","f9cee82e":"## Classification Report (Imbalanced)","2b0e4e02":"## If this notebook helped you in getting meaningful Insights, Do Upvote!","dcf84b2c":"## Data Splitting","d98d1ec5":"**Average BMI of people not having Stroke**","90931dae":"***Think it this way--> The people having work type as private are more likely to have stroke maybe because of no exertion at all throughout the day, They keep sitting at a single place and might be doing their work the entire day. Because of no physical activity they are more prone to have stroke***\n\n***Same theory goes for other work types as well but to a slight lower extent***\n\n***If the guy has never worked which also indicates it might not had much pressure onto him which can ease the condition of getting stroke***","f9c295ca":"### Hypertension","46dbcac1":"## Classification Report (Balanced)","1e4e9efa":"## Avg. GLucose Level ","d65a303c":"### Heart Disease","e7436ea8":"### Average BMI Level","78ca1487":"### Gender","bdbcc45c":"## Treating Null Values","f93378d0":"## Model Building","5eca59cb":"**Average Glucose Level of people having Stroke**","cdf50c66":"***We can see slight upward trend when Age and stroke is concerned. (Higher the Age, Higher the chances of having Stroke) Slightly Positively Correlated***","8ee95d32":"## Confusion Matrix (Balanced)","4f399a4c":"### Ever Married","bbc01c63":"**Average BMI of people having Stroke**","b9436216":"### Residence Type"}}