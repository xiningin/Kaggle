{"cell_type":{"f8d0aabd":"code","746d680f":"code","cfaaed3f":"code","85bcf954":"code","a6317c42":"code","6fdefc0c":"code","22c177d9":"code","c189fc06":"code","05d17d71":"code","fbb21203":"code","66681359":"code","1946c295":"code","333ac1aa":"code","1e2ab732":"code","b0925436":"code","d22e4a4c":"code","986f114e":"code","dca40884":"code","864b79b9":"code","15698515":"code","ffeae7f1":"code","4721776b":"code","1ce085aa":"code","a655966a":"code","00291f17":"code","3528edf8":"code","da0c6c75":"code","9d4972d2":"code","17eb8b14":"code","deb153db":"code","55105c9a":"code","4d117f69":"code","994d7bb5":"code","48642e33":"code","097e912e":"markdown","0bfe1917":"markdown","8987d6f4":"markdown","8c84efb0":"markdown","b63dbd45":"markdown"},"source":{"f8d0aabd":"import pandas as pd","746d680f":"df=pd.read_csv('..\/input\/fake-news-detection\/data.csv')","cfaaed3f":"df.head()","85bcf954":"## Get the Independent Features\nX=df.drop('Label',axis=1)","a6317c42":"X.head()","6fdefc0c":"## Get the Dependent features\ny=df['Label']","22c177d9":"y.head()","c189fc06":"df.shape","05d17d71":"from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer","fbb21203":"df=df.dropna()#dropping the Nan values","66681359":"df.shape","1946c295":"messages=df.copy()\n","333ac1aa":"messages.reset_index(inplace=True)## reseting the index after eliminating nan values","1e2ab732":"messages.head(10)","b0925436":"messages['Body'][6]","d22e4a4c":"from nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nimport re\nps = PorterStemmer()\ncorpus = []\nfor i in range(0, len(messages)):\n    review = re.sub('[^a-zA-Z]', ' ', messages['Body'][i])\n    review = review.lower()\n    review = review.split()\n    \n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)","986f114e":"corpus[3]","dca40884":"## Applying TFidf Vectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\ntfidf_v=TfidfVectorizer(max_features=5000,ngram_range=(1,3))\nX=tfidf_v.fit_transform(corpus).toarray()","864b79b9":"X.shape","15698515":"y=messages['Label']","ffeae7f1":"## Divide the dataset into Train and Test\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=0)","4721776b":"tfidf_v.get_feature_names()[:20]","1ce085aa":"tfidf_v.get_params()# things what you have applied in tfidf","a655966a":"count_df = pd.DataFrame(X_train, columns=tfidf_v.get_feature_names())","00291f17":"count_df.head()","3528edf8":"import matplotlib.pyplot as plt","da0c6c75":"# Applying confusion matrix\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","9d4972d2":"from sklearn.naive_bayes import MultinomialNB\nclassifier=MultinomialNB()","17eb8b14":"from sklearn import metrics\nimport numpy as np\nimport itertools","deb153db":"classifier.fit(X_train, y_train)\npred = classifier.predict(X_test)\nscore = metrics.accuracy_score(y_test, pred)\nprint(\"accuracy:   %0.3f\" % score)\ncm = metrics.confusion_matrix(y_test, pred)\nplot_confusion_matrix(cm, classes=['FAKE', 'REAL'])","55105c9a":"classifier.fit(X_train, y_train)\npred = classifier.predict(X_test)\nscore = metrics.accuracy_score(y_test, pred)\nscore","4d117f69":"y_train.shape","994d7bb5":"from sklearn.linear_model import PassiveAggressiveClassifier\nlinear_clf = PassiveAggressiveClassifier(n_iter_no_change=50)","48642e33":"linear_clf.fit(X_train, y_train)\npred = linear_clf.predict(X_test)\nscore = metrics.accuracy_score(y_test, pred)\nprint(\"accuracy:   %0.3f\" % score)\ncm = metrics.confusion_matrix(y_test, pred)\nplot_confusion_matrix(cm, classes=['FAKE Data', 'REAL Data'])","097e912e":"## we can see PassiveAgressive classifier gives higher score as compared to multinomialnb.\n\n## upvote if you like the notebook.","0bfe1917":"# Text Preprocessing","8987d6f4":"# Data Preprocessing","8c84efb0":"## Fake News Classifier\n#### The Notebooks aims to predict whether news is fake or legit. The dataset consist of Urls of the news,Headline,body and label.\n\n## Content of the Notebook.\n* ### Data preprocessing\n* ### Text preprocessing\n* ### model selection and building\n\n","b63dbd45":"# Model selection and model building."}}