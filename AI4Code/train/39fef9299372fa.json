{"cell_type":{"72701798":"code","dcc84167":"code","d8fdd80e":"code","28d8da9b":"code","446cfe35":"code","b8396c8c":"code","97a845e9":"code","741f2ced":"code","bfece9d2":"code","032465c9":"code","8b015279":"code","f4123f29":"code","633db8eb":"code","0aa855bd":"code","b39633d2":"code","d136ef46":"code","a83d4ba8":"code","3d82f5fc":"code","7a49ef54":"code","8993e45d":"code","d82634b1":"code","efb01435":"code","fa2f66d0":"code","50a27e49":"markdown","d64d91d5":"markdown","41c5e586":"markdown","b63b4c6b":"markdown","559ba350":"markdown","cd0e6269":"markdown","3bdeacd0":"markdown","c20c1d9c":"markdown","44ffb89e":"markdown","051cd72d":"markdown","9bed122e":"markdown","d4f280a5":"markdown","f8880e25":"markdown","22b041af":"markdown","b28b98da":"markdown","660b8b76":"markdown","b3de43eb":"markdown","3dd57e44":"markdown","311601f2":"markdown","cb95ec19":"markdown","d4035e87":"markdown","50eac82c":"markdown","a2a9adc4":"markdown","5c192536":"markdown"},"source":{"72701798":"import re                                                 # Regular Expression\nimport spacy                                              # spaCy for Lemmatization\nimport string                                             # Used for its string properties\nimport numpy as np                                        # Numpy for Linear Algebra\nimport pandas as pd                                       # Pandas for DataFrames\nfrom matplotlib import pyplot as plt                      # Matplotlib for plots\n%matplotlib inline\nplt.style.use('ggplot')\n\nfrom wordcloud import WordCloud                           # Wordclouds\nfrom tqdm import tqdm                                     # Interactive enumerator\nfrom sklearn.model_selection import train_test_split\n\n# Keras\nfrom keras.preprocessing.text import Tokenizer            # Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences    # Sequence Padder\nfrom keras.models import Sequential                       # Sequential model\nfrom keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\nfrom keras.layers import (LSTM, \n                          Embedding, \n                          BatchNormalization,\n                          Dense, \n                          TimeDistributed, \n                          Dropout, \n                          Bidirectional,\n                          Flatten, \n                          GlobalMaxPool1D,\n                          SpatialDropout1D)               # Layers\n\n# tensorflow\nimport tensorflow as tf\n\n# transformers\nfrom transformers import TFBertModel, BertModel\nfrom transformers import BertTokenizer\n\nnlp = spacy.load('en_core_web_sm')  # Load the English language (Other options: en_core_web_md, en_core_web_lg)","dcc84167":"# Load data\ntrain_df = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntest_df = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\n\n# Combine data for easier iteration\ncombined = [train_df, test_df]\n\n# Shuffle\nfor df in combined:    \n    df = df.sample(frac = 1).reset_index(drop = True)\n\n# Print basic properties\nprint(f\"Training Data has {train_df.shape[0]} rows and {train_df.shape[1]} columns: ({list(train_df.columns)})\")\nprint(f\"Testing Data has {test_df.shape[0]} rows and {test_df.shape[1]} columns: ({list(test_df.columns)})\")","d8fdd80e":"# Correct a few errors in the training data\n# https:\/\/www.kaggle.com\/wrrosa\/keras-bert-using-tfhub-modified-train-data\n\ntarget_error_ids = [328, 443, 513, 2619, 3640, 3900, 4342, 5781, 6552, 6554, 6570, 6701, 6702, 6729, 6861, 7226]\ntrain_df.loc[train_df['id'].isin(target_error_ids), 'target'] = 0","28d8da9b":"train_df.groupby(by = 'target', as_index = False)['target'].count()","446cfe35":"# NULL entries\nnull_entries = train_df.loc[train_df['keyword'].isnull()]\nnull_entries_count = len(null_entries)\nprint(f'- There are {null_entries_count} missing entries on \"keyword\" column ({round(null_entries_count \/ train_df.shape[0] * 100, 2)}%)')\n\n# Uniqueness\nunique_locations = train_df['keyword'].unique()\nunique_locations_count = len(unique_locations)\nprint(f'- Number of unique keyword: {unique_locations_count} ({round(unique_locations_count\/train_df.shape[0]*100, 2)}%)')","b8396c8c":"# Lemmatize text\ndef lemmatize_text(text):\n    return ' '.join([token.lemma_ for token in nlp(text)])\n\nfor df in combined:\n    keyword_not_na = df['keyword'].notnull()\n\n    # Lemmatize\n#     df.loc[keyword_not_na, 'keyword'] = df.loc[keyword_not_na, 'keyword'].apply(lemmatize_text)\n    \n    # Fix space encoding    \n    df.loc[keyword_not_na, 'keyword'] = df.loc[keyword_not_na, 'keyword'].apply(lambda x: x.replace('%20', ' '))","97a845e9":"# Get unique keywords\nkeywords = train_df.loc[train_df['keyword'].notnull(), 'keyword'].unique()\n\n# Create keywords dataframe\nkeywords_df = pd.DataFrame(data = {'keyword': keywords})\n\ndisaster_cnts, total_cnts = [], []\ndisaster_probs = []\nfor i, row in keywords_df.iterrows():\n\n    tmp_df = train_df.loc[(train_df['keyword'] == row['keyword'])]\n    tmp1_df = tmp_df.loc[tmp_df['target'] == 1]\n    \n    # Save counts\n    disaster_cnts.append(tmp1_df.shape[0])\n    total_cnts.append(tmp_df.shape[0])\n    \n    # Save probabilities\n    disaster_probs.append(tmp1_df.shape[0] \/ tmp_df.shape[0])\n\n# Add data for disaster tweets\nkeywords_df['Disaster_Cnts'] = disaster_cnts\nkeywords_df['Total_Cnts'] = total_cnts\nkeywords_df['Disaster_Prob'] = disaster_probs","741f2ced":"# Get probability for keywords associated with disaster tweets\nkeywords_df.sort_values(by = 'Disaster_Prob', ascending = False).head(10)","bfece9d2":"# Get probability for keywords associated with non-disaster tweets\nkeywords_df.sort_values(by = 'Disaster_Prob').head(10)","032465c9":"# Extract hashtags in form of #<str> (They must have atleast 3 characters)\ndef extract_hashtags(text):\n    matches = re.findall(r'#\\w*', text)\n    return [match[1:].lower() for match in matches if len(match) > 2] if matches != [] else np.nan\n\n# Extract mentions in form of @<str> (They must have atleast 3 characters)\ndef extract_mentions(text):\n    matches = re.findall(r'@\\w*', text)\n    return [match[1:].lower() for match in matches if len(match) > 2] if matches != [] else np.nan\n\n# Extract links\ndef extract_links(text):\n    matches = re.findall(r'\\bhttps?:\/\/\\S+', text)\n    return matches if matches != [] else np.nan\n\nfor df in combined:\n    # Feature extract #hashtags, @mentions and :links\n    df['hashtags'] = df['text'].apply(extract_hashtags)\n    df['mentions'] = df['text'].apply(extract_mentions)\n    df['links'] = df['text'].apply(extract_links)    ","8b015279":"fig, axs = plt.subplots(nrows = 1, ncols = 2, figsize = (20, 7))\n\n# Disaster Tweets\nword_cloud = WordCloud(max_font_size = 50)\nword_cloud.generate(\" \".join(train_df.loc[train_df['target'] == 1, 'text']))\naxs[0].imshow(word_cloud)\naxs[0].set_title(\"Disaster Tweets\")\naxs[0].axis('off')\n\n# Normal Tweets\nword_cloud = WordCloud(max_font_size = 50)\nword_cloud.generate(\" \".join(train_df.loc[train_df['target'] == 0, 'text']))\naxs[1].set_title(\"Non-Disaster Tweets\")\naxs[1].imshow(word_cloud)\naxs[1].axis('off')\n\nplt.show()","f4123f29":"# https:\/\/www.kaggle.com\/rftexas\/text-only-kfold-bert\n\nabbreviations = {\n    \"$\" : \" dollar \",\n    \"\u20ac\" : \" euro \",\n    \"4ao\" : \"for adults only\",\n    \"a.m\" : \"before midday\",\n    \"a3\" : \"anytime anywhere anyplace\",\n    \"aamof\" : \"as a matter of fact\",\n    \"acct\" : \"account\",\n    \"adih\" : \"another day in hell\",\n    \"afaic\" : \"as far as i am concerned\",\n    \"afaict\" : \"as far as i can tell\",\n    \"afaik\" : \"as far as i know\",\n    \"afair\" : \"as far as i remember\",\n    \"afk\" : \"away from keyboard\",\n    \"app\" : \"application\",\n    \"approx\" : \"approximately\",\n    \"apps\" : \"applications\",\n    \"asap\" : \"as soon as possible\",\n    \"asl\" : \"age, sex, location\",\n    \"atk\" : \"at the keyboard\",\n    \"ave.\" : \"avenue\",\n    \"aymm\" : \"are you my mother\",\n    \"ayor\" : \"at your own risk\", \n    \"b&b\" : \"bed and breakfast\",\n    \"b+b\" : \"bed and breakfast\",\n    \"b.c\" : \"before christ\",\n    \"b2b\" : \"business to business\",\n    \"b2c\" : \"business to customer\",\n    \"b4\" : \"before\",\n    \"b4n\" : \"bye for now\",\n    \"b@u\" : \"back at you\",\n    \"bae\" : \"before anyone else\",\n    \"bak\" : \"back at keyboard\",\n    \"bbbg\" : \"bye bye be good\",\n    \"bbc\" : \"british broadcasting corporation\",\n    \"bbias\" : \"be back in a second\",\n    \"bbl\" : \"be back later\",\n    \"bbs\" : \"be back soon\",\n    \"be4\" : \"before\",\n    \"bfn\" : \"bye for now\",\n    \"blvd\" : \"boulevard\",\n    \"bout\" : \"about\",\n    \"brb\" : \"be right back\",\n    \"bros\" : \"brothers\",\n    \"brt\" : \"be right there\",\n    \"bsaaw\" : \"big smile and a wink\",\n    \"btw\" : \"by the way\",\n    \"bwl\" : \"bursting with laughter\",\n    \"c\/o\" : \"care of\",\n    \"cet\" : \"central european time\",\n    \"cf\" : \"compare\",\n    \"cia\" : \"central intelligence agency\",\n    \"csl\" : \"can not stop laughing\",\n    \"cu\" : \"see you\",\n    \"cul8r\" : \"see you later\",\n    \"cv\" : \"curriculum vitae\",\n    \"cwot\" : \"complete waste of time\",\n    \"cya\" : \"see you\",\n    \"cyt\" : \"see you tomorrow\",\n    \"dae\" : \"does anyone else\",\n    \"dbmib\" : \"do not bother me i am busy\",\n    \"diy\" : \"do it yourself\",\n    \"dm\" : \"direct message\",\n    \"dwh\" : \"during work hours\",\n    \"e123\" : \"easy as one two three\",\n    \"eet\" : \"eastern european time\",\n    \"eg\" : \"example\",\n    \"embm\" : \"early morning business meeting\",\n    \"encl\" : \"enclosed\",\n    \"encl.\" : \"enclosed\",\n    \"etc\" : \"and so on\",\n    \"faq\" : \"frequently asked questions\",\n    \"fawc\" : \"for anyone who cares\",\n    \"fb\" : \"facebook\",\n    \"fc\" : \"fingers crossed\",\n    \"fig\" : \"figure\",\n    \"fimh\" : \"forever in my heart\", \n    \"ft.\" : \"feet\",\n    \"ft\" : \"featuring\",\n    \"ftl\" : \"for the loss\",\n    \"ftw\" : \"for the win\",\n    \"fwiw\" : \"for what it is worth\",\n    \"fyi\" : \"for your information\",\n    \"g9\" : \"genius\",\n    \"gahoy\" : \"get a hold of yourself\",\n    \"gal\" : \"get a life\",\n    \"gcse\" : \"general certificate of secondary education\",\n    \"gfn\" : \"gone for now\",\n    \"gg\" : \"good game\",\n    \"gl\" : \"good luck\",\n    \"glhf\" : \"good luck have fun\",\n    \"gmt\" : \"greenwich mean time\",\n    \"gmta\" : \"great minds think alike\",\n    \"gn\" : \"good night\",\n    \"g.o.a.t\" : \"greatest of all time\",\n    \"goat\" : \"greatest of all time\",\n    \"goi\" : \"get over it\",\n    \"gps\" : \"global positioning system\",\n    \"gr8\" : \"great\",\n    \"gratz\" : \"congratulations\",\n    \"gyal\" : \"girl\",\n    \"h&c\" : \"hot and cold\",\n    \"hp\" : \"horsepower\",\n    'hwy': 'highway',\n    \"hr\" : \"hour\",\n    \"hrh\" : \"his royal highness\",\n    \"ht\" : \"height\",\n    \"ibrb\" : \"i will be right back\",\n    \"ic\" : \"i see\",\n    \"icq\" : \"i seek you\",\n    \"icymi\" : \"in case you missed it\",\n    \"idc\" : \"i do not care\",\n    \"idgadf\" : \"i do not give a damn fuck\",\n    \"idgaf\" : \"i do not give a fuck\",\n    \"idk\" : \"i do not know\",\n    \"ie\" : \"that is\",\n    \"i.e\" : \"that is\",\n    \"ifyp\" : \"i feel your pain\",\n    \"IG\" : \"instagram\",\n    \"iirc\" : \"if i remember correctly\",\n    \"ilu\" : \"i love you\",\n    \"ily\" : \"i love you\",\n    \"imho\" : \"in my humble opinion\",\n    \"imo\" : \"in my opinion\",\n    \"imu\" : \"i miss you\",\n    \"iow\" : \"in other words\",\n    \"irl\" : \"in real life\",\n    \"j4f\" : \"just for fun\",\n    \"jic\" : \"just in case\",\n    \"jk\" : \"just kidding\",\n    \"jsyk\" : \"just so you know\",\n    \"l8r\" : \"later\",\n    \"lb\" : \"pound\",\n    \"lbs\" : \"pounds\",\n    \"ldr\" : \"long distance relationship\",\n    \"lmao\" : \"laugh my ass off\",\n    \"lmfao\" : \"laugh my fucking ass off\",\n    \"lol\" : \"laughing out loud\",\n    \"ltd\" : \"limited\",\n    \"ltns\" : \"long time no see\",\n    \"m8\" : \"mate\",\n    \"mf\" : \"motherfucker\",\n    \"mfs\" : \"motherfuckers\",\n    \"mfw\" : \"my face when\",\n    \"mofo\" : \"motherfucker\",\n    \"mph\" : \"miles per hour\",\n    \"mr\" : \"mister\",\n    \"mrw\" : \"my reaction when\",\n    \"ms\" : \"miss\",\n    \"mte\" : \"my thoughts exactly\",\n    \"nagi\" : \"not a good idea\",\n    \"nbc\" : \"national broadcasting company\",\n    \"nbd\" : \"not big deal\",\n    \"nfs\" : \"not for sale\",\n    \"ngl\" : \"not going to lie\",\n    \"nhs\" : \"national health service\",\n    \"nrn\" : \"no reply necessary\",\n    \"nsfl\" : \"not safe for life\",\n    \"nsfw\" : \"not safe for work\",\n    \"nth\" : \"nice to have\",\n    \"nvr\" : \"never\",\n    \"nyc\" : \"new york city\",\n    \"oc\" : \"original content\",\n    \"og\" : \"original\",\n    \"ohp\" : \"overhead projector\",\n    \"oic\" : \"oh i see\",\n    \"omdb\" : \"over my dead body\",\n    \"omg\" : \"oh my god\",\n    \"omw\" : \"on my way\",\n    \"p.a\" : \"per annum\",\n    \"p.m\" : \"after midday\",\n    \"pm\" : \"prime minister\",\n    \"poc\" : \"people of color\",\n    \"pov\" : \"point of view\",\n    \"pp\" : \"pages\",\n    \"ppl\" : \"people\",\n    \"prw\" : \"parents are watching\",\n    \"ps\" : \"postscript\",\n    \"pt\" : \"point\",\n    \"ptb\" : \"please text back\",\n    \"pto\" : \"please turn over\",\n    \"qpsa\" : \"what happens\",\n    \"ratchet\" : \"rude\",\n    \"rbtl\" : \"read between the lines\",\n    \"rlrt\" : \"real life retweet\", \n    \"rofl\" : \"rolling on the floor laughing\",\n    \"roflol\" : \"rolling on the floor laughing out loud\",\n    \"rotflmao\" : \"rolling on the floor laughing my ass off\",\n    \"rt\" : \"retweet\",\n    \"ruok\" : \"are you ok\",\n    \"sfw\" : \"safe for work\",\n    \"sk8\" : \"skate\",\n    \"smh\" : \"shake my head\",\n    \"sq\" : \"square\",\n    \"srsly\" : \"seriously\", \n    \"ssdd\" : \"same stuff different day\",\n    \"tbh\" : \"to be honest\",\n    \"tbs\" : \"tablespooful\",\n    \"tbsp\" : \"tablespooful\",\n    \"tfw\" : \"that feeling when\",\n    \"thks\" : \"thank you\",\n    \"tho\" : \"though\",\n    \"thx\" : \"thank you\",\n    \"tia\" : \"thanks in advance\",\n    \"til\" : \"today i learned\",\n    \"tl;dr\" : \"too long i did not read\",\n    \"tldr\" : \"too long i did not read\",\n    \"tmb\" : \"tweet me back\",\n    \"tntl\" : \"trying not to laugh\",\n    \"ttyl\" : \"talk to you later\",\n    \"u\" : \"you\",\n    \"u2\" : \"you too\",\n    \"u4e\" : \"yours for ever\",\n    \"utc\" : \"coordinated universal time\",\n    \"w\/\" : \"with\",\n    \"w\/o\" : \"without\",\n    'w\/e': 'whatever',\n    \"w8\" : \"wait\",\n    \"wassup\" : \"what is up\",\n    \"wb\" : \"welcome back\",\n    \"wtf\" : \"what the fuck\",\n    \"wtg\" : \"way to go\",\n    \"wtpa\" : \"where the party at\",\n    \"wuf\" : \"where are you from\",\n    \"wuzup\" : \"what is up\",\n    \"wywh\" : \"wish you were here\",\n    \"yd\" : \"yard\",\n    \"ygtr\" : \"you got that right\",\n    \"ynk\" : \"you never know\",\n    \"zzz\" : \"sleeping bored and tired\"\n}\n\n# Change an abbreviation to its true meaning\ndef fix_abbrev(text):\n    return ' '.join([abbreviations[word.lower()] if (word.lower() in abbreviations.keys()) else word for word in text.split()])\n\n# Replace some others smiley face with SADFACE\ndef transcription_sad(text):\n    smiley = re.compile(r'[8:=;][\\'\\-]?[(\\\\\/]')\n    return smiley.sub(r'sad face', text)\n\n# Replace <3 with HEART\ndef transcription_heart(text):\n    heart = re.compile(r'<3')\n    return heart.sub(r'love', text)\n\n# Replace URLs\ndef remove_urls(text):\n    return re.sub(r'https?:\/\/\\S+|www\\.\\S+', '', text)\n\n# Remove HTML\ndef remove_html(text):\n    return re.sub(r'<.*?>', '', text)\n\n# Converts text to lowercase\ndef to_lower(text):\n    return text.lower()\n\n# Remove words contaning numbers\ndef remove_numbers(text):\n    return re.sub(r'\\w*\\d\\w*', '', text)\n\n# Remove text in brackets\ndef remove_brackets(text):\n    return re.sub(r'\\[.*?\\]', '', text)  \n\n# Replace mentions\ndef remove_mentions(text):\n    return re.sub(r'@\\w*', '', text)\n\n# Remove hashtags\ndef remove_hashtags(text):\n    return re.sub(r'#\\w*', '', text)\n\n# Remove emojis\ndef remove_emojis(text):\n    regrex_pattern = re.compile(pattern = \"[\"\n        u\"\\U0001F600-\\U0001F64F\"\n        u\"\\U0001F300-\\U0001F5FF\"\n        u\"\\U0001F680-\\U0001F6FF\"\n        u\"\\U0001F1E0-\\U0001F1FF\"\n    \"]+\", flags = re.UNICODE)\n    return regrex_pattern.sub(r'',text)\n\n# Remove non-ASCII characters\ndef remove_non_ascii(text):\n#     return ''.join(filter(lambda x: x in string.printable, text))\n    return text.encode(\"ascii\",errors=\"ignore\").decode()\n\n# Remove stopwords\ndef remove_stopwords(text):\n    return ' '.join([token.text for token in nlp(text) if not token.is_stop])\n\n# Remove punctuation\ndef remove_punctuation(text):\n    table = str.maketrans('', '', string.punctuation)\n    return text.translate(table)\n\n# Remove white space (Extra step, just in case)\ndef remove_whitespace(text):\n    return ' '.join(text.split())\n\n# Filter out words with too few characters (2 by default)\ndef filter_words(text):\n    return ' '.join([word for word in text.split() if len(word) > 2])","633db8eb":"for df in tqdm(combined):\n    \n    text = df['text']\n    \n    # Convert to lowercase\n    text = text.apply(to_lower)\n\n    # Replace symbols\n    text = text.replace(r'&amp;?', r'and')\n    text = text.replace(r'&lt;', r'<')\n    text = text.replace(r'&gt;', r'>')\n    text = text.replace('&amp;', \" and \")\n    \n    # Manual Lemmatize (https:\/\/www.kaggle.com\/tylerrosacker\/bertweet-transfer-learning)\n    text = text.str.replace('won\\'t', 'will not')\n    text = text.str.replace('can\\'t', 'cannot')\n    text = text.str.replace('i\\'m', 'i am')\n    text = text.replace('ain\\'t', 'is not')\n    \n    # Remove hashtagsh, mentions and links\n#     text = text.apply(remove_hashtags)\n    text = text.apply(remove_mentions)\n    text = text.apply(remove_urls)\n\n    # Fix abbreviations\n    text = text.apply(fix_abbrev)\n    \n    # Remove HTML tags\n    text = text.apply(remove_html)\n    \n    # Remove texts within brackets\n    text = text.apply(remove_brackets)\n\n    # Fix emojies\n    text = text.apply(transcription_sad)\n    text = text.apply(transcription_heart)\n    text = text.apply(remove_emojis)\n\n    # Remove non-ASCII characters\n    text = text.apply(remove_non_ascii)    \n    \n    # Remove words contaning numbers\n    text = text.apply(remove_numbers)    \n    \n    # Remove stopwords\n#     text = text.apply(remove_stopwords)\n    \n    # Remove punctuations\n    text = text.apply(remove_punctuation)\n\n    # Lemmatize text\n#     text = text.apply(lemmatize_text)\n\n    # Remove words with few characters    \n#     text = text.apply(filter_words)\n    \n    # Fill text if empty\n    text = text.apply(lambda x: x if x != '' else '?')\n\n    df['clean_text'] = text","0aa855bd":"def BILSTM_encode():\n\n    # Get textual data\n    train_text = train_df['clean_text']\n    test_text = test_df['clean_text']\n\n    # Create and fit Tokenizer\n    MAX_LEN = train_text.apply(lambda x: len(x.split())).max() + 1     # Highest number of words in any text\n    tokenizer = Tokenizer()\n    tokenizer.fit_on_texts(train_text)\n\n    # Hot-Encode Sequence\n    train_encodes = tokenizer.texts_to_sequences(train_text)\n    test_encodes = tokenizer.texts_to_sequences(test_text)\n\n    # Pad Sequences\n    train_padded_encodes = pad_sequences(train_encodes, maxlen = MAX_LEN, padding = 'post')\n    test_padded_encodes = pad_sequences(test_encodes, maxlen = MAX_LEN, padding = 'post')\n    \n    return train_padded_encodes, test_padded_encodes, tokenizer","b39633d2":"# Load Bert model & tokenizer\nbert_base = TFBertModel.from_pretrained('bert-base-uncased')\nTOKENIZER = BertTokenizer.from_pretrained(\"bert-base-uncased\")\n\ndef BERT_encode(data, maximum_len) :\n    input_ids = []\n    attention_masks = []\n  \n    for i in range(len(data['clean_text'])):\n        encoded = TOKENIZER.encode_plus(data['clean_text'][i],\n                                        add_special_tokens = True,\n                                        max_length = maximum_len,\n                                        pad_to_max_length = True,\n                                        return_attention_mask = True)\n      \n        input_ids.append(encoded['input_ids'])\n        attention_masks.append(encoded['attention_mask'])\n        \n    return np.array(input_ids), np.array(attention_masks)","d136ef46":"def get_embedding_matrix(tokenizer, EMBEDDING_DIM = 100):\n\n    EMBEDDING_DIM = EMBEDDING_DIM     \n    embeddings_index = {}\n    word_index = tokenizer.word_index\n\n    # Compute an index mapping words to known embeddings\n    with open(f'..\/input\/glove6b\/glove.6B.{EMBEDDING_DIM}d.txt', encoding = \"utf8\") as file:\n        for line in file:\n            values = line.split()\n            embeddings_index[values[0]] = np.asarray(values[1:], dtype = 'float32')\n\n    # Computer matrix for the vocabulary words\n    embedding_matrix = np.zeros((len(word_index) + 1, EMBEDDING_DIM))\n    for word, i in word_index.items():\n        embedding_vector = embeddings_index.get(word)\n        if embedding_vector is not None:\n            embedding_matrix[i] = embedding_vector    # words not found in embedding index will be all-zeros.\n    \n    return embedding_matrix","a83d4ba8":"def BILSTM_model(input_length, embedding_matrix):\n    ''' Bi-LSTM Model Architecture '''\n    \n    model = Sequential()\n    model.add(Embedding(\n        input_dim = embedding_matrix.shape[0],\n        output_dim = embedding_matrix.shape[1],\n        weights = [embedding_matrix],\n        input_length = input_length\n    ))\n    model.add(Bidirectional(LSTM(units = 64, return_sequences = True, recurrent_dropout = 0.2)))\n    model.add(GlobalMaxPool1D())\n    model.add(BatchNormalization())\n    model.add(Dropout(0.5))\n    model.add(Dense(units = 128, activation = \"relu\"))\n    model.add(Dropout(0.5))\n    model.add(Dense(units = 128, activation = \"relu\"))\n    model.add(Dropout(0.5))\n    model.add(Dense(units = 1, activation = 'sigmoid'))\n    model.compile(optimizer = 'rmsprop', loss = 'binary_crossentropy', metrics = ['accuracy'])\n    \n    return model","3d82f5fc":"def BERT_model(model_layer, learning_rate):\n    \n    input_ids = tf.keras.Input(shape = (60,), dtype = 'int32')\n    attention_masks = tf.keras.Input(shape = (60,), dtype = 'int32')    \n\n    output = model_layer([input_ids, attention_masks])[1]\n#     output = tf.keras.layers.Dense(64, activation = 'relu')(output)\n    output = tf.keras.layers.Dropout(0.2)(output)    \n    output = tf.keras.layers.Dense(units = 1, activation = 'sigmoid')(output)\n    \n    model = tf.keras.models.Model(inputs = [input_ids,attention_masks],outputs = output)\n    model.compile(tf.keras.optimizers.Adam(lr = learning_rate), loss = 'binary_crossentropy', metrics = ['accuracy'])\n    \n    return model","7a49ef54":"# # Encode\n# train_X, test_X, tokenizer = BILSTM_encode()\n\n# # Get Embedding Matirx\n# embedding_matrix = get_embedding_matrix(tokenizer, EMBEDDING_DIM = 300) # EMBEDDING_DIMs: 50, 100, 200, 300\n\n# # Define Model\n# model = BILSTM_model(input_length = train_X.shape[1], embedding_matrix = embedding_matrix)\n\n# model.summary()","8993e45d":"# Encode data\ntrain_input_ids, train_attention_masks = BERT_encode(train_df, 60)\ntest_input_ids, test_attention_masks = BERT_encode(test_df, 60)\n\ntrain_X = [train_input_ids, train_attention_masks]\ntest_X = [test_input_ids, test_attention_masks]\n\n# Define Model\nmodel = BERT_model(bert_base, learning_rate = 1e-5)\n\nmodel.summary()","d82634b1":"EPOCHS = 5\nBATCH_SIZE = 16\nVAL_SPLIT = .000002\nMETRICS = ['accuracy', 'loss']\n\n# Callbacks (https:\/\/www.kaggle.com\/mariapushkareva\/nlp-disaster-tweets-with-glove-and-lstm\/notebook)\ncheckpoint = ModelCheckpoint(\n    'model.h5', \n    monitor = 'val_loss', \n    verbose = 1, \n    save_best_only = True,\n    save_weights_only = True\n)\nreduce_lr = ReduceLROnPlateau(\n    monitor = 'val_loss', \n    factor = 0.2, \n    verbose = 1, \n    patience = 5,                        \n    min_lr = 0.001\n)\n\n# Train model\nhistory = model.fit(\n    x = train_X,\n    y = train_df['target'],\n    epochs = EPOCHS,\n    batch_size = BATCH_SIZE,\n    validation_split = VAL_SPLIT,\n    callbacks = [reduce_lr, checkpoint]\n)","efb01435":"fig, axs = plt.subplots(1, len(METRICS), figsize = (18, 5))\n\nfor i, metric in enumerate(METRICS):\n    axs[i].set_title('Analysis of ' + metric)\n    axs[i].plot(range(EPOCHS), history.history[metric], label = metric)\n    axs[i].plot(range(EPOCHS), history.history[f'val_' + metric], label = f'val_' + metric)\n    axs[i].legend()","fa2f66d0":"# Load best resulting model\nmodel.load_weights('model.h5')\n\n# Prediction\npred = model.predict(test_X, verbose = 2)\npred = np.round(pred).astype(int).reshape(pred.shape[0])\n\n# Create a submission\nsubmission = pd.DataFrame({'id': test_df['id'], 'target': pred})\nsubmission.to_csv(f'.\/submission.csv', index = False)","50a27e49":"#### Text Pre-processing\nAn important step is to patchup the **text** feature. There are a lot of pre-processings we could do; However, not all guarantee a better performance. For instance converting all items to lower-case might not be very good for GloVe. There are many simular cases. However, I'm going to do the followings:\n\n1. Fix abbreviations.\n1. Remove all non-ASCII characters.\n2. Remove all HTML tags.\n3. Remove all numbers.\n4. Remove all emojies.\n5. Convert all words to lowercase. (We will loose some textual features and gain some other, depends on the model and what you are trying to achive)\n6. Remove all stopwords. (Stopwords don't provide much information)\n7. Remove all punctuations.\n8. Lemmatize all words. (This helps reduce size of the model) (Must be one of the last steps since it takes time to complete)\n9. Remove words with too few characters (Default: 2)\n\nExperiments:\n- Re-add *#hashtags* back to the text or not remove them in the first place.\n- Scrape links to gain extra information about the dataset.","d64d91d5":"### Defining Model","41c5e586":"### 2.2.Keyword feature","b63b4c6b":"#### Making a Prediction","559ba350":"### 2.1.Target feature","cd0e6269":"### 2.3.Text feature","3bdeacd0":"### Tokenizing","c20c1d9c":"## Develop the Model","44ffb89e":"## 2.Exploratory Data Analysis (EDA)","051cd72d":"### BERT Model","9bed122e":"# Natural Language Processing with Disaster Tweets","d4f280a5":"Looking at the distribution, I say it's OK. It's not evenly balanced and that can be something we might want to fix by downcasting the data later when optimizing the model. Downcasting may or may not be a good idea as we loose some of our data! (You have to test it to find out its impact on the model)","f8880e25":"![download.jfif](attachment:87dfc95e-cf9b-4906-b115-fd9de595cd49.jfif)","22b041af":"### BI-LSTM Model","b28b98da":"#### Feature Extraction\nExtract *hashtags*, *mentions* and links. They might prove useful by scraping the *links* or clustering on hashtags.","660b8b76":"#### Analysis","b3de43eb":"By analyzing the results and taking a quick look at the data itself, I found:\n- There are only 8 missing entries (less than 1%) which we can take care of by imputing them.\n- Only 222 unique keywords exist (~3%) which might be too good or too bad for us, We'll see..\n- Looking at the 25 most frequently used keywords, they are mostly about disasters (more than 80% of top 25 keywords)\n- Keywords must be lemmatized. (For instance we have both *sinking* and *sunk*)","3dd57e44":"#### More Analysis","311601f2":"#### Analysis","cb95ec19":"#### Plotting the Model","d4035e87":"After looking at a lot of data for the feature, I found problems to be solved and features to be extracted, namely:\n- Extract *hashtags* and store then as **text_hashtags**.\n- Extract *mentions* and store then as **text_mentions**.\n- Extract *links* and store then as **text_links**.\n- Finally remove *links* and *mentions* from the text itself, but keep *hashtags*?\n- Remove emojies and None-ASCII characters.\n- Links can be quite useful as they can be a source of extra information. We might want to scrape each link for possible headlines.\n- Number of words and characters can be useful in the analysis. I'll extract them as two new features for now.\n","50eac82c":"## 1.Load Data","a2a9adc4":"#### Feature Engineering","5c192536":"#### Training the Model"}}