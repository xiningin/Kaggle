{"cell_type":{"29b06ac6":"code","3c2c24c4":"code","230b0a69":"code","6935d8a4":"code","9d5dfad0":"code","0aa404f2":"code","5f6b3084":"code","1d0d9178":"code","18e55369":"code","92f1291a":"code","6af40415":"code","d7335e70":"code","aea07c29":"code","95174129":"code","0843a1e1":"code","f6bcdedf":"code","b20ea2fb":"code","c2d7b542":"code","dd404936":"code","362f1ba5":"code","0492a2a3":"code","f890e49f":"code","96877d42":"code","2feb8217":"code","545a6b5e":"code","5428869b":"code","5eb53672":"code","0e13c9ca":"code","f598e1b8":"code","7236e8bd":"code","6bf7a970":"code","72cfd340":"code","a8cec526":"code","290794c0":"code","e36e6e4c":"code","ba108960":"code","c8d9e9eb":"code","e148205d":"markdown","3c1f8a93":"markdown","ab1aeb1a":"markdown","1d9adf97":"markdown","fdd40816":"markdown","4c2c7fa4":"markdown","802d7a51":"markdown","3de6dd15":"markdown","0ba7d44d":"markdown","4974ca5f":"markdown","6bb8d96a":"markdown","154b336a":"markdown","6a06071e":"markdown"},"source":{"29b06ac6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3c2c24c4":"#pip install --upgrade seaborn","230b0a69":"df2 = pd.read_csv('..\/input\/world-population-19602018\/pop_worldometer_data.csv')\ndf2.describe()","6935d8a4":"df2.isnull().sum()","9d5dfad0":"# Taking care of missing data\ndf2=df2.fillna(df2.mean())","0aa404f2":"top10 = df2[df2.index<=5]\nothers = df2[df2.index>5]\nothers['Country (or dependency)'] = 'Others'\npie_df = top10.append(others)\npie_df = pie_df.groupby('Country (or dependency)').sum().sort_values('Population (2020)',ascending=False).reset_index()","5f6b3084":"fig, ax = plt.subplots(figsize=(8,8), subplot_kw=dict(aspect=\"equal\"))\ningredients = pie_df['Country (or dependency)']\ndata= pie_df['Population (2020)']\n\ndef func(pct, allvals):\n    absolute = int(pct\/100.*np.sum(allvals))\n    return \"{:.1f}%\".format(pct, absolute)\n\nwedges, texts, autotexts = ax.pie(data, labels = pie_df['Country (or dependency)'], autopct=lambda pct: func(pct, data),\n                                  textprops=dict(color=\"w\"),shadow=True)\nax.legend(wedges, ingredients,\n          title=\"Countries\",\n          loc=\"best\",\n          bbox_to_anchor=(1, 0, 0.5, 1))\n\nplt.setp(autotexts, size=15, weight=\"bold\")\nax.set_title(\"World Population \", size=25)","1d0d9178":"grow_fast=df2.sort_values('Yearly Change %',ascending=False).head(10)\ngrow_most=df2.sort_values('Net Change',ascending=False).head(10)\ndensity_most=df2.sort_values('Density (P\/Km\u00b2)',ascending=False).head(10)","18e55369":"fig, axs = plt.subplots(nrows=2, ncols=2, constrained_layout=True,figsize=(12,10))\nax1 = plt.subplot(221)\nax1.margins(0)           # Default margin is 0.05, value 0 means fit\nax1.bar(density_most['Country (or dependency)'], density_most['Density (P\/Km\u00b2)'],color='r')\nplt.ylabel(\"(P\/Km\u00b2)\")\nax1.set_title('Densely Most')\nplt.xticks(rotation=45)\n\nax2 = plt.subplot(222)\nax2.margins(0)           # Default margin is 0.05, value 0 means fit\nax2.bar(grow_fast['Country (or dependency)'], grow_fast['Yearly Change %'],color='g')\nax2.set_title('Grow Fastest')\nplt.ylabel(\"(%)\")\nplt.xticks(rotation=45)\n\nax3 = plt.subplot(212)\nax3.margins(0)           # Default margin is 0.05, value 0 means fit\nax3.bar(grow_most['Country (or dependency)'], grow_most['Net Change'])\nplt.ylabel(\"(10 Million)\")\nax3.set_title('Grow Most')\nplt.xticks(rotation=45)\nfig.tight_layout(pad=1.0)\nsns.despine(left=True, bottom=True, right=True)","92f1291a":"corr = df2.corr()\nplt.figure(figsize=(15,12))\nsns.heatmap(corr, annot=True, linewidths=0.5)","6af40415":"#seems land area and Net change are most relevant variables\n# Importing the dataset\ndataset = df2\nX = dataset.iloc[:, 2:].values\ny = dataset.iloc[:,1].values","d7335e70":"X=X[:,:-1]\n# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","aea07c29":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\nsc_y = StandardScaler()\ny_train = sc_y.fit_transform(y_train.reshape(-1,1))","95174129":"X_dist = pd.DataFrame(X_train)","0843a1e1":"X_dist = X_dist.rename(columns={1:'Yearly Change',2:'Net Change',3:'Density',4:'Land Area',5:'Migrants',6:'Fert. Rate',\n                   7:'Med. Age',8:'Urban Pop'})","f6bcdedf":"X_dist = X_dist.iloc[:,1:]","b20ea2fb":"a = X_dist.stack().reset_index().drop(columns =['level_0']).rename(columns={'level_1':'variables',0:'values'})\na","c2d7b542":"\nsns.displot(\n    a, x=\"values\", col=\"variables\",col_wrap=3,\n    binwidth=1, height=3, facet_kws=dict(margin_titles=True),\n)\n","dd404936":"import scipy\nfor x in range(0,8):  \n    print(scipy.stats.normaltest(X_train[x]))","362f1ba5":"# Fitting Multiple Linear Regression to the Training set\nfrom sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\n# Predicting the Test set results\ny_pred = regressor.predict(X_test)","0492a2a3":"# Building the optimal model using Backward Elimination\nimport statsmodels.api as sm\nX_train = np.append(arr = np.ones((188, 1)).astype(int), values = X_train, axis = 1)\nX_opt = X_train [:, [0, 1, 2, 3, 4, 5, 6, 7]]\nregressor_OLS = sm.OLS(endog = y_train, exog = X_opt).fit()\nregressor_OLS.summary()\n\nX_opt = X_train [:, [1, 2, 3, 4, 5, 6, 7]]\nregressor_OLS = sm.OLS(endog = y_train, exog = X_opt).fit()\nregressor_OLS.summary()\n\nX_opt = X_train [:, [1, 2, 4, 5, 6, 7]]\nregressor_OLS = sm.OLS(endog = y_train, exog = X_opt).fit()\nregressor_OLS.summary()\n\n#Here is the optimal with Adj. R-squared (uncentered): 0.830\nX_opt = X_train [:, [1, 2, 4, 5, 7]]\nregressor_OLS = sm.OLS(endog = y_train, exog = X_opt).fit()\nregressor_OLS.summary()","f890e49f":"df = pd.read_csv('..\/input\/world-population-19602018\/population_total_long.csv')\ndf.describe()","96877d42":"df.info()","2feb8217":"#Check if there are nulls\ndf.isnull().sum()","545a6b5e":"df.head()","5428869b":"#Get world pop data\nwd_pop =df.groupby('Year').sum().reset_index()\nwd_pop = wd_pop.rename({'Count':'World'},axis=1)","5eb53672":"#Then, China's\ncn_pop = df[df['Country Name']=='China'].reset_index().iloc[:,2:]\ncn_pop = cn_pop.rename({'Count':'China'},axis=1)","0e13c9ca":"#Now transform the dataframe into what I need\ncountry_name = df['Country Name'].unique()\ncountry_count = len(df['Country Name'].unique())\n\nfor x in range(0,country_count):\n    x_pop = df[df['Country Name']== country_name[x]].reset_index().iloc[:,2:]\n    x_pop = x_pop.rename({'Count':country_name[x]},axis=1)\n    wd_pop[country_name[x]]=x_pop[country_name[x]]","f598e1b8":"#Now I have the data I wanted and then rename it \npop = wd_pop","7236e8bd":"# Plot the pop for China and world\nplt.figure(figsize=(12,6))\nsns.lineplot(x=\"Year\", y=\"China\",label=\"China\",\n             data = pop)\nsns.lineplot(x=\"Year\", y=\"World\",label=\"World\",\n             data = pop)\nsns.lineplot(x=\"Year\", y=\"India\",label=\"India\",\n             data = pop)\nplt.xticks(rotation=-45)\nplt.title(\"Population Increment 1960-2017\")\nplt.xlabel(\"\")\nplt.ylabel(\"Population\")\n","6bf7a970":"pop2=pop.tail(30)\npop2.Year=pop2.Year.astype(str)","72cfd340":"# Initialize the matplotlib figure\nf, ax = plt.subplots(figsize=(15, 10))\n\n# Plot the world population\nsns.set_color_codes(\"pastel\")\nsns.barplot(y=\"World\", x=\"Year\", data=pop2, label=\"World\", color=\"b\")\n\n# Plot the population of China\nsns.set_color_codes(\"muted\")\nsns.barplot(y=\"China\",x=\"Year\", data = pop2, label = \"China\", color=\"c\")\n\n# Plot the population of China\nsns.set_color_codes(\"muted\")\nsns.barplot(y=\"India\",x=\"Year\",  data = pop2, label=\"India\", color=\"b\")\n\nax.set_yscale('log')\nax.set_yticks(np.arange(10**9, 1.2*10**10, 10**10))\n\nplt.title(\"Population Increment 1988-2017\")\nplt.xlabel(\"\")\nplt.ylabel(\"\")\n# Add a legend and informative axis label\nax.legend(ncol=1, loc=\"upper right\", frameon=True)\nsns.despine(left=False, bottom=False)","a8cec526":"#Preparation\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.pipeline import make_pipeline\n\n#use make_pipeline to combine linear regression with polynomial regiression\ndef PolynomialRegression(degree=2,**kwargs):\n    poly_reg = PolynomialFeatures(degree)\n    lin_reg = LinearRegression(**kwargs)\n    return make_pipeline(poly_reg,lin_reg)\n\nsns.set(rc={'figure.figsize':(10,8)},font='SimHei',font_scale=1.5)","290794c0":"# Polynomial Regression for China's population\n# Importing the dataset\ndataset=pop[['Year','China']]\ny = dataset.iloc[:, 1].values.reshape(-1,1)\nX = dataset.iloc[:, 0].values.reshape(-1,1)\n\nX_test = np.linspace(1960,2040,71)[:,None]\n\nplt.scatter(X.ravel(),y,color='black')\nplt.axis()\nfor degree in [1,5,10]:\n    regressor = PolynomialRegression(degree).fit(X, y)\n    y_test = regressor.predict(X_test)\n    plt.plot(X_test.ravel(),y_test,label='degree={0}'.format(degree))\nplt.title(\"China's Population Predict on Different Fit Degree\")\nplt.legend(loc='best')","e36e6e4c":"#Finding optimal model\nfrom sklearn.model_selection import validation_curve\n\ndegree= np.arange(0,15)\ntrain_score, val_score= validation_curve(PolynomialRegression(),X,y,\n        'polynomialfeatures__degree',degree, cv=7)\n\nplt.plot(degree, np.median(train_score,1), \n         color='blue',label='training score')\nplt.plot(degree, np.median(val_score,1),\n         color='red',label='validation score')\nplt.legend(loc='best')\nplt.ylim(0,1)\nplt.xlabel('degree')\nplt.ylabel('score')","ba108960":"#Finding optimal polynomial degree\nvalidation_score=np.median(val_score,1).tolist()\nmax_index=validation_score.index(max(validation_score))\ndegree[max_index]","c8d9e9eb":"plt.scatter(X.ravel(),y,c='r')\nlim= plt.axis()\nregressor=PolynomialRegression(14).fit(X, y)\ny_test1 = regressor.predict(X_test)\nplt.plot(X_test,y_test1)\nplt.axis(lim)","e148205d":"# Population Relevant Variables","3c1f8a93":"Therefore, \"Yearly Change %\",\t\"Net Change\",\t\"Land Area (Km\u00b2)\", \"Migrants (net)\", \"Med. Age\" are most relevant variables, and predict model are optimal while using these 5 columns as variables.","ab1aeb1a":"### Yeah! Meet our optimal model:","1d9adf97":"# Population Prediction","fdd40816":"Cleaning data","4c2c7fa4":"## 2. Prediction","802d7a51":"### Visualization 3: Correlation Map","3de6dd15":"### Use MLR to check most significant variables","0ba7d44d":"### Visualization 1: Population Proportion","4974ca5f":"Loading data","6bb8d96a":"### Visualization 2: World's Top 10","154b336a":"#### *Hardly tell which one is best model.*","6a06071e":"### Visualize Normal Distribution"}}