{"cell_type":{"2b14117a":"code","9fbc9ba8":"code","3b024913":"code","30d6bcf1":"code","67c6ad92":"code","d286b861":"code","a8e948ce":"code","39bc5677":"code","00d2b1a4":"code","9cecda37":"code","bfc359f8":"code","1b703109":"code","ac17edc8":"code","2684cfe3":"code","622afada":"code","b7f15b5b":"code","ab8cabbe":"code","0ac9ba22":"code","0587b12d":"code","a2bbb592":"code","ea68f955":"code","bb1eb8c3":"markdown","d110bd43":"markdown"},"source":{"2b14117a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings \n\nwarnings.filterwarnings('ignore')","9fbc9ba8":"df = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","3b024913":"df.head().T","30d6bcf1":"df.isnull().sum()","67c6ad92":"df = df.dropna()\n\ndf.drop(columns = 'id', inplace = True)\n\ndf = df[df['gender'] != 'Other']","d286b861":"gnd_val = {\"Male\": 0, \"Female\": 1}\nyn_val = {\"No\": 0, \"Yes\": 1}\narea_val = {\"Rural\":0, \"Urban\":1}\n\n##\ndf['gender'] = df['gender'].map(gnd_val).astype('int64')\ndf['ever_married'] = df['ever_married'].map(yn_val).astype('int64')\ndf['Residence_type'] = df['Residence_type'].map(area_val).astype('int64')","a8e948ce":"for col in ['work_type', 'smoking_status']:\n    dummies = pd.get_dummies(df[col], prefix = col).astype(\"int\")\n    df = df.join(dummies)\n    df = df.drop(columns = [col])","39bc5677":"stke = df['stroke']\ndf = df.drop(columns=['stroke'])\ndf.insert(loc=17, column='stroke', value=stke)","00d2b1a4":"df['stroke'].value_counts()","9cecda37":"## ML\narray = df.values\nX = array[:,1:17]\ny = array[:,17]","bfc359f8":"from sklearn.model_selection import train_test_split, cross_val_score, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import LinearSVC, SVC\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, f1_score, recall_score, precision_score","1b703109":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX = scaler.fit_transform(X)","ac17edc8":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.3, random_state = 45)","2684cfe3":"## Managing ImBalances\n## SMOTE\n\nfrom imblearn.over_sampling import SMOTE\nsmt = SMOTE()\nX_train_sm, y_train_sm = smt.fit_resample(X_train, y_train)\n\n## ADASYN\n\nfrom imblearn.over_sampling import ADASYN\nada = ADASYN(random_state = 130)\nX_train_ada, y_train_ada = ada.fit_resample(X_train, y_train)\n\n## SMOTE + Tomek Links\n\nfrom imblearn.combine import SMOTETomek\nsmtom = SMOTETomek(random_state = 139)\nX_train_smtom, y_train_smtom = smtom.fit_resample(X_train, y_train)\n\n## SMOTE + ENN\n\nfrom imblearn.combine import SMOTEENN\nsmenn = SMOTEENN()\nX_train_smenn, y_train_smenn = smenn.fit_resample(X_train, y_train)","622afada":"## Measuring Model Accuracy\ndef evaluate_model(clf, X_test, y_test, model_name, oversample_type):\n    print('--------------------------------------------')\n    print('Model ', model_name)\n    print('Data Type ', oversample_type)\n    y_pred = clf.predict(X_test)\n    f1 = f1_score(y_test, y_pred, average='weighted')\n    recall = recall_score(y_test, y_pred, average='weighted')\n    precision = precision_score(y_test, y_pred, average='weighted')\n    print(classification_report(y_test, y_pred))\n    print(\"F1 Score \", f1)\n    print(\"Recall \", recall)\n    print(\"Precision \", precision)\n    return [model_name, oversample_type, f1, recall, precision]\n\n### Models\nmodels = {   'LinearDiscriminantAnalysis':LinearDiscriminantAnalysis(),\n    'DecisionTrees': DecisionTreeClassifier(random_state=42),\n    'RandomForest':RandomForestClassifier(random_state=42),\n    'LinearSVC':LinearSVC(random_state=0),\n    'AdaBoostClassifier':AdaBoostClassifier(random_state=42),\n    'SGD':SGDClassifier(random_state = 42),\n    \"CART\": DecisionTreeClassifier(random_state = 42)\n}\n\n### Data sample\noversampled_data = {\n    'ACTUAL':[X_train, y_train],\n    'SMOTE':[X_train_sm, y_train_sm],\n    'ADASYN':[X_train_ada, y_train_ada],\n    'SMOTE_TOMEK':[X_train_smtom, y_train_smtom],\n    'SMOTE_ENN':[X_train_smenn, y_train_smenn]\n}\n\n### Final Output\nfinal_output = []\nfor model_k, model_clf in models.items():\n    for data_type, data in oversampled_data.items():\n        model_clf.fit(data[0], data[1])\n        final_output.append(evaluate_model(model_clf, X_val, y_val, model_k, data_type))","b7f15b5b":"final_df = pd.DataFrame(final_output, columns=['Model', 'DataType', 'F1', 'Recall', 'Precision'])\n\nfinal_df.sort_values(by=\"F1\", ascending=False)","ab8cabbe":"param_grid = {\n    'solver':['svd', 'lsqr', 'eigen'],\n    'shrinkage':['auto', 0.1, 0.001, 0.0001],\n    'store_covariance':[True, False],\n    'tol':[0.1, 0.001, 0.0001]\n}","0ac9ba22":"LDA = LinearDiscriminantAnalysis()\nLDA_cv = GridSearchCV(estimator = LDA, param_grid = param_grid, cv = 5, verbose = 0)","0587b12d":"LDA_cv.fit(X_train, y_train)","a2bbb592":"params = LDA_cv.best_params_\nprint(params)","ea68f955":"LDA_C = LinearDiscriminantAnalysis(shrinkage = params['shrinkage'], \n                                   solver = params['solver'], \n                                   store_covariance = params['store_covariance'], \n                                   tol = params['tol'])\n\n## Fitting\nLDA_C.fit(X_train, y_train)\n\n## Evaluate\nevaluate_model(LDA_C, X_val, y_val, 'LinearDiscriminantAnalysis', 'Actual Data')","bb1eb8c3":"We have a good Accuracy, using the Linear Discriminant Accuracy on the actual Dataset.","d110bd43":"TARGET Set is Imbalanced."}}