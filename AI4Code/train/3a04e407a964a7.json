{"cell_type":{"b2b7c467":"code","1147f92b":"code","e21efbea":"code","a15fbc88":"code","4897d120":"code","d4e51389":"code","4ec551b3":"code","80fc33f5":"code","75890bf7":"code","abd8aa78":"code","4c2c3af3":"code","05bdc564":"code","274c9db3":"code","1ef3006d":"code","852a5c9c":"code","d65b5fb9":"code","c372fd5f":"code","12f3854d":"code","63c7ac2d":"code","60645cd5":"code","9f9ecb51":"code","1c77b199":"code","fcd21497":"code","b02191b5":"code","862abcf0":"code","e7f31efb":"code","e29e543a":"code","7d708836":"code","9a79efd3":"code","6983ee28":"markdown","fb7081b8":"markdown","0ed4dbdd":"markdown","101b9f54":"markdown","d41c0d26":"markdown","6b3962a7":"markdown","d684be31":"markdown","15ff7f97":"markdown","460804c0":"markdown","69aac707":"markdown"},"source":{"b2b7c467":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1147f92b":"import matplotlib.pyplot as plt","e21efbea":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")\n","a15fbc88":"print(train.shape)\nprint(test_data.shape)","4897d120":"train.isnull().sum(axis = 0)","d4e51389":"train.drop(['PassengerId','Name','Cabin'],axis=1,inplace=True)\ntest = test_data.drop(['PassengerId','Name','Cabin'],axis=1)","4ec551b3":"train['Ticket'].value_counts()","80fc33f5":"train.drop('Ticket',axis=1,inplace=True)\ntest.drop('Ticket',axis=1,inplace=True)","75890bf7":"train['Embarked'].value_counts()","abd8aa78":"train.info()","4c2c3af3":"train['Survived'].value_counts()","05bdc564":"train['Embarked'].replace('C',1, inplace=True)\ntrain['Embarked'].replace('Q',2, inplace=True)\ntrain['Embarked'].replace('S',3, inplace=True)\ntrain['Embarked'].fillna(3, inplace=True)\n\ntest['Embarked'].replace('C',1, inplace=True)\ntest['Embarked'].replace('Q',2, inplace=True)\ntest['Embarked'].replace('S',3, inplace=True)\ntest['Embarked'].fillna(3, inplace=True)\n\n","274c9db3":"train['Sex'].replace('male',0, inplace=True)\ntrain['Sex'].replace('female',1, inplace=True)\n\ntest['Sex'].replace('male',0, inplace=True)\ntest['Sex'].replace('female',1, inplace=True)","1ef3006d":"train['Age'].fillna(train['Age'].median(),inplace=True)\ntest['Age'].fillna(test['Age'].median(),inplace=True)\n","852a5c9c":"train.head()","d65b5fb9":"train.info()","c372fd5f":"test.info()","12f3854d":"test['Fare'].fillna(test['Fare'].median(),inplace=True)","63c7ac2d":"test.info()","60645cd5":"train.describe()","9f9ecb51":"train.hist(figsize=(20,15))","1c77b199":"corr_matrix = train.corr()\ncorr_matrix['Survived'].sort_values(ascending=False)","fcd21497":"from sklearn.model_selection import train_test_split\ntrain_set, test_set  = train_test_split(train, test_size=0.2, random_state=42)","b02191b5":"x_train = train_set.drop('Survived',axis=1)\ny_train = train_set['Survived']\n\nx_test = test_set.drop('Survived',axis=1)\ny_test = test_set['Survived']\n\n","862abcf0":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nmy_pipeline = Pipeline([\n    ('std_scaler', StandardScaler()),\n])","e7f31efb":"up_xtrain = my_pipeline.fit_transform(x_train)\nup_xtest = my_pipeline.fit_transform(x_test)","e29e543a":"from sklearn.ensemble import RandomForestClassifier\n\nclf1 = RandomForestClassifier()\nclf1.fit(up_xtrain, y_train)","7d708836":"from sklearn.metrics import accuracy_score\n\npred_y = clf1.predict(up_xtest)\nscore = accuracy_score(y_test, pred_y)\nprint(score)\n","9a79efd3":"test_x = my_pipeline.fit_transform(test)\n\nans = clf1.predict(test_x)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': ans})\noutput.to_csv('mlSubmission1.csv', index=False)","6983ee28":"# Filling NaN values by their median value","fb7081b8":"# Now calculating the label for given test file","0ed4dbdd":"# Spliting the train data for training and testing ","101b9f54":"# We can not handle categorical data so converting into numeric data","d41c0d26":"\n\n# Loading the given data","6b3962a7":"# **As 'PassengerId' and 'Name' are not relevant to this type of prediction so we should drop it**\n#   **And we don't have much data for 'Cabin' so we should also drop it**","d684be31":"# Looking for correlation","15ff7f97":"# We can also drop 'Ticket' as it is also irrelevant ","460804c0":"# Applying RandomForestClassifier","69aac707":"# Creating pipeline for scaling the data"}}