{"cell_type":{"5826ed80":"code","5960b3b9":"code","80f534c1":"code","c36aa5aa":"code","ae4eed28":"code","2ab71baa":"code","dcc6a94c":"code","bf5ed70e":"code","71f38d42":"code","1dd8c9bb":"code","e8e5144d":"code","7efa9680":"code","ce2dd2fb":"code","759f1396":"code","2edc65ac":"code","6d4699ed":"code","a5c0e944":"code","175b3f51":"code","57e1dbb1":"code","7d7260d6":"code","3e0c092d":"code","7cbb161f":"code","ee0409a9":"code","76e576ad":"code","bf77cb77":"code","82d7816b":"code","9ac6141a":"markdown","35d4a8e0":"markdown","a831763d":"markdown","c1db31b4":"markdown","416ed47d":"markdown","9ecd7418":"markdown","fd9c42ce":"markdown","5da302ce":"markdown"},"source":{"5826ed80":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5960b3b9":"train = pd.read_csv(\"\/kaggle\/input\/learn-together\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/learn-together\/test.csv\")","80f534c1":"train.head()","c36aa5aa":"test.head()","ae4eed28":"print(f\"Missing values in train: {train.isnull().values.any()}\")\nprint(f\"Missing values in test: {test.isnull().values.any()}\")","2ab71baa":"print(train.isnull().sum())\nprint(test.isnull().sum())","dcc6a94c":"print(train.duplicated(subset=None, keep='first').sum())\nprint(test.duplicated(subset=None, keep='first').sum())","bf5ed70e":"train.info()","71f38d42":"test.info()","1dd8c9bb":"print(\"The number of unique values per feature in the train set:\")\nprint(train.nunique())","e8e5144d":"print(\"The number of unique values per feature in the test set:\")\nprint(test.nunique())","7efa9680":"#new variable CoverType\ndef CoverType(row):\n    if row.Cover_Type == 1:\n        return 'Spruce\/Fir'\n    elif row.Cover_Type == 2:\n        return 'Lodgepole Pine'\n    elif row.Cover_Type == 3:\n        return 'Ponderosa Pine'\n    elif row.Cover_Type == 4:\n        return 'Cottonwood\/Willow'\n    elif row.Cover_Type == 5:\n        return 'Aspen'\n    elif row.Cover_Type == 6:\n        return 'Duglas-fir'\n    else: \n        return 'Krummholz'\ntrain['CoverTypeName'] = train.apply(CoverType, axis='columns')    ","ce2dd2fb":"train.head()","759f1396":"# split into the 7 types\nspruce = train[train.Cover_Type == 1]\nlodgepole = train[train.Cover_Type == 2]\nponderosa = train[train.Cover_Type == 3]\ncottonwood = train[train.Cover_Type == 4]\naspen = train[train.Cover_Type == 5]\ndouglas = train[train.Cover_Type == 6]\nkrummholz = train[train.Cover_Type == 7]","2edc65ac":"spruce.head()","6d4699ed":"# Get counts\ntrain.CoverTypeName.value_counts()","a5c0e944":"# look a the first 10 features which are continous features\ncont_feat = list(train.columns[:10])  #make a list of the columns with continous features\ntrain[cont_feat].describe()","175b3f51":"sns.distplot(a = spruce['Elevation'], label = \"Spruce\")\nsns.distplot(a = lodgepole['Elevation'], label = \"Lodgepole\")\nsns.distplot(a = ponderosa['Elevation'], label = \"Ponderosa\")\nsns.distplot(a = cottonwood['Elevation'], label = \"Cottonwood\")\nsns.distplot(a = aspen['Elevation'], label = \"Aspen\")\nsns.distplot(a = douglas['Elevation'], label = \"Douglas\")\nsns.distplot(a = krummholz['Elevation'], label = \"Krummholz\")\n\n# Add title\nplt.title(\"Histogram of Elevation, by cover type\")\n\n# Force legend to appear\nplt.legend()","57e1dbb1":"# scatter plots to show correlation to the Cover_Type?\nnum_columns = [\"Elevation\", \"Aspect\", \"Slope\", \"Horizontal_Distance_To_Hydrology\", \"Vertical_Distance_To_Hydrology\", \"Horizontal_Distance_To_Roadways\", \"Hillshade_9am\"\n               , \"Hillshade_Noon\", \"Hillshade_3pm\", \"Horizontal_Distance_To_Fire_Points\"]\n\nfor i in num_columns:\n    plt.figure()\n    train.plot(kind=\"scatter\", x=\"Cover_Type\", y=i)\n    plt.ylabel(i)\n    plt.xlabel(\"Cover_Type\")","7d7260d6":"i = \"Wilderness_Area1\"\nsns.countplot(x=i, hue=\"CoverTypeName\" ,data=train)\n# Add title\nplt.title(\"Counts of Wilderness area 1 by cover type\")","3e0c092d":"i = \"Wilderness_Area2\"\nsns.countplot(x=i, hue=\"CoverTypeName\" ,data=train)\n# Add title\nplt.title(\"Counts of Wilderness area 2 by cover type\")","7cbb161f":"i = \"Wilderness_Area3\"\nsns.countplot(x=i, hue=\"CoverTypeName\" ,data=train)\n# Add title\nplt.title(\"Counts of Wilderness area 3 by cover type\")","ee0409a9":"i = \"Wilderness_Area4\"\nsns.countplot(x=i, hue=\"CoverTypeName\" ,data=train)\n# Add title\nplt.title(\"Counts of Wilderness area 4 by cover type\")","76e576ad":"soil = \"Soil_Type1\" #Soil_Type1 - 40\narea = \"Wilderness_Area1\" #Wilderness_Area1 = 4\nsns.catplot(x=area, hue = \"CoverTypeName\", col=soil, data=train, kind=\"count\")","bf77cb77":"soil = \"Soil_Type40\" #Soil_Type1 - 40\narea = \"Wilderness_Area1\" #Wilderness_Area1 = 4\nsns.catplot(x=area, hue = \"CoverTypeName\", col=soil, data=train, kind=\"count\")","82d7816b":"spruce.groupby(['Wilderness_Area1','Wilderness_Area2','Wilderness_Area3','Wilderness_Area4'])['CoverTypeName'].count()","9ac6141a":"Plot all the cover types against elevation","35d4a8e0":"Divide training sets into the 7 cover types (predicition types)\n\nFrom the competition\n1 - Spruce\/Fir\n2 - Lodgepole Pine\n3 - Ponderosa Pine\n4 - Cottonwood\/Willow\n5 - Aspen\n6 - Douglas-fir\n7 - Krummholz","a831763d":"Load test and training data","c1db31b4":"Look at the data","416ed47d":"View the whole dataset","9ecd7418":"Start looking into categorical features","fd9c42ce":"Any duplicates?","5da302ce":"Missing values?"}}