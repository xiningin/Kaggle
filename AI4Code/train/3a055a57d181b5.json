{"cell_type":{"6e1dc499":"code","ccb4d361":"code","c6bcec00":"code","410b7cc2":"code","a97be860":"code","ad85c36b":"code","77fcedf6":"code","6be183ce":"code","f2f6090d":"code","e23ef3c6":"code","97d6e4bb":"code","fbef50b1":"code","48badc5d":"code","7a0699b0":"code","62ab854f":"code","663d382c":"code","e1de486c":"code","5ae9a97a":"code","df608fd6":"code","751b7e6d":"code","cf001bf3":"code","4f658cd3":"code","315bed33":"code","48a38dce":"code","d6ab11f7":"code","c1993a67":"code","ef94b98d":"code","e40778c3":"markdown"},"source":{"6e1dc499":"import numpy as np\nimport pandas as pd\nimport os\nprint(os.listdir(\"..\/input\"))","ccb4d361":"!pip install git+https:\/\/github.com\/qubvel\/efficientnet","c6bcec00":"from efficientnet import EfficientNetB3","410b7cc2":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten \nfrom keras.models import Model\nfrom keras import optimizers\nfrom keras.utils import np_utils\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline","a97be860":"# Load the data\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","ad85c36b":"Y_train = train[\"label\"]\n\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1) ","77fcedf6":"X_train.shape, test.shape","6be183ce":"# Normilize data\nX_train = X_train.astype('float32')\ntest = test.astype('float32')\nX_train \/= 255\ntest \/= 255","f2f6090d":"X_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)","e23ef3c6":"X_train.shape, test.shape","97d6e4bb":"X_train3 = np.full((42000, 28, 28, 3), 0.0)\n\nfor i, s in enumerate(X_train):\n    X_train3[i] = cv2.cvtColor(s, cv2.COLOR_GRAY2RGB) ","fbef50b1":"g = plt.imshow(X_train3[1])","48badc5d":"test3 = np.full((28000, 28, 28, 3), 0.0)\n\nfor i, s in enumerate(test):\n    test3[i] = cv2.cvtColor(s, cv2.COLOR_GRAY2RGB) ","7a0699b0":"g = plt.imshow(test3[1])","62ab854f":"X_train3.shape, test3.shape","663d382c":"Y_train = np_utils.to_categorical(Y_train, 10)\nY_train","e1de486c":"model = EfficientNetB3(weights='imagenet', input_shape = (28,28,3), include_top=False)","5ae9a97a":"model.trainable = False","df608fd6":"x = model.output\nx = Flatten()(x)\nx = Dense(1024, activation=\"relu\")(x)\nx = Dropout(0.5)(x)\npredictions = Dense(units = 10, activation=\"softmax\")(x)\nmodel_f = Model(input = model.input, output = predictions)\nmodel_f.compile(optimizers.rmsprop(lr=0.0001, decay=1e-6),loss='categorical_crossentropy',metrics=['accuracy'])","751b7e6d":"%%time\n# Train model\nhistory = model_f.fit(X_train3, Y_train,\n              epochs=10,\n              batch_size = 128,\n              validation_split=0.1,\n              shuffle=True,\n              verbose=2)","cf001bf3":"import json\n\nwith open('history.json', 'w') as f:\n    json.dump(history.history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()","4f658cd3":"%%time\n# Prediction\ntest_predictions = model_f.predict(test3)","315bed33":"test_predictions.shape","48a38dce":"test_predictions[0]","d6ab11f7":"# select the index with the maximum probability\nresults = np.argmax(test_predictions,axis = 1)\nresults = pd.Series(results,name=\"Label\")","c1993a67":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"submission.csv\",index=False)","ef94b98d":"submission.head()","e40778c3":"Simple example of transfer learning from pretrained model using Keras and Efficientnet (https:\/\/pypi.org\/project\/efficientnet\/)."}}