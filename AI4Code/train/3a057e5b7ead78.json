{"cell_type":{"eb3d8f37":"code","fcdf8e99":"code","3a6bfce5":"code","7852a324":"code","c25b0204":"code","3781eb72":"code","1be204de":"code","c70b3771":"code","dcf81bbf":"code","94767a95":"code","287442bc":"code","ac5777c6":"code","c87cd3fc":"code","edc97ee4":"code","9303c447":"code","11f24ab8":"code","23e9688c":"code","809bb786":"code","c4206d73":"code","6d5d95c4":"code","ce32ffe3":"code","180fa844":"code","f4faec92":"code","fe37c1c6":"code","3582aef9":"code","446f9e50":"code","bde42610":"code","b46359f1":"code","192fe38e":"code","d5626e53":"code","78d1bd5c":"code","835ae2cf":"code","bf1df84a":"code","511e4e85":"code","49c16783":"code","a7445ffc":"code","d8819033":"code","caa3c5d9":"code","b55bfe77":"code","9c515aa1":"code","5e2bf101":"code","df464291":"code","a916f217":"code","a166055f":"code","52f8e18e":"code","0d38d93c":"code","782fb2eb":"code","86c9ff63":"code","4c1c20e4":"code","19bdb607":"code","f3ae2556":"code","2d6cf1b4":"code","bc26bfeb":"code","82fc882a":"code","5dd2d4ef":"code","2327bde7":"code","fba2b0f3":"code","fea28930":"code","15512aa3":"code","2b08f4ec":"code","ad658746":"code","8a2c0cd3":"code","fec78474":"code","a502286f":"code","3cddbf3b":"code","6b9fcab4":"code","b1f7a4e8":"code","29f83bd0":"code","eba47d3c":"code","f58c2e6d":"code","28b7eef7":"code","66145f7b":"code","37d9750f":"code","c6b773a5":"code","c623ebb8":"code","fb8a4454":"code","e158fd13":"code","5e0f6605":"code","47c1b35a":"code","89556f54":"code","562c5448":"code","f82d80d2":"code","95393620":"code","5ce7a932":"code","d3efd26c":"code","52f16138":"code","a84da87f":"code","af009054":"code","1246558c":"code","fc8ab00f":"code","01f550c6":"code","64cd8f34":"code","1efa5fb1":"code","3431989a":"code","356c788a":"code","4b3176aa":"code","c269def2":"code","37dd29bb":"code","c855eaa2":"code","ed7dbdd6":"code","57100a06":"code","81f2d40e":"code","d8b9edd3":"code","103bd1b8":"code","fa312633":"code","41a410f9":"code","69a7a31a":"code","8c1babbd":"code","6fe8ea05":"code","63dc348a":"code","b4d440c1":"code","af392b9b":"code","983c4e62":"code","fa28ea7d":"code","d8367cb8":"code","980c8c46":"code","1a2e0c81":"code","e49a0eef":"code","df332b86":"code","740ce40f":"code","d87ba249":"code","627c2e8a":"code","dbba6278":"code","33a073c9":"code","69c2c7ef":"code","ddccbe30":"code","1563ea17":"code","87b4ff09":"code","dd7deb0b":"code","3e40daad":"code","8f2ee74e":"code","c9b4530b":"code","50524969":"code","33acebaa":"code","db797d28":"code","00dc7cd9":"code","04b88962":"code","4423276c":"code","59933e56":"code","bbc846d0":"code","90a02281":"code","a77fcd15":"code","bd857358":"code","34022e8d":"code","bfea28f2":"code","83c611c2":"code","63c67958":"code","b5df9b30":"code","69be17e0":"code","ba3549d1":"code","0f605a2f":"code","1b49efbc":"code","ea1b5de1":"code","ab419220":"code","46570db0":"code","a6784a55":"code","ebb83e48":"code","faeb052a":"code","65307b56":"code","42d896c0":"code","a76391ba":"code","1640a20e":"code","dffb3e3f":"code","033af939":"code","754db08a":"code","23756324":"code","c669db87":"code","93d21fb4":"code","4bc0776c":"code","e93fd360":"code","c7a274eb":"code","dab2569b":"code","65614a9d":"code","b13b39b8":"code","db633f1e":"code","d6a8b794":"code","6a2130f1":"code","db948bbd":"code","2113d270":"code","839af3d2":"code","c56e9365":"code","0aebd3e8":"code","f55cb5dc":"code","34fae956":"code","9a3d058d":"code","13bb9f6e":"code","f70c2c7a":"code","ae9d0c2e":"code","4c24bc92":"code","e2ff019b":"code","de664bda":"code","254fd891":"code","f235a472":"code","bd689a23":"code","43df1283":"code","db12377c":"code","9eec9807":"code","795765f8":"code","5247f679":"code","8e9a2efe":"code","2ee7d79c":"code","62e190bb":"code","d37e9437":"code","35283b6f":"code","d3e5d964":"code","1a970eda":"code","d01fb094":"code","6278f94a":"code","da5326f7":"code","f1f617ae":"code","55ad2ab0":"code","683fbdeb":"code","ba1ac45b":"code","0ad5ffe3":"code","2a85a8a4":"code","6affbb0e":"code","aa275090":"code","921b323b":"code","21f11b48":"code","04c26c13":"code","31c837ab":"code","40e2fad3":"markdown","b9917195":"markdown","7704ba26":"markdown","5c9debc1":"markdown","e2f4393c":"markdown","ac548fd2":"markdown","d6041610":"markdown","d074cc66":"markdown","ffb512b7":"markdown","6d8b55f0":"markdown","c591c1b1":"markdown","10c5bd92":"markdown","22b3580b":"markdown","e6865b6a":"markdown","78e43c7a":"markdown","752b5eaa":"markdown","e8f2b69e":"markdown","75686d1c":"markdown","e3196980":"markdown","cb227cbf":"markdown","4b20888e":"markdown","6501365f":"markdown","0d93d2e9":"markdown","796f2f35":"markdown","03d74ef7":"markdown","7947d5d2":"markdown","4266679b":"markdown","65db3ad1":"markdown","cc190637":"markdown","591e93a7":"markdown","4c7a7e5d":"markdown","60d5cfb0":"markdown","3bf0e612":"markdown","187e2fcb":"markdown","17b1fda3":"markdown","7f482452":"markdown","2588043c":"markdown","0c1cfb9e":"markdown","17009170":"markdown","a8c65681":"markdown","d415b45d":"markdown","1888ce11":"markdown","8250cfd3":"markdown","54e43d76":"markdown","b6b4f9d2":"markdown","c148a61a":"markdown","2dd5c6c6":"markdown","2064428e":"markdown","799a9f2d":"markdown","92f194f2":"markdown","6703e7e6":"markdown","453eb14c":"markdown","dc67822f":"markdown","13cd90e6":"markdown","8689f348":"markdown","430c2c62":"markdown","010d440d":"markdown","007f7131":"markdown","04d6d65d":"markdown","8642a107":"markdown","a36fc917":"markdown","dc1f669e":"markdown","e755ddeb":"markdown","213201dc":"markdown","258e547a":"markdown","99f3e88c":"markdown","681a515c":"markdown","6812b914":"markdown","6d94e101":"markdown","09f225b0":"markdown","b9f01f2e":"markdown","32dfb308":"markdown","60458823":"markdown","7658905a":"markdown","3d248def":"markdown","3caf011a":"markdown","00d73117":"markdown","a903829a":"markdown","5aab4c92":"markdown","d0de016c":"markdown","570095b3":"markdown","b8f714cb":"markdown","54733c1d":"markdown","b80e5d33":"markdown","c07fcc4b":"markdown","619bc581":"markdown","d124afef":"markdown","89a5ab1a":"markdown","8bd7f10a":"markdown","0de1f1e9":"markdown","1edaff3f":"markdown","43828892":"markdown","70cd2090":"markdown","1247d68f":"markdown","8b6aae31":"markdown","1e2cd9c9":"markdown","819d78eb":"markdown","84c1d4c7":"markdown","c98ffc49":"markdown","e4e452ee":"markdown","b57f9282":"markdown","c289831a":"markdown","8b294a55":"markdown","5f518b71":"markdown","270987c9":"markdown","43ae7318":"markdown","d7594e4a":"markdown","002be8a0":"markdown","a70b2e98":"markdown","cf932680":"markdown","06b0d903":"markdown","1f0ce65a":"markdown","0dad9115":"markdown","ffc5f5a7":"markdown","ef1839d0":"markdown","132709a5":"markdown","49672caf":"markdown","7bbbc5ef":"markdown","df62d31a":"markdown","38f27ef7":"markdown","f238eb80":"markdown","26946fb7":"markdown","50a26e5a":"markdown","b98a3cab":"markdown","3f0d9a89":"markdown","b760f1c8":"markdown","41285042":"markdown","4b4d21be":"markdown","5b5a7759":"markdown","83932ef1":"markdown","4392a444":"markdown","806d0dff":"markdown","5764e894":"markdown","8a9b7eac":"markdown","29f10391":"markdown","fc85e9ae":"markdown","a79ff416":"markdown","30a0d371":"markdown","e3753849":"markdown","209a8d04":"markdown","5863f47f":"markdown","1965e3c9":"markdown","a4bd5738":"markdown","4c40a7f7":"markdown","4537063a":"markdown","59877469":"markdown","25ab67c1":"markdown","9d95c00e":"markdown","48d59b05":"markdown","b3290a0d":"markdown","a7dbbcae":"markdown","6be8fb4f":"markdown","10adb0fd":"markdown","480e037f":"markdown","3dcbeabe":"markdown","1532bab9":"markdown","a6b0f4c4":"markdown","ac3ddabe":"markdown","06552b42":"markdown","f2e60792":"markdown","4f512c3d":"markdown","abb2a2b2":"markdown","05426ca9":"markdown","14b94ff1":"markdown","1ec1ea6b":"markdown","bcf232d5":"markdown","efcbf943":"markdown","08db15f8":"markdown","f0131377":"markdown","20384c1d":"markdown","02b37fb7":"markdown","2a59bbd1":"markdown","8a4713ab":"markdown","6064730b":"markdown","fb64e942":"markdown","16a5dd1f":"markdown","06d7a112":"markdown","8b5f99a7":"markdown","1873b5de":"markdown","f2a06d0d":"markdown","9b9420b4":"markdown","306715a9":"markdown","47d95b06":"markdown","78cff2df":"markdown","5a9b18dc":"markdown","83e3005c":"markdown","3d8b7e9f":"markdown","5761e6ca":"markdown","7d4fdae1":"markdown","5fb13cd6":"markdown","c966e0aa":"markdown","4cac5e5c":"markdown","b94000fc":"markdown","047050ef":"markdown","f6ff7cc5":"markdown","10ecb707":"markdown","a69888d1":"markdown","d754ef29":"markdown","f4b4bf23":"markdown","0ee62fc5":"markdown","15e06842":"markdown","29b0a596":"markdown","8ac95444":"markdown","cc2d791b":"markdown","c167db4a":"markdown","85c9f07a":"markdown","45b81e9b":"markdown","8d35d6bf":"markdown","9905e6d0":"markdown","edefa19a":"markdown","44924ade":"markdown","5f96264f":"markdown","935a4186":"markdown","1420fe47":"markdown","a06b95ca":"markdown","eea4ad43":"markdown","702bd5af":"markdown","d5182f1d":"markdown","ecdfa37b":"markdown","6a82bc26":"markdown","f5dd9397":"markdown","d7e8c8bd":"markdown"},"source":{"eb3d8f37":"import numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\ndf = pd.read_csv('\/kaggle\/input\/desafio-2\/dataset_desafio_2.csv')\ndf","fcdf8e99":"from sklearn.base import BaseEstimator, TransformerMixin\n\n\n# All sklearn Transforms must have the `transform` and `fit` methods\nclass DropColumns(BaseEstimator, TransformerMixin):\n    def __init__(self, columns):\n        self.columns = columns\n\n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X):\n        # Primeiro realizamos a c\u00f3pia do dataframe 'X' de entrada\n        data = X.copy()\n        # Retornamos um novo dataframe sem as colunas indesejadas\n        return data.drop(labels=self.columns, axis='columns')","3a6bfce5":"from sklearn.compose import ColumnTransformer\nfrom sklearn.impute import SimpleImputer\n\n\n# All sklearn Transforms must have the `transform` and `fit` methods\nclass ColumnsTransformerGOINGLES(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X):\n        # Primeiro realizamos a c\u00f3pia do dataframe 'X' de entrada\n        data = X.copy()\n        cl = ColumnTransformer([\n        ('go_median', SimpleImputer(missing_values=np.nan,strategy='median'), ['NOTA_GO']),\n        ('ingles_contant', SimpleImputer(missing_values=np.nan,strategy='most_frequent'), ['INGLES'])\n                          \n        ],remainder='drop')\n        data['NOTA_GO'] = pd.DataFrame(cl.fit_transform(data))[0]\n        data['INGLES'] = pd.DataFrame(cl.fit_transform(data))[1]\n        return data","7852a324":"class SimpleImputerCustom(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X):\n        # Primeiro realizamos a c\u00f3pia do dataframe 'X' de entrada\n        data = X.copy()\n        si = SimpleImputer(missing_values=np.nan,strategy='median')\n        return pd.DataFrame.from_records(data=si.fit_transform(X=data), columns=data.columns)","c25b0204":"class CombNotaReprov(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n      \n    def comb(self, data):\n        return pd.Series([\n        data['NOTA_DE']-data['REPROVACOES_DE'],\n        data['NOTA_EM']-data['REPROVACOES_EM'],\n        data['NOTA_MF']-data['REPROVACOES_MF'],\n        data['NOTA_GO']-data['REPROVACOES_GO']], index =['COMB_DE', 'COMB_EM','COMB_MF','COMB_GO']\n        )\n          \n    def transform(self, X):\n        # Primeiro realizamos a c\u00f3pia do dataframe 'X' de entrada\n        data = X.copy()\n        data = data.join(data.apply(self.comb, axis=1))\n        data.drop(labels=['REPROVACOES_DE', 'REPROVACOES_EM', 'REPROVACOES_MF', 'REPROVACOES_GO'], axis=1, inplace=True)\n        data.drop(labels=['NOTA_DE', 'NOTA_EM', 'NOTA_MF', 'NOTA_GO'], axis=1, inplace=True)\n        return data","3781eb72":"class CombMedias(BaseEstimator, TransformerMixin):\n    def __init__(self, columns, name):\n        self.columns = columns\n        self.name = name\n\n    def fit(self, X, y=None):\n        return self\n      \n    def comb(self, data):\n        return pd.Series([\n        np.sum([data[nota] for nota in self.columns])\/len(self.columns)], index =[f'COMB_{self.name}']\n        )\n          \n    def transform(self, X):\n        # Primeiro realizamos a c\u00f3pia do dataframe 'X' de entrada\n        data = X.copy()\n        data = data.join(data.apply(self.comb, axis=1))\n        return data","1be204de":"class FillNan(BaseEstimator, TransformerMixin):\n    def __init__(self, column):\n        self.column = column\n        self.dataframe = None\n\n    def fit(self, X, y=None):\n        self.dataframe = X.copy().join(y) if y is not None else None\n        return self\n   \n    def transform(self, X):\n        # Primeiro realizamos a c\u00f3pia do dataframe 'X' de entrada\n        data = X.copy()\n        if self.dataframe is not None:\n          data = self.dataframe\n          perfis = data['PERFIL'][:]\n          medias = data.groupby('PERFIL')[self.column].median()\n          data = data.set_index(['PERFIL'])\n          data[self.column] = data[self.column].fillna(medias)\n          data.reset_index(inplace=True)\n          data.drop(['PERFIL'], axis=1, inplace=True)\n          self.dataframe = None\n        return data","c70b3771":"class DropNAGOINGLES(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X):\n        # Primeiro realizamos a c\u00f3pia do dataframe 'X' de entrada\n        data = X.copy()\n        data.dropna(inplace=True)\n        return data.reset_index(inplace=True)","dcf81bbf":"# Sampling\nsamples = 5773 ","94767a95":"from imblearn.over_sampling import SMOTE\n\nsmote_1 = SMOTE(sampling_strategy='all', random_state=500, n_jobs=2)\nsmote_2 = SMOTE(sampling_strategy='auto', random_state=500, n_jobs=2)\nsmote_3 = SMOTE(sampling_strategy={'DIFICULDADE':samples, 'EXATAS':samples, 'EXCELENTE':samples, 'HUMANAS':samples, 'MUITO_BOM':samples}, random_state=500, n_jobs=2)","287442bc":"from imblearn.over_sampling import SVMSMOTE\n\nsvmsmote_1 = SVMSMOTE(sampling_strategy='all', random_state=500, n_jobs=2)\nsvmsmote_2 = SVMSMOTE(sampling_strategy='auto', random_state=500, n_jobs=2)\nsvmsmote_3 = SVMSMOTE(sampling_strategy={'DIFICULDADE':samples, 'EXATAS':samples, 'EXCELENTE':samples, 'HUMANAS':samples, 'MUITO_BOM':samples}, random_state=500, n_jobs=2)","ac5777c6":"from imblearn.under_sampling import TomekLinks\n\ntlusmote_1 = TomekLinks(sampling_strategy='all', random_state=500, n_jobs=2)\ntlusmote_2 = TomekLinks(sampling_strategy='auto', random_state=500, n_jobs=2)\ntlusmote_3 = TomekLinks(sampling_strategy='majority', random_state=500, n_jobs=2)","c87cd3fc":"smote_list = {'smote_tradicional_all':smote_1,\n              'smote_tradicional_auto':smote_2,\n              'smote_tradicional_custom':smote_3,\n              'smote_svm_all':svmsmote_1,\n              'smote_svm_auto':svmsmote_2,\n              'smote_svm_custom':svmsmote_3,\n              'smote_tlunder_all':tlusmote_1,\n              'smote_tlunder_auto':tlusmote_2,\n              'smote_tlunder_majority':tlusmote_3}","edc97ee4":"from sklearn.ensemble import RandomForestClassifier\n\nrf_model = RandomForestClassifier(n_estimators=300, min_samples_split=50, criterion='gini', n_jobs=2)","9303c447":"import xgboost as xgb\n\nxgb_model = xgb.XGBClassifier(objective='multi:softprob', learning_rate = 0.01,\n                max_depth = 5, n_estimators =500, n_jobs=2, subsample=0.6, random_state=42)","11f24ab8":"from sklearn.ensemble import StackingClassifier, ExtraTreesClassifier\n\nfinal_estimator = ExtraTreesClassifier(n_jobs=2)\n\nstack_model = StackingClassifier([('ransom-forest', rf_model), ('xgboost', xgb_model)],final_estimator=final_estimator, n_jobs=2)","23e9688c":"\nmisael_model = RandomForestClassifier(n_estimators=1000, max_depth=10, random_state=0, criterion='entropy', n_jobs=2)","809bb786":"clarisse_model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=None, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=10,\n                       min_weight_fraction_leaf=0.0, n_estimators=1600,\n                       n_jobs=2, oob_score=False, random_state=42, verbose=0,\n                       warm_start=False)","c4206d73":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nrs = RobustScaler()\nss = StandardScaler()\nmms = MinMaxScaler()\n\n\ndef classify(model, df_ibm, smote_used=None, scaler=None):\n  # prepara\u00e7\u00e3o das amostras\n  X = df_ibm.drop(['PERFIL'], axis=1).to_numpy()\n  y = df_ibm['PERFIL'].to_numpy()\n\n  if scaler == 'robust': X = rs.fit_transform(X)\n  elif scaler == 'standard': X = ss.fit_transform(X)\n  elif scaler == 'minmax': X = mms.fit_transform(X)\n\n\n  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=500)\n\n  if smote_used: X_train, y_train = smote_used.fit_resample(X_train, y_train)\n\n  # Classification Report e Confusion Matrix\n  y_predic = model.fit(X_train, y_train).predict(X_test)\n  report = classification_report(y_test, y_predic, output_dict=True)\n  report = pd.DataFrame.from_dict(report).T\n  plt_report = report['precision'].drop(['accuracy', 'macro avg', 'weighted avg'])\n  return plt_report, accuracy_score(y_test, y_predic)\n\ndef plot_results(model, df, scaler=None):\n  accuracies = pd.DataFrame()\n  scores = []\n  for name, method in smote_list.items():\n    accuracies[name], score = classify(model,df, method, scaler=scaler)\n    scores.append(score)\n  accuracies['standard'], score = classify(model, df, scaler=scaler)\n  scores.append(score)\n\n  fig = plt.figure()\n  sns.set_style(\"whitegrid\")\n  fig.set_size_inches(18, 18)\n  fig.suptitle('Acur\u00e1cia das varia\u00e7\u00f5es do modelo')\n  for index, column in enumerate(accuracies.columns):\n    ax = fig.add_subplot(accuracies.shape[1]\/3+1, 3, index+1)\n    sns.barplot(accuracies.index, accuracies[column], ax=ax)\n    ax.set_title(f'{column} - {scores[index]:.2f}')\n    ax.set_ylabel('Precision')\n    plt.xticks(rotation=45)\n    plt.ylim(0.0,1.0)\n  fig.subplots_adjust(hspace=0.8)\n  plt.show()\n","6d5d95c4":"# objetos utilizados\nrm_columns = DropColumns(['MATRICULA', 'NOME'])\nsi = SimpleImputerGOINGLES()\n\n# limpeza dos dados\ndf_ibm = pd.DataFrame.from_records(rm_columns.fit_transform(df))\ndf_ibm = pd.DataFrame.from_records(si.fit_transform(df_ibm))\n\ndf_ibm","ce32ffe3":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","180fa844":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","f4faec92":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","fe37c1c6":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","3582aef9":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","446f9e50":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","bde42610":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","b46359f1":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","192fe38e":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","d5626e53":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","78d1bd5c":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","835ae2cf":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","bf1df84a":"# objetos utilizados\nrm_columns = DropColumns(['MATRICULA', 'NOME'])\ncf = ColumnsTransformerGOINGLES()\n\n# limpeza dos dados\ndf_ibm = pd.DataFrame.from_records(rm_columns.fit_transform(df))\ndf_ibm = pd.DataFrame.from_records(cf.fit_transform(df_ibm))\n\ndf_ibm","511e4e85":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","49c16783":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","a7445ffc":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","d8819033":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","caa3c5d9":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","b55bfe77":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","9c515aa1":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","5e2bf101":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","df464291":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","a916f217":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","a166055f":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","52f8e18e":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","0d38d93c":"# objetos utilizados\nrm_columns = DropColumns(['MATRICULA', 'NOME'])\nsi = SimpleImputerGOINGLES()\ncnr = CombNotaReprov()\n\n# limpeza dos dados\ndf_ibm = pd.DataFrame.from_records(rm_columns.fit_transform(df))\ndf_ibm = pd.DataFrame.from_records(si.fit_transform(df_ibm))\ndf_ibm = pd.DataFrame.from_records(cnr.fit_transform(df_ibm))\n\ndf_ibm","782fb2eb":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","86c9ff63":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","4c1c20e4":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","19bdb607":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","f3ae2556":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","2d6cf1b4":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","bc26bfeb":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","82fc882a":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","5dd2d4ef":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","2327bde7":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","fba2b0f3":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","fea28930":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","15512aa3":"# objetos utilizados\nrm_columns = DropColumns(['MATRICULA', 'NOME'])\ncf = ColumnsTransformerGOINGLES()\ncnr = CombNotaReprov()\n\n# limpeza dos dados\ndf_ibm = pd.DataFrame.from_records(rm_columns.fit_transform(df))\ndf_ibm = pd.DataFrame.from_records(cf.fit_transform(df_ibm))\ndf_ibm = pd.DataFrame.from_records(cnr.fit_transform(df_ibm))\n\ndf_ibm","2b08f4ec":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","ad658746":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","8a2c0cd3":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","fec78474":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","a502286f":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","3cddbf3b":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","6b9fcab4":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","b1f7a4e8":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","29f83bd0":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","eba47d3c":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","f58c2e6d":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","28b7eef7":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","66145f7b":"# objetos utilizados\nrm_columns = DropColumns(['MATRICULA', 'NOME'])\nsi = SimpleImputerGOINGLES()\ncm = CombMedias(['NOTA_DE', 'NOTA_MF', 'NOTA_GO', 'NOTA_EM'], 'NOTAS')\n\n# limpeza dos dados\ndf_ibm = pd.DataFrame.from_records(rm_columns.fit_transform(df))\ndf_ibm = pd.DataFrame.from_records(si.fit_transform(df_ibm))\ndf_ibm = pd.DataFrame.from_records(cm.fit_transform(df_ibm))\n\ndf_ibm","37d9750f":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","c6b773a5":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","c623ebb8":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","fb8a4454":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","e158fd13":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","5e0f6605":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","47c1b35a":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","89556f54":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","562c5448":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","f82d80d2":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","95393620":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","5ce7a932":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","d3efd26c":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","52f16138":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","a84da87f":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","af009054":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","1246558c":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","fc8ab00f":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","01f550c6":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","64cd8f34":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","1efa5fb1":"# objetos utilizados\nrm_columns = DropColumns(['MATRICULA', 'NOME'])\ncf = ColumnsTransformerGOINGLES()\ncm = CombMedias(['NOTA_DE', 'NOTA_MF', 'NOTA_GO', 'NOTA_EM'], 'NOTAS')\n\n# limpeza dos dados\ndf_ibm = pd.DataFrame.from_records(rm_columns.fit_transform(df))\ndf_ibm = pd.DataFrame.from_records(cf.fit_transform(df_ibm))\ndf_ibm = pd.DataFrame.from_records(cm.fit_transform(df_ibm))\n\ndf_ibm","3431989a":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","356c788a":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","4b3176aa":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","c269def2":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","37dd29bb":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","c855eaa2":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","ed7dbdd6":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","57100a06":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","81f2d40e":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","d8b9edd3":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","103bd1b8":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","fa312633":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","41a410f9":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","69a7a31a":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","8c1babbd":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","6fe8ea05":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","63dc348a":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","b4d440c1":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","af392b9b":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","983c4e62":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","fa28ea7d":"# objetos utilizados\nrm_columns = DropColumns(['MATRICULA', 'NOME', 'NOTA_GO'])\nsi = SimpleImputerGOINGLES()\ncmh = CombMedias(['NOTA_EM', 'NOTA_DE'], 'HUMANAS')\n\n# limpeza dos dados\ndf_ibm = pd.DataFrame.from_records(rm_columns.fit_transform(df))\ndf_ibm = pd.DataFrame.from_records(si.fit_transform(df_ibm))\ndf_ibm = pd.DataFrame.from_records(cmh.fit_transform(df_ibm))\n\ndf_ibm","d8367cb8":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","980c8c46":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","1a2e0c81":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","e49a0eef":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","df332b86":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","740ce40f":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","d87ba249":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","627c2e8a":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","dbba6278":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","33a073c9":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","69c2c7ef":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","ddccbe30":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","1563ea17":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","87b4ff09":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","dd7deb0b":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","3e40daad":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","8f2ee74e":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","c9b4530b":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","50524969":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","33acebaa":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","db797d28":"# objetos utilizados\nrm_columns = DropColumns(['MATRICULA', 'NOME', 'NOTA_GO'])\nsi = SimpleImputerGOINGLES()\ncm = CombMedias(['NOTA_DE', 'NOTA_MF', 'NOTA_EM'], 'NOTAS')\ncmh = CombMedias(['NOTA_EM', 'NOTA_DE'], 'HUMANAS')\n\n\n# limpeza dos dados\ndf_ibm = pd.DataFrame.from_records(rm_columns.fit_transform(df))\ndf_ibm = pd.DataFrame.from_records(si.fit_transform(df_ibm))\ndf_ibm = pd.DataFrame.from_records(cm.fit_transform(df_ibm))\ndf_ibm = pd.DataFrame.from_records(cmh.fit_transform(df_ibm))\n\ndf_ibm","00dc7cd9":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","04b88962":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","4423276c":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","59933e56":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","bbc846d0":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","90a02281":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","a77fcd15":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","bd857358":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","34022e8d":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","bfea28f2":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","83c611c2":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","63c67958":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","b5df9b30":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","69be17e0":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","ba3549d1":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","0f605a2f":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","1b49efbc":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","ea1b5de1":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","ab419220":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","46570db0":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","a6784a55":"# objetos utilizados\nrm_columns = DropColumns(['MATRICULA', 'NOME', 'INGLES'])\nfn = FillNan('NOTA_GO')\ncm = CombMedias(['NOTA_DE', 'NOTA_MF', 'NOTA_EM', 'NOTA_GO'], 'NOTAS')\ncmh = CombMedias(['NOTA_EM', 'NOTA_DE'], 'HUMANAS')\ndn = DropColumns(['NOTA_DE', 'NOTA_EM', 'NOTA_GO'])\n\n\n# limpeza dos dados\ndf_ibm = pd.DataFrame.from_records(rm_columns.fit_transform(df))\ndf_ibm = pd.DataFrame.from_records(fn.fit_transform(df_ibm))\ndf_ibm = pd.DataFrame.from_records(cm.fit_transform(df_ibm))\ndf_ibm = pd.DataFrame.from_records(cmh.fit_transform(df_ibm))\ndf_ibm = pd.DataFrame.from_records(dn.fit_transform(df_ibm))\n\ndf_ibm","ebb83e48":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","faeb052a":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","65307b56":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","42d896c0":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","a76391ba":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","1640a20e":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","dffb3e3f":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","033af939":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","754db08a":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","23756324":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","c669db87":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","93d21fb4":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","4bc0776c":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","e93fd360":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","c7a274eb":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","dab2569b":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","65614a9d":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","b13b39b8":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","db633f1e":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","d6a8b794":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","6a2130f1":"# objetos utilizados\nrm_columns = DropColumns(['MATRICULA', 'NOME', 'INGLES', 'REPROVACOES_DE',\n                          'REPROVACOES_MF', 'REPROVACOES_EM', 'REPROVACOES_GO'])\nfn = FillNan('NOTA_GO')\ncm = CombMedias(['NOTA_DE', 'NOTA_MF', 'NOTA_EM', 'NOTA_GO'], 'NOTAS')\ncmh = CombMedias(['NOTA_EM', 'NOTA_DE'], 'HUMANAS')\ndn = DropColumns(['NOTA_DE', 'NOTA_EM', 'NOTA_GO'])\n\n\n# limpeza dos dados\ndf_ibm = pd.DataFrame.from_records(rm_columns.fit_transform(df))\ndf_ibm = pd.DataFrame.from_records(fn.fit_transform(df_ibm))\ndf_ibm = pd.DataFrame.from_records(cm.fit_transform(df_ibm))\ndf_ibm = pd.DataFrame.from_records(cmh.fit_transform(df_ibm))\ndf_ibm = pd.DataFrame.from_records(dn.fit_transform(df_ibm))\n\ndf_ibm","db948bbd":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","2113d270":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","839af3d2":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","c56e9365":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","0aebd3e8":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","f55cb5dc":"print(model.feature_importance_)","34fae956":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","9a3d058d":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","13bb9f6e":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","f70c2c7a":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","ae9d0c2e":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","4c24bc92":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","e2ff019b":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","de664bda":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","254fd891":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","f235a472":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","bd689a23":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","43df1283":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","db12377c":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","9eec9807":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","795765f8":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","5247f679":"# objetos utilizados\nrm_columns = DropColumns(['MATRICULA', 'NOME', 'INGLES', 'REPROVACOES_DE',\n                          'REPROVACOES_MF', 'REPROVACOES_EM', 'REPROVACOES_GO',\n                          'FALTAS', 'H_AULA_PRES', 'TAREFAS_ONLINE'])\nfn = FillNan('NOTA_GO')\ncm = CombMedias(['NOTA_DE', 'NOTA_MF', 'NOTA_EM', 'NOTA_GO'], 'NOTAS')\n\n\n# limpeza dos dados\ndf_ibm = pd.DataFrame.from_records(rm_columns.fit_transform(df))\ndf_ibm = pd.DataFrame.from_records(fn.fit_transform(df_ibm))\ndf_ibm = pd.DataFrame.from_records(cm.fit_transform(df_ibm))\n\ndf_ibm","8e9a2efe":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","2ee7d79c":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","62e190bb":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","d37e9437":"# modelo utilizado\ndtc_model = rf_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","35283b6f":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","d3e5d964":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","1a970eda":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","d01fb094":"# modelo utilizado\ndtc_model = xgb_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","6278f94a":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","da5326f7":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","f1f617ae":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","55ad2ab0":"# modelo utilizado\ndtc_model = stack_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","683fbdeb":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","ba1ac45b":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","0ad5ffe3":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","2a85a8a4":"# modelo utilizado\ndtc_model = misael_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","6affbb0e":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm)","aa275090":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='robust')","921b323b":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='standard')","21f11b48":"# modelo utilizado\ndtc_model = clarisse_model\n\n# Classificando por smote\nplot_results(dtc_model, df_ibm, scaler='minmax')","04c26c13":"from sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nimport xgboost as xgb\n\nmodel = xgb.XGBClassifier(objective='multi:softprob',\n                          learning_rate=0.5,\n                        max_depth=1, \n                        min_child_weight=1, \n                        n_estimators=400, nthread=1, \n                        subsample=0.9000000000000001)\n\nrm_columns = DropColumns(['MATRICULA', 'NOME', 'INGLES', 'REPROVACOES_DE',\n                          'REPROVACOES_MF', 'REPROVACOES_EM', 'REPROVACOES_GO',\n                          'FALTAS', 'H_AULA_PRES', 'TAREFAS_ONLINE'])\n# rm_columns = DropColumns(['MATRICULA', 'NOME'])\nfn = FillNan('NOTA_GO')\ncm = CombMedias(['NOTA_DE', 'NOTA_MF', 'NOTA_EM', 'NOTA_GO'], 'NOTAS')\nch = CombMedias(['NOTA_DE', 'NOTA_EM'], 'HUMANAS')\nce = CombMedias(['NOTA_MF', 'NOTA_GO'], 'EXATAS')\n\npipeline = Pipeline(steps=[\n                      # ('fill-nan', fn),\n                      ('comb_medias', cm),\n                      ('comb_humanas', ch),\n                      ('comb_exatas', ce),\n                      ('rm_columns', rm_columns),\n                      ('xgboost', model),\n])\n\n# df_ibm = fn.fit_transform(df)\ndf_ibm = df\n\nX = df_ibm.drop(['PERFIL'], axis=1)\ny = df_ibm['PERFIL']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=82)\n\n\ny_predic = pipeline.fit(X_train, y_train).predict(X_test)\nprint('Desbalanceado', classification_report(y_test, y_predic))","31c837ab":"feature_importances = pd.DataFrame(pipeline.steps[-1][-1].feature_importances_,\n                                   index = ['NOTA_DE','NOTA_EM','NOTA_GO','COMB_NOTAS', 'COMB_HUMANAS', 'COMB_EXATAS'],\n                                   columns=['importance']).sort_values('importance', ascending=False)\nfeature_importances","40e2fad3":"#### RandomForest, Standard Scaler","b9917195":"#### StackingEstimator, MinMax Scaler","7704ba26":"#### RandomForest, MinMax Scaler","5c9debc1":"### XGBoost","e2f4393c":"### Simple Imputer","ac548fd2":"#### StackingEstimator, Robust Scaler","d6041610":"### Clarisse RandomForest","d074cc66":"#### StackingEstimator, MinMax Scaler","ffb512b7":"#### StackingEstimator, Standard Scaler","6d8b55f0":"#### StackingEstimator, MinMax Scaler","c591c1b1":"### StackingEstimator","10c5bd92":"#### XGBoost, RobustScaler","22b3580b":"#### RandomForest, MinMax Scaler","e6865b6a":"### Misael RandomForest","78e43c7a":"#### XGBoost, RobustScaler","752b5eaa":"## XGBoost","e8f2b69e":"### XGBoost","75686d1c":"#### RandomForest, Robust Scaler","e3196980":"### RandomForest","cb227cbf":"#### XGBoost, Standard Scaler","4b20888e":"#### XGBoost, RobustScaler","6501365f":"#### XGBoost, MinMax Scaler","0d93d2e9":"#### RandomForest, Robust Scaler","796f2f35":"### XGBoost","03d74ef7":"#### RandomForest, Robust Scaler","7947d5d2":"#### RandomForest, Robust Scaler","4266679b":"#### RandomForest, Robust Scaler","65db3ad1":"### Columns Transformer","cc190637":"#### StackingEstimator, Standard Scaler","591e93a7":"### Misael RandomForest","4c7a7e5d":"#### StackingEstimator, Standard Scaler","60d5cfb0":"#### StackingEstimator, Robust Scaler","3bf0e612":"#### RandomForest, Standard Scaler","187e2fcb":"#### RandomForest, MinMax Scaler","17b1fda3":"#### XGBoost, MinMax Scaler","7f482452":"### SVMSmote","2588043c":"#### XGBoost, MinMax Scaler","0c1cfb9e":"### StackingEstimator","17009170":"### Clarisse RandomForest","a8c65681":"### Misael RandomForest","d415b45d":"#### RandomForest, Robust Scaler","1888ce11":"#### RandomForest, Standard Scaler","8250cfd3":"## StackingEstimator","54e43d76":"#### RandomForest, MinMax Scaler","b6b4f9d2":"#### StackingEstimator, Robust Scaler","c148a61a":"### StackingEstimator","2dd5c6c6":"### XGBoost","2064428e":"#### RandomForest, Standard Scaler","799a9f2d":"#### RandomForest, Standard Scaler","92f194f2":"### Clarisse RandomForest","6703e7e6":"#### StackingEstimator, Robust Scaler","453eb14c":"### RandomForest","dc67822f":"## Clarisse Random Forest","13cd90e6":"#### StackingEstimator, MinMax Scaler","8689f348":"### XGBoost","430c2c62":"### RandomForest","010d440d":"### StackingEstimator","007f7131":"#### StackingEstimator, Robust Scaler","04d6d65d":"#### RandomForest, MinMax Scaler","8642a107":"### Tradicional","a36fc917":"### Misael RandomForest","dc1f669e":"## DropColumns[NOTAS, INGLES, REPROVA\u00c7\u00d4ES],FillNaN,CombMediasHumanas, CombMedias","e755ddeb":"#### RandomForest, MinMax Scaler","213201dc":"#### XGBoost, MinMax Scaler","258e547a":"#### RandomForest, Robust Scaler","99f3e88c":"#### RandomForest, MinMax Scaler","681a515c":"#### RandomForest, Standard Scaler","6812b914":"### StackingEstimator","6d94e101":"#### RandomForest, Standard Scaler","09f225b0":"#### XGBoost, Standard Scaler","b9f01f2e":"#### RandomForest, Standard Scaler","32dfb308":"#### RandomForest, MinMax Scaler","60458823":"### StackingEstimator","7658905a":"#### XGBoost, Standard Scaler","3d248def":"### RandomForest","3caf011a":"#### RandomForest, MinMax Scaler","00d73117":"#### RandomForest, Standard Scaler","a903829a":"### XGBoost","5aab4c92":"#### RandomForest, Robust Scaler","d0de016c":"#### RandomForest, Standard Scaler","570095b3":"#### StackingEstimator, Robust Scaler","b8f714cb":"### StackingEstimator","54733c1d":"#### StackingEstimator, Standard Scaler","b80e5d33":"#### RandomForest, Standard Scaler","c07fcc4b":"#### RandomForest, Standard Scaler","619bc581":"#### StackingEstimator, Robust Scaler","d124afef":"#### RandomForest, MinMax Scaler","89a5ab1a":"### XGBoost","8bd7f10a":"#### RandomForest, Standard Scaler","0de1f1e9":"#### StackingEstimator, Standard Scaler","1edaff3f":"#### RandomForest, Robust Scaler","43828892":"### StackingEstimator","70cd2090":"#### XGBoost, RobustScaler","1247d68f":"#### XGBoost, Standard Scaler","8b6aae31":"## Random Forest","1e2cd9c9":"## Exemplo IBM(DropColumns, SimpleImputer)","819d78eb":"### Drop Columns","84c1d4c7":"#### RandomForest, MinMax Scaler","c98ffc49":"## Limpeza dos dados","e4e452ee":"## Misael Random Forest","b57f9282":"### Tomeks Links Undersampling","c289831a":"#### StackingEstimator, MinMax Scaler","8b294a55":"#### RandomForest, Standard Scaler","5f518b71":"#### RandomForest, MinMax Scaler","270987c9":"#### XGBoost, RobustScaler","43ae7318":"### Lista de SMOTEs","d7594e4a":"#### XGBoost, Standard Scaler","002be8a0":"#### RandomForest, Robust Scaler","a70b2e98":"#### StackingEstimator, MinMax Scaler","cf932680":"#### StackingEstimator, Standard Scaler","06b0d903":"#### XGBoost, MinMax Scaler","1f0ce65a":"#### RandomForest, Robust Scaler","0dad9115":"#### RandomForest, MinMax Scaler","ffc5f5a7":"## DropColumns, ColumnsTransformerGOINGLES, CombNotaReprov","ef1839d0":"## DropColumns[Nota_go], SimpleImputer, CombMediasHumanas, CombMedias","132709a5":"#### RandomForest, MinMax Scaler","49672caf":"# Criando modelos","7bbbc5ef":"### Clarisse RandomForest","df62d31a":"#### RandomForest, MinMax Scaler","38f27ef7":"#### XGBoost, MinMax Scaler","f238eb80":"#### RandomForest, Robust Scaler","26946fb7":"### XGBoost","50a26e5a":"#### StackingEstimator, MinMax Scaler","b98a3cab":"### XGBoost","3f0d9a89":"#### RandomForest, MinMax Scaler","b760f1c8":"#### XGBoost, Standard Scaler","41285042":"## DropColumns, ColumnsTransformerGOINGLES","4b4d21be":"### Misael RandomForest","5b5a7759":"#### StackingEstimator, MinMax Scaler","83932ef1":"#### RandomForest, Standard Scaler","4392a444":"#### RandomForest, Robust Scaler","806d0dff":"### RandomForest(base)","5764e894":"#### StackingEstimator, MinMax Scaler","8a9b7eac":"### CombMedias","29f10391":"## DropColumns, SimpleImputer, CombNotaReprov","fc85e9ae":"#### XGBoost, RobustScaler","a79ff416":"#### XGBoost, RobustScaler","30a0d371":"#### XGBoost, MinMax Scaler","e3753849":"### XGBoost","209a8d04":"#### RandomForest, MinMax Scaler","5863f47f":"#### RandomForest, Standard Scaler","1965e3c9":"#### RandomForest, MinMax Scaler","a4bd5738":"#### StackingEstimator, Standard Scaler","4c40a7f7":"#### XGBoost, MinMax Scaler","4537063a":"#### XGBoost, Standard Scaler","59877469":"### Clarisse RandomForest","25ab67c1":"### RandomForest","9d95c00e":"#### RandomForest, Standard Scaler","48d59b05":"## DropColumns, ColumnsTransformerGOINGLES, CombMedias","b3290a0d":"#### RandomForest, MinMax Scaler","a7dbbcae":"#### XGBoost, RobustScaler","6be8fb4f":"#### RandomForest, Standard Scaler","10adb0fd":"#### RandomForest, MinMax Scaler","480e037f":"#### RandomForest, Standard Scaler","3dcbeabe":"### XGBoost","1532bab9":"### RandomForest","a6b0f4c4":"#### XGBoost, RobustScaler","ac3ddabe":"#### StackingEstimator, MinMax Scaler","06552b42":"## DropColumns[INGLES, REPROVA\u00c7\u00d4ES, FALTAS, H_AULA, A_ONLINE],FillNaN,CombMedias","f2e60792":"#### RandomForest, Robust Scaler","4f512c3d":"### RandomForest","abb2a2b2":"### Drop NA","05426ca9":"#### RandomForest, Standard Scaler","14b94ff1":"# Comparando m\u00e9todos","1ec1ea6b":"### RandomForest","bcf232d5":"#### RandomForest, MinMax Scaler","efcbf943":"#### XGBoost, Standard Scaler","08db15f8":"## DropColumns, SimpleImputer, CombMedias","f0131377":"#### RandomForest, Robust Scaler","20384c1d":"#### StackingEstimator, Robust Scaler","02b37fb7":"#### XGBoost, MinMax Scaler","2a59bbd1":"### Misael RandomForest","8a4713ab":"#### StackingEstimator, Robust Scaler","6064730b":"#### StackingEstimator, Standard Scaler","fb64e942":"## DropColumns[NOTAS, INGLES], FillNaN, CombMediasHumanas, CombMedias","16a5dd1f":"#### RandomForest, Robust Scaler","06d7a112":"#### RandomForest, Robust Scaler","8b5f99a7":"#### RandomForest, MinMax Scaler","1873b5de":"#### RandomForest, Robust Scaler","f2a06d0d":"#### StackingEstimator, Standard Scaler","9b9420b4":"#### XGBoost, Standard Scaler","306715a9":"# Preparando ambiente","47d95b06":"### RandomForest","78cff2df":"## Smote","5a9b18dc":"### FillNaN","83e3005c":"### Combine notas e reprova\u00e7\u00f5es","3d8b7e9f":"### RandomForest","5761e6ca":"#### StackingEstimator, Standard Scaler","7d4fdae1":"#### XGBoost, MinMax Scaler","5fb13cd6":"#### RandomForest, Standard Scaler","c966e0aa":"#### RandomForest, Robust Scaler","4cac5e5c":"#### RandomForest, Robust Scaler","b94000fc":"#### XGBoost, RobustScaler","047050ef":"#### XGBoost, Standard Scaler","f6ff7cc5":"### StackingEstimator","10ecb707":"# Montando Pipeline","a69888d1":"### Clarisse RandomForest","d754ef29":"#### RandomForest, Robust Scaler","f4b4bf23":"#### RandomForest, Robust Scaler","0ee62fc5":"#### RandomForest, MinMax Scaler","15e06842":"#### RandomForest, Standard Scaler","29b0a596":"### Pesa das Vari\u00e1veis","8ac95444":"### StackingEstimator","cc2d791b":"#### RandomForest, Robust Scaler","c167db4a":"#### XGBoost, MinMax Scaler","85c9f07a":"#### RandomForest, Standard Scaler","45b81e9b":"#### StackingEstimator, Robust Scaler","8d35d6bf":"#### XGBoost, RobustScaler","9905e6d0":"#### RandomForest, MinMax Scaler","edefa19a":"## DropColumns[Nota_go], SimpleImputer, CombMediasHumanas","44924ade":"#### XGBoost, Standard Scaler","5f96264f":"#### RandomForest, Robust Scaler","935a4186":"### StackingEstimator","1420fe47":"### Misael RandomForest","a06b95ca":"#### RandomForest, MinMax Scaler","eea4ad43":"#### StackingEstimator, Robust Scaler","702bd5af":"### Clarisse RandomForest","d5182f1d":"#### StackingEstimator, MinMax Scaler","ecdfa37b":"#### RandomForest, Standard Scaler","6a82bc26":"#### RandomForest, Robust Scaler","f5dd9397":"#### RandomForest, Standard Scaler","d7e8c8bd":"#### StackingEstimator, Standard Scaler"}}