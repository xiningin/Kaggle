{"cell_type":{"4b137198":"code","747eac96":"code","df4037cd":"code","6601673d":"code","d887412d":"code","568f4e8d":"code","8aa99015":"code","37d5534d":"code","46ce8e46":"code","4d94e433":"code","b2ca287f":"code","6c7f88cd":"code","419650dc":"code","9418ba0a":"code","fe2c7dec":"code","aea624cd":"code","6c02c3d2":"code","de2178b3":"code","aeeae750":"code","7f5b7c8b":"code","0c2ac738":"code","db69a3f7":"code","fa37f0a2":"code","7d3f5ad3":"code","b1b8912e":"code","9754c9cf":"code","7d03c43a":"code","45ed703c":"code","faa2eec5":"code","83ee6a03":"code","493c157f":"code","c589f75c":"code","20dbbcb2":"code","918f252a":"code","65aa3489":"code","233cb96e":"code","b71049b0":"code","00379087":"code","7d3cddd2":"code","c404a3cd":"code","fb43d4c3":"code","d51da732":"code","25a25600":"markdown","0b7a2b4f":"markdown","44bfed97":"markdown","8bc3548c":"markdown","1f90c508":"markdown","af65b006":"markdown","244e218b":"markdown","eab6338a":"markdown","025f2b80":"markdown","c0382842":"markdown","932bbdef":"markdown","03c69151":"markdown","bd90ad33":"markdown","5046e4b7":"markdown","cd7af2b6":"markdown","77c8ba56":"markdown","b1e37d7e":"markdown"},"source":{"4b137198":"from collections import Counter\nfrom collections import defaultdict\nimport pandas as pd\nimport seaborn as sn\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nimport numpy as np\nimport warnings\n","747eac96":"le = LabelEncoder()\nle.fit(['Protoss','Terran','Zerg'])","df4037cd":"commands = ['Attack','EvolveFlyerCarapace1','BuildRoboticsBay','EvolveGlialReconstitution','TrainSCV','UpgradeTerranInfantryWeapons1','BuildGhostAcademy','RaiseSupplyDepot','CancelCreepTumor','Feedback','BuildFusionCore','BuildReactorStarport','BuildBanelingNest','PhasingMode','UpgradeToLair','UnburrowWidowMine','Cheer','UnburrowHydralisk','BuildArmory','BuildReactorFactory','UpgradeTerranInfantryWeapons3','ResearchAnionPulseCrystals','HallucinateVoidRay','CancelBarracksAddon','EvolvePneumatizedCarapace','ResearchGraviticBoosters','UnloadTargetMedivac','ResearchTransformationServos','ChronoBoost','ResearchCharge','LiftFactory','ResearchPersonalCloaking','LiftBarracks','Charge','ForceField','Consume','BuildNuke','UpgradeGroundArmor3','UnburrowDrone','ResearchWeaponRefit','BuildNexus','SalvageShared','HallucinateStalker','MorphMutalisk','Abduct','HallucinatePhoenix','BuildSpineCrawler','EvolveGroundCarapace1','EvolveFlyerAttacks1','BurrowHydralisk','SiegeMode','TrainTempest','Blink','UnburrowBaneling','TrainStalker','UnburrowSwarmHost','TankMode','ResearchBlink','SeekerMissile','HaltBuilding','BuildTechLabFactory','UnloadAllBunker','YamatoGun','LoadTargetBunker','UnburrowInfestor','TrainSentry','WarpInDarkTemplar','ArmorpiercingMissiles','ArchonWarpSelection','LandFactory','ResearchBehemothReactor','TemporalField','CancelMorph','LiftStarport','UpgradeGroundWeapons2','BuildNydusNetwork','MorphToBaneling','TrainColossus','EvolveChitinousPlating','CancelGravitonBeam','CreepTumor','UpgradeTerranInfantryArmor3','BuildRefinery','BuildNydusWorm','UpgradeAirWeapons2','BurrowSwarmHost','TrainRaven','LowerSupplyDepot','MorphDrone','Envision','TrainReaper','ExtraSupplies','BurrowInfestor','UpgradeAirArmor1','TrainBanshee','FungalGrowth','EvolveFlyerCarapace3','HallucinateZealot','SpawnLarva','BuildSpawningPool','LiftCommandCenter','BuildHydraliskDen','BuildDarkShrine','UpgradeAirArmor3','TrainZealot','EvolveAdrenalGlands','ScannerSweep','VehicleAndShipPlating1','EvolveCentrifugalHooks','SpawnLocusts','BattleMode','ResearchConcussiveShells','FighterMode','UnloadAllNydus','EvolveTunnelingClaws','UpgradeGroundArmor2','TacticalNukeStrike','MorphRoach','TrainObserver','UnburrowQueen','BuildAutoTurret','CancelMorphToOverseer','ResearchExtendedThermalLance','GenerateCreep','MorphOverlord','TransportMode','VehicleAndShipPlating3','EvolveNeuralParasite','LandBarracks','BuildGateway','BuildExtractor','MassRecallMothershipCore','BuildCreepTumor','DecloakGhost','ScanMove','ResearchCaduceusReactor','HallucinateArchon','Contaminate','TrainProbe','UpgradeToMothership','BuildSpire','ResearchPsiStorm','StopRedirect','CancelStarportAddon','PsionicStorm','CloakBanshee','AssaultMode','BurrowBaneling','HallucinateOracle','SCVRepair','EvolveMeleeAttacks1','StrikeMode','TransformToWarpGate','HallucinateImmortal','UpgradeAirWeapons3','TrainHighTemplar','EvolveMissileAttacks2','EvolveMuscularAugments','UpgradeShields2','LandStarport','BuildTechLabStarport','UpgradeVehicleWeapons2','EvolveMeleeAttacks3','GravitonBeam','InfestorNeuralParasite','ResearchGraviticDrive','MorphSwarmHost','UpgradesShields3','MorphZergling','ResearchMoebiusReactor','EvolveBurrow','MothershipCorePurifyNexus','UpgradeVehicleWeapons1','LandOrbitalCommand','SetRallyPoint','BuildPhotonCannon','UprootSporeCrawler','CalldownMULE','EvolveMeleeAttacks2','UpgradeToOrbitalCommand','TrainViking','UnloadTargetWarpPrism','UnburrowZergling','SetUnitRally','UpgradeGroundArmor1','HallucinateProbe','BuildHatchery','BuildForge','BuildBarracks','EvolveGroovedSpines','MothershipMassRecall','StopGenerateCreep','BuildFactory','BlindingCloud','CancelLast','UpgradeStructureArmor','CancelRootSpineCrawler','CancelTacticalNukeStrike','ResearchStimpack','BuildInfestationPit','Stop','TrainGhost','DecloakBanshee','BuildStarport','SetWorkerRally','MorphHydralisk','GuardianShield','EvolveFlyerAttacks2','SpawnInfestedTerran','BuildBattleHellion','UseStimpack','Gather','OracleWeapon','UpgradeShipWeapons1','BuildAssimilator','OracleWeaponOff','MULERepair','BurrowUltralisk','Corruption','BuildPylon','UnloadTargetOverlord','BuildSporeCrawler','EvolveMetabolicBoost','TrainImmortal','TrainMedivac','BuildWidowMine','BurrowQueen','ReactorBarracks','BuildSensorTower','BurrowZergling','ResearchNeosteelFrame','HallucinateColossus','SniperRound','StimpackRedirect','Revelation','CAbil','TrainMothershipCore','ResearchCloakingField','TrainMarauder','BuildSiegeTank','UnburrowRoach','UpgradeGroundWeapons3','UpgradeTerranInfantryArmor2','BuildTwilightCouncil','MorphToOverseer','CancelMorphToGreaterSpire','BuildHellion','TrainWarpPrism','Move','RootSpineCrawler','UpgradeAirArmor2','BuildBunker','QueenTransfusion','EvolveGroundCarapace2','BuildMissileTurret','EvolveEnduringLocusts','UpgradeTerranInfantryWeapons2','BuildInterceptor','EvolvePathogenGlands','BuildFleetBeacon','TrainVoidRay','UnloadAllCommandCenter','ResearchFluxVanes','LiftOrbitalCommand','ResearchDrillingClaws','UpgradeAirWeapons1','LandCommandCenter','EvolveGroundCarapace3','ResearchCombatShield','EvolveVentralSacs','BuildStargate','VehicleAndShipPlating2','CancelUpgradeToHive','ResearchInfernalPreIgniter','TransformToGateway','UpgradeToHive','EvolveMissileAttacks3','TrainBattlecruiser','HoldPosition','LoadAllCommandCenter','UnburrowUltralisk','WarpInHighTemplar','BurrowDrone','TrainQueen','BurrowRoach','MorphToBroodLord','MorphUltralisk','BuildCommandCenter','UpgradeShields1','BuildEvolutionChamber','RootSporeCrawler','CancelUpgradeToOrbitalCommand','BuildThor','MorphInfestor','CancelTerranBuilding','CancelFactoryAddOn','BuildSupplyDepot','EMPRound','WarpInStalker','CancelUpgradeToLair','UprootSpineCrawler','BuildEngineeringBay','PrismaticAlignment','ResearchHiSecAutoTracking','ResearchWarpGate','TrainMarine','Patrol','MorphToGreaterSpire','TrainCarrier','CloakGhost','EvolveFlyerCarapace2','TrainOracle','BuildUltraliskCavern','UpgradeGroundWeapons1','UpgradeToPlanetaryFortress','TrainPhoenix','Dance','BurrowWidowMine','DisableVolatileBurst','MorphCorruptor','EvolveFlyerAttacks3','SpawnChangeling','MedivacSpeedBoost','WarpInZealot','EvolveMissileAttacks1','ResearchDurableMaterials','TechLabBarracks','Explode','BuildRoachWarren','UpgradeTerranInfantryArmor1','HallucinateWarpPrism','BuildRoboticsFacility','BuildTemplarArchive','WarpInSentry','UpgradeVehicleWeapons3','CancelBuilding','MorphViper','ExplosiveMissiles','ReturnCargo','HoldFireGhost','ResearchCorvidReactor','BuildPointDefenseDrone','CancelUpgradeToPlanetaryFortress','BuildCyberneticsCore']\nselections = ['SiegeTank', 'UltraliskBurrowed', 'Corruptor', 'BanelingCocoon', 'Spire', 'ChangelingZealot', 'Lyote', 'Observer', 'CreepTumorBurrowed', 'MothershipCore', 'SupplyDepot', 'InfestationPit', 'WarpPrism', 'HydraliskDen', 'SporeCrawler', 'Ghost', 'MineralField', 'Viper', 'BarracksReactor', 'ChangelingMarine', 'UrsadakCalf', 'Zergling', 'Armory', 'FactoryFlying', 'Drone', 'BarracksFlying', 'EngineeringBay', 'StarportFlying', 'RoachBurrowed', 'UnbuildableRocksDestructible', 'SpineCrawlerUprooted', 'Carrier', 'RoachWarren', 'Roach', 'ChangelingMarineShield', 'DestructibleRockEx1DiagonalHugeULBR', 'Extractor', 'XelNagaTower', 'SCV', 'LabBot', 'ChangelingZergling', 'KarakFemale', 'FleetBeacon', 'Bunker', 'FactoryReactor', 'DestructibleRampDiagonalHugeBLUR', 'FactoryTechLab', 'Queen', 'CommandCenterFlying', 'PhotonCannon', 'Hellion', 'VoidRay', 'HighTemplar', 'BanelingBurrowed', 'RoboticsBay', 'Colossus', 'BanelingNest', 'InfestorBurrowed', 'Stargate', 'LabMineralField', 'Assimilator', 'DestructibleDebris6x6', 'SupplyDepotLowered', 'TechLab', 'AutoTurret', 'Changeling', 'OverseerCocoon', 'Tempest', 'SpawningPool', 'UnbuildableBricksDestructible', 'MissileTurret', 'Pylon', 'Phoenix', 'Infestor', 'OrbitalCommandFlying', 'GhostAcademy', 'WarpGate', 'Broodling', 'CyberneticsCore', 'Banshee', 'CreepTumorQueen', 'SporeCrawlerUprooted', 'CollapsibleRockTowerDiagonal', 'Battlecruiser', 'ProtossVespeneGeyser', 'UnbuildablePlatesDestructible', 'Reactor', 'Medivac', 'QueenBurrowed', 'Ultralisk', 'DroneBurrowed', 'BroodLordCocoon', 'InfestedTerran', 'SwarmHostBurrowed', 'Marauder', 'SensorTower', 'DarkShrine', 'Mutalisk', 'Immortal', 'BattleHellion', 'Hive', 'SpineCrawler', 'Archon', 'GreaterSpire', 'Scantipede', 'Nexus', 'Factory', 'UltraliskCavern', 'Larva', 'BarracksTechLab', 'RoboticsFacility', 'MULE', 'DestructibleIce6x6', 'WidowMineBurrowed', 'Refinery', 'Locust', 'DestructibleDebrisRampDiagonalHugeULBR', 'Marine', 'StarportTechLab', 'InfestedTerransEgg', 'NydusWorm', 'CollapsibleRockTowerRampRight', 'Forge', 'PointDefenseDrone', 'Probe', 'Reaper', 'Viking', 'SiegeTankSieged', 'Stalker', 'DestructibleRock6x6', 'Raven', 'DestructibleRockEx16x6', 'HydraliskBurrowed', 'FusionCore', 'ZerglingBurrowed', 'Overlord', 'Thor', 'Starport', 'CollapsibleRockTowerDebrisRampRight', 'Hatchery', 'Oracle', 'SwarmHost', 'Gateway', 'Sentry', 'OrbitalCommand', 'Hydralisk', 'RichMineralField', 'Barracks', 'Overseer', 'BroodLord', 'Egg', 'SpacePlatformGeyser', 'CollapsibleRockTowerDebris', 'StarportReactor', 'VikingAssault', 'Baneling', 'DarkTemplar', 'PlanetaryFortress', 'WidowMine', 'NydusNetwork', 'TwilightCouncil', 'CreepTumor', 'ChangelingZerglingWings', 'Lair', 'TemplarArchive', 'CommandCenter', 'Mothership', 'VespeneGeyser', 'DestructibleRockEx1DiagonalHugeBLUR', 'EvolutionChamber', 'Zealot', 'WarpPrismPhasing']\nhtkeys = ['ht_00', 'ht_01', 'ht_02', 'ht_10', 'ht_11', 'ht_12', 'ht_20', 'ht_21', 'ht_22', 'ht_30', 'ht_31', 'ht_32', 'ht_40', 'ht_41', 'ht_42', 'ht_50', 'ht_51', 'ht_52', 'ht_60', 'ht_61', 'ht_62', 'ht_70', 'ht_71', 'ht_72', 'ht_80', 'ht_81', 'ht_82', 'ht_90', 'ht_91', 'ht_92']\nbuildings = ['BuildTemplarArchive','BuildNexus','BuildHatchery','BuildSpineCrawler','BuildSpire','BuildStargate','BuildCyberneticsCore','BuildPointDefenseDrone','BuildTechLabFactory','BuildNydusWorm','BuildCreepTumor','BuildRoboticsFacility','BuildRefinery','BuildFusionCore','BuildWidowMine','BuildSpawningPool','BuildBanelingNest','BuildNuke','BuildCommandCenter','BuildEngineeringBay','BuildSporeCrawler','BuildHydraliskDen','BuildBattleHellion','BuildBarracks','BuildExtractor','BuildFactory','BuildGateway','BuildStarport','BuildPylon','BuildInfestationPit','BuildInterceptor','BuildDarkShrine','BuildReactorFactory','BuildFleetBeacon','BuildTechLabStarport','BuildSensorTower','BuildUltraliskCavern','BuildHellion','BuildThor','BuildRoachWarren','BuildBunker','BuildTwilightCouncil','BuildRoboticsBay','BuildAssimilator','BuildSupplyDepot','BuildMissileTurret','BuildSiegeTank','BuildPhotonCannon','BuildArmory','BuildNydusNetwork','BuildReactorStarport','BuildForge','BuildAutoTurret','BuildGhostAcademy','BuildEvolutionChamber']","6601673d":"def player_and_race(game):\n    return {'player' : ':'.join(game[0]), 'race' : game[1][0]}","d887412d":"def cmd_nb_use(game):\n    result = Counter()\n    for l in game[2:]:\n        if len(l) >= 2:\n            cmd = ''\n            if l[1] == 'BasicCommandEvent':\n                cmd = l[2]\n            elif l[1] == 'TargetPointCommandEvent':\n                cmd = l[-1]\n            elif l[1] == 'TargetUnitCommandEvent':\n                cmd = l[2]\n            cmd = cmd.replace('\\n','')\n            if cmd != '':\n                result.update([cmd + '_nb'])\n    total = sum(result.values())\n    result = {k:result[k]\/total * 10000 for k in result}\n    return result","568f4e8d":"def first_cmd_use(game):\n    result = {}\n    for l in game[2:]:\n        if len(l) >= 2:\n            cmd = ''\n            if l[1] == 'BasicCommandEvent':\n                cmd = l[2]\n            elif l[1] == 'TargetPointCommandEvent':\n                cmd = l[-1]\n            elif l[1] == 'TargetUnitCommandEvent':\n                cmd = l[2]\n            cmd = cmd.replace('\\n','')\n            if cmd != '' and (cmd + '_ft') not in result:\n                result[cmd + '_ft'] = l[0]\n    return result","8aa99015":"def first_cmd_uses(game, nb):\n    tempo = defaultdict(list)\n    for l in game[2:]:\n        if len(l) >= 2:\n            cmd = ''\n            if l[1] == 'BasicCommandEvent':\n                cmd = l[2]\n            elif l[1] == 'TargetPointCommandEvent':\n                cmd = l[-1]\n            elif l[1] == 'TargetUnitCommandEvent':\n                cmd = l[2]\n            cmd = cmd.replace('\\n','')\n            if cmd != '' and len(tempo[cmd]) < nb:\n                tempo[cmd].append(l[0])\n    result = {}\n    for cmd in tempo:\n        for i, t in enumerate(tempo[cmd]):\n            result[cmd + '_t' + str(i+1)] = t\n    return result","37d5534d":"def ht_freq(game):\n    counter = Counter()\n    for l in game[2:]:\n        if len(l)>= 2:\n            if l[1] == 'ControlGroupEvent':\n                elem = (l[2] + l[3]).replace('\\n','')\n                counter.update(['ht_' + elem])\n    total = sum(counter.values())\n    return {k:counter[k] \/ total * 1000 for k in counter}","46ce8e46":"def nb_selected(game):\n    counter = Counter()\n    for l in game[2:]:\n        if len(l)>= 2:\n            if l[1] == 'SelectionEvent':\n                elems = l[2].replace('\\n','').split(';')\n                counter.update(elems)\n    counter.pop('', None)\n    return {k+'_nbsl':counter[k] for k in counter}","4d94e433":"def first_n_builds(game, n):\n    cpt = 0\n    result = {}\n    for l in game[2:]:\n        if len(l) >= 2:\n            cmd = ''\n            if l[1] == 'BasicCommandEvent':\n                cmd = l[2]\n            elif l[1] == 'TargetPointCommandEvent':\n                cmd = l[-1]\n            elif l[1] == 'TargetUnitCommandEvent':\n                cmd = l[2]\n            cmd = cmd.replace('\\n','')\n            if cmd.startswith('Build'):\n                cpt = cpt + 1\n                result['b' + str(cpt)] = l[0]\n        if cpt == n:\n            break\n    return result","b2ca287f":"def nb_workers(game):\n    cpt = 0\n    race = game[1][0]\n    for l in game[2:]:\n        if len(l) >= 2:\n            cmd = ''\n            if l[1] == 'BasicCommandEvent':\n                cmd = l[2].replace('\\n','')\n                if race == 'Protoss' and cmd == 'TrainProbe' \\\n                    or race == 'Zerg' and cmd == 'MorphDrone'\\\n                    or race == 'Terran' and cmd == 'TrainSCV':\n                    cpt = cpt + 1\n    return {'nb_w' : cpt}","6c7f88cd":"def first_build(game):\n    d = {}\n    for l in game[2:]:\n        if len(l) >= 2:\n            cmd = ''\n            if l[1] == 'BasicCommandEvent':\n                cmd = l[2]\n            elif l[1] == 'TargetPointCommandEvent':\n                cmd = l[-1]\n            elif l[1] == 'TargetUnitCommandEvent':\n                cmd = l[2]\n            cmd = cmd.replace('\\n','')\n            if cmd.startswith('Build') and cmd not in d:\n                d[cmd+'_bft'] = l[0]\n    return d","419650dc":"def motor_skills(game):\n    i = -1\n    last_t = None\n    while len(game[i]) < 2:\n        i = i - 1\n    try:\n        last_t = int(game[i][0]) \/ (60*16)\n    except:\n        print(game)\n    result = {}\n    tot_acts  = len(game[2:])\n    \n    tot_cam_actions = 0\n    \n    last_coords = np.array([0,0])\n    tot_cam_distance = 0\n    \n    tot_basic = 0\n    \n    tot_targetunit = 0\n    \n    tot_targetpoint = 0\n    \n    tot_htkey = 0\n    \n    for l in game[2:]:\n        if len(l) >= 2:\n            cmd = ''\n            if l[1] == 'CameraEvent':\n                tot_cam_actions += 1\n                new_coords = np.array([float(e) for e in l[2:]])\n                tot_cam_distance += np.sqrt(np.sum((new_coords - last_coords))**2)\n                last_coords = new_coords\n            elif l[1] == 'BasicCommandEvent':\n                tot_basic += 1\n            elif l[1] == 'TargetUnitCommandEvent':\n                tot_targetunit += 1\n            elif l[1] == 'TargetPointCommandEvent':\n                tot_targetpoint += 1\n            elif l[1] == 'ControlGroupEvent':\n                tot_htkey =+ 1\n    return {'apm':tot_acts \/ last_t, 'cam' : tot_cam_actions \/ last_t, 'camd' : tot_cam_distance,\\\n               'hpm':tot_htkey\/last_t, 'bpm':tot_basic\/last_t, 'upm':tot_targetunit\/last_t, 'ppm':tot_targetpoint\/ last_t}\n    ","9418ba0a":"def buildings_stats(game):\n    df = pd.read_csv('.\/bstats.csv')\n    cmds = list(df['building'])\n    i = -1\n    last_t = None\n    while len(game[i]) < 2:\n        i = i - 1\n    try:\n        last_t = int(game[i][0]) \/ (60*16)\n    except:\n        exit(0)\n    tot_minerals = 0\n    tot_gas = 0\n    tot_time = 0\n    tot_hp = 0\n    tot_plasma_sheild = 0\n    tot_buildings = 0\n\n    for l in game[2:]:\n        if len(l) >= 2:\n            cmd = ''\n            if l[1] == 'BasicCommandEvent':\n                cmd = l[2]\n            elif l[1] == 'TargetPointCommandEvent':\n                cmd = l[-1]\n            elif l[1] == 'TargetUnitCommandEvent':\n                cmd = l[2]\n        cmd = cmd.replace('\\n','')\n        if cmd in cmds:\n            rw = df[df['building'] == cmd].iloc[0]\n            tot_buildings += 1\n            rw = df[df['building'] == cmd].iloc[0]\n            tot_minerals += rw['mineral']\n            tot_gas += rw['gas']\n            tot_time += rw['game_speed']\n            tot_hp += rw['hp']\n            tot_plasma_sheild += rw['PS']\n    return {'tot_minerals_b':tot_minerals, 'tot_gas_b':tot_gas, 'tot_time_b':tot_time, 'tot_hp_b':tot_hp,\\\n    'tot_plasma_sheild_b':tot_plasma_sheild, 'tot_buildings':tot_buildings, 'buildpm':tot_buildings\/last_t}\n\n","fe2c7dec":"def ht_first(game):\n    result = {}\n    for l in game[2:]:\n        if len(l)>= 2:\n            if l[1] == 'ControlGroupEvent':\n                elem = (l[2] + l[3]).replace('\\n','')\n                if 'ht_' + elem + '_ft' not in result:\n                    result['ht_' + elem + '_ft'] = l[0]\n    return result","aea624cd":"def game_duration(game):\n    if len(game) > 3:\n        last_t = None\n        i = -1\n        while len(game[i]) < 2:\n            i = i - 1\n        try:\n            last_t = int(game[i][0]) \/ (16)\n        except:\n            print(game)\n            result = {}\n        return {'duration' : last_t}\n    else:\n        return {'duration' : 0}","6c02c3d2":"df_duration = pd.read_csv('\/kaggle\/input\/features\/duration.csv')","de2178b3":"df_duration['duration'].describe()","aeeae750":"nb_games = df_duration.shape[0]\nprint(sum(df_duration['duration'] < 600) \/ nb_games)\nprint(sum(df_duration['duration'] > 2000) \/ nb_games)","7f5b7c8b":"ax = sn.distplot(df_duration['duration'], rug=True)\n_ = ax.set(ylabel='frequency', xlabel='duration (seconds)')","0c2ac738":"df_p_r = pd.read_csv('\/kaggle\/input\/features\/p_r.csv')","db69a3f7":"df_player_race = pd.read_csv('\/kaggle\/input\/features\/p_r_ht.csv')","fa37f0a2":"df_p_r['player'].value_counts().describe()","7d3f5ad3":"ax = sn.distplot(df_p_r['player'].value_counts(), rug=True)\n_ = ax.set(ylabel='frequency', xlabel='number of games')","b1b8912e":"df_htf = pd.read_csv('\/kaggle\/input\/features\/h_0_10_freq.csv')","9754c9cf":"def get_player_freqs(player):\n    return df_p_r[df_p_r['player'] ==player].sample(20).join(df_htf).drop(columns=['player','race']).reset_index(drop=True)","7d03c43a":"players = ['http:\/\/kr.battle.net\/sc2\/en\/profile\/2343733\/1\/sOs\/','http:\/\/us.battle.net\/sc2\/en\/profile\/3202227\/1\/viOLet\/','http:\/\/kr.battle.net\/sc2\/en\/profile\/2344333\/1\/Leenock\/','http:\/\/kr.battle.net\/sc2\/en\/profile\/2343607\/1\/Rain\/','http:\/\/eu.battle.net\/sc2\/en\/profile\/3538115\/1\/Golden\/','http:\/\/kr.battle.net\/sc2\/en\/profile\/2344987\/1\/Life\/','http:\/\/kr.battle.net\/sc2\/en\/profile\/2343479\/1\/True\/','http:\/\/kr.battle.net\/sc2\/en\/profile\/2343531\/1\/DREAM\/','http:\/\/kr.battle.net\/sc2\/en\/profile\/2343012\/1\/Maru\/']\nf1 = get_player_freqs(players[0])\nf2 = get_player_freqs(players[1])\nf3 = get_player_freqs(players[2])\nf4 = get_player_freqs(players[3])\nf5 = get_player_freqs(players[4])\nf6 = get_player_freqs(players[5])\nf7 = get_player_freqs(players[6])\nf8 = get_player_freqs(players[7])\nf9 = get_player_freqs(players[8])","45ed703c":"fig, axs = plt.subplots(3, 3, figsize=(15,15))\nfig.tight_layout()\n_ = sn.heatmap(f1, ax=axs[0, 0]).set_title(players[0])\n_ = sn.heatmap(f2, ax=axs[0, 1]).set_title(players[1])\n_ = sn.heatmap(f3, ax=axs[0, 2]).set_title(players[2])\n_ = sn.heatmap(f4, ax=axs[1, 0]).set_title(players[3])\n_ = sn.heatmap(f5, ax=axs[1, 1]).set_title(players[4])\n_ = sn.heatmap(f6, ax=axs[1, 2]).set_title(players[5])\n_ = sn.heatmap(f7, ax=axs[2, 0]).set_title(players[6])\n_ = sn.heatmap(f8, ax=axs[2, 1]).set_title(players[7])\n_ = sn.heatmap(f9, ax=axs[2, 2]).set_title(players[8])\n","faa2eec5":"new_df = pd.concat([df_p_r['player'], df_htf], axis=1)\nnew_df = new_df[new_df['player'].apply(func=lambda p: p in players)].sort_values('player').reset_index(drop=True)","83ee6a03":"sn.clustermap(new_df.drop(columns=['player']), method='average')","493c157f":"df_htf_all = pd.read_csv('\/kaggle\/input\/features\/ht_freq.csv')\ndf_mtr = pd.read_csv('\/kaggle\/input\/features\/mtskills.csv')\ndf_first_ht = pd.read_csv('\/kaggle\/input\/features\/hf.csv')","c589f75c":"df_mtr","20dbbcb2":"df = pd.concat([df_p_r, df_htf_all, df_mtr], axis=1)","918f252a":"warnings.filterwarnings('ignore')","65aa3489":"idx = np.arange(df.shape[0])\nnp.random.shuffle(idx)\ntraining = idx[:df.shape[0] - 400]\ntest = idx[df.shape[0] - 400:]","233cb96e":"df_training = df.iloc[training]\ndf_test = df.iloc[test]\ndpths = [5, 10, 15, 20, 25, 30, 35]\nnests = [20, 30, 50, 100, 150, 200, 250, 300]\nresults2 = np.ndarray(shape=(len(dpths), len(nests)))\nfor i, d in enumerate(dpths):\n    for j, nest in enumerate(nests):\n        clf = RandomForestClassifier(n_estimators=nest, max_depth=d)\n        clf.fit(df_training.iloc[:, 2:], df_training['player'])\n        pred_labels = clf.predict(df_test.iloc[:, 2:])    \n        results2[i,j] = f1_score(df_test['player'], pred_labels, average='macro')","b71049b0":"htmdf = pd.DataFrame(results2, columns=['ne' + str(e) for e in nests])\nhtmdf.index = ['d' + str(e) for e in dpths]\nsn.heatmap(htmdf)","00379087":"clf = RandomForestClassifier(n_estimators=250, max_depth=25)\nclf.fit(df_training.iloc[:, 2:], df_training['player'])\npred_labels = clf.predict(df_test.iloc[:, 2:])    ","7d3cddd2":"f1_score(df_test['player'], pred_labels, average='macro')","c404a3cd":"cm = confusion_matrix(df_test['player'], pred_labels)","fb43d4c3":"for i in range(0, cm.shape[0]):\n    row = cm[i, :]\n    sm = sum(row)\n    if sm != 0:\n        cm[i, :] = row \/ sm","d51da732":"fig= plt.figure(figsize=(16,8))\nsn.heatmap(cm)","25a25600":"This heat map suggests that small trees' depths are very constaining and therefor lead to bad performance. Increasing the depth is followed by an increase in the prediction accuracy but at a certain point increasing this parameter will have no effect on performance. Same is to be said about the number of estimators parameter.\n\nOne can choose the configuratio nwith the best results but here we opted for a validation set approach with is not very precise so cross validation would be more usefull.","0b7a2b4f":"Data seems very unbalanced as we see in the above graph. Some players have very few (4, 5 or 6) games and for some others we have more than 30 games. This may be problematic since some players would not be well represented and classifications would be biased towards majority players. \n\nIn our training data, 50% of players are represented by 7 through 20 games. Tests should be done to assess the accurracy of players identification versus the number of games of each players. ","44bfed97":"We can observe that 85% of games are ranging between 10 and 30 minutes which is seemingly plausible but more tests should be done to assess *minumum* and *maximum* duration that are relevant for players identification","8bc3548c":"In addition to hotkeys use we tried to extract other features like: motor skills, different buildings stats, number of workers, first time of hotkeys use, first time of building (To capture the builfing tech tree behavior) etc...","1f90c508":"**GAMES DURATION**","af65b006":"This summary suggets that 75% of games last more than 14 minutes and 50% of games range between 14 minutes and 21 minutes. \n\nVery long\/short games may be problematic because short ones (That are due to a connexion problem or a player quiting the game for example) wont contain or capture the main specific player behavior and very long ones will obsecure it since very long games are a rare situation in which players will need to imporovise and take non familiar actions\/decisions ","244e218b":"To verify this features' relevance (hotkeys use) we visualize a heatmap dendrogram clustering. ","eab6338a":"**Prediction**","025f2b80":"Game duration appears to follow a normal distribution centred around its mean 1000 seconds and a standard deviation around 475 seconds","c0382842":"These heatmap graphs are drawn to check if a player has similar hotkeys use behavior accross most of his games. We plot them for 9 different players and 20 games for each player as indicated above each graph.\n\nWe can observe that each player has almost the same use of each key in each of his games with some differences.\n\nIn contrast, we can observe as well that these keyword features are different from a players to another. For example *...\/viOLet\/* is the only player among the 9 players that does not use h1, *...\/Golden\/* and *...\/DREAM\/*\nare the only two tht use h6 significantly...\n","932bbdef":"**Group keys manipulation analysis**","03c69151":"Based on the resarch paper *https:\/\/dl.acm.org\/citation.cfm?id=2702429* (Masters of Control: Behavioral Patterns of Simultaneous Unit Group Manipulation in StarCraft 2) we see that hotkeys use is player specific and can be used to identify him with a very high accurracy given a minimum number of games per player.","bd90ad33":"**Confusion matrix**","5046e4b7":"**Number of games per player**","cd7af2b6":"**Other features**","77c8ba56":"This graph shows that within this group of players, features h7, h8 and h9 are not very relvant to separate them. We see constituting as well a bunch of big clusters that represent each player. This suggests that hotkeys use per player is a discriminant factor that can be used in order to identify players.\n","b1e37d7e":"This graph suggests that our model is not very bad even though f1 score is just 80% given that when our model incorrectly classifies a player it predicts just another play. This confirm our hypothesis about players who are playing using different usernames (At least different URLs in the dataset) and so the URL is not a primary key for our records. "}}