{"cell_type":{"2436af9b":"code","4257f91a":"code","1e63e1f8":"code","4fa870f1":"code","e6a3f78e":"code","4a08ad25":"code","f0057bc4":"code","72737af2":"code","22f14dc6":"code","ce5e56d8":"code","447ecf29":"code","1a9290dd":"code","2dbbcc15":"code","ccc5fd45":"code","177d8790":"code","f0f1a659":"code","002b6393":"code","1ef82f04":"code","2ddafad6":"code","cd677731":"code","c959410b":"code","12e98e58":"code","3b2a5f8a":"code","a7566bad":"code","b4b2acc8":"code","807570bc":"code","a6390f5d":"code","07ee61bb":"code","4adad7d5":"code","6fdde551":"code","35087845":"code","0ee21d3c":"code","77996a3a":"code","b0ce74cf":"code","16bfe2d1":"code","8976887c":"code","c0f80388":"code","32d4fee1":"code","fe36deea":"code","8529e44a":"code","4234ddcc":"code","781874d5":"code","961432fe":"code","b1c80f8f":"code","8d95d9b5":"code","3de1346b":"code","351d339f":"code","011a26cc":"code","6205c358":"code","aa6d81f0":"code","2e8e970e":"code","57d06e3a":"code","03320071":"code","f566fd49":"code","fe615c06":"code","1d03da36":"code","cd9e46b8":"code","3503d836":"code","1692b746":"code","2ccb28d6":"code","dca2024d":"code","64c84823":"code","1f946664":"markdown","10a88a7c":"markdown","5df31b26":"markdown","2f9709d9":"markdown","5c90a54f":"markdown"},"source":{"2436af9b":"%matplotlib inline\n\ndf = pd.read_csv(\"train.csv\")\npd.options.display.max_columns = None\ndf.head()","4257f91a":"df.shape","1e63e1f8":"df.info()","4fa870f1":"df.isnull().sum()","e6a3f78e":"df.drop([\"PoolQC\",\"Fence\",\"MiscFeature\",\"Alley\"],axis=1,inplace=True)\ndf.shape","4a08ad25":"sns.heatmap(df.isnull(),yticklabels=False,cmap=\"YlGnBu\",cbar=False)","f0057bc4":"df.head()","72737af2":"df[\"LotFrontage\"] = df[\"LotFrontage\"].fillna(df[\"LotFrontage\"].mean())","22f14dc6":"df[\"MasVnrType\"].value_counts()","ce5e56d8":"df[\"MasVnrType\"] = df[\"MasVnrType\"].fillna(df[\"MasVnrType\"].mode()[0])","447ecf29":"df[\"MasVnrArea\"] = df[\"MasVnrArea\"].fillna(df[\"MasVnrArea\"].mean())","1a9290dd":"df[\"FireplaceQu\"].value_counts()","2dbbcc15":"data_corr = df.corr()\ndata_corr[\"SalePrice\"].sort_values(ascending=False)","ccc5fd45":"df.drop(\"FireplaceQu\",axis=1,inplace=True)","177d8790":"df[\"GarageType\"].value_counts()","f0f1a659":"df[\"GarageType\"] = df[\"GarageType\"].fillna(df[\"GarageType\"].mode()[0])","002b6393":"df[\"GarageYrBlt\"] = df[\"GarageYrBlt\"].fillna(df[\"GarageYrBlt\"].mean())","1ef82f04":"def x(columns_int):\n    for col in columns_list:\n        df[\"col\"] = df[\"col\"].fillna(df[\"col\"].mean())\n    return df","2ddafad6":"df[\"GarageFinish\"].value_counts()","cd677731":"df[\"GarageFinish\"] = df[\"GarageFinish\"].fillna(df[\"GarageFinish\"].mode()[0])","c959410b":"df[\"GarageQual\"] = df[\"GarageQual\"].fillna(df[\"GarageQual\"].mode()[0])\ndf[\"GarageCond\"] = df[\"GarageCond\"].fillna(df[\"GarageCond\"].mode()[0])","12e98e58":"sns.heatmap(df.isnull(),yticklabels=False,cmap=\"YlGnBu\",cbar=False)","3b2a5f8a":"df.info(verbose=None)","a7566bad":"df[\"BsmtQual\"] = df[\"BsmtQual\"].fillna(df[\"BsmtQual\"].mode()[0])\ndf[\"BsmtCond\"] = df[\"BsmtCond\"].fillna(df[\"BsmtCond\"].mode()[0])\ndf[\"BsmtExposure\"] = df[\"BsmtExposure\"].fillna(df[\"BsmtExposure\"].mode()[0])\ndf[\"BsmtFinType1\"] = df[\"BsmtFinType1\"].fillna(df[\"BsmtFinType1\"].mode()[0])\ndf[\"BsmtFinType2\"] = df[\"BsmtFinType2\"].fillna(df[\"BsmtFinType2\"].mode()[0])\ndf.info(verbose=None)","b4b2acc8":"df[\"Electrical\"] = df[\"Electrical\"].fillna(df[\"Electrical\"].mode()[0])","807570bc":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False)","a6390f5d":"df_objects = df.select_dtypes(include=['object']).copy()","07ee61bb":"df_objects.shape","4adad7d5":"df_objects.columns","6fdde551":"columns = ['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n       'PavedDrive', 'SaleType', 'SaleCondition']","35087845":"df.dropna(inplace=True)","0ee21d3c":"df.shape","77996a3a":"len(columns)","b0ce74cf":"test_df = pd.read_csv(\"finaltest.csv\")\ntest_df.head()","16bfe2d1":"final_df = pd.concat([df,test_df],axis=0)","8976887c":"final_df.shape","c0f80388":"def category_onehot_multcols(multcolumns):\n    df_final=final_df\n    i=0\n    for fields in multcolumns:\n        \n        print(fields)\n        df1=pd.get_dummies(final_df[fields],drop_first=True)\n        \n        final_df.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([final_df,df_final],axis=1)\n        \n    return df_final","32d4fee1":"final_df_hot=category_onehot_multcols(columns)","fe36deea":"final_df_hot.shape","8529e44a":"final_df_hot =final_df_hot.loc[:,~final_df_hot.columns.duplicated()]","4234ddcc":"final_df_hot.shape","781874d5":"df_Train=final_df_hot.iloc[:1460,:]\ndf_Test=final_df_hot.iloc[1460:,:]","961432fe":"df_Test.drop(['SalePrice'],axis=1,inplace=True)","b1c80f8f":"X_train=df_Train.drop(['SalePrice'],axis=1)\ny_train=df_Train['SalePrice']","8d95d9b5":"import xgboost\nclf=xgboost.XGBRegressor()\nclf.fit(X_train,y_train)","3de1346b":"import pickle\nfilename = 'finalized_model.pkl'\npickle.dump(clf, open(filename, 'wb'))","351d339f":"y_pred = clf.predict(df_Test)\ny_pred","011a26cc":"pred = pd.DataFrame(y_pred)\nsub_df=pd.read_csv(\"sample_submission.csv\")\ndatasets = pd.concat([sub_df['Id'],pred],axis=1)\ndatasets.columns = ['Id','SalePrice']\ndatasets.to_csv(\"sample_submission1.csv\",index=False)","6205c358":"import xgboost\nregressor=xgboost.XGBRegressor()","aa6d81f0":"booster=['gbtree','gblinear']\nbase_score=[0.25,0.5,0.75,1]\n\nn_estimators = [100, 500, 900, 1100, 1500]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }\nfrom sklearn.model_selection import RandomizedSearchCV","2e8e970e":"# Set up the random search with 4-fold cross validation\nrandom_cv = RandomizedSearchCV(estimator=regressor,\n            param_distributions=hyperparameter_grid,\n            cv=3, n_iter=20,\n            scoring = 'neg_mean_absolute_error',n_jobs = 4,\n            verbose = 5, \n            return_train_score = True,\n            random_state=42)","57d06e3a":"random_cv.fit(X_train,y_train)","03320071":"random_cv.best_estimator_","f566fd49":"clf_new_xg=xgboost.XGBRegressor(base_score=0.25, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n             importance_type='gain', interaction_constraints=None,\n             learning_rate=0.1, max_delta_step=0, max_depth=3,\n             min_child_weight=3, monotone_constraints=None,\n             n_estimators=100, n_jobs=0, num_parallel_tree=1,\n             objective='reg:squarederror', random_state=0, reg_alpha=0,\n             reg_lambda=1, scale_pos_weight=1, subsample=1, tree_method=None,\n             validate_parameters=False, verbosity=None)","fe615c06":"clf_new_xg.fit(X_train,y_train)","1d03da36":"import pickle\nfilename = 'finalized_model_xg_para_opt.pkl'\npickle.dump(clf, open(filename, 'wb'))","cd9e46b8":"y_pred_new = clf_new_xg.predict(df_Test)\ny_pred_new","3503d836":"pred_new = pd.DataFrame(y_pred_new)\nsub_df=pd.read_csv(\"sample_submission.csv\")\ndatasets = pd.concat([sub_df['Id'],pred_new],axis=1)\ndatasets.columns = ['Id','SalePrice']\ndatasets.to_csv(\"sample_submission_xgb_para_opt.csv\",index=False)","1692b746":"X_train.shape,y_train.shape\nfrom keras import backend as K\ndef root_mean_squared_error(y_true, y_pred):\n        return K.sqrt(K.mean(K.square(y_pred - y_true)))","2ccb28d6":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LeakyReLU,PReLU,ELU\nfrom keras.layers import Dropout\n\nmodel = Sequential()\nmodel.add(Dense(output_dim=50,init = 'he_uniform',activation='relu',input_dim = 177))\nmodel.add(Dense(output_dim=25,init = 'he_uniform',activation='relu'))\nmodel.add(Dense(output_dim=50,init = 'he_uniform',activation='relu'))\nmodel.add(Dense(output_dim = 1, init = 'he_uniform'))\nmodel.compile(loss= root_mean_squared_error,optimizer='Adamax')\n\nhistory = model.fit(X_train.values, y_train.values,validation_split=0.20, batch_size = 10, nb_epoch = 1000)","dca2024d":"ann_pred=model.predict(df_Test)\nann_pred","64c84823":"pred_new_ann = pd.DataFrame(ann_pred)\nsub_df=pd.read_csv(\"sample_submission.csv\")\ndatasets = pd.concat([sub_df['Id'],pred_new_ann],axis=1)\ndatasets.columns = ['Id','SalePrice']\ndatasets.to_csv(\"sample_submission_ann.csv\",index=False)","1f946664":"## Use XGB regressor as our model. The predictions with normal XGB were good but when we fine tune the hyperparameters using RandomSearchCV we get better results","10a88a7c":"## Step 1 : To clean the data. (Remove all null or nan values, convert all categorical features)","5df31b26":"## I got a good rank in kaggle. My rank was 2259 out of 4900. Which is good considering I spent only half a day to build this. For sure with more efforts I can get into top 200 ranks. Still a lot can be done as of now I have not even done feature selections. That will help!!","2f9709d9":"# Kaggle compitition Advanced House Price Predictions.\nIn this tutorial I have tried to use different approaches to solve the Kaggle problem.","5c90a54f":"## Next I used ANN to solve this problem, looks like with more hyper param tuning I can achieve better results."}}