{"cell_type":{"c26a3778":"code","3b0cf109":"code","3568d649":"code","f2115cc2":"code","42dce2da":"code","7bc27fa1":"code","9eceaf45":"code","8486a34e":"code","c39760cd":"code","90df7ba4":"code","0ed40d1d":"code","23305bb5":"code","d7ed7da6":"code","372aeca5":"code","5ae09e40":"code","0929673f":"markdown","3b3bb240":"markdown"},"source":{"c26a3778":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler , StandardScaler\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nsns.set(color_codes = True)\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3b0cf109":"# Step2:  Load our data\ndf = pd.read_csv('..\/input\/mall-customers\/Mall_Customers.csv')\ndf.head()","3568d649":"df.rename(columns={'CustomerID':'id','genre':'Gender','Spending Score (1-100)':'score','Annual Income (k$)':'income'},inplace=True)\ndf.head()","f2115cc2":"# Step3: Feature Engineering - transforming variables as appropriate for inputs to Machine Learning Algorithm\n# transforming categorical variable Gender using One hot encodding\ngender_onhot = pd.get_dummies(df['Genre'])\ngender_onhot.tail()","42dce2da":"# Create input dataset aka X\nX = pd.merge(df[['Age','income']], gender_onhot, left_index=True, right_index=True)\nX.head()","7bc27fa1":"sns.pairplot(X[['Age','income']])\nprint(\"correlation between variables..........\")\nX.iloc[:,:4].corr()","9eceaf45":"# Create target variable\nY = df['score']\nY.head()","8486a34e":"scaler = StandardScaler()\nX_std = scaler.fit_transform(X)","c39760cd":"X_std[0:5]","90df7ba4":"# Step3: Split data in train & test set\nX_train, X_test, y_train, y_test = train_test_split(X_std,Y,test_size=0.20, random_state = 20)\nprint('Shape of Training Xs:{}'.format(X_train.shape))\nprint('Shape of Test Xs:{}'.format(X_test.shape))","0ed40d1d":"X_train[0:10]","23305bb5":"# Step4: Build Linear Regression Analysis Model\nlearner = SGDRegressor(max_iter=1000,penalty= \"l2\",eta0=0.0001,\n                      learning_rate = \"constant\")#initializing linear regression model\n\nlearner.fit(X_train,y_train); #training the linear regression model\ny_predicted = learner.predict(X_test)\nscore=learner.score(X_test,y_test);#testing the linear regression model","d7ed7da6":"print(score)\nprint(y_predicted)","372aeca5":"sns.boxplot(X = df['score'])","5ae09e40":"print(\"Predicted_value\",\"true_vale\")\nfor i,j in zip(y_predicted, y_test):\n    print(i,j)","0929673f":"**1. importing library**","3b3bb240":"**2.loading data**"}}