{"cell_type":{"ca96bad6":"code","b9501176":"code","254a166e":"code","edefae01":"code","fec6bd54":"code","b01a5461":"code","4968f1f1":"code","76e60f8e":"code","40c7e487":"code","11b81825":"code","6aa39c64":"code","6d4d6eeb":"code","21ad184b":"code","0e07dc09":"code","38071593":"code","739daa4c":"code","9adfc1b5":"code","d2fdbb3a":"code","8a6d278e":"code","f6020076":"code","82e977bf":"code","4e34e8bf":"code","12548a53":"code","63f00981":"code","3927cd37":"code","b29d5cde":"code","c0797dbf":"code","a61c6b93":"code","7594b0ce":"code","c29fa5e4":"code","451d16d9":"code","0ea013b1":"code","a902d368":"code","e39edfce":"code","424e22ca":"code","1cce28d9":"code","33b5edee":"code","d29c2d6e":"code","308758c3":"code","73e374af":"code","63af0a43":"code","f8718ecc":"code","2ca79b4a":"code","bc42fbda":"code","74eb134d":"code","e0d28369":"code","88b43684":"code","59ceec91":"code","386c9dcf":"code","e5c6efb3":"code","c9e655bb":"code","b11e9d82":"code","40f9a398":"code","8706cbea":"code","b8afdfaa":"code","2a22b73b":"code","d91dc9ea":"code","015719c6":"code","8a701604":"code","a22ca6be":"code","a711951d":"code","f0f8eb14":"code","20d95b51":"code","85257977":"code","e141124b":"code","41332c1a":"code","b502bb0a":"code","9e236f8a":"code","c616e954":"code","8bb8b71d":"code","962d298b":"code","f28dcfce":"code","320e23cc":"code","47527629":"code","7c868388":"code","7588467c":"code","8b3e3049":"code","38d49185":"code","b15bc7f9":"code","936d3da9":"code","1388caa1":"code","1a2016e9":"code","7b484d27":"code","6e284885":"code","57a74e76":"code","c7ba5898":"code","3a283c0c":"code","d4c32852":"code","bfa36d26":"code","784bc31e":"code","6be00a81":"code","24da2f8c":"code","4d6b8828":"code","249c7f6e":"code","80543748":"code","62c52200":"code","b0e5b296":"code","86ad4f7f":"code","a3cae002":"code","addd794a":"code","1c9d0fa5":"code","93a3ff1d":"code","04c45565":"code","10e982ea":"code","0d78b7de":"code","0827c31c":"code","f25fd5da":"code","b03cf913":"code","11b5a9f4":"code","a1b23396":"code","1b23ae8c":"code","9d449737":"code","f927c082":"code","728ca98d":"code","823b5e8f":"code","9749d134":"code","32b815b5":"code","65750924":"code","4ecf7d78":"code","3ba8bddf":"code","6bce2175":"code","8092b115":"code","fc49045c":"code","6941f36c":"code","ca6e7570":"code","33d72c28":"code","4c8fd68c":"code","3b67eb9b":"code","576f5395":"code","d10d31fc":"code","f290901c":"code","41015e5b":"code","8b265d0b":"code","636ae413":"code","8e1bd62e":"code","e51f60e7":"code","027d5fdb":"code","54cc3419":"code","c3737b29":"markdown","730ac0e7":"markdown","67010742":"markdown","a3d0a281":"markdown","07ddfb3c":"markdown","1b59f908":"markdown","fc40c00d":"markdown","e5d680cb":"markdown","cf1a6582":"markdown","1fc360e0":"markdown","03129ba6":"markdown","e8932fd9":"markdown","d295e3c4":"markdown","d00f00fe":"markdown","cacaf0b2":"markdown","daa519c6":"markdown","e84d3ca9":"markdown","6c993858":"markdown","4408fe47":"markdown","9fe9ed31":"markdown","410d7e99":"markdown","ab0e6bae":"markdown","32f8a40a":"markdown","f23cd37c":"markdown","f80877ad":"markdown","97646b1d":"markdown","c55f451e":"markdown","2fbe1623":"markdown","b4c36578":"markdown","a1ee0031":"markdown","6a762a66":"markdown","24f4897a":"markdown","bac9caaa":"markdown","1cc152ce":"markdown","eb97f998":"markdown","b2c49780":"markdown","33f28a4e":"markdown","b444a343":"markdown","bedddda8":"markdown","c08a83b3":"markdown","2598a582":"markdown","e0108de2":"markdown","675704d9":"markdown","13f1f74a":"markdown","9b3b041a":"markdown","e4d86fea":"markdown","8269efaf":"markdown","2928eff1":"markdown","4d4af5fc":"markdown","be03879d":"markdown","9402b492":"markdown","c409e0b4":"markdown","5b0fc8b7":"markdown","b70d41c6":"markdown","ddb3be61":"markdown","02db3df7":"markdown","08157c28":"markdown","4ba5a9a6":"markdown","8f1dc0f4":"markdown","d8477909":"markdown","eaf69916":"markdown","45ec85d0":"markdown","e2bb4e3d":"markdown","b588b641":"markdown","defa50b0":"markdown","7157dd1e":"markdown","715dedd5":"markdown","8aed6b72":"markdown","3ff82678":"markdown","7b3f23e0":"markdown","96ab0be5":"markdown","82d81fc6":"markdown","8a93aec1":"markdown","2f88ff02":"markdown","0d345587":"markdown","832353a1":"markdown","0efa6608":"markdown"},"source":{"ca96bad6":"!pip install seaborn --upgrade","b9501176":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport missingno as msno","254a166e":"raw_train = pd.read_csv('..\/input\/home-data-for-ml-course\/train.csv')\nraw_test = pd.read_csv('..\/input\/home-data-for-ml-course\/test.csv')","edefae01":"print(f'Raw Train set : {raw_train.shape} , and Raw Test set: {raw_test.shape}')","fec6bd54":"plt.figure(figsize = (30,15))\nsns.heatmap(raw_train.corr(), mask = raw_train.corr()<0.75, square = True, annot = True, vmin = 0.75, vmax = 1, cmap = 'winter')\nplt.ylim(0,38)\nplt.grid()","b01a5461":"correlation = raw_train.corr()","4968f1f1":"correlation['SalePrice'].sort_values(ascending = False).head(25)","76e60f8e":"raw_train.shape[1]","40c7e487":"fig, ax = plt.subplots(nrows = 9, ncols = 9, figsize = (35,35))\ni = 0\nfor row in ax:\n    for col in row:\n        try:\n            col.scatter(x = raw_train[raw_train.columns[i]], y = raw_train.SalePrice)\n            col.title.set_text(raw_train.columns[i])\n        except:\n            temp = 1\n        i = i + 1\nplt.show()    ","11b81825":"raw_train = raw_train.drop(columns = 'GarageCars')\nraw_test = raw_test.drop(columns = 'GarageCars')","6aa39c64":"sns.scatterplot(data = raw_train, x = 'GarageArea', y = 'SalePrice')\nplt.grid()","6d4d6eeb":"raw_train = raw_train.drop(raw_train[raw_train['GarageArea']>1200].index)","21ad184b":"raw_train = raw_train.drop(columns = 'GarageYrBlt')\nraw_test = raw_test.drop(columns = 'GarageYrBlt')","0e07dc09":"sns.scatterplot(data = raw_train, x = 'YearBuilt', y = 'SalePrice')\nplt.grid()","38071593":"raw_train = raw_train.drop(raw_train[(raw_train['YearBuilt']<1900)&(raw_train['SalePrice']>200000)].index)","739daa4c":"raw_train = raw_train.drop(raw_train[(raw_train['YearBuilt']<2000)&(raw_train['SalePrice']>600000)].index)","9adfc1b5":"raw_train = raw_train.drop(columns = 'TotRmsAbvGrd')\nraw_test = raw_test.drop(columns = 'TotRmsAbvGrd')","d2fdbb3a":"sns.scatterplot(data = raw_train, x = 'GrLivArea', y = 'SalePrice')\nplt.grid()","8a6d278e":"raw_train = raw_train.drop(raw_train[raw_train['GrLivArea'] > 4000].index)","f6020076":"raw_train = raw_train.drop(raw_train[(raw_train['GrLivArea'] > 2000) & (raw_train['SalePrice'] > 600000)].index)","82e977bf":"sns.scatterplot(data = raw_train, x = '1stFlrSF', y = 'SalePrice')\nplt.grid()","4e34e8bf":"raw_train = raw_train.drop(raw_train[(raw_train['1stFlrSF'] > 2500)&(raw_train['SalePrice'] < 500000)].index)","12548a53":"sns.scatterplot(data = raw_train , x = 'OverallQual', y = 'SalePrice')","63f00981":"sns.boxplot(data = raw_train , x = 'OverallQual', y = 'SalePrice')\nplt.grid()","3927cd37":"raw_train = raw_train.drop(raw_train[(raw_train['OverallQual'] == 4) & (raw_train['SalePrice'] > 200000)].index)\nraw_train = raw_train.drop(raw_train[(raw_train['OverallQual'] == 8) & (raw_train['SalePrice'] > 500000)].index)\nraw_train = raw_train.drop(raw_train[(raw_train['OverallQual'] == 9) & (raw_train['SalePrice'] > 510000)].index)","b29d5cde":"sns.boxplot(data = raw_train , x = 'FullBath', y = 'SalePrice')\nplt.grid()","c0797dbf":"raw_train = raw_train.drop(raw_train[(raw_train['FullBath'] == 0) & (raw_train['SalePrice'] > 300000)].index)\nraw_train = raw_train.drop(raw_train[(raw_train['FullBath'] == 2) & (raw_train['SalePrice'] > 500000)].index)","a61c6b93":"raw_train.loc[(raw_train['FullBath'] == 1) & (raw_train['SalePrice'] < 50000)]['SalePrice']","7594b0ce":"raw_train = raw_train.drop(raw_train[(raw_train['FullBath'] == 1) & (raw_train['SalePrice'] < 40000)].index)","c29fa5e4":"raw_train['YearRemodAdd'].unique()","451d16d9":"sns.scatterplot(data = raw_train , x = 'YearRemodAdd', y = 'SalePrice')","0ea013b1":"raw_train = raw_train.drop(raw_train[(raw_train['YearRemodAdd'] < 1970)&(raw_train['SalePrice'] >300000)].index)","a902d368":"sns.boxplot(data = raw_train , x = 'Fireplaces', y = 'SalePrice')\nplt.grid()","e39edfce":"raw_train = raw_train.drop(raw_train[(raw_train['Fireplaces']==1) & (raw_train['SalePrice'] > 360000)].index)\nraw_train = raw_train.drop(raw_train[(raw_train['Fireplaces']==2) & (raw_train['SalePrice'] > 400000)].index)","424e22ca":"sns.scatterplot(data = raw_train , x = 'MasVnrArea', y = 'SalePrice')","1cce28d9":"raw_train.drop(raw_train[raw_train['MasVnrArea'] > 1400].index, inplace = True )","33b5edee":"sns.scatterplot(data = raw_train , x = 'LotFrontage', y = 'SalePrice')","d29c2d6e":"raw_train.drop(raw_train[(raw_train['LotFrontage'] > 150) & (raw_train['SalePrice'] < 60000)].index, inplace = True)\nraw_train.drop(raw_train[(raw_train['LotFrontage'] > 250) & (raw_train['SalePrice'] < 300000)].index, inplace = True)","308758c3":"sns.scatterplot(data = raw_train , x = 'OpenPorchSF', y = 'SalePrice')","73e374af":"raw_train.drop(raw_train[(raw_train['OpenPorchSF'] > 400)].index, inplace = True)","63af0a43":"sns.scatterplot(data = raw_train , x = 'BsmtFinSF1', y = 'SalePrice')","f8718ecc":"sns.scatterplot(data = raw_train , x = '2ndFlrSF', y = 'SalePrice')","2ca79b4a":"sns.scatterplot(data = raw_train , x = 'WoodDeckSF', y = 'SalePrice')","bc42fbda":"sns.boxplot(data = raw_train , x = 'HalfBath', y = 'SalePrice')","74eb134d":"sns.scatterplot(data = raw_train , x = 'LotArea', y = 'SalePrice')","e0d28369":"raw_train.drop(raw_train[(raw_train['LotArea']>50000)].index, inplace = True)","88b43684":"num_val = pd.DataFrame(raw_train.select_dtypes(exclude = 'object').describe())","59ceec91":"len(num_val.columns)","386c9dcf":"#num_val.to_csv('isnum.csv')","e5c6efb3":"cat_val = pd.DataFrame(raw_train.select_dtypes(include = 'object').describe())\n#cat_val.to_csv('iscat.csv')","c9e655bb":"len(cat_val.columns)","b11e9d82":"catcol = raw_train.select_dtypes(include = 'object').columns","40f9a398":"raw_train[catcol].isnull().sum().sort_values(ascending = False)","8706cbea":"raw_test[catcol].isnull().sum().sort_values(ascending = False)","b8afdfaa":"raw_train['PoolQC'].fillna(value = 'NA', inplace = True)\nraw_test['PoolQC'].fillna(value = 'NA', inplace = True)","2a22b73b":"temp = ['MiscFeature','Alley','Fence', 'FireplaceQu', 'GarageCond', 'GarageQual', 'GarageFinish', 'GarageType', 'BsmtCond', 'BsmtQual','BsmtExposure','BsmtFinType1','BsmtFinType2']","d91dc9ea":"for i in temp:\n    raw_train[i].fillna(value = 'NA', inplace = True)\n    raw_test[i].fillna(value = 'NA', inplace = True)","015719c6":"temp = ['MasVnrType', 'MSZoning', 'Utilities','Functional','SaleType','Exterior2nd','Exterior1st','KitchenQual','Electrical']","8a701604":"for i in temp:\n    raw_train[i].fillna(value = 'None', inplace = True)\n    raw_test[i].fillna(value = 'None', inplace = True)","a22ca6be":"numcol = raw_train.select_dtypes(exclude = 'object').columns\nnumcol1 = raw_test.select_dtypes(exclude = 'object').columns","a711951d":"raw_train['MasVnrArea'].fillna(value = 0, inplace = True)\nraw_test['MasVnrArea'].fillna(value = 0, inplace = True)\nraw_test['TotalBsmtSF'].fillna(value = 0, inplace = True)","f0f8eb14":"temp = ['BsmtFullBath','BsmtHalfBath','GarageArea','BsmtUnfSF','BsmtFinSF2','BsmtFinSF1']\n\nfor i in temp:\n    raw_test[i].fillna(value = 0, inplace = True)","20d95b51":"fig, ax = plt.subplots(figsize = (20,10))\nordem = pd.pivot_table(data = raw_train, values = 'LotFrontage', columns = 'Neighborhood', aggfunc = 'mean')\nordem = ordem.T.reset_index().sort_values(by = 'LotFrontage', ascending = False)\nsns.boxplot(data = raw_train, x = 'Neighborhood', y = 'LotFrontage', order = ordem['Neighborhood'])","85257977":"tempo = raw_train.Neighborhood.unique()","e141124b":"for i in tempo:\n    raw_train['LotFrontage'] = np.where(raw_train.LotFrontage.isnull(), raw_train.loc[raw_train['Neighborhood'] == i]['LotFrontage'].mean(), raw_train['LotFrontage'])\n    raw_test['LotFrontage'] = np.where(raw_test.LotFrontage.isnull(), raw_test.loc[raw_test['Neighborhood'] == i]['LotFrontage'].mean(), raw_test['LotFrontage'])","41332c1a":"numcol","b502bb0a":"raw_train.drop(columns = 'MoSold', inplace = True)\nraw_test.drop(columns = 'MoSold', inplace = True)","9e236f8a":"raw_train['AgeRemod'] = raw_train['YrSold'] - raw_train['YearRemodAdd']\nraw_test['AgeRemod'] = raw_test['YrSold'] - raw_test['YearRemodAdd']","c616e954":"raw_train['Age'] = raw_train['YrSold'] - raw_train['YearBuilt']\nraw_test['Age'] = raw_test['YrSold'] - raw_test['YearBuilt']","8bb8b71d":"raw_train['HowNew'] = raw_train['AgeRemod']*raw_train['Age']\nraw_test['HowNew'] = raw_test['AgeRemod']*raw_test['Age']","962d298b":"raw_train.drop(columns = ['YrSold', 'YearBuilt','YearRemodAdd'], inplace = True)\nraw_test.drop(columns = ['YrSold', 'YearBuilt','YearRemodAdd'], inplace = True)","f28dcfce":"raw_train.select_dtypes(exclude = 'object').columns","320e23cc":"raw_train['TotalBsmtFinArea'] = raw_train['BsmtFinSF1'] + raw_train['BsmtFinSF2']\nraw_test['TotalBsmtFinArea'] = raw_test['BsmtFinSF1'] + raw_test['BsmtFinSF2']","47527629":"raw_train['TotalBsmtBath'] =  raw_train['BsmtFullBath'] + 0.5*raw_train['BsmtHalfBath']\nraw_test['TotalBsmtBath'] =  raw_test['BsmtFullBath'] + 0.5*raw_test['BsmtHalfBath']","7c868388":"raw_train.drop(columns = ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtFullBath', 'BsmtHalfBath'], inplace = True)\nraw_test.drop(columns = ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtFullBath', 'BsmtHalfBath'], inplace = True)","7588467c":"raw_train.drop(columns = 'BsmtUnfSF', inplace = True)\nraw_test.drop(columns = 'BsmtUnfSF', inplace = True)","8b3e3049":"raw_train['TotalBath'] = raw_train['FullBath'] + 0.5*raw_train['HalfBath']\nraw_test['TotalBath'] = raw_test['FullBath'] + 0.5*raw_test['HalfBath']","38d49185":"raw_train.drop(columns = ['FullBath', 'HalfBath'], inplace = True)\nraw_test.drop(columns = ['FullBath', 'HalfBath'], inplace = True)","b15bc7f9":"raw_train[['1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea','GarageArea', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea']]","936d3da9":"raw_train['TotalPorchArea'] = raw_train[['OpenPorchSF', 'EnclosedPorch', '3SsnPorch','ScreenPorch']].sum(axis =1)\nraw_test['TotalPorchArea'] = raw_test[['OpenPorchSF', 'EnclosedPorch', '3SsnPorch','ScreenPorch']].sum(axis =1)","1388caa1":"raw_train.drop(columns = ['OpenPorchSF', 'EnclosedPorch', '3SsnPorch','ScreenPorch'], inplace = True)\nraw_test.drop(columns = ['OpenPorchSF', 'EnclosedPorch', '3SsnPorch','ScreenPorch'], inplace = True)","1a2016e9":"raw_train.drop(columns = ['1stFlrSF','2ndFlrSF'], inplace = True)\nraw_test.drop(columns = ['1stFlrSF','2ndFlrSF'], inplace = True)","7b484d27":"raw_train['TotalLivArea'] = raw_train[['TotalBsmtSF','GrLivArea','GarageArea','WoodDeckSF','PoolArea','TotalPorchArea', 'WoodDeckSF']].sum(axis = 1)\nraw_test['TotalLivArea'] = raw_test[['TotalBsmtSF','GrLivArea','GarageArea','WoodDeckSF','PoolArea','TotalPorchArea','WoodDeckSF']].sum(axis = 1)","6e284885":"raw_train.drop(columns = 'WoodDeckSF', inplace = True)\nraw_test.drop(columns = 'WoodDeckSF', inplace = True)","57a74e76":"raw_train.drop(columns = 'MiscVal', inplace = True)\nraw_test.drop(columns = 'MiscVal', inplace = True)","c7ba5898":"raw_train.drop(columns = 'LowQualFinSF', inplace = True)\nraw_test.drop(columns = 'LowQualFinSF', inplace = True)","3a283c0c":"raw_train['MSSubClass'] = raw_train['MSSubClass'].astype('object')\nraw_test['MSSubClass'] = raw_test['MSSubClass'].astype('object')","d4c32852":"raw_train['OverallRate'] = raw_train['OverallQual'] + raw_train['OverallCond']\nraw_test['OverallRate'] = raw_test['OverallQual'] + raw_test['OverallCond']","bfa36d26":"fig, ax = plt.subplots(nrows = 7, ncols = 7, figsize = (35,35))\n\nfor i,el in enumerate(list(raw_train.select_dtypes(include = 'object').columns)[:-1]):\n    ordem = raw_train.groupby(by = el)['SalePrice'].mean().sort_values(ascending = False)\n    ordem = pd.DataFrame(ordem)\n    ordem.reset_index(inplace = True)  \n    a = sns.boxplot(data = raw_train, x = el, y = 'SalePrice', ax=ax.flatten()[i], order = ordem[el])\n    \nplt.tight_layout() \nplt.show()","784bc31e":"raw_train.Utilities.value_counts()","6be00a81":"raw_train.drop(columns = 'Utilities', inplace = True)\nraw_test.drop(columns = 'Utilities', inplace = True)","24da2f8c":"train_dummies = pd.get_dummies(raw_train)\ntest_dummies = pd.get_dummies(raw_test)","4d6b8828":"print(f'The shape of train_dummies is {train_dummies.shape} and the shape of test_dummies is {test_dummies.shape}')","249c7f6e":"Y = train_dummies['SalePrice']\ntrain_dummies.drop(columns = 'Id', inplace = True)\ntest_dummies.drop(columns = 'Id', inplace = True)","80543748":"train_dummies.drop(columns = 'SalePrice', inplace = True)","62c52200":"print(f'The shape of train_dummies is {train_dummies.shape} and the shape of test_dummies is {test_dummies.shape}')","b0e5b296":"def even_features(l1,l2):\n    a = l1.difference(l2)\n    b = l2.difference(l1)\n    print(f'The following columns are missing on the second dataset {a}')\n    print(f'The following columns are missing on the first dataset {b}')\n   ","86ad4f7f":"even_features(train_dummies.columns, test_dummies.columns)","a3cae002":"missing_test = ['Condition2_RRAe', 'Condition2_RRAn', 'Condition2_RRNn',\n       'Electrical_Mix', 'Electrical_None', 'Exterior1st_ImStucc',\n       'Exterior1st_Stone', 'Exterior2nd_Other', 'GarageQual_Ex',\n       'Heating_Floor', 'Heating_OthW', 'HouseStyle_2.5Fin',\n       'MiscFeature_TenC', 'PoolQC_Fa', 'RoofMatl_Membran', 'RoofMatl_Metal',\n       'RoofMatl_Roll']","addd794a":"for i in missing_test:\n    test_dummies[i] = 0","1c9d0fa5":"missing_train = ['Condition2_PosA', 'Condition2_PosN', 'Exterior1st_None',\n       'Exterior2nd_None', 'Functional_None', 'KitchenQual_None',\n       'MSSubClass_150', 'MSZoning_None', 'SaleType_None']","93a3ff1d":"for i in missing_train:\n    train_dummies[i] = 0","04c45565":"from sklearn import metrics\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV","10e982ea":"seed = 1000\nX = train_dummies.copy()\n","0d78b7de":"#adr = AdaBoostRegressor(random_state = seed)","0827c31c":"#adr_param = {'n_estimators':[1,3,5,6,8,10,12,14,15,17],\n            #'learning_rate':[0.1,0.25,0.40,0.55,0.70,0.85,1],\n            #'loss': ['linear','square', 'exponential']}","f25fd5da":"#grid_adr = GridSearchCV(adr, adr_param, scoring = 'neg_mean_absolute_error', cv =5)","b03cf913":"#grid_adr.fit(X,Y)","11b5a9f4":"#results = pd.DataFrame(grid_adr.cv_results_)","a1b23396":"#results = results[['rank_test_score', 'params', 'mean_test_score']]","1b23ae8c":"#results = results.sort_values(by = 'rank_test_score').reset_index()","9d449737":"#adr_best = results.iloc[0]","f927c082":"#adr_best","728ca98d":"#rfr = RandomForestRegressor(random_state = seed)","823b5e8f":"#rfr_param = {'n_estimators':[100,120,150,200], 'max_leaf_nodes':[2,3,4,5,8,10,12,15],\n             #'max_depth':[2,4,6,8,10,12,14,15]}","9749d134":"#grid_rfr = GridSearchCV(rfr, rfr_param, scoring = 'neg_mean_absolute_error', cv = 5)","32b815b5":"#grid_rfr.fit(X,Y)","65750924":"#results = pd.DataFrame(grid_rfr.cv_results_)","4ecf7d78":"#results = results[['rank_test_score', 'params', 'mean_test_score']]","3ba8bddf":"#results = results.sort_values(by = 'rank_test_score').reset_index()","6bce2175":"#rfr_best = results.iloc[0]","8092b115":"#rfr_best","fc49045c":"import xgboost as xgb","6941f36c":"#xgb = xgb.XGBRegressor(random_state = seed)","ca6e7570":"#xgb_param = {'n_estimators' : [50,100,150,175,200,250,300],'learning_rate' : [0.1,0.2,0.4,0.6], 'booster' : ['gbtree', 'gblinear', 'dart']}","33d72c28":"#grid_xgb = GridSearchCV(xgb, xgb_param, scoring = 'neg_mean_absolute_error', cv = 5)","4c8fd68c":"#grid_xgb.fit(X, Y)","3b67eb9b":"#results = pd.DataFrame(grid_xgb.cv_results_)","576f5395":"#results = results[['rank_test_score','mean_test_score','params']]","d10d31fc":"#results = results.sort_values(by = 'rank_test_score').reset_index()","f290901c":"#xgb_best = results.iloc[0]","41015e5b":"xgb_final = xgb.XGBRegressor(random_state = seed, booster = 'gbtree', learning_rate = 0.09, n_estimators = 500, reg_lambda = 1, max_depth = 3)","8b265d0b":"X = X.reindex(sorted(X.columns), axis = 1)","636ae413":"xgb_final.fit(X,Y)","8e1bd62e":"X_test = test_dummies.reindex(sorted(test_dummies.columns), axis = 1)","e51f60e7":"pred = xgb_final.predict(X_test)","027d5fdb":"Id = raw_test['Id']","54cc3419":"output = pd.DataFrame({'Id': Id, 'SalePrice': pred})\noutput.to_csv('submission.csv', index = False)","c3737b29":"Using these 2 files we see that there is no misclassification among columns","730ac0e7":"# Adjusting number of features in train and test dataset","67010742":"No clear logic here, in this case I will not remove any sample\n\nChecking column LotArea","a3d0a281":"The easiest way to engineer features(variables) is to use the numerical columns, considering that you can manipulate them.\n\nLet's take a look once again what we can use and also drop. I will call \"numcol\" that is a list with the numerical column names I created earlier","07ddfb3c":"No safe sample to remove\n\nChecking column HalfBath","1b59f908":"The month of the sale seems to do not have any contribution.\n\nFirst new feature: Number of Years since remodeling","fc40c00d":"# Treating missing and null values for numerical columns ","e5d680cb":"The best model among the tested ones is XGBOOST. So let's use it to do our final prediction","cf1a6582":"Checking columns BsmtFinSF1","1fc360e0":"At this point I do not see any other categorical feature to drop. So lets transform them into binary so that the models can understand.","03129ba6":"Seventh new feature: Total Porch Area","e8932fd9":"Second new feature: Total Age of the house","d295e3c4":"# Treating missing and null values for categorical columns ","d00f00fe":"# Double check on column types","cacaf0b2":"As a rookie, I am still learning. This study is based on acquired learning and also on the following notebooks:\n\nhttps:\/\/www.kaggle.com\/donaldst\/stackingandensembling\n\nhttps:\/\/www.kaggle.com\/devarshraval\/top-2-feature-selection-ridge-regression#Introduction-and-objectives","daa519c6":"From this point on, makes no sense trying to improve the correlation. All other continuous variables has a very low correlation, any sample removal would not contribute much.\n\n","e84d3ca9":"Lets clear a little bit more and drop some old columns","6c993858":"Checking column OpenPorchSF","4408fe47":"# Final prediction with XGBoostRegressor","9fe9ed31":"Here wee see a high correlation of the overall quality of a real state and its price. I dropped here the outliers of the outliers (LOL). Samples that were already outliers and with a strange behavior, for instance, a House with overall quality of 4 with a higher price than a house with a overall quality of 5.","410d7e99":"# RandomForestRegressor with GridSearchCV","ab0e6bae":"# Understanding the correlation of variables","32f8a40a":"Best Paramenters:\n    \nindex                                                             95\n\nrank_test_score                                                    1\n\nparams             {'max_depth': 6, 'max_leaf_nodes': 15, 'n_esti...\n\nmean_test_score                                             -17548.6\n\nName: 0, dtype: object\n","f23cd37c":"# XGBoost Regressor with GridSearchCV","f80877ad":"Fifth new feathre: Total number of basement baths","97646b1d":"We have different dataset shapes. Now let's try to understand which columns are different","c55f451e":"Starting with GarageCars and GarageArea\n\nIn this case, I would rather keep GarageArea that give more flexibility to the model and we can treat outliers better than GarageCars","2fbe1623":"Next is YearBuilt x GarageYrBlt\n\nIn this case, I would rather keep YearBuilt. Assuming they are very correlated, I would pick up a house based on YearBuilt and not on GarageYearBlt. Some houses do not have Garages as well, so it makes no sense.","b4c36578":"OverallCond and OverallQual are related to the same aspect and we can extract a single feature","a1ee0031":"LowQualFinSF seems that has no clear relation with SalePrice also or it's quite subjective and hard to measure.","6a762a66":"# AdaBoostRegressor with GridSearchCV\n\nSaving precious time by not running this part of the code","24f4897a":"Checking column MasVnrArea","bac9caaa":"Let's make a list of highly inter-correlated variables:\n\n1 - GarageCars x GarageArea - 0.88 - makes sense considering that you must have a proportional area to fit more cars\n\n2 - YearBuilt  x GarageYrBlt- 0.83 - difficult to say, because we can have garages built in different years. But for the sake of this dataset we will consider this correlation\n\n3 - TotRmsAbsGrd x GrLivArea - 0.83 - this follows the same logic of the number 1. Area above grade is proportional to number of rooms above grade\n\n4 - 1stFlrSF x TotalBsmtSF - 0.82 - this follows the same logic of the number 1. In most of cases you 1st floor area has to be as big as the basement area in order to cover it.","1cc152ce":"Lets complete both datasets to avoid any further problem with the estimators","eb97f998":"Lets drop the old features","b2c49780":"MSSubClass is not a numerical colum but a categorical, so let's transform it","33f28a4e":"Eighth new feature: Total Living area","b444a343":"# Understanding the correlation of the variables and the target","bedddda8":"Let's start following a logic: highly correlated variables that has high correlation with the SalePrice. In this case, all variables that are highly correlated are highly correlated with the SalePrice","c08a83b3":"First adjustments.\n\ntrain_dummies has the target column SalePrice, so lets keep it in a variable Y.\n\nBoth datasets has Id on it, we can drop them.","2598a582":"Importing my raw data","e0108de2":"# Feature Engineering - part II - Categorical columns","675704d9":"I am dropping the column GarageCars on both datasets to save some time.","13f1f74a":"No safe sample to remove\n\nChecking column 2ndFlrSF","9b3b041a":"Checking column LotFrontage","e4d86fea":"Best parameters:\n\nindex                                                              6\n\nrank_test_score                                                    1\n\nmean_test_score                                             -13371.5\n\nparams             {'booster': 'gbtree', 'learning_rate': 0.1, 'n...\n\nName: 0, dtype: object","8269efaf":"Taking an hollistic view, the only categorical data that has no contribution is Utilities. Let's count tha values:","2928eff1":"# Understanding and deleting outliers","4d4af5fc":"Seems to me that we can correlate the Neighborhood with the LotFrontage values.","be03879d":"What's the size of each dataset?","9402b492":"For the following columns I will fill it with zero","c409e0b4":"# Feature engineering - part I - Numerical columns","5b0fc8b7":"Column YearRemodAdd","b70d41c6":"Third new feature: How new is the house. You multiply because, lower the result 'newer' the house.","ddb3be61":"\nFourth new feature: Total finished area of basement","02db3df7":"Dropping 1st and 2nd floor area, once GrLivArea is already the sum of both","08157c28":"Instantiating numcol again","4ba5a9a6":"Following the same logic, but filling with 'None'. Creating a new category to not create a bias.","8f1dc0f4":"No safe sample to remove\n\nChecking column WoodDeckSF","d8477909":"Sixth new feature: Total number of baths above basement","eaf69916":"Checking column Fireplaces","45ec85d0":"# Importing machine learning libraries","e2bb4e3d":"At first we see an isolated sample after MasVnrArea 1400. Safe remove!","b588b641":"Next is TotRmsAbvGrd x GrLivArea\n\nIn this case I will consider GrLivArea as the variable and drop ToTRmsAbvGrd. In my perspective the number of rooms not necesseraly represents its quality and\/or area.","defa50b0":"Now we have both, train and test, with the same number of features.","7157dd1e":"We have now finished the first group of variables. Let's explore the other ones with high correlation with SalePrice\n\nStarting with OverallQual","715dedd5":"Moving to FullBath","8aed6b72":"XGBoost needs the column in the same order.","3ff82678":"\n1stFlrSF - First Floor Square Feet\n\n2ndFlrSF - Second Floow Square Feet\n\nLowQualFinSF - Low Quality Square Feet all floors\n\nGrLvArea - Living area above basement\n\nGarageArea - Garage area in square feet\n\nWoodDeckSF - Wood Deck area in square feet\n\nOpenPorchSF - Open Porch area in square feet\n\nEnclosedPorchSF - Enclosed Porch area in square feet\n\n3SsnPorch - 3 seasons porch area in square feet\n\nScreenPorch - Screen porch area in square feet\n\nPool area - pool area in square feet\n\n\n\n","7b3f23e0":"Importing all data mgmt libs","96ab0be5":"Lets take a loot at  some features and think what we could do","82d81fc6":"At this point no null data on both datasets (train and test)","8a93aec1":"Feature MiscVal has no correlation, and the value does not indicate anything. We already have a categorical feature that describes better.","2f88ff02":"Lets assume that missing values on these cases it's like you do not have the specific variable. For instance, if PooQC is missing, i will consider that the house do not have a pool and fill it with NA (existing option)","0d345587":"Best parameters :\nindex                                                            159\n\nrank_test_score                                                    1\n\nparams             {'learning_rate': 0.85, 'loss': 'linear', 'n_e...\n\nmean_test_score                                             -17966.5\n\nName: 0, dtype: object","832353a1":"No contribution at all. Drop it.","0efa6608":"Next is  1stFlrSF x TotalBsmtSF\n\nIn this case we see that we have many 0 values on TotalBsmtSF, even with higher CORR I decided to drop it. We can collect better data from 1stFlrSF"}}