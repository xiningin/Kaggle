{"cell_type":{"7c5449a5":"code","5b0a426e":"code","a1da030b":"code","b00a335e":"code","9e94aaa3":"code","b483ac31":"code","9ebef924":"code","101d2bc2":"code","184078b1":"code","6c4e60fa":"code","c52d2a9f":"code","d82fecba":"code","e248d7f4":"code","031b0ccb":"markdown","cca7d854":"markdown","dbc54ffc":"markdown","543941cb":"markdown","3c32fabe":"markdown","1f83a556":"markdown"},"source":{"7c5449a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5b0a426e":"import matplotlib.pyplot as plt\n%matplotlib inline \nimport seaborn as sns","a1da030b":"train_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')\ntrain_data.head()","b00a335e":"train_data.info()","9e94aaa3":"test_data.info()","b483ac31":"# Count plot of survived and not survived passengers\nsns.countplot(x='Survived', data=train_data)","9ebef924":"# Count plot of survived and not survived passengers by their sex\nsns.countplot(x='Survived', hue= \"Sex\", data=train_data)","101d2bc2":"#  Count plot of survived and not survived passengers by their class\nsns.countplot(x='Survived', hue= \"Pclass\", data=train_data)","184078b1":"# Check the age range\nprint(train_data[\"Age\"].min(), train_data[\"Age\"].max())","6c4e60fa":"# Make bins for ages\nbins = [0, 10, 20, 30, 40, 50, 60, 70, 80]\ntrain_data['AgeBin'] = pd.cut(train_data['Age'], bins)","c52d2a9f":"# Plot survived passengers by age\ntrain_data[train_data['Survived'] == 1 ]['AgeBin'].value_counts().sort_index().plot(kind='bar')","d82fecba":"# Plot passengers who did not survive by age\ntrain_data[train_data['Survived'] == 0 ]['AgeBin'].value_counts().sort_index().plot(kind='bar')","e248d7f4":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\ncolumns=['Sex', 'SibSp', 'Parch', 'Pclass' ]\nX = pd.get_dummies(train_data[columns])\nX_test = pd.get_dummies(test_data[columns])\n\nmodel = RandomForestClassifier(n_estimators=200, max_features=2, random_state=1)\nmodel.fit(X, y)\n\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n\n","031b0ccb":"We can see age is not an important factor for survival.","cca7d854":"We can see there are more passengers who did not survive","dbc54ffc":"We can see there are a lot of passengers in the lower class. We can also see that most of the passengers in upper class survived, while most of the passengers in lower class did not survive.","543941cb":"We can see there are mores male than females in the ship","3c32fabe":"There are missing entries in column fare in test data.","1f83a556":"There are missing entries in columns age, cabin and embarked in train data."}}