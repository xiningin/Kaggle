{"cell_type":{"fec11440":"code","416cccaa":"code","bb08dba2":"code","447bfd06":"code","9774c5fb":"code","08fb6919":"code","546a3fe7":"code","7415eb6b":"code","c783d61a":"code","726eb3a9":"code","bd8e586b":"code","38ecdca6":"code","4645fd35":"code","4e2172ee":"code","b3cf03c1":"code","d84f8ffa":"code","88ec3b03":"code","17476160":"code","57c6d114":"markdown","f4cc6437":"markdown","dcf32894":"markdown","f2dd4467":"markdown","182e1850":"markdown","f43105e3":"markdown","94b2165e":"markdown","b13a330a":"markdown","6f0e39aa":"markdown","7325cf3d":"markdown","d525777b":"markdown","9a5e2beb":"markdown","3fbdbc42":"markdown","a1ae67f9":"markdown","c626c00d":"markdown"},"source":{"fec11440":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom bs4 import BeautifulSoup\n\nfrom spacy.lang.en import English\nnlp = English()\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","416cccaa":"# Load Data\nprint(\"Loading data...\")\ntrain = pd.read_json(\"..\/input\/news-headlines-dataset-for-sarcasm-detection\/Sarcasm_Headlines_Dataset.json\", lines=True)\ntrain = train.drop(['article_link'], axis=1)\n\nprint(\"Train shape:\", train.shape)\ntrain.head()","bb08dba2":"# Check the first review\n\nprint('The first review is:\\n\\n',train[\"headline\"][0])","447bfd06":"# function to clean data\n\ndef cleanData(doc,stemming = False):\n    doc = doc.lower()\n    doc = nlp(doc)\n    tokens = [tokens.lower_ for tokens in doc]\n    tokens = [tokens for tokens in doc if (tokens.is_stop == False)]\n    tokens = [tokens for tokens in tokens if (tokens.is_punct == False)]\n    final_token = [token.lemma_ for token in tokens]\n    \n    return \" \".join(final_token)","9774c5fb":"clean_review = cleanData(train['headline'][0])\nclean_review","08fb6919":"# clean description\nprint(\"Cleaning train data...\\n\")\ntrain[\"headline\"] = train[\"headline\"].map(lambda x: cleanData(x))","546a3fe7":"sample_text = \"\"\"When Sebastian Thrun started working on self-driving cars at Google in 2007, few people outside of the company took him seriously. \u201cI can tell you very senior CEOs of major American car companies would shake my hand and turn away because I wasn\u2019t worth talking to,\u201d said Thrun, now the co-founder and CEO of online higher education startup Udacity, in an interview with Recode earlier this week.\n\nA little less than a decade later, dozens of self-driving startups have cropped up while automakers around the world clamor, wallet in hand, to secure their place in the fast-moving world of fully automated transportation.\"\"\"\ndoc = nlp(sample_text)","7415eb6b":"# print each token\nfor token in doc:\n    print(token.text)","c783d61a":"import spacy\nnlp = spacy.load('en_core_web_sm')\ndoc = nlp(sample_text)","726eb3a9":"for token in doc:\n    # Print the text and the predicted part-of-speech tag\n    print(token.text, token.pos_)","bd8e586b":"# Iterate over the predicted entities\nfor ent in doc.ents:\n    # Print the entity text and its label\n    print(ent.text, ent.label_)","38ecdca6":"# Get quick definitions of the most common tags and labels\n\nprint(spacy.explain('GPE'))\nprint(spacy.explain('ORG'))","4645fd35":"spacy.displacy.render(doc, style='ent', jupyter=True)","4e2172ee":"# Define a custom component\ndef custom_component(doc):\n    # Print the doc's length\n    print('Doc length:', len(doc))\n    # Return the doc object\n    return doc\n\n# Add the component first in the pipeline\nnlp.add_pipe(custom_component, first=True)\n\n# Print the pipeline component names\nprint('Pipeline:', nlp.pipe_names)","b3cf03c1":"# Process a text\ndoc = nlp(sample_text)","d84f8ffa":"nlp = spacy.load('en_core_web_lg')","88ec3b03":"doc1 = nlp(\"My name is shyam\")\ndoc2 = nlp(\"My name is Ram\")","17476160":"print(\"The documents similarity is:\" ,doc1.similarity(doc2))","57c6d114":"# Adding custom functions to pipelines","f4cc6437":"# Document similarity\n\nspaCy can compare two objects and predict similarity.  In order to use similarity, you need a larger spaCy model that has word vectors included.\n\nFor example, the medium or large English model \u2013 but not the small one. So if you want to use vectors, always go with a model that ends in \"md\" or \"lg\". ","dcf32894":"# Parts-of-Speech (POS) tagging\n\n> *Part-of-speech tagging (POS tagging)* is the task of tagging a word in a text with its part of speech. A part of speech is a category of words with similar grammatical properties. Common English parts of speech are noun, verb, adjective, adverb, pronoun, preposition, conjunction, etc.\n\nthe *\"en_core_web_sm\"* package is a small English model that supports all core capabilities and is trained on web text. The package provides the **binary weights** that enable spaCy to make predictions.","f2dd4467":"# Data Cleaning","182e1850":"\n\n![](https:\/\/i.pinimg.com\/originals\/40\/b1\/3d\/40b13d00e57b21a195217db15e03403e.png)\n\nThis kernel will introduce you to the basics of text processing with spaCy. If you are a beginner like me then for sure you will find this guide helpful. \n\nThe idea will be to learn basic preprocessing using spaCy which is an Industrial-Strength Natural Language Processing library and then level up based on the problems we are trying to solve. As this is my first kernel I hope I don't mess up a lot.\n\nYou can also take this course in detail by spaCy : [Advanced NLP with spaCy](https:\/\/course.spacy.io\/)","f43105e3":"This was a very basic guide to get started on NLP for beginners, we saw data cleaning for text data and how to use spaCy for different Natural Language Processing Tasks.\n\nReferences:\n\n[Advanced NLP with spaCy](https:\/\/course.spacy.io\/)\n\nKernels you can explore:\n\n[Hitchhiker's Guide to NLP in spaCy](https:\/\/www.kaggle.com\/nirant\/hitchhiker-s-guide-to-nlp-in-spacy\/)","94b2165e":"Let's create cleanData function. \nThis function will remove stopwords, punctuations, convert text to lowercase and preform lemmatization.\n\n**Stopwords**: Stop words are words that are particularly common in a text corpus and thus considered as rather un-informative.\n\n**Lemmatization**: Lemmatization refers to normally aiming to remove inflectional endings only and to return the base or dictionary form of a word, which is known as the lemma.\n\n","b13a330a":"We will use News Headlines dataset for Sarcasm Detection Dataset.\nYou can find the Dataset here : [News Headlines Dataset For Sarcasm Detection](https:\/\/www.kaggle.com\/rmisra\/news-headlines-dataset-for-sarcasm-detection)","6f0e39aa":"So, what is really happening here is that  we pass a string of text to the nlp object, and receive a Doc object.\n\n![](https:\/\/course.spacy.io\/pipeline.png)\n\nDuring processing, spaCy first tokenizes the text, i.e. segments it into words, punctuation and so on. After tokenization, spaCy can parse and tag a given Doc.\nThere are several preprocessing tasks which we will go through one by one.\nThe best thing about spaCy pipeline is that you can always **add custom functions** in this pipeline depending on your problem.\n\nSome of the basic functions are:\n\n* Tokenization\n* Part-of-speech (POS) Tagging\n* Named Entity Recognition (NER) etc.","7325cf3d":"# Tokenization\n\n> Tokenization is the process of converting a sequence of characters into a sequence of tokens.\n\n![](https:\/\/raw.githubusercontent.com\/theainerd\/MLInterview\/master\/images\/Screenshot%20from%202018-10-04%2014-14-08.png)\n\n","d525777b":"Can be added using the `nlp.add_pipe` method. You can also mention where you want to add the component using argumenets.\n\nLet's add a component of word counts to the pipeline.","9a5e2beb":"Now everytime you create a new nlp object it will always print the document length.","3fbdbc42":"Before we can apply machine learning algorithms we have to preprocess our text data. Here's how to clean your text data.\n\n- Remove all irrelevant characters such as any non alphanumeric characters\n- Tokenize your text by separating it into individual words\n- Remove words that are not relevant, such as \u201c@\u201d twitter mentions or urls(if any)\n- Convert all characters to lowercase(**Case folding**), in order to treat words such as \u201chello\u201d, \u201cHello\u201d, and \u201cHELLO\u201d the same. ******\n- Consider combining misspelled or alternately spelled words to a single representation (e.g. \u201ccool\u201d\/\u201dkewl\u201d\/\u201dcooool\u201d)\n- Consider lemmatization (reduce words such as \u201cam\u201d, \u201care\u201d, and \u201cis\u201d to a common form such as \u201cbe\u201d)\n- Consider removing stopwords (such as a, an, the, be)etc.\n\n**Note** : For tasks like speech recognition and information retrieval, everything is mapped to lower case. For sentiment analysis and other text classification tasks, information extraction, and machine translation, by contrast, case is quite helpful and case folding is generally not done (losing the difference, for example, between **US the country and us the pronoun** can outweigh the advantage in generality that case folding provides)","a1ae67f9":"# Basics of spaCy\n\n**spaCy** is a free, open-source library for advanced Natural Language Processing (NLP) in Python. \n\nspaCy is designed specifically for **production use** and helps you build applications that process and \u201cunderstand\u201d large volumes of text. It can be used to build information extraction or natural language understanding systems, or to **pre-process text for deep learning**.\n\nLet's get started","c626c00d":"# Named Entity Recognition (NER)\n\n> In the Named Entity Recognition (NER) task, systems are required to recognize the Named Entities occurring in the text. More specifically, the task is to find Person (PER), Organization (ORG), Location (LOC) and Geo-Political Entities (GPE). For instance, in the statement \u201dShyam lives in India\u201d, NER system extracts Shyam which refers to name of the person and India which refers to name of the country.\n\n"}}