{"cell_type":{"973b4f97":"code","bbed86cc":"code","0b528e88":"code","476742bb":"code","a254d147":"code","4b7d2180":"code","a5bf3131":"code","6391f65e":"code","37a10df1":"code","8b020e0f":"code","f888c768":"code","b14b3f5d":"code","11d4788b":"code","1e3727e2":"code","d412b474":"code","7f0c0f99":"code","8be00a62":"code","d1d32d9a":"code","902046e9":"code","0355b8ef":"code","2a8d763e":"code","1d16d432":"code","4ccb9160":"code","526c744a":"markdown","8d52ec87":"markdown","7c03d78a":"markdown","91d6b424":"markdown","bc7d280c":"markdown","84c5ae8d":"markdown","6a4df0c1":"markdown","25293fd9":"markdown","3f08baac":"markdown","3feafd35":"markdown"},"source":{"973b4f97":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bbed86cc":"columns=['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']\nhouse_df=pd.read_csv('\/kaggle\/input\/train-data\/housing_prices.csv',names=columns,header=None,delimiter=r\"\\s+\")\nhouse_df.head()","0b528e88":"#check the data type each column\nhouse_df.info()","476742bb":"#fint the missing value\nhouse_df.isnull().sum()","a254d147":"#finding the shape \nhouse_df.shape","4b7d2180":"house_df.describe()","a5bf3131":"for u ,v in house_df.items():\n    q1=v.quantile(0.25)\n    q2=v.quantile(0.75)\n    diff=q2-q1\n    lower_t=q1-(1.5*diff)\n    upper_t=q2-(1.5*diff)\n    v_col = v[(v < lower_t) | (v > upper_t)]\n    perc = np.shape(v_col)[0] *100.0 \/ np.shape(house_df)[0]\n    print(\"Column %s outliers = %.2f%%\" %(u,perc))\n    ","6391f65e":"import seaborn as sns\nimport matplotlib.pyplot  as plt\nimport matplotlib\nimport plotly.express as px\n%matplotlib inline\n","37a10df1":"fig,((ax1,ax2,ax3),(ax4,ax5,ax6))=plt.subplots(nrows=2,ncols=3,figsize=(20,15))\nsns.boxplot(y='CRIM',data=house_df,ax=ax1)\nsns.boxplot(y='ZN',data=house_df,ax=ax2)\nsns.boxplot(y='CHAS',data=house_df,ax=ax3)\nsns.boxplot(y='B',data=house_df,ax=ax4)\nsns.boxplot(y='RM',data=house_df,ax=ax5)\nsns.boxplot(y='MEDV',data=house_df,ax=ax6)","8b020e0f":"sns.displot(house_df['MEDV'],kde=True)","f888c768":"house_df=house_df[~(house_df['MEDV']>=50)]\n","b14b3f5d":"house_df.head()","11d4788b":"fig=px.scatter(house_df,x=\"RM\",y=\"MEDV\",trendline='ols',title='No of rooms vs House prices')\nfig.update_traces(marker_size=7)\nfig.show()","1e3727e2":"fig=px.scatter(house_df,x=\"AGE\",y=\"MEDV\",trendline='ols',color=\"CHAS\",title='No of rooms vs House prices')\nfig.update_traces(marker_size=7)\nfig.show()","d412b474":"fig=px.scatter(house_df,x=\"LSTAT\",y=\"MEDV\",trendline='ols',title='Lower status of the population vs House prices')\nfig.update_traces(marker_size=7)\nfig.show()","7f0c0f99":"plt.figure(figsize=(20,15))\nsns.heatmap(house_df.corr().abs(),annot=True, cmap=\"YlGnBu\")\nplt.title('Correlation Matrix')","8be00a62":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error\n","d1d32d9a":"#defineing our input and target variable\ninputs=house_df[['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT']]\ntarget=house_df['MEDV']\n","902046e9":"#lets split our data as train and test data\nx_train,x_test,y_train,y_test=train_test_split(inputs,target,test_size=0.2,random_state=5)","0355b8ef":"print(x_train.shape,x_test.shape,y_train.shape,y_test.shape)","2a8d763e":"#create and train model\nl_model=LinearRegression()\nl_model.fit(x_train,y_train)\n#generate predictions\nlin_test_pre=l_model.predict(x_test)\n#evalute the model\nprint(\"R2 Score:\",r2_score(y_test,lin_test_pre))\nprint(\"Mean Absolute Eror\",mean_absolute_error(y_test,lin_test_pre))\nprint(\"Man Suared Eror\",mean_squared_error(y_test,lin_test_pre))","1d16d432":"r_model= DecisionTreeRegressor()\nr_model.fit(x_train,y_train)\n#generate predictions\nr_test_pre=r_model.predict(x_test)\n#evalute the model\nprint(\"R2 Score\",r2_score(y_test,r_test_pre))\nprint(\"Mean Absolute Eror\",mean_absolute_error(y_test,r_test_pre))\nprint(\"Man Suared Eror\",mean_squared_error(y_test,r_test_pre))","4ccb9160":"f_model= RandomForestRegressor()\nf_model.fit(x_train,y_train)\n#generate predictions\nf_test_pre=f_model.predict(x_test)\n#evalute the model\nprint(\"R2 Score\",r2_score(y_test,f_test_pre))\nprint(\"Mean Absolute Eror\",mean_absolute_error(y_test,f_test_pre))\nprint(\"Man Suared Eror\",mean_squared_error(y_test,f_test_pre))","526c744a":"train model with decision tree Regression","8d52ec87":"traing a model","7c03d78a":"Let's remove maximum value of MEDV","91d6b424":"Let's load the data set","bc7d280c":"Lets examine the outliers of the data","84c5ae8d":"Finding statistical information for the house data","6a4df0c1":"Let's examine MEDV data","25293fd9":"let's try to predict price with Random forest regressor","3f08baac":"Let's visualize the data","3feafd35":"ploting correlation on data using heatmap matrix"}}