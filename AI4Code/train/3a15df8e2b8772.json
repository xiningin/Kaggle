{"cell_type":{"a5003909":"code","189ee899":"code","27b5ac16":"code","cc629bcd":"code","6b1f0b44":"code","d014085c":"code","8d7532c5":"code","53fa0106":"code","57d20b2d":"code","239edfb3":"code","58e04608":"code","d4cc2e0b":"code","dad59875":"code","c4319a0f":"code","de2b26fc":"code","c0a0fbc6":"code","177fe9b0":"code","71b4e5cc":"code","69188981":"code","451f5fd0":"code","96196126":"code","0d2509e6":"code","07451942":"code","a9e2fce7":"markdown","da717a75":"markdown"},"source":{"a5003909":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","189ee899":"import pandas as pd\nimport numpy as np\ndf = pd.read_csv('\/kaggle\/input\/dataset-for-svm\/Q2_data_set - Q2_data_set.csv')\ndf.shape","27b5ac16":"list(df)","cc629bcd":"df.head()","6b1f0b44":"df.shape[1]","d014085c":"df.COMPANY_CLASS.unique()","8d7532c5":"df.COMPANY_STATUS.unique()","53fa0106":"df.COMPANY_CATEGORY.unique()","57d20b2d":"df.AUTHORIZED_CAPITAL.unique()","239edfb3":"df.REGISTRAR_OF_COMPANIES.unique()","58e04608":"df.PRINCIPAL_BUSINESS_ACTIVITY.unique()","d4cc2e0b":"df.SUB_CATEGORY.unique()","dad59875":"df.DATE_OF_REGISTRATION.unique()","c4319a0f":"from sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import LabelEncoder\ny=df['PAIDUP_CAPITAL'].astype(str)\n##df['COMPANY_STATUS']=LabelBinarizer().fit_transform(df.COMPANY_STATUS)\n#df['COMPANY_CLASS']=LabelBinarizer().fit_transform(df.COMPANY_CLASS)\n#df['COMPANY_CATEGORY']=LabelBinarizer().fit_transform(df.COMPANY_CATEGORY)\n#df['AUTHORIZED_CAPITAL']=LabelBinarizer().fit_transform(df.AUTHORIZED_CAPITAL)\n#df['REGISTRAR_OF_COMPANIES']=LabelBinarizer().fit_transform(df.REGISTRAR_OF_COMPANIES)\n##f=LabelBinarizer().fit_transform(df.PRINCIPAL_BUSINESS_ACTIVITY)","de2b26fc":"features=['COMPANY_STATUS','COMPANY_CLASS','COMPANY_CATEGORY','AUTHORIZED_CAPITAL','REGISTRAR_OF_COMPANIES']\nx=df[features].astype(str)","c0a0fbc6":"# ordinal encode input variables\nordinal_encoder = OrdinalEncoder()\nx = ordinal_encoder.fit_transform(x)\n# ordinal encode target variable\nlabel_encoder = LabelEncoder()\ny = label_encoder.fit_transform(y)","177fe9b0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)","71b4e5cc":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators=4000, random_state=0)\nregressor.fit(X_train, y_train)\ny_pred = regressor.predict(X_test)","69188981":"from sklearn import metrics\n#Evaluating the algorithm\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","451f5fd0":"from sklearn.preprocessing import StandardScaler    \nst_x= StandardScaler()    \nx_train= st_x.fit_transform(x_train)    \nx_test= st_x.transform(x_test)","96196126":"from sklearn.linear_model import LogisticRegression  \nclassifier= LogisticRegression(random_state=47)  \nclassifier.fit(x_train, y_train)","0d2509e6":"y_pred= classifier.predict(x_test) ","07451942":"from sklearn.metrics import accuracy_score \nprint (\"Accuracy : \", accuracy_score(y_test, y_pred)) ","a9e2fce7":"# **using logistic reression **","da717a75":"# logistic regression"}}