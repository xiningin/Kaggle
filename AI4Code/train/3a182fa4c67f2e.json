{"cell_type":{"e0e94a4c":"code","9e90abb7":"code","dad7e4fd":"code","2e4cc3e4":"code","42f911d5":"code","91fe18dc":"code","1b311053":"code","1ce59a26":"code","c65d8230":"code","28a9e27d":"code","fef97c08":"code","c8bb68d4":"code","135f6bc2":"code","0935f651":"code","5f96039d":"code","e8db474a":"code","a38e9f8e":"code","b7419ca3":"code","664c2ac9":"code","9d2e2637":"code","7c2fdc7e":"markdown","d38a116e":"markdown","e406a05a":"markdown","9eb31eb6":"markdown","849eb396":"markdown","48b618b9":"markdown","0837b19f":"markdown","92035f57":"markdown","f4dfa2f0":"markdown"},"source":{"e0e94a4c":"from __future__ import (\n    absolute_import,\n    division,\n    print_function,\n    unicode_literals\n)\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom IPython.display import clear_output\nfrom six.moves import urllib","9e90abb7":"import tensorflow.compat.v2.feature_column as fc\nimport tensorflow as tf","dad7e4fd":"dftrain = pd.read_csv(\"\/kaggle\/input\/train.csv\")\ndfeval = pd.read_csv(\"\/kaggle\/input\/eval.csv\")","2e4cc3e4":"dftrain.head()","42f911d5":"dftrain.shape","91fe18dc":"y_train = dftrain.pop(\"survived\")\ny_eval = dfeval.pop(\"survived\")\n\ny_train.head()","1b311053":"dftrain.age.hist(bins = 20)","1ce59a26":"dftrain.sex.value_counts().plot(kind = \"barh\")","c65d8230":"dftrain[\"class\"].value_counts().plot(kind = \"barh\")","28a9e27d":"survival_distribution = pd.concat([dftrain, y_train], axis=1).groupby(\"sex\").survived.mean() * 100\nsurvival_distribution.plot(kind = \"barh\").set_xlabel(\"% survived\")","fef97c08":"dftrain.dtypes","c8bb68d4":"CATEGORICAL_COLUMNS = [\"sex\", \"n_siblings_spouses\", \"parch\", \"class\", \"deck\", \"embark_town\", \"alone\"]\nNUMERIC_COLUMNS = [\"age\", \"fare\"]\n\nfeature_columns = []\n\nfor feature in CATEGORICAL_COLUMNS:\n    vocabulary = dftrain[feature].unique()\n    feature_columns.append(tf.feature_column.categorical_column_with_vocabulary_list(feature, vocabulary))\n    \nfor feature in NUMERIC_COLUMNS:\n    feature_columns.append(tf.feature_column.numeric_column(feature, dtype = tf.float64))\n    \nfeature_columns","135f6bc2":"def make_input_fn(data_df, label_df, num_epochs=10, shuffle=True, batch_size=32):\n    def input_fn():\n        ds = tf.data.Dataset.from_tensor_slices((dict(data_df), label_df))\n        if shuffle:\n            ds = ds.shuffle(1000)\n        ds = ds.batch(batch_size).repeat(num_epochs)\n        return ds\n    return input_fn","0935f651":"train_input_fn = make_input_fn(dftrain, y_train)\neval_input_fn = make_input_fn(dfeval, y_eval, num_epochs=1, shuffle=False)","5f96039d":"linear_est = tf.estimator.LinearClassifier(feature_columns=feature_columns)","e8db474a":"linear_est.train(train_input_fn)","a38e9f8e":"result = linear_est.evaluate(eval_input_fn)\nresult","b7419ca3":"predictions = list(linear_est.predict(eval_input_fn))\nsurvival_probabilities = pd.Series([pred[\"probabilities\"][1] for pred in predictions])","664c2ac9":"for i in range(len(dfeval.head())):\n    print(dfeval.loc[i])\n    print(\"survived: {}\".format(\"yes\" if (y_eval.loc[i] == 1) else \"no\"))\n    print(f\"predicted survival probability: {survival_probabilities[i]}\")","9d2e2637":"survival_probabilities.plot(kind=\"hist\", bins=20, title=\"Survival Probabilities\")","7c2fdc7e":"## Evaluating the Model","d38a116e":"## Import Dependencies","e406a05a":"## Creating the Linear Classifier Model","9eb31eb6":"## Generate Feature Columns for Tensorflow","849eb396":"## Data","48b618b9":"## Training the Model","0837b19f":"# Linear Regression Algorithm","92035f57":"## Input Function Generator for Generating `tf.data.Dataset`","f4dfa2f0":"## Using Model to Make Predictions"}}