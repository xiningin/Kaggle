{"cell_type":{"2aff0de5":"code","012b9b96":"code","2c66d949":"code","9e5a01da":"code","447440bd":"code","ac060d61":"code","43c0e548":"code","20cca577":"code","4d554412":"code","9372b374":"code","7fb4aeca":"code","bee8e109":"code","84364b7a":"code","0ac61969":"code","715cad41":"code","49c5d803":"code","214ed6d3":"code","55a5de58":"code","ee44ded4":"code","1db8624c":"code","d2bb31ce":"code","8f869b4b":"code","8f3675d7":"markdown"},"source":{"2aff0de5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","012b9b96":"import tensorflow as tf\nimport os","2c66d949":"import os\ndata_path = \"\/kaggle\/input\/quickdraw-doodle-recognition\/\" \nprint(os.listdir(data_path))","9e5a01da":"import pandas as pd\nsub_df = pd.read_csv(data_path+'sample_submission.csv')\nprint(\"test data \uc218:\",len(sub_df))\nsub_df.head()","447440bd":"train_file_path = \"\/kaggle\/input\/quickdraw-doodle-recognition\/train_raw\/\"","ac060d61":"train_csvs= os.listdir(train_file_path)\nprint(\"train_raw \ud3f4\ub354 \ub0b4 \ud30c\uc77c \uc218:\", len(train_csvs))\nprint(train_csvs[:5])\n\nfile_size = 0\nlabel_names = []\n\nfor csv_file in train_csvs:\n    file_size += os.path.getsize(train_file_path + csv_file) # data file\ub4e4\uc758 \uc6a9\ub7c9\uc744 \uacc4\uc0b0\n    label_names.append(csv_file.replace('.csv','')) \nprint(\"\ud30c\uc77c \ud06c\uae30 : \", file_size\/\/(1024*1024*1024) ,\"GB\")\n\nlabel_names = sorted(label_names,key=lambda x : str.lower(x+'.csv')) # at kaggle notebook ","43c0e548":"hold_out_set= 'train_k99'","20cca577":"import numpy as np\nimport json    ","4d554412":"def preds2catids(predictions): # submission\uc744 \uc704\ud574 top3 category\ub85c \ubcc0\ud658\ud560 \ud568\uc218\n    return pd.DataFrame(np.argsort(-predictions, axis=1)[:, :3], columns=['a', 'b', 'c'])\n","9372b374":"def map_at3(y_true, y_pred): \n    map3 = tf.keras.metrics.top_k_categorical_accuracy(y_true, y_pred, k=1)*0.5\n    map3 += tf.keras.metrics.top_k_categorical_accuracy(y_true, y_pred, k=2)*0.17\n    map3 += tf.keras.metrics.top_k_categorical_accuracy(y_true, y_pred, k=3)*0.33    \n    return map3","7fb4aeca":"ext_data_path = '\/kaggle\/input\/doodle-model\/'","bee8e109":"import pandas as pd\nimport numpy as np\n\noutputs = os.listdir(ext_data_path)\nhold_out_probs = [ext_data_path+ f for f in outputs if f.find('ho_prob') >= 0 ] \ntest_out_probs = [ext_data_path+ f for f in outputs if f.find('test_prob') >= 0 ] \nhold_out_probs = sorted(hold_out_probs)\ntest_out_probs = sorted(test_out_probs)\nho_df = pd.read_csv(ext_data_path+hold_out_set)\nho_s = []\nfor prob_path in hold_out_probs:\n    ho = np.load(prob_path)\n    ho = ho[:len(ho_df)]\n    ho_s.append(ho)\ntargets = ho_df.y.to_numpy() # hold out target","84364b7a":"ho_arr = np.stack(ho_s,axis=-1)\nho_arr.shape","0ac61969":"del(ho_s)\nimport gc\ngc.collect()","715cad41":"xin = tf.keras.layers.Input((len(label_names),ho_arr.shape[2]))\nx = tf.keras.layers.Convolution1D(1,kernel_size=1,activation='linear',use_bias=False)(xin)\nx = tf.keras.layers.Reshape(target_shape=(len(label_names),))(x)\nwensemble_model = tf.keras.Model(inputs=xin, outputs=x)\nwensemble_model.summary()","49c5d803":"check_point=tf.keras.callbacks.ModelCheckpoint(monitor='map_at3',verbose=1\n                               ,filepath='ensemble_w.h5',save_best_only=True,mode='max') \nwensemble_model.compile(optimizer=tf.keras.optimizers.Adam(1),loss='mse', metrics=[ map_at3])\nwensemble_model.fit(x=ho_arr,y=tf.keras.utils.to_categorical(targets)\n                    , epochs=20, batch_size=10000,verbose=1, callbacks=[check_point])","214ed6d3":"wensemble_model.load_weights('ensemble_w.h5')\nwensemble_model.get_weights()","55a5de58":"del(ho_arr)\ngc.collect()","ee44ded4":"res = np.array(wensemble_model.get_weights()).squeeze()","1db8624c":"ens_prob = np.zeros((len(sub_df),len(label_names)))\nfor i, prob_path in enumerate(test_out_probs):\n    ens_prob += (np.load(prob_path) * res[i])","d2bb31ce":"from collections import Counter,OrderedDict\nfrom operator import itemgetter \n\ndef balancing_predictions(test_prob, factor = 0.1, minfactor = 0.001, patient = 5, permit_cnt=332, max_search=10000, label_num=340):\n    maxk = float('inf')\n    s_cnt = np.zeros(label_num)\n    for i in range(max_search):\n        ctop1 = Counter(np.argmax(test_prob,axis=1))\n        ctop1 = sorted(ctop1.items(), key=itemgetter(1), reverse=True)\n        if maxk > ctop1[0][1]:\n            maxk = ctop1[0][1]\n        else:\n            s_cnt[ctop1[0][0]]+=1\n            if np.max(s_cnt)>patient:\n                if factor< minfactor:\n                    print('stop min factor')\n                    break\n                s_cnt=np.zeros(label_num)\n                factor*=0.99\n                print('reduce factor: ', factor, ', current max category num: ', ctop1[0][1])\n\n        if ctop1[0][1] <= permit_cnt:\n            print('idx: ',ctop1[0][0] ,', num: ', ctop1[0][1]) \n            break\n        test_prob[:,ctop1[0][0]] *= (1.0-factor)\n        \n    return test_prob","8f869b4b":"bal_test_prob = balancing_predictions(ens_prob)\nbal_top3 = preds2catids(bal_test_prob)\nid2cat = {k: cat.replace(' ', '_') for k, cat in enumerate(label_names)}\nbal_top3cats = bal_top3.replace(id2cat) \nsub_df['word'] = bal_top3cats['a'] + ' ' + bal_top3cats['b'] + ' ' + bal_top3cats['c']\nbal_submission = sub_df[['key_id', 'word']]\nbal_submission.to_csv('submission_bal_ens.csv', index=False)","8f3675d7":"Train Code : https:\/\/www.kaggle.com\/ttagu99\/train-model"}}