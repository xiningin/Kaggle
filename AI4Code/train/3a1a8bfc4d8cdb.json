{"cell_type":{"414b72ec":"code","c2d08b3f":"code","3f50b486":"code","ba1cb214":"code","ff7fe3d2":"code","e0a1d9b5":"code","ec6dee4d":"code","4b20f595":"code","c09e4e97":"code","83c20a23":"code","b7fac01c":"code","306802ae":"code","9815a50f":"code","2c1bb083":"code","e0e37dfb":"code","a8360005":"code","672b3bcd":"code","a58d06e1":"code","0d2484ce":"code","edaffe42":"code","1a457b6e":"code","d6790d3a":"code","37343d24":"code","b62c0e99":"code","9ff9e3d1":"code","853f5df7":"markdown","9b0e4094":"markdown","b0f9a105":"markdown","d9487f95":"markdown","6714b612":"markdown","8048b794":"markdown","3d159540":"markdown","51369bce":"markdown","0a0b0404":"markdown","de7453d8":"markdown","ec2223d8":"markdown","c5a4586a":"markdown","aa885cf5":"markdown","363a3681":"markdown","0e08a98f":"markdown","221ff1b1":"markdown","de393552":"markdown","66fc5044":"markdown"},"source":{"414b72ec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","c2d08b3f":"df=pd.read_csv('..\/input\/heart.csv')","3f50b486":"df.head()","ba1cb214":"df.info()","ff7fe3d2":"df.shape[0]","e0a1d9b5":"df.shape[1]","ec6dee4d":"Null=df.isnull()\nNull.sum()","4b20f595":"df.describe()","c09e4e97":"import matplotlib.pyplot as plt\nimport seaborn as sns\nmale =len(df[df['sex'] == 1])\nfemale = len(df[df['sex']== 0])\ntotal=len(df.sex)\ntotal_male_percent=(male\/total)*100\ntotal_female_percent=(female\/total)*100\n\n#plot\nlabels = ['male', 'female']\nvalues = [total_male_percent, total_female_percent]\n\nplt.figure(figsize=(8,6))\nplt.title('Sex Percentage')\nplt.xlabel('sex')\nplt.ylabel('percentage')\nplt.bar(labels, values,color=('r','b'))\nplt.show()","83c20a23":"plt.figure(figsize=(8,6))\n\n# Data to plot\nlabels = 'Chest Pain Type:0','Chest Pain Type:1','Chest Pain Type:2','Chest Pain Type:3'\nvalues = [len(df[df['cp'] == 0]),len(df[df['cp'] == 1]),\n         len(df[df['cp'] == 2]),\n         len(df[df['cp'] == 3])]\ncolors = ['blue', 'green','orange','red']\n \n# Plot\nplt.title('Chest pain')\nplt.xlabel('Types')\nplt.ylabel('values')\n\nplt.bar(labels,values, color=colors) \nplt.show()","b7fac01c":"plt.figure(figsize=(8,6))\n\n# Data to plot\nlabels = 'fasting blood sugar < 120 mg\/dl','fasting blood sugar > 120 mg\/dl'\nsizes = [len(df[df['fbs'] == 0]),len(df[df['cp'] == 1])]\ncolors = ['skyblue', 'yellowgreen','orange','gold']\nexplode = (0.1, 0)  # explode 1st slice\n \n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=180)\n \nplt.axis('equal')\nplt.show()","306802ae":"plt.figure(figsize=(8,6))\n\n# Data to plot\nlabels = 'No','Yes'\nsizes = [len(df[df['exang'] == 0]),len(df[df['exang'] == 1])]\ncolors = ['skyblue', 'yellowgreen']\nexplode = (0.1, 0)  # explode 1st slice\n \n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\nautopct='%1.1f%%', shadow=True, startangle=90)\n \nplt.axis('equal')\nplt.show()","9815a50f":"plt.figure(figsize=(15,6))\nsns.countplot(x='age',data = df, hue = 'target',palette='GnBu')\nplt.show()","2c1bb083":"plt.figure(figsize=(8,6))\nsns.scatterplot(x='trestbps',y='thalach',data=df,hue='target')\nplt.show()","e0e37dfb":"print(df.dtypes)","a8360005":"X= df.drop('target',axis=1)\ny=df['target']","672b3bcd":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=.3,random_state=42)","a58d06e1":"from sklearn.preprocessing import MinMaxScaler","0d2484ce":"scaler = MinMaxScaler()\n\nX_train_scaled = scaler.fit_transform(X_train)\nX_train = pd.DataFrame(X_train_scaled)\n\nX_test_scaled = scaler.fit_transform(X_test)\nX_test = pd.DataFrame(X_test_scaled)","edaffe42":"from xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\ndpen = []\nfor i in range(5,11):\n    model = XGBClassifier(max_depth = i)\n    model.fit(X_train,y_train)\n    target = model.predict(X_test)\n    dpen.append(accuracy_score(y_test, target))\n    print(\"accuracy : \",dpen[i-5])\nprint(\"Best accuracy: \",max(dpen))","1a457b6e":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 7)  # n_neighbors means k\nknn.fit(X_train, y_train)\nprediction = knn.predict(X_test)\n\nprint(\"{} NN Score: {:.2f}%\".format(7, knn.score(X_test, y_test)*100))","d6790d3a":"# try ro find best k value\nscoreList = []\nfor i in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors = i)  # n_neighbors means k\n    knn2.fit(X_train, y_train)\n    scoreList.append(knn2.score(X_test, y_test))\n    \nplt.plot(range(1,20), scoreList)\nplt.xticks(np.arange(1,20,1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()\n\n\nprint(\"Maximum KNN Score is {:.2f}%\".format((max(scoreList))*100))","37343d24":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 1000, random_state = 1)\nrf.fit(X_train, y_train)\nprint(\"Random Forest Algorithm Accuracy Score : {:.2f}%\".format(rf.score(X_test,y_test)*100))","b62c0e99":"from sklearn.svm import SVC\nsvm = SVC(random_state = 1)\nsvm.fit(X_train, y_train)\nprint(\"Test Accuracy of SVM Algorithm: {:.2f}%\".format(svm.score(X_test,y_test)*100))","9ff9e3d1":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(X_train, y_train)\nprint(\"Accuracy of Naive Bayes: {:.2f}%\".format(nb.score(X_test,y_test)*100))","853f5df7":"**3. fbs: (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)**","9b0e4094":"**SVM**","b0f9a105":"** Number of people who have heart disease according to age **","d9487f95":"**No. of columns**","6714b612":"**Scatterplot for thalach vs. trestbps **","8048b794":"**4.exang: exercise induced angina (1 = yes; 0 = no)**","3d159540":"**What is the mean,std of the dataset**\n\nThe features described in the below data set are:\n\n1. Count tells us the number of NoN-empty rows in a feature.\n\n2. Mean tells us the mean value of that feature.\n\n3. Std tells us the Standard Deviation Value of that feature.\n\n4. Min tells us the minimum value of that feature.\n\n5. 25%, 50%, and 75% are the percentile\/quartile of each features.\n\n6. Max tells us the maximum value of that feature.\n\n","51369bce":"**Making Predictions**\n\n\n**Splitting the dataset into training and test set**","0a0b0404":"**KNN Algorithm **","de7453d8":"**Checking null value**","ec2223d8":"**naive Bayes**","c5a4586a":"**Chest pain**","aa885cf5":"**Checking features of various attributes**","363a3681":"**Xgboost**","0e08a98f":"There is *no* null value in the dataset","221ff1b1":"**No. of Rows**","de393552":"**The dataset contains the following features:**\n1. age(in years)\n2. sex: (1 = male; 0 = female)\n3. cp: chest pain type\n4. trestbps: resting blood pressure (in mm Hg on admission to the hospital)\n5. chol: serum cholestoral in mg\/dl\n6. fbs: (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n7. restecg: resting electrocardiographic results\n8. thalach: maximum heart rate achieved\n9. exang: exercise induced angina (1 = yes; 0 = no)\n10. oldpeak: ST depression induced by exercise relative to rest\n11. slope: the slope of the peak exercise ST segment\n12. ca: number of major vessels (0-3) colored by flourosopy\n13. thal: 3 = normal; 6 = fixed defect; 7 = reversable defect\n14. target: 1 or 0 ","66fc5044":"**Random Forest**"}}