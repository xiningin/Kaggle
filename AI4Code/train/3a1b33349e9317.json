{"cell_type":{"8deb3328":"code","4b3cc971":"code","bf460dff":"code","5d1d5996":"code","28a96a77":"code","c41c26ba":"code","2001413d":"code","067fa672":"code","8f9b5939":"code","6e8fb86e":"code","9e7d8b49":"code","7e23b951":"code","8d024ef4":"code","21f82c0e":"code","2a218fef":"code","b2b6e9af":"code","6b35d51c":"code","f29f6eb4":"code","bccadf67":"code","ba0bdf80":"code","cd15cfda":"code","b0f6ce08":"code","af529ce0":"code","22a77182":"code","4518bb19":"code","92b7388b":"code","6d51241d":"code","5e12b212":"code","bf02ac18":"markdown","39212751":"markdown","b129a4be":"markdown","32a5879a":"markdown"},"source":{"8deb3328":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b3cc971":"import os\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom transformers import BertTokenizer, TFBertModel, TFAutoModel,AutoTokenizer","bf460dff":"try:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nexcept ValueError:\n    strategy = tf.distribute.get_strategy() # for CPU and single GPU\n    print('Number of replicas:', strategy.num_replicas_in_sync)","5d1d5996":"train = pd.read_csv('\/kaggle\/input\/contradictory-my-dear-watson\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/contradictory-my-dear-watson\/test.csv')","28a96a77":"train.head()","c41c26ba":"test.head()","2001413d":"train=train.drop('lang_abv',axis=1)\ntest=test.drop('lang_abv',axis=1)\ntrain.head(5)","067fa672":"sns.countplot(x='language', data=train)","8f9b5939":"sns.countplot(x='label', data=train)","6e8fb86e":"plt.figure(figsize=(12,12))\n\n\ntrain.groupby('language').size().plot(kind='pie', autopct='%1.1f%%')","9e7d8b49":"model_name ='joeddav\/xlm-roberta-large-xnli'\ntokenizer = AutoTokenizer.from_pretrained(model_name)","7e23b951":"def encode_premise_sentence(s):\n    tokens = []\n    tokens.append('[CLS]')\n    tokens+=list(tokenizer.tokenize(s))\n    return tokenizer.convert_tokens_to_ids(tokens)","8d024ef4":"def encode_hypothesis_sentence(s):\n    tokens = []\n    tokens.append('[SEP]')\n    tokens+=list(tokenizer.tokenize(s))\n    tokens.append('[SEP]')\n    return tokenizer.convert_tokens_to_ids(tokens)","21f82c0e":"tokenized=[]\nfor each in range(len(train)):\n    pre=encode_premise_sentence(train['premise'][each])\n    hyp=encode_hypothesis_sentence(train['hypothesis'][each])\n    tokenized.append(pre+hyp)\ntrain['tokenized'] = tokenized\ntrain.head(5)","2a218fef":"mask=[]\nfor each in range(len(train)):\n    padded_sequences = tokenizer(train['premise'][each],train['hypothesis'][each], padding=True,add_special_tokens = True)\n    mask.append(padded_sequences)\ntrain['masked'] = mask\ntrain.head(5)","b2b6e9af":"tokenized=[]\nfor each in range(len(test)):\n    pre=encode_premise_sentence(test['premise'][each])\n    hyp=encode_hypothesis_sentence(test['hypothesis'][each])\n    tokenized.append(pre+hyp)\ntest['tokenized'] = tokenized\ntest.head(5)","6b35d51c":"mask=[]\nfor each in range(len(test)):\n    padded_sequences = tokenizer(test['premise'][each],train['hypothesis'][each], padding=True,add_special_tokens = True)\n    mask.append(padded_sequences)\ntest['masked'] = mask\ntest.head(5)","f29f6eb4":"train['masked'][0]","bccadf67":"test['masked'][0]","ba0bdf80":"max_len=237 \n\ndef build_model():\n    bert_encoder = TFAutoModel.from_pretrained('joeddav\/xlm-roberta-large-xnli')\n    input_word_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    input_mask = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_mask\")\n    #input_type_ids = tf.keras.Input(shape=(max_len,), dtype=tf.int32, name=\"input_type_ids\")\n    \n    embedding = bert_encoder([input_word_ids, input_mask])[0]\n    output = tf.keras.layers.Dense(3, activation='softmax')(embedding[:,0,:])\n    \n    model = tf.keras.Model(inputs=[input_word_ids, input_mask], outputs=output)\n    model.compile(tf.keras.optimizers.Adam(lr=1e-5), loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n    \n    return model","cd15cfda":"def input_convert(data):\n    inputs   = {\n            'input_word_ids' :[],\n            'input_mask'     :[]  }\n    for each in data:\n        inputs['input_word_ids'].append(each['input_ids'])\n        inputs['input_mask'].append(each['attention_mask'])\n        #inputs['input_type_ids'].append(each['token_type_ids'])\n    \n    inputs['input_word_ids']= tf.ragged.constant( inputs['input_word_ids']).to_tensor()\n    inputs['input_mask']= tf.ragged.constant( inputs['input_mask']).to_tensor()\n    #inputs['input_type_ids']= tf.ragged.constant( inputs['input_type_ids']).to_tensor()\n    \n    return inputs","b0f6ce08":"train_input= input_convert(train['masked'].values)\nfor key in train_input.keys():\n    train_input[key] = train_input[key][:,:max_len]","af529ce0":"test_input= input_convert(test['masked'].values)\nfor key in test_input.keys():\n    test_input[key] = test_input[key][:,:max_len]","22a77182":"test.head()","4518bb19":"early_stop = tf.keras.callbacks.EarlyStopping(patience=3,restore_best_weights=True)\nwith strategy.scope():\n    model = build_model()\n    model.summary()\n    model.fit(train_input, train['label'].values, epochs = 5, verbose = 1, batch_size = 128, validation_split = 0.1 ,callbacks=[early_stop])","92b7388b":"predictions = [np.argmax(i) for i in model.predict(test_input)]","6d51241d":"submission = test['id'].copy().to_frame()\nsubmission['prediction'] = predictions\nsubmission.to_csv(\"submission.csv\", index = False)  #save file\nprint(\"Submission complete\")","5e12b212":"submission.head()  # check submission","bf02ac18":"## Drop lang_abv","39212751":"## Download the libraries","b129a4be":"##  tokenizer: to splitting up a larger body of text into smaller lines, words or even creating words for a non-English language. ","32a5879a":"## let's mask the test dataset"}}