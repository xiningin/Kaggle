{"cell_type":{"ce13be3f":"code","43137838":"code","7dc3ae42":"code","4aff8fb7":"code","0c3c8551":"code","483812a6":"code","88364367":"code","ebe7f5a0":"code","cc8c6905":"code","0c7498fe":"code","44788528":"code","42724197":"code","ee331360":"code","3b5b3d93":"code","643921a6":"code","394938ca":"code","624dac4d":"code","0fc7f77c":"markdown","2e124a01":"markdown","2044ffe9":"markdown","592aaf86":"markdown","252c2b9f":"markdown","8b2b3836":"markdown","0aca9c7c":"markdown"},"source":{"ce13be3f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","43137838":"my_path1=\"..\/input\/covid19-in-india\/covid_19_india.csv\"\nmy_path2=\"..\/input\/covid19-in-india\/AgeGroupDetails.csv\"\nmy_path3=\"..\/input\/covid19-in-india\/IndividualDetails.csv\"\nmy_data1=pd.read_csv(my_path1)\nmy_data2=pd.read_csv(my_path2)\nindividual_details=pd.read_csv(my_path3)\n","7dc3ae42":"my_data2","4aff8fb7":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.figure(figsize=(10,6))\nsns.barplot(x=my_data2['AgeGroup'],y=my_data2['TotalCases'])\nplt.show()","0c3c8551":"my_data1.tail()","483812a6":"#Number of missing data\nmy_data1.isna().sum()","88364367":"my_data1['ActiveCases']=my_data1['Confirmed']-my_data1['Deaths']-my_data1['Cured']","ebe7f5a0":"from datetime import date\nmy_data1['Date'] = pd.to_datetime(my_data1['Date'])\n\n\n#Temporary dataset for maximum date\n#temp=my_data1.groupby('Date')['Confirmed','Deaths','Cured','ActiveCases'].sum().reset_index()\n#temp=temp[temp['Date']==max(temp['Date'])].reset_index(drop=True)\n#temp['Global Moratality'] = temp['Deaths']\/temp['Confirmed']\n#temp['Deaths per 100 Confirmed Cases'] = temp['Global Moratality']*100\n#temp.head(20)","cc8c6905":"#import matplotlib.pyplot as plotter\n\n#pieLabels = 'Deaths', 'Cured', 'ActiveCases'\n#pieShare = [temp['Deaths'], temp['Cured'], temp['ActiveCases']]\n#figureObject, axesObject = plotter.subplots()\n#colors = ['yellowgreen', 'lightskyblue', 'lightcoral']\n\n\n#Draw the pie chart-\n\n#axesObject.pie(pieShare, labels=pieLabels, autopct='%1.2f', startangle=90,colors=colors)\n\n#draw a circle at the center of pie to make it look like a donut\n#(centre_circle = plt.Circle((0,0),0.50,color='black', fc='white',linewidth=1.25)\n#fig = plt.gcf()\n#fig.gca().add_artist(centre_circle)\n\n#Aspect Ratio-i.e. pie chart is a circle\n#axesObject.axis('equal')\n#plotter.show()","0c7498fe":"state_datewise=my_data1.groupby('State\/UnionTerritory')['Confirmed','ActiveCases','Deaths','Cured'].max()\nstate_datewise['ActiveCases']=state_datewise['Confirmed']-state_datewise['Deaths']-state_datewise['Cured']\n\nstate_datewise=state_datewise.reset_index().drop([14,24,32],axis=0)\nstate_datewise.reset_index()","44788528":"statewise_cases=state_datewise.sort_values(by='Confirmed', ascending=False).reset_index()\nstatewise_cases=statewise_cases[['State\/UnionTerritory','Confirmed','Deaths','Cured','ActiveCases']]\nstatewise_cases.style.background_gradient(cmap='Blues',subset=['Confirmed','ActiveCases'])\\\n                     .background_gradient(cmap='Reds',subset=['Deaths'])\\\n                     .background_gradient(cmap='Greens',subset=['Cured'])\n","42724197":"import plotly.graph_objects as go\n\nfig = go.Figure(data=[\n    go.Bar(name='Active Cases', x=statewise_cases['State\/UnionTerritory'], y=statewise_cases['Confirmed']),\n    go.Bar(name='Deaths', x=statewise_cases['State\/UnionTerritory'], y=statewise_cases['Deaths']),\n    go.Bar(name='Recovered', x=statewise_cases['State\/UnionTerritory'], y=statewise_cases['Cured'])\n])\n# Change the bar mode\nfig.update_layout(barmode='group',height=700)\nfig.update_yaxes(nticks=20,ticks=\"outside\", tickwidth=2, tickcolor='crimson', ticklen=10)\nfig.show()\n","ee331360":"India_confirmed=statewise_cases['Confirmed'].sum()\nIndia_deaths=statewise_cases['Deaths'].sum()\nIndia_cured=statewise_cases['Cured'].sum()\nx=[India_confirmed,India_deaths,India_cured]\nplt.figure(figsize=(8,8))\nplt.title(\"Covid-19 Cases in India\")\nsns.barplot(x=['Total Cases','Deaths','Cured'],y=x)\nsns.set_style(\"dark\")\nplt.show()","3b5b3d93":"temp1=statewise_cases[statewise_cases['Deaths']>0][['State\/UnionTerritory','Deaths','Confirmed']]\ntemp1.sort_values(by='Deaths',ascending=False)\ntemp1['DeathsPer100']=(temp1['Deaths']\/temp1['Confirmed'])*100\ntemp1[['State\/UnionTerritory','Deaths','DeathsPer100']].style.background_gradient(cmap='Reds')\n","643921a6":"individual_details\nindividual_details.isna().sum()\ndummy=pd.get_dummies(individual_details['gender'])\npd.concat([individual_details,dummy],axis=1)\nindividual_details=individual_details.merge(dummy,left_index=True,right_index=True)\nindividual_details","394938ca":"female=individual_details['F'].sum()\nmale=individual_details['M'].sum()\ntotal=female+male\nfemale_percent=(female\/total)*100\nmale_percent=(male\/total)*100\n\n","624dac4d":"import matplotlib.pyplot as plotter\n\npieLabels = 'Male', 'Female'\npieShare = [male, female]\nfigureObject, axesObject = plotter.subplots()\ncolors = ['yellowgreen', 'lightskyblue']\n\n\n#Draw the pie chart-\n\naxesObject.pie(pieShare, labels=pieLabels, autopct='%1.2f', startangle=90,colors=colors)\n\n#draw a circle at the center of pie to make it look like a donut\ncentre_circle = plt.Circle((0,0),0.50,color='black', fc='white',linewidth=1.25)\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)\n\n#Aspect Ratio-i.e. pie chart is a circle\naxesObject.axis('equal')\nplotter.show()","0fc7f77c":"# Deaths per 100 cases","2e124a01":"# Statewise Data","2044ffe9":"# States\/Union Territory in order of cases","592aaf86":"> Basic Data Cleaning","252c2b9f":"# Population Details","8b2b3836":"# Active Cases","0aca9c7c":"# Number of Cases in different age groups"}}