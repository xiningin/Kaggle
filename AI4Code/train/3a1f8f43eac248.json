{"cell_type":{"d9590c07":"code","2d03449a":"code","76c8390a":"code","15c3ba05":"code","d20e7289":"code","cd486414":"code","ea10300e":"code","9e5d7b85":"code","e8c12c61":"code","8567467b":"code","7b962e1e":"code","52f6f9b5":"code","42c80ae2":"code","2e376b35":"code","7b06eedf":"code","ecea9243":"code","605bba20":"code","1ab16e2e":"code","4bace4ad":"code","96b191d2":"code","dfedcb6e":"code","e140b815":"code","992033fd":"code","4eda7ca4":"code","7e19202a":"code","473a0457":"code","c39bc2a3":"code","e0e81f8a":"code","98f5c6fb":"code","dafae23c":"code","966bec1e":"code","b64589c1":"code","1f8768f7":"code","3eed8e4c":"code","ae385c8b":"code","02c011ac":"code","97fd5e7f":"code","97960255":"code","3206da88":"code","5839d586":"code","62436e64":"code","9f5fc783":"code","bfa8892a":"code","3898cdfc":"code","563797fe":"code","ac75b585":"code","45577acf":"code","f29384a9":"code","39e57aae":"code","e92960ad":"code","e0da7d8c":"code","0cf8b93e":"code","14a02bd2":"code","3e93a0a4":"code","cb604163":"code","ca9d9f45":"code","279e23ad":"code","097480b7":"code","d34b7606":"code","52c11f00":"code","4129c393":"code","f67dadc1":"code","f3d2f755":"code","32e039fd":"code","eac46724":"code","0f68c741":"code","380c9b22":"code","cb39c31b":"code","e265627f":"code","534132fe":"code","d3d2266f":"markdown","92692b3c":"markdown","423421b0":"markdown","a2a3be73":"markdown"},"source":{"d9590c07":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as g","2d03449a":"pip install openpyxl","76c8390a":"df = pd.read_excel('\/kaggle\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')\n","15c3ba05":"df.info()","d20e7289":"df.dropna(inplace=True)","cd486414":"#for date of journey we extract date and month\ndf['journey_date'] = pd.to_datetime(df.Date_of_Journey,format=\"%d\/%m\/%Y\").dt.day\ndf['journey_month'] = pd.to_datetime(df.Date_of_Journey,format=\"%d\/%m\/%Y\").dt.month","ea10300e":"df.head()","9e5d7b85":"df.drop(['Date_of_Journey'],axis=1,inplace=True)","e8c12c61":"#for time of departure we extract date and month\ndf['dep_hour'] = pd.to_datetime(df.Dep_Time).dt.hour\ndf['dep_minute'] = pd.to_datetime(df.Dep_Time).dt.minute","8567467b":"df.drop(['Dep_Time'],axis=1,inplace=True)","7b962e1e":"#for time of arrival we extract hour and minute\ndf['arrival_hour'] = pd.to_datetime(df.Arrival_Time).dt.hour\ndf['arrival_minute'] = pd.to_datetime(df.Arrival_Time).dt.minute\ndf.drop(['Arrival_Time'],axis=1,inplace=True)","52f6f9b5":"df.head()","42c80ae2":"#extracting hours and minutes from duration\nduration = list(df['Duration'])\nduration_hour=[]\nduration_minute=[]\nfor i in range(len(duration)):\n    if len(duration[i].split())!=2:\n        if 'h' in duration[i]:\n            duration[i] = duration[i] + \" 0m\"\n        else:\n            duration[i] = \"0h \" + duration[i]\nfor i in range(len(duration)):\n    duration_hour.append(duration[i].split('h')[0])\n    duration_minute.append(duration[i].split()[1].split('m')[0])\ndf['duration_hour'] = duration_hour\ndf['duration_minute'] = duration_minute","2e376b35":"df.head()","7b06eedf":"#encoding categorical variable Airline\nsns.catplot(y=\"Price\",x=\"Airline\",data=df.sort_values(\"Price\",ascending=False),kind=\"boxen\",aspect=3,height=6)         \nplt.show()","ecea9243":"#one hot encoding for nominal categorical variable\nair = df['Airline']\nair = pd.get_dummies(air,drop_first=True)\nair.head()","605bba20":"df.drop(['Airline'],axis=1,inplace=True)","1ab16e2e":"#encoding categorical variable Source\nsns.catplot(y=\"Price\",x=\"Source\",data=df.sort_values(\"Price\",ascending=False),kind=\"boxen\",aspect=3,height=6)         \nplt.show()","4bace4ad":"#one hot encoding for nominal categorical variable\nsrc = df[['Source']]\nsrc = pd.get_dummies(src,drop_first=True)\nsrc.head()","96b191d2":"df.drop(['Source'],axis=1,inplace=True)","dfedcb6e":"df.Destination.value_counts()","e140b815":"#encoding categorical variable Destination\nsns.catplot(y=\"Price\",x=\"Destination\",data=df.sort_values(\"Price\",ascending=False),kind=\"boxen\",aspect=3,height=6)         \nplt.show()","992033fd":"#one hot encoding for nominal categorical variable\ndes = df[['Destination']]\ndes = pd.get_dummies(des,drop_first=True)\ndes.head()","4eda7ca4":"df.drop(['Destination'],axis=1,inplace=True)","7e19202a":"df.head()","473a0457":"#80% values are no info so we remove this column\ndf.Additional_Info.value_counts()","c39bc2a3":"#we also remove column Route as Total_stops and route are same\ndf.drop(['Additional_Info','Route'],axis=1,inplace=True)","e0e81f8a":"df.Total_Stops.value_counts()","98f5c6fb":"#we will use label encoding on Total_stops as its a ordinal categorical variable\ndf.replace({\"non-stop\":0,\"1 stop\":1,\"2 stops\":2,\"3 stops\":3,\"4 stops\":4,},inplace=True)","dafae23c":"df.head()","966bec1e":"df2 =pd.concat([df,air,src,des],axis=1)","b64589c1":"df2.drop(['Duration'],axis=1,inplace=True)","1f8768f7":"#here duration hour and minute are object which should be int \ndf2.info()","3eed8e4c":"df['duration_hour'] = pd.to_numeric(df['duration_hour'])\ndf['duration_minute'] = pd.to_numeric(df['duration_minute'])","ae385c8b":"df.info()","02c011ac":"train = df2.copy()","97fd5e7f":"#we are doing preprocessing for test and train both differently because of data leakage\ntest = pd.read_excel(\"\/kaggle\/input\/flight-fare-prediction-mh\/Test_set.xlsx\")","97960255":"test.head()","3206da88":"test.dropna(inplace=True)\n#for date of journey we extract date and month\ntest['journey_date'] = pd.to_datetime(test.Date_of_Journey,format=\"%d\/%m\/%Y\").dt.day\ntest['journey_month'] = pd.to_datetime(test.Date_of_Journey,format=\"%d\/%m\/%Y\").dt.month\ntest.drop(['Date_of_Journey'],axis=1,inplace=True)\n#for time of departure we extract date and month\ntest['dep_hour'] = pd.to_datetime(test.Dep_Time).dt.hour\ntest['dep_minute'] = pd.to_datetime(test.Dep_Time).dt.minute\ntest.drop(['Dep_Time'],axis=1,inplace=True)\n#for time of arrival we extract hour and minute\ntest['arrival_hour'] = pd.to_datetime(test.Arrival_Time).dt.hour\ntest['arrival_minute'] = pd.to_datetime(test.Arrival_Time).dt.minute\ntest.drop(['Arrival_Time'],axis=1,inplace=True)\n#extracting hours and minutes from duration\nduration = list(test['Duration'])\nduration_hour=[]\nduration_minute=[]\nfor i in range(len(duration)):\n    if len(duration[i].split())!=2:\n        if 'h' in duration[i]:\n            duration[i] = duration[i] + \" 0m\"\n        else:\n            duration[i] = \"0h \" + duration[i]\nfor i in range(len(duration)):\n    duration_hour.append(duration[i].split('h')[0])\n    duration_minute.append(duration[i].split()[1].split('m')[0])\ntest['duration_hour'] = duration_hour\ntest['duration_minute'] = duration_minute\n#encoding categorical variable Airline\n#one hot encoding for nominal categorical variable\nair = test['Airline']\nair = pd.get_dummies(air,drop_first=True)\nair.head()\ntest.drop(['Airline'],axis=1,inplace=True)\n#one hot encoding for nominal categorical variable\nsrc = test[['Source']]\nsrc = pd.get_dummies(src,drop_first=True)\nsrc.head()\ntest.drop(['Source'],axis=1,inplace=True)\ntest.Destination.value_counts()\n#one hot encoding for nominal categorical variable\ndes = test[['Destination']]\ndes = pd.get_dummies(des,drop_first=True)\ndes.head()\ntest.drop(['Destination'],axis=1,inplace=True)\n#80% values are no info so we remove this column\ntest.Additional_Info.value_counts()\n#we also remove column Route as Total_stops and route are same\ntest.drop(['Additional_Info','Route'],axis=1,inplace=True)\n#we will use label encoding on Total_stops as its a ordinal categorical variable\ntest.replace({\"non-stop\":0,\"1 stop\":1,\"2 stops\":2,\"3 stops\":3,\"4 stops\":4,},inplace=True)\ntest =pd.concat([test,air,src,des],axis=1)\ntest.drop(['Duration'],axis=1,inplace=True)","5839d586":"train.head()","62436e64":"train.columns","9f5fc783":"X = train.loc[:,['Total_Stops','journey_date', 'journey_month', 'dep_hour',\n       'dep_minute', 'arrival_hour', 'arrival_minute', 'duration_hour',\n       'duration_minute', 'Air India', 'GoAir', 'IndiGo', 'Jet Airways',\n       'Jet Airways Business', 'Multiple carriers',\n       'Multiple carriers Premium economy', 'SpiceJet', 'Trujet', 'Vistara',\n       'Vistara Premium economy', 'Source_Chennai', 'Source_Delhi',\n       'Source_Kolkata', 'Source_Mumbai', 'Destination_Cochin',\n       'Destination_Delhi', 'Destination_Hyderabad', 'Destination_Kolkata',\n       'Destination_New Delhi']]","bfa8892a":"y=train.iloc[:,1]","3898cdfc":"plt.figure(figsize=(18,18))\nsns.heatmap(df.corr(),annot=True)\nplt.show()","563797fe":"#feature selection\nfrom sklearn.ensemble import ExtraTreesRegressor\nselection = ExtraTreesRegressor()\nselection.fit(X,y)","ac75b585":"fi = pd.Series(selection.feature_importances_,index=X.columns)","45577acf":"fi.index","f29384a9":"plt.figure(figsize=(12,8))\nfi.nlargest(25).plot(kind='barh')\nplt.show()","39e57aae":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)","e92960ad":"from sklearn.linear_model import Ridge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train,y_train)\nreg = RandomForestRegressor()\nreg.fit(X_train,y_train)","e0da7d8c":"ridge = Ridge(alpha=0.1)","0cf8b93e":"ridge.fit(X_train,y_train)","14a02bd2":"ridge.score(X_test,y_test)","3e93a0a4":"y_pred_linear = lr.predict(X_test)","cb604163":"lr.score(X_test,y_test)","ca9d9f45":"y_pred = reg.predict(X_test)","279e23ad":"reg.score(X_test,y_test)","097480b7":"sns.histplot(y_test-y_pred)\nplt.show()","d34b7606":"from sklearn import metrics","52c11f00":"metrics.r2_score(y_test, y_pred)","4129c393":"metrics.r2_score(y_test,ridge.predict(X_test))","f67dadc1":"from sklearn.model_selection import RandomizedSearchCV","f3d2f755":"#Randomized Search CV\n\n# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 2000, num = 12)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 60, num = 6)]\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]","32e039fd":"random_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}","eac46724":"rs_random = RandomizedSearchCV(estimator = reg, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)","0f68c741":"rs_random.fit(X_train,y_train)","380c9b22":"rs_random.best_params_","cb39c31b":"predict = rs_random.predict(X_test)","e265627f":"plt.figure(figsize=(14,10))\nsns.regplot(x=y_test,y=predict)\nplt.xlabel('test labels')\nplt.ylabel('Prediction fare')\nplt.show()","534132fe":"metrics.r2_score(y_test,predict)","d3d2266f":"# Feature Selection ","92692b3c":"# Test set","423421b0":"# Fitting model","a2a3be73":"# exploratory data analysis"}}