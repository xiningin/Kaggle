{"cell_type":{"47af9d64":"code","3ef5a50a":"code","655eced2":"code","38c5b973":"code","a0b5525b":"code","bee61044":"code","c749178d":"code","d0955a1e":"code","3d2596b4":"code","e77c68ff":"code","bf613d60":"code","cb9129c5":"code","b1ffd84d":"code","8e0463e3":"code","d39642a8":"code","0f03e05f":"code","2c4bb616":"code","41787176":"code","0fd2af63":"code","6ed57fde":"code","c4cf7a8c":"code","041cacde":"markdown","b0e78a99":"markdown","48e28d41":"markdown","00e43626":"markdown","a6cc00a8":"markdown","bed0293b":"markdown","7dee5171":"markdown","2db64bbd":"markdown"},"source":{"47af9d64":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split","3ef5a50a":"import tensorflow as tf\nfrom tqdm.keras import TqdmCallback\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Flatten, Dense, Dropout, LeakyReLU, BatchNormalization\nfrom tensorflow.keras.initializers import glorot_uniform","655eced2":"from tensorflow.keras.callbacks import ModelCheckpoint\nfrom tensorflow.keras.optimizers import SGD, Adam","38c5b973":"base_path = '..\/input\/face-images-with-marked-landmark-points\/'","a0b5525b":"df = pd.read_csv(base_path + 'facial_keypoints.csv')\ndf.head()","bee61044":"df = df.fillna(0)","c749178d":"# split columns two by two\nc = 0\ncolumns = {}\ntemp = []\nfor i, e in enumerate(list(df.columns)):\n    temp.append(e)\n    c += 1\n    if c == 2:\n        columns[e.split('_y')[0]] = temp\n        temp = []\n        c = 0","d0955a1e":"columns.keys()","3d2596b4":"keypoints_dict = {}\nfor k in columns.keys():\n    keypoints_dict[k] = df[columns[k]].values","e77c68ff":"keypoints = np.array(list(keypoints_dict.values()))\nkeypoints = np.swapaxes(keypoints, 0, 1)","bf613d60":"features = np.load(base_path + 'face_images.npz')['face_images']\nfeatures = np.swapaxes(np.swapaxes(features, 1, 2), 0, 1)","cb9129c5":"def display_image_keypoints(nr, features, keypoints):\n    plt.imshow(features[nr])\n    for i in range(keypoints.shape[1]):\n        element = keypoints[nr,i,:]\n        plt.scatter(element[0],element[1],c='r',s=12)","b1ffd84d":"display_image_keypoints(3, features, keypoints)","8e0463e3":"# reshape to be flat\nkeypoints = keypoints.reshape(-1, 30)\n\n# reshape features to be in 4d\nfeatures = features.reshape(7049, 96, 96, 1)","d39642a8":"X_train, X_test, y_train, y_test = train_test_split(features, keypoints, test_size=0.1)","0f03e05f":"img_size = 96","2c4bb616":"model = Sequential()\n\nmodel.add(Input(shape=(img_size, img_size, 1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(16, (3,3), padding=\"same\",kernel_initializer=glorot_uniform()))\nmodel.add(LeakyReLU(alpha=0.1))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, (3,3), padding=\"same\",kernel_initializer=glorot_uniform()))\nmodel.add(LeakyReLU(alpha=0.1))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, (3,3), padding=\"same\",kernel_initializer=glorot_uniform()))\nmodel.add(LeakyReLU(alpha=0.1))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))  \n\nmodel.add(Flatten())\nmodel.add(Dense(128,kernel_initializer=glorot_uniform()))\nmodel.add(LeakyReLU(alpha=0.1))\n\nmodel.add(Dropout(0.5)) \n\nmodel.add(Dense(64,kernel_initializer=glorot_uniform()))\nmodel.add(LeakyReLU(alpha=0))\n\nmodel.add(Dense(30,kernel_initializer=glorot_uniform()))","41787176":"model.compile(loss='mean_squared_error', optimizer=Adam(), metrics=['mean_squared_error'])","0fd2af63":"BATCH_SIZE = 32\nEPOCHS = 1000","6ed57fde":"history = model.fit(\n    X_train, y_train,\n    batch_size=BATCH_SIZE,\n    epochs=EPOCHS,\n    validation_data=(X_test, y_test),\n    shuffle=True,\n    verbose=0,\n    callbacks=[TqdmCallback(verbose=0)]\n)","c4cf7a8c":"plt.plot(history.history['mean_squared_error'], label='MSE (training data)')\nplt.plot(history.history['val_mean_squared_error'], label='MSE (validation data)')\nplt.title('MSE for Facial keypoints')\nplt.ylabel('MSE value')\nplt.xlabel('No. epoch')\nplt.legend(loc=\"upper left\")\nplt.show()","041cacde":"# Prepare the Face keypoints Array","b0e78a99":"# Tensorflow Model","48e28d41":"# Last key modifications to the data","00e43626":"# Display an Image with Facial keypoints","a6cc00a8":"# Load the face images array","bed0293b":"# CNN Facial keypoints","7dee5171":"# Split Data","2db64bbd":"# Evaluate Model History"}}