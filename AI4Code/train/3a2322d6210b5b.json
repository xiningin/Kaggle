{"cell_type":{"e820a30b":"code","d7dca765":"code","cc0b3534":"code","ee051009":"code","33637c84":"code","60452144":"code","072e8109":"code","65ed13bb":"code","e2c865d4":"code","59926551":"code","fbb4825f":"code","b760985d":"code","fb25e718":"code","856c9c0c":"code","0fa90f3f":"code","dc66e4a8":"code","5635734c":"code","eb776abb":"code","a9f3545c":"code","f16e6fcb":"code","76f6bbc0":"code","3c6d712b":"code","ec6c8374":"code","a11f066e":"code","78d367dd":"code","932c2e7b":"code","ca0ce0e6":"code","7f31acbc":"code","a319cdfb":"code","2fe056e2":"code","c99e2107":"code","f11f240a":"code","fbc94f39":"code","d260b379":"code","fe9aa819":"code","ab2ba98e":"code","89f17f78":"code","26dec7e8":"code","78ad2ad6":"code","1f3e262b":"code","93315a5d":"code","38bc088e":"code","bf5bf81f":"markdown","7cf704eb":"markdown","f42c5d99":"markdown","0f74aba8":"markdown","ea24d8e0":"markdown","a8c0c06c":"markdown","76fcb400":"markdown","29fd7796":"markdown","4f33f821":"markdown","342f1cdb":"markdown","c2d6b16c":"markdown","2fdadcdb":"markdown","32ba6eda":"markdown","f43b5166":"markdown","35d1ecb5":"markdown","7aef4f13":"markdown","eed79ea7":"markdown"},"source":{"e820a30b":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","d7dca765":"dataset_1 = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndataset_2 = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nprint(\"dataset_1 = \", dataset_1.shape, \"dataset_2 = \", dataset_2.shape)","cc0b3534":"dataset = pd.concat([dataset_1, dataset_2], ignore_index = True)\ndataset.index += 1 \ndataset","ee051009":"dataset.shape","33637c84":"dataset.info()","60452144":"dataset ['MSSubClass'] = dataset['MSSubClass'].apply(str)\ndataset ['OverallQual'] = dataset ['OverallQual'].apply(str)\ndataset ['OverallCond'] = dataset ['OverallCond'].apply(str)","072e8109":"dataset['TotalSF'] = dataset['TotalBsmtSF'] + dataset['1stFlrSF'] + dataset['2ndFlrSF']\ndataset['TotalBathrooms'] = (dataset['FullBath'] + (0.5 * dataset['HalfBath']) + dataset['BsmtFullBath'] + (0.5 * dataset['BsmtHalfBath']))\ndataset['TotalPorchSf'] = (dataset['OpenPorchSF'] + dataset['3SsnPorch'] + dataset['EnclosedPorch'] + dataset['ScreenPorch'] + dataset['WoodDeckSF'])\ndataset[\"LivLotRatio\"] = dataset['GrLivArea']\/dataset['LotArea']\n\ndataset = dataset.drop (['TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'FullBath', 'HalfBath', 'BsmtFullBath', 'BsmtHalfBath', 'OpenPorchSF', '3SsnPorch', 'EnclosedPorch', 'ScreenPorch', 'WoodDeckSF', 'GrLivArea', 'LotArea'], axis = 1)","65ed13bb":"y = dataset['SalePrice']\ny = y.iloc[0:1460].values.reshape(-1,1)\ny","e2c865d4":"Id = dataset['Id']\nId = Id.iloc[1460:2920].values\nId","59926551":"dataset.drop(['Id','SalePrice'], inplace=True, axis=1)","fbb4825f":"datatypes = dict(dataset.dtypes)\nobjs=[]\nnums=[]\nfor i in dataset.columns:\n    if datatypes[i]==\"O\":\n        objs.append(i)\n    else:\n        nums.append(i)","b760985d":"for i in dataset.columns:\n    nulls = dataset[i].isnull().sum()\n    if nulls>0:\n        print(nulls, \"\\t\", i)","fb25e718":"cm = dataset.columns\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\nimputer.fit(dataset)\ndataset = imputer.transform(dataset)\ndataset = pd.DataFrame(dataset, columns=cm)","856c9c0c":"df_nums = dataset[nums]\ndf_objs = dataset[objs]","0fa90f3f":"objs","dc66e4a8":"from sklearn.preprocessing import LabelEncoder\ndf_objs = df_objs.apply(LabelEncoder().fit_transform)\ndf_objs","5635734c":"nums","eb776abb":"df_nums","a9f3545c":"from sklearn.preprocessing import StandardScaler\nsc_x = StandardScaler()\ndf_nums = pd.DataFrame(sc_x.fit_transform(df_nums), columns=nums)\nsc_y = StandardScaler()\ny = sc_y.fit_transform(y)","f16e6fcb":"df_nums","76f6bbc0":"dataset_final = pd.concat([df_objs,df_nums], axis=1)\ndataset_final","3c6d712b":"dataset_1 = dataset_final[0:1460]\ndataset_2 = dataset_final[1460:2920]\nprint(\"dataset_1 = \", dataset_1.shape, \"dataset_2 = \", dataset_2.shape)","ec6c8374":"x = dataset_1.iloc[:,:].values","a11f066e":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x, y, test_size= 0.30, random_state = 123)","78d367dd":"x_test","932c2e7b":"y_test","ca0ce0e6":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(x_train, y_train)","7f31acbc":"y_pred = regressor.predict(x_test)","a319cdfb":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","2fe056e2":"from sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(x_train, y_train)","c99e2107":"y_pred = regressor.predict(x_test)","f11f240a":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","fbc94f39":"from sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nregressor.fit(x_train, y_train)","d260b379":"y_pred = regressor.predict(x_test)","fe9aa819":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","ab2ba98e":"from sklearn.svm import SVR\nregressor = SVR(kernel = 'rbf')\nregressor.fit(x_train, y_train)","89f17f78":"y_pred = regressor.predict(x_test)","26dec7e8":"from sklearn.metrics import r2_score\nr2_score(y_test, y_pred)","78ad2ad6":"x = dataset_2.iloc[:,:].values","1f3e262b":"y_final = sc_y.inverse_transform(regressor.predict(x)).reshape(-1,1)\ny_final","93315a5d":"Id.reshape(-1,1)","38bc088e":"# submission = pd.DataFrame()\n# submission['Id'] = Id\n# submission['SalePrice'] = y_final\n# submission.to_csv('..\/input\/final-submission',index=False)","bf5bf81f":"Feature scaling the numerical values:","7cf704eb":"Training the model:","f42c5d99":"Dividing the dataset to numerical and categorical(object):","0f74aba8":"Changing the categorical variables to dummy variables: (only on categorical values)","ea24d8e0":"Random Forest:","a8c0c06c":"Some data cleaning: (from https:\/\/www.kaggle.com\/dhaneeshkarthikp\/house-price\/notebook)","76fcb400":"There are some data here that are not int, but they are written in numbers so we change them to objects: (from https:\/\/www.kaggle.com\/dhaneeshkarthikp\/house-price\/notebook)","29fd7796":"Dividing numerical and categorical values columns names:","4f33f821":"It seems that random forest gives us the hughest accuracy. So we use that to predict the test data:","342f1cdb":"We take out the Id column because it has no effect on the results. Also we take our the SalePrice which is out dependant variable.","c2d6b16c":"Linear Regression:","2fdadcdb":"So we know that row 1-1460 belongs to \"train\" dataset and row 1461 to 2919 belongs to \"test\" dataset.\nLet's join the test and train test for some data preprocessing. We will divide them again later:","32ba6eda":"Merging the two datas in one:","f43b5166":"Dealing with the missing values:","35d1ecb5":"Support Vector Regression (SVR):","7aef4f13":"Now its time to divide the test and train dataset again:","eed79ea7":"Decision Tree:"}}