{"cell_type":{"b8afe3dd":"code","f4d7b2c1":"code","1f18c233":"code","da1cea72":"code","4a3871a4":"code","92e872b2":"code","67cc70d2":"code","a5f66f7e":"code","12423882":"code","1f8d5017":"code","f37275f1":"code","a640505b":"code","a5ff3445":"code","5fad6392":"code","5e236c9e":"code","c4dc3ce0":"code","2f10de65":"code","1107d649":"code","84bb7eca":"code","8b2918cc":"code","15737988":"code","3adc2fd6":"code","6b7fb23c":"code","f45cb65c":"code","66e30b66":"code","820bc575":"code","35c6e836":"code","22365430":"code","9459022e":"code","135c4d08":"code","6236ed8b":"code","5f026605":"code","f0a7c676":"code","adbee9f0":"code","3476a151":"code","8dc3fad5":"code","cd43a924":"code","e496db84":"markdown","5889c98c":"markdown","db490012":"markdown","7410e4da":"markdown"},"source":{"b8afe3dd":"import os\nimport numpy as np\nimport pandas as pd\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom contextlib import contextmanager\nfrom time import time\nfrom tqdm import tqdm\nimport lightgbm as lgbm\nimport category_encoders as ce\nfrom tensorflow.keras.utils import to_categorical\nfrom sklearn.metrics import classification_report, log_loss, accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import KFold\nimport datetime\nfrom datetime import date\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","f4d7b2c1":"data0 = pd.read_csv(\"..\/input\/wq-southern-bug-river-01052021\/PB_All_2000_2021.csv\", sep=';')\ndata0[0:2].T","1f18c233":"data0.columns","da1cea72":"data0.info()","4a3871a4":"data0['date']=pd.to_datetime(data0['date'], format='%d.%m.%Y')\ndata0","92e872b2":"df=data0\nfrom sklearn.preprocessing import LabelEncoder\nfor c in df.columns:\n    if df[c].dtype=='object': \n        df[c] = df[c].fillna('N')\n        lbl = LabelEncoder()\n        lbl.fit(list(df[c].values))\n        df[c] = lbl.transform(df[c].values)","67cc70d2":"data1=df\ndata1[0:2].T","a5f66f7e":"data1.columns","12423882":"data1['id'].value_counts()","1f8d5017":"data1a=data1[data1['id']==3]\ndata1a","f37275f1":"fig=make_subplots(specs=[[{\"secondary_y\":False}]])\nfig.add_trace(go.Scatter(x=data1a['date'],y=data1a['O2'],name='02'),secondary_y=False,)\nfig.add_trace(go.Scatter(x=data1a['date'],y=data1a['NO3'],name='NO3'),secondary_y=False,)\nfig.add_trace(go.Scatter(x=data1a['date'],y=data1a['SO4'],name='SO4'),secondary_y=False,)\nfig.add_trace(go.Scatter(x=data1a['date'],y=data1a['Suspended'],name='Suspended'),secondary_y=False,)\nfig.add_trace(go.Scatter(x=data1a['date'],y=data1a['CL'],name='CL'),secondary_y=False,)\nfig.update_layout(autosize=False,width=700,height=500,title_text=\"id 3\")\nfig.update_xaxes(title_text=\"Date\")\nfig.update_yaxes(title_text=\"Value\",secondary_y=False)\nfig.show()","a640505b":"data1=data1.fillna(0)","a5ff3445":"target=['O2']\ndataY0=data1[target]\ndataX=data1.drop(['date',target[0]],axis=1)","5fad6392":"df_columns = list(dataX.columns)\nprint(df_columns)","5e236c9e":"dataX=np.array(dataX)\ndataY0=np.array(dataY0)","c4dc3ce0":"m=len(data1)\nM=list(range(m))\nrandom.seed(2021)\nrandom.shuffle(M)\n\ntrainX=dataX[M[0:(m\/\/4)*3]]\ntrainY0=dataY0[M[0:(m\/\/4)*3]]\ntestX=dataX[M[(m\/\/4)*3:]]\ntestY0=dataY0[M[(m\/\/4)*3:]]","2f10de65":"print(len(trainX))\nprint(len(testX))","1107d649":"train_df=pd.DataFrame(trainX)\ntest_df=pd.DataFrame(testX)","84bb7eca":"train_df.columns=df_columns\ntest_df.columns=df_columns","8b2918cc":"def create_numeric_feature(input_df):\n    use_columns = df_columns \n    return input_df[use_columns].copy()","15737988":"from contextlib import contextmanager\nfrom time import time\n\nclass Timer:\n    def __init__(self, logger=None, format_str='{:.3f}[s]', prefix=None, suffix=None, sep=' '):\n\n        if prefix: format_str = str(prefix) + sep + format_str\n        if suffix: format_str = format_str + sep + str(suffix)\n        self.format_str = format_str\n        self.logger = logger\n        self.start = None\n        self.end = None\n\n    @property\n    def duration(self):\n        if self.end is None:\n            return 0\n        return self.end - self.start\n\n    def __enter__(self):\n        self.start = time()\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.end = time()\n        out_str = self.format_str.format(self.duration)\n        if self.logger:\n            self.logger.info(out_str)\n        else:\n            print(out_str)","3adc2fd6":"def to_feature(input_df):\n\n    processors = [\n        create_numeric_feature,\n    ]\n    \n    out_df = pd.DataFrame()\n    \n    for func in tqdm(processors, total=len(processors)):\n        with Timer(prefix='create' + func.__name__ + ' '):\n            _df = func(input_df)\n\n        assert len(_df) == len(input_df), func.__name__\n        out_df = pd.concat([out_df, _df], axis=1)\n        \n    return out_df","6b7fb23c":"train_feat_df = to_feature(train_df)\ntest_feat_df = to_feature(test_df)","f45cb65c":"train_feat_df","66e30b66":"test_feat_df","820bc575":"import lightgbm as lgbm\nfrom sklearn.metrics import mean_squared_error\n\ndef fit_lgbm(X, y, cv, \n             params: dict=None, \n             verbose: int=50):\n\n    if params is None:\n        params = {}\n\n    models = []\n    oof_pred = np.zeros_like(y, dtype=np.float)\n\n    for i, (idx_train, idx_valid) in enumerate(cv): \n        x_train, y_train = X[idx_train], y[idx_train]\n        x_valid, y_valid = X[idx_valid], y[idx_valid]\n\n        clf = lgbm.LGBMRegressor(**params)\n        \n        with Timer(prefix='fit fold={} '.format(i)):\n            clf.fit(x_train, y_train, \n                    eval_set=[(x_valid, y_valid)],  \n                    early_stopping_rounds=100,\n                    verbose=verbose)\n\n        pred_i = clf.predict(x_valid)\n        oof_pred[idx_valid] = pred_i\n        models.append(clf)\n        print(f'Fold {i} RMSLE: {mean_squared_error(y_valid, pred_i) ** .5:.4f}')\n        print()\n\n    score = mean_squared_error(y, oof_pred) ** .5\n    print('-' * 50)\n    print('FINISHED | Whole RMSLE: {:.4f}'.format(score))\n    return oof_pred, models","35c6e836":"params = {\n    'objective': 'rmse', \n    'learning_rate': .1,\n    'reg_lambda': 1.,\n    'reg_alpha': .1,\n    'max_depth': 5, \n    'n_estimators': 10000, \n    'colsample_bytree': .5, \n    'min_child_samples': 10,\n    'subsample_freq': 3,\n    'subsample': .9,\n    'importance_type': 'gain', \n    'random_state': 71,\n    'num_leaves': 62\n}","22365430":"y = trainY0\nprint(y.shape)","9459022e":"ydf=pd.DataFrame(y)\nydf","135c4d08":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    \n    fig,ax = plt.subplots(figsize=(6,6))\n    ax.set_title(target[i],fontsize=20)\n    ax.set_ylabel('Train Predicted '+target[i],fontsize=12)\n    ax.set_xlabel('Train Actual '+target[i],fontsize=12)\n    ax.scatter(y,oof)","6236ed8b":"print(target)","5f026605":"def visualize_importance(models, feat_train_df):\n\n    feature_importance_df = pd.DataFrame()\n    for i, model in enumerate(models):\n        _df = pd.DataFrame()\n        _df['feature_importance'] = model.feature_importances_\n        _df['column'] = feat_train_df.columns\n        _df['fold'] = i + 1\n        feature_importance_df = pd.concat([feature_importance_df, _df], \n                                          axis=0, ignore_index=True)\n\n    order = feature_importance_df.groupby('column')\\\n        .sum()[['feature_importance']]\\\n        .sort_values('feature_importance', ascending=False).index[:50]\n    \n    print(order[0:5].tolist())\n\n    fig, ax = plt.subplots(figsize=(8, max(6, len(order) * .25)))\n    sns.boxenplot(data=feature_importance_df, \n                  x='feature_importance', \n                  y='column', \n                  order=order, \n                  ax=ax, \n                  palette='viridis', \n                  orient='h')\n    \n    ax.tick_params(axis='x', rotation=0)\n    #ax.set_title('Importance')\n    ax.grid()\n    fig.tight_layout()\n    \n    return fig,ax\n\n#fig, ax = visualize_importance(models, train_feat_df)","f0a7c676":"for i in range(1):\n    fold = KFold(n_splits=5, shuffle=True, random_state=71)\n    ydfi=ydf.iloc[:,i]\n    y=np.array(ydfi)\n    cv = list(fold.split(train_feat_df, y))\n    oof, models = fit_lgbm(train_feat_df.values, y, cv, params=params, verbose=500)\n    fig, ax = visualize_importance(models, train_feat_df)\n    ax.set_title(target[i]+' Imortance',fontsize=20)","adbee9f0":"orders=['NO3', 'NO2', 'SO4', 'PO4', 'CL']","3476a151":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[0]+' vs '+orders[0],fontsize=20)\nax.set_xlabel(target[0],fontsize=12)\nax.set_ylabel(orders[0],fontsize=12)\nax.scatter(data1[target[0]],data1[orders[0]])","8dc3fad5":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[0]+' vs '+orders[1],fontsize=20)\nax.set_xlabel(target[0],fontsize=12)\nax.set_ylabel(orders[1],fontsize=12)\nax.scatter(data1[target[0]],data1[orders[1]])","cd43a924":"fig,ax = plt.subplots(figsize=(6,6))\nax.set_title(target[0]+' vs '+orders[2],fontsize=20)\nax.set_xlabel(target[0],fontsize=12)\nax.set_ylabel(orders[2],fontsize=12)\nax.scatter(data1[target[0]],data1[orders[2]])","e496db84":"# Visualize Importance","5889c98c":"# Target setting","db490012":"# Data preparation","7410e4da":"# Model"}}