{"cell_type":{"6f40de65":"code","b3c627ed":"code","60688e9f":"code","e9fb1f55":"code","47b87d22":"code","b1914b92":"code","b4cc14bc":"code","53f33c99":"code","ccd788ff":"code","52a002db":"markdown","52fbde60":"markdown","3a9ddddf":"markdown","d4d9980a":"markdown","2dc8a6ca":"markdown","4f3f9086":"markdown","eab2eb7b":"markdown"},"source":{"6f40de65":"import numpy as np \nimport pandas as pd \nfrom skimage.data import imread\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport cv2","b3c627ed":"# set images to bigger size\nmpl.rcParams['figure.figsize'] = [8.0, 8.0]","60688e9f":"ImageId = '002fdcf51.jpg'\nimg = imread('..\/input\/train_v2\/' + ImageId)\nmasks = pd.read_csv(\"..\/input\/train_ship_segmentations_v2.csv\", index_col=\"ImageId\")","e9fb1f55":"plt.imshow(img)\nplt.show()","47b87d22":"def rle_decode(mask_rle, shape):\n    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)\n    s = mask_rle.split()\n    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]\n    starts -= 1\n    ends = starts + lengths\n    \n    for lo, hi in zip(starts, ends):\n        img[lo:hi] = 1\n    return img.reshape(shape).T","b1914b92":"rle_mask = masks.EncodedPixels[ImageId].tolist()[1] # this image has two ships, we'll use bigger one\nmask = rle_decode(rle_mask, (768, 768))\nplt.imshow(mask)\nplt.show()","b4cc14bc":"x, y, w, h = cv2.boundingRect(mask)\nrect1 = cv2.rectangle(img.copy(),(x,y),(x+w,y+h),(0,255,0),3) # not copying here will throw an error\nprint(\"x:{0}, y:{1}, width:{2}, height:{3}\".format(x, y, w, h))\nplt.imshow(rect1)\nplt.show()","53f33c99":"_,contours,_ = cv2.findContours(mask.copy(), 1, 1) # not copying here will throw an error\nrect = cv2.minAreaRect(contours[0]) # basically you can feed this rect into your classifier\n(x,y),(w,h), a = rect # a - angle","ccd788ff":"box = cv2.boxPoints(rect)\nbox = np.int0(box) #turn into ints\nrect2 = cv2.drawContours(img.copy(),[box],0,(0,0,255),3)\n\nplt.imshow(rect2)\nplt.show()","52a002db":"## First, what image we have:","52fbde60":"Draw it","3a9ddddf":"# Voila !","d4d9980a":"# How to recover rotating bounging boxes from given data. Lossless. <br>\nI'm trying to code as simple as possible.","2dc8a6ca":"## Bounding box\nNow let's encode this ship into box with x, y, width, height:","4f3f9086":"## Get mask of image from RLE\nHow to turn RLE into image mask you probably know from other kernels. Nothing special here.","eab2eb7b":"## Rotating Bounding Box\nAnd finally"}}