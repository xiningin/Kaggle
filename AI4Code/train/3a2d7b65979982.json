{"cell_type":{"d37f8475":"code","610df29a":"code","aaa74dc3":"code","543532bd":"code","18d02902":"code","c9e6c5fb":"code","b019d7e7":"code","d9ddf838":"code","f6513bd3":"code","e020574f":"code","2346cc01":"code","2add9f69":"code","2bd90b33":"code","4c89d9ca":"code","e78c84f4":"code","41fd2b57":"code","76a04926":"code","e7b88b28":"code","66daffd6":"code","efabe901":"code","4002f16c":"code","ea9a8100":"code","d9028fb4":"code","2b6c1333":"code","f3e6105c":"code","1ecd2aad":"code","74c7ba3a":"code","b0ed0dd7":"code","4b8b23a7":"code","e983325b":"code","717a8c1e":"code","19aa3c69":"code","4cdb7296":"code","010e6e6b":"code","c4b9ddb2":"code","c8dfcfc0":"code","54e3a530":"code","ccea9104":"code","2c4b7e08":"markdown","059b2972":"markdown","c70815e2":"markdown","e2fd93e5":"markdown","0e53c41f":"markdown"},"source":{"d37f8475":"import seaborn as sns\nimport tensorflow_hub as hub\nimport numpy as np\n\nmodel = hub.load(\"https:\/\/tfhub.dev\/google\/universal-sentence-encoder\/4\")\ndef embed(input):\n  return model(input)\ndef plot_similarity(labels, features, rotation):\n  corr = np.inner(features, features)\n  sns.set(font_scale=1.2)\n  g = sns.heatmap(corr, xticklabels=labels, yticklabels=labels, vmin=0, vmax=1, cmap=\"YlOrRd\")\n  g.set_xticklabels(labels, rotation=rotation)\n  g.set_title(\"Semantic Textual Similarity\")\n\ndef run_and_plot(messages_):\n  message_embeddings_ = embed(messages_)\n  plot_similarity(messages_, message_embeddings_, 90)\n    \n\nmessages = [\n    # Smartphones\n    \"I like my phone\",\n    \"My phone is not good.\",\n    \"Your cellphone looks great.\",\n\n    # Weather\n    \"Will it snow tomorrow?\",\n    \"Recently a lot of hurricanes have hit the US\",\n    \"Global warming is real\",\n\n    # Food and health\n    \"An apple a day, keeps the doctors away\",\n    \"Eating strawberries is healthy\",\n    \"Is paleo better than keto?\",\n\n    # Asking about age\n    \"How old are you?\",\n    \"what is your age?\",\n]\n\nrun_and_plot(messages)","610df29a":"!nvidia-smi","aaa74dc3":"!pip install gdown\n!pip install tensorflow_text","543532bd":"!pip install wordcloud","18d02902":"!pip install tensorflow-gpu","c9e6c5fb":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow import keras\nimport pandas as pd\nimport seaborn as sns\nfrom pylab import rcParams\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\nfrom pandas.plotting import register_matplotlib_converters\nfrom sklearn.model_selection import train_test_split\nimport tensorflow_hub as hub\nimport tensorflow_text\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\n%matplotlib inline\n%config InlineBackend.figure_format='retina'\n\nregister_matplotlib_converters()\nsns.set(style='whitegrid', palette='muted', font_scale=1.2)\n\nHAPPY_COLORS_PALETTE = [\"#01BEFE\", \"#FFDD00\", \"#FF7D00\", \"#FF006D\", \"#ADFF02\", \"#8F00FF\"]\n\nsns.set_palette(sns.color_palette(HAPPY_COLORS_PALETTE))\n\nrcParams['figure.figsize'] = 12, 8\n\nRANDOM_SEED = 42\n\nnp.random.seed(RANDOM_SEED)\ntf.random.set_seed(RANDOM_SEED)","b019d7e7":"tf.test.is_gpu_available()","d9ddf838":"df = pd.read_csv('..\/input\/amazon-fine-food-reviews\/Reviews.csv')\ndf.head()","f6513bd3":"df.isna().sum()","e020574f":"del df['Id']\ndel df['ProductId']\ndel df['UserId']\ndel df['ProfileName']\ndel df['HelpfulnessNumerator']\ndel df['HelpfulnessDenominator']\ndel df['Time']","2346cc01":"df['review'] = df['Summary']+df['Text']\ndel df['Summary']\ndel df['Text']\ndf.review.fillna(\"\",inplace = True)\ndf.head()","2add9f69":"df.Score.value_counts()","2bd90b33":"sns.countplot(\n  x='Score',\n  data=df,\n  order=df.Score.value_counts().index\n)\n\nplt.xlabel(\"type\")\nplt.title(\"Review type\");","4c89d9ca":"df[\"review_type\"] = df[\"Score\"].apply(lambda x: \"negative\" if x < 4 else \"positive\")","e78c84f4":"df.review_type.value_counts()","41fd2b57":"sns.countplot(\n  x='review_type',\n  data=df,\n  order=df.review_type.value_counts().index\n)\n\nplt.xlabel(\"type\")\nplt.title(\"Review type\");","76a04926":"positive_reviews = df[df.review_type == \"positive\"]\nnegative_reviews = df[df.review_type == \"negative\"]","e7b88b28":"print(positive_reviews.shape, negative_reviews.shape)","66daffd6":"positive_reviews_text = \" \".join(positive_reviews.review.to_numpy().tolist())\nnegative_reviews_text = \" \".join(negative_reviews.review.to_numpy().tolist())\n\npositive_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color=\"black\").generate(positive_reviews_text)\nnegative_reviews_cloud = WordCloud(stopwords=STOPWORDS, background_color=\"black\").generate(negative_reviews_text)","efabe901":"def show_word_cloud(cloud, title):\n  plt.figure(figsize = (20, 20))\n  plt.imshow(cloud, interpolation='bilinear')\n  plt.title(title)\n  plt.axis(\"off\")\n  plt.show();","4002f16c":"show_word_cloud(positive_reviews_cloud, \"Common Words in Positive Reviews\")","ea9a8100":"show_word_cloud(negative_reviews_cloud, \"Common Words in Negative Reviews\")","d9028fb4":"positive_df = positive_reviews.sample(n=len(negative_reviews), random_state=RANDOM_SEED)\nnegative_df = negative_reviews","2b6c1333":"review_df = positive_df.append(negative_df).reset_index(drop=True)\nreview_df.shape","f3e6105c":"review_df.head()","1ecd2aad":"sns.countplot(\n  x='review_type',\n  data=review_df,\n  order=review_df.review_type.value_counts().index\n)\n\nplt.xlabel(\"type\")\nplt.title(\"Review type (resampled)\");","74c7ba3a":"use = hub.load(\"https:\/\/tfhub.dev\/google\/universal-sentence-encoder-multilingual-large\/3\")","b0ed0dd7":"from sklearn.preprocessing import OneHotEncoder\n\ntype_one_hot = OneHotEncoder(sparse=False).fit_transform(\n  review_df.review_type.to_numpy().reshape(-1, 1)\n)","4b8b23a7":"train_reviews, test_reviews, y_train, y_test =\\\n  train_test_split(\n    review_df.review, \n    type_one_hot, \n    test_size=.1, \n    random_state=RANDOM_SEED\n  )","e983325b":"X_train = []\nfor r in tqdm(train_reviews):\n  emb = use(r)\n  review_emb = tf.reshape(emb, [-1]).numpy()\n  X_train.append(review_emb)\n\nX_train = np.array(X_train)","717a8c1e":"X_test = []\nfor r in tqdm(test_reviews):\n  emb = use(r)\n  review_emb = tf.reshape(emb, [-1]).numpy()\n  X_test.append(review_emb)\n\nX_test = np.array(X_test)","19aa3c69":"print(X_train.shape, X_test.shape)","4cdb7296":"print(X_train.shape, y_train.shape)","010e6e6b":"model = keras.Sequential()\n\nmodel.add(keras.layers.Dense(units=256, input_shape=(X_train.shape[1], ), activation='relu'))\nmodel.add(keras.layers.Dropout(rate=0.2))\nmodel.add(keras.layers.Dense(units=128, activation='relu'))\nmodel.add(keras.layers.Dropout(rate=0.2))\nmodel.add(keras.layers.Dense(2, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer=keras.optimizers.Adam(0.001), metrics=['accuracy'])\nmodel.summary()","c4b9ddb2":"history = model.fit(\n    X_train, y_train, \n    epochs=15, \n    batch_size=16, \n    validation_split=0.1, \n    verbose=1, \n    shuffle=True\n)","c8dfcfc0":"plt.plot(history.history['loss'], label='train loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.xlabel(\"epoch\")\nplt.ylabel(\"Cross-entropy loss\")\nplt.legend();","54e3a530":"plt.plot(history.history['accuracy'], label='train accuracy')\nplt.plot(history.history['val_accuracy'], label='val accuracy')\nplt.xlabel(\"epoch\")\nplt.ylabel(\"accuracy\")\nplt.legend();","ccea9104":"model.evaluate(X_test, y_test)[1]","2c4b7e08":"### The Universal Sentence Encoder (USE) encodes sentences into embedding vectors. Word can also be embedded using popular implementatoins like GloVe, word2vec, fastText, etc. These embeddings are only useful for word level operations, sometimes we would want to explore embeddings for sentences, or generally, greater-than-word length text.","059b2972":"## Thank you very much for your attention to my work.","c70815e2":"# **Sentiment Analysis using Universal Sentence Encoder**","e2fd93e5":"## How Does USE work??","0e53c41f":"![](https:\/\/miro.medium.com\/max\/1500\/1*cBLomt7la5i2yREwVH9_kw.png)"}}