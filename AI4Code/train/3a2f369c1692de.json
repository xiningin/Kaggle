{"cell_type":{"436ac60b":"code","764cc4f2":"code","db29a1b3":"code","7fdafbcb":"code","8aaec877":"code","1623d54f":"code","dcbb1bb7":"code","e6b35ee7":"code","aaf1414d":"code","53d22184":"code","5f6cb131":"code","e09e95d5":"code","c2970ff7":"code","a0d8767e":"code","10f403a0":"code","361aac8a":"code","f3ca37bf":"code","6aab0f14":"code","5610c8ec":"code","073d4a1b":"code","1ba894c6":"code","071914d5":"code","0df1db0a":"code","0ce22c26":"code","b151ac94":"code","234fc827":"code","f6e6e23e":"code","ceaaef75":"code","1d30bc93":"code","a075d612":"code","e1d0db75":"code","5b79aeca":"code","ba47f07c":"code","048bfab0":"code","c2a3311e":"code","461bb8a6":"code","3a00c6e3":"code","1cb0d832":"code","d6192ec8":"code","8289906a":"code","cec70031":"code","222e7ec3":"code","8aeed4f8":"code","ad4e8fdf":"code","0fdd9385":"code","6dee3cc2":"code","64901346":"code","813613ca":"code","8f7e5887":"code","f4366b90":"code","c58c2986":"code","8af71770":"code","403e957f":"code","150c76ec":"code","825c6f22":"code","49f0caca":"code","dabcc1ee":"code","ac6257a8":"code","0def5893":"code","9d5b13a6":"code","659dec1e":"code","5543eff0":"code","2be8d8bb":"code","f6752da6":"code","8078ed38":"code","ed432b46":"code","a0561791":"code","c2712493":"code","1a265339":"code","3e0ab407":"code","43c2631d":"code","90b05508":"code","31e4e552":"code","c2862b2a":"markdown","7cb533d7":"markdown"},"source":{"436ac60b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","764cc4f2":"data17 = pd.read_csv(\"..\/input\/2017.csv\") \ndata15 = pd.read_csv(\"..\/input\/2015.csv\")\ndata16 = pd.read_csv(\"..\/input\/2016.csv\")","db29a1b3":"data17.columns \ndata15.columns\ndata16.columns\n","7fdafbcb":"data17.info()","8aaec877":"data17.describe()","1623d54f":"data17.head(10) ","dcbb1bb7":"data17.tail(10) ","e6b35ee7":"\ndata17.corr() ","aaf1414d":"f,ax = plt.subplots(figsize = (15,15)) \nsns.heatmap(data17.corr(),annot = True, linewidths = 5, fmt = \".2f\", ax = ax)\nplt.title(\"Heat Map\")\nplt.show()\n","53d22184":"dataa = data17.drop(\"Happiness.Rank\", axis = 1) \ndataa.plot(figsize = (14,9), kind =\"line\", linewidth = 1, label = \"Plot Line\")\nplt.legend()\nplt.show()","5f6cb131":"data17[\"Happiness.Score\"].plot(figsize = (14,9), kind=\"line\", color = \"r\", alpha = 0.5, linewidth = 1,label = \"Happiness score\")\ndata17[\"Family\"].plot (color =\"green\", alpha = 0.6, linewidth = 1, label = \"Family\")\nplt.xlabel(\"Rank\")\nplt.gca().invert_xaxis() # For reverse to x-axis\nplt.ylabel(\"Happiness\")\nplt.legend(loc = \"upper left\")\nplt.title(\"Line Plot\")\nplt.show()","e09e95d5":"data17.plot(figsize = (12,7),kind = \"scatter\", x = \"Happiness.Score\", y = \"Family\", alpha = 0.5, linewidth = 1, color = \"g\",label = \"Happiness vs Family\")\nplt.legend(loc =\"upper left\")\nplt.xlabel(\"Happiness Score\")\nplt.ylabel(\"Family\")\nplt.title(\"Scatter Plot\")\nplt.show()","c2970ff7":"data17[\"Happiness.Score\"].plot(kind = \"hist\", bins = 15, figsize = (10,10), label = \"Happiness score distribution\", range = (0,7), normed = True)\nplt.xlabel(\"Happiness Score\",FontSize = 20)\nplt.ylabel(\"Frequency\",FontSize = 20)\nplt.legend()\nplt.show()","a0d8767e":"\ndata17[\"Happiness.Score\"].plot(kind = \"line\", color = \"blue\", linewidth = 2,figsize = (10,8), label = \"2017\")\ndata16[\"Happiness Score\"].plot(kind = \"line\", color = \"green\", linewidth = 2,figsize = (10,8), label = \"2016\")\ndata15[\"Happiness Score\"].plot(kind = \"line\", color = \"red\", linewidth = 2,figsize = (10,8),label = \"2015\")\nplt.title(\"2017 Happiness vs 2016 Happiness\", FontSize = 15)\nplt.legend()\nplt.show()","10f403a0":"dicti = { \"Turkey\"  : \"Unhappy\", \"Germany\" : \"Unhappy\"}\nprint(dicti.keys())\nprint(dicti.values())","361aac8a":"dicti[\"India\"] = \"Happy\" #Add\ndicti[\"Turkey\"] = \"Happy\" # Update\ndel(dicti[\"India\"]) #delete specific entry\nprint(\"Turkey\" in dicti) #check include or not\nprint(dicti)\ndicti.clear() #Clear all data from dicti\nprint(dicti)","f3ca37bf":"x = data17[\"Happiness.Score\"] > 7\ndata17[x]","6aab0f14":"data17[(data17[\"Happiness.Score\"]> 7) & (data17[\"Generosity\"] < 0.3)] ## datas which are Happiness score's more than 7 and Generosity's smaller than 0.3","5610c8ec":"data17[np.logical_and(data17[\"Happiness.Score\"]> 7 , data17[\"Generosity\"] < 0.3)]","073d4a1b":"liste = [1,2,3,4,5]\nfor index,value in enumerate(liste):\n    print(\"Index: \", index)\n    print(\"Value: \", value)\n    \n    \nfor key,items in dicti.items():\n    print(\"Key: \", key)\n    print(\"Value: \", items)\n    \nfor index,value in data17[[\"Happiness.Score\",\"Country\"]].iterrows():\n    print(\"Index: \", index)\n    print(\"Score: \", value)\n    \n    ","1ba894c6":"#Tuple\ndef tuple_ex():\n    t = [1,2,3,5]\n    return t\n\nx = tuple_ex()\nprint(x)\n","071914d5":"x = 10\ndef xev():\n    x = 3\n    return x\nprint(x)\nprint(xev())\n\n","0df1db0a":"import builtins\ndir(builtins)","0ce22c26":"def squr():\n    def summo():\n        x = 10\n        y = 2\n        z = 3\n        return x+y+z\n    return summo()**2\n\nprint(squr())","b151ac94":"def func(x,y =1,z =3):\n    return x+y+z\nfunc(2,3)","234fc827":"def func(*args):\n    x = sum(args)\n    return x\nfunc(2,4)\n\ndef func2(**kwargs):\n    for key,values in kwargs.items():\n        print(key, \": \", values)\n        \n\nfunc2(count = \"2\", b= \"12\" ,c = 3)        ","f6e6e23e":"#lambda\ndivide = lambda x: x\/2\ndivide(20)","ceaaef75":"lis = [1,23,4,5]\n\ny = map(lambda x:x**2,lis)\nprint(list(lis))","1d30bc93":"name = \"sansal\"\nitera = iter(name)\nnext(itera)\nnext(itera)\nnext(itera)\nprint(next(itera))\nprint(*itera)","a075d612":"list1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","e1d0db75":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","5b79aeca":"liste1 = [1,2,3,4]\nliste2 = [i**2 for i in liste1]\nliste3 = [i+2 if i < 2 else i+3 if i == 2 else i -1 for i in liste1]\nliste3","ba47f07c":" meanof = np.mean(data17[\"Happiness.Score\"]) ## Creating new column on to my dataframe for separate countries to happy or unhappy\ndata17[\"Happy_Or_Not\"] = [\"Happy\" if each > meanof  else \"Unhappy\" for each in data17[\"Happiness.Score\"]]\n meanof6 = np.mean(data16[\"Happiness Score\"])\ndata16[\"Happy_Or_Not\"] = [\"Happy\" if each > meanof6  else \"Unhappy\" for each in data16[\"Happiness Score\"]]\n meanof5 = np.mean(data15[\"Happiness Score\"])\ndata15[\"Happy_Or_Not\"] = [\"Happy\" if each > meanof5  else \"Unhappy\" for each in data15[\"Happiness Score\"]]\ndata17.loc[:,[\"Country\", \"Happiness.Score\", \"Happy_Or_Not\"]]\n\n","048bfab0":"data17[\"Country\"].value_counts(dropna = False)","c2a3311e":"data17.boxplot(column = \"Happiness.Score\",by = \"Happy_Or_Not\")\nplt.show()","461bb8a6":"meltme = data17.head(10)","3a00c6e3":"melted = pd.melt(frame= meltme, id_vars = \"Country\", value_vars = [\"Happy_Or_Not\",\"Family\"])\nmelted","1cb0d832":"melted.pivot(index = \"Country\", columns = \"variable\", values = \"value\")","d6192ec8":"cdata17 = data17[\"Happiness.Score\"].head()\ncdata16 = data17[\"Happy_Or_Not\"].head()\ndatavert = pd.concat([cdata16,cdata17], axis = 1)\ndatavert","8289906a":"cdata17 = data17.head()\ncdata16 = data17.tail()\ndatavert = pd.concat([cdata16,cdata17], axis = 0, ignore_index = True)\ndatavert","cec70031":"data17.dtypes","222e7ec3":"data17[\"Happiness.Score\"] = data17[\"Happiness.Score\"].astype(\"int\")\ndata17.dtypes\n#data17[\"Happiness.Score\"]","8aeed4f8":"data15.info()","ad4e8fdf":"dataaa = data17\ndata17[\"Happy_Or_Not\"].dropna(inplace = True)","0fdd9385":"assert data17[\"Happy_Or_Not\"].notnull().all()","6dee3cc2":"data17[\"Happy_Or_Not\"].fillna(\"empty\", inplace = True)","64901346":"assert data17[\"Happy_Or_Not\"].notnull().all()","813613ca":"assert data17.columns[0] == \"Country\"\nassert data17[\"Family\"].dtype == \"float64\"\n","8f7e5887":"country = [\"turkey\", \"spain\"]\ncity = [\"Istanbul\", \"Madrid\"]\nlistlabel = [\"country\", \"city\"]\nlistcol = [country, city]\nzipped = list(zip(listlabel,listcol))\n\ndf = pd.DataFrame(dict(zipped))\ndf\n\n","f4366b90":"df[\"population\"] = [10,12]\ndf\n","c58c2986":"df[\"income\"] = 1\ndf","8af71770":"data1 = data17.loc[:,:]\ndata1.plot()","403e957f":"data1.plot(subplots = True)\nplt.show()","150c76ec":"data17[\"Happiness.Score\"].plot(kind = \"hist\", bins = 15, figsize = (10,10), label = \"Happiness score distribution\", range = (0,7), normed = True, cumulative = True)\nplt.xlabel(\"Happiness Score\",FontSize = 20)\nplt.ylabel(\"Frequency\",FontSize = 20)\nplt.legend()\nplt.show()","825c6f22":"datestr = [\"1997-09-29\"]\nprint(type(datestr[0]))\ndatetime_object = pd.to_datetime(datestr)\nprint(type(datetime_object))","49f0caca":"data17.head()\ndata2 = data17.head()\ntimese = [\"1997-09-29\",\"1997-09-23\",\"1997-10-29\",\"1987-09-29\",\"1997-02-19\"]\ndatee = pd.to_datetime(timese)\ndata2[\"date\"] = datee\n\ndata2 = data2.set_index(\"date\")\ndata2","dabcc1ee":"data2.loc[\"1997-09-29\"]\ndata2.loc[\"1987-09-29\":\"1997-09-29\"]\ndata2","ac6257a8":"data2.resample(\"A\").mean().interpolate(\"linear\")","0def5893":"data17[\"#\"] = [i+1 for i in data17.index]\ndata17\ndata17 = data17.set_index([\"#\"])","9d5b13a6":"\n#data17[\"Happiness.Score\"][1]\ndata17","659dec1e":"data17.loc[1,[\"Happiness.Score\"]]","5543eff0":"data17.Family[1]","2be8d8bb":"data17[[\"Happiness.Rank\", \"Happiness.Score\"]]","f6752da6":"data17.loc[1:10,\"Happiness.Rank\":\"Family\"]","8078ed38":"data17.loc[10:1:-1,\"Happiness.Rank\":\"Family\"]","ed432b46":"data17.loc[1:10,\"Happiness.Rank\":]","a0561791":"boolean = data17[\"Happiness.Score\"] > 7\nboolean2 = data17[\"Freedom\"] < 0.6\ndata17[boolean & boolean2]","c2712493":"data17.Family[data17[\"Happiness.Score\"] > 7]","1a265339":"def sqr(n):\n    return n**2\ndata5 = data17.Family.apply(sqr)","3e0ab407":"data5","43c2631d":"data17[\"Happiness.Rank\"].apply(lambda n : n*10)\n","90b05508":"data17[\"Happinessproportion\"] = data17[\"Happiness.Rank\"] + data17[\"Happiness.Score\"]\ndata17","31e4e552":"data17","c2862b2a":"Separation of happy and unhappy countries","7cb533d7":" Less Generosity but more Happiness Data"}}