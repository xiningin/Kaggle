{"cell_type":{"ba4f472b":"code","824cac0e":"code","d001afdc":"code","9d761762":"code","14b65487":"code","cde5d97f":"code","61199dd2":"code","6dec2dfa":"code","7352586a":"code","bd1df67d":"code","b66845ea":"code","c1a06033":"code","c5121be8":"code","4d4b5df8":"code","e72ec390":"code","96d8ac55":"code","99a81fdc":"code","333860c5":"code","728b1ece":"code","90a100d0":"code","c0a0401e":"code","c49f50d4":"code","a2528fd8":"code","d6f1059a":"code","97ff1e28":"code","b053015e":"code","3bf64674":"code","98fa3f1b":"markdown","7c40ee79":"markdown","8d7d1425":"markdown"},"source":{"ba4f472b":"import shutil\nimport os\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg","824cac0e":"# Directory \ndirectory = \"\/kaggle\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/\" \n\noutput = \"\/kaggle\/working\/\"+'data\/'\n","d001afdc":"def list_files(startpath):\n    for root, dirs, files in os.walk(startpath):\n        level = root.replace(startpath, '').count(os.sep)\n        indent = ' ' * 4 * (level)\n        print('{}{}\/'.format(indent, os.path.basename(root)))\n        subindent = ' ' * 4 * (level + 1)\n#         for f in files:\n#             print('{}{}'.format(subindent, f))\n","9d761762":"print(\"Directory structure of Dataset : \")\nlist_files(\"\/kaggle\/input\/\")","14b65487":"print(\"Xray image of Normal person\")\nimg=mpimg.imread(directory+'train\/IM-0343-0001.jpeg')\nimgplot = plt.imshow(img)\nplt.show()\nprint(\"Xray image of infected person\")\nimg=mpimg.imread(directory+'train\/person1019_virus_1708.jpeg')\nimgplot = plt.imshow(img)\nplt.show()","cde5d97f":"import pandas as pd\nfilename = \"..\/input\/coronahack-chest-xraydataset\/Chest_xray_Corona_Metadata.csv\"\ndf = pd.read_csv(filename)\ndf.head()\n","61199dd2":"# Filtering images belonging to Training set and test set\n\ntrain = df[df['Dataset_type']=='TRAIN' ] \ntest = df[df['Dataset_type']=='TEST'] \n","6dec2dfa":"# Creating folders to store images saperately\ntry:\n    os.mkdir(output)\n\n    os.mkdir(output+'\/train')\n    os.mkdir(output+'\/test')\n\n    os.mkdir(output+'train\/Normal')\n    os.mkdir(output+'train\/Pnemonia')\n\n    os.mkdir(output+'test\/Normal')\n    os.mkdir(output+'test\/Pnemonia')\nexcept Exception as e :\n    print(e)","7352586a":"print(\"Directory structure of Custom output : \")\nlist_files(output)","bd1df67d":"# Saperating data into 4 different categories \n\ntrainNormal = train[train['Label']==\"Normal\"]\ntrainPne = train[train['Label']==\"Pnemonia\"]\n\ntestNormal = test[test['Label']==\"Normal\"]\ntestPne = test[test['Label']==\"Pnemonia\"]","b66845ea":"print(\"Training Normal samples : \", trainNormal.shape)\nprint(\"Training Pnemonia samples : \", trainPne.shape)\nprint(\"Test Normal samples : \", testNormal.shape)\nprint(\"Test Pnemonia samples : \", testPne.shape)","c1a06033":"\nfor index,row in testPne.iterrows():\n    dest = output+'test\/'+'Pnemonia\/'+row['X_ray_image_name']\n    src = directory+'test\/'+row['X_ray_image_name']\n    shutil.copyfile(src, dest)\n","c5121be8":"\nfor index,row in testNormal.iterrows():\n    dest = output+'test\/'+'Normal\/'+row['X_ray_image_name']\n    src = directory+'test\/'+row['X_ray_image_name']\n    shutil.copyfile(src, dest)\n","4d4b5df8":"\nfor index,row in trainNormal.iterrows():\n    dest = output+'train\/'+'Normal\/'+row['X_ray_image_name']\n    src = directory+'train\/'+row['X_ray_image_name']\n    shutil.copyfile(src, dest)\n","e72ec390":"\nfor index,row in trainPne.iterrows():\n    dest = output+'train\/'+'Pnemonia\/'+row['X_ray_image_name']\n    src = directory+'train\/'+row['X_ray_image_name']\n    shutil.copyfile(src, dest)\n","96d8ac55":"from keras.preprocessing.image import ImageDataGenerator","99a81fdc":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                    rotation_range=40,\n                                    width_shift_range=0.2,\n                                    height_shift_range=0.2,\n                                    shear_range=0.2,\n                                    zoom_range=0.2,\n                                    horizontal_flip=True,\n                                    fill_mode='nearest'\n                                  )\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","333860c5":"train_dir=output+'train'\ntest_dir=output+'test'","728b1ece":"\n\n# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)\n\n","90a100d0":"BATCH_SIZE = 16 * strategy.num_replicas_in_sync # this is 8 on TPU v3-8, it is 1 on CPU and GPU\n\ntrain_gen = train_datagen.flow_from_directory(train_dir,\n                                             target_size=(150, 150),\n                                             batch_size=BATCH_SIZE,\n                                             class_mode='binary'\n                                             )\ntest_gen = test_datagen.flow_from_directory(test_dir,\n                                             target_size=(150, 150),\n                                             batch_size=BATCH_SIZE,\n                                             class_mode='binary'\n                                             )","c0a0401e":"from keras import layers\nfrom keras import models\nfrom keras import optimizers","c49f50d4":"\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu',input_shape=(150, 150, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(512, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=optimizers.RMSprop(lr=1e-4),\n              metrics=['acc'\n                      ])\n\n","a2528fd8":"model.summary()","d6f1059a":"\n\nhistory = model.fit_generator(\n    train_gen,\n    steps_per_epoch=260,\n    epochs=20,\n    validation_data=test_gen,\n    validation_steps=30)","97ff1e28":"try:\n    os.mkdir('\/kaggle\/working\/model')\n    model.save('\/kaggle\/working\/model\/P.h5')\nexcept Exception as e:\n    os.mkdir('\/kaggle\/working\/model')\n    print(e)","b053015e":"import matplotlib.pyplot as plt\nacc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","3bf64674":"from keras.models import load_model\nmodel = load_model('\/kaggle\/working\/model\/P.h5')\nmodel.summary() ","98fa3f1b":"### copying images to respective folders","7c40ee79":"### Metadata\nadditional details of each x-ray is defined in Chest_xray_Corona_Metadata.csv file.\n\nIt contains labels of Normal\/Pnemonia, Train\/Test and high order cause for Pnemonia.\n\nWe need to saperate all images in 4 different directory as\n<pre>\ntrain\/\n    Normal\/\n    Pnemonia\/\ntest\/\n    Normal\/\n    Pnemonia\/\n<\/pre>","8d7d1425":"# Detecting Pnemonia using Xray images [Keras] \n\nThis is a CNN model for binary classification of x-ray images using Keras. It detects if a person is having Pnemonia or not. \n\nThis model is ideally for beginners who are getting started with CNN, Keras. Experienced data scientist can also help im improving the accurac of model and extend its usability to multiclass classification.\n\n\nThis model is trained over [ dataset ](https:\/\/www.kaggle.com\/praveengovi\/coronahack-chest-xraydataset) provided by [Praveen](https:\/\/www.kaggle.com\/praveengovi) which contains collection of Chest X Ray of Healthy vs Pneumonia (Corona) affected patients infected patients along with few other categories such as SARS (Severe Acute Respiratory Syndrome ) ,Streptococcus & ARDS (Acute Respiratory Distress Syndrome)\n\nDistribution of no of images belonging to different category are as follow:\n![distribution of no of images belonging to different category](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F378285%2Fcfdeda929ebe5e6254590538601c0ef6%2FChest_XRay_dataset_labels.png?generation=1584770009221937&alt=media)\n"}}