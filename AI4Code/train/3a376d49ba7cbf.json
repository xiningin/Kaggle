{"cell_type":{"23373c69":"code","d4f4cadf":"code","52675eef":"code","829afcde":"code","b1701057":"code","fd21c57e":"code","0c4fda39":"code","33a9f371":"code","2dfa6ef2":"code","827c971a":"code","cada0062":"code","37412663":"code","ea926c3e":"code","dae5eb6c":"code","3852999f":"code","b48e382c":"code","187d722d":"code","ac2e2a6f":"code","22cfbd18":"code","ced9d6b3":"code","9c03bc7f":"code","832578bb":"code","f68b0c1b":"code","86585fc6":"code","2bc2eefe":"code","7f3a7663":"code","a5c939cb":"code","5904cf23":"code","e8c587d5":"code","9d21f2a1":"code","58747240":"code","c4d40be6":"code","f25a482e":"code","97015087":"code","8a87d28e":"code","f1a1a75e":"code","e3846034":"code","84a9e37a":"code","ac4c32f2":"code","a874571d":"code","254522a6":"code","8df27bdc":"code","6c900be6":"code","130c5915":"code","d660b11e":"code","14bd9eca":"code","260681a6":"code","165461c9":"code","f6b4c1bd":"code","f1bcfa81":"code","37b15965":"code","0b1ef5aa":"code","0407f75d":"code","b1cb5df5":"markdown","61adf585":"markdown","6ef8c1ec":"markdown","72c0aade":"markdown","fcf0d99f":"markdown","63bc6f75":"markdown","383da66c":"markdown","cf1a99eb":"markdown","eaf65bdb":"markdown","431970fb":"markdown","e7c88967":"markdown","ab05e7a4":"markdown","086ba8c8":"markdown","7b274684":"markdown","c3ba0680":"markdown","4d9ccfa2":"markdown","0f254f6f":"markdown","4104adc3":"markdown","7dbaf625":"markdown","97a046a7":"markdown","690ed99e":"markdown","cb8bff23":"markdown","45a241bf":"markdown","cac8378b":"markdown","e942ce5a":"markdown","9d56cd16":"markdown","257bba44":"markdown","a4ef839f":"markdown","24514164":"markdown","fddad812":"markdown","b31407c2":"markdown","69891fce":"markdown","506825c6":"markdown","b8b63af4":"markdown"},"source":{"23373c69":"# Loading Important Libraries\nimport pandas as pd # To work with data\nimport numpy as np # Stats and Fast array computations\nimport seaborn as sns # fot Visualization\nimport matplotlib.pyplot as plt # For Visualization\n%matplotlib inline ","d4f4cadf":"deliveries = pd.read_csv(\"\/kaggle\/input\/ipl\/deliveries.csv\") # Loading .csv File","52675eef":"deliveries.columns","829afcde":"deliveries.isnull().sum()","b1701057":"deliveries.shape","fd21c57e":"deliveries.player_dismissed.value_counts().head()","0c4fda39":"fig,ax = plt.subplots(1,figsize=(8,5))\nsns.barplot(deliveries.player_dismissed.value_counts().head(10),deliveries.player_dismissed.value_counts().head(10).index,ax = ax)","33a9f371":"deliveries.drop(columns=['player_dismissed','dismissal_kind',\"fielder\"],inplace=True)","2dfa6ef2":"deliveries.isnull().sum()","827c971a":"fig,ax = plt.subplots(1,figsize=(8,6))\nsns.barplot(deliveries.groupby(by='batting_team').total_runs.sum().sort_values(ascending=False),deliveries.groupby(by='batting_team').total_runs.sum().sort_values(ascending=False).index,ax=ax)","cada0062":"fig,ax = plt.subplots(1,figsize=(8,6))\nsns.barplot(deliveries.groupby(by='over').total_runs.sum().sort_values(ascending=False).index,deliveries.groupby(by='over').total_runs.sum().sort_values(ascending=False),ax=ax)","37412663":"df1 = pd.pivot_table(deliveries,values='total_runs',index='over',columns='batting_team',aggfunc='sum')\n\nfig,ax = plt.subplots(14,figsize=(10,50))\nfor i in range(14):\n    df1.iloc[:,i].plot(ax=ax[i],kind='bar',legend=True)\ndel df1","ea926c3e":"df2 = pd.pivot_table(deliveries,values='batsman_runs',index='over',columns='batsman',aggfunc='sum').fillna(0)\n\nfig,ax = plt.subplots(2,figsize=(10,10))\ndf2.loc[:,'MS Dhoni'].plot(kind='bar',legend=True,ax=ax[0])\ndf2.loc[:,'V Kohli'].plot(kind='bar',legend=True,ax=ax[1])\n\ndel df2","dae5eb6c":"matches = pd.read_csv(\"\/kaggle\/input\/ipl\/matches.csv\")","3852999f":"matches.columns","b48e382c":"matches.isnull().sum()","187d722d":"matches.shape","ac2e2a6f":"matches.drop('umpire3',axis=1,inplace=True)\nmatches.dropna(inplace=True)","22cfbd18":"len(matches.city.unique())","ced9d6b3":"fig,ax = plt.subplots(1,figsize = (10,6))\nsns.countplot(matches.season, ax = ax)","9c03bc7f":"fig,ax = plt.subplots(1,figsize = (6,4))\nsns.countplot(matches.winner,ax=ax)\nplt.xticks(rotation=90)","832578bb":"fig,ax = plt.subplots(1,figsize = (6,4))\nsns.countplot(matches.toss_winner,ax=ax)\nplt.xticks(rotation=90)","f68b0c1b":"matches['is_toss_equal_match'] = matches.toss_winner==matches.winner\n\nmatches.is_toss_equal_match = matches.is_toss_equal_match.map({True:'Yes',False:'No'})\n\nsns.countplot(matches.is_toss_equal_match)\n\nmatches.drop('is_toss_equal_match',axis=1,inplace=True)","86585fc6":"sns.barplot(matches.city.value_counts().head(10).index,matches.city.value_counts().head(10).values)\nplt.xticks(rotation=90)","2bc2eefe":"sns.barplot(matches.venue.value_counts().head(10).index,matches.venue.value_counts().head(10).values)\nplt.xticks(rotation=90)","7f3a7663":"batsman_score = deliveries.groupby(by='batsman').total_runs.sum().sort_values(ascending=False)\n\nsns.barplot(batsman_score.head(10).index,batsman_score.head(10).values)\nplt.xticks(rotation=90)\n\ndel batsman_score","a5c939cb":"new_df = deliveries.merge(matches.set_index('id').season,how ='left', left_on='match_id', right_on ='id')\n\nnew_df = new_df.groupby(by=['season','batsman']).total_runs.sum()\n\nseasons_list = list(new_df.index.get_level_values(0).unique().astype(int))\n\nseason_wise_most_score = {2008:0, 2009:0, 2010:0, 2011:0, 2012:0, 2013:0, 2014:0, 2015:0, 2016:0, 2017:0}\nseason_wise_most_scorer = {2008:'', 2009:'', 2010:'', 2011:'', 2012:'', 2013:'', 2014:'', 2015:'', 2016:'', 2017:''}\n\nfor i in seasons_list:\n    season_wise_most_score[i] = new_df.loc[i].sort_values(ascending=False)[0]\n    season_wise_most_scorer[i] = new_df.loc[i].sort_values(ascending=False).index[0]\n\nseason_wise_most_score = pd.Series(season_wise_most_score)\nseason_wise_most_scorer = pd.Series(season_wise_most_scorer)\n\ndel seasons_list,new_df\n\nseason_most_scorer = pd.DataFrame(dict(batsman = season_wise_most_scorer, score = season_wise_most_score))\n\ndel season_wise_most_scorer,season_wise_most_score","5904cf23":"season_most_scorer","e8c587d5":"sns.barplot(season_most_scorer.index , season_most_scorer.score ,hue = season_most_scorer.batsman)","9d21f2a1":"wide_bowl = deliveries.groupby('bowler').wide_runs.sum().sort_values(ascending=False).head(10)\n\nsns.barplot(wide_bowl.index,wide_bowl.values)\nplt.xticks(rotation=90)\ndel wide_bowl","58747240":"no_bowl = deliveries.groupby('bowler').noball_runs.sum().sort_values(ascending=False).head(10)\n\nsns.barplot(no_bowl.index,no_bowl.values)\nplt.xticks(rotation=90)\ndel no_bowl","c4d40be6":"runs_by_bowler = deliveries.groupby('bowler').total_runs.sum().sort_values(ascending=False).head(10)\n\nsns.barplot(runs_by_bowler.index,runs_by_bowler.values)\nplt.xticks(rotation=90)\ndel runs_by_bowler","f25a482e":"new_df = deliveries.merge(matches.set_index('id').season,how ='left', left_on='match_id', right_on ='id')\n\nnew_df = new_df.groupby(by=['season','bowler']).total_runs.sum()\n\nseasons_list = list(new_df.index.get_level_values(0).unique().astype(int))\n\nseason_wise_most_score = {2008:0, 2009:0, 2010:0, 2011:0, 2012:0, 2013:0, 2014:0, 2015:0, 2016:0, 2017:0}\nseason_wise_most_scorer = {2008:'', 2009:'', 2010:'', 2011:'', 2012:'', 2013:'', 2014:'', 2015:'', 2016:'', 2017:''}\n\nfor i in seasons_list:\n    season_wise_most_score[i] = new_df.loc[i].sort_values(ascending=False)[0]\n    season_wise_most_scorer[i] = new_df.loc[i].sort_values(ascending=False).index[0]\n\nseason_wise_most_score = pd.Series(season_wise_most_score)\nseason_wise_most_scorer = pd.Series(season_wise_most_scorer)\n\ndel seasons_list,new_df\n\nseason_most_scorer = pd.DataFrame(dict(bowler = season_wise_most_scorer, score = season_wise_most_score))\n\ndel season_wise_most_scorer,season_wise_most_score","97015087":"season_most_scorer","8a87d28e":"sns.barplot(season_most_scorer.index , season_most_scorer.score ,hue = season_most_scorer.bowler)","f1a1a75e":"extra_runs_by_teams = deliveries.groupby(by='bowling_team').extra_runs.sum().sort_values(ascending=False).head(10)\n\nsns.barplot(extra_runs_by_teams.index,extra_runs_by_teams.values)\nplt.xticks(rotation=90)\ndel extra_runs_by_teams","e3846034":"new_df = deliveries.merge(matches.set_index('id').season,how ='left', left_on='match_id', right_on ='id')","84a9e37a":"new_df.columns","ac4c32f2":"dhoni = new_df[new_df['batsman'] == 'MS Dhoni'].groupby(by = 'season').batsman_runs.sum()\nkohli = new_df[new_df['batsman'] == 'V Kohli'].groupby(by = 'season').batsman_runs.sum()\n\ndhoni_kohli_season = pd.DataFrame(dhoni.values,index=dhoni.index,columns=['Dhoni'])\ndhoni_kohli_season['Kohli'] = kohli\n\ndel dhoni,kohli\n\ndhoni_kohli_season.plot(kind='bar')","a874571d":"temp = new_df[(new_df.batsman_runs==4 ) | (new_df.batsman_runs==6)].groupby(by='batting_team').total_runs.count().sort_values(ascending=False)\n\nsns.barplot(temp.index,temp.values)\nplt.xticks(rotation=90)","254522a6":"temp = new_df[(new_df.batsman_runs==4 ) | (new_df.batsman_runs==6)].groupby(by='batsman').batsman_runs.count().sort_values(ascending=False).head(10)\n\nsns.barplot(temp.index,temp.values)\nplt.xticks(rotation=90)","8df27bdc":"temp = new_df[(new_df.batsman_runs==4 ) | (new_df.batsman_runs==6)].groupby(by='bowling_team').total_runs.count().sort_values(ascending=False).head(10)\n\nsns.barplot(temp.index,temp.values)\nplt.xticks(rotation=90)\n","6c900be6":"temp = []\nfor season,data in new_df.groupby(by='season'):\n    temp.append((season,data.match_id.unique()[-1]))","130c5915":"matches.team1.unique()","d660b11e":"qualify = {'Sunrisers Hyderabad':0, 'Mumbai Indians':0, 'Gujarat Lions':0,\n           'Royal Challengers Bangalore':0,\n       'Kolkata Knight Riders':0, 'Delhi Daredevils':0, 'Kings XI Punjab':0,\n       'Chennai Super Kings':0, 'Rajasthan Royals':0, 'Deccan Chargers':0,\n       'Kochi Tuskers Kerala':0, 'Pune Warriors':0, 'Rising Pune Supergiants':0,'Rising Pune Supergiant':0}\nwins = {'Sunrisers Hyderabad':0, 'Mumbai Indians':0, 'Gujarat Lions':0,\n       'Royal Challengers Bangalore':0,\n       'Kolkata Knight Riders':0, 'Delhi Daredevils':0, 'Kings XI Punjab':0,\n       'Chennai Super Kings':0, 'Rajasthan Royals':0, 'Deccan Chargers':0,\n       'Kochi Tuskers Kerala':0, 'Pune Warriors':0, 'Rising Pune Supergiants':0,'Rising Pune Supergiant':0}","14bd9eca":"for tup in temp:\n    season = tup[0]\n    match = tup[1]\n    qualify[matches[(matches.season==season) & (matches.id == match)].team1.values[0]]+=1\n    qualify[matches[(matches.season==season) & (matches.id == match)].team2.values[0]]+=1\n    wins[matches[(matches.season==season) & (matches.id == match)].winner.values[0]]+=1","260681a6":"plt.subplot(1,2,1)\nsns.barplot(list(qualify.keys()),list(qualify.values()))\nplt.xticks(rotation=90)\nplt.title('Qualifiers')\nplt.subplot(1,2,2)\nsns.barplot(list(wins.keys()),list(wins.values()))\nplt.xticks(rotation=90)\nplt.title('Winners')","165461c9":"qualify = pd.Series(qualify)\nqualify[qualify==0]","f6b4c1bd":"wins = pd.Series(wins)\n\nwins[wins==0]","f1bcfa81":"new_df = deliveries.merge(matches[['id','umpire1','umpire2']],how='left',left_on='match_id',right_on='id')\n\ntemp = new_df.groupby(by='umpire1').noball_runs.sum().sort_values(ascending=False).head(10)\nsns.barplot(temp.index,temp.values)\nplt.xticks(rotation=90)\nplt.title('Most No Balls by umpire1')","37b15965":"new_df = deliveries.merge(matches[['id','umpire1','umpire2']],how='left',left_on='match_id',right_on='id')\n\ntemp = new_df.groupby(by='umpire2').noball_runs.sum().sort_values(ascending=False).head(10)\nsns.barplot(temp.index,temp.values)\nplt.xticks(rotation=90)\nplt.title('Most No Balls by umpire2')","0b1ef5aa":"man_of_the_match = matches.player_of_match.value_counts().head(10)\n\nsns.barplot(man_of_the_match.index,man_of_the_match.values)\nplt.xticks(rotation=90)","0407f75d":"new_df = deliveries.merge(matches,how='left',left_on='match_id',right_on='id')\npivot = pd.pivot_table(data=new_df,values='total_runs',index='batting_team',columns='city',aggfunc='sum').fillna(0)\n\nfig,ax = plt.subplots(30,figsize=(5,100))\nflag=0\nfor i in matches.city.unique():\n    data = pivot.loc[:,i].sort_values(ascending=False)\n    sns.barplot(data,data.index,ax=ax[flag])\n    flag+=1","b1cb5df5":"### Yes, our graph was right. Every team seems to follow the same pattern where they tend to slow down there pace on the 7th over and then again pick it up from there.","61adf585":"#### One more interesting observation could be, if we can get any pattern of how teams play thoughout the overs.","6ef8c1ec":"#### How many individual matches the teams have won..?","72c0aade":"#### So, sir M.S. Dhoni is indeed a great finisher. And as it seems, Virat kohli doesn't play very well in starting or ending overs.","fcf0d99f":"### how many toss winnings per team..?","63bc6f75":"#### Most man of the match title winner players.","383da66c":"#### The first question that i have in mind, 'Which team has scored highest runs through ipl?\" Let's see...","cf1a99eb":"#### Let's do the same for no bowls.","eaf65bdb":"#### Agagin, let's see which teams have highest bouneries against them.","431970fb":"### three columns have high null value counts. Before dropping them, let's see if we can get anything.","e7c88967":"#### Umpire3 column has all the null values. better drop this one.","ab05e7a4":"#### This might not be very trustworthy graph as it is combining all the teams. And it is not sure that every team follows the same pattern or not. O, let's see this for every team.","086ba8c8":"### One more interesting thought in my mind right now is about MS DHoni and Virat kohli. These are two superstar players of indin cricket team. Let's see and compare their batting pattern.","7b274684":"#### One more interesting question is to know wether perticuler city favors a perticuler team? Or, do teams perform better on their home grounds?","c3ba0680":"#### Well, when we think about bounderies we think more about the batsman then the team. So, let's do that.","4d9ccfa2":"### Stadiums with highest number of matches played.","0f254f6f":"#### Many of us are also intertested in seeing batsman with most runs each season. So, let's do that.","4104adc3":"### It seems that most of our analysis so far is based on batsmen performances. Let's go beyond this and see what we find.\n#### If We think about bowlers, let's see which bowler has highest number of wide bowls.","7dbaf625":"### Now we're gonna drop coluns containing high number of null values.","97a046a7":"### One more interesting insight could be to get details about how many time a team has got into finals and how many times it has won it.","690ed99e":"#### Well, there is a slight correlation but it can't be considered so significant.","cb8bff23":"### Now that we have a new dataframe with seasons and deliveries combined. Let's see how our superstars have performed throughout the seasons.","45a241bf":"#### Let's see teams who've lukily got most extra runs.","cac8378b":"#### One interesting thing could be to get the batsman whoo has scored maximum overall runs in ipl.","e942ce5a":"#### How many matches have we played per season ?","9d56cd16":"### Let's see which city has hosted most ipl matches.","257bba44":"#### Let's bring in our second dataset.","a4ef839f":"### Now that we have no null values, let's go ahead with it.","24514164":"#### Let's see which bowler has given most overall runs to the opposition team.","fddad812":"#### Let's see which team has most bounderies.","b31407c2":"#### As it looks, some of them could never qualify for the finals. And some of them have never won it.","69891fce":"##### Let's see teams who have nver qualified and have never won it.","506825c6":"#### We can get most runs giving bowler per season as ell, just as we did with batsmans. Let's do that.","b8b63af4":"#### So, is winng a toss mean winng the match ?"}}