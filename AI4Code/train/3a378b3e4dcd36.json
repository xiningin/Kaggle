{"cell_type":{"3f71153a":"code","186173b1":"code","7464272d":"code","2bdb1b6e":"code","65e452ff":"code","fe54781a":"code","a1869426":"code","e850181b":"code","825e301c":"code","3aef0e70":"code","0db0fb63":"code","7e8a29f9":"code","2a105029":"code","396d7505":"code","00d58f7e":"code","9f2e7a71":"code","d8bc91c2":"code","30fd1eb2":"code","abb2775d":"code","57a454de":"code","ccd839e9":"code","fa3363bd":"code","03f01300":"code","987216f1":"code","8cfae19a":"code","b14c87ef":"code","3e26f270":"code","8b9fe757":"markdown","1b2d152b":"markdown","353a8ee3":"markdown","2ff00880":"markdown","4d99082d":"markdown","7f2654d1":"markdown","e874584c":"markdown","f3e5a51e":"markdown","f27040cc":"markdown","ee278678":"markdown","30cd2e5d":"markdown","575d4920":"markdown"},"source":{"3f71153a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","186173b1":"# Read the data_file and print some records\ndf = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\ndf.head(20)","7464272d":"# Dataframe info\nprint(df.info())\n","2bdb1b6e":"# Get columns\nprint(df.columns)\n","65e452ff":"# Null value count\ndf.isnull().sum()","fe54781a":"# TV shows and movies distribution\nimport matplotlib.pyplot as plt\n\nshows_count=df[\"type\"].value_counts().sort_index()\n#shows_count\n#add colors\ncolors = ['#66b3ff','#ffcc99']\nplt.figure(figsize = (10,6))\nplt.pie(df['type'].value_counts(), labels = df['type'].value_counts().index,colors=colors, autopct='%1.1f%%', startangle=90)\nplt.title(\"Movies and TV Shows Distribution\")\nplt.show()","a1869426":"# Overall Rating count both TV Shows and Movies\n\nratings = df[\"rating\"].value_counts().sort_index()\nratings\n","e850181b":"# Distribution showing overall ratings\nimport seaborn as sns\n\nplt.figure(figsize = (12,12))\nbars = df['rating'].value_counts()[:14] #top 10\nsns.barplot(x = bars, y = bars.index)\nax = plt.gca()\nfor i in ax.patches: \n    plt.text(i.get_width()+0.2, i.get_y()+0.5,  \n             str(round((i.get_width()), 2)), \n             fontsize = 10, fontweight ='bold', \n             color ='grey') \nplt.title(\"Overall Ratings\")\nplt.xlabel(\"Count\")","825e301c":"# Movies Rating count\n\nmovies=df[df.type==\"Movie\"].rating.value_counts().sort_index()\nmovies","3aef0e70":"# Distribution showing movies rating\nplt.figure(figsize = (10,7))\nbars = df[df.type==\"Movie\"].rating.value_counts()[:14] #top 10\nsns.barplot(x = bars, y = bars.index)\nax = plt.gca()\nfor i in ax.patches: \n    plt.text(i.get_width()+0.2, i.get_y()+0.5,  \n             str(round((i.get_width()), 2)), \n             fontsize = 10, fontweight ='bold', \n             color ='grey') \nplt.title(\"Movies Rating\")\nplt.xlabel(\"Count\")","0db0fb63":"# TV Shows Ratings\ntv_shows=df[df.type==\"TV Show\"].rating.value_counts().sort_index()\ntv_shows","7e8a29f9":"# Distribution showing TV shows rating\nplt.figure(figsize = (10,7))\nbars = df[df.type==\"TV Show\"].rating.value_counts()[:14] #top 10\nsns.barplot(x = bars, y = bars.index)\nax = plt.gca()\nfor i in ax.patches: \n    plt.text(i.get_width()+0.2, i.get_y()+0.5,  \n             str(round((i.get_width()), 2)), \n             fontsize = 10, fontweight ='bold', \n             color ='grey') \nplt.title(\"TV Shows Rating\")\nplt.xlabel(\"Count\")","2a105029":"#  Country Based Analyses (Movies)Top10\ncountry_movies = df[df.type==\"Movie\"].country.value_counts()[:10]\ncountry_movies","396d7505":"# Pie chartshowing country based analysis for movies\nplt.figure(figsize = (12,12))\nplt.pie(country_movies, labels = country_movies.index, autopct='%1.1f%%', startangle=90)\nplt.title(\"Country based movie analysis\")\nplt.show()","00d58f7e":"# Country Based Analyses (TV Shows)Top10\ncountry_shows = df[df.type==\"TV Show\"].country.value_counts()[:10]\ncountry_shows","9f2e7a71":"# Pie chartshowing country based analysis for TV Shows\nplt.figure(figsize = (10,12))\nplt.pie(country_shows, labels = country_shows.index, autopct='%1.1f%%', startangle=90)\nplt.title(\"Top 10 TV Shows\")\nplt.show()","d8bc91c2":"# Year wise distribution of TV Shows and Movies Top 10 years\n\nrecent_10_year = df[df.release_year > 2011]\ng = sns.catplot(\n    data=recent_10_year, kind=\"count\",\n    x=\"release_year\", hue=\"type\",\n    ci=\"sd\", palette=\"dark\", alpha=.6, height=6)\nax = plt.gca()\n\n# ylim max value to be set\ny_max = recent_10_year['type'].value_counts().max() \nax.set_ylim([0, 800])\n# Iterate through the list of axes' patches\nfor p in ax.patches:\n    ax.text(p.get_x() + p.get_width()\/2., p.get_height(), '%d' % int(p.get_height()), \n            fontsize=12, color='black', ha='center', va='bottom')\nplt.title('Last 10 years trends (Movies and Shows) ',size='15')\nplt.show()","30fd1eb2":"# Analysis of Movie Directors\n\ndirectors_movie = df[df.type==\"Movie\"].director.value_counts()[:10]\ndirectors_movie\n","abb2775d":"# Pie chart showing top 10 Movie directors\nplt.figure(figsize = (10,8))\nplt.pie(directors_movie, labels = directors_movie.index, autopct='%1.1f%%', startangle=90)\nplt.title(\"Top 10 movie directors\")\nplt.show()","57a454de":"# Analysis of TV Shows Directors\ndirectors_shows = df[df.type==\"TV Show\"].director.value_counts()[:10]\ndirectors_shows","ccd839e9":"# Pie chart showing top 10 TV shows directors\nplt.figure(figsize = (10,8))\nplt.pie(directors_shows, labels = directors_shows.index, autopct='%1.1f%%', startangle=90)\nplt.title(\"Top 10 TV Shows Directors\")\nplt.show()","fa3363bd":"# Analysis of Top 10  Movie Cast\ncast_movie = df[df.type==\"Movie\"].cast.value_counts()[:10]\ncast_movie","03f01300":"# Pie chart showing top 10 Movie cast\nplt.figure(figsize = (10,8))\nplt.pie(cast_movie, labels = cast_movie.index, autopct='%1.1f%%', startangle=90)\nplt.title(\"Top 10 movie cast\")\nplt.show()","987216f1":"# Analysis of Top 10 Tv Shows Cast\ncast_show = df[df.type==\"TV Show\"].cast.value_counts()[:10]\ncast_show","8cfae19a":"# Pie chart showing top 10 Shows cast\nplt.figure(figsize = (10,8))\nplt.pie(cast_show, labels = cast_show.index, autopct='%1.1f%%', startangle=90)\nplt.title(\"Top 10 TV Shows Cast\")\nplt.show()","b14c87ef":"# Content type analysis\nnew_df = pd.DataFrame(df.listed_in.str.split('[,&]+').tolist(), index=df.show_id).stack()\nnew_df_count= new_df.value_counts()[:10]\nnew_df_count","3e26f270":"# Top10 content type\nplt.figure(figsize = (10,7))\nsns.barplot(x = new_df_count, y =new_df_count.index)\nax = plt.gca()\nfor i in ax.patches: \n    plt.text(i.get_width()+0.2, i.get_y()+0.5,  \n             str(round((i.get_width()), 2)), \n             fontsize = 10, fontweight ='bold', \n             color ='grey') \nplt.title(\"Top 10 Genres\")\nplt.xlabel(\"Count\")","8b9fe757":"# TV Shows and Movies Distribution","1b2d152b":"# Top 10 movies country based analysis","353a8ee3":"# Overall Rating count(Shows & Movies)","2ff00880":" # Top 10 Genres","4d99082d":"# Top 10 TV Show Cast","7f2654d1":"# Top 10 Movies Directors","e874584c":"# Last 10 year trends (Movies & Shows)","f3e5a51e":"# TV Shows Rating Count","f27040cc":"# Top 10 Movie cast","ee278678":"# Movies Rating Count","30cd2e5d":"# Top 10 shows country based analysis","575d4920":"# Top 10 TV Shows Directors"}}