{"cell_type":{"10f4fa56":"code","d2b788c2":"code","8446692d":"code","dc1d80e9":"code","b1dd7e88":"code","5cc41639":"code","0ce0e2c5":"code","a04270c2":"code","d9a6e07d":"code","a886864b":"code","32fcfb15":"code","2a6c8238":"code","8cdd6646":"code","624d4f8e":"code","f92a4907":"code","be824c2c":"code","1e7b221b":"markdown","e2db6cab":"markdown","47a984f2":"markdown","cc8374fd":"markdown","5c945f9b":"markdown","c241a451":"markdown","795b0a49":"markdown","1e0a048c":"markdown"},"source":{"10f4fa56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d2b788c2":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain.head()","8446692d":"test = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_raw = test.copy()\ntest.head()","dc1d80e9":"train.info()","b1dd7e88":"train = train.drop([\"Cabin\", \"PassengerId\", \"Name\", \"Age\", \"Ticket\", \"Fare\"],axis=1)\ntrain.head()","5cc41639":"# viewing the data info\ntrain.info()","0ce0e2c5":"#replacing null values with the mean of most appearing values in Embarked\ntrain[\"Embarked\"].fillna(train.Embarked.value_counts().idxmax(), inplace = True)\ntrain.Embarked.value_counts()","a04270c2":"# final view of the info of the data\ntrain.info()","d9a6e07d":"test.info()","a886864b":"test = test.drop([\"Cabin\", \"PassengerId\", \"Name\", \"Age\", \"Ticket\", \"Fare\"],axis=1)\ntest.head()","32fcfb15":"# viewing data\ntest.info()","2a6c8238":"y = train.Survived\nX = pd.get_dummies(train.iloc[:,1:])\nX_test = pd.get_dummies(test)\nprint(y.head())\nprint(X.head())\nprint(X_test.head())","8cdd6646":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\ny_pred = model.predict(X_test)\ny_pred","624d4f8e":"sub = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")\ny_test = sub.Survived","f92a4907":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, y_pred)","be824c2c":"output = pd.DataFrame({'PassengerId': test_raw.PassengerId, 'Survived': y_pred})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Submission successfully saved!\")","1e7b221b":"Preprocessing Train Data","e2db6cab":"As there are no null values. Our test set is ready now training the model","47a984f2":"Using gendersubmission.csv for getting y_test.","cc8374fd":"Clearing unwanted data","5c945f9b":"computing Model's Accuracy","c241a451":"Preprocessing  Test Data","795b0a49":"Arranging the values","1e0a048c":"Filling null values"}}