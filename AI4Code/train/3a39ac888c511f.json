{"cell_type":{"e940fbfa":"code","a0ef045c":"code","be941899":"code","aeb419d6":"code","3cfbe3ba":"code","335fdb65":"code","7f14bb2a":"code","a8586a42":"code","cc366323":"code","4083c0ed":"code","de26cebc":"code","f3484355":"code","8a127874":"code","0a45f316":"code","d83133fd":"code","47d43d65":"code","cd23d002":"code","21f1c63d":"code","609b8f8a":"code","283cb323":"code","4608bbbe":"code","6726f0b1":"code","a5058488":"code","63a799ad":"code","bee898f9":"code","2efef08c":"code","962f401b":"code","1d57cc09":"code","4fdbabc9":"code","207011de":"code","4af36c21":"code","74a5d00b":"code","58adb3bc":"code","f40f776d":"code","cfe62fce":"code","e04ba53d":"code","624fd083":"code","a6b94813":"code","ca784c2b":"markdown","b7de4851":"markdown","2254991f":"markdown","fe4c5f1e":"markdown","309ab614":"markdown","4e9bb08c":"markdown","1e158d05":"markdown","1440b193":"markdown","393b3325":"markdown","47dc4a18":"markdown","7bef5048":"markdown","6ae1404c":"markdown","d46f6ccc":"markdown","debd18cf":"markdown","c2c5e127":"markdown","14744cb8":"markdown","94dff233":"markdown","b1f413bc":"markdown","b3ca634d":"markdown","22fff531":"markdown","7af8d091":"markdown","63a18e51":"markdown","63034fd3":"markdown","83a4606f":"markdown","5d4b3a8e":"markdown","72701422":"markdown","88598c02":"markdown","368d8070":"markdown","1505e43a":"markdown","0011b786":"markdown","d97284e6":"markdown","f3ec52d6":"markdown","76a01070":"markdown","bed74218":"markdown","2770cb27":"markdown","386e5969":"markdown","eecb0cfe":"markdown"},"source":{"e940fbfa":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings # current version of seaborn generates a bunch of warnings that we'll ignore\nwarnings.filterwarnings(\"ignore\")\n\nimport plotly.graph_objs as go\n\nfrom sklearn import datasets\nfrom sklearn.decomposition import PCA\nimport numpy as np\nfrom bokeh.io import push_notebook, show, output_notebook\n\nimport networkx as nx","a0ef045c":"# Load the Iris flower in dataset\niris = pd.read_csv(\"..\/input\/iris\/Iris.csv\") # the iris dataset is now a Pandas DataFrame\niris.head()","be941899":"iris[\"Species\"].value_counts()","aeb419d6":"plt.figure()\nplt.scatter(x=iris[\"SepalLengthCm\"].values, y=iris[\"SepalWidthCm\"].values) # similar to plt.plot(x, y, '.'), but the underlying child objects in the axes are not Line2D","3cfbe3ba":"linear_data = np.array([1,2,3,4,5,6,7,8])   # check this is a simple array of values 1 to 150\nexponential_data = linear_data**2\n\nplt.figure()\n# plot the linear data and the exponential data\nplt.plot(linear_data, '-o', exponential_data, '-*')","335fdb65":"plt.figure()\nxvals = range(len(linear_data))\nplt.bar(xvals, linear_data, width = 0.3)","7f14bb2a":"#Headmap\nplt.hist2d(iris[\"SepalLengthCm\"],iris[\"SepalLengthCm\"])","a8586a42":"plt.figure()\n# create a boxplot of the normal data, assign the output to a variable to supress output\nbp = plt.boxplot(iris[\"SepalLengthCm\"], whis='range')","cc366323":"# this is another way to plot Scattler using matplotlib\niris.plot(kind=\"scatter\", x=\"SepalLengthCm\", y=\"SepalWidthCm\")","4083c0ed":"# create a scatter plot of columns 'SepalLengthCm' and 'SepalWidthCm', with changing color (PetalLengthCm) \niris.plot.scatter(\"SepalLengthCm\", \"SepalWidthCm\",c = iris['PetalLengthCm'],  colormap='viridis') ","de26cebc":"Newtable = iris.drop('Id', axis=1)\nNewtable.head()","f3484355":"Newtable.plot.box()","8a127874":"Newtable.plot.hist(alpha=0.5);","0a45f316":"Newtable.plot.kde()","d83133fd":"# A seaborn jointplot shows bivariate scatterplots and univariate histograms in the same figure\nsns.jointplot(x=\"SepalLengthCm\", y=\"SepalWidthCm\", data=iris, size=5)","47d43d65":"sns.jointplot(x=\"SepalLengthCm\", y=\"SepalWidthCm\", data=iris, size=5,kind='kde' )","cd23d002":"sns.jointplot(x=\"SepalLengthCm\", y=\"SepalWidthCm\", data=iris, size=5,kind='hex' )","21f1c63d":"# seaborn's FacetGrid to color the scatterplot by species\nsns.FacetGrid(iris, hue=\"Species\", size=5) \\\n   .map(plt.scatter, \"SepalLengthCm\", \"SepalWidthCm\") \\\n   .add_legend()","609b8f8a":"#Seaborn through a boxplot\nsns.boxplot(x=\"Species\", y=\"PetalLengthCm\", data=iris)","283cb323":"ax = sns.boxplot(x=\"Species\", y=\"PetalLengthCm\", data=iris)\nax = sns.stripplot(x=\"Species\", y=\"PetalLengthCm\", data=iris, jitter=True, edgecolor=\"gray\")","4608bbbe":"sns.violinplot(x=\"Species\", y=\"SepalLengthCm\", data=iris, size=6)","6726f0b1":"sns.FacetGrid(iris, hue=\"Species\", size=6) \\\n   .map(sns.kdeplot, \"SepalLengthCm\") \\\n   .add_legend()","a5058488":"sns.pairplot(iris.drop(\"Id\", axis=1), hue=\"Species\", size=3)","63a799ad":"iris.drop(\"Id\", axis=1).boxplot(by=\"Species\", figsize=(10, 5))","bee898f9":"correlation = iris.drop(\"Id\", axis=1).corr()\nsns.heatmap(correlation, annot=True,cmap='coolwarm')","2efef08c":"sns.distplot(iris['SepalLengthCm'])","962f401b":"X = iris.iloc[:, [1,2]].values  # we only take the first two features.\nY = iris.Species\n\nx_min, x_max = X[:, 0].min() - .5, X[:, 0].max() + .5\ny_min, y_max = X[:, 1].min() - .5, X[:, 1].max() + .5","1d57cc09":"import plotly.graph_objs as go\nimport plotly.offline as py","4fdbabc9":"trace = go.Scatter(x=X[:, 0],\n                   y=X[:, 1],\n                   mode='markers',\n                   marker=dict(color=np.random.randn(150),\n                               size=10,\n                               colorscale='Viridis',\n                               showscale=False))\n\nlayout = go.Layout(title='Training Points',\n                   xaxis=dict(title='Sepal length',\n                            showgrid=False),\n                   yaxis=dict(title='Sepal width',\n                            showgrid=False),\n                  )\n \nfig = go.Figure(data=[trace], layout=layout)","207011de":"py.iplot(fig)","4af36c21":"# this is an amazin expale but we need work fisrt with PCA\nfrom sklearn.decomposition import PCA\n\nX_reduced = PCA(n_components=3).fit_transform(iris.iloc[:,1:-1])","74a5d00b":"trace = go.Scatter3d(x=X_reduced[:, 0], \n                     y=X_reduced[:, 1], \n                     z=X_reduced[:, 2],\n                     mode='markers',\n                     marker=dict(\n                         size=6,\n                         color=np.random.randn(150),\n                         colorscale='Viridis',   \n                         opacity=0.8)\n                    )\nlayout=go.Layout(title='First three PCA directions',\n                 scene=dict(\n                         xaxis=dict(title='1st eigenvector'),\n                         yaxis=dict(title='2nd eigenvector'),\n                         zaxis=dict(title='3rd eigenvector'))\n                 )\nfig = go.Figure(data=[trace], layout=layout)","58adb3bc":"py.iplot(fig)","f40f776d":"output_notebook()","cfe62fce":"from bokeh.plotting import figure, show, output_file\n\ncolormap = {'Iris-setosa': 'red', 'Iris-versicolor': 'green', 'Iris-virginica': 'blue'}\ncolors = [colormap[x] for x in iris['Species']]\n\np = figure(title = \"Iris Morphology\")\np.xaxis.axis_label = 'Petal Length'\np.yaxis.axis_label = 'Petal Width'\n\np.circle(iris[\"PetalLengthCm\"], iris[\"PetalWidthCm\"],\n         color=colors, fill_alpha=0.2, size=10)\n\noutput_file(\"iris.html\", title=\"iris.py example\")\n\nshow(p)","e04ba53d":"# Calculate the correlation between individuals.\ncorr = iris.iloc[:,1:5].corr()\ncorr","624fd083":"import networkx as nx","a6b94813":"# Transform it in a links data frame (3 columns only):\nlinks = corr.stack().reset_index()\nlinks.columns = ['var1', 'var2','value']\n\n# correlation\nthreshold = -1\n\n# Keep only correlation over a threshold and remove self correlation (cor(A,A)=1)\nlinks_filtered=links.loc[ (links['value'] >= threshold ) & (links['var1'] != links['var2']) ]\n \n# Build your graph\nG=nx.from_pandas_edgelist(links_filtered, 'var1', 'var2')\n \n# Plot the network\nnx.draw_circular(G, with_labels=True, node_color='green', node_size=300, edge_color='red', linewidths=1, font_size=10)\n","ca784c2b":"<a id=\"24\"><\/a> <br>\n## Heatmap Plot","b7de4851":"<a id=\"3\"><\/a> <br>\n## 1- Python Libraries\n\n1- matplotlib\n\nmatplotlib is the O.G. of Python data visualization libraries. Despite being over a decade old, it\u2019s still the most widely used library for plotting in the Python community. It was designed to closely resemble MATLAB, a proprietary programming language developed in the 1980s.\n\n2- Seaborn\n\nSeaborn harnesses the power of matplotlib to create beautiful charts in a few lines of code. The key difference is Seaborn\u2019s default styles and color palettes, which are designed to be more aesthetically pleasing and modern. Since Seaborn is built on top of matplotlib, you\u2019ll need to know matplotlib to tweak Seaborn\u2019s defaults.\n\n3- ggplot\n\nggplot is based on ggplot2, an R plotting system, and concepts from The Grammar of Graphics. ggplot operates differently than matplotlib: it lets you layer components to create a complete plot. For instance, you can start with axes, then add points, then a line, a trendline, etc. Although The Grammar of Graphics has been praised as an \u201cintuitive\u201d method for plotting, seasoned matplotlib users might need time to adjust to this new mindset.\n\n4- Bokeh\nLike ggplot, Bokeh is based on The Grammar of Graphics, but unlike ggplot, it\u2019s native to Python, not ported over from R. Its strength lies in the ability to create interactive, web-ready plots, which can be easily outputted as JSON objects, HTML documents, or interactive web applications. Bokeh also supports streaming and real-time data.\n\n5- pygal\nLike Bokeh and Plotly, pygal offers interactive plots that can be embedded in the web browser. Its prime differentiator is the ability to output charts as SVGs. As long as you\u2019re working with smaller datasets, SVGs will do you just fine. But if you\u2019re making charts with hundreds of thousands of data points, they\u2019ll have trouble rendering and become sluggish.\n\n6- Plotly\nYou might know Plotly as an online platform for data visualization, but did you also know you can access its capabilities from a Python notebook? Like Bokeh, Plotly\u2019s forte is making interactive plots, but it offers some charts you won\u2019t find in most libraries, like contour plots, dendograms, and 3D charts.\n\n7- geoplotlib\ngeoplotlib is a toolbox for creating maps and plotting geographical data. You can use it to create a variety of map-types, like choropleths, heatmaps, and dot density maps. You must have Pyglet (an object-oriented programming interface) installed to use geoplotlib. Nonetheless, since most Python data visualization libraries don\u2019t offer maps, it\u2019s nice to have a library dedicated solely to them.\n\n8- Gleam\nGleam is inspired by R\u2019s Shiny package. It allows you to turn analyses into interactive web apps using only Python scripts, so you don\u2019t have to know any other languages like HTML, CSS, or JavaScript. Gleam works with any Python data visualization library. Once you\u2019ve created a plot, you can build fields on top of it so users can filter and sort data.\n\n9- missingno\nDealing with missing data is a pain. missingno allows you to quickly gauge the completeness of a dataset with a visual summary, instead of trudging through a table. You can filter and sort data based on completion or spot correlations with a heatmap or a dendrogram.\n\n10- Leather\nLeather\u2019s creator, Christopher Groskopf, puts it best: \u201cLeather is the Python charting library for those who need charts now and don\u2019t care if they\u2019re perfect.\u201d It\u2019s designed to work with all data types and produces charts as SVGs, so you can scale them without losing image quality. Since this library is relatively new, some of the documentation is still in progress. The charts you can make are pretty basic\u2014but that\u2019s the intention.","2254991f":"##### [Go to top](#top)","fe4c5f1e":"###### [Go to top](#top)","309ab614":"<a id=\"8\"><\/a> <br>\n## 7- Boken","4e9bb08c":"####  **I hope you find this kernel helpful and some <font color=\"red\"><b>UPVOTES<\/b><\/font> would be very much appreciated**","1e158d05":"<a id=\"18\"><\/a> <br>\n## Box Plot","1440b193":"<a id=\"17\"><\/a> <br>\n## FacetGrid Plot","393b3325":"##### [Go to top](#top)","47dc4a18":"<a id=\"20\"><\/a> <br>\n## Violin plot","7bef5048":"<a id=\"3\"><\/a> <br>\n## 2- Import Libraries","6ae1404c":"<a id=\"21\"><\/a> <br>\n## FacetGrid Plot","d46f6ccc":"##### [Go to top](#top)","debd18cf":"## <div style=\"text-align: center\">Top Data Visualization Libraries Tutorial  <\/div>\n\nThe Python Package Index has libraries for practically every data visualization need, check this Libraries.\n\n#### The Top 5 Python Libraries are:\n\n- **Matplotlib**, \n- **Seaborn**, \n- **Plotly**, \n- **Bokeh**,\n- **networkx**,\n\n<\/div>\n\n\n<img src=\"https:\/\/www.einfochips.com\/blog\/wp-content\/uploads\/2018\/11\/how-to-develop-machine-learning-applications-for-business-featured.jpg\">\n\n-------------------------------------------------------------\n\n **I hope this kernel helpful and some <font color=\"red\"><b>UPVOTES<\/b><\/font> would be very much appreciated**","c2c5e127":"<a id=\"14\"><\/a> <br>\n## Heatmap Plot","14744cb8":"<a id=\"25\"><\/a> <br>\n## Dist Plot","94dff233":"####  **I hope you find this kernel helpful and some <font color=\"red\"><b>UPVOTES<\/b><\/font> would be very much appreciated**","b1f413bc":"First check the data ","b3ca634d":"####  **I hope you find this kernel helpful and some <font color=\"red\"><b>UPVOTES<\/b><\/font> would be very much appreciated**","22fff531":"* We will use iris data that we import at previous part( parallel plot)\n* Network charts are related with correlation network.\n* It can be used instead of heatmaps in seaborn library.\n* At first look at correlation between features.\n- corr(): gives correlation between features\n- As you can see from table below, petal length is positively correlated with sepal length and petal width. Also, petal length is negatively correlated with sepal width.","7af8d091":"<a id=\"10\"><\/a> <br>\n## 10- References\n\n1. [Coursera](https:\/\/www.coursera.org\/specializations\/data-science-python)\n1. [Sklearn](https:\/\/scikit-learn.org\/stable\/)\n1. [ML Step by Step](https:\/\/machinelearningmastery.com\/machine-learning-in-python-step-by-step\/)\n1. [Machine Learning A-Z\u2122: Hands-On Python & R In Data Science (Udemy)](https:\/\/www.udemy.com\/machinelearning\/)\n1. [Deep Learning A-Z\u2122: Hands-On Artificial Neural Networks](https:\/\/www.udemy.com\/deeplearning\/)\n1. [Plotly](https:\/\/plot.ly\/)\n1. [Bokeh](https:\/\/bokeh.pydata.org\/en\/latest\/docs\/gallery\/iris.html)\n1. [Network Chart](https:\/\/www.kaggle.com\/kanncaa1\/rare-visualization-tools)\n1. [10 Usefull Python Visualization](https:\/\/mode.com\/blog\/python-data-visualization-libraries)\n1. [Top 10 ML courses](https:\/\/www.kaggle.com\/getting-started\/108343)\n","63a18e51":"<a id=\"1\"><\/a> <br>\n## 9-Courses  of ML  \n\n### Best Machine Learning &amp; Deep Learning Courses [2019]\n\n\n[1. Machine Learning Certification by Stanford University (Coursera)](https:\/\/www.coursera.org\/learn\/machine-learning?ranMID=40328&amp;ranEAID=vedj0cWlu2Y&amp;ranSiteID=vedj0cWlu2Y-ajzPQo.U8IJDvdN2zJ4zsg&amp;siteID=vedj0cWlu2Y-ajzPQo.U8IJDvdN2zJ4zsg&amp;utm_content=10&amp;utm_medium=partners&amp;utm_source=linkshare&amp;utm_campaign=vedj0cWlu2Y)\n\n[2. Deep Learning Certification by deeplearning.ai (Coursera)](https:\/\/www.coursera.org\/specializations\/deep-learning?edocomorp=mar19affiliate20off&amp;ranMID=40328&amp;ranEAID=vedj0cWlu2Y&amp;ranSiteID=vedj0cWlu2Y-ETlb9CJE2XM9JpTjEFCAhQ&amp;siteID=vedj0cWlu2Y-ETlb9CJE2XM9JpTjEFCAhQ&amp;utm_content=10&amp;utm_medium=partners&amp;utm_source=linkshare&amp;utm_campaign=vedj0cWlu2Y)\n\n[3. Intro to Machine Learning Nanodegree Program (Udacity)](https:\/\/www.udacity.com\/course\/intro-to-machine-learning-nanodegree--nd229?cjevent=3f802ef9d42d11e983bf02e70a240613)\n\n[4. Machine Learning A-Z\u2122: Hands-On Python &amp; R In Data Science (Udemy)](https:\/\/www.udemy.com\/machinelearning\/?ranMID=39197&amp;ranEAID=vedj0cWlu2Y&amp;ranSiteID=vedj0cWlu2Y-Ocm.SbF0Nfu1joTCmj2lcw&amp;LSNPUBID=vedj0cWlu2Y)\n\n[5. Machine Learning Data Science Course from Harvard University (edX)](https:\/\/www.edx.org\/professional-certificate\/harvardx-data-science?source=aw&amp;awc=6798_1568162694_f3d200d33df1e9f4c007eab412be2dc9&amp;utm_source=aw&amp;utm_medium=affiliate_partner&amp;utm_content=text-link&amp;utm_term=427859_Digital+Defynd)\n\n[6. Deep Learning Course by IBM (edX)](https:\/\/www.edx.org\/professional-certificate\/ibm-deep-learning?source=aw&amp;awc=6798_1568162738_1040cabaa57d2f05641cb016f73b28e1&amp;utm_source=aw&amp;utm_medium=affiliate_partner&amp;utm_content=text-link&amp;utm_term=427859_Digital+Defynd)\n\n[7. Mathematics for Machine Learning by Imperial College London (Coursera)](https:\/\/www.coursera.org\/specializations\/mathematics-machine-learning?ranMID=40328&amp;ranEAID=vedj0cWlu2Y&amp;ranSiteID=vedj0cWlu2Y-xLidZLlpjC8Gv_s2W4ZnVw&amp;siteID=vedj0cWlu2Y-xLidZLlpjC8Gv_s2W4ZnVw&amp;utm_content=10&amp;utm_medium=partners&amp;utm_source=linkshare&amp;utm_campaign=vedj0cWlu2Y)\n\n[8. Machine Learning \u2013 Artificial Intelligence by Columbia University (edX)](https:\/\/www.edx.org\/micromasters\/columbiax-artificial-intelligence?source=aw&amp;awc=6798_1568162785_8665fc7be3791239252b43c78fc25d47&amp;utm_source=aw&amp;utm_medium=affiliate_partner&amp;utm_content=text-link&amp;utm_term=427859_Digital+Defynd)\n\n[9. Free College Machine Learning Courses (edX)](https:\/\/www.edx.org\/learn\/machine-learning?source=aw&amp;awc=6798_1568162807_f9cb6b1e897a5e949c8f61b160df08fb&amp;utm_source=aw&amp;utm_medium=affiliate_partner&amp;utm_content=text-link&amp;utm_term=427859_Digital+Defynd)\n\n[10. Machine Learning &amp; AI Courses (fast.ai)](https:\/\/www.fast.ai\/)\n\n[11. Advanced Machine Learning Course by HSE (Coursera)](https:\/\/www.coursera.org\/specializations\/aml?ranMID=40328&amp;ranEAID=vedj0cWlu2Y&amp;ranSiteID=vedj0cWlu2Y-e8Umkx_VMoYhoLYF2JIiLA&amp;siteID=vedj0cWlu2Y-e8Umkx_VMoYhoLYF2JIiLA&amp;utm_content=10&amp;utm_medium=partners&amp;utm_source=linkshare&amp;utm_campaign=vedj0cWlu2Y)\n\n[12. Python for Data Science and Machine Learning Bootcamp (Udemy)](https:\/\/www.udemy.com\/python-for-data-science-and-machine-learning-bootcamp\/?ranMID=39197&amp;ranEAID=vedj0cWlu2Y&amp;ranSiteID=vedj0cWlu2Y-2yZi8gUVywIuAglcc34W9Q&amp;LSNPUBID=vedj0cWlu2Y)\n\n[13. Deep Learning A-Z\u2122: Hands-On Artificial Neural Networks (Udemy)](https:\/\/www.udemy.com\/deeplearning\/?ranMID=39197&amp;ranEAID=vedj0cWlu2Y&amp;ranSiteID=vedj0cWlu2Y-XBUM5R9N4AO.GHduAzNNpg&amp;LSNPUBID=vedj0cWlu2Y)\n\n[14. Python for Everybody by University of Michigan (Coursera)](https:\/\/www.coursera.org\/specializations\/python?ranMID=40328&amp;ranEAID=vedj0cWlu2Y&amp;ranSiteID=vedj0cWlu2Y-Lc2RCZhix6fikqVzdQwKiw&amp;siteID=vedj0cWlu2Y-Lc2RCZhix6fikqVzdQwKiw&amp;utm_content=10&amp;utm_medium=partners&amp;utm_source=linkshare&amp;utm_campaign=vedj0cWlu2Y)\n\n[15. Deep Learning in Python (DataCamp)](https:\/\/www.datacamp.com\/courses\/deep-learning-in-python?tap_a=5644-dce66f&amp;tap_s=463826-784532)\n\n[16. Machine Learning Certification by University of Washington (Coursera)](https:\/\/www.coursera.org\/specializations\/machine-learning?ranMID=40328&amp;ranEAID=vedj0cWlu2Y&amp;ranSiteID=vedj0cWlu2Y-Cn0Cca6uS1hGwdb17rhacQ&amp;siteID=vedj0cWlu2Y-Cn0Cca6uS1hGwdb17rhacQ&amp;utm_content=10&amp;utm_medium=partners&amp;utm_source=linkshare&amp;utm_campaign=vedj0cWlu2Y)\n\n\n## [LINK](https:\/\/www.kaggle.com\/getting-started\/108343)","63034fd3":"<a id=\"23\"><\/a> <br>\n## Some Boxplots","83a4606f":"<a id=\"11\"><\/a> <br>\n## Scatter Plot","5d4b3a8e":"<a id=\"16\"><\/a> <br>\n## Joint Plots","72701422":"<a id=\"13\"><\/a> <br>\n## Bar Plot","88598c02":"<a id=\"7\"><\/a> <br>\n## 6- Plotly","368d8070":"<a id=\"4\"><\/a> <br>\n## 3- Data Collection","1505e43a":"<a id=\"12\"><\/a> <br>\n## Linear Plot","0011b786":"<a id=\"9\"><\/a> <br>\n## 8- NetworkX","d97284e6":"<a id=\"22\"><\/a> <br>\n## Pair Plot","f3ec52d6":"when you choose the plot kind by using the **DataFrame.plot.kind** methods instead of providing the kind keyword argument.\n\n**kind** :\n\n- 'line' : line plot (default)\n- 'bar' : vertical bar plot\n- 'barh' : horizontal bar plot\n- 'hist' : histogram\n- 'box' : boxplot\n- 'kde' : Kernel Density Estimation plot\n- 'density' : same as 'kde'\n- 'area' : area plot\n- 'pie' : pie plot\n- 'scatter' : scatter plot\n- 'hexbin' : hexbin plot nn","76a01070":"<a id=\"top\"><\/a> <br>\n## Notebook  Content\n\n\n1. [Python Libraries](#2)\n1. [Import Libraries](#3)\n1. [Data Collection](#4)\n1. [Matplotlib](#5)\n    1. [Scatter Plot](#11)\n    1. [Linear Plot](#12)\n    1. [Bar Plot](#13)\n    1. [HeatMap Plot](#14)\n    1. [Box Plot](#15)\n1. [Seaborn](#6)\n    1. [Joint Plots](#16)\n    1. [FacetGrid Plot](#17)\n    1. [Boxplot ](#18)\n    1. [BoxPlot and strip Plot](#19)\n    1. [Violin Plot](#20)\n    1. [FacetGrid](#21)\n    1. [Pair Plot](#22)\n    1. [Some Boxplots](#23)\n    1. [HeatMap Plot](#24)\n    1. [Dist Plot](#25)\n1. [Plotly](#7)\n1. [Bokeh](#8)\n1. [networkx](#9)\n1. [Courses](#1)\n1. [References](#10)    ","bed74218":"<a id=\"6\"><\/a> <br>\n## 5- Seaborn","2770cb27":"<a id=\"15\"><\/a> <br>\n## BoxPlot","386e5969":"<a id=\"5\"><\/a> <br>\n## 4- Matplotlib","eecb0cfe":"<a id=\"19\"><\/a> <br>\n## Box Plot and stripplot"}}