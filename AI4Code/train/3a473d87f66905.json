{"cell_type":{"ce830d31":"code","f68106de":"code","3a282e26":"code","215d88d4":"code","85d8a1fd":"code","3b890759":"code","215c8597":"code","a411600f":"code","e39e2470":"code","089bc3ad":"code","2999674a":"code","47aa32bb":"code","6957708a":"code","bab70fe2":"code","0a5bc50b":"code","56f0400e":"code","035a25d6":"code","f1da06eb":"code","250cb3eb":"code","5b94bced":"code","6a144047":"code","272ea9c4":"code","b7e641de":"code","a216dbe9":"code","ee2d360c":"markdown","89d33e40":"markdown","86cf0df7":"markdown","17a81c87":"markdown","9bcc4fda":"markdown","b0d2fca2":"markdown","bc3a3224":"markdown","ddbb0b60":"markdown","d634fcf6":"markdown"},"source":{"ce830d31":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f68106de":"# Separate target from predictors\nX=pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\nX.head()","3a282e26":"X.shape","215d88d4":"null= X.isna().sum()\nper_null= X.isna().sum()\/X.isna().count()*100\nper_null= round(per_null, 1)\nmissing_data= pd.concat([null, per_null], axis=1,keys=['number of missing values', '% of missig values'])\nmissing_data","85d8a1fd":"# we can see that there are only null values in bmi column\nimport missingno as ms\nms.matrix(X)","3b890759":"from sklearn.impute import SimpleImputer\n\n# Imputation\nmy_imputer = SimpleImputer(strategy='most_frequent')\nX_impute = pd.DataFrame(my_imputer.fit_transform(X))\n\n# Imputation removed column names; put them back\nX_impute.columns = X.columns","215c8597":"# We imputed the null values and now there is no null values in bmi\nms.matrix(X_impute)","a411600f":"import seaborn as sns\nsns.countplot(x=X_impute.stroke)\nplt.title('Number of patient stroked')\nplt.show()","e39e2470":"# relation between gender and stroke\nsns.countplot(x=X_impute.gender,hue=X_impute.stroke)\nplt.title('Relation between gender and stroke')\nplt.show()","089bc3ad":"X_impute.groupby(['gender'])['stroke'].value_counts()","2999674a":"sns.countplot(x=X_impute.smoking_status,hue=X_impute.stroke)\nplt.title('relation between smoking and stroke')\nplt.show()","47aa32bb":"X.groupby(\"smoking_status\")['stroke'].value_counts()","6957708a":"# We can see that this is not a good visualization but it gave us this a good \n# intution that the older ages have higher stoke probability\nsns.countplot(x=X_impute.age,hue=X_impute.stroke)\nplt.title('relation between age and stroke')\nplt.show()","bab70fe2":"def seprate_ages(row):\n    if row.age > 45:\n        row.age = 3 \n    elif row.age > 30:\n        row.age = 2\n    else :\n        row.age = 1\n    return row\n\nage_seprated_x=X_impute.apply(seprate_ages,axis='columns')\nage_seprated_x.head()","0a5bc50b":"# We can see that this is not a good visualization but it gave us this a good \n# intution that the older ages have higher stoke probability\nsns.countplot(x=age_seprated_x.age,hue=age_seprated_x.stroke)\nplt.title('relation between age and stroke')\nplt.show()","56f0400e":"# we can see that most of the stroke happened for ages above 45 \nage_seprated_x.groupby('age')['stroke'].value_counts()","035a25d6":"# categorical_cols = [cols for cols in X.columns if X[cols].dtype=='object' and X[cols].nunique()<10]\n# numerical_cols = [cols for cols in X.columns if X[cols].dtype in ['int64','float64']]\n\ncategorical_data = age_seprated_x.select_dtypes(include = ['object'])\nnumerical_data = data=age_seprated_x.select_dtypes(include=['integer', 'float'])","f1da06eb":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\nfeatures = categorical_data.apply(label_encoder.fit_transform)\nfeatures=features.join(numerical_data)\nfeatures.head()","250cb3eb":"y = features.stroke\nfeatures=features.drop('stroke',axis=1)\n","5b94bced":"from sklearn.model_selection import train_test_split\nX_train, X_val, y_train,y_val = train_test_split(features,y)\nX_train","6a144047":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom sklearn.svm import SVC\n\nrandom_forest = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)\nrandom_forest.fit(X_train,y_train)\n\n\nk_neighbor = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nk_neighbor.fit(X_train,y_train)\n\ndecision_tree = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\ndecision_tree.fit(X_train,y_train)\n\nxgboost = XGBClassifier(n_estimators=100, random_state=0)\nxgboost.fit(X_train,y_train)\n\nsvc = SVC(kernel = 'rbf', random_state = 0)\nsvc.fit(X_train,y_train)\n\nnaive_bayes = GaussianNB()\nnaive_bayes.fit(X_train, y_train)\n\nmodels = [random_forest, k_neighbor, decision_tree, xgboost, svc]","272ea9c4":"from sklearn.model_selection import cross_val_score\ndef mean_accuracy_score(model):\n    scores = cross_val_score(model,X_train,y_train,cv=5,scoring='accuracy')\n    return scores.mean()","b7e641de":"print(\"xgboost_pipeline Score:\", mean_accuracy_score(xgboost))\n\nprint(\"random_forest_pipline Score:\", mean_accuracy_score(random_forest))\n\nprint(\"k_neighbor_pipeline Score:\", mean_accuracy_score(k_neighbor))\n\nprint(\"decision_tree_pipeline Score:\", mean_accuracy_score(decision_tree))\n\nprint(\"svc_pipeline Score:\", mean_accuracy_score(svc))\n\nprint(\"naive_bayes Score:\", mean_accuracy_score(naive_bayes))","a216dbe9":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\ny_pred = svc.predict(X_val)\naccuracy_score(y_val,y_pred)\n\n","ee2d360c":"# predicting valid data with the best model","89d33e40":"# Seprate Dependent Variable From Independents","86cf0df7":"# Find And Keep Categorical And Numerical Data","17a81c87":"# we change age into 3 groups that can give us better result ","9bcc4fda":"# Missing Values Visualization","b0d2fca2":"# Find Correlation","bc3a3224":"# Divide data into training and validation subsets","ddbb0b60":"# Label Encode Categorical Data","d634fcf6":"# Dealing with missing values"}}