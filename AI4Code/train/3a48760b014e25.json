{"cell_type":{"949c8f9a":"code","243d81f3":"code","357922f3":"code","ab3ccaa4":"code","bf7064d0":"code","89795450":"code","0fbb0838":"code","14e02803":"code","96abd056":"markdown","f19e24e7":"markdown","040e0669":"markdown","846a2458":"markdown","533357b6":"markdown","457eb138":"markdown","5f9be4db":"markdown"},"source":{"949c8f9a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","243d81f3":"df = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","357922f3":"y = df['label']\ndf = df.drop(['label'],axis=1)\n\n\nX = df.to_numpy()\nX_test_test = df_test.to_numpy()\nprint(X.shape)\nX = X.reshape(42000,28,28)\nX_test_test = X_test_test.reshape(28000,28,28)\n\n","ab3ccaa4":"df = df\/255.0\ndf_test = df_test\/255.0","bf7064d0":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.33,random_state=42)","89795450":"callbacks = keras.callbacks.EarlyStopping(monitor='sparse_categorical_accuracy', mode=min)\nmodel = keras.Sequential([keras.layers.Flatten(),\n                         keras.layers.Dense(1024,activation=tf.nn.relu),\n                         keras.layers.Dense(512,activation=tf.nn.relu),\n                         keras.layers.Dense(256,activation=tf.nn.relu),\n                          keras.layers.Dense(128,activation=tf.nn.relu),\n                          keras.layers.Dense(64,activation=tf.nn.relu),\n                          keras.layers.Dense(32,activation=tf.nn.relu),\n                          keras.layers.Dense(16,activation=tf.nn.relu),\n                         keras.layers.Dense(10,activation=tf.nn.softmax)])\nmodel.compile(optimizer=keras.optimizers.Adam(learning_rate=0.0001),\n              loss=keras.losses.SparseCategoricalCrossentropy(),\n              metrics=[keras.metrics.SparseCategoricalAccuracy()]\n             )\n\nprint ('Fit model on training data')\nmodel.fit(X_train,y_train,epochs=25,callbacks=[callbacks])\n\nprint ('Evaluate on test data')\nresult = model.evaluate(X_test,y_test)\n\nprint ('Make predictions using model')\npredictions_proba = model.predict(X_test_test)\nprediction_classes = predictions_proba.argmax(axis=-1)\nprint (prediction_classes)","0fbb0838":"print ('Make predictions using model')\npredictions_proba = model.predict(X_test_test)\nprediction_classes = predictions_proba.argmax(axis=-1)\nprint (prediction_classes)","14e02803":"submit=pd.DataFrame(columns=['ImageId','Label'])\n\nsubmit['Label'] = prediction_classes\nsubmit['ImageId'] = submit.reset_index().index + 1\nsubmit.to_csv('sample_submission.csv', index=False)\n","96abd056":"# Normalize input ","f19e24e7":"# Create submission file","040e0669":"# Train test split","846a2458":"# Create NN model fit and evaluate","533357b6":"# Create target and independent variables","457eb138":"# Make predictions","5f9be4db":"# Load Dataset"}}