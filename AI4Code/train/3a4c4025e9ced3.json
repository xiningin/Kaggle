{"cell_type":{"4be2741f":"code","344233c4":"code","8864253d":"code","24794b4f":"code","fc574301":"code","60361bdb":"code","1e10c919":"code","fe242466":"code","e562953f":"code","2cd9973a":"code","44cf4177":"code","28076069":"code","c01f0275":"code","0a6cce2a":"code","a739c451":"code","1fb8ebb3":"code","0e58948e":"code","be2d6735":"code","3d2f640f":"code","7bf68afa":"code","eb6a0660":"code","ae6b710f":"code","e729a647":"code","609f878f":"code","5b388e1c":"markdown","f5fadc1c":"markdown","c3405b84":"markdown","6d6ab3d8":"markdown","0393c86c":"markdown","22dead22":"markdown","bf8a8a3d":"markdown","bbcdf559":"markdown","04f45775":"markdown","1a687a13":"markdown","66928935":"markdown"},"source":{"4be2741f":"# # not really working\n# !pip install --upgrade pip\n\n# !pip install fastai==1.0.46","344233c4":"# load libraries\nimport fastai.vision as fv","8864253d":"# get dataset\nmnist = fv.untar_data(fv.URLs.MNIST_TINY)","24794b4f":"# get image transformer\ntfms = fv.get_transforms(do_flip=False)","fc574301":"# get data ready for training\ndata = (fv.ImageItemList.from_folder(mnist)\n        .split_by_folder()          \n        .label_from_folder()\n        .transform(tfms, size=32)\n        .databunch()\n        .normalize(fv.imagenet_stats))","60361bdb":"# check the prepared data\ndata.show_batch(1)","1e10c919":"# see more data in one go\ndata.show_batch(rows=2, figsize=(4,4))","fe242466":"# create a cnn model with pretrained weights\nlearn = fv.create_cnn(data, fv.models.resnet18, metrics=fv.accuracy)","e562953f":"# train one epoch\nlearn.fit_one_cycle(1,1e-2)","2cd9973a":"# save trained weights\nlearn.save('mini_train')","44cf4177":"# check model performance in examples\nlearn.show_results(rows=2) ","28076069":"# see model performance in examples\nlearn.show_results(ds_type=fv.DatasetType.Train, rows=2, figsize=(8,10))","c01f0275":"# import fastai.vision as fv\n\n# # check attached methods and classes\n# fv.\n\n# check hidden methods: dunder\nfv.__version__\n\n# # check basics info\n# fv?\n\n# # check source\n# fv??","0a6cce2a":"mnist = fv.untar_data(fv.URLs.MNIST_TINY)\n\n# # check all URLs\n# fv.URLs.\n\n# # print the url\n# fv.URLs.MNIST_TINY\n\n# # check args\n# fv.untar_data?\n\n# # always default?\n# # Kaggle kernels\n# # Colab notebooks\n# # your local\n\n# # check source\n# fv.untar_data??\n\n# only time I found to change default\n# a specific location to store dataset folder\n# !pwd\n# dest = fv.Path(\"\/Users\/Natsume\/Documents\/fastai\/docs_src\/my_tutorials\") # or just string \n# mnist = fv.untar_data(fv.URLs.MNIST_TINY, dest=dest)\n# mnist.ls()\n\n# (mnist\/\"valid\").ls()","a739c451":"tfms = fv.get_transforms(do_flip=False); tfms\n\n# # check args\n# fv.get_transforms?\n\n# # check source\n# fv.get_transforms??","1fb8ebb3":"data = (fv.ImageItemList.from_folder(mnist) # path list => ImageList\n        .split_by_folder()   # ImageList => ItemLists has two ImageLists (train, valid)\n        .label_from_folder() # ItemLists => 2 (train and valid) LabelLists, \n                             # train LL has a ImageList x, a CategoryList y; same to valid LL\n        .transform(tfms, size=32) # apply transformation to images, size from 28 => 32 too\n        .databunch() # LabelList => ImageDataBunch has 2 LLs (train, valid)\n                     # Train LL has x as ImageList, y as CategoryList; same to valid LL\n        .normalize(fv.imagenet_stats)) # normalize all images by mean and sd of ImageNet\n\n# # class info\n# fv.ImageList?\n\n# # class source, check methods\n# fv.ImageList??\n\n# # what does `from_folder` do?\n# # path list => ImageList\n# mnist.ls()\n# data = fv.ImageList.from_folder(mnist); data\n\n# # check args \n# fv.ImageList.from_folder?","0e58948e":"# # what does `split_by_folder` do?\n# # ImageList => ItemLists has two ImageLists (train, valid)\n# data = fv.ImageList.from_folder(mnist).split_by_folder(); data\n\n# # check args\n# fv.ImageList.split_by_folder?\n\n# # what does `label_from_folder` do?\n# # ItemLists => 2 (train and valid) LabelLists, \n# # train LL has a ImageList x, a CategoryList y; same to valid LL\n# data = fv.ImageList.from_folder(mnist).split_by_folder().label_from_folder(); data","be2d6735":"# # apply transformation to images, size from 28 => 32 too\n# data = (fv.ImageList.from_folder(mnist).split_by_folder()\n#                 .label_from_folder().transform(tfms, size=32)); data\n\n# # LabelList => ImageDataBunch has 2 LLs (train, valid)\n# # Train LL has x as ImageList, y as CategoryList; same to valid LL\n# data = (fv.ImageList.from_folder(mnist).split_by_folder()\n#                 .label_from_folder().transform(tfms, size=32)\n#                 .databunch()); data","3d2f640f":"# # normalize all images by mean and sd of ImageNet\n# data = (fv.ImageList.from_folder(mnist).split_by_folder()\n#                 .label_from_folder().transform(tfms, size=32)\n#                 .databunch()\n#                 .normalize(fv.imagenet_stats)); data","7bf68afa":"data.show_batch(1)\n# data.show_batch?\n# data.show_batch(rows=3, ds_type=fv.DatasetType.Train)\n# fv.DatasetType.Valid\n# fv.DatasetType.Train\n# fv.DatasetType.Test\n# data.show_batch(rows=3, ds_type=fv.DatasetType.Train, figsize=(5,5)) # (1,5), (5,1)","eb6a0660":"learn = fv.create_cnn(data, fv.models.resnet18, metrics=fv.accuracy)\n\n# fv.create_cnn?\n# fv.create_cnn??\n# learn.","ae6b710f":"learn.fit_one_cycle(1,1e-2)\n\n# # check all args \n# # default to the best practice\n# learn.fit_one_cycle?","e729a647":"learn.save('mini_train')\n\n# # check args\n# learn.save?\n\n# return_path = True\n# learn.save('mini_train', return_path=True)\n\n# # what is model_dir\n# learn.model_dir\n\n# # working directory\n# !pwd\n# learn.model_dir = \"\/Users\/Natsume\/Documents\/fastai\/docs_src\/my_tutorials\"","609f878f":"learn.show_results(rows=2) \n\n# # check args\n# learn.show_results?\n\n# # try ds_type\n# learn.show_results(ds_type = 1) # no effect, not working\n# learn.show_results(ds_type = fv.DatasetType.Valid) # right way\n\n# # try rows and figsize\n# learn.show_results(ds_type=fv.DatasetType.Train, rows=2, figsize=(8,10))","5b388e1c":"## `show_batch`","f5fadc1c":"## `fit_one_cycle`","c3405b84":"## `show_results`","6d6ab3d8":"## `learn.save`","0393c86c":"# Quick Workflow","22dead22":"## `create_cnn`","bf8a8a3d":"## load `fastai.vision`","bbcdf559":"## `get_transforms`","04f45775":"## `untar_data`","1a687a13":"## create `DataBunch`","66928935":"original tutorial is from https:\/\/docs.fast.ai\/tutorial.data.html#A-classification-problem"}}