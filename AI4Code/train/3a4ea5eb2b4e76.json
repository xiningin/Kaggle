{"cell_type":{"0fcea3a9":"code","7f2588a1":"code","74076787":"code","6f2f8a33":"code","0cf6f939":"code","14044619":"code","32d68e5a":"code","8f14066b":"code","3cbf7070":"code","40e62b27":"code","a347dd7a":"code","bba644b7":"code","7d662ebb":"code","e469cb92":"markdown"},"source":{"0fcea3a9":"!pip install tensorflow-addons","7f2588a1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport random\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import signal\nfrom sklearn.utils.fixes import loguniform\nfrom sklearn import model_selection, metrics\nfrom scipy.stats import uniform\nfrom tqdm.notebook import tqdm\nimport tensorflow as tf\nimport tensorflow_addons as tfa\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras import optimizers, activations, layers, Model, Input, utils, callbacks\nsns.set()\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","74076787":"train = pd.read_csv('\/kaggle\/input\/data-without-drift\/train_clean.csv')\ntest = pd.read_csv('\/kaggle\/input\/data-without-drift\/test_clean.csv')\nNUM_CLASSES = train.open_channels.nunique()\nSEQ_LENGTH = 1000\nWIDTHS = np.power(2, np.arange(-4, 9), dtype=np.float32)\ntrain.shape, test.shape","6f2f8a33":"def wavelet_transform(sig, wd):\n    widths = wd\n    wt = signal.cwt(sig.values, signal.ricker, widths)\n    wt = wt.T\n    \n    eps = np.max(wt) * 1e-2\n    s1 = np.log(np.abs(wt) + eps) - np.log(eps)\n    wt = s1 \/ np.max(s1)\n    return wt","0cf6f939":"def features(df):\n    df = df.sort_values(by=['time']).reset_index(drop=True)\n    df['batch'] = np.floor(df.index \/ 50_000).astype(int)\n    df['batch_index'] = df.index  - (df.batch * 50_000)\n    df['batch_slices'] = df['batch_index']  \/\/ 5_000\n    df['batch_slices2'] = df.batch.astype(str).str.zfill(3).astype(str).str.cat(df.batch_slices.astype(str).str.zfill(3).astype(str), sep='_')\n    df.reset_index(drop=True, inplace=True)\n    \n    transforms = df.groupby('batch').signal.apply(wavelet_transform, wd=WIDTHS)\n    transforms = np.concatenate(transforms)\n    assert transforms.shape[0] == df.shape[0]\n    wt_dict = {}\n    for i in range(len(WIDTHS)):\n        wt_dict['wt_'+str(i)] = transforms[:, i]\n    del transforms\n    wt_dict = pd.DataFrame(wt_dict)\n    df = pd.concat([df, wt_dict], axis=1, sort=False)\n    \n    for c in ['batch_slices2']:\n        d = {}\n        d['mean_'+c] = df.groupby([c])['signal'].mean()\n        d['median_'+c] = df.groupby([c])['signal'].median()\n        d['max_'+c] = df.groupby([c])['signal'].max()\n        d['min_'+c] = df.groupby([c])['signal'].min()\n        d['std_'+c] = df.groupby([c])['signal'].std()\n        d['mean_abs_chg_'+c] = df.groupby([c])['signal'].apply(lambda x: np.mean(np.abs(np.diff(x))))\n        d['abs_max_'+c] = df.groupby([c])['signal'].apply(lambda x: np.max(np.abs(x)))\n        d['abs_min_'+c] = df.groupby([c])['signal'].apply(lambda x: np.min(np.abs(x)))\n        for v in d:\n            df[v] = df[c].map(d[v].to_dict())        \n        df['range_'+c] = df['max_'+c] - df['min_'+c]\n        df['maxtomin_'+c] = df['max_'+c] \/ df['min_'+c]\n        df['abs_avg_'+c] = (df['abs_min_'+c] + df['abs_max_'+c]) \/ 2\n\n    df['signal_shift_+1'] = [0,] + list(df['signal'].values[:-1])\n    df['signal_shift_-1'] = list(df['signal'].values[1:]) + [0]\n    df['signal_shift_+2'] = [0, 0,] + list(df['signal'].values[:-2])\n    df['signal_shift_-2'] = list(df['signal'].values[2:]) + [0, 0]\n    \n    for i in df[df['batch_index']==0].index:\n        df.loc[i, 'signal_shift_+1'] = -99\n    for i in df[df['batch_index']==49999].index:\n        df.loc[i, 'signal_shift_-1'] = -99\n    for i in df[(df['batch_index']==0) | (df['batch_index']==1)].index:\n        df.loc[i, 'signal_shift_+2'] = -99\n    for i in df[(df['batch_index']==49999) | (df['batch_index']==49998)].index:\n        df.loc[i, 'signal_shift_-2'] = -99\n    return df\n\ntrain = features(train)\ntest = features(test)","14044619":"cols = [\n    'signal',\n    'mean_batch_slices2',\n    'median_batch_slices2',\n    'max_batch_slices2',\n    'min_batch_slices2',\n    'std_batch_slices2',\n    'mean_abs_chg_batch_slices2',\n    'abs_max_batch_slices2',\n    'abs_min_batch_slices2',\n    'range_batch_slices2',\n    'maxtomin_batch_slices2',\n    'abs_avg_batch_slices2',\n    'signal_shift_+1',\n    'signal_shift_-1',\n    'signal_shift_+2',\n    'signal_shift_-2',\n]\n\ncols.extend(['wt_'+str(i) for i in range(len(WIDTHS))])\nprint (len(cols))","32d68e5a":"def macro_f1(y_true, y_pred):\n    y_true = tf.reshape(y_true, [-1, NUM_CLASSES])\n    y_pred = tf.reshape(y_pred, [-1, NUM_CLASSES])\n    \n    threshold = tf.reduce_max(y_pred, axis=-1, keepdims=True)\n    y_pred = tf.logical_and(y_pred >= threshold,\n                                    tf.abs(y_pred) > 1e-12)\n    \n    y_true = tf.cast(y_true, tf.bool)\n    y_pred = tf.cast(y_pred, tf.bool)\n    \n    tp = tf.logical_and(tf.equal(y_true, True), tf.equal(y_pred, True))\n    tp = tf.cast(tp, tf.float32)\n    tp = tf.reduce_sum(tp, axis=0)\n    \n    fp = tf.logical_and(tf.equal(y_true, False), tf.equal(y_pred, True))\n    fp = tf.cast(fp, tf.float32)\n    fp = tf.reduce_sum(fp, axis=0)\n    \n    fn = tf.logical_and(tf.equal(y_true, True), tf.equal(y_pred, False))\n    fn = tf.cast(fn, tf.float32)\n    fn = tf.reduce_sum(fn, axis=0)\n    \n    precision = tf.math.divide_no_nan(tp, tf.math.add(tp, fp))\n    recall = tf.math.divide_no_nan(tp, tf.math.add(tp, fn))\n    f1 = tf.math.divide_no_nan(tf.math.multiply_no_nan(2.0, tf.math.multiply_no_nan(precision, recall)), tf.math.add(precision, recall))\n    f1 = tf.reduce_mean(f1)\n    \n    return f1","8f14066b":"def gated_residual_block(nb_filters, use_bias, i, x):\n    res_x = layers.Conv1D(nb_filters, 1, strides=1, padding='same', use_bias=use_bias)(x)\n    tanh_out = layers.Conv1D(nb_filters, 2, dilation_rate=2**i, padding='same',\n                             use_bias=use_bias, activation='tanh')(x)\n    \n    sigm_out = layers.Conv1D(nb_filters, 2, dilation_rate=2**i, padding='same',\n                             use_bias=use_bias, activation='sigmoid')(x)\n    \n    gated_out = layers.Multiply()([tanh_out, sigm_out])\n    gated_out = layers.Conv1D(nb_filters, 1, strides=1, padding='same', use_bias=use_bias)(gated_out)\n    res_x = layers.Add()([res_x, gated_out])\n    return res_x","3cbf7070":"def wavenet(NB_STACKS, DEPTH, NB_FILTERS, DROP_RATE):\n    \n    def scheduler(epoch):\n        if epoch < 10:\n            return 0.001\n        elif epoch < 20:\n            return 0.0008\n        elif epoch < 40:\n            return 0.0001\n        elif epoch < 60:\n            return 0.00008\n        elif epoch < 80:\n            return 0.00006\n        elif epoch < 120:\n            return 0.00004\n        else:\n            return 0.00002\n\n    ep = np.arange(0, 100)\n    plt.plot(ep, [scheduler(i) for i in ep])\n    plt.autoscale()\n    plt.title('Learning rate Scheduler')\n    plt.xlabel('Epochs')\n    plt.ylabel('Learning rate')\n    plt.show()\n    \n    class_names = np.arange(0, 11)\n    class_weights = np.arange(1, 12) * 1e-1 + 0.5\n    class_weights = dict(zip(class_names, class_weights))\n\n    w = (train.shape[0] \/ (len(np.bincount(train.open_channels.values))*np.bincount(train.open_channels.values)))\n    weights = dict(zip(np.arange(11), w))\n    \n    scheduler = tf.keras.callbacks.LearningRateScheduler(scheduler)\n        \n    early_stop = callbacks.EarlyStopping(monitor='val_macro_f1', patience=50, mode='max', restore_best_weights=True)\n    reduce_lr = callbacks.ReduceLROnPlateau(monitor='val_macro_f1', factor=.8, mode='max', patience=10, min_lr=1e-5, verbose=1)\n    \n    train_weights = train.open_channels.map(weights).values\n    train_input = train[cols].values.reshape(-1,SEQ_LENGTH,len(cols))\n    train_target = pd.get_dummies(train[\"open_channels\"]).values.reshape(-1,SEQ_LENGTH,NUM_CLASSES)\n    idx = np.arange(train_input.shape[0])\n    train_idx, val_idx = model_selection.train_test_split(idx, random_state = 0, test_size = 0.2)\n    \n    tf.keras.backend.clear_session()\n    seq_length = SEQ_LENGTH\n    dilation_depth = DEPTH\n    nb_filters = NB_FILTERS\n    use_bias=False\n    batch_size=40\n    nb_stacks = NB_STACKS\n    \n    model_in = Input(shape=(seq_length, len(cols)))\n    out = layers.Conv1D(64, 7, strides=1, padding='same', dilation_rate=1,)(model_in)\n    for stack in range(nb_stacks):\n        for depth in range(dilation_depth):\n            out = gated_residual_block(nb_filters, use_bias, depth, out)\n    out = layers.Conv1D(nb_filters, 2, strides=1, padding='same', activation='relu')(out)\n    out = layers.Dropout(.2)(out)\n    model_out = layers.TimeDistributed(layers.Dense(NUM_CLASSES, activation='softmax'))(out)\n    \n    model = Model(model_in, model_out)\n    opt = optimizers.Adam(learning_rate=1e-3)\n    opt = tfa.optimizers.SWA(opt)\n    model.compile(optimizer=opt,\n                  loss='categorical_crossentropy',\n                  metrics=[macro_f1],\n                  sample_weight_mode=None,)\n    results = model.fit(train_input[train_idx,:,:], train_target[train_idx,:, :],\n                        sample_weight=train_weights[train_idx],\n                        epochs=1000, verbose=0, callbacks=[early_stop, scheduler],\n                        validation_data=(train_input[val_idx,:,:], train_target[val_idx,:,:]),\n                        batch_size=batch_size,\n                        shuffle=True)\n    \n    preds = model.predict(train_input[val_idx,:,:])\n    preds = preds.reshape(-1, NUM_CLASSES)\n    preds = np.argmax(preds, axis=1)\n    f1_score = metrics.f1_score(np.argmax(train_target[val_idx].reshape(-1,NUM_CLASSES), axis=1), preds, average='macro')\n    return model, results, f1_score","40e62b27":"def compute_receptive_field(dilation_depth, nb_stacks):\n    receptive_field = nb_stacks * (2**dilation_depth * 2) - (nb_stacks - 1)\n    return receptive_field\n\ncompute_receptive_field(9, 1)","a347dd7a":"best_model, best_r, best_score = wavenet(9, 1, 128, 0)\nprint(f'Macro F1: {best_score}')","bba644b7":"fig, ax = plt.subplots(1, 2, figsize=(16,6))\nax[0].plot(best_r.history['loss'])\nax[0].plot(best_r.history['val_loss'])\nax[0].set_title('Model loss')\nax[0].set_xlabel('Epochs')\nax[0].set_ylabel('Loss')\nax[0].set_ylim([0.02, 0.125])\nax[0].legend(['Train', 'Test'], loc='upper left')\n\nax[1].plot(best_r.history['macro_f1'])\nax[1].plot(best_r.history['val_macro_f1'])\nax[1].set_title('Model Accuracy')\nax[1].set_xlabel('Epochs')\nax[1].set_ylabel('Accuracy')\nax[1].set_ylim([0.9, 0.95])\nax[1].legend(['Train', 'Test'], loc='upper left')\nplt.show()","7d662ebb":"preds = best_model.predict(test[cols].values.reshape(-1,SEQ_LENGTH,len(cols)))\npreds = preds.reshape(-1, 11)\npreds = np.argmax(preds, axis=1)\ntest['open_channels'] = preds\ntest[['time', 'open_channels']].to_csv('submission.csv', index=False, float_format='%.4f')","e469cb92":"Preprocessing function inspired from https:\/\/www.kaggle.com\/jazivxt\/physically-possible"}}