{"cell_type":{"4290c2e9":"code","d46dc3d5":"code","96f2059e":"code","6d4f1c72":"code","429677de":"code","f4764f9b":"code","1a0c6789":"code","6725b89d":"code","529e06a2":"code","a98c24de":"code","e4e3344c":"code","8a0f037a":"code","4ead221d":"code","e8bf1fdd":"code","676814d5":"code","3423fa06":"code","9ee7493f":"code","c1e15d2b":"code","93f2547d":"code","e7c9e3a0":"code","ce0f7084":"code","5ff6e84b":"code","71c8413d":"code","0dc5ddc7":"code","6b483bdb":"code","c9e7b099":"code","4ed6503f":"code","24dfd550":"markdown"},"source":{"4290c2e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d46dc3d5":"import os\nos.listdir()","96f2059e":"import pandas as pd\nimport numpy as np","6d4f1c72":"#lets load the data\ndata = pd.read_csv('..\/input\/lego-minifigures-classification\/index.csv')\ndata.head(10)","429677de":"#lets check abt the data df\ndata.shape","f4764f9b":"data['class_id'].value_counts()","1a0c6789":"data.isnull().sum()","6725b89d":"import cv2\nimport matplotlib.pyplot as plt","529e06a2":"for path in data['path']:\n    img = cv2.imread(str('..\/input\/lego-minifigures-classification'+'\/'+path))\n    #plt.imshow(img)\n    print(np.array(img))\n    print(np.array(img)\/255)\n    break","a98c24de":"#lets load all the images\nX = []\ny = []\n\nfor path in data['path']:\n    img = cv2.imread(str('..\/input\/lego-minifigures-classification'+'\/'+path))\n    #print(img)\n    resized_img = cv2.resize(img,(224,224))\n    #print(resized_img)\n    scaled_img = np.array(resized_img)\/255\n    X.append(scaled_img)\n    \ny = np.array(data['class_id'])-1","e4e3344c":"X = np.array(X)\ny = np.array(y)","8a0f037a":"X[0]","4ead221d":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(X,y,random_state=0)","e8bf1fdd":"print(f'train size : {x_train.shape}')\nprint(f'test size : {x_test.shape}')","676814d5":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers,Sequential\n","3423fa06":"data_augmentation = Sequential([\n    layers.experimental.preprocessing.RandomFlip('horizontal',input_shape = (512,512,3)),\n    layers.experimental.preprocessing.RandomRotation(0.1),\n    layers.experimental.preprocessing.RandomZoom(0.1),\n])","9ee7493f":"print(len(data['class_id'].value_counts()))\nprint(len(data['class_id'].unique()))","c1e15d2b":"num_classes = len(data['class_id'].value_counts())","93f2547d":"#model building\nmodel = Sequential([\n    data_augmentation,\n    layers.Conv2D(64,3,padding='same',activation='relu'),\n    layers.MaxPooling2D(),\n    layers.Conv2D(32,3,padding='same',activation='relu'),\n    layers.MaxPooling2D(),\n    layers.Conv2D(16,3,padding='same',activation='relu'),\n    layers.Flatten(),\n    layers.Dense(128,activation='relu'),\n    layers.Dense(num_classes),\n])","e7c9e3a0":"model.compile(\nloss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\noptimizer = 'adam',\nmetrics = ['accuracy'],\n)","ce0f7084":"model.fit(x_train,y_train,validation_data=(x_test,y_test),epochs=50,verbose=2)","5ff6e84b":"#lets try transfer learning methods\nmodel_1 = tf.keras.applications.DenseNet121()\nbase_input = model_1.layers[0].input\nbase_output = model_1.layers[-2].output\noutput = layers.Dense(num_classes,activation='softmax')(base_output)\nnew_model = keras.Model(inputs = base_input,outputs = output)\nprint(new_model.summary())","71c8413d":"new_model.compile(loss = tf.keras.losses.SparseCategoricalCrossentropy(),optimizer ='adam',metrics=['accuracy'])","0dc5ddc7":"new_model.fit(x_train,y_train,epochs = 50,validation_data=(x_test,y_test))","6b483bdb":"image = cv2.imread('..\/input\/lego-minifigures-classification\/marvel\/0001\/001.jpg')\n# read the image \nimage = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\nimage = cv2.resize(image, dsize=(224,224))\/255\nplt.imshow(image)\nimage = np.reshape(image,(1,224,224,3))\nans = new_model.predict(image).argmax()\nans = ans+1\nmetadata = pd.read_csv('..\/input\/lego-minifigures-classification\/metadata.csv')\nname = metadata['minifigure_name'][metadata['class_id']==ans].iloc[0]\nprint(f'minifigure name : {name}')","c9e7b099":"metadata = pd.read_csv('..\/input\/lego-minifigures-classification\/metadata.csv')\nmetadata['minifigure_name'][metadata['class_id']==1].iloc[0]","4ed6503f":"metadata","24dfd550":"we dont have null values..good for us"}}