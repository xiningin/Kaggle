{"cell_type":{"491d2887":"code","d1a1dfff":"code","eda691d2":"code","039f069d":"code","d3cd3780":"code","12231ec1":"code","5e6da432":"code","ea042208":"code","e4583853":"code","41db781e":"code","854fd920":"code","c2a4ad89":"code","3333e14e":"code","70f31099":"code","e4ab419d":"code","92e673ca":"code","9d2d6094":"code","76177f27":"code","b587d0ac":"code","6d56bce6":"code","57d1c8ed":"code","602f607c":"code","d49ed898":"code","c76c477f":"markdown"},"source":{"491d2887":"#Modules import\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\nfrom bq_helper import BigQueryHelper\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn import svm, datasets, model_selection, preprocessing, metrics\nfrom sklearn.model_selection import KFold, cross_val_score, cross_val_predict\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import make_classification\n\n\n","d1a1dfff":"years =range(2008,2018)","eda691d2":"helper = BigQueryHelper('bigquery-public-data', 'noaa_gsod')\n\nsql = '''\nSELECT\n    year, mo, da, temp, min, max, prcp, stn, b.lat,b.lon,tornado_funnel_cloud, wdsp, gust, slp, dewp, thunder, hail, snow_ice_pellets, fog, rain_drizzle, sndp\n\nFROM\n    `bigquery-public-data.noaa_gsod.gsod{}` a\n\nINNER JOIN\n`bigquery-public-data.noaa_gsod.stations` b ON a.stn = b.usaf AND a.wban=b.wban\n\nWHERE \n    b.country = 'US'\n    AND b.state = 'TX' OR b.state = 'OK' OR b.state = 'LA' OR b.state = 'MISS' OR b.state = 'AL' OR b.state = 'AR' OR b.state = 'TN' OR b.state = 'MO' OR b.state='KY' OR b.state= 'IL' OR b.state = 'IN'\n '''","039f069d":"weather = [ helper.query_to_pandas(sql.format(i)) for i in years ]\nweather = pd.concat(weather)\n","d3cd3780":"#run if you want to download CSV and use outside of kaggle\n#weather.to_csv('weather.csv', index = False)","12231ec1":"tornado_funnel_cloud = np.array(weather['tornado_funnel_cloud'])\nhail = np.array(weather['hail'])\nthunder = np.array(weather['thunder'])\nsnow_ice_pellets = np.array(weather['snow_ice_pellets'])\nfog = np.array(weather['fog'])\nrain_drizzle = np.array(weather['rain_drizzle'])\n\n#print(len(thunder))\n#print(len(weather))\n\n#logical or function was being dumb\nstormLabel = tornado_funnel_cloud+hail+thunder+snow_ice_pellets+fog+rain_drizzle #make new storm vector- combination of storms\n\nstormLabel = [int(q) for q in stormLabel]\n\nfor q in range(len(stormLabel)):\n    if stormLabel[q] > 1:\n        stormLabel[q] = 1\nweather['Storm']=stormLabel","5e6da432":"allStorms=weather[weather['Storm']==1]\nnoStorm=weather[weather['Storm']==0]\n\n#creating a 50\/50 split\nnoStormSampled=noStorm.sample(allStorms.shape[0])\n\nX=allStorms.append(noStormSampled)\nY=X.Storm\nX=np.array(X.drop(columns=['tornado_funnel_cloud','year','mo','da','stn','lat','lon','thunder', 'hail', 'snow_ice_pellets', 'fog', 'rain_drizzle','Storm']))\n","ea042208":"normX = preprocessing.normalize(X) \nstanX = preprocessing.scale(X)\nnewX = preprocessing.scale(normX)\n\n#k = X.shape[0]\/2\n\ntree1 = DecisionTreeClassifier()\ntree1.fit(X,Y)\ny_pred1 = cross_val_predict(tree1, newX, Y, cv=5)\nprint(metrics.classification_report(Y, y_pred1))\nprint(metrics.confusion_matrix(Y, y_pred1)) #TN, FP; FN, TP","e4583853":"\nclf = RandomForestClassifier(max_depth=2, random_state=0, n_estimators = 100)\ny_pred_forest = cross_val_predict(clf,normX,Y,cv=5)\nprint(metrics.classification_report(Y, y_pred_forest))\nprint(metrics.confusion_matrix(stormLabel, y_pred_forest)) #TN, FP; FN, TP\n","41db781e":"Tornados=allStorms[allStorms['tornado_funnel_cloud']=='1']\nnoTornados=allStorms[allStorms['tornado_funnel_cloud']=='0']\nprint(Tornados.shape)\nprint(noTornados.shape)","854fd920":"Tornados=allStorms[allStorms['tornado_funnel_cloud']=='1']\nnoTornados=allStorms[allStorms['tornado_funnel_cloud']=='0']\nn=4*Tornados.shape[0]\nnoTornadoSampled=noTornados.sample(n)\nX=Tornados.append(noTornadoSampled)\nY=X.tornado_funnel_cloud\nX=np.array(X.drop(columns=['tornado_funnel_cloud','year','mo','da','stn','lat','lon','thunder', 'hail', 'snow_ice_pellets', 'fog', 'rain_drizzle','Storm']))","c2a4ad89":"normX = preprocessing.normalize(X) \nstanX = preprocessing.scale(X)\nnewX = preprocessing.scale(normX)\n\ntree2 = DecisionTreeClassifier()\ntree2.fit(X,Y)\ny_pred = cross_val_predict(tree2, newX, Y, cv=5)\nprint(metrics.classification_report(Y, y_pred))\nprint(metrics.confusion_matrix(Y, y_pred)) #TN, FP; FN, TP","3333e14e":"print(y_pred1)","70f31099":"output1=tree1.predict(weather.drop(columns=['tornado_funnel_cloud','year','mo','da','stn','lat','lon','thunder', 'hail', 'snow_ice_pellets', 'fog', 'rain_drizzle','Storm']))\nweather['output1']=output1\nfiltered=weather[weather['output1']==1]","e4ab419d":"output2=tree2.predict(filtered.drop(columns=['tornado_funnel_cloud','year','mo','da','stn','lat','lon','thunder', 'hail', 'snow_ice_pellets', 'fog', 'rain_drizzle','Storm','output1']))\nfiltered['output2']=output2","92e673ca":"ones=filtered[filtered['output2']=='1']\n\nTP=ones[ones['tornado_funnel_cloud']=='1']\nFP=ones[ones['tornado_funnel_cloud']=='0']\n\n\nzeros=filtered[filtered['output2']=='0']\nTN=zeros[zeros['tornado_funnel_cloud']=='0']\nFN=zeros[zeros['tornado_funnel_cloud']=='1']\n\nprint('TP = ',TP.shape[0])","9d2d6094":"print('TP = ',TP.shape[0])\nprint('FP = ',FP.shape[0])\nprint('TN = ',TN.shape[0])\nprint('FN = ',FN.shape[0])","76177f27":"TP.shape[0]\/weather.shape[0]*100","b587d0ac":"snow=allStorms[allStorms['snow_ice_pellets']=='1']\nnoSnow=allStorms[allStorms['snow_ice_pellets']=='0']\nn=4*snow.shape[0]\nnoSnowSampled=noSnow.sample(n)\nX=snow.append(noSnowSampled)\nY=X.snow_ice_pellets\nX=np.array(X.drop(columns=['tornado_funnel_cloud','year','mo','da','stn','lat','lon','thunder', 'hail', 'snow_ice_pellets', 'fog', 'rain_drizzle','Storm']))\n\nnormX = preprocessing.normalize(X) \nstanX = preprocessing.scale(X)\nnewX = preprocessing.scale(normX)\n\ntree3 = DecisionTreeClassifier()\ntree3.fit(X,Y)\ny_pred = cross_val_predict(tree3, newX, Y, cv=5)\nprint(metrics.classification_report(Y, y_pred))\nprint(metrics.confusion_matrix(Y, y_pred)) #TN, FP; FN, TP","6d56bce6":"Tornados=allStorms[allStorms['tornado_funnel_cloud']=='1']\nnoTornados=allStorms[allStorms['tornado_funnel_cloud']=='0']\nn=Tornados.shape[0]\nnoTornadoSampled=noTornados.sample(n)\nX=Tornados.append(noTornadoSampled)\nY=X.tornado_funnel_cloud\nX=np.array(X.drop(columns=['tornado_funnel_cloud','year','mo','da','stn','lat','lon','thunder', 'hail', 'snow_ice_pellets', 'fog', 'rain_drizzle','Storm']))\n\nnormX = preprocessing.normalize(X) \nstanX = preprocessing.scale(X)\nnewX = preprocessing.scale(normX)\n\ntree3 = DecisionTreeClassifier()\ntree3.fit(X,Y)\ny_pred = cross_val_predict(tree3, newX, Y, cv=5)\nprint(metrics.classification_report(Y, y_pred))\nprint(metrics.confusion_matrix(Y, y_pred)) #TN, FP; FN, TP","57d1c8ed":"years =range(2005,2008)\nweather2 = [ helper.query_to_pandas(sql.format(i)) for i in years ]\nweather2 = pd.concat(weather2)","602f607c":"tornado_funnel_cloud = np.array(weather2['tornado_funnel_cloud'])\nhail = np.array(weather2['hail'])\nthunder = np.array(weather2['thunder'])\nsnow_ice_pellets = np.array(weather2['snow_ice_pellets'])\nfog = np.array(weather2['fog'])\nrain_drizzle = np.array(weather2['rain_drizzle'])\n\n\n#logical or function was being dumb\nstormLabel = tornado_funnel_cloud+hail+thunder+snow_ice_pellets+fog+rain_drizzle #make new storm vector- combination of storms\n\nstormLabel = [int(q) for q in stormLabel]\n\nfor q in range(len(stormLabel)):\n    if stormLabel[q] > 1:\n        stormLabel[q] = 1\nweather2['Storm']=stormLabel\n\noutput1=tree1.predict(weather2.drop(columns=['tornado_funnel_cloud','year','mo','da','stn','lat','lon','thunder', 'hail', 'snow_ice_pellets', 'fog', 'rain_drizzle','Storm']))\nweather2['output1']=output1\nfiltered=weather2[weather2['output1']==1]\n\noutput2=tree2.predict(filtered.drop(columns=['tornado_funnel_cloud','year','mo','da','stn','lat','lon','thunder', 'hail', 'snow_ice_pellets', 'fog', 'rain_drizzle','Storm','output1']))\nfiltered['output2']=output2\n\nones=filtered[filtered['output2']=='1']\n\nTP=ones[ones['tornado_funnel_cloud']=='1']\nFP=ones[ones['tornado_funnel_cloud']=='0']\n\n\nzeros=filtered[filtered['output2']=='0']\nTN=zeros[zeros['tornado_funnel_cloud']=='0']\nFN=zeros[zeros['tornado_funnel_cloud']=='1']\n\n","d49ed898":"print('TP = ',TP.shape[0])\nprint('FP = ',FP.shape[0])\nprint('TN = ',weather2.shape[0]-filtered.shape[0]+TN.shape[0])\nprint('FN = ',FN.shape[0])\n","c76c477f":"**This kernel aims to take advantage of the publicly available data from NOAA with the help of BigQuery in order to explore temperature trends in US. "}}