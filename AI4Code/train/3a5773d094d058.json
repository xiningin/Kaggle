{"cell_type":{"3185d5f1":"code","962ce8e0":"code","85806edc":"code","0e458887":"code","07766979":"code","686cefa9":"code","6469d80c":"code","b1516f8f":"code","1ee808aa":"code","fd484bcf":"code","4f777eaa":"code","bdddea7d":"code","9ff3c083":"code","9d681266":"code","21f4f579":"code","d2d1516a":"code","ee7c399f":"code","088552b1":"code","eca36957":"code","97124871":"code","e324386a":"code","365e888a":"code","124d31c7":"code","3f432f91":"code","68343dd0":"code","806cdddd":"code","4bf0ffce":"code","e7649228":"code","15b9c4ce":"code","85fd09be":"code","e09003da":"code","dd480379":"code","6561c2e8":"code","e47b210d":"code","ac366ebb":"code","e47ad9a9":"code","5ce7f2fa":"code","2d9f35e2":"code","bd5c60de":"code","d8d79793":"code","2fe636c2":"code","f7f7356c":"code","ffae22f4":"code","c75ee29f":"code","0b96dc49":"code","452ad99f":"code","334d5aa8":"code","dee60529":"code","c29fe8ae":"code","b08e0850":"code","641f1089":"code","deaa6281":"code","248ff00c":"code","7ff93668":"code","b1f7890c":"code","3c095568":"code","0380280f":"code","fe92674b":"code","ba88b547":"code","709847a1":"code","ad1feadc":"code","bdae2200":"code","14eea262":"code","f712be3a":"code","5506c0f3":"code","4c64460a":"code","c6695ce7":"code","273a4a65":"code","31537bb1":"code","82940853":"code","e87abd99":"code","2c40b454":"code","ccffb71f":"code","31576d39":"code","dcedbbac":"code","73194a71":"code","dd8db7d5":"code","1df8288f":"code","61c0c738":"code","38d82841":"code","a44d25fd":"code","ba46f3ac":"code","9faa7d8a":"code","7cef450b":"code","6da3c7a0":"code","9c04ba27":"code","11c329b2":"code","4d907f47":"code","b5d4b98f":"code","badd58ae":"code","3b16e05e":"code","26221c02":"code","d97fec47":"code","26ba5dcc":"code","a4a74525":"code","e6c56066":"code","cd7b6808":"markdown"},"source":{"3185d5f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n!%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","962ce8e0":"df = pd.read_csv('\/kaggle\/input\/zomato-bangalore-restaurants\/zomato.csv')\ndf.head()","85806edc":"df.isna().sum()","0e458887":"df.drop_duplicates(inplace=True)","07766979":"df.info()","686cefa9":"new_df = df.drop(['url','address','phone','menu_item','listed_in(city)','dish_liked','reviews_list'],axis=1)","6469d80c":"new_df.head()","b1516f8f":"new_df['listed_in(type)'].unique()","1ee808aa":"new_df.isnull().sum()","fd484bcf":"new_df.dropna(inplace=True)","4f777eaa":"new_df.info()","bdddea7d":"# new_df.drop_duplicates(inplace=True)","9ff3c083":"# new_df.info()","9d681266":"new_df['rate'].unique()","21f4f579":"new_df = new_df.loc[new_df['rate'] != 'NEW']\nnew_df = new_df.loc[new_df['rate'] != '-']\n\nnew_df['rate'] = new_df['rate'].str.replace('\/5','')\nnew_df['rate'] = new_df['rate'].astype(float)\nnew_df.head()","d2d1516a":"new_df['rate'].unique()","ee7c399f":"new_df.info()","088552b1":"new_df['approx_cost(for two people)'].unique()","eca36957":"new_df['approx_cost(for two people)'] = new_df['approx_cost(for two people)'].str.replace(',','')\nnew_df['approx_cost(for two people)'] = new_df['approx_cost(for two people)'].astype(int)\nnew_df.info()","97124871":"new_df = new_df.reset_index(drop=True)\nnew_df","e324386a":"sns.heatmap(new_df.corr(),annot=True)","365e888a":"sns.countplot(new_df.online_order)","124d31c7":"sns.countplot(new_df.book_table)","3f432f91":"plt.figure(figsize=(20,20))\nsns.barplot(new_df.rest_type,new_df.rate)\nplt.xticks(rotation=90);","68343dd0":"plt.figure(figsize=(20,20))\nsns.barplot(new_df.location,new_df.rate)\nplt.xticks(rotation=90);","806cdddd":"sns.histplot(new_df.votes)\nplt.xlim(0,8000)","4bf0ffce":"sns.scatterplot(new_df.votes,new_df.rate)","e7649228":"sns.scatterplot(new_df['approx_cost(for two people)'],new_df.rate)","15b9c4ce":"new_df['approx_cost(for two people)'].describe()","85fd09be":"new_df=new_df.rename(columns={'approx_cost(for two people)':'cost'})","e09003da":"u_limit,l_limit = new_df.cost.mean()+4*new_df.cost.std(),new_df.cost.mean()-new_df.cost.std()\nu_limit,l_limit","dd480379":"new_df2 = new_df[(new_df.cost < u_limit) & (new_df.cost > l_limit)]","6561c2e8":"new_df2","e47b210d":"new_df.votes.describe()","ac366ebb":"u_limit,l_limit = new_df2.votes.mean()+5*new_df2.votes.std(),0","e47ad9a9":"new_df3 = new_df2[(new_df2.votes < u_limit) & (new_df2.votes > 0)]","5ce7f2fa":"new_df3","2d9f35e2":"new_df3.location.value_counts()","bd5c60de":"plt.figure(figsize=(20,20))\nsns.histplot(new_df3.location)\nplt.xticks(rotation=90);","d8d79793":"sns.histplot(new_df3.rate)","2fe636c2":"plt.hist(new_df.rate)","f7f7356c":"\nsns.histplot(new_df3['listed_in(type)'])\nplt.xticks(rotation=90);","ffae22f4":"new_df3.cuisines.nunique()","c75ee29f":"from sklearn.preprocessing import LabelEncoder","0b96dc49":"LE = LabelEncoder()","452ad99f":"new_df3['online_order'] = LE.fit_transform(new_df3['online_order'])","334d5aa8":"new_df3['book_table'] = LE.fit_transform(new_df3['book_table'])\nnew_df3['location'] = LE.fit_transform(new_df3['location'])\nnew_df3['listed_in(type)'] = LE.fit_transform(new_df3['listed_in(type)'])","dee60529":"new_df3 = new_df3.reset_index(drop=True)","c29fe8ae":"new_df3","b08e0850":"new_df4 = new_df3.copy()\nnew_df4['rest_type'] = new_df4['rest_type'].str.split(',')\nnew_df4['cuisines'] = new_df4['cuisines'].str.split(',')\nnew_df4.head()","641f1089":"new_df4 = new_df4.copy()\nnew_df4['rest_type'] = new_df4['rest_type'].apply(lambda x:[i.strip(' ') for i in x])\nnew_df4['cuisines'] = new_df4['cuisines'].apply(lambda x:[i.strip(' ') for i in x])\nnew_df4.head()\n","deaa6281":"new_df5 = new_df4.copy()\n\n#For every row in the dataframe, iterate through the list of genres and place a 1 into the corresponding column\nfor index, row in new_df5.iterrows():\n    for rest_type in row['rest_type']:\n        new_df5.at[index, rest_type] = 1\n\nnew_df5 = new_df5.fillna(0)\nnew_df5.head()","248ff00c":"new_df6 = new_df5.copy()\n\n#For every row in the dataframe, iterate through the list of genres and place a 1 into the corresponding column\nfor index, row in new_df6.iterrows():\n    for cuisines in row['cuisines']:\n        new_df6.at[index, cuisines] = 1\n\nnew_df6 = new_df6.fillna(0)\nnew_df6.head()","7ff93668":"new_df6.drop(['name','rest_type','cuisines'],axis=1,inplace=True)","b1f7890c":"new_df6","3c095568":"X = new_df6.drop('rate',axis=1)\nX","0380280f":"y = new_df6.rate\ny","fe92674b":"def correl(dataset,thresh):\n    col_corr = set()\n    cor_matrix = X.corr()\n    for i in range(len(cor_matrix)):\n        for j in range(i):\n            if abs(cor_matrix.iloc[i,j])>thresh:\n                col_name=cor_matrix.columns[j]\n                col_corr.add(col_name)\n    return col_corr","ba88b547":"correl(new_df6,0.9)","709847a1":"X.drop(['Jewish', 'Meat Shop'],axis=1)","ad1feadc":"from sklearn.model_selection import train_test_split","bdae2200":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","14eea262":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel = RandomForestRegressor()","f712be3a":"para_dict = {\n    'n_estimators' : [100,200,400,500,800,1000],\n    'max_depth' : [5,10,15,20,25,30],\n    'max_features' : ['auto','sqrt','log2'],\n    'min_samples_leaf' : [1,2,3,4]\n}","5506c0f3":"# search = RandomizedSearchCV(model,para_dict,n_iter=20)","4c64460a":"# search.fit(X_train,y_train)","c6695ce7":"# search.best_estimator_","273a4a65":"#For n_iter = 20\n#RandomForestRegressor(max_depth=30, n_estimators=400)\n\n#For n_iter = 10\n#RandomForestRegressor(max_depth=25, min_samples_leaf=2, n_estimators=800)","31537bb1":"tree = RandomForestRegressor(max_depth=30, n_estimators=400)","82940853":"tree.fit(X_train,y_train)","e87abd99":"y_pred = tree.predict(X_test)","2c40b454":"tree.score(X_train,y_train)","ccffb71f":"tree.score(X_test,y_test)","31576d39":"tree_importance_df = pd.DataFrame({\n    'Features' : X.columns,\n    'Importance' : tree.feature_importances_\n}).sort_values('Importance', ascending=False)","dcedbbac":"tree_importance_df","73194a71":"tree_importance_df.head(50)","dd8db7d5":"X1 = X[tree_importance_df.Features.head(30).values]","1df8288f":"X1_train, X1_test, y_train, y_test = train_test_split(X1, y, test_size=0.33, random_state=42)","61c0c738":"tree.fit(X1_train,y_train)","38d82841":"tree.score(X1_train,y_train)","a44d25fd":"tree.score(X1_test,y_test)","ba46f3ac":"from sklearn.metrics import mean_squared_log_error\n\nMSLE_1st = mean_squared_log_error(y_test,y_pred)","9faa7d8a":"MSLE_1st","7cef450b":"y_pred2 = tree.predict(X1_test)","6da3c7a0":"MSLE_2nd = mean_squared_log_error(y_test,y_pred2)","9c04ba27":"MSLE_2nd","11c329b2":"from sklearn.feature_selection import mutual_info_regression\nfrom sklearn.feature_selection import SelectKBest","4d907f47":"selec = SelectKBest(mutual_info_regression,k=30)\nselec.fit(X,y)","b5d4b98f":"X2 = X[X.columns[selec.get_support()]]","badd58ae":"X2","3b16e05e":"X2_train, X2_test, y_train, y_test = train_test_split(X2, y, test_size=0.33, random_state=42)","26221c02":"tree.fit(X2_train,y_train)","d97fec47":"y_pred3 = tree.predict(X2_test)","26ba5dcc":"tree.score(X2_train,y_train)","a4a74525":"tree.score(X2_test,y_test)","e6c56066":"MSLE_3rd = mean_squared_log_error(y_test,y_pred3)\nMSLE_3rd","cd7b6808":"## Visualization"}}