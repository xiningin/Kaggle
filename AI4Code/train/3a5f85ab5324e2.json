{"cell_type":{"96b0b3ed":"code","334fd300":"code","cb026eb3":"code","0328c474":"code","9ac9f7e2":"code","0850ed3f":"code","223eeda8":"code","767ce304":"code","88d8edca":"code","627f7adc":"code","7a8326ee":"code","7067441c":"code","190f645a":"code","a0ee7a8d":"code","38bc15d5":"code","a81b6c3a":"code","5a31a363":"markdown","203e58de":"markdown","84af86b2":"markdown","1b4219bf":"markdown","0c647665":"markdown","da709e90":"markdown","17d0ba18":"markdown","e3185435":"markdown","9ce70076":"markdown","54d5411c":"markdown","585a8a57":"markdown","f7ac2dc7":"markdown","abdfd9a4":"markdown","56676753":"markdown","17a0df9c":"markdown","8e91dd32":"markdown","fdedb1a3":"markdown","11238384":"markdown"},"source":{"96b0b3ed":"# Input data files are available in the \"..\/input\/\" directory.\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\n","334fd300":"global_data = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\nglobal_data.head()","cb026eb3":"#We will use it to smooth the data for growth factor..\ndef smoother(inputdata,w,imax):\n    data = 1.0*inputdata\n    data = data.replace(np.nan,1)\n    data = data.replace(np.inf,1)\n    #print(data)\n    smoothed = 1.0*data\n    normalization = 1\n    for i in range(-imax,imax+1):\n        if i==0:\n            continue\n        smoothed += (w**abs(i))*data.shift(i,axis=0)\n        normalization += w**abs(i)\n    smoothed \/= normalization\n    return smoothed\n# function to compute growth factor\ndef growth_factor(confirmed):\n    confirmed_iminus1 = confirmed.shift(1, axis=0)\n    confirmed_iminus2 = confirmed.shift(2, axis=0)\n    return (confirmed-confirmed_iminus1)\/(confirmed_iminus1-confirmed_iminus2)\n#function to compute growth ratio\ndef growth_ratio(confirmed):\n    confirmed_iminus1 = confirmed.shift(1, axis=0)\n    return (confirmed\/confirmed_iminus1)\n\n# We don't need a function for growth rate since we can use the np.gradient() function.\n\n# This is a function which plots (for in input country) the active, confirmed, and recovered cases, deaths, and the growth factor.\ndef plot_country_active_confirmed_recovered_growth_metrics(country):\n    \n    # Plots Active, Confirmed, and Recovered Cases. Also plots deaths.\n    country_data = global_data[global_data['Country\/Region']==country]\n    table = country_data.drop(['SNo','Province\/State', 'Last Update'], axis=1)\n    table['ActiveCases'] = table['Confirmed'] - table['Recovered'] - table['Deaths']\n    table2 = pd.pivot_table(table, values=['ActiveCases','Confirmed', 'Recovered','Deaths'], index=['ObservationDate'], aggfunc=np.sum)\n    table3 = table2.drop(['Deaths'], axis=1)\n   \n    # Growth Factor\n    w = 0.5\n    table2['GrowthFactor'] = growth_factor(table2['Confirmed'])\n    table2['GrowthFactor'] = smoother(table2['GrowthFactor'],w,5)\n\n    # 2nd Derivative\n    table2['2nd_Derivative'] = np.gradient(np.gradient(table2['Confirmed'])) #2nd derivative\n    table2['2nd_Derivative'] = smoother(table2['2nd_Derivative'],w,7)\n\n\n    #Plot confirmed[i]\/confirmed[i-1], this is called the growth ratio\n    table2['GrowthRatio'] = growth_ratio(table2['Confirmed'])\n    table2['GrowthRatio'] = smoother(table2['GrowthRatio'],w,5)\n    \n    #Plot the growth rate, we will define this as k in the logistic function presented at the beginning of this notebook.\n    table2['GrowthRate']=np.gradient(np.log(table2['Confirmed']))\n    table2['GrowthRate'] = smoother(table2['GrowthRate'],0.5,3)\n    \n    # horizontal line at growth rate 1.0 for reference\n    x_coordinates = [1, 100]\n    y_coordinates = [1, 1]\n    #plots\n    table2['Deaths'].plot(title='Deaths')\n    plt.show()\n    table3.plot() \n    plt.show()\n    table2['GrowthFactor'].plot(title='Growth Factor')\n    plt.plot(x_coordinates, y_coordinates) \n    plt.show()\n    table2['2nd_Derivative'].plot(title='2nd_Derivative')\n    plt.show()\n    table2['GrowthRatio'].plot(title='Growth Ratio')\n    plt.plot(x_coordinates, y_coordinates)\n    plt.show()\n    table2['GrowthRate'].plot(title='Growth Rate')\n    plt.show()\n\n    \n   # import plotly.express as px\n   # table3 = table3.melt(id_vars=\"ObservationDate\", value_vars=['ActiveCases','Confirmed','Recovered'],\n   #              var_name='case', value_name='count')\n   # table3.reindex()\n   # fig = px.area(table3, x=\"ObservationDate\", y=\"count\", color='case',\n   #              title='Confirmed Cases', color_discrete_sequence = ['cyan', 'red', 'orange'])\n   # fig.show()\n\n    return \n","0328c474":"plot_country_active_confirmed_recovered_growth_metrics('Mainland China')","9ac9f7e2":"plot_country_active_confirmed_recovered_growth_metrics('South Korea')","0850ed3f":"plot_country_active_confirmed_recovered_growth_metrics('US')\n","223eeda8":"plot_country_active_confirmed_recovered_growth_metrics('Germany')","767ce304":"plot_country_active_confirmed_recovered_growth_metrics('Italy')","88d8edca":"plot_country_active_confirmed_recovered_growth_metrics('Netherlands')","627f7adc":"plot_country_active_confirmed_recovered_growth_metrics('Russia')","7a8326ee":"plot_country_active_confirmed_recovered_growth_metrics('New Zealand')","7067441c":"restofworld_data = global_data\nfor country in restofworld_data['Country\/Region']:\n    if country != 'US': \n        restofworld_data['Country\/Region'] = restofworld_data['Country\/Region'].replace(country, \"RestOfWorld\")\n\nplot_country_active_confirmed_recovered_growth_metrics('RestOfWorld')","190f645a":"from scipy.optimize import curve_fit\n","a0ee7a8d":"# We want number of confirmed for each date for each country\n#country_data = global_data[global_data['Country\/Region']=='Mainland China']\nglobal_data2 = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\ncountry_data = global_data2[global_data2['Country\/Region']=='US']\n#country_data = country_data[country_data['ObservationDate']<\"07\/05\/2020\"]\n#country_data = country_data.drop(['SNo','Province\/State', 'Last Update.'], axis=1)\ncountry_data = pd.pivot_table(country_data, values=['Confirmed', 'Recovered','Deaths'], index=['ObservationDate'], aggfunc=np.sum)\ncountry_data.tail()","38bc15d5":"#country_data['GrowthFactor'] = growth_factor(country_data['Confirmed'])\n\n# we will want x_data to be the number of days since first confirmed and the y_data to be the confirmed data. This will be the data we use to fit a logistic curve\nx_data = range(len(country_data.index))\ny_data = country_data['Confirmed']\n\ndef log_curve(x, k, x_0, ymax):\n    return ymax \/ (1 + np.exp(-k*(x-x_0)))\n\n# Fit the curve\npopt, pcov = curve_fit(log_curve, x_data, y_data, bounds=([0,0,0],np.inf), maxfev=50000)\nestimated_k, estimated_x_0, ymax= popt\n\n\n# Plot the fitted curve\nk = estimated_k\nx_0 = estimated_x_0\ny_fitted = log_curve(range(0,350), k, x_0, ymax)\nprint(k, x_0, ymax)\n#print(y_fitted)\ny_data.tail()","a81b6c3a":"# Plot everything for illustration\nfig = plt.figure()\nax = fig.add_subplot(111)\nax.plot(range(0,350), y_fitted, '--', label='fitted')\nax.plot(x_data, y_data, 'o', label='Confirmed Data')\n","5a31a363":"# **The Math: Exponential vs Logistic**\n\n### The spread of infectious disease can be better modeled using a logistic curve rather than an exponential curve. The growth starts exponentially, but must slow down after some point called the **inflection point**. The inflection point is essentially the midpoint of the spread. We will model the number of confirmed cases using a logistic curve. Let's look at the equation for such a curve, the differential equation for which this curve is a solution, and the graph of the curve.\n\n## Logistic Curve Graph\n\n![LogCurve.png](attachment:LogCurve.png)\n\n## Logistic Function\n\n### A **logistic function** or **logistic curve** is an equation of the form: ![LogisticFunction.png](attachment:LogisticFunction.png)\n### where\n\n### * x_0 = the inflection point,\n### * N = the curve's maximum value, and\n### * k = growth rate or steepness of the curve.\n\nFor reference: https:\/\/en.wikipedia.org\/wiki\/Logistic_function.\n### Actually, the logistic function is just a solution for the following first-order, non-linear ordinary differential equation called the Logistic Differential Equation where f(x_0) = N\/2: ![LogisticEqn.png](attachment:LogisticEqn.png)\n\n### From the differential equation, stability of solutions and equilibria can be explored. However, this may not be directly helpful in predicting confirmed cases, so let's keep things simple for now and just look at the growth metrics.\n","203e58de":"Let's now compare US with the rest of the world.","84af86b2":"# **The Analysis**\n\n### Now that we have seen the math, let's explore the following growth metrics for the confirmed cases for each country:\n### * Growth Factor\n### * Growth Ratio\n### * Growth Rate\n### * 2nd Derivative\n\n### The **growth factor** on day N is the number of confirmed cases on day N minus confirmed cases on day N-1 divided by the number of confirmed cases on day N-1 minus confirmed cases on day N-2.\n\n### The **growth ratio** on day N is the number of confirmed cases on day N divided by the number of confirmed cases on day N-1.\n\n### The **growth rate** is simply the first derivative.\n\n### We will use these growth metrics to gain insight into which countries may have already hit their inflection points. For example, if a country's growth factor has stabilized around 1.0 then this can be a sign that that country has reached it's inflection point. We will then use curve fitting to fit a logistic curve (similar to the one above) to the number of confirmed cases for each country. This may help us predict if a country has hit their inflection point, and therefore when they will reach a possible maximum number of confirmed cases.\n\n### **Interestingly, the growth factor just tells us the curvature (from Calculus!) of the data.** If we take our data and take the 2nd derivative, basically all it is telling us is whether the cases are growing at an accelerating or decelerating rate. From calculus you may remember we use the 2nd derivative test to test for concavity and find saddle points. The inflection point is where the curve changes concavity. We can look at these growth metrics\n\n### The bigger picture will be to correlate this with preventative efforts such as quarentines, closing of schools, etc. It will also be interesting to see growth factor as a feature in a ML model.","1b4219bf":"## Rest of the World","0c647665":"## The Netherlands","da709e90":"## New Zealand ","17d0ba18":"\n## Smoothed vs Unsmoothed Growth Factor\n\nThe growth factor we see above for Rest Of World is smoothed, just for illustration, let's look at smoothed vs unsmoothed.\n\nThe orange plot is the unsmoothed growth factor data for all countries except for china, the blue is the smoothed data. Smoothed data is essentially a weighted average, you can see how we define it above.\n\n![SmoothedVsUnsmoothedGF.png](attachment:SmoothedVsUnsmoothedGF.png)","e3185435":"## Italy","9ce70076":"\n\n* Define Active Cases as Confirmed minus Recovered minus Deaths.\n* Drop SNo, Province\/State, and Last Update.\n* Plot Active, Confirmed, and Recovered Cases, Deaths, Growth Factor, 2nd_Derivative, and Growth Ratio\n\n","54d5411c":"## Russia","585a8a57":"## Germany","f7ac2dc7":"### Notice that this predicts the US hit the inflection point around day 190 (it is currently day 214 as of August 22nd) and this model predicts that the number of confirmed cases will max out around 8,914,379 cases.","abdfd9a4":"## Logistic Curve Fitting\n\nWe are going to use scipy.optimize.curve_fit to fit a logistic curve to the number of confirmed cases in US.","56676753":"## US","17a0df9c":"## Import Data","8e91dd32":"## China","fdedb1a3":"## **Covid-19 Growth Factor by Country **\n\nPlease watch the following 9-minute video on exponential growth and the spread of disease...https:\/\/www.youtube.com\/watch?v=Kas0tIxDvrg\n\nThe versions before Version 16 explored Savitzky\u2013Golay filter (https:\/\/en.wikipedia.org\/wiki\/File:Lissage_sg3_anim.gif) for smoothing data however it seems that that filter is too good at retaining the original trends in data. So here we change to a different smoothing technique.\n\n**Disclaimer**: This notebook demonstrates a very simple mathematical model, a differential equation called the logistic equation which is a special case of the Bernoulli equation. The purpose of this notebook was to illustrate mathematical modeling with simple ordinary differential equations to my introductory mathematical modeling class. I am not a health expert, this notebook should not be taken too seriously.\n","11238384":"## South Korea"}}