{"cell_type":{"8a42edd2":"code","139a1338":"code","e8ccdacb":"code","b4ff0686":"code","05fc8ebb":"code","2403335e":"code","4a5bac01":"code","e546b7de":"code","a38332c0":"code","1d73bd5d":"code","8b408c15":"code","06100320":"code","d775c99e":"code","316696fd":"code","d34ab135":"code","4f3dd26a":"code","39b1e1aa":"code","f000612a":"code","0921bbe0":"markdown","d73780ea":"markdown","0c9cf3bf":"markdown","775d84fd":"markdown","556ce7e1":"markdown","82e6d268":"markdown","7d8ee62d":"markdown","f38dd519":"markdown","b2d26863":"markdown","0836daaa":"markdown"},"source":{"8a42edd2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","139a1338":"import pandas as pd\npd.set_option('display.max_columns', None)\npd.set_option('display.width', 500)\npd.set_option('display.expand_frame_repr', False)\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n#kosin\u00fcs bernzerli\u011fini bulma\nfrom sklearn.metrics.pairwise import cosine_similarity","e8ccdacb":"df = pd.read_csv(\"\/kaggle\/input\/d\/rounakbanik\/the-movies-dataset\/movies_metadata.csv\", low_memory=False)  # DtypeWarning kapamak icin\ndf.head()","b4ff0686":"# Ka\u00e7 fark\u0131 yorum yap\u0131lm\u0131\u015f, \ndf.shape","05fc8ebb":"# filmlerin meta bilgileri\n#benzerliklerini nas\u0131l yapabiliriz?\ndf[\"overview\"].head()","2403335e":"## 1. Tf-idf y\u00f6ntemi\n\n# Count i\u015fleminde her bir kelimenin bir dok\u00fcmanda ka\u00e7 defa ge\u00e7ti\u011fi say\u0131l\u0131r.\n\n# 1,2,3,...,10000 e\u015fsiz kelime var.\n# 12,23,12,...,0 \u00f6rne\u011fin, ilk kelime 12 kere ge\u00e7mi\u015f\n\n#e\u015fsiz kelimleri say.\nfrom sklearn.feature_extraction.text import CountVectorizer\ncorpus = ['This is the first document.',\n          'This document is the second document.',\n          'And this is the third one.',\n          'Is this the first document?']\n# word frekans\n#e\u015fsiz kelimeleri geiryor\nvectorizer = CountVectorizer()\nvectorizer\nX = vectorizer.fit_transform(corpus)\nvectorizer.get_feature_names()\n# kelimeleri s\u0131rala\u0131yor. Bu kelimeler hangi film yorumunda ge\u00e7mi\u015f onu buluoyoruz.","4a5bac01":"#['and', 'document', 'first', 'is', 'one', 'second', 'the', 'third', 'this']\n# ilgili kelimede hangi s\u0131k\u0131l\u0131kla ge\u00e7ti\u011fini g\u00f6steriyor.\nX.toarray()","e546b7de":"# word tf-idf\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nvectorizer = TfidfVectorizer(analyzer='word')\nX = vectorizer.fit_transform(corpus)\nvectorizer.get_feature_names()","a38332c0":"X.toarray()","1d73bd5d":"df['overview'].head()","8b408c15":"tfidf = TfidfVectorizer(stop_words='english')\n#gerekli gereksz kelimeleri atalal\u0131m","06100320":"df['overview'] = df['overview'].fillna('')\n#eksik olan yerleri bo\u015fluk olarak de\u011fi\u015ftiriyoruz.","d775c99e":"#overview fit etme, nesnesi olu\u015fturma\ntfidf_matrix = tfidf.fit_transform(df['overview'])\n\ntfidf_matrix.shape\n#45k g\u00f6zlem,filme yap\u0131lm\u0131\u015f yorumlar\n#75 filmlerin overivew","316696fd":"# filmlerin\ndf['title'].shape\n# h\u00fcscrelerde ise kelime s\u0131kl\u0131klar\u0131","d34ab135":"# bezerlik hesaplanmas\u0131\ncosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)\ncosine_sim.shape\n# 45bin g\u00f6zlem, d\u00f6km\u00fcman say\u0131s\u0131","4f3dd26a":"cosine_sim[1]\n\n# cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n# cosine_sim.shape\n# cosine_sim[1]","39b1e1aa":"\n\n# title'\u0131 na olanlar\u0131n silinmesi\ndf = df[~df[\"title\"].isna()]\n\n# title'lar ve indexleri yakalay\u0131p saklayal\u0131m.\nindices = pd.Series(df.index, index=df['title'])\n\n# dublicated olanlar\u0131n silinmesi.\nindices = indices[~indices.index.duplicated(keep='last')]\nindices.shape\nindices[:10]\nindices[\"Sherlock Holmes\"]\n\n# bir filmin id'sini yakalanmas\u0131:\nmovie_index = indices[\"Sherlock Holmes\"]\n\n# bu filmin cosine similarty matrisindeki yerine gitmek:\ncosine_sim[movie_index]\n\n# bu film ile di\u011fer filmler aras\u0131ndaki skorlar\u0131n df'e \u00e7evrilmesi:\nsimilarity_scores = pd.DataFrame(cosine_sim[movie_index], columns=[\"score\"])\n\nmovie_indices = similarity_scores.sort_values(\"score\", ascending=False)[1:11].index\n\ndf['title'].iloc[movie_indices]\n","f000612a":"\n\n#################################\n# 4. \u00c7al\u0131\u015fman\u0131n Fonksiyonla\u015ft\u0131r\u0131lmas\u0131\n#################################\n\ndef content_based_recommender(title, cosine_sim, dataframe):\n    # index'leri olusturma\n    dataframe = dataframe[~dataframe[\"title\"].isna()]\n    indices = pd.Series(dataframe.index, index=dataframe['title'])\n    indices = indices[~indices.index.duplicated(keep='last')]\n    # title'\u0131n index'ini yakalama\n    movie_index = indices[title]\n    # title'a gore benzerlik skorlar\u0131n\u0131 hesapalama\n    similarity_scores = pd.DataFrame(cosine_sim[movie_index], columns=[\"score\"])\n    # kendisi haric ilk 10 filmi getirme\n    movie_indices = similarity_scores.sort_values(\"score\", ascending=False)[1:11].index\n    return dataframe['title'].iloc[movie_indices]\n\n\n\ncontent_based_recommender(\"Sherlock Holmes\", cosine_sim, df)\ncontent_based_recommender(\"The Godfather\", cosine_sim, df)\ncontent_based_recommender('The Dark Knight Rises', cosine_sim, df)\n\n\n# peki ya cosine_sim kaybolursa ne olacak?\n# del cosine_sim\n#\n# content_based_recommender('The Dark Knight Rises', cosine_sim, df)\n\ndef calculate_cosine_sim(dataframe):\n    tfidf = TfidfVectorizer(stop_words='english')\n    dataframe['overview'] = dataframe['overview'].fillna('')\n    tfidf_matrix = tfidf.fit_transform(dataframe['overview'])\n    cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)\n    return cosine_sim\n\n\ncosine_sim = calculate_cosine_sim(df)\ncontent_based_recommender('The Dark Knight Rises', cosine_sim, df)","0921bbe0":"* Bazen bir oyuncu veya y\u00f6netmen varsa, bir yanl\u0131l\u0131k isteriz. \u00dcnl\u00fc oyuncu yahut bir y\u00f6netmenin a\u011f\u0131rl\u0131\u011f\u0131 varsayanl\u0131l\u0131k isterisz. Count vectorize kullan\u0131r\u0131rz.\n","d73780ea":"#################################\n# 3. Benzerliklere G\u00f6re \u00d6nerilerin Yap\u0131lmas\u0131\n#################################","0c9cf3bf":"\n#################################\n# 1. tf-idf y\u00f6ntemi\n#################################\n\n# Kelime temsil \u015fekillerinin normalize edilmi\u015f say\u0131sal temsilleri.\n\n# TF-IDF = TF(t) * IDF(t)\n\n1.  ADIM 1: TF(t) = (Bir t teriminin ilgili dok\u00fcmanda g\u00f6zlenme frekans\u0131) \/ (Dok\u00fcmandaki toplam terim say\u0131s\u0131) (term frequency)\n2.  ADIM 2: IDF(t) = 1 + log_e((Toplam dok\u00fcman say\u0131s\u0131 + 1) \/ (\u0130\u00e7inde t terimi olan dok\u00fcman say\u0131s\u0131 + 1) (inverse document frequency) \n3.  ADIM 3: TF-IDF = TF(t) * IDF(t)\n4.  ADIM 4: TF-IDF De\u011ferlerine L2 normalization.\n\n* 1.  L2 normalization i\u015flemi sat\u0131r baz\u0131nda olur (document).\n* 1. Bir sat\u0131rdaki her bir g\u00f6zlemin karesi al\u0131narak toplan\u0131r ve toplam\u0131n karek\u00f6k\u00fc al\u0131n\u0131r.\n* 1.  Sat\u0131rdaki t\u00fcm g\u00f6zlemler karek\u00f6k sonucunda elde edilen de\u011ferlere b\u00f6l\u00fcn\u00fcr.\n","775d84fd":"#############################\n# Content Based Recommendation\n#############################\n\n1. \u0130\u00e7erik benzerliklerine g\u00f6re \u00f6nerilerde bulunulur.\n1. Bir kullan\u0131c\u0131n\u0131n be\u011fendi\u011fi ya da sat\u0131n ald\u0131\u011f\u0131 \u00fcr\u00fcnlere benzer olan \u00fcr\u00fcnler belirlenir ve \u00f6nerilir.\n\n","556ce7e1":"#################################\n# 2. Cosine Similarity Matrisinin Olu\u015fturulmas\u0131\n#################################\n* tf-idf ile uyumlu oldu\u011fu i\u00e7in bunu se\u00e7tik.","82e6d268":"#################################\n# TF-IDF'in Problemimiz i\u00e7in Elde Edilmesi\n #################################\n * neden Tfidf: Standarla\u015ft\u0131r\u0131ld\u0131\u011f\u0131 i\u00e7in","7d8ee62d":"#################################\n# 1. TF-IDF Matrisinin Olu\u015fturulmas\u0131\n#################################","f38dd519":"![image.png](attachment:4e664adb-fca8-487d-9e55-94d51e4edbb2.png)\n\n![image.png](attachment:efa6299e-9a0d-4ca8-84b7-4e978b285faf.png)\n\n![image.png](attachment:f4e6388e-c9d9-4be5-a308-36825fa0609c.png)\n\n![image.png](attachment:735a2aee-7097-42cf-9207-99da4aaabcd4.png)","b2d26863":"#############################\n# Film Overview'lar\u0131na G\u00f6re Tavsiye Sistemi\n#############################\n\n 1. TF-IDF Matrisinin Olu\u015fturulmas\u0131\n 2. Cosine Similarity Matrisinin Olu\u015fturulmas\u0131\n 3. Benzerliklere G\u00f6re \u00d6nerilerin Yap\u0131lmas\u0131\n 4. \u00c7al\u0131\u015fman\u0131n Fonksiyonla\u015ft\u0131r\u0131lmas\u0131\n","0836daaa":"# CountVectorizer y\u00f6ntemi\n## 1. Tf-idf y\u00f6ntemi\n\n#################################\n# 2. CountVectorizer y\u00f6ntemi\n* Her kelimenin e\u015f\u015fsiz b\u00fct\u00fcn kelimeleri de\u011fi\u015fkenlere b\u0131rakaca\u011f\u0131z.\n* Film hakk\u0131nda yap\u0131lm\u0131\u015f yorumlar\u0131 ise g\u00f6zlemlere b\u0131rakaca\u011f\u0131z.\n#################################"}}