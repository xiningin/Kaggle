{"cell_type":{"42471eed":"code","d4dc17b1":"code","fb3809f3":"code","7f4571c9":"code","c872baa5":"code","a630ea73":"code","bf8a4673":"code","307c4fad":"code","c3853c1f":"code","166472b6":"code","0cb70c1c":"code","def2655a":"code","c5e5f046":"code","30cee0a5":"code","39f657b3":"code","955dae17":"code","09500ac6":"code","067929ee":"code","6daf4d60":"code","9883b8ae":"code","c5a1fb23":"code","2a300874":"code","aec38b30":"code","15db469d":"code","cf298f00":"code","65457932":"code","9bb50e09":"code","38b26275":"code","c9118516":"code","bcdfb581":"code","498c10e0":"code","beab5dcb":"code","ef95b12e":"code","57381a26":"code","78a0c19a":"code","1c8dea44":"code","180a11be":"markdown","16b81be3":"markdown","cce8f244":"markdown","77fb8cac":"markdown","1654543c":"markdown","e5e7bee4":"markdown","db3ebe56":"markdown","4ce29605":"markdown"},"source":{"42471eed":"#importing packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","d4dc17b1":"diabetes = pd.read_csv(\"..\/input\/diabetes\/diabetes.csv\", sep = \",\")\ndiabetes.head()","fb3809f3":"diabetes.isnull().sum()","7f4571c9":"data = diabetes.drop(['Pregnancies', 'Outcome'], axis = 1)","c872baa5":"# Replacing 0 with nan values\ndata.replace(0, np.nan, inplace = True)","a630ea73":"data.isnull().sum().sort_values(ascending = False)","bf8a4673":"# If data is continuous - replace by mean\n# If data is discrete - replace by median\ndata['Insulin'].uniqueque()","307c4fad":"# mean\nnp.round(data['Insulin'].mean())","c3853c1f":"data['Insulin'].replace(np.nan, np.round(data['Insulin'].mean()), inplace = True)","166472b6":"from sklearn.impute import SimpleImputer\n# strategy = 'median', 'mean'\nimpute = SimpleImputer(strategy = 'median')\ndata_array = impute.fit_transform(data)","0cb70c1c":"data_array","def2655a":"diabetes_df = pd.DataFrame(data_array, columns= data.columns)\ndiabetes_df","c5e5f046":"diabetes_df['Pregnancies'] = diabetes.Pregnancies\ndiabetes_df['Outcome'] = diabetes.Outcome","30cee0a5":"diabetes_df.isnull().sum()","39f657b3":"# number of samples for each class\ndiabetes_df['Outcome'].value_counts()","955dae17":"# resample uses \"bootstrapping\" method to regenerate samples by randomly selecting data for every class\nfrom sklearn.utils import resample\ndf_0 = diabetes_df[diabetes_df['Outcome'] == 0]\ndf_1 = diabetes_df[diabetes_df['Outcome'] == 1]","09500ac6":"# apply resample\ndf_1_upsample = resample(df_1, n_samples = 500, replace = True, random_state = 123) ","067929ee":"diabetes_df1 = pd.concat([df_0, df_1_upsample])","6daf4d60":"diabetes_df1['Outcome'].value_counts()","9883b8ae":"plt.figure(figsize = (11,8))\nsns.heatmap(diabetes_df1.corr(), annot = True)","c5a1fb23":"X = diabetes_df1.drop(['Outcome'], axis = 1)\nY = diabetes_df1['Outcome']","2a300874":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)","aec38b30":"from keras.layers import Dense\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam","15db469d":"def build_model():\n    model = Sequential()\n\n    # Input Layer\n    model.add(Dense(units = 64, activation='relu', input_shape = [len(X.keys())]))\n\n    # Hidden Layer - I\n    model.add(Dense(units = 128, activation='relu'))\n\n    # Hidden Layer - II\n    model.add(Dense(units = 128, activation='relu'))\n\n    # Output Layer\n    model.add(Dense(units = 1, activation='sigmoid'))\n\n    # learning rate for Adam Optimizers\n    optimizers = Adam(learning_rate = 0.001)\n\n    # Model compiler\n    model.compile(loss = 'binary_crossentropy', optimizer = optimizers, metrics = ['accuracy'])\n    \n    return model ","cf298f00":"model = build_model()\nmodel.summary()","65457932":"history = model.fit(X_train, Y_train, epochs = 500, batch_size= 25, validation_split = 0.2)","9bb50e09":"pd.DataFrame(history.history)[['accuracy','val_accuracy']].plot()","38b26275":"model.evaluate(X_test,Y_test)","c9118516":"from keras.layers import Dropout\n\ndef build_model():\n    model = Sequential()\n\n    # Input Layer\n    model.add(Dense(units = 64, activation='relu', input_shape = [len(X.keys())]))\n    model.add(Dropout(0.2))\n\n    # Hidden Layer - I\n    model.add(Dense(units = 128, activation='relu'))\n    model.add(Dropout(0.2))\n\n    # Hidden Layer - II\n    model.add(Dense(units = 128, activation='relu'))\n    model.add(Dropout(0.2))\n    \n    # Output Layer\n    model.add(Dense(units = 1, activation='sigmoid'))\n\n    # learning rate for Adam Optimizers\n    optimizers = Adam(learning_rate = 0.001)\n\n    # Model compiler\n    model.compile(loss = 'binary_crossentropy', optimizer = optimizers, metrics = ['accuracy'])\n    \n    return model ","bcdfb581":"model = build_model()\nmodel.summary()","498c10e0":"history = model.fit(X_train, Y_train, epochs = 500, batch_size= 25, validation_split = 0.2)","beab5dcb":"pd.DataFrame(history.history)[['accuracy','val_accuracy']].plot()","ef95b12e":"model.evaluate(X_test, Y_test)","57381a26":"predict = model.predict(X_test)\nyhat = np.round(predict)","78a0c19a":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(Y_test, yhat)\n\nsns.heatmap(confusion_matrix(Y_test, yhat), annot = True)","1c8dea44":"from sklearn.metrics import classification_report\nprint(classification_report(Y_test, yhat))","180a11be":"**Data Augmentation**\n* regenerating new samples using bootstrapping for biased dataset\n* or else we can apply the weighted value ","16b81be3":"**Data Features**","cce8f244":"**Cross Validation**","77fb8cac":"**ANN Classification**","1654543c":"**Handling the missing values**","e5e7bee4":"**Imputer**","db3ebe56":"**Classification Report**","4ce29605":"**Model is overfitted, we will add drop-out between layers**"}}