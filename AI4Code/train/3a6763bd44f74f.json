{"cell_type":{"06c570b7":"code","c4f1d727":"code","1260fc84":"code","b051634b":"code","7b20a423":"code","893bf1f6":"code","6222e70a":"code","69e4c84f":"code","384081a0":"code","51e426a6":"code","c2556403":"code","e17ca2ad":"code","187f5540":"code","224d0e28":"code","f1f816fc":"code","d50f6bd8":"code","ca660ac3":"code","e53ac3eb":"code","8c946861":"code","31bc46ae":"code","0bbc770a":"code","7ffbdeb0":"code","5722d4c2":"code","6216231a":"markdown","13554232":"markdown","1f2a4326":"markdown","aba4b885":"markdown","d2afa954":"markdown","6e659004":"markdown","80d39a8f":"markdown","1cfdeb5c":"markdown","9dff8b17":"markdown"},"source":{"06c570b7":"import numpy as np\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom PIL import Image","c4f1d727":"import keras\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications import ResNet50\nfrom keras.applications.resnet50 import preprocess_input\nfrom keras import Model, layers\nfrom keras.models import load_model, model_from_json\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\n","1260fc84":"keras.__version__  # should be 2.2.2","b051634b":"import tensorflow as tf\ntf.__version__  # should be 1.10.x","7b20a423":"import PIL\nPIL.__version__  # should be 5.2.0","893bf1f6":"# path for Kaggle kernels\ninput_path = \"..\/input\/smile-detection-ass\/\"","6222e70a":"train_datagen = ImageDataGenerator(\n    horizontal_flip=True,\n    vertical_flip=True,\n    rotation_range=20,\n    rescale=1.\/255,\n    validation_split=0.2,\n    preprocessing_function=preprocess_input)\n\nvalidation_datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    validation_split=0.2,\n    preprocessing_function=preprocess_input)\n\n\ntrain_generator = train_datagen.flow_from_directory(\n    input_path,\n    batch_size=32,\n    seed=42,\n    class_mode='categorical',\n    target_size=(64, 64), \n#     color_mode='grayscale', \n    subset='training')\n\n\nvalidation_generator = validation_datagen.flow_from_directory(\n    input_path,\n    shuffle=False,\n    batch_size=32,\n    class_mode='categorical',\n    seed=42,\n    target_size=(64, 64),\n#     color_mode='grayscale',\n    subset='validation')","69e4c84f":"conv_base = ResNet50(\n    include_top=False,\n    weights='imagenet')\n\n# for layer in conv_base.layers:\n#     layer.trainable = False","384081a0":"from keras import backend as K\n\ndef recall_m(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    possible_positives = K.sum(K.round(K.clip(y_true, 0, 1)))\n    recall = true_positives \/ (possible_positives + K.epsilon())\n    return recall\n\ndef precision_m(y_true, y_pred):\n    true_positives = K.sum(K.round(K.clip(y_true * y_pred, 0, 1)))\n    predicted_positives = K.sum(K.round(K.clip(y_pred, 0, 1)))\n    precision = true_positives \/ (predicted_positives + K.epsilon())\n    return precision\n\ndef f1_m(y_true, y_pred):\n    precision = precision_m(y_true, y_pred)\n    recall = recall_m(y_true, y_pred)\n    return 2*((precision*recall)\/(precision+recall+K.epsilon()))\n\n","51e426a6":"\n\nx = conv_base.output\nx = layers.GlobalAveragePooling2D()(x)\nx = layers.Dense(128, activation='relu')(x) \npredictions = layers.Dense(2, activation='softmax')(x)\nmodel = Model(conv_base.input, predictions)","c2556403":"checkpoint_callback = ModelCheckpoint(\n    filepath='resnet50-{epoch:02d}-{val_loss:.2f}.h5',\n    monitor='val_accuracy',\n    mode='max',\n    save_best_only=True)\n\nearly_stop = EarlyStopping(\n    monitor='val_loss', min_delta=0.05, patience=10, verbose=1,\n    mode='min')\n\nmodel.compile(loss='sparse_categorical_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy', f1_m, precision_m, recall_m])\n\n\n\n# evaluate the model\n# loss, accuracy, f1_score, precision, recall = model.evaluate(Xtest, ytest, verbose=0)","e17ca2ad":"train_generator.samples","187f5540":"history = model.fit_generator(generator=train_generator,\n                              steps_per_epoch=train_generator.samples\/\/32,  # added in Kaggle\n                              epochs=50,\n                              callbacks=[checkpoint_callback, early_stop],\n                              validation_data=validation_generator,\n                              validation_steps=10,  # added in Kaggle\n                              verbose=1\n                             )","224d0e28":"image_path = input_path + 'Smile Detection\/positives_Smile\/13.jpg'\nimage = tf.keras.preprocessing.image.load_img(image_path)\ninput_arr = keras.preprocessing.image.img_to_array(image)\ninput_arr = np.array([input_arr])  # Convert single image to a batch.\n# img = keras.preprocessing.image.load_img(image_path)\nmodel.predict(preprocess_input(input_arr))","f1f816fc":"!pwd\n!ls\n# !mkdir models\n!ls models\/keras","d50f6bd8":"# save\nmodel.save('models\/keras\/resnet50-model.h5')","ca660ac3":"# load\nmodel = load_model('models\/keras\/model.h5')","e53ac3eb":"# save\nmodel.save_weights('models\/keras\/weights.h5')\nwith open('models\/keras\/architecture.json', 'w') as f:\n        f.write(model.to_json())","8c946861":"# load\nwith open('models\/keras\/architecture.json') as f:\n    model = model_from_json(f.read())\nmodel.load_weights('models\/keras\/weights.h5')","31bc46ae":"validation_img_paths = [\"validation\/alien\/11.jpg\",\n                        \"validation\/alien\/22.jpg\",\n                        \"validation\/predator\/33.jpg\"]\nimg_list = [Image.open(input_path + img_path) for img_path in validation_img_paths]","0bbc770a":"validation_batch = np.stack([preprocess_input(np.array(img.resize((224,224))))\n                             for img in img_list])","7ffbdeb0":"pred_probs = model.predict(validation_batch)\npred_probs","5722d4c2":"fig, axs = plt.subplots(1, len(img_list), figsize=(20, 5))\nfor i, img in enumerate(img_list):\n    ax = axs[i]\n    ax.axis('off')\n    ax.set_title(\"{:.0f}% Alien, {:.0f}% Predator\".format(100*pred_probs[i,0],\n                                                            100*pred_probs[i,1]))\n    ax.imshow(img)","6216231a":"Note:  there was an error with the above on Kaggle (even though it works on my computer, same versions of Keras and TF):\n\n> AttributeError: 'Node' object has no attribute 'output_masks'\n\nSee [this issue](https:\/\/github.com\/keras-team\/keras\/issues\/10907).\nAfter reinstalling TensorFlow in Kaggle (packages -> tensorflow), no error.","13554232":"### Add performance measures","1f2a4326":"### 3. Create the network","aba4b885":"### 4. Train the model","d2afa954":"### 6. Make predictions on sample test images","6e659004":"### 2. Create Keras data generators ","80d39a8f":"#### B. Architecture in JSON,  weights in HDF5","1cfdeb5c":"#### A. Architecture and weights in HDF5","9dff8b17":"### 5. Save and load the model\n\nNote: this is for demonstration. You don't need to to so, if you intend to run predictions within this notebook."}}