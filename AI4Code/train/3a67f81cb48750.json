{"cell_type":{"5a606507":"code","e91a46a8":"code","0bf0c6b7":"code","dcfcc5b7":"code","c8ae0d89":"code","50f93f4a":"code","20b62b54":"code","a870b591":"code","519c25b3":"code","a929d70f":"code","454d99b8":"code","65fc6cb7":"code","7f09264d":"code","7025382b":"code","adc70470":"code","ade7bee4":"code","49906662":"code","9b14040d":"code","a797ee1e":"markdown","96c91777":"markdown","2bff2505":"markdown","3db00a1c":"markdown","6b290be3":"markdown","c5d5164a":"markdown","58bdd3aa":"markdown","115608ec":"markdown","f7da4a70":"markdown"},"source":{"5a606507":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e91a46a8":"import matplotlib.pyplot as plt\nimport statsmodels.api as sm\nfrom statsmodels.tsa.seasonal import STL\nimport random","0bf0c6b7":"data = pd.read_csv('\/kaggle\/input\/daily-climate-time-series-data\/DailyDelhiClimateTrain.csv')","dcfcc5b7":"data.head()","c8ae0d89":"meantemp_data = data[['date', 'meantemp']]\nmeantemp_data['date'] = pd.to_datetime(meantemp_data['date'])","50f93f4a":"meantemp_data['days'] = meantemp_data['date'] - meantemp_data['date'].min()","20b62b54":"plt.rc('font', size=12)\nfig, ax = plt.subplots(figsize=(15, 6))\n\nplt.plot(meantemp_data.days, meantemp_data.meantemp)\n\nax.set_xlabel('Date')\nax.set_ylabel('Mean temperature')\nax.grid(True)\nax.legend(loc='upper left');","a870b591":"meantemp_data_noised = meantemp_data.copy()\n\nfor i in range(20):\n    outlier = random.randint(0, meantemp_data.shape[0])\n    meantemp_data_noised.at[outlier, 'meantemp'] = meantemp_data.loc[outlier].meantemp + (15 if random.random() < 0.5 else -15)","519c25b3":"plt.rc('font', size=12)\nfig, ax = plt.subplots(figsize=(15, 6))\n\nplt.plot(meantemp_data_noised.days, meantemp_data_noised.meantemp)\n\nax.set_xlabel('Date')\nax.set_ylabel('Mean temperature')\nax.grid(True)\nax.legend(loc='upper left');","a929d70f":"lowess = sm.nonparametric.lowess(meantemp_data_noised.meantemp, meantemp_data_noised.days, frac=.1)\nlowess_x = list(zip(*lowess))[0]\nlowess_y = list(zip(*lowess))[1]","454d99b8":"plt.rc('font', size=12)\nfig, ax = plt.subplots(figsize=(15, 6))\n\nplt.plot(meantemp_data_noised.days, meantemp_data_noised.meantemp)\nplt.plot(lowess_x, lowess_y)\n\nax.set_xlabel('Date')\nax.set_ylabel('Mean temperature')\nax.grid(True)\nax.legend(loc='upper left');","65fc6cb7":"stl = STL(meantemp_data_noised['meantemp'].to_numpy(), period = 365)\nresult = stl.fit()","7f09264d":"seasonal, trend, resid = result.seasonal, result.trend, result.resid\n\ncleaned_data = seasonal + trend","7025382b":"plt.figure(figsize = (15, 12))\n\nplt.subplot(3,1,1)\nplt.plot(seasonal)\nplt.title('Seasonal')\n\nplt.subplot(3,1,2)\nplt.plot(trend)\nplt.title('Trend')\n\nplt.subplot(3,1,3)\nplt.plot(resid)\nplt.title('Residuals')\n\nplt.show()","adc70470":"res_mean = resid.mean()\nresid_std = resid.std()\n\nlower_bound = res_mean - 4*resid_std\nupper_bound = res_mean + 4*resid_std","ade7bee4":"plt.rc('font', size=12)\nfig, ax = plt.subplots(figsize=(15, 6))\n\nplt.plot(cleaned_data)\nplt.fill_between(list(range(1462)), cleaned_data - lower_bound, cleaned_data + lower_bound, color = 'g', alpha = 0.15)\n\nax.set_xlabel('Date')\nax.set_ylabel('Mean temperature')","49906662":"anomalies = meantemp_data_noised[(resid < lower_bound) | (resid > upper_bound)]","9b14040d":"anomalies[['date', 'meantemp']].rename(columns={'meantemp': 'anomaly_value'}).join(\n    meantemp_data[(resid < lower_bound) | (resid > upper_bound)][['date', 'meantemp']].set_index('date'),\n    on = 'date'\n)","a797ee1e":"Here we decompose our time series using STL","96c91777":"All points that lie beyond the green zone are considered anomalies","2bff2505":"The STL method uses LOESS, so let's see how LOESS fits data","3db00a1c":"Here we can see the data with added outliers","6b290be3":"Let's see data","c5d5164a":"So, the main idea of using STL in anomaly detection is to calculate the mean and standard deviation of the Residuals component of the STL decomposition and exclude all point for which residuals differs from the average by more than 4 (for example) std's ","58bdd3aa":"As you can see, the data has a certain seasonality. We can clearly trace how the value of a variable changes over the course of a year","115608ec":"So, let's add some outliers","f7da4a70":"Below you can see all the points that we consider anomalies. Even though the algorithm is pretty good, we didn't find all the outliers."}}