{"cell_type":{"b7614ff0":"code","e8765a44":"code","98c8a0a0":"code","cc8a83a9":"code","33e1d0b6":"code","43878e46":"code","217b891f":"code","0eb79ce0":"code","247541d4":"code","c42be6f4":"code","b8d13f9c":"code","e6dd6661":"code","28df6be8":"code","ae40d438":"code","8ac7a9da":"code","1f0fdf2f":"code","d41de6d4":"code","a7a27554":"code","bf715571":"markdown"},"source":{"b7614ff0":"import warnings                       # to hide warnings if any\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","e8765a44":"#loading libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","98c8a0a0":"#reading data set\ndf = pd.read_csv('..\/input\/data.csv')\ndf.head()","cc8a83a9":"#removing unnecessary columns\ndf = df.drop(['id', 'Unnamed: 32'], axis = 1)","33e1d0b6":"df.head()","43878e46":"df.shape","217b891f":"df.dtypes","0eb79ce0":"#check wheter any of the columns contain null values\ndf.isnull().sum()","247541d4":"def diagnosis_value(diagnosis):\n    if diagnosis == 'M':\n        return 1\n    else:\n        return 0\n\ndf['diagnosis'] = df['diagnosis'].apply(diagnosis_value)","c42be6f4":"sns.lmplot(x = 'radius_mean', y= 'texture_mean', hue = 'diagnosis',data = df)","b8d13f9c":"sns.lmplot(x='smoothness_mean', y = 'compactness_mean', data = df, hue = 'diagnosis')","e6dd6661":"#loading libraries\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier","28df6be8":"X = np.array(df.iloc[:,1:])\ny = np.array(df['diagnosis'])","ae40d438":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.33, random_state = 42)","8ac7a9da":"knn = KNeighborsClassifier(n_neighbors = 13)\nknn.fit(X_train,y_train)","1f0fdf2f":"knn.score(X_test,y_test)","d41de6d4":"#Performing cross validation\nneighbors = []\ncv_scores = []\nfrom sklearn.model_selection import cross_val_score\n#perform 10 fold cross validation\nfor k in range(1,51,2):\n    neighbors.append(k)\n    knn = KNeighborsClassifier(n_neighbors = k)\n    scores = cross_val_score(knn,X_train,y_train,cv=10, scoring = 'accuracy')\n    cv_scores.append(scores.mean())\n    \n","a7a27554":"#Misclassification error versus k\nMSE = [1-x for x in cv_scores]\n\n#determining the best k\noptimal_k = neighbors[MSE.index(min(MSE))]\nprint('The optimal number of neighbors is %d ' %optimal_k)\n\n#plot misclassification error versus k\n\nplt.figure(figsize = (10,6))\nplt.plot(neighbors, MSE)\nplt.xlabel('Number of neighbors')\nplt.ylabel('Misclassification Error')\nplt.show()\n","bf715571":"Converting the diagnosis value of M and B  to a numerical value <br\/>\nM (Malignant) = 1<br\/>\nB (Benign) = 0"}}