{"cell_type":{"c75dad77":"code","216733e2":"code","79c81c19":"code","7b6ababc":"code","c1c819f5":"code","01305011":"code","afb293f4":"code","63c21360":"code","c873d8e1":"code","175a3e1c":"code","add710e9":"code","1555689f":"code","0ce28d34":"code","68753f1f":"code","32d49e91":"code","f81a7a36":"code","82a49041":"code","4f9d2f02":"code","24ad3761":"code","b4a832c7":"code","4f6b0753":"code","8764bd5c":"code","ec5f6410":"code","6ab9cce9":"code","20ecbdc0":"code","ce02e199":"code","511f667b":"code","c2982f08":"code","676850f1":"code","86ede0ea":"code","8a299d19":"code","4e799ec2":"code","ff35d7cd":"code","1e6459d4":"code","9b7d8b83":"code","d421ae25":"markdown","f8dc5508":"markdown","a837b34d":"markdown","a0e7dc80":"markdown","52085dd0":"markdown"},"source":{"c75dad77":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re # Regular expression\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        path=(os.path.join(dirname, filename))\nprint(path)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","216733e2":"data=pd.read_csv(path)","79c81c19":"data.head()","7b6ababc":"data.info()","c1c819f5":"data.isna().any()","01305011":"data['category'].value_counts()","afb293f4":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","63c21360":"sns.countplot(data['category'])","c873d8e1":"data['text-cleaned']=data.text.apply(lambda x: re.sub(r'[^A-Za-z]+',' ',x))","175a3e1c":"data['text-cleaned']=data['text-cleaned'].apply(lambda x: x.lower())","add710e9":"data['text-cleaned']=data['text-cleaned'].apply(lambda x:x.strip())","1555689f":"import nltk\nfrom nltk.corpus import stopwords","0ce28d34":"stopwords=stopwords.words(\"english\")","68753f1f":"data['text-cleaned']=data['text-cleaned'].apply(lambda x : ' '.join([words for words in x.split() if words not in stopwords]))","32d49e91":"print(\"Text before cleaning===============> {}\".format(data.text[1]))","f81a7a36":"print(\"Text after cleaning===============> {}\".format(data['text-cleaned'][1]))","82a49041":"X=data['text']\nY=data['category']","4f9d2f02":"X.head()","24ad3761":"Y.head()","b4a832c7":"from sklearn.feature_extraction.text import CountVectorizer","4f6b0753":"CountProcessor=CountVectorizer(binary=True, ngram_range=(1,3))\nX=CountProcessor.fit_transform(X)\n","8764bd5c":"X[1].toarray()","ec5f6410":"from sklearn.preprocessing import LabelEncoder","6ab9cce9":"Labelencoder=LabelEncoder()\nY=Labelencoder.fit_transform(Y)","20ecbdc0":"from sklearn.model_selection import train_test_split\nXtrain,Xtest,Ytrain,Ytest=train_test_split(X,Y,test_size=0.2,random_state=42)","ce02e199":"Ytrain[5]","511f667b":"from sklearn.ensemble import GradientBoostingClassifier","c2982f08":"model=GradientBoostingClassifier()\nmodel.fit(Xtrain,Ytrain)","676850f1":"Ypred=model.predict(Xtest)","86ede0ea":"print(\"The accuracy of Train set is {}\".format(model.score(Xtrain,Ytrain)))","8a299d19":"print(\"The accuracy of Test set is {}\".format(model.score(Xtest,Ytest)))","4e799ec2":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\ndef print_evaluation_scores(y_val, predicted):\n    print('Accuracy score: ', accuracy_score(y_val, predicted))\n    print('F1 score: ', f1_score(y_val, predicted, average='micro'))\n    print('Average precision score: ', precision_score(y_val, predicted, average='micro'))\n    print('Average recall score: ', recall_score(y_val, predicted, average='micro'))","ff35d7cd":"print_evaluation_scores(Ytest, Ypred)","1e6459d4":"pred_inversed = Labelencoder.inverse_transform(Ypred)\ny_test_inversed = Labelencoder.inverse_transform(Ytest)\nXtest=CountProcessor.inverse_transform(Xtest)","9b7d8b83":"for i in range(5):\n    print('Title:\\t{}\\nTrue labels:\\t{}\\nPredicted labels:\\t{}\\n\\n'.format(\n        Xtest[i],\n        ','.join(y_test_inversed[i]),\n        ','.join(pred_inversed[i])\n    ))","d421ae25":"### Data Reading and EDA","f8dc5508":"*There is not much imbalance*","a837b34d":"### Data wrangling\n","a0e7dc80":"### Splitting data into independent and predicting features","52085dd0":"### Pre-processing the data"}}