{"cell_type":{"0b4dd165":"code","c9b8b34c":"code","85237caa":"code","a788a41c":"code","fdf514b9":"code","a8e14a7c":"code","fb652db9":"code","8ccdd682":"code","091d951c":"code","3b37c17a":"code","c69ef6d9":"code","0da2ef50":"code","4f3676a7":"code","b778ad02":"code","10600b94":"code","0e1767bb":"code","bbac8e4c":"code","daf8b513":"code","e6bd8746":"code","b63c7ed4":"code","a2fd27e5":"code","f898c809":"code","7bc85fba":"code","8b42775e":"code","1481b4ce":"code","86ab44e6":"code","5a70531b":"code","c9516d8a":"code","6924a280":"code","4dd612c3":"markdown"},"source":{"0b4dd165":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c9b8b34c":"# Importing the libraries\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\nimport warnings\nwarnings.filterwarnings('ignore')","85237caa":"# Importing the dataset\n\nstroke =  pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv').drop(labels=['id'], axis=1)","a788a41c":"stroke.shape","fdf514b9":"stroke.head()","a8e14a7c":"stroke.info()","fb652db9":"stroke.describe()","8ccdd682":"# Correlation Heatmap\n\nsns.heatmap(stroke.corr(), cmap='coolwarm', annot=True)","091d951c":"stroke.nunique()","3b37c17a":"stroke.gender.value_counts()","c69ef6d9":"stroke.drop(stroke[stroke.gender=='Other'].index, inplace=True)","0da2ef50":"sns.distplot(stroke.loc[stroke.stroke==0, :].age)","4f3676a7":"sns.distplot(stroke.loc[stroke.stroke==1, :].age)","b778ad02":"stroke.loc[stroke.stroke==1, :].median()","10600b94":"sns.boxplot(stroke.loc[stroke.stroke==1, 'age'])","0e1767bb":"plt.figure(figsize=(10,6))\nplt.subplot(1, 2, 1)\nsns.distplot(stroke.loc[(stroke.stroke==1) & (stroke.gender=='Male'), 'age'])\nplt.subplot(1, 2, 2)\nsns.distplot(stroke.loc[(stroke.stroke==1) & (stroke.gender=='Female'), 'age'])","bbac8e4c":"stroke.smoking_status.replace({'never smoked':0,'Unknown':np.nan,'formerly smoked':1,'smokes':1}, inplace=True)\nstroke.smoking_status.replace(np.nan, stroke.smoking_status.value_counts().argmax(), inplace=True)","daf8b513":"stroke.gender.replace({'Male':1,\"Female\":0},inplace=True)","e6bd8746":"stroke.ever_married.replace({'Yes':1,\"No\":0},inplace=True)","b63c7ed4":"stroke.work_type.replace({'Never_worked':'Student',\"children\":'Student',\n                         \"Private\":'Private-Job', 'Self-employed':'Self-Employed',\n                         'Govt_job':'Govt-Job'},inplace=True)","a2fd27e5":"cols = ['gender', 'hypertension', 'heart_disease', 'ever_married',\n        'work_type', 'Residence_type', 'smoking_status']\nplt.figure(figsize=(7,25))\nfor i, col in enumerate(cols,1):\n    plt.subplot(7,1,i)\n    sns.countplot(stroke[col],hue=stroke['stroke'])\n    plt.xlabel(col)","f898c809":"# Splitting the dataset into dependent and independent\n\nX = stroke.drop('stroke', axis='columns')\ny = stroke['stroke']","7bc85fba":"# Handle missing data\n\nimputer = SimpleImputer(strategy='median')\nimputer.fit(X.iloc[:,8:9])\nX.iloc[:,8:9] = imputer.transform(X.iloc[:,8:9])","8b42775e":"# Encoding categorical data\n\ncat_feature = [feature for feature in X.columns if X[feature].dtypes == 'O']\nX = pd.get_dummies(X, columns=cat_feature)","1481b4ce":"# Splitting the dataset into the Training set and Test set\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 32, stratify=y)","86ab44e6":"# Handle Imbalanced data\n\nsm = SMOTE(random_state=42)\nX_train, y_train = sm.fit_resample(X_train, y_train)","5a70531b":"# Training the Random Forest Regression model \n\nmodel = LogisticRegression()\nmodel.fit(X_train,y_train)","c9516d8a":"# Predicting\n\ny_pred = model.predict(X_test)","6924a280":"# Classification Report\n\nprint(classification_report(y_test, y_pred))","4dd612c3":"Working on making the model better ..."}}