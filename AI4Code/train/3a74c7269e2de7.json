{"cell_type":{"95f668cb":"code","3e3c93fe":"code","ed24b484":"code","877fe375":"code","c9db5c73":"code","67d50f9a":"code","0bce13b4":"code","809d1373":"code","f3463af1":"code","34142787":"code","3201d8e3":"code","9f266e55":"code","c0322430":"code","a9d086b1":"code","0f2b333b":"code","8a689b36":"code","7967b1c2":"code","275f56a4":"code","8e78b75d":"code","7bcfe64a":"code","87b0e877":"code","6cd19fb7":"code","d485970c":"code","456f70b0":"code","5234534b":"code","8ecd8b79":"code","12055465":"code","d73da094":"code","0bbfd770":"code","0ea417cc":"code","487d56cd":"markdown","95e56ba4":"markdown","2b878dcb":"markdown","54a47a56":"markdown","67ef661a":"markdown","756a5b13":"markdown","c4eacb62":"markdown","180b3e4b":"markdown","2efb2440":"markdown","5f2bbcd3":"markdown","352b091f":"markdown","bd729f9a":"markdown","e8323d57":"markdown","25989a77":"markdown","1a8f0aef":"markdown","6c366554":"markdown","57f08f4f":"markdown","722eb0af":"markdown","15aeca16":"markdown","a882c3dc":"markdown","f729986c":"markdown","414d99c7":"markdown","b6dcf8fc":"markdown"},"source":{"95f668cb":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport datetime\nimport unidecode\nimport numpy as np\nimport pandas as pd\nfrom numpy import dot\nimport seaborn as sns\nfrom numpy import random\nfrom numpy.linalg import norm\nimport matplotlib.pyplot as plt\nfrom scipy.sparse import csr_matrix\nfrom sklearn.neighbors import NearestNeighbors   ","3e3c93fe":"Netflix = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\nprint(\"Dataframe Details\")\nprint(\"Total Rows: {}\\nTotal Columns: {}\".format(Netflix.shape[0],Netflix.shape[1]))\n\nNetflix.dropna(subset=['director','cast','country','date_added','rating'],axis=0,inplace=True)\nNetflix.drop(['show_id','description'],axis=1,inplace=True)\nprint()\nprint(\"Details after dropping null rows and columns\")\nprint(\"Total Rows: {}\\nTotal Columns: {}\".format(Netflix.shape[0],Netflix.shape[1]))\n\nNetflixDatabase = Netflix.copy()\n\nprint()\nprint(\"Database Created\")","ed24b484":"Netflix['cast'] = Netflix['cast'].apply(lambda x : unidecode.unidecode(x))\n\nNetflix['date_added'] = Netflix['date_added'].apply(lambda x : x[-4:])\nNetflix['date_added'] = Netflix['date_added'].astype('int64')\nNetflix['show_age'] = 2021 - Netflix['date_added']\nNetflix['show_age'] = Netflix['show_age'].apply(lambda x : str(x)+\" years\")\n\nNetflixVis = Netflix.copy()\n\nNetflix.drop(['date_added','release_year'],axis=1,inplace=True)\n\nprint(\"Data Procesing Done\")","877fe375":"NetflixVis.head()","c9db5c73":"sns.countplot(x = 'type', data = NetflixVis)\n\nplt.xlabel(\"Show Type\")\nplt.ylabel(\"Count Of Content\")","67d50f9a":"plt.figure(figsize=(10,3))\n\nplt.subplot(1,2,1)\nmovies_rating = NetflixVis[NetflixVis['type'] == \"Movie\"]\nmovies_rating.rating.hist(bins=10)\nplt.xlabel(\"Rating\")\nplt.title(\"Movie ratings frequency\")\nplt.xticks(rotation = 45)\n\nplt.subplot(1,2,2)\nshow_rating = NetflixVis[NetflixVis['type'] == \"TV Show\"]\nshow_rating.rating.hist(bins=10)\nplt.xlabel(\"Rating\")\nplt.title(\"TV Show ratings frequency\")\nplt.xticks(rotation = 45)\n\nplt.tight_layout(pad=0.4)","0bce13b4":"sns.boxplot(x = 'type',y = 'date_added',data=NetflixVis)\n\nplt.ylabel(\"Date Added\")\nplt.xlabel(\"Show Type\")","809d1373":"age = NetflixVis['show_age'].value_counts()[:10]\nage.plot(kind='bar',title='Number of movies over the years')","f3463af1":"plt.figure(figsize=(10,3))\n\nplt.subplot(1,2,1)\nmovies_duration = NetflixVis[NetflixVis['type'] == \"Movie\"]\nmovies_duration = movies_duration['duration'].value_counts()[:10]\nmovies_duration.plot(kind='bar',title='Number of movies over the years')\nplt.xlabel(\"Duration\")\nplt.title(\"Top 10 Movie duration\")\nplt.xticks(rotation = 45)\n\nplt.subplot(1,2,2)\nshow_duration = NetflixVis[NetflixVis['type'] == \"TV Show\"]\nshow_duration = show_duration['duration'].value_counts()[:10]\nshow_duration.plot(kind='bar',title='Number of movies over the years')\nplt.xlabel(\"Seasons\")\nplt.title(\"Top 10 TV Shows seasons\")\nplt.xticks(rotation = 45)\n\nplt.tight_layout(pad=0.3)","34142787":"country = NetflixVis['country'].value_counts()[:10]\ncountry.plot(kind='bar',title='Number of movies over the years')","3201d8e3":"plt.figure(figsize=(20,5))\n\nfor i in range(len(country.index)):\n    plt.subplot(2,5,i+1)\n    moviesvsshows = NetflixVis[NetflixVis['country'] == country.index[i]]\n    moviesvsshows = moviesvsshows['type'].value_counts()\n    moviesvsshows.plot(kind='bar')\n    plt.title(\"Movies vs Shows in {}\".format(country.index[i]))\n    plt.xticks(rotation = 360)\n    \nplt.tight_layout(pad=0.5)","9f266e55":"added_year = pd.pivot_table(NetflixVis, values='title', index='date_added', aggfunc=np.count_nonzero)\nrelease_year = pd.pivot_table(NetflixVis, values='title', index='release_year', aggfunc=np.count_nonzero)\n\nplt.figure(figsize=(8,4))\nsns.lineplot(x='date_added', y='title', data=added_year, label='Year Added')\nsns.lineplot(x='release_year', y='title', data=release_year, label='Year Release')\nplt.xlabel(\"Year\")\nplt.ylabel(\"Number of Content\")\n\nplt.legend(shadow=True)","c0322430":"genre = NetflixVis[\"listed_in\"].value_counts()[:10]\ngenre.plot(kind='barh',title='Genre of movies over the years')","a9d086b1":"countrygenre = pd.pivot_table(NetflixVis, values='title', index=['country','listed_in'],aggfunc=np.count_nonzero).sort_values(by=['title']\n                                                                                                    ,ascending=False)\ncountrygenre = added_year[:5]   \ncountrygenre.plot(kind='barh',title='Country wise genre over the years')\n\nplt.ylabel(\"Countries and Genre\")","0f2b333b":"Begin = datetime.datetime.now()\n\nsingle = ['type','rating', 'show_age','duration']\nlists = ['country','cast','director', 'listed_in']\n\nfor j in lists:\n    Netflix[j] = Netflix[j].apply(lambda x : x.replace(\" \",\"\").split(\",\"))\n\nNetflixEncoded = pd.DataFrame({'Index':Netflix.index})\nNetflixEncoded = NetflixEncoded.set_index('Index')\nprint(\"Encoder Dataframe Created\")","8a689b36":"# CODED FOR SINGLE ENTRIES\n\nfor i in single:\n    for j in Netflix[i].unique():\n        NetflixEncoded[j] = 0\n           \nfor i in range(len(Netflix)):\n    row = Netflix.index[i] \n    for j in single:    \n        value = Netflix[j][row]        \n        NetflixEncoded.loc[row,value] = 1     ","7967b1c2":"# CODED FOR MULTIPLE ENTRIES\n    \nfor i in lists:\n    holder = []\n    \n    for j in range(len(Netflix[i])):\n        row = Netflix.index[j] \n        holder.append([x.strip() for x in Netflix[i][row]])\n\n    finalcol = [l for m in holder for l in m]\n    finalcol = list(set(finalcol))\n    \n    for cols in finalcol:\n        NetflixEncoded[cols] = 0\n     \nfor i in range(len(Netflix)):\n    row = Netflix.index[i] \n    for j in lists:\n        for value in Netflix[j][row]: \n            NetflixEncoded.loc[row,value] = 1  \n             \nNetflixEncoded.fillna(0,inplace=True)  \nprint(\"Encoding Dataframe Done\")  ","275f56a4":"NetflixDatabase.reset_index(inplace=True) \nNetflixDatabase.drop('index',axis=1,inplace=True)\n\nNetflixEncoded.reset_index(inplace=True) \nNetflixEncoded.drop('Index',axis=1,inplace=True)\n\nprint(\"Index Reset for 'NetflixDatabase' and 'NetflixEncoded'\")  ","8e78b75d":"def content_recommendation_system(title):\n    cossim_values = []\n    \n    try:\n        row = NetflixDatabase[NetflixDatabase['title'] == title].index[0]\n        row = NetflixEncoded.index[row]\n\n        A = np.array(NetflixEncoded.iloc[row])\n\n        for j in range(len(NetflixEncoded)):\n            B = np.array(NetflixEncoded.iloc[j])\n            cossim = dot(A,B)\/(norm(A)*norm(B))\n            cossim_values.append(cossim)\n\n        NetflixDatabase['cosine_similarity'] = cossim_values\n        results = NetflixDatabase.sort_values('cosine_similarity', ascending=False) \n        results = results.head(6).iloc[1:,:-1]\n        return(results)\n    \n    except:\n        print(\"Sorry there seems to be a problem. Kindly try another movies or show\")       ","7bcfe64a":"content_recommendation_system(\"Mercy\")   ","87b0e877":"content_recommendation_system(\"Gotham\")   ","6cd19fb7":"content_recommendation_system(\"Age\")","d485970c":"End = datetime.datetime.now()\nRunTime = round((End - Begin).total_seconds()\/60.0)\nprint(\"Total Time Taken by 'Content Based Recommendation System' was {} Mins\".format(RunTime))  ","456f70b0":"Begin = datetime.datetime.now()\n\nuserid = np.arange(1, 2000+1, 1)\nuserid = [\"uid\" + str(userid) for userid in userid]\n\nusercols = Netflix['title'].unique()\nuserwatch = random.randint(5, size=(2000,len(usercols)))\n\nwatchhist = pd.DataFrame(userwatch,columns=usercols)\nwatchhist.insert(0,\"user_id\",userid)\nwatchhist = watchhist.set_index('user_id')\nwatchhist = watchhist.transpose()\nwatchhist.index.name = 'title'\n\nwatchhist.head()","5234534b":"sparselist = csr_matrix(watchhist.values)\nwatchhist.reset_index(inplace=True)\n\nknn = NearestNeighbors(metric='cosine', algorithm='brute', n_neighbors=20)\nknn.fit(sparselist)","8ecd8b79":"def collab_recommendation_system(title):\n    \n    try:\n        row = watchhist[watchhist['title'] == title].index[0]\n\n        distances , indices = knn.kneighbors(sparselist[row],n_neighbors=5+1) \n        indices = [l for m in indices.tolist() for l in m]\n        distances = [l for m in distances.tolist() for l in m]\n\n        recommendation = {}\n\n        for i in range(1,len(indices)):\n            movie_name = watchhist.iloc[indices[i]]['title']\n            recommendation[movie_name] = distances[i]\n\n        recommendation = {k: v for k, v in sorted(recommendation.items(), key=lambda item: item[1])}\n        results = pd.DataFrame()\n\n        for key,value in recommendation.items():\n            row = NetflixDatabase[NetflixDatabase['title'] == key]\n            results = results.append(row)\n\n        return(results.iloc[1:,:-1])\n        \n    except:\n        print(\"Sorry there seems to be a problem. Kindly try another movies or show\")   ","12055465":"collab_recommendation_system(\"Mercy\")   ","d73da094":"collab_recommendation_system(\"Gotham\")","0bbfd770":"collab_recommendation_system(\"Age\")","0ea417cc":"End = datetime.datetime.now()\nRunTime = round((End - Begin).total_seconds()\/60.0)\nprint(\"Total Time Taken by 'Collaborative Based Recommendation System' was {} Mins\".format(RunTime))  ","487d56cd":"Netflix targets older\/mature audience as there are several contents whether movies or tv shows rated as \"TV Mature Audience (TV-MA)\"","95e56ba4":"A few movies have been added between 2008 - 2015. Many movies and TV Shows were added after 2015 and 2013 respectively.","2b878dcb":"# Recommendation System","54a47a56":"Movies as old as 50 years have found their way into OTT platforms","67ef661a":"The United States of America is the leading content contributor followed by India.","756a5b13":"A majority of the added content on netflix seem to be movies","c4eacb62":"Although there is no room for a collaborative recommendation system with this single dataset, let us play around with the data and explore this model.","180b3e4b":"# Data Visualization","2efb2440":"Diving deeper into contributions we see that Egypt, The Philippines, and Indonesia are majorly contributing several movies. Although The United States of America and India are the biggest content contributor, we observe United Kingdom, Spain, Japan, Turkey, and Canada offer more TV Shows. ","5f2bbcd3":"Netflix is an American over-the-top content platform and production company. Netflix was founded in 1997 and ever since has been bringing to us amazing content be it movies or series. Netflix has proven to be a total stress buster to many of us, especially considering the current pandemic around the world. They provide a vast range of content in various languages, genres, and time. May it be classics or modern pictures think about it and you may find it on Netflix.\n\nThis notebook aims at creating a movie assistant such that you can find several suggestions of must-watch based on the movies of your choice. For this, we will use the concept called \"Recommender systems\".\n\n**Recommender systems** are an important class of machine learning that offer suggestions to users based on a degree of relevance. It can be categorized as collaborative filtering or a content-based system. We will create both these models for demonstration.\n\nKindly provide an upvote if this notebook was useful. Also, I would greatly appreciate any feedback or suggestions for improvement. \n\nThank-you :)\n","352b091f":"<h1><center> Netflix Recommendation System <\/center><\/h1>","bd729f9a":"<h4><u>Analysis based on given data<\/u><\/h4>\n\n* Netflix offers a variety of movies ranging from different languages to a vast genre.\n* In many countries OTT platforms don\u2019t come under government censorship, thus Netflix one of such OTT platforms offers majority content catering to their \"The Mature Audience\".\n* Initially, TV Shows had not seen the majestic light of the OTT Platform, it was first available for online streaming in the year 2013.\n* Netflix offered few movies between the years 2008 - 2015, before adding a vast range thereafter.\n* Several TV Shows had been added between 2017 - 2019, probably to cater to the increasing demand and fascination revolving around TV Shows.\n* In the last 2 years, there were several contents added.\n* Among the leading 10 countries that contributed content to Netflix The United States of America and India topped the list.\n* United Kingdom, Spain, Japan, Turkey, and Canada offer more TV Shows than any other leading contributors.\n* Movies and TV Shows have a maximum length of 1 and a half hours and 1 season respectively.\n* Netflix has added several fine evergreen classics.\n* The majority of content on Netflix is Stand-Ups, Dramas, and International Movies\n* The United States of America and India have contributed several contents of Stand-ups and Drama's respectively.\n","e8323d57":"## 1. Content Based Recommendation System","25989a77":"## 2. Collaborative Based Recommendation System","1a8f0aef":"# Reference","6c366554":"The length of each movie is mostly above 1 and a half hour, whereas several TV Shows seems to be limited series of 1 season.  ","57f08f4f":"Netflix offer a number of Stand-ups, Dramas and International Movies  ","722eb0af":"# Data Cleaning and Processing","15aeca16":"![image.png](attachment:image.png)","a882c3dc":"Major content on Netflix is about 2 years old. Thus, pointing at several add ons in the year 2018-2019. ","f729986c":"Content-Based Recommendation System:<br>\nThank you for this amazing concept. Do check out this piece<br>\nhttps:\/\/www.kaggle.com\/eward96\/netflix-recommendation-engine","414d99c7":"The United States of America has maximum content catering to Stand-Up Comedy whereas India has a maximum genre of Drama.","b6dcf8fc":"# Summary of Analysis"}}