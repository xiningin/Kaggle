{"cell_type":{"faad1871":"code","9b372a77":"code","abb9107d":"code","0643801a":"code","a359b691":"code","c58f9e6b":"code","7b04dfe7":"code","026a9b07":"code","2e57e5b9":"code","a4cff87b":"code","3461ce11":"code","9de7dedb":"markdown","bb93946d":"markdown","338f5ded":"markdown","e8a316e2":"markdown","1596b0ac":"markdown","e41e9575":"markdown","508b8179":"markdown","c4290f4b":"markdown","77311c5e":"markdown","3dca8bf7":"markdown","21e838d2":"markdown","eb307464":"markdown","15ecc8ec":"markdown","ea5ce7ec":"markdown","0b1458f8":"markdown","f07ff93f":"markdown","03c01b30":"markdown","db49f480":"markdown","2cdd489d":"markdown","4d1d2ec3":"markdown"},"source":{"faad1871":"# import the required modules\nimport numpy as np # linear algebra\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab","9b372a77":"N_points = 100000\nn_bins = 20\n\n# Generate a normal distribution, center at x=0 and y=5\nx = np.random.randn(N_points)\ny = .4 * x + np.random.randn(100000) + 5\n\nfig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)\n\n# We can set the number of bins with the `bins` kwarg\naxs[0].hist(x, facecolor='yellow',edgecolor='green', bins=n_bins)\naxs[1].hist(y, facecolor='yellow',edgecolor='green', bins=n_bins)","abb9107d":"plt.hist(x, facecolor='peru',edgecolor='blue', bins=n_bins, cumulative=True)\nplt.show()","0643801a":"plt.hist(x, facecolor='peru',edgecolor='blue', bins=n_bins, range=(-2,2))\nplt.show()","a359b691":"plt.hist(x, facecolor='peru',edgecolor='blue', bins=n_bins)\nplt.hist(y, facecolor='yellow',edgecolor='green', bins=n_bins)\nplt.show()","c58f9e6b":"# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\nsizes = [15, 30, 45, 10]\nexplode = (0, 0.1, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()","7b04dfe7":"from matplotlib.ticker import FuncFormatter\n\ndata = {'Barton LLC': 109438.50,\n        'Frami, Hills and Schmidt': 103569.59,\n        'Fritsch, Russel and Anderson': 112214.71,\n        'Jerde-Hilpert': 112591.43,\n        'Keeling LLC': 100934.30,\n        'Koepp Ltd': 103660.54,\n        'Kulas Inc': 137351.96,\n        'Trantow-Barrows': 123381.38,\n        'White-Trantow': 135841.99,\n        'Will LLC': 104437.60}\ngroup_data = list(data.values())\ngroup_names = list(data.keys())\ngroup_mean = np.mean(group_data)","026a9b07":"fig, ax = plt.subplots()\nax.barh(group_names, group_data)","2e57e5b9":"plt.bar([1,3,5,7,9],[5,2,7,8,2], label=\"Example one\")\n\nplt.bar([2,4,6,8,10],[8,6,2,5,6], label=\"Example two\", color='g')\nplt.legend()\nplt.xlabel('bar number')\nplt.ylabel('bar height')\n\nplt.title('Epic Graph\\nAnother Line! Whoa')\n\nplt.show()","a4cff87b":"data1 = [23,85, 72, 43, 52]\ndata2 = [42, 35, 21, 16, 9]\nplt.bar(range(len(data1)), data1)\nplt.bar(range(len(data2)), data2, bottom=data1)\nplt.show()","3461ce11":"np.random.seed(10)\ncollectn_1 = np.random.normal(100, 10, 200)\ncollectn_2 = np.random.normal(80, 30, 200)\ncollectn_3 = np.random.normal(90, 20, 200)\ncollectn_4 = np.random.normal(70, 25, 200)\n\n## combine these different collections into a list\ndata_to_plot = [collectn_1, collectn_2, collectn_3, collectn_4]\n\n# Create a figure instance\nfig = plt.figure()\n\n# Create an axes instance\nax = fig.add_axes([0,0,1,1])\n\n# Create the boxplot\nbp = ax.violinplot(data_to_plot)\nplt.show()","9de7dedb":"# BarPlot","bb93946d":"The plt.bar creates the bar chart for us. If you do not explicitly choose a color, then, despite doing multiple plots, all bars will look the same. This gives us a change to cover a new Matplotlib customization option, however. You can use color to color just about any kind of plot, using colors like g for green, b for blue, r for red, and so on. You can also use hex color codes, like #191970","338f5ded":"The figure contains the overall window where plotting happens, contained within the figure are where actual graphs are plotted. Every Axes has an x-axis and y-axis for plotting. And contained within the axes are titles, ticks, labels associated with each axis. An essential figure of matplotlib is that we can more than axes in a figure which helps in building multiple plots, as shown below. In matplotlib, pyplot is used to create figures and change the characteristics of figures.","e8a316e2":"# Matplotlib Tutorial","1596b0ac":"# Vilion Plot\n","e41e9575":"We can also create a cumulative version of this histograms.","508b8179":"This barplot will help in better understanding of a company profits.","c4290f4b":"# Histograms\nHistograms are generally used when we need to count the number of occurness.","77311c5e":"# Stack charts\nYou can stack bar charts on top of each other. That is particulary useful when you multiple values combine into something greater.","3dca8bf7":"# Pie Charts\nA pie chart (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice (and consequently its central angle and area), is proportional to the quantity it represents.","21e838d2":"Matplotlib is a 2-D plotting library that helps in visualizing figures. Matplotlib emulates Matlab like graphs and visualizations. Matlab is not free, is difficult to scale and as a programming language is tedious. So, matplotlib in Python is used as it is a robust, free and easy library for data visualization.","eb307464":"![image.png](attachment:image.png)","15ecc8ec":"more to come ...","ea5ce7ec":"We can specify the range of histogram as well using range.","0b1458f8":"# Multiple Histogram","f07ff93f":"![image.png](attachment:image.png)","03c01b30":"Multiple histograms are useful in understanding the distribution between 2 entity variables. We can see from there which variable is performing better. e.g product A is sold more than product B.","db49f480":"A Violin Plot is used to visualise the distribution of the data and its probability density.","2cdd489d":"The most simple way of creating a figure with an axes is using pyplot.subplots. We can then use Axes.plot to draw some data on the axes:","4d1d2ec3":"From the above pie chart , it is clearly seen that the what is the percentage of each entry."}}