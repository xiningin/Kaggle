{"cell_type":{"168f3dfc":"code","614fc483":"code","8baab2c8":"code","95939b34":"code","a1978aed":"code","446d7b89":"code","c2c62b53":"code","0d7d59ac":"code","b59578a6":"code","9626b894":"code","677dd8b6":"markdown"},"source":{"168f3dfc":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV, learning_curve, ShuffleSplit, cross_val_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score, roc_auc_score, roc_curve\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom pandas_profiling import ProfileReport\nfrom sklearn.impute import KNNImputer\nfrom sklearn.ensemble import RandomForestClassifier\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport lightgbm as lgb\nfrom sklearn import svm\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\npd.set_option('display.max_columns', 50)\npd.set_option('display.max_rows', 100)","614fc483":"bank_df = pd.read_csv(\"..\/input\/credit-card-customers\/BankChurners.csv\")\nbank_df\n\n# Drop useless columns\ndrop_cols = list(bank_df.iloc[:,[0,-1,-2]].columns)\nbank_df.drop(columns=drop_cols, inplace=True)\n\n# Chnage response from categorical to int\nbank_df['Attrition_Flag'] = (bank_df['Attrition_Flag']=='Attrited Customer').astype(int)","8baab2c8":"# EDA\n\nreport = ProfileReport(bank_df)\nreport\n\nbank_df.describe()\n\n# Contacts_Count_12_mon\nby_contact_df = bank_df.groupby('Contacts_Count_12_mon')['Attrition_Flag'].mean()\nby_contact_df.plot(kind='bar', ylabel='Attrited Ratio')\n\n# Months_Inactive_12_mon\nby_inactive_df = bank_df.groupby('Months_Inactive_12_mon')['Attrition_Flag'].mean()\nby_inactive_df.plot(kind='bar', ylabel='Attrited Ratio')\n\n# Education level\nby_edu_df = bank_df.groupby('Education_Level')['Attrition_Flag'].mean()\nby_edu_df.plot(kind='bar', ylabel='Attrited Ratio')\n\n# Marital_Status\nby_marry_df = bank_df.groupby('Marital_Status')['Attrition_Flag'].mean()\nby_marry_df.plot(kind='bar', ylabel='Attrited Ratio')\n\n# Income_Category\nby_income_df = bank_df.groupby('Income_Category')['Attrition_Flag'].mean()\nby_income_df.plot(kind='bar', ylabel='Attrited Ratio')\n\n# Gender\nby_gender_df = bank_df.groupby('Gender')['Attrition_Flag'].mean()\nby_gender_df.plot(kind='bar', ylabel='Attrited Ratio')\n\n# Card_Category\nby_card_df = bank_df.groupby('Card_Category')['Attrition_Flag'].mean()\nby_card_df.plot(kind='bar', ylabel='Attrited Ratio')\n\n# Credit Limit\nprint(\"Avg attrition of customers with minimun credit limit: \", \n      bank_df[bank_df['Credit_Limit']==bank_df['Credit_Limit'].min()]['Attrition_Flag'].mean())\nprint(\"Avg attrition of customers with more credit limit: \", \n      bank_df[bank_df['Credit_Limit']!=bank_df['Credit_Limit'].min()]['Attrition_Flag'].mean())\n\n# Total_Revolving_Bal\nprint(\"Avg attrition of customers with 0 revolving balance: \", \n      bank_df[bank_df['Total_Revolving_Bal']==0]['Attrition_Flag'].mean())\nprint(\"Avg attrition of customers with more revolving balance: \", \n      bank_df[bank_df['Total_Revolving_Bal']!=0]['Attrition_Flag'].mean())\n\n# Utilization_Ratio\nprint(\"Avg attrition of customers with 0 utilization ratio: \", \n      bank_df[bank_df['Avg_Utilization_Ratio']==bank_df['Avg_Utilization_Ratio'].min()]['Attrition_Flag'].mean())\nprint(\"Avg attrition of customers with more utilization ratio: \", \n      bank_df[bank_df['Avg_Utilization_Ratio']!=bank_df['Avg_Utilization_Ratio'].min()]['Attrition_Flag'].mean())","95939b34":"# Feature Engineering\n\n# KNN for Unknown\ntmp_bank_df = bank_df.copy()\n\nle_ls = []\nfor col in ['Education_Level', 'Marital_Status', 'Income_Category']:\n    le = LabelEncoder()\n    tmp_bank_df[col] = le.fit_transform(tmp_bank_df[col])\n    keys = le.classes_\n    values = le.transform(le.classes_)\n    dictionary = dict(zip(keys, values))\n    le_ls.append(le)\n    print(dictionary)\n    tmp_bank_df.loc[tmp_bank_df[col]==dictionary['Unknown'], col] = np.nan\n\ntmp_bank_df = pd.get_dummies(tmp_bank_df)\n\n# Use KNN to fill for each column\nfor col in ['Marital_Status', 'Income_Category', 'Education_Level']:\n    imputer = KNNImputer(n_neighbors = 5)\n    fill_tmp_bank_df = pd.DataFrame(imputer.fit_transform(tmp_bank_df.iloc[:,1:]), \n                                    index=tmp_bank_df.index, columns=tmp_bank_df.columns[1:])\n    tmp_bank_df[col] = fill_tmp_bank_df[col]\n\ni = 0\nfor col in ['Education_Level', 'Marital_Status', 'Income_Category']:\n    tmp_bank_df[col] = le_ls[i].inverse_transform(round(tmp_bank_df[col], 0).astype(int))\n    i += 1\n    \nbank_df = tmp_bank_df","a1978aed":"# One-hot encoding\nbank_df = pd.get_dummies(bank_df)\n\n# Add new features\n# Avg trans amt \nbank_df['Avg_Trans_Amt'] = bank_df['Total_Trans_Amt']\/bank_df['Total_Trans_Ct']\n# Creat new categorical feature based on whether credit limit equals min credit limit\nbank_df.loc[bank_df['Credit_Limit']==bank_df['Credit_Limit'].min(), 'Min_Credit_Limit'] = 1\nbank_df['Min_Credit_Limit'].fillna(0, inplace=True)\n# Creat new categorical feature based on whether total balance equals 0\nbank_df.loc[bank_df['Total_Revolving_Bal']==0, '0_Total_Revolving_Bal'] = 1\nbank_df['0_Total_Revolving_Bal'].fillna(0, inplace=True)\n# Creat new categorical feature based on whether total balance equals 0\nbank_df.loc[bank_df['Avg_Utilization_Ratio']==0, '0_Avg_Utilization_Ratio'] = 1\nbank_df['0_Avg_Utilization_Ratio'].fillna(0, inplace=True)\n# Determine amount decrease or increase based on Amt_Chng_Q4_Q1\nbank_df.loc[bank_df['Total_Amt_Chng_Q4_Q1']<bank_df['Total_Amt_Chng_Q4_Q1'].median(), 'Amt_Q4_Q1_Dec'] = 1\nbank_df['Amt_Q4_Q1_Dec'].fillna(0, inplace=True)\n# Determine count decrease or increase based on Ct_Chng_Q4_Q1\nbank_df.loc[bank_df['Total_Ct_Chng_Q4_Q1']<bank_df['Total_Ct_Chng_Q4_Q1'].median(), 'Ct_Q4_Q1_Dec'] = 1\nbank_df['Ct_Q4_Q1_Dec'].fillna(0, inplace=True)\n\n\n\n# Transformation\nskewed_col = ['Total_Trans_Amt', 'Credit_Limit', 'Avg_Open_To_Buy']\ntrans_bank_df = bank_df.copy()\nfor col in skewed_col:\n    plt.figure(figsize=(8, 4))\n    plt.subplot(1, 2, 1)\n    plt.hist(bank_df[col])\n    plt.title(f\"{col}: Before\")\n    trans_bank_df[col] = boxcox1p(bank_df[col], boxcox_normmax(bank_df[col] + 1))\n    plt.subplot(1, 2, 2)\n    plt.hist(trans_bank_df[col])\n    plt.title(f\"{col}: After\")\n\n# Standardize\nstd = StandardScaler()\nstd_df = pd.DataFrame(std.fit_transform(trans_bank_df.iloc[:,1:]), \n                      index = trans_bank_df.index, \n                      columns = trans_bank_df.columns[1:])\nstd_bank_df = pd.concat([trans_bank_df.iloc[:,0], std_df], axis=1)","446d7b89":"# Logistic Regression\n\n# train test split\nX_train, X_test, y_train, y_test = train_test_split(std_bank_df.iloc[:,1:], std_bank_df.iloc[:,0], test_size=0.25, random_state=42)\n\n# PCA\npca = PCA(n_components=40) # all 40 features\npca.fit(X_train)\nprop = pca.explained_variance_ratio_\nprint(prop.cumsum())\nplt.figure(figsize=(8,8))\nplt.plot(prop)\nplt.axhline(y=0, color='red', linestyle='--')","c2c62b53":"plt.figure(figsize=(8,8))\nplt.plot(prop.cumsum())\nplt.axhline(y=1, color='red', linestyle='--')","0d7d59ac":"pca = PCA(n_components=32) # Use the first 32 pcs\npca.fit(X_train)\nX_train_pc = pca.transform(X_train)\nX_test_pc = pca.transform(X_test)\n\nparam = {'C':[10, 100, 150, 200], \n         'penalty':['l1', 'l2'],\n         'solver':['newton-cg', 'lbfgs'],\n         'class_weight':['balanced', 'none'],\n         'max_iter':[100, 250, 500]}\nlr_grid = GridSearchCV(LogisticRegression(random_state=42), param, cv=5, verbose=1, n_jobs=-1)\nlr_grid.fit(X_train, y_train)\nprint(\"Best param: \", lr_grid.best_params_)\n\nlr_pred = lr_grid.predict(X_test)\nlr_pred_prob = lr_grid.predict_proba(X_test)[:,1]\nlr_pred_df = pd.DataFrame({\"pred\":lr_pred, \"prob\":lr_pred_prob, \"actual\":y_test})\n# mannually adjust pred based on prob\nthresh = np.quantile(lr_pred_prob, (1-y_train.mean()))\nlr_pred_df['pred'] = (lr_pred_df['prob']>thresh).astype(int)\nlr_pred_df\n\n# Reference: https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_learning_curve.html\ndef plot_learning_curve(\n    estimator,\n    title,\n    X,\n    y,\n    axes=None,\n    ylim=None,\n    cv=None,\n    n_jobs=None,\n    train_sizes=np.linspace(0.1, 1.0, 5),\n):\n    \"\"\"\n    Generate 3 plots: the test and training learning curve, the training\n    samples vs fit times curve, the fit times vs score curve.\n\n    Parameters\n    ----------\n    estimator : estimator instance\n        An estimator instance implementing `fit` and `predict` methods which\n        will be cloned for each validation.\n\n    title : str\n        Title for the chart.\n\n    X : array-like of shape (n_samples, n_features)\n        Training vector, where ``n_samples`` is the number of samples and\n        ``n_features`` is the number of features.\n\n    y : array-like of shape (n_samples) or (n_samples, n_features)\n        Target relative to ``X`` for classification or regression;\n        None for unsupervised learning.\n\n    axes : array-like of shape (3,), default=None\n        Axes to use for plotting the curves.\n\n    ylim : tuple of shape (2,), default=None\n        Defines minimum and maximum y-values plotted, e.g. (ymin, ymax).\n\n    cv : int, cross-validation generator or an iterable, default=None\n        Determines the cross-validation splitting strategy.\n        Possible inputs for cv are:\n\n          - None, to use the default 5-fold cross-validation,\n          - integer, to specify the number of folds.\n          - :term:`CV splitter`,\n          - An iterable yielding (train, test) splits as arrays of indices.\n\n        For integer\/None inputs, if ``y`` is binary or multiclass,\n        :class:`StratifiedKFold` used. If the estimator is not a classifier\n        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.\n\n        Refer :ref:`User Guide <cross_validation>` for the various\n        cross-validators that can be used here.\n\n    n_jobs : int or None, default=None\n        Number of jobs to run in parallel.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    train_sizes : array-like of shape (n_ticks,)\n        Relative or absolute numbers of training examples that will be used to\n        generate the learning curve. If the ``dtype`` is float, it is regarded\n        as a fraction of the maximum size of the training set (that is\n        determined by the selected validation method), i.e. it has to be within\n        (0, 1]. Otherwise it is interpreted as absolute sizes of the training\n        sets. Note that for classification the number of samples usually have\n        to be big enough to contain at least one sample from each class.\n        (default: np.linspace(0.1, 1.0, 5))\n    \"\"\"\n    if axes is None:\n        _, axes = plt.subplots(1, 3, figsize=(20, 5))\n\n    axes[0].set_title(title)\n    if ylim is not None:\n        axes[0].set_ylim(*ylim)\n    axes[0].set_xlabel(\"Training examples\")\n    axes[0].set_ylabel(\"Score\")\n\n    train_sizes, train_scores, test_scores, fit_times, _ = learning_curve(\n        estimator,\n        X,\n        y,\n        cv=cv,\n        n_jobs=n_jobs,\n        train_sizes=train_sizes,\n        return_times=True,\n    )\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    fit_times_mean = np.mean(fit_times, axis=1)\n    fit_times_std = np.std(fit_times, axis=1)\n\n    # Plot learning curve\n    axes[0].grid()\n    axes[0].fill_between(\n        train_sizes,\n        train_scores_mean - train_scores_std,\n        train_scores_mean + train_scores_std,\n        alpha=0.1,\n        color=\"r\",\n    )\n    axes[0].fill_between(\n        train_sizes,\n        test_scores_mean - test_scores_std,\n        test_scores_mean + test_scores_std,\n        alpha=0.1,\n        color=\"g\",\n    )\n    axes[0].plot(\n        train_sizes, train_scores_mean, \"o-\", color=\"r\", label=\"Training score\"\n    )\n    axes[0].plot(\n        train_sizes, test_scores_mean, \"o-\", color=\"g\", label=\"Cross-validation score\"\n    )\n    axes[0].legend(loc=\"best\")\n\n    # Plot n_samples vs fit_times\n    axes[1].grid()\n    axes[1].plot(train_sizes, fit_times_mean, \"o-\")\n    axes[1].fill_between(\n        train_sizes,\n        fit_times_mean - fit_times_std,\n        fit_times_mean + fit_times_std,\n        alpha=0.1,\n    )\n    axes[1].set_xlabel(\"Training examples\")\n    axes[1].set_ylabel(\"fit_times\")\n    axes[1].set_title(\"Scalability of the model\")\n\n    # Plot fit_time vs score\n    axes[2].grid()\n    axes[2].plot(fit_times_mean, test_scores_mean, \"o-\")\n    axes[2].fill_between(\n        fit_times_mean,\n        test_scores_mean - test_scores_std,\n        test_scores_mean + test_scores_std,\n        alpha=0.1,\n    )\n    axes[2].set_xlabel(\"fit_times\")\n    axes[2].set_ylabel(\"Score\")\n    axes[2].set_title(\"Performance of the model\")\n\n    return plt\n\n\nX, y = std_bank_df.iloc[:,1:], std_bank_df.iloc[:,0]\n\ntitle = \"Learning Curves for Logistic\"\n# Cross validation with 100 iterations to get smoother mean test and train\n# score curves, each time with 20% data randomly selected as a validation set.\ncv = ShuffleSplit(n_splits=100, test_size=0.2, random_state=0)\n\nestimator = LogisticRegression(C=100, \n                               class_weight='none', \n                               max_iter=100, \n                               penalty='l2', \n                               solver='newton-cg')\nplot_learning_curve(\n    estimator, title, X, y, ylim=(0.7, 1.01), cv=cv, n_jobs=4\n)\n\nplt.show()\n\n\n# report\ndef get_eval(pred_df_ls, model_ls, grid_ls):\n    eval_df = pd.DataFrame()\n    for pred_df, model, grid in zip(pred_df_ls, model_ls, grid_ls):\n        confusion = confusion_matrix(pred_df['pred'], pred_df['actual'])\n        print(f'Confusion matrix for {model}: \\n', \n              pd.DataFrame(confusion, index=['Pred Neg', 'Pred Pos'], columns=['Actual Neg', 'Actual Pos']))\n        recall = pred_df[pred_df['actual']==1]['pred'].mean()\n        accuracy = (confusion[0,0]+confusion[1,1])\/confusion.sum()\n        precision = pred_df[pred_df['pred']==1]['actual'].mean()\n        error_rate = 1 - accuracy\n        f1 = f1_score(pred_df['pred'], pred_df['actual'])\n        auc = roc_auc_score(pred_df['actual'], pred_df['prob'])\n        run_time = grid.cv_results_['mean_fit_time'].mean()\n        eval_df = pd.concat([eval_df, pd.DataFrame({\"Model\": [model], \"Recall\":[round(recall, 3)], \"Accuracy\":[round(accuracy, 3)], \"Precision\": [round(precision, 3)],\n                         \"Error Rate\":[round(error_rate, 3)], \"F1 Score\":[round(f1, 3)], \"AUC\":[round(auc, 3)], \"Run time\":[run_time]})])\n    return eval_df\npred_df_ls = []\nmodel_ls = []\ngrid_ls = []\npred_df_ls.append(lr_pred_df)\nmodel_ls.append('Logistic')\ngrid_ls.append(lr_grid)\nget_eval(pred_df_ls, model_ls, grid_ls)\n\n# roc curve\ndef plot_roc(pred_df_ls, model_ls):\n    plt.figure(figsize=(8,8))\n    plt.plot([0, 1], [0, 1], linestyle='--')\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True Positive Rate\")\n    plt.title(\"ROC curve\")\n    for pred_df, model in zip(pred_df_ls, model_ls):\n        fpr, tpr, thresholds = roc_curve(pred_df['actual'], pred_df['prob'])\n        # plot\n        plt.plot(fpr, tpr, label=model)\n    plt.legend()\nplot_roc(pred_df_ls, model_ls)\n\n# Random Forest\n\nrf = RandomForestClassifier()\nn_estimators = [100, 200, 300]\nmax_features = [0.5, 0.25, 'log2', 'sqrt']\nmax_depth = [100, 200, 'none']\nmin_samples_split = [2, 5, 10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\nclass_weight = ['balanced', 'none']\nrf_param = {'n_estimators': n_estimators,\n            'max_features': max_features,\n            'max_depth': max_depth,\n            'min_samples_split': min_samples_split,\n            'min_samples_leaf': min_samples_leaf,\n            'bootstrap': bootstrap,\n            'class_weight': class_weight}\nrf_grid = GridSearchCV(rf, rf_param, n_jobs=-1, cv=5, verbose=1)\nrf_grid.fit(X_train, y_train)\nprint(\"Best param: \", rf_grid.best_params_)\nrf_pred = rf_grid.predict(X_test)\nrf_pred_prob = rf_grid.predict_proba(X_test)[:,1]\nrf_pred_df = pd.DataFrame({\"pred\":rf_pred, \"prob\":rf_pred_prob, \"actual\":y_test})\n# mannually adjust pred based on prob\nthresh = np.quantile(rf_pred_prob, (1-y_train.mean()))\nrf_pred_df['pred'] = (rf_pred_df['prob']>thresh).astype(int)\nrf_pred_df\n\nX, y = std_bank_df.iloc[:,1:], std_bank_df.iloc[:,0]\n\ntitle = \"Learning Curves for Random Forest\"\n\ncv = ShuffleSplit(n_splits=100, test_size=0.2, random_state=0)\n\nestimator = RandomForestClassifier(bootstrap=False, \n                                   class_weight='balanced', \n                                   max_depth=200, \n                                   max_features=0.25, \n                                   min_samples_leaf=1,\n                                   min_samples_split=2,\n                                   n_estimators=300)\nplot_learning_curve(\n    estimator, title, X, y, ylim=(0.7, 1.01), cv=cv, n_jobs=4\n)\n\nplt.show()\n\npred_df_ls.append(rf_pred_df)\nmodel_ls.append('Random Forest')\ngrid_ls.append(rf_grid)\nget_eval(pred_df_ls, model_ls, grid_ls)\n\n# roc curve\nplot_roc(pred_df_ls, model_ls)\n\n# LightGBM\n\nlgb_clf = lgb.LGBMClassifier()\nnum_leaves = [20, 30, 40]\nlearning_rate = [0.1, 0.2, 0.5]\nmax_depth = [30, 50, 70]\nmin_data_in_leaf = [10, 20, 30]\nfeature_fraction = [0.7, 0.8, 0.9]\nbagging_fraction = [0.5, 0.6, 0.7]\nlgb_param = {'num_leaves': num_leaves,\n            'learning_rate': learning_rate,\n            'max_depth': max_depth,\n            'min_data_in_leaf': min_data_in_leaf,\n            'feature_fraction': feature_fraction,\n            'bagging_fraction': bagging_fraction}\nlgb_grid = GridSearchCV(lgb_clf, lgb_param, n_jobs=-1, cv=5, verbose=1)\nlgb_grid.fit(X_train, y_train)\nprint(\"Best param: \", lgb_grid.best_params_)\nlgb_pred = lgb_grid.predict(X_test)\nlgb_pred_prob = lgb_grid.predict_proba(X_test)[:,1]\nlgb_pred_df = pd.DataFrame({\"pred\":lgb_pred, \"prob\":lgb_pred_prob, \"actual\":y_test})\n# mannually adjust pred based on prob\nthresh = np.quantile(lgb_pred_prob, (1-y_train.mean()))\nlgb_pred_df['pred'] = (lgb_pred_df['prob']>thresh).astype(int)\nlgb_pred_df\n\nX, y = std_bank_df.iloc[:,1:], std_bank_df.iloc[:,0]\n\ntitle = \"Learning Curves for LGBM\" \ncv = ShuffleSplit(n_splits=100, test_size=0.2, random_state=0)\n\n\nestimator = lgb.LGBMClassifier(bagging_fraction=0.5, \n                               class_weight='balanced', \n                               feature_fraction=0.7, \n                               learning_rate=0.5, \n                               max_depth=30,\n                               min_data_in_leaf=30,\n                               num_leaves=30)\nplot_learning_curve(\n    estimator, title, X, y, ylim=(0.7, 1.01), cv=cv, n_jobs=4\n)\n\nplt.show()\n\n\n\n# Evaluation\npred_df_ls.append(lgb_pred_df)\nmodel_ls.append('LightGBM')\ngrid_ls.append(lgb_grid)\nget_eval(pred_df_ls, model_ls, grid_ls)\n\n# roc curve\nplot_roc(pred_df_ls, model_ls)\n\n# SVM\n\nsvm_clf = svm.SVC()\nsvm_param = {'C': [0.1, 1, 10, 100], \n             'gamma': ['scale', 'auto'],\n             'kernel': ['rbf', 'poly', 'sigmoid'],\n             'probability':[True],\n             'class_weight':['balanced', 'none']}\nsvm_grid = GridSearchCV(svm_clf, svm_param, n_jobs=-1, cv=5, verbose=1)\nsvm_grid.fit(X_train, y_train)\nprint(\"Best param: \", svm_grid.best_params_)\nsvm_pred = svm_grid.predict(X_test)\nsvm_pred_prob = svm_grid.predict_proba(X_test)[:,1]\nsvm_pred_df = pd.DataFrame({\"pred\":svm_pred, \"prob\":svm_pred_prob, \"actual\":y_test})\n# mannually adjust pred based on prob\nthresh = np.quantile(svm_pred_prob, (1-y_train.mean()))\nsvm_pred_df['pred'] = (svm_pred_df['prob']>thresh).astype(int)\nsvm_pred_df\n\nX, y = std_bank_df.iloc[:,1:], std_bank_df.iloc[:,0]\n\ntitle = \"Learning Curves for SVM\" \ncv = ShuffleSplit(n_splits=100, test_size=0.2, random_state=0)\n\n\nestimator = svm.SVC(C=10, \n                    class_weight='balanced', \n                    gamma='scale', \n                    kernel='rbf', \n                    probability=True)\nplot_learning_curve(\n    estimator, title, X, y, ylim=(0.7, 1.01), cv=cv, n_jobs=4\n)\n\nplt.show()\n\n# Evaluation\npred_df_ls.append(svm_pred_df)\nmodel_ls.append('SVM')\ngrid_ls.append(svm_grid)\nget_eval(pred_df_ls, model_ls, grid_ls)\n\n# roc curve\nplot_roc(pred_df_ls, model_ls)\n\n# Error Analysis\nlgb_clf.fit(X_train, y_train)\nfeat_imp_df = pd.DataFrame({'import':lgb_clf.feature_importances_, 'feat':X_train.columns})\nfeat_imp_df.sort_values('import', ascending=False)\n\nlgb_pred_df[lgb_pred_df['pred']!=lgb_pred_df['actual']]\n\nbank_df['Total_Ct_Chng_Q4_Q1'].median()\nbank_df.iloc[[3668,321,8254, 8209, 8900]]\n\nbank_df.iloc[[4889,6125,1558,6811,3130]]","b59578a6":"pred_df = pd.DataFrame({'Model': ['Logistic', 'Random Forest', 'LightGBM', 'SVM'], 'AUC': [0.935, 0.991, 0.994, .95],\n                        'Run_time': [0.165, 1.504, 0.453, 12.317]})\npred_df","9626b894":"fig, ax = plt.subplots(1, 1)\nax.bar(data=pred_df, x='Model', height='Run_time')\nplt.ylabel('Run_time')\n#plt.ylim(0.9, 1)\nplt.show()","677dd8b6":"# import packages and data"}}