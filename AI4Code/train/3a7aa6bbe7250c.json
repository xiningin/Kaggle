{"cell_type":{"4dae20fc":"code","a554dfe0":"code","1ea87680":"code","698e9d1b":"code","9a9c4451":"code","160db7ad":"code","1bb56d29":"code","b89fd44b":"code","8f2ced6c":"code","451dc297":"code","83d7ca75":"code","e3db7d1e":"code","452f411a":"code","e3b0082c":"code","bf92c529":"code","9a73f85f":"code","91f38c91":"code","1ca894c7":"code","c2893914":"code","8b2b604b":"code","65eac594":"code","f307517c":"code","7d17b2db":"code","c9b302bc":"code","a1c849b7":"code","8dd02f07":"code","4ab93eb5":"code","7551f56b":"code","28503aa1":"code","c597bbb7":"code","80139cc6":"code","f97f0547":"code","da84a725":"code","bed0b471":"code","f1474f02":"code","0e2ecee7":"code","d6526d79":"code","42bc6299":"code","cfa94032":"markdown"},"source":{"4dae20fc":"!conda install -c conda-forge --yes meshplot","a554dfe0":"import meshplot as mp","1ea87680":"!pip install open3d\nimport open3d as o3d","698e9d1b":"from mpl_toolkits.mplot3d import Axes3D ","9a9c4451":"import matplotlib \nfrom matplotlib.pyplot import plot ","160db7ad":"!pip3 install pyransac3d","1bb56d29":"import pyransac3d as pyrsc","b89fd44b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f2ced6c":"scan_names = []\nfor dirname, _, filenames in os.walk('..\/input\/100-ply-scans-ball'):\n    for filename in filenames:\n        scan_names.append(os.path.join(dirname, filename))","451dc297":"filenames.sort()\nfilenames","83d7ca75":"pcd = []\nfor i in range(len(scan_names)):\n    pcd.append(o3d.io.read_point_cloud(scan_names[i]))\n# print(pcd)\n# o3d.io.write_point_cloud(\"copy_of_fragment.pcd\", pcd)","e3db7d1e":"# pcd.append(o3d.io.read_point_cloud('..\/input\/baball1\/baball.ply'))","452f411a":"pcd","e3b0082c":"points = []\nfor i in range(len(pcd)):\n    points.append(np.asarray(pcd[i].points))","bf92c529":"x, y, z = [], [], []\nfor i in range(len(points)):\n    x.append(points[i][:, 0])\n    y.append(points[i][:, 1])\n    z.append(points[i][:, 2])","9a73f85f":"sph = pyrsc.Sphere()","91f38c91":"center, radius, inliers = [], [], []\nfor i in range(len(points)):\n    print(i)\n    c, r, inl = sph.fit(points[i], thresh = 0.4)\n    center.append(c)\n    radius.append(r)\n    inliers.append(inl)","1ca894c7":"numpy_center = np.array(center)\nprint(np.std((numpy_center[:,0]**2+numpy_center[:,1]**2+numpy_center[:,2]**2)**0.5))\nprint(np.average(radius))\nprint(np.std(radius))","c2893914":"for i in range(len(points)):\n    print(\"{}\\n{}\\n{}\\n\".format(center[i], radius[i], inliers[i]))","8b2b604b":"# absolute values of deviations\nlimit = 10 # values greater than limit are probably errors\ndists = []\nfor j in range(len(points)):\n#     print(j)\n    dists.append(np.zeros(len(x[j])))\n    for i in range(int(len(x[j]))):    \n        temp = abs(pow(pow((x[j][i] - center[j][0]), 2) + pow((y[j][i] - center[j][1]), 2) + pow((z[j][i] - center[j][2]), 2), 0.5) - radius[j])\n        if temp<limit:\n            dists[j][i] = temp\n        else:\n            dists[j][i] = 0\n\n# values of deviations        \ndeviations = []\nfor j in range(len(points)):\n#     print(j)\n    deviations.append(np.zeros(len(x[j])))\n    for i in range(int(len(x[j]))):    \n        temp = pow(pow((x[j][i] - center[j][0]), 2) + pow((y[j][i] - center[j][1]), 2) + pow((z[j][i] - center[j][2]), 2), 0.5) - radius[j]\n        if temp<limit:\n            deviations[j][i] = temp\n        else:\n            deviations[j][i] = 0\n        ","65eac594":"num = len(points)\/\/20\nfig, axs = matplotlib.pyplot.subplots(num)\nfig.set_size_inches(10, 10)\nfor i in range(num):\n#     matplotlib.pyplot.xlim([0,175000])\n#     matplotlib.pyplot.figure(figsize=(12, 6))\n    axs[i].plot(deviations[i])\n    axs[i].plot(dists[i])\n    np_dists_0 = np.array(dists[i])\n    np_dev_0 = np.array(deviations[i])\n    print('average_dist:',np.average(np_dists_0))\n    print('std_dist:',np.std(np_dists_0))\n    print('average_dev:',np.average(np_dev_0))\n    print('std_dev:',np.std(np_dev_0))\n    print('\\n')","f307517c":"dev_avg = []\ndev_std = []\ndist_avg = []\ndist_std = []\nfor i in range(len(deviations)):\n    dev_avg.append(np.average(deviations[i]))\n    dev_std.append(np.std(deviations[i]))\n    dist_avg.append(np.average(dists[i]))\n    dist_std.append(np.std(dists[i]))\nplot(dev_avg)\nmatplotlib.pyplot.savefig('dev_avg.png')","7d17b2db":"dist_avg[61]","c9b302bc":"plot(dist_avg)\nmatplotlib.pyplot.savefig('dist_avg.png')","a1c849b7":"np.average(dist_avg)","8dd02f07":"plot(dev_std)\nmatplotlib.pyplot.savefig('dev_std.png')","4ab93eb5":"plot(dist_std)\nmatplotlib.pyplot.savefig('dist_std.png')","7551f56b":"# num = 3 # number of the scan that will be plotted\nnum = 61\npercentile_of = 99\nmatplotlib.pyplot.figure(figsize=(12, 6))\nmatplotlib.pyplot.xlim([-0.2,0.3])\n# plot(dists[0])\nhist, bin_edges = np.histogram(dists[num], bins='auto')\nplot(bin_edges[:len(hist)], hist)\n# hist, bin_edges = np.histogram(deviations[num], bins='auto')\n# plot(bin_edges[:len(hist)], hist)\nnp_dists_0 = np.array(dists[num])\nprint('average:',np.average(np_dists_0))\nprint('std:',np.std(np_dists_0))\nprint('percentile {}: {}'.format(percentile_of, np.percentile(np_dists_0, percentile_of)))\n# print(hist)\n# print(bin_edges)","28503aa1":"hist_deviations, bin_edges_deviations = np.histogram(deviations[num], bins='auto')\nnp_devs = np.array(deviations[num])\nprint('average:',np.average(np_devs))\nprint('std:',np.std(np_devs))\nprint('percentile 95:', np.percentile(np_devs, 99))\nmatplotlib.pyplot.figure(figsize=(12, 6))\n# matplotlib.pyplot.xlim([-0.15,0.3])\nplot(bin_edges_deviations[:len(hist_deviations)], hist_deviations)\nmatplotlib.pyplot.savefig('hist_deviations.png')","c597bbb7":"matplotlib.pyplot.figure(figsize=(12, 6))\n# matplotlib.pyplot.xlim([0,170000])\n# matplotlib.pyplot.ylim([0,0.5])\nplot(dists[num])","80139cc6":"np.sort(dists[num])[::-1][980:1000]","f97f0547":"fig = matplotlib.pyplot.figure()\n\nxs = x[num]\nys = y[num]\nzs = z[num]\ndeltas = deviations[num]\n\nax = fig.add_subplot(111, projection='3d')\nm = '^'\nax.scatter(xs, ys, zs, marker=m, c=deltas, cmap='hot')\nname_of_3D_colormap = '3D_deviations_{}.png'.format(num)\n# matplotlib.pyplot.pcolor(vmin=-4, vmax=4)\n# matplotlib.pyplot.colorbar()\n# fig.colorbar(surf, shrink=0.4, aspect=10, ax=ax, cmap='Purples')\nmatplotlib.pyplot.savefig(name_of_3D_colormap, cmap='hot')","da84a725":"np_points = np.array(points)\nnp_deltas = np.array(deltas)","bed0b471":"min(np_deltas)","f1474f02":"np_points.shape","0e2ecee7":"np_deltas.shape","d6526d79":"np_points[num].shape","42bc6299":"mp.offline()\nmp.plot(np_points[num], c=np_deltas, shading={\"point_size\": 2})","cfa94032":"**Standart deviation of Center**"}}