{"cell_type":{"f86aa328":"code","435142a6":"code","1a96dc41":"code","8248c12b":"code","dfd5f6ae":"code","37133465":"code","a2f8ea3e":"code","872a3879":"code","0f7d9752":"code","0e02ad6a":"code","9da65616":"code","123a07a0":"code","de2c0f3f":"code","db918b9a":"code","97fda90e":"code","bc2964ac":"code","3c04c219":"code","ae939edb":"code","965793ec":"code","62ba0169":"code","cd3c0cad":"code","6b98b44f":"code","e457e6bf":"code","aaeeb3ad":"code","a4b01f6f":"code","87515a5e":"code","f0ac2838":"code","bbc25d56":"code","14c2e8ad":"markdown","858a8b08":"markdown","128375b9":"markdown","3cb0f677":"markdown","3d7d3adf":"markdown","a1c02e3e":"markdown","d4fd4d9a":"markdown","d895dd20":"markdown","72214280":"markdown","c21afd77":"markdown","a2ee757a":"markdown"},"source":{"f86aa328":"import sys\nimport time\nimport os\nimport h5py\nimport numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n\nfrom itertools import groupby\nfrom skimage.util import montage\n\nfrom keras.layers import Dense, Reshape, Input, BatchNormalization, Concatenate, Activation, Add\nfrom keras.layers.convolutional import UpSampling2D, MaxPooling2D, Deconv2D, Conv2D\nfrom keras.layers.advanced_activations import LeakyReLU\nfrom keras.models import Sequential, Model\nfrom keras.optimizers import Adam, SGD, Nadam, Adamax\nfrom keras import initializers\nfrom keras import applications\nfrom keras.utils import plot_model\nfrom keras.preprocessing import image\n\nimport tensorflow as tf\n","435142a6":"print(tf.__version__)","1a96dc41":"img_width = 55\nimg_height = 35\nchannels = 1\n\nbatch_size = 512","8248c12b":"def self_regularisation_loss(y_true, y_pred):\n    return tf.multiply(0.0002, tf.reduce_sum(tf.abs(y_pred - y_true)))\n\n# reduce_sum: Computes the sum of elements across dimensions of a tensor.","dfd5f6ae":"def local_adversarial_loss(y_true, y_pred):\n    truth = tf.reshape(y_true, (-1, 2))\n    predicted = tf.reshape(y_pred, (-1, 2))\n    \n    computed_loss = tf.nn.softmax_cross_entropy_with_logits_v2(labels=truth, logits=predicted)\n    output = tf.reduce_mean(computed_loss)\n    \n    return output\n","37133465":"def refiner_model(width = 55, height = 35, channels = 1):\n    \"\"\"\n    The refiner network, R\u03b8, is a residual network (ResNet). It modifies the synthetic image on a pixel level, rather\n    than holistically modifying the image content, preserving the global structure and annotations.\n    \n    :param input_image_tensor: Input tensor that corresponds to a synthetic image.\n    :return: Output tensor that corresponds to a refined synthetic image.\n    \"\"\"\n    \n    def resnet_block(input_features, nb_features=64, kernel_size=3):\n        \"\"\"\n        A ResNet block with two `kernel_size` x `kernel_size` convolutional layers,\n        each with `nb_features` feature maps.\n        \n        See Figure 6 in https:\/\/arxiv.org\/pdf\/1612.07828v1.pdf.\n        \n        :param input_features: Input tensor to ResNet block.\n        :return: Output tensor from ResNet block.\n        \"\"\"\n        y = Conv2D(nb_features, kernel_size=kernel_size, padding='same')(input_features)\n        y = Activation('relu')(y)\n        y = Conv2D(nb_features, kernel_size=kernel_size, padding='same')(y)\n        \n        y = Add()([y, input_features])\n        y = Activation('relu')(y)\n        \n        return y\n\n    input_layer = Input(shape=(height, width, channels))\n    # an input image of size w \u00d7 h is convolved with 3 \u00d7 3 filters that output 64 feature maps\n    x = Conv2D(64, kernel_size=3, padding='same', activation='relu')(input_layer)\n\n    for _ in range(4):\n        x = resnet_block(x)\n\n    output_layer = Conv2D(channels, kernel_size=1, padding='same', activation='tanh')(x)\n\n    return Model(input_layer, output_layer, name='refiner')\n","a2f8ea3e":"def discriminator_model(width = 55, height = 35, channels = 1):\n    input_layer = Input(shape=(height, width, channels))\n\n    x = Conv2D(96, kernel_size=3, strides=2, padding='same', activation='relu')(input_layer)\n    x = Conv2D(64, kernel_size=3, strides=2, padding='same', activation='relu')(x)\n    x = MaxPooling2D(pool_size=3, strides=1, padding='same')(x)\n    x = Conv2D(32, kernel_size=3, strides=1, padding='same', activation='relu')(x)\n    x = Conv2D(32, kernel_size=1, strides=1, padding='same', activation='relu')(x)\n    x = Conv2D(2, kernel_size=1, strides=1, padding='same', activation='relu')(x)\n    output_layer = Reshape(target_shape=(-1, 2))(x)\n\n    return Model(input_layer, output_layer, name='discriminator')\n","872a3879":"refiner = refiner_model(img_width, img_height, channels)\nrefiner.compile(loss=self_regularisation_loss, optimizer=SGD(lr=0.001))\n\nrefiner.summary()\n","0f7d9752":"disc = discriminator_model(img_width, img_height, channels)\ndisc.compile(loss=local_adversarial_loss, optimizer=SGD(lr=0.001))\n\ndisc.summary()\n","0e02ad6a":"synthetic_img = Input(shape=(img_height, img_width, channels))\nrefined_output = refiner(synthetic_img)\ndiscriminator_output = disc(refined_output)\n\ncombined_model = Model(inputs=synthetic_img, outputs=[refined_output, discriminator_output], name='combined')\ncombined_model.summary()\n","9da65616":"disc.trainabler = False\ncombined_model.compile(loss=[self_regularisation_loss, local_adversarial_loss], optimizer=SGD(lr=0.001))\n","123a07a0":"path = os.path.dirname(os.path.abspath('.'))\ndata_dir = os.path.join('..', 'input')\ncache_dir = '.'\n","de2c0f3f":"# load the data file and extract dimentions\nwith h5py.File(os.path.join(data_dir, 'gaze.h5'), 'r') as t_file:\n    syn_img_stack = np.stack([np.expand_dims(a, -1) for a in t_file['image'].values()], 0)\n    \nwith h5py.File(os.path.join(data_dir, 'real_gaze.h5'), 'r') as t_file:\n    real_img_stack = np.stack([np.expand_dims(a, -1) for a in t_file['image'].values()], 0)\n","db918b9a":"\"\"\"\nModule to plot a batch of images along w\/ their corresponding label(s)\/annotations and save the plot to disc\/show them.\n\nUse cases:\nPlot images along w\/ their corresponding ground-truth label & model predicted label,\nPlot images generated by a GAN along w\/ any annotations used to generate these images,\nPlot synthetic, generated, refined, and real images and see how they compare as training progresses in a GAN,\netc...\n\"\"\"\nplotted_imgs = 16\n\ndef plot_batch(image_batch, figure_path, label_batch=None):\n    \n    all_groups = {label: montage(np.stack([img[:,:,0] for img, lab in img_lab_list],0)) \n                  for label, img_lab_list in groupby(zip(image_batch, label_batch), lambda x: x[1])}\n    fig, c_axs = plt.subplots(1,len(all_groups), figsize=(len(all_groups)*4, 8), dpi = 600)\n    for c_ax, (c_label, c_mtg) in zip(c_axs, all_groups.items()):\n        c_ax.imshow(c_mtg, cmap='bone')\n        c_ax.set_title(c_label)\n        c_ax.axis('off')\n    # fig.savefig(os.path.join(figure_path))\n    plt.show()\n    plt.close()\n","97fda90e":"\"\"\"\nModule implementing the image history buffer described in `2.3. Updating Discriminator using a History of\nRefined Images` of https:\/\/arxiv.org\/pdf\/1612.07828v1.pdf.\n\"\"\"\n\nclass ImageHistoryBuffer():\n    def __init__(self, shape, max_size, batch_size):\n        \"\"\"\n        :param shape: Shape of the data to be stored in the image history buffer\n                      (i.e. (0, img_height, img_width, img_channels)).\n        :param max_size: Maximum number of images that can be stored in the image history buffer.\n        :param batch_size: Batch size used to train GAN.\n        \"\"\"\n        self.image_history_buffer = np.zeros(shape=shape)\n        self.max_size = max_size\n        self.batch_size = batch_size\n        \n    def add_to_history_img_buffer(self, images, nb_to_add=0):\n        if not nb_to_add:\n            nb_to_add = self.batch_size \/\/ 2\n        \n        if len(self.image_history_buffer) < self.max_size:\n            np.append(self.image_history_buffer, images[:nb_to_add], axis=0)\n        elif len(self.image_history_buffer) == self.max_size:\n            self.image_history_buffer[:nb_to_add] = images[:nb_to_add]\n        else:\n            assert False\n\n        np.random.shuffle(self.image_history_buffer)\n    \n    def get_from_image_history_buffer(self, nb_to_get=None):\n        \"\"\"\n        Get a random sample of images from the history buffer.\n\n        :param nb_to_get: Number of images to get from the image history buffer (batch_size \/ 2 by default).\n        :return: A random sample of `nb_to_get` images from the image history buffer, or an empty np array if the image\n                 history buffer is empty.\n        \"\"\"\n        if not nb_to_get:\n            nb_to_get = self.batch_size \/\/ 2\n\n        try:\n            return self.image_history_buffer[:nb_to_get]\n        except IndexError:\n            return np.zeros(shape=0)\n","bc2964ac":"datagen = image.ImageDataGenerator(preprocessing_function=applications.xception.preprocess_input, data_format='channels_last')\n","3c04c219":"syn_gen = datagen.flow(x=syn_img_stack, batch_size=batch_size)\nreal_gen = datagen.flow(x=real_img_stack, batch_size=batch_size)\n","ae939edb":"def get_image_batch(generator):\n    \"\"\"keras generators may generate an incomplete batch for the last batch\"\"\"\n    img_batch = generator.next()\n    if len(img_batch) != batch_size:\n        img_batch = generator.next()\n    \n    assert len(img_batch) == batch_size\n    \n    return img_batch\n","965793ec":"disc_output_shape = disc.output_shape","62ba0169":"y_real = np.array([[[1.0, 0.0]] * disc_output_shape[1]] * batch_size)\ny_refined = np.array([[[0.0, 1.0]] * disc_output_shape[1]] * batch_size)\n\nassert y_real.shape == (batch_size, disc_output_shape[1], 2)\nassert y_refined.shape == (batch_size, disc_output_shape[1], 2)\n\nbatch_out = get_image_batch(syn_gen)\nassert batch_out.shape == (batch_size, img_height, img_width, channels), \"Image dimension do not match, {} != {}\" \\\n    .format(batch_out.shape, (batch_size, img_height, img_width, img_channels))\n","cd3c0cad":"def pretrain_gen(steps, log_interval, save_path, profiling=True):\n    losses = []\n    gen_loss = 0.\n    if profiling:\n        start = time.perf_counter()\n    for i in range(steps):\n        syn_imgs_batch = get_image_batch(syn_gen)\n        loss = refiner.train_on_batch(syn_imgs_batch, syn_imgs_batch)\n        gen_loss += loss\n\n        if (i+1) % log_interval == 0:\n            print('pre-training generator step {}\/{}: loss = {:.5f}'.format(i+1, steps, gen_loss \/ log_interval))\n            losses.append(gen_loss \/ log_interval)\n            gen_loss = 0.\n        \n        if (i+1) % (5*log_interval) == 0:\n            figure_name = 'refined_img_pretrain_step_{}.png'.format(i)\n            syn_imgs = get_image_batch(syn_gen)[:plotted_imgs]\n            gen_imgs = refiner.predict_on_batch(syn_imgs)\n\n            plot_batch(np.concatenate((syn_imgs, gen_imgs)), os.path.join(cache_dir, figure_name), \n                       label_batch=['Synthetic'] * plotted_imgs + ['Refined'] * plotted_imgs)\n\n    if profiling:\n        duration = time.perf_counter() - start\n        print('pre-training the refiner model for {} steps lasted = {:.2f} minutes = {:.2f} hours'.format(steps, duration\/60., duration\/3600.))\n    \n#     refiner.save(save_path)\n    \n    return losses\n","6b98b44f":"\n\n# we first train the R\u03b8 network with just self-regularization loss for 1,000 steps\ngen_pre_steps = 1000\ngen_log_interval = 20\n\npre_gen_path = os.path.join(cache_dir, 'refiner_model_pre_trained_{}.h5'.format(gen_pre_steps))\nif os.path.isfile(pre_gen_path):\n    refiner.load_weights(pre_gen_path)\n    print('loading pretrained model weights')\nelse:\n    losses = pretrain_gen(gen_pre_steps, gen_log_interval, pre_gen_path)\n    plt.plot(range(gen_log_interval, gen_pre_steps+1, gen_log_interval), losses)\n","e457e6bf":"def pretrain_disc(steps, log_interval, save_path, profiling=True):\n    losses = []\n    disc_loss = 0.\n    if profiling:\n        start = time.perf_counter()\n    for i in range(steps):\n        real_imgs_batch = get_image_batch(real_gen)\n        disc_real_loss = disc.train_on_batch(real_imgs_batch, y_real)\n        \n        syn_imgs_batch = get_image_batch(syn_gen)\n        disc_refined_loss = disc.train_on_batch(syn_imgs_batch, y_refined)\n        \n        disc_loss += 0.5 * np.add(disc_real_loss, disc_refined_loss)\n\n        if (i+1) % log_interval == 0:\n            print('pre-training discriminator step {}\/{}: loss = {:.5f}'.format(i+1, steps, disc_loss \/ log_interval))\n            losses.append(disc_loss \/ log_interval)\n            disc_loss = 0.\n\n    if profiling:\n        duration = time.perf_counter() - start\n        print('pre-training the discriminator model for {} steps lasted = {:.2f} minutes = {:.2f} hours'.format(steps, duration\/60., duration\/3600.))\n    \n    disc.save(save_path)\n    \n    return losses\n","aaeeb3ad":"# and D\u03c6 for 200 steps (one mini-batch for refined images, another for real)\ndisc_pre_steps = 200\ndisc_log_interval = 20\n\npre_disc_path = os.path.join(cache_dir, 'disc_model_pre_trained_{}.h5'.format(disc_pre_steps))\n\nif os.path.isfile(pre_disc_path):\n    print('loading pretrained model weights')\n    disc.load_weights(pre_disc_path)\nelse:\n    losses = pretrain_disc(disc_pre_steps, disc_log_interval, pre_disc_path)\n    plt.plot(range(disc_log_interval, disc_pre_steps+1, disc_log_interval), losses)\n","a4b01f6f":"ihb = ImageHistoryBuffer((0, img_height, img_width, channels), batch_size*100, batch_size)\n\ngan_loss = np.zeros(shape=len(combined_model.metrics_names))\ndisc_loss_real = 0.\ndisc_loss_refined = 0.\ndisc_loss = 0.\n","87515a5e":"nb_steps = 2000 # originally 10000\nk_d = 1 # number of discriminator updates per step\nk_g = 2 # number of generator updates per step\nlog_interval = 40","f0ac2838":"# see Algorithm 1 in https:\/\/arxiv.org\/pdf\/1612.07828v1.pdf\nfor i in range(nb_steps):    \n    # train the refiner\n    for _ in range(k_g * 2):\n        # sample a mini-batch of synthetic images\n        syn_img_batch = get_image_batch(syn_gen)\n        # update \u03b8 by taking an SGD step on mini-batch loss LR(\u03b8)\n        loss = combined_model.train_on_batch(syn_img_batch, [syn_img_batch, y_real])\n        gan_loss = np.add(gan_loss, loss)\n    \n    for _ in range(k_d):\n        # sample a mini-batch of synthetic and real images\n        syn_img_batch = get_image_batch(syn_gen)\n        real_img_batch = get_image_batch(real_gen)\n        \n        # refine the synthetic images w\/ the current refiner\n        refined_img_batch = refiner.predict_on_batch(syn_img_batch)\n        \n        # use a history of refined images\n        history_img_half_batch = ihb.get_from_image_history_buffer()\n        ihb.add_to_history_img_buffer(refined_img_batch)\n        \n        if len(history_img_half_batch):\n            refined_img_batch[:batch_size\/\/2] = history_img_half_batch\n        \n        # update \u03c6 by taking an SGD step on mini-batch loss LD(\u03c6)\n        real_loss = disc.train_on_batch(real_img_batch, y_real)\n        disc_loss_real += real_loss\n        ref_loss = disc.train_on_batch(refined_img_batch, y_refined)\n        disc_loss_refined += ref_loss\n        disc_loss += 0.5 * (real_loss + ref_loss)\n    \n    if (i+1) % log_interval == 0:\n        print('step: {}\/{} | [D loss: (real) {:.5f} \/ (refined) {:.5f} \/ (combined) {:.5f}]'.format(i+1, \n                      nb_steps, disc_loss_real\/log_interval, disc_loss_refined\/log_interval,  disc_loss\/log_interval))\n        \n        gan_loss = np.zeros(shape=len(combined_model.metrics_names))\n        disc_loss_real = 0.\n        disc_loss_refined = 0.\n        disc_loss = 0.\n    \n    if (i+1) % (log_interval*5) == 0:\n        figure_name = 'refined_image_batch_step_{}.png'.format(i)\n        print('Saving batch of refined images at adversarial step: {}.'.format(i))\n        \n        synthetic_image_batch = get_image_batch(syn_gen)[:plotted_imgs]\n        plot_batch(\n            np.concatenate((synthetic_image_batch, refiner.predict_on_batch(synthetic_image_batch))),\n            os.path.join(cache_dir, figure_name),\n            label_batch=['Synthetic'] * plotted_imgs + ['Refined'] * plotted_imgs)\n","bbc25d56":"refiner.save(os.path.join(cache_dir, 'refiner_model.h5'.format(disc_pre_steps)))\ndisc.save(os.path.join(cache_dir, 'disc_model.h5'.format(disc_pre_steps)))\ncombined_model.save(os.path.join(cache_dir, 'simgan_model.h5'.format(disc_pre_steps)))","14c2e8ad":"# Helper Function","858a8b08":"# Pre-Training the Discriminator","128375b9":"# Discriminator","3cb0f677":"# Building the SimGAN","3d7d3adf":"# Data Generators","a1c02e3e":"# Loss Functions","d4fd4d9a":"# Full Training","d895dd20":"# Importing the needed packages","72214280":"# Loading the Data","c21afd77":"# Pretraining\n\nHere we pretraining the models before we start the full-blown training procedure\n\n### Pretraining the Generator (Refiner)","a2ee757a":"# Generator"}}