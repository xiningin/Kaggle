{"cell_type":{"86600d95":"code","a468e98c":"code","a48bf58a":"code","17fa1967":"code","84ff5006":"code","e6f2be3a":"code","f836928c":"code","ba7019bd":"code","800d1f69":"code","8baa5681":"code","79896835":"code","0b8958bf":"code","868c44ff":"code","ef282b3c":"code","982cb898":"markdown","5ae6bc34":"markdown","aa2f6e34":"markdown"},"source":{"86600d95":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a468e98c":"dataset = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')","a48bf58a":"dataset.head()","17fa1967":"c = [i for i in range(1,23)]\nc.append(0)\ndataset = dataset.iloc[:,c]","84ff5006":"dataset.shape","e6f2be3a":"dataset.isna().sum()","f836928c":"dataset.info()","ba7019bd":"# Categorical column encoding\nfor i in dataset.columns:\n    if pd.api.types.is_string_dtype(dataset[i]):\n        dataset[i] = pd.Categorical(dataset[i]).codes\n        \nX = dataset.iloc[:,:-1]\ny = dataset.iloc[:,-1]\n\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=0)\n\nfrom catboost import CatBoostClassifier\nclassifier = CatBoostClassifier()\nclassifier.fit(X_train,y_train)\npred = classifier.predict(X_test)","800d1f69":"from sklearn.metrics import accuracy_score,classification_report,confusion_matrix\nprint(\"Cat Boost Engine Performance on a test set\")\nprint(\"==========================================\")\nprint()\nprint(\"The accuracy score: \",accuracy_score(y_test,pred)*100)\nprint(classification_report(y_test,pred))\nprint(confusion_matrix(y_test,pred))\nplot_roc_curve(classifier,X_test,y_test);","8baa5681":"from sklearn.model_selection import cross_val_score\ncross_result = cross_val_score(classifier,X,y,cv=10)","79896835":"print(\"The Cross validated accuracy for catboost engine: \",cross_result.mean()*100)","0b8958bf":"from sklearn.ensemble import RandomForestClassifier\nclassifier2 = RandomForestClassifier(n_estimators=100)\nclassifier2.fit(X_train,y_train)\n\npred2 = classifier2.predict(X_test)\n\nprint(\"Random Forest single test set Performance: \")\nprint(\"============================================\")\nprint(accuracy_score(y_test,pred2))\nprint(confusion_matrix(y_test,pred2))\nprint(classification_report(y_test,pred2))\nplot_roc_curve(classifier2,X_test,y_test);","868c44ff":"from sklearn.model_selection import cross_val_score\ncross_result = cross_val_score(classifier2,X,y,cv=10)","ef282b3c":"# THe Cross validated Result for randomForest classifier\nprint(\"The Cross validated accuracy for a random forest classifier: \",cross_result.mean()*100)","982cb898":"# **Random Forest Classifier**","5ae6bc34":"## Thankyou","aa2f6e34":"# Catboost Classifier"}}