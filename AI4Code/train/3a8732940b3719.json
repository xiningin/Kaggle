{"cell_type":{"48778aba":"code","3621afcd":"code","b1e4fbba":"code","00b070fd":"code","1a753742":"code","a831787b":"code","1ac040fe":"code","feeea51c":"code","ca47f8bb":"code","a8aff084":"code","157ba7c3":"code","da7263a9":"code","e508acc3":"code","362318c4":"code","cd240200":"code","27fef8df":"code","f9bd2507":"code","68cb89eb":"code","e69ed492":"code","00c78d99":"code","e3c0f1f8":"code","834e68c2":"code","dab659cc":"code","422c2404":"code","d74f824a":"code","2940ae3c":"code","377855e3":"code","ef47e5a9":"code","7e8a9da5":"code","e25c1cc8":"code","e8cf7083":"code","dcee7b18":"code","3bd47138":"code","d34f804f":"code","76e303d8":"code","f5f06d03":"code","f8d051b5":"code","69c95ea1":"code","56182928":"code","8e4cc2c3":"code","1019d82a":"code","2a23a15c":"code","41bf5afd":"code","45b576b2":"code","d94fc95f":"code","61753aa5":"code","488cbaab":"code","837be2e2":"code","fd18ad9d":"code","5c93b849":"code","182d8432":"markdown","17979913":"markdown","b3b13ff7":"markdown","66d109a9":"markdown","0869ad0d":"markdown","2032d0d0":"markdown","a2123707":"markdown","f8a10dc4":"markdown","2fb61466":"markdown","7df3c0ca":"markdown","de7758fb":"markdown","2a4aef72":"markdown","c86519c3":"markdown","408833f2":"markdown","3098df89":"markdown","a5ecc623":"markdown","b72e1b2d":"markdown","447df877":"markdown","3ef6dca5":"markdown","43e1d7c7":"markdown","be59b32d":"markdown","c567ec49":"markdown","3e39470b":"markdown","6faa140a":"markdown","e3ac26ba":"markdown"},"source":{"48778aba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3621afcd":"players = pd.read_csv('..\/input\/fifa19\/data.csv')","b1e4fbba":"# Functions that used to estimate some abilities of the players:\ndef Attack(players):\n    attack_np = np.array(players[['Finishing','FKAccuracy','Penalties','ShotPower','HeadingAccuracy']])\n    attack_np_pct = attack_np[0]*.3+attack_np[1]*.2+attack_np[2]*.15+attack_np[3]*.2+attack_np[4]*.15\n    res = int(round(attack_np_pct))\n    return res\ndef Speed(players):\n    speed_np = np.array(players[['Acceleration','SprintSpeed','Agility','Dribbling']])\n    speed_np_pct = speed_np[0] * .3 + speed_np[1] * .3 + speed_np[2] * .1 + speed_np[3] * .3\n    res = int(round(speed_np_pct))\n    return res\ndef Defends(players):\n    defends_np = np.array(players[['Aggression','Interceptions','StandingTackle','SlidingTackle','Marking']])\n    defends_np_pct = defends_np[0] * .15 + defends_np[1] * .15 + defends_np[2] * .30 + defends_np[3] * .30+defends_np[4]*.1\n    res = int(round(defends_np_pct))\n    return res\ndef Passing(players):\n    passing_np = np.array(players[['ShortPassing','LongPassing','Crossing','Vision']])\n    passing_np_pct = passing_np[0] * .30+ passing_np[1] * .30 + passing_np[2] * .30 +passing_np[3]*.1\n    res = int(round(passing_np_pct))\n    return res\ndef Technique(players):\n    technique_np = np.array(players[['BallControl','Balance','Positioning','Curve']])\n    technique_np_pct = technique_np[0] * .3 + technique_np[1] * .3 + technique_np[2] * .2 + technique_np[3]*.2\n    res = int(round(technique_np_pct))\n    return res\ndef Goalkeeping(players):\n    Goalkeeping_np = np.array(players[['GKDiving', 'GKHandling','GKPositioning', 'GKReflexes']])\n    Goalkeeping_np_pct = Goalkeeping_np[0] * .3 + Goalkeeping_np[1] * .3 + Goalkeeping_np[2] * .1 + Goalkeeping_np[3] * .3\n    res = int(round(Goalkeeping_np_pct))\n    return res","00b070fd":"sns.heatmap(players.isnull(),yticklabels=False,cbar=False,cmap='cubehelix')","1a753742":"#Cleaning the Data:\n#print(players.isna().sum())\nplayers['ShotPower'].fillna(players['ShotPower'].mean(), inplace = True)\nplayers['Overall'].fillna(players['Overall'].mean(), inplace = True)\nplayers['Potential'].fillna(players['Potential'].mean(), inplace = True)\nplayers['HeadingAccuracy'].fillna(players['HeadingAccuracy'].mean(), inplace = True)\nplayers['Penalties'].fillna(players['Penalties'].mean(), inplace = True)\nplayers['FKAccuracy'].fillna(players['FKAccuracy'].mean(), inplace = True)\nplayers['Finishing'].fillna(players['Finishing'].mean(), inplace = True)\nplayers['ShortPassing'].fillna(players['ShortPassing'].mean(), inplace = True)\nplayers['Volleys'].fillna(players['Volleys'].mean(), inplace = True)\nplayers['Dribbling'].fillna(players['Dribbling'].mean(), inplace = True)\nplayers['SprintSpeed'].fillna(players['SprintSpeed'].mean(), inplace = True)\nplayers['Agility'].fillna(players['Agility'].mean(), inplace = True)\nplayers['Aggression'].fillna(players['Aggression'].mean(), inplace = True)\nplayers['Interceptions'].fillna(players['Interceptions'].mean(), inplace = True)\nplayers['Dribbling'].fillna(players['Dribbling'].mean(), inplace = True)\nplayers['Interceptions'].fillna(players['Interceptions'].mean(), inplace = True)\nplayers['StandingTackle'].fillna(players['StandingTackle'].mean(), inplace = True)\nplayers['SlidingTackle'].fillna(players['SlidingTackle'].mean(), inplace = True)\nplayers['Marking'].fillna(players['Marking'].mean(), inplace = True)\nplayers['Vision'].fillna(players['Vision'].mean(), inplace = True)\nplayers['Crossing'].fillna(players['Crossing'].mean(), inplace = True)\nplayers['LongPassing'].fillna(players['LongPassing'].mean(), inplace = True)\nplayers['Acceleration'].fillna(players['Acceleration'].mean(), inplace = True)\nplayers['Curve'].fillna(players['Curve'].mean(), inplace = True)\nplayers['FKAccuracy'].fillna(players['FKAccuracy'], inplace = True)\nplayers['BallControl'].fillna(players['BallControl'].mean(), inplace = True)\nplayers['Balance'].fillna(players['Balance'].mean(), inplace = True)\nplayers['Positioning'].fillna(players['Positioning'].mean(), inplace = True)\nplayers['GKDiving'].fillna(players['GKDiving'].mean(), inplace = True)\nplayers['GKHandling'].fillna(players['GKHandling'].mean(), inplace = True)\nplayers['GKPositioning'].fillna(players['GKPositioning'].mean(), inplace = True)\nplayers['GKKicking'].fillna(players['GKKicking'].mean(), inplace = True)\nplayers['GKReflexes'].fillna(players['GKReflexes'].mean(), inplace = True)\nplayers['Weight'].fillna('165lbs', inplace = True)\nplayers['Contract Valid Until'].fillna(2019, inplace = True)\nplayers['Height'].fillna(\"5'11\", inplace = True)\nplayers['Loaned From'].fillna('None', inplace = True)\nplayers['Joined'].fillna('None', inplace = True)\nplayers['Jersey Number'].fillna(100, inplace = True)\nplayers['Body Type'].fillna('Normal', inplace = True)\nplayers['Position'].fillna('ST', inplace = True)\nplayers['Club'].fillna('None', inplace = True)\nplayers['Work Rate'].fillna('Medium\/ Medium', inplace = True)\nplayers['Skill Moves'].fillna(int(round(players['Skill Moves'].mean())), inplace = True)\nplayers['Weak Foot'].fillna(3, inplace = True)\nplayers['Preferred Foot'].fillna('Right', inplace = True)\nplayers['International Reputation'].fillna(1, inplace = True)\nplayers['Wage'].fillna('100000', inplace = True)","a831787b":"# Adding new columns to players by using the functions:\nplayers['Attacking'] = players.apply(Attack,axis=1)\nplayers['Speed'] = players.apply(Speed,axis=1)\nplayers['Defending'] = players.apply(Defends,axis=1)\nplayers['Passing'] = players.apply(Passing,axis=1)\nplayers['Technique'] = players.apply(Technique,axis=1)\nplayers['GoalKeeping'] = players.apply(Goalkeeping,axis=1)","1ac040fe":"# Changing str of wage into numeric\nplayers['Wage'] = players['Wage'].str.replace('K','000')\nplayers['Wage'] = players['Wage'].str.replace('\u20ac','')\nplayers['Wage'] = pd.to_numeric(players['Wage'])\n\n#Chaning str of value into numeric\nplayers['Value'] = players['Value'].str.replace('K','000')\nplayers['Value'] = players['Value'].str.replace('\u20ac','')\nplayers['Value'] = players['Value'].str.replace('.','')\nplayers['Value'] = players['Value'].str.replace('M','000000')\nplayers['Value'] = pd.to_numeric(players['Value'])\n\n#Changing str of weight into numeric\nplayers['Weight'] = players['Weight'].str.replace('lbs','')\nplayers['Weight'] = pd.to_numeric(players['Weight'])\n","feeea51c":"#Players that can be bought with 10M Euros\nplayers_u40 = players[players['Value']<=10000000]['Name']\nprint(\"List of players who can be bought with 10M Euros : \\n '{}\".format(players_u40.head(20)))\n#Players who will end their contracts by next year(2020)\nplayers_endcontract = players[players['Contract Valid Until']=='2020']['Name']\nprint(\"List of players who will end their contracts by 2020 : \\n {}\".format(players_endcontract.head(20)))\n","ca47f8bb":"# Weight Distribution of the players:\nplt.style.use('seaborn')\nsns.distplot(players['Weight'],hist=20,kde=True,color='red')\nplt.title('Distribution of The Weights of The Players')","a8aff084":"# Players Value distribution\nplt.figure(figsize=(10,5))\nplt.style.use('_classic_test')\nsns.distplot(players['Value'],bins=20,kde=True,color='green')\nplt.title('Distribution of The Players Value')\nplt.xlabel('Value')\nplt.show()","157ba7c3":"#Top Striker(According to the Overall Rate) of Season 2019, Messi's Data:\nMessi_data = players.iloc[0]\ndic_Messi = {'Abilities':['Overall','Attack','Speed','Passing','Technique','Defending'],\n       \"Rate\":Messi_data[['Overall','Attacking','Speed','Passing','Technique','Defending']]}\nMessi = pd.DataFrame.from_dict(dic_Messi)\nplt.style.use('seaborn-bright')\nplt.figure(figsize=(10,5))\nsns.barplot(x='Abilities',y='Rate',data=Messi,palette='viridis').set_title(\"Messi's Abilities Data\")","da7263a9":"#Top Midfielder(According to the Overall Rate) of Season 2019, Kevin DeBruyne's Data:\nKDB_data = players.iloc[4]\ndic_KDB = {'Abilities':['Overall','Attack','Speed','Passing','Technique','Defending'],\n       \"Rate\":KDB_data[['Overall','Attacking','Speed','Passing','Technique','Defending']]}\nKDB = pd.DataFrame.from_dict(dic_KDB)\nplt.style.use('seaborn-bright')\nplt.figure(figsize=(10,5))\nsns.barplot(x='Abilities',y='Rate',data=Messi,palette='coolwarm').set_title(\"Kevin DeBruyne's Abilities Data\")","e508acc3":"#Top Defender(According to the Overall Rate) of Season 2019, Ramos's Data:\nRamos_data = players.iloc[8]\ndic_Ramos = {'Abilities':['Overall','Attack','Speed','Passing','Technique','Defending'],\n       \"Rate\":Ramos_data[['Overall','Attacking','Speed','Passing','Technique','Defending']]}\nRamos = pd.DataFrame.from_dict(dic_Ramos)\nplt.style.use('seaborn-bright')\nplt.figure(figsize=(10,5))\nsns.barplot(x='Abilities',y='Rate',data=Ramos,palette='Set2').set_title(\"Ramos's Abilities Data\")","362318c4":"#Top GoalKeeper(According to the Overall Rate) of Season 2019, DeGea's Data:\nDeGea_data = players.iloc[3]\ndic_DeGea = {'Abilities':['Overall','GKDiving', 'GKHandling','GKKicking', 'GKPositioning', 'GKReflexes'],\n       \"Rate\":DeGea_data[['Overall','GKDiving', 'GKHandling','GKKicking', 'GKPositioning', 'GKReflexes']]}\nDeGea = pd.DataFrame.from_dict(dic_DeGea)\nplt.style.use('seaborn-bright')\nplt.figure(figsize=(10,5))\nsns.barplot(x='Abilities',y='Rate',data=DeGea,palette='deep').set_title(\"De Gea's Abilities Data\")\n","cd240200":"#Number of Players in Each Ages\nplt.style.use('ggplot')\nplt.figure(figsize=(10,5))\nsns.distplot(players['Age'],bins=30,color = 'blue')\nplt.title(' Number of players in Each Ages')\nplt.xlabel('Age')\nplt.ylabel('Number of players')","27fef8df":"#Number of players in Each countries\nplt.style.use('seaborn-darkgrid')\nplt.figure(figsize=(20,10))\nsns.countplot(x='Nationality',data=players, palette='bright')\nplt.title('Number of Players in Each Countries')\nplt.xticks(rotation=90)\nplt.xlabel('Nationalities')","f9bd2507":"#Number of players in Each Jersey Numbers\nplayers['Jersey Number'] = players['Jersey Number'].astype(int)\nplt.style.use('ggplot')\nplt.figure(figsize=(20,10))\nsns.countplot(x='Jersey Number',data= players, palette='dark')\nplt.title('Count on  Jersey Numbers')\nplt.xticks(rotation=90)\nplt.xlabel('Jersey Numbers')","68cb89eb":"#Top 10(According to Overall Rates) players\nplt.figure(figsize=(8,5))\nplt.style.use('seaborn-muted')\ntop10 = players.sort_values('Overall',ascending=False).head(10)\nsns.barplot(x='Name',y='Overall',data=top10,palette='deep')\nplt.xticks(rotation=90)\nplt.ylim(0,100)\nplt.title('Top 10 Players Overall Rate')\nplt.xlabel('Names')\nplt.ylabel('Overall')","e69ed492":"#Top 10(According to Overall Rates) players Value Distribution\nplt.figure(figsize=(8,5))\nplt.style.use('fivethirtyeight')\nsns.lineplot(x='Name',y='Value',data=top10,palette='deep')\nplt.xticks(rotation=90)\nplt.title('Top 10 Overall Players Value')\nplt.xlabel('Names')\nplt.ylabel('Value')\n","00c78d99":"#Top 10 Most Valued players\nplt.figure(figsize=(8,5))\ntop10_value = players.sort_values('Value',ascending=False).head(10)\nsns.barplot(x='Name',y='Value',data=top10_value,palette='deep')\nplt.xticks(rotation=90)\nplt.title('Top 10 Valued Players')\nplt.xlabel('Names')\nplt.ylabel('Value')","e3c0f1f8":"#Top 10 Most Valude Players Overall Rates\nplt.figure(figsize=(8,5))\nplt.style.use('ggplot')\nsns.lineplot(x='Name',y='Overall',data=top10_value,palette='deep')\nplt.xticks(rotation=90)\nplt.ylim(0,100)\nplt.title('Top 10 Valued Players Overall Rates')\nplt.xlabel('Names')\nplt.ylabel('Overall')","834e68c2":"#Top 10(According its Overall Rates) Clubs\nplt.figure(figsize=(10,5))\nClub_top_10 = players.groupby('Club')['Overall'].mean().reset_index().sort_values('Overall', ascending=False).head(10)\nplt.xticks(rotation=90)\nplt.ylim(0,100)\nplt.title(' Top 10 Overall Clubs')\nsns.barplot(x='Club',y='Overall',data=Club_top_10,palette='deep')","dab659cc":"#Top 10 Most Valued Clubs\nplt.figure(figsize=(8,5))\nplt.style.use('grayscale')\nclub = players.groupby('Club')['Value'].sum().reset_index().sort_values('Value', ascending=False).head(10)\nplt.xticks(rotation=90)\nplt.title(' Top 10 Most Valued Clubs')\nsns.barplot(x='Club',y='Value',data=club,palette='deep')","422c2404":"#Top 10 National Teams\nplt.figure(figsize=(8,5))\nplt.style.use('seaborn-bright')\nNation_top_10 = players.groupby('Nationality')['Overall'].max().reset_index().sort_values('Overall', ascending=False).head(10)\nplt.xticks(rotation=90)\nplt.ylim(0,100)\nplt.title(' Top 10 National Teams')\nsns.barplot(x='Nationality',y='Overall',data=Nation_top_10,palette='deep')\n","d74f824a":"topclubs_10_lis = []                       # To save the name of top 10 clubs in a list\nfor k in range(0,10):\n    topclubs_10_lis.append(Club_top_10.iloc[k][0])","2940ae3c":"# Distribution of Top10 Clubs International Reputations\nplt.style.use('Solarize_Light2')\nInter_Rep_data = players.loc[(players['Club'].isin(topclubs_10_lis)) & (players['International Reputation'])]\nplt.xticks(rotation=90)\nsns.violinplot(x='Club',y='International Reputation',data=Inter_Rep_data,palette='deep').set_title('Distribution of an International Reputation of Top10 Clubs')","377855e3":"# Distribution of Top 10 Clubs Skill Moves\nskillmovesdata = players.loc[(players['Club'].isin(topclubs_10_lis)) & (players['Skill Moves'])]\nplt.xticks(rotation=90)\nplt.style.use('Solarize_Light2')\nsns.violinplot(x='Club',y='Skill Moves',data=skillmovesdata,palette='deep').set_title('Skill Moves Distribution of Top10 Clubs ')","ef47e5a9":"# Distribution of Top10 Clubs Weights\nweightdata = players.loc[(players['Club'].isin(topclubs_10_lis)) & (players['Weight'])]\nsns.boxplot(x='Club',y='Weight',data=weightdata,palette='deep').set_title('Weights Distribution of Top10 Clubs')\nplt.xticks(rotation=90)\nplt.xlabel('Top 10 Clubs')\nplt.ylabel('Weights(lbs)')","7e8a9da5":"#Values of Players According to their Preferred Foot\nplt.style.use('ggplot')\nplt.figure(figsize=(10,10))\nsns.lmplot(x='Overall',y='Value',data=players,col='Preferred Foot')\nplt.xlabel('Overall')\nplt.xlim(0,100)\nplt.ylabel('Value')\n","e25c1cc8":"#Correlation between Long Shots Rate VS Free Kick Accuracy\nsns.lmplot(x='LongShots',y='FKAccuracy',data=players,col='Preferred Foot')\nplt.xlabel('LongShots')\nplt.ylabel('FKAccuracy')\nplt.xlim(0,100)\nplt.ylim(0,100)\n\n","e8cf7083":"# Correlation Between Ball Control and Dribbling According to the Skill Moves that Players know\nsns.lmplot(x='Dribbling',y='BallControl',data=players,col='Skill Moves')\nplt.xlabel('Dribbling')\nplt.ylabel('BallControl')\nplt.xlim(0,100)\nplt.ylim(0,100)\n","dcee7b18":"sns.lineplot(x='Age',y='Overall',data=players,color='red')\nsns.lineplot(x='Age',y='Potential',data=players,color='blue')\nplt.style.use('grayscale')\nplt.xlabel('Age')\nplt.ylabel('Overall')\nplt.ylim(0,100)\nplt.title('At What Age Do Players Performance and Potential Deteriorate?')","3bd47138":"sns.lineplot(x='Height',y='SprintSpeed',data=players)\nplt.style.use('seaborn-colorblind')\nplt.xlabel('Height')\nplt.ylabel('SprintSpeed')\nplt.ylim(0,100)\nplt.title('Do Heights Affect the SpringSpeed?')","d34f804f":"sns.lineplot(x='Weight',y='BallControl',data=players,palette='viridis')\nplt.style.use('ggplot')\nplt.xticks(rotation=90)\nplt.xlabel('Weight')\nplt.ylabel('BallControl')\nplt.ylim(0,100)\nplt.title('Do Weights Affect the BallControl?')","76e303d8":"sns.lineplot(x='Curve',y='FKAccuracy',data=players,palette='colorblind')\nplt.xticks(rotation=90)\nplt.xlabel('Curve')\nplt.ylabel('FKAccuracy')\nplt.title('Does Curving Ability Affect the Free Kick Accuracy?')","f5f06d03":"sns.lineplot(x='Strength',y='Interceptions',data=players,palette='Set1')\nplt.xticks(rotation=90)\nplt.xlabel('Strength')\nplt.ylabel('Interception')\nplt.xlim(0,100)\nplt.ylim(0,100)\nplt.title('Does Strength Affect Interception?')","f8d051b5":"# Heatmap on All the Quantitative Columns\nplt.figure(figsize=(15,15))\nsns.heatmap(players[['Age', 'Overall', 'Potential', 'Value',\n                    'Wage', 'Special', 'International Reputation',\n                    'Skill Moves', 'Work Rate', 'Height', 'Weight',\n                    'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling',\n                    'Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n                    'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n                    'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n                    'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n                    'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n                    'GKKicking', 'GKPositioning', 'GKReflexes']].corr(),annot=True,cmap='YlGnBu')","69c95ea1":"\nkorean_players = players[players['Nationality'] == 'Korea Republic']\n\nfig,axes = plt.subplots(nrows=1,ncols=3,figsize=(20,10))\nplt.style.use('fivethirtyeight')\naxes[0].boxplot(korean_players['Overall'])\naxes[0].set_title('Korean Players Overall rate')\naxes[0].set_ylabel('Overall Rate')\n\n\naxes[1].hist(korean_players['Age'],bins= 20)\naxes[1].set_title('Korean Players age distribution')\naxes[1].set_ylabel('Number of players')\naxes[1].set_xlabel('Age')\n\naxes[2].boxplot(korean_players['Wage'])\naxes[2].set_title('Korean Players Wage distribution')\naxes[2].set_ylabel('Euro')","56182928":"# Best Korean Player :\nkor_top_index = korean_players['Overall'].idxmax()\nkor_top = players.iloc[kor_top_index]","8e4cc2c3":"#Comparison of Korean Best player with Korean Players Average\nkor_overall_mean = korean_players['Overall'].mean()\nkor_top_overall = kor_top['Overall']\n\nkor_attacking_mean = korean_players['Attacking'].mean()\nkor_top_attacking = kor_top['Attacking']\n\nkor_speed_mean = korean_players['Speed'].mean()\nkor_top_speed = kor_top['Speed']\n\n\ndic = {'Overall Rate' : [kor_top_overall,kor_overall_mean],'Name':[kor_top['Name'],'Kor players Avg'],\n       'Attacking Ability': [kor_top_attacking,kor_attacking_mean],'Speed': [kor_top_speed,kor_speed_mean]}\nkor_top_df = pd.DataFrame.from_dict(dic)","1019d82a":"plt.style.use('ggplot')\nplt.figure()\nsns.barplot(x='Name',y='Overall Rate',data = kor_top_df,hue='Name',palette='rainbow').set_title(\"Heungmin Son's Overall rate vs Kor Avg Overall rate\")\nplt.figure()\nsns.barplot(x='Name',y='Attacking Ability',data=kor_top_df,hue='Name',palette='rocket').set_title(\"Heungmin Son's Attack vs Kor Avg Attack\")\nplt.figure()\nsns.barplot(x='Name',y='Speed',data=kor_top_df,hue='Name',palette='deep').set_title(\"Heungmin Son's Speed vs Kor Avg Speed\" )","2a23a15c":"#Korea's Highest Potential player\nkor_future_index = korean_players['Potential'].idxmax()\nkor_future = players.iloc[kor_future_index]\nprint(kor_future)\ndic2 = {\"Abilities\":['Potential','Attack','Speed','Passing','Technique','Defending'],\n       \"Rate\":kor_future[['Potential','Attacking','Speed','Passing','Technique','Defending']]}\nkor_future_df = pd.DataFrame.from_dict(dic2)\nplt.style.use('Solarize_Light2')\nsns.barplot(x='Abilities',y='Rate',data=kor_future_df,palette='rainbow').set_title(\"KangIn Lee's Data\")","41bf5afd":"# Predicting KangIn Lee's Growth by Linear Regression\nfrom sklearn.model_selection import train_test_split\nX = korean_players[['Attacking','Speed','Defending','Passing','Technique','GoalKeeping','Potential']]\ny = korean_players['Overall']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\nfrom sklearn.linear_model import LinearRegression\nlm = LinearRegression()\nlm.fit(X_train,y_train)\npredictions = lm.predict(X_test)\ncoef_kor_players = pd.DataFrame(lm.coef_,index = X.columns,columns=['Coef'])\nprint(coef_kor_players)\nplt.figure()\nplt.scatter(y_test,predictions)\nplt.title('Will KangIn Lee grow more?')","45b576b2":"#Tottenham Hotspur team:\nspurs = players[players['Club']=='Tottenham Hotspur']\nspurs_value = spurs['Value'].sum()\nprint('Tottenham HotSpur Total Team Values are \u20ac{}'.format(spurs_value))","d94fc95f":"# Data of Spurs \nplt.figure(figsize=(20,4))\nplt.style.use('ggplot')\nsns.countplot(x='Nationality',data=spurs,palette='coolwarm').set_title('Spurs Players Nationalities')\nplt.figure()\nsns.countplot(x='Position',data=spurs,palette='viridis').set_title('Number of Spurs Players In Each Postitions')\nplt.figure()\nsns.countplot(x='Preferred Foot',data=spurs,hue='Preferred Foot',palette='Set2').set_title('Preferred Foot of Each Spurs Players')\nplt.figure()\nsns.countplot(x='Age',data = spurs,palette='Set1').set_title('Age Distribution of Tottenham Hotspur')","61753aa5":"# Top player(According to the Overall Rates) of the team\n\nTop_spurs_index = spurs['Overall'].idxmax()\nTop_spurs = players.iloc[Top_spurs_index]\nprint(\"The top player of Tottenham Hotspur is: {}\".format(Top_spurs['Name']))\nprint(\"Harry Kane's Values are: \u20ac{0}\".format(Top_spurs['Value']))\ndic_kane = {\"Abilities\":['Overall','Attack','Speed','Passing','Technique'],\n      \"Rate\":Top_spurs[['Overall','Attacking','Speed','Passing','Technique']]}\nTop_spurs_df = pd.DataFrame.from_dict(dic_kane)\nplt.style.use('seaborn-pastel')\nsns.barplot(x='Abilities',y='Rate',data=Top_spurs_df).set_title(\"Harry Kane's Data\")","488cbaab":"# The Oldest an the Youngest Players in Tottenham Hotspurs\nspurs_youngest_index = spurs['Age'].idxmin()\nspurs_youngest = players.iloc[spurs_youngest_index]['Name']\nspurs_oldest_index = spurs['Age'].idxmax()\nspurs_oldest = players.iloc[spurs_oldest_index]['Name']\nprint(\"The oldest player in spurs is {0} and the youngest player is {1}\".format(spurs_oldest,spurs_youngest))","837be2e2":"# Best Spurs Players in Each Categories(Attack,Speed,Passing,Technique,Defends,GoalKeeping)\nspurs_attack_mean = spurs['Attacking'].mean()\nspurs_pass_mean = spurs['Passing'].mean()\nspurs_speed_mean = spurs['Speed'].mean()\nspurs_defends_mean = spurs['Defending'].mean()\nspurs_technique_mean = spurs['Technique'].mean()\nspurs_goalkeeping_mean = spurs[spurs['Position']=='GK']['GoalKeeping'].mean()\n\nspurs_best_attack = players.iloc[spurs['Attacking'].idxmax()]\nspurs_best_speed  = players.iloc[spurs['Speed'].idxmax()]\nspurs_best_pass   = players.iloc[spurs['Passing'].idxmax()]\nspurs_best_tech   = players.iloc[spurs['Technique'].idxmax()]\nspurs_best_defends = players.iloc[spurs['Defending'].idxmax()]\nspurs_best_keeper = players.iloc[spurs['GoalKeeping'].idxmax()]\ncategory_dic = {\"Categories\": ['Attack(H. Kane)','Attack(H. Kane)','Speed(Lucas Moura)','Speed(Lucas Moura)','Pass(C. Eriksen)','Pass(C. Eriksen)','Technique(C. Eriksen)','Technique(C. Eriksen)','Defends(J. Vertonghen)','Defends(J. Vertonghen)','GoalKeeping(H. Lloris)','GoalKeeping(H. Lloris)'],\n                \"Rate\": [spurs_best_attack['Attacking'],spurs_attack_mean,spurs_best_speed['Speed'],spurs_speed_mean,\n                     spurs_best_pass['Passing'],spurs_pass_mean,spurs_best_tech['Technique'],spurs_technique_mean,\n                     spurs_best_defends['Defending'],spurs_defends_mean,spurs_best_keeper['GoalKeeping'],spurs_goalkeeping_mean],\n                \"Rate of: \":[\"Best\",\"Mean\",\"Best\",\"Mean\",\"Best\",\"Mean\",\"Best\",\"Mean\",\n                         \"Best\",\"Mean\",\"Best\",\"Mean\"]}\n\nspurs_cat_df = pd.DataFrame.from_dict(category_dic)\nplt.figure(figsize=(20,5))\nplt.style.use('bmh')\nsns.barplot(x='Categories',y='Rate',hue = 'Rate of: ',data=spurs_cat_df,palette='bright').set_title(\"Best Player's Each Rates VS Spurs Team Avg\")\nplt.legend(loc='upper right')","fd18ad9d":"# Some Graphs on Tottenham Hotspurs\nplt.xticks(rotation=90)\nsns.barplot(x='Categories',y='Rate',hue = 'Rate of: ',data=spurs_cat_df,palette='Set2').set_title(\"Best Players of Each Categories VS Spurs Team Avg\")\nplt.legend(prop={'size': 10})\nplt.figure(figsize=(10,4))\nsns.scatterplot(x='Wage',y='Overall',palette='deep',data=spurs).set_title('Do Spurs Paying Their Players Correctly?')\nplt.figure(figsize=(10,4))\nsns.scatterplot(x='Wage',y='Potential',palette='deep',data=spurs).set_title(\"Does the Potential Affects The Player's Wage?\")\n\nsns.scatterplot(x='Value',y='Wage',data=spurs,palette='coolwarm').set_title(\"Do Players Get Paid According To Their Value?Value\")","5c93b849":"#Finding the Best 11 of Tottenham Hotspurs\nj=0\nlis =[]\nfor i in spurs['Position']:\n    if i in ('LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW'):\n\n            lis.append(1)\n    elif i in ('LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM',\n                                         'CDM', 'RDM'):\n\n        lis.append(2)\n\n    elif i in ('RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB'):\n        lis.append(3)\n    else:\n        lis.append(4)\n    j+=1\nforward =[]\nmidfield =[]\ndefender = []\ngoalie = []\nj=0\n\nfor i in lis:\n\n    if i == 1:\n        forward.append(j)           # putting the index of the best attcker in a list\n    elif i == 2:\n        midfield.append(j)          # putting the index of the best attcker in a list\n    elif i == 3:\n        defender.append(j)          # putting the index of the best attcker in a list\n    else:\n        goalie.append(j)            \n    j+=1\n\nspurs11 = []\nmax_for = 0\n\nfor i in forward:\n    index_ = 0\n    if(spurs.iloc[i]['Overall'] > max_for):\n        max_for = spurs.iloc[i]['Overall']\n        max_index = index_\n    index_+=1\n\nspurs11.append(spurs.iloc[max_index]['Name'])\n\n\nfor k in range(0,5):\n    max_mid = 0\n    index = 0\n    for i in midfield:\n\n        if(spurs.iloc[i]['Overall'] > max_mid):\n            max_mid = spurs.iloc[i]['Overall']\n            max_index2 = i\n            pop_index = index\n        index +=1\n\n    spurs11.append(spurs.iloc[max_index2]['Name'])\n    midfield.pop(pop_index)\nfor k in range(0,4):\n    max_def = 0\n    index_2 = 0\n    for i in defender:\n\n        if(spurs.iloc[i]['Overall'] > max_def):\n            max_def = spurs.iloc[i]['Overall']\n\n            max_index3 = i\n            pop_index2 = index_2\n        index_2 = index_2 + 1\n    spurs11.append(spurs.iloc[max_index3]['Name'])\n    defender.pop(pop_index2)\n\nspurs11.append(spurs_best_keeper['Name'])\nprint(\"Spurs Best 11 are: \", \" ,\".join(spurs11))\n","182d8432":"<font size=\"4\">*At What Age Do Players Performance and Potential Deteriorate?*<\/font>\n\n>* Players Potentials start to decrease as they get older. On the other hand, players overall rates increase as they age.The overall rates stay on the peak during mid 20 to late 20. Furthermore, from the age of 27, both of them starts to stay steady and only the potential drops significantly from early 40. Therefore, the players aging curve starts around their early 30s.","17979913":"<font size=\"6\">Exploratory Data Analysis with FIFA19 Dataset <\/font>","b3b13ff7":"<font size=\"4\">*Correlation between Ball Control and Dribbling*<\/font>\n\n>* Now let's see if the BallControl gets better if the players are better at Dribbling. As the result, there is a positive correlation between them. Furthermore, players with more skill moves tend to have better Dribbling and Ball Controls.\n","66d109a9":"<font size=\"4\">*Value Distribution of the players in FIFA19*<\/font>","0869ad0d":" <font size=\"4\">*Defining Some Functions*<\/font>\n\n\n>* These are the functions to estimate some abilities of the players(Attack,Speed,Defend,Pass,Goalkeep)","2032d0d0":"<font size=\"4\">*Data Visualization of Tottenham Hotspurs*<\/font>\n\n>* In this part, we will analyze the data of Tottenham Hostpurs from English Premier League. We will see who is the oldest and the youngest player of the team. In addition to this,their team values, the top player of the team, best players from each categories(attacking,speed,passing,defending and goalkeeping).Lastly, the Best lineup of the team.","a2123707":"<font size=\"4\">*Adding the New Functions to the DataFrame*<\/font>","f8a10dc4":"<font size=\"4\">*Predicting KangIn Lee's Growth by Liear Regression*<\/font>\n\n>* It has a small coefficient values but the scatter graph shows a postive correlation. The peak point is at the Overall Rate of 75","2fb61466":"<font size=\"4\">*Converting from str to int for 'Wage','Value','Weight' columns*<\/font>","7df3c0ca":"<font size=\"4\">*Countingplots*<\/font>\n\n  >* To visualize the number of players according to their age, nationality and jersey numbers.","de7758fb":"<font size=\"4\">*Players With High Strength Tend to Have Better Interceptions?*<\/font>\n\n>* According to the graph, players with higher strength are better at intercepting. In general, there is a gradual growth of Interception rate as the Strength increases. However there is a significant decline in the Interception rate around 90.  ","2a4aef72":"<font size=\"4\">*Top 10 Players, Clubs and National teams*<\/font>\n\n>* Visualizing the data about top 10 players,clubs and national teams.","c86519c3":"<font size=\"4\">*Do Heights Affect the SprintSpeed?*<\/font>\n\n>* According to the graph, in general, it shows that the sprintspeed declines as the height increases. Gradually the sprintspeed decreases from the height 5 feet 9 inches to 6 feet 7 inches and it gives significant drop from 6 feet 8 inches. Considering the Goalkeepers, these results are reasonable since their heights tend to stay high with low sprintspeed.","408833f2":"<font size=\"4\">*Players With Good Curve Ball Has Higher Free Kick Accuracy?*<\/font>\n\n>* It gives a strong positive correlation between the curving rates and the free kick accuracy.","3098df89":"<font size=\"4\">*Data of the Top Striker,Midfielder,Defender and Goalkeeper*<\/font>","a5ecc623":"<font size=\"4\">*Correlation between Long Shots and Free Kick Accuracy*<\/font>\n\n>* Will FreeKick Accuracy gets better if the players are better at Long Shots? According to the graph below, it does show that there is a positive correlation between Long Shots and Free Kick Accuracy\n","b72e1b2d":"<font size=\"4\">*Weight Distribution of the players in FIFA19*<\/font>","447df877":"- <font size=\"5\">INTRODUCTION<\/font>\n\n> * FIFA19 is the one of the most famous game these days. It is a  Football video game which play by millions of users up to date. In this game, there are tons of data which describe the players in real life. The players data are represented by numbers which is already set by the Publisher(EA Sports). Now in my Kernel project we will look deep into the data of the players and visualize them. We will also look into some facts such as players with better curve ball tend to have high accuracy on free kicks?At what age will players performance starts to deteoriorate? etc... ","3ef6dca5":"- <font size=\"5\">Contents:<\/font>\n\n\n>*  1. Top players, Clubs and National team of the season :\n        - Data Visualization\n>*  2. Korean Players :\n        - Data Visualization\n        - Predicting the data with Linear Regression\n>*  3. Tottenham Hotspurs:\n        - Data Visualization\n        - Top11 of the Team\n    ","43e1d7c7":"<font size=\"4\">*Do Weights Affect the BallControl?*<\/font>\n\n>* As the weight increases, it shows a declination of the ball controlling in general. However at 220lbs, 230lbs and 244lbs it shows 3 peak points.","be59b32d":"<font size=\"4\">*Data Visualization of Korean Players*<\/font>\n\n>* It shows the korean players overall rate distribution. Furthermore, it also shows the age and wage distributions. We will also look into some data of Korea's Top player(Heungmin Son) and the korean player with the highest potential rates(KangIn Lee).","c567ec49":" <font size=\"4\">*Importing the FIFA19 Dataset*<\/font>\n\n\n","3e39470b":"![Title text](https:\/\/en.wikipedia.org\/wiki\/FIFA_19#\/media\/File:FIFA_19_cover.jpg =250x250)**","6faa140a":"<font size=\"4\">*Heatmap of all the columns with numeric values*<\/font>","e3ac26ba":"<font size=\"4\">*Cleaning the Dataset*<\/font>"}}