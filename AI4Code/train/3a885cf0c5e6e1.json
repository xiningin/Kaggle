{"cell_type":{"1601e9ce":"code","2c3b7b06":"code","52b5d3fe":"code","46959acd":"code","99d2a063":"code","ed55ef1c":"code","efa3fd5d":"code","80caeb6b":"code","6efb643d":"code","dfdcbaf0":"code","ebd1d110":"code","e7d1d63f":"code","cb98a5b7":"code","03ca9c5d":"code","d30a136d":"code","16b66d46":"code","af3c59d1":"code","d93af7bb":"code","05a93f09":"code","ae653cf2":"code","5da446df":"code","b678e343":"code","11a4c1ae":"code","311356e0":"code","4eef3ad4":"markdown","66420c06":"markdown"},"source":{"1601e9ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c3b7b06":"file_name = \"\/kaggle\/input\/predicting-churn-for-bank-customers\/Churn_Modelling.csv\"\nchurn_df = pd.read_csv(file_name)","52b5d3fe":"churn_df.sample()","46959acd":"# View unique for Tenure, we can see this is a \nchurn_df.Tenure.unique()","99d2a063":"# Summarize our dataset \nprint (\"Rows     : \" ,churn_df.shape[0])\nprint (\"Columns  : \" ,churn_df.shape[1])\nprint (\"\\nFeatures : \\n\" ,churn_df.columns.tolist())\nprint (\"\\nMissing values :  \", churn_df.isnull().sum().values.sum())\nprint (\"\\nUnique values :  \\n\",churn_df.nunique())","ed55ef1c":"churn_df['Exited'].value_counts(sort = False)","efa3fd5d":"churn_df_copy = churn_df.copy()\nchurn_df_copy.drop([\"RowNumber\",'CustomerId','Surname', 'Tenure',\"EstimatedSalary\", \"Balance\", \"CreditScore\", \"Age\"], axis=1, inplace=True)\n# Create a new dataset called summary so that we can summarize our churn data\n# Crosstab - Compute a simple cross tabulation of two (or more) factors. By default computes a frequency table of the factors unless an array of values and an aggregation function are passed.\nsummary = pd.concat([pd.crosstab(churn_df_copy[x], churn_df_copy[\"Exited\"]) for x in churn_df_copy.columns[:-1]], keys=churn_df_copy.columns[:-1])\nsummary","80caeb6b":"summary['Churn_Percentage'] = summary[1] \/ (summary[0] + summary[1])\nsummary","6efb643d":"import seaborn as sns\n# Create a Volin Plot showing how monthy charges relate to Churn\ng = sns.factorplot(x=\"Exited\", y = \"NumOfProducts\",data = churn_df, kind=\"violin\", palette = \"Pastel1\")","dfdcbaf0":"import seaborn as sns\n# Create a Volin Plot showing how monthy charges relate to Churn\ng = sns.factorplot(x=\"Exited\", y = \"IsActiveMember\",data = churn_df, kind=\"violin\", palette = \"Pastel1\")","ebd1d110":"\nimport seaborn as sns\n# Create a Volin Plot showing how monthy charges relate to Churn\ng = sns.factorplot(x=\"Exited\", y = \"Age\",data = churn_df, kind=\"violin\", palette = \"Pastel1\")","e7d1d63f":"# Correlation plot doesn't end up being too informative\nimport matplotlib.pyplot as plt\n\ndef plot_corr(df,size=10):\n    '''Function plots a graphical correlation matrix for each pair of columns in the dataframe.\n\n    Input:\n        df: pandas DataFrame\n        size: vertical and horizontal size of the plot'''\n\n    corr = df.corr()\n    fig, ax = plt.subplots(figsize=(size, size))\n    ax.legend()\n    cax = ax.matshow(corr)\n    fig.colorbar(cax)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation='vertical')\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    \nplot_corr(churn_df)","cb98a5b7":"churn_df.columns","03ca9c5d":"churn_df = churn_df[[ \"CustomerId\",'Geography',\n       'Gender', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard',\n       'IsActiveMember', 'Exited']]","d30a136d":"from sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\n\n#customer id col\nId_col = ['CustomerId']\n\n#Target columns\ntarget_col = [\"Exited\"]\n\n#categorical columns\ncat_cols = churn_df.nunique()[churn_df.nunique() < 11].keys().tolist() \ncat_cols = [x for x in cat_cols if x not in target_col]\n\n#numerical columns\nnum_cols = [x for x in churn_df.columns if x not in cat_cols + target_col + Id_col]\n\n#Binary columns with 2 values\nbin_cols = churn_df.nunique()[churn_df.nunique() == 2].keys().tolist()\n\n#Columns more than 2 values\nmulti_cols = [i for i in cat_cols if i not in bin_cols]\n\n#Label encoding Binary columns\nle = LabelEncoder()\nfor i in bin_cols :\n    churn_df[i] = le.fit_transform(churn_df[i])\n    \n#Duplicating columns for multi value columns\nchurn_df = pd.get_dummies(data = churn_df, columns = multi_cols )\nchurn_df.head()","16b66d46":"#Scaling Numerical columns\nstd = StandardScaler()\n\n# Scale data\nscaled = std.fit_transform(churn_df[num_cols])\nscaled = pd.DataFrame(scaled,columns=num_cols)\n\n#dropping original values merging scaled values for numerical columns\ndf_bank_og = churn_df.copy()\nchurn_df = churn_df.drop(columns = num_cols,axis = 1)\nchurn_df = churn_df.merge(scaled, left_index=True, right_index=True, how = \"left\")\n\n#churn_df.info()\nchurn_df.head()","af3c59d1":"churn_df.drop(['CustomerId'], axis=1, inplace=True)\nchurn_df = churn_df.dropna()","d93af7bb":"from sklearn.model_selection import train_test_split\n\n# We remove the label values from our training data\nX = churn_df.drop(['Exited'], axis=1).values\n\n# We assigned those label values to our Y dataset\ny = churn_df['Exited'].values\n\n# Split it to a 70:30 Ratio Train:Test\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\ndf_train = pd.DataFrame(X_train)\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\npredictions = model.predict(X_test)\nscore = model.score(X_test, y_test)\n\nprint(\"Accuracy = \" + str(score))\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","05a93f09":"# Let's see what features mattered most i.e. Feature Importance\n# We sort on the co-efficients with the largest weights as those impact the resulting output the most \ncoef = model.coef_[0]\ncoef = [abs(number) for number in coef]\n# Sorting on Feature Importance\ncols = list(churn_df.columns)\nsorted_index = sorted(range(len(coef)), key = lambda k: coef[k], reverse = True)\nfor idx in sorted_index:\n    print(cols[idx])","ae653cf2":"# RAndom Forest\n# Let's try Random Forests now to see if our resutls get better\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\n\nmodel_rf = RandomForestClassifier(300)\nmodel_rf.fit(X_train, y_train)\n\npredictions = model_rf.predict(X_test)\nscore = model_rf.score(X_test, y_test)\n\nprint(\"Accuracy = \" + str(score))\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","5da446df":"# Neural Network\nimport tensorflow as tf\n\n# Create a simple model\nimport tensorflow.keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras.layers import Dropout\n\nmodel = Sequential()\n\nmodel.add(Dense(200, kernel_initializer = \"uniform\",activation = \"relu\", input_dim=13))\nmodel.add(Dense(200, kernel_initializer = \"uniform\",activation = \"relu\"))\nmodel.add(Dense(200, kernel_initializer = \"uniform\",activation = \"relu\",  kernel_regularizer=l2(0.01)))\n\nmodel.add(Dropout(0.3, noise_shape=None, seed=None))\n\nmodel.add(Dense(200, kernel_initializer = \"uniform\",activation = \"relu\"))\n\nmodel.add(Dropout(0.3, noise_shape=None, seed=None))\n\nmodel.add(Dense(200, kernel_initializer = \"uniform\",activation = \"relu\"))\nmodel.add(Dense(1, kernel_initializer = \"uniform\",activation = \"sigmoid\"))\n\nmodel.compile(optimizer= \"adam\",loss = \"binary_crossentropy\",metrics = [\"accuracy\"])\n# Display Model Summary and Show Parameters\nmodel.summary()","b678e343":"X_train.shape","11a4c1ae":"# Start Training Our Classifier \n\nbatch_size = 64\nepochs = 25\n\nhistory = model.fit(X_train,\n                    y_train,\n                    batch_size = batch_size,\n                    epochs = epochs,\n                    verbose = 1,\n                    validation_data = (X_test, y_test))\n\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","311356e0":"predictions = model.predict(X_test)\npredictions = (predictions > 0.5)\n\nprint(confusion_matrix(y_test, predictions))\nprint(classification_report(y_test, predictions))","4eef3ad4":"### Modeling","66420c06":"### features selection"}}