{"cell_type":{"57e16e47":"code","27f0be4d":"code","831f33ac":"code","8efef901":"code","400ab2f6":"code","e1f632b0":"code","9eb5a314":"code","b35f4d93":"code","cba8fd32":"code","a0b3f959":"code","926725da":"code","daab5335":"code","cf5a8fb0":"code","43479d3e":"code","09309494":"code","28b1d8b6":"code","9ad301f2":"code","27b0a721":"code","d86e4092":"code","18e068f5":"code","87c31453":"code","0decb5bb":"code","72fbdf2b":"code","9ae0f25d":"code","946bc594":"code","b63bfde2":"code","bc88b61d":"code","00fe2044":"code","59630299":"code","fa83ff00":"code","7860f210":"code","e1a8b7bc":"code","7386a27c":"code","e0580f5b":"code","2ea1e408":"code","1c3474ce":"code","6f804652":"code","3c2f3fb5":"code","0ca4ffce":"code","f6ae5428":"code","5c335033":"code","70a051c5":"code","76473370":"code","a5c82f01":"code","2149e46b":"code","99532e5c":"code","378ca87a":"code","f15a304d":"code","2b4f3ed4":"code","6919c39c":"code","9c2628ab":"code","6f637499":"code","fb8b942e":"code","7c90a3ad":"code","7d96e8f8":"code","e45d9111":"code","ad89a3c4":"code","1793abc9":"code","e2f31fb5":"code","a8a83f8a":"markdown","93aa76f8":"markdown","7c17c96e":"markdown","9e3a0576":"markdown"},"source":{"57e16e47":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nimport pandas as pd","27f0be4d":"import os\nprint(os.listdir(\"..\/input\"))","831f33ac":"df = pd.read_csv(\"..\/input\/mobile-price-classification\/train.csv\")","8efef901":"df.head()","400ab2f6":"def initial_observation(df):\n    if isinstance(df, pd.DataFrame):\n        total_na = df.isna().sum().sum()\n        print(\"Dimensions : %d rows, %d columns\" % (df.shape[0], df.shape[1]))\n        print(\"Total NA Values : %d \" % (total_na))\n        print(\"%38s %10s     %10s %10s\" % (\"Column Name\", \"Data Type\", \"#Distinct\", \"NA Values\"))\n        col_name = df.columns\n        dtyp = df.dtypes\n        uniq = df.nunique()\n        na_val = df.isna().sum()\n        for i in range(len(df.columns)):\n            print(\"%38s %10s   %10s %10s\" % (col_name[i], dtyp[i], uniq[i], na_val[i]))\n        \n    else:\n        print(\"Expect a DataFrame but got a %15s\" % (type(df)))","e1f632b0":"initial_observation(df)","9eb5a314":"df.corr().style.format(\"{:.2}\").background_gradient(cmap=plt.get_cmap('coolwarm'), axis=1)","b35f4d93":"sns.set()\nsns.pairplot(df, size = 5.5)\nplt.show();","cba8fd32":"df[\"price_range\"].value_counts()","a0b3f959":"sns.catplot(x=\"ram\", y=\"price_range\", kind=\"swarm\", data=df);","926725da":"sns.catplot(x=\"battery_power\", y=\"price_range\", kind=\"swarm\", data=df);","daab5335":"plt.boxplot(df[\"fc\"])\nplt.show()","cf5a8fb0":"sorted(df[\"fc\"])","43479d3e":"q1, q3= np.percentile(df[\"fc\"],[25,75])","09309494":"iqr = q3 - q1","28b1d8b6":"lower_bound = q1 -(1.5 * iqr) \nupper_bound = q3 +(1.5 * iqr) ","9ad301f2":"fc_outlier = df[df[\"fc\"]>16.0]\n#df['preTestScore'].where(df['postTestScore'] > 50)","27b0a721":"fc_outlier","d86e4092":"import numpy as np\nimport pandas as pd\noutliers=[]\ndef detect_outlier(data_1):\n    \n    threshold=3\n    mean_1 = np.mean(data_1)\n    std_1 =np.std(data_1)\n    \n    \n    for y in data_1:\n        z_score= (y - mean_1)\/std_1 \n        if np.abs(z_score) > threshold:\n            outliers.append(y)\n    return outliers","18e068f5":"plt.boxplot(df[\"px_height\"])\nplt.show()","87c31453":"outlier_datapoints1 = detect_outlier(df[\"px_height\"])\nprint(outlier_datapoints1)","0decb5bb":"plt.boxplot(df[\"three_g\"])\nplt.show()","72fbdf2b":"outlier_datapoints2 = detect_outlier(df[\"three_g\"])\nprint(outlier_datapoints2)","9ae0f25d":"x = df.drop([\"price_range\"], axis = 1)\ny = df[\"price_range\"]","946bc594":"x.head()","b63bfde2":"from sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(x,y)","bc88b61d":"X_train_scaled = X_train.copy()\nX_val_scaled = X_val.copy()\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(X_train_scaled)\nx_train_scaled_1 = scaler.transform(X_train_scaled)\nx_val_scaled_1 = scaler.transform(X_val_scaled)\n","00fe2044":"print(\"X Train shape:\" , X_train.shape)\nprint(\"X Validation shape:\" ,   X_val.shape)\nprint(\"Y Train shape:\",     Y_train.shape)\nprint( \"Y Validation Shape:\",   Y_val.shape)","59630299":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","fa83ff00":"rf_parm = dict(n_estimators = [20, 30, 50, 70, 100, 150], max_features = [0.1, 0.2, 0.6, 0.9], max_depth = [10,20,30],min_samples_leaf=[1,10,100, 400, 500, 600],random_state=[0])","7860f210":"rc = RandomForestClassifier()\nrf_grid = GridSearchCV(estimator = rc, param_grid = rf_parm)","e1a8b7bc":"rf_grid.fit(X_train,Y_train)","7386a27c":"print(\"RF Best Score:\", rf_grid.best_score_)\nprint(\"RF Best Parameters:\", rf_grid.best_params_)","e0580f5b":"rc_best = RandomForestClassifier(n_estimators = 150,  max_features = 0.6, min_samples_leaf = 1, max_depth = 20, random_state = 0 )","2ea1e408":"rc_best.fit(X_train, Y_train)\nrc_tr_pred = rc_best.predict(X_train)\nrc_val_pred = rc_best.predict(X_val)","1c3474ce":"print(rc_val_pred)","6f804652":"from sklearn.metrics import accuracy_score \nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score","3c2f3fb5":"print(\"Precision Score : \",precision_score(Y_val, rc_val_pred , \n                                           pos_label='positive',\n                                           average='weighted'))\nprint(\"Recall Score : \",recall_score(Y_val, rc_val_pred , \n                                           pos_label='positive',\n                                           average='weighted'))\nprint(\"F1 Score:\",  f1_score(Y_val, rc_val_pred , \n                                           pos_label='positive',\n                                           average='weighted'))","0ca4ffce":"from sklearn.metrics import classification_report\n\nprint(classification_report(Y_val, rc_val_pred))","f6ae5428":"df_test = pd.read_csv(\"..\/input\/mobile-price-classification\/test.csv\")","5c335033":"df_test.head()","70a051c5":"x_test = df_test.drop([\"id\"], axis = 1)","76473370":"rc_test_pred_unscaled = rc_best.predict(x_test)","a5c82f01":"rc_test_pred_unscaled","2149e46b":"test_pred = pd.DataFrame({\"id\" : range(1000), \"test_price_range\" : rc_test_pred_unscaled })","99532e5c":"test_pred[\"test_price_range\"].value_counts()","378ca87a":"pd.value_counts(test_pred[\"test_price_range\"]).plot.bar()","f15a304d":"from sklearn.tree import DecisionTreeClassifier","2b4f3ed4":"clf = DecisionTreeClassifier()","6919c39c":"clf.fit(X_train,Y_train)","9c2628ab":"clf_tr_pred = clf.predict(X_train)\nclf_val_pred = clf.predict(X_val)","6f637499":"print(clf_val_pred)","fb8b942e":"print(\"Precision Score(Decision Tree) : \",precision_score(Y_val, clf_val_pred , \n                                           pos_label='positive',\n                                           average='weighted'))\nprint(\"Recall Score(Decision Tree) : \",recall_score(Y_val, clf_val_pred , \n                                           pos_label='positive',\n                                           average='weighted'))\nprint(\"F1 Score(Decision Tree) :\",  f1_score(Y_val, clf_val_pred , \n                                           pos_label='positive',\n                                           average='weighted'))","7c90a3ad":"from sklearn.metrics import accuracy_score\nprint(\"Accuracy:\", accuracy_score(Y_val, clf_val_pred))","7d96e8f8":"from sklearn.metrics import classification_report\n\nprint(classification_report(Y_val, clf_val_pred))","e45d9111":"clf_test_pred_unscaled = clf.predict(x_test)","ad89a3c4":"test_pred_tree = pd.DataFrame({\"id\" : range(1000), \"test_price_range\" : clf_test_pred_unscaled })","1793abc9":"test_pred_tree[\"test_price_range\"].value_counts()","e2f31fb5":"pd.value_counts(test_pred_tree[\"test_price_range\"]).plot.bar()","a8a83f8a":"### Random Forest\/GridSearch CV","93aa76f8":"### Using IQR","7c17c96e":"### Decision Tree","9e3a0576":"### Using Z score to detect Outliers."}}