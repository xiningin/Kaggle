{"cell_type":{"cc5bbc40":"code","4ce378a8":"code","1e60899e":"code","a8957d38":"code","e8332e64":"code","ac4e09d9":"code","8fb26849":"code","2b0b66ad":"code","9ebbd9eb":"code","4c122191":"code","31245cb2":"code","9361142e":"code","49ee4270":"code","8352b0d7":"code","b59a5571":"code","9b973c5d":"code","fc2a3895":"code","58c36be8":"code","69bbba77":"code","b881b84d":"markdown","748b0695":"markdown","6140494c":"markdown","e675f63a":"markdown","4a88f295":"markdown","403941ad":"markdown","b979b5d7":"markdown","edf3ddcf":"markdown","7de38277":"markdown","7be67340":"markdown","02f2f57e":"markdown"},"source":{"cc5bbc40":"# load required packages\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport calendar\nfrom datetime import datetime\n\n#plotly\nimport plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nimport missingno as msno\n\n# Block the warning messages\nimport warnings \nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","4ce378a8":"# load dataset\ndata_train = pd.read_csv(\"..\/input\/train.csv\")\ndata_test = pd.read_csv(\"..\/input\/test.csv\")\n\ndata_bike = data_train\n# merge train and test sets\n#frame = [data_train, data_test]\n#data = pd.concat(frame)","1e60899e":"data_bike.shape","a8957d38":"data_bike.dtypes","e8332e64":"data_bike.head(2)","ac4e09d9":"data_bike[\"date\"] = data_bike.datetime.apply(lambda x : x.split()[0])\ndata_bike[\"hour\"] = data_bike.datetime.apply(lambda x : x.split()[1].split(\":\")[0])\ndata_bike[\"weekDay\"] = data_bike.date.apply(lambda dateString : calendar.day_name[datetime.strptime(dateString,\"%Y-%m-%d\").weekday()])\ndata_bike[\"month\"] = data_bike.date.apply(lambda dateString : calendar.month_name[datetime.strptime(dateString,\"%Y-%m-%d\").month])\n\n# Convert to Category Type\ncategoryVariableList = [\"hour\",\"weekDay\",\"month\"]\nfor var in categoryVariableList:\n    data_bike[var] = data_bike[var].astype(\"category\")","8fb26849":"data_bike[\"season\"] = data_bike.season.map({1: \"Spring\", 2 : \"Summer\", 3 : \"Fall\", 4 :\"Winter\" })\ndata_bike[\"weather\"] = data_bike.weather.map({1: \" Clear + Few clouds + Partly cloudy + Partly cloudy\",\\\n                                        2 : \" Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist \", \\\n                                        3 : \" Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\", \\\n                                        4 :\" Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog \" })\n\n# Convert to Category Type\ncategoryVariableList = [\"season\",\"weather\",\"holiday\",\"workingday\"]\nfor var in categoryVariableList:\n    data_bike[var] = data_bike[var].astype(\"category\")","2b0b66ad":"data_bike.info()","9ebbd9eb":"data_bike.describe()","4c122191":"data_bike.isnull().sum()","31245cb2":"msno.matrix(data_bike)","9361142e":"data_bike.head()","49ee4270":"trace0 = go.Box(y=data_bike[\"count\"], marker=dict(color='#9FA0FF'))\nlayout = go.Layout(title = 'Boxplot on Count')\nfig0 = go.Figure(data=[trace0], layout=layout)\niplot(fig0)","8352b0d7":"trace1 = go.Box( y=data_bike[\"count\"], x=data_bike[\"season\"], marker=dict(color='#CC7E85'))\nlayout = go.Layout(title = 'Boxplot on Count across Season')\nfig1 = go.Figure(data=[trace1], layout=layout)\niplot(fig1)","b59a5571":"trace2 = go.Box( y=data_bike[\"count\"], x=data_bike[\"hour\"], marker=dict(color='#3F8EFC'))\nlayout = go.Layout(title = 'Boxplot on Count across Hour')\nfig2 = go.Figure(data=[trace2], layout=layout)\niplot(fig2)","9b973c5d":"data_bike_NoOutliers = data_bike[np.abs(data_bike[\"count\"]-data_bike[\"count\"].mean())<=(3*data_bike[\"count\"].std())]","fc2a3895":"trace4 = go.Box(y=data_bike_NoOutliers[\"count\"], marker=dict(color='#9FA0FF'))\nlayout = go.Layout(title = 'Boxplot on Count')\nfig4 = go.Figure(data=[trace4], layout=layout)\niplot(fig4)","58c36be8":"corrMatt = data_bike[[\"temp\",\"atemp\",\"casual\",\"registered\",\"humidity\",\"windspeed\",\"count\"]].corr()","69bbba77":"trace = go.Heatmap(z = corrMatt, \n                   x = ['temp','atemp','casual','registered','humidity','windspeed','count'], \n                   y = ['temp','atemp','casual','registered','humidity','windspeed','count'])\ndata=[trace]\niplot(data, filename='basic-heatmap')","b881b84d":"This will display a summary statistics of all observed features and labels.","748b0695":"<p style=\"letter-spacing: 0.1em; color: #EF798A; font-size: 2em\"> Bikesharing Competition Data Preparation Using Plotly <\/p>","6140494c":"<p style=\"font-size: 1.5em; color: #DA627D;\">Correlation Analysis<\/p>\nThis step is required to find out if there are possible connection between variables.\nIt seems like we should expect relaitivity between Count and temp, humidity, windspeed, and maybe season, hour, month, weekday.","e675f63a":"<p> What kind of variables contribute our data: <\/p>","4a88f295":"<p style=\"font-size: 1.5em; color: #FF7F11;\">Outlier Analysis<\/p>\nWe can find outliers using visulization methods(Box plot, Scatter plot) or mathematical methods(Z-Score, IQR score).<br>\nUsing Plotly <a href=\"https:\/\/plot.ly\/python\/box-plots\/\">Box Plot<\/a> we demonstrate box plot of count, season, hour and ... .\n","403941ad":"<p style=\"font-size: 2em; color: #C28CAE;\"> Data Preparation <\/p>\n<p>Check the size of dataset:<\/p>","b979b5d7":"<strong>Optional Datatype Changing<\/strong><br>\nWe can change datatype of \"season\", \"holiday\", \"workingday\" and \"weather\" columns to category or leave them the way they are. Btw the code for applying this conversion is provided below.","edf3ddcf":"Extract data from <strong>datetime<\/strong> column into new columns: date, hour, weekDay ,month.<br>\n(datetime structure: YYYY-MM-DD hh:mm:ss)<br>\nYou may want to learn about <a  href=\"https:\/\/www.geeksforgeeks.org\/python-string-split\/\">split<\/a>, <a href=\"https:\/\/www.geeksforgeeks.org\/python-lambda-anonymous-functions-filter-map-reduce\/\">lambda<\/a>, <a href=\"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.apply.html\">apply<\/a>, <a href=\"https:\/\/docs.python.org\/3\/library\/datetime.html\">datetime<\/a>","7de38277":"Removing outliers from Count column.","7be67340":"<strong style=\"color: #0B6E4F\">Find Missing Data<\/strong><br>\n<ul style=\"color: #08A045;\">\n        <li> .info() .describe() .isnull()\n<\/ul>\n.info compare the total number of non-null with the total number of entries and check for missing values if we observe any difference between these two.<br>\nThen using .describe() check a summary statistics of observed features.<br>\n.isnull().sum() tells us the total number of NaN in our data.\n\n<ul style=\"color: #6BBF59;\">\n        <li> Missingno\n<\/ul>\n\nMissingno is a great package to quickly display missing values in a dataset using a Matrix which shows patterns in data completion or a Bar Chart which visualize nullity by column. For more info you can check <a href=\"https:\/\/github.com\/ResidentMario\/missingno\">this<\/a>.<br>\nWe can also use Heatmap to measure how strongly the presence or absence of one variable affects the presence of another.","02f2f57e":"<p style=\"font-size: 2em; color: #4ECDC4;\"> Identify the Question <\/p>\nBefore starting analyzing data I want to think a little more about why we want to forcast bike rental demands.<br>\nIt can help the company in two major way:\n<ul>\n<li>Improve their services\n<li>Increase their costumers\n<\/ul>\n<p style=\"font-size: 1.25em; color: #6ED6CE;\"> Improve Services:<\/p>\n<ul>\n    <li> During busy hours provide more bikes.\n    <li> Make these insights available for costumers so they can decide better on when and where to count on availability of bikes.\n<\/ul>\n<p style=\"font-size: 1.25em; color: #8EDFD9;\"> Increase Costumers:<\/p>\n<ul>\n    <li> During low-demand hours and for low-demand palces offer lower prices\n<\/ul>\n\nBy analyzing historical data:\n<ul>\n    <li>The company can compare the progress through years and compare yearly patterns to check profitability.<br>\n    <li>Also, they can identify kiosks and routes with higher demand and improve services for those places, like repairing bikes, regularly checking on kiosks to work properly.\n<\/ul>\n"}}