{"cell_type":{"6ac20a55":"code","916b4f04":"code","b3cdfd8a":"code","d60fc7b6":"code","8b1163b8":"code","62dcf993":"code","42d64e20":"code","7324eed5":"code","d8c17f88":"code","f3e90f39":"code","e6fbbe01":"code","a7478cc4":"code","3d17f80e":"code","0d694eed":"code","0ca89dd2":"code","16bc8506":"code","54271a4e":"code","8155f5c7":"code","5234a3f1":"code","2abc8a89":"code","9185d9b2":"code","58d4a3ff":"code","2405f590":"code","4292f29b":"code","be178108":"code","b8ad63d3":"code","3a8b08ed":"code","543d98c9":"code","48983a4d":"code","06335330":"code","00a6fdca":"code","7ea7bb14":"code","34d637b5":"code","8c266026":"code","c8759cc1":"code","2bb92da0":"code","ac63c425":"code","4e9f8be9":"code","7d462d1f":"code","6686bf90":"code","069c1871":"code","555866e1":"code","7f3c2498":"code","70e92600":"code","43676004":"code","b6a7c7bd":"code","71bfc660":"code","7c81ad0a":"code","2f77fffe":"code","b08e6127":"code","ad01d5df":"code","25414062":"code","5fe0ae3e":"code","0b5709a9":"code","0b73fb27":"code","8d2421c6":"code","c95c82fb":"code","dda4084a":"code","7a0abb76":"code","c2b10d2d":"code","f0bd0769":"code","a88406f9":"markdown","fadec043":"markdown","70966899":"markdown","f9e9daa8":"markdown","05d5bc4d":"markdown","accc38e3":"markdown","50e7459f":"markdown","a85a4d54":"markdown","09d895f4":"markdown","1995dc4e":"markdown","e19058a1":"markdown","2ad38887":"markdown","baa47054":"markdown","98eef521":"markdown","1aafaced":"markdown"},"source":{"6ac20a55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043c\u043e\u0434\u0443\u043b\u0438 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u0442\u043e\u0439 \u0438 \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c\nfrom datetime import datetime\nfrom datetime import timedelta\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u043c\u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438\nimport re\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\nimport math # \u0434\u043b\u044f \u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u043e\u0432\n\nimport requests \nfrom bs4 import BeautifulSoup\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nRANDOM_SEED = 42\n!pip freeze > requirements.txt","916b4f04":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","b3cdfd8a":"df_train.head()","d60fc7b6":"data[data.City == 'Luxembourg']","8b1163b8":"\"\"\"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0438 \u043d\u0430 \u0442\u043e, \u043a\u0430\u043a\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438\"\"\"\ndf_train.info()","62dcf993":"df_test.head()","42d64e20":"df_test.info()","7324eed5":"# \u0414\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u043e\u0431\u0435\u0438\u0445 \u0447\u0430\u0441\u0442\u044f\u0445 (\u0438 \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439) \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u044d\u0442\u0438 \u0447\u0430\u0441\u0442\u0438 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u043d\u0430\u0448 \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0447\u0430\u0441\u0442\u0438, \u0433\u0434\u0435 \u0435\u0433\u043e \u043f\u043e\u043a\u0430 \u043d\u0435\u0442\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c","d8c17f88":"data.nunique(dropna=False)","f3e90f39":"\"\"\"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\nplt.figure(figsize = (5,5))\nsns.heatmap(data = data.isnull())","e6fbbe01":"print(data.Reviews[5], type(data.Reviews[5]))\nprint(data['Cuisine Style'][5], type(data['Cuisine Style'][5]))\n#\u0434\u0430\u043d\u043d\u044b\u0435 \u0433\u0440\u044f\u0437\u043d\u044b\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0432\u044c\u044e \u0438 \u0442\u0438\u043f\u044b \u043a\u0443\u0445\u043d\u0438 \u0441\u043f\u0430\u0440\u0441\u0438\u043b\u0438 \u0441\u043f\u0438\u0441\u043a\u043e\u043c, \u043d\u043e \u043f\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0443 \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435","a7478cc4":"\"\"\"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0432\u044c\u044e \u043d\u0443\u043b\u044f\u043c\u0438, \u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0439 \u043e \u043f\u0443\u0441\u0442\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 \u0440\u0435\u0432\u044c\u044e.\"\"\"\ndata['rev_isna'] = pd.isna(data['Number of Reviews']).astype('uint8')\ndata['Number of Reviews'].fillna(0, inplace=True)","3d17f80e":"\"\"\"\u0415\u0449\u0451 \u0440\u0430\u0437 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\"\"\"\ndata.nunique(dropna = False)","0d694eed":"\"\"\"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a rest_ratio, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u0438 \u043f\u043e\u043f\u0443\u043b\u044f\u0446\u0438\u0438\"\"\"\nrestaurants = data.City.value_counts()\npopulation = pd.Series ({\n    'London':8.982, 'Paris':2.148,'Madrid':6.642,'Barcelona':5.575,\n    'Berlin':3.769,'Milan':1.352,'Rome':2.873, 'Prague':1.309,\n    'Lisbon':0.548, 'Vienna':1.897, 'Amsterdam':0.822, 'Brussels':0.174,\n    'Hamburg':1.899, 'Munich':1.472, 'Lyon':0.513, 'Stockholm':0.976,\n    'Budapest':1.752, 'Warsaw':1.708, 'Dublin':1.388, 'Copenhagen':0.602,\n    'Athens':0.664, 'Edinburgh':0.482, 'Zurich':0.403, 'Oporto':0.214,\n    'Geneva':0.499, 'Krakow':0.760, 'Oslo':0.681, 'Helsinki':0.631,\n    'Bratislava':0.424, 'Luxembourg':0.614, 'Ljubljana':0.293})\nrest_ratio = restaurants \/ 1000 \/ population\ndata['rest_ratio'] = data.apply(lambda x: rest_ratio[x.City], axis = 1)","0ca89dd2":"data['dCity'] = data['City']\ndata = pd.get_dummies(data, columns=[ 'dCity'])","16bc8506":"capitals = ['Mariehamn', 'Tirana', 'Andorra la Vella', 'Vienna',\n            'Minsk', 'Brussels', 'Sarajevo', 'Sofia',\n            'Zagreb', 'Nicosia', 'Prague', 'Copenhagen',\n            'Tallinn', 'T\u00f3rshavn', 'Helsinki', 'Paris',\n            'Berlin', 'Gibraltar', 'Athens', 'St. Peter Port',\n            'Budapest', 'Reykjavik', 'Dublin', 'Douglas',\n            'Rome', 'Saint Helier', 'Pristina', 'Riga',\n            'Vaduz', 'Vilnius', 'Luxembourg', 'Skopje',\n            'Valletta', 'Chi\u0219in\u0103u', 'Monaco', 'Podgorica',\n            'Amsterdam', 'Oslo', 'Warsaw', 'Lisbon',\n            'Bucharest', 'Moscow', 'City of San Marino', 'Belgrade',\n            'Bratislava', 'Ljubljana', 'Madrid', 'Longyearbyen',\n            'Stockholm', 'Bern', 'Kiev', 'London', 'Vatican City']\ndata['is_capital'] = data.City.apply(lambda x: 1 if x in capitals else 0)","54271a4e":"data['Price Range'].value_counts()","8155f5c7":"data['price_isna'] = pd.isna(data['Price Range']).astype('uint8') #\u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0446\u0435\u043d\u043e\u0432\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430\ndata['Price Range'] = data.apply(lambda x: x['Price Range'].replace('$$ - $$$', '2').replace('$$$$', '3').replace('$', '1')\n                                 if type(x['Price Range']) == str else 2,axis = 1)\ndata['Price Range'] = data.apply(lambda x: float(x['Price Range']), axis = 1)","5234a3f1":"data.sample(5)","2abc8a89":"\"\"\"\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0440\u0435\u0432\u044c\u044e\"\"\"\n# def d_time (cell): #\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0430\u0437\u043d\u0438\u0446\u0443 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432 \u0434\u043d\u044f\u0445 \u043c\u0435\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c\u0438 \u0440\u0435\u0432\u044c\u044e\n#     try:\n#         x = cell.split(',')[2:]\n#         x = pd.Series(x).apply(lambda x: x.replace('[','').replace(']','').replace(\"'\",'').replace(' ',''))\n#         x = x.apply(lambda x: datetime.strptime(x,'%d\/%m\/%Y'))\n#         delta_x=x[1]-x[0]\n#         return abs(delta_x.days)\n#     except:\n#         return -1 # \u0447\u0442\u043e\u0431\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f NaN \u043d\u0435 \u043c\u0435\u0448\u0430\u043b\u0438 \u0438 \u0432\u044b\u0434\u0435\u043b\u044f\u043b\u0438\u0441\u044c \u043a\u0430\u0440\u0434\u0438\u043d\u0430\u043b\u044c\u043d\u043e \ndef fresh_date (cell): #\u0424\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0434\u0430\u0442\u0443 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0432\u0435\u0436\u0435\u0433\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u043d\u043e\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430\"\"\"\n    try:\n        x = cell.split(',')[2:]\n        x = pd.Series(x).apply(lambda x: x.replace('[','').replace(']','').replace(\"'\",'').replace(' ',''))\n        x = x.apply(lambda x: datetime.strptime(x,'%d\/%m\/%Y'))\n        fresh_x = max(x[0],x[1])\n        return fresh_x\n    except:\n        return None","9185d9b2":"\"\"\"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u0430\u0442\u044b \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0432\u0435\u0436\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435\"\"\"\ndata['rev_date'] = data.apply(lambda x: fresh_date(x['Reviews']), axis = 1)\ndata['rev_date'] = data['rev_date'].apply(lambda x: (x - datetime.now()).days)\ndata['rev_date'].fillna(data['rev_date'].mean(), inplace = True)\ndata['rev_date'] = (data['rev_date'] - data['rev_date'].mean())\ndata['rev_date'] = (data['rev_date'] \/ np.linalg.norm(data['rev_date']))","58d4a3ff":"\"\"\"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0434\u043b\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0433\u0434\u0435 \u0442\u0438\u043f \u043a\u0443\u0445\u043d\u0438 \u043d\u0435 \u0443\u043f\u043e\u043c\u044f\u043d\u0443\u0442\"\"\"\ndata['cuisine_isna'] = pd.isna(data['Cuisine Style']).astype('uint8')","2405f590":"\"\"\"\u041e\u0447\u0438\u0441\u0442\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u043e\u0442 \u0432\u0441\u0435\u0433\u043e \u043b\u0438\u0448\u043d\u0435\u0433\u043e, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043f\u0440\u043e\u0431\u0435\u043b\u044b \u0438 \u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438-\u0437\u0430\u043f\u044f\u0442\u044b\u0435\"\"\"\ndata['Cuisine Style'] = data.apply(lambda x: x['Cuisine Style'].replace('[','').replace(']','').replace(\"'\",'').replace(' ','') \n                                   if type(x['Cuisine Style']) != float else x['Cuisine Style'], axis = 1)\n\n\"\"\"\u0420\u0430\u0437\u0431\u0435\u0440\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u043d\u0430 \u0434\u0430\u043c\u043c\u0438-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044e\"\"\"\nstyles = data['Cuisine Style'].str.get_dummies(',').sum().sort_values(ascending = False)\nstyles_drop = [x for x in styles.index if styles[x] < 100] # \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u043c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 1000 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432\n\n\"\"\"\u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \"\"\"\ndata = data.join(data['Cuisine Style'].str.get_dummies(',').drop(styles_drop, axis = 1), how = 'left')\n","4292f29b":"styles[:50]","be178108":"data.VegetarianFriendly.value_counts() #\u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0433\u0435\u0442\u0430\u0440\u0438\u0430\u043d\u0441\u043a\u0438\u0445 \u0437\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u0434\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438","b8ad63d3":"pattern = re.compile('[A-Z][a-z]*') #\u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432\u044b\u0442\u0430\u0449\u0438\u0442 \u0438\u0437 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0442\u0435\u0433\u0438\ndef fill_styles (row):\n    for style in styles.drop(styles_drop).index:\n        x = pattern.match(style)[0]\n        try:\n            if x.lower() in row.Reviews.lower(): #\u0438\u0449\u0435\u043c \u0442\u0435\u0433\u0438 \u0432 \u043e\u0442\u0437\u044b\u0432\u0430\u0445\n                row[style] = 1\n        except:\n            continue\n    return row","3a8b08ed":"data = data.apply(lambda x: fill_styles(x),axis = 1)","543d98c9":"data.VegetarianFriendly.value_counts() # \u0438 \u043f\u043e\u0441\u043b\u0435","48983a4d":"local = pd.Series ({\n    'London':'British', 'Paris':'French','Madrid':'Spanish','Barcelona':'Spanish',\n    'Berlin':'German','Milan':'Italian','Rome':'Italian', 'Prague':'Czech',\n    'Lisbon':'Portuguese', 'Vienna':'Austrian', 'Amsterdam':'Dutch', 'Brussels':'Belgian',\n    'Hamburg':'German', 'Munich':'German', 'Lyon':'French', 'Stockholm':'Scandinavian',\n    'Budapest':'Hungarian', 'Warsaw':'Polish', 'Dublin':'British', 'Copenhagen':'Scandinavian',\n    'Athens':'Greek', 'Edinburgh':'British', 'Zurich':'CentralEuropean', 'Oporto':'Portuguese',\n    'Geneva':'EasternEuropean', 'Krakow':'Polish', 'Oslo':'Scandinavian', 'Helsinki':'Scandinavian',\n    'Bratislava':'EasternEuropean', 'Luxembourg':'French', 'Ljubljana':'EasternEuropean'})\ndata['is_local'] = data.apply(lambda x: 1 if x[local[x.City]] == 1 else 0, axis = 1)","06335330":"data.sample(5)","00a6fdca":"df_train = data[data['sample'] == 1]","7ea7bb14":"\"\"\"\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 ranking\"\"\"\nfig, axes = plt.subplots(1, 2, figsize=(20, 10));\ndf_train['Ranking'].hist(bins=100, ax=axes[0])\ndf_train.boxplot(column='Ranking', ax=axes[1])","34d637b5":"\"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ranking \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c (\u0441\u043b\u0435\u0432\u0430) \u0438 \u0442\u0438\u043f\u0430\u043c \u043a\u0443\u0445\u043e\u043d\u044c (\u0441\u043f\u0440\u0430\u0432\u0430)\"\nfig, axes = plt.subplots(1, 2, figsize=(20, 10));\nfor x in (df_train['City'].value_counts())[0:10].index:\n    df_train['Ranking'][df_train['City'] == x].hist(bins=100, ax = axes[0])\nfor x in styles[0:10].index:\n    df_train[df_train[x] == 1]['Ranking'].hist(bins = 100, ax = axes[1])\nplt.show()","8c266026":"df_train['sqrt_ranking'] = data.apply(lambda x: x.Ranking**(1\/3), axis = 1)\n\"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ranking \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c (\u0441\u043b\u0435\u0432\u0430) \u0438 \u0442\u0438\u043f\u0430\u043c \u043a\u0443\u0445\u043e\u043d\u044c (\u0441\u043f\u0440\u0430\u0432\u0430)\"\nfig, axes = plt.subplots(1, 2, figsize=(20, 10));\nfor x in (df_train['City'].value_counts())[0:10].index:\n    df_train['sqrt_ranking'][df_train['City'] == x].hist(bins=100, ax = axes[0])\nfor x in styles[0:10].index:\n    df_train[df_train[x] == 1]['sqrt_ranking'].hist(bins = 100, ax = axes[1])\nplt.show()\n\n#\u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u043a\u0443\u0431\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043a\u043e\u0440\u0435\u043d\u044c \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430 Ranking \u043f\u043e \u043a\u0443\u0445\u043d\u044f\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e, \u0432\u043e\u0437\u044c\u043c\u0435\u043c \u0435\u0433\u043e \u0432 \u0441\u0435\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","c8759cc1":"df_train['ln_ranking'] = data.apply(lambda x: math.log(x.Ranking), axis = 1)\n\"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 Ranking \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c (\u0441\u043b\u0435\u0432\u0430) \u0438 \u0442\u0438\u043f\u0430\u043c \u043a\u0443\u0445\u043e\u043d\u044c (\u0441\u043f\u0440\u0430\u0432\u0430)\"\nfig, axes = plt.subplots(1, 2, figsize=(20, 10));\nfor x in (df_train['City'].value_counts())[0:10].index:\n    df_train['ln_ranking'][df_train['City'] == x].hist(bins=100, ax = axes[0])\nfor x in styles[0:10].index:\n    df_train[df_train[x] == 1]['ln_ranking'].hist(bins = 100, ax = axes[1])\nplt.show()\n","2bb92da0":"c_mat = data.drop(['sample'], axis=1).corr()\nplt.rcParams['figure.figsize'] = (30,25)\nsns.heatmap(c_mat)","ac63c425":"print('\u0420\u0430\u043d\u0433 \u043c\u0430\u0442\u0440\u0438\u0446\u044b - {}, det(c_mat) = {}'.format(np.linalg.matrix_rank(c_mat), np.linalg.det(c_mat)))\nc_mat.shape","4e9f8be9":"# \"\"\"\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a Ranking \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0437\u0430\u0432\u0435\u0434\u0435\u043d\u0438\u0439 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\"\"\"\n# data['nRanking'] = data.Ranking \/ data.nCity \n# data.drop(['Ranking','nCity'], axis = 1, inplace = True)\n# #\u0431\u044b\u043b\u043e \u0432 \u0441\u0442\u0430\u0440\u043e\u0439 \u0440\u0435\u0432\u0438\u0437\u0438\u0438, nCity \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u043e \u043d\u0430 rest_ratio","7d462d1f":"\"\"\"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0431\u0430\u0440\u044b \u0438 \u043f\u0430\u0431\u044b, \u044f\u043f\u043e\u043d\u0441\u043a\u0443\u044e \u043a\u0443\u0445\u043d\u044e \u0438 \u0441\u0443\u0448\u0438\"\"\"\ndata['Bar_Pub'] = data.Bar | data.Pub\ndata.drop(['Bar','Pub'], axis = 1, inplace = True)\n\ndata['Japan_Sushi'] = data.Japanese | data.Sushi\ndata.drop(['Japanese','Sushi'], axis = 1, inplace = True)","6686bf90":"\"\"\"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043e\u0431 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u0446\u0435\u043d\u043e\u0432\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0438 \u043a\u0443\u0445\u043d\u0438 \u0432 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a data_missing\"\"\"\ndata['data_missing'] = data.cuisine_isna | data.price_isna\ndata.drop(['cuisine_isna','price_isna'], axis = 1, inplace = True)","069c1871":"\"\"\"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0432\u0435\u0433\u0430\u043d\u043e\u0432 \u0441 \u0432\u0435\u0433\u0435\u0442\u0430\u0440\u0438\u0430\u043d\u0446\u0430\u043c\u0438\"\"\"\ndata['vegan_and_veg'] = data.VeganOptions | data.VegetarianFriendly\ndata.drop(['VeganOptions','VegetarianFriendly'], axis = 1, inplace = True)","555866e1":"# #\u0435\u0449\u0451 \u0440\u0430\u0437 \u0432\u0437\u0433\u043b\u044f\u043d\u0443\u0432 \u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0435\u043b\u043b\u044f\u0446\u0438\u0438, \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a data_missing \u0432\u044b\u0441\u043e\u043a\u043e \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0441\u043a\u043e\u0440\u0435\u043b\u043b\u0438\u0440\u043e\u0432\u0430\u043d \u0441 Price Range (-0.9)\n# c_mat = data.drop(['sample'], axis=1).corr()\n# print(c_mat['Price Range'].data_missing)\n# #\u043c\u043e\u0436\u043d\u043e \u0438\u0437\u0431\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043e\u0442 data_missing\n# data.drop(['data_missing'], axis = 1, inplace = True)\n\n# \u0442\u0430\u043a \u0431\u044b\u043b\u043e \u0432 \u0441\u0442\u0430\u0440\u043e\u0439 \u0440\u0435\u0432\u0438\u0437\u0438\u0438","7f3c2498":"c_mat = data.drop(['sample'], axis=1).corr() #\u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u043b\u043e\u0441\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f \u043c\u0430\u0442\u0440\u0438\u0446\u044b\nprint('\u0420\u0430\u043d\u0433 \u043c\u0430\u0442\u0440\u0438\u0446\u044b - {}, det(c_mat) = {}'.format(np.linalg.matrix_rank(c_mat), np.linalg.det(c_mat)))\nc_mat.shape","70e92600":"c_mat = data.drop(['sample'], axis=1).corr()\nplt.rcParams['figure.figsize'] = (30,25)\nsns.heatmap(c_mat)","43676004":"data.drop('is_capital', axis = 1, inplace = True)","b6a7c7bd":"#\u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0437\u0430\u043d\u043e\u0432\u043e\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'\/kaggle_task.csv')\ndf_train['sample'] = 1 # \u0442\u0440\u0435\u0439\u043d\ndf_test['sample'] = 0 # \u0442\u0435\u0441\u0442\ndf_test['Rating'] = 0 # \u0442\u0430\u0440\u0433\u0435\u0442\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c\ndata.info()","71bfc660":"def preproc_data(df_input):\n    '''includes several functions to pre-process the predictor data.'''\n    \n    df_output = df_input.copy()\n    \n    # ################### 1. \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 ############################################################## \n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n    df_output.drop(['Restaurant_id','ID_TA','URL_TA'], axis = 1, inplace=True)\n    \n    \n    # ################### 2. NAN ############################################################## \n    \"\"\"\u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0432\u044c\u044e \u043d\u0443\u043b\u044f\u043c\u0438, \u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0439 \u043e \u043f\u0443\u0441\u0442\u043e\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 \u0440\u0435\u0432\u044c\u044e.\"\"\"\n    df_output['rev_isna'] = pd.isna(df_output['Number of Reviews']).astype('uint8')\n    df_output['Number of Reviews'].fillna(0, inplace=True)\n    \n    \n    # ################### 3. Encoding ##############################################################\n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c dummy-\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0433\u043e\u0440\u043e\u0434\u043e\u0432\"\"\"\n    df_output['dCity'] = df_output.City\n    df_output = pd.get_dummies(df_output, columns=['dCity'], dummy_na=True)\n    \n    df_output['price_isna'] = pd.isna(df_output['Price Range']).astype('uint8') #\u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u044f \u0446\u0435\u043d\u043e\u0432\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430\n    df_output['Price Range'] = df_output.apply(lambda x: x['Price Range'].replace('$$ - $$$', '2').replace('$$$$', '3').replace('$', '1')\n                                 if type(x['Price Range']) == str else 2,axis = 1)\n    df_output['Price Range'] = df_output.apply(lambda x: float(x['Price Range']), axis = 1)\n    \n    \"\"\"\u041e\u0447\u0438\u0441\u0442\u0438\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0441\u043e \u0441\u0442\u0438\u043b\u044f\u043c\u0438 \u043a\u0443\u0445\u043d\u0438 \u043e\u0442 \u043b\u0438\u0448\u043d\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\"\"\"\n    df_output['cuisine_isna'] = pd.isna(data['Cuisine Style']).astype('uint8')\n    df_output['Cuisine Style'] = df_output.apply(lambda x: x['Cuisine Style'].replace('[','').replace(']','').replace(\"'\",'').replace(' ','') \n                                   if type(x['Cuisine Style']) != float else x['Cuisine Style'], axis = 1)\n\n    \"\"\"\u0420\u0430\u0437\u0431\u0435\u0440\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0441\u0442\u0440\u043e\u043a\u043e\u0439, \u043d\u0430 \u0434\u0430\u043c\u043c\u0438-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044e\"\"\"\n    styles = df_output['Cuisine Style'].str.get_dummies(',').sum().sort_values(ascending = False)\n    styles_drop = [x for x in styles.index if styles[x] < 100] # \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0438\u043c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 100 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432\n\n    \"\"\"\u041f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \"\"\"\n    df_output = df_output.join(df_output['Cuisine Style'].str.get_dummies(',').drop(styles_drop, axis = 1), how = 'left')\n    \n    \"\"\"\u0414\u043e\u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0435\u0441\u044f dummy-\u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0440\u0435\u0432\u044c\u044e\"\"\"\n    df_output = df_output.apply(lambda x: fill_styles(x),axis = 1)\n    \n    \"\"\"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043e\u0431 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0438 \u0446\u0435\u043d\u043e\u0432\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 \u0438 \u043a\u0443\u0445\u043d\u0438 \u0432 \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a data_missing\"\"\"\n    df_output['data_missing'] = df_output.cuisine_isna | df_output.price_isna\n    df_output.drop(['cuisine_isna','price_isna'], axis = 1, inplace = True)\n    \n    \n    # ################### 4. Feature Engineering ####################################################\n    \n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a rest_ratio, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u0438 \u043f\u043e\u043f\u0443\u043b\u044f\u0446\u0438\u0438\"\"\"\n    population = pd.Series ({\n    'London':8.982, 'Paris':2.148,'Madrid':6.642,'Barcelona':5.575,\n    'Berlin':3.769,'Milan':1.352,'Rome':2.873, 'Prague':1.309,\n    'Lisbon':0.548, 'Vienna':1.897, 'Amsterdam':0.822, 'Brussels':0.174,\n    'Hamburg':1.899, 'Munich':1.472, 'Lyon':0.513, 'Stockholm':0.976,\n    'Budapest':1.752, 'Warsaw':1.708, 'Dublin':1.388, 'Copenhagen':0.602,\n    'Athens':0.664, 'Edinburgh':0.482, 'Zurich':0.403, 'Oporto':0.214,\n    'Geneva':0.499, 'Krakow':0.760, 'Oslo':0.681, 'Helsinki':0.631,\n    'Bratislava':0.424, 'Luxembourg':0.614, 'Ljubljana':0.293})\n    rest_ratio = restaurants \/ 1000 \/ population\n    df_output['rest_ratio'] = df_output.apply(lambda x: rest_ratio[x.City], axis = 1)\n    \n    local = pd.Series ({\n    'London':'British', 'Paris':'French','Madrid':'Spanish','Barcelona':'Spanish',\n    'Berlin':'German','Milan':'Italian','Rome':'Italian', 'Prague':'Czech',\n    'Lisbon':'Portuguese', 'Vienna':'Austrian', 'Amsterdam':'Dutch', 'Brussels':'Belgian',\n    'Hamburg':'German', 'Munich':'German', 'Lyon':'French', 'Stockholm':'Scandinavian',\n    'Budapest':'Hungarian', 'Warsaw':'Polish', 'Dublin':'British', 'Copenhagen':'Scandinavian',\n    'Athens':'Greek', 'Edinburgh':'British', 'Zurich':'\u0421entralEuropean', 'Oporto':'Portuguese',\n    'Geneva':'EasternEuropean', 'Krakow':'Polish', 'Oslo':'Scandinavian', 'Helsinki':'Scandinavian',\n    'Bratislava':'EasternEuropean', 'Luxembourg':'French', 'Ljubljana':'EasternEuropean'})\n    df_output['is_local'] = df_output.apply(lambda x: 1 if x[local[x.City]] == 1 else 0,axis = 1)\n    \n    \"\"\"C\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a is_capital - \u0441\u0442\u043e\u043b\u0438\u0446\u0430 \u043b\u0438 \u0433\u043e\u0440\u043e\u0434\"\"\"\n    capitals = ['Mariehamn', 'Tirana', 'Andorra la Vella', 'Vienna',\n            'Minsk', 'Brussels', 'Sarajevo', 'Sofia',\n            'Zagreb', 'Nicosia', 'Prague', 'Copenhagen',\n            'Tallinn', 'T\u00f3rshavn', 'Helsinki', 'Paris',\n            'Berlin', 'Gibraltar', 'Athens', 'St. Peter Port',\n            'Budapest', 'Reykjavik', 'Dublin', 'Douglas',\n            'Rome', 'Saint Helier', 'Pristina', 'Riga',\n            'Vaduz', 'Vilnius', 'Luxembourg', 'Skopje',\n            'Valletta', 'Chi\u0219in\u0103u', 'Monaco', 'Podgorica',\n            'Amsterdam', 'Oslo', 'Warsaw', 'Lisbon',\n            'Bucharest', 'Moscow', 'City of San Marino', 'Belgrade',\n            'Bratislava', 'Ljubljana', 'Madrid', 'Longyearbyen',\n            'Stockholm', 'Bern', 'Kiev', 'London', 'Vatican City']\n    df_output['is_capital'] = df_output.City.apply(lambda x: 1 if x in capitals else 0)\n    \n#     \"\"\"\u041d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a Ranking \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\"\"\"\n#     df_output['pRanking'] = df_output.apply(lambda x: x.Ranking \/ population[x.City], axis = 1)\n    \"\"\"\u041d\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a Ranking \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0438 \u043b\u044e\u0434\u0435\u0439 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435\"\"\"\n    df_output['nRanking'] = df_output.apply(lambda x: x.Ranking \/ restaurants[x.City],\n                                            axis = 1)\n    df_output['\u0441uberoot_rank'] = df_output.apply(lambda x: x.Ranking**(1\/3) \/ restaurants[x.City], axis = 1)\n    df_output['ln_ranking'] = df_output.apply(lambda x: math.log(x.Ranking), axis = 1)\n    df_output.drop('Ranking', axis = 1, inplace = True) #\u043e\u0440\u0438\u0433\u0438\u043d\u0430\u043b \u0434\u0440\u043e\u043f\u043d\u0435\u043c\n        \n    \"\"\"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0431\u0430\u0440\u044b \u0438 \u043f\u0430\u0431\u044b, \u044f\u043f\u043e\u043d\u0441\u043a\u0443\u044e \u043a\u0443\u0445\u043d\u044e \u0438 \u0441\u0443\u0448\u0438\"\"\"\n    df_output['Bar_Pub'] = df_output.Bar | df_output.Pub\n    df_output.drop(['Bar','Pub'], axis = 1, inplace = True)\n\n    df_output['Japan_Sushi'] = df_output.Japanese | df_output.Sushi\n    df_output.drop(['Japanese','Sushi'], axis = 1, inplace = True)\n    \n    \"\"\"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043c \u0432\u0435\u0433\u0430\u043d\u043e\u0432 \u0441 \u0432\u0435\u0433\u0435\u0442\u0430\u0440\u0438\u0430\u043d\u0446\u0430\u043c\u0438\"\"\"\n    df_output['vegan_and_veg'] = df_output.VeganOptions | df_output.VegetarianFriendly\n    df_output.drop(['VeganOptions','VegetarianFriendly'], axis = 1, inplace = True)\n    \n    \"\"\"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u0430\u0442\u044b \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0432\u0435\u0436\u0435\u0433\u043e \u043e\u0442\u0437\u044b\u0432\u0430 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435\"\"\"\n    df_output['rev_date'] = df_output.apply(lambda x: fresh_date(x['Reviews']), axis = 1)\n    df_output['rev_date'] = df_output['rev_date'].apply(lambda x: (x - datetime.now()).days)\n    df_output['rev_date'].fillna(df_output['rev_date'].mean(), inplace = True)\n    df_output['rev_date'] = df_output['rev_date'] - df_output['rev_date'].mean()\n    df_output['rev_date'] = (df_output['rev_date'] \/ np.linalg.norm(df_output['rev_date'])) * 10**15\n    \n    df_output['rev_ratio'] = df_output.apply(lambda x: x['Number of Reviews'] \/ population[x.City],\n                                            axis = 1)\n   \n    \n    \n    # ################### 5. Clean #################################################### \n    # \u0443\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0449\u0435 \u043d\u0435 \u0443\u0441\u043f\u0435\u043b\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c, \n    # \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 \u0441 dtypes \"object\" \u043e\u0431\u0443\u0447\u0430\u0442\u044c\u0441\u044f \u043d\u0435 \u0431\u0443\u0434\u0435\u0442, \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u0431\u0435\u0440\u0438\u043c \u0438\u0445 \u0438 \u0443\u0434\u0430\u043b\u0438\u043c\n    object_columns = [s for s in df_output.columns if df_output[s].dtypes == 'object']\n    df_output.drop(object_columns, axis = 1, inplace=True)\n    \n    # ################### 6. Essential feature set  #################################################### \n#     features = ['nRanking','Rating','Number of Reviews', 'rest_ratio', 'rev_ratio', 'rev_date',\n#                  '\u0441uberoot_rank', 'dCity_Rome','dCity_Madrid', 'Price Range', 'data_missing',\n#                 'dCity_Amsterdam','sample']\n#     df_output = df_output[features]\n    \n    return df_output","7c81ad0a":"df_preproc = preproc_data(data)\ndf_preproc.sample(10)","2f77fffe":"\"\"\"\u0415\u0449\u0451 \u0440\u0430\u0437 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438, \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f \u0447\u0442\u043e \u043d\u0435\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432\"\"\"\ndf_preproc.info()","b08e6127":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","ad01d5df":"# \u0440\u0430\u0437\u043e\u0431\u044c\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape # \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c","25414062":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","5fe0ae3e":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c\nregr = RandomForestRegressor(n_estimators=100)\n\n# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nregr.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = regr.predict(X_test)\ny_pred = (y_pred * 2).round() \/ 2","0b5709a9":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# C\u0447\u0438\u0442\u0430\u0435\u043c Mean Absolute Error (MAE)\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","0b73fb27":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u044c \u0444\u0438\u0447\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(regr.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","8d2421c6":"test_data.sample(10)","c95c82fb":"test_data = test_data.drop(['Rating'], axis=1)","dda4084a":"sample_submission","7a0abb76":"predict_submission = regr.predict(test_data)\npredict_submission = (predict_submission * 2).round() \/ 2","c2b10d2d":"predict_submission","f0bd0769":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","a88406f9":"\u041c\u044b \u0432\u0438\u0434\u0438\u043c,\u0447\u0442\u043e \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a ranking \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e, \u0430 \u043f\u043e \u0432\u0438\u0434\u0430\u043c \u043a\u0443\u0445\u043e\u043d\u044c \u044d\u043a\u0441\u043f\u043e\u043d\u0435\u043d\u0446\u0438\u0430\u043b\u044c\u043d\u043e.","fadec043":"# EDA","70966899":"# DATA","f9e9daa8":"# ML","05d5bc4d":"\u0420\u0430\u043d\u0433 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043a\u043e\u0440\u0435\u043b\u043b\u044f\u0446\u0438\u0439 \u043d\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \u0431\u043b\u0438\u0437\u043e\u043a \u043a \u043d\u0443\u043b\u044e, \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043f\u043b\u043e\u0445\u043e \u043e\u0431\u0443\u0441\u043b\u043e\u0432\u043b\u0435\u043d\u0430, \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043c\u0443\u043b\u044c\u0442\u0438\u043a\u043e\u043b\u043b\u0438\u043d\u0435\u0430\u0440\u043d\u044b.\n\u041c\u044b \u0432\u0438\u0434\u0438\u043c, \u0447\u0442\u043e \u0441\u0438\u043b\u044c\u043d\u043e \u0441\u043a\u043e\u0440\u0435\u043b\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 price_isna \u0438 cuisine_isna, Bar \u0438 Pub, Japanese \u0438 Sushi\n\u041c\u043e\u0436\u0435\u043c \u0438\u0445 \u043f\u043e\u043f\u0430\u0440\u043d\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c, \u043f\u0435\u0440\u0432\u0443\u044e \u043f\u0430\u0440\u0443 \u043f\u043e\u0434\u0435\u043b\u0438\u0442\u044c \u0434\u0440\u0443\u0433 \u043d\u0430 \u0434\u0440\u0443\u0433\u0430, \u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438 \u0441\u043b\u043e\u0436\u0438\u0442\u044c (\u0418\u041b\u0418)","accc38e3":"#### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Price Range\n\u041e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0438\u043b\u0438 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f, \u0437\u043d\u0430\u0447\u0438\u0442, \u0441\u0442\u0440\u043e\u0433\u043e \u0433\u043e\u0432\u043e\u0440\u044f, \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u044b \u043d\u0430 \u0447\u0438\u0441\u043b\u0430 1,2,3","50e7459f":"\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e-\u0444\u0438\u043b\u043b\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0434\u043e\u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u0445 Cuisine Styles \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 Review.","a85a4d54":"# ML","09d895f4":"# IMPORT","1995dc4e":"#### \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0435\u043b\u043b\u044f\u0446\u0438\u0438","e19058a1":"# Data Preprocessing\n\u0417\u0430\u0432\u0435\u0440\u043d\u0435\u043c \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0432 \u043e\u0434\u043d\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044e","2ad38887":"# DATA CLEANING AND PREPARATION","baa47054":"#### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a Cuisine Style \u0438 \u0440\u0430\u0437\u0431\u0435\u0440\u0451\u043c \u0435\u0433\u043e \u043d\u0430 Dummy-\u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435","98eef521":"#### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f City\n\u041f\u0440\u0438\u0437\u043d\u0430\u043a - \u0433\u043e\u0440\u043e\u0434 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u043d\u0430 dummy \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435, \u0430 \u0442\u0430\u043a \u0436\u0435 \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u0438 \u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e \u043a\u0430\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0438\u043b\u0438 \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c Ranking \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u043e\u0439.","1aafaced":"# Submission"}}