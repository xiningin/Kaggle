{"cell_type":{"55efde31":"code","8776f958":"code","11dc2782":"code","291bb11d":"code","5dcda860":"code","7aa2b9b4":"code","6164eb40":"code","2f110682":"code","06d2f422":"code","700ea4c2":"code","b6e251be":"code","7da54880":"code","0a91d9be":"code","d722918b":"code","57d520d8":"code","0ddd6973":"code","0e843e8a":"code","b5a3ff95":"code","5b332bd5":"code","0d1d9546":"code","4a256fbe":"code","a1e67788":"code","f38dbea2":"code","a25c5332":"code","2f42c0c7":"code","1e0bea7a":"code","3bfa8648":"code","8bd1cc03":"code","861be06c":"code","7b87bcfb":"code","3d7ae74f":"code","99f780c3":"code","1911e934":"code","e9aa776d":"code","7b4c56ec":"markdown","c9825fd6":"markdown","a749153c":"markdown","9a7abbb3":"markdown","6049676f":"markdown","e3851788":"markdown","18cad6e8":"markdown","f341e5cd":"markdown","622802ef":"markdown","3f1cc354":"markdown","7133ed42":"markdown","256bc3cc":"markdown","00fa1afe":"markdown","e10fc481":"markdown"},"source":{"55efde31":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8776f958":"import pandas as pd\nimport os \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n","11dc2782":"\n\ndf=pd.read_csv('\/kaggle\/input\/divvy-2019-cyclist-dataset-12month\/all_merger.csv')","291bb11d":"print(df.info())\nprint(len(df))","5dcda860":"df['start_time1']=pd.to_datetime(df['start_time'],dayfirst=True)\ndf['end_time1']=pd.to_datetime(df['end_time'],dayfirst=True)","7aa2b9b4":"df['ride_length']=(df['end_time1']-df['start_time1'] ) \ndf['ride_length_s']=df.ride_length\/np.timedelta64(1,'s')","6164eb40":"df.head()\n    ","2f110682":"df.loc[df['trip_id']==22219262]","06d2f422":"df_filter=df.loc[df['start_time1']>df['end_time1']]","700ea4c2":"len(df_filter)","b6e251be":"df=df.loc[df['start_time1']<df['end_time1']]\n","7da54880":"df['month']=df['start_time1'].dt.month_name()","0a91d9be":"df['day']=pd.to_datetime(df['start_time']).dt.day_name()","d722918b":"df_user_details=df.groupby(['day','usertype']).size()\ndf_user_details","57d520d8":"sns.set_theme(style=\"whitegrid\")\nfig_dims=(15,15)\nfig, ax = plt.subplots(figsize=fig_dims)\ng=sns.countplot(x=df[\"day\"], hue=df['usertype'],data=df,palette=\"PRGn_r\",ax=ax)\n\n\nfor bar in g.patches:\n    \n  # Using Matplotlib's annotate function and\n  # passing the coordinates where the annotation shall be done\n  # x-coordinate: bar.get_x() + bar.get_width() \/ 2\n  # y-coordinate: bar.get_height()\n  # free space to be left to make graph pleasing: (0, 8)\n  # ha and va stand for the horizontal and vertical alignment\n    g.annotate(format(bar.get_height(), '.2f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height()), ha='center', va='center',\n                   size=12, xytext=(0, 8),\n                   textcoords='offset points',color='blue')","0ddd6973":"mean_ride_length=df['ride_length_s'].mean()\nmax_ride_length=df['ride_length_s'].max()\nmin_ride_length=df['ride_length_s'].min()\n","0e843e8a":"print(mean_ride_length,'\\n',max_ride_length,'\\n',min_ride_length)","b5a3ff95":"# Details of max_ride length from data\ndf.loc[df['ride_length_s']==max_ride_length]","5b332bd5":"df_customer=df.loc[df['usertype']=='Customer']\ndf_sub=df.loc[df['usertype']=='Subscriber']","0d1d9546":"sns.set_theme(style=\"whitegrid\")\nfig_dims=(12,12)\nfig, ax = plt.subplots(figsize=fig_dims)\ng=sns.countplot(x=df[\"day\"], hue=df['usertype'],data=df,palette=\"Set2\",ax=ax)\n\n\nfor bar in g.patches:\n    \n  # Using Matplotlib's annotate function and\n  # passing the coordinates where the annotation shall be done\n  # x-coordinate: bar.get_x() + bar.get_width() \/ 2\n  # y-coordinate: bar.get_height()\n  # free space to be left to make graph pleasing: (0, 8)\n  # ha and va stand for the horizontal and vertical alignment\n    g.annotate(format(bar.get_height(), '.2f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height()), ha='center', va='center',\n                   size=12, xytext=(0, 8),\n                   textcoords='offset points',color='blue')","4a256fbe":"df['ride_leng_e']=df['end_time1']-df['start_time1']","a1e67788":"mean_ride_length=df['ride_length'].mean()\nmax_ride_length=df['ride_length'].max()\nmin_ride_length=df['ride_length'].min()","f38dbea2":"print(mean_ride_length,'\\n',max_ride_length,'\\n',min_ride_length)","a25c5332":"\ndf.loc[df['ride_length'] == max_ride_length]","2f42c0c7":"df_cus_mean=df_customer.groupby(['day'])['ride_length_s'].mean().reset_index()\n\ndf_cus_max=df_customer.groupby(['day'])['ride_length_s'].max().reset_index()\n\ndf_cus_min=df_customer.groupby(['day'])['ride_length_s'].min().reset_index()","1e0bea7a":"df_sub_mean=df_sub.groupby(['day'])['ride_length_s'].mean().reset_index()\n\n\ndf_sub_max=df_sub.groupby(['day'])['ride_length_s'].max().reset_index()\n\ndf_sub_min=df_sub.groupby(['day'])['ride_length_s'].min().reset_index()\n","3bfa8648":"mean_ride_user = pd.merge(left=df_cus_mean, right=df_sub_mean, left_on='day', right_on='day')","8bd1cc03":"\nmean_ride_user.plot(kind='bar',figsize=(10,10)).set_xticklabels(mean_ride_user['day'])\n\nplt.legend(['Sub','Cus'])\nplt.title('Sub Vs Cus Mean uses')\nplt.ylabel(\"Time (Seconds)\")","861be06c":"max_ride_user = pd.merge(left=df_cus_max, right=df_sub_max, left_on='day', right_on='day')","7b87bcfb":"max_ride_user.plot(kind='bar',figsize=(10,10)).set_xticklabels(max_ride_user['day'])\nplt.legend(['Sub','Cus'])\nplt.title('Sub Vs Cus Max uses')\nplt.ylabel(\"Time (Seconds)\")","3d7ae74f":"min_ride_user = pd.merge(left=df_cus_min, right=df_sub_min, left_on='day', right_on='day')","99f780c3":"min_ride_user.plot(kind='bar',figsize=(10,10)).set_xticklabels(min_ride_user['day'])\nplt.legend(['Sub','Cus'])\nplt.title('Sub Vs Cus Min uses')\nplt.ylabel(\"Time (Seconds)\")","1911e934":"df_user_details_month=df.groupby(['month','usertype']).size()\ndf_user_details_month","e9aa776d":"sns.set_theme(style=\"darkgrid\")\nfig_dims=(20,15)\nfig, ax = plt.subplots(figsize=fig_dims)\ng=sns.countplot(x=df[\"month\"], hue=df['usertype'],data=df,palette=\"PuRd\",ax=ax)\n\n\nfor bar in g.patches:\n    \n  # Using Matplotlib's annotate function and\n  # passing the coordinates where the annotation shall be done\n  # x-coordinate: bar.get_x() + bar.get_width() \/ 2\n  # y-coordinate: bar.get_height()\n  # free space to be left to make graph pleasing: (0, 8)\n  # ha and va stand for the horizontal and vertical alignment\n    g.annotate(format(bar.get_height(), '.2f'), \n                   (bar.get_x() + bar.get_width() \/ 2, \n                    bar.get_height()), ha='center', va='center',\n                   size=12, xytext=(0, 8),\n                   textcoords='offset points',color='black')","7b4c56ec":"# create two sub_data set by usertype \n\n## 1) Dataframe of Subscriber user\n## 2) Dataframe of Customer user\n","c9825fd6":"**Get mean,max and min ride_length from customer dataframe**\n","a749153c":"# Get Month from start date","9a7abbb3":"# Analysis the uses by weekdays of  usertype ","6049676f":"## merge both usertype data by mean,max and min ride_length value and plot ","e3851788":"# Get weekday name from start_date column","18cad6e8":"\n## Load Data ","f341e5cd":"##  In Q3 of  month of July ,August and September both  Sub and Customer usertype are  highest number \n\n---\n\n\n\n---\n\n\n\n---\n\n****","622802ef":"# Get total ride length in seconds","3f1cc354":"# convert start and end date in datetime \n# and create two new diffenrent column","7133ed42":"**Get Mean ,Max and Min ride_length from total_data**","256bc3cc":"**Get mean,max and min ride_length from subscriber dataframe**","00fa1afe":"**From Above Graph Subscriber user don't use service in weekend , might be they use weekedays for daily activities\n but in cutomers user type  opposite reflection they use in weekend compare to other days.******\n\n","e10fc481":"# Random check of trip_id data"}}