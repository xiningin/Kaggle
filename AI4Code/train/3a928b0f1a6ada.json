{"cell_type":{"33a80971":"code","9996dae0":"code","263fb269":"code","96fa0fd1":"code","5d3eeada":"code","8a379674":"code","c8aa0463":"code","368866de":"code","06d0f124":"code","7a9efdb3":"code","3261dab8":"code","0bb0402c":"code","12ac68a8":"code","e02af3a5":"code","b41f1248":"code","559335b4":"code","be3bb9ee":"code","9560f6fc":"code","5b96ecf4":"code","efbbf876":"code","11953499":"code","aeecc203":"code","2f142e01":"code","233d2284":"code","5f5449ba":"code","18753c92":"code","65914cf2":"code","9c5d2ebe":"code","dc9cd01f":"code","ac962caa":"code","a2d6b30f":"code","2f7d1eba":"code","672646a1":"code","63f94a9d":"code","4c4fdb57":"code","30f5c5b6":"code","a2a624f5":"code","492312fe":"code","f3aaaa48":"code","3ae207eb":"code","5e0e656b":"code","8e88915f":"code","d9efed9e":"code","ef988e49":"code","61bf9208":"code","07350d13":"code","ff50bb53":"code","197a65ad":"code","057b7ff7":"code","9ac8f233":"code","f6deb815":"code","1e449a10":"code","f420fb88":"code","d8aa796b":"code","119f724a":"code","bbc9327d":"code","62ae137c":"code","4721f2f7":"code","9e895de8":"code","c72f7103":"code","a0d7c602":"code","91f520c1":"code","316d8202":"code","cefb54da":"code","60bd8f2c":"code","e6ee46bd":"code","fdb213f6":"code","88f3e837":"code","f66ac3f6":"code","f4ee99ad":"code","c22a1e48":"code","36c37749":"code","c4b7b4d8":"code","6d102bc0":"code","3636bb01":"code","b6450b5d":"code","6114ad40":"markdown","9e43a9f2":"markdown","17fdad32":"markdown","9f0133a4":"markdown","c5dc1498":"markdown","7aff4d59":"markdown","ce2a676c":"markdown","8f6bce0a":"markdown","885c0e60":"markdown","a6d2b04b":"markdown","44f136ba":"markdown","da0d247d":"markdown","bf881f2c":"markdown","99a1d7e5":"markdown","928cac73":"markdown","f71d7d9a":"markdown","dcd9a819":"markdown","16e33b05":"markdown","414822ca":"markdown","1e158cf2":"markdown","316120ca":"markdown","1e315327":"markdown","f535fbb2":"markdown"},"source":{"33a80971":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9996dae0":"#visualization libraries\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\nfrom scipy import stats \nfrom sklearn.preprocessing import LabelEncoder\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nfrom sklearn import metrics\nimport math \nfrom math import sqrt\nfrom sklearn.metrics import mean_squared_error\n\nimport sklearn.base as skb\nimport sklearn.metrics as skm\nimport sklearn.model_selection as skms\nimport sklearn.preprocessing as skp\nimport sklearn.linear_model as sklm\n","263fb269":"train=pd.read_csv(\"..\/input\/hackerearth-machine-learning-exhibit-art\/train.csv\")\ntest=pd.read_csv(\"..\/input\/hackerearth-machine-learning-exhibit-art\/test.csv\")","96fa0fd1":"display(train.head())\ndisplay(test.head())","5d3eeada":"#concated two dataframes with an indicator column to analyze with all data\ndf = pd.concat([train.assign(ind=\"train\"),\n                test.assign(ind=\"test\")])\ndf","8a379674":"# there are 7 numeric and 14 categoric features\ndf.info()","c8aa0463":"#Pandas describe() is used to view some basic statistical details like percentile, mean, std etc. of a data frame or a series of numeric values.\n#With describe() function,the count column show us whether there is a significant amount of missing values for each feature. \n# mean, std and IQR of values give information how this data distrubited.\n#As we can see from the Cost column, some variables are negative. We need to examine this.\n\ndf.describe()","368866de":"train.columns[train.isnull().any()]","06d0f124":"test.columns[test.isnull().any()]","7a9efdb3":"df.columns[df.isnull().any()]\n#All missing values in the Cost variable are values that need to be estimated, so we ignore this column.\n","3261dab8":"data_missings=df.filter(['Artist Reputation', 'Height', 'Width', 'Weight', 'Material',\n       'Transport', 'Remote Location'], axis=1)\nmsno.bar(data_missings);","0bb0402c":"#elaboration of information on missing variables\ndef values_table(data_missings):\n    mis_val = data_missings.isnull().sum()\n    mis_val_percent = 100 * data_missings.isnull().sum() \/ len(data_missings)\n    table = pd.concat([ mis_val,mis_val_percent], axis=1)\n    table = table.rename(columns = {  0 :'Missing Values', 1 : '% Missing Value'})\n    table['Data Type'] = data_missings.dtypes\n    table = table[table.iloc[:,1] != 0].sort_values('% Missing Value', ascending=False).round(1)\n    print (\"There are \" + str(df.shape[1]) + \" columns and \" + str(df.shape[0]) + \" rows in the dataset.\\n\"      \n             + str(table.shape[0]) + \" of these columns have missing variables.\")\n    return table\n\nvalues_table(data_missings) ","12ac68a8":"#First  experiment to remove missing values from data\n\n#df=df.dropna()\ndf=df.fillna(0)\ndf.isnull().sum()","e02af3a5":"#checking duplicated values\ndf.duplicated().sum()","b41f1248":"#checking unique values \ndf.nunique()","559335b4":"#this chart shows the distribution of cost values (target variable)\n\nplt.figure(figsize=(10,6))\nsns.distplot(df['Cost'])\nplt.show()","be3bb9ee":"# boxplots for outlier detection\n\ndf_numeric=df.filter(['Artist Reputation', 'Height', 'Width', 'Weight',\n                      'Price Of Sculpture','Base Shipping Price','Cost'],axis=1)\nfig = plt.figure(figsize=(16,16))\nfor i in range(len(df_numeric.columns)):\n    fig.add_subplot(3, 4, i+1)\n    sns.boxplot(y=df_numeric.iloc[:,i])\nplt.tight_layout()\nplt.show()","9560f6fc":"df.loc[:, ['Height', 'Width', 'Weight',\n                      'Price Of Sculpture','Cost']].describe()","5b96ecf4":"df.select_dtypes(include=['category','object']).columns","efbbf876":"# Visualizing with distplot to see how much value is scattered in which class for categorical data\n\ndf_cat=df.filter([ 'Material', 'International',\n       'Express Shipment', 'Installation Included', 'Transport', 'Fragile',\n       'Customer Information', 'Remote Location'],axis=1)\n\nfig = plt.figure(figsize=(15,30))\nfor i in range(len(df_cat.columns)):\n    fig.add_subplot(9, 2, i+1)\n    df_cat.iloc[:,i].hist(color='orange')\n    plt.xlabel(df_cat.columns[i])\nplt.show();","11953499":"#numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n#df_num=df.select_dtypes(include=numerics)\n#sns.pairplot(df_num);","aeecc203":"plt.figure(figsize=(20,30))\nfor num,col in enumerate(df.select_dtypes(exclude=['object']).columns,1):\n    plt.subplot(8, 5, num)\n    sns.distplot(df[col])\n    plt.tight_layout()\nplt.show()","2f142e01":"#pie chart of transport-related features \n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2,figsize=(10, 9))\n\nax1.pie(df_cat['Transport'].value_counts(), explode=(0.1, 0.1, 0.1) , \n        labels=df_cat['Transport'].value_counts().index, autopct='%1.1f%%',\n        shadow=True, startangle=90,colors=['orange','pink','green'])\nax1.axis('equal') \nax2.pie(df_cat['International'].value_counts(), explode=(0.1, 0.1), \n        labels=df_cat['International'].value_counts().index, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax2.axis('equal') \nax3.pie(df_cat['Remote Location'].value_counts(), explode=(0.1, 0.1), \n        labels=df_cat['Remote Location'].value_counts().index, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax3.axis('equal') \nax4.pie(df_cat['Express Shipment'].value_counts(), explode=(0.1, 0.1), \n        labels=df_cat['Express Shipment'].value_counts().index, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax4.axis('equal') \nax1.title.set_text('Transportation')\nax3.title.set_text('Remote Location')\nax2.title.set_text('International')\nax4.title.set_text('Express Shipment')\nplt.show()","233d2284":"df_2=df.groupby(['International','Remote Location'],\n                as_index=False)[\"Base Shipping Price\"].sum()\ndf_2","5f5449ba":"df_1=df.groupby(['Transport','International'],\n                as_index=False)[\"Base Shipping Price\"].sum()\na=df_1.pivot(index='Transport',values='Base Shipping Price',\n           columns=['International']).plot(kind='barh', figsize=(12,6),cmap=\"icefire\")\nplt.title('Uluslararas\u0131 Yollara ve Ta\u015f\u0131ma T\u00fcr\u00fcne G\u00f6re Toplam Nakliye Bedelleri', fontsize=14)\nfor p in a.patches:\n    sum_ =  '{:.1f}'.format(p.get_width())\n    x,y  = p.get_height() + p.get_width()-0.5, p.get_y()+0.1\n    a.annotate(sum_, (x, y),ha='center')\nplt.show()","18753c92":"df.columns","65914cf2":"# create new feature (state) from existing column (customer location)\ndf.insert(loc=14, column='State', value=df['Customer Location'].map(lambda x:x.split()[-2]))\ndf.drop('Customer Location', inplace=True, axis=1)\ndf.head()","9c5d2ebe":"plt.figure(figsize=(10, 20))\na=sns.countplot(y='State', data=df,palette=\"Accent\",order = df['State'].value_counts().index);\nplt.title('Eyaletlere G\u00f6re Toplam Teslimat Say\u0131lar\u0131', fontsize=14)\nfor p in a.patches:\n    count = p.get_width()\n    x, y = p.get_x()+10 + p.get_width(), p.get_y()+0.5\n    a.annotate(count, (x, y), ha='center')\nplt.show()","dc9cd01f":"plt.figure(figsize=(10, 20))\na=sns.countplot(y='State', data=df,hue='International',\n                palette=\"Set3\",order=df['State'].value_counts().index)\nplt.title('Uluslararas\u0131 veya Ulusi\u00e7i Teslimata G\u00f6re Eyaletler Baz\u0131nda Teslimat Say\u0131lar\u0131', fontsize=14)\nfor p in a.patches:\n    count = p.get_width()\n    x, y = p.get_x()+2 + p.get_width(), p.get_y()+0.5\n    a.annotate(count, (x, y), ha='center')\nplt.show()","ac962caa":"plt.figure(figsize=(10, 20))\na=sns.countplot(y='State', data=df,hue='Remote Location',\n                palette=\"Set2\",order=df['State'].value_counts().index)\nplt.title('Uzak yada Yak\u0131n Mesafe Teslimata G\u00f6re Eyalet Baz\u0131nda Teslimat Say\u0131lar\u0131', fontsize=14)\nfor p in a.patches:\n    count = p.get_width()\n    x, y = p.get_x()+5 + p.get_width(), p.get_y()+0.5\n    a.annotate(count, (x, y), ha='center')\nplt.show()","a2d6b30f":"plt.figure(figsize=(10, 6))\na=sns.countplot(x='Material', data=df,palette=\"PiYG_r\");\n\nplt.title('Sat\u0131lan Heykel Say\u0131lar\u0131', fontsize=14)\nfor p in a.patches:\n    count = p.get_height()\n    x, y = p.get_x() + p.get_width()-0.2, p.get_y()+1200\n    a.annotate(count, (x, y), ha='right')\nplt.show()","2f7d1eba":"plt.figure(figsize=(10, 6))\na=sns.countplot(x='Material', data=df[df['Fragile']=='Yes'],palette=\"Set3\");\nplt.title('Teslimattaki K\u0131r\u0131lgan Olan Heykellerin Say\u0131s\u0131', fontsize=14)\nfor p in a.patches:\n    count = p.get_height()\n    x, y = p.get_x() + p.get_width()-0.3, p.get_y()+50\n    a.annotate(count, (x, y), ha='right')\nplt.show()","672646a1":"plt.figure(figsize=(16, 6))\nsns.scatterplot(\n    data=df, x=\"Price Of Sculpture\", y=\"Weight\", hue=\"Material\", size=\"Material\",\n    sizes=(20, 200), legend=\"full\")\nplt.title('Heykellerin Fiyat\u0131 ve A\u011f\u0131rl\u0131\u011f\u0131na G\u00f6re T\u00fcrlerinin Da\u011f\u0131l\u0131m\u0131', fontsize=14)\nplt.show();","63f94a9d":"df.insert(loc=3, column='Sculpture Size', value=df['Height']*df['Width'])\n\ndf.head()","4c4fdb57":"plt.figure(figsize=(16, 6))\nsns.scatterplot(\n    data=df, x=\"Price Of Sculpture\", y=\"Sculpture Size\", hue=\"Material\", size=\"Material\",\n    sizes=(20, 200), legend=\"full\");\nplt.title('Heykellerin Fiyat\u0131 ve Boyutuna G\u00f6re T\u00fcrlerinin Da\u011f\u0131l\u0131m\u0131', fontsize=14)\nplt.show();","30f5c5b6":"#Dividing Artist Reputation column to four groups \nbins = [0, 0.25,0.5,0.75, 1]\nlabels = ['Not enough well-known', 'Enough well-known','Well-known','Extremely well-known']\ndf.insert(loc=2, column='Artist Reputation Type', value=pd.cut(df[\"Artist Reputation\"], bins, labels = labels,include_lowest = True))\n\ndf.head()","a2a624f5":"plt.figure(figsize=(10, 6))\ndf_2=df.groupby(['Artist Reputation Type'],\n                as_index=False)[\"Artist Name\"].count()\na=sns.barplot(y='Artist Reputation Type',x='Artist Name', data=df_2,palette=\"PiYG_r\",\n              order=df['Artist Reputation Type'].value_counts().index);\n\n\nplt.title('\u00dcnlerine G\u00f6re Sanat\u00e7\u0131 Say\u0131lar\u0131', fontsize=14)\nfor p in a.patches:\n    count = p.get_width()\n    x, y = p.get_x()+100 + p.get_width()+25, p.get_y()+0.45\n    a.annotate(count, (x, y), ha='right')\nplt.show()","492312fe":"plt.figure(figsize=(20, 8))\nsns.scatterplot(\n    data=df, x=\"Price Of Sculpture\",y='Cost', hue=\"Artist Reputation Type\", size=\"Artist Reputation Type\",\n    sizes=(20, 200), legend=\"full\")\nplt.title('Heykellerin Fiyat\u0131 ve Maliyetine G\u00f6re Sanat\u00e7\u0131lar\u0131n \u00dcnlerinin Da\u011f\u0131l\u0131m\u0131', fontsize=14)\nplt.show()","f3aaaa48":"#pie chart of customer-related feature\n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nfig, ax1 = plt.subplots(figsize=(8, 5))\n\nax1.pie(df['Customer Information'].value_counts(), explode=(0.1, 0.1) , \n        labels=df['Customer Information'].value_counts().index, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal') \n\n\nax1.title.set_text('Customer Type')\n\nplt.show()","3ae207eb":"df.pivot_table(index=[\"Artist Reputation Type\"],columns=[\"Customer Information\"],aggfunc={\"Customer Id\":\"count\"},fill_value=0)\n","5e0e656b":"df.columns","8e88915f":"#converting dates to datetime format\ndf['Scheduled Date'] = pd.to_datetime(df['Scheduled Date'])\ndf['Delivery Date'] = pd.to_datetime(df['Delivery Date'])\n\n# checking if products are delivered on time\ndf.insert(loc=20, column='ScheduleDiff', value=(df['Scheduled Date']-df['Delivery Date']).map(lambda x:str(x).split()[0]))\ndf['ScheduleDiff'] = pd.to_numeric(df['ScheduleDiff'])\n\ndf.head()","d9efed9e":"df_3=df.groupby('Delivery Date')[\"Cost\"].sum().reset_index()\ndf_4=df.groupby('Scheduled Date')[\"Cost\"].sum().reset_index()\ndf_4","ef988e49":"import plotly.express as px \nfig = px.line(df_3, x='Delivery Date', y='Cost')\nfig.show()","61bf9208":"df.insert(loc=18, column='Year_s', value=df['Scheduled Date'].dt.year)\ndf.insert(loc=19, column='Month_s', value=df['Scheduled Date'].dt.month)\ndf.insert(loc=20, column='Day_s', value=df['Scheduled Date'].dt.day)\n\ndf.insert(loc=21, column='Year', value=df['Delivery Date'].dt.year)\ndf.insert(loc=22, column='Month', value=df['Delivery Date'].dt.month)\ndf.insert(loc=23, column='Day', value=df['Delivery Date'].dt.day)","07350d13":"df.head()","ff50bb53":"df_5=df.groupby(['Month','Year'], as_index=False)[\"Customer Id\"].count()\ndf_6=df.groupby(['Month_s','Year_s'], as_index=False)[\"Customer Id\"].count()\ndisplay(df_5.head(),df_6.head())","197a65ad":"plt.figure(figsize=(15, 8))\n\nsns.lineplot(data=df_5, x=\"Year\", y=\"Customer Id\",hue='Month',style=\"Month\",palette='gist_stern_r')\n\nplt.title(\"Aylara g\u00f6re 2014-2019 Y\u0131llar\u0131 Teslimat Say\u0131s\u0131\")\nplt.show();","057b7ff7":"df.ScheduleDiff.value_counts()","9ac8f233":"plt.figure(figsize=(12, 5))\na=sns.countplot(x='ScheduleDiff', data=df,palette=\"Purples_r\");\n\nplt.title('Gecikmeli,Erken ve Zaman\u0131nda Teslimat Say\u0131lar\u0131', fontsize=14)\nfor p in a.patches:\n    count = p.get_height()\n    x, y = p.get_x() + p.get_width()-0.2, p.get_y()+120,\n    a.annotate(count, (x, y), ha='right')\nplt.show()","f6deb815":"df_6=df[(df['ScheduleDiff'] < 0 )]\ndf_6.pivot_table(index=[\"Remote Location\",\"International\",\"Transport\"],columns=[\"ScheduleDiff\"],aggfunc={\"Customer Id\":\"count\"})","1e449a10":"cor = df.corr()\nf, ax = plt.subplots(figsize = (10,10))\nsns.heatmap(cor, fmt=\".2f\", linewidths=0.5, ax=ax,annot=True);","f420fb88":"#drop unneccasary columns\ndf_new = df.drop(columns=['Customer Id','Scheduled Date','Delivery Date'], axis=1)\n\n#filtered categorical data for label encoding\ndf_new.select_dtypes(include=['category','object']).dtypes","d8aa796b":"enc = LabelEncoder()\ndef FunLabelEncoder(df_new):\n    for c in df_new.select_dtypes(include=['category','object']).columns:\n            enc.fit(df_new[c].astype(str))\n            df_new[c] = enc.transform(df_new[c].astype(str))\n    return df_new","119f724a":"df_new1 = FunLabelEncoder(df_new)\ndf_new1.info()","bbc9327d":"#test data\ndf_test=df_new1[(df_new1['ind'] ==0)]\n#train data\ndf_train=df_new1[(df_new1['ind'] ==1)]\ndisplay(df_train.head(),df_test.head())","62ae137c":"df_train.shape,df_test.shape","4721f2f7":"#drop unneccasary columns\ndf_train = df_train.drop(columns=['ind'], axis=1)\ndf_test = df_test.drop(columns=['ind'], axis=1)","9e895de8":"df_train.shape,df_test.shape","c72f7103":"df_train['Cost'] = np.log1p(abs((df_train['Cost'])))","a0d7c602":"import random\nseed = 12\nnp.random.seed(seed)","91f520c1":"# shuffle samples\ndf_shuffle = df_train.sample(frac=1, random_state=seed).reset_index(drop=True)\n\ny= df_shuffle[\"Cost\"]\nX = df_shuffle.drop(['Cost'], axis=1)\n\n","316d8202":"df_shuffle_test = df_test.sample(frac=1, random_state=seed).reset_index(drop=True)\n\nX_test=df_shuffle_test.drop(['Cost'], axis=1)\nX_test","cefb54da":"\nscaler = skp.MinMaxScaler()\n\n\n# apply scaling to all numerical variables \nX= pd.DataFrame(scaler.fit_transform(X), columns=X.columns)\n\n# scale val data with transform()\nX_test = pd.DataFrame(scaler.transform(X_test), columns=X.columns)\n\n# view sample data\nX.describe()","60bd8f2c":"X.shape,y.shape","e6ee46bd":"kf =KFold(n_splits=10, shuffle=True, random_state=1000) \n\noof_preds = np.zeros(X.shape[0])\nsub_preds = np.zeros(X_test.shape[0])\n\nfor n_fold, (train_index, val_index) in enumerate(kf.split(X, y)):\n    print(\"fold: \",n_fold)\n    \n    X_train, X_val = X.loc[train_index], X.loc[val_index]\n    y_train, y_val = y.loc[train_index], y.loc[val_index]\n    \n    model = lgb.LGBMRegressor(max_depth= 7, num_leaves=11,\n                              n_estimators=200,colsample_bytree=0.9,subsample=0.8)\n    \n    model.fit(X_train,y_train,\n              eval_set=[(X_train, y_train), (X_val, y_val)],eval_metric='rmse',\n              verbose=0,early_stopping_rounds=100)\n    \n    oof_preds[val_index] = model.predict(X_val, num_iteration=model.best_iteration_)\n    sub_preds += model.predict(X_test,\n                                     num_iteration=model.best_iteration_) \/ kf.n_splits\n    print(f\"Fold {n_fold} RMSE: {sqrt(mean_squared_error(y_val, oof_preds[val_index]))}\")","fdb213f6":"rmse = sqrt(mean_squared_error(y, oof_preds))\nprint(\"RMSE: \", rmse)\n","88f3e837":"oof_preds.shape","f66ac3f6":"sub_preds.shape","f4ee99ad":"y_val.shape,y.shape","c22a1e48":"rmse = sqrt(mean_squared_error(y, s))\nprint(\"RMSE: \", rmse)","36c37749":"\n\nrmse = sqrt(mean_squared_error(y, ))\nprint(\"RMSE: \", rmse)","c4b7b4d8":"from sklearn.metrics import r2_score\nr2_lgbm = r2_score(y, oof_preds)\nprint('r2 score for perfect model is', r2_lgbm)","6d102bc0":"sub_preds=np.exp(sub_preds)","3636bb01":"sub_preds","b6450b5d":"sub1=pd.DataFrame({\"Customer Id\":df[df['ind'] =='test']['Customer Id'],\"Cost\":sub_preds})\nsub1","6114ad40":"# Visualization of customer-related features","9e43a9f2":"In this project, I wanted to work on the sale of various sculptures from all over the world. The aim was to predict the cost of delivering these sculptures to customers, taking into account shipping modes and similar features, since artworks are unlike other logistics products.Apart from the estimation part, I performed the exploratory data analysis part.\n\nThe reason I chose this cost estimate data is because it is related to artworks unlike other cost estimation data. There are 6500 observations in the training set and 3500 observations in the test set, and there are 20 features in total. Link : https:\/\/www.kaggle.com\/oossiiris\/hackerearth-machine-learning-exhibit-art\n\n**The columns provided in the dataset are as follows:**\n\nCustomer Id : Id of customers\n\nArtist Name : Creators of sculptures (name, surname)\n\nArtist Reputation : Reputation of artists (between 0 to 1)\n\nHeight :Height of sculptures\n\nWidth :Width of sculptures\n\nWeight :Weight of sculptures\n\nMaterial :Material type of sculptures \n\nPrice Of Sculpture \n\nBase Shipping Price \n\nInternational :International or not (yes,no)\n\nExpress Shipment :Express Shipment or not (yes,no)\n\nInstallation Included :Installation Included or not (yes,no)\n\nTransport :Transportation types\n\nFragile :Fragile or not (yes,no)\n\nCustomer Information :Type of customer (wealthy or working class)\n\nRemote Location :Remote location or not (yes,no)\n\nScheduled Date \n\nDelivery Date \n\nCustomer Location : Adress of the location\n\nCost ","17fdad32":"Here, I looked at how the reasons for delay were distributed according to long distance or transportation type. As we saw at the beginning, there was always a higher number of roadways transportation at close range. As can be seen here, a large number of delays have occurred in road transport at close distances. \nThe reason for delays may be very different reasons. It probably be due to the operation rather than the effect of distance and transportation type.","9f0133a4":"# **FUTURE WORKS**","c5dc1498":"# Analysis of Shipment Costs of Artworks","7aff4d59":"# Visualization of transport-related features","ce2a676c":"# Preprocessing and Prediction Part","8f6bce0a":"There are too many missing values in many features, removing them from the dataset will affect the performance of the prediction. So I think they can fill with appropriate methods. But first, the performance of the model needs to be tested after dropping missing values from the dataset.","885c0e60":"Most sales are made by customers belonging to the working class.\n\nHere we can look at which class of customers prefer which artist recognition level.\n","a6d2b04b":"As we can see most transport appears to be done in close proximity within the nation by roadways.From here :\n\n-We can look at the total  shipping prices of transfers by grouping different kinds of features (we can look at which location, which ways, which country, etc.)\n\n-Does shipping price affected by long distance and international transport as expected?\n","44f136ba":"This work will continue with further analysis. I would like to observe the reasons for the delays or early deliveries with more details on the date part and their cost effects. At the same time, I want to work on the machine learning part and estimate the cost. Then I can try different methods such as time analysis, artificial neural networks and etc.","da0d247d":"As expected from the graph, more costs emerged in national rather than international in roadway transportation  , and in waterway transportation, more costs emerged in international transportation. These may be due to customer locations, but also sales policy.","bf881f2c":"# Missing Values","99a1d7e5":"# Visualization of product-related features","928cac73":"As it can be understood from these graphics, some of the transfer regions (states) pass as long distance and international, but also as close distance and domestic. The conclusion that can be drawn from this is that the locations where the transfers are made may vary. This is a factor that will affect the cost. Therefore, I think that the places where the transfers originate to be transmitted should also be included in the data.","f71d7d9a":"As we can see here, there are discrete values for some variables. However, these values can be ignored as they are values such as product weight, height, width and price. After looking at the effects on the model, outliers can be removed or changed from the dataset. But it needs to be examined in detail.","dcd9a819":"With the state column, I want to see in which locations the transfers are more distributed.","16e33b05":"Most transfers have been to these states (AP (Andhra Pradesh,India), AA (Armed Forces America?),AE (Armed Forces Europe?))\n\nFrom this point of view, we can see how the costs change on the basis of which country. We can see which artist has made more sales in which state. We can create a customer portfolio according to the states.","414822ca":"Sculpture Size positive correlated with Height and Width of the sculpture as expected with ratio 0.85 and 0.94.Also Costa and Price of sculptures are positive correlated with 0.48 ratio.So i can drop columns which are scultures height and width because they are highly correlated with size column.","1e158cf2":"Here, the number of well-known artists has the highest value according to the artist's reputation level, followed by the number of slightly less well-known artists.So let see how artists' reputations and price of their sculptures affect the cost.","316120ca":"Delays and early deliveries vary between 1 and 4 on a daily basis and 2051 orders were delivered on time.Minus ones show delays.So from here, I will group and visualize on which days these deliveries are delayed or early delivered.And try to figure out what caused for these differencies.","1e315327":"# Descriptive Statistics","f535fbb2":"# Visualization"}}