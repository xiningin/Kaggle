{"cell_type":{"e1b11deb":"code","1b01a1b0":"code","6214a6a4":"code","2e0bd677":"code","5a92b531":"code","05ad4e82":"code","7cb1bf8f":"code","0cbc3e2a":"code","5866e228":"code","536e9103":"code","18d8eeae":"code","abc3c5fb":"code","9b6a07a0":"code","5da2e566":"code","1806c57a":"code","80b646b6":"code","88ee79e0":"code","0df08c57":"code","66aa6b27":"code","b5713068":"code","2df0d4cd":"code","5fe44060":"code","a802a31e":"markdown","495946bc":"markdown","ab463495":"markdown","19df7247":"markdown"},"source":{"e1b11deb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings('ignore')","1b01a1b0":"df = pd.read_csv('\/kaggle\/input\/friends-series-dataset\/friends_episodes_v2.csv')\ndf.head(5)","6214a6a4":"df.query('Season==1 and Director==\"James Burrows\"')","2e0bd677":"df.query('(Season==1 or Director==\"James Burrows\") & (Stars > 8.5)')","5a92b531":"df[((df['Season']==1) | (df['Director']=='James Burrows')) & (df['Stars']>8.5)] #el mateix que abans","05ad4e82":"df2 = df.groupby('Director')[['Stars','Votes']].sum()\ndf2.sort_values(by='Stars',ascending=False)","7cb1bf8f":"df.groupby('Director').count()","0cbc3e2a":"#dues columnes noves amb numero de episodis per director i stars \/ num de programes fets\ndf2['Ep_totals'] = df['Director'].value_counts()\ndf2['Ratting_stars'] = df2['Stars'] \/ df2['Ep_totals'] #busquem la mitjana per cada episodi\ndf2['Ratting_stars'] = df2['Ratting_stars'].round(2)\ndf2['Max_puntuacio'] = df.groupby(['Director'], sort=False)['Stars'].max() #agafem la maxima puntacio dels seus episodis\ndf2.sort_values(by='Ratting_stars',ascending=False)\n","5866e228":"%config InlineBackend.figure_format='retina'\np = df2.plot.bar(y ='Ratting_stars',figsize=(14,4), alpha=0.5)","536e9103":"#escalar la columa de 0-1\nfrom sklearn.preprocessing import MinMaxScaler\ndf2[['Ratting_stars','Votes']] = MinMaxScaler().fit_transform(df2[['Ratting_stars','Votes']])\n\n%config InlineBackend.figure_format='retina'\np = df2.plot.bar(y ='Ratting_stars',figsize=(14,4), alpha=0.5, grid=True, title=\"Average Stars for each Director\")","18d8eeae":"#set limits for a graph contrary to normalize\ng = df.groupby('Season')['Stars'].mean()\np = g.plot.bar(y ='Stars',figsize=(14,4), alpha=0.5, grid=True, fontsize= 10, title=\"Average Stars for each season\")\np = p.set_ylim(8.2,8.8)","abc3c5fb":"#top ten episodes\ndf3 = df[['Episode_Title','Stars']].sort_values('Stars', ascending=False).head(10).reset_index(drop=True)\ndf3.Episode_Title[2] = 'The Last One: Part 2'\n\np = df3.plot.barh(y ='Stars',x='Episode_Title',figsize=(9,4), alpha=0.5, grid=True, title=\"Top ten episodes\")\np = p.set_xlim(9,10)","9b6a07a0":"for key, value in df['Summary'].iteritems(): \n    pass","5da2e566":"#iterate and append to pandas new dataframe, busquem on surt la paraula \"Janice\" i creem una nova taula amb el que ens interesi\nt = pd.DataFrame(columns=['Key', 'Season', 'Stars'])\ncolumns = list(t)\n\nfor key, value in df['Summary'].iteritems(): \n    if \"Janice\" in value:\n        t.loc[key] = [key ,df['Season'][key], df['Stars'][key]]\n\nt.reset_index(drop = True)","1806c57a":"#iterate and append to pandas new dataframe, busquem on surt la paraula \"Janice\" i creem una nova taula amb el que ens interesi\nt = pd.DataFrame(columns=['Key', 'Season', 'Stars', 'Prota'])\ncolumns = list(t)\n\nfor key, value in df['Summary'].iteritems(): \n    if \"Janice\" in value:\n        t.loc[key] = [key ,df['Season'][key], df['Stars'][key], 'Janice']\n    if \"pregnant\" in value:\n        t.loc[key] = [key ,df['Season'][key], df['Stars'][key], 'pregnant']\n    if \"Richard\" in value:\n        t.loc[key] = [key ,df['Season'][key], df['Stars'][key], 'Richard']\n\nt.reset_index(drop = True)","80b646b6":"t = t.groupby('Prota')['Stars'].mean()\np = t.plot.bar(y ='Stars',figsize=(7,3), alpha=0.5, grid=True)","88ee79e0":"#llista de totes les paraules en summary segons la ocurrencia\nlist_word = df.Summary.str.split(expand=True).stack().value_counts()\nlist_word = list_word.drop(labels = ['to', 'and', 'a', 'the', 'is', 'for', 'her', 'his', 'with', 'an', 'their', 'when', 'of','in','get','at','he','up',])  \nlist_word[0:20]","0df08c57":"#buscar les paraules de mes de 4 lletres\nwords4 = df['Summary'].str.findall('\\w{4,}').str.join(' ')\nwords4[0:10]","66aa6b27":"words4b = words4.str.split(expand=True).stack().value_counts()\nwords4b[0:20]","b5713068":"type(words4)","2df0d4cd":"#convert a list to whole text\nwords4_list = words4.tolist()\nwords4 = [\"%s\" % item for item in words4_list]\nwholetext = ' '.join(words4)\nstr1[0:300]","5fe44060":"from wordcloud import WordCloud, STOPWORDS\n\nwordcloud_spam = WordCloud(background_color=\"white\", stopwords = set(STOPWORDS)).generate(wholetext)\n\n# Lines 2 - 5\nplt.figure(figsize = (20,20))\nplt.imshow(wordcloud_spam, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","a802a31e":"# Query","495946bc":"# Groupby","ab463495":"# Itertate column","19df7247":"# Normalize Column and Plot"}}