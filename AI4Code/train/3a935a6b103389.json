{"cell_type":{"c344e22b":"code","c836a00e":"code","068e7e61":"code","c7e5dfdd":"code","38b1841b":"code","4567c867":"code","f7ba0a63":"code","1a07b107":"code","bb2a9ad3":"code","1687fa66":"code","aa9334aa":"code","dab8f38c":"code","9a9e6ede":"code","64041778":"code","3bf2145b":"code","082be0dc":"code","657f228e":"code","24ed4485":"code","78ed4887":"code","992dce09":"code","be7469ca":"code","604ca424":"code","f0c64b8f":"code","2259e3aa":"code","3e76a9c6":"code","b6f13bea":"code","5d5d06cb":"code","35a78003":"code","54ca9ff7":"code","a510326c":"code","1948e5a7":"code","0068389e":"code","c76c32a8":"code","39a37871":"code","5b20269d":"code","aa63c39a":"code","04d4de90":"code","4e7ed857":"code","2b65213c":"markdown","7a8f351a":"markdown","84cc655a":"markdown","e274d0bb":"markdown","1d0f80d4":"markdown","3762524d":"markdown","337388fd":"markdown","4bda6bf1":"markdown","45b368b7":"markdown","50308762":"markdown","4489f977":"markdown","bc650614":"markdown","8121ea41":"markdown","73c8f7cd":"markdown","b3a1769c":"markdown","d40b1359":"markdown","355f4504":"markdown","8c5425db":"markdown"},"source":{"c344e22b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c836a00e":"df = pd.read_csv(\"..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")","068e7e61":"df.head()\n#Top 5 rows from the dataset","c7e5dfdd":"df.tail()\n#Bottom 5 rows from the dataset","38b1841b":"#Check null values\ndf.isnull()","4567c867":"#Count of the each column null values\ndf.isnull().sum()","f7ba0a63":"import seaborn as sns","1a07b107":"#heatmap\nsns.heatmap(df.isnull())","bb2a9ad3":"#Count plot of sex attribute\nsns.countplot(df['output'])\nplt.xlabel(\"Sex (0 = female, 1= male)\")\nplt.show()","1687fa66":"#Bar plot for the age Attribute\nsns.barplot(df['age'],df['output'])","aa9334aa":"df.groupby('output').mean()","dab8f38c":"df.output.value_counts()","9a9e6ede":"pd.crosstab(df.age,df.output).plot(kind=\"bar\",figsize=(20,6))\nplt.title('Heart Disease Frequency for Ages')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.savefig('heartDiseaseAndAges.png')\nplt.show()","64041778":"#Correlation for the whole dataset \nfig = plt.gcf()\nfig.set_size_inches(15, 8)\nsns.heatmap(df.corr(), annot = True)\nplt.show()","3bf2145b":"continuous_features = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak', 'output']\nnumber_of_columns = len(continuous_features)\nnumber_of_rows = 5\nplt.figure(figsize=(23, 18))\n\nfor i, f in enumerate(continuous_features):\n    plt.subplot(number_of_rows + 1, number_of_columns, i + 1)\n    sns.distplot(df[f], kde=True)","082be0dc":"countFemale = len(df[df.sex == 0])\ncountMale = len(df[df.sex == 1])\nprint(\"Percentage of Female Patients: {:.2f}%\".format((countFemale \/ (len(df.sex))*100)))\nprint(\"Percentage of Male Patients: {:.2f}%\".format((countMale \/ (len(df.sex))*100)))","657f228e":"countNoDisease = len(df[df.output == 0])\ncountHaveDisease = len(df[df.output == 1])\nprint(\"Percentage of Patients Haven't Heart Disease: {:.2f}%\".format((countNoDisease \/ (len(df.output))*100)))\nprint(\"Percentage of Patients Have Heart Disease: {:.2f}%\".format((countHaveDisease \/ (len(df.output))*100)))","24ed4485":"pd.crosstab(df.sex,df.output).plot(kind=\"bar\",figsize=(15,6),color=['#1CA53B','#AA1111' ])\nplt.title('Heart Disease Frequency for Sex')\nplt.xlabel('Sex (0 = Female, 1 = Male)')\nplt.xticks(rotation=0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency')\nplt.show()","78ed4887":"plt.scatter(x=df.age[df.output==1], y=df.thalachh[(df.output==1)], c=\"red\")\nplt.scatter(x=df.age[df.output==0], y=df.thalachh[(df.output==0)])\nplt.legend([\"Disease\", \"Not Disease\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","992dce09":"pd.crosstab(df.cp,df.output).plot(kind=\"bar\",figsize=(15,6),color=['#11A5AA','#AA1190' ])\nplt.title('Heart Disease Frequency According To Chest Pain Type')\nplt.xlabel('Chest Pain Type')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","be7469ca":"X=df.drop([\"output\"],axis=1)\nX","604ca424":"Y=df[[\"output\"]]\nY","f0c64b8f":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.3)","2259e3aa":"X_train","3e76a9c6":"X_test","b6f13bea":"y_train","5d5d06cb":"y_test","35a78003":"from sklearn.ensemble import RandomForestClassifier\nk=RandomForestClassifier()\nk.fit(X_train,y_train)\nRandomForest=k.predict(X_test)\nRandomForest","54ca9ff7":"y_test","a510326c":"from sklearn.tree import DecisionTreeClassifier\nr=DecisionTreeClassifier()\nr.fit(X_train,y_train)\nDecisionTree=r.predict(X_test)\nDecisionTree","1948e5a7":"y_test","0068389e":"from sklearn.naive_bayes import GaussianNB\nm=GaussianNB()\nm.fit(X_train,y_train)\nNavieBayes=m.predict(X_test)\nNavieBayes","c76c32a8":"y_test","39a37871":"from sklearn.neighbors import KNeighborsClassifier\nn=KNeighborsClassifier()\nn.fit(X_train,y_train)\nKneighbors=n.predict(X_test)\nKneighbors","5b20269d":"y_test","aa63c39a":"from sklearn.svm import SVC\ns=SVC()\ns.fit(X_train,y_train)\nsvc=s.predict(X_test)\nsvc\n","04d4de90":"y_test ","4e7ed857":"from sklearn.metrics import accuracy_score\nprint(\"Random Forest Regressor:      \",accuracy_score(RandomForest,y_test))\nprint(\" Navie Bayes Classifier:      \",accuracy_score(NavieBayes,y_test))\nprint(\"Decision Tree Classifier:     \",accuracy_score(DecisionTree,y_test))\nprint(\"Support Vector Classifier:    \",accuracy_score(svc,y_test))\nprint(\"K Nearest Neighbor:           \",accuracy_score(Kneighbors,y_test))","2b65213c":"# **3.NavieBayes Classifier**","7a8f351a":"# **N SUDHEER KUMAR** ","84cc655a":"# **Models Evaluation**","e274d0bb":"# **Context**\nThis data set dates from 1988 and consists of four databases: Cleveland, Hungary, Switzerland, and Long Beach V. It contains 76 attributes, including the predicted attribute, but all published experiments refer to using a subset of 14 of them. The \"output\" field refers to the presence of heart disease in the patient. It is integer valued 0 = no disease and 1 = disease.","1d0f80d4":"# **5.Support Vector Machine**","3762524d":"# **Exploratory Data Analysis**","337388fd":"**Distributions**","4bda6bf1":"**Extract Independent and Target Variables**","45b368b7":"# **2.Decision Tree Classifier**","50308762":"<h1 align=center><font size=\"6\"> HEART DISEASE PREDICTION <\/font><\/h1>","4489f977":"# **Conclusion**\n * Navie Bayes Classifier will be chosen as the best model for this problem\n * The best accuracy has been obtained as 83%","bc650614":"# **1.Random Forest Classifier**","8121ea41":"# **Attributes Description**\n\n* Age\n* Gender\n* chest pain type (4 values)\n* resting blood pressure\n* serum cholestoral in mg\/dl\n* fasting blood sugar > 120 mg\/dl\n* resting electrocardiographic results (values 0,1,2)\n* maximum heart rate achieved\n* exercise induced angina\n* oldpeak = ST depression induced by exercise relative to rest\n* the slope of the peak exercise ST segment\n* number of major vessels (0-3) colored by floursopy\n* thal: 0 = normal; 1 = fixed defect; 2 = reversable defect\n","73c8f7cd":"# **Data Pre Processing**","b3a1769c":"# **Intorduction**\nWorld Health Organization has estimated 12 million deaths occur worldwide, every year due to Heart diseases. Half the deaths in the United States and other developed countries are due to cardio vascular diseases. The early prognosis of cardiovascular diseases can aid in making decisions on lifestyle changes in high risk patients and in turn reduce the complications. This research intends to pinpoint the most relevant\/risk factors of heart disease as well as predict the overall risk using the best accuracy classification model.","d40b1359":"# **Building and Training the Models**","355f4504":"# **4.K Neighbor Classifier**","8c5425db":"**Splitting the Data into Train and Test set**"}}