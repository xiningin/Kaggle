{"cell_type":{"98c3c6f5":"code","734e3a83":"code","4745fe3a":"code","bc7569c8":"code","23652b76":"code","1bf66791":"code","89f11351":"code","2214497b":"code","3131f046":"code","23aaa645":"code","22998f83":"code","6d62bb82":"code","81d56af4":"code","c90281cc":"code","df08bcb8":"code","95e6bec8":"code","08396518":"code","9fddced4":"code","9310ff94":"code","857bb81d":"code","33b8836d":"code","b3162005":"code","9d48be7c":"code","20462a94":"code","10cf89be":"code","452f84e7":"code","b2cb503e":"code","1e0ee16d":"code","5177751d":"code","37d4e03e":"code","634b2bb7":"code","da18aaa8":"code","c10a184b":"code","17c27820":"code","85b95efd":"code","e3762d9c":"code","6b2c92b2":"code","46677a40":"code","4bdb1f66":"code","6aae096a":"code","b3d95d9b":"code","15a0afc5":"code","e27cfd9a":"code","9c7f78d5":"code","13902045":"code","4a7d6d68":"code","21aa993e":"code","eb4da7fe":"code","c043533d":"code","91f968d3":"code","184987d1":"code","21d36836":"markdown","ca8856d4":"markdown","0a7fb488":"markdown","b5785d47":"markdown","2408d608":"markdown","895d0ca6":"markdown","38a7a367":"markdown","855adce7":"markdown","050a9772":"markdown","bc375cb8":"markdown","fb601096":"markdown","df397c38":"markdown","d1e24532":"markdown","d01f377d":"markdown","e80c4f1f":"markdown","9c035dbf":"markdown","83b00c12":"markdown","1d624a0f":"markdown","3b08a089":"markdown","b1ba87d4":"markdown","1928f784":"markdown","bdaa3b60":"markdown","3a81dd43":"markdown","bbf29185":"markdown","bf4c6a44":"markdown","78fe9f95":"markdown","b27589cc":"markdown"},"source":{"98c3c6f5":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import register_matplotlib_converters\nfrom pylab import rcParams\nsns.set_style(\"darkgrid\")\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","734e3a83":"df = pd.read_csv(\"..\/input\/london-bike-sharing-dataset\/london_merged.csv\")\ndf.head()","4745fe3a":"df.info()","bc7569c8":"df.duplicated().value_counts()","23652b76":"df.isnull().sum()","1bf66791":"# season\nsns.countplot(\"season\", data=df);\n","89f11351":"# is_holiday\nsns.countplot(\"is_holiday\", data=df);","2214497b":"# is_weekend\nax = sns.countplot(\"is_weekend\", data=df);\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.2, p.get_height()+20));","3131f046":"# weather_code\nax = sns.countplot(\"weather_code\", data=df);\n\nfor p in ax.patches:\n    ax.annotate( str(p.get_height()),  (p.get_x()+0.2, p.get_height()+20) );","23aaa645":"df.season.value_counts()","22998f83":"sns.countplot(data = df, x = \"weather_code\");\n\ncode = df.weather_code.value_counts().sort_index()\nfor index, value in enumerate(code):\n    plt.text(index, value, str(value), ha=\"center\", va=\"bottom\")","6d62bb82":"df.info()","81d56af4":"df.timestamp = pd.to_datetime(df.timestamp)\ndf.set_index(\"timestamp\",inplace=True)\ndf.head()","c90281cc":"# df[\"year\"] =  df.index.year\ndf[\"month\"] =  df.index.month\ndf[\"day_of_month\"] =  df.index.day\ndf[\"day_of_week\"] =  df.index.dayofweek\ndf[\"hour\"] = df.index.hour\n\ndf[\"year-month\"] = df.index.strftime(\"%Y-%m\")\ndf.head()","df08bcb8":"df.head()","95e6bec8":"# for all variables \nplt.figure(figsize=(20,10))\nsns.heatmap(df.corr(), cmap=\"coolwarm\", annot=True)","08396518":"df.corr()[[\"cnt\"]]","9fddced4":"# for the target variable\nplt.figure(figsize=(2,6))\nsns.heatmap(df.corr()[[\"cnt\"]].sort_values(by=\"cnt\", ascending=False), annot=True, cmap='BrBG', vmin=-1)","9310ff94":"df.corr()[[\"cnt\"]].sort_values(by=\"cnt\", ascending=False)","857bb81d":"#with pandas\nplt.figure(figsize=(10,6))\n\ndf.corr()[[\"cnt\"]].sort_values(by=\"cnt\").plot.barh()","33b8836d":"df.corr()[\"cnt\"].sort_values().plot.barh();","b3162005":"plt.figure(figsize=(20,6))\nsns.lineplot(x=df.index, y=\"cnt\", data=df)","9d48be7c":"df.info()","20462a94":"df_sum = pd.DataFrame(df.groupby(\"year-month\").cnt.sum())\ndf_sum","10cf89be":"# with lineplot\nplt.figure(figsize=(20,5))\nsns.lineplot(x=\"year-month\",y=\"cnt\", data = df_sum)\nplt.xticks(rotation=90);","452f84e7":"# alternative solutions\nplt.figure(figsize=(17,4))\nsns.lineplot(data = df, x = \"year-month\", y = \"cnt\", ci = None, estimator = sum)\nplt.xticks(rotation = 90)\nplt.show()","b2cb503e":"# with lineplot\nplt.figure(figsize=(15,5))\nsns.lineplot(x= \"month\", y=\"cnt\", data=df)","1e0ee16d":"# with pointplot\nplt.figure(figsize=(15,5))\nsns.pointplot(x= \"month\", y=\"cnt\", data=df, ci=100)","5177751d":"# with barplot\nplt.figure(figsize=(15,5))\nsns.barplot(x= \"month\", y=\"cnt\", data=df, ci=95)","37d4e03e":"# with lineplot (*whether it is a holiday or not*)\nplt.figure(figsize=(15,4))\nsns.lineplot(x= \"hour\", y=\"cnt\", data=df, hue=\"is_holiday\")","634b2bb7":"# with lineplot (*You may want to see seasonal breakdowns*)\nplt.figure(figsize=(15,4))\nsns.lineplot(x= \"hour\", y=\"cnt\", data=df, hue=\"season\")","da18aaa8":"# with pointplot\nfig, ax = plt.subplots(ncols=1, nrows=4, figsize = (18,15))\n\nsns.pointplot(data=df, x=\"hour\", y=\"cnt\", ax = ax[0])\nsns.pointplot(data=df, x=\"hour\", y=\"cnt\", ax = ax[1], hue=\"is_holiday\")\nsns.pointplot(data=df, x=\"hour\", y=\"cnt\", ax = ax[2], hue=\"is_weekend\")\nsns.pointplot(data=df, x=\"hour\", y=\"cnt\", ax = ax[3], hue=\"season\");","c10a184b":"# alternative solution\nplt.figure(figsize=(20,20))\nplt.subplot(4,1,1)\nsns.pointplot(df.hour, df.cnt);\nplt.subplot(4,1,2)\nsns.pointplot(df.hour, df.cnt, hue = df.is_holiday);\nplt.subplot(4,1,3)\nsns.pointplot(df.hour, df.cnt, hue = df.is_weekend);\nplt.subplot(4,1,4)\nsns.pointplot(df.hour, df.cnt, hue = df.season);","17c27820":"sns.barplot(x=\"day_of_week\", y=\"cnt\", data=df);","85b95efd":"# with barplot\nsns.barplot(x=\"day_of_week\", y=\"cnt\", data=df, hue=\"is_weekend\")","e3762d9c":"# with pointplot\nfig , ax = plt.subplots(2,1, figsize=(18,9))\n\nsns.pointplot(data=df, x=\"day_of_week\", y=\"cnt\", ax=ax[0])\nsns.pointplot(data=df, x=\"day_of_week\", y=\"cnt\", ax=ax[1], hue=\"season\")\n","6b2c92b2":"#with lineplot\nplt.figure(figsize=(15, 5))\nsns.lineplot(data=df, x=\"day_of_month\", y=\"cnt\")\n\npd.DataFrame(df.groupby(\"day_of_month\").cnt.mean().astype(\"int\")).T","46677a40":"#with lineplot\ndf_cnt =pd.DataFrame(df.groupby(\"day_of_month\").cnt.mean().astype(\"int\"))\n\nplt.figure(figsize=(15, 5))\nsns.lineplot(data=df_cnt, x=\"day_of_month\", y=\"cnt\")\n","4bdb1f66":"len(df)","6aae096a":"# with barplot\n# with barplot\nplt.figure(figsize=(10,6))\nsns.barplot(data=df[df[\"is_holiday\"]==1], x=\"season\",y=\"cnt\")","b3d95d9b":"df.is_weekend.value_counts()","15a0afc5":"# pie chart\nfig, ax = plt.subplots(figsize=(6,6))\n\nax.pie(df.is_weekend.value_counts(),\n      labels=[\"weekday\",\"weekend\"],\n       labeldistance=0.4,\n        autopct=\"%.1f%%\"\n      );","e27cfd9a":"# alternative solution\nlabels = [\"weekday\",\"weekend\"]\ndf.is_weekend.value_counts().plot(kind = 'pie',labels= labels,autopct='%1.2f%%')","9c7f78d5":"b\u00f6l\u00fcm = df.is_weekend.value_counts().sum()\/100\nplt.figure(figsize=(7,6))\nsns.countplot(data = df, x = \"is_weekend\");\nfor index,value in enumerate(df.is_weekend.value_counts()):\n    plt.text(index, value, f\"%{value\/b\u00f6l\u00fcm:.3}-{value}\", ha=\"center\", va=\"bottom\")","13902045":"ig,ax = plt.subplots(figsize=(8,6))\nsns.countplot(data=df,x=\"is_weekend\",ax=ax)\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.45, p.get_height()+1))\n    ax.annotate(\"%\"+str(round((p.get_height()\/(df.is_weekend.count()))*100,2)), (p.get_x()+0.25, p.get_height()+10));","4a7d6d68":"fig, ax = plt.subplots(figsize=(7,5))\nax = sns.countplot(x='is_weekend',data=df)\n\nfor bar in ax.patches: \n        ax.annotate(  \"%\"+str(round(100*bar.get_height()\/len(df),1)) +' - '+ str(bar.get_height() ), \n                    (bar.get_x()+0.2 , bar.get_height()+10) ,\n                    size=12)","21aa993e":"# with countplot\nsns.countplot(x=\"weather_code\", data=df)","eb4da7fe":"# with catplot\nsns.catplot(x=\"weather_code\", data=df, col=\"season\", kind=\"count\")","c043533d":"fig,axes=plt.subplots(2,2, figsize=(10,10))\n\n\naxes[0,0].hist(x=\"t1\",data=df,edgecolor=\"black\",linewidth=2,color='#ff5500')\naxes[0,0].set_title(\" t1\")\n\naxes[0,1].hist(x=\"t2\",data=df,edgecolor=\"black\",linewidth=2,color='#00bbff')\naxes[0,1].set_title(\"t2\")\n\naxes[1,0].hist(x=\"wind_speed\",data=df,edgecolor=\"black\",linewidth=2,color='#00aa55')\naxes[1,0].set_title(\" windspeed\")\n\naxes[1,1].hist(x=\"hum\",data=df,edgecolor=\"black\",linewidth=2,color='#ffffff')\naxes[1,1].set_title(\"humidity\")\n","91f968d3":"fig, ax = plt.subplots(nrows=2, ncols=2, figsize = (10,11))\nsns.histplot(data=df, x =\"t1\", ax = ax[0][0], bins = 10, stat = \"count\", color = \"orangered\", edgecolor = \"black\", linewidth = 2).set_title(\"t1\", fontsize = 13)\nsns.histplot(data=df, x =\"t2\", ax = ax[0][1], bins = 10, stat = \"count\", color = \"deepskyblue\", edgecolor = \"black\", linewidth = 2).set_title(\"t2\", fontsize = 13)\nsns.histplot(data=df, x =\"wind_speed\", ax = ax[1][0], bins = 10, stat = \"count\", color = \"mediumseagreen\", edgecolor = \"black\", linewidth = 2).set_title(\"wind_speed\", fontsize = 13)\nsns.histplot(data=df, x =\"hum\", ax = ax[1][1], bins = 10, stat = \"count\",  color = \"white\", edgecolor = \"black\", linewidth = 2).set_title(\"humidity\", fontsize = 13)\nplt.show()","184987d1":"plt.figure(figsize=(15,10))\n\nplt.subplot(211)\nplt.title(\"t1 distribution According to humudity\")\n\nsns.scatterplot(x=\"t1\",y=\"hum\",data=df, hue='season',palette=\"coolwarm\")\n\nplt.subplot(212)\nplt.title(\"t1 distribution According to wind speed\")\nsns.scatterplot(x=\"t1\",y=\"wind_speed\",data=df, hue='season',palette=\"coolwarm\");","21d36836":"### 11.Plot bike shares by hours on (holidays, weekend, season)","ca8856d4":"### 12.Plot bike shares by day of week\n- You may want to see whether it is a holiday or not","0a7fb488":"___\n\n<p style=\"text-align: center;\"><img src=\"https:\/\/docs.google.com\/uc?id=1lY0Uj5R04yMY3-ZppPWxqCr5pvBLYPnV\" class=\"img-fluid\" alt=\"CLRSWY\"><\/p>\n\n___","b5785d47":"### 4.Plot the distribution of various discrete features on (Season, haliday, weekend and weathercode)","2408d608":"### 16.Plot the distribution of weather code by seasons","895d0ca6":"### 9.Plot bike shares over time use lineplot","38a7a367":"### 1.Import libraries","855adce7":"you can use strftime('%Y-%m') for year_mount","050a9772":"### 5.Look at the data type of each variable, transform `timestamp` in type, and set it as index.","bc375cb8":"**\"weather_code\" category description:**\n* 1 = Clear ; mostly clear but have some values with haze\/fog\/patches of fog\/ fog in vicinity \n* 2 = scattered clouds \/ few clouds \n* 3 = Broken clouds \n* 4 = Cloudy \n* 7 = Rain\/ light Rain shower\/ Light rain \n* 10 = rain with thunderstorm \n* 26 = snowfall \n* 94 = Freezing Fog","fb601096":"# #Determines\n\n\n\n#### Features\n\n- timestamp - timestamp field for grouping the data\n- cnt - the count of a new bike shares\n- t1 - real temperature in C\n- t2 - temperature in C \u201cfeels like\u201d\n- hum - humidity in percentage\n- wind_speed - wind speed in km\/h\n- weather_code - category of the weather\n- is_holiday - boolean field - 1 holiday \/ 0 non holiday\n- is_weekend - boolean field - 1 if the day is weekend\n- season - category field meteorological seasons: 0-spring ; 1-summer; 2-fall; 3-winter.\n\n**\"weather_code\" category description:**\n* 1 = Clear ; mostly clear but have some values with haze\/fog\/patches of fog\/ fog in vicinity \n* 2 = scattered clouds \/ few clouds \n* 3 = Broken clouds \n* 4 = Cloudy \n* 7 = Rain\/ light Rain shower\/ Light rain \n* 10 = rain with thunderstorm \n* 26 = snowfall \n* 94 = Freezing Fog\n---\n\nInitially, the task of discovering data will be waiting for you as always. Recognize features, detect missing values, outliers etc.  Review the data from various angles in different time breakdowns. For example, visualize the distribution of bike shares by day of the week. With this graph, you will be able to easily observe and make inferences how people's behavior changes daily. Likewise, you can make hourly, monthly, seasonally etc. analyzes. In addition, you can analyze correlation of variables with a heatmap.  \n","df397c38":" season - category field meteorological seasons: 0-spring ; 1-summer; 2-fall; 3-winter.","d1e24532":"---\n---","d01f377d":"- Tam 2 yillik bir timestamp var. `year, month, day_of_month, day_of_week, hour` bilgilerini alarak feature engineering yapalim","e80c4f1f":"# WELCOME!","9c035dbf":"### 6.Make feature engineering. Extract new columns (day of the week, day of the month, hour, month, season, year etc.)","83b00c12":"### 2.Read dataset","1d624a0f":"Welcome to **\"Bike Demand Visualization Project\"** which is the capstone project of Data Visualization Lessons . As you know recently, free or affordable access to bicycles has been provided for short-distance trips in an urban area as an alternative to motorized public transport or private vehicles. Thus, it is aimed to reduce traffic congestion, noise and air pollution.  \n\nThe aim of this project is to reveal the current patterns in the data by showing the historical data of London bike shares with visualization tools.\n\nThis will allow us to X-ray the data as part of the EDA process before setting up a machine learning model.\n\n","3b08a089":"### 10.Plot bike shares by months and year_of_month (use lineplot, pointplot, barplot)","b1ba87d4":"### 13.Plot bike shares by day of month","1928f784":"### 7.Visualize the correlation with a heatmap","bdaa3b60":"### 14.Plot bike shares by year\n### Plot bike shares on holidays by seasons","3a81dd43":"# Tasks\n","bbf29185":"### 15.Visualize the distribution of bike shares by weekday\/weekend with piechart and barplot","bf4c6a44":"### 8. Visualize the correlation of the target variable and the other features with barplot","78fe9f95":"### 17.Visulaize all the continuous variables with histogram and scatterplot","b27589cc":"### 3.Check missing values and if there are any dublicate rows or not."}}