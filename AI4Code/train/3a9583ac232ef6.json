{"cell_type":{"b863004f":"code","7e4d7b5a":"code","4e2e741f":"code","ac91dc1b":"code","1861670a":"code","c4e687aa":"code","20d02792":"code","4b45df3e":"code","204f1279":"code","0fb60fc5":"code","3c692eef":"markdown","2ba68aa0":"markdown","26990e4b":"markdown","e135cb4e":"markdown","d575aa08":"markdown","3c88ae9c":"markdown"},"source":{"b863004f":"import pandas as pd ","7e4d7b5a":"valid=pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv\")","4e2e741f":"# loading in all the essentials for data manipulation\nimport pandas as pd\nimport numpy as np\n#load inthe NTLK stopwords to remove articles, preposition and other words that are not actionable\nfrom nltk.corpus import stopwords\n# This allows to create individual objects from a bog of words\nfrom nltk.tokenize import word_tokenize\n# Lemmatizer helps to reduce words to the base form\nfrom nltk.stem import WordNetLemmatizer\n# Ngrams allows to group words in common pairs or trigrams..etc\nfrom nltk import ngrams\n# We can use counter to count the objects\nfrom collections import Counter\n# This is our visual library\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndef word_frequency(sentence):\n# joins all the sentenses\n    sentence =\" \".join(sentence)\n# creates tokens, creates lower class, removes numbers and lemmatizes the words\n    new_tokens = word_tokenize(sentence)\n    new_tokens = [t.lower() for t in new_tokens]\n    new_tokens =[t for t in new_tokens if t not in stopwords.words('english')]\n    new_tokens = [t for t in new_tokens if t.isalpha()]\n    lemmatizer = WordNetLemmatizer()\n    new_tokens =[lemmatizer.lemmatize(t) for t in new_tokens]\n#counts the words, pairs and trigrams\n    counted = Counter(new_tokens)\n    counted_2= Counter(ngrams(new_tokens,2))\n    counted_3= Counter(ngrams(new_tokens,3))\n#creates 3 data frames and returns thems\n    word_freq = pd.DataFrame(counted.items(),columns=['word','frequency']).sort_values(by='frequency',ascending=False)\n    word_pairs =pd.DataFrame(counted_2.items(),columns=['pairs','frequency']).sort_values(by='frequency',ascending=False)\n    trigrams =pd.DataFrame(counted_3.items(),columns=['trigrams','frequency']).sort_values(by='frequency',ascending=False)\n    return word_freq,word_pairs,trigrams\n\ndfl1,dfl2,dfl3=word_frequency(valid.less_toxic)\n","ac91dc1b":"df4=df1.head(20)\n# set figure size\n\nplt.figure(figsize=(30,15))\n\n# plot polar axis\nax = plt.subplot(111, polar=True)\n\n# remove grid\nplt.axis('off')\n\n# Set the coordinates limits\nupperLimit = 100\nlowerLimit = 30\n\n# Compute max and min in the dataset\nmax = df4['frequency'].max()\n\n# Let's compute heights: they are a conversion of each item value in those new coordinates\n# In our example, 0 in the dataset will be converted to the lowerLimit (10)\n# The maximum will be converted to the upperLimit (100)\nslope = (max - lowerLimit) \/ max\nheights = slope * df4.frequency + lowerLimit\n\n# Compute the width of each bar. In total we have 2*Pi = 360\u00b0\nwidth = 2*np.pi \/ len(df4.index)\n\n# Compute the angle each bar is centered on:\nindexes = list(range(1, len(df4.index)+1))\nangles = [element * width for element in indexes]\nangles\n\n# Draw bars\nbars = ax.bar(\n    x=angles, \n    height=heights, \n    width=width, \n    bottom=lowerLimit,\n    linewidth=2, \n    edgecolor=\"white\")\n\nlabelPadding = 4\nfor bar, angle, height, label in zip(bars,angles, heights, df4[\"word\"]):\n\n    # Labels are rotated. Rotation must be specified in degrees :(\n    rotation = np.rad2deg(angle)\n\n    # Flip some labels upside down\n    alignment = \"\"\n    if angle >= np.pi\/2 and angle < 3*np.pi\/2:\n        alignment = \"right\"\n        rotation = rotation + 180\n    else: \n        alignment = \"left\"\n\n    # Finally add the labels\n    ax.text(\n        x=angle, \n        y=lowerLimit + bar.get_height() + labelPadding, \n        s=label, \n        ha=alignment, \n        va='center', \n        rotation=rotation, \n        rotation_mode=\"anchor\") ","1861670a":"df5=df2.head(20)\n# set figure size\n\nplt.figure(figsize=(30,15))\n\n# plot polar axis\nax = plt.subplot(111, polar=True)\n\n# remove grid\nplt.axis('off')\n\n# Set the coordinates limits\nupperLimit = 100\nlowerLimit = 30\n\n# Compute max and min in the dataset\nmax = df5['frequency'].max()\n\n# Let's compute heights: they are a conversion of each item value in those new coordinates\n# In our example, 0 in the dataset will be converted to the lowerLimit (10)\n# The maximum will be converted to the upperLimit (100)\nslope = (max - lowerLimit) \/ max\nheights = slope * df5.frequency + lowerLimit\n\n# Compute the width of each bar. In total we have 2*Pi = 360\u00b0\nwidth = 2*np.pi \/ len(df5.index)\n\n# Compute the angle each bar is centered on:\nindexes = list(range(1, len(df5.index)+1))\nangles = [element * width for element in indexes]\nangles\n\n# Draw bars\nbars = ax.bar(\n    x=angles, \n    height=heights, \n    width=width, \n    bottom=lowerLimit,\n    linewidth=2, \n    edgecolor=\"white\")\n\nlabelPadding = 4\nfor bar, angle, height, label in zip(bars,angles, heights, df5[\"pairs\"]):\n\n    # Labels are rotated. Rotation must be specified in degrees :(\n    rotation = np.rad2deg(angle)\n\n    # Flip some labels upside down\n    alignment = \"\"\n    if angle >= np.pi\/2 and angle < 3*np.pi\/2:\n        alignment = \"right\"\n        rotation = rotation + 180\n    else: \n        alignment = \"left\"\n\n    # Finally add the labels\n    ax.text(\n        x=angle, \n        y=lowerLimit + bar.get_height() + labelPadding, \n        s=label, \n        ha=alignment, \n        va='center', \n        rotation=rotation, \n        rotation_mode=\"anchor\") ","c4e687aa":"df6=df3.head(20)\n# set figure size\n\nplt.figure(figsize=(30,15))\n\n# plot polar axis\nax = plt.subplot(111, polar=True)\n\n# remove grid\nplt.axis('off')\n\n# Set the coordinates limits\nupperLimit = 100\nlowerLimit = 30\n\n# Compute max and min in the dataset\nmax = df6['frequency'].max()\n\n# Let's compute heights: they are a conversion of each item value in those new coordinates\n# In our example, 0 in the dataset will be converted to the lowerLimit (10)\n# The maximum will be converted to the upperLimit (100)\nslope = (max - lowerLimit) \/ max\nheights = slope * df6.frequency + lowerLimit\n\n# Compute the width of each bar. In total we have 2*Pi = 360\u00b0\nwidth = 2*np.pi \/ len(df6.index)\n\n# Compute the angle each bar is centered on:\nindexes = list(range(1, len(df6.index)+1))\nangles = [element * width for element in indexes]\nangles\n\n# Draw bars\nbars = ax.bar(\n    x=angles, \n    height=heights, \n    width=width, \n    bottom=lowerLimit,\n    linewidth=2, \n    edgecolor=\"white\")\n\nlabelPadding = 4\nfor bar, angle, height, label in zip(bars,angles, heights, df6[\"trigrams\"]):\n\n    # Labels are rotated. Rotation must be specified in degrees :(\n    rotation = np.rad2deg(angle)\n\n    # Flip some labels upside down\n    alignment = \"\"\n    if angle >= np.pi\/2 and angle < 3*np.pi\/2:\n        alignment = \"right\"\n        rotation = rotation + 180\n    else: \n        alignment = \"left\"\n\n    # Finally add the labels\n    ax.text(\n        x=angle, \n        y=lowerLimit + bar.get_height() + labelPadding, \n        s=label, \n        ha=alignment, \n        va='center', \n        rotation=rotation, \n        rotation_mode=\"anchor\") ","20d02792":"# libraries\nimport matplotlib.pyplot as plt\nimport squarify    # pip install squarify (algorithm for treemap)\nimport pandas as pd\ndfl4=dfl1.head(25)\n# plot it\n\nplt.figure(figsize=(20,10))\nsquarify.plot(sizes=dfl4['frequency'], label=dfl4['word'] , alpha=.9,text_kwargs={'fontsize':18})\nplt.axis('off')\nplt.show()","4b45df3e":"import matplotlib.pyplot as plt\nimport squarify    # pip install squarify (algorithm for treemap)\nimport pandas as pd\ndfl5=dfl2.head(25)\n# plot it\n\nplt.figure(figsize=(20,10))\nsquarify.plot(sizes=dfl5['frequency'], label=dfl5['pairs'] , alpha=.9,text_kwargs={'fontsize':18})\nplt.axis('off')\nplt.show()","204f1279":"import matplotlib.pyplot as plt\nimport squarify    # pip install squarify (algorithm for treemap)\nimport pandas as pd\ndfl6=dfl3.head(25)\n# plot it\n\nplt.figure(figsize=(20,10))\nsquarify.plot(sizes=dfl6['frequency'], label=dfl6['trigrams'], alpha=.9,text_kwargs={'fontsize':15})\nplt.axis('off')\nplt.show()","0fb60fc5":"import numpy\nnumpy.random.randn(3)","3c692eef":"# trigrams ","2ba68aa0":"# trigrams","26990e4b":"# frequent words used in More toxic comment","e135cb4e":"# Frequent pairs in more toxic comments","d575aa08":"# frequent pairs","3c88ae9c":"# Frequent Words used in less toxic comments "}}