{"cell_type":{"58f2fcca":"code","b6d32ace":"code","9390af76":"code","b50b5f0e":"code","1bf9cd1d":"code","449e614f":"code","3795ed3c":"code","064d2455":"code","a3aa63ea":"code","9cabf141":"code","d2c6f2c5":"code","48acfa94":"code","9a44c143":"code","d0b8cd03":"code","668fd386":"code","3d3fa6e4":"markdown"},"source":{"58f2fcca":"import os\nimport time\nimport glob\nimport warnings\nwarnings.filterwarnings('ignore')\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow_addons.layers import WeightNormalization\nfrom sklearn.model_selection import train_test_split\nimport sklearn.metrics\nfrom sklearn.preprocessing import StandardScaler","b6d32ace":"image_path = '..\/input\/stanford-dogs-dataset\/images\/Images'\ncategories_count = len(os.listdir(image_path))\nprint('## %s Dog categories in this dataset.' %categories_count)","9390af76":"# print('\\nFiles Directory:')\n    \n# for root,dirs,files in os.walk(image_path):\n#     print('root:',root)\n#     print('dirs:',dirs)\n#     print('files:',files)","b50b5f0e":"# Image classification for some categories only.\n\n###################\nnum_of_categories = 10\nimage_size = 256\n###################\n\ntarget_files = os.listdir(image_path)[:num_of_categories]\n\ntarget_categories = []\nfor i in target_files:\n    x = i.split('-')[1]\n    target_categories.append(x)\n\nprint(target_categories)\n\ndef read_images(target_files):\n    image_set = []\n    label_set = []\n    breed_ID = 0\n    for each_file in target_files:\n        for image in os.listdir(image_path + '\/' + each_file):            \n            image = cv2.imread(image_path + '\/' + each_file + '\/' + image, cv2.IMREAD_COLOR)\n            image = cv2.resize(image,(image_size,image_size))\n            image = image.astype('float32')\n            for channel in range(3):\n                image[:,:,channel] = StandardScaler().fit_transform(image[:,:,channel])\n            image_set.append(image)\n            label_set.append(breed_ID)\n        breed_ID += 1\n    image_set = np.array(image_set)\n    label_set = np.array(label_set)\n    label_set = keras.utils.to_categorical(label_set)\n    np.save('image_set_%s.npy'%image_size,image_set)\n    np.save('label_set_%s.npy'%image_size,label_set)\n\n# read_images(target_files)","1bf9cd1d":"path = '..\/input\/finding-what-dog-is-it-with-a-modified-vggnet\/'     #input folder\npath = ''                                                            #output folder\nimage_set = np.load(glob.glob(path+'image*.npy')[0])\nlabel_set = np.load(glob.glob(path+'label*.npy')[0])","449e614f":"def split(image_set, label_set):\n    x_train, x_test, y_train, y_test = train_test_split(image_set, label_set, train_size = 0.8, random_state = np.random)\n    return x_train, x_test, y_train, y_test\n\nx_train, x_test, y_train, y_test = split(image_set, label_set)\nprint(x_train.shape, x_test.shape, y_train.shape, y_test.shape)","3795ed3c":"def datagen():\n  \n    datagen = keras.preprocessing.image.ImageDataGenerator(\n        featurewise_center=False, samplewise_center=False,\n        featurewise_std_normalization=False, samplewise_std_normalization=False,\n        zca_whitening=False, zca_epsilon=1e-06, rotation_range=20, width_shift_range=0.1,\n        height_shift_range=0.1, brightness_range=None, shear_range=0.1, zoom_range=0.1,\n        channel_shift_range=0.0, fill_mode='nearest', cval=0.0, horizontal_flip=True,\n        vertical_flip=False, rescale=None, preprocessing_function=None,\n        data_format='channels_last', validation_split=0.0)\n    \n    return datagen\n\ntrain_datagen = datagen()\ntrain_datagen.fit(x_train)","064d2455":"###################\nfilters = 32\nkernel_size = (3,3)\nstride = (1,1)\npool_size = (3,3)\n###################","a3aa63ea":"def conv2D(x,filters=filters,kernel=kernel_size,stride=stride,pad='same',activate=True,WN=False):\n    if activate:\n        x = keras.layers.Conv2D(filters=filters,kernel_size=kernel_size,strides=stride,padding=pad,activation='selu')(x)\n    else:\n        x = keras.layers.Conv2D(filters=filters,kernel_size=kernel_size,strides=stride,padding=pad,activation=None)(x)\n    if WN:\n        tfa.addons.WeightNormalization(x)\n    return x\n\ndef selu(x):\n    x = tf.nn.selu(x)\n    return x\n\ndef maxpool2D(x,pool_size=pool_size,stride=stride,pad='same'):\n    x = keras.layers.MaxPool2D(pool_size=pool_size,strides=stride,padding=pad)(x)\n    return x\n\ndef BN(x):\n    x = keras.layers.BatchNormalization()(x)\n    return x\n\ndef concat(x): # input as list\n    x = keras.layers.Concatenate()(x)\n    return x\n\ndef res_add(raw_x,transformed_x,keep_scale):\n    x = keras.layers.Add()([raw_x*keep_scale,transformed_x*(1-keep_scale)])\n    return x\n\ndef stem(x):\n    x = conv2D(x,32,(3,3),(2,2))\n    x = conv2D(x,64,(3,3))\n    x = maxpool2D(x,(3,3),(2,2))\n    x = conv2D(x,96,(3,3))\n    x = conv2D(x,128,(3,3))\n    x = maxpool2D(x,(3,3),(2,2))\n    x_1 = conv2D(x,128,(1,1))\n    x_1 = conv2D(x_1,128,(3,3))\n    x = res_add(x,x_1,0.3)\n    x = conv2D(x,256,(1,1))\n    x = maxpool2D(x,(3,3),(2,2))\n    x_1 = conv2D(x,256,(1,1))\n    x_1 = conv2D(x_1,256,(3,3))\n    x = res_add(x,x_1,0.3)\n    x = conv2D(x,512,(1,1))\n    x_1 = conv2D(x,512,(1,1))\n    x_1 = conv2D(x_1,512,(3,3))\n    x = res_add(x,x_1,0.3)\n    x = conv2D(x,768,(1,1))\n    x = maxpool2D(x,(3,3),(2,2))\n    x_1 = conv2D(x,768,(1,1))\n    x_1 = conv2D(x_1,768,(3,3))\n    x = res_add(x,x_1,0.3)\n    return x\n\ndef FC(x):\n    x = keras.layers.Flatten()(x)\n    x = keras.layers.Dense(512,activation='selu')(x)\n    x = keras.layers.Dense(64,activation='selu')(x)\n    x = keras.layers.Dense(num_of_categories, activation='softmax')(x)\n    return x\n\ndef GAP(x):\n    x = keras.layers.GlobalAveragePooling2D()(x)\n    x = keras.layers.Dropout(0.1)(x)\n    x = keras.layers.Dense(num_of_categories, activation='softmax')(x)\n    return x\n\ninputs = keras.Input(shape=(image_size,image_size,3))\nx = stem(inputs)\noutputs = GAP(x)\n\nmodel = keras.Model(inputs,outputs)\nprint(model.summary())","9cabf141":"###################\ntotal_epoch = 50\nlr_init = 0.00005\nbatch_size = 8\n###################\n\ndef scheduler(epoch):\n    epoch += 1\n    lr = lr_init\n    threshold = 10\n    depre = 0.95**(epoch-threshold)\n    if epoch <= threshold:\n        return lr_init\n    elif lr > lr_init\/20:\n        lr = lr_init * depre\n        return lr\n    else:\n        return lr\n\nscheduler = keras.callbacks.LearningRateScheduler(scheduler, verbose=1)","d2c6f2c5":"# adding an earlystop so training process will stop in advance if the metrics (accuracy) doesn't improve for 10 epochs consecutively\nearlystop = keras.callbacks.EarlyStopping(monitor='val_acc',mode='max',verbose=1,patience=10,restore_best_weights=True)","48acfa94":"%%time\n\nloss = keras.losses.CategoricalCrossentropy()\noptimizer = keras.optimizers.Nadam(learning_rate=lr_init)\nmetrics = [tf.keras.metrics.CategoricalAccuracy(name='acc')]\nmodel.compile(loss = loss, optimizer = optimizer, metrics = metrics)\nuse_data_gen = True\n\nif use_data_gen:\n    history = model.fit(train_datagen.flow(x_train, y_train, batch_size=batch_size),\n        steps_per_epoch=(len(x_train)\/batch_size), epochs=total_epoch, callbacks=[scheduler,earlystop],\n        validation_data=(x_test, y_test), workers=0, use_multiprocessing=True, shuffle=True)\nelse:\n    history = model.fit(x_train, y_train, epochs=total_epoch, batch_size=batch_size,\n        callbacks=[scheduler,earlystop], validation_data=(x_test, y_test), shuffle=True)\n\nmodel.save('model.h5')","9a44c143":"pred = model.predict(x_test)\npred = np.argmax(pred,axis=1)\ny_test = np.argmax(y_test,axis=1)\nreport = sklearn.metrics.classification_report(y_test,pred,target_names=target_categories)\nprint(report)","d0b8cd03":"plt.title('model accuracy')\nplt.plot(history.history['acc'],label='train accuracy')\nplt.plot(history.history['val_acc'],label='test accuracy')\nplt.legend()\nplt.show()","668fd386":"plt.title('model loss')\nplt.plot(history.history['loss'],label='train loss')\nplt.plot(history.history['val_loss'],label='test loss')\nplt.legend()\nplt.show()","3d3fa6e4":"Features:\n* VGG structure with highway\n* No bounding box data\n* Image StandardScaler\n* Added Image Augmentation\n* NAdam optimization\n* Replaced ReLU by SELU\n* Replace FC layer by average pooling"}}