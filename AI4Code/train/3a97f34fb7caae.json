{"cell_type":{"146c06bb":"code","b414de78":"code","630f1563":"code","b616888b":"code","865a7de1":"code","6b6b560b":"code","472e8aa7":"code","48b62ebe":"code","6f7ac805":"code","2d9c0efa":"code","81fe8b83":"code","1658447f":"code","b19878ca":"code","6c72c982":"code","f153099e":"code","99709b95":"code","a0b0b7d2":"code","aa925806":"code","9191bb23":"markdown","97463b9a":"markdown","8df6511b":"markdown","0142f1b0":"markdown","8d77989c":"markdown","cfae6776":"markdown","3c787f19":"markdown","faadf7b3":"markdown","f0453abf":"markdown","98199547":"markdown","d09ff6d9":"markdown","993c8e42":"markdown","dba5c20b":"markdown","aa07a5ad":"markdown","ed8a2c12":"markdown","f5550dfe":"markdown"},"source":{"146c06bb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b414de78":"import matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport h2o\nfrom sklearn.preprocessing import StandardScaler,MinMaxScaler,RobustScaler,Normalizer\nfrom h2o.estimators.deeplearning import H2OAutoEncoderEstimator\nfrom pylab import rcParams\nrcParams['figure.figsize']=15,10","630f1563":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadsgermancsv\/german.csv', delimiter=';', encoding = \"ISO-8859-2\", nrows = nRowsRead)\ndf.dataframeName = 'german.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf.head()","b616888b":"#cols_to_transform = [ 'continue_drop','gender','caste','guardian','internet' ]\n#df = pd.get_dummies( df,columns = cols_to_transform )\n#df.head()","865a7de1":"predictors=list(range(0,15))","6b6b560b":"# Copy the original dataset\nscaled_features = df.copy()\n\n# Extract column names to be standardized\ncol_names = ['Creditability',\n 'Account_Balance',\n 'Duration_of_Credit_monthly',\n 'Payment_Status_of_Previous_Credit',\n 'Purpose',\n 'Credit_Amount',\n 'Value_Savings_Stocks',\n 'Length_of_current_employment',\n 'Instalment_per_cent',\n 'Sex_Marital_Status',\n 'Guarantors',\n 'Duration_in_Current_address',\n 'Most_valuable_available_asset',\n 'Age_years',\n 'Concurrent_Credits',\n 'Type_of_apartment',\n 'No_of_Credits_at_this_Bank',\n 'Occupation', 'No_of_dependents',\n 'Telephone',\n 'Foreign_Worker']\n\n# Standardize the columns and re-assingn to original dataframe\nfeatures = scaled_features[col_names]\nscaler = RobustScaler().fit_transform(features.values)\nfeatures = pd.DataFrame(scaler, index=df.index, columns=col_names)\nscaled_features [col_names] = features\nscaled_features.head()","472e8aa7":"#df = df.astype(object)\n\ntrain=scaled_features.loc[scaled_features['Type_of_apartment'] == 1]\ntest=scaled_features.loc[scaled_features['Duration_in_Current_address'] == 1]","48b62ebe":"h2o.init(nthreads=-1, enable_assertions = False)","6f7ac805":"train.hex=h2o.H2OFrame(train)\ntest.hex=h2o.H2OFrame(test)","2d9c0efa":"model=H2OAutoEncoderEstimator(activation=\"Tanh\",\n                              hidden=[120],\n                              ignore_const_cols=False,\n                              epochs=100\n                             )","81fe8b83":"model.train(x=predictors,training_frame=train.hex)","1658447f":"model._model_json['output']","b19878ca":"#test_rec_error=model.anomaly(test.hex)\ntrain_rec_error=model.anomaly(train.hex)","6c72c982":"#test_rec_error_df=test_rec_error.as_data_frame()\ntrain_rec_error_df=train_rec_error.as_data_frame()\nfinal = pd.concat([train_rec_error_df, train_rec_error_df])","f153099e":"boxplotEdges=final.quantile(.75)\niqr = np.subtract(*np.percentile(final, [75, 25]))\ntop_whisker=boxplotEdges[0]+(1.5*iqr)\ntop_whisker","99709b95":"train_rec_error_df['Telephone']=train_rec_error_df.index\n#test_rec_error_df['']=test_rec_error_df.index + 18200 #Count of train data","a0b0b7d2":"plt.scatter(train_rec_error_df['Telephone'],train_rec_error_df['Reconstruction.MSE'],label='Continued df',s=1)\nplt.axvline(x=18200,linewidth=1)\n#plt.scatter(test_rec_error_df['Telephone'],test_rec_error_df['Reconstruction.MSE'],label='Dropped df',s=1)\nplt.axhline(y=top_whisker,linewidth=1, color='r')\nplt.legend()","aa925806":"h2o.cluster().shutdown()","9191bb23":"#Convert panda dataframe to H2O dataframe","97463b9a":"#Output:\n\nWe trained the model. From the graph we see all that have been classififed as Outliers?\nCan we?","8df6511b":"#Scatter plot with top whisker","0142f1b0":"#Code by Sheik Mohamed Imran https:\/\/www.kaggle.com\/imrandude\/h2o-autoencoders-and-anomaly-detection-python\/notebook\n\nAnomaly detection with H2O in Python","8d77989c":"#Add id column to dataframe","cfae6776":"#Convert output to dataframe","3c787f19":"#Train the model with training dataset","faadf7b3":"#Get anomalous values","f0453abf":"#Create AutoEncoder Model","98199547":"#Split dataset - Duration in Current address as 'test' and Type of apartment as 'train'","d09ff6d9":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcRRI9EVsRlf_k35o-qloKvsvMWpdhMJ4aFTjA&usqp=CAU)pt.slideshare.net","993c8e42":"#Calculate top whisker value","dba5c20b":"#Standardize input data.","aa07a5ad":"#List column\n\nH2O cannot use columns with character datatype. Creating Dummy variables instead. All data is numerical. No need to encode here.","ed8a2c12":"#Print the output in JSON format","f5550dfe":"#H2O Autoencoding and Anomaly detection\n\nStarting H2O cluster"}}