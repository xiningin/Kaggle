{"cell_type":{"75d9bbce":"code","21b05be6":"code","1d7f3914":"code","b415eb43":"code","ac6a0199":"code","1d2ffe25":"code","09aa7356":"code","f1b1dbc9":"code","cdeca699":"code","b7878279":"code","ba76bc70":"code","3b9ab936":"code","cc4c0d51":"code","eec74e99":"code","b4b684d7":"code","9b15605e":"code","ba0c6823":"code","c1acd325":"code","550e0381":"markdown","7f933635":"markdown"},"source":{"75d9bbce":"#Basic Python and Machine learning libraries\nimport os, sys, warnings, random, time, re, math, string\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\nfrom sklearn import metrics\nfrom sklearn.model_selection import StratifiedKFold\nfrom IPython.display import display\nfrom tqdm import tqdm_notebook\n\n#Pytorch and nltk and other text relevant libraries\nimport torch\nimport nltk, emoji\nfrom torch import nn, optim\nfrom torch.optim import lr_scheduler\nfrom torch.functional import F \nfrom torch.utils.data import Dataset, DataLoader\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nfrom bs4 import BeautifulSoup\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import SnowballStemmer, WordNetLemmatizer\n\n#Mandatory Lines of code when working with jupyter notebooks\n%matplotlib inline\nwarnings.filterwarnings('ignore')\n\n#tqdm with pandas\nfrom tqdm import tqdm\ntqdm.pandas()\n\nfrom plotly import graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom collections import Counter\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","21b05be6":"# I Just wanted my plots to look neat hence fixing some plot styles\nplt.style.use('seaborn-whitegrid')\nplt.rcParams['lines.linewidth'] = 2\nplt.rcParams['font.sans-serif'] = 'Arial'\nplt.rcParams['text.color'] = 'black'\nplt.rcParams['axes.labelcolor']= 'black'\nplt.rcParams['xtick.color'] = 'black'\nplt.rcParams['ytick.color'] = 'black'\nplt.rcParams['font.size'] = 12","1d7f3914":"class Config:\n    \n    DEBUG = False\n    pwd = '\/kaggle\/working\/'\n    data_dir = '..\/input\/zstest\/'\n    train_dir = os.path.join(data_dir, 'train_file.csv')\n    test_dir = os.path.join(data_dir, 'test_file.csv')\n    sample_sub = os.path.join(data_dir, 'sample_submission.csv')\n    num_folds = 3 if DEBUG else 8\n    out_dim = 6\n    batch_size = 16\n    num_workers = 4\n    num_epochs = 2 if DEBUG else 10\n    SEED = 713\n    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')","b415eb43":"# Fixing seed so that our results are always reproducible\ndef seed_everything(seed):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = True\n\nseed_everything(Config.SEED)","ac6a0199":"train_df = pd.read_csv(Config.train_dir)\n# train_df['TitleLength'] = train_df.Title.apply(lambda x:len(str(x).split()))\n# train_df['HeadlineLength'] = train_df.Headline.apply(lambda x:len(str(x).split()))\ntest_df = pd.read_csv(Config.test_dir)\nsample_sub = pd.read_csv(Config.sample_sub)\ntrain_df = train_df.sample(1000).reset_index(drop=True) if Config.DEBUG else train_df\ndisplay(train_df.head())\nlen(train_df)","1d2ffe25":"contraction_mapping = {\"ain't\": \"is not\", \"aren't\": \"are not\",\"can't\": \"cannot\", \"'cause\": \"because\", \"could've\": \"could have\", \"couldn't\": \"could not\", \n                       \"didn't\": \"did not\",  \"doesn't\": \"does not\", \"don't\": \"do not\", \"hadn't\": \"had not\", \"hasn't\": \"has not\", \"haven't\": \"have not\", \n                       \"he'd\": \"he would\",\"he'll\": \"he will\", \"he's\": \"he is\", \"how'd\": \"how did\", \"how'd'y\": \"how do you\", \"how'll\": \"how will\", \n                       \"how's\": \"how is\",  \"I'd\": \"I would\", \"I'd've\": \"I would have\", \"I'll\": \"I will\", \"I'll've\": \"I will have\",\"I'm\": \"I am\",\n                       \"I've\": \"I have\", \"i'd\": \"i would\", \"i'd've\": \"i would have\", \"i'll\": \"i will\",  \"i'll've\": \"i will have\",\"i'm\": \"i am\", \n                       \"i've\": \"i have\", \"isn't\": \"is not\", \"it'd\": \"it would\", \"it'd've\": \"it would have\", \"it'll\": \"it will\", \"it'll've\": \"it will have\",\n                       \"it's\": \"it is\", \"let's\": \"let us\", \"ma'am\": \"madam\", \"mayn't\": \"may not\", \"might've\": \"might have\",\"mightn't\": \"might not\",\n                       \"mightn't've\": \"might not have\", \"must've\": \"must have\", \"mustn't\": \"must not\", \"mustn't've\": \"must not have\", \"needn't\": \"need not\", \n                       \"needn't've\": \"need not have\",\"o'clock\": \"of the clock\", \"oughtn't\": \"ought not\", \"oughtn't've\": \"ought not have\", \"shan't\": \"shall not\",\n                       \"sha'n't\": \"shall not\", \"shan't've\": \"shall not have\", \"she'd\": \"she would\", \"she'd've\": \"she would have\", \"she'll\": \"she will\", \n                       \"she'll've\": \"she will have\", \"she's\": \"she is\", \"should've\": \"should have\", \"shouldn't\": \"should not\", \"shouldn't've\": \"should not have\",\n                       \"so've\": \"so have\",\"so's\": \"so as\", \"this's\": \"this is\",\"that'd\": \"that would\", \"that'd've\": \"that would have\", \"that's\": \"that is\",\n                       \"there'd\": \"there would\", \"there'd've\": \"there would have\", \"there's\": \"there is\", \"here's\": \"here is\",\"they'd\": \"they would\",\n                       \"they'd've\": \"they would have\", \"they'll\": \"they will\", \"they'll've\": \"they will have\", \"they're\": \"they are\", \"they've\": \"they have\",\n                       \"to've\": \"to have\", \"wasn't\": \"was not\", \"we'd\": \"we would\", \"we'd've\": \"we would have\", \"we'll\": \"we will\", \"we'll've\": \"we will have\",\n                       \"we're\": \"we are\", \"we've\": \"we have\", \"weren't\": \"were not\", \"what'll\": \"what will\", \"what'll've\": \"what will have\", \n                       \"what're\": \"what are\",  \"what's\": \"what is\", \"what've\": \"what have\", \"when's\": \"when is\", \"when've\": \"when have\", \"where'd\": \"where did\",\n                       \"where's\": \"where is\", \"where've\": \"where have\", \"who'll\": \"who will\", \"who'll've\": \"who will have\", \"who's\": \"who is\", \n                       \"who've\": \"who have\", \"why's\": \"why is\", \"why've\": \"why have\", \"will've\": \"will have\", \"won't\": \"will not\", \"won't've\": \"will not have\", \n                       \"would've\": \"would have\", \"wouldn't\": \"would not\", \"wouldn't've\": \"would not have\", \"y'all\": \"you all\", \"y'all'd\": \"you all would\",\n                       \"y'all'd've\": \"you all would have\",\"y'all're\": \"you all are\",\"y'all've\": \"you all have\",\"you'd\": \"you would\", \"you'd've\": \"you would have\",\n                       \"you'll\": \"you will\", \"you'll've\": \"you will have\", \"you're\": \"you are\", \"you've\": \"you have\", 'u.s':'america', 'e.g':'for example'}\n\npunct = [',', '.', '\"', ':', ')', '(', '-', '!', '?', '|', ';', \"'\", '$', '&', '\/', '[', ']', '>', '%', '=', '#', '*', '+', '\\\\', '\u2022',  '~', '@', '\u00a3', \n '\u00b7', '_', '{', '}', '\u00a9', '^', '\u00ae', '`',  '<', '\u2192', '\u00b0', '\u20ac', '\u2122', '\u203a',  '\u2665', '\u2190', '\u00d7', '\u00a7', '\u2033', '\u2032', '\u00c2', '\u2588', '\u00bd', '\u00e0', '\u2026', \n '\u201c', '\u2605', '\u201d', '\u2013', '\u25cf', '\u00e2', '\u25ba', '\u2212', '\u00a2', '\u00b2', '\u00ac', '\u2591', '\u00b6', '\u2191', '\u00b1', '\u00bf', '\u25be', '\u2550', '\u00a6', '\u2551', '\u2015', '\u00a5', '\u2593', '\u2014', '\u2039', '\u2500', \n '\u2592', '\uff1a', '\u00bc', '\u2295', '\u25bc', '\u25aa', '\u2020', '\u25a0', '\u2019', '\u2580', '\u00a8', '\u2584', '\u266b', '\u2606', '\u00e9', '\u00af', '\u2666', '\u00a4', '\u25b2', '\u00e8', '\u00b8', '\u00be', '\u00c3', '\u22c5', '\u2018', '\u221e', \n '\u2219', '\uff09', '\u2193', '\u3001', '\u2502', '\uff08', '\u00bb', '\uff0c', '\u266a', '\u2569', '\u255a', '\u00b3', '\u30fb', '\u2566', '\u2563', '\u2554', '\u2557', '\u25ac', '\u2764', '\u00ef', '\u00d8', '\u00b9', '\u2264', '\u2021', '\u221a', ]\n\npunct_mapping = {\"\u2018\": \"'\", \"\u20b9\": \"e\", \"\u00b4\": \"'\", \"\u00b0\": \"\", \"\u20ac\": \"e\", \"\u2122\": \"tm\", \"\u221a\": \" sqrt \", \"\u00d7\": \"x\", \"\u00b2\": \"2\", \"\u2014\": \"-\", \"\u2013\": \"-\", \"\u2019\": \"'\", \"_\": \"-\",\n                 \"`\": \"'\", '\u201c': '\"', '\u201d': '\"', '\u201c': '\"', \"\u00a3\": \"e\", '\u221e': 'infinity', '\u03b8': 'theta', '\u00f7': '\/', '\u03b1': 'alpha', '\u2022': '.', '\u00e0': 'a', '\u2212': '-', \n                 '\u03b2': 'beta', '\u2205': '', '\u00b3': '3', '\u03c0': 'pi', '!':' '}\n\nmispell_dict = {'colour': 'color', 'centre': 'center', 'favourite': 'favorite', 'travelling': 'traveling', 'counselling': 'counseling', 'theatre': 'theater',\n                'cancelled': 'canceled', 'labour': 'labor', 'organisation': 'organization', 'wwii': 'world war 2', 'citicise': 'criticize', 'youtu ': 'youtube ',\n                'Qoura': 'Quora', 'sallary': 'salary', 'Whta': 'What', 'narcisist': 'narcissist', 'howdo': 'how do', 'whatare': 'what are', 'howcan': 'how can',\n                'howmuch': 'how much', 'howmany': 'how many', 'whydo': 'why do', 'doI': 'do I', 'theBest': 'the best', 'howdoes': 'how does', \n                'mastrubation': 'masturbation', 'mastrubate': 'masturbate', \"mastrubating\": 'masturbating', 'pennis': 'penis', 'Etherium': 'Ethereum', \n                'narcissit': 'narcissist', 'bigdata': 'big data', '2k17': '2017', '2k18': '2018', 'qouta': 'quota', 'exboyfriend': 'ex boyfriend', \n                'airhostess': 'air hostess', \"whst\": 'what', 'watsapp': 'whatsapp', 'demonitisation': 'demonetization', 'demonitization': 'demonetization',\n                'demonetisation': 'demonetization'}","09aa7356":"def clean_text(text):\n    '''Clean emoji, Make text lowercase, remove text in square brackets,remove links,remove punctuation\n    and remove words containing numbers.'''\n    text = emoji.demojize(text)\n    text = re.sub(r'\\:(.*?)\\:','',text)\n    text = str(text).lower()    #Making Text Lowercase\n    text = re.sub('\\[.*?\\]', '', text)\n    #The next 2 lines remove html text\n    text = BeautifulSoup(text, 'lxml').get_text()\n    text = re.sub('https?:\/\/\\S+|www\\.\\S+', '', text)\n    text = re.sub('<.*?>+', '', text)\n    text = re.sub('\\n', '', text)\n    text = re.sub('\\w*\\d\\w*', '', text)\n    # replacing everything with space except (a-z, A-Z, \".\", \"?\", \"!\", \",\", \"'\")\n    text = re.sub(r\"[^a-zA-Z?.!,\u00bf']+\", \" \", text)\n    return text\n\ndef clean_contractions(text, mapping):\n    '''Clean contraction using contraction mapping'''    \n    specials = [\"\u2019\", \"\u2018\", \"\u00b4\", \"`\"]\n    for s in specials:\n        text = text.replace(s, \"'\")\n    for word in mapping.keys():\n        if \"\"+word+\"\" in text:\n            text = text.replace(\"\"+word+\"\", \"\"+mapping[word]+\"\")\n    #Remove Punctuations\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    # creating a space between a word and the punctuation following it\n    # eg: \"he is a boy.\" => \"he is a boy .\"\n    text = re.sub(r\"([?.!,\u00bf])\", r\" \\1 \", text)\n    text = re.sub(r'[\" \"]+', \" \", text)\n    return text\n\ndef clean_special_chars(text, punct, mapping):\n    '''Cleans special characters present(if any)'''   \n    for p in mapping:\n        text = text.replace(p, mapping[p])\n    \n    for p in punct:\n        text = text.replace(p, f' {p} ')\n    \n    specials = {'\\u200b': ' ', '\u2026': ' ... ', '\\ufeff': '', '\u0915\u0930\u0928\u093e': '', '\u0939\u0948': ''}  \n    for s in specials:\n        text = text.replace(s, specials[s])\n    \n    return text\n\ndef correct_spelling(x, dic):\n    '''Corrects common spelling errors'''   \n    for word in dic.keys():\n        x = x.replace(word, dic[word])\n    return x\n\ndef remove_space(text):\n    '''Removes awkward spaces'''   \n    #Removes awkward spaces \n    text = text.strip()\n    text = text.split()\n    return \" \".join(text)\n\ndef text_preprocessing_pipeline(text):\n    '''Cleaning and parsing the text.'''\n    text = clean_text(text)\n    text = clean_contractions(text, contraction_mapping)\n    text = clean_special_chars(text, punct, punct_mapping)\n    text = correct_spelling(text, mispell_dict)\n    text = remove_space(text)\n    return text","f1b1dbc9":"stop_words = set(stopwords.words('english'))\nstemmer = SnowballStemmer('english')\nlemmatizer = WordNetLemmatizer()\n\ndef nlp_preprocessing(text, remove_stopwords=True, stemming=False, lemmatization=True):\n    '''Stopword removal + Stemming + Lemmatization'''\n    word_tokens = word_tokenize(text)\n    if remove_stopwords:\n        word_tokens = [w for w in word_tokens if not w in stop_words]\n    if stemming: #Random Cutting, try avoiding it\n        word_tokens = [stemmer.stem(w) for w in word_tokens]\n    if lemmatization:\n        word_tokens = [lemmatizer.lemmatize(w) for w in word_tokens]\n    return \" \".join(word_tokens)","cdeca699":"train_df['Title'] = train_df['Title'].progress_apply(lambda x:text_preprocessing_pipeline(x))\ntrain_df['Title'] = train_df['Title'].progress_apply(lambda x:nlp_preprocessing(x))\n\ntrain_df['Headline'] = train_df['Headline'].progress_apply(lambda x:text_preprocessing_pipeline(x))\ntrain_df['Headline'] = train_df['Headline'].progress_apply(lambda x:nlp_preprocessing(x))","b7878279":"train_df.describe(include='all')","ba76bc70":"plt.figure(figsize=(12,6))\nsns.countplot(x='Topic',data=train_df)","3b9ab936":"plt.figure(figsize=(12,6))\nsns.kdeplot(train_df.Facebook, shade=True, color=\"b\")\nplt.figure(figsize=(12,6))\nsns.kdeplot(np.log(2 + train_df.Facebook), shade=True, color=\"b\")","cc4c0d51":"plt.figure(figsize=(12,6))\nsns.kdeplot(train_df.GooglePlus, shade=True, color=\"r\")\nplt.figure(figsize=(12,6))\nsns.kdeplot(np.log(2 + train_df.GooglePlus), shade=True, color=\"r\")","eec74e99":"plt.figure(figsize=(12,6))\nsns.kdeplot(train_df.LinkedIn, shade=True, color=\"b\")\nplt.figure(figsize=(12,6))\nsns.kdeplot(np.log(2 + train_df.LinkedIn), shade=True, color=\"b\")","b4b684d7":"def correlation_heatmap(df):\n    _ , ax = plt.subplots(figsize =(8, 8))\n    colormap = sns.diverging_palette(200, 10, as_cmap = True)\n    \n    _ = sns.heatmap(\n        df.corr(), \n        cmap = colormap,\n        square=True,\n        cbar_kws={'shrink':.9 },\n        ax=ax,\n        annot=True, \n        linewidths=0.1,vmax=1.0, linecolor='white',\n        annot_kws={'fontsize':12 }\n    )\n    \n    plt.title('Pearson Correlation of Features', y=1.05, size=10)\n\ncorrelation_heatmap(train_df.select_dtypes(exclude=np.object))","9b15605e":"def random_colours(number_of_colors):\n    '''\n    Simple function for random colours generation.\n    Input:\n        number_of_colors - integer value indicating the number of colours which are going to be generated.\n    Output:\n        Color in the following format: ['#E86DA4'] .\n    '''\n    colors = []\n    for i in range(number_of_colors):\n        colors.append(\"#\"+''.join([random.choice('0123456789ABCDEF') for j in range(6)]))\n    return colors","ba0c6823":"plt.figure(figsize=(12,6))\np1=sns.kdeplot(train_df['TitleLength'], shade=True, color=\"r\").set_title('Kernel Distribution of Number Of words')\np1=sns.kdeplot(train_df['HeadlineLength'], shade=True, color=\"b\")","c1acd325":"# hist_data = [train_df['TitleLength'],train_df['HeadlineLength']]\n\n# group_labels = ['TitleLength', 'HeadlineLength']\n\n# # Create distplot with custom bin_size\n# fig = ff.create_distplot(hist_data, group_labels, show_curve=False)\n# fig.update_layout(title_text='Distribution of Number Of words')\n# fig.update_layout(\n#     autosize=False,\n#     width=900,\n#     height=700,\n#     paper_bgcolor=\"LightSteelBlue\",\n# )\n# fig.show()","550e0381":"# EDA","7f933635":"# Text Preprocessing"}}