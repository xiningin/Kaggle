{"cell_type":{"6b5670ec":"code","ac8a0fa4":"code","511d3f8c":"code","909aacf7":"code","9ba5d76e":"code","ea87cf5a":"code","acf02d90":"code","e1a8f8ee":"code","f6d90ff0":"code","08b71ae7":"code","37d86283":"code","62764310":"markdown","b7ded261":"markdown","c372918f":"markdown","6dcbdca3":"markdown","242e9d98":"markdown"},"source":{"6b5670ec":"import numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport matplotlib.pyplot as plt\nimport torchvision\nimport torchvision.datasets as datasets\nimport torchvision.transforms as transforms\nfrom torchvision import models\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(device)\nimport copy","ac8a0fa4":"transform_train = transforms.Compose([\n    transforms.RandomResizedCrop(224),\n    transforms.RandomHorizontalFlip(),\n    transforms.ToTensor()\n    ])\n\ntransform_val = transforms.Compose([\n    transforms.RandomResizedCrop(224),\n    transforms.ToTensor()\n    ])\n\ntransform_test = transforms.Compose([\n    transforms.RandomResizedCrop(224), \n    transforms.ToTensor(),\n    ])\ntrain_set = datasets.ImageFolder(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train\", transform = transform_train)\nval_set = datasets.ImageFolder(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/val\", transform = transform_val)\ntest_set= datasets.ImageFolder(\"\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/test\",transform=transform_test)","511d3f8c":"num_classes = 2\nbatch_size = 8\ntrainloader = torch.utils.data.DataLoader(train_set, batch_size=batch_size, shuffle=True)\nvalloader = torch.utils.data.DataLoader(val_set,batch_size=batch_size,shuffle=True)\ntestloader = torch.utils.data.DataLoader(test_set,batch_size=batch_size,shuffle=True)","909aacf7":"dataiter = iter(trainloader)\nimages, labels = dataiter.next()\n\nprint(images.shape)\n\nprint(images[1].shape)\nprint(labels[1].item())\n\nprint(\"Classes in training set \")\nprint(train_set.classes)\nprint(\"Classes in validation set \")\nprint(val_set.classes)","9ba5d76e":"def imshow(img, title):\n    npimg = img.numpy()\n    plt.figure(figsize=(15, 7))\n    plt.axis('off')\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n    plt.title(title)\n    plt.show()\n\ndef show_batch_images(dataloader):\n    images, labels = next(iter(dataloader))\n    img = torchvision.utils.make_grid(images,padding=25)\n    imshow(img, title=[\"NORMAL\" if x==0  else \"PNEUMONIA\" for x in labels])\n\nfor i in range(4):\n    show_batch_images(trainloader)","ea87cf5a":"def evaluation(dataloader, model):\n    total, correct = 0, 0\n    for data in dataloader:\n        inputs, labels = data\n        inputs, labels = inputs.to(device), labels.to(device)\n        outputs = model(inputs)\n        _, pred = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (pred == labels).sum().item()\n    return (100 * correct \/ total)","acf02d90":"vgg = models.vgg16_bn(pretrained=True)\nfor param in vgg.parameters():\n    param.requires_grad = False\n\nfinal_in_features = vgg.classifier[6].in_features\nvgg.classifier[6] = nn.Linear(final_in_features, num_classes)\nfor param in vgg.parameters():\n    if param.requires_grad:\n        print(param.shape)","e1a8f8ee":"vgg = vgg.to(device)\nloss_fn = nn.CrossEntropyLoss()\nopt = optim.Adam(vgg.parameters(),lr=0.01)","f6d90ff0":"%%time\n\nloss_epoch_arr = []\nmax_epochs = 20\n\nmin_loss = 10000000\n\nn_iters = np.ceil(5300\/batch_size)\n\nfor epoch in range(max_epochs):\n\n    for i, data in enumerate(trainloader, 0):\n\n        inputs, labels = data\n        inputs, labels = inputs.to(device), labels.to(device)\n\n        opt.zero_grad()\n\n        outputs = vgg(inputs)\n        loss = loss_fn(outputs, labels)\n        loss.backward()\n        opt.step()\n        \n        if min_loss > loss.item():\n            min_loss = loss.item()\n            best_model = copy.deepcopy(vgg.state_dict())\n            print('Min loss %0.2f' % min_loss)\n        \n        if i % 100 == 0:\n            print('Iteration: %d\/%d, Loss: %0.2f' % (i, n_iters, loss.item()))\n            \n        del inputs, labels, outputs\n        torch.cuda.empty_cache()\n        \n    loss_epoch_arr.append(loss.item())\n\nvgg.load_state_dict(best_model)\nprint(evaluation(trainloader, vgg), evaluation(valloader, vgg))","08b71ae7":"print(\"Acc on training set is {} and validation set is {}\".format(evaluation(trainloader, vgg),evaluation(valloader, vgg)))","37d86283":"plt.plot(loss_epoch_arr)\nplt.xlabel(\"epochs\")\nplt.ylabel(\"loss\")\nplt.title(\"loss vs epochs\")\nplt.show()","62764310":"# Introduction:\n\n**Pneumonia is an infection in one or both lungs. Bacteria, viruses, and fungi cause it. The infection causes inflammation in the air sacs in your lungs, which are called alveoli. The alveoli fill with fluid or pus, making it difficult to breathe. Read on to learn more about pneumonia and how to treat it**\n\n**Includes Diseases: Community-acquired pneumonia**\n\n**Symptoms: Inflammation**\n\n![download.jpg](attachment:download.jpg)","b7ded261":"## Data Visualisation","c372918f":"# Importing modules","6dcbdca3":"# Transfer learning and training VGG16","242e9d98":"## Getting Data"}}