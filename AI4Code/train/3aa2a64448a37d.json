{"cell_type":{"97da1c6f":"code","726522bf":"code","1238dfc8":"code","28311ef2":"code","83c233a6":"code","44a79947":"code","c3455f14":"code","3e75fa18":"code","1a791037":"code","44f92d19":"code","55524eea":"code","a6c676ea":"code","2162b351":"code","d299ad66":"code","dea9d975":"code","c87187a3":"code","61022880":"code","4a47fa2e":"code","47f0328d":"code","f38bf210":"code","463e80bf":"code","8d26371c":"code","28034317":"code","d42b6781":"code","6988ba86":"code","e95ce59e":"markdown","141b2176":"markdown","24653ebe":"markdown","a070e03d":"markdown","9a1a67d9":"markdown","f8903eb4":"markdown","c1f97209":"markdown","399aec85":"markdown","47f61317":"markdown","0b24ea8d":"markdown","c3090e9c":"markdown","d4278882":"markdown","1f80cc48":"markdown","c8276cf0":"markdown","1395667a":"markdown","470f9dbe":"markdown"},"source":{"97da1c6f":"import pandas as pd\npd.set_option('display.max_columns', 20)\n\nmovie = pd.read_csv('..\/input\/movie-lens-dataset\/movies.csv')\nrating = pd.read_csv('..\/input\/movie-lens-dataset\/ratings.csv')\ndf = movie.merge(rating, how=\"left\", on=\"movieId\")\ndf.head()","726522bf":"df.shape","1238dfc8":"df[\"title\"].value_counts().head().to_frame()","28311ef2":"comment_counts = pd.DataFrame(df[\"title\"].value_counts())\nrare_movies = comment_counts[comment_counts[\"title\"] <= 100].index\ncommon_movies = df[~df[\"title\"].isin(rare_movies)]\ncommon_movies.head()","83c233a6":"common_movies.shape","44a79947":"common_movies[\"title\"].nunique()","c3455f14":"def create_user_movie_df():\n    import pandas as pd\n    df = movie.merge(rating, how=\"left\", on=\"movieId\")\n    comment_counts = pd.DataFrame(df[\"title\"].value_counts())\n    rare_movies = comment_counts[comment_counts[\"title\"] <= 20].index\n    common_movies = df[~df[\"title\"].isin(rare_movies)]\n    user_movie_df = common_movies.pivot_table(index=[\"userId\"], columns=[\"title\"], values=\"rating\")\n    return user_movie_df\n\nuser_movie_df = create_user_movie_df()","3e75fa18":"user_movie_df.head()","1a791037":"def item_based_recommender(movie_name, user_movie_df):\n    movie_name = user_movie_df[movie_name]\n    return user_movie_df.corrwith(movie_name).sort_values(ascending=False).head(5)\n","44f92d19":"dfr =item_based_recommender(\"Matrix, The (1999)\", user_movie_df).to_frame()\ndfr.columns=[\"Corr\"]\ndfr.head()","55524eea":"random_user = int(pd.Series(user_movie_df.index).sample(1, random_state=45).values)\nrandom_user_df = user_movie_df[user_movie_df.index == random_user]","a6c676ea":"random_user","2162b351":"movies_watched = random_user_df.columns[random_user_df.notna().any()].tolist()","d299ad66":"movies_watched_df = user_movie_df[movies_watched]\nuser_movie_count = movies_watched_df.T.notnull().sum()\nuser_movie_count = user_movie_count.reset_index()\nuser_movie_count.columns = [\"userId\", \"movie_count\"]\nuser_movie_count[user_movie_count[\"movie_count\"] > 3].sort_values(\"movie_count\", ascending=False).head()","dea9d975":"users_same_movies = user_movie_count[user_movie_count[\"movie_count\"] > 10][\"userId\"]\n","c87187a3":"final_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(users_same_movies)],\n                      random_user_df[movies_watched]])\nfinal_df.head()","61022880":"corr_df = final_df.T.corr().unstack().sort_values(ascending =False).drop_duplicates()\ncorr_df.head()","4a47fa2e":"corr_df = pd.DataFrame(corr_df, columns=[\"corr\"])\ncorr_df.index.names = ['user_id_1', 'user_id_2']\ncorr_df = corr_df.reset_index()","47f0328d":"top_users = corr_df[(corr_df[\"user_id_1\"] == random_user) & (corr_df[\"corr\"] >= 0.65)][\n    [\"user_id_2\", \"corr\"]].reset_index(drop=True)","f38bf210":"top_users = top_users.sort_values(by='corr', ascending=False)\ntop_users.head()","463e80bf":"top_users.rename(columns={\"user_id_2\": \"userId\"}, inplace=True)\ntop_users_ratings = top_users.merge(rating[[\"userId\", \"movieId\", \"rating\"]], how='inner')\n\ntop_users_ratings = top_users_ratings[top_users_ratings[\"userId\"] != random_user]","8d26371c":"top_users_ratings['weighted_rating'] = top_users_ratings['corr'] * top_users_ratings['rating']\ntop_users_ratings.head()","28034317":"recommendation_df = top_users_ratings.groupby('movieId').agg({\"weighted_rating\": \"mean\"})\n\nrecommendation_df = recommendation_df.reset_index()","d42b6781":"movies_to_be_recommend = recommendation_df[recommendation_df[\"weighted_rating\"] > 3.7].sort_values(\"weighted_rating\", ascending=False)\n","6988ba86":"weighted_recommendation = movies_to_be_recommend.merge(movie[[\"movieId\", \"title\"]])[\"title\"]\nweighted_recommendation.head()\n","e95ce59e":"This function gives us the most collerated movies with our selected movie. ","141b2176":"User Id's of users watched 10 or more movies in common are listed below.","24653ebe":"![image.png](attachment:c214ad46-5b04-4408-9a73-334a4f8bef30.png)\n","a070e03d":"Movies that our user watched are given below","9a1a67d9":"Here we can create our matrix.","f8903eb4":"For user-based method,we recommend movie to a user based on the data coming from users watched the same movies with our user.\nHere we select the user ramdomly ","c1f97209":"Unique movies :","399aec85":"Here we will focus on item-based and user-based methods.\nFor item-based filtering, we create a matrix of ratings having rows consisting of users and columns consisting of items. Then we calculate correlation of the item for which we want to make recommendation.\nBelow, you can see an example for item-based filtering.","47f61317":"# What is Collaborative Filtering ","0b24ea8d":"How many comments were made for movies is given below","c3090e9c":"Here, top_users who have 65 percent or higher correlation with our random user.","d4278882":"This matrix will be used to calculate correlations of movies with each others.","1f80cc48":"Weighted rating is calculated below and after getting average of it for each movieId, we select movies have average rating more than 3.7 point.","c8276cf0":"Collaborative filtering is a method used by the recommendation systems. What these systems do is try to predict the rating or preference that a user would give an item based on past ratings and preferences of other users. Collaborative filters do not use item metadata like its content-based filters.\nCollaborative filtering needs a set of items based on the user\u2019s historical choices. ","1395667a":"This dataset includes many movies and in order to narrow our dataset down, we can deal with movies having 1000 commments and above.","470f9dbe":"In order to reach the users watched these movies are found below."}}