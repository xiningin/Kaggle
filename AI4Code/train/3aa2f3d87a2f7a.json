{"cell_type":{"9519221f":"code","d28ff80d":"code","1b2c3dc6":"code","c63415fb":"code","4d9a3398":"code","ecee70f6":"code","6e633ef1":"code","1b8091cb":"code","8a593705":"code","46f3ee5f":"code","b9c81e60":"code","c7ef9ef2":"code","c397e9ab":"code","cb8bde71":"code","928fc068":"code","6ecbaa2a":"code","38cc4e5b":"code","222e87e7":"code","10b2ca2d":"code","c96d1828":"code","2e26916c":"code","27f08c6c":"code","eeb23660":"code","116b59a6":"code","97b09e03":"code","a72effc6":"code","62de75d0":"code","d6ed3473":"code","9ab862d3":"code","19aa6ed7":"markdown","6ccbf9cb":"markdown","f9138a64":"markdown"},"source":{"9519221f":"import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('train.csv')\ndf['GP-MIN'] = df['GP'] * df['MIN']\ndf['GP-PTS'] = kdf['GP'] * df['PTS']\n#df['Value'] = df['GP-MIN'] \/ df['PTS']\n#df.Name.nunique()\n#df = df.drop_duplicates(subset='Name', keep=False)\ndf","d28ff80d":"y = df['TARGET_5Yrs'].as_matrix();\ndel df['Name']\ndel df['PlayerID']\ndel df['TARGET_5Yrs']\nX = df.as_matrix().astype(np.float)","1b2c3dc6":"tmp = np.where(np.isnan(X))\nfor i in tmp[0]:\n    X[i][8] = 0","c63415fb":"df = pd.read_csv('test.csv')\nresult = df['PlayerID']\ndel df['Name']\ndel df['PlayerID']\ndf['GP-MIN'] = df['GP'] * df['MIN']\ndf['GP-PTS'] = df['GP'] * df['PTS']\n#df['Value'] = df['GP-MIN'] \/ df['PTS']\ndf = df.as_matrix()","4d9a3398":"#from sklearn import preprocessing\n#min_max_scaler = preprocessing.MinMaxScaler()\n#X = min_max_scaler.fit_transform(X)\n#df = min_max_scaler.transform(df)","ecee70f6":"#from sklearn.decomposition import PCA\n#clfx = PCA(0.96) #keep 95% of variance\n#X_trans = clfx.fit_transform(X)\n#test_trans = clfx.transform(df)","6e633ef1":"X_trans = X\ntest_trans = df\nprint(X.shape)\nprint(X_trans.shape)\nprint(df.shape)\nprint(test_trans.shape)","1b8091cb":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_trans, y, test_size=.1, random_state=333, stratify=y)","8a593705":"import matplotlib.pyplot as plt\nfor i in range(20):\n    \n    x_index = i;\n    colors = ['blue', 'red']\n    print(i)\n    for lab, col in zip(range(2), colors): #[(0, 'blue'), (1, 'red')]\n\n        plt.hist(X[y==lab, x_index], color=col)\n        plt.show()\n    print(\"==========================================\")","46f3ee5f":"acc = []","b9c81e60":"from sklearn.neighbors import KNeighborsClassifier\nclf1 = KNeighborsClassifier(n_neighbors=160)\nclf1.fit(X_train, y_train)\ny_pred = clf1.predict(X_test)\nprint(np.mean(y_pred == y_test))\nacc.append(np.mean(y_pred == y_test))","c7ef9ef2":"from sklearn.linear_model import LogisticRegression\nclf2 = LogisticRegression(max_iter=230, random_state=22)\nclf2.fit(X_train, y_train)\ny_pred = clf2.predict(X_test)\nprint(np.mean(y_pred == y_test))\nacc.append(np.mean(y_pred == y_test))","c397e9ab":"from sklearn.neural_network import MLPClassifier\nclf3 = MLPClassifier()\nclf3.fit(X_train, y_train)\ny_pred = clf3.predict(X_test)\nprint(np.mean(y_pred == y_test))\n#acc.append(np.mean(y_pred == y_test))","cb8bde71":"from sklearn.ensemble import RandomForestClassifier\nclf4 = RandomForestClassifier(n_estimators=120)\nclf4.fit(X_train, y_train)\ny_pred = clf4.predict(X_test)\nprint(np.mean(y_pred == y_test))\nacc.append(np.mean(y_pred == y_test))","928fc068":"from sklearn.ensemble import AdaBoostClassifier\nclf5 = AdaBoostClassifier(n_estimators=120)\nclf5.fit(X_train, y_train)\ny_pred = clf5.predict(X_test)\nprint(np.mean(y_pred == y_test))\n#acc.append(np.mean(y_pred == y_test))","6ecbaa2a":"from sklearn.ensemble import ExtraTreesClassifier\nclf6 = ExtraTreesClassifier(n_estimators=120)\nclf6.fit(X_train, y_train)\ny_pred = clf6.predict(X_test)\nprint(np.mean(y_pred == y_test))\nacc.append(np.mean(y_pred == y_test))","38cc4e5b":"from sklearn.ensemble import BaggingClassifier\nclf7 = BaggingClassifier()\nclf7.fit(X_train, y_train)\ny_pred = clf7.predict(X_test)\nprint(np.mean(y_pred == y_test))\nacc.append(np.mean(y_pred == y_test))","222e87e7":"from sklearn import svm\nclf8 = svm.SVC()\nclf8.fit(X_train, y_train)\ny_pred = clf8.predict(X_test)\nprint(np.mean(y_pred == y_test))\n#acc.append(np.mean(y_pred == y_test))","10b2ca2d":"from sklearn.naive_bayes import BernoulliNB\nclf9 = BernoulliNB()\nclf9.fit(X_train, y_train)\ny_pred = clf9.predict(X_test)\nprint(np.mean(y_pred == y_test))\n#acc.append(np.mean(y_pred == y_test))","c96d1828":"from sklearn.tree import DecisionTreeClassifier\nclf10 = DecisionTreeClassifier(criterion='gini',max_depth=300)\nclf10.fit(X_train, y_train)\ny_pred = clf10.predict(X_test)\nprint(np.mean(y_pred == y_test))\n#acc.append(np.mean(y_pred == y_test))","2e26916c":"from sklearn.tree import DecisionTreeRegressor\nclf11 = DecisionTreeRegressor()\nclf11.fit(X_train, y_train)\ny_pred = clf11.predict(X_test)\nprint(np.mean(y_pred == y_test))\n#acc.append(np.mean(y_pred == y_test))","27f08c6c":"from sklearn.tree import ExtraTreeClassifier\nclf12 = ExtraTreeClassifier(criterion='entropy',max_depth=300)\nclf12.fit(X_train, y_train)\ny_pred = clf12.predict(X_test)\nprint(np.mean(y_pred == y_test))\nacc.append(np.mean(y_pred == y_test))","eeb23660":"from sklearn.tree import ExtraTreeRegressor\nclf13 = ExtraTreeRegressor()\nclf13.fit(X_train, y_train)\ny_pred = clf13.predict(X_test)\nprint(np.mean(y_pred == y_test))\n#acc.append(np.mean(y_pred == y_test))","116b59a6":"from sklearn.ensemble import VotingClassifier\neclf1 = VotingClassifier(estimators=[('KNeighborsClassifier', clf1), ('LogisticRegression', clf2), ('MLPClassifier', clf3), \n                                     ('RandomForestClassifier', clf4), ('AdaBoostClassifier', clf5), ('ExtraTreesClassifier', clf6),\n                                     ('BaggingClassifier', clf7), ('svm', clf8), ('BernoulliNB', clf9), ('DecisionTreeClassifier', clf10), \n                                     ('ExtraTreeClassifier', clf12)], voting='hard', weights=acc)\neclf1 = eclf1.fit(X_train, y_train)\ny_p = eclf1.predict(X_test)\nprint(np.mean(y_p == y_test))","97b09e03":"result = result.as_matrix()\ndic = {\"PlayerID\" : result}\nresult = pd.DataFrame(dic)","a72effc6":"#y_pred = clf7.predict(test_trans)\ny_pred = eclf1.predict(test_trans)","62de75d0":"y_pred","d6ed3473":"result['TARGET_5Yrs'] = y_pred\nresult = result.set_index('PlayerID')\nresult.to_csv(\"RES.csv\")\nc = pd.read_csv(\"RES.csv\")\nc","9ab862d3":"pd.read_csv('sample_submission.csv')","19aa6ed7":"# Load Test set","6ccbf9cb":"# Load Training set","f9138a64":"# PreProcessing"}}