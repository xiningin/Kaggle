{"cell_type":{"25b8c575":"code","02226d6f":"code","8e58f527":"code","5ee44012":"code","74155085":"code","baa7948a":"code","ab480314":"code","487bb2d5":"code","da474f75":"code","794642c7":"code","3c6d7f88":"code","fbb7daa4":"code","a89b47e7":"code","510b0c6d":"code","134aef25":"code","028c9c0f":"code","bd18d2ee":"code","a8941296":"code","c70a1bee":"code","13c8bb3d":"code","e8996da8":"code","74dab0e3":"code","f0f99d18":"code","6a5ae009":"code","8c953a56":"code","f520d1a6":"code","058fccb8":"markdown"},"source":{"25b8c575":"from warnings import filterwarnings\nfilterwarnings('ignore')\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.neighbors import LocalOutlierFactor\nimport matplotlib.pyplot as plt\n\n\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import StandardScaler\n\n\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error,r2_score\n\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge, Lasso, ElasticNet\nfrom sklearn.linear_model import RidgeCV, LassoCV,ElasticNetCV\n\n\n\nHitters=pd.read_csv(\"..\/input\/hitters\/Hitters.csv\")\ndf=Hitters.copy()\ndf.head()","02226d6f":"df.info()","8e58f527":"df.isnull().sum().sum()","5ee44012":"df=df[df.notnull().all(axis=1)]\ndf.shape","74155085":"# One hot Encoding\ndf = pd.get_dummies(df, columns = ['League', 'Division', 'NewLeague'], drop_first = True)\ndf.head()","baa7948a":"clf= LocalOutlierFactor(n_neighbors = 20, contamination = 0.1)\nclf.fit_predict(df)[0:10]","ab480314":"df_scores=clf.negative_outlier_factor_\nnp.sort(df_scores)[0:20]","487bb2d5":"sns.boxplot(df_scores);","da474f75":"threshold=np.sort(df_scores)[10]\nthreshold","794642c7":"df=df.loc[df_scores > threshold]\ndf.shape","3c6d7f88":"# Regression\n\ny=df[\"Salary\"]\nX=df.drop(\"Salary\", axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    test_size=0.20, \n                                                    random_state=46)\nreg_model = LinearRegression()\nreg_model.fit(X_train, y_train)\ny_pred=reg_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","fbb7daa4":"#Ridge Regression\n\nridge_model=Ridge().fit(X_train,y_train)\ny_pred= ridge_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","a89b47e7":"# Ridge_tuned(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas1, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","510b0c6d":"# Ridge_tuned(alpha2)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas2, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","134aef25":"# Ridge_tuned(alpha3)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nridge_cv = RidgeCV(alphas = alphas3, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","028c9c0f":"# Ridge_tuned(best alpha)\nalphas4 = np.linspace(0,0.01,70)\nridge_cv = RidgeCV(alphas = alphas4, scoring = \"neg_mean_squared_error\", cv = 10, normalize = True)\nridge_cv.fit(X_train,y_train)\nprint(ridge_cv.alpha_)\nridge_tuned=Ridge(alpha=ridge_cv.alpha_).fit(X_train,y_train)\ny_pred=ridge_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","bd18d2ee":"#Lasso Regression\nlasso_model = Lasso().fit(X_train, y_train)\ny_pred=lasso_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","a8941296":"#Lasso Tuned(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nlasso_cv_model = LassoCV(alphas = alphas1, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","c70a1bee":"#Lasso Tuned(alpha2)\nlasso_cv_model = LassoCV(alphas = alphas2, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","13c8bb3d":"#Lasso Tuned(alpha3)\nlasso_cv_model = LassoCV(alphas = alphas3, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","e8996da8":"# Lasso_tuned(best alpha)\nalphas4 = np.linspace(0,1,500)\nlasso_cv_model = LassoCV(alphas = alphas4, cv = 10).fit(X_train, y_train)\nprint(lasso_cv_model.alpha_)\nlasso_tuned = Lasso(alpha = lasso_cv_model.alpha_).fit(X_train, y_train)\ny_pred = lasso_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_pred,y_test))","74dab0e3":"# Elastic Net Regression\nenet_model = ElasticNet().fit(X_train, y_train)\ny_pred = enet_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","f0f99d18":"#Elastic Net(alpha1)\nalphas1 = np.random.randint(0,1000,100)\nalphas2 = 10**np.linspace(10,-2,100)*0.5\nalphas3 = np.linspace(0,1,1000)\nenet_cv_model = ElasticNetCV(alphas = alphas1, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","6a5ae009":"#Elastic Net(alpha2)\nenet_cv_model = ElasticNetCV(alphas = alphas2, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","8c953a56":"#Elastic Net(alpha3)\nenet_cv_model = ElasticNetCV(alphas = alphas3, cv = 10).fit(X_train, y_train)\nprint(enet_cv_model.alpha_)\nenet_tuned = ElasticNet(alpha = enet_cv_model.alpha_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","f520d1a6":"enet_params = {\"l1_ratio\": [0,0.01,0.05,0.1,0.2,0.4,0.5,0.6,0.8,1],\n               \"alpha\":[0.1,0.01,0.001,0.5,0.9,1,5,10,20,50,87,99,100,110,194,195,200,265,266,289,325,330,350,352,355,400]}\nenet_model = ElasticNet().fit(X, y)\nfrom sklearn.model_selection import GridSearchCV\ngs_cv_enet = GridSearchCV(enet_model, enet_params, cv = 10).fit(X, y)\nprint(gs_cv_enet.best_params_)\nenet_tuned = ElasticNet(**gs_cv_enet.best_params_).fit(X_train, y_train)\ny_pred = enet_tuned.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","058fccb8":"# 1) Eksik veriler at\u0131ld\u0131.\n# 2) Ayk\u0131r\u0131 g\u00f6zlemler LOF ile belirlendi,10.de\u011fer sonras\u0131 at\u0131ld\u0131.\n# 3) Kalan 252 veri ile; tune edilmi\u015f ve edilmemi\u015f, en iyi durumda:\n- Regression rmse: 316\n- Ridge rmse: 316\n- Lasso rmse: 314\n- Elastic Net rmse: 318"}}