{"cell_type":{"ef339a9c":"code","59006fd9":"code","f0195525":"code","c1295ff1":"code","a44f09e3":"code","47a23146":"code","a7a849a6":"code","eedd99e4":"code","db466226":"code","7a8d4082":"code","302ebaf5":"code","65ad9a70":"code","b6767859":"code","356ea50c":"code","3fda5bb5":"code","78e44fc4":"code","642efbd8":"code","5434e313":"code","9015759c":"code","983db2f1":"code","ae2bb367":"markdown"},"source":{"ef339a9c":"import pandas as pd\nimport numpy as np\nimport lightgbm as lgb\n#import xgboost as xgb\nfrom scipy.sparse import vstack, csr_matrix, save_npz, load_npz\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.model_selection import StratifiedKFold\n#from sklearn.metrics import roc_auc_score\nimport gc\ngc.enable()","59006fd9":"dtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int8',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float16',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float16',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }\n","f0195525":"print('Download Train and Test Data.\\n')\ntrain = pd.read_csv('..\/input\/train.csv', dtype=dtypes, low_memory=True)\ntrain['MachineIdentifier'] = train.index.astype('uint32')\ntest  = pd.read_csv('..\/input\/test.csv',  dtype=dtypes, low_memory=True)\ntest['MachineIdentifier']  = test.index.astype('uint32')\n\ngc.collect()","c1295ff1":"train.head()","a44f09e3":"dropable_col = ['PuaMode',\n 'Census_ProcessorClass',\n 'Census_IsWIMBootEnabled',\n 'IsBeta',\n 'Census_IsFlightsDisabled',\n 'Census_IsFlightingInternal',\n 'AutoSampleOptIn',\n 'Census_ThresholdOptIn',\n 'SMode',\n 'Census_IsPortableOperatingSystem',\n 'PuaMode',\n 'Census_DeviceFamily',\n 'UacLuaenable',\n 'Census_IsVirtualDevice']","47a23146":"train.drop(dropable_col,axis = 1,inplace = True)","a7a849a6":"gc.collect()\ntrain.info()","eedd99e4":"train.DefaultBrowsersIdentifier.fillna(0, inplace=True)","db466226":"trans_dict = {\n    'off': 'Off', '&#x02;': '2', '&#x01;': '1', 'on': 'On', 'requireadmin': 'RequireAdmin', 'OFF': 'Off', \n    'Promt': 'Prompt', 'requireAdmin': 'RequireAdmin', 'prompt': 'Prompt', 'warn': 'Warn', \n    '00000000': '0', '&#x03;': '3', np.nan: 'NoExist'\n}\ntrain.replace({'SmartScreen': trans_dict}, inplace=True)","7a8d4082":"train.replace({'OrganizationIdentifier': {np.nan: 0}}, inplace=True)","302ebaf5":"trans_dict = {\n    '\u001f\u02d9\u02d9\u02d9': 'unknown', 'unkn': 'unknown', np.nan: 'unknown'\n}\ntrain.replace({'Census_InternalBatteryType': trans_dict}, inplace=True)","65ad9a70":"train.dropna(inplace=True)\ntrain.shape","b6767859":"train.head()","356ea50c":"print('Transform all features to category.\\n')\nfor usecol in train.columns.tolist()[1:-1]:\n\n    train[usecol] = train[usecol].astype('str')\n    test[usecol] = test[usecol].astype('str')\n    \n    #Fit LabelEncoder\n    le = LabelEncoder().fit(\n            np.unique(train[usecol].unique().tolist()+\n                      test[usecol].unique().tolist()))\n\n    #At the end 0 will be used for dropped values\n    train[usecol] = le.transform(train[usecol])+1\n    test[usecol]  = le.transform(test[usecol])+1\n\n    agg_tr = (train\n              .groupby([usecol])\n              .aggregate({'MachineIdentifier':'count'})\n              .reset_index()\n              .rename({'MachineIdentifier':'Train'}, axis=1))\n    agg_te = (test\n              .groupby([usecol])\n              .aggregate({'MachineIdentifier':'count'})\n              .reset_index()\n              .rename({'MachineIdentifier':'Test'}, axis=1))\n\n    agg = pd.merge(agg_tr, agg_te, on=usecol, how='outer').replace(np.nan, 0)\n    #Select values with more than 1000 observations\n    agg = agg[(agg['Train'] > 4000)].reset_index(drop=True)\n    agg['Total'] = agg['Train'] + agg['Test']\n    #Drop unbalanced values\n    agg = agg[(agg['Train'] \/ agg['Total'] > 0.2) & (agg['Train'] \/ agg['Total'] < 0.8)]\n    agg[usecol+'Copy'] = agg[usecol]\n\n    train[usecol] = (pd.merge(train[[usecol]], \n                              agg[[usecol, usecol+'Copy']], \n                              on=usecol, how='left')[usecol+'Copy']\n                     .replace(np.nan, 0).astype('int').astype('category'))\n\n    test[usecol]  = (pd.merge(test[[usecol]], \n                              agg[[usecol, usecol+'Copy']], \n                              on=usecol, how='left')[usecol+'Copy']\n                     .replace(np.nan, 0).astype('int').astype('category'))\n\n    del le, agg_tr, agg_te, agg, usecol\n    gc.collect()","3fda5bb5":"y_train = np.array(train['HasDetections'])\ntrain_ids = train.index\ntest_ids  = test.index\n\ndel train['HasDetections'], train['MachineIdentifier'], test['MachineIdentifier']\ngc.collect()\n\nprint(\"If you don't want use Sparse Matrix choose Kernel Version 2 to get simple solution.\\n\")\n\nprint('--------------------------------------------------------------------------------------------------------')\nprint('Transform Data to Sparse Matrix.')\nprint('Sparse Matrix can be used to fit a lot of models, eg. XGBoost, LightGBM, Random Forest, K-Means and etc.')\nprint('To concatenate Sparse Matrices by column use hstack()')\nprint('Read more about Sparse Matrix https:\/\/docs.scipy.org\/doc\/scipy\/reference\/sparse.html')\nprint('Good Luck!')\nprint('--------------------------------------------------------------------------------------------------------')\n","78e44fc4":"#Fit OneHotEncoder\nohe = OneHotEncoder(categories='auto', sparse=True, dtype='uint8').fit(train)","642efbd8":"#Transform data using small groups to reduce memory usage\nm = 100000\ntrain = vstack([ohe.transform(train[i*m:(i+1)*m]) for i in range(train.shape[0] \/\/ m + 1)])\ntest  = vstack([ohe.transform(test[i*m:(i+1)*m])  for i in range(test.shape[0] \/\/ m +  1)])\nsave_npz('train.npz', train, compressed=True)\nsave_npz('test.npz',  test,  compressed=True)\n\ndel ohe, train, test\ngc.collect()","5434e313":"skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\nskf.get_n_splits(train_ids, y_train)\n\nlgb_test_result  = np.zeros(test_ids.shape[0])\n#lgb_train_result = np.zeros(train_ids.shape[0])\n#xgb_test_result  = np.zeros(test_ids.shape[0])\n#xgb_train_result = np.zeros(train_ids.shape[0])\ncounter = 0","9015759c":"print('\\nLightGBM\\n')\n\nfor train_index, test_index in skf.split(train_ids, y_train):\n    \n    print('Fold {}\\n'.format(counter + 1))\n    \n    train = load_npz('train.npz')\n    X_fit = vstack([train[train_index[i*m:(i+1)*m]] for i in range(train_index.shape[0] \/\/ m + 1)])\n    X_val = vstack([train[test_index[i*m:(i+1)*m]]  for i in range(test_index.shape[0] \/\/  m + 1)])\n    X_fit, X_val = csr_matrix(X_fit, dtype='float32'), csr_matrix(X_val, dtype='float32')\n    y_fit, y_val = y_train[train_index], y_train[test_index]\n    \n    del train\n    gc.collect()\n\n    lgb_model = lgb.LGBMClassifier(max_depth=-1,\n                                   n_estimators=30000,\n                                   learning_rate=0.05,\n                                   num_leaves=2**12-1,\n                                   colsample_bytree=0.28,\n                                   objective='binary', \n                                   n_jobs=-1)\n                                   \n    #xgb_model = xgb.XGBClassifier(max_depth=6,\n    #                              n_estimators=30000,\n    #                              colsample_bytree=0.2,\n    #                              learning_rate=0.1,\n    #                              objective='binary:logistic', \n    #                              n_jobs=-1)\n    \n                               \n    lgb_model.fit(X_fit, y_fit, eval_metric='auc', \n                  eval_set=[(X_val, y_val)], \n                  verbose=100, early_stopping_rounds=100)\n                  \n    #xgb_model.fit(X_fit, y_fit, eval_metric='auc', \n    #              eval_set=[(X_val, y_val)], \n    #              verbose=1000, early_stopping_rounds=300)\n\n    #lgb_train_result[test_index] += lgb_model.predict_proba(X_val)[:,1]\n    #xgb_train_result[test_index] += xgb_model.predict_proba(X_val)[:,1]\n    \n    del X_fit, X_val, y_fit, y_val, train_index, test_index\n    gc.collect()\n    \n    test = load_npz('test.npz')\n    test = csr_matrix(test, dtype='float32')\n    lgb_test_result += lgb_model.predict_proba(test)[:,1]\n    #xgb_test_result += xgb_model.predict_proba(test)[:,1]\n    counter += 1\n    \n    del test\n    gc.collect()\n    \n    #Stop fitting to prevent time limit error\n    #if counter == 3 : break","983db2f1":"#print('\\nLigthGBM VAL AUC Score: {}'.format(roc_auc_score(y_train, lgb_train_result)))\n#print('\\nXGBoost VAL AUC Score: {}'.format(roc_auc_score(y_train, xgb_train_result)))\n\nsubmission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['HasDetections'] = lgb_test_result \/ counter\nsubmission.to_csv('lgb_submission.csv', index=False)\n#submission['HasDetections'] = xgb_test_result \/ counter\n#submission.to_csv('xgb_submission.csv', index=False)\n#submission['HasDetections'] = 0.5 * lgb_test_result \/ counter  + 0.5 * xgb_test_result \/ counter \n##submission.to_csv('lgb_xgb_submission.csv', index=False)\n\nprint('\\nDone.')","ae2bb367":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\n%time\ntrain = reduce_mem_usage(train)"}}