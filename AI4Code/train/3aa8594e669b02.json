{"cell_type":{"a610a9f1":"code","97565925":"code","613bd42e":"code","2839b6da":"code","08feb682":"code","5cfa2582":"code","96fa48ed":"code","4a37d7f1":"code","ad2dab1b":"code","dbada842":"code","01e7acb1":"code","506c91fa":"code","7a9afa48":"code","30e83ce4":"code","9f9664c6":"code","3d33c989":"code","d4e09a05":"code","15cb2a95":"code","58509772":"code","5a01f69c":"code","5088894e":"code","e85c0a91":"code","f8c86525":"code","295861c9":"code","75f25ead":"code","1236500b":"markdown","daebbebd":"markdown","53cd1e1b":"markdown"},"source":{"a610a9f1":"import pandas as pd\nimport numpy as np\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nplt.style.use('fivethirtyeight')\nplt.style.use('seaborn-bright')\nimport seaborn as sns\n\nmatplotlib.rcParams['axes.unicode_minus'] = False # \uadf8\ub798\ud504\uc5d0\uc11c \ub9c8\uc774\ub108\uc2a4 \ud3f0\ud2b8 \uae68\uc9c0\ub294 \ubb38\uc81c\uc5d0 \ub300\ud55c \ub300\ucc98\nmatplotlib.rcParams[\"font.family\"] = \"Malgun Gothic\" \n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport lightgbm as lgb\n\nfrom sklearn.preprocessing import MinMaxScaler\nseed = 42\n\nfrom IPython.display import display\npd.options.display.max_columns = None","97565925":"def score_function(predict, actual):\n    \n    # predict = pd.read_csv(predict_label, engine='python') # \uc608\uce21 \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n    # actual = pd.read_csv(actual_label,engine='python') # \uc2e4\uc81c \ub2f5\uc548 \ud30c\uc77c \ubd88\ub7ec\uc624\uae30\n\n\n    predict.acc_id = predict.acc_id.astype('int')\n    predict = predict.sort_values(by =['acc_id'], axis = 0) # \uc608\uce21 \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c \n    predict = predict.reset_index(drop = True)\n    actual.acc_id = actual.acc_id.astype('int')\n    actual = actual.sort_values(by =['acc_id'], axis = 0) # \uc2e4\uc81c \ub2f5\uc548\uc744 acc_id \uae30\uc900\uc73c\ub85c \uc815\ub82c\n    actual =actual.reset_index(drop=True)\n    \n    if predict.acc_id.equals(actual.acc_id) == False:\n        print('acc_id of predicted and actual label does not match')\n        sys.exit() # \uc608\uce21 \ub2f5\uc548\uc758 acc_id\uc640 \uc2e4\uc81c \ub2f5\uc548\uc758 acc_id\uac00 \ub2e4\ub978 \uacbd\uc6b0 \uc5d0\ub7ec\ucc98\ub9ac \n    else:\n            \n        S, alpha, L, sigma = 30, 0.01, 0.1, 15  \n        cost, gamma, add_rev = 0,0,0 \n        profit_result = []\n        survival_time_pred = list(predict.survival_time)\n        amount_spent_pred = list(predict.amount_spent)\n        survival_time_actual = list(actual.survival_time)\n        amount_spent_actual = list(actual.amount_spent)    \n        for i in range(len(survival_time_pred)):\n            if survival_time_pred[i] == 64 :                 \n                cost = 0\n                optimal_cost = 0\n            else:\n                cost = alpha * S * amount_spent_pred[i]                    #\ube44\uc6a9 \uacc4\uc0b0\n                optimal_cost = alpha * S * amount_spent_actual[i]          #\uc801\uc815\ube44\uc6a9 \uacc4\uc0b0 \n            \n            if optimal_cost == 0:\n                gamma = 0\n            elif cost \/ optimal_cost < L:\n                gamma = 0\n            elif cost \/ optimal_cost >= 1:\n                gamma = 1\n            else:\n                gamma = (cost)\/((1-L)*optimal_cost) - L\/(1-L)              #\ubc18\uc751\ub960 \uacc4\uc0b0\n            \n            if survival_time_pred[i] == 64 or survival_time_actual[i] == 64:\n                T_k = 0\n            else:\n                T_k = S * np.exp(-((survival_time_pred[i] - survival_time_actual[i])**2)\/(2*(sigma)**2))    #\ucd94\uac00 \uc0dd\uc874\uae30\uac04 \uacc4\uc0b0\n                \n            add_rev = T_k * amount_spent_actual[i]                         #\uc794\uc874\uac00\uce58 \uacc4\uc0b0\n    \n           \n            profit = gamma * add_rev - cost                                #\uc720\uc800\ubcc4 \uae30\ub300\uc774\uc775 \uacc4\uc0b0\n            profit_result.append(profit)\n            \n        score = sum(profit_result) \n    return score","613bd42e":"train = pd.read_csv('..\/input\/bigcontest2019\/preprocessing.csv')\ntest1 = pd.read_csv('..\/input\/bigcontest2019\/preprocessing_test1.csv')\ntest2 = pd.read_csv('..\/input\/bigcontest2019\/preprocessing_test2.csv')\nvalidation_acc = pd.read_csv('..\/input\/bigcontest2019\/train_valid_user_id.csv')\n\nprint('Train set:', train.shape)\nprint('Test1 set:', test1.shape)\nprint('Test2 set:', test2.shape)\nprint('validation set:', validation_acc.shape)","2839b6da":"train.head()","08feb682":"train_idx = validation_acc[validation_acc.set=='Train'].acc_id\nvalid_idx = validation_acc[validation_acc.set=='Validation'].acc_id\n\ntrain_set = train[train.acc_id.isin(train_idx)]\nvalid_set = train[train.acc_id.isin(valid_idx)]\n\nprint('Train set:',train_set.shape)\nprint('Valid set:',valid_set.shape)","5cfa2582":"train_set['is_survive'] = train_set['survival_time'].apply(lambda x : 1 if x == 64 else 0)\ntrain_set['total_amount_spent'] = train_set['survival_time'] * train_set['amount_spent']\n\nvalid_set['is_survive'] = valid_set['survival_time'].apply(lambda x: 1 if x == 64 else 0)\nvalid_set['total_amount_spent'] = valid_set['survival_time'] * valid_set['amount_spent']\n\nx_train_amount = train_set.loc[train_set['total_amount_spent'] != 0].drop(columns = ['acc_id','survival_time','amount_spent','is_survive','total_amount_spent'])\nx_train_survival = train_set.drop(columns = ['acc_id','survival_time','amount_spent','is_survive','total_amount_spent'])\n\ny_train_amount = train_set.loc[train_set['total_amount_spent'] != 0].total_amount_spent\ny_train_survival = train_set['is_survive']\n\nprint('Train Dataset Shape:',x_train_survival.shape)\nprint('Train Dataset without Total Amount Spent 0 Shape: ',x_train_survival.shape)\nprint('Train Target Survival Dataset Shape: ',y_train_survival.shape)\nprint('Train Target Total Amount Spent without 0 Shape:', y_train_amount.shape)","96fa48ed":"x_valid_survival = valid_set.drop(columns = ['acc_id','survival_time','amount_spent','is_survive','total_amount_spent'])\nx_valid_amount = valid_set.loc[valid_set['total_amount_spent'] != 0].drop(columns = ['acc_id','survival_time','amount_spent','is_survive','total_amount_spent'])\n\ny_valid_survival = valid_set.is_survive\ny_valid_amount = valid_set.loc[valid_set['total_amount_spent'] != 0].total_amount_spent\n\nprint('valid Dataset Shape:',x_valid_survival.shape)\nprint('valid Dataset without Total Amount Spent 0 Shape: ',x_valid_survival.shape)\nprint('valid Target Survival Dataset Shape: ',y_valid_survival.shape)\nprint('valid Target Total Amount Spent without 0 Shape:', y_valid_amount.shape)","4a37d7f1":"lgb_params_amount={'learning_rate':0.01,\n                   'max_depth': 5,\n                   'boosting': 'gbdt',\n                   'seed': 42,\n                   'objective': 'regression',\n                   'metric':'rmse'}\n\nlgb_params_survival={'learning_rate':0.01,\n                     'max_depth': 5,\n                     'boosting': 'gbdt',\n                     'seed': 42,\n                     'objective': 'binary',\n                     'metric':'auc'}","ad2dab1b":"lgb_train_amount = lgb.Dataset(x_train_amount, y_train_amount)\nlgb_train_survival = lgb.Dataset(x_train_survival, y_train_survival)\n\nlgb_valid_amount = lgb.Dataset(x_valid_amount, y_valid_amount)\nlgb_valid_survival = lgb.Dataset(x_valid_survival, y_valid_survival)","dbada842":"lgb_amount = lgb.train(lgb_params_amount, \n                       lgb_train_amount,\n                       valid_sets = [lgb_train_amount,lgb_valid_amount],\n                       num_boost_round = 5000,\n                       verbose_eval = 100,\n                       early_stopping_rounds = 50)\n\nlgb_amount_pred = lgb_amount.predict(valid_set.drop(columns = ['acc_id','survival_time','amount_spent','is_survive','total_amount_spent']),num_iteration = lgb_amount.best_iteration)\nlgb_amount_pred = pd.Series(lgb_amount_pred).apply(lambda x: 0 if x < 0 else x)\n\nlgb_survival = lgb.train(lgb_params_survival, \n                       lgb_train_survival,\n                       valid_sets = [lgb_train_survival, lgb_valid_survival],\n                       num_boost_round = 5000,\n                       verbose_eval = 100,\n                       early_stopping_rounds = 50)\n\nlgb_survival_pred = lgb_survival.predict(valid_set.drop(columns = ['acc_id','survival_time','amount_spent','is_survive','total_amount_spent']),num_iteration = lgb_survival.best_iteration)\nlgb_survival_pred = pd.Series(lgb_survival_pred).apply(lambda x: 0 if x < 0 else x)","01e7acb1":"lgb_pred_df = pd.DataFrame({'acc_id': valid_set.acc_id.values,\n                            'survival_time': lgb_survival_pred,\n                            'amount_spent': lgb_amount_pred})\n\nprint('lgb_pred_df shape: ',lgb_pred_df.shape)\n\nscaler_amount = MinMaxScaler(feature_range = [0, 74])\nscaler_survival = MinMaxScaler(feature_range = [1, 64])\n\nlgb_pred_df['survival_time'] = scaler_survival.fit_transform(lgb_pred_df['survival_time'].values.reshape(-1,1)).round()\n\nlgb_pred_df['amount_spent'] = lgb_pred_df['amount_spent'] \/ lgb_pred_df['survival_time']\nlgb_pred_df['amount_spent'] = scaler_amount.fit_transform(lgb_pred_df['amount_spent'].values.reshape(-1,1))\n\n\nlgb_valid_score = score_function(lgb_pred_df, valid_set[['acc_id','survival_time','amount_spent']])\ntrue_score = score_function(valid_set[['acc_id','survival_time','amount_spent']], valid_set[['acc_id','survival_time','amount_spent']])\n\nprint('Light GBM score: ',lgb_valid_score)\nprint('true score: ',true_score)","506c91fa":"from sklearn.ensemble import GradientBoostingRegressor, GradientBoostingClassifier\nfrom sklearn.ensemble.partial_dependence import partial_dependence, plot_partial_dependence","7a9afa48":"X = x_train_survival\ny = y_train_survival\n\nsns.set(rc={\"axes.titlesize\":20,\n            'axes.labelsize':10,\n            'figure.figsize':(18, 20),\n            'xtick.labelsize':10,\n            'ytick.labelsize':10})\nsns.set_style(\"whitegrid\")\n\nmodel = GradientBoostingClassifier()\nmodel.fit(X, y)\n\nfig, ax = plot_partial_dependence(model,       \n                                  features=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14], # column numbers of plots we want to show\n                                  X=X,            # raw predictors data.\n                                  feature_names=['2_roll_mean2_game_money_change', '1_game_money_change','4_game_money_change',\n                                                 '4_roll_mean2_level', '4_level', '4_playtime', '2_game_money_change',\n                                                 '2_roll_sd2_npc_kill', '4_private_shop', '4_roll_mean2_game_money_change',\n                                                 '2_roll_mean2_solo_exp','1_playtime', '1_solo_exp', '4_npc_kill', '4_roll_sd2_playtime'], # labels on graphs\n                                  grid_resolution=10) # number of values to plot on x axis\n\nfig.tight_layout()","30e83ce4":"X = x_train_amount\ny = y_train_amount\n\nsns.set(rc={\"axes.titlesize\":20,\n            'axes.labelsize':10,\n            'figure.figsize':(18.0, 20),\n            'xtick.labelsize':10,\n            'ytick.labelsize':10})\nsns.set_style(\"whitegrid\")\n\nmodel = GradientBoostingRegressor()\nmodel.fit(X, y)\n\nfig, ax = plot_partial_dependence(model,       \n                                   features=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14], # column numbers of plots we want to show\n                                   X=X,            # raw predictors data.\n                                   feature_names=['3_roll_mean2_amount_spent', '1_amount_spent', '3_amount_spent',\n                                                  '4_roll_mean2_amount_spent', 'buy_item_amount_max', '4_amount_spent',\n                                                  '2_roll_mean2_fishing','2_roll_mean2_amount_spent' ,'2_roll_sd2_npc_kill', '3_roll_sd2_solo_exp',\n                                                  '4_pledge_cnt', '4_game_money_change','4_roll_sd2_solo_exp',\n                                                  '4_roll_mean2_game_money_change', '4_roll_mean2_solo_exp'], # labels on graphs\n                                   grid_resolution=10) # number of values to plot on x axis\n\nfig.tight_layout()","9f9664c6":"from pycebox.ice import ice, ice_plot","3d33c989":"x_train_amount_df = pd.DataFrame(x_train_amount, columns=x_train_amount.columns)","d4e09a05":"x_train_amount_df.shape","15cb2a95":"ice_df = ice(data=x_train_amount_df, column='2_roll_mean2_game_money_change',\n             predict = lgb_amount.predict)\n\nrcParams['figure.figsize'] = 8,6\n\nice_plot(ice_df , c='dimgray', linewidth=0.3)\nplt.ylabel('Pred. AV %ile')\nplt.xlabel('thalach')\nplt.show()","58509772":"from matplotlib import pyplot as plt\nfrom pdpbox import pdp, get_dataset, info_plots\nfrom matplotlib import rcParams","5a01f69c":"survival_columns = ['2_roll_mean2_game_money_change', '1_game_money_change','4_game_money_change',\n                    '4_roll_mean2_level', '4_level', '4_playtime', '2_game_money_change',\n                    '2_roll_sd2_npc_kill', '4_private_shop', '4_roll_mean2_game_money_change',\n                    '2_roll_mean2_solo_exp','1_playtime', '1_solo_exp', '4_npc_kill', '4_roll_sd2_playtime']\n\namount_columns = ['3_roll_mean2_amount_spent', '1_amount_spent', '3_amount_spent',\n                  '4_roll_mean2_amount_spent', 'buy_item_amount_max', '4_amount_spent',\n                  '2_roll_mean2_fishing', '2_roll_sd2_npc_kill', '3_roll_sd2_solo_exp',\n                  '4_roll_sd2_solo_exp', '4_roll_mean2_game_money_change', '4_roll_mean2_solo_exp']","5088894e":"def pdpbox_survival(features):\n    # Create the data that we will plot\n    pdp_goals = pdp.pdp_isolate(model=lgb_survival, dataset=x_train_survival,\n                                model_features=x_valid_survival.columns.tolist(), feature=features)\n    # plot it\n    pdp.pdp_plot(pdp_goals, features)\n    plt.show()\n    \ndef pdpbox_amount(features):\n    # Create the data that we will plot\n    pdp_goals = pdp.pdp_isolate(model=lgb_amount, dataset=x_train_amount,\n                                model_features=x_valid_amount.columns.tolist(), feature=features)\n    # plot it\n    pdp.pdp_plot(pdp_goals, features)\n    plt.show()","e85c0a91":"for i in survival_columns:\n    pdpbox_survival(i)","f8c86525":"for i in amount_columns:\n    pdpbox_amount(i)","295861c9":"# figure size in inches\nrcParams['figure.figsize'] = 15,10\nsns.set_style(\"whitegrid\")\npdp_interaction = pdp.pdp_interact(model=lgb_amount, dataset=x_train_amount, model_features=x_valid_amount.columns.tolist(), features=['1_playtime', '2_playtime'])\npdp.pdp_interact_plot(pdp_interact_out=pdp_interaction, feature_names=['2_roll_mean2_game_money_change', '1_game_money_change'], plot_type='contour')\nplt.show()","75f25ead":"# figure size in inches\nrcParams['figure.figsize'] = 15,10\nsns.set_style(\"whitegrid\")\npdp_interaction = pdp.pdp_interact(model=lgb_amount, dataset=x_train_amount, model_features=x_valid_amount.columns.tolist(), features=['1_playtime', '2_playtime'])\npdp.pdp_interact_plot(pdp_interact_out=pdp_interaction, feature_names=['2_roll_mean2_game_money_change', '1_game_money_change'],\n                      x_quantile=True, plot_type='contour', plot_pdp=True)\nplt.show()","1236500b":"# \ubd80\ubd84\uc758\uc874\ub3c4","daebbebd":"# \ubd80\ubd84\uc758\uc874\ub3c4 \ud574\uc11d","53cd1e1b":"# \uac1c\ubcc4 \uc870\uac74\ubd80 \uae30\ub300(ICE)"}}