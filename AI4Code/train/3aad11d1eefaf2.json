{"cell_type":{"ed69d635":"code","836ed6ff":"code","17c7aa32":"code","bad4ff5d":"code","1b541253":"code","0949f9c4":"code","85acb0fd":"code","c093b2eb":"code","39998c63":"code","48178da1":"code","aa68f7c3":"code","d3b9a1d4":"code","e04e6f80":"code","faad0811":"code","be24e03e":"code","28f2634f":"code","de61a2ed":"code","5660a871":"code","60dbd0e3":"code","14607dfb":"code","f9939b31":"code","d28c07d7":"code","db0fd939":"code","3b94eb8b":"code","573e80c5":"code","6c0c4400":"code","7d42fb5b":"code","eddaaa7c":"code","f7bae8ba":"code","a36bb928":"code","1962ee72":"code","83e36f6a":"code","6dd0d666":"code","633170cd":"code","7f40181f":"markdown","525bcceb":"markdown","b9e18e20":"markdown","380a7922":"markdown","0135e20d":"markdown","65494b5d":"markdown","14b609e4":"markdown","42b5d73d":"markdown","d30e96d7":"markdown","2b9c10fe":"markdown","57da0a8b":"markdown","9336fe11":"markdown","b2cc797b":"markdown","afc5fb5f":"markdown","4dd05515":"markdown","305ec952":"markdown","0daba54a":"markdown","3633f6e2":"markdown","2d521af5":"markdown","749d0b31":"markdown","86c56173":"markdown","2b6bf3f2":"markdown","5c9f2401":"markdown","9c5ba1ee":"markdown"},"source":{"ed69d635":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","836ed6ff":"# \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 LightAutoML\n!pip install -U lightautoml","17c7aa32":"# \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 VIN-\u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439\n!pip install vininfo","bad4ff5d":"import logging\nimport time\nlogging.basicConfig(format='[%(asctime)s] (%(levelname)s): %(message)s', level=logging.INFO)\n\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling\n\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import OneHotEncoder\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task\n\nfrom vininfo import Vin","1b541253":"def vin_to_dic(vin_no):\n    \"\"\"\u041f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 VIN-\u043d\u043e\u043c\u0435\u0440 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\"\"\"\n    vin_dic = {}\n    \n    try:\n        vin_info = Vin(vin_no)\n\n        vin_dic['checksum_is_ok'] = vin_info.verify_checksum()\n        vin_dic['country'] = vin_info.country\n        vin_dic['manufacturer'] = vin_info.manufacturer\n        vin_dic['region'] = vin_info.region\n        vin_dic['produce_year'] = vin_info.years[0]\n        vin_dic['model_year'] = vin_info.years[1]\n        vin_dic['wmi'] = vin_info.wmi      # \u0432\u0441\u0435\u043c\u0438\u0440\u043d\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0438\u0437\u0433\u043e\u0442\u043e\u0432\u0438\u0442\u0435\u043b\u044f\n        vin_dic['vds'] = vin_info.vds[:-1] # \u0442\u0435\u0445\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \n        vin_dic['vis'] = vin_info.vis      # \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n\n        details = vin_info.details\n        if details:\n            vin_dic['details'] = True\n            vin_dic['body'] = str(details.body)\n            vin_dic['engine'] = str(details.engine)\n            vin_dic['model'] = str(details.model)\n            vin_dic['plant'] = str(details.plant)\n            vin_dic['serial'] = str(details.serial)\n            vin_dic['transmission'] = str(details.transmission)\n        else:\n            vin_dic['details'] = False\n            \n            for field in ['body', 'engine', 'model', 'plant', 'serial', 'transmission']:\n                vin_dic[field] = None\n    except:\n        vin_dic['checksum_is_ok'] = False\n    \n    return vin_dic","0949f9c4":"# \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 vininfo\nfor vin_no in ['HHF167G','KMHTC6AE3GU293912', 'JTNKHMBX7K1030253', 'XTAGFK330JY144213']:\n    print('VIN:', vin_no)\n    \n    for key, value in vin_to_dic(vin_no).items():\n        print(f'\\t{key}:\\t{value}')\n        \n    print()","85acb0fd":"train_data = pd.read_csv('..\/input\/lightautomlcourse-hw1\/train_data.csv')","c093b2eb":"train_data.profile_report()","39998c63":"test_data = pd.read_csv('..\/input\/lightautomlcourse-hw1\/test_data.csv')","48178da1":"test_data.profile_report()","aa68f7c3":"submission = pd.read_csv('..\/input\/lightautomlcourse-hw1\/sample_submission.csv')\nsubmission.head()","d3b9a1d4":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c \u0446\u0435\u043d\u044b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u043c\u0430\u0440\u043a\u0438 \u0441 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c \u043f\u0440\u043e\u0431\u0435\u0433\u043e\u043c\n# \u043e\u0442 \u0433\u043e\u0434\u0430 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\nprius_data = train_data[(train_data.vehicle_manufacturer == 'TOYOTA') &\n                        (train_data.vehicle_model == 'Prius') &\n                        (train_data.current_mileage > 50000) &\n                        (train_data.current_mileage < 100000)][['deal_type', 'vehicle_year', 'final_price']]\nsns.scatterplot(data=prius_data, x='vehicle_year', y='final_price', hue='deal_type');","e04e6f80":"def dataset_strip_strings(data):\n    \"\"\"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044f\u0445 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445\"\"\"\n    for field in data.select_dtypes(include='object'):\n        data[field] = data[field].str.strip()\n    return data","faad0811":"train_data = dataset_strip_strings(train_data)\ntest_data = dataset_strip_strings(test_data)","be24e03e":"train_manufacturers = set(train_data.vehicle_manufacturer.value_counts(sort=False).index.to_list())\ntest_manufacturers  = set(test_data.vehicle_manufacturer.value_counts(sort=False).index.to_list())\n\nno_in_train = list(test_manufacturers - train_manufacturers)\nprint(f'{\", \".join(no_in_train)} \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u043b\u0438\u0441\u044c \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 :-)')\n\nno_in_test = list(train_manufacturers - test_manufacturers)\nprint(f'{\", \".join(no_in_test)} \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u043b\u0438\u0441\u044c \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 :-)')","28f2634f":"# \u0443\u0434\u0430\u043b\u0438\u043c \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432 \u0442\u0435\u0441\u0442\u0435\nprint(train_data.shape)\ntrain_data = train_data.drop(index=train_data[train_data.vehicle_manufacturer.isin(no_in_test)].index)\nprint(train_data.shape)","de61a2ed":"#train_data = train_data.drop(index=train_data[train_data.drop(columns=['row_ID']).duplicated()].index)","5660a871":"current_year = max(train_data['vehicle_year'].max(), test_data['vehicle_year'].max()) + 1\nprint('Dataset year:', current_year)","60dbd0e3":"def concat_manufacturer_and_model(data):\n    \"\"\"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0438 \u043c\u043e\u0434\u0435\u043b\u0438\"\"\"\n    data['vehicle_full_model'] = data['vehicle_manufacturer'] + data['vehicle_model'].fillna('')","14607dfb":"concat_manufacturer_and_model(train_data)\nconcat_manufacturer_and_model(test_data)","f9939b31":"train_data.deal_type.unique()","d28c07d7":"sale_sign = 'For Sale'\n\ntrain_data_sale = train_data[train_data.deal_type == sale_sign]\ntrain_data_rent = train_data[train_data.deal_type != sale_sign]\n\ntest_data_sale  = test_data[test_data.deal_type == sale_sign]\ntest_data_rent  = test_data[test_data.deal_type != sale_sign]","db0fd939":"train_data_sale['vin_cum_count'] = 0\ntest_data_sale['vin_cum_count'] = 0\n\nvin_cumcount_train = train_data_sale[~train_data_sale.car_vin.isna()].groupby('car_vin' )['car_vin'].cumcount() + 1\ntrain_data_sale.loc[vin_cumcount_train.index, 'vin_cum_count'] = vin_cumcount_train\n\nvin_cumcount_test = test_data_sale[~test_data_sale.car_vin.isna()].groupby('car_vin' )['car_vin'].cumcount() + 1\ntest_data_sale.loc[vin_cumcount_test.index, 'vin_cum_count'] = vin_cumcount_test","3b94eb8b":"train_data_sale[train_data_sale.vin_cum_count > 10]","573e80c5":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043f\u0435\u0440\u0435\u043a\u0443\u043f\u0449\u0438\u043a\u043e\u0432\nprint('\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435:')\ndisplay(train_data_sale[train_data_sale.car_vin == '4T1BD1FK5EU128824'][['vin_cum_count', 'vehicle_manufacturer', 'vehicle_model', 'car_vin', 'current_mileage', 'final_price']])\nprint('\u0422\u0435\u0441\u0442:')\ndisplay(test_data_sale[test_data_sale.car_vin == '4T1BD1FK5EU128824'][['vin_cum_count', 'vehicle_manufacturer', 'vehicle_model', 'car_vin', 'current_mileage']])","6c0c4400":"def fill_field_na(data, group_by_fields, field_name, default_value):\n    \"\"\"\u0417\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0432 field_name \u043f\u043e \u043c\u0435\u0434\u0438\u0430\u043d\u0435 \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u043f\u043e\u043b\u044e group_by_fields\"\"\"\n    data[field_name] = ( data.groupby(by=group_by_fields, dropna=False)[field_name]\n                            .transform(lambda x: x.fillna(x.mode()).fillna(default_value)) )","7d42fb5b":"def create_sale_feats(data, train_data):\n    data = data.copy()\n\n    # knn\n    #knn_fields = [\n    #    'vehicle_manufacturer',\n    #    'vehicle_model',\n    #    'vehicle_year',\n    #    'wheels',\n    #    'vehicle_color',\n    #    'vehicle_interior_color',\n    #    'car_leather_interior',\n    #    'deal_type'\n    #]\n    #enc = OneHotEncoder(handle_unknown='ignore')\n    #transformed_train = enc.fit_transform(train_data[knn_fields])\n    #neigh = KNeighborsRegressor(n_neighbors=3)\n    #neigh.fit(transformed_train, train_data[TARGET_NAME])\n    #data['knn_price'] = neigh.predict(enc.transform(data[knn_fields]))\n\n    # is VIN unknown?\n    data['car_vin_is_na'] = data['car_vin'].isna()\n    \n    # VIN parsing\n    vin_data = data['car_vin'].apply(vin_to_dic).apply(pd.Series)\n    data = data.join(vin_data)\n    \n    # \u043e\u043a\u0440\u0443\u0433\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0434\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0430 \u043f\u043e VIN \u0434\u043e \u0446\u0435\u043b\u043e\u0433\u043e\n    data['produce_year'] = data['produce_year'].fillna(data['vehicle_year']).astype(int)\n\n    # \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n    data['vehicle_age'] = current_year - data['produce_year']\n    data['vehicle_age_1'] = 1 \/ data['vehicle_age']\n    data['vehicle_age_1_log'] = 1 \/ np.log(data['vehicle_age'] + 1)\n    \n    # \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043c\u043e\u0434\u0435\u043b\u0438\n    data['model_year'] = data['model_year'].fillna(data['produce_year'] - data['vehicle_age']).astype(int)\n    data['model_age'] = current_year - data['model_year']\n    data['model_age_1'] = 1 \/ data['model_age']\n    data['model_age_1_log'] = 1 \/ np.log(data['model_age'] + 1)\n    # polynomial model age\n    data['model_age_2'] = data['model_age'] ** 2\n    \n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0435\u0433\u043e VIN\n    temp = train_data[~train_data.car_vin.isna()][['car_vin', 'final_price']]\n    mean_prices = temp.groupby(['car_vin'])['final_price'].agg(['mean']).reset_index()\n    mean_prices.columns = ['vehicle_full_model', 'mean_price']\n    data = data.merge(mean_prices, how='left',on='vehicle_full_model')\n\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u0438 \u043c\u0430\u0440\u043a\u0435\n    temp = train_data[['vehicle_full_model', 'final_price']]\n    mean_prices = temp.groupby(['vehicle_full_model'])['final_price'].agg(['mean', 'max']).reset_index()\n    mean_prices.columns = ['vehicle_full_model', 'mean_price1', 'max_price']\n    data = data.merge(mean_prices, how='left',on='vehicle_full_model')\n    data['mean_price'] = data['mean_price'].fillna(data['mean_price1'])\n    data = data.drop(columns=['mean_price1'])\n\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e\n    temp = train_data[['vehicle_manufacturer', 'final_price']]\n    mean_prices = temp.groupby(['vehicle_manufacturer'])['final_price'].agg(['mean', 'max']).reset_index()\n    mean_prices.columns = ['vehicle_manufacturer', 'mean_price1', 'max_price1']\n    data = data.merge(mean_prices, how='left',on='vehicle_manufacturer')\n    data['mean_price'] = data['mean_price'].fillna(data['mean_price1'])\n    data['max_price'] = data['max_price'].fillna(data['max_price1'])\n    data = data.drop(columns=['mean_price1', 'max_price1'])\n    \n    # \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043d\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\n    data['mean_price_x_age'] = data['mean_price'] * data['vehicle_age']\n\n    data['current_mileage_2'] = data['current_mileage'] ** 2\n\n    data['vehicle_model_vds'] = data['vehicle_full_model'] + data['vds'].fillna('')\n\n    data['luxury'] = data['vehicle_manufacturer'].isin([\n                            'JAGUAR',\n                            'MASERATI',\n                            'FERRARI',\n                            'BENTLEY',\n                            'ROLLS-ROYCE',\n                            'LAMBORGHINI'])\n    \n    # fillna\n    group_by_fields = ['vehicle_manufacturer', 'vehicle_model']\n    fill_field_na(data, group_by_fields, 'doors_cnt', '4\/5')\n    fill_field_na(data, group_by_fields, 'country', 'World')\n    fill_field_na(data, group_by_fields, 'manufacturer', 'na')\n    fill_field_na(data, group_by_fields, 'region', 'World')\n    group_by_fields = ['vehicle_manufacturer', 'vehicle_model', 'vehicle_category', 'vehicle_year']\n    fill_field_na(data, group_by_fields, 'wmi', 'na')\n        \n    return data","eddaaa7c":"def create_rent_feats(data, train_data):\n    data = data.copy()\n\n    # knn\n    #knn_fields = [\n    #    'vehicle_manufacturer',\n    #    'vehicle_model',\n    #    'vehicle_year',\n    #    'wheels',\n    #    'vehicle_color',\n    #    'vehicle_interior_color',\n    #    'car_leather_interior',\n    #    'deal_type'\n    #]\n    #enc = OneHotEncoder(handle_unknown='ignore')\n    #transformed_train = enc.fit_transform(train_data[knn_fields])\n    #neigh = KNeighborsRegressor(n_neighbors=3)\n    #neigh.fit(transformed_train, train_data[TARGET_NAME])\n    #data['knn_price'] = neigh.predict(enc.transform(data[knn_fields]))\n    \n    # \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f\n    data['vehicle_age'] = current_year - data['vehicle_year']\n    data['vehicle_age_1'] = 1 \/ data['vehicle_age']\n    data['vehicle_age_1_log'] = 1 \/ np.log(data['vehicle_age'] + 1)\n        \n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0435\u0433\u043e VIN\n    temp = train_data[~train_data.car_vin.isna()][['car_vin', 'final_price']]\n    mean_prices = temp.groupby(['car_vin'])['final_price'].agg(['mean']).reset_index()\n    mean_prices.columns = ['vehicle_full_model', 'mean_price']\n    data = data.merge(mean_prices, how='left',on='vehicle_full_model')\n\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u0438 \u043c\u0430\u0440\u043a\u0435\n    temp = train_data[['vehicle_full_model', 'final_price']]\n    mean_prices = temp.groupby(['vehicle_full_model'])['final_price'].agg(['mean', 'max']).reset_index()\n    mean_prices.columns = ['vehicle_full_model', 'mean_price1', 'max_price']\n    data = data.merge(mean_prices, how='left',on='vehicle_full_model')\n    data['mean_price'] = data['mean_price'].fillna(data['mean_price1'])\n    data = data.drop(columns=['mean_price1'])\n\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0441 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u043f\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044e\n    temp = train_data[['vehicle_manufacturer', 'final_price']]\n    mean_prices = temp.groupby(['vehicle_manufacturer'])['final_price'].agg(['mean', 'max']).reset_index()\n    mean_prices.columns = ['vehicle_manufacturer', 'mean_price1', 'max_price1']\n    data = data.merge(mean_prices, how='left',on='vehicle_manufacturer')\n    data['mean_price'] = data['mean_price'].fillna(data['mean_price1'])\n    data['max_price'] = data['max_price'].fillna(data['max_price1'])\n    data = data.drop(columns=['mean_price1', 'max_price1'])\n    \n    # \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0435\u0439 \u043d\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\n    data['mean_price_x_age'] = data['mean_price'] * data['vehicle_age']\n    \n    data['current_mileage_2'] = data['current_mileage'] ** 2\n    \n    return data","f7bae8ba":"N_THREADS = 4 # threads cnt for lgbm and linear models\nN_FOLDS = 5 # folds cnt for AutoML\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 3 * 60 * 60 # Time in seconds for automl run\nTARGET_NAME = 'final_price' # Target column name","a36bb928":"def run_model(train_data, test_data, drop_fields, timeout=TIMEOUT):\n    \"\"\"\u041e\u0431\u0443\u0447\u0430\u0435\u0442 LightAutoML \u043d\u0430 train_data, \u043e\u0442\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438\u0437 drop_fields.\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 \u043d\u0430 train_data \u0438 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0434\u043b\u044f test_data.\"\"\"\n    task = Task('reg', loss='mae', metric = 'mae')\n    \n    roles = {\n        'target': TARGET_NAME,\n        'drop': drop_fields,\n    }\n\n    #automl = TabularAutoML(\n    automl = TabularUtilizedAutoML(\n                task = task,\n                timeout = TIMEOUT,\n                cpu_limit = N_THREADS,\n                general_params = {\n                    'nested_cv': False,\n                    'use_algos': [\n                        ['linear_l2', 'lgb', 'lgb_tuned'],\n                        ['linear_l2', 'lgb_tuned', 'cb_tuned'],\n                        #['lgb', 'lgb_tuned', 'cb', 'cb_tuned'],\n                        #['lgb', 'lgb_tuned']\n                    ]\n                },\n                reader_params = {'n_jobs': N_THREADS, 'cv': N_FOLDS, 'random_state': RANDOM_STATE},\n            )\n\n    oof_pred = automl.fit_predict(train_data, roles = roles)\n    error_value = mean_absolute_error(train_data[TARGET_NAME].values, oof_pred.data[:, 0])\n    print(f'\u041e\u0448\u0438\u0431\u043a\u0430 \u043d\u0430 out-of-fold \u0432\u044b\u0431\u043e\u0440\u043a\u0435: {error_value}')\n\n    try:\n        fast_fi = automl.get_feature_scores('fast')\n        fast_fi.set_index('Feature')['Importance'].plot.bar(figsize = (16, 10), grid = True)\n        plt.show()\n    except:\n        print('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0434\u0438\u0430\u0433\u0440\u0430\u043c\u043c\u044b \u0432\u0430\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.')\n\n    test_pred = automl.predict(test_data)\n\n    return  error_value, test_pred","1962ee72":"sale_error, sale_pred = run_model(create_sale_feats(train_data_sale, train_data_sale),\n                                  create_sale_feats(test_data_sale, train_data_sale),\n                                  ['row_ID',\n                                   'vis', 'vin_cum_count'],\n                                  timeout = 4 * 60 * 60)","83e36f6a":"rent_error, rent_pred = run_model(create_rent_feats(train_data_rent, train_data_rent),\n                                  create_rent_feats(test_data_rent, train_data_rent),\n                                  ['row_ID'],\n                                  timeout = 1 * 60 * 60)","6dd0d666":"submission.loc[test_data_sale.index, TARGET_NAME] = sale_pred.data[:, 0]\nsubmission.loc[test_data_rent.index, TARGET_NAME] = rent_pred.data[:, 0]\nsubmission.head()","633170cd":"submission.to_csv('LightAutoML-2021-HW1.csv', index = False)","7f40181f":"### \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u0440\u043e\u0434\u0430\u0436 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u043f\u043e \u0435\u0433\u043e VIN","525bcceb":"## \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","b9e18e20":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\n\n### \u041e\u0431\u0449\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","380a7922":"### \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0430\u0440\u0435\u043d\u0434\u044b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439","0135e20d":"## \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\n\n### \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0433\u043e\u0434\u0430 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u0440\u0430\u0441\u0441\u0447\u0435\u0442\u0430 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439","65494b5d":"\u041d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0443\u0436\u0435 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u043f\u0440\u043e\u0434\u0430\u0436 \u0431\u0435\u0437 \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0431\u044b\u043b\u0438 :-)","14b609e4":"## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u043f\u0435\u0440\u0432\u0438\u0447\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445\n\n### \u041e\u0431\u0443\u0447\u0430\u044e\u0449\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430","42b5d73d":"## \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u0435","d30e96d7":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u043e\u0434\u0430\u0436\u0438","2b9c10fe":"### \u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u043e\u0440\u043e\u043a \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u0438 \u0430\u0440\u0435\u043d\u0434\u044b","57da0a8b":"# LightAutoML course homework 1\n\nPredict car prices using LightAutoML framework\n\n[InClass Prediction Competition](https:\/\/www.kaggle.com\/c\/lightautomlcourse-hw1\/leaderboard)","9336fe11":"### \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0438 \u043c\u043e\u0434\u0435\u043b\u0438","b2cc797b":"**\u0412\u044b\u0432\u043e\u0434**: \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0434\u0432\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 - \u0434\u043b\u044f \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u0438 \u0430\u0440\u0435\u043d\u0434\u044b (\u043f\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 `deal_type`), \u0442\u0430\u043a \u043a\u0430\u043a \u0446\u0435\u043d\u044b \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u044b \u0432 \u0440\u0430\u0437\u043d\u043e\u043c \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0435","afc5fb5f":"### \u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 \u0430\u0440\u0435\u043d\u0434\u044b","4dd05515":"### \u041f\u0440\u0438\u043c\u0435\u0440 \u0444\u0430\u0439\u043b\u0430 \u0441 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f\u043c\u0438","305ec952":"### \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432\n\n\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432 \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u0438\u0437-\u0437\u0430 [\u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439](#\u041f\u043e\u0434\u0441\u0447\u0435\u0442-\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430-\u043f\u0440\u043e\u0434\u0430\u0436-\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f-\u043f\u043e-\u0435\u0433\u043e-VIN) \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445.","0daba54a":"### \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f","3633f6e2":"\u041d\u0435 \u0431\u0443\u0434\u0435\u043c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0442\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0440\u0443\u0447\u0438\u043c \u044d\u0442\u043e LightAutoML :-)","2d521af5":"### \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439","749d0b31":"### \u0422\u0435\u0441\u0442\u043e\u0432\u0430\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0430","86c56173":"## \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0430\u043d\u043e\u043c\u0430\u043b\u0438\u0439\n\n### \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043b\u0438\u0448\u043d\u0438\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044f\u0445","2b6bf3f2":"### \u041f\u043e\u0438\u0441\u043a \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0434\u0430\u043d\u043d\u044b\u0445","5c9f2401":"## \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438\n\n### \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 VIN\n\nVIN Wiki ([\u043d\u0430 \u0440\u0443\u0441\u0441\u043a\u043e\u043c](https:\/\/ru.wikipedia.org\/wiki\/%D0%98%D0%B4%D0%B5%D0%BD%D1%82%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%BD%D1%8B%D0%B9_%D0%BD%D0%BE%D0%BC%D0%B5%D1%80_%D1%82%D1%80%D0%B0%D0%BD%D1%81%D0%BF%D0%BE%D1%80%D1%82%D0%BD%D0%BE%D0%B3%D0%BE_%D1%81%D1%80%D0%B5%D0%B4%D1%81%D1%82%D0%B2%D0%B0), [\u043d\u0430 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u043c](https:\/\/en.wikipedia.org\/wiki\/Vehicle_identification_number))\n\n[vininfo](https:\/\/pypi.org\/project\/vininfo\/) Extracts useful information from Vehicle Identification Number (VIN)","9c5ba1ee":"### \u0427\u0443\u0442\u044c-\u0447\u0443\u0442\u044c \u043f\u043e\u0434\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443\n\n... \u043b\u0438\u0448\u044c \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f, \u0447\u0442\u043e \u0435\u0441\u0442\u044c \u043c\u0430\u0440\u043a\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0432 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 :-)"}}