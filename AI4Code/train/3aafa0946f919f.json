{"cell_type":{"6162fc39":"code","3caf1daa":"code","8315ebbe":"code","c7e2da6b":"code","6c3621fd":"code","ce40a4b1":"code","0fd00f4f":"code","b07726f4":"code","12cd667e":"code","ddc8e9f0":"code","2a0d42d2":"code","7cbfb722":"code","90f5742e":"code","54118540":"code","0c74be8f":"code","2ab08558":"code","2a613f03":"code","c8b049a4":"code","3efcf5a7":"code","5faec0c5":"code","c854394c":"code","06be2832":"code","1f2cafea":"code","16c04ea1":"code","87d4b0d5":"code","03ef8868":"code","efdee734":"code","4801ca83":"code","40440df9":"code","e3e42c9d":"code","9942fc4f":"code","42657672":"markdown","69f82c38":"markdown","24240d92":"markdown","275959d5":"markdown","48b42bcc":"markdown","a09d3f34":"markdown","72ff2e0b":"markdown","5f09e4d2":"markdown","01918553":"markdown","e08306c1":"markdown","423058b0":"markdown"},"source":{"6162fc39":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n'''for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))'''\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3caf1daa":"from scipy.signal import convolve2d\nimport matplotlib.pyplot as plt\n\nkernel_1 = np.array([[-1, 0, 1],\n                   [-1, 0, 1],\n                   [-1, 0, 1]])\nkernel_2 = np.array([[-1, -1, -1],\n                   [0, 0, 0],\n                   [1, 1, 1]])\ndef edge(im):\n    out1 = convolve2d(im, kernel_1)\n    out2 = convolve2d(im, kernel_2)\n    new=np.sqrt(np.square(out1)+np.square(out2))\n    return new\n\ndef make(im):\n    im= cv2.cvtColor(im,cv2.COLOR_RGB2GRAY)\n    a=edge(im)\n    a=a[:128,:128]\n    im1=im.reshape(128,128,1)\n    im2=a.reshape(128,128,1)\n    return np.concatenate((im1,im2), axis=2)","8315ebbe":"import cv2 \nimport os \nimport glob \nimg_dir = \"\/kaggle\/input\/recognizance-2\/Data\/train\/Powerline\" # Enter Directory of all images  \ndata_path = os.path.join(img_dir,'*.bmp') \nfiles = glob.glob(data_path) \ntrain = [] \ntrain_labels=[]\nimages=[]\nfor f1 in files: \n    img = cv2.imread(f1) \n    images.append(img)\n    train.append(make(img))\n    train_labels.append(1)","c7e2da6b":"plt.imshow(images[0])","6c3621fd":"img_dir = \"\/kaggle\/input\/recognizance-2\/Data\/train\/No_powerline\" # Enter Directory of all images  \ndata_path = os.path.join(img_dir,'*.bmp') \nfiles = glob.glob(data_path) \nfor f1 in files: \n    img = cv2.imread(f1)\n    images.append(img)\n    train.append(make(img))\n    train_labels.append(0)","ce40a4b1":"plt.imshow(images[len(images)-1])","0fd00f4f":"import random\ntemp=list(zip(train,train_labels))\nfor i in range(100):\n    random.shuffle(temp)\ntrain,train_labels=zip(*temp)\ntrain=np.array(train)\ntrain_labels=np.array(train_labels)","b07726f4":"train[0].shape","12cd667e":"train=np.array(train)\ntrain_labels=np.array(train_labels)","ddc8e9f0":"train.shape","2a0d42d2":"import seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nsns.set(style='white', context='notebook', palette='deep')","7cbfb722":"model = Sequential()\nmodel.add(Conv2D(filters = 16, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (128,128,2)))\nmodel.add(Conv2D(filters = 16, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\n\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\n\n\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(Conv2D(filters = 128, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation = \"sigmoid\"))","90f5742e":"model.summary()","54118540":"optimizer =  RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\nmodel.compile(optimizer = optimizer , loss = \"binary_crossentropy\", metrics=[\"accuracy\"])\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","0c74be8f":"epochs = 30 # Turn epochs to 30 to get 0.9967 accuracy\nbatch_size = 100","2ab08558":"X_train, X_val, Y_train, Y_val = train_test_split(train, train_labels, test_size = 0.1, random_state= 2)\nX_train=X_train\/255.0\nX_val=X_val\/255.0","2a613f03":"X_train=train\/255.0\nY_train=train_labels","c8b049a4":"history = model.fit( X_train,Y_train, batch_size=batch_size,\n                              epochs = 30, \n                              verbose = 1, steps_per_epoch=X_train.shape[0] \/\/ batch_size\n                               )","3efcf5a7":"del train","5faec0c5":"del train_labels","c854394c":"img_dir = \"\/kaggle\/input\/recognizance-2\/Data\/test\" # Enter Directory of all images  \ndata_path = os.path.join(img_dir,'*.bmp') \nfiles = glob.glob(data_path) \ntest_images = []\nfor f1 in files: \n    img = cv2.imread(f1) \n    test_images.append(make(img)) ","06be2832":"del X_train","1f2cafea":"test_images=np.array(test_images)","16c04ea1":"test_images=test_images\/255.0","87d4b0d5":"test_images.shape","03ef8868":"test_labels=model.predict(test_images)","efdee734":"labels=[]\nfor i in test_labels:\n    if(i>0.5):\n        labels.append(\"YES\")\n    else:\n        labels.append(\"NO\")","4801ca83":"test_names=[]\nfor f1 in files:  \n    test_names.append(f1)","40440df9":"for i in range(0,len(test_images)):\n    test_names[i]=test_names[i][39:]\ntest_names[0] ","e3e42c9d":"file=pd.DataFrame(test_names,columns=['image file name'])\nfile['Powerline']=labels\nfile","9942fc4f":"file.to_csv('output.csv',index=False)","42657672":"# ****Loading the training Dataset****","69f82c38":"# ****Predicting the test images****","24240d92":"### Kernel_1 is for detecting the vertical edges and kernel_2 is for detecting the horizontal edges and this detection makes the image more clear for detecting the power lines","275959d5":"# ****Importing the necessary Libraries****","48b42bcc":"# ****Function for detecting Horizontal and Vertical edges in a image****","a09d3f34":"# ****Saving the file for submission****","72ff2e0b":"# ****Initializing our Model****","5f09e4d2":"# ****Model Prototype****","01918553":"# ****Training our model****","e08306c1":"# ****Loading the test Dataset****","423058b0":"# ****Shuffling the training images and labels****"}}