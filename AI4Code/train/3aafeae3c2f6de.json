{"cell_type":{"438fdc54":"code","30dcddc6":"code","4593dd70":"code","1041ab91":"code","1cc45e55":"code","19a4b4b4":"code","d2fae30c":"code","bdac70ca":"code","f802933e":"code","6a1c4a66":"code","392dcd60":"code","e75890b8":"code","bc54a49c":"code","0a1ccc7a":"code","93443290":"code","b6ef758a":"code","f5b83f67":"code","d5919fef":"code","20ee6e1a":"code","f150aa43":"code","56943cfb":"code","9387baeb":"code","6ad92e61":"code","02bb4ecb":"code","2414ac93":"code","1556a2aa":"code","53037728":"code","c695f49a":"code","bc8964c3":"code","eeef6497":"code","2182e36e":"code","78bc70a6":"code","3f6f93b8":"code","52817973":"markdown"},"source":{"438fdc54":"import numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator ","30dcddc6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4593dd70":"data_confirmed = pd.read_csv('\/kaggle\/input\/ece657aw20asg4coronavirus\/time_series_covid19_confirmed_global.csv')\ndata_confirmed.head()","1041ab91":"cols = data_confirmed.keys()","1cc45e55":"confirmed = data_confirmed.loc[:, cols[4]:cols[-1]]","19a4b4b4":"dates = confirmed.keys()\nworld_cases = []\n\nus_cases = [] ","d2fae30c":"for i in dates:\n    \n    confirmed_sum = confirmed[i].sum()\n    \n    world_cases.append(confirmed_sum)\n    \n    us_cases.append(data_confirmed[data_confirmed['Country\/Region']=='US'][i].sum())\n    ","bdac70ca":"# Daily Increase\ndef daily_increase(data):\n    d = [] \n    for i in range(len(data)):\n        if i == 0:\n            d.append(data[0])\n        else:\n            d.append(data[i]-data[i-1])\n    return d \n","f802933e":"# Confirmed cases:\n\nworld_daily_increase = daily_increase(world_cases)\n\nus_daily_increase = daily_increase(us_cases)","6a1c4a66":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\n\ndays_since_1_22.shape\n\nworld_cases.shape","392dcd60":"days_in_future = 10\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-10]","e75890b8":"start = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","bc54a49c":"X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22, world_cases, test_size=0.07, shuffle=False)","0a1ccc7a":"# SVM\n\nsvm_confirmed = SVR(shrinking=True, kernel='poly',gamma=0.01, epsilon=1,degree=4, C=0.1)\nsvm_confirmed.fit(X_train_confirmed, y_train_confirmed)\nsvm_pred = svm_confirmed.predict(future_forcast)","93443290":"svm_test_pred = svm_confirmed.predict(X_test_confirmed)\nplt.plot(y_test_confirmed)\nplt.plot(svm_test_pred)\nplt.legend(['Test Data', 'SVM Predictions'])\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))","b6ef758a":"# Using polynomial Regression to tranforom the data\n\npoly = PolynomialFeatures(degree=3)\npoly_X_train_confirmed = poly.fit_transform(X_train_confirmed)\npoly_X_test_confirmed = poly.fit_transform(X_test_confirmed)\npoly_future_forcast = poly.fit_transform(future_forcast)\n\nbayesian_poly = PolynomialFeatures(degree=4)\nbayesian_poly_X_train_confirmed = bayesian_poly.fit_transform(X_train_confirmed)\nbayesian_poly_X_test_confirmed = bayesian_poly.fit_transform(X_test_confirmed)\nbayesian_poly_future_forcast = bayesian_poly.fit_transform(future_forcast)","f5b83f67":"# polynomial regression\nlinear_model = LinearRegression(normalize=True, fit_intercept=False)\nlinear_model.fit(poly_X_train_confirmed, y_train_confirmed)\ntest_linear_pred = linear_model.predict(poly_X_test_confirmed)\nlinear_pred = linear_model.predict(poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_confirmed))","d5919fef":"plt.plot(y_test_confirmed)\nplt.plot(test_linear_pred)\nplt.legend(['Test Data', 'Polynomial Regression Predictions'])","20ee6e1a":"# Bayesian ridge polynomial regression \n\ntol = [1e-6, 1e-5, 1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4, 1e-3]\nnormalize = [True, False]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2, \n                 'normalize' : normalize}\n\nbayesian = BayesianRidge(fit_intercept=False)\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(bayesian_poly_X_train_confirmed, y_train_confirmed)","f150aa43":"bayesian_confirmed = bayesian_search.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(bayesian_poly_X_test_confirmed)\nbayesian_pred = bayesian_confirmed.predict(bayesian_poly_future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_bayesian_pred, y_test_confirmed))","56943cfb":"plt.plot(y_test_confirmed)\nplt.plot(test_bayesian_pred)\nplt.legend(['Test Data', 'Bayesian Ridge Polynomial Predictions'])","9387baeb":"adjusted_dates = adjusted_dates.reshape(1, -1)[0]\nplt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, world_cases)\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n","6ad92e61":"plt.figure(figsize=(16, 9))\nplt.bar(adjusted_dates, world_daily_increase)\nplt.title('World Daily Increases in Confirmed Cases', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()","02bb4ecb":"plt.figure(figsize=(16, 9))\nplt.plot(adjusted_dates, np.log10(world_cases))\nplt.title('Log of # of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=20)\nplt.yticks(size=20)\nplt.show()\n","2414ac93":"def country_plot(x, y1, y2,country):\n    plt.figure(figsize=(16, 9))\n    plt.plot(x, y1)\n    plt.title('{} Confirmed Cases'.format(country), size=30)\n    plt.xlabel('Days Since 1\/22\/2020', size=30)\n    plt.ylabel('# of Cases', size=30)\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()\n    \n    plt.figure(figsize=(16, 9))\n    plt.bar(x, y2)\n    plt.title('{} Daily Increases in Confirmed Cases'.format(country), size=30)\n    plt.xlabel('Days Since 1\/22\/2020', size=30)\n    plt.ylabel('# of Cases', size=30)\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()","1556a2aa":"country_plot(adjusted_dates, us_cases, us_daily_increase, 'United States')","53037728":"def plot_predictions(x, y, pred, algo_name, color):\n    plt.figure(figsize=(16, 9))\n    plt.plot(x, y)\n    plt.plot(future_forcast, pred, linestyle='dashed', color=color)\n    plt.title('# of Coronavirus Cases Over Time', size=30)\n    plt.xlabel('Days Since 1\/22\/2020', size=30)\n    plt.ylabel('# of Cases', size=30)\n    plt.legend(['Confirmed Cases', algo_name], prop={'size': 20})\n    plt.xticks(size=20)\n    plt.yticks(size=20)\n    plt.show()","c695f49a":"plot_predictions(adjusted_dates, world_cases, svm_pred, 'SVM Predictions', 'purple')","bc8964c3":"plot_predictions(adjusted_dates, world_cases, linear_pred, 'Polynomial Regression Predictions', 'orange')","eeef6497":"plot_predictions(adjusted_dates, world_cases, bayesian_pred, 'Bayesian Ridge Regression Predictions', 'green')","2182e36e":"# Future predictions using SVM \nsvm_df = pd.DataFrame({'Date': future_forcast_dates[-10:], 'SVM Predicted # of Confirmed Cases Worldwide': np.round(svm_pred[-10:])})\nsvm_df","78bc70a6":"# Future predictions using polynomial regression\nlinear_pred = linear_pred.reshape(1,-1)[0]\nsvm_df = pd.DataFrame({'Date': future_forcast_dates[-10:], 'Polynomial Predicted # of Confirmed Cases Worldwide': np.round(linear_pred[-10:])})\nsvm_df","3f6f93b8":"# Future predictions using Bayesian Ridge \nsvm_df = pd.DataFrame({'Date': future_forcast_dates[-10:], 'Bayesian Ridge Predicted # of Confirmed Cases Worldwide': np.round(bayesian_pred[-10:])})\nsvm_df","52817973":"Reference: \nThe following work is extension of: Coronavirus (COVID-19) Visualization & Prediction https:\/\/github.com\/therealcyberlord\/coronavirus_visualization_and_prediction\/blob\/master\/coronavirus-covid-19-visualization-prediction.ipynb"}}