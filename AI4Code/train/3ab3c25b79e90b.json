{"cell_type":{"188d48f2":"code","b1e8e962":"code","3ddab996":"code","23f8ca4d":"code","5453c361":"code","0f85130a":"code","4fb577fd":"code","5ea2fd1d":"code","5a18b187":"code","cfa8fb9f":"code","df0fb199":"code","77f557da":"code","01a968c2":"code","fce8adbd":"code","13635a11":"code","cdb2b855":"markdown","28748e97":"markdown","5385b92c":"markdown","c84d8e75":"markdown","295ba3be":"markdown","e09f1a1c":"markdown","eb6b779e":"markdown"},"source":{"188d48f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1e8e962":"train = pd.read_csv(r'\/kaggle\/input\/ventilator-pressure-prediction\/train.csv')\n\n#sample_submission = pd.read_csv(r'\/kaggle\/input\/ventilator-pressure-prediction\/sample_submission.csv')","3ddab996":"train.head()","23f8ca4d":"train.describe()","5453c361":"sns.boxplot(data=train.drop(labels=['id'], axis=1));","0f85130a":"sns.boxplot(data=train.drop(labels=['id', 'breath_id'], axis=1));","4fb577fd":"train_R_set = set(train.R.unique())\ntrain_C_set = set(train.C.unique())\nprint('Unique Values in R column of the train data: ' + str(train_R_set))\nprint('Unique Values in C column of the train data: ' + str(train_C_set))\nprint('Unique Values in u_out column: ' + str(train.u_out.unique()))","5ea2fd1d":"# train = pd.read_csv(r'\/kaggle\/input\/ventilator-pressure-prediction\/train.csv', index_col=['breath_id', 'id'], dtype={'u_out': 'bool'} )\ntrain = pd.read_csv(r'\/kaggle\/input\/ventilator-pressure-prediction\/train.csv', dtype={'u_out': 'bool'} )","5a18b187":"train['lung_type'] = train['R'].apply(lambda x: 'R%02d' %(x)) + train['C'].apply(lambda x: '_C%02d' %(x))\ntrain = train.set_index(['lung_type', 'breath_id', 'id']).drop(columns=['R', 'C'])\ntrain.sort_index(inplace=True)\ntrain.head()","cfa8fb9f":"train.info()","df0fb199":"len_breaths = len(train.index.get_level_values(1).unique())\nprint('Amount of single breaths: ' + str(len_breaths))\nprint('Amount of data points per breath: ' + str(len(train.index.get_level_values(2)) \/ len_breaths))","77f557da":"All = slice(None)\nfig, ax = plt.subplots(9, 4, figsize=(25,30))\nax = ax.flatten()\nidx=0\nfor lung_type in train.index.get_level_values(0).unique():  # iterate over lung types\n    for breath_id in train.loc[(lung_type, All, All), All].index.get_level_values(1).unique()[:4]:  # iterate over single breaths\n        train.loc[(lung_type, breath_id, All), All].plot(x='time_step', \n                                                    title='Lung Type: %s\\nBreath ID: %2d' %(lung_type, breath_id),\n                                                    include_bool=True,\n                                                    sharex=True,\n                                                    grid=True,\n                                                    ax=ax[idx]);\n        idx += 1\nfig.tight_layout()","01a968c2":"test  = pd.read_csv(r'\/kaggle\/input\/ventilator-pressure-prediction\/test.csv', dtype={'u_out': 'bool'} )","fce8adbd":"test['lung_type'] = test['R'].apply(lambda x: 'R%02d' %(x)) + test['C'].apply(lambda x: '_C%02d' %(x))\ntest = test.set_index(['lung_type', 'breath_id', 'id']).drop(columns=['R', 'C'])\ntest.sort_index(inplace=True)\ntest.head()","13635a11":"train_lung_set = set(train.index.get_level_values(0).unique())\ntest_lung_set = set(test.index.get_level_values(0).unique())\n\nprint('Are the \"lungs\" in the train and test data identical? %r' % (train_lung_set == test_lung_set))","cdb2b855":"Confusing, I'll plott the quantiles of the upper table into a boxplot, it will be more readable.","28748e97":"Breath_id is clearly some ID","5385b92c":"time step seems looks like an x axis","c84d8e75":"* u_out is boolean (it said so already in the data description)\n* R and C are some lung describing categories (they are explained as balloon hole diameter and latex thickness in the data description). But the important part is, that there are only three values each, so only 9 types of lungs exist in the *training* data set.\n\nSo because of the upper findings I descided to use the breath_id, R, C and id columns as Multiindices.\n\n## Adapted import","295ba3be":"## Investigate test data set","e09f1a1c":"* First column is an id column, we can use it for the index later\n* breath_id is another id\n* R seems constant\n* C seems constant\n* u_out seems bool","eb6b779e":"* R and C, u_out look strange.\n* u_in and pressure have many outliers"}}