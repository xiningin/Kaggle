{"cell_type":{"8815c36b":"code","2455c3f9":"code","954d5786":"code","07423801":"code","ca398415":"code","b0a77d5a":"code","80d90153":"code","cc77e173":"code","9c5f3f23":"code","34650bdd":"code","61453ce2":"code","7304dbfa":"code","55d29a74":"code","76c0ef6c":"code","c6b4fa0d":"code","03a09673":"code","87b9f05f":"code","229515b4":"code","0cbefcaa":"code","c1fdcb9f":"markdown","b7a69bd8":"markdown","584c3111":"markdown","3cee1acc":"markdown","3809820c":"markdown","319f994a":"markdown","4ad27bef":"markdown","01868c79":"markdown","f85e4c94":"markdown"},"source":{"8815c36b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2455c3f9":"data = pd.read_csv('..\/input\/iris-dataset\/Iris.csv')","954d5786":"data","07423801":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.cluster import KMeans","ca398415":"plt.scatter(data['PetalLengthCm'], data['PetalWidthCm'])","b0a77d5a":"plt.scatter(data['SepalLengthCm'], data['SepalWidthCm'])","80d90153":"sns.violinplot(x=data['Species'], y=data['PetalLengthCm'])","cc77e173":"sns.violinplot(x=data['Species'], y=data['PetalWidthCm'])","9c5f3f23":"sns.violinplot(x=data['Species'], y=data['SepalLengthCm'])","34650bdd":"sns.violinplot(x=data['Species'], y=data['SepalWidthCm'])","61453ce2":"x = data.iloc[:,1:5]\nx","7304dbfa":"wcss = []         #wcss is the weighted central sum of squares, which tells us what \n                  # are the optimal number of clusters for a set\n\n# assuming the clusters to be 10. This doesnt matter because we'll know the accurate \n# number soon\nfor i in range(1,10):\n    kmeans = KMeans(i)\n    kmeans.fit_predict(x)\n    wcss.append(kmeans.inertia_)\n    \nwcss","55d29a74":"plt.plot(range(1,10), wcss)\nplt.title('Elbow Method')\nplt.xlabel('Clusters')\nplt.ylabel('WCSS')\nplt.show()","76c0ef6c":"kmeans = KMeans(3, random_state=1)","c6b4fa0d":"kmeans.fit(x)","03a09673":"cluster = data.iloc[:,1:6]\ncluster['Cluster'] = kmeans.fit_predict(x)","87b9f05f":"cluster","229515b4":"f, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(15,5))\n\nax1.scatter(data['PetalLengthCm'], data['PetalWidthCm'])\nax1.set_title('Petal-wise Before Clustering')\n\nax2.scatter(cluster['PetalLengthCm'], cluster['PetalWidthCm'], c=cluster['Cluster'], cmap='rainbow')\nax2.set_title('Petal-wise After Clustering')","0cbefcaa":"f, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(15,5))\n\nax1.scatter(data['SepalLengthCm'], data['SepalWidthCm'])\nax1.set_title('Sepal-wise Before Clustering')\n\nax2.scatter(cluster['SepalLengthCm'], cluster['SepalWidthCm'], c=cluster['Cluster'], cmap='rainbow')\nax2.set_title('Sepal-wise After Clustering')","c1fdcb9f":"**Visualization of the dataset using catplots and violinplots**","b7a69bd8":"## Thank You!","584c3111":"**We now have the clusters and we try visualizing them**","3cee1acc":"**Giving the input for K-Means clustering**","3809820c":"**we see that the WCSS method suggest 3 clusters as the appropriate number, hence we proceed with 3 clusters**","319f994a":"**We'll use the elbow method to determine the optimal number of clusters required for classifying the given dataset**","4ad27bef":"**Seeing the data before clustering**","01868c79":"**Hi all! this is my first time publishing a notebook here on Kaggle. Everyone's views are welcome, please tell me if I should be able to make this model better in any way. I'll be grateful for constructive criticism, because I'm just starting out!\nHappy Learning!**","f85e4c94":"**plotting the WCSS list, and using the elbow method\nthis tells us the optimal number of clusters where the slope of the graph changes the most**"}}