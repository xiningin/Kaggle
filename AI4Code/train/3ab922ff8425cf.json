{"cell_type":{"037d68b9":"code","9110ff31":"code","6fb3110b":"code","852e4a26":"code","f3f8befb":"code","e23512d9":"code","b3caf6ef":"code","6dd1a038":"code","25987bf3":"code","054d8eb1":"code","14df4011":"code","7a7d92fd":"code","9f602f24":"code","b2a88050":"code","53dfd907":"code","ada038c9":"code","dddc87dd":"code","e95d7eec":"code","a9b94067":"code","bcdcc6a3":"code","fef440f2":"code","0f89d695":"markdown","6934ab6a":"markdown","4411f8e0":"markdown","b345a86c":"markdown","bb855b8e":"markdown","284eb0a5":"markdown","8f0fbeda":"markdown","e58e36aa":"markdown","8815b184":"markdown","01e8bc80":"markdown","55137853":"markdown"},"source":{"037d68b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom pandas_datareader import data\nimport re\nimport plotly.express as px\n\nimport ipywidgets as widgets\nfrom ipywidgets import interact\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9110ff31":"df=pd.read_csv('..\/input\/apple-product-price-list-from-26-countries-2022\/apple product price list from 26 countries.csv')\ndf['country_code']=df['country_code'].str.upper()\ndf","6fb3110b":"df['model_en']=df['model']\n\ndf.loc[df['model'].str.contains('imac', case=False), 'model_en'] = '24-inch iMac'\ndf.loc[df['model'].str.contains('pen', case=False), 'model_en'] = 'Apple Pencil (2nd generation)'\ndf.loc[df['model'].str.contains('spor|\u0421\u043f\u043e\u0440\u0442\u0438\u0432\u043d\u044b\u0439 \u0440\u0435\u043c\u0435\u0448\u043e\u043a|Correa deportiva|Urheiluranneke', case=False), 'model_en'] = 'Sport Band'\ndf.loc[df['model'].str.contains('airpods\\(2|airpods\\(andra|airpods\\(\u0e23\u0e38\u0e48\u0e19\u0e17\u0e35\u0e48 2|airpods\\(seconda|airpods\\(segunda', case=False), 'model_en'] = 'AirPods(2nd generation)'\ndf.loc[df['model'].str.contains('airpods\\(3|airpods\\(\u0e23\u0e38\u0e48\u0e19\u0e17\u0e35\u0e48 3|airpods\\(tre|airpods\\(ter', case=False), 'model_en'] = 'AirPods(3rd generation)'\ndf.loc[df['model'].str.contains('mouse', case=False), 'model_en'] = 'Magic Mouse'\ndf.loc[df['model'].str.contains('Apple Store|iTunes', case=False), 'model_en'] = 'App Store and iTunes Gift Card'\n","852e4a26":"df['model_en'].value_counts()","f3f8befb":"df['price2']=df['price'].str.split('or', 1, expand=True)[0]\ndf","e23512d9":"# keep only digits, . (period), and , (comma)\ndf['price2']=df['price2'].str.replace('[^\\d\\.\\,]', '', regex=True)\ndf","b3caf6ef":"# credit: https:\/\/stackoverflow.com\/questions\/43211380\/is-there-a-list-of-locale-codes-of-countries-that-use-commas-instead-of-decimal\ncomma_decimal_point_locale = ['AM', 'AR', 'AT', 'AZ', 'BA', 'BE', 'BG', 'BO', 'BR', 'BY',\n                    'CA', 'CH', 'CL', 'CM', 'CO', 'CR', 'CY', 'CZ', 'DE', 'DK',\n                    'EC', 'EE', 'ES', 'FI', 'FO', 'FR', 'GE', 'GL',  'HR', 'HU',\n                    'ID', 'IS', 'IT', 'KZ', 'LB', 'LT', 'LU', 'LV', 'MA', 'MD', 'MK', 'MO', 'MZ',\n                    'NL', 'NO', 'PE', 'PL', 'PT', 'PY', 'RO', 'RS', 'RU',\n                    'SE', 'SI', 'SK', 'TN', 'TR', 'UA', 'UY', 'UZ', 'VE', 'VN', 'ZA']\n\nprice_clean=[]\nfor i, r in df.iterrows():\n    p=r['price2']\n    if r['country_code'] in comma_decimal_point_locale:\n        p=p.replace('.', '').replace(',', '.')\n    else:\n        p=p.replace(',', '')\n    price_clean.append(p)\n    \ndf['price_local_currency']=price_clean\ndf['price_local_currency']=pd.to_numeric(df['price_local_currency'])\ndf","6dd1a038":"df['country'].unique()","25987bf3":"@interact\ndef filter(regex_pat=\".\"):\n    return df[(df[\"country\"].str.contains(regex_pat, regex=True, case=False))].sort_values(\n        \"pid\", ascending=True\n    )","054d8eb1":"dc=pd.read_csv('https:\/\/raw.githubusercontent.com\/prasertcbs\/basic-dataset\/master\/country%20and%20currency%20code.csv')\ndc=dc.drop_duplicates(subset=['Alpha2 Code']).reset_index(drop=True)\ndc","14df4011":"df=pd.merge(df, dc[['Alpha2 Code', 'Currency CodeA']], how='inner', left_on='country_code', right_on='Alpha2 Code').drop(columns=['Alpha2 Code'])\ndf","7a7d92fd":"# (pd.Timestamp.now() + pd.Timedelta(days=-5)).strftime('%Y-%m-%d')\n\ndfx=data.DataReader(df['Currency CodeA'].unique() + '=X', 'yahoo', \n                    start=(pd.Timestamp.now() + pd.Timedelta(days=-5)).strftime('%Y-%m-%d'), end=pd.Timestamp.now().strftime('%Y-%m-%d'))['Close'].stack()\ndfx=dfx.to_frame().reset_index()\ndfx.columns=['FX_Date', 'Currency CodeA', 'X']\ndfx['Currency CodeA']=dfx['Currency CodeA'].str[:3]\ndfx=dfx.drop_duplicates(subset=['Currency CodeA'], keep='last')\ndfx","9f602f24":"# dfx.to_csv('exchange rate.csv', index=False)","b2a88050":"df=pd.merge(df, dfx[['Currency CodeA', 'X']], how='outer', left_on='Currency CodeA', right_on='Currency CodeA')\ndf['price_usd']=df['price_local_currency']\/df['X']\ndf","53dfd907":"# df.to_csv('clean.csv', index=False)","ada038c9":"models=sorted(df['model_en'].unique().tolist(), key=str.lower)\n# models\n\n@interact\ndef filter(model_list=models):\n    d_filter=df[(df[\"model_en\"]==model_list)].sort_values(\"price_usd\", ascending=True)\n    d_filter=d_filter[d_filter['price_usd'].notna()]\n    return d_filter.drop(columns=['pid', 'country_code', 'scraped_date']).style.bar(subset=['price_usd'], color='deepskyblue')","dddc87dd":"grp=df.groupby('model_en')\nlowest_price=grp.apply(lambda g: g.nsmallest(1, 'price_usd'))[['country', 'price_usd']]\nlowest_price=lowest_price.reset_index().drop(columns=['level_1'])\navg_price=df.groupby('model_en')['price_usd'].agg(['mean', 'max']).reset_index()\navg_price.rename(columns={'mean': 'avg_price_usd', 'max': 'max_price_usd'}, inplace=True)\n# avg_price\npd.merge(lowest_price, avg_price, left_on=['model_en'], right_on=['model_en'])","e95d7eec":"pvt=pd.pivot_table(df, index=['model_en'], columns=['country'], values=['price_usd'], )\npvt","a9b94067":"pvt.loc[:, 'price_usd']","bcdcc6a3":"pvt.loc[:, 'price_usd'].to_csv('apple product prices wide format.csv')","fef440f2":"df","0f89d695":"# translate all foreign model names into English name (model_en column)","6934ab6a":"# Objective:\n* Translate all product models into plain English\n* Convert local price to USD using the current foreign exchange rate\n* Find the cheapest prices of each product model","4411f8e0":"# turn into wide format","b345a86c":"### take care of different decimal separators","bb855b8e":"# read data","284eb0a5":"# extract (starting) price","8f0fbeda":"## get the latest foreign exchange rate","e58e36aa":"# Interactive dataframe (filter by country name)","8815b184":"# Interactive product price comparison across country","01e8bc80":"# Cheapest price of each product model","55137853":"# get Exchange rate"}}