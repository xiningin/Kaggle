{"cell_type":{"c15946fe":"code","ff05edde":"code","07d6a4ae":"code","c30829c8":"code","db1988e1":"code","de5a7fd7":"code","7eb098d6":"code","ade892f0":"markdown","327c1501":"markdown","6193984f":"markdown","1465cacb":"markdown","61d19280":"markdown"},"source":{"c15946fe":"import numpy as np \nimport pandas as pd\nimport datatable as dt\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom lightgbm import LGBMClassifier","ff05edde":"%%time\ntrain = dt.fread('..\/input\/tabular-playground-series-nov-2021\/train.csv').to_pandas()\ntest  = dt.fread('..\/input\/tabular-playground-series-nov-2021\/test.csv').to_pandas()\nsub   = dt.fread('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv').to_pandas()","07d6a4ae":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","c30829c8":"y = train['target']\ntrain.drop('target',axis=1,inplace=True)","db1988e1":"# lgbm params\nlgbm_params = {\n  \"objective\": \"binary\",\n  \"metric\": \"auc\",\n  \"learning_rate\": 0.08,\n  \"device\": \"gpu\",\n  \"verbose\": 0, \n  \"feature_pre_filter\": False, \n  \"lambda_l1\": 9.314037635261775, \n  \"lambda_l2\": 0.10613573572440353,\n  \"num_leaves\": 7,\n  \"feature_fraction\": 0.4, \n  \"bagging_fraction\": 0.8391963650875751, \n  \"bagging_freq\": 5, \n  \"min_child_samples\": 100,\n  \"num_iterations\": 10000,\n  \"n_estimators\": 20000,\n  \"random_state\": 42\n}","de5a7fd7":"folds = KFold(n_splits = 5, random_state = 102021, shuffle = True)\n\npredictions = np.zeros(len(test))\nlgbm_oof = np.zeros(train.shape[0])\n\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(train)):\n\n    X_train, X_test = train.iloc[trn_idx], train.iloc[val_idx]\n    y_train, y_test = y.iloc[trn_idx], y.iloc[val_idx]\n\n    model = LGBMClassifier(**lgbm_params)\n    print(f\"model fit started for Fold: {fold}\")\n    model.fit(X_train, \n              y_train,\n              eval_set=[(X_test, y_test)],\n              early_stopping_rounds=400,\n              verbose=False)\n    pred = model.predict_proba(X_test)[:,1]\n    lgbm_oof[val_idx] = pred\n    roc = roc_auc_score(y_test, pred)\n    print(f\" roc_auc_score: {roc}\")\n    print(\"-\"*50)\n    \n    predictions += model.predict_proba(test)[:,1] \/ folds.n_splits ","7eb098d6":"sub['target'] = predictions\nsub.to_csv(f'submission_lgbm_1.csv',index = False)\nnp.savez_compressed('oof_lgbm.npz', lgbm_oof)","ade892f0":"# Store submission and oof ","327c1501":"# Load dataset","6193984f":"# 5-fold model training and prediction","1465cacb":"# Model hyperparameters","61d19280":"# Imports"}}