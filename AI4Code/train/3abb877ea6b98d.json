{"cell_type":{"a3eb4c26":"code","6c46b322":"code","e812c103":"code","b2b42813":"code","38ebd034":"code","07647de7":"code","d27551de":"code","ccee65db":"code","fa9cf25f":"code","ccb933fd":"markdown","1a2eccda":"markdown","22142132":"markdown","63b23bcf":"markdown","3046d294":"markdown","210648d4":"markdown"},"source":{"a3eb4c26":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6c46b322":"df = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\ndf.rename(columns={\"SepalLengthCm\": \"sepal_length\", \"SepalWidthCm\": \"sepal_width\"},inplace=True ,errors=\"raise\")\n\ndf.head()","e812c103":"df.info()","b2b42813":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\ninteger_encoded = label_encoder.fit_transform(df[\"Species\"])\ninteger_encoded","38ebd034":"df[\"class\"]= integer_encoded\ndf.head()","07647de7":"import matplotlib.pyplot as plt\n\ncolors = {0:'r', 1:'g', 2:'b'}\n# create a figure and axis\nfig, ax = plt.subplots()\n# plot each data-point\nfor i in range(len(df['sepal_length'])):\n    ax.scatter(df['sepal_length'][i], df['sepal_width'][i],color=colors[df[\"class\"][i]])\n# set a title and labels\nax.set_title('Iris Dataset')\nax.set_xlabel('sepal_length')\nax.set_ylabel('sepal_width')\n\n","d27551de":"from sklearn.model_selection import train_test_split\n\nX = df[['sepal_length','sepal_width','PetalLengthCm','PetalWidthCm']]\ny = df.iloc[:,6].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.40,random_state=24)\n\nprint(X)","ccee65db":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import model_selection\n\nerror_rate = []\naccuracylist = []\ncrossV = []\n\nfor i in range(1,15):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    knn.fit(X_train,y_train)\n    y_pred = knn.predict(X_test)\n    accuracy= metrics.accuracy_score(y_pred, y_test)*100\n    error_rate.append(np.mean(y_pred != y_test))\n    kfold = model_selection.KFold(n_splits=10, random_state=0)\n    scores = cross_val_score(knn, X_train, y_train, cv=kfold, scoring='accuracy')*100\n    accuracylist.append(accuracy)\n    crossV.append(scores.mean())\n    \nplt.figure(figsize=(10,6))\nplt.plot(range(1,15),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')    \n\nfor i, (value1,value2) in enumerate(zip(accuracylist, crossV),1):\n    print(\"For k =\",i,\"Accuracy:{0:.2f} CrossValScore:{1:.2f} \".format(value1,value2))\n    \n    \n\n","fa9cf25f":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import classification_report\nfrom sklearn.linear_model import LogisticRegression\n\n\nclfs = {\n    'KNN': KNeighborsClassifier(n_neighbors = 8),\n    'Naive_bayes': GaussianNB(),\n    'Logistic_Regression': LogisticRegression()\n}\n\nfor clf_name in clfs.keys():\n    print(\"Training\",clf_name,\"classifier\")\n    clf = clfs[clf_name]\n    clf.fit(X_train, y_train)\n    y_predict = clf.predict(X_test)\n    print(classification_report(y_test, y_predict))\n    print()","ccb933fd":"**Graph**","1a2eccda":"K = 8","22142132":"**Checks which K value is the best**","63b23bcf":"**Preprocess**","3046d294":"**Predicts**","210648d4":"Labeling categorical data"}}