{"cell_type":{"5a4f4314":"code","6b3e4dd9":"code","92ce1f91":"code","9b0c0a8a":"code","30913196":"code","06b4fef9":"code","cef42ef2":"code","8fab7f09":"code","6adf5cfb":"markdown","31c985f1":"markdown","b10ea898":"markdown","997e327a":"markdown","7881b82b":"markdown","43404fa4":"markdown","061f9edb":"markdown","4d8b9f67":"markdown"},"source":{"5a4f4314":"# Code you have previously used to load data\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\n\n# Set up code checking\nimport os\nif not os.path.exists(\"..\/input\/train.csv\"):\n    os.symlink(\"..\/input\/home-data-for-ml-course\/train.csv\", \"..\/input\/train.csv\")  \n    os.symlink(\"..\/input\/home-data-for-ml-course\/test.csv\", \"..\/input\/test.csv\") \nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.machine_learning.ex7 import *\n\n# Path of the file to read. We changed the directory structure to simplify submitting to a competition\niowa_file_path = '..\/input\/train.csv'\n\nhome_data = pd.read_csv(iowa_file_path)\n# Create target object and call it y\ny = home_data.SalePrice\n# Create X\nfeatures = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']\nX = home_data[features]\n\n# Split into validation and training data\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state=1)\n\n# Specify Model\niowa_model = DecisionTreeRegressor(random_state=1)\n# Fit Model\niowa_model.fit(train_X, train_y)\n\n# Make validation predictions and calculate mean absolute error\nval_predictions = iowa_model.predict(val_X)\nval_mae = mean_absolute_error(val_predictions, val_y)\nprint(\"Validation MAE when not specifying max_leaf_nodes: {:,.0f}\".format(val_mae))\n\n# Using best value for max_leaf_nodes\niowa_model = DecisionTreeRegressor(max_leaf_nodes=100, random_state=1)\niowa_model.fit(train_X, train_y)\nval_predictions = iowa_model.predict(val_X)\nval_mae = mean_absolute_error(val_predictions, val_y)\nprint(\"Validation MAE for best value of max_leaf_nodes: {:,.0f}\".format(val_mae))\n\n# Define the model. Set random_state to 1\nrf_model = RandomForestRegressor(random_state=1)\nrf_model.fit(train_X, train_y)\nrf_val_predictions = rf_model.predict(val_X)\nrf_val_mae = mean_absolute_error(rf_val_predictions, val_y)\n\nprint(\"Validation MAE for Random Forest Model: {:,.0f}\".format(rf_val_mae))","6b3e4dd9":"train_file_path  = '..\/input\/train.csv'\ntrain_data = pd.read_csv(train_file_path)\n\n# cols_with_missing = [col for col in train_data.columns \n#                                  if train_data[col].isnull().any()]                                  \n# candidate_train_predictors = train_data.drop(['Id', 'SalePrice'] + cols_with_missing, axis=1)\n\n# low_cardinality_cols = [cname for cname in candidate_train_predictors.columns if \n#                                 candidate_train_predictors[cname].nunique() < 10 and\n#                                 candidate_train_predictors[cname].dtype == \"object\"]\n# numeric_cols = [cname for cname in candidate_train_predictors.columns if \n#                                 candidate_train_predictors[cname].dtype in ['int64', 'float64']]\n# my_cols = low_cardinality_cols + numeric_cols\n\n\n# train_predictors = candidate_train_predictors[my_cols]\n\n\n\n\n\n\n\n\n\n","92ce1f91":"# To improve accuracy, create a new Random Forest model which you will train on all training data\nrf_model_on_full_data = RandomForestRegressor(random_state=31)\n\n\n# Drop houses where the target is missing\ntrain_data.dropna(axis=0, subset=['SalePrice'], inplace=True)\n\ny = train_data.SalePrice\n\n# Since missing values isn't the focus of this tutorial, we use the simplest\n# possible approach, which drops these columns. \n# For more detail (and a better approach) to missing values, see\n# https:\/\/www.kaggle.com\/dansbecker\/handling-missing-values\ncols_with_missing = [col for col in train_data.columns \n                                 if train_data[col].isnull().any()]                                  \ncandidate_train_predictors = train_data.drop(['Id', 'SalePrice'] + cols_with_missing, axis=1)\n\n# \"cardinality\" means the number of unique values in a column.\n# We use it as our only way to select categorical columns here. This is convenient, though\n# a little arbitrary.\nlow_cardinality_cols = [cname for cname in candidate_train_predictors.columns if \n                                candidate_train_predictors[cname].nunique() < 10 and\n                                candidate_train_predictors[cname].dtype == \"object\"]\nnumeric_cols = [cname for cname in candidate_train_predictors.columns if \n                                candidate_train_predictors[cname].dtype in ['int64', 'float64']]\nmy_cols = low_cardinality_cols + numeric_cols\ntrain_predictors = candidate_train_predictors[common_cols]\n\n\n#one_hot_encoding for handling categorical data\none_hot_encoded_training_predictors = pd.get_dummies(train_predictors)\n\nX = one_hot_encoded_training_predictors\n\n\n# fit rf_model_on_full_data on all data from the training data\nrf_model_on_full_data.fit(X, y)\n","9b0c0a8a":"# path to file you will use for predictions\ntest_data_path = '..\/input\/test.csv'\n\n# read test data file using pandas\ntest_data = pd.read_csv(test_data_path)\n\n\n# predictors_without_categoricals = train_predictors.select_dtypes(exclude=['object'])\n\n\n\n# # create test_X which comes from test_data but includes only the columns you used for prediction.\n# # The list of columns is stored in a variable called features\n\ncols_with_missing_test  = [col for col in test_data.columns \n                                 if test_data[col].isnull().any()]                       \ncandidate_test_predictors = test_data.drop(['Id'] + cols_with_missing_test, axis=1)\n\n\nlow_cardinality_cols_test = [c_name for c_name in candidate_test_predictors.columns if \n                                candidate_test_predictors[c_name].nunique() < 10 and\n                                candidate_test_predictors[c_name].dtype == \"object\"]\nnumeric_cols_test = [c_name for c_name in candidate_test_predictors.columns if \n                                candidate_test_predictors[c_name].dtype in ['int64', 'float64']]\n\nmy_cols_test = low_cardinality_cols_test + numeric_cols_test\ntest_predictors = candidate_test_predictors[common_cols]\none_hot_encoded_test_predictors = pd.get_dummies(test_predictors)\ntest_X = one_hot_encoded_test_predictors\n\n# common_cols = train_data.intersection(test_cols)\n# train_not_test = train_cols.difference(test_cols)\n\n\n# # make predictions which we will submit. \ntest_preds = rf_model_on_full_data.predict(test_X)\n\n\n\n# # The lines below shows how to save predictions in format used for competition scoring\n# # Just uncomment them.\n\noutput = pd.DataFrame({'Id': test_data.Id,\n                       'SalePrice': test_preds})\noutput.to_csv('submission.csv', index=False)","30913196":"len(one_hot_encoded_training_predictors.columns)\n\nprint(test_predictors.columns.intersection(train_predictors.columns))\n#train_predictors\n","06b4fef9":"# NB !!!!\n#THIS CODE IS EXECUTED BEFORE RUNNING TO FIT THE MODEL. THE VARIABLE common_cols IS USED TO DECIDE WHICH \n#COLUMNS WILL FIT TO THE TRAIN MODEL REGARDING TO ITS INTERSECTION WITH THE TEST DATA SO IT WONT BE ERROR\n\n\n# common_cols = numeric_cols_test.intersection(numeric_cols) \n\n# print(common_cols)\n# train_not_test = candidate_train_predictors.columns.difference(candidate_test_predictors.columns)\n# print (train_not_test)\n# print (len(candidate_train_predictors.columns))\n# print (len(candidate_test_predictors.columns))\n\n\nfinal_train = train_data[numeric_cols]\nfinal_test = test_data[numeric_cols_test]\n\n\ncommon_cols = final_test.columns.intersection(final_train.columns)\n\n","cef42ef2":"test_data.isnull()","8fab7f09":"# Check your answer\nstep_1.check()\nstep_1.solution()","6adf5cfb":"---\n**[Introduction to Machine Learning Home Page](https:\/\/www.kaggle.com\/learn\/intro-to-machine-learning)**\n\n\n\n\n\n*Have questions or comments? Visit the [Learn Discussion forum](https:\/\/www.kaggle.com\/learn-forum) to chat with other Learners.*","31c985f1":"## Recap\nHere's the code you've written so far. Start by running it again.","b10ea898":"# Test Your Work\n\nTo test your results, you'll need to join the competition (if you haven't already).  So open a new window by clicking on [this link](https:\/\/www.kaggle.com\/c\/home-data-for-ml-course).  Then click on the **Join Competition** button.\n\n![join competition image](https:\/\/i.imgur.com\/wLmFtH3.png)\n\nNext, follow the instructions below:\n1. Begin by clicking on the blue **COMMIT** button in the top right corner of this window.  This will generate a pop-up window.  \n2. After your code has finished running, click on the blue **Open Version** button in the top right of the pop-up window.  This brings you into view mode of the same page. You will need to scroll down to get back to these instructions.\n3. Click on the **Output** tab on the left of the screen.  Then, click on the **Submit to Competition** button to submit your results to the leaderboard.\n\nYou have now successfully submitted to the competition!\n\n4. If you want to keep working to improve your performance, select the blue **Edit** button in the top right of the screen. Then you can change your model and repeat the process. There's a lot of room to improve your model, and you will climb up the leaderboard as you work.\n\n# Continuing Your Progress\nThere are many ways to improve your model, and **experimenting is a great way to learn at this point.**\n\nThe best way to improve your model is to add features.  Look at the list of columns and think about what might affect home prices.  Some features will cause errors because of issues like missing values or non-numeric data types. \n\nThe **[Intermediate Machine Learning](https:\/\/www.kaggle.com\/learn\/intermediate-machine-learning)** micro-course will teach you how to handle these types of features. You will also learn to use **xgboost**, a technique giving even better accuracy than Random Forest.\n\n\n# Other Micro-Courses\nThe **[Pandas](https:\/\/kaggle.com\/Learn\/Pandas)** micro-course will give you the data manipulation skills to quickly go from conceptual idea to implementation in your data science projects. \n\nYou are also ready for the **[Deep Learning](https:\/\/kaggle.com\/Learn\/Deep-Learning)** micro-course, where you will build models with better-than-human level performance at computer vision tasks.","997e327a":"Before submitting, run a check to make sure your `test_preds` have the right format.","7881b82b":"**[Introduction to Machine Learning Home Page](https:\/\/www.kaggle.com\/learn\/intro-to-machine-learning)**\n\n---\n","43404fa4":"# Creating a Model For the Competition\n\nBuild a Random Forest model and train it on all of **X** and **y**.","061f9edb":"# Make Predictions\nRead the file of \"test\" data. And apply your model to make predictions","4d8b9f67":"# Introduction\nMachine learning competitions are a great way to improve your data science skills and measure your progress. \n\nIn this exercise, you will create and submit predictions for a Kaggle competition. You can then improve your model (e.g. by adding features) to improve and see how you stack up to others taking this micro-course.\n\nThe steps in this notebook are:\n1. Build a Random Forest model with all of your data (**X** and **y**)\n2. Read in the \"test\" data, which doesn't include values for the target.  Predict home values in the test data with your Random Forest model.\n3. Submit those predictions to the competition and see your score.\n4. Optionally, come back to see if you can improve your model by adding features or changing your model. Then you can resubmit to see how that stacks up on the competition leaderboard."}}