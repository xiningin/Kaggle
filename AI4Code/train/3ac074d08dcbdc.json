{"cell_type":{"d058dd4f":"code","30adeb1a":"code","2a2356e1":"code","f9635aa8":"code","4cc40ad4":"code","4b8c75df":"code","6f7c3831":"code","500a60be":"code","31d376d9":"code","bfe76da6":"code","a08bd6e2":"code","85da855b":"code","cd916794":"code","c859678e":"code","5f8ba623":"code","ee2c9192":"code","4130eaca":"code","2b8f1116":"code","1852bc08":"code","fcebd58b":"code","ae1d8737":"code","f5e92d5f":"markdown","c95d342b":"markdown"},"source":{"d058dd4f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","30adeb1a":"df=pd.read_csv(\"..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv\")\ndf","2a2356e1":"df.info()","f9635aa8":"df.country.unique()","4cc40ad4":"# Finding countries where iso_code is blank\ndf[df['iso_code'].isnull()]['country'].unique()","4b8c75df":"# filling all the missing values\ndf = df.fillna ({\n    'iso_code' : 'GBR',\n     'total_vaccinations' : 0,\n    'people_vaccinated' :0 ,\n    'people_fully_vaccinated' :0,\n    'daily_vaccinations' :0,\n    'daily_vaccinations_raw' :0,\n    'total_vaccinations_per_hundred' :0,\n    'people_vaccinated_per_hundred' :0,\n    'people_fully_vaccinated_per_hundred' :0,\n    'daily_vaccinations_per_million' :0\n    \n})\ndf.tail(50)","6f7c3831":"# dropping unnecessary columns\ndf.drop(['source_name','source_website'],axis=1, inplace=True)","500a60be":"# changing datatype of date column as earlier it was string object now it will datetime object\ndf['date'] = pd.to_datetime(df['date'])\ndf.info()","31d376d9":"# creating new dataframe which groups data on basis of selected column and find max of desired columns.\nnew_df = df.groupby([\"country\", \"iso_code\",\"vaccines\"])['total_vaccinations', \n                                                                       'total_vaccinations_per_hundred',\n                                                                      'daily_vaccinations',\n                                                                      'daily_vaccinations_per_million',\n                                                                      'people_vaccinated',\n                                                                      'people_vaccinated_per_hundred'\n\n                                                                    ].max().reset_index()\n\nnew_df\n\n","bfe76da6":"#Can be used to find only count of countries using vaccines\n# vacc = new_df['vaccines'].value_counts().reset_index()\n# vacc\n\n# List of contries using specific vaccine\nlet = pd.DataFrame(columns=['Vaccines','Countries'])\nvacc2 = new_df.vaccines.unique()\nfor v in vacc2 :\n    conn = new_df.loc[new_df.vaccines == v, 'country'].values\n#     print(conn)\n    de = pd.DataFrame(columns=['Vaccines','Countries'])\n    de = de.append({'Vaccines' : v , 'Countries' : conn},  \n                ignore_index = True) \n    let = let.append(de,ignore_index=True)\nlet = let.iloc[(-let.Countries.str.len()).argsort()].reset_index(drop=True)\nlet['count'] = let.Countries.str.len()\nlet","a08bd6e2":"# what all vacinnes are used in which country\nfig = px.choropleth(locations=new_df['country'], \n                    locationmode=\"country names\",\n                    color=new_df['vaccines'],\n                    title=\"Countries using each vaccine \",\n                   )\nfig.update_layout({'legend_orientation':'h'})\nfig.update_layout({'legend_title':'Vaccine scheme'})\nfig.show()","85da855b":"# what all countries are using what vaccines\n\nfig = px.treemap(new_df, path = ['vaccines', 'country'], values = 'total_vaccinations',\n                title=\"total vaccination in each country\")\n\nfig.show()","cd916794":"# top vaccines around the world\ntop_vacc = df.groupby(['vaccines'])[['people_vaccinated']].max().reset_index()\ntop_vacc = top_vacc.sort_values('people_vaccinated',ascending=False)\n# top_vacc\n\nplt.figure(figsize=(20,11))\nsns.barplot(data = top_vacc , x = 'people_vaccinated' , y = 'vaccines')\nplt.title('Top vaccaines')\nplt.show()","c859678e":"# Top 20 countries consuming vaccines\ndf_vaccines = df.groupby(['country','vaccines'])['total_vaccinations'].max().reset_index()\ndf_vaccines = df_vaccines.sort_values('total_vaccinations',ascending=False)\nplt.figure(figsize=(20,9))\nsns.barplot(data = df_vaccines[0:20] , x = 'total_vaccinations' , y = 'country')\nplt.title('Top 20 countries consuming vaccines')\nplt.show()\n","5f8ba623":"# Daily Vaccination progress in country\nfig = px.scatter_geo(new_df, locations=\"iso_code\",\n                    size=\"daily_vaccinations\",\n                    color='country',\n                    hover_name=\"country\", \n                    color_continuous_scale=px.colors.sequential.Tealgrn,\n                    title =\"daily vaccination in each Country\")\n\nfig.update_layout(geo=dict(bgcolor= '#61efff'))\n\nfig.update_geos(projection_type=\"natural earth\")\n\n\nfig.show()\n","ee2c9192":"# total_Vaccination progress in INDIA\nplt.figure(figsize=(20,7))\nsns.lineplot(data = df , x = 'date', y = 'total_vaccinations')\nplt.title('Total vaccination in INDIA')\nplt.show()","4130eaca":"plt.figure(figsize=(20,7))\nsns.lineplot(data = df , x = 'date', y = 'total_vaccinations_per_hundred')\nplt.title('Total vaccination  per hundred in INDIA')\nplt.show()","2b8f1116":"plt.figure(figsize=(20,7))\nsns.lineplot(data = df , x = 'date', y = 'daily_vaccinations')\nplt.title('Daily vaccination in INDIA')\nplt.show()","1852bc08":"plt.figure(figsize=(20,7))\nsns.lineplot(data = df , x = 'date', y = 'daily_vaccinations_per_million')\nplt.title('Daily Vaccinations per million in INDIA')\nplt.show()","fcebd58b":"plt.figure(figsize=(20,7))\nsns.lineplot(data = df , x = 'date', y = 'people_vaccinated')\nplt.title('People Vaccinated in INDIA')\nplt.show()","ae1d8737":"plt.figure(figsize=(20,7))\nsns.lineplot(data = df , x = 'date', y = 'people_vaccinated_per_hundred')\nplt.title('People Vaccinated per hundred in INDIA')\nplt.show()","f5e92d5f":"#  **DATA VISUALIZATION**","c95d342b":"# **DATA CLEANING**"}}