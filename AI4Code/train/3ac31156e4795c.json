{"cell_type":{"df457aaf":"code","f636796b":"code","324727ef":"code","6eccace0":"code","698f98fa":"code","cdcf77ee":"code","0bf319aa":"code","557e4d93":"code","fa1b15cd":"code","de2c17e1":"code","da97bc51":"code","27b38c54":"code","c4db99bc":"code","f0660b6a":"code","2d078660":"code","c77a55e2":"code","4a15cfdc":"code","1f9bdbe0":"code","5c64ee15":"code","1c97c410":"code","6f4051ab":"code","8f3877fb":"code","79a7cfe1":"code","7d8bb9de":"code","438eeed2":"code","f23f9c5c":"code","7a166c8d":"code","959736ea":"code","f6e182c7":"code","f6f75f8d":"code","15fd9dba":"code","e0fee7a5":"code","aaf9ebaa":"code","1c5795c0":"code","e59e37d5":"code","080fe8ef":"code","502cdd12":"code","63f059e7":"code","992499b3":"code","647932d3":"code","b429719a":"code","ac5b79e8":"code","f16f7839":"code","213d1153":"code","906f4625":"code","4c8674a1":"code","c1ab2cec":"code","db9a064c":"code","030f278f":"code","4c74df32":"code","8fe4bb12":"code","a46f664f":"code","5a0642f7":"code","19c95bfd":"code","56f5fd43":"code","b0094218":"code","66606c02":"code","4a68e9e3":"code","788acedc":"code","d2f43b0f":"code","b4e0ddc4":"code","9d5d58b9":"code","6db57a0c":"code","da75449f":"code","bc95afa0":"code","bb46b2c7":"code","c9ee8ae5":"code","5e068bca":"code","5b4d32d5":"code","20b5d636":"code","1fec5c81":"code","f64c1ed6":"code","dfb3bf1a":"code","e3636b54":"code","b28a68f6":"code","3c925c18":"code","2c9d4f3d":"code","153e3309":"code","47426515":"code","f6964168":"code","938c24e9":"code","ab26d4b7":"code","fdc95923":"code","5aea7d10":"code","a7328a59":"code","1037217b":"code","975cf590":"code","326be7a4":"code","42dfd415":"code","3cda836f":"code","cc144283":"code","24edf0b2":"code","916513be":"code","eb67aa46":"code","1b011b2f":"code","91900923":"code","fd2c08a2":"code","64219329":"code","b0a1578d":"code","382190f8":"code","24abbf70":"code","61d9e6ff":"code","4e89eb7a":"code","0686cea7":"code","49761fbb":"code","2a4e6a52":"code","4a0bf389":"code","8c1e022e":"code","946fd1cb":"code","01389b2e":"code","2be30d92":"code","ea66331a":"code","868344e5":"code","41eed266":"code","ba43a668":"code","e84e59df":"code","b83d690a":"code","b45471bb":"code","7d5a18e5":"code","f512532d":"code","083283cb":"code","65127231":"code","59fc9069":"markdown","2982c3b7":"markdown","d5fb035f":"markdown","b7bf6ffd":"markdown","8266735c":"markdown","1e93c7de":"markdown","8001ddff":"markdown","1792e09b":"markdown","36d137d4":"markdown","7cb8aec8":"markdown","128a9431":"markdown","b3341194":"markdown","0a8968ba":"markdown","1611d3ad":"markdown","79a0fcba":"markdown","42babe86":"markdown","0339ab80":"markdown","4c01f4f0":"markdown","288fecc0":"markdown","ed66cb30":"markdown","726b9a42":"markdown","6014b962":"markdown","8ec6fcee":"markdown","d2623b52":"markdown","d086a7ff":"markdown","2abb006a":"markdown","edbd8454":"markdown","3d3662e8":"markdown","3dc67771":"markdown","c09d662f":"markdown","11da65e4":"markdown","28df40e1":"markdown","3f55c545":"markdown","7871c039":"markdown","4cc77a27":"markdown","4529e43c":"markdown","64b38d90":"markdown","d2abb96d":"markdown","da84b5f0":"markdown","d08054cc":"markdown","b5547b3b":"markdown","dab00a10":"markdown","2b4e15cf":"markdown","ef145126":"markdown","b50b3932":"markdown","764a981e":"markdown","f17a7b5f":"markdown","c4d634c7":"markdown","37c47855":"markdown"},"source":{"df457aaf":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f636796b":"import warnings\nfrom collections import Counter\nimport math\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm, skew\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.metrics import mean_squared_log_error, accuracy_score\nimport xgboost as xgb\nimport lightgbm as lgb\n\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', None)\nplt.style.use(style='ggplot')\n%matplotlib inline","324727ef":"train = pd.read_csv('..\/input\/tmdb-box-office-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/tmdb-box-office-prediction\/test.csv')\nsample = pd.read_csv('..\/input\/tmdb-box-office-prediction\/sample_submission.csv')\ntest_id = test['id']\ntarget = train['revenue']","6eccace0":"train.head()","698f98fa":"test.head()","cdcf77ee":"sample.head()","0bf319aa":"train.shape, test.shape","557e4d93":"for i in range(10):\n    print(train['belongs_to_collection'][i])","fa1b15cd":"train.isnull().sum()","de2c17e1":"test.isnull().sum()","da97bc51":"train.drop(['belongs_to_collection'], axis=1, inplace=True)\ntest.drop(['belongs_to_collection'], axis=1, inplace=True)","27b38c54":"for i in range(10):\n    print(train['genres'][i])","c4db99bc":"print(train.iloc[1, :])","f0660b6a":"def get_dict(s):\n    try:\n        d = eval(s)\n    except:\n        d = {}\n    return d","2d078660":"gn = pd.DataFrame(columns=['genre_name'])\ngn","c77a55e2":"train = pd.concat([train, gn], axis=1)\ntrain.head()","4a15cfdc":"test = pd.concat([test, gn], axis=1)\ntest.head()","1f9bdbe0":"j = 0\nfor i in train['genres']:\n    d = get_dict(i)\n    if d != {}:\n        train['genre_name'][j] = d[0]['name'] \n    else:\n         train['genre_name'][j] = np.NaN\n    j += 1\n\nj = 0\nfor i in test['genres']:\n    d = get_dict(i)\n    if d != {}:\n        test['genre_name'][j] = d[0]['name'] \n    else:\n         test['genre_name'][j] = np.NaN\n    j += 1","5c64ee15":"train.drop(['genres'], axis=1, inplace=True)\ntest.drop(['genres'], axis=1, inplace=True)","1c97c410":"train['budget'].unique()","6f4051ab":"train[train['budget'] == 0].shape[0]","8f3877fb":"plt.subplots(figsize=(12, 9))\nplt.scatter(x=train['budget'], y=train['revenue'])","79a7cfe1":"train['homepage'].value_counts(dropna=False)","7d8bb9de":"has_hompage = pd.DataFrame(columns=['has_homepage'])","438eeed2":"train = pd.concat([train, has_hompage], axis=1)\ntest = pd.concat([test, has_hompage], axis=1)","f23f9c5c":"j = 0\nfor i in train['homepage']:\n    if str(train['homepage'][j]) == 'nan':\n        train['has_homepage'][j] = 0\n    else:\n        train['has_homepage'][j] = 1\n    j += 1\n\nj = 0\nfor i in test['homepage']:\n    if str(test['homepage'][j]) == 'nan':\n        test['has_homepage'][j] = 0\n    else:\n        test['has_homepage'][j] = 1\n    j += 1","7a166c8d":"sns.catplot(x='has_homepage', y='revenue', data=train)","959736ea":"train.drop(['homepage'], axis=1, inplace=True)\ntest.drop(['homepage'], axis=1, inplace=True)\ntrain.shape, test.shape","f6e182c7":"train['imdb_id']","f6f75f8d":"train.drop(['imdb_id'], axis=1, inplace=True)\ntest.drop(['imdb_id'], axis=1, inplace=True)\ntrain.shape, test.shape","15fd9dba":"print(len(train['original_language'].value_counts(dropna=False)))\ntrain['original_language'].value_counts(dropna=False)","e0fee7a5":"print(len(test['original_language'].value_counts(dropna=False)))\ntest['original_language'].value_counts(dropna=False)","aaf9ebaa":"plt.subplots(figsize=(12, 9))\nsns.boxplot(x=train['original_language'], y=train['revenue'])","1c5795c0":"isOrgEn = pd.DataFrame(columns=['is_en_original_language'])\ntrain = pd.concat([train, isOrgEn], axis=1)\ntest = pd.concat([test, isOrgEn], axis=1)\n\nprint(train['original_language'][0])","e59e37d5":"j = 0\nfor i in train['original_language']:\n    if i == 'en':\n        train['is_en_original_language'][j] = 1\n    else:\n        train['is_en_original_language'][j] = 0\n    j += 1\n    \nj = 0\nfor i in test['original_language']:\n    if i == 'en':\n        test['is_en_original_language'][j] = 1\n    else:\n        test['is_en_original_language'][j] = 0\n    j += 1","080fe8ef":"sns.catplot(x='is_en_original_language', y='revenue', data=train)","502cdd12":"len(train['original_title'].value_counts())","63f059e7":"train.drop(['original_title'], axis=1, inplace=True)\ntest.drop(['original_title'], axis=1, inplace=True)","992499b3":"for i in range(5): \n    print(train['overview'][i])\n    print(\"--------------------\")","647932d3":"train.drop(['overview'], axis=1, inplace=True)\ntest.drop(['overview'], axis=1, inplace=True)\ntrain.shape, test.shape","b429719a":"# Popularity ","ac5b79e8":"train['popularity'].unique()","f16f7839":"train['popularity'].isnull().sum()","213d1153":"plt.subplots(figsize=(12, 9))\n# sns.catplot(x='revenue', y='popularity', data=train)\nplt.scatter(x=train['popularity'], y=train['revenue'])\nplt.xlabel('popularity')\nplt.ylabel('revenue')\nplt.show()","906f4625":"train.drop(['poster_path'], axis=1, inplace=True)\ntest.drop(['poster_path'], axis=1, inplace=True)\ntrain.shape, test.shape","4c8674a1":"for i in range(5):\n    print(train['production_companies'][i])\n    print(\"-------\")","c1ab2cec":"num_prod_com = pd.DataFrame(columns=['num_production_companies'])\ntrain = pd.concat([train, num_prod_com], axis=1)\ntest = pd.concat([test, num_prod_com], axis=1)","db9a064c":"d = get_dict(train['production_companies'][0])\n# This has 3 production companies\nprint(len(d))\nd","030f278f":"j = 0\nfor i in train['production_companies']:\n    d = get_dict(i)\n    if len(d) != 0:\n        train['num_production_companies'][j] = len(d)\n    else:\n        train['num_production_companies'][j] = np.NaN\n    j += 1\n\nj = 0\nfor i in test['production_companies']:\n    d = get_dict(i)\n    if len(d) != 0:\n        test['num_production_companies'][j] = len(d)\n    else:\n        test['num_production_companies'][j] = np.NaN\n    j += 1","4c74df32":"sns.catplot(x='num_production_companies', y='revenue', data=train)","8fe4bb12":"list_of_companies = []\nfor i in train['production_companies']:\n    d = get_dict(i)\n    if d != {}:\n        for j in range(len(d)):\n            list_of_companies.append(d[j]['name'])\nlist_of_companies","a46f664f":"# Top 50 production companies\ntop_companies_cnt = list(Counter(list_of_companies).most_common(50))\ntop_companies = []\nfor i in top_companies_cnt:\n    top_companies.append(i[0])\ntemp = 0\nfor i in top_companies_cnt:\n    temp += i[1]\ntemp","5a0642f7":"print(top_companies_cnt)","19c95bfd":"print(top_companies)","56f5fd43":"prod_company = pd.DataFrame(columns=['production_company'])\ntrain = pd.concat([train, prod_company], axis=1)\ntest = pd.concat([test, prod_company], axis=1)","b0094218":"j = 0\ncnt = 0\nchk = False\nfor i in train['production_companies']:\n    d = get_dict(i)\n#     print(len(d))\n    if d != {}:\n        if len(d) > 1:\n            for k in range(len(d)):\n                company_name = d[k]['name']\n                if company_name in top_companies:\n                    train['production_company'][j] = company_name\n                    cnt += 1\n                    chk = True\n                    break\n            \n            if chk is False:\n                    train['production_company'][j] = d[0]['name']\n                \n        else:\n            train['production_company'][j] = d[0]['name']\n    else:\n        train['production_company'][j] = np.NaN\n    j += 1\n\nprint(\"THE NUMBER OF TOP COMPANIES AT TRAIN:\", cnt)\n\nj = 0\ncnt = 0\nchk = False\nfor i in test['production_companies']:\n    d = get_dict(i)\n#     print(len(d))\n    if d != {}:\n        if len(d) > 1:\n            for k in range(len(d)):\n                company_name = d[k]['name']\n                if company_name in top_companies:\n                    test['production_company'][j] = company_name\n                    cnt += 1\n                    chk = True\n                    break\n            \n            if chk is False:\n                    test['production_company'][j] = d[0]['name']\n                \n        else:\n            test['production_company'][j] = d[0]['name']\n    else:\n        test['production_company'][j] = np.NaN\n    j += 1\n\nprint(\"THE NUMBER OF TOP COMPANIES AT TEST:\", cnt)","66606c02":"train['production_company'].value_counts(dropna=False)","4a68e9e3":"train.drop(['production_companies', 'production_company'], axis=1, inplace=True)\ntest.drop(['production_companies', 'production_company'], axis=1, inplace=True)\ntrain.shape, test.shape","788acedc":"prod_country = pd.DataFrame(columns=['production_country'])\ntrain = pd.concat([train, prod_country], axis=1)\ntest = pd.concat([test, prod_country], axis=1)","d2f43b0f":"j = 0\nfor i in train['production_countries']:\n    d = get_dict(i)\n    if d != {}:\n        if len(d) > 1:\n            countires = []\n            for k in range(len(d)):\n                countires.append(d[k]['name'])\n            if 'United States of America' in countires:\n                train['production_country'][j] = 'United States of America'\n        else:\n            train['production_country'][j] = d[0]['name']\n    else:\n        train['production_country'][j] = np.NaN\n    j += 1\n    \nj = 0\nfor i in test['production_countries']:\n    d = get_dict(i)\n    if d != {}:\n        if len(d) > 1:\n            countires = []\n            for k in range(len(d)):\n                countires.append(d[k]['name'])\n            if 'United States of America' in countires:\n                test['production_country'][j] = 'United States of America'\n        else:\n            test['production_country'][j] = d[0]['name']\n    else:\n        test['production_country'][j] = np.NaN\n    j += 1","b4e0ddc4":"sns.catplot(x='production_country', y='revenue', data=train)","9d5d58b9":"is_usa_production = pd.DataFrame(columns=['is_usa_production'])\ntrain = pd.concat([train, is_usa_production], axis=1)\ntest = pd.concat([test, is_usa_production], axis=1)","6db57a0c":"j = 0\nfor i in train['production_country']:\n    if i == 'United States of America':\n        train['is_usa_production'][j] = 1\n    elif str(i) == 'nan':\n        train['is_usa_production'][j] = np.NaN\n    else:\n        train['is_usa_production'][j] = 0\n    j += 1\n    \nj = 0\nfor i in test['production_country']:\n    if i == 'United States of America':\n        test['is_usa_production'][j] = 1\n    elif str(i) == 'nan':\n        test['is_usa_production'][j] = np.NaN\n    else:\n        test['is_usa_production'][j] = 0\n    \n    j += 1","da75449f":"sns.catplot(x='is_usa_production', y='revenue', data=train)","bc95afa0":"train.drop(['production_countries'], axis=1, inplace=True)\ntest.drop(['production_countries'], axis=1, inplace=True)","bb46b2c7":"train['release_date'][:5]","c9ee8ae5":"print(list(train['release_date'][1]))\nprint(train['release_date'][1])","5e068bca":"train[['release_month', 'release_day', 'release_year']] = train['release_date'].str.split('\/',expand=True).replace(np.nan, -1).astype(int)\ntest[['release_month', 'release_day', 'release_year']] = test['release_date'].str.split('\/',expand=True).replace(np.nan, -1).astype(int)","5b4d32d5":"train.drop(['release_date'], axis=1, inplace=True)\ntest.drop(['release_date'], axis=1, inplace=True)\ntrain.shape, test.shape","20b5d636":"sns.catplot(x='release_month', y='revenue', data=train)","1fec5c81":"sns.catplot(x='release_day', y='revenue', data=train)","f64c1ed6":"plt.subplots(figsize=(12, 9))\nplt.scatter(x=train['release_year'], y=train['revenue'])","dfb3bf1a":"print(train['runtime'].isnull().sum())\nprint(test['runtime'].isnull().sum())","e3636b54":"plt.subplots(figsize=(12, 9))\nplt.scatter(x=train['runtime'], y=train['revenue'])","b28a68f6":"# Zero running time means null value\nprint(len(train[train['runtime'] == 0]))\nprint(len(train[train['runtime'] == 0]))","3c925c18":"train['spoken_languages'][:5]","2c9d4f3d":"number_of_spoken_languages = pd.DataFrame(columns=['number_of_spoken_languages'])\ntrain = pd.concat([train, number_of_spoken_languages], axis=1)\ntest = pd.concat([test, number_of_spoken_languages], axis=1)","153e3309":"j = 0\nfor i in train['spoken_languages']:\n    d = get_dict(i)\n    if d != {}:\n        train['number_of_spoken_languages'][j] = len(d)\n    else:\n        train['number_of_spoken_languages'][j] = np.NaN\n    j += 1\n    \nj = 0\nfor i in test['spoken_languages']:\n    d = get_dict(i)\n    if d != {}:\n        test['number_of_spoken_languages'][j] = len(d)\n    else:\n        test['number_of_spoken_languages'][j] = np.NaN\n    j += 1","47426515":"sns.catplot(x='number_of_spoken_languages', y='revenue', data=train)","f6964168":"is_en_spoken = pd.DataFrame(columns=['is_en_spoken'])\ntrain = pd.concat([train, is_en_spoken], axis=1)\ntest = pd.concat([test, is_en_spoken], axis=1)","938c24e9":"j = 0\nfor i in train['spoken_languages']:\n    d = get_dict(i)\n    if d != {}:\n        langs = []\n        for k in range(len(d)):\n            lang = d[k]['name']\n            langs.append(lang)\n        if 'English' in langs:\n            train['is_en_spoken'][j] = 1\n        else:\n            train['is_en_spoken'][j] = 0\n    else:\n        train['is_en_spoken'][j] = np.NaN\n    j += 1\n        \nj = 0\nfor i in test['spoken_languages']:\n    d = get_dict(i)\n    if d != {}:\n        langs = []\n        for k in range(len(d)):\n            lang = d[k]['name']\n            langs.append(lang)\n        if 'English' in langs:\n            test['is_en_spoken'][j] = 1\n        else:\n            test['is_en_spoken'][j] = 0\n    else:\n        test['is_en_spoken'][j] = np.NaN\n    j += 1","ab26d4b7":"sns.catplot(x='is_en_spoken', y='revenue', data=train)","fdc95923":"spoken_language = pd.DataFrame(columns=['spoken_language'])\ntrain = pd.concat([train, spoken_language], axis=1)\ntest = pd.concat([test, spoken_language], axis=1)","5aea7d10":"j = 0\nfor i in train['spoken_languages']:\n    d = get_dict(i)\n    if d != {}:\n        langs = []\n        for k in range(len(d)):\n            lang = d[k]['name']\n            langs.append(lang)\n        if 'English' in langs:\n            train['spoken_language'][j] = 'English'\n        else:\n            train['spoken_language'][j] = langs[0]\n    else:\n        train['spoken_language'][j] = np.NaN\n    j += 1\n    \nj = 0\nfor i in test['spoken_languages']:\n    d = get_dict(i)\n    if d != {}:\n        langs = []\n        for k in range(len(d)):\n            lang = d[k]['name']\n            langs.append(lang)\n        if 'English' in langs:\n            test['spoken_language'][j] = 'English'\n        else:\n            test['spoken_language'][j] = langs[0]\n    else:\n        test['spoken_language'][j] = np.NaN\n    j += 1","a7328a59":"print(len(train['spoken_language'].value_counts()))\nprint(len(test['spoken_language'].value_counts()))","1037217b":"sns.catplot(x='spoken_language', y='revenue', data=train)","975cf590":"train.drop(['spoken_languages'], axis=1, inplace=True)\ntest.drop(['spoken_languages'], axis=1, inplace=True)\ntrain.shape, test.shape","326be7a4":"print(train['status'].value_counts(dropna=False))\nprint(test['status'].value_counts(dropna=False))","42dfd415":"is_released = pd.DataFrame(columns=['is_released'])\ntrain = pd.concat([train, is_released], axis=1)\ntest = pd.concat([test, is_released], axis=1)","3cda836f":"j = 0\nfor i in train['status']:\n    if i == 'Released':\n        train['is_released'][j] = 1\n    else:\n        train['is_released'][j] = 0\n    j += 1\n    \nj = 0\nfor i in test['status']:\n    if i == 'Released':\n        test['is_released'][j] = 1\n    else:\n        test['is_released'][j] = 0\n    j += 1","cc144283":"print(train['is_released'].value_counts(dropna=False))\nprint(test['is_released'].value_counts(dropna=False))","24edf0b2":"sns.catplot(x='is_released', y='revenue', data=train)","916513be":"train.drop(['status'], axis=1, inplace=True)\ntest.drop(['status'], axis=1, inplace=True)\ntrain.shape, test.shape","eb67aa46":"train['tagline'][:10]","1b011b2f":"train.drop(['tagline'], axis=1, inplace=True)\ntest.drop(['tagline'], axis=1, inplace=True)\ntrain.shape, test.shape","91900923":"for i in range(10): \n    print(train['Keywords'][i])\n    print(\"-------\")","fd2c08a2":"keyword = pd.DataFrame(columns=['keyword'])\ntrain = pd.concat([train, keyword], axis=1)\ntest = pd.concat([test, keyword], axis=1)","64219329":"j = 0\nfor i in train['Keywords']:\n    d = get_dict(i)\n    if d != {}:\n        train['keyword'][j] = d[0]['name']\n    else:\n        train['keyword'][j] = np.NaN\n    j += 1\n    \nj = 0\nfor i in test['Keywords']:\n    d = get_dict(i)\n    if d != {}:\n        test['keyword'][j] = d[0]['name']\n    else:\n        test['keyword'][j] = np.NaN\n    j += 1","b0a1578d":"train['keyword'].value_counts(dropna=False)","382190f8":"# We can not handle this much of keywords\ntrain.drop(['Keywords', 'keyword'], axis=1, inplace=True)\ntest.drop(['Keywords', 'keyword'], axis=1, inplace=True)\ntrain.shape, test.shape","24abbf70":"for i in range(1):\n    print(train['cast'][i])\n    print(\"----------\")","61d9e6ff":"size_of_cast = pd.DataFrame(columns=['size_of_cast'])\ntrain = pd.concat([train, size_of_cast], axis=1)\ntest = pd.concat([test, size_of_cast], axis=1)","4e89eb7a":"j = 0\nfor i in train['cast']:\n    d = get_dict(i)\n    if d != {}:\n        train['size_of_cast'][j] = len(d)\n    else:\n        train['size_of_cast'][j] = np.NaN\n    j += 1\n    \nj = 0\nfor i in test['cast']:\n    d = get_dict(i)\n    if d != {}:\n        test['size_of_cast'][j] = len(d)\n    else:\n        test['size_of_cast'][j] = np.NaN\n    j += 1","0686cea7":"plt.subplots(figsize=(12, 9))\nplt.scatter(x=train['size_of_cast'], y=train['revenue'])","49761fbb":"train.drop(['cast'], axis=1, inplace=True)\ntest.drop(['cast'], axis=1, inplace=True)\ntrain.shape, test.shape","2a4e6a52":"train.drop(['id', 'crew', 'title'], axis=1, inplace=True)\ntest.drop(['id', 'crew', 'title'], axis=1, inplace=True)\ntrain.shape, test.shape","4a0bf389":"print(train['budget'].isnull().sum())\nprint(test['budget'].isnull().sum())\nprint(len(train[train['budget'] == 0]))\nprint(len(test[test['budget'] == 0]))","8c1e022e":"plt.scatter(x=train['budget'], y=train['revenue'])","946fd1cb":"ntrain = train.shape[0]\nntest = test.shape[0]\nall_data = pd.concat([train, test], axis=0)\ntrain.shape, test.shape, all_data.shape","01389b2e":"all_data['budget'].dtype","2be30d92":"all_data['budget'] = all_data['budget'].replace(0, all_data['budget'].mean())","ea66331a":"print(all_data['original_language'].isnull().sum())\nprint(len(all_data[all_data['original_language'] == 0]))","868344e5":"print(all_data['popularity'].isnull().sum())\nprint(len(all_data[all_data['popularity'] == 0]))","41eed266":"print(all_data['runtime'].isnull().sum())\nprint(len(all_data[all_data['runtime'] == 0]))","ba43a668":"all_data['runtime'].mean()","e84e59df":"all_data['runtime'] = all_data['runtime'].replace(0, all_data['runtime'].mean())\nall_data['runtime'] = all_data['runtime'].fillna(all_data['runtime'].mean())","b83d690a":"print(all_data['genre_name'].isnull().sum())\nprint(len(all_data[all_data['genre_name'] == 0]))","b45471bb":"print(all_data['genre_name'].value_counts())","7d5a18e5":"all_data['genre_name'] = all_data['genre_name'].fillna(all_data['genre_name'].mode()[0])","f512532d":"print(all_data['num_production_companies'].isnull().sum())\nprint(len(all_data[all_data['num_production_companies'] == 0]))","083283cb":"all_data['num_production_companies'] = all_data['num_production_companies'].fillna(all_data['num_production_companies'].mean().round())","65127231":"train.head()","59fc9069":"# Tagline","2982c3b7":"### I don't think using overview is gonna help us","d5fb035f":"# EDA","b7bf6ffd":"### Genre Name","8266735c":"# Number of prod companies","1e93c7de":"### Most of films have 1-2 production companies, cometimes 3-4. But there are films with 10+ companies! Let's have a look at some of them.\n### Not sure yet what i'm gonna do with these data","8001ddff":"# Original Language","1792e09b":"# Overview","36d137d4":"# Production Company","7cb8aec8":"# Belongs To Collection","128a9431":"# Imdb Id","b3341194":"# Production Companies","0a8968ba":"Clear pattern in the graph above","1611d3ad":"### Runtime","79a0fcba":"## This would be useful","42babe86":"## Zeros in budget mean unknown, we will treat it as missing values later","0339ab80":"### Popularity","4c01f4f0":"# Keywords","288fecc0":"# Production Country","ed66cb30":"# Title, Crew","726b9a42":"# Is English a Spoken Language","6014b962":"# Spoken Languages","8ec6fcee":"## I guess using this column is just useless, we are gonna drop it","d2623b52":"## It would be great to make a new feature (Is Original Language is English)","d086a7ff":"# Status","2abb006a":"### Budget","edbd8454":"# Homepage","3d3662e8":"## I guess my best move for now to get the number of production companies, The most 50 common production companies","3dc67771":"# Is Released","c09d662f":"# RunTime","11da65e4":"# Size of cast (number of actors)","28df40e1":"# Budget","3f55c545":"# Number of Spoken Languages","7871c039":"### Some feature like is USA Production sould be useful here, let's see","4cc77a27":"### The feature we generated is great indeed","4529e43c":"## Let's generate some features like (how many languages have been spoken in the movie, is English has been spoken)","64b38d90":"# Poster Path","d2abb96d":"# Null values","da84b5f0":"### Number of production companies","d08054cc":"# Spoken Language","b5547b3b":"### We Should just extract the useful info (in this case we just need the genre of the movie)","dab00a10":"This feature is really useful","2b4e15cf":"### Original Language","ef145126":"# Release Date","b50b3932":"# Original Title","764a981e":"# Split the Release date to (Release Day, Release Month, Release Year)","f17a7b5f":"# Genres","c4d634c7":"## The scatter plot above seems interesting, this really shows that having a wepage for the movie is really affects its revenue","37c47855":"# Cast"}}