{"cell_type":{"ee299aea":"code","5726d522":"code","5cf98f6d":"code","25861a6e":"code","11b0c402":"markdown","3e0042e5":"markdown","fa609f44":"markdown","95ccf92b":"markdown","cd8a6882":"markdown","80800ba6":"markdown"},"source":{"ee299aea":"# 1.) Import python modules\nimport pandas as pd\nimport numpy as np\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\n# 2.) Import datasets\noriginal_df_trainval = pd.read_csv(\"..\/input\/train.csv\")\noriginal_df_test_X = pd.read_csv(\"..\/input\/test.csv\")\n\n# 3.) Output the first rows of one of the datasets\noriginal_df_trainval.head(2)","5726d522":"# This function will be called later to prepare our input data\ndef prepare_data(df):\n    # a.) Use the `id` feature as the index column of the data frame\n    df = df.set_index('id')\n\n    # b.) Only use easy to process features\n    #  Warning: huge information loss here, you should propably include more features in your production code.\n    df = df[['budget', 'original_language' ,'popularity', 'runtime', 'status']]\n    \n    # c.) One-Hot-Encoding for all nominal data\n    df = pd.get_dummies(df)\n    \n    # d.) The `runtime` feature is not filled in 2 of the rows. We replace those empty cells \/ NaN values with a 0.\n    #  Warning: in production code, please use a better method to deal with missing cells like interpolation or additional `is_missing` feature columns.\n    return df.fillna(0)\n\n\n# 1.) Extract the target variable `revenue` and use the `id` column as index of that data frame\ndf_trainval_y = original_df_trainval[['id','revenue']].set_index('id')\n\n# 2.) Prepare the training and test data by using the function we defined above\ndf_trainval_X = prepare_data(original_df_trainval)\ndf_test_X  = prepare_data(original_df_test_X)\n\n# 3.) Create columns in train\/test dataframes if they only exist in one of them (can happen through one hot encoding \/ get_dummies)\n#  Example: There are no status=`Post Production` entries in the training set, but there are some in the test set.\ndf_trainval_X, df_test_X = df_trainval_X.align(df_test_X, join='outer', axis=1, fill_value=0)\n\n# 4.) Show the first rows of one of the prepared tables\ndf_trainval_X.head(2)","5cf98f6d":"# 1.) Remove table meta data, column names etc. \u2192 Just use values for prediction.\nX_trainval = df_trainval_X.values\ny_trainval = df_trainval_y.values\n\nX_test  = df_test_X.values\n\n# 2.) Create Validation Split\nX_train, X_val, y_train, y_val = train_test_split(X_trainval, y_trainval, test_size=0.5, random_state=56)\n\n# 3.) Scale\nX_scaler = StandardScaler()\nX_train_scaled  = X_scaler.fit_transform(X_train)\nX_val_scaled    = X_scaler.transform(X_val)\nX_test_scaled   = X_scaler.transform(X_test)\n\ny_scaler = MinMaxScaler((0,1)) # transform and convert column-vector y to a 1d array with ravel\ny_train_scaled  = y_scaler.fit_transform(np.log(y_train)).ravel() \n#y_val_scaled  = y_scaler.transform(np.log(y_val)).ravel() #not used but here for consistency\n\n# 4.) Calculate the coefficients of the linear regression \/ \"Train\"\nreg     = KNeighborsRegressor().fit(X_train_scaled, y_train_scaled)\n\n# 5.) Define functions to calculate a score\ndef score_function(y_true, y_pred):\n    # see https:\/\/www.kaggle.com\/c\/tmdb-box-office-prediction\/overview\/evaluation\n    # we use Root Mean squared logarithmic error (RMSLE) regression loss\n    assert len(y_true) == len(y_pred)\n    return np.sqrt(np.mean((np.log1p(y_pred) - np.log1p(y_true))**2))\n\ndef score_function2(y_true, y_pred):\n    # alternative implementation\n    y_pred = np.where(y_pred>0, y_pred, 0)\n    return np.sqrt(mean_squared_log_error(y_true, y_pred))\n\ndef inverseY(y):\n    return np.exp(y_scaler.inverse_transform(np.reshape(y, (-1,1))))\n\n# 6.) Apply the regression model on the prepared train, validation and test set and invert the logarithmic scaling\ny_train_pred  = inverseY(reg.predict(X_train_scaled))\ny_val_pred    = inverseY(reg.predict(X_val_scaled))\ny_test_pred   = inverseY(reg.predict(X_test_scaled))\n                   \n# 7.) Print the RMLS error on training, validation and test set. it should be as low as possible\nprint(\"RMLS Error on Training Dataset:\\t\", score_function(y_train , y_train_pred), score_function2(y_train, y_train_pred))\nprint(\"RMLS Error on Val Dataset:\\t\", score_function(y_val , y_val_pred), score_function2(y_val , y_val_pred))\nprint(\"RMLS Error on Test Dataset:\\t Check by submitting on kaggle\")","25861a6e":"# 1.) Add the predicted values to the original test data\ndf_test = original_df_test_X.assign(revenue=y_test_pred)\n\n# 2.) Extract a table of ids and their revenue predictions\ndf_test_y = df_test[['id','revenue']].set_index('id')\n\n# 3.) save that table to a csv file. On Kaggle, the file will be visible in the \"output\" tab if the kernel has been commited at least once.\ndf_test_y.to_csv(\"submission.csv\")\n\n# 4.) output the head of our file her to check if it looks good :)\npd.read_csv(\"submission.csv\").head(5)","11b0c402":"# Code Template for Revenue-Prediction (using a Simple Regression)\nThis is a template that can be used to quick-start into more detailed projects. In this example we remove a lot of information, so the expected result will have a very low accuracy. But it will be a great starting point for your own kernel.","3e0042e5":"## 2\/4 Prepare Data\nWe need to prepare our test and training data. Usually, implementing this takes a lot of time, but for this simple example we will just remove features that would be too complicated to preprocess.","fa609f44":"## 4\/4 Convert Prediction to submittable CSV file\nIn order to get our test accuracy, we need to convert our prediction to a comma seperated table file which we can upload to kaggle [here](https:\/\/www.kaggle.com\/c\/tmdb-box-office-prediction\/data).","95ccf92b":"## 1\/4 Import Modules and Dataset\nWe need to load two python modules and the datasets to get started.","cd8a6882":"## 3\/4 Predict Values (Linear Regression)\nIn this example we will use a linear regression model to predict the target value (revenue).","80800ba6":"## That's it!\nI hope you liked this basic template, if you have any suggestions on how to improve this kernel feel free to write a comment.\n\nIf this kernel helped you quick-start into your own data science project please make sure to leave an upvote :)"}}