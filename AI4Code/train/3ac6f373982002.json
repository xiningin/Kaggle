{"cell_type":{"9d33f306":"code","007a3853":"code","0489ca21":"code","44b4cee7":"code","a72dd571":"code","a4572409":"code","df3d2a66":"code","2a0086c6":"code","853a37dd":"code","ebae847d":"code","2496a89b":"code","62d69265":"code","dd85f916":"code","c9758123":"code","7257f6b6":"code","cda5003e":"code","cfcc3c87":"code","7a96d3ac":"code","418235bf":"code","e9592c50":"code","8f6f5ce3":"code","49b40977":"code","ebf32a4d":"markdown","c3cd8135":"markdown","986ef834":"markdown","cced2fe9":"markdown","f504e71d":"markdown","c63992b2":"markdown"},"source":{"9d33f306":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import *\nfrom sklearn.model_selection import *\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import LinearSVC\n\ndf_detailed_results = pd.read_csv('\/kaggle\/input\/ncaam-march-mania-2021\/MRegularSeasonDetailedResults.csv')\nteams = pd.read_csv('\/kaggle\/input\/ncaam-march-mania-2021\/MTeams.csv')\n\npd.set_option('display.max_columns', None)","007a3853":"def team_id_to_team_name(team_id):\n    return teams[teams['TeamID'] == team_id].iloc[0]['TeamName']\n\ndf_detailed_results.head()","0489ca21":"def initialize_team_row(team_id):\n    return {'Season': season,\n            'Wins': 0,\n            'Losses': 0,\n\n            'TeamName': team_id_to_team_name(team_id),\n            'TeamID': team_id,\n            'PointDifferential': 0,\n\n            'FGM': 0,\n            'FGA': 0,\n            'FGM3': 0,\n            'FGA3': 0,\n            'FTM': 0,\n            'FTA': 0,\n            'OR': 0,\n            'DR': 0,\n            'AST': 0,\n            'TO': 0,\n            'STL': 0,\n            'BLK': 0,\n\n            'OppFGM': 0,\n            'OppFGA': 0,\n            'OppFGM3': 0,\n            'OppFGA3': 0,\n            'OppFTM': 0,\n            'OppFTA': 0,\n            'OppOR': 0,\n            'OppDR': 0,\n            'OppAST': 0,\n            'OppTO': 0,\n            'OppSTL': 0,\n            'OppBLK': 0}\n\nwin_loss = {}\n\nprint(\"iterating through \" + str(len(df_detailed_results)) + \" rows\")\nfor index, row in df_detailed_results.iterrows():\n    if(index % 10000 == 0):\n        print(\"row \" + str(index) + \" of \" + str(len(df_detailed_results)))\n    \n    season = row['Season']\n    w_team_id = row['WTeamID']\n    l_team_id = row['LTeamID']\n\n    wfgm = row['WFGM']\n    wfga = row['WFGA']\n    wfgm3 = row['WFGM3']\n    wfga3 = row['WFGA3']\n    wftm = row['WFTM']\n    wfta = row['WFTA']\n    wor = row['WOR']\n    wdr = row['WDR']\n    wast = row['WAst']\n    wto = row['WTO']\n    wstl = row['WStl']\n    wblk = row['WBlk']\n\n    lfgm = row['LFGM']\n    lfga = row['LFGA']\n    lfgm3 = row['LFGM3']\n    lfga3 = row['LFGA3']\n    lftm = row['LFTM']\n    lfta = row['LFTA']\n    lor = row['LOR']\n    ldr = row['LDR']\n    last = row['LAst']\n    lto = row['LTO']\n    lstl = row['LStl']\n    lblk = row['LBlk']\n    \n    point_differential = row['WScore'] - row['LScore']\n    \n    if season not in win_loss:\n        win_loss[season] = {}\n    if w_team_id not in win_loss[season]:\n        win_loss[season][w_team_id] = initialize_team_row(w_team_id)\n    if l_team_id not in win_loss[season]:\n        win_loss[season][l_team_id] = initialize_team_row(l_team_id)\n    \n    win_loss[season][w_team_id]['Wins'] += 1\n    win_loss[season][w_team_id]['PointDifferential'] += point_differential\n    win_loss[season][w_team_id]['FGM'] += wfgm\n    win_loss[season][w_team_id]['FGA'] += wfga\n    win_loss[season][w_team_id]['FGM3'] += wfgm3\n    win_loss[season][w_team_id]['FGA3'] += wfga3\n    win_loss[season][w_team_id]['FTM'] += wftm\n    win_loss[season][w_team_id]['FTA'] += wfta\n    win_loss[season][w_team_id]['OR'] += wor\n    win_loss[season][w_team_id]['DR'] += wdr\n    win_loss[season][w_team_id]['AST'] += wast\n    win_loss[season][w_team_id]['TO'] += wto\n    win_loss[season][w_team_id]['STL'] += wstl\n    win_loss[season][w_team_id]['BLK'] += wblk\n    \n    win_loss[season][w_team_id]['OppFGM'] += lfgm\n    win_loss[season][w_team_id]['OppFGA'] += lfga\n    win_loss[season][w_team_id]['OppFGM3'] += lfgm3\n    win_loss[season][w_team_id]['OppFGA3'] += lfga3\n    win_loss[season][w_team_id]['OppFTM'] += lftm\n    win_loss[season][w_team_id]['OppFTA'] += lfta\n    win_loss[season][w_team_id]['OppOR'] += lor\n    win_loss[season][w_team_id]['OppDR'] += ldr\n    win_loss[season][w_team_id]['OppAST'] += last\n    win_loss[season][w_team_id]['OppTO'] += lto\n    win_loss[season][w_team_id]['OppSTL'] += lstl\n    win_loss[season][w_team_id]['OppBLK'] += lblk\n\n    win_loss[season][l_team_id]['Losses'] += 1\n    win_loss[season][l_team_id]['PointDifferential'] -= point_differential\n    win_loss[season][l_team_id]['FGM'] += lfgm\n    win_loss[season][l_team_id]['FGA'] += lfga\n    win_loss[season][l_team_id]['FGM3'] += lfgm3\n    win_loss[season][l_team_id]['FGA3'] += lfga3\n    win_loss[season][l_team_id]['FTM'] += lftm\n    win_loss[season][l_team_id]['FTA'] += lfta\n    win_loss[season][l_team_id]['OR'] += lor\n    win_loss[season][l_team_id]['DR'] += ldr\n    win_loss[season][l_team_id]['AST'] += last\n    win_loss[season][l_team_id]['TO'] += lto\n    win_loss[season][l_team_id]['STL'] += lstl\n    win_loss[season][l_team_id]['BLK'] += lblk\n    \n    win_loss[season][l_team_id]['OppFGM'] += wfgm\n    win_loss[season][l_team_id]['OppFGA'] += wfga\n    win_loss[season][l_team_id]['OppFGM3'] += wfgm3\n    win_loss[season][l_team_id]['OppFGA3'] += wfga3\n    win_loss[season][l_team_id]['OppFTM'] += wftm\n    win_loss[season][l_team_id]['OppFTA'] += wfta\n    win_loss[season][l_team_id]['OppOR'] += wor\n    win_loss[season][l_team_id]['OppDR'] += wdr\n    win_loss[season][l_team_id]['OppAST'] += wast\n    win_loss[season][l_team_id]['OppTO'] += wto\n    win_loss[season][l_team_id]['OppSTL'] += wstl\n    win_loss[season][l_team_id]['OppBLK'] += wblk\n\nprint(\"FINISHED\")","44b4cee7":"# *** NEW DF: df_teams ***\n# years 2003-2020\ncols = ['Season', 'TeamID', 'TeamName', 'Wins', 'Losses', 'PointDifferential',\n        'FGM', 'FGA', 'FGM3', 'FGA3', 'FTM', 'FTA', 'OR', 'DR', 'AST', 'TO', 'STL', 'BLK',\n        'OppFGM', 'OppFGA', 'OppFGM3', 'OppFGA3', 'OppFTM', 'OppFTA', 'OppOR', 'OppDR', 'OppAST', 'OppTO',\n        'OppSTL', 'OppBLK']\n\ndf_teams = pd.DataFrame([], columns = cols)\n\nprint(\"iterating through \" + str(len(win_loss.values())) + \" years of results\")\nfor i, v in enumerate(win_loss.values()):\n    print(\"year \" + str(i+1) + \" of \" + str(len(win_loss.values())))\n    for row in v.values():\n        df_teams = df_teams.append(row, ignore_index=True)\n\ndf_teams['Season'] = df_teams['Season'].astype(int)\ndf_teams['TeamID'] = df_teams['TeamID'].astype(int)\ndf_teams['TeamName'] = df_teams['TeamName'].astype(str)\n\nprint(\"FINISHED\")","a72dd571":"df_teams.head()","a4572409":"n_games = (df_teams['Wins'] + df_teams['Losses'])\n\ndf_teams['WinningPct'] = df_teams['Wins'] \/ n_games\n\ndf_teams['FGPct'] = df_teams['FGM'] \/ df_teams['FGA']\ndf_teams['FG3Pct'] = df_teams['FGM3'] \/ df_teams['FGA3']\ndf_teams['FTPct'] = df_teams['FTM'] \/ df_teams['FTA']\ndf_teams['ORPerGame'] = df_teams['OR'] \/ n_games\ndf_teams['DRPerGame'] = df_teams['DR'] \/ n_games\ndf_teams['ASTPerGame'] = df_teams['AST'] \/ n_games\ndf_teams['TOPerGame'] = df_teams['TO'] \/ n_games\ndf_teams['ASTtoTO'] = df_teams['AST'] \/ df_teams['TO']\ndf_teams['STLPerGame'] = df_teams['STL'] \/ n_games\ndf_teams['BLKPerGame'] = df_teams['BLK'] \/ n_games\ndf_teams['FGAPerGame'] = df_teams['FGA'] \/ n_games\ndf_teams['PointDifferentialPerGame'] = df_teams['PointDifferential'] \/ n_games\ndf_teams['AssistedFGPct'] = df_teams['AST'] \/ df_teams['FGM']\n\ndf_teams['OppFGPct'] = df_teams['OppFGM'] \/ df_teams['OppFGA']\ndf_teams['OppFG3Pct'] = df_teams['OppFGM3'] \/ df_teams['OppFGA3']\ndf_teams['OppFTPct'] = df_teams['OppFTM'] \/ df_teams['OppFTA']\ndf_teams['OppORPerGame'] = df_teams['OppOR'] \/ n_games\ndf_teams['OppDRPerGame'] = df_teams['OppDR'] \/ n_games\ndf_teams['OppASTPerGame'] = df_teams['OppAST'] \/ n_games\ndf_teams['OppTOPerGame'] = df_teams['OppTO'] \/ n_games\ndf_teams['OppASTtoTO'] = df_teams['OppAST'] \/ df_teams['OppTO']\ndf_teams['OppSTLPerGame'] = df_teams['OppSTL'] \/ n_games\ndf_teams['OppBLKPerGame'] = df_teams['OppBLK'] \/ n_games\ndf_teams['OppFGAPerGame'] = df_teams['OppFGA'] \/ n_games\ndf_teams['OppAssistedFGPct'] = df_teams['OppAST'] \/ df_teams['OppFGM']","df3d2a66":"count_cols = ['Wins', 'Losses', 'PointDifferential',\n              'FGM', 'FGA', 'FGM3', 'FGA3', 'FTM', 'FTA', 'OR', 'DR', 'AST', 'TO', 'STL', 'BLK',\n              'OppFGM', 'OppFGA', 'OppFGM3', 'OppFGA3', 'OppFTM', 'OppFTA', 'OppOR', 'OppDR', 'OppAST', 'OppTO',\n              'OppSTL', 'OppBLK']\n\nper_game_cols = ['WinningPct', 'ORPerGame', 'DRPerGame', 'ASTPerGame', 'TOPerGame', 'STLPerGame', 'BLKPerGame',\n                 'FGAPerGame', 'PointDifferentialPerGame',\n                 'OppDRPerGame', 'OppASTPerGame', 'OppTOPerGame', 'OppASTtoTO', 'OppSTLPerGame', 'OppBLKPerGame',\n                 'OppFGAPerGame']\n\nrate_cols = per_game_cols + ['FGPct', 'FG3Pct', 'FTPct', 'ASTtoTO', 'OppFGPct', 'OppFG3Pct', 'OppFTPct',\n                             'OppORPerGame', 'AssistedFGPct', 'OppAssistedFGPct']\n\nnumeric_cols = count_cols + rate_cols\n\ndf_teams[numeric_cols] = df_teams[numeric_cols].apply(pd.to_numeric)\nset(df_teams.columns).difference(set(numeric_cols))","2a0086c6":"# *** NEW DF: df_tourney_results ***\n# *** NEW DF: df_seeds ***\n# (years 1985-2019)\n\ndf_tourney_results = pd.read_csv('\/kaggle\/input\/ncaam-march-mania-2021\/MNCAATourneyCompactResults.csv')\ndf_seeds = pd.read_csv('\/kaggle\/input\/ncaam-march-mania-2021\/MNCAATourneySeeds.csv')\n\ndf_tourney_results = df_tourney_results.merge(df_seeds, how='left', left_on=['Season', 'WTeamID'], right_on=['Season', 'TeamID']).drop('TeamID', axis=1).rename(columns={'Seed': 'WSeed'})\ndf_tourney_results = df_tourney_results.merge(df_seeds, how='left', left_on=['Season', 'LTeamID'], right_on=['Season', 'TeamID']).drop('TeamID', axis=1).rename(columns={'Seed': 'LSeed'})\n\ndf_tourney_results['WSeed'] = df_tourney_results['WSeed'].str.replace(r'[A-Za-z]', '', regex=True).astype('int')\ndf_tourney_results['LSeed'] = df_tourney_results['LSeed'].str.replace(r'[A-Za-z]', '', regex=True).astype('int')\n\ndf_tourney_results = df_tourney_results.drop(['DayNum', 'NumOT', 'WLoc'], axis=1)\ndf_tourney_results = df_tourney_results.rename(columns={'WTeamID': 'ATeamID',\n                                                        'LTeamID': 'BTeamID',\n                                                        'WScore': 'AScore',\n                                                        'LScore': 'BScore',\n                                                        'WSeed': 'ASeed',\n                                                        'LSeed': 'BSeed'})","853a37dd":"# **SIMILAR CODE TO BELOW (here for df_tourney_results TRAIN data, below for df_test TEST data)**\n# merge df_teams and rename to Team A and Team B column names\ndf_tourney_results = df_tourney_results.merge(df_teams, how='left', left_on=['Season', 'ATeamID'], right_on=['Season', 'TeamID'])\ndf_tourney_results = df_tourney_results.rename(columns={'Wins': 'AWins',\n                                                        'Losses': 'ALosses',\n                                                        'PointDifferential': 'APointDifferential',\n                                                        'WinningPct': 'AWinningPct',\n                                                        'TeamName': 'ATeamName',\n                                                        'FGM': 'AFGM',\n                                                        'FGA': 'AFGA',\n                                                        'FGM3': 'AFGM3',\n                                                        'FGA3': 'AFGA3',\n                                                        'FTM': 'AFTM',\n                                                        'FTA': 'AFTA',\n                                                        'OR': 'AOR',\n                                                        'DR': 'ADR',\n                                                        'AST': 'AAST',\n                                                        'TO': 'ATO',\n                                                        'STL': 'ASTL',\n                                                        'BLK': 'ABLK',\n                                                        'OppFGM': 'AOppFGM',\n                                                        'OppFGA': 'AOppFGA',\n                                                        'OppFGM3': 'AOppFGM3',\n                                                        'OppFGA3': 'AOppFGA3',\n                                                        'OppFTM': 'AOppFTM',\n                                                        'OppFTA': 'AOppFTA',\n                                                        'OppOR': 'AOppOR',\n                                                        'OppDR': 'AOppDR',\n                                                        'OppAST': 'AOppAST',\n                                                        'OppTO': 'AOppTO',\n                                                        'OppSTL': 'AOppSTL',\n                                                        'OppBLK': 'AOppBLK',\n                                                        'FGPct': 'AFGPct',\n                                                        'FGAPerGame': 'AFGAPerGame',\n                                                        'FG3Pct': 'AFG3Pct',\n                                                        'FTPct': 'AFTPct',\n                                                        'PointDifferentialPerGame': 'APointDifferentialPerGame',\n                                                        'ORPerGame': 'AORPerGame',\n                                                        'DRPerGame': 'ADRPerGame',\n                                                        'ASTPerGame': 'AASTPerGame',\n                                                        'TOPerGame': 'ATOPerGame',\n                                                        'ASTtoTO': 'AASTtoTO',\n                                                        'AssistedFGPct': 'AAssistedFGPct',\n                                                        'STLPerGame': 'ASTLPerGame',\n                                                        'BLKPerGame': 'ABLKPerGame',\n                                                        'OppFGPct': 'AOppFGPct',\n                                                        'OppFG3Pct': 'AOppFG3Pct',\n                                                        'OppFTPct': 'AOppFTPct',\n                                                        'OppORPerGame': 'AOppORPerGame',\n                                                        'OppDRPerGame': 'AOppDRPerGame',\n                                                        'OppASTPerGame': 'AOppASTPerGame',\n                                                        'OppTOPerGame': 'AOppTOPerGame',\n                                                        'OppASTtoTO': 'AOppASTtoTO',\n                                                        'OppSTLPerGame': 'AOppSTLPerGame',\n                                                        'OppBLKPerGame': 'AOppBLKPerGame',\n                                                        'OppFGAPerGame': 'AOppFGAPerGame',\n                                                        'OppAssistedFGPct': 'AOppAssistedFGPct'})\ndf_tourney_results = df_tourney_results.drop(\"TeamID\", axis=1)\n\ndf_tourney_results = df_tourney_results.merge(df_teams, how='left', left_on=['Season', 'BTeamID'], right_on=['Season', 'TeamID'])\ndf_tourney_results = df_tourney_results.rename(columns={'Wins': 'BWins',\n                                                        'Losses': 'BLosses',\n                                                        'PointDifferential': 'BPointDifferential',\n                                                        'WinningPct': 'BWinningPct',\n                                                        'TeamName': 'BTeamName',\n                                                        'FGM': 'BFGM',\n                                                        'FGA': 'BFGA',\n                                                        'FGM3': 'BFGM3',\n                                                        'FGA3': 'BFGA3',\n                                                        'FTM': 'BFTM',\n                                                        'FTA': 'BFTA',\n                                                        'OR': 'BOR',\n                                                        'DR': 'BDR',\n                                                        'AST': 'BAST',\n                                                        'TO': 'BTO',\n                                                        'STL': 'BSTL',\n                                                        'BLK': 'BBLK',\n                                                        'OppFGM': 'BOppFGM',\n                                                        'OppFGA': 'BOppFGA',\n                                                        'OppFGM3': 'BOppFGM3',\n                                                        'OppFGA3': 'BOppFGA3',\n                                                        'OppFTM': 'BOppFTM',\n                                                        'OppFTA': 'BOppFTA',\n                                                        'OppOR': 'BOppOR',\n                                                        'OppDR': 'BOppDR',\n                                                        'OppAST': 'BOppAST',\n                                                        'OppTO': 'BOppTO',\n                                                        'OppSTL': 'BOppSTL',\n                                                        'OppBLK': 'BOppBLK',\n                                                        'FGPct': 'BFGPct',\n                                                        'FGAPerGame': 'BFGAPerGame',\n                                                        'FG3Pct': 'BFG3Pct',\n                                                        'FTPct': 'BFTPct',\n                                                        'PointDifferentialPerGame': 'BPointDifferentialPerGame',\n                                                        'ORPerGame': 'BORPerGame',\n                                                        'DRPerGame': 'BDRPerGame',\n                                                        'ASTPerGame': 'BASTPerGame',\n                                                        'TOPerGame': 'BTOPerGame',\n                                                        'ASTtoTO': 'BASTtoTO',\n                                                        'AssistedFGPct': 'BAssistedFGPct',\n                                                        'STLPerGame': 'BSTLPerGame',\n                                                        'BLKPerGame': 'BBLKPerGame',\n                                                        'OppFGPct': 'BOppFGPct',\n                                                        'OppFG3Pct': 'BOppFG3Pct',\n                                                        'OppFTPct': 'BOppFTPct',\n                                                        'OppORPerGame': 'BOppORPerGame',\n                                                        'OppDRPerGame': 'BOppDRPerGame',\n                                                        'OppASTPerGame': 'BOppASTPerGame',\n                                                        'OppTOPerGame': 'BOppTOPerGame',\n                                                        'OppASTtoTO': 'BOppASTtoTO',\n                                                        'OppSTLPerGame': 'BOppSTLPerGame',\n                                                        'OppBLKPerGame': 'BOppBLKPerGame',\n                                                        'OppFGAPerGame': 'BOppFGAPerGame',\n                                                        'OppAssistedFGPct': 'BOppAssistedFGPct'})\n\ndf_tourney_results = df_tourney_results.drop(\"TeamID\", axis=1)\ndf_tourney_results['_targetScoreDiff'] = df_tourney_results['AScore'] - df_tourney_results['BScore']\ndf_tourney_results['_targetWinA'] = (df_tourney_results['_targetScoreDiff'] > 0).astype(int)\ndf_tourney_results['SeedDiff'] = df_tourney_results['ASeed'] - df_tourney_results['BSeed']\ndf_tourney_results['PointDiff'] = df_tourney_results['APointDifferentialPerGame'] - df_tourney_results['BPointDifferentialPerGame']\ndf_tourney_results['WinPctDiff'] = df_tourney_results['AWinningPct'] - df_tourney_results['BWinningPct']\n\n# df_teams only has data after 2003, so disregard tourney results before 2003\ndf_tourney_results = df_tourney_results[df_tourney_results[\"Season\"] >= 2003]\n\ndf_tourney_results.shape","ebae847d":"# duplicate the df_tourney_results rows\n# take original 2251 rows and duplicate with Team A and Team B inverted\n# that way the WIN target value will not be the same value 1 for all rows\n\nprint(\"The shape of `data_tourney_results` BEFORE is: \" + str(df_tourney_results.shape))\n\n_cp = df_tourney_results.copy(deep=True)\n_cp = _cp.rename(columns={'BTeamID': 'ATeamID',\n                          'BScore': 'AScore',\n                          'BWins': 'AWins',\n                          'BLosses': 'ALosses',\n                          'BPointDifferential': 'APointDifferential',\n                          'BWinningPct': 'AWinningPct',\n                          'BTeamName': 'ATeamName',\n                          'BFGM': 'AFGM',\n                          'BFGA': 'AFGA',\n                          'BFGM3': 'AFGM3',\n                          'BFGA3': 'AFGA3',\n                          'BFTM': 'AFTM',\n                          'BFTA': 'AFTA',\n                          'BOR': 'AOR',\n                          'BDR': 'ADR',\n                          'BAST': 'AAST',\n                          'BTO': 'ATO',\n                          'BSTL': 'ASTL',\n                          'BBLK': 'ABLK',\n                          'BOppFGM': 'AOppFGM',\n                          'BOppFGA': 'AOppFGA',\n                          'BOppFGM3': 'AOppFGM3',\n                          'BOppFGA3': 'AOppFGA3',\n                          'BOppFTM': 'AOppFTM',\n                          'BOppFTA': 'AOppFTA',\n                          'BOppOR': 'AOppOR',\n                          'BOppDR': 'AOppDR',\n                          'BOppAST': 'AOppAST',\n                          'BOppTO': 'AOppTO',\n                          'BOppSTL': 'AOppSTL',\n                          'BOppBLK': 'AOppBLK',\n                          'BFGPct': 'AFGPct',\n                          'BFGAPerGame': 'AFGAPerGame',\n                          'BFG3Pct': 'AFG3Pct',\n                          'BFTPct': 'AFTPct',\n                          'BPointDifferentialPerGame': 'APointDifferentialPerGame',\n                          'BORPerGame': 'AORPerGame',\n                          'BDRPerGame': 'ADRPerGame',\n                          'BASTPerGame': 'AASTPerGame',\n                          'BTOPerGame': 'ATOPerGame',\n                          'BASTtoTO': 'AASTtoTO',\n                          'BAssistedFGPct': 'AAssistedFGPct',\n                          'BSTLPerGame': 'ASTLPerGame',\n                          'BBLKPerGame': 'ABLKPerGame',\n                          'BOppFGPct': 'AOppFGPct',\n                          'BOppFG3Pct': 'AOppFG3Pct',\n                          'BOppFTPct': 'AOppFTPct',\n                          'BOppORPerGame': 'AOppORPerGame',\n                          'BOppDRPerGame': 'AOppDRPerGame',\n                          'BOppASTPerGame': 'AOppASTPerGame',\n                          'BOppTOPerGame': 'AOppTOPerGame',\n                          'BOppASTtoTO': 'AOppASTtoTO',\n                          'BOppSTLPerGame': 'AOppSTLPerGame',\n                          'BOppBLKPerGame': 'AOppBLKPerGame',\n                          'BOppFGAPerGame': 'AOppFGAPerGame',\n                          'BOppAssistedFGPct': 'AOppAssistedFGPct',\n\n                          'ATeamID': 'BTeamID',\n                          'AScore': 'BScore',\n                          'AWins': 'BWins',\n                          'ALosses': 'BLosses',\n                          'APointDifferential': 'BPointDifferential',\n                          'AWinningPct': 'BWinningPct',\n                          'ATeamName': 'BTeamName',\n                          'AFGM': 'BFGM',\n                          'AFGA': 'BFGA',\n                          'AFGM3': 'BFGM3',\n                          'AFGA3': 'BFGA3',\n                          'AFTM': 'BFTM',\n                          'AFTA': 'BFTA',\n                          'AOR': 'BOR',\n                          'ADR': 'BDR',\n                          'AAST': 'BAST',\n                          'ATO': 'BTO',\n                          'ASTL': 'BSTL',\n                          'ABLK': 'BBLK',\n                          'AOppFGM': 'BOppFGM',\n                          'AOppFGA': 'BOppFGA',\n                          'AOppFGM3': 'BOppFGM3',\n                          'AOppFGA3': 'BOppFGA3',\n                          'AOppFTM': 'BOppFTM',\n                          'AOppFTA': 'BOppFTA',\n                          'AOppOR': 'BOppOR',\n                          'AOppDR': 'BOppDR',\n                          'AOppAST': 'BOppAST',\n                          'AOppTO': 'BOppTO',\n                          'AOppSTL': 'BOppSTL',\n                          'AOppBLK': 'BOppBLK',\n                          'AFGPct': 'BFGPct',\n                          'AFGAPerGame': 'BFGAPerGame',\n                          'AFG3Pct': 'BFG3Pct',\n                          'AFTPct': 'BFTPct',\n                          'APointDifferentialPerGame': 'BPointDifferentialPerGame',\n                          'AORPerGame': 'BORPerGame',\n                          'ADRPerGame': 'BDRPerGame',\n                          'AASTPerGame': 'BASTPerGame',\n                          'ATOPerGame': 'BTOPerGame',\n                          'AASTtoTO': 'BASTtoTO',\n                          'AAssistedFGPct': 'BAssistedFGPct',\n                          'ASTLPerGame': 'BSTLPerGame',\n                          'ABLKPerGame': 'BBLKPerGame',\n                          'AOppFGPct': 'BOppFGPct',\n                          'AOppFG3Pct': 'BOppFG3Pct',\n                          'AOppFTPct': 'BOppFTPct',\n                          'AOppORPerGame': 'BOppORPerGame',\n                          'AOppDRPerGame': 'BOppDRPerGame',\n                          'AOppASTPerGame': 'BOppASTPerGame',\n                          'AOppTOPerGame': 'BOppTOPerGame',\n                          'AOppASTtoTO': 'BOppASTtoTO',\n                          'AOppSTLPerGame': 'BOppSTLPerGame',\n                          'AOppBLKPerGame': 'BOppBLKPerGame',\n                          'AOppFGAPerGame': 'BOppFGAPerGame',\n                          'AOppAssistedFGPct': 'BOppAssistedFGPct'})\n\ndf_tourney_results = pd.concat([df_tourney_results, _cp], 0, sort=False)\nprint(\"The shape of `data_tourney_results` AFTER is: \" + str(df_tourney_results.shape))","2496a89b":"df_tourney_results['_targetScoreDiff'] = df_tourney_results['AScore'] - df_tourney_results['BScore']\ndf_tourney_results['_targetWinA'] = (df_tourney_results['_targetScoreDiff'] > 0).astype(int)\ndf_tourney_results.shape","62d69265":"# *** NEW DF: test ***\n# (years 2015-2019)\n\ndf_test = pd.read_csv('\/kaggle\/input\/ncaam-march-mania-2021\/MSampleSubmissionStage1.csv')\ndf_test[['Season', 'ATeamID', 'BTeamID']] = df_test['ID'].str.split('_', expand=True) \ndf_test = df_test.drop(['Pred'], axis=1)\n\ndf_test['Season'] = df_test['Season'].astype(int)\ndf_test['ATeamID'] = df_test['ATeamID'].astype(int)\ndf_test['BTeamID'] = df_test['BTeamID'].astype(int)\n\ndf_test = df_test.merge(df_seeds, how='left', left_on=['Season', 'ATeamID'], right_on=['Season', 'TeamID']).rename(columns={'Seed': 'ASeed'}).drop(\"TeamID\", axis=1)\ndf_test = df_test.merge(df_seeds, how='left', left_on=['Season', 'BTeamID'], right_on=['Season', 'TeamID']).rename(columns={'Seed': 'BSeed'}).drop(\"TeamID\", axis=1)\n\ndf_test['ASeed'] = df_test['ASeed'].str.replace(r'[A-Za-z]', '', regex=True).astype('int')\ndf_test['BSeed'] = df_test['BSeed'].str.replace(r'[A-Za-z]', '', regex=True).astype('int')\ndf_test.head()","dd85f916":"# **SIMILAR CODE TO BELOW (here for df_test TEST data, above for df_tourney_results TRAIN data)**\n# merge df_teams and rename to Team A and Team B column names\ndf_test = df_test.merge(df_teams, how='left', left_on=['Season', 'ATeamID'], right_on=['Season', 'TeamID'])\ndf_test = df_test.rename(columns={'Wins': 'AWins',\n                                  'Losses': 'ALosses',\n                                  'PointDifferential': 'APointDifferential',\n                                  'WinningPct': 'AWinningPct',\n                                  'TeamName': 'ATeamName',\n                                  'FGM': 'AFGM',\n                                  'FGA': 'AFGA',\n                                  'FGM3': 'AFGM3',\n                                  'FGA3': 'AFGA3',\n                                  'FTM': 'AFTM',\n                                  'FTA': 'AFTA',\n                                  'OR': 'AOR',\n                                  'DR': 'ADR',\n                                  'AST': 'AAST',\n                                  'TO': 'ATO',\n                                  'STL': 'ASTL',\n                                  'BLK': 'ABLK',\n                                  'OppFGM': 'AOppFGM',\n                                  'OppFGA': 'AOppFGA',\n                                  'OppFGM3': 'AOppFGM3',\n                                  'OppFGA3': 'AOppFGA3',\n                                  'OppFTM': 'AOppFTM',\n                                  'OppFTA': 'AOppFTA',\n                                  'OppOR': 'AOppOR',\n                                  'OppDR': 'AOppDR',\n                                  'OppAST': 'AOppAST',\n                                  'OppTO': 'AOppTO',\n                                  'OppSTL': 'AOppSTL',\n                                  'OppBLK': 'AOppBLK',\n                                  'FGPct': 'AFGPct',\n                                  'FGAPerGame': 'AFGAPerGame',\n                                  'FG3Pct': 'AFG3Pct',\n                                  'FTPct': 'AFTPct',\n                                  'PointDifferentialPerGame': 'APointDifferentialPerGame',\n                                  'ORPerGame': 'AORPerGame',\n                                  'DRPerGame': 'ADRPerGame',\n                                  'ASTPerGame': 'AASTPerGame',\n                                  'TOPerGame': 'ATOPerGame',\n                                  'ASTtoTO': 'AASTtoTO',\n                                  'AssistedFGPct': 'AAssistedFGPct',\n                                  'STLPerGame': 'ASTLPerGame',\n                                  'BLKPerGame': 'ABLKPerGame',\n                                  'OppFGPct': 'AOppFGPct',\n                                  'OppFG3Pct': 'AOppFG3Pct',\n                                  'OppFTPct': 'AOppFTPct',\n                                  'OppORPerGame': 'AOppORPerGame',\n                                  'OppDRPerGame': 'AOppDRPerGame',\n                                  'OppASTPerGame': 'AOppASTPerGame',\n                                  'OppTOPerGame': 'AOppTOPerGame',\n                                  'OppASTtoTO': 'AOppASTtoTO',\n                                  'OppSTLPerGame': 'AOppSTLPerGame',\n                                  'OppBLKPerGame': 'AOppBLKPerGame',\n                                  'OppFGAPerGame': 'AOppFGAPerGame',\n                                  'OppAssistedFGPct': 'AOppAssistedFGPct'})\ndf_test = df_test.drop(\"TeamID\", axis=1)\n\ndf_test = df_test.merge(df_teams, how='left', left_on=['Season', 'BTeamID'], right_on=['Season', 'TeamID'])\ndf_test = df_test.rename(columns={'Wins': 'BWins',\n                                  'Losses': 'BLosses',\n                                  'PointDifferential': 'BPointDifferential',\n                                  'WinningPct': 'BWinningPct',\n                                  'TeamName': 'BTeamName',\n                                  'FGM': 'BFGM',\n                                  'FGA': 'BFGA',\n                                  'FGM3': 'BFGM3',\n                                  'FGA3': 'BFGA3',\n                                  'FTM': 'BFTM',\n                                  'FTA': 'BFTA',\n                                  'OR': 'BOR',\n                                  'DR': 'BDR',\n                                  'AST': 'BAST',\n                                  'TO': 'BTO',\n                                  'STL': 'BSTL',\n                                  'BLK': 'BBLK',\n                                  'OppFGM': 'BOppFGM',\n                                  'OppFGA': 'BOppFGA',\n                                  'OppFGM3': 'BOppFGM3',\n                                  'OppFGA3': 'BOppFGA3',\n                                  'OppFTM': 'BOppFTM',\n                                  'OppFTA': 'BOppFTA',\n                                  'OppOR': 'BOppOR',\n                                  'OppDR': 'BOppDR',\n                                  'OppAST': 'BOppAST',\n                                  'OppTO': 'BOppTO',\n                                  'OppSTL': 'BOppSTL',\n                                  'OppBLK': 'BOppBLK',\n                                  'FGPct': 'BFGPct',\n                                  'FGAPerGame': 'BFGAPerGame',\n                                  'FG3Pct': 'BFG3Pct',\n                                  'FTPct': 'BFTPct',\n                                  'PointDifferentialPerGame': 'BPointDifferentialPerGame',\n                                  'ORPerGame': 'BORPerGame',\n                                  'DRPerGame': 'BDRPerGame',\n                                  'ASTPerGame': 'BASTPerGame',\n                                  'TOPerGame': 'BTOPerGame',\n                                  'ASTtoTO': 'BASTtoTO',\n                                  'AssistedFGPct': 'BAssistedFGPct',\n                                  'STLPerGame': 'BSTLPerGame',\n                                  'BLKPerGame': 'BBLKPerGame',\n                                  'OppFGPct': 'BOppFGPct',\n                                  'OppFG3Pct': 'BOppFG3Pct',\n                                  'OppFTPct': 'BOppFTPct',\n                                  'OppORPerGame': 'BOppORPerGame',\n                                  'OppDRPerGame': 'BOppDRPerGame',\n                                  'OppASTPerGame': 'BOppASTPerGame',\n                                  'OppTOPerGame': 'BOppTOPerGame',\n                                  'OppASTtoTO': 'BOppASTtoTO',\n                                  'OppSTLPerGame': 'BOppSTLPerGame',\n                                  'OppBLKPerGame': 'BOppBLKPerGame',\n                                  'OppFGAPerGame': 'BOppFGAPerGame',\n                                  'OppAssistedFGPct': 'BOppAssistedFGPct'})\ndf_test = df_test.drop(\"TeamID\", axis=1)\ndf_test['_targetPred'] = 0\n# df_test.sample(20)[['Season','ATeamName', 'BTeamName','ASeed','BSeed','Pred']]\ndf_test.sample(10)","c9758123":"df_test['SeedDiff'] = df_test['ASeed'] - df_test['BSeed']\ndf_test['PointDiff'] = df_test['APointDifferentialPerGame'] - df_test['BPointDifferentialPerGame']\ndf_test['WinPctDiff'] = df_test['AWinningPct'] - df_test['BWinningPct']\ndf_test['_targetScoreDiff'] = 0\ndf_test['_targetWinA'] = 0","7257f6b6":"features = [\n#             'ASeed',\n#             'BSeed',\n#             'AWinningPct',\n#             'BWinningPct',\n#             'AFGPct',\n#             'BFGPct',\n#             'AFG3Pct',\n#             'BFG3Pct',\n            'APointDifferentialPerGame',\n            'BPointDifferentialPerGame',\n#             'AOppASTtoTO',\n#             'BOppASTtoTO',,\n            'WinPctDiff',\n#             'PointDiff',\n            'SeedDiff']","cda5003e":"df_tourney_results","cfcc3c87":"def rescale(features, df_train, df_val, df_test):\n    min_ = df_train[features].min()\n    max_ = df_train[features].max()\n    \n    df_train[features] = (df_train[features] - min_) \/ (max_ - min_)\n    df_val[features] = (df_val[features] - min_) \/ (max_ - min_)\n    df_test[features] = (df_test[features] - min_) \/ (max_ - min_)\n        \n    return df_train, df_val, df_test\n\ndef kfold_reg(df, df_test_, plot=False):\n    seasons = df['Season'].unique()\n    cvs = []\n    pred_tests = []\n    target = '_targetWinA'\n    \n    for season in range(2013,2020):\n        print(f'\\nValidating on season {season}')\n        \n        df_train = df[df['Season'] != season].reset_index(drop=True).copy()\n        df_val = df[df['Season'] == season].reset_index(drop=True).copy()\n        df_test = df_test_.copy()\n        \n        df_train, df_val, df_test = rescale(features, df_train, df_val, df_test)\n\n        lr = LogisticRegression()\n        gnb = GaussianNB()\n        svc = LinearSVC(C=10)\n        rfc = RandomForestClassifier()\n\n#         for model in [lr, gnb, svc, rfc]:\n        for model in [lr, gnb, svc]:\n            model.fit(df_train[features], df_train[target])\n\n            if hasattr(model, \"predict_proba\"):\n                pred = model.predict_proba(df_val[features])[:, 1]\n                pred_test = model.predict_proba(df_test[features])[:, 1]\n            else:  # use decision function\n                pred = model.decision_function(df_val[features])\n                pred = (pred - pred.min()) \/ (pred.max() - pred.min())\n                pred_test = model.decision_function(df_test[features])\n                pred_test = (pred_test - pred_test.min()) \/ (pred_test.max() - pred_test.min())\n            \n            pred_tests.append(pred_test)\n        \n            loss = log_loss(df_val['_targetWinA'].values, pred)\n            cvs.append(loss)\n            print(f'\\t -> Scored {loss:.3f}')\n        \n    print(f'\\n Local CV is {np.mean(cvs):.3f}')\n    \n    return pred_tests","7a96d3ac":"pred_tests = kfold_reg(df_tourney_results, df_test, plot=True)","418235bf":"pred_tests","e9592c50":"pred_test = np.mean(pred_tests, 0)\npred_test","8f6f5ce3":"sub = df_test[['ID']].copy()\nsub['Pred'] = pred_test\nsub.to_csv('submission.csv', index=False)\n_ = sns.histplot(pred_test)","49b40977":"sub.head()","ebf32a4d":"## Step 2 - feature engineering\n\nAdd rate statistic dimensions to `df_teams`. For example:\n* FG percentage and 3-point FG percentage\n* Per game rates like assists\/game, TO\/game, and blocks\/game\n* Other ratios like assist-to-TO and assisted FG rate","c3cd8135":"## Starter: feature engineering and modeling\n\nHat-tip to the following notebooks for inspiration:\n* https:\/\/www.kaggle.com\/theoviel\/ncaa-starter-the-simpler-the-better\n* https:\/\/www.kaggle.com\/svyatoslavsokolov\/2021-ncaam-first-step\n* https:\/\/www.kaggle.com\/byfone\/ncaa-m-2021-logistic-regression\n\n\n### Dataframes\n\nThe following dataframes are built up in steps 1-4 below, before step 5 (train model and predict).\n\n|#|dataframe|original CSV|years|description|\n|-|---------|------------|-----|-----------|\n|1|`df_detailed_results`|`MRegularSeasonDetailedResults.csv`|2003-2020|Team level box scores for all games between 2003 and 2020, used to populate #2 below|\n|2|`df_teams`|none (manually created from #1)|2003-2020|Team level statistics by year, so we can understand team relative strength when comparing two teams in a game|\n|3|`df_tourney_results`|`MNCAATourneyCompactResults.csv`|1985-2019|TRAIN data to train model and predict #5 `df_test`|\n|4|`df_seeds`|`MNCAATourneySeeds.csv`|1985-2019|Merged onto df_tourney_results and df_test, so we can understand teams' relative seeds when comparing two teams in a game|\n|5|`df_test`|`MSampleSubmissionStage1.csv`|2015-2019|Submission TEST data to predict (populate `Pred` column for upload)|\n","986ef834":"## Step 4 - prep TEST data (submission file with `Pred` column)\n\nLoad `MSampleSubmissionStage1.csv` file, split ID into `Season`\/`ATeamID`\/`BTeamID`, merge seed data, merge team performance data.","cced2fe9":"## Step 5 - Logistic Regression model to predict `Pred`\n\nAdapted from:\n* https:\/\/www.kaggle.com\/theoviel\/ncaa-starter-the-simpler-the-better\n* https:\/\/scikit-learn.org\/stable\/auto_examples\/calibration\/plot_compare_calibration.html\n\nRescale, then validate on each season in the last 10 seasons, and predict class (team A wins or loses).\n\n**WORK IN PROGRESS**: try Logistic Regression, Random Forest, Gaussian Naive Bayes, Linear SVC.","f504e71d":"## Step 3 - prep TRAINING data (previous tourney results)\n\nLoad `MNCAATourneyCompactResults.csv` and `MNCAATourneySeeds.csv`, merge together so tournament results include seeding, clean seed fields, rename W and L team columns to match other dataframes (teams A and B).","c63992b2":"## Step 1 - data load and transform\n\nLoad `MRegularSeasonDetailedResults.csv` into `df_detailed_results` to populate team-level performance metrics in `df_teams`. Read CSVs, tally game statistics into season statistics `win_loss` dictionary, transfrom `win_loss` dictionary to `df_teams` dataframe."}}