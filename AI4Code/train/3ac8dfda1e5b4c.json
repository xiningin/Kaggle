{"cell_type":{"d08f14db":"code","fd975207":"code","ef4676f8":"code","23e656fa":"code","7814c7f3":"code","9cfb1864":"code","5ade541a":"code","06e97fc6":"code","26bb8729":"code","49e4822e":"code","25b658ef":"code","3c86c667":"code","79c077c1":"code","34aa56c9":"code","6f06b7f3":"code","274d671c":"code","d3a7fe5f":"code","9ec26d5f":"code","9d4a8d48":"code","7c478bc7":"code","d7ae8554":"code","5bf26f78":"code","313667f5":"code","cb60d85c":"code","dda94452":"code","9c758960":"markdown","6a5fba5f":"markdown","e9d63206":"markdown","51cd5728":"markdown","45a1b52e":"markdown","9d6c3a8a":"markdown","da92786e":"markdown","4485e78d":"markdown"},"source":{"d08f14db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fd975207":"# read in the data\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\nsample_submission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","ef4676f8":"# put data together for easier comparisons\ntest['Survived'] = -1\ntest['Train'] = 0\ntrain['Train'] = 1\nfull_data = pd.concat([test, train])\n# full_data","23e656fa":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix\n\n# just numeric features\nnumeric = ['PassengerId', 'Age', 'SibSp', 'Fare', 'Parch']\n\n# drop NaNs\nnum_train = train[numeric + ['Survived']].dropna()\nX = num_train[numeric]\ny = num_train['Survived']\n\n# train-test split with test_size = 0.3\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)\n\n# fit model\nlr = LogisticRegression()\nlr.fit(X_train, y_train)\npreds = lr.predict(X_test)\n\n# compare predictions\nprint(confusion_matrix(y_test, preds))\nprint(classification_report(y_test, preds))","7814c7f3":"# Ticket Num Len\n\ndef get_last(val):\n    if len(val) == 0:\n        return ''\n    else:\n        return val[-1]\n\nTicket_num_lists = full_data['Ticket'].str.findall('[0-9]+')   # find all sets of numbers in a row\nTicket_num_lists = Ticket_num_lists.apply(get_last)            # only grab last set of numbers\nfull_data['Ticket_num_len'] = Ticket_num_lists.apply(len)      # get the length of that set -> feature","9cfb1864":"# Cabin Letter\n# cabin letter is always the first character of the cabin string\n\ndef get_first(val):\n    try:\n        return val[0]\n    except:\n        return np.nan\n\nfull_data['Cabin_letter'] = full_data['Cabin'].apply(get_first)","5ade541a":"import re\n\n# Cabin Number\n# cabin number is always the [1:] substring of the string\n\ndef drop_first(val):\n    try:\n        numbers = re.findall('[0-9]+', val)\n        numbers = [int(num) for num in numbers]\n        return sum(numbers)\/len(numbers)\n    except:\n        return np.nan\n\nfull_data['Cabin_num'] = full_data['Cabin'].apply(drop_first)","06e97fc6":"# drop unnecessary columns\nunnecessary = ['PassengerId', 'Name', 'Ticket', 'Cabin']\nfull_data.drop(unnecessary, inplace=True, axis=1)","26bb8729":"full_data.info()","49e4822e":"# filling missing Age values with the mean age for their Pclass\n\ndef fill_by_Pclass(row):\n    if pd.isnull(row['Age']):\n        Pclass = row['Pclass']\n        row['Age'] = full_data[full_data['Pclass']==Pclass]['Age'].mean()\n    return row\n    \nfull_data = full_data.apply(fill_by_Pclass, axis=1)","25b658ef":"# filling missing Fare values with median\nfull_data['Fare'].fillna(full_data['Fare'].median(), inplace=True)","3c86c667":"# filling missing Embarked values with the most common class\nfull_data['Embarked'].fillna('S', inplace=True)","79c077c1":"# filling missing Cabin_letter values with a placeholder (for encoding)\nfull_data['Cabin_letter'].fillna('Z', inplace=True)","34aa56c9":"# filling missing Cabin_num values with 0\nfull_data['Cabin_num'].fillna(0, inplace=True)","6f06b7f3":"# frequency encoding for Pclass\nencoding = full_data.groupby('Pclass').size()\nencoding = encoding\/len(full_data)\nfull_data['Pclass'] = full_data['Pclass'].map(encoding)","274d671c":"# just converting Sex column to 1s and 0s\nfull_data['Male'] = full_data['Sex'] == 'male'\nfull_data.drop('Sex', axis=1, inplace=True)","d3a7fe5f":"# frequency encoding for Embarked\nencoding = full_data.groupby('Embarked').size()\nencoding = encoding\/len(full_data)\nfull_data['Embarked'] = full_data['Embarked'].map(encoding)","9ec26d5f":"# frequency encoding for Cabin_letter\nencoding = full_data.groupby('Cabin_letter').size()\nencoding = encoding\/len(full_data)\nfull_data['Cabin_letter'] = full_data['Cabin_letter'].map(encoding)","9d4a8d48":"from sklearn.preprocessing import MinMaxScaler\nx = [\"Age\",\"SibSp\",\"Parch\",\"Fare\",\"Ticket_num_len\",\"Cabin_num\"]\nmin_max_scaler = MinMaxScaler(feature_range=(-1,1))\nx_scaled = min_max_scaler.fit_transform(full_data[x])\nfull_data[x] = x_scaled","7c478bc7":"full_data","d7ae8554":"from sklearn.model_selection import train_test_split\ntrain_data = full_data[full_data['Train']==1]\ntrain_data.drop(['Train'], axis=1, inplace=True)\nX = train_data.drop('Survived', axis=1)\ny = train_data['Survived']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)","5bf26f78":"y_train.value_counts()","313667f5":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.optimizers import SGD\nfrom sklearn.ensemble import StackingClassifier\n\nfrom sklearn.metrics import classification_report, confusion_matrix\n\nlr = LogisticRegression()\ndtc = DecisionTreeClassifier()\nrfc = RandomForestClassifier()\nsvm = SVC()\n\ntf.random.set_seed(101)\n\n# # create model\n# nn = Sequential()\n# opt = SGD(lr=0.001, momentum=0.5, decay=0.01)\n\n# nn.add(Dense(4, activation='relu'))\n# nn.add(Dense(2, activation='relu'))\n# nn.add(Dense(1)) # output node\n\n# nn.compile(optimizer='rmsprop',\n#              loss='binary_crossentropy',\n#              metrics=['accuracy'])\n\nxgb = XGBClassifier()\n\nestimators = [('lr', lr), ('dtc', dtc), ('rfc', rfc), ('svm', svm),]\nstack = StackingClassifier(estimators=estimators, final_estimator=xgb, \n                           cv=262, verbose=1)\n\nstack.fit(X_train, y_train,)\npreds = stack.predict(X_test)\n\n# compare predictions\nprint(confusion_matrix(y_test, preds))\nprint(classification_report(y_test, preds))","cb60d85c":"# generate submission\ntrain_data = full_data[full_data['Train']==1]\ntest_data = full_data[full_data['Train']==0].drop(['Survived', 'Train'], axis=1)\n\nX = train_data.drop(['Survived', 'Train'], axis=1)\ny = train_data[['Survived']]\n\n# fit model\nstack.fit(X, y)\npreds = stack.predict(test_data)\npreds","dda94452":"# generate submission\nsubmission2 = test\nsubmission2['Survived'] = preds\nsubmission2 = submission2[['PassengerId', 'Survived']]\nsubmission2.to_csv('submission1.csv', index=False)\nsubmission2","9c758960":"# Basic setup","6a5fba5f":"# Stacking Method of Ensembling","e9d63206":"# Categorical Encoding\n- Pclass\n- Sex\n- Embarked\n- Cabin_letter","51cd5728":"# Feature Gen from EDA Notebook\nhttps:\/\/www.kaggle.com\/nathankang\/titanic-eda","45a1b52e":"# Baseline Model \n- Logistic Regression\n- Just numeric values\n- droping NaNs","9d6c3a8a":"# Deal with NaNs (imputation)\nNeed to work with:\n- Age (about 250 values)\n- Fare (1 value)\n- Embarked (2 values)\n- Cabin_letter (about 1000 values)\n- Cabin_num (about 1000 values)","da92786e":"# Numeric Normalization\n- Age\n- SibSp\n- Parch\n- Fare\n- Ticket_num_len\n- Cabin_num","4485e78d":"# Stacking\nUsing the following models\n- Log Reg\n- Decision Trees\n- Random Forest\n- SVM\n- XGBoost\n- NNs"}}