{"cell_type":{"b08c6666":"code","d5fe8928":"code","c06afd25":"code","52b1a02a":"code","07518b12":"code","335774da":"code","fa4f40fb":"code","73316dfd":"code","1ca8e151":"code","353819c3":"code","d9a6dd86":"code","0f532697":"code","d9e71d5e":"code","4f22a5c5":"code","c63ebc73":"code","f6a55452":"code","fe1974c5":"code","7b189c89":"code","65628c1d":"code","b5e5a716":"code","27d16430":"code","f01c53d4":"code","15e102fb":"code","0eeb04c7":"markdown","3c6d6642":"markdown","cf0ccd46":"markdown","57c0af14":"markdown","ed257c9c":"markdown","eba92eb8":"markdown","cb32c7ef":"markdown","a10dc337":"markdown","d4a86398":"markdown"},"source":{"b08c6666":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d5fe8928":"df = pd.read_csv('\/kaggle\/input\/passenger-list-for-the-estonia-ferry-disaster\/estonia-passenger-list.csv')\ndf.head()","c06afd25":"df.info()","52b1a02a":"df.describe()","07518b12":"df.isna().sum()","335774da":"import warnings\nwarnings.filterwarnings('ignore')\nimport matplotlib.pyplot as plt\nimport seaborn as sns","fa4f40fb":"sns.barplot(x='Category',y='Survived',hue='Sex',data=df,palette='hls')\nplt.title('Age vs Survived')\nplt.show()","73316dfd":"sns.countplot(x='Survived',hue='Sex',data=df,palette='magma')\nplt.show()","1ca8e151":"from pandas_profiling import ProfileReport\nProfileReport(df)","353819c3":"color = plt.cm.plasma\nsns.heatmap(df.corr(), annot=True, cmap=color)\nplt.show()","d9a6dd86":"values = list(df.Sex.value_counts().values)\ngender = list(df.Sex.value_counts().index)\nprint(gender, '\\n', values)\nsns.countplot(x='Survived',hue='Sex',data=df)\nplt.show()","0f532697":"labels = ['Total Men', 'Total Women']\nvalues = df.Sex.value_counts().values\nprint(labels[0], ':', values[0])\nprint(labels[1], ':', values[1])\nlabels = ['Survived Men', 'Survived Women']\nSurvived_men = df['Sex'][(df['Sex']=='M') & (df['Survived']==1)].count()\nSurvived_women = df['Sex'][(df['Sex']=='F') & (df['Survived']==1)].count()\nprint(labels[0], ':', Survived_men)\nprint(labels[1], ':', Survived_women)","d9e71d5e":"fig = plt.figure()\nax = fig.add_axes([0,0,1,1])\ndata = [Survived_men, Survived_women]\nind = ['Male', 'Female']\nplt.bar(ind,data,color='g')\nplt.bar(ind,values,bottom=data,color='r')\nplt.title('Dead vs Survived')\nplt.show()","4f22a5c5":"df = df. drop(['PassengerId','Country','Firstname', 'Lastname'],axis=1)\ndf.head()","c63ebc73":"df['Sex']=df['Sex'].map({'M':1,'F':0})\ndf['Category']=df['Category'].map({'P':1,'C':0})\ndf.head()","f6a55452":"sns.heatmap(df.corr(), annot=True, cmap=color)","fe1974c5":"y=df.pop('Survived')\nX=df","7b189c89":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=50)","65628c1d":"from sklearn.preprocessing import StandardScaler\nmsc = StandardScaler()\nmsc.fit_transform(X_train,y_train)","b5e5a716":"X_train.head()","27d16430":"from sklearn.metrics import confusion_matrix, classification_report\ndef model(name):\n    name.fit(X_train, y_train)\n    preds = name.predict(X_test)\n    score = name.score(X_test,y_test)\n    cm = confusion_matrix(preds, y_test)\n    cf = classification_report(preds, y_test)\n    print(\"Results for \",name, \"\\n\")\n    print(\"Score for \",name, \":\", score, \"\\n\")\n    print(\"Confusion Matrix : \\n\",cm)\n    print(\"Classification Matrix : \\n\",cf)","f01c53d4":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier","15e102fb":"model(LogisticRegression())\nmodel(DecisionTreeClassifier())\nmodel(RandomForestClassifier())\nmodel(AdaBoostClassifier())\nmodel(XGBClassifier())","0eeb04c7":"If death is considered as negative and survived is considered as positive, the confusion matrix for our model looks like as below\n\n**[TN        FP]**\n\n**[FN        TP]**\n\n* True Negative : Passanger actually dead\n* False Positive : Predicted wrongly that passanger is alive\n* False Negative : Predicted wrongly that passanger is dead\n* True Positive : Passanger actually Survived","3c6d6642":"#### Most of the things are covered with one single line `ProfileReport()`... That's the beauty of pandas_profiling library","cf0ccd46":"#### Alright!! Our dataset is now clean and we are good to go-ahead with EDA","57c0af14":"## Model Building","ed257c9c":"So, no feature is explained by another feature...","eba92eb8":"I know i did a stupid EDA bui I was bored of it... Let's dive directly into model building","cb32c7ef":"### Basic EDA","a10dc337":"### Question: How many females and males onboard? Show the result using any plot","d4a86398":"Let's quickly drop the unnecessary columns"}}