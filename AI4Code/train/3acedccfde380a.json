{"cell_type":{"ac54c401":"code","de5cff07":"code","8ac3324e":"code","bc380d48":"code","5d62b703":"code","1aa77038":"code","c07e2f2a":"code","2c9a7818":"code","f447ea2a":"code","6ced7d5f":"code","fa34f26b":"code","a68cf7d8":"code","b9942739":"code","42645b77":"code","16788982":"code","a3e6c286":"code","9b2ff41e":"markdown","b9dcd323":"markdown","21f3c6f1":"markdown","14c2107f":"markdown","ad610c60":"markdown","42fd1b97":"markdown","464d2894":"markdown","7effb1ba":"markdown","4288eca3":"markdown"},"source":{"ac54c401":"import numpy as np \nimport pandas as pd \nimport os\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Activation, Dropout\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.utils import np_utils\nfrom keras.preprocessing import image\n\nimport matplotlib.pyplot as plt","de5cff07":"image_cat = image.load_img(\"..\/input\/cat-dog-dataset\/dogscats\/images\/cats\/cat.10000.jpg\")\nimage_dog = image.load_img(\"..\/input\/cat-dog-dataset\/dogscats\/images\/dogs\/dog.10002.jpg\")\n\ntarget_size = (32,32)\nplt.imshow(image_cat)\nplt.show()\n\nplt.imshow(image_dog)\nplt.show()","8ac3324e":"data_root = \"..\/input\/cat-dog-dataset\/dogscats\/images\"\nprint(os.listdir(data_root))","bc380d48":"cats = \"..\/input\/cat-dog-dataset\/dogscats\/images\/cats\" \ndogs = \"..\/input\/cat-dog-dataset\/dogscats\/images\/dogs\"\n\nX_train = []\ny_train = []\n\nsize = (32, 32)\ni = 0 # cats = 0, dogs = 1\n\nfor name_dir in [cats, dogs]:\n    for picture in next(os.walk(name_dir))[2]:\n        x = image.load_img(str(name_dir) + \"\/\" + picture, target_size=size)\n        x = image.img_to_array(x, data_format=\"channels_last\")\n        x = x.astype(\"float32\")\n        x \/= 255\n        X_train.append(x)\n        y_train.append(int(i))\n    i = i + 1\n\n\nX_train = np.array(X_train)\ny_train = np_utils.to_categorical(y_train, 2)\n\nprint(\"input_shape = \", X_train[0].shape)","5d62b703":"cats_val = \"..\/input\/cat-dog-dataset\/dogscats\/images\/cats\" \ndogs_val = \"..\/input\/cat-dog-dataset\/dogscats\/images\/dogs\"\n\nX_val = []\ny_val = []\ni = 0 # cats_valid = 0, dogs_valid = 1\n\nfor name_dir in [cats_val, dogs_val]:\n    for picture in next(os.walk(name_dir))[2]:\n        x = image.load_img(str(name_dir) + \"\/\" + picture, target_size=size)\n        x = image.img_to_array(x, data_format=\"channels_last\")\n        x = x.astype(\"float32\")\n        x \/= 255\n        X_val.append(x)\n        y_val.append(int(i))\n    i = i + 1\n\nX_val = np.array(X_val)\ny_val = np_utils.to_categorical(y_val, 2)","1aa77038":"print(\"len X_train = \", len(X_train), \" len y_train = \", len(y_train))\nprint(\"len X_val = \", len(X_val), \" len y_val = \", len(y_val))","c07e2f2a":"np.random.seed(0)","2c9a7818":"model = Sequential()\n\nmodel.add(Conv2D(32, (3,3), padding=\"same\", input_shape=(32, 32, 3), \n                 activation=\"relu\", data_format=\"channels_last\"))\nmodel.add(Conv2D(32, (3,3), activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (3,3), padding=\"same\", activation=\"relu\"))\nmodel.add(Conv2D(64, (3,3), activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation=\"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n          ","f447ea2a":"history = model.fit(X_train, y_train, batch_size=23, epochs=25, validation_data=(X_val, y_val) , shuffle=True, verbose=1)","6ced7d5f":"print(history.history.keys())\nhistory_model = pd.DataFrame({\"accuracy\": history.history['accuracy'], 'val_accuracy': history.history['val_accuracy']})","fa34f26b":"history_model.head()","a68cf7d8":"x = history_model.index\ny1 = history_model.accuracy\ny2 = history_model.val_accuracy\nfig, ax = plt.subplots()\n\nax.plot(x, y1, label = 'accuracy')\nax.plot(x, y2, label = 'val_accuracy')\n\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nax.legend()\nplt.show()","b9942739":"test = \"..\/input\/cat-dog-dataset\/dogscats\/samples\"\nX_test = []\ny_test = []\n\nfor picture in next(os.walk(test))[2]:\n    x = image.load_img(str(test) + \"\/\" + picture, target_size=size)\n    x = image.img_to_array(x, data_format=\"channels_last\")\n    x = x.astype(\"float32\")\n    x \/= 255\n    X_test.append(x)\n    if str(picture).find(\"cat\") != -1:\n        y_test.append(0)\n    else: \n        y_test.append(1)\n\nX_test = np.array(X_test)","42645b77":"preds = model.predict(X_test)\ny_pred = []\nfor pred in preds:\n    if pred[0] > pred[1]:\n        y_pred.append(0)\n    else: \n        y_pred.append(1)","16788982":"sum_true = 0\nfor i in range(len(y_pred)):\n    if y_pred[i] == y_test[i]:\n        sum_true += 1\n\nsum_true \/ len(y_pred) * 100","a3e6c286":"model.save(\"Cat_and_dog.h5\")","9b2ff41e":"## preparing data for training","b9dcd323":"## import the required libraries","21f3c6f1":"## history","14c2107f":"## test","ad610c60":"## fitting","42fd1b97":"## Model\n![sampl model](https:\/\/miro.medium.com\/max\/913\/0*RMiFvYXN3LEdIpSz.png)","464d2894":"## Save model","7effb1ba":"# Convolutional neural networks\n![cat and dog](https:\/\/cdn.pixabay.com\/photo\/2018\/10\/01\/09\/21\/pets-3715733_640.jpg)","4288eca3":"## seed for rapeatability of results"}}