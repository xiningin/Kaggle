{"cell_type":{"8dd53e5f":"code","e2496f38":"code","98cc7a4a":"code","48d6b1dc":"code","1aab305c":"code","f196a90e":"code","f87fa4a3":"code","f8d42a52":"code","0f06b37e":"code","a7c2eb07":"code","80f33ff7":"code","9ecfd758":"code","7361ef9d":"code","1e178e6c":"code","9a2cbe9c":"code","ceb05844":"code","65eb1157":"code","61f4ef04":"code","fc7de4a1":"code","586c8217":"code","9bda04b1":"code","ddbf9781":"code","73a9192b":"code","d47a6cbe":"code","bf8bf7c7":"code","f54e6904":"code","c86e63b0":"code","f1c4143e":"code","9584a2c1":"code","cc57bc2d":"code","bb2f7f46":"code","8c3a93be":"code","947bebbb":"code","acc87200":"code","dfe8273d":"code","f8ec0d48":"code","6998613a":"code","a75a07b3":"code","7cf55523":"code","0be99878":"code","2d3e4d27":"code","9355444b":"code","1bd5e34c":"code","44e6b47b":"code","1e1f7898":"code","ed6306c4":"code","7dbaf5f6":"code","176495b3":"code","d76a487b":"code","f295bd2f":"code","1f8e91ac":"code","a46ebf11":"code","bc81fdec":"code","a42562f7":"code","9e4f9759":"code","854e28df":"code","b04c06bd":"code","7696e7ef":"code","17f67293":"code","4f7eee78":"code","1e73a0d2":"code","f26dd959":"code","98af6b75":"code","400638c6":"code","007a8527":"code","7316a622":"code","15e29b27":"code","da2bba89":"code","6db1de56":"code","905dde26":"code","6f09b3e1":"code","edc37c2a":"code","459cba94":"code","0c399df2":"code","71e9f5f4":"code","2727a9c0":"code","866a21f9":"code","d8ef3018":"code","454cb6de":"code","34fcf14f":"code","fec71fb4":"code","193f5a67":"code","edc709a1":"code","1eec037c":"code","091c4e1e":"code","e8fb5f97":"code","c832719b":"code","7c90d013":"code","9f6456c4":"code","7a5ffc90":"markdown","86f2db46":"markdown","dc90e7dd":"markdown","17968377":"markdown","c78621a6":"markdown","bd8783b4":"markdown","b2683ea8":"markdown","b1c78581":"markdown","d9ca297d":"markdown","5f448420":"markdown","59a0548b":"markdown","24cc781b":"markdown","f5558158":"markdown","afb5c1eb":"markdown","49e162c0":"markdown","3d8a2d9a":"markdown","341b33bc":"markdown","45801dd8":"markdown","4afa1625":"markdown","33beb987":"markdown","3290fba2":"markdown","7ecdafb7":"markdown","fe1f3d7d":"markdown","b146af0a":"markdown","5ed26b0f":"markdown","9a9b2471":"markdown","4cc61394":"markdown","5ff09642":"markdown","e1345d6a":"markdown","923fa9f6":"markdown","9973d4df":"markdown"},"source":{"8dd53e5f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e2496f38":"train=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\n","98cc7a4a":"train.shape","48d6b1dc":"train.head","1aab305c":"train.describe().transpose()","f196a90e":"test.shape","f87fa4a3":"test.head","f8d42a52":"test.describe().transpose()","0f06b37e":"sns.scatterplot(x=\"Age\", y=\"Fare\", hue=\"Survived\", data=train)","a7c2eb07":"sns.displot(data=train, x=\"Age\", hue=\"Survived\")","80f33ff7":"sns.displot(data=train, x=\"Fare\", hue=\"Survived\")","9ecfd758":"sns.displot(data=train, x=\"Sex\", hue=\"Survived\")","7361ef9d":"sns.displot(data=train, x=\"Pclass\", hue=\"Survived\")","1e178e6c":"sns.scatterplot(x=\"Pclass\", y=\"Fare\", hue=\"Survived\", data=train)","9a2cbe9c":"sns.displot(data=train, x=\"SibSp\", hue=\"Survived\")","ceb05844":"sns.displot(data=train, x=\"Parch\", hue=\"Survived\")","65eb1157":"sns.displot(data=train, x=\"Embarked\", hue=\"Survived\")","61f4ef04":"train.corr()","fc7de4a1":"ax = sns.heatmap(\n    train.corr(), \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","586c8217":"train[\"family_member_num\"] = train[\"SibSp\"] + train[\"Parch\"] +1","9bda04b1":"train","ddbf9781":"sns.displot(data=train, x=\"family_member_num\", hue=\"Survived\")","73a9192b":"train.isna().sum()","d47a6cbe":"##Replace age nulls with mean in train dataset\ntrain['Age'].fillna(train['Age'].mean(), inplace=True)","bf8bf7c7":"train.isna().sum()","f54e6904":"train.dropna(subset=['Embarked'], inplace=True)","c86e63b0":"train.isna().sum()","f1c4143e":"train.describe()","9584a2c1":"train.head()","cc57bc2d":"train['Sex'] = train['Sex'].replace(['male','female'],[0,1])","bb2f7f46":"train['Embarked'] = train['Embarked'].replace(['S','C','Q'],[0,1,2])","8c3a93be":"train.head()","947bebbb":"test.isna().sum()","acc87200":"##Replace age nulls with mean in test dataset \ntest['Age'].fillna(test['Age'].mean(), inplace=True)","dfe8273d":"##Replace Fare nulls with mean in test dataset \ntest['Fare'].fillna(test['Fare'].mean(), inplace=True)","f8ec0d48":"test.isna().sum()","6998613a":"test.head()","a75a07b3":"test['Sex'] = test['Sex'].replace(['male','female'],[0,1])","7cf55523":"test['Embarked'] = test['Embarked'].replace(['S','C','Q'],[0,1,2])","0be99878":"test.head()","2d3e4d27":"from sklearn.preprocessing import StandardScaler","9355444b":"X_train_clean = train[['Age','Embarked','family_member_num','Fare','Pclass','Sex']]","1bd5e34c":"scaler = StandardScaler()","44e6b47b":"scaled_X_train = scaler.fit_transform(X_train_clean)","1e1f7898":"scaled_X_train","ed6306c4":"y_train=train['Survived']","7dbaf5f6":"test[\"family_member_num\"] = test[\"SibSp\"] + test[\"Parch\"] +1","176495b3":"test.head()","d76a487b":"X_test_clean = test[['Age','Embarked','family_member_num','Fare','Pclass','Sex']]","f295bd2f":"X_test_clean.head()","1f8e91ac":"scaled_X_test = scaler.fit_transform(X_test_clean)","a46ebf11":"scaled_X_test","bc81fdec":"from sklearn.neighbors import KNeighborsClassifier","a42562f7":"knn_model = KNeighborsClassifier(n_neighbors=5)","9e4f9759":"knn_model.fit(scaled_X_train,y_train)","854e28df":"y_pred_knn = knn_model.predict(scaled_X_test)","b04c06bd":"y_pred_knn","7696e7ef":"series1=pd.Series(y_pred_knn)","17f67293":"series1","4f7eee78":"y_pred_knn.sum()","1e73a0d2":"scaled_X_test","f26dd959":"X_test_clean","98af6b75":"test","400638c6":"import pandas as pd","007a8527":"knn_pred_output=pd.concat([test[\"PassengerId\"],series1],axis=1)","7316a622":"knn_pred_output.to_csv(\"knn_titanic_kimcheethelab.csv\")","15e29b27":"from sklearn.linear_model import LogisticRegression","da2bba89":"log_model = LogisticRegression()","6db1de56":"log_model.fit(scaled_X_train,y_train)","905dde26":"y_pred_logistic = log_model.predict(scaled_X_test)","6f09b3e1":"y_pred_logistic","edc37c2a":"y_pred_logistic.sum()","459cba94":"from sklearn.svm import SVC ","0c399df2":"model = SVC(kernel='linear', C=1000)\nmodel.fit(scaled_X_train, y_train)","71e9f5f4":"y_pred_svm=model.predict(scaled_X_test)","2727a9c0":"y_pred_svm","866a21f9":"y_pred_svm.sum()","d8ef3018":"from sklearn.tree import DecisionTreeClassifier","454cb6de":"treemodel = DecisionTreeClassifier()","34fcf14f":"treemodel.fit(scaled_X_train,y_train)","fec71fb4":"y_pred_tree = treemodel.predict(scaled_X_test)","193f5a67":"y_pred_tree","edc709a1":"y_pred_tree.sum()","1eec037c":"from sklearn.ensemble import RandomForestClassifier","091c4e1e":"# Use 10 random trees\nrandomforestmodel = RandomForestClassifier(n_estimators=10,max_features='auto',random_state=101)","e8fb5f97":"randomforestmodel.fit(scaled_X_train,y_train)","c832719b":"y_pred_randomforest = randomforestmodel.predict(scaled_X_test)","7c90d013":"y_pred_randomforest","9f6456c4":"y_pred_randomforest.sum()","7a5ffc90":"It appears that Age, Pclass, Fare, Sex, Embarked and family_member_num would be good features for prediction. There are 177 blanks in Age and 2 blanks in Embarked. A strategy can be filling the Age with average and removing the 2 rows of blank data in Embarked.","86f2db46":"**3.5 Fitting Random Forest**","dc90e7dd":"**2. Feature Engineering**","17968377":"Most passengers are male. Yet female appears to have a higher chance of survival.","c78621a6":"86 observations are missing Age and 1 observation is missing Fare in the test dataset.","bd8783b4":"163 out of 418 passengers in the test dataset is predicted to survive.","b2683ea8":"**1. Data Exploratory **","b1c78581":"By looking into the data, \"PassengerId\", \"Name\", \"Ticket\" and \"Cabin\" do not look like useful features.","d9ca297d":"**3.4 Fitting Decision Tree**","5f448420":"**3.1 Fitting KNN Model**","59a0548b":"137 out of 418 passengers in the test dataset is predicted to survive.","24cc781b":"Of the 418 rows of test data, will need to fill 86 blank data for \"Age\" and 1 data for \"Fare\". A staregy can be using average to fill the missing values in these 2 columns.","f5558158":"Will need to transform \"Sex\" and \"Embarked\" into numerics before training.","afb5c1eb":"It appears that passengers embarked from Cherbourg have higher chances of survival than passengers embarked from Southampton and Queenstown","49e162c0":"Looks like there are 7 quantitative variables in the train dataset. A noteable observation is that 177 passengers do not have age recorded so we may have to impute these values (using average age is a possible but possibly poor form of imputation) if we decide age is a feature needed for the model.","3d8a2d9a":"418 rows and 11 columns for test dataset. \"Survived\" column should be missing in the test dataset.","341b33bc":"**3.3 Fitting SVM**","45801dd8":"**3.2 Fitting Logistic Regression**","4afa1625":"\"Pclass\" appears to have a relatively strong negative relationship with \"Survived\", while \"Fare\" appears to have a relatively strong positive relationship with \"Survived\". Also, Parch and SibSp actually have a strong positive relationship. \"Parch\" means number of parents\/children aboard while \"SibSp\" means number of siblings\/spouses aboard, we can possibly combine these two fields and add 1 to denote the number of family members.","33beb987":"It appears that passengers with 2 to 4 family members have a higher chance of survival.","3290fba2":"Verified that Pclass 1 pays higher fare. Pclass 2 and Pclass 3 pay similiar fare.","7ecdafb7":"152 out of 418 passengers in the test dataset is predicted to survive.","fe1f3d7d":"**Scaling the Data **","b146af0a":"150 out of 418 passengers in the test dataset is predicted to survive.","5ed26b0f":"A large portion of passenages age between 18 to 34. Kids (age < 8) appear to have a higher chance of survival","9a9b2471":"Most passengers pay less than 50 dollars fare. Those who pay more than 50 dollars appear to have a higher chance of survival","4cc61394":"Most passengers are in class 3. Class 1 passengers appear to have a higher chance of survival.","5ff09642":"**3. Prediction**","e1345d6a":"891 rows and 12 columns","923fa9f6":"Will need to transform \"Sex\" and \"Embarked\" into numerics.","9973d4df":"152 out of 418 passengers in the test dataset is predicted to survive."}}