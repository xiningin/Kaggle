{"cell_type":{"5251c392":"code","dc339e74":"code","aced2ca9":"code","4c1dd5dd":"code","5b2f052b":"code","5f6b03bc":"code","dcd6afe8":"code","3c000a7f":"code","a934d14a":"code","56f3bab1":"code","47df5030":"code","4f686264":"code","86cfa6eb":"code","9f05cd28":"code","7f011a43":"code","73af071f":"code","81dac00d":"code","e376f0e1":"code","c9ea9e2c":"code","894059ce":"code","3558a386":"code","f24cbe69":"markdown","301b9270":"markdown","bec574bf":"markdown","22e17294":"markdown","a9d7a2c2":"markdown","e5f8636e":"markdown"},"source":{"5251c392":"! pip install pyspark","dc339e74":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as F\n \nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","aced2ca9":"spark = SparkSession.builder.getOrCreate()\nspark","4c1dd5dd":"sdf_train = spark.read.csv(\"..\/input\/train.csv\",inferSchema=True,header=True)\nprint(sdf_train.printSchema())\npdf = sdf_train.limit(5).toPandas()\npdf.T","5b2f052b":"sdf_test = spark.read.csv(\"..\/input\/test.csv\",inferSchema=True,header=True)\n# sdf_train.printSchema()\npdf = sdf_test.limit(5).toPandas()\npdf.T","5f6b03bc":"sdf_typecast = sdf_train.withColumn('Ticket', sdf_train['Ticket'].cast(\"double\"))\nsdf_typecast = sdf_typecast.fillna(0)\n# pdf = sdf_typecast.limit(5).toPandas()\n# pdf.T","dcd6afe8":"numeric_cols = ['PassengerId','Survived', 'Pclass','Age', 'SibSp','Parch','Ticket','Fare'] \nnumeric_features = ['Pclass','Age', 'SibSp','Parch','Fare'] \n# string_features = [ 'Cabin', 'Embarked', 'Sex','Ticket']\n# 'Name',\nsdf_train_subset = sdf_typecast #.select(numeric_cols)    \n","3c000a7f":"_stages = []","a934d14a":"from pyspark.ml.feature import VectorAssembler\nassemblerInput = numeric_features # [f + '_vect' for f in string_features] + \nprint(assemblerInput)\nvectAssembler = VectorAssembler(inputCols  = assemblerInput, outputCol = \"vect_features\") #.fit(sdf_train_subset)  \n_stages += [vectAssembler]\n# handleInvalid = \"keep\" or \"skip\"","56f3bab1":"from pyspark.ml.classification import DecisionTreeClassifier\n\n# dt = DecisionTreeClassifier(labelCol = 'Survived', featuresCol = 'vect_features') # ,maxDepth=1\n# _stages += [dt]","47df5030":"from pyspark.ml.classification import RandomForestClassifier\n\nrf = RandomForestClassifier(labelCol = 'Survived', featuresCol = 'vect_features', numTrees = 100, maxDepth = 4)\n_stages += [rf]","4f686264":"_stages","86cfa6eb":"from pyspark.ml import Pipeline\n\npipeline = Pipeline(stages = _stages)","9f05cd28":"model = pipeline.fit(sdf_train_subset)","7f011a43":"numeric_cols_test = ['PassengerId', 'Pclass','Age', 'SibSp','Parch','Ticket','Fare'] \n\nsdf_test_subset = sdf_test.withColumn('Ticket', sdf_test['Ticket'].cast(\"double\")). \\\n                        fillna(0). \\\n                        select(numeric_cols_test)","73af071f":"sdf_predict = model.transform(sdf_test_subset)","81dac00d":"pdf = sdf_predict.limit(10).toPandas()\npdf.T","e376f0e1":"from pyspark.ml.evaluation import BinaryClassificationEvaluator\nevaluator = BinaryClassificationEvaluator(labelCol=\"prediction\")\nprint(\"Test Area Under ROC: \" + str(evaluator.evaluate(sdf_predict, {evaluator.metricName: \"areaUnderROC\"})))\n","c9ea9e2c":"sdf_submission = sdf_predict.select('PassengerId','prediction').withColumn('Survived',sdf_predict['prediction'].cast('integer')).select('PassengerId','Survived')\nsdf_submission.show()","894059ce":"sdf_submission.coalesce(1).write.csv(\"submission\",mode=\"overwrite\",header=True)","3558a386":"print(os.listdir('submission'))","f24cbe69":"# 3. Feature engineering","301b9270":"# 4. ML model","bec574bf":"# 2. Data cleanup","22e17294":"# 1. Load data","a9d7a2c2":"Further reading:   \nhttps:\/\/spark.apache.org\/docs\/latest\/mllib-decision-tree.html  \nhttps:\/\/spark.apache.org\/docs\/latest\/ml-classification-regression.html#decision-trees  \nhttps:\/\/spark.apache.org\/docs\/latest\/ml-classification-regression.html#decision-tree-classifier  ","e5f8636e":"<a href=\"submission\/part-00000-b53a2b2f-1d11-459b-923b-a7231ed9a7d6-c000.csv\"> Download File <\/a>"}}