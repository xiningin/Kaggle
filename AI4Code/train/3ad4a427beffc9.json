{"cell_type":{"a7ac41da":"code","2d364dae":"code","86a30663":"code","fc98a34c":"code","b16dd0e6":"code","d541f198":"code","85ac32bd":"code","e15143da":"code","d4c63ef6":"code","b36a81fd":"code","e25321fd":"code","887c4bad":"code","d67f01c7":"markdown","511f4525":"markdown","35a6f929":"markdown","d621bcd1":"markdown","28d416a6":"markdown","64ed7202":"markdown","abf43f8c":"markdown"},"source":{"a7ac41da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d364dae":"!git clone https:\/\/github.com\/Megvii-BaseDetection\/YOLOX.git\n!pip install -U pip && pip install -r YOLOX\/requirements.txt\n!pip install -v -e YOLOX ","86a30663":"!git clone https:\/\/github.com\/NVIDIA\/apex\n!pip install -v --disable-pip-version-check --no-cache-dir --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" apex\/","fc98a34c":"pip install cython; pip install 'git+https:\/\/github.com\/cocodataset\/cocoapi.git#subdirectory=PythonAPI'","b16dd0e6":"!mkdir \/kaggle\/working\/annotations","d541f198":"\nimport json\nfrom copy import deepcopy\n# data_list = ['merged_train.json',]\ndata_list = ['\/kaggle\/input\/cowboyoutfits\/train.json']\n# data_list = ['new_valid.json']\n\ncat = {87:1, 1034:5, 131:2, 318:3, 588:4}\n\ndict_list = []\nfor idx, data in enumerate(data_list):\n    with open(data) as f:\n        dict_list.append(json.load(f))\n\nnew_data = {}\nprint(dict_list[0].keys())\n\n\nnew_data['info'] = dict_list[0]['info']\n# new_data['licenses'] = dict_list[0]['licenses']\nnew_categories = []\nfor category in dict_list[0]['categories']:\n    new_category = deepcopy(category)\n    new_category['id'] = cat[category['id']]\n    new_categories.append(new_category)\nnew_data['categories'] = new_categories\nnew_data['annotations'] = []\nnew_data['images'] = []\nprint(new_data)\n\nanno_count = 1\nanno_id_dict = {}\ncount = 1\nanno_dict = {}\nfor data in dict_list:\n    annotations = []\n    for annotation in data['annotations']:\n        new_annotation = deepcopy(annotation)\n        new_annotation['category_id'] = cat[annotation['category_id']]\n        if annotation['image_id'] not in anno_dict:\n            new_annotation['image_id'] = anno_count\n            anno_dict[annotation['image_id']] = anno_count\n            anno_count += 1\n            anno_id_dict[anno_count] = 1\n        else:\n            new_annotation['image_id'] = anno_dict[annotation['image_id']]\n            anno_id_dict[anno_dict[annotation['image_id']]] += 1\n        new_annotation['id'] = count\n        count +=1\n        annotations.append(new_annotation)\n    \n    new_data['annotations'] = annotations\n\n    images = []\n    \n    for image in data['images']:\n        new_image = deepcopy(image)\n        new_image['id'] = anno_dict[image['id']]\n        images.append(new_image)\n    new_data['images'] = images\n\n    print(f'annotation size: {len(new_data[\"annotations\"])}')\n    print(f'image size: {len(new_data[\"images\"])}')\n\nwith open('\/kaggle\/working\/annotations\/new_train.json', 'w') as res:\n    json.dump(new_data, res)","85ac32bd":"!cp ..\/input\/d\/herunyu\/cowboyoutfits\/yolox_mm.py YOLOX\/\n!cp ..\/input\/d\/herunyu\/cowboyoutfits\/predict.py YOLOX\/","e15143da":"!head -n 50 YOLOX\/yolox_mm.py","d4c63ef6":"!cp -r \/kaggle\/input\/cowboyoutfits\/images \/kaggle\/working\/","b36a81fd":"# \u52a0\u8f7d\u6a21\u578b\n!wget https:\/\/github.com\/Megvii-BaseDetection\/storage\/releases\/download\/0.0.1\/yolox_m.pth \/kaggle\/working\/","e25321fd":"!python YOLOX\/tools\/train.py -f YOLOX\/yolox_mm.py -d 1 -b 8 -o --fp16 -c \/kaggle\/working\/yolox_m.pth","887c4bad":"!tail -n 120 YOLOX\/predict.py","d67f01c7":"## \u6700\u540eTest\u7ed3\u679c","511f4525":"\u5728kernel\u91cc\u8dd1\u4e8610\u4e2aepoch\u610f\u601d\u610f\u601d\u3002\u63d0\u4ea4\u7684\u4ee3\u7801\u4e5f\u5199\u5728predict.py\u91cc\u4e86\uff0c\u8fd9\u91cc\u770b\u4e0b\u6700\u540e\u76f8\u5173\u7684\u4ee3\u7801","35a6f929":"## \u6a21\u578b\u9009\u62e9\n\u5177\u4f53\u8bad\u7ec3\u53ef\u4ee5\u53c2\u8003YOLOX\u5b98\u65b9\u7684\u6587\u6863\uff0c\u6211\u8fd9\u91cc\u4f7f\u7528\u7684\u662fYOLOX_M\u7684\u6a21\u578b\uff0c\u4e5f\u5c31\u662f\u4e2d\u7b49\u7684\u6a21\u578b\uff0c\u81ea\u5b9a\u4e49\u4e86exp\u6587\u4ef6\u6765\u5b9a\u4e49\u6a21\u578b\u4ee5\u53cadataloader\u9700\u8981\u52a0\u8f7d\u7684\u6570\u636e\u8def\u5f84\uff0c\u8fd8\u6709\u8bad\u7ec3\u7684epoch\u6570\u91cf\uff0c\u4ee5\u53ca\u81ea\u5b9a\u4e49\u7684dataloader","d621bcd1":"## \u5b89\u88c5\n\u6309\u7167YOLOX\u5b98\u7f51\u9996\u5148\u5b89\u88c5YOLOX\uff0c\u7136\u540e\u5b89\u88c5apex\uff0c\u5982\u679c\u6ca1\u6709\u652f\u6301\u534a\u7cbe\u5ea6\u8bad\u7ec3\u7684\u663e\u5361\u53ef\u4ee5\u4e0d\u9700\u8981\u5b89\u88c5\uff0c\u6700\u540e\u5b89\u88c5pycocotools","28d416a6":"![image.png](attachment:2ccf1aa2-78d1-4428-8314-1fbc239cfc63.png)","64ed7202":"## \u8bad\u7ec3\n\u7531\u4e8ekernel\u91cc\u8bad\u7ec3\u65f6\u95f4\u8f83\u4e45\uff0c\u6240\u4ee5\u8fd9\u91cc\u8dd1\u4e8610\u4e2aepoch\uff0c\u4f1a\u770b\u5230\u4e00\u5f00\u59cb\u5c31\u663e\u793aNo mosaic aug now.\u5b9e\u9645\u4e0a\u5e94\u8be5\u662f\u6700\u540e15\u4e2aepoch\u5f00\u59cb\u624d\u4e0d\u4f1a\u52a0\u5165augmentation\uff0c\u6211\u8bad\u7ec3\u4e8640\u4e2aepoch\u5de6\u53f3\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u6309\u7167\u8bbe\u7f6e\uff0c\u524d5\u4e2aepoch\u4e3awarming up\uff0c\u540e15\u4e2a\u4e3ano aug\uff0c\u4e2d\u95f420\u4e3a\u52a0\u5165aug\u7684\u8bad\u7ec3\u3002\u4e0b\u9762\u7684\u4ee3\u7801 -d \u8868\u793a\u7528\u4e00\u5f20\u663e\u5361\uff0c -o \u4e3a\u9884\u8bfb\u6570\u636e\u5230\u7f13\u5b58\u4e2d  --fp16\u662f\u7528\u4e86apex\u7684\u534a\u7cbe\u5ea6\u8bad\u7ec3","abf43f8c":"## \u6570\u636e\u9884\u5904\u7406\n\n\u8bb2\u4e00\u4e0b\u601d\u8def\uff0c\u672c\u6765\u6211\u662f\u60f3\u76f4\u63a5\u628a\u6570\u636e\u6254\u8fdb\u53bb\u8fdb\u884c\u8bad\u7ec3\u7684\uff0c\u56e0\u4e3aYOLOX\u76f4\u63a5\u652f\u6301coco\u683c\u5f0f\u7684\u6570\u636e\u96c6\uff0c\u4f46\u662f\u5374\u4f1a\u9047\u5230\u4e00\u4e2a\u5f88\u5947\u602a\u7684bug\uff0c\u8fd9\u4e2a\u95ee\u9898\u6211\u8fd8\u53bbYOLOX\u91cc\u9762\u95ee\u4e86\uff0c\u60f3\u770b\u62a5\u9519\u4fe1\u606f\u7684\u53ef\u4ee5[\u70b9\u51fb\u8fd9\u91cc](https:\/\/github.com\/Megvii-BaseDetection\/YOLOX\/issues\/388)\n\n\u62a5\u7684\u9519\u5982\u4e0b\uff1a\n```\nTypeError: can't convert np.ndarray of type numpy.ulonglong. The only supported types are: float64, float32, float16, complex64, complex128, int64, int32, int16, int8, uint8, and bool.\n```\n\u8bf4\u7684\u662f\u65e0\u6cd5\u8f6c\u6362ulong\u7684\u6570\u636e\uff0c\u67e5\u4e86\u5f88\u4e45\uff0c\u53d1\u73b0\u662f\u7531\u4e8eimage_id\u8fc7\u5927\u5bfc\u81f4\u7684\uff0c\u7b80\u5355\u7684\u76f4\u63a5cast\u4e3afloat\u4f1a\u9020\u6210\u7cbe\u5ea6\u635f\u5931\uff0c\u76f4\u63a5\u5bfc\u81f4\u53e6\u4e00\u4e2a\u95ee\u9898\uff0c\u5728\u5bf9\u5e94annotation\u91cc\u9762\u7684id\u548cimage id\u7684\u65f6\u5019\u4f1a\u62a5assertion error. \u6240\u4ee5\u6700\u7ec8\u7684\u529e\u6cd5\u662f\u76f4\u63a5\u66ff\u6362\u6389image_id\uff0c\u5e76\u4e14category_id\u4e5f\u5efa\u7acb\u65b0\u7684\u6620\u5c04\u5173\u7cfb\uff0c\u53d8\u4e3a1-5\uff0c\u4ee3\u7801\u5982\u4e0b"}}