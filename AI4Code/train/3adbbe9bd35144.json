{"cell_type":{"ead8b528":"code","41f9d2fe":"code","d52666ec":"code","de608863":"code","c663117a":"code","401e7517":"code","c5541c20":"code","372f271e":"code","2ce3983a":"code","889c5afb":"code","c8ca7e33":"code","e020db39":"code","68b6a9ce":"code","2f8d3d09":"code","69cff256":"code","d6e82f7f":"code","ba0c8265":"code","f5422623":"code","43964123":"code","8f168e7c":"code","b88d6696":"code","bc5d1d92":"markdown","0c883e36":"markdown","78ddcbcc":"markdown","4c5d5496":"markdown","8a7c9a05":"markdown","f36f0479":"markdown","9f5ad83a":"markdown","88629f46":"markdown","1cffc69c":"markdown","682ba7d4":"markdown","100593ed":"markdown","24dad1f8":"markdown"},"source":{"ead8b528":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder\n\nimport os\n%matplotlib inline\npd.set_option('max_columns', None)\n","41f9d2fe":"try:\n   df = pd.read_csv('..\/input\/airbnb-boston\/boston_listings.csv')\nexcept CParserError:\n    print(\"Something wrong the file\")\n\ndf.head(2)","d52666ec":"df.info()","de608863":"#drop columns where more than 70% column is null\ndf = df.drop(columns = df.columns[df.isna().mean() > 0.70])\n#add location data not useful or all are none\ndrop_cols =  ['country_code', 'country', 'state','experiences_offered']\ndf = df.drop(columns = drop_cols)\ndf.head(1)","c663117a":"#fixing price\ndf['price'] = df['price'].map(lambda p: int(p[1:-3].replace(\",\", \"\")))\n#If Fee type is nan that is then it is supposed that there are no charge for the service\ndf['cleaning_fee'] = df['cleaning_fee'].fillna('$0.00').map(lambda p: int(p[1:-3].replace(\",\", \"\")))\ndf['security_deposit'] = df['security_deposit'].fillna('$0.00').map(lambda p: int(p[1:-3].replace(\",\", \"\")))\ndf['extra_people'] = df['extra_people'].fillna('$0.00').map(lambda p: int(p[1:-3].replace(\",\", \"\")))","401e7517":"#separating amenities\ndef amenities_separtor(x):\n    arr = x.split(',')\n    result = [s.replace('\"', '').replace(\"{\",\"\").replace('}', '') for s in arr]\n    return result\ndf['amenities'] = df['amenities'].apply(amenities_separtor)","c5541c20":"pd.Series(np.concatenate(df['amenities'])).value_counts().plot(kind='bar')","372f271e":"#All type of amenities\nall_amenities = np.unique(np.concatenate(df['amenities']))[1:]\nall_amenities","2ce3983a":"#creating a list of features for amenities\namenity_list = np.array([df['amenities'].map(lambda amns: a in amns) for a in all_amenities])","889c5afb":"#add columns to df\ndf = pd.concat([df,pd.DataFrame(amenity_list.T, columns=all_amenities)], axis =1)\ndf = df.drop(columns=['amenities'])","c8ca7e33":"#fixing which are saved as strings of the form \"t\" or \"f\".\nfor tf_feature in ['host_is_superhost', 'host_identity_verified', 'host_has_profile_pic',\n                   'is_location_exact', 'requires_license', 'instant_bookable',\n                   'require_guest_profile_picture', 'require_guest_phone_verification']:\n    df[tf_feature] = df[tf_feature].map(lambda s: False if s == \"f\" else True)","e020db39":"#create dummy variables\ncategorical_features = ['neighbourhood_cleansed', 'property_type', 'room_type', 'bed_type','cancellation_policy']\nfor feature in categorical_features:\n    df = pd.concat([df, pd.get_dummies(df[feature])], axis=1)\ndf = df.drop(columns =categorical_features)","68b6a9ce":"#removing columns with text data for now\n# many could have been useful such as transit, notes, interaction, \ncolumns_withtext = ['summary','description','space','neighborhood_overview','notes','transit','interaction',  \n                    'house_rules','host_name','host_about','host_location','host_neighbourhood','street','neighbourhood','market',\n                   'smart_location','calendar_updated','calendar_last_scraped','first_review', 'last_review','access',\n                    'name', 'host_verifications', 'city', 'zipcode']\ncolumns_withurl = ['xl_picture_url','host_url','thumbnail_url','medium_url','host_picture_url','host_thumbnail_url',\n                  'picture_url','listing_url']\ncolumns_nouse = ['id', 'host_id','scrape_id','host_listings_count','last_scraped']\ndf = df.drop(columns = (columns_withtext + columns_withurl+ columns_nouse))","2f8d3d09":"#converting string data to date time \ndf['host_since'] = df['host_since'].apply(lambda x: pd.to_datetime(x))\n#converting to ordinal form\nimport datetime as dt\ndf['host_since'] = df['host_since'].map(dt.datetime.toordinal)","69cff256":"#handling host_response_time, converting to numeric \ndef response_time_cat(x):\n    if x == 'within an hour' or x == 'within a few hours':\n        return 1\n    elif x == 'within a day':\n        return 0.5\n    return 0\n\ndf['host_response_time'] = df['host_response_time'].apply(response_time_cat)","d6e82f7f":"# replacing nan values with 0.0% and converting to float\ndf['host_response_rate'] = df['host_response_rate'].fillna('0%').map(lambda x: float(x.replace('%',''))\/100)\ndf['host_acceptance_rate'] = df['host_acceptance_rate'].fillna('0%').map(lambda x: float(x.replace('%',''))\/100)","ba0c8265":"#columns with NaN values\nfor col in df.columns[df.isnull().mean() > 0]:\n    print(col + ' = {:.2f} %'.format(df[col].isnull().mean()*100))","f5422623":"#filling all the columns with median of respective column\nfor col in df.columns[df.isnull().any()]:\n    df[col] = df[col].fillna(df[col].median())","43964123":"df.head(5)","8f168e7c":"df.info()","b88d6696":"df.to_csv('boston_listings_updated.csv')","bc5d1d92":"Host behaviour can be an indicator of price. \n\nHence, converting response time into categorical.\nConverting response rate and acceptence rate into percentages.","0c883e36":"## A look at the data","78ddcbcc":"A final look at the data. We store our results into CSV for further use","4c5d5496":"Bar chart representing most common to rare amenities ","8a7c9a05":"Now, there are many columns to be dropped.\n\ncolumns_withtext: These are the columns with text data. Text data can be useful but due to time constrain will add it for future work.\n\ncolumns_withurl and columns_nouse: There feautres donnot impact the price.","f36f0479":"Fixing the columns with money involved. Converting from string into integer.","9f5ad83a":"'host_since' feature can be proportional to trust level of the host.\n\nConverting from string to date format. \nConverting to Ordinal format for to support for regression","88629f46":"## Data Preprocessing","1cffc69c":"A number of these features are boolean features, except that they are saved as strings of the form \"t\" or \"f\"","682ba7d4":"Converting categorical features into dummy variables","100593ed":"Amenities column can be an important feature in predicting price. \n\nWe'll encode the presence or absence of the various amenities our AirBnB homes offer into features. ","24dad1f8":"Finally, we need to handle remaining missing values.\n\nWe will use medians of respective columns to fill in the nans."}}