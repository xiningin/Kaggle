{"cell_type":{"419c1a3a":"code","52f95a1f":"code","7e16828b":"code","b56e0fcf":"code","64df1cfa":"code","b123eed8":"code","e5335103":"code","5f6f6664":"code","8b0cc324":"code","3ff05de4":"code","a0f19821":"code","a5bf897b":"code","abae0107":"code","20741624":"code","3e7d9c86":"code","a8f52732":"code","0eb97fd4":"code","629afb89":"code","4eba8d0b":"code","6d2b2229":"code","3f0a6268":"code","e9d64296":"code","44c4d0b1":"code","fc5a1662":"code","62469635":"code","6968b4f5":"code","bde51837":"code","4bef676a":"code","60946d03":"code","c8a7bbe6":"code","1665cd9c":"code","09915082":"code","1abdc83b":"code","29513cf1":"code","40ff7dc9":"code","38c21909":"code","a36cc8a2":"code","a2a7c0c6":"code","116b28ea":"code","e099c4f6":"code","041d5e9c":"code","3710838e":"code","12e312a7":"code","95490e93":"code","86af2e8a":"code","107c6b25":"code","e76a99b3":"code","cc351b5a":"code","f88a4cb6":"code","b9a0b9cd":"code","736b08ab":"code","b02350c7":"code","8c40ec14":"code","aee79831":"code","e8604c6a":"code","1b288606":"code","c96c5bdd":"code","16718184":"code","656d9b7e":"code","d36a6633":"code","d48c16e8":"code","c35bf3d2":"code","b9de8210":"code","c88fb147":"code","baffb876":"code","2ddd3c66":"code","887c6c30":"code","1092a1df":"code","f746d8f1":"code","9c8be7a2":"code","1b41f0b6":"code","add69bd0":"code","0dc07016":"code","1fc7e63e":"code","ce0ff226":"code","0b30a49a":"code","ddc60d3f":"code","f3242d89":"code","3cb80b80":"code","501719e9":"code","817ce474":"code","3bee6544":"code","d168b746":"code","91b69bcb":"code","b634c7f6":"code","bfc16338":"code","b449e0dc":"code","d1c6a82f":"code","4885138b":"code","315c571c":"code","c890d0bb":"code","feecd99e":"code","e923f1e8":"code","2763aa93":"code","5600031a":"code","e62f93fa":"code","a58cf5d7":"code","e1f94d2d":"code","a5a014e3":"code","3be95e7d":"code","2e14d54d":"code","2f36b47d":"code","a8f0e44d":"code","9e8aa2cf":"code","3a0767e0":"code","1f6b2c1b":"markdown","eae87f00":"markdown","a9dfc1bf":"markdown","78b04215":"markdown","d55e684d":"markdown","9d677ddf":"markdown","ce142ceb":"markdown","78dd20bf":"markdown","017b0414":"markdown","616e444a":"markdown","21a6e1b6":"markdown","891d052a":"markdown","9e5470dd":"markdown","cc86e265":"markdown","98324c73":"markdown"},"source":{"419c1a3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.datasets import load_linnerud\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.linear_model import Ridge\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom xgboost import XGBClassifier\nimport sklearn.metrics as metrics\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport sys\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","52f95a1f":"sample = pd.read_csv('\/kaggle\/input\/amazonhiring\/sample submission.csv')","7e16828b":"sample.head()","b56e0fcf":"train_data = pd.read_csv('\/kaggle\/input\/amazonhiring\/Train.csv')","64df1cfa":"train_data.head()","b123eed8":"train_data['LanguageOfCommunication'].unique()","e5335103":"train_data['GraduatingInstitute'].unique()","5f6f6664":"train_data['BiasInfluentialFactor'].unique()","8b0cc324":"map = {'YearsOfExperince': 0 ,'Gender' : 1, 'DegreeBranch': 2,\n       'CurrentCompanyType' : 3, 'MartialStatus': 4, 'HighestDegree': 5, 'EmpScore' : 6,\n       'Ethinicity' : 7, 'LatestDegreeCGPA' :8}","3ff05de4":"train_data = train_data.replace({'BiasInfluentialFactor' : map})","a0f19821":"train_data['BiasInfluentialFactor']","a5bf897b":"train_data.corr()","abae0107":"train_data.isnull().sum()","20741624":"data = train_data.copy()","3e7d9c86":"data.head()","a8f52732":"data.shape","0eb97fd4":"data = data.dropna()","629afb89":"data.isna().sum()","4eba8d0b":"data.shape","6d2b2229":"plt.figure(figsize=(15,10))\nsns.heatmap(train_data.corr(),annot=True,cmap=\"YlGnBu\")","3f0a6268":"plt.figure(figsize=(15,10))\nsns.heatmap(data.corr(),annot=True,cmap=\"YlGnBu\")","e9d64296":"data.isnull().sum()","44c4d0b1":"train_test = train_data[~train_data.index.isin(data.index)]","fc5a1662":"train_test.isnull().sum()","62469635":"train_test.shape","6968b4f5":"data.dtypes","bde51837":"cat_cols = ['LanguageOfCommunication', 'Gender', 'JobProfileIDApplyingFor', \n         'HighestDegree', 'DegreeBranch', 'GraduatingInstitute', 'MartialStatus', 'CurrentDesignation', 'CurrentCompanyType', 'DepartmentInCompany']\nenc = LabelEncoder()\n\nfor col in cat_cols:\n    data[col] = data[col].astype(str)\n    data[col] = enc.fit_transform(data[col])","4bef676a":"# data['FitmentPercent'] = data['FitmentPercent'].astype(int)","60946d03":"data = data.drop('EmpName', axis=1)","c8a7bbe6":"data.dtypes","1665cd9c":"data.head()","09915082":"X=data.drop(['BiasInfluentialFactor'], axis=1)\ny=data['BiasInfluentialFactor']","1abdc83b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","29513cf1":"clf = RandomForestClassifier(max_depth=2, random_state=0)\nclf.fit(X_train,y_train)","40ff7dc9":"print(\" Train Accuracy\", clf.score(X_train,y_train))\nprint(\" Test Accuracy\", clf.score(X_test,y_test))","38c21909":"nb = GaussianNB()\nnb.fit(X_train,y_train)","a36cc8a2":"print(\" Train Accuracy\", nb.score(X_train,y_train))\nprint(\" Test Accuracy\", nb.score(X_test,y_test))","a2a7c0c6":"error_rate = []\n\nfor i in range(1,50):\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train, y_train)\n    pred = knn.predict(X_test)\n    error_rate.append(np.mean(pred != y_test))\n\nplt.figure(figsize=(15,10))\nplt.plot(range(1,50),error_rate, marker='o', markersize=9)","116b28ea":"knn = KNeighborsClassifier(n_neighbors=7)\nknn.fit(X_train,y_train)","e099c4f6":"print(\" Train Accuracy\", knn.score(X_train,y_train))\nprint(\" Test Accuracy\", knn.score(X_test,y_test))","041d5e9c":"dtree = DecisionTreeClassifier(max_depth=10, random_state=101, max_features=None, min_samples_leaf=15)\ndtree.fit(X_train,y_train)","3710838e":"print(\" Train Accuracy\", dtree.score(X_train,y_train))\nprint(\" Test Accuracy\", dtree.score(X_test,y_test))","12e312a7":"abc = AdaBoostClassifier(n_estimators=50,\n                         learning_rate=1)\n# Train Adaboost Classifer\nmodel = abc.fit(X_train, y_train)","95490e93":"print(\" Train Accuracy\", abc.score(X_train,y_train))\nprint(\" Test Accuracy\", abc.score(X_test,y_test))","86af2e8a":"xgb = XGBClassifier()\nxgb.fit(X_train, y_train)","107c6b25":"print(\" Train Accuracy\", xgb.score(X_train,y_train))\nprint(\" Test Accuracy\", xgb.score(X_test,y_test))","e76a99b3":"xgb.predict(X_test)","cc351b5a":"X_test.shape","f88a4cb6":"X_test.dtypes","b9a0b9cd":"y_test.isna().sum()","736b08ab":"train_test.dtypes","b02350c7":"import sys\ncat_cols = ['LanguageOfCommunication', 'Gender', 'JobProfileIDApplyingFor', \n         'HighestDegree', 'DegreeBranch', 'GraduatingInstitute', 'MartialStatus', 'CurrentDesignation', 'CurrentCompanyType', 'DepartmentInCompany']\nenc = LabelEncoder()\n\nfor col in cat_cols:\n    train_test[col] = train_test[col].astype(str)\n    train_test[col] = enc.fit_transform(train_test[col])","8c40ec14":"train_test.dtypes","aee79831":"data.head()","e8604c6a":"train_test.head()","1b288606":"train_test = train_test.drop(['BiasInfluentialFactor','EmpName'], axis=1)","c96c5bdd":"train_test.head()","16718184":"# train_test['FitmentPercent'] = train_test['FitmentPercent'].astype(int)","656d9b7e":"train_test.dtypes","d36a6633":"y_pred1=clf.predict(X_test)\nprint(np.sqrt(metrics.mean_squared_error(y_test,y_pred1)))\ny_pred2=nb.predict(X_test)\nprint(np.sqrt(metrics.mean_squared_error(y_test,y_pred2)))\ny_pred3=knn.predict(X_test)\nprint(np.sqrt(metrics.mean_squared_error(y_test,y_pred3)))\ny_pred4=dtree.predict(X_test)\nprint(np.sqrt(metrics.mean_squared_error(y_test,y_pred4)))\ny_pred5=abc.predict(X_test)\nprint(np.sqrt(metrics.mean_squared_error(y_test,y_pred5)))\ny_pred6=xgb.predict(X_test)\nprint(np.sqrt(metrics.mean_squared_error(y_test,y_pred6)))","d48c16e8":"df_1 = train_test.iloc[:1000,:]\ndf_2 = train_test.iloc[1001:2000,:]\ndf_3 = train_test.iloc[2001:,:]","c35bf3d2":"train_test_pred1 = xgb.predict(df_1)\ntrain_test_pred2 = xgb.predict(df_2)\ntrain_test_pred3 = xgb.predict(df_3)","b9de8210":"train_test_pred3","c88fb147":"combine = np.concatenate((train_test_pred1,train_test_pred2,train_test_pred3), axis = None)","baffb876":"# train_test_pred = train_test_pred.astype(int)\ncombine","2ddd3c66":"train_test['BiasInfluentialFactor'] = pd.DataFrame(combine)","887c6c30":"train_test","1092a1df":"train_test.isna().sum()","f746d8f1":"frames = [data, train_test]","9c8be7a2":"final_data = pd.concat(frames)","1b41f0b6":"final_data.shape","add69bd0":"train_data.shape","0dc07016":"final_data.isnull().sum()","1fc7e63e":"final_df = final_data.copy()","ce0ff226":"final_df.shape","0b30a49a":"final_df.dtypes","ddc60d3f":"test = pd.read_csv('..\/input\/amazonhiring\/Test.csv')","f3242d89":"test.shape","3cb80b80":"y = final_df[['FitmentPercent','BiasInfluentialFactor']]","501719e9":"y.head()","817ce474":"final_df.isnull().sum()","3bee6544":"final_df['BiasInfluentialFactor'] = final_df['BiasInfluentialFactor'].fillna(0)","d168b746":"\n\nX = final_df.drop(['BiasInfluentialFactor','FitmentPercent'], axis = 1)\ny = final_df[['FitmentPercent','BiasInfluentialFactor']]\nclf = MultiOutputRegressor(Ridge(random_state=123)).fit(X, y)","91b69bcb":"test = pd.read_csv('..\/input\/amazonhiring\/Test.csv')","b634c7f6":"import sys\ncat_cols = ['LanguageOfCommunication', 'Gender', 'JobProfileIDApplyingFor', \n         'HighestDegree', 'DegreeBranch', 'GraduatingInstitute', 'MartialStatus', 'CurrentDesignation', 'CurrentCompanyType', 'DepartmentInCompany']\nenc = LabelEncoder()\n\nfor col in cat_cols:\n    test[col] = train_test[col].astype(str)\n    test[col] = enc.fit_transform(test[col])","bfc16338":"test = test.drop('EmpName', axis=1)","b449e0dc":"test.shape","d1c6a82f":"result = clf.predict(test)","4885138b":"result","315c571c":"result.shape","c890d0bb":"result = pd.DataFrame(result, columns = ['FitmentPercent','BiasInfluentialFactor'])","feecd99e":"result.head()","e923f1e8":"result.shape","2763aa93":"result['EmpID'] = test['EmpID']","5600031a":"result.head()","e62f93fa":"result['BiasInfluentialFactor'] = result['BiasInfluentialFactor'].astype(int)","a58cf5d7":"result.head()","e1f94d2d":"remap = {0:'YearsOfExperince', 1:'Gender' , 2:'DegreeBranch',\n       3:'CurrentCompanyType' , 4: 'MartialStatus', 5:'HighestDegree', 6:'EmpScore',\n       7:'Ethinicity' , 8:'LatestDegreeCGPA' }","a5a014e3":"result = result.replace({'BiasInfluentialFactor' :remap})","3be95e7d":"result.head()","2e14d54d":"result.isna().sum()","2f36b47d":"result.head()","a8f0e44d":"from IPython.display import HTML\nimport base64\ndef create_download_link(df, title = \"Download CSV file\", filename = \"data.csv\"):  \n    csv = df.to_csv()\n    b64 = base64.b64encode(csv.encode())\n    payload = b64.decode()\n    html = '<a download=\"{filename}\" href=\"data:text\/csv;base64,{payload}\" target=\"_blank\">{title}<\/a>'\n    html = html.format(payload=payload,title=title,filename=filename)\n    return HTML(html)","9e8aa2cf":"create_download_link(result)","3a0767e0":"pip install xgboost==1.3.3","1f6b2c1b":"**The correlation factor of Training Data**","eae87f00":"**Checking the sample data**","a9dfc1bf":"The object datatype fields are all transformed to int using a label encoder for model prediction","78b04215":"**Training Data Analysis**","d55e684d":"Based on the test accuracy and RMSE score the model is selected","9d677ddf":"**Model selection to predict BiasInfluentialFactor**","ce142ceb":"**Dropping the null values present in BiasInfluentialfactor as to predict those values as a seperate model**","78dd20bf":"**The null data which has been removed is combined to form a data frame to predict the value of BiasInfluentialFactor**","017b0414":"**Heatmap by dropping null values**","616e444a":"**Mapping the BiasInfluentialFactor (string to numberic data type) so as to not create confusion while fitting**","21a6e1b6":"**EmpName has no relevant data for comparision and hence dropped**","891d052a":"result.to_csv('.\/submission.csv')","9e5470dd":"**Heatmap without dropping null values**","cc86e265":"model to predict both Fitement and BiasInfluentialFactor","98324c73":"The points that can be inferred from the heatmap are as follows:\n* The correlation coefficient seems to increase slightly when null values are removed.\n* There is high relation between Current CTC and Expected CTC\n* BiasInfluentialFactor highly depends on Age, Latest degree CGPA, Years of Experience and Graduation Year\n* Fitment percent highly depends on Expected CTC, Current CTC and to some extent on EmpScore.\n* Another obvious link is Age is directly correlated to Years of Experience"}}