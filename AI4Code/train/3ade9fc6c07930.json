{"cell_type":{"8a6bc9c8":"code","8e914a9a":"code","e312cb13":"code","9a9f2dc5":"code","29058c27":"code","4a3ed9d3":"code","f3352af0":"code","f981cb5f":"code","fb17a613":"code","e47a12b6":"code","df338a03":"code","f0b89e60":"code","220cbf0f":"code","acc46bee":"code","a0b5056f":"code","0996bbc1":"code","9205e177":"code","37cc5fe5":"code","cabd8e48":"code","8a1167a8":"code","4177b0e1":"code","23d16569":"code","67856673":"code","b70e7b41":"code","9438a7e2":"code","08980b95":"code","1dd06c0c":"code","bbafaae1":"code","80b145fd":"code","6ddb5386":"code","c1931762":"code","fb18cb70":"code","ede5fbd7":"code","7512ef0d":"code","8cae9c70":"code","9f673cbe":"code","d763f2ca":"code","30f4d916":"code","59e4ecec":"code","c407a9d9":"code","d76a329c":"code","4e52cd58":"code","7ccdbdd3":"code","6fd29502":"code","72846092":"code","b5a30470":"code","4ab7b92b":"code","aa64d898":"code","14e4ee22":"code","509d9ff1":"code","441a5b94":"code","6d689285":"code","af9cd8d5":"code","d7efec73":"code","0b6c4386":"code","be3b3ccf":"code","158a73c9":"code","187ed8df":"code","c02a7c2c":"code","e758dd7d":"code","bb2c6b30":"code","4fcca25c":"code","f317755a":"code","95b8a4c5":"code","b9f0e73b":"code","92800552":"code","2d0a4562":"code","5332c691":"code","b2570205":"code","60e550e6":"code","a4abe5be":"code","99eb2ee1":"code","04321c0c":"code","8179734d":"code","63992e51":"code","1ff75f9f":"code","e26d0ea5":"code","5b34f253":"code","e9364e0d":"code","c8f812e2":"code","9148517b":"code","973cf82a":"code","59aa1c47":"code","8d737e4c":"code","7c072e45":"code","9773b0c2":"code","079815ac":"code","4f4d5a52":"code","77a1e00f":"code","4d9fbd4d":"code","9d7d8368":"code","075d2fa8":"code","22661cf8":"code","449c4402":"code","d1266f5e":"code","541041df":"code","6464b514":"code","5af10bcb":"code","f8da41f6":"code","0d873505":"code","39b896d9":"code","5ae5fbf9":"code","cb0b7dc9":"code","c493386f":"code","018e56bf":"code","e031fab5":"code","038002cf":"code","792ab600":"code","4940a734":"code","37f254ab":"code","4c7a8a86":"code","b6795f14":"code","bd5b3d05":"code","a305a4ea":"code","f427b68f":"code","80209da1":"code","6ce4b193":"code","a913da85":"code","5946fdb5":"code","cdcd357c":"code","4aca9b73":"code","999f45d3":"code","fab11ca4":"code","c92656cd":"code","c03220b7":"code","b061e35d":"code","703f2925":"code","eb7e8ee0":"code","ffe01c41":"code","16f45917":"code","ba28c6b3":"code","40a8829d":"code","1f7aab8c":"code","096bdc03":"code","315cd612":"code","da5c22a1":"code","4c977aa6":"code","98fb0c92":"code","23311728":"code","ac93686e":"code","9168fce7":"code","12be89ef":"code","5a0a42c9":"code","338105e3":"code","05c6a1d9":"code","ce36027f":"code","ae6a2872":"code","f89cd9c8":"code","a1bdf7e6":"code","7605f47e":"code","2b91aa8a":"code","cb3f651c":"code","0e790761":"code","9a223102":"code","8e3d9f0b":"code","1de3f03b":"code","30de493a":"code","c44c85e7":"code","b9a75242":"code","2de16db2":"code","6984689e":"code","6a07d3a7":"code","b7a63f04":"code","34e57124":"code","56d81753":"code","d1175c4e":"code","9f7460d1":"code","0f6c5a9a":"code","17150df6":"code","94352f72":"code","a5a1a8bf":"code","01e21128":"code","45a0ca52":"code","560714ed":"code","bc991240":"code","3f678f92":"code","ecc8a969":"code","18d35c96":"code","1c52d7ad":"code","b2f7a72d":"code","8ea0f439":"code","2d6fecda":"code","e01dc019":"code","2acf920f":"code","761b046a":"code","c5c2451b":"code","e8a4c019":"code","8e10c3b7":"code","9caad5ef":"code","6c03d6c0":"code","687b47fa":"code","cee4bd93":"code","c2f5511e":"code","a05bdda1":"code","ebbede2e":"code","96510005":"code","b88b507c":"code","2a13d671":"code","2ac65ee9":"code","c371dc90":"code","05c88390":"code","f61570b5":"code","2dadf05a":"code","e67b15f2":"code","b1fcc14b":"code","64539be3":"code","8112b587":"code","ce86f1c3":"code","008c04b6":"code","a067abd2":"code","ac1feda4":"code","ca5dafbc":"code","20c2bb0d":"code","85cbd299":"code","a625b9cc":"code","6bcd23f2":"code","a6042e41":"code","592d0015":"code","3d06b00e":"code","3ae6ca95":"code","3248bf0c":"code","38ee0894":"markdown","04684d40":"markdown","d764ead6":"markdown","ad260092":"markdown","ba10b336":"markdown"},"source":{"8a6bc9c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8e914a9a":"from numpy import percentile\nimport pandas_profiling\nimport missingno as msno\nimport matplotlib.pyplot as plt\nfrom matplotlib.text import Text\nfrom matplotlib.lines import Line2D\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib.patches import Rectangle, Polygon\nimport plotly.express as px\nimport plotly.io as pio\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.colors import n_colors\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import init_notebook_mode, iplot\nimport seaborn as sns\nimport warnings\nfrom scipy.stats import norm\nimport math\nimport time\nimport networkx as nx\nimport cufflinks as cf\nfrom IPython.display import Markdown\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nfrom PIL import Image\nfrom collections import Counter\n\nwarnings.filterwarnings('ignore')\nplt.style.use('fivethirtyeight')","e312cb13":"df = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\ndf.head()","9a9f2dc5":"df.info()","29058c27":"df.describe()","4a3ed9d3":"df.describe(include=\"all\")","f3352af0":"print('Rows     :',df.shape[0])\nprint('Columns  :',df.shape[1])\nprint('\\nFeatures :\\n     :',df.columns.tolist())\nprint('\\nMissing values    :',df.isnull().values.sum())\nprint('\\nUnique values :  \\n',df.nunique())","f981cb5f":"msno.matrix(df)\nplt.title(\"Missing Quantities Distribution\", fontsize=40)\nplt.show()","fb17a613":"profile = pandas_profiling.ProfileReport(df)\nprofile","e47a12b6":"n = msno.bar(df,color='purple')","df338a03":"df['country'].value_counts()","f0b89e60":"df.isnull().sum()","220cbf0f":"df['country'].replace(np.nan,\"NA\",inplace=True)\ndf['country'].value_counts()","acc46bee":"df['date_added'].value_counts()","a0b5056f":"netflix_date = df[['date_added']].replace(np.nan,'Not Added')\nnetflix_date[\"release_month\"] = netflix_date['date_added'].apply(lambda x: x.lstrip().split(\" \")[0])\nnetflix_date.head()","0996bbc1":"netflix_date[\"release_month\"].value_counts()","9205e177":"netflix_date['release_month'].replace('Not', 0,inplace=True)\nnetflix_date[\"release_month\"].value_counts()","37cc5fe5":"netflix_date.drop(\"date_added\",axis=1,inplace=True)\nnetflix_date.head()","cabd8e48":"netflix = pd.concat([df,netflix_date],axis=1)\nnetflix.head()","8a1167a8":"netflix['date_added'] = pd.to_datetime(netflix['date_added'])\nnetflix['year_added'] = netflix['date_added'].dt.year\nnetflix['month_added'] = netflix['date_added'].dt.month\n\nnetflix['season_count'] = netflix.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" in x['duration'] else \"\", axis = 1)\nnetflix['duration'] = netflix.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" not in x['duration'] else \"\", axis = 1)\n\nnetflix.head()","4177b0e1":"netflix[\"rating\"].value_counts()","23d16569":"netflix.isnull().sum()","67856673":"netflix[\"rating\"].replace(np.nan,\"TV-MA\",inplace=True)\nnetflix.isnull().sum()","b70e7b41":"netflix['type'].value_counts()","9438a7e2":"netflix.head()","08980b95":"sns.set()\nsns.countplot(x=\"type\",data=netflix)\nplt.title(\"Number of Movies vs Number of TV Shows\", fontsize=40)\nplt.show()","1dd06c0c":"categ = netflix['type'].value_counts().to_frame().reset_index().rename(columns={'index':'type', 'type':'count'})\nfig = go.Figure([go.Pie(labels=categ['type'], values=categ['count'], pull=[0.05, 0], marker=dict(colors=[\"#6ad49b\", \"#a678de\"]))])\nfig = fig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=15, insidetextorientation='radial')\nfig = fig.update_layout(title='Types of Content on Netflix', title_x=0.5)\nfig.show()","bbafaae1":"labels = netflix['type'].value_counts().index\nvalues = netflix['type'].value_counts().values\ntitle = 'Content Type'\ntrace = go.Pie(labels = labels,\n               values = values,\n               title = title,\n               hoverinfo = 'percent+value',\n               textinfo = 'percent',\n               textposition = 'inside',\n               hole = 0.7,\n               showlegend = True,\n               marker = dict(colors = ['cyan','gold'],\n                             line = dict(color=\"#000000\",\n                                        width = 2),\n                            )\n              )\nfig = go.Figure(data=[trace])\nfig.show()","80b145fd":"f,ax=plt.subplots(1,2,figsize=(18,8))\nnetflix['type'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Distribution of Content Type on Netflix', fontsize=30)\nax[0].set_ylabel('Count')\nsns.countplot('type',data=netflix,ax=ax[1],order=netflix['type'].value_counts().index)\nax[1].set_title('Count of Contents', fontsize=30)\nplt.show()","6ddb5386":"movies = netflix[netflix['type']=='Movie']\nshows = netflix[netflix['type']=='TV Show']\n\nmovies.head()","c1931762":"shows.head()","fb18cb70":"plt.figure(figsize=(12,9))\nplt.title(\"Rating Distribution of Content on Netflix\", fontsize=30)\nsns.countplot(x=\"rating\",data=netflix,order= netflix['rating'].value_counts().index[0:14])","ede5fbd7":"plt.figure(figsize=(12,9))\nplt.title(\"Rating Distribution of Movies on Netflix\", fontsize=30)\nsns.countplot(x=\"rating\",data=movies,order= movies['rating'].value_counts().index[0:14])","7512ef0d":"plt.figure(figsize=(12,9))\nplt.title(\"Rating Distribution of Shows on Netflix\", fontsize=30)\nsns.countplot(x=\"rating\",data=shows,order= shows['rating'].value_counts().index[0:14])","8cae9c70":"fig = px.pie(netflix,values = netflix['rating'].value_counts()[:10],names = netflix['rating'].value_counts()[:10].index,labels= netflix['rating'].value_counts()[:10].index)\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.update_layout(title='Rating Distribution of Content on Netflix', title_x=0.5)\nfig.show()","9f673cbe":"fig = px.pie(movies,values = movies['rating'].value_counts()[:10],names = movies['rating'].value_counts()[:10].index,labels= movies['rating'].value_counts()[:10].index)\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.update_layout(title='Rating Distribution of Movies on Netflix', title_x=0.5)\nfig.show()","d763f2ca":"fig = px.pie(shows,values = shows['rating'].value_counts()[:10],names = shows['rating'].value_counts()[:10].index,labels= shows['rating'].value_counts()[:10].index)\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.update_layout(title='Rating Distribution of Shows on Netflix', title_x=0.5)\nfig.show()","30f4d916":"r = netflix['rating'].value_counts()[:15].to_dict()\ndata = dict(\n    count = r.values(),\n    rating = r.keys())\nfig = px.funnel(data, x='count', y='rating')\nfig.update_layout(title='Count of Content Ratings on Netflix', title_x=0.5)\nfig.show()","59e4ecec":"r = movies['rating'].value_counts()[:15].to_dict()\ndata = dict(\n    count = r.values(),\n    rating = r.keys())\nfig = px.funnel(data, x='count', y='rating')\nfig.update_layout(title='Count of Movie Ratings on Netflix', title_x=0.5)\nfig.show()","c407a9d9":"r = shows['rating'].value_counts()[:15].to_dict()\ndata = dict(\n    count = r.values(),\n    rating = r.keys())\nfig = px.funnel(data, x='count', y='rating')\nfig.update_layout(title='Count of Show Ratings on Netflix', title_x=0.5)\nfig.show()","d76a329c":"movies_rating = movies['rating'].value_counts().reset_index()\nshows_rating = shows['rating'].value_counts().reset_index()\n\ntrace1 = go.Bar(x = movies_rating['index'],\n                y = movies_rating['rating'],\n                name = \"Movies\",\n                marker = dict(color = 'rgb(249, 6, 6)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\n\ntrace2 = go.Bar(x = shows_rating['index'],\n                y = shows_rating['rating'],\n                name = \"TV Shows\",\n                marker = dict(color = 'rgb(26, 118, 255)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\n\nlayout = go.Layout(template='plotly_dark', title='Rating by Content Type', xaxis=dict(title='Rating'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1, trace2], layout=layout)\nfig.show()","4e52cd58":"sns.set()\nplt.figure(figsize=(30,9))\nsns.countplot(x=\"release_year\",data= netflix,order = netflix['release_year'].value_counts().index[0:20])\nplt.title(\"Content Released over the years\", fontsize=40)\nplt.xticks(rotation=45)\nplt.show()","7ccdbdd3":"sns.set()\nplt.figure(figsize=(30,9))\nsns.countplot(x=\"release_year\",data= movies,order = movies['release_year'].value_counts().index[0:20])\nplt.title(\"Movies released over the years\", fontsize=40)\nplt.xticks(rotation=45)\nplt.show()","6fd29502":"sns.set()\nplt.figure(figsize=(30,9))\nsns.countplot(x=\"release_year\",data= shows,order = shows['release_year'].value_counts().index[0:20])\nplt.title(\"Shows released over the years\", fontsize=40)\nplt.xticks(rotation=45)\nplt.show()","72846092":"fig = px.pie(netflix,values = netflix['release_year'].value_counts()[:10],names = netflix['release_year'].value_counts()[:10].index,labels= netflix['release_year'].value_counts()[:10].index)\nfig.update_layout(title=\"Pie Chart for Distribution of Content based on Year Released\")\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.show()","b5a30470":"fig = px.pie(movies,values = movies['release_year'].value_counts()[:10],names = movies['release_year'].value_counts()[:10].index,labels= movies['release_year'].value_counts()[:10].index)\nfig.update_layout(title=\"Pie Chart for Distribution of Movies based on Year Released\")\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.show()","4ab7b92b":"fig = px.pie(shows,values = shows['release_year'].value_counts()[:10],names = shows['release_year'].value_counts()[:10].index,labels= shows['release_year'].value_counts()[:10].index)\nfig.update_layout(title=\"Pie Chart for Distribution of Shows based on Year Released\")\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.show()","aa64d898":"r = netflix['release_year'].value_counts()[:15].to_dict()\ndata = dict(\n    count = r.values(),\n    year = r.keys())\nfig = px.funnel(data, x='year', y='count')\nfig.update_layout(title=\"Funnel Plot for Distribution of Content based on Year Released\")\nfig.show()","14e4ee22":"r = movies['release_year'].value_counts()[:15].to_dict()\ndata = dict(\n    count = r.values(),\n    year = r.keys())\nfig = px.funnel(data, x='year', y='count')\nfig.update_layout(title=\"Funnel Plot for Distribution of Movies based on Year Released\")\nfig.show()","509d9ff1":"r = shows['release_year'].value_counts()[:15].to_dict()\ndata = dict(\n    count = r.values(),\n    year = r.keys())\nfig = px.funnel(data, x='year', y='count')\nfig.update_layout(title=\"Funnel Plot for Distribution of Shows based on Year Released\")\nfig.show()","441a5b94":"content = netflix['release_year'].value_counts().reset_index()\ntrace1 = go.Bar(x = content['index'],\n                y = content['release_year'],\n                marker = dict(color='rgb(255, 165, 0)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\nlayout = go.Layout(template='plotly_dark', title='Content Release over the years', xaxis=dict(title='Year'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1], layout=layout)\nfig.show()","6d689285":"content = movies['release_year'].value_counts().reset_index()\ntrace1 = go.Bar(x = content['index'],\n                y = content['release_year'],\n                marker = dict(color='rgb(255, 165, 0)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\nlayout = go.Layout(template='plotly_dark', title='Movies Release over the years', xaxis=dict(title='Year'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1], layout=layout)\nfig.show()","af9cd8d5":"content = shows['release_year'].value_counts().reset_index()\ntrace1 = go.Bar(x = content['index'],\n                y = content['release_year'],\n                marker = dict(color='rgb(255, 165, 0)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\nlayout = go.Layout(template='plotly_dark', title='Shows Release over the years', xaxis=dict(title='Year'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1], layout=layout)\nfig.show()","d7efec73":"movies_release = movies['release_year'].value_counts().reset_index()\nshows_release = shows['release_year'].value_counts().reset_index()\n\ntrace1 = go.Bar(x = movies_release['index'],\n                y = movies_release['release_year'],\n                name = \"Movies\",\n                marker = dict(color = 'rgb(249, 6, 6)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\n\ntrace2 = go.Bar(x = shows_release['index'],\n                y = shows_release['release_year'],\n                name = \"TV Shows\",\n                marker = dict(color = 'rgb(26, 118, 255)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\n\nlayout = go.Layout(template='plotly_dark', title='Release Years by Content Type', xaxis=dict(title='Years'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1, trace2], layout=layout)\nfig.show()","0b6c4386":"sns.set()\nplt.figure(figsize=(20,8))\nsns.countplot(x=\"release_month\",data= netflix,order = netflix['release_month'].value_counts().index)\nplt.title(\"Content Released over the Months\", fontsize=40)\nplt.xticks(rotation=45)\nplt.show()","be3b3ccf":"sns.set()\nplt.figure(figsize=(20,8))\nsns.countplot(x=\"release_month\",data= movies,order = movies['release_month'].value_counts().index)\nplt.title(\"Movies Released over the Months\", fontsize=40)\nplt.xticks(rotation=45)\nplt.show()","158a73c9":"sns.set()\nplt.figure(figsize=(20,8))\nsns.countplot(x=\"release_month\",data= shows,order = shows['release_month'].value_counts().index)\nplt.title(\"Shows Released over the Months\", fontsize=40)\nplt.xticks(rotation=45)\nplt.show()","187ed8df":"fig = px.pie(netflix,values = netflix['release_month'].value_counts(),names = netflix['release_month'].value_counts().index,labels= netflix['release_month'].value_counts().index)\nfig.update_layout(title=\"Pie Chart for Distribution of Content based on Month Released\")\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.show()","c02a7c2c":"fig = px.pie(movies,values = movies['release_month'].value_counts(),names = movies['release_month'].value_counts().index,labels= movies['release_month'].value_counts().index)\nfig.update_layout(title=\"Pie Chart for Distribution of Movies based on Month Released\")\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.show()","e758dd7d":"fig = px.pie(shows,values = shows['release_month'].value_counts(),names = shows['release_month'].value_counts().index,labels= shows['release_month'].value_counts().index)\nfig.update_layout(title=\"Pie Chart for Distribution of Shows based on Month Released\")\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.show()","bb2c6b30":"r = netflix['release_month'].value_counts().to_dict()\ndata = dict(\n    count = r.values(),\n    month = r.keys())\nfig = px.funnel(data, x='month', y='count')\nfig.update_layout(title=\"Funnel Plot for Distribution of Content based on Month Released\")\nfig.show()","4fcca25c":"r = movies['release_month'].value_counts().to_dict()\ndata = dict(\n    count = r.values(),\n    month = r.keys())\nfig = px.funnel(data, x='month', y='count')\nfig.update_layout(title=\"Funnel Plot for Distribution of Movies based on Month Released\")\nfig.show()","f317755a":"r = shows['release_month'].value_counts().to_dict()\ndata = dict(\n    count = r.values(),\n    month = r.keys())\nfig = px.funnel(data, x='month', y='count')\nfig.update_layout(title=\"Funnel Plot for Distribution of Shows based on Month Released\")\nfig.show()","95b8a4c5":"content = netflix['release_month'].value_counts().reset_index()\ntrace1 = go.Bar(x = content['index'],\n                y = content['release_month'],\n                marker = dict(color='rgb(255, 165, 0)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\nlayout = go.Layout(template='plotly_dark', title='Content Release over the months', xaxis=dict(title='Months'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1], layout=layout)\nfig.show()","b9f0e73b":"content = movies['release_month'].value_counts().reset_index()\ntrace1 = go.Bar(x = content['index'],\n                y = content['release_month'],\n                marker = dict(color='rgb(255, 165, 0)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\nlayout = go.Layout(template='plotly_dark', title='Movies Release over the months', xaxis=dict(title='Months'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1], layout=layout)\nfig.show()","92800552":"content = shows['release_month'].value_counts().reset_index()\ntrace1 = go.Bar(x = content['index'],\n                y = content['release_month'],\n                marker = dict(color='rgb(255, 165, 0)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\nlayout = go.Layout(template='plotly_dark', title='Shows Release over the months', xaxis=dict(title='Months'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1], layout=layout)\nfig.show()","2d0a4562":"movies_release = movies['release_month'].value_counts().reset_index()\nshows_release = shows['release_month'].value_counts().reset_index()\n\ntrace1 = go.Bar(x = movies_release['index'],\n                y = movies_release['release_month'],\n                name = \"Movies\",\n                marker = dict(color = 'rgb(249, 6, 6)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\n\ntrace2 = go.Bar(x = shows_release['index'],\n                y = shows_release['release_month'],\n                name = \"TV Shows\",\n                marker = dict(color = 'rgb(26, 118, 255)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\n\nlayout = go.Layout(template='plotly_dark', title='Release Months by Content Type', xaxis=dict(title='Months'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1, trace2], layout=layout)\nfig.show()","5332c691":"sns.set()\nplt.figure(figsize=(20,8))\nsns.countplot(x=\"year_added\",data= netflix,order = netflix['year_added'].value_counts().index[0:20])\nplt.title(\"Content Added over the years\", fontsize=40)\nplt.xticks(rotation=45)\nplt.show()","b2570205":"sns.set()\nplt.figure(figsize=(20,8))\nsns.countplot(x=\"year_added\",data= movies,order = movies['year_added'].value_counts().index[0:20])\nplt.title(\"Movies Added over the years\", fontsize=40)\nplt.xticks(rotation=45)\nplt.show()","60e550e6":"sns.set()\nplt.figure(figsize=(20,8))\nsns.countplot(x=\"year_added\",data= shows,order = shows['year_added'].value_counts().index[0:20])\nplt.title(\"Shows Added over the years\", fontsize=40)\nplt.xticks(rotation=45)\nplt.show()","a4abe5be":"fig = px.pie(netflix,values = netflix['year_added'].value_counts(),names = netflix['year_added'].value_counts().index,labels= netflix['year_added'].value_counts().index)\nfig.update_layout(title=\"Pie Chart for Distribution of Content based on Year Added\")\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.show()","99eb2ee1":"fig = px.pie(movies,values = movies['year_added'].value_counts(),names = movies['year_added'].value_counts().index,labels= movies['year_added'].value_counts().index)\nfig.update_layout(title=\"Pie Chart for Distribution of Movies based on Year Added\")\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.show()","04321c0c":"fig = px.pie(shows,values = shows['year_added'].value_counts(),names = shows['year_added'].value_counts().index,labels= shows['year_added'].value_counts().index)\nfig.update_layout(title=\"Pie Chart for Distribution of Shows based on Year Added\")\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.show()","8179734d":"r = netflix['year_added'].value_counts().to_dict()\ndata = dict(\n    count = r.values(),\n    year = r.keys())\nfig = px.funnel(data, x='year', y='count')\nfig.update_layout(title=\"Funnel Plot for Distribution of Content based on Year Added\")\nfig.show()","63992e51":"r = movies['year_added'].value_counts().to_dict()\ndata = dict(\n    count = r.values(),\n    year = r.keys())\nfig = px.funnel(data, x='year', y='count')\nfig.update_layout(title=\"Funnel Plot for Distribution of Movies based on Year Added\")\nfig.show()","1ff75f9f":"r = shows['year_added'].value_counts().to_dict()\ndata = dict(\n    count = r.values(),\n    year = r.keys())\nfig = px.funnel(data, x='year', y='count')\nfig.update_layout(title=\"Funnel Plot for Distribution of Shows based on Year Added\")\nfig.show()","e26d0ea5":"content = netflix['year_added'].value_counts().reset_index()\ntrace1 = go.Bar(x = content['index'],\n                y = content['year_added'],\n                marker = dict(color='rgb(255, 165, 0)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\nlayout = go.Layout(template='plotly_dark', title='Content Added over the years', xaxis=dict(title='Year'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1], layout=layout)\nfig.show()","5b34f253":"content = movies['year_added'].value_counts().reset_index()\ntrace1 = go.Bar(x = content['index'],\n                y = content['year_added'],\n                marker = dict(color='rgb(255, 165, 0)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\nlayout = go.Layout(template='plotly_dark', title='Movies Added over the years', xaxis=dict(title='Year'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1], layout=layout)\nfig.show()","e9364e0d":"content = shows['year_added'].value_counts().reset_index()\ntrace1 = go.Bar(x = content['index'],\n                y = content['year_added'],\n                marker = dict(color='rgb(255, 165, 0)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\nlayout = go.Layout(template='plotly_dark', title='Shows Added over the years', xaxis=dict(title='Year'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1], layout=layout)\nfig.show()","c8f812e2":"movies_release = movies['year_added'].value_counts().reset_index()\nshows_release = shows['year_added'].value_counts().reset_index()\n\ntrace1 = go.Bar(x = movies_release['index'],\n                y = movies_release['year_added'],\n                name = \"Movies\",\n                marker = dict(color = 'rgb(249, 6, 6)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\n\ntrace2 = go.Bar(x = shows_release['index'],\n                y = shows_release['year_added'],\n                name = \"TV Shows\",\n                marker = dict(color = 'rgb(26, 118, 255)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\n\nlayout = go.Layout(template='plotly_dark', title='Year Added by Content Type', xaxis=dict(title='Year'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1, trace2], layout=layout)\nfig.show()","9148517b":"sns.set()\nplt.figure(figsize=(20,8))\nsns.countplot(x=\"month_added\",data= netflix,order = netflix['month_added'].value_counts().index)\nplt.title(\"Content Added over the Months\", fontsize=40)\nplt.xticks(rotation=45)\nplt.show()","973cf82a":"sns.set()\nplt.figure(figsize=(20,8))\nsns.countplot(x=\"month_added\",data= movies,order = movies['month_added'].value_counts().index)\nplt.title(\"Movies Added over the Months\", fontsize=40)\nplt.xticks(rotation=45)\nplt.show()","59aa1c47":"sns.set()\nplt.figure(figsize=(20,8))\nsns.countplot(x=\"month_added\",data= shows,order = shows['month_added'].value_counts().index)\nplt.title(\"Shows Added over the Months\", fontsize=40)\nplt.xticks(rotation=45)\nplt.show()","8d737e4c":"fig = px.pie(netflix,values = netflix['month_added'].value_counts(),names = netflix['month_added'].value_counts().index,labels= netflix['month_added'].value_counts().index)\nfig.update_layout(title=\"Pie Chart for Distribution of Content based on Month Added\")\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.show()","7c072e45":"fig = px.pie(movies,values = movies['month_added'].value_counts(),names = movies['month_added'].value_counts().index,labels= movies['month_added'].value_counts().index)\nfig.update_layout(title=\"Pie Chart for Distribution of Movies based on Month Added\")\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.show()","9773b0c2":"fig = px.pie(shows,values = shows['month_added'].value_counts(),names = shows['month_added'].value_counts().index,labels= shows['month_added'].value_counts().index)\nfig.update_layout(title=\"Pie Chart for Distribution of Shows based on Month Added\")\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.show()","079815ac":"r = netflix['month_added'].value_counts().to_dict()\ndata = dict(\n    count = r.values(),\n    month = r.keys())\nfig = px.funnel(data, x='month', y='count')\nfig.update_layout(title=\"Funnel Plot for Distribution of Content based on Month Added\")\nfig.show()","4f4d5a52":"r = movies['month_added'].value_counts().to_dict()\ndata = dict(\n    count = r.values(),\n    month = r.keys())\nfig = px.funnel(data, x='month', y='count')\nfig.update_layout(title=\"Funnel Plot for Distribution of Movies based on Month Added\")\nfig.show()","77a1e00f":"r = shows['month_added'].value_counts().to_dict()\ndata = dict(\n    count = r.values(),\n    month = r.keys())\nfig = px.funnel(data, x='month', y='count')\nfig.update_layout(title=\"Funnel Plot for Distribution of Shows based on Month Added\")\nfig.show()","4d9fbd4d":"content = netflix['month_added'].value_counts().reset_index()\ntrace1 = go.Bar(x = content['index'],\n                y = content['month_added'],\n                marker = dict(color='rgb(255, 165, 0)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\nlayout = go.Layout(template='plotly_dark', title='Content Added over the months', xaxis=dict(title='Month'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1], layout=layout)\nfig.show()","9d7d8368":"content = movies['month_added'].value_counts().reset_index()\ntrace1 = go.Bar(x = content['index'],\n                y = content['month_added'],\n                marker = dict(color='rgb(255, 165, 0)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\nlayout = go.Layout(template='plotly_dark', title='Movies Added over the months', xaxis=dict(title='Month'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1], layout=layout)\nfig.show()","075d2fa8":"content = shows['month_added'].value_counts().reset_index()\ntrace1 = go.Bar(x = content['index'],\n                y = content['month_added'],\n                marker = dict(color='rgb(255, 165, 0)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\nlayout = go.Layout(template='plotly_dark', title='Shows Added over the months', xaxis=dict(title='Month'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1], layout=layout)\nfig.show()","22661cf8":"movies_added = movies['month_added'].value_counts().reset_index()\nshows_added = shows['month_added'].value_counts().reset_index()\n\ntrace1 = go.Bar(x = movies_added['index'],\n                y = movies_added['month_added'],\n                name = \"Movies\",\n                marker = dict(color = 'rgb(249, 6, 6)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\n\ntrace2 = go.Bar(x = shows_added['index'],\n                y = shows_added['month_added'],\n                name = \"TV Shows\",\n                marker = dict(color = 'rgb(26, 118, 255)',\n                             line = dict(color='rgb(0, 0, 0)', width=1.5))\n               )\n\nlayout = go.Layout(template='plotly_dark', title='Months Added by Content Type', xaxis=dict(title='Month'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace1, trace2], layout=layout)\nfig.show()","449c4402":"df.head()","d1266f5e":"shows_date = df[['date_added']].dropna()\nshows_date['year'] = shows_date['date_added'].apply(lambda x: x.split(', ')[-1])\nshows_date['month'] = shows_date['date_added'].apply(lambda x: x.lstrip().split(' ')[0])\nmonth_order = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][::-1]\nn = shows_date.groupby('year')['month'].value_counts().unstack().fillna(0)[month_order].T\nplt.figure(figsize=(10, 7), dpi=200)\nplt.pcolor(n, cmap='gist_heat_r', edgecolors='white', linewidths=2) # heatmap\nplt.xticks(np.arange(0.5, len(n.columns), 1), n.columns, fontsize=7, fontfamily='serif')\nplt.yticks(np.arange(0.5, len(n.index), 1), n.index, fontsize=7, fontfamily='serif')\n\nplt.title('Netflix Contents Update', fontsize=12, fontfamily='serif', fontweight='bold', position=(0.20, 1.0+0.02))\ncbar = plt.colorbar()\n\ncbar.ax.tick_params(labelsize=8) \ncbar.ax.minorticks_on()\nplt.show()","541041df":"group_country_movies=netflix.groupby('country')['show_id'].count().sort_values(ascending=False).head(10);\nplt.subplots(figsize=(15,8));\ngroup_country_movies.plot(kind='bar',fontsize=12);\nplt.xlabel('Content Count',fontsize=12)\nplt.ylabel('Country',fontsize=12)\nplt.title('Content count by Country',fontsize=12)\nplt.ioff()","6464b514":"sns.set()\nplt.figure(figsize=(25,9))\nsns.countplot(x=\"country\",data= netflix,hue= \"type\",order = netflix['country'].value_counts().index[0:15])\nplt.xticks(rotation=45)\nplt.show()","5af10bcb":"fig = px.pie(netflix,values = netflix['country'].value_counts()[:10],names = netflix['country'].value_counts()[:10].index,labels= netflix['country'].value_counts()[:10].index)\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.show()","f8da41f6":"fig = go.Figure([go.Bar(y=netflix['country'].value_counts()[:20].index,\n                        x=netflix['country'].value_counts()[:20],\n                        orientation=\"h\",\n                        name=\"\",\n                        marker=dict(color=\"#a678de\"))])\nfig = fig.update_layout(title='Countries with most Content', height=700, legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig.show()","0d873505":"c = netflix['country'].value_counts()[:15].to_dict()\ndata = dict(\n    count = c.values(),\n    country = c.keys())\nfig = px.funnel(data, x='count', y='country')\nfig.show()","39b896d9":"plt.figure(figsize=(20, 10))\nsns.barplot(netflix['country'].value_counts()[:20].index, netflix['country'].value_counts()[:20], palette=\"RdGy\")\nplt.xlabel('Countries', fontsize=20)\nplt.ioff()\nplt.show()","5ae5fbf9":"import squarify\ny = netflix['country'].value_counts()[:20]\nfig = plt.figure(figsize=(15, 10))\nsquarify.plot(sizes = y.values, label = y.index, color = sns.color_palette(\"RdGy\", n_colors = 20), \n              linewidth=4, text_kwargs={'fontsize':14, 'fontweight':'bold'})\nplt.title('Top 20 producing countries', position=(0.5, 1.0+0.03), fontsize=20, fontweight='bold')\nplt.axis('off')\nplt.show()","cb0b7dc9":"wordcloud = WordCloud(background_color = \"black\",width=1730,height=970).generate(\" \".join(netflix.country))\nplt.figure(figsize=(15,10))\nplt.imshow(wordcloud,interpolation = 'bilinear')\nplt.axis(\"off\")\nplt.title(\"Countries watching on Netflix\",color=\"black\",fontsize=40)\nplt.figure(1,figsize=(12,12))\nplt.show()","c493386f":"Country = pd.DataFrame(netflix[\"country\"].value_counts().reset_index().values,columns=[\"country\",\"TotalShows\"])\nCountry.head()","018e56bf":"fig = px.choropleth(   \n    locationmode='country names',\n    locations=Country.country,\n    featureidkey=\"Country.country\",\n    labels=Country[\"TotalShows\"]\n)\nfig.show()","e031fab5":"Country2 = netflix.groupby('year_added')['country'].value_counts().reset_index(name='counts')\nCountry2.head()","038002cf":"fig  = px.choropleth(Country2, locations=\"country\", color=\"counts\", locationmode=\"country names\",\n                    animation_frame=\"year_added\", range_color=[0, 200], color_continuous_scale=px.colors.sequential.OrRd)\nfig.update_layout(title=\"Comparison by Country\")\nfig.show()","792ab600":"wordcloud = WordCloud(background_color = \"black\",width=1730,height=970).generate(\" \".join(netflix.title))\nplt.figure(figsize=(15,10))\nplt.imshow(wordcloud,interpolation = 'bilinear')\nplt.axis(\"off\")\nplt.title(\"Titles\", color=\"black\", fontsize=40)\nplt.figure(1,figsize=(12,12))\nplt.show()","4940a734":"wrds = netflix['title'].str.split(\"(\").str[0].value_counts().keys()\nwordcloud = WordCloud(stopwords=STOPWORDS,scale = 5,background_color = \"black\",width=1730,height=970, colormap=\"rainbow\").generate(\" \".join(wrds))\nplt.figure(figsize=(15,10))\nplt.imshow(wordcloud,interpolation = 'bilinear')\nplt.axis(\"off\")\nplt.title(\"Key Words in Movie Titles\", color=\"black\", fontsize=40)\nplt.figure(1,figsize=(12,12))\nplt.show()","37f254ab":"netflix[\"listed_in\"].value_counts()","4c7a8a86":"netflix[\"listed_in\"].value_counts()[0:25]","b6795f14":"top_listed_in = netflix[\"listed_in\"].value_counts()[:25]","bd5b3d05":"fig = px.pie(netflix,values = top_listed_in,names = top_listed_in.index,labels= top_listed_in.index)\nfig.update_traces(textposition ='inside',textinfo='percent+label')\nfig.show()","a305a4ea":"plt.figure(figsize=(20, 10))\nsns.barplot(top_listed_in, top_listed_in.index)\nplt.xlabel('Count', fontsize=20)\nplt.ylabel('Movie Listing', fontsize=20)\nplt.ioff()\nplt.show()","f427b68f":"c = netflix['listed_in'].value_counts()[:25].to_dict()\ndata = dict(\n    count = c.values(),\n    genre = c.keys())\nfig = px.funnel(data, x='count', y='genre')\nfig.show()","80209da1":"genres = list(movies['listed_in'])\ngen = []\n\nfor i in genres:\n    i = list(i.split(','))\n    for j in i:\n        gen.append(j.replace(' ',''))\ngen[:20]","6ce4b193":"g = Counter(gen)\ng","a913da85":"text = list(set(gen))\nplt.rcParams['figure.figsize']=(13, 13)\nwordcloud = WordCloud(max_font_size=50, max_words=100, background_color='black').generate(str(text))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","5946fdb5":"g = {k: v for k, v in sorted(g.items(), key=lambda item: item[1], reverse=True)}\nfig, ax = plt.subplots()\nx = list(g.keys())\ny = list(g.values())\nax.vlines(x, ymin=0, ymax=y)\nax.plot(x, y, \"o\")\nax.set_xticklabels(x, rotation=90)\nax.set_ylabel(\"Count of Movie Genres\")\nax.set_title(\"Genres\")","cdcd357c":"g = {k: v for k, v in sorted(g.items(), key=lambda item: item[1], reverse=True)}\ndata = dict(\n    count = g.values(),\n    genre = g.keys())\nfig = px.funnel(data, x='count', y='genre')\nfig.show()","4aca9b73":"gen = pd.DataFrame.from_dict(g, orient='index', columns=['Count'])\ngen.head()","999f45d3":"plt.figure(figsize=(20, 10))\nshows['listed_in'].value_counts()[:20][::-1].plot(kind=\"barh\", color=\"black\")\nplt.title(\"Top 10 Genres of TV Shows\", fontsize=18)","fab11ca4":"netflix['length']=netflix['description'].str.len()\ndf.head()","c92656cd":"plt.figure(figsize=(12,5))\n\nplot = sns.distplot(netflix['length'])\nplot.set_title(\"Price Distribuition Filtered 300\", fontsize=20)\nplot.set_xlabel(\"Prices(US)\", fontsize=15)\nplot.set_ylabel(\"Frequency Distribuition\", fontsize=15)\n\n\nplt.show()","c03220b7":"plt.figure(figsize=(12,5))\nsns.set(style=\"darkgrid\")\nplot = sns.kdeplot(netflix['length'], shade=True)\nplot.set_title(\"Price Distribuition Filtered 300\", fontsize=20)\nplot.set_xlabel(\"Prices(US)\", fontsize=15)\nplot.set_ylabel(\"Frequency Distribuition\", fontsize=15)\n\n\nplt.show()","b061e35d":"netflix['duration'].head()","703f2925":"plt.figure(figsize=(12,5))\nsns.set(style=\"darkgrid\")\nplot = sns.kdeplot(data=movies['duration'], shade=True)\nplot.set_title(\"Distribution of Movie Duration\", fontsize=20)\n\nplt.show()","eb7e8ee0":"movies['duration'] = movies.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" not in x['duration'] else \"\", axis = 1)\nx1 = movies['duration'].fillna(0.0).astype(float)\nfig = ff.create_distplot([x1], ['a'], bin_size=0.7, curve_type='normal', colors=['#6ad49b'])\nfig.update_layout(title_text='Distplot with Normal Distribution')\nfig.show()","ffe01c41":"trace = go.Histogram(x = netflix['duration'],\n                     xbins = dict(size=0.5),\n                     marker = dict(color = 'rgb(26, 118, 255)')\n                    )\nlayout = go.Layout(template = 'plotly_dark', title='Distribution of Durations', xaxis=dict(title='Duration'))\nfig = go.Figure(data=[trace], layout=layout)\nfig.show()","16f45917":"def duration_in_country(country):\n    netflix_country_dur = netflix.loc[(netflix.country==country) & (netflix.type == 'Movie')].duration[:]\n    netflix_country_dur = netflix_country_dur.apply(lambda x: int(x.strip(' minSeaso')))\n    \n    return netflix_country_dur\n\nfig, axes = plt.subplots(10, 1, figsize=(18,18), constrained_layout=True)\nfig.suptitle(f\"Variation in Movie Durations in Various Countries\", fontsize=16)\nCountries = ['United States', 'India', 'Australia', 'Mexico', 'Spain', 'United Kingdom', 'Italy', 'Germany', 'France', 'Canada']\n\nfor i in range(10):\n    country_mov_dur = duration_in_country(Countries[i])\n    sns.kdeplot(country_mov_dur, Label=f\"Movie Duration in {Countries[i]}\", color=\"red\", ax=axes[i])","ba28c6b3":"old = netflix.sort_values('release_year', ascending=True)\nold_movies = old[old['duration']!=\"\"][:20]\nold_movies","40a8829d":"old_shows = old[old['season_count']!=\"\"][:20]\nold_shows","1f7aab8c":"newest = netflix.sort_values(by='release_year', ascending=False)\nnewest_movies = newest[newest['duration']!=''][:20]\nnewest_movies","096bdc03":"newest_shows = newest[newest['season_count']!=''][:20]\nnewest_shows","315cd612":"fig = go.Figure(data=[go.Table(header=dict(values=['title', 'release_year'],\n                                           fill_color='paleturquoise'),\n                               cells=dict(values=[old_shows['title'], old_shows['release_year']],\n                                         fill_color='pink')\n                              )])\nfig.show()","da5c22a1":"fig = go.Figure(data=[go.Table(header=dict(values=['title', 'year_added'],\n                                           fill_color='paleturquoise'),\n                               cells=dict(values=[old_shows['title'], old_shows['year_added']],\n                                         fill_color='pink')\n                              )])\nfig.show()","4c977aa6":"fig = go.Figure(data=[go.Table(header=dict(values=['title', 'release_year'],\n                                           fill_color='paleturquoise'),\n                               cells=dict(values=[old_movies['title'], old_movies['release_year']],\n                                         fill_color='pink')\n                              )])\nfig.show()","98fb0c92":"fig = go.Figure(data=[go.Table(header=dict(values=['title', 'release_year'],\n                                           fill_color='paleturquoise'),\n                               cells=dict(values=[newest_shows['title'], newest_shows['release_year']],\n                                         fill_color='pink')\n                              )])\nfig.show()","23311728":"fig = go.Figure(data=[go.Table(header=dict(values=['title', 'release_year'],\n                                           fill_color='paleturquoise'),\n                               cells=dict(values=[newest_movies['title'], newest_movies['release_year']],\n                                         fill_color='pink')\n                              )])\nfig.show()","ac93686e":"m = movies['release_year'].value_counts().reset_index()\nm = m.rename(columns={'release_year': 'count', 'index':'release_year'})\nm['percent'] = m['count'].apply(lambda x: 100*x\/sum(m['count']))\nm = m.sort_values('release_year')\n\ns = shows['release_year'].value_counts().reset_index()\ns = s.rename(columns={'release_year': 'count', 'index':'release_year'})\ns['percent'] = s['count'].apply(lambda x: 100*x\/sum(s['count']))\ns = s.sort_values('release_year')\n\nm.head()","9168fce7":"trace1 = go.Bar(x=m['release_year'], y=m['count'], name=\"Movies\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=s['release_year'], y=s['count'], name=\"TV Shows\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content Released over the Years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"), template=\"plotly_dark\")\nfig = go.Figure(data, layout=layout)\nfig.show()","12be89ef":"m = movies['year_added'].value_counts().reset_index()\nm = m.rename(columns={'year_added': 'count', 'index':'year_added'})\nm['percent'] = m['count'].apply(lambda x: 100*x\/sum(m['count']))\nm = m.sort_values('year_added')\n\ns = shows['year_added'].value_counts().reset_index()\ns = s.rename(columns={'year_added': 'count', 'index':'year_added'})\ns['percent'] = s['count'].apply(lambda x: 100*x\/sum(s['count']))\ns = s.sort_values('year_added')\n\nm.head()","5a0a42c9":"trace1 = go.Bar(x=m['year_added'], y=m['count'], name=\"Movies\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=s['year_added'], y=s['count'], name=\"TV Shows\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content Added over the Years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"), template=\"plotly_dark\")\nfig = go.Figure(data, layout=layout)\nfig.show()","338105e3":"m = movies['month_added'].value_counts().reset_index()\nm = m.rename(columns={'month_added': 'count', 'index':'month_added'})\nm['percent'] = m['count'].apply(lambda x: 100*x\/sum(m['count']))\nm = m.sort_values('month_added')\n\ns = shows['month_added'].value_counts().reset_index()\ns = s.rename(columns={'month_added': 'count', 'index':'month_added'})\ns['percent'] = s['count'].apply(lambda x: 100*x\/sum(s['count']))\ns = s.sort_values('month_added')\n\nm.head()","05c6a1d9":"trace1 = go.Bar(x=m['month_added'], y=m['count'], name=\"Movies\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=s['month_added'], y=s['count'], name=\"TV Shows\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content Added over the Months\", legend=dict(x=0.1, y=1.1, orientation=\"h\"), template=\"plotly_dark\")\nfig = go.Figure(data, layout=layout)\nfig.show()","ce36027f":"s = shows['season_count'].value_counts().reset_index()\ns = s.rename(columns = {'season_count':'count', 'index':'season_count'})\ns['percent'] = s['count'].apply(lambda x: 100*x\/sum(s['count']))\ns = s.sort_values('season_count')\n\ntrace1 = go.Bar(x=s['season_count'], y=s['count'], name=\"TV Shows\", marker=dict(color=\"#a678de\"))\ndata = [trace1]\nlayout = go.Layout(title=\"TV Show Seasons\", legend=dict(x=0.1, y=1.1, orientation=\"h\"), \n                   template=\"plotly_dark\", \n                   xaxis=dict(title=\"Number of Seasons\"), \n                   yaxis=dict(title=\"Number of Shows\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","ae6a2872":"trace = go.Histogram(x = netflix['season_count'], marker = dict(color='rgb(249, 6, 6)'))\nlayout = go.Layout(template='plotly_dark', title='Seasons of TV Shows', \n                   xaxis=dict(title=\"Number of Seasons\"),\n                   yaxis=dict(title=\"Number of Shows\")\n                  )\nfig = go.Figure(data=[trace], layout=layout)\nfig.show()","f89cd9c8":"s.head()","a1bdf7e6":"col = ['title', 'season_count']\ntop = shows[col]\ntop = top.sort_values(by='season_count', ascending=False)\ntop","7605f47e":"for i in range(len(top)):\n    top['season_count'].iloc[i] = int(top['season_count'].iloc[i])","2b91aa8a":"top25 = top[:25]\ntop25","cb3f651c":"top25.plot(kind='bar',x='title',y='season_count', figsize=(12, 7))","0e790761":"fig = go.Figure(data=[go.Table(header=dict(values=['title', 'season_count']),\n                              cells = dict(values=[top25['title'], top25['season_count']], fill_color = 'lavender'))])\nfig.show()","9a223102":"bottom25 = top[::-1][:25]\nbottom25","8e3d9f0b":"fig = go.Figure(data=[go.Table(header=dict(values=['title', 'season_count']),\n                              cells = dict(values=[bottom25['title'], bottom25['season_count']], fill_color = 'lavender'))])\nfig.show()","1de3f03b":"m = movies['rating'].value_counts().reset_index()\nm = m.rename(columns={'rating': 'count', 'index':'rating'})\nm['percent'] = m['count'].apply(lambda x: 100*x\/sum(m['count']))\nm = m.sort_values('rating')\n\ns = shows['rating'].value_counts().reset_index()\ns = s.rename(columns={'rating': 'count', 'index':'rating'})\ns['percent'] = s['count'].apply(lambda x: 100*x\/sum(s['count']))\ns = s.sort_values('rating')\n\nm.head()","30de493a":"trace1 = go.Bar(x=m['rating'], y=m['count'], name=\"Movies\", marker=dict(color=\"#a678de\"))\ntrace2 = go.Bar(x=s['rating'], y=s['count'], name=\"TV Shows\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content Added over the Years according to rating\", legend=dict(x=0.1, y=1.1, orientation=\"h\"), template=\"plotly_dark\")\nfig = go.Figure(data, layout=layout)\nfig.show()","c44c85e7":"n = netflix.dropna()\nplt.figure(figsize=(100,50))\nfig = px.treemap(n, path=['country', 'director'],\n                 color='director',\n                 hover_data=['director', 'title'],\n                 color_continuous_scale='Purple')\nfig.show()","b9a75242":"indian = netflix[netflix['country']=='India']\nindian = indian.dropna()\nplt.figure(figsize=(100,50))\nfig = px.treemap(indian, path=['country', 'director'],\n                 color='director',\n                 hover_data=['director', 'title'],\n                 color_continuous_scale='Purple')\nfig.show()","2de16db2":"indian = netflix[netflix['country']=='Spain']\nindian = indian.dropna()\nplt.figure(figsize=(100,50))\nfig = px.treemap(indian, path=['country', 'director'],\n                 color='director',\n                 hover_data=['director', 'title'],\n                 color_continuous_scale='Purple')\nfig.show()","6984689e":"movies_per_year = []\nshows_per_year = []\n\nfor i in range(2000, 2021):\n    h = netflix.loc[(netflix['type']=='Movie') & (netflix.year_added == i)]\n    g = netflix.loc[(netflix['type']=='TV Show') & (netflix.year_added == i)]\n    movies_per_year.append(len(h))\n    shows_per_year.append(len(g))\n\nmovies_per_year[:20]","6a07d3a7":"shows_per_year[:20]","b7a63f04":"trace1 = go.Scatter(x=[i for i in range(2000, 2021)], y=movies_per_year, mode='lines+markers', name='Movies')\ntrace2 = go.Scatter(x=[i for i in range(2000, 2021)], y=shows_per_year, mode='lines+markers', name='Shows')\n\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation='h'), template=\"plotly_dark\")\nfig = go.Figure(data, layout=layout)\nfig.show()","34e57124":"indian_movies_per_year = []\nindian_shows_per_year = []\n\nfor i in range(2000, 2021):\n    h = netflix.loc[(netflix['type']=='Movie') & (netflix.year_added == i) & (netflix.country=='India')]\n    g = netflix.loc[(netflix['type']=='TV Show') & (netflix.year_added == i) & (netflix.country=='India')]\n    indian_movies_per_year.append(len(h))\n    indian_shows_per_year.append(len(g))\n    \ntrace1 = go.Scatter(x=[i for i in range(2000, 2021)], y=indian_movies_per_year, mode='lines+markers', name='Movies')\ntrace2 = go.Scatter(x=[i for i in range(2000, 2021)], y=indian_shows_per_year, mode='lines+markers', name='Shows')\n\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Indian Content added over the years\", legend=dict(x=0.1, y=1.1, orientation='h'), template=\"plotly_dark\")\nfig = go.Figure(data, layout=layout)\nfig.show()","56d81753":"american_movies_per_year = []\namerican_shows_per_year = []\n\nfor i in range(2000, 2021):\n    h = netflix.loc[(netflix['type']=='Movie') & (netflix.year_added == i) & (netflix.country=='United States')]\n    g = netflix.loc[(netflix['type']=='TV Show') & (netflix.year_added == i) & (netflix.country=='United States')]\n    american_movies_per_year.append(len(h))\n    american_shows_per_year.append(len(g))\n    \ntrace1 = go.Scatter(x=[i for i in range(2000, 2021)], y=american_movies_per_year, mode='lines+markers', name='Movies')\ntrace2 = go.Scatter(x=[i for i in range(2000, 2021)], y=american_shows_per_year, mode='lines+markers', name='Shows')\n\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Anerican Content added over the years\", legend=dict(x=0.1, y=1.1, orientation='h'), template=\"plotly_dark\")\nfig = go.Figure(data, layout=layout)\nfig.show()","d1175c4e":"def content_in_countries(country):\n    movies_per_year = []\n    shows_per_year = []\n\n    for i in range(2000, 2021):\n        h = netflix.loc[(netflix['type']=='Movie') & (netflix.year_added == i) & (netflix.country==country)]\n        g = netflix.loc[(netflix['type']=='TV Show') & (netflix.year_added == i) & (netflix.country==country)]\n        movies_per_year.append(len(h))\n        shows_per_year.append(len(g))\n\n    trace1 = go.Scatter(x=[i for i in range(2000, 2021)], y=movies_per_year, mode='lines+markers', name='Movies')\n    trace2 = go.Scatter(x=[i for i in range(2000, 2021)], y=shows_per_year, mode='lines+markers', name='Shows')\n\n    data = [trace1, trace2]\n    layout = go.Layout(title=f\"Content added over the years in {country}\", legend=dict(x=0.1, y=1.1, orientation='h'), template=\"plotly_dark\")\n    fig = go.Figure(data, layout=layout)\n    fig.show()\n    \nCountries = ['United States', 'India', 'Australia', 'Mexico', 'Spain', 'United Kingdom', 'Italy', 'Germany', 'France', 'Canada']\nfor i in Countries:\n    content_in_countries(i)","9f7460d1":"indian_movies = movies[movies['country']=='India']\nindian_directors = \", \".join(indian_movies['director'].fillna('')).split(\", \")\ntop_indian_directors = Counter(indian_directors).most_common(11)\ntop_indian_directors","0f6c5a9a":"top_indian_directors = [_ for _ in top_indian_directors if _[0]!=\"\"]\ntop_indian_directors","17150df6":"indian_directors = [_[0] for _ in top_indian_directors][::-1]\nmovie_counts = [_[1] for _ in top_indian_directors][::-1]\nindian_directors","94352f72":"movie_counts","a5a1a8bf":"trace = go.Bar(x = indian_directors, y = movie_counts, marker = dict(color='rgb(255, 165, 0)', \n                                                     line = dict(color ='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template = 'plotly_dark', title=\"Top 10 Movie Directors from India with Maximum content\",\n                  xaxis = dict(title='Directors'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace], layout=layout)\nfig.show()","01e21128":"indian_actors = \", \".join(indian_movies['cast'].fillna('')).split(\", \")\ntop_indian_actors = Counter(indian_actors).most_common(11)\ntop_indian_actors","45a0ca52":"indian_actors = [_[0] for _ in top_indian_actors][::-1]\nmovie_counts = [_[1] for _ in top_indian_actors][::-1]\ntrace = go.Bar(x = indian_actors, y = movie_counts, marker = dict(color='rgb(255, 165, 0)', \n                                                     line = dict(color ='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template = 'plotly_dark', title=\"Top 10 Movie Actors from India with Maximum content\",\n                  xaxis = dict(title='Actors'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace], layout=layout)\nfig.show()","560714ed":"american_movies = movies[movies['country']=='United States']\namerican_directors = \", \".join(american_movies['director'].fillna('')).split(\", \")\ntop_american_directors = Counter(american_directors).most_common(11)\ntop_american_directors","bc991240":"top_american_directors = [_ for _ in top_american_directors if _[0]!=\"\"]\ntop_american_directors","3f678f92":"american_directors = [_[0] for _ in top_american_directors][::-1]\nmovie_counts = [_[1] for _ in top_american_directors][::-1]\ntrace = go.Bar(x = american_directors, y = movie_counts, marker = dict(color='rgb(255, 0, 0)', \n                                                     line = dict(color ='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template = 'plotly_dark', title=\"Top 10 Movie Directors from America with Maximum content\",\n                  xaxis = dict(title='Directors'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace], layout=layout)\nfig.show()","ecc8a969":"american_actors = \", \".join(american_movies['cast'].fillna('')).split(\", \")\ntop_american_actors = Counter(american_actors).most_common(11)\ntop_american_actors","18d35c96":"top_american_actors = [_ for _ in top_american_actors if _[0]!=\"\"]\ntop_american_actors","1c52d7ad":"american_actors = [_[0] for _ in top_american_actors][::-1]\nmovie_counts = [_[1] for _ in top_american_actors][::-1]\ntrace = go.Bar(x = american_actors, y = movie_counts, marker = dict(color='rgb(255, 0, 0)', \n                                                     line = dict(color ='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template = 'plotly_dark', title=\"Top 10 Movie Actors from America with Maximum content\",\n                  xaxis = dict(title='Actors'), yaxis=dict(title='Count'))\nfig = go.Figure(data=[trace], layout=layout)\nfig.show()","b2f7a72d":"!pip install pywaffle","8ea0f439":"from pywaffle import Waffle\n\nfig = plt.figure(\n    FigureClass = Waffle,\n    rows = 13,\n    columns = 21,\n    values = netflix['country'].value_counts()[:20],\n    labels = [\"{}({})\".format(a, b) for a,b in zip(netflix['country'].value_counts().index[:20], netflix['country'].value_counts()[:20])],\n    colors = sns.color_palette(\"RdGy\", n_colors=20),\n    legend = {'loc':'lower left', 'bbox_to_anchor': (0, -0.3), 'ncol': len(y)\/\/4, 'framealpha': 0},\n    font_size = 15,\n    figsize=(12, 12),\n    icon_legend = True\n)\n\nplt.title('Top 20 Content Producing Countries', position = (0.5, 1.0+0.03), fontsize=40, fontweight='bold')\nplt.show()","2d6fecda":"fig = plt.figure(\n    FigureClass = Waffle,\n    rows = 13,\n    columns = 21,\n    values = netflix['country'].value_counts()[:20],\n    labels = [\"{}({})\".format(a, b) for a,b in zip(netflix['country'].value_counts().index[:20], netflix['country'].value_counts()[:20])],\n    colors = sns.color_palette(\"colorblind\", n_colors=20),\n    legend = {'loc':'lower left', 'bbox_to_anchor': (0, -0.3), 'ncol': len(y)\/\/4, 'framealpha': 0},\n    font_size = 15,\n    figsize=(12, 12),\n    icon_legend = True\n)\n\nplt.title('Top 20 Content Producing Countries', position = (0.5, 1.0+0.03), fontsize=40, fontweight='bold')\nplt.show()","e01dc019":"!pip install rake-nltk\nfrom sklearn.metrics.pairwise import linear_kernel, cosine_similarity\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.cluster import MiniBatchKMeans\nimport time\nfrom rake_nltk import Rake\nimport networkx as nx","2acf920f":"df.head(20)","761b046a":"new_df = df[['title', 'director', 'cast', 'listed_in', 'description']]\nnew_df.head(10)","c5c2451b":"new_df.dropna(inplace=True)\nblanks = []\ncol = ['title', 'director', 'cast', 'listed_in', 'description']\nfor i, col in new_df.iterrows():  # Iterate over DataFrame rows as (index, Series) pairs.\n    if type(col)==str:            # avoid NaN values\n        if col.isspace():         # test 'review' for white spaces\n            blanks.append(i)      # add matching index numbers to the list\nnew_df.drop(blanks, inplace=True)\nnew_df.head(10)","e8a4c019":"new_df['key_words'] = ''\nfor index, row in new_df.iterrows():\n    description = row['description']\n    \n    # Rake => uses english stopwords from NLTK, discards all puctuations\n    r = Rake()\n    r.extract_keywords_from_text(description)\n    \n    # Creating dictionary => key-words -> keys, scores -> values\n    key_words_dict_scores = r.get_word_degrees()\n    \n    # Assigning key-words to new column for corresponding movies\n    row['key_words'] = list(key_words_dict_scores.keys())\n    \nnew_df['key_words'].head()","8e10c3b7":"key_words_dict_scores","9caad5ef":"new_df.drop(columns=['description'], inplace=True)\nnew_df.head(10)","6c03d6c0":"new_df['cast'] = new_df['cast'].map(lambda x: x.split(',')[:3])\nnew_df['listed_in'] = new_df['listed_in'].map(lambda x: x.lower().split(','))\nnew_df['director'] = new_df['director'].map(lambda x: x.split(' '))\n\nnew_df.head(10)","687b47fa":"new_df.iterrows()","cee4bd93":"for index, row in new_df.iterrows():\n    row['cast'] = [x.lower().replace(' ','') for x in row['cast']]\n    row['director'] = ''.join(row['director']).lower()\n\nnew_df.head(10)","c2f5511e":"new_df['bag_of_words'] = ''\ncolumns = new_df.columns\nfor index, row in new_df.iterrows():\n    words = ''\n    for col in columns:\n        if col!= 'director':\n            words += ''.join(row[col]) + ' '\n        else:\n            words += row[col] + ' '\n    row['bag_of_words'] = words\n    \nnew_df.head()","a05bdda1":"new_df.set_index('title', inplace=True)\nnew_df.head()","ebbede2e":"count = CountVectorizer()\ncount_matrix = count.fit_transform(new_df['bag_of_words'])\ncount_matrix","96510005":"indices = pd.Series(new_df.index)\nindices","b88b507c":"cosine = cosine_similarity(count_matrix, count_matrix)\ncosine","2a13d671":"def recommendations(Title, cosine_sim = cosine):\n    recommended = []\n    idx = indices[indices==Title].index[0]\n    score_series = pd.Series(cosine_sim[idx]).sort_values(ascending=False)\n    top_10_indices = list(score_series.iloc[1:11].index)\n    \n    for i in top_10_indices:\n        recommended.append(list(new_df.index)[i])\n    return recommended\n\nrecommendations('3 Idiots')","2ac65ee9":"recommendations('Naruto')","c371dc90":"recommendations('Brother')","05c88390":"recommendations('Hellboy')","f61570b5":"new_df = df\n# Removing Stopwords\ntfidf = TfidfVectorizer(stop_words='english')\nnew_df['description'] = new_df['description'].fillna('')\ntfidf_matrix = tfidf.fit_transform(new_df['description'])\ntfidf_matrix.shape","2dadf05a":"# There are 16151 words described for 6234 movies\n\ntfidf_matrix","e67b15f2":"# Compute Linear Kernel between tfidf_matrix and itself\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\ncosine_sim","b1fcc14b":"indices = pd.Series(new_df.index, index=new_df['title'])\nindices","64539be3":"indices = indices.drop_duplicates()\nindices","8112b587":"def get_recommendations(title, cosine_sim=cosine_sim):\n    idx = indices[title]\n    similarity_scores = list(enumerate(cosine_sim[idx]))\n    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)\n    similarity_scores = similarity_scores[1:11]\n    movie_indices = [i[0] for i in similarity_scores]\n    return new_df['title'].iloc[movie_indices]\n\nget_recommendations('3 Idiots')","ce86f1c3":"netflix.head()","008c04b6":"netflix['day'] = netflix['date_added'].dt.day\nnetflix['directors'] = netflix['director'].apply(lambda l: [] if pd.isna(l) else [i.strip() for i in l.split(\",\")])\nnetflix['categories'] = netflix['listed_in'].apply(lambda l: [] if pd.isna(l) else [i.strip() for i in l.split(\",\")])\nnetflix['actors'] = netflix['cast'].apply(lambda l: [] if pd.isna(l) else [i.strip() for i in l.split(\",\")])\nnetflix['countries'] = netflix['country']. apply(lambda l: [] if pd.isna(l) else [i.strip() for i in l.split(\",\")])\nnetflix.head()","a067abd2":"netflix.shape","ac1feda4":"start_time = time.time()\ntext_content = netflix['description']\nvector = TfidfVectorizer(max_df = 0.4,           # drop words that occur more than max_df %\n                         stop_words = 'english', # remove stop words\n                         lowercase = True,       # everything to lowercase\n                         use_idf = True,\n                         norm = u'l2',\n                         smooth_idf = True       # prevent divide by zero errors\n                         )\n\ntfidf = vector.fit_transform(text_content)","ca5dafbc":"k = 200\nkmeans = MiniBatchKMeans(n_clusters = k)\nkmeans.fit(tfidf)\ncentres = kmeans.cluster_centers_.argsort()[:, ::-1]\nterms = vector.get_feature_names()\n\nrequest_transform = vector.transform(netflix['description'])\nnetflix['cluster'] = kmeans.predict(request_transform)\nnetflix['cluster'].value_counts().head()","20c2bb0d":"def find_similar(tfidf_matrix, index, top_n = 5):\n    cosine_similarities = linear_kernel(tfidf_matrix[index:index+1], tfidf_matrix).flatten()\n    related_docs_indices = [i for i in cosine_similarities.argsort()[::-1] if i!=index]\n    return [index for index in related_docs_indices][0:top_n]","85cbd299":"G = nx.Graph(label=\"MOVIE\")\nstart_time = time.time()\nfor i, row in netflix.iterrows():\n    if(i%1000==0):\n        print(\" iter {} -- {} seconds --\".format(i, time.time()-start_time))\n    G.add_node(row['title'], key=row['show_id'], label='MOVIE', mtype=row['type'], rating=row['rating'])\n    for element in row['actors']:\n        G.add_node(element, label='PERSON')\n        G.add_edge(row['title'], element, label='ACTED_IN')\n    for element in row['categories']:\n        G.add_node(element, label='CAT')\n        G.add_edge(row['title'], element, label='CAT_IN')\n    for element in row['directors']:\n        G.add_node(element, label='PERSON')\n        G.add_edge(row['title'], element, label='DIRECTED')\n    for element in row['countries']:\n        G.add_node(element, label='COU')\n        G.add_edge(row['title'], element, label='COU_IN')\n        \n    indices = find_similar(tfidf, i, top_n=5)\n    snode = \"Sim(\"+row['title'][:15].strip()+\")\"\n    G.add_node(snode, label='SIMILAR')\n    G.add_edge(row['title'], snode, label='SIMILARITY')\n    for element in indices:\n        G.add_edge(snode, netflix['title'].loc[element], label='SIMILARITY')\nprint(\" finish -- {} seconds --\".format(time.time() - start_time))","a625b9cc":"indices","6bcd23f2":"def get_all_adj_nodes(list_in):\n    sub_graph = set()\n    for m in list_in:\n        sub_graph.add(m)\n        for e in G.neighbors(m):\n            sub_graph.add(e)\n    return list(sub_graph)","a6042e41":"def draw_sub_graph(sub_graph):\n    subgraph = G.subgraph(sub_graph)\n    colors = []\n    for e in subgraph.nodes():\n        if G.nodes[e]['label'] == 'MOVIE':\n            colors.append('blue')\n        elif G.nodes[e]['label']==\"PERSON\":\n            colors.append('red')\n        elif G.nodes[e]['label']==\"CAT\":\n            colors.append('green')\n        elif G.nodes[e]['label']==\"COU\":\n            colors.append('yellow')\n        elif G.nodes[e]['label']==\"SIMILAR\":\n            colors.append('orange')    \n        elif G.nodes[e]['label']==\"CLUSTER\":\n            colors.append('orange')\n    nx.draw(subgraph, with_labels=True, font_weight='bold', node_color=colors)\n    plt.show()","592d0015":"list_in = ['3 Idiots', 'PK']\nsub_graph = get_all_adj_nodes(list_in)\ndraw_sub_graph(sub_graph)","3d06b00e":"def get_recommendations(root):\n    common_dict = {}\n    for e in G.neighbors(root):\n        for e2 in G.neighbors(e):\n            if e2==root:\n                continue\n            if G.nodes[e2]['label']=='MOVIE':\n                commons = common_dict.get(e2)\n                if commons==None:\n                    common_dict.update({e2: [e]}) \n                else:\n                    commons.append(e)\n                    common_dict.update({e2: commons})\n    movies = []\n    weight = []\n    for key,values in common_dict.items():\n        w = 0.0\n        for e in values:\n            w+=1\/math.log(G.degree(e))\n        movies.append(key)\n        weight.append(w)\n        \n    result = pd.Series(data=np.array(weight), index=movies)\n    result.sort_values(inplace=True, ascending=False)\n    return result","3ae6ca95":"result = get_recommendations('3 Idiots')\nresult","3248bf0c":"reco = list(result.index[:4].values)\nreco.extend(['3 Idiots'])\nsub_graph = get_all_adj_nodes(reco)\ndraw_sub_graph(sub_graph)","38ee0894":"# **Adamic Adar measure**\n\nIt is a measure used to compute the closeness of nodes based on their shared neighbors.\n\n* x and y are 2 nodes (2 Movies)\n* N(one_node) is a function that return the set of adjacent nodes to one_node\n\nadamicAdar(x,y)=\u2211u\u2208N(x)\u2229N(y)1log(N(u))\n \n\u00absay otherwise, for each node u in common to x and y, add to the measure 1\/log(N(u))\u00bb\n\nThe quantity  1\/log(N(u))  determine the importance of u in the measure.\n\n* if x and y share a node u that has a lot of adjacent nodes, this node is not really relevant. \u2192 N(u) is high \u2192 1\/log(N(u)) is not high\n* if x and y share a node u that not has a lot of adjacent nodes, this node is really relevant. \u2192 N(u) is not high \u2192 1\/log(N(u)) is higher","04684d40":"**Recommendations using CountVectorizer and Cosine Similarity and Rake()**","d764ead6":"**Recommendations using TfidVectorizer and Cosine Similarity**","ad260092":"# **K Means Clustering with TF-IDF**","ba10b336":"# **RECOMMENDATIONS**"}}