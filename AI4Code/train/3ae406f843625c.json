{"cell_type":{"990e39d4":"code","1124db79":"code","43cce2ea":"code","c1a50c9f":"code","1b7a1ed0":"code","74e6ac84":"code","095b6fe0":"code","c96cfc9c":"markdown","6ee00f9c":"markdown","41bc01c8":"markdown","cb6b0276":"markdown","5ea888cc":"markdown","51302f6e":"markdown"},"source":{"990e39d4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1124db79":"data_dir = '\/kaggle\/input\/chest-xray-pneumonia'\ntrain_data_dir = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train'\ntest_data_dir = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/test'\nprint(os.listdir(train_data_dir))\nprint(os.listdir(test_data_dir))","43cce2ea":"import glob\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nnormal_train_images = [mpimg.imread(img_path) for img_path in glob.glob('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train\/NORMAL\/*')]\npneumonia_train_images = [mpimg.imread(img_path) for img_path in glob.glob('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/train\/PNEUMONIA\/*')]\nnormal_test_images = [mpimg.imread(img_path) for img_path in glob.glob('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/test\/NORMAL\/*')]\npneumonia_test_images = [mpimg.imread(img_path) for img_path in glob.glob('\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/test\/PNEUMONIA\/*')]\n\n\nplt.imshow(normal_train_images[0])\n","c1a50c9f":"from keras_preprocessing.image import ImageDataGenerator\n\ntrain_datagen = ImageDataGenerator(rescale=1\/255, \n                                   rotation_range=10,\n                                   zoom_range=0.2,\n                                   height_shift_range=0.2,\n                                   width_shift_range=0.2,\n                                   fill_mode='nearest')\n\nval_datagen = ImageDataGenerator(rescale=1\/255)\n                                   \ntrain_generator = train_datagen.flow_from_directory(train_data_dir,\n                                                    target_size=(150,150),\n                                                    class_mode='binary',\n                                                    batch_size=128)\nvalidation_generator = val_datagen.flow_from_directory(test_data_dir,\n                                                       target_size=(150,150),\n                                                       batch_size=128,\n                                                       class_mode='binary')","1b7a1ed0":"from tensorflow.keras.applications.inception_v3 import InceptionV3\nimport tensorflow as tf\nfrom tensorflow import keras\n\npre_trained_model = InceptionV3(include_top=False, weights='imagenet', input_shape=(150,150,3))\n\nfor layer in pre_trained_model.layers:\n    layer.trainable=False\n\npre_trained_model.summary()","74e6ac84":"from tensorflow.keras.optimizers import RMSprop, Adam\nfrom tensorflow import keras\n\nlast_layer = pre_trained_model.get_layer('mixed7')\nlast_output = last_layer.output\n\nx = keras.layers.Flatten()(last_output)\n\nx = keras.layers.Dense(512, activation='relu')(x)\nx = keras.layers.Dropout(0.2)(x)\nx = keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = keras.Model(inputs=pre_trained_model.input, outputs=x)\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\nhistory = model.fit(train_generator,\n                    validation_data = validation_generator,\n                    epochs = 20,\n                    verbose = 1)","095b6fe0":"import matplotlib.pyplot as plt\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'r', label='Training accuracy')\nplt.plot(epochs, val_acc, 'b', label='Validation accuracy')\nplt.title('Training and validation accuracy')\nplt.legend(loc=0)\nplt.figure()\nplt.plot(epochs, loss, 'r', label='Training accuracy')\nplt.plot(epochs, val_loss, 'b', label='Validation accuracy')\n\nplt.show()","c96cfc9c":"## **Plotting the accuracy and loss**","6ee00f9c":"## **Labeling the images**","41bc01c8":"**The images have been classified into 'Normal' and 'Pneumonia' in both training and validation directories**","cb6b0276":"## **Defining the Directories**","5ea888cc":"## **Reading the images**","51302f6e":"## **Inception model**"}}