{"cell_type":{"f71e41e2":"code","c9a4758e":"code","5594d674":"code","35564d86":"code","f0037908":"code","3df1ff62":"code","ff5cfeb9":"code","e41f3b7a":"code","7637f5bc":"markdown"},"source":{"f71e41e2":"import cv2 as cv \nimport numpy as np\nimport json\nimport pandas as pd\nimport math\nimport matplotlib.pyplot as plt\nimport glob","c9a4758e":"img = cv.imread(\"..\/input\/carscan\/Data Visualization\/images\/2.jpg\")","5594d674":"plt.imshow(img)\nplt.show()","35564d86":"def getImages(image_path, metadata_path, alpha):\n    getImage1(image_path, metadata_path, alpha)\n    getImage2(image_path, metadata_path, alpha)","f0037908":"def getImage1(image_path, metadata_path, alpha):\n    img = cv.imread(image_path)\n    # f = open(meta_data_json_path, \"r\")\n    metadata = json.loads((open(metadata_path, \"r\")).read())\n    alpha = alpha\n\n    df = pd.DataFrame(metadata)\n    coords = df[df[\"type\"] == \"polygonlabels\"][\"value\"]\n\n    original_width = df[\"original_width\"][1]\n    original_height = df[\"original_height\"][1]\n    color = (0,255,0)\n    thickness = 2\n    shapes = np.zeros_like(img, np.uint8)\n\n    # df[\"value\"][1]['polygonlabels'][0]\n\n    for i in range(len(coords)):\n        #setting coordinates\n        new_pts = np.array(coords.iloc[i][\"points\"] ) \n        #de-normalizing\n        new_pts[:,0] = new_pts[:,0]*original_width\/100\n        new_pts[:,1] = new_pts[:,1]*original_height\/100\n\n        new_pts = new_pts.reshape((-1, 1, 2))\n        new_pts\n\n        \n        image = cv.polylines(img, np.int32([new_pts]), True , color, thickness)\n        shapes = cv.fillPoly(shapes, np.int32([new_pts]), color )\n\n    out = image.copy()\n#     alpha = 0.2\n    mask = shapes.astype(bool)\n    out[mask] = cv.addWeighted(image, alpha, shapes, alpha, 0)[mask]\n\n    plt.figure(figsize = (15,20))\n    plt.imshow(out)\n    plt.show()\n","3df1ff62":"def getImage2(image_path, metadata_path, alpha) :\n    img = cv.imread(image_path)\n    # f = open(meta_data_json_path, \"r\")\n    metadata = json.loads((open(metadata_path, \"r\")).read())\n    alpha = alpha\n\n    df = pd.DataFrame(metadata)   \n    coords = df[df[\"type\"] == \"polygonlabels\"][\"value\"]\n    \n\n    original_width = df[\"original_width\"][1]\n    original_height = df[\"original_height\"][1]\n    color = (0,255,0)\n    thickness = 2\n    shapes = np.zeros_like(img, np.uint8)\n\n\n    # df[\"value\"][1]['polygonlabels'][0]\n\n    for i in range(len(coords)):\n        #setting coordinates\n        new_pts = np.array(coords.iloc[i][\"points\"] ) \n        #de-normalizing\n        new_pts[:,0] = new_pts[:,0]*original_width\/100\n        new_pts[:,1] = new_pts[:,1]*original_height\/100\n\n        new_pts = new_pts.reshape((-1, 1, 2))\n        new_pts\n\n        #finding the edge coordinates for bbox\n        x1 , y1 = min(new_pts[:,0][:,0]), min(new_pts[:,0][:,1])\n        x2 , y2 = max(new_pts[:,0][:,0]), max(new_pts[:,0][:,1])\n        #setting as start end pts   \n        start_point = (math.floor(x1), math.floor(y1))\n        end_point = (math.ceil(x2), math.ceil(y2))\n\n\n        #for cv putText\n        font = cv.FONT_HERSHEY_SIMPLEX\n        fontScale = 0.5\n        text = coords.iloc[i]['polygonlabels'][0]\n\n\n        image = cv.polylines(img, np.int32([new_pts]), True , color, thickness)        \n        image = cv.rectangle(image, start_point , end_point , color, thickness)\n        image = cv.putText(image, text, start_point, font,fontScale,color ,thickness, cv.LINE_AA)\n        image = cv.putText(image, text, start_point, font,fontScale,(255,0,0) , 1, cv.LINE_AA) \n        shapes = cv.fillPoly(shapes, np.int32([new_pts]), color )\n\n    out = image.copy()\n#     alpha = 0.8\n    mask = shapes.astype(bool)\n    out[mask] = cv.addWeighted(image, alpha, shapes, alpha, 0)[mask]\n\n    plt.figure(figsize = (15,20))\n    plt.imshow(out)\n    plt.show()\n    ","ff5cfeb9":"getImages(\"..\/input\/carscan\/Data Visualization\/images\/3.jpg\",\"..\/input\/carscan\/Data Visualization\/data\/3.json\", 0.5)","e41f3b7a":"\nfor i in range(1, 6):    \n    image = \"..\/input\/carscan\/Data Visualization\/images\/\"+str(i)+\".jpg\"\n    metadata = \"..\/input\/carscan\/Data Visualization\/data\/\"+str(i)+\".json\"\n    getImages(image, metadata, 0.5)\n    ","7637f5bc":"# Printing all the input images :"}}