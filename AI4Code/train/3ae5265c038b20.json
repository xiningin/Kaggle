{"cell_type":{"db1db1df":"code","322ed9a9":"code","f8b6fd04":"code","b3f2c63c":"code","4d1c753b":"code","67921a30":"code","ec2e971f":"code","f7028581":"code","6a882f69":"code","4fb05ff5":"code","e0940e19":"code","de9a5194":"code","3c4042e6":"code","940bc27c":"code","56e3b455":"code","c20a5ec7":"code","12f1c40c":"code","f7e7e08c":"code","39562a1e":"code","d63527c8":"code","81a5b12f":"code","6875f873":"code","d32112ed":"code","e88e6868":"code","9c7b228a":"code","8937aebc":"code","4634f144":"code","b3c3793f":"code","b9f84543":"code","02eabd91":"code","aa35e169":"code","f9c704e6":"code","69bfbd96":"code","4fff4f37":"code","fd5b1a2f":"code","a280c45f":"code","6ddcc008":"code","147396fa":"code","59038334":"code","c19f658e":"code","079d7dce":"code","2f94c2aa":"code","a0fb62df":"code","9c4d5716":"code","31331e40":"code","11f50172":"markdown","6c3b39ea":"markdown","b27b2bc1":"markdown","290fba4f":"markdown","fad82a7d":"markdown","a90d445c":"markdown","27a3e3b7":"markdown","a71dec02":"markdown","7271512c":"markdown","a26c911e":"markdown","2b583891":"markdown","ffc7be05":"markdown","4e666c9a":"markdown","09280477":"markdown","ca318b4e":"markdown","76c74dbd":"markdown","62ce3181":"markdown","214192cc":"markdown","4f765968":"markdown","d58d2bad":"markdown","c3d527cd":"markdown","90e75d0e":"markdown","cf47efd9":"markdown","e9fcbf01":"markdown","b7353a4a":"markdown","86a14abe":"markdown","0214af0e":"markdown"},"source":{"db1db1df":"import numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport random\nimport json\nimport os\nimport wordcloud\nimport functools\nimport nltk\nimport requests\n\nfrom matplotlib import pyplot as plt\nfrom urllib.request import urlopen\nfrom plotly import graph_objects as go\nfrom plotly import express as px\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom nltk.corpus import stopwords\nfrom geopy.distance import geodesic #Distances","322ed9a9":"# A mapbox token is needed for some interactive map plots:\n#          https:\/\/docs.mapbox.com\/help\/how-mapbox-works\/access-tokens\/\n#mapbox_token = os.environ['MAPBOX_TOKEN'] #Set a public mapbox token as a string or environment variable.\nmapbox_token = requests.get('https:\/\/pastebin.com\/raw\/GygwE5aD').text # Temporary token share (will be deleted)\npx.set_mapbox_access_token(mapbox_token)","f8b6fd04":"print(\"Data files:\")\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(\"\\t\"+os.path.join(dirname, filename))\n\n","b3f2c63c":"data = pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndata.head(3)","4d1c753b":"print(f\"Number of records: {data.count()[0]}\")","67921a30":"#Fix NaN in reviews per month\ndata[data['reviews_per_month'].isna()] = 0\n\n#Remove \"empty records\"\ndata = data[data['room_type'] != 0]","ec2e971f":"print(f\"Number of records after cleaning: {data.count()[0]}\")","f7028581":"fig, ax= plt.subplots(2,1, figsize=(20,10))\n\nax[0].set_title(\"Histogram of prices (total)\")\nsns.distplot(data['price'], kde=True, ax=ax[0])\nax[1].set_title(\"Histogram of prices (< $800)\")\nsns.distplot(data[data['price'] < 800]['price'], kde=True, ax=ax[1])\n\n\n\nfig.suptitle(\"Distribution of prices\")\nfig.show()","6a882f69":"d = data.groupby('neighbourhood')['price'].mean().sort_values(ascending=False)\n\nfig, ax= plt.subplots(2,1, figsize=(20,19))\nsns.barplot(d.index.tolist()[:20], d.values[:20], ax=ax[0], palette=(\"Blues_d\"))\nax[0].set_xticklabels(ax[0].get_xticklabels(), rotation=40, ha=\"right\")\nax[0].set_title('Top 20 most expensive neighbourhoods')\n\nd = data.groupby('neighbourhood_group')['price'].mean().sort_values(ascending=False)[:5]\nsns.barplot(d.index.tolist(), d.values, ax=ax[1], palette=(\"Blues_d\"))\n#ax[1].set_xticklabels(ax[1].get_xticklabels(), rotation=40, ha=\"right\")\nax[1].set_title('Mean price of each neighbourhood_group')\n\nfig.show()\n","4fb05ff5":"cscale = [\n          [0.0, 'rgb(165,0,38)'], \n          [0.0005, 'rgb(215,48,39)'], \n          [0.007, 'rgb(250, 152, 122)'], \n          [0.08, 'rgb(208, 254, 144)'], \n          [0.1, 'rgb(0, 255, 179)'], \n          [0.3, 'rgb(171,217,233)'], \n          [0.7, 'rgb(116,173,209)'], \n          [0.9, 'rgb(69,117,180)'], \n          [1.0, 'rgb(49,54,149)']\n         ]","e0940e19":"fig = px.scatter_mapbox(data, lat=\"latitude\", lon=\"longitude\",  color=\"price\", size=\"reviews_per_month\",\n                  color_continuous_scale=cscale, size_max=20, height=760, zoom=10, title='Scatter map of all Airbnb rents (price <= $700)', range_color=(0,700))\nfig.show()","de9a5194":"fig = px.scatter_mapbox(data[data['price'] > 700], lat=\"latitude\", lon=\"longitude\",  color=\"price\", size=\"reviews_per_month\",\n                  color_continuous_scale=cscale, height=760,size_max=20, zoom=10, title='Scatter map of most expensive Airbnb rents (>$700)')\nfig.show(renderer='kaggle')","3c4042e6":"d = data.groupby('room_type')['price'].mean().sort_values(ascending=False)\nfig, ax= plt.subplots(figsize=(15,7))\nsns.barplot(d.index.tolist(), d.values, ax=ax)\nax.set_title('Average price of room types')\nfig.show()","940bc27c":"fig, ax= plt.subplots(figsize=(20,8))\nsns.violinplot(x=\"room_type\", y=\"price\", data=data[data['price'] <= 700], ax=ax)\nax.set_title('Price distribution of each room type')\nfig.show()","56e3b455":"f = sns.catplot(x=\"price\", y=\"neighbourhood_group\", hue=\"room_type\", data=data[data['price'] <= 900], kind='violin', height=10)\nf.axes[0][0].set_xlim(0,)\nplt.title('Price distribution of each room type in each NYC zone')\nplt.show()","c20a5ec7":"fig = px.scatter_mapbox(data[data['price'] <= 700], lat=\"latitude\", lon=\"longitude\",  color=\"room_type\", size=\"price\",\n                  color_continuous_scale=cscale, height=760,size_max=20, zoom=10, title='Type of room distribution on the map.')\nfig.show(renderer='kaggle')","12f1c40c":"px.scatter(data[data['price']<700], x=\"reviews_per_month\", y='price', color='room_type', title='Popularity\/Price')\n#sns.scatterplot(x=\"reviews_per_month\", y='price', hue='room_type', data=data)","f7e7e08c":"sns.pairplot(data, y_vars=['price'], x_vars=['latitude', 'longitude', 'minimum_nights', 'number_of_reviews', 'reviews_per_month', 'calculated_host_listings_count', 'availability_365'], height=15, hue='neighbourhood_group')","39562a1e":"data['minimum_nights'].describe()","d63527c8":"print(f'Percentile 95 of minimum_nights: {np.percentile(data[\"minimum_nights\"], 95)}')\nprint(f'Mean of minimum_nights: {np.mean(data[\"minimum_nights\"])}')\nprint(f\"Mode of minimum_nights: {data[(data['minimum_nights'] <= 30) & (data['minimum_nights'] > 0)]['minimum_nights'].mode()[0]}\")","81a5b12f":"sns.distplot(data[(data['minimum_nights'] <= 30) & (data['minimum_nights'] > 0)]['minimum_nights'], bins=31)","6875f873":"d = data[data['minimum_nights'] < 30].groupby('minimum_nights')['price'].median()","d32112ed":"fig = plt.figure(figsize=(10,6))\nplt.xticks(np.arange(min(d.keys().tolist()), max(d.keys().tolist())+1, 1.0))\nplt.bar(d.keys().tolist(), d.tolist())\nplt.title('Mean price \/ minimum nights')\nplt.xlabel('Minimum nights')\nplt.ylabel('Price ($)')\nplt.grid(True)","e88e6868":"host_listings_count = data.groupby('host_id')['calculated_host_listings_count'].mean()","9c7b228a":"summary = host_listings_count.describe()\nsummary","8937aebc":"fig, ax = plt.subplots(1,2, figsize=(22,6))\nsns.distplot(host_listings_count[host_listings_count < 10], kde=False, hist=True, ax=ax[0])\nax[0].set_title(\"Number of postings\/user distribution (zoomed)\")\nsns.distplot(host_listings_count, kde=False, hist=True, ax=ax[1])\nax[1].set_title(\"Number of postings\/user distribution (total)\")\nfig.show()","4634f144":"user_outliers = host_listings_count[host_listings_count >= (summary['mean'] + 2*summary['std'])]\nuser_outliers","b3c3793f":"summary","b9f84543":"print(\"Users with most postings\")\nuser_outliers.sort_values().tail(10)","02eabd91":"data[data['host_id'] == 219517861].head(1)","aa35e169":"data[data['host_id'] == 107434423].head(1)","f9c704e6":"data[data['host_id'] == 30283594].head(1)","69bfbd96":"posting_outliers = data[data['host_id'].isin(user_outliers.index.tolist())]\nposting_normal = data[~data['host_id'].isin(user_outliers.index.tolist())]","4fff4f37":"palette ={\"Entire home\/apt\":\"C0\",\"Private room\":\"C1\",\"Shared room\":\"C2\"}\n\nfig, ax = plt.subplots(1,2, figsize=(26,10))\n\nsns.violinplot(x=\"price\", y=\"neighbourhood_group\", hue=\"room_type\", data=posting_outliers, ax=ax[0], \n               palette=palette, \n               order=['Brooklyn', 'Manhattan', 'Queens', 'Staten Island', 'Bronx'], \n               hue_order=['Entire home\/apt', 'Private room', 'Shared room'])\nax[0].set_title(\"Price distribution of each room type in each NYC zone (outliers\/professionals)\")\nax[0].set_xlim(0,250)\n\nsns.violinplot(x=\"price\", y=\"neighbourhood_group\", hue=\"room_type\", data=posting_normal[posting_normal['price'] <= 900], ax=ax[1], \n               palette=palette, \n               order=['Brooklyn', 'Manhattan', 'Queens', 'Staten Island', 'Bronx'], \n               hue_order=['Entire home\/apt', 'Private room', 'Shared room'])\nax[1].set_title(\"Price distribution of each room type in each NYC zone (amateurs)\")\nax[1].set_xlim(0,250)\n\nfig.show()","fd5b1a2f":"fig = go.Figure()\n\nfig.add_trace(go.Scattermapbox(\n        lat=posting_outliers.latitude,\n        lon=posting_outliers.longitude,\n        mode='markers',\n        marker=go.scattermapbox.Marker(\n            size=5,\n            color='rgb(121,181,237)',\n            opacity=0.7\n        ),name='Professional'\n    ))\n\nfig.add_trace(go.Scattermapbox(\n        lat=posting_normal.latitude,\n        lon=posting_normal.longitude,\n        mode='markers',\n        marker=go.scattermapbox.Marker(\n            size=4,\n            color='rgb(237,138,121)',\n            opacity=0.2\n        ), name='Amateur'\n    ))\n\nfig.update_layout(\n    title='Professional \/ Amateur postings',\n    autosize=True,\n    hovermode='closest',\n    showlegend=True,\n    height=900,\n    mapbox=go.layout.Mapbox(\n        accesstoken=mapbox_token,\n        bearing=0,\n        center=go.layout.mapbox.Center(\n            lat=40.74767,\n            lon=-73.97500\n        ),\n        pitch=0,\n        zoom=12,\n        style='light'\n    ),\n)\n\nfig.show(renderer='kaggle')","a280c45f":"fig = px.scatter_mapbox(posting_outliers[posting_outliers['host_id'].isin(user_outliers.sort_values(ascending=False).head(20).index.tolist())], \n                        lat=\"latitude\", lon=\"longitude\",  color=\"host_name\",\n                  color_continuous_scale=cscale, height=760, zoom=12, title='Listings of the top 20 users', range_color=(0,700))\nfig.show()","6ddcc008":"fig = px.scatter_mapbox(data[data['host_id'].isin(host_listings_count[host_listings_count == 2].head(20).index.tolist())], \n                        lat=\"latitude\", lon=\"longitude\",  color=\"host_name\",\n                  color_continuous_scale=cscale, height=760, zoom=12, title='20 users with 2 rooms posted', range_color=(0,700))\nfig.show()","147396fa":"def get_nearest_neighbours(point, coords, treshold=100):\n    \"\"\"Given a list of coordinates, return the ones which are near to point.\n    \n    Args\n    -------\n    point (Tuple): with Lat\/Long\n    coords (List[Tuple]): latitudes\/longitudes\n    treshold: number of meters to consider a certain coordinate near to 'point'\n    \n    Return\n    -----------\n    nearest: List[int] indices of points near to point. \n    \"\"\"\n    nearest = []\n    for idx, c in enumerate(coords):\n        if geodesic(point, c).meters <= treshold:\n            nearest.append(idx)\n    return nearest\n\ndef calculate_clusters(coordinates, subsample=0.5):\n    \"\"\" Given a list of coordinates (Lat\/Long), return a estimation of the distribution of the number of clusters\n    \n    Args\n    --------\n    coordinates (NP Array of tuples): List of coordinates to analyze\n    subsample (float): Percentage of number of points used for evaluation\n    \n    Return\n    ------------\n    ret: Tuple with mean and sd of the distribution\n    \"\"\"\n    #coordinates = np.array([tuple(x) for x in posting_outliers[posting_outliers['host_name']==name][['latitude', 'longitude']].values])\n    mask_test = np.random.choice(a=[False, True], size=coordinates.shape[0], p=[1-subsample, subsample])\n    \n    nb_neighs = []\n    for idx, p in enumerate(coordinates):\n        #p.delete(a, ind, axis=0)       \n        nb_neighs.append(len(get_nearest_neighbours(p, np.delete(coordinates,idx,axis=0))))\n    \n    return np.mean(nb_neighs), np.std(nb_neighs)","59038334":"#Testing the functions.\n# Get all the rooms of a particular user (which is in the top room holders)\np = np.array([tuple(x) for x in posting_outliers[posting_outliers['host_name']=='John'][['latitude', 'longitude']].values])\n#Get the mean number of points in the clusters and their standard dev\ncalculate_clusters(p)","c19f658e":"print(\"Number of rooms per cluster of users with less than postings (mean): \")\ntest_list = host_listings_count[host_listings_count <= 5].head(100).index.tolist()\nmetrics = []\nfor user_id in test_list:\n    p = np.array([tuple(x) for x in data[data['host_id']==user_id][['latitude', 'longitude']].values])\n    metrics.append(calculate_clusters(p))\nmetrics = pd.DataFrame(metrics, columns=['mean', 'sd'])\nmetrics.mean()","079d7dce":"print(\"Number of rooms per cluster of the top room holders: \")\ntest_list = user_outliers.sort_values(ascending=False).head(20).index.tolist()\nmetrics = []\nfor user_id in test_list:\n    p = np.array([tuple(x) for x in data[data['host_id']==user_id][['latitude', 'longitude']].values])\n    metrics.append(calculate_clusters(p))\nmetrics = pd.DataFrame(metrics, columns=['mean', 'sd'])\nmetrics.mean()","2f94c2aa":"#\u00a0Words that won't add anything apart from what we already know from the other data.\nUNWANTED_WORDS = set(['manhattan', 'queen', 'brooklyn', 'nyc'])","a0fb62df":"fig, ax = plt.subplots(figsize=(12,8))\n\ntext = functools.reduce(lambda a,b: a + \" \" + str(b), data.sample(frac=0.3)['name'])\ntext = ' '.join([w for w in nltk.word_tokenize(text) if w.lower() not in UNWANTED_WORDS])\n\nwc = wordcloud.WordCloud(max_font_size=40).generate(text)\nax.imshow(wc, interpolation='bilinear')\nax.set_title(\"Most used words the dataset\")\nplt.axis(\"off\")\nfig.show()","9c4d5716":"def get_top_terms(documents, ngram_range=(1,1), unwanted_words=set(), min_occurrences=1):\n    \"\"\" Get a list of the most common n-grams (sorted)\n    Params\n    ----------\n        documents: List of documents to analyze\n        ngram_range (tuple): Whether extracting up to n-grams\n        unwanted_words (set): Set of custom blacklist of words\n        min_occurrences (int): return only words with occurrences >= min_occurrences\n    Returns\n    ----------\n        List of tuples with (word, n_times).\n    \"\"\"\n    blacklist = set(stopwords.words('english')).union(unwanted_words)\n    vec = CountVectorizer(stop_words = blacklist, ngram_range=ngram_range)\n    sum_words = vec.fit_transform(documents).sum(axis=0)\n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq = sorted(words_freq, key = lambda x: x[1], reverse=True)\n    \n    if min_occurrences > 1:\n        words_freq = list(filter(lambda x: x[1] >= min_occurrences, words_freq))\n    return words_freq","31331e40":"top_ngrams = get_top_terms(data.sort_values('reviews_per_month', ascending=False)['name'].iloc[:200], ngram_range=(1,2), unwanted_words=UNWANTED_WORDS, min_occurrences=10)\nfig, ax= plt.subplots(5,1,figsize=(25,38))\nsns.barplot([x[0] for x in top_ngrams], [x[1] for x in top_ngrams], ax=ax[0],  palette=(\"Blues_d\"))\nax[0].set_xticklabels(ax[0].get_xticklabels(), rotation=40, ha=\"right\")\nax[0].set_title('Most common n-grams of the top 200 popular rooms')\n\n\ntop_ngrams = get_top_terms(data.sort_values('price', ascending=False)['name'].iloc[:200], ngram_range=(1,2), unwanted_words=UNWANTED_WORDS, min_occurrences=10)\nsns.barplot([x[0] for x in top_ngrams], [x[1] for x in top_ngrams], ax=ax[1],  palette=(\"Blues_d\"))\nax[1].set_xticklabels(ax[1].get_xticklabels(), rotation=40, ha=\"right\")\nax[1].set_title('Most common n-grams of the top 200 expensive rooms')\n\n\ntop_ngrams = get_top_terms(data.sort_values('price', ascending=True)['name'].iloc[:200], ngram_range=(1,2), unwanted_words=UNWANTED_WORDS, min_occurrences=10)\nsns.barplot([x[0] for x in top_ngrams], [x[1] for x in top_ngrams], ax=ax[2],  palette=(\"Blues_d\"))\nax[2].set_xticklabels(ax[2].get_xticklabels(), rotation=40, ha=\"right\")\nax[2].set_title('Most common n-grams of the 200 cheapest rooms')\n\n\ntop_ngrams = get_top_terms(data[data['calculated_host_listings_count']>50]['name'].iloc[:200], ngram_range=(1,2), unwanted_words=UNWANTED_WORDS, min_occurrences=10)\nsns.barplot([x[0] for x in top_ngrams], [x[1] for x in top_ngrams], ax=ax[3],  palette=(\"Blues_d\"))\nax[3].set_xticklabels(ax[3].get_xticklabels(), rotation=40, ha=\"right\")\nax[3].set_title('Most common n-grams of the top 200 professional rooms')\n\n\ntop_ngrams = get_top_terms(data[data['calculated_host_listings_count']<4]['name'].iloc[:200], ngram_range=(1,2), unwanted_words=UNWANTED_WORDS, min_occurrences=10)\nsns.barplot([x[0] for x in top_ngrams], [x[1] for x in top_ngrams], ax=ax[4],  palette=(\"Blues_d\"))\nax[4].set_xticklabels(ax[4].get_xticklabels(), rotation=40, ha=\"right\")\nax[4].set_title('Most common n-grams of the top 200 amateur rooms')\n\n\nfig.show()","11f50172":"## 3. Room descriptions\n\nIn this section we try to use light textual analysis to extract even more insights...","6c3b39ea":"## 1. Prices\n\nIn this section several analysis regarding prices amd the insights we can extract from them.","b27b2bc1":"We also can study the prices depending the room type.","290fba4f":"We can show the same on a more \"visual\" way.\n> Note: Sometimes plotly plots bug so you have to zoom out the map and zoom in manually to see it.","fad82a7d":"## 2. Postings\n\nIn this section the postings themselves are studied to infer information about the users who post rooms. ","a90d445c":">Not all of the host rooms are present in the dataset (from the plot above we see that Blueground has significantly less points than 232). Kara and Sonder, for example, tend to be clustered nonetheless.","27a3e3b7":"It seems that  the behaviour of having the rooms near it's the same with the 'amateur' users.","a71dec02":"# Airbnb New York City Data Analysis\n![](https:\/\/techcrunch.com\/wp-content\/uploads\/2017\/06\/gettyimages-494545485.jpg?w=940&crop=1)\n\nHello there!\n\nThis is my attempt to make some data analysis of the NYC Airbnb dataset. Here I will explore the data with the aim of extracting some insights which can help to train better models for different tasks (price prediction, analytics, etc). I will make another notebook doing that stuff. \n\nIn the mean time, I hope this kernel give you some ideas for your analysis or your models.\n\n## Index\n**1. Prices analysis**\n\n**2. Postings analysis**\n\n**3. Room title analysis**\n\n**4. Conclussions and  Summary \/ Recap **\n","7271512c":"A quick Google search of the user names tells us that our hypotesis is correct for the higher ones: [Sonder](https:\/\/www.sonder.com\/) and [Blueground](https:\/\/www.theblueground.com\/apartments-in-new-york). The others (from the third onwards) in the ranking seem to be registered as \"individual\" users, although their amount of postings point that they have a business renting rooms.\n\nLet's take a look at the \"professional postings\" to see if they differ from the \"amateur\" ones.","a26c911e":"We plot with other color range as the price distribution points that most of the prices are less than \\$700. This way we can see more clearly the price distribution on the map.","2b583891":"From the previous plots we can see that **the most expensive rooms tend to be located in the Manhattan zone.** ","ffc7be05":"The professional postings tend to be clustered. Maybe because professionals adquire (or rent) special apartments (in bulk) for their businesses?","4e666c9a":"First. What is the global price distribution?","09280477":"Let's make some functions to get more tangible metrics than looking at a map. \n\nWe want a metric that tells us the closeness of points. Ideally, we want a high number if there are high number of points (rooms) near in the space. Thus, we should, for every point $p$, get all the others which are whithin a range $d$, denoted as $S$. With that, we could calculate the mean of all the near points for every point $p$. $\\frac{1}{|P|}\\sum_{p\\in P}{|S_p|} $. That mean is the mean number of rooms in a cluster. If the number is low, that could mean two things:\n\n1. The user has few rooms\n2. The rooms of the user are distant\n\n> **Note:** This method is not efficient. In the future, in order to scale it, should make the comparisons using a polar coordinate system. The complexity would be reduced from O(n^3) to O(n).","ca318b4e":"### Section conclusions\nWe can see several things:\n1. Entire apartments are the most expensive ones (oviously) \n2. Shared rooms tend to be more in the city centre. \n3. The price distributions of each room type in the 5 different NY zones look similar, the most notable difference is on their means.\n4. The price distributions of the room types point that, in general, shared and private rooms have similar prices (less deviation). On the other hand, entire apartaments have more variability (and are more expensive, obviously). We don't have data about the properties, but we can gess that other variables like square ft. or being near a metro station affect the price.\n5. When looking at the Popularity\/Price plot, we can see that rooms with more reviews tend to be cheaper (although the Entire appartment class is more noisy than the others). This can be explained as: the more expensive is an apartment, the less people stays there and therefore, the less reviews. **This would be interesting to use in a model to predict prices or the popularity of a room.**\n6. It's generally cheaper to stay in rooms between 14 and 28 nights.\n7. Usually, the minimum required nights to stay in a room is arround 2.","76c74dbd":"Let's get top n-grams of several categories.","62ce3181":"Let's take a look at the spatial distribution of prices (Which are the most expensive zones?).","214192cc":"### Section conclussions\n\n1. There are two type of hosts: professional and amateurs. \n2. The more rooms a user has, the more they tend to have clustered properties, maybe because they buy or rent the apartments\/rooms in bulk.\n3. The professional users post rooms with slighly higher price than the amateur ones.\n4. The professional users tend to prefer centric zones.","4f765968":"Let's also plot the trend of the price in function or the other variables (to see it better Right Click > Open image in new tab).","d58d2bad":"It seems that professionals prefer centric\/touristic zones (most profitable, I suppose). Let's represent this preference in a more visual way.","c3d527cd":"# Summary\n\nThe NYC Airbnb dataset it's a contains a very well curated list of room postings from the New York city. Although it would be nice to have few more features about the rooms, users, comments, etc., I think a great number of task can be acomplished even with the limited number of entries in the dataset, at least, we all can learn something new about the vacation room rental in NYC.\n\nThis analysis is light in terms of the things tested as I really hadn't any particular goal to accomplish (curiosity driven :)).\n\nI've structured this analysis in three main areas (maybe more focused on a business analytics part): Prices, Postings(users) and a light textual analysis of the room titles.\n\n### What have we found?\n\nWe have tested several hypotesis against the data, and the conclussions obtained are listed at the end of each section, however, here are the most interesting ones (IMO).\n\n\n1. NYC shared rooms tend to be grouped in the city centre, maybe becuse there are thought for travelers who want to visit the most iconic city places.\n2. Relating the price\/popularity variables suggest that people who travel and use Airbnb tend to prefer the posts which are cheaper \n3. There are two types of user posting rooms: Professionals, which are outliers, each one holding a high number of rooms; and Amateurs, who usually have only a few. Although amateurs can be making money as a business to, their volume is clearly inferior to the professional ones.\n4. The professional posts are located in the city centre.\n5. The way rooms are announced is different between professionals and amateurs. The first use more objective terms to describe the room whereas the second use more subjective.\n6. Having a room \"near to\" things affect to popularity (maybe it's a good idea to include this words in the title of the room).","90e75d0e":"###\u00a0Section conclussions\n\nWe can see differences when analyzing the word distribution of the rooms:\n\n1. The words of the most expensive rooms reinforce our previous hypotesis (the zone in which the room is located affect the price) as the most used words include central\/central park\/townhouse.\n2. The most popular rooms are the ones which are near to airports or 'minutes from' places. This would way that if we had an accessible room (near transportation), its chances to be popular would be increased.\n3. The amateur rooms tend to be sold in other ways in comparison to the professional ones. They tend to be posted with concepts as \"cozy\", \"spatious\", \"great\" (comfort) whereas the professional ones are sold in a more objective way (not using valorations).\n4. The cheapest rooms also sell subjective terms. We can also suppose a certain overlap between amateur and cheap ones (from the distributions avobe, the amateur ones tend to be cheaper).","cf47efd9":"Also, how the prices vary with the number of nights?","e9fcbf01":"## Fix \"bad\" data","b7353a4a":"The distribution plot says us that most users have arround one listing on the platform, however, it strikes me that there are some outliers that have $>300$. Maybe they are professional users\/agencies. Let's take a look.\nWe can define the outliers as the ones who have $p$ postings as $p >= \\mu + 2\\sigma$ ","86a14abe":"Now, we can also study the prices depending on the popularity of the property. (Defined as the `reviews_per_month` variable, the most reviews\/month, the better).","0214af0e":"We can see that are a high number of rooms with ``minimum_nights``=0 and some of them excesivelly high (1200). [As explained by Dgomonov](https:\/\/www.kaggle.com\/dgomonov\/new-york-city-airbnb-open-data\/discussion\/111835#648180), this can be due to, at the time the data was gathered, the rooms were not available, or bad data. However, analyzing the distribution, we see that the normal value is arround 2 and the highest ones tend to be arround 30 nights."}}