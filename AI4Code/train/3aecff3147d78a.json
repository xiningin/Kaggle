{"cell_type":{"832a9ab9":"code","94876e73":"code","931ba9ee":"code","a430bafc":"code","865cbb2e":"code","512ae6fb":"code","d43010a2":"code","9a20e368":"code","552d94f5":"code","2b8cfb1c":"code","4b2c23c9":"code","4ab60ce6":"code","c8170088":"code","cca481e2":"code","1afa5010":"code","8d79184c":"code","483513f5":"markdown","3eb0fa64":"markdown","655f3091":"markdown","c3ed2231":"markdown","af35ce58":"markdown","416a8654":"markdown","37f5a08e":"markdown","c88408d2":"markdown","34bad7b7":"markdown","fc6273f4":"markdown","557a0231":"markdown","6bf45922":"markdown","848ba7d5":"markdown","16338d87":"markdown","d532edb8":"markdown","5b681065":"markdown"},"source":{"832a9ab9":"!pip install DiCE\n!pip install dice-ml","94876e73":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import rcParams\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\nfrom sklearn.datasets import load_breast_cancer\nimport dice\nimport dice_ml\nfrom dice_ml.utils import helpers\nimport tensorflow as tf\nfrom tensorflow import keras\ntf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)\n%ls","931ba9ee":"data = load_breast_cancer()\ndf = pd.DataFrame(data.data, columns=data['feature_names'])","a430bafc":"X = data.data\ny = data.target","865cbb2e":"df.head()","512ae6fb":"df['result'] = y","d43010a2":"df.head()","9a20e368":"benign = 0\nmalignant = 0\nfor i in y:\n  if i==0:\n    benign+=1\n  else:\n    malignant+=1","552d94f5":"import matplotlib.pyplot as plt\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nbarx = ['Benign', 'Malignant']\nbary = [benign, malignant]\nax.bar(barx, bary)\nplt.show()","2b8cfb1c":"sess = tf.compat.v1.InteractiveSession()\nd = dice_ml.Data(dataframe=df, continuous_features=['mean radius', 'mean texture', 'mean perimeter', 'mean area',\n       'mean smoothness', 'mean compactness', 'mean concavity',\n       'mean concave points', 'mean symmetry', 'mean fractal dimension',\n       'radius error', 'texture error', 'perimeter error', 'area error',\n       'smoothness error', 'compactness error', 'concavity error',\n       'concave points error', 'symmetry error',\n       'fractal dimension error', 'worst radius', 'worst texture',\n       'worst perimeter', 'worst area', 'worst smoothness',\n       'worst compactness', 'worst concavity', 'worst concave points',\n       'worst symmetry', 'worst fractal dimension'], outcome_name='result')","4b2c23c9":"train, _ = d.split_data(d.normalize_data(d.one_hot_encoded_data))\nX_train = train.loc[:, train.columns != 'result']\ny_train = train.loc[:, train.columns == 'result']","4ab60ce6":"ann_model = keras.Sequential()\nann_model.add(keras.layers.Dense(20, input_shape=(X_train.shape[1],), \n                                 kernel_regularizer=keras.regularizers.l1(0.001), \n                                 activation=tf.nn.relu))\nann_model.add(keras.layers.Dense(1, activation=tf.nn.sigmoid))\n\nann_model.compile(loss='binary_crossentropy', \n                  optimizer=tf.keras.optimizers.Adam(0.01), \n                  metrics=['accuracy'])\nann_model.fit(X_train, y_train, validation_split=0.20, epochs=100, verbose=0, class_weight={0:1,1:2})","c8170088":"backend = 'TF'+tf.__version__[0]\nm = dice_ml.Model(model=ann_model, backend=backend)","cca481e2":"exp = dice_ml.Dice(d, m)","1afa5010":"query_instance = {\n    'mean radius' : 7.760000, 'mean texture' : 24.540001, 'mean perimeter' : 47.919998, 'mean area' : 181.000000,\n       'mean smoothness' : 0.05263, 'mean compactness' : 0.04362, 'mean concavity' : 0.00000,\n       'mean concave points' : 0.00000, 'mean symmetry' : 0.1587, 'mean fractal dimension' : 0.05884,\n       'radius error' : 0.3857, 'texture error' : 1.428, 'perimeter error' : 2.548, 'area error' : 19.150000,\n       'smoothness error' : 0.007189, 'compactness error' : 0.00466, 'concavity error' : 0.00000,\n       'concave points error' : 0.00000, 'symmetry error' : 0.02676,\n       'fractal dimension error' : 0.002783, 'worst radius' : 9.456000, 'worst texture' : 30.370001,\n       'worst perimeter' : 59.160000, 'worst area' : 268.600006, 'worst smoothness' : 0.08996,\n       'worst compactness' : 0.06444, 'worst concavity' : 0.0000, 'worst concave points' : 0.0000,\n       'worst symmetry' : 0.2871, 'worst fractal dimension' : 0.07039\n}","8d79184c":"# Generating counterfactual examples\ndice_exp = exp.generate_counterfactuals(query_instance,  # The data from the 1st row of our dataframe \n                                        total_CFs=4,  # Total number of Counterfactual Examples we want to print out. There can be multiple.\n                                        desired_class=\"opposite\"  # We want to convert the quality to the opposite one.\n                                        )\n# Visualizing counterfactual explanation\ndice_exp.visualize_as_dataframe()","483513f5":"Forming the training data for the nerual network : ","3eb0fa64":"Now that we have imported the file, checking to see if it is working properly :","655f3091":"Now, generating the conterfactuals and visualising them as a dataframe : ","c3ed2231":"Adding the result column to our dataframe : \n(Here, the result column will have the kind of cancer according to the feature values. ie. 0 - benign cancer, 1 - malignant cancer)","af35ce58":"Initiating DiCE :","416a8654":"Now, making a query instance from our last row to generate conterfactuals upon. We can use any row from our table, but we have used the last row as an example Here, according to the feature values, the cancer is malignant, which means that it might be fatal and we generate the counterfactuals for getting the opposite (benign cancer) :","37f5a08e":"From this, we can see that the number of malignant cancers in our data is more than the number of benign cancers in our data.","c88408d2":"Importing the necessary dependancies : ","34bad7b7":"A counterfactual explanation of a prediction describes the smallest change to the feature values that changes the prediction to a predefined output. In the following code, we have shown the counterfactual examples on the breast cancer dataset, showing the smallest change to feature values required to change benign cancer to malignant cancer and malignant cancer to benign cancer.","fc6273f4":"Creating a Machine Learning Model for DiCE : ","557a0231":"Visualising the number of malignant and benign cancers using Bar Graph :","6bf45922":"Making the Dataset for the Machine Learning Model we are going to make : ","848ba7d5":"# Conterfactual Examples :","16338d87":"The first row depicts the original feature values, which gave the result of a malignant cancer. The next four rows show the counterfactuals generated which show what feature values should be changed to convert it from a malignant cancer to a benign cancer. We can have several such counterfactuals, which change different features in different proportions.","d532edb8":"Importing breast cancer dataset, from which we will generate the counterfactual examples : ","5b681065":"Installing the necessary libraries : "}}