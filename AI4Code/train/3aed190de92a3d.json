{"cell_type":{"a8b88a9b":"code","53d2fa89":"code","b1c7cdce":"code","e30f4b5e":"code","766b1848":"code","b27c39c6":"code","de919639":"code","448746c2":"code","d525d8b4":"code","a36ba817":"code","dc3c6db4":"code","d8fc051f":"code","5e3723f3":"code","b44c7be6":"code","f250c400":"code","4f13228f":"code","19171542":"code","a1f127f2":"code","02e02cd0":"code","28de7995":"code","d607b108":"code","a33b2db7":"code","c5075433":"code","fcd3d005":"code","dc275dde":"code","e1da36b9":"code","3ccce586":"code","140f58af":"code","ee63f1de":"code","8c680d45":"code","861fc95a":"code","a3b6476c":"code","70598aa4":"code","40e33b67":"code","dc392c9c":"code","83350e90":"code","79326dd6":"code","405745db":"code","b0d15ceb":"code","9bf655c2":"code","1286911c":"code","42d1cdb8":"code","8263288a":"code","51a45b91":"code","6bdfd350":"code","0ea37770":"code","5fbfde61":"code","5986820a":"code","694dbe69":"code","689fb08b":"code","017eb038":"code","75712e44":"code","d00e0a81":"code","2edbc831":"code","bf1c543b":"code","64c56fd8":"code","fa9b7feb":"code","428fb1a6":"code","e8f90b20":"code","543a751e":"code","2869b733":"code","383fed73":"code","8e3c6dad":"markdown","27129df6":"markdown","be494471":"markdown","49569da2":"markdown","77e776c1":"markdown","41a9f342":"markdown","570a6712":"markdown","28eca718":"markdown"},"source":{"a8b88a9b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\npd.set_option('display.max_columns',None)\n","53d2fa89":"df_train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\n","b1c7cdce":"df_train.head()","e30f4b5e":"df_test.head()","766b1848":"df_train.shape","b27c39c6":"df_test.shape","de919639":"df_train.columns","448746c2":"df_test.columns","d525d8b4":"df_train.info()","a36ba817":"df_train.isnull().sum()","dc3c6db4":"df_train.corr()","d8fc051f":"corr = df_train.corr()\nsns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 2.5})\nplt.figure(figsize=(36,18))\na = sns.heatmap(corr, annot=True, fmt='.2f')\nrotx = a.set_xticklabels(a.get_xticklabels(), rotation=90)\nroty = a.set_yticklabels(a.get_yticklabels(), rotation=30)","5e3723f3":"df_train.describe().T ","b44c7be6":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False)","f250c400":"df_train.isnull().sum()","4f13228f":"df_train.info()","19171542":"df_train[\"LotFrontage\"] = df_train[\"LotFrontage\"].fillna(df_train[\"LotFrontage\"].mean())\ndf_train.drop([\"Alley\"],axis=1,inplace=True) #Aa alley has more than 3\/4 values are null values.so we drop the column","a1f127f2":"df_train['MasVnrType']=df_train['MasVnrType'].fillna(df_train['MasVnrType'].mode()[0])\ndf_train['MasVnrArea']=df_train['MasVnrArea'].fillna(df_train['MasVnrArea'].mode()[0])\ndf_train['BsmtCond']=df_train['BsmtCond'].fillna(df_train['BsmtCond'].mode()[0])\ndf_train['BsmtQual']=df_train['BsmtQual'].fillna(df_train['BsmtQual'].mode()[0])\ndf_train['FireplaceQu']=df_train['FireplaceQu'].fillna(df_train['FireplaceQu'].mode()[0])\ndf_train['GarageType']=df_train['GarageType'].fillna(df_train['GarageType'].mode()[0])\ndf_train['GarageFinish']=df_train['GarageFinish'].fillna(df_train['GarageFinish'].mode()[0])\ndf_train['GarageQual']=df_train['GarageQual'].fillna(df_train['GarageQual'].mode()[0])\ndf_train['GarageCond']=df_train['GarageCond'].fillna(df_train['GarageCond'].mode()[0])\ndf_train['Electrical']=df_train['Electrical'].fillna(df_train['Electrical'].mode()[0])","02e02cd0":"df_train.drop(['GarageYrBlt'],axis=1,inplace=True)\ndf_train.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\n#I'm droping these columns because they contain more null values","28de7995":"df_train.shape","d607b108":"df_train.drop([\"Id\"],axis=1,inplace=True)\n#As id did'nt affect our target variable i'm going to delete it","a33b2db7":"df_train.isnull().sum()","c5075433":"df_train['BsmtExposure']=df_train['BsmtExposure'].fillna(df_train['BsmtExposure'].mode()[0])\ndf_train['BsmtFinType2']=df_train['BsmtFinType2'].fillna(df_train['BsmtFinType2'].mode()[0])","fcd3d005":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='YlGnBu')","dc275dde":"df_train.isnull().sum()","e1da36b9":"df_train.dropna(inplace=True)\ndf_train.shape","3ccce586":"#Categorical features handling\ncat_feature = [feature for feature in df_train.columns if df_train[feature].dtype==\"O\"]\nlen(cat_feature)","140f58af":"def category_onehot_multcols(multcolumns):\n    df_final=final_df\n    i=0\n    for fields in multcolumns:\n        \n        print(fields)\n        df1=pd.get_dummies(final_df[fields],drop_first=True)\n        \n        final_df.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([final_df,df_final],axis=1)\n        \n    return df_final","ee63f1de":"main_df = df_train.copy()","8c680d45":"main_df.head()","861fc95a":"df_test.head()","a3b6476c":"sol = df_test[\"Id\"]\ndf_test.shape","70598aa4":"test_num = [feature for feature in df_test.columns if df_test[feature].isnull().sum()>1]\ntest_num","40e33b67":"df_test['MSZoning']=df_test['MSZoning'].fillna(df_test['MSZoning'].mode()[0])\ndf_test['LotFrontage']=df_test['LotFrontage'].fillna(df_test['LotFrontage'].mean())","dc392c9c":"df_test.drop(['Alley'],axis=1,inplace=True)\ndf_test.drop(['GarageYrBlt'],axis=1,inplace=True)\ndf_test.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\ndf_test.drop(['Id'],axis=1,inplace=True)\n#Dropping columns not present in train data","83350e90":"df_test['Utilities']=df_test['Utilities'].fillna(df_test['Utilities'].mode()[0])\ndf_test['MasVnrType']=df_test['MasVnrType'].fillna(df_test['MasVnrType'].mode()[0])\ndf_test['MasVnrArea']=df_test['MasVnrArea'].fillna(df_test['MasVnrArea'].mode()[0])\ndf_test['BsmtCond']=df_test['BsmtCond'].fillna(df_test['BsmtCond'].mode()[0])\ndf_test['BsmtQual']=df_test['BsmtQual'].fillna(df_test['BsmtQual'].mode()[0])\ndf_test['BsmtExposure']=df_test['BsmtExposure'].fillna(df_test['BsmtExposure'].mode()[0])\ndf_test['BsmtFinType1']=df_test['BsmtFinType1'].fillna(df_test['BsmtFinType1'].mode()[0])\ndf_test['BsmtFinType2']=df_test['BsmtFinType2'].fillna(df_test['BsmtFinType2'].mode()[0])\ndf_test['BsmtFullBath']=df_test['BsmtFullBath'].fillna(df_test['BsmtFullBath'].mode()[0])\ndf_test['BsmtHalfBath']=df_test['BsmtHalfBath'].fillna(df_test['BsmtHalfBath'].mode()[0])\ndf_test['Functional']=df_test['Functional'].fillna(df_test['Functional'].mode()[0])\ndf_test['FireplaceQu']=df_test['FireplaceQu'].fillna(df_test['FireplaceQu'].mode()[0])\ndf_test['GarageType']=df_test['GarageType'].fillna(df_test['GarageType'].mode()[0])\ndf_test['GarageFinish']=df_test['GarageFinish'].fillna(df_test['GarageFinish'].mode()[0])\ndf_test['GarageQual']=df_test['GarageQual'].fillna(df_test['GarageQual'].mode()[0])\ndf_test['GarageCond']=df_test['GarageCond'].fillna(df_test['GarageCond'].mode()[0])\n","79326dd6":"df_test.shape","405745db":"df_test.loc[:, df_test.isnull().any()].head()","b0d15ceb":"df_test['Exterior1st']=df_test['Exterior1st'].fillna(df_test['Exterior1st'].mode()[0])\ndf_test['Exterior2nd']=df_test['Exterior2nd'].fillna(df_test['Exterior2nd'].mode()[0])\ndf_test['BsmtFinSF1']=df_test['BsmtFinSF1'].fillna(df_test['BsmtFinSF1'].mean())\ndf_test['BsmtFinSF2']=df_test['BsmtFinSF2'].fillna(df_test['BsmtFinSF2'].mean())\ndf_test['BsmtUnfSF']=df_test['BsmtUnfSF'].fillna(df_test['BsmtUnfSF'].mean())\ndf_test['TotalBsmtSF']=df_test['TotalBsmtSF'].fillna(df_test['TotalBsmtSF'].mean())\ndf_test['KitchenQual']=df_test['KitchenQual'].fillna(df_test['KitchenQual'].mode()[0])\ndf_test['GarageCars']=df_test['GarageCars'].fillna(df_test['GarageCars'].mean())\ndf_test['GarageArea']=df_test['GarageArea'].fillna(df_test['GarageArea'].mean())\ndf_test['SaleType']=df_test['SaleType'].fillna(df_test['SaleType'].mode()[0])\n","9bf655c2":"df_test.isnull().sum().any()","1286911c":"df_test.shape","42d1cdb8":"df_train.shape","8263288a":"final_df = pd.concat([df_train,df_test],axis=0)","51a45b91":"final_df.shape","6bdfd350":"final_df = category_onehot_multcols(cat_feature)","0ea37770":"final_df.shape #After one hot encoding categorical data","5fbfde61":"final_df =final_df.loc[:,~final_df.columns.duplicated()]","5986820a":"final_df.shape","694dbe69":"train_df = final_df.iloc[:1422,:]\ntest_df = final_df.iloc[1422:,:]","689fb08b":"test_df.head()","017eb038":"train_df.head()","75712e44":"test_df.drop([\"SalePrice\"],axis=1,inplace=True)","d00e0a81":"train_df[\"SalePrice\"]","2edbc831":"X_train=train_df.drop(['SalePrice'],axis=1)\ny_train=train_df['SalePrice']","bf1c543b":"from sklearn.preprocessing import StandardScaler\nscalar = StandardScaler()\nX_train = scalar.fit_transform(X_train)\ntest_df = scalar.transform(test_df)","64c56fd8":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(X_train,y_train)","fa9b7feb":"y_tr=lr.predict(X_train)","428fb1a6":"lr.coef_","e8f90b20":"lr.intercept_","543a751e":"y_pred = lr.predict(test_df)","2869b733":"lst = sol\n  \n# list of int\nlst2 = list(y_pred)\n  \n# Calling DataFrame constructor after zipping\n# both lists, with columns specified\ndf = pd.DataFrame(list(zip(lst, lst2)),\n               columns =['id', 'SalePrice'])","383fed73":"df.to_csv('result.csv',index=False)","8e3c6dad":"##### Here i'm filling null values with mean and mode for numerical columns and categorical columns respectively","27129df6":"## Finding predictions for Test data and make .csv file","be494471":"### Concatinating train and test data to do one hot encoding for categorical data","49569da2":"## Multiple Linear Regression","77e776c1":"### Loading data sets","41a9f342":"## Handling Test Data","570a6712":"### importing libraries","28eca718":"#### Handling missing values"}}