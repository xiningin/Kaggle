{"cell_type":{"6f06fd31":"code","37108ba8":"code","62d5840b":"code","f8181edb":"code","c86f5885":"code","9edbb0af":"code","faa7972b":"code","212b4599":"code","00129c3e":"code","20a08cff":"code","2ec0bbd9":"code","4e09e9e3":"code","156b9dfe":"code","b8923d69":"code","32b64a18":"code","f4c463c8":"code","cf202eec":"code","68ed4166":"code","ed45ed8c":"code","ecf49aa4":"code","9359b821":"code","25edf3fb":"code","82c534bf":"code","0558b7d2":"markdown","2be07492":"markdown","8d641923":"markdown","513ea297":"markdown","2542ebf5":"markdown","543fb545":"markdown","9ab341fd":"markdown"},"source":{"6f06fd31":"import pandas as pd\nimport numpy as np\nimport os\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split, StratifiedKFold, KFold,GroupKFold\nfrom sklearn.metrics import f1_score\nimport lightgbm as lgb\n# from lightgbm import LGBMClassifier as lgb\n\n# import optuna.integration.lightgbm as lgb\n\n# from imblearn.over_sampling import SMOTE\nSEED = 1996","37108ba8":"train = pd.read_csv('\/kaggle\/input\/finance\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/finance\/test.csv')\nsub = pd.read_csv('\/kaggle\/input\/finance\/sample.csv')\nnew_train = pd.read_csv('..\/input\/newdata\/new_train_over998.csv')","62d5840b":"###### TRAIN #########\nmask2 = (train['base_ym'] == 201911)\ntrain=train[mask2]\ntrain.reset_index(inplace = True)","f8181edb":"train0 = new_train[new_train['target']==0]\ntrain1 = new_train[new_train['target']==1]\ntrain2 = new_train[new_train['target']==2]\ntrain1 = train1.sample(n = 2000,random_state = 1)\ntrain0 = train0.sample(n = 2111,random_state = 1)\ntrain2 = train2.sample(n = 2500,random_state = 1)\nnew_train = pd.concat([train0, train1,train2])\nnew_train.reset_index(inplace = True, drop = True)","c86f5885":"train_test = train[train['base_ym'] != 201911]\ntrain_test.reset_index(inplace = True, drop = True)\n\ntrain_test = train_test[train_test['base_ym'] != 201912]\ntrain_test.reset_index(inplace = True, drop = True)","9edbb0af":"all_df = pd.concat([train, test])\nall_df.reset_index(inplace = True, drop = True)","faa7972b":"train.shape, test.shape, all_df.shape","212b4599":"model_var = ['nur_hosp_yn', 'ac_ctr_diff', \n        'fds_cust_yn',\n       'hspz_dys_s', 'inamt_nvcd', \n        'dsas_avg_diag_bilg_isamt_s', 'dsas_acd_rst_dcd', 'dsas_ltwt_gcd',\n          'optt_blcnt_s', 'base_ym',\n       'mtad_cntr_yn', 'heltp_pf_ntyn', 'prm_nvcd', 'surop_blcnt_s',\n       'mdct_inu_rclss_dcd', 'dsas_avg_optt_bilg_isamt_s', 'isrd_age_dcd',\n       'hspz_blcnt_s', 'dsas_avg_surop_bilg_isamt_s', 'urlb_fc_yn',\n       'dsas_avg_hspz_bilg_isamt_s', 'smrtg_5y_passed_yn', 'ac_rst_diff',\n       'bilg_isamt_s', 'optt_nbtm_s'] + ['kcd_gcd', 'blrs_cd', 'ar_rclss_cd'] + ['hsp_avg_optt_bilg_isamt_s',\\\n                                                                                 'hsp_avg_diag_bilg_isamt_s', 'hsp_avg_surop_bilg_isamt_s', 'hsp_avg_hspz_bilg_isamt_s']\n\n","00129c3e":"all_df['ac_dsas'] = (all_df['ac_ctr_diff'])*(all_df['dsas_ltwt_gcd'])\nmodel_var = model_var + ['ac_dsas']","20a08cff":"all_df.loc[all_df['ac_ctr_diff'] == 0, 'ac_ctr_diff'] = np.nan\nall_df.loc[all_df['ac_rst_diff'] == 0, 'ac_ctr_diff'] = np.nan\nall_df.loc[all_df['ac_dsas'] == 0, 'ac_ctr_diff'] = np.nan","2ec0bbd9":"log_var = ['bilg_isamt_s', 'hspz_dys_s'] #, 'optt_nbtm_s']\n\nfor col in log_var:\n    all_df[col] = np.log1p(all_df[col])","4e09e9e3":"from sklearn import preprocessing\nall_df['Change_DSAS'] = all_df['kcd_gcd'].apply(str) + '_' + all_df['dsas_acd_rst_dcd'].apply(str)\n\nle = preprocessing.LabelEncoder()\nle.fit(all_df['Change_DSAS'])\nall_df['Change_DSAS'] = le.transform(all_df['Change_DSAS'])\nmodel_var = model_var + ['Change_DSAS']","156b9dfe":"all_df.loc[all_df['prm_nvcd'] == 99, 'prm_nvcd'] = np.nan\nall_df.loc[all_df['inamt_nvcd'] == 99, 'inamt_nvcd'] = np.nan\n\nall_df['PRM*inamt'] = np.log1p(all_df['prm_nvcd'] * all_df['inamt_nvcd'])\n\nmodel_var = model_var + ['PRM*inamt']","b8923d69":"\ndct = all_df.groupby(['dsas_ltwt_gcd', 'ac_ctr_diff'])['dsas_avg_surop_bilg_isamt_s'].mean().to_dict()\nall_df['NEW_dsas_avg_surop_bilg_isamt_s'] = all_df.set_index(['dsas_ltwt_gcd', 'ac_ctr_diff']).index.map(dct.get)\nall_df['DIFF_dsas_avg_surop_bilg_isamt_s'] = all_df['dsas_avg_surop_bilg_isamt_s']-all_df['NEW_dsas_avg_surop_bilg_isamt_s']\nmodel_var = model_var + ['DIFF_dsas_avg_surop_bilg_isamt_s', 'NEW_dsas_avg_surop_bilg_isamt_s']\n\n########################################################################################################################\ndct2 = all_df.groupby(['dsas_ltwt_gcd', 'ac_ctr_diff'])['dsas_avg_surop_bilg_isamt_s'].std().to_dict()\nall_df['NEW_STD_dsas_avg_surop_bilg_isamt_s'] = all_df.set_index(['dsas_ltwt_gcd', 'ac_ctr_diff']).index.map(dct2.get)\n\n\nmodel_var = model_var + ['NEW_STD_dsas_avg_surop_bilg_isamt_s']","32b64a18":"dct = all_df.groupby(['dsas_ltwt_gcd', 'ac_ctr_diff'])['dsas_avg_hspz_bilg_isamt_s', 'dsas_avg_optt_bilg_isamt_s', 'dsas_avg_surop_bilg_isamt_s', 'dsas_avg_diag_bilg_isamt_s'].mean().std(axis = 1)\nall_df['dsas_STD'] = all_df.set_index(['dsas_ltwt_gcd', 'ac_ctr_diff']).index.map(dct.get)\n\ndct2 = all_df.groupby(['dsas_ltwt_gcd', 'ac_ctr_diff'])['dsas_avg_hspz_bilg_isamt_s', 'dsas_avg_optt_bilg_isamt_s', 'dsas_avg_surop_bilg_isamt_s', 'dsas_avg_diag_bilg_isamt_s'].mean().sum(axis = 1)\nall_df['dsas_SUM'] = all_df.set_index(['dsas_ltwt_gcd', 'ac_ctr_diff']).index.map(dct2.get)\n\ndct3 = all_df.groupby(['dsas_ltwt_gcd', 'ac_ctr_diff'])['dsas_avg_hspz_bilg_isamt_s', 'dsas_avg_optt_bilg_isamt_s', 'dsas_avg_surop_bilg_isamt_s', 'dsas_avg_diag_bilg_isamt_s'].mean().max(axis = 1)\nall_df['dsas_MAX'] = all_df.set_index(['dsas_ltwt_gcd', 'ac_ctr_diff']).index.map(dct3.get)\n\ndct4 = all_df.groupby(['dsas_ltwt_gcd', 'ac_ctr_diff'])['dsas_avg_hspz_bilg_isamt_s', 'dsas_avg_optt_bilg_isamt_s', 'dsas_avg_surop_bilg_isamt_s', 'dsas_avg_diag_bilg_isamt_s'].mean().min(axis = 1)\nall_df['dsas_MIN'] = all_df.set_index(['dsas_ltwt_gcd', 'ac_ctr_diff']).index.map(dct4.get)\n\nall_df['dsas_MAX-MIN'] = all_df['dsas_MAX'] - all_df['dsas_MIN']\n\nmodel_var = model_var + ['dsas_MIN', 'dsas_MAX', 'dsas_MAX-MIN', 'dsas_SUM', 'dsas_STD']","f4c463c8":"all_df.loc[all_df['mdct_inu_rclss_dcd'] == 9, 'mdct_inu_rclss_dcd'] = np.nan","cf202eec":"train = all_df[all_df['base_ym'] == 201911]\ntrain.reset_index(inplace = True, drop = True)\n\ntest = all_df[all_df['base_ym'] == 201912]\ntest.reset_index(inplace = True, drop = True)\n\ntrain = pd.concat([train, new_train])\ntrain.reset_index(inplace = True, drop = True)","68ed4166":"train = pd.concat([train, new_train])\ntrain.reset_index(inplace = True, drop = True)","ed45ed8c":"NUM_BOOST_ROUND = 50000\n\n#######################\n### FOR Stratified ####\nN_SPLITS = 5\n#######################\n#######################\n\nlgbm_param = {\n    \"objective\": \"multiclassova\",\n    'n_estimators' : NUM_BOOST_ROUND,\n    \"boosting\": \"gbdt\",\n    \"num_leaves\": 50,\n    \"learning_rate\": 0.008,\n    \"feature_fraction\": 0.95,\n    \"reg_lambda\": 2,\n    \"metric\": \"multiclass\",\n    \"num_class\" : 3,\n    'seed' : SEED,\n}\n\n","ecf49aa4":"final_test = np.zeros(( test.shape[0], 3 ))\nlgbm_oof_train = np.zeros((train.shape[0]))\n\n\nkfolds = StratifiedKFold(n_splits=N_SPLITS, shuffle = True, random_state = SEED)\nfor ind, (trn_ind, val_ind) in tqdm( enumerate(kfolds.split(X= train[model_var], y = train['ac_dsas'] )) ):\n    X_train , y_train = train.iloc[trn_ind][model_var], train.iloc[trn_ind]['target']\n    X_valid , y_valid = train.iloc[val_ind][model_var], train.iloc[val_ind]['target']\n\n#     w = y_train.value_counts()\n#     weights = {i : np.sum(w) \/ w[i] for i in w.index}\n    \n    dtrain = lgb.Dataset(X_train, y_train)\n    dvalid = lgb.Dataset(X_valid, y_valid)\n    \n    # model \uc815\uc758&\ud559\uc2b5\n    model = lgb.train(lgbm_param , dtrain,  num_boost_round=NUM_BOOST_ROUND,  verbose_eval=2000,  early_stopping_rounds=500,\n                       valid_sets=(dtrain, dvalid),\n                       valid_names=('train','valid')) #, sample_weight=y_train.map(weights))\n    \n\n    lgb.plot_importance(model, importance_type='gain', max_num_features = 30)\n\n\n    lgbm_valid_pred = model.predict(X_valid)\n    lgbm_valid_pred =  list(map(np.argmax, lgbm_valid_pred))    \n    lgbm_oof_train[val_ind] = lgbm_valid_pred\n    print('='*80)\n    \n    ## \uacb0\uad6d lgbm\uc73c\ub85c \uc81c\ucd9c\ub760~\n    test_predict = model.predict(test[model_var])\n    final_test += test_predict\n    \n\n    \nfinal_test \/= N_SPLITS  ","9359b821":"print(f\"<Light-GBM> OVERALL : {f1_score( train['target'], lgbm_oof_train, average = None ),f1_score( train['target'], lgbm_oof_train, average = None ).mean() }\")","25edf3fb":"np.save('final_test_998_50_2', final_test)\nresult =  list(map(np.argmax, final_test))\nsub['target'] = result\ndisplay(sub['target'].value_counts()\/len(sub))\ndisplay(train['target'].value_counts()\/len(train))","82c534bf":"sub.to_csv('.\/new_train_998_result_pleasE_lef50_v2.csv', index = False)\nfrom IPython.display import FileLink\nFileLink(r'result.csv')","0558b7d2":"## log var","2be07492":"## \uae08\uc561 \ub450 \uac1c\ub97c \ud569\uce58\uae30\n","8d641923":"## mean encoding","513ea297":"## ac_ctr_diff X dsas_ltwt_gcd","2542ebf5":"## \uc9c8\ubcd1 \ucf54\ub4dc \ud558\ub098\ub85c \ub9cc\ub4e4\uae30","543fb545":"## TRAIN","9ab341fd":"## Light GBM BASE LINE"}}