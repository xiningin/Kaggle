{"cell_type":{"0eb42d4b":"code","c65aed17":"code","e4a7ffc0":"code","b646e192":"code","16af58e4":"code","1f2b9ae1":"code","752bb1b8":"code","c763653e":"code","8f0f62de":"code","510f80e6":"code","6c6ee5f0":"code","ad2981c6":"code","04af14ed":"code","7b63a746":"code","a4f3cd0c":"code","d3128804":"code","c5ee7223":"code","3d506a8d":"code","d455aad5":"code","96ca1215":"code","c3226782":"code","33059562":"code","141c4f0c":"markdown","9a3f8143":"markdown","1c0e9f6e":"markdown","a1620367":"markdown","582dfd44":"markdown","4d5cebd4":"markdown","410336ab":"markdown","6634a7f3":"markdown","6d296fbc":"markdown","ef67931b":"markdown","5f23332d":"markdown"},"source":{"0eb42d4b":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nfrom copy import deepcopy\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix,roc_auc_score,roc_curve\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c65aed17":"uninfected_images = []       \nshape = (100,100)  \nuninfected_path = '\/kaggle\/input\/cell-images-for-detecting-malaria\/cell_images\/Uninfected'\nfor filename in os.listdir('\/kaggle\/input\/cell-images-for-detecting-malaria\/cell_images\/Uninfected'):\n    if filename.split('.')[1] == 'png':\n        img = cv2.imread(os.path.join(uninfected_path,filename))\n        img = cv2.resize(img,shape)\n        uninfected_images.append(img)\nuninfected_images = np.array(uninfected_images)\nparasitized_images = []\nshape = (100,100)\nparasitized_path = '\/kaggle\/input\/cell-images-for-detecting-malaria\/cell_images\/Parasitized'\nfor filename in os.listdir('\/kaggle\/input\/cell-images-for-detecting-malaria\/cell_images\/Parasitized'):\n    if filename.split('.')[1] == 'png':\n        img = cv2.imread(os.path.join(parasitized_path,filename))\n        img = cv2.resize(img,shape)\n        parasitized_images.append(img)        \nparasitized_images = np.array(parasitized_images)","e4a7ffc0":"print(\"Uninfected Images shape :\",uninfected_images.shape)\nprint(\"Parasitized Images shape :\",parasitized_images.shape)","b646e192":"#uninfected_images = 0\n#parasitized_images = 1\nuninfected_numbers = np.zeros(uninfected_images.shape[0])\nparasitized_numbers = np.ones(parasitized_images.shape[0])\nprint(\"Uninfected Numbers shape :\",uninfected_numbers.shape)\nprint(\"Parasitized Numbers shape :\",parasitized_numbers.shape)","16af58e4":"x=np.concatenate((uninfected_images,parasitized_images),axis=0)\ny=np.concatenate((uninfected_numbers,parasitized_numbers),axis=0)\ny=y.reshape(y.shape[0],1)\nprint(\"x shape :\",x.shape)\nprint(\"y shape :\",y.shape)","1f2b9ae1":"img=x[48]\nplt.imshow(img)\nplt.title(y[48])\nplt.axis(\"off\")\nplt.show()","752bb1b8":"sns.countplot(y.reshape(y.shape[0], ))\nplt.legend()\nplt.title(\"Count of Labels\")\nplt.xlabel(\"Different Labels\")\nplt.ylabel(\"Count\")\nplt.show()","c763653e":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=42)\nprint(\"x train shape :\",x_train.shape)\nprint(\"x test shape :\",x_test.shape)\nprint(\"y train shape :\",y_train.shape)\nprint(\"y test shape :\",y_test.shape)","8f0f62de":"model=Sequential()\n\nmodel.add(Conv2D(filters=30,kernel_size=(3,3),activation=\"relu\",padding=\"same\",input_shape=(100,100,3)))\nmodel.add(MaxPooling2D())\nmodel.add(Dropout(0.4))\nmodel.add(Conv2D(filters=30,kernel_size=(3,3),activation=\"relu\",padding=\"same\"))\nmodel.add(MaxPooling2D())\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\nmodel.add(Dense(206,activation=\"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(103,activation=\"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(1,activation=\"sigmoid\"))","510f80e6":"model.summary()","6c6ee5f0":"model.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=[\"accuracy\"])","ad2981c6":"hist=model.fit(x_train,y_train,batch_size=250,epochs=100,validation_data=(x_test,y_test))","04af14ed":"print(hist.history.keys())","7b63a746":"train_loss=hist.history[\"loss\"]\ntest_loss=hist.history[\"val_loss\"]\ntrain_accuracy=hist.history[\"accuracy\"]\ntest_accuracy=hist.history[\"val_accuracy\"]","a4f3cd0c":"plt.plot(train_loss[1:],color=\"red\",label=\"Train Loss\")\nplt.plot(test_loss[1:],color=\"green\",label=\"Test Loss\")\nplt.title(\"Loss Plot\")\nplt.legend()\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss Values\")\nplt.grid()\nplt.show()","d3128804":"plt.plot(train_accuracy,color=\"black\",label=\"Train Accuracy\")\nplt.plot(test_accuracy,color=\"blue\",label=\"Test Accuracy\")\nplt.title(\"Accuracy Plot\")\nplt.legend()\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Accuracy Values\")\nplt.grid()\nplt.show()","c5ee7223":"prediction=model.predict(x_test)\npredicted_classes=deepcopy(prediction)\nfor i in range(0,predicted_classes.shape[0]):\n    if predicted_classes[i]>0.5:\n        predicted_classes[i]=1\n    else:\n        predicted_classes[i]=0","3d506a8d":"print(\"predicted classes shape :\",predicted_classes.shape)\nprint(\"y test :\",y_test.shape)","d455aad5":"cfm=confusion_matrix(y_test,predicted_classes)\nf,ax=plt.subplots(figsize=(10,10))\nsns.heatmap(cfm,annot=True,cmap=\"coolwarm\",linecolor=\"black\",linewidths=1,fmt=\".0f\",ax=ax)\nplt.title(\"Error Values with Heat Map\")\nplt.xlabel(\"Real Values\")\nplt.ylabel(\"Predicted Values\")\nplt.show()","96ca1215":"fpr,tpr,thresholds=roc_curve(y_test,prediction)\nprint(\"FPR shape :\",fpr.shape)\nprint(\"TPR shape :\",tpr.shape)","c3226782":"plt.plot(fpr,color=\"red\",label=\"FPR\")\nplt.plot(tpr,color=\"green\",label=\"TPR\")\nplt.legend()\nplt.title(\"Roc Curve Plot\")\nplt.xlabel(\"False Positive Rate\")\nplt.ylabel(\"True Positive Rate\")\nplt.show()","33059562":"auc_score=roc_auc_score(y_test,prediction)\nprint(\"Roc Auc Score Values :\",auc_score)","141c4f0c":"# ACCURACY PLOT","9a3f8143":"# CONVOLUTIONAL NEURAL NETWORK","1c0e9f6e":"# HEAT MAP","a1620367":"# LOSS PLOT","582dfd44":"### I imported necessary libraries ","4d5cebd4":"### I created the labels for images","410336ab":"### I combined unifected images and parasitized_images into a variable and combined two labels into a variable","6634a7f3":"### I created my train set and test set","6d296fbc":"# ROC CURVE PLOT","ef67931b":"### I created my CNN model","5f23332d":"### I loaded all images and made resize them as array"}}