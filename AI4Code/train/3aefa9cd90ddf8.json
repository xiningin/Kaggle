{"cell_type":{"7929c994":"code","1f12c9b7":"code","d42a7883":"code","6833c02e":"code","68b3d345":"code","7bbe2a58":"code","aae0cc33":"code","45385ab4":"code","f6e6b530":"code","501e615b":"code","3c788f9c":"code","8490e3ee":"code","ec333ab8":"code","48ae089c":"code","13407184":"code","5a81caa6":"code","74484932":"code","c7c26e55":"code","14719339":"code","ec704b44":"code","82462df9":"code","5b5597da":"code","f9f3db3f":"code","1d8cf3b4":"code","89c4f5fa":"code","ad9c4eec":"code","3e3deaf0":"code","ba572a1d":"code","9af13fb5":"markdown","8cfbdd26":"markdown","3f748faa":"markdown","0d089188":"markdown","800344a7":"markdown","c9a392c8":"markdown","2b761b2d":"markdown","8f3099c6":"markdown","a787e277":"markdown","f632101a":"markdown","2ca50a11":"markdown","c725667c":"markdown","38976e6d":"markdown","5adaf9e5":"markdown","74cce027":"markdown","8e52e52c":"markdown","78a56d6c":"markdown","f0fdb51e":"markdown","b9dc52d7":"markdown","d8d5a108":"markdown"},"source":{"7929c994":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # for plotting\nimport matplotlib.image as mpimg\nimport seaborn as sns # to generate stylised plots","1f12c9b7":"df = pd.read_csv('..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')","d42a7883":"df.head()","6833c02e":"df.info()","68b3d345":"df.describe().T","7bbe2a58":"df.isna().sum()","aae0cc33":"fig,ax = plt.subplots(figsize = (10,6))\nsns.heatmap(df.corr(),cmap = 'plasma', annot= True)","45385ab4":"df.corr()['quality'][:-1].sort_values().plot(kind = 'barh',figsize = (13,10), colormap = 'plasma')","f6e6b530":"df.quality.value_counts()","501e615b":"df['quality_binary'] = df.quality.apply(lambda x : 1 if x >6 else 0)","3c788f9c":"df.quality_binary.value_counts()","8490e3ee":"X = df.drop(columns = ['quality','quality_binary']).values\ny = df.quality_binary.values.reshape(-1, 1)","ec333ab8":"from sklearn.preprocessing import MinMaxScaler\nX_scaler = MinMaxScaler().fit(X)\nX_new = X_scaler.transform(X)\n#y_scaler = MinMaxScaler().fit(y)\n#y_new = y_scaler.transform(y)","48ae089c":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_new,y,train_size= 0.75, random_state= 101)","13407184":"from sklearn import tree\nmodel1 = tree.DecisionTreeClassifier()\nmodel1.fit(X_train,y_train)","5a81caa6":"y_pred = model1.predict(X_test)","74484932":"from sklearn.metrics import classification_report, confusion_matrix,roc_auc_score, auc\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))","c7c26e55":"roc_auc_score(y_test, y_pred )","14719339":"feature_set = df.drop(columns = ['quality','quality_binary']).columns","ec704b44":"import graphviz \nimport pydot\ndot_data = tree.export_graphviz(model1, \n                     feature_names=feature_set,\n                     out_file = 'class_tree.dot',\n                     class_names='quality',  \n                     filled=True, rounded=True,  \n                     special_characters=True)  \n(graph,) = pydot.graph_from_dot_file('class_tree.dot')\ngraph.write_png('DT_classifier.png')","82462df9":"plt.subplots(figsize = (15,15))\nplt.axis('off')\nplt.imshow(mpimg.imread('DT_classifier.png'))","5b5597da":"X = df.drop(columns = ['quality','quality_binary']).values\ny = df.quality.values.reshape(-1,1)\nX_scaler = MinMaxScaler().fit(X)\nX_new = X_scaler.transform(X)\ny_scaler = MinMaxScaler().fit(y)\ny_new = y_scaler.transform(y)","f9f3db3f":"X_train, X_test, y_train, y_test = train_test_split(X_new,y_new,train_size= 0.75, random_state= 101)","1d8cf3b4":"model2 = tree.DecisionTreeRegressor()\nmodel2.fit(X_train,y_train)","89c4f5fa":"y_pred = model2.predict(X_test)","ad9c4eec":"from sklearn.metrics import r2_score, mean_absolute_error,mean_squared_error,mean_absolute_percentage_error\nprint(r2_score(y_test, y_pred))\nprint(mean_absolute_error(y_test,y_pred))\nprint(mean_squared_error(y_test,y_pred))","3e3deaf0":"dot_data2 = tree.export_graphviz(model2, \n                     feature_names=feature_set,\n                     out_file = 'regression_tree.dot',\n                     class_names='quality',  \n                     filled=True, rounded=True,  \n                     special_characters=True) \ngraphviz.Source(dot_data)\n(graph2,) = pydot.graph_from_dot_file('regression_tree.dot')\ngraph2.write_png('DT_regressor.png')","ba572a1d":"plt.subplots(figsize = (50,15))\nplt.axis('off')\nplt.imshow(mpimg.imread('DT_regressor.png'))","9af13fb5":"#### Correlations between each columns","8cfbdd26":"## Importing necessary python libraries","3f748faa":"### Glimpse at each column of the data","0d089188":"### Loading the input file","800344a7":"### Check for any missing data","c9a392c8":"#### Lets predict the output quality using the regression model","2b761b2d":"#### Instantiate a Decision Tree classifier","8f3099c6":"#### Display the Decision tree regressor which estimates the quality of wine ","a787e277":"#### Display the Decision tree classifer which predicts if the wine is of good quality or not","f632101a":"#### Let's display the barplot of the correlations of various columns with 'quality'","2ca50a11":"#### Predicting the outputs for the test set 'X_test'","c725667c":"#### Train the Decision tree regressor using the scaled data set","38976e6d":"#### Split train set and test set","5adaf9e5":"####  A High level look into the decision tree with the depth of 2","74cce027":"#### List of labels available for prediction :","8e52e52c":"# Introduction\n","78a56d6c":"### Descriptive statistics on each column","f0fdb51e":"# Exploratory Data Analysis","b9dc52d7":"## Feature Engineering","d8d5a108":"### Let's put aside the regression modelling and try doing a classification model which predicts whether the wine is good or not"}}