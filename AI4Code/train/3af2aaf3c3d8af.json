{"cell_type":{"965a8ae2":"code","ca915174":"code","768ddfd1":"code","a2565e80":"code","11284fef":"code","40573792":"code","cab4bb4a":"code","0a438506":"code","18b39525":"code","74890e9f":"code","b73f2565":"code","3beaba10":"code","c35197b4":"code","e3b08fc3":"code","66c0bd9b":"code","2412883f":"code","5b63098c":"code","9b19797f":"code","ed64df5a":"code","6f427aeb":"code","65621f92":"code","a169d8ef":"markdown","207070d0":"markdown","f85af9b4":"markdown","b5224ab4":"markdown","e5dbe341":"markdown","24402d46":"markdown","bb2fa8b4":"markdown","4bc61770":"markdown","b698708e":"markdown","aa42cece":"markdown","ea85ecca":"markdown","d46d1ca3":"markdown","f387836b":"markdown","f5988b06":"markdown","2cf44a8e":"markdown","c58b807b":"markdown","22c5366b":"markdown","406cb9e8":"markdown","0c1a0dd5":"markdown","01c7397b":"markdown","3f47ee3c":"markdown","68ea8cf5":"markdown"},"source":{"965a8ae2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ca915174":"data = pd.read_csv('\/kaggle\/input\/femicide-in-turkey-20082020-english-dataset\/femicide_in_turkey_2008_2020_englishdataset.csv')\ndata.head()","768ddfd1":"data = data.replace({\"^\\s*|\\s*$\":\"\"}, regex=True)\nyear = data['year'] = data['year'].astype('int') \ndata['city'] = data['city'].astype('str')\ndata = data.replace('Cousen','Cousin')","a2565e80":"data.columns","11284fef":"data.info()","40573792":"data.tail()","cab4bb4a":"whichyear = data.year.value_counts().head(13).sort_index()\nwhichyear","0a438506":"bywhom = data.killer1.value_counts()\nbywhom.head(10)","18b39525":"data.statusofkiller.value_counts().head(7)","74890e9f":"data[\n    ((data.killer1 == 'Husband') | (data.killer2 == 'Husband')) &\n    ((data.killingway1 == 'Firearm') | (data.killingway2 == 'Firearm')|(data.killingway3 == 'Firearm'))\n]","b73f2565":"accordingtoyear =data.year.plot(kind = 'hist' , bins = 30 , figsize = (10,6) , range = (2008 , 2020) , label = 'Yil' )\naccordingtoyear.set_title(\"Women killed between January 2008 and August 2020\" , fontsize = 12)\naccordingtoyear.set_xlabel(\"Year\", fontsize = 12)\naccordingtoyear.set_ylabel(\"# of women\", fontsize = 12)\nplt.show()","3beaba10":"howdied = data.killingway1.value_counts().head(7)\nhowdiedgraph = howdied.plot(kind='pie'  , figsize = (9, 8) , startangle = 60 , shadow = False , autopct = \"%1.1f%%\")\nhowdiedgraph.set_title(\"How They Were Killed\" , fontsize = 15)\nhowdiedgraph.set_ylabel(\"\" , fontsize = 15)\nplt.show()","c35197b4":"protection = data.protectionorder.value_counts().head(3)\nprotectionordergraph = protection.plot(kind='pie'  , figsize = (9, 8) , startangle = 60 , shadow = False , autopct = \"%1.1f%%\")\nprotectionordergraph.set_title(\"Is Protection Order Available?\" , fontsize = 15)\nprotectionordergraph.set_ylabel(\"\" , fontsize = 15)\nplt.show()","e3b08fc3":"killerstatus = data.statusofkiller.value_counts().head(6)\nkillerstatusgraph = killerstatus.plot(kind='pie'  , figsize = (9, 8) , startangle = 60 , shadow = False , autopct = \"%1.1f%%\")\nkillerstatusgraph.set_title(\"Status of Killer\" , fontsize = 15)\nkillerstatusgraph.set_ylabel(\"\" , fontsize = 15)\nplt.show()","66c0bd9b":"family3 = data[(data['killer1'] == 'Father') | (data['killer1'] == 'Mother') ]\nfamily3filter = family3[['year','killer1']]\nfamily3filter.year.value_counts().head(13).sort_index()","2412883f":"# By her son and her daughter\nfamily1 = data[(data['killer1'] == 'Son') | (data['killer1'] == 'Daughter')]\nfamily1filter = family1[['year','killer1']]\nfamily1filter.year.value_counts().head(13).sort_index()\nlistfamily1 = list(family1filter.year.value_counts().head(13).sort_index())\nlistfamily1.insert(0,0) #There is no value in 2008, so we added zero value in this year.\n#By her brother, sibling and sister\nfamily2 = data[(data['killer1'] == 'Brother') | (data['killer1'] == 'Sibling')| (data['killer1'] == 'Sister') ]\nfamily2filter = family2[['year','killer1']]\nfamily2filter.year.value_counts().head(13).sort_index()\nlistfamily2 = list(family2filter.year.value_counts().head(13).sort_index())\nlistfamily2.append(0)\n#By her mom and dad\nfamily3 = data[(data['killer1'] == 'Father') | (data['killer1'] == 'Mother') ]\nfamily3filter = family3[['year','killer1']]\nfamily3filter.year.value_counts().head(13).sort_index()\nlistfamily3 = list(family3filter.year.value_counts().head(13).sort_index())\nlistfamily3.insert(4,0)\n#By her grandson, nephew, uncle, cousin and relatives\nfamily4 = data[(data['killer1'] == 'Grandson' ) | (data['killer1'] == 'Nephew') | (data['killer1'] == 'Uncle') |(data['killer1'] == 'Cousin') | (data['killer1'] == 'Relative')]\nfamily4filter = family4[['year','killer1']]\nfamily4filter.year.value_counts().head(13).sort_index()\nlistfamily4 = list(family4filter.year.value_counts().head(13).sort_index())\n#The data is inserted a list to draw a graph\ndata_1 = []\ndata_1.append(listfamily1)\ndata_1.append(listfamily2)\ndata_1.append(listfamily3)\ndata_1.append(listfamily4) \n\nbarWidth = 0.22\nr1 = np.arange(len(data_1[0]))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\nr4 = [x + barWidth for x in r3]\n#make the plot and show \nplt.figure(figsize=(18,9))\nplt.grid(zorder = 0)\nplt.bar(r1, data_1[0], color='#1089bc', width=barWidth, edgecolor='white', label='By Her Children')\nplt.bar(r2, data_1[1] , color='#ff3300', width=barWidth, edgecolor='white', label='By Siblings')\nplt.bar(r3, data_1[2], color='#ffa500', width=barWidth, edgecolor='white', label='By Her Parents ')\nplt.bar(r4, data_1[3], color='purple', width=barWidth, edgecolor='white', label='By Her Relatives')\nplt.xlabel('Women Who Were Killed By Relatives', fontweight='bold')\nplt.xticks([r + barWidth for r in range(len(data_1[0]))], ['2008', '2009', '2010', '2011', '2012','2013', '2014', '2015', '2016', '2017','2018', '2019', '2020'])\nplt.legend()\nplt.show()\n","5b63098c":"# By her husband\nbyhusband = data[data['killer1'] == 'Husband' ]\nbyhusbandfilter = byhusband[['year','killer1']]\nbyhusbandfilter.year.value_counts().head(13).sort_index()\nlistbyhusband = list(byhusbandfilter.year.value_counts().head(13).sort_index())\n# By her ex husband\nbyexhusband = data[data['killer1'] == 'Ex Husband' ]\nbyexhusbandfilter = byexhusband[['year','killer1']]\nbyexhusbandfilter.year.value_counts().head(13).sort_index()\nlistbyexhusband = list(byexhusbandfilter.year.value_counts().head(13).sort_index())\n# By her ex boyfriend\nbyexboyfriend = data[(data['killer1'] == 'Ex Boyfriend') ]\nbyexboyfriendfilter = byexboyfriend[['year','killer1']]\nbyexboyfriendfilter.year.value_counts().head(13).sort_index()        \nlistbyexboyfriend= list(byexboyfriendfilter.year.value_counts().head(13).sort_index())\n#Sevgilisi Taraf\u0131ndan \u00d6ld\u00fcr\u00fclenler\nbyboyfriend = data[data['killer1'] == 'Boyfriend' ]\nbyboyfriendfilter = byboyfriend[['year','killer1']]\nbyboyfriendfilter.year.value_counts().head(13).sort_index()\nlistbyboyfriend = list(byboyfriendfilter.year.value_counts().head(13).sort_index())\n\ndata_2 = []\ndata_2.append(listbyexboyfriend)\ndata_2.append(listbyexhusband)\ndata_2.append(listbyboyfriend)\ndata_2.append(listbyhusband)\n# X axisindeki de\u011ferleri atayal\u0131m\nbarWidth = 0.22\nr1 = np.arange(len(data_2[0]))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\nr4 = [x + barWidth for x in r3]\n#plotu olu\u015ftural\u0131m ve g\u00f6r\u00fcnt\u00fcleyelim\nplt.figure(figsize=(18,9))\nplt.grid(zorder = 0)\nplt.bar(r1, data_2[0], color='#1089bc', width=barWidth, edgecolor='white', label='By Ex Boyfriend')\nplt.bar(r2, data_2[1] , color='#ff3300', width=barWidth, edgecolor='white', label='By Ex Husband')\nplt.bar(r3, data_2[2], color='#ffa500', width=barWidth, edgecolor='white', label='By Boyfriend')\nplt.bar(r4, data_2[3], color='purple', width=barWidth, edgecolor='white', label='By Husband')\nplt.xlabel('Women Who Were Killed By People With Emotional Relationship', fontweight='bold')\nplt.xticks([r + barWidth for r in range(len(data_2[0]))], ['2008', '2009', '2010', '2011', '2012','2013', '2014', '2015', '2016', '2017','2018', '2019', '2020'])\nplt.legend()\nplt.show()\n","9b19797f":"Regions= pd.DataFrame({'MediterraneanRegion': ['Adana', 'Antalya', 'Mersin' , 'Burdur' , 'Hatay' , 'Isparta' , 'Kahramanmaras' , 'Osmaniye', '','','','','','','','','',''], \n              'AegeanRegion': ['Izmir', 'Mugla' , 'Aydin' , 'Afyonkarahisar' , 'Denizli', 'Kutahya' , 'Manisa', 'Usak','','','','','','','','','',''], \n              'MarmaraRegion' : ['Balikesir', 'Bilecik' , 'Bursa' , 'Canakkale', 'Edirne', 'Istanbul', 'Kirklareli', 'Kocaeli' , 'Izmit', 'Sakarya', 'Tekirda\u011f' ,'Yalova','','','','','',''],\n              'EastAnatoliaRegion' : ['Agri', 'Ardahan', 'Bingol', 'Bitlis', 'Elazig', 'Erzincan' , 'Erzurum', 'Hakkari', 'Igdir', 'Kars', 'Malatya','Mus', 'Tunceli', 'Van','','','',''] ,\n              'CentralAnatoliaRegion': ['Aksaray', 'Ankara', 'Cankiri', 'Eskisehir', 'Karaman', 'Kayseri', 'Kirikkale', 'Kirsehir', 'Konya', 'Nevsehir', 'Nigde', 'Sivas','Yozgat','','','','',''],\n              'SoutheastAnatoliaRegion' : ['Adiyaman', 'Batman', 'Diyarbakir', 'Gaziantep', 'Mardin', 'Siirt', 'Sanliurfa', 'Urfa', 'Sirnak', 'Kilis','','','','','','','',''],\n              'BlackSeaRegion' : ['Trabzon' , 'Amasya', 'Artvin', 'Bart\u0131n' , 'Bayburt', 'Bolu', 'Corum', 'Duzce', 'Giresun', 'Gumushane', 'Karabuk', 'Kastamonu', 'Ordu', 'Rize', 'Samsun', 'Sinop', 'Tokat', 'Zonguldak'] })\nmediterraneancount = 0 \naegeancount = 0\nmarmaracount = 0\neastanatoliacount=0 \ncentralanatoliacount = 0\nsoutheastanatoliacount=0\nblackseacount =0\nnancount= 0\nfor i in range (0,2972):\n    for j in range (0, 18):\n    #if data.city == deneme.AkdenizBolgesi[i]:\n        #count = count + \n        x = np.where((data.city[i] == Regions.MediterraneanRegion[j]), 1 ,0)\n        if x :\n            mediterraneancount = mediterraneancount +1\n            break\n        else :\n            y = np.where((data.city[i] == Regions.AegeanRegion[j]), 1 , 0)\n            if y : \n                aegeancount= aegeancount +1\n                break\n            else : \n                z = np.where((data.city[i] == Regions.MarmaraRegion[j]), 1 ,0)\n                if z : \n                    marmaracount= marmaracount +1\n                    break\n                else:\n                    t = np.where((data.city[i] == Regions.EastAnatoliaRegion[j]), 1 , 0)\n                    if t :\n                        eastanatoliacount = eastanatoliacount +1\n                        break\n                    else :    \n                        w = np.where((data.city[i] == Regions.CentralAnatoliaRegion[j]), 1 ,0)\n                        if w : \n                            centralanatoliacount = centralanatoliacount + 1 \n                            break\n                        else:\n                            r = np.where((data.city[i] == Regions.SoutheastAnatoliaRegion[j]), 1 , 0)\n                            if r :\n                                southeastanatoliacount = southeastanatoliacount + 1 \n                                break\n                            else: \n                                v = np.where((data.city[i] == Regions.BlackSeaRegion[j]), 1 , 0)\n                                if v: \n                                    blackseacount = blackseacount +1\n                                    break\n                                else:\n                                    if( j == 17):\n                                        nancount = nancount +1\naccordingtoregion = [mediterraneancount,aegeancount,marmaracount,eastanatoliacount, centralanatoliacount,southeastanatoliacount,blackseacount ,nancount]\naccordingtoregion.sort()\naccordingtoregion = accordingtoregion[::-1]\naccordingtoregion","ed64df5a":"counts = pd.Series([1222, 482, 282, 278, 250, 179, 169, 110],index = ['','','','','','','',''] )\n\nexplode = (0.075, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025,0.025)\ncolors = ['#191970', '#001CF0', '#0038E2', '#0055D4', '#0071C6', '#008DB8', '#00AAAA',\n          '#00C69C', '#00E28E', '#00FF80','#00FF80' ,]\nindex1 = ['Undetectable','Marmara','Mediterranean','Aegean','Central Anatolia','South East Anatolia','Black Sea','East Anatolia']\ncounts.plot(kind='pie', fontsize=14, colors=colors, explode=explode,figsize = (8,8), autopct = \"%1.1f%%\" ,startangle = 15 ,textprops = dict(color = 'w'))\nplt.axis('equal')\nplt.ylabel('')\nplt.legend(labels=index1, loc=\"upper right\")\nplt.show()","6f427aeb":"accordingtocities = data.city.value_counts().head(10)\ncolors = ['#191970', '#001CF0', '#0038E2', '#0055D4', '#0071C6', '#008DB8', '#00AAAA',\n          '#00C69C', '#00E28E', '#00FF80','#00FF80' ,]\nexplode = (0.075, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025,0.025, 0.025,0.025)\ncities = accordingtocities.plot(kind='pie'  , textprops = dict(color = 'w'),figsize = (8, 8),colors = colors ,explode = explode, startangle = 20 , shadow = False , autopct = \"%1.1f%%\", fontsize=14)\ncities.set_title(\"According To First Ten City Death Rates\")\ncities.set_ylabel(\"\" )\nindexcities = ['Undetectable','\u0130stanbul','\u0130zmir','Ankara','Bursa','Antalya','Adana','Konya','Gaziantep' , 'Mersin' ]\nplt.axis('equal')\nplt.legend(labels = indexcities , loc = 'upper right' , fontsize = 10)\nplt.ylabel('')\nplt.show()","65621f92":"counts = data.why1.value_counts().head(10)\nexplode = (0.075, 0.025, 0.025, 0.025, 0.025, 0.025, 0.025,0.025,0.025,0.025)\ncolors = ['#7a0100', '#d30000', '#ee2c2c', '#ff3030', '#ff4040', '#ff5656', '#ff6b6b',\n          '#ff8484', '#ffaaaa', '#fcbfbf','#00FF80' ,]\nindex = ['Undetectable','Assault','Jealousy','Divorce Supsicion','Be Rejected','Money','Divorce','Something that a man wanted did not happen','Breaking Up Suggestion','Honor']\ncounts.plot(kind='pie', fontsize=14, colors=colors, explode=explode,figsize = (11,8), autopct = \"%1.1f%%\" ,startangle = 20,textprops = dict(color = 'w') )\nplt.axis('equal')\nplt.ylabel('')\nplt.legend(labels = index,loc = 'upper right')\nplt.show()","a169d8ef":"<a id = \"13\"><\/a>\n<font color = \"#800000\">\n## *According To City Rates In Turkey Pie-Chart*","207070d0":"<font color = \"#000045\"> <b> In the query written above, those killed by her husband with firearms between 2008-2020 are listed. <\/b>","f85af9b4":"<a id = \"11\"><\/a>\n### *Women Who Were Killed By People With Emotional Relationship*","b5224ab4":"<a id = \"10\"><\/a>\n### *Women Who Were Killed By Relatives*","e5dbe341":"<a id = \"8\"><\/a>\n<font color = \"#800000\">\n### *Status Of Killer Pie-Chart*","24402d46":"<font color = \"#000045\"><b> The above data show the situation of the murderers. <\/b>","bb2fa8b4":"<a id = \"9\"><\/a>\n<font color = \"#800000\">\n### *By Whom Bar-Plot*","4bc61770":"<font color = '#000045'> <b> At the first 7 killings in the data, it is seen that almost half of them were firearms. <\/b> <\/font>","b698708e":"<a id = '4' > <\/a>\n   ## Data Query and Visualization","aa42cece":"<a id = \"12\"><\/a>\n<font color = \"#800000\">\n## *According To Regions Rates In Turkey Pie-Chart*","ea85ecca":"<a id = \"5\"><\/a>\n<font color = \"#800000\">\n### *Histogram chart of women killed between January 2008 and August 2020*","d46d1ca3":"<font color = \"#000045\"><b> The data given shows who killed the victims between 2008 and 2020. Except for unspecified data, a total of 1040 women were killed by their husbands. <\/b>","f387836b":"<a id = '16' > <\/a>\n## Teammates\n\n* Ya\u011fmur Sezen Demir yagmursezendemir@gmail.com\n* B\u00fc\u015fra Durak busradurakdl@gmail.com","f5988b06":"<a id = \"14\"><\/a>\n<font color = \"#800000\">\n## *According To Reason Rates Of Women Were Killed Pie-Chart*","2cf44a8e":"<a id = '3'> <\/a>\n## Determination Of Numerical Values","c58b807b":"<a id = '2'><\/a> \n## *Data Description*\n\n<font color = \"red\">Explanation:<\/font>\n<font color = \"blue\">The data are taken from news sites on the internet and cannot be 100% accurate. Some data are unfortunately incomplete and not available since they were not made public later. The dataset was created by Ya\u011fmur Sezen Demir and B\u00fc\u015fra Durak by pulling the data on the internet into Excel via Selenium.<\/font>\n\n<font color = \"blue\"> There may be changes in the data due to the fact that some expressions used in Turkish are the same or not at all in English. For example, in Turkish, the phrase 'Religious Wedding Husband' is taken as her husband in English, but not her husband in Turkish. <\/font>\n- *id: identifiger*\n- *city: which city she was killed*\n- *age: adult \/ underage*\n- *date: when it happened*\n- *protectionorder: protection order (yes,no,undetectable)*\n- *why1, why2: reason of being killed*\n- *killer1, killer2: by whom*\n- *killingway1, killingway2, killingway3: how she died*\n- *statusofkiller: status of killer*\n- *year: which year it happened*","22c5366b":"<font color = \"#000045\"><b> The data above shows how many women were killed in which year. A total of 194 women were killed in the first 8 months of 2020. <\/b>","406cb9e8":" ## Introduction \n    \n<font color = \"blue\">\nContent:\n\n1. [Loading and Checking Data](#1)\n2. [Data Description](#2)\n3. [Determination Of Numerical Values](#3)\n4. [Data Query and Visualization](#4)\n    * [Histogram chart of women killed between January 2008 and August 2020](#5)\n    * [How They Were Killed Pie-Chart](#6)\n    * [Protection Order Pie-Chart](#7)\n    * [Status Of Killer Pie-Chart](#8)\n    * [By Whom Bar-Plot](#9)\n        * [Women Who Were Killed By Relatives](#10)\n        * [Women Who Were Killed By People With Emotional Relationship](#11)\n    * [According To Regions Rates In Turkey Pie-Chart](#12)\n    * [According To City Rates In Turkey Pie-Chart](#13)\n    * [According To Reason Rates Of Women Were Killed Pie-Chart](#14) \n5. [Resources](#15)\n6. [Teammate](#16)\n   ","0c1a0dd5":"<a id = \"7\"><\/a>\n<font color = \"#800000\">\n### *Protection Order Pie-Chart*","01c7397b":"<a id = \"6\"><\/a>\n<font color = \"#800000\">\n### *How They Were Killed Pie-Chart*","3f47ee3c":"<a id = '15'> <\/a>\n## Resources\n\n* https:\/\/www.hurriyet.com.tr\n* https:\/\/www.sozcu.com.tr\n* http:\/\/anitsayac.com","68ea8cf5":"<a id = '1'> <\/a>\n## Loading and Checking Data"}}