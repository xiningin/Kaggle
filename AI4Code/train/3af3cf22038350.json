{"cell_type":{"85fdf874":"code","0a895758":"code","4b37c379":"code","fff027da":"code","918260f2":"code","8ff100d6":"code","0da57a01":"code","9d45dbc2":"code","48d7cf94":"code","ef8a3277":"code","016b71ce":"code","d338048b":"code","3d7f0330":"code","1e35c026":"code","8417e4a5":"code","64eb04dd":"code","59a2648d":"code","7fe80e06":"code","7ab3c064":"code","db37eed9":"code","2814aaa2":"code","9b528093":"code","f0cc762e":"code","946d0886":"code","f6affd5b":"code","41edbcfe":"code","5c5e11b8":"code","5a841956":"code","c3b5abcb":"code","b2f5e441":"code","34d3d14a":"code","8c7f13a3":"code","e0c054c8":"code","61f7c20e":"code","cd3f93c6":"code","ee664109":"code","d0dbff3e":"code","5c3da434":"code","a7a0f028":"code","09e1d63f":"code","2298a3a8":"code","dea527e9":"code","f0eb4cd7":"code","887c0262":"code","a25543b8":"code","96e03e28":"code","59133134":"code","017fecba":"code","55ba0158":"markdown","24beb44e":"markdown","dc57d48f":"markdown","46076e0f":"markdown","aae30643":"markdown","5e973b80":"markdown","5f22f129":"markdown","c9263323":"markdown","d832b086":"markdown","f00836ca":"markdown","a7ed2377":"markdown","d37b8bd7":"markdown","bac289f1":"markdown","09f881f6":"markdown","b4cef62b":"markdown","27e8feef":"markdown","87077230":"markdown","491d6abb":"markdown","b33f7353":"markdown","1b7a451e":"markdown","d3899ea3":"markdown"},"source":{"85fdf874":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport gc\nimport json\nimport math\nimport cv2\nimport PIL\nfrom PIL import Image\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.linear_model import LogisticRegression, Ridge\nfrom sklearn.preprocessing import OneHotEncoder\nfrom tqdm import tqdm\nfrom sklearn.decomposition import PCA\nimport os\nimport imagesize\n\n%matplotlib inline","0a895758":"import os\nprint(os.listdir(\"..\/input\/siimisic-melanoma-resized-images\/\"))","4b37c379":"#Loading Train and Test Data\ntrain = pd.read_csv(\"..\/input\/siim-isic-melanoma-classification\/train.csv\")\ntest = pd.read_csv(\"..\/input\/siim-isic-melanoma-classification\/test.csv\")\nprint(\"{} images in train set.\".format(train.shape[0]))\nprint(\"{} images in test set.\".format(test.shape[0]))","fff027da":"train.head()","918260f2":"grp = train.groupby(['anatom_site_general_challenge']).mean().sort_values(by = 'target')\ngrp","8ff100d6":"%matplotlib inline","0da57a01":"import seaborn as sns\nsns.set(style=\"darkgrid\")\n# titanic = sns.load_dataset(\"titanic\")\nax = sns.barplot(x=\"target\", y=grp.index, data=grp)\n# plt.bar( grp.index , grp['target'])","9d45dbc2":"test.head()","48d7cf94":"import seaborn as sns\nsns.set(style=\"darkgrid\")\n# titanic = sns.load_dataset(\"titanic\")\nax = sns.countplot(x=\"target\", data=train)","ef8a3277":"np.mean(train.target)","016b71ce":"plt.figure(figsize=(12, 5))\nplt.hist(train['age_approx'].values, bins=200)\nplt.title('Histogram age_approx counts in train')\nplt.xlabel('Value')\nplt.ylabel('Count')\nplt.show()","d338048b":"images = []\nfor i, image_id in enumerate(tqdm(train['image_name'].head(10))):\n    im = Image.open(f'..\/input\/siim-isic-melanoma-classification\/jpeg\/train\/{image_id}.jpg')\n    im = im.resize((128, )*2, resample=Image.LANCZOS)\n    images.append(im)\n    ","3d7f0330":"images[0]","1e35c026":"images[1]","8417e4a5":"images[3]","64eb04dd":"plt.figure(figsize=(12, 5))\nplt.hist(test['age_approx'].values, bins=200)\nplt.title('Histogram age_approx counts in test')\nplt.xlabel('Value')\nplt.ylabel('Count')\nplt.show()","59a2648d":"x_train_32 = np.load('..\/input\/siimisic-melanoma-resized-images\/x_train_32.npy')\nx_test_32 = np.load('..\/input\/siimisic-melanoma-resized-images\/x_test_32.npy')","7fe80e06":"x_train_32.shape","7ab3c064":"x_train_32 = x_train_32.reshape((x_train_32.shape[0], 32*32*3))\nx_train_32.shape","db37eed9":"x_test_32 = x_test_32.reshape((x_test_32.shape[0], 32*32*3))\nx_test_32.shape","2814aaa2":"y = train.target.values","9b528093":"train_oof = np.zeros((x_train_32.shape[0], ))\ntest_preds = 0\ntrain_oof.shape","f0cc762e":"x_train_32","946d0886":"n_splits = 5\nkf = KFold(n_splits=n_splits, random_state=137, shuffle=True)\n\nfor jj, (train_index, val_index) in enumerate(kf.split(x_train_32)):\n    print(\"Fitting fold\", jj+1)\n    train_features = x_train_32[train_index]\n    train_target = y[train_index]\n    \n    val_features = x_train_32[val_index]\n    val_target = y[val_index]\n    \n    model = LogisticRegression(C=1, solver='lbfgs', multi_class='multinomial', max_iter=60)\n    model.fit(train_features, train_target)\n    val_pred = model.predict_proba(val_features)[:,1]\n    train_oof[val_index] = val_pred\n    print(len(train_oof))\n    print(\"Fold AUC:\", roc_auc_score(val_target, val_pred))\n    test_preds += model.predict_proba(x_test_32)[:,1]\/n_splits\n    del train_features, train_target, val_features, val_target\n    gc.collect()","f6affd5b":"print(roc_auc_score(y, train_oof))","41edbcfe":"train['age_approx'].unique()","5c5e11b8":"train['sex'] = (train['sex'].values == 'male')*1\ntest['sex'] = (test['sex'].values == 'male')*1\ntrain.head()","5a841956":"test.head()","c3b5abcb":"train['sex'].mean()","b2f5e441":"test['sex'].mean()","34d3d14a":"train['age_approx'].mean()","8c7f13a3":"test['age_approx'].mean()","e0c054c8":"train['age_approx'] = train['age_approx'].fillna(train['age_approx'].mean())\ntest['age_approx'] = test['age_approx'].fillna(test['age_approx'].mean())","61f7c20e":"x_train_32 = np.hstack([x_train_32, train['sex'].values.reshape(-1,1), train['age_approx'].values.reshape(-1,1)])\nx_test_32 = np.hstack([x_test_32, test['sex'].values.reshape(-1,1), test['age_approx'].values.reshape(-1,1)])","cd3f93c6":"x_train_32[0].shape","ee664109":"train['anatom_site_general_challenge'].unique()\n\ntest['anatom_site_general_challenge'].unique()\n\ntrain['anatom_site_general_challenge'].mode()\n\ntest['anatom_site_general_challenge'].mode()\n\ntrain['anatom_site_general_challenge'].fillna(train['anatom_site_general_challenge'].mode(), inplace=True)\ntest['anatom_site_general_challenge'].fillna(test['anatom_site_general_challenge'].mode(), inplace=True)\n\ntrain['anatom_site_general_challenge'] = train['anatom_site_general_challenge'].astype(str)\ntest['anatom_site_general_challenge'] = test['anatom_site_general_challenge'].astype(str)\n\n# test['anatom_site_general_challenge'].isnull().sum()","d0dbff3e":"train.isna().sum()","5c3da434":"x_train_32.shape","a7a0f028":"x_train_32 = np.hstack([x_train_32, pd.get_dummies(train['anatom_site_general_challenge']).values])\nx_test_32 = np.hstack([x_test_32, pd.get_dummies(test['anatom_site_general_challenge']).values])","09e1d63f":"train.head()","2298a3a8":"x_train_32 = np.hstack([x_train_32, train[['sex','age_approx']].values])\nx_test_32 = np.hstack([x_test_32, test[['sex','age_approx']].values])","dea527e9":"x_train_32.shape","f0eb4cd7":"# x_train_32[: , -6:]","887c0262":"train_oof_3 = np.zeros((x_train_32.shape[0], ))\ntest_preds_3 = 0\n\n\nn_splits = 5\nkf = KFold(n_splits=n_splits, random_state=137, shuffle=True)\n\nfor jj, (train_index, val_index) in enumerate(kf.split(x_train_32)):\n    print(\"Fitting fold\", jj+1)\n    train_features = x_train_32[train_index]\n    train_target = y[train_index]\n    \n    val_features = x_train_32[val_index]\n    val_target = y[val_index]\n    \n    model = LogisticRegression(C=1, solver='lbfgs', multi_class='multinomial', max_iter=60)\n    model.fit(train_features, train_target)\n    val_pred = model.predict_proba(val_features)[:,1]\n    train_oof_3[val_index] = val_pred\n    print(\"Fold AUC:\", roc_auc_score(val_target, val_pred))\n    test_preds_3 += model.predict_proba(x_test_32)[:,1]\/n_splits\n    del train_features, train_target, val_features, val_target\n    gc.collect()","a25543b8":"ans = pd.DataFrame(train_oof_3)","96e03e28":"print(roc_auc_score(y, train_oof_3))","59133134":"sample_submission = pd.read_csv('..\/input\/siim-isic-melanoma-classification\/sample_submission.csv')\nsample_submission.head()","017fecba":"sample_submission['target'] = ans\nsample_submission.to_csv('submission_3.csv', index=False)","55ba0158":"# Do leave an upvote if you liked my work :)","24beb44e":"## Training with Image and tabular data","dc57d48f":"### 33126 images with resolution 32x32x3","46076e0f":"### Lets see Cancer in which body part is more common ? ","aae30643":"Let's now look at the distributions of various \"features\"","5e973b80":"## Overview\n\nThe purpose of this kernel is to take a look at the data, come up with some insights, and attempt to create a predictive model or two. This notebook is still **very** raw. I will work on it as my very limited time permits, and hope to expend it in the upcoming days and weeks.\n\n\n## Packages\n\nFirst, let's load a few useful Python packages. This section will keep growing in subsequent versions of this EDA.","5f22f129":"## We achieved a pretty good accuracy score only with using Logistic Reg. and Image + Tabular data","c9263323":"* Let's now add some non-image features. We can start with sex, and one-hot encode it.","d832b086":"### Cleaning data for input to model","f00836ca":"So this is a binary classification problem with highly imbalanced data.","a7ed2377":"Let's take a look at a few images.","d37b8bd7":"## Training our first model : \n* Image data only\n* Logistic Regression. No Neural Nets used.","bac289f1":"Wow, so we get an 0.82 AUC with just unravelled resized images and a simple Logistic Regression!","09f881f6":"### Saving....","b4cef62b":"Now we will load some of the resized images (32x32 for now) and try to build some simple models. ","27e8feef":"Let's see what files we have in the input directory:","87077230":"* Most common in head\/neck area","491d6abb":"* Filling missing vals","b33f7353":"# ============================================================\n# Merging image and tabular data together\n* One-hot encoding for region of body","1b7a451e":"Let's look at training data now","d3899ea3":"Let's look at the distribution of the target:"}}