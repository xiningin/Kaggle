{"cell_type":{"a134b31f":"code","804e4dd4":"code","8ecf9612":"code","e53c9d75":"code","d7e6e4da":"code","dff97da6":"code","d53f0ab8":"code","b9cb559c":"code","47b7d587":"code","9eb057d8":"code","b244cc09":"code","efcf196f":"code","7475e8c9":"markdown","4894d649":"markdown","791f159f":"markdown","4c4798ad":"markdown"},"source":{"a134b31f":"from glob import glob\nimport os\nimport pandas as pd\nimport numpy as np\nimport re\nfrom PIL import Image\nimport seaborn as sns\nfrom random import randrange\n\n#checnking the input files\nprint(os.listdir(\"..\/input\/rsna-intracranial-hemorrhage-detection\/\"))","804e4dd4":"#reading all dcm files into train and text\ntrain = sorted(glob(\"..\/input\/rsna-intracranial-hemorrhage-detection\/stage_1_train_images\/*.dcm\"))\ntest = sorted(glob(\"..\/input\/rsna-intracranial-hemorrhage-detection\/stage_1_test_images\/*.dcm\"))\nprint(\"train files: \", len(train))\nprint(\"test files: \", len(test))\n\npd.reset_option('max_colwidth')","8ecf9612":"train_df = pd.read_csv('..\/input\/rsna-intracranial-hemorrhage-detection\/stage_1_train.csv')","e53c9d75":"def window_image(img, window_center,window_width, intercept, slope):\n\n    img = (img*slope +intercept)\n    img_min = window_center - window_width\/\/2\n    img_max = window_center + window_width\/\/2\n    img[img<img_min] = img_min\n    img[img>img_max] = img_max\n    return img \n    ","d7e6e4da":"def get_first_of_dicom_field_as_int(x):\n    #get x[0] as in int is x is a 'pydicom.multival.MultiValue', otherwise get int(x)\n    if type(x) == pydicom.multival.MultiValue:\n        return int(x[0])\n    else:\n        return int(x)\n\ndef get_windowing(data):\n    dicom_fields = [data[('0028','1050')].value, #window center\n                    data[('0028','1051')].value, #window width\n                    data[('0028','1052')].value, #intercept\n                    data[('0028','1053')].value] #slope\n    return [get_first_of_dicom_field_as_int(x) for x in dicom_fields]\n    \n    \n    ","dff97da6":"import pydicom\nimport matplotlib.pyplot as plt\ncase = 5\n\ndata = pydicom.dcmread(train[case])\n\n#print(data)\nwindow_center , window_width, intercept, slope = get_windowing(data)\n\n\n#displaying the image\nimg = pydicom.read_file(train[case]).pixel_array\n\nimg = window_image(img, window_center, window_width, intercept, slope)\nplt.imshow(img, cmap=plt.cm.bone)\nplt.grid(False)\n\nprint(data)","d53f0ab8":"TRAIN_IMG_PATH = \"..\/input\/rsna-intracranial-hemorrhage-detection\/stage_1_train_images\/\"\nTEST_IMG_PATH = \"..\/input\/rsna-intracranial-hemorrhage-detection\/stage_1_test_images\/\"\n\ndef view_images(images, title = '', aug = None):\n    width = 5\n    height = 2\n    fig, axs = plt.subplots(height, width, figsize=(15,5))\n    \n    for im in range(0, height * width):\n        data = pydicom.read_file(os.path.join(TRAIN_IMG_PATH,images[im]+ '.dcm'))\n        image = data.pixel_array\n        window_center , window_width, intercept, slope = get_windowing(data)\n        image_windowed = window_image(image, window_center, window_width, intercept, slope)\n\n\n        i = im \/\/ width\n        j = im % width\n        axs[i,j].imshow(image_windowed, cmap=plt.cm.bone) \n        axs[i,j].axis('off')\n        \n    plt.suptitle(title)\n    plt.show()","b9cb559c":"train_df['image'] = train_df['ID'].str.slice(stop=12)\ntrain_df['diagnosis'] = train_df['ID'].str.slice(start=13)\n\nview_images(train_df[(train_df['diagnosis'] == 'epidural') & (train_df['Label'] == 1)][:10].image.values, title = 'Images with epidural')","47b7d587":"view_images(train_df[(train_df['diagnosis'] == 'intraparenchymal') & (train_df['Label'] == 1)][:10].image.values, title = 'Images with intraparenchymal')","9eb057d8":"view_images(train_df[(train_df['diagnosis'] == 'intraventricular')& (train_df['Label'] == 1)][:10].image.values, title = 'Images with intraventricular')","b244cc09":"view_images(train_df[(train_df['diagnosis'] == 'subarachnoid')& (train_df['Label'] == 1)][:10].image.values, title = 'Images with subarachnoid')","efcf196f":"view_images(train_df[(train_df['diagnosis'] == 'subdural') & (train_df['Label'] == 1)][:10].image.values, title = 'Images with subarachnoid')","7475e8c9":"## Load Data","4894d649":"Visualize Sample Images with different diagnosis","791f159f":"# Viewing Dicom CT images with correct  windowing\n\nCT image values correspond to [Hounsfield units](https:\/\/en.wikipedia.org\/wiki\/Hounsfield_scale) (HU).  But the values stored in CT Dicoms are not Hounsfield units, but instead a scaled version.  To extract the Hounsfield units we need to apply a linear transformation, which can be deduced from the Dicom tags.\n\nOnce we have transformed the pixel values to Hounsfield units, we can apply a *windowing*: the usual values for a head CT are a center of 40 and a width of 80, but we can also extract this from the Dicom headers.\n","4c4798ad":"## Visualize Sample Images"}}