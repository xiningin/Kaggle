{"cell_type":{"bebfdd41":"code","b178ed6f":"code","f17090af":"code","4a60ed49":"code","f64ec37f":"code","3981c1c4":"code","07dbf918":"code","d1544de2":"code","aea35b10":"code","3cd08f88":"code","4511b9d7":"code","feda2ad2":"code","47cee1bc":"code","6b1d4975":"code","6971c206":"code","3197638f":"code","b076fe5b":"code","9b1c233d":"code","a25ac4ad":"code","89445ab2":"code","e0b6198a":"markdown","e8c206f6":"markdown","55ff57db":"markdown","3de60e66":"markdown","c5e3bfd7":"markdown"},"source":{"bebfdd41":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","b178ed6f":"df=pd.read_csv('..\/input\/titanic\/train.csv')\ndf.head()","f17090af":"#Checking the outliers after plotting a histogram\nfigure=df.Age.hist(bins=50)\nfigure.set_title('Age')\nfigure.set_xlabel('Age')\nfigure.set_ylabel('No of passenger')","4a60ed49":"#Checking the outliers using boxplot. The black dots are the outliers\nfigure=df.boxplot(column=\"Age\")","f64ec37f":"df['Age'].describe()","3981c1c4":"# Assuming Age follows A Gaussian Distribution we will calculate the boundaries which differentiates the outliers\n\nuppper_boundary=df['Age'].mean() + 3* df['Age'].std()\nlower_boundary=df['Age'].mean() - 3* df['Age'].std()\nprint(lower_boundary), print(uppper_boundary),print(df['Age'].mean())","07dbf918":"figure=df.Fare.hist(bins=50)\nfigure.set_title('Fare')\nfigure.set_xlabel('Fare')\nfigure.set_ylabel('No of passenger')","d1544de2":"df.boxplot(column=\"Fare\")","aea35b10":"df['Fare'].describe()","3cd08f88":"#It can be noted that the difference between 75% and max value has a huge difference","4511b9d7":"# Lets compute the Interquantile range to calculate the boundaries\nIQR=df.Fare.quantile(0.75)-df.Fare.quantile(0.25)","feda2ad2":"#Outliers using IQR*1.5\nlower_bridge=df['Fare'].quantile(0.25)-(IQR*1.5)\nupper_bridge=df['Fare'].quantile(0.75)+(IQR*1.5)\nprint(lower_bridge), print(upper_bridge)","47cee1bc":"# Extreme outliers (using IQR*3)\nlower_bridge=df['Fare'].quantile(0.25)-(IQR*3)\nupper_bridge=df['Fare'].quantile(0.75)+(IQR*3)\nprint(lower_bridge), print(upper_bridge)\n","6b1d4975":"#Copying df into data\ndata=df.copy()","6971c206":"#Replacing all the Age outliers with 73\ndata.loc[data['Age']>=73,'Age']=73","3197638f":"#Replacing all the Fare outliers with 100\ndata.loc[data['Fare']>=100,'Fare']=100","b076fe5b":"figure=data.Age.hist(bins=50)\nfigure.set_title('Fare')\nfigure.set_xlabel('Fare')\nfigure.set_ylabel('No of passenger')","9b1c233d":"figure=data.Fare.hist(bins=50)\nfigure.set_title('Fare')\nfigure.set_xlabel('Fare')\nfigure.set_ylabel('No of passenger')","a25ac4ad":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(data[['Age','Fare']].fillna(0),data['Survived'],test_size=0.3)","89445ab2":"# Applying Logistic Regression\nfrom sklearn.linear_model import LogisticRegression\nclassifier=LogisticRegression()\nclassifier.fit(X_train,y_train)\ny_pred=classifier.predict(X_test)\ny_pred1=classifier.predict_proba(X_test)\n\nfrom sklearn.metrics import accuracy_score,roc_auc_score\nprint(\"Accuracy_score: {}\".format(accuracy_score(y_test,y_pred)))\nprint(\"roc_auc_score: {}\".format(roc_auc_score(y_test,y_pred1[:,1])))","e0b6198a":"## Discussion Related With Outliers And Impact On Machine Learning","e8c206f6":"### Which Machine LEarning Models Are Sensitive To Outliers?\nNaivye Bayes Classifier--- Not Sensitive To Outliers\n\nSVM-------- Not Sensitive To Outliers\n\nLinear Regression---------- Sensitive To Outliers\n\nLogistic Regression------- Sensitive To Outliers\n\nDecision Tree Regressor or Classifier---- Not Sensitive\n\nEnsemble(RF,XGboost,GB)------- Not Sensitive\n\nKNN--------------------------- Not Sensitive\n\nKmeans------------------------ Sensitive\n\nHierarichal------------------- Sensitive\n\nPCA-------------------------- Sensitive\n\nNeural Networks-------------- Sensitive","55ff57db":"### If The Data Is Normally Distributed We use this","3de60e66":"### If Features Are Skewed We Use the below Technique\u00b6","c5e3bfd7":"## Gaussian Distributed"}}