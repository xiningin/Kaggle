{"cell_type":{"4ca1a7f0":"code","16b5a529":"code","fb7e97f1":"code","2643fbaa":"code","606dfa7c":"code","3fae7bd3":"code","c5b2dee9":"code","0c8ce76d":"code","6c661cfa":"code","d85762fd":"code","3806e7c3":"code","8b9074a4":"code","42f63e4b":"code","1438bf90":"code","a0793a7d":"markdown","fb69d945":"markdown","bbddaab0":"markdown","f400dab1":"markdown","7d5781e9":"markdown","4b603c71":"markdown","dd6fc201":"markdown","2a4ba4c3":"markdown","192cde9f":"markdown","2ea3402a":"markdown","cc39af07":"markdown","ee5b87b5":"markdown","972b3b7e":"markdown"},"source":{"4ca1a7f0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","16b5a529":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","fb7e97f1":"ad_data = pd.read_csv(\"..\/input\/advertising\/advertising.csv\")","2643fbaa":"ad_data.head()","606dfa7c":"ad_data.info()","3fae7bd3":"ad_data.describe()","c5b2dee9":"sns.set_style('whitegrid')\nad_data['Age'].hist(bins=30)\nplt.xlabel('Age')","0c8ce76d":"sns.jointplot(x='Age',y='Area Income',data=ad_data)","6c661cfa":"sns.jointplot(x='Daily Time Spent on Site',y='Daily Internet Usage',data=ad_data,color='green')","d85762fd":"sns.pairplot(ad_data,hue='Clicked on Ad',palette='bwr')","3806e7c3":"from sklearn.model_selection import train_test_split\n\nX = ad_data[['Daily Time Spent on Site', 'Age', 'Area Income','Daily Internet Usage', 'Male']]\ny = ad_data['Clicked on Ad']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","8b9074a4":"from sklearn.linear_model import LogisticRegression\n\nlogmodel = LogisticRegression()\nlogmodel.fit(X_train,y_train)","42f63e4b":"predictions = logmodel.predict(X_test)","1438bf90":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test,predictions))","a0793a7d":"**Creating a jointplot of 'Daily Time Spent on Site' vs. 'Daily Internet Usage'**","fb69d945":"** Finally, create a pairplot with the hue defined by the 'Clicked on Ad' column feature.**","bbddaab0":"## Get the Data\n**Read in the advertising.csv file and set it to a data frame called ad_data.**","f400dab1":"** Create a classification report for the model.**","7d5781e9":"## Exploratory Data Analysis\n\nLet's use seaborn to explore the data!\n\n","4b603c71":"** Use info and describe() on ad_data**","dd6fc201":"** Train and fit a logistic regression model on the training set.**","2a4ba4c3":"## Predictions and Evaluations\n** Now predict values for the testing data.**","192cde9f":"\n# Logistic Regression Project \n\nIn this project we will be working with a fake advertising data set, indicating whether or not a particular internet user clicked on an Advertisement on a company website. We will try to create a model that will predict whether or not they will click on an ad based off the features of that user.\n\nThis data set contains the following features:\n\n* 'Daily Time Spent on Site': consumer time on site in minutes\n* 'Age': cutomer age in years\n* 'Area Income': Avg. Income of geographical area of consumer\n* 'Daily Internet Usage': Avg. minutes a day consumer is on the internet\n* 'Ad Topic Line': Headline of the advertisement\n* 'City': City of consumer\n* 'Male': Whether or not consumer was male\n* 'Country': Country of consumer\n* 'Timestamp': Time at which consumer clicked on Ad or closed window\n* 'Clicked on Ad': 0 or 1 indicated clicking on Ad\n\n## Import Libraries\n\n**Importing few libraries **","2ea3402a":"**By removing categorical columns and using all the numerical features to predict the model, we acquired accuracy of 91%**","cc39af07":"# Logistic Regression\n\n\nNow it's time to do a train test split, and train our model!\n\n** Split the data into training set and testing set using train_test_split**","ee5b87b5":"**Check the head of ad_data**","972b3b7e":"**Creating a jointplot showing Area Income versus Age.**"}}