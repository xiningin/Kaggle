{"cell_type":{"508aeece":"code","9293acf3":"code","f743f31e":"code","5dd9c884":"markdown","70625547":"markdown"},"source":{"508aeece":"#Select station\nstation = \"Cortegada\" # stations [\"Cortegada\", \"Coron\"]\n\n\n# Select output format\nH_resolution = False # True 1.3 Km False 4 Km\n\n\n#Select date and time\ndate_input = \"2020-08-07\" # date forecast format \"yyyy-mm-dd\"\n \nhour = 9 # UTC from 0 to 23 ","9293acf3":"import warnings\nwarnings.filterwarnings(\"ignore\")\n!pip install simplekml\nimport simplekml\nimport pickle\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix ,classification_report \nfrom sklearn.model_selection import cross_val_score,cross_validate\nimport seaborn as sns\nfrom sklearn import preprocessing\n\n\n\n#@title select \nlabels = [\"NE\",\"SE\",\"SW\",\"NW\",\"VRB\"]\nthreshold = 2 \nshow_graph = True \ndelete_ten_minutes = False \n\n\n#load database\n\nif station==\"Coron\":\n  join=pd.read_csv(\"..\/input\/wind-coron\/coronD1res4K.csv\")\nelse:\n  join=pd.read_csv(\"..\/input\/wind-coron\/cortegadaD1res4K.csv\")\n\ntable_columns=[]\ntable=[]\ntable_index=[]\n\n#x_var to obtain table columns, table, table_index. No need \"mod\" variables\nX_var=[\"dir_NE\",\"dir_SE\",\"dir_SW\",\"dir_NW\"]\nfor var_pred0 in X_var:\n  var_obs=\"dir_o\"\n  join[var_obs+\"_l\"]=pd.cut(join[var_obs], bins = len(labels), labels = labels).astype(str)\n  join[var_pred0+\"_l\"]=pd.cut(join[var_pred0],bins = len(labels),labels=labels).astype(str)\n  join.loc[join['spd_o'] < threshold, [var_obs+\"_l\"]] = \"VRB\"      \n  join.loc[join[\"mod_\"+var_pred0[-2:]]< threshold,[var_pred0+\"_l\"]]=\"VRB\"\n\n  #results tables\n  res_df=pd.DataFrame({\"pred_var\":join[var_pred0+\"_l\"],\"obs_var\":join[var_obs+\"_l\"]})\n  table.append(pd.crosstab(res_df.obs_var,res_df.pred_var, margins=True,))\n  table_columns.append(pd.crosstab(res_df.obs_var,res_df.pred_var, margins=True,normalize=\"columns\"))\n  table_index.append(pd.crosstab(res_df.obs_var,res_df.pred_var, margins=True,normalize=\"index\")  )\n\n\n\n\nfrom urllib.request import urlretrieve\nfrom datetime import datetime, timedelta, date\nfrom urllib.request import urlretrieve\nimport xarray as xr\n\n#X_var 8 variables\nif station==\"Coron\":\n  filename_in =\"..\/input\/wind-coron\/algorithm\/coron\/coronD1res4K_treedir.h5\"\nelse:\n  filename_in = \"..\/input\/wind-coron\/algorithm\/cortegada\/cortegadaD1res4K_treedir.h5\"\n\n\n\n\ndate_input=datetime.strptime(date_input,  '%Y-%m-%d')\nnp.set_printoptions(formatter={'float_kind':\"{'.0%'}\".format})\n\n#getting model variables\n\n#creating the string_url\n#analysis day= Yesterday. Time 00:00Z. \ndatetime_str = (date_input-timedelta(days = 1)).strftime('%Y%m%d')\n\n#day to forecast 1= D+1 , 2 =D+2 and so on \nforecast=1\ndataframes=[]\ndate_anal = datetime.strptime(datetime_str,'%Y%m%d')\ndate_fore=(date_anal+timedelta(days=forecast)).strftime('%Y-%m-%d')\n\n# points NE,SE,SW,Nw\nif station==\"Coron\":\n  coordenates=[\"latitude=42.6088&longitude=-8.7588&\",\"latitude=42.5729&longitude=-8.7619&\"\n,\"latitude=42.5752&longitude=-8.8107&\",\"latitude=42.6110&longitude=-8.8076&\"]\nelse:\n  coordenates=[\"latitude=42.6446&longitude=-8.7557&\",\"latitude=42.6088&longitude=-8.7588&\"\n,\"latitude=42.6110&longitude=-8.8076&\",\"latitude=42.6469&longitude=-8.8045&\"]\n\n\n#variables string type to perform url. The same variables as model (AI)\n\ndataframes=[]\nfor coordenate in coordenates:\n  head=\"http:\/\/mandeo.meteogalicia.es\/thredds\/ncss\/wrf_2d_04km\/fmrc\/files\/\"\n  text1=\"\/wrf_arw_det_history_d03_\"+datetime_str+\"_0000.nc4?\"\n  met_var=\"var=dir&var=mod&var=wind_gust&\"\n  scope1=\"time_start=\"+date_fore+\"T00%3A00%3A00Z&\"\n  scope2=\"time_end=\"+date_fore+\"T23%3A00%3A00Z&accept=netcdf\"\n  #add all the string variables\n  url=head+datetime_str+text1+met_var+coordenate+scope1+scope2\n  #load the actual model from Meteogalicia database and transform as pandas dataframe\n  urlretrieve(url,\"model\")\n  dataframes.append(xr.open_dataset(\"model\").to_dataframe().set_index(\"time\").loc[:, 'dir':])\nE = dataframes[0].join(dataframes[1], lsuffix='_NE', rsuffix='_SE')\nW = dataframes[2].join(dataframes[3], lsuffix='_SW', rsuffix='_NW')\nmodel=E.join(W)\n\n\n\n#label model results\n\ninterval=pd.cut(join[var_obs],4,retbins = True,)[0].cat.categories\ncorrespondence={\"(-0.36, 90.0]\":\"NE\",\"(90.0, 180.0]\":\"SE\",\"(180.0, 270.0]\":\"SW\",\"(270.0, 360.0]\":\"NW\"}\nmodel[\"dir_NE_l\"]=pd.cut(model[\"dir_NE\"],bins = interval).astype(str).map(correspondence)\nmodel.loc[model['mod_NE'] < threshold, [\"dir_NE_l\"]] = \"VRB\"  \nmodel[\"dir_SE_l\"]=pd.cut(model[\"dir_SE\"],bins = interval).astype(str).map(correspondence)\nmodel.loc[model['mod_SE'] < threshold, [\"dir_SE_l\"]] = \"VRB\"  \nmodel[\"dir_SW_l\"]=pd.cut(model[\"dir_SW\"],bins = interval).astype(str).map(correspondence)\nmodel.loc[model['mod_SW'] < threshold, [\"dir_SW_l\"]] = \"VRB\"  \nmodel[\"dir_NW_l\"]=pd.cut(model[\"dir_NW\"],bins = interval).astype(str).map(correspondence)\nmodel.loc[model['mod_NW'] < threshold, [\"dir_NW_l\"]] = \"VRB\"  \n\n#load \n\nclf1 = pickle.load(open(filename_in, 'rb'))\n#get Y\n\nY=join[var_obs+\"_l\"]\n\n#independent variables. With mod variable\nX_var = ['dir_NE', 'dir_SE','dir_NW', 'dir_SW',\"mod_NE\",\"mod_SE\",\"mod_SW\",\"mod_NW\"]\nX=join[X_var]\n\n\n#we  scale and split\n\n\nx_train, x_test, y_train, y_test = train_test_split(X,Y, test_size=0.2,random_state=42)\n\ny_pred=clf1.predict(x_test)\ny_pred_df=pd.DataFrame({\"var_pred\":y_pred},index=y_test.index)\ntable_columns1=pd.crosstab(y_test,y_pred_df[\"var_pred\"], margins=True,normalize=\"columns\")\n\n\n\n\n\n#scale X_var. Same scale NN trained\n\n\nmodel[var_obs+\"_ML\"]=clf1.predict(model[X_var])\n\n\n\n\n#station results\ntry:\n  station_r=True\n  variables_station=[\"spd_o_corte\",\"std_spd_o_corte\",\"gust_spd_o_corte\",\"dir_o_corte\"]\n  param=[\"param=81\",\"param=10009\",\"param=10003\",\"param=82\"]\n\n  head=\"http:\/\/www2.meteogalicia.gal\/galego\/observacion\/plataformas\/historicosAtxt\/DatosHistoricosTaboas_dezminutalAFicheiro.asp?\"\n\n  \"\"\"Cortegada platform:15001, Ribeira buoy:15005 warnings: wind intensity negatives!!\"\"\"\n  station_n=\"est=15001&\"\n\n\n  dateday=\"&data1=\"+date_input.strftime(\"%d\/%m\/%Y\")+\"&data2=\"+(date_input+timedelta(days = 1)).strftime(\"%d\/%m\/%Y\")\n\n  \"\"\"param=83 (air temperature C) ,10018 (dew temperature C),86 (humidity%)\n  ,81(wind speed m\/s),10003 (wind gust m\/s),10009 (std wind speed m\/s)\n  ,82 (wind direction degrees),10010 (std wind direction degrees),\n  10015 (gust direcction degree),20003 (temperature sea surface C),20005 (salinity),\n  20004 (conductivity mS\/cm),20017 (density anomaly surface kg\/m^3),20019 (deep sea temperature degrees)\n  ,20018 (deep sea salinity),20022 (deep sea conductivity mS\/cm),20021 (density anomaly deep sea kg\/m^3),\n  20020 (Presure water column db),20804 (East current compound cm\/s) ,20803 (North current compound cm\/s)\"\"\"\n\n  df_station=pd.DataFrame()\n  for parameters, var in zip(param,variables_station):\n    url3=head+station_n+parameters+dateday\n\n    #decimal are comma ,!!\n    df=pd.read_fwf(url3,skiprows=24,sep=\" \",encoding='latin-1',decimal=',').dropna()\n    df_station[\"datetime\"]=df[\"DATA\"]+\" \"+df['Unnamed: 2']\n    df_station['datetime'] = pd.to_datetime(df_station['datetime'])\n    df_station[var]=df['Valor'].astype(float)\n\n  df_station=df_station.set_index(\"datetime\") \n  df_station[\"dir_o_corte_l\"]=pd.cut(df_station[\"dir_o_corte\"], bins = interval).astype(str).map(correspondence)  \n  df_station.loc[df_station['spd_o_corte'] < threshold, [\"dir_o_corte_l\"]] = \"VRB\" \nexcept:\n  station_r=False\n  df_station=pd.DataFrame(index=model.index,columns=[\"dir_o_corte\", \"dir_o_corte_l\"])  \n\n#merge station with meteorological model and plot\n\nfinal=pd.merge(model, df_station, left_index=True, right_index=True, how='outer')\nif show_graph and station_r:\n  g1=(final[['dir_NE',\"dir_SE\",\"dir_SW\",\"dir_NW\",\"dir_o_corte\"]]).dropna().plot(title=\"wind dir\",figsize=(9,5)).grid(True,which='both')\n  \n\n#reample observed data hourly and show all data about spd\npd.options.display.max_rows = 999\n\nif delete_ten_minutes:\n  final_s=final[[\"dir_NE\",\"dir_NE_l\",\"dir_SE\",\"dir_SE_l\",\"dir_SW\",\"dir_SW_l\",\n                 \"dir_NW\",\"dir_NW_l\",\"dir_o_ML\",\"dir_o_corte\",\n                 \"dir_o_corte_l\"]].dropna()\nelse:\n  final_s=final[[\"dir_NE\",\"dir_NE_l\",\"dir_SE\",\"dir_SE_l\",\"dir_SW\",\"dir_SW_l\",\n                 \"dir_NW\",\"dir_NW_l\",\"dir_o_ML\",\"dir_o_corte\",\"dir_o_corte_l\"]]\n\n\n\n\"\"\"***********************************\"\"\"\n\n\nq_df=final[[\"dir_NE_l\",\"dir_SE_l\",\"dir_SW_l\",\"dir_NW_l\",var_obs+\"_ML\"]].dropna()\npd.set_option('max_colwidth', 2000)\nquantum_metmod_NE=[]\nquantum_metmod_SE=[]\nquantum_metmod_SW=[]\nquantum_metmod_NW=[]\nquantum_ML=[]\ntablenew=[]\nfor i in range (0,4):\n  tablenew.append(table_columns[i].rename(mapper=str,axis=1))\nfor i in range(0, len(q_df.index)):\n  quantum_metmod_NE.append(tablenew[0][q_df[\"dir_NE_l\"][i]].map(\"{:.0%}\".format))\n  quantum_metmod_SE.append(tablenew[1][q_df[\"dir_SE_l\"][i]].map(\"{:.0%}\".format))\n  quantum_metmod_SW.append(tablenew[2][q_df[\"dir_SW_l\"][i]].map(\"{:.0%}\".format))\n  quantum_metmod_NW.append(tablenew[3][q_df[\"dir_NW_l\"][i]].map(\"{:.0%}\".format))\n \n  quantum_ML.append(table_columns1[q_df[var_obs+\"_ML\"][i]].map(\"{:.0%}\".format))\n  \nquantum_fi=pd.DataFrame({\"NE\":quantum_metmod_NE,\"SE\":quantum_metmod_SE,\n                         \"SW\":quantum_metmod_SW,\"NW\":quantum_metmod_NW,\n                         \"ML\":quantum_ML}, index=q_df.index)\n\n\n\n\n\nvariable_met = \"dir\"\n\n\ntoday=date_input\nyesterday=today+timedelta(days=-1)\ntoday=today.strftime(\"%Y-%m-%d\")\nyesterday=yesterday.strftime(\"%Y%m%d\")\n\n\nurl1=\"http:\/\/mandeo.meteogalicia.es\/thredds\/ncss\/wrf_2d_04km\/fmrc\/files\/\"+yesterday+\"\/wrf_arw_det_history_d03_\"+yesterday+\"_0000.nc4?var=lat&var=lon&var=\"+variable_met+\"&north=42.68&west=-9.00&east=-8.65&south=42.250&disableProjSubset=on&horizStride=1&time_start=\"+today+\"T\"+str(hour)+\"%3A00%3A00Z&time_end=\"+today+\"T\"+str(hour)+\"%3A00%3A00Z&timeStride=1&accept=netcdf\"\nurl2=\"http:\/\/mandeo.meteogalicia.es\/thredds\/ncss\/wrf_1km_baixas\/fmrc\/files\/\"+yesterday+\"\/wrf_arw_det1km_history_d05_\"+yesterday+\"_0000.nc4?var=lat&var=lon&var=\"+variable_met+\"&north=42.68&west=-9.00&east=-8.65&south=42.250&disableLLSubset=on&disableProjSubset=on&horizStride=1&time_start=\"+today+\"T\"+str(hour)+\"%3A00%3A00Z&time_end=\"+today+\"T\"+str(hour)+\"%3A00%3A00Z&timeStride=1&accept=netcdf\"\nif H_resolution:\n  url=url2\n  r=\"HI_\"\nelse:\n  url=url1\n  r=\"LO_\"\n\n\nurlretrieve(url,\"model\")\ndf=xr.open_dataset(\"model\").to_dataframe()\ndf_n=pd.DataFrame(df[[\"lat\",\"lon\",variable_met]].values,columns=df[[\"lat\",\"lon\",variable_met]].columns)\n\n\n  \n\ndf_n[variable_met]=(round(df_n[variable_met],-1)).astype(str)\nkml = simplekml.Kml()\ndf_n.apply(lambda X: kml.newpoint(name=X[variable_met], coords=[( X[\"lon\"],X[\"lat\"])]) ,axis=1)\n\n#add description tag\ntag= \"Wind direction\\n\"\n  \n#add Cortegada velocity and ML prediction\ndescription=tag+quantum_fi.columns[4]+\" \"+str(quantum_fi.iloc[hour,4])[:-15]\nstring=final.index.strftime(\"%Y-%m-%d\")[0]+\" \"+str(hour)+\":00:00\"\n\nif station==\"Cortegada\":\n  kml.newpoint(name=str(final['dir_o_corte_l'].loc[string]), description=description,coords=[(-8.7836,42.6255)]) \nelse:\n  kml.newpoint(name=\"Coron\", description=description,coords=[(-8.8046,42.5801)]) \n\n#Add model stadistical results four corners\nif station==\"Cortegada\":\n  descriptionNE=tag+quantum_fi.columns[0]+\" \"+str(quantum_fi.iloc[hour,0])[:-15]\n  kml.newpoint(name=str(final['dir_NE_l'].loc[string]),description=descriptionNE,coords=[(-8.7557,42.6446)])\n  descriptionSE=tag+quantum_fi.columns[1]+\" \"+str(quantum_fi.iloc[hour,1])[:-15]\n  kml.newpoint(name=str(final['dir_SE_l'].loc[string]),description=descriptionSE,coords=[(-8.7588,42.6090)])\n  descriptionSW=tag+quantum_fi.columns[2]+\" \"+str(quantum_fi.iloc[hour,2])[:-15]\n  kml.newpoint(name=str(final['dir_SW_l'].loc[string]),description=descriptionSW,coords=[(-8.8076,42.6115)])\n  descriptionNW=tag+quantum_fi.columns[3]+\" \"+str(quantum_fi.iloc[hour,3])[:-15]\n  kml.newpoint(name=str(final['dir_NW_l'].loc[string]),description=descriptionNW,coords=[(-8.8045,42.6469)])  \nelse:\n  descriptionNE=tag+quantum_fi.columns[0]+\" \"+str(quantum_fi.iloc[hour,0])[:-15]\n  kml.newpoint(name=str(final['dir_NE_l'].loc[string]),description=descriptionNE,coords=[(-8.7588,42.6080)])\n  descriptionSE=tag+quantum_fi.columns[1]+\" \"+str(quantum_fi.iloc[hour,1])[:-15]\n  kml.newpoint(name=str(final['dir_SE_l'].loc[string]),description=descriptionSE,coords=[(-8.7619,42.5729)])\n  descriptionSW=tag+quantum_fi.columns[2]+\" \"+str(quantum_fi.iloc[hour,2])[:-15]\n  kml.newpoint(name=str(final['dir_SW_l'].loc[string]),description=descriptionSW,coords=[(-8.8107,42.5752)])\n  descriptionNW=tag+quantum_fi.columns[3]+\" \"+str(quantum_fi.iloc[hour,3])[:-15]\n  kml.newpoint(name=str(final['dir_NW_l'].loc[string]),description=descriptionNW,coords=[(-8.8076,42.6108)])  \n\n  \n  \n#save results\n\nkml.save(today+\"H\"+str(hour)+r+variable_met+\"_ML\"+\".kml\")\n\n\n\n\nfinal_s","f743f31e":"quantum_fi","5dd9c884":"\n**KML file description**\n![image.png](attachment:image.png)","70625547":"**The notebook provides a way to obtain wind direction at the selected meteorological station. There are two meteorological stations: Cortegada and Coron. The outputs will be four cardinal quadrants. Labels are NE (wind from 0\u00ba to 89\u00ba), SE (wind direction from 90\u00ba to 179\u00ba), SW (wind direction from 180\u00ba to 269\u00ba), and NW (wind from 270\u00ba to 359\u00ba).  When wind intensity less than 2 m\/s, wind direction will be labeled as variable wind (VRB). We get a KML file and two-screen outputs.**\n1. KML file displays all the model points and the station selected. There are two possible models to show: WRF with resolutions 1.3 Km and 4 Km. All the calculations are made at the 4 Km resolution model. The right picture shows the location of Cortegada station surrounded by the nearest meteorological points from the WRF model (from the Meteogalicia database). Points are labeled as NE, SE, SW, NW. If you click at these points, you will get the probability of every possible outcome at the meteorological station. We obtained this probability function comparing historical data at the station and the meteorological model at the point chosen. The file that contains all the information about has the format: stationnameD1res4K. D1 means the model forecast of the day+1 (from 24 to 48 hours). res4K is the model spatial resolution. It means that points separation is 4 Km. Clicking at the station, we get all the possibles wind direction outcomes from the machine learning algorithm. Files in format PowerPoint at the data set Wind Ria Arousa contains the performance results of machine learning algorithms and meteorological models\n2. The first table shows the following columns: wind direction at every cardinal point near the station from the meteorological model (numerical result), wind direction from the meteorological model (labeled), wind direction forecasted by the machine learning algorithm, and, at Cortegada actual wind direction at the station. Rows are the time. Meteorological models and machine learning algorithms report every hour. The actual data indicates every ten minutes. Finally, we can see a plot with wind direction at every point near the station and the real wind direction at the station.\n3. The second table, \"quantum_fi,\" shows from every point near the station and the machine learning algorithm all the possibles outputs of wind direction and their probability."}}