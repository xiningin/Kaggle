{"cell_type":{"3e4631ad":"code","5de93eaf":"code","bb7cbf5d":"code","97bad605":"code","a4a35a7b":"code","7e946746":"code","d1bd7b84":"code","6a65defa":"code","44860669":"code","47568bea":"code","093b30cb":"code","f6436e8f":"code","97b98bb5":"code","d402d3be":"code","fafa4667":"code","326464eb":"code","82c0b660":"code","4db38be5":"code","d4164987":"code","3904e324":"code","e6df3132":"code","42f7c70c":"code","621cc5e4":"code","3830fbd5":"code","e025e605":"markdown","9e354ed8":"markdown","e8e826a3":"markdown","3d65249a":"markdown","c886c4a4":"markdown","95c80129":"markdown","455dab61":"markdown","b01dadc4":"markdown","b64b974d":"markdown","f8d22ebd":"markdown","028089fa":"markdown","b7dea6d1":"markdown","54fe6619":"markdown","ab31dd95":"markdown"},"source":{"3e4631ad":"# import dependencies\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","5de93eaf":"df = pd.read_csv('..\/input\/crime.csv',encoding='ISO-8859-1')\n\ndf.head()","bb7cbf5d":"print(df.info())\nprint(' ')\nprint(df.describe())\nprint(' ')\nprint(df.shape)\nprint(' ')\nprint(df.columns)\nprint(' ')\nprint(df.dtypes)","97bad605":"figure = plt.figure(figsize=(13,6))\nsns.heatmap(df.isnull(),yticklabels='')\nplt.title('Null Values')\n\n# plt.savefig('images\/nullValueHeatMap.png',bbox_inches = 'tight')","a4a35a7b":"# DROP NULL VALUES ??????","7e946746":"# create DF of unique offense and how many times they occured. \noffenseCounts = pd.DataFrame(df['OFFENSE_CODE_GROUP'].value_counts()).reset_index()\n# rename columns\noffenseCounts.rename(columns={'index':'Offense','OFFENSE_CODE_GROUP':'Count'}, inplace=True)\noffenseCounts.head(10)","d1bd7b84":"figure = plt.figure(figsize=(10,15))\nsns.barplot(x=offenseCounts['Count'],y=offenseCounts['Offense'],palette='Set3')\nplt.ylabel('Offense')\nplt.xlabel('Count')\nsns.despine()\n# plt.savefig('images\/offenseCount.png',bbox_inches = 'tight')","6a65defa":"crimeAreas = pd.DataFrame(df['STREET'].value_counts()).reset_index()\ncrimeAreas.rename(columns={'index':'Street','STREET':'Count'},inplace=True)\ncrimeAreas.head(10)","44860669":"figure = plt.figure(figsize=(10,10))\n\nsns.barplot(x=crimeAreas['Count'].iloc[:15],y=crimeAreas['Street'].iloc[:15],palette='Set3')\nplt.ylabel('Street')\nplt.xlabel('Count')\nplt.title('Top Ten Offense Streets')\nsns.despine()\n# plt.savefig('images\/streetsOffenseCount.png',bbox_inches = 'tight')","47568bea":"districtCrimeRate = pd.DataFrame(df['DISTRICT'].value_counts()).reset_index()\ndistrictCrimeRate.rename(columns={'index':'District','DISTRICT':'Count'},inplace=True)\ndistrictCrimeRate.head(10)","093b30cb":"figure = plt.figure(figsize=(10,10))\n\nsns.barplot(x=districtCrimeRate['Count'].iloc[:15],y=districtCrimeRate['District'].iloc[:15],palette='Set3')\nplt.ylabel('District')\nplt.xlabel('Count')\nplt.title('Districts with the most commited Offenses')\nsns.despine()\n# plt.savefig('images\/districtOffenseCount.png',bbox_inches = 'tight')","f6436e8f":"offenseByDistrict = pd.DataFrame(df.groupby(['DISTRICT','OFFENSE_CODE_GROUP'])['OFFENSE_CODE_GROUP'].count())\n\noffenseByDistrict.rename(columns={'OFFENSE_CODE_GROUP':'Count'},inplace=True)\n\noffenseByDistrict.sort_values(['DISTRICT','Count'],ascending=False,inplace=True)\n\noffenseByDistrict.head()","97b98bb5":"# grab list of top ten offense from offenseCounts table\ntopTenOffensesList = (offenseCounts['Offense'].loc[:9]).tolist()\nprint(topTenOffensesList)\n\n# reset index of offenseByDistrict Table \noffenseByDistrictPlot = offenseByDistrict.reset_index()\n# filter table by top ten offenses\noffenseByDistrictPlot = pd.DataFrame(offenseByDistrictPlot[offenseByDistrictPlot['OFFENSE_CODE_GROUP'].isin(topTenOffensesList)])\n\noffenseByDistrictPlot.head()","d402d3be":"sns.set_context('paper',font_scale=2.5)\nsns.set_style('white')\nfigure = plt.figure(figsize=(20,10))\n\nsns.barplot(x=offenseByDistrictPlot['DISTRICT'],y=offenseByDistrictPlot['Count'],\n            hue=offenseByDistrictPlot['OFFENSE_CODE_GROUP'],edgecolor='black',linewidth=.1,palette='Set3')\nplt.legend(bbox_to_anchor=(1,1), loc='best', borderaxespad=1.1)\nplt.title('Overall Top Offenses commited by District')\n# plt.ylabel('Count',{'fontsize':22})\n# plt.xlabel('District',{'fontsize':22})\n\n# plt.savefig('images\/offensesByDistrict.png',bbox_inches = 'tight')","fafa4667":"offenseHeatDf = offenseByDistrictPlot.pivot(index='OFFENSE_CODE_GROUP',columns='DISTRICT',values='Count')\noffenseHeatDf","326464eb":"figure = plt.figure(figsize=(15,10))\n\nsns.heatmap(offenseHeatDf,linecolor='white',linewidth=.1,cmap='magma',)\nplt.ylabel(' ')\nplt.ylabel(' ')\nplt.title('Heatmap of Offenses Commited by District')\n# plt.savefig('images\/districtsOffenseHeatMap.png',bbox_inches='tight')","82c0b660":"byDayDF = pd.DataFrame(df.groupby(['DAY_OF_WEEK'])['OFFENSE_CODE_GROUP'].count()).reset_index().rename(columns={'DAY_OF_WEEK':'Day','OFFENSE_CODE_GROUP':'Count'})\n\nbyDayDF['Day'] = pd.Categorical(byDayDF['Day'], categories=\n    ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday', 'Sunday'],\n    ordered=True)\n\nbyDayDF.sort_values(by='Day')","4db38be5":"sns.set()\nsns.set_style('ticks')\n\nfigure = plt.figure(figsize=(15,2))\nsns.barplot(x=byDayDF['Day'],y=byDayDF['Count'],palette='magma',)\nsns.despine()\nplt.ylabel(' ')\nplt.title('Crimes Commited by Day')\n# plt.savefig('images\/crimesCountByDay.png')","d4164987":"crimeByDayCatg = pd.DataFrame(df.groupby(['DAY_OF_WEEK','OFFENSE_CODE_GROUP'])['OFFENSE_CODE_GROUP'].count())\n\ncrimeByDayCatg.rename(columns={'OFFENSE_CODE_GROUP':'Count'},inplace=True)\n\ncrimeByDayCatg.reset_index(inplace=True)\n\n\ncrimeByDayCatg['DAY_OF_WEEK'] = pd.Categorical(crimeByDayCatg['DAY_OF_WEEK'], categories=\n    ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday', 'Sunday'],\n    ordered=True)\n\ncrimeByDayCatg.sort_values(by='DAY_OF_WEEK')\n\n# filter table to only include the overall top ten offenses. \ncrimeByDayCatgHeatTopTen = pd.DataFrame(crimeByDayCatg[crimeByDayCatg['OFFENSE_CODE_GROUP'].isin(topTenOffensesList)])\n\n# pivot table to create heat map\ncrimeByDayCatgHeat = crimeByDayCatgHeatTopTen.pivot(index='OFFENSE_CODE_GROUP',columns='DAY_OF_WEEK',values='Count').fillna(0)\n\ncrimeByDayCatgHeat.head()","3904e324":"sns.set()\nsns.set_context('paper',font_scale=1.5)\n\nfigure = plt.figure(figsize=(10,7))\nsns.heatmap(crimeByDayCatgHeat,linecolor='white',linewidths=1,cmap='magma',)\n\nplt.ylabel(' ')\nplt.xlabel(' ')\nplt.xticks(rotation=30)\nplt.title('Heatmap of Top Ten Offenses by Weekday')\n# plt.savefig('images\/offenseByWeekdayHeatmap.png')","e6df3132":"offensesByYear = pd.DataFrame(df.groupby(['YEAR'])['OFFENSE_CODE_GROUP'].count()).reset_index().rename(columns={'OFFENSE_CODE_GROUP':'Count'})\noffensesByYear\n\nsns.set()\nsns.set_style('white')\n\nfigure = plt.figure(figsize=(12,3))\n\nsns.barplot(x=offensesByYear['YEAR'],y=offensesByYear['Count'],palette='magma')\nsns.despine()\nplt.ylabel(' ')\nplt.xlabel(' ')\nplt.title('Total Crimes Commited by Year')\n\n# plt.savefig('images\/crimesByyear.png')","42f7c70c":"# create list of unique years to use later \nyears = df['YEAR'].unique().tolist()\nprint(years)\n\n# create df that is grouped by year and offense code and tallys up the distinct offenses\noffensesByYearCatg = pd.DataFrame(df.groupby(['YEAR','OFFENSE_CODE_GROUP'])[['OFFENSE_CODE_GROUP']].count())\n#  rename second offense_code_group column to 'Count'\noffensesByYearCatg.columns = ['Count']\n\n#  reset index to set all columns on same level, makes it easier to access and filter by later on. \noffensesByYearCatg.reset_index(inplace=True)\n\n#  order by the year and count columns from largest to smallest\noffensesByYearCatg = offensesByYearCatg.sort_values(by=['YEAR','Count'],ascending=False)\n\noffensesByYearCatg.head()","621cc5e4":"#  create blank data frame\ntopTenOffensesbyYear = pd.DataFrame()\n\n# loop through years array created earlier and create df that only contains the top ten offenses commited per year\nfor x in range(len(years)):\n    \n#     as we loop through each year 'years[x]' 2017,2018 ect append the top ten offenses for each year. \n\n#     offensesByYearCatg[offensesByYearCatg['YEAR'] == 2018][:10]\n\n    topTenOffensesbyYear = topTenOffensesbyYear.append(offensesByYearCatg[offensesByYearCatg['YEAR'] == years[x]][:10])\n    \nprint(topTenOffensesbyYear.shape)\ntopTenOffensesbyYear","3830fbd5":"figure = plt.figure(figsize=(18,6))\n\nsns.set_context('paper',font_scale=1.5,)\nsns.barplot(x=topTenOffensesbyYear['YEAR'],y=topTenOffensesbyYear['Count'],hue=topTenOffensesbyYear['OFFENSE_CODE_GROUP'],\n            palette='Set3')\n# plt.xticks(rotation=88)\nplt.legend(bbox_to_anchor=(1,1), loc='best', borderaxespad=1.1)\nsns.despine()\nplt.title('Top Ten Offenses by Year')\nplt.ylabel('')\nplt.xlabel('')","e025e605":"## Overview of Offenses","9e354ed8":"## Offenses by District according to Overall Top Ten Offenses","e8e826a3":"## Offenses by District","3d65249a":"#### Top ten Offenses","c886c4a4":"## Lets see if there are any days of the week are more likely to have offenses commited?","95c80129":"## Taking a look at our data.","455dab61":"## Which districts have the highest rate of offenses?","b01dadc4":"## Top Ten Offenses by Year","b64b974d":"## How have the rate of offenses changed over the years?\n","f8d22ebd":"## Top Offenses by Year according to overall top Ten Offenses","028089fa":"## Heatmap of Offenses by District","b7dea6d1":"## Read in Data\n","54fe6619":"## Lets take a look at any missing data\nFrom the heatmap below we can see that the shooting column contains mostly NaN values. Not sure if these NaN values mean there was not a shooting or is it just missing information?","ab31dd95":"## Are certain areas more  susceptible to crime?"}}