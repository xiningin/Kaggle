{"cell_type":{"b87aaafa":"code","f6e9e3c5":"code","807f7f6a":"code","4d715c38":"code","27af1afe":"code","807095b4":"code","00f0d21c":"code","f5607e74":"code","80d96621":"code","4b56f8a3":"code","41d84647":"code","9bf03a15":"code","9e38b01d":"code","f8c100a1":"code","c66eb122":"code","f8b91fad":"code","a858238d":"code","1d5b07db":"code","bdd4e3db":"code","c1f3386c":"code","3f948f8f":"code","80c808c7":"code","d859d0cf":"code","ead0002f":"code","df430b31":"code","d4c42920":"code","746e4812":"code","bdf099f4":"code","f859633d":"code","4e0e22fd":"markdown","efec9893":"markdown","4f3e0104":"markdown","963a120d":"markdown","59503998":"markdown","7c42f991":"markdown","f48e63d3":"markdown","13a6ce49":"markdown","558090ff":"markdown","cb790088":"markdown","3f851f4a":"markdown","cac8ba59":"markdown","26ebe9e0":"markdown","c0b0faa4":"markdown","612efa38":"markdown","3c39e08c":"markdown","a6275b8c":"markdown","dc169fa3":"markdown","cb771f13":"markdown","ab63e893":"markdown","a61f2a40":"markdown","6db0fd6b":"markdown","ebcc1099":"markdown","30a48579":"markdown","422b92eb":"markdown"},"source":{"b87aaafa":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier","f6e9e3c5":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nfull_data = [train, test]","807f7f6a":"train.info()","4d715c38":"print(train[['Sex', 'Survived']].groupby(['Sex']).describe())","27af1afe":"print(train[['Pclass', 'Survived']].groupby(['Pclass']).describe())","807095b4":"print(train[['Fare', 'Survived']].groupby(['Fare']).describe().head(20))","00f0d21c":"df = train.copy()\ndf['RoundFare'] = train['Fare'].round(-1).astype(int)\nprint(df[['RoundFare', 'Survived']].groupby(['RoundFare']).describe())","f5607e74":"for dataset in full_data:\n    boundary_value = 50\n    dataset['CategoryFare'] = dataset['Fare'].apply(lambda x: 0 if x <= boundary_value else 1)\nprint(train[['CategoryFare', 'Survived']].groupby(['CategoryFare']).describe())","80d96621":"print(train[['Embarked', 'Survived']].groupby(['Embarked']).describe())","4b56f8a3":"for dataset in full_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\nprint(train[['Embarked', 'Survived']].groupby(['Embarked']).describe())","41d84647":"for dataset in full_data:\n    dataset['FamirySize'] = dataset['SibSp'] + dataset['Parch'] + 1\nprint(train[['Sex', 'FamirySize', 'Survived']].groupby(['Sex', 'FamirySize']).describe())","9bf03a15":"for dataset in full_data:\n    boundary_value = 4\n    dataset['IsBigFamiry'] = dataset['FamirySize'].apply(lambda x: 0 if x <= boundary_value else 1)\nprint(train[['Sex', 'IsBigFamiry', 'Survived']].groupby(['Sex', 'IsBigFamiry']).describe())","9e38b01d":"print(train[['Age', 'Survived']].groupby(['Age']).describe())","f8c100a1":"df = train.copy()\ndf['AgeGroups'] = pd.cut(df['Age'], np.arange(0, 201, 10))\nprint(df[['Sex', 'Pclass', 'AgeGroups', 'Survived']].groupby(['Sex', 'Pclass', 'AgeGroups']).describe())","c66eb122":"alone = df.loc[(df['FamirySize'] == 1)]\nprint(alone[['Pclass', 'Sex', 'Age']].groupby(['Pclass', 'Sex']).describe())","f8b91fad":"famiry = df.loc[df['FamirySize'] > 1]\nprint(famiry[['FamirySize','Pclass', 'Sex', 'Age']].groupby(['FamirySize', 'Pclass', 'Sex']).describe())","a858238d":"df['RoundFamirySize'] = df['FamirySize'].apply(lambda x: x if x <= 3 else 4)\nprint(df[['RoundFamirySize','Pclass', 'Sex', 'Age']].groupby(['RoundFamirySize', 'Pclass', 'Sex']).describe())","1d5b07db":"for dataset in full_data:\n    dataset['RoundFamirySize'] = dataset['FamirySize'].apply(lambda x: x if x <= 3 else 4)\n    # RoundFamirySize = 1\n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 1) \n                & (dataset['Pclass'] == 1) \n                & (dataset['Sex'] == 'male')\n                , 'Age'] = 44\n     \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 1) \n                & (dataset['Pclass'] == 1) \n                & (dataset['Sex'] == 'female')\n                , 'Age'] = 34\n\n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 1) \n                & (dataset['Pclass'] == 2) \n                , 'Age'] = 33\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 1) \n                & (dataset['Pclass'] == 3) \n                & (dataset['Sex'] == 'male')\n                , 'Age'] = 29\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 1) \n                & (dataset['Pclass'] == 3) \n                & (dataset['Sex'] == 'female')\n                , 'Age'] = 23\n    \n    # RoundFamirySize = 2\n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 2) \n                & (dataset['Pclass'] == 1) \n                & (dataset['Sex'] == 'male')\n                , 'Age'] = 37\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 2) \n                & (dataset['Pclass'] == 1) \n                & (dataset['Sex'] == 'female')\n                , 'Age'] = 36\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 2) \n                & (dataset['Pclass'] == 2) \n                & (dataset['Sex'] == 'male')\n                , 'Age'] = 33\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 2) \n                & (dataset['Pclass'] == 2) \n                & (dataset['Sex'] == 'female')\n                , 'Age'] = 28\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 2) \n                & (dataset['Pclass'] == 3) \n                & (dataset['Sex'] == 'male')\n                , 'Age'] = 24\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 2) \n                & (dataset['Pclass'] == 3) \n                & (dataset['Sex'] == 'female')\n                , 'Age'] = 22\n    \n    # RoundFamirySize = 3\n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 3) \n                & (dataset['Pclass'] == 1) \n                & (dataset['Sex'] == 'male')\n                , 'Age'] = 42\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 3) \n                & (dataset['Pclass'] == 1) \n                & (dataset['Sex'] == 'female')\n                , 'Age'] = 36\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 3) \n                & (dataset['Pclass'] == 2) \n                & (dataset['Sex'] == 'male')\n                , 'Age'] = 18\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 3) \n                & (dataset['Pclass'] == 2) \n                & (dataset['Sex'] == 'female')\n                , 'Age'] = 22\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 3) \n                & (dataset['Pclass'] == 3) \n                & (dataset['Sex'] == 'male')\n                , 'Age'] = 23\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 3) \n                & (dataset['Pclass'] == 3) \n                & (dataset['Sex'] == 'female')\n                , 'Age'] = 20\n    \n    # RoundFamirySize = 4\n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 4) \n                & (dataset['Pclass'] == 1) \n                & (dataset['Sex'] == 'male')\n                , 'Age'] = 26\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 4) \n                & (dataset['Pclass'] == 1) \n                & (dataset['Sex'] == 'female')\n                , 'Age'] = 20\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 4) \n                & (dataset['Pclass'] == 2) \n                & (dataset['Sex'] == 'male')\n                , 'Age'] = 21\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 4) \n                & (dataset['Pclass'] == 2) \n                & (dataset['Sex'] == 'female')\n                , 'Age'] = 24\n    \n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 4) \n                & (dataset['Pclass'] == 3) \n                & (dataset['Sex'] == 'male')\n                , 'Age'] = 10\n    \n    dataset.loc[(dataset['Age'].isnull()) \n                & (dataset['RoundFamirySize'] == 4) \n                & (dataset['Pclass'] == 3) \n                & (dataset['Sex'] == 'female')\n                , 'Age'] = 19","bdd4e3db":"for dataset in full_data:\n    dataset['CategoryAge'] = None\n    dataset.loc[dataset['Age'] <= 10, 'CategoryAge'] = 0\n    dataset.loc[(10 < dataset['Age']) & (dataset['Age'] <= 40), 'CategoryAge'] = 0\n    dataset.loc[40 < dataset['Age'], 'CategoryAge'] = 0","c1f3386c":"print(train[['Cabin', 'Survived']].groupby(['Cabin']).describe().head(10))","3f948f8f":"print(train[['Ticket', 'Survived']].groupby(['Ticket']).describe().head(10))","80c808c7":"print(train[['Name', 'Survived']].groupby(['Name']).describe().head(5))","d859d0cf":"for dataset in full_data:\n    dataset['Sex'] = dataset['Sex'].map({'male':0, 'female':1}).astype(int)\n    dataset['Embarked'] = dataset['Embarked'].map({'S':0, 'C':1, 'Q':2}).astype(int)\n    dataset['Pclass'] = dataset['Pclass'].map({1:0, 2:1, 3:2}).astype(int)","ead0002f":"drop_col = ['PassengerId', 'Name', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', \n            'FamirySize', 'RoundFamirySize']\n    \ntrain = train.drop(drop_col, axis=1)\ntest = test.drop(drop_col, axis=1)","df430b31":"x_train = train.drop(\"Survived\", axis=1).copy()\ny_train = train[\"Survived\"].copy()\nx_test  = test.copy()\nprint(x_train.shape, y_train.shape, x_test.shape)","d4c42920":"train.columns","746e4812":"logreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\ny_pred = logreg.predict(x_test)\nacc_log = round(logreg.score(x_train, y_train) * 100, 2)\nacc_log","bdf099f4":"# Support Vector Machines\nsvc = SVC()\nsvc.fit(x_train, y_train)\ny_pred = svc.predict(x_test)\nacc_svc = round(svc.score(x_train, y_train) * 100, 2)\nacc_svc","f859633d":"# Random Forest\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(x_train, y_train)\ny_pred = random_forest.predict(x_test)\nrandom_forest.score(x_train, y_train)\nacc_random_forest = round(random_forest.score(x_train, y_train) * 100, 2)\nacc_random_forest","4e0e22fd":"## 8. Cabin: \u5ba2\u5ba4\u306e\u30af\u30e9\u30b9\nPclass(\u5ba2\u5ba4\u306e\u30af\u30e9\u30b9)\u3088\u308a\u8a73\u7d30\u306a\u4f4d\u7f6e\u60c5\u5831\u3068\u3057\u3066\u4f7f\u3048\u308b\u3002\u304c\u3001\u885d\u7a81\u3057\u305f\u6642\u9593\u306f\u78ba\u304b\u5915\u98df\u3069\u304d\u3060\u3063\u305f\u306f\u305a(\u6620\u753b\u306e\u30a4\u30e1\u30fc\u30b8\u3067\u30fb\u30fb)\u3002\u5358\u7d14\u306b\u52a9\u304b\u3063\u305f\u90e8\u5c4b\u306e\u5468\u8fba\u306e\u90e8\u5c4b\u306f\u751f\u5b58\u7387\u304c\u9ad8\u3044\u3002\u3068\u304b\u306f\u610f\u5473\u304c\u306a\u3055\u305d\u3046\u3002\u5bb6\u65cf\u9023\u308c\u306f\u7e8f\u3081\u3066\u52a9\u304b\u3063\u3066\u3044\u308b\u53ef\u80fd\u6027\u306f\u3042\u308b\u306e\u3067\u5bb6\u65cf\u3092\u307e\u3068\u3081\u308b\u30ad\u30fc\u306b\u4f7f\u3048\u308b\u304b\u3082\u3002\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f\u672a\u63a1\u7528\u3002","efec9893":"## 5. embarked: \u4e57\u8239\u6e2f\nC\u306e\u751f\u5b58\u7387\u304c\u3061\u3087\u3063\u3068\u3060\u3051\u9ad8\u3044\uff1f\u307b\u3068\u3093\u3069\u306e\u4e57\u5ba2\u306fS\u3067\u4e57\u8239\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u6b20\u640d\u5024(null)\u306e\u4e57\u5ba2\u306fS\u306b\u5bc4\u305b\u308b\u3002","4f3e0104":"50\u524d\u5f8c\u3067\u751f\u5b58\u7387\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u306e\u3067\u300150\u4ee5\u4e0b\u3068\u305d\u308c\u4ee5\u5916\u3067\u5206\u5272\u3059\u308b\u3002","963a120d":"## 7. Age: \u5e74\u9f62\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3002","59503998":"\u6b21\u306b\u6b20\u640d\u5024\u306b\u3064\u3044\u3066Age\u3092\u3046\u3081\u3066\u3044\u304d\u307e\u3059\u3002\u307e\u305a\u306f\u304a\u4e00\u4eba\u69d8\u3002\u304a\u4e00\u4eba\u69d8\u306f\u5ba2\u5ba4\u306e\u30af\u30e9\u30b9\u3068\u6027\u5225\u3067\u4f3c\u305f\u3088\u3046\u306a\u5e74\u9f62\u306b\u306a\u308b\u3068\u4e88\u6e2c\u3002Age\u304c\u5206\u304b\u308b\u304a\u4e00\u4eba\u69d8\u304b\u3089\u5e73\u5747\u5024\u3092\u8abf\u3079\u307e\u3059\u3002","7c42f991":"## 1. \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f","f48e63d3":"\u304b\u306a\u308a\u529b\u6280\u3067\u3001\u6b20\u640d\u5024\u306b\u5e73\u5747\u5024\u3092\u4ee3\u5165\u3059\u308b\u3002","13a6ce49":"## 4.Fare: \u904b\u8cc3\n\u307e\u305a\u306f\u3069\u3093\u306a\u30c7\u30fc\u30bf\u304b\u78ba\u8a8d","558090ff":"\u7d30\u304b\u304f\u5e74\u9f62\u304c\u5206\u6563\u3057\u3066\u3044\u308b\u306e\u3067\u300110\u6b73\u5358\u4f4d\u3067\u4e38\u3081\u3066\u691c\u8a3c","cb790088":"# Titanic tutorial \u65e5\u672c\u8a9e\u306b\u3066\u89e3\u8aac\n[Introduction to Ensembling\/Stacking in Pyth](https:\/\/www.kaggle.com\/arthurtok\/introduction-to-ensembling-stacking-in-python)\u3084\u3001[Titanic best working Classifier](https:\/\/www.kaggle.com\/sinakhorami\/titanic-best-working-classifier)\u3001Qiita\u306e[[Kaggle]0\u304b\u3089\u672c\u5f53\u306b\u6a5f\u68b0\u5b66\u7fd2\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u5b66\u3076\u3079\u304d\u3053\u3068](https:\/\/qiita.com\/zenonnp\/items\/9cbb2860505a32059d89)\u306a\u3069\u3092\u53c2\u8003\u306b\u3057\u3064\u3064\u3001\u7279\u5fb4\u70b9\u3092\u81ea\u5206\u306a\u308a\u306b\u63a8\u6e2c\u3057\u3066\u691c\u8a3c\u3057\u3066\u307f\u308b\u3002","3f851f4a":"\u304a\u4e00\u4eba\u69d8\u306f\u4e0a\u8a18\u65b9\u91dd\u3067\u554f\u984c\u306a\u3055\u305d\u3046\u3002\u6b21\u306b\u5bb6\u65cf\u9023\u308c\u3002\u540c\u3058\u3088\u3046\u306b\u5ba2\u5ba4\u306e\u30af\u30e9\u30b9\u3068\u6027\u5225\u3067\u5e73\u5747\u5e74\u9f62\u3092\u78ba\u8a8d\u3059\u308b\u3002","cac8ba59":"## 6.  SibSp&Parch: \u4e00\u7dd2\u306b\u4e57\u8239\u3057\u305f\u5144\u5f1f\u3001\u914d\u5076\u8005\u306e\u6570&\u4e00\u7dd2\u306b\u4e57\u8239\u3057\u305f\u89aa\u5b50\u306e\u6570\nsibSp + Parch + 1\u3057\u305f\u5024\u3092FamirySize(\u5bb6\u65cf\u306e\u4eba\u6570)\u3068\u3057\u3066\u5b9a\u7fa9","26ebe9e0":"2,3\u4eba\u306e\u5bb6\u65cf\u9023\u308c\u3082\u304a\u4e00\u4eba\u69d8\u3068\u540c\u3058\u65b9\u91dd\u3067\u554f\u984c\u306a\u3055\u305d\u3046\u3002\u4e00\u65b9\u30014\u4eba\u4ee5\u4e0a\u306e\u5bb6\u65cf\u9023\u308c\u306f\u6bcd\u6570\u304c\u5c11\u306a\u3044\u305f\u3081\u904e\u5b66\u7fd2\u306b\u306a\u308b\u6050\u308c\u304c\u3042\u308b\u3002\u3057\u305f\u304c\u3063\u3066\u30014\u4eba\u5bb6\u65cf\u4ee5\u4e0a\u306f4\u4eba\u5bb6\u65cf\u3068\u3057\u3066\u4e38\u3081\u305f\u4e0a\u3067\u3001\u5ba2\u5ba4\u306e\u30af\u30e9\u30b9\u3068\u4e38\u3081\u305f\u5bb6\u65cf\u4eba\u6570\u3001\u6027\u5225\u306e\uff13\u3064\u306e\u30ad\u30fc\u3067\u96c6\u8a08\u3057\u305f\u5e73\u5747\u5e74\u9f62\u3092\u6b20\u640d\u5024\u306b\u4f7f\u7528\u3059\u308b\u3002","c0b0faa4":"\u5bb6\u65cf\u304c4\u4eba\u4ee5\u4e0a\u3060\u3068\u751f\u5b58\u7387\u304c\u4e0b\u304c\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u306e\u3067\u3001\u5bb6\u65cf\u304c4\u4eba\u4ee5\u4e0a(IsBigFamiry=True)\u304b\u3069\u3046\u304b\u3092\u8b58\u5225\u3059\u308b\u9805\u76ee\u3092\u4f5c\u308b\u3002","612efa38":"## 12.\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n\u53c2\u8003\u306b\u3057\u305f\u30b5\u30a4\u30c8\u304b\u3089\u30b3\u30d4\u30da\u3067\u5229\u7528","3c39e08c":"## 2. Sex: \u6027\u5225\n\u5973\u6027\u306f\u512a\u5148\u7684\u306b\u907f\u96e3\u3057\u3066\u3044\u305f\u305d\u3046\u306a\u306e\u3067\u3001\u6709\u610f\u306a\u7279\u5fb4\u70b9\u3068\u601d\u308f\u308c\u308b\u306e\u3067\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3059\u308b\u3002\u4ee5\u4e0b\u3092\u307f\u308b\u3068\u5973\u6027\u5e73\u5747\u306e\u751f\u5b58\u7387\u304c74%\u3001\u7537\u6027\u5e73\u5747\u304c18%\u3002\u3053\u306e\u307e\u307e\u4f7f\u3048\u305d\u3046\u3002","a6275b8c":"## 13. SVM\n\u53c2\u8003\u306b\u3057\u305f\u30b5\u30a4\u30c8\u304b\u3089\u30b3\u30d4\u30da\u3067\u5229\u7528","dc169fa3":"## 3. Pclass: \u5ba2\u5ba4\u306e\u30af\u30e9\u30b9\n1st\u30af\u30e9\u30b9\u304c\u751f\u5b58\u7387\u304c\u4e00\u756a\u9ad8\u304f\u30013rd\u306b\u5411\u3051\u3066\u751f\u5b58\u7387\u304c\u4e0b\u304c\u308b\u3068\u601d\u308f\u308c\u308b\u306e\u3067\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3059\u308b\u3002\u4ee5\u4e0b\u3092\u307f\u308b\u3068\u305d\u306e\u50be\u5411\u304c\u898b\u3066\u53d6\u308c\u308b\u3002\u3053\u308c\u3082\u3053\u306e\u307e\u307e\u5229\u7528\u3059\u308b\u3002","cb771f13":"\u3042\u307e\u308a\u306b\u7d30\u304b\u304f\u5024\u6bb5\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u306710\u306e\u4f4d\u3067\u4e38\u3081\u308b\u3002","ab63e893":"## 10.Name: \u540d\u524d\n\u53c2\u8003\u306b\u898b\u3066\u3044\u305fKarnel\u3060\u3068\u3001Title(Mr, Mrs\u30fb\u30fb)\u3092\u7279\u5fb4\u70b9\u3068\u3057\u3066\u4f7f\u7528\u3057\u3066\u3044\u305f\u304c\u3001\u3061\u3087\u3063\u3068\u512a\u4f4d\u6027\u304c\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u4eca\u56de\u306f\u672a\u63a1\u7528\u3002","a61f2a40":"\u5973\u6027\u306f1st, 2nd\u5171\u306b\u4f55\u6b73\u3067\u3042\u308c\u9ad8\u3044\u751f\u5b58\u7387\u30023rd\u306f\u751f\u5b58\u7387\u306f\u4e0b\u304c\u308b\u3082\u306e\u306e\u534a\u6570\u306f\u751f\u5b58\u3057\u3066\u3044\u308b\u30022nd\u30683rd\u304b\u3089\u307f\u308b\u306b\u30014,50\u6b73\u4ee5\u4e0a\u306f\u751f\u5b58\u7387\u304c\u82e5\u5e72\u4e0b\u304c\u3063\u3066\u3044\u308b\u3002\u7537\u6027\u306f10\u6b73\u672a\u6e80\u306f\u9ad8\u3044\u751f\u5b58\u7387\u3060\u304c\u3001\u305d\u308c\u4ee5\u4e0a\u306e\u6210\u4eba\u306f\u8ed2\u4e26\u307f\u751f\u5b58\u7387\u304c\u4f4e\u3044\u30024,50\u6b73\u4ee5\u4e0a\u306f\u3088\u308a\u4e0b\u304c\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u3082\u307f\u3048\u308b\u30fb\u30fb\uff1f","6db0fd6b":"## 11. \u30c7\u30fc\u30bf\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\n\u3044\u304f\u3064\u304b\u306e\u9805\u76ee\u306e\u30b3\u30fc\u30c9\u5024\u304c\u4e0d\u9069\u5207(0,1,2\u30fb\u30fb\u306b\u306a\u3063\u3066\u3044\u306a\u3044)\u306a\u306e\u3067\u5909\u63db\u3002","ebcc1099":"## 15. \u307e\u3068\u3081\n\u53c2\u8003\u306b\u3057\u305f\u30b5\u30a4\u30c8\u3068\u6bd4\u3079\u3066\u6b63\u7b54\u7387\u304c\u4f4e\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\u3044\u304f\u3064\u304b\u306e\u6307\u6a19\u5024\u3092\u4e38\u3081\u3066\u4f7f\u7528\u3057\u3066\u3044\u305f\u308a\u304c\u539f\u56e0\uff1f\u3068\u308a\u3042\u3048\u305a\u4f7f\u3063\u3066\u307f\u305f\u611f\u60f3\u3068\u3057\u3066\u306f\u304b\u306a\u308a\u7c21\u5358\u306b\u6a5f\u68b0\u5b66\u7fd2\u304c\u3067\u304d\u3066\u4fbf\u5229\u3002","30a48579":"## 14. \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\n\u53c2\u8003\u306b\u3057\u305f\u30b5\u30a4\u30c8\u304b\u3089\u30b3\u30d4\u30da\u3067\u5229\u7528","422b92eb":"## 9. Ticket: \u30c1\u30b1\u30c3\u30c8\u756a\u53f7\n\u898f\u5247\u6027\u304c\u3088\u304f\u5206\u304b\u3089\u305a\u3002\u4eca\u56de\u306f\u672a\u63a1\u7528\u3002"}}