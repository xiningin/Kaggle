{"cell_type":{"db928401":"code","59b1bf28":"code","0d4d492c":"code","098d5fcb":"code","b44f2050":"code","8aa719e7":"markdown","4121e8f7":"markdown","fc619789":"markdown","6fccfd7a":"markdown"},"source":{"db928401":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as pl\n\npl.style.use('seaborn-whitegrid')\npl.rcParams['figure.figsize'] = [14,10]\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","59b1bf28":"trainingData=pd.read_csv(\"\/kaggle\/input\/sofia-air-quality-dataset\/2017-12_bme280sof.csv\")\ntrainingData.head()","0d4d492c":"from sklearn.linear_model import Ridge\ntrainingData = trainingData[trainingData.sensor_id == 6698]\ntrainingData.dropna(subset=[\"pressure\",\"humidity\"])\ntrainingData.sort_values(by=['timestamp'])\ntrainingData=trainingData.iloc[int(len(trainingData)*0.33):int(len(trainingData)*0.66)]\n\n\nx=np.array(trainingData[[\"pressure\"]])\ny=np.array(trainingData[[\"humidity\"]])","098d5fcb":"pl.plot(x,y,\".\",label=\"Training Data\")\nfor alpha in [0,1,100,1000,10000,100000]:\n    ridgeModel=Ridge(alpha=alpha)\n    ridgeModel.fit(x,y)\n    prediction=ridgeModel.predict(x)\n    pl.plot(x,prediction,label=\"Alpha=\"+str(alpha))\npl.legend()\npl.show()","b44f2050":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import make_pipeline\n\nfor alpha in [0,1,10,100,1000,10000,100000]:\n    for degree in [1,2,3,4,5]:\n        pl.figure()\n        pl.title(\"alpha=\"+str(alpha)+\" degree=\"+str(degree),fontsize=30,fontweight=\"bold\")\n        pl.plot(x,y,\".\",label=\"Training Data\")\n        polynomialRidgeModel = make_pipeline(PolynomialFeatures(degree), Ridge(alpha=alpha))\n        polynomialRidgeModel.fit(x, y)\n        results = polynomialRidgeModel.predict(x)\n        pl.plot(x, results, label=\"alpha=\"+str(alpha)+\" degree=\"+str(degree))\n        pl.legend()\n        pl.show()\n","8aa719e7":"# Preprocessing","4121e8f7":"# Polinomial ridge regression algoritm\nTrying out polinomial ridge regression algorithm with different values of alpha and of the degree of the polynomial","fc619789":"# Linear Ridge Regression Algorithm\nTrying out linear ridge regression algorithm with different values of alpha","6fccfd7a":"# Importing Data"}}