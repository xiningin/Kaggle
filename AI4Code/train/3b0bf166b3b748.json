{"cell_type":{"40a8a381":"code","dac0b1b1":"code","c4135e8c":"code","4dbfb106":"code","c0ecd4f6":"code","d1b51770":"code","cd6b9e74":"code","86bf838b":"code","1bf476ec":"code","4364e4be":"code","0d967bdb":"code","43398c8e":"code","952d4575":"code","a0da42ac":"code","c7907158":"code","08c7bd91":"code","a2c1b596":"code","8a434664":"markdown","18a85ab8":"markdown","21351761":"markdown","2aba4ab9":"markdown","17c33aa4":"markdown","1d99f3c7":"markdown","a9433ec8":"markdown","236e3dae":"markdown","3939b558":"markdown","28d81a6c":"markdown","23a1e255":"markdown","e3f1c6c7":"markdown","e1b973bb":"markdown","268f5ecf":"markdown","c49ed5b8":"markdown","6c10b34e":"markdown","94d04c76":"markdown","ebebb161":"markdown","d7210544":"markdown","183dcd4a":"markdown","f3d8a603":"markdown","c973deeb":"markdown","90999698":"markdown","81cf96d5":"markdown","2d68d09e":"markdown","c65e3088":"markdown","44647782":"markdown","d31b3154":"markdown","4e4566d7":"markdown","73d667e2":"markdown","c7dd65a3":"markdown","5d4f78e1":"markdown","4e3512bb":"markdown","821de01a":"markdown"},"source":{"40a8a381":"import matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.datasets import make_moons\n\nX,y=make_moons(n_samples=1000, noise=0.05)","dac0b1b1":"fig, axs= plt.subplots(3,3)","c4135e8c":"from matplotlib.gridspec import GridSpec\nfig = plt.figure()\nfig.suptitle(\"Subplots without  width_ratios and height_ratios\")\n\ngs = GridSpec(2, 2)\nax1= gs[0,:]\nax2= gs[1,:]\n\nfig.add_subplot(ax1)\nfig.add_subplot(ax2)\n#annotate_axes(fig)\n\nplt.show()","4dbfb106":"import matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\n\n\n\nfig = plt.figure()\nfig.suptitle(\"Controlling subplot sizes with width_ratios and height_ratios\")\n\ngs = GridSpec(2, 2, width_ratios=[1, 2], height_ratios=[4, 1])\n\nax1= gs[0,:]\nax2= gs[1,:]\nfig.add_subplot(ax1)\nfig.add_subplot(ax2)\n#annotate_axes(fig)\n\nplt.show()","c0ecd4f6":"fig, ax = plt.subplots()\nax.plot(X[50:80,:])\naxin1 = ax.inset_axes([0.8, 0.1, 0.15, 0.15])\n","d1b51770":"from mpl_toolkits.axes_grid1.axes_divider import make_axes_locatable\n\nfig, ax = plt.subplots()\nd= make_axes_locatable(ax)\nax= d.new_horizontal('1%')\nax= d.append_axes(\"top\", size=\"7%\", pad=\"2%\") #we can also use append_axes\n","cd6b9e74":"style_list= ['default'   , 'classic',\n             'grayscale' , 'ggplot',\n             'seaborn'   , 'fast',\n             'bmh'       , 'Solarize_Light2',\n             'seaborn-notebook']\n\nfor style_type in style_list:\n      plt.figure(figsize=(5,2))      \n      plt.style.use(style_type)\n      plt.title(style_type)\n      plt.plot(X[50:80,1]) \n      plt.show()","86bf838b":"plt.style.use('default')\nplt.plot(X[50:80,:])","1bf476ec":"plt.xlabel('X')\nplt.ylabel('Y')\nplt.scatter(X[70:100,0], y[70:100], c=X[70:100,1], cmap='viridis' ) #70:100 is to select only some data points\n                                                                    ","4364e4be":"plt.bar(x= y, data=X[:,0], height= 0.5, width= 0.1)","0d967bdb":"from imageio import imread\nimage = imread('https:\/\/cdn.sstatic.net\/Sites\/stackoverflow\/img\/logo.png')\nplt.imshow(image)","43398c8e":"import numpy as np\n\nfeature_x = np.arange(0, 50, 2) \nfeature_y = np.arange(0, 50, 3) \n  \n# Creating 2-D grid of features \n[X, Y] = np.meshgrid(feature_x, feature_y) \n  \nfig, ax = plt.subplots(1, 1) \n  \nZ = np.cos(X \/ 2) + np.sin(Y \/ 4) \n  \n# plots contour lines \nax.contour(X, Y, Z) \n  \nax.set_title('Contour Plot') \nax.set_xlabel('feature_x') \nax.set_ylabel('feature_y') \n  \nplt.show() ","952d4575":"feature_x = np.linspace(-5.0, 3.0, 70) \nfeature_y = np.linspace(-5.0, 3.0, 70) \n  \n# Creating 2-D grid of features \n[X, Y] = np.meshgrid(feature_x, feature_y) \n  \nfig, ax = plt.subplots(1, 1) \n  \nZ = X ** 2 + Y ** 2        #circle equations\n  \n# plots filled contour plot \nax.contourf(X, Y, Z) \n  \nax.set_title('Filled Contour Plot') \nax.set_xlabel('feature_x') \nax.set_ylabel('feature_y') \n  \nplt.show() ","a0da42ac":"X = np.arange(-10, 10, 1)\nY = np.arange(-10, 10, 1)\nU, V = np.meshgrid(X, Y)\n\nfig, ax = plt.subplots()\nq = ax.quiver(X, Y, U, V)\nax.quiverkey(q, X=0.3, Y=1.1, U=10,\n             label='Quiver key, length = 10', labelpos='E')\n\nplt.show()","c7907158":"# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\nsizes = [15, 30, 45, 10]\nexplode = (0, 0.1, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()","08c7bd91":"#using previous charts\nfeature_x = np.linspace(-5.0, 3.0, 70) \nfeature_y = np.linspace(-5.0, 3.0, 70) \n  \n# Creating 2-D grid of features \n[X, Y] = np.meshgrid(feature_x, feature_y) \n  \nfig, ax = plt.subplots(1, 1) \n  \nZ = X ** 2 + Y ** 2        #circle equations\n\nax.text(-2, 2, 'This is the text i was talking about', style='italic')\n  \n# plots filled contour plot \nax.contourf(X, Y, Z) \n  \nax.set_title('Filled Contour Plot') \nax.set_xlabel('feature_x') \nax.set_ylabel('feature_y') \n  \nplt.show() \n","a2c1b596":"a = np.linspace(0,2*3.14,50) \nb = np.sin(a) \n  \nplt.fill_between(a, b, 0, \n                 where = (a > 2) & (a <= 3), \n                 color = 'green') \nplt.plot(a,b) ","8a434664":"This also verifies that we have classification data. Either target is one or zero. ","18a85ab8":"Seeing the values above. 1 or 0 it seems like data is binary classification based.\n\nX and Y are just known. cmap and c are used to used color coded scatter plot","21351761":"Continuing with inset_axis function. It allows us to add a child inset axes to this existing axes.\n\nLet's see how it plays out...","2aba4ab9":"Quite interesting to see, width_ratios and height_ratios can allow us to control pretty nicely.","17c33aa4":"# Subplots layout\n\nWe will now explore subplot enigma...\n\n![Subplotlib.png](attachment:Subplotlib.png)\n\n","1d99f3c7":"# STYLES\n\nthere are quite fancy style to represent your data\n\n![style.png](attachment:style.png)","a9433ec8":"# Basic Plots\n\n\n![mpl_cheatsheet.png](attachment:mpl_cheatsheet.png)\n\n\n\nWe have already used couple of them. So let's understand a bit more:\n","236e3dae":"Making it look like 3-D. Fancy stuff ","3939b558":"Importing toy dataset to play around with our visualization part","28d81a6c":"# I'll be updating the rest in second notebook\n\nDunno kernal has some sort of limit. Can't do all in single notebook :(","23a1e255":"* fill() or fill_between()\n\nFills color in region specified\n\nDocumentation found [here](https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.fill.html)","e3f1c6c7":"# Quick reminder\n\nHere's what we need to remind quickly:\n\n![quick.png](attachment:quick.png)\n\nIf these terms look new to you. Don't worry.\nTrying researching on them on your own. \nJust a small task for better understanding.\n\n","e1b973bb":"*  plot()\n\nIt is used to plot the data to roughly get intuition of data points.\n\nDocumentation can be explored [here](https:\/\/matplotlib.org\/3.3.1\/api\/_as_gen\/matplotlib.pyplot.plot.html) ","268f5ecf":"Here we can see that we are able to make 9 plots (3x3). Seems very useful when we want to visualize many plots within one cell output","c49ed5b8":"As you might have guessed that this only plots any given data provided to it.\n","6c10b34e":"* contour(): This have other variance too contourf() which fills the contour area.\n\nPeople who are from Computer Vision would know what contour refers to.\nIts simply outlining data.\n\nThe matplotlib.pyplot.contour() are usually useful when Z = f(X, Y) i.e Z changes as a function of input X and Y. A contourf() is also available which allows us to draw filled contours.\n\nDocumentation can be found [here](https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.contour.html)","94d04c76":"* imshow()\n\nDisplay data as an image\n\nExplore documentation [here](https:\/\/matplotlib.org\/3.3.1\/api\/_as_gen\/matplotlib.pyplot.imshow.html)\n\nIt display image in our case we gonna use random internet post","ebebb161":"* quiver()\n\nIt draws arrow on graph incase you want to make the plot more informative.\n\nDocumentation can be found [here](https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.quiver.html)","d7210544":"It is indeed a bit interesting, isn't it? I like this stuff. Handy tool for some visualization. But for prototyping most of us will always use 'default' style, i reckon.","183dcd4a":"* scatter()\n\nIt allows us to visualize the data(feature) points in relation with other (feature).\n\nExplore documentation [here](https:\/\/matplotlib.org\/3.3.1\/api\/_as_gen\/matplotlib.pyplot.scatter.html)","f3d8a603":"Isn't it beautiful?\n\nLet's Check out contourf()","c973deeb":"# INDEX\n\n1.  Anatomy of a figure\n1.  Subplots layout\n1.  Styles\n1.  Quick reminder \n1.  Basic Plots\n1.  Advanced Plots\n1.  Scales\n1.  Projections\n1.  Lines\n1.  Markers\n1.  Colors\n1.  Colormaps\n1.  Tick locators\n1.  Tick formatters\n1.  Ornaments\n1.  Legend Placement\n1.  Axes adjustements\n1.  Extent & Origin\n1.  Text Alignments\n1.  Text parameters\n1.  Color names\n1.  Annotations connection styles\n1.  Annotations arrow styles","90999698":"* text()\n\nAllows you to write text over any plot.\n\nDocumentation can be found [here](https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.text.html)","81cf96d5":"Now, GridSpec turn\n\nBut wait,\naccording to the [documentation](https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.gridspec.GridSpec.html) gridspec has many parameters. \n\nGridSpec(nrows, ncols, figure=None, left=None, bottom=None, right=None, top=None, wspace=None, hspace=None, width_ratios=None, height_ratios=None)\n\nWe will be tweaking width_ratios, height_ratios.\n\nLets explore plots:\n* WITHOUT width_ratios and height_ratios\n* with width_ratios and height_ratios\n\nto see what difference does it make.","2d68d09e":"Pure Beauty !!","c65e3088":"# Anatomy of a figure\n\n![Image1.png](attachment:Image1.png)\n\n\nI think, seeing the image it's self explanatory what each word refers to!","44647782":"This is how pie chart looks. If you gain mastery over functions it's more lethal weapon","d31b3154":"Oh, so if we don't include width_ratios and height_ratios it just turns out to be equal plots. But Lets see what if want to change dimension according to our needs. Lets see now on","4e4566d7":"I am quite excited for this kernal actually. I hope this will be appreciated and helpful for many of you.\nSo without any wait let's see what's coming up ahead.\n","73d667e2":"* bar()\n\nVery Helpful tool!\n\nExplore documentation [here](https:\/\/matplotlib.org\/3.3.1\/api\/_as_gen\/matplotlib.pyplot.bar.html)","c7dd65a3":"* pie()\n\nFunction refers to pie chart.Another helpful tool!\n\nDocumentation can be found [here](https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.pie.html)","5d4f78e1":"I think, you may have gotten the point of inset axis. What does it do. If you want to create another plot which will zoom in some specific region. It will do your job. But in case you are wondering why its not plotting? Its a bit lengthy to do so. I am keeping this kernal beginner type. Not intimidating.\n\nBut incase you are curious. Here's a [link](https:\/\/stackoverflow.com\/questions\/45076945\/matplotlib-mark-inset-with-different-edges-for-axes) about plotting that would help you much. ","4e3512bb":"if you tweak the parameter new_horizontal('1%') 1% to 100% there will be change in horizontal length","821de01a":"Now, make_axes_locatable"}}