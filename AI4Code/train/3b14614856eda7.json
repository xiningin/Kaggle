{"cell_type":{"21e8543c":"code","f24b4b61":"code","ec58c28a":"code","a85e42b5":"code","134f3069":"code","ebeb3bf6":"code","c4d201e6":"markdown","11cbd156":"markdown","e9273b22":"markdown","f0f17461":"markdown","dadf6b66":"markdown"},"source":{"21e8543c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f24b4b61":"from sklearn.ensemble import RandomForestClassifier","ec58c28a":"train = pd.read_csv('..\/input\/ohr8r52\/r8\/r8-train-stemmed.csv')\ntest = pd.read_csv('..\/input\/ohr8r52\/r8\/r8-test-stemmed.csv')\ntrain.head()","a85e42b5":"class GloveVectorizer:\n  def __init__(self):\n    # load in pre-trained word vectors\n    print('Loading word vectors...')\n    word2vec = {}\n    embedding = []\n    idx2word = []\n    with open('..\/input\/glove6b50dtxt\/glove.6B.50d.txt',encoding=\"utf8\") as f:\n      # is just a space-separated text file in the format:\n      # word vec[0] vec[1] vec[2] ...\n      for line in f:\n        values = line.split()\n        word = values[0]\n        vec = np.asarray(values[1:], dtype='float32')\n        word2vec[word] = vec\n        embedding.append(vec)\n        idx2word.append(word)\n    print('Found %s word vectors.' % len(word2vec))\n\n    self.word2vec = word2vec\n    self.embedding = np.array(embedding)\n    self.word2idx = {v:k for k,v in enumerate(idx2word)}\n    self.V, self.D = self.embedding.shape\n\n  def fit(self, data):\n    pass\n\n  def transform(self, data):\n    X = np.zeros((len(data), self.D))\n    n = 0\n    emptycount = 0\n    for sentence in data:\n      tokens = sentence.lower().split()\n      vecs = []\n      for word in tokens:\n        if word in self.word2vec:\n          vec = self.word2vec[word]\n          vecs.append(vec)\n      if len(vecs) > 0:\n        vecs = np.array(vecs)\n        X[n] = vecs.mean(axis=0)\n      else:\n        emptycount += 1\n      n += 1\n    print(\"Numer of samples with no words found: %s \/ %s\" % (emptycount, len(data)))\n    return X\n\n  def fit_transform(self, data):\n    self.fit(data)\n    return self.transform(data)","134f3069":"vectorizer = GloveVectorizer()\nXtrain = vectorizer.fit_transform(train.text)\nYtrain = train.intent\n\nXtest = vectorizer.transform(test.text)\nYtest = test.intent","ebeb3bf6":"model = RandomForestClassifier(n_estimators=200)\nmodel.fit(Xtrain, Ytrain)\nprint(\"train score:\", model.score(Xtrain, Ytrain))\nprint(\"test score:\", model.score(Xtest, Ytest))","c4d201e6":"Im using RandomForest classifier but it works with other types of classifiers as well","11cbd156":"I define the GloveVectorizer class similar to the configuration of Sickit Lern classes: init, fit and transform functions.\nthe Glove model can be found here: https:\/\/www.kaggle.com\/watts2\/glove6b50dtxt","e9273b22":"As training data im using reuters-21578 text categorization collection which can be found here: https:\/\/www.kaggle.com\/weipengfei\/ohr8r52","f0f17461":"we creating GloveVectorizer object and fit-transforms the glove model on the input data","dadf6b66":"create the model, train it, print scores"}}