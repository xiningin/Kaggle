{"cell_type":{"9bd2530c":"code","e6525124":"code","4ba54586":"code","c83518ea":"code","855940a1":"code","831383a6":"code","947a6eb7":"code","14fcce66":"code","a048bd6f":"code","37c6b52e":"code","c5b20bf4":"markdown","55669237":"markdown","8a66446b":"markdown","0c3e6e5e":"markdown","7ebbb631":"markdown"},"source":{"9bd2530c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e6525124":"import numpy as np\nimport pandas as pd \nimport nltk\nimport spacy\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nimport gensim\nfrom gensim.utils import simple_preprocess\nfrom gensim.parsing.preprocessing import STOPWORDS\nfrom nltk.stem import WordNetLemmatizer, SnowballStemmer\nfrom nltk.stem.porter import *\nnp.random.seed(2018)\n\nstemmer = SnowballStemmer(\"english\")","4ba54586":"questions = pd.read_csv('..\/input\/questions.csv')\nanswers = pd.read_csv('..\/input\/answers.csv')\nprofessionals = pd.read_csv('..\/input\/professionals.csv')\nemails = pd.read_csv('..\/input\/emails.csv')\nquestions.head()","c83518ea":"question_answers = questions.merge(right=answers, how='inner', left_on='questions_id', right_on='answers_question_id')","855940a1":"qa_professionals = question_answers.merge(right=professionals, left_on='answers_author_id', right_on='professionals_id')\nqa_professionals.head()","831383a6":"def extract_hashtags(x):\n   \n    a = x.split()\n \n    hash_tags = [i for i in a if i.startswith(\"#\")]\n    \n\n    result = ' '.join(hash_tags) + \" \"\n    \n    return result\n\n\nquestion_answers['question_hash_tags'] = \\\nquestion_answers['questions_body'].apply(extract_hashtags)\n\nquestion_answers.head()","947a6eb7":"df_question_body = question_answers[[ 'questions_id','questions_body',]]\ndf_question_body['index'] = df_question_body.index\ndf_question_body.head()\n","14fcce66":"def lemmatize_stemming(text):\n    return stemmer.stem(WordNetLemmatizer().lemmatize(text, pos='v'))\ndef preprocess(text):\n    result = []\n    for token in gensim.utils.simple_preprocess(text):\n        if token not in gensim.parsing.preprocessing.STOPWORDS and len(token) > 3:\n            result.append(lemmatize_stemming(token))\n    return result","a048bd6f":"processed_questions = df_question_body[df_question_body['index'] == 0].values[0][1]\nprint('original document: ')\nwords = []\nfor word in doc_sample.split(' '):\n    words.append(word)\nprint(words)\nprint('\\n\\n tokenized and lemmatized document: ')\nprint(preprocess(processed_questions))\npdf_question_body = df_question_body['questions_body'].map(preprocess)","37c6b52e":"\ndictionary = gensim.corpora.Dictionary(pdf_question_body)\ncount = 0\nfor k, v in dictionary.iteritems():\n    print(k, v)\n    count += 1\n    if count > 100:\n        break","c5b20bf4":"Extracting only the \"questions_body\" cells","55669237":"Creating merged tables for question answers and the professionals who answered questions.","8a66446b":"Hashtag Extraction","0c3e6e5e":"The Yummy Part, Part I: Preliminary Text Prep","7ebbb631":"Importing Libraries."}}