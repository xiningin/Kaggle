{"cell_type":{"facf5180":"code","6e81def1":"code","f25b4d5a":"code","41f043d0":"code","aff5dd08":"code","7e07e8c4":"code","9db778e5":"code","36aeb2be":"code","317c6de2":"code","02f956fa":"code","6d826011":"code","27423127":"code","b4d48343":"code","55cc5c4b":"code","fce516b2":"code","2927c2e9":"code","98bb3e24":"code","ef9d7a31":"code","455e5524":"code","a8d373cd":"code","71bb2b22":"code","02c47ed9":"code","ddc73e53":"code","34327d2d":"code","73212830":"code","11ba1357":"code","c7d81c86":"code","4233f4d5":"code","dec93b57":"code","236b8299":"code","a66a3e95":"code","dc82a464":"code","5da81e9b":"code","a19d363e":"code","2b074def":"code","d469a419":"code","ddad9559":"code","8e5d7def":"code","fba858dd":"code","7cfcfacb":"code","93a67fa1":"code","57800aff":"code","26e566ab":"code","8f56a73c":"code","17e630db":"code","c3298dc6":"code","a22fc83d":"code","18b80ef9":"code","f744ef3e":"markdown","3ec444fc":"markdown"},"source":{"facf5180":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport time\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6e81def1":"df = pd.read_csv(\"\/kaggle\/input\/uci-semcom\/uci-secom.csv\")","f25b4d5a":"df.head()","41f043d0":"df_feat = df.iloc[:,1:-1]","aff5dd08":"df_feat.dropna(axis=1, inplace=True)","7e07e8c4":"!pip install causalnex","9db778e5":"from causalnex.structure.notears import from_pandas\nfrom causalnex.structure import StructureModel","36aeb2be":"%%time\nSM = from_pandas(df_feat)","317c6de2":"import networkx as nx","02f956fa":"plt.figure(figsize=(18,10))\npos = nx.spring_layout(SM, k=60)\n \nedge_width = [ d['weight']*0.3 for (u,v,d) in SM.edges(data=True)]\n#nx.draw_networkx_labels(SM, pos, fontsize=16, font_family=\"Yu Gothic\", font_weight=\"bold\")\nnx.draw_networkx_labels(SM, pos, font_family=\"Yu Gothic\", font_weight=\"bold\")\nnx.draw_networkx(SM,\n                 pos,\n                 node_size=4000,\n                 arrowsize=20,\n                 alpha=0.6,\n                 edge_color='b',\n                 width=edge_width)","6d826011":"COPY_SM = SM.copy()\n \n# \u56e0\u679c\u95a2\u4fc2\u306e\u5f31\u3044\u30a8\u30c3\u30b8\u3092\u524a\u9664\nCOPY_SM.remove_edges_below_threshold(0.5)\n \n# \u53ef\u8996\u5316\nplt.figure(figsize=(18,10))\npos = nx.spring_layout(COPY_SM, k=60)\n \nedge_width = [ d['weight']*0.3 for (u,v,d) in COPY_SM.edges(data=True)]\n#nx.draw_networkx_labels(COPY_SM, pos, fontsize=16, font_family=\"Yu Gothic\", font_weight=\"bold\")\nnx.draw_networkx_labels(COPY_SM, pos, font_family=\"Yu Gothic\", font_weight=\"bold\")\nnx.draw_networkx(COPY_SM,\n                 pos,\n                 node_size=4000,\n                 arrowsize=20,\n                 alpha=0.6,\n                 edge_color='b',\n                 width=edge_width)","27423127":"df_feat","b4d48343":"import warnings\nwarnings.filterwarnings(\"ignore\")","55cc5c4b":"# create instance\nsm = StructureModel()","fce516b2":"# define previous relation\nsm.add_edges_from([\n    ('20', '86'),\n    ('20', '87')\n])","2927c2e9":"# check the dag\nsm.edges","98bb3e24":"!pip install --upgrade pip","ef9d7a31":"!conda install -y graphviz pygraphviz","455e5524":"import pygraphviz","a8d373cd":"from IPython.display import Image\nfrom causalnex.plots import plot_structure, NODE_STYLE, EDGE_STYLE","71bb2b22":"viz = plot_structure(\n    sm,\n    graph_attributes={\"scale\":\"0.5\"},\n    all_node_attributes=NODE_STYLE.WEAK,\n    all_edge_attributes=EDGE_STYLE.WEAK)\nImage(viz.draw(format=\"png\"))","02c47ed9":"SM","ddc73e53":"viz = plot_structure(\n    SM,\n    graph_attributes={\"scale\": \"0.5\"},\n    all_node_attributes=NODE_STYLE.WEAK,\n    all_edge_attributes=EDGE_STYLE.WEAK)\nImage(viz.draw(format='png'))","34327d2d":"# remove weak network\nSM.remove_edges_below_threshold(0.8)","73212830":"viz = plot_structure(\n    SM,\n    graph_attributes={\"scale\": \"0.5\"},\n    all_node_attributes=NODE_STYLE.WEAK,\n    all_edge_attributes=EDGE_STYLE.WEAK)\nImage(viz.draw(format='png'))","11ba1357":"%%time\n# Drop mistake conection from speciality knowlege\nSM = from_pandas(df_feat, tabu_edges=[(\"250\", \"388\"),(\"251\",\"524\")], w_threshold=0.8)","c7d81c86":"viz = plot_structure(\n    SM,\n    graph_attributes={\"scale\": \"0.5\"},\n    all_node_attributes=NODE_STYLE.WEAK,\n    all_edge_attributes=EDGE_STYLE.WEAK)\nImage(viz.draw(format='png'))","4233f4d5":"# lagrgest network\nSM = SM.get_largest_subgraph()","dec93b57":"viz = plot_structure(\n    SM,\n    graph_attributes={\"scale\": \"0.5\"},\n    all_node_attributes=NODE_STYLE.WEAK,\n    all_edge_attributes=EDGE_STYLE.WEAK)\nImage(viz.draw(format='png'))","236b8299":"# create bayesian network instance\nfrom causalnex.network import BayesianNetwork\n\nbn = BayesianNetwork(SM)","a66a3e95":"# Bayesian Networks in CausalNex support only discrete distributions.\n# So change to continuous value to discrete values and distributions\n\ncol = df_feat.columns\ncol","dc82a464":"# library for make dsicrete value\nfrom causalnex.discretiser import Discretiser\n\ndf_c = df_feat.copy()\n\nfor i in range(len(col)):\n    c = col[i]\n    df_c[c] = Discretiser(method=\"fixed\",\n                          numeric_split_points=[df_c[c].quantile(0.5)]).transform(df_c[c].values)","5da81e9b":"df_c","a19d363e":"df_feat","2b074def":"plt.scatter(df_feat[\"86\"], df_c[\"86\"])","d469a419":"from sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(df_c, train_size=0.9, test_size=0.1, random_state=7)","ddad9559":"# 1st, The first step in this is specifying all of the states that each node can take.\nbn = bn.fit_node_states(df_c)","8e5d7def":"%%time\n# fit to train data\nbn = bn.fit_cpds(train, method=\"BayesianEstimator\", bayes_prior=\"K2\")","fba858dd":"# upper condition\n# lower Conditional probability\nbn.cpds[\"527\"]","7cfcfacb":"bn.cpds[\"390\"]","93a67fa1":"# prediction\npredictions = bn.predict(test, \"527\")","57800aff":"predictions","26e566ab":"test[\"527\"]","8f56a73c":"# accuracy score etc.\nfrom causalnex.evaluation import classification_report\nclassification_report(bn, test, \"527\")","17e630db":"from causalnex.evaluation import roc_auc\nroc, auc = roc_auc(bn, test, \"527\")\nprint(auc)","c3298dc6":"Image(viz.draw(\n    format=\"png\", prog=\"circo\"  # `circo` produces a circular layout\n),width=500)","a22fc83d":"def get_tree(k_list):\n    \"\"\"\n    Return the edges of a tree given the number of children at each level\n    \"\"\"\n    n = 1\n    edges_radial = []\n    for level in range(0, len(k_list)):\n        k = k_list[level]\n        edges_radial.extend(\n            [(f\"A{level}_{i \/\/ k}\", f\"A{level + 1}_{i}\") for i in range(k * n)]\n        )\n        n = k * n\n    return edges_radial\n\n\nlayouts = [\n    (\"dot\",\"Order nodes hierarchly. Great to spot the dependencies of a causal network.\",[2, 3, 3]),\n    (\"neato\", \"Spring model. Great default tool if the graph is not too large\", [2, 2, 4, 3, 2]),\n    (\"sfdp\", \"A different style of spring model\", [2, 2, 4, 3, 2]),\n    (\"twopi\", \"Radial layout\", [2, 2, 5, 3]),\n]\n\nfor layout, description, k_list in layouts:\n    g_tree = StructureModel(get_tree(k_list))\n    viz = plot_structure(g_tree)\n\n    print(f\"{layout}: {description}\")\n    image_binary = viz.draw(format=\"png\", prog=layout)\n    display(Image(image_binary, width=500))","18b80ef9":"graph_attributes = {\n    \"splines\": \"spline\",  # I use splies so that we have no overlap\n    \"ordering\": \"out\",\n    \"ratio\": \"fill\",  # This is necessary to control the size of the image\n    \"size\": \"16,9!\",  # Set the size of the final image. (this is a typical presentation size)\n    \"label\": \"The structure of our\\n \\t Insurance model\",\n    \"fontcolor\": \"#FFFFFFD9\",\n    \"fontname\": \"Helvetica\",\n    \"fontsize\": 100,\n    \"labeljust\": \"l\",\n    \"labelloc\": \"t\",\n    \"pad\": \"1,1\",\n    \"dpi\": 200,\n    \"nodesep\": 0.8,\n    \"ranksep\": \".5 equally\",\n}\n\n# Making all nodes hexagonal with black coloring\nnode_attributes = {\n    node: {\n        \"shape\": \"hexagon\",\n        \"width\": 2.2,\n        \"height\": 2,\n        \"fillcolor\": \"#000000\",\n        \"penwidth\": \"10\",\n        \"color\": \"#4a90e2d9\",\n        \"fontsize\": 35,\n        \"labelloc\": \"c\",\n    }\n    for node in SM.nodes\n}\n\n# Splitting two words with \"\\n\"\nfor node in SM.nodes:\n    up_idx = [i for i, c in enumerate(node) if c.isupper()][-1]\n    node_attributes[node][\"label\"] = node[:up_idx] + \"\\n\" + node[up_idx:]\n\n# Target nodes (ones with \"Cost\" in the name) are colored differently\nfor node in SM.nodes:\n    if \"Cost\" in node:  # We color nodes with \"cost\" in the name with a orange colour.\n        node_attributes[node][\"fillcolor\"] = \"#DF5F00\"\n\n# Customising edges\nedge_attributes = {\n    (u, v): {\n        \"penwidth\": w * 20 + 2,  # Setting edge thickness\n        \"weight\": int(5 * w),  # Higher \"weight\"s mean shorter edges\n        \"arrowsize\": 2 - 2.0 * w,  # Avoid too large arrows\n        \"arrowtail\": \"dot\",\n    }\n    for u, v, w in SM.edges(data=\"weight\")\n}\n\n\nviz = plot_structure(\n    SM,\n    prog=\"dot\",\n    graph_attributes=graph_attributes,\n    node_attributes=node_attributes,\n    edge_attributes=edge_attributes,\n)\nf = \"supporting_files\/final_insurance_model.jpg\"\nviz.draw(f)\nImage(f)","f744ef3e":"# various images","3ec444fc":"# Data test"}}