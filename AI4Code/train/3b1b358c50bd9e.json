{"cell_type":{"15c283e0":"code","1accde5a":"code","e3f8f5c5":"code","f1171cb7":"code","bc450430":"code","85fe8179":"code","e7fa1cca":"code","95b6ae66":"code","91126022":"code","cf9cb6a3":"code","e6bb207b":"code","41760fd1":"markdown"},"source":{"15c283e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1accde5a":"import matplotlib.pyplot as plt\nimport seaborn as sns","e3f8f5c5":"df = pd.read_csv('\/kaggle\/input\/mushroom-classification\/mushrooms.csv')\ndf.head()","f1171cb7":"df.isnull().mean()","bc450430":"df.dtypes","85fe8179":"df.describe().T","e7fa1cca":"list(df.columns)","95b6ae66":"plt.figure(figsize=(16, 100))\ncolumns = list(df.columns)\n# histogram\nfor i in range(1,len(columns)):\n    plt.subplot(11, 2, i)\n    plt.title(columns[i])\n    sns.countplot(x=columns[i],hue='class',data=df, palette='RdBu')","91126022":"colunms_to_use = ['bruises','odor','gill-size','gill-spacing','gill-color','stalk-surface-above-ring','stalk-surface-below-ring',\n'stalk-color-above-ring', 'stalk-color-below-ring','spore-print-color','population','habitat']\ndf_to_use = df[colunms_to_use].copy()\ndf_to_use_d = pd.get_dummies(df_to_use,drop_first=True)\nprint(df_to_use_d.shape)\ndf_to_use_d.head()","cf9cb6a3":"y = pd.get_dummies(df['class'],drop_first=True)\nX = df_to_use_d\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","e6bb207b":"import xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\n\nfrom sklearn.metrics import accuracy_score\n\n# Create the parameter grid: gbm_param_grid\ngbm_param_grid = {\n    'colsample_bytree': [0.3, 0.7],\n    'n_estimators': [50],\n    'max_depth': [2, 5]\n}\n\n# Instantiate the regressor: gbm\ngbm = xgb.XGBClassifier()\n\n# Perform grid search: grid_mse\ngrid = GridSearchCV(estimator = gbm , param_grid = gbm_param_grid,\n                        scoring = 'recall',\n                        cv = 4,\n                        verbose=1\n                        )\n\n\n\ngrid.fit(X_train,y_train)\nbest_model = grid.best_estimator_\n\ny_pred = best_model.predict(X_test)\naccuracy = accuracy_score(y_pred, y_test)\nprecision = precision_score(y_pred, y_test)\nroc_auc = roc_auc_score(y_pred, y_test)\nconfusion = confusion_matrix(y_pred, y_test)\nf1 = f1_score(y_pred, y_test)\nrecall = recall_score(y_pred, y_test)\n\nprint(best_model)\n\nprint('Accuracy achieved: %0.3f'%accuracy)\nprint('Precision achieved: %0.3f'%precision)\nprint('Roc Auc achieved: %0.3f'%roc_auc)\nprint('F1 Score achieved: %0.3f'%f1)\nprint('Recall achieved: %0.3f'%recall)\n\nimportances = pd.Series(data=best_model.feature_importances_,index= X_train.columns)\nimportances_sorted = importances.sort_values().tail(10)\nimportances_sorted.plot(kind='barh', color='lightgreen')\nplt.title('Features Importances')\nplt.show()\n\n\nprint('Confusion matrix achieved:')\nconfusion\n\n\n","41760fd1":"1. cap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n2. cap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n3. cap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r, pink=p,purple=u,red=e,white=w,yellow=y\n4. bruises?: bruises=t,no=f\n5. odor: almond=a,anise=l,creosote=c,fishy=y,foul=f, musty=m,none=n,pungent=p,spicy=s\n6. gill-attachment: attached=a,descending=d,free=f,notched=n\n7. gill-spacing: close=c,crowded=w,distant=d\n8. gill-size: broad=b,narrow=n\n9. gill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e, white=w,yellow=y\n10. stalk-shape: enlarging=e,tapering=t\n11. stalk-root: bulbous=b,club=c,cup=u,equal=e, rhizomorphs=z,rooted=r,missing=?\n12. stalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n13. stalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n14. stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y\n15. stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y\n16. veil-type: partial=p,universal=u\n17. veil-color: brown=n,orange=o,white=w,yellow=y\n18. ring-number: none=n,one=o,two=t\n19. ring-type: cobwebby=c,evanescent=e,flaring=f,large=l, none=n,pendant=p,sheathing=s,zone=z\n20. spore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r, orange=o,purple=u,white=w,yellow=y\n21. population: abundant=a,clustered=c,numerous=n, scattered=s,several=v,solitary=y\n22. habitat: grasses=g,leaves=l,meadows=m,paths=p, urban=u,waste=w,woods=d"}}