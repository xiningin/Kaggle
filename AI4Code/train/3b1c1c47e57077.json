{"cell_type":{"54917845":"code","69389655":"code","2d74fee9":"code","507591ac":"code","d2529a4d":"code","70b8f3a7":"code","5fec7c64":"code","4b66b663":"code","51aafc2e":"code","6501918f":"code","80ac39a8":"code","4ebb5120":"code","fa411274":"code","4db6fc60":"code","623caeaa":"code","e50735e4":"code","55e13333":"code","84ea4438":"code","348fce4b":"code","c3091cfc":"markdown","e2568808":"markdown"},"source":{"54917845":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\npd.options.display.max_columns = 100\npd.options.display.max_rows = 1000000","69389655":"csgo = pd.read_csv(\"\/kaggle\/input\/csgo-round-winner-classification\/csgo_round_snapshots.csv\")\ncsgo.head()\n","2d74fee9":"csgo.tail()","507591ac":"csgo.info()","d2529a4d":"csgo.describe()","70b8f3a7":"dict(csgo.isin([0]).sum().sort_values(ascending=False))\n# dict(csgo[csgo==0.0].count().sort_values(ascending=False)) \n","5fec7c64":"import seaborn as sns \nimport matplotlib.pyplot as plt\nplt.figure(figsize=(300,200))\nsns.set(font_scale=4)\nsns.heatmap(csgo.isin([0]))","4b66b663":"total_zeros=csgo.isin([0]).sum().sort_values(ascending=False)\npercent_of_zeros = np.round((csgo.isin([0]).sum()\/csgo.count())*100)\nzeros_table = pd.concat([total_zeros, percent_of_zeros], axis=1, keys=[\"Total Count of Zeros\", \"Percent of Zeros\"])\ndisplay(zeros_table.head(97))\ndel total_zeros,percent_of_zeros,zeros_table","51aafc2e":"csgo.columns[(csgo.isin([0]).sum()\/csgo.count())>0.97]\n","6501918f":"list_columns_zeros = ['t_weapon_aug', 'ct_weapon_bizon', 't_weapon_bizon', 'ct_weapon_elite',\n       't_weapon_elite', 't_weapon_famas', 'ct_weapon_g3sg1', 't_weapon_g3sg1',\n       'ct_weapon_galilar', 'ct_weapon_glock', 'ct_weapon_m249',\n       't_weapon_m249', 't_weapon_m4a1s', 'ct_weapon_mac10', 'ct_weapon_mag7',\n       't_weapon_mag7', 'ct_weapon_mp5sd', 't_weapon_mp5sd', 'ct_weapon_mp7',\n       't_weapon_mp7', 't_weapon_mp9', 'ct_weapon_negev', 't_weapon_negev',\n       'ct_weapon_nova', 't_weapon_nova', 'ct_weapon_p90', 't_weapon_p90',\n       'ct_weapon_r8revolver', 't_weapon_r8revolver', 'ct_weapon_sawedoff',\n       't_weapon_sawedoff', 'ct_weapon_scar20', 't_weapon_scar20',\n       't_weapon_ssg08', 'ct_weapon_xm1014', 't_weapon_xm1014',\n       't_weapon_fiveseven', 't_weapon_p2000', 'ct_weapon_tec9',\n       't_weapon_tec9', 't_grenade_incendiarygrenade',\n       'ct_grenade_decoygrenade', 't_grenade_decoygrenade']\ncsgo.drop(list_columns_zeros, axis=1,inplace=True)\ntotal_zeros=csgo.isin([0]).sum().sort_values(ascending=False)\npercent_of_zeros = np.round((csgo.isin([0]).sum()\/csgo.count())*100)\nzeros_table = pd.concat([total_zeros, percent_of_zeros], axis=1, keys=[\"Total Count of Zeros\", \"Percent of Zeros\"])\ndisplay(zeros_table.head(97))\ndel total_zeros,percent_of_zeros,zeros_table","80ac39a8":"display(csgo.round_winner.unique())\ntab_map = csgo.map.unique()\ndisplay(csgo.map.unique())","4ebb5120":"sns.set()\nfog, ax = plt.subplots()\nax = csgo[csgo['round_winner']==\"T\"].map.value_counts().plot(kind='bar',label='T',color='b')\nax = csgo[csgo['round_winner']==\"CT\"].map.value_counts().plot(kind='bar',label='CT',color='r')\nax.set_xlabel('Map Name')\nax.set_title('Frequency by CT or T')\nax.legend()\nplt.show()","fa411274":"csgo.round_winner.replace(to_replace=[\"CT\", \"T\"], value=[1,0],inplace=True)\ncsgo.map.replace(to_replace=tab_map, value=[1,2,3,4,5,6,7,8],inplace=True)\ndisplay(csgo.round_winner.head())","4db6fc60":"plt.figure(figsize=(400, 400))\ncorr_matrix = csgo.corr()\nsns.set(font_scale=12)\n\nsns.heatmap(corr_matrix,cmap=\"coolwarm\")","623caeaa":"display(corr_matrix.round_winner.sort_values(ascending=False)[:15])","e50735e4":"display(corr_matrix.round_winner.sort_values(ascending=False)[-15:])","55e13333":"# csgo.map.unique()\n# csgo[csgo.round_winner==1].map[csgo.map==3].sum()\n# np.sum(csgo[csgo.round_winner==1].map==3)\nwinner_rate_on_map =  []\nfor m in range(1,9):\n    winner_rate_on_map.append(((np.sum(csgo[csgo.round_winner==1].map==m))\/(np.sum(csgo.map[csgo.map==m].count()))*100))\nwinner_rate_on_map = pd.DataFrame(data=winner_rate_on_map,columns=[\"Winner Rate\"])\nwinner_rate_on_map.index = tab_map\ndisplay(winner_rate_on_map.index,winner_rate_on_map[\"Winner Rate\"])","84ea4438":"display(csgo.head())","348fce4b":"maps_ds = csgo.loc[:, [\"map\",'round_winner','ct_grenade_hegrenade','t_grenade_hegrenade','ct_grenade_flashbang','t_grenade_flashbang','ct_grenade_smokegrenade','t_grenade_smokegrenade','ct_grenade_incendiarygrenade','ct_grenade_molotovgrenade','t_grenade_molotovgrenade']]\nmaps_ds","c3091cfc":"# Here we can see that most valuable variables in this correlation matrix for CT are: \n* 1. Armor\n* 2. Helmets\n* 3. Defuse Kits\n# For T are:\n* 1. Helmets\n* 2. Armor\n* 3. Plant the bomb\n* 4. Do they have AK\n","e2568808":"# Correlation Heatmap"}}