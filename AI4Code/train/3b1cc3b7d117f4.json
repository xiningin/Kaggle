{"cell_type":{"7595cff5":"code","3f3a6a0f":"code","9bcad213":"code","721a2a8c":"code","b2d19239":"code","312cd83c":"code","ded219b7":"code","22fbe59c":"code","360aa3f8":"code","2000001f":"code","d6beaf57":"code","6eb6f4f7":"code","8256088c":"code","f18e9188":"code","4db6af1c":"code","d7a9b2cf":"markdown","f721cd4f":"markdown","d17fa94d":"markdown","206dd414":"markdown","58065f12":"markdown","f3dc70b0":"markdown","b41206cd":"markdown","5fe832a8":"markdown","ab954a8f":"markdown","654c2133":"markdown","5da2d711":"markdown"},"source":{"7595cff5":"import pandas as pd\nimport itertools as it\nimport collections as co\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport seaborn as sns\nimport numpy as np\n","3f3a6a0f":"video = pd.read_csv(\"..\/input\/videogamesales\/vgsales.csv\", header=0, index_col=0, encoding='utf-8')","9bcad213":"print(video.info())","721a2a8c":"genre = video.groupby(\"Genre\").aggregate({\"Genre\": \"count\"}).rename(columns={'Genre': 'count', 'index': 'Genre'})\ngenre = genre.sort_values('count', ascending=False).reset_index()\nexplode = [0.15,0.11,0.09,0.06,0.05,0.04,0.03,0.02,0.01,0.01,0.01,0.01]\n\nplt.figure(figsize=(9, 10))\nlabels = genre[\"Genre\"]\ncolors = cm.rainbow(np.linspace(0.3, 0.8, 12))\nplt.title(label=\" Genres of Games\", loc=\"center\", fontsize=15)\nplt.pie(genre[\"count\"], autopct='%.1f%%', labels=labels, explode=explode, colors=colors, startangle=20)\n\n\nplt.show()","b2d19239":"platform = video.groupby(\"Platform\").aggregate({\"Platform\": \"count\"}).rename(columns={'Platform': 'count', 'index': 'Platform'})\nplatform = platform.sort_values('count', ascending=False).reset_index()\n\nplt.figure(figsize=(10, 11))\nlabels = platform[\"Platform\"]\ncolors = cm.rainbow(np.linspace(0.7, 1, 20))\nplt.title(label=\"Platform of Games\", loc=\"center\", fontsize=15)\nplt.bar(platform[\"Platform\"].head(10), platform[\"count\"].head(10),\n        width=0.5, color=colors)\n\nplt.show()","312cd83c":"publisher = video.groupby(\"Publisher\").aggregate({\"Publisher\": \"count\"}).rename(columns={'Publisher': 'count', 'index': 'Publisher'})\npublisher = publisher.sort_values('count', ascending=False).reset_index()\n\nplt.figure(figsize=(7, 8))\nlabels = publisher[\"Publisher\"]\ncolors = cm.rainbow(np.linspace(0.3, 0.5, 6))\nplt.title(label=\"Publishers of Games\", loc=\"center\", fontsize=15)\nplt.bar(publisher[\"Publisher\"].head(5), publisher[\"count\"].head(5),\n        width=0.5, color=colors)\nplt.xticks(rotation=20)","ded219b7":"year = video.dropna()\nyear = year.groupby(\"Year\").aggregate({\"Year\": \"count\"}).rename(columns={'Year': 'count', 'index': 'Year'})\nyear = year.sort_values('Year', ascending=False).reset_index()\n\nplt.figure(figsize=(9, 8))\nplt.plot(year[\"Year\"], year[\"count\"], color='turquoise')\nplt.title(label=\"Games launched vs Years\", loc=\"center\", fontsize=15)\nplt.stackplot(year[\"Year\"], year[\"count\"], colors='lightcyan')  # area chart","22fbe59c":"plt.figure(figsize=(15, 8))\nplt.subplot2grid((1,2), (0,0))\nplt.title(label=\"Sales vs Years\", loc=\"center\", fontsize=15)\nplt.scatter(video[\"Year\"], video[\"NA_Sales\"], color='turquoise', label=\"NA_Sales\")\nplt.scatter(video[\"Year\"], video[\"EU_Sales\"], color='wheat', label=\"EU_Sales\")\nplt.scatter(video[\"Year\"], video[\"JP_Sales\"], color='lightsteelblue', label=\"JP_Sales\")\nplt.scatter(video[\"Year\"], video[\"Other_Sales\"], color='greenyellow', label=\"Other_Sales\")\nplt.legend()\n\nplt.subplot2grid((1,2), (0,1))\nplt.title(label=\"Global_Sales vs Years\", loc=\"center\", fontsize=15)\nglo = video.groupby(\"Year\").aggregate({\"Global_Sales\": \"sum\"})\nglo = glo.sort_values('Year', ascending=False).reset_index()\nplt.plot(glo[\"Year\"], glo[\"Global_Sales\"], color='cyan', label=\"Global_Sales\")\nplt.stackplot(glo[\"Year\"], glo[\"Global_Sales\"], colors='lightcyan')  # area chart","360aa3f8":"GenreGroup = video.groupby(['Genre']).sum().loc[:, 'NA_Sales':'Global_Sales']  \nGenreGroup['NA_Sales%'] = GenreGroup['NA_Sales']\/GenreGroup['Global_Sales']\nGenreGroup['EU_Sales%'] = GenreGroup['EU_Sales']\/GenreGroup['Global_Sales']\nGenreGroup['JP_Sales%'] = GenreGroup['JP_Sales']\/GenreGroup['Global_Sales']\nGenreGroup['Other_Sales%'] = GenreGroup['Other_Sales']\/GenreGroup['Global_Sales']\n\nplt.figure(figsize=(13, 12))\ncmap = sns.cm.rocket_r\nax = sns.heatmap(GenreGroup.loc[:, 'NA_Sales%':'Other_Sales%'],\n                 vmax=1, vmin=0, annot=True, fmt='.2%', cmap=cmap)\nplt.title(\"Area_Sales vs Genre\")\nax.set_ylim(bottom=12, top=0)\n\nplt.show()","2000001f":"video = video.dropna()\nvideo[\"Year\"] = video[\"Year\"].dropna().astype(\"int\")\n\ntable = video.pivot_table('Global_Sales', columns='Year', index='Genre', aggfunc='sum')\n\n\nplt.figure(figsize=(13, 12))\nax = sns.heatmap(table, cmap='viridis')\nplt.title(\"Sales in according to Genres and Years\")\nax.set_ylim(bottom=12, top=0)\n\nplt.show()","d6beaf57":"from pandas.plotting import table  # table drawing","6eb6f4f7":"\nfig = plt.figure(figsize=(4, 3), dpi=150)\n\n# #Action\nrank = video[video['Genre'] == 'Action']\nrank = rank.groupby(['Name']).aggregate({\"Global_Sales\": \"sum\"})\nrank = rank.sort_values(by=['Global_Sales'], ascending=False).reset_index()\nrank[\"Global_Sales\"] = rank[\"Global_Sales\"].apply(lambda x: round(x, 2))  # two decimal\n\nax = fig.add_subplot(211, frame_on=False)\nplt.title(\"Top_action\")\nax.xaxis.set_visible(False)  # hide the x axis\nax.yaxis.set_visible(False)  # hide the y axis\ntable(ax, rank.head(5), loc='center')","8256088c":"fig = plt.figure(figsize=(4, 3), dpi=150)\n\n#Racing\nrank2 = video[video['Genre'] == 'Racing']\nrank2 = rank2.groupby(['Name']).aggregate({\"Global_Sales\": \"sum\"})\nrank2 = rank2.sort_values(by=['Global_Sales'], ascending=False).reset_index()\nrank2[\"Global_Sales\"] = rank2[\"Global_Sales\"].apply(lambda x: round(x, 2))  # two decimal\n\nax = fig.add_subplot(212, frame_on=False)\nplt.title(\"Top_racing\")\nax.xaxis.set_visible(False)  # hide the x axis\nax.yaxis.set_visible(False)  # hide the y axis\ntable(ax, rank2.head(5), loc='center')","f18e9188":"fig = plt.figure(figsize=(4, 3), dpi=150)\n\n#Role\nrank = video[video['Genre'] == 'Role-Playing']\nrank = rank.groupby(['Name']).aggregate({\"Global_Sales\": \"sum\"})\nrank = rank.sort_values(by=['Global_Sales'], ascending=False).reset_index()\nrank[\"Global_Sales\"] = rank[\"Global_Sales\"].apply(lambda x: round(x, 2))  # two decimal\n\nax = fig.add_subplot(212, frame_on=False)\nplt.title(\"Top_Role-Playing\")\nax.xaxis.set_visible(False)  # hide the x axis\nax.yaxis.set_visible(False)  # hide the y axis\ntable(ax, rank.head(5), loc='center')","4db6af1c":"fig = plt.figure(figsize=(4, 3), dpi=150)\n\n#Shooter\nrank2 = video[video['Genre'] == 'Shooter']\nrank2 = rank2.groupby(['Name']).aggregate({\"Global_Sales\": \"sum\"})\nrank2 = rank2.sort_values(by=['Global_Sales'], ascending=False).reset_index()\nrank2[\"Global_Sales\"] = rank2[\"Global_Sales\"].apply(lambda x: round(x, 2))  # two decimal\n\nax = fig.add_subplot(211, frame_on=False)\nplt.title(\"Top_shooter\")\nax.xaxis.set_visible(False)  # hide the x axis\nax.yaxis.set_visible(False)  # hide the y axis\ntable(ax, rank2.head(5), loc='center')","d7a9b2cf":"## Raking","f721cd4f":"## Genres of Games","d17fa94d":"# Games Sales Analysis and Visualization","206dd414":"This is a simple analysis and simple trial with seaborn visualization. Some information are showed about games versus years, area_sales, publishers and platforms.\n\n## Content\n\n1. Genres of Games\n2. Platforms of Games\n3. Publishers of Games\n4. Games Launched vs Years\n5. Area_Sales vs Years\n6. Area_Sales vs Genres\n7. Area_Sales vs Years\n8. Raking in Tables","58065f12":"## Platforms of Games","f3dc70b0":"## Publishers of Games","b41206cd":"This part will show the Top_5 Globle Sales in according to game genres.\n     \n* Top_Action\n* Top_Racing\n* Top_Role-Playing\n* Top_Shooter","5fe832a8":"## Area_Sales vs Years","ab954a8f":"## Area_Sales vs Genres","654c2133":"## Area_Sales vs Years","5da2d711":"## Games Launched vs Years"}}