{"cell_type":{"8f1fb653":"code","90ceda1b":"code","ba4c5d1d":"code","cc54fef3":"code","7beabce6":"code","b4a7a25b":"code","9932b951":"code","21a827c2":"code","4a8f5764":"code","86d802cf":"code","430b5373":"code","c39aace4":"code","99900707":"code","f4b54692":"code","4e2d815e":"code","3f138a59":"code","0e97dc67":"code","21a00ffc":"code","85013092":"code","afa1194c":"code","5cf12d46":"code","78d0b5f0":"code","a4ac01aa":"code","038091a2":"code","734adf72":"code","16adc14e":"code","e71bd7aa":"code","221f837d":"code","73a2292d":"code","2d464510":"code","c0a39b55":"code","1478b0b4":"code","4dfcb18a":"code","861393f8":"code","f586f526":"code","b13b265b":"code","773efce4":"code","3a400629":"code","1314455e":"code","b7a4c25f":"code","7d10c26a":"markdown","99c8dc78":"markdown","55fc2ac2":"markdown","8350a319":"markdown","d03892c5":"markdown","38d800fd":"markdown","fe7f13f4":"markdown","e586463e":"markdown","567cb25f":"markdown","215d9cdd":"markdown","8b1eb43d":"markdown","c56e4592":"markdown","d15ac1e2":"markdown","9efe36f6":"markdown","de074da3":"markdown"},"source":{"8f1fb653":"import pandas as pd\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, explained_variance_score, max_error, mean_absolute_error\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport catboost\nfrom catboost import CatBoostRegressor\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","90ceda1b":"data = pd.read_csv('..\/input\/student-grade-prediction\/student-mat.csv')\ndata.head()","ba4c5d1d":"data.info()","cc54fef3":"data['Medu'] = data['Medu'].astype('object')\ndata['Fedu'] = data['Fedu'].astype('object')","7beabce6":"cat_features = data.dtypes[data.dtypes == 'object']\ncat_features = pd.DataFrame(data=cat_features)\ncat_features = list(set(cat_features.index))\ncat_features","b4a7a25b":"for cat_feat in cat_features:\n    print(cat_feat)\n    print(data[cat_feat].value_counts())\n    print()","9932b951":"# Correlation matrix\ncorr = data.corr()\nplt.figure(figsize=(15,15))\nsns.heatmap(corr, annot=True)","21a827c2":"#Walc and Dulc are strongly correlated with each other so we remove one of them from dataset\ndata = data.drop(columns=['Walc'])","4a8f5764":"data0 = data[(data['G1'] > 0)].copy()","86d802cf":"def get_grades(data):\n  G1 = data.loc[:, ['G1', 'sex', 'school']]\n  G1['semester'] = '1'\n  G1.columns = ['grade', 'sex', 'school', 'semester']\n\n  G2 = data.loc[:, ['G2', 'sex', 'school']]\n  G2['semester'] = '2'\n  G2.columns = ['grade', 'sex', 'school', 'semester']\n\n  G3 = data.loc[:, ['G3', 'sex', 'school']]\n  G3['semester'] = '3'\n  G3.columns = ['grade', 'sex', 'school', 'semester']\n\n  G = pd.concat([G1, G2, G3])\n  return(G)","430b5373":"def name_of_axe(var):\n\n  #object variables\n  if var == 'reason':\n    TITLE_VAR = 'Reason to choose this school'\n  elif var == 'sex':\n    TITLE_VAR = 'Sex'\n  elif var == 'address':\n    TITLE_VAR = 'Student\\'s home address type'\n  elif var == 'school':\n    TITLE_VAR = 'School'\n  elif var == 'famsize':\n    TITLE_VAR = 'Family size'\n  elif var == 'Pstatus':\n    TITLE_VAR = 'Parent\\'s cohabitation status'\n  elif var == 'Mjob':\n    TITLE_VAR = 'Mother\\'s job'\n  elif var == 'Fjob':\n    TITLE_VAR = 'Father\\'s job'  \n  elif var == 'guardian':\n    TITLE_VAR = 'student\\'s guardian'\n  elif var == 'famsup':\n    TITLE_VAR = 'Family educational support '\n  elif var == 'paid':\n    TITLE_VAR = 'Extra paid classes within the course subject'\n  elif var == 'schoolsup':\n    TITLE_VAR = 'Extra educational support'    \n  elif var == 'nursery':\n    TITLE_VAR = 'Attended nursery school'\n  elif var == 'activities':\n    TITLE_VAR = 'Extra-curricular activities'\n  elif var == 'semester':\n    TITLE_VAR = 'Semester'\n  elif var == 'Medu':\n    TITLE_VAR = 'Mother\\'s education'\n  elif var == 'Fedu':\n    TITLE_VAR = 'Father\\'s education'\n  elif var == 'higher':\n    TITLE_VAR = 'Wants to take higher education'\n  elif var == 'internet':\n    TITLE_VAR = 'Internet access at home'\n  elif var == 'romantic':\n    TITLE_VAR = 'With a romantic relationship'\n    \n  #numeric variables\n  elif var == 'age':\n    TITLE_VAR = 'Age'\n  elif var == 'traveltime':\n    TITLE_VAR = 'Home to school travel time '\n  elif var == 'studytime':\n    TITLE_VAR = 'Weekly study time'\n  elif var == 'failures':\n    TITLE_VAR = 'Number of past class failures'\n  elif var == 'famrel':\n    TITLE_VAR = 'Quality of family relationships'\n  elif var == 'freetime':\n    TITLE_VAR = 'Free time after school'\n  elif var == 'goout':\n    TITLE_VAR = 'Going out with friends'\n  elif var == 'health':\n    TITLE_VAR = 'Current health status'\n  elif var == 'absences':\n    TITLE_VAR = 'Number of school absences'\n    \n  # resultive variables\n  elif var == 'G1':\n    TITLE_VAR = 'First period grade'\n  elif var == 'G2':\n    TITLE_VAR = 'Second period grade'\n  elif var == 'G3':\n    TITLE_VAR = 'Final grade'\n  \n  else:\n    print('ERROR: there is no variable with given name')\n    \n  return(TITLE_VAR)","c39aace4":"def make_barplot(data, X, Y, HUE, PALETTE, type):\n  if type == 'typical':\n    TITLE_X = name_of_axe(X)\n    TITLE = name_of_axe(Y)\n\n    if HUE is not None:\n      TITLE_HUE = name_of_axe(HUE)\n\n      sns.set_theme(style=\"whitegrid\", palette=PALETTE)\n      ax = sns.barplot(x=X, y=Y, hue=HUE, data=data)\n      ax.axes.set_title(TITLE, fontsize=16)\n      ax.set_xlabel(TITLE_X, fontsize=14)\n      ax.set_ylabel(\"Mean\",fontsize=14)\n      plt.gca().legend(bbox_to_anchor=(1, 1), bbox_transform=plt.gcf().transFigure,\n                      loc='upper left').set_title(TITLE_HUE)\n      plt.show()\n\n    else:\n      sns.set_theme(style=\"whitegrid\", palette=PALETTE)\n      ax = sns.barplot(x=X, y=Y, data=data)\n      ax.axes.set_title(TITLE, fontsize=16)\n      ax.set_xlabel(TITLE_X,fontsize=14)\n      ax.set_ylabel(\"Mean\", fontsize=14)\n      plt.show()\n  \n  elif type == 'changes in grades':\n    TITLE_X = name_of_axe(X)\n    G = get_grades(data)\n\n    if HUE is not None:\n      TITLE_HUE = name_of_axe(HUE)\n\n      sns.set_theme(style=\"whitegrid\", palette=PALETTE)\n      ax = sns.barplot(x=X, y=Y, hue=HUE, data=G)\n      ax.axes.set_title('Average score changing', fontsize=16)\n      ax.set_xlabel(TITLE_X, fontsize=14)\n      ax.set_ylabel(\"Average score\",fontsize=14)\n      plt.gca().legend(bbox_to_anchor=(1, 1), bbox_transform=plt.gcf().transFigure,\n                      loc='upper left').set_title(TITLE_HUE)\n      plt.show()\n\n    else:\n      sns.set_theme(style=\"whitegrid\", palette=PALETTE)\n      ax = sns.barplot(x=X, y=Y, data=G)\n      ax.axes.set_title('Average score changing', fontsize=16)\n      ax.set_xlabel(TITLE_X,fontsize=14)\n      ax.set_ylabel(\"Average score\", fontsize=14)\n      plt.show()\n","99900707":"def make_countplot(data, X, HUE, PALETTE):\n  TITLE_X = name_of_axe(X)\n  if HUE is not None:\n    TITLE_HUE = name_of_axe(HUE)\n\n    sns.set_theme(style=\"whitegrid\", palette=PALETTE)\n    b = sns.countplot(x=X, hue=HUE, data=data)\n    b.set_xlabel(TITLE_X ,fontsize=14)\n    b.set_ylabel(\"Count\",fontsize=14)\n    plt.gca().legend(bbox_to_anchor=(1, 1), bbox_transform=plt.gcf().transFigure,\n                    loc='upper left').set_title(TITLE_HUE)\n    plt.show()\n\n  else:\n    sns.set_theme(style=\"whitegrid\", palette=PALETTE)\n    b = sns.countplot(x=X, data=data)\n    b.set_xlabel(TITLE_X ,fontsize=14)\n    b.set_ylabel(\"Count\",fontsize=14)\n    plt.show()","f4b54692":"# a set of palettes used for graphs and charts. You can complete it with other palettes \nPALETTES = ['gray_r', 'crest', 'magma', 'viridis', 'rocket_r', 'rocket', 'mako', 'gray', 'Greens']","4e2d815e":"X = 'sex'\nY = 'G3'\nHUE = 'romantic'\nPALETTE = PALETTES[3]\n\nmake_barplot(data, X, Y, HUE, PALETTE, 'typical')","3f138a59":"X = 'traveltime'\nHUE = 'address' \nPALETTE = PALETTES[5] \n\nmake_countplot(data, X, HUE, PALETTE)","0e97dc67":"X = 'semester'\nY = 'grade'\nHUE = 'school' \nPALETTE = PALETTES[2] \n\nmake_barplot(data, X, Y, HUE, PALETTE, 'changes in grades')","21a00ffc":"def calculate_metrics(y_true, y_pred, type):\n  '''\n  Function for calculating metrics of regression model\n  '''\n  metrics = {'R^2' : r2_score(y_true, y_pred),\n             'Explained Variance Score' : explained_variance_score(y_true, y_pred),\n             'Max Error' : max_error(y_true, y_pred),\n             'Mean Absolute Error' : mean_absolute_error(y_true, y_pred)\n             }\n  if type == 'train':\n    print(\"METRICS ON TRAIN SET\")\n  elif type == 'val':\n    print(\"METRICS ON VALIDATION SET\")\n  elif type == 'test':\n    print(\"METRICS ON TEST SET\")\n  return(metrics)\n    ","85013092":"def train_val_test_split(X, y, test_size, random_state):\n  '''\n  Function for splitting dataset into train, validation and test samples\n  '''\n  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)\n  X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=test_size, random_state=random_state)\n\n  return X_train, X_val, X_test, y_train, y_val, y_test","afa1194c":"PALETTE = PALETTES[0] \n\nb = sns.countplot(x=data0['G1'], palette=PALETTE)\nsns.set_theme(style=\"whitegrid\")\nb.set_xlabel('Grade', fontsize = 14)\nb.set_ylabel('Number of students', fontsize = 14)\nplt.show()","5cf12d46":"data1 = data0.drop(columns=['G2', 'G3'])\n\nX1 = data1.drop(columns=['G1'])\ny1 = data1['G1']\n\nX_train1, X_val1, X_test1, y_train1, y_val1, y_test1 = train_val_test_split(X1, y1, 0.15, 8)","78d0b5f0":"len(X_train1), len(X_val1), len(X_test1)","a4ac01aa":"model1 = CatBoostRegressor(iterations=100,\n                          learning_rate=0.1,\n                          depth=3, \n                          l2_leaf_reg=5, \n                          cat_features=cat_features,\n                          task_type='GPU',\n                          random_state=8,\n                          verbose=0)\n\nmodel1.fit(X_train1, y_train1)\nNone","038091a2":"y_pred_train1 = model1.predict(X_train1)\ncalculate_metrics(y_train1, y_pred_train1, 'train')","734adf72":"y_pred_val1 = model1.predict(X_val1)\ncalculate_metrics(y_val1, y_pred_val1, 'val')","16adc14e":"y_pred1 = model1.predict(X_test1)\ncalculate_metrics(y_test1, y_pred1, 'test')","e71bd7aa":"data0 = data0[(data0['G2'] > 0)]","221f837d":"PALETTE = PALETTES[0] \n\nb = sns.countplot(x=data0['G2'], palette=PALETTE)\nsns.set_theme(style=\"whitegrid\")\nb.set_xlabel('Grade', fontsize = 14)\nb.set_ylabel('Number of students', fontsize = 14)\nplt.show()","73a2292d":"data2 = data0.drop(columns=['G3'])\n\nX2 = data2.drop(columns=['G2'])\ny2 = data2['G2']\n\nX_train2, X_val2, X_test2, y_train2, y_val2, y_test2 = train_val_test_split(X2, y2, 0.15, 8)","2d464510":"model2 = CatBoostRegressor(iterations=100,\n                          learning_rate=0.1,\n                          depth=3, \n                          l2_leaf_reg=13, \n                          cat_features=cat_features,\n                          task_type='GPU',\n                          random_state=8,\n                          verbose=0)\n\nmodel2.fit(X_train2, y_train2)\nNone","c0a39b55":"y_pred_train2 = model2.predict(X_train2)\ncalculate_metrics(y_train2, y_pred_train2, 'train')","1478b0b4":"y_pred_val2 = model2.predict(X_val2)\ncalculate_metrics(y_val2, y_pred_val2, 'val')","4dfcb18a":"y_pred2 = model2.predict(X_test2)\ncalculate_metrics(y_test2, y_pred2, 'test')","861393f8":"data0 = data0[(data0['G3'] > 0)]","f586f526":"PALETTE = PALETTES[0] \n\nb = sns.countplot(x=data0['G3'], palette=PALETTE)\nsns.set_theme(style=\"whitegrid\")\nb.set_xlabel('Grade', fontsize = 14)\nb.set_ylabel('Number of students', fontsize = 14)\nplt.show()","b13b265b":"X3 = data0.drop(columns=['G3'])\ny3 = data0['G3']\n\nX_train3, X_val3, X_test3, y_train3, y_val3, y_test3 = train_val_test_split(X3, y3, 0.15, 8)","773efce4":"model3 = CatBoostRegressor(iterations=100,\n                          learning_rate=0.1,\n                          depth=3, \n                          l2_leaf_reg=13, \n                          cat_features=cat_features,\n                          task_type='GPU',\n                          random_state=8,\n                          verbose=0)\n\nmodel3.fit(X_train3, y_train3)\nNone","3a400629":"y_pred_train3 = model3.predict(X_train3)\ncalculate_metrics(y_train3, y_pred_train3, 'train')","1314455e":"y_pred_val3 = model3.predict(X_val3)\ncalculate_metrics(y_val3, y_pred_val3, 'val')","b7a4c25f":"y_pred3 = model3.predict(X_test3)\ncalculate_metrics(y_test3, y_pred3, 'test')","7d10c26a":"# **Visualisation**","99c8dc78":"We can see that Medu and Fedu (mother's education and father's education) was interpreted as numeric features while they are categorical features. So we need to change their type:","55fc2ac2":"There are some useful functions for easy graphs making below. ","8350a319":"Testing the developed model showed it is quite difficult to predict a student's grade in the first semester without having data on students' previous grades. However, as the model includes the scores from previous semesters, the quality of the model increases: the coefficient of determination was about 0.93 for the final score.\n\nThe developed model allows to predict the grades of students and to use this forecast to early identify the \"risk group\" that needs additional help in mastering the educational program.","d03892c5":"We also remove observes where the grade is equal to 0 because it might mean that a student just didn't turn up on the examination:","38d800fd":"# **Predicting grades for the 1st semester**","fe7f13f4":"# **Predicting grades**","e586463e":"Let's see what types of data are in the dataset:","567cb25f":"# **Predicting grades for the 2st semester (G2)**","215d9cdd":"Let's create a list with categorical features' names","8b1eb43d":"# **Data preprocessing**","c56e4592":"There are a lot of categorical features in the data. The most popular method for encoding them is One-Hot Encoding (OHE). But OHE has its disadvantages so we suggest using CatBoost regressor for predicting students' grades. CatBoost is an algorithm for gradient boosting on decision trees that does not require pre-processing data. It also allows using GPU to train models.","d15ac1e2":"# **Conclusion**","9efe36f6":"# **Predicting final grades (G3)**","de074da3":"# **Predicting grades**"}}