{"cell_type":{"3d07100b":"code","c134910e":"code","d3b9a98c":"code","f6bcd626":"code","e1c35c9b":"code","eedd727d":"code","75c0fb7d":"code","7b062568":"code","3cb547de":"code","f1b78e23":"code","944cb7f7":"code","dacd9ca6":"code","1f897627":"code","7d053ad3":"code","d15743f2":"code","9b8b62c3":"code","0be64feb":"code","2a33faed":"code","e6d70fe4":"code","318f1255":"code","f47ca0b8":"code","fb506299":"code","65bae283":"code","740f5209":"code","093cd000":"code","f8d23b8c":"code","ac027300":"markdown","4e52974b":"markdown","fffa23ac":"markdown","0f4f89e0":"markdown","a6d4f069":"markdown","7cd63801":"markdown","de8f9195":"markdown","0a570f2c":"markdown","929030d5":"markdown","de91926f":"markdown","e494f318":"markdown","a2aecdc0":"markdown","ae507252":"markdown","f0e90edb":"markdown","d99ea55f":"markdown","39497513":"markdown","3c0cc4bd":"markdown","0e95122b":"markdown","77c129a6":"markdown","74380aec":"markdown","2dd052cd":"markdown","bbd1c0c5":"markdown","2f4eb5ab":"markdown","d215c789":"markdown","3f979a96":"markdown","5353da42":"markdown","638303bf":"markdown","912cdd5e":"markdown","a4bbd803":"markdown","7279a66e":"markdown","edf1c2e0":"markdown"},"source":{"3d07100b":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px\n\nimport os\nimport warnings\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.cluster import AgglomerativeClustering \n\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom scipy.cluster import hierarchy \nfrom scipy.spatial import distance_matrix \n\nwarnings.filterwarnings('ignore')\nnp.random.seed(2021)","c134910e":"df = pd.read_csv('..\/input\/alcohol-consumption-in-russia\/russia_alcohol.csv')\ndf.head()","d3b9a98c":"df.describe()","f6bcd626":"list(df['region'].unique())","e1c35c9b":"dataplot = sns.heatmap(df.corr(), cmap=\"YlGnBu\", annot=True)\nplt.show()","eedd727d":"NA = pd.DataFrame(\n    data=[\n        df.isna().sum().tolist(),\n        [\n            \"{:.2f}\".format(i) + \"%\"\n            for i in (df.isna().sum() \/ df.shape[0] * 100).tolist()\n        ],\n    ],\n    columns=df.columns,\n    index=[\"NA Count\", \"NA Percent\"],\n).T.sort_values(by=\"NA Count\", ascending=False)\nNA.style.background_gradient(cmap=\"seismic\", subset=[\"NA Count\"])\n","75c0fb7d":"df.fillna(method=\"pad\", inplace=True)\ndf.isna().sum()\n","7b062568":"import time\nfrom geopy.geocoders import Nominatim\n\napp = Nominatim(user_agent=\"russia\")\n\ndef lat(x): \n    time.sleep(1)\n    try:\n        return app.geocode(x).raw[\"lat\"]\n    except:\n        return lat(x)   \n    \ndef lon(x):    \n    time.sleep(1)\n    try:\n        return app.geocode(x).raw[\"lon\"]\n    except:\n        return lon(x)   \n\ngeo = df['region'].value_counts()\ngeo = geo.to_frame().reset_index().rename(columns={\"region\":\"count\",\"index\":\"region\"})\ngeo['lat'] = geo['region'].apply(lat)\ngeo['lon'] = geo['region'].apply(lon)\n\ngeo.drop('count',axis=1).to_csv(\".\/russian_geo.csv\",index=False)","3cb547de":"geo = pd.read_csv(\".\/russian_geo.csv\")\ndf_geo = (\n    pd.merge(df, geo, on=\"region\")\n    .groupby(\"region\")\n    .mean()\n    .reset_index()\n    .sort_values(\"beer\", ascending=False)\n)\n","f1b78e23":"df_geo[\"total\"] = (\n    df_geo[\"wine\"]\n    + df_geo[\"brandy\"]\n    + df_geo[\"vodka\"]\n    + df_geo[\"beer\"]\n    + df_geo[\"champagne\"]\n)\ndf_geo[\"text\"] = (\n    df_geo[\"region\"] + \"<br> Alcohol consumption:\" + (df_geo[\"total\"]).astype(str)\n)\n# limits = [(0,99),(100,299),(300,499),(500,999),(1000,3000)]\n\nlimits = [(0, 10), (11, 21), (22, 84)]\ncolors = [\"royalblue\", \"crimson\", \"lightseagreen\"]\nscale = 500\n\nfig = go.Figure()\n\nfor i in range(len(limits)):\n    lim = limits[i]\n    df_sub = df_geo[lim[0] : lim[1]]\n    fig.add_trace(\n        go.Scattergeo(\n            lon=df_sub[\"lon\"],\n            lat=df_sub[\"lat\"],\n            text=df_sub[\"text\"],\n            marker=dict(\n                size=df_sub[\"total\"],\n                color=colors[i],\n                line_color=\"rgb(40,40,40)\",\n                line_width=0.5,\n                sizemode=\"area\",\n            ),\n            name=\"Top {0} - {1}\".format(lim[0] + 1, lim[1]),\n        )\n    )\n\nfig.update_layout(\n    title_text=\"Alcohol Consumption in Russia\",\n    showlegend=True,\n    legend_title=\"Beer 1 liter\/percapita\",\n    legend_title_font_size=14,\n    geo=dict(\n        scope=\"world\",\n        landcolor=\"rgb(217, 217, 217)\",\n        lonaxis=dict(range=[23.6985, 80.06269]),\n        lataxis=dict(range=[33.72197, 80.7293]),\n    ),\n)\n\nfig.show()\n","944cb7f7":"fig, axes = plt.subplots(1, 5, figsize=(15, 6), sharey=True)\nfor x in range(1, 6, 1):\n\n    column_name = df.columns[x + 1]\n    sns.lineplot(data=df, x=\"year\", y=f\"{column_name}\", ax=axes[x - 1])\n    axes[x - 1].set_title(f\"{column_name} consumption\")\n    axes[x - 1].set_xlabel(\"Year\")\n    axes[x - 1].set_ylabel(\"litres per capita\")\n","dacd9ca6":"year_df = (\n    df.groupby(\"year\")\n    .mean()\n    .stack(0)\n    .reset_index()\n    .rename(columns={\"level_1\": \"type\", 0: \"consumption\"})\n)\n# year_df['total'] = year_df['wine']+year_df['brandy']+year_df['vodka']+year_df['beer']+year_df['champagne']\nfig = px.scatter(\n    year_df,\n    x=\"type\",\n    y=\"consumption\",\n    animation_frame=\"year\",\n    color=\"type\",\n    size=\"consumption\",\n    size_max=55,\n    # range_x=[100,100000],\n    range_y=[0, 60],\n)\n\n# fig[\"layout\"].pop(\"updatemenus\") # optional, drop animation buttons\nfig.show()\n","1f897627":"X = df.groupby([\"region\"])[\"wine\", \"beer\", \"vodka\", \"champagne\", \"brandy\"].mean()\n\nclusters = []\n\nfor i in range(1, 10):\n    km = KMeans(n_clusters=i).fit(X)\n    clusters.append(km.inertia_)\n\nfig, ax = plt.subplots(figsize=(12, 8))\nsns.lineplot(x=list(range(1, 10)), y=clusters, ax=ax)\nax.set_title(\"Searching for Elbow\")\nax.set_xlabel(\"Clusters\")\nax.set_ylabel(\"Inertia\");\n","7d053ad3":"km = KMeans(n_clusters=2).fit(X)\n\nX[\"Labels\"] = km.predict(X)\n\nplt.figure(figsize=(12, 8))\nsns.scatterplot(X[\"wine\"], X[\"beer\"], hue=X[\"Labels\"], palette=\"Set1\", alpha=0.7)\nplt.title(\"KMeans with 2 Clusters\")\nplt.show()\n","d15743f2":"km = KMeans(n_clusters=3).fit(X)\n\nX[\"Labels\"] = km.predict(X)\n\nplt.figure(figsize=(12, 8))\nsns.scatterplot(X[\"wine\"], X[\"beer\"], hue=X[\"Labels\"], palette=\"Set1\", alpha=0.7)\nplt.title(\"KMeans with 3 Clusters\")\nplt.show()\n","9b8b62c3":"fig, axes = plt.subplots(1, 4, figsize=(15, 6))\n\nsns.scatterplot(\n    X[\"wine\"], X[\"beer\"], hue=X[\"Labels\"], palette=\"Set1\", alpha=0.7, ax=axes[0]\n)\naxes[0].set_title(\"beer V\/S wine\")\n\nsns.scatterplot(\n    X[\"vodka\"], X[\"champagne\"], hue=X[\"Labels\"], palette=\"Set1\", alpha=0.7, ax=axes[1]\n)\naxes[1].set_title(\"vodka V\/S champagne\")\n\nsns.scatterplot(\n    X[\"wine\"], X[\"champagne\"], hue=X[\"Labels\"], palette=\"Set1\", alpha=0.7, ax=axes[2]\n)\naxes[2].set_title(\"wine V\/S champagne\")\n\nsns.scatterplot(\n    X[\"vodka\"], X[\"brandy\"], hue=X[\"Labels\"], palette=\"Set1\", alpha=0.7, ax=axes[3]\n)\naxes[3].set_title(\"vodka V\/S brandy\")\n\nplt.show()\n","0be64feb":"fig = plt.figure(figsize=(10, 8))\nax1 = fig.add_subplot(151)\nsns.swarmplot(x=\"Labels\", y=\"beer\", data=X, ax=ax1)\nax1.set_title(\"beer\")\n\nax2 = fig.add_subplot(152)\nsns.swarmplot(x=\"Labels\", y=\"vodka\", data=X, ax=ax2)\nax2.set_title(\"vodka\")\n\nax3 = fig.add_subplot(153)\nsns.swarmplot(x=\"Labels\", y=\"wine\", data=X, ax=ax3)\nax3.set_title(\"wine\")\n\nax4 = fig.add_subplot(154)\nsns.swarmplot(x=\"Labels\", y=\"champagne\", data=X, ax=ax4)\nax4.set_title(\"champagne\")\n\nax5 = fig.add_subplot(155)\nsns.swarmplot(x=\"Labels\", y=\"brandy\", data=X, ax=ax5)\nax5.set_title(\"brandy\")\n\nplt.show()\n","2a33faed":"com_X = X[\"beer\"] + X[\"wine\"] + X[\"champagne\"] + X[\"vodka\"] + X[\"brandy\"]\nsns.swarmplot(x=\"Labels\", y=com_X, data=X)\nplt.title(\"Labels V\/S All drinks\");\n","e6d70fe4":"dist = distance_matrix(X, X)\nZ = hierarchy.linkage(dist, \"average\")\n","318f1255":"plt.figure(figsize=(12, 8))\ndendro = hierarchy.dendrogram(Z, leaf_rotation=0, leaf_font_size=6, orientation=\"right\")\n","f47ca0b8":"hc = AgglomerativeClustering(n_clusters=4, affinity=\"euclidean\", linkage=\"ward\")\ny_hc = hc.fit_predict(X)","fb506299":"plt.figure(figsize=(12, 8))\nsns.scatterplot(X[\"wine\"], X[\"beer\"], hue=y_hc, palette=\"Set1\", alpha=0.7)\nplt.title(\"Agglomerative Clustering with 4 Clusters\")\nplt.show()\n","65bae283":"X[\"H_Pop\"] = y_hc\nX[\"H_Pop\"] = X[\"H_Pop\"].replace(2, \"Low\")\nX[\"H_Pop\"] = X[\"H_Pop\"].replace(1, \"Medium\")\nX[\"H_Pop\"] = X[\"H_Pop\"].replace(3, \"High\")\nX[\"H_Pop\"] = X[\"H_Pop\"].replace(0, \"Top\")\nX[X[\"H_Pop\"] == \"Top\"].head(2)\n","740f5209":"X.rename(columns={\"Labels\": \"KM_Pop\"}, inplace=True)\nX[\"Total_Drinks\"] = com_X\nX[\"KM_Pop\"] = X[\"KM_Pop\"].replace(2, \"Low\")\nX[\"KM_Pop\"] = X[\"KM_Pop\"].replace(1, \"Medium\")\nX[\"KM_Pop\"] = X[\"KM_Pop\"].replace(0, \"High\")\nX[X[\"KM_Pop\"] == \"High\"].sort_values(\"Total_Drinks\", ascending=False).head(11)\n","093cd000":"city_names_total = (\n    X[(X[\"KM_Pop\"] == \"High\") & (X[\"H_Pop\"] == \"Top\")]\n    .sort_values(\"Total_Drinks\", ascending=False)\n    .head(11)\n    .index\n)\nlist(city_names_total.drop(\"Saint Petersburg\"))\n","f8d23b8c":"city_names_wine = (\n    X[(X[\"KM_Pop\"] == \"High\") & (X[\"H_Pop\"] == \"Top\")]\n    .sort_values(\"wine\", ascending=False)\n    .head(11)\n    .index\n)\nlist(city_names_wine.drop(\"Saint Petersburg\"))","ac027300":"We can explore all the unique regions within the dataset. ","4e52974b":"For the final results, we are going to sort our values by wine consumption to get a similar cluster as **Saint Petersburg** where the companie's **wine** marketing campaign became successful.\n\n**These are the region that we should target next for promoting Wine and other Alcoholic beverages:**\n\n1. Vologda Oblast\n2. Komi Republic\n3. Leningrad Oblast\n4. Smolensk Oblast\n5. Sverdlovsk Oblast\n6. Moscow\n7. Kamchatka Krai\n8. Ivanovo Oblast\n9. Yaroslavl Oblast\n10. Sevastopol","fffa23ac":"## Animation\nYou can interact with the figure below and observe the change in demand by clicking on the play button. This is a simple and attractive way to present your data as a story in from of the marketing manager.\n\n> It is fun too \ud83d\ude0a","0f4f89e0":"## Hierarchy Agglomerative Clustering\n\nUsing Agglomerative clustering we are going to devide our dataset in 4 clusters. To learn more about Agglomerative Clustering check this [link](https:\/\/towardsdatascience.com\/breaking-down-the-agglomerative-clustering-process-1c367f74c7c2)","a6d4f069":"## Dendrogram\nHierarchical clustering is typically visualized as a dendrogram every unique cluster is represented with different colors. As you can see how each node is connected forming this hierarchy of clusters.\n> It seems like we have 4 hierarchical clusters that are determined by different colors. ","7cd63801":"## Correlation\nThere is a high correlation between champagne and brandy which makes it even better. If you promote champagne there will be an increase in the sale of brandy and champagne, which makes it win-win situation.","de8f9195":"Let's check the n=2 cluster. \n\n> It seems quite clear, but we cannot stop here, we need to also check for n=3 in the next section.","0a570f2c":"There is 1615 sample which is logical as we have 19 years of data and 85 regions. The beer is leading the game as the mean value of beer is 51.3 liters by year per capita and the second-highest is vodka 11.81 liters by year per capita which is now even close to beer. This means people prefer beer as a go-to beverage. The beer also has the highest standard deviation which means that its demand is not stable and can fluctuate with time whereas champagne and brandy are a pretty safe bet if you want to start a low-risk business with the lowest standard deviation.","929030d5":"# Map\nIn this section, we are going to plot the total alcohol consumption per region on the map.\n- we have created a new column name \"total\" which sums up all the drinks columns.\n- we have also created test columns that contain a caption, that will be displayed on the map.\n- we are dividing our dataset into three categories based, first contains the top 10, the second contains 11th to 21st and third contains the rest of the regions. The ranking is based on Alcohol consumption per region.\n- We are going to use Plotly sample [code](https:\/\/plotly.com\/python\/bubble-maps\/) for plotting bubble maps.\n\n> **The top 10 and 11-21 have no paterens. They are all over the place but we can see the pattern in the rest of the categories. You can also explore the different regions by hovering your mouse over and zooming out to observe more regions.**","de91926f":"# Learning Resource\n1. [Clustering Agglomerative process | Towards Data Science](https:\/\/towardsdatascience.com\/breaking-down-the-agglomerative-clustering-process-1c367f74c7c2)\n2. [Topic 7. Unsupervised learning: PCA and clustering | Kaggle](https:\/\/www.kaggle.com\/kashnitsky\/topic-7-unsupervised-learning-pca-and-clustering)\n3. [Unsupervised Learning and Data Clustering | by Sanatan Mishra | Towards Data Science](https:\/\/towardsdatascience.com\/unsupervised-learning-and-data-clustering-eeecb78b422a)\n4. [Courses - DataCamp Learn](https:\/\/app.datacamp.com\/learn\/courses\/unsupervised-learning-in-python)\n5. [\u2728 Introducing Plotly Express \u2728. Plotly Express is a new high-level\u2026 | by plotly | Plotly | Medium](https:\/\/medium.com\/plotly\/introducing-plotly-express-808df010143d)\n6. [seaborn: statistical data visualization \u2014 seaborn 0.11.2 documentation (pydata.org)](https:\/\/seaborn.pydata.org\/)\n7. [Restaurants Sales During COVID (EDA) \ud83d\udc68\u200d\ud83c\udf73\ud83d\ude32 | Kaggle](https:\/\/www.kaggle.com\/ahmedterry\/restaurants-sales-during-covid-eda)\n\n\n\n","e494f318":"Now checking on n=3 cluster.\n> I think 3 clusters are better and we are going to divide our dataset based on it. The clusters are created based on alcohol consumption. ","a2aecdc0":"# Geo Location\nFor geolocation, we need to get coordinates to display stat on the map. For that we need:\n- geopy -> Nominatim\n- creating user agent to connect to geopy server.\n- create `lat` and `lon` function to extract latitude and longitude using the name of the place.\n- value count the `region` column, resetting index, and then renaming columns.\n- applying both functions on to `geo['region']`\n- export the file as \"russian_geo.csv\"\n\nThis process takes 5 minutes to run so we are just going to save the results in a .csv file and later merge it with our main database.","ae507252":"# Results\nWe have finally spotted 10 regions similar to Saint Petersburg for promoting launching new marketing comparing. We have selected the cluster which is \"High\" on the Kmean cluster and \"Top\" on the Herarchery cluster, then sort values but \"Total_Drinks\" to get Top ten regions for the campaign.","f0e90edb":"## Cluster Visualization\nIn this section we are going to compare the clusters on various columns and as you can see the best results are shown for beer V\/S wine.","d99ea55f":"# Kmean Clusters\nFinding cluster is a subcategory of supervised learning where there are no targets available in training data. Clustering is the task of grouping together a set of objects in a way that objects in the same cluster are more similar to each other than to objects in other clusters. K-means is vastly used for clustering in many data science applications, especially useful if you need to quickly discover insights from unlabeled data.\n\nFirst, we need to find how many clusters are there in our data, before that we need to create our `X` for that we are going to group the dataset by \"region\" and take average values. Then we are going to run SKlearn `KMeans` on a range from 1 to 9. There are 2 elbows in our line plot, we will be checking both of them. The Elbow method tells us to select the cluster when there is a significant change in inertia. \n\nWe have discovered elbow at `2` and at `3`.","39497513":"# Data\n\nThe marketing team has sourced you with historical sales volumes per capita for several different drinks types.\n\n- \"year\" - year (1998-2016)\n- \"region\" - the name of a federal subject of Russia. It could be oblast, republic, krai, autonomous okrug, federal city, and a single autonomous oblast\n- \"wine\" - sale of wine in liters by year per capita\n- \"beer\" - sale of beer in liters by year per capita\n- \"vodka\" - sale of vodka in liters by year per capita\n- \"champagne\" - sale of champagne in liters by year per capita\n- \"brandy\" - sale of brandy in liters by year per capita\n\n## Loading Dataset\nWe have used pandas to load the `.csv` dataset and its pretty small dataset containing yearly **(1998-2016)** alcohol consumption **(beer, champagne, brandy, wine, vodka)** per region **(85)**. ","3c0cc4bd":"The 4 clusters are almost similar to Kmeans 3 clusters but the medium cluster is divided. We will be using both Kmeans and hierarchy clusters to determine optimum locations for a marketing campaign.","0e95122b":"# Missing Values\nWe will be using pandas dataframe `background_gradient` to display several missing values and percentages. It seems like all drinks columns have missing values and the highest is brandy with 66.","77c129a6":"# Hierarchy Cluster\n\nWe will be using scipy spatial distance_matrix to calculate the distance from each point to every other point of a dataset. The function distance_matrix requires two inputs and we are adding X and X.\n\nWe will then use scipy hierarchy linkage using the average method to create links between each cluster, which later will be used to plot the dendrogram.\n","74380aec":"## If you like my work, please upvote\ud83d\udc46 and share\ud83e\udd1d","2dd052cd":"We are going to go the same with Kmean clusters:\n\n1. Renaming column name from \"Labels\" to \"KM_Pop\"\n2. Create a new column \"Total_Drinks\" and add total drinks values.\n3. renaming numerical values to categories based on popularity.\n4. Filtering out to see top 11 values sort by Total Acholo consumption. ","bbd1c0c5":"### Total drinks swarm plot\nTo summarise our findings let's visualize total alcohol consumption and clusters. It is now clear the hypothesis was true about the orange to begin at the top of the ladder. ","2f4eb5ab":"- loading geo location dataset.\n- merging it with main dataset.\n- group by \"region\" and mean.\n- sort values by \"beer\" descending.\n\nWe are going to use df_geo dataset to plot the total alcohol consumption on the Plotly map.","d215c789":"# Conclusion\nI had fun playing around with various unsupervised clustering algorithms and plotting values on the map. In this project, we have learned how to analyze the data, fill missing values, plot values on the map, various seaborn visualization, and finally use a clustering algorithm to predict the top ten regions for marketing campaigns. It is easy to promote beer but its declining since 2007 so the best hope is to promote the more stable product such as wine and brandy. The company should focus on the \"Vologda Oblast\" region as it has the highest vine consumption in the Top cluster and after the successful launch, it should move to the rest of the nine places mentioned above. We have no idea what is the current year and it's pretty hard to predict clusters using times series, instead, I have simplified the problem by taking mean value. \n> Thank you for reading my notebook and don't forget to upvote\ud83d\udc46.","3f979a96":"# Alcohol Consumption Past Trend\nIn this section, we are going to explore different types of drinks and their consumption trend over the past 19 years.\n\n> As we can see beer consumption has risen with time up till 2007, then it became steady and its declining since 2011. Wine, champagne, and brandy consumption are lower than beer but they are steady. The vodka demand has increased up till 2002 and it's declining slowly and steadily with time. \n\n**The safest bet is to launch a campaign on either brandy or champagne but wine can be profitable as it has more consumption per capita and it is stable**","5353da42":"We are going to use the `fillna` function and method `pad` to fill missing values with previous values in a column. As we can see that there are no missing values in our dataset.","638303bf":"# Future Works\n- In this project, I haven't used time-series data to determine the clusters. For future work, I will use the time series model to predict clusters similar to `Saints Perterberg`. \n- Next, I will explore various options in geospatial analysis. \n- I will normalize data using various scaling tools and observe the difference.\n- Finally, I will do a comparison between various algorithmic results. ","912cdd5e":"## Clusters Swarmplot\nLet's visualize our results using Swamplot.\n\n> We can clearly see the orange has the highest average consumption in all drinks categories. They all are following similar rules of ranking. The orange is high, the blue is medium and the green is low. We are going to use this to pick the top ten regions and products. ","a4bbd803":"# Data Analysis on Alcoholic Drinks in Russia and Design Promotional strategy. \n\nAlcohol consumption in Russia remains among the highest in the world. According to a [2011 report](https:\/\/en.wikipedia.org\/wiki\/Alcohol_consumption_in_Russia#cite_note-WHO-report-1) by the World Health Organization, which makes it the best place to start a beverage business. People love their drinks and the company which owns a chain of stores across Russia that sell a variety of alcoholic drinks wants to invest in marketing campaigns. The company recently ran a wine promotion in Saint Petersburg that was very successful. Due to the cost to the business, it isn\u2019t possible to run the promotion in all regions. In this project, we are going to analyze our data, fix missing values, visualize data, train the clustering model, and finally visualize our results. \n\n> Our main goal is to find the next ten locations similar to Saint Petersburg and where the wine promotion campaign became successful. \n\n","7279a66e":"![image.png](attachment:81694856-1f9a-4214-96de-8b66242aa055.png)","edf1c2e0":"# Categorizing Clusters \nIt's time to add both the Kmeans cluster and Hierarchical cluster into our main database. \n1. creating a new column \"H_Pop\" and adding H cluster prediction.\n2. renaming numerical values to categories based on popularity.\n3. Filtering out to see top 2 values.  "}}