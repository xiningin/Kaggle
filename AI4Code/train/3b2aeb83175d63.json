{"cell_type":{"73f120c8":"code","4d8d10e0":"code","9af4c606":"code","898bb61d":"code","034ac265":"code","ada7e4ef":"markdown","dd9d9123":"markdown","4a2a7cc5":"markdown"},"source":{"73f120c8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom pathlib import Path\nfrom scipy.signal import find_peaks\nfrom matplotlib import pyplot as plt","4d8d10e0":"path      = Path('..\/input')\ntrain_df  = pd.read_csv(path\/'train.csv')\n\nvar_names = [col for col in train_df if 'var_' in col]","9af4c606":"def count_dist_peaks(series, bins, prominence, width):\n    count, division = np.histogram(series, bins=bins)\n    peaks, props = find_peaks(count, prominence=prominence, width=width)\n    return peaks","898bb61d":"peak_dic = {col:count_dist_peaks(train_df[col].values, bins=100, prominence=700,width=[0,10]) for col in var_names}\nnon_empty_peaks = {k:v for k,v in peak_dic.items() if len(v) > 0}","034ac265":"var_count = len(non_empty_peaks)\ncols      = 3\nrows      = var_count\/\/cols + 0 if var_count % cols == 0 else 1\n\nf, axes = plt.subplots(rows,cols, figsize=(5*cols, 5*rows))\n\nfor i,(k,v) in enumerate(non_empty_peaks.items()):\n    count, division = np.histogram(train_df[k].values, bins=100)\n    ax=axes[i \/\/3,i % 3]\n    train_df[k].plot.hist(bins=100, alpha=0.5, density=True, title=k,ax=ax)\n    for p in v:\n        ax.axvline(x=(division[p]+division[p+1])\/2,c='red',alpha=0.2)","ada7e4ef":"### Import training data","dd9d9123":"#### Get a list of peaks for the series that have them","4a2a7cc5":"### Define peak finding function on histogram of a series\n\nThis function uses the `find_peaks` function from `scipy.signal` which takes various parameters describing constraints on the peaks that you wish to find. I have specified values for `prominence` and `width` to try and highlight the spikes in the density rather than just the peak of the distribution."}}