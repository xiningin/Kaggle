{"cell_type":{"31ebd1cc":"code","f3e3ff23":"code","52e8ec1f":"code","cfb545a1":"code","ad2afd52":"code","87854844":"code","74dfbfe0":"code","f72de8b0":"code","76021d6b":"code","75de3c9a":"code","1feb6c7f":"code","34729da0":"code","3e4d6123":"code","bde5ac59":"code","52260869":"code","1c01451f":"code","287ca7b9":"code","cb976e1e":"code","df50358e":"code","3af799cf":"code","634376f3":"code","b3ab7a51":"code","6cce4daf":"code","1ec57e75":"code","82dc1269":"code","9606323c":"code","fd7f4d22":"code","2d0c248e":"code","30467dfc":"code","7948a270":"code","804243d9":"code","634aa2f6":"code","825c346d":"code","6d07ccdd":"code","a4cd2db2":"code","62c0bafb":"code","07eaa124":"code","ccc4d6e3":"code","888c4e8e":"code","e29a9ca7":"code","99fb8d7c":"code","238b83eb":"code","23af7dcb":"code","6c00c4d2":"code","b36a5fc2":"code","f5ef43f1":"code","46022110":"code","674a7380":"code","c3be6045":"code","c6d0795c":"code","6e890a7c":"code","10f2dcdb":"code","25336a99":"code","582e9d66":"code","78175283":"code","2d345a6f":"code","7b3e1e3b":"code","16b7d959":"code","e1562ac3":"code","175be47e":"code","5be12feb":"code","9f238f30":"code","8eee555f":"code","60ac9b4d":"code","e938e6b8":"code","d450ffbb":"code","625f8c2e":"code","7b491e71":"markdown","870b9879":"markdown","55354650":"markdown","bf38eec7":"markdown","6fa5d4fc":"markdown","0305ea9e":"markdown"},"source":{"31ebd1cc":"import numpy as np\nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os, re\n\nfrom IPython.core.display import display, HTML","f3e3ff23":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","52e8ec1f":"question_df = pd.read_csv('\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv', low_memory=False).T[0]\n# questions = ''.join([f'<li>{i}<\/li>' for i in question_df[1:]])\n# display(HTML(f'<h3 style=\"color:green\">Question List:<\/h3><ol>{questions}<\/ol>'))","cfb545a1":"file_path = '\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv'\ndf = pd.read_csv(file_path, skiprows=(1,1))\ndf.head()","ad2afd52":"df.shape","87854844":"# columns_text = [col for col in list(df.columns) if 'TEXT' in col]\n# print(len(columns_text))\n# print(columns_text)","74dfbfe0":"columns_simple = [col for col in list(df.columns) if re.search('Q\\d{1,2}$', col)]\n# print(len(columns_simple))\n# print(columns_simple)\nquestions = ''.join([f'<li>{i}<\/li>' for i in columns_simple])\ndisplay(HTML(f'<h3 style=\"color:green\">Simple Question<\/h3><ol>{questions}<\/ol>'))","f72de8b0":"columns_multiple = [col for col in list(df.columns) if re.search('Part_\\d{1,2}$|_[A-Z]_Part_\\d{1,2}$', col)]\n# print(len(columns_multiple))\n# print(columns_multiple)\nmultiple_columns_list = [ [col]+col.split('_Part_') for col in columns_multiple ]\nds_multiple = pd.DataFrame(multiple_columns_list).groupby([1])[0].apply(list)","76021d6b":"df_multiple = pd.DataFrame(ds_multiple)\ndf_multiple['sort_1']=ds_multiple.index.str.findall('\\d{1,2}').values\ndf_multiple['sort_1']=df_multiple['sort_1'].str[0].astype(int)\ndf_multiple['sort_2']=ds_multiple.index.str.split('_').values\ndf_multiple['sort_2']=df_multiple['sort_2'].apply(lambda x: [i for i in x if 'Q' not in  i]).str[0]\ndf_multiple = df_multiple.sort_values(['sort_1', 'sort_2'])","75de3c9a":"questions = ''.join([f'<li>{i}<\/li>' for i in df_multiple.index])\ndisplay(HTML(f'<h3 style=\"color:green\">Multiple Choice Question<\/h3><ol>{questions}<\/ol>'))","1feb6c7f":"df_simple = df[columns_simple]","34729da0":"def countplot_top(data, col, xlabel, ylabel, fs, top, title=''):\n    \n    plt.figure(figsize=(10, 10))\n        \n    ax = sns.countplot(y=col, data=data, order=data[col].value_counts().iloc[:top].index, color='green')\n    plt.title(title, fontsize=fs)\n    plt.xlabel(xlabel, fontsize=fs)\n    plt.ylabel(ylabel, fontsize=fs)\n    plt.grid(axis='x', linestyle='-.')\n\n    sns.despine()\n    \n    for patch, value in zip(ax.patches, data[col].value_counts()):  \n        ax.text(patch.get_width() + 100, patch.get_y() + (patch.get_bbox().y1-patch.get_y())\/2,\n            value,\n            ha=\"left\", va='center',\n            fontsize=18)\n        \n    new_ytickslabel = []\n    for i in ax.get_yticklabels():\n        new_ytickslabel.append( ''.join([l + '\\n' * (n % 50 == 49) for n, l in enumerate(list(i.get_text()))]) ) \\\n                if len(i.get_text())>50 else new_ytickslabel.append(' '*(50-len(i.get_text()))+i.get_text())\n    ax.set_yticklabels(new_ytickslabel)\n    ax.tick_params(axis='both', which='major', labelsize=18)\n","3e4d6123":"xlabel='# of Respondents'\nylabel=''\nfntsz=20\ntop=15","bde5ac59":"column='Q1'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","52260869":"column='Q2'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","1c01451f":"country_dict = {'United States of America':'USA', \n                'United Kingdom of Great Britain and Northern Ireland':'UK'}\ndf_simple['Q3'] = df_simple['Q3'].replace(country_dict)","287ca7b9":"column = 'Q3'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","cb976e1e":"column = 'Q4'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","df50358e":"column = 'Q5'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","3af799cf":"column = 'Q6'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","634376f3":"column = 'Q8'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","b3ab7a51":"column = 'Q11'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","6cce4daf":"column = 'Q13'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","1ec57e75":"column = 'Q15'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","82dc1269":"column = 'Q20'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","9606323c":"column = 'Q21'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","fd7f4d22":"column = 'Q22'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","2d0c248e":"column = 'Q22'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","30467dfc":"column = 'Q24'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","7948a270":"column = 'Q25'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","804243d9":"column = 'Q30'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","634aa2f6":"column = 'Q32'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","825c346d":"column = 'Q38'\nprint(question_df[column])\ncountplot_top(data=df_simple, col=column, xlabel=xlabel, ylabel=ylabel, fs=fntsz, top=top)","6d07ccdd":"# def get_multiple_question_data(question, ds_multiple, data):\n#     columns_list = ds_multiple[question]\n#     data = data[columns_list]\n#     data_list = [ data[col].value_counts().to_dict() for col in data.columns ]\n#     data_dict = { k:v for values in data_list for k, v in values.items() }\n#     return pd.DataFrame.from_dict(data_dict, orient='index').sort_values(0, ascending=False)","a4cd2db2":"df_qu = pd.DataFrame(pd.DataFrame(question_df.str.replace(':','?').str.split('?').str[0]).reset_index().groupby(0)['index'].apply(list))\ndf_qu['question_number'] = df_qu['index'].str[0].str.split('_Part_').str[0]\ndf_qu = df_qu.reset_index().rename(columns={0:'question','index':'question_parts'}).set_index('question_number')\ndf_qu['question'] = df_qu['question']+'?'","62c0bafb":"def get_multiple_question_data(question, columns_list, data):\n    data = data[columns_list].copy()\n    data_list = [ data[col].value_counts().to_dict() for col in data.columns ]\n    data_dict = { k:v for values in data_list for k, v in values.items() }\n    return pd.DataFrame.from_dict(data_dict, orient='index').sort_values(0, ascending=False)","07eaa124":"def barplot_top(data, xlabel, ylabel, fs, title=''):\n    \n    plt.figure(figsize=(10, 10))\n\n    ax = sns.barplot(data[0], data.index, color='green')\n    plt.title('{}\\n'.format(title), fontsize=22, color='blue')\n    plt.xlabel(xlabel, fontsize=fs)\n    plt.ylabel(ylabel, fontsize=fs)\n    plt.grid(axis='x', linestyle='-.')\n    sns.despine()\n\n    for patch, value in zip(ax.patches, data[0]):\n        ax.text(patch.get_width() + 100, patch.get_y() + (patch.get_bbox().y1-patch.get_y())\/2,\n                value,\n                ha=\"left\", va='center',\n                fontsize=18)\n\n    new_ytickslabel = []\n    for i in ax.get_yticklabels():\n        new_ytickslabel.append( ''.join([l + '\\n' * (n % 50 == 49) for n, l in enumerate(list(i.get_text()))]) ) \\\n                if len(i.get_text())>50 else new_ytickslabel.append(' '*(50-len(i.get_text()))+i.get_text())\n    ax.set_yticklabels(new_ytickslabel)\n    ax.tick_params(axis='both', which='major', labelsize=18)\n","ccc4d6e3":"xlabel='# of Respondents'\nylabel=''\nfntsz=20","888c4e8e":"question = 'Q7'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","e29a9ca7":"question = 'Q9'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","99fb8d7c":"question = 'Q10'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","238b83eb":"question = 'Q12'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","23af7dcb":"question = 'Q14'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","6c00c4d2":"question = 'Q16'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","b36a5fc2":"question = 'Q17'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","f5ef43f1":"question = 'Q18'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","46022110":"question = 'Q19'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","674a7380":"question = 'Q23'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","c3be6045":"question = 'Q26_A'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","c6d0795c":"question = 'Q26_B'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","6e890a7c":"question = 'Q27_A'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","10f2dcdb":"question = 'Q27_B'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","25336a99":"question = 'Q28_A'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","582e9d66":"question = 'Q28_B'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","78175283":"question = 'Q29_A'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","2d345a6f":"question = 'Q29_B'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","7b3e1e3b":"question = 'Q31_A'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","16b7d959":"question = 'Q31_B'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","e1562ac3":"question = 'Q33_A'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","175be47e":"question = 'Q33_B'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","5be12feb":"question = 'Q34_A'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","9f238f30":"question = 'Q34_B'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","8eee555f":"question = 'Q35_A'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","60ac9b4d":"question = 'Q35_B'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","e938e6b8":"question = 'Q36'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","d450ffbb":"question = 'Q37'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","625f8c2e":"question = 'Q39'\nprint(df_qu.loc[question]['question'])\nquestion_parts_columns = df_qu.loc[question]['question_parts']\ndata = get_multiple_question_data(question, question_parts_columns, df)\nbarplot_top(data=data, xlabel=xlabel, ylabel=ylabel, fs=fntsz)","7b491e71":"# Part1. Respondents Distribution for Simple Questions\u00b6","870b9879":"# Part2. Respondents Distribution for Multiple Choice Question\u00b6\n","55354650":"# Conclusion\nTo be continued...","bf38eec7":"# Import and Data\u00b6","6fa5d4fc":"All answers are located in `\/kaggle\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv`\n\n![](http:\/\/)There are 20037 rows and **355** columns.\n\nThere are **18** columns that describe simple questions and rest **337** columns for multiple choice questions. Lists of columns below.","0305ea9e":"Kaggle\u2019s State of Machine Learning and Data Science 2020 survey is set of different questions that fully describe the area.\n\nI conditionally devided questins in **2 types**: \n- Simple as Q1, Q3, Q4, etc.\n- Multiple Choice (Select all that apply) as Q7, Q9, Q12, etc.\n\n<!-- You can find a full list of questions in `\/kaggle\/input\/kaggle-survey-2019\/questions_only.csv`  -->"}}