{"cell_type":{"a94797fd":"code","40152bab":"code","0568200d":"code","861a9ceb":"code","f17c25c6":"code","17e89698":"code","176cab4d":"code","2c36307c":"code","97907cde":"code","f87c27db":"code","3056c1f4":"code","753e566a":"code","0e75301a":"code","04feeaf9":"code","1e7a3a89":"code","f317b7cf":"code","40c68291":"code","c55723c5":"code","4b6bbff6":"code","2c29a2c8":"code","418544d6":"code","48fa18bd":"code","40f7fba9":"code","d4802f85":"code","27f7502f":"code","244fbd39":"code","0ec17383":"code","793fb896":"code","c7bc4d12":"code","6bdfc2eb":"code","7bbf56b1":"code","b2501af5":"code","e2a8ba8c":"code","ff6025d7":"code","94ba14af":"code","ef105ccb":"code","939bcbdb":"code","e848745d":"code","0115ba5e":"code","63d661c8":"code","a0a4b328":"code","e75e4733":"code","b43340a7":"code","3b645004":"markdown","a691b30f":"markdown","62a24b32":"markdown","9771c566":"markdown","8edcd611":"markdown","30c5bcb3":"markdown","bf8c49a5":"markdown","e2db535e":"markdown","64effb40":"markdown","24c10ce0":"markdown"},"source":{"a94797fd":"#importing basic libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","40152bab":"#Downloading the data set from IBM cloud\n\n!wget -O loan_train.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/loan_train.csv\n!wget -O loan_test.csv https:\/\/s3-api.us-geo.objectstorage.softlayer.net\/cf-courses-data\/CognitiveClass\/ML0101ENv3\/labs\/loan_test.csv","0568200d":"#Reading the csv files into dataframes\ntrain_df = pd.read_csv('loan_train.csv')\ntest_df = pd.read_csv('loan_test.csv')","861a9ceb":"train_df ","f17c25c6":"#Displays first rows in the dataset\ntest_df.head(10)","17e89698":"#separating the labels from the dataframe\ntrain_y = train_df['loan_status']\ntest_y = test_df['loan_status']","176cab4d":"# Sending the dataframe from train_df to train_X\ntrain_X = train_df\ntest_X = test_df","2c36307c":"# Remove the columns 'Unamed: 0' and 'Unnamed:0.1' as there won't be any impact on the model\ntrain_X.drop(['Unnamed: 0','Unnamed: 0.1'],axis = 1,inplace= True)\ntest_X.drop(['Unnamed: 0','Unnamed: 0.1'],axis = 1,inplace= True)","97907cde":"train_X","f87c27db":"test_X","3056c1f4":"#Converting the time format from 9\/12\/2016 to Year-Month-Date\n\ntrain_X['due_date'] = pd.to_datetime(train_X['due_date'])\ntrain_X['effective_date'] = pd.to_datetime(train_X['effective_date'])\ntest_X['due_date'] = pd.to_datetime(train_X['due_date'])\ntest_X['effective_date'] = pd.to_datetime(test_X['effective_date'])","753e566a":"train_X['loan_status'].value_counts()","0e75301a":"#Extracting the day of the week from effective date which is the day of loan taken\ntrain_X['day_of_week'] = train_X['effective_date'].dt.dayofweek\nprint(train_X['day_of_week'])\ntest_X['day_of_week'] = test_X['effective_date'].dt.dayofweek\ngroup  = train_X.groupby('loan_status')['day_of_week'].value_counts()\nprint(group)\ngroup = pd.DataFrame(group)\ngroup.plot.bar(stacked = True)\n","04feeaf9":"train_X['day_of_week'].value_counts()","1e7a3a89":"# This is code creating a separate columns in both test and train dataset of the month on which the number of people has taken loans and their status whether they are paid off or to be collected\ntrain_X['Month'] = train_X.due_date.dt.month\ntest_X['Month'] = test_X.due_date.dt.month\ngroup = train_X.groupby(['loan_status'])['Month'].value_counts()\n\n\nprint(pd.DataFrame(group))\ngroup.plot.bar(stacked = True)","f317b7cf":"#as the observation shows people who get the loan at the end of the week don't pay it off, so lets use Feature binarization to set a threshold values less then day 4\ntrain_X['weekend'] = train_X['day_of_week'].apply(lambda x: 1 if (x>3)  else 0)\ntest_X['weekend'] = test_X['day_of_week'].apply(lambda x: 1 if (x>3) else 0)\ntrain_X.head()","40c68291":"train_X.groupby(['Gender'])['loan_status'].value_counts()","c55723c5":"# Converting male to 0 and female to 1 (Endcoding)\ntrain_X['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\ntrain_X.head()\ntest_X['Gender'].replace(to_replace= ['male','female'],value = [0,1],inplace = True)","4b6bbff6":"train_X['education'].value_counts()","2c29a2c8":"\ntrain_X = pd.concat([train_X,pd.get_dummies(train_X['education'])],axis = 1)\n\ntrain_X.drop(['Master or Above','education','effective_date','due_date','Month'], axis =1 , inplace = True)\ntrain_X.head()\n","418544d6":"# Modifing the test dataframe as train dataframe. Why because we have to test this dataframe on our model we are going to train on training data\ntest_X = pd.concat([test_X,pd.get_dummies(test_X['education'])],axis = 1)\ntest_X.drop(['Master or Above','education','effective_date','due_date','Month'], axis =1 , inplace = True)\ntest_X.head()","48fa18bd":"train_y = train_X['loan_status'].replace(to_replace=['PAIDOFF','COLLECTION'], value=[0,1]).values\ntrain_X.drop('loan_status',axis = 1,inplace = True)","40f7fba9":"test_y = test_X['loan_status'].replace(to_replace=['PAIDOFF','COLLECTION'], value=[0,1]).values\ntest_X.drop('loan_status',axis = 1,inplace = True)","d4802f85":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(train_X)\ntrain_X=scaler.transform(train_X)","27f7502f":"scaler.fit(test_X)\ntest_X = scaler.transform(test_X)\ntest_X","244fbd39":"# import scoring methods\nfrom sklearn.metrics import jaccard_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import cross_val_score","0ec17383":"from sklearn.neighbors import KNeighborsClassifier\n\nbest_score = 0.0\naccuracy_list = []\n\nfor k in range(5,20):\n  classifier = KNeighborsClassifier(n_neighbors = k,algorithm = 'auto')\n\n  scores = cross_val_score(classifier, train_X, train_y, cv=10)\n  score=scores.mean()\n  accuracy_list.append(score)\n\n\n  if score > best_score:\n     best_score=score\n     best_clf=classifier\n     bestK=k\n        \nprint(\"Best K is :\",bestK,\"| Cross validation Accuracy :\",best_score)\nclassifier=best_clf","793fb896":"classifier.fit(train_X,train_y)\ny_predict = classifier.predict(test_X)","c7bc4d12":"test_scores = {}","6bdfc2eb":"test_scores['KNN-jaccard']=jaccard_score(test_y, y_predict)\ntest_scores['KNN-f1-score']=f1_score(test_y, y_predict, average='weighted')","7bbf56b1":"test_scores","b2501af5":"plt.plot(range(5,20),accuracy_list)\nplt.xlabel('K')\nplt.ylabel('CV Accuracy')\nplt.show()","e2a8ba8c":"from sklearn import tree\n\nclf_tree = tree.DecisionTreeClassifier()\nscore = cross_val_score(clf_tree,train_X,train_y,cv = 10)\nclf_tree = clf_tree.fit(train_X, train_y)\n\ny_pred=clf_tree.predict(test_X)","ff6025d7":"max(score)","94ba14af":"test_scores['Tree-jaccard']=jaccard_score(test_y, y_pred)\ntest_scores['Tree-f1-score']=f1_score(test_y, y_pred, average='weighted')","ef105ccb":"test_scores","939bcbdb":"from sklearn import svm\n\nclf_svm = svm.LinearSVC(random_state=10)\nscore = cross_val_score(clf_svm,train_X,train_y,cv = 10)\nclf_svm.fit(train_X, train_y)  \n\ny_pred=clf_svm.predict(test_X)","e848745d":"print(max(score))\n","0115ba5e":"test_scores['SVM-jaccard']=jaccard_score(test_y, y_pred)\ntest_scores['SVM-f1-score']=f1_score(test_y, y_pred, average='weighted')","63d661c8":"test_scores","a0a4b328":"from sklearn.linear_model import LogisticRegression\n\nclf_log = LogisticRegression(random_state=0, solver='saga')\nclf_log.fit(train_X,train_y)\n\ny_pred=clf_log.predict(test_X)\ny_proba=clf_log.predict_proba(test_X)","e75e4733":"\ntest_scores['LogReg-jaccard']=jaccard_score(test_y, y_pred)\ntest_scores['LogReg-f1-score']=f1_score(test_y, y_pred, average='weighted')  \ntest_scores['LogReg-logLoss']=log_loss(test_y, y_proba)","b43340a7":"test_scores","3b645004":"**Support Vector Machine algorithm**","a691b30f":"**Feature Engineering**","62a24b32":"***In the above if you can observe the \"Master or Above \" counts is very less compared to other categories. so, Better remove it as it may not show the impact on the model***","9771c566":"#Problem Description:\n Using Bank Loan dataset, create a classifier whether a loan case will be paid of or not.","8edcd611":"****","30c5bcb3":"**Training the dataset using the KNN classifier**","bf8c49a5":"#Analysing on which day of a week the majority of persons have taken their loans and their respective status whether the people paid off or not","e2db535e":"**Training the data using Decision Tree**","64effb40":"**The above bar plot shows the number of people on which day of a week the loan has taken and status of being paid or not**","24c10ce0":"\n#COLUMNS:\n\n_____________________________________\n\n**Loan_status** : Paid off(already paid) , Collection(not paid yet)\n\n_____________________________________\n\n**Principal**: Amount taken for loan\n\n______________________________________\n\n**Terms**: The total amount divided into terms for installments(months or weeks)\n\n______________________________________\n\n**Effective date**: Date of loan given\n\n_______________________________________\n\n** Due date**: Last date of paying the amount\n\n_______________________________________\n\n** Age**: Age of the person who took the loan\n\n______________________________________\n\n**Education**: Education of the person \n\n_______________________________________\n\n** Gender ** : whether male or female\n______________________________________\n\n"}}