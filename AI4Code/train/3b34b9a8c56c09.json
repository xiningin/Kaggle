{"cell_type":{"1e467c1b":"code","9d041006":"code","45f873a1":"code","ecb7d833":"code","4665baa3":"code","728e9dc0":"code","33d42e7f":"code","ce9af10b":"code","6a66d3c4":"code","2af46781":"code","10e8399d":"code","11e5f715":"markdown","b370475b":"markdown"},"source":{"1e467c1b":"import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split","9d041006":"#\uc790\uc2e0\uc758 \ub370\uc774\ud130\uacbd\ub85c\uc5d0 \ub9de\uac8c \uc218\uc815\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4\nX_train = pd.read_csv(\"..\/input\/kaistbme587\/X_train.csv\")\nX_test = pd.read_csv(\"..\/input\/kaistbme587\/X_test.csv\")","45f873a1":"X_test.head()","ecb7d833":"X_train = X_train.fillna(-1)\nX_test = X_test.fillna(-1)","4665baa3":"X= X_train.iloc[:,1:]\ny = X_train.iloc[:,0]\nX_test = X_test.iloc[:,1:]","728e9dc0":"numcol = []\nfor col in (X.columns):\n    if X[col].dtype == 'object':\n        enc = LabelEncoder()\n        enc.fit(list(X[col].values) + list(X_test[col].values))\n        X[col] = enc.transform(list(X[col].values))\n        X_test[col] = enc.transform(list(X_test[col].values)) \n    else:\n        numcol.append(col)\n        ","33d42e7f":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X[numcol].values)\n\nX[numcol] = scaler.transform(X[numcol])\nX_test[numcol] = scaler.transform(X_test[numcol])","ce9af10b":"\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)","6a66d3c4":"model = RandomForestClassifier()\nmodel.fit(X_train, y_train)","2af46781":"y_pred=model.predict_proba(X_test)[:,1]","10e8399d":"sub = pd.read_csv(\"..\/input\/kaistbme587\/sample_submission.csv\")\nsub['Fraud'] = y_pred\nsub.to_csv('baseline6.csv', index=False)","11e5f715":"Starter code\uc5d0\uc11c\ub294 object \ud0c0\uc785\ub9cc \uc804\ubd80 Labelencoding\uc73c\ub85c \uc22b\uc790\ub85c \ubc14\uafd4\uc92c\ub2e4\uba74,\n\uc774\uc81c\ub294 \uc22b\uc790\ub85c \uc774\ub8e8\uc5b4\uc838\uc788\ub294 \uac12\ub4e4\ub3c4 Scaling \ud558\ub294 \ubc29\ubc95\uc744 \uc18c\uac1c\ud55c\ub2e4.\n\uba3c\uc800 \uc704\uc5d0\uc11c \uc22b\uc790\ub85c \uc774\ub8e8\uc5b4\uc9c4 columns\ub4e4\uc744 \uc804\ubd80 \ubaa8\uc544\uc900\ub4a4,\n\nsklearn\uc758 StandardScaler \ud568\uc218\ub97c \uc774\uc6a9\ud574\uc11c \uc22b\uc790 \ud56d\ub4e4\uc744 \uc815\uaddc\ud654 \ud574\uc11c \ucf54\ub4dc\uc5d0 \ub3cc\ub9b0\ub2e4. \ubcf4\ud1b5 StandardScaler\uc640 Minmaxscaler\ub97c \uac00\uc7a5\ub9ce\uc774\uc0ac\uc6a9\ud55c\ub2e4.\n\n\uc815\uaddc\ud654\ub97c \uaf2d \ud574\uc918\uc57c\ud558\ub294 \uc774\uc720\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4..\n\n\uacb0\uc81c \uae08\uc561\uc744 \uc608\ub97c \ub4e4\uba74 \ucd5c\uc18c 1000\uc774\uc0c1\uc758 \uc544\uc8fc \ud070 \uc22b\uc790\ub85c \uc774\ub8e8\uc5b4\uc838\uc788\uace0,\n\ub2e4\ub978 \uc22b\uc790\ub4e4\uc740 100\ubbf8\ub9cc\uc758 \uc22b\uc790\ub85c \uc774\ub8e8\uc5b4\uc838\uc788\ub2e4..\n\ud559\uc2b5\uacfc\uc815\uc5d0\uc11c gradient\uac00 \uae09\uaca9\ud558\uac8c \ubc14\ub00c\ub294 \uac83\uc740 \uc8fc\ub85c \uc774\ub7f0 \ud070 \uc22b\uc790\ub4e4\uc774 \uc88c\uc9c0\uc6b0\uc9c0 \ud560 \ud655\ub960\uc774\ud06c\ub2e4.. (outlier \ub4f1\ub4f1\uc774)\n\n\uc774\ub7f0 \uba38\uc2e0\ub7ec\ub2dd \ubc29\ubc95\ubfd0\ub9cc\uc544\ub2c8\ub77c Scaling\uc740 \ub525\ub7ec\ub2dd\uc5d0\uc11c\ub3c4 \ubb34\uc870\uac74 \ub9ce\uc774\ub9ce\uc774 \uc4f0\uae30\ub54c\ubb38\uc5d0, \uaf2d \uc4f0\ub294\ubc29\ubc95\uc744 \uc54c\uc544\uac00\uae38 \ubc14\ub780\ub2e4.","b370475b":"\uc774 nan\uc744 \ucc98\ub9ac\ud558\ub294\uac83\ub3c4.. \uaf2d \ub2e4\ub978\ubc29\uc2dd\uc744 \uc2dc\ub3c4\ud574\ubcf4\uae38.."}}