{"cell_type":{"39e54190":"code","e1a56737":"code","9171d6e1":"code","0a3a8c61":"code","382d026c":"code","90f842c6":"code","4546e99f":"code","4b8d5367":"code","45045498":"code","cd2b53fb":"code","53b81c7b":"code","ee5f501e":"code","ee2e98ae":"code","1f1dd720":"code","e5e608c5":"code","183c57b0":"code","74710888":"code","26317bb0":"code","e5f06818":"code","3695c6a7":"code","130141e6":"code","9209bc2d":"code","eaf12dba":"code","ee5f536d":"code","0c20a9a6":"code","8c2bce69":"code","a5de8f75":"code","fd1dfdbd":"code","4622a6d8":"code","b9ab412d":"code","6762a983":"code","eefac838":"code","74c798fd":"code","a5e6c34e":"markdown","39af6e46":"markdown","a5f27fc5":"markdown","a0358893":"markdown","d32eef4e":"markdown","1b208435":"markdown","10033afb":"markdown","d0b52ad2":"markdown","79f8fe92":"markdown","82905ec3":"markdown","ac38b57f":"markdown","a60e8be5":"markdown","3495ae37":"markdown","afadbe3d":"markdown","ea97ab94":"markdown","841be637":"markdown","7685c36e":"markdown"},"source":{"39e54190":"import numpy as np \nimport pandas as pd \nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.models import Model\nfrom keras.layers import Dense\nfrom keras.layers import Flatten\nimport keras\nfrom keras.models import Sequential\nfrom keras.utils import np_utils\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense, Activation, Flatten, Dropout, BatchNormalization\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.datasets import cifar10\nfrom keras import regularizers\n%matplotlib inline","e1a56737":"# Reading the metadata files with data information\n\ndata_df = pd.read_csv('..\/input\/coronahack-chest-xraydataset\/Chest_xray_Corona_Metadata.csv')\nmeta_df = pd.read_csv('..\/input\/coronahack-chest-xraydataset\/Chest_xray_Corona_dataset_Summary.csv')","9171d6e1":"data_df","0a3a8c61":"meta_df","382d026c":"# paths to data directories\n\ntest_dir ='..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/test'\ntrain_dir = '..\/input\/coronahack-chest-xraydataset\/Coronahack-Chest-XRay-Dataset\/Coronahack-Chest-XRay-Dataset\/train'\n","90f842c6":"#Divindig the dataset based on column 'Dataset type' into TRAIN and TEST\n\ntrain_data = data_df[train_df['Dataset_type'] == 'TRAIN']\ntest_data = data_df[train_df['Dataset_type'] == 'TEST']","4546e99f":"#Plotting and image\n\nfrom PIL import Image\nim = Image.open(train_dir+'\/person588_virus_1135.jpeg')\nplt.imshow(im)","4b8d5367":"sample_df = train_data[train_data['Label_2_Virus_category'] == 'COVID-19'].sample(3)\nsample_df1 = train_data[train_data['Label'] == 'Normal'].sample(3)\nsample_df2 = train_data[train_data['Label'] == 'Pnemonia'].sample(3)\n","45045498":"fig, ax = plt.subplots(3, 2, figsize=(16, 16))\n\n\nplt.figure(figsize = (15,15))\n\nfor i,image in enumerate(sample_df['X_ray_image_name']):\n    im = plt.imread(train_dir+'\/'+image)\n    ax[i, 0].imshow(im)\n    ax[i,1].hist(im.ravel(),256,[0,256])\n    ax[0, 0].set_title('COVID')\n\n\n\n#plt.tight_layout()","cd2b53fb":"fig, ax = plt.subplots(3, 2, figsize=(16, 16))\nfor i,image in enumerate(sample_df2['X_ray_image_name']):\n    im = plt.imread(train_dir+'\/'+image)\n    ax[i, 0].imshow(im)\n    ax[i,1].hist(im.ravel(),256,[0,256])\n    ax[0, 0].set_title('PNEMONIA')\n\n","53b81c7b":"fig, ax = plt.subplots(3, 2, figsize=(16, 16))\nfor i,image in enumerate(sample_df1['X_ray_image_name']):\n    im = plt.imread(train_dir+'\/'+image)\n    ax[i, 0].imshow(im)\n    ax[i,1].hist(im.ravel(),256,[0,256])\n    ax[0, 0].set_title('NORMAL')","ee5f501e":"#Replacing missing values with NA and merging Label and Label_2_Virus_category as label to filter out the image data of the three classes\n\ntrain_data.fillna('NA', inplace = True)\ntrain_data['Label'] = train_data['Label']+\"\/\"+train_data['Label_2_Virus_category']","ee2e98ae":"#Filtering out the data belonging to the following three labels and shuffling the data\n\ntrain_dff = train_data[(train_data['Label'] =='Pnemonia\/COVID-19') | (train_data['Label'] == 'Normal\/NA') \\\n                       | (train_data['Label'] == 'Pnemonia\/NA')]\ntrain_dff = train_dff.sample(frac = 1)\nprint(len(train_dff))\n","1f1dd720":"#Similar as above for test data\n\ntest_data.fillna('NA', inplace = True)\ntest_data['Label'] = test_data['Label']+\"\/\"+test_data['Label_2_Virus_category']\ntest_df = test_data[(test_data['Label'] =='Pnemonia\/COVID-19') | (test_data['Label'] == 'Normal\/NA') \\\n                       | (test_data['Label'] == 'Pnemonia\/NA')]\n\ntest_df = test_df.sample(frac = 1)\nprint(len(test_df))","e5e608c5":"test_df[test_df['Label']=='Normal\/NA'].sample(2)","183c57b0":"test_df[test_df['Label']=='Pnemonia\/NA'].sample(2)","74710888":"test_df[test_df['Label']=='Pnemonia\/COVID-19']","26317bb0":"test_df_covid = train_dff[-600:]\ntrain_dff = train_dff[:-600]\nprint(len(test_df_covid))\nprint(len(train_dff))","e5f06818":"test_df_covid[test_df_covid['Label']=='Pnemonia\/COVID-19']","3695c6a7":"image_gen = tf.keras.preprocessing.image.ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.15,\n    height_shift_range=0.15,\n    brightness_range=None,\n    zoom_range=0.10,\n    channel_shift_range=0.0,\n    fill_mode=\"nearest\",\n    cval=0.0,\n    horizontal_flip=True,\n    rescale=1.\/255,\n    preprocessing_function=None,\n    validation_split=0.2,\n    dtype=None,\n)\n","130141e6":"train_datagen = image_gen.flow_from_dataframe(\n    dataframe=train_dff,\n    directory=train_dir,\n    x_col=\"X_ray_image_name\",\n    y_col=\"Label\",\n    target_size=(256, 256),\n    color_mode=\"rgb\",\n    class_mode=\"categorical\",\n    batch_size=32,\n    seed=25,\n    shuffle=True,\n    subset='training'\n)\n\nvalid_datagen = image_gen.flow_from_dataframe(\n    dataframe=train_dff,\n    directory=train_dir,\n    x_col=\"X_ray_image_name\",\n    y_col=\"Label\",\n    target_size=(256, 256),\n    color_mode=\"rgb\",\n    class_mode=\"categorical\",\n    batch_size=32,\n    seed=25,\n    shuffle=True,\n    subset='validation'\n)\n\n","9209bc2d":"test_datagen_covid = image_gen.flow_from_dataframe(\n    dataframe=test_df_covid,\n    directory=train_dir,\n    x_col=\"X_ray_image_name\",\n    y_col=\"Label\",\n    classes = ['Normal\/NA','Pnemonia\/COVID-19','Pnemonia\/NA'],\n    target_size=(256, 256),\n    color_mode=\"rgb\",\n    class_mode=\"categorical\",\n    batch_size=32,\n    seed=25,\n    shuffle=True\n)","eaf12dba":"test_datagen = image_gen.flow_from_dataframe(\n    dataframe=test_df,\n    directory=test_dir,\n    x_col=\"X_ray_image_name\",\n    y_col=\"Label\",\n    classes = ['Normal\/NA','Pnemonia\/COVID-19','Pnemonia\/NA'],\n    target_size=(256, 256),\n    color_mode=\"rgb\",\n    class_mode=\"categorical\",\n    batch_size=32,\n    seed=25,\n    shuffle=True\n)","ee5f536d":"fig, ax = plt.subplots(3, 2, figsize=(16, 16))\nfor i,j in enumerate(train_datagen):\n    \n    \n    for k in range(6):\n        plt.subplot(3,2,k+1)\n        plt.imshow((j[0])[k])\n        ax[0,0].set_title((j[1])[k])\n        \n        \n    #print(j[1])\n    if i == 0:\n        break\n        ","0c20a9a6":"weight_decay = 1e-4\nmodel = Sequential()\nmodel.add(Conv2D(32, (3,3), padding='same', kernel_regularizer=regularizers.l2(weight_decay), input_shape=[256,256,3]))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(32, (3,3), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n \nmodel.add(Conv2D(64, (3,3), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, (3,3), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('elu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(128, (3,3), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('elu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128, (3,3), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('elu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.4))\n\nmodel.add(Flatten())\nmodel.add(Dense(3, activation='softmax'))\n \nmodel.summary()","8c2bce69":"opt = tf.keras.optimizers.Adam(learning_rate=0.0005)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n\nrecords = model.fit_generator(train_datagen, steps_per_epoch = 3740\/32, epochs =20,validation_data = valid_datagen, validation_steps = 935\/32)","a5de8f75":"opt = tf.keras.optimizers.Adam(learning_rate=0.0002)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n\nrecords = model.fit_generator(train_datagen, steps_per_epoch = 3740\/32, epochs = 15,validation_data = valid_datagen, validation_steps = 935\/32)","fd1dfdbd":"opt = tf.keras.optimizers.Adam(learning_rate=0.0001)\nmodel.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])\n\nrecords = model.fit_generator(train_datagen, steps_per_epoch = 3740\/32, epochs = 8,validation_data = valid_datagen, validation_steps =935\/32)","4622a6d8":"acc = records.history['accuracy']\nval_acc = records.history['val_accuracy']\nloss = records.history['loss']\nval_loss = records.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.show()","b9ab412d":"log=model.evaluate(\n    test_datagen_covid,\n    batch_size=32,\n    verbose=1,\n    sample_weight=None,\n    steps=600\/32,\n    callbacks=None,\n    max_queue_size=10,\n    workers=1,\n    use_multiprocessing=False,\n    return_dict=False,\n)","6762a983":"log=model.evaluate(\n    test_datagen,\n    batch_size=32,\n    verbose=1,\n    sample_weight=None,\n    steps=624\/32,\n    callbacks=None,\n    max_queue_size=10,\n    workers=1,\n    use_multiprocessing=False,\n    return_dict=False,\n)","eefac838":"# save model structure to JSON (no weights)\nmodel_json = model.to_json()\nwith open(\"\/kaggle\/working\/model_CNN4\", \"w\") as json_file:\n    json_file.write(model_json)\n# saving the model weight separately\nmodel.save_weights(\"\/kaggle\/working\/model_weights_CNN4.h5\")","74c798fd":"from keras.models import model_from_json\njson_file = open('..\/input\/models\/model_CNN', 'r')\nloaded_model_json = json_file.read()\njson_file.close()\nloaded_model = model_from_json(loaded_model_json)\n# load weights into new model\nloaded_model.load_weights(\"..\/input\/models\/model.h5\")\nprint(\"Loaded model from disk\")","a5e6c34e":"the frequency distribution of categories can be seen in the **meta_df**","39af6e46":"Now our **test_df_covid** has COVID samples present. This dataset should work fine as a test dataset.","a5f27fc5":"## 7. Data Augmentation","a0358893":"## 6. Train and Test data","d32eef4e":"# Detecting Pnemonia and Covid\n\nThis Notebook showcases a CNN for Multiclass Classification using Keras. This model classifies Chest X Ray data into three categories NORMAL,COVID & PNEMONIA.\n\nThis model is trained over dataset provided by Praveen which contains collection of Chest X Ray of Healthy vs Pneumonia (Corona) affected patients infected patients along with few other categories such as SARS (Severe Acute Respiratory Syndrome ) ,Streptococcus & ARDS (Acute Respiratory Distress Syndrome)\n\nThis model performas with high accuracy(above 94 percent) on the test dataset.","1b208435":"## 12. Trainig and Validation Accuracy Plots","10033afb":"## 5. Image and Histogram Visualization for PNEMONIA","d0b52ad2":"## 11. Training","79f8fe92":"## 9. Visualizing the Augmented Data","82905ec3":"## 3. Image and Histogram Visualization for COVID","ac38b57f":"As seen the **test_df** does not have any covid samples and might not give us information about covid prediction accuracy. Hence we take a slice of 600 images from **train_dff** as **test_df_covid** to test the accuracy of our model.","a60e8be5":"## 10. Model Development","3495ae37":"## Model Testing ","afadbe3d":"## 1. Necessary Imports","ea97ab94":"## 2. Data Analysis","841be637":"## 13. Saving And Loading the model","7685c36e":"## 4. Image and Histogram Visualization for PNEMONIA"}}