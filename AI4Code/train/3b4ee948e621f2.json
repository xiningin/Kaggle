{"cell_type":{"e836f925":"code","e61b8df0":"code","e15db446":"code","4fd1a21c":"code","260b8277":"code","219f1487":"code","fb944499":"code","50bbf2f6":"code","1a31ba0f":"code","7dd3f198":"code","4c2d3754":"code","73b52920":"code","8595ce7a":"code","014f2923":"code","8fcd48ed":"code","1e50d836":"code","1d68fb5b":"code","8118a760":"code","337f2542":"code","51b27feb":"code","dd6b9723":"code","871ccc60":"code","5b1998c0":"code","24d33b47":"code","4da61717":"code","fed30ab1":"code","61c8a737":"code","66ed7695":"code","1930b44f":"code","5a854ff9":"code","bd0e30c0":"code","9ee6ae7d":"code","7289e56d":"code","6668847b":"code","7bb40e14":"code","af9ab1a8":"code","498cbf3b":"code","aa26bb0c":"code","03722150":"code","78654e88":"code","7b398888":"code","aedc7f52":"code","9f062a58":"code","32a43707":"code","830a4523":"code","e9090e2e":"code","9faaca97":"code","bc71d72d":"code","28f159ed":"code","ef6f9092":"code","9636a5ca":"code","ff9ba2d5":"code","e54a8d30":"code","7dc86e42":"code","beb90ea3":"code","b73660fc":"code","74f271b3":"markdown","574a1d37":"markdown","226e1bf4":"markdown","11b4e53a":"markdown","a36f61d0":"markdown","84a780da":"markdown","7f699081":"markdown","7be3e6f0":"markdown","01ffc488":"markdown"},"source":{"e836f925":"import pandas as pd # linear algebra library \nimport numpy as np # data processing library\nimport matplotlib.pyplot as plt # data visualization library\nimport seaborn as sns # It is a library that provides a high level interface to the Matplotlib library.\n","e61b8df0":"#we distributed our cvs data into columns and converted dataframe\ndf = pd.read_csv(\"..\/input\/used-car-dataset-ford-and-mercedes\/ford.csv\")\ndf.head()","e15db446":"#let's check our dataset and non-data cells\ndf.info()","4fd1a21c":"df.model.value_counts() #Models quantity","260b8277":"df.model.value_counts().plot.barh() #graphic representation","219f1487":"df.year.value_counts() #Let's look at the years of the vehicles","fb944499":"df.year.value_counts().plot.barh() #graphic representation","50bbf2f6":"df.transmission.value_counts() #Let's look at the transmission","1a31ba0f":"df.transmission.value_counts().plot.barh() #graphic representation","7dd3f198":"df.fuelType.value_counts() #Let's look at the fuel type","4c2d3754":"df.fuelType.value_counts().plot.barh()","73b52920":"df.engineSize.value_counts()","8595ce7a":"round(pd.pivot_table(data = df, columns = \"engineSize\", values = \"price\")).T","014f2923":"df.loc[df['engineSize'] == 0, 'engineSize'] = 1 ","8fcd48ed":"df.loc[df['year'] == 2060, 'year'] = 2006 ","1e50d836":"delete_year=[2000,1998,1996,2002,2003,2004]\nfor i in delete_year:\n    df=df[df.year != i] ","1d68fb5b":"df= df[~df['model'].isin([\" Ranger\", \" Transit Tourneo\", \" Streetka\",\" Escort\"])] #We deleted the models to be deleted","8118a760":"df= df[~df['fuelType'].isin([\"Other\", \"Electric\"])] #We deleted the types of fuel to be deleted","337f2542":"# Average price over the years for the B-MAX model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" B-MAX\"][\"year\"], y = df[\"price\"])","51b27feb":"# average price over the years for the C-MAX model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" C-MAX\"][\"year\"], y = df[\"price\"])","dd6b9723":"# average price over the years for the EcoSport model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" EcoSport\"][\"year\"], y = df[\"price\"])","871ccc60":"# average price over the years for the Edge model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" Edge\"][\"year\"], y = df[\"price\"])","5b1998c0":"# average price over the years for the fiesta model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" Fiesta\"][\"year\"], y = df[\"price\"])","24d33b47":"# average price over the years for the Focus model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" Focus\"][\"year\"], y = df[\"price\"])","4da61717":"# average price over the years for the Fusion model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" Fusion\"][\"year\"], y = df[\"price\"])","fed30ab1":"# average price over the years for the Galaxy model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" Galaxy\"][\"year\"], y = df[\"price\"])","61c8a737":"# average price over the years for the Grand C-MAX model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" Grand C-MAX\"][\"year\"], y = df[\"price\"])","66ed7695":"# average price over the years for the Grand Tourneo Connect model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" Grand Tourneo Connect\"][\"year\"], y = df[\"price\"])","1930b44f":"# average price over the years for the KA model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" KA\"][\"year\"], y = df[\"price\"])","5a854ff9":"# average price over the years for the Ka+ model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" Ka+\"][\"year\"], y = df[\"price\"])","bd0e30c0":"# average price over the years for the Kuga model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" Kuga\"][\"year\"], y = df[\"price\"])","9ee6ae7d":"# average price over the years for the Mondeo model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" Mondeo\"][\"year\"], y = df[\"price\"])","7289e56d":"# average price over the years for the Mustang model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" Mustang\"][\"year\"], y = df[\"price\"])","6668847b":"# average price over the years for the Puma model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" Puma\"][\"year\"], y = df[\"price\"])","7bb40e14":"# average price over the years for the S-MAX model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" S-MAX\"][\"year\"], y = df[\"price\"])","af9ab1a8":"# average price over the years for the Tourneo Connect model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" Tourneo Connect\"][\"year\"], y = df[\"price\"])","498cbf3b":"# average price over the years for the Tourneo Custom model\nfig, ax = plt.subplots(figsize=(20,6))\nsns.barplot(x = df.loc[df[\"model\"] == \" Tourneo Custom\"][\"year\"], y = df[\"price\"])","aa26bb0c":"#Prices by fuelType\nsns.barplot(x = df[\"fuelType\"], y = df[\"price\"], data = df)","03722150":"#Prices by transmission\nsns.barplot(x = df[\"transmission\"], y = df[\"price\"], data = df)","78654e88":"#Prices by enginesize\nsns.barplot(x = df[\"engineSize\"], y = df[\"price\"], data = df)","7b398888":"#Prices by Model\nsns.barplot(x = df[\"model\"], y = df[\"price\"], data = df)","aedc7f52":"#Prices by year\nsns.barplot(x = df[\"year\"], y = df[\"price\"], data = df)","9f062a58":"cols=(\"model\",\"transmission\",\"fuelType\") #Let's specify the str columns and convert them with the label encoder\ndflbl=df\nfrom sklearn.preprocessing import LabelEncoder\nfor c in cols:\n    lbl = LabelEncoder()\n    lbl.fit(list(dflbl[c].values))\n    dflbl[c] = lbl.transform(list(dflbl[c].values)) #df ready for machine learning","32a43707":"!pip install openpyxl","830a4523":"dflbl.to_excel(r'dflbl.xlsx', index = False) #dflbl registered as dflbl.xlsx\n","e9090e2e":"from xgboost import XGBRegressor\nfrom sklearn.model_selection import train_test_split, GridSearchCV,cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn import model_selection","9faaca97":"#import openpyxl\ndflbl = pd.read_excel(r\"dflbl.xlsx\",engine='openpyxl')","bc71d72d":"X = dflbl.drop([\"price\"], axis = 1) # We separated dependent and independent variables price dependent variable\ny = dflbl[\"price\"] #the dependent variable","28f159ed":"# Separation of training and test data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 144)","ef6f9092":"# we find the most suitable parameters\nparams = {\"colsample_bytree\":[0.4,0.5,0.6],\n         \"learning_rate\":[0.01,0.02,0.09],\n         \"max_depth\":[2,3,4,5,6],\n         \"n_estimators\":[100,200,500,2000]}\n\nxgb = XGBRegressor()\n\ngrid = GridSearchCV(xgb, params, cv = 10, n_jobs = -1, verbose = 2)\n\ngrid.fit(X_train, y_train)\n\ngrid.best_params_","9636a5ca":"# we enter the most appropriate parameters\nxgb1 = XGBRegressor(colsample_bytree = 0.5, learning_rate = 0.02, max_depth = 6, n_estimators = 2000)","ff9ba2d5":"# We train our model\nmodel_xgb = xgb1.fit(X_train, y_train)","e54a8d30":"# We calculated the model's score. Value between 0-1 returns us\nmodel_xgb.score(X_test, y_test)","7dc86e42":"model_xgb.score(X_train, y_train)","beb90ea3":"#validated (we find our verified error rate)\nnp.sqrt(-1*(cross_val_score(model_xgb, X_test, y_test, cv=10, scoring='neg_mean_squared_error'))).mean()","b73660fc":"dflbl.corr()","74f271b3":"**Data Visualization**\n*Let's check the extreme values \u200b\u200bin our data set with data visualization.\n* ","574a1d37":"Let's label the columns with str over the arranged data frame as a label encoder.","226e1bf4":"* Let's revise the data as the engine size cannot be 0.0.\n* Let's look at the average prices of vehicles according to their engine size.\n* Let's find the closest engine size to the average of vehicles with 0.0 engine size.\n","11b4e53a":"Let's remove the model tools [2000,1998,1996,2002,2003,2004] from the data frame so that the regression analysis can be more powerful.","a36f61d0":"Let's make the 2060 model car 2006","84a780da":"Let's remove the models with little data about them from the data frame.","7f699081":"Since there is not enough data about other and electric vehicles with fuel type, let's delete","7be3e6f0":"**Let's move on to the machine learning part\n**","01ffc488":"As you can see, the average price of vehicles with 0.0 engine size is closest to those with 1.0 engine size. For this reason, let's revise the data from 0.0 to 1.0.\n"}}