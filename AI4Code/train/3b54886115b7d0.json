{"cell_type":{"223bfbc4":"code","0063271c":"code","f90e20b5":"code","fa75d2ab":"code","01ab6eb0":"code","714d9d22":"code","87a60490":"code","220d5c3d":"code","b85872c0":"markdown","ddb200f7":"markdown","0141796c":"markdown","8ce961ba":"markdown","336b5873":"markdown","57b32932":"markdown","cd8cc8b0":"markdown","aa92435f":"markdown"},"source":{"223bfbc4":"import numpy as np\nimport pandas as pd ","0063271c":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","f90e20b5":"#1. delete unnecessary columns\ndrop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\n#2.find null data and fill new data \ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\n#3.one hot encoding \nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","fa75d2ab":"unlabled_col = []\nN_DIVISION = 20\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) != str and colvalue.nunique() >= 10:\n        unlabled_col.append(colname)\n        train[colname] = pd.qcut(train[colname],N_DIVISION,labels=False,duplicates=\"drop\")\n        test[colname] = pd.qcut(test[colname],N_DIVISION,labels=False,duplicates=\"drop\")\n        \nunlabled_col","01ab6eb0":"train.head()","714d9d22":"train[unlabled_col]","87a60490":"train[\"Age\"].value_counts()","220d5c3d":"train[\"Fare\"].value_counts()","b85872c0":"## **Quantile-based discretization** function.\n\nDiscretize variable into equal-sized buckets based on rank or based on sample quantiles. \n\nFor example 1000 values for 10 quantiles would produce a Categorical object indicating quantile membership for each data point.","ddb200f7":"# auto qcut labeling","0141796c":"# check Count","8ce961ba":"# load","336b5873":"# **pandas qcut**","57b32932":"# import ","cd8cc8b0":"**duplicates**{default \u2018raise\u2019, \u2018drop\u2019}, \n\noptional\nIf bin edges are not unique, raise ValueError or drop non-uniques.","aa92435f":"# preprocessing"}}