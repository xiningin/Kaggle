{"cell_type":{"b2ac5b0d":"code","d6ddbffd":"code","9bcd3cbb":"code","c05383cd":"code","88b32c08":"code","21b80953":"code","0ac76643":"code","58b53ff5":"code","2db6a281":"code","6698e926":"code","b281a3dc":"code","9ebd4782":"code","fcac6152":"code","4c579bf1":"code","32b90f7f":"code","dac34a0b":"code","dcb102f5":"code","ee91c699":"code","ae78b84b":"code","6e542609":"code","34a5282a":"code","37755842":"code","2268f0d1":"code","b469ad80":"code","ef8b3998":"code","5a355146":"code","a7d340d6":"code","3adaa376":"code","964f8680":"code","9c0e8050":"code","0e90a9fd":"code","88169c83":"code","75758fd9":"code","73788221":"code","e7d16b5e":"code","8c006d36":"code","8cb68136":"code","e0c29157":"code","cc7ecea9":"code","3316af9f":"markdown","fceb3750":"markdown","6be7268c":"markdown","74e36a5c":"markdown","5443f002":"markdown","2b56fd14":"markdown","5ebee6a8":"markdown","01893d82":"markdown","7f547af4":"markdown","8a2a316f":"markdown","961ea8ab":"markdown","ba5bc1b4":"markdown","f806cf49":"markdown","7aa08e47":"markdown","c08002e0":"markdown"},"source":{"b2ac5b0d":"import pandas as pd\nimport numpy as np\nimport math\nfrom pathlib import Path\nimport plotly.graph_objs as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.base import BaseEstimator, TransformerMixin\n\nimport warnings\nwarnings.filterwarnings('ignore')","d6ddbffd":"df = pd.read_csv('\/kaggle\/input\/motorcycle-dataset\/BIKE DETAILS.csv')\ndf.head(5)","9bcd3cbb":"df.info()","c05383cd":"df.isnull().sum()","88b32c08":"df.groupby('name').count().sort_values('year',ascending=False)","21b80953":"def bike_model(model_name, excl_honda_hero=False):\n    model_list = []\n    if excl_honda_hero:\n        for i in df['name']:\n            if model_name in i and 'Hero' not in i:\n                model_list.append(i)\n        return model_list\n    else:\n        for i in df['name']:\n            if model_name in i:\n                model_list.append(i)\n        return model_list","0ac76643":"royal_enfield = bike_model('Royal Enfield')\nhonda = bike_model('Honda',excl_honda_hero=True)\nbajaj = bike_model('Bajaj')\nyamaha = bike_model('Yamaha')\nsuzuki = bike_model('Suzuki')\nhero = bike_model('Hero')\ntvs = bike_model('TVS')\nktm = bike_model('KTM')","58b53ff5":"def brand(i):\n    if i in royal_enfield:\n        return 'Royal Enfield'\n    elif i in honda:\n        return 'Honda'\n    elif i in bajaj:\n        return 'Bajaj'\n    elif i in yamaha:\n        return 'Yamaha'\n    elif i in hero:\n        return 'Hero'    \n    elif i in tvs:\n        return 'TVS'    \n    elif i in suzuki:\n        return 'Suzuki'  \n    elif i in ktm:\n        return 'KTM' \n    else:\n        return 'Other'","2db6a281":"df['brand'] = df['name'].apply(lambda x: brand(x))\ndf.head()","6698e926":"def bar_plot(x):\n    fig = go.Figure([go.Bar(\n    x=df[x].value_counts().index, \n    y=df[x].value_counts().values, \n    text=df[x].value_counts().values)])\n    fig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\n    fig.update_layout(title = f'Number of bikes per {x}')\n    return fig","b281a3dc":"bar_plot('brand')","9ebd4782":"fig = px.scatter(df, x=\"ex_showroom_price\", y=\"selling_price\")\nfig.show()","fcac6152":"no_nan_df = df.dropna()","4c579bf1":"no_nan_df['difference'] = (no_nan_df['ex_showroom_price']-no_nan_df['selling_price'])\/no_nan_df['selling_price']","32b90f7f":"no_nan_df.difference.hist(bins=50)","dac34a0b":"coef = no_nan_df.difference.mean()\ndf['calculated_ex_showroom_price'] = df[\"selling_price\"].apply(lambda x: coef*x + x)","dcb102f5":"fig = px.scatter(df, x=\"km_driven\", y=\"selling_price\", color=\"owner\")\nfig.show()","ee91c699":"bar_plot('year')","ae78b84b":"df['age'] = 2021 - df['year']","6e542609":"bar_plot('age')","34a5282a":"bar_plot('owner')","37755842":"bar_plot('seller_type')","2268f0d1":"fig = go.Figure()\nbrands =  df.brand.unique()\n\nfor brand in brands:\n    fig.add_trace(go.Violin(x=df['brand'][df['brand'] == brand],\n                            y=df['selling_price'][df['brand'] == brand],\n                            name=brand,\n                            meanline_visible=True))\n\nfig.show()","b469ad80":" def box_plot(x,y):\n    return px.box(df, \n                  x=x, \n                  y=y, \n                  points='all',\n                  title= x + ' & ' + y,\n                  width=800,\n                  height=500)","ef8b3998":"box_plot('owner','selling_price')","5a355146":"box_plot('seller_type','selling_price')","a7d340d6":"drop = ['name','seller_type','year','ex_showroom_price','calculated_ex_showroom_price']\ndf_train = df.drop(drop,axis=1)","3adaa376":"train_cols = df_train.drop('selling_price',axis=1)\n\ncat_col = []\nnum_col = []\nfor col in train_cols.columns:\n    if train_cols[col].dtype == 'O':\n        cat_col.append(col)\n    else:\n        num_col.append(col)\n        \nprint(f'Numerical cols for training: {num_col}','\\n'\n     f'Categorical cols for training: {cat_col}','\\n')","964f8680":"from sklearn.model_selection import StratifiedShuffleSplit\nsplit = StratifiedShuffleSplit(n_splits = 1, test_size=0.25)\nfor train_idx, test_idx in split.split(df_train,df_train['brand']):\n    X_train = df_train.loc[train_idx]\n    X_test = df_train.loc[test_idx]","9c0e8050":"class Encoder(BaseEstimator, TransformerMixin):\n    def __init__(self, cat_col, num_col):         \n        self.cat_col = cat_col\n        self.num_col = num_col\n        \n    def fit(self,X):\n        return self\n\n    def transform(self,X,y=None):\n        num_cols = X[self.num_col].copy()\n        \n        for column in self.cat_col:\n            dummies = pd.get_dummies(X[column], prefix = column, dummy_na=True)\n            X = pd.concat([X, dummies], axis=1).drop([column], axis=1)\n            \n        cat_cols = X.drop(self.num_col, axis = 1)\n        \n        X = pd.concat([cat_cols, num_cols], axis = 1)\n    \n        return X","0e90a9fd":"pipeline = Pipeline([\n        (\"encoder\", Encoder(cat_col,num_col))\n    ])","88169c83":"target = 'selling_price'\n\ny_train = X_train[target]\ny_test = X_test[target]\n\nX_train = X_train.drop(target,axis=1)\nX_test = X_test.drop(target,axis=1)","75758fd9":"X_train = pipeline.fit_transform(X_train)\nX_test  = pipeline.fit_transform(X_test)","73788221":"from sklearn.ensemble import RandomForestRegressor\n# Run base RF regressor model\n%time\nm = RandomForestRegressor(n_estimators=60, min_samples_leaf = 3, max_features=0.5, n_jobs=-1, oob_score=True)\nm.fit(X_train, y_train)","e7d16b5e":"def rmse(predictions, actuals): \n    return math.sqrt(((predictions - actuals)**2).mean())\n\ndef print_score(m):\n    print('RMSE for training:   ', rmse(m.predict(X_train), y_train))\n    print('R^2 for training:    ', m.score(X_train, y_train))\n    if hasattr(m, 'oob_score_'): \n        print('OoB score:           ', m.oob_score_)\n        \ndef print_test_score(m):\n    print('RMSE for test:   ', rmse(m.predict(X_test), y_test))\n    print('R^2 for test:    ', m.score(X_test, y_test))","8c006d36":"print_score(m)","8cb68136":"print_test_score(m)","e0c29157":"import matplotlib.pyplot as plt\npredictions = m.predict(X_test)\n\nplt.scatter(y_test,predictions)\nplt.xlabel('y')\nplt.ylabel('Predicted')","cc7ecea9":"dif = predictions - y_test\ndif.hist(bins=50)","3316af9f":"Price distribution per bike brand","fceb3750":"Plotting predictions vs test values","6be7268c":"# Preparation and training","74e36a5c":"# EDA","5443f002":"Creating a test set","2b56fd14":"Error rate","5ebee6a8":"Most bike names belong to several brands. Let's make a **brand** feature for the **name** column","01893d82":"**ex_showroom_price** correlates quite well with **selling_price**, however, some values are missing","7f547af4":"Now there is a **brand** column, so **name** can be dropped for training","8a2a316f":"If we want to keep **ex_showroom_price** for training, the column nan values can be imputed with **calculated_ex_showroom_price**.","961ea8ab":"**Year** column will be dropped for training as well.","ba5bc1b4":"#   Scores","f806cf49":"First, I'll try to train without **'ex_showroom_price'** column","7aa08e47":"Just in case we don't drop **ex_showroom_price**, we should impute missing values. ","c08002e0":"Only a few values for type \"Dealer\" - the column will be dropped"}}