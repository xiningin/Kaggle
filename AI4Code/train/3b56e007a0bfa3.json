{"cell_type":{"afed2fb8":"code","e5e64793":"code","7b6c14b5":"code","23d79d2f":"code","9590a366":"code","7d265e51":"code","324c4d29":"code","b0868597":"markdown","583d6709":"markdown","616b4b7b":"markdown"},"source":{"afed2fb8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ntrain = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","e5e64793":"y = train['Survived']\ntrain.drop(labels = ['Survived','PassengerId','Name','Ticket','Cabin','Embarked'], axis = 1, inplace = True)\ntrain['Age'].fillna(train['Age'].mean(), inplace = True)\ncategorical_columns = ['Sex']\ntrain = pd.get_dummies(train,columns = categorical_columns, dtype = int)\ntrain.drop(labels = ['Sex_male'], axis = 1, inplace = True)\n\nX = []\nfor column in train.columns:\n    X.append(column)\n\nX = train[X]","7b6c14b5":"X.head()","23d79d2f":"from sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression().fit(X, y)\ny_pred = model.predict(train)\n\n\nunique, counts = np.unique( np.asarray(y_pred == y), return_counts=True)\ntrue_false_values = dict(zip(unique, counts))\naccuracy = true_false_values[True]\/len(np.asarray(y_pred == y))\naccuracy","9590a366":"\nfrom sklearn import metrics\n\ncm = metrics.confusion_matrix(y, y_pred)\nplt.figure(figsize=(9,9))\nsns.heatmap(cm, annot=True, fmt=\".3f\", linewidths=.5, square = True, cmap = 'Blues_r');\nplt.ylabel('Actual label');\nplt.xlabel('Predicted label');\nall_sample_title = 'Confusion Matrix'\nplt.title(all_sample_title, size = 15);","7d265e51":"original_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest.drop(labels = ['PassengerId','Name','Ticket','Cabin','Embarked'], axis = 1, inplace = True)\ntest['Age'].fillna(test['Age'].mean(), inplace = True)\ncategorical_columns = ['Sex']\ntest = pd.get_dummies(test,columns = categorical_columns, dtype = int)\ntest.drop(labels = ['Sex_male'], axis = 1, inplace = True)\ntest['Fare'].fillna(test['Fare'].mean(), inplace = True)\n\ntest_pred = model.predict(test)\n#list_of_predictions_test = []\n\n#for pred in test_pred:\n#    list_of_predictions_test.append(one_or_zero(pred))\n    \n#test_pred = np.asarray(list_of_predictions_test)","324c4d29":"submission = pd.DataFrame({\n        \"PassengerId\": original_test[\"PassengerId\"],\n        \"Survived\": test_pred\n    }) \n\nfilename = 'submission.csv'\nsubmission.to_csv(filename,index=False)\nprint('Saved file: ' + filename)","b0868597":"(I decided to make a slightly different version to my original as Embarked should note have any effect on whether the person survived or not. I have also dropped sex_male column. I have also removed some code and markdown which I had used in my [original version](https:\/\/www.kaggle.com\/niteshhalai\/titanic-linear-regression-original-version).)","583d6709":"**Using the model on the test data**","616b4b7b":"First I will  split the data between variable and targets. I will also remove the columns PassenderId, Name, Ticket (these should not have any effect on whether the passenger survived or not) and Cabin (as these have a lot of missing values). I will also remove the embarked column as where the passenger has left from shouldn't have any effect on whether they survived or not."}}