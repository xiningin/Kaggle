{"cell_type":{"622c6a0e":"code","cc311b8c":"code","b4be8794":"code","ed116d00":"code","79ef8b97":"code","1f6fc7ee":"code","bb7895d4":"code","731827f7":"code","b11d7885":"code","657f4049":"code","bcb9e4f4":"markdown","f743bb49":"markdown","79c6848e":"markdown","2266b22f":"markdown","c93b19b4":"markdown","7c649453":"markdown","05bb20ac":"markdown"},"source":{"622c6a0e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport scipy as sp\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Standard plotly imports\n#import plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nfrom plotly.offline import iplot, init_notebook_mode\n#import cufflinks as cf\nimport plotly.figure_factory as ff\n# Using plotly + cufflinks in offline mode\ninit_notebook_mode(connected=True)\n\n# Preprocessing, modelling and evaluating\nfrom sklearn import preprocessing\nfrom sklearn.metrics import confusion_matrix, roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score, KFold\nfrom xgboost import XGBClassifier\nimport xgboost as xgb\n\n## Hyperopt modules\nfrom hyperopt import fmin, hp, tpe, Trials, space_eval, STATUS_OK, STATUS_RUNNING\nfrom functools import partial\nimport os\nimport gc\nprint(os.listdir(\"..\/input\"))\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cc311b8c":"df_id = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/train_identity.csv\")\ndf_trans = pd.read_csv(\"\/kaggle\/input\/ieee-fraud-detection\/train_transaction.csv\")\nprint('train Identity : ' , df_id.shape)\nprint('train Transaction : ' , df_trans.shape)","b4be8794":"df_id.tail(2)","ed116d00":"df_trans.tail(2)","79ef8b97":"## We use This function to see resume table about the data set \ndef resumetable(df):\n    print(f\"Dataset Shape: {df.shape}\")                       # shape\n    summary = pd.DataFrame(df.dtypes,columns=['dtypes'])      # type\n    summary = summary.reset_index()                              \n    summary['Name'] = summary['index']                               \n    summary = summary[['Name','dtypes']]\n    summary['Missing'] = df.isnull().sum().values            # missing\n    summary['Uniques'] = df.nunique().values                 # nunique\n    summary['First Value'] = df.loc[0].values                # 1st and 2nd and 3rd values\n    summary['Second Value'] = df.loc[1].values\n    summary['Third Value'] = df.loc[2].values\n\n    for name in summary['Name'].value_counts().index:\n        summary.loc[summary['Name'] == name, 'Entropy'] = round(stats.entropy(df[name].value_counts(normalize=True), base=2),2) \n\n    return summary","1f6fc7ee":"## we use this function to reduce the data set size \ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n","bb7895d4":"## Memory Reduction\ndf_trans = reduce_mem_usage(df_trans)\ndf_id = reduce_mem_usage(df_id)","731827f7":"resumetable(df_trans)[:25]","b11d7885":"df_trans['TransactionAmt'] = df_trans['TransactionAmt'].astype(float)\ntotal = len(df_trans)\ntotal_amt = df_trans.groupby(['isFraud'])['TransactionAmt'].sum().sum()\nplt.figure(figsize=(16,6))\n\nplt.subplot(121)\ng = sns.countplot(x='isFraud', data=df_trans, )\ng.set_title(\"Fraud Transactions Distribution \\n# 0: No Fraud | 1: Fraud #\", fontsize=22)\ng.set_xlabel(\"Is fraud?\", fontsize=18)\ng.set_ylabel('Count', fontsize=18)\nfor p in g.patches:\n    height = p.get_height()\n    g.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/total*100),\n            ha=\"center\", fontsize=15) \n\nperc_amt = (df_trans.groupby(['isFraud'])['TransactionAmt'].sum())\nperc_amt = perc_amt.reset_index()\nplt.subplot(122)\ng1 = sns.barplot(x='isFraud', y='TransactionAmt',  dodge=True, data=perc_amt)\ng1.set_title(\"Total Amount in Transaction Amt \\n# 0: No Fraud | 1: Fraud #\", fontsize=22)\ng1.set_xlabel(\"Is fraud?\", fontsize=18)\ng1.set_ylabel('Total Transaction Amount Scalar', fontsize=18)\nfor p in g1.patches:\n    height = p.get_height()\n    g1.text(p.get_x()+p.get_width()\/2.,\n            height + 3,\n            '{:1.2f}%'.format(height\/total_amt * 100),\n            ha=\"center\", fontsize=15) \n    \nplt.show()","657f4049":"plt.figure(figsize=(16,12))\nplt.suptitle('Transaction Values Distribution', fontsize=22)\ng = sns.distplot(df_trans[df_trans['TransactionAmt'] <= 1000]['TransactionAmt'])\ng.set_title(\"Transaction Amount Distribuition <= 1000\", fontsize=18)\ng.set_xlabel(\"\")\ng.set_ylabel(\"Probability\", fontsize=15)","bcb9e4f4":"### Transaction Amount Values Distribution","f743bb49":"In this data set we have 3.50% fraud transaction and 3.87% of Total transaction amount fraud  ","79c6848e":"# Introduction :\n#### In this kernel we work with IEEE Fraud Detection competition in 2 stages:\n#### 1- Data Visualizing\n#### 2- Preprocessing\n\n#### You can see the data description here : \nhttps:\/\/www.kaggle.com\/c\/ieee-fraud-detection\/discussion\/101203#latest-619906\n","2266b22f":"# Importing train Data sets ","c93b19b4":"we can see that the most transaction amount between 1 and 250 USD","7c649453":"### Resume table for transaction Data :","05bb20ac":"### Fraud and not Fraud Distribution with all data and with TransactionAmt \nisFraud : 0 or 1  and TransactionAmt : transaction payment amount in USD"}}