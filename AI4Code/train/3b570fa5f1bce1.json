{"cell_type":{"e0e99278":"code","b882ea36":"code","32c4ee63":"code","f61caa21":"code","3178dc8f":"code","449c7007":"code","fe58c3a8":"code","7da380a5":"code","7b8ef976":"code","b2c48a93":"code","2b835502":"code","7ca5357c":"code","c19dbd94":"code","6740a708":"code","2c52f783":"code","69fb3fc1":"code","b0e07458":"code","c9e336ec":"code","7e39c32b":"code","c7d74081":"code","f16b3a68":"code","783c82c1":"code","3c8e8776":"code","f542e267":"code","1d7a406b":"code","5f738d48":"code","ac6422f1":"code","39177602":"code","e3947067":"code","93b79c43":"code","2b2198c1":"code","8492b738":"code","3fa0acb1":"code","1770d904":"code","47831f79":"code","a85a1694":"code","67cf78b6":"code","76a70f92":"code","322d1e1a":"code","4b627776":"code","75ac35f3":"code","2ef391b5":"code","1f4dfcce":"code","9ddaf3ae":"code","1806d1f8":"code","5a39752e":"code","5b64b907":"code","868ec0c0":"code","c08eec5a":"code","8fbd6e14":"code","842301f5":"code","528f882e":"code","8fc230bd":"code","68b693a0":"code","3952de68":"code","22845e10":"code","0f673f7d":"markdown","e4b8cb3b":"markdown","9e6973f8":"markdown","00dd76c4":"markdown","5cb6b829":"markdown","3865905a":"markdown","da27c851":"markdown","b45f6514":"markdown","af02bdc4":"markdown","aa3bfeda":"markdown","76dcfe0c":"markdown"},"source":{"e0e99278":"import numpy as np\nimport pandas as pd\nimport math\nimport random\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\nfrom scipy.stats import f\nfrom scipy.stats import t\nfrom scipy.stats import shapiro\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error","b882ea36":"def linearRegression(X,y):\n    n = X.shape[0]\n    p = X.shape[1]\n    reg = LinearRegression().fit(X, y)\n    y_pred = reg.predict(X)\n    error = y - y_pred\n    residuals = pd.DataFrame({'idx':X.index,'residuals':error.values.reshape(error.shape[0])}) \n    residuals.set_index('idx',inplace=True)\n    squared_error = (error)**2\n    var = squared_error.mean()[0]\n    std = math.sqrt(var)\n    y_pred_aux = y_pred.reshape(y_pred.shape[0])\n    y_aux = y.values.reshape((y.shape[0]))\n    \n    SSR = ((y_pred_aux - y.mean()[0])**2).sum()\n    SSE = ((y_aux - y_pred_aux)**2).sum()\n    SSTO = ((y_aux - y.mean()[0])**2).sum()\n    SSR = SSTO - SSE\n    r_squared = 1 - SSE\/SSTO\n    adjusted_r_squared = 1 - (1-r_squared)*(len(y.values)-1)\/(len(y.values)-X.shape[1]-1)\n    \n    \n    reg_statistics = pd.DataFrame({'Statistics': ['R square', 'Adjusted R square','Standard error','Observations'],\n                   'values': [r_squared,adjusted_r_squared,std,n]})\n    reg_statistics.set_index('Statistics',inplace=True)\n    \n    anova = pd.DataFrame({'Source': ['Model','Error','Total'],\n                   'Degrees of freedom': [p,n-p-1,n-1],\n                    'Sum of squares':[SSR,SSE,SSTO]\n                     })\n    anova['Sum of squares'] = anova['Sum of squares'].astype('int64')\n    anova['Mean square'] = anova['Sum of squares']\/anova['Degrees of freedom']\n    anova['Sum of squares'] = anova['Sum of squares'].astype('int64')\n    anova.set_index('Source',inplace=True)\n    \n    F = anova['Mean square'].iloc[0]\/anova['Mean square'].iloc[1]\n    p_value = 1 - f.cdf(F, p, n-p-1)\n    \n    coefs_df = pd.DataFrame(data={'variables':['intercept'],'betas':[reg.intercept_[0]]})\n    variables = pd.DataFrame(X.columns.values,columns=['variables'])\n    betas = pd.DataFrame(reg.coef_[0], columns=['betas'])\n    coefs = pd.concat([variables,betas],axis=1)\n    coefs_df = pd.concat([coefs_df,coefs],axis=0)\n    coefs_df['betas_int'] = coefs_df['betas'].astype('int64')\n    \n    X_aux = pd.DataFrame({'idx':X.index,'intercept':[1 for i in range(n)]})\n    X_aux.set_index('idx',inplace=True)\n    X_aux = pd.concat([X_aux,X],axis=1)\n    num = math.sqrt(squared_error.values.sum()\/(n-p-1))\n    x_mat = X_aux.values\n    C = var*np.linalg.inv(np.matmul(x_mat.transpose(),x_mat))\n    diff = []\n    for i, c in enumerate(X_aux.columns):\n        diff.append(math.sqrt(abs(C[i][i])))\n    se = pd.DataFrame({'standard error': diff})\n    coefs_df.reset_index(inplace = True)\n    coefs_df = pd.concat([coefs_df,se],axis=1)\n    coefs_df.set_index('variables',inplace=True)\n    coefs_df['t stat'] = coefs_df['betas']\/coefs_df['standard error']\n    coefs_df['significance'] = 2*(1 - t.cdf(abs(coefs_df['t stat']), n-p-1))\n    coefs_df.drop(['index'],axis=1,inplace=True)\n    return reg_statistics, anova, F, p_value, coefs_df, residuals\n\ndef predict(coefs_df, values_df):\n    df = pd.DataFrame({'intercept':[1 for i in range(values_df.shape[0])]}, index=values_df.index)\n    values_df = pd.concat([df,values_df],axis=1)\n    coefs = coefs_df['betas'].values\n    values = values_df.values\n    coefs = coefs.reshape((coefs.shape[0],1))\n    out = np.matmul(values,coefs)\n    out = out.reshape(out.shape[0])\n    return out","32c4ee63":"path = \"..\/input\/insurance\"\ninsurance_df = pd.read_csv(path+\"\/insurance.csv\")","f61caa21":"insurance_df","3178dc8f":"insurance_df.info()","449c7007":"insurance_df.describe()","fe58c3a8":"insurance_df.describe(include=['O'])","7da380a5":"sns.set()\nfig = plt.figure(figsize=(16,5))\nax = sns.histplot(insurance_df['age'])\nplt.title('Age distribution')","7b8ef976":"fig = plt.figure(figsize=(16,5))\nax = sns.histplot(insurance_df['bmi'])\nplt.title('BMI distribution')","b2c48a93":"fig = plt.figure(figsize=(5,5))\nax = sns.countplot(x='smoker', data = insurance_df)\nplt.title('Smoker distribution')","2b835502":"fig = plt.figure(figsize=(5,5))\nax = sns.countplot(x='sex', data = insurance_df)\nplt.title('Sex distribution')","7ca5357c":"fig = plt.figure(figsize=(15,5))\nax = sns.countplot(x='children', data = insurance_df)\nplt.title('Children distribution')","c19dbd94":"fig = plt.figure(figsize=(14,5))\nax = sns.histplot(insurance_df['region'])\nplt.title('Region distribution')","6740a708":"fig = plt.figure(figsize=(16,5))\nax = sns.histplot(insurance_df['charges'])\nplt.title('Cost distribution')","2c52f783":"fig = plt.figure(figsize=(16,5))\nsns.catplot(x=\"sex\", y=\"charges\",\n                hue=\"smoker\",\n                data=insurance_df, kind=\"box\",\n                height=8, aspect=2)","69fb3fc1":"insurance_df['sex_binary'] = insurance_df.sex.map( lambda s : 1 if s == 'male' else 0 )\ninsurance_df['smoker_binary'] = insurance_df.smoker.map( lambda s : 1 if s == 'yes' else 0 )\ninsurance_df['region_ordinal'] = insurance_df.region.map({'northeast':0, 'northwest':1, 'southeast':2, 'southwest':3})\nregion_dummies = pd.get_dummies(insurance_df['region'])\ninsurance_df = pd.concat([insurance_df, region_dummies],axis=1)\ninsurance_df['not_healthy'] = insurance_df.bmi.map(lambda s : 1 if s > 30.0 else 0)\ninsurance_df['not_healthy'] = insurance_df['not_healthy']*insurance_df['smoker_binary']\ninsurance_df['father'] = (insurance_df.children.map(lambda s : 1 if s > 0 else 0))*(insurance_df['sex_binary'])","b0e07458":"cols_order = ['region','sex','smoker','region_ordinal','northeast','northwest','southeast','southwest','children','father','not_healthy','smoker_binary','sex_binary','age','bmi','charges']\ninsurance_df = insurance_df[cols_order]\nX = insurance_df.copy()","c9e336ec":"y = pd.DataFrame(insurance_df['charges'])\nX.drop(columns=['charges','region','sex','smoker','northeast','northwest','southeast','southwest'],inplace=True)","7e39c32b":"corr = insurance_df.corr()\nplt.figure(figsize=(13,10))\nmask = np.triu(np.ones_like(corr, dtype=bool))\nax = sns.heatmap(data=corr, annot=True, mask=mask)\nbottom, top = ax.get_ylim()\nax.set_ylim(bottom + 0.5, top - 0.5)","c7d74081":"fig = plt.figure(figsize=(16,8))\nsns.scatterplot(x=insurance_df['bmi'],y=insurance_df['charges'],hue=insurance_df['smoker_binary'],style=insurance_df['sex_binary'],size=5 + 5*insurance_df['smoker_binary'])\nplt.title('BMI vs Insurance charges segmented by smoke')\nplt.xlabel('BMI')\nplt.ylabel('Insurance charges')","f16b3a68":"fig = plt.figure(figsize=(16,8))\nsns.scatterplot(x=insurance_df['age'],y=insurance_df['charges'],hue=insurance_df['bmi'],style=insurance_df['sex_binary'],size=5 + 5*insurance_df['smoker_binary'])\nplt.title('Age vs Insurance charges segmented by BMI')\nplt.xlabel('Age')\nplt.ylabel('Insurance charges')","783c82c1":"fig = plt.figure(figsize=(16,8))\nsns.scatterplot(x=insurance_df['region_ordinal'],y=insurance_df['charges'],hue=insurance_df['sex'],style=insurance_df['sex_binary'],size=insurance_df['bmi'])\nplt.title('Region vs Insurance charges segmented by BMI')\nplt.xlabel('Region')\nplt.ylabel('Insurance charges')","3c8e8776":"fig = plt.figure(figsize=(16,8))\nsns.scatterplot(x=insurance_df['children'],y=insurance_df['charges'],hue=insurance_df['sex'],style=insurance_df['sex_binary'],size=5 + 5*insurance_df['bmi'])\nplt.title('Age vs Insurance charges segmented by BMI')\nplt.xlabel('Age')\nplt.ylabel('Insurance charges')","f542e267":"fig = px.scatter_3d(insurance_df, x='bmi', y='age', z='charges',\n              color='smoker_binary', size=10*(0.1+insurance_df['smoker_binary']), size_max=20,\n              symbol='sex_binary', opacity=1,range_color=(0,2))\n\n# tight layout\nfig.update_layout(margin=dict(l=0, r=0, b=0, t=0))","1d7a406b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)","5f738d48":"reg_statistics, anova, F, p_value, coefs_df, res = linearRegression(X_train,y_train)","ac6422f1":"reg_statistics","39177602":"coefs_df","e3947067":"fig = plt.figure(figsize=(16,8))\nsns.scatterplot(x=[i for i in range(res.shape[0])],y=res['residuals'])\nplt.title('Model residuals error')\nplt.xlabel('Index')\nplt.ylabel('Residual error')","93b79c43":"y_test_pred = predict(coefs_df, X_test)\nmodel0_mae = mean_absolute_error(y_test, y_test_pred)\nr0_test = metrics.r2_score(y_test, y_test_pred)\nprint(model0_mae,r0_test)","2b2198c1":"aux1_cols=['region_ordinal','children','not_healthy','smoker_binary','age','bmi']\nX_train1 = X_train[aux1_cols]","8492b738":"reg_statistics1, anova1, F1, p_value1, coefs_df1, res1 = linearRegression(X_train1,y_train)","3fa0acb1":"reg_statistics1","1770d904":"coefs_df1","47831f79":"fig = plt.figure(figsize=(16,8))\nsns.scatterplot(x=[i for i in range(res1.shape[0])],y=res1['residuals'])\nplt.title('Model residuals error')\nplt.xlabel('Index')\nplt.ylabel('Residual error')","a85a1694":"y1_test_pred = predict(coefs_df1, X_test[aux1_cols])\nmodel1_mae = mean_absolute_error(y_test, y1_test_pred)\nr1_test = metrics.r2_score(y_test, y1_test_pred)\nprint(model1_mae,r1_test)","67cf78b6":"aux2_cols=['not_healthy','smoker_binary','age','bmi']\nX_train2 = X_train[aux2_cols]","76a70f92":"reg_statistics2, anova2, F2, p_value2, coefs_df2, res2 = linearRegression(X_train2,y_train)","322d1e1a":"reg_statistics2","4b627776":"coefs_df2","75ac35f3":"fig = plt.figure(figsize=(16,8))\nsns.scatterplot(x=[i for i in range(res2.shape[0])],y=res2['residuals'])\nplt.title('Model residuals error')\nplt.xlabel('Index')\nplt.ylabel('Residual error')","2ef391b5":"y2_test_pred = predict(coefs_df2, X_test[aux2_cols])\nmodel2_mae = mean_absolute_error(y_test, y2_test_pred)\nr2_test = metrics.r2_score(y_test, y2_test_pred)\nprint(model2_mae,r2_test)","1f4dfcce":"aux3_cols=['smoker_binary','age','bmi']\nX_train3 = X_train[aux3_cols]","9ddaf3ae":"reg_statistics3, anova3, F3, p_value3, coefs_df3, res3 = linearRegression(X_train3,y_train)","1806d1f8":"reg_statistics3","5a39752e":"coefs_df3","5b64b907":"fig = plt.figure(figsize=(16,8))\nsns.scatterplot(x=[i for i in range(res3.shape[0])],y=res3['residuals'])\nplt.title('Model residuals error')\nplt.xlabel('Index')\nplt.ylabel('Residual error')","868ec0c0":"y3_test_pred = predict(coefs_df3, X_test[aux3_cols])\nmodel3_mae = mean_absolute_error(y_test, y3_test_pred)\nr3_test = metrics.r2_score(y_test, y3_test_pred)\nprint(model3_mae,r3_test)","c08eec5a":"models = ['model_0','model_1','model_2','model_3']\nmaes = [model0_mae,model1_mae,model2_mae,model3_mae]\nr2s = [r0_test,r1_test,r2_test,r3_test]\nmae_df = pd.DataFrame({'model':models,'mae':maes,'r2':r2s})","8fbd6e14":"fig = plt.figure(figsize=(5,5))\nax = sns.barplot(x='model',y='mae', data = mae_df)\nplt.title('Model performance')","842301f5":"fig = plt.figure(figsize=(5,5))\nax = sns.barplot(x='model',y='r2', data = mae_df)\nplt.title('Model performance')","528f882e":"y_pred = predict(coefs_df2, X[aux2_cols])\nmean_absolute_error(y, y_pred)","8fc230bd":"r2_test = metrics.r2_score(y, y_pred)\nr2_test","68b693a0":"fig = plt.figure(figsize=(16,8))\nsns.scatterplot(x=y['charges'],y=y_pred)\nplt.title('Actual insurance charges vs Predicted insurance charges')\nplt.xlabel('Actual insurance charges')\nplt.ylabel('Predicted insurance charges')","3952de68":"fig = plt.figure(figsize=(16,8))\nsns.scatterplot(x=insurance_df['bmi'],y=insurance_df['charges'],hue=insurance_df['smoker_binary'],style=insurance_df['sex_binary'],size=5 + 5*insurance_df['smoker_binary'])\nplt.title('BMI vs Insurance charges segmented by smoke')\nplt.xlabel('BMI')\nplt.ylabel('Insurance charges')","22845e10":"fig = plt.figure(figsize=(16,8))\nsns.scatterplot(x=insurance_df['bmi'],y=y_pred,hue=insurance_df['smoker_binary'],style=insurance_df['sex_binary'],size=5 + 5*insurance_df['smoker_binary'])\nplt.title('BMI vs Predicted insurance charges segmented by smoke')\nplt.xlabel('BMI')\nplt.ylabel('Predicted insurance charges')","0f673f7d":"## 3. Model performance contrast\n\n##### First we use all the variables for a performance benchmark","e4b8cb3b":"## 1. Exploratory data analysis","9e6973f8":"# Multiple linear regression for Insurance charges prediction","00dd76c4":"#### Train, test split sets","5cb6b829":"##### From the above table we can see that there is no missing values, there are 4 numeric variables (age, bmi, children, charges) and 3 categorical (sex, smoker, and region).\n\n##### Charges is the dependet variable and the rest are the independent variables.","3865905a":"<ul style=\"list-style-type:none;\">\n    <li>1. Exploratory data analysis<\/li>\n    <li>2. Feature encoding and feature engineering<\/li>\n    <li>3. Model performance contrast<\/li>\n    <li>4. Conclusions<\/li>\n<\/ul>","da27c851":"##### We are going to try two more models taking out more variables, and see if we can improve the performance.","b45f6514":"## 4. Conclusions\n\n##### The best performance was from the model 2 using the variables (not_healthy, smoker_binary, age, bmi) so finally the feature we construct did improve the model.","af02bdc4":"##### From the coefficients table of the above model, we can see that there are variables non significative (father, sex_binary).","aa3bfeda":"#### From the last two plots we see that the predictions are similar to the real values, and we use few variables so we respect the parsimony principle. ","76dcfe0c":"## 2. Feature encoding and feature engineering\n\n##### We need to encode the categorical variables and we create two more variables to see if they improve the performance of the model.\n\n##### We create a variable for smoker people with bmi greaters than 30.0.\n\n##### We create another variable for males with children."}}