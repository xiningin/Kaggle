{"cell_type":{"e106f053":"code","cf498ca0":"code","dc9c7e93":"code","1a931c2e":"code","2b839797":"code","ff236bce":"code","be12ab43":"code","1107303f":"code","39227525":"code","3e920735":"code","fa5a5d10":"code","f80241b8":"code","c09a4482":"code","96a9ebaa":"code","e4f3ba70":"code","24f65cb6":"code","a1fc329c":"code","573f4206":"code","588247f9":"code","fa9c246a":"code","01e51953":"code","5fe4d0ad":"code","359a979b":"code","489ce3d1":"code","3b5e6138":"code","254b46e5":"code","8f1276d2":"code","882f055d":"code","6aa960f8":"code","792b1f8b":"code","9b688bab":"code","570640dd":"code","5948dea2":"code","c7c91363":"code","7e603b25":"code","0ddb6ef6":"code","8ca0c664":"code","8b1f6b78":"code","6266e2ee":"code","9e0aeefa":"code","829ab649":"code","ab7344f6":"code","861f8819":"code","cea70205":"markdown","b384948c":"markdown","2c8c3786":"markdown","76973897":"markdown","dd3c0627":"markdown","8921ce1d":"markdown","1f1aea8b":"markdown","6faa0587":"markdown","fc4f2b53":"markdown","5affb7e3":"markdown","e7cdb849":"markdown","24bd94f8":"markdown","68fabc8f":"markdown","770cafc4":"markdown","fbe36e5b":"markdown","22d19601":"markdown","46b5de89":"markdown","00c00140":"markdown","34ed9259":"markdown","d85e31aa":"markdown","8e693894":"markdown","f19ff28d":"markdown","6d4d5902":"markdown"},"source":{"e106f053":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cf498ca0":"import matplotlib.pyplot as plt","dc9c7e93":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}","1a931c2e":"data","2b839797":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","ff236bce":"football","be12ab43":"edu = pd.read_csv('\/kaggle\/input\/datalab3\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])","1107303f":"edu","39227525":"edu.tail()","3e920735":"edu.head()","fa5a5d10":"edu.head(3)","f80241b8":"edu.describe()","c09a4482":"edu['Value']","96a9ebaa":"edu['GEO']","e4f3ba70":"edu[10:14]","24f65cb6":"edu.iloc[90:94][['TIME','GEO']]","a1fc329c":"edu[edu['Value'] > 6.5].tail()","573f4206":"edu.index[edu['Value']>6.5]","588247f9":"edu[edu[\"Value\"].isnull()].head()","fa9c246a":"edu.max(axis = 0)","01e51953":"edu.max(axis=1)","5fe4d0ad":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","359a979b":"s = edu[\"Value\"]\/100\ns.head()","489ce3d1":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","3b5e6138":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","254b46e5":"edu['ValueNorm'] = edu['Value']\/edu['Value'].max()\nedu.tail()","8f1276d2":"edu.drop('ValueNorm', axis = 1, inplace = True)\nedu.head()","882f055d":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)","6aa960f8":"edu.tail()","792b1f8b":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","9b688bab":"eduDrop = edu[~edu[\"Value\"].isnull()].copy()\neduDrop.head()","570640dd":"eduDrop = edu.dropna(how = 'any', subset = [\"Value\"])\neduDrop.head()","5948dea2":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","c7c91363":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","7e603b25":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","0ddb6ef6":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","8ca0c664":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","8b1f6b78":"filtered_data = edu[edu[\"TIME\"] > 2005]\nfiltered_data.head()","6266e2ee":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","9e0aeefa":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","829ab649":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","ab7344f6":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","861f8819":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","cea70205":"*sort row index in ascending order*","b384948c":"**to insert a new row at the bottom of the DataFrame, we can use the Pandas function append. This function receives as argument the new row, which is represented as a dictionary where the keys are the name of the columns and the values are the associated value. You must be aware to setting the ignore_index flag in the append method to True, otherwise the index 0 is given to this new row, which will produce an error if it already exists**","2c8c3786":"*filling the NaN values with specific values( 0) by indicating the name of column ('Value')*","76973897":"*What does the method tail()return?**it returns the last 5 rows*","dd3c0627":"*Which measures does the result show? It seems that it shows some default values, can you guess which ones?","8921ce1d":"*instead of printing the accumulated value over the years, we can plot the value for each year*","1f1aea8b":"*we can use the function drop to remove this column from the DataFrame\n\nThis removes the indicated rows if axis=0 and columns if axis=1\n\nWe do not want to keep the old values, we can set the keyword inplace to True. By default, this keyword is set toFalse, meaning that a copy of the data is returned.***","6faa0587":"*we want to remove this row, we need to use the function dropagain. Now we have to set the axis to 0, and specify the index of the row we want to remove. Since we want to remove the last row, we can use the max function over the indexes to determine which row i*","fc4f2b53":"**What do you observe regarding the parameter ascending=False?\nFalse means our data should not be ranked in ascending order","5affb7e3":"*creating a new dataframe called filetered data for dataframe edu after 2005; then rearranging the values , defining column and indexes *","e7cdb849":"*we want to plot the accumulated values for each country over the last 6 years, we can take the Seriesobtained in the previous example and plot it directly by calling the plot function as shown in the next cell*","24bd94f8":"This function computes a summary of statistics pertaining to the DataFrame columns, counts represents the number of rows non zero entities in a column(eg time); mean represents the mean value of columns; std represents the standard deviation of the column; min represents the minimum value within the column; 25 % represents the value at the first quartile( 1st quarter) when the data in the column is arranged in ascending order; 50% represents the value at the second quartile( 2nd quarter) when the data in the column is arranged in ascending order; 75% represents the value at the third quartile( 3rd quarter) when the data in the column is arranged in ascending order; max represents the maximum value of the columns.\nDescribe() does not provide statistics on columns which contains string data types","68fabc8f":"*What happens if we give a number as argument to the method head()?* mentionnig the argument gives us the number of rows to print starting from the top of the data frame*","770cafc4":"*we can sum up all the columns and rank the result. Then we can sort the resulting values to retrieve the top five countries for the last 6 years*","fbe36e5b":"note that the collection elements are in general separaeted by \":\". this can be observed in the data lab section of Kaggle","22d19601":"*Question 1: Which is the size of the edu DataFrame (rows x columns)?*\n*384 rows and 3 columns*\n","46b5de89":"*The result will be a Seriesdata structure, not a DataFrame, because only one column is retrieved*","00c00140":"*What does this index return? What does the first index represent? And the second one? We got the new data frame within the rows selected in interval from 90 to 93 , we got the selected columns only time and geometric;\n\niloc is used to select rows and columns by number, in order to appear in the dataframe using ilocindexing with the command, edu.loc[90:94][['TIME','GEO']], selects a subset of columns and rows using the labels as per our references instead of positions. Thus the data for ' TIME' and \" GEO\" for the row indexes of 90,91,92 and 93 are returned as per the aboved figure.","34ed9259":"*The function isnull()can be used to remove NaN values. here the difference is that a copy of the DataFramewithout the NaNvalues is returned, instead of a view.*","d85e31aa":"*What does the operation edu[\u2019Value\u2019] > 6.5 produce? \n\nThis operation appears the rows with values bigger than 6.5; \n\n**An if we apply the indexedu[edu[\u2019Value\u2019] > 6.5]?Is this aSeries or aDataFrame?\nIt is a series,We will get the index of the rows containing the values bigger than 6.5\n","8e693894":"*sorting the column 'Value' by descending order*","f19ff28d":"*removing all the NaN values and selecting column 'Value'*","6d4d5902":"we want a DataFrameshowing the mean of the values for each country over all the years, we can obtain it by grouping according to country and using the function meanas the aggregation method for each group. The result would be a DataFramewith countries as indexes and the mean values as the column*"}}