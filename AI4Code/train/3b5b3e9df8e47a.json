{"cell_type":{"c165e4f5":"code","c0d7bf7a":"code","d7e55da7":"code","b9f0bd59":"code","2b5819ad":"code","26b37300":"code","c1d01381":"code","a65990d4":"code","8d860c45":"code","e4a47c2d":"code","ca411f39":"code","f778a383":"code","998f3a48":"code","1e8d860d":"code","eab48056":"code","b73e1569":"code","9b36d663":"code","c0048d70":"code","66329669":"code","ab775334":"code","9833baac":"code","7e7505dd":"code","d1e0e586":"code","d8a30d04":"code","77765739":"code","2017948e":"code","b14ff221":"code","a10276be":"code","96ec637a":"code","17c718fa":"code","c3f2133a":"markdown","ac703080":"markdown","24a2d692":"markdown","53be0338":"markdown","a9c84605":"markdown","c4f380cc":"markdown","b4b443c6":"markdown","ac4c993b":"markdown","267f59c1":"markdown","33107637":"markdown","dfdb91aa":"markdown","d4f72dd5":"markdown","65d43c8d":"markdown","4018f217":"markdown","4867e3fd":"markdown","db074238":"markdown","fecff567":"markdown","e80c0292":"markdown","d19bdfef":"markdown","103f8d8c":"markdown","65492bf1":"markdown","325b310a":"markdown","2b02874d":"markdown","8f478fc9":"markdown","31c95b89":"markdown","9e93b1fb":"markdown","69d51a01":"markdown","db985025":"markdown","df396ca2":"markdown","b61106e2":"markdown","24938b62":"markdown"},"source":{"c165e4f5":"import pandas as pd                  # A fundamental package for linear algebra and multidimensional arrays\nimport numpy as np                   # Data analysis and data manipulating tool\nimport random                        # Library to generate random numbers\nfrom collections import Counter      # Collection is a Python module that implements specialized container datatypes providing \n                                     # alternatives to Python\u2019s general purpose built-in containers, dict, list, set, and tuple.\n                                     # Counter is a dict subclass for counting hashable objects\n# Visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# To ignore warnings in the notebook\nimport warnings\nwarnings.filterwarnings(\"ignore\")","c0d7bf7a":"# This is a subset of the original data available at kaggle.\nfraud_data = pd.read_csv(\"https:\/\/raw.githubusercontent.com\/dphi-official\/Imbalanced_classes\/master\/fraud_data.csv\")","d7e55da7":"fraud_data.head()","b9f0bd59":"fraud_data.info()      # Returns a concise summary of dataset","2b5819ad":"# Taking a look at the target variable\nfraud_data.isFraud.value_counts()       # The value_counts() function is used to get a Series containing counts of unique values.","26b37300":"fraud_data.isFraud.value_counts() \/ len(fraud_data) * 100       # Gets the percentage of unique values in the variable 'isFraud'","c1d01381":"# we can also use countplot form seaborn to plot the above information graphically.\nsns.countplot(fraud_data.isFraud)","a65990d4":"fraud_data.isnull().sum() \/ len(fraud_data) * 100   # To get percentage of missing data in each column","8d860c45":"fraud_data = fraud_data[fraud_data.columns[fraud_data.isnull().mean() < 0.2]]    # Will keep those columns which has missing values less than 20%","e4a47c2d":"# filling missing values of numerical columns with mean value.\nnum_cols = fraud_data.select_dtypes(include=np.number).columns      # getting all the numerical columns\n\nfraud_data[num_cols] = fraud_data[num_cols].fillna(fraud_data[num_cols].mean())   # fills the missing values with mean","ca411f39":"cat_cols = fraud_data.select_dtypes(include = 'object').columns    # getting all the categorical columns\n\nfraud_data[cat_cols] = fraud_data[cat_cols].fillna(fraud_data[cat_cols].mode().iloc[0])  # fills the missing values with maximum occuring element in the column\n\n\"\"\"\nExplaining above line:\n\nThe above line of code is replacing the missing values in the columns in cat_cols with the mode (most repeated elements) of the non-missing values \nin the same columns.\nThe .iloc[0] attribute is selecting just the first mode returned, in case they are multiple values with the same highest frequency of occurrence. \nPlease review the documentation for further clarifications on this regard: \nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.mode.html\n\"\"\"","f778a383":"# Let's have a look if there still exist any missing values\nfraud_data.isnull().sum() \/ len(fraud_data) * 100","998f3a48":"fraud_data = pd.get_dummies(fraud_data, columns=cat_cols)    # earlier we have collected all the categorical columns in cat_cols","1e8d860d":"fraud_data.head()","eab48056":"# Separate input features and output feature\nX = fraud_data.drop(columns = ['isFraud'])       # input features\nY = fraud_data.isFraud      # output feature","b73e1569":"from sklearn.preprocessing import StandardScaler\nscaled_features = StandardScaler().fit_transform(X)\nscaled_features = pd.DataFrame(data=scaled_features)\nscaled_features.columns= X.columns","9b36d663":"# Let's see how the data looks after scaling\nscaled_features.head()","c0048d70":"# Splitting the data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.3, random_state = 42)\n\n# X_train: independent feature data for training the model\n# Y_train: dependent feature data for training the model\n# X_test: independent feature data for testing the model; will be used to predict the target values\n# Y_test: original target values of X_test; We will compare this values with our predicted values.\n \n# test_size = 0.3: 30% of the data will go for test set and 70% of the data will go for train set\n# random_state = 42: this will fix the split i.e. there will be same split for each time you run the code","66329669":"# 'resample' is located under sklearn.utils\nfrom sklearn.utils import resample","ab775334":"# concatenate training data back together\ntrain_data = pd.concat([X_train, Y_train], axis = 1)","9833baac":"# separate minority and majority class\nnot_fraud = train_data[train_data.isFraud==0]\nfraud = train_data[train_data.isFraud==1]","7e7505dd":"# Unsample minority; we are oversampling the minority class to match the number of majority classs\nfraud_upsampled = resample(fraud,\n                           replace = True, # Sample with replacement\n                           n_samples = len(not_fraud), # Match number in majority class\n                           random_state=27)","d1e0e586":"# combine majority and upsampled minority\nupsampled = pd.concat([not_fraud, fraud_upsampled])","d8a30d04":"# Now let's check the classes count\nupsampled.isFraud.value_counts()","77765739":"# we are still using our separated class i.e. fraud and not_fraud from above\n# Again we are removing the observations of the majority class to mathch the number of minority class\n# downsample majority\nnot_fraud_downsampled = resample(not_fraud,\n                                replace = False, # sample without replacement\n                                n_samples = len(fraud), # match minority n\n                                random_state = 27)","2017948e":"# combine minority and downsampled majority\ndownsampled = pd.concat([not_fraud_downsampled, fraud])    # Concatenation","b14ff221":"# let's check the classes counts\ndownsampled.isFraud.value_counts()","a10276be":"# import SMOTE \nfrom imblearn.over_sampling import SMOTE\n\nsm = SMOTE(random_state = 25, sampling_strategy = 1.0)   # again we are eqalizing both the classes","96ec637a":"# fit the sampling\nX_train, Y_train = sm.fit_sample(X_train, Y_train)","17c718fa":"np.unique(Y_train, return_counts=True)     # Y_train is numpy array, so unique() functions returns the count of all the unique elements in the array","c3f2133a":"We can notice, of 57049 observations \/ records only 2005 were fraud transactions.","ac703080":"There are only 3% of the data which are fraud and the rest 97% are not fraud. This is clearly a class imbalance problem. In this notebook we will look to solve this type of problems.","24a2d692":"Again, we have an equal ratio of fraud to not fraud data points, but in this case a much smaller quantity of data to train the model on. ","53be0338":"# Dealing with Imbalanced Data\nMost machine learning algorithms work best when the number of samples in each class are about equal. This is because most algorithms are designed to maximize accuracy and reduce error. Again this can't be generalized and we must be very case specific depending on the nature of data and its underlying context.\n\n[Dealing with Imbalanced Data](https:\/\/towardsdatascience.com\/methods-for-dealing-with-imbalanced-data-5b761be45a18)\n\n## Different Techniques\n1. **Resampling Techniques - Oversample Minority Class:** Oversampling can be defined as adding more copies of the minority class. In other words, we are creating artificial\/synthetic data of the minority class (or group). Oversampling could be a good choice when you don\u2019t have a lot of data to work with.\n\nWe will use the resampling module from Scikit-Learn library to randomly create artificial samples of data from the minority class.\n\n**Important Note**\n\nBEFORE you try any oversampling techniques **you must** split your data into train and test datasets! \n\nWhy it should be done that? Oversampling before splitting the data can allow the exact same observations to be present in both the test and train sets. This can allow our model to simply memorize specific data points and cause overfitting and poor generalization to the test data.\n\n","a9c84605":"We can notice here after resampling we have an equal ratio of data points for each class!","c4f380cc":"#### Separate Input Features and Output Features","b4b443c6":"### Missing values\nGenerally datasets always have some missing values. May be done during data collection, or due to some data validation rule.\n","ac4c993b":"## Introduction\nThis notebook will introduce you to class imbalance problem.\n\n\n\n#### Imbalanced Problem\nImbalanced classes are a common problem in machine learning classification where there are a disproportionate ratio of observations in each class. Class imbalance can be found in many different areas including medical diagnosis, spam filtering, and fraud detection.\n\n#### Agenda\n*  Loading Libraries\n*  Loading Data\n*  Getting Basic Idea About Data\n*  Missing Values and Dealing with Missing Values\n*  One Hot Encoding (Creating dummies for categorical columns)\n*  Standardization \/ Normalization\n*  Splitting the dataset into train and test data\n*  Dealing with Imbalanced Data\n    *  Resampling Techniques - Oversample Minority Class\n    *  Resampling Techniques - Undersample Majority Class\n    *  Generate Synthetic Samples\n\n","267f59c1":"### Splitting the dataset into train and test data\n**Why split the data into test sets and trainig sets?**\n\nPurpose of splitting data into the different category is to avoid overfitting.\nPlease go through this awesome explanation, it will take only two minutes to go through it.  \n\n[In machine learning, what\u2019s the purpose of splitting data up into test sets and training sets?](https:\/\/www.quora.com\/In-machine-learning-what-s-the-purpose-of-splitting-data-up-into-test-sets-and-training-sets)\n\n**What is Train\/Test split?**\nThe data we use is split into training data and test data. The training set contains a known output and the model learns on this data in order to be generalized to other data later on. We have the test dataset (or subset) in order to test our model\u2019s prediction on this subset.\n\n\n**Further Reading:** [Train\/Test Split and Cross Validation in Python](https:\/\/towardsdatascience.com\/train-test-split-and-cross-validation-in-python-80b61beca4b6#:~:text=Train%2FTest%20Split,to%20other%20data%20later%20on.&text=Pandas%20%E2%80%94%20to%20load%20the%20data,frame%20and%20analyze%20the%20data.)\n\n\n\nWe will keep 30% of the data for test set.","33107637":"3. **Generate Synthetic Samples:** Here we will use imblearn\u2019s SMOTE or Synthetic Minority Oversampling Technique. SMOTE uses a nearest neighbors algorithm to generate new and synthetic data we can use for training our model.\n\nAgain, it\u2019s important to generate the new samples only in the training set to ensure our model generalizes well to unseen data.","dfdb91aa":"Filling missing values of categorical variables with mode. \nFor those unattended, Mode is maximum occuring element in a variable.\n\nWhy mode for categorical variables? - Let's take an example of categorical variable: \"Social Status\" with values: (Poor, Mid-income level, Rich). Can we find mean for social satus? No! So it may not be meaningful to go with mean in this case as it is not valid.","d4f72dd5":"There are 434 columns with 59054 observations.","65d43c8d":"![alt text](https:\/\/dphi.tech\/wp-content\/uploads\/2020\/06\/sn.png)","4018f217":"### One Hot Encoding (Creating dummies for categorical columns)\nIn this strategy, each category value is converted into a new column and assigned a 1 or 0 (notation for true\/false) value to the column. In Python there is a class 'OneHotEncoder' in 'sklearn.preprocessing' to do this task, but here we will use pandas function 'get_dummies()'. This get_dummies() does the same work as done by 'OneHotEncoder' form sklearn.preprocessing.\n","4867e3fd":"Here we will fill missing values of numerical variables (or columns) with mean value.\n\n**Variables are nothing but the column names. From here on we will start using the variables instead of column or column names.**\n\n\n\n","db074238":"2. **Resampling Techniques - Undersample Majority Class:** Undersampling can be defined as removing some observations of the majority class. Undersampling can be a good choice when you have a ton of data -think millions of rows. But a drawback is that we are removing information that may be valuable. This could lead to underfitting and poor generalization to the test set.\n\nWe will again use the resampling module from Scikit-Learn to randomly remove samples from the majority class.\n","fecff567":"![alt text](https:\/\/dphi.tech\/wp-content\/uploads\/2020\/06\/ohe.png)","e80c0292":"## Conclusion\nThat's it for this notebook. We learned handling missing values, one hot encoding, standardization \/ normalization, what is imbalanced class and three techniques to deal with imbalanced classes.\n\n\n# Thanks for reading the notebook! Hope you enjoyed it.","d19bdfef":"[Why One-Hot Encode Data in Machine Learning?](https:\/\/machinelearningmastery.com\/why-one-hot-encode-data-in-machine-learning\/)","103f8d8c":"### Getting Basic Idea About Data","65492bf1":"Eliminate columns with more than 20% missing values. Again this is very subjective and solely depends on the nature of the dataset and underlying context. We cannot generalize this procedure to all the datasets.","325b310a":"References:\n1. [Dealing with Imbalanced Data by Tara Boyle](https:\/\/towardsdatascience.com\/methods-for-dealing-with-imbalanced-data-5b761be45a18)\n2. [Data Pre-processing - Handling missing values and dealing with class imbalance by Bharat Ram Ammu](https:\/\/www.youtube.com\/watch?v=vksQx1JNo8Y)\n3. https:\/\/www.kaggle.com\/drgilermo\/a-tutorial-for-complete-beginners","2b02874d":"Out of 434 columns, 414 have some missing values.","8f478fc9":"### Dealing with Missing Values\n*  Filling the missing values with right technique can change our results drastically. \n*  Also, there is no fixed rule of filling the missing values.\n*  No method is perfect for filling the missing values. We need to use our common sense, our logic, or may need to see what works for that particular data set.\n\n### Ways of dealing with missing values:\n\n**Default value:** One can fill the missing value by default value on the basis of one's 1) understanding of variable, 2) context \/ data insight or 3) common sense \/ logic. \n\n**Deleting:** Suppose in our dataset we have too many missing values in\n\n*  Column, we can drop the column\n*  Row, drop the row. Usually we do this for a large enough dataset.\n\n**Mean\/Median\/Mode - Imputation:** We fill missing values by mean or median or mode(i.e. maximum occuring value). Generally we use mean but if there are some outliers, we fill missing values with median. Mode is used to fill missing values for categorical column.\n\n[Data Cleaning in Python: the Ultimate Guide](https:\/\/towardsdatascience.com\/data-cleaning-in-python-the-ultimate-guide-2020-c63b88bf0a0d)","31c95b89":"## Loading Data\nPandas module is used for reading files. We have our data in '.csv' format. We will use 'read_csv()' function for loading the data.\n\n**Disclaimer:** Loading fraud data will take time.","9e93b1fb":"### Standardization \/ Normalization\nOften variables in a real dataset come with a wide range of data values.\n\nFor example if you look at this fraud dataset, the variable 'TransactionAmt' has values in range 0.292 to 5279.95, while if you look at variable 'V14', it has values in the range 0.0 to 1.0. Basically, they are not on a common scale.\n\n**Now how does standardization\/normalization help?**\n\nPerforming standardization\/normalization would bring all the variables in a dataset to a common scale so that it could further help in implementing various machine learning models (where standardization\/normalization is a pre-requisite to apply such models). Again, don\u2019t take this for granted, there are some smart algorithms which doesn\u2019t need this and will explore one of them here.\n\n\nHere we will use 'StandardScaler' class of 'sklearn.preprocessing' to scale our data.","69d51a01":"![](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAXoAAACFCAMAAABizcPaAAABHVBMVEX\/\/\/8gsuMAAAASEQz\/\/v\/\/\/\/39\/\/8REAwgsuT7\/\/8gsuEIBgD\/\/P\/9\/\/34\/\/\/\/\/\/u\/vrxtbGpiYWA\/PjshseZXV1XNzcvv\/\/8dtOH39vOampdGRkQlJCI6OTd4y+gGBAAaGRXo6Od4d3W1tbWHh4Snp6WGzOCO1vDh+fsuq9eQkI4vLixPTkzj4+Cg2Ou7u7m17fja+v8Ap89\/f32i1+9DtNggsOvI9PzY2NhnZ2XC6vXIyMWsrKpJsNGy5PCH0eBjyuAzvObU7fVhvN2n4vB4x916y+w+s8xevucAq86X1eVYt9MpqNkXoMaHze6j4vXF+\/+U4+9qwNVIqsO14PCLxdR2utGm6vPb\/vtorMVOwN+Zzd4foMxHrdoAoMBvNiNWAAAgAElEQVR4nOVdi2LaSLJtcLdAMpJiR7aEH8RPjPyKwQM4xMYzBmYSrN3M5mZnd3099\/8\/49aplsTDYJMNmYkntbMxCKklna6urqquqhbii8gwhKT\/CqbjVNrXP\/5EdHfdrfqOoZRdkIYyJ11lGrap6FrpFkyDviv8IxT9X5rCpl+EMHTzdJBOlnR2fATn0TWGob7swZ89Kde2XWXaZuW0E1qWlc97eSvjRfVy03Ft1xVSTrrMaJ3+QP9rOwT9p1OiH077\/dMffqBPFUNWTvunTPrPJ1kQn05\/OB2iG6WU+51jTxCYhG6lHDYa+YznWYGV97yMlcnUOgB\/CnM6nYZHHdVzVMGpU3fRlfRPvpEPorbrtiIvn89k6GADh+uOMjsZatSis\/JoPuwqe+Jo+q6oYJuG067VgiCTIbgC\/LUYtnzYqwjTngi90fOCTN7qmSSQOgQ8XUfDJbCsIGqabjOkQwQ+tWNZmfDOEaqUoRMwqKyAforOILP+6Ff9xsi2C8IvhRaJGUIPiHuALI8\/eS9sTuPOnz2CMtNzbNcscS8EFiFLV0Y30q2G6AWLhkEGP3XMgvjZCjCYLPyXt8Iz5f7BL\/rtkW3Laj3KEytCyjAuxJvohjxET3RqTBT2RsnCGOk59GspyBCs9R87d\/V39fovJOurIckZK3hHR+r1n+plk\/onouYyP911OnTo3VXTdY3vl+tJgzEUIdd8z6IArA4ZgT8eBDJ9CQIvvDYZe2O0A1SZeNryyiSvaAB4gRe1WOtxTBoHBD0NGesXX5jCMElVcqU48DACujSETBDpPcZ3K+wNwxa2WzCqtQxxd2YSNayg4b3vm66S49CLMk7wyjhcsn6i4dGmjlSK1Uy7EkLK3\/pCuHSIdBlbHOD8qA3dk\/pb2cowv18FR0pJU2i13iBuDKyJ2PPcWeva0pDGmGwGlFYCfabhhYSqbRtSqYJUBD0pM7e+JOhpzBiGqxj6TFsoh4wBag82wZ\/z3t8AGdK0Db9DkiWA2J5EENieV2uRDTSu6BxENCMk0GP+JJ3SNU3lGqaGvtG4dUie05ARrqkAPd3kEw0BqUgwEfrudzvR0oA3hHkdZkg\/IR19EvKk7WASyNQrynjA9ZE14HrSSK224Th+pVLxlYY+H\/xScXzfr1SrBHQMfd\/HESKXrNzvVtYLWxaMZkRChfRsKPMPCQoj8X3e6xF49ujVI1zPulAIiqJezPV0IX+Pwr\/d0NSroc+ENRysdWh4uN+vhkNC2K9bUN8zk5EH9AGfQOqLPQbUQZQZQG81Mj+xdkTddGAk0OfZVvC8sKJ4miXo8xBg1Gc\/k3Ca7KH4Lkja7oeQNUow92SBk4f2Q\/Dd+oXHoSfQ0UuWFfZJhYGGA\/uARgNdbFVMmUCPriAZ9nfSRL9jo0q6lTrBPnmCHSZo9+3xq0cEDs0XFgmSWi1s1Lqa60lfpUMQL7XQJy1eazhe+J7kTVjrC1Jr7UlP9X2Q+lAjMf8k8ha4ue484Poh6Im5ow9VouZNM55mabDUf8Whm5sbqDka+oMqH2pW4I\/+fqFXJOlngR4S2oqaj0FPI6PREvTRhlovBaCn7vLho1eugmufoc+f0mCDkeXCRvtuTSrlnoVBfhbkM\/CEfRxTBUdkPRzCpNcrmF7ChqyHYP+drFnTtk0XbiANfR+qkiEMmuPN79ekUkYp+Ikd808BH0B3ITVl5PLRaZbmTrJmDUnwk6UE6Om6ug+PQaFQID02gd4oCOJ4LAPY4zrT90PKr8HPOwvTQ++PuqOXJ9ALhp6ET1sSv0ssvQhVhQ8nIEsMB1zhEpsnAkfZinqLz\/0rcT2NYx7LChhIyBRFZiics\/yWCj+5Np9HB1thnh3oM0APw7VkGPABJPc6COnafBkSpgTL4P0\/qr82iVpnLUNUQ2im4a9VfeQTGa8leKS9Ph9pnuGkvxDTSwMeRghWpaR0CXSwIH2Em0wpm\/rDMGmWcxl6U\/RJpQ9mYntm2LpPl6lUQPcCYnqvZ1A3l9CIRWYrqZK1KOoYxPVBAB1fm67hfRNDA0uD+E4WbhheOWRT\/alwzZGIn4E8TWuGEobjV25uWkRV3zFprsMcKDEC0C8YHcq5hbzJzwx9WKVeVYlCqEp5rGf1TNuwS14m4NWtAAPB+lm41SiPBcI87DXqoahpuyU0EgSWpWftjqnjF\/4SBF+s6xpKOZVW\/65eg\/sEVHtfL\/U\/VX0Tqh9BDj858a5bCYKgYc0wzcYUdV0SEglcivCmCbjnmAWzE8DlANnlwXVQEm4zYh8ErzNagVerKpzPa+JMgVcSGJh\/KmBzJGna9DJ+qxREUawzWjDmSexmaIj32lWsF9HYQJSMUtWI\/SwzaZfM9gfUcQPXcSmq3Uf3Hd+Qzi18ZPCU1e6J\/q8s3NY9fbtHx9\/jv79VpOhEKTPgrB7Uyz8TrfkSQe90r8J4fQ\/+l4ADa0DEjmF426868JdjNjBa2kk\/O\/Q9waaQJpemSppWqy71Zat9xtSmCfTX5q8V1\/VbyZFff8Xk69juTXzSGU\/GTSg\/fxlr1rCV07yyMMozsCUZLjA1L7vyymuQuf+9S7yPxSOnHXqIJJgZeovE8xD0bkGSdKO5hf7SRJKolWTMulKS8o6lQU3SUPSdVHsXUT9Cz\/3K\/UtEn0nbJiXGVH45mjBvYqKz4r8eTYi1Tssns8aEgmPNzvSk4uj1bU0wUBWmF+ipEEOAHjqVxKDSMX4EMdQtYbuSiaHmTwz\/H6Nc6vXir9XLpFsXsD5xG3Lg2COMy9I\/U6ufkonfz8w+xYK80Df+KLzmTV8ResSPVq\/yWsGbAruV4TURVjOsWr9yPTvDM+XvfVJwvl\/Hy0Qype0Kv+6Rnj51vQnEoXcBNMF8WLuqfx7ygF6RAfXMoE8eV30dxreFazqdgNfjMpMFjqWnX16HDcP6zx\/Oqgefy\/W1Px16lf7z+dd9HehdRBZEPI3m843JwHFQmUX6\/W+nzYoDJuh\/LvRwv6sHwa+qWCx+jZeaROxwK15uP3ni29Xk0+5RdmFnPg8oX1w8OGZL1bxnRQb+wqnQRdHt6Q3BTsqgbReM7mdoN0x1tv1H5tni7pv1jaOj4zev\/yj4t\/e2sk9Av732Mrsbf17LLi4sZNfn8HTba5vZ1w+OutLojC+ywq6HYzID+yqw8lH4Y5tg1+MOi0dmK2J38AxaDjcRZErUxyPiRq1liRYXF+nfhf2BXH1II5J2itjVhyedmB6Tr4\/pfsPQP2xrdSmbfaVBokG6Rcgv5LJvh87\/TMHDiTLq7TJu\/OLBr0aBmH5MUyRlB74qi6V\/FHbaFawKJeAg7K4awek1m\/sMhle+zE5pkTaxvQ6Wimkxe\/4I9DO9oxr8O4WK1MXExI9wvZQvs7lcLoZeFRdzDP1Ddp39seIbU0MToJdmLz\/ujOG1bIvdWWG9D++NkIUUGzhjKoiBn03osB8s+gA7apAOpTayC8OU3R880Bf2wjQqbixOgz6+oZTH3Duv+YASb\/jbyBWf+Wgx9OjCCdCrajgBeggJ+iestxGLUZBqaEVOKuX6t+y9nYXnWT26b2KlJbH+8VY5hjy3GP9NX1AjP\/6K+phK3md46E9CQ43+BhN4GHo5\/PPQ9UpDvxvnzBWXIRLHpkf54PODBTOZiDL5OPTmKaIDRmU9FEmS9wS8w6FGxlhSFNmlZV43mkXW5xHMVK\/AZZFC8jobA761QWKAn2wnbZ20HjVBDVQ4rAaf5IOfH7zbCEjj0Ct9UXH4RivZAUhAdPviJH0SNUUhU0NPlpA73O5U6J1SPvDGVBssU3hWresjLZP43RxfC1WiHcJxPgPXA\/vA6pjECrZMQsaOs7GY2S5e8OuSuNcvpV4vrR8drS\/tJpAd7hGdr27vHZMydEgnbR+u0Ann8ShJfj5fP9pcutCg6mN41dVzfKSr1Nre+Rbfko7s6ElhdW3peJOaenOp3233fO9oEfzwhq4Gr78436Om1hIMX+wc48kuE\/T3+Tavi2s4vJeKpeLr82V6hc2VvQvB7qmp0Pt1joMfZnmMgnz4scLRGFgUVNApB91qGIZbRZDxDNBbbASHH8Ckpoihv9DiRgt4l96XxvUhP\/sFjYJXi4uvstmNVd3dG1CEsjz0oQxd7KafuKkt\/nllAVdls5d8LMfH1ujTJX\/aIujXs7GIwwEE7u9vDDSsDW5rJ4uZP5fjU14QbKyDZV\/qFz\/Z5NPpyXIxiCv88\/pG\/DzaGrh4kx20e66H2zToqxEiHmMQ8\/An5JFiFrYHq58T7EDXfEdyZIYQKISoZqxadeTqfc3oR5p\/XhB0L3Tzrwdqz2KsWRzxkXhSJvUjRpCO4Gq1oX9OZoxVPKiWLIB+F9ctbhRjKZ7M6ejU5eEDLIbOh48AqDUceLXOL7+aTX9djHUC3cJi\/MTZRX6b1eT5GO5zHgZZfvCH0JOGbg2gRwoU4Z8Jm+aQTvOQbLcbBQiufxJ6RBAHd87I1UvZhfTB6NEOT+LjJxr5XG5o5j1KO4NVvVwuN6wUxdAnZ2SXR6G\/TKAnEZcbnIV239IcA87k9rJvRqHXyvwAelFcfDX4Mac5fHmikrb5aoFHnR7XFyxw8OwToO\/CKRnkU+g5Zumq6tqPBvMqVXlveVMyecYosMbDcNb5PWLxMDSe+GXiB6eHXR6CPptwXS59reME+hwfTLprMvSJwOHW+a5H2ezR8s7SwitGczsROPpeY1wv9uIJKauf8OUA+vR5XvFBGmjZ3PrOzjr3afYwgX4S1\/fZPxNjaGUQ2B68rxYkzYmPQi\/KOPdp4CFxIn9UXMVSYnWs0W0tFI9XV9f1G56k0GeXXsdMll3fPefzclsq4frc1tqqBoe6czL0L3Yvt7j1\/de7usvXznmwxYoPSfvV3d1N\/rxHp2yPQF\/kIbe4+VYrBTmeaPQDZVd2437ZYgko11\/zy66xHbX8GNeXtf2UMKhHHRGekSIo1aOpqUhvnUnDoakjOrULIxcDBHqYt2Nt7up3obfefpVLhjBDzxzOnxa3mD+Zj7YT6BlmHkrZvSnQA+PcQmpS6SCvk5OTopZ+MRtgRhiYrwPoV\/WTQdPU3Lwm4tliccONRZXmFKgT2yfb2+qEf90Uj8j6HzFbplwPOW+VER9jPh7VSBpnebaIBA\/hk6NtPeR6tkH4DRZfAhWtYJ+n0O\/TQWauV8f06bXmo5MUevzMV7N5MAl6OQS9ZOXyYpkly8pLPhvAaGs2N+Q+S6C\/THBMbgNZuBzfUD+Pht5Vag2qUHbjzSj0k7j+R6R2J84YzLKITUXM2eNx1K5rxtkf4w6gAeS8oGhlSNKbo6EbLzVT76YHtHWq32UJB5iv+WMCfSxvs8fEVy\/0y2wPQR8DlV2fwvVylOsVZLL2ji3Gqh+COROuN9gQHUB\/mKIc32ZlBPq36aAQRfimcpjBF57k+mt2xg9Es5fpzbCOpxAm2K2hp8ZN4RR6VE3AiLr15Zij\/o1+1D0G3RVsYJK+t8Ivfig0zLkhMTME\/boSDP3CAPoc\/WynQA2glwPlUowJnNi0iIFP3JOpI8HgyX8A\/Q671dgU09AfD0GvhqF\/E8\/HWlV7nOvLmdEUhfzD9JsJZNMsbDsdTMqYmidij0mEmq7RnD02Ya\/FLMG2vCE2jl6IVNUmVk9kD6t8M0A\/xPUM1CzQL6Nvc7nj9QVm0jHopRQTuZ6a1NPnNOi5R3PZzeOjV6PQT9RwEESWzJcQHiRvno4cQOyGMqp1xOFNSS5Bul9gWWGXTGExGrCUWLO7bO0dZl9lj\/HqO7HISF8LruQZoZcxPEsp9Bg9+1Oh1+ormfrbeqwNQ\/9wmuV2oD1OkvXD0O9yYztKFF88Leu70Rj09864Z2oS9K40aDo4q3lI\/5s82xL2QRD1TKTkjMp6tanHIz\/OYZb18pVtLZlzcOZoZY7F9cxcr5GAEOMlDhbHOyPQp+6zotZjF4\/Q80sPoN\/lU4ahf5veMG78cAr0hywoV6ndi6c1nFZkDRzv8N9E1VmgxyzskriPUBdkmsCxGlbHLyBKfKzFy9g+Iqsm9lzCfbat32B5e3t5IDxngX5x88XJbjaX8L92GmQPL2LBNgL98sUl3aqoBQMddpcfQP\/y7evN3RHoi2xEZ9e3t3d026uJcjkGvZ4JYDisPs31CFwdmEYoXNaeYZpFuKmLqnL9Gs2zkwUO9WPU8ZEpIcdFmFpPbNPED0CsprRazSrfQsK3M0HPZqaeNk8S0bOQGsAj0CfWrO6olcu1Yz3UhqDn1k7EQGeiJ4tdH3GTi0eYpSZBr9XMhbXL863ck1xfgQI4WOnLe15PsAH0qMBHwgOZXLYtPtzD2watNOF1RMoiX8ciaePbBmLHx4JTJTH4wCeysBDr43qQxj6cHExGY5JyOQH62OvDHSNjAyh19sTQk0rL5yywG2BnBEsNTIJwLPWGHQnbAxfQQjIbTIL+JOaA2LmQQr8w0V9\/B7ZNofeCfFglcaI4T\/IpUqpgNOuZGG2uV6YrEiFUOVPrO1NSnqQ42coOXmWRX0AMBNGC1hiBxgPoBev1udwI12vkkyXs0TFF0PNT7GUXBqsyJ6mHMcfd\/JZvdol5J8fKF6vw9FlDT7ccuPFoQpFyVODkEmt2R8tPLL8Rvdok23P6KlUZXmIrZXrSxn82XRMrqU8rOvCxyUqphsVEnZoAfseyOta4WmZhevdtL5FNw+9NjHeZrGhfZrOv8Pap7z3212trlv3jEtYj00DWH2X1XH2or7lYAGj0fTPx1\/Md4abM6bMk7sT3yekbMDDKXc\/qu7\/R1hP765nFxNsF5mQ8GWZ\/NkNA6Me3+nlgXRdfwlRIb30kDFXMDu4wSp+8EWFNlm10JkzUnXkaesOUBSWdVj1sNNBpXqORR9U\/YvzaacUs2OYjGQgXey8ZmJV03YcYCHEweN\/DZCFvaZloBSN8fwUfz+ngKn9aHtJwVo\/RK+nbbe+8go\/g7Vs+cYnbp5G2zH2Hpgm5VUC3cb69xjeInRrFHZyyeY4pQ+zy1cnKZXHtmH87PNGLT2KPHwL9cJE+D+kehwD9+PVJenFxZfgOQ2Rjnk3VQ5I3pLJETWSwPuavjwn+BjpTmc2PYWjpVCfi+Siq932FCO4neq84tjaaHnzyzjENlMvxi4rF8cdX401PXM59LCBuxmC5WZ\/f9utBPtEuoSkGjYxH4p4j2Z8k0tmlYRLzi0q3VOeiNmH97rrpIP0E8fKPFfBQOp9h7OjDu06WWnptO4H+q8WPzxz09PlhmUqUhyILLK70SYK6Zcw0zcLZAT9bAUPEryCxteKbpMcXbIn6ZI\/oqRNCuR4c0QfGoiHiDwPoc0NRPI\/SePBHQl9SuTF+nv+mBSWatUbifIQDGZF+hP2p4yqbswZdW4lHfAuKXaVYKldxeIxCoor51AtN6NmhQ0nY3hOXEfSYOGeE\/mvQFwQh29KvPfR\/WWQNVQXymjiJRsg\/uBLHrC+koJ\/sXMjPu+obIbdglDPj9igcX17Y94XrQmYbpvmNlv5RixtrmNM09s8MelFQzdpYTgPUTWSY1D\/4WoxIlEH5sx\/0AWE0rsafWCd4btBL4XTGfY9w+CLwO6yjoLyEAjnfGNR5tCZ5KjBG2lPza\/7rE1lOqhtZ49BbnNX2PojCMmmKri3nWYBmVuYsXj5xwvYlz\/9A+oSXG4uHW7nNCXbjt0lc\/GcstcHiKkOca5L37jsfkCeu5sdLav8QtHfy2EnFt0tkh892wvbrFV7SUjDjX7Gl\/wwINSmMa0yrQZpcwjnjbGLhI7JK7rpVBJChPgtCLg1lsAfJ4FFjI88YNZ412XpySNRDhCmPGVbqWLs1WFBPHgLbhy+z2Vcvpw+QbRjsOEGpiz3oOVifWuVQjSSi8EGmydATjOmxsXX3x84VpMKYXOnNm1ZGTheyjOrXLd\/BtjDJpEaI6kxuDoDVmdya0u90Fpm7unbT8IvHgUSPQH8Jr3Ic0DWRduCmWgT04phzngC99iYvxv6yaabBJPozZmiboC+Ia4+XqqbUCuWi3IEVRXfltt59J65OpFlbp84rEZc1gCmFwhNsUknU8LPH4nAmQ8\/mQ\/JFh3E8Cn0ugX4lXZXdzg7iSbjJiZdO9pH88VOzgSUku4ptEaZUoucNSBAdBUd8FNY75XaTK+QAYFdztExfh4QRd0cBm+iwfEIho1GJMwl6OWrmT4J+hDN3eHU1hV4H7Yi3CPpeiZe+pXwE\/IfHxPjZk1Jb5kkosUJTbdl7JGgbSfwWJ7ZB8nteFNbqnVK\/22pWKr4\/4hdWGiEuzF1ttrsHpY+OkmMGmYZ+NOhSjUK7Ow49\/BXDXs4x6DWrEzgnF8M5gg\/9oio++jByXRXHjoxlDOIJ5loAiWvNCbcSZqYFbWMJimOKOZnTSjbFyFtcRIj6oNS7vu5\/+HD6QdPBQalU6nTqNRQY8vI1VJOeJOt5cVnKNVZ2VotrKxsby\/sspbfPDzmUKLdBv8T+Gfv10suNozdrCbA7cd+MQK+05hRrlyc7L7fW14qrezi4Fr+ty+0sr8U+fLG\/x1eo\/eWjjeO1gbdXvT0\/3tg4Pr9Ie0O92FnHlU8nPc9I2vdoIKWqMTll2bLSOjlI1rfY7aD3\/+KEN4wJj7tB12myUsUU13nWlW\/b06Cntz9iZed4SydnbOLFLrJDIdnHfMnqUVYnjpDmaMTQP5T1SmtOe3zJrm5x6028XsRQvx1qh6HXytbxpj45l+i7FzqJBB4iNTgyuHJ+ZLg+s\/1kgfMksTUcl4x68Ft4Nq7hiCHo1UsdbJ8ki2Dt9SRe1+YIjBXFUZbJMnouBjblem4tF0OvA7l5BTDJ7xiKftTR77pT4wjD+FFeJbkhG1pEvUiTSHKcLi5Hjuw8SKL7AlKuaEfTNh35IqK+uB0PqlIPoV\/QS9YLHPp9ohewY+gJ3XihH6ueyQLzE9ArsZldSDJRUujjwILFhVy6hr4yEmsQ54Zsc1ZVcgirfNucuBPnmg4F6s4Fe78TBZ9Z+GAm5K1M1JoB+uxQFudFEqOxGAucOHn4ZTYNxXkK+jS4MGZzDf1S2k4uifNZGZzHf1fixnNJEkkuu6mDQEm+YbE7l8ThzIukbVZrj1aB+m+JponOWKWyUeh1ZNLyfpwWRkK5uH+pY+2PLvf3X8eRG69eFpMw2FUxJOunQL+m9dfDF3vZFPpBOzq88ySFPnu8vxPfvpjk\/L3afPF2PZvLntM9+AgH9OwNgtXmQ4YsCNX9vKJaMyKPUKjqdOVSQ88cqAPBFvgUjhtNlEvWNPl1XZY4++Jprl+KE2riMGGGnsNsuJ0if1pLoEd\/6xY5VyUOsbqg846yrzGTv0iDMZFrupBEncwFeoRQOndfCXrrYJI1OwL9WoLRgoaeUVp8qe0YzWlIPz7cSITvU7Jeh0+u0e\/7MfRKcBIWt7PG08hOAj0nKDC8ucXtpLM2WCPSyqUOY93BEyBUV2fYzYekQNlWrqE9Z\/i5HmvdGSmdNwH6fZHGnqVxaDlGVsYczFF6CGLSL\/6EwImbBZ8OoH8z1M5C7CLS0O8l8YIMvRZHy7oqA5vEgzjBbJrbNTfsUU7a6dYymRl3BJiVUAXAqzVdKc10vWUi9HbsPBhAHyOL6MY4JTlWF9OgyanQK6Wz2naHuF6iC3PDwZhHQ9BzbHBOQ\/8mNhTghNVPvDQI44wDA+eIPYmcguF\/RMXzuTI+BI6XL8PPnAa9fgb0TG8GPMe0OQP0LydAP97O1hTodxLoU3SW9DyQ0sYcC1chYF4WlF\/DnsdzhB5eHzLV6j5KmSav8rnQa71mfzeh1+IpgaN0GDlPIQOBszPWzu4U6PeSiVlKoWW9nm0GV85zIUwZpgHDqhnmvbmq97xdWyZquqabRvPMDD3HSMdfxqoxPcH1Wq7zwQH0+9nhtFhNk6DfZbWek0h2MQspHTc\/HO4j\/5twsynQE\/bYlQV5InMVOAjiDIKoLwzXeHSaHYdeJ4ms7q3EcfeLXL9j+xJ\/5NPQH8ZR7dsv4sQTkbRzxO3sH61OhT5OW185Ke6TXv8GlWD0FMxX7saLv3MT97pOsG0bvXCGqhOfQSg0YuU7XLVudq5\/HaccoLJJQWuKi0jMgyOMT0idxlOg1+kGY9Ysp60sZl9yO+tcP3kS9HExi1gTyua2lZ7p6QnW+QmK84Te4AVV5RrSv9KJCnPifd4pL5+\/r2A3qeRpB07jAfQqUS75jIvEWcVJmKuc8JfT6ah63I\/K+li2uANZ7+p6fYknRkOPVnO5pJ1dMQ49\/fpqe3B3VmgWsi9Jz7mIe5CdO\/O0qFKypSkqVySdvQk+yC+hqIX9T4aVy7i2SXEi9ErEWRyxzX445OTKcsJUwvVywPWSoId\/C\/U4pDbKuIWFJIM1TleMPWPZbFEU4n5LoM8x16fpWHzaFjvo94eeYJGfYM6kbNMRsKywZeYcsc9Hp2Ko4N9QRILS6RdrDD2Thh7r4pyewUUfkOGBHBQ41BDqB+gTNTN2uXMwyCJ\/PORLDnXVpi2tpeu8HG4ndo1toJxXfLGGnknnVKwhvYUrQq3HLvzL2KeHJYDDr1AUVfJe9a0a75EzP+SpG0vG0KbUh0s7RG8wa6lzfF6C2vGWP3EWB3HtLvfJm9140faEszWyRzuvi3p1iU8+j1uj\/0GPVPRhZ2kpjpx68WZja\/2wyBpOWtbuZG\/QDmQ9PwpfcfEGD7UUoxrf7\/iymKwbxwkvG0u7c1unGiEX2ciqHUHkzBH7fP7WkcZnFrB\/uDY65cuEK4e+bA4miJjkhEj+SR\/\/0H3HYFkhnr4bwQqdJ\/SozDKLTjD9nNGag4+1FVeZxD\/uyVLqkHzs8j8\/UNYg6G27YBsfavNV7716dVqaymMofhHbSbm7d6w9ZShR9DA3ZVI53kf79KtGW7ts00ppfAi5wiuKJc4F+rA6ss01bz+iy2diq73xcJERSsBwyeKekmfE0T8c8WYPzoC\/LDX\/pM0AAAywSURBVE4hXp6QtJU2PxwX8mjw3x8R5y6la3YjSPsHRXf\/O8rnwxvsA5PcQLlxP9CrIvVqph13FA1IJSb3kaFD4uCiS6vvSFnc4nyf7NocY3W\/LknbpMf\/EKEwkTdlF43PhN4LmyJlLXiPpe3YCF8DkzocMPsUKVO4inf3mfTIAN9GnUI1nIWB5Ob1+UXOfH0C+5i20a2hFtp8uB7Qp1KF5Av+K8B8VorMuFkytaSotLr9n+uTKyUhABqqscmbViW3EWL34hnhDrJFAYnI7RB27TxkfQx9HCNo6J1VTYeId6MqPJZVnlL\/3mo0rE+TfjKpHdvkIGf1vHcnJEHsOgRQK5y2a89nYx9WVVq+ERH4ZvW0dHt7+\/F\/2\/82DXcmxbMfksZbm8j1klnFrxq6ssbIb99eEtgjxLuiGShbX63PScO0uN5IegO72gl5a00aU\/cfERn4WFp5TF2UuPMmcr2QfrVbqv+P7zoPth7ghJjnsiuzireRVgW70olQa\/eLJ1urXrHTVDjTroYBSsHogiK1CvbuMcGfyBQ1MJsi71lBDzJMGix0KYmkf0WelYk+Cd60kLd\/VijQIG1XuU4njKzMla8cWTB0oL4yMSujsjyKr2F6kXPNCPua5BbohZ0eSn1\/sR8zf+UYbjr2nV\/yuro69WvG+t2nAWbynu3S5roKhh3H62MXXJqDDbtAo7D\/\/sfrbgvlF1zIFSxpYuNhmjZM6depGxsdny6g2RtdJrn8O4xz6j2ay6HBus9mUzIE5winG3I08ZdB75WEMbBWujXUYgjv\/tE96ISe5ZOxZJN2QmxacHhbTsnbOpNKxDlDhDtyKAzHIf3SNBxs+wz1iHfmpM6i6wh6esJbByoo+sW1UdKHBBk1bFC\/UmeR9vNskEeisltQWK8NvlTHzLe5Uohu2Cwh+Ds8xcqV0+xxOCwqCCrhOD7pKtQR2GqbNCKoQqbj+6ZJRh71iRK+A3uVvmsFyUSeHHWFX0fkQ8fBYg9v8Yk9hUze9oC6yXVubnzM5cYz2SEYg1UiGKXyYzjDLgGPkVXD5uIJ0xGLUldaKOALxaTqQC00qBd+6NzedkqnpKgQt0qoi6J6imOdftNRTqXZ\/nvnnzQU9A+\/kYZUbhLUBedTNyD28H7qfmpXWmefPnX7LVu5ZqHSbp+etgz\/t4OD35pKieeieLI3BPamME7DL5xmrxwl0pqL\/p3Fmr4BSS7tAoSNbTavakibCALrvlcpFGzUF6n07i3s996w7vui\/Lcwk7c+UqdIt\/LxPuJ9PqKPFdf2Qy7k06Cp+\/7sY9TwsDsKJoRSw\/KiU\/HPf139z7\/+47viscLw3xRhWGM8Uw80b8PMZ2xoPU5RH8t36Sx7h12F8\/W2CevfllzD5fS91+B6MHD4\/PLvgnSkbNYDj0uYeth+oI\/qatZvJHvc6pWVVKsm3QnpSBmunww3XTfzE+msYYWmWf\/KC+iT\/59K\/e7sf5vq+ezNzCYQPFs0+P0DuBWQvc\/L3LNizrWqSa5XaIIcOL7KDXjmvNpd14eKQsjbNxEygKL6uxBVAoJbs2DLSh1VkZEtRLzbFF1Us8v3TEWSHTN\/rR5i5yWvZFYizsLDntuZin9P\/eXdN1VBVGvYW1s4\/\/l3\/ar6zyp0zD8PzS+g6i2j4zW8\/PR9IscJAQlBEJVN+IjTFcLqe4gR7BZfK1dI6ZQFTJPEsl3T+He9gZiplus6PYiffPix3Wrf3Tfdf3kEsFemTumHgReEZ47TR+G2+4pfvuZs9\/p1r+eLHvTWTJ\/udprxgqhtmu3frn\/9sefQ9Pxt1pZ5nMhuITUzrok50z5sA84PwqosFETqUTREu4bN4xEJm6\/1oZa0Qmx72HFc6Z6FAUmMjw522+N6VAaZBE7LV2foeoKe5AtSjw4gESG6Gn3TpJmbuq5jklZgN+8tEl23vnA6NBBCR9pmu9zr+7Aano3EGSLbJvCqpXuM7GCWTUpiCvINKzo1uP5f8uI2iiFr2UW\/05BQ4iAEdKeojEliJmjk6744hQ2d7zjYN0XRf80IsqhsiLMokw9qTTKAnT6yFetkzdZ1oBWpO2RecSHrqqpE9ABlWGmGa2KKNd1nYs2OkiILXRhNkjrBlLTyKSzvWbcOqStYKYmhd8isrxzUQxRfoHkyOlNmD13h3ShiTKeDERFWjB6JJM\/qQgsis5Sg5+4pG0afDI2MdVci+h3htKFZcMiatbyeCbVIHYR020ZbtCNktPBkor0Ihngmev0oEeOaLtkuLZLFsweKwPtzVXVQsGIw2OkjDaFKtx4R8iTNb02COwiC8EbYBWl2kJwe3hAjo19uJKwrYl23FWHSJujLEOxYxIFNTGMnrBRIvaQB1OOx5TZJCc1QP5RI2b91CtKGruDGTornR\/TohACKKjrteohg5IHQ0R0xJoTiXNqGVWuy51ANnMZkpiqbFBCn+561kvuK8w5hsQQ9iQ6zhC32ajcG9tqD3IBlh8yLVogs9bIwex42QkGYlsc501FF+e9RVwayniYOp4Mpqf5vGlb5LhnFMB5g3dpzrmX1R5HmWaCmnPa7EEn7XMHYiuvfp0LI0tnkeWZJkhxNEgKjs5thujbXczGapB56wX3TfGdlGiS+6Rigb2At16wHjUxASqXC5gMuHBqQT4A+z8noQb3+e71+V3\/X8d1KDftzdEw4Kk3xAWFEmX9E8FUbD97hmRIxv1Sk9zVL9xm2JvNx2e5hdgehY0jJC+tVUSiMTW40bZrShp\/M\/Jgn8UUzZonO9jwSLvD\/QuknS+BHlGIPP+juJuUE0GPrJuOU9PYgbPq+47MfxzGFH6Ja3kdUaTNs1Pdhl3Qm0xkvg\/SMCVuEm\/AWVvtXoS6drmsic\/H0uJoC\/iX1peHVrn0svIxZMmbLd+EgotnxDknN91VRJjne8E7RK5UQe5yQhtNHQZj8774hHQN1xVvgeqtnYqcJOuVakPjGsi49Dcl6+LU\/chEkEivoPVjBYft5LVI9StKGn5wr5vqtMuxJdmrGJfCtRObnsYdtdNskfjVs1xl9f6fz+5mP4e9\/IA0dtq57FpHpZd05ZPKeMfQl06iGvMc5GUnKNZtNCBzqZoLXRzxupnbG\/nfDP7sRolLDbmZ1H3LMsFU7wqgjg9eXz1KnmUjQEiGrsYgoTL91fVeLNJsn4WooGAJvQ9RpOQg+MA01FmxJpmtYL334cHAXYiPDoCfgbycZFZUdVa3zKnpLSecjdkLJRPWDDwed+1PqE3z9SGOuz\/XCwlKr1Wof1KM2NfkeZfijg2a7ZShbICcMK\/o98deRN4Jr7GLtFhswE48Jp9Lu1cMwyqdEakhYq59WHJOEtMsO4VEAYPNYKJbD1n\/+fdUtGN2IhwuU\/cxPGQ\/+SeoFKPZkH4HHSU2vQaP56EjXv4oCODPCMKzRRA6nwy1ORImerqtMmkM8KEBR85nHJ4wQ1kXp5UiEuljIMxFfANnTPeh1OnWid51Oqdvyoce7oqCg0o3XsfeRKwe3I6zZTK2FdRJRfq99FNDWw3qFg9Ka9dDjnYg9r3YmuiEEGxR1t1KHzMHu5nCj3dAznUbwuln56AzrVqrdwNe6\/\/gmln8ZMhwfpIXrYxq08zGM2BwiKXXfacLosaXTDUnwN5D\/E5Ur+kS7chDew6b1ov87E\/0oqoXRlVMwHUU\/hLwxSqMW1R1XKr8UIWCL+gFDUlQxYZAN4M6w3dBzJxI9Lq9Wz1CLVPnVbq9zRdQ5bTpmQXLZdeGf\/b3TeUdjpmrGtg8pU5Wzg16vVO5WHfvm9LT7ods2ESXomtV2udPpfOx1qz6NENt2zkqd29tS30c0IXarz1tRkyyx74Pr7dk2l0HAkuIhwkurBckyCwaDwfFoBF0haVGHDXPgRyy1EfyByRsFxjl6jYYM9Ete2XWoHRtxCs5HkvWhb9vqObqJ\/wuSs2XyYuFarw2aOjoGfk1E1EiUxxSoHp42KPVwgr8fmhJvUsDRsS4MLS5vquwCz+QF6hZFHYIonSq80iVhPG8DdmbikrozrX5i0cTlVTC6wAT+wkQFBYNDa4x0owIEzcfdk0SQwT6TXGATKjzWaRElhWQYhBvQ9wICP8QBgnxaCMf\/68t6ke7v8PSJimcF5mguAsuxZBx2LGyIbSHSkGRlc3wZtCVBiCKcxuXoHIUOYl+kYvuao5eVHjjK9Ot6VVI+ttXHX4tmVOXiusc8NXBvwS3MwdlYuLZT\/zJXrRZIriPxbSBEgpMg9CEDM4Sh7TUleGc+\/kzjQrRJg\/LuoPk8l8ibvwhhzSqwwmvSg+T3wvTfCKlWRMZs2JSIlP0uZP23Qsrt9q6vr3s+ioh\/uz6c\/weeE3wwxOGvNwAAAABJRU5ErkJggg==)","db985025":"## Loading Libraries\nAll Python capabilities are not loaded to our working environment by default (even they are already installed in your system). So, we import each and every library that we want to use.\n\nIn data science, numpy and pandas are most commonly used libraries. Numpy is required for calculations like means, medians, square roots, etc. Pandas is used for data processin and data frames. We chose alias names for our libraries for the sake of our convenience (numpy --> np and pandas --> pd).","df396ca2":"If you notice, a lot of dummy variables are created like; **P_emaildomain_hotmail.com, P_emaildomain_hotmail.de,** etc.","b61106e2":"Notice, now we don't have any column with missing value.","24938b62":"The count of both the classes are equal."}}