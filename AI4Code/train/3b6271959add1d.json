{"cell_type":{"b737235e":"code","0f592867":"code","c1d4ad22":"code","42bd6dd8":"code","bc115d95":"code","29a9d454":"code","2e44d4f4":"code","c31c3850":"code","85a2ab02":"code","27a16148":"code","5b6d2d28":"code","eb9e335e":"code","22010d44":"code","edc57e7a":"code","388889e7":"code","55bcee63":"code","4be21ed6":"code","dda4160e":"code","5256eb59":"code","bb54a01d":"code","b13391b7":"code","99103a1b":"code","e3518942":"code","f9742bcc":"code","eb539488":"code","1a88d114":"code","526b00bd":"code","7ba8339a":"code","67f27c92":"code","9fee210f":"code","eaf76573":"code","7870d588":"code","1d12b795":"code","4e0c813e":"code","00c6a430":"code","913ff54c":"code","0bdc512d":"code","caa7c741":"code","dd73335c":"code","ad215c56":"code","79b33ad3":"code","39ea6713":"code","a954dd80":"code","8e86ff68":"code","47d99ded":"code","7aac9a8c":"code","2f71c973":"code","96fafa96":"code","eb6cb415":"code","df2fd734":"code","1c33c613":"code","e9f17c2e":"code","c719cd77":"code","7e85178b":"code","df9bf359":"code","f5b5b4cd":"code","44cfe301":"code","31eeade3":"code","29d49c9e":"code","e01a258b":"code","a5ec8a9f":"markdown","f400db5b":"markdown","3a0afb42":"markdown","f30fef3e":"markdown","e39673ca":"markdown"},"source":{"b737235e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","0f592867":"import matplotlib.pyplot as plt\nimport re\nimport time\nimport warnings\nfrom nltk.corpus import stopwords\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.preprocessing import normalize\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.manifold import TSNE\nimport seaborn as sns\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics.classification import accuracy_score, log_loss\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.linear_model import SGDClassifier\n#from imblearn.over_sampling import SMOTE\nfrom collections import Counter\nfrom scipy.sparse import hstack\n#from sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.svm import SVC\n#from sklearn.cross_validation import StratifiedKFold\nfrom sklearn.model_selection import StratifiedKFold\nfrom collections import Counter, defaultdict\nfrom sklearn.calibration import CalibratedClassifierCV\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nimport math\nfrom sklearn.metrics import normalized_mutual_info_score\nfrom sklearn.ensemble import RandomForestClassifier\nwarnings.filterwarnings(\"ignore\")\nfrom mlxtend.classifier import StackingClassifier\nfrom sklearn import model_selection\nfrom sklearn.linear_model import LogisticRegression","c1d4ad22":"!pip install patool","42bd6dd8":"!pip install pyunpack","bc115d95":"from pyunpack import Archive\nArchive('\/kaggle\/input\/msk-redefining-cancer-treatment\/stage2_test_variants.csv.7z').extractall('\/kaggle\/working')","29a9d454":"Archive('\/kaggle\/input\/msk-redefining-cancer-treatment\/stage2_test_text.csv.7z').extractall('\/kaggle\/working')","2e44d4f4":"df=pd.read_csv('\/kaggle\/input\/msk-redefining-cancer-treatment\/training_variants.zip')\ndftest=pd.read_csv('\/kaggle\/working\/stage2_test_variants.csv')","c31c3850":"df.head()","85a2ab02":"dftest.head()","27a16148":"print('Train Number of data points:', df.shape[0])\nprint('Train Number of features:',df.shape[1])\nprint('Train Features:',df.columns.values)\n\nprint('Test Number of data points:', dftest.shape[0])\nprint('Test Number of features:',dftest.shape[1])\nprint('Test Features:',dftest.columns.values)","5b6d2d28":"dftext=pd.read_csv('\/kaggle\/input\/msk-redefining-cancer-treatment\/training_text.zip', \n                   sep='\\|\\|', names=['ID', 'TEXT'], skiprows=1, engine='python')\ndftesttext=pd.read_csv('\/kaggle\/working\/stage2_test_text.csv', \n                   sep='\\|\\|', names=['ID', 'TEXT'], skiprows=1, engine='python')","eb9e335e":"dftext.head()","22010d44":"print('Number of data points:', dftext.shape[0])","edc57e7a":"dftesttext.head()","388889e7":"print('Test Number of data points:', dftesttext.shape[0])","55bcee63":"# loading stopwords from nltk library\n\nstop_words=set(stopwords.words('english'))\n\ndef nlp_preprocessing(total_text, index, column, cat):\n    if type(total_text) is not int:\n        s1=\"\"\n        total_text = re.sub('[^a-zA-Z0-9\\n]', ' ', total_text)\n        # replace multiple spaces with single space\n        total_text = re.sub('\\s+',' ', total_text)\n        # converting all the chars into lower-case.\n        total_text = total_text.lower()\n        for word in total_text.split():\n            # if the word is a not a stop word then retain that word from the data\n            if not word in stop_words:\n                s1 += word + \" \"\n        if cat=='train':\n            dftext[column][index] = s1\n        elif cat=='test':\n            dftesttext[column][index]=s1","4be21ed6":"#text processing stage.\nstart_time = time.clock()\nfor index, row in dftext.iterrows():\n    if type(row['TEXT']) is str:\n        nlp_preprocessing(row['TEXT'], index, 'TEXT', 'train')\n    else:\n        print(\"there is no text description for id:\",index)\nprint('Time took for preprocessing the text :',time.clock() - start_time, \"seconds\")","dda4160e":"#text processing stage  -  test data\nstart_time = time.clock()\nfor index, row in dftesttext.iterrows():\n    if type(row['TEXT']) is str:\n        nlp_preprocessing(row['TEXT'], index, 'TEXT', 'test')\n    else:\n        print(\"there is no text description for id:\",index)\nprint('Time took for preprocessing the text :',time.clock() - start_time, \"seconds\")","5256eb59":"#merging both gene_variations and text data based on ID\nresult = pd.merge(df, dftext,on='ID', how='left')\nresult.head()","bb54a01d":"result[result.isnull().any(axis=1)]","b13391b7":"result.loc[result['TEXT'].isnull(), 'TEXT']= result['Gene']+' '+result['Variation']","99103a1b":"result[result.isnull().any(axis=1)]","e3518942":"result['GV']=result['Gene']+' '+result['Variation']","f9742bcc":"result.head()","eb539488":"#merging both gene_variations and text data based on ID - Test data\nresulttest = pd.merge(dftest, dftesttext,on='ID', how='left')\nresulttest.head()","1a88d114":"resulttest[resulttest.isnull().any(axis=1)]","526b00bd":"resulttest.loc[resulttest['TEXT'].isnull(), 'TEXT']= resulttest['Gene']+' '+resulttest['Variation']","7ba8339a":"resulttest[resulttest.isnull().any(axis=1)]","67f27c92":"resulttest['GV']=resulttest['Gene']+' '+resulttest['Variation']","9fee210f":"resulttest.head()","eaf76573":"y_true = result['Class'].values\nresult.Gene = result.Gene.str.replace('\\s+', '_')\nresult.Variation = result.Variation.str.replace('\\s+', '_')\n# split the data into cv and train by maintaining same distribution of output\n#varaible 'y_true' [stratify=y_true]\nxtrain, xcv, ytrain, ycv = train_test_split(result, y_true, stratify=y_true, test_size=0.3)\n","7870d588":"print('Number of data points in train data:', xtrain.shape[0])\nprint('Number of data points in cross validation data:', xcv.shape[0])","1d12b795":"## Distribution of classes\n\ntrain_class_distribution = xtrain['Class'].value_counts().sort_index()\ncv_class_distribution = xcv['Class'].value_counts().sort_index()","4e0c813e":"my_colors = ['r','g','b','k','y','m','c']\ntrain_class_distribution.plot(kind='bar', color=my_colors)\nplt.xlabel('Class')\nplt.ylabel('Data points per Class')\nplt.title('Distribution of class in train data')\nplt.grid()\nplt.show()","00c6a430":"sorted_yi = np.argsort(-train_class_distribution.values)\nfor i in sorted_yi:\n    print('Number of data points in class', i+1, ':',train_class_distribution.values[i], \n      '(', np.round((train_class_distribution.values[i]\/xtrain.shape[0]*100), 3), '%)')","913ff54c":"## cross-validation data\n\nmy_colors = ['r','g','b','k','y','m','c']\ncv_class_distribution.plot(kind='bar', color=my_colors)\nplt.xlabel('Class')\nplt.ylabel('Data points per Class')\nplt.title('Distribution of class in cross validation data')\nplt.grid()\nplt.show()","0bdc512d":"sorted_yi = np.argsort(-cv_class_distribution.values)\nfor i in sorted_yi:\n    print('Number of data points in class', i+1, ':',cv_class_distribution.values[i], \n          '(', np.round((cv_class_distribution.values[i]\/xcv.shape[0]*100), 3),'%)')","caa7c741":"## to plot confusion matrix\ndef plot_confusion_matrix(test_y, predict_y):\n    C = confusion_matrix(test_y, predict_y)\n    A =(((C.T)\/(C.sum(axis=1))).T)\n    B =(C\/C.sum(axis=0))\n    labels = [1,2,3,4,5,6,7,8,9]\n\n    print(\"-\"*20, \"Confusion matrix\", \"-\"*20)\n    plt.figure(figsize=(20,7))\n    sns.heatmap(C, annot=True, cmap=\"YlGnBu\", fmt=\".3f\", xticklabels=labels, yticklabels=labels)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()\n    print(\"-\"*20, \"Precision matrix (Columm Sum=1)\", \"-\"*20)\n    plt.figure(figsize=(20,7))\n    sns.heatmap(B, annot=True, cmap=\"YlGnBu\", fmt=\".3f\", xticklabels=labels, yticklabels=labels)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()\n\n    print(\"-\"*20, \"Recall matrix (Row sum=1)\", \"-\"*20)\n    plt.figure(figsize=(20,7))\n    sns.heatmap(A, annot=True, cmap=\"YlGnBu\", fmt=\".3f\", xticklabels=labels, yticklabels=labels)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()","dd73335c":"# TFIDF vectorization of variation feature\nvariation_vectorizer_tf = TfidfVectorizer()\ntrain_variation_feature_tf=variation_vectorizer_tf.fit_transform(xtrain['Variation'])\ncv_variation_feature_tf = variation_vectorizer_tf.transform(xcv['Variation'])","ad215c56":"print('train variation feature TFIDF vectorized shape: ', train_variation_feature_tf.shape)\nprint('cv variation feature TFIDF vectorized shape: ', cv_variation_feature_tf.shape)","79b33ad3":"## Test \ntest_variation_feature_tf=variation_vectorizer_tf.transform(resulttest['Variation'])\nprint('Test variation feature TFIDF vectorized shape:', test_variation_feature_tf.shape)","39ea6713":"## TFIDF vectorization of Gene feature\ngene_tf_vectorizer=TfidfVectorizer()\ntrain_gene_feature_tf=gene_tf_vectorizer.fit_transform(xtrain['Gene'])\ncv_gene_feature_tf=gene_tf_vectorizer.transform(xcv['Gene'])","a954dd80":"print(\"Shape of train gene feature when tfidf vectorized : \", train_gene_feature_tf.shape)\nprint(\"Shape of cv gene feature when tfidf vectorized : \", cv_gene_feature_tf.shape)","8e86ff68":"# Test\ntest_gene_feature_tf=gene_tf_vectorizer.transform(resulttest['Gene'])\nprint(\"Shape of Test gene feature when tfidf vectorized : \", test_gene_feature_tf.shape)","47d99ded":"# building a TFIDFVectorizer for TEXT with all the words that occurred minimum 3 times \n#in train data,\n# and max features 6000 and taking 1gram to 5gram\n\ntext_vectorizer_tf=TfidfVectorizer(min_df=3, ngram_range=(1,5), max_features=100000)\ntrain_text_feature_tf=text_vectorizer_tf.fit_transform(xtrain['TEXT'])\ntrain_text_features=text_vectorizer_tf.get_feature_names()\nprint('total number of unique words in train data: ', len(train_text_features))\ntrain_text_fea_counts_tf=train_text_feature_tf.sum(axis=0).A1\ntext_fea_dict_tf=dict(zip(list(train_text_features), train_text_fea_counts_tf))\ncv_text_feature_tf=text_vectorizer_tf.transform(xcv['TEXT'])\n\n#print(train_text_fea_counts_tf)","7aac9a8c":"print(train_text_feature_tf.shape)\nprint(cv_text_feature_tf.shape)","2f71c973":"# Test\ntest_text_feature_tf=text_vectorizer_tf.transform(resulttest['TEXT'])\nprint(test_text_feature_tf.shape)","96fafa96":"# merging gene, variance and text features\n\n# building train, test and cross validation data sets\n# a = [[1, 2], \n#      [3, 4]]\n# b = [[4, 5], \n#      [6, 7]]\n# hstack(a, b) = [[1, 2, 4, 5],\n#                [ 3, 4, 6, 7]]\n\ntrain_gene_var_tf = hstack((train_gene_feature_tf,train_variation_feature_tf))\ncv_gene_var_tf = hstack((cv_gene_feature_tf,cv_variation_feature_tf))\n\ntrain_x_tf = hstack((train_gene_var_tf, train_text_feature_tf)).tocsr()\ntrain_y = np.array(list(xtrain['Class']))\n\ncv_x_tf = hstack((cv_gene_var_tf, cv_text_feature_tf)).tocsr()\ncv_y = np.array(list(xcv['Class']))","eb6cb415":"print(\"TFIDF features :\")\nprint(\"(number of data points * number of features) in train data = \", train_x_tf.shape)\nprint(\"(number of data points * number of features) in cross validation data =\", cv_x_tf.shape)","df2fd734":"## Test\ntest_gene_var_tf=hstack((test_gene_feature_tf, test_variation_feature_tf))\ntest_x_tf=hstack((test_gene_var_tf, test_text_feature_tf)).tocsr()\nprint('Test shape:', test_x_tf.shape)","1c33c613":"alpha = [10 ** x for x in range(-6, 3)]\ncv_log_error_array = []\nfor i in alpha:\n    print(\"for alpha =\", i)\n    clf = SGDClassifier(class_weight='balanced', alpha=i, penalty='l2', loss='log', random_state=42)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x_tf, train_y)\n    sig_clf_probs = sig_clf.predict_proba(cv_x_tf)\n    cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, eps=1e-15))\n    # to avoid rounding error while multiplying probabilites we use log-probability estimates\n    print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs)) \n\nfig, ax = plt.subplots()\nax.plot(alpha, cv_log_error_array,c='g')\nfor i, txt in enumerate(np.round(cv_log_error_array,3)):\n    ax.annotate((alpha[i],str(txt)), (alpha[i],cv_log_error_array[i]))\nplt.grid()\nplt.title(\"Cross Validation Error for each alpha\")\nplt.xlabel(\"Alpha i's\")\nplt.ylabel(\"Error measure\")\nplt.show()\n\n\nbest_alpha = np.argmin(cv_log_error_array)\nclf = SGDClassifier(class_weight='balanced', alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_x_tf, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_tf, train_y)\n\npredict_y = sig_clf.predict_proba(train_x_tf)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(ytrain, predict_y,  eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_tf)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(ycv, predict_y,  eps=1e-15))\n","e9f17c2e":"res = sig_clf.predict_proba(test_x_tf)","c719cd77":"res","7e85178b":"ids=np.arange(1, len(res)+1)","df9bf359":"line1='class1 class2 class3 class4 class5 class6 class7 class8 class9'\ns1=line1.split()\nprint(s1)","f5b5b4cd":"resdf=pd.DataFrame(res, columns=s1)","44cfe301":"resdf.head()","31eeade3":"resdf.insert(0,'ID',ids,True)","29d49c9e":"resdf.head()","e01a258b":"filename='cancer_treat_logistic.csv'\nresdf.to_csv(filename, index=False)\nprint('Saved file ',filename)","a5ec8a9f":"### Stacking the three types of TFIDF features","f400db5b":"### Apply Logistic Regression with CountVectorizer including both unigrams and bigrams","3a0afb42":"### Preprocessing of Text","f30fef3e":"### TFIDF vectorization - One hot encoding","e39673ca":"### Splitting data into train and cross validation (70:30)"}}