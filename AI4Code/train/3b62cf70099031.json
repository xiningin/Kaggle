{"cell_type":{"8a58f346":"code","b1317d80":"code","c9c4bf65":"code","6b9b4155":"code","4698f4e7":"code","d41bafcc":"code","b42daafa":"code","732e5080":"code","03256b5b":"code","e9fd4618":"code","73dfb7ec":"code","2399be59":"code","214ded31":"code","c0fc942c":"code","252cfb4e":"code","8116cbba":"code","a81baa45":"code","622150d5":"code","103667d7":"code","7c53f0a6":"code","83efcae9":"code","fa7452b1":"code","6fc4a40d":"code","6b5a8373":"code","21055b88":"code","e06e9bc9":"markdown","d0f33e45":"markdown","c12396a5":"markdown"},"source":{"8a58f346":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1317d80":"from keras.models import Model\nfrom keras.layers import LSTM,Dense,Input","c9c4bf65":"batch_size=64\nsamples=10000\nlatent_dim=256\nepochs=100","6b9b4155":"data_path=\"..\/input\/english-to-tamil-data\/tam.txt\"","4698f4e7":"input_texts = []\ntarget_texts = []\ninput_characters = set()\ntarget_characters = set()\nwith open(data_path, 'r', encoding='utf-8') as f:\n    lines = f.read().split('\\n')\nfor line in lines[: min(samples, len(lines) - 1)]:\n    input_text, target_text, _ = line.split('\\t')\n    # We use \"tab\" as the \"start sequence\" character\n    # for the targets, and \"\\n\" as \"end sequence\" character.\n    target_text = '\\t' + target_text + '\\n'\n    input_texts.append(input_text)\n    target_texts.append(target_text)\n    for char in input_text:\n        if char not in input_characters:\n            input_characters.add(char)\n    for char in target_text:\n        if char not in target_characters:\n            target_characters.add(char)","d41bafcc":"input_characters = sorted(list(input_characters))  #Sorting all characters of English \ntarget_characters = sorted(list(target_characters)) #Sorting all characters of Tamil\nnum_encoder_tokens = len(input_characters)          #No of charac's in English\nnum_decoder_tokens = len(target_characters)         #No of charac's in Tamil\nmax_encoder_seq_length = max([len(txt) for txt in input_texts])   #Sentence with max words in English\nmax_decoder_seq_length = max([len(txt) for txt in target_texts])  #Sentence with max words in Tamil","b42daafa":"print('Number of samples:', len(input_texts))\nprint('Number of unique input tokens:', num_encoder_tokens)\nprint('Number of unique output tokens:', num_decoder_tokens)\nprint('Max sequence length for inputs:', max_encoder_seq_length)\nprint('Max sequence length for outputs:', max_decoder_seq_length)","732e5080":"print(input_characters)","03256b5b":"print(target_characters)","e9fd4618":"print(input_texts)","73dfb7ec":"print(target_texts)","2399be59":"input_token_index = dict([(char, i) for i, char in enumerate(input_characters)])\n\ntarget_token_index = dict([(char, i) for i, char in enumerate(target_characters)])","214ded31":"print(input_token_index)","c0fc942c":"print(target_token_index)","252cfb4e":"encoder_input_data = np.zeros((len(input_texts), max_encoder_seq_length, num_encoder_tokens),dtype='float32')\n\ndecoder_input_data = np.zeros((len(input_texts), max_decoder_seq_length, num_decoder_tokens),dtype='float32')\n\ndecoder_target_data = np.zeros((len(input_texts), max_decoder_seq_length, num_decoder_tokens),dtype='float32')","8116cbba":"for i, (input_text, target_text) in enumerate(zip(input_texts, target_texts)):\n    for t, char in enumerate(input_text):\n        encoder_input_data[i, t, input_token_index[char]] = 1.\n    encoder_input_data[i, t + 1:, input_token_index[' ']] = 1.\n    for t, char in enumerate(target_text):\n        # decoder_target_data is ahead of decoder_input_data by one timestep\n        decoder_input_data[i, t, target_token_index[char]] = 1.\n        if t > 0:\n            # decoder_target_data will be ahead by one timestep\n            # and will not include the start character.\n            decoder_target_data[i, t - 1, target_token_index[char]] = 1.\n    decoder_input_data[i, t + 1:, target_token_index[' ']] = 1.\n    decoder_target_data[i, t:, target_token_index[' ']] = 1.\n# Define an input sequence and process it.\nencoder_inputs = Input(shape=(None, num_encoder_tokens))\nencoder = LSTM(latent_dim, return_state=True)\nencoder_outputs, state_h, state_c = encoder(encoder_inputs)\n# We discard `encoder_outputs` and only keep the states.\nencoder_states = [state_h, state_c]","a81baa45":"# Set up the decoder, using `encoder_states` as initial state.\ndecoder_inputs = Input(shape=(None, num_decoder_tokens))\n# We set up our decoder to return full output sequences,\n# and to return internal states as well. We don't use the\n# return states in the training model, but we will use them in inference.\ndecoder_lstm = LSTM(latent_dim, return_sequences=True, return_state=True)\ndecoder_outputs, _, _ = decoder_lstm(decoder_inputs,\n                                     initial_state=encoder_states)\ndecoder_dense = Dense(num_decoder_tokens, activation='softmax')\ndecoder_outputs = decoder_dense(decoder_outputs)","622150d5":"# Define the model that will turn `encoder_input_data` & `decoder_input_data` into `decoder_target_data`\nmodel = Model([encoder_inputs, decoder_inputs], decoder_outputs)\n","103667d7":"model.compile(optimizer='rmsprop', loss='categorical_crossentropy',metrics=['accuracy'])","7c53f0a6":"model.fit([encoder_input_data, decoder_input_data], decoder_target_data,\n          batch_size=batch_size,\n          epochs=epochs,\n          validation_split=0.2)","83efcae9":"model.save('tameng.h5')","fa7452b1":"\nencoder_model = Model(encoder_inputs, encoder_states)\n\ndecoder_state_input_h = Input(shape=(latent_dim,))\ndecoder_state_input_c = Input(shape=(latent_dim,))\ndecoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]\ndecoder_outputs, state_h, state_c = decoder_lstm(\n    decoder_inputs, initial_state=decoder_states_inputs)\ndecoder_states = [state_h, state_c]\ndecoder_outputs = decoder_dense(decoder_outputs)\ndecoder_model = Model(\n    [decoder_inputs] + decoder_states_inputs,\n    [decoder_outputs] + decoder_states)","6fc4a40d":"# Reverse-lookup token index to decode sequences back to something readable.\nreverse_input_char_index = dict(\n    (i, char) for char, i in input_token_index.items())\nreverse_target_char_index = dict(\n    (i, char) for char, i in target_token_index.items())","6b5a8373":"def decode_sequence(input_seq):\n    # Encode the input as state vectors.\n    states_value = encoder_model.predict(input_seq)\n\n    # Generate empty target sequence of length 1.\n    target_seq = np.zeros((1, 1, num_decoder_tokens))\n    # Populate the first character of target sequence with the start character.\n    target_seq[0, 0, target_token_index['\\t']] = 1.\n\n    # Sampling loop for a batch of sequences\n    # (to simplify, here we assume a batch of size 1).\n    stop_condition = False\n    decoded_sentence = ''\n    while not stop_condition:\n        output_tokens, h, c = decoder_model.predict(\n            [target_seq] + states_value)\n\n        # Sample a token\n        sampled_token_index = np.argmax(output_tokens[0, -1, :])\n        sampled_char = reverse_target_char_index[sampled_token_index]\n        decoded_sentence += sampled_char\n\n        # Exit condition: either hit max length\n        # or find stop character.\n        if (sampled_char == '\\n' or\n           len(decoded_sentence) > max_decoder_seq_length):\n            stop_condition = True\n\n        # Update the target sequence (of length 1).\n        target_seq = np.zeros((1, 1, num_decoder_tokens))\n        target_seq[0, 0, sampled_token_index] = 1.\n\n        # Update states\n        states_value = [h, c]\n\n    return decoded_sentence\n","21055b88":"for seq_index in range(100):\n    # Take one sequence (part of the training set)\n    # for trying out decoding.\n    input_seq = encoder_input_data[seq_index: seq_index + 1]\n    decoded_sentence = decode_sequence(input_seq)\n    print('-')\n    print('Input sentence:', input_texts[seq_index])\n    print('Decoded sentence:', decoded_sentence)","e06e9bc9":"**Creating the 3 dimensional array**\n\n(No of input text,Max sequence's length,No of lan's character)","d0f33e45":"**Vectorize the data**","c12396a5":"**Sampling models**"}}