{"cell_type":{"96575f5f":"code","9505d4b7":"code","ada09154":"code","fd506c86":"code","bdb87dbc":"code","0f450bf0":"code","dafee66f":"code","0214ee97":"code","e9ad3c1a":"code","759b8ca1":"code","1e1537f7":"code","95a51d10":"code","6a2e6ead":"code","33c702f5":"code","75d94fc3":"code","05eee2a0":"code","8f9b5b2d":"code","7823eec9":"code","be544021":"code","728864ee":"code","3ba640c9":"code","ef6d31cf":"code","909e4280":"code","940dd405":"code","348abd7a":"code","bd4bb6c2":"code","d10d4b75":"code","06809854":"code","9c6c6acb":"code","2629c26d":"code","33a5c5ee":"code","2c71dd55":"code","5a2952b0":"code","df7c9aa3":"code","a9e7820b":"code","cd9b0e46":"code","a0553c7f":"code","3fa8d7de":"code","47d9c4ae":"code","8f12edb3":"code","aa3fec06":"code","dd266563":"code","6ba0d518":"code","52cc6d0f":"code","7b08eacc":"code","e31307e2":"code","6a30b373":"code","fc23afc8":"code","94acff8c":"code","6fc8ecb1":"code","f95cb424":"code","f06a60e5":"code","8ad5bb60":"code","3dd751c2":"code","51dfec4e":"code","62c56564":"code","18a7473a":"code","c6762de3":"code","10b16998":"code","861f4c52":"markdown","0cdeffe9":"markdown","d1bb8076":"markdown","4796d972":"markdown","08e9c2fa":"markdown","d9f415dd":"markdown","15eb4198":"markdown","4ca9d9d1":"markdown","b3f6d5b5":"markdown","3889e0ec":"markdown","184b194e":"markdown","9de0051c":"markdown","27e23c25":"markdown","e9aa43c8":"markdown","9c4d379a":"markdown","774f790c":"markdown","3c4fe6a2":"markdown","28e2dadd":"markdown","6de4bbd7":"markdown","7f562151":"markdown","7de7071b":"markdown","24b46338":"markdown","03cc1765":"markdown","97212962":"markdown","910ee0d5":"markdown","34632b3d":"markdown","fa4762e4":"markdown"},"source":{"96575f5f":"import pandas as pd\nimport numpy as np\n\n# DRAGONS\nimport xgboost as xgb\nimport lightgbm as lgb\nimport catboost as cat\n\n# plots\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# pandas \/ plt options\npd.options.display.max_columns = 999\nplt.rcParams['figure.figsize'] = (14, 7)\nfont = {'family' : 'verdana',\n        'weight' : 'bold',\n        'size'   : 14}\nplt.rc('font', **font)\n\n# remove warnings\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\n# garbage collector\nimport gc\ngc.enable()","9505d4b7":"train = pd.read_csv('..\/input\/create-extracted-json-fields-dataset\/extracted_fields_train.gz', dtype={'date': str, 'fullVisitorId': str, 'sessionId':str, 'visitId': np.int64})\ntest = pd.read_csv('..\/input\/create-extracted-json-fields-dataset\/extracted_fields_test.gz', dtype={'date': str, 'fullVisitorId': str, 'sessionId':str, 'visitId': np.int64})\ntrain.shape, test.shape","ada09154":"train.head()","fd506c86":"train.columns","bdb87dbc":"# Getting data from leak\ntrain_store_1 = pd.read_csv('..\/input\/exported-google-analytics-data\/Train_external_data.csv', low_memory=False, skiprows=6, dtype={\"Client Id\":'str'})\ntrain_store_2 = pd.read_csv('..\/input\/exported-google-analytics-data\/Train_external_data_2.csv', low_memory=False, skiprows=6, dtype={\"Client Id\":'str'})\ntest_store_1 = pd.read_csv('..\/input\/exported-google-analytics-data\/Test_external_data.csv', low_memory=False, skiprows=6, dtype={\"Client Id\":'str'})\ntest_store_2 = pd.read_csv('..\/input\/exported-google-analytics-data\/Test_external_data_2.csv', low_memory=False, skiprows=6, dtype={\"Client Id\":'str'})","0f450bf0":"# Getting VisitId from Google Analytics...\nfor df in [train_store_1, train_store_2, test_store_1, test_store_2]:\n    df[\"visitId\"] = df[\"Client Id\"].apply(lambda x: x.split('.', 1)[1]).astype(np.int64)","dafee66f":"# Merge with train\/test data\ntrain = train.merge(pd.concat([train_store_1, train_store_2], sort=False), how=\"left\", on=\"visitId\")\ntest = test.merge(pd.concat([test_store_1, test_store_2], sort=False), how=\"left\", on=\"visitId\")\n\n# Drop Client Id\nfor df in [train, test]:\n    df.drop(\"Client Id\", 1, inplace=True)","0214ee97":"train.columns","e9ad3c1a":"# Cleaning Revenue\nfor df in [train, test]:\n    df[\"Revenue\"].fillna('$', inplace=True)\n    df[\"Revenue\"] = df[\"Revenue\"].apply(lambda x: x.replace('$', '').replace(',', ''))\n    df[\"Revenue\"] = pd.to_numeric(df[\"Revenue\"], errors=\"coerce\")\n    df[\"Revenue\"].fillna(0.0, inplace=True)","759b8ca1":"for df in [train_store_1, train_store_2, test_store_1, test_store_2]:\n    del df\ngc.collect()","1e1537f7":"target_sums = train.groupby(\"fullVisitorId\")[\"totals.transactionRevenue\"].sum().reset_index()","95a51d10":"plt.scatter(range(target_sums.shape[0]), np.sort(np.log1p(target_sums[\"totals.transactionRevenue\"].values)))\nplt.xlabel('index')\nplt.ylabel('TransactionRevenue')\nplt.show()","6a2e6ead":"train.date = pd.to_datetime(train.date, format=\"%Y%m%d\")\ntest.date = pd.to_datetime(test.date, format=\"%Y%m%d\")\ntrain.date.value_counts().sort_index().plot(label=\"train\")\ntest.date.value_counts().sort_index().plot(label=\"test\")\nplt.legend()","33c702f5":"def drawBars(columnname):\n    sns.barplot(x=\"count\", y=\"index\", hue=\"dataset\",\n        data=pd.melt(pd.concat([train[columnname].value_counts().rename(\"train\"), \n                       test[columnname].value_counts().rename(\"test\")], axis=1, sort=\"False\").reset_index(),\n            id_vars=\"index\", var_name=\"dataset\", value_name=\"count\"))\n\ndrawBars(\"channelGrouping\")","75d94fc3":"drawBars(\"geoNetwork.continent\")","05eee2a0":"ids_train = set(train.fullVisitorId.unique())\nids_test = set(test.fullVisitorId.unique())\nprint(\"Unique visitor ids in train:\", len(ids_train))\nprint(\"Unique visitor ids in test:\", len(ids_test))\nprint(\"Common visitors in train and test:\", len(ids_train & ids_test))","8f9b5b2d":"problem = train[train.sessionId.map(train.sessionId.value_counts() == 2)].sort_values([\"sessionId\", 'visitStartTime'])\nproblem.head(10)","7823eec9":"(train.visitStartTime == train.visitId).value_counts()","be544021":"train.loc[pd.to_datetime(train.visitStartTime, unit='s') == \"2017-04-25 18:49:35\"].head(8)","728864ee":"print(\"Train: \", np.bincount(train.visitId.value_counts()))","3ba640c9":"print(\"test: \", np.bincount(test.visitId.value_counts()))","ef6d31cf":"train.visitStartTime = pd.to_datetime(train.visitStartTime, unit='s')\ntest.visitStartTime = pd.to_datetime(test.visitStartTime, unit='s')\ntrain[\"date\"] = train.visitStartTime\ntest[\"date\"] = test.visitStartTime","909e4280":"train.set_index(\"visitStartTime\", inplace=True)\ntest.set_index(\"visitStartTime\", inplace=True)\ntrain.sort_index(inplace=True)\ntest.sort_index(inplace=True)","940dd405":"def clearRare(columnname, limit = 1000):\n    # you may search for rare categories in train, train&test, or just test\n    #vc = pd.concat([train[columnname], test[columnname]], sort=False).value_counts()\n    vc = test[columnname].value_counts()\n    \n    common = vc > limit\n    common = set(common.index[common].values)\n    print(\"Set\", sum(vc <= limit), columnname, \"categories to 'other';\", end=\" \")\n    \n    train.loc[train[columnname].map(lambda x: x not in common), columnname] = 'other'\n    test.loc[test[columnname].map(lambda x: x not in common), columnname] = 'other'\n    print(\"now there are\", train[columnname].nunique(), \"categories in train\")","348abd7a":"train.fillna(0, inplace=True)\ntest.fillna(0, inplace=True)","bd4bb6c2":"clearRare(\"device.browser\")\nclearRare(\"device.operatingSystem\")\nclearRare(\"geoNetwork.country\")\nclearRare(\"geoNetwork.city\")\nclearRare(\"geoNetwork.metro\")\nclearRare(\"geoNetwork.networkDomain\")\nclearRare(\"geoNetwork.region\")\nclearRare(\"geoNetwork.subContinent\")\nclearRare(\"trafficSource.adContent\")\nclearRare(\"trafficSource.campaign\")\nclearRare(\"trafficSource.keyword\")\nclearRare(\"trafficSource.medium\")\nclearRare(\"trafficSource.referralPath\")\nclearRare(\"trafficSource.source\")","d10d4b75":"# Clearing leaked data:\nfor df in [train, test]:\n    df[\"Avg. Session Duration\"][df[\"Avg. Session Duration\"] == 0] = \"00:00:00\"\n    df[\"Avg. Session Duration\"] = df[\"Avg. Session Duration\"].str.split(':').apply(lambda x: int(x[0]) * 60 + int(x[1]))\n    df[\"Bounce Rate\"] = df[\"Bounce Rate\"].astype(str).apply(lambda x: x.replace('%', '')).astype(float)\n    df[\"Goal Conversion Rate\"] = df[\"Goal Conversion Rate\"].astype(str).apply(lambda x: x.replace('%', '')).astype(float)","06809854":"for df in [train, test]:\n    # remember these features were equal, but not always? May be it means something...\n    df[\"id_incoherence\"] = pd.to_datetime(df.visitId, unit='s') != df.date\n    # remember visitId dublicates?\n    df[\"visitId_dublicates\"] = df.visitId.map(df.visitId.value_counts())\n    # remember session dublicates?\n    df[\"session_dublicates\"] = df.sessionId.map(df.sessionId.value_counts())","9c6c6acb":"for df in [train, test]:\n    df['weekday'] = df['date'].dt.dayofweek.astype(object)\n    df['time'] = df['date'].dt.second + df['date'].dt.minute*60 + df['date'].dt.hour*3600\n    #df['month'] = df['date'].dt.month   # it must not be included in features during learning!\n    df['day'] = df['date'].dt.date       # it must not be included in features during learning!","2629c26d":"df = pd.concat([train, test])\ndf.sort_values(['fullVisitorId', 'date'], ascending=True, inplace=True)\ndf['prev_session'] = (df['date'] - df[['fullVisitorId', 'date']].groupby('fullVisitorId')['date'].shift(1)).astype(np.int64) \/\/ 1e9 \/\/ 60 \/\/ 60\ndf['next_session'] = (df['date'] - df[['fullVisitorId', 'date']].groupby('fullVisitorId')['date'].shift(-1)).astype(np.int64) \/\/ 1e9 \/\/ 60 \/\/ 60\ndf.sort_index(inplace=True)\n\ntrain = df[:len(train)]\ntest = df[len(train):]","33a5c5ee":"for df in [train, test]:\n    df['source.country'] = df['trafficSource.source'] + '_' + df['geoNetwork.country']\n    df['campaign.medium'] = df['trafficSource.campaign'] + '_' + df['trafficSource.medium']\n    df['browser.category'] = df['device.browser'] + '_' + df['device.deviceCategory']\n    df['browser.os'] = df['device.browser'] + '_' + df['device.operatingSystem']","2c71dd55":"for df in [train, test]:\n    df['device_deviceCategory_channelGrouping'] = df['device.deviceCategory'] + \"_\" + df['channelGrouping']\n    df['channelGrouping_browser'] = df['device.browser'] + \"_\" + df['channelGrouping']\n    df['channelGrouping_OS'] = df['device.operatingSystem'] + \"_\" + df['channelGrouping']\n    \n    for i in ['geoNetwork.city', 'geoNetwork.continent', 'geoNetwork.country','geoNetwork.metro', 'geoNetwork.networkDomain', 'geoNetwork.region','geoNetwork.subContinent']:\n        for j in ['device.browser','device.deviceCategory', 'device.operatingSystem', 'trafficSource.source']:\n            df[i + \"_\" + j] = df[i] + \"_\" + df[j]\n    \n    df['content.source'] = df['trafficSource.adContent'].astype(str) + \"_\" + df['source.country']\n    df['medium.source'] = df['trafficSource.medium'] + \"_\" + df['source.country']","5a2952b0":"for feature in [\"totals.hits\", \"totals.pageviews\"]:\n    info = pd.concat([train, test], sort=False).groupby(\"fullVisitorId\")[feature].mean()\n    train[\"usermean_\" + feature] = train.fullVisitorId.map(info)\n    test[\"usermean_\" + feature] = test.fullVisitorId.map(info)\n    \nfor feature in [\"visitNumber\"]:\n    info = pd.concat([train, test], sort=False).groupby(\"fullVisitorId\")[feature].max()\n    train[\"usermax_\" + feature] = train.fullVisitorId.map(info)\n    test[\"usermax_\" + feature] = test.fullVisitorId.map(info)","df7c9aa3":"excluded = ['date', 'fullVisitorId', 'sessionId', 'totals.transactionRevenue', 'visitId', 'visitStartTime', \n            'month', 'day', 'help']\n\ncat_cols = [f for f in train.columns if (train[f].dtype == 'object' and f not in excluded)]\nreal_cols = [f for f in train.columns if (not f in cat_cols and f not in excluded)]","a9e7820b":"train[cat_cols].nunique()","cd9b0e46":"from sklearn.preprocessing import LabelEncoder\nfor col in cat_cols:\n    lbl = LabelEncoder()\n    lbl.fit(list(train[col].values.astype('str')) + list(test[col].values.astype('str')))\n    train[col] = lbl.transform(list(train[col].values.astype('str')))\n    test[col] = lbl.transform(list(test[col].values.astype('str')))","a0553c7f":"for col in real_cols:\n    train[col] = train[col].astype(float)\n    test[col] = test[col].astype(float)","3fa8d7de":"train[real_cols + cat_cols].head()","47d9c4ae":"for to_del in [\"date\", \"sessionId\", \"visitId\", \"day\"]:\n    del train[to_del]\n    del test[to_del]","8f12edb3":"excluded = ['date', 'fullVisitorId', 'sessionId', 'totals.transactionRevenue', 'visitId', 'visitStartTime', \"month\", \"help\"]\n\ncat_cols = [f for f in train.columns if (train[f].dtype == 'int64' and f not in excluded)]\nreal_cols = [f for f in train.columns if (not f in cat_cols and f not in excluded)]","aa3fec06":"from sklearn.metrics import mean_squared_error\ndef score(data, y):\n    validation_res = pd.DataFrame(\n    {\"fullVisitorId\": data[\"fullVisitorId\"].values,\n     \"transactionRevenue\": data[\"totals.transactionRevenue\"].values,\n     \"predictedRevenue\": np.expm1(y)})\n\n    validation_res = validation_res.groupby(\"fullVisitorId\")[\"transactionRevenue\", \"predictedRevenue\"].sum().reset_index()\n    return np.sqrt(mean_squared_error(np.log1p(validation_res[\"transactionRevenue\"].values), \n                                     np.log1p(validation_res[\"predictedRevenue\"].values)))","dd266563":"from sklearn.model_selection import GroupKFold\n\nclass KFoldValidation():\n    def __init__(self, data, n_splits=5):\n        unique_vis = np.array(sorted(data['fullVisitorId'].astype(str).unique()))\n        folds = GroupKFold(n_splits)\n        ids = np.arange(data.shape[0])\n        \n        self.fold_ids = []\n        for trn_vis, val_vis in folds.split(X=unique_vis, y=unique_vis, groups=unique_vis):\n            self.fold_ids.append([\n                    ids[data['fullVisitorId'].astype(str).isin(unique_vis[trn_vis])],\n                    ids[data['fullVisitorId'].astype(str).isin(unique_vis[val_vis])]\n                ])\n            \n    def validate(self, train, test, features, model, name=\"\", prepare_stacking=False, \n                 fit_params={\"early_stopping_rounds\": 50, \"verbose\": 100, \"eval_metric\": \"rmse\"}):\n        model.FI = pd.DataFrame(index=features)\n        full_score = 0\n        \n        if prepare_stacking:\n            test[name] = 0\n            train[name] = np.NaN\n        \n        for fold_id, (trn, val) in enumerate(self.fold_ids):\n            devel = train[features].iloc[trn]\n            y_devel = np.log1p(train[\"totals.transactionRevenue\"].iloc[trn])\n            valid = train[features].iloc[val]\n            y_valid = np.log1p(train[\"totals.transactionRevenue\"].iloc[val])\n                       \n            print(\"Fold \", fold_id, \":\")\n            model.fit(devel, y_devel, eval_set=[(valid, y_valid)], **fit_params)\n            \n            if len(model.feature_importances_) == len(features):  # some bugs in catboost?\n                model.FI['fold' + str(fold_id)] = model.feature_importances_ \/ model.feature_importances_.sum()\n\n            predictions = model.predict(valid)\n            predictions[predictions < 0] = 0\n            print(\"Fold \", fold_id, \" error: \", mean_squared_error(y_valid, predictions)**0.5)\n            \n            fold_score = score(train.iloc[val], predictions)\n            full_score += fold_score \/ len(self.fold_ids)\n            print(\"Fold \", fold_id, \" score: \", fold_score)\n            \n            if prepare_stacking:\n                train[name].iloc[val] = predictions\n                \n                test_predictions = model.predict(test[features])\n                test_predictions[test_predictions < 0] = 0\n                test[name] += test_predictions \/ len(self.fold_ids)\n                \n        print(\"Final score: \", full_score)\n        return full_score","6ba0d518":"Kfolder = KFoldValidation(train)","52cc6d0f":"lgbmodel = lgb.LGBMRegressor(n_estimators=1000, objective=\"regression\", metric=\"rmse\", num_leaves=31, min_child_samples=100,\n                      learning_rate=0.03, bagging_fraction=0.7, feature_fraction=0.5, bagging_frequency=5, \n                      bagging_seed=2019, subsample=.9, colsample_bytree=.9, use_best_model=True)","7b08eacc":"Kfolder.validate(train, test, real_cols + cat_cols, lgbmodel, \"lgbpred\", prepare_stacking=True)","e31307e2":"lgbmodel.FI.mean(axis=1).sort_values()[:30].plot(kind=\"barh\")","6a30b373":"def create_user_df(df):\n    agg_data = df[real_cols + cat_cols + ['fullVisitorId']].groupby('fullVisitorId').mean()\n    \n    pred_list = df[['fullVisitorId', 'lgbpred']].groupby('fullVisitorId').apply(lambda visitor_df: list(visitor_df.lgbpred))\\\n        .apply(lambda x: {'pred_'+str(i): pred for i, pred in enumerate(x)})\n    all_predictions = pd.DataFrame(list(pred_list.values), index=agg_data.index)\n    feats = all_predictions.columns\n\n    all_predictions['t_mean'] = all_predictions.mean(axis=1)\n    all_predictions['t_median'] = all_predictions.median(axis=1)   # including t_mean as one of the elements? well, ok\n    all_predictions['t_sum_log'] = all_predictions.sum(axis=1)\n    all_predictions['t_sum_act'] = all_predictions.fillna(0).sum(axis=1)\n    all_predictions['t_nb_sess'] = all_predictions.isnull().sum(axis=1)\n\n    full_data = pd.concat([agg_data, all_predictions], axis=1).astype(float)\n    full_data['fullVisitorId'] = full_data.index\n    del agg_data, all_predictions\n    gc.collect()\n    return full_data","fc23afc8":"user_train = create_user_df(train)\nuser_test = create_user_df(test)","94acff8c":"features = list(user_train.columns)[:-1]  # don't include \"fullVisitorId\"\nuser_train[\"totals.transactionRevenue\"] = train[['fullVisitorId', 'totals.transactionRevenue']].groupby('fullVisitorId').sum()","6fc8ecb1":"for f in features:\n    if f not in user_test.columns:\n        user_test[f] = np.nan","f95cb424":"Kfolder = KFoldValidation(user_train)","f06a60e5":"lgbmodel = lgb.LGBMRegressor(n_estimators=1000, objective=\"regression\", metric=\"rmse\", num_leaves=31, min_child_samples=100,\n                      learning_rate=0.03, bagging_fraction=0.7, feature_fraction=0.5, bagging_frequency=5, \n                      bagging_seed=2019, subsample=.9, colsample_bytree=.9,\n                            use_best_model=True)","8ad5bb60":"Kfolder.validate(user_train, user_test, features, lgbmodel, name=\"lgbfinal\", prepare_stacking=True)","3dd751c2":"xgbmodel = xgb.XGBRegressor(max_depth=22, learning_rate=0.02, n_estimators=1000, \n                                         objective='reg:linear', gamma=1.45, seed=2019, silent=False,\n                                        subsample=0.67, colsample_bytree=0.054, colsample_bylevel=0.50)","51dfec4e":"Kfolder.validate(user_train, user_test, features, xgbmodel, name=\"xgbfinal\", prepare_stacking=True)","62c56564":"catmodel = cat.CatBoostRegressor(iterations=500, learning_rate=0.2, depth=5, random_seed=2019)","18a7473a":"Kfolder.validate(user_train, user_test, features, catmodel, name=\"catfinal\", prepare_stacking=True,\n                fit_params={\"use_best_model\": True, \"verbose\": 100})","c6762de3":"user_train['PredictedLogRevenue'] = 0.4 * user_train[\"lgbfinal\"] + \\\n                                    0.2 * user_train[\"xgbfinal\"] + \\\n                                    0.4 * user_train[\"catfinal\"]\nscore(user_train, user_train.PredictedLogRevenue)","10b16998":"user_test['PredictedLogRevenue'] = 0.4 * user_test[\"lgbfinal\"] +  0.4 * user_test[\"catfinal\"] + 0.2 * user_test[\"xgbfinal\"]\nuser_test[['PredictedLogRevenue']].to_csv('leaky submission.csv', index=True)","861f4c52":"Cute function to validate and prepare stacking","0cdeffe9":"Weird \"double\" sessions:","d1bb8076":"Looking to future features (from https:\/\/www.kaggle.com\/ashishpatel26\/future-is-here):","4796d972":"# Used in this kernel:\n* preprocessed dataset by olivier https:\/\/www.kaggle.com\/ogrellier\/create-extracted-json-fields-dataset\n* exported google analytics data https:\/\/www.kaggle.com\/satian\/exported-google-analytics-data\n\n\n* story of a leak v.01 https:\/\/www.kaggle.com\/igauty\/story-of-a-leak-v01\n* future is here https:\/\/www.kaggle.com\/ashishpatel26\/future-is-here\n* teach-lightgbm-to-sum-predictions https:\/\/www.kaggle.com\/satian\/story-of-a-leak\/notebook\n\n\nThe code below is full of bugs, which I didn't remove as they seem to improve LB.","08e9c2fa":"Some pictures to have in mind: target distribution","d9f415dd":"Based on strange things in dataset:","15eb4198":"Function to tell us the score using the metric we actually care about","4ca9d9d1":"# Preparing validation","b3f6d5b5":"# Meta-models","3889e0ec":"Setting time as index and saving time as feature (for FE purposes only)","184b194e":"# User-level","9de0051c":"Basic time features:","27e23c25":"Make one user one object:\n* all features are averaged\n* we hope, that categorical features do not change for one user (that's not true :\/ )\n* categoricals labels are averaged (!!!) and are treated as numerical features (o_O)\n* predictions are averaged in multiple ways...","e9aa43c8":"VisitStartTime seems to be same thing as visitId... yet not always!","9c4d379a":"# Ensembling dragons","774f790c":"Clearing rare categories and setting 0 to NaNs:","3c4fe6a2":"# Encoding features","28e2dadd":"Seems to be a serious problem:","6de4bbd7":"Paired categories from \"teach-lightgbm-to-sum-predictions\" kernel","7f562151":"Key problem:","7de7071b":"# Looking around","24b46338":"User-aggregating features:","03cc1765":"# Loading data","97212962":"Suspicious simultaneous visitors with same visitorId and same visitStartTime:","910ee0d5":"# Preprocessing","34632b3d":"# Features","fa4762e4":"Comparing categories in train and test:"}}