{"cell_type":{"4f21b188":"code","996276c0":"markdown","70744dbd":"markdown"},"source":{"4f21b188":"# -*- coding: utf-8 -*-\nimport sys\nimport csv\nimport numpy as np\nfrom scipy.integrate import odeint\nfrom scipy.optimize import minimize\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\nimport random\nfrom datetime import datetime as dt\nimport datetime \nfrom decimal import Decimal, ROUND_HALF_UP\nimport re\n\nclass EstimationInfectedPeople():\n    def __init__(self, name, population, data, latent_period = 5.8, mortality_rate = 0.02):\n\n        self.name = name\n        self.population = population\n\n        self.timestamp = []\n        self.infected = []\n        self.deaths = []\n        self.recovered = []\n        self.confirmed = []\n        self.values = []\n        #self.deaths_confirmed = []\n        #self.recovered_confirmed = []\n        #self.delta_deaths = []\n        #self.delta_recovered = []\n\n        self.delta_deaths_divided_by_infected = []\n        self.delta_recovered_divided_by_infected = []\n\n        pre_deaths = 0\n        pre_recovered = 0\n        pre_infected = 0\n        for date, values in data.items():\n            #print(date)\n            self.timestamp.append(dt.strptime(date, '%m\/%d\/%Y'))\n            confirmed = int(values[0])\n            deaths = int(values[1])\n            recovered = int(values[2])\n            infected = confirmed - deaths - recovered\n\n            self.confirmed.append(confirmed)\n            self.infected.append(infected)\n            self.deaths.append(deaths)\n            self.recovered.append(recovered)\n\n            #self.deaths_confirmed.append(deaths\/confirmed)\n            #self.recovered_confirmed.append(recovered\/confirmed)\n\n            #self.delta_deaths.append(deaths - pre_deaths)\n            #self.delta_recovered.append(recovered - pre_recovered)\n\n\n            if pre_infected != 0:\n                self.delta_deaths_divided_by_infected.append((deaths - pre_deaths)\/pre_infected)\n                self.delta_recovered_divided_by_infected.append((recovered - pre_recovered)\/pre_infected)\n            else:\n                self.delta_deaths_divided_by_infected.append(0)\n                self.delta_recovered_divided_by_infected.append(0)\n\n\n\n            pre_deaths = deaths\n            pre_recovered = recovered\n            pre_infected = infected\n\n        self.max = len(self.timestamp)\n        self.dt = 0.01\n        self.time = np.arange(0, self.max, self.dt)\n        self.latent_period = latent_period\n   \n        self.mortality_rate = sum(self.delta_deaths_divided_by_infected)\/len(self.delta_deaths_divided_by_infected)\n        self.recovery_rate = sum(self.delta_recovered_divided_by_infected)\/len(self.delta_recovered_divided_by_infected)\n\n\n        print('self.mortality_rate',self.mortality_rate)\n        print('self.recovery_rate',self.recovery_rate)\n\n    def SEIR(self, vec, time, Beta):\n        # vec[0]: S:Susceptible\n        # vec[1]: E:Exposed\n        # vec[2]: I:Infected  \n        # vec[3]: R:Recovered  \n        # vec[4]: D:Died     \n        # \n        # Beta:Transfer coefficient\n        # Kappa:Transition rate\uff08E to I\uff09\n        # Gamma:recovery rate\n        # Tau:mortality rate\n        S = vec[0]\n        E = vec[1]\n        I = vec[2]\n        R = vec[3]\n        D = vec[4]\n        N = S+E+I+R+D\n        Kappa = 1\/self.latent_period\n        Gamma = self.recovery_rate\n        Tau = self.mortality_rate\n        return [-Beta*S*I\/N, Beta*S*I\/N-Kappa*E, Kappa*E - Gamma*I - Tau*I, Gamma*I, Tau*I]\n\n    def estimate(self, Beta):\n        vec=odeint(self.SEIR,self.initParams,self.time,args=(Beta,))\n        est=vec[0:int(self.max\/self.dt):int(1\/self.dt)]\n        return est\n\n    def estimate4plot(self, Beta):\n        multiple = 6\n        v=odeint(self.SEIR,self.bestInitParams,np.arange(0, self.max * multiple, self.dt),args=(Beta,))\n        est=v[0:int(self.max * multiple\/self.dt):int(1\/self.dt)]\n        return est\n\n    def func(self, params):\n        est_i=self.estimate(params[0])\n        return np.sum(est_i[:,2] - self.infected * np.log(est_i[:,2]))\n\n    def getRandLP(self):\n        a = random.normalvariate(self.lp, 5)\n        if a < 0:\n            a *= -1\n        return self.lp\n\n    def getEstimatedParams(self):\n        no_new_record_cnt = 0\n        max_fun = 0\n        bounds = [(0, None)]\n        initParams = [0.001]\n        step = int(self.confirmed[len(self.confirmed)-1]\/10)\n        for susceptible in range(self.confirmed[len(self.confirmed)-1], self.population,step ):\n            self.initParams = [susceptible, 0, np.min(self.confirmed), 0, 0]\n            estimatedParams = minimize(self.func,initParams,method=\"L-BFGS-B\", bounds=bounds)\n            if estimatedParams.success == True:\n                if max_fun < -estimatedParams.fun:\n                    no_new_record_cnt = 0\n                    max_fun = -estimatedParams.fun\n                    best_population = population\n                    self.bestEstimatedParams = estimatedParams\n                    self.bestInitParams = self.initParams\n                else:\n                    no_new_record_cnt += 1\n                    if no_new_record_cnt > 250:\n                        print('Susceptible:',susceptible, ' Score:',max_fun)\n                        break\n\n        return self.bestEstimatedParams\n\n    def plot(self, ax, estimatedParams):\n        self.plot_bar(ax)\n        self.plot_estimation(ax, estimatedParams)\n\n        ax.set_xlabel('Date',fontsize=20)\n        ax.xaxis.set_major_formatter(mdates.DateFormatter('%m\/%d'))\n        ax.set_title(self.name,fontsize=25)\n        ax.grid()\n\n    def plot_bar(self, ax):\n        width = 0.5\n        for day, infected, recovered, deaths in zip(self.timestamp, self.infected, self.recovered, self.deaths ):\n            bottom = 0\n            ax.bar(day, infected, width, bottom, color='red', label='Infectious')\n            bottom += infected\n            ax.bar(day, recovered, width, bottom, color='blue', label='Recovered')\n            bottom += recovered\n            ax.bar(day, deaths, width, bottom, color='black', label='Deaths')\n            bottom += deaths\n\n        ax.set_ylabel('Confirmed infections',fontsize=20)\n        handler, label = ax.get_legend_handles_labels()\n        ax.legend(handler[0:3] , label[0:3], loc=\"upper left\", borderaxespad=0. , fontsize=20)\n\n        return \n\n    def plot_estimation(self, ax, estimatedParams):\n        day = self.timestamp[0]\n        day_list = []\n        max = 0\n        estimated_value_list = []\n        for estimated_value in self.estimate4plot(estimatedParams.x[0])[:,2]:\n            if max < estimated_value:\n                max = estimated_value\n                peak = (day, estimated_value)\n\n            day_list.append(day)\n            estimated_value_list.append(estimated_value)\n            day += datetime.timedelta(days=1) \n            if estimated_value < 0:\n                break\n        ax.annotate(peak[0].strftime('%Y\/%m\/%d') + ' ' + str(int(peak[1])), xy = peak, size = 20, color = \"black\")\n        ax.plot(day_list, estimated_value_list, color='red', label=\"Estimation infection\", linewidth=3.0)\n\n        day = self.timestamp[0]\n        day_list = []\n        estimated_value_list = []\n        for estimated_value in self.estimate4plot(estimatedParams.x[0])[:,3]:\n            day_list.append(day)\n            estimated_value_list.append(estimated_value)\n            day += datetime.timedelta(days=1) \n            if estimated_value < 0:\n                break\n        ax.plot(day_list, estimated_value_list, color='blue', label=\"Estimation recovered\", linewidth=3.0)\n\n        day = self.timestamp[0]\n        day_list = []\n        estimated_value_list = []\n        for estimated_value in self.estimate4plot(estimatedParams.x[0])[:,4]:\n            day_list.append(day)\n            estimated_value_list.append(estimated_value)\n            day += datetime.timedelta(days=1) \n            if estimated_value < 0:\n                break\n        ax.plot(day_list, estimated_value_list, color='black', label=\"Estimation deaths\", linewidth=3.0)\n\n        ax.set_ylim(0,) \n\n        handler, label = ax.get_legend_handles_labels()\n        ax.legend(handler[0:6] , label[0:6], loc=\"upper right\", borderaxespad=0. , fontsize=20)\n\n        return \n\n    def print_estimation(self, estimatedParams):\n        print('<<' + self.name + '>>')\n        print('Beta:', Decimal(estimatedParams.x[0]).quantize(Decimal('.000000'),rounding=ROUND_HALF_UP))\n        print('Kappa:', Decimal(1\/self.latent_period).quantize(Decimal('.000000'),rounding=ROUND_HALF_UP))\n        print('Gamma:', Decimal(self.recovery_rate).quantize(Decimal('.000000'),rounding=ROUND_HALF_UP))\n        print('Tau:', Decimal(self.mortality_rate).quantize(Decimal('.000000'),rounding=ROUND_HALF_UP))\n\n\n    def save_plot(self,title=''):\n        output = 'new_coronavirus_' + self.name + '_' + title + '.png'\n        plt.savefig(output) \n\ndef convert_count_by_country(csv_data):\n    data = {}\n    for date, country, confirmed ,deaths, recovered in zip(csv_data['ObservationDate'], csv_data['Country\/Region'],csv_data['Confirmed'],csv_data['Deaths'],csv_data['Recovered']):\n        #print('1:',date)\n        if len(date) == 8:\n            #date = re.sub(\"[0-9]{2}:[0-9]{2}:[0-9]{2}\",\"\",date)\n            #print('1-1:', re.sub(r'(^[0-9]{2}\/[0-9]{2}\/)[0-9]{2}$',r'\\1',date))\n            #print('1-2:', re.sub(r'^[0-9]{2}\/[0-9]{2}\/([0-9]{2}$)',r'20\\1',date))\n            date = re.sub(r'(^[0-9]{2}\/[0-9]{2}\/)[0-9]{2}$',r'\\1',date) + re.sub(r'^[0-9]{2}\/[0-9]{2}\/([0-9]{2}$)',r'20\\1',date)\n        #print('2:',date)\n\n        if country not in data:\n            data.setdefault(country,{date:[0, 0, 0]})\n\n        if date not in data[country]:\n            data[country].setdefault(date, [0, 0, 0])\n\n        data[country][date][0] += float(confirmed)\n        data[country][date][1] += float(deaths)\n        data[country][date][2] += float(recovered)\n\n    return data\n\ndef read_csv(filename):\n    data = {}\n    with open(filename) as f:\n        reader = csv.reader(f)\n        header = next(reader)\n        for row in reader:\n            for cnt, name in enumerate(header):\n                if name not in data:\n                    data[name] = []\n                data[name].append(row[cnt])\n    return convert_count_by_country(data)\n\nif __name__ == '__main__':\n\n    ############################################################\n    # Read csv file \n    ############################################################\n    args = sys.argv\n    filename = \"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\"\n    data = read_csv(filename)\n    \n    \n    ############################################################\n    # Estimation infections in Italy\n    ############################################################\n    population = 60000000\n    fig = plt.figure(figsize=(20,10),dpi=200)\n    ax = fig.add_subplot(1, 1, 1)\n    fig.suptitle('Infections of a new coronavirus in Italy', fontsize=30)\n    Italy = EstimationInfectedPeople('Italy', population, data['Italy'])\n    Italy.plot_bar(ax)\n    Italy.save_plot('obcerved') \n\n    estParams = Italy.getEstimatedParams()\n    print(estParams)\n    Italy.print_estimation(estParams)\n    Italy.plot(ax, estParams)\n    Italy.save_plot('estimation') \n    ax.clear()\n    \n    \n    ############################################################\n    # Estimation infections in India\n    ############################################################\n    population = 52000000\n    fig = plt.figure(figsize=(20,10),dpi=200)\n    ax = fig.add_subplot(1, 1, 1)\n    fig.suptitle('Infections of a new coronavirus in India', fontsize=30)\n    India = EstimationInfectedPeople('India', population, data['India'])\n    India.plot_bar(ax)\n    India.save_plot('obcerved') \n\n    estParams = India.getEstimatedParams()\n    print(estParams)\n    India.print_estimation(estParams)\n    India.plot(ax, estParams)\n    India.save_plot('estimation') \n    ax.clear()\n\n    ############################################################\n    # Estimation infections in South Korea\n    ############################################################\n    population = 52000000\n    fig = plt.figure(figsize=(20,10),dpi=200)\n    ax = fig.add_subplot(1, 1, 1)\n    fig.suptitle('Infections of a new coronavirus in South Korea', fontsize=30)\n    SouthKorea = EstimationInfectedPeople('South Korea', population, data['South Korea'])\n    SouthKorea.plot_bar(ax)\n    SouthKorea.save_plot('obcerved') \n\n    estParams = SouthKorea.getEstimatedParams()\n    print(estParams)\n    SouthKorea.print_estimation(estParams)\n    SouthKorea.plot(ax, estParams)\n    SouthKorea.save_plot('estimation') \n    ax.clear()\n    \n    ############################################################\n    # Estimation infections in Japan\n    ############################################################\n    population = 120000000\n    fig = plt.figure(figsize=(20,10),dpi=200)\n    ax = fig.add_subplot(1, 1, 1)\n    fig.suptitle('Infections of a new coronavirus in Japan', fontsize=30)\n    Japan = EstimationInfectedPeople('Japan', population, data['Japan'])\n    Japan.plot_bar(ax)\n    Japan.save_plot('obcerved') \n\n    estParams = Japan.getEstimatedParams()\n    print(estParams)\n    Japan.print_estimation(estParams)\n    Japan.plot(ax, estParams)\n    Japan.save_plot('estimation') \n    ax.clear()\n\n    ############################################################\n    # Estimation infections in Mainland China\n    ############################################################\n    population = 1400000000\n    fig = plt.figure(figsize=(20,10),dpi=200)\n    ax = fig.add_subplot(1, 1, 1)\n    fig.suptitle('Infections of a new coronavirus in Mainland China', fontsize=30)\n    China = EstimationInfectedPeople('Mainland China', population, data['Mainland China'])\n    China.plot_bar(ax)\n    China.save_plot('obcerved') \n\n    estParams = China.getEstimatedParams()\n    print(estParams)\n    China.print_estimation(estParams)\n    China.plot(ax, estParams)\n    China.save_plot('estimation') \n    ax.clear()\n\n\n\n","996276c0":"![SEIR model chart](attachment:SEIR.png)","70744dbd":"![](http:\/\/)"}}