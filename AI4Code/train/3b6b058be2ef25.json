{"cell_type":{"8190bd9c":"code","d638b719":"code","7672d933":"code","25940501":"markdown","e49286cb":"markdown"},"source":{"8190bd9c":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# loading dummy submission file\nsub_file = pd.read_csv(r'..\/input\/tpsjan2021\/submission_blend_1.csv')\n\n# loading data including 14 best scores\ndf_sub = pd.read_csv(r'..\/input\/tpsjan2021\/best_blend_1.csv')\ndf_sub = df_sub.iloc[:, :14]\n\n# a rough correlation based visualization of 14 best scores\nplt.figure(figsize=(10,10))\nsns.heatmap(df_sub.corr(), cmap='Spectral')\nplt.ylabel('file index numbers')\nplt.xlabel('file index numbers')\nplt.show()","d638b719":"# basic analysis and visualization of subgroups in different color.\nplt.figure(figsize=(12, 5))\ndf_mean_corr = pd.DataFrame({'mean_corr': df_sub.corr().mean()})\ndf_mean_corr = df_mean_corr.sort_values('mean_corr', ascending=False)\ndf_mean_corr = df_mean_corr.reset_index()\n\nplt.plot(df_mean_corr.index[:6], df_mean_corr['mean_corr'].values[:6], 'o', ms=10)\nplt.plot(df_mean_corr.index[6:10], df_mean_corr['mean_corr'].values[6:10], 'o', ms=10)\nplt.plot(df_mean_corr.index[10:11], df_mean_corr['mean_corr'].values[10:11], 'o', ms=10)\nplt.plot(df_mean_corr.index[11:12], df_mean_corr['mean_corr'].values[11:12], 'o', ms=10)\nplt.plot(df_mean_corr.index[12:13], df_mean_corr['mean_corr'].values[12:13], 'o', ms=10)\nplt.plot(df_mean_corr.index[13:], df_mean_corr['mean_corr'].values[13:]+0.065, 'o', ms=10)\nplt.xticks([*range(len(df_mean_corr))], df_mean_corr['index'].tolist())\nplt.title('determination of sub_groups')\nplt.ylabel('a corelation ralated index')\nplt.xlabel('file index numbers')\nplt.show()","7672d933":"# a linear combination to achieve much better scores\ndf_sub['weighted_avg'] = abs(1 * (\n    -10 * ( 30 * df_sub['3'] + 30 * df_sub['4'] + 30 * df_sub['6'] + \n           50 * df_sub['8'] + 1 * df_sub['10'] + 1 * df_sub['11'] ) \/ 142 +\n    5 * ( 170 * df_sub['2'] + 20 * df_sub['7'] + 5 * df_sub['12'] + 1 * df_sub['13']) \/ 196 +\n    150 * ( 150 * df_sub['0'] + 50 * df_sub['1'] -10 * df_sub['5'] - 25 * df_sub['9']) \/ 165\n            ) \/ 145 )\n\n# create the final submission file\nsubmission = pd.DataFrame({'ID': sub_file.ID, 'target': df_sub['weighted_avg'].tolist()})\nsubmission.to_csv(r'submission.csv', index=False)","25940501":"# Blend Boosting study on Tabular Playground Series - Jan 2021:\n\nHere I share with you a systematic blend boosting study on Tabular Playground Series - Jan 2021. (https:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2021). I just collect some submission files on the kaggle.\n\nBasically, I start to analysis of correlations, then decide to sort them according to their sum of correlation values in between. This lets me divide ~14 scores into 3 subgroups. Then I make internal linear calibration in each subgroup by considering their scores on the Kaggle. If you spend much more time, you can always achieve much betters scores.","e49286cb":"### It gets a 0.69530 as public score, and looks the best score on Kaggle so far ;-)"}}