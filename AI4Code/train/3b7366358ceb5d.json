{"cell_type":{"ac47c5e4":"code","ffee8d8e":"code","7aba7527":"code","7dbdaa25":"code","11e15306":"code","e6cc904f":"code","b5e304d2":"code","a8ef7219":"code","b780c31d":"code","6334e6ce":"code","ed17748e":"markdown","1cad0435":"markdown","d5bd6da5":"markdown","1051987d":"markdown","c81d5024":"markdown","2cd523e9":"markdown"},"source":{"ac47c5e4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix  \nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.svm import SVC\nfrom sklearn import metrics \nimport warnings\nfrom sklearn import metrics\nwarnings.filterwarnings('ignore')\n%matplotlib inline","ffee8d8e":"def DataLoading (filename):\n    df=pd.read_csv(filename)\n    df.columns=[x.upper() for x in df.columns]\n    X=df.drop(\"OUTCOME\",axis='columns')\n    y=df[\"OUTCOME\"]\n    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=1\/3,random_state=42, stratify=y)\n    return X_train,X_test,y_train,y_test","7aba7527":"def LoadModel(X_train,X_test,y_train,y_test):\n    dt = DecisionTreeClassifier(criterion='entropy',max_depth=3, random_state=0)\n    dt.fit(X_train, y_train)\n    y_pred_dt = dt.predict(X_test)\n    print(\"###########   DecisionTreeClassifier   ###############  \")\n    print(\"Accuracy DecisionTreeClassifier :\", metrics.accuracy_score(y_test, y_pred_dt))\n    print(\"Confusion matrix DecisionTreeClassifier : \",confusion_matrix(y_test, y_pred_dt))  \n    print(\"Classification report DecisionTreeClassifier : \",classification_report(y_test, y_pred_dt)) \n    print(\"###########   END   ###############  \")\n    scaler = StandardScaler()  \n    scaler.fit(X_train)\n    X_train = scaler.transform(X_train)  \n    X_test = scaler.transform(X_test)\n    mlp = MLPClassifier(hidden_layer_sizes=(10,10), max_iter=1000,verbose=0)  \n    mlp.fit(X_train, y_train) \n    mlppredictions= mlp.predict(X_test)  \n    print(\"###########   MLPClassifier   ###############  \")\n    print(\"Accuracy MLPClassifier\", metrics.accuracy_score(y_test, mlppredictions))\n    print(\"Confusion matrix MLPClassifier\",confusion_matrix(y_test,mlppredictions))  \n    print(\"Classification report MLPClassifier\",classification_report(y_test,mlppredictions))  \n    print(\"###########   END   ###############  \")\n    svm_clf=SVC(kernel=\"rbf\",gamma=0.1, C=10,probability=True) \n    svm_clf.fit(X_train,y_train)\n    predictions_svm = svm_clf.predict(X_test)\n    print(\"###########   SVC   ###############  \")\n    print(\"Accuracy SVC\", metrics.accuracy_score(y_test, predictions_svm))\n    print(\"Confusion matrix SVC\",confusion_matrix(y_test,predictions_svm))  \n    print(\"Classification report SVC\",classification_report(y_test,predictions_svm))  \n    print(\"###########   END   ###############  \")\n    y_pred_probadt = dt.predict_proba(X_test)[::,1]\n    y_pred_probnn = mlp.predict_proba(X_test)[::,1]\n    y_pred_probasvc = svm_clf.predict_proba(X_test)[::,1]\n    return y_pred_probadt,y_pred_probnn,y_pred_probasvc","7dbdaa25":"def PlotROCCurve(y_pred_probadt,y_pred_probnn,y_pred_probasvc):\n    #y_pred_probadt = dt.predict_proba(X_test)[::,1]\n    fprdt, tprdt, _ = metrics.roc_curve(y_test,  y_pred_probadt)\n    aucdt = metrics.roc_auc_score(y_test, y_pred_probadt)\n    #y_pred_probnn = mlp.predict_proba(X_test)[::,1]\n    fprnn, tprnn, _ = metrics.roc_curve(y_test,  y_pred_probnn)\n    aucnn = metrics.roc_auc_score(y_test, y_pred_probnn)\n    #y_pred_probasvc = svm_clf.predict_proba(X_test)[::,1]\n    fprsvm, tprsvm, _ = metrics.roc_curve(y_test,  y_pred_probasvc)\n    aucsvc = metrics.roc_auc_score(y_test, y_pred_probasvc)\n    plt.plot(fprdt,tprdt,label=\"DecisionTreeClassifier, auc=\"+str(aucdt))\n    plt.plot([0,1],[0,1],'k--')\n    plt.legend(loc=4)\n    plt.plot(fprnn,tprnn,label=\"MLPClassifier ( NN ), auc=\"+str(aucnn))\n    plt.plot([0,1],[0,1],'k--')\n    plt.legend(loc=4)\n    plt.plot(fprsvm,tprsvm,label=\"SVM, auc=\"+str(aucsvc))\n    plt.plot([0,1],[0,1],'k--')\n    plt.legend(loc=4)\n    plt.show()","11e15306":"X_train,X_test,y_train,y_test=DataLoading(\"..\/input\/diabetes-orginal\/diabetes.csv\")","e6cc904f":"y_pred_probadt,y_pred_probnn,y_pred_probasvc=LoadModel(X_train,X_test,y_train,y_test)","b5e304d2":"PlotROCCurve(y_pred_probadt,y_pred_probnn,y_pred_probasvc)","a8ef7219":"X_train,X_test,y_train,y_test=DataLoading(\"..\/input\/diabetes\/Diabetes_pca.csv\")","b780c31d":"y_pred_probadt,y_pred_probnn,y_pred_probasvc=LoadModel(X_train,X_test,y_train,y_test)","6334e6ce":"PlotROCCurve(y_pred_probadt,y_pred_probnn,y_pred_probasvc)","ed17748e":"## After PCA ![image.png](attachment:e4c2ae21-e276-4df5-b4a0-2a10eb62ea1f.png)","1cad0435":"## Loading libraries","d5bd6da5":"## Before PCA  ![image.png](attachment:image.png)  ","1051987d":"## With out PCA","c81d5024":"## With PCA","2cd523e9":"## Data Import From CSV"}}