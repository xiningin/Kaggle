{"cell_type":{"bcd4d62b":"code","6b4a128b":"code","6b463504":"code","d5a86f32":"code","1ce62d3a":"code","659c72dc":"code","5103f464":"code","46543df3":"code","d92588bc":"code","c5b6f938":"code","af141a6e":"code","4b537a33":"code","874f0aba":"code","d31246d2":"code","fdafdd9f":"code","0d653342":"code","fcccf2ee":"code","d5c30df2":"code","f817ca32":"code","299896b9":"code","6ffaa83a":"code","446db90d":"markdown","4df46e8d":"markdown","b60f7fe4":"markdown","081f5913":"markdown","e6f1571a":"markdown","51d5df89":"markdown","941dcbaf":"markdown","edaa3eaa":"markdown","e66249f8":"markdown","27389152":"markdown","7baef817":"markdown","4b8c04af":"markdown","68361867":"markdown","30a7c286":"markdown","940fdaff":"markdown","0cdd5053":"markdown"},"source":{"bcd4d62b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport warnings as ws\nws.filterwarnings(\"ignore\")","6b4a128b":"df = pd.read_csv(\"\/kaggle\/input\/comic-characters\/dc-wikia-data_csv.csv\")\ndf.head()","6b463504":"print(df.isna().sum().to_frame())\nprint(df.shape)\n# df.drop(\"gsm\", axis = 1, inplace = True)","d5a86f32":"df[\"alive\"].value_counts()","1ce62d3a":"df[\"align\"] = df[\"align\"].fillna(\"bad characters\")\n\ndf[\"id\"] = df[\"id\"].fillna (\"publi identity\")\n\ndf[\"eye\"] = df[\"eye\"].fillna(\"blue eyes\")\n\ndf[\"hair\"] = df[\"hair\"].fillna(\"black hair\")\n\ndf[\"sex\"] = df[\"sex\"].fillna(\"male characters\")\n\ndf[\"alive\"] = df[\"alive\"].fillna(\"living characters\")\n","659c72dc":"# Marking the NA values as 0 for the seck of the analaysis\ndf[\"appearances\"] = df[\"appearances\"].fillna(0)\n\ndf[\"first appearance\"] = df[\"first appearance\"].fillna(0)\n\ndf[\"year\"] = df[\"year\"].fillna(0)\n\ndf[[\"appearances\", \"year\"]] = df[[\"appearances\", \"year\"]].astype(int)","5103f464":"print(df.isna().sum().to_frame())","46543df3":"top_appearances = df.sort_values(by= \"appearances\", ascending=False)[:10][[\"name\", \"appearances\"]]\n\nfig = px.bar(data_frame=top_appearances, x=\"name\", y=\"appearances\", color= \"appearances\", text = \"appearances\")\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(uniformtext_minsize=8, uniformtext_mode='hide', title_text =\"Most Appeared Superheros\", xaxis_title = \"The Superheros\", yaxis_title = \"Appearance Count\")\nfig.show()","d92588bc":"import plotly.graph_objects as go\n\ndf[\"id\"] = df[\"id\"].replace({\"publi identity\": \"public identity\" })\n\nidentity = df[\"id\"].value_counts().reset_index().rename(columns = {\"index\": \"identity\", \"id\": \"count\"})\n\nfig = go.Figure([go.Pie(labels=identity['identity'], values=identity['count'])])\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=15,insidetextorientation='radial')\n\nfig.update_layout(title=\"Identity status of Superhero\",title_x=0.5)\nfig.show()","c5b6f938":"publically_known_superhero = df[df[\"id\"] == \"public identity\"].sort_values(by=\"appearances\", ascending = False)[[\"name\", \"appearances\"]][:5]","af141a6e":"fig = go.Figure(go.Bar(\n    x=publically_known_superhero[\"name\"],y= publically_known_superhero[\"appearances\"],\n    marker = { 'color': publically_known_superhero[\"appearances\"], 'colorscale': \"darkmint\"},\n             text = publically_known_superhero[\"appearances\"],\n             textposition = 'outside'\n             \n))\n\nfig.update_layout(title_text= \"Top five publically known Superheros\", xaxis_title = \"Superheros\", yaxis_title = \"Count\")\n\nfig.show()","4b537a33":"publically_unknown_superhero = df[df[\"id\"] == \"secret identity\"].sort_values(by=\"appearances\", ascending = False)[[\"name\", \"appearances\"]][:5]\nfig = go.Figure(go.Bar(\n    x=publically_unknown_superhero[\"name\"],y= publically_unknown_superhero[\"appearances\"],\n    marker = { 'color': publically_unknown_superhero[\"appearances\"], 'colorscale': \"deep\"},\n             text = publically_unknown_superhero[\"appearances\"],\n             textposition = 'outside'\n             \n))\n\nfig.update_layout(title_text= \"Top five publically un-known(hiddent) Superheros\", xaxis_title = \"Superheros\", yaxis_title = \"Count\")\n\nfig.show()","874f0aba":"import plotly.graph_objects as go\n\nstatus = df[\"align\"].value_counts().reset_index().rename(columns = {\"index\": \"status\", \"align\": \"count\"})\n\nfig = go.Figure([go.Pie(labels=status['status'], values=status['count'])])\n\nfig.update_traces(hoverinfo='label+percent', textinfo='value+percent', textfont_size=15,insidetextorientation='radial', hole = 0.2)\n\nfig.update_layout(title=\"Character Status of Superhero (Good or BAD )\",title_x=0.5)\nfig.show()","d31246d2":"fig, ax = plt.subplots(1,2, figsize = (30,10))\ng = sns.barplot(data = df[df[\"align\"] == \"good characters\"][[\"name\", \"appearances\"]][:10], x= \"name\", y=\"appearances\", ax = ax[0], palette=\"Blues\")\ng.set_xticklabels(g.get_xticklabels(), rotation=20)\nax[0].set_title(\"Top 10 Good Characters\")\n\ng = sns.barplot(data= df[df[\"align\"] == \"bad characters\"][[\"name\", \"appearances\"]][:10],  x= \"name\", y=\"appearances\", ax = ax[1], palette=\"Greens\")\ng.set_xticklabels(g.get_xticklabels(), rotation=20)\nax[1].set_title(\"Top 10 BAD Characters\")\n\nplt.show()","fdafdd9f":"eye_type = df[\"eye\"].value_counts().reset_index().rename(columns = {\"index\": \"eye_type\", \"eye\": \"count\"})\nfig = go.Figure(go.Bar(\n    x=eye_type[\"eye_type\"],y= eye_type[\"count\"],\n    marker = { 'color': eye_type[\"count\"], 'colorscale': \"inferno\"},\n             text = eye_type[\"count\"],\n             textposition = 'outside'\n             \n))\n\nfig.update_layout(title_text= \"Distinct eye types of the Superheros\", xaxis_title = \"Eye types of superhero\", yaxis_title = \"Count\")\n\nfig.show()","0d653342":"sns.set()\nplt.figure(figsize= (30,10))\ntop_appearances_with_living = df.sort_values(by= \"appearances\", ascending=False)[:10][[\"name\", \"appearances\", \"alive\"]]\ng = sns.barplot(data = top_appearances_with_living, x=\"name\", y=\"appearances\", palette=\"inferno\", hue = \"alive\")\ng.set_xlabel(\"Superheros\")\ng.set_title(\"Living status oftop 10 superheros\", size = 20)\ng.set_ylabel(\"count\")\n\nplt.show()","fcccf2ee":"before_2000 = df[df[\"year\"] > 2000][[\"name\", \"appearances\"]][:5]\nfig = go.Figure(go.Bar(\n    x=before_2000[\"name\"],y= before_2000[\"appearances\"],\n    marker = { 'color': before_2000[\"appearances\"], 'colorscale': \"Blues\"},\n             text = before_2000[\"appearances\"],\n             textposition = 'outside'\n             \n))\n\nfig.update_layout(title_text= \"Top five Superheros appeared after the year 2000\", xaxis_title = \"Superheros\", yaxis_title = \"Count\")\n\nfig.show()","d5c30df2":"after_2000 = df[df[\"year\"] < 2000][[\"name\", \"appearances\"]][:5]\nfig = go.Figure(go.Bar(\n    x=after_2000[\"name\"],y= after_2000[\"appearances\"],\n    marker = { 'color': after_2000[\"appearances\"], 'colorscale': \"greens\"},\n             text = after_2000[\"appearances\"],\n             textposition = 'outside'\n             \n))\n\nfig.update_layout(title_text= \"Top five Superheros appeared before the year 2000\", xaxis_title = \"Superheros\", yaxis_title = \"Count\")\n\nfig.show()","f817ca32":"sex_classificatio = df[\"sex\"].value_counts().reset_index().rename(columns = {\"index\": \"gender\", \"sex\": \"count\"})","299896b9":"tp = px.pie(sex_classificatio, values='count', names='gender', color_discrete_sequence=px.colors.sequential.RdBu)\n\n\ntp.update_traces(hoverinfo='label+percent', textinfo='value+percent')\n\ntp.update_layout(title=\"Gender Wise classification of the superheros\",title_x=0.5)\ntp.show()","6ffaa83a":"sns.set()\nplt.figure(figsize= (30,10))\ntop_appearances_with_living = df.sort_values(by= \"appearances\", ascending=False)[:10][[\"name\", \"appearances\", \"alive\", \"sex\"]]\ng = sns.barplot(data = top_appearances_with_living, x=\"name\", y=\"appearances\", palette=\"inferno\", hue = \"sex\")\ng.set_xticklabels(g.get_xticklabels(), rotation=20)\ng.set_xlabel(\"Superheros\")\ng.set_title(\"Male-female distribution in top 10 superheros\", size = 20)\ng.set_ylabel(\"count\")\n\nplt.show()","446db90d":"<div>\n    <p style =\"font-size: 20px; font-weight: bold; color:#2d4059;\"> Checking for Null Values <\/p>\n    <\/div>","4df46e8d":"<div>\n    <center> <h1> \ud83d\udcab Visualization and analysis on the DC Superheros \ud83d\udcab <\/h1> <\/center>\n    <img src = \"https:\/\/i.pinimg.com\/564x\/67\/e6\/9d\/67e69d210a18ece21e73fa280ab3b713.jpg\" heiht = 300, width = 300 \/>\n    \n       \n     ","b60f7fe4":"\n<div>\n    <h1 style =\"color:#9a1f40;\">Gender Wise Classification  of the superherost<\/h1>\n \n   \n\n\n\n","081f5913":"<div>\n    <h1 style =\"color:#ff9595;\"> Analyse the super heros  based of the eye type:- <\/h1>\n \n   \n\n","e6f1571a":"<div>\n    <p style =\"font-size: 18px; font-weight: bold; color:#065446;\"> Most of the NA values are filled but some are kept null. We can see the  page ID is the  unique attribute and hence we can't fill it with the proper value. (for that we should have to contact DC). This is also the case in the year and first apperances columns<\/p>\n    <\/div>","51d5df89":"There are two womens in the top 10 superheors.\n1. Wonder Women\n2. dinah laurel lance","941dcbaf":"<div>\n    <h1 style =\"color:#f54291;\"> Inference :- <\/h1>\n    <p style =\"font-size: 18px; color:#342b38;\"> Batman has the most Appearances followed by superman and then green latern<\/p>\n    <\/div>\n","edaa3eaa":"\n<div>\n    <h1 style =\"color:#9a1f40;\">Do Upvote the Notebook :) <\/h1>","e66249f8":"### All top heros are alive (Fortunately)","27389152":"<div>\n    <h1 style =\"color:#ff9595;\"> Analyse the super heros  based of the align status:- <\/h1>\n \n   \n\n","7baef817":"<div>\n    <h1 style =\"color:#f54291;\"> Inference :- <\/h1>\n    <p style =\"font-size: 18px; color:#342b38;\">According to the dataset, most superhero's have the eye type as blue, followed by  brown type and then black eyes<\/p>\n    <\/div>\n","4b8c04af":"<div>\n    <p style =\"font-size: 20px; font-weight: bold; color:#382933;\"> Due to above null values, we will do some EDA and then replace the null values with appropriate values. It is just for the proper visualization.<\/p>\n    <\/div>","68361867":"<div>\n    <h1 style =\"color:#9a1f40;\">Another  one huge classification  of the  superheros is based of the first appearances. Distinctly they can be classified as wheather they are appeared before 2000 or later of it<\/h1>\n \n   \n\n\n","30a7c286":"<div>\n    <h1 style =\"color:#f54291;\"> Inference :- <\/h1>\n    <p style =\"font-size: 18px; color:#342b38;\">most of the superheros are publically knowns and some of them are still hidden from the public. We can furthure classify them based of their identity status<\/p>\n    <\/div>\n\n\n","940fdaff":"# Start EDA","0cdd5053":"\n<h1 style = \"color: #00416d;\" >  Brief Introduction:-   <\/h1>\n<p style = \"font-size: 18px; text-align: justify\">  \n   This notebook is created to analyse the the DC Superheros. The superheros are briefly classified into several catagories. Bases of the classification, their occurances and many more interesting aspects the kernel is designated to the several concised visualization for the dataset. The DC superheros are appearing long ago (before 2000 also). \n    <\/p> \n    "}}