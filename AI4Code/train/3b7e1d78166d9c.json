{"cell_type":{"fbe2e9dc":"code","8d6c2896":"code","1254e96a":"code","736ef28a":"code","c5ec7bc4":"code","20900c21":"code","d9d52dd1":"code","5b5f2d7d":"code","8527006f":"code","3908e446":"code","0ba1c0ee":"code","da1f0b93":"code","a1b03fdd":"code","48ac8512":"code","0c4c7bb5":"code","a9d25a7f":"code","d89b9843":"code","7e5c48fe":"code","1ec7e1ab":"code","9b81c04e":"code","96bc1bec":"code","8922fd0d":"code","a3ef95fd":"code","a90461df":"code","538a1b0f":"code","2da33510":"markdown"},"source":{"fbe2e9dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8d6c2896":"data=pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')","1254e96a":"data.head(5)","736ef28a":"data.drop(['Unnamed: 32'],axis=1,inplace=True) #useless column","c5ec7bc4":"data['diagnosis']=data['diagnosis'].str.replace('B','0')","20900c21":"data['diagnosis']=data['diagnosis'].str.replace('M','1')","d9d52dd1":"data['diagnosis']=data['diagnosis'].astype(int)","5b5f2d7d":"data.shape","8527006f":"data.sample(10)","3908e446":"X=data.iloc[:,2:33].values\ny=data.iloc[:,1].values","0ba1c0ee":"#split\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2)","da1f0b93":"print(X_train.shape,X_test.shape,y_train.shape,y_test.shape)","a1b03fdd":"#scaling\nfrom sklearn.preprocessing import StandardScaler\nsc=StandardScaler()","48ac8512":"X_train=sc.fit_transform(X_train)","0c4c7bb5":"X_test=sc.transform(X_test)","a9d25a7f":"#method 1\nk=np.sqrt(X_train.shape[0])\nk","d89b9843":"k=21\nfrom sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=k)","7e5c48fe":"knn.fit(X_train,y_train)","1ec7e1ab":"#predict\ny_pred=knn.predict(X_test)","9b81c04e":"#accuracy check\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_pred,y_test)","96bc1bec":"#mathod 2\n\naccuracy=[]\nfor i in range(1,51):\n    knn=KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    y_pred=knn.predict(X_test)\n    accuracy.append(accuracy_score(y_pred,y_test))","8922fd0d":"accuracy","a3ef95fd":"import matplotlib.pyplot as plt","a90461df":"plt.plot(range(1,51),accuracy)","538a1b0f":"#taken k=10\nknn=KNeighborsClassifier(n_neighbors=10)\nknn.fit(X_train,y_train)\ny_pred=knn.predict(X_test)\naccuracy_score(y_pred,y_test)","2da33510":"So,this is the best accuracy score we get here."}}