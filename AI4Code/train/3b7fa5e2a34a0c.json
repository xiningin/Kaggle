{"cell_type":{"5ec4e47e":"code","15f5007c":"code","b9ded738":"code","0a09e020":"code","ecb702ef":"code","f8560162":"code","77af17dc":"code","4d6551ca":"code","1dcd9f6a":"code","0f3f289d":"code","ef46a69a":"code","25989868":"code","a68f4f98":"code","e7f5b495":"code","d73445aa":"code","22583dff":"code","f10530db":"code","a95895f0":"code","c1f559e3":"code","c149cce9":"code","54580d1a":"markdown","ce8e06c7":"markdown","b1376909":"markdown","54218fa2":"markdown","996b917c":"markdown","4dc4fc9a":"markdown","2321f549":"markdown"},"source":{"5ec4e47e":"from tensorflow.python.framework import ops\nops.reset_default_graph()\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","15f5007c":"import tensorflow.keras\nfrom tensorflow.keras.layers import  Conv2D, MaxPooling2D, Flatten, Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport matplotlib.pyplot as plt","b9ded738":"import os\nprint(os.listdir(\"..\/input\/filteredemnist\"))","0a09e020":"train_data_path = '..\/input\/filteredemnist\/filtered-emnist-train.csv'\ntest_data_path = '..\/input\/filteredemnist\/filtered-emnist-test.csv'","ecb702ef":"train_data = pd.read_csv(train_data_path, header=None)","f8560162":"train_data.head(10)","77af17dc":"# The classes of this balanced dataset are as follows. Index into it based on class label\nclass_mapping = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabdefghnqrt'\n# source data: https:\/\/arxiv.org\/pdf\/1702.05373.pdf","4d6551ca":"class_mapping[34]","1dcd9f6a":"train_data.shape","0f3f289d":"num_classes = len(train_data[0].unique())\nrow_num = 8\nimg_flip = np.transpose(train_data.values[row_num,1:].reshape(28, 28), axes=[1,0]) # img_size * img_size arrays\n","ef46a69a":"# 10 digits, 26 letters, and 11 capital letters that are different looking from their lowercase counterparts\nnum_classes = 37 \nimg_size = 28\n\ndef img_label_load(data_path, num_classes=None):\n    data = pd.read_csv(data_path, header=None)\n    print(data.head(5))\n    data_rows = len(data)\n    if not num_classes:\n        num_classes = len(data[0].unique())\n    \n    # this assumes square imgs. Should be 28x28\n    img_size = int(np.sqrt(len(data.iloc[0][1:])))\n    \n    # As emnist data is in wrong shape\/tilted. \n    # Images need to be transposed. This line also does the reshaping needed.\n    imgs = np.transpose(data.values[:,1:].reshape(data_rows, img_size, img_size, 1), axes=[0,2,1,3]) # img_size * img_size arrays\n    \n    labels = keras.utils.to_categorical(data.values[:,0], num_classes) # one-hot encoding vectors\n    \n    return imgs\/255., labels\n\n","25989868":"# Define the optimizer\nfrom tensorflow.keras.optimizers import RMSprop\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)","a68f4f98":"model = tensorflow.keras.models.Sequential()\nmodel.add(Conv2D(32, kernel_size=(5, 5),\n                 activation='relu',\n                 input_shape=(img_size,img_size,1)))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(128, (3, 3), activation='relu'))\nmodel.add(Dropout(0.1))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(num_classes, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])\nmodel.summary()","e7f5b495":"for layer in model.layers:\n    print(layer.get_output_at(0).get_shape().as_list())\n","d73445aa":"X, y = img_label_load(train_data_path)\nprint(X.shape)\nprint(y)\n","22583dff":"# Set a learning rate annealer\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(monitor='val_accuracy', \n                                            patience=3, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","f10530db":"# Data generator add randomness to existing data.\ndata_generator = keras.preprocessing.image.ImageDataGenerator(validation_split=.2)\n## consider using this for more variety\ndata_generator_with_aug = keras.preprocessing.image.ImageDataGenerator(validation_split=.2, width_shift_range=.1,\n                                                                       height_shift_range=.1, rotation_range=20,\n                                                                       zoom_range=.1, shear_range=.1)\n\n# if already ran this above, no need to do it again\n# X, y = img_label_load(train_data_path)\n# print(\"X.shape: \", X.shape)\n\ntraining_data_generator = data_generator_with_aug.flow(X, y, subset='training')\nvalidation_data_generator = data_generator_with_aug.flow(X, y, subset='validation')\nhistory = model.fit_generator(training_data_generator, \n                              steps_per_epoch=500, epochs=30,\n                              validation_data=validation_data_generator, \n                              validation_steps= len(X) \/ 500,\n                              callbacks=[learning_rate_reduction])","a95895f0":"test_X, test_y = img_label_load(test_data_path)\ntest_data_generator = data_generator.flow(X, y)\n\nmodel.evaluate_generator(test_data_generator)","c1f559e3":"model.save('.\/alphabet_a_z.h5')","c149cce9":"from IPython.display import FileLink, FileLinks\nFileLinks('.') #lists all downloadable files on server","54580d1a":"### Load dataset ","ce8e06c7":"### load library","b1376909":"### model, compile","54218fa2":"### Train","996b917c":"## Data is flipped","4dc4fc9a":"## Plot loss and accuracy","2321f549":"## Keras exports"}}