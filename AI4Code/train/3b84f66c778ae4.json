{"cell_type":{"e3ff6f62":"code","86bc18a8":"code","88b749d7":"code","7dedffa5":"code","06e7fe02":"code","b5e7ef97":"code","74780ea9":"code","ac97e123":"code","eadda9d1":"code","9277c25e":"code","5bdc54c2":"code","0b92d14e":"code","3ed37338":"code","3bd21ea5":"code","24f66929":"code","255487fa":"code","54f58602":"code","aa91bbfa":"code","de405407":"markdown"},"source":{"e3ff6f62":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","86bc18a8":"route = '..\/input\/digit-recognizer\/'\ntrain = pd.read_csv(f'{route}train.csv')\ntest = pd.read_csv(f'{route}test.csv')\nprint(train.shape)\nprint(test.shape)","88b749d7":"label = train.label\ntrain = train.drop('label', axis=1)\ntrain.head()","7dedffa5":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train, label, random_state=0)","06e7fe02":"#label\u306eone-hot-encoder\nfrom keras.utils import to_categorical\ny_train = to_categorical(y_train, 10)\ny_test = to_categorical(y_test, 10)","b5e7ef97":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","74780ea9":"from keras.layers import Dense, Dropout\nfrom keras.models import Sequential\nfrom keras.metrics import accuracy\n\nmodel = Sequential()\nmodel.add(Dense(64, activation='relu', input_shape=(784,)))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(10, activation='softmax'))","ac97e123":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","eadda9d1":"model.summary()","9277c25e":"# \u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\nhistory = model.fit(X_train, y_train, epochs=30, batch_size=128, verbose=1,\n                   validation_data=(X_test, y_test))","5bdc54c2":"import matplotlib.pyplot as plt\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nnum_epoch = len(loss)\nplt.plot(range(num_epoch), loss, marker='.', label='loss')\nplt.plot(range(num_epoch), val_loss, marker='.', label='val_loss')\nplt.legend(loc='best')\nplt.grid()\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.show()","0b92d14e":"accuracy = history.history['accuracy']\nval_accuracy = history.history['val_accuracy']\n\nnum_epoch = len(accuracy)\nplt.plot(range(num_epoch), accuracy, marker='.', label='accuracy')\nplt.plot(range(num_epoch), val_accuracy, marker='.', label='val_accuracy')\nplt.legend(loc='best')\nplt.grid()\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.show()","3ed37338":"test = pd.read_csv(f'{route}test.csv')","3bd21ea5":"test.head()","24f66929":"test_pred = model.predict_classes(test)","255487fa":"submission = pd.read_csv(f'{route}sample_submission.csv')\nsubmission.head()","54f58602":"submission['Label'] = test_pred\nsubmission.head()","aa91bbfa":"submission.to_csv('ANSWER.csv',header=True, index=False)","de405407":"## \u30e2\u30c7\u30eb\u306e\u4f5c\u6210"}}