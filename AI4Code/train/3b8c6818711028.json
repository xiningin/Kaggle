{"cell_type":{"1d4fb5e7":"code","cdc26594":"code","5eb4a12f":"code","d4b6f600":"code","6b606bee":"code","f41e966b":"code","489d253e":"code","80362a78":"code","23c5b3a7":"code","1c63875e":"code","9c797a46":"code","8981aa05":"code","f4bf7634":"code","23aa8faf":"code","4845c29c":"code","8c1cbbb5":"code","85c5d20b":"code","b8559659":"code","9df34c94":"code","c4b4588e":"code","a57a3c2a":"code","9f0f17d5":"code","9003b697":"code","9515ffc4":"code","d601cfe9":"code","0b30e868":"code","6c9aab25":"code","a32afb39":"code","d2e3270f":"code","83c641b1":"code","cc812099":"code","88c1f7dc":"code","56b052c9":"markdown","fa73ced6":"markdown","6edb4258":"markdown","a04233f4":"markdown","48292b18":"markdown","f39e8332":"markdown","491221aa":"markdown","e30c4aff":"markdown","be57901e":"markdown","14bc1d3d":"markdown","5af9d1a8":"markdown","fb171a33":"markdown","bb6a1ad0":"markdown","7a389c89":"markdown","0ebfd085":"markdown","f9f757b8":"markdown"},"source":{"1d4fb5e7":"'''Import basic modules.'''\nimport pandas as pd\nimport numpy as np\n\n\n'''Customize visualization\nSeaborn and matplotlib visualization.'''\nimport altair as alt\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n%matplotlib inline\nimport folium \n\n\n'''Plotly visualization .'''\nimport plotly.offline as py\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = True) # Required to use plotly offline in jupyter notebook\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n'''Display markdown formatted output like bold, italic bold etc.'''\nfrom IPython.display import Markdown\ndef bold(string):\n    display(Markdown(string))","cdc26594":"from IPython.display import IFrame, YouTubeVideo\nYouTubeVideo('aerq4byr7ps',width=600, height=400)","5eb4a12f":"\"\"\"Reading the dataset\"\"\"\ndata= pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\",)\ndata.head()","d4b6f600":"\"\"\"Let's look of the feature info\"\"\"\ndata.info()","6b606bee":"\"\"\"Data Cleaning\"\"\"\ndata['Last Update'] = data['Last Update'].apply(pd.to_datetime)\ndata['ObservationDate'] = data['ObservationDate'].apply(pd.to_datetime)\ndata.drop(['SNo'],axis=1,inplace=True)\ndata.head()","f41e966b":"bold(\"** Countries, territories or areas with reported confirmed cases, Deaths, Recovered of 2019-nCoV, 2 April 2020**\")\nfrom datetime import date\ndata_2_apr = data[data['ObservationDate'] > pd.Timestamp(date(2020,4,1))]\ndata_2_apr.head()","489d253e":"bold('**Present Gobal condition: confirmed, death and recovered**')\nprint('Globally Confirmed Cases: ',data_2_apr['Confirmed'].sum())\nprint('Global Deaths: ',data_2_apr['Deaths'].sum())\nprint('Globally Recovered Cases: ',data_2_apr['Recovered'].sum())","80362a78":"bold(\"** COUNTRY WISE CONFIRMED CASES of 2019-nCoV, 2 April 2020**\")\ncountries_cases = data_2_apr.groupby('Country\/Region')['Confirmed','Deaths','Recovered'].sum().reset_index()\ncountries_cases[\"Mortality Rate (per 100)\"] = np.round(100*countries_cases[\"Deaths\"]\/countries_cases[\"Confirmed\"],2)\n\ncountries_cases.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='YlOrBr',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Mortality Rate (per 100)\"])","23c5b3a7":"bold(\"**Present Scenario of China Condition of 2019-nCoV, 2 April 2020**\")\nchina_cases = data_2_apr[data_2_apr['Country\/Region']=='Mainland China'][[\"Province\/State\",\"Confirmed\",\"Deaths\",\"Recovered\"]]\nchina_cases[\"Mortality Rate (per 100)\"] = np.round(100*china_cases[\"Deaths\"]\/china_cases[\"Confirmed\"],2)\nchina_cases.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='YlOrBr',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])\\\n                        .background_gradient(cmap='Purples',subset=[\"Mortality Rate (per 100)\"])","1c63875e":"bold(\"**Present Scenario of USA Condition of 2019-nCoV, 2 April 2020**\")\nus_cases = data_2_apr[data_2_apr['Country\/Region']=='US'][[\"Province\/State\",\"Confirmed\",\"Deaths\",\"Recovered\"]]\nus_cases.sort_values('Confirmed', ascending= False).style.background_gradient(cmap='YlOrBr',subset=[\"Confirmed\"])\\\n                        .background_gradient(cmap='Reds',subset=[\"Deaths\"])\\\n                        .background_gradient(cmap='Greens',subset=[\"Recovered\"])","9c797a46":"#loading the time series confirm file\nmap_confirm_cases = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv')\nmap_confirm_cases = map_confirm_cases[['Province\/State', 'Country\/Region', 'Lat', 'Long', '4\/2\/20']]\n\n#loading the time series deaths file\nmap_death_cases = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv')\nmap_death_cases = map_death_cases[['Province\/State', 'Country\/Region', 'Lat', 'Long', '4\/2\/20']]\n\n#loading the time series recovered file\nmap_recovered_cases = pd.read_csv('..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv')\nmap_recovered_cases = map_recovered_cases[['Province\/State', 'Country\/Region', 'Lat', 'Long', '4\/2\/20']]","8981aa05":"# create map and display it\nbold('**Countries with reported Confirmed cases of 2019-nCoV, 2 April 2020**')\nworld_map = folium.Map(location=[10,0], tiles=\"Stamen Toner\", zoom_start=2,max_zoom=6,min_zoom=2)\n\nfor lat, lon, value, name in zip(map_confirm_cases['Lat'], map_confirm_cases['Long'], map_confirm_cases['4\/2\/20'], map_confirm_cases['Country\/Region']):\n    folium.CircleMarker([lat, lon],\n                        radius=(int((np.log(value+1.00001)))+0.2),\n                        popup = ('<strong>Country<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='#ff6600',\n                        \n                        fill_color='#ff8533',\n                        fill_opacity=0.6 ).add_to(world_map)\nworld_map","f4bf7634":"#loading the time series confirm file\nchina_map_confirm = map_confirm_cases[map_confirm_cases['Country\/Region']=='China']\n\n# create map and display it\nbold('**China states with reported Confirm cases of 2019-nCoV, 2 April 2020**')\nworld_map = folium.Map(location=[35.8617, 104.1954], tiles=\"Stamen Toner\", zoom_start=4)\n\nfor lat, lon, value, name in zip(china_map_confirm['Lat'], china_map_confirm['Long'], china_map_confirm['4\/2\/20'], china_map_confirm['Province\/State']):\n    folium.CircleMarker([lat, lon],\n                        radius= (int((np.log(value+1.00001))))*3,\n                        popup = ('<strong>States<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='#ff6600',\n                        \n                        fill_color='#ff8533',\n                        fill_opacity=0.8 ).add_to(world_map)\nworld_map","23aa8faf":"china_map_death = map_death_cases[map_death_cases['Country\/Region']=='China']\n\n# create map and display it\nbold('**China states with reported Deaths cases of 2019-nCoV, 2 April 2020**')\n\nworld_map = folium.Map(location=[35.8617, 104.1954], tiles=\"Stamen Toner\", zoom_start=4)\nfor lat, lon, value, name in zip(china_map_death['Lat'], china_map_death['Long'], china_map_death['4\/2\/20'], china_map_death['Province\/State']):\n    folium.CircleMarker([lat, lon],\n                        radius= (int((np.log(value+1.00001))))*1,\n                        popup = ('<strong>States<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Death Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.6 ).add_to(world_map)\nworld_map","4845c29c":"#loading the time series deaths file\nchina_map_recovered = map_recovered_cases[map_recovered_cases['Country\/Region']=='China']\n# create map and display it\nbold('**China states with reported Recoverd cases of 2019-nCoV, 2 April 2020**')\n\nworld_map = folium.Map(location=[35.8617, 104.1954], tiles=\"Stamen Toner\", zoom_start=4)\nfor lat, lon, value, name in zip(china_map_recovered['Lat'], china_map_recovered['Long'], china_map_recovered['4\/2\/20'], china_map_recovered['Province\/State']):\n    folium.CircleMarker([lat, lon],\n                        radius= (int((np.log(value+1.00001))))*2,\n                        popup = ('<strong>States<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Recoverd Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='green',\n                        \n                        fill_color='green',\n                        fill_opacity=0.6 ).add_to(world_map)\nworld_map","8c1cbbb5":"# loading us coordinate file\nus_coo = pd.read_csv('..\/input\/latitude-and-longitude-for-every-country-and-state\/world_country_and_usa_states_latitude_and_longitude_values.csv', usecols=['usa_state', 'usa_state_latitude','usa_state_longitude'])\nus_coo.rename(columns={'usa_state_latitude': 'Lat',\n                      'usa_state_longitude': 'Long',\n                     'usa_state': 'Province\/State'}, inplace=True)\nus_map_case = us_cases.merge(us_coo, on='Province\/State')","85c5d20b":"# create map and display it\nbold('**US states with reported Confirm cases of 2019-nCoV, 2 April 2020**')\nworld_map = folium.Map(location=[37, -102], tiles=\"Stamen Toner\", zoom_start=3.5)\n\nfor lat, lon, value, name in zip(us_map_case['Lat'], us_map_case['Long'], us_map_case['Confirmed'], us_map_case['Province\/State']):\n    folium.CircleMarker([lat, lon],\n                        radius= (int((np.log(value+1.00001))))*3,\n                        popup = ('<strong>State<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Confirmed Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='#ff6600',\n                        \n                        fill_color='#ff8533',\n                        fill_opacity=0.8 ).add_to(world_map)\nworld_map","b8559659":"# create map and display it\nbold('**US states with reported Deaths cases of 2019-nCoV, 2 April 2020**')\nworld_map = folium.Map(location=[37, -102], tiles=\"Stamen Toner\", zoom_start=3.5)\n\nfor lat, lon, value, name in zip(us_map_case['Lat'], us_map_case['Long'], us_map_case['Deaths'], us_map_case['Province\/State']):\n    folium.CircleMarker([lat, lon],\n                        radius= (int((np.log(value+1.00001))))*2,\n                        popup = ('<strong>State<\/strong>: ' + str(name).capitalize() + '<br>'\n                                '<strong>Deaths Cases<\/strong>: ' + str(value) + '<br>'),\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.8 ).add_to(world_map)\nworld_map","9df34c94":"bars = alt.Chart(countries_cases.sort_values('Confirmed', ascending= False).head(10)).mark_bar(color='orange',cornerRadiusTopLeft=3,\n    cornerRadiusTopRight=3, size=20, opacity=0.7\n).encode(\n    x='Confirmed:Q',\n    y=alt.Y('Country\/Region:O', sort='-x')\n).properties(\n    title={\n    \"text\":['Top 10 Countries: Confirmed Cases'],\n    \"subtitle\":['*US have most confirmed cases for now'],\n    \"fontSize\":15,\n    \"fontWeight\": 'bold',\n    \"font\":'Courier New',\n    }\n)\n\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(\n    text='Confirmed:Q'    \n)\n\n(bars + text).properties( height=300, width=600)","c4b4588e":"bars = alt.Chart(countries_cases.sort_values('Deaths', ascending= False).head(10)).mark_bar(color='red',cornerRadiusTopLeft=3,\n    cornerRadiusTopRight=3, size=20, opacity=0.7\n).encode(\n    x='Deaths:Q',\n    y=alt.Y('Country\/Region:O', sort='-x')\n).properties(\n    title={\n    \"text\":['Top 10 Countries: Deaths Case'],\n    \"subtitle\":['*Italy have most deaths cases for now'],\n    \"fontSize\":15,\n    \"fontWeight\": 'bold',\n    \"font\":'Courier New',\n    }\n)\n\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(\n    text='Deaths:Q'    \n)\n\n(bars + text).properties( height=300, width=600)","a57a3c2a":"bars = alt.Chart(countries_cases.sort_values('Recovered', ascending= False).head(10)).mark_bar(color='green',cornerRadiusTopLeft=3,\n    cornerRadiusTopRight=3, size=20, opacity=0.7\n).encode(\n    x='Recovered:Q',\n    y=alt.Y('Country\/Region:O', sort='-x')\n).properties(\n    title={\n    \"text\":['Top 10 Countries: Recovered Case'],\n    \"subtitle\":['*China have most recovered cases for now'],\n    \"fontSize\":15,\n    \"fontWeight\": 'bold',\n    \"font\":'Courier New',\n    }\n)\n\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(\n    text='Recovered:Q'    \n)\n\n(bars + text).properties( height=300, width=600)","9f0f17d5":"bars = alt.Chart(china_cases.sort_values('Confirmed', ascending= False).head(10)).mark_bar(color='orange',cornerRadiusTopLeft=3,\n    cornerRadiusTopRight=3, size=20, opacity=0.7\n).encode(\n    x='Confirmed:Q',\n    y=alt.Y('Province\/State:O', sort='-x')\n).properties(\n    title={\n    \"text\":['Top 10 China States: Confirmed Cases'],\n    \"subtitle\":['*Hubei have most confirmed cases for now in china'],\n    \"fontSize\":15,\n    \"fontWeight\": 'bold',\n    \"font\":'Courier New',\n    }\n)\n\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(\n    text='Confirmed:Q'    \n)\n\n(bars + text).properties( height=300, width=600)","9003b697":"bars = alt.Chart(china_cases.sort_values('Deaths', ascending= False).head(10)).mark_bar(color='red',cornerRadiusTopLeft=3,\n    cornerRadiusTopRight=3, size=20, opacity=0.7\n).encode(\n    x='Deaths:Q',\n    y=alt.Y('Province\/State:O', sort='-x')\n).properties(\n    title={\n    \"text\":['Top 10 China States: Death Cases'],\n    \"subtitle\":['*Hubei have most death cases for now in china'],\n    \"fontSize\":15,\n    \"fontWeight\": 'bold',\n    \"font\":'Courier New',\n    }\n)\n\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(\n    text='Deaths:Q'    \n)\n\n(bars + text).properties( height=300, width=600)","9515ffc4":"bars = alt.Chart(china_cases.sort_values('Recovered', ascending= False).head(10)).mark_bar(color='green',cornerRadiusTopLeft=3,\n    cornerRadiusTopRight=3, size=20, opacity=0.7\n).encode(\n    x='Recovered:Q',\n    y=alt.Y('Province\/State:O', sort='-x')\n).properties(\n    title={\n    \"text\":['Top 10 China States: Recovered Cases'],\n    \"subtitle\":['*Hubei have most recovered cases for now in china'],\n    \"fontSize\":15,\n    \"fontWeight\": 'bold',\n    \"font\":'Courier New',\n    }\n)\n\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(\n    text='Recovered:Q'    \n)\n\n(bars + text).properties( height=300, width=600)","d601cfe9":"bars = alt.Chart(us_cases.sort_values('Confirmed', ascending= False).head(10)).mark_bar(color='orange',cornerRadiusTopLeft=3,\n    cornerRadiusTopRight=3, size=20, opacity=0.7\n).encode(\n    x='Confirmed:Q',\n    y=alt.Y('Province\/State:O', sort='-x')\n).properties(\n    title={\n    \"text\":['Top 10 USA States: Confirmed Cases'],\n    \"subtitle\":['*New York have most confirmed cases for now in china'],\n    \"fontSize\":15,\n    \"fontWeight\": 'bold',\n    \"font\":'Courier New',\n    }\n)\n\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(\n    text='Confirmed:Q'    \n)\n\n(bars + text).properties( height=300, width=600)","0b30e868":"bars = alt.Chart(us_cases.sort_values('Deaths', ascending= False).head(10)).mark_bar(color='red',cornerRadiusTopLeft=3,\n    cornerRadiusTopRight=3, size=20, opacity=0.7\n).encode(\n    x='Deaths:Q',\n    y=alt.Y('Province\/State:O', sort='-x')\n).properties(\n    title={\n    \"text\":['Top 10 USA States: Death Cases'],\n    \"subtitle\":['*New York have most death cases for now in china'],\n    \"fontSize\":15,\n    \"fontWeight\": 'bold',\n    \"font\":'Courier New',\n    }\n)\n\ntext = bars.mark_text(\n    align='left',\n    baseline='middle',\n    dx=3  # Nudges text to right so it doesn't appear on top of the bar\n).encode(\n    text='Deaths:Q'    \n)\n\n(bars + text).properties( height=300, width=600)","6c9aab25":"#data['ObservationDate'] = data['ObservationDate'].dt.date\nspread = data[data['ObservationDate'] > pd.Timestamp(date(2020,1,21))]\nspread_gl = spread.groupby('ObservationDate')[\"Confirmed\", \"Deaths\", \"Recovered\"].sum().reset_index()\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=3, subplot_titles=(\"Confirmed\", \"Deaths\", \"Recovered\"))\n\ntrace1 = go.Scatter(\n                x=spread_gl['ObservationDate'],\n                y=spread_gl['Confirmed'],\n                name=\"Confirmed\",\n                line_color='orange',\n                opacity=0.8)\ntrace2 = go.Scatter(\n                x=spread_gl['ObservationDate'],\n                y=spread_gl['Deaths'],\n                name=\"Deaths\",\n                line_color='red',\n                opacity=0.8)\n\ntrace3 = go.Scatter(\n                x=spread_gl['ObservationDate'],\n                y=spread_gl['Recovered'],\n                name=\"Recovered\",\n                line_color='green',\n                opacity=0.8)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\nfig.update_layout(template=\"ggplot2\", width=1000, height=500, title_text = '<b>Global Spread of the Coronavirus Over Time <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()","a32afb39":"us_spread = spread[spread['Country\/Region']=='US']\ndate_us_spread = us_spread.groupby('ObservationDate')['Confirmed','Deaths','Recovered'].sum().reset_index()\n\n\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=3, subplot_titles=(\"Comfirmed\", \"Deaths\", \"Recovered\"))\n\ntrace1 = go.Scatter(\n                x=date_us_spread['ObservationDate'],\n                y=date_us_spread['Confirmed'],\n                name=\"Confirmed\",\n                line_color='orange',\n                opacity=0.8)\ntrace2 = go.Scatter(\n                x=date_us_spread['ObservationDate'],\n                y=date_us_spread['Deaths'],\n                name=\"Deaths\",\n                line_color='red',\n                opacity=0.8)\n\ntrace3 = go.Scatter(\n                x=date_us_spread['ObservationDate'],\n                y=date_us_spread['Recovered'],\n                name=\"Recovered\",\n                line_color='green',\n                opacity=0.8)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\nfig.update_layout(template=\"ggplot2\", width=800, height=500, title_text = '<b>Spread of the Coronavirus Over Time In USA<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()","d2e3270f":"italy_spread = spread[spread['Country\/Region']=='Italy']\ndate_italy_spread = italy_spread.groupby('ObservationDate')['Confirmed','Deaths','Recovered'].sum().reset_index()\n\n\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=3, subplot_titles=(\"Comfirmed\", \"Deaths\", \"Recovered\"))\n\ntrace1 = go.Scatter(\n                x=date_italy_spread['ObservationDate'],\n                y=date_italy_spread['Confirmed'],\n                name=\"Confirmed\",\n                line_color='orange',\n                opacity=0.8)\ntrace2 = go.Scatter(\n                x=date_italy_spread['ObservationDate'],\n                y=date_italy_spread['Deaths'],\n                name=\"Deaths\",\n                line_color='red',\n                opacity=0.8)\n\ntrace3 = go.Scatter(\n                x=date_italy_spread['ObservationDate'],\n                y=date_italy_spread['Recovered'],\n                name=\"Recovered\",\n                line_color='green',\n                opacity=0.8)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\nfig.update_layout(template=\"ggplot2\", width=800, height=500, title_text = '<b>Spread of the Coronavirus Over Time In Italy<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()","83c641b1":"spain_spread = spread[spread['Country\/Region']=='Spain']\ndate_spain_spread = spain_spread.groupby('ObservationDate')['Confirmed','Deaths','Recovered'].sum().reset_index()\n\n\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=3, subplot_titles=(\"Comfirmed\", \"Deaths\", \"Recovered\"))\n\ntrace1 = go.Scatter(\n                x=date_spain_spread['ObservationDate'],\n                y=date_spain_spread['Confirmed'],\n                name=\"Confirmed\",\n                line_color='orange',\n                opacity=0.8)\ntrace2 = go.Scatter(\n                x=date_spain_spread['ObservationDate'],\n                y=date_spain_spread['Deaths'],\n                name=\"Deaths\",\n                line_color='red',\n                opacity=0.8)\n\ntrace3 = go.Scatter(\n                x=date_spain_spread['ObservationDate'],\n                y=date_spain_spread['Recovered'],\n                name=\"Recovered\",\n                line_color='green',\n                opacity=0.8)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\nfig.update_layout(template=\"ggplot2\", width=800, height=500, title_text = '<b>Spread of the Coronavirus Over Time In Spain<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()","cc812099":"germany_spread = spread[spread['Country\/Region']=='Germany']\ndate_germany_spread = germany_spread.groupby('ObservationDate')['Confirmed','Deaths','Recovered'].sum().reset_index()\n\n\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=3, subplot_titles=(\"Comfirmed\", \"Deaths\", \"Recovered\"))\n\ntrace1 = go.Scatter(\n                x=date_germany_spread['ObservationDate'],\n                y=date_germany_spread['Confirmed'],\n                name=\"Confirmed\",\n                line_color='orange',\n                opacity=0.8)\ntrace2 = go.Scatter(\n                x=date_germany_spread['ObservationDate'],\n                y=date_germany_spread['Deaths'],\n                name=\"Deaths\",\n                line_color='red',\n                opacity=0.8)\n\ntrace3 = go.Scatter(\n                x=date_germany_spread['ObservationDate'],\n                y=date_germany_spread['Recovered'],\n                name=\"Recovered\",\n                line_color='green',\n                opacity=0.8)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\nfig.update_layout(template=\"ggplot2\", width=800, height=500, title_text = '<b>Spread of the Coronavirus Over Time In Germany<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()","88c1f7dc":"china_spread = spread[spread['Country\/Region']=='Mainland China']\ndate_china_spread = china_spread.groupby('ObservationDate')['Confirmed','Deaths','Recovered'].sum().reset_index()\n\n\nfrom plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=3, subplot_titles=(\"Comfirmed\", \"Deaths\", \"Recovered\"))\n\ntrace1 = go.Scatter(\n                x=date_china_spread['ObservationDate'],\n                y=date_china_spread['Confirmed'],\n                name=\"Confirmed\",\n                line_color='orange',\n                opacity=0.8)\ntrace2 = go.Scatter(\n                x=date_china_spread['ObservationDate'],\n                y=date_china_spread['Deaths'],\n                name=\"Deaths\",\n                line_color='red',\n                opacity=0.8)\n\ntrace3 = go.Scatter(\n                x=date_china_spread['ObservationDate'],\n                y=date_china_spread['Recovered'],\n                name=\"Recovered\",\n                line_color='green',\n                opacity=0.8)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 1, 3)\nfig.update_layout(template=\"ggplot2\", width=800, height=500, title_text = '<b>Spread of the Coronavirus Over Time In China<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig.show()","56b052c9":"# <font face=\"verdana\" color=\"blue\">Present Scenario: USA<\/font>","fa73ced6":"# 4. <font face=\"verdana\" color=\"red\"> COVID-19 Spread Analysis<\/font>\n## <font face=\"verdana\" color=\"blue\">Globe Spread<\/font>","6edb4258":"#  2.<font face=\"verdana\" color=\"red\"> Geographical Analysis<\/font>\n## <font face=\"verdana\" color=\"blue\">Present Scenario: Globally<\/font>\n\n<div class=\"alert alert-success\"> <a href=\"#\" class=\"alert-link\">\nClick on the bubbles to get information about the region and the number of cases.<\/a> \n<\/div>\n\n","a04233f4":"# <p  style=\"color:teal;\"> Give me your feedback and if you find my kernel helpful please UPVOTE will be appreciated. <\/p>","48292b18":"## <font face=\"verdana\" color=\"blue\">Present Scenario: China<\/font>","f39e8332":"# Exploratory Data Analysis","491221aa":"## <font face=\"verdana\" color=\"blue\">Present Scenario: China<\/font>","e30c4aff":"## <font face=\"verdana\" color=\"blue\">Present Scenario of USA<\/font>","be57901e":"# 3. <font face=\"verdana\" color=\"red\">Graphical Representation<\/font>\n## <font face=\"verdana\" color=\"blue\">Present Scenario: Globally<\/font>\n","14bc1d3d":"# Introduction\n<p  style=\"color:blue;\"> What is coronavirus? <\/p>\nThe coronavirus is a family of viruses that can cause a range of illnesses in humans including common cold and more severe forms like SARS and MERS which are life-threatening. The virus is named after its shape which takes the form of a crown with protrusions around it and hence is known as coronavirus.\n\n<p  style=\"color:blue;\">How did the recent outbreak occur? <\/p>\nThe recent outbreak of coronavirus is believed to have occurred in a market for illegal wildlife in the central Chinese city of Wuhan. Chinese health authorities and the WHO are investigating the outbreak of the recent coronavirus which has claimed 17 lives and reportedly infected hundreds.\n\n<p  style=\"color:blue;\"> How is India responding to the outbreak? <\/p>\nAccording to the Health Ministry, 9150 passengers have been screened for the novel coronavirus. Till now, no case of novel coronavirus has been reported in India. Health ministry has asked travellers from China to report to the nearest health facility in case they do not feel well. The ministry has asked authorities at seven airports of Delhi, Mumbai, Kolkata, Chennai, Bengaluru, Hyderabad and Cochin to screen those travelling from China.\n\n<p  style=\"color:blue;\"> How has it affected the economy? <\/p>\nAccording to reports, Chinese and Hong Kong stocks plunged Thursday as investors fear that the novel coronavirus can impact consumption. If the WHO declares the outbreak as a global health emergency, it could impact global investor sentiment mainly impacting travel, entertainment, hospitality sectors. *Read full report [Here](https:\/\/economictimes.indiatimes.com\/news\/et-explains\/all-you-need-to-know-about-the-deadly-novel-coronavirus\/articleshow\/73542980.cms?from=mdr)*\n\n*Image Source:https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019\/situation-reports*\n<img src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcT5dR_uDQM8LnlJLQfM88ez10ZtgEOfkgmdJEIkbjhLDJQcneLL\" align=\"left\" width=\"800\" height=\"600\">","5af9d1a8":"## <font face=\"verdana\" color=\"blue\">Top 5 Countries   ","fb171a33":"# -- work in progress! ","bb6a1ad0":"## <font face=\"verdana\" color=\"blue\">Present Scenario of China<\/font>","7a389c89":"# Summary [Not Updated]\n#### <p  style=\"color:blue;\">Details of cases reported on 9 Febraury 2020:<\/p>\n* **Gobal Condition**\n  * Till now 40,536 globally confirmed cases with 910 deaths.\n  * The first death has been reported outside of China, in the Philippines and second death from Hong Kong. \n* **China Contion**\n  *  40,160 Confirmed cases in Mainland China with 908 deaths and 3286 recovered.\n* **Wuhan City**\n  * 29,631 Confirmed cases including 871 deaths and 1,795 recovered.\n\n#### <p style=\"color:blue;\"> COUNTRY RESPONSE: <\/p>\n**China:**\n* National authorities are conducting active case finding in all provinces;\n* Since 14 January 2020, 35 infrared thermometers have been installed in airports, railway stations, long-distance bus stations, and ferry terminals;\n* Search expanded for additional cases within and outside of Wuhan City;\n* Active \/ retroactive case finding in medical institutions in Wuhan City;\n* The Huanan Seafood Wholesale Market in Wuhan city was closed on 1 January 2020 for environmental sanitation and disinfection. Market inspection in expansion to other markets;\n* Public education on disease prevention and environmental hygiene further strengthened in public places across the city, farmers\u2019 markets in particular.\n\n#### <p style=\"color:blue;\"> RECOMMENDATIONS AND ADVICE FOR THE PUBLIC <\/p>\nDuring previous outbreaks due to other coronavirus (Middle-East Respiratory Syndrome (MERS) and Severe\nAcute Respiratory Syndrome (SARS), human-to-human transmission occurred through droplets, contact and\nfomites, suggesting that the transmission mode of the 2019-nCoV can be similar. The basic principles to reduce\nthe general risk of transmission of acute respiratory infections include the following:\n* Avoiding close contact with people suffering from acute respiratory infections.\n* Frequent hand-washing, especially after direct contact with ill people or their environment.\n* Avoiding unprotected contact with farm or wild animals.\n* People with symptoms of acute respiratory infection should practice cough etiquette (maintain distance, cover coughs and sneezes with disposable tissues or clothing, and wash hands).\n* Within healthcare facilities, enhance standard infection prevention and control practices in hospitals, especially inemergency departments.\nWHO does not recommend any specific health measures for travellers. In case of symptoms suggestive of respiratory\nillness either during or after travel, travellers are encouraged to seek medical attention and share their travel history\nwith their healthcare provider. \n\n**Source: WHO Report**","0ebfd085":"## <font face=\"verdana\" color=\"blue\">Present Scenario: USA<\/font>","f9f757b8":"# 1.<font face=\"verdana\" color=\"red\"> Pandas Analysis<\/font>\n## <font face=\"verdana\" color=\"blue\">Present Scenario: Globally<\/font>"}}