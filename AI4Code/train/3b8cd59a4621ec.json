{"cell_type":{"26e5b904":"code","d6663244":"code","8fad2e68":"code","2b1730b7":"code","dd8f657d":"code","fa650870":"code","8b6f9631":"code","470aa871":"code","48eba970":"code","7e21e802":"code","26914dca":"code","ab46e09d":"code","c2981013":"code","a91e2c7c":"code","96bfcf1d":"code","f4d5b457":"code","e6791ed7":"code","e72518f7":"code","386758f8":"code","28384cbd":"code","9e7df40b":"markdown","9c2753f0":"markdown","72295cf9":"markdown","f517fe04":"markdown","f693ca8e":"markdown"},"source":{"26e5b904":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom collections import Counter\nimport matplotlib.patches as mpatches\nfrom sklearn import tree\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import roc_auc_score, roc_curve, log_loss, confusion_matrix, precision_score, recall_score, classification_report, accuracy_score\nfrom sklearn.model_selection import train_test_split\nimport graphviz \nimport warnings\nimport os\n\nplt.rcParams[\"axes.labelsize\"] = 16.\nplt.rcParams[\"xtick.labelsize\"] = 14.\nplt.rcParams[\"ytick.labelsize\"] = 14.\nplt.rcParams[\"legend.fontsize\"] = 12.\nplt.rcParams[\"figure.figsize\"] = [15, 6]\n\nwarnings.filterwarnings('ignore')","d6663244":"#auxiliary functions we're going to use later\ndef print_metrics(df):\n    print(\"total: {}\".format(len(df)))\n    \n    groups = df.groupby('Species').size()\n    \n    setosa = groups['Iris-setosa'] if 'Iris-setosa' in groups else 0\n    versicolor = groups['Iris-versicolor'] if 'Iris-versicolor' in groups else 0\n    virginica = groups['Iris-virginica'] if 'Iris-virginica' in groups else 0\n    \n    print(\"Iris-setosa: {}\".format(setosa))\n    print(\"Iris-versicolor: {}\".format(versicolor))\n    print(\"Iris-virginica: {}\".format(virginica))\n    \ndef merge_left_only(left, right):\n    merged = left.merge(right, how='left', indicator=True)\n    result = merged[merged['_merge']=='left_only']\n    return result.drop(columns=['_merge'])\n\ndef show_scatter(data, graph_type): #graph_type values: 'Petal' or 'Sepal'\n    fig = data[data.Species=='Iris-versicolor'].plot(kind='scatter',x=graph_type + 'LengthCm',y=graph_type + 'WidthCm',color='orange', label='versicolor')\n    data[data.Species=='Iris-virginica'].plot(kind='scatter',x=graph_type + 'LengthCm',y=graph_type+'WidthCm',color='blue', label='virginica',ax=fig)\n    fig.set_xlabel(graph_type + \" Length\")\n    fig.set_ylabel(graph_type + \" Width\")\n    fig.set_title(graph_type + \" Length VS Width\")\n    fig=plt.gcf()\n    fig.set_size_inches(5,3)\n    return plt","8fad2e68":"iris = pd.read_csv('..\/input\/Iris.csv')\niris.drop('Id',axis=1,inplace=True)\niris['PetalSurface'] = iris.apply(lambda row: row.PetalLengthCm * row.PetalWidthCm, axis=1)","2b1730b7":"iris.head(1)","dd8f657d":"df_train, df_test = train_test_split(iris, test_size=0.30)\ndf = df_train","fa650870":"df.groupby(['Species']).mean()","8b6f9631":"fig = df[df.Species=='Iris-setosa'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='orange', label='Setosa')\ndf[df.Species=='Iris-versicolor'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='blue', label='versicolor',ax=fig)\ndf[df.Species=='Iris-virginica'].plot(kind='scatter',x='SepalLengthCm',y='SepalWidthCm',color='green', label='virginica', ax=fig)\nfig.set_xlabel(\"Sepal Length\")\nfig.set_ylabel(\"Sepal Width\")\nfig.set_title(\"Sepal Length VS Width\")\nfig=plt.gcf()\nfig.set_size_inches(10,6)\nplt.show()","470aa871":"fig = df[df.Species=='Iris-setosa'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='orange', label='Setosa')\ndf[df.Species=='Iris-versicolor'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='blue', label='versicolor',ax=fig)\ndf[df.Species=='Iris-virginica'].plot.scatter(x='PetalLengthCm',y='PetalWidthCm',color='green', label='virginica', ax=fig)\nfig.set_xlabel(\"Petal Length\")\nfig.set_ylabel(\"Petal Width\")\nfig.set_title(\" Petal Length VS Width\")\nfig=plt.gcf()\nfig.set_size_inches(10,6)\nplt.show()","48eba970":"h1 = df[(df.PetalLengthCm<2.5)]\nprint_metrics(h1)\nsetosa = h1\nsg = merge_left_only(df,h1)#from the original dataset we remove all flowers from h1\nshow_scatter(sg,'Petal').show()\nshow_scatter(sg,'Sepal').show()","7e21e802":"h2 = sg[sg.SepalLengthCm>7]\nprint_metrics(h2)\nvirginica = h2\nsg = merge_left_only(sg,h2)\nshow_scatter(sg,'Petal').show()\nshow_scatter(sg,'Sepal').show()","26914dca":"h3 = sg[sg.SepalWidthCm<2.5]\nprint_metrics(h3)\nversicolor = h3\nsg = merge_left_only(sg,h3)\nshow_scatter(sg,'Petal').show()\nshow_scatter(sg,'Sepal').show()","ab46e09d":"h4 = sg[sg.PetalWidthCm < 1.6]\nprint_metrics(h4)\nversicolor = pd.concat([versicolor,h4])\nsg = merge_left_only(sg,h4)\nshow_scatter(sg,'Petal').show()\nshow_scatter(sg,'Sepal').show()","c2981013":"h5 = sg[(sg.PetalLengthCm > 5.2) & (sg.PetalWidthCm>1.8)]\nprint_metrics(h5)\nvirginica = pd.concat([virginica, h5])\nsg = merge_left_only(sg,h5)\nshow_scatter(sg,'Petal').show()\nshow_scatter(sg,'Sepal').show()","a91e2c7c":"h6 = sg[sg.PetalSurface>8.7]\nprint_metrics(h6)\nvirginica = pd.concat([virginica, h6])\nsg = merge_left_only(sg,h6)\nshow_scatter(sg,'Petal').show()\nshow_scatter(sg,'Sepal').show()","96bfcf1d":"versicolor = pd.concat([versicolor, sg])","f4d5b457":"# This function uses the same cuts we saw before\ndef by_hand_prediction(row):\n    if row.PetalLengthCm<2.5:\n        return 'Iris-setosa'\n    elif row.SepalLengthCm>7:\n        return 'Iris-virginica'\n    elif row.SepalWidthCm<2.5:\n        return 'Iris-versicolor'\n    elif row.PetalWidthCm < 1.6:\n        return 'Iris-versicolor'\n    elif row.PetalLengthCm > 5.2 and row.PetalWidthCm>1.8:\n        return 'Iris-virginica'\n    elif row.PetalSurface>8.7:\n        return 'Iris-virginica'\n    else:\n        return 'Iris-versicolor'\n    ","e6791ed7":"# Let's see how we compare with a DecisionTree model\nclf = tree.DecisionTreeClassifier()\nfeatures = ['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm']\nclf = clf.fit(df_train[features], df_train.Species)\n\ndot_data = tree.export_graphviz(clf, out_file=None, \n                      feature_names=features,  \n                      class_names=['setosa','virginica','versicolor'],  \n                      filled=True, rounded=True,  \n                      special_characters=True)  \ngraph = graphviz.Source(dot_data) \ngraph","e72518f7":"df_test['ModelPredicted'] = clf.predict(df_test[features])\ndf_test['ByHandPredicted'] = df_test.apply(lambda row: by_hand_prediction(row),axis=1)","386758f8":"df_test[df_test.ModelPredicted!=df_test.Species]","28384cbd":"df_test[df_test.ByHandPredicted!=df_test.Species]","9e7df40b":"**First look at the dataset**\n\nSetosa has smallest petal length, virginica the largest, same with width.\n\nVersicolor seems to be in the middle everywhere.","9c2753f0":"Found virginicas with Sepal Length > 7","72295cf9":"### Conclusions\n\n* Model makes a wrong prediction in 3 flowers, all of them versicolor, \"ByHandPredicted\" predicts successfully those\n* ByHandPredicted fails only in 1","f517fe04":"### Prediction by hand\n\nIn previous scatter plots we saw that setosas are easily located, is it possible to make cuts in the data to classify all the flowers? We are going the explore the data on df_train and then test performance on df_test","f693ca8e":"Let's see how well this method works in df_test"}}