{"cell_type":{"4a783d64":"code","017a6691":"code","5cfb5c4f":"code","f399f630":"code","075fdfa3":"code","d98ce697":"code","88c28227":"code","f92611d3":"code","c93c1e37":"code","f176de72":"code","92177756":"code","f646c7e0":"code","cbaaaeb5":"code","ff960534":"code","8dc28a98":"code","cc2c3562":"code","d30d9304":"code","33803a6e":"code","44244845":"code","16cdfd06":"code","4a56acbd":"markdown","0106fd80":"markdown","29cb89e6":"markdown","908a9e0c":"markdown","fa792969":"markdown","57e02630":"markdown"},"source":{"4a783d64":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\n\nimport os\nfrom glob import glob\nfrom tqdm import tqdm\n\nfrom skimage.transform import resize\n\nimport tensorflow as tf\nfrom tensorflow import keras","017a6691":"tf.test.is_gpu_available()","5cfb5c4f":"ls ..\/input\/data\/","f399f630":"all_xray_df = pd.read_csv('..\/input\/data\/Data_Entry_2017.csv')\nprint('Total Headers', all_xray_df.shape[0])\nall_xray_df.tail()","075fdfa3":"# filter unimportant columns\nall_xray_df = all_xray_df[['Image Index', 'Finding Labels']]\nall_xray_df","d98ce697":"%%time\n# Name -> full path mapping\nall_image_paths = {os.path.basename(x): x for x in glob('..\/input\/data\/images*\/*\/*.png')}\nprint('Scans found:', len(all_image_paths))","88c28227":"# add pull path to dataframe\nall_xray_df['path'] = all_xray_df['Image Index'].map(all_image_paths.get)\nall_xray_df.tail()","f92611d3":"all_xray_df['Finding Labels'].value_counts()","c93c1e37":"all_xray_df['Finding Labels'] = all_xray_df['Finding Labels'].map(lambda x: x.replace('No Finding', ''))\n\nfrom itertools import chain\nall_labels = np.unique(list(chain(*all_xray_df['Finding Labels'].map(lambda x: x.split('|')).tolist())))\nall_labels = [x for x in all_labels if len(x)>0]\nlen(all_labels), all_labels","f176de72":"# 0-1 encoding\nfor c_label in all_labels:\n    all_xray_df[c_label] = all_xray_df['Finding Labels'].map(\n        lambda finding: 1 if c_label in finding else 0)","92177756":"df_label = all_xray_df[all_labels]\ndf_label","f646c7e0":"def read_training_data(df, target_size=(128, 128)):\n    \n    X_raw = []\n    y_raw = []\n    \n    n_rows = df.shape[0]\n    for i in tqdm(range(n_rows)):\n        row = df.iloc[i]\n        image = plt.imread(row['path'])\n        \n        if image.shape != (1024, 1024):  # a few samples has shape (1024, 1024, 4) instead of (1024, 1024)\n            continue\n\n        image = resize(image, target_size)  # downsample to reduce dataset size\n        X_raw.append(image)\n        y_raw.append(row[all_labels].values.astype(np.int8))\n        \n    X_raw = np.array(X_raw)\n    y_raw = np.array(y_raw)\n    \n    print(X_raw.shape, y_raw.shape)\n    \n    ds = xr.Dataset({\n        'image': (('sample', 'x', 'y'), X_raw),\n        'label': (('sample', 'feature'), y_raw)},\n        coords = {'feature': all_labels}\n    )\n    return ds","cbaaaeb5":"%%time\nds_sample = read_training_data(all_xray_df[0:40000])\nds_sample","ff960534":"ds_sample.nbytes \/ 1e9  # GB","8dc28a98":"ds_sample['image'].isel(sample=slice(0, 12)).plot(col='sample', col_wrap=4, cmap='gray')","cc2c3562":"%time ds_sample.to_netcdf('chest_xray.nc')","d30d9304":"ls -lh .\/chest_xray.nc","33803a6e":"# def make_model(filters=32, input_shape=(128, 128, 1), num_output=14):\n#     model = tf.keras.models.Sequential([\n#         tf.keras.layers.Conv2D(filters, (3, 3), input_shape=input_shape, activation='relu'),\n#         tf.keras.layers.Conv2D(filters, (3, 3), activation='relu'),\n#         tf.keras.layers.MaxPool2D(pool_size=(2, 2)),\n#         tf.keras.layers.Conv2D(filters * 2, (3, 3), activation='relu'),\n#         tf.keras.layers.Conv2D(filters * 2, (3, 3), activation='relu'),\n#         tf.keras.layers.MaxPool2D(pool_size=(2, 2)),\n#         tf.keras.layers.Flatten(),\n#         tf.keras.layers.Dense(num_output, activation='sigmoid')  \n#         # not softmax, as here is independent binary classification, not multi-label \n#         ])\n#     return model","44244845":"# model = make_model()","16cdfd06":"# %%time\n# model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['binary_accuracy'])\n# model.fit(ds_sample['image'].values[..., np.newaxis], ds_sample['label'].values, epochs=10)","4a56acbd":"# Clean-up labels","0106fd80":"# Save to disk as output","29cb89e6":"## Identify path","908a9e0c":"# Fit simple CNN","fa792969":"> # Read raw images and format training data","57e02630":"> # Prepare training data"}}