{"cell_type":{"eb2b99f2":"code","0e2fc70c":"code","b6ab31ea":"code","3017e715":"code","ed524393":"code","c28f3bfd":"code","b1c8125a":"code","5ff0e02b":"code","210a17ad":"code","d3d4f78c":"code","7a882a88":"code","6922bfa2":"code","4575712b":"code","7e9c491b":"code","d516c5f1":"code","27df59e3":"code","11717708":"code","794de1d5":"code","d21d83da":"code","56c68d20":"code","277e6112":"code","bfa9cd96":"markdown","402450eb":"markdown","acd390f1":"markdown","030ac2e5":"markdown","70bffc90":"markdown","ac7db06e":"markdown","3cd19d67":"markdown","df9c8105":"markdown","f63a8f64":"markdown","35842a08":"markdown","b5ad2532":"markdown","7079c3c8":"markdown","c8b55758":"markdown","71da830a":"markdown","a9c47d2c":"markdown","0b016e60":"markdown","090fc28e":"markdown","2feeead7":"markdown","eefcc0be":"markdown"},"source":{"eb2b99f2":"!pip install -U lightautoml","0e2fc70c":"# Standard python libraries\nimport logging\nimport os\nimport time\nimport requests\nlogging.basicConfig(format='[%(asctime)s] (%(levelname)s): %(message)s', level=logging.INFO)\n\n# Installed libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nimport torch\n\n# Imports from our package\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.tasks import Task\n\nimport multiprocessing as mp\n\n# set option of max 100 displayed rows\npd.set_option('display.max_rows', 200)\npd.set_option('display.max_columns', 200)","b6ab31ea":"N_THREADS = mp.cpu_count() # threads cnt for lgbm and linear models\nN_FOLDS = 10 # folds cnt for AutoML - 10 is better\nRANDOM_STATE = 42 # fixed random state for various reasons\nTIMEOUT = 10*3600 # Time in seconds for automl run\nTARGET_NAME = 'final_price' # Target column name","3017e715":"%%time\n\ntrain_data = pd.read_csv('..\/input\/lightautomlcourse-hw1\/train_data.csv')\ntrain_data.head()","ed524393":"test_data = pd.read_csv('..\/input\/lightautomlcourse-hw1\/test_data.csv')\ntest_data.head()","c28f3bfd":"submission = pd.read_csv('..\/input\/lightautomlcourse-hw1\/sample_submission.csv')\nsubmission.head()","b1c8125a":"train_data['current_mileage'].sort_values()","5ff0e02b":"test_data['current_mileage'].sort_values()","210a17ad":"train_data.head()","d3d4f78c":"train_data[train_data['final_price'] > 100000].sort_values('final_price')","7a882a88":"drop_index = train_data[train_data['final_price'] > 200000].index\ntrain_data.drop(index=drop_index, inplace=True)","6922bfa2":"%%time\n\n# define if mileage is wrong\ndef wrong_milage(col):\n    if col > 4890000:\n        return 1\n    return 0\n\n# define mileage of car per year\ndef milage_per_year(row):\n    if row['vehicle_year'] == 0:\n        return 0\n    return row['current_mileage']\/(2021-row['vehicle_year'])\n\ndef delete_spaces_from_vin(col):\\n\",\n    if type(col) == str:\\n,\n        return re.sub('\\\\s+', '', col)\\n,\n    return np.nan\\n\n\n# add manufacturer country for each car\nusa     = ['FORD', 'CHEVROLET', 'JEEP', 'DODGE', 'MERCURY', 'CADILLAC', 'CHRYSLER', \n           'TESLA', 'SCION', 'GMC', 'HUMMER', 'LINCOLN', 'BUICK', 'SATURN', 'PONTIAC', 'FOTON']\njapan   = ['TOYOTA', 'MITSUBISHI', 'NISSAN', 'LEXUS', 'HONDA', 'SUBARU', 'MAZDA', \n           'SUZUKI', 'ACURA', 'INFINITI', 'ISUZU', 'DAIHATSU']\nengland = ['MINI', 'JAGUAR', 'LAND ROVER', 'ASTON MARTIN', 'ROVER', 'MG', 'BENTLEY', \n           'ROLLS-ROYCE']\nitaly   = ['FIAT', 'ALFA ROMEO', 'FERRARI', 'MASERATI', 'LANCIA', 'LAMBORGHINI']\ngermany = ['MERCEDES-BENZ', 'BMW', 'AUDI', 'VOLKSWAGEN', 'OPEL', 'PORSCHE']\nkorea   = ['HYUNDAI', 'DAEWOO', 'SSANGYONG', 'KIA']\nrussia  = ['VAZ', 'ZAZ', 'UAZ', 'GAZ', 'MOSKVICH']\nfrance  = ['RENAULT', 'PEUGEOT', 'CITROEN']\nchina   = ['GREATWALL', 'JAC']\nsweden  = ['VOLVO', 'SAAB']\nspain   = ['SEAT']\nindia   = ['TATA']\nothers  = ['\u10e1\u10ee\u10d5\u10d0']\n\ndef manufacturer_country(col):\n    if col in usa:\n        return 'USA'\n    if col in japan:\n        return 'Japan'\n    if col in england:\n        return 'England'\n    if col in italy:\n        return 'Italy'\n    if col in germany:\n        return 'Germany'\n    if col in korea:\n        return 'Korea'\n    if col in russia:\n        return 'Russia'\n    if col in france:\n        return 'France'\n    if col in china:\n        return 'China'\n    if col in sweden:\n        return 'Sweden'\n    if col in spain:\n        return 'Spain'\n    if col in india:\n        return 'India'\n    if col in others:\n        return 'Others'\n    return np.nan\n\ndef create_extra_features(data):\n    # add feature which shows cars that have too big mileage\n    data['wrong_mileage'] = data['current_mileage'].apply(wrong_milage)\n    # add feature with manufacturer country\n    data['manufacturer_country'] = data['vehicle_manufacturer'].apply(manufacturer_country)\n    # add squared mileage\n    data['current_mileage_sq'] = data['current_mileage']**2\n    # add number of NaN data in each row\n    data['NANs_cnt'] = data.isnull().sum(axis = 1) \n    # add mileage per year feature   \n    data['mileage_per_year'] = data.apply(milage_per_year, axis=1)\n    # add squared mileage per year\n    data['mileage_per_year_sq'] = data['mileage_per_year']**2\n    # delete spaces from vin\n    data['car_vin'] = data['car_vin'].apply(delete_spaces_from_vin)\n\ncreate_extra_features(train_data)\ncreate_extra_features(test_data)","4575712b":"def create_col_with_min_freq(data, col, min_freq = 10):\n    # replace rare values (less than min_freq rows) in feature by RARE_VALUE\n    data[col + '_fixed'] = data[col].astype(str)\n    data.loc[data[col + '_fixed'].value_counts()[data[col + '_fixed']].values < min_freq, col + '_fixed'] = \"RARE_VALUE\"\n    data.replace({'nan': np.nan}, inplace = True)\n    \ndef create_gr_feats(data):\n    # create aggregation feats for numeric features based on categorical ones\n    for cat_col in ['vehicle_manufacturer', 'vehicle_model', 'vehicle_category',\n                   'vehicle_gearbox_type', 'doors_cnt', 'wheels', 'vehicle_color', \n                   'vehicle_interior_color', 'deal_type']:\n        create_col_with_min_freq(data, cat_col, 15)\n        for num_col in ['current_mileage', 'vehicle_year', 'car_leather_interior']:\n            for n, f in [('mean', np.mean), ('min', np.nanmin), ('max', np.nanmax)]:\n                data['FIXED_' + n + '_' + num_col + '_by_' + cat_col] = data.groupby(cat_col + '_fixed')[num_col].transform(f)\n                \n    # create features with counts\n    for col in ['vehicle_manufacturer', 'vehicle_model', 'vehicle_category', 'mileage_per_year',\n               'current_mileage', 'vehicle_year', 'vehicle_gearbox_type', 'doors_cnt',\n               'wheels', 'vehicle_color', 'vehicle_interior_color', 'car_vin', 'deal_type']:\n        data[col + '_cnt'] = data[col].map(data[col].value_counts(dropna = False))\n        \n\nall_df = pd.concat([train_data, test_data]).reset_index(drop = True)\ncreate_gr_feats(all_df)\ntrain_data, test_data = all_df[:len(train_data)], all_df[len(train_data):]","7e9c491b":"train_data.head(10)","d516c5f1":"%%time\n\ntask = Task('reg', loss='mae', metric='mae')","27df59e3":"%%time\n\nroles = {'target': TARGET_NAME,\n         'drop': ['row_ID']\n         }","11717708":"#### %%time \nautoml = TabularUtilizedAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       general_params = {'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]},\n                       reader_params = {'n_jobs': N_THREADS, 'cv': N_FOLDS, 'random_state': RANDOM_STATE},\n                      )\noof_pred = automl.fit_predict(train_data, roles = roles)\nlogging.info('oof_pred:\\n{}\\nShape = {}'.format(oof_pred, oof_pred.shape))","794de1d5":"%%time\n\ntest_pred = automl.predict(test_data)\nlogging.info('Prediction for test data:\\n{}\\nShape = {}'\n              .format(test_pred, test_pred.shape))\n\nlogging.info('Check scores...')\nlogging.info('OOF score: {}'.format(mean_absolute_error(train_data[TARGET_NAME].values, oof_pred.data[:, 0])))","d21d83da":"submission[TARGET_NAME] = test_pred.data[:, 0]\nsubmission.head()","56c68d20":"# group train data by car_vin aggregate final price by mode\ntrain_vins = train_data[['car_vin', 'final_price']].groupby('car_vin').agg({'final_price' : \n                                                                            lambda x: x.value_counts()\n                                                                            .index[0]}).reset_index()\n\n# copy submission df\nsub = submission.copy().set_index('row_ID')\n# add car_vin feature from test df\nsub = sub.join(test_data[['car_vin', 'row_ID']].set_index('row_ID'), on=sub.index).reset_index()\n# join to sub df train_vins df on car_vin feature\nsub = sub[['row_ID', 'car_vin']].set_index('car_vin').join(train_vins.set_index('car_vin'), \n                                                            on='car_vin', how='left').reset_index()\n\n# get indices than have not-null car prices\nsub_index = sub[sub['final_price'].notnull()].index\n# assert not-null car prices of sub df to corresponding prices column of submission df\nsubmission.loc[sub_index, 'final_price'] = sub.loc[sub['final_price'].notnull(), 'final_price']","277e6112":"submission.to_csv('submission.csv', index = False)","bfa9cd96":"# ========= AutoML preset usage =========\n\n\n## Step 1. Create Task","402450eb":"# Step 0.3. Data load ","acd390f1":"To create AutoML model here we use `TabularAutoML` preset, which looks like:\n\n![TabularAutoML preset pipeline](https:\/\/github.com\/sberbank-ai-lab\/LightAutoML\/raw\/master\/imgs\/tutorial_2_pipeline.png)\n\nAll params we set above can be send inside preset to change its configuration:","030ac2e5":"Add new features","70bffc90":"# Step 0.1. Import necessary libraries ","ac7db06e":"# Step 0.0. Install LightAutoML","3cd19d67":"As we can see, some milage values are extremely high. World record of car mileage is around 4890000 kilometers. So let's consider milage more than 4890000 kilometers as wrong data and add this feature to our train and test datasets.\n\n*final_price*","df9c8105":"test_data","f63a8f64":"## Step 5. Generate submission","35842a08":"Be creative :)","b5ad2532":"# Step 0.2. Parameters ","7079c3c8":"## Step 4. Predict to test data and check scores","c8b55758":"# Step 0.4. Some user feature preparation ","71da830a":"## Step 2. Setup columns roles","a9c47d2c":"As we can see, prices of some cars are too high. For example Volkswagen Golf can't have the price over 8 million dollars. So let's drop all cars with price more than $200000.","0b016e60":"Features from strong baseline","090fc28e":"## Step 3. Create AutoML from preset","2feeead7":"Roles setup here set target column and base date, which is used to calculate date differences:","eefcc0be":"At first let's check correctness of data in train and test tables. Let's start from *current_milage*\n\ntrain_data"}}