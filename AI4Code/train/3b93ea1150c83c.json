{"cell_type":{"fbebd71f":"code","574d55fa":"code","0a34b0ef":"code","e9a4c168":"code","8138b51c":"code","b454b19f":"code","d66650c1":"code","445eda41":"code","4e96c6a9":"code","8b2e5554":"code","7db41290":"code","07357c6c":"code","0e7a3e79":"code","65cfa9e8":"code","2569bc1a":"code","e86b54b2":"code","685d97fe":"code","c5449963":"code","aa58688f":"code","e442dd97":"code","0f4a2dcf":"code","d151ab66":"code","32b25c60":"code","3ca82735":"code","318defeb":"code","a0234d17":"code","b9736183":"code","0f91d3ea":"code","26882dde":"code","d14dc844":"code","18368b41":"code","4ecbef00":"code","0c59a75d":"code","5d53a8ee":"code","bd444d17":"code","cedb1f60":"code","c15050c2":"code","17c019dd":"code","a389eed2":"code","4744f180":"code","2b912abc":"code","140882d5":"code","f0e7c4d2":"code","d521b3f8":"code","e50cdd52":"code","ad7ac8be":"code","dfec2bc3":"code","a71be322":"code","78a64959":"code","4bac43e1":"code","6650f2bb":"code","73a6de0a":"code","6f352d0d":"code","0c7f0578":"code","6af33e19":"markdown","e5281e89":"markdown","d0cc69d3":"markdown","ee70f13a":"markdown","8ffe0eae":"markdown","203cef72":"markdown","6911d9bb":"markdown"},"source":{"fbebd71f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt #Plotting\n%matplotlib inline\nimport seaborn as sns\nplt.rcParams[\"figure.figsize\"] = (10,10) #Make the plots bigger by default\nplt.rcParams[\"lines.linewidth\"] = 2 #Setting the default line width\nplt.style.use(\"ggplot\")\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom datetime import datetime\nfrom statsmodels.tsa.holtwinters import SimpleExpSmoothing\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping , ReduceLROnPlateau\nfrom sklearn.metrics import mean_absolute_error\n\nimport warnings\nimport warnings\nwarnings.filterwarnings('ignore')","574d55fa":"df = pd.read_csv('..\/input\/apple-stock-price-from-19802021\/AAPL.csv') # Load Dataset","0a34b0ef":"df # Check overall data","e9a4c168":"df.isna().mean() # Checking the null value","8138b51c":"df[\"Date\"]=pd.to_datetime(df.Date,dayfirst=True)\ndf.set_index(\"Date\",inplace=True)\ndf","b454b19f":"df=df.asfreq(\"d\")\ndf = df.fillna(method  = \"bfill\")","d66650c1":"df['Open'].plot(figsize=(12,8))\nplt.ylabel(\"open price\")","445eda41":"df['Volume'].plot(figsize=(12,8))\nplt.ylabel(\"Volume price\")","4e96c6a9":"df['Total Pos'] = df.sum(axis=1)","8b2e5554":"df['Total Pos'].plot(figsize=(10,8))\nplt.title('Total Portfolio Value')","7db41290":"df['Daily Return'] = df['Total Pos'].pct_change(1)","07357c6c":"df['Daily Return'].mean()","0e7a3e79":"df['Daily Return'].plot(kind='kde')","65cfa9e8":"SR = df['Daily Return'].mean()\/df['Daily Return'].std()\n","2569bc1a":"all_plot = df\/df.iloc[0]\nall_plot.plot(figsize=(34,12))","e86b54b2":"df.hist(bins=100,figsize=(12,6));\nplt.tight_layout()","685d97fe":"df.resample(rule='A').mean()","c5449963":"title = 'Yearly Mean Closing Price'\ndf['Open'].resample('A').mean().plot.bar(title=title,color=['#b41f7d'] , figsize=(24,12));","aa58688f":"df['6-month-SMA'] = df['Open'].rolling(window=6).mean()\ndf['12-month-SMA'] = df['Open'].rolling(window=12).mean()\ndf['2-month-SMA'] = df['Open'].rolling(window=2).mean()","e442dd97":"df[[\"Open\",\"6-month-SMA\",\"12-month-SMA\",\"2-month-SMA\"]].plot(figsize=(40,24));","0f4a2dcf":"df[[\"Open\",\"6-month-SMA\"]].plot(figsize=(18,10));","d151ab66":"df[['Open','6-month-SMA']].iloc[:100].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","32b25c60":"df['EWMA12'] = df['Open'].ewm(span=14,adjust=True).mean()","3ca82735":"df[['Open','EWMA12']].plot(figsize=(24,12));","318defeb":"df[['Open','EWMA12']].iloc[:50].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","a0234d17":"df['EWMA12'] = df['Open'].ewm(span=14,adjust=True).mean()","b9736183":"span = 8\nalpha = 2\/(span+1)","0f91d3ea":"df['EWMA12'] = df['Open'].ewm(alpha=alpha,adjust=False).mean()","26882dde":"model=SimpleExpSmoothing(df[\"Open\"])","d14dc844":"model.fit(smoothing_level=alpha,optimized=False)","18368b41":"fitted_model=model.fit(smoothing_level=alpha,optimized=False)","4ecbef00":"fitted_model.fittedvalues","0c59a75d":"fitted_model.fittedvalues.shift(-1)","5d53a8ee":"df[\"SES12\"]=fitted_model.fittedvalues.shift(-1)","bd444d17":"df[['Close',\"SES12\"]].plot(figsize=(30,15)).autoscale(axis='x',tight=True);","cedb1f60":"df['DESadd12'] = ExponentialSmoothing(df['Open'], trend='add').fit().fittedvalues.shift(-1)\ndf.head()","c15050c2":"df[['Open',  'SES12', 'DESadd12']].plot(figsize=(24,12))","17c019dd":"df[['Open','EWMA12','DESadd12']].iloc[:200].plot(figsize=(12,6)).autoscale(axis='x',tight=True);\n","a389eed2":"df['DESmul12'] = ExponentialSmoothing(df['Open'], trend='mul').fit().fittedvalues.shift(-1)\ndf.head()","4744f180":"df[['Open','DESadd12','DESmul12']].iloc[:24].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","2b912abc":"df['TESadd12'] = ExponentialSmoothing(df['Open'],trend='add',seasonal='add',seasonal_periods=12).fit().fittedvalues\ndf.head()","140882d5":"df['TESmul12'] = ExponentialSmoothing(df['Open'],trend='mul',seasonal='mul',seasonal_periods=12).fit().fittedvalues\ndf.head()","f0e7c4d2":"df[['Open','TESadd12','TESmul12']].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","d521b3f8":"df[['Open','TESadd12','TESmul12']].iloc[:24].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","e50cdd52":"plt.figure(figsize=(16,6))\nplt.title('Open Price History')\nplt.plot(df['Open'])\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Open Price USD ($)', fontsize=18)\nplt.show()","ad7ac8be":"data = df.filter(['Open'])\n\ndataset = data.values\n\ntraining_data_len = int(np.ceil( len(dataset) * .95 ))\n\ntraining_data_len","dfec2bc3":"scaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset)\n\nscaled_data","a71be322":"train_data = scaled_data[0:int(training_data_len), :]\n\nx_train = []\ny_train = []\n\nfor i in range(60, len(train_data)):\n    x_train.append(train_data[i-60:i, 0])\n    y_train.append(train_data[i, 0])\n    if i<= 61:\n        print(x_train)\n        print(y_train)\n        print()\n        \n\nx_train, y_train = np.array(x_train), np.array(y_train)\n\n\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))","78a64959":"model = Sequential()\nmodel.add(LSTM(64, return_sequences=True, input_shape= (x_train.shape[1], 1)))\nmodel.add(LSTM(32, return_sequences=False))\nmodel.add(Dense(16))\nmodel.add(Dense(1))\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\n\nmodel.summary()\n","4bac43e1":"callbacks = [EarlyStopping(patience=3, monitor='val_loss', mode='min'), \n             ReduceLROnPlateau(patience=2, verbose=1)] ","6650f2bb":"history =model.fit(x_train, y_train, \n                        epochs=20,\n                        batch_size=128,\n                        callbacks=[callbacks],\n                        )","73a6de0a":"test_data = scaled_data[training_data_len - 60: , :]\nx_test = []\ny_test = dataset[training_data_len:, :]\nfor i in range(60, len(test_data)):\n    x_test.append(test_data[i-60:i, 0])\n    \n# Convert the data to a numpy array\nx_test = np.array(x_test)\n\n# Reshape the data\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))\n\n# Get the models predicted price values \npredictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)\n\n# Get the root mean squared error (RMSE)\nrmse = np.sqrt(np.mean(((predictions - y_test) ** 2)))\nprint(rmse)\nprint(mean_absolute_error(y_test, predictions))\n\n","6f352d0d":"# Plot the data\ntrain = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions\n# Visualize the data\nplt.figure(figsize=(16,6))\nplt.title('Model')\nplt.xlabel('Date', fontsize=18)\nplt.ylabel('Open Price USD ($)', fontsize=18)\nplt.plot(train['Open'])\nplt.plot(valid[['Open', 'Predictions']])\nplt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\nplt.show()","0c7f0578":"valid[['Open','Predictions']].iloc[:250].plot(figsize=(12,6)).autoscale(axis='x',tight=True);","6af33e19":"# **Data Preprocessing**","e5281e89":"> **Okay, there's no null value, great job**","d0cc69d3":"# **Import Libraries**","ee70f13a":"> **Note : Sorry if my english is bad, hopefully you guys can understand, thanks in advance!**","8ffe0eae":"# **Load Dataset**","203cef72":"# LSTM MODEL","6911d9bb":"## **Setup Libraries**"}}