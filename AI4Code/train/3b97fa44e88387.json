{"cell_type":{"d9416c36":"code","d9497782":"code","3c801a28":"code","3154694e":"code","23fe81cf":"code","86d7128c":"code","51442e2b":"code","eba6c69a":"code","79e4e3c5":"code","41eaa2a6":"code","892affe2":"code","88ebf13f":"code","c60dd882":"code","2d164b13":"code","b77ac39c":"code","c08b91e5":"code","6be28215":"code","7cfd0e3d":"code","f5e7045b":"markdown","e92cce1e":"markdown","f1634045":"markdown","24deb6cb":"markdown","aee29673":"markdown","f5384ecd":"markdown","0d1256d8":"markdown","2577f6ad":"markdown","aeae39bc":"markdown","b83ad2c6":"markdown","2cb245f0":"markdown","53bf75cc":"markdown","d0b5fcc0":"markdown","8e96568e":"markdown","a1c911a7":"markdown","4aafca5d":"markdown","cce40600":"markdown","a6b936c7":"markdown","c1557af7":"markdown","be6cda0d":"markdown","3f1bdb77":"markdown"},"source":{"d9416c36":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\n","d9497782":"# Load train \ntrain = pd.read_csv(\"..\/input\/train.csv\") \n# Load test \ntest= pd.read_csv(\"..\/input\/test.csv\")\n\n# Let's take a look at the data. \nprint(train.shape)  \ntrain.head() # show first 5 elements","3c801a28":"print(test.shape)\ntest.head()","3154694e":"# put labels into y_train\nY_train = train[\"label\"]\n# Drop 'label' column\nX_train = train.drop(labels = [\"label\"],axis = 1)","23fe81cf":"# Let's look at a sample\nimg = X_train.iloc[10].as_matrix()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train.iloc[10,0])\nplt.axis(\"off\")\nplt.show()","86d7128c":"# visualize number of digits classes\nplt.figure(figsize=(12,5))\ng = sns.countplot(Y_train, palette=\"icefire\")\nplt.title(\"Digit Classes\")\nY_train.value_counts()\nY_train.shape","51442e2b":"# Normalize the data (for color - gri)\nX_train = X_train \/ 255.0\ntest = test \/ 255.0\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","eba6c69a":"#Our image already black-white but the data has R-G-B values and we reduce the size.\nimg = X_train.iloc[0].as_matrix()\nimg = img.reshape((28,28))\nplt.imshow(img,cmap='gray')\nplt.title(train.iloc[0,0])\nplt.axis(\"off\")\nplt.show()","79e4e3c5":"# Reshape\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\nprint(\"x_train shape: \",X_train.shape)\nprint(\"test shape: \",test.shape)","41eaa2a6":"# Label Encoding \nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nY_train = to_categorical(Y_train, num_classes = 10)","892affe2":"# Split the train(X) and the validation (Y) set for the fitting\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","88ebf13f":"# \nfrom sklearn.metrics import confusion_matrix\nimport itertools\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential() \n#\nmodel.add(Conv2D(filters = 8, kernel_size = (5,5),padding = 'Same', \n                 activation ='relu', input_shape = (28,28,1)))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.25))\n#\nmodel.add(Conv2D(filters = 16, kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.25))\n# fully connected\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","c60dd882":"# Define the optimizer\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","2d164b13":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","b77ac39c":"epochs = 10  # for better result increase the epochs\nbatch_size = 250","c08b91e5":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=0.5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.5, # Randomly zoom image 5%\n        width_shift_range=0.5,  # randomly shift images horizontally 5%\n        height_shift_range=0.5,  # randomly shift images vertically 5%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)","6be28215":"# Fit the model\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,Y_val), steps_per_epoch=X_train.shape[0] \/\/ batch_size)","7cfd0e3d":"# Plot the loss and accuracy curves for training and validation \nplt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","f5e7045b":"<a id=\"4\"><\/a>\n## Convolutional Neural Network \n* CNN is used for image classification, object detection \n <a href=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/0*-1Pad7loK_dFOUvS.png\"><img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/0*-1Pad7loK_dFOUvS.png\" alt=\"gec2\" border=\"0\"><\/a>","e92cce1e":"<a id=\"1\"><\/a>\n## Loading Data Set\n* We load and visualize the data.","f1634045":"<a id=\"11\"><\/a>\n### Create Model\n* conv => max pool => dropout => conv => max pool => dropout => fully connected (2 layer)\n","24deb6cb":"#### Dropout\n* Dropout is a technique where randomly selected neurons are ignored during training.\n <a href=\"https:\/\/ibb.co\/jGcvVU\"><img src=\"https:\/\/preview.ibb.co\/e7yPPp\/dropout.jpg\" alt=\"dropout\" border=\"0\"><\/a>","aee29673":"<a id=\"8\"><\/a>\n### Flattening\n <a href=\"https:\/\/towardsdatascience.com\/convolutional-neural-networks-from-the-ground-up-c67bb41454e1\"><img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*Lzx2pNLpHjGTKcofsaSH1g.png\" alt=\"flattenigng\" border=\"0\"><\/a>","f5384ecd":"<a id=\"13\"><\/a>\n### Compile Model\n* Categorical crossentropy\n* We use categorical crossentropy. That means that we have multi class.\n <a href=\"https:\/\/ibb.co\/jm1bpp\"><img src=\"https:\/\/preview.ibb.co\/nN3ZaU\/cce.jpg\" alt=\"cce\" border=\"0\"><\/a>\n","0d1256d8":"This kaggle was written under the guidance of [DATAI](https:\/\/www.kaggle.com\/kanncaa1)\n\nhttps:\/\/www.kaggle.com\/kanncaa1\/convolutional-neural-network-cnn-tutorial\n\n# Convolutional Neural Networks (CNN)\n<font color='blue'>\n<br>Content: \n* [Loading the Data Set](#1)\n* [Normalization, Reshape and Label Encoding ](#2)\n* [Train Test Split](#3)\n* [Convolutional Neural Network](#4)\n    * [What is Convolution Operation?](#5)\n    * [Same Padding](#6)\n    * [Max Pooling](#7)\n    * [Flattening](#8)\n    * [Full Connection](#9)\n* [Implementing with Keras](#10)\n    * [Create Model](#11)\n    * [Define Optimizer](#12)\n    * [Compile Model](#13)\n    * [Epochs and Batch Size](#14)\n    * [Data Augmentation](#15)\n    * [Fit the Model](#16)\n    * [Evaluate the Model](#17)\n* [Deep Learning Tutorial for Beginners](https:\/\/www.kaggle.com\/kanncaa1\/deep-learning-tutorial-for-beginners)\n* [Artificial Neural Network with Pytorch](https:\/\/www.kaggle.com\/kanncaa1\/pytorch-tutorial-for-deep-learning-lovers)\n* [Convolutional Neural Network with Pytorch](https:\/\/www.kaggle.com\/kanncaa1\/pytorch-tutorial-for-deep-learning-lovers)\n* [Recurrent Neural Network with Pytorch](https:\/\/www.kaggle.com\/kanncaa1\/recurrent-neural-network-with-pytorch)\n* [Conclusion](#18)\n","2577f6ad":"<a id=\"6\"><\/a>\n### Same Padding\n* As we keep applying convolutional layers, the size of the volume will decrease faster than we would like. In the early layers of our network, we want to preserve as much information about the original input volume so that we can extract those low level features.\n* Input size and output size are same.\n <a href=\"https:\/\/ibb.co\/jUPkUp\"><img src=\"https:\/\/preview.ibb.co\/noH5Up\/padding.jpg\" alt=\"padding\" border=\"0\"><\/a>","aeae39bc":"<a id=\"16\"><\/a>\n### Fit the model","b83ad2c6":"\n<a id=\"5\"><\/a>\n### What is Convolution Operation?\n\n* We have some image and feature detector(3*3)\n* Feature detector does not need to be 3 by 3 matrix. It can be 5 by 5 or 7 by 7.\n* Feature detector = kernel = filter\n* Feauture detector detects features like edges or convex shapes. Example, if out input is dog, feature detector can detect features like ear or tail of the dog.\n* feature map = conv(input image, feature detector). Element wise multiplication of matrices.\n* feature map = convolved feature\n* Stride = navigating in input image.\n* We reduce the size of image and code can runs faster. However, we lost information. \n* We create multiple feature maps because we use multiple feature detectors(filters).\n* Lets look at gimp. Edge detect: [0,10,0],[10,-4,10],[0,10,0]\n <a href=\"https:\/\/imgbb.com\/\"><img src=\"https:\/\/image.ibb.co\/m4FQC9\/gec.jpg\" alt=\"gec\" border=\"0\"><\/a>\n* After having convolution layer we use ReLU to break up linearity. Increase nonlinearity. Because images are non linear.\n <a href=\"https:\/\/ibb.co\/mVZih9\"><img src=\"https:\/\/preview.ibb.co\/gbcQvU\/RELU.jpg\" alt=\"RELU\" border=\"0\"><\/a>","2cb245f0":"<a id=\"14\"><\/a>\n### Epochs and Batch Size\n* Say you have a dataset of 10 examples (or samples). You have a **batch size** of 2, and you've specified you want the algorithm to run for 3 **epochs**. Therefore, in each epoch, you have 5 **batches** (10\/2 = 5). Each batch gets passed through the algorithm, therefore you have 5 iterations **per epoch**.\n* reference: https:\/\/stackoverflow.com\/questions\/4752626\/epoch-vs-iteration-when-training-neural-networks","53bf75cc":"### Summary\n* This is just a image to see the all process, the operation sequence can be change for different models.\n<a href=\"https:\/\/medium.com\/@rohanthomas.me\/convolutional-networks-for-everyone-1d0699de1a9d\"><img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*XbuW8WuRrAY5pC4t-9DZAQ.jpeg\" alt=\"fullyc\" border=\"0\"><\/a>","d0b5fcc0":"<a id=\"10\"><\/a>\n## Implementing with Keras","8e96568e":"<a id=\"17\"><\/a>\n### Evaluate the model\n* Test Loss visualization\n","a1c911a7":"<a id=\"15\"><\/a>\n### Data Augmentation\n* To avoid overfitting problem, we need to expand artificially our handwritten digit dataset\n* Alter the training data with small transformations to reproduce the variations of digit.\n* For example, the number is not centered The scale is not the same (some who write with big\/small numbers) The image is rotated.\n <a href=\"https:\/\/ibb.co\/k24CUp\"><img src=\"https:\/\/preview.ibb.co\/nMxXUp\/augment.jpg\" alt=\"augment\" border=\"0\"><\/a>\n    \n","4aafca5d":"* Our data has 42000 row - 785 columns. The first column is label so tell us the number.The other 784 columns is the pixel's of the images.\n* We use the first label column as a \"Y_train\" for training.\n* After getting the labels we drop the label colums for using \"X_train\" as a training data.","cce40600":"<a id=\"3\"><\/a>\n## Train Test Split\n* We split the data into train and test sets.\n* test size is 10%.\n* train size is 90%.","a6b936c7":"<a id=\"12\"><\/a>\n### Define Optimizer   \n* Adam optimizer: Change the learning rate","c1557af7":"<a id=\"2\"><\/a>\n## Normalization, Reshape and Label Encoding \n* Normalization\n    * We perform a grayscale normalization to reduce the effect of illumination's differences.\n    * To work faster, we perform normalization.\n* Reshape\n    * Train and test images (28 x 28) \n    * We reshape all data to 28x28x1 3D matrices.\n    * Keras needs an extra dimension in the end which correspond to channels. Our images are gray scaled so it use only one channel. \n* Label Encoding  \n    * Encode labels to one hot vectors.(Make 1 the index according to the number.) \n        * .........0 1 2 3 4 5 6 7 8 9 .. index\n        * 2 => [0,0,1,0,0,0,0,0,0,0]  \n        * 4 => [0,0,0,0,1,0,0,0,0,0]","be6cda0d":"<a id=\"9\"><\/a>\n### Full Connection\n* Neurons in a fully connected layer have connections to all activations in the previous layer\n* Artificial Neural Network - ANN\n <a href=\"https:\/\/medium.com\/@rohanthomas.me\/convolutional-networks-for-everyone-1d0699de1a9d\"><img src=\"https:\/\/cdn-images-1.medium.com\/max\/800\/1*DW0Ccmj1hZ0OvSXi7Kz5MQ.jpeg\" alt=\"fullyc\" border=\"0\"><\/a>","3f1bdb77":"<a id=\"7\"><\/a>\n### Max Pooling\n* It makes down-sampling or sub-sampling (Reduces the number of parameters)\n* It makes the detection of features invariant to scale or orientation changes.\n* It reduce the amount of parameters and computation in the network, and hence to also control overfitting. \n <a href=\"https:\/\/ibb.co\/ckTjN9\"><img src=\"https:\/\/preview.ibb.co\/gsNYFU\/maxpool.jpg\" alt=\"maxpool\" border=\"0\"><\/a>"}}