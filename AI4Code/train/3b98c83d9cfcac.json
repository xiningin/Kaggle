{"cell_type":{"8000fba3":"code","5c7090e7":"code","45282406":"code","4271ef93":"code","c0e9531b":"code","b775b509":"code","f2f4aad2":"code","7cdf99fe":"code","b8a63867":"code","d754f434":"code","de55b0a3":"code","29d96c9f":"code","4b5d35a0":"code","7fca6747":"code","8d1b6281":"code","e7c760c5":"code","1225d715":"code","56e00beb":"code","fc191c50":"code","64c9ef78":"code","5ad05748":"code","3972a07f":"code","f112ad0e":"code","1650448e":"code","3e030568":"code","328d0aee":"code","1ca4bcf6":"code","94140fd2":"code","14c1461d":"code","45f32ce1":"code","5c7dcc89":"code","428fd68d":"code","88dba34d":"code","6952ca8e":"code","c83f61af":"code","26a03cc3":"code","5573affa":"code","a228e893":"code","ae794f25":"code","a87e2227":"code","877be773":"code","a1130e3b":"markdown","c1379c4f":"markdown"},"source":{"8000fba3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np    # linear algebra\nimport pandas as pd    # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5c7090e7":"train_data = pd.read_csv('\/kaggle\/input\/task1-base-ml\/train_with_labels.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/task1-base-ml\/test_without_labels.csv')","45282406":"sample_submition = pd.read_csv('\/kaggle\/input\/task1-base-ml\/sample_submition.csv')","4271ef93":"train_data.head()\n# col1, col2, col3, col4 \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430\n# label \u043d\u043e\u043c\u0435\u0440 \u043a\u043b\u0430\u0441\u0441\u0430, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u044d\u0442\u043e\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f.","c0e9531b":"train_data['label'].value_counts()","b775b509":"train_data.tail()","f2f4aad2":"train_data.sample(5)","7cdf99fe":"test_data.head()\n# index -- \u043d\u043e\u043c\u0435\u0440 \u043e\u0431\u044a\u0435\u043a\u0442\u0430","b8a63867":"# \u041f\u0440\u0438\u043c\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430\nsample_submition","d754f434":"test_values_count, _ = sample_submition.shape","de55b0a3":"test_values_count","29d96c9f":"# \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0435 \u043c\u0435\u0442\u043a\u0438\nrandom_answers = np.random.randint(0, 3, test_values_count)\nprint(random_answers)","4b5d35a0":"# \u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c \u0432\u0441\u0435\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443 label \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u043a\nsample_submition['label'] = random_answers","7fca6747":"sample_submition.to_csv('random_submition.csv', index=None)","8d1b6281":"!head random_submition.csv","e7c760c5":"train_data","1225d715":"train_data.values","56e00beb":"size_of_train_data = train_data.shape[0]","fc191c50":"size_of_train_data","64c9ef78":"for i in range(10):\n    random_answers = np.random.randint(0, 3, size_of_train_data)\n    print(\n        (train_data['label'] == random_answers).sum()\/size_of_train_data\n    )","5ad05748":"train_data['label'].value_counts()","3972a07f":"train_data.describe()","f112ad0e":"import matplotlib.pyplot as plt","1650448e":"train_data.hist(bins=100, figsize=(10,10))","3e030568":"plt.figure()\nplt.scatter(train_data['col3'],train_data['col4'])\nplt.show()","328d0aee":"plt.figure()\nplt.scatter(train_data['col3'], train_data['col4'], c=train_data['label'])\nplt.show()","1ca4bcf6":"plt.figure(figsize=(10,6))\nplt.scatter(\n    train_data['col3'],\n    train_data['col4'], \n    c=train_data['label'], alpha=0.3)\nplt.show() \n# 0 - \u0444\u0438\u043e\u043b\u0435\u0442\u043e\u0432\u044b\u0439\n# 1 - \u0437\u0435\u043b\u0451\u043d\u044b\u0439\n# 2 - \u0436\u0435\u043b\u0442\u044b\u0439","94140fd2":"plt.figure(figsize=(10,6))\nplt.scatter(train_data['col2'], train_data['col4'], c=train_data['label'], alpha=0.3)\nplt.show()","14c1461d":"train_data[(train_data['col2']>-10) & (train_data['col2']<10)]['label'].value_counts()","45f32ce1":"random_answers[(train_data['col2']>-10) & (train_data['col2']<10)] = 2","5c7dcc89":"print((train_data['label'] == random_answers).sum()\/size_of_train_data)","428fd68d":"# \u0414\u0435\u043b\u0430\u0435\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430\u0448\u0435\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u0440\u0443\u043a\u0430\u043c\u0438\n\ndef map_item_to_label(item):\n    if item['col2']>-10 and item['col2']<10:\n        return 2\n    return np.random.randint(0, 2)","88dba34d":"for idx, item in train_data.iterrows():\n    print(item['col1'], item['col2'], item['col3'], item['col4'], item['label'])\n    \n    print(item)\n    print('pred label:', map_item_to_label(item))\n    break","6952ca8e":"train_pred_label = train_data.apply(map_item_to_label, axis=1)","c83f61af":"train_pred_label","26a03cc3":"print((train_data['label'] == train_pred_label).sum()\/size_of_train_data)","5573affa":"test_pred_label = test_data.apply(map_item_to_label, axis=1)","a228e893":"test_pred_label","ae794f25":"sample_submition['label'] = test_pred_label","a87e2227":"sample_submition","877be773":"sample_submition.to_csv('more_deterministic_submition.csv', index=None)","a1130e3b":"# \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445","c1379c4f":"# \u041a\u0430\u043a \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0435 Accuracy?"}}