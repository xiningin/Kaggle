{"cell_type":{"5cd3db59":"code","9380579d":"code","c4b555ea":"code","bd3cadb5":"code","e8bf287e":"code","7099c6df":"code","e230b62f":"code","549e39b8":"code","a601885f":"code","2a39fd7b":"code","623baf31":"code","354777a7":"code","9b255d83":"markdown","e2d0c79c":"markdown"},"source":{"5cd3db59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9380579d":"!pip install lofo-importance","c4b555ea":"import pandas as pd\nimport datatable as dt\nfrom sklearn.model_selection import KFold\nfrom lofo import LOFOImportance, Dataset, plot_importance","bd3cadb5":"train_df = dt.fread(\"..\/input\/tabular-playground-series-nov-2021\/train.csv\").to_pandas()","e8bf287e":"train_df","7099c6df":"def reduce_memory_usage(df, verbose=True):\n    numerics = [\"int8\", \"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]\n    start_mem = df.memory_usage().sum() \/ 1024 ** 2\n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == \"int\":\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n            else:\n                if (\n                    c_min > np.finfo(np.float16).min\n                    and c_max < np.finfo(np.float16).max\n                ):\n                    df[col] = df[col].astype(np.float16)\n                elif (\n                    c_min > np.finfo(np.float32).min\n                    and c_max < np.finfo(np.float32).max\n                ):\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n    end_mem = df.memory_usage().sum() \/ 1024 ** 2\n    if verbose:\n        print(\n            \"Mem. usage decreased to {:.2f} Mb ({:.1f}% reduction)\".format(\n                end_mem, 100 * (start_mem - end_mem) \/ start_mem\n            )\n        )\n    return df","e230b62f":" train_df = reduce_memory_usage(train_df)","549e39b8":"sample_df = train_df.sample(frac=0.01, random_state=32)\n# sample_df.sort_values(\"f0\", inplace=True)\n\ncv = KFold(n_splits=5, shuffle=True, random_state=32)\ntarget = \"target\"\nfeatures = [col for col in train_df.columns if col != target]","a601885f":"dataset = Dataset(sample_df, target=target, features=features)","2a39fd7b":"lofo = LOFOImportance(dataset, cv=cv, scoring=\"roc_auc\")\nimportance_df = lofo.get_importance()","623baf31":"importance_df","354777a7":"plot_importance(importance_df, figsize=(12, 20))","9b255d83":"# Referece\n\n- https:\/\/www.kaggle.com\/c\/microsoft-malware-prediction\/discussion\/79415\n- https:\/\/github.com\/aerdem4\/lofo-importance\/issues\/40","e2d0c79c":"# LOFO (Leave One Feature Out)\n\n## Lofo is a method for estimating the importance of a feature.\n\n## Advantage\n- It is model agnostic. You won't need different importance types using for different models. (weights for Logistic Regression, gain for GBDT etc.)\n- It is robust against granular features compared to split importance.\n- Other importance types ignore validation schemes. LOFO depends on the validation scheme. This will allow us to see that Census_OSVersion is not important given that the fold splits are according to time."}}