{"cell_type":{"15668bd2":"code","3d4fcc5b":"code","9c81ffed":"code","e287d3d3":"code","af3a7673":"code","ea060573":"code","cf51d7fe":"code","c5a4eece":"code","f7a318f9":"code","a8221d40":"code","97da8b62":"code","c5c26b7e":"code","322c81df":"markdown","f32235bc":"markdown","c7f0abff":"markdown","4f3d340a":"markdown","2ad3a742":"markdown","bd94fe29":"markdown","4d8103f6":"markdown"},"source":{"15668bd2":"# these are usuful libs for modeling\nfrom keras import models, layers\nimport numpy as np\nfrom keras.utils import to_categorical\nimport pandas as pd\nfrom keras.layers import Convolution2D, MaxPooling2D, Flatten, Dropout, BatchNormalization, Dense, Lambda\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings(\"ignore\")","3d4fcc5b":"import os\nos.chdir('..\/')    # current was '\/kaggle\/working' so we going to backward '\/kaggle'\nos.listdir('input')","9c81ffed":"# reading csvs files\ntrain = pd.read_csv(\"input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"input\/digit-recognizer\/test.csv\")\nsubmisssion = pd.read_csv(\"input\/digit-recognizer\/sample_submission.csv\")","e287d3d3":"# scalling the value in 0-1 , so \/255. \nX = train.iloc[:,1:]\/255.\ny = train.iloc[:,0]\ntest = test\/255.","af3a7673":"# reshaping 784 to 28,28,1\nX = X.values.reshape(train.shape[0],28,28,1)\ntest = test.values.reshape(test.shape[0],28,28,1)","ea060573":"# one hot of target values using keras's to_categorical class\ny = to_categorical(y)\n\n# splits train\/test set \nXtrain, Xtest, ytrain, ytest = train_test_split(X, y, test_size =0.3,random_state=29)","cf51d7fe":"Xtrain.shape, ytrain.shape, Xtest.shape, ytest.shape","c5a4eece":"# in model i am using BatchNormalization so for first step, i menualy normalize the batch\nmean_px = Xtrain.mean().astype(np.float32)\nstd_px = Xtrain.std().astype(np.float32)\n\ndef standardize(x): \n    return (x-mean_px)\/std_px","f7a318f9":"# this is a model with dropouts layers\ndef cnn():\n    model = models.Sequential()\n    model.add(Lambda(standardize,input_shape=(28,28,1)))\n    model.add(Convolution2D(32,(3,3), activation = 'relu'))\n    model.add(BatchNormalization(axis=1))   \n    model.add(Convolution2D(64,(3,3), activation = 'relu'))\n    model.add(MaxPooling2D())\n    model.add(Convolution2D(128,(3,3), activation = 'relu'))\n    model.add(BatchNormalization(axis=1))\n    model.add(Convolution2D(128,(2,2), activation = 'relu'))\n    model.add(MaxPooling2D())\n    model.add(Flatten())\n    model.add(Dense(256, activation='relu'))\n    model.add(Dropout(0.4))\n    model.add(Dense(256, activation='relu'))\n    model.add(Dropout(0.3))\n    model.add(Dense(10, activation='softmax'))          \n    model.compile(optimizer='adam', loss='categorical_crossentropy',\n                  metrics=['accuracy'])\n    return model          ","a8221d40":"classifier = cnn()\n# traing the model with 20 epochs and 1000 batch size\nclassifier.fit(Xtrain, ytrain, epochs=20,batch_size=1000,validation_data=(Xtest,ytest))","97da8b62":"#prediction of submission_test set\nprediction = classifier.predict(test) \npredictions = np.argmax(prediction, axis=1)","c5c26b7e":"# submission\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"working\/simple_cnn_kaggle.csv\", index=False, header=True)\nsubmissions.shape","322c81df":"# 1) Data Collection","f32235bc":"# 4) Prediction and Submission","c7f0abff":"# Digit Recognizer","4f3d340a":"### Thank you , please upvote","2ad3a742":"*upvote if find anything helpful*","bd94fe29":"# 2) Prepare Data for Training","4d8103f6":"# 3) Modeling and Training"}}