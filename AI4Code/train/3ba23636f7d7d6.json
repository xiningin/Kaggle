{"cell_type":{"e0a29f22":"code","ede8705a":"code","225d8cd9":"code","10bef211":"code","90649463":"code","1bf8c031":"code","8d37cfd0":"code","ba13157c":"code","002dfa81":"code","d661536f":"code","5e4e5d99":"code","c35f6cb7":"code","4c5a9da2":"code","2c561813":"code","75350ee4":"code","2c77e8f3":"code","4b9471b8":"code","8f5370d6":"code","dd7a2793":"code","0946e27f":"code","61f58fda":"code","5a442be1":"code","fccf5ebc":"code","bb10d5bb":"code","b614140b":"code","2ff6063b":"code","2aa7ea09":"code","4a376643":"markdown","f6f22613":"markdown","b790a37e":"markdown","e4bd30ad":"markdown","11777769":"markdown","9ca27d0b":"markdown","6a7892a5":"markdown","31a816f1":"markdown","b3c30178":"markdown"},"source":{"e0a29f22":"import tensorflow as tf\nimport numpy as np\nfrom tensorflow import keras\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.utils.vis_utils import plot_model\n\nimport matplotlib.pyplot as plt","ede8705a":"\nmodel = tf.keras.Sequential([keras.layers.Dense(units=1, input_shape=[1])])\nmodel.compile(optimizer='sgd', loss='mean_squared_error',metrics=['mae'])","225d8cd9":"tf.keras.utils.plot_model(model, to_file='model_combined.png')","10bef211":"\nxs = np.array([-1.0,  0.0, 1.0, 2.0, 3.0, 4.0], dtype=float)\nys = np.array([-3.0, -1.0, 1.0, 3.0, 5.0, 7.0], dtype=float)","90649463":"history=model.fit(xs, ys, epochs=100);","1bf8c031":"print(model.predict([10.0]))","8d37cfd0":"# Plot training & validation accuracy values\nplt.plot(history.history['loss'])\n#plt.plot(history.history['val_acc'])\nplt.title('Model mean_squared_error')\nplt.ylabel('mean_squared_error')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","ba13157c":"import tensorflow as tf\nprint(tf.__version__)","002dfa81":"# input data\nmnist = tf.keras.datasets.fashion_mnist\n\n(training_images, training_labels), (test_images, test_labels) = mnist.load_data()\n\nimport matplotlib.pyplot as plt\nplt.imshow(training_images[0])\n#print(training_labels[0])\n#print(training_images[0])\n\n\n# data cleaning\ntraining_images  = training_images \/ 255.0\ntest_images = test_images \/ 255.0\n\n# define model\nmodel = tf.keras.models.Sequential([tf.keras.layers.Flatten(),  # flatten\n                                    \n                                    tf.keras.layers.Dense(128, activation=tf.nn.relu),  # 128 cell \n                                    \n                                    tf.keras.layers.Dense(10, activation=tf.nn.softmax)]) # 10 output\n\n# compile model\nmodel.compile(optimizer = 'Adam', # AdamOptimizer\n              loss = 'sparse_categorical_crossentropy', # loss function\n              metrics=['accuracy']) # accuracy metrics\n\n","d661536f":"# train model\nhistory=model.fit(training_images, training_labels, epochs=20);","5e4e5d99":"# evaluate model\nmodel.evaluate(test_images, test_labels)","c35f6cb7":"# Plot training & validation accuracy values\n#plt.plot(history.history['accuracy'])\nplt.plot(history.history['acc'])\n#plt.plot(history.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","4c5a9da2":"# Plot training & validation accuracy values\nplt.plot(history.history['loss'])\n#plt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","2c561813":"import tensorflow as tf\nfrom keras.callbacks import EarlyStopping, ModelCheckpoint","75350ee4":"callbacks = [\n  # Interrupt training if `val_loss` stops improving for over 2 epochs\n  tf.keras.callbacks.EarlyStopping(patience=2, monitor='val_loss'),\n  # Write TensorBoard logs to `.\/logs` directory\n  tf.keras.callbacks.TensorBoard(log_dir='.\/logs')\n]\n\n# callbacks = [tf.keras.callbacks.EarlyStopping(monitor='acc',mode='auto',baseline=0.95)]","2c77e8f3":"\n# input data\nmnist = tf.keras.datasets.mnist\n(training_images, training_labels), (test_images, test_labels) = mnist.load_data()\n\n\n# data clean\ntraining_images=training_images.reshape(60000, 28, 28, 1)\ntraining_images=training_images \/ 255.0\ntest_images = test_images.reshape(10000, 28, 28, 1)\ntest_images=test_images\/255.0\n\n\n\n# define model\nmodel = tf.keras.models.Sequential([\n  tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)), # 32 filter with 3 by 3\n  tf.keras.layers.MaxPooling2D(2, 2), # max pooling with 2 by 2 select the max value\n  tf.keras.layers.Flatten(), # flatten\n  tf.keras.layers.Dense(128, activation='relu'), # 128 cell\n  tf.keras.layers.Dense(10, activation='softmax') # 10 output\n])\n    \n    \n# complie model   \nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n","4b9471b8":"# train model\nmodel.fit(training_images, training_labels, validation_split = 0.3,epochs=20, callbacks=callbacks);\n","8f5370d6":"# evaluate model\nmodel.evaluate(test_images, test_labels)","dd7a2793":"\nimport tensorflow as tf\nimport os\nimport zipfile\n\nDESIRED_ACCURACY = 0.999\n","0946e27f":"#!wget --no-check-certificate \\\"https:\/\/storage.googleapis.com\/laurencemoroney-blog.appspot.com\/happy-or-sad.zip\" \\-O \"\/tmp\/happy-or-sad.zip\"","61f58fda":"\n# download data\n\n\n\nimport urllib.request\n\nurllib.request.urlretrieve(\"https:\/\/storage.googleapis.com\/laurencemoroney-blog.appspot.com\/horse-or-human.zip\",'horse-or-human.zip')\n\nurllib.request.urlretrieve(\"https:\/\/storage.googleapis.com\/laurencemoroney-blog.appspot.com\/validation-horse-or-human.zip\", \"validation-horse-or-human.zip\")\n\n\nimport os\nimport zipfile","5a442be1":"\nlocal_zip = 'horse-or-human.zip'\nzip_ref = zipfile.ZipFile(local_zip, 'r')\nzip_ref.extractall('..\/output\/horse-or-human')\n\nlocal_zip = 'validation-horse-or-human.zip'\nzip_ref = zipfile.ZipFile(local_zip, 'r')\nzip_ref.extractall('..\/output\/validation-horse-or-human')\nzip_ref.close()\n\n\n\n# call back\nclass myCallback(tf.keras.callbacks.Callback):\n  def on_epoch_end(self, epoch, logs={}):\n    if(logs.get('acc')>DESIRED_ACCURACY):\n      print(\"\\nReached 99.9% accuracy so cancelling training!\")\n      self.model.stop_training = True\n\ncallbacks = myCallback()","fccf5ebc":"\n# input data \n\n# Directory with our training horse pictures\n#train_horse_dir = os.path.join('..\/output\/horse-or-human\/horses')\n\n# Directory with our training human pictures\n#train_human_dir = os.path.join('..\/output\/horse-or-human\/humans')\n\n# Directory with our training horse pictures\n#validation_horse_dir = os.path.join('..\/output\/validation-horse-or-human\/validation-horses')\n\n# Directory with our training human pictures\n#validation_human_dir = os.path.join('..\/output\/validation-horse-or-human\/validation-humans')\n\n\n\n# data cleaning\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# All images will be rescaled by 1.\/255\ntrain_datagen = ImageDataGenerator(rescale=1\/255)\nvalidation_datagen = ImageDataGenerator(rescale=1\/255)\n\n# Flow training images in batches of 128 using train_datagen generator\ntrain_generator = train_datagen.flow_from_directory(\n        '..\/output\/horse-or-human\/',  # This is the source directory for training images\n        target_size=(150, 150),  # All images will be resized to 150x150\n        batch_size=128,\n        # Since we use binary_crossentropy loss, we need binary labels\n        class_mode='binary')\n\n# Flow training images in batches of 128 using train_datagen generator\nvalidation_generator = validation_datagen.flow_from_directory(\n        '..\/output\/validation-horse-or-human\/',  # This is the source directory for training images\n        target_size=(150, 150),  # All images will be resized to 150x150\n        batch_size=32,\n        # Since we use binary_crossentropy loss, we need binary labels\n        class_mode='binary')\n\n","bb10d5bb":"\n# define model\nimport tensorflow as tf\n\nmodel = tf.keras.models.Sequential([\n    # Note the input shape is the desired size of the image 150x150 with 3 bytes color\n    # This is the first convolution\n    tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(150, 150, 3)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    # The second convolution\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # The third convolution\n    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2,2),\n    # The fourth convolution\n    #tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    #tf.keras.layers.MaxPooling2D(2,2),\n    # The fifth convolution\n    #tf.keras.layers.Conv2D(64, (3,3), activation='relu'),\n    #tf.keras.layers.MaxPooling2D(2,2),\n    # Flatten the results to feed into a DNN\n    tf.keras.layers.Flatten(),\n    # 512 neuron hidden layer\n    tf.keras.layers.Dense(512, activation='relu'),\n    # Only 1 output neuron. It will contain a value from 0-1 where 0 for 1 class ('horses') and 1 for the other ('humans')\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n    \n    \n    \n# model summary    \nmodel.summary()\n    \n\n# compile model\nfrom tensorflow.keras.optimizers import RMSprop\n\n\nmodel.compile(loss='binary_crossentropy',\n              optimizer=RMSprop(lr=0.001), # RMSprop optimizer with 0.1% learning rate\n              metrics=['acc'])\n\n\n","b614140b":"# train model\nhistory = model.fit_generator(\n      train_generator,\n      steps_per_epoch=8,  \n      epochs=5,\n      verbose=1,\n      validation_data = validation_generator,\n      validation_steps=8);\n\n\n\n# evaluate model\n#model.evaluate(test_images, test_labels)","2ff6063b":"# Plot training & validation accuracy values\nplt.plot(history.history['acc'])\n#plt.plot(history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","2aa7ea09":"# Plot training & validation accuracy values\nplt.plot(history.history['loss'])\n#plt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","4a376643":" # Class 1  A New Programming Paradigm","f6f22613":"## key concepts\nConvolution:A technique to isolate features in images<br>\nPooling:A technique to reduce the information in an image while maintaining features<br>\nConvolutions improve image recognition:They isolate features in images","b790a37e":"# Course 1 Introduction to TensorFlow for Artificial Intelligence, Machine Learning, and Deep Learning","e4bd30ad":"## key concepts\n Relu\uff1areturns the negative of x It only returns x if x is greater than zero","11777769":"## key concepts\ntraditional programming had Rules and Data In and answer come out<br>\nMachine Learning had Answers and Data In and Rules come out<br>\nDense is A layer of connected neurons<br>\nLoss function Generates a guess Measures how good the current \u2018guess\u2019 is<br>\noptimizer Generates a new and improved guess<br>\nConvergence is The process of getting very close to the correct answer\n\n","9ca27d0b":"#  Class 2  Introduction to Computer Vision","6a7892a5":"# Class 3 Enhancing Vision with Convolutional Neural Networks","31a816f1":"# TensorFlow in Practice Specialization\ncoursera:  https:\/\/www.coursera.org\/specializations\/tensorflow-in-practice<br>\n\nSpecialization CERTIFICATE:https:\/\/www.coursera.org\/account\/accomplishments\/specialization\/certificate\/7HWVLBEQS62E<br>\n\nCourse CERTIFICATE:https:\/\/www.coursera.org\/account\/accomplishments\/certificate\/HVEQ9YGHKMJK<br>\n\nCourse 1 : Introduction to TensorFlow for Artificial Intelligence, Machine Learning, and Deep Learning <br>\ncoursera: https:\/\/www.coursera.org\/learn\/introduction-tensorflow\n\nCourse 2 : Convolutional Neural Networks in TensorFlow <br>\ncoursera: https:\/\/www.coursera.org\/learn\/convolutional-neural-networks-tensorflow \n\nCourse 3 : Natural Language Processing in TensorFlow <br>\ncoursera: https:\/\/www.coursera.org\/learn\/natural-language-processing-tensorflow\n\nCourse 4 : Sequences, Time Series and Prediction <br>\ncoursera: https:\/\/www.coursera.org\/learn\/tensorflow-sequences-time-series-and-prediction\n\n","b3c30178":"#  Class 4 Using Real-world Images"}}