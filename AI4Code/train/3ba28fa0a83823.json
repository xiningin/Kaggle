{"cell_type":{"126d60b9":"code","7dad4626":"code","8fa8bc16":"code","3d2dfe9e":"code","8c03670b":"code","aad79f30":"code","2ecd23a6":"code","15d9dec2":"code","224ddbd6":"code","85709dea":"code","f40de082":"code","0c99cb74":"code","08091aa8":"code","9a3c5e52":"markdown","0f614616":"markdown","76b4d5c9":"markdown","9125f8c8":"markdown","c86cc460":"markdown","ca01e8f8":"markdown","d2065cca":"markdown","b187cba5":"markdown","dd927771":"markdown","19515e38":"markdown","872d2652":"markdown"},"source":{"126d60b9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')","7dad4626":"df = pd.read_csv(\"..\/input\/hr-analytics-job-change-of-data-scientists\/aug_train.csv\")\ndf.head()","8fa8bc16":"df = df.drop(\"enrollee_id\", axis = 1)","3d2dfe9e":"df.describe()","8c03670b":"df.head()","aad79f30":"for i in  df.columns:\n    print(df[i].value_counts())\n    print(\"----------------\")","2ecd23a6":"fig= plt.figure(figsize=(25, 16))\ni = 1\n\nfor val in df.columns:\n    if val not in [\"city\", \"city_development_index\", \"training_hours\", \"target\"]:\n        fig.add_subplot(4, 3, i, frameon=True, )\n        plt.xticks(rotation=45)\n        ax = sns.countplot(x=val, data=df,fill=True, edgecolor = sns.color_palette(\"pastel\"))\n        i+=1\n\nplt.subplots_adjust(top = 2, bottom=0.2, hspace=0.3)","15d9dec2":"from sklearn.preprocessing import LabelEncoder\n\nclass label_encoding:\n    def __init__(self, name):\n        self.name = name\n        self.le = LabelEncoder()\n        df[name] = self.le.fit_transform(df[name].astype('str'))\n        self.give_function()\n    \n    def inverse(self, i):\n        return self.le.inverse_transform([i])\n    \n    def transform(self, col):\n        return self.le.transform(col)\n        \n    def give_function(self):\n        return self.le","224ddbd6":"le = {}\n\ndf=df.fillna(0)\n\nfor val in df.columns:\n    if val not in [\"city_development_index\", \"training_hours\", \"target\"]:\n        le[val] = label_encoding(val)","85709dea":"fig = plt.figure(figsize=(10, 10))\nfig.add_subplot()\nax = sns.heatmap(df.corr(), linewidths=.5, square=True, annot=True)\nplt.show()","f40de082":"test = pd.read_csv(\"..\/input\/hr-analytics-job-change-of-data-scientists\/aug_test.csv\")\n\nenrollee_id = pd.DataFrame(data={'enrollee_id': test[\"enrollee_id\"]})\ntest = test.drop(\"enrollee_id\", axis = 1)\n\ntest['gender'] = test['gender'].fillna('Other')\ntest['enrolled_university'] = test['enrolled_university'].fillna('no_enrollment')\ntest['education_level'] = test['education_level'].fillna('Graduate')\ntest['major_discipline'] = test['major_discipline'].fillna('STEM')\ntest['experience'] = test['experience'].fillna('>20')\ntest['company_size'] = test['company_size'].fillna('50-99')\ntest['company_type'] = test['company_type'].fillna('Pvt Ltd')\ntest['last_new_job'] = test['last_new_job'].fillna('1')\ntest = test.fillna(0)\n\nfor val in test.columns:\n    if val not in [\"city_development_index\", \"training_hours\", \"target\"]:\n        test[val] = le[val].transform(test[val])\n","0c99cb74":"from sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.metrics import confusion_matrix, accuracy_score\n\nclf = LinearDiscriminantAnalysis()\nclf.fit(df.iloc[:, :-1], df.iloc[:, -1])\nprint(\"LinearDiscriminantAnalysis\")\ny_pred = clf.predict(test)\n\nsubmission = pd.DataFrame(data={\"Enrollee_id\": enrollee_id[\"enrollee_id\"], \"target\": y_pred})","08091aa8":"sns.countplot(data=submission, x=\"target\")","9a3c5e52":"# HOPE YOU LIKE IT, THANK YOU :)\n\nHappy to read some suggestions.\n\nPeace \u262e","0f614616":"# MODEL:\n\nAfter using more then 5 models, LDA gave the best *accuracy_score* of ***78%*** with train_data splitted 33%.","76b4d5c9":"# Handling categorical data:\n\nI used *LabelEncoder* class from sklearn to convert data to text, and since in python everything is a object. I have added all object of LabelEncoder class to a dictionary.","9125f8c8":"Using for loop to loop thorugh the columns and printing diffrent(unique) values with its count.","c86cc460":"Plotting correlation garph, but there is not any good benefit.\nAll have approx same corr.","ca01e8f8":"# Reading the dataset:","d2065cca":"# Importing the libraries:","b187cba5":"# Visualisation:\n\nPlotting all the essential column counts.\n\nI have skipped some columns as there count will make things messy.","dd927771":"After reading the CSV, *enrollee_id* is not a usefull feature.","19515e38":"# Pre-processing test data:\n\nI have filled *null* values with the most frequent value of the column in the data(train) using *countplot* plotted above.\n","872d2652":"After plotting count graphs, it is clearly visible most of the columns have one value which is highly frequentas compare to other in same.\n\nExcept of *company_size*, and hence we can fill some null value with the most frequent in the same value."}}