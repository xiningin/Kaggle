{"cell_type":{"2f5408ff":"code","4a44a93c":"code","785828bb":"code","80a76fd7":"code","b67a30a8":"code","9a942d95":"code","734c1836":"code","15954060":"code","034f9c18":"code","6e479da8":"code","0b32a614":"code","348d02c7":"code","72a161bf":"code","523f6638":"code","49bc936b":"code","a7eb9a90":"code","133648b0":"code","b60fa6a5":"code","72f6ffe7":"code","ed5917cd":"code","6393863c":"code","bd456e15":"code","ec5c2288":"code","5470c8e1":"code","42460d2a":"code","b0d3935b":"code","6f40fde3":"markdown","ed426843":"markdown","16e9a20b":"markdown"},"source":{"2f5408ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4a44a93c":"import numpy as np\nimport pandas as pd\nimport datetime\nimport random\n\n# Plots\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Models\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor, BaggingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.linear_model import Ridge, RidgeCV\nfrom sklearn.linear_model import ElasticNet, ElasticNetCV\nfrom sklearn.svm import SVR\nfrom mlxtend.regressor import StackingCVRegressor\nimport lightgbm as lgb\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\n\n# Stats\nfrom scipy.stats import skew, norm\nfrom scipy.special import boxcox1p\nfrom scipy.stats import boxcox_normmax\n\n# Misc\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import scale\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.decomposition import PCA\n\npd.set_option('display.max_columns', None)\n\n# Ignore useless warnings\nimport warnings\nwarnings.filterwarnings(action=\"ignore\")","785828bb":"sample = pd.read_csv(\"..\/input\/daily-temperature-of-major-cities\/city_temperature.csv\")","80a76fd7":"sample.head()","b67a30a8":"print(sample.shape)\nprint(\"-\"*60)\nprint(sample.info())\nprint(\"-\"*60)\nprint(sample.describe())\nprint(\"-\"*60)\nprint(sample.isnull().sum())","9a942d95":"print(sample[\"Year\"].unique())","734c1836":"sample = sample[sample[\"Year\"] != 200]\nsample = sample[sample[\"Year\"] != 201]","15954060":"sns.set()\nplt.figure(figsize=(15,5))\nsns.countplot(y=\"Region\", data=sample)","034f9c18":"# drop 2020 data\n\n\n\n# groupby countries\nafrica = sample.groupby(\"Region\").get_group(\"Africa\")\nasia = sample.groupby(\"Region\").get_group(\"Asia\")\nsouth_pacific = sample.groupby(\"Region\").get_group(\"Australia\/South Pacific\")\neurope = sample.groupby(\"Region\").get_group(\"Europe\")\nmiddle_east = sample.groupby(\"Region\").get_group(\"Middle East\")\nnorth_america = sample.groupby(\"Region\").get_group(\"North America\")\ncarribean = sample.groupby(\"Region\").get_group(\"South\/Central America & Carribean\")","6e479da8":"combine = [\n    africa,\n    asia,\n    south_pacific,\n    europe,\n    middle_east,\n    north_america,\n    carribean\n]\n\nfor dataset in combine:\n    dataset = dataset.query(\"AvgTemperature > -99.0\", inplace=True)","0b32a614":"sns.set()\n\nplt.figure(figsize=(15,5))\nsns.countplot(y=\"Country\", data=africa)\nplt.title(\"Countries of Africa\")","348d02c7":"sns.set()\n\nplt.figure(figsize=(15,5))\nsns.countplot(y=\"Country\", data=asia)\nplt.title(\"Countries of Asia\")","72a161bf":"sns.set()\n\nplt.figure(figsize=(15,5))\nsns.countplot(y=\"Country\", data=south_pacific)\nplt.title(\"Countries of South_pacific\")","523f6638":"sns.set()\n\nplt.figure(figsize=(15,5))\nsns.countplot(y=\"Country\", data=europe)\nplt.title(\"Countries of Europe\")","49bc936b":"sns.set()\n\nplt.figure(figsize=(15,5))\nsns.countplot(y=\"Country\", data=middle_east)\nplt.title(\"Countries of Middle_east\")","a7eb9a90":"sns.set()\n\nplt.figure(figsize=(15,5))\nsns.countplot(y=\"Country\", data=north_america)\nplt.title(\"Countries of North_america\")","133648b0":"sns.set()\n\nplt.figure(figsize=(15,5))\nsns.countplot(y=\"Country\", data=carribean)\nplt.title(\"Countries of Carribean\")","b60fa6a5":"\ndef yearly_temp(dataset):\n    region_yearly_temp =dataset.groupby(\"Year\")[\"AvgTemperature\"].mean()\n    return region_yearly_temp\n\ndef plot_yearly_temp(dataset,title):\n    sns.set()\n    \n    x = dataset.groupby(\"Year\").mean()\n    x = x.index\n    y = yearly_temp(dataset)\n    \n    plt.figure(figsize=(15,4))\n    plt.plot(x, y, marker=\"o\", label=\"Temperature\")\n    plt.xlabel(\"Year\")\n    plt.ylabel(\"AvgTemperature\")\n    plt.legend()\n    \n    plt.title(title)","72f6ffe7":"plot_yearly_temp(africa.query(\"Year<2020\"), \"Africa\")\nplot_yearly_temp(asia.query(\"Year<2020\"), \"Asia\")\nplot_yearly_temp(south_pacific.query(\"Year<2020\"), \"South_pacific\")\nplot_yearly_temp(europe.query(\"Year<2020\"), \"Europe\")\nplot_yearly_temp(middle_east.query(\"Year<2020\"), \"Middle_east\")\nplot_yearly_temp(north_america.query(\"Year<2020\"), \"North_america\")\nplot_yearly_temp(carribean.query(\"Year<2020\"), \"Carribean\")","ed5917cd":"region = {\n    \"Africa\":africa,\n    \"Asia\":asia,\n    \"South_pacific\":south_pacific,\n    \"Europa\":europe,\n    \"Middle_east\":middle_east,\n    \"North_america\":north_america,\n    \"Carribean\":carribean\n}\n\nplt.figure(figsize=(15,5))\n\nfor i, j in zip(region.values(), region.keys()):\n    i = i.query(\"Year<2020\")\n    temp = i.groupby(\"Year\")[\"AvgTemperature\"].mean()\n    \n    x = temp.axes[0]\n    \n    plt.plot(x, temp, marker=\"o\", label=j)\n    plt.xlabel(\"Year\")\n    plt.ylabel(\"AvgTemperature\")\n    plt.title(\"Regions of AvgTemperature\")\n\n    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)\n    ","6393863c":"# total avgtemperature\n\ntotal_avg = sample.groupby(\"Year\").mean()\ntotal_avg = total_avg.query(\"Year<2020\")\n\nsns.set()\n\nplt.figure(figsize=(15,6))\nplt.scatter(total_avg.index, total_avg[\"AvgTemperature\"])\n\nplt.ylabel(\"AvgTemperature\")\nplt.xlabel(\"Year\")\nplt.title(\"Yearly avgtemperature in the world\")","bd456e15":"#seasons\nspring = [3,4,5]\nsummer = [6,7,8]\nautumn = [9,10,11]\nwinter = [12,1,2]\n\ndef seasons_temp(dataset, month):\n    region_temp = dataset[dataset[\"Month\"] == month]\n    region_avg_temp = region_temp.groupby(\"Year\")[\"AvgTemperature\"].mean()\n    return region_avg_temp\n\ndef seasons_yearly_temp(month1, month2, month3, seasons):\n    fig,axs = plt.subplots(3,figsize=(15,10))\n    \n    axs[0].plot(month1.axes[0], month1, marker=\"o\", color=\"blue\")\n    axs[0].set_xlabel(\"Year\")\n    axs[0].set_ylabel(\"AvgTemperature\")\n    axs[0].set_title(\"Month:\" + str(seasons[0]))\n    \n    axs[1].plot(month2.axes[0], month2, marker=\"o\", color=\"red\")\n    axs[1].set_xlabel(\"Year\")\n    axs[1].set_ylabel(\"AvgTemperature\")\n    axs[1].set_title(\"Month:\" + str(seasons[1]))\n    \n    axs[2].plot(month3.axes[0],month3, marker=\"o\", color=\"green\" )\n    axs[2].set_xlabel(\"Year\")\n    axs[2].set_ylabel(\"AvgTemperature\")\n    axs[2].set_title(\"Month:\" + str(seasons[2]))\n    \n    for ax in axs.flat:\n        ax.label_outer()","ec5c2288":"africa_Mar = seasons_temp(africa, spring[0])\nafrica_Apr = seasons_temp(africa, spring[1])\nafrica_May = seasons_temp(africa, spring[2])\n\nseasons_yearly_temp(africa_Mar, africa_Apr, africa_May,spring)","5470c8e1":"africa_Jun = seasons_temp(africa, summer[0])\nafrica_Jul = seasons_temp(africa, summer[1])\nafrica_Aug = seasons_temp(africa, summer[2])\n\nseasons_yearly_temp(africa_Jun, africa_Jul, africa_Aug,summer)","42460d2a":"africa_Sep = seasons_temp(africa, autumn[0])\nafrica_Oct = seasons_temp(africa, autumn[1])\nafrica_Nov = seasons_temp(africa, autumn[2])\n\nseasons_yearly_temp(africa_Sep, africa_Oct, africa_Nov,autumn)","b0d3935b":"africa_Dec = seasons_temp(africa, winter[0])\nafrica_Jan = seasons_temp(africa, winter[1])\nafrica_Feb = seasons_temp(africa, winter[2])\n\nseasons_yearly_temp(africa_Dec, africa_Jan, africa_Feb,winter)","6f40fde3":"# Yearly Temperature","ed426843":"\nThe sample data has unnecessary data in the year column.\n\nIn addition, the average temperature has data such as no data.","16e9a20b":"# Africa"}}