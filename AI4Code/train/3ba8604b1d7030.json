{"cell_type":{"d418ba77":"code","cd5ddabf":"code","fb5abfec":"code","36469e27":"code","a13cf692":"code","bd2fca68":"code","462edfde":"code","a46c568a":"code","a53f297c":"code","1081d1ec":"code","e08e60c1":"code","65a6dab5":"markdown","29baf642":"markdown","c3921e26":"markdown","b8fd095b":"markdown","cdaed0d8":"markdown","553e2ccf":"markdown","6b307a30":"markdown"},"source":{"d418ba77":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd","cd5ddabf":"def sort_data(text):\n        f = open(text, \"r\")\n        lines = f.readlines()\n        f.close()\n\n        grid_row, grid_col, n_drones, max_turns, max_payload = [int(lines[0].split()[i]) for i in range(5)]\n        n_prod_types = int(lines[1])\n        weight_prod_types = lines[2].split()\n        weight_prod_types = [int(i) for i in weight_prod_types]\n        n_wrhs = int(lines[3])\n\n        wrhs_info = []\n        i=4\n        while(i<n_wrhs*2+4):\n            wrhs_loc, num_itms_per_prodtype = lines[i].split(), lines[i+1].split()\n            wrhs_loc = [int(i) for i in wrhs_loc]\n            num_itms_per_prodtype = [int(i) for i in num_itms_per_prodtype]\n            wrhs_info.append([wrhs_loc, num_itms_per_prodtype])\n            i = i+2\n\n        n_orders = int(lines[24])\n        i=25\n        order_info = []\n        while(i<n_orders*3+25):\n            order_loc, n_order_items, prod_type_of_prod_item =  lines[i].split(), lines[i+1].split(), lines[i+2].split()\n            order_loc = [int(i) for i in order_loc]\n            n_order_items = [int(i) for i in n_order_items]\n            prod_type_of_prod_item = [int(i) for i in prod_type_of_prod_item]\n            order_info.append([order_loc, n_order_items, prod_type_of_prod_item])\n            i = i+3\n        return grid_row, grid_col, n_drones, max_turns, max_payload, n_prod_types, weight_prod_types, n_wrhs, wrhs_info, n_orders, order_info\n    \nsns.set()\n\ndata = sort_data('\/kaggle\/input\/hashcode-drone-delivery\/busy_day.in')\ngrid_row, grid_col, n_drones, max_turns, max_payload, n_prod_types, weight_prod_types, n_wrhs, wrhs_info, n_orders, order_info = [data[i] for i in range(11)]","fb5abfec":"#-- Geograhical plot of warehouses and orders\nwrhs_loc = [wrhs_info[i][0] for i in range(len(wrhs_info))]\norder_loc = [order_info[i][0] for i in range(len(order_info))]\n\nplt.figure()\nplt.title(\"Location of orders and warehouses\")\nfor i in order_loc:\n    plt.plot(i[0], int(i[1]), \"-x\", alpha = 0.8)\nfor i in wrhs_loc:\n    plt.plot(i[0], int(i[1]), \"-o\", color = 'green', ms = '10')\nplt.show()\n\n#-- Number of items in each warehouse\nwrhs_n_items = [sum(i[1]) for i in wrhs_info]\nplt.figure()\nplt.title(\"Number of Items in each warehouse\")\nplt.bar(range(len(wrhs_info)), wrhs_n_items)\nplt.show()","36469e27":"class Dataframes():\n\n    def __init__(self):\n        data = sort_data('\/kaggle\/input\/hashcode-drone-delivery\/busy_day.in')\n        self.grid_row, \\\n        self.grid_col, \\\n        self.n_drones, \\\n        self.max_turns, \\\n        self.max_payload, \\\n        self.n_prod_types, \\\n        self.weight_prod_types, \\\n        self.n_wrhs, \\\n        self.wrhs_info, \\\n        self.n_orders, \\\n        self.order_info = [data[i] for i in range(11)]\n\n    def get_df_orders(self):\n        \"\"\" Returns a dataframe with orders location and products needed.\"\"\"\n        x_order_loc = [self.order_info[i][0][0] for i in range(len(self.order_info))]\n        y_order_loc = [self.order_info[i][0][1] for i in range(len(self.order_info))]\n        n_items_per_order = [self.order_info[i][1][0] for i in range(len(self.order_info))]\n        df_orders = pd.DataFrame(list(zip(x_order_loc, y_order_loc, n_items_per_order)),\n                                 columns=[\"X\", \"Y\", \"N of Items\"])\n        return df_orders\n\n    def get_df_wrhs(self):\n        \"\"\" Returns a dataframe with warehouses location and products available.\"\"\"\n        wrhs_x = [self.wrhs_info[i][0][0] for i in range(len(self.wrhs_info))]\n        wrhs_y = [self.wrhs_info[i][0][1] for i in range(len(self.wrhs_info))]\n        n_items_per_product_type = [self.wrhs_info[i][1] for i in range(len(self.wrhs_info))]\n        df_wrhs = pd.DataFrame(list(zip(wrhs_x, wrhs_y, n_items_per_product_type)),\n                               columns=[\"X\", \"Y\", \"Amounts\"])\n        return df_wrhs\n\n# -- Dataframe for Warehouses\ndata = Dataframes()\ndf_wrhs = data.get_df_wrhs()\nprint(\"-----------------------Warehouses dataframe---------------------\")\nprint('\\n', df_wrhs, '\\n')\n\n# -- Dataframe for Orders\ndf_orders = data.get_df_orders()\nprint(\"-----------------------Orders dataframe--------------------------\")\nprint('\\n', df_orders)","a13cf692":"def dist(a, b):\n    \"\"\"Calculates distance between two or more objects.\"\"\"\n    if isinstance(a, np.ndarray) or isinstance(b, np.ndarray):\n        return np.sqrt(((a - b) ** 2).sum(1))\n    return np.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\n\ndef num_turns(self, dist):\n    \"\"\"Calculate number of turns required to cover a certain distance.\"\"\"\n    return math.ceil(dist)","bd2fca68":"class Drone():\n\n    def __init__(self, num, weight_prod_types):\n        self.num = num # number of the drone\n        self.pld_weight = 0 # current drone payload\n        self.cur_pos = [0, 0] # current position of a drone\n        self.turns = 0 # initializing number of turns to zero\n        self.actions = []  # list of drone actions \n        self.state = 'W' # initialize drone state to 'wait'\n        self.weights = np.array(weight_prod_types) \n        self.orders = [] # list of orders that a drone is working on \n        self.amounts = np.zeros(400)\n        self.types = np.arange(400)\n        self.remainder = 0 # spare payload of a drone after loading products \n\n    def __repr__(self):\n        return '(num: ' + str(self.num) + ', ' + 'types: ' + str(self.types[self.amounts>0]) + ', ' + 'amounts: ' +  str(self.amounts[self.amounts>0]) + ')'\n    \n    def compute_weight(self):\n        \"\"\"Returns total weight of all items carried by the drone at the moment.\"\"\"\n        return self.weights[self.types]*self.amounts[self.types]\n\n    def load(self, prod_types, prod_qnty, wrhs):\n        \"\"\"Loads products into a drone.\"\"\"\n        self.state = 'L' \n        self.amounts[prod_types] += 1\n        self.compute_weight()\n        message = []\n        for i in range(prod_types.shape[0]):\n            message.append(f'{self.num} {self.state} {wrhs.num} {prod_types[i]} {prod_qnty[i]}')\n        self.turns += prod_types.shape[0] \n        return message\n\n    def unload(self, prod_types, qnty):\n        self.turns += 1\n\n    def deliver(self, prod_types, prod_qnty, order, orders):\n        \"\"\"Delivers products to the order (unloading process).\"\"\"\n        self.state = 'D'\n        message = []\n        for i in range(prod_types.shape[0]):\n            message.append(f'{self.num} {self.state} {order.num} {prod_types[i]} {prod_qnty[i]}')\n        self.turns += prod_types.shape[0]\n        self.amounts[prod_types] -= prod_qnty\n        self.compute_weight()\n        return message \n\n    def wait(self, n_turns):\n        \"\"\"Drone waits for n turns.\"\"\"\n        self.state = 'W'\n        self.turns += n_turns\n\n    def get_cur_pos(self):\n        \"\"\"Returns current position of a drone.\"\"\"\n        return self.cur_pos\n\n    def update_cur_pos(self, new_pos):\n        self.turns += np.int(np.ceil(dist(self.cur_pos, new_pos)))\n        self.cur_pos = new_pos \n\n    def find_nearest_wh(self, warehouses):\n        \"\"\"Returns the nearest warehouse.\"\"\"\n        wh = np.array(warehouses.positions, dtype=np.float64)\n        wh[(warehouses.check_empty())|warehouses.not_avail] = np.inf\n        d = dist(self.cur_pos, wh)\n        return warehouses.dict[np.argmin(d)]\n\n    def check_pld_weight(self):\n        \"\"\"Checks if the drone is full.\"\"\"\n        return self.pld_weight <= 200\n\n    def select_avail_types(self, wrhs, order):\n        \"\"\"Returns order product types which are available at the warehouse.\"\"\"\n        avail_types = order.prod_types[order.check_avail_types(wrhs)]\n        return avail_types\n\n    def select_avail_quantities(self, avail_types, order, wrhs):\n        \"\"\"Returns the minimum quantity between that available in the warehouse and the one required in order.\"\"\"\n        wrhs_qnty = wrhs.amounts[avail_types] \n        order_qnty = order.amounts[avail_types]\n        selected_qnty = np.column_stack((wrhs_qnty, order_qnty)).min(1)\n        assert np.all(selected_qnty == np.min((wrhs_qnty, order_qnty), 0))\n        return selected_qnty\n\n    def find_nearest_order(self, orders, warehouses, wrhs):  # dictionary of orders (class Orders)\n        \"\"\"Finds the nearest order to the warehouse. \"\"\"\n        if self.orders != []:\n            last_order = self.orders[-1]\n            if last_order.amount>0 and np.any(last_order.check_avail_types(wrhs)):\n                return self.orders[-1], 'last' #54229\n        order_pos = orders.positions.astype(np.float64)\n        c = orders.completed\n        check_avail = warehouses.all_avail_orders[wrhs.num]\n        \n        if c.sum() == 1250:\n            return 'All orders are completed', 'completed'\n        order_pos[(c)|(~check_avail)] = np.inf\n        d = dist(self.cur_pos, order_pos)\n        \n        if np.min(d) == np.inf:\n            order_pos = orders.positions.astype(np.float64)\n            check_avail = warehouses.any_avail_orders[wrhs.num]\n            order_pos[(c)|(~check_avail)] = np.inf\n            d = dist(self.cur_pos, order_pos)\n            if np.min(d) == np.inf:\n                assert order_pos.min() == np.inf\n                wrhs.update_not_avail(warehouses)\n            nearest_order = orders.dict[np.argmin(d)]\n            return nearest_order, 0\n        nearest_order = orders.dict[np.argmin(d)]\n        return nearest_order, 1\n\n    def assign_order(self, order, wrhs, warehouses, orders):\n        \"\"\"Assigns an order to the drone: loads the products into the drone \n           and removes them from the warehouse.\"\"\"\n        self.orders.append(order)\n        avail_types = self.select_avail_types(wrhs, order)\n        avail_qnty = self.select_avail_quantities(avail_types, order, wrhs)\n        \n        if np.sum(self.weights[avail_types]*avail_qnty) <= 200:\n            # if total weight of the order is below 200, the drone takes all the products needed\n            new_types = avail_types\n            new_qnty = avail_qnty\n            payload = self.weights[new_types].sum()\n\n        else:\n            # else, the products are sorted in descending order by weight and the drone picks \n            # the items until the weight exceeds 200. The remainder space is counted. \n            types = np.repeat(avail_types, avail_qnty)\n            weights = self.weights[types]\n            types_sorted = types[weights.argsort()]\n            mask_le_200 = self.weights[types_sorted].cumsum() <= 200\n            new_types_repeated = types_sorted[mask_le_200][::-1]\n            new_types, new_qnty = np.unique(new_types_repeated, return_counts=True)\n            payload = self.weights[new_types_repeated].sum()\n\n            \n        wrhs.remove_product(new_types, new_qnty, warehouses)\n        loading_message = self.load(new_types, new_qnty, wrhs)\n\n        remainder = 200 - payload\n        self.remainder = remainder\n        loading_message_nono = []\n        result_nono = []\n        if remainder>0:\n            order_neighbors = orders.neighbors[order.num]\n            if np.any(order_neighbors):\n                orders_near_order = orders.array[order_neighbors]\n                not_completed = ~orders.completed[order_neighbors]\n                check_types = np.array([np.any(o.check_avail_types(wrhs)) for o in orders_near_order])\n                check_weights = np.array([np.any((self.weights[o.prod_types]<=remainder)) for o in orders_near_order])\n                mask = not_completed & check_types & check_weights\n                orders_near_order = orders_near_order[mask]\n                \n                if orders_near_order.shape[0]>0:\n                    d = [o.amount for o in orders_near_order]\n                    nono = orders_near_order[np.argmax(d)] #nearest order to the nearest order \n                    avail_types_nono = nono.prod_types[wrhs.avail_products[nono.prod_types]]\n                    avail_qnty_nono = self.select_avail_quantities(avail_types_nono, nono, wrhs)\n                    types_nono = np.repeat(avail_types_nono, avail_qnty_nono)\n                    weights_nono = self.weights[types_nono]\n                    sorted_types_nono = types_nono[weights_nono.argsort()]\n                    weights_nono.sort()\n                    mask_le_rem = weights_nono.cumsum() <= remainder\n                    new_types_repeated_nono = sorted_types_nono[mask_le_rem]\n                    new_types_nono, new_qnty_nono = np.unique(new_types_repeated_nono, return_counts=True)\n                    wrhs.remove_product(new_types_nono, new_qnty_nono, warehouses)\n                    loading_message_nono = self.load(new_types_nono, new_qnty_nono, wrhs)\n                    result_nono = new_types_nono, new_qnty_nono, nono\n        return new_types, new_qnty, loading_message + loading_message_nono, result_nono\n\n    def deliver_order(self, types, qnty, order, orders):\n        \"\"\"Delivers the products to the order and checks if the order was completed.\"\"\"\n        self.update_cur_pos(order.position)\n        delivery_message = self.deliver(types, qnty, order, orders)\n        order.remove_prod(types, qnty)\n        assert order.amount >= 0\n        self.remainder = 0\n        self.compute_weight()\n        order.check_completed(self.turns, orders)\n        return delivery_message\n\n    def find_nearest_wh_with_types(self, warehouses, leftover_types):\n        \"\"\"Returns the nearest warehouse with the products needed.\"\"\"\n        leftover_acceptable_types = leftover_types[self.weights[leftover_types]<=self.remainder]\n        avail_acceptable_leftover = np.array([np.any(x[leftover_acceptable_types]) for x in warehouses.avail_products])\n        wh = np.array(warehouses.positions, dtype=np.float64)\n        wh[~avail_acceptable_leftover] = np.inf\n        d = dist(self.cur_pos, wh)\n    \n        if d.min() == np.inf:\n            return 'no_pickup', []\n        index_argmin = np.argmin(d)\n        wh_next_pickup = warehouses.dict[index_argmin]\n        types_in_remainder = leftover_types[wh_next_pickup.avail_products[leftover_types]]\n        types_sorted = types_in_remainder[self.weights[types_in_remainder].argsort()]\n        types_chosen = types_sorted[self.weights[types_sorted].cumsum()<=self.remainder]\n        return wh_next_pickup, types_chosen  \n\n    def assign_pickup(self, wh_next_pickup, types_in_remainder, warehouses):\n        \"\"\"Picks the remaining products of the order from another warehouse.\"\"\"\n        qnty_remainder = np.ones(len(types_in_remainder), dtype=np.int64)\n        wh_next_pickup.remove_product(types_in_remainder, qnty_remainder, warehouses)\n        loading_message = self.load(types_in_remainder, qnty_remainder, wh_next_pickup)\n        assert self.compute_weight().sum() <= 200\n        self.remainder -= self.weights[types_in_remainder].sum()\n        return types_in_remainder, qnty_remainder, loading_message","462edfde":"class Order():\n\n    def __init__(self, num, x, y, amount, types, weight_prod_types):\n        self.amount = amount[0]\n        self.num = num\n        self.position = (x, y)\n        self.completed = False\n        self.turn_order_completed = 0\n        self.all_weights = weight_prod_types\n        self.typelist = np.array(types)\n        self.amounts = np.zeros(400, dtype=np.int32) \n        self.types = np.arange(400, dtype=np.int32)\n        t, a = np.unique(self.typelist, return_counts=True)\n        self.amounts[t] += a\n        self.weights = np.array(weight_prod_types)\n        self.prod_amounts = self.amounts[self.amounts>0]\n        self.prod_types = self.types[self.amounts>0]\n        self.tot_weight = np.sum(self.weights*self.amounts)\n        self.assigned = 0\n\n    def __repr__(self):\n        return '(num: ' + str(self.num) + ', ' + 'n_items: ' + str(\n            self.amount) + ', ' + 'tot_weight: ' + str(\n                self.tot_weight) + ', ' + 'types: ' + str(self.prod_types) + ', ' + 'quantities: ' + str(\n                    self.prod_amounts) + ', ' + 'weights:' + str(self.weights[self.amounts>0]) + ')'\n\n    def remove_prod(self, prod_type, prod_qnty):\n        \"\"\"Removes a product from an order once it is delivered.\"\"\"\n        self.amounts[prod_type] -= prod_qnty\n        self.prod_amounts = self.amounts[self.amounts>0]\n        self.prod_types = self.types[self.amounts>0]\n        t = list(self.typelist)\n        for x in list(np.repeat(prod_type, prod_qnty)):\n            t.remove(x)\n        self.typelist = np.array(t)\n        self.amount -= prod_qnty.sum()\n        self.tot_weight = np.sum(self.weights[self.prod_types]*self.amounts[self.prod_types])\n        \n    def check_completed(self, turn, orders):\n        \"\"\"Checks if the order is completed and saves the turn in which it was completed.\"\"\"\n        if self.amounts.sum() == 0:\n            self.completed = True\n            self.turn_order_completed = turn\n            orders.add_completed(self.num)\n            orders.turn_order_completed[self.num] = self.turn_order_completed\n\n    def check_avail_types(self, wrhs):\n        \"\"\"\"Returns a boolean list for product types available at the warehouse.\"\"\"\n        avail = wrhs.avail_products[self.prod_types]\n        return avail\n\nclass Orders():\n    \"\"\"Auxiliary class for orders which stores positions and states of all the orders.\"\"\"\n    def __init__(self, n_orders, ordersdict):\n        positions = [ordersdict[x].position for x in ordersdict]\n        self.positions = np.array(positions)\n        self.num = np.array([o.num for o in ordersdict.values()])\n        self.array = np.array([o for o in ordersdict.values()])\n        pos = np.array(self.positions)\n        neighbors = (np.sum((pos.reshape((1,1250,2)) - pos.reshape((1250, 1, 2)))**2, 2)<10)\n        ni = np.diag_indices(1250)\n        neighbors[ni] = False\n        self.neighbors = neighbors\n        self.n_orders = n_orders\n        self.dict = ordersdict\n        completed = [ordersdict[x].completed for x in ordersdict]\n        self.completed = np.array(completed)\n        self.turn_order_completed = [ordersdict[x].turn_order_completed for x in ordersdict]\n\n    def __repr__(self):\n        return f'n_orders: {self.n_orders}, completed: {self.completed.sum()}'\n\n    def add_completed(self, ordernum):\n        self.completed[ordernum] = True","a46c568a":"class Product():\n\n    def __init__(self, type, weight):\n        self.type = type\n        self.weight = weight","a53f297c":"class Warehouse():\n\n    def __init__(self, num, x, y, amounts, weight_product_types):\n        # amounts - list of every product type amount, some are zero if that product type is not available\n        # weight_product_types - weights of product types in this warehouse\n        self.num = num\n        self.position = (x, y) \n        self.amounts = np.array(amounts)\n        self.types = np.arange(400)\n        self.avail_products = (self.amounts>0)\n        self.tot_amounts = self.amounts.sum()\n        self.not_avail = False\n        \n    def __repr__(self):\n        return '(num: ' + str(self.num) + ', ' + 'position: ' + str(self.position) + ', ' + 'tot_amount: ' + str(self.tot_amounts) + ')'\n\n    def add_product(self, prod_type, prod_qnty):\n        \"\"\"Adds products to the warehouse.\"\"\"\n        self.prod_amounts.append(prod_qnty)\n\n    def remove_product(self, prod_type, prod_qnty, warehouses):\n        \"\"\"Removes a certain quantity of a product type from a warehouse.\"\"\"\n        self.amounts[prod_type] -= prod_qnty\n        self.avail_products = (self.amounts>0) \n        warehouses.tot_amounts[self.num] = self.amounts.sum()\n        warehouses.avail_products[self.num] =  self.avail_products\n        assert np.all(self.amounts>=0)\n    \n    def update_not_avail(self, warehouses):\n        self.not_avail = True\n        warehouses.not_avail[self.num] = True\n\n    # only update the true ones\n    def update_availability(self,  warehouses, orders):\n        \"\"\"For each warehouse updates the list of orders with all\/any products available\n           at the warehouse.\"\"\"\n        not_completed_orders = np.flatnonzero(~orders.completed)\n        warehouses.all_avail_orders[self.num][orders.completed] = False\n        warehouses.any_avail_orders[self.num][orders.completed] = False\n        avail_orders_any = np.flatnonzero(warehouses.any_avail_orders[self.num])\n        warehouses.all_avail_orders[self.num][not_completed_orders] = np.array([np.all(orders.dict[o].check_avail_types(self)) \n        for o in not_completed_orders]) \n        warehouses.any_avail_orders[self.num][avail_orders_any] = np.array([np.any(orders.dict[o].check_avail_types(self)) \n        for o in avail_orders_any]) \n                \nclass Warehouses():\n    \"\"\"Auxiliary class for warehouses which stores positions of all the warehouses. \n       For each warehouse a dictionary of orders which have all products available at \n       that warehouse and another dictionary of orders which have any of their products available at the warehouse.\"\"\"\n    def __init__(self, n_wrhs, orders, wrhsdict):\n        self.n_wrhs = n_wrhs\n        self.dict = wrhsdict\n        positions = [wrhsdict[x].position for x in wrhsdict]\n        self.tot_amounts = [wrhsdict[x].amounts.sum() for x in wrhsdict]\n        self.positions = positions\n        self.avail_products = [wrhsdict[x].avail_products for x in wrhsdict]\n        self.not_avail = np.array([(wrhsdict[x].not_avail) for x in wrhsdict])\n        self.all_avail_orders = {}\n        for w in self.dict.values():\n            self.all_avail_orders[w.num] = np.array([np.all(\n                o.check_avail_types(w)) for o in orders.dict.values()])\n        self.any_avail_orders = {}\n        for w in self.dict.values():\n            self.any_avail_orders[w.num] = np.array([np.any(\n                o.check_avail_types(w)) for o in orders.dict.values()])\n\n    def check_empty(self):\n        empty_warehouses = [self.dict[x].amounts.sum() <= 0 for x in self.dict]\n        return np.array(empty_warehouses)\n","1081d1ec":"# DRONES\ndrones = [Drone(i, weight_prod_types) for i in range(n_drones)]\ndronesdict = dict(enumerate(drones))\n\n# ORDERS\norderslist = [Order(i, order_info[i][0][0], order_info[i][0][1], order_info[i][1], order_info[i][2], weight_prod_types) for\n          i in range(n_orders)]\nordersdict = dict(enumerate(orderslist))\norders = Orders(n_orders, ordersdict)\n\n# WAREHOUSES\nwrhslist = [Warehouse(i, wrhs_info[i][0][0], wrhs_info[i][0][1], wrhs_info[i][1], weight_prod_types) for i in\n        range(n_wrhs)]\nwrhsdict = dict(enumerate(wrhslist))\nwarehouses = Warehouses(n_wrhs, orders, wrhsdict)\n\n# Drones must start a wharehouse 0\n# then move 3 drones to each warehouse\nfor i in dronesdict:\n    dronesdict[i].update_cur_pos(wrhsdict[0].position)\n    dronesdict[i].update_cur_pos(wrhsdict[i%10].position)\n\ncompleted = 0\nmessage = 0\nno_type = 0\nremainder = 0\ntotal_message = []\ndrone_turns = np.array([x.turns for x in dronesdict.values()])\n\nwhile completed<1251:\n    loading_message_r = []\n    drone = dronesdict[np.argmin(drone_turns)]\n    nearest_warehouse = drone.find_nearest_wh(warehouses)\n    drone.update_cur_pos(nearest_warehouse.position)\n        \n    nearest_warehouse.update_availability(warehouses, orders)\n    nearest_order, all = drone.find_nearest_order(orders, warehouses, nearest_warehouse)\n    if nearest_order == 'All orders are completed':\n        message = 'DONE'\n        break\n    types, qnty, loading_message, nono = drone.assign_order(nearest_order, nearest_warehouse, warehouses, orders)\n    nearest_warehouse.update_availability(warehouses, orders)\n    if types.shape[0]>0:\n        delivery_message = drone.deliver_order(types, qnty, nearest_order, orders)\n        print(f'completed : {orders.completed.sum()}', f'turn: {drone.turns}')\n        if len(nono)>0:\n            types_nono, qnty_nono, order_nono = nono\n            delivery_message_nono = drone.deliver_order(types_nono, qnty_nono, order_nono, orders)\n            delivery_message += delivery_message_nono\n        total_message.append(loading_message + delivery_message)\n        assert len(loading_message) == len(delivery_message)\n    else: \n        print('no_type')\n        no_type += 1\n    drone_turns[drone.num] = drone.turns\n    completed = orders.completed.sum()\nif message == 'DONE':\n    print(f'warehouses: {warehouses.dict}')\n    final_message = []\n    for x in total_message:\n        final_message.extend(x)\n    n_lines = len(final_message)\n#     print(f'message: {total_message}')\n    max_turns_drones = np.max(drone_turns)\n    print(f'max number of turns: {max_turns_drones}') \n    print(f'number of cycles with 0 products delivered: {no_type}')\n    turns_orders_completed = np.array(orders.turn_order_completed)\n    score = np.sum(np.ceil(((max_turns_drones-turns_orders_completed)\/max_turns_drones)*100))\n    print(f'score: {score}')","e08e60c1":"pd_message = pd.concat((pd.Series(n_lines), pd.Series(final_message)), ignore_index = True)\npd_message.to_csv('submission.csv', index = False, header = False)","65a6dab5":"## Problem understanding \n\nThe Internet has profoundly changed the way we buy things, but the online shopping of today is likely not the end of that change; after each purchase we still need to wait multiple days for physical goods to be carried to our doorstep. This is where drones come in \u00ad autonomous, electric vehicles delivering online purchases. Flying, so never stuck in traffic. As drone technology improves every year, there remains a major issue: how do we manage and coordinate all those drones?","29baf642":"## Task\n\nGiven a hypothetical fleet of drones, a list of customer orders and availability of the individual products in warehouses, the task is to schedule the drone operations so that the orders are completed as soon as possible.\n\nDescription of output variables (defined according to the Hashcode instructions \"File Format\"):\n- grid_row, int, - number of rows in the grid\n- grid_col, int, - number of columns in the grid\n- n_drones, int, - number of drones available\n- max_turns, int, - maximum length of the simulation in \"turns\"\n- max_payload, int, - maximum load that a drone can carry\n\n- n_prod_types, int, P - total number of different product types available in wharehouses\n- weight_prod_types, int - list of len P, weight of each of the different product types.\n- n_wrhs, int, - total number of warehouses\n\n- wrhs_info, int list of len n_whrs, - each element [whrs_loc, num_itms_per_prodtype] of the array contains the location of the warehouse and the number of items of each product type in the warehouse.\n\n *Example: the first warehouse\n wrhs_info[0] = [[113, 179], [0, 0, 5, 1, 0, 0, 0, 0, 2, 0, 4, 0, 0, 0, 0, 8, 11, 5, 0, ...]]*\n\n- n_orders, int, - total of number of order to be completed.\n- order_info, int - list of len n_orders, each element [order_loc, n_order_items, prod_type_of_prod_item] of the array contains the location of the order, the number of order product items and finally the the product types of the product items.\n\n *Example: the first order\n order_info[0] = [[340, 371], [8], [226, 183, 6, 220, 299, 280, 12, 42]]*\n\n","c3921e26":"## EDA","b8fd095b":"## Definition of classes","cdaed0d8":"![](https:\/\/www.skygrid.com\/wp-content\/uploads\/2020\/04\/package-delivery.png) ","553e2ccf":"## General approach\n\nThe main idea of the algorithm is the following:\\\n1) Each drone finds the nearest warehouse and goes there\\\n2) Next, the drone finds the nearest order whose products are available at the current warehouse and gets assigned to that order\\\n3) The drone takes the products available at the warehouse and if it has some spare space ('remainder') it looks for another nearest warehouse with the products needed for the current order. If there's such a warehouse then the drone goes there to pick up the missing products types\\\n4) The drone delivers the order (the order may be still incomplete) and again looks for the nearest warehouse","6b307a30":"## Simulation"}}