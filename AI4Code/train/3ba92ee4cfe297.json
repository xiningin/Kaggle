{"cell_type":{"c81ad4eb":"code","7ccb8003":"code","fcb61b9e":"code","937018d0":"code","ee2f7002":"code","34dfa052":"code","460760a5":"code","d5fc5579":"code","941c5dbe":"code","d600719e":"code","273111c7":"code","235e2612":"code","405ebac7":"code","3eb302d9":"code","c7da2279":"code","31390e88":"code","42024f85":"code","9991a30e":"code","66dde364":"code","43ebfb4d":"code","8a3a616a":"code","1eeb8e59":"code","698b69a8":"code","b526f6e8":"code","f4427462":"code","26f3d54a":"code","47b6a726":"code","a8a5fe9a":"code","a6c676b9":"code","55cd6f70":"code","2de0e161":"code","17a16dd0":"code","db7bb09b":"code","83b1812f":"code","ac124041":"code","de957e06":"code","c4002735":"code","1609b56c":"markdown","36bbae99":"markdown","2f4f8737":"markdown","163c9cf2":"markdown","e5d66eb8":"markdown","a2f2e47a":"markdown","23984668":"markdown","935b3fe0":"markdown","5780863f":"markdown"},"source":{"c81ad4eb":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom imblearn.over_sampling import SMOTE\n\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px","7ccb8003":"data = pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","fcb61b9e":"data.isnull().sum(axis=0)","937018d0":"fig = make_subplots(rows=5, cols=2)\nfig.add_trace(go.Bar(x=data.gender.value_counts().index, y=data.gender.value_counts().values, name=\"Gender\"), row=1, col=1)\nfig.add_trace(go.Histogram(x=data.age, name=\"Age\"), row=1, col=2)\nfig.add_trace(go.Bar(x=data.hypertension.value_counts().index, y=data.hypertension.value_counts().values, name=\"HyperTension\"), row=2, col=1)\nfig.add_trace(go.Bar(x=data.heart_disease.value_counts().index, y=data.heart_disease.value_counts().values, name=\"heart_disease\"), row=2, col=2)\nfig.add_trace(go.Bar(x=data.ever_married.value_counts().index, y=data.ever_married.value_counts().values, name=\"ever_married\"), row=3, col=1)\nfig.add_trace(go.Bar(x=data.work_type.value_counts().index, y=data.work_type.value_counts().values, name=\"work_type\"), row=3, col=2)\nfig.add_trace(go.Bar(x=data.Residence_type.value_counts().index, y=data.Residence_type.value_counts().values, name=\"Residence_type\"), row=4, col=1)\nfig.add_trace(go.Histogram(x=data.avg_glucose_level, name=\"avg_glucose_level\"), row=4, col=2)\nfig.add_trace(go.Bar(x=data.smoking_status.value_counts().index, y=data.smoking_status.value_counts().values, name=\"smoking_status\"), row=5, col=1)\nfig.add_trace(go.Bar(x=data.stroke.value_counts().index, y=data.stroke.value_counts().values, name=\"stroke\"), row=5, col=2)\nfig.show()","ee2f7002":"other_index = data[data['gender'] == 'Other'].index\ndata = data.drop(other_index)","34dfa052":"px.histogram(data, x='bmi', color='stroke')","460760a5":"bmi_mean = round(data.bmi.mean(skipna=True),1)\ndata['bmi'] = data['bmi'].fillna(bmi_mean)\ndata.bmi.isnull().any()","d5fc5579":"px.bar(data, x='smoking_status', color='work_type')","941c5dbe":"data.loc[(data['smoking_status'] == 'Unknown') & (data['work_type'] == 'children'), 'smoking_status'] = 'never smoked'","d600719e":"px.bar(data, x='smoking_status', color='work_type')","273111c7":"gender_dummy = pd.get_dummies(data.gender)\never_married_dummy = pd.get_dummies(data.ever_married)\nwork_type_dummy = pd.get_dummies(data.work_type)\nResidence_type_dummy = pd.get_dummies(data.Residence_type)","235e2612":"sc = StandardScaler()\nsc.fit(data[['age', 'avg_glucose_level', 'bmi']])","405ebac7":"data[['age', 'avg_glucose_level', 'bmi']] = sc.transform(data[['age', 'avg_glucose_level', 'bmi']])\ndata = pd.concat([data, gender_dummy, ever_married_dummy,work_type_dummy,Residence_type_dummy], axis='columns')\ndata = data.drop(['gender','ever_married','work_type','Residence_type'], axis='columns')","3eb302d9":"smoke_train = data.copy()","c7da2279":"smoke_tr = smoke_train.loc[smoke_train['smoking_status'] != 'Unknown', :]\nsmoke_te = smoke_train.loc[smoke_train['smoking_status'] == 'Unknown', :]","31390e88":"smoke_x = smoke_tr.drop(['smoking_status'], axis='columns')\nsmoke_y = smoke_tr['smoking_status']","42024f85":"smoke_y.isnull().any()","9991a30e":"rf = RandomForestClassifier()\nrf.fit(smoke_x, smoke_y)","66dde364":"smoke_te = smoke_te.drop(['smoking_status'], axis='columns')","43ebfb4d":"smoke_pred = rf.predict(smoke_te)\nsmoke_te['smoking_status'] = smoke_pred","8a3a616a":"data_pre = pd.concat([smoke_tr, smoke_te], axis='rows')","1eeb8e59":"data_pre.isnull().any()","698b69a8":"data_pre['stroke'].value_counts()","b526f6e8":"smoking_status_dummy = pd.get_dummies(data_pre.smoking_status)","f4427462":"data_pre = pd.concat([data_pre, smoking_status_dummy], axis='columns')\ndata_pre = data_pre.drop(['smoking_status'], axis='columns')\ndata_pre","26f3d54a":"sm = SMOTE(random_state=0)\n\nX_train = data_pre.drop(['stroke'], axis='columns')\ny_train = data_pre['stroke']\n\nX_train_res, y_train_res = sm.fit_resample(X_train, y_train.ravel())","47b6a726":"print(X_train_res.shape)\nprint(y_train_res.shape)\nprint(sum(y_train_res == 1))\nprint(sum(y_train_res == 0))","a8a5fe9a":"import itertools\nimport matplotlib.pyplot as plt\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=0)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        #print(\"Normalized confusion matrix\")\n    else:\n        1#print('Confusion matrix, without normalization')\n\n    #print(cm)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","a6c676b9":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, precision_recall_curve, auc, roc_auc_score, roc_curve, recall_score, classification_report, accuracy_score","55cd6f70":"lr_cv_param = {'C': list(range(1,16))}\nlr = LogisticRegression()\nclf = GridSearchCV(lr, lr_cv_param, cv=5, verbose=5, n_jobs=3)\nclf.fit(X_train_res, y_train_res.ravel())","2de0e161":"clf.best_params_","17a16dd0":"lr1 = LogisticRegression(C=4, penalty='l2', verbose=5)\nlr1.fit(X_train_res, y_train_res.ravel())","db7bb09b":"y_train_pre = lr1.predict(X_train)\n\ncnf_matrix_tra = confusion_matrix(y_train, y_train_pre)\nprint(round(accuracy_score(y_train,y_train_pre),2), '%')\n\nclass_names = [0,1]\nplt.figure()\nplot_confusion_matrix(cnf_matrix_tra , classes=class_names, title='Confusion matrix')\nplt.show()","83b1812f":"rf = RandomForestClassifier()\nrf_param_grid = {'n_estimators' : list(range(5,16)), 'max_depth' : list(range(5,16))}\nrf_grid = GridSearchCV(estimator=rf,\n                      param_grid=rf_param_grid,\n                      scoring='accuracy',\n                      cv=4,\n                      return_train_score=True)\n\nrf_grid.fit(X_train_res, y_train_res.ravel())","ac124041":"rf_grid.best_params_","de957e06":"rf_best = RandomForestClassifier(max_depth=15, n_estimators=15)\nrf_best.fit(X_train_res, y_train_res.ravel())","c4002735":"y_train_pre = rf_best.predict(X_train)\n\ncnf_matrix_tra = confusion_matrix(y_train, y_train_pre)\nprint(round(accuracy_score(y_train,y_train_pre),2), '%')\n\nclass_names = [0,1]\nplt.figure()\nplot_confusion_matrix(cnf_matrix_tra , classes=class_names, title='Confusion matrix')\nplt.show()","1609b56c":"> For data analysis, I will predict 'Unknown' type using randomforest","36bbae99":"### 6. Randomforest","2f4f8737":"### 2. Read data and EDA using plotly","163c9cf2":"### 3. Data Preprosessing","e5d66eb8":"> Define confusion_matrix plot function.","a2f2e47a":"### 1. Load library","23984668":"### 4. SMOTE (Unbalancing stroke data)","935b3fe0":"### 5. LogisticRegression","5780863f":"> In general, children is 'never smoked' category.\n\n> So, If work_types are children, it can be modified from 'Unknown' to 'never smoked'."}}