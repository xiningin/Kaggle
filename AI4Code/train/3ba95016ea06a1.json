{"cell_type":{"7cc25846":"code","d6e50a13":"code","759edaad":"code","7a94d68a":"code","66a9d703":"code","0b743a4d":"code","aa9c5cfa":"code","75e4ca71":"code","5f5f0892":"code","21d21244":"code","c705d61b":"code","3de1306f":"code","8f85edf8":"code","caa63517":"code","7e2d509d":"code","a73ad16a":"code","a5bec440":"code","0e270967":"code","6b4df590":"code","bb79070d":"code","74aa3f52":"code","abd4b4ef":"code","b6ef9841":"code","fc20f0ba":"code","d6c9354a":"code","8296056d":"code","c0080b1a":"code","22854114":"code","a6b59ccb":"code","69dd69a5":"markdown","14f7dcc2":"markdown","49a72d63":"markdown","676b38b0":"markdown","d8a02f62":"markdown","20a1a07e":"markdown","b016ee75":"markdown","3878697c":"markdown","05357a36":"markdown","7fc74d84":"markdown","ab226e49":"markdown","f5538b65":"markdown","7529940c":"markdown","04c57af9":"markdown"},"source":{"7cc25846":"# importing required libraries\n\n# Data analysis and visualization\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Classification model \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Model evaluation\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import precision_score, recall_score, f1_score\n","d6e50a13":"iris_data = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\niris_data.head(10)","759edaad":"iris_data[\"Species\"].value_counts()","7a94d68a":"len(iris_data)","66a9d703":"iris_data[\"Species\"].value_counts()","0b743a4d":"iris_data[\"Species\"].value_counts().plot(kind = \"bar\",color = [\"red\",\"green\",\"blue\"]);","aa9c5cfa":"# Checking for null data\n\niris_data.isna().sum()","75e4ca71":"# Statistical description\n\niris_data.describe()","5f5f0892":"# Fixing the Plot size\nplt.figure(figsize=(10,6))\n\n# Scatter plot for 3 different types\nplt.scatter(iris_data.SepalLengthCm[iris_data.Species == \"Iris-setosa\"],\n            iris_data.SepalWidthCm[iris_data.Species == \"Iris-setosa\"],\n            c=\"red\")\n\nplt.scatter(iris_data.SepalLengthCm[iris_data.Species == \"Iris-versicolor\"],\n            iris_data.SepalWidthCm[iris_data.Species == \"Iris-versicolor\"],\n            c=\"green\")\nplt.scatter(iris_data.SepalLengthCm[iris_data.Species == \"Iris-virginica\"],\n            iris_data.SepalWidthCm[iris_data.Species == \"Iris-virginica\"],\n            c=\"blue\")\n\n#Labeling the plot\nplt.title(\"Sepal Length and Sepal Width: types of iris flowers\")\nplt.xlabel(\"Sepal Length\")\nplt.ylabel(\"Sepal witdh\")\nplt.legend([\"Setosa\",\"Versicolor\",\"Virginica\"]);","21d21244":"# Fixing the Plot size\nplt.figure(figsize=(10,6))\n\n# Scatter plot for 3 different types\nplt.scatter(iris_data.PetalLengthCm[iris_data.Species == \"Iris-setosa\"],\n            iris_data.PetalWidthCm[iris_data.Species == \"Iris-setosa\"],\n            c=\"red\")\n\nplt.scatter(iris_data.PetalLengthCm[iris_data.Species == \"Iris-versicolor\"],\n            iris_data.PetalWidthCm[iris_data.Species == \"Iris-versicolor\"],\n            c=\"green\")\nplt.scatter(iris_data.PetalLengthCm[iris_data.Species == \"Iris-virginica\"],\n            iris_data.PetalWidthCm[iris_data.Species == \"Iris-virginica\"],\n            c=\"blue\")\n\n#Labeling the plot\nplt.title(\"Petal Length and Petal Width: types of iris flowers\")\nplt.xlabel(\"Petal Length\")\nplt.ylabel(\"Petal witdh\")\nplt.legend([\"Setosa\",\"Versicolor\",\"Virginica\"]);","c705d61b":"# Distribution of data\n\niris_data.SepalLengthCm.plot.hist();","3de1306f":"iris_data.SepalWidthCm.plot.hist();","8f85edf8":"iris_data.PetalLengthCm.plot.hist();","caa63517":"iris_data.PetalWidthCm.plot.hist();","7e2d509d":"iris_data.corr()","a73ad16a":"# Visual \ncorr_mat = iris_data.corr()\nfig, ax = plt.subplots(figsize = (15,10))\nax = sns.heatmap(corr_mat,\n                 annot=True,\n                 linewidths=0.5,\n                 fmt=\".2f\",\n                 cmap=\"YlGnBu\");","a5bec440":"ex = {'Iris-setosa':1,'Iris-versicolor':2,'Iris-virginica':3}\niris_data.replace({'Species':ex},inplace=True)","0e270967":"# Splitting the data\nx = iris_data.drop(\"Species\",axis = 1)\ny = iris_data[\"Species\"]","6b4df590":"x","bb79070d":"y","74aa3f52":"# Spliting the data into train and test dataset\n\n# to reproduce the exact data chosen\nnp.random.seed(42) \n\n# Actual splitting\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)","abd4b4ef":"len(x_train),len(x_test)","b6ef9841":"len(y_train),len(y_test)","fc20f0ba":"# Fitting the model\nmodels = {\n          \"Logistic Regression\": LogisticRegression(solver='liblinear'), \n          \"KNN\": KNeighborsClassifier(),\n          \"Random Forest\": RandomForestClassifier(),\n          \"Support Vector\": SVC(),\n          \"Decision trww\": DecisionTreeClassifier()\n          }\ndef fit_and_score(models, x_train, x_test, y_train, y_test):\n    \"\"\"\n    Fits and evaluates given machine learning models.\n    models : a dict of different Scikit-Learn machine learning models\n    X_train : training data\n    X_test : testing data\n    y_train : labels assosciated with training data\n    y_test : labels assosciated with test data\n    \"\"\"\n    # Random seed for reproducible results\n    np.random.seed(42)\n    # Make a list to keep model scores\n    model_scores = {}\n    # Loop through models\n    for name, model in models.items():\n        # Fit the model to the data\n        model.fit(x_train, y_train)\n        # Evaluate the model and append its score to model_scores\n        model_scores[name] = model.score(x_test, y_test)\n    return model_scores","d6c9354a":"model_scores = fit_and_score(models = models,\n                             x_train = x_train,\n                             x_test = x_test,\n                             y_train = y_train,\n                             y_test = y_test)\n\nmodel_scores","8296056d":"model_compare = pd.DataFrame(model_scores, index = [\"accuracy\"])\nmodel_compare.T.plot.bar();","c0080b1a":"# we Will do the evaluation for SVM alone\nmodelx = SVC()\nmodelx.fit(x_train,y_train)\ny_pred = modelx.predict(x_test)\n\ny_pred","22854114":"# Confusion matrix\n\ndef plot_conf_mat(y_test,y_preds):\n    fig, ax = plt.subplots(figsize=(3,3))\n    ax = sns.heatmap(confusion_matrix(y_test,y_preds),\n                     annot = True,\n                     cbar = False)\n    \n    plt.xlabel(\"Predicted label\")\n    plt.ylabel(\"True label\")\n    \nplot_conf_mat(y_test,y_pred)","a6b59ccb":"print(classification_report(y_test,y_pred))","69dd69a5":"## Model Evaluation\n","14f7dcc2":"#### Finding the correlation of the data","49a72d63":"There are 3 types and each has 50 data sets","676b38b0":"### Defining the problem:","d8a02f62":"no null data","20a1a07e":"Our main aim in this problem is to classify which type of iris flower\nThere are three type of iris flower types\n\n* Setosa\n* Versicolor\n* Virginica\n\nthis classification should be based on the following parameters\n\n* Sepal length(cm)\n* Sepal width(cm)\n* Petal length(cm)\n* Petal width(cm)","b016ee75":"there are totally 150 data","3878697c":"# Conclution\n\nin this given data set we got 100% accuracy.","05357a36":"1 - Iris-setosa\n\n2 - Iris-versicolor\n\n3 - Iris-virginica\n","7fc74d84":"## Modeling","ab226e49":"### Petal Length and Petal Width: types of iris flowers","f5538b65":"### Sepal Length and Sepal Width: types of iris flowers","7529940c":"# Famous Iris classification\n\nthis dataset is from kaggle : \"https:\/\/github.com\/HK2226\/ML-Programs\/blob\/main\/iris\/Iris.csv\"\n\n> To solve this problem we are going to use the following methodology:\n\n* Defining the problem\n* Data analysis\n* Data visualization\n* Chosing the model\n* evaluating","04c57af9":"### Data Analysis and Data Visualization:"}}