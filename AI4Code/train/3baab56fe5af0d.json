{"cell_type":{"fa32968e":"code","85d2724a":"code","fd27a33b":"code","0802d35f":"code","fae6ef40":"code","d0c4caa3":"code","e83a1abb":"code","72b77adf":"code","4d85ab61":"code","e9b1448b":"code","88dfa93c":"code","140686dc":"code","2db654ac":"code","94e163a0":"code","6cbdf6f2":"code","efd31642":"code","f4030af6":"code","6c4f8683":"code","7f7b5b69":"code","9968ca11":"code","dd59d915":"code","3704091f":"code","e7b9a212":"code","60944092":"code","f77ea886":"code","c227b44a":"code","e6743ac1":"markdown","7a1581a3":"markdown","743edd2a":"markdown","8a983efb":"markdown","d71de643":"markdown","af571740":"markdown","3bc74c0b":"markdown","26647a2f":"markdown","40790b46":"markdown","f1c62a23":"markdown","b1c2e40e":"markdown","06930991":"markdown","ad67a6b5":"markdown","94424d35":"markdown","4e408403":"markdown","7d23e382":"markdown","bf951592":"markdown","5b662b8f":"markdown","e1648f19":"markdown","64fbf52c":"markdown","03909886":"markdown","eb5a7d92":"markdown"},"source":{"fa32968e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","85d2724a":"import datetime\nfrom tabulate import tabulate # to display data in a Stylish way\n\n#We Introduce some Variable that will hold File locations and name of \n #each city as a string for later use, \n\n\nCITY_DATA = { 'chicago': \"..\/input\/udacity-us-bikeshare-data\/chicago.csv\",\n              'new york city': \"..\/input\/udacity-us-bikeshare-data\/new_york_city.csv\",\n              'washington': \"..\/input\/udacity-us-bikeshare-data\/washington.csv\" }\n\ncities_list = ['chicago','new york city','washington']\n\n#we add 2 more lists for days of the week and for the name of the 6 months that we have data on\nmonth_list = ['january','february','march','april','may','june']\n\nday_list = ['sunday','monday','tuesday','wednesday','thursday','friday','saturday']","fd27a33b":"def load_data(city):\n    \"\"\"\n    Load Data for the specified city without any filter\n    Args:\n        (str) city - name of the city to analyze\n    Returns:\n        df - Pandas DataFrame containing city data with no filter applied\n    \"\"\"\n    df = pd.read_csv(CITY_DATA[city])\n\n    return df","0802d35f":"def filter_data(df,month, day,filter_type):\n    \"\"\"\n    Loads data for the specified city and filters by month and day if applicable.\n\n    Args:\n        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n    Returns:\n        df - Pandas DataFrame containing city data filtered by month and day\n    \"\"\"\n\n    df['Start Time'] = pd.to_datetime(df['Start Time'])\n     # First we extract the month , day of the week and hour from Start Time into a seperate column:\n    df['Month'] = df['Start Time'].dt.month\n    # ------- For Python version 3.8.8 I used [ day_name ] instead of [ weekday_name ]\n    df['day_of_the_week'] = df['Start Time'].dt.day_name()\n    df['hour'] = df['Start Time'].dt.hour\n    if filter_type.lower() == \"both\" or filter_type.lower() == \"month\" :\n        df = df[df['Month'] == (month_list.index(month)+1)]\n    if filter_type.lower() == \"both\" or filter_type.lower() == \"day\":\n        df = df[df['day_of_the_week'] == day.title()]\n\n    #df.to_csv('bikesharefiltered.csv')\n    return df","fae6ef40":"def Convert_time(trip_duration):\n\n    \"\"\" Convert trip duration time from Seconds to Hours\/minutes\/Seconds\n        Parameters:\n            (str) trip_duration - (in seconds)\n        returns:\n            (str) duration - (00 h 00 min 00 sec)\n    \"\"\"\n    duration = \"\"\n    hour = int(trip_duration) \/\/ 3600\n    minutes = (int(trip_duration) % 3600)\/\/60\n    seconds = int(trip_duration) - (minutes*60) -(hour*3600)\n    if hour == 0 and minutes > 0 and seconds > 0:\n        duration = \"{} min and {} sec\".format(minutes,seconds)\n    elif hour == 0 and minutes > 0 and seconds == 0:\n         duration = \"{} min\".format(minutes)\n    else:\n         duration = \"{} hour {} min and {} sec\".format(hour,minutes,seconds)\n    return duration","d0c4caa3":"\ndf = load_data(\"chicago\")\ndf.head()","e83a1abb":"\ntopStartStations = df.groupby(\"Start Station\").size().nlargest(5)\ntopEndStations = df.groupby(\"End Station\").size().nlargest(5)\nprint(topStartStations)\nprint(topEndStations)","72b77adf":"import matplotlib.pyplot as plt\ntopEndStations.plot.bar(figsize= (12,6), title =\"Top 5 Start Stations in Chicago\", rot =30, fontsize= 13)\n","4d85ab61":"topStartStations.plot.bar(figsize= (12,6), title =\"Top 5 End Stations in Chicago\", rot =30, fontsize= 13)","e9b1448b":"\n    # Calculate total travel time\n    total_travel_time = Convert_time(df['Trip Duration'].sum())\n    print(f'Total Travel Time in Chicago : {total_travel_time}')\n    # Calculate mean travel time\n    average_travel_time = Convert_time(df['Trip Duration'].mean())\n    print(f'Average Travel Time in Chicago : {average_travel_time} ')","88dfa93c":"df_nyc = load_data(\"new york city\")\ndf_nyc.head()","140686dc":"topStartStations = df_nyc.groupby(\"Start Station\").size().nlargest(5)\ntopEndStations = df_nyc.groupby(\"End Station\").size().nlargest(5)\nprint(topStartStations)\nprint(topEndStations)","2db654ac":"\ntopEndStations.plot.bar(figsize= (12,6), title =\"Top 5 Start Stations in New York\", rot =30, fontsize= 13)\n","94e163a0":"topStartStations.plot.bar(figsize= (12,6), title =\"Top 5 End Stations in New York\", rot =30, fontsize= 13)","6cbdf6f2":"\n    # Calculate total travel time\n    total_travel_time = Convert_time(df_nyc['Trip Duration'].sum())\n    print(f'Total Travel Time in Chicago : {total_travel_time}')\n    # Calculate mean travel time\n    average_travel_time = Convert_time(df_nyc['Trip Duration'].mean())\n    print(f'Average Travel Time in Chicago : {average_travel_time} ')","efd31642":"df_washington = load_data(\"washington\")\ndf_washington.head()","f4030af6":"topStartStations = df_washington.groupby(\"Start Station\").size().nlargest(5)\ntopEndStations = df_washington.groupby(\"End Station\").size().nlargest(5)\nprint(topStartStations)\nprint(topEndStations)","6c4f8683":"topEndStations.plot.bar(figsize= (12,6), title =\"Top 5 Start Stations in Washington\", rot =30, fontsize= 13)","7f7b5b69":"topStartStations.plot.bar(figsize= (12,6), title =\"Top 5 End Stations in Washington\", rot =30, fontsize= 13)","9968ca11":"\n    # Calculate total travel time\n    total_travel_time = Convert_time(df_washington['Trip Duration'].sum())\n    print(f'Total Travel Time in Chicago : {total_travel_time}')\n    # Calculate mean travel time\n    average_travel_time = Convert_time(df_washington['Trip Duration'].mean())\n    print(f'Average Travel Time in Chicago : {average_travel_time} ')","dd59d915":"    # Convert the Start Time to Date time\n    df['Start Time'] = pd.to_datetime(df['Start Time'])\n     # First we extract the month , day of the week and hour from Start Time into a seperate column:\n    df['Month'] = df['Start Time'].dt.month\n    # ------- For Python version 3.8.8 I used [ day_name ] instead of [ weekday_name ]\n    df['day_of_the_week'] = df['Start Time'].dt.day_name()\n    df['hour'] = df['Start Time'].dt.hour\n\n    # Calculate the most common month\n    popular_month = month_list[df['Month'].mode()[0]-1].title()\n\n\n    # Calculate the most common day of week\n    popular_dayoftheweek = df['day_of_the_week'].mode()[0]\n\n","3704091f":"    # Convert the Start Time to Date time\n    df_nyc['Start Time'] = pd.to_datetime(df_nyc['Start Time'])\n     # First we extract the month , day of the week and hour from Start Time into a seperate column:\n    df_nyc['Month'] = df_nyc['Start Time'].dt.month\n    # ------- For Python version 3.8.8 I used [ day_name ] instead of [ weekday_name ]\n    df_nyc['day_of_the_week'] = df['Start Time'].dt.day_name()\n    df_nyc['hour'] = df_nyc['Start Time'].dt.hour\n\n    # Calculate the most common month\n    popular_month_nyc = month_list[df_nyc['Month'].mode()[0]-1].title()\n\n\n    # Calculate the most common day of week\n    popular_dayoftheweek_nyc = df_nyc['day_of_the_week'].mode()[0]","e7b9a212":"    print(tabulate([['Most Common Month is:', popular_month],[\"Most Frequent day of the week:\",popular_dayoftheweek]], tablefmt='grid'))\n","60944092":"    print(tabulate([['Most Common Month is:', popular_month_nyc],[\"Most Frequent day of the week:\",popular_dayoftheweek_nyc]], tablefmt='grid'))\n","f77ea886":"    # Convert the Start Time to Date time\n    df_washington['Start Time'] = pd.to_datetime(df_washington['Start Time'])\n     # First we extract the month , day of the week and hour from Start Time into a seperate column:\n    df_washington['Month'] = df_washington['Start Time'].dt.month\n    # ------- For Python version 3.8.8 I used [ day_name ] instead of [ weekday_name ]\n    df_washington['day_of_the_week'] = df_washington['Start Time'].dt.day_name()\n    df_washington['hour'] = df_washington['Start Time'].dt.hour\n\n    # Calculate the most common month\n    popular_month_wsh = month_list[df_washington['Month'].mode()[0]-1].title()\n\n\n    # Calculate the most common day of week\n    popular_dayoftheweek_wsh = df_washington['day_of_the_week'].mode()[0]","c227b44a":"    print(tabulate([['Most Common Month is:', popular_month_wsh],[\"Most Frequent day of the week:\",popular_dayoftheweek_wsh]], tablefmt='grid'))\n","e6743ac1":"## City 2: New York","7a1581a3":"## Phase 1 of my analysis\n### Load Data into Dataframes","743edd2a":"## We First want to know the most popular Start and End Stations in Chicago","8a983efb":"## City of Washington","d71de643":"## About this Case Study\nHere, I'm going to assume we are on a simple project where I, a data analyst was tasked to extract key information about data collected by a bikeshare system provider called [Motivate](https:\/\/www.motivateco.com\/)\nIn this project, I will be comparing Bikeshare usage in 3 major cities: New York, Chicago, Washington DC \n","af571740":"## Statistics on the most frequent times of travel","3bc74c0b":"### We will add a simple function so we can filter data for a specific month or day","26647a2f":"## About the Dataset\n\nRandomly selected data for the first six months of 2017 are provided for all three cities. All three of the data files contain the same core **six (6) columns:**\n\n\n    Start Time (e.g., 2017-01-01 00:07:57)\n    End Time (e.g., 2017-01-01 00:20:53)\n    Trip Duration (in seconds - e.g., 776)\n    Start Station (e.g., Broadway & Barry Ave)\n    End Station (e.g., Sedgwick St & North Ave)\n    User Type (Subscriber or Customer)\n\nThe Chicago and New York City files also have the following two columns:\n\n    Gender\n    Birth Year\n\n**The Data has been preprocessed and cleaned**","40790b46":"### The Average travel Time for New York City based on the Bikeshare Data is:\n## **14 min and 59 sec**","f1c62a23":"## Plot the Results obtianed above we get:","b1c2e40e":"## City of Chicago","06930991":"Based on the Bikeshare Data, **Streeter Dr & Grand Ave** appears to be the busiest Station in Chicago","ad67a6b5":"### Based on the Bikeshare Data, the Average travel Time for the city of Washington is:\n## **20 min and 37 sec**","94424d35":"## City 3: Washington","4e408403":"## City of New York","7d23e382":"![image](https:\/\/journalistsresource.org\/wp-content\/uploads\/2015\/05\/Bikeshare-station-.jpg)\n### ","bf951592":"## Next We want to know Total and Average Travel Time in Chicago and also the most frequent time of travel","5b662b8f":"### A Simple function to convert Timestamp to a much easier to read time format.\nwhich will come handy when we want to visually compare trip duration ","e1648f19":"## Same thing we did for Chicago, We First want to know the most popular Start Station in NYC","64fbf52c":"## City 1: Chicago","03909886":"### The Average travel Time for the city of Chicago based on the Bikeshare Data is:\n## **15 min and 36 sec**","eb5a7d92":"## Plot the Results obtianed above we get:"}}