{"cell_type":{"4a6692c1":"code","f1afed92":"code","72fac652":"code","c147de45":"code","0579f233":"code","7e4ccef1":"code","567bc099":"code","b6322052":"code","11fa761f":"code","239c49a8":"code","5a02579c":"code","8fcd001d":"code","91b6961d":"code","cc3f7399":"code","a7c51f74":"code","6d0f4943":"code","ec4fab0a":"code","380f8a2d":"code","4dc89884":"code","6cf52fe1":"code","ccb1bbfd":"code","edb8de7c":"code","9f953c48":"code","9134ea16":"code","6bef8587":"code","c1cd247d":"code","27f0ba7d":"code","366699ca":"code","4d8f8713":"code","85217b4b":"code","8d391522":"markdown","aa85c527":"markdown"},"source":{"4a6692c1":"%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport os \n \nfrom sklearn.metrics import accuracy_score \nimport tensorflow as tf \nimport keras","f1afed92":"df = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","72fac652":"df.head()","c147de45":"df1 = df.copy()","0579f233":"df1.drop('label', axis=1,inplace=True)","7e4ccef1":"labels = df['label'].values","567bc099":"img_array = df1.values","b6322052":"img_array = img_array\/255","11fa761f":"img_array = img_array.reshape(-1,28,28,1)","239c49a8":"img_array.shape","5a02579c":"seed = 128 \nrng = np.random.RandomState(seed)","8fcd001d":"labels = keras.utils.to_categorical(labels)","91b6961d":"split_size = int(img_array.shape[0]*0.7) \ntrain_x, val_x = img_array[:split_size], img_array[split_size:] \ntrain_y, val_y = labels[:split_size], labels[split_size:]","cc3f7399":"from tensorflow.keras.layers import Input, Conv2D,ReLU, Flatten, Dense, MaxPool2D, concatenate, BatchNormalization, AveragePooling2D, Add\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Activation\nfrom tensorflow.keras.optimizers import SGD","a7c51f74":"def inception(layer_in, num_filter):\n    conv = Conv2D(num_filter,(3,3),padding='same', activation='relu', kernel_initializer='he_normal')(layer_in)\n    conv2 = Conv2D(num_filter,(5,5),padding='same', activation='relu', kernel_initializer='he_normal')(layer_in)\n    \n    max_pool = MaxPool2D(pool_size=(2,2), strides=(1,1), padding='same')(layer_in)\n    \n    output = concatenate(inputs=[conv, conv2, max_pool], axis=-1)\n    output = Activation('relu')(output)\n    return output","6d0f4943":"def residual_net(layer_in, n_filters, final_filter):\n    conv2 = inception(layer_in, n_filters)\n        \n    output = Conv2D(filters=final_filter,kernel_size =1, padding='same', activation='relu', kernel_initializer='he_normal')(layer_in)\n    layer_out = Add()([conv2, output])\n    \n    layer_out = Activation('relu')(layer_out)\n    return layer_out","ec4fab0a":"def create_inception():\n    inputs = Input(shape=(28,28,1))\n    num_filters = 64\n    \n    t = BatchNormalization()(inputs)\n    t = Conv2D(kernel_size=3, strides=1, filters=num_filters, padding=\"same\")(t)\n    t = Activation('relu')(t)\n    \n    #t = residual_net(t,64,192)\n    t= inception(t,64)\n    #t = residual_net(t, 64,448)\n    t = inception(t, 64)\n  \n    \n    t = Conv2D(kernel_size=3, strides=1, filters=num_filters, padding=\"same\")(t)\n    t = Activation('relu')(t)\n    t = inception(t,32)\n    \n    t = AveragePooling2D(4)(t)\n    t = Flatten()(t)\n    \n    output = Dense(128, activation = 'relu', kernel_initializer = 'RandomUniform')(t)\n    output = Dense(64, activation = 'relu', kernel_initializer = 'RandomUniform')(output)\n    \n    outputs = Dense(10, activation='softmax')(output)\n    \n    model = Model(inputs, outputs)\n    opti = SGD(lr=0.001, momentum=0.9, decay=0.001\/50, nesterov=True)\n    model.compile(optimizer = opti, loss='categorical_crossentropy', metrics = ['accuracy'])\n    \n    return model","380f8a2d":"model = create_inception()","4dc89884":"model.summary()","6cf52fe1":"model.fit(x = img_array, y = labels, validation_data=(val_x, val_y),epochs=50,batch_size=128)","ccb1bbfd":"test = pd.read_csv('..\/input\/digit-recognizer\/test.csv')","edb8de7c":"test = test.values","9f953c48":"test = test.reshape(-1,28,28,1)","9134ea16":"test = test\/255","6bef8587":"pred=model.predict(test)","c1cd247d":"label = np.argmax(pred, axis=1)","27f0ba7d":"submission = pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')","366699ca":"submission['Label'] = label","4d8f8713":"submission.to_csv('submission.csv', index=False)","85217b4b":"submission","8d391522":"### Create model","aa85c527":"### Prediction"}}