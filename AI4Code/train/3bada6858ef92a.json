{"cell_type":{"2e88d411":"code","08ef675c":"code","538ee2a4":"code","c53ab1c7":"code","7eb634cc":"code","1ceb1ef3":"code","903b34b1":"code","d136d1f2":"code","15575018":"code","d1155f1f":"code","80eeca63":"code","090764a9":"code","1f6b28e6":"code","83919564":"code","cb00b322":"code","1d2c170a":"code","868e77be":"code","b8a43f08":"code","7e1fdc54":"code","43ec09ae":"code","cc59bfe6":"code","794dacef":"code","4801274f":"code","433f7bba":"code","11134a9a":"code","c9319a88":"markdown","058738f1":"markdown","59f79856":"markdown","3941a7bf":"markdown","811a27cb":"markdown"},"source":{"2e88d411":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Load the dataset using pandas\ndata = pd.read_csv(\"..\/input\/tesla-share\/TSLA (1).csv\") \ndata.head()","08ef675c":"data.describe()","538ee2a4":"# Select only the important features i.e. the date and price\ndata = data[[\"Date\",\"Close\"]] # select Date and Price\n# Rename the features: These names are NEEDED for the model fitting\ndata = data.rename(columns = {\"Date\":\"ds\",\"Close\":\"y\"}) #renaming the columns of the dataset\ndata.head()","c53ab1c7":"!pip install fbprophet","7eb634cc":"from fbprophet import Prophet\nm = Prophet(daily_seasonality = True) # the Prophet class (model)\nm.fit(data) # fit the model using all data","1ceb1ef3":"future = m.make_future_dataframe(periods=365) #we need to specify the number of days in future\nprediction = m.predict(future)\nm.plot(prediction)\nplt.title(\"Prediction of the Tesla Stock Price using the Prophet\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Close Stock Price\")\nplt.show()","903b34b1":"m.plot_components(prediction)\nplt.show()","d136d1f2":"# Load the dataset using pandas\ndata = pd.read_csv(\"..\/input\/tcs-share\/TCS.NS (1).csv\") \ndata.head()","15575018":"data.describe()","d1155f1f":"# Select only the important features i.e. the date and price\ndata = data[[\"Date\",\"Close\"]] # select Date and Price\n# Rename the features: These names are NEEDED for the model fitting\ndata = data.rename(columns = {\"Date\":\"ds\",\"Close\":\"y\"}) #renaming the columns of the dataset\ndata.head()","80eeca63":"from fbprophet import Prophet\nm = Prophet(daily_seasonality = True) # the Prophet class (model)\nm.fit(data) # fit the model using all data","090764a9":"future = m.make_future_dataframe(periods=365) #we need to specify the number of days in future\nprediction = m.predict(future)\nm.plot(prediction)\nplt.title(\"Prediction of the TCS Stock Price using the Prophet\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Close Stock Price\")\nplt.show()","1f6b28e6":"m.plot_components(prediction)\nplt.show()","83919564":"# Load the dataset using pandas\ndata = pd.read_csv(\"..\/input\/sp-global\/GSPC.csv\") \ndata.head()","cb00b322":"data.describe()","1d2c170a":"# Select only the important features i.e. the date and price\ndata = data[[\"Date\",\"Close\"]] # select Date and Price\n# Rename the features: These names are NEEDED for the model fitting\ndata = data.rename(columns = {\"Date\":\"ds\",\"Close\":\"y\"}) #renaming the columns of the dataset\ndata.head()","868e77be":"from fbprophet import Prophet\nm = Prophet(daily_seasonality = True) # the Prophet class (model)\nm.fit(data) # fit the model using all data","b8a43f08":"future = m.make_future_dataframe(periods=365) #we need to specify the number of days in future\nprediction = m.predict(future)\nm.plot(prediction)\nplt.title(\"Prediction of the S&P Global Stock Price using the Prophet\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Close Stock Price\")\nplt.show()","7e1fdc54":"m.plot_components(prediction)\nplt.show()","43ec09ae":"# Load the dataset using pandas\ndata = pd.read_csv(\"..\/input\/bitcoin\/BTC-USD.csv\") \ndata.head()","cc59bfe6":"data.describe()","794dacef":"# Select only the important features i.e. the date and price\ndata = data[[\"Date\",\"Close\"]] # select Date and Price\n# Rename the features: These names are NEEDED for the model fitting\ndata = data.rename(columns = {\"Date\":\"ds\",\"Close\":\"y\"}) #renaming the columns of the dataset\ndata.head()","4801274f":"from fbprophet import Prophet\nm = Prophet(daily_seasonality = True) # the Prophet class (model)\nm.fit(data) # fit the model using all data","433f7bba":"future = m.make_future_dataframe(periods=365) #we need to specify the number of days in future\nprediction = m.predict(future)\nm.plot(prediction)\nplt.title(\"Prediction of the Bitcoin Stock Price using the Prophet\")\nplt.xlabel(\"Date\")\nplt.ylabel(\"Close Stock Price\")\nplt.show()","11134a9a":"m.plot_components(prediction)\nplt.show()","c9319a88":"# S&P Global","058738f1":"## The forecasting model: Facebook\u2019s Prophet\nThe most commonly used models for forecasting predictions are the autoregressive models. Briefly, the autoregressive model specifies that the output variable depends linearly on its own previous values and on a stochastic term (an imperfectly predictable term).\n\nRecently, in an attempt to develop a model that could capture seasonality in time-series data, Facebook developed the famous Prophet model that is publicly available for everyone. We will use this state-of-the-art model: the Prophet model. Prophet is able to capture daily, weekly and yearly seasonality along with holiday effects, by implementing additive regression models.\nThe mathematical equation behind the Prophet model is defined as:\n\n**y(t) = g(t) + s(t) + h(t) + e(t)**\n\nwith, g(t) representing the trend. Prophet uses a piecewise linear model for trend forecasting.\n\ns(t) represents periodic changes (weekly, monthly, yearly).\n\nh(t) represents the effects of holidays (recall: Holidays impact businesses).\n\ne(t) is the error term.\n\nThe Prophet model fitting procedure is usually very fast (even for thousands of observations) and it does not require any data pre-processing. It deals also with missing data and outliers.","59f79856":"# TCS","3941a7bf":"# BitCoin","811a27cb":"# TESLA"}}