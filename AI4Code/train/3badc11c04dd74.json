{"cell_type":{"9b2fa224":"code","42e0c66b":"code","bbabed74":"code","a93dd8f7":"code","66697127":"code","3d2d6a7f":"code","d13ce5c2":"code","0ba49817":"code","1e7c7500":"code","b06d0181":"code","b7bd2765":"code","d0aad5be":"code","f91d6e41":"code","effe4add":"code","3c66f6f0":"code","af22f35e":"code","ab08b9c1":"code","7e568512":"code","c4e7b5b5":"code","148f4b1c":"code","21abf2b2":"code","e75cd161":"code","e50f6060":"markdown","34492a11":"markdown","15197e33":"markdown","b7ae0789":"markdown","16d1e31b":"markdown","495b3d79":"markdown","d2017c9b":"markdown","d39436c9":"markdown","281c15c9":"markdown","65e35519":"markdown","f089a1c1":"markdown","82468735":"markdown","0a798118":"markdown"},"source":{"9b2fa224":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport matplotlib.pyplot as plt\nimport seaborn as sns","42e0c66b":"data = pd.read_csv(\"\/kaggle\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv\")\ndata.head()","bbabed74":"data.shape","a93dd8f7":"data.isna().sum()","66697127":"data.dtypes","3d2d6a7f":"import missingno as msno \nmsno.matrix(data)","d13ce5c2":"data = data.drop(['sl_no'],axis =1)","0ba49817":"for i in data.columns:\n    print(f'length of unique values in {i}',len(set(data[i])))\n    print(f'some of the unique values in {i}',list(set(data[i]))[0:5])\n    print('---------------------------------------------------------')","1e7c7500":"data.loc[data['gender'] =='M', 'gender'] = 1\ndata.loc[data['gender'] =='F', 'gender'] = 0\n\nfor i in ['hsc_b','ssc_b']:\n    data.loc[data[i] =='Central', i] = 1\n    data.loc[data[i] =='Others', i] = 0\n\ndata.loc[data['hsc_s'] =='Arts', 'hsc_s'] = 0\ndata.loc[data['hsc_s'] =='Science', 'hsc_s'] = 1\ndata.loc[data['hsc_s'] =='Commerce', 'hsc_s'] = 2\n\ndata.loc[data['degree_t'] =='Comm&Mgmt', 'degree_t'] = 0\ndata.loc[data['degree_t'] =='Sci&Tech', 'degree_t'] = 1\ndata.loc[data['degree_t'] =='Others', 'degree_t'] = 2\n\ndata.loc[data['workex'] =='Yes', 'workex'] = 1\ndata.loc[data['workex'] =='No', 'workex'] = 0\n\n\ndata.loc[data['status'] =='Placed', 'status'] = 1\ndata.loc[data['status'] =='Not Placed', 'status'] = 0\n\ndata.loc[data['specialisation'] =='Mkt&Fin', 'specialisation'] = 1\ndata.loc[data['specialisation'] =='Mkt&HR', 'specialisation'] = 0\n\n \n","b06d0181":"for i in data.columns:\n    data[i] = pd.to_numeric(data[i],errors='coerce')\n","b7bd2765":"data.dtypes","d0aad5be":"data.isna().sum()","f91d6e41":"data1 = data.dropna(axis=0,subset =['salary','status'])\n\nmissing_data = data1.loc[:,['salary','status']]\nmissing_salary = data['salary'].isnull()\nstatus_for_missing_values = pd.DataFrame(data['status'][missing_salary])\nset(list(status_for_missing_values.status))\n    ","effe4add":"data['salary'].fillna(value=0, inplace=True)\ndata.isna().sum()","3c66f6f0":"f, ax = plt.subplots(figsize=(18,18))\nsns.heatmap(data.drop(['status'],axis =1).corr(), annot=True ,linewidth=0.5, fmt='.1f',ax=ax);","af22f35e":"plt.figure(figsize=(20,20))\ncolumns = ['gender','ssc_b','hsc_b','hsc_s','degree_t','workex','specialisation']\nj =0\nfor i in columns:\n    j +=1\n    plt.subplot(2,7,j)\n    sns.barplot(x= i , y=data['status'], data = data)\n    plt.title(f\"status vs {i}\")\nplt.show()","ab08b9c1":"train_data = data[:175]\ntest_data = data[175:]\ntrain_data.head()\n","7e568512":"y = train_data[\"status\"]\ny_test = test_data[\"status\"]","c4e7b5b5":"\nfeatures = [\"workex\",\"ssc_p\",\"degree_p\",\"hsc_p\",\"specialisation\",'etest_p','mba_p']\n\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\n","148f4b1c":"from sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\n\nmodel = LogisticRegression(penalty= 'none' ,random_state=42 ,max_iter=150).fit(X, y)\ny_pred = model.predict(X_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","21abf2b2":"from sklearn.metrics import classification_report, plot_confusion_matrix, accuracy_score\nplot_confusion_matrix(model, X_test, y_test,labels=[0,1],normalize= 'true')\nprint(classification_report(y_test, y_pred, labels=[0,1]))","e75cd161":"data.status.value_counts()","e50f6060":"#  Logistic Regression ","34492a11":"# Data Manipulation","15197e33":"**We have got null values for salary alone**","b7ae0789":"Here **gender**,**ssc_b**,**hsc_b**,**hsc_s**,**degree_t** are observed that,they are not well classifying. so,they are not selected as features.    ","16d1e31b":"1. look at the unique values\n2. change the d-ype","495b3d79":"We have missing values for **salary** Let's look at them","d2017c9b":"As the data is **Imbalanced**. it issuggested to go over f1 score ,AUC values of ROC curve ,precision and recall rather than accuracy of the model.  ","d39436c9":" **splitting the data into training and test data**","281c15c9":"**DATA**\n1. Read the data using pandas\n2. look at the data","65e35519":"**Random Forest Classifier**","f089a1c1":"So for all missing values of salary status is not placed so we can fill salary as 0 for all missing values","82468735":"*Shape of the data*","0a798118":"Look for null values"}}