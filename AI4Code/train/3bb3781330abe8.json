{"cell_type":{"a199e481":"code","11a5dcc4":"code","1fc38dc4":"code","91fc6b45":"code","f50fdf2c":"code","a974422c":"code","5dc28e4d":"code","285c258f":"code","1ba5e9be":"code","171df938":"code","71125b0e":"code","f3201e1f":"code","5e8cfaad":"code","47053711":"code","20a11088":"code","70be46ca":"code","a99b1610":"code","5024c26e":"code","a662336e":"code","65d87b87":"code","099fea01":"code","d560cbf2":"code","6565b7f2":"code","8199cb9a":"code","c42c4fa1":"code","ee754fe6":"code","17730e5b":"code","8f1b462d":"code","7901fa28":"code","bffa79ab":"code","92464faf":"code","7427d9ef":"code","05129d2d":"code","77fed347":"code","29dd7b32":"code","e1f0b99d":"code","f8fdb7bf":"code","5560a125":"code","f600e3d8":"code","32cd4fde":"code","51c3a1d5":"code","c83bb703":"code","3e25e039":"code","e77cedf7":"code","33af7799":"code","0a904007":"code","1c8bda89":"code","4562def7":"code","a5f2e849":"code","f9f0fb1a":"code","06e75778":"code","aebe19c5":"code","5a2c7ec5":"code","b12ed0a6":"code","7dfb2598":"code","66b5ba06":"code","fb851988":"code","9426f6f8":"code","c7d6efbe":"code","5fd2f296":"code","cc570801":"code","f45a42e6":"code","4f5cad80":"code","5619112e":"code","b457fc8e":"code","f2e813b6":"code","703230d3":"code","2f3681fd":"code","3731a761":"code","294ed45a":"code","72483644":"code","75e23f7e":"code","2eb453a0":"code","40bd7362":"code","b72c4b3e":"code","1850fc89":"code","eae555c5":"code","f3791599":"code","b3e9b69e":"code","df0a494d":"markdown","f2c33c23":"markdown","37a443b3":"markdown","a2d68560":"markdown","1e7d88a1":"markdown","8f3d3b3a":"markdown","cd0a8e18":"markdown","85b27bc8":"markdown"},"source":{"a199e481":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# os.remove('.\/EpAgents.csv')\nfor dirname, _, filenames in os.walk('\/kaggle\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","11a5dcc4":"# dfKVC = pd.read_csv('\/kaggle\/input\/meta-kaggle\/KernelVersionCompetitionSources.csv', parse_dates = True, infer_datetime_format = True)\ndfSub = pd.read_csv('\/kaggle\/input\/d\/kaggle\/meta-kaggle\/Submissions.csv')\ndfTeams = pd.read_csv('\/kaggle\/input\/d\/kaggle\/meta-kaggle\/Teams.csv', parse_dates = True, infer_datetime_format = True)\ndfTeamMem = pd.read_csv('\/kaggle\/input\/d\/kaggle\/meta-kaggle\/TeamMemberships.csv', parse_dates = True, infer_datetime_format = True)\ndfComp = pd.read_csv('\/kaggle\/input\/d\/kaggle\/meta-kaggle\/Competitions.csv', parse_dates = True, infer_datetime_format = True)\n# dfKVS = pd.read_csv('\/kaggle\/input\/meta-kaggle\/KernelVersionKernelSources.csv', parse_dates = True, infer_datetime_format = True)\n# dfEpAgents = pd.read_csv('\/kaggle\/input\/meta-kaggle\/EpisodeAgents.csv', parse_dates = True, infer_datetime_format = True)\n# dfEp = pd.read_csv('\/kaggle\/input\/meta-kaggle\/Episodes.csv', parse_dates = True, infer_datetime_format = True)","1fc38dc4":"dfSub.dropna(subset = ['TeamId'], inplace = True)\ndfTeamMem.dropna(subset = ['TeamId'], inplace = True)\ndfSub.dropna(subset = ['ScoreDate'], inplace = True)\nprint(dfSub.shape)\ndfSub.dropna(subset = ['SubmittedUserId'], inplace = True)\nprint(dfSub.shape)","91fc6b45":"dfSub.columns\n# dfKernel['CreationDate_1'] = dfKernel['CreationDate'].dt.strftime('%m%d%Y')\ndfSub['SubmissionDate'] = pd.to_datetime(dfSub['SubmissionDate'])\ndfSub['ScoreDate'] = pd.to_datetime(dfSub['ScoreDate'])\n# dfKernel['MadePublicDate'] = pd.to_datetime(dfKernel['MadePublicDate'])\ndfSub['SubmissionDate'] = dfSub['SubmissionDate'].dt.strftime('%m-%d-%Y')\ndfSub['ScoreDate'] = dfSub['ScoreDate'].dt.strftime('%m-%d-%Y')","f50fdf2c":"dfComp['EnabledDateNew'] = pd.to_datetime(dfComp['EnabledDate'], format = '%m\/%d\/%Y %H:%M:%S')\ndfComp['DeadlineDateNew'] = pd.to_datetime(dfComp['DeadlineDate'], format = '%m\/%d\/%Y %H:%M:%S')\ndfComp['CompetitionDuration'] = (dfComp['DeadlineDateNew'] - dfComp['EnabledDateNew'])\/np.timedelta64(1, 'D')\n\n# dfComp['DeadlineDateNew']","a974422c":"dfComp = dfComp.sort_values(by = 'EnabledDateNew')\ndfComp.to_csv('\/kaggle\/working\/CompetitionsDateOrdered.csv')","5dc28e4d":"\ndfSub = dfSub.set_index('TeamId')\ndfSub['CompetitionId'] = ''\ndfTeams = dfTeams.set_index('Id')\nmaindict = dfSub['CompetitionId'].to_dict()\nmaindict.update(dfTeams['CompetitionId'].to_dict())\ndfSub['CompetitionId'] = pd.Series(maindict)\ndel maindict\n\n# dfSub = dfSub.set_index('TeamId')\ndfSub['TeamLeaderId'] = ''\n# dfTeams = dfTeams.set_index('Id')\nmaindict = dfSub['TeamLeaderId'].to_dict()\nmaindict.update(dfTeams['TeamLeaderId'].to_dict())\ndfSub['TeamLeaderId'] = pd.Series(maindict)\ndel maindict\n\ndfSub = dfSub.reset_index()\ndfSub = dfSub.set_index('CompetitionId')\ndfSub['CompetitionType'] = ''\ndfComp = dfComp.set_index('Id')\nmaindict = dfSub['CompetitionType'].to_dict()\nmaindict.update(dfComp['HostSegmentTitle'].to_dict())\ndfSub['CompetitionType'] = pd.Series(maindict)\ndel maindict\n\ndfSub['EvaluationAlgorithmIsMax'] = ''\nmaindict = dfSub['EvaluationAlgorithmIsMax'].to_dict()\nmaindict.update(dfComp['EvaluationAlgorithmIsMax'].to_dict())\ndfSub['EvaluationAlgorithmIsMax'] = pd.Series(maindict)\ndel maindict\n\ndfSub['EvaluationAlgorithmAbbreviation'] = ''\nmaindict = dfSub['EvaluationAlgorithmAbbreviation'].to_dict()\nmaindict.update(dfComp['EvaluationAlgorithmAbbreviation'].to_dict())\ndfSub['EvaluationAlgorithmAbbreviation'] = pd.Series(maindict)\ndel maindict\n\ndfSub['CompetitionDuration'] = ''\nmaindict = dfSub['CompetitionDuration'].to_dict()\nmaindict.update(dfComp['CompetitionDuration'].to_dict())\ndfSub['CompetitionDuration'] = pd.Series(maindict)\ndel maindict\n\ndfSub['RewardQuantity'] = ''\nmaindict = dfSub['RewardQuantity'].to_dict()\nmaindict.update(dfComp['RewardQuantity'].to_dict())\ndfSub['RewardQuantity'] = pd.Series(maindict)\ndel maindict\n\ndfSub['NumPrizes'] = ''\nmaindict = dfSub['NumPrizes'].to_dict()\nmaindict.update(dfComp['NumPrizes'].to_dict())\ndfSub['NumPrizes'] = pd.Series(maindict)\ndel maindict\n\ndfSub['MaxDailySubmissions'] = ''\nmaindict = dfSub['MaxDailySubmissions'].to_dict()\nmaindict.update(dfComp['MaxDailySubmissions'].to_dict())\ndfSub['MaxDailySubmissions'] = pd.Series(maindict)\ndel maindict\n\ndfSub['NumScoredSubmissions'] = ''\nmaindict = dfSub['NumScoredSubmissions'].to_dict()\nmaindict.update(dfComp['NumScoredSubmissions'].to_dict())\ndfSub['NumScoredSubmissions'] = pd.Series(maindict)\ndel maindict\n\ndfSub['Title'] = ''\nmaindict = dfSub['Title'].to_dict()\nmaindict.update(dfComp['Title'].to_dict())\ndfSub['Title'] = pd.Series(maindict)\ndel maindict\n\ndfSub['Subtitle'] = ''\nmaindict = dfSub['Subtitle'].to_dict()\nmaindict.update(dfComp['Subtitle'].to_dict())\ndfSub['Subtitle'] = pd.Series(maindict)\ndel maindict\n\ndfSub['NumScoredSubmissions'] = ''\nmaindict = dfSub['NumScoredSubmissions'].to_dict()\nmaindict.update(dfComp['NumScoredSubmissions'].to_dict())\ndfSub['NumScoredSubmissions'] = pd.Series(maindict)\ndel maindict\n\ndfSub['EnabledDateNew'] = ''\nmaindict = dfSub['EnabledDateNew'].to_dict()\nmaindict.update(dfComp['EnabledDateNew'].to_dict())\ndfSub['EnabledDateNew'] = pd.Series(maindict)\ndel maindict\n\ndfSub['DeadlineDateNew'] = ''\nmaindict = dfSub['DeadlineDateNew'].to_dict()\nmaindict.update(dfComp['DeadlineDateNew'].to_dict())\ndfSub['DeadlineDateNew'] = pd.Series(maindict)\ndel maindict\n\ndfSub = dfSub.reset_index()","285c258f":"dfTeamSize = pd.read_csv('\/kaggle\/input\/teamsizemetakaggle\/possibleteamsize.csv')\ndfSub = pd.merge(dfSub, dfTeamSize, on = 'TeamId')\ndel dfTeamSize\ndfSub.head()","1ba5e9be":"# dfSub = dfSub.reset_index()\ndfSubTeams = dfSub[['CompetitionId', 'TeamId', 'SubmittedUserId']]\nprint(dfSubTeams.shape)\ndfSubTeams.drop_duplicates(ignore_index = True, keep = 'last', inplace = True)\nprint(dfSubTeams.shape)\ndfSubTeamscount = dfSubTeams.groupby(['CompetitionId','TeamId'])['SubmittedUserId'].apply(lambda x: ','.join(str(x))).reset_index()","171df938":"dfSubTeams.to_csv('\/kaggle\/working\/submissionteams.csv')","71125b0e":"def convert_score(row):\n    if row['EvaluationAlgorithmIsMax'] == True:\n        return -1\n    elif row['EvaluationAlgorithmIsMax'] == False:\n        return 1\n    else:\n        return 0\ndfSub['ConversionFactor'] = dfSub.apply(lambda row: convert_score(row), axis = 1)","f3201e1f":"dfSub = dfSub.reset_index()\n# dfSub = dfSub.set_index('Id')\ndfSub.dropna(subset = ['CompetitionId'], inplace = True)\nprint(dfSub.shape)\n# dfSub.dropna(subset = ['RewardQuantity'], inplace = True)\nprint(dfSub.shape)\ndfSub = dfSub[dfSub['CompetitionType'].isin(['Featured', 'Research', 'GE Quests', 'Prospect'])]\ndfSub = dfSub[dfSub['ConversionFactor'] != 0]\ndfSub['PublicScoreFullPrecisionConverted'] = dfSub['PublicScoreFullPrecision'] * dfSub['ConversionFactor']\ndfSub['PrivateScoreFullPrecisionConverted'] = dfSub['PrivateScoreFullPrecision'] * dfSub['ConversionFactor']\ndfSub['ScoreDifferential'] = dfSub['PublicScoreFullPrecision'] - dfSub['PrivateScoreFullPrecision']","5e8cfaad":"df = dfSub.groupby(['TeamId'])['ScoreDifferential'].agg(['mean', np.std, 'count'])\ndf = df.reset_index()\nprint(df.head())\ndfSub2 = pd.merge(dfSub, df, on = ['TeamId'])\ndfSub2['ScoreDifferentialStandardized'] = dfSub2['ScoreDifferential'] - dfSub2['mean']\ndfSub2['ScoreDifferentialStandardized'] = dfSub2['ScoreDifferentialStandardized'] \/ dfSub2['std']\ndfSub2['ScoreDifferentialNonStandardized'] = dfSub2['ScoreDifferential'] \/ dfSub2['std']\ndel dfSub, df","47053711":"dfSub2['SubmissionDateNew'] = pd.to_datetime(dfSub2['SubmissionDate'], format = '%m\/%d\/%Y')\ndfSub2['ScoreDateNew'] = pd.to_datetime(dfSub2['ScoreDate'], format = '%m\/%d\/%Y')\ndfSub2['FeedbackDelay'] = (dfSub2['ScoreDateNew'] - dfSub2['SubmissionDateNew'])\/np.timedelta64(1,'D')\ndfSub2 = dfSub2.sort_values(by = ['CompetitionId', 'TeamId', 'ScoreDateNew'])\n# print(dfSub2.head())\n# dfSub2.dropna(subset = ['ScoreDate'], inplace = True)\ndfSub2['ScoreDateOld'] = dfSub2['ScoreDateNew'].shift(1)\ndfSub2['TimefromEnabledDate'] = (dfSub2['ScoreDateNew'] - dfSub2['EnabledDateNew'])\/np.timedelta64(1,'D')\ndfSub2['TimeinCompetition'] = dfSub2['TimefromEnabledDate']\/dfSub2['CompetitionDuration']\ndfSub2['TimeuntilDeadlineDate'] = (dfSub2['DeadlineDateNew'] - dfSub2['ScoreDateNew'])\/np.timedelta64(1,'D')\ndfSub2['TimeLeftinCompetition'] = dfSub2['TimeuntilDeadlineDate']\/dfSub2['CompetitionDuration']","20a11088":"dfSub2['TimefromLastFeedback'] = dfSub2['ScoreDateNew'] - dfSub2['ScoreDateOld']\ndfSub2['TimefromLastFeedback'] = dfSub2['TimefromLastFeedback']\/np.timedelta64(1,'D')\ndfSub2 = dfSub2.sort_values(by = ['CompetitionId', 'TeamId', 'SubmissionDateNew'])\ndfSub2['SubmissionDateOld'] = dfSub2['SubmissionDateNew'].shift(1)\ndfSub2['TimefromLastSubmission'] = dfSub2['SubmissionDateNew'] - dfSub2['SubmissionDateOld']\ndfSub2['TimefromLastSubmission'] = dfSub2['TimefromLastSubmission']\/np.timedelta64(1,'D')\ndfSub2['RewardPresent'] = ~dfSub2['RewardQuantity'].isna()","70be46ca":"def label_score(row):\n    if row['ScoreDifferential'] > 0:\n        return 1\n    elif row['ScoreDifferential'] == 0:\n        return 0\n    elif row['ScoreDifferential'] < 0 :\n        return -1\ndfSub2['DifferentialLabel'] = dfSub2.apply(lambda row: label_score(row), axis=1)","a99b1610":"dfSub2.drop_duplicates(keep = 'last', inplace = True)\ndfSub2 = dfSub2[dfSub2['TimefromLastFeedback'] >= 0]\ndfSub2 = dfSub2[dfSub2['TimefromLastSubmission'] >= 0]\ndfSub2 = dfSub2[dfSub2['IsAfterDeadline'] == False]\ndfSub2.replace([np.inf, -np.inf], np.nan)\ndfSub2.dropna(subset = ['ScoreDifferentialStandardized'], inplace = True)\n# dfSub2.to_csv('\/kaggle\/working\/submissions_analysis6.csv')\ndfSub2[['TeamId', 'CompetitionId', 'SubmittedUserId', 'CompetitionDuration',\n    'RewardQuantity', 'RewardPresent','NumPrizes', 'ScoreDifferential', \n    'count', 'FeedbackDelay', 'TimefromEnabledDate', 'TimeinCompetition', 'TimeLeftinCompetition',\n    'TimeuntilDeadlineDate', 'TimefromLastFeedback', 'TimefromLastSubmission',\n    'ScoreDifferentialStandardized', 'ScoreDifferentialNonStandardized',\n    'TeamSizeSubmission', 'isTeam']].to_csv('\/kaggle\/working\/analysis_file.csv')","5024c26e":"dfSub3 = dfSub2[['SubmittedUserId', 'ScoreDifferential', 'ScoreDifferentialStandardized', 'ScoreDifferentialNonStandardized', 'TeamSizeSubmission', 'TeamSizeRequests', 'isTeam', 'TimefromLastFeedback', 'IsAfterDeadline', 'TeamId', 'CompetitionId', 'DifferentialLabel', 'count']]\ndfSub3.drop_duplicates(keep = 'last', inplace = True)\n# dfSub3.to_csv('\/kaggle\/working\/submissions_analysis.csv')","a662336e":"dfSub4 = dfSub3[dfSub3['TimefromLastFeedback'] >= 0]\ndfSub4 = dfSub4[dfSub4['IsAfterDeadline'] == False]\ndfSub4.replace([np.inf, -np.inf], np.nan)\ndfSub4.dropna(subset = ['ScoreDifferentialStandardized'], inplace = True)\ndfSub4.to_csv('\/kaggle\/working\/submissions_analysis5.csv')","65d87b87":"set(dfSub4['count'].to_list())","099fea01":"dfSub4.shape","d560cbf2":"set(dfSub4['TimefromLastFeedback'].to_list())","6565b7f2":"import statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom sklearn import linear_model","8199cb9a":"results = sm.OLS(dfSub4['ScoreDifferentialStandardized'], dfSub4['isTeam']).fit()\n# data = np.asarray(dfSub4[['ScoreDifferentialStandardized', 'isTeam']])\n# X, y = data[:, 0], data[:, 1]\n# reg = linear_model.LinearRegression()\n# reg.fit(X, y)","c42c4fa1":"print(results.summary())","ee754fe6":"dfSub4.head()","17730e5b":"dfSub2 = dfSub2.reset_index()\ndfSub2 = dfSub2.set_index('TeamId')\ndfSub2['TimeDifference'] = dfSub2['ScoreDate'].diff()\ndfSub2.head()","8f1b462d":"table = pd.pivot_table(dfSub, index = 'TeamId', values = 'SubmittedUserId', aggfunc = pd.Series.nunique)\ntable2 = pd.pivot_table(dfTeamMem, index = 'TeamId', values = 'UserId', aggfunc = 'count')\ntable['UserId'] = ''\nmaindict = table['UserId'].to_dict()\nmaindict.update(table2['UserId'].to_dict())\ntable['UserId'] = pd.Series(maindict)\ndel maindict\ntable.to_csv(\"\/kaggle\/working\/possibleteamsize.csv\")","7901fa28":"table.shape","bffa79ab":"dfSub2 = dfSub[['SubmissionDate', 'ScoreDate', 'Id', 'CompetitionId']]\ndfSub2.dropna(subset = ['SubmissionDate'], inplace = True)","92464faf":"table1 = pd.pivot_table(dfSub2, index = 'SubmissionDate', columns = 'CompetitionId', values = 'Id', aggfunc = 'count')\ntable1.shape","7427d9ef":"table1.to_csv('\/kaggle\/working\/competition_submissions_datewise.csv')","05129d2d":"table1 = pd.pivot_table(dfSub, index = 'CompetitionId', values = 'Id', aggfunc = 'count')\ntable1.to_csv('\/kaggle\/working\/comp_submissions.csv')","77fed347":"dfSub.dropna(subset = ['SourceKernelVersionId'], inplace = True)\ndfSub.dropna(subset = ['SubmittedUserId'], inplace = True)\ndfSub.dropna(subset = ['SubmissionDate'], inplace = True)\nprint(dfSub.shape)","29dd7b32":"table = pd.pivot_table(dfSub, columns = ['SubmissionDate'], index = ['SubmittedUserId'], values = 'PublicScoreFullPrecision', aggfunc = 'count')\n# table.sort_values(by = '', inplace = True)\ntable.to_csv('\/kaggle\/working\/user_submissions_dates_counts.csv')","e1f0b99d":"dfSub = dfSub.set_index('Id')\ndfEpAgents = dfEpAgents.set_index('SubmissionId')\ndfSub['EpisodeId'] = ''\nmaindict = dfSub['EpisodeId'].to_dict()\nmaindict.update(dfEpAgents['EpisodeId'].to_dict())\ndfSub['EpisodeId'] = pd.Series(maindict)\ndel maindict, dfEpAgents","f8fdb7bf":"dfSub = dfSub.reset_index()\ndfSub = dfSub.set_index('EpisodeId')\ndfEp = dfEp.set_index('Id')\ndfSub['CompetitionId'] = ''\nmaindict = dfSub['CompetitionId'].to_dict()\nmaindict.update(dfEp['CompetitionId'].to_dict())\ndfSub['CompetitionId'] = pd.Series(maindict)\ndel maindict, dfEp","5560a125":"dfKVC = pd.read_csv('\/kaggle\/input\/meta-kaggle\/KernelVersionCompetitionSources.csv', parse_dates = True, infer_datetime_format = True)\ndfKVS = pd.read_csv('\/kaggle\/input\/meta-kaggle\/KernelVersionKernelSources.csv', parse_dates = True, infer_datetime_format = True)","f600e3d8":"cv = dfKernel['CurrentKernelVersionId'].to_list()\nprint(len(set(cv)))","32cd4fde":"dfKVC = dfKVC.reset_index()\ndfKVS = dfKVS.reset_index()\n# dfKVC = dfKVC.set_index('KernelVersionId')\ndfKVS = dfKVS.dropna(subset = ['CurrentKernelVersionId'], inplace = True)\ndfKVS = dfKVS.set_index('CurrentId')\ndfKVC['SourceKernelVersionId'] = ''\nmaindict = dfKVC['SourceKernelVersionId'].to_dict()\nmaindict.update(dfKVS['SourceKernelVersionId'].to_dict())\ndfKVC['SourceKernelVersionId'] = pd.Series(maindict)\ndel maindict","51c3a1d5":"dfKernel = pd.read_csv('\/kaggle\/input\/meta-kaggle\/Kernels.csv', parse_dates = True, infer_datetime_format = True)\nprint(dfKernel.columns)\nprint(dfKernel.shape)","c83bb703":"# dfKernel['CreationDate_1'] = dfKernel['CreationDate'].dt.strftime('%m%d%Y')\ndfKernel['CreationDate'] = pd.to_datetime(dfKernel['CreationDate'])\ndfKernel['EvaluationDate'] = pd.to_datetime(dfKernel['EvaluationDate'])\ndfKernel['MadePublicDate'] = pd.to_datetime(dfKernel['MadePublicDate'])\ndfKernel['Creationdate'] = dfKernel['CreationDate'].dt.strftime('%m%d%Y')\ndfKernel['EvaluationDate'] = dfKernel['EvaluationDate'].dt.strftime('%m%d%Y')\ndfKernel['MadePublicDate'] = dfKernel['MadePublicDate'].dt.strftime('%m%d%Y')","3e25e039":"dfKernel = dfKernel.reset_index()\ndfKernel.dropna(subset = ['CurrentKernelVersionId'], inplace = True)\ndfKernel = dfKernel.set_index('CurrentKernelVersionId')\ndfKVC = dfKVC.reset_index()\ndfKVC = dfKVC.set_index('KernelVersionId')\ndfKernel['CompetitionId'] = ''\nmaindict = dfKernel['CompetitionId']\nmaindict.update(dfKVC['SourceCompetitionId'].to_dict())\ndfKernel['CompetitionId'] = pd.Series(maindict)\ndel maindict","e77cedf7":"dfKernel.to_csv('\/kaggle\/working\/Kernel_dateupdated.csv')","33af7799":"dfKernel['MadePublicDate'].to_list()[:10]","0a904007":"dfKernel['CreationDate_2'] = dfKernel['CreationDate_1'].dt.strftime('%m%d%Y')","1c8bda89":"df['EvaluationDate_1'] = pd.to_datetime(dfKernel['EvaluationDate'])\ndf['']","4562def7":"dfSub = dfSub.reset_index()\ndfSub.dropna(subset = ['SourceKernelVersionId'], inplace = True)\ndfSub = dfSub.set_index('SourceKernelVersionId')\ndfKernel = dfKernel.reset_index()\ndfKernel.dropna(subset = ['CurrentKernelVersionId'], inplace = True)\ndfKernel = dfKernel.set_index('CurrentKernelVersionId')\ndfSub['CompetitionId'] = ''\nmaindict = dfSub['CompetitionId'].to_dict()\nmaindict.update(dfKernel['CompetitionId'].to_dict())\ndfSub['CompetitionId'] = pd.Series(maindict)\ndel maindict","a5f2e849":"table = pd.pivot_table(dfSub, index = 'SourceKernelVersionId', columns = ['SubmissionDate'], values = 'Id', aggfunc = 'count')\ntable.to_csv('\/kaggle\/working\/kernel_submissions.csv')","f9f0fb1a":"dfSub2 = dfSub[dfSub['CompetitionId'].notna() | dfSub['CompetitionId'] != '']","06e75778":"table","aebe19c5":"dfSub = dfSub.reset_index()\ntable = pd.pivot_table(dfSub, index = 'CompetitionId', values = 'SourceKernelVersionId', aggfunc = 'count')\ntable.to_csv('\/kaggle\/working\/competition_kernelcounts.csv')","5a2c7ec5":"# cv = dfKernel['CompetitionId'].to_list()\ndfKernel2 = dfKernel.dropna(subset = ['CompetitionId'])\nprint(dfKernel2.shape)\ndfKernel2.to_csv('\/kaggle\/working\/updatedKernel.csv')","b12ed0a6":"dfSub = dfSub.reset_index()\ndfSub.dropna(subset = ['SourceKernelVersionId'], inplace = True)\n# dfSub = dfSub.reset_index()\ndfKernel = dfKVC.reset_index()\ndfSub = dfSub.set_index('SourceKernelVersionId')\ndfSub['CompetitionId2'] = ''\ndfKVC = dfKVC.reset_index()\ndfKVC = dfKVC.set_index('Id')\nmaindict = dfSub['CompetitionId2'].to_dict()\nmaindict = maindict.update(dfKVC['SourceCompetitionId'].to_dict())\ndfSub['CompetitionId2'] = pd.Series(maindict)\n# dfSub = dfSub.reset_index()\ndel maindict","7dfb2598":"print(len(set(list(dfSub['CompetitionId']))))","66b5ba06":"\ntable = pd.pivot_table(dfSub, index = 'SourceCompetitionId', values = 'SourceKernelVersionId', aggfunc = 'count')\ntable.to_csv('\/kaggle\/working\/competition_kernelcounts_2.csv')","fb851988":"print(dfSub.shape, dfKVC.shape, dfKVS.shape)\ndfKVC = pd.read_csv('\/kaggle\/input\/meta-kaggle\/KernelVersionCompetitionSources.csv', parse_dates = True, infer_datetime_format = True)\nprint(dfKVC.columns, dfKVS.columns)","9426f6f8":"table = pd.pivot_table(dfSub, index = 'SourceKernelVersionId', values = 'SubmissionDate', aggfunc = 'count')\ntable.to_csv('\/kaggle\/working\/sourcekernel_submissions.csv')","c7d6efbe":"table = pd.pivot_table(dfKVC, index = 'KernelVersionId', values = 'SourceCompetitionId', aggfunc = 'count')\ntable.to_csv('\/kaggle\/working\/competition_kernelvcounts.csv')\ntable.shape","5fd2f296":"table = pd.pivot_table(dfKVS, index = '', values = 'SourceKernelVersionId', aggfunc = 'count')\ntable.to_csv('\/kaggle\/working\/sourcekernelcounts.csv')","cc570801":"# dfSub = dfSub.set_index('SourceKernelVersionId')\ndfKVS = dfKVS.set_index('SourceKernelVersionId')\ndfSub['KernelVersionId'] = ''\nmaindict = dfSub['KernelVersionId'].to_dict()\nmaindict.update(dfKVS['KernelVersionId'].to_dict())\ndfSub['KernelVersionId'] = pd.Series(maindict)\ndel maindict","f45a42e6":"dfSub = dfSub.reset_index()\ndfSub = dfSub.set_index('KernelVersionId')\ndfKVC = dfKVC.reset_index()\ndfKVC = dfKVC.set_index('KernelVersionId')\ndfSub['SourceCompetitionId'] = ''\nmaindict = dfSub['SourceCompetitionId'].to_dict()\nmaindict.update(dfKVC['SourceCompetitionId'].to_dict())\ndfSub['SourceCompetitionId'] = pd.Series(maindict)\ndel maindict","4f5cad80":"# table = pd.pivot_table(df, values='D', index=['A', 'B'],columns=['C'], aggfunc=np.sum, fill_value=0)\nprint(dfSub.columns)","5619112e":"table3 = pd.pivot_table(dfSub, values = 'PublicScoreFullPrecision', index = ['SubmittedUserId', 'CompetitionId'], columns = ['SubmissionDate'], \n                        aggfunc = np.max)\n# dfSub_pivot = dfSub.pivot(index = 'SubmittedUserId', columns = 'SubmissionDate', values = 'SourceCompetitionId')","b457fc8e":"table3.to_csv('\/kaggle\/working\/submissions.csv')","f2e813b6":"dfSub = pd.read_csv('\/kaggle\/input\/meta-kaggle\/Submissions.csv', parse_dates = True, infer_datetime_format = True)\ndfEpAgents = pd.read_csv('\/kaggle\/input\/meta-kaggle\/EpisodeAgents.csv', parse_dates = True, infer_datetime_format = True)\ndfEp = pd.read_csv('\/kaggle\/input\/meta-kaggle\/Episodes.csv', parse_dates = True, infer_datetime_format = True)","703230d3":"print(dfEpAgents.columns)\nprint(dfEp.columns)","2f3681fd":"dfEpAgents = dfEpAgents.set_index('EpisodeId')\ndfEp = dfEp.set_index('Id')\ndfEpAgents['CompetitionId'] = ''\nepagentscomp_dict = dfEpAgents['CompetitionId'].to_dict()\nepcomp_dict = dfEp['CompetitionId'].to_dict()\nepagentscomp_dict.update(epcomp_dict)\ndfEpAgents['CompetitionId'] = pd.Series(epagentscomp_dict)","3731a761":"# print(set(list(dfEpAgents['CompetitionId'])))\nprint(set(list(dfEp['CompetitionId'])))","294ed45a":"del epagentscomp_dict, epcomp_dict\ndfEpAgents['CreateTime'] = ''\ndfEpAgents['EndTime'] = ''\nctdict = dfEpAgents['CreateTime'].to_dict()\netdict = dfEpAgents['EndTime'].to_dict()\nctdict.update(dfEp['CreateTime'].to_dict())\netdict.update(dfEp['EndTime'].to_dict())\ndfEpAgents['CreateTime'] = pd.Series(ctdict)\ndfEpAgents['EndTime'] = pd.Series(etdict)\ndel ctdict, etdict","72483644":"del dfEp","75e23f7e":"dfSub = dfSub.reset_index()\ndfSub = dfSub.set_index('Id')\ndfEpAgents = dfEpAgents.reset_index()\ndfEpAgents = dfEpAgents.set_index('SubmissionId')\ndfEpAgents.drop(['Id', 'Index', 'State'], axis = 1, inplace = True)\n\nfor col in list(dfEpAgents.columns):\n    dfSub[col] = ''\n    maindict = dfSub[col].to_dict()\n    maindict.update(dfEpAgents[col].to_dict())\n    dfSub[col] = pd.Series(maindict)\n    del maindict\n\ndel dfEpAgents\n\n# dfSub.dropna(how = 'any', inplace = True)","2eb453a0":"print(dfSub.shape)\ndfSub2 = dfSub.dropna(subset = ['CompetitionId'])\nprint(dfSub2.shape)","40bd7362":"dfSub.to_csv('\/kaggle\/working\/subupdated.csv')","b72c4b3e":"dfSub.dropna(['CompetitionId'])","1850fc89":"dfSub = dfSub.reset_index()\ndfSub = dfSub.set_index('Id')\ndfEpAgents = dfEpAgents.reset_index()\ndfEpAgents = dfEpAgents.set_index('SubmissionId')\n\n\nfor col in list(dfSub.columns):\n    dfEpAgents[col] = ''\n    maindict = dfEpAgents[col].to_dict()\n    maindict.update(dfSub[col].to_dict())\n    dfEpAgents[col] = pd.Series(maindict)\n    del maindict","eae555c5":"dfEpAgents.reset_index(inplace = True)\n# dfEpAgents.to_csv('\/kaggle\/working\/EpAgents.csv')\ndel dfSub, dfEp","f3791599":"print(dfEpAgents.shape)\ndfEpAgents.dropna(subset = ['SubmittedUserId', 'CompetitionId'], inplace = True)\nprint(dfEpAgents.shape)","b3e9b69e":"dfKernelUpdated = pd.read_csv('..\/input\/metadata-kernel-updated-12022021\/Kernel_dateupdated.csv')","df0a494d":"0-0. Clean the competition related variables\n0-1. Get the competitionid, teamleaderid, and competitiontype for each submission","f2c33c23":"2. import statsmodels","37a443b3":"10. merge with team size\/ team presence to get the team based association","a2d68560":"1. Remove rows with no competitionid, no reward\n2. Identify the submission corresponding to only \"featured\" and \"research\" competitions\n3. Based on the EvaluationAlgorithmIsMax -> multiple scores with -1 (for FALSE), 1 (for TRUE)\n4. Prepare a column of dScore - PublicScore - PrivateScore\n\n","1e7d88a1":"4. Calculate the standard deviation of this difference for each team","8f3d3b3a":"Linear Regression\n1. clean the data -> remove rows with negative timedifference; remove rows which are after deadline","cd0a8e18":"6. make team id the index\n7. calculate the difference between score dates\n8. calculate the number of feedback prior to the current feedback\n9. drop all unnecessary columns\n10. Score differential calculations ->","85b27bc8":"5. Create other rows for each submission -> score differential\/standard deviation, whether team or not, team size, feedback earlier received\n5.1 Check if submission date and score date are too different"}}