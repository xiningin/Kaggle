{"cell_type":{"c3ed4656":"code","4cf8a14e":"code","185ba63a":"code","6302d67a":"code","016e7659":"code","8d90e021":"code","d11984fc":"code","15e3a782":"code","373df8de":"code","77ea4fa1":"code","83653fbd":"code","bacfea30":"code","d996ca07":"code","483c29c7":"code","3a666d35":"code","7b4afc8e":"markdown","1e63f161":"markdown","13b73b8c":"markdown"},"source":{"c3ed4656":"pip install category_encoders","4cf8a14e":"pip install shapely plotly","185ba63a":"pip install ipython-autotime","6302d67a":"pip install faiss-gpu --no-cache","016e7659":"import os\nimport time\nimport random\nfrom ast import literal_eval\nfrom tqdm import tqdm\n\nimport math\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns; sns.set(style=\"ticks\", color_codes=True)\n\nimport matplotlib as mpl\nimport matplotlib.cm as mcm \nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom IPython.display import display\nfrom plotly import express as px\nfrom plotly import graph_objs as go\nfrom plotly import offline as po\nfrom plotly import tools\nfrom plotly.subplots import make_subplots","8d90e021":"cmap = getattr(mcm, 'plasma_r', mcm.hot_r)\n\nmpl.rcParams['figure.figsize'] = (20, 13)\nmpl.rcParams['axes.grid'] = False\n\npd.set_option('display.max_rows', 50)\npd.set_option('display.max_columns', 100)\npd.set_option('display.width', 256)\n\nfrom pandas.core.common import SettingWithCopyWarning\n\nimport warnings\nwarnings.simplefilter(action=\"ignore\", category=SettingWithCopyWarning)","d11984fc":"from tensorflow.python.client import device_lib\n\ndef is_gpu_enabled():    \n    return len(device_lib.list_local_devices()) > 2\n\nis_gpu_enabled()","15e3a782":"data_dir = '..\/input\/recommendation-engine'","373df8de":"def count_guests(x: list or tuple):\n    x = np.array(x).flatten()\n    return x.shape[0]\/2\n\ndef generate_NoG_vector(x: list or tuple, max_rooms: int=5):\n    x = np.array(x).flatten()\n    n_rooms = min(max_rooms, x.shape[0])\n    x_pad = np.zeros((max_rooms*2,))\n    x_pad[:n_rooms] = x[:n_rooms]\n    return x_pad\n\n\ndf_train = pd.read_csv(os.path.join(data_dir, 'SINCQ_grouped.csv'))\ndf_train['dset'] = 'train'\ndf_train.set_index(keys=['dset', 'SessionID'], drop=True, inplace=True)\n\ntemp = df_train[['no_of_guests']].copy()\ntemp['no_of_guests'] = temp['no_of_guests'].apply(literal_eval)\ntemp['guests_count'] = temp['no_of_guests'].apply(count_guests)\ntemp['guests_vector'] = temp['no_of_guests'].apply(generate_NoG_vector)\n\ncols_cap = [f'Room{x+1}_{y}' for x in range(5) for y in ['Adult', 'Child']]\ndf_train[cols_cap] = temp['guests_vector'].apply(pd.Series)\n\ndisplay(df_train.head())\ndisplay(df_train.tail())","77ea4fa1":"from dateutil.parser import parse\n\ndate_parser = lambda date: parse(date)\n\ndf_test = pd.read_csv(os.path.join(data_dir, 'test_recommendation_engine.csv'), \n                      parse_dates=['CreatedTime', 'ArrivalDate', 'DepartureDate'],\n                      date_parser=date_parser)\ndf_test['dset'] = 'test'\ndf_test.set_index(keys=['dset', 'SessionID'], drop=True, inplace=True)\ndf_test.rename(columns={'IP Location': 'Country'}, inplace=True)\n\ndf_test['days_until_arrival'] = (df_test['ArrivalDate']-df_test['CreatedTime']).dt.days\ndf_test['length_of_stay'] = (df_test['DepartureDate']-df_test['ArrivalDate']).dt.days\ndf_test['booking_hour'] = df_test['CreatedTime'].dt.hour\ndf_test['booking_month'] = df_test['CreatedTime'].dt.month\ndf_test['booking_weekday'] = df_test['CreatedTime'].dt.weekday\ndf_test['arrival_month'] = df_test['ArrivalDate'].dt.month\ndf_test['arrival_weekday'] = df_test['ArrivalDate'].dt.weekday\ndf_test['departure_month'] = df_test['DepartureDate'].dt.month\ndf_test['departure_weekday'] = df_test['DepartureDate'].dt.weekday\n\ndisplay(df_test.head())\ndisplay(df_test.tail())","83653fbd":"cols = cols_cap + ['Country', \n                   'days_until_arrival', 'length_of_stay', 'booking_hour', 'booking_month', 'booking_weekday', \n                   'arrival_month', 'arrival_weekday', 'departure_month', 'departure_weekday', ]\nfeature_cols = cols\nfeatures_train = df_train[feature_cols]\nfeatures_test = df_test[feature_cols]","bacfea30":"label_dir = '..\/input\/recommendation-engine-clustering-output\/'\n\nlabel_train = pd.read_csv(label_dir+'labelled_train.csv', index_col=['dset', 'SessionID'])\nlabel_test = pd.read_csv(label_dir+'labelled_test.csv', index_col=['dset', 'SessionID'])","d996ca07":"label_cols = dict()\nlabel_cols['train'] = ['final_cluster']\nlabel_cols['test'] = ['cluster_1', 'cluster_2', \n                      'neighbor_1', 'neighbor_2', 'neighbor_3', 'neighbor_4', 'neighbor_5', 'neighbor_6', 'neighbor_7']\n\nlabel_train = label_train[label_cols['train']]\nlabel_test = label_test[label_cols['test']]","483c29c7":"for session_test, record in tqdm(features_test.iterrows()):\n    # print(session_test)\n    record = record.to_frame().T\n    # display(record)\n    \n    labels = label_test.loc[session_test].to_frame().T \n    neighbor_idx = labels.values[:,2:].tolist()[0]\n    neighbors = features_train.iloc[neighbor_idx]\n    # display(neighbors)\n    \n    record_neighborhood = pd.concat([record, neighbors], axis='index')\n    record_neighborhood.index = ['sample'] + [f'neighbor_{n+1}' for n in range(7)]\n    # display(record_neighborhood)\n    \n    record_neighborhood.to_csv(f'output_{session_test[1]+1:05d}.csv', index=True)","3a666d35":"colors = ['g', 'r', 'b', 'y', 'c', 'm', \n          'greenyellow', 'olive', 'royalblue', 'maroon', 'forestgreen', 'tan', \n          'mediumorchid', 'deeppink', 'olive', 'goldenrod', 'lightcyan', 'navy']","7b4afc8e":"# Data Loading","1e63f161":"# Libraries","13b73b8c":"# Evaluation"}}