{"cell_type":{"55f86d1c":"code","0637ca81":"code","dbc956bb":"code","2f132007":"code","b3c37a63":"code","467b9288":"code","94b69309":"code","effc0d3d":"code","bdfcb16a":"code","1a498496":"code","51672c84":"code","ee152171":"code","5558fe48":"code","bf634e6e":"code","a3eb9888":"code","7f6f7169":"code","17c96ce1":"code","50589426":"code","79a878aa":"code","0a83c470":"code","bcb8622e":"code","ad558240":"code","2204f19f":"code","70e6e511":"code","7b0cf55d":"code","9e8ed85f":"code","3c41c8d5":"code","a4823b47":"code","0ae7a521":"code","4054b644":"code","3f70bf42":"code","fe1d381e":"code","acc5749e":"code","ae11d536":"code","f8116848":"code","f8074891":"code","cec303f6":"code","1dc7145a":"code","d1e3889f":"code","74f2fa79":"code","ea798cfb":"code","2d84862d":"code","13deb825":"code","3face260":"code","43690500":"code","4aeebd51":"code","926ae6f5":"code","a137fd68":"code","604e6216":"code","3fc6d9ec":"code","1fb86103":"code","7897a335":"code","c347e44f":"code","185e4218":"code","0e237a6c":"code","4a8b8999":"code","e6d53a5e":"code","f2518d24":"code","1a5cc6ed":"code","a0390e6c":"code","1c597a1a":"code","7f391500":"code","3e95c254":"code","f8143f46":"code","1ab36cc9":"code","ed9fa311":"code","235052f5":"code","8bfe9ea4":"code","b3fa3f0f":"code","9feb6ee2":"code","667fb790":"code","d6f2a002":"code","6e10e83f":"code","8ead7474":"code","29101071":"code","aedd0fc7":"code","c94bd568":"code","2f15ae2d":"code","d08159b0":"code","b1820a02":"code","154e5422":"code","7a5cf39a":"code","b2d0b865":"code","1b006ba6":"code","47bf7255":"code","ffbda9fb":"code","caf6ac35":"code","672baff3":"code","5894e347":"code","f60c1cf9":"code","c83d9a3a":"code","b7016fa2":"code","f7743b8a":"code","1d0932d9":"code","88a45326":"code","c3abb17f":"markdown","c51f19d3":"markdown","f1bfb225":"markdown","95c48c67":"markdown","9262e63e":"markdown","035768b7":"markdown","02ab731d":"markdown","25c79969":"markdown","46b84e08":"markdown","bb3e3142":"markdown","dd9b24d5":"markdown","a9c982df":"markdown","0bead96f":"markdown","81913af0":"markdown","c04c0e69":"markdown","8e19b52c":"markdown","8227451e":"markdown","3e1984df":"markdown","58a423ba":"markdown","1db43ca5":"markdown","ce9cdd60":"markdown","6da5ac18":"markdown","e07e703e":"markdown","eda48479":"markdown","96370842":"markdown","546aa0ee":"markdown","a175ab52":"markdown","5f3526f0":"markdown","ec9847c2":"markdown","b5dcc31f":"markdown","65a116a3":"markdown","74542735":"markdown","87748c17":"markdown","0bd3fb1c":"markdown","7221eaad":"markdown","c86464db":"markdown","66261062":"markdown","bb812e76":"markdown","7158dfaa":"markdown","34cafea6":"markdown","aea6c089":"markdown","2e073e39":"markdown","db5c08c4":"markdown","b1d9f60b":"markdown","c6066910":"markdown","2cfab9c0":"markdown","d789969f":"markdown","6ab2ff3d":"markdown","a834d3ac":"markdown","6cb4e3aa":"markdown","ceb9aad4":"markdown","e5b8baaa":"markdown","1d564c3e":"markdown","96a55a30":"markdown","f83919fb":"markdown","ac048c41":"markdown","1e13b419":"markdown","c4aa6e13":"markdown","aee7c74c":"markdown","033c0e9d":"markdown","a75d0fb8":"markdown","8f76305e":"markdown","7bfe5c13":"markdown","0bb74af8":"markdown","a2a5cb16":"markdown","68f9244e":"markdown"},"source":{"55f86d1c":"# import libraries\nimport os\nimport pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# datatable\n!pip install ..\/input\/python-datatable\/datatable-0.11.0-cp37-cp37m-manylinux2010_x86_64.whl\n\n#color\nfrom colorama import Fore, Back, Style\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA\nsr_ = Style.RESET_ALL\n\n#plotly\n#!pip install chart_studio\n!pip install ..\/input\/chart-studio\/chart_studio-1.0.0-py3-none-any.whl\nimport plotly.express as px\nimport chart_studio.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n\n# Settings for pretty nice plots\nplt.style.use('fivethirtyeight')\nplt.show()","0637ca81":"# List files available\nprint(f'{y_}{list(os.listdir(\"..\/input\/riiid-test-answer-prediction\"))}{r_}' )","dbc956bb":"%%time\n\ntrain_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv', low_memory=False, nrows=10**5, \n                       dtype={'row_id': 'int64', 'timestamp': 'int64', 'user_id': 'int32', 'content_id': 'int16', 'content_type_id': 'int8',\n                              'task_container_id': 'int16', 'user_answer': 'int8', 'answered_correctly': 'int8', 'prior_question_elapsed_time': 'float32', \n                             'prior_question_had_explanation': 'boolean',\n                             }\n                      )\nprint(Fore.YELLOW + 'Training data shape: ',Style.RESET_ALL,train_df.shape)\ntrain_df","2f132007":"import gc\n\ndel train_df\ngc.collect()","b3c37a63":"%%time\n\n# reading the dataset from raw csv file\nimport datatable as dt\n\ndt.fread(\"..\/input\/riiid-test-answer-prediction\/train.csv\").to_jay(\"train.jay\")\n\ntrain_df = dt.fread(\"train.jay\").to_pandas()\n\nprint(Fore.YELLOW + 'Training data shape: ',Style.RESET_ALL,train_df.shape)\ntrain_df","467b9288":"import riiideducation\n\n# You can only call make_env() once, so don't lose it!\nenv = riiideducation.make_env()","94b69309":"iter_test = env.iter_test()","effc0d3d":"iteration = 0\ncount = 0\nfor (test_df, sample_prediction_df) in iter_test:\n    test_df['answered_correctly'] = 0.5\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])\n    print(f'{iteration} iteration !!!!')\n    iteration += 1\n    \n    print(len(test_df))\n    count += len(test_df)","bdfcb16a":"'''\nprint(Fore.YELLOW + 'Test data shape: ',Style.RESET_ALL,test_df.shape)\n\ntest_df.head()\n'''","1a498496":"print(f'{y_}Test data shape: {sr_}{test_df.shape}')\n\ntest_df.head()","51672c84":"count","ee152171":"test_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/example_test.csv')","5558fe48":"test_df.iloc[[34, 35, 36]]","bf634e6e":"test_df.iloc[[51, 52, 53]]","a3eb9888":"test_df.iloc[[67, 68, 69]]","7f6f7169":"test_df.iloc[[78, 79, 80]]","17c96ce1":"test_df.iloc[[80, 81, 82]]","50589426":"question_df = pd.read_csv('..\/input\/riiid-test-answer-prediction\/questions.csv')\n\nprint(f'{y_}Questions metadata shape: {sr_}{question_df.shape}')","79a878aa":"question_df.head()","0a83c470":"lectures_df = pd.read_csv('..\/input\/riiid-test-answer-prediction\/lectures.csv')\n\nprint(f'{y_}Lectures metadata shape: {sr_}{question_df.shape}')","bcb8622e":"lectures_df.head()","ad558240":"print(f'{y_}Train Set !!: {sr_}')\nprint(train_df.info())\nprint('-------------')\nprint(f'{y_}Question Set !!: {sr_}')\nprint(question_df.info())\nprint('-------------')\nprint(f'{y_}Lectures Set !!: {sr_}')\nprint(lectures_df.info())","2204f19f":"print(f'Total row_id in Train set: {g_}{train_df[\"row_id\"].count()}{sr_}')","70e6e511":"train_df.isnull().sum()","7b0cf55d":"question_df.isnull().sum()","9e8ed85f":"lectures_df.isnull().sum()","3c41c8d5":"print(Fore.YELLOW + \"The total user ids are\",Style.RESET_ALL,f\"{train_df['user_id'].count()},\", Fore.BLUE + \"from those the unique ids are\", Style.RESET_ALL, f\"{train_df['user_id'].value_counts().shape[0]}.\")","a4823b47":"train_df['row_id'].value_counts().max()","0ae7a521":"train_df['user_id'].value_counts().max()","4054b644":"train_df['content_id'].value_counts().max()","3f70bf42":"train_df['task_container_id'].value_counts().max()","fe1d381e":"train_df = train_df[['user_id', 'row_id', 'timestamp', 'content_id', 'content_type_id', 'task_container_id', 'user_answer', 'answered_correctly', 'prior_question_elapsed_time', 'prior_question_had_explanation']].drop_duplicates()\ntrain_df.head()","acc5749e":"train_df['timestamp'].iplot(kind='hist',\n                              xTitle='timestamp', \n                              yTitle='Counts',\n                              linecolor='black', \n                              opacity=0.7,\n                              color='#FB8072',\n                              theme='pearl',\n                              bargap=0.2,\n                              gridcolor='white',\n                              title='Distribution of the timestamp in the train_df')","ae11d536":"train_df.groupby(['user_id'])['timestamp'].max().sort_values(ascending=False)","f8116848":"fig = px.scatter(train_df, x=\"user_id\", y=\"timestamp\", color='user_id')\nfig.show()","f8074891":"train_df['content_id'].value_counts()","cec303f6":"train_df['content_id'].iplot(kind='hist',\n                              xTitle='content_id', \n                              yTitle='Counts',\n                              linecolor='black', \n                              opacity=0.7,\n                              color='#FB8072',\n                              theme='pearl',\n                              bargap=0.2,\n                              gridcolor='white',\n                              title='Distribution of the content_id column in the Unique Train_df')","1dc7145a":"train_df.loc[train_df['content_id'] == 4120, 'user_answer'].value_counts()","d1e3889f":"question_df.loc[question_df['question_id'] == 4120]","74f2fa79":"fig = px.scatter(train_df, x=\"user_id\", y=\"content_id\", color='content_type_id')\nfig.show()","ea798cfb":"train_df['content_type_id'].value_counts()","2d84862d":"train_df['content_type_id'].value_counts().iplot(kind='bar',\n                                          yTitle='Count', \n                                          linecolor='black', \n                                          opacity=0.7,\n                                          color='blue',\n                                          theme='pearl',\n                                          bargap=0.8,\n                                          gridcolor='white',\n                                          title='Distribution of the Content_type_id column in Train_df')","13deb825":"# pull is given as a fraction of the pie radius\nfig = go.Figure(data=[go.Pie(labels=train_df['content_type_id'].value_counts().index, values=train_df['content_type_id'].value_counts(), pull=[0, 0.2])])\nfig.show()","3face260":"fig = px.scatter(train_df, x=\"content_id\", y=\"user_id\", color='user_id')\nfig.show()","43690500":"train_df['task_container_id']","4aeebd51":"train_df['task_container_id'].iplot(kind='hist',\n                              xTitle='task_container_id', \n                              yTitle='Counts',\n                              linecolor='black', \n                              opacity=0.7,\n                              color='#FB8072',\n                              theme='pearl',\n                              bargap=0.2,\n                              gridcolor='white',\n                              title='Distribution of the task_container_id in the train_df')","926ae6f5":"fig = px.scatter(train_df, x=\"task_container_id\", y=\"prior_question_elapsed_time\", color='user_id')\nfig.show()","a137fd68":"train_df['task_container_id'].value_counts()","604e6216":"train_df.loc[train_df['task_container_id'] == 15, 'user_answer'].value_counts()","3fc6d9ec":"question_df.loc[question_df['question_id'] == 15]","1fb86103":"train_df.loc[train_df['task_container_id'] == 5283, 'user_answer'].value_counts()","7897a335":"question_df.loc[question_df['question_id'] == 5283]","c347e44f":"train_df['user_answer'].value_counts()","185e4218":"train_df['user_answer'].value_counts().iplot(kind='bar',\n                                          yTitle='Count', \n                                          linecolor='black', \n                                          opacity=0.7,\n                                          color='red',\n                                          theme='pearl',\n                                          bargap=0.8,\n                                          gridcolor='white',\n                                          title='Distribution of the user_answer column in Train_df')","0e237a6c":"ds = train_df['user_answer'].value_counts().reset_index()\nds.columns = ['user_answer', 'count']\nfig = px.pie(\n    ds, \n    values='count', \n    names=\"user_answer\", \n    title='user_answer bar chart', \n    width=500, \n    height=500\n)\nfig.show()","4a8b8999":"fig = px.scatter(train_df, x=\"user_answer\", y=\"content_type_id\", color='user_id')\nfig.show()","e6d53a5e":"train_df['answered_correctly'].value_counts()","f2518d24":"train_df['answered_correctly'].value_counts().iplot(kind='bar',\n                                          yTitle='Count', \n                                          linecolor='black', \n                                          opacity=0.7,\n                                          color='blue',\n                                          theme='pearl',\n                                          bargap=0.8,\n                                          gridcolor='white',\n                                        title='Distribution of the answered_correctly column in Train_df')","1a5cc6ed":"plt.figure(figsize = (16,12))\n\na = sns.countplot(data=train_df, x='answered_correctly', hue='prior_question_had_explanation')\n\n\nfor p in a.patches:\n    a.annotate(format(p.get_height(), ','), \n           (p.get_x() + p.get_width() \/ 2., \n            p.get_height()), ha = 'center', va = 'center', \n           xytext = (0, 4), textcoords = 'offset points')\n\nplt.title('Answers result with and without explanations', fontsize=20)\nplt.xlabel('Answered_correctly', fontsize = 16)\nsns.despine(left=True, bottom=True);","a0390e6c":"plt.figure(figsize=(16,8))\nsns.countplot(train_df['user_answer'], hue=train_df['answered_correctly'],palette='Set1',**{'hatch':'-','linewidth':0.5})\nplt.title('User_Answer vs Correctness', fontsize = 20)\nplt.show()","1c597a1a":"fig = px.scatter(train_df, x=\"answered_correctly\", y=\"task_container_id\", color='user_id')\nfig.show()","7f391500":"train_df['prior_question_elapsed_time']","3e95c254":"train_df['prior_question_elapsed_time'].iplot(kind='hist',\n                              xTitle='prior_question_elapsed_time', \n                              yTitle='Counts',\n                              linecolor='black', \n                              opacity=0.7,\n                              color='#FB8072',\n                              theme='pearl',\n                              bargap=0.2,\n                              gridcolor='white',\n                              title='Distribution of the prior_question_elapsed_time column in the Unique Train_df')","f8143f46":"fig = px.scatter(train_df, x=\"content_id\", y=\"prior_question_elapsed_time\", color='user_id')\nfig.show()","1ab36cc9":"train_df['prior_question_had_explanation'].value_counts()","ed9fa311":"train_df['prior_question_had_explanation'].value_counts().iplot(kind='bar',\n                                          yTitle='Count', \n                                          linecolor='black', \n                                          opacity=0.7,\n                                          color='red',\n                                          theme='pearl',\n                                          bargap=0.8,\n                                          gridcolor='white',\n                                          title='Distribution of the prior_question_had_explanation column in Train_df')","235052f5":"temp_train = train_df.groupby('user_id').agg({'answered_correctly': 'sum', 'row_id':'count'})\nplt.figure(figsize = (16,8))\nsns.distplot((temp_train.answered_correctly * 100)\/temp_train.row_id)\nplt.title('Distribution of correct answers percentage by each user', fontdict = {'size': 16})\nplt.xlabel('Percentage of correct answers', size = 12)","8bfe9ea4":"corrmat = train_df.corr() \nf, ax = plt.subplots(figsize =(9, 8)) \nsns.heatmap(corrmat, ax = ax, cmap = 'RdYlBu_r', linewidths = 0.5) ","b3fa3f0f":"question_df.head()","9feb6ee2":"question_df['bundle_id'].iplot(kind='hist',\n                              xTitle='bundle_id', \n                              yTitle='Counts',\n                              linecolor='black', \n                              opacity=0.7,\n                              color='#FB8072',\n                              theme='pearl',\n                              bargap=0.2,\n                              gridcolor='white',\n                              title='Distribution of the bundle_id in the question_df')","667fb790":"question_df['correct_answer'].iplot(kind='hist',\n                              xTitle='correct_answer', \n                              yTitle='Counts',\n                              linecolor='black', \n                              opacity=0.7,\n                              color='#098060',\n                              theme='pearl',\n                              bargap=0.2,\n                              gridcolor='white',\n                              title='Distribution of the correct_answer in the question_df')","d6f2a002":"fig = px.scatter(question_df, x=\"bundle_id\", y=\"correct_answer\", color='question_id')\nfig.show()","6e10e83f":"question_df['part'].iplot(kind='hist',\n                              xTitle='correct_answer', \n                              yTitle='Counts',\n                              linecolor='black', \n                              opacity=0.7,\n                              color='#FB8072',\n                              theme='pearl',\n                              bargap=0.2,\n                              gridcolor='white',\n                              title='Distribution of the part in the question_df')","8ead7474":"fig = px.scatter(question_df, x=\"correct_answer\", y=\"part\", color='part')\nfig.show()","29101071":"corrmat = question_df.corr() \nf, ax = plt.subplots(figsize =(9, 8)) \nsns.heatmap(corrmat, ax = ax, cmap = 'RdYlBu_r', linewidths = 0.5) ","aedd0fc7":"lectures_df.head()","c94bd568":"lectures_df['tag'].iplot(kind='hist',\n                              xTitle='tag', \n                              yTitle='Counts',\n                              linecolor='black', \n                              opacity=0.7,\n                              color='#FB8072',\n                              theme='pearl',\n                              bargap=0.2,\n                              gridcolor='white',\n                              title='Distribution of the tag in the lectures_df')","2f15ae2d":"lectures_df['part'].iplot(kind='hist',\n                              xTitle='part', \n                              yTitle='Counts',\n                              linecolor='black', \n                              opacity=0.7,\n                              color='#098060',\n                              theme='pearl',\n                              bargap=0.2,\n                              gridcolor='white',\n                              title='Distribution of the part in the lectures_df')","d08159b0":"lectures_df['type_of'].iplot(kind='hist',\n                              xTitle='part', \n                              yTitle='Counts',\n                              linecolor='black', \n                              opacity=0.7,\n                              color='#FB8072',\n                              theme='pearl',\n                              bargap=0.2,\n                              gridcolor='white',\n                              title='Distribution of the type_of in the lectures_df')","b1820a02":"fig = px.scatter(lectures_df, x=\"type_of\", y=\"part\", color='lecture_id')\nfig.show()","154e5422":"fig = px.bar(lectures_df, x='type_of', color=lectures_df['type_of'], labels={'value':'type_of'}, title='Type of lectures distribution Overall')\nfig.show()","7a5cf39a":"fig = px.bar(lectures_df, x='type_of', color=lectures_df['type_of'], labels={'value':'type_of'}, title='Type of lectures distribution based on each part', facet_col='part')\nfig.show()","b2d0b865":"corrmat = lectures_df.corr() \nf, ax = plt.subplots(figsize =(9, 8)) \nsns.heatmap(corrmat, ax = ax, cmap = 'RdYlBu_r', linewidths = 0.5) ","1b006ba6":"import pandas_profiling as pdp","47bf7255":"train_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/train.csv', low_memory=False, nrows=10**5, \n                       dtype={'row_id': 'int64', 'timestamp': 'int64', 'user_id': 'int32', 'content_id': 'int16', 'content_type_id': 'int8',\n                              'task_container_id': 'int16', 'user_answer': 'int8', 'answered_correctly': 'int8', 'prior_question_elapsed_time': 'float32', \n                             'prior_question_had_explanation': 'boolean',\n                             }\n                      )\n\ntest_df = pd.read_csv('\/kaggle\/input\/riiid-test-answer-prediction\/example_test.csv')","ffbda9fb":"profile_train_df = pdp.ProfileReport(train_df)","caf6ac35":"profile_train_df","672baff3":"profile_test_df = pdp.ProfileReport(test_df)","5894e347":"profile_test_df","f60c1cf9":"profile_question_df = pdp.ProfileReport(question_df)","c83d9a3a":"profile_question_df","b7016fa2":"profile_lectures_df = pdp.ProfileReport(lectures_df)","f7743b8a":"profile_lectures_df","1d0932d9":"content_acc = train_df.query('answered_correctly != -1').groupby('content_id')['answered_correctly'].mean().to_dict()","88a45326":"def add_content_acc(x):\n    if x in content_acc.keys():\n        return content_acc[x]\n    else:\n        return 0.5\n\n\nfor (test_df, sample_prediction_df) in iter_test:\n    test_df['answered_correctly'] = test_df['content_id'].apply(add_content_acc).values\n    env.predict(test_df.loc[test_df['content_type_id'] == 0, ['row_id', 'answered_correctly']])","c3abb17f":"https:\/\/www.kaggle.com\/artgor\/riiid-eda-feature-engineering-and-models","c51f19d3":"## Test_df","f1bfb225":"`0` means some users not watched lectures because 0 if the event was a question being posed to the user.","95c48c67":"# 7. <a id='7'>Data Exploration in Details For Metadata-Lectures \ud83c\udfa0<\/a> ","9262e63e":"### Reading Train data in jay format","035768b7":"# Metadata - lectures.csv","02ab731d":"`question_id`: foreign key for the train\/test content_id column, when the content type is question (0).\n\n`bundle_id`: code for which questions are served together.\n\n`correct_answer`: the answer to the question. Can be compared with the train user_answer column to check if the user was right.\n\n`part`: top level category code for the question.\n\n`tags`: one or more detailed tag codes for the question. The meaning of the tags will not be provided, but these codes are sufficient for clustering the questions together.","25c79969":"## Prior_question_had_explanation Distribution of Unique user_id","46b84e08":"It need to check question.csv.","bb3e3142":"# I'm working in progress.","dd9b24d5":"### Content id vs prior_question_elapsed_time","a9c982df":"## Distribution of correct answers percentage by each user\n- https:\/\/www.kaggle.com\/aykhanpy\/riiid-answer-correctness-prediction-eda","0bead96f":"## Distribution of task_container_id","81913af0":"### Distribution of content_id","c04c0e69":"## Heatmap for Lectures_df","8e19b52c":"# 7. Etc - Sample Submission","8227451e":"We can see that some users have huge activity time.","3e1984df":"## Heatmap for Question_df","58a423ba":"### Missing Values","1db43ca5":"train_df.loc[train_df['content_id'] == 4120, 'user_answer'].value_counts()","ce9cdd60":"It's larger than will fit in memory with default settings, so we'll specify more efficient datatypes and only load a subset of the data for now.","6da5ac18":"# Heatmap for train_df","e07e703e":"# 3. <a id='3'>Reading the dataset \ud83d\udcda<\/a>","eda48479":"# 2. <a id='2'>Importing the necessary libraries\ud83d\udcd7<\/a>","96370842":"There are two different rows that mirror what information the AI tutor actually has available at any given time, but with the user interactions grouped together for the sake of API performance rather than strictly showing information for a single user at a time. Some questions will appear in the hidden test set that have NOT been presented in the train set, emulating the challenge of quickly adapting to modeling newly introduced questions.","546aa0ee":"### Original Reading Train.csv","a175ab52":"If you feel this was something new and fresh, and it added some value to you, \n# please consider <font color='orange'> upvoting<\/font>, it motivates to keep writing good kernels. \ud83d\ude04","5f3526f0":"From this we can see that there are four continuous features: \n* `timestamp` which is the time between this user interaction and the first event from that user.\n* `content_id`: ID code for the user interaction \n* `task_container_id`: Id code for the batch of questions or lectures. \n* `prior_question_elapsed_time` which is how long it took a user to answer their previous question bundle.\n\nThere is one low cardinality integer feature:\n* `user_id`: the ID code for the user.\n\nThere are categorical features:\n* `user_answer`: the user's answer to the question, if any (read -1 as null), and answered_correctly if the user responded correctly (again, read -1 as null).\n\n* `content_type_id`: 0 if the event was a question being posed to the user, 1 if the event was the user watching a lecture","ec9847c2":"## If this kernel is useful, <font color='orange'>please upvote<\/font>!\n- See you next time!","b5dcc31f":"# 5. <a id='5'>Data Exploration in Details For Train Dataset \ud83c\udfa0<\/a> ","65a116a3":"## Creating Individual User Id Dataframe for Train_df\nfor 349 unique user ids, we make new dataframe.","74542735":"`lecture_id`: foreign key for the train\/test content_id column, when the content type is lecture (1).\n\n`part`: top level category code for the lecture.\n\n`tag`: one tag codes for the lecture. The meaning of the tags will not be provided, but these codes are sufficient for clustering the lectures together.\n\n`type_of`: brief description of the core purpose of the lecture","87748c17":"## Distribution of Prior_question_elapsed_time","0bd3fb1c":"## Distribution of content_type_id","7221eaad":"In this competition, your challenge is to create algorithms for \"Knowledge Tracing,\" the modeling of student knowledge over time. The goal is to accurately predict how students will perform on future interactions. You will pair your machine learning skills using Riiid\u2019s EdNet data.\n\n## 1.1 Metric: Area under the ROC curve\nSubmissions are evaluated on area under the ROC curve between the predicted probability and the observed target.\n\n- [Image link](http:\/\/arogozhnikov.github.io\/2015\/10\/05\/roc-curve.html)\n\n<img src='http:\/\/arogozhnikov.github.io\/images\/roc_curve.gif' width='640'>\n\n## 1.2. Important point\n\nThis is a time-series code competition, you will receive test set data and make predictions with Kaggle's time-series API. Please be sure to review the Time-series API Details section closely.\n\nyou will predict whether students are able to answer their next questions correctly.","c86464db":"### Value Counts","66261062":"- https:\/\/www.kaggle.com\/sishihara\/riiid-answered-correctly-benchmark","bb812e76":"Please compare with the previous visualization information. And we may compare to Pandas Profiling below.","7158dfaa":"### Distribution of timestamp","34cafea6":"It is also need to check question.csv.","aea6c089":"### Unique User Id","2e073e39":"# 6. <a id='6'>Data Exploration in Details For Metadata-Question \ud83c\udfa0<\/a> ","db5c08c4":"# 4. <a id='4'>Basic Data Exploration \ud83c\udfd5\ufe0f<\/a> ","b1d9f60b":"# Metadata - Questions.csv","c6066910":"Let's see example_test.csv.","2cfab9c0":"# 8. <a id='8'>Pandas Profiling <\/a>","d789969f":"`timestamp`: the time between this user interaction and the first event from that user.","6ab2ff3d":"## Distribution of User_answer","a834d3ac":"## Answered_correctly Distribution of Unique user_id","6cb4e3aa":"## correct_answer","ceb9aad4":"please see basic kernels.\n- [Competition API Detailed Introduction](http:\/\/https:\/\/www.kaggle.com\/sohier\/competition-api-detailed-introduction)\n- [Quick Sample Submission](http:\/\/https:\/\/www.kaggle.com\/sohier\/quick-sample-submission)","e5b8baaa":"<img src='https:\/\/www.koreatechtoday.com\/wp-content\/uploads\/2020\/04\/riiid-logo-background-scaled.jpg' width='640'>\n\n<h1><center>Riiid! Answer Correctness Prediction - EDA<\/center><h1>\n    \n# 1. <a id='1'>Introduction \ud83c\udccf <\/a>\n\n\n","1d564c3e":"`104` rows in Test_df\n* but, End of `row_id` number is `108`.","96a55a30":"- https:\/\/www.kaggle.com\/rohanrao\/riiid-with-blazing-fast-rid\/data?","f83919fb":"`-1` means null for lectures.","ac048c41":"### Distribution content_id over Unique user_id","1e13b419":"https:\/\/www.kaggle.com\/naim99\/eda-riiid","c4aa6e13":"## Bundle Id","aee7c74c":"### General Info","033c0e9d":"The format is largely the same as `train.csv`","a75d0fb8":"- https:\/\/www.kaggle.com\/dwchen\/riiid-test-simpleeda-10m-data","8f76305e":"## Train_df","7bfe5c13":"It means that `content_id` is low number, some users did not answer questions.","0bb74af8":"Some questions will appear in the hidden test set that have NOT been presented in the train set, emulating the challenge of quickly adapting to modeling newly introduced questions. Their metadata is still in question.csv as usual.\n - `prior_group_responses (string)`:  all of the user_answer entries for previous group in a string representation of a list in the first row of the group. All other rows in each group are null. If you are using Python, you will likely want to call eval on the non-null rows. Some rows may be null, or empty lists.\n\n- `prior_group_answers_correct (string)` : all the answered_correctly field for previous group, with the same format and caveats as prior_group_responses. Some rows may be null, or empty lists.","a2a5cb16":"## <font size='5' color='blue'>Contents<\/font> \n\n\n\n* [Basic Exploratory Data Analysis](#1)  \n    * [Getting started - Importing libraries]()\n    * [Reading the dataset]()\n    \n \n* [Basic Data Exploration](#2)   \n     * [Check Train Info.]()\n     * [Check Test Info.]()\n     * [Check Metadata Info.]()\n\n* [Data Exploration in Details for Train DataFrame](#3)   \n     * [Distribution of columns]()\n     * [Heatmap]()\n     \n \n* [Pandas Profiling](#3)    \n     * [Pandas Profiling Report For Train Info.]()\n     * [Pandas Profiling Report For Test Info.]()\n     * [Pandas Profiling Report For Metadata Info.]()\n\n     \n* [Etc. Sample Submission](#4)","68f9244e":"Some `row_id`s are hidden.\n\n* `36`, `52`, `68`, `83`, `85`"}}