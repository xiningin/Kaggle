{"cell_type":{"2f32bb93":"code","8b2c2045":"code","e616fd0d":"code","0e24852c":"code","36e9583f":"code","2085b428":"code","1e6ff2f0":"code","01b2c14b":"code","92a90333":"code","97c41d87":"code","a1b935b9":"code","fd9bd74b":"code","177fddd7":"code","2e057164":"code","38ee1518":"code","28895cf1":"code","531237b5":"code","a7a93e39":"code","5aaa5352":"code","5d1802a0":"markdown"},"source":{"2f32bb93":"# Import the libraries we need\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom datetime import datetime, date, timedelta\n\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode, iplot\n\nimport folium\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","8b2c2045":"init_notebook_mode()","e616fd0d":"# filename: data set to load from kernel\ndata_path = \"..\/input\/nys-turnstile-usage-data\/turnstile-usage-data-2018.csv\"\n\ndata = pd.read_csv(data_path, parse_dates=['Date'])","0e24852c":"def fix_col_names(df):\n    #Fix columns with trailing spaces\n    df.columns = df.columns.str.strip()\n    #Fix Columns with spaces in column name.\n    df.columns = [col.lower().replace(' ', '_') for col in df.columns]","36e9583f":"fix_col_names(data)","2085b428":"data.head()","1e6ff2f0":"#narrow columns to only the ones that we're interested in.\ndata = data.filter(['unit', 'station', 'date', 'entries', 'exits'], axis=1)\n# data = data.set_index(['station','date'])\ndata.tail(n=20)","01b2c14b":"stations_path = '..\/input\/subway-station-locations-nyc\/geocoded.csv'\nstations = pd.read_csv(stations_path, \n                       usecols=[0, 2, 5, 6], \n                       names=['unit', 'station', 'latitude', 'longitude'])\n\nstations.head()\n#stations.iloc[:, 0]","92a90333":"len(stations.unit.unique()), len(data.unit.unique())","97c41d87":"df = pd.merge(data, stations, how='inner', on='unit')\ndf.head()","a1b935b9":"len(df.unit.unique())","fd9bd74b":"station_day_sum = (df.groupby(by='station_x')\n                   .apply(lambda x: x.resample(rule='1D', on='date')\n                   .agg({'entries': 'sum', 'exits': 'sum', 'latitude': 'first', 'longitude': 'first'}))\n                  )\n\nstation_day_sum.head()","177fddd7":"# Function to calculate several metrics on the dataset\n# Now that it's grouped by station, date\ndef calculate_flow_stats(row):\n    d = row.entries - row.exits\n    return(row.entries + row.exits, d, abs(d))\n\n## row function returns tuple of values that need to be spread out to each new column\ndef apply_flow_stats(df):\n    (df['flowtotal'], df['flowdelta'],df['flowabs']) = zip(*df.apply(calculate_flow_stats, axis=1))\n\napply_flow_stats(station_day_sum)\nstation_day_sum.head()","2e057164":"most_recent = station_day_sum.index.get_level_values('date').max()\nmost_recent_5 = [most_recent - timedelta(i) for i in range(5)]\nmost_recent_5","38ee1518":"last_day = station_day_sum[station_day_sum.index.get_level_values('date') == most_recent]\nlast_day.head()","28895cf1":"last_week = station_day_sum[station_day_sum.index.get_level_values('date').isin(most_recent_5)]\nlast_week.head(n=10)","531237b5":"last_day.isna().sum()","a7a93e39":"last_day.dropna(inplace=True)\nlast_day.isna().sum()","5aaa5352":"fmap = folium.Map(location=[40.738, -73.94],\n                        zoom_start=12,\n                        tiles=\"CartoDB dark_matter\")\n\nfor row, data in last_day.iterrows():\n    \n    if data[5] > 0: color = \"#E37222\" # tangerine\n    else: color=\"#0A8A9F\" # teal\n        \n    popup_text = \"{}<br> total entries: {}<br> total exits: {}<br> net traffic: {}\"\n    popup_text = popup_text.format(row[0],\n                            int(data[0]),\n                            int(data[1]),\n                            int(data[5]))\n\n    latitude, longitude = data[2], data[3]\n    radius = data[4] \/ 10000000000\n\n    folium.CircleMarker(location=(latitude, longitude),\n                            radius=radius,\n                            color=color,\n                            popup=popup_text,\n                            fill=True).add_to(fmap)\n\nfmap","5d1802a0":"**Credits**\n1. https:\/\/github.com\/vincentropy\/python_cartography_tutorial\/blob\/master\/part1_basic_folium_maps.ipynb\n2. https:\/\/www.kaggle.com\/osunderdog\/nyc-subway-data"}}