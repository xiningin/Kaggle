{"cell_type":{"6a2ff42d":"code","e3b0b3ce":"code","b2a7a29a":"code","b4c8e0d4":"code","5ca2bc66":"code","92002d03":"code","ee906daa":"code","fd65a520":"code","91ecba91":"code","7f1ac7bc":"code","f0088eb0":"code","f32f3d25":"code","bec6145d":"code","c422274c":"code","6e913709":"code","9bd86a3f":"code","acc761b0":"code","595ecf3f":"code","05727053":"code","9c37c8d9":"code","6732bfb7":"code","d3cd6d8a":"code","5d7c38b3":"code","c343343b":"code","79eaf639":"code","36f26a91":"code","4cef8883":"markdown"},"source":{"6a2ff42d":"!ls ..\/input\/flowers-recognition\/flowers","e3b0b3ce":"import torch\nimport torchvision\nimport torch.nn as nn\nimport torchvision.transforms as transforms\nfrom sklearn.model_selection import train_test_split","b2a7a29a":"device= torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","b4c8e0d4":"transform = transforms.Compose([transforms.RandomHorizontalFlip(),\n                                transforms.RandomRotation(0.2),\n                                transforms.ToTensor(),\n                                transforms.Resize((80,80))\n                               ])","5ca2bc66":"data= torchvision.datasets.ImageFolder(root=\"..\/input\/flowers-recognition\/flowers\", transform=transform)","92002d03":"len(data)","ee906daa":"train_set, val_set = torch.utils.data.random_split(data, [6917, 1729])\n\nbatch_size = 40\ntrain_loader = torch.utils.data.DataLoader(dataset=train_set,\n                                           batch_size=batch_size, \n                                           shuffle=True)\n\ntest_loader = torch.utils.data.DataLoader(dataset=val_set,\n                                          batch_size=batch_size, \n                                          shuffle=True)\n","fd65a520":"# Hyper parameters\nnum_epochs = 5\nnum_classes = 5\nlearning_rate = 0.001\n","91ecba91":"class ConvNet(nn.Module):\n    def __init__(self, num_classes=10):\n        super(ConvNet, self).__init__()\n\n        self.layer1 = nn.Sequential(\n            nn.Conv2d(3, 16, kernel_size=5, stride=1, padding=2),\n            nn.BatchNorm2d(16),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2))\n        self.layer2 = nn.Sequential(\n            nn.Conv2d(16, 32, kernel_size=5, stride=1, padding=2),\n            nn.BatchNorm2d(32),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2))\n        self.layer3 = nn.Sequential(\n            nn.Conv2d(32, 64, kernel_size=5, stride=1, padding=2),\n            nn.BatchNorm2d(64),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2))\n        self.layer4 = nn.Sequential(\n            nn.Conv2d(64, 128, kernel_size=5, stride=1, padding=2),\n            nn.BatchNorm2d(128),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2))\n        self.fc1 = nn.Linear(5*5*128, 1600)\n        self.fc2 = nn.Linear(1600, 3200)\n        self.fc3 = nn.Linear(3200, num_classes)\n        \n    def forward(self, x):\n        out = self.layer1(x)\n        out = self.layer2(out)\n        out = self.layer3(out)\n        out = self.layer4(out)\n        out = out.reshape(out.size(0), -1)\n        out = self.fc1(out)\n        out = self.fc2(out)\n        out = self.fc3(out)\n        return out","7f1ac7bc":"model = ConvNet().to(device)\n","f0088eb0":"# Loss and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n","f32f3d25":"total_step = len(train_loader)\nfor epoch in range(num_epochs):\n    model.train()\n    training_accuracy=0\n    for i, (images, labels) in enumerate(train_loader):\n        \n        images = images.to(device)\n        labels = labels.to(device)\n        \n        # Forward pass\n        outputs = model(images)\n        loss = criterion(outputs, labels)\n        \n        # Backward and optimize\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n    \n        # Checking accuracy\n        preds = outputs.data.max(dim = 1, keepdim = True)[1]\n        training_accuracy += preds.eq(labels.data.view_as(preds)).cpu().sum()\n        \n        \n    training_accuracy = training_accuracy\/len(train_loader.dataset) * 100\n        \n    print ('Epoch [{}\/{}], Loss: {:.4f}, Training Accuracy: {}' \n                   .format(epoch+1, num_epochs, loss.item(), training_accuracy))\n","bec6145d":"total_step = len(train_loader)\nfor epoch in range(num_epochs):\n    model.eval()\n    testing_accuracy=0\n    for i, (images, labels) in enumerate(test_loader):\n        \n        images = images.to(device)\n        labels = labels.to(device)\n        \n        # Forward pass\n        outputs = model(images)\n        loss = criterion(outputs, labels)\n        \n        # Backward and optimize\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        \n        # Checking accuracy\n        preds = outputs.data.max(dim = 1, keepdim = True)[1]\n        testing_accuracy += preds.eq(labels.data.view_as(preds)).cpu().sum()\n        \n        \n    testing_accuracy = testing_accuracy\/len(test_loader.dataset) * 100\n        \n    print ('Epoch [{}\/{}], Loss: {:.4f}, Testing Accuracy: {}' \n                   .format(epoch+1, num_epochs, loss.item() , testing_accuracy))\n","c422274c":"# Train the model\nmodel.train()  # eval mode (batchnorm uses moving mean\/variance instead of mini-batch mean\/variance)\nwith torch.no_grad():\n    correct = 0\n    total = 0\n    for images, labels in train_loader:\n        images = images.to(device)\n        labels = labels.to(device)\n        outputs = model(images)\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\n    print('Train Accuracy of the model on the 8000 test images with Relu is: {} %'.format(100 * correct \/ total))\n","6e913709":"# Test the model\nmodel.eval()  # eval mode (batchnorm uses moving mean\/variance instead of mini-batch mean\/variance)\nwith torch.no_grad():\n    correct = 0\n    total = 0\n    for images, labels in test_loader:\n        images = images.to(device)\n        labels = labels.to(device)\n        outputs = model(images)\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\n    print('Test Accuracy of the model on the 8000 test images with Relu is: {} %'.format(100 * correct \/ total))\n","9bd86a3f":"transform = transforms.Compose([transforms.RandomHorizontalFlip(),\n                                transforms.RandomRotation(0.2),\n                                transforms.ToTensor(),\n                                transforms.Resize((80,80))\n                               ])","acc761b0":"data= torchvision.datasets.ImageFolder(root=\"..\/input\/flowers-recognition\/flowers\", transform=transform)","595ecf3f":"train_set, val_set = torch.utils.data.random_split(data, [6917, 1729])\n\nbatch_size = 40\ntrain_loader = torch.utils.data.DataLoader(dataset=train_set,\n                                           batch_size=batch_size, \n                                           shuffle=True)\n\ntest_loader = torch.utils.data.DataLoader(dataset=val_set,\n                                          batch_size=batch_size, \n                                          shuffle=True)\n","05727053":"vgg = torchvision.models.vgg11(pretrained=True)\nvgg","9c37c8d9":"vgg.classifier[6].out_features = 5\nfor param in vgg.features.parameters(): \n    param.requires_grad = False\n\nvgg = vgg.cuda()","6732bfb7":"# Hyper parameters\nnum_epochs = 5\nnum_classes = 5\nlearning_rate = 0.001\n","d3cd6d8a":"# Loss and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(vgg.parameters(), lr=learning_rate)","5d7c38b3":"total_step = len(train_loader)\nfor epoch in range(num_epochs):\n    vgg.train()\n    training_accuracy=0\n    for i, (images, labels) in enumerate(train_loader):\n        \n        images = images.to(device)\n        labels = labels.to(device)\n        \n        # Forward pass\n        outputs = vgg(images)\n        loss = criterion(outputs, labels)\n        \n        # Backward and optimize\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        \n        # Checking accuracy\n        preds = outputs.data.max(dim = 1, keepdim = True)[1]\n        training_accuracy += preds.eq(labels.data.view_as(preds)).cpu().sum()\n        \n        \n    training_accuracy = training_accuracy\/len(train_loader.dataset) * 100\n        \n    print ('Epoch [{}\/{}], Loss: {:.4f}, Training Accuracy: {}' \n                   .format(epoch+1, num_epochs, loss.item(), training_accuracy))\n","c343343b":"total_step = len(train_loader)\nfor epoch in range(num_epochs):\n    vgg.eval()\n    testing_accuracy=0\n    for i, (images, labels) in enumerate(test_loader):\n        \n        images = images.to(device)\n        labels = labels.to(device)\n        \n        # Forward pass\n        outputs = vgg(images)\n        loss = criterion(outputs, labels)\n        \n        # Backward and optimize\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        \n        # Checking accuracy\n        preds = outputs.data.max(dim = 1, keepdim = True)[1]\n        testing_accuracy += preds.eq(labels.data.view_as(preds)).cpu().sum()\n        \n        \n    testing_accuracy = testing_accuracy\/len(test_loader.dataset) * 100\n        \n    print ('Epoch [{}\/{}], Loss: {:.4f}, Testing Accuracy: {}' \n                   .format(epoch+1, num_epochs, loss.item(), testing_accuracy))\n","79eaf639":"# Train the model\nvgg.train()  # eval mode (batchnorm uses moving mean\/variance instead of mini-batch mean\/variance)\nwith torch.no_grad():\n    correct = 0\n    total = 0\n    for images, labels in train_loader:\n        images = images.to(device)\n        labels = labels.to(device)\n        outputs = vgg(images)\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\n    print('Train Accuracy of the model on the 8000 test images with Relu is: {} %'.format(100 * correct \/ total))\n","36f26a91":"# Test the model\nvgg.eval()  # eval mode (batchnorm uses moving mean\/variance instead of mini-batch mean\/variance)\nwith torch.no_grad():\n    correct = 0\n    total = 0\n    for images, labels in test_loader:\n        images = images.to(device)\n        labels = labels.to(device)\n        outputs = vgg(images)\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\n    print('Test Accuracy of the model on the 8000 test images with Relu is: {} %'.format(100 * correct \/ total))\n","4cef8883":"# Applying Transfer Learning with vgg"}}