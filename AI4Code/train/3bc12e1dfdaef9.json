{"cell_type":{"fd099969":"code","99375e14":"code","4b0a7b1a":"code","945b47b1":"code","baee328d":"code","feae39cf":"code","4fc455e2":"code","ced472c9":"code","da581428":"code","aae4f502":"code","f2bb5882":"code","e6ad3622":"code","444dade5":"markdown"},"source":{"fd099969":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nPath = \"..\/input\/\"\n\nC = ['MachineIdentifier', 'ProductName', 'EngineVersion', 'AppVersion',\n       'AvSigVersion', 'IsBeta', 'RtpStateBitfield', 'IsSxsPassiveMode',\n       'DefaultBrowsersIdentifier', 'AVProductStatesIdentifier',\n       'AVProductsInstalled', 'AVProductsEnabled', 'HasTpm',\n       'CountryIdentifier', 'CityIdentifier', 'OrganizationIdentifier',\n       'GeoNameIdentifier', 'LocaleEnglishNameIdentifier', 'Platform',\n       'Processor', 'OsVer', 'OsBuild', 'OsSuite', 'OsPlatformSubRelease',\n       'OsBuildLab', 'SkuEdition', 'IsProtected', 'AutoSampleOptIn', 'PuaMode',\n       'SMode', 'IeVerIdentifier', 'SmartScreen', 'Firewall', 'UacLuaenable',\n       'Census_MDC2FormFactor', 'Census_DeviceFamily',\n       'Census_OEMNameIdentifier', 'Census_OEMModelIdentifier',\n       'Census_ProcessorCoreCount', 'Census_ProcessorManufacturerIdentifier',\n       'Census_ProcessorModelIdentifier', 'Census_ProcessorClass',\n       'Census_PrimaryDiskTotalCapacity', 'Census_PrimaryDiskTypeName',\n       'Census_SystemVolumeTotalCapacity', 'Census_HasOpticalDiskDrive',\n       'Census_TotalPhysicalRAM', 'Census_ChassisTypeName',\n       'Census_InternalPrimaryDiagonalDisplaySizeInInches',\n       'Census_InternalPrimaryDisplayResolutionHorizontal',\n       'Census_InternalPrimaryDisplayResolutionVertical',\n       'Census_PowerPlatformRoleName', 'Census_InternalBatteryType',\n       'Census_InternalBatteryNumberOfCharges', 'Census_OSVersion',\n       'Census_OSArchitecture', 'Census_OSBranch', 'Census_OSBuildNumber',\n       'Census_OSBuildRevision', 'Census_OSEdition', 'Census_OSSkuName',\n       'Census_OSInstallTypeName', 'Census_OSInstallLanguageIdentifier',\n       'Census_OSUILocaleIdentifier', 'Census_OSWUAutoUpdateOptionsName',\n       'Census_IsPortableOperatingSystem', 'Census_GenuineStateName',\n       'Census_ActivationChannel', 'Census_IsFlightingInternal',\n       'Census_IsFlightsDisabled', 'Census_FlightRing',\n       'Census_ThresholdOptIn', 'Census_FirmwareManufacturerIdentifier',\n       'Census_FirmwareVersionIdentifier', 'Census_IsSecureBootEnabled',\n       'Census_IsWIMBootEnabled', 'Census_IsVirtualDevice',\n       'Census_IsTouchEnabled', 'Census_IsPenCapable',\n       'Census_IsAlwaysOnAlwaysConnectedCapable', 'Wdft_IsGamer',\n       'Wdft_RegionIdentifier', 'HasDetections']","99375e14":"#List_train.append(pd.read_csv(Path+\"train.csv\", usecols = [C[-1]] ))","4b0a7b1a":"List_train =[]\nList_test =[]\nfor i in tqdm(C[:-1]):\n    List_train.append(pd.read_csv(Path+\"train.csv\", usecols = [i] ))\n    List_test.append(pd.read_csv(Path+\"test.csv\", usecols = [i] ))\ntarget =    pd.read_csv(Path+\"train.csv\", usecols = [C[-1]] )\ntarget.to_csv('target.csv')\n\nList_unique_train = []\nList_unique_test = []\nList_dtype_train =[]\nList_dtype_test =[]\n\nfor i,j in tqdm(zip(List_train, List_test)):\n    List_unique_train.append(i.nunique()[0])\n    List_unique_test.append(j.nunique()[0])\n    List_dtype_train.append(i.dtypes.values[0])\n    List_dtype_test.append(j.dtypes.values[0])\n\nsummary = pd.DataFrame(index = C[:-1])\n\n#pd.DataFrame(List_unique).T.fillna(0).sum(axis = 1).rename('Unique_Count')\n#pd.DataFrame(List_dtype)\n\nsummary['Unique_count_train'] = List_unique_train\nsummary['Unique_count_test'] = List_unique_test\nsummary['Data_type_train'] = List_dtype_train\n\nsummary['Data_type_test'] = List_dtype_test\n\nsummary.to_csv('summary.csv')\n","945b47b1":"empty_list =[]\nfor i,j in tqdm(zip(List_train[1:], List_test[1:])):\n    temp1 = i.squeeze().value_counts()\n    temp2 = j.squeeze().value_counts()\n    index_all = set(temp1.index).union(set(temp2.index))\n    temp_df = pd.DataFrame(index = index_all)\n    temp_df['train_count'] = temp1\n    temp_df['test_count'] = temp2\n    temp_df['Name'] = i.columns[0]\n    empty_list.append(temp_df)\n    #temp_df.to_csv(str(i.columns[0])+'.csv')\n    \nappended = pd.concat(empty_list, axis =0)\nappended.to_csv(\"Appended.csv\")\nappended.to_excel('Appended.xlsx', engine='xlsxwriter')\n    ","baee328d":"len(appended)","feae39cf":"appended.head()","4fc455e2":"List_train.append(pd.read_csv(Path+\"train.csv\", usecols = [C[-1]] ))","ced472c9":"list_columns = list(map(lambda x:x.columns[0], List_train))\nDict = dict(zip(list_columns, List_train))\n\nList_distribution =[]\n\nfor i in tqdm(C[1:-1]):\n    gbo = pd.concat([Dict[i] ,List_train[-1]], axis = 1).groupby(i)\n    temp = gbo.mean()\n    temp['total_count'] = gbo.count()\n    temp['ones'] = temp['HasDetections']*temp['total_count']\n    temp['zeros'] = temp['total_count'] - temp['ones']\n    temp['var_name'] = i\n    List_distribution.append(temp)\n\ndistributions_consolidated = pd.concat(List_distribution, axis = 0)\n\ndistributions_consolidated.to_excel('all_consolidation.xlsx', engine='xlsxwriter')\n","da581428":"len(distributions_consolidated)","aae4f502":"distributions_consolidated.head()","f2bb5882":"#List_train[-1]","e6ad3622":"#summary = pd.DataFrame(index = C[:-1])\n#print(summary)","444dade5":"1. **Processing Train **"}}