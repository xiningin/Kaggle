{"cell_type":{"a1017da7":"code","5b607456":"code","977fa5b6":"code","ad112d80":"code","3d670c3c":"code","0b0f64f0":"code","4c2c3c3c":"code","fc561fea":"code","918a738c":"markdown","14458e9d":"markdown","f57a86d8":"markdown","52a74516":"markdown","cd91ac48":"markdown"},"source":{"a1017da7":"!pip install jupyter_dash","5b607456":"# pip install jupyter_dash\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom jupyter_dash import JupyterDash \nimport dash\nfrom dash.dependencies import Input, Output, State\nimport dash_core_components as dcc\nimport dash_html_components as html\nfrom dash import no_update\n\n# .data to dataframe\n\ncolumn_names = ['user_id', 'item_id', 'rating', 'timestamp']\ndf = pd.read_csv('\/kaggle\/input\/movie-ratings\/u.data', sep='\\t', names=column_names)\nmovie_titles = pd.read_csv(\"\/kaggle\/input\/movie-titles\/Movie_Id_Titles\")\nmovie_titles.sample(4)\n","977fa5b6":"df = pd.merge(df,movie_titles,on='item_id')\ndf.head(3)","ad112d80":"df['year'] = df.title.str.extract(\"\\((\\d{4})\\)\", expand=True)\ndf.year = pd.to_datetime(df.year, format='%Y')\ndf.year = df.year.dt.year \ndf.title = df.title.str[:-7]","3d670c3c":"banned = ['The']\nf = lambda x: ' '.join([item for item in x.split() if item not in banned])\ndf[\"title\"] = df[\"title\"].apply(f)\n\ndf['title'] = df['title'].replace(',','', regex=True)\ndf['title'].head()","0b0f64f0":"df.groupby('title')['rating'].mean().sort_values(ascending=False).head()\ndf.groupby('title')['rating'].count().sort_values(ascending=False).head()\nratings = pd.DataFrame(df.groupby('title')['rating'].mean())\nratings['num of ratings'] = pd.DataFrame(df.groupby('title')['rating'].count())\nratings = ratings.iloc[1: , :] # Drop First Row\nratings.head(3)","4c2c3c3c":"moviemat = df.pivot_table(index='user_id',columns='title',values='rating')\nmoviemat.sample(3)","fc561fea":"# Dash App:\n\nexternal_stylesheets = ['https:\/\/codepen.io\/chriddyp\/pen\/bWLwgP.css']\n\napp = JupyterDash(__name__, external_stylesheets=external_stylesheets)\n\napp.layout = html.Div([\n   html.H1(children=\"Recommender System\", style={'textAlign': 'center'}),\n   dcc.Markdown('''\n               ###### Step 1: Pick a title of a movie from list that you enjoyed.\n               ###### Step 2: Enter the movie name, and wait for recommendations to appear!\n   ''',style={'textAlign': 'center','fontsize':'bold'}),\n   html.Div([\n            dcc.Dropdown(\n                id='yaxis-column',\n                options=[{'label': i, 'value': i} for i in df['title'] ],\n#                 ='Search Movies'\n            )]),\n   dcc.Input(id='username',type='text'),\n   html.Button(id='submit-button', type='submit', children='Submit'),\n   html.Div(id='output_div'),\n   \n   ],style={'textAlign': 'center','justify':'center','align':'middle','verticalAlign':'middle'})\n\n@app.callback(Output('output_div', 'children'),\n               [Input('submit-button', 'n_clicks')],\n               [State('username', 'value')],\n               )\n\ndef update_output(clicks, input_value):\n    if clicks is not None:\n        if input_value is not None and input_value!='':\n            count = 0\n            for i in df['title']:\n                if i==input_value:\n                    count+=1\n            if(count==0):\n                return('Sorry, no movie recommendations available :(. Please enter another movie name!')\n            else:\n                movie = input_value\n                movie_user_ratings = moviemat[movie]\n                similar_to_movie = moviemat.corrwith(movie_user_ratings)\n                corr_movie = pd.DataFrame(similar_to_movie,columns=['Correlation'])\n                corr_movie.dropna(inplace=True)\n                corr_movie = corr_movie.join(ratings['num of ratings'])\n                a = corr_movie[corr_movie['num of ratings']>100].sort_values('Correlation',ascending=False).head()\n                return ('If you enjoyed '+movie+', you would also enjoy '+a.reset_index()[\"title\"][1]+', '+a.reset_index()[\"title\"][2]+', and '+a.reset_index()[\"title\"][3]+'!')\n            return ('Please enter valid input')\n       \nif __name__ == '__main__':\n        app.run_server(mode='inline',port = 8061) # for external(local_server) provide mode= 'external'\n","918a738c":"#### Creating Dash App","14458e9d":"#### Removing Year\n","f57a86d8":"####  Clean Titles:","52a74516":"#### Movie Matrix","cd91ac48":"#### Rating Calculation"}}