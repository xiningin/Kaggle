{"cell_type":{"fded5572":"code","0edbaa2a":"code","bc8415a3":"code","417b6e83":"code","d60b2234":"code","76c3fc22":"code","18f653f3":"markdown","3a0bd8f2":"markdown"},"source":{"fded5572":"import cv2\nimport numpy as np\nimport os\nimport sys\nimport matplotlib.pyplot as plt","0edbaa2a":"CONFIDENCE = 0.5\nSCORE_THRESHOLD = 0.5\nIOU_THRESHOLD = 0.5\nconfig_path = \"..\/input\/yolo-coco-data\/yolov3.cfg\"\nweights = \"..\/input\/yolo-coco-data\/yolov3.weights\"\nlabels = open(\"..\/input\/yolo-coco-data\/coco.names\").read().strip().split(\"\\n\")\ncolors = np.random.randint(0, 255, size=(len(labels), 3), dtype=\"uint8\")","bc8415a3":"net = cv2.dnn.readNetFromDarknet(config_path, weights)","417b6e83":"def model_output(path_name):\n    image = cv2.imread(path_name)\n    file_name = os.path.basename(path_name)\n    filename,ext = file_name.split(\".\")\n    h,w = image.shape[:2]\n    blob = cv2.dnn.blobFromImage(image, 1\/255.0, (416,416), swapRB = True, crop = False)#This function is used for mean subtarction\n    #preprocessing required before sending to dnn model\n    net.setInput(blob)\n    ln = net.getLayerNames()\n    ln = [ln[i[0] - 1] for i in net.getUnconnectedOutLayers()]\n    layer_outputs = net.forward(ln)\n    boxes, confidences, class_ids = [], [], []\n    for output in layer_outputs:\n        for detection in output:\n            scores = detection[5:]\n            class_id = np.argmax(scores)\n            confidence = scores[class_id]\n            if confidence>CONFIDENCE:\n                box = detection[:4]*np.array([w,h,w,h])\n                (centerX, centerY, width, height) = box.astype(\"int\")\n                x = int(centerX - (width \/ 2))\n                y = int(centerY - (height \/ 2))\n                boxes.append([x,y,int(width), int(height)])\n                confidences.append(float(confidence))\n                class_ids.append(class_id)\n    return boxes, confidences, class_ids\n","d60b2234":"def detection_recognition(path_name):\n    image = cv2.imread(path_name)\n    boxes, confidences, class_ids = model_output(path_name)\n    idxs = cv2.dnn.NMSBoxes(boxes, confidences, SCORE_THRESHOLD, IOU_THRESHOLD)\n    font_scale = 1\n    thickness = 1\n    if len(idxs)>0:\n        for i in idxs.flatten():\n            x,y = boxes[i][0], boxes[i][1]\n            w,h = boxes[i][2], boxes[i][3]\n            color = [int(c) for c in colors[class_ids[i]]]\n            cv2.rectangle(image, (x,y), (x+w, y+h), color = color, thickness= thickness)\n            text = f\"{labels[class_ids[i]]}: {confidences[i]:.2f}\"\n            (text_width, text_height) = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, fontScale=font_scale, thickness=thickness)[0]\n            text_offset_x = x\n            text_offset_y = y - 5\n            box_coords = ((text_offset_x, text_offset_y), (text_offset_x + text_width + 2, text_offset_y - text_height))\n            overlay = image.copy()\n            cv2.rectangle(overlay, box_coords[0], box_coords[1], color=color, thickness=cv2.FILLED)\n            image = cv2.addWeighted(overlay, 0.6, image, 0.4, 0)#add two copies to one and the numbers define blending percent\n            cv2.putText(image, text, (x, y - 5), cv2.FONT_HERSHEY_SIMPLEX,\n            fontScale=font_scale, color=(0, 0, 0), thickness=thickness)\n    %matplotlib inline\n    plt.rcParams['figure.figsize'] = (10.0, 10.0)\n    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n    plt.show()","76c3fc22":"detection_recognition(\"..\/input\/data-for-yolo-v3-kernel\/dog.jpg\")","18f653f3":"Now you can test the model by passing image path to detection_recognition function","3a0bd8f2":"1. First we imported libraries required. The libraries are numpy, open-cv, os and sys.\n\n2. Fixed the constants ( CONFIDENCE, IOU_THRESHOLD AND SCORE_THRESHOLD) and defined the paths of config file of YOLOv3, YOLOv3 weights\n   and labels of COCO Dataset.\n\n3. From MODEL_OUTPUT function got the predicted boxes, confidences and class_ids. \n\n4. Passed to DETECTION_RECOGNITION function to get the detected and recognized objects in the image."}}