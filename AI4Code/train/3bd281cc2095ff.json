{"cell_type":{"6b048853":"code","f7955f17":"code","a9a6fa12":"code","fd013a2c":"code","e0ce8678":"code","f001e056":"code","32ea36cf":"code","f36b0d9e":"code","ddcb7bba":"code","60f1e5ed":"code","af8b5f7e":"code","89a35d1a":"code","c8614c43":"code","07136cf2":"code","10f9628e":"code","f41d9008":"code","a7a0c9fe":"code","b3afe020":"code","46edff7c":"code","a9d3bb4c":"code","99ba4fbb":"code","d2dd4f46":"code","894140c7":"code","3695ebb8":"code","8334e8a4":"code","fcd855f5":"code","f28ca0b8":"code","bd9995af":"code","2c7007ad":"code","b92b8951":"code","520e6e1e":"code","99150bb7":"code","9490563e":"code","8c54e55d":"code","420d01dc":"markdown","af0acf64":"markdown","d9787ae5":"markdown","9011cce3":"markdown","26cf4353":"markdown","55756585":"markdown","1b4e1e40":"markdown","dfc39a33":"markdown","9671caa2":"markdown","4d153b3d":"markdown","98c13ada":"markdown","5976b366":"markdown","5a158187":"markdown"},"source":{"6b048853":"#install libraries\n!pip install regressors -U\nplt.rcParams['figure.figsize'] = [10, 5]","f7955f17":"#01 - Import Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nplt.style.use('ggplot')\nfrom datetime import datetime\nimport csv\nimport datetime as dt\nfrom datetime import date\nfrom collections import Counter\nfrom regressors import stats","a9a6fa12":"#02 - Load Plant 1 Data\nplant_1 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_1_Generation_Data.csv\",\\\n                      quoting=csv.QUOTE_NONE, error_bad_lines=False)\n#Load Weather data of plant 1\nweather_1 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_1_Weather_Sensor_Data.csv', \\\n                      quoting=csv.QUOTE_NONE, error_bad_lines=False)\n\n\n#Change data type for date time    \nplant_1['DATE_TIME'] = plant_1['DATE_TIME'].apply(lambda x: dt.date.strftime(dt.datetime.strptime(x, '%d-%m-%Y %H:%M')\\\n                                                                            , \"%m\/%d\/%Y %H:%M\"))\nweather_1['DATE_TIME'] = weather_1['DATE_TIME'].apply\\\n(lambda x: dt.date.strftime(dt.datetime.strptime(x, '%Y-%m-%d %H:%M:%S'), \"%m\/%d\/%Y %H:%M\"))\n\n\n#Merge Plant and Weather data\nplant_data = plant_1.merge(weather_1[['AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION', 'DATE_TIME']],\\\n                      how = 'left',\n                      left_on=['DATE_TIME'],\\\n                     right_on = ['DATE_TIME'])\nplant_data['DATE_TIME'] = plant_data['DATE_TIME'].apply(lambda x: dt.datetime.strptime(x, '%m\/%d\/%Y %H:%M'))\nplant_data['TIME'] = plant_data['DATE_TIME'].apply(lambda x: str(x.hour)+str(x.minute))","fd013a2c":"#01 - Stats\nplant_data.describe()","e0ce8678":"test_df = plant_data.copy()\n#04 - Compare total yield to DC_power\ntest = test_df[(test_df['SOURCE_KEY']=='1IF53ai7Xc0U56Y')]\nfig, ax = plt.subplots() # Create the figure and axes object\n\n# Plot the first x and y axes:\ntest.plot(x = 'DATE_TIME', y = 'TOTAL_YIELD', ax = ax) \ntest.plot(x = 'DATE_TIME', y = 'DC_POWER', ax = ax, secondary_y = True) ","f001e056":"#03 - Data Cleaning Functions\ndef CompressData(dataframe):\n    dc_ind = False\n    one_ind = False\n    data = []\n    for row in dataframe.itertuples():\n        if int(row.DC_POWER) == 0:\n            if dc_ind is False:\n                plant_id = row.PLANT_ID\n                source_key = row.SOURCE_KEY\n                dc_pow = row.DC_POWER\n                ac_pow = row.AC_POWER\n                tot_yld = row.TOTAL_YIELD\n                start_time = row.DATE_TIME\n                amb_temp = row.AMBIENT_TEMPERATURE\n                mod_temp = row.MODULE_TEMPERATURE\n                irrad = row.IRRADIATION\n                dc_ind = True\n            else:\n                end_time = row.DATE_TIME\n                minutes_diff = (end_time - start_time).total_seconds() \/ 60.0\n                tots = row.TOTAL_YIELD\n                yld_diff = tots - tot_yld\n                dc_pow = (row.DC_POWER + dc_pow)\/2\n                ac_pow = (row.AC_POWER + ac_pow)\/2\n                mod_temp = (row.MODULE_TEMPERATURE +mod_temp)\/2\n                amb_temp = (row.AMBIENT_TEMPERATURE +amb_temp)\/2\n                irrad = (row.IRRADIATION + irrad)\/2\n                one_ind = True\n                \n                pass\n        else:\n            if dc_ind is True:\n                if one_ind is True:\n                    try:\n                        data.append([plant_id, source_key, start_time, end_time, minutes_diff, dc_pow, \\\n                                 ac_pow, tots, yld_diff, amb_temp, mod_temp, irrad])\n                        del end_time, minutes_diff, tots, yld_diff\n                        one_ind = False\n                    except Exception as e:\n                        print(\"one\", e, row)\n                else:\n                    try:\n                        data.append([plant_id, source_key, data[-1][3], start_time, \\\n                                 (start_time - data[-1][3]).total_seconds() \/ 60.0 ,\\\n                                 dc_pow, ac_pow, tot_yld, (tot_yld-data[-1][7]), amb_temp, \\\n                                 mod_temp, irrad])\n                    except Exception as e:\n                        print(\"two\",e, row)\n                    \n                try:\n                    data.append([row.PLANT_ID, row.SOURCE_KEY, data[-1][3], row.DATE_TIME,\\\n                         (row.DATE_TIME - data[-1][3]).total_seconds() \/ 60.0, row.DC_POWER, row.AC_POWER,\\\n                             row.TOTAL_YIELD, row.TOTAL_YIELD - data[-1][7], row.AMBIENT_TEMPERATURE, \\\n                             row.MODULE_TEMPERATURE, row.IRRADIATION])\n                    dc_ind = False\n                except Exception as e:\n                    print(\"three\",e, row)\n            else:\n                try:\n                    start_time = data[-1][3]\n                except Exception as e:\n                    print(\"special\", data, e, row)\n                minutes_diff = (row.DATE_TIME - start_time).total_seconds() \/ 60.0\n                tot_yld = data[-1][7]\n                yld_diff = row.TOTAL_YIELD-tot_yld\n                try:\n                    data.append([row.PLANT_ID, row.SOURCE_KEY, start_time, row.DATE_TIME, minutes_diff, \\\n                             row.DC_POWER, row.AC_POWER, row.TOTAL_YIELD, yld_diff, row.AMBIENT_TEMPERATURE, \\\n                             row.MODULE_TEMPERATURE, row.IRRADIATION])\n                except Exception as e:\n                    print(\"four\",e, row)\n    return data","32ea36cf":"#01 - Call the Cleaning function for each Inverter\nFinal_df = pd.DataFrame(columns=['plant_id', 'source_key', 'start_time', 'end_time',\\\n                                   'minutes', 'dc_pow', 'ac_pow', 'total_yield', 'yield_generated'\\\n                                ,'amb_temp', 'mod_temp', 'irrad'])\nfor i in set(test_df.SOURCE_KEY):\n    dfs = test_df[test_df['SOURCE_KEY']== i]\n    dfs.reset_index(drop=True)\n    temp_df = pd.DataFrame(data=CompressData(dfs), columns= Final_df.columns)\n    Final_df = Final_df.append(temp_df)","f36b0d9e":"#Check time when DC_POWER is zero\nFinal_df['timestamp'] = Final_df['end_time'].apply(lambda x: str(x.hour)+str(x.minute))\na = list(Final_df[Final_df['dc_pow']==0].timestamp)\nletter_counts = Counter(a)\ndf = pd.DataFrame.from_dict(letter_counts, orient='index')\ndf1 = df.head(60)\ndf1.plot(kind='bar')","ddcb7bba":"#Delete records with TIME as 5:45\nno_power_df = Final_df[Final_df['timestamp']=='545']\n#Remove them from the test_df\nFinal_df = pd.concat([Final_df, no_power_df, no_power_df]).drop_duplicates(keep=False)\nFinal_df = Final_df.reset_index(drop = True)","60f1e5ed":"#Add a new dimension as Yield Per Minute\nFinal_df['ypm'] = (Final_df['yield_generated']*1.00)\/Final_df['minutes']\nFinal_df['effic'] = ((Final_df['ac_pow']\/Final_df['dc_pow'])*100.0).fillna(0)\nFinal_df['datestamp'] = Final_df['end_time'].apply(lambda x: dt.datetime.strftime(x, '%Y%m%d'))\nFinal_df[Final_df.isna().any(axis = 1)]","af8b5f7e":"Final_df.irrad.fillna(method='ffill', inplace=True)\nFinal_df.mod_temp.fillna(method='ffill', inplace=True)\nFinal_df.amb_temp.fillna(method='ffill', inplace=True)","89a35d1a":"test = Final_df[(Final_df['source_key']=='zBIq5rxdHJRwDNY')]\nfig, ax = plt.subplots() # Create the figure and axes object\ntest['dtemp'] = test['mod_temp']*10\n\n# Plot the first x and y axes:\ntest.plot(x = 'datestamp', y = 'dc_pow', ax = ax) \ntest.plot(x = 'datestamp', y = 'yield_generated', ax = ax, secondary_y = True) \ntest.plot(x = 'datestamp', y = 'dtemp', ax = ax, secondary_y = True) ","c8614c43":"#OneHotEncoding for inverters\ndummies = pd.get_dummies(Final_df.source_key, drop_first=True)\nSolar_plant_1 = pd.concat([Final_df, dummies], axis = 'columns')\nSolar_plant_1\ndel Solar_plant_1['source_key']\nSolar_plant_1 = Solar_plant_1.reset_index(drop=True)\n\n#Prep data for building model\nyld_gen = Solar_plant_1['ypm']\ndata = Solar_plant_1.copy()\ndel data['ypm']\ndel data['plant_id'], data['start_time'], data['end_time'], data['minutes'], data['total_yield'], data['timestamp'], data['datestamp'], data['yield_generated']\n","07136cf2":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import linear_model\n#Split data\nX_train, X_test, Y_train, Y_test = train_test_split(data, yld_gen, test_size = 0.3)\n\n#Build Model\nmodel = linear_model.LinearRegression()\nmodel.fit(X_train, Y_train)\nY_pred = model.predict(X_test)\nY_pred.shape","10f9628e":"from sklearn.metrics import mean_squared_error, r2_score\nprint(\"Coefficients:  \", model.coef_)\nprint(\"Intercept:  \", model.intercept_)\nprint(\"MSE:  %.2f\" % mean_squared_error(Y_test, Y_pred))\nprint(\"Coefficients of determination:  %.2f\" % r2_score(Y_test, Y_pred))\n\nprint(\"\\n=========== SUMMARY ===========\")\nxlabels = X_test.columns\nstats.summary(model, X_test, Y_test, xlabels)","f41d9008":"fig = sns.regplot(x=Y_pred, y=Y_test, scatter_kws={\"color\": \"black\"}, line_kws={\"color\": \"red\"})\nfig.set(xlabel='Predicted YPM', ylabel='Recorded YPM')\nplt.show()","a7a0c9fe":"#Source Plant 2 data\nplant_2 = pd.read_csv(\"..\/input\/solar-power-generation-data\/Plant_2_Generation_Data.csv\",\\\n                      quoting=csv.QUOTE_NONE, error_bad_lines=False)\n#Load Weather data of plant 2\nweather_2 = pd.read_csv('..\/input\/solar-power-generation-data\/Plant_2_Weather_Sensor_Data.csv', \\\n                      quoting=csv.QUOTE_NONE, error_bad_lines=False)\n\n\n#Change data type for date time    \nplant_2['DATE_TIME'] = plant_2['DATE_TIME'].apply(lambda x: dt.date.strftime(dt.datetime.strptime(x, '%Y-%m-%d %H:%M:%S')\\\n                                                                            , \"%m\/%d\/%Y %H:%M\"))\nweather_2['DATE_TIME'] = weather_2['DATE_TIME'].apply\\\n(lambda x: dt.date.strftime(dt.datetime.strptime(x, '%Y-%m-%d %H:%M:%S'), \"%m\/%d\/%Y %H:%M\"))\n\n\n#Merge Plant and Weather data\nplant_data2 = plant_2.merge(weather_2[['AMBIENT_TEMPERATURE', 'MODULE_TEMPERATURE', 'IRRADIATION', 'DATE_TIME']],\\\n                      how = 'left',\n                      left_on=['DATE_TIME'],\\\n                     right_on = ['DATE_TIME'])\nplant_data2['DATE_TIME'] = plant_data2['DATE_TIME'].apply(lambda x: dt.datetime.strptime(x, '%m\/%d\/%Y %H:%M'))\nplant_data2['TIME'] = plant_data2['DATE_TIME'].apply(lambda x: str(x.hour)+str(x.minute))","b3afe020":"plant_data2.describe()","46edff7c":"test_df2 = plant_data2.copy()\n\ntest = test_df2[(test_df2['SOURCE_KEY']=='9kRcWv60rDACzjR')]\nfig, ax = plt.subplots() # Create the figure and axes object\n\n# Plot the first x and y axes:\ntest.plot(x = 'DATE_TIME', y = 'TOTAL_YIELD', ax = ax) \ntest.plot(x = 'DATE_TIME', y = 'DC_POWER', ax = ax, secondary_y = True) ","a9d3bb4c":"test = test_df2[(test_df2['SOURCE_KEY']=='9kRcWv60rDACzjR')&(test_df2['DC_POWER']==0)]\nfig, ax = plt.subplots() # Create the figure and axes object\n\n# Plot the first x and y axes:\ntest.plot(x = 'DATE_TIME', y = 'IRRADIATION', ax = ax) \ntest.plot(x = 'DATE_TIME', y = 'MODULE_TEMPERATURE', ax = ax)\ntest.plot(x = 'DATE_TIME', y = 'DC_POWER', ax = ax, secondary_y = True) ","99ba4fbb":"data = []\ndumps = []\nd2 = []\nfor j in set(test_df2.SOURCE_KEY):\n    dfs = test_df2[test_df2['SOURCE_KEY']== j]\n    dfs.reset_index(drop=True)\n    ind = 0\n    \n    for i in dfs.itertuples():\n        if ind ==0:\n            data.append([i.DATE_TIME, i.PLANT_ID, i.SOURCE_KEY, i.DC_POWER, i.AC_POWER, i.DAILY_YIELD,\\\n                     i.TOTAL_YIELD, i.AMBIENT_TEMPERATURE, i.MODULE_TEMPERATURE, i.IRRADIATION, i.TIME])\n            ind +=1\n        else:\n            if i.TOTAL_YIELD>=data[-1][6]:\n                data.append([i.DATE_TIME, i.PLANT_ID, i.SOURCE_KEY, i.DC_POWER, i.AC_POWER, i.DAILY_YIELD,\\\n                     i.TOTAL_YIELD, i.AMBIENT_TEMPERATURE, i.MODULE_TEMPERATURE, i.IRRADIATION, i.TIME])\n            elif dumps:\n                if i.TOTAL_YIELD <= dumps[-1][6]:\n                    d2.append([i.DATE_TIME, i.PLANT_ID, i.SOURCE_KEY, i.DC_POWER, i.AC_POWER, i.DAILY_YIELD,\\\n                     i.TOTAL_YIELD, i.AMBIENT_TEMPERATURE, i.MODULE_TEMPERATURE, i.IRRADIATION, i.TIME])\n            else:\n                dumps.append([i.DATE_TIME, i.PLANT_ID, i.SOURCE_KEY, i.DC_POWER, i.AC_POWER, i.DAILY_YIELD,\\\n                     i.TOTAL_YIELD, i.AMBIENT_TEMPERATURE, i.MODULE_TEMPERATURE, i.IRRADIATION, i.TIME])\ndump_df = pd.DataFrame(data=dumps, columns= test_df2.columns)\ndata_df = pd.DataFrame(data=data, columns= test_df2.columns)\nd2_df = pd.DataFrame(data=d2, columns= test_df2.columns)","d2dd4f46":"test = data_df[(data_df['SOURCE_KEY']=='9kRcWv60rDACzjR')]\nfig, ax = plt.subplots() # Create the figure and axes object\ntest.plot(x = 'DC_POWER', y = 'MODULE_TEMPERATURE', ax = ax, secondary_y = True) ","894140c7":"no_dc2 = data_df[(data_df['MODULE_TEMPERATURE']>38) &(data_df['DC_POWER']==0)]\ndata_df = pd.concat([data_df, no_dc2, no_dc2]).drop_duplicates(keep = False)\ndata_df = data_df.reset_index(drop=True)","3695ebb8":"test = data_df[(data_df['SOURCE_KEY']=='9kRcWv60rDACzjR')]\nfig, ax = plt.subplots() # Create the figure and axes object\n\n# Plot the first x and y axes:\ntest.plot(x = 'DC_POWER', y = 'MODULE_TEMPERATURE', ax = ax, secondary_y = True) ","8334e8a4":"test = data_df[(data_df['SOURCE_KEY']=='9kRcWv60rDACzjR')]\nfig, ax = plt.subplots() # Create the figure and axes object\n# Plot the first x and y axes:\ntest.plot(x = 'DATE_TIME', y = 'DC_POWER', ax = ax) \ntest.plot(x = 'DATE_TIME', y = 'TOTAL_YIELD', ax = ax, secondary_y = True) ","fcd855f5":"#04 - Call the Cleaning function for each Inverter\nFinal_df2 = pd.DataFrame(columns=['plant_id', 'source_key', 'start_time', 'end_time',\\\n                                   'minutes', 'dc_pow', 'ac_pow', 'total_yield', 'yield_generated'\\\n                                ,'amb_temp', 'mod_temp', 'irrad'])\nfor i in set(data_df.SOURCE_KEY):\n    dfs = data_df[data_df['SOURCE_KEY']== i]\n    dfs.reset_index(drop=True)\n    temp_df = pd.DataFrame(data=CompressData(dfs), columns= Final_df2.columns)\n    Final_df2 = Final_df2.append(temp_df)","f28ca0b8":"#Add a new dimension as Yield Per Minute\nFinal_df2['ypm'] = (Final_df2['yield_generated']*1.00)\/Final_df2['minutes']\nFinal_df2['effic'] = ((Final_df2['ac_pow']\/Final_df2['dc_pow'])*100.0).fillna(0)\nFinal_df2['datestamp'] = Final_df2['end_time'].apply(lambda x: dt.datetime.strftime(x, '%Y%m%d'))\nFinal_df2[Final_df2.isna().any(axis = 1)]","bd9995af":"test = Final_df2[(Final_df2['source_key']=='9kRcWv60rDACzjR')]\nfig, ax = plt.subplots() # Create the figure and axes object\n\n# Plot the first x and y axes:\ntest.plot(x = 'dc_pow', y = 'mod_temp', ax = ax, secondary_y = True) ","2c7007ad":"#Verify if there is any records with 0 dc_power\nFinal_df2['time'] = Final_df2['end_time'].apply(lambda x: str(x.hour)+str(x.minute))\n\na = list(Final_df2[Final_df2['dc_pow']==0].time)\nletter_counts = Counter(a)\ndf = pd.DataFrame.from_dict(letter_counts, orient='index')\ndf1 = df.head(60)\ndf.plot(kind='bar')","b92b8951":"#Delete records with TIME as 4:45\nno_power_df2 = Final_df2[Final_df2['time']=='545']\n#Remove them from the test_df\nFinal_df2 = pd.concat([Final_df2, no_power_df2, no_power_df2]).drop_duplicates(keep=False)\nFinal_df2 = Final_df2.reset_index(drop = True)","520e6e1e":"#OneHotEncoding for inverters\ndummies2 = pd.get_dummies(Final_df2.source_key, drop_first=True)\nSolar_plant_2 = pd.concat([Final_df2, dummies2], axis = 'columns')\nSolar_plant_2\ndel Solar_plant_2['source_key']\nSolar_plant_2 = Solar_plant_2.reset_index(drop=True)\n\n#Prep data for building model\nyld_gen2 = Solar_plant_2['ypm']\ndata2 = Solar_plant_2.copy()\ndel data2['ypm']\ndel data2['plant_id'], data2['start_time'], data2['end_time'], data2['minutes'], data2['total_yield'], data2['time'], data2['datestamp'], data2['yield_generated']\n","99150bb7":"#Split data\nX2_train, X2_test, Y2_train, Y2_test = train_test_split(data2, yld_gen2, test_size = 0.3)\n\n#Build Model\nmodel2 = linear_model.LinearRegression()\nmodel2.fit(X2_train, Y2_train)\nY2_pred = model2.predict(X2_test)\nY2_pred.shape","9490563e":"from sklearn.metrics import mean_squared_error, r2_score\nprint(\"Coefficients:  \", model2.coef_)\nprint(\"Intercept:  \", model2.intercept_)\nprint(\"MSE:  %.2f\" % mean_squared_error(Y2_test, Y2_pred))\nprint(\"Coefficients of determination:  %.2f\" % r2_score(Y2_test, Y2_pred))\n\n# to print summary table:\nprint(\"\\n=========== SUMMARY ===========\")\nxlabels = X2_test.columns\nstats.summary(model2, X2_test, Y2_test, xlabels)","8c54e55d":"fig = sns.regplot(x=Y2_pred, y=Y2_test, scatter_kws={\"color\": \"black\"}, line_kws={\"color\": \"red\"})\nfig.set(xlabel='Predicted YPM', ylabel='Recorded YPM')\nplt.show()","420d01dc":"#### Load Plant 1 data\n Load the plant data and weather data sourced from Solar Plant 01 in a single dataframe","af0acf64":"The TOTAL_YIELD is defined as the total yield for the inverter till that point in time.<br> In the above graph, we can see gradual increase of TOTAL_YIELD over time.<br>\nThe Oscillations of DC_POWER is due to morning to evening change, causing power generated to change<br><br>\nAs we can still see records having DC POWER as zero.<br>\nLets clean the data to get yield generated per minute with a helper function.","d9787ae5":"Now the data looks god. Lets implemented the helper function on plant 2 data","9011cce3":"This looks like TOTAL YIELD is not gradually increasing over time period. There are records with a decrease in total yield","26cf4353":"The irradiation is zero or low in most of the data points where dc_power is zero. But there are data points where the irradiation levels are high but no power was generated. This could be inverter issues or error caused while recording data\n<br>\nWe still see differences in data. As per the definition of TOTAL_YIELD. we are assuming the TOTAL_YIELD is gradually increasing or same over time. let us separate the records where there is a drop in TOTAL_YIELD for each inverter","55756585":"By going through the stats of each variable. we can identify the following:\n1. 25% of all the records have not generated any DC_POWER.<br>\n2. 25% of all the records have no irradiation. This shows there is no power generated in the night. ","1b4e1e40":"we see similar ups and downs for dc_power to yield_generated to module temp with minor outliers","dfc39a33":"Lets calculate yield generated per minute. this can be a measure to predict.<br> Building a model to predict yield per minute can be then used to predict the power generated.","9671caa2":"We can see some records having high module temp but have not produced and power. <br>As we can see a correlation between Module Temperature and DC_Power. We can remove the records which have module temp > 37 and have not produced any power","4d153b3d":"By going through the stats of each variable. we can identify the following:\n1. 50% of all the records have not generated any DC_POWER.<br>\n2. 25% of all the records have no irradiation. This shows there is no power generated in the night. ","98c13ada":"## Solar Generation Plant 2 Analysis[](http:\/\/)","5976b366":"We have built a model on plant data 1 to predict the yield per minute. This can be used to predict the power for the provided time the inverter is functional.","5a158187":"There are nulls in the weather data. As the temperature taken 15 minutes is available, we can fill the nulls with preceeding values."}}