{"cell_type":{"495b5ed2":"code","48a162b0":"code","16340e7c":"code","053cef53":"code","382593a7":"code","6690e785":"code","28eab27a":"code","6cab7b82":"code","d91927d1":"code","c915ab5f":"code","0b7fc09d":"code","0bd21c4b":"code","bdb629ed":"code","a5e73dd6":"code","80a3f1c9":"code","cd394d11":"code","814022fa":"code","be3b1025":"code","877a42e4":"code","bf447fc4":"code","64acf868":"code","afbb3f90":"code","82cac28e":"code","dc950c11":"markdown","2c161202":"markdown"},"source":{"495b5ed2":"import cv2\nimport pandas as pd\nimport numpy as np\nimport os\nimport json\nfrom tqdm import tqdm, tqdm_notebook\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Activation\nfrom keras.layers import Dropout\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.utils import np_utils\nfrom keras.optimizers import SGD, RMSprop, Adam\nimport matplotlib.pyplot as plt","48a162b0":"train_df = pd.read_csv('..\/input\/train\/train.csv')\nimg_size = 128","16340e7c":"def resize_to_square(im):\n    old_size = im.shape[:2]\n    ratio = float(img_size)\/max(old_size)\n    new_size = tuple([int(x*ratio) for x in old_size])    \n    im = cv2.resize(im, (new_size[1], new_size[0]))\n    delta_w = img_size - new_size[1]\n    delta_h = img_size - new_size[0]\n    top, bottom = delta_h\/\/2, delta_h-(delta_h\/\/2)\n    left, right = delta_w\/\/2, delta_w-(delta_w\/\/2)\n    color = [0, 0, 0]\n    new_im = cv2.copyMakeBorder(im, top, bottom, left, right, cv2.BORDER_CONSTANT,value=color)\n    return new_im","053cef53":"def load_image(path, pet_id):\n    image = cv2.imread(f'{path}{pet_id}-1.jpg')\n    new_image = resize_to_square(image)\n    return new_image","382593a7":"im = load_image(\"..\/input\/train_images\/\", \"86e1089a3\")\nplt.imshow(im)","6690e785":"pet_ids = train_df['PetID'].values","28eab27a":"%%time\nX = []\nY = []\nfor pet_id in tqdm_notebook(pet_ids):\n    try:\n        im = load_image(\"..\/input\/train_images\/\", pet_id)\n        X.append(im)        \n        ads = train_df[train_df['PetID'] == pet_id]['AdoptionSpeed'].values[0]\n        Y.append(ads)\n    except:\n        pass  \nX = np.asarray(X)","6cab7b82":"from sklearn.model_selection import train_test_split\nX_tr, X_tst, y_tr, y_tst = train_test_split(X, Y, test_size=0.33, random_state=42)","d91927d1":"X_tr = X_tr.astype('float32')\nX_tst = X_tst.astype('float32')\nX_tr \/= 255\nX_tst \/= 255","c915ab5f":"batch_size = 32\nnb_classes = 5\nnb_epoch = 50","0b7fc09d":"Y_tr = np_utils.to_categorical(y_tr, nb_classes)\nY_tst = np_utils.to_categorical(y_tst, nb_classes)","0bd21c4b":"# Model\n\nmodel = Sequential()\nmodel.add(Conv2D(img_size, (3, 3), padding='same',\n                        input_shape=(img_size, img_size, 3), activation='relu'))\nmodel.add(Conv2D(img_size, (3, 3), activation='relu', padding='same'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(img_size*2, (3, 3), padding='same', activation='relu'))\nmodel.add(Conv2D(img_size*2, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(nb_classes, activation='softmax'))\n\n# opt = RMSprop(lr=0.001, rho=0.9, epsilon=None, decay=0.0)\nopt = Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)\n# opt = SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True)\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=opt,\n              metrics=['accuracy'])","bdb629ed":"%%time\n# Train model\nhistory = model.fit(X_tr, Y_tr,\n              batch_size=batch_size,\n              epochs=nb_epoch,\n              validation_split=0.1,\n              shuffle=True,\n              verbose=2)","a5e73dd6":"# Evaluation\nscores = model.evaluate(X_tst, Y_tst, verbose=0)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100))","80a3f1c9":"with open('history.json', 'w') as f:\n    json.dump(history.history, f)\n\nhistory_df = pd.DataFrame(history.history)\nhistory_df[['loss', 'val_loss']].plot()\nhistory_df[['acc', 'val_acc']].plot()","cd394d11":"test_df = pd.read_csv('..\/input\/test\/test.csv')\npet_ids_tst = test_df['PetID'].values\nsam_sub_df = pd.read_csv('..\/input\/test\/sample_submission.csv')\nprint(sam_sub_df.shape)\nsam_sub_df.head()","814022fa":"sub_dict = {'PetID': [], 'filename': []}\n\nfor name in os.listdir('..\/input\/test_images'):\n    pet_id = name.split('-')[0]\n    sub_dict['PetID'].append(pet_id)\n    sub_dict['filename'].append(name)\n    \nsub_df = pd.DataFrame(sub_dict)\nsub_df.head()","be3b1025":"%%time\ntest_img = [] # resized images (test)\npet_id_test_img = [] # ids of resized images (test)\n\nfor pet_id in tqdm_notebook(pet_ids_tst):\n    try:\n        im = load_image(\"..\/input\/test_images\/\", pet_id)\n        test_img.append(im)  \n        \n        pet_id_test_img.append(pet_id)\n    except:\n        pass \ntest_img = np.asarray(test_img)\ntest_img = test_img.astype('float32')\ntest_img \/= 255","877a42e4":"%%time\n# Prediction\ntest_predictions = model.predict(test_img)","bf447fc4":"sub_df = pd.DataFrame(test_predictions)\nsub_df['PetID'] = pd.Series(pet_id_test_img, index=sub_df.index)\ncols = sub_df.columns.tolist()\ncols = cols[-1:] + cols[:-1]\nsub_df=sub_df[cols]\nprint(sub_df.shape)\nsub_df.head()","64acf868":"sub_df['AdoptionSpeed'] = sub_df.iloc[:,1:6].values.argmax(axis=1)\nsub_df.drop(columns=[0,1,2,3,4], inplace=True)\nprint(sub_df.shape)\nsub_df.head()","afbb3f90":"res_df = sam_sub_df.join(sub_df.set_index('PetID'), on='PetID', rsuffix='_pred')\nres_df.drop(columns=['AdoptionSpeed'],inplace=True)\nres_df = res_df.rename(columns={'AdoptionSpeed_pred': 'AdoptionSpeed'})\nres_df.fillna(0, inplace=True)\nres_df['AdoptionSpeed'] = res_df['AdoptionSpeed'].astype(int)\nprint(res_df.shape)\nres_df.head()","82cac28e":"res_df.to_csv('submission.csv',index=False)","dc950c11":"### Prediction and Submission","2c161202":"\nCreating simple model and train it only on images.\n\nSome parts of code was taking from those kernels:\n\n1.  ..\/xhlulu\/keras-cnn-starter-petfinder\n1.  ..\/christofhenkel\/extract-image-features-from-pretrained-nn\n"}}