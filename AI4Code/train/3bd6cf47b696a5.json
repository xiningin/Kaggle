{"cell_type":{"3163a0e4":"code","0d73c35b":"code","8a281341":"code","c0bc4bfd":"code","b7a4814a":"code","9e132eca":"code","6d4f6968":"code","9f82cd48":"code","99a4ee63":"code","3dba8fde":"code","1affa8c2":"code","01b52175":"code","2501ffce":"code","028c3009":"code","5d323fa5":"code","f6bc4eea":"code","8b72c660":"code","8b4bfe07":"code","4d3f9d52":"code","e8485170":"code","c19e428e":"code","13dcfcd6":"code","a7892a60":"code","df080931":"code","fa6dfaa6":"code","2aa49808":"code","c49b7aa7":"code","dc45440c":"code","e6c167e7":"code","8fce97b8":"code","70d5dd0b":"code","92dfe805":"code","99c894cf":"code","a88dfae8":"code","9df2a861":"code","358d96c3":"code","4bdc9680":"code","7743896b":"code","5c79a5bc":"code","2241e610":"code","fe2106f2":"code","4a826a0f":"code","a7876cf9":"code","cf89fffa":"code","8baa4b44":"code","8312012a":"code","1ae2c4ef":"code","b5194647":"code","cbd8b4eb":"code","21a06f08":"code","44d65fe6":"code","8df179a3":"code","851466d4":"code","74e24c49":"code","8fb9677a":"code","d5bf70ff":"code","3920ba1e":"code","a69a304f":"code","ae5cccbf":"code","0c17ba9b":"code","adbd30c6":"code","9fac2021":"markdown","19e1de26":"markdown","09c2016c":"markdown","525b0a95":"markdown","3d5e3bb2":"markdown","c4dc3a6c":"markdown","78676b53":"markdown"},"source":{"3163a0e4":"%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport os\nfrom sklearn import linear_model\nimport math\nfrom sklearn.ensemble import GradientBoostingClassifier,GradientBoostingRegressor\nfrom sklearn.preprocessing import  LabelEncoder ,MinMaxScaler\nfrom sklearn.ensemble import RandomForestRegressor,RandomForestClassifier\n\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score","0d73c35b":"\"\"\"\"\nPATH1 = os.path.join(os.getcwd(), os.path.join('data', 'train.csv'))\nPATH2= os.path.join(os.getcwd(), os.path.join('data', 'test.csv'))\nPATH3=os.path.join(os.getcwd(), os.path.join('data', 'gender_submission.csv'))\ntrain = pd.read_csv(PATH1, delimiter=',')\ntest_df = pd.read_csv(PATH2, delimiter=',')\ngender_submission = pd.read_csv(PATH3, delimiter=',')\ntrain.head()\n\"\"\"\ntest_df = pd.read_csv(\"..\/input\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/train.csv\")","8a281341":"train.head()","c0bc4bfd":"#train.plot(kind='scatter', x='Fare', y='Survived')\n","b7a4814a":"\n\n#test_dfWithAge = test_df[pd.isnull(test_df['Age']) == False]\n#test_dfWithoutAge = test_df[pd.isnull(test_df['Age'])]","9e132eca":"all_data = [train, test_df]","6d4f6968":"for dataset in all_data:\n    dataset['Title'] = dataset['Name'].str.extract(' ([A-Za-z]+)\\.', expand=False)\ntrain['Title'].value_counts()","9f82cd48":"\ntitle_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in all_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","99a4ee63":"train.head(5)\n","3dba8fde":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    \n    df.plot(kind='bar',stacked=True, figsize=(10,5))","1affa8c2":"bar_chart('Sex')\nbar_chart('Pclass')\nbar_chart('Title')\n","01b52175":"X_train = train.drop(\"Survived\", axis=1)\nY_train = train[\"Survived\"]\nall_data = [X_train, test_df]","2501ffce":"for data in all_data:\n    data['family_size'] = data['SibSp'] + data['Parch'] +1","028c3009":"all_data_train=X_train.drop([\"Cabin\",\"SibSp\",\"Parch\",\"Name\",\"PassengerId\",\"Ticket\"], axis=1)\nall_data_test=test_df.drop([\"Cabin\",\"SibSp\",\"Parch\",\"Name\",\"Ticket\",\"PassengerId\"], axis=1)","5d323fa5":"all_data_train.shape,all_data_test.shape","f6bc4eea":"all_data_train[\"Fare\"] = all_data_train[\"Fare\"].fillna(all_data_train[\"Fare\"].mean())\nall_data_test[\"Fare\"] = all_data_test[\"Fare\"].fillna(all_data_test[\"Fare\"].mean())\n#all_data_train[\"Age\"] = all_data_train[\"Age\"].fillna(all_data_train[\"Age\"].median())\n#all_data_test[\"Age\"] = all_data_test[\"Age\"].fillna(all_data_test[\"Age\"].median())\nmod = all_data_train.Embarked.value_counts().argmax()\nall_data_train.Embarked.fillna(mod, inplace=True)","8b72c660":"\nLE2 = LabelEncoder()\nall_data_train.Sex = LE2.fit_transform(all_data_train.Sex)\nall_data_test.Sex = LE2.fit_transform(all_data_test.Sex)","8b4bfe07":"dumies= pd.get_dummies(all_data_train.Embarked)\ndumies1=pd.get_dummies(all_data_test.Embarked)","4d3f9d52":"all_data_train=pd.concat([all_data_train,dumies],axis='columns')\nall_data_test=pd.concat([all_data_test,dumies1],axis='columns')","e8485170":"all_data_train=all_data_train.drop(['Embarked'],axis=1)\nall_data_test=all_data_test.drop(['Embarked'],axis=1)","c19e428e":"all_data_test.head(2)","13dcfcd6":"trainWithAge = all_data_train[pd.isnull(all_data_train['Age']) == False]\ntrainWithoutAge = all_data_train[pd.isnull(all_data_train['Age'])]\ntestWithAge = all_data_test[pd.isnull(all_data_test['Age']) == False]\ntestWithoutAge = all_data_test[pd.isnull(all_data_test['Age'])]","a7892a60":"trainAgeTarget=trainWithoutAge.drop([\"Age\"], axis=1)\ntestAgeTarget=testWithoutAge.drop([\"Age\"], axis=1)","df080931":"xtrainWithAge = trainWithAge.drop([\"Age\"], axis=1)\nytrainWithAge=trainWithAge[\"Age\"]\nxtestWithAge = testWithAge.drop([\"Age\"], axis=1)\nytestWithAge=testWithAge[\"Age\"]","fa6dfaa6":"xtrainWithAge.shape,ytrainWithAge.shape","2aa49808":"xtestWithAge.shape,ytestWithAge.shape","c49b7aa7":"rfModel_age = RandomForestRegressor()\nrfModel_age1 = RandomForestRegressor()\nrfModel_age.fit(xtrainWithAge,ytrainWithAge)\nrfModel_age1.fit(xtestWithAge,ytestWithAge)\n","dc45440c":"generatedAgeValues = rfModel_age.predict(trainAgeTarget)\n","e6c167e7":"generatedAgeValues1 = rfModel_age1.predict(testAgeTarget)","8fce97b8":"generatedAgeValues1.size","70d5dd0b":"generatedAgeValues.size","92dfe805":"all_data_train['Age']=np.array(all_data_train['Age'])","99c894cf":"all_data_test['Age'].isnull().sum()","a88dfae8":"for i in  range(all_data_train['Age'].isnull().sum()):\n    all_data_train['Age']=all_data_train['Age'].replace(np.NaN, generatedAgeValues[i])","9df2a861":"for i in  range(all_data_test['Age'].isnull().sum()):\n    all_data_test['Age']=all_data_test['Age'].replace(np.NaN, generatedAgeValues1[i])","358d96c3":"all_data_train=pd.DataFrame(all_data_train)","4bdc9680":"all_data_test=pd.DataFrame(all_data_test)","7743896b":"all_data_train.isnull().sum()","5c79a5bc":"#all_data_test=all_data_test.dropna()\n#all_data_test[\"Age\"] = all_data_test[\"Age\"].fillna(all_data_test[\"Age\"].median())","2241e610":"all_data_test.isnull().sum()","fe2106f2":"sc_X = MinMaxScaler()\nall_data_train_normalized = sc_X.fit_transform(all_data_train)\nall_data_test_normalized = sc_X.transform(all_data_test)","4a826a0f":"all_data_train_normalized=pd.DataFrame(all_data_train_normalized)\nall_data_test_normalized=pd.DataFrame(all_data_test_normalized)\n","a7876cf9":"\"\"\"\"\np_test = {'learning_rate':[0.15,0.1,0.05,0.01,0.005,0.001], 'n_estimators':[100,250,500,750,1000,1250,1500,1750]}\n\ntuning = GridSearchCV(estimator =GradientBoostingClassifier(max_depth=4, min_samples_split=2, min_samples_leaf=1, subsample=1,max_features='sqrt', random_state=10), \n            param_grid = p_test, scoring='accuracy',n_jobs=4,iid=False, cv=5)\ntuning.fit(all_data_train_normalized,Y_train)\n\"\"\"\"\n","cf89fffa":"# tuning.best_params_, tuning.best_score_","8baa4b44":"#GB=GradientBoostingClassifier(max_depth=4, min_samples_split=2, min_samples_leaf=1, subsample=1,max_features='sqrt', random_state=10, \n         # learning_rate= 0.01, n_estimators= 1750)","8312012a":"#GB.fit(all_data_train_normalized,Y_train)","1ae2c4ef":"\"\"\"\npred = GB.predict(all_data_test_normalized)\npred =pd.DataFrame(pred,columns=['Survived'])\n\nsub0 = pd.concat([test_df['PassengerId'],pred],axis=1)\nsub0.to_csv('sub0.csv',index=False)\"\"\"","b5194647":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\n# machine learning\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingClassifier, ExtraTreesClassifier, RandomForestClassifier","cbd8b4eb":"\"\"\"\nlogi_clf = LogisticRegression(solver='lbfgs', max_iter=500)\nlogi_parm = {\"C\": [0.1, 0.5, 1, 5, 10, 50],\n            'random_state': [0,1,2,3,4,5]}\n\nsvm_clf = SVC(probability=True)\nsvm_parm = {'kernel': ['rbf', 'poly'], \n            'C': [1, 5, 50, 100, 500, 1000,1500,2000], \n            'degree': [3, 5, 7], \n       'gamma':[0.01,0.04,.1,0.2,.3,.4,.6],\n           'random_state': [0,1,2,3,4,5]}\n\ndt_clf = DecisionTreeClassifier()\ndt_parm = {'criterion':['gini', 'entropy'],\n          'random_state': [0,1,2,3,4,5]}\n\nknn_clf = KNeighborsClassifier()\nknn_parm = {'n_neighbors':[5, 10, 15, 20], \n            'weights':['uniform', 'distance'], \n            'p': [1,2]}\n\ngnb_clf = GaussianNB()\ngnb_parm = {'priors':['None']}\n\nclfs = [logi_clf, svm_clf, dt_clf, knn_clf]\nparams = [logi_parm, svm_parm, dt_parm, knn_parm] \nclf_names = ['logistic', 'SVM', 'DT', 'KNN', 'GNB']\n\"\"\"","21a06f08":"\"\"\"\nclfs_opt = []\nclfs_best_scores = []\nclfs_best_param = []\nfor clf_, param in zip(clfs, params):\n    clf = RandomizedSearchCV(clf_, param, cv=5)\n    clf.fit(all_data_train_normalized,Y_train)\n    clfs_opt.append(clf.best_estimator_)\n    clfs_best_scores.append(clf.best_score_)\n    clfs_best_param.append(clf.best_params_)\n\"\"\"","44d65fe6":" max(clfs_best_scores)","8df179a3":"\"\"\"\narg = np.argmax(clfs_best_scores)\nclfs_best_param[arg]\n\"\"\"","851466d4":"\"\"\"\nall_Clfs_dict = {}\nall_Clfs_list = []\nfor name, clf in zip(clf_names, clfs_opt):\n    all_Clfs_dict[name] = clf\n    all_Clfs_list.append((name, clf))\n\"\"\"","74e24c49":"svm_clf1 = SVC(probability=True,random_state= 2, kernel='poly', gamma= 0.2, degree= 3, C= 5)","8fb9677a":"svm_clf1.fit(all_data_train_normalized,Y_train)\n","d5bf70ff":"pred = svm_clf1.predict(all_data_test_normalized)\npred =pd.DataFrame(pred,columns=['Survived'])\n\nsub2 = pd.concat([test_df['PassengerId'],pred],axis=1)\nsub2.to_csv('sub2.csv',index=False)","3920ba1e":"#import sklearn.ensemble as ens ","a69a304f":"\"\"\"\nhard_voting_clf = ens.VotingClassifier(all_Clfs_list, voting='hard')\nhard_voting_clf.fit(all_data_train_normalized,Y_train)\ncross_val_score(hard_voting_clf,all_data_train_normalized,Y_train, cv=5).mean()\n\"\"\"","ae5cccbf":"\"\"\"\nsoft_voting_clf = ens.VotingClassifier(all_Clfs_list, voting='soft', weights=clfs_best_scores)\nsoft_voting_clf.fit(all_data_train_normalized,Y_train)\ncross_val_score(soft_voting_clf,all_data_train_normalized,Y_train, cv=5).mean()\n\"\"\"","0c17ba9b":"\"\"\"\nclf = ens.BaggingClassifier(base_estimator=clfs_opt[arg])\nparam = {'n_estimators':[10,50,100,500,100],\n        'max_samples':[1.0, 0.9, 0.8],\n        'bootstrap_features':[False, True],\n        'random_state': [0,1,2,3,4,5]}\nbest_est_bagging = RandomizedSearchCV(clf, param, cv=5)\nbest_est_bagging.fit(all_data_train_normalized,Y_train)\"\"\"","adbd30c6":"\"\"\"\nclf = ens.RandomForestClassifier()\nparam = {'n_estimators':[10,50,100,500,100],\n         'criterion': ['gini', 'entropy'],}\nRF = RandomizedSearchCV(clf, param, cv=5)\nRF.fit(X_train_sc, y_train_df)\nRF.best_score_\n\"\"\"","9fac2021":"# Random Forest","19e1de26":"# ## Voting Ensembling","09c2016c":"# Hard Voting\n","525b0a95":"# Bagging Ensembling","3d5e3bb2":"# Ensempling Methods","c4dc3a6c":"# Soft voting","78676b53":"# Dealing with missing values  "}}