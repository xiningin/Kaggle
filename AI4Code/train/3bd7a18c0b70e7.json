{"cell_type":{"add6ada2":"code","784a6d5b":"code","9b5f5adb":"code","3c95cd9b":"code","d02808f8":"code","80ec0150":"code","9e363eef":"code","49d65573":"code","63f67d13":"code","2d8e7247":"code","48ca21b1":"code","2e075d51":"code","e7cac6c4":"code","19074563":"code","bfe08ed5":"code","90c04004":"code","80698164":"code","a255f044":"code","165975c0":"code","1c3a39cc":"code","cb404bb8":"code","a17d21bc":"code","2c3549e2":"code","be5f371a":"code","d3612373":"code","27ba6454":"code","21331fc1":"code","ee3e7aac":"code","ccdffa63":"code","358c90fe":"code","35e64a80":"code","a21fac72":"code","4f25413d":"code","b4dbb9b5":"code","79e44ad2":"code","06455cba":"code","e8230826":"code","f5007738":"code","c29b9232":"code","edb4cc66":"code","5cd1407f":"code","3b53d446":"code","feeea8ae":"code","6e980788":"code","f2ee843c":"code","713e7c89":"code","94fc6583":"code","b5f0b2b9":"code","e878cc36":"code","bb366568":"code","5780d0a9":"code","2ffb897f":"code","87122b1e":"code","7d2944e6":"code","347837c1":"code","0df3e6b9":"code","ad1df3d4":"code","bc40f593":"code","8b621307":"code","ab653ec7":"code","7d24d033":"code","05a73950":"code","66c69d5d":"code","28b3c541":"code","ed71b0df":"code","b820bd43":"code","22a550f7":"code","c9694849":"code","83ea70b3":"code","15bfab27":"code","338587e0":"code","f057becd":"code","00873430":"code","762938ee":"code","59e83d70":"code","b9698460":"code","80fe0fce":"code","4065b03a":"code","f8e50e72":"code","33676297":"code","ccc7bfe7":"code","8a8e3ec4":"code","1d4420bb":"code","ebff80dc":"code","24eaef17":"code","a8790052":"code","ec2f7a7f":"code","c162363d":"code","7f794561":"code","eb10502e":"code","8fb2285d":"code","86fa9198":"code","53869dd7":"code","af1b64d9":"code","03416e30":"markdown","150e290c":"markdown","6e8caed3":"markdown","643db78a":"markdown","0510a8d7":"markdown","8fb5244a":"markdown","3cd795a8":"markdown","82e377db":"markdown","114e7a87":"markdown","ef3483c0":"markdown","ea612544":"markdown","e74d07fc":"markdown","8ca024d9":"markdown","d14fdb6e":"markdown","8b2f380b":"markdown","6f28fce5":"markdown","f303d502":"markdown","fc92f83d":"markdown","d8c9b133":"markdown","737a7a9d":"markdown","2a779fdc":"markdown","f383b608":"markdown","9edbaf22":"markdown","842d9edd":"markdown","3795e8d8":"markdown","fa3b3875":"markdown","917b69e2":"markdown","19a57e66":"markdown","cfc05853":"markdown","41f29d23":"markdown","0be0807c":"markdown","fafab060":"markdown","020dafe8":"markdown"},"source":{"add6ada2":"%%html\n\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/2000\/1*LwDYkjk7XqPYxb1TUozE-g.png\" width=\"800\"\/>\nphoto provided by: <a href=\"https:\/\/medium.com\/swlh\/how-to-succeed-at-kickstarter-6e72d7120cb5\">https:\/\/medium.com\/swlh\/how-to-succeed-at-kickstarter-6e72d7120cb5<\/a>","784a6d5b":"# import warnings\n# warnings.filterwarnings(\"ignore\")","9b5f5adb":"%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA \nfrom sklearn import ensemble\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\ndf = pd.read_csv(\"..\/input\/ks-projects-201612.csv\", encoding='latin1', low_memory=False )\n\ndf.head()","3c95cd9b":"print(df.shape[0], 'rows and', df.shape[1], 'columns')","d02808f8":"# get percentage of nulls\ndf.isnull().sum()\/df.shape[0]","80ec0150":"# Strip white space in column names\ndf.columns = [x.strip() for x in df.columns.tolist()]","9e363eef":"df[(df['name'].isnull()) | (df['category'].isnull())]","49d65573":"# drop all nulls remaining\ndf = df.dropna(axis=0, subset=['name', 'category'])","63f67d13":"# drop unnamed columns\ndf = df.iloc[:,:-4]","2d8e7247":"print(len(df.main_category.unique()), \"Main categories\")","48ca21b1":"print(len(df.category.unique()), \"sub categories\")","2e075d51":"sns.set_style('darkgrid')\nmains = df.main_category.value_counts().head(15)\n\nx = mains.values\ny = mains.index\n\nfig = plt.figure(dpi=100)\nax = fig.add_subplot(111)\nax = sns.barplot(y=y, x=x, orient='h', palette=\"cool\", alpha=0.8)\n\nplt.title('Kickstarter Top 15 Category Count')\nplt.show()","e7cac6c4":"cats = df.category.value_counts().head(15)\n\nx = cats.values\ny = cats.index\n\nfig = plt.figure(dpi=100)\nax = fig.add_subplot(111)\nax = sns.barplot(y=y, x=x, orient='h', palette=\"winter\", alpha=0.8)\n\nplt.title('Kickstarter Top 15 Sub-Category Count')\nplt.show()","19074563":"df.columns = ['ID', 'name', 'category', 'main_category', 'currency', 'deadline',\n       'goal', 'launched', 'pledged', 'state', 'backers', 'country',\n       'usd_pledged']","bfe08ed5":"# Convert string to float\ndf.loc[:,'usd_pledged'] = pd.to_numeric(df['usd_pledged'], downcast='float', errors='coerce')","90c04004":"df.isna().sum()","80698164":"# fill null pledged amounts with 0\ndf = df.fillna(value=0)","a255f044":"df.loc[:,'usd_pledged'].describe()","165975c0":"# convert goal to float\ndf['goal'] = pd.to_numeric(df.goal, downcast='float', errors='coerce')","1c3a39cc":"df.goal.describe()","cb404bb8":"df.isnull().sum()","a17d21bc":"# Fill null goals with zero\ndf = df.fillna(value=0)","2c3549e2":"# Select only projects with goals greater than 0\ndf = df[df.goal > 0]","be5f371a":"fig, ax = plt.subplots(1, 1)\n\ng = sns.distplot(np.log10(df.goal), kde=False, bins=30)\n\nplt.xlabel('Log Goal')\nplt.title('Distribution of Goal')\nplt.show()","d3612373":"plt.style.use('seaborn-pastel')\n\nfig, ax = plt.subplots(1, 1, dpi=100)\nexplode = [0,0,.1,.2, .4]\ndf.state.value_counts().head(5).plot.pie(autopct='%0.2f%%',\n                                        explode=explode)\n\nplt.title('Breakdown of Kickstarter Project Status')\nplt.ylabel('')\nplt.show()","27ba6454":"# Look at null country values\ndf[~df.country.str.contains('^[A-Z]{2}$', case=False)].country.value_counts()","21331fc1":"# Replace null countries with None\nreplace = df[~df.country.str.contains('^[A-Z]{2}$', case=False)].country.unique().tolist()\ndf.loc[:,'country'] = df.country.replace(to_replace=replace, value='None')","ee3e7aac":"df.country.value_counts()","ccdffa63":"df.currency.value_counts()","358c90fe":"# Convert Backers to integer\ndf.loc[:,'backers'] = pd.to_numeric(df.backers, errors='raise', downcast='integer')","35e64a80":"fig, ax = plt.subplots(1, 1)\n(df.backers >=1).value_counts().plot.pie(autopct='%0.0f%%', \n                                         explode=[0,.1], \n                                         labels=None, \n                                         shadow=True,\n                                         colors=['#a8fffa', '#ffbca8'])\n\nplt.ylabel('')\nplt.title('Kickstarter Backer Share')\nplt.legend(['backers', 'no backers'], loc=2)\n\nplt.show()","a21fac72":"# create a dataframe with projects that have 1 or more backers\ndf = df[(df.backers >= 1)]","4f25413d":"sns.set_style('darkgrid')\nsns.distplot(np.log(df.backers), color='purple', kde=False, bins=10)\n\nplt.title('Backer Distribution')\nplt.xlabel('Log backers')\nplt.show()","b4dbb9b5":"fig, ax = plt.subplots(1, 1)\n(df.usd_pledged > 0).value_counts().plot.pie(autopct='%0.0f%%', \n                                             explode=[0,.6], \n                                             labels=None, \n                                             shadow=True, \n                                             colors=['#b3ff68', '#ff68b4'])\n\nplt.ylabel('')\nplt.title('Kickstarter Pledged Share')\nplt.legend(['pledges', 'no pledges'], loc=3)\n\nplt.show()","79e44ad2":"# Select only US pledges greater than zero\ndf = df[df.usd_pledged > 0]","06455cba":"sns.distplot(np.log10(df.usd_pledged), color='g', kde=False, bins=8)\n\nplt.title('Distribution of USD Pledged')\nplt.xlabel('Log USD Pledged')\nplt.show()","e8230826":"# Convert launched, and deadline to datetime objects\nfor col in ['launched', 'deadline']:\n    df.loc[:,col] = pd.to_datetime(df[col], errors='coerce')\n    \n# drop projects with null launch and deadline dates\ndf = df.dropna()","f5007738":"print(\n    'first launch:', \n      df.launched.min().strftime('%B %d, %Y'), \n      '\\nlast launch:',\n      df.launched.max().strftime('%B %d, %Y')\n     )","c29b9232":"# plt.style.use('fivethirtyeight')\n\ncats = df.launched.dt.strftime('%B %d, %Y').value_counts().head(10)\n\nx = cats.values\ny = cats.index\n\nfig = plt.figure(figsize=(6,6))\nsns.barplot(y=y, x=x, orient='h', palette=\"summer_r\", alpha=0.8)\n# df.launched.dt.strftime('%B %d, %Y').value_counts().head(10).plot.barh()\n\nplt.title('Top 10 Kickstarter Launch Dates')\nplt.show()","edb4cc66":"fig = plt.figure(figsize=(15,7), dpi=100)\n\n# plt.style.use('fivethirtyeight')\n# fig.suptitle('Normalized Launch Distributions', fontsize=14)\n\nplt.subplot(231)\nplt.title('day of month')\ndf.launched.dt.day.value_counts().hist(density=True, color='g')\n\nplt.subplot(232)\nplt.title('month')\ndf.launched.dt.month.value_counts().hist(density=True)\n\nplt.subplot(233)\nplt.title('day of week')\ndf.launched.dt.dayofweek.value_counts().hist(density=True)\n\nplt.subplot(234)\nplt.title('day of year')\ndf.launched.dt.dayofyear.value_counts().hist(density=True, color='g')\n\nplt.subplot(235)\nplt.title('Year')\ndf.launched.dt.year.value_counts().hist()\n\nplt.subplot(236)\nplt.title('Week')\ndf.launched.dt.week.value_counts().hist(density=True, color='g')\n\nplt.tight_layout()\nplt.show()","5cd1407f":"df.launched.dt.year.value_counts()","3b53d446":"fig = plt.figure(figsize=(12,7), dpi=100)\n\n# plt.style.use('fivethirtyeight')\n# fig.suptitle('Normalized Deadline Distributions', fontsize=14)\n\nplt.subplot(231)\nplt.title('day of month')\ndf.deadline.dt.day.value_counts().hist(density=True, color='purple')\n\nplt.subplot(232)\nplt.title('month')\ndf.deadline.dt.month.value_counts().hist(density=True, color='purple')\n\nplt.subplot(233)\nplt.title('day of week')\ndf.deadline.dt.dayofweek.value_counts().hist(density=True, color='purple')\n\nplt.subplot(234)\nplt.title('day of year')\ndf.deadline.dt.dayofyear.value_counts().hist(density=True)\n\nplt.subplot(235)\nplt.title('Year')\ndf.deadline.dt.year.value_counts().hist(density=True, color='purple')\n\nplt.subplot(236)\nplt.title('Week')\ndf.deadline.dt.week.value_counts().hist(density=True)\n\nplt.tight_layout()\nplt.show()","feeea8ae":"(df.deadline - df.launched).dt.days.value_counts().head(10)","6e980788":"(df.deadline - df.launched).dt.days.describe()","f2ee843c":"sns.set_style('darkgrid')\n\nsns.distplot(((df.deadline - df.launched).dt.days), kde=False, bins=5)\n\nplt.title('Normalized Duration Distribution')\nplt.show()","713e7c89":"((df.deadline - df.launched).dt.days).quantile(q=.90)","94fc6583":"(((df.deadline - df.launched).dt.days) <= 59).value_counts()","b5f0b2b9":"fig, ax = plt.subplots(1, 1)\n(((df.deadline - df.launched).dt.days) <= 59).value_counts().plot.pie(autopct='%0.0f%%', \n                                             explode=[0,.6], \n                                             labels=None, \n                                             shadow=True, \n                                             colors=['#f7cc7b', '#a07bf7'])\n\nplt.ylabel('')\nplt.title('Kickstarter Duration Share')\nplt.legend(['less than 60 days', 'more than 59 days'], loc=3)\n\nplt.show()","e878cc36":"sns.distplot(np.log(df['usd_pledged']\/(df['backers'])), kde=False, bins=20)\n\nplt.title('Normalized Distribution of USD Pledged per Backer')\nplt.xlabel('Log USD per Backer')\nplt.show()","bb366568":"sns.distplot(np.log(df['goal']\/(df['backers'])), kde=False, bins=15)\nplt.title('Normalized Distribution of Goal per Backer')\nplt.xlabel('Log Goal per Backer')\nplt.show()","5780d0a9":"df['log_usd_per_backer'] = np.log(df['usd_pledged']\/df['backers'])\ndf['log_goal_per_backer'] = np.log(df['goal']\/df['backers'])","2ffb897f":"%%html\n\n<img src=\"https:\/\/drive.google.com\/uc?export=download&id=1Q1u0dJ-SDBwMRgaLSYFPBAGmwcVrOXZg\"\/>","87122b1e":"import matplotlib as mpl\n# Reset matplotlib params\nmpl.rcParams.update(mpl.rcParamsDefault)\n\nsns.lmplot(x=\"log_goal_per_backer\", y=\"log_usd_per_backer\",\n                hue=\"state\",\n                palette='Spectral',\n                hue_order=['failed', 'canceled', 'suspended', 'live', 'successful'],\n                data=df)\n\nplt.title(\"Log Goal per Backer vs. Log Pledged per Backer\")\nplt.show()","7d2944e6":"# # Filtering only for successful and failed projects\n# df = df[(df['state'] == 'failed') | (df['state'] == 'successful')]","347837c1":"# drop live kickstarters as their outcome is undetermined\ndf = df[(df.state != 'live')]","0df3e6b9":"features = df.copy()\nfeatures['success'] = np.where(features.state == 'successful', 1, 0)","ad1df3d4":"features['US'] = np.where(features.country=='US', 1,0)","bc40f593":"# Replace punctuation and count number of words in name\n# features['length_name'] = [len(x) for x in features.name.str.replace('[^\\w\\s]','').str.split()]","8b621307":"features['length_chars'] = features.name.str.len()","ab653ec7":"features['contains_!'] = pd.get_dummies(features.name.str.contains('!'), drop_first=True)","7d24d033":"features['contains_?'] = pd.get_dummies(features.name.str.contains(r'\\?'), drop_first=True)","05a73950":"features['contains_title'] = pd.get_dummies(features.name.str.istitle(), drop_first=True)","66c69d5d":"features['log_goal'] = np.log10(features.goal)\nfeatures['log_usd_pledged'] = np.log10(features.usd_pledged)","28b3c541":"features['time_delta'] = (features.deadline.dt.date - features.launched.dt.date).dt.days","ed71b0df":"# Select only log goal greater than or equal to 1\n# features = features[(features.log_goal >= 1)]","b820bd43":"sns.set_style('darkgrid')\n\nsns.distplot(features.log_goal, kde=False, bins=20)\n\nplt.title('Distribution of Goal')\nplt.plot()","22a550f7":"# conditions = [(features.time_delta<15), \n#               (features.time_delta>=15) & (features.time_delta<30),\n#               (features.time_delta>=30)&(features.time_delta<45),\n#               (features.time_delta>=45)&(features.time_delta<60),\n#               (features.time_delta>=60)\n#              ]\n# choices = ['15_days', '30_days', '45_days', '60_days', '90_days']\n# features[('duration')] = np.select(conditions, choices, default='0_days')\n# features[('duration')] = pd.get_dummies(features[('duration')])","c9694849":"features = pd.concat([features, \n                      pd.get_dummies(features.launched.dt.dayofweek, prefix='day_of_week'),\n                     pd.get_dummies(features.launched.dt.week, prefix='week'),\n                     pd.get_dummies(features.launched.dt.year, prefix='year'),\n                     pd.get_dummies(features.category)],\n         axis=1)","83ea70b3":"features = features.iloc[:,15:]","15bfab27":"sns.heatmap(features.iloc[:, :20].corr(), cmap='Blues')\n\nplt.title('Heatmap of Kickstarter Feature Correlations')\nplt.show()","338587e0":"from sklearn import linear_model\n\n# Instantiate and fit our model.\nregression = linear_model.LinearRegression()\nY = features[('log_usd_pledged')]\nX = features.drop(['log_usd_pledged', 'success'], axis=1)\nregression.fit(X, Y)\n\n# Inspect the results.\n# print('\\nCoefficients: \\n', regression.coef_)\nprint('\\nIntercept: \\n', regression.intercept_)\nprint('\\nR-squared:')\nprint(regression.score(X, Y))","f057becd":"sns.regplot(x='time_delta', y='log_goal', data=features)\nplt.title('Log Goal vs. Duration')\nplt.show()","00873430":"predicted = regression.predict(X).ravel()\nactual = features[('log_usd_pledged')]\n\n# Calculate the error, also called the residual.\nresidual = actual - predicted\n\nsns.distplot(residual)\nplt.title('Residual Counts')\nplt.show()","762938ee":"sns.regplot(x=predicted, y=residual, fit_reg=False)\nplt.xlabel('Predicted')\nplt.ylabel('Residual')\nplt.axhline(y=0)\nplt.title('Residual vs. Predicted')\nplt.show()","59e83d70":"# Drop Log USD Pledged\nfeatures = features.drop(['log_usd_pledged'], 1)","b9698460":"X = features.drop(['success'], 1)\ny = features.success\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=0)","80fe0fce":"# Declare a logistic regression classifier.\n# Parameter regularization coefficient C described above.\nlr = LogisticRegression(penalty='l2', solver='liblinear')\n\n# Fit the model.\nfit = lr.fit(X_train, y_train)\n\n# Display.\n# print('Coefficients')\n# print(fit.coef_)\n# print(fit.intercept_)\n\npred_y_sklearn = lr.predict(X_test)\n\nprint('\\n Accuracy by success')\nprint(pd.crosstab(pred_y_sklearn, y_test))\n\nprint('\\n Percentage accuracy')\nprint(lr.score(X_test, y_test))\n\n# CV\n# scores = cross_val_score(lr, X, y, cv=10)\n\n# print(scores)","4065b03a":"# # Pass logistic regression model to the RFE constructor\n# from sklearn.feature_selection import RFE\n\n# selector = RFE(lr)\n# selector = selector.fit(X, y)\n\n# print(selector.ranking_)\n\n# # Now turn into a dataframe so you can sort by rank\n\n# rankings = pd.DataFrame({'Features': X.columns, 'Ranking' : selector.ranking_})\n# rankings.sort_values('Ranking')","f8e50e72":"X_pca = features.drop('success', 1)\nsklearn_pca = PCA(n_components=5)\nY_sklearn = sklearn_pca.fit_transform(X_pca)","33676297":"print(\n    'The percentage of total variance in the dataset explained by each',\n    'component from Sklearn PCA.\\n',\n    sklearn_pca.explained_variance_ratio_)","ccc7bfe7":"# Use 500 Estimators\nrfc = ensemble.RandomForestClassifier(n_jobs=-1, n_estimators=500)\n\nrfc.fit(X_train, y_train)\n\nprint('score:', rfc.score(X_test, y_test))","8a8e3ec4":"# # CV\n# scores = cross_val_score(rfc, X, y, cv=10)\n\n# print(scores)\n# print()\n# print('Average:', np.mean(scores))","1d4420bb":"# # Pass Random Forest to the RFE constructor\n# from sklearn.feature_selection import RFE\n\n# selector = RFE(rfc)\n# selector = selector.fit(X, y)","ebff80dc":"# print(selector.ranking_)","24eaef17":"# # Now turn into a dataframe so you can sort by rank\n\n# rankings = pd.DataFrame({'Features': X.columns, 'Ranking' : selector.ranking_})\n# rankings.sort_values('Ranking')","a8790052":"def gradient_boost(estimators, depth, loss_function, sampling):\n    clf = ensemble.GradientBoostingClassifier(n_estimators=estimators, \n                                              max_depth=depth, \n                                              loss=loss_function, \n                                              subsample=sampling\n                                              )\n    clf.fit(X_train, y_train)\n    print('\\n Percentage accuracy for Gradient Boosting Classifier')\n    predict_train = clf.predict(X_train)\n    predict_test = clf.predict(X_test)\n\n# Accuracy tables.\n    table_train = pd.crosstab(y_train, predict_train, margins=True)\n    table_test = pd.crosstab(y_test, predict_test, margins=True)\n\n    train_tI_errors = table_train.loc[0.0,1.0] \/ table_train.loc['All','All']\n    train_tII_errors = table_train.loc[1.0,0.0] \/ table_train.loc['All','All']\n\n    test_tI_errors = table_test.loc[0.0,1.0]\/table_test.loc['All','All']\n    test_tII_errors = table_test.loc[1.0,0.0]\/table_test.loc['All','All']\n    \n    train_accuracy = 1 - (train_tI_errors + train_tII_errors)\n    test_accuracy = 1 - (test_tI_errors + test_tII_errors)\n    \n    print((\n    'Training set accuracy:\\n'\n    'Overall Accuracy: {}\\n'\n    'Percent Type I errors: {}\\n'\n    'Percent Type II errors: {}\\n\\n'\n    'Test set accuracy:\\n'\n    'Overall Accuracy: {}\\n'\n    'Percent Type I errors: {}\\n'\n    'Percent Type II errors: {}'\n    ).format(train_accuracy, train_tI_errors, train_tII_errors, test_accuracy, test_tI_errors, test_tII_errors))","ec2f7a7f":"#500 estimators, max depth of 2, loss function = 'deviance', subsampling default to 1.0\ngradient_boost(500, 2, 'deviance', 1.0)","c162363d":"clf = ensemble.GradientBoostingClassifier(n_estimators=500, max_depth=2, loss='deviance', subsample=1.0)\nclf.fit(X_train, y_train)\n\nfeature_importance = clf.feature_importances_[:40]\n\n# Make importances relative to max importance.\nplt.figure(figsize=(5,10))\nfeature_importance = 100.0 * (feature_importance \/ feature_importance.max())\nsorted_idx = np.argsort(feature_importance)\npos = np.arange(sorted_idx.shape[0]) + .5\nplt.subplot(1, 2, 2)\nplt.barh(pos, feature_importance[sorted_idx], align='center')\nplt.yticks(pos, X.columns[sorted_idx])\nplt.xlabel('Relative Importance')\nplt.title('Variable Importance')\nplt.show()","7f794561":"import lightgbm as lgb\nfrom lightgbm import LGBMClassifier\n\nclf_lgbm = LGBMClassifier(\n        n_estimators=300,\n        num_leaves=15,\n        colsample_bytree=.8,\n        subsample=.8,\n        max_depth=7,\n        reg_alpha=.1,\n        reg_lambda=.1,\n        min_split_gain=.01\n    )\n\nclf_lgbm.fit(X_train, \n        y_train,\n        eval_set= [(X_train, y_train), (X_test, y_test)], \n        eval_metric='auc', \n        verbose=0, \n        early_stopping_rounds=30\n       )\n\nacc_clf_lgbm = round(clf_lgbm.score(X_test, y_test) * 100, 2)\nacc_clf_lgbm\n\n# # Run Cross validation\n# scores = cross_val_score(clf_lgbm, X, y, cv=5)\n# np.mean(scores)","eb10502e":"# CV\n# scores = cross_val_score(clf_lgbm, X, y, cv=10)\n\n# print(scores)\n# print()\n# print('Average:', np.mean(scores))","8fb2285d":"bdt = AdaBoostClassifier(DecisionTreeClassifier(max_depth=1),\n                         algorithm=\"SAMME\",\n                         n_estimators=200)\n\nbdt.fit(X_train, y_train)\n\nacc_bdt = round(bdt.score(X_test, y_test) * 100, 2)\nacc_bdt\n\n# Run Cross validation\n# scores = cross_val_score(bdt, X, y, cv=5)\n# np.mean(scores)","86fa9198":"# for min_max scaling\nfrom mlxtend.preprocessing import minmax_scaling\n# features['length_name_scaled'] = minmax_scaling(features.length_name, columns = 0)\nfeatures['length_chars_scaled'] = minmax_scaling(features.length_chars, columns = 0)\nfeatures['time_delta_scaled'] = minmax_scaling(features.time_delta, columns = 0)\n\n# Set X, and y for models and training and test sets for Cross Validation\ny = features['success']\nX = features.drop(['success', 'length_chars'], axis=1)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=0)","53869dd7":"from sklearn.neighbors import KNeighborsClassifier\n\nneigh = KNeighborsClassifier(n_neighbors=3, n_jobs=-1)\nneigh.fit(X_train, y_train)","af1b64d9":"print(neigh.score(X_test, y_test))\n\n# cross_val_score(neigh, X, y, cv=5)","03416e30":"## Look at the distribution of the goal.","150e290c":"## The Regression Model is suffering from non-homoscedasticity.\n    As the amount predicted increases the residual error increases.","6e8caed3":"# Baseline Accuracy with Logistic Regression is 67.3%","643db78a":"## Predicting non-successful Kickstarters is more accurate than predicting successful kickstarters\n    and success is the only feature correlated with any other feature.\n    There is also a slight class imbalance between failed and successful","0510a8d7":"## Which Days and months had the most launches and deadlines?","8fb5244a":"## 91% of Kickstarters lasted less than 60 days","3cd795a8":"## Distribution of deadline day of year, and week appears normal","82e377db":"# Kickstarter's Peak dates were all in the same 2 weeks in mid-july 2014.\n    With several outliers in 2015 and 2016","114e7a87":"## Distribution of launch day of week, month and day of year appear normal","ef3483c0":"# Try Linear Regression model to predict Log USD Pledged","ea612544":"# Section 2:\n## Modeling","e74d07fc":"## KNN performs the worst at 61% test set accuracy","8ca024d9":"## Which currencies fund the most Kickstarters?","d14fdb6e":"## Over 99% of the unnamed columns are null, and 1% of usd pledged is null\n    name and category is null for several values only","8b2f380b":"\n## Best Run is 68.5% test set accuracy with Lgb Classifier\n```********************************************************************```","6f28fce5":"# Part 1\n## Exploratory Data Analysis","f303d502":"## Top Currencies are USD, GB(Pounds), Canadanian Dollars, Euros, and Australian Dollars\n    The English speaking world seems to dominate Kickstarter","fc92f83d":"# Feature Engineering\n```*******************************```","d8c9b133":"## The scatter plot above shows a linear relationship between log usd per backer and log goal per backer.\n    There is a clear dividing line for the successful vs unsuccessful status.","737a7a9d":"# Try random forest","2a779fdc":"# Gradient Boosting gets 68.0% test set accuracy","f383b608":"# There is a strong correlation between log_usd_pledged and success\n- Weak negative correlation betwen contains title and length_chars.\n- Weak negative correlation between log_goal and success.\n- Weak positive correlation log goal, time_delta, and usd_pledged.","9edbaf22":"## Try Gradient Boosting","842d9edd":"# Future work:\n- Feature engineering\n- Hyperparameter Sweeps\n- Create better Classifiers\n\n## Run Model on Indiegogo, gofundme, and other crowd source data.","3795e8d8":"# The US leads with number of kickstarters\n    followed by Great Britain, Canada, and Australia.","fa3b3875":"# Section 3: Classification","917b69e2":"## All null country values contain ```N, \"0```","19a57e66":"## Random Forest performs variably between 64% and 68%","cfc05853":"## Many of the top sub categories overlap with the top main categories such as Technology, Music, Film and Design","41f29d23":"# Which countries have the highest number of kickstarters?","0be0807c":"## There is a weak linear relationship between duration and log goal\n    This is no surprise, because higher goals should tend to take longer to meet.","fafab060":"## Ada boost gets 65.9% test set accuracy","020dafe8":"# Projects with zero backers make up 15% of the population.\n    However, since they may skew the model, only projects with at least 1 backer will be used."}}