{"cell_type":{"615de7e8":"code","e0ff8a4f":"code","250733e1":"code","99a1b5e2":"code","45018cc2":"code","a0f89c9b":"code","83b5c1d6":"code","49707552":"code","644a12a2":"code","eeeb81bc":"code","1dd6c7ea":"code","a65a15e7":"code","438279c4":"code","a2c84625":"code","e4821608":"code","6ae3d799":"code","6df04b3b":"code","d9f8599a":"code","80c93256":"code","1a02e957":"code","a9fdea2a":"code","b0bfa973":"markdown","f9b59134":"markdown","9311ad4b":"markdown","6cc81dc5":"markdown","a6ab2d6a":"markdown","667113a9":"markdown"},"source":{"615de7e8":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nis_python = \"inline\" in matplotlib.get_backend()\nif is_python:\n    from IPython import display","e0ff8a4f":"def load_data(path):\n    with np.load(path) as mnist:\n        X_train, y_train = mnist['x_train'], mnist['y_train']\n        X_test, y_test = mnist['x_test'], mnist['y_test']\n    return X_train,y_train, X_test, y_test","250733e1":"path = \"..\/input\/mnist-numpy\/mnist.npz\"","99a1b5e2":"x_train, y_train, x_test, y_test = load_data(path)","45018cc2":"print(\"X_train: {}, y_train: {}\".format(x_train.shape,y_train.shape))\nprint(\"X_test: {}, y_test: {}\".format(x_test.shape,y_test.shape))","a0f89c9b":"mnist_image = np.vstack((x_train,x_test))\nmnist_image = mnist_image.reshape(-1,784)\nprint(mnist_image.shape)\nmnist_label = np.vstack((y_train.reshape(-1,1),y_test.reshape(-1,1)))\nprint(mnist_label.shape)","83b5c1d6":"mnist_train = '..\/input\/digit-recognizer\/train.csv'\nmnist_test = '..\/input\/digit-recognizer\/test.csv'\nsample = '..\/input\/digit-recognizer\/sample_submission.csv'","49707552":"train_data = pd.read_csv(mnist_train)\ntest_data = pd.read_csv(mnist_test)","644a12a2":"print(train_data.shape)\nprint(test_data.shape)","eeeb81bc":"train_images = train_data.copy()\ntrain_images = train_images.values\nX_train = train_images[:,1:]\ny_train = train_images[:,0]\nX_test = test_data.values\n\nprint(X_train.shape)\nprint(y_train.shape)\nprint(test_data.shape)","1dd6c7ea":"X_train = X_train.reshape(-1,28,28)\ny_train = y_train.reshape(-1,1)\n\nprint(X_train.shape)\nprint(y_train.shape)","a65a15e7":"plt.figure(figsize=(100,100))\nsns.set_style('whitegrid')\nfor idx in range(400):\n    plt.subplot(20,20,idx+1)\n    plt.imshow(X_train[idx],interpolation='nearest',cmap='gray')\n    plt.title(y_train[idx],fontsize=20)\n    plt.xticks([])\n    plt.yticks([])\n    plt.colorbar()","438279c4":"predictions = np.zeros((mnist_label.shape))","a2c84625":"x1=0\nx2=0\nprint(\"Classifying Kaggle's 'test.csv' using KNN where K=1 and MNIST 70k images..\")\nfor i in range(0,28000):\n    for j in range(0,70000):\n        if np.absolute(X_test[i,:]-mnist_image[j,:]).sum()==0:\n            predictions[i]=mnist_label[j]\n            if i%1000==0:\n                print(\"  %d images classified perfectly\"%(i),end=\"\")\n            if j<60000:\n                x1+=1\n            else:\n                x2+=1\n            break\n\nif x1+x2==28000:\n    print(\" 28000 images classified perfectly.\")\n    print(\"All 28000 images are contained in MNIST.npz Dataset.\")\n    print(\"%d images are in MNIST.npz train and %d images are in MNIST.npz test\"%(x1,x2))","e4821608":"final_pred = predictions[0:28000]","6ae3d799":"final_pred[-10:]","6df04b3b":"sample_data = pd.read_csv(sample)","d9f8599a":"sample_data.head()","80c93256":"my_submission = pd.DataFrame({'ImageId':np.arange(28000),'Label':final_pred.squeeze().astype(np.int)})","1a02e957":"my_submission.head()","a9fdea2a":"my_submission.to_csv('submission.csv', index=False)","b0bfa973":"### Building the Classifier","f9b59134":"### Loading the Digit Recognizer Data","9311ad4b":"### Loading the mnist.npz","6cc81dc5":"### Importing the Dependencies","a6ab2d6a":"![alt_text](https:\/\/cdn-images-1.medium.com\/max\/1200\/1*9Mjoc_J0JR294YwHGXwCeg.jpeg)","667113a9":"### Vizualizing the Data"}}