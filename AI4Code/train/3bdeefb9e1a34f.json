{"cell_type":{"407f000d":"code","28241783":"code","9a40aa14":"code","4dd22a16":"code","bf517ab0":"code","519f78d9":"code","4f9b1db2":"code","6f7f3169":"code","60830e55":"code","02cc17dc":"code","860621d2":"code","b9b9bfce":"code","2a353d15":"code","8b474b53":"code","9072f258":"code","a629e189":"code","3b55c645":"code","1326a034":"code","a49ea7b0":"code","374cf450":"code","4ac602f9":"code","d724c73e":"code","a20de15e":"code","0bb7a8b8":"code","e893fb96":"code","f2fbc26f":"code","3485dd3e":"code","aac3b8ef":"code","f0ba37ab":"code","231e1008":"code","30327e9a":"code","8796cb31":"code","9511fddd":"code","d19726fb":"code","823c0654":"code","082c83a0":"code","70f97c42":"code","bddbb582":"code","5c34cc37":"code","f7aedad7":"code","b3221fa5":"code","26bf4b32":"code","8741c0aa":"code","1fa0b4d0":"code","b6d560f5":"code","daa1426d":"code","4cb238f1":"code","b6264291":"code","ae56dd5c":"code","8b34918d":"code","3da0ba61":"code","3d153ade":"code","e468cb4c":"code","8ef6c101":"code","b6a85961":"code","8fff0bcd":"code","a9f18284":"code","b0c4c0a0":"code","bcf65fc2":"code","965c0068":"code","70dc71e6":"code","2f3b9ed3":"code","c5a35d15":"code","e2a66858":"code","3f09931e":"code","6a7d7085":"code","d0b31b45":"code","d650e06e":"code","f22ac7bd":"code","2c8e6ed0":"code","f8779f6a":"code","3deea389":"code","4a3c0d67":"code","bef2b94f":"code","306e9788":"code","414a95b6":"code","d6c38d11":"code","4cdf0b3c":"code","b696d6da":"code","193038d7":"code","83cae5a4":"code","fdf581ac":"code","f77cbbed":"code","81b36946":"code","76e8e1d7":"code","9c1191ce":"code","06a830c5":"code","bfeaa14d":"code","f01c24a0":"code","381b6715":"code","54a3c856":"code","506debdc":"code","72dd5b07":"code","5854ca5c":"code","933bce2d":"code","3a348120":"code","14033c96":"code","1d15bf60":"code","ee63f368":"code","23d1c907":"code","7aeb65d9":"code","0a226e41":"code","dea4a276":"code","2f685bed":"code","e511f86d":"code","0558fdb9":"code","f30e3df0":"code","9956b6bf":"code","f26dbee6":"code","3bb996b6":"code","397c4a11":"code","6935d295":"code","86e42301":"code","75001959":"code","072a7608":"code","c98cc3cb":"code","e336a35e":"code","7123c1ff":"code","93774d44":"code","d90ca6ce":"code","747d3b41":"code","7a73fd18":"code","7a7cb73f":"code","b4a5e3da":"code","6c6aaa13":"code","e13c9896":"code","32f39492":"code","f96f8c86":"code","9fba8d1b":"code","7964f052":"code","3d36d555":"code","4a907410":"code","94250581":"code","791da52c":"code","8e9e6e35":"code","7a15a089":"code","a12900bd":"code","3f793e33":"code","808ebb9e":"code","3dcbd53d":"code","68073579":"code","c62aa722":"code","5a324334":"code","8ed14753":"code","b0bb6911":"code","17abb306":"code","d5307e49":"code","63ecf883":"code","4009e887":"code","0dd022c4":"code","b487d356":"code","4c9d2c3d":"code","28559817":"code","8d79a5a6":"code","8b25d5b3":"code","a07515b5":"code","112e9e37":"code","2a63f54b":"code","f7194819":"code","9c5d40eb":"code","4d9baaea":"code","98b02e74":"code","37c188bb":"code","3b4e1693":"code","b5779aa7":"code","b3c6cf72":"code","462e791c":"code","f5705d95":"code","34ef452c":"code","384f0c1d":"code","a0f791ac":"code","a00fa2e9":"code","3364d412":"code","fdfa756d":"code","6cc45de1":"code","cae1e00d":"code","e9c29625":"code","70bbe5e4":"code","39002e41":"code","9dc49dd5":"code","65b7c95e":"code","32447063":"code","2ae31487":"code","8cf67c4c":"code","837a28ee":"code","f3f34d86":"code","f29c705a":"code","fadc840e":"code","60d733df":"code","b84a71a5":"code","388719dc":"code","50a02e4b":"code","22fbf5c7":"code","bd09b449":"code","11c7757c":"code","8dcbd31a":"code","6734f07a":"code","f1026565":"code","44a1e327":"code","72e66efa":"code","14d6ede2":"code","b72e851d":"code","ed8ea817":"code","6e320ad0":"code","0542f7a7":"code","de45b4d0":"code","763f3f18":"code","3f9784fd":"code","a0665ec2":"code","fb6bde06":"code","c1e2ec8c":"code","ef5cb85e":"code","b474e0ad":"code","62e61c08":"code","66ac09db":"markdown","d0cbe9f3":"markdown","1f53606e":"markdown","dd98d089":"markdown","af63b66f":"markdown","5d7302f8":"markdown","a9db2bee":"markdown","e3da0292":"markdown","ad2b7f5b":"markdown","495830dc":"markdown","b580000a":"markdown","ae0d2457":"markdown","6e83065f":"markdown","852c10a8":"markdown","ca90b2c0":"markdown","ec0f4ed9":"markdown","3b969cff":"markdown","6ac03767":"markdown","cd248914":"markdown","45bd3c88":"markdown","f5888319":"markdown","1fbbddce":"markdown","e91966ba":"markdown","f085281c":"markdown","2d4720c3":"markdown","d3914831":"markdown","3fb17250":"markdown","6741f5c2":"markdown","2680453c":"markdown","19849feb":"markdown","dda3e960":"markdown","cf5263e2":"markdown","a88fd414":"markdown","4ff93d12":"markdown","43729acf":"markdown","6d2dfbb9":"markdown"},"source":{"407f000d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport statsmodels.api as sm\nfrom   statsmodels.formula.api import ols\nfrom statsmodels.stats.anova import anova_lm\nfrom sklearn.linear_model import Lasso, Ridge\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\n","28241783":"df=pd.read_csv('..\/input\/auto-insurance-customerlifetimevalue\/data.csv')\ndf.head()","9a40aa14":"df.shape","4dd22a16":"df.isnull().sum()","bf517ab0":"df.rename(columns={'Customer Lifetime Value':'CLV'},inplace=True)\n","519f78d9":"df['CLV']","4f9b1db2":"df.info()","6f7f3169":"df['Customer'].count","60830e55":"df['Number of Open Complaints'].value_counts()","02cc17dc":"df['Number of Policies'].value_counts()","860621d2":"\ndf['Number of Open Complaints'] = df['Number of Open Complaints'].astype('object',copy=False)","b9b9bfce":"df.info()","2a353d15":"list(df.select_dtypes(exclude=['object']).columns)\n","8b474b53":"sns.boxplot(df['Income'])","9072f258":"sns.boxplot(df['Monthly Premium Auto'])","a629e189":"sns.boxplot(df['Months Since Last Claim'])","3b55c645":"sns.boxplot(df['Months Since Policy Inception'])","1326a034":"sns.boxplot(df['Total Claim Amount'])","a49ea7b0":"df['Total Claim Amount'].describe()","374cf450":"fig,ax=plt.subplots(1,3,figsize=(15,5))\nsns.boxplot(df['Total Claim Amount'],ax=ax[1])\n\nsns.distplot(df['Total Claim Amount'],ax=ax[0])\nsns.scatterplot(df['Total Claim Amount'],df['CLV'],ax=ax[2])\nplt.axvline(1800,color='r')","4ac602f9":"sns.scatterplot(df['Total Claim Amount'],df['CLV'])\nplt.axvline(1800,color='r')","d724c73e":"df[df['Total Claim Amount']>1800]['Total Claim Amount'].count()","a20de15e":"# df=df[df['Total Claim Amount']<1800]\n","0bb7a8b8":"print('Data point remain',len(df))","e893fb96":"# q1=df['Total Claim Amount'].quantile(0.25)\n# q2=df['Total Claim Amount'].quantile(0.50)\n# q3=df['Total Claim Amount'].quantile(0.75)\n# IQR=q3-q1\n\n","f2fbc26f":"# Upper_whiskers=q3+1.5*IQR\n# Upper_whiskers","3485dd3e":"# df[df['Total Claim Amount']>961]['Total Claim Amount'].count()","aac3b8ef":"# a=df[~((df['Total Claim Amount']<(q1-1.5*IQR))|(df['Total Claim Amount']>(q3+1.5*IQR)))]\n","f0ba37ab":"# a['Total Claim Amount'].describe()","231e1008":"# sns.scatterplot(a['Total Claim Amount'],a['CLV'])","30327e9a":"sns.distplot(df['Total Claim Amount'])","8796cb31":"sns.boxplot(df['Total Claim Amount'])","9511fddd":"sns.distplot(df['CLV'])","d19726fb":"fig,ax=plt.subplots(1,3,figsize=(15,5))\nsns.boxplot(df['Monthly Premium Auto'],ax=ax[1])\n\nsns.distplot(df['Monthly Premium Auto'],ax=ax[0])\nsns.scatterplot(df['Monthly Premium Auto'],df['CLV'],ax=ax[2])\nplt.axvline(204,color='r')","823c0654":"Upper_whiskers=df['Monthly Premium Auto'].quantile(0.75)+1.5*df['Monthly Premium Auto'].quantile(0.75)-df['Monthly Premium Auto'].quantile(0.25)\nUpper_whiskers","082c83a0":"df[df['Monthly Premium Auto']>204.5]['Monthly Premium Auto'].count()","70f97c42":"# q1=df['Monthly Premium Auto'].quantile(0.25)\n# q2=df['Monthly Premium Auto'].quantile(0.75)\n# IQR=q2-q1\n# df=df[~((df['Monthly Premium Auto']<(q1-1.5*IQR))|(df['Monthly Premium Auto']>(q2+1.5*IQR)))]\n","bddbb582":"fig,ax=plt.subplots(1,3,figsize=(15,5))\nsns.boxplot(df['Monthly Premium Auto'],ax=ax[1])\n\nsns.distplot(df['Monthly Premium Auto'],ax=ax[0])\nsns.scatterplot(df['Monthly Premium Auto'],df['CLV'],ax=ax[2])\nplt.axvline(204,color='r')","5c34cc37":"df['Effective To Date']=pd.to_datetime(df['Effective To Date'],infer_datetime_format=True)\ndf.info()","f7aedad7":"df['Months']=df['Effective To Date'].dt.month\ndf['Months'].value_counts()","b3221fa5":"df['Months'] = df['Months'].astype('object',copy=False)","26bf4b32":"df['Number of Policies'] = np.where(df['Number of Policies']>2,3,df['Number of Policies'])","8741c0aa":"df['Number of Policies'].value_counts()","1fa0b4d0":"df['Number of Policies'] = df['Number of Policies'].astype('object',copy=False)","b6d560f5":"no=df[df['Response']=='No']['CLV']\nyes=df[df['Response']=='Yes']['CLV']\n","daa1426d":"import scipy.stats as stats","4cb238f1":"stats.mannwhitneyu(no,yes)","b6264291":"import matplotlib.pyplot as plt\n# plt.figure(figsize=(15,3))\nsns.boxplot(df['CLV'])","ae56dd5c":"df['CLV'].describe()","8b34918d":"q1=df['CLV'].quantile(0.25)\nq2=df['CLV'].quantile(0.50)\nq3=df['CLV'].quantile(0.75)\nIQR=q3-q1\nprint(IQR)","3da0ba61":"l1=q3+1.5*IQR\nl1","3d153ade":"l2=q1-1.5*IQR\nl2","e468cb4c":"df[df['CLV']>l1]['CLV'].count()","8ef6c101":"df[df['CLV']>l1].head()","b6a85961":"q1=df['CLV'].quantile(0.25)\nq2=df['CLV'].quantile(0.75)\nIQR=q2-q1\ndf=df[~((df['CLV']<(q1-1.5*IQR))|(df['CLV']>(q2+1.5*IQR)))]\n","8fff0bcd":"df.shape","a9f18284":"sns.boxplot(df['CLV'])","b0c4c0a0":"sns.boxplot(x=df['Coverage'],y=df['CLV'])","bcf65fc2":"# sns.scatterplot(df['Customer Lifetime Value'])\nsns.scatterplot(y='CLV',x='Income',data=df)\n","965c0068":"sns.scatterplot(y='CLV',x='Monthly Premium Auto',data=df)","70dc71e6":"sns.scatterplot(y='CLV',x='Total Claim Amount',data=df)","2f3b9ed3":"df.corr()","c5a35d15":"# df=df[df['Customer Lifetime Value']<df['Customer Lifetime Value'].max()]","e2a66858":"df.head()","3f09931e":"df['CLV'].max()","6a7d7085":"sns.distplot(df['CLV'])","d0b31b45":"df['State'].value_counts()","d650e06e":"cl=df[df['State']=='California']['CLV']\norg=df[df['State']=='Oregon']['CLV']\nar=df[df['State']=='Arizona']['CLV']\nNv=df[df['State']=='Nevada']['CLV']\nWa=df[df['State']=='Washington']['CLV']","f22ac7bd":"a=stats.kruskal(cl,org,ar,Nv,Wa)\n","2c8e6ed0":"catg=df.select_dtypes(include=['object'])\ncatg.drop(['Customer'],1,inplace=True)","f8779f6a":"catg.head()","3deea389":"col=list(catg.columns)\nprint(len(col))\ncol","4a3c0d67":"for i in col:\n    print(i,'\\n',df[i].value_counts(),'\\n')","bef2b94f":"ttest=[]\nanova=[]\nfor i in col:\n    if len(df[i].unique())<3:\n        ttest.append(i)\n    else:\n        anova.append(i)\n\nprint(ttest)\nprint(anova)","306e9788":"df1=df.iloc[1:1670,:]\ndf1.shape\nprint(stats.shapiro(df1['CLV']))\n# print(stats.jarque_bera(df['Months Since Last Claim']))","414a95b6":"num=df.select_dtypes(exclude=['object'])\nnum.columns","d6c38d11":"yes=df[df['Response']=='No']['CLV']\nno=df[df['Response']=='Yes']['CLV']\n\n","4cdf0b3c":"b=stats.mannwhitneyu(yes,no)\nb[1]","b696d6da":"female=df[df['Gender']=='F']['CLV']\nmale=df[df['Gender']=='M']['CLV']","193038d7":"f=stats.mannwhitneyu(female,male)","83cae5a4":"anova","fdf581ac":"df['State'].value_counts()","f77cbbed":"ca=df[df['State']=='California']['CLV']\nOr=df[df['State']=='Oregon']['CLV']\nAr=df[df['State']=='Arizona']['CLV']\nNe=df[df['State']=='Nevada']['CLV']\nWa=df[df['State']=='Washington']['CLV']","81b36946":"stats.kruskal(ca,Or,Ar,Ne,Wa)\n","76e8e1d7":"df['Coverage'].value_counts()","9c1191ce":"Ba=df[df['Coverage']=='Basic']['CLV']\nEx=df[df['Coverage']=='Extended']['CLV']\nPr=df[df['Coverage']=='Premium']['CLV']","06a830c5":"c=stats.kruskal(Ba,Ex,Pr)","bfeaa14d":"df['Education'].value_counts()","f01c24a0":"Ba=df[df['Education']=='Bachelor']['CLV']\nCo=df[df['Education']=='College']['CLV']\nHi=df[df['Education']=='High School or Below']['CLV']\nMa=df[df['Education']=='Master']['CLV']\nDa=df[df['Education']=='Doctor']['CLV']","381b6715":"d=stats.kruskal(Ba,Co,Hi,Ma,Da)","54a3c856":"sns.boxplot(y='CLV',x='Education',data=df)","506debdc":"\ndf['EmploymentStatus'].value_counts()","72dd5b07":"Ba=df[df['EmploymentStatus']=='Employed']['CLV']\nCo=df[df['EmploymentStatus']=='Unemployed']['CLV']\nHi=df[df['EmploymentStatus']=='Medical Leave']['CLV']\nMa=df[df['EmploymentStatus']=='Disabled']['CLV']\nDa=df[df['EmploymentStatus']=='Retired']['CLV']","5854ca5c":"e=stats.kruskal(Ba,Co,Hi,Ma,Da)","933bce2d":"df['Location Code'].value_counts()","3a348120":"Ba=df[df['Location Code']=='Suburban']['CLV']\nCo=df[df['Location Code']=='Rural']['CLV']\nHi=df[df['Location Code']=='Urban']['CLV']","14033c96":"g=stats.kruskal(Ba,Co,Hi)","1d15bf60":"df['Marital Status'].value_counts()","ee63f368":"Ba=df[df['Marital Status']=='Married']['CLV']\nCo=df[df['Marital Status']=='Single']['CLV']\nHi=df[df['Marital Status']=='Divorced']['CLV']","23d1c907":"h=stats.kruskal(Ba,Co,Hi)","7aeb65d9":"df['Number of Open Complaints'].value_counts()","0a226e41":"Ba=df[df['Number of Open Complaints']==0]['CLV']\nCo=df[df['Number of Open Complaints']==1]['CLV']\nHi=df[df['Number of Open Complaints']==2]['CLV']\nMa=df[df['Number of Open Complaints']==3]['CLV']\nDa=df[df['Number of Open Complaints']==4]['CLV']\nAs=df[df['Number of Open Complaints']==5]['CLV']","dea4a276":"i=stats.kruskal(Ba,Co,Hi,Ma,Da,As)\ne","2f685bed":"df['Number of Policies'].value_counts()","e511f86d":"Ba=df[df['Number of Policies']==1]['CLV']\nCo=df[df['Number of Policies']==2]['CLV']\nHi=df[df['Number of Policies']==3]['CLV']\n","0558fdb9":"j=stats.kruskal(Ba,Co,Hi)\nj","f30e3df0":"df['Policy Type'].value_counts()","9956b6bf":"Ba=df[df['Policy Type']=='Personal Auto']['CLV']\nCo=df[df['Policy Type']=='Corporate Auto']['CLV']\nHi=df[df['Policy Type']=='Special Auto']['CLV']","f26dbee6":"k=stats.kruskal(Ba,Co,Hi)","3bb996b6":"df['Policy'].value_counts()","397c4a11":"Ba=df[df['Policy']=='Personal L3']['CLV']\nCo=df[df['Policy']=='Personal L2']['CLV']\nHi=df[df['Policy']=='Personal L1']['CLV']\nMa=df[df['Policy']=='Corporate L3']['CLV']\nDa=df[df['Policy']=='Corporate L2']['CLV']\nCa=df[df['Policy']=='Corporate L1']['CLV']\ns1=df[df['Policy']=='Special L2']['CLV']\ns2=df[df['Policy']=='Special L3']['CLV']\ns3=df[df['Policy']=='Special L1']['CLV']","6935d295":"l=stats.kruskal(Ba,Co,Hi,Ma,Da,Ca,s1,s2,s3)","86e42301":"df['Renew Offer Type'].value_counts()","75001959":"Ba=df[df['Renew Offer Type']=='Offer1']['CLV']\nCo=df[df['Renew Offer Type']=='Offer2']['CLV']\nHi=df[df['Renew Offer Type']=='Offer3']['CLV']\nMa=df[df['Renew Offer Type']=='Offer4']['CLV']","072a7608":"m=stats.kruskal(Ba,Co,Hi,Ma)","c98cc3cb":"df['Sales Channel'].value_counts()","e336a35e":"Ba=df[df['Sales Channel']=='Agent']['CLV']\nCo=df[df['Sales Channel']=='Branch']['CLV']\nHi=df[df['Sales Channel']=='Call Center']['CLV']\nMa=df[df['Sales Channel']=='Web']['CLV']","7123c1ff":"n=stats.kruskal(Ba,Co,Hi,Ma)","93774d44":"anova","d90ca6ce":"df['Vehicle Class'].value_counts()","747d3b41":"Ba=df[df['Vehicle Class']=='Four-Door Car']['CLV']\nCo=df[df['Vehicle Class']=='Two-Door Car']['CLV']\nHi=df[df['Vehicle Class']=='SUV']['CLV']\nMa=df[df['Vehicle Class']=='Sports Car']['CLV']\nDa=df[df['Vehicle Class']=='Luxury SUV']['CLV']\nCa=df[df['Vehicle Class']=='Luxury Car']['CLV']","7a73fd18":"o=stats.kruskal(Ba,Co,Hi,Ma,Da,Ca)\no","7a7cb73f":"df['Vehicle Size'].value_counts()","b4a5e3da":"Ba=df[df['Vehicle Size']=='Medsize']['CLV']\nCo=df[df['Vehicle Size']=='Small']['CLV']\nHi=df[df['Vehicle Size']=='Large']['CLV']","6c6aaa13":"p=stats.kruskal(Ba,Co,Hi)\np[1]","e13c9896":"df['Months'].value_counts()","32f39492":"Ba=df[df['Months']==1]['CLV']\nCo=df[df['Months']==2]['CLV']","f96f8c86":"q=stats.kruskal(Ba,Co)\nq","9fba8d1b":"z=[a[1],b[1],c[1],d[1],e[1],f[1],g[1],h[1],i[1],j[1],k[1],l[1],m[1],n[1],o[1],p[1],q[1]]\nprint(len(z))\nz","7964f052":"print(len(col))\ncol\n\n","3d36d555":"df2=pd.DataFrame({'columns':col,'P_vlaue':z})\ndf2","4a907410":"df2['status']=df2['P_vlaue'].map(lambda x:'significant' if x<0.05 else 'not significant')\ndf2","94250581":"sns.barplot(df['State'],df['CLV'])\n","791da52c":"sns.barplot(df['Response'],df['CLV'])\n\n","8e9e6e35":"sns.barplot(df['Gender'],df['CLV'])","7a15a089":"sns.barplot(df['Location Code'],df['CLV'])","a12900bd":"sns.barplot(df['Policy Type'],df['CLV'])","3f793e33":"sns.barplot(df['Policy'],df['CLV'])","808ebb9e":"sns.barplot(df['Renew Offer Type'],df['CLV'])","3dcbd53d":"sns.barplot(df['Months'],df['CLV'])","68073579":"\nnum=df.select_dtypes(exclude=['object'])\nnum=num.drop('Effective To Date',1)\nnum.head()","c62aa722":"X=num.drop(['CLV'],axis=1)\ny=num['CLV']\n# xc=sm.add_constant(x)\nlin_reg=sm.OLS(y,X).fit()\nlin_reg.summary()                                                                     \n\n","5a324334":"a={'Numerical_column':['Income','Monthly Premium Auto','Months Since Last Claim','Months Since Policy Inception','Total Claim Amount'],\n  'P_value':[0.011,0.000,0.102,0.483,0.057],'Status':['Significant','Significant','Not_Significant','Not_Significant','Significant']}","8ed14753":"m=pd.DataFrame(a)\nm","b0bb6911":"num.head()","17abb306":"catg=df.select_dtypes(include=['object'])\ncatg=catg.drop('Customer',1)\ncatg.head()","d5307e49":"df1=pd.concat([catg,num],axis=1)\ndf.head()","63ecf883":"catg=pd.get_dummies(catg,drop_first=True)\ncatg.head()\n\n","4009e887":"df=pd.concat([catg,num],axis=1)\ndf.head()","0dd022c4":"X=df.drop(['CLV'],axis=1)\ny=num['CLV']\nxc=sm.add_constant(X)\nlin_reg=sm.OLS(y,xc).fit()\nlin_reg.summary()","b487d356":"import statsmodels.api as sm\nsm.stats.diagnostic.linear_rainbow(res=lin_reg, frac=0.5)","4c9d2c3d":"y_pred=lin_reg.predict()\n\nfig,ax=plt.subplots(figsize=(7,5))\nsns.regplot(x=y_pred,y=y,lowess=True,line_kws={'color':'red'})\nax.set_title('observed vs predicted')\nax.set(xlabel='Predicted',ylabel='Observed')\nplt.show()","28559817":"residuals = y_pred-y\nmean_of_residuals = np.mean(residuals)\nprint(f\"The mean of the residuals is {mean_of_residuals}\")","8d79a5a6":"y_pred=lin_reg.predict()\nresids=lin_reg.resid\nfig,ax=plt.subplots()\nsns.regplot(y_pred,resids,lowess=True,line_kws={'color':'red'})  ## lowess kind of linear rerrg.\nax.set_title('residual vs predicted')\nax.set(xlabel='prediacted',ylabel='residual')\nplt.show()","8b25d5b3":"import statsmodels.stats.api as sms\nname=['F-statistic','p-value']\ntest=sms.het_goldfeldquandt(lin_reg.resid,lin_reg.model.exog)\n\ntest\n","a07515b5":"plt.figure(figsize=(7,5))\np = sns.distplot(residuals,kde=True)\np = plt.title('Normality of error terms\/residuals')","112e9e37":"from scipy import stats\nprint(stats.jarque_bera(lin_reg.resid))","2a63f54b":"from statsmodels.stats.stattools import durbin_watson\ndurbin_watson(lin_reg.resid)","f7194819":"import statsmodels.tsa.api as smt\nplt.figure(figsize=(7,5))\nacf=smt.graphics.plot_acf(lin_reg.resid,lags=40)","9c5d40eb":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\nvif = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\na=pd.DataFrame({'vif': vif}, index=X.columns)\na","4d9baaea":"df.head()\n","98b02e74":"df.shape","37c188bb":"X=df.drop(['CLV','Policy Type_Personal Auto','Policy Type_Special Auto','Policy_Personal L1','Policy_Personal L2',\n'Policy_Personal L3',\n'Policy_Special L1',\n'Policy_Special L2',\n'Policy_Special L3',],axis=1)\ny=df['CLV']\n# xc=sm.add_constant(x)\nlin_reg=sm.OLS(y,X).fit()\nlin_reg.summary()","3b4e1693":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor","b5779aa7":"sns.distplot(df['CLV'])","b3c6cf72":"a=np.log(df['CLV'])\nsns.distplot(a)","462e791c":"b = df['CLV'].transform(lambda X: 1\/X)\nsns.distplot(b)\nb","f5705d95":"b = df['CLV'].transform(lambda X:X**0.10)\nsns.distplot(b)","34ef452c":"sns.boxplot(df['Monthly Premium Auto'])","384f0c1d":"sns.distplot(df['Monthly Premium Auto'])","a0f791ac":"a=np.log(df['Monthly Premium Auto'])\nsns.distplot(a)","a00fa2e9":"b = df['Monthly Premium Auto'].transform(lambda X:X**0.1)\nsns.distplot(b)","3364d412":"X=df.drop(['CLV','Policy Type_Personal Auto','Policy Type_Special Auto','Policy_Personal L1','Policy_Personal L2','Policy_Personal L3',\n'Policy_Special L1','Policy_Special L2','Policy_Special L3'],1)\ny=df['CLV']          \ny =np.log(y)\nx_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=42)","fdfa756d":"lr=LinearRegression()\nlr.fit(x_train,y_train)\n\ny_pred=lr.predict(x_test)","6cc45de1":"\nprint('-----Log---- ')\nprint('RMES:',np.sqrt(mean_squared_error(y_test,y_pred)))\nprint('R-squared:',r2_score(y_test,y_pred)) \nprint('After Anti Log')\nprint('RMSE : ',np.sqrt(mean_squared_error(np.exp(y_test),np.exp(y_pred))))\nprint('r2_score : ',r2_score(np.exp(y_test),np.exp(y_pred)))\n","cae1e00d":"print('After Anti Log')\nprint('RMSE : ',np.sqrt(mean_squared_error(np.exp(y_test),np.exp(y_pred))))\nprint('r2_score : ',r2_score(np.exp(y_test),np.exp(y_pred)))","e9c29625":"y_pred_train=lr.predict(x_train)\nprint('RMES:',np.sqrt(mean_squared_error(y_train,y_pred_train)))\nprint('R-squared:',r2_score(y_train,y_pred_train)) ","70bbe5e4":"X.head()","39002e41":"from sklearn.feature_selection import RFE\n","9dc49dd5":"model=LinearRegression()\nX=df.drop(['CLV','Policy Type_Personal Auto','Policy Type_Special Auto','Policy_Personal L1','Policy_Personal L2','Policy_Personal L3',\n'Policy_Special L1','Policy_Special L2','Policy_Special L3'],1)\ny=df['CLV']\n\n### initilize rfe\nrfe=RFE(model,10)\nrfe.fit(x_train,y_train)\n\n\nprint(rfe.support_)\nprint(rfe.ranking_)","65b7c95e":"#no of features\nnof_list=np.arange(1,48)            \nhigh_score=0\n#Variable to store the optimum features\nnof=0           \nscore_list =[]\nfor n in range(len(nof_list)):\n    X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, random_state = 0)\n    model = LinearRegression()\n    rfe = RFE(model,nof_list[n])\n    X_train_rfe = rfe.fit_transform(X_train,y_train)\n    X_test_rfe = rfe.transform(X_test)\n    model.fit(X_train_rfe,y_train)\n    score = model.score(X_test_rfe,y_test)\n    score_list.append(score)\n    if(score>high_score):\n        high_score = score\n        nof = nof_list[n]\nprint(\"Optimum number of features: %d\" %nof)\nprint(\"Score with %d features: %f\" % (nof, high_score))","32447063":"\n\nX=df.drop(['CLV','Policy Type_Personal Auto','Policy Type_Special Auto','Policy_Personal L1','Policy_Personal L2','Policy_Personal L3',\n'Policy_Special L1','Policy_Special L2','Policy_Special L3'],1)\ny=df['CLV']\nx_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=42)\nnof_cols=np.arange(1,49)\n\nmodel=LinearRegression()\nscore_list=[]\n\nfor n in range(48):\n    rfe=RFE(model,n+1)\n    rfe.fit(x_train,y_train)\n    y_pred=rfe.predict(x_test)\n    score=r2_score(y_test,y_pred)\n    score_list.append(score)","2ae31487":"plt.plot(nof_cols,score_list)\nplt.show()","8cf67c4c":"# plt.plot(nof_cols,score_list)\nrfe=RFE(model,43)\nrfe.fit(x_train,y_train)\npd.DataFrame(list(zip(X.columns,rfe.support_,rfe.ranking_)),columns=['col','select','rank'])","837a28ee":"y_pred=rfe.predict(x_test)\nprint('R2:',r2_score(y_test,y_pred))\nprint('Rmse:',np.sqrt(mean_squared_error(y_test,y_pred)))","f3f34d86":"df1.head()","f29c705a":"catg=df1.select_dtypes(include=['object'])\ncatg.head()","fadc840e":"num1=df1.select_dtypes(exclude=['object'])\nnum1.head()","60d733df":"from sklearn.preprocessing import LabelEncoder\n","b84a71a5":"cat=catg.apply(LabelEncoder().fit_transform)\ncat.head()","388719dc":"df1=pd.concat([cat,num1],axis=1)\ndf1.head()","50a02e4b":"X=df1.drop(['CLV','State','Response','Gender','Location Code','Policy Type','Months','Policy','Renew Offer Type','Months Since Policy Inception'],1)\ny=df1['CLV']\nx_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=42)","22fbf5c7":"dt = DecisionTreeRegressor()\ndt.fit(x_train,y_train)\n\n\ny_pred=dt.predict(x_test)","bd09b449":"print('RMES:',np.sqrt(mean_squared_error(y_test,y_pred)))\nprint('R-squared:',r2_score(y_test,y_pred)) ","11c7757c":"from scipy.stats import zscore\n\nnum2=num1.apply(zscore)\nnum2.head()","8dcbd31a":"sns.distplot(num2['Monthly Premium Auto'])","6734f07a":"df2=pd.concat([cat,num2],axis=1)\ndf2.head()","f1026565":"X=df2.drop(['CLV','State','Response','Gender','Location Code','Policy Type','Months'],1)\ny=df2['CLV']\n# y=np.log(y)\nx_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.30,random_state=42)","44a1e327":"dt = DecisionTreeRegressor()\ndt.fit(x_train,y_train)\n\ny_pred=dt.predict(x_test)","72e66efa":"print('RMES:',np.sqrt(mean_squared_error(y_test,y_pred)))\nprint('R-squared:',r2_score(y_test,y_pred)) ","14d6ede2":"rf = RandomForestRegressor()\n\nrf.fit(x_train,y_train)\n\ny_pred=rf.predict(x_test)\nprint('RMES:',np.sqrt(mean_squared_error(y_test,y_pred)))\nprint('R-squared:',r2_score(y_test,y_pred)) ","b72e851d":"from sklearn.model_selection import GridSearchCV\nrf = RandomForestRegressor()\nparams = {\n        'max_depth' : [10,20,30],\n        \n        'n_estimators' : [100,200,50],\n        \n        \"bootstrap\" : [True, False],\n    \n        'max_features': ['auto', 'sqrt', 'log2']\n        \n        }\n\ngrid = GridSearchCV(estimator = rf, param_grid=params, cv = 5, n_jobs = -1, return_train_score = True )\ngrid.fit(x_train,y_train)\ngrid.best_params_","ed8ea817":"rf = RandomForestRegressor(bootstrap= True,max_depth= 30,max_features= 'auto',n_estimators= 300)\n\nrf.fit(x_train,y_train)\n\ny_pred=rf.predict(x_test)\nprint('RMES:',np.sqrt(mean_squared_error(y_test,y_pred)))\nprint('R-squared:',r2_score(y_test,y_pred)) ","6e320ad0":"from sklearn.ensemble import BaggingRegressor,GradientBoostingRegressor ","0542f7a7":"br = BaggingRegressor()\n\nbr.fit(x_train,y_train)\n\ny_pred=br.predict(x_test)\nprint('RMES:',np.sqrt(mean_squared_error(y_test,y_pred)))\nprint('R-squared:',r2_score(y_test,y_pred))","de45b4d0":"br = GradientBoostingRegressor(learning_rate=0.1,n_estimators=200)\n\nbr.fit(x_train,y_train)\n\ny_pred=br.predict(x_test)\nprint('RMES:',np.sqrt(mean_squared_error(y_test,y_pred)))\nprint('R-squared:',r2_score(y_test,y_pred))","763f3f18":"X=df1.drop(['CLV','State','Response','Gender','Location Code','Policy'],axis=1)\ny=df1['CLV']\n# xc=sm.add_constant(x)\nlin_reg=sm.OLS(y,X).fit()\nlin_reg.summary()","3f9784fd":"num1.head()\n","a0665ec2":"num3=num1[['Income','Monthly Premium Auto','Months Since Last Claim','Months Since Policy Inception','Total Claim Amount','CLV']]\nnum3.head()","fb6bde06":"cat.head()","c1e2ec8c":"df4=pd.concat([cat,num3],axis=1)\ndf4.head()","ef5cb85e":"n_iterations = 10\nn_size = int(len(df4) * 0.50)\nvalues = df4.values","b474e0ad":"from sklearn.utils import resample\n\n# run bootstrap\nstats = list()\nfor i in range(n_iterations):\n    # prepare train and test sets\n    train = resample(values, n_samples=n_size)\n    test = np.array([x for x in values if x.tolist() not in train.tolist()])\n    # fit model\n    model =RandomForestRegressor()\n    model.fit(train[:,:-1], train[:,-1])\n    # evaluate model\n    predictions = model.predict(test[:,:-1])\n    score = r2_score(test[:,-1], predictions)\n    print(score)\n    stats.append(score)","62e61c08":"plt.hist(stats)\nplt.show()\n# confidence intervals\nalpha = 0.95\np = ((1.0-alpha)\/2.0) * 100\nlower = max(0.0, np.percentile(stats, p))\np = (alpha+((1.0-alpha)\/2.0)) * 100\nupper = min(1.0, np.percentile(stats, p))\nprint('%.1f confidence interval %.1f%% and %.1f%%' % (alpha*100, lower*100, upper*100))","66ac09db":"- we can see that there is high VIF in column Policy & policy type\n- Also we have seen in statistical apprche these veriable is not significant to predict target \n- hence from above 2 conclusion we can simply remove them","d0cbe9f3":"### Outlier treatment","1f53606e":"- so therefore we go with non-parametric test","dd98d089":"- As mean of residual is not so much large so we can consider that linearity is present","af63b66f":"### 1 way anova","5d7302f8":"1) No Auto correlation.\n\nTest needed : Durbin- Watson Test.\n\nIt's value ranges from 0-4. If the value of Durbin- Watson is Between 0-2, it's known as Positive Autocorrelation.\nIf the value ranges from 2-4, it is known as Negative autocorrelation.\nIf the value is exactly 2, it means No Autocorrelation.\nFor a good linear model, it should have low or no autocorrelation.\nwe can see here the values of dublin watson test (test for normality): 1.240 (POSITIVE AUTO-CORRELATION)\n\nFrom the graph below, we can easily see that there is somewhat Positive autocorrelation.","a9db2bee":"## Monthly Premium Auto","e3da0292":"- we can remove 1 data point from our depended veriable just because of outlier treatment, that maximum point meight affect our model","ad2b7f5b":"### statics approch to chcek which veriable is important","495830dc":"### No Autocorrelation","b580000a":"- As pvalue is less tha alpha, which we can consider 5% so therefore we reject H0 and we conculed that our traget verible is     not normally distributed","ae0d2457":"### ASSUMPTIONS OF LINEAR REGRESSION.\n### Linearity","6e83065f":"- as our dependend veribale is continuous & which is not fallow normally distribution as we seen visually but we do one more test to verify it again","852c10a8":"## Total cliam Amount","ca90b2c0":"- From above boxplot we can observed that there are outlier in column Total claim amount & monthly premium auto","ec0f4ed9":"- As we see customer life time value is not normally distributed so we go with manwitney test","3b969cff":"### Continues veriable","6ac03767":"### Homoscedasticity_test","cd248914":"- As we see there is only 5 & 9 category in columns, Number of open compliant & Number of policies. so we convert that numerical datatype into Object\n","45bd3c88":"- we do some practical to chcek whether our model work proper if we remove this outlier ","f5888319":"## Decision Tree","1fbbddce":"- As we can see p_value less than aphla that means our Null hypothesis is rejected \n- Thus we reject the null hypothesis that the error terms are normally distributed.","e91966ba":"- AS we got p_value greter than aplha(0.05) & we can also see visually that our data is linear","f085281c":"- from above observation we can say that except columns,months since last claim & months since policy inception are not signoificant in continuous nature","2d4720c3":"## RFE","d3914831":"We can also use two statistical tests: Breusch-Pagan and Goldfeld-Quandt. In both of them the null hypothesis assumes homoscedasticity and a p-value below a certain level (like 0.05) indicates we should reject the null in favor of heteroscedasticity.\n\nHere, p value is less than 0.05 so, it is homoscedasticity distribution.\n\n\ud835\udc3b0:\ud835\udf0e\ud835\udc62\ud835\udc56 \ud835\udc56\ud835\udc60 \ud835\udc50\ud835\udc5c\ud835\udc5b\ud835\udc60\ud835\udc61\ud835\udc4e\ud835\udc5b\ud835\udc61 \ud835\udc4e\ud835\udc50\ud835\udc5f\ud835\udc5c\ud835\udc60\ud835\udc60 \ud835\udc61\u210e\ud835\udc52 \ud835\udc5f\ud835\udc4e\ud835\udc5b\ud835\udc54\ud835\udc52 \ud835\udc5c\ud835\udc53 \ud835\udc51\ud835\udc4e\ud835\udc61\ud835\udc4e\n \n\ud835\udc3b\ud835\udc4e:\ud835\udf0e\ud835\udc62\ud835\udc56 \ud835\udc56\ud835\udc60 \ud835\udc5b\ud835\udc5c\ud835\udc61 \ud835\udc50\ud835\udc5c\ud835\udc5b\ud835\udc60\ud835\udc61\ud835\udc4e\ud835\udc5b\ud835\udc61 \ud835\udc4e\ud835\udc50\ud835\udc5f\ud835\udc5c\ud835\udc60\ud835\udc60 \ud835\udc61\u210e\ud835\udc52 \ud835\udc5f\ud835\udc4e\ud835\udc5b\ud835\udc54\ud835\udc52 \ud835\udc5c\ud835\udc53 \ud835\udc51\ud835\udc4e\ud835\udc61\ud835\udc4e","3fb17250":"- As we pvalue is greater than aplha therfore accept H0 &\n- the state will not impact to predict customer lifetime values","6741f5c2":"### NO MULTICOLLINEARITY","2680453c":"- goldfedquandt test fro homoscadestticity.since prob is much lower than aplha we reject the null hypothesis and accept H1   that residual are hetroscadictic","19849feb":"- As we can see that Durbin_watson value is 1.955 so there is no autocorrelation found ","dda3e960":"## Random Forest with hyperparameter","cf5263e2":"### Expolary Data Analysis","a88fd414":"- we test above two features with non-Paramteric unpaired ttest and  we concluded that those 2 faetures is not significant \n  to predict traget ","4ff93d12":"### Random Forest","43729acf":"### Feature Engineering","6d2dfbb9":"### Test of normality of residuals"}}