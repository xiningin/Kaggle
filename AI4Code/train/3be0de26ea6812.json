{"cell_type":{"040d9d55":"code","3278ee06":"code","1e3734b0":"code","523742fe":"code","54ac93ad":"code","4c59c805":"code","264a90d2":"code","6beb8f85":"code","5fae49e7":"code","50000748":"code","c85e3a67":"code","0d2fea56":"markdown","60b165d7":"markdown"},"source":{"040d9d55":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\"\"\"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\"\"\"\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3278ee06":"#Load data paths\ntrain_image_path = \"\/kaggle\/input\/iwildcam-2020-fgvc7\/train\/\"\ntest_image_path = \"\/kaggle\/input\/iwildcam-2020-fgvc7\/test\/\"\ntrain_annotations_path = \"\/kaggle\/input\/iwildcam-2020-fgvc7\/iwildcam2020_train_annotations.json\"","1e3734b0":"#Read annotations JSON\n\nimport json\n\nwith open(train_annotations_path) as json_file:\n    train_annotations = json.load(json_file)","523742fe":"#print(train_annotations.keys())\n#print(train_annotations[\"annotations\"])","54ac93ad":"categories = pd.DataFrame.from_dict(train_annotations[\"categories\"])\ncategories","4c59c805":"train_annotations[\"images\"][1]\ndata = pd.DataFrame.from_dict(train_annotations[\"images\"])\ncategory_annotations = pd.DataFrame.from_dict(train_annotations[\"annotations\"])\ndata = data.rename(columns = {\"id\": \"image_id\"})\ndata = data.merge(category_annotations, on = (\"image_id\"))\ndata = data.drop(columns = [\"id\", \"count\", \"frame_num\", \"seq_num_frames\", \"seq_id\"], axis = 1)\ndata","264a90d2":"import matplotlib.pyplot as plt\n\nimg_path = (train_image_path + data[\"file_name\"][1])\nimg = plt.imread((train_image_path + data[\"file_name\"][1]))\nplt.imshow(img)","6beb8f85":"from torch.utils.data import Dataset, DataLoader\nimport cv2\nimport torchvision\nfrom torchvision import transforms\nimport tensorflow as tf\n\n\ndef transformer():\n    return transforms.Compose([\n        transforms.ToTensor()\n    ])\n\nclass DataCreation(Dataset):\n    def __init__(self, data, transforms = None):\n        super().__init__()\n\n        self.transform = transformer\n        self.image_id = data[\"image_id\"]\n\n    def __len__(self):\n        return len(self.image_id)\n    \n    def __getitem__(self,idx : int):\n        image_id = self.image_id[idx]\n        image = cv2.imread(train_image_path + image_id + \".jpg\", cv2.IMREAD_COLOR)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        image \/= 255.0\n        \n        if self.transform:\n            augmented = self.transform(image=image)\n            image = augmented[\"image\"]\n            \n        return image_id, image\n    \n\ndef collate_fn(batch):\n    return tuple(zip(*batch))\n\ntrain_dataset = DataCreation(data, transformer())\ntrain_loader = DataLoader(train_dataset, batch_size = 4, collate_fn = collate_fn)","5fae49e7":"import torch\nfrom torch import nn\nfrom torch import optim\nimport torch.nn.functional as F\nfrom torchvision import datasets, transforms, models\n\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() \n                                  else \"cpu\")\nmodel = models.resnet50(pretrained=True)","50000748":"for param in model.parameters():\n    param.requires_grad = False\n    \nmodel.fc = nn.Sequential(nn.Linear(2024, 512),\n                                 nn.ReLU(),\n                                 nn.Dropout(0.2),\n                                 nn.Linear(512, 10),\n                                 nn.LogSoftmax(dim=1))\ncriterion = nn.NLLLoss()\noptimizer = optim.Adam(model.fc.parameters(), lr=0.003)\nmodel.to(device)","c85e3a67":"epochs = 1\nsteps = 0\nrunning_loss = 0\nprint_every = 10\ntrain_losses, test_losses = [], []\nfor epoch in range(epochs):\n    for image, image_id in train_loader:\n        steps += 1\n        image_id = (image_id + \".jpg\")\n        image_id = image_id.to(device)\n        image = image.to(device)\n    \n        optimizer.zero_grad()\n        logps = model.forward(image)\n        loss = criterion(logps, image_id)\n        loss.backward()\n        optimizer.step()\n        running_loss += loss.item()\n        \n        if steps % print_every == 0:\n            test_loss = 0\n            accuracy = 0\n            model.eval()\n            with torch.no_grad():\n                for inputs, labels in test_loader:\n                    inputs, labels = inputs.to(device), labels.to(device)\n                    logps = model.forward(inputs)\n                    batch_loss = criterion(logps, labels)\n                    test_loss += batch_loss.item()\n                    \n                    ps = torch.exp(logps)\n                    top_p, top_class = ps.topk(1, dim=1)\n                    equals = top_class == labels.view(*top_class.shape)\n                    accuracy += torch.mean(equals.type(torch.FloatTensor)).item()\n            train_losses.append(running_loss\/len(trainloader))\n            test_losses.append(test_loss\/len(testloader))                    \n            print(f\"Epoch {epoch+1}\/{epochs}.. \"\n                  f\"Train loss: {running_loss\/print_every:.3f}.. \"\n                  f\"Test loss: {test_loss\/len(testloader):.3f}.. \"\n                  f\"Test accuracy: {accuracy\/len(testloader):.3f}\")\n            running_loss = 0\n            model.train()\ntorch.save(model, 'aerialmodel.pth')","0d2fea56":"Trains a Resent50 model on the GPU and saves as a pth.","60b165d7":"# Create Model"}}