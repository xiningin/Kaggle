{"cell_type":{"6afbc6be":"code","bbf327ec":"code","6a319eaf":"code","a0a28f1c":"code","1ab8f736":"code","ffc42985":"code","6eb80675":"code","d868fee6":"code","19f26554":"code","58ef008e":"code","4c96509e":"code","806a2e25":"code","e8e8b66f":"code","99df5c58":"code","ebf26259":"code","009a0259":"code","9e1d9070":"code","43d39edc":"code","33c26da1":"code","703a8a6f":"code","4f53834b":"code","5fd0bbaa":"code","5d074edd":"code","4fb12490":"code","ed92e223":"code","591de084":"code","b5f33022":"code","fc3d56a9":"code","c69d89ae":"code","4e8e305f":"code","128902c9":"code","3d14b683":"code","95ae7d16":"code","1fb08b65":"code","31dc6529":"markdown","d21d260c":"markdown","70fe80c2":"markdown","0d995526":"markdown","6dca4566":"markdown","7a9f78b8":"markdown","585ace0e":"markdown","10218ee7":"markdown","420b6575":"markdown","50d0aae7":"markdown","f215c53d":"markdown","e6ca0995":"markdown","694c3629":"markdown","783267b4":"markdown","66419a41":"markdown","982a9cc9":"markdown","f36cead5":"markdown","2858c61d":"markdown","0555960e":"markdown","9cf513cb":"markdown","c98a6a20":"markdown","f8c2f742":"markdown","d2f11926":"markdown","bb6f6bb4":"markdown","56770c95":"markdown","beae52ec":"markdown","e7f66580":"markdown","640f1bdb":"markdown","89d7f4fc":"markdown","e18ac2a7":"markdown","7fd530d9":"markdown","9e477398":"markdown","723b65cf":"markdown","23f50617":"markdown","c7014c73":"markdown","b5664e97":"markdown","9751eb62":"markdown","2b60e67e":"markdown","872e99fa":"markdown","49b4bb9d":"markdown","80a181ff":"markdown","06e1e018":"markdown","e75dcd52":"markdown","d40e8faf":"markdown","74c15215":"markdown","0257eb89":"markdown","b13bfcf0":"markdown","e14dd662":"markdown"},"source":{"6afbc6be":"'''Import basic modules.'''\nimport pandas as pd\nimport numpy as np\n\n\n'''Customize visualization\nSeaborn and matplotlib visualization.'''\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"whitegrid\")\n%matplotlib inline\n\n'''Plotly visualization .'''\nimport plotly.offline as py\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.graph_objs as go\npy.init_notebook_mode(connected = True) # Required to use plotly offline in jupyter notebook\n\n'''missing data visualisation'''\nimport missingno as msno\n\nimport cufflinks as cf #importing plotly and cufflinks in offline mode  \nimport plotly.offline  \ncf.go_offline()  \ncf.set_config_file(offline=False, world_readable=True)\n\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import CountVectorizer\n\n'''Display markdown formatted output like bold, italic bold etc.'''\nfrom IPython.core.display import display, HTML, Javascript\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\ndef bold(string):\n    display(Markdown(string))","bbf327ec":"df = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")","6a319eaf":"df.info()","a0a28f1c":"df.shape","1ab8f736":"df.isnull().sum()","ffc42985":"# Visualize the number of missing values as a bar chart\nmsno.bar(df);","6eb80675":"df[\"date_added\"] = pd.to_datetime(df['date_added'])\ndf['year_added'] = df['date_added'].dt.year\ndf['month_added'] = df['date_added'].dt.month\n\ndf['season_count'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" in x['duration'] else \"\", axis = 1)\ndf['duration'] = df.apply(lambda x : x['duration'].split(\" \")[0] if \"Season\" not in x['duration'] else \"\", axis = 1)","d868fee6":"df.head()","19f26554":"from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nplt.rcParams['figure.figsize'] = (13, 13)\nwordcloud = WordCloud(stopwords=STOPWORDS,background_color = 'black', width = 1000,  height = 1000, max_words = 121).generate(' '.join(df['title']))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.title('Most Popular Words in Title',fontsize = 30)\nplt.show()","58ef008e":"'''A Function To Plot Pie Plot using Plotly'''\n\ndef pie_plot(cnt_srs, colors, title):\n    labels=cnt_srs.index\n    values=cnt_srs.values\n    trace = go.Pie(labels=labels, \n                   values=values, \n                   title=title, \n                   hoverinfo='percent+value', \n                   textinfo='percent',\n                   textposition='inside',\n                   hole=0.7,\n                   showlegend=True,\n                   marker=dict(colors=colors,\n                               line=dict(color='#000000',\n                                         width=2),\n                              )\n                  )\n    return trace\n\n\npy.iplot([pie_plot(df['type'].value_counts(), ['red', 'blue'], 'Content Type')])","4c96509e":"d1 = df[df[\"type\"] == \"TV Show\"]\nd2 = df[df[\"type\"] == \"Movie\"]\n\ncol = \"year_added\"\n\nvc1 = d1[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = d2[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Scatter(\n                    x=vc1[col], \n                    y=vc1[\"count\"], \n                    name=\"TV Shows\", \n                    marker=dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n\ntrace2 = go.Scatter(\n                    x=vc2[col], \n                    y=vc2[\"count\"], \n                    name=\"Movies\", \n                    marker= dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(hovermode= 'closest', title = 'Content added over the years' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Count'),template= \"plotly_dark\")\nfig = go.Figure(data = [trace1, trace2], layout=layout)\nfig.show()","806a2e25":"temp_df = df['rating'].value_counts().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df['index'],\n                y = temp_df['rating'],\n                marker = dict(color = 'rgb(255,165,0)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'MOST OF PROGRAMME ON NEYFLIX IS TV-14 & TV-MA RATED' , xaxis = dict(title = 'Rating'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\n\ndef pie_plot(cnt_srs, title):\n    labels=cnt_srs.index\n    values=cnt_srs.values\n    trace = go.Pie(labels=labels, \n                   values=values, \n                   title=title, \n                   hoverinfo='percent+value', \n                   textinfo='percent',\n                   textposition='inside',\n                   hole=0.7,\n                   showlegend=True,\n                   marker=dict(colors=plt.cm.viridis_r(np.linspace(0, 1, 14)),\n                               line=dict(color='#000000',\n                                         width=2),\n                              )\n                  )\n    return trace\n\npy.iplot([pie_plot(df['rating'].value_counts(), 'Content Type')])","e8e8b66f":"df1 = df[df[\"type\"] == \"TV Show\"]\ndf2 = df[df[\"type\"] == \"Movie\"]\n\ntemp_df1 = df1['rating'].value_counts().reset_index()\ntemp_df2 = df2['rating'].value_counts().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['index'],\n                y = temp_df1['rating'],\n                name=\"TV Shows\",\n                marker = dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n# create trace2 \ntrace2 = go.Bar(\n                x = temp_df2['index'],\n                y = temp_df2['rating'],\n                name = \"Movies\",\n                marker = dict(color = 'rgb(26, 118, 255)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\n\n\nlayout = go.Layout(template= \"plotly_dark\",title = 'RATING BY CONTENT TYPE' , xaxis = dict(title = 'Rating'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1, trace2], layout = layout)\nfig.show()","99df5c58":"import squarify\ndf['Genres'] = df['listed_in'].str.extract('([A-Z]\\w{2,})', expand=True)\ntemp_df = df['Genres'].value_counts().reset_index()\n\nsizes=np.array(temp_df['Genres'])\nlabels=temp_df['index']\ncolors = [plt.cm.Paired(i\/float(len(labels))) for i in range(len(labels))]\nplt.figure(figsize=(12,8), dpi= 100)\nsquarify.plot(sizes=sizes, label=labels, color = colors, alpha=.5, edgecolor=\"black\", linewidth=3, text_kwargs={'fontsize':15})\nplt.title('Treemap of Genres of Netflix Show', fontsize = 15)\nplt.axis('off')\nplt.show()","ebf26259":"temp_df = df['Genres'].value_counts().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df['index'],\n                y = temp_df['Genres'],\n                marker = dict(color = 'rgb(255,165,0)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'GENRE DISTRIBUTION' , xaxis = dict(title = 'Genres'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","009a0259":"d2 = df[df[\"type\"] == \"Movie\"]\nd2['duration']=d2['duration'].str.replace(' min','')\nd2['duration']=d2['duration'].astype(str).astype(int)","9e1d9070":"import plotly.figure_factory as ff\nx1 = d2['duration'].fillna(0.0).astype(float)\nfig = ff.create_distplot([x1], ['a'], bin_size=0.7, curve_type='normal', colors=[\"#6ad49b\"])\nfig.update_layout(title_text='Distplot with Normal Distribution')\nfig.show()","43d39edc":"duration_year = d2.groupby(['release_year']).mean()\nduration_year = duration_year.sort_index()\n\ntrace1 = go.Scatter(\n                    x=duration_year.index, \n                    y=duration_year.duration.values, \n                    name=\"Duration of movies\", \n                    marker=dict(color = 'rgb(249, 6, 6)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\n\nlayout = go.Layout(hovermode= 'closest', title = 'Duration of Movies over the years' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Mean Duration'),template= \"plotly_dark\")\nfig = go.Figure(data = [trace1], layout=layout)\nfig.show()","33c26da1":"from sklearn.preprocessing import MultiLabelBinarizer # Similar to One-Hot Encoding\n\ndata= df['listed_in'].astype(str).apply(lambda s : s.replace('&',' ').replace(',', ' ').split()) \n\ntest = data\nmlb = MultiLabelBinarizer()\nres = pd.DataFrame(mlb.fit_transform(test), columns=mlb.classes_)\ncorr = res.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nf, ax = plt.subplots(figsize=(35, 34))\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()","703a8a6f":"temp_df1 = df['release_year'].value_counts().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['index'],\n                y = temp_df1['release_year'],\n                marker = dict(color = 'rgb(255,165,0)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)))\nlayout = go.Layout(template= \"plotly_dark\",title = 'CONTENT RELEASE OVER THE YEAR' , xaxis = dict(title = 'Rating'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","4f53834b":"df1 = df[df[\"type\"] == \"TV Show\"]\ndf2 = df[df[\"type\"] == \"Movie\"]\n\ntemp_df1 = df1['release_year'].value_counts().reset_index()\ntemp_df2 = df2['release_year'].value_counts().reset_index()\n\n\n# create trace1\ntrace1 = go.Bar(\n                x = temp_df1['index'],\n                y = temp_df1['release_year'],\n                name=\"TV Shows\",\n                marker = dict(color = 'rgb(249, 6, 6)'))\n# create trace2 \ntrace2 = go.Bar(\n                x = temp_df2['index'],\n                y = temp_df2['release_year'],\n                name = \"Movies\",\n                marker = dict(color = 'rgb(26, 118, 255)'))\n\n\nlayout = go.Layout(template= \"plotly_dark\",title = 'CONTENT RELEASE OVER THE YEAR BY CONTENT TYPE' , xaxis = dict(title = 'Year'), yaxis = dict(title = 'Count'))\nfig = go.Figure(data = [trace1, trace2], layout = layout)\nfig.show()","5fd0bbaa":"country_codes = {'afghanistan': 'AFG',\n 'albania': 'ALB',\n 'algeria': 'DZA',\n 'american samoa': 'ASM',\n 'andorra': 'AND',\n 'angola': 'AGO',\n 'anguilla': 'AIA',\n 'antigua and barbuda': 'ATG',\n 'argentina': 'ARG',\n 'armenia': 'ARM',\n 'aruba': 'ABW',\n 'australia': 'AUS',\n 'austria': 'AUT',\n 'azerbaijan': 'AZE',\n 'bahamas': 'BHM',\n 'bahrain': 'BHR',\n 'bangladesh': 'BGD',\n 'barbados': 'BRB',\n 'belarus': 'BLR',\n 'belgium': 'BEL',\n 'belize': 'BLZ',\n 'benin': 'BEN',\n 'bermuda': 'BMU',\n 'bhutan': 'BTN',\n 'bolivia': 'BOL',\n 'bosnia and herzegovina': 'BIH',\n 'botswana': 'BWA',\n 'brazil': 'BRA',\n 'british virgin islands': 'VGB',\n 'brunei': 'BRN',\n 'bulgaria': 'BGR',\n 'burkina faso': 'BFA',\n 'burma': 'MMR',\n 'burundi': 'BDI',\n 'cabo verde': 'CPV',\n 'cambodia': 'KHM',\n 'cameroon': 'CMR',\n 'canada': 'CAN',\n 'cayman islands': 'CYM',\n 'central african republic': 'CAF',\n 'chad': 'TCD',\n 'chile': 'CHL',\n 'china': 'CHN',\n 'colombia': 'COL',\n 'comoros': 'COM',\n 'congo democratic': 'COD',\n 'Congo republic': 'COG',\n 'cook islands': 'COK',\n 'costa rica': 'CRI',\n \"cote d'ivoire\": 'CIV',\n 'croatia': 'HRV',\n 'cuba': 'CUB',\n 'curacao': 'CUW',\n 'cyprus': 'CYP',\n 'czech republic': 'CZE',\n 'denmark': 'DNK',\n 'djibouti': 'DJI',\n 'dominica': 'DMA',\n 'dominican republic': 'DOM',\n 'ecuador': 'ECU',\n 'egypt': 'EGY',\n 'el salvador': 'SLV',\n 'equatorial guinea': 'GNQ',\n 'eritrea': 'ERI',\n 'estonia': 'EST',\n 'ethiopia': 'ETH',\n 'falkland islands': 'FLK',\n 'faroe islands': 'FRO',\n 'fiji': 'FJI',\n 'finland': 'FIN',\n 'france': 'FRA',\n 'french polynesia': 'PYF',\n 'gabon': 'GAB',\n 'gambia, the': 'GMB',\n 'georgia': 'GEO',\n 'germany': 'DEU',\n 'ghana': 'GHA',\n 'gibraltar': 'GIB',\n 'greece': 'GRC',\n 'greenland': 'GRL',\n 'grenada': 'GRD',\n 'guam': 'GUM',\n 'guatemala': 'GTM',\n 'guernsey': 'GGY',\n 'guinea-bissau': 'GNB',\n 'guinea': 'GIN',\n 'guyana': 'GUY',\n 'haiti': 'HTI',\n 'honduras': 'HND',\n 'hong kong': 'HKG',\n 'hungary': 'HUN',\n 'iceland': 'ISL',\n 'india': 'IND',\n 'indonesia': 'IDN',\n 'iran': 'IRN',\n 'iraq': 'IRQ',\n 'ireland': 'IRL',\n 'isle of man': 'IMN',\n 'israel': 'ISR',\n 'italy': 'ITA',\n 'jamaica': 'JAM',\n 'japan': 'JPN',\n 'jersey': 'JEY',\n 'jordan': 'JOR',\n 'kazakhstan': 'KAZ',\n 'kenya': 'KEN',\n 'kiribati': 'KIR',\n 'north korea': 'PRK',\n 'south korea': 'KOR',\n 'kosovo': 'KSV',\n 'kuwait': 'KWT',\n 'kyrgyzstan': 'KGZ',\n 'laos': 'LAO',\n 'latvia': 'LVA',\n 'lebanon': 'LBN',\n 'lesotho': 'LSO',\n 'liberia': 'LBR',\n 'libya': 'LBY',\n 'liechtenstein': 'LIE',\n 'lithuania': 'LTU',\n 'luxembourg': 'LUX',\n 'macau': 'MAC',\n 'macedonia': 'MKD',\n 'madagascar': 'MDG',\n 'malawi': 'MWI',\n 'malaysia': 'MYS',\n 'maldives': 'MDV',\n 'mali': 'MLI',\n 'malta': 'MLT',\n 'marshall islands': 'MHL',\n 'mauritania': 'MRT',\n 'mauritius': 'MUS',\n 'mexico': 'MEX',\n 'micronesia': 'FSM',\n 'moldova': 'MDA',\n 'monaco': 'MCO',\n 'mongolia': 'MNG',\n 'montenegro': 'MNE',\n 'morocco': 'MAR',\n 'mozambique': 'MOZ',\n 'namibia': 'NAM',\n 'nepal': 'NPL',\n 'netherlands': 'NLD',\n 'new caledonia': 'NCL',\n 'new zealand': 'NZL',\n 'nicaragua': 'NIC',\n 'nigeria': 'NGA',\n 'niger': 'NER',\n 'niue': 'NIU',\n 'northern mariana islands': 'MNP',\n 'norway': 'NOR',\n 'oman': 'OMN',\n 'pakistan': 'PAK',\n 'palau': 'PLW',\n 'panama': 'PAN',\n 'papua new guinea': 'PNG',\n 'paraguay': 'PRY',\n 'peru': 'PER',\n 'philippines': 'PHL',\n 'poland': 'POL',\n 'portugal': 'PRT',\n 'puerto rico': 'PRI',\n 'qatar': 'QAT',\n 'romania': 'ROU',\n 'russia': 'RUS',\n 'rwanda': 'RWA',\n 'saint kitts and nevis': 'KNA',\n 'saint lucia': 'LCA',\n 'saint martin': 'MAF',\n 'saint pierre and miquelon': 'SPM',\n 'saint vincent and the grenadines': 'VCT',\n 'samoa': 'WSM',\n 'san marino': 'SMR',\n 'sao tome and principe': 'STP',\n 'saudi arabia': 'SAU',\n 'senegal': 'SEN',\n 'serbia': 'SRB',\n 'seychelles': 'SYC',\n 'sierra leone': 'SLE',\n 'singapore': 'SGP',\n 'sint maarten': 'SXM',\n 'slovakia': 'SVK',\n 'slovenia': 'SVN',\n 'solomon islands': 'SLB',\n 'somalia': 'SOM',\n 'south africa': 'ZAF',\n 'south sudan': 'SSD',\n 'spain': 'ESP',\n 'sri lanka': 'LKA',\n 'sudan': 'SDN',\n 'suriname': 'SUR',\n 'swaziland': 'SWZ',\n 'sweden': 'SWE',\n 'switzerland': 'CHE',\n 'syria': 'SYR',\n 'taiwan': 'TWN',\n 'tajikistan': 'TJK',\n 'tanzania': 'TZA',\n 'thailand': 'THA',\n 'timor-leste': 'TLS',\n 'togo': 'TGO',\n 'tonga': 'TON',\n 'trinidad and tobago': 'TTO',\n 'tunisia': 'TUN',\n 'turkey': 'TUR',\n 'turkmenistan': 'TKM',\n 'tuvalu': 'TUV',\n 'uganda': 'UGA',\n 'ukraine': 'UKR',\n 'united arab emirates': 'ARE',\n 'united kingdom': 'GBR',\n 'united states': 'USA',\n 'uruguay': 'URY',\n 'uzbekistan': 'UZB',\n 'vanuatu': 'VUT',\n 'venezuela': 'VEN',\n 'vietnam': 'VNM',\n 'virgin islands': 'VGB',\n 'west bank': 'WBG',\n 'yemen': 'YEM',\n 'zambia': 'ZMB',\n 'zimbabwe': 'ZWE'}\n\n## countries \nfrom collections import Counter\ncolorscale = [\"#f7fbff\", \"#ebf3fb\", \"#deebf7\", \"#d2e3f3\", \"#c6dbef\", \"#b3d2e9\", \"#9ecae1\",\n    \"#85bcdb\", \"#6baed6\", \"#57a0ce\", \"#4292c6\", \"#3082be\", \"#2171b5\", \"#1361a9\",\n    \"#08519c\", \"#0b4083\", \"#08306b\"\n]\n    \ndef geoplot(ddf):\n    country_with_code, country = {}, {}\n    shows_countries = \", \".join(ddf['country'].dropna()).split(\", \")\n    for c,v in dict(Counter(shows_countries)).items():\n        code = \"\"\n        if c.lower() in country_codes:\n            code = country_codes[c.lower()]\n        country_with_code[code] = v\n        country[c] = v\n\n    data = [dict(\n            type = 'choropleth',\n            locations = list(country_with_code.keys()),\n            z = list(country_with_code.values()),\n            colorscale = [[0,\"rgb(5, 10, 172)\"],[0.65,\"rgb(40, 60, 190)\"],[0.75,\"rgb(70, 100, 245)\"],\\\n                        [0.80,\"rgb(90, 120, 245)\"],[0.9,\"rgb(106, 137, 247)\"],[1,\"rgb(220, 220, 220)\"]],\n            autocolorscale = False,\n            reversescale = True,\n            marker = dict(\n                line = dict (\n                    color = 'gray',\n                    width = 0.5\n                ) ),\n            colorbar = dict(\n                autotick = False,\n                title = ''),\n          ) ]\n\n    layout = dict(\n        title = '',\n        geo = dict(\n            showframe = False,\n            showcoastlines = False,\n            projection = dict(\n                type = 'Mercator'\n            )\n        )\n    )\n\n    fig = dict( data=data, layout=layout )\n    iplot( fig, validate=False, filename='d3-world-map' )\n    return country\n\ncountry_vals = geoplot(df)\ntabs = Counter(country_vals).most_common(25)\n\nlabels = [_[0] for _ in tabs][::-1]\nvalues = [_[1] for _ in tabs][::-1]\ntrace1 = go.Bar(y=labels, x=values, orientation=\"h\", name=\"Heatmap of countries over amount of content\", marker=dict(color=\"#a678de\"))\n\ndata = [trace1]\nlayout = go.Layout(template= \"plotly_dark\", title=\"Top 25 Countries with most content\", xaxis = dict(title = 'Amount of Content'), yaxis = dict(title = 'Countries'), height=700, legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","5d074edd":"#new_df = df[['director','cast','listed_in','country','release_year']]\n\n\n\nfeatures=['Genres','director','cast','description','title']\nfilters = df[features]\n\nfilters.info()","4fb12490":"filters['director'] = filters['director'].fillna(filters['director'].mode()[0])\nfilters['cast'] = filters['cast'].fillna(filters['cast'].mode()[0])\n\nfilters.info()","ed92e223":"#Cleaning the data by making all the words in lower case.\ndef clean_data(x):\n        return str.lower(x.replace(\" \", \"\"))","591de084":"for feature in features:\n    filters[feature] = filters[feature].apply(clean_data)\n    \nfilters.head()","b5f33022":"\n\ndef create_soup(x):\n    return x['director'] + ' ' + x['cast'] + ' ' +x['Genres']+' '+ x['description']\n\n","fc3d56a9":"filters['soup'] = filters.apply(create_soup, axis=1)","c69d89ae":"# Import CountVectorizer and create the count matrix\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(filters['soup'])","4e8e305f":"\n\n# Compute the Cosine Similarity matrix based on the count_matrix\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)\n\n","128902c9":"\nfilters","3d14b683":"\n\n# Reset index of our main DataFrame and construct reverse mapping as before\nfilters=filters.reset_index()\nindices = pd.Series(filters.index, index=filters['title'])\n\n","95ae7d16":"def get_recommendations_new(title, cosine_sim):\n    title=title.replace(' ','').lower()\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return df['title'].iloc[movie_indices]","1fb08b65":"get_recommendations_new('Attack on Titan', cosine_sim2)","31dc6529":"\n\n\n<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 5. Feature Manipulation <\/h1>","d21d260c":"\n<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 2. IMPORTING LIBRARIES <\/h1>","70fe80c2":"\n<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 3. IMPORTING DATASET <\/h1>","0d995526":"The first figure shows us a heatmap of the entire world over the amount of content contributed by each coutry to Netflix.\n\nThe second figure shows a horizontal bar graph showing how much content each country(top 25) contributes.\n\nThe top 5 content producers are - US, India, UK, Canada, France and Japan respectively.\n\nWhich is expected since entertainment industries in these 6 countries are very prominent.\n\nHowever, I would have expected India to have content closer to US. Since, India produces a higher number of films than the US.\n\nSince, Netflix is an US company, it might be easier to get more content from the US which may explain this discrepancy.","6dca4566":"From the pie chart, it is clear that Netfix has an overwhelming number of movies than TV shows.\n\nThere may be 2 reasons for this:\n\n1. Netflix might primarily be a movie streaming service. However, this seems unlikely given that it does have a substantial number of TV shows.\n\n2. The amount of money to produce a high production value TV show is much higher than producing a full feature film which may lead higher number o0f movies in general.","7a9f78b8":"# Getting Recommendations","585ace0e":"There are multiple columns which have null values.\n\nFor my EDA analysis, I have not done any cleaning at all as I don't want to mess with the original data that we have.\n\nHowever, for my Recommendation system I will replace the `null` values.","10218ee7":"The 2 most common ratings are:\n1. TV-MA : These are primarily adult shows meant for indivuals above the age of 17. These shows may contain graphic violence (V), explicit sexual activity (S), or crude indecent language (L).\n2. TV-14 : These are meant for individuals above the age of 14 and may include: intense violence (V), intense sexual situations (S), strong coarse language (L), or intensely suggestive.","420b6575":"We extract out the data, month and year in which the content was added to Netflix.\n\nWe also separate out the number of seasons and time duration in 2 different columns.","50d0aae7":"Here, we check the distribution of Movies v\/s TV shows that are being added to Netflix.","f215c53d":"A recommender system is an application of machine learning that provides recommendations to users on what they might like based on their historical preferences.","e6ca0995":"# Calculating Cosine Similarity scores","694c3629":"The recommender system I will be using will suggest users movies based on:\n\n* Director\n* Cast\n* Genre\n* Description\n* Title","783267b4":"This is an expected trend, with the content increasing till 2018.\n\nHowever, the sudden decrease of content in 2019 is unexpected and I have no possible explanation to explain this sudden decrease.\n\nThe decrease of content for 2020 can be explained by Covid-19.","66419a41":"\n\n<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 4. Data Description <\/h1>","982a9cc9":"Cosine similarity is finding the cosine distance between two users.\n\n\n![COS](https:\/\/i.stack.imgur.com\/36r1U.png)","f36cead5":"\n\n<h1 style = \"font-size:50px; font-family:Garamond ; font-weight : normal; background-color: #f6f5f5 ; color : 'black'; text-align: center; border-radius: 100px 100px;\"> Table of Contents<\/h1>\n\n####  <a href = '#introduction'>1. Introduction <\/a>\n####  <a href = '#section2'>2. Importing Libraries<\/a>\n####  <a href = '#section3'>3. Importing Dataset <\/a>\n####  <a href = '#section4'>4. Data Description <\/a>\n####  <a href = '#section16'>5. Feature Manipulation <\/a>\n####  <a href = '#section17'>6. Word Cloud <\/a>\n####  <a href = '#section20'>7. Movies V\/S TV Shows <\/a>\n####  <a href = '#section21'>8. Rating & Content Type <\/a>\n####  <a href = '#section22'>9. Distribution of Genres <\/a>\n####  <a href = '#section23'>10. Duration of Movies <\/a> \n####  <a href = '#section24'>11. Correlation within the categories(Genres)<\/a> \n####  <a href = '#section24'>12. Release Year<\/a> \n####  <a href = '#section24'>13. Distribution of content for different countries<\/a> \n####  <a href = '#section24'>14. Recommender System<\/a> \n####  <a href = '#section24'>15. References<\/a> \n\n\n","2858c61d":"# What is Netflix?\nNetflix is a subscription based streaming service which allows its users to watch TV shows, movies, documentaries etc. from a wide range of it extensive catalogue. Netflix provides an ad-free service to all its users and is constantly expanding its buisness, including more content every month!\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/en\/f\/f4\/Netflix_-_English.jpg)","0555960e":"This notebook is a culmination of many tutorials and some kaggle notebooks. Some of the references that I have used are:\n\n1. https:\/\/www.kaggle.com\/vikassingh1996\/netflix-movies-and-shows-plotly-recommender-sys\n\n2. https:\/\/www.kaggle.com\/shivamb\/netflix-shows-and-movies-exploratory-analysis\n\n3. https:\/\/chaitanyabelhekar.medium.com\/recommendation-systems-a-walk-trough-33587fecc195","9cf513cb":"\n<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 9. Distribution of Genres <\/h1>","c98a6a20":"# Content-Based Movie Recommender System\n\n<img src=\"https:\/\/miro.medium.com\/max\/1026\/1*BME1JjIlBEAI9BV5pOO5Mg.png\" style=\"width: 200px;\"\/>","f8c2f742":"<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 15. References <\/h1>","d2f11926":"# Filling the null values with the mode of that column","bb6f6bb4":"# Defining the recommendation system","56770c95":"\n\n\n<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 13. Distribution of content for different countries <\/h1>","beae52ec":"It seems like words like **\"Love\"**, **\"Man\", \"World\", \"Story\"** are very common in titles.\n\nHowever, I am suprised by the overwhelming number of content having **\"Christmas\"** in their title.\n\nI am suspecting **\"Christmas\"** titles to be a very seasonal thing with most of the shows likely to be released during the onth of December. However, I do not have the release data in this data to conform my hypothesis.","e7f66580":"\n\nThe dataset has 7787 rows and 12 columns:\n\n*     show_id: unique id of each show (not much of a use for us in this notebook)\n*     type: The category of a show, can be either a Movie or a TV Show\n*     title: Name of the show\n*     director: Name of the director(s) of the show\n*     cast: Name of actors and other cast of the show\n*     country: Name of countries the show is available to watch on Netflix\n*     date_added: Date when the show was added on Netflix\n*     release_year: Release year of the show\n*     rating: Show rating on netflix\n*     duration: Time duration of the show\n*     listed_in: Genre of the show\n*     description: Some text describing the show\n\n","640f1bdb":"As we can see from this plot, majority of the movies are around the 80-120 minutes mark.","89d7f4fc":"<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 1. Introduction <\/h1>","e18ac2a7":"\n\n\n<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 6. WORD CLOUD <\/h1>","7fd530d9":"<a href=\"https:\/\/ibb.co\/cwBV4KF\"><img src=\"https:\/\/i.ibb.co\/m0jgfrq\/1-l-GB0-UTSFwb0wk-Pe-HHDMl-A.png\" alt=\"1-l-GB0-UTSFwb0wk-Pe-HHDMl-A\" border=\"0\"><\/a>","9e477398":"Recommendation Systems are used in Netflix or any other streaming services to provide its users with the best content possible based on what they have already watched to keep its users engaged so that they want to come back to using the Netflix services as much as possible.\n\n![](https:\/\/www.extremetech.com\/wp-content\/uploads\/2016\/03\/Netflix-Feature.jpg)","723b65cf":"\n\n\n<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 14. Recommender System <\/h1>","23f50617":"We can see that initially in the 1930s up untill the 60s the duration of the movies had been increasing which might be due to the rapid devolopment of new technologies which helped in creating more and more lengthy films.\n\nBut after the 60s it dropped but was roughly constant till 2000s after which it dropped probably due to inclusion of more and more short films and documentaries.","c7014c73":"# Cleaning the data to be applied to recommender system algorithm","b5664e97":"# Selecting the required features","9751eb62":"We can see that the content being added is steadily increasing over the years.\n\nHowever, in 2020 number of movies dropped significantly.\n\nThis might be due to Covid-19 which led theaters being shut down all over the world.\n\nBut, TV show production wasn't affected much as those were produced to binge in everyone's home.","2b60e67e":"Both these plots suggests that adult content is more popular in Netflix.\n\nIt may be suggestive of the fact that majority of its users are teenagers and young adults, hwever, this data os insufficient to conclude this fact.","872e99fa":"### First, I will start with some visualisations","49b4bb9d":"# Why Recommendation systems are needed in Netflix?","80a181ff":"\n\n\n<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 8. RATING & CONTENT TYPE <\/h1>","06e1e018":"\n\n\n<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 7. MOVIES V\/S TV SHOWS <\/h1>","e75dcd52":"\n\n\n<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 10. DURATION OF MOVIES <\/h1>","d40e8faf":"\n\n\n<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 11. CORRELATION WITHIN THE CATEGORIES(GENRES) <\/h1>","74c15215":"\n\n\n<h1 style = \"font-size:55px; font-family:Garamond ; font-weight : normal; background-color: brown ; color : white; text-align: center; border-radius: 100px 100px;\"> 12. RELEASE YEAR <\/h1>","0257eb89":"A content-based recommender learns a profile of the new user\u2019s interests based on the features present, in objects the user has rated. It\u2019s basically a keyword specific recommender system here keywords are used to describe the items. **Thus, in a content-based recommender system the algorithms used are such that it recommends similar items that the user has liked in the past or is examining currently.**","b13bfcf0":"We prepare a word cloud to check the frequency of different words used in the titles of TV shows and movies.","e14dd662":"There are few columns which have null values in them. We have to take care of them later."}}