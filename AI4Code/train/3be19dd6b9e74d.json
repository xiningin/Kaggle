{"cell_type":{"c259fcdd":"code","bdf6f3d4":"code","f82cd0a9":"code","bb2dfe85":"code","824ec5ee":"code","dd887246":"code","3e22d95e":"code","fdda4e7c":"code","59bf9121":"code","21c77529":"code","d95b6684":"code","7bd8e960":"code","c3f32e89":"code","ac0e9a7d":"code","10bb4b21":"code","069a1228":"code","e0ed2ecb":"code","fd7749ca":"code","fafad437":"code","618f8bf8":"code","21e8d661":"code","e89d2c66":"code","1a7d102c":"code","f30b52b0":"code","869ba924":"code","e36fd670":"code","df7e6030":"code","5817e518":"code","5c55b0ab":"code","deb78999":"code","fc5b440c":"code","c571fdab":"code","6ef882b8":"code","d626e412":"code","482c5c17":"code","561a52a1":"code","bf99157a":"code","a41b73f3":"code","a604e563":"code","bc22b826":"code","680f5bb9":"code","df52dd03":"code","2f79d936":"code","9c5c36fe":"code","f2549118":"code","e35cb53b":"code","d4ddd726":"code","4f322154":"markdown","36efc3d2":"markdown","8bcd2a6b":"markdown","7f420460":"markdown","8c74a680":"markdown","f9c86d51":"markdown","4d604385":"markdown","42a5ad5d":"markdown","524ab113":"markdown","09de5936":"markdown","d3d6c165":"markdown","3d38acd9":"markdown","0482914f":"markdown","9f3c3679":"markdown"},"source":{"c259fcdd":"import warnings\n\nwarnings.filterwarnings(\"ignore\")","bdf6f3d4":"random_state = 1234","f82cd0a9":"from pandas import read_csv\n\ndf = read_csv(\"..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")","bb2dfe85":"from sklearn.model_selection import train_test_split\n\nfeature_train, feature_evaluate, label_train, label_evaluate = train_test_split(\n    df.loc[:, df.columns != \"DEATH_EVENT\"],\n    df.loc[:, df.columns == \"DEATH_EVENT\"],\n    test_size=0.2,\n    random_state=random_state\n)","824ec5ee":"df.describe()","dd887246":"from seaborn import heatmap\nfrom matplotlib.pyplot import subplots\nfrom numpy import zeros_like, triu_indices_from\n\ncorr = df.corr()\nmask = zeros_like(corr)\nmask[triu_indices_from(mask, k=1)] = True\n\nfig, ax = subplots(figsize=(8.0, 8.0))\nax = heatmap(\n    corr,\n    cmap=\"Blues\",\n    mask=mask,\n    annot=True,\n    annot_kws={\"fontsize\": \"xx-small\"},\n    vmax=1.0,\n    linewidths=2.0\n)","3e22d95e":"from seaborn import histplot\n\nfig, (ax1, ax2) = subplots(1, 2, figsize=(8.0, 3.0))\nax1 = histplot(x=df[\"age\"], ax=ax1)\nax2 = histplot(x=df[\"serum_creatinine\"], ax=ax2)","fdda4e7c":"subset_features = corr[abs(corr[\"DEATH_EVENT\"]) > 0.26][\"DEATH_EVENT\"].index","59bf9121":"df = df.filter(items=subset_features)\ndf.head()","21c77529":"from numpy import float64\nfrom sklearn.preprocessing import StandardScaler\nfrom pandas import DataFrame\n\nX = df.loc[:, df.columns != \"DEATH_EVENT\"].astype(float64)\ny = df.loc[:, df.columns == \"DEATH_EVENT\"].astype(float64)\n\nX_train, X_evaluate, y_train, y_evaluate = train_test_split(\n    DataFrame(StandardScaler().fit_transform(X), columns=X.columns),\n    y.squeeze(),\n    test_size=0.2,\n    random_state=random_state\n)","d95b6684":"from numpy import arange\n\nparam_grid = {\n    \"n_estimators\": arange(50, 150 + 1, 50, dtype=int),\n    \"max_depth\": arange(6, 10 + 1, 2, dtype=int),\n    \"min_samples_split\": arange(3, 5 + 1, 1, dtype=int)\n}\n\nparam_grid","7bd8e960":"from sklearn.ensemble import RandomForestClassifier\n\nclf = RandomForestClassifier(\n    n_jobs=-1, class_weight=\"balanced\", random_state=random_state\n)","c3f32e89":"from sklearn.model_selection import StratifiedKFold\n\nfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=random_state)","ac0e9a7d":"from sklearn.model_selection import GridSearchCV\n\ngrid = GridSearchCV(\n    estimator=clf,\n    param_grid=param_grid,\n    n_jobs=-1,\n    cv=fold.split(X_train, y_train),\n    verbose=0\n)","10bb4b21":"grid.fit(X_train, y_train)","069a1228":"p2x = grid.best_estimator_.predict(X_evaluate)","e0ed2ecb":"grid.best_estimator_","fd7749ca":"p2x","fafad437":"from sklearn.metrics import accuracy_score\n\ns2x = accuracy_score(y_evaluate, p2x)","618f8bf8":"s2x","21e8d661":"param_grid = {\n    \"gamma\": arange(2, 6 + 1, 2, dtype=int),\n    \"max_depth\": arange(3, 5 + 1, 1, dtype=int),\n    \"n_estimators\": arange(50, 150 + 1, 50, dtype=int)\n}\n\nparam_grid","e89d2c66":"from xgboost import XGBClassifier\nfrom torch.cuda import is_available\n\nif is_available():\n    tree_method = \"gpu_hist\"\nelse:\n    tree_method = \"hist\"\n\nclf = XGBClassifier(\n    n_jobs=-1, objective=\"binary:logistic\",\n    tree_method=tree_method, random_state=random_state, verbose=0\n)","1a7d102c":"fold = StratifiedKFold(n_splits=5, shuffle=True, random_state=random_state)","f30b52b0":"grid = GridSearchCV(\n    estimator=clf,\n    param_grid=param_grid,\n    n_jobs=-1,\n    cv=fold.split(X_train, y_train),\n    verbose=0\n)","869ba924":"grid.fit(\n    X_train,\n    y_train,\n    early_stopping_rounds=30,\n    eval_set=[(X_evaluate, y_evaluate)],\n    eval_metric=\"logloss\",\n    verbose=0\n)","e36fd670":"p2x = grid.best_estimator_.predict(X_evaluate)","df7e6030":"p2x","5817e518":"s2x = accuracy_score(y_evaluate, p2x)","5c55b0ab":"s2x","deb78999":"param_grid = {\n    \"n_estimators\": arange(200, 1000 + 1, 200, dtype=int),\n    \"learning_rate\": arange(0.1, 0.3 + 0.1, 0.1, dtype=float),\n    \"min_child_samples\": arange(2, 20 + 1, 6, dtype=int)\n}\n\nparam_grid","fc5b440c":"from lightgbm import LGBMClassifier\n\nclf = LGBMClassifier(n_jobs=-1, random_state=random_state)","c571fdab":"fold = StratifiedKFold(n_splits=5, shuffle=True, random_state=random_state)","6ef882b8":"grid = GridSearchCV(\n    estimator=clf,\n    param_grid=param_grid,\n    cv=fold.split(X_train, y_train),\n    verbose=0\n)","d626e412":"grid.fit(\n    X_train,\n    y_train,\n    early_stopping_rounds=30,\n    eval_set=[(X_evaluate, y_evaluate)],\n    eval_metric=\"kullback_leibler\",\n    verbose=0\n)","482c5c17":"p2x = grid.best_estimator_.predict(X_evaluate)","561a52a1":"p2x","bf99157a":"s2x = accuracy_score(y_evaluate, p2x)","a41b73f3":"s2x","a604e563":"param_grid = {\n    \"iterations\": arange(500, 1500 + 1, 500, dtype=int),\n    \"learning_rate\": arange(0.2, 0.8 + 0.1, 0.2, dtype=float),\n    \"depth\": arange(3, 5 + 1, 1, dtype=int)\n}\n\nparam_grid","bc22b826":"from catboost import CatBoostClassifier\n\nclf = CatBoostClassifier(random_state=random_state)","680f5bb9":"fold = StratifiedKFold(n_splits=5, shuffle=True, random_state=random_state)","df52dd03":"grid = GridSearchCV(\n    estimator=clf,\n    param_grid=param_grid,\n    n_jobs=-1,\n    cv=fold.split(X_train, y_train),\n    verbose=0\n)","2f79d936":"grid.fit(\n    X_train,\n    y_train,\n    early_stopping_rounds=30,\n    eval_set=[(X_evaluate, y_evaluate)],\n    silent=True\n)","9c5c36fe":"p2x = grid.best_estimator_.predict(X_evaluate)","f2549118":"p2x","e35cb53b":"s2x = accuracy_score(y_evaluate, p2x)","d4ddd726":"s2x","4f322154":"The dataset contains the data of 299 patients, split into a dataset for training with 239 lines of patients' data and a dataset for evaluation with 60 lines of patients' data.","36efc3d2":"Agein, split the new dataset into a train and evaluate dataset with the same amount of patients as before.","8bcd2a6b":"## Loading data\n\nThe dataset contains 13 features, which report clinical, body, and lifestyle information, that we briefly describe here. Some features are binary: anaemia, high blood pressure, diabetes, sex, and smoking.\n\n### About the data:\n- **age**: age of the patient (years)\n- **anaemia**: decrease of red blood cells or hemoglobin\n- **creatinine phosphokinase (CPK)**: level of the CPK enzyme in the blood $ \\frac{mcg}{L} $\n- **diabetes**: if the patient has diabetes\n- **ejection_fraction**: percentage of blood leaving the heart at each contraction\n- **high blood pressure**: if the patient has hypertension\n- **platelets**: platelets in the blood $ \\frac{kiloplatelets}{mL} $\n- **serum creatinine**: level of serum creatinine in the blood $ \\frac{mg}{dL} $\n- **serum sodium**: level of serum sodium in the blood $ \\frac{mEq}{L} $\n- **sex**: woman or man\n- **smoking**: if the patient smokes or not\n- **time**: follow-up period (days)\n- **[target] death event**: If the patient deceased during the follow-up period","7f420460":"### Extreme Gradient Boosting","8c74a680":"## Modelling\n\nNow having a baseline for well performing models, some better fitted models.\n\n### Random Forests","f9c86d51":"Create a new dataset with the most important features and the target.","4d604385":"## Reproducibility\n\nTo ensure reproducibility of this notebook, it uses a random state to ensure that all runs generate equally.","42a5ad5d":"Visualize the distribution of the most important corrolating variables to our target.","524ab113":"### Light Gradient Boosting Machine","09de5936":"Visualize the corrolation between each variable.","d3d6c165":"## Data analysis\n\nFirstly, presenting a representation of the data distribution in our dataset.","3d38acd9":"## Feature importance\n\nNot all of the 12 features in the dataset have equal value in predicting heart failure of the patient. Using the corrolation calculated from before, a subset of features are selected.","0482914f":"### CatBoost","9f3c3679":"# Heart failure prediction\n\nCardiovascular diseases (CVDs) are the number 1 cause of death globally, taking an estimated 17.9 million lives each year. Heart failure is a common event caused by CVDs and the dataset contains 12 features that can be used to predict mortality by heart failure.\n\nPeople with cardiovascular disease or who are at high cardiovascular risk (due to the presence of one or more risk factors such as hypertension, diabetes, hyperlipidemia or already established disease) need early detection and management wherein a machine learning model can be of great help."}}