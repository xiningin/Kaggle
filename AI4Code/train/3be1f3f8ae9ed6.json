{"cell_type":{"dd761df1":"code","245c1f03":"code","ba285d8d":"code","bd72977c":"code","1265edac":"code","8aea086b":"code","98d8a8a3":"code","d0a01ccc":"code","74e9c005":"code","52bd5650":"code","80bb4216":"markdown","8e8d9e10":"markdown","803b10c3":"markdown","01208894":"markdown","69e09f4f":"markdown","1a4ab926":"markdown","e57d6b6a":"markdown"},"source":{"dd761df1":"# install dependencies: (use cu100 because colab is on CUDA 10.0)\n!pip install -U torch==1.4+cu100 torchvision==0.5+cu100 -f https:\/\/download.pytorch.org\/whl\/torch_stable.html \n!pip install cython pyyaml==5.1\n!pip install -U 'git+https:\/\/github.com\/cocodataset\/cocoapi.git#subdirectory=PythonAPI'\nimport torch, torchvision\ntorch.__version__\n!gcc --version\n# opencv is pre-installed on colab","245c1f03":"# install detectron2:\n!pip install detectron2 -f https:\/\/dl.fbaipublicfiles.com\/detectron2\/wheels\/cu100\/index.html","ba285d8d":"import detectron2\nfrom detectron2.utils.logger import setup_logger\nsetup_logger()\n\n# import some common libraries\nimport numpy as np\nimport cv2\nimport matplotlib.pyplot as plt\n\n# import some common detectron2 utilities\nfrom detectron2 import model_zoo\nfrom detectron2.engine import DefaultPredictor\nfrom detectron2.config import get_cfg\nfrom detectron2.utils.visualizer import Visualizer\nfrom detectron2.data import MetadataCatalog","bd72977c":"!wget https:\/\/github.com\/TannerGilbert\/Detectron2-Train-a-Instance-Segmentation-Model\/raw\/master\/microcontroller_segmentation_data.zip\n!unzip microcontroller_segmentation_data.zip\n!ls","1265edac":"!ls 'Microcontroller Segmentation'","8aea086b":"from detectron2.data.datasets import register_coco_instances\n\nfor d in [\"train\", \"test\"]:\n    register_coco_instances(f\"microcontroller_{d}\", {}, f\"Microcontroller Segmentation\/{d}.json\", f\"Microcontroller Segmentation\/{d}\")","98d8a8a3":"import random\nfrom detectron2.data import DatasetCatalog, MetadataCatalog\n\ndataset_dicts = DatasetCatalog.get(\"microcontroller_train\")\nmicrocontroller_metadata = MetadataCatalog.get(\"microcontroller_train\")\n\nfor d in random.sample(dataset_dicts, 3):\n    img = cv2.imread(d[\"file_name\"])\n    v = Visualizer(img[:, :, ::-1], metadata=microcontroller_metadata, scale=0.5)\n    v = v.draw_dataset_dict(d)\n    plt.figure(figsize = (14, 10))\n    plt.imshow(cv2.cvtColor(v.get_image()[:, :, ::-1], cv2.COLOR_BGR2RGB))\n    plt.show()","d0a01ccc":"from detectron2.engine import DefaultTrainer\nfrom detectron2.config import get_cfg\nimport os\n\ncfg = get_cfg()\ncfg.merge_from_file(model_zoo.get_config_file(\"COCO-InstanceSegmentation\/mask_rcnn_R_50_FPN_3x.yaml\"))\ncfg.DATASETS.TRAIN = (\"microcontroller_train\",)\ncfg.DATASETS.TEST = ()\ncfg.DATALOADER.NUM_WORKERS = 2\ncfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(\"COCO-InstanceSegmentation\/mask_rcnn_R_50_FPN_3x.yaml\")\ncfg.SOLVER.IMS_PER_BATCH = 2\ncfg.SOLVER.BASE_LR = 0.00025\ncfg.SOLVER.MAX_ITER = 1000\ncfg.MODEL.ROI_HEADS.NUM_CLASSES = 4\n\nos.makedirs(cfg.OUTPUT_DIR, exist_ok=True)\ntrainer = DefaultTrainer(cfg) \ntrainer.resume_or_load(resume=False)\ntrainer.train()","74e9c005":"cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, \"model_final.pth\")\ncfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5 \ncfg.DATASETS.TEST = (\"microcontroller_test\", )\npredictor = DefaultPredictor(cfg)","52bd5650":"from detectron2.utils.visualizer import ColorMode\ndataset_dicts = DatasetCatalog.get(\"microcontroller_train\")\nfor d in random.sample(dataset_dicts, 3):    \n    im = cv2.imread(d[\"file_name\"])\n    outputs = predictor(im)\n    v = Visualizer(im[:, :, ::-1],\n                   metadata=microcontroller_metadata, \n                   scale=0.8, \n                   instance_mode=ColorMode.IMAGE_BW   # remove the colors of unsegmented pixels\n    )\n    v = v.draw_instance_predictions(outputs[\"instances\"].to(\"cpu\"))\n    plt.figure(figsize = (14, 10))\n    plt.imshow(cv2.cvtColor(v.get_image()[:, :, ::-1], cv2.COLOR_BGR2RGB))\n    plt.show()","80bb4216":"## Train model\n\nNow, let's fine-tune a pretrained FasterRCNN instance segmentation model on the microcontroller data-set.","8e8d9e10":"## Register data-set\n\nIn order to use a dataset with Detectron2 we need to register it. For more information check out the official documentation.","803b10c3":"<table align=\"left\"><td>\n  <a target=\"_blank\"  href=\"https:\/\/colab.research.google.com\/github\/TannerGilbert\/Detectron2-Train-a-Instance-Segmentation-Model\/blob\/master\/Microcontroller_Instance_Segmentation_with_COCO_dataformat.ipynb\">\n    <img src=\"https:\/\/www.tensorflow.org\/images\/colab_logo_32px.png\" \/>Run in Google Colab\n  <\/a>\n<\/td><td>\n  <a target=\"_blank\"  href=\"https:\/\/github.com\/TannerGilbert\/Detectron2-Train-a-Instance-Segmentation-Model\/blob\/master\/Microcontroller_Instance_Segmentation_with_COCO_dataformat.ipynb\">\n    <img width=32px src=\"https:\/\/www.tensorflow.org\/images\/GitHub-Mark-32px.png\" \/>View source on GitHub<\/a>\n<\/td><\/table>","01208894":"## Use model for inference\n\nNow, we can perform inference on our validation set by creating a predictor object.","69e09f4f":"# Microcontroller Instance Segmentation with COCO dataformat\n<img src=\"https:\/\/dl.fbaipublicfiles.com\/detectron2\/Detectron2-Logo-Horz.png\" width=\"500\">","1a4ab926":"## Get data","e57d6b6a":"## Install detectron2\n\n> **Important**: If you're running on a local machine, be sure to follow the [installation instructions](https:\/\/github.com\/facebookresearch\/detectron2\/blob\/master\/INSTALL.md). This notebook includes only what's necessary to run in Colab."}}