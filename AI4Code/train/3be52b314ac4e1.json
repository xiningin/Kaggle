{"cell_type":{"0e4a809c":"code","144c1001":"code","b02fb92b":"code","de7040b0":"code","e371d308":"code","167a353d":"code","c7fe26a6":"code","862402d3":"code","f4ca43fc":"code","ef144a77":"code","6d7d95b1":"code","9998f6b2":"code","364f879b":"code","446025f3":"code","775e556a":"code","6fcab969":"code","26883be0":"code","75d2405c":"code","b91bccf4":"code","bafda1d0":"code","3d5163c1":"code","9ca344c6":"code","168fde04":"code","cd0c8d1a":"markdown","2485db61":"markdown","9a59fce2":"markdown","2483c128":"markdown","df82dc58":"markdown","74c497b6":"markdown","fbfb6ce6":"markdown","db0fe41d":"markdown","5027af33":"markdown","5aaf8608":"markdown"},"source":{"0e4a809c":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport time\nfrom sklearn.naive_bayes import BernoulliNB \nfrom sklearn import tree\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn import metrics","144c1001":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b02fb92b":"pd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\nlow_memory=False\ndf1 = pd.read_csv(\"\/kaggle\/input\/MachineLearningCSV\/MachineLearningCVE\/Friday-WorkingHours-Afternoon-DDos.pcap_ISCX.csv\")\ndf2=pd.read_csv(\"\/kaggle\/input\/MachineLearningCSV\/MachineLearningCVE\/Friday-WorkingHours-Afternoon-PortScan.pcap_ISCX.csv\")\ndf3=pd.read_csv(\"\/kaggle\/input\/MachineLearningCSV\/MachineLearningCVE\/Friday-WorkingHours-Morning.pcap_ISCX.csv\")\ndf4=pd.read_csv(\"\/kaggle\/input\/MachineLearningCSV\/MachineLearningCVE\/Monday-WorkingHours.pcap_ISCX.csv\")\ndf5=pd.read_csv(\"\/kaggle\/input\/MachineLearningCSV\/MachineLearningCVE\/Thursday-WorkingHours-Afternoon-Infilteration.pcap_ISCX.csv\")\ndf6=pd.read_csv(\"\/kaggle\/input\/MachineLearningCSV\/MachineLearningCVE\/Thursday-WorkingHours-Morning-WebAttacks.pcap_ISCX.csv\")\ndf7=pd.read_csv(\"\/kaggle\/input\/MachineLearningCSV\/MachineLearningCVE\/Tuesday-WorkingHours.pcap_ISCX.csv\")\ndf8=pd.read_csv(\"\/kaggle\/input\/MachineLearningCSV\/MachineLearningCVE\/Wednesday-workingHours.pcap_ISCX.csv\")","de7040b0":"nRowsRead = None # \u010cita sve redove, mogu\u0107e je pro\u010ditati samo odre\u0111eni broj\n\n\ndf = pd.concat([df1,df2])\ndel df1,df2\ndf = pd.concat([df,df3])\ndel df3\ndf = pd.concat([df,df4])\ndel df4\ndf = pd.concat([df,df5])\ndel df5\ndf = pd.concat([df,df6])\ndel df6\ndf = pd.concat([df,df7])\ndel df7\ndf = pd.concat([df,df8])\ndel df8\nnRow, nCol = df.shape\nprint(f'U tabeli ima {nRow} redova i {nCol} kolona')","e371d308":"df.head()","167a353d":"df.info()","c7fe26a6":"def plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","862402d3":"plotPerColumnDistribution(df, 10, 5)","f4ca43fc":"df[' Label'].value_counts()","ef144a77":"old_memory_usage = df.memory_usage().sum()\n#change the variable types for low memory usage\n#int64 to int32,,, float64 to float32\ninteger = []\nf = []\nfor i in df.columns[:-1]:\n    if df[i].dtype == \"int64\": integer.append(i)\n    else : f.append(i)\n\ndf[integer] = df[integer].astype(\"int32\")\ndf[f] = df[f].astype(\"float32\")\ndf.info()","6d7d95b1":"new_memory_usage = df.memory_usage().sum()\nold_vs_new = (old_memory_usage - new_memory_usage) \/ old_memory_usage * 100\nprint(f\"%{old_vs_new} lower memory usage\")","9998f6b2":"# drop one variable features \none_variable_list = []\nfor i in df.columns:\n    if df[i].value_counts().nunique() < 2:\n        one_variable_list.append(i)\ndf.drop(one_variable_list,axis=1,inplace=True)\ndf.columns =  df.columns.str.strip()","364f879b":"# drop nan and infinite rows\ndf = df[~df.isin([np.nan, np.inf, -np.inf]).any(1)]","446025f3":"# merging similar classes with low instances\ndf[\"Label\"] = df[\"Label\"].replace([\"Web Attack \ufffd Brute Force\",\"Web Attack \ufffd XSS\",\"Web Attack \ufffd Sql Injection\"],\"Web Attack\")","775e556a":"# drop duplicate rows\ndf =  df.drop_duplicates(keep=\"first\")\ndf.reset_index(drop=True,inplace=True)","6fcab969":"#feature reduction \n#dropping very high correlated features \ncorr_matrix = df.corr().abs()\n\n# Select upper triangle of correlation matrix\nupper = corr_matrix.where(np.triu(np.ones(corr_matrix.shape), k=1).astype(np.bool))\n\n# Find features with correlation greater than 0.95\nto_drop = [column for column in upper.columns if any(upper[column] > 0.95)]\n\n# Drop features \ndf =  df.drop(to_drop, axis=1)\ndf.shape","26883be0":"x = df.drop([\"Label\"],axis=1)\ny = df[\"Label\"]","75d2405c":"from sklearn.model_selection import GridSearchCV, train_test_split, cross_val_score\n\n#Podela podataka\nX_train, X_test, Y_train, Y_test = train_test_split(x,y,test_size=0.35,random_state=42,stratify=y)","b91bccf4":"scaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","bafda1d0":"#Fitting Models\nfrom sklearn.naive_bayes import BernoulliNB \nfrom sklearn import tree\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.tree import DecisionTreeClassifier\n\nstartNB = time.time()\n\n\n# Treniranje Naive Baye modela\nBNB_Classifier = BernoulliNB()\nBNB_Classifier.fit(X_train, Y_train)\nprint(\"Vreme treniranja modela Naive Bayes\", time.time()-startNB)\n\nstartDT = time.time()\n# Treniranje Decision Tree modela\nDTC_Classifier = tree.DecisionTreeClassifier(criterion='entropy', splitter='best', random_state=0)\n#Funkcija za merenje kvaliteta podele podrzava kriterijume \u201egini\u201c, za ne\u010distoc\u0301u i \u201eentropy\u201c za dobijanje informacija,\nDTC_Classifier.fit(X_train, Y_train)\nprint(\"Vreme treniranja modela stablo odlucivanja\", time.time()-startDT)\n\nstartKNN = time.time()\n# Treniranje KNeighborsClassifier modela\nKNN_Classifier = KNeighborsClassifier(n_jobs=-1, n_neighbors=3, metric='minkowski', algorithm='auto') \n#n_jobs=-1 znaci da koristi sve procesore,  algorithm='auto' sam primenjuje odgovarajuci algoritam na osnovu prosle\u0111enih vrednosti, n_neighbors=3 uzima u obzir 3 najbliza suseda, minkowski udaljenost\nKNN_Classifier.fit(X_train, Y_train); \nprint(\"Vreme treniranja modela KNN\", time.time()-startKNN)","3d5163c1":"#Evaluacija modela\nfrom sklearn import metrics\n\nmodels = []\nmodels.append(('Naive Baye Classifier', BNB_Classifier))\nmodels.append(('Decision Tree Classifier', DTC_Classifier))\nmodels.append(('KNeighborsClassifier', KNN_Classifier))\n\n\n\nfor i, v in models:\n    scores = cross_val_score(v, X_train, Y_train, cv=7)\n    accuracy = metrics.accuracy_score(Y_train, v.predict(X_train))\n    confusion_matrix = metrics.confusion_matrix(Y_train, v.predict(X_train))\n    classification = metrics.classification_report(Y_train, v.predict(X_train))\n    print()\n    print('============================== {} Model Evaluation =============================='.format(i))\n    print()\n    print (\"Cross Validation Mean Score:\" \"\\n\", scores.mean())\n    print()\n    print (\"Model Accuracy:\" \"\\n\", accuracy)\n    print()\n    print(\"Confusion matrix:\" \"\\n\", confusion_matrix)\n    print()\n    print(\"Classification report:\" \"\\n\", classification) \n    print()\n    ","9ca344c6":"#definisanje funkcije za prikaz matrice tacnosti\ndef plot_confusion_matrix(cm,\n                          title,\n                          cmap=None,\n                          target_names=None,\n                          normalize=False\n                         ):\n    \n    import matplotlib.pyplot as plt\n    import numpy as np\n    import itertools\n\n    accuracy = np.trace(cm) \/ float(np.sum(cm))\n    misclass = 1 - accuracy\n\n    if cmap is None:\n        cmap = plt.get_cmap('Blues')\n\n    plt.figure(figsize=(20, 20))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n\n    if target_names is not None:\n        tick_marks = np.arange(len(target_names))\n        plt.xticks(tick_marks, target_names, rotation=45)\n        plt.yticks(tick_marks, target_names)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n\n    thresh = cm.max() \/ 1.5 if normalize else cm.max() \/ 2\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        if normalize:\n            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n        else:\n            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.grid(False)\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n    plt.show()\n    plt.savefig(title, bbox_inches='tight', dpi=300)\n\n    ","168fde04":"#Rezultat\nfrom sklearn import metrics\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt \nimport scikitplot as skplt\n\nmodels = []\nmodels.append(('Naive Baye Classifier', BNB_Classifier))\nmodels.append(('Decision Tree Classifier', DTC_Classifier))\nmodels.append(('KNeighborsClassifier', KNN_Classifier))\n\nfor i, v in models:\n    \n    accuracy = metrics.accuracy_score(Y_test, v.predict(X_test))\n    confusion_matrix = metrics.confusion_matrix(Y_test, v.predict(X_test))\n    classification = metrics.classification_report(Y_test, v.predict(X_test))\n    print()\n    print('============================== {} Model Test Results =============================='.format(i))\n    print()\n    print (\"Model Accuracy:\" \"\\n\", accuracy)\n    print()\n    print(\"Confusion matrix:\" \"\\n\", confusion_matrix)\n    print()\n    print(\"Classification report:\" \"\\n\", classification) \n    print()\n    plot_confusion_matrix(cm=confusion_matrix ,\n                      title        = i)\n","cd0c8d1a":"# Spajanje svih tabela u jednu\n","2485db61":"# Grafi\u010dki prikaz flegova","9a59fce2":"# Uklju\u010divanje biblioteka\n","2483c128":"# Rezultat","df82dc58":"<a href=\"1\"><\/a>\n# Skup podataka -INFO\n","74c497b6":"# Tabelarni prikaz podataka","fbfb6ce6":"# Klasifikacija podataka\nPriprema podataka za treniranje","db0fe41d":"# Evaluacija modela","5027af33":"<a href=\"2\"><\/a>\n# Graficki prikaz podataka\n","5aaf8608":"# Treniranje modela"}}