{"cell_type":{"74adc55d":"code","6ec303b8":"code","0ef65218":"code","35981426":"code","794ccc6f":"code","7baf0962":"code","da1e8f1e":"code","536d58b4":"code","11fc8b16":"code","7cff8c41":"code","89f9d211":"code","c9af6a49":"code","c78c13cd":"code","0de0f615":"code","17b55f5d":"code","ce5e2457":"code","bff3c266":"code","e96e17d5":"code","6e45765f":"code","ac7720f8":"code","387d1c90":"code","af374b98":"code","e91e0535":"code","e50c34e3":"code","85ccbfed":"code","3629090e":"code","f457f888":"code","543c6b4a":"code","f01673da":"code","8d2a31e3":"code","70e659ba":"code","3ce486e7":"code","1f5a5055":"code","802575dd":"code","b7d4e96f":"code","0d2cce71":"code","39faa273":"code","684c02bc":"code","954cc8e0":"code","e784f4ba":"code","af39e6b6":"code","2df35405":"code","4c9f7266":"code","043f2d1f":"code","52f7270a":"code","3bd6d327":"markdown","6bb29dd1":"markdown","a93e1d61":"markdown","352556b5":"markdown","cd69341f":"markdown"},"source":{"74adc55d":"from sympy import *\nfrom math import *\nimport numpy as np\nimport sympy as sp\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Wedge","6ec303b8":"def eq_solve(differential_equation, function, independent_variable, \\\n             ics, display_=False):\n    \n    ans = dsolve(differential_equation, function, \\\n                 ics={function.subs(independent_variable, ics[0]):ics[1]})\n    \n    if display_:\n        display(ans)\n        \n    return str(ans).split(',')[1].strip()[:-1]","0ef65218":"def eq_solve_ideal(differential_equation, function, independent_variable, \\\n                   ics, range_, t_step, display_=False):\n    \n    ans = eq_solve(differential_equation, function, independent_variable, \\\n                   ics, display_)\n    t = range_[0]\n    true_val = []\n    \n    while t <= range_[1]:\n        t += t_step\n        true_val.append(round(eval(ans), 8))\n        \n    return np.array(true_val)","35981426":"def _euler(differential_equation, dependent_variable, independent_variable, \\\n           ics, range_, step):\n    \n    f = lambdify(dependent_variable, differential_equation)\n    d_f = lambdify(dependent_variable, \\\n                   differential_equation.diff(dependent_variable))\n    d2_f = lambdify(dependent_variable, \\\n                    differential_equation.diff(dependent_variable, 2))\n    \n    start = range_[0]\n    end = range_[1]\n    x1 = ics\n    x3 = ics\n    x2 = ics\n    t = start\n    x1_arr = []\n    x2_arr = []\n    x3_arr = []\n    t_arr = []\n    \n    while t <= end:\n        x1 = x1 + f(x1)*step\n        x2 = x2 + f(x2)*step + f(x2)*d_f(x2)*(step**2)\/2\n        x3 = x3 + f(x3)*step + f(x3)*d_f(x3)*(step**2)\/2 + \\\n        ((f(x3)*(d_f(x3)**2)) + ((f(x3)**2)*d2_f(x3)))*(step**3)\/6\n        x1_arr.append(x1)\n        x2_arr.append(x2)\n        x3_arr.append(x3)\n        t += step\n        t_arr.append(t)\n          \n    return np.array(x1_arr), np.array(x2_arr), np.array(x3_arr), np.array(t_arr)","794ccc6f":"def _euler_na(differential_equation, dependent_variable, \\\n              independent_variable, ics, range_, step):\n    \n    \n    f = lambdify((dependent_variable, independent_variable), differential_equation)\n    g = diff(differential_equation, independent_variable) + \\\n    differential_equation*diff(differential_equation, dependent_variable)\n    g_ = lambdify((dependent_variable, independent_variable), g)\n    h = g.diff(independent_variable) + differential_equation*g.diff(dependent_variable)\n    h_ = lambdify((dependent_variable, independent_variable), h)\n    \n    \n    start = range_[0]\n    end = range_[1]\n    x1 = ics\n    x3 = ics\n    x2 = ics\n    t = start\n    x1_arr = []\n    x2_arr = []\n    x3_arr = []\n    t_arr = []\n    \n    while t <= end:\n        x1 = x1 + f(x1, t)*step\n        x2 = x2 + f(x2, t)*step + g_(x2, t)*(step**2)\/2\n        x3 = x3 + f(x3, t)*step + g_(x3, t)*(step**2)\/2 + h_(x3, t)*(step**3)\/6\n        x1_arr.append(x1)\n        x2_arr.append(x2)\n        x3_arr.append(x3)\n        t += step\n        t_arr.append(t)\n        \n    return np.array(x1_arr), np.array(x2_arr), np.array(x3_arr), np.array(t_arr)","7baf0962":"def print_error(array, text):\n    \n    if text:\n        print(\"\\nError (\", text, \"):\")\n    else:\n        print(\"Error analysis:\")\n        \n    min_err = np.min(array)\n    max_err = np.max(array)\n    \n    if min_err >= 0:\n        pass\n    elif max_err <= 0:\n        min_err, max_err = max_err, min_err\n    else:\n        min_abs_err = np.min(np.abs(array))\n        max_abs_err = np.max(np.abs(array))\n        if min_abs_err in array:\n            min_err = min_abs_err\n        else:\n            min_err = -min_abs_err\n        \n        if max_abs_err in array:\n            max_err = max_abs_err\n        else:\n            max_err = -max_abs_err\n            \n    print(\"Local error: \", np.sum(np.abs(array)))\n    print(\"Global error:\", np.linalg.norm(array)\/sqrt(len(array)))\n    print(\"Mean of error: \", np.mean(array))\n    print(\"Standard deviation: \", np.std(array))\n    print(\"Minimum error: \", min_err)\n    print(\"Maximum error: \", max_err, '\\n')","da1e8f1e":"def print_steps(ans, steps):\n    \n    print(ans[0][:steps], ans[1][:steps], ans[2][:steps], \\\n          ans[3][:steps], ans[4][:steps], ans[5][:steps], \\\n          ans[6][:steps], ans[7][:steps], sep='\\n')\n    ","536d58b4":"def test(function, dependent_variable, independent_variable, \\\n         ics, range_, step, analysis=True, show_steps=0, \\\n         diff_eq=None, function_=None, inde_var=None, \\\n         solve_symbolically=False, \\\n         true_function=None, true_array=None, \\\n         plot_val=False, display=False, save_fig=None, \\\n         base_solver=_euler,\\\n         xlabel=None, ylabel=None, error_ylabel=None, \\\n         **fig_kwargs):\n    \n    '''\n    *args.validate(), **kwargs.validate() ommited. Be careful.\n    '''\n    a, b, c, t = base_solver(function, dependent_variable, independent_variable, ics, range_, step)\n    \n    ideal = true_array\n    if true_function != None:\n        ideal = [true_function(i) for i in t]\n    elif solve_symbolically:\n        ideal = eq_solve_ideal(diff_eq, function_, inde_var, ics=[range_[0], ics], display_=display, range_=range_, t_step=step)\n        \n    \n    error1 = ideal - a\n    error2 = ideal - b\n    error3 = ideal - c\n    \n    if not ylabel:\n        ylabel = r\"$x(t)$\"\n    if not xlabel:\n        xlabel = r\"$t$\"\n    if not error_ylabel:\n        error_ylabel = \"Error\"\n    \n    if plot_val == True:\n        \n        f, ax = plt.subplots(1, 2, **fig_kwargs)\n        #f, ax = plt.subplots(1, 2, figsize=(30, 10))\n        ax[0].plot(t, a, 'r')\n        ax[0].plot(t, b, 'b')\n        ax[0].plot(t, c, 'g')\n        ax[0].plot(t, ideal, 'y')\n        ax[0].legend(['Euler', 'Taylor (degree: 2)', 'Taylor (degree: 3)', 'Ideal'])\n        ax[1].plot(t, error1, 'r')\n        ax[1].plot(t, error2, 'b')\n        ax[1].plot(t, error3, 'g')\n        ax[1].legend([error_ylabel + ' Euler', error_ylabel + ' Taylor (degree: 2)', error_ylabel + ' Taylor (degree: 3)'])\n        ax[0].set_xlabel(xlabel, fontsize=18)\n        ax[0].set_ylabel(ylabel, fontsize=18)\n        ax[1].set_xlabel(xlabel, fontsize=18)\n        ax[1].set_ylabel(ylabel, fontsize=18)\n        ax[0].grid()\n        ax[1].grid()\n        for ax1 in ax:\n            for tick in ax1.xaxis.get_major_ticks():\n                tick.label.set_fontsize(14) \n            for tick in ax1.yaxis.get_major_ticks():\n                tick.label.set_fontsize(14) \n        plt.show()\n        \n        if save_fig:\n            f.savefig(save_fig, dpi=300)\n            \n    elif plot_val  == 'error':\n        \n        f, ax = plt.subplots(1, 3, **fig_kwargs)\n        #f, ax = plt.subplots(1, 3, figsize=(40, 10))\n        ax[0].plot(t, error1, 'r')\n        ax[1].plot(t, error2, 'b')\n        ax[2].plot(t, error3, 'g')\n        ax[0].set_xlabel(xlabel, fontsize=18)\n        ax[0].set_ylabel(error_ylabel + \" Euler\", fontsize=18)\n        ax[1].set_xlabel(xlabel, fontsize=18)\n        ax[1].set_ylabel(error_ylabel + \" Taylor (degree: 2)\", fontsize=18)\n        ax[2].set_xlabel(xlabel, fontsize=18)\n        ax[2].set_ylabel(error_ylabel + \" Taylor (degree: 3)\", fontsize=18)\n        ax[0].grid()\n        ax[1].grid()\n        ax[2].grid()\n        for ax1 in ax:\n            for tick in ax1.xaxis.get_major_ticks():\n                tick.label.set_fontsize(14) \n            for tick in ax1.yaxis.get_major_ticks():\n                tick.label.set_fontsize(14) \n        plt.show()\n        if save_fig:\n            f.savefig(save_fig, dpi=100)\n            \n    if analysis:\n        print_error(error1, \"Euler\")\n        print_error(error2, \"Taylor (degree: 2)\")\n        print_error(error3, \"Taylor (degree: 3)\")\n        \n    if show_steps:\n        print_steps(ans, show_steps)\n        \n        \n    return t, a, b, c, ideal, error1, error2, error3","11fc8b16":"def give_points(arr, x, tol=1e-12):\n    \n    stable = []\n    unstable = []\n    ND = []\n    tot_points_id = []\n    \n    for i in range(len(arr)):\n        if abs(arr[i]) < tol:\n            if arr[i - 1] > 0 and arr[i + 1] < 0:\n                stable.append(round(x[i], 3))\n            elif arr[i - 1] < 0 and arr[i + 1] > 0:\n                unstable.append(round(x[i], 3))\n            else:\n                ND.append(round(x[i], 3))\n            tot_points_id.append(i)\n            \n    return list(set(map(lambda x: round(x, 3), stable))), list(set(map(lambda x: round(x, 3), unstable))), \\\n        list(set(map(lambda x: round(x, 3), ND))), tot_points_id","7cff8c41":"def _euler_over_flow_controlled(differential_equation, dependent_variable, \\\n                                independent_variable, ics, range_, step, penalty=5):\n    \n    f = lambdify(dependent_variable, differential_equation)\n    d_f = lambdify(dependent_variable, differential_equation.diff(dependent_variable))\n    d2_f = lambdify(dependent_variable, differential_equation.diff(dependent_variable, 2))\n    \n    start = range_[0]\n    end = range_[1]\n    x1 = ics\n    x3 = ics\n    x2 = ics\n    t = start\n    x1_arr = []\n    x2_arr = []\n    x3_arr = []\n    t_arr = []\n    \n    while t <= end:\n        try:\n            x1 = x1 + f(x1)*step\n            x2 = x2 + f(x2)*step + f(x2)*d_f(x2)*(step**2)\/2\n            x3 = x3 + f(x3)*step + f(x3)*d_f(x3)*(step**2)\/2 + ((f(x3)*(d_f(x3)**2)) + ((f(x3)**2)*d2_f(x3)))*(step**3)\/6\n        except:\n            print(\"Overflow detected at ics:\", ics, \"\\npenalty:\",penalty, \\\n                  \" rearmost value of array:\", x3_arr[-penalty - 1])\n            if penalty != 0:\n                return np.array(x1_arr[:-penalty]), np.array(x2_arr[:-penalty]), np.array(x3_arr[:-penalty]), np.array(t_arr[:-penalty])\n            else:\n                break\n        x1_arr.append(x1)\n        x2_arr.append(x2)\n        x3_arr.append(x3)\n        t += step\n        t_arr.append(t)\n    return np.array(x1_arr), np.array(x2_arr), np.array(x3_arr), np.array(t_arr)","89f9d211":"def test_phase(function, dependent_variable, independent_variable, ics_arr, range_, \\\n               step, phase_range, phase_step, plot_val=\"val\", save_fig=None, \\\n               tol=1e-12, dpi=100, dpi_phase=100, calculate_points=False, \\\n               stable=None, unstable=None, ND=None, tick_points=None, \\\n               markersize=160, bbox_to_anchor=None, ND_arr=None, penalty=5, \\\n               leg_stable=None, leg_unstable=None, leg_ND=None, \\\n               ics_arr_sym=None, legend_fontsize=None, \\\n               xlabel=None, ylabel=None, **fig_kwargs):\n    \n    eu_arr = []\n    ty2_arr = []\n    ty3_arr = []\n    t_arr = []\n    d_f = lambdify(dependent_variable, function)\n    \n    for ics in ics_arr:\n        \n        a, b, c, t = _euler_over_flow_controlled(function, dependent_variable, \\\n                                                 independent_variable, ics, \\\n                                                 range_, step, penalty)\n        eu_arr.append(a)\n        ty2_arr.append(b)\n        ty3_arr.append(c)\n        t_arr.append(t)\n\n        \n    if plot_val==\"phase\":\n        x = list(np.arange(-1.0001, -0.999, 0.0001))\n        ideal_d_f = [d_f(i) for i in x]\n        ideal_d_f_eu = [d_f(i) for i in a]\n        ideal_d_f_ty1 = [d_f(i) for i in b]\n        ideal_d_f_ty2 = [d_f(i) for i in c]\n        f, ax = plt.subplots(1, 1, **fig_kwargs)\n        ax.plot(x, ideal_d_f)\n        ax.scatter(a, ideal_d_f_eu)\n        ax.scatter(b, ideal_d_f_ty1)\n        ax.scatter(c, ideal_d_f_ty2)\n        ax.legend(['Ideal', 'Euler', 'Taylor (degree: 2)', 'Taylor (degree: 3)'])\n        ax.set_ylabel(\"dx\/dt\", fontsize=18)\n        ax.set_xlabel(\"x\", fontsize=18)\n        plt.grid()\n        print(ideal_d_f_eu[-1], ideal_d_f_ty1[-1], ideal_d_f_ty2[-1])\n        \n    elif plot_val == \"val\":\n        f, ax = plt.subplots(1, 1, **fig_kwargs)\n        x = np.arange(phase_range[0], phase_range[1], phase_step)\n        d_x = [d_f(i) for i in x]\n        if calculate_points:\n            stable, unstable, ND, tot_points_id = give_points(d_x, x, tol=tol)\n        if not leg_stable and stable != []:\n            print(\"leg_stable depricated\")\n            leg_stable = \",\".join(map(lambda x: str(round(x, 2)), stable))\n        if not leg_unstable and unstable != []:\n            print(\"leg_unstable depricated\")\n            leg_unstable = \",\".join(map(lambda x: str(round(x, 2)), unstable))\n        if not leg_ND and ND != []:\n            print(\"leg_ND depricated\")\n            leg_ND = \",\".join(map(lambda x: str(round(x, 2)), ND))\n        print(stable, unstable, ND)\n        if stable != []:\n            ax.scatter(stable, np.zeros(len(stable)), s = markersize, \\\n                       c=\"black\", label=leg_stable)\n        if unstable != []:\n            ax.scatter(unstable, np.zeros(len(unstable)), s = markersize, \\\n                       marker=\"o\", facecolors='none', edgecolors='black', \\\n                       label=leg_unstable)\n        if ND != []:\n            marker_style = dict(color='black', linestyle=':', marker='o', \\\n                                markersize=markersize\/\/12, \\\n                                markerfacecoloralt='white')\n            if not ND_arr:\n                ax.plot(ND, np.zeros(len(ND)), fillstyle=\"right\", \\\n                        **marker_style, label=leg_ND)\n            else:\n                for i in range(len(ND)):\n                    ax.plot([ND[i]], [0], label=leg_ND, \\\n                            fillstyle=ND_arr[i], **marker_style)\n        ax.legend(prop={'size': legend_fontsize})\n        if calculate_points and not tick_points:\n            tot_points_id.insert(0, 0)\n            tot_points_id.append(len(x) - 1)\n            for idx in range(len(tot_points_id) - 1):\n                idx = (tot_points_id[idx] + tot_points_id[idx + 1])\/\/ 2\n                if d_x[idx] > 0:\n                    ax.scatter([x[idx]], [0], marker=\"$>$\", c='k', s=markersize)\n                elif d_x[idx] < 0:\n                    ax.scatter([x[idx]], [0], marker=\"$<$\", c='k', s=markersize)\n        else:\n            \n            for point in tick_points:\n                if d_f(point) > 0:\n                    ax.scatter([point], [0], marker=\"$>$\", c='k', s=markersize)\n                else:\n                    ax.scatter([point], [0], marker=\"$<$\", c='k', s=markersize)\n        ax.plot(x, d_x)\n        plt.grid()\n        plt.axhline(y=0, color='k')\n        plt.axvline(x=0, color='k')\n        if xlabel:\n            ax.set_xlabel(xlabel, fontsize=18)\n        else:\n            ax.set_xlabel(r'$x$', fontsize=18)\n        if ylabel:\n            ax.set_ylabel(ylabel, rotation=0, fontsize=18)\n        else:\n            ax.set_ylabel(r'$\\dot{x}$', rotation=0, fontsize=18)\n    \n        ax.yaxis.set_label_coords(-0.06, 0.5)\n        plt.title(\"Phase plot\")\n        if save_fig:\n            plt.savefig(save_fig + \"_phase.png\", dpi=dpi_phase)\n            \n        if not ics_arr_sym:\n            ics_arr_sym = list(map(lambda x: round(x, 2), ics_arr))\n        plt.figure(**fig_kwargs)\n        for i in range(len(eu_arr)):\n            plt.plot(t_arr[i], eu_arr[i])\n        plt.grid()\n        plt.legend(ics_arr_sym, bbox_to_anchor=bbox_to_anchor)\n        plt.title(\"Euler analysis plot\")\n        plt.ylabel(r'$x$', rotation=0, fontsize=18)\n        plt.xlabel(r'$t$', fontsize=18)\n        if save_fig:\n            plt.savefig(save_fig + \"_eu.png\", dpi=dpi)\n        \n        plt.figure(**fig_kwargs)\n        for i in range(len(ty2_arr)):\n            plt.plot(t_arr[i], ty2_arr[i])\n        plt.grid()\n        plt.legend(ics_arr_sym, bbox_to_anchor=bbox_to_anchor)\n        plt.title(\"Taylor (D:2) analysis plot\")\n        plt.ylabel(r'$x$', rotation=0, fontsize=18)\n        plt.xlabel(r'$t$', fontsize=18)\n        if save_fig:\n            plt.savefig(save_fig + \"_ty2.png\", dpi=dpi)\n        \n        \n        plt.figure(**fig_kwargs)\n        for i in range(len(ty3_arr)):\n            plt.plot(t_arr[i], ty3_arr[i])\n        plt.grid()\n        plt.legend(ics_arr_sym, bbox_to_anchor=bbox_to_anchor)\n        plt.title(\"Taylor (D:3) analysis plot\")\n        plt.ylabel(r'$x$', rotation=0, fontsize=18)\n        plt.xlabel(r'$t$', fontsize=18)\n        if save_fig:\n            plt.savefig(save_fig + \"_ty3.png\", dpi=dpi)\n        \n        ","c9af6a49":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = x**2 - 1\nics_arr = [1.000001, 0.9999, 0, -0.9999, -1.001, -3]\nics_arr.sort(reverse=True)\nics_arr_sym = ics_arr\nrange_ = [0, 8]\ntime_step = 0.1\nrange_phase = [-2, 2]\nphase_step = 0.001\ntest_phase(f, x, t, ics_arr, range_, time_step, range_phase, \\\n           phase_step, figsize=(10, 10),save_fig=\"S41A\", \\\n           calculate_points=True, ics_arr_sym=ics_arr_sym)","c78c13cd":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = -x**3\nics_arr = [0.001, -0.015, 1, -1]\nics_arr.sort(reverse=True)\nics_arr_sym = ics_arr\nrange_ = [0, 2000]\ntime_step = 0.1\nrange_phase = [-5, 5]\nphase_step = 0.001\nl_temp = [-3, 3]\ntest_phase(f, x, t, ics_arr, range_, time_step, range_phase, phase_step, \\\n           figsize=(12, 12), \\\n           save_fig=\"S41B\", \\\n           stable=[0], unstable=[], ND=[], tick_points=l_temp, ics_arr_sym=ics_arr_sym)","0de0f615":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = x**3\nics_arr = [0.105, -0.105, 0.11, -0.11]\nics_arr.sort(reverse=True)\nics_arr_sym = ics_arr\nrange_ = [0, 40]\ntime_step = 0.01\nrange_phase = [-5, 5]\nphase_step = 0.001\nstable = []\nunstable = [0]\nND = []\n#ND_arr = ['left']\nticks = [-3, 3]\ntest_phase(f, x, t, ics_arr, range_, time_step, range_phase, phase_step, \\\n           figsize=(12, 12), \\\n           save_fig=\"S41C\", \\\n           stable=stable, unstable=unstable, ND=ND, tick_points=ticks, ics_arr_sym=ics_arr_sym)#, ND_arr=ND_arr)","17b55f5d":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = x**2\nics_arr = [-0.2, -0.1, -0.017, -0.012, 0.008, 0.00805]\nics_arr.sort(reverse=True)\nics_arr_sym = ics_arr\nrange_ = [0, 123.5]\ntime_step = 0.001\nrange_phase = [-2, 2]\nphase_step = 0.001\nstable = []\nunstable = []\nND = [0]\nND_arr = ['left']\nticks = [-1, 1]\ntest_phase(f, x, t, ics_arr, range_, time_step, range_phase, phase_step, \\\n           figsize=(10, 10), \\\n           save_fig=\"S41D\", \\\n           stable=stable, unstable=unstable, ND=ND, tick_points=ticks, ND_arr=ND_arr, ics_arr_sym=ics_arr_sym)","ce5e2457":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = 4*x**2 - 16\nics_arr = [-3, -2.001, 0, -1, 1, 2.001, 2.0011, 1.9]\nics_arr.sort(reverse=True)\nics_arr_sym = ics_arr\nrange_ = [0, 0.5]\ntime_step = 0.001\nrange_phase = [-4, 4]\nphase_step = 0.001\nstable = [-2]\nunstable = [2]\nND = []\nND_arr = []\nticks = [0, 3, -3]\ntest_phase(f, x, t, ics_arr, range_, time_step, range_phase, phase_step, \\\n           figsize=(10, 10), \\\n           save_fig=\"S41E\", \\\n           stable=stable, unstable=unstable, ND=ND, tick_points=ticks, ND_arr=ND_arr, ics_arr_sym=ics_arr_sym)","bff3c266":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = 1 - x**14\nics_arr = [-0.999, 0, 1.2, 0.8, -1.00001, -1.000001]\nics_arr.sort(reverse=True)\nics_arr_sym = ics_arr\nrange_ = [0, 2.5]\ntime_step = 0.0001\nrange_phase = [-1.1, 1.1]\nphase_step = 0.001\nstable = [1]\nunstable = [-1]\nND = []\nND_arr = []\nticks = [0, -1.2, 1.2]\ntest_phase(f, x, t, ics_arr, range_, time_step, range_phase, phase_step, \\\n           figsize=(10, 10), \\\n           save_fig=\"S41F\", \\\n           stable=stable, unstable=unstable, ND=ND, tick_points=ticks, \\\n           ND_arr=ND_arr, penalty=2, ics_arr_sym=ics_arr_sym)","e96e17d5":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = x - x**3\nics_arr = [-4, 4, -1.5, 0.5, 0.01, -0.01, 0.1, -0.1, 0.5, 1.5]\nics_arr.sort(reverse=True)\nrange_ = [0, 7]\ntime_step = 0.01\nrange_phase = [-1.8, 1.8]\nphase_step = 0.001\nstable = [1, -1]\nunstable = [0]\nND = []\nND_arr = []\nticks = [0.5, -0.5, 1.5, -1.5]\ntest_phase(f, x, t, ics_arr, range_, time_step, range_phase, \\\n           phase_step, figsize=(10, 10), \\\n           save_fig=\"S41G\", \\\n           stable=stable, unstable=unstable, ND=ND, \\\n           tick_points=ticks, ND_arr=ND_arr, penalty=0)","6e45765f":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = sp.exp(-x)*sp.sin(x)\nics_arr = [-0.001, 0.2, 0.9, 2, pi + 1, pi + 1.5, 2*pi + 0.001][::-1]\nics_arr_sym = [\"-0.001\", \"0.2\", \"0.9\", \"2\", \"$\\pi + 1$\", \\\n               \"$\\pi + 1.5$\", \"$2\\pi + 0.001$\"][::-1]\nrange_ = [0, 150]\ntime_step = 0.05\nrange_phase = [-0.2, 7]\nphase_step = 0.001\nleg_stable = r\"$\\pi\\hspace{2}(2k+1)\\pi$\"\nleg_unstable = r\"$0,2\\pi\\hspace{2}2k\\pi$\"\ntest_phase(f, x, t, ics_arr, range_, time_step, range_phase, \\\n           phase_step, figsize=(10, 10), save_fig=\"S41H\", \\\n           stable=[pi], unstable=[0, 2*pi], ND=[], \\\n           tick_points=[-0.4, pi\/2, 3*pi\/2, 2*pi + 0.4], \\\n           bbox_to_anchor=(0.9, 0.9), \\\n           leg_stable=leg_stable, leg_unstable=leg_unstable, \\\n           ics_arr_sym=ics_arr_sym, legend_fontsize=15)","ac7720f8":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = 1 + 0.5*sp.sin(x)\nics_arr = list(range(-4, 5))\n\nrange_ = [0, 20]\ntime_step = 0.01\nrange_phase = [-5, 5]\nphase_step = 0.001\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(12, 12), \\\n           save_fig=\"S41I\", \\\n           stable=[], unstable=[], ND=[], \\\n           tick_points=[-2.5, 2.5], )","387d1c90":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = 1 - 2*sp.cos(x)\ntemp = pi\/3\ntemp2 = 2*pi\nics_arr_tmp = [temp + 0.01, temp - 0.01, temp + temp2 + 0.01, \\\n           temp + temp2 - 0.01, temp - temp2 + 0.01, \\\n           temp - temp2 - 0.01]\nics_arr_sym_tmp = [r\"$ \\frac{\\pi}{3} + 0.01$\", r\"$ \\frac{\\pi}{3} - 0.01$\", \\\n               r\"$ \\frac{7\\pi}{3} + 0.01$\", r\"$ \\frac{7\\pi}{3} - 0.01$\", \\\n               r\"$ \\frac{-5\\pi}{3} + 0.01$\", r\"$ \\frac{-5\\pi}{3} - 0.01$\", ]\nics_arr = sorted(list(ics_arr_tmp), reverse=True)\nics_arr_sym = [ics_arr_sym_tmp[ics_arr_tmp.index(i)] for i in ics_arr]\nrange_ = [0, 7]\ntime_step = 0.01\nrange_phase = [-10, 10]\nphase_step = 0.001\nstable = [-pi\/3, -pi\/3 - 2*pi, -pi\/3 + 2*pi]\nleg_stable = r\"$\\frac{-7\\pi}{3},\\frac{-\\pi}{3},\\frac{5\\pi}{3}\\Rightarrow\\frac{(6k - 1)}{3}\\pi$\"\nunstable = [pi\/3, pi\/3 + 2*pi, pi\/3 - 2*pi]\nleg_unstable = r\"$\\frac{-5\\pi}{3},\\frac{\\pi}{3},\\frac{7\\pi}{3}\\Rightarrow\\frac{(6k + 1)}{3}\\pi$\"\nND = []\nND_arr = []\nticks = [0, pi, -pi, -2*pi, 2*pi, 3*pi, -3*pi]\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(10, 10), \\\n           save_fig=\"S41Ja\", \\\n           stable=stable, unstable=unstable, ND=ND, \\\n           tick_points=ticks, ND_arr=ND_arr, penalty=0,  \\\n          ics_arr_sym=ics_arr_sym, leg_stable=leg_stable, \\\n           leg_unstable=leg_unstable, legend_fontsize=14)","af374b98":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = 1 - 2*sp.cos(x)\ntemp = pi\/3\ntemp2 = 2*pi\nics_arr_tmp = [temp + 0.01, temp - 0.01, temp + temp2 + 0.01, \\\n           temp + temp2 - 0.01, temp - temp2 + 0.01, \\\n           temp - temp2 - 0.01, (temp + temp2\/2)\/2 + 0.01, \\\n           2*pi - 0.01, 0.01, -pi - 0.01, 3*pi, -2*pi]\nics_arr_sym_tmp = [r\"$ \\frac{\\pi}{3} + 0.01$\", r\"$ \\frac{\\pi}{3} - 0.01$\", \\\n               r\"$ \\frac{7\\pi}{3} + 0.01$\", r\"$ \\frac{7\\pi}{3} - 0.01$\", \\\n               r\"$ \\frac{-5\\pi}{3} + 0.01$\", r\"$ \\frac{-5\\pi}{3} - 0.01$\", \\\n               r\"$ \\frac{2\\pi}{3} + 0.01$\", r\"$ 2\\pi - 0.01$\", \\\n               r\"$ 0.01$\", r\"$ -\\pi - 0.01$\", r\"$3\\pi$\", r\"$-2\\pi$\" ]\nics_arr = sorted(list(ics_arr_tmp), reverse=True)\nics_arr_sym = [ics_arr_sym_tmp[ics_arr_tmp.index(i)] for i in ics_arr]\nrange_ = [0, 7]\ntime_step = 0.01\nrange_phase = [-10, 10]\nphase_step = 0.001\nstable = [-pi\/3, -pi\/3 - 2*pi, -pi\/3 + 2*pi]\nleg_stable = r\"$\\frac{-7\\pi}{3},\\frac{-\\pi}{3},\\frac{5\\pi}{3}\\Rightarrow\\frac{(6k - 1)}{3}\\pi$\"\nunstable = [pi\/3, pi\/3 + 2*pi, pi\/3 - 2*pi]\nleg_unstable = r\"$\\frac{-5\\pi}{3},\\frac{\\pi}{3},\\frac{7\\pi}{3}\\Rightarrow\\frac{(6k + 1)}{3}\\pi$\"\nND = []\nND_arr = []\nticks = [0, pi, -pi, -2*pi, 2*pi, 3*pi, -3*pi]\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(10, 10), \\\n           save_fig=\"S41Jb\", \\\n           stable=stable, unstable=unstable, ND=ND, \\\n           tick_points=ticks, ND_arr=ND_arr, penalty=0, \\\n           ics_arr_sym=ics_arr_sym, leg_stable=leg_stable, \\\n           leg_unstable=leg_unstable, legend_fontsize=15, \\\n           bbox_to_anchor=(1, 1))","e91e0535":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = sp.exp(x) - sp.cos(x)\nics_arr = [-5, -4.8, -4.2, -2.5, -0.6, \\\n           -0.2, 0.0006, 0.001]\nics_arr.sort(reverse=True)\nics_arr_sym = ics_arr\nrange_ = [0, 6.55]\ntime_step = 0.01\nrange_phase = [-5, 1]\nphase_step = 0.00001\ntick_points = [1, -0.6, -3, -5]\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(12, 12), \\\n           save_fig=\"S41K\", \\\n           tick_points=tick_points, calculate_points=True, \\\n           tol=5e-6, penalty=10, ics_arr_sym=ics_arr_sym)","e50c34e3":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = x*(1 - x)\nics_arr = [-0.004, 0.1, 0.5, 2, 3]\nics_arr.sort(reverse=True)\nics_arr_sym = ics_arr\nrange_ = [0, 6.5]\ntime_step = 0.1\nrange_phase = [-1, 2]\nphase_step = 0.01\nstable = [1]\nunstable = [0]\nND = []\nND_arr = []\nticks = [-0.5, 0.5, 1.5]\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(10, 10), \\\n           save_fig=\"S42A\", \\\n           stable=stable, unstable=unstable, ND=ND, \\\n           tick_points=ticks, ND_arr=ND_arr, ics_arr_sym=ics_arr_sym)","85ccbfed":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = x*(1 - x)*(2 - x)\nics_arr = [-0.001, 0.1, 0.5, 1.5, 1.99, 2.001]\nics_arr.sort(reverse=True)\nics_arr_sym = ics_arr\nrange_ = [0, 6.5]\ntime_step = 0.1\nrange_phase = [-0.6, 2.6]\nphase_step = 0.01\nstable = [1]\nunstable = [0, 2]\nND = []\nND_arr = []\nticks = [-0.3, 0.5, 1.5, 2.3]\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(10, 10), \\\n           save_fig=\"S42B\", \\\n           stable=stable, unstable=unstable, ND=ND, \\\n           tick_points=ticks, ND_arr=ND_arr, penalty=3, ics_arr_sym=ics_arr_sym)","3629090e":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = sp.tan(x)\nics_arr = [-0.001, -0.0005, -0.00025, 0.00025, 0.0005, 0.001]\nics_arr.sort(reverse=True)\nics_arr_sym = ics_arr\nrange_ = [0.001, -log(sin(0.001)) - 0.005]\ntime_step = 0.001\nrange_phase = [-pi\/2 + 0.2, pi\/2 - 0.2]\nphase_step = 0.01\nstable = []\nunstable = [0]\nND = []\nND_arr = []\nticks = [-pi\/4 + 0.1, pi\/4 - 0.1]\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(10, 10), \\\n           save_fig=\"S42C\", \\\n           stable=stable, unstable=unstable, ND=ND, \\\n           tick_points=ticks, ND_arr=ND_arr, penalty=3, \\\n           ics_arr_sym=ics_arr_sym)","f457f888":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = (x**2)*(6 - x)\nics_arr = [-2, -1, -0.2, 0.1, 0.15, 0.2, 0.5, 1, 4, 6.5, 7, 8, 10][::-1]\nrange_ = [0, 2]\ntime_step = 0.001\nrange_phase = [-2, 7]\nphase_step = 0.01\nstable = [6]\nunstable = []\nND = [0]\nND_arr = [\"left\"]\nticks = [-1, 3, 6.5]\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(10, 10), \\\n           save_fig=\"S42D\", \\\n           stable=stable, unstable=unstable, ND=ND, \\\n           tick_points=ticks, ND_arr=ND_arr, penalty=3, \\\n           bbox_to_anchor=(1, 1))","543c6b4a":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = 1 - sp.exp(-x**2)\nics_arr = [-5, -4, -3, -2, -1, -0.5, -0.1, .1, .2, 0.5, 1, 2, 3][::-1]\nrange_ = [0, 20]\ntime_step = 0.01\nrange_phase = [-2, 2]\nphase_step = 0.01\nstable = []\nunstable = []\nND = [0]\nND_arr = [\"left\"]\nticks = [-1, 1]\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(10, 10), \\\n           save_fig=\"S42E\", \\\n           stable=stable, unstable=unstable, ND=ND, \\\n           tick_points=ticks, ND_arr=ND_arr, penalty=3, \\\n           bbox_to_anchor=(1, 1))","f01673da":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = 1 - sp.exp(-x**2)\nics_arr = [-5, -4, -3, -2, -1, -0.5, -0.1, .1, .2, 0.5, 1, 2, 3][::-1]\nrange_ = [0, 20]\ntime_step = 0.01\nrange_phase = [-2, 2]\nphase_step = 0.01\nstable = []\nunstable = []\nND = [0]\nND_arr = [\"left\"]\nticks = [-1, 1]\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(10, 10), \\\n           save_fig=\"S42E\", \\\n           stable=stable, unstable=unstable, ND=ND, \\\n           tick_points=ticks, ND_arr=ND_arr, penalty=3, \\\n           bbox_to_anchor=(1, 1))","8d2a31e3":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = sp.log(x)\nics_arr = [0.80, 0.85, 0.9, 0.95, 1.05, 1.1, 2][::-1]\nrange_ = [0, 15]\ntime_step = 0.01\nrange_phase = [0.1, 5]\nphase_step = 0.01\nstable = []\nunstable = [1]\nND = []\nND_arr = []\nticks = [0.5, 2.5]\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(10, 10), \\\n           save_fig=\"S42Fa\", \\\n           stable=stable, unstable=unstable, ND=ND, \\\n           tick_points=ticks, ND_arr=ND_arr, penalty=3, \\\n           bbox_to_anchor=(1, 1))","70e659ba":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = sp.log(x)\nics_arr = [0.95, 0.96, 0.97, 1.05, 1.1, 2][::-1]\nrange_ = [0, 2.4]\ntime_step = 0.01\nrange_phase = [0.1, 5]\nphase_step = 0.01\nstable = []\nunstable = [1]\nND = []\nND_arr = []\nticks = [0.5, 2.5]\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(10, 10), \\\n           save_fig=\"S52Fb\", \\\n           stable=stable, unstable=unstable, ND=ND, \\\n           tick_points=ticks, ND_arr=ND_arr, penalty=3, \\\n           bbox_to_anchor=(1, 1))","3ce486e7":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\na = -1\nf = a*x - x**3\nics_arr = [-1, -0.5, -0.25, 0.25, 0.5, 1][::-1]\nrange_ = [0, 7]\ntime_step = 0.01\nrange_phase = [-3, 3]\nphase_step = 0.01\nstable = [0]\nunstable = []\nND = []\nND_arr = []\nticks = [-1.5, 1.5]\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(10, 10), \\\n           save_fig=\"S42Ga\", \\\n           stable=stable, unstable=unstable, ND=ND, \\\n           tick_points=ticks, ND_arr=ND_arr, penalty=3, \\\n           bbox_to_anchor=(1, 1))","1f5a5055":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\na = 1\nf = a*x - x**3\nics_arr = [-2, -1.5, -0.5, -0.1, 0.1, 0.5, 1.5, 2][::-1]\nrange_ = [0, 5]\ntime_step = 0.01\nrange_phase = [-2, 2]\nphase_step = 0.01\nstable = [-1, 1]\nunstable = [0]\nND = []\nND_arr = []\nticks = [-1.5, -0.5, 0.5, 1.5]\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(10, 10), \\\n           save_fig=\"S42Gb\", \\\n           stable=stable, unstable=unstable, ND=ND, \\\n           tick_points=ticks, ND_arr=ND_arr, penalty=3, \\\n           bbox_to_anchor=(1, 1))","802575dd":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nm = 110 #kg\ng = 9.8 #ms^-2\nk = 0.18\nA = g\nB = k\/m\nf = A - B*x*x\nt_f = lambda t: sqrt(A\/B)*tanh(sqrt(A*B)*t)\nans = test(f, x, t, 0, [0, 50], 0.001, true_function = t_f, \\\n           plot_val=True, display=True, analysis=False, \\\n           save_fig=\"S51.png\", \\\n           figsize=(24, 10), ylabel=\"$v(t)$\")\nans = test(f, x, t, 0, [0, 50], 0.001, true_function = t_f, \\\n           plot_val='error', display=True, analysis=True, \\\n           save_fig=\"S51e.png\", figsize=(40, 10))","b7d4e96f":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nv0 = 4\nP = 400 #ms^-2\nm = 70\nb = 0.5\nA = 0.33\nrho = 1.25\nf = P\/(m*x)\nt_f = lambda t: sqrt(v0**2 + (2*P*t\/m))\nans = test(f, x, t, 4, [0, 100], 0.001, true_function = t_f, \\\n           plot_val=True, display=True, analysis=False, \\\n           save_fig=\"S52a.png\", figsize=(24, 10), \\\n           ylabel=\"$v(t)$\")\nans = test(f, x, t, 4, [0, 100], 0.001, true_function = t_f, \\\n           plot_val='error', display=True, analysis=True, \\\n           save_fig=\"S52ae.png\", figsize=(40, 10))","0d2cce71":"# set 5 problem 2b\nt = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nv0 = 4\nP = 400 #ms^-2\nm = 70\nb = 0.5\nA = 0.33\nrho = 1.25\nf = P\/(m*x) - ((b*rho*A)\/m)*x**2\n\na, _b, c, t = _euler(f, x, t, 4, [0, 100], 0.1)\nplt.figure(figsize=(10, 10))\nplt.plot(t, a)\nplt.plot(t, _b)\nplt.plot(t, c)\nplt.grid()\nplt.ylabel(\"$v(t)$\", fontsize=18)\nplt.xlabel(\"$t$\", fontsize=18)\nplt.legend(['Euler', 'Taylor (degree: 2)', 'Taylor (degree: 3)'])\nplt.savefig(\"S52b.png\", dpi=100)\nprint(\"Taylor (D:3) array's rearmost value:\", c[-1])\nprint(\"Terminal velocity: \", (P\/(b*rho*A))**(1\/3))","39faa273":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nv0 = 4\nP = 400 #ms^-2\nm = 70\nb = 0.5\nA = 0.33\nrho = 1.25\nf = P\/(m*x) - ((b*rho*A)\/m)*x**2\n\nics_arr = [4]\nics_arr.sort(reverse=True)\nics_arr_sym = ics_arr\nrange_ = [0, 60]\ntime_step = 0.1\nrange_phase = [0.4, 30]\nphase_step = 0.01\nstable = [(P\/(b*rho*A))**(1\/3)]\nunstable = []\nND = []\nND_arr = []\nleg_stable = r\"$(\\frac{P}{b\\rho A})^\\frac{1}{3}$\"+\"= 12.47\"\nticks = [6, 23]\nylabel = r\"$\\dot{v}$\"\nxlabel = r\"$v$\"\ntest_phase(f, x, t, ics_arr, range_, time_step, \\\n           range_phase, phase_step, figsize=(10, 10), \\\n           save_fig=\"S42A\", \\\n           stable=stable, unstable=unstable, ND=ND, \\\n           tick_points=ticks, ND_arr=ND_arr, \\\n           ics_arr_sym=ics_arr_sym, \\\n           leg_stable=leg_stable, legend_fontsize=15, \\\n           xlabel=xlabel, ylabel=ylabel)","684c02bc":"# set 5 problem 2b\nt = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nv0 = 4\nP = 400 #ms^-2\nm = 70\nb = 0.5\nA = 0.33\nrho = 1.25\na = Symbol('a')\nb = Symbol('b')\ndsolve((x\/(1 - x**3))*x.diff(t) - 1, x, ics={x.subs(t, 0):4})","954cc8e0":"t = Symbol('t')\nx = Symbol('x')\nf = Function('f')(x, t)\nf = t**2 - x\ny = Function('y')(t)\n#dsolve(y.diff(t) + y - t**2, y, ics={y.subs(t, 0):1})\ndiff_eq = y.diff(t) + y - t**2\nans = test(f, x, t, 1, [0, 2], 0.01, display=True, base_solver=_euler_na, \\\n           plot_val=True, #save_fig=\"Output.png\",\\\n           figsize=(20, 10), solve_symbolically=True, \\\n           function_=y, inde_var=t, diff_eq=diff_eq, analysis=False)\nans = test(f, x, t, 1, [0, 2], 0.01, display=True, base_solver=_euler_na, \\\n           plot_val=True, #save_fig=\"Output.png\",\\\n           figsize=(20, 10), solve_symbolically=True, function_=y,\\\n           inde_var=t, diff_eq=diff_eq)\n","e784f4ba":"x = Symbol('x')\nf = Function('f')(x)\nf = -1*x*x\na, b, c, t_ = _euler(f, x, None, 1, [1, 2], 0.01)\nideal = 1\/t_\nans = test(f, x, None, 1, [1, 2], 0.01, true_array=ideal,\n           plot_val=True, display=True, #save_fig=\"Output.png\",\n            figsize=(20, 10))\n","af39e6b6":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = -1*x*x\ndiff_eq = x.diff(t) + x*x  # = 0 explicitly\nans = test(f, x, None, 1, [1, 2], 0.01, solve_symbolically=True, function_=x,\n            inde_var=t, diff_eq=x.diff(t) + x*x, plot_val=True, \\\n           display=True, #save_fig=\"Output.png\",\n            figsize=(20, 10))","2df35405":"t = Symbol('t')\nx = Function('x')(t)\nf = Function('f')(x)\nf = -1*x*x\ntrue_function = lambda t: 1\/t\nans = test(f, x, None, 1, [1, 2], 0.01, true_function=true_function, plot_val=True, display=True, #save_fig=\"Output.png\",\n            figsize=(20, 10))","4c9f7266":"x = Symbol('x')\nt = Symbol('t')\nf = Function('f')(x, t)\nf = -x + sp.exp(-t)\na, b, c, t_ = _euler_na(f, x, t, 1, [0, 2], 0.01)\nideal = (1 + t_)*np.exp(-t_)\nans = test(f, x, t, 1, [0, 2], 0.01, display=True, true_array=ideal, base_solver=_euler_na, plot_val=True, #save_fig=\"Output.png\",\n            figsize=(20, 10))","043f2d1f":"t = Symbol('t')\nx = Symbol('x')\nf = Function('f')(x, t)\nf = -x + sp.exp(-t)\ny = Function('y')(t) # depricated x as y\n\nans = test(f, x, t, 1, [0, 2], 0.01, display=True, \\\n           base_solver=_euler_na, plot_val=True, #save_fig=\"Output.png\",\n            figsize=(20, 10), solve_symbolically=True, function_=y,\n            inde_var=t, diff_eq=y.diff(t) + y - sp.exp(-t))","52f7270a":"t = Symbol('t')\nx = Symbol('x')\nf = Function('f')(x, t)\nf = -x + sp.exp(-t)\n\nans = test(f, x, t, 1, [0, 2], 0.01, display=True, \\\n           true_function=lambda t: (t+1)*exp(-t), \\\n           base_solver=_euler_na, plot_val=True, #save_fig=\"Output.png\",\n            figsize=(20, 10))","3bd6d327":"**Part 4(1):**","6bb29dd1":"**Advanced analysis of differential equations and their solvers (i.e. Euler method, Taylor degree 2 method, Taylor degree 3 method):**\n\nHere we have automated analysis functions that will help us analyze the ODEs.\nsolvers: \n1. eq_solve -> returns string which is the ideal solution of your ODE (symbolic integration). Core: sympy dsolve solver\n2. eq_solve_ideal -> returns array of f_ideal(t) for given t array. Core eq_solve and eval string from math\n3. \\_euler -> Analysis using Euler method, Taylor degree 2 method, Taylor degree 3 method for autonomous ODEs\n4. \\_euler_na -> Analysis using Euler method, Taylor degree 2 method, Taylor degree 3 method for non-autonomous ODEs\n5. print_error -> prints error\/loss in each of the analyses\n6. print_steps -> prints progress of these algorithms and shows the value(s) of each methods at given t(s).\n7. test -> Test the provided ODE with every solvers and shows progress and errors\/losses w.r.t. ideal values provided either directly given or function or asked for auto-solve(That will solve the equation by eq_solve_ideal and no question about solving manually).\nStability analysis using phase plot:\n8. give_points -> returns stable, unstable and undefined points of the dependent variable\n9. \\_euler_over_flow_controlled -> Specially created for stability analysis of autonomous ODEs that will have control over the values given by these three algorithms and will give penalty for stable graph points. Just because uncontrolled initial values or range of independent variable sometimes leads to a number that is order of (+\/-)1e200 which is divergence towards infinite and hense OverflowError)\n10. test_phase -> Test of Stability analysis using phase plot. Providing it some initial values and ODEs and it will show how they are converged and at which point(towards a stable) or how they are diverging(unstable and no stable point it that path) controlling their overflow or some intermideate solutions (undefined or partially stable points e.g. left stable + right unstable or left unstable + right stable)","a93e1d61":"**Example Templates:**","352556b5":"**Part 4(2):**","cd69341f":"**Part 5:**"}}