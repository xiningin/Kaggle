{"cell_type":{"3a57ad3a":"code","18336766":"code","7b916014":"code","96586d87":"code","a804905f":"code","bb971437":"code","d83f052f":"code","3cc3cbe3":"code","78927e1f":"code","a8548d02":"code","8289fc74":"code","c769956d":"code","0589f94b":"code","b395f1dc":"code","e78c0a0d":"code","f63fcd6d":"code","4a2e4a4f":"code","0b28e525":"code","d12d12dd":"code","b487aa29":"code","dd7b8e3f":"code","5552d408":"code","20a0d489":"code","b85d60b2":"code","5c8e008b":"code","31033048":"code","0da6044c":"code","cb11907d":"code","8e82a2bb":"code","4779c433":"code","af547130":"code","d957ee7b":"code","3a152f1c":"code","6c037449":"code","78330d90":"code","b57a0856":"code","766bc548":"code","004f351e":"code","7d1f95c6":"code","eb7d8d18":"code","0fa406be":"markdown","5ac992bd":"markdown","9995ff55":"markdown","251bb4d8":"markdown","2a6a5685":"markdown","75990bf9":"markdown","c61d7aed":"markdown","39be5ba9":"markdown","b71891ad":"markdown","2a3314c2":"markdown","58465a6c":"markdown","f70c069b":"markdown","39c8726e":"markdown","f7a9414b":"markdown","91075967":"markdown","0e2adda0":"markdown","3f35507a":"markdown","13c16c3e":"markdown","b1954b95":"markdown","2b9dfa7b":"markdown","9a5bb16c":"markdown","c306d23b":"markdown","3475df48":"markdown","e64d4dd6":"markdown","c1d4ce57":"markdown","94e21777":"markdown","8d3fb673":"markdown","1ace9721":"markdown"},"source":{"3a57ad3a":"# Set parameters\nrandom_state = 10 # replace of 42 as in the others commits\n\n# LGB\nlearning_rate_lgb = 0.02\nmax_depth_lgb = 24\n\n# XGB\nlearning_rate_xgb = 0.02\nmax_depth_xgb = 16\n\n# NN\nDropout_par = 0.2\nlearning_rate_nn = 4e-4\nepochs_nn = 200 # upgrade - replace of 20 in the best commit 22 (in privat LB)\nn_splits_nn = 5\n\n# All\nweights_models = {'lbg': 0.7, 'xgb': 0.1, 'nn': 0.2}\n\n#learning_rate_cnn = 1e-4\n#epochs_cnn = 50\n#learning_rate_boost = 0.02","18336766":"import numpy as np\nimport pandas as pd\nimport shap\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom matplotlib import pyplot\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import cohen_kappa_score, mean_squared_error\nfrom sklearn.model_selection import KFold, StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder\nfrom random import choice\n\nimport xgboost as xgb\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom xgboost import plot_importance\nimport lightgbm as lgb\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.model_selection import GridSearchCV\nimport tensorflow as tf\n\nfrom time import time\nfrom tqdm import tqdm_notebook as tqdm\nfrom collections import Counter\nfrom scipy import stats\n\nimport gc\nimport json\npd.set_option('display.max_columns', 1000)\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)","7b916014":"def eval_qwk_lgb_regr(y_true, y_pred):\n    \"\"\"\n    Fast cappa eval function for lgb.\n    \"\"\"\n    dist = Counter(reduce_train['accuracy_group'])\n    for k in dist:\n        dist[k] \/= len(reduce_train)\n    reduce_train['accuracy_group'].hist()\n    \n    acum = 0\n    bound = {}\n    for i in range(3):\n        acum += dist[i]\n        bound[i] = np.percentile(y_pred, acum * 100)\n\n    def classify(x):\n        if x <= bound[0]:\n            return 0\n        elif x <= bound[1]:\n            return 1\n        elif x <= bound[2]:\n            return 2\n        else:\n            return 3\n\n    y_pred = np.array(list(map(classify, y_pred))).reshape(y_true.shape)\n\n    return 'cappa', cohen_kappa_score(y_true, y_pred, weights='quadratic'), True","96586d87":"def cohenkappa(ypred, y):\n    y = y.get_label().astype(\"int\")\n    ypred = ypred.reshape((4, -1)).argmax(axis = 0)\n    loss = cohenkappascore(y, y_pred, weights = 'quadratic')\n    return \"cappa\", loss, True","a804905f":"def read_data():\n    print('Reading train.csv file....')\n    train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv')\n    print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n\n    print('Reading test.csv file....')\n    test = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/test.csv')\n    print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n    print('Reading train_labels.csv file....')\n    train_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')\n    print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n    print('Reading specs.csv file....')\n    specs = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/specs.csv')\n    print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n    return train, test, train_labels, specs, sample_submission","bb971437":"def encode_title(train, test, train_labels):\n    # encode title\n    train['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), train['title'], train['event_code']))\n    test['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), test['title'], test['event_code']))\n    all_title_event_code = list(set(train[\"title_event_code\"].unique()).union(test[\"title_event_code\"].unique()))\n    # make a list with all the unique 'titles' from the train and test set\n    list_of_user_activities = list(set(train['title'].unique()).union(set(test['title'].unique())))\n    # make a list with all the unique 'event_code' from the train and test set\n    list_of_event_code = list(set(train['event_code'].unique()).union(set(test['event_code'].unique())))\n    list_of_event_id = list(set(train['event_id'].unique()).union(set(test['event_id'].unique())))\n    # make a list with all the unique worlds from the train and test set\n    list_of_worlds = list(set(train['world'].unique()).union(set(test['world'].unique())))\n    # create a dictionary numerating the titles\n    activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n    activities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n    activities_world = dict(zip(list_of_worlds, np.arange(len(list_of_worlds))))\n    assess_titles = list(set(train[train['type'] == 'Assessment']['title'].value_counts().index).union(set(test[test['type'] == 'Assessment']['title'].value_counts().index)))\n    # replace the text titles with the number titles from the dict\n    train['title'] = train['title'].map(activities_map)\n    test['title'] = test['title'].map(activities_map)\n    train['world'] = train['world'].map(activities_world)\n    test['world'] = test['world'].map(activities_world)\n    train_labels['title'] = train_labels['title'].map(activities_map)\n    win_code = dict(zip(activities_map.values(), (4100*np.ones(len(activities_map))).astype('int')))\n    # then, it set one element, the 'Bird Measurer (Assessment)' as 4110, 10 more than the rest\n    win_code[activities_map['Bird Measurer (Assessment)']] = 4110\n    # convert text into datetime\n    train['timestamp'] = pd.to_datetime(train['timestamp'])\n    test['timestamp'] = pd.to_datetime(test['timestamp'])\n\n    train['hour'] = train['timestamp'].dt.hour\n    test['hour'] = test['timestamp'].dt.hour\n    \n    return train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code","d83f052f":"clip_time = {'Welcome to Lost Lagoon!':19,'Tree Top City - Level 1':17,'Ordering Spheres':61, 'Costume Box':61,\n        '12 Monkeys':109,'Tree Top City - Level 2':25, 'Pirate\\'s Tale':80, 'Treasure Map':156,'Tree Top City - Level 3':26,\n        'Rulers':126, 'Magma Peak - Level 1':20, 'Slop Problem':60, 'Magma Peak - Level 2':22, 'Crystal Caves - Level 1':18,\n        'Balancing Act':72, 'Lifting Heavy Things':118,'Crystal Caves - Level 2':24, 'Honey Cake':142, 'Crystal Caves - Level 3':19,\n        'Heavy, Heavier, Heaviest':61}","3cc3cbe3":"# this is the function that convert the raw data into processed features\ndef get_data(user_sample, test_set=False):\n    '''\n    The user_sample is a DataFrame from train or test where the only one \n    installation_id is filtered\n    And the test_set parameter is related with the labels processing, that is only requered\n    if test_set=False\n    '''\n    # Constants and parameters declaration\n    last_activity = 0\n    \n    user_activities_count = {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n    \n    # new features: time spent in each activity\n    last_session_time_sec = 0\n    accuracy_groups = {0:0, 1:0, 2:0, 3:0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy = 0\n    accumulated_correct_attempts = 0 \n    accumulated_uncorrect_attempts = 0\n    accumulated_actions = 0\n    counter = 0\n    time_first_activity = float(user_sample['timestamp'].values[0])\n    durations = []\n    clip_durations = []\n    Activity_durations = []\n    Game_durations = []\n    \n    last_accuracy_title = {'acc_' + title: -1 for title in assess_titles}\n    event_code_count: Dict[str, int] = {ev: 0 for ev in list_of_event_code}\n    event_id_count: Dict[str, int] = {eve: 0 for eve in list_of_event_id}\n    title_count: Dict[str, int] = {eve: 0 for eve in activities_labels.values()} \n    title_event_code_count: Dict[str, int] = {t_eve: 0 for t_eve in all_title_event_code}\n        \n    # last features\n    sessions_count = 0\n    \n    # itarates through each session of one instalation_id\n    for i, session in user_sample.groupby('game_session', sort=False):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        \n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n        session_title_text = activities_labels[session_title]\n                    \n        if session_type == 'Clip':\n            clip_durations.append((clip_time[activities_labels[session_title]]))\n        \n        if session_type == 'Activity':\n            Activity_durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n        \n        if session_type == 'Game':\n            Game_durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            \n        # for each assessment, and only this kind off session, the features below are processed\n        # and a register are generated\n        if (session_type == 'Assessment') & (test_set or len(session)>1):\n            # search for event_code 4100, that represents the assessments trial\n            all_attempts = session.query(f'event_code == {win_code[session_title]}')\n            # then, check the numbers of wins and the number of losses\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # copy a dict to use as feature template, it's initialized with some itens: \n            # {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n            features = user_activities_count.copy()\n            features.update(last_accuracy_title.copy())\n            features.update(event_code_count.copy())\n            features.update(event_id_count.copy())\n            features.update(title_count.copy())\n            features.update(title_event_code_count.copy())\n            features.update(last_accuracy_title.copy())\n            features['installation_session_count'] = sessions_count\n            features['hour'] = session['hour'].iloc[-1]\n            \n            variety_features = [('var_event_code', event_code_count),\n                              ('var_event_id', event_id_count),\n                               ('var_title', title_count),\n                               ('var_title_event_code', title_event_code_count)]\n            \n            for name, dict_counts in variety_features:\n                arr = np.array(list(dict_counts.values()))\n                features[name] = np.count_nonzero(arr)\n                 \n            # get installation_id for aggregated features\n            features['installation_id'] = session['installation_id'].iloc[-1]\n            # add title as feature, remembering that title represents the name of the game\n            features['session_title'] = session['title'].iloc[0]\n            # the 4 lines below add the feature of the history of the trials of this player\n            # this is based on the all time attempts so far, at the moment of this assessment\n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts \n            accumulated_uncorrect_attempts += false_attempts\n            # the time spent in the app so far\n            if durations == []:\n                features['duration_mean'] = 0\n                features['duration_std'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n                features['duration_std'] = np.std(durations)\n                \n            if clip_durations == []:\n                features['Clip_duration_mean'] = 0\n                features['Clip_duration_std'] = 0\n            else:\n                features['Clip_duration_mean'] = np.mean(clip_durations)\n                features['Clip_duration_std'] = np.std(clip_durations)\n                \n            if Activity_durations == []:\n                features['Activity_duration_mean'] = 0\n                features['Activity_duration_std'] = 0\n            else:\n                features['Activity_duration_mean'] = np.mean(Activity_durations)\n                features['Activity_duration_std'] = np.std(Activity_durations)\n                \n            if Game_durations == []:\n                features['Game_duration_mean'] = 0\n                features['Game_duration_std'] = 0\n            else:\n                features['Game_duration_mean'] = np.mean(Game_durations)\n                features['Game_duration_std'] = np.std(Game_durations)\n                \n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            # the accurace is the all time wins divided by the all time attempts\n            features['accumulated_accuracy'] = accumulated_accuracy\/counter if counter > 0 else 0\n            accuracy = true_attempts\/(true_attempts+false_attempts) if (true_attempts+false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            last_accuracy_title['acc_' + session_title_text] = accuracy\n            # a feature of the current accuracy categorized\n            # it is a counter of how many times this player was in each accuracy group\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n            features.update(accuracy_groups)\n            accuracy_groups[features['accuracy_group']] += 1\n            # mean of the all accuracy groups of this player\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group\/counter if counter > 0 else 0\n            accumulated_accuracy_group += features['accuracy_group']\n            # how many actions the player has done so far, it is initialized as 0 and updated some lines below\n            features['accumulated_actions'] = accumulated_actions\n            \n            # there are some conditions to allow this features to be inserted in the datasets\n            # if it's a test set, all sessions belong to the final dataset\n            # it it's a train, needs to be passed throught this clausule: session.query(f'event_code == {win_code[session_title]}')\n            # that means, must exist an event_code 4100 or 4110\n            if test_set:\n                all_assessments.append(features)\n            elif true_attempts+false_attempts > 0:\n                all_assessments.append(features)\n                \n            counter += 1\n        \n        sessions_count += 1\n        # this piece counts how many actions was made in each event_code so far\n        def update_counters(counter: dict, col: str):\n                num_of_session_count = Counter(session[col])\n                for k in num_of_session_count.keys():\n                    x = k\n                    if col == 'title':\n                        x = activities_labels[k]\n                    counter[x] += num_of_session_count[k]\n                return counter\n            \n        event_code_count = update_counters(event_code_count, \"event_code\")\n        event_id_count = update_counters(event_id_count, \"event_id\")\n        title_count = update_counters(title_count, 'title')\n        title_event_code_count = update_counters(title_event_code_count, 'title_event_code')\n\n        # counts how many actions the player has done so far, used in the feature of the same name\n        accumulated_actions += len(session)\n        if last_activity != session_type:\n            user_activities_count[session_type] += 1\n            last_activitiy = session_type \n                        \n    # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return all_assessments[-1]\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments","78927e1f":"import random\nrandom.seed(69)\ndef get_train_and_test(train, test):\n    compiled_train = []\n    compiled_test = []\n    for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort = False)), total = 17000):\n        t = get_data(user_sample)\n        for xt in range(len(t)):\n            if xt != len(t) - 1:\n                if random.random() >= 0.25:\n                    compiled_train.append(t[xt])\n            else:\n                compiled_train.append(t[xt])\n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort = False), total = 1000):\n        test_data = get_data(user_sample, test_set = True)\n        compiled_test.append(test_data)\n    reduce_train = pd.DataFrame(compiled_train)\n    reduce_test = pd.DataFrame(compiled_test)\n    categoricals = ['session_title']\n    return reduce_train, reduce_test, categoricals","a8548d02":"# def get_train_and_test(train, test):\n#     compiled_train = []\n#     compiled_test = []\n#     for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort = False)), total = 17000):\n#         compiled_train += get_data(user_sample)\n#     for ins_id, user_sample in tqdm(test.groupby('installation_id', sort = False), total = 1000):\n#         test_data = get_data(user_sample, test_set = True)\n#         compiled_test.append(test_data)\n#     reduce_train = pd.DataFrame(compiled_train)\n#     reduce_test = pd.DataFrame(compiled_test)\n#     categoricals = ['session_title']\n#     return reduce_train, reduce_test, categoricals","8289fc74":"# read data\ntrain, test, train_labels, specs, sample_submission = read_data()\n# get usefull dict with maping encode\ntrain, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code = encode_title(train, test, train_labels)\n# tranform function to get the train and test set\nreduce_train, reduce_test, categoricals = get_train_and_test(train, test)","c769956d":"reduce_train.head(3)","0589f94b":"target = reduce_train['accuracy_group']","b395f1dc":"def stract_hists(feature, train=reduce_train, test=reduce_test, adjust=False, plot=False):\n    n_bins = 10\n    train_data = train[feature]\n    test_data = test[feature]\n    if adjust:\n        test_data *= train_data.mean() \/ test_data.mean()\n    perc_90 = np.percentile(train_data, 95)\n    train_data = np.clip(train_data, 0, perc_90)\n    test_data = np.clip(test_data, 0, perc_90)\n    train_hist = np.histogram(train_data, bins=n_bins)[0] \/ len(train_data)\n    test_hist = np.histogram(test_data, bins=n_bins)[0] \/ len(test_data)\n    msre = mean_squared_error(train_hist, test_hist)\n    if plot:\n        print(msre)\n        plt.bar(range(n_bins), train_hist, color='blue', alpha=0.5)\n        plt.bar(range(n_bins), test_hist, color='red', alpha=0.5)\n        plt.show()\n    return msre\nstract_hists('Magma Peak - Level 1_2000', adjust=False, plot=True)","e78c0a0d":"# call feature engineering function\nfeatures = reduce_train.loc[(reduce_train.sum(axis=1) != 0), (reduce_train.sum(axis=0) != 0)].columns # delete useless columns\nfeatures = [x for x in features if x not in ['accuracy_group', 'installation_id']]","f63fcd6d":"reduce_train.head(3)","4a2e4a4f":"reduce_train.info()","0b28e525":"to_exclude = [] \najusted_test = reduce_test.copy()\nfor feature in ajusted_test.columns:\n    if feature not in ['accuracy_group', 'installation_id', 'accuracy_group', 'session_title']:\n        data = reduce_train[feature]\n        train_mean = data.mean()\n        data = ajusted_test[feature] \n        test_mean = data.mean()\n        try:\n            error = stract_hists(feature, adjust=True)\n            ajust_factor = train_mean \/ test_mean\n            if ajust_factor > 10 or ajust_factor < 0.1:# or error > 0.01:\n                to_exclude.append(feature)\n                print(feature, train_mean, test_mean, error)\n            else:\n                ajusted_test[feature] *= ajust_factor\n        except:\n            to_exclude.append(feature)\n            print(feature, train_mean, test_mean)","d12d12dd":"ajusted_test.head(3)","b487aa29":"ajusted_test.info()","dd7b8e3f":"features = [x for x in features if x not in to_exclude]\nreduce_train[features].shape","5552d408":"ajusted_test[features].shape","20a0d489":"class Base_Model(object):\n    \n    def __init__(self, train_df, test_df, features, categoricals=[], n_splits=5, verbose=True):\n        self.train_df = train_df\n        self.test_df = test_df\n        self.features = features\n        self.n_splits = n_splits\n        self.categoricals = categoricals\n        self.target = 'accuracy_group'\n        self.cv = self.get_cv()\n        self.verbose = verbose\n        self.params = self.get_params()\n        self.y_pred, self.score, self.model = self.fit()\n        \n    def train_model(self, train_set, val_set):\n        raise NotImplementedError\n        \n    def get_cv(self):\n        cv = StratifiedKFold(n_splits=self.n_splits, shuffle=True, random_state=random_state)\n        return cv.split(self.train_df, self.train_df[self.target])\n    \n    def get_params(self):\n        raise NotImplementedError\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        raise NotImplementedError\n        \n    def convert_x(self, x):\n        return x\n        \n    def fit(self):\n        oof_pred = np.zeros((len(reduce_train), ))\n        y_pred = np.zeros((len(reduce_test), ))\n        for fold, (train_idx, val_idx) in enumerate(self.cv):\n            x_train, x_val = self.train_df[self.features].iloc[train_idx], self.train_df[self.features].iloc[val_idx]\n            y_train, y_val = self.train_df[self.target][train_idx], self.train_df[self.target][val_idx]\n            train_set, val_set = self.convert_dataset(x_train, y_train, x_val, y_val)\n            model = self.train_model(train_set, val_set)\n            conv_x_val = self.convert_x(x_val)\n            oof_pred[val_idx] = model.predict(conv_x_val).reshape(oof_pred[val_idx].shape)\n            x_test = self.convert_x(self.test_df[self.features])\n            y_pred += model.predict(x_test).reshape(y_pred.shape) \/ self.n_splits\n            print('Partial score of fold {} is: {}'.format(fold, eval_qwk_lgb_regr(y_val, oof_pred[val_idx])[1]))\n        _, loss_score, _ = eval_qwk_lgb_regr(self.train_df[self.target], oof_pred)\n        if self.verbose:\n            print('Our oof cohen kappa score is: ', loss_score)\n        return y_pred, loss_score, model","b85d60b2":"class Lgb_Model(Base_Model):\n    \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        return lgb.train(self.params, train_set, valid_sets=[train_set, val_set], verbose_eval=verbosity)\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = lgb.Dataset(x_train, y_train, categorical_feature=self.categoricals)\n        val_set = lgb.Dataset(x_val, y_val, categorical_feature=self.categoricals)\n        return train_set, val_set\n        \n    def get_params(self):\n        params = {'n_estimators':5000,\n                    'boosting_type': 'gbdt',\n                    'objective': 'regression',\n                    'metric': 'rmse',\n                    'subsample': 0.75,\n                    'subsample_freq': 1,\n                    'learning_rate': learning_rate_lgb,\n                    'feature_fraction': 0.9,\n                    'max_depth': max_depth_lgb,\n                    'lambda_l1': 1,  \n                    'lambda_l2': 1,\n                    'early_stopping_rounds': 100\n                    }\n        return params","5c8e008b":"lgb_model = Lgb_Model(reduce_train, ajusted_test, features, categoricals=categoricals)","31033048":"class Xgb_Model(Base_Model):\n    \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        return xgb.train(self.params, train_set, \n                         num_boost_round=5000, evals=[(train_set, 'train'), (val_set, 'val')], \n                         verbose_eval=verbosity, early_stopping_rounds=100)\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = xgb.DMatrix(x_train, y_train)\n        val_set = xgb.DMatrix(x_val, y_val)\n        return train_set, val_set\n    \n    def convert_x(self, x):\n        return xgb.DMatrix(x)\n        \n    def get_params(self):\n        params = {'colsample_bytree': 0.8,                 \n            'learning_rate': learning_rate_xgb,\n            'max_depth': max_depth_xgb,\n            'subsample': 1,\n            'objective':'reg:squarederror',\n            'min_child_weight':3,\n            'gamma':0.25,\n            'n_estimators':5000}\n\n        return params","0da6044c":"xgb_model = Xgb_Model(reduce_train, ajusted_test, features, categoricals=categoricals)","cb11907d":"class Nn_Model(Base_Model):\n    \n    def __init__(self, train_df, test_df, features, categoricals=[], n_splits=n_splits_nn, verbose=True):\n        features = features.copy()\n        if len(categoricals) > 0:\n            for cat in categoricals:\n                enc = OneHotEncoder()\n                train_cats = enc.fit_transform(train_df[[cat]])\n                test_cats = enc.transform(test_df[[cat]])\n                cat_cols = ['{}_{}'.format(cat, str(col)) for col in enc.active_features_]\n                features += cat_cols\n                train_cats = pd.DataFrame(train_cats.toarray(), columns=cat_cols)\n                test_cats = pd.DataFrame(test_cats.toarray(), columns=cat_cols)\n                train_df = pd.concat([train_df, train_cats], axis=1)\n                test_df = pd.concat([test_df, test_cats], axis=1)\n        scalar = MinMaxScaler()\n        train_df[features] = scalar.fit_transform(train_df[features])\n        test_df[features] = scalar.transform(test_df[features])\n        print(train_df[features].shape)\n        super().__init__(train_df, test_df, features, categoricals, n_splits, verbose)\n        \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        model = tf.keras.models.Sequential([\n            tf.keras.layers.Input(shape=(train_set['X'].shape[1],)),\n            tf.keras.layers.Dense(200, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(Dropout_par),\n            tf.keras.layers.Dense(100, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(Dropout_par),\n            tf.keras.layers.Dense(50, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(Dropout_par),\n            tf.keras.layers.Dense(25, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(Dropout_par),\n            tf.keras.layers.Dense(1, activation='relu')\n        ])\n        model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate_nn), loss='mse')\n        print(model.summary())\n        save_best = tf.keras.callbacks.ModelCheckpoint('nn_model.w8', save_weights_only=True, save_best_only=True, verbose=1)\n        early_stop = tf.keras.callbacks.EarlyStopping(patience=20)\n        model.fit(train_set['X'], \n                train_set['y'], \n                validation_data=(val_set['X'], val_set['y']),\n                epochs=epochs_nn,\n                callbacks=[save_best, early_stop])\n        model.load_weights('nn_model.w8')\n        return model\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = {'X': x_train, 'y': y_train}\n        val_set = {'X': x_val, 'y': y_val}\n        return train_set, val_set\n        \n    def get_params(self):\n        return None","8e82a2bb":"nn_model = Nn_Model(reduce_train, ajusted_test, features, categoricals=categoricals)","4779c433":"# class Cnn_Model(Base_Model):\n    \n#     def __init__(self, train_df, test_df, features, categoricals=[], n_splits=5, verbose=True):\n#         features = features.copy()\n#         if len(categoricals) > 0:\n#             for cat in categoricals:\n#                 enc = OneHotEncoder()\n#                 train_cats = enc.fit_transform(train_df[[cat]])\n#                 test_cats = enc.transform(test_df[[cat]])\n#                 cat_cols = ['{}_{}'.format(cat, str(col)) for col in enc.active_features_]\n#                 features += cat_cols\n#                 train_cats = pd.DataFrame(train_cats.toarray(), columns=cat_cols)\n#                 test_cats = pd.DataFrame(test_cats.toarray(), columns=cat_cols)\n#                 train_df = pd.concat([train_df, train_cats], axis=1)\n#                 test_df = pd.concat([test_df, test_cats], axis=1)\n#         scalar = MinMaxScaler()\n#         train_df[features] = scalar.fit_transform(train_df[features])\n#         test_df[features] = scalar.transform(test_df[features])\n#         self.create_feat_2d(features)\n#         super().__init__(train_df, test_df, features, categoricals, n_splits, verbose)\n        \n#     def create_feat_2d(self, features, n_feats_repeat=50):\n#         self.n_feats = len(features)\n#         self.n_feats_repeat = n_feats_repeat\n#         self.mask = np.zeros((self.n_feats_repeat, self.n_feats), dtype=np.int32)\n#         for i in range(self.n_feats_repeat):\n#             l = list(range(self.n_feats))\n#             for j in range(self.n_feats):\n#                 c = l.pop(choice(range(len(l))))\n#                 self.mask[i, j] = c\n#         self.mask = tf.convert_to_tensor(self.mask)\n#         print(self.mask.shape)\n       \n        \n    \n#     def train_model(self, train_set, val_set):\n#         verbosity = 100 if self.verbose else 0\n\n#         inp = tf.keras.layers.Input(shape=(self.n_feats))\n#         x = tf.keras.layers.Lambda(lambda x: tf.gather(x, self.mask, axis=1))(inp)\n#         x = tf.keras.layers.Reshape((self.n_feats_repeat, self.n_feats, 1))(x)\n#         x = tf.keras.layers.Conv2D(18, (50, 50), strides=50, activation='relu')(x)\n#         x = tf.keras.layers.Flatten()(x)\n#         #x = tf.keras.layers.Dense(200, activation='relu')(x)\n#         #x = tf.keras.layers.LayerNormalization()(x)\n#         #x = tf.keras.layers.Dropout(Dropout_par)(x)\n#         x = tf.keras.layers.Dense(100, activation='relu')(x)\n#         x = tf.keras.layers.LayerNormalization()(x)\n#         x = tf.keras.layers.Dropout(Dropout_par)(x)\n#         x = tf.keras.layers.Dense(50, activation='relu')(x)\n#         x = tf.keras.layers.LayerNormalization()(x)\n#         x = tf.keras.layers.Dropout(Dropout_par)(x)\n#         out = tf.keras.layers.Dense(1)(x)\n        \n#         model = tf.keras.Model(inp, out)\n    \n#         model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=learning_rate_cnn), loss='mse')\n#         print(model.summary())\n#         save_best = tf.keras.callbacks.ModelCheckpoint('nn_model.w8', save_weights_only=True, save_best_only=True, verbose=1)\n#         early_stop = tf.keras.callbacks.EarlyStopping(patience=20)\n#         model.fit(train_set['X'], \n#                 train_set['y'], \n#                 validation_data=(val_set['X'], val_set['y']),\n#                 epochs=epochs_cnn,\n#                  callbacks=[save_best, early_stop])\n#         model.load_weights('nn_model.w8')\n#         return model\n        \n#     def convert_dataset(self, x_train, y_train, x_val, y_val):\n#         train_set = {'X': x_train, 'y': y_train}\n#         val_set = {'X': x_val, 'y': y_val}\n#         return train_set, val_set\n        \n#     def get_params(self):\n#         return None","af547130":"# cnn_model = Cnn_Model(reduce_train, ajusted_test, features, categoricals=categoricals)","d957ee7b":"# xgbreg = xgb.XGBRegressor({'n_estimators': 5000,\n#                             'subsample': 1,\n#                             'min_child_weight':3,\n#                             'gamma':0.25,\n#                             'objective': 'reg:squarederror'})\n# parameters = {'learning_rate': [0.01, 0.02],\n#              'max_depth': [i for i in range(10,11)]}\n# xgb_reg = GridSearchCV(estimator=xgbreg, param_grid=parameters, cv=5, n_jobs=-1).fit(reduce_train[features], target)","3a152f1c":"# print(\"Best parameters set:\", xgb_reg.best_params_)","6c037449":"# xgb_reg_y_pred = xgb_reg.predict(ajusted_test[features])","78330d90":"# # https:\/\/www.kaggle.com\/vbmokin\/bod-prediction-in-river-15-regression-models\n# scaler = StandardScaler()\n# reduce_train_sc = pd.DataFrame(scaler.fit_transform(reduce_train[features]), columns = reduce_train[features].columns)\n# ajusted_test_sc = pd.DataFrame(scaler.fit_transform(ajusted_test[features]), columns = ajusted_test[features].columns)","b57a0856":"# mlp = MLPRegressor({'activation': 'relu',\n#                    'solver': 'adam',\n#                    'max_iter': 100,\n#                    'early_stopping': True})\n# param_grid = {'hidden_layer_sizes': [i for i in range(4,10)],\n#               'learning_rate': ['constant'],\n#               'learning_rate_init': [0.02],\n#               'power_t': [0.5],\n#               'alpha': [0.0001]}\n# mlp_reg = GridSearchCV(mlp, param_grid=param_grid, \n#                    cv=5, verbose=True, pre_dispatch='2*n_jobs').fit(reduce_train[features], target)","766bc548":"# print(\"Best parameters set:\", mlp_reg.best_params_)","004f351e":"# mlp_reg_y_pred = mlp_reg.predict(ajusted_test_sc[features])","7d1f95c6":"# final_pred = (lgb_model.y_pred * weights_models['lbg']) + (xgb_reg_y_pred * weights_models['xgb_reg']) + (mlp_reg_y_pred * weights_models['mlp_reg'])\n#final_pred = (lgb_model.y_pred * weights_models['lbg']) + (xgb_model.y_pred * weights_models['xgb']) + (nn_model.y_pred * weights_models['nn']) + (cnn_model.y_pred * weights_models['cnn'])\nfinal_pred = (lgb_model.y_pred * weights_models['lbg']) + (xgb_model.y_pred * weights_models['xgb']) + (nn_model.y_pred * weights_models['nn'])\n#final_pred = (lgb_model.y_pred * weights_models['lbg']) + (xgb_model.y_pred * weights_models['xgb'])\nprint(final_pred.shape)","eb7d8d18":"dist = Counter(reduce_train['accuracy_group'])\nfor k in dist:\n    dist[k] \/= len(reduce_train)\nreduce_train['accuracy_group'].hist()\n\nacum = 0\nbound = {}\nfor i in range(3):\n    acum += dist[i]\n    bound[i] = np.percentile(final_pred, acum * 100)\nprint(bound)\n\ndef classify(x):\n    if x <= bound[0]:\n        return 0\n    elif x <= bound[1]:\n        return 1\n    elif x <= bound[2]:\n        return 2\n    else:\n        return 3\n    \nfinal_pred = np.array(list(map(classify, final_pred)))\n\nsample_submission['accuracy_group'] = final_pred.astype(int)\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission['accuracy_group'].value_counts(normalize=True)","0fa406be":"## 1. My upgrade <a class=\"anchor\" id=\"1\"><\/a>\n\n[Back to Table of Contents](#0.1)","5ac992bd":"<a class=\"anchor\" id=\"0.1\"><\/a>\n## Table of Contents\n\n1. [My upgrade](#1)\n    -  [Commit now](#1.1)\n    -  [Previous commits: LGB and XGB](#1.2)\n    -  [Previous commits: LGB, XGB and NN](#1.3)\n    -  [Previous commits: LGB, XGB, NN and CNN](#1.4)\n    -  [Previous commits: LGB, XGBRegressor and MLPRegressor](#1.5)\n    -  [Previous commits: LB scores and bounds](#1.6)\n1. [Import libraries](#2)\n1. [Auxiliary functions](#3)\n1. [Preparation to modelling](#4)\n1. [Models building and prediction](#5)\n    -  [LGB](#5.1)\n    -  [XGB](#5.2)\n    -  [NN model](#5.3) \n    -  [CNN model](#5.4)\n    -  [XGBRegressor](#5.5)\n    -  [MLPRegressor](#5.6)\n1. [Blending and submission](#6)","9995ff55":"## 5.6. MLPRegressor <a class=\"anchor\" id=\"5.6\"><\/a>\n\n[Back to Table of Contents](#0.1)","251bb4d8":"## 5.2. XGB <a class=\"anchor\" id=\"5.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","2a6a5685":"## 1.4. Previous commits: LGB, XGB, NN and CNN <a class=\"anchor\" id=\"1.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","75990bf9":"## 1.2. Previous commits: LGB and XGB <a class=\"anchor\" id=\"1.2\"><\/a>\n\n[Back to Table of Contents](#0.1)","c61d7aed":"## 1.1. Commit now <a class=\"anchor\" id=\"1.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","39be5ba9":"## 3. Auxiliary functions <a class=\"anchor\" id=\"3\"><\/a>\n\n[Back to Table of Contents](#0.1)","b71891ad":"## 1.5. Previous commits: LGB, XGBRegressor and MLPRegressor <a class=\"anchor\" id=\"1.5\"><\/a>\n\n[Back to Table of Contents](#0.1)","2a3314c2":"### Commit 13\nLike https:\/\/www.kaggle.com\/challenge1a3\/convert-to-regression?scriptVersionId=25844451:\n* Dropout_par = 0.3\n* learning_rate_lgb = 0.01\n* max_depth_lgb = 15\n* learning_rate_xgb = 0.01\n* weights_models = {'lbg': 0.8, 'xgb': 0.2, 'nn': 0.0}\n* max_depth_xgb = 12 (my upgrade)\n* num_boost_round_xgb = 2000 (my upgrade)\n* LB = 0.541\n* bound = {0: 1.2750108371377051, 1: 1.6628569151079635, 2: 1.915749113487145}\n\n### Commit 12\nLike https:\/\/www.kaggle.com\/challenge1a3\/convert-to-regression?scriptVersionId=25844451:\n* Dropout_par = 0.3 (everywhere)\n* max_depth_lgb = 15\n* learning_rate_xgb = 0.01\n* learning_rate_lgb = 0.015 (my upgrade)\n* max_depth_xgb = 12 (my upgrade)\n* num_boost_round_xgb = 1200\n* weights_models = {'lbg': 0.8, 'xgb': 0.2, 'nn': 0.0} (my upgrade)\n* LB = 0.536\n* bound = {0: 1.2692866832879286, 1: 1.6604295293761968, 2: 1.902899493825115}\n\n### Commit 11\nLike https:\/\/www.kaggle.com\/challenge1a3\/convert-to-regression?scriptVersionId=25844451:\n* Dropout_par = 0.3 (everywhere)\n* max_depth_lgb = 15\n* learning_rate_xgb = 0.01\n* learning_rate_lgb = 0.012 (my upgrade)\n* max_depth_xgb = 12 (my upgrade)\n* num_boost_round_xgb = 1200\n* weights_models = {'lbg': 0.85, 'xgb': 0.15, 'nn': 0.0} (my upgrade)\n* LB = 0.535\n* bound = {0: 1.2604509840658893, 1: 1.658905261424743, 2: 1.9006775760901844}\n\n### Commit 10\nLike https:\/\/www.kaggle.com\/challenge1a3\/convert-to-regression?scriptVersionId=25844451:\n* Dropout_par = 0.3 (everywhere)\n* learning_rate_lgb = 0.01\n* max_depth_lgb = 15\n* learning_rate_xgb = 0.001 (my upgrade)\n* num_boost_round_xgb = 2000 (my upgrade)\n* weights_models = {'lbg': 0.8, 'xgb': 0.2, 'nn': 0.0}\n* LB = 0.529\n* bound = {0: 1.2595409529020236, 1: 1.6634174903414956, 2: 1.8695619585728598}","58465a6c":"## 1.3. Previous commits: LGB, XGB and NN <a class=\"anchor\" id=\"1.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","f70c069b":"## 2. Import libraries <a class=\"anchor\" id=\"2\"><\/a>\n\n[Back to Table of Contents](#0.1)","39c8726e":"## 5.3. NN model <a class=\"anchor\" id=\"5.3\"><\/a>\n\n[Back to Table of Contents](#0.1)","f7a9414b":"* Commit 7 \n* LB = **0.546**\n* bound = {0: 1.325200871595248, 1: 1.7163743456132319, 2: 1.9351170271927032}\n* 8\n* LB = 0.546 < LB in commit 7 in ten thousandths\n* bound = {0: 1.3166733987437411, 1: 1.7272712420718097, 2: 1.9442174538135724}\n* 19\n* LB = 0.544\n* bound = {0: 1.3010213969147069, 1: 1.696410357186027, 2: 1.948492264140163}\n* 27\n* LB = 0.543\n* bound = {0: 1.312821243541313, 1: 1.6662995904802165, 2: 1.9022382021583941}\n* 1\n* LB = 0.541\n* bound = {0: 1.3171207982606463, 1: 1.6932880794576932, 2: 1.930435747444835}\n* 14\n* LB = 0.541\n* bound = {0: 1.3066318356805446, 1: 1.7006992170052115, 2: 1.9630065106711865}\n* 13\n* LB = 0.541\n* bound = {0: 1.2750108371377051, 1: 1.6628569151079635, 2: 1.915749113487145}\n* 22\n* LB = 0.540\n* bound = {0: 1.3129141878160533, 1: 1.7168684806688128, 2: 1.9748518666641859}\n* 5\n* LB = 0.537\n* bound = {0: 1.2873246070446198, 1: 1.6814011234819182, 2: 1.9126996346679777}\n* 4\n* LB = 0.537\n* bound = {0: 1.2908275170908037, 1: 1.6693144113754737, 2: 1.9063688014081648}\n* 16\n* LB = 0.540\n* bound = {0: 1.172228590917085, 1: 1.533182066809535, 2: 1.760914677012266}\n* 25\n* LB = 0.539\n* bound = {0: 1.3979383699264847, 1: 1.6998052204138114, 2: 1.8897009384116807}\n* 26\n* LB = 0.539\n*  bound = {0: 1.338485015261013, 1: 1.6895176192788752, 2: 1.9175661961286656}\n* 21\n* LB = 0.539\n* bound = {0: 1.2831440170874686, 1: 1.6987661777816951, 2: 1.9496291619385233}\n* 3\n* LB = 0.537\n* bound = {0: 1.2914280999211256, 1: 1.681997945157017, 2: 1.929550711288102}\n* 12\n* LB = 0.536\n* bound = {0: 1.2692866832879286, 1: 1.6604295293761968, 2: 1.902899493825115}\n* 15\n* LB = 0.535\n* bound = {0: 1.3078938396691753, 1: 1.7016114717168154, 2: 1.9725126086087508}\n* 11\n* LB = 0.535\n* bound = {0: 1.2604509840658893, 1: 1.658905261424743, 2: 1.9006775760901844}\n* 10\n* LB = 0.529\n* bound = {0: 1.2595409529020236, 1: 1.6634174903414956, 2: 1.8695619585728598}\n* 6\n* LB = 0.528\n* bound = {0: 1.308712556344354, 1: 1.6684442470757634, 2: 1.9103546313445363}\n* 31\n* LB = 0.439\n* bound = {0: 1.5826957823362335, 1: 1.9329599407410287, 2: 2.186507488093949}","91075967":"### Commit 31\n#### LGB\n* learning_rate_lgb = 0.015\n* max_depth_lgb = 16 (from my best commits 7)\n\n#### XGB\n* xgbreg = xgb.XGBRegressor({'n_estimators': 5000,\n*                            'subsample': 1,\n*                            'min_child_weight':3,\n*                            'gamma':0.25,\n*                            'objective': 'reg:squarederror'}) \n* parameters = {'learning_rate': [0.005, 0.01, 0.015, 0.02],\n*               'max_depth': [i for i in range(10,11)]}\n* cv=5\n* Best parameters set: {'learning_rate': 0.02, 'max_depth': 10}\n\n#### MLP\n* mlp = MLPRegressor({'activation': 'relu',\n*                    'solver': 'adam',\n*                    'max_iter': 100,\n*                    'early_stopping': True})\n* param_grid = {'hidden_layer_sizes': [i for i in range(6,8)],\n*               'learning_rate': ['constant'],\n*               'learning_rate_init': [0.01],\n*               'power_t': [0.5],\n*               'alpha': [0.0001]}\n* cv=5\n* Best parameters set: {'alpha': 0.0001, 'hidden_layer_sizes': 6, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'power_t': 0.5}\n\n#### All\n* weights_models = {'lbg': 0.7, 'xgb_reg': 0.2, 'mlp_reg': 0.1}\n* LB = 0.439\n* bound = {0: 1.5826957823362335, 1: 1.9329599407410287, 2: 2.186507488093949}\n\n\n### Commits 23, 24, 28, 29, 30\nExperiment using regressors with hyperparameters optimization from my kernel https:\/\/www.kaggle.com\/vbmokin\/bod-prediction-in-river-15-regression-models. Unfortunately, it is not successful, it has been improved.\n\n\n### Commit 27\n#### LGB\n* learning_rate_lgb = 0.015\n* max_depth_lgb = 16 (from my best commits 7)\n\n#### XGB\n* xgbreg = xgb.XGBRegressor({'n_estimators': 5000,\n*                             'subsample': 1,\n*                            'min_child_weight':3,\n*                            'gamma':0.25,\n*                           'learning_rate': 0.02,\n*                           'objective': 'reg:squarederror'})\n* parameters = {'max_depth': [i for i in range(10,18)]}\n* cv=5\n* Best parameters set: {'max_depth': 10}\n\n#### MLP\n* mlp = MLPRegressor({'activation': 'relu',\n*                    'solver': 'adam',\n*                    'max_iter': 100,\n*                    'early_stopping': True})\n* param_grid = {'hidden_layer_sizes': [i for i in range(4,8)],\n*               'learning_rate': ['constant'],\n*               'learning_rate_init': [0.01],\n*               'power_t': [0.5],\n*               'alpha': [0.0001]}\n* cv=5\n* Best parameters set: {'alpha': 0.0001, 'hidden_layer_sizes': 7, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'power_t': 0.5}\n\n#### All\n* weights_models = {'lbg': 0.7, 'xgb_reg': 0.2, 'mlp_reg': 0.1}\n* LB = 0.543\n* bound = {0: 1.312821243541313, 1: 1.6662995904802165, 2: 1.9022382021583941}\n\n\n### Commit 26\n#### LGB\n* learning_rate_lgb = 0.015\n* max_depth_lgb = 16 (from my best commits 7)\n\n#### XGB\n* xgbreg = xgb.XGBRegressor({'n_estimators': 5000,\n*                            'subsample': 1,\n*                            'min_child_weight':3,\n*                            'gamma':0.25,\n*                            'objective': 'reg:squarederror'}) \n* parameters = {'learning_rate': [0.01, 0.02, 0.03],\n*               'max_depth': [8, 9, 10]}\n* cv=5\n* Best parameters set: {'learning_rate': 0.03, 'max_depth': 8}\n\n#### MLP\n* mlp = MLPRegressor({'activation': 'relu',\n*                    'solver': 'adam',\n*                    'max_iter': 100,\n*                    'early_stopping': True})\n* param_grid = {'hidden_layer_sizes': [i for i in range(4,8)],\n*               'learning_rate': ['constant'],\n*               'learning_rate_init': [0.01],\n*               'power_t': [0.5],\n*               'alpha': [0.0001]}\n* cv=3 \n* Best parameters set: {'alpha': 0.0001, 'hidden_layer_sizes': 4, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'power_t': 0.5}\n\n#### All\n* weights_models = {'lbg': 0.7, 'xgb_reg': 0.2, 'mlp_reg': 0.1}\n* LB = 0.539\n* bound = {0: 1.338485015261013, 1: 1.6895176192788752, 2: 1.9175661961286656}\n\n\n### Commit 25\n#### LGB\n* learning_rate_lgb = 0.02 (from my best commits 7)\n* max_depth_lgb = 16 (from my best commits 7)\n\n#### XGB\n* xgbreg = xgb.XGBRegressor({'n_estimators': 5000,\n*                            'subsample': 1,\n*                            'min_child_weight':3,\n*                            'gamma':0.25,\n*                            'objective': 'reg:squarederror'}) \n* parameters = {'learning_rate': [0.01, 0.02],\n*               'max_depth': [8, 10]}\n* cv=3\n* Best parameters set: {'learning_rate': 0.02, 'max_depth': 8}\n\n#### MLP\n* mlp = MLPRegressor({'activation': 'relu',\n*                    'solver': 'adam',\n*                    'max_iter': 100,\n*                    'early_stopping': True})\n* param_grid = {'hidden_layer_sizes': [i for i in range(4,5)],\n*               'learning_rate': ['constant'],\n*               'learning_rate_init': [0.01],\n*               'power_t': [0.5],\n*               'alpha': [0.0001]}\n* cv=3 \n* Best parameters set: {'alpha': 0.0001, 'hidden_layer_sizes': 4, 'learning_rate': 'constant', 'learning_rate_init': 0.01, 'power_t': 0.5}\n\n#### All\n* weights_models = {'lbg': 0.6, 'xgb_reg': 0.2, 'mlp_reg': 0.2}\n* LB = 0.539\n* bound = {0: 1.3979383699264847, 1: 1.6998052204138114, 2: 1.8897009384116807}","0e2adda0":"## 4. Preparation to modelling <a class=\"anchor\" id=\"4\"><\/a>\n\n[Back to Table of Contents](#0.1)","3f35507a":"### Only successfully submitted commit results are displayed here without errors","13c16c3e":"### Commit 22\nLike https:\/\/www.kaggle.com\/challenge1a3\/convert-to-regression?scriptVersionId=25844451:\n* max_depth_xgb = 10\n* learning_rate_nn = 4e-4\n* n_splits_nn = 5\n* Dropout_par = 0.2 (from my best commits 7)\n* learning_rate_lgb = 0.02 (from my best commits 7)\n* learning_rate_xgb = 0.02 (from my best commits 7)\n* max_depth_lgb = 16 (from my best commits 7)\n* epochs_nn = 20\n* weights_models = {'lbg': 0.7, 'xgb': 0.1, 'nn': 0.2} (from my best commits 7)\n* LB = 0.540\n* bound = {0: 1.3129141878160533, 1: 1.7168684806688128, 2: 1.9748518666641859}\n\n### Commit 21\nLike https:\/\/www.kaggle.com\/challenge1a3\/convert-to-regression?scriptVersionId=25844451:\n* Dropout_par = 0.3\n* max_depth_lgb = 15\n* max_depth_xgb = 10\n* learning_rate_nn = 4e-4\n* learning_rate_xgb = 0.01\n* n_splits_nn = 5\n* learning_rate_lgb = 0.02 (from my best commits 7, 8)\n* epochs_nn = 20\n* weights_models = {'lbg': 0.6, 'xgb': 0.2, 'nn': 0.2}\n* LB = 0.539\n* bound = {0: 1.2831440170874686, 1: 1.6987661777816951, 2: 1.9496291619385233}\n\n### Commit 20 (\u0421anceled at the beginning - error in parameters)\n\n### Commit 19\nLike https:\/\/www.kaggle.com\/challenge1a3\/convert-to-regression?scriptVersionId=25844451:\n* Dropout_par = 0.3\n* max_depth_lgb = 15\n* max_depth_xgb = 10\n* learning_rate_lgb = 0.02 (from my best commits 7, 8)\n* learning_rate_xgb = 0.015\n* learning_rate_nn = 1e-3\n* epochs_nn = 25\n* n_splits_nn = 3  # 5 is too long\n* weights_models = {'lbg': 0.75, 'xgb': 0.15, 'nn': 0.1}\n* LB = 0.544\n* bound = {0: 1.3010213969147069, 1: 1.696410357186027, 2: 1.948492264140163}\n\n### Commit 18 (Not successful - Error in parameters)\nLike https:\/\/www.kaggle.com\/challenge1a3\/convert-to-regression?scriptVersionId=25844451:\n* Dropout_par = 0.3\n* max_depth_lgb = 15\n* learning_rate_xgb = 0.01\n* max_depth_xgb = 10\n* learning_rate_nn = 4e-4\n* learning_rate_lgb = 0.02 (from my best commits 7, 8)\n* epochs_nn = 25\n* n_splits_nn = 3  # 5 is too long\n* weights_models = {'lbg': 0.7, 'xgb': 0.1, 'nn': 0.1} (I was wrong with the amount of weights)\n* LB = 0.545 - (Error in weights_models)\n* bound = {0: 1.1686122550147684, 1: 1.5292624579442735, 2: 1.7683616206560797} - (Error in weights_models)\n\n### Commit 17 (Not successful - died, may be because of num_leaves_lgb = int((2^max_depth_lgb-1) \/\/ 0.6))\nLike https:\/\/www.kaggle.com\/challenge1a3\/convert-to-regression?scriptVersionId=25844451:\n* Dropout_par = 0.3\n* max_depth_lgb = 15\n* learning_rate_xgb = 0.01\n* max_depth_xgb = 10\n* learning_rate_nn = 4e-4\n* learning_rate_lgb = 0.02 (from my best commits 7, 8)\n* num_leaves_lgb = int((2^max_depth_lgb-1) \/\/ 0.6) # new\n* epochs_nn = 25\n* n_splits_nn = 3  # 5 is too long\n* weights_models = {'lbg': 0.7, 'xgb': 0.2, 'nn': 0.1}\n\n### Commit 16\nLike https:\/\/www.kaggle.com\/challenge1a3\/convert-to-regression?scriptVersionId=25844451:\n* Dropout_par = 0.3\n* max_depth_lgb = 15\n* max_depth_xgb = 10\n* learning_rate_nn = 4e-4\n* learning_rate_lgb = 0.02 (from my best commits 7, 8 - my upgrade)\n* learning_rate_xgb = 0.02 (my upgrade)\n* epochs_nn=25 (my upgrade)\n* weights_models = {'lbg': 0.7, 'xgb': 0.2, 'nn': 0.1} (my upgrade)\n* LB = 0.540\n* bound = {0: 1.172228590917085, 1: 1.533182066809535, 2: 1.760914677012266}\n\n\n### Commit 14\nLike https:\/\/www.kaggle.com\/challenge1a3\/convert-to-regression?scriptVersionId=25844451:\n* Dropout_par = 0.3\n* learning_rate_lgb = 0.01\n* max_depth_lgb = 15\n* learning_rate_xgb = 0.01\n* num_boost_round_xgb = 5000\n* max_depth_xgb = 10\n* learning_rate_nn = 4e-4\n* epochs_nn=25 (my upgrade)\n* weights_models = {'lbg': 0.7, 'xgb': 0.15, 'nn': 0.15} (my upgrade)\n* LB = 0.541\n* bound = {0: 1.3066318356805446, 1: 1.7006992170052115, 2: 1.9630065106711865}\n\n### Commit 9 (Not successful - cancelled, not submitted)\n* Dropout_par = 0.2 (everywhere)\n* learning_rate_lgb = 0.02\n* learning_rate_xgb = 0.0002\n* learning_rate_nn = 4e-5\n* epochs_nn=25\n* weights_models = {'lbg': 0.6, 'xgb': 0.2, 'nn': 0.2}\n* **Not successful - timeout (longer than 2 hours)**\n\n### Commit 8\n* Dropout_par = 0.2 (everywhere)\n* learning_rate_lgb = 0.02\n* learning_rate_xgb = 0.002 # xgb bad tuned at commit 7 with lr=0.02\n* epochs_nn=20 - there were no improvements of val_loss after the 20th epoch (and even earlier) - at commit 7\n* weights_models = {'lbg': 0.7, 'xgb': 0.1, 'nn': 0.2}\n* LB = 0.546 < LB in commit 7 in ten thousandths\n* bound = {0: 1.3166733987437411, 1: 1.7272712420718097, 2: 1.9442174538135724}\n\n### Commit 7\n* Dropout_par = 0.2 (everywhere)\n* learning_rate_boost = 0.02 (lgb & xgb models)\n* weights_models = {'lbg': 0.7, 'xgb': 0.1, 'nn': 0.2}\n* LB = **0.546**\n* bound = {0: 1.325200871595248, 1: 1.7163743456132319, 2: 1.9351170271927032}\n\n### Commit 6\n* Dropout_par = 0.2 (everywhere)\n* learning_rate_boost = 0.03 (lgb & xgb models)\n* weights_models = {'lbg': 0.6, 'xgb': 0.25, 'nn': 0.15}\n* LB = 0.528\n* bound = {0: 1.308712556344354, 1: 1.6684442470757634, 2: 1.9103546313445363}\n\n### Commit 5\n* Dropout_par = 0.15 (everywhere)\n* learning_rate_boost = 0.02 (lgb & xgb models)\n* weights_models = {'lbg': 0.6, 'xgb': 0.25, 'nn': 0.15}\n* LB = 0.537\n* bound = {0: 1.2873246070446198, 1: 1.6814011234819182, 2: 1.9126996346679777}\n\n### Commit 4\n* Dropout_par = 0.25 (everywhere)\n* learning_rate_boost = 0.02 (lgb & xgb models)\n* weights_models = {'lbg': 0.6, 'xgb': 0.25, 'nn': 0.15}\n* LB = 0.537\n* bound = {0: 1.2908275170908037, 1: 1.6693144113754737, 2: 1.9063688014081648}\n\n### Commit 3\n* Dropout_par = 0.25 (everywhere)\n* learning_rate_boost = 0.015 (lgb & xgb models)\n* weights_models = {'lbg': 0.6, 'xgb': 0.25, 'nn': 0.15}\n* LB = 0.537\n* bound = {0: 1.2914280999211256, 1: 1.681997945157017, 2: 1.929550711288102}\n\n### Commit 1 (and 2 - not submitted)\n* Dropout_par = 0.2 (everywhere)\n* learning_rate_boost = 0.02 (lgb & xgb models)\n* weights_models = {'lbg': 0.6, 'xgb': 0.25, 'nn': 0.15}\n* LB = 0.541\n* bound = {0: 1.3171207982606463, 1: 1.6932880794576932, 2: 1.930435747444835}\n* 0    0.242\n* 1    0.137\n* 2    0.127\n* 3    0.494","b1954b95":"## 5.1. LGB <a class=\"anchor\" id=\"5.1\"><\/a>\n\n[Back to Table of Contents](#0.1)","2b9dfa7b":"<a class=\"anchor\" id=\"0\"><\/a>\n# [2019 Data Science Bowl](https:\/\/www.kaggle.com\/c\/data-science-bowl-2019)\n\n# Convert to Regression with ensemble of boosting and NN models\n\n### This kernel consist of the results of manual and automatic tuning of various combinations of 6 regression models.\n\n### I downloaded the best of these options (commit 7, LB = 0.546).\n\n### According to the recommendations of the organizers of the competition, I stop improving this kernel (maybe something else to experiment in my private kernel based on this kernel - apparently so do others, I see 175 forks at the moment).\n\n### The best of my commit of this kernel in private LB is commit 22.","9a5bb16c":"### Commit 15\nLike https:\/\/www.kaggle.com\/challenge1a3\/convert-to-regression?scriptVersionId=25844451:\n* Dropout_par = 0.3\n* learning_rate_lgb = 0.01\n* max_depth_lgb = 15\n* learning_rate_xgb = 0.01\n* num_boost_round_xgb = 5000\n* max_depth_xgb = 10\n* learning_rate_nn = 4e-4\n* epochs_nn=25 (my upgrade)\n* learning_rate_cnn = 1e-4\n* epochs_nn=25 (my upgrade)\n* epochs_cnn = 50 (my upgrade)\n* weights_models = {'lbg': 0.7, 'xgb': 0.1, 'nn': 0.1, 'cnn': 0.1} (my upgrade)\n* LB = 0.535\n* {0: 1.3078938396691753, 1: 1.7016114717168154, 2: 1.9725126086087508}","c306d23b":"[Go to Top](#0)","3475df48":"## 5. Models building and prediction <a class=\"anchor\" id=\"5\"><\/a>\n\n[Back to Table of Contents](#0.1)","e64d4dd6":"## 5.4. CNN model <a class=\"anchor\" id=\"5.4\"><\/a>\n\n[Back to Table of Contents](#0.1)","c1d4ce57":"# Acknowledgment\n* https:\/\/www.kaggle.com\/braquino\/convert-to-regression\n* https:\/\/www.kaggle.com\/vbmokin\/bod-prediction-in-river-15-regression-models\n* https:\/\/www.kaggle.com\/challenge1a3\/convert-to-regression","94e21777":"## 1.6. Previous commits: LB scores and bounds <a class=\"anchor\" id=\"1.6\"><\/a>\n\n[Back to Table of Contents](#0.1)","8d3fb673":"## 6. Blending and submission <a class=\"anchor\" id=\"6\"><\/a>\n\n[Back to Table of Contents](#0.1)","1ace9721":"## 5.5. XGBRegressor <a class=\"anchor\" id=\"5.5\"><\/a>\n\n[Back to Table of Contents](#0.1)"}}