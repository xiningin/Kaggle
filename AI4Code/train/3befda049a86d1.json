{"cell_type":{"50f2fb9a":"code","8b69119b":"code","777f4400":"code","f09ea2ba":"code","a426fbd2":"code","8b616080":"code","f0a17bd3":"code","cb07abe4":"code","215f4448":"code","3118626e":"code","1674025c":"code","df2a3820":"code","dde3abf6":"code","e8487f95":"code","19fece7e":"code","0e832649":"code","90fa52d6":"code","3703ac75":"code","d343b61a":"code","3fa83108":"code","83857459":"code","9effad28":"code","b92e1fdd":"code","f60cda2a":"code","2bbd4191":"code","620e86c6":"code","23407fdb":"code","cc95693b":"code","aedeeed4":"code","dbc4f3fc":"code","aadcf377":"code","f07c1184":"code","173202cb":"code","3ff54a46":"code","7193c9c2":"code","5e874cfc":"code","a7f4f8c6":"code","270a2366":"code","69f619aa":"code","7f6103ce":"code","80be0aba":"code","b7fa4709":"code","622d29c8":"code","abfb74cf":"code","9a090c36":"code","fad1953e":"code","2f7bdc06":"code","e7a7bc59":"code","64e4ce59":"code","021f8c64":"code","b5d6e028":"code","e6f4c9d6":"code","8648a871":"code","31ea1070":"code","3ae098ef":"code","7ca6e608":"code","cadbf194":"code","035e91bf":"code","b29859da":"code","b490cd31":"code","d4c7d3d2":"code","dc09ac07":"code","fc2690c0":"code","1e5eb99b":"code","9daabae9":"code","5557ab8b":"code","795d3ea4":"code","df23cd02":"code","9196d430":"code","c519e222":"code","69b10cc2":"code","41019286":"code","41bc34e0":"code","36482bfb":"code","c2385194":"code","4692a61e":"code","07d5f26a":"code","aca76948":"code","43829ac7":"code","adb4321c":"code","0dbe3fb8":"code","0448c824":"code","1bf70da0":"code","708831f5":"code","4f16293d":"code","dba8bd0c":"code","fa9f420f":"code","33806150":"code","d7914d4a":"code","f9fb4eb2":"code","331b2914":"code","52b455f0":"code","3adc19eb":"code","0dbb8960":"code","a6086496":"code","dc7dbfb6":"code","34755139":"code","4f42f675":"code","ddaf9aac":"code","b8a65051":"code","5ab1d637":"code","aa2e0b9d":"code","79880895":"code","eb6014f8":"code","722928e5":"markdown","77b25561":"markdown","86d28249":"markdown","358daeb7":"markdown","2f6950c9":"markdown","aefe6e14":"markdown","cf682c6c":"markdown","5249ead9":"markdown","fae4af80":"markdown","6fcceeec":"markdown","de07a832":"markdown","ad4add52":"markdown","15e7f3f9":"markdown","e73fd3c1":"markdown","fea55742":"markdown","14c3c623":"markdown","53d9ef3f":"markdown","f87ac4af":"markdown","51caf45a":"markdown","e1666511":"markdown","ed926468":"markdown","c343628f":"markdown","19149259":"markdown","fe662a64":"markdown","558bf03d":"markdown","45591ec3":"markdown","41cc6680":"markdown","f84cd46b":"markdown"},"source":{"50f2fb9a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('fivethirtyeight')\n\n\nimport plotly\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport plotly.express as px\n\n\nimport cufflinks as cf\ncf.go_offline()","8b69119b":"matches = pd.read_csv('..\/input\/ipldata\/matches.csv')\ndeliveries = pd.read_csv('..\/input\/ipldata\/deliveries.csv')\nmatches.head()","777f4400":"deliveries.head()","f09ea2ba":"matches.shape","a426fbd2":"deliveries.shape","8b616080":"matches.columns","f0a17bd3":"matches.season.value_counts().sort_values(ascending = False)","cb07abe4":"matches.team1.value_counts()","215f4448":"matches.info()","3118626e":"matches.isnull().sum().sort_values(ascending = False)","1674025c":"matches.replace(to_replace = [ 'Delhi Daredevils']   , value = ['Delhi Capitals' ] , inplace = True)\ndeliveries.replace(to_replace = ['Delhi Daredevils'  ] , value = [ 'Delhi Capitals'], inplace = True)\n\nconsistent_teams = ['Sunrisers Hyderabad', 'Mumbai Indians',\n        'Kolkata Knight Riders', 'Royal Challengers Bangalore', \n        'Delhi Capitals', 'Kings XI Punjab','Chennai Super Kings', 'Rajasthan Royals']\n\n\n# Taking data of only consistent teams\nmatches_2 = matches[ (matches.team1.isin( consistent_teams )) & (matches.team2.isin( consistent_teams ))]\ndeliveries_2 = deliveries[ (deliveries.batting_team.isin( consistent_teams )) & (deliveries.bowling_team.isin( consistent_teams )) ]\n\ndic = {'Sunrisers Hyderabad' : 'SRH' , 'Kolkata Knight Riders' : 'KKR',\n       'Royal Challengers Bangalore' : 'RCB' , 'Kings XI Punjab' : 'KXIP',\n       'Mumbai Indians' : 'MI' , 'Chennai Super Kings' : 'CSK' , \n       'Rajasthan Royals' : 'RR' , 'Delhi Capitals' : 'DC'\n      }\n\n# Replacing names of teams to their short names\nmatches_2.replace( dic , inplace = True )\ndeliveries_2.replace( dic , inplace = True )\n\n","df2a3820":"matches_2.head()","dde3abf6":"deliveries_2.head()","e8487f95":"matches_2.shape","19fece7e":"matches_2.drop('umpire3' , axis = 1 , inplace = True)","0e832649":"win_prcntage = ( matches_2.winner.value_counts() \/ (matches_2.team1.value_counts() + matches_2.team2.value_counts()) )* 100\nwin_prcntage","90fa52d6":"pd.DataFrame({\n    'Team_Name': list(dict(win_prcntage).keys()),\n    'Win %age': list(dict(win_prcntage).values())\n})","3703ac75":"win_prcntage = win_prcntage.to_frame().reset_index().rename( columns = { 'index' : 'Team_Name' , 0 : 'Win %age'})\nwin_prcntage.sort_values( by = 'Win %age' , ascending = False , inplace = True)","d343b61a":"win_prcntage.head()","3fa83108":"win_prcntage.iplot(kind = 'bar' , x = 'Team_Name' , y = 'Win %age' , title = 'Win %age of each team[2008 - 2019]' , xTitle = 'Teams' , yTitle = 'Win %age')  ","83857459":"# Team Which Featured in Each Season\n\nmatches_2.head()","9effad28":"lis = matches_2.team1.unique()\ndic = {}\nfor values in lis:\n    dic[values] = 0\nfor season_no in  matches_2.groupby('season'):\n    for team in dic:\n        if team in season_no[1].team1.unique():\n            dic[team] += 1\nprint(dic)","b92e1fdd":"team_vs_seasons = pd.DataFrame(dic.items()).rename(columns={0:'Team Name', 1:'Season Count'})\nteam_vs_seasons.sort_values(by='Season Count', ascending= False, inplace=True)\nteam_vs_seasons.head()","f60cda2a":"team_vs_seasons.iplot(kind = 'bar' , x = 'Team Name' , y = 'Season Count' , title = 'Season Count of each team[2008 - 2019]' , xTitle = 'Team Name' , yTitle = 'Season Count')  ","2bbd4191":"matches_2.head()","620e86c6":"matches.player_of_match.value_counts()","23407fdb":"m_of_m_count = matches['player_of_match'].value_counts().head(15).to_frame().reset_index().rename(columns = {'index': 'player_name', 'player_of_match': 'count'})","cc95693b":"m_of_m_count.iplot(kind = 'bar' , x = 'player_name' , y = 'count' , title = 'Man of the match[2008 - 2019]' , xTitle = 'player_name' , yTitle = 'count')  ","aedeeed4":"matches_2.head()","dbc4f3fc":"list(matches_2.city.unique())","aadcf377":"def team_matches_city(city_name):\n    for value in matches_2.groupby('city'):\n        if value[0] == city_name:\n            matches = (value[1].team1.value_counts() + value[1].team2.value_counts())\n            return matches","f07c1184":"city_name = 'Mumbai'\nmatches_in_a_particular_city = team_matches_city(city_name)\nmatches_in_a_particular_city = matches_in_a_particular_city.to_frame().reset_index().rename(columns = {'index' : 'Team Name' , 0 : 'Count'})\nmatches_in_a_particular_city.sort_values(by = \"Count\" , ascending = False , inplace = True)\nmatches_in_a_particular_city","173202cb":" matches_in_a_particular_city.iplot(kind = 'bar' , x = 'Team Name' , y = 'Count' , title = 'Teams vs no of matches played in' + city_name + '[2008 - 2019]' , xTitle = 'Teams' , yTitle = 'Count')  ","3ff54a46":"dic = {'Sunrisers Hyderabad' : 'SRH' , 'Kolkata Knight Riders' : 'KKR',\n       'Royal Challengers Bangalore' : 'RCB' , 'Kings XI Punjab' : 'KXIP',\n       'Mumbai Indians' : 'MI' , 'Chennai Super Kings' : 'CSK' , \n       'Rajasthan Royals' : 'RR' , 'Delhi Capitals' : 'DC'\n      }\nmatches.replace(dic , inplace = True)","7193c9c2":"matches.head()","5e874cfc":"def key_players(team_name):\n    for value in matches.groupby('winner'):\n        if value[0] == team_name:\n            return value[1]['player_of_match'].value_counts().head()","a7f4f8c6":"df = key_players('RCB').to_frame().reset_index().rename(columns = {'index' : 'Player' , 'player_of_match' : 'Count'})\ndf","270a2366":"df.iplot(kind = 'bar' , x = 'Player' , y = 'Count' , title = 'Player vs no of MOM count' , xTitle = 'Player' , yTitle = 'Count')  ","69f619aa":"def player_MOM_for_teams(player_name):\n    for value in matches.groupby('player_of_match'):\n        if value[0] == player_name:\n            return value[1]['winner'].value_counts()\n\n\nplayer_name = 'V Kohli'\ndf = player_MOM_for_teams(  player_name  ).to_frame().reset_index().rename(columns = {'index' : 'Team' , 'winner' : 'Count'})\ndf","7f6103ce":"px.pie( df , values='Count', names='Team', title='Player vs MOM count for different teams' ,color_discrete_sequence=px.colors.sequential.RdBu)","80be0aba":"# for player in list(matches['player_of_match'].unique()):\n#     player_name = player\n    \n#     if player_MOM_for_teams(  player_name  ) != 1:\n#         df = player_MOM_for_teams(  player_name  ).to_frame().reset_index().rename(columns = {'index' : 'Team' , 'winner' : 'Count'})\n#         px.pie( df , values='Count', names='Team', title='Player vs MOM count for different teams' ,color_discrete_sequence=px.colors.sequential.RdBu)\n    ","b7fa4709":"matches.head()","622d29c8":"def avg_win_by_runs_and_wickets_of_a_team_while_defending_and_chasing( team_name , given_df ):\n    for value in given_df.groupby('winner'):\n        if value[0] == team_name:\n\n            total_win_by_runs = sum(list(value[1]['win_by_runs']))\n            total_win_by_wickets = sum(list(value[1]['win_by_wickets']))\n            \n            if 0 in list(value[1]['win_by_runs'].value_counts().index):\n                x = value[1]['win_by_runs'].value_counts()[0]\n            else:\n                x = 0\n                \n            if 0 in list(value[1]['win_by_wickets'].value_counts().index):\n                y = value[1]['win_by_wickets'].value_counts()[0]\n            else:\n                y = 0\n                \n            number_of_times_given_team_win_while_defending = (len(value[1]) - x )\n            number_of_times_given_team_win_while_chasing = (len(value[1]) - y )\n            \n            average_runs_by_which_a_given_team_wins_while_defending = total_win_by_runs \/ number_of_times_given_team_win_while_defending\n            average_wickets_by_which_a_given_team_wins_while_chasing = total_win_by_wickets \/ number_of_times_given_team_win_while_chasing\n            \n            print('number_of_times_given_team_win_while_defending :' , number_of_times_given_team_win_while_defending ) \n            print('number_of_times_given_team_win_while_chasing   :' , number_of_times_given_team_win_while_chasing )\n            print()\n            print('average_runs_by_which_a_given_team_wins_while_defending  : ' ,average_runs_by_which_a_given_team_wins_while_defending )\n            print('average_wickets_by_which_a_given_team_wins_while_chasing : ' ,average_wickets_by_which_a_given_team_wins_while_chasing)\n            ","abfb74cf":"avg_win_by_runs_and_wickets_of_a_team_while_defending_and_chasing('RCB' , matches)","9a090c36":"avg_win_by_runs_and_wickets_of_a_team_while_defending_and_chasing('CSK' , matches)","fad1953e":"def win_visu_by_toss(team_name):\n    datas = matches[(matches['toss_winner']==team_name) & (matches['winner']==team_name)]\n    count = datas['toss_decision'].value_counts()\n    win_bat = count['bat']\/(count['field']+count['bat'])*100\n    win_field = count['field']\/(count['bat']+count['field'])*100\n    print(\"field_count = \"+ str(count['field']))\n    print(\"bat_count = \" + str(count['bat']))\n    print(\"Win %age if fielding is choosen = \" + str(win_field))\n    print(\"Win %age if batting is choosen = \" + str(win_bat))\n    print()\n    print()\n    data = [['Fielding', win_field], ['Batting', win_bat]]\n    data = pd.DataFrame (data,columns=['Decision','Win_%age'])\n    return(px.pie( data , values= 'Win_%age' , names='Decision', title='Win %age For '+ team_name + ' for toss decision',color_discrete_sequence=px.colors.sequential.Rainbow))\n\n            \nteam_name = str(input(\"Enter Team Name : \"))\nplot = win_visu_by_toss(team_name)\nplot","2f7bdc06":"player_of_the_match= pd.pivot_table(matches,values=['player_of_match'],index=['season'],columns=['city'],aggfunc='count',margins=False)\n\nplt.figure(figsize=(10,10))\nsns.heatmap(player_of_the_match['player_of_match'],linewidths=1.0 ,annot=True,cmap='viridis')\nplt.title('Number of player of the match in cities for particular year')\n","e7a7bc59":"matches_played=pd.concat([matches['team1'],matches['team2']], axis=0)\nmatches_played=matches_played.value_counts().reset_index()\nmatches_played.columns=['Team','Total Matches']\nmatches_played['wins']=matches['winner'].value_counts().reset_index()['winner']\nmatches_played.set_index('Team',inplace=True)\nmatches_played","64e4ce59":"win_percentage = round(matches_played['wins']\/matches_played['Total Matches'],3)*100\nwin_percentage","021f8c64":"total_matches_played = matches_played.reset_index().iloc[:,-2].to_numpy()\nmatches_win = matches_played.reset_index().iloc[:,-1].to_numpy()\nwinning_percentage = win_percentage.to_numpy()","b5d6e028":"x = np.arange(len(matches_played))\nplt.figure(figsize=(20, 10))\n\nbar_width = 0.25\n\nplt.bar(x, total_matches_played, width = bar_width, color = 'purple', zorder = 2)\nplt.bar(x+bar_width, matches_win, width = bar_width, color = 'LightSkyBlue', zorder = 2)\n\n\n\nplt.show()","e6f4c9d6":"Teams = [ 'MI', 'RCB', 'KKR', 'K11P', 'CSK', 'DD', 'RR', 'SH', 'DC', 'PW', 'GL', 'RPSG', 'DC', 'KTK', 'RPSGS']\n  \ndata = ([58.3, 55.6, 51.7, 47.7, 50. , 46.6, 45.6, 53.7, 38.7, 28.3, 40. ,\n       62.5, 62.5, 42.9, 35.7])\npie_plot = go.Pie(labels = Teams, values = data)\niplot([pie_plot])","8648a871":"A , B =  input(\"Enter the team names separated by space : \").split(' ')\ndef compare_teams(A , B):\n    new_df = matches_2[ ( (matches_2['team1'] == A) & (matches_2['team2'] == B) ) | ((matches_2['team1'] == B) & (matches_2['team2'] == A)) ]\n    new_df = new_df.winner.value_counts().to_frame().reset_index().rename( columns = {'index' : 'Team' , 'winner' : 'win %age'}) \n    \n    fig = px.pie( new_df , values='win %age', names='Team', title='Comparison of win %age b\/w ' + A +' and ' + B ,color_discrete_sequence=px.colors.sequential.RdBu)\n    return fig\ncompare_teams(A , B)","31ea1070":" matches.head()","3ae098ef":"def stats_of_a_team_in_a_given_season(season_number , team_name):\n    for value in matches.groupby('season'):\n        if value[0] == season_number:\n            new_df = value[1][ ( value[1].team1 == team_name ) | ( value[1].team2 == team_name ) ]\n            \n            avg_win_by_runs_and_wickets_of_a_team_while_defending_and_chasing(team_name , new_df)\n            \n#             avg_win_by_runs_and_wickets_of_a_team_while_defending_and_chasing(team_name , new_df)\n            return new_df\n            ","7ca6e608":"season_number , team_name  = input(\"Enter season number and team name separated by space : \").split()\nseason_number = int(season_number)","cadbf194":"wow_df = stats_of_a_team_in_a_given_season(season_number , team_name)","035e91bf":"matches.head()","b29859da":"top_5_venue = matches.venue.value_counts().head(5)\ntop_5_venue_data = pd.DataFrame({\n    'venue': top_5_venue.index,\n    'count': top_5_venue.values\n})\ntop_5_venue_data","b490cd31":"px.pie( top_5_venue_data , values='count', names='venue', title='Most popular venues [2008 - 2019]', color_discrete_sequence=px.colors.sequential.RdBu)","d4c7d3d2":"# Creating list for each umpires\numpire1 = list(matches.umpire1)\numpire2 = list(matches.umpire2)\numpire3 = list(matches.umpire3)\n\n# Concating all of the lists\numpire1.extend(umpire2)\numpire1.extend(umpire3)","dc09ac07":"# Created the dataframe for umpires\nnew_data = pd.DataFrame(umpire1, columns=['umpires'])\numpire_data = new_data.umpires.value_counts().head(10)\numpire_dataset = pd.DataFrame({\n        'umpires': umpire_data.index,\n        'count': umpire_data.values\n})\numpire_dataset","fc2690c0":"px.pie( umpire_dataset , values='count', names='umpires', title='Umpires to feature in max num of matches [2008 - 2019]', color_discrete_sequence=px.colors.sequential.RdBu)","1e5eb99b":"lis = []\nfor value in matches.groupby('season'):\n\n    \n    if value[1].tail(1).winner.values[0] == value[1].tail(1).team1.values[0]:\n        runner_up = value[1].tail(1).team2.values[0]\n    else:\n        runner_up = value[1].tail(1).team1.values[0]\n    lis.append([ value[0] , value[1].tail(1).winner.values[0] , runner_up ] )\nprint(lis)","9daabae9":"winners = pd.DataFrame(lis , columns = ['Season' , 'Winner' , 'RunnerUp'])\nwinners","5557ab8b":"season_winners = winners['Winner'].value_counts().to_frame().reset_index().rename(columns = {'index' : 'Winner_Team' , 'Winner' : 'Count'})\nseason_winners","795d3ea4":"px.pie( season_winners , values='Count', names='Winner_Team', title='Season Winners [2008 - 2019]', color_discrete_sequence=px.colors.sequential.RdBu)","df23cd02":"season_runner_ups = winners['RunnerUp'].value_counts().to_frame().reset_index().rename(columns = {'index' : 'Runner_up' , 'RunnerUp' : 'Count'})\nseason_runner_ups","9196d430":"px.pie( season_runner_ups , values='Count', names='Runner_up', title='Season Runner Ups [2008 - 2019]', color_discrete_sequence=px.colors.sequential.RdBu)","c519e222":"matches['date'] = pd.to_datetime(matches['date'])\nlis = []\nfor value in matches.groupby('season'):\n    lis.append( [value[0] , str(value[1].head(1).reset_index().date.dt.date[0]) , str(value[1].tail(1).reset_index().date.dt.date[0]) ] )\n\ndate_info = pd.DataFrame( lis , columns = ['Season' , 'Start Date' , 'End Date'])\ndate_info","69b10cc2":"matches.head()","41019286":"lis = []\nfor value in matches.groupby('season'):\n    lis.append([ value[0] , list(value[1].date.value_counts().values).count(2) ])\n\ndouble_headers = pd.DataFrame( lis , columns = ['Season' , 'No. of Double headers'] )\ndouble_headers","41bc34e0":"deliveries.head()","36482bfb":"for value in deliveries.groupby('batsman'):\n    if value[0] == 'DA Warner':\n        print(value[1]['batsman_runs'].sum())","c2385194":"deliveries['batsman_runs'].sum()","4692a61e":"4590 - 308","07d5f26a":"matches.head()","aca76948":"batsmen = matches[['id','season']].merge(deliveries, left_on = 'id', right_on = 'match_id', how = 'left')","43829ac7":"batsmen.head()","adb4321c":"season_num = 2011\nbatsman_name = 'V Kohli'\ndef runs_in_a_particular_season(season_num , batsman_name):\n    for value in batsmen.groupby('season'):\n        if value[0] == season_num :\n            for val in value[1].groupby('batsman'):\n                if val[0] == batsman_name:\n                    print(val[1]['batsman_runs'].sum())\n","0dbe3fb8":"runs_in_a_particular_season(season_num , batsman_name)","0448c824":" def player_runs_across_season(player_name):   \n    dic = dict()\n    for i in matches.season.unique():\n        dic[i] = 0\n    for ids in list(deliveries.match_id.unique()):\n        season = int(matches[(matches.id == ids)]['season'])\n        values = int(deliveries[(deliveries.match_id == ids) & (deliveries.batsman == player_name)].batsman_runs.sum())\n        dic[season] += values\n    dicc = {}\n    dic11 = list(dic.keys())\n    dic11.sort()\n    for i in dic11:\n        dicc[i] = dic[i]\n    return dicc\n    \nplayer_1 = input('enter player 1 ')\nplayer_2 = input('enter player 2 ')\ndic1 = player_runs_across_season(player_1)\ndic2 = player_runs_across_season(player_2)","1bf70da0":" \nfig = go.Figure()\nfig.add_trace(go.Scatter(x=list(dic1.keys()), y=list(dic1.values()),\n                    mode='lines + markers',\n                    name= player_1 ))\nfig.add_trace(go.Scatter(x=list(dic2.keys()), y=list(dic2.values()),\n                    mode='lines+markers',\n                    name= player_2))\n\nfig.show()","708831f5":"def boundaries_counter(given_df):\n    lis = []\n    for value in given_df.groupby('season'):\n        lis.append([ value[0] , value[1]['batsman_runs'].value_counts()[4] , value[1]['batsman_runs'].value_counts()[6] ])\n    boundaries = pd.DataFrame( lis , columns = ['Season' , \"4's\" , \"6's\"] )\n    return boundaries","4f16293d":"boundaries = boundaries_counter(batsmen)","dba8bd0c":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=boundaries['Season'], y=boundaries[\"4's\"],\n                    mode='lines + markers',\n                    name= \"4's\" ))\nfig.add_trace(go.Scatter(x=boundaries['Season'], y=boundaries[\"6's\"],\n                    mode='lines+markers',\n                    name= \"6's\"))\n\nfig.show()","fa9f420f":"batsmen.head()","33806150":"batsman_name = 'V Kohli'\nfor value in batsmen.groupby('batsman'):\n    if value[0] == batsman_name:\n        player_boundaries = boundaries_counter(value[1])\n        break","d7914d4a":"fig = go.Figure()\nfig.add_trace(go.Scatter(x=player_boundaries['Season'], y=player_boundaries[\"4's\"],\n                    mode='lines + markers',\n                    name= \"4's\" ))\nfig.add_trace(go.Scatter(x=player_boundaries['Season'], y=player_boundaries[\"6's\"],\n                    mode='lines+markers',\n                    name= \"6's\"))\n\nfig.show()","f9fb4eb2":"batsman_name = 'AB de Villiers'\ndef batsmen_out_stats(batsman_name):\n    for value in batsmen.groupby('player_dismissed'):\n        if value[0] == batsman_name :\n            return value[1]['dismissal_kind'].value_counts()\n\nstats = batsmen_out_stats(batsman_name)\nstats = stats.to_frame().reset_index().rename(columns = {'index' : 'Dismissal Kind' , 'dismissal_kind' : 'Count'})\nstats","331b2914":"px.pie( stats , values='Count', names='Dismissal Kind', title='Player Dismissal kind distribution[2008 -2019] for ' + str(batsman_name) ,color_discrete_sequence=px.colors.sequential.RdBu)","52b455f0":"top_15_fielders = (batsmen.fielder.value_counts().head(15)).to_frame().reset_index().rename(columns = {'index' : 'Player' , 'fielder' : 'Count'})\ntop_15_fielders","3adc19eb":"top_15_fielders.iplot(kind = 'bar' , x = 'Player' , y = 'Count' , title = 'Fielder vs No. of dismissals[2008 - 2019]' , xTitle = 'Fielder' , yTitle = 'Count')  ","0dbb8960":"batsmen.head()","a6086496":"batsmen['bowler']","dc7dbfb6":"d = batsmen[ batsmen['player_dismissed'] == np.nan ]","34755139":"d.shape","4f42f675":"bowler_name = 'N Saini'\ndef bowler_dismissal_stats(bowler_name):\n    for value in batsmen.groupby('bowler'):\n        if value[0] == bowler_name:\n            return value[1]['dismissal_kind'].value_counts()\nstats = bowler_dismissal_stats(bowler_name)\nstats = stats.to_frame().reset_index().rename(columns = {'index' : 'Dismissal Kind' , 'dismissal_kind' : 'Count'})\nstats","ddaf9aac":"batsmen.head(1).match_id.values[0]","b8a65051":"# Number of wickets taken by given bowler\nif 'run out' in stats['Dismissal Kind'].values:\n    x = stats[(stats['Dismissal Kind'] == 'run out')].Count.values[0]\nelse:\n    x = 0\n\nprint(\"Number of Wickets taken by\" + str(bowler_name) + ' =>', stats['Count'].sum() - x)","5ab1d637":"stats.iplot(kind = 'bar' , x = 'Dismissal Kind' , y = 'Count' , title = 'Dismissal kind distribution vs Count[2008 - 2019] for ' + str(bowler_name) , xTitle = 'Dismissal Kind' , yTitle = 'Count')  ","aa2e0b9d":"px.pie( stats , values='Count', names='Dismissal Kind', title='Dismissal kind distribution vs Count[2008 - 2019] for ' + str(bowler_name) ,color_discrete_sequence=px.colors.sequential.RdBu)","79880895":"deliveries.head()","eb6014f8":"def avg_partnership(player_A1, player_A2, player_B1, player_B2):\n    data11 = deliveries[((deliveries['batsman'] == player_A1) | (deliveries['batsman'] == player_A2)) & ((deliveries['non_striker'] == player_A1) | (deliveries['non_striker'] == player_A2))]\n    print('Avg Partnership of Pair 1 = '+ str(data11.batsman_runs.sum()\/len(data11['match_id'].unique())))\n    data12 = deliveries[((deliveries['batsman'] == player_B1) | (deliveries['batsman'] == player_B2)) & ((deliveries['non_striker'] == player_B1) | (deliveries['non_striker'] == player_B2))]\n    print('Avg Partnership of Pair 2 = '+ str(data11.batsman_runs.sum()\/len(data12['match_id'].unique())))\n    ls= [['Pair 1', data11.batsman_runs.sum()\/len(data11['match_id'].unique())],['Pair 2', data11.batsman_runs.sum()\/len(data12['match_id'].unique())]]\n    dataf = pd.DataFrame(ls, columns = ['Pairs', 'Avg_Runs'])\n    return(px.pie( dataf , values='Avg_Runs', names='Pairs', title='Avg Runs For different Pairs ',color_discrete_sequence=px.colors.sequential.RdBu))\n    \n    \n\nplayer_A1 = input('Enter First Batsman of First Pair : ')\nplayer_A2 = input('Enter Second Batsman of First Pair : ')\nplayer_B1 = input('Enter First Batsman of Second Pair : ')\nplayer_B2 = input('Enter Second Batsman of Second Pair : ')\n\nplot = avg_partnership(player_A1, player_A2, player_B1, player_B2)\nplot","722928e5":"# Player Dismissal Kind Distribution","77b25561":"___\n# Top 5 cricket stadiums","86d28249":"# Umpires to feature in max number of matches","358daeb7":"# Wining %age of Team by Toss Decision","2f6950c9":"# Season Runner-Ups Effective Visualisations","aefe6e14":"# Teams Featured in Most Number of Season","cf682c6c":"# Loading The Datasets","5249ead9":"# Win %age of Each Team","fae4af80":"# Team Vs Numer of Matches Played in Each City","6fcceeec":"# Average Win by Run While Chasing And Defending","de07a832":"___\n# Let's find out the winning %age of each team\n___","ad4add52":"# Stats of a team in a particular season ","15e7f3f9":"# Win %age comparison b\/w Two Teams","e73fd3c1":"# Start and end date of each season","fea55742":"# Removed Inconsistent Teams and Added Short Names","14c3c623":"# Contributors :\n## 1 Abhay Dhiman    - **https:\/\/www.kaggle.com\/abhaydhiman**\n## 2 Aaditya Singhal - **https:\/\/www.kaggle.com\/aadityasinghal**\n## 3 Amandeep Singh  - **https:\/\/www.kaggle.com\/amandeepsingh12**\n## 4 Ayush Malik     - **https:\/\/www.kaggle.com\/procodr**\n\n# Git Repo link   - **https:\/\/github.com\/Ayush-Malik\/Ipl_analysis**","53d9ef3f":"____\n# Key players for different teams\n___","f87ac4af":"# Top - 15 fielders","51caf45a":"# Matches Played Vs Win Number","e1666511":"# Importing Libraries ","ed926468":"# Creating df for season Winners and Runner-ups","c343628f":"#  Man of the Match Player Vs teams  ","19149259":"# Batsmen boundaries across seasons","fe662a64":"# Player of the Match Vs Season","558bf03d":"# Season Winners Effective Visualisations","45591ec3":"# Number of player of the match in cities for particular year","41cc6680":"# Number of fours and sixes  across seasons","f84cd46b":"# Number of double headers in each season"}}