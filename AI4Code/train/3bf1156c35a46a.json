{"cell_type":{"a7ace602":"code","afbdb5b7":"code","d384f8c0":"code","37026704":"code","b8c8d638":"code","6e38265a":"code","68e0a7ec":"code","0de7dec9":"code","09f536ac":"code","b8075810":"code","15f5c879":"code","d6d771a6":"code","5aa10619":"code","eadce685":"code","7317a4c5":"code","53af7fe4":"code","c1c47bc4":"code","19b41331":"code","c14a2c0c":"code","5654e893":"code","5eb82fb5":"code","2faec7af":"code","5557129e":"code","40a7ef81":"code","05211669":"markdown","57bc220e":"markdown","92eb5533":"markdown","ce2f592d":"markdown","28ce4aca":"markdown","3910fcb5":"markdown","bd1ae1be":"markdown","21746e41":"markdown","8024ef5d":"markdown","f36d36f9":"markdown","1a73d693":"markdown","d3e6bdd5":"markdown","385edf8b":"markdown","dc286121":"markdown","636512f8":"markdown","08b0b131":"markdown","b46c74e6":"markdown","13db5c48":"markdown","3a2d7614":"markdown","81aff907":"markdown","2080ff6e":"markdown"},"source":{"a7ace602":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np\nimport re\nimport matplotlib.pyplot as plt\nimport shutil, os\nimport networkx as nx\nimport pandas as pd                  ## For loading the daset\nimport matplotlib.pyplot as plt      ## For create charts e.g. histogram\nimport seaborn as sns\nimport sklearn as sk\nfrom sklearn.ensemble.forest import RandomForestRegressor\nfrom sklearn.feature_selection import SelectFromModel\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\ncases_by_country = pd.read_csv(\"\/kaggle\/input\/covid-data\/covid_19_cmplt_22_Apr.csv\", encoding=\"UTF-8\") \nqual_life_dat = pd.read_csv(\"\/kaggle\/input\/who-data\/Quality_life_index_cntry_2020.csv\",  encoding=\"UTF-8\") \nPopln_dnsty_dat = pd.read_csv(\"\/kaggle\/input\/who-data\/Popln_dnsty_cntry.csv\", encoding=\"UTF-8\") \ncovid_by_case_dat = pd.read_csv(\"\/kaggle\/input\/carona-paient-record\/COVID19.csv\", encoding=\"UTF-8\",skiprows = [0],\\\n                                usecols = [0,1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\\\n                               names = ['id', 'case_in_country', 'reporting_date', 'summary', 'location',\\\n                                         'country', 'gender', 'age', 'symptom_onset', 'If_onset_approximated',\\\n                                         'hosp_visit_date', 'exposure_start', 'exposure_end', 'visiting Wuhan',\\\n                                         'from_Wuhan', 'death', 'recovered', 'symptom', 'source', 'link']) \n\ncntry_age_str = pd.read_csv(\"\/kaggle\/input\/who-data\/Coutries_age_str.csv\", encoding=\"UTF-8\") \nvaccine_dat = pd.read_csv(\"\/kaggle\/input\/who-data\/vaccine_cloud.csv\", encoding=\"UTF-8\") \n","afbdb5b7":"temp = covid_by_case_dat\ntemp['age_bins'] = pd.cut(x=covid_by_case_dat['age'], bins=[0, 10, 15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,100])\npyramid_dat = temp.groupby([\"gender\", \"age_bins\"], as_index=False )[\"id\"].count()\npyramid_dat.head(35)\n\nmale_dat = pyramid_dat[(pyramid_dat['gender'] == \"male\")]\nmale_dat.columns = ['gender', 'age', 'male']\nfemale_dat = pyramid_dat[(pyramid_dat['gender'] == \"female\")]\nfemale_dat.columns = ['gender', 'age', 'female']\nfemale_dat['female']= -1*female_dat['female']\nmale_dat.head(5)\nprym_dat = male_dat.merge(female_dat, left_on='age', right_on='age')\nprym_dat.drop([\"gender_x\",\"gender_y\" ], axis=1)","d384f8c0":"sns.set_style(\"white\")\n#sns.set_color_codes(\"pastel\")\n\nbar_plot = sns.barplot(x=\"female\",y=\"age\", color=\"red\", label=\"Women\",data = prym_dat)\nbar_plot = sns.barplot(x=\"male\",y=\"age\", color=\"blue\", label=\"Men\",data = prym_dat)\nbar_plot.set(xlabel=\"Population\", ylabel=\"Age-Group\", title = \"Population Pyramid\");","37026704":"def country_age(country):\n    a = cntry_age_str[cntry_age_str['Country'] == country]\n    a = a.drop((\"Country\"), axis = 1)\n    a.columns = [\"0-14\", \"15-64\", \"65+\"]\n    b = a.iloc[0]\n    b = b.replace(to_replace=\"%\",  value=\"\", regex=True)\n    b = pd.to_numeric(b)\n    b.plot(kind='bar', title = \"Age distribution (in percentage) of \" + country)\n    plt.show()\n    pass","b8c8d638":"country_age(\"Canada\")","6e38265a":"# population data and various country indexes data\n\nPopln_dnsty_dat.columns = ['rank','Country', 'Area\/km2', 'Area\/mi2', 'popln', 'density', 'dens\/mil', 'date', 'soruce']\ntemp = pd.merge(qual_life_dat,Popln_dnsty_dat[[\"Country\",\"popln\", \"density\" ]], on =\"Country\", how= 'left' )\n\ntemp = temp.dropna()\ntemp.columns = ['Cname', 'Quality_Life_Index', 'Purchasing_Power_Index','Safety_Index', 'Health_Care_Index',\\\n                'Cost_Living_Index','Property_Price_Income_Ratio', 'Traffic_Commute_Time_Index',\\\n                'Pollution_Index', 'Climate_Index', 'popln', 'density']\n\n# Covid Cases data until 22nd April 2020\n\n\ncases_by_country['Dates'] = pd.to_datetime(cases_by_country['Date'], format=\"%m\/%d\/%Y\")\n# Aggregating the data for provinces.\ncases_country = cases_by_country.groupby([\"Country\/Region\",\"Dates\"]  ).\\\nagg(Confirmed=('Confirmed', sum),Deaths=('Deaths', sum),Recovered=('Recovered', sum)).reset_index()\n# getting the most recent data\ncases_country= cases_country.groupby([\"Country\/Region\"] ).\\\nagg(Dates = (\"Dates\", max) ,Confirmed=('Confirmed', max),Deaths=('Deaths', max),Recovered=('Recovered', max)).reset_index()\n\n#changing Country names to match in the data\ncases_country=cases_country.replace(to_replace=\"Czechia\",  value=\"Czech Republic\", regex=True)\ncases_country=cases_country.replace( to_replace=\"US\", value=\"United States\", regex=True)\ncases_country= cases_country.replace( to_replace=\"Taiwan\\*\", value=\"Taiwan\", regex=True)\n\n#changing column name to match temp's column name\ncases_country.columns =['Cname', 'Dates', 'Confirmed', 'Deaths', 'Recovered']\n\n# Merging two data sets\n\ntwo_dat = pd.merge(temp,cases_country[[\"Cname\",\"Confirmed\",\"Deaths\" ]], on =\"Cname\", how= 'left' )\ntwo_dat = two_dat.dropna()\n\n# Preparing the Vaccine File\n\nA = vaccine_dat.drop(['Comment', 'Entire_Part',\"Schedule\"], axis=1)\n\n#dropping any NA value rows\nA.dropna(inplace = True)\n\n#getting vaccine names from all columns\nA[\"Vaccine_Desc\"] = A[\"Vaccine_Desc\"].str.lower()\nA[\"vaccine\"]=A[\"Vaccine_Desc\"].str.split(\" \", expand = False) \n\ntest = A[[\"Cname\", \"vaccine\"]]\ntest2 = test.groupby('Cname').agg({'vaccine': 'sum'}, as_index=False).reset_index()\npd.set_option('display.max_colwidth', -1)\n\ntest2['vaccine'] = test2['vaccine'].apply(lambda x: list(set(x)))\nvaccine_one_hot= test2['vaccine'].str.join('|').str.get_dummies()\n#vaccine_one_hot.head(10)\nCname = test2[\"Cname\"].to_frame()\n# Merge two Dataframes on index of both the dataframes\nvaccine_all = Cname.merge(vaccine_one_hot, left_index=True, right_index=True)\n\n# matching the key for vaccine and  data sets\nvaccine_all = vaccine_all.replace(to_replace=\"Iran \\(Islamic Republic of\\)\",  value=\"Iran\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Netherlands \\(the\\)\",  value=\"Netherlands\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Philippines \\(the\\)\",  value=\"Philippines\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Russian Federation \\(the\\)\",  value=\"Russia\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"United Arab Emirates \\(the\\)\",  value=\"United Arab Emirates\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"United Kingdom of Great Britain and Northern Ireland \\(the\\)\",  value=\"United Kingdom\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"United States of America \\(the\\)\",  value=\"United States\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Viet Nam\",  value=\"Vietnam\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Republic of Korea \\(the\\)\",  value=\"South Korea\", regex=True)\n\n# For vaccine only part\nvaccine_all = vaccine_all.replace(to_replace=\"Bahamas \\(the\\)\",  value=\"Bahamas\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Bolivia \\(Plurinational State of\\)\",  value=\"Bolivia\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Brunei Darussalam\",  value=\"Brunei\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Myanmar\",  value=\"Burma\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Central African Republic \\(the\\)\",  value=\"Central African Republic\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Democratic Republic of the Congo \\(the\\)\",  value=\"Congo Kinshasa\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Congo \\(the\\)\",  value=\"Congo Brazzaville\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Dominican Republic \\(the\\)\",  value=\"Dominican Republic\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Republic of Moldova \\(the\\)\",  value=\"Moldova\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Niger \\(the\\)\",  value=\"Niger\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Sudan \\(the\\)\",  value=\"Sudan\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Syrian Arab Republic \\(the\\)\",  value=\"Syria\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"United Republic of Tanzania\",  value=\"Tanzania\", regex=True)\nvaccine_all = vaccine_all.replace(to_replace=\"Venezuela \\(Bolivarian Republic of\\)\",  value=\"Venezuela\", regex=True)\n\n\n#merging two data sets with vaccine data set\nfinal2 = pd.merge(two_dat,vaccine_all, on =\"Cname\", how= 'left' )\nfinal2 = final2.dropna()\n\n\n#final2 = pd.merge(final,vaccine2[[\"Cname\",\"vaccine\"]], on =\"Cname\", how= 'left' )\nmortality = final2[\"Deaths\"]\/final2[\"Confirmed\"]\nmortality= mortality.to_frame()\nmortality.columns = [\"target\"]\n\nfinal2[\"popln\"] = final2[\"popln\"].str.replace(',', '')\nfinal2[\"popln\"] = pd.to_numeric(final2[\"popln\"])\nfinal2[\"density\"] = final2[\"density\"].str.replace(',', '')\nfinal2[\"density\"] = pd.to_numeric(final2[\"density\"])\n\n\n\ndeath_density = final2[\"Deaths\"]\/final2[\"density\"]\ndeath_density= death_density.to_frame()\ndeath_density.columns = [\"target\"]\n\ndeath_popln = 1000*final2[\"Deaths\"]\/final2[\"popln\"]\ndeath_popln = death_popln.to_frame()\ndeath_popln.columns = [\"target\"]\n\ndeaths = final2[\"Deaths\"]\ndeaths= deaths.to_frame()\ndeaths.columns = [\"target\"]\n\nfinal3 = final2.drop(['Cname','Deaths', 'Confirmed',\"density\", \"popln\"], axis=1)\n\n\n#Creating data to be tested with four different target variables\nfeature1 = mortality.merge(final3, left_index=True, right_index=True)\nfeature2 = death_density.merge(final3, left_index=True, right_index=True)\nfeature3 = death_popln.merge(final3, left_index=True, right_index=True)\nfeature4 = deaths.merge(final3, left_index=True, right_index=True)","68e0a7ec":"def feature_selector(data,thresh, index  = 0):\n    if index != 0:\n        X = data.iloc[:, index]\n    else: \n        X = data.iloc[:,1:]\n    Y = data.iloc[:, 0]\n    X_train,X_test,y_train,y_test = sk.model_selection.train_test_split(X, Y,test_size=0.3, random_state=786)\n    sel = SelectFromModel(RandomForestRegressor(n_estimators = 500), threshold=thresh)\n    sel.fit(X_train, y_train)\n    selected_feat= X_train.columns[(sel.get_support())]\n    return list(selected_feat)\n\nqual_index = [3,4,6, 7, 9]\nvaccine_only = range(10, 66)\nall_var = [3,4,6, 7, 9]\nall_var.extend(list(vaccine_only))\n\n","0de7dec9":"feature_selector(feature1, \"3*mean\",all_var)\n","09f536ac":"feature_selector(feature1, \"mean\", qual_index)\n","b8075810":"feature_selector(feature2, \"3*mean\", all_var)","15f5c879":"feature_selector(feature2, \"mean\", qual_index)","d6d771a6":"feature_selector(feature3, \"3*mean\", all_var)","5aa10619":"feature_selector(feature3, \"mean\", qual_index)","eadce685":"feature_selector(feature4, \"3*mean\", all_var)","7317a4c5":"feature_selector(feature4, \"mean\", qual_index)","53af7fe4":"# Data Preparation\n\nPoln_dat = Popln_dnsty_dat[[\"Country\",\"popln\", \"density\" ]]\nPoln_dat.columns = [\"Cname\",\"popln\", \"density\" ]\n\n#matching the keys of the two data sets\nPoln_dat = Poln_dat.replace(to_replace=\"Myanmar\",  value=\"Burma\", regex=True)\nPoln_dat = Poln_dat.replace(to_replace=\"Cape Verde\",  value=\"Cabo Verde\", regex=True)\nPoln_dat = Poln_dat.replace(to_replace=\"Democratic Republic of the Congo\",  value=\"Congo Kinshasa\", regex=True)\nPoln_dat = Poln_dat.replace(to_replace=\"Republic of the Congo\",  value=\"Congo Brazzaville\", regex=True)\nPoln_dat = Poln_dat.replace(to_replace=\"Eswatini \\(Swaziland\\)\",  value=\"Eswatini\", regex=True)\nPoln_dat = Poln_dat.replace(to_replace=\"S\u00e3o Tom\u00e9 and Pr\u00edncipe\",  value=\"Sao Tome and Principe\", regex=True)\nPoln_dat = Poln_dat.replace(to_replace=\"Uruguay\\[note 5\\]\",  value=\"Uruguay\", regex=True)\nPoln_dat = Poln_dat.replace(to_replace=\"Palestine\",  value=\"West Bank and Gaza\", regex=True)\n\ncases_country = cases_country.replace(to_replace=\"Congo \\(Kinshasa\\)\",  value=\"Congo Kinshasa\", regex=True)\ncases_country = cases_country.replace(to_replace=\"Congo \\(Brazzaville\\)\",  value=\"Congo Brazzaville\", regex=True)\n\n# merging datasets \nvac_1 = pd.merge(cases_country[[\"Cname\",\"Confirmed\",\"Deaths\" ]], Poln_dat , on =\"Cname\", how= 'left' )\nvaccine_only = pd.merge(vac_1,vaccine_all, on =\"Cname\", how= 'left' )\n\n#manually filling up two entries which could not be cleaned by the program for two countries (Congo)\nvaccine_only.iloc[39, 3:5] = [\"8,67,90,567\", \"37\"]\nvaccine_only.iloc[38, 3:5] = [\"53,99,895\", \"16\"]#congo\nvaccine_only[vaccine_only.isna().any(axis=1)].sort_values(by=['Cname'])#[\"Cname\"]\nvaccine_only = vaccine_only.dropna()\n\n\nmortality = vaccine_only[\"Deaths\"]\/vaccine_only[\"Confirmed\"]\nmortality= mortality.to_frame()\nmortality.columns = [\"target\"]\n\nvaccine_only[\"popln\"] = vaccine_only[\"popln\"].str.replace(',', '')\nvaccine_only[\"popln\"] = pd.to_numeric(vaccine_only[\"popln\"])\nvaccine_only[\"density\"] = vaccine_only[\"density\"].str.replace(',', '')\nvaccine_only[\"density\"] = pd.to_numeric(vaccine_only[\"density\"])\n\n\n# creating response variables\n\ndeath_density = vaccine_only[\"Deaths\"]\/vaccine_only[\"density\"]\ndeath_density= death_density.to_frame()\ndeath_density.columns = [\"target\"]\ndeath_popln = 1000*vaccine_only[\"Deaths\"]\/vaccine_only[\"popln\"]\ndeath_popln = death_popln.to_frame()\ndeath_popln.columns = [\"target\"]\n\ndeaths = vaccine_only[\"Deaths\"]\ndeaths= deaths.to_frame()\ndeaths.columns = [\"target\"]\n\nvacc_dat = vaccine_only.drop(['Cname','Deaths', 'Confirmed',\"density\", \"popln\"], axis=1)\n\n# Creating data for testing each response variable for feature selection\n\nfeat1 = mortality.merge(vacc_dat, left_index=True, right_index=True)\nfeat2 = death_density.merge(vacc_dat, left_index=True, right_index=True)\nfeat3 = death_popln.merge(vacc_dat, left_index=True, right_index=True)\nfeat4 = deaths.merge(vacc_dat, left_index=True, right_index=True)\n","c1c47bc4":"print(\"Mortality\")\nprint(feature_selector(feat1, \"2*mean\"))\nprint(\"\\n\")\nprint(\"Death by population density\")\nprint(feature_selector(feat2, \"2*mean\"))\nprint(\"\\n\")\nprint(\"Death by countries population x 1000\")\nprint(feature_selector(feat3, \"2*mean\"))\nprint(\"\\n\")\nprint(\"Death in numbers\")\nprint(feature_selector(feat4, \"2*mean\"))","19b41331":"# Data preparation\n\nvaccine2 = vaccine_dat.drop(['Comment', 'Entire_Part',\"Schedule\"], axis=1)\nvaccine2.dropna(inplace = True) \n\n# Cleaning Country names \nvaccine2 = vaccine2.replace(to_replace=\"Iran \\(Islamic Republic of\\)\",  value=\"Iran\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Netherlands \\(the\\)\",  value=\"Netherlands\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Philippines \\(the\\)\",  value=\"Philippines\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Russian Federation \\(the\\)\",  value=\"Russia\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"United Arab Emirates \\(the\\)\",  value=\"United Arab Emirates\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"United Kingdom of Great Britain and Northern Ireland \\(the\\)\",  value=\"United Kingdom\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"United States of America \\(the\\)\",  value=\"United States\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Viet Nam\",  value=\"Vietnam\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Republic of Korea \\(the\\)\",  value=\"South Korea\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Bahamas \\(the\\)\",  value=\"Bahamas\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Bolivia \\(Plurinational State of\\)\",  value=\"Bolivia\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Brunei Darussalam\",  value=\"Brunei\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Myanmar\",  value=\"Burma\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Central African Republic \\(the\\)\",  value=\"Central African Republic\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Democratic Republic of the Congo \\(the\\)\",  value=\"Congo Kinshasa\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Congo \\(the\\)\",  value=\"Congo Brazzaville\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Dominican Republic \\(the\\)\",  value=\"Dominican Republic\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Republic of Moldova \\(the\\)\",  value=\"Moldova\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Niger \\(the\\)\",  value=\"Niger\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Sudan \\(the\\)\",  value=\"Sudan\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Syrian Arab Republic \\(the\\)\",  value=\"Syria\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"United Republic of Tanzania\",  value=\"Tanzania\", regex=True)\nvaccine2 = vaccine2.replace(to_replace=\"Venezuela \\(Bolivarian Republic of\\)\",  value=\"Venezuela\", regex=True)\n\n\nvaccine2[\"vaccine\"] =vaccine2[\"Vaccine_Desc\"].str.split(\" \", expand = False)\nvaccine2  = vaccine2.explode(\"vaccine\")\nvaccine2[\"vaccine\"] =vaccine2[\"vaccine\"].str.lower()\n\n","c14a2c0c":"# Creating vaccine detwork\ndef country_vaccine_network(word1, df1 = vaccine2):\n    word = word1.lower()\n    if word1 in list(df1[\"Cname\"]):\n        df = df1[(df1['Cname']==word1)]\n    elif word in list(df1[\"vaccine\"]):\n        df = df1[(df1['vaccine']==word)]\n        \n    else:\n        return \"We could not find your word in our data set\"\n    G  = nx.from_pandas_edgelist(df,\"vaccine\",\"Cname\")\n    plt.figure(figsize = (13,10))\n    nx.draw_networkx(G,with_labels = True,font_size = 10,\n                     font_color = \"k\",\n                     font_family  = \"DejaVu Sans\",\n                     node_shape  = \"h\",node_color = \"lightblue\",\n                     node_size = 1000,linewidths = 10,\n                     edge_color = \"grey\",alpha = .6)\n\n    pass","5654e893":"country_vaccine_network('Meningococcal')","5eb82fb5":"def country_no_vaccine(vaccine, df1 = vaccine2):\n    word = vaccine.lower()\n    if word in list(vaccine2[\"vaccine\"]):\n        df = df1[(df1['vaccine']==word)]\n    else: \n        return \"We could not find this vaccine in our data set.\"\n    a = list(set(df[\"Cname\"]))\n    b = list(set(df1[\"Cname\"]))\n    return np.setdiff1d(b,a)","2faec7af":"list(country_no_vaccine('polio'))","5557129e":"def diff_in_vac(country1, country2, df1 = vaccine2):\n    if all(x in list(df1[\"Cname\"]) for x in [country1, country2]):\n        dfa = df1[(df1['Cname']==country1)]\n        dfb = df1[(df1['Cname']==country2)]\n    else:\n        return \"We could not find you countries in our data set\"\n    \n    a = list(set(dfa[\"vaccine\"]))\n    b = list(set(dfb[\"vaccine\"]))    \n    print(\"In \"+ country2 +\" not in \"+ country1)\n    print(list(np.setdiff1d(b,a)))\n    print(\"In \"+ country1 +\" not in \"+ country2)\n    print(list(np.setdiff1d(a,b)))\n    pass","40a7ef81":"diff_in_vac(\"Pakistan\", \"Italy\")","05211669":"#### Using all variables (country indexes and all vaccines used in the countries)","57bc220e":"## Countries with no Vaccine (selected) ","92eb5533":"Features selected when using **only the number of deaths in COVID-19** of a country as the response variable\n\n#### Using all variables (country indexes and all vaccines used in the countries)","ce2f592d":"Note that, less of the data was filtered out here, as index data was available for only 80 countries, where vaccine data was available for 194 countries","28ce4aca":"# Visualizing Vaccine Data by Country","3910fcb5":"Features selected when using the **ratio of deaths to COVID-19 and population density per km sq** of that country as the response variable\n\n#### Using all variables (country indexes and all vaccines used in the countries)","bd1ae1be":"## Feature Selection using only vaccine data","21746e41":"### Data preparation","8024ef5d":"#### Using countries various indexes only","f36d36f9":"# Feature Selection","1a73d693":"# Difference in vaccinations between two Countries","d3e6bdd5":"### Feature selection of most important vaccine by different response variables","385edf8b":"## Feature Selection using Random Forest ","dc286121":"## Age pyramid of By cases data","636512f8":"#### Using countries various indexes only","08b0b131":"### Data Preparation","b46c74e6":"#### Using countries various indexes only","13db5c48":"## Creating Vaccine and Country Network","3a2d7614":"Features selected when using **mortality** to COVID-19 as the response variable","81aff907":"Features selected when using the **ratio of deaths to COVID-19 and population of that country** (scaled by multiplying by 1000) as the response variable\n\n#### Using all variables (country indexes and all vaccines used in the countries)","2080ff6e":"#### Using countries various indexes only"}}