{"cell_type":{"52a3c3f2":"code","d72ac13a":"code","f61563fa":"code","710c3d9c":"code","aea78e42":"code","f12817c1":"code","61024ef2":"code","beec68e3":"code","16f512e8":"code","369e5c8c":"code","55d0e0de":"code","332e3b35":"code","15c019df":"code","c45ea35d":"code","65ac61f3":"code","ca8d7d15":"code","74e868da":"code","b31d7a4b":"code","3a63a6ef":"code","e8c7c870":"code","0d1f73fb":"code","0d4fd2ae":"code","91c68f52":"code","f1c20c77":"code","c62b2d97":"code","b7f6ff0c":"code","fd5258b2":"code","e0d2102f":"code","a35bc997":"code","a9bb959e":"code","af55763a":"code","46f5972e":"code","7a86cc29":"code","9aa97184":"code","c9527611":"markdown","4b622880":"markdown","cc81f535":"markdown","6bee7fac":"markdown","32f6c320":"markdown"},"source":{"52a3c3f2":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport random\nimport datetime\nfrom catboost import CatBoostClassifier\nfrom sklearn.model_selection import KFold\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom time import time\nfrom tqdm import tqdm_notebook as tqdm\nimport matplotlib.pyplot as plt","d72ac13a":"from sklearn.metrics import confusion_matrix\ndef qwk(act,pred,n=4,hist_range=(0,3)):\n    \n    O = confusion_matrix(act,pred)\n    O = np.divide(O,np.sum(O))\n    \n    W = np.zeros((n,n))\n    for i in range(n):\n        for j in range(n):\n            W[i][j] = ((i-j)**2)\/((n-1)**2)\n            \n    act_hist = np.histogram(act,bins=n,range=hist_range)[0]\n    prd_hist = np.histogram(pred,bins=n,range=hist_range)[0]\n    \n    E = np.outer(act_hist,prd_hist)\n    E = np.divide(E,np.sum(E))\n    \n    num = np.sum(np.multiply(W,O))\n    den = np.sum(np.multiply(W,E))\n        \n    return 1-np.divide(num,den)","f61563fa":"train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv')\ntrain_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')\nspecs = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/specs.csv')\ntest = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')","710c3d9c":"# encode title\n# \u0437\u0434\u0435\u0441\u044c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043b\u0438 \u0432\u0441\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 title - \u0438 \u0432 \u0442\u0435\u0441\u0442\u0435 \u0438 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435\nlist_of_user_activities = list(set(train['title'].value_counts().index).union(set(test['title'].value_counts().index)))\n# \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043b\u0438 \u0438\u0433\u0440\u044b \u0438\u0437 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 title - \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u043e\u0442 0 \u0434\u043e N\nactivities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n\n# \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0438 \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043a\u043e\u0434\u0438\u0440\u043e\u0432\u043a\u0438\ntrain['title'] = train['title'].map(activities_map)\ntest['title'] = test['title'].map(activities_map)\ntrain_labels['title'] = train_labels['title'].map(activities_map)\n\n# \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0433\u0440\u044b win_code - \u043c\u0435\u0442\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0432\u044b\u0438\u0433\u0440\u044b\u0448 \u0432 \u044d\u0442\u043e\u0439 \u0438\u0433\u0440\u0435\n# \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0434\u043b\u044f \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0435\u0439\nwin_code = dict(zip(activities_map.values(), (4100*np.ones(len(activities_map))).astype('int')))\nwin_code[activities_map['Bird Measurer (Assessment)']] = 4110","aea78e42":"# \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0432\u0440\u0435\u043c\u044f \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 timestamp\ntrain['timestamp'] = pd.to_datetime(train['timestamp'])\ntest['timestamp'] = pd.to_datetime(test['timestamp'])","f12817c1":"feat_dict = {'video_start': ['27253bdc','b1d5101d','d51b1749','c189aaf2','c1cac9a2','3b2048ee','27253bdc',\n               '46b50ba8','4a09ace1','99ea62f3','9e6b7fb5'],\n'skip_end_tuttorial' : ['d2659ab4','d88ca108','dcb55a27','3bb91ced','9ed8f6da','7d5c30a2','06372577'],\n'game_start': ['7d093bf9','f93fc684','b5efe37','b7dc8128','99abe2bb','1cf54632','3dfd4aa4',\n               '736f9581','2c4e6db0','c7f7f0e1','532a2afb','dcaede90','abc5811c','77261ab5',\n               '7d093bf9','7ad3efc6','5a848010','3bfd1a65','8ac7cce4','e64e2cfd','90d848e0',\n               '8d84fa81','f56e0afc','51311d7a','7cf1bc53','9b01374f','b7530680','65abac75',\n               '63f13dd7','155f62a4','0086365d','87d743c1','26fd2d99','9b23e8ee','7961e599',\n               'f806dc10','5b49460a','29bdd9ba','ec138c1c','fd20ea40','c2baf0bd','1beb320a',\n               'ecc36b7f','1575e76c','15ba1109','f93fc684','d9c005dd','48349b14','cc5087a3',\n               '756e5507','4901243f','a592d54e','f32856e4','6d90d394','5be391b5','c6971acf',\n               'd2278a3b','9c5ef70c','7040c096','29f54413'],\n'game_exit' : ['a8cc6fec','e9c52111','f5b8c21a','86ba578b','1b54d27f','17113b36','b738d3d3',\n              '25fa8af4','6088b756','4d6737eb','3393b68b','2b058fe3','93b353f2','b012cd7f',\n               'c54cf6c5','3323d7e9','9565bea6','895865f3','070a5291','392e14df','17ca3959',\n               '36fa3ebe','a5be6304','3ccd3f02','3bf1cf26','f6947f54','222660ff','4074bac2',\n               'b2e5b0f1','16dffff1','003cd2ee'],\n'game_instructions': ['3babcb9b','7f0836bf','ab3136ba','bbfe0445','33505eae','15f99afc','795e4a37',\n                     'a1e4395d','6043a2b4','1375ccb7','363d3849','923afab1','67439901',\n                     '71fe8f75','a29c5338','ea321fb1','0d1da71f','f7e47413','3dcdda7f',\n                     'df4940d3','2dcad279','bdf49a58','a52b92d5','6cf7d25c','1bb5fbdb',\n                     '84b0e0c8','7ab78247','7ec0c298','b2dba42b','69fdac0a','49ed92e9',\n                      'bd701df8','832735e1','2a512369','5154fc30','9e4c8c7b','beb0a7b9',\n                      '0413e89d','0a08139c','b80e5e84','f71c4741','56cd3b43','b88f38da',\n                      '828e68f9','f28c589a','15eb4a7d','a1bbe385','8d7e386c'],\n'game_obr_time_true': ['2b9272f4','47026d5f','3afde5dd','e720d930','3ddc79c3','709b1251',\n                      '4d911100','45d01abe','6f4adc4b','cf7638f3','d3268efa','ecaab346',\n                      'e5c9df6f','77ead60d','a8a78786','9b4001e4','3afb49e6','b5053438',\n                      '250513af','55115cbd','c7fe2a55','c74f40cd','e4f1efe6','73757a5e',\n                       'cb6010f8','e3ff61fb','7525289a','daac11b0','a8876db3','9d29771f',\n                      '1f19558b','58a0de5c'],\n'game_obr_time_false': ['df4fe8b6','d88e8f25','c277e121','160654fd','ea296733','5859dfb6',\n                       'e04fb33d','28a4eb9a','7423acbc','e57dd7af','04df9b66','2230fab4',\n                       'c51d8688','1af8be29','89aace00','763fc34e','5290eab1','90ea0bac',\n                        '8b757ab8','e5734469','9de5e594','d45ed6a1','ac92046e','ad2fc29c',\n                        '5de79a6a','88d4a5be','907a054b','e37a2b78','31973d56','44cb4907',\n                        '0330ab6a'],\n'game_events_special': ['bc8f2793','8fee50e2','d02b7a8e','30614231','3d8c61b0',\n                       'a8efe47b','65a38bf7','461eace6','5f0eb72c','56bcd38d','08fd73f3',\n                       'd122731b','a5e9da97','0db6d71d','91561152','6c930e6e','792530f8',\n                       '14de4c5d','5348fd84','8af75982','363c86c9','c0415e5c','71e712d8',\n                       'c58186bf','5c2f29ca','84538528','3bb91dda','d38c2fd7','857f21c0',\n                       '9d4e7b25','9ce586dd','1cc7cfca','5e812b27','e694a35b','d3f1e122',\n                        '37ee8496','a76029ee','a1192f43','85de926c','9ee1c98c','f50fc6c1',\n                        '8f094001','598f4598','3d0b9317','4a4c3d21','499edb7c','4ef8cdd3',\n                        '2dc29e21','fbaf3456','74e5f8a7','6bf9e3e1','5e109ec3','262136f4',\n                        '90efca10','02a42007','804ee27f','5c3d2b2f','4c2ec19f','fcfdffb6',\n                        '86c924c4','46cd75b4','de26c3a6','ad148f58','5d042115','db02c830',\n                        '51102b85','37db1c2f','c7128948','1c178d24','562cec5f','cfbd47c8',\n                        '3edf6747','1996c610','022b4259','bb3e370b','e7561dd2','a6d66e51',\n                        'd06f75b5','d2e9262e','2fb91ec1','28ed704e','83c6c409','38074c54'\n                       '2a444e03'],\n'game_events_true' :['56817e2b','28520915','b74258a0','37c53127','ca11f653'],\n'game_events_false' : ['cdd22e43','3d63345e','b120f2ac','0d18d96c','d185d3ea','a2df0760'],\n'game_otvleksya' : ['bcceccc6','1325467d','a7640a16','bd612267','76babcde','6c517a88',\n                    '4bb2f698','7dfe6d8a','9e34ea74','c952eb01','3ee399c3','7da34a02',\n                    '565a3990','a44b10dc','acf5c23f','587b5989','a16a373e','a0faea5d',\n                    'cf82af56','884228c8','5e3ea25a'],\n'game_find_fail' : ['e79f3763'],\n'user_see':['119b5b02','93edfe2e','ecc6157f','7fd1ac25','5dc079d8','53c6e11a','05ad839b',\n           '26a5a3dd','9554a50b','37937459','37937459','28f975ea','6aeafed4','6f8106d9',\n            '15a43e5b','77c76bc5','f3cd5473','16667cc5','7372e1a5','f54238ee','6f445b57',\n           '4e5fc6f5','47f43a44','85d1b0de','29a42aea','bfc77bd6','13f56524','30df3273',\n           '5f5b2617','47efca07','01ca3a3c','6077cc36','731c0cbe','e080a381','92687c59',\n            'e4d32835','ab4ec3a4','eb2c19cd','6f4bd64e','08ff79ad','2ec694de','3a4be871',\n            'cb1178ad','dcb1663e','0ce40006','1340b8d7','67aa2ada','e79f3763','611485c5',\n            '19967db1','e7e44842','8d748b58','d3640339']}","61024ef2":"def get_data(user_sample, test_set=False):\n    last_activity = 0\n    user_activities_count = {'Clip': 0, 'Activity': 0, 'Assessment': 0, 'Game': 0}\n    accuracy_groups = {0:0, 1:0, 2:0, 3:0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy=0\n    accumulated_correct_attempts = 0 \n    accumulated_uncorrect_attempts = 0 \n    accumulated_actions = 0\n    counter = 0\n    durations = []\n\n    for i, session in user_sample.groupby('game_session', sort=False):\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n#         sess_xx = session['xx'].iloc[0]\n#         sess_yy = session['yy'].iloc[0]\n        event_game_start, event_game_exit, event_game_instructions = 0,0,0\n        event_game_obr_time_true,event_game_obr_time_false = 0,0\n        event_game_events_special, event_game_otvleksya = 0,0\n        event_user_see, event_game_events_special = 0, 0\n        event_game_events_true, event_game_events_false = 0,0\n    \n        if test_set == True:\n            second_condition = True\n        else:\n            if len(session)>1:\n                second_condition = True\n            else:\n                second_condition= False\n        # \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u044e \u0441\u0432\u043e\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438\n        for i in session['event_id']:\n            if i in feat_dict['game_start']:\n                event_game_start +=1 \n            elif i in feat_dict['game_exit']:\n                event_game_exit+=1\n            if i in feat_dict['game_instructions']:\n                event_game_instructions+=1\n            elif i in feat_dict['game_obr_time_true']:\n                event_game_obr_time_true+=1\n            elif i in feat_dict['game_obr_time_false']:\n                event_game_obr_time_false +=1\n            elif i in feat_dict['game_events_special']:\n                event_game_events_special +=1\n            elif i in feat_dict['game_otvleksya']:\n                event_game_otvleksya += 1\n#             elif i in feat_dict['user_see']:\n#                 event_user_see += 1\n            elif i in feat_dict['game_events_special']:\n                event_game_events_special += 1\n            elif i in feat_dict['game_events_true']:\n                event_game_events_true += 1\n            elif i in feat_dict['game_events_false']:\n                event_game_events_false += 1\n            \n            \n        if (session_type == 'Assessment') & (second_condition):\n            all_attempts = session.query(f'event_code == {win_code[session_title]}')\n            # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0441\u0443\u043c\u043c\u044b \u043f\u043e\u0431\u0435\u0434 \u0438 \u043f\u043e\u0440\u0430\u0436\u0435\u043d\u0438\u0439\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # \u043f\u0435\u0440\u0435\u0432\u043e\u0436\u0443 \u043f\u043e\u0431\u0435\u0434\u044b \u0438 \u043f\u043e\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0432 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u044b...\u043a\u0441\u0442\u0430\u0442\u0438 \u043d\u0435 \u0444\u0430\u043a\u0442 \u0447\u0442\u043e \u0437\u0430\u0439\u0434\u0435\u0442 \u0442\u0430\u043a\u043e\u0439 \u0444\u043e\u0440\u043c\u0430\u0442\n            # \u0432\u0435\u0434\u044c \u043f\u043e \u0438\u0442\u043e\u0433\u0443 \u043c\u044b \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0447\u0438\u0441\u043b\u043e \u0443\u0434\u0430\u0447\u043d\u044b\u0445 \u043f\u043e\u043f\u044b\u0442\u043e\u043a\n#             true_attempts = true_attempts\/(true_attempts+false_attempts)\n#             false_attempts = false_attempts\/(true_attempts+false_attempts)\n            \n            features = user_activities_count.copy()\n    #         features['installation_id'] = session['installation_id'].iloc[0]\n#             features['game_session'] = i\n            features['session_title'] = session['title'].iloc[0] \n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts \n            accumulated_uncorrect_attempts += false_attempts\n            #  \u0441\u0442\u0440\u0430\u043d\u043d\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441, \u043d\u043e \u0442\u0443\u0442 \u043a\u0430\u0436\u0435\u0442\u0441\u044f \u043e\u043d \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0434\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u0433\u0440\u044b\n            # \u0432\u044b\u0447\u0438\u0442\u0430\u044f \u0438\u0437 \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u0430 \u043c\u0438\u043d\u0438\u043c\u0443\u043c\n            if durations == []:\n                features['duration_mean'] = 0\n                features['duration_std'] = 0\n#                 features['duration_max'] = 0\n#                 features['duration_min'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n                features['duration_std'] = np.std(durations)\n#                 features['duration_max'] = np.max(durations)\n#                 features['duration_min'] = np.min(durations)\n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            # \u0442\u0443\u0442 \u043c\u044b \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0442\u043e \u0447\u0442\u043e \u044f \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u043b \u0432\u044b\u0448\u0435, \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u043e\u0431\u0435\u0434\u0430\u043c\/\u043f\u043e\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c \u0438 \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \n            # \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0433\u0440\u0443\u043f\u043f\u0443 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \n            features['accumulated_accuracy'] = accumulated_accuracy\/counter if counter > 0 else 0\n            accuracy = true_attempts\/(true_attempts+false_attempts) if (true_attempts+false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n\n            features.update(accuracy_groups)\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group\/counter if counter > 0 else 0\n            features['accumulated_actions'] = accumulated_actions\n            accumulated_accuracy_group += features['accuracy_group']\n            accuracy_groups[features['accuracy_group']] += 1\n            if test_set == True:\n                all_assessments.append(features)\n            else:\n                if true_attempts+false_attempts > 0:\n                    all_assessments.append(features)\n                \n            counter += 1\n\n    #         break\n        \n        # \u0447\u0438\u0441\u043b\u043e \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u043e\u043a \u0432 \u0441\u0435\u0441\u0441\u0438\u0438 \u0432\u0437\u044f\u043b \u043a\u0430\u043a \u0447\u0438\u0441\u043b\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0438 \u0432\u0441\u0435 \u0441\u043b\u043e\u0436\u0438\u043b - \u043b\u043e\u0433\u0438\u0447\u043d\u043e\n        accumulated_actions += len(session)\n        if last_activity != session_type:\n            user_activities_count[session_type] += 1\n            last_activitiy = session_type\n            \n        try: \n#             fulls = event_game_start+event_game_exit+event_game_instructions+event_game_obr_time_true+ \\\n#                     event_game_obr_time_true+event_game_obr_time_false+event_game_events_special + \\\n#                     event_game_otvleksya + event_user_see+event_game_events_special+\\\n#                         event_game_events_true+event_game_events_false\n            features['game_start'] = event_game_start\n            features['game_exit'] = event_game_exit\n            features['game_instructions'] = event_game_instructions\n            features['game_obr_time_true'] = event_game_obr_time_true\n            features['game_obr_time_false'] = event_game_obr_time_false\n            features['game_events_special'] = event_game_events_special\n            features['game_otvleksya'] = event_game_otvleksya\n#             features['user_see'] = event_user_see\/fulls\n            features['game_events_true'] = event_game_events_true\n            features['game_events_false'] = event_game_events_false\n            \n        except:\n            NameError\n    if test_set:\n        return all_assessments[-1] \n    return all_assessments","beec68e3":"compiled_data = []\nids_list = []\n# \u043a\u043e\u0433\u0434\u0430 \u0442\u0430\u043a\u043e\u0435 \u043f\u0438\u0448\u0435\u043c, \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0438\u0434\u0435\u0442 installation_id, \u043f\u043e\u0442\u043e\u043c \u0432\u0441\u044f \u0438\u043d\u0444\u0430 \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043a \u043d\u0435\u043c\u0443 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f\n# \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0447\u0442\u043e \u043a\u0430\u0436\u0434\u044b\u0439 \u0432\u044b\u0437\u043e\u0432 user_samle \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0444\u0438\u0447\u0438 \u0434\u043b\u044f \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u043e\u0433\u043e installation_id\n# total - \u0447\u0438\u0441\u043b\u043e \u0432\u0441\u0435\u0445 \u0443\u043d\u0438\u043a\u043e\u0432 \u0438\u0437 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\nfor i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort=False)), total=17000):\n    ids_list.append(ins_id)\n    compiled_data += get_data(user_sample)\n#     print('I = ', i)\n#     print('INSTALLATION_ID = ', ins_id)\n#     print('COMPILED_DATA', compiled_data)","16f512e8":"new_train = pd.DataFrame(compiled_data)\n# new_train['game_start'] = new_train['game_start'].apply(lambda x: np.log(x))\n# new_train['game_exit'] = new_train['game_exit'].apply(lambda x: np.log(x))\n# new_train['user_see'] = new_train['user_see'].apply(lambda x: np.log(x+0.001))\n# new_train['game_events_true'] = new_train['game_events_true'].apply(lambda x: np.log(x+0.001))\n# new_train['game_events_false'] = new_train['game_events_false'].apply(lambda x: np.log(x+0.001))\ndel compiled_data\nnew_train.shape","369e5c8c":"new_train.fillna(0, inplace=True)\nnew_train.head(5)","55d0e0de":"'''\n# plt.scatter(new_train['accuracy_group'], new_train['game_obr_time_true']);\nss='game_otvleksya'\n# new_train[new_train['accuracy_group']==0][ss].hist(bins=100);\nnew_train[new_train['accuracy_group']==1][ss].hist(bins=100);\nnew_train[new_train['accuracy_group']==2][ss].hist(bins=100);\n# new_train[new_train['accuracy_group']==3][ss].hist(alpha=0.3,bins=100);\n'''","332e3b35":"'''\nfrom sklearn.manifold import TSNE\ntsn = TSNE()\nres_tsne = tsn.fit_transform(new_train)\n\nplt.figure(figsize=(8,8))\nsns.scatterplot(x=res_tsne[:,0],y=res_tsne[:,1],s=100, hue=new_train['accuracy_group'], palette='copper');\n\nfor col in list(new_train.columns):\n    plt.figure(figsize=(8,8))\n    # plt.scatter(res_tsne[:,0],res_tsne[:,1]);\n    sns.scatterplot(x=res_tsne[:,0],y=res_tsne[:,1],s=100, hue=new_train[col], palette='copper');\n    plt.show()\n'''","15c019df":"all_features = [x for x in new_train.columns if x not in ['accuracy_group']]\ncat_features = ['session_title']\nX, y = new_train[all_features], new_train['accuracy_group']\ndel train","c45ea35d":"def make_classifier(lrs,it):\n    clf = CatBoostClassifier(\n                               loss_function='MultiClass',\n    #                            eval_metric=\"AUC\",\n                               task_type=\"CPU\",\n                               learning_rate=lrs,\n                               iterations=it,\n                               od_type=\"Iter\",\n                               depth=11,\n                               early_stopping_rounds=500,\n                               l2_leaf_reg=2,\n    #                            border_count=96,\n#                              bootstrap_type = 'Bayesian',\n#                                 random_strength = 0.6,\n#                                 bagging_temperature = 0.4,\n#                                 use_best_model=True,\n                               random_seed=457\n                              )\n        \n    return clf\noof = np.zeros(len(X))","65ac61f3":"'''\n# preds = np.zeros(len(X_test))\n# for lr in [0.01,0.03,0.05,0.1]:\n#     for itr in [1000,1300,1600,2000,2500]:\n#         for dep in [6,10,13]:\n\n# for itr in [1000,1200,1500,1700]:\n#     for dept in [8,10,12,16]:\ndept, itr = 12, 500\n#     lr, itr = 0.02, 2700\nprint('DEPTH = ', dept)\nprint('ITERS = ', itr)\nfor splt in [2,3,4,5,6,7,8]: \n    print('SPLT = ', splt)\n    oof = np.zeros(len(X))\n    NFOLDS = 5\n    folds = KFold(n_splits=NFOLDS, shuffle=True, random_state=27644437)\n\n    training_start_time = time()\n    for fold, (trn_idx, test_idx) in enumerate(folds.split(X, y)):\n        start_time = time()\n        print(f'Training on fold {fold+1}')\n    #     clf = make_classifier(lrs=lr, it=itr)\n    #     clf.fit(X.loc[trn_idx, all_features], y.loc[trn_idx], eval_set=(X.loc[test_idx, all_features], y.loc[test_idx]),\n    #                           use_best_model=True, verbose=1000, cat_features=cat_features)\n        clf = XGBClassifier(random_state=457)\n        clf.fit(X.loc[trn_idx, all_features], y.loc[trn_idx])\n\n    #     preds += clf.predict(X_test).reshape(len(X_test))\/NFOLDS\n        oof[test_idx] = clf.predict(X.loc[test_idx, all_features]).reshape(len(test_idx))\n\n        print('Fold {} finished in {}'.format(fold + 1, str(datetime.timedelta(seconds=time() - start_time))))\n\n    print('-' * 30)\n    print('OOF QWK:', qwk(y, oof))\n    print('-' * 30)\n'''","ca8d7d15":"xgbcl = XGBClassifier(n_estimators=700, max_depth=10, verbosity=2)\nxgbcl.fit(X,y)","74e868da":"lr, itr = 0.03, 2800\ncats = make_classifier(lrs=lr, it=itr)\ncats.fit(X, y, verbose=500, cat_features=cat_features)","b31d7a4b":"# lr, itr = 0.03, 2800\n# clf = make_classifier(lrs=lr, it=itr)\n# clf.fit(X, y, verbose=500, cat_features=cat_features)\n\n# del X, y\nclf = RandomForestClassifier(n_estimators=600, max_depth=16, random_state=457, verbose=2,\n                            class_weight='balanced')\nclf.fit(X,y)\n# del X, y","3a63a6ef":"n = 11341042 #number of records in file\ns = 1000000 #desired sample size\nrandom.seed(457)\nfilename = '..\/input\/data-science-bowl-2019\/train.csv'\nskip = sorted(random.sample(range(n),n-s))\ntrain_lstm = pd.read_csv(filename, skiprows=skip)\ntrain_lstm.columns = ['event_id','game_session','timestamp','event_data',\n            'installation_id','event_count','event_code','game_time','title','type','world']","e8c7c870":"test_lstm = pd.read_csv('..\/input\/data-science-bowl-2019\/test.csv')\nlabels_lstm = pd.read_csv('..\/input\/data-science-bowl-2019\/train_labels.csv')","0d1f73fb":"from more_itertools import sliced\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Embedding, SpatialDropout1D\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom sklearn.model_selection import train_test_split\nfrom keras.callbacks.callbacks import EarlyStopping\n\nfull = train_lstm.merge(labels_lstm, how='inner', on=['installation_id','game_session'])\ntrain_ls = full[['installation_id','game_session','event_id']]\n# convert to str\ntrain_ls['event_id'] = train_ls['event_id'].apply(lambda x: str(x))\n\ndel train_lstm\n\ndef events_all(aa):\n    xx = ''\n    for i in aa: \n        xx += i + ' '\n    xx = xx.rstrip()\n    return xx\n\nresult = train_ls.groupby(['installation_id','game_session']).sum().reset_index()\nresult['event_id'] = result['event_id'].apply(lambda x: list(sliced(x, 8)))\nresult['new_event'] = result['event_id'].apply(events_all)\nresult = result.merge(labels_lstm, how='inner', on=['installation_id','game_session'])[['new_event','accuracy_group']]\n\n# The maximum number of words to be used. (most frequent)\nMAX_NB_WORDS = 100\n# Max number of words in each complaint.\nMAX_SEQUENCE_LENGTH = 100\n# This is fixed.\nEMBEDDING_DIM = 100\ntokenizer = Tokenizer(num_words=MAX_NB_WORDS, filters='!\"#$%&()*+,-.\/:;<=>?@[\\]^_`{|}~', lower=True)\ntokenizer.fit_on_texts(result['new_event'].values)\nword_index = tokenizer.word_index\nprint('Found %s unique tokens.' % len(word_index))\n\nX = tokenizer.texts_to_sequences(result['new_event'].values)\nX = pad_sequences(X, maxlen=MAX_SEQUENCE_LENGTH)\nprint('Shape of data tensor:', X.shape)\nY = pd.get_dummies(result['accuracy_group']).values\nprint('Shape of label tensor:', Y.shape)\n\nX_train, X_tes, Y_train, Y_tes = train_test_split(X,Y, test_size = 0.05, random_state = 457)\nprint(X_train.shape,Y_train.shape)\n# print(X_test.shape,Y_test.shape)\n\nmodel = Sequential()\nmodel.add(Embedding(MAX_NB_WORDS, EMBEDDING_DIM, input_length=X.shape[1]))\nmodel.add(LSTM(100, dropout=0.3, recurrent_dropout=0.3))\nmodel.add(Dense(4, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n# choose epochs and batch_size\nepochs = 6\nbatch_size = 64\nhistory = model.fit(X_train, Y_train, epochs=epochs, batch_size=batch_size,validation_split=0.1,callbacks=[EarlyStopping(monitor='val_loss', patience=3, min_delta=0.001)])","0d4fd2ae":"# accr = model.evaluate(X_test,Y_test)\n# print('Test set\\n  Loss: {:0.3f}\\n  Accuracy: {:0.3f}'.format(accr[0],accr[1]))\n\nlast_test = test_lstm[['installation_id','game_session',\n                  'timestamp']].groupby(['installation_id']).tail(1)[['installation_id','game_session']]\ntest_ = test_lstm.merge(last_test,how='inner', on=['installation_id','game_session'])\n\ntest_ls = test_[['installation_id','game_session','event_id']]\n# test_ls = test[['installation_id','game_session','event_id']]\ntest_ls['event_id'] = test_ls['event_id'].apply(lambda x: str(x))\nres_test = test_ls.groupby(['installation_id','game_session']).sum().reset_index()\nres_test['event_id'] = res_test['event_id'].apply(lambda x: list(sliced(x, 8)))\nres_test['new_event'] = res_test['event_id'].apply(events_all)\n\nX_ts = tokenizer.texts_to_sequences(res_test['new_event'].values)\nX_ts = pad_sequences(X_ts, maxlen=MAX_SEQUENCE_LENGTH)\nprint('Shape of data tensor:', X_ts.shape)","91c68f52":"test.shape","f1c20c77":"# process test set\nnew_test = []\nfor ins_id, user_sample in tqdm(test.groupby('installation_id', sort=False), total=1000):\n    a = get_data(user_sample, test_set=True)\n    new_test.append(a)\n    \nX_test = pd.DataFrame(new_test)\ndel test","c62b2d97":"X_test.columns","b7f6ff0c":"X_test = X_test[[                          'Clip',                       'Activity',\n                           'Assessment',                           'Game',\n                        'session_title',   'accumulated_correct_attempts',\n       'accumulated_uncorrect_attempts',                  'duration_mean',\n                         'duration_std',           'accumulated_accuracy',                              0,\n                                      1,                                2,\n                                      3,     'accumulated_accuracy_group',\n                  'accumulated_actions',                     'game_start',\n                            'game_exit',              'game_instructions',\n                   'game_obr_time_true',            'game_obr_time_false',\n                  'game_events_special',                 'game_otvleksya',\n                     'game_events_true',              'game_events_false']]\n","fd5258b2":"pred_1 = clf.predict(X_test)\npred_2 = cats.predict(X_test)\npred_3 = xgbcl.predict(X_test)\npred_4 = model.predict(X_ts)\n# del X_test","e0d2102f":"full = pd.concat([pd.DataFrame(pred_1),pd.DataFrame(pred_2),pd.DataFrame(pred_3),\n                  pd.DataFrame(pred_4).idxmax(1)], axis=1)\n# preds = full.mode(axis=1)[0]\npreds = full.mean(axis=1)\npreds = preds.apply(lambda x: int(x))","a35bc997":"preds","a9bb959e":"# # make predictions on test set once\n# preds = clf.predict(X_test)\n# del X_test\n# make predictions on test set once\n# X_test = X_test[[                          'Clip',                       'Activity',\n#                            'Assessment',                           'Game',\n#                         'session_title',   'accumulated_correct_attempts',\n#        'accumulated_uncorrect_attempts',                  'duration_mean',\n#                          'duration_std',           'accumulated_accuracy',                              0,\n#                                       1,                                2,\n#                                       3,     'accumulated_accuracy_group',\n#                   'accumulated_actions',                     'game_start',\n#                             'game_exit',              'game_instructions',\n#                    'game_obr_time_true',            'game_obr_time_false',\n#                   'game_events_special',                 'game_otvleksya',\n#                      'game_events_true',              'game_events_false']]\n# preds = clf.predict(X_test)\n# del X_test","af55763a":"submission['accuracy_group'] = np.round(preds).astype('int')\nsubmission.to_csv('submission.csv', index=None)\nsubmission.head()","46f5972e":"submission['accuracy_group'].plot(kind='hist')","7a86cc29":"train_labels['accuracy_group'].plot(kind='hist')","9aa97184":"pd.Series(oof).plot(kind='hist')","c9527611":"## Clustering","4b622880":"## Make submission","cc81f535":"## Model","6bee7fac":"## Test prediction","32f6c320":"## LSTM prediction"}}