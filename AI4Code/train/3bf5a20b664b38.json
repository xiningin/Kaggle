{"cell_type":{"31177eb0":"code","dba9ec46":"code","9112dc93":"code","793a45e9":"code","daf64016":"code","f3298e8c":"code","11c135eb":"code","1218a18f":"code","b201b82d":"code","0d2637c6":"code","94389c16":"code","5c0de786":"code","ccf05e8a":"code","c6ce6d94":"code","f85b3431":"code","9cfbd7ba":"code","7c11af7b":"code","50fca0a8":"code","19143c7c":"code","1f088cc5":"code","8fb474f8":"code","79a5e53f":"code","7661504d":"code","d0a41ded":"code","7d3cef1d":"code","bcf1be39":"code","ee06862c":"code","e7ca93e8":"code","0d39605f":"code","f1ebf68e":"code","0a1c7475":"code","0f17a424":"code","1c17f562":"code","8d4f0c12":"code","8a032948":"code","82f07d46":"code","0dcbf6be":"code","1c6fecf9":"code","00633c98":"code","87091e7e":"code","b9cd7585":"code","c08ebe63":"code","d46750e4":"code","bfc06bf4":"code","a2afca0c":"markdown","7c5cc5a2":"markdown","ee5bb41e":"markdown","fa402b3b":"markdown","11ebaaec":"markdown","f0c0bac0":"markdown","feea9bde":"markdown","cb74774f":"markdown","9ff14711":"markdown","4619b59e":"markdown","4db739b5":"markdown","eefe001e":"markdown","00f5005e":"markdown","6547285a":"markdown","665e24fb":"markdown"},"source":{"31177eb0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dba9ec46":"import pandas as pd\nimport numpy as np\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff","9112dc93":"data_file_path = \"\/kaggle\/input\/video-games-sales-2019\/vgsales-12-4-2019.csv\"\ncompanie_region_path = \"\/kaggle\/input\/videogamescompaniesregions\/video-games-developers.csv\"\ntotal_sales_column = \"Total_Sales\"","793a45e9":"# Load core data\ndata_df = pd.read_csv(data_file_path)\ndata_df.head()","daf64016":"# Load companie-region data\nregion_df = pd.read_csv(companie_region_path)\nregion_df.head()","f3298e8c":"df = pd.merge(data_df, region_df[['Developer', 'Country']], left_on='Publisher', right_on='Developer', how='left')\ndf.head()","11c135eb":"df.columns","1218a18f":"df[total_sales_column] = df['Total_Shipped'].fillna(0) + df['Global_Sales'].fillna(0)","b201b82d":"tdf = df.copy()\n# tdf['Year'] = df['Year'].fillna(df['Year'].mean())\ntdf = df[df['Year'].notna()] # Carefull about this\ntdf = tdf.sort_values('Year', ascending=True)","0d2637c6":"fig = px.histogram(\n    tdf,\n    x='Platform',\n    animation_frame='Year',\n    range_y=[0, 550],\n)\nfig.update_xaxes(type='category')\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","94389c16":"top_tdf = tdf.groupby(['Platform', 'Year']).agg({total_sales_column: 'count'}).reset_index()\ntop_tdf.columns = ['Platform', 'Year', 'Count']\ntop_tdf = top_tdf[top_tdf['Year'].isin([2016, 2017, 2018, 2019])]\ntop_tdf = top_tdf[top_tdf['Count'] > top_tdf['Count'].sum() * 0.01]\ntop_tdf['Year'] = top_tdf['Year'].astype(str)\n","5c0de786":"fig = px.bar(\n    top_tdf,\n    x='Platform',\n    y='Count',\n    color='Year',\n    barmode=\"group\"\n)\nfig.update_layout(title=\"Total released video-games by platform\")\nfig.update_xaxes(type='category')\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","ccf05e8a":"platform_tdf = tdf.groupby(['Platform', 'Year']).agg({total_sales_column: 'sum'}).reset_index()\nplatform_tdf = platform_tdf.sort_values('Year', ascending=True)\nplatform_tdf.head()","c6ce6d94":"fig = px.bar(\n    platform_tdf,\n    x='Platform',\n    y=total_sales_column,\n    animation_frame='Year',\n    range_y=[0, 150],\n)\nfig.update_xaxes(type='category')\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","f85b3431":"platform_top_tdf = platform_tdf[platform_tdf['Year'].isin([2016, 2017, 2018, 2019])]\nplatform_top_tdf = platform_top_tdf[platform_top_tdf[total_sales_column] > platform_top_tdf[total_sales_column].sum() * 0.005]\nplatform_top_tdf['Year'] = platform_top_tdf['Year'].astype(str)\n\nfig = px.bar(\n    platform_top_tdf,\n    x='Platform',\n    y=total_sales_column,\n    color='Year',\n    barmode=\"group\"\n)\nfig.update_layout(title=\"Total sales by platforms (Millions)\")\nfig.update_xaxes(type='category')\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","9cfbd7ba":"platform_sum_tdf = platform_tdf.groupby(['Platform']).agg({total_sales_column: 'sum'}).reset_index()\nplatform_sum_tdf = platform_sum_tdf[platform_sum_tdf[total_sales_column] > platform_sum_tdf[total_sales_column].sum() * 0.03]","7c11af7b":"fig = px.bar(\n    platform_sum_tdf,\n    x='Platform',\n    y=total_sales_column,\n)\nfig.update_layout(title=\"Total sales of all time in the most important platforms (Millions)\")\nfig.update_xaxes(type='category')\nfig.update_xaxes(categoryorder='category ascending')\nfig.show()","50fca0a8":"platform_tmp_tdf = tdf.groupby(['Platform', 'Year']).agg({total_sales_column: ['sum', 'count']})\n# Here we can check ","19143c7c":"df.head()","1f088cc5":"regions = ['NA', 'JP', 'PAL', 'Other']\nregion_sales_sufix = '_Sales'\nregions_agg = {}\n\nfor region in regions:\n    regions_agg[region + region_sales_sufix] = 'sum'\n\nregions_agg[total_sales_column] = 'sum'\nregions_agg","8fb474f8":"geo_tdf = tdf.groupby(['Year']).agg(regions_agg).reset_index()\ngeo_tdf = geo_tdf.sort_values('Year', ascending=True)\ngeo_tdf.head(10)","79a5e53f":"fig = go.Figure()\n\nfor region in regions:\n    \n    fig.add_trace(go.Scatter(\n        x=geo_tdf['Year'], \n        y=geo_tdf[region + region_sales_sufix], \n        mode='lines',\n        name=region,\n    ))\nfig.update_layout(title=\"Total sales per year by region (Millions)\")\nfig.update_xaxes(type='category')\nfig.show()","7661504d":"genre_tdf = tdf.groupby(['Genre']).agg(regions_agg)\ngenre_tdf = genre_tdf.sort_values(total_sales_column, ascending=False)\ngenre_tdf.head()","d0a41ded":"fig = px.imshow(genre_tdf.drop(total_sales_column, 1).T)\nfig.update_layout(title=\"Sales distribution by genre and region (Millions)\")\nfig.show()","7d3cef1d":"# Reorder df to total genre scattewr plot\ngenre_total_tdf = genre_tdf.reset_index().sort_values(total_sales_column, ascending=False)","bcf1be39":"fig = go.Figure()\n    \nfig.add_trace(go.Scatter(\n    x=genre_total_tdf['Genre'], \n    y=genre_total_tdf[total_sales_column], \n    mode='lines+markers',\n))\nfig.update_layout(title=\"Total sales by genre (Millions)\")\nfig.update_xaxes(type='category')\n# fig.update_xaxes(categoryorder='total descending')\nfig.show()","ee06862c":"genre_tops = list(genre_total_tdf.loc[genre_total_tdf[total_sales_column] > genre_total_tdf[total_sales_column].sum() * 0.03, 'Genre'])\ngenre_tops","e7ca93e8":"esrb_tdf = tdf.groupby('ESRB_Rating').agg({total_sales_column: 'sum'}).reset_index()\nesrb_tdf.head(10)","0d39605f":"fig = px.bar(esrb_tdf, x='ESRB_Rating', y=total_sales_column)\nfig.show()","f1ebf68e":"esrb_tops = list(esrb_tdf.loc[esrb_tdf[total_sales_column] > esrb_tdf[total_sales_column].sum() * 0.03, 'ESRB_Rating'])\nesrb_tops","0a1c7475":"esbr_region_tdf = tdf[tdf['ESRB_Rating'].isin(esrb_tops)].groupby(['ESRB_Rating']).agg(regions_agg)\nesbr_region_tdf.head()","0f17a424":"z = esbr_region_tdf.drop(total_sales_column, 1).values\nx = esbr_region_tdf.drop(total_sales_column, 1).columns.tolist()\ny = esbr_region_tdf.drop(total_sales_column, 1).index.tolist()\n\nz_text = np.around(z)\n\nfig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z_text, colorscale='viridis')\nfig.update_layout(title=\"Sales distribution by genre and region (Millions)\")\nfig.show()","1c17f562":"esrb_genre_tdf = tdf[tdf['ESRB_Rating'].isin(esrb_tops)].groupby(['ESRB_Rating', 'Genre']).agg({total_sales_column: 'sum'}).reset_index()\nesrb_genre_tdf.head(10)","8d4f0c12":"esrb_genre_tdf = esrb_genre_tdf[esrb_genre_tdf['Genre'].isin(genre_tops)]\nesrb_genre_tdf = esrb_genre_tdf.pivot(index='ESRB_Rating', columns='Genre', values=total_sales_column)\nesrb_genre_tdf.head()","8a032948":"z = esrb_genre_tdf.values\nx = esrb_genre_tdf.columns.tolist()\ny = esrb_genre_tdf.index.tolist()\n\nz_text = np.around(z)\n\nfig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z_text, colorscale='viridis')\nfig.update_xaxes(categoryorder='total descending')\nfig.update_layout(title=\"Sales distribution by genre and ESRB (Millions)\")\nfig.show()","82f07d46":"# Replace nana values in Country before groupby\npub_tdf = tdf.copy()\npub_tdf['Country'] = tdf['Country'].fillna(value='Unknown')\n\n# Groupby publisher and country\npub_tdf = pub_tdf.groupby(['Publisher', 'Country']).agg({total_sales_column: ['sum', 'count']}).reset_index()\npub_tdf.columns = ['Publisher', 'Country', 'Sales_Sum', 'Sales_Count']\n\npub_tdf = pub_tdf[pub_tdf['Publisher'] != 'Unknown']\n\npub_tdf.head()","0dcbf6be":"# Filter 5% over sales or 5% over games published\npub_tdf = pub_tdf[(pub_tdf['Sales_Sum'] > pub_tdf['Sales_Sum'].sum() * 0.01) |\n                  (pub_tdf['Sales_Count'] > pub_tdf['Sales_Count'].sum() * 0.01)\n                 ]","1c6fecf9":"# ad-hoc adjustment for Microsoft and Bandai\nmicrosoft_row = pub_tdf[pub_tdf['Publisher'].str.startswith('Microsoft')].sum()\nmicrosoft_row['Publisher'] = 'Microsoft'\nmicrosoft_row['Country'] = 'United States'\nbandai_row = pub_tdf[pub_tdf['Publisher'].str.endswith('Bandai')].sum()\nbandai_row['Publisher'] = 'Namco Bandai'\nbandai_row['Country'] = 'Japan'\n\n# Drop old columns\npub_tdf = pub_tdf[~pub_tdf['Publisher'].str.startswith('Microsoft')]\npub_tdf = pub_tdf[~pub_tdf['Publisher'].str.endswith('Bandai')]\n\n# Append new rows to teh DF\npub_tdf = pub_tdf.append(microsoft_row, ignore_index=True)\npub_tdf = pub_tdf.append(bandai_row, ignore_index=True)","00633c98":"pub_tdf = pub_tdf.sort_values('Sales_Sum', ascending=False)\npub_tdf.head()","87091e7e":"publisher_tops = list(pub_tdf['Publisher'])\nlen(publisher_tops)","b9cd7585":"fig = px.scatter(\n    pub_tdf,\n    x='Publisher',\n    y='Sales_Sum',\n    size='Sales_Count',\n    color='Country',\n)\nfig.update_xaxes(categoryorder='total descending')\nfig.update_layout(title=\"Sales by publisher and region (Millions)\")\nfig.show()","c08ebe63":"pub_genre_df = tdf.groupby(['Publisher', 'Genre']).agg(regions_agg).reset_index()\npub_genre_df = pub_genre_df[pub_genre_df['Publisher'].isin(publisher_tops)]\npub_genre_df = pub_genre_df[pub_genre_df['Genre'].isin(genre_tops)]\npub_genre_df.head()","d46750e4":"fig = px.scatter(\n    pub_genre_df,\n    x='Publisher',\n    y=total_sales_column,\n    color='Genre',\n)\nfig.update_xaxes(categoryorder='total descending')\nfig.update_layout(title=\"Sales by publisher and genre (Millions)\")\nfig.show()","bfc06bf4":"# Re-create the df to only select top 10 Publishers\npub_genre_df = tdf.groupby(['Publisher', 'Genre']).agg(regions_agg).reset_index()\npub_genre_df = pub_genre_df[pub_genre_df['Publisher'].isin(publisher_tops[:10])]\npub_genre_df = pub_genre_df[pub_genre_df['Genre'].isin(genre_tops)]\npub_genre_df.head()\n\npub_genre_pivot_df = pub_genre_df.pivot(index='Publisher', columns='Genre', values=total_sales_column)\n\nz = pub_genre_pivot_df.values\nx = pub_genre_pivot_df.columns.tolist()\ny = pub_genre_pivot_df.index.tolist()\n\nz_text = np.around(z)\n\n# Create heatmap\nfig = ff.create_annotated_heatmap(z, x=x, y=y, annotation_text=z_text, colorscale='viridis')\nfig.update_xaxes(categoryorder='total descending')\nfig.update_layout(title=\"Sales by publisher and genre (Millions)\")\nfig.show()","a2afca0c":"## Distribution of ESRB by region","7c5cc5a2":"# Sales Distribution","ee5bb41e":"## Distribution of ESRB by Genre","fa402b3b":"![The-Best-Video-Game-Publishers.jpg](attachment:The-Best-Video-Game-Publishers.jpg)","11ebaaec":"# Publisher analysis","f0c0bac0":"# Video Games Sales analysis ","feea9bde":"# Aggregated sales analysis ","cb74774f":"# Genres by publisher","9ff14711":"## Load data","4619b59e":"# Sales distribution by ESRB Rating","4db739b5":"# Sales analysis","eefe001e":"# Distribution of sales by genre","00f5005e":"## Distribution of sales by genres and region","6547285a":"## Publisher sales by region","665e24fb":"# Released games by year"}}