{"cell_type":{"41212b7b":"code","9babbc6c":"code","d36a967d":"code","02dcf2ef":"code","571755b5":"code","c461d529":"code","56fb0811":"code","c0248781":"code","d9a35bed":"code","4bcebc2d":"code","9989f7b1":"code","8b52b879":"code","8bd15deb":"code","282299f0":"code","714a9f92":"code","9dacf247":"code","fe85fbd2":"code","6a82a6db":"code","a67008bd":"code","8c6a7893":"code","a87169cb":"code","4230d235":"markdown","064a4f17":"markdown","93888d58":"markdown","0d1bd691":"markdown","a49b762f":"markdown"},"source":{"41212b7b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom sklearn import model_selection, preprocessing, metrics\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport shap\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom sklearn import preprocessing\nimport xgboost as xgb\nimport gc\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\n# Any results you write to the current directory are saved as output.","9babbc6c":"train = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')","d36a967d":"train.shape\n","02dcf2ef":"test.shape","571755b5":"features = test.columns","c461d529":"train = train[features]","56fb0811":"train['target'] = 0\ntest['target'] = 1","c0248781":"train_test = pd.concat([train, test], axis =0)\n\ntarget = train_test['target'].values","d9a35bed":"# object_columns = np.load('..\/input\/standalone-train-and-test-preprocessing\/object_columns.npy')","4bcebc2d":"del train, test","9989f7b1":"gc.collect()","8b52b879":"# # Label Encoding\n# for f in object_columns:\n#     lbl = preprocessing.LabelEncoder()\n#     lbl.fit(list(train_test[f].values) )\n#     train_test[f] = lbl.transform(list(train_test[f].values))\n","8bd15deb":"train, test = model_selection.train_test_split(train_test, test_size=0.2, random_state=42, shuffle=True)","282299f0":"del train_test\ngc.collect()","714a9f92":"train_y = train['target'].values\ntest_y = test['target'].values\ndel train['target'], test['target']\ndel train['id'], test['id']\ngc.collect()","9dacf247":"train = lgb.Dataset(train, label=train_y)\ntest = lgb.Dataset(test, label=test_y)\n","fe85fbd2":"param = {'num_leaves': 50,\n         'min_data_in_leaf': 30, \n         'objective':'binary',\n         'max_depth': 5,\n         'learning_rate': 0.2,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 44,\n         \"metric\": 'auc',\n         \"verbosity\": -1}","6a82a6db":"num_round = 50\nclf = lgb.train(param, train, num_round, valid_sets = [train, test], verbose_eval=50, early_stopping_rounds = 50)","a67008bd":"feature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(),features)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(20))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","8c6a7893":"del train, test, clf\ngc.collect()\n\ntrain = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')\n\nfeatures = test.columns[1:]\ntrain = train[features]\ntest = test[features]\n\ntrain['target'] = 0\ntest['target'] = 1\n\ntrain_test = pd.concat([train, test], axis =0)\n\ndel train, test\n\ntarget = train_test['target'].values\n\n\ntrain, test = model_selection.train_test_split(train_test, test_size=0.2, random_state=42, shuffle=True)\n\ntrain_y = train['target'].values\ntest_y = test['target'].values\ndel train['target'], test['target']\ndel train['id'], test['id']\ngc.collect()\n\ntrain = lgb.Dataset(train, label=train_y)\ntest = lgb.Dataset(test, label=test_y)\n\nclf = lgb.train(param, train, num_round, valid_sets = [train, test], verbose_eval=50, early_stopping_rounds = 50)\n\n","a87169cb":"feature_imp = pd.DataFrame(sorted(zip(clf.feature_importance(),features)), columns=['Value','Feature'])\n\nplt.figure(figsize=(20, 10))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False).head(20))\nplt.title('LightGBM Features')\nplt.tight_layout()\nplt.show()\nplt.savefig('lgbm_importances-01.png')","4230d235":"At 0.90 the AUC has improved, but it's still really high.","064a4f17":"Let's take a look how similar train and test sets are.","93888d58":"Whoa, that's a pretty significant AUC!  0.999996 adverserial AUC is the biggest one I've ever come across. I first thought I might be making a mistake, but re-run this script several times, and don't seem to find any bugs in it. But I am open to criticims\/suggestions.\n\nLet's look now at the top 20 \"adversarial\" features.","0d1bd691":"Seems that transaction date is the main \"culprit\".\n\nLet's see what happens when we remove time stamp.","a49b762f":"To be continued ..."}}