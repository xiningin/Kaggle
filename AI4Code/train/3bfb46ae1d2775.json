{"cell_type":{"8f76b705":"code","74594ffa":"code","2d9b4f6e":"code","186aa6fc":"code","ce9775e3":"code","7eb11dd6":"code","9ce41dcf":"code","63e9811d":"code","232faf90":"code","19d4928b":"code","6921c175":"code","d1c59bb7":"code","6d703543":"code","f055d9e6":"code","289b07db":"code","39808ff3":"code","42ed8e77":"code","d7b52edd":"code","d462edfd":"code","8a64a27c":"code","9f726953":"code","d213e663":"code","07a15c9d":"code","29abec50":"code","37738665":"code","b1953110":"markdown","ef70b1ad":"markdown"},"source":{"8f76b705":"import pandas as pd\nimport numpy as np\n\ndata = pd.read_csv(\"..\/input\/abcdef\/abc.csv\")\ndata = data.fillna(method=\"ffill\")\ndata.head(10)","74594ffa":"sentences=[]\ni=0\nwhile i<len(data):\n    tmp=[]\n    while (data.iloc[i,0])!=\".\" and data.iloc[i,1] !='.':\n        tmp.append(data.iloc[i,0])\n        i=i+1\n    tmp.append('.')\n    sentences.append(np.array(tmp))\n    i=i+1\n","2d9b4f6e":"tagged_sentences=[]\ni=0\nwhile i<len(data):\n    tmp=[]\n    while (data.iloc[i,0])!=\".\" and data.iloc[i,1] !='.':\n        tmp.append(data.iloc[i,1])\n        i=i+1\n    tmp.append('.')\n    tagged_sentences.append(np.array(tmp))\n    i=i+1","186aa6fc":"print(len(tagged_sentences)),\n    \nprint(len(sentences))","ce9775e3":"from sklearn.model_selection import train_test_split\n \n \ntrain_sentences, test_sentences, train_tags, test_tags = train_test_split(sentences, tagged_sentences, test_size=0.2)","7eb11dd6":"words, tags = set([]), set([])\n# T\u00e1ch word v\u00e0 tag th\u00e0nh t\u1eebng t\u1eeb 1 b\u1ecf v\u00e0o 2 bi\u1ebfn tr\u00ean \nfor s in sentences:\n    for w in s:\n        words.add(w.lower())\n \nfor ts in tagged_sentences:\n    for t in ts:\n        tags.add(t)\n\n# Chuy\u1ec3n v\u1ec1 s\u1ed1 \u0111\u1ec3 training, c\u00e1c gi\u00e1 tr\u1ecb ch\u01b0a c\u00f3 nh\u00e3n th\u00ec s\u1ebd thay b\u1eb1ng PAD c\u00f2n tr\u1ed1ng th\u00ec thay b\u1eb1ng \n\nword2index = {w: i + 2 for i, w in enumerate(list(words))}\nword2index['-PAD-'] = 0  # The special value used for padding\nword2index['-OOV-'] = 1  # The special value used for OOVs\n#print(word2index)\ntag2index = {t: i + 1 for i, t in enumerate(list(tags))}\ntag2index['-PAD-'] = 0  # The special value used to padding","9ce41dcf":"len(tag2index)","63e9811d":"train_sentences_X, test_sentences_X, train_tags_y, test_tags_y = [], [], [], []\n \nfor s in train_sentences:\n    s_int = []\n    for w in s:\n        try:\n            s_int.append(word2index[w.lower()])\n        except KeyError:\n            s_int.append(word2index['-OOV-'])\n \n    train_sentences_X.append(s_int)\n \nfor s in test_sentences:\n    s_int = []\n    for w in s:\n        try:\n            s_int.append(word2index[w.lower()])\n        except KeyError:\n            s_int.append(word2index['-OOV-'])\n \n    test_sentences_X.append(s_int)\n \nfor s in train_tags:\n    train_tags_y.append([tag2index[t] for t in s])\n \nfor s in test_tags:\n    test_tags_y.append([tag2index[t] for t in s])\n \nprint(train_sentences_X[0])\nprint(test_sentences_X[0])\nprint(train_tags_y[0])\nprint(test_tags_y[0])","232faf90":"MAX_LENGTH = len(max(train_sentences_X, key=len))\nprint(MAX_LENGTH)  # 271\n ","19d4928b":"from keras.preprocessing.sequence import pad_sequences\n \ntrain_sentences_X = pad_sequences(train_sentences_X, maxlen=MAX_LENGTH, padding='post')\ntest_sentences_X = pad_sequences(test_sentences_X, maxlen=MAX_LENGTH, padding='post')\ntrain_tags_y = pad_sequences(train_tags_y, maxlen=MAX_LENGTH, padding='post')\ntest_tags_y = pad_sequences(test_tags_y, maxlen=MAX_LENGTH, padding='post')\n \nprint(train_sentences_X[0])\nprint(test_sentences_X[0])\nprint(train_tags_y[0])\nprint(test_tags_y[0])\n","6921c175":"!pip install git+https:\/\/www.github.com\/keras-team\/keras-contrib.git","d1c59bb7":"from keras.models import Sequential\nfrom keras.layers import Dense, LSTM, InputLayer, Bidirectional, TimeDistributed, Embedding, Activation\nfrom keras.optimizers import Adam\nfrom tensorflow.keras import layers\nfrom keras_contrib.layers import CRF\nfrom keras.models import Model, Input\nfrom keras.layers import LSTM, Embedding, Dense, TimeDistributed, Dropout, Bidirectional\nfrom keras_contrib.layers import CRF\n#from sklearn_crfsuite import CRF\n#from tf_crf_layer.layer import CRF","6d703543":"!pip install crf_layer","f055d9e6":"inputs = Input(shape=(MAX_LENGTH,))\nmodel = Embedding(input_dim=len(words) + 1, output_dim=128)(inputs)  # 20-dim embedding\nmodel = Bidirectional(LSTM(256, return_sequences=True))(model)  # variational biLSTM\nmodel = TimeDistributed(Dense(len(tag2index)))(model)\nmodel = Activation('softmax')(model)\n#outputs = layers.Dense(1, activation=\"softmax\", name=\"predictions\")(model)  # a dense layer as suggested by neuralNer\ncrf = CRF(len(tag2index),sparse_target=True)\noutputs = crf(model)  # output","289b07db":"model = Sequential()\nmodel.add(InputLayer(input_shape=(MAX_LENGTH, )))\nmodel.add(Embedding(len(word2index), 128))\nmodel.add(Bidirectional(LSTM(256, return_sequences=True)))\nmodel.add(TimeDistributed(Dense(len(tag2index))))\nmodel.add(Activation('softmax'))\ncrf = CRF(len(tag2index),sparse_target=True)\nmodel.add(crf)\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=Adam(0.001),\n              metrics=['accuracy'])\n \nmodel.summary()","39808ff3":"model = Model(inputs=inputs, outputs=outputs)","42ed8e77":"\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=Adam(0.001),\n              metrics=['accuracy']) \n \nmodel.summary()","d7b52edd":"def to_categoricalsss(sequences, categories):\n    cat_sequences = []\n    for s in sequences:\n        cats = []\n        for item in s:\n            cats.append(np.zeros(categories))\n            cats[-1][item] = 1.0\n        cat_sequences.append(cats)\n    return np.array(cat_sequences)","d462edfd":"cat_train_tags_y = to_categoricalsss(train_tags_y, len(tag2index))\nprint(cat_train_tags_y[0])","8a64a27c":"model.fit(train_sentences_X, to_categoricalsss(train_tags_y, len(tag2index)), batch_size=128,verbose=1, epochs=10, validation_split=0.2)","9f726953":"cat_train_tags_y = to_categorical(train_tags_y, len(tag2index))\nprint(cat_train_tags_y[0])","d213e663":"word2index","07a15c9d":"train_sentences_X[1]","29abec50":"np.array(to_categorical(train_tags_y, len(tag2index))).shape","37738665":"np.array(train_sentences_X).shape","b1953110":"--------------------------------------------------------------------------------------------------------------\nPreporcess ","ef70b1ad":"----------------------------------------------------------------------------------------------------------------\n \nCHU\u1ea8N H\u00d3A D\u1eee LI\u1ec6U"}}