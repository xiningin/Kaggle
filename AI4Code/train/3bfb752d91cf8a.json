{"cell_type":{"122f0b70":"code","42cc2522":"code","f714a4b4":"code","2cfa2866":"code","7ce9d1ad":"code","41041d7a":"code","dbb246eb":"code","0cde15f2":"code","5b34577b":"code","8fd73d88":"code","0e6c0836":"code","95fbe4df":"code","a9d31769":"code","430ade06":"code","47279922":"code","fa853292":"code","28c4a5a8":"code","bb0e5675":"code","12d8e19a":"code","81160776":"code","b9dd519b":"markdown","fea49565":"markdown","5ae6fcf6":"markdown","714bd627":"markdown"},"source":{"122f0b70":"#Importing all the necessary libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer, SimpleImputer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler\n\nfrom sklearn.model_selection import train_test_split, cross_val_score, RepeatedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression, SGDClassifier\nfrom sklearn import metrics\nfrom sklearn.metrics import (\n    confusion_matrix, plot_confusion_matrix, accuracy_score, precision_score,\n    recall_score, f1_score, plot_roc_curve, plot_precision_recall_curve, precision_recall_curve,\n    roc_auc_score\n)","42cc2522":"#load and check the data\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","f714a4b4":"print(train.shape)\nprint(test.shape)","2cfa2866":"train.sample(10)","7ce9d1ad":"X = train.drop(['Survived'], axis=1)\nY = train.Survived","41041d7a":"print(X.shape)\nprint(Y.shape)","dbb246eb":"X.sample(10)","0cde15f2":"test.sample(10)","5b34577b":"# Total missing values in each columns\ntrain.isnull().sum(axis=0)","8fd73d88":"# percentage of missing values in each columns\ntest.isnull().sum(axis=0)","0e6c0836":" pipeline1 = ColumnTransformer([\n    ('drop', 'drop', ['PassengerId', 'Name', 'Cabin', 'Ticket']),\n    ('ageimputer', IterativeImputer(max_iter=10, random_state=27), ['Age', 'Fare']),\n    ('embarkedimputer', SimpleImputer(strategy='most_frequent'), ['Embarked'])],\n    remainder='passthrough'\n)\n\npipeline2 = ColumnTransformer([\n    ('scaler', MinMaxScaler(), [0, 1, 5, 6]),\n    ('onehot', OneHotEncoder(), [2, 3, 4])\n])\n\npipeline = make_pipeline(pipeline1, pipeline2)\n","95fbe4df":"pipeline.fit(X)\nX_train = pipeline.transform(X)\nX_test = pipeline.transform(test)","a9d31769":"pd.DataFrame(X_train).sample(10)","430ade06":"pd.DataFrame(X_test).sample(10)","47279922":"lr = LogisticRegression(penalty='none', verbose=2)\nrr = SGDClassifier(penalty='l2', n_jobs=4, loss='log')\nls = SGDClassifier(penalty='l1', n_jobs=4, loss='log')\nen = SGDClassifier(penalty='elasticnet', n_jobs=4, loss='log')","fa853292":"metrics.SCORERS.keys()","28c4a5a8":"cv = RepeatedKFold(n_splits=5, n_repeats=1, random_state=27)\n\ngrid_ridge_lasso = {\n    'alpha': np.arange(0, 1, 0.05),\n    'learning_rate': np.array(['constant']),\n    'eta0': np.array([0.1, 0.01, 0.001])\n}\n\ngrid_elastic = {\n    'alpha': np.arange(0, 1, 0.05),\n    'l1_ratio': np.arange(0, 1, 0.05),\n    'learning_rate': np.array(['constant']),\n    'eta0': np.array([0.1, 0.01, 0.001])\n}\n\nlr_score = cross_val_score(lr, X_train, Y, cv=cv, scoring='accuracy')\n\nrr_search = GridSearchCV(rr, grid_ridge_lasso, cv=cv, scoring='accuracy')\nrr_score = rr_search.fit(X_train, Y)\n\nls_search = GridSearchCV(ls, grid_ridge_lasso, cv=cv, scoring='accuracy')\nls_score = ls_search.fit(X_train, Y)\n\nen_search = GridSearchCV(en, grid_elastic, cv=cv, scoring='accuracy')\nen_score = en_search.fit(X_train, Y)","bb0e5675":"print(np.mean(lr_score))\nprint(rr_score.best_score_)\nprint(ls_score.best_score_)\nprint(en_score.best_score_)","12d8e19a":"predictions = en_score.best_estimator_.predict(X_test)","81160776":"pd.DataFrame({\n    'PassengerId': test.PassengerId,\n    'Survived': predictions\n}).to_csv('\/kaggle\/working\/submission_titanic_sgd_ls_lr.csv', index=False)","b9dd519b":"**Preprocessing Pipeline**","fea49565":"**Models**","5ae6fcf6":"**Checking Missing values**","714bd627":"ID:181-35-2475"}}