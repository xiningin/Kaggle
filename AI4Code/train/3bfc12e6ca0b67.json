{"cell_type":{"33f288b8":"code","33c9a833":"code","4056f34e":"code","3505ad59":"code","a2c9a5bb":"code","90bfbb76":"code","e2061215":"code","5f2db3ac":"code","7cf09a1d":"code","33e30c7d":"code","68147180":"code","2aba1996":"code","277e82fd":"code","7efc5eef":"code","5fe0c6cb":"code","baff595d":"code","739970cb":"code","abfcb837":"code","9c7bd39c":"code","b78d8c14":"code","0fcc289c":"code","24a6c502":"code","739661c5":"code","345c9f7b":"code","2f930db7":"code","c4d33f58":"code","a155a244":"code","9419c3f3":"code","44c0263f":"code","8e3b8824":"code","ab3ae2db":"code","b5440609":"code","c253fafb":"code","b9d5d0e2":"code","63f56a6c":"code","cc98fac5":"code","7e68a905":"code","8b57d7c8":"code","89a7df7b":"code","452e79ea":"code","093d94a1":"code","560fd37c":"code","7d741adf":"code","ab74aaed":"code","e046e8e0":"code","6aa301ae":"code","e0955be0":"code","caf6c812":"code","f4d7ffbd":"code","5f82a770":"code","dbf780c3":"code","596547df":"code","fd016682":"code","86beddee":"code","52bf65b4":"code","664abc06":"code","afa9e3ab":"code","a637ffd0":"code","56ab2814":"code","97e7a7e7":"code","0481f394":"code","d74e17ce":"code","c4d38a95":"code","7a13afaa":"code","05f759d7":"code","2c4d205c":"code","e524d52d":"code","1776ca29":"code","96ee6bb8":"code","1c404f90":"code","130ad5ce":"code","77839517":"code","03203f99":"code","dfaaf983":"code","5e6d829c":"code","1941485b":"code","3d0646c4":"code","6543bf5d":"code","2e2f7adc":"code","a6bff3a2":"code","c992f18a":"markdown","69118a7f":"markdown","14e4a9ae":"markdown","d6a7ba36":"markdown","94c63a64":"markdown","48fbd28c":"markdown","5cf5a8e4":"markdown","f4ba624e":"markdown","9c7dd35b":"markdown","3ca72e57":"markdown","a9782fd0":"markdown","fa31eb5f":"markdown","89919760":"markdown","69f454cd":"markdown","079fce4f":"markdown","70d8629b":"markdown","ef85950d":"markdown","4f262d9c":"markdown","044083fb":"markdown","9bac99fc":"markdown","b01b9ef7":"markdown","8ce3f54f":"markdown","8bd2796f":"markdown","48cd5996":"markdown","9342eb25":"markdown","7c254bd7":"markdown","991651d6":"markdown","d99c10d5":"markdown","1d849fce":"markdown","1059eb08":"markdown","b12a9f52":"markdown","09ca0c50":"markdown","a15d3dfb":"markdown","e93c01aa":"markdown","a477150b":"markdown","92a7ba1e":"markdown","a2c84010":"markdown","6aadb643":"markdown","da302786":"markdown","0b7df421":"markdown","d0b0e31a":"markdown","3a82a49c":"markdown","18390d4d":"markdown","6318a739":"markdown"},"source":{"33f288b8":"#Load the librarys\nimport pandas as pd #To work with dataset\nimport numpy as np #Math library\nimport seaborn as sns #Graph library that use matplot in background\nimport matplotlib.pyplot as plt #to plot some parameters in seaborn\nimport warnings\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\n# Import StandardScaler from scikit-learn\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.pipeline import make_pipeline, Pipeline\nfrom sklearn.preprocessing import FunctionTransformer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.manifold import TSNE\nfrom sklearn.ensemble import AdaBoostClassifier,VotingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom datetime import datetime, date\nfrom sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport lightgbm as lgb\nimport tensorflow as tf \nfrom tensorflow.keras import layers\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport sklearn.metrics as metrics\nwarnings.filterwarnings('ignore')","33c9a833":"# Read spreadsheet and assign it to swiss_loan\nml_dataset= pd.read_csv('..\/input\/incomedata\/ml_dataset.csv')","4056f34e":"# code will replace the special character to nan and then drop the columns \nml_dataset['native-country'] = ml_dataset['native-country'].replace('?',np.nan)\nml_dataset['worklass'] = ml_dataset['worklass'].replace('?',np.nan)\nml_dataset['occupation'] = ml_dataset['occupation'].replace('?',np.nan)#dropping the NaN rows now \nml_dataset.dropna(how='any',inplace=True)\n\nlist_to_keep= ['age', 'worklass', 'fnlwgt', 'education', 'education-num',\n       'martial-status', 'occupation', 'relationship', 'race', 'sex',\n       'capital-gain', 'capital-loss', 'hours-per-week', 'native-country',\n       'income']\nclean_reduced_df= ml_dataset[list_to_keep].copy()\n\nclean_reduced_df.shape","3505ad59":"clean_reduced_df['fnlwgt_log'] = np.log(clean_reduced_df['fnlwgt'])\nclean_reduced_df['capital-gain_log'] = np.log(clean_reduced_df['capital-gain']+1)\nclean_reduced_df['capital-loss _log'] = np.log(clean_reduced_df['capital-loss']+1)\nclean_reduced_df.columns","a2c9a5bb":"list_final= ['age', 'worklass',  'education', 'education-num',\n       'martial-status', 'occupation', 'relationship', 'race', 'sex',\n         'hours-per-week', 'native-country',\n       'income', 'fnlwgt_log', 'capital-gain_log', 'capital-loss _log']\nclean_reduced_final= clean_reduced_df[list_final].copy()","90bfbb76":"clean_reduced_final.shape ","e2061215":"clean_reduced_final[\"income\"] = clean_reduced_final[\"income\"].apply(lambda x:0 if \n                        x=='<=50K' else 1)\nclean_reduced_final[\"income\"].unique()","5f2db3ac":"%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\n# Get the counts of each category\nTaux_counts = clean_reduced_final.income.value_counts()\n\n# Print the count values for each category\nprint(Taux_counts)\nsns.set(style=\"darkgrid\")\nsns.barplot(Taux_counts.index, Taux_counts.values, alpha=0.9)\nplt.title('Frequency Distribution of income')\nplt.ylabel('Number of Occurrences', fontsize=12)\nplt.xlabel('Income', fontsize=12)\nplt.show()","7cf09a1d":"poor =len(clean_reduced_final[clean_reduced_final[\"income\"]==0])\nrich = len(clean_reduced_final[clean_reduced_final[\"income\"]==1])\n\n# Data to plot\nlabels = 'rich','poor'\nsizes = [rich,poor]\n\n# Plot\nplt.figure(figsize=(10,8))\nplt.pie(sizes, labels=labels,\nautopct='%1.1f%%', shadow=True, startangle=0)\nplt.title('Ratio of rich Vs porr\\n', fontsize=20)\nsns.set_context(\"paper\", font_scale=2)\n\n","33e30c7d":"# Create arrays for the features and the response variable\nclassification_cible = \"income\"\ny = clean_reduced_final[classification_cible]\nX = clean_reduced_final.drop(['income'], axis=1)","68147180":"X.shape","2aba1996":"y.shape","277e82fd":"np.unique(y)","7efc5eef":"from sklearn.pipeline import Pipeline, TransformerMixin\nfrom sklearn.neighbors import LocalOutlierFactor\n\nclass OutlierReplace(BaseEstimator,TransformerMixin):\n    def __init__(self,factor=1.5):\n        self.factor = factor\n\n    def outlier_removal(self,X,y=None):\n        X = pd.Series(X).copy()\n        qmin=X.quantile(0.05)\n        qmax=X.quantile(0.95)\n        q1 = X.quantile(0.25)\n        q3 = X.quantile(0.75)\n        iqr = q3 - q1\n        lower_bound = q1 - (self.factor * iqr)\n        upper_bound = q3 + (self.factor * iqr)\n        #X.loc[((X < lower_bound) | (X > upper_bound))] = np.nan \n        X.loc[X < lower_bound] = qmin\n        X.loc[X > upper_bound] = qmax\n        return pd.Series(X)\n\n    def fit(self,X,y=None):\n        return self\n\n    def transform(self,X,y=None):\n        return X.apply(self.outlier_removal)\n","5fe0c6cb":"np.random.seed(0)\n# select the float columns\nnum_columns = X.select_dtypes(include=['int64','float64']).columns\n# select non-numeric columns\ncat_columns = X.select_dtypes(exclude=['int64','float64']).columns\n\nfill_missing_then_one_hot_encoder = make_pipeline(\n    SimpleImputer(strategy='most_frequent', fill_value='manquante',add_indicator=True),\n    OneHotEncoder(handle_unknown='ignore')\n)\nfill_missing_then_Standar_scaler = make_pipeline( OutlierReplace(),\n                                                 SimpleImputer(strategy='median',add_indicator=True),\n    StandardScaler()\n)\n\ndata_preprocess = make_column_transformer(\n    ( fill_missing_then_one_hot_encoder , cat_columns),\n    ( fill_missing_then_Standar_scaler, num_columns)\n)\n#X_pre =data_preprocess.fit_transform(X)\n#y_pre= LabelEncoder().fit_transform(y.astype(str))\n# Split the dataset and labels into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=clean_reduced_final[classification_cible])\nprint(\"{} rows in test set vs. {} in training set. {} Features.\".format(X_test.shape[0], X_train.shape[0], X_test.shape[1]))","baff595d":"X_train.shape","739970cb":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\n\n\n\ncross_validation_design = KFold(n_splits=5,\n                                shuffle=True,\n                                random_state=77)\n\ncross_validation_design","abfcb837":"from sklearn.ensemble import RandomForestClassifier as RandomForest\n\nRF_MODEL = {}\n\n# define pipe \nRF_MODEL['pipeline']=Pipeline([\n                               ('data_cleaning', data_preprocess),\n                               ('rf', RandomForest(random_state=7))])\n\n# Define hyperparams\nRF_MODEL['hyperparams'] = {}\nRF_MODEL['hyperparams']['rf__n_estimators'] = [ 50, 100]\n#RF_MODEL['hyperparams']['rf__max_features'] = [None, 'sqrt', 'log2', .1, .25, .50, .75, .85]\n#RF_MODEL['hyperparams']['rf__max_depth'] = [None, 4, 7, 10, 20]\n\n# Search d'HP\nRF_MODEL['gridsearch'] = GridSearchCV(\n    estimator=RF_MODEL['pipeline'],\n    param_grid=RF_MODEL['hyperparams'],\n    scoring='accuracy',\n    cv=cross_validation_design\n)\n\nRF_MODEL['gridsearch'].fit(X_train, y_train)","9c7bd39c":"RF_MODEL['gridsearch'].best_params_","b78d8c14":"RF_MODEL['gridsearch'].best_score_","0fcc289c":"print(\"train roc_auc_scoree :{}\".format(metrics.roc_auc_score(y_train,RF_MODEL['gridsearch'].predict_proba(X_train)[:,1])))\n#print(\"test accucary score :{}\".format(auc(grid_search,X_test, y_test)))\nprint(\"test roc_auc_score :{}\".format(metrics.roc_auc_score(y_test,RF_MODEL['gridsearch'].predict_proba(X_test)[:,1])))","24a6c502":"from xgboost import XGBClassifier\nfrom sklearn import metrics\nfrom sklearn.feature_selection import SelectKBest, chi2\n # Deine the pipe :\nXGB_pipe=Pipeline([('data_cleaning', data_preprocess),\n                   ('XGB',  XGBClassifier(objective= 'binary:logistic', seed=42))])\n#  Define our search space for grid search\nsearch_space = [\n  {\n    'XGB__n_estimators': [50, 100],\n    'XGB__learning_rate': [0.01, 0.3],\n    #'XGB__max_depth': range(3, 10),\n    #'XGB__colsample_bytree': [i\/10.0 for i in range(1, 3)],\n    #'XGB__gamma': [i\/10.0 for i in range(3)],\n    #'XGB__score_func': [chi2],\n    #'XGB__k': [10],\n  }\n]\nxgb_MODEL = GridSearchCV(estimator = XGB_pipe,param_grid = search_space, scoring='accuracy', cv=cross_validation_design)\nxgb_MODEL.fit(X_train,y_train)","739661c5":" xgb_MODEL.best_params_, xgb_MODEL.best_score_                    ","345c9f7b":"print(\"train roc_auc_scoree :{}\".format(metrics.roc_auc_score(y_train,xgb_MODEL.predict_proba(X_train)[:,1])))\n#print(\"test accucary score :{}\".format(auc(grid_search,X_test, y_test)))\nprint(\"test roc_auc_score :{}\".format(metrics.roc_auc_score(y_test,xgb_MODEL.predict_proba(X_test)[:,1])))","2f930db7":"from sklearn.linear_model import LogisticRegression\nLR_MODEL = {}\n\n# define pipe \nLR_MODEL['pipeline']=Pipeline([\n                               ('data_cleaning', data_preprocess),\n                           ('LR', LogisticRegression())])\n\n# Define hyperparams\nLR_MODEL['hyperparams'] = {}\nLR_MODEL['hyperparams']['LR__C'] = [0.1,1]\nLR_MODEL['hyperparams']['LR__penalty'] = ['l2']\nLR_MODEL['hyperparams']['LR__solver'] = ['newton-cg', 'liblinear']\n# Search d'HP\nLR_MODEL['gridsearch'] = GridSearchCV(\n    estimator=LR_MODEL['pipeline'],\n    param_grid=LR_MODEL['hyperparams'],\n    scoring='accuracy',\n    cv=cross_validation_design\n)\n\nLR_MODEL['gridsearch'].fit(X_train, y_train)","c4d33f58":" LR_MODEL['gridsearch'].best_params_, LR_MODEL['gridsearch'].best_score_   ","a155a244":"print(\"train roc_auc_scoree :{}\".format(metrics.roc_auc_score(y_train,LR_MODEL['gridsearch'].predict_proba(X_train)[:,1])))\n#print(\"test accucary score :{}\".format(auc(grid_search,X_test, y_test)))\nprint(\"test roc_auc_score :{}\".format(metrics.roc_auc_score(y_test,LR_MODEL['gridsearch'].predict_proba(X_test)[:,1])))","9419c3f3":"# Import Gaussian Naive Bayes model\nfrom sklearn.naive_bayes import GaussianNB\nclass DenseTransformer(TransformerMixin):\n\n    def fit(self, X, y=None, **fit_params):\n        return self\n\n    def transform(self, X, y=None, **fit_params):\n        return X.todense()\nGaussNB=Pipeline([('data_cleaning', data_preprocess),\n                  ('to_dense', DenseTransformer()),\n                  ('NB', GaussianNB())])\nclf = GaussNB.fit(X_train, y_train)\nclf.score(X_train, y_train)","44c0263f":"from sklearn.metrics import  accuracy_score\naccuracies={}\n# Create a random forest classifier, fixing the seed to 2\nAda_model=Pipeline([('data_cleaning', data_preprocess),\n                           ('NB', AdaBoostClassifier(random_state=2))])\nAda_model = Ada_model.fit(X_train, y_train)\n# Use it to predict the labels of the test data\nAda_predictions = Ada_model.predict(X_test)\naccuracies['Ada'] = accuracy_score(y_test, Ada_predictions)\n\n# Create a random forest classifier, fixing the seed to 2\nrf_model = RF_MODEL['pipeline'].fit(\n  X_train, y_train)\n\n# Use it to predict the labels of the test data\nrf_predictions = rf_model.predict(X_test)\n\n# Assess the accuracy of both classifiers\naccuracies['rf'] = accuracy_score(y_test, rf_predictions)","8e3b8824":"for x, y in accuracies.items():\n    print(\"model {} have an accuracy {}\".format(x,y))","ab3ae2db":"!pip install catboost","b5440609":"from catboost import CatBoostClassifier\n#importing library and building model\nmodelcat=Pipeline([('data_cleaning', data_preprocess),\n                  ('CAT', CatBoostClassifier(eval_metric=\"Accuracy\", depth=10, iterations=15, l2_leaf_reg= 9, learning_rate= 0.15))])\nmodelcat.fit(X_train, y_train)","c253fafb":"print(\"train roc_auc_score :{}\".format(metrics.roc_auc_score(y_train,modelcat.predict_proba(X_train)[:,1])))\n#print(\"test accucary score :{}\".format(auc(grid_search,X_test, y_test)))\nprint(\"test roc_auc_score :{}\".format(metrics.roc_auc_score(y_test,modelcat.predict_proba(X_test)[:,1])))","b9d5d0e2":"from sklearn.neighbors import KNeighborsClassifier\n# Define a grid for n_neighbors with values 10, 50 and 100\n# define pipe \nKNN_pipe=Pipeline([\n                               ('data_cleaning', data_preprocess),\n                           ('KNN', KNeighborsClassifier())])\nparam_grid = {'KNN__n_neighbors': [5,50]}\n\n# Optimize for KNeighborsClassifier() using GridSearchCV\ngridknn = GridSearchCV(KNN_pipe, param_grid,scoring='accuracy', cv=cross_validation_design)\ngridknn.fit(X_train, y_train)\ngridknn.best_params_","63f56a6c":"print(\"train roc_auc_score :{}\".format(metrics.roc_auc_score(y_train,gridknn.predict_proba(X_train)[:,1])))\n#print(\"test accucary score :{}\".format(auc(grid_search,X_test, y_test)))\nprint(\"test roc_auc_score :{}\".format(metrics.roc_auc_score(y_test,gridknn.predict_proba(X_test)[:,1])))","cc98fac5":"print(X_train.shape, X_test.shape)","7e68a905":"# Prepare x :\nX_train_pre =data_preprocess.fit_transform(X_train)\nX_test_pre =data_preprocess.fit_transform(X_test)","8b57d7c8":"import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.gridspec as gridspec\nimport itertools\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom mlxtend.classifier import EnsembleVoteClassifier\nfrom mlxtend.data import iris_data\nfrom mlxtend.plotting import plot_decision_regions\nfrom sklearn.decomposition import PCA,TruncatedSVD\n# Initializing Classifiers\nclf1 = LogisticRegression(random_state=0,solver='liblinear')\nclf2 = RandomForestClassifier(random_state=0)\nclf3 = SVC(random_state=0, probability=True)\nclf4= XGBClassifier()\neclf = EnsembleVoteClassifier(clfs=[clf1, clf2, clf3,clf4],\n                              weights=[1, 2, 1,2], voting='soft')\npca = TruncatedSVD(n_components=2)\nX_reduced=pca.fit_transform(X_train_pre)\n# Plotting Decision Regions\n\ngs = gridspec.GridSpec(2, 2)\nfig = plt.figure(figsize=(10, 8))\n\nlabels = ['Logistic Regression',\n          'Random Forest',\n          'RBF kernel SVM',\n          'Ensemble']\n\nfor clf, lab, grd in zip([clf1, clf2, clf3,clf4, eclf],\n                         labels,\n                         itertools.product([0, 1],\n                         repeat=2)):\n    clf.fit(X_reduced, y_train)\n    ax = plt.subplot(gs[grd[0], grd[1]])\n    fig = plot_decision_regions(X=X_reduced, y=y_train.to_numpy(),\n                                clf=clf, legend=2)\n    plt.title(lab)\n\nplt.show()","89a7df7b":"eclf.fit(X_train_pre, y_train)","452e79ea":"print(\"train roc_auc_score:{}\".format(metrics.roc_auc_score(y_train,eclf.predict_proba(X_train_pre)[:,1])))","093d94a1":"from mlxtend.classifier import StackingClassifier\nfrom sklearn.linear_model import LogisticRegression\nlr=LogisticRegression(solver='liblinear')\nsclf_with_proba = StackingClassifier(classifiers=[clf1, clf2, clf3],\n                          use_probas=True,\n                          meta_classifier=lr)\nsclf_with_proba.fit(DenseTransformer().fit_transform(X_train_pre), y_train)\n","560fd37c":"print(\"train roc_auc_score :{}\".format(metrics.roc_auc_score(y_train,sclf_with_proba.predict_proba(DenseTransformer().fit_transform(X_train_pre))[:,1])))","7d741adf":"from mlxtend.classifier import StackingClassifier\nstack3= StackingClassifier(\n    classifiers=[\n        LogisticRegression(solver='liblinear'),\n        XGBClassifier()\n    ],\n    use_probas=True,\n    meta_classifier=LogisticRegression()\n)\nstack3.fit(X_train_pre, y_train)\n","ab74aaed":"print(\"train roc_auc_score :{}\".format(metrics.roc_auc_score(y_train,stack3.predict_proba(X_train_pre)[:,1])))\n","e046e8e0":"fig, ax_arr = plt.subplots(nrows = 2, ncols = 4, figsize = (20,15))\n\n\n#----------RandomForest---------\n\n\nRadomForest_pred = RF_MODEL['gridsearch'].predict(X_test)\nfprdm, tprdm, thresholddm = metrics.roc_curve(y_test,RadomForest_pred)\nroc_aucrf = metrics.auc(fprdm,tprdm)\n\nax_arr[0,0].plot(fprdm,  tprdm, 'b', label = 'AUC = %0.2f' % roc_aucrf)\nax_arr[0,0].plot([0, 1], [0, 1],'r--')\nax_arr[0,0].set_title('RandomForest ',fontsize=20)\nax_arr[0,0].set_ylabel('True Positive Rate',fontsize=20)\nax_arr[0,0].set_xlabel('False Positive Rate',fontsize=15)\nax_arr[0,0].legend(loc = 'lower right', prop={'size': 16})\n\n\n#----------Catboost---------\n\nmodelcat_pred = modelcat.predict(X_test)\nfprlog, tprlog, thresholdlog = metrics.roc_curve(y_test, modelcat_pred)\nroc_auccat = metrics.auc(fprlog, tprlog)\n\nax_arr[0,1].plot(fprlog, tprlog, 'b', label = 'AUC = %0.2f' % roc_auccat)\nax_arr[0,1].plot([0, 1], [0, 1],'r--')\nax_arr[0,1].set_title('CatBoost',fontsize=20)\nax_arr[0,1].set_ylabel('True Positive Rate',fontsize=20)\nax_arr[0,1].set_xlabel('False Positive Rate',fontsize=15)\nax_arr[0,1].legend(loc = 'lower right', prop={'size': 16})\n\n\n#----------XGBoost---------\n\n\nXGBClassifier_pred = xgb_MODEL.predict(X_test)\n#preds = probs[:,1]\nfprsm, tprsm, thresholdsm = metrics.roc_curve(y_test, XGBClassifier_pred)\nroc_aucxgb = metrics.auc(fprsm, tprsm)\n\n\nax_arr[0,2].plot(fprsm, tprsm, 'b', label = 'AUC = %0.2f' % roc_aucxgb)\nax_arr[0,2].plot([0, 1], [0, 1],'r--')\nax_arr[0,2].set_title('XGBoost ',fontsize=20)\nax_arr[0,2].set_ylabel('True Positive Rate',fontsize=20)\nax_arr[0,2].set_xlabel('False Positive Rate',fontsize=15)\nax_arr[0,2].legend(loc = 'lower right', prop={'size': 16})\n\n\n\n#----------KNN---------\n\nKnn_pred = gridknn.predict(X_test)\n#preds = probs[:,1]\nfprgnb, tprgnb, thresholdgnd = metrics.roc_curve(y_test, Knn_pred)\nroc_aucxgb = metrics.auc(fprgnb, tprgnb)\n\n\nax_arr[0,3].plot(fprgnb, tprgnb, 'b', label = 'AUC = %0.2f' % roc_aucxgb)\nax_arr[0,3].plot([0, 1], [0, 1],'r--')\nax_arr[0,3].set_title('KNN',fontsize=20)\nax_arr[0,3].set_ylabel('True Positive Rate',fontsize=20)\nax_arr[0,3].set_xlabel('False Positive Rate',fontsize=15)\nax_arr[0,3].legend(loc = 'lower right', prop={'size': 16})\n\n\n#----------LinearRegression_MODEL---------\n\n\nLR_MODEL_pred = LR_MODEL['gridsearch'].predict(X_test)\n#preds = probs[:,1]\nfprfst, tprfst, thresholdfst = metrics.roc_curve(y_test, LR_MODEL_pred)\nroc_aucLR= metrics.auc(fprfst, tprfst)\n\n\nax_arr[1,0].plot(fprfst, tprfst, 'b', label = 'AUC = %0.2f' % roc_aucLR)\nax_arr[1,0].plot([0, 1], [0, 1],'r--')\nax_arr[1,0].set_title('LR',fontsize=20)\nax_arr[1,0].set_ylabel('True Positive Rate',fontsize=20)\nax_arr[1,0].set_xlabel('False Positive Rate',fontsize=15)\nax_arr[1,0].legend(loc = 'lower right', prop={'size': 16})\n\n\n\n\n#----------ALL---------\n\n\nax_arr[1,2].plot(fprdm, tprdm, 'b', label = 'RandomForest', color='black')\nax_arr[1,2].plot(fprlog, tprlog, 'b', label = 'Catboost', color='blue')\nax_arr[1,2].plot(fprsm, tprsm, 'b', label = 'XGBoost', color='brown')\nax_arr[1,2].plot(fprgnb, tprgnb, 'b', label = 'KNN', color='green')\nax_arr[1,2].plot(fprfst, tprfst, 'b', label = 'LR', color='grey')\nax_arr[1,2].set_title('Receiver Operating Comparison ',fontsize=20)\nax_arr[1,2].set_ylabel('True Positive Rate',fontsize=20)\nax_arr[1,2].set_xlabel('False Positive Rate',fontsize=15)\nax_arr[1,2].legend(loc = 'lower right', prop={'size': 16})","6aa301ae":"model_final = Pipeline([('data_cleaning', data_preprocess),\n                        ('rf', RandomForest(random_state=7, n_estimators=100))\n                        ])\n\n\n# fit on all data\nmodel_final.fit(X, y)","e0955be0":"#  Import necessary modules\nfrom  sklearn.metrics import classification_report,confusion_matrix\n# predict \n# Predict the labels of the test data: y_pred\ny_pred = model_final.predict(X)\n\n# Generate the confusion matrix and classification report\nprint(confusion_matrix(y, y_pred))\nprint(classification_report(y, y_pred))","caf6c812":"# select the float columns\nnum_columns = X.select_dtypes(include=['int64','float64']).columns\n# select non-numeric columns\ncat_columns = X.select_dtypes(exclude=['int64','float64']).columns\n\nfill_missing_then_one_hot_encoder = make_pipeline(\n    SimpleImputer(strategy='most_frequent', fill_value='manquante'),\n    OneHotEncoder(handle_unknown='ignore')\n)\nfill_missing_then_Standar_scaler = make_pipeline(SimpleImputer(strategy='median'),\n    StandardScaler()\n)\n\ndata_preprocess = make_column_transformer(\n    ( fill_missing_then_one_hot_encoder , cat_columns),\n    ( fill_missing_then_Standar_scaler, num_columns)\n)","f4d7ffbd":"X_pre =data_preprocess.fit_transform(X)\n\n# Split the dataset and labels into training and test sets\nX_train, X_test, y_train, y_test = X_train, X_test, y_train, y_test = train_test_split(X_pre, y, test_size=0.2, stratify=y)\nprint(\"{} rows in test set vs. {} in training set. {} Features.\".format(X_test.shape[0], X_train.shape[0], X_test.shape[1]))","5f82a770":"X_train.shape\n","dbf780c3":"X_test.shape","596547df":"from imblearn.over_sampling import SMOTE\n\nsmote = SMOTE(sampling_strategy='auto')\nX_sm, y_sm = smote.fit_resample(X_train, y_train)\n\ndf = pd.DataFrame(X_sm)\ndf['target'] = y_sm\n\ndf['target'].value_counts().plot(kind='bar', title='Count (target)')","fd016682":"X_sm.shape","86beddee":"y_sm.shape","52bf65b4":"from sklearn.ensemble import RandomForestClassifier as RandomForest\n\nRF_MODEL = {}\n\n# define pipe \nRF_MODEL['pipeline']=Pipeline([('rf', RandomForest(random_state=7))])\n\n# Define hyperparams\nRF_MODEL['hyperparams'] = {}\nRF_MODEL['hyperparams']['rf__n_estimators'] = [  100,200]\n#RF_MODEL['hyperparams']['rf__max_features'] = [None, 'sqrt', 'log2', .1, .25, .50, .75, .85]\n#RF_MODEL['hyperparams']['rf__max_depth'] = [None, 4, 7, 10, 20]\n\n# Search d'HP\nRF_MODEL['gridsearch'] = GridSearchCV(\n    estimator=RF_MODEL['pipeline'],\n    param_grid=RF_MODEL['hyperparams'],\n    scoring='accuracy',\n    cv=cross_validation_design\n)\n\nRF_MODEL['gridsearch'].fit(X_sm, y_sm)","664abc06":"RF_MODEL['gridsearch'].best_params_","afa9e3ab":"RF_MODEL['gridsearch'].best_score_","a637ffd0":"def plot_roc_auc(y_test, y_score, classes):\n    assert len(classes) >= 1, \"len classes must be >= 1\"\n    plt.figure()\n    if len(classes) > 2:  # multi-label\n        # Compute ROC curve and ROC area for each class\n        for i in range(len(classes)):\n            fpr, tpr, _ = metrics.roc_curve(y_test[:, i], y_score[:, i])\n            roc_auc = metrics.auc(fpr, tpr)\n            plt.plot(fpr, tpr, label='ROC curve of class {0} (area = {1:0.2f})'.format(classes[i], roc_auc))\n        # Compute micro-average ROC curve and ROC area\n        fpr, tpr, _ = roc_curve(y_test.ravel(), y_score.ravel())\n        roc_auc = auc(fpr, tpr)\n        # Plot ROC curve\n        plt.plot(fpr, tpr, label='micro-average ROC curve (area = {0:0.2f})'.format(roc_auc))\n    else:\n        fpr, tpr, _ = metrics.roc_curve(y_test, y_score)\n        roc_auc = metrics.auc(fpr, tpr)\n        plt.plot(fpr, tpr, label='ROC curve (area = {0:0.2f})'.format(roc_auc))\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic')\n    plt.legend(loc=\"lower right\")\n    plt.show()","56ab2814":"print(\"train roc_auc_scoree :{}\".format(metrics.roc_auc_score(y_sm,RF_MODEL['gridsearch'].predict_proba(X_sm)[:,1])))\n#print(\"test accucary score :{}\".format(auc(grid_search,X_test, y_test)))\nprint(\"test roc_auc_score :{}\".format(metrics.roc_auc_score(y_test,RF_MODEL['gridsearch'].predict_proba(X_test)[:,1])))","97e7a7e7":"# Predict the labels of the test data: y_pred\ny_pred = RF_MODEL['gridsearch'].predict(X_test)\n\n# Generate the confusion matrix and classification report\nprint(confusion_matrix(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","0481f394":"classes=['incoome']\ny_pred=RF_MODEL['gridsearch'].predict_proba(X_test)[:,1]\nplot_roc_auc(y_test, y_pred,classes)","d74e17ce":"RF_MODEL['gridsearch'].score(X_test, y_test)","c4d38a95":"## Deep Learning Approch :\ny1 = y_sm\nX1 = DenseTransformer().fit_transform(X_sm)\n# Print the dimensions of X and y \nprint(\"Dimensions of y : {}\".format(y1.shape))\nprint(\"Dimensions of X : {}\".format(X1.shape))","7a13afaa":"import tensorflow as tf\nfrom tensorflow.keras import regularizers\ntf.random.set_seed(128)\nprint(tf.test.gpu_device_name())","05f759d7":"# First define baseline model. Then use it in Keras Classifier for the training\ndef Classification_model():\n    # Create model here\n    model =tf.keras.Sequential()\n    model.add(layers.Dense(15, input_dim = 104, activation = 'relu')) # Rectified Linear Unit Activation Function\n    model.add(layers.Dense(15, activation = 'relu'))\n    model.add(layers.Dense(1, activation = 'sigmoid')) # Softmax for multi-class classification\n    # Compile model here\n    optimizer = tf.keras.optimizers.Adam(learning_rate=2e-5)\n    model.compile(loss = 'binary_crossentropy', optimizer = optimizer, metrics = ['accuracy'])\n    return model\nClassification_Model = Classification_model()\nClassification_Model.summary()","2c4d205c":"EPOCHS =1000\n# configure early stopping\nes = EarlyStopping(monitor='val_loss',min_delta=0.0000000000001, patience=10)\n#batch_size=1000\n# fit model using our gpu\nwith tf.device('\/gpu:0'):\n     history1 = Classification_Model.fit(X1,y1,batch_size=128,epochs=EPOCHS, validation_split = 0.1, verbose=0 ,callbacks=[es])","e524d52d":"Classification_Model.save('Classification_Model.h5') ","1776ca29":"import matplotlib.pyplot as plt\nplt.style.use('ggplot')\ndef plot_history(history):\n    acc = history.history['accuracy']\n    val_acc = history.history['val_accuracy']\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n    x = range(1, len(acc) + 1)\n    plt.figure(figsize=(12, 5))\n    plt.subplot(1, 2, 1)\n    plt.plot(x, acc, 'b', label='Training accuracy')\n    plt.plot(x, val_acc, 'r', label='Validation accuracy')\n    plt.title('Training and validation accuracy')\n    plt.legend()\n    plt.subplot(1, 2, 2)\n    plt.plot(x, loss, 'b', label='Training loss')\n    plt.plot(x, val_loss, 'r', label='Validation loss')\n    plt.title('Training and validation loss')\n    plt.legend()","96ee6bb8":" plot_history(history1)","1c404f90":"#Let\u2019s see what this looks like when we plot our respective losses:\n# \"Loss\"\nplt.plot(history1.history['loss'])\nplt.plot(history1.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","130ad5ce":"# evaluate the keras model\n\nloss, accuracy = Classification_Model.evaluate( X1, y1, verbose=2)\nprint(\" Accuracy\".format(accuracy))","77839517":"inputs= tf.keras.layers.Input(shape=(104,1), name='input_vector')\nX = tf.keras.layers.LSTM(128)(inputs)\nX = tf.keras.layers.BatchNormalization()(X)\nX = tf.keras.layers.Dense(128, activation='relu',\n                          kernel_regularizer=regularizers.l1_l2(l1=1e-5, l2=1e-4),\n    bias_regularizer=regularizers.l2(1e-4),)(X)\nX = tf.keras.layers.Dropout(0.2)(X)\ny = tf.keras.layers.Dense(1,activation = 'sigmoid' ,name='outputs')(X)\n\n# define input and output layers of our model\nmodel = tf.keras.Model(inputs=[inputs], outputs=y)","03203f99":"model.summary()","dfaaf983":"tf.keras.utils.plot_model(model=model, show_shapes=True, dpi=76, )","5e6d829c":"from tensorflow.keras.metrics import RootMeanSquaredError\nfrom tensorflow.keras.callbacks import ModelCheckpoint,EarlyStopping\noptimizer = tf.keras.optimizers.Adam(0.01)\n#loss = tf.keras.losses.CategoricalCrossentropy()  # categorical = one-hot\n\nbest_weights_file = \".\/weights.h5\"\nbatch_size = 128\nmax_epochs= 1000\n#m_ckpt = ModelCheckpoint(best_weights_file, monitor='val_accuracy', mode='max', verbose=2,\n                            # save_weights_only=True, save_best_only=True)\nes = EarlyStopping(monitor='val_loss',min_delta=0.0000000000000000001, patience=10)\noptimizer = tf.keras.optimizers.Adam(learning_rate=2e-5)\nmodel.compile(loss = 'binary_crossentropy', optimizer = optimizer, metrics = ['accuracy'])","1941485b":"# fit model using our gpu\nwith tf.device('\/gpu:0'):\n    history = model.fit(X1,y1,batch_size=128,epochs=EPOCHS, validation_split = 0.1, verbose=0 ,callbacks=[es])","3d0646c4":"loss, accuracy = model.evaluate( X1, y1, verbose=2)\n","6543bf5d":"print('accuracy: %f' % (accuracy *100))\nprint('loss_model: %f' % (loss *100))","2e2f7adc":"\nplot_history(history)","a6bff3a2":"# Fit a random forest to the training set\nclf = RandomForestClassifier(random_state=42).fit(\n  X_train, y_train)\n\n# Save it to a file, to be pushed to production\nwith open('model.pkl', 'wb') as file:\n    pickle.dump(clf, file=file)\n\n# Now load the model from file in the production environment\nwith open('model.pkl', 'rb') as file:\n    clf_from_file = pickle.load(file)\n\n# Predict the labels of the test dataset\npreds = clf_from_file.predict(X_test)","c992f18a":"# Pipe9 :KNN","69118a7f":"**I will not reduce Data : But if we have more time we will try to reduce demmension ...ex**","14e4a9ae":"({'LR__C': 1, 'LR__penalty': 'l2', 'LR__solver': 'liblinear'},\n 0.8408138472737268)","d6a7ba36":"# More deep :Regularization in Deep Learning \u2014 L1, L2,BatchNormalization, and Dropout","94c63a64":"## Evaluate Model ","48fbd28c":"So Good results , but keep in mind the real estimation of the model is done via our CV strategy .\n\n    Real test accuracy : 0.8307431894165671\n    Real test roc_auc_score :0.8766168760199378 \n**Can we do better and enhance the result??!!**   \n","5cf5a8e4":"# Phase - Find the Best Pipeline \n## Step 1 : Define CrossValidation Strategy :\n","f4ba624e":"# Classification Target ","9c7dd35b":"## Pipe 3 :LogisticRegression \n","3ca72e57":"# Try Ensemble Models :\n##  Stacking :\n###  Stacking model1 :EnsembleVoteClassifier","a9782fd0":"\n### Model stack3 - Using Probabilities as Meta-Features\n\nAlternatively, the class-probabilities of the first-level classifiers can be used to train the meta-classifier (2nd-level classifier) by setting use_probas=True. If average_probas=True, the probabilities of the level-1 classifiers are averaged, if average_probas=False, the probabilities are stacked (recommended). For example, in a 3-class setting with 2 level-1 classifiers, these classifiers may make the following \"probability\" predictions for 1 training sample:\n\n    classifier 1: [0.2, 0.5, 0.3]\n    classifier 2: [0.3, 0.4, 0.4]\n\nIf average_probas=True, the meta-features would be:\n\n        [0.25, 0.45, 0.35]\n\nIn contrast, using average_probas=False results in k features where, k = [n_classes * n_classifiers], by stacking these level-1 probabilities:\n\n        [0.2, 0.5, 0.3, 0.3, 0.4, 0.4]\n\n","fa31eb5f":"# Deep learning Approch :\n## Prepare Data :\n","89919760":"# Select the best Pipeline \n## Evaluation Metric : AUC \nI will just keep simple models ","69f454cd":"# Deploy your solution \n![image.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAtAAAAF5CAYAAAC2rB0nAAAgAElEQVR4nOzdZ1iUZ96wcbLP7ia7SdbdTTbu87xJ3MQkblZTNJZosAuKIjaKiqKxKxpBUawEFSUWRI1iLNgpsVdAJVaKSpUiCEgHkS51YMr5fsjBHEs0KAoCk\/\/vOO4vzM011wwknt5ec916CCGEEEIIIZ6aXlNPQAghhBBCiJZEAloIIYQQQoh6kIAWQgghhBCiHiSghRBCCCGEqAcJaCGEEEIIIepBAloIIYQQQoh6kIAWQgghhBCiHiSghRBCCCGEqAcJaCGEEEIIIepBAloIIYQQQoh6kIAWQgghhBCiHiSghRBCCCGEqAcJaCGEEEIIIepBAloIIYQQQoh6kIAWQgghhBCiHiSghRBCCCGEqAcJaCGEEEIIIepBAloIIYQQQoh6kIAWQgghhBCiHiSgdUhKSgpHjx5lx44dcsjRIo\/Q0NCm\/s9ICCGEeCIJaB1SE9D79+\/nyJEjHD16VA45WsRx6NAhdu3aJQEthBCiRZCA1iE1AX3jxg2USmVTT0eIpxYfH4+Hh4cEtBBCiBZBAlqHSECLlkoCWgghREsiAa1DJKBFSyUBLYQQoiWRgNYhEtCipZKAFkII0ZJIQOsQCWjRUklACyGEaEkkoHWIBLRoqSSghRBCtCQS0DpEAlq0VBLQQgghWhIJaB0iAS1aKgloIYQQLYkEtA6RgBYtlQS0EEKIlkQCWodIQIuWSgJaCCFESyIBrUMkoEVLJQEthBCiJZGA1iES0KKlkoAWQgjRkkhA65DmGtAqlYrKykrKysoeeygUCtRqdVNPs1nIzc0lMTGRoqKiRhm\/srKSzMxMMjMzUSgUjfIcz0ICWgghREsiAa1DmmtAJyQk8O233zJo0KBHjiFDhrBx40ays7Mb5LmqqqrIzMwkNze3QcZ70VxdXdHX1+fo0aMNMp5CoSA9PZ0HDx4AkJiYyLJly3B0dCQlJaVBnqMhSEALIYRoSSSgdUhzDejQ0FAsLCzo2rUrlpaWTJgwQXtMmjQJd3d3beA9r4SEBGbNmoWrq2uDjPeiNXRAx8bGMmHCBL777jsAKioqSE5OJjk5mYqKigZ5joYgAS2EEKIlkYDWIc05oGfMmMHmzZspLy\/\/1fPUajUFBQVcuXKF7du34+7uTnh4eK3QKyoqIjg4GHd3d9zc3Dh\/\/jyZmZkolUru3bvHunXr6NatG1OmTOHGjRvcuXOH4OBg7t69S1VVFQBlZWVERkYSHh5OaWkp9+7d49q1a8TExBAcHMzly5fJyclBrVaTm5uLn58f33\/\/PR4eHty9e5fq6upfnX9ubi6BgYGcOHGCCxcuEBkZSW5uLhqNRntOTk4OPj4+jx3zlwGtVqspKiri2rVruLm5sWvXLiIjI2vNQalUcufOHU6ePMnx48cJCQmhpKSE+\/fv4+bmRqdOnRg7diyXL18mKSmJ8PBwIiIiKC0tBX6+ah8fH4+XlxdeXl7ExcWhUCi0c46PjycwMJCMjAxCQkLw8PDg0qVL5OfnP+uvxCOaU0CHhISwfv16vv32Wzma+XH58uWm\/nURQvxGSUDrkIYMaJVKRVZWFgEBAURERFBSUqINqvp6moBWKBQEBgayYMECxo0bx7Rp0xgwYABDhgzh5MmTVFRUUF5ejqenJ8OHD2f48OGMHDmS\/v37s3jxYu7cuUN4eDhTp07l3XffZcSIEZw8eRJvb29mz57N7t27efjwIQAZGRmsXLkSBwcHUlJSOHToEGZmZlhaWmJoaIitrS23bt3Cx8eHmTNnYmVlxYQJE+jduzcTJkzg2rVrj30NaWlprFu3DnNzc2xtbZk\/fz5mZmasWLGCpKQkysrK8PHxYcaMGYwfP\/6RMRUKRa2ArqysJCgoiEWLFjF69GjGjRtHr169MDAw4PDhw5SXl2vHNDc3Z9CgQRgYGNC\/f3+2b99OQEAA8+bN480332TAgAEcOnQIf39\/HBwcWLFiBSkpKaSlpeHi4sLgwYMxMDDA0NCQYcOGsX37drKzs9FoNGzdupWBAwfyzTffMG3aNPr06cOXX37J999\/T3Fx8TP9TvxScwro7du307p1a\/T09ORo5oejo2NT\/7oIIX6jJKB1SEMFtEajITo6mmnTpvHuu+\/y3nvv8d1331FWVvZM4z1NQGdkZODk5MTUqVPx9fUlOzub8PBwJk2axIgRIwgODiYsLIzRo0djbW1NbGwsd+\/exdXVlQkTJnD06FGKi4vx8PDgq6++Ys2aNZSWlnLmzBnMzc3ZuHGj9oN5KSkp2NjYYG1tTUJCAtu3b+edd95BX1+fffv2kZ6ezs2bN5k2bRpTp04lMDCQ7Oxs\/Pz8sLS0xMbG5pH5K5VKLl26xPjx41m0aBExMTFkZmbi7e3NqlWrCA4OJjIykmnTpmFtbU1ISMgjYyYmJtYK6PT0dJYuXcqoUaM4fPgw6enphIeH8\/XXX2NqakpYWBhXr17F3NycWbNmERwcjJ+fH8OHD6d37954e3uzadMm3nnnHezt7SkpKSEqKopZs2bxzTffEBcXx\/bt2\/n0009ZvHgxcXFxhISEYGdnx+jRo\/H19aWqqgpHR0feffddli9fTkREBMHBwXz99deMHj2a8PDwZ\/qd+KXmGNDTp08nIiJCjuc87OzseO211xr0\/awZUwJaCNFUJKB1SEMFtEKh4PTp03Tv3l17pcfc3Jw7d+4803ihoaGYm5vTuXNnxo0bx+TJk7XH9OnTOXbsGMHBwVhbW7Nq1SrtlU+FQsGmTZswMDDAy8uLiooKSktLqaioQKPRUF1dzeXLlxk3bhwODg5kZ2dz6tQp+vbtq10D7evr+1QB3bp1a+bNm6e90u7j46Ndn13ztezsbBYvXoylpeUjr1Gj0XDz5k1GjBjBwIEDuXjxItXV1SiVSiorK6murtaOuX\/\/fu1r+O8xb9y4oQ3oI0eOEB0dzfz583FyciIzMxONRoNGo2HLli307NmTAwcO8OOPPzJ69Gjc3d0pLy9HqVSSl5dHWloaxcXF7NmzhzZt2mhDIy4uThvQV65cwcbGBiMjI\/z9\/dFoNKjVao4ePYqRkRGurq6Ulpbi6OjIRx99xMGDB1GpVFRUVODk5IS+vj7Hjh17xt+y2ppjQEucNQxXV1datWrVoO9nY4wphBD1IQGtQxoqoKuqqvDz86N3797o6enx0ksvYWVlxb17955pvNDQUExMTHjllVf4y1\/+QqtWrbTHW2+9xfLlyzlx4gT9+vXjD3\/4A3\/605\/485\/\/rD06derEoUOHKCws5Ny5c1hbW9OxY0dee+01\/vSnP\/G\/\/\/u\/LF26lKysrOcK6Jo\/jEtLS9mzZw\/t27fnj3\/84yPzMTQ0pLy8\/JG10Pn5+bi5ufHZZ5\/x8ssv06VLF77\/\/nuSkpIoLCxk9+7ddY558eJF1q1bh76+Pl5eXvj5+dGrV6\/HviefffYZP\/zwA9u2bdNeta9Z4\/3f9u7d+6sB7efnx\/Tp0xk\/fjxRUVHa7wkICGDo0KEsXLiQgoICnJ2dMTExITAwUHtOQ3\/YUQJad0lACyF0kQS0DmnIJRypqamsWbOGPn36MGjQILy8vH71w3NP8qQlHAqFAl9fX4YPH864cePw9vbm4sWL2iMoKIiMjAw8PT35\/PPP6datGzt27CAyMpLdu3czaNCgOgN65MiRrF27lsLCQjQaDUlJSXzzzTe\/GtDFxcX88MMPGBgYMH\/+fE6fPl1rPiEhIahUqsfuXa1SqUhJSWHv3r2MHTuWDz\/8EGNjY06dOsW2bdswMDBg4cKFnDt37pEx8\/PzcXFxQV9fH09PT86dO4eJiQmWlpZ4eHjUOj8gIIC4uDh27drF5MmTOXXqlPaDfyqViqqqKpRKZZ1XoC9fvszcuXOZMGEC0dHR2tdw+fJlDAwMsLW1JS8vTwJaPBcJaCGELpKA1iENvQtHZWUleXl5PHz48LludPKkgFapVAQHB2NhYcHMmTNJTExEo9FQWVlJQkICsbGxZGVlsWXLFj777DNWrFhBcXExubm5uLi40LlzZ+zs7EhLS+PkyZP07dsXFxcX1Go1ly5dwtjYGHt7e3JycqiuriYgIIAxY8b8akBXV1dz7NgxDAwMcHBw0O6i8fDhQ+7evUtycvIjr0GpVJKdnc3du3cpKChArVajUCjYvHkzXbt2ZcuWLXh5eWFgYICTkxPFxcWPjFlZWakN0x9\/\/JGgoCDMzMywsrLi9u3baDQaKioquHv3LrGxsTx8+JALFy4wceJE3NzcKCkpQalUEh0dzenTp4mNjWXnzp20adMGBwcHNBpNrYCOjY3FxcWFAQMGcOLECe2yGE9PTzp16oS9vT3FxcUS0OK5SEALIXSRBLQOaanb2Gk0GlJSUli0aBF9+\/Zl5cqVnD17ls2bNzNmzBicnJyIj49n7969dOnShbFjx+Ll5cWmTZsYPHgw7733HoaGhpw6dYoLFy4wdOhQJk2axM2bNwkODmbatGkMHTqUvXv3cuTIEWxtbenevfuvBrRarebmzZuYm5ujr6\/P5s2b8fHxYfXq1Xz99dfs3bv3kddQVVXFlStXsLe3Z+3atQQEBBAZGcm3336LkZER3t7eBAQEYG5uTp8+fdi2bdsjYxYUFNRaA52amsqCBQvo2rUr9vb2HD16lPXr1zNq1CicnJzIysoiPj6euXPnMnToUHbt2oWvry+zZ89m7Nix+Pv7c\/bsWfT19bGysiIsLIyQkBBtQCckJHD27Fn69OmDubk5hw8fxsPDAwsLC\/r164eXlxeVlZUS0OK5SEALIXSRBLQOaakBDT8v47hz5w5bt25lzJgxdOvWjQ4dOjBmzBh8fHwoKysjLi6OhQsX0r59e+0HEteuXYuzszOjRo3CxcWFpKQkli9fzvvvv4+FhQU+Pj7anTi6devGrFmz2Lx5M+bm5kybNk27E8Uvg6m0tJSbN2+ydu1aRo0aRefOnenYsSPW1tYEBwc\/Mn+NRkN6ejpbt25l6NCh9OrViwEDBmBsbMyGDRtIT0\/Xjuns7MyIESMeGfOX29gpFApiY2PZsmULo0ePpnPnznz66adYWFhw5swZKisrKS8v59atW6xYsYJBgwbRp08fvv76a7y9vcnLyyM\/Px9HR0fatWvHxIkTOXjwYK2ALigo4MyZM8ydOxdDQ0MGDBjArFmzOH78OLm5uajVaglo8VwkoIUQukgCWoc014AuLy8nPT1dG2S\/pmaJQmZmJlFRUcTExHD\/\/n0UCgXw81KP\/Px87ty5Q1RUFBkZGZSVlVFaWqq9fbdSqSQ3N5eoqCji4+MpKiqisrKSzMxMYmJiSE9Pp6ysjIyMDNLS0rTLVKKjo7l\/\/\/4j8ykvLyc1NZXIyEju3LlDbm5unTdSKSkpITk5mbCwMMLCwkhKSqq1BOZJY+bm5pKQkKD9wGPNe5KRkUF0dDRxcXHcv3+fysrKWvMsLS0lISGBqKgosrKytLt8aDQa8vLyiImJISEhgdzcXDIyMsjIyKj1vhYUFBAfH098fDz5+flUV1dr9\/3Oycnh3r17tbYx\/OU8n5cEtO6SgBZC6CIJaB3SXAP6WdTEX30fe9YxG\/p7n+b8+oxZc25d5zfE63vW739eEtC6SwJaCKGLJKB1iC4FtPhtkYDWXRLQQghdJAGtQySgRUslAa27JKCFELpIAlqHSECLlkoCWndJQAshdJEEtA6RgBYtlQS07pKAFkLoIgloHSIBLVoqCWjdJQEthNBFEtA6RAL659tQOzk5cf369ac6PzIyEhcXFy5evNgo86moqMDPzw9vb2+ys7Mb5TlCQ0Nxd3cnMjKyUcZ\/ESSgdZcEtBBCF0lA65DmGtARERFYWFjw1Vdfcfr06VpbpdXcgGTevHm0b9+eVatWPVdorlu3jrfffpvNmzc\/1fk\/\/vgjHTp0YOXKlc\/8nHUpKipi+fLlTJgwgdu3bzfImAqFgsLCQu2+zPv372fw4MF4e3s3yPhNQQJad0lACyF0kQS0DmmuAR0aGsrQoUP54IMP2LRpE\/n5+drHVCoVV69excDAgNatW7N06VKysrK0j2s0GpRKJUql8rF7FGs0GlQqFSqVCo1Gg7OzM61bt8bV1bXWeSqViqqqKqqrq2vdzMXLy4t27drV+QfxL5\/j185RKpVUV1fXOq+oqIglS5ZgaWn5yBVipVKJQqF47LgajQa1Wv3I86rVas6fP8+kSZM4dOiQ9nGVSvXITWpUKtUj83nc66mZd1PtAQ0S0LpMAloIoYskoHVIcw5oc3NzPv74Y6ytrbl165Y21iorK\/n+++\/p1KkTHTp00Aa0Wq2mqKiIyMhITp48ybFjxwgLC6OwsFAbflVVVaSnp\/PTTz\/h6+tLQkICjo6O2oDWaDRUVlZqz9m\/fz\/e3t6EhIRQXFyMRqN5YkBXVlYSHx\/PuXPnOHPmDFeuXCE6OlobrGq1muLiYm7fvs3x48c5dOgQly5dIjs7G5VK9UhA19w1MC4ujqNHj7Jr1y7OnTtHUlKS9s6AAAUFBdy4cYPjx49z+vRp7ty5Q0VFBVFRUcycOZPPP\/8cOzs7QkNDuX37NpcvXyY1NRWNRoNCoSAjI4NLly7h7e3NhQsXSE5OprKyUntnwhs3bnD79m1SUlI4e\/YsXl5eREREaN+XF00CWndJQAshdJEEtA5pyICuqKggJiaG06dP4+fnR3p6ep234a5LaGgokydPZtiwYcyePZsjR45ob0WdmpqKvb09JiYmmJiYaAM6OTmZ9evXM3DgQHr37k2\/fv0wNjZm48aNJCcno1AouH79OjNmzEBfX5+RI0eybNkyhgwZwptvvomrqysVFRVcu3aNOXPmYGRkxPDhw9HX18fAwIADBw5QVFRUZ0BrNBoCAgIYMWIEXbt2xcLCgiFDhjBq1ChSUlIoLCwkIyODrVu3MmzYMAYOHEifPn3o1q0bK1asIC0t7ZGAfvDgAQcPHmT06NEYGRkxePBgunfvzowZM7h58yZVVVWkpKSwevVq9PX1+eKLL\/jkk08YNmwY586dY\/\/+\/Xz88ce8\/vrr9O\/fH3d3d9asWYOhoSGenp5UVVVx9epVZsyYQf\/+\/Rk0aBADBgzA0tKS06dPU1ZWRnBwMGPGjMHU1JRvv\/2WyZMn0717d4yMjDhx4kStkH9RJKB1lwS0EEIXSUDrkIYKaJVKxe3bt5k+fTr\/+7\/\/y3vvvYeLiwsPHz58pvFCQ0OZPXs28+fPx87ODmdnZ+0652PHjmFmZsb8+fOZNGkSS5cuJTU1le3bt\/PRRx9hZWVFYGAg4eHhLFiwgP79++Pp6Ul2djaLFy+mW7dubN68mZiYGI4dO0b\/\/v35+9\/\/jqurK2lpaSxfvhxzc3MOHz7M\/fv3uX79OmPHjsXMzIzg4OA6A1qhUODq6sonn3zCxo0btVeOd+\/ezZ07d8jNzeXIkSP06dOHOXPmEBERwZ07d1i8eDG9evXi0KFDjwT0pUuXGDFiBPPnzycuLo709HS2b9\/O4MGDWb16NVlZWXz\/\/fd07tyZ5cuXc\/36ddzc3DAxMWHlypUkJydjb2\/Phx9+iLu7O+Xl5ezevVsb0A8ePGDx4sX07duXnTt3kpCQwOXLlxk6dChjxozh7t27BAcHa8N9\/\/79pKSkcObMGczNzVmyZAnp6enP\/LvzrCSgdZcEtBBCF0lA65CGCujKykpOnDhBt27d0NPTQ09PDzMzM2JjY59pvJqA3rBhA9u3b2fZsmVERERQXl7OqlWrGDt2LHv37mXq1KksXbqUu3fvsmTJEj777DO8vLy04\/j7+zN48GCcnJy4e\/cuc+fOZezYsYSFhQHw8OFDFi1axFtvvcXGjRsJDw9nxowZ2NnZERERQU5ODvfu3cPBwYH+\/fvj7e3NgQMHfjWglUol+\/bt49NPP8XU1JTz58+Tm5tLeXk5SqWSyspKHB0d0dfX58cffyQnJ4cHDx7g7e1Njx49WLFiBXl5edqAvnnzJnv37sXCwgIPDw8ePHhATk4Oly9fZsyYMUyfPp2bN29iY2PDoEGDCA4ORqPR8PDhQ+Lj40lKSqK8vBxHR0fatWunfW\/27t2rDeiIiAimTJmCjY0NiYmJwM\/rppcvX06XLl04e\/YswcHBGBsbM3nyZJKTk9FoNKSlpWFjY8PXX39NVFTUM\/2cn4cEtO6SgBZC6CIJaB3SUAGtVCq1H+yrCejp06dz\/\/79ZxqvJqB3796Nn58f33zzDV5eXty8eRNLS0uWLVtGYGCgNqADAgKYMmUKo0aNIjw8XDtOSEgIZmZm2NnZ4evry4QJE5g\/fz4pKSnAz6G4evVqWrdujbOzM2fOnKFPnz784x\/\/4MMPP+Tjjz+mXbt2tG7dmk8\/\/ZQDBw6wb9++OtdAZ2ZmsnbtWj755BPeeecdbRhXVFSQmprK1KlTefXVV\/nXv\/7Fxx9\/zMcff0ybNm149dVXsbW1JTU1VRvQ58+fx8nJiQ8\/\/JA2bdpoz2\/bti1\/+9vfMDU15ejRo4wdOxZzc3Pu3Lnz2DnVFdDBwcFMnjyZVatWkZOTo\/2egwcP0rNnT77\/\/nuuXr3K+PHjcXBw0J6TnZ2NnZ0dVlZWTbIdngS07pKAFkLoIgloHdJQAV3zQTN3d3cGDhzIhAkTCAwMfOYxawJ6z549JCUlsWTJEpydnXF0dMTAwIDjx48THh6uDeiEhASWLVvGgAED8Pf3144TFBSEiYkJNjY23Lhxg7lz5zJjxgzi4+OBn6+cOzg48NZbb7F27VouXLjAyJEjmTx5MhcuXOD27dvaIz4+nsLCQjw8POoM6JoP5T148IBLly4xffp0\/vOf\/3D16lWCg4OZPn06HTt2ZOfOnbXGv337NllZWeTn52sD2sfHB0dHRwwNDdm2bdsj56ekpJCamsqsWbMYPnz4r4ZsXQEdExPDN998g6OjY63dTFxcXPjwww\/ZunUrgYGBTJw4kVWrVpGbmwvA\/fv3WbBggQQ0EtANTQJaCKGLJKB1SHPehWP27Nns3buX8vJyfvjhB4yMjGjfvj3W1tZkZ2cTERGhDeisrCx++OEH9PX12bNnD9XV1SiVSn788Ue++OILFi9eTFpaGkuXLmXUqFFcv36d6upq0tPTmTVrFv\/4xz9Yv349AQEBDBs2DCsrK2JjY1GpVJSWlpKWlkZGRgYVFRV1roGurq4mNTWVlJQUqqqq0Gg0xMTEMGXKFDZs2MC5c+ewtbWlbdu27N69m+rqaqqqqsjJySEtLY3S0tJaa6Bv3LjB7t276d27N99\/\/z0KhQKlUkl+fj5paWkUFBSgUqlYs2YN3bp14+jRo1RXV5OXl8eRI0fw8vIiJyeHlStX8vHHH+Ph4YFara4V0IWFhTg4OGiXjCiVSsrKyliwYAHvvvsu7u7uBAcHS0DXoTkG9K9ta\/jfj6tUKpRKJWq1ukm3JPwlCWghhC6SgNYhLSGgAS5cuEDv3r15++232bZtG2q1+pGADg8PZ\/z48ZiamuLh4cGRI0eYPn06w4YN48SJExQXF7N7924MDAy0S0KWLVvGRx99xN\/+9jdcXV1JTU1l6dKlDBo0iO+++47z58+zcuVKOnbsyNixYwkNDa0zoDMyMliyZAmmpqbs37+fkJAQPDw8MDMz4\/LlyyQnJ3P06FF69eqFhYUFnp6e7Nu3j2HDhmFgYICPj88jHyIMCgrC1NSUwYMH4+7uztGjR5k4cSL6+vq4ublRUFBAQEAA5ubmjBkzBi8vLzZt2kS\/fv1wcHCgoKCAQ4cO0atXL+zt7YmOjmbbtm3agC4vL2fPnj0MGTIEe3t7Tp8+jYuLCz179mTq1KnExcVJQD9Bcw3okpISbt26xbVr13jw4IF2V5yadfI3b97k6tWr5OTkPPOOOY1BAloIoYskoHVIcw3o+Ph4Nm3ahI+PD\/DzettNmzaxZMkSbawlJCSwbt06du3aRV5eHuXl5Vy+fJl58+ZhaGhIv379mDZtGqdPn6aoqAilUkl8fDxr165lyJAh9OzZk\/HjxzNlyhRGjBjB4cOHUalUJCUl4ebmxrhx4xgwYACGhoZYW1tz+fJlqqur8ff3x9LSkj179jx27uHh4SxcuJAhQ4ZgbGyMkZER1tbWFBQUUFFRQXl5OT\/99BPz5s3D2NiYAQMGMHLkSPbt20dRURElJSXs3LmTVatWkZiYqN1+b+HChdqdMAwNDVmzZg3x8fGoVCrKy8vx9\/dn9uzZ9O3blz59+vDNN98QEBBAdXU1GRkZODk5YWJiwubNm9m5cyfz58\/n4sWLqNVqUlJScHNzY\/z48QwaNAhjY2OWL19OeHg4KpWKmJgY1qxZw\/79+ykqKgIgPz8fNzc3Vq9erf3w4YskAV03jUbDgwcPcHZ2xsjIiF27dlFYWKhdYnTmzBmMjY2xtrYmPj5eAloIIRqZBLQOaa4BXVlZSU5ODsXFxcDPH\/bLz88nJyeHqqoq7Tn3798nNzeX6upq4OdoKCsrIyEhgbi4uEdu8qHRaKioqODevXtERESQlZVFYWGhdjlEDbVazYMHD4iIiCAuLk4b4PDzzh337t0jLy\/vsXOvmUNiYiIBAQGEhYU9cu5\/zyMqKoqsrCwUCoX2n9Vzc3PJysrS7n0NPy8PSU5OJiQkhOTkZMrLy2tFj0ajoaioiOjoaGJjYykuLtY+rlKpyMvLIykpiZycHHJzc0lPT6+1zaBSqSQnJ4c7d+6QmZmpfU\/h5z2+s7OzycvL074PSqWSBw8ePDLPF0UC+slUKhV37tzBxsYGMzMzzp07R2VlJbGxsUybNo1Ro0bx008\/1fpZNwd1xW7NsqrS0lJUKlWtr5eVlVFaWvrY\/5dJQAshmpoEtA5prgEtxJNIQD8dhUKBj48Pw4cPx9bWlqioKNatW4e+vj4\/\/PDDM+\/V3pjqit28vDw2btyInZ0dt2\/f1n49NTWVtWvXsmXLFh48eFCvMYUQ4kWQgNYhEtCipZKAfnrFxcW4ubnRu9I9PJcAACAASURBVHdv+vTpwxdffMHChQt58OBBs\/rwYI26Yre6uhonJyfef\/993NzctP\/K4uPjQ9++fXFyctL+K9XTjimEEC+CBLQOkYAWLZUE9NOrufHNvHnztPuHR0VFNct4hifHbmBgICNGjGDRokXk5eVRWlrKtm3bsLKyqrWNZX3GFEKIxiYBrUMkoEVLJQH99NRqNZGRkUyaNIk333yTrl27arc8bI6eFLvV1dWsWrWKAQMGcPHiReLi4pgzZw7Lly\/\/1Zs3SUALIZqaBLQOkYAWLZUE9NPRaDRkZGTg6OjIoEGDmD17NkZGRlhYWBASEtKsdt+o8TSxe\/r0aczMzHBzc+PYsWNYWVmxc+dOysvLn3lMIYRoTBLQOkQCGqqqqigtLX3susnHqa6upqys7KnPbyhVVVWUl5f\/Zn9OvyQB\/XRKSkrYu3cvQ4YM4bvvviMrK4sDBw7w1VdfsWTJEjIzM5vdUo6nid2UlBQWLFiApaUl1tbW2NracuPGjVo7c9R3TCGEaEwS0DqkuQZ0zTZwsbGx2n2H\/1tVVRUZGRlER0eTmZn5XDF77tw5bGxsuHDhwlOdf+PGDRYvXszJkyef+TmfxcmTJ1m1ahVRUVEv9HmbKwnoJ1MoFFy5coXx48cza9YsIiMjUSqV3L9\/n5UrVzJw4ED27NnT7HbieJrYLSsr44cffuCLL76gY8eOrF69moyMjF\/9y4AEtBCiqUlA65DmGtA1e9eam5vj5+dXa24ajYb09HQcHBwwNDTEzc1Ne3e8Z+Hs7Ezr1q1xdXV9qvPruhMh\/HzFz8\/Pj8DAwGee0+P4+fnh6urKnTt3GnTclkoCum5qtZrExERsbGwwMTHh9OnTVFRUAD\/v4R0SEsL48eMxNzfX3tq+uXia2FWpVAQGBmJkZETXrl05cuTIry7feNoxhRCiMUlA65DmGtChoaEMHTqUd999F2dnZ3JycrSPqVQqLly4QM+ePXnrrbe0t\/J+Vg0d0HFxcUycOBFnZ+dnntPjVFRU8PDhw2YVOk1JArpuNXfe9Pb2xt\/fn6KiIu3VWY1GQ3l5OTdv3sTb25uQkBBtXDcHTxO7Go2GmJgY7V8CQkND61yKIgEthGhqEtA6pDkH9OjRo2nfvj1Tp06tdTW3srKStWvX8tFHH9G+fftaAa1Wq0lISGD79u1s2bKFqKioWsFZc4fBEydO4OnpSUpKCqtXr34koIuKijh58iRz5sxh6dKlBAUFae+2V1dAp6amsmrVKt5\/\/31MTU356aefiImJISgoiPz8fO0VsqqqKiIiIggICKCwsJDU1FSuXLlCSkoK+fn5eHp6smnTJm7fvq2df1RUFH5+fmRlZZGXl0dQUBC3b98mPz+fY8eOsXr16lrzrHm9kZGR7Ny5k6CgIB48eEBQUBDR0dFNcvfAhiQBrbueJnYrKys5ePAgo0aNws3NjcLCwuceUwghGpMEtA5pqIDWaDRUVlaSkJCAr68vV65cIScn55k\/4R8aGsq0adMYPXo08+bN48cff9ReIUtKSsLOzo6RI0cyYsQIbUCnpqYya9Ys\/vnPf\/Lvf\/+bDh060LZtW2bNmkVcXBwVFRWcPHmSnj178v7779OlSxeGDh3Kl19+yRtvvIGrqytlZWUcOXIEAwMDevbsybhx4+jRoweffPIJmzdvpqioqM6ADgsLY8qUKbRu3ZoePXrg5ubGwYMHmThxIiEhIdrQLyoqYsmSJVhaWhIZGYmXlxd9+\/Zl0qRJjBkzhs8++4wPPviAXr16cfz4cSoqKnB0dKRr1674+PgQHBzM6NGjMTQ0xNTUlP79+\/Ppp5\/yn\/\/8h61bt1JaWsq9e\/eYN28e7733Hp999hlDhgxh1KhR9O\/fn1WrVj3XspfmQAJadz0pdoODg5kyZQqffvopkyZNIiIi4okfhJSAFkI0NQloHdJQAV2zHnHQoEHo6enx8ssvs2DBAgoKCp5pvNDQUGbPno29vT3Lli1j3bp1ZGVlodFo8PT01N5EYcqUKSxdupS0tDS2bt3Khx9+yPz588nIyCAvL48NGzYwZMgQvLy8yM7Oxt7ent69e+Pt7U1xcTGBgYEYGxtrAzolJYXFixczdepUgoKCqK6uJikpCWtra0aOHMm1a9fw9PSscwnHxYsX0dfX1z4eHBz8VAHdrl07hg4dys2bNykvL+fs2bNYWFjg5OTE\/fv3HwnogQMH0rVrV44fP05lZSWxsbHMmjULW1tbEhMT8fDwoEePHqxcuZL8\/HwSExOxt7enU6dOEtANTAK6YT0pdmt2FXF0dHzqG8JIQAshmpoEtA5pqIBWKBScOnWKL7\/8Ej09PfT09DA1NSUmJuaZxqsJ6I0bN7J9+3bs7e25desWhYWFLFy4EEtLSzw9PZk6dSpLly4lNjaWhQsX0qNHD86cOaMd5\/z58xgZGbFq1Sqio6OZPXs2VlZWREZGAlBeXs7y5ct56623cHFxISQkhClTpjBx4kQOHTqEj48Px44dY8qUKfTq1QsvLy8OHDjQKAH9+eefs3LlSqqqqtBoNAQEBGBkZMT48eO5e\/fuIwE9dOhQrKysiIuLQ6PRkJ+fz5IlS7CysiIwMBA3NzfGjRun3V2krKyMw4cPY2JiIgHdwCSgG1ZjxK4EtBCiqUlA65CGCmilUsmVK1cYMGCANqCnT59Odnb2M41XE9C7du3C39+f+fPn4+npydWrVxk7diwrVqwgICBAG9ARERHY2NgwatQowsLCtOOEhYUxevRo7OzsuHz5MtOnT8fGxoZ79+4BP185d3JyonXr1nz33Xf4+PgwZMgQOnXqxMiRIxkzZgwWFhYMHDgQCwsLzp49y\/79+xsloA0NDdmzZ492nJqrzBYWFsTFxT0S0JaWlixcuJD09HTtmMuXL8fKyooLFy6wevVqJk+eTHBwMPDz\/tXnz5\/HwsJCArqBSUA3LAloIYQukoDWIQ25BrqgoICzZ8+ycuVKXFxcCAsLe+YxawJ67969JCUlsWjRIhwdHVm6dCnGxsacPXuW8PBwbUAnJCSwdOlS+vfvj7+\/v3acwMBAhg4dio2NDcHBwcyZM4evv\/5au5fyf1+BXrt2LRcvXsTc3Jxp06bh6+tLSEiI9oiOjiY\/Px8PD496B\/S4ceMICgrSxm5OTg52dna1AtrExARPT0\/tOE8K6IkTJ+Lg4FArymsC+urVq2zevJlJkyZx7do14OcPXZ08eZKRI0dKQDcwCeiGJQEthNBFEtA6pCF34dBoNFRVVVFSUkJ5eTkqleqZ73D23wFdWVnJrl27GDJkCO3bt2fu3Lnk5eURERGhDejMzEz27dun\/eCeWq1Go9Fw+PBhOnTogJ2dHampqSxcuBATExPtrh7JyclMmTKFN998ExcXF27cuMGwYcOwsrLi7t27wM\/bx925c4fo6GhKS0ufuI1dTUA7ODigVqsJCQlh1KhRnDlzRjtmUFAQI0eObLSADgsL48CBAwwePJiDBw8CkJuby8aNG9HX15eAbmAS0A1LAloIoYskoHVIc97GriagAS5duoSBgQFvv\/0227ZtA6gV0FlZWdq9o9u3b8+aNWtYv349nTp1olu3bpw4cYLi4mLc3Nz4+OOP6du3L\/Pnz6dfv3688sortGrVCldXV+7fv8+qVavo0KED48ePZ9++fYwfP57\/+7\/\/Y8aMGcTFxT0xoENCQjA2NsbExISrV69q43fIkCGsXr2affv2YWZmRps2bRotoCMjI\/H19aVHjx783\/\/9H7NmzWLRokX06tVLPkTYCCSgG5YEtBBCF0lA65DmGtBRUVEsW7aMH3\/8EYCCggLWr1+Pvb299ipuTEwMCxcuZO3atdy\/fx+AtLQ0nJ2d6dy5Mx07dmTJkiXavZQ1Gg2lpaWcPXsWU1NT2rZty5gxY7CxsaFfv37s2rULgOLiYnx8fBg3bhwffPABbdu2ZcqUKYSFhaFWqzl58iS9evXCxcXlsXNXKpWsX7+eNm3a8NVXX+Hp6UlYWBjdunXjP\/\/5D9OnTyc4OBhnZ2fmzJlDbGwsJ0+eZPTo0Xh5eWnHCQsLw9LSkpkzZ5KYmIiLiwvGxsZcunSJsLAwbG1t2bBhg\/a1FxcXs379eubOnUtsbKx2T+yFCxfSs2dPNm3axJkzZ5g0aRLOzs7k5eU12s\/vRZCA1l0S0EIIXSQBrUOaa0BXV1fz8OFD7d7ParWa0tJSSkpKUKlU2nOKi4trfa3m3IqKCioqKmp9vUbNntWlpaVUVVVRWVlJQUEBZWVltc5TKpUUFRVRWlpa6+sVFRXk5uY+8vUnqXmu6upq1Go1JSUlFBUVUV1d\/dgxq6qqKCgooKioCKVSSWlpKfn5+SgUCqqqqigqKqr12n85ZnFxMTExMSQnJ1NVVUVZWRnHjx\/H2tqaw4cPN6s7zz0LCWjdJQEthNBFEtA6pLkGtHh+iYmJ2NjYYGlpyf79+3F3d2fKlCnMmzePyMjIZ16f3lxIQOsuCWghhC6SgNYhEtC6S6lUcvPmTaytrTEyMmLEiBFYW1vj6+tLSUlJU0\/vuUlA6y4JaCGELpKA1iES0LpNpVKRnp5OSEgI4eHhpKamUlFR0eKvPoMEtC6TgBZC6CIJaB0iAS1aKglo3SUBLYTQRRLQOkQCWrRUEtC6SwJaCKGLJKB1iAQ02h0qqqurn+p8pVJJeXk5VVVVdZ6nUqmoqqrS7r6hUqlQq9VPHF+j0aBQKLTfIx5PAlp3SUALIXSRBLQOaa4BXVRUxI0bN7h69So5OTmPPF5eXk5kZCR+fn7ExsY+15Zs\/v7+ODg4cPXq1ac6Pzw8HGdnZ\/z8\/B77uFqtJjY2lgMHDuDu7s7p06fx8vIiPT2d4uJi1Go1CoVCG+wajYbq6mrtXtUVFRWcO3eOQ4cOaW+SIh4lAa27JKCFELpIAlqHNNeADg0NxcTEhM8\/\/xxvb28UCoX2MY1GQ3x8vPYOgTV3InxWzs7OtG7dGldX16c6\/0l3IiwrK8POzo42bdowbdo0Dh06hLu7O8nJyRQWFpKTk8OJEycICgoCoKSkhEuXLnHt2jUqKiooLy\/n2LFj7Ny5k\/T09Gd+XbpOAlp3SUALIXSRBLQOae4B\/d577+Hk5ERmZqb2MaVSia+vL717935sQGs0GpRKJUql8rG7TWg0GlQqlfbxXwtolUqFQqF45H15UkCnp6czadIkJkyYQFJSElVVVZSXl2uXcPj7+2NsbKx9vrt37zJnzhxWrlxJUVGR9kYvNd\/zy7lXVVX96nITjUaDWq3WiV02nkQCWndJQAshdJEEtA5pzgE9ZswYPv\/8c2bPnk1QUJA2CisqKnB1daVr16507ty5VkAXFBRw6tQpZs2axZQpU\/Dy8uL+\/fuoVCo0Gg3l5eUEBASwaNEi7OzsuHr1Kg4ODrUCuqKigvDwcFavXs2oUaMwNTXFzc1Ne8vsugL62rVrTJgwgbfffpu2bdsyceJE3Nzc2LJlC4mJiXh4eGBgYMDf\/\/53vvjiC2bMmMHIkSN55513+Oijj5gxYwYXLlzg4MGDbNy4keTkZK5du8bq1au5cuUKoaGhLFiwgJkzZ3Ly5EkKCgq070tmZiY7duxg2bJlXLx4EV9fX1avXs21a9dexI\/shZOA1l0S0EIIXSQBrUMaMqDLy8u5fPky9vb2fPfdd8THxz\/Vh+YeJzQ0lBkzZjBx4kTs7Ow4dOiQ9lbb8fHx2NraYm5ujqmpqTagQ0JCGD16NB06dGD69OksWLAAfX19xowZQ3BwMKWlpezfv5+uXbvy5ZdfMn36dCwsLGjTpg1\/+9vfcHV1pbi4mD179tCzZ0+GDh3Kli1bsLKyol27djg5OZGdnV1nQMfHx7NmzRo++eQTevTowaZNm3B3d2fixImEhITg5+fHyJEj+dOf\/oSZmRl79+5l3rx5tGnTht69e7Nz505u3brFkiVLsLS0JDIyEi8vL7p06cK\/\/\/1vxo0bx8qVKxk+fDjDhw\/n\/PnzKBQKjh07xldffcWXX37JrFmzmDZtGl26dKFz5854eno+18+1uZKA1l0S0EIIXSQBrUMaKqDVajVBQUEYGRmhp6eHnp4ec+bMoaCg4JnGCw0NZfbs2SxatIgFCxbg4OBAWloaAPv27cPIyIhFixYxdepUli5dSmpqKitXrqRVq1asXr1au4zBw8ODIUOGsGfPHjIzM5k\/fz7GxsZcu3YNjUZDQkICEyZM4M0338TV1ZXExERsbW2ZOXMmt2\/fRq1WU1BQgI2NDT169MDHx+eJSzgSEhIYO3Ystra2PHz4kODgYG1AZ2Vl4ejoSKtWrbRXvH19fenWrRtz586lqKiIoqKiRwK6Xbt2zJw5k5ycHKqqqjh79iwTJkzA1dWV7OxslixZwieffMKxY8cAiIyMxMrKSgL6BZGAblgS0EIIXSQBrUMaKqArKys5evQoXbp00Qb0sGHDiIiIeKbxagLa1dWVXbt2sXTpUkJDQykoKGDBggVMmDCBw4cPawM6NjaWhQsX8tVXX3H27FntOFeuXGHgwIEsW7aMmJgYrK2tGTt2LOHh4QCUlpaydOlS3nrrLVxcXLh16xZff\/01U6ZM4eTJk1y\/fp0LFy4wd+5c+vbti6enJwcOHHjhAd2lSxdcXFyAn\/+ycv36daysrHBwcCA8PJyZM2cyZswY4uPjAcjLy2Pt2rX0799fAvoFkIBuWBLQQghdJAGtQxoqoFUqFTdu3MDU1JRXXnmFv\/71ryxZsoQHDx4803g1Ae3u7s61a9ewsbFhz549nDx5EmNjY7777jtu3rypDehbt24xa9Yshg0bxs2bN7Xj3Lp1C1NTU+bNm8fFixeZNm0aCxYs0F7NVqvVrF69mtatW\/Pdd9\/h6+uLoaEhbdu2pVevXhgYGGiPyZMnc\/HiRfbv3\/\/CA9rExKRWCNeM6eDgwE8\/\/cTo0aMZN24cSUlJwM87gWzfvp1BgwZJQL8AEtANSwJaCKGLJKB1SEOugS4qKsLHx4dly5axfv16oqKinvlGIDUBvXfvXtLS0nB0dGTRokXMmTMHY2Nj\/Pz8iIiI0AZ0QkICy5Yto1evXvj6+mrH8ff3p1+\/ftjY2BAaGoqtrS1TpkwhNjYW+Dk0a65Ar1u3jp9++glzc3NsbGyIjo6moKBAexQVFaFQKPD09GxWAX3jxg0mT56MqakpMTExAOTn57Nu3ToGDBggAf0CSEA3LAloIYQukoDWIQ29C4dardZu1\/Y8W6n9d0BXVlayb98+DA0N+de\/\/oWtrS2FhYW1AjorK4tDhw7RvXt3nJ2dKSkpoaKiAnd3dzp27IijoyMZGRl8++23GBsb4+vri0KhICwsDFNTU9544w02bNhAaGgolpaWjB8\/noiICFQqFampqXh6enL8+HFycnKeew30mjVreOutt9iwYQMqlYqLFy\/Ss2dPvvnmG\/Lz8+sd0Pfu3WPRokV07dqVEydOUFZWRkhICFZWVnTp0kUC+gWQgG5YEtBCCF0kAa1DmvM2djUBrdFotEsxPv\/8czw8PNBoNI8EdHJyMjNmzKBDhw6MHz+eiRMn0qlTJ0aNGsW1a9coKyvjyJEj9O7dm65duzJixAj09fVp3bo1f\/3rX9m4cSOFhYXs2LGDXr160bdvX6ysrOjfvz\/\/+c9\/cHR05P79+88d0FeuXMHQ0JDevXtz4MABAgICsLGxoVevXqxYsYKgoKB6BXRmZiYnTpzgyy+\/pH379owcOZL58+czfvx4+vTpIwH9AkhANywJaCGELpKA1iHNNaATExPZsWMH\/v7+wM\/LQw4ePMj27dvJyMgA4N69e2zdupWDBw+Sn5+PSqUiLy8PPz8\/vvnmG6ZOnYq3tzcZGRlUVVWhVqspKysjLCwMR0dHLCwscHFxYceOHcyZM4dTp05pz4mJiWHTpk0MHjwYMzMz9u3bR2pqKiqVimvXrjFz5sxfDdOsrCw2bNjA7t27KS8vJz4+nk2bNpGQkEB+fj6VlZV4eXkxceJEtmzZQlJSElevXsXW1hY7Ozt++uknDhw4gIuLi3YfaCcnp1q3Gq8Z08PDQztmYmIiBw4cYMeOHYSFheHm5sbIkSM5fvx44\/\/AmoAEtO6SgBZC6CIJaB3SXANaPL2arfbS0tJ4+PAhAIWFhbi4uLBkyRISExObeIaNozkGdM0ONHI030MCWgjRVCSgdYgEdMunVqs5fPgw3bt3Z8KECfj4+LB9+3ZGjBjB5s2bKS0tbeopNormFNCHDh2ic+fOtGnTplkff\/\/73\/nd735Hq1atmnwuTXXUfHhXCCFeNAloHSIBrRvUajXnz59n3Lhx9O7dm969e7NkyRLu3LnzzHeDbO6aU0C3FLLURAghmo4EtA6RgNYdKpWKhw8fkpaWRlpaGqWlpc+1E0pzJwFdfxLQQgjRdCSgdYgEtGipJKDrTwJaCCGajgS0DpGAFi2VBHT9SUALIUTTkYDWIRLQoqWSgK4\/CWghhGg6EtA6RAJatFQS0PUnAS2EEE1HAlqHSECLlkoCuv4koIUQoulIQOsQCWjRUklA158EtBBCNB0JaB0iAS1aKgno+pOAFkKIpiMBrUMkoEVLJQFdfxLQQgjRdCSgdYgEtGipJKDrTwJaCCGajgS0DpGAFi2VBHT9SUALIUTTkYDWIRLQoqWSgK4\/CWghhGg6EtA6RAJatFQS0PUnAS2EEE1HAlqHSECLlkoCuv4koIUQoulIQOuQmoA+c+YMkZGRREVFySFHizj8\/f3Zt2+fBHQ9SEALIUTTkYDWITUBvWPHDjl04Fi3bh1jx47F1NQUJyenJp\/PizgkoJ+eBLQQQjQdCWgdUllZSW5uLllZWXI0g8Pf3x9\/f\/9n\/v6rV69iYmJCnz59OHPmTJO\/nhdxlJSUNPV\/Ri2GBLQQQjQdCWghGkFBQQErVqzg+++\/f+Yx4uLisLCwYODAgQQHBzfg7IQukIAWQoimIwEtRCMIDAzEwMCA+fPnU1pa+kxjSECLukhACyFE05GAFqKBqVQqtm7dSuvWrRk0aNAzx68EtKiLBLQQQjQdCWghGlh2djbz5s3j1Vdf5Z133mHnzp2oVKp6jyMBLeoiAS2EEE1HAlqIBnb16lUMDQ35\/e9\/z6uvvsq8efPIzs6u9zgS0KIuEtBCCNF0JKCFaECVlZXs2bOHdu3aoaenxx\/+8AcGDBjA5cuX6z2WBLSoiwS0EEI0HQloIRpQWloaixYtonXr1ujp6aGnp8f777+Pu7s71dXV9RpLAlrURQJaCCGajgS0EA0oODiY4cOH88orr2gD+o033sDe3p6MjIx6jSUBLeoiAS2EEE1HAlqIBlJVVcWRI0fo2LGjNp5rlnEYGRlx\/fp1NBrNU48nAS3qIgEthBBNRwJaiAaSkZGBo6Mjb7\/9dq2A1tPTo1OnThw7dqxeyzgkoEVdJKCFEKLpSEAL0QA0Gg0hISGMGjWKl19++ZGAbtOmDc7Ozty\/f\/+px5SAFnWRgBZCiKYjAS1EA6ioqODo0aN06dLlkXjW09Pj5ZdfxtTUlNDQ0KdexiEBLeoiAS2EEE1HAlqIBvDgwQNWrFhRa\/eNXx7du3fn1KlTVFZWPtWYEtCiLhLQQgjRdCSghXhOGo2Gu3fvYmVlxf\/8z\/\/8akD\/v\/\/3\/1ixYsVT31RFAlrURQJaCCGajgS0EM9JoVBw+vRpunfv\/qvxrKenx0svvYSZmRnR0dFPtYxDAlrURQJaCCGajgS0EM9JoVBw+fJl7O3tmTx5MpMnT6Zbt2788Y9\/pGPHjtqvTZ48mXXr1hEbG4tKpXriuBLQoi4S0EII0XQkoIVoBK6urrRq1eq54kYCWtRFAloIIZqOBLQQjUACWjQ2CWghhGg6EtBCNAIJaNGQVCoVWVlZREVFaY9ly5bxxhtvMHPmzFpfT01NpaKiol53vRRCCFE\/EtBCNAIJaNGQysrK2LNnD4MGDaJnz5707NmTDz74gD\/84Q+8++672q8ZGBiwYcMGMjMzJaCFEKIRSUAL0QgkoEVDqqio4NChQ3zyySd17vTy\/vvvs2HDBnJzc5t6ykIIodMkoIVoBBLQoiGp1Wqio6MxMzOrM6D79OnDxYsXqa6ubuopCyGETpOAFqIRSECLhpaVlcXChQv561\/\/+th4\/tOf\/sS4ceOIiopq6qkKIYTOk4AWohFIQIuGVlpaipeXF1988cVjA\/rdd99l7dq1snxDCCFeAAloIRqBBLRoaGq1mtDQUEaOHPnILeN\/97vf0blzZ06cOPFUN+kRQgjxfCSghWgEEtCiMaSlpbFw4UL+8Y9\/1Aro1157jbFjxxIWFtbUUxRCiN8ECWghGoEEtGgMZWVl7N+\/nw4dOtQK6H\/+8584OTmRn5\/f1FMUQojfBAloIRqBBLRoDBqNhgsXLtC7d2\/tMo6XXnqJdu3acfDgQdRqdVNPUQghfhMkoIVoBBLQorHcvXuXOXPm8MYbb6Cnp8fLL7+MmZmZLN8QQogXSAJaiEYgAS0aS2lpKdu2beO9995DT0+P119\/neXLl1NUVNTUUxNCiN8MCWghGoEEtGhMPj4+9OjRg9\/\/\/ve0bduWAwcONPWUhBDiN0UCWohGIAEtGlNycjJz5szhL3\/5C2ZmZsTGxjb1lIQQ4jdFAlqIRiABLRpTZWUlW7Zs4V\/\/+hdLly6lvLy8qackhBC\/KRLQQjQCCWjR2C5evMiMGTM4evRoU09FCCF+cySghWgEEtCisWVlZREYGEhKSkpTT0UIIX5zJKCFaAQS0KIhlJSUcPv2bby8vFiwYAH9+vXjnXfeoVWrVvzlL3\/htdde4\/XXX6dVq1a0bt2a7t27M2fOHNzd3blx4waFhYVN\/RKEEEInSUAL0QgkoEV9aDQalEolJSUlxMXF4e7uzqBBg3j99dd56aWX+P3vf8\/LL7\/Mn\/\/8Z200\/\/J47bXXePXVV3nllVf4\/e9\/z0svvcQf\/vAHunXrvVl3sgAAIABJREFUxvr16wkLC6OoqIjq6mo0Gk1Tv2QhhGjRJKCFaAQS0OJpqFQqcnNzuXnzJjt27GDw4MG0atWK119\/nX\/961906tSJoUOHMn\/+fNzd3bl+\/Tr37t3j\/v37jxxpaWncunWLQ4cOsWzZMkaNGkXXrl354IMP+Nvf\/sbrr79Oz549Wb9+PVevXiU7OxulUtnUb4EQQrRIEtBCNAIJaFEXlUrFgwcPuHDhAra2tnz44Ye88sortG3bFhMTE5YtW8apU6dISUlBoVA80xVjpVJJdnb2\/2fvvsOiuvPFj+fm9yR3b5rRXONm1yT2kqjommisWBYbNtTFQkkiIrYIdg0xixrFrtHYjdix97K2oIAiKKAIotKbIHUYyvR5\/\/7wMpEgiBGk+Hk9z\/efnWHOd84c8J2z3zmHCxcusHjxYqytrfnss894++23qVu3LmPGjOHo0aPEx8dLSAshxHOSgBaiHEhAi6cxGo3k5ORw5coVpk+fTsuWLXn\/\/ff56quvmDVrFkeOHCE2NhatVlum29Xr9Tx8+JCzZ88yf\/58unXrxnvvvUf9+vVxcHDg5MmTpKeny9IOIYQoJQloIcqBBLR4msjISH766SfatGlDrVq16NSpE8uXLycoKIjc3NyXMgeVSkV4eDhbtmyhT58+1KpVi6ZNmzJ16lQCAgLQaDQvZR5CCFGVSUALUQ4koMWTdDodJ0+epFevXtSqVYuGDRsyc+ZMAgMDycnJwWAwvPQ5qVQq7t+\/z6pVq2jbti3vv\/8+7du3x9PTs8zPgAshRHUjAS1EOZCAFgUUCgVr166lSZMmvPnmm\/Tq1Ytz586Rm5tbIeH8JKPRiEql4vr163z99dfUrFmT\/\/3f\/8XNzY309PQKnZsQQlRmEtBClAMJaGEwGIiPj+eHH37go48+4oMPPmDWrFkkJSVV9NSeKi0tjRUrVtCwYUPefvttRo8eTVhYGHq9vqKnJoQQlY4EtBDlQAL61abT6bhz5w7Ozs58\/PHHfPnll+zatYucnJyKnlqJ1Go1x48fx9zcnA8++IARI0bg6+uLWq2u6KkJIUSlIgEtRDmQgH51GQwGwsLCcHFxoXHjxvTs2ZMDBw6gVCqrxFUuDAYDly5dwsrKioYNG2JnZ4evry8qlaqipyaEEJWGBLQQ5UAC+tUVERHB9OnTadSoEf379+f06dPk5eVV9LSei06n48aNG4wePZpGjRphb2\/P1atX5QodQgjxfySghSgHEtCvpri4OKZPn87HH3\/MoEGDOHfuXJWL5wJarZaAgAAcHByoV68eX3\/9Nbdv367oaQkhRKUgAS1EOZCAfvUoFAoWLlzIhx9+SNu2bdm\/f3+VX\/ag0Wi4ePEi\/fr1o3bt2syZM0euziGEEEhAC1EuJKCrhmvXrnHq1CkyMjJe6HV0Oh07duygSZMmNGnShG3btlWb5Q5arZYzZ87QrVs36tSpw\/Lly+U60UKIV54EtBDlQAK6anBzc+O\/\/uu\/+Pjjj3F0dOTkyZPExMSgVCrR6XSl+tKfXq\/n4sWLWFhY8Le\/\/Y1ly5aRn5\/\/Emb\/8qjVanbs2EGzZs1o3rw5u3fvlogWQrzSJKCFKAcS0FWDm5sbr732mmm88cYbtGrVihkzZnDw4EGCgoJ49OgRGo3mqTFtNBqJjo5m1qxZNGzYkMmTJ5OQkFAB76T8ZWRk4OrqSu3atRkxYgRBQUFV4qoiQghRHiSghSgHEtBVwx8D+snx+uuv07x5cyZMmMDWrVvx8\/MjNTW10JnpnJwc9u3bR4cOHejduze\/\/fZbpbjxiMFgQKVSoVKpSnW3Q4PBgFqtRqVSlTj\/4OBghg0bRoMGDVi2bNkLL30RQoiqSgJaiHJQlgH96aefYm1tjbOzs4wyHu3bty82oJ8c77zzDmZmZowYMYIlS5bg6+tLamoqgYGBfP3117Ro0YJVq1aRmZlZKc7KpqSksHXrVjZv3szDhw+f+fysrCyOHTvG5s2buX\/\/frHP0+v1HDhwgLZt29K7d28uXryITqcry6kLIUSVIAEtRDkoy4AuTeDJeHnj\/fffp3Xr1gwfPhxbW1tatmzJsGHD8Pf3rxRnnwEePHjA119\/jZ2dHeHh4c98flJSEm5ubtja2uLt7V3icxMTE5kyZQrNmjXDzc2t2i5ZEUKIkkhAC1EOyiKgVSoVMTExBAcHyyin4eTk9FzxXKNGDfr06cPGjRvx9PSkf\/\/+tGrVik2bNpGZmVmGR9CLKc+A1mg0nDt3jh49etC7d2+8vLzkC4VCiFeOBLQQ5aAsAlqUv5LWQBeMv\/zlL3z55ZcsW7aM0NBQlEoleXl5bNu2jRYtWmBlZcX169efuXQjLy+PAwcOsGbNGjZt2sTQoUPp3bs3Hh4eKBQKQkJCcHFxYdKkSfj5+RW6hnRiYiJr166lb9++uLi4EBQUhFqtBh5\/kVGpVHLs2DHGjh3L6tWruXz5Mvb29oUCOj8\/H39\/fxwdHWnTpg3ffvstV65cwWAwPFdAG41G4uPjcXZ2pmnTpsybN69Uy0SEEKI6kYAWohxIQFcNfwzo119\/nXfeeYe\/\/vWvmJub88svvxAbG1tknW9mZiaTJ0+madOmbNq0CaVS+cxtKRQKpkyZwrvvvkurVq0YOHAgX375JU2bNqVXr14MGDAAKysrWrduTY8ePbhw4QIqlYpffvmFhg0b0qpVK2xtbenVqxeffvopc+bMISUlhaSkJFxcXKhbty6WlpaMHDmSdu3a8eGHHzJy5EjCw8O5f\/8+48ePx8zMDBcXF+bOnUv79u1p3749+\/fvJz4+vtQBDY8va3fixAk6duyIlZUVwcHBpfqyohBCVBcS0EKUAwnoqqHgOtA1atSgWbNm9O3bl6VLlxIWFlbijVB8fX2xtLTEwsICLy+vUm2rIKBbt27NoUOH0Ol07N+\/nxYtWjB48GCCgoLIyclhz549ODg4sG\/fPvz9\/Rk+fDiDBg3i+vXr6PV6IiIimDp1KuPHjyckJISzZ8\/Sv39\/pk6dSnR0tOmLfmZmZowcOZI7d+7g5eXF6NGjWbhwIQ8fPsRoNOLt7c3w4cOZM2cOAQEBzxXQACEhIdjZ2dGlSxcOHjxoOiMuhBCvAgloIcqBBHTVsHv3bkaMGMHChQvx9fVFoVA880yqTqdjyZIlNGjQgFmzZhEfH1+qbSkUCqZPn86wYcO4desWABcvXqRHjx7MnDkThUKBWq3m3LlzjB8\/ns2bN3P48GG6du3K1KlTycrKAh4vBdm4cSMjR47kxIkT7Ny5k549e\/LLL7+Yln34+flhaWmJjY0N\/v7+eHh4MGzYMKZNm8bWrVvx8PBg+fLl9O7dG2tra44fP\/7cAZ2WlsaqVato2bIls2bNkkvaCSFeKRLQQpQDCeiqQalUkp2d\/VyXnouPj8fBwYFmzZqxa9euUn+BTqFQMGPGDEaPHk1UVBQAV69eZeDAgbi5uaFSqdDpdFy5coXJkycXCmhXV1fTGV6dTsfOnTuxsLBg48aNbN++HQsLCzZv3mxaavLklwi9vb1ZtGgRZmZmmJubM3LkSGxtbbG1tcXBwYG1a9fi6+v73AGt0+n4z3\/+Q7du3Rg5ciShoaGl3odCCFHVSUALUQ4koKuvixcvYm5uTt++fbl27Vqpf+7PBLS3tzf\/+te\/mD59eqEz0Bs2bKBnz55s2bKFEydOMGzYsEJnoK9evUrfvn2xsbExBXT\/\/v3ZvHkzDx48ID4+nvj4eBISEkhPTycmJua5AxogNDSUMWPG0L17d44dO\/Yce1EIIao2CWghyoEEdPW1atUqateuzYQJE0hMTCz1z\/2ZgI6Pj2f27Nn861\/\/IigoCICYmBhmzpzJ0KFDOXfuHIGBgTg6OjJz5kzi4uLQ6XTs2LGDJk2aMHLkSAICAtixYwdDhgxh5cqVpKamYjAYCAsLY9++ffj5+REVFfWnAjo1NRV3d3caNmzIokWLnm9HCiFEFSYBLUQ5kICunpRKJXPmzOG9995j\/vz5z3X94z8T0AqFgjVr1lC7dm2aNWvG6NGj6dWrF7Vq1cLFxYXk5GSSkpIYO3Ys77zzDubm5vTu3Zv\/\/d\/\/5bXXXmPEiBGEh4dz+\/Zthg8fTu3atRk+fDj29vZ89NFHNG\/enF27dj33VTgKFCwnadKkCc7Ozqaz5EIIUd1JQAtRDiSgq6eYmBgcHR1p3LgxHh4ez\/Wz2dnZLFq0iBkzZhAXFwdAYGAgY8aMYdWqVajVanQ6HdevX8fNzQ1PT0\/T5fFiYmJYvnw5lpaWODs7c\/36dfLz84HH12VOT09nx44d9OjRg27duvHLL78wZ84cpk6dSmRkJPA44M+cOYOtrS1t2rThm2++wcvLC7VaTUpKCqtWrcLFxYWAgIDnel\/nzp2jc+fO2NjYlOqmLUIIUR1IQAtRDiSgq6fAwECsrKzo3LkzZ8+efanbNhqNGAyGYr\/w+KzHCxgMhjK9ZnNAQABWVlb06dOHK1eulNnrCiFEZSYBLUQ5kICunk6fPk379u0ZNmwYISEhFT2dSiE6Oppx48bRqlUrdu\/eXdHTEUKIl0ICWohyIAFdPXl4eFCvXj3GjRtHcnJyRU+nUsjIyOD777\/nww8\/ZMmSJRU9HSGEeCkkoIUoBxLQ1dOGDRuoU6cOLi4uKBSKip5OpZCbm8v8+fN599135XgXQrwyJKCFKAcS0NWTBHRREtBCiFeRBLQQ5aAgoF977TUZ1XBIQP\/uyYCeO3dumX5BUQghKisJaCHKwa+\/\/krLli359NNPZVSjUatWLV5\/\/fUXDmi9Xk9OTg5KpdJ0++0XpdPpUCgUZGdno9PpyMvLIy0tjby8vDJ5\/eJIQAshXkUS0EIIUUpltYQjJSWFzZs3s3btWtM1oV9UREQEc+fOZcGCBcTFxbF3716GDRvGoUOHyuT1iyNLOIQQryIJaCGEKKWyCuiMjAyOHz\/O4cOHSUlJKZO5BQcHM2jQIIYPH054eDgXLlzghx9+4PLly2Xy+sWRgBZCvIokoIUQopR27txJw4YNcXR0JDEx8anPMRqN5OXloVAo0Gg05Ofnk52djUajMd3kRK\/Xk5eXR25uLnq9vtBztFotSqWS\/Pz8p94URaPRkJaWRkpKSqHn\/DGg8\/PzyczMNN0iPDc3l7y8PAwGA0qlkvT0dDQazVPfg1KpJDk5GYVC8cwlJmlpacyePZuPPvqI5cuXP8\/uFEKIKksCWgghSunMmTN89dVXDB06lNu3bz\/1ORqNhq1btzJ27Fj27NnDihUrsLKyYubMmdy8eROdTkdKSgpbtmxh3bp1xMfHs2\/fPuzt7dmxYwe7du3CxsaGcePGce7cOXJycjAajahUKm7evImbmxuWlpb06NEDJycnvL29MRgMRQJ63759WFtbc\/jwYSIjI\/n555\/ZunUrZ8+excXFhT59+jBjxgxu3LiBXq9Hr9cTHx\/Pr7\/+yogRI+jRowcjRozAw8OD5OTkYu9wGBUVhZOTE2ZmZuzZs6c8d78QQlQaEtBCCFFKt27dYtiwYXTo0IFTp0499TkqlYpZs2bxxhtv0KJFC+bMmcOCBQvo2LEjnTp14vjx48TExDBz5ky+++47wsPDcXd356233uLjjz\/GwcGBhQsXYmlpSefOndm3bx95eXl4eXkxfPhwRowYwd69e1m7di0dOnTA2tqaoKCgIgHt7u5OnTp1WLVqFcHBwYwYMYJPP\/2UkSNHsmfPHpYvX0737t2ZPXs2cXFx3Lt3j8mTJ9OuXTvmzZvH0aNHcXJyok+fPmzfvr3YJSvXr19n4MCBWFpacvXq1fLc\/UIIUWlIQAshRCnFxsYyduxYGjZsyK+\/\/vrU5xQEdP369Vm5ciXp6ekAeHp6YmZmhru7+1MD+oMPPmDGjBmmNdG\/\/fYbFhYWzJ07l7S0NNasWYOtrS0XL140nQ0uuNrL0qVLCQgIKDGgBw0aRJ8+ffDx8UGr1ZKUlMTkyZMZMGAAvr6+nD17lkGDBrFu3TrTlTRu3rzJiBEjcHJy4sGDB099v2fPnqVjx47Y2dkV+xwhhKhuJKCFEKKUcnJycHV15b333sPNzQ21Wl3kOQUB\/dlnn7Fz505UKhUA165dY8CAAcyaNYtbt24VCejatWuzYMECcnNzAfD392fIkCFMnz6d8PBwpk2bRteuXdm4cSM+Pj74+PiwfPlyvvrqK+bNm4ePj0+JAT1kyBBsbGwIDw\/HaDSSlZWFs7MzZmZmeHp6smXLFvr168fixYtNr79nzx4GDx6Mra0tN2\/eRK\/XF3qvWq0WDw8PGjduzJQpU8jOzi7\/D0EIISoBCWghhHgOP\/\/8M3Xq1GHcuHHEx8cXebwgoFu1asXBgwdN0RkSEsKIESMYN24cPj4+RQK6Tp06rFixwnT2NzIykokTJ\/Ldd99x+fJlHBwcqFmzJp9\/\/jnt27c3jR49erB161auXr1aYkCPHj2a6dOnmy6b92RAb926lSVLltCkSRMaNWpU6PXbt2\/PtGnTCA0NLRLQjx49YtGiRTRu3JglS5aU854XQojKQwJaCCGew+XLl+nZsycWFhZ4e3sXeVylUuHq6kqLFi3Ytm2b6UYmly9fpnfv3vz73\/\/m3r17xZ6BLnh+YGAgI0aMYM6cOYSGhjJhwgQ6d+7MkSNHyMjIICMjg5SUFB49ekReXh5BQUHPXMJR8BgUDuhdu3axbt06unbtytq1a02vn5aWRmpqKgqFAq1WW+SLhLdv3+abb76hZ8+exa4JF0KI6kgCWgghnkNycjLjxo2jcePGbNu2rcil4NRqNatWraJly5ZMmTKFu3fvkpaWxooVK2jbti1r1qwhOjq6SEDXqFEDa2tr\/Pz8SE9PZ\/fu3VhYWLB8+XIePXrEggULaNeuHb\/88gsZGRnExMSwYcMG5s2bx40bN575JcKSAvrgwYMcOHCADh064OLiQmJiIgqFgvPnz7NkyRKOHTtGZmZmofep0+k4ffo0nTt3xtbWlnv37r20z0AIISqaBLQQQjwHnU7HsmXLaNCgAdOnTyc2NrbQ4xqNhi1bttCxY0cGDx6Mo6MjAwcOpG3btowdO5aQkJCnfomwRo0aWFhYMH78eKysrOjYsSO2trb4+PigUqm4ceMGLi4umJubY2lpiYWFBX\/7298YNWoU9+7de6GAPnr0KHFxcSxdupQePXrQp08frK2t+eKLL+jZsycHDhwgJyen0Pt89OgRy5cvp2XLlsyZM6dIYAshRHUmAS2EEM\/p5s2bWFlZYW5uzvnz5ws9VhDQAwcOZOfOnXh5ebFu3TouXLhAeno6er2e7OxsfHx88PLyIiMjA3d3dz788EMWLlxIcHAw27dv5\/jx4yQmJppuwKLT6cjMzMTf359Vq1Yxf\/58jhw5Qnx8PAaDgdTUVE6cOMGZM2fIyMjgxo0bbN68maCgoCKPweMz5ZcvX2b37t1ERkZiMBjIzc0lLi6OgwcPMm\/ePLZv305YWBh5eXlFlm8EBwczfPhwunXrxvHjx4u9KYsQQlRHEtBCCPGcsrOzmTp1Ko0aNWLdunWFrpFcENCDBw\/m6NGjpXq9J88WVwUqlYqjR4\/Svn17hg4dSkhISLE3WhFCiOpIAloIIZ6TVqtl586dmJmZMWjQIK5du2a6ekZ1D2ij0UhcXBzfffcdzZs3Z+HChSQnJ1f0tIQQ4qWSgBZCiOdkNBq5f\/8+Dg4OtGzZktWrV5OWlgY8XiN95swZ3NzcSn1nvidvu13ZqdVqjh07RteuXRkwYAA+Pj7odLqKnpYQQrxUEtBCCPEnZGdns337dr744gsGDhxoCkmj0YhKpUKpVJZ6XXB+fj6ZmZmmm65UZjExMYwfP57mzZuzePFiOfsshHglSUALIcSfYDAYCA0NxdHRkebNm+Pu7k56enq1Xgus0+nYsWMHLVq0YMCAAXh7e8vZZyHEK0kCWggh\/qT8\/HzTcgZzc3POnDlTrYPSz88PS0tLGjVqxNq1a1EqlRU9JSGEqBAS0EII8ScZjUYSEhJwc3Ojfv36ODo6EhMTU9HTKhepqalMmTKFGjVq8PXXXxMWFlatz7YLIURJJKCFEOIF+fr6YmlpSc2aNXFzczPdjru6UKlUbNiwgU8\/\/ZSWLVtWiS87CiFEeZKAFkKIF6TT6di7dy+ff\/45jRo1YuPGjeTm5lb0tMpEwTWfu3Tpwscff8yaNWvQarUVPS0hhKhQEtBCCFEGlEolP\/\/8M\/Xq1aNly5Z4eHhU+TXC+fn5nDhxgp49e\/L3v\/+dn376iaysrIqelhBCVDgJaCGEKCPJycnMmzePhg0bYmFhweHDh8nOzq7oaf0pBbf6Hj58OA0aNGDixImEh4dX9LSEEKJSkIAWQogyFBMTw\/fff0\/jxo3p1asXx44dIycnp6Kn9Vy0Wi1+fn7Y2NjQsGFDxowZQ0BAQKmvay2EENWdBLQQQpQho9FIdHQ0c+fOpUmTJnzxxRf8+uuvKBSKKnHVCoPBwIkTJ+jWrRv169dn\/PjxBAUFybpnIYR4ggS0EEKUMYPBQFRUFK6urnzyySc0a9aMDRs2VPrlHCqVij179tC6dWtq1qzJ6NGjuXXrVrW+trUQQvwZEtBCCFFOUlJSmD9\/Ph999BFvv\/02kydPJiEhoaKn9VSpqam4u7tTt25d3nrrLZycnIiKiqroaQkhRKUkAS2EEOVIqVSyY8cO2rVrx1tvvUWXLl3Yu3cvycnJFb4sQq\/Xk5GRwenTpxkyZAi1atWicePGrF69Wq62IYQQJZCAFkKIcqbT6fDy8sLGxoa6devyySef4OjoyPnz50lPT8dgMLz0OSmVSq5fv46rqystWrTgr3\/9K\/369ePkyZOyZEMIIZ5BAloIIV6ShIQE1q9fT48ePahduzatW7dm5syZXLp0CYVC8VLmkJubi5+fHwsWLKBTp07UqlWLL7\/8koULF3Lnzp0KPysuhBBVgQS0EEK8JEajkfz8fIKDg1myZAkdOnSgRo0afPbZZ9jb27N582bu3buHWq0u0+3qdDpiY2PZu3cv48ePp3Xr1rz99ts0b96cWbNm4ePjU2WuEiKEEJWBBLQQQrxkBoOB7OxsAgMDWbhwIS1atODNN9+kTp06tGvXjjFjxrBz507u37+PSqX6U2Gr0+mIi4vjyJEjTJkyha5du1K3bl3++7\/\/m\/r16zNr1iyuXr1KWloaer2+HN6lEEJUXxLQQghRQQwGA7m5ucTFxXHixAmsra15\/\/33efPNN3n\/\/ff56KOPaNOmDXZ2dqxYsYJz584RHh5OQkJCkREZGcmVK1dYt24dY8eO5auvvqJu3brUqlWLv\/zlL7z77rv06dOHnTt38uDBA5RKZYWsvRZCiOpAAloIISoJvV5PYmIinp6eDBgwgHfffZfXXnut0Hj9tdd4+79e58PX3+Cj\/\/cmf339DWr91\/\/jzdf+q8hz33jjDTp16sS6deu4f\/9+tV7fnOXjR+ioMfi37FDiSFy\/tcTX0aSlEz1\/yTNf51kjynUB6sSHJW4rcf3WF97O3W8nkB0QWOJ2Hu0\/QlA3yxfaTnBvK1KPnSpxO9kBgdz9dsILv6dnfUbqxIdEuS544e1Ez1+CJi293D+je+NcyLl9p8TtJO\/ax82OFi+0ndsDhpN+5nyJ28m8dIU7w+xf+DMQEtBCCFFp5ebmEh4ezsmTJ1m8eDE2NjZYdjXnh7Zfcc7s8T90V1u0Z2vT1oxq\/QVDhw7Fzc2NAwcOEBwc\/NK+mFgZFAR0YNe+hFjZcGeY\/VPHo\/1HSnwdbVYWiZs8iv350o6EXzajeZRa4rYe7T\/ywtuJ\/nERuaF3S9xOxrlLhI\/57oW2c2\/8VDK9vEvcTm7oXaJ\/XPTC7+lZn5HmUSoJv2x+4e0kbvJA+4zLNZbFZxTz0zLy7keUuJ20U\/8hzH7cC23n\/uRZZPn6lbidbP+bREz\/odjXCLYYTECbLhLQpSABLYQQVYjRYCDt5Flu97d+rrOD1V1BQMcuXoUuW1nR0xGiSko9dorg3lYS0KUgAS2EEFVM+pnz3B4wXAL6CRLQQrw4CejSk4AWQogqRgK6KAloIV6cBHTpSUALIUQVIwFdlAS0EC9OArr0JKCFEKKKkYAuSgJaiBcnAV16EtBCCFHFSEAXJQEtxIuTgC49CWghhKhiJKCLehUCWqvVolQqyc\/PL\/Y5Go0GpVJZ5reDr+oMBgN5eXlkZ2ej0WjKZRsajQaFQlHi51PZSUCXngS0EEJUMRLQRb0KAR0ZGcn69es5d+5csc8JDg5m3bp1XL16tdzmYTQa0Wq1aLXaP3Wb+YqQn5\/P0aNHWbZsGSEhIWXymgaDAY1Gg06nAyAoKAh3d3f+85\/\/lMnrVwQJ6NKTgBZCiCpGArqoVyGgL1++TM+ePZk\/f36xzwkICGDp0qV4eXmV2zzUajVXrlzBx8enytzdMisrC2dnZ8zMzDh69GiZvGZycjJnzpwhKCgIgOvXrzNnzhyOHTtWJq9fESSgS08CWgghqhgJ6KIqU0Dr9Xq0Wi16vb5Mz9A+GdBGoxGDwVBkG1qtlry8vKeGrU6nQ6vVYjAYijxmNBrR6XTo9fpnziMxMZHp06fj7u6OSqUq8jparRadTvdc712v1z\/3zxgMBtOcn\/ZzT86lPAL68uXLfPPNN3h4eACP931ubm6RJSLPmmeBkj6fl0UCuvQkoIUQooqRgC5Kp8gmN+weqrh4jP\/3f6m\/LBqNhk2bNmFra8uBAwfYtWsXNjY2\/PDDD4SFhWEwGIiLi2PevHm4uroSEfH4ts46nY4zZ84we\/ZsLl26hFarxd\/fHxcXFywtLZk4cSI\/\/\/wzAQEBaDQaU0C7ublx69YtZs+eja2tLTt37uTRo0cYDAZ+++03XFxcOH78OMHBwXz\/\/fds2bKFW7dusWjRIgYNGsTixYuJiooyxXJqaiqbN2\/G3t6eDRs24O\/vz7Jly9i0aRMZGRkkP7HwAAAgAElEQVSF3mtMTAwLFiygSZMm1KtXj9GjR+Pr64tarSY0NBR3d3f69evHmDFjOH36NFnF3Co7JyeHTZs2MWfOHC5dusTmzZuxs7Nj7dq1JCUlARAREcHKlStZtmwZy5cvZ9q0aXh5eaHVaomIiODnn39m8ODBjB07lvPnz5OTkwM8DufU1FR2797NyJEjmTVrFlevXmXy5MmmgL506RKzZ8\/m\/PnzpjmFhYWxePFitm3bRlpaGgBJSUksX76cXr16YW1tze7du0lPT2fbtm20bNmS2rVr8+WXX7JmzRp27NiBnZ2dKajVajW3bt1i4cKF9O\/fn\/Hjx3Pp0iXTPAu2t2PHDgICAvj++++xtLRk2bJlREVFVcjyGE1aOspbd1AnPnzp265qJKCFEKKKkYCuXFQqFbNmzeIvf\/kLzZs359tvv8XOzo6mTZtiYWHB+fPnCQ8PZ\/jw4QwaNIjg4GDgcXhv27YNS0tLPD09uXHjBqNGjcLS0pJt27axa9cuhg0bhp2dHf7+\/nh5edGzZ0+aNm2Kra0ts2fPZsSIEfTv3599+\/aRk5PD\/v376d69Oxs2bMDLy4vu3bvz6aefMnDgQObOnYuTkxOdO3dm6dKlJCcnm7ZZr149hg4dyoQJE+jRowcNGzZkypQpJCcnF3qv6enpbN26lX\/84x\/07t2bHTt2cOfOHY4fP06vXr34xz\/+wXfffcfIkSNp3Lgx3333nek\/GJ6UlZWFi4sL7777Lm3atMHR0ZERI0bQqFEjhg4dip+fH8HBwQwZMoR33nmHjz\/+GHt7e7y9vTlx4gR9+vSha9euzJ49mzFjxvDZZ58xYcIEIiMjSUhIYN68eTRr1owBAwYwdepUevXqxYcffmgKaE9PTywtLdm1a5dpTn5+fnzzzTf8+OOPJCUlkZSUxNSpU2ncuDHdu3endevWNGzYkKVLl3L27FlGjhxJw4YNGT16NJcvX2bDhg00bdoUNzc31Go1R44coWfPnnTp0oVJkyZhaWnJ3\/\/+d1xcXIiPj8fPzw9ra2uaNWuGtbU1y5YtY+LEiZibm7N69WrS09PL98AVL0QCWgghqhgJ6MqlIKBr167NzJkziY2NxWAwcOjQIdq1a8eiRYu4e\/duiQG9d+9ejh49SocOHfjhhx9QKpVotVpiYmK4du0akZGRnD9\/np49e2JlZWVad3v58mUGDRrEtGnTSExMLBLQ5ubm\/POf\/+TKlSvodDri4+OZNGkSQ4cOxd\/fn3379tGyZUvmzZuHwWAgMzOTTZs28dlnn+Hk5FQkoAFu3LjB0KFDcXNzIz8\/n5iYGJycnLCwsODChQsYDAYMBoPpzO2ZM2eKnE0tWFLRoEEDVq1aRUZGBgaDgTVr1tCqVSs2btxIUFAQgwYN4osvvmD\/\/v3k5eXx6NEjJkyYQJs2bTh69KhpKYubmxvt2rXj+PHj+Pv7Y29vz\/Tp04mNjcVoNOLv70\/fvn1LHdCJiYn8+OOP\/P3vf2fTpk3odDquX7+OnZ0dDg4O3L59m71799KrVy\/TGWdPT09TQD969IjJkyfTo0cPLl26ZFpO4urqSteuXbl06RJ+fn707t2bfv36ce3aNXQ6HXFxcUydOpUxY8YQGhpaTkesKAsS0EIIUcVIQFcuBQHdsGFDtm7darqEnK+vL5aWlsyYMYNr16498wx0SEgIY8aMoVOnTixcuBA\/Pz\/i4+PJy8vDaDSalnB8\/\/33prXHt2\/fxt7enkmTJhETE\/PUgP7mm2+IiYnBaDSSnp7O3LlzGTx4MBcvXmTt2rX885\/\/5NChQ8DjdbwnT56kQ4cOpQ7okJAQRo8ezejRo7lz547peUeOHKF\/\/\/6mAH1SQUB\/9tln7Nq1y7TPzpw5g4WFBe7u7ly\/fp1BgwZhZWVFcHAwBoOBqKgoJkyYgI2Njek\/IgD27NnDl19+ibu7OxcuXOCbb77hp59+Ms0\/ISGBMWPGlDqg79+\/z\/Tp0+nSpQsXL1586udeUkBHRkYyadKkIiG8efNm2rZty\/r167l69SqWlpY4ODiYPp+C\/dK+fXvOnj1biqNPVBQJ6ErCoNaQG\/6AzEtXyLkdik75f2u59AbyIqLJvHSl0MiLiMaof\/xFA31uHjl37hZ+jpc3qtg40+trUtPI9r9Z6DnZ\/jfRpKaZnqOKjSPTy9v0uDLwFtrM39ev5UfHFplHbvgDDOrHX5jQ56vIDbtX5Dn50bGm19BmZqEMvFXoccXV66gf\/v5HWp2YRJbPtULPKZe5pGeQfSPoueaSfSMIbXpGifPIuXMXfW7e489VqyPvfmSJ89ApslEGhxR6POuKL6r4hN8\/v5RHKPwCCn9+pZhLbtg99PmqIsfYc83F5xrqxKTf98nDZBRXr\/++z\/wC0KQ8+v04ik8g64pv4X1SmmP6fiQGra5cj+k\/8\/ulU+aQczu02LlUxDEdt2wNQT0HFgnoP3NMZ166gjI4BJ0i+0\/N5WnH0ks7pv\/w+\/XkYy9TQUA3adKE3bt3m74EFh4ejp2dHRMmTODixYtPDeiNGzfSq1cvPD09UavVeHl5MXHiRDp27EirVq0YPHiwaY3z067CERYWxtixY3FxcSk2oJ8M4aysLJYtW4aNjQ2nT59m6dKlDBw40HRpPKPRyG+\/\/Vbk5570x4C+c+cOEydOZMaMGURHR5ued+XKFWxtbVm2bBkKhaLQazz5pb4jR46YzlD7+\/szfPhw5s6di5eXF4MGDWL48OGEh4cDmP4j449LQ06ePEn37t2ZPXs2e\/fuxcnJiV9\/\/dW03YyMjEJroJ8V0EFBQYwfP56hQ4cWe9m7kgI6MDCQsWPHMnfuXBITE00\/c+jQITp27MjChQv57bffsLW1Ze7cuaSkpBTaLxLQlZ8EdCWhSUsnev4S\/Ft24P7kmeSG3wfAoFIRv\/IX0z+UBSN+1ToMajVGo5G8qGgipv9Q6PGAtuYkbd0JgNFgIOP8b4QMtSv0nDvD7Mm8dMX0nMTN2wloa256\/O63E8gOCDTNMXH91iLziJ6\/BE3a43Va6sSHRLkuKPKcJ7\/Nmx0QyN1vJxR6\/I9nzx7tP0JQN8tCz3lyLkajkYR1W4qdi9FoRJWQRJTr\/GLnYjQaybxyldCRDsXOxWgwkOx5iMAn5hI6agxZPn4l7pOIGXN\/D4lsJbGLV5W4T3Ju3+HeOJdCj9\/saEHyrn2m5\/zxjOMf51LcPolyXWD6MojmUSrRbu4l7hNl0G3CxzoXejyomyWP9h8x7ZPUwycI7mVlevz2gOGkn\/n9izjJu\/Zxs6NFodcodEyr1cSvWldkHk9ePSE\/OpaIGXOLPaYBMi9d4c4w++KPaaORpC07Ch3Tf5yLPj+fuBVrS\/z9ygkL5\/53M4qdS1kc0y\/y+2Xa3tFTZPlcI3RUCce00UjKvsNF5nJvnAs5tx+fOTTq9SSs3VTy71d8IpFz5hV7LJXFMV3cPnnymP7j79eTj71MT56B3rJli+lsqp+fHwMHDsTV1ZXAwEBsbW0ZMmQIQUFBj3\/flEp++OEH2rRpg6enZ6HXi4iIYO\/evVhZWdGnTx9OnTplWsJR2oAOCAhgyJAhODs7PzWgz58\/z+rVqzE3N2f\/\/v3A4zPQp06deq4z0JGRkTg7O+Po6FgoNg8fPkzfvn1ZuXIlSmXhK6MUhGKLFi3w9PQ0XTXk\/Pnz9O3bl8WLF+Pv718koJOSkpgyZQqjRo0qdAZ6y5YtfPbZZ7i5ufGf\/\/wHJycnli1bxqNHj\/\/jPj4+HgcHh0IB3bVrV9avXw88vgrIpUuXGDVqFD\/++CMRERH88MMPWFhYmC4JqNfrSU1NJSoqiqysrBIDOjExkZkzZzJhwgTu3btnmue6deto1KgR7u7upqt4LFiwgNTU1EL7RQK68pOAriQMKjXKWyGkHjuF4voN09kgo05HTuhdUo+dKjRywsIx\/t8lcXTZSrIDAgs9nnbiDHkPIh+\/htGIKvEhGb9dKfSczN+8TWemjAYDufcekHrijOnxLJ9rpn+8AXLD7xeZh\/JWCAbV438s9Hl5ZAfeKvKcgliBx\/+hkOVzrdDj6ecuoYr7\/cxUfkws6WcvFHrOk3MxGo3k3r1X7FyMRiO63FyyA4OLnYvRaESdnELmZZ9i52I0GMiPiik0l8wrvmhSUkvcJ9k3Ak1nOA1aLTkhoSXuE21GJopr\/oU\/v9PnyI\/8\/UyOOiGJjItehT+\/J+ZS3D7JDryFPu\/x2XB9fj7KoNsl7hNNWjpZV68X3idnL5AfE\/v7PomJI\/3cJdPjGRe9UCf8foY6PzKatNPnCr1GoWNarycnLLzoMR0SiuH\/\/hHVKXPIvlH8MQ2Pz4Rn\/uZd\/DFtNJJ7P6LQMf3HuRi0OnLuhJX4+6XNzELhF1DsXMrimH7e36\/oBUsI6t6\/SECrUx6RecW3+GPaaCxyTKceO4Ximj\/ajEzTZ\/y0z6fQ71dODtk3g4o9lsrimC729+uJY\/qPv19PPvYyFQR0nTp1cHV1JSEhAZVKxc6dO\/nqq69Yvnw5CQkJuLq6Ymtry5UrV9BoNNy8eZOBAwfStGlTPDw8uHz5Mtu2bePOnTvo9XoUCgWbNm1i5MiR7Nmzh9OnTz9XQBc8Nnv27KcGtJeXF\/v27aNdu3a4urqSnp5OUlISixcvpn79+s8M6JkzZ5KRkUFqaipLlixh5MiRnDp1Co1GQ0ZGBt9\/\/z1mZmZs27atyGX1CkLxk08+YdGiRSQnJ5Ofn8+6devo1q0bO3fuJDg4uEhA5+TksHr1agYMGICnpyf5+fkoFApmzJhBvXr12LhxI8HBwTg5OTFp0iTCwsLQaDScOXOGjh07mgL69OnTdOnSBTc3N1QqFQqFgs2bN9OjRw\/Tlwj37t1Ljx49WLFiBdnZ2SQkJPDzzz+zcuVKYmNj2bt3Lz179mT9+vVoNJpCAZ2dnc3SpUsZOnQop06dQq1Wk5mZibOzM3Xr1mXLli1cu3ZNAroKk4AWQogqRtZAVy5qtZoVK1bQuHFjunXrxqRJk0xnOwcMGICvry+5ubns3r0bc3Nzunfvjq2tLePGjWPIkCF07tyZ3bt3c\/78eYYOHUr\/\/v1Zvnw5K1asoF+\/flhbW3PlyhUuXbpU5gEdFhbG6NGjadq0KX379sXBwcF0NYziAjo5OZnZs2fTqVMnnJ2duXjxIqdPn2bQoEF07NgRGxsbLC0tadq0KWPHjuXevXvFfomwVq1amJub4+joiI2NDWZmZnz99deEhIQ8NaC1Wi3e3t5YW1vTpUsXHB0dGTp0KE2aNGH06NHcv3+flJQUFi9eTNu2benduzdDhgyhdevW1KxZ0xTQERERTJgwgc8\/\/xwbGxu+++47rK2tMTc3NwV0ZGQkTk5OfP7551hbWzNkyBC++uorli1bRlZWFv7+\/vzrX\/+ie\/fubN68mWXLlpkCWqvVcuHCBaysrOjWrRtjx47FysqKRo0ameZZsGREArpqkoAWQogqRgK6ctFoNPz666\/07duXjRs3cvToUaZNm8aOHTtISUkx3UAjKyuL06dPM2bMGH788UfCw8M5d+4cixYtwtfXF61WS0hICAsXLqRr16506tSJBQsWEBISgkajISwsjHnz5nHw4EHTthMSEti4cSPbtm3j0aNHXL16lX\/\/+9+cO3fO9NiuXbvIzHz8\/zDk5uZy\/PhxVq9eTWhoKAaDgdzcXLy9vdmwYQNXrlzh1KlTWFhY4OLiYloC8SSj0Yifnx\/Tp0\/Hzs6OY8eOodVqSUpKYvfu3Tg6OrJgwQJu375Nfn7+U28MUhCKLVu2xMPDg127duHk5MSePXtIT09Hr9cTHR3N4sWLWblypWkdccENX1JTU9m\/fz9jxozB1dWVgIAA07YK3pOPjw8TJ05k1KhR7N69Gw8PD+bNm4e\/vz8Gg4GYmBjWrVvHuHHj2Lt3L\/7+\/qxYsYLt27eTmpqKwWBAqVTi5eWFs7Mzzs7OnD9\/nszMzMfLu3Jy2LNnD7a2tixatAgPDw8mT57M\/v37TVfdePjwIdu3b2f06NEsXryY0NBQ0zzv37\/PqlWr2L17d6HPZ9u2bcyePbvQEhVR+UhACyFEFSMBXbn88WoaVUlWVhb37t0jMTERrVaLSqXi2LFjTJo0iUOHDhW502BZbres7wwoxMskAS2EEFWMBHRR+pxc8mPiUKc8wliK21GXpaoc0GFhYTg6OtK7d2\/Wr1\/P7t27GTVqFOPGjSMkJKTc7oYnAV056RTZ5EVGF\/p+hng6CWghhKhiJKCLyvLxI3TUmEJXc3lZtFotx48fx8XFxXQ5uKrk7t27zJkzh+7du9O5c2dsbW05duwY2dnZz\/7hP0mpVLJ8+XJGjhxpusqFqHipx04R3Nuq0JWixNNJQAshRBUjAV1URQa00WgkIyODmJgYsrKynv0DlVB+fj4pKSnExsaSlpaGvpzP4uv1epKSknjw4EGRa0SLiiMBXXoS0EIIUcVIQBdVkQEtRHUhAV16EtBCCFHFSEAXJQEtxIuTgC49CWghhKhiJKCLkoAW4sVJQJeeBLQQQlQxEtBFSUAL8eIkoEtPAloIIaoYCeiiJKCFeHES0KUnAS2EEFWMBHRREtBCvDgJ6NKTgBZCiCpGArooCWghXpwEdOlJQAshRCVl1OvJ\/M2b6H8vIsp1gWnc\/WY8Nzv80xTQN9r1IMzOqdBz0k+fx6BSV\/RbeGkkoIV4cRLQpScBLYQQlZTRaCT12Clu9RliiuXSjEDzfjzc4YlBranot\/DSFAR0YNe+hFjZcGeY\/VNHiuchjAZDsa+jzcoicZNHsT9f2pGwZhPq5Ecl3gr70f4jL7ydqB8XkhMSWuJ2Ms5dInzMdy+0nXvjp5Bx6XKJ+y439C7RPy564feUsu9widvRPEol4ZfNL7ydxI3b0GZkFrudsvqMYhYsJTf8fomfUdqp\/xBmP+6FtnN\/8kyyvK+VuJ1s\/5tETP+h2NcIthhMQJsuEtClIAEthBCVWH5MHBEzf3yugA53ciY78BZGffERUt0UBPSz9k3Cui0lBoYmLZ3o+Uuea38\/bUS5LkCVmFTithLXb33h7dz9dgIK\/5vPDPWgbpYvtJ3g3lakHj1VcpwFBHL32wkv\/J6e9RmpEx8S5brghbcTPX8JmrT0YrdTVp\/RPScXlLfulPieknft42ZHixfazu0Bw0k7c77E7WReusKdYfbPfC0J6GeTgBZCiErMoNURv3YT\/q06lj7e\/r0IdXJKif+QCiGE+PMkoIUQopJLO3mWW\/2GlSqeA837kbjJA50iu6KnLYQQ1ZYEtBBCVHK5d+9x\/7sZpQrosK\/Hkel9FYPm1Vn\/LIQQL5sEtBBCVHLaLAVxy9cS0Na8xHgO+EcXIufMIy8yWpZvCCFEOZKAFkKISs6gUpF69BS3B44o+YtevQaTtHUH2vSMip6yEEJUaxLQQghRyRkNBnLD7\/PAZfYzl29k+VzDoNVW9JSFEKJak4AWQohKzmg0ok55ROzS1dxo3\/PpyzfamhMxYy654Q9k+YYQQpQzCWghhKgC9Ll5pJ04w51hdk9fvvHPQSRt2S7LN4QQ4iWQgBZCiCrAaDCQcyeM+5Nn4m\/2h2tCt+rInX99Tcb53zDq9RU9VSGEqPYkoIUQoopQJyYRu2Q1Nzv1LhTQN77szoOp35MTElbRUxRCiFeCBLQQQlQRupwcUg4c4faA4UVunpLwy+Zn3pZYCCFE2ZCAFkKIKsKo15N55SqhtmML3dr7Vr9hPDpyQq6+IYQQL4kEtBBCVCH5UTFEz1\/CzU69\/u\/mKV25P3kmObdDK3pqQgjxypCAFkKIKkSXk0vy7v0E97Z6vP65fQ\/iV69Hm6Wo6KkJIcQrQwJaCCGqmEwvb0JHfIu\/WSeC\/zmI1MMnKnpKQgjxSpGAFkKIKkYVG0\/0\/KXc+KonD5xnk3cvoqKnJIQQrxQJaCGEqGL0+Soe7vAk6J+DiFu1Dn1uXkVPSQghXikS0EIIUQVl+Vwjcs480k+fq+ipCCHEK0cCWgghqiDVw2Qy\/QLIj42v6KkIIcQrRwK6ElCr1axevRozMzMZZTisra357bffKuxz3bBhQ4Xvg+o2evTowYEDByrsM33ZcnNzCQ8P5+TJkyxevBgbGxs6deqEmZkZrVq0oGWzZrT6\/HPMzMxo164dQ4cOxc3NjQMHDhAcHIxC8epcmcPX1xdbW9sKP0ar21i9ejVqtbqiP95inT17lkGDBlX4fqpuY8OGDRX90VZ6EtCVgEqlYtasWbz22msyynCYmZlx9OjRCvtc3dzcKnwfVLdRp06dav2HXa\/X8\/DhQw4fPsyIESOoW7cu77zzDv\/zP\/\/Dm2++yeuvv17i\/nn99dd58803+Z\/\/+R\/efvttPvjgA3r37s2WLVuIjIxEW41vtHL27Fnat29f4cdodRuzZs1CpVJV9MdbLE9PT5o2bVrh+6m6DTc3t4r+aCs9CehKoCCgmzZtiqenZ0VPp8rLysrC2dm5UgR0jRo1WLVqVYXNoTpxc3OrdgFtMBjIzc0lLi6OEydOYG1tTY0aNXjjjTd47733+PDDD2nRogVDhgzhxx9\/ZO\/evVy+fJkbN24UGVevXuXw4cMsXLgQGxsb2rRpw0cffcT777\/Pf\/\/3f\/Puu+\/Sp08fdu7cyYMHD1AqlRgMhoreBWWmIKCdnZ3Jysqq6OlUeUePHsXMzKzKBLTDdGv8Ug7JeMHxw88T+evHtSWgS0ECuhKQgC5bEtDVU3UKaIPBQHZ2NoGBgSxcuJAWLVrw5ptvUrt2bdq0acPIkSNZvXo13t7eREVFkZiYSFJS0nONuLg4AgIC2Lp1K46OjrRv356PPvqIN998k\/r16zNr1iyuXr1KWloaer2+onfJC5OALlsS0K\/mkIAuPQnoSkACumxJQFdP1SGgjUYj+fn5BAcHs2TJEjp06MB7771H48aNGTZsGEuXLsXb25uYmJjnDuZnxbS\/vz+\/\/PIL9vb2fP7557z11ls0b96cWbNm4ePjg0KhwGg0VvQu+tMkoMuWBPSrOSSgS08CuhKQgC5bEtDVU3UI6IcPH+Lh4UHfvn358MMPadKkCd988w07d+4kLCysTKO5uPHgwQMOHjzIxIkTMTMzo2bNmnTq1ImVK1dy7969KrtOWgK6bElAv5pDArr0JKArAQnosiUBXT1V5YDW6XR4eXlhY2ND3bp1qVu3LjY2Nnh6ehIaGkpCQsJLiec\/hvSpU6dwdnamadOm1KlTh379+nHy5El0Ol1F77LnJgFdtiSgX80hAV16EtCVgAR02ZKArp6qakArlUp27NhBu3bteOutt2jXrh3r1q0jODiYuLi4lx7OT46EhATCwsLYuXMn\/fr1o2bNmjRu3JjVq1dXuQiVgC5bEtCv5pCALj0J6EpAArpsSUBXT1UxoB89esSSJUuoV68eb731FnZ2dvj4+BAXF\/envhhYHiMxMZH4+Hhu3LjB1KlTqVOnDu+\/\/z7Ozs7ExMRU9C4sNQnosiUB\/WoOCejSk4CuBCSgy5YEdPVUlQLaYDAQFRWFq6srn3zyCQ0bNsTd3Z179+5VeDCXNKKjo1m7di2ff\/45NWvWZPTo0dy6datKLOmQgC5bEtCv5pCALj0J6EpAArpsSUBXT1UloI1GI9HR0cydO5fGjRvTqlUrli9fTnh4eKU56\/ysZR0eHh506NCBTz\/9lPHjxxMUFFTpv1woAV22JKBfzSEBXXoS0JWABHTZkoCunqpKQCckJDBv3jyaNGlCx44d2bRpE\/fv36\/wMH6eERsby5EjR+jfvz8NGjRgwoQJBAcHV+qIloAuWxLQr+aQgC49CehKQAK6bElAV09VIaCTk5OZN28eDRo0oEuXLmzZsqXSL9soaTnHoUOHGDhwIPXr12fixImEh4dX9C4ulgR02ZKAfjWHBHTpSUBXAhLQZUsCunqq7AGtVCr5+eefqVevHs2aNWPlypVV7szzH0dUVBTbt2+nU6dO\/O1vf+Onn36qtHEqAV22JKBfzSEBXXoS0JWABHTZkoCunipzQOv1eg4ePEjr1q355JNPmDdvHuHh4RUewGUxIiIi2LBhA23btqV+\/fps3LixUn6pUAK6bElAv5pDArr0JKArAQnosiUBXT1V5oD29fXF0tKSGjVqMG3aNCIjIys8fMtyREdH4+7uTt26dWnZsiWHDx+u6F1ehAR02ZKAfjWHBHTpSUBXApUpoDUaDdu3b2fy5Mn4+fmVyWsajUY0Go3pC0je3t6MHz+e7du3o9FoymQbT5KArp4qY0AbjUYSEhJwc3OjXr16jBo1iuvXr1d48JbHCAkJwdHRkRo1avD1118TFhaG0Wis6I\/A5HkCWqFQEBISgo+PDz4+Ply7do07d+4QGxtLVlYWer2+zOeXkJDA0qVL+emnn4iKiuL48ePY29tz8ODBZ\/6s0WhEq9Wi0WgwGAx\/eg7P8\/ddAvrp40zYr3icW8LGYwtMY9OJn9h5aTkngjfjFbOHqw8Pltn2ToVsZZq7I9+5fc2RG+sloCsRCehKoDIFdMFcyjI+MzMzuXjxIoGBgQBcunQJOzs7Nm3aJAEtSq0yBnR+fj5Hjx6lS5cudOjQgV27dr3Q3QULbmoSGxtLfHw8CQkJxMbGEhsbWyG3+\/7jOHHiBD179qRhw4asXbsWpVJZ0R+ByfMEtLe3N3369KFOnTo0adKE5s2b07hxYxo0aICDgwP+\/v5lHo3h4eEMHz6cQYMGERwczMGDB7GysmLPnj3P\/FmVSsX169fx8vIiMzPzT8\/hef6+S0A\/fczf6EKDZp\/wwYc1qdf479Rr\/Hc+bfQ3Pmn0d740N2PGkrGcuLW5zLZ3yH8dg+0t6DOsK7u8VkhAVyIS0JVASQFtNBpRq9Xk5uai1WpRq9UoFApUKpXp7I\/BYECtVqNSqVCr1WRkZJCdnV3o5zMyMlAoFOh0uiJnjXQ6HVlZWSiVSvLz8wv9gdXpdHXpXiEAACAASURBVOTl5aFWq00\/p9fryc\/PJz8\/33SmpuAMSW5uLnl5eabt6HQ6fHx8GDt2LBs3bjTNMTc3t9BrPjnP7OzsQmeA9Hq96ecMBgO5ublkZGQU+0ddArp6qmwBbTAYuHv3LuPHj6dJkybMmDGDkJCQF7rWc0JCAjdu3GD\/\/v1cuHCBW7dusXv3bnbu3EloaGiFB3RcXBwrVqygSZMmDB48GF9f33I5W\/tnPG9A29raMm3aNC5evMi1a9e4ePEiCxYs4IsvvsDW1pZbt24V+tujUqlISUkhJyfH9Dr5+fk8fPiQlJSUQn\/PCmg0GtLT08nOzi4S0BqNhpycnEInEQq2l5OTY3o9g8FAZGQks2fPZvr06dy9e9f0\/+YV\/N1MT08nNTWV\/Pz8p\/59VygU5OTkFPn7XhIJ6OIDum3nlnw79V9sPrWQzacWsvHEAhZunU6ff3WjeetGzF0ziWvJv5+FvvbwIBcjdnLy9hbO39+BT+L+Qq95Lfkgl2P3cvL2Fk7e3sKVuL0S0FWABHQlUFJAa7VaDh48yKxZs9i9ezdr1qzBwcGBuXPncvXqVfLz88nMzOTw4cMsXboUd3d3HBwc8PT0JC8vj+vXr7No0SLs7e1xcHBgzZo13L17F71ej16vJz4+nh07djB27FgmTZrEgQMHcHJyMv2BDQwM5Mcff+TgwYOmP9pxcXGsWbOGNWvWEBcXB0BUVBSrV6\/GwcEBJycn1q1bR0REBDdv3sTR0ZEGDRrQu3dvtm\/fzpEjR5gzZw4HDx5Eo9GQnZ2Nt7c3P\/30E\/b29jg6OrJp0yYiIiLQ6\/XExcWxfft2PD09uXjxIm5ubtjZ2TFv3jwCAgKKnMWWgK6eKltAZ2dns337dtq2bUuvXr04evToC519LgjUw4cP4+DgwNKlS\/H29mbJkiUsXryYoKCgCg\/opKQkrl+\/jr29Pc2aNWPx4sUkJydX9EcBPH9AF\/ydyc\/PN\/3varWaJUuW0LVrV\/bv309ERATr169n5cqVLFq0CBcXF86ePYtCoeDSpUu4uroybNgwrK2tWbhwoSm6dTodd+\/eZdWqVdjZ2TFjxgw2btxI\/\/79TQF9\/vx5XFxcOH36NAAZGRkcO3aM\/9\/encflmC6OH59zvufMnPnNmP2cGWcWE8YyMzFI9kQb7aMkErImikSLMI82Q9RQdkVS2iwh2SslVLRJ076TxlaGoe3z+8O352ubmcqjHuZ6v17XP6qnp+fO3ae7674uOzs7LCwssLW15ejRoxQWFvLjjz\/Ss2dPvvnmG+bNm8f58+e5e\/cuiYmJuLm5MXHiRExMTHBwcODs2bM0NDQ8dn63tLTExsaGvXv3MmfOHBHQzxnQQzWVWL5h\/lMR7BXsjGL\/Hphbf09MYRDx5aHsSdqAZP08xkzRQlVnAKOMVViydg5HsrdztjKC43k78Qx0xHSWLqo6AxihO5CpdmPZEuVBXMluEdByTAS0HPijgG56W4cOHRg5ciQSiYRFixYxaNAg9PT0OHXqFBUVFTg7O9O9e3dUVFSYN28eJ0+eJDo6GmNjYwwNDXFzc8PJyYkRI0ZgZWXFpUuXKC0txc3NjWHDhjF9+nR8fHywt7fnm2++kZ5gn3USTU1NxcDAQPqDID8\/Hzs7O4YPH87MmTMZO3YsioqKLF68mKSkJFxcXOjbty8LFiwgNTWVLVu20L17dxwcHLhz5w4HDhzA0NBQ+jzt7e0ZMWIECxYsIDc3l9TUVCZMmICSkhILFixg27ZtSCQStLS0kEgklJeXP\/aaiYB+NclTQDc2NpKTk8O0adPo2bMny5cvJzMzUyZXeB8N6EuXLknH88a5rEZRURH+\/v4MHDgQPT094uPj5WJVDlkEdENDAx4eHvTu3Ztdu3Zx\/vx5TExM6NKlC7q6uvj5+XH69Gn279+PiYkJU6ZMwc\/PD4lEgqqqKgsWLCAvL4+0tDQsLS0ZPHiwNJ5nzJjBl19+KT1vent78\/HHH7NixQpu3brFjh070NHRwczMjNmzZ6OoqMiAAQPw8\/MjODgYTU1NdHV1CQ4OpqSkhPj4eGbMmIGFhQWbN29mxYoVDBs2jKlTp5KVlfXY+X3WrFls2LABR0dHFBUVRUC\/oID+cfsiuikqMHneGOJKdrM3eQPmNt+jNEwRC1tjHFdbovH9UL7u+xVLfeYSVxLMlkPuqBkMZqTeIBZ7zcbWdSrDRw\/AdKYuYYk+IqDlmAhoOdCcgO7YsSNLly6lqKiImzdvsnXrVpSVlVmzZo00oEeMGIGvry+lpaVcu3YNR0dH+vbty\/bt26mpqeHWrVu4urrSv39\/du7cyfnz55k4cSIWFhakpKRw9+5dMjMzGT9+fIsC2tfXF0VFRTw9PamqqiI1NRU3NzfWrFlDUVERISEhjB49mu3btwP\/d8JzcHDg6tWrODs7o6qqSnh4ODU1Ndy8eRNHR0f69+\/P3r17SU1NxdDQkOHDhxMZGUl1dTXFxcVYWVmhq6tLfHz8Y6+ZCOhXkzwFdG1tLUFBQXz33XdoaGiwb98+mcxRfjKgExMT2bx5M76+voSFhbFu3Tr27NlDXl6e9GPOnDmDj48PISEh5ObmkpOTQ3h4OGZmZowaNQqJREJsbKzM5lCXl5dz9uxZJk+eTM+ePVm5ciWVlZXtfUieO6Dv3LnDvn37UFNTQ19fn8TERJKTkzExMUFLS4sDBw5w7949ioqKcHNzw8rKioSEBOk0jWXLlqGiokJwcDAhISGoq6uzZMkSKioqqKmpISoqihEjRjwzoHNzc7G2tmbq1KmcP3+eX375hYiICObOnUtwcDBJSUnMnDmT+fPnU1RUxP3799m4cSNmZmZERUVJp8W5u7vTpUsXvLy8SEhIwNzcHEtLS9LS0rh37x7nzp1DX19fBPRzBvQA1d7YulpwIHULB1K3EJbow\/JNtgzWUEKxf3c8\/BaSUBHK1igPjCy0mOU4nv0XNnG6dDcBJzzRMlZBb4IaIQlriTjny+pAJ7YfW0lcSTBHsrcz08EUFa3+eAc7E3bWRwS0nBIBLQeaE9CdO3dmy5Yt0hPZ8ePHGTlyJE5OTvz88884OzszdepUkpKSaGhooLKykvnz56Ovr8+ZM2ekjxcZGcmgQYOQSCScPHkSMzMz7O3tKSoqAh7+WXrBggXNDujExESWLl3KwIEDiYyMfObXFxoa+rsBXVxcjJ2dHSYmJiQnJz\/1PN3d3blw4QIGBgaYmJhI7\/z\/o0gWAf1qkqeAbvp\/oqCggIeHh8zWfH4yoKOjozExMWHMmDFs27aN8ePHY2pqSmxsrPRj3Nzc+Pbbb1m1ahURERGoqanRrVs3Zs2ahYWFBQoKCmhoaLB\/\/36ZXYUuLCzEz8+PPn36YGRkREZGRruvyNHSgFZTU+O11157agwZMoTDhw9TV1cnDehFixZRVVVFfX096enpmJubo6mpiZeXF0FBQQQEBGBhYUH\/\/v1Zt24dmzdvRltbmw0bNvDrr7\/S0NBAeno6RkZGTwW0m5sb58+fx9LSEolEQllZ2VPPNysr67GAvnHjBnZ2dgwePBgPDw+CgoIICgrC2toaBQUF7O3tiYqKwsLC4rHHvHHjBtbW1iKgnzOgO3X971PfN\/\/85z\/oN1QRz0AnYkuCiS0O5gdfGwaM+A4Dcw2cvGYj2TCPBe7TUB7em8Fq\/dh80J2zlRGczA9kd\/xPrAlazGJvKzTGDKPP4G9w22xL8OmfREDLKRHQcqA5Ad29e3eCgoKkP6QyMjIYP348NjY2XLx4EWdnZ2bMmEFqaioA165dw97enunTpz+2\/W5aWhrjxo3D1taWyMhI5s6di4+PD9evXwce3hRjb2\/\/uwHd2NjIxYsXpQEdHx\/P4sWLGTduHGlpac\/8+v4ooFNTU5kzZw4LFy6kuLhY+jFHjx5FVVWVxYsXEx8fj4GBAePGjZN+LSKg\/3rkKaBTUlIwNDRk0KBB7N69W2Zh+nsBbWRkRHh4ONbW1ujq6hIREUFpaSnZ2dlYWVmhrq5OaGgovr6+jB07Fl9fX\/Ly8igoKMDHxwctLS1cXV1lurnLsWPH0NfXl\/5l6EWsqNMSLQ1oU1NTpk2bRnBwMPv37+fw4cOkpqZKb8AGpAG9ePFibt26xYMHDzh\/\/jz6+vq88847fPrpp3Tq1Ek6hg0bhr+\/P1u2bGH69OkcPHhQejPg5cuXH7uJsCmgly9fTkxMDHPnzsXX11d6Ln7UkwF9+fJlTE1Neeutt+jYseNjz+Grr77CxcWFgIAAzM3NWb9+PTdu3ADg7t27j53f\/4gI6D+4Aj28N\/NdphB5YRMRZ31x9rZikFpfzOcasjdpA4lXwzlVGMQC92l8+uUnvPfhO3z82Ud88vm\/+eTzf\/OZwifomo5k8wF3PAOd6DvkW959vwO9+ndn9NjhfKvUnW+VuomAlnMioOVAcwK6S5cuj12BjomJQVNTkyVLlpCXl\/dUQN+5cweJRIKuri6xsbHSxwsNDaVPnz44OTlx4sQJJk+ejJ2dHYWFhcDDKxQ2NjbSE2xkZCR9+\/bF0dGR3377jYaGBs6fP4+Ojg4GBgYkJyfj6enJoEGDCA0NBR7OI7x58yZlZWXcvn37T6dwLFu2DDMzM1JSUqTPMzg4mF69erFkyRISEhJEQAtyE9D19fWsWbMGBQUFZs6cKdN1n\/8ooI8ePYq\/vz+TJ0\/Gx8eHnJwcIiIiGDVqFLa2tsTExLBo0SL09fVZtWoVYWFhhIaG8uOPP6KhocGMGTM4e\/aszJ5rWloazs7O9OzZE2dn5+daXk0WZDEH+knPCuikpCQmTpyIlZUVeXl5wMM58U03ZtfW1hISEoKOjg4+Pj7SK9AXL17E0NDwqYB2d3cnIyMDGxsbnJ2dpRcS7t+\/T0VFBVevXiUtLe2xgL527Rq2trYYGRmRlJQkfb51dXXU1tZSX1\/PmTNnmDFjBq6urlRUVABQWVnJ7NmzRUA\/Z0A\/OQd6b9IGzOcaMHDEd7hsmk9scTAxhUEsXDGdoRpK\/OBjTUxhEGcrH86VTqgI5UxFGJGpm5m+aBxf9\/mKOUvNOZ4TwPHcAKbMN6KXcg8R0HJOBLQcaE5Af\/TRR9jY2HDp0iWqqqrw8vKiX79+rF+\/noqKiqcCumnB\/NGjR+Pr68uNGze4evUq9vb2dOvWDV9fX9LT05k9ezampqacPHmSqqoqDh06xIgRI6Qn2DNnzqCrq8ucOXMoKyvjl19+YevWrfTq1Uv6gyA6Ohp1dXXmzZtHcXEx5eXlrF+\/HolEIl3vVFtbGx8fH+7du\/dYQFdXV7Nx40Z0dHTw9\/fnxo0bVFRUYGNjw5dffsnGjRtJSUkRAS0jjY2N\/Prrr5SVlVFZWSldWaXJb7\/9Jp3nevfu3Xb\/s\/yj5CWgr169iqWlJQoKCnh5eVFUVNQmAR0bGyv9pXfOnDmcOXMGiUTC4MGD2bJli3Rpti+++IJ+\/foxfPhwVFVVUVVVRUdHRzodSpbPdefOnSgrK2NmZsbPP\/\/crselLQK6vr6e7Oxspk+fjqamJpGRkdTU1HD58mX8\/f0JDAyksLCQ48ePo6+vz9y5c8nOzubq1ats3ryZ3r17P3MOdEVFBS4uLpibm3P48GHpKh9z5sxhy5YtJCUlYWVlxaxZs7h06RLV1dW4ublJj\/3169cpLCwkMDCQTZs2kZ2dzaVLl7C0tMTMzIy4uDiuX7\/O\/v37GTZsmAhoGQd0QkUYWw65o2E4hFHGKmw\/torTpbtZucOeIRr9MJ42msCYNRy5vJ114T+wwH0aPhESguK8MbMyYKimEj9uX8ThLD9890gYotGP\/37xH+YsNWfLIXcR0HJKBLQcaG5A6+npYWNjg7m5OSNHjsTKyoq0tLRnBnRDQwOZmZk4ODigra2Nubk548aNQ1NTE2dnZ7Kzs7l+\/TpbtmxBXV0dTU1NzMzM0NLSolu3bgwePJh9+\/ZRWVmJk5MTffv2xdTUlEWLFmFnZ8eQIUMwMTEhNTWVq1ev4unpiYqKCoaGhowfPx4NDQ1WrVpFZWUlmZmZTJo0icGDB+Pp6Ymrq6s0oH\/99VdSUlKYP38+o0ePxtzcnLFjx6Kuri59nk1zrkVAP7+Ghgby8vLw9PTE09OT3Nxc6Tq+dXV1XLhwgR9++IH169dz5coVEdDPEBsbi5qaGioqKuzdu1dmQfpnAR0XF0d6ejqLFy9m0qRJbN68mQkTJkh3Pzxz5gxTpkxBQ0OD9evXc+rUKeLi4oiLiyM+Pp60tDSZxn5FRQXHjx9n7NixjBgxgkOHDrXrcWmLgIaH898jIyOZOHEi2traTJs2TXrenDdvHnl5eRQXF7Ns2TIGDBiAoaEhkyZNQlVVlS+++EJ63nw0oO\/du8fx48exsLBAW1sbCwsLhg8fjoaGBocPH6ayshJPT09UVVUxMTHh4MGDnDt3Dmtra0aPHs3EiRMxMDCgc+fOmJmZkZmZSVVVFRs2bGDkyJGMGjUKc3NzdHV1UVBQEAEt44A+WxnByYJdLPa2opdyTyxsjYnK3Ma+lI3MXmyG0rBeqOoMZJSxCl2+7kT3Xp2RrLfhYMZWHDxn0aN3Z3oP6IGWkQojdAeipj+YHr06822\/bsx0HI+W0TAR0HJIBLQcaE5Ad+3aldWrV7Nnzx5WrlzJ7t27KSwspLa2ltu3b3P48GFCQ0OlS7o1LbBfWFhIREQErq6urF69mmPHjnHlyhXq6uqor6+nsrKSo0eP4ubmhqOjIwEBAQQHB7NlyxYyMjKoq6sjJyeHgIAAJBIJ\/v7+JCcnExYWRnBwMOXl5TQ2NlJZWcmRI0dYuXIlrq6u7Nmzh+LiYurq6rh\/\/z5Hjx7FyclJuprAihUrOHjwILW1tfz222\/k5uYSEhKCi4sLXl5eHD9+XPo8y8vL8fPzIyAgQHq3f9MOcJ6enmRkZDz2momA\/n2NjY3cvHmTDRs2oK6ujpeXF7dv36axsZHi4mIcHR3R09MjPDycX3\/9VQT0M\/j6+tKxY0fMzMw4f\/58mwZ0SUkJ27ZtY9y4cXz\/\/fcoKyuzdOlSSkpKpHGtra3Npk2byM\/Pp6ioiOPHj7Njxw5iY2MpLi6W6fNNS0vD3t6erl274unp2a7HpSUBXVBQQGhoKImJiU\/9FeZRTesoR0VFSUO7oaGBO3fukJmZyc6dO3FwcGDJkiWEhoZSUFAgncZRXFxMeHg4ixcvZsmSJezcuZOtW7dKz5txcXEsW7aMEydO0NjYyJ07d0hPT2fbtm0sXboUHx8fzp49K91YKisrCx8fH+zs7IiOjub+\/fvk5+ezZ88eJBIJTk5ObN26lUuXLj11fnd1dZXuJRAYGIivr+9T580niYB+9thx3BMnr9nsOLbqsX9PvBrO\/oubWLJ2Do5rLNmTtIGE8lAOpm\/Fd89y5i2fwsS5hlhLJuEbIeHozzs4cyWMA6mbcd+yAPO5hkyZb8QKv4UExXrhE76MZT7WeAU7s3Td3IfBLcMdDkVAPz8R0HKguTcRBgcHS4Oztrb2mTsRPrkrWNNugI\/u5PdkFDXtLHj37l1qa2upra3l3r170rVdmx7j3r17PHjw4Jmfr2kO4G+\/\/Sb92Ed3GWzapfDevXvcv3\/\/qd0NH\/0cTz7PpufXNAe76f2bHufJNWhlEdC3b98mPT2dy5cvc\/fu3VY9hjwGNDx87UpLS3F0dERdXZ19+\/ZJp9JoaGhIlyWTp3iG5w\/ou3fvkpaWxunTp6moqGjVDnp37tzB2dmZDh06YGdnJ\/Mrun8W0OXl5Zw4cQIzMzM++ugjRo4cSWRkJBUVFZSWlhIYGMiQIUPo0qWLdBWOppvbAgMDZb4deHFxMd7e3igoKGBra\/vYDXhtrSUB3XSuevQ8+kfv96xdBn9v99VH1dXV8euvvz62k2zTebPpYx+9+bLpMe\/evcuDBw8ee7xHdyls+pim8+6j5+\/fO783PYcnz++\/py0Curq6mrNnz5KcnNzq82xbB3R8eSixxcFP7SbYFNFxpbuJKQom4ZG3J14JJ65kN6cKdxFXupszV8If+5j48lBOFQYRUxREQkUYiVfDOVMRRnx56MPPVxJMbEkwZ66EiYCWIyKg5UBzA\/rJtwnPJouArqioQCKR0LFjRzp37oxEIiEnJ+cPr1Y9SV4Dusm5c+cwMDBg\/Pjx0quakyZN+t3VVNrb8wb0zZs32bhxIz179uT9999n3LhxHD9+vEU\/uIuLi5k5cyadOnVi9erVMo3R5gR0RUUFOTk5uLq68vnnnzNz5kxycnIee4yMjAx++ukn+vbty\/vvv4++vj7h4eEyj\/2msWvXLpSUlDA3Nyc3N7dVx0YWWhLQwp9ri4AuKipi8uTJvP766ygrK+Pp6Ul2dnaLNuZp64B+1YcI6OYTAS0H\/iyg3d3dUVFRYf\/+\/e30DF8usg7opnU+33jjDQYPHoy3tzcFBQVcuXKFu3fvSq+KP0neA7qhoYHw8HAUFRV5++23GTFiBJGRka26MtsWZBnQTcf0b3\/7G59\/\/jlz5szh2LFjlJSUUF1d\/btXJtPS0jA2NqZfv34EBAS8kCCV1SgrK5P5FednjYMHD6KpqYm2tvZja863RGNjI\/fu3eP69evcvn37T68MP4sIaNlqy4B+ck1lJSUlfvrpJ5KTk7l69Sp3796lvr7+md8TIqBFQLcXEdBy4I8CurGxkZqaGqqqqv7wZhfh\/7yogH50fPLJJwwdOpQVK1Zw6tQp8vLyqKmpeSym5T2gAQoLC5k0aRIdOnRg1qxZ5OTkyN3UjSYvIqAfHf\/6179QVFTE2tqasLAw0tPTqaqqeuyvDtHR0QwaNAhtbW2OHz\/e7pEsDyMxMZGJEyfSu3dvgoODW3VsHjx4QHR0NFOmTGHOnDnS1\/\/69evN\/oVOBLRstWdAN40333yTwYMH4+7uztGjR\/n555+5ffv2Y98TIqBFQLcXEdByQEzTkK2mgP7vf\/\/L1KlT8fb2bvGQSCRoaWnxzjvv\/O7JvWm89957DB8+HAcHB4KDg0lPT6e6upply5bJdUDX1NSwYcMGhgwZgpKSEhoaGmzZsqVd57H+EYlEQocOHTA2Nm7VMXV3d2fs2LF8\/PHHf3pMX3\/9db755humTZuGj48Pp0+fprKyEn9\/f7p06YKZmZlMl4R7mUdmZiZz587lk08+YfXq1a06tg8ePODAgQMMHDhQGk69evVi1qxZbNiwgbi4OCorK\/\/wT\/sioGWrKaDV1NRYtWpVq\/7P\/dlYunQp\/fv3\/9P\/j6+99hrvvvsuQ4cOZf78+WzZsoXExESuX7\/Orl27RECLgG4XIqDlgAho2WoK6OaclGU5\/vGPf\/Df\/\/6XkSNH4uLigomJidwGdF1dHUeOHEFTU5PZs2dz6NAhLC0tGTduHKdOnWrRXO+2IpFI2vyYvvbaa7zzzjv07dsXS0tLxowZw7vvvivd4bO941UeRl5eHosWLeLtt99u9Q\/dJwP60dGhQwf69u2LmZkZ7u7unDhxgqqqqqemTomAlq2mgG6P\/3N\/NP72t7\/x3nvvoaysjK2tLTNnzuSzzz4TAS0Cus2JgJYD8hLQdXV13L59m9u3b7foJg550xTQX375JY6OjtItyVsy\/Pz8GDduHO+\/\/36zT+zvvfcempqaeHh4cPToUWbPni2XAd3Y2EhmZiYWFhYYGBgQGxvL3bt32b9\/Pzo6OsybN4+CggK5m8ohkUh47733mDVrVquOaWBgIJaWlnz22Wct+qWoZ8+e2NjYsHv3bmxtbfnwww9FQLdhQD8aTu+88w5ff\/01Ojo6uLi4cObMGelfTF5kQDc0NFBTU8P9+\/ebdW6sr6\/nzp070vncrdHY2MiDBw+4ffu2dDfDttQU0GPGjCE0NLRV\/+f+bGzevJkRI0a0KKDfeustBg4ciIODg3SJVgUFhVcmoOPLQjiRt5OYoiASr4Y\/9fYzFWGcLAjkWG4AcaW7n\/k+IqDbhghoOSAvAZ2Tk8PcuXOxtbWVbu39MmqLOdCPjqYbXi5cuEBVVZV0ub0ffvhBLgO6rKyM5cuXo6+vT1BQkHS952vXruHl5YWWlhbe3t5cv369vZ\/qY170HOhHh6KiIm5ubsTHx1NaWkpNTQ21tbWsX7+ejz\/+WAT07wT0u+++S6dOnVo8vvjiC\/7zn\/\/wxhtvNPsq5Jtvvsl\/\/vMfBgwYgEQiwcPDg969e7+QgK6pqcHd3Z2TJ08269xYUVGBh4cHNjY2XLhwoVWfs76+nsTERGxsbPD29qaqqqpVj9Na8jAHumm88cYbKCsrs3LlSpKTk7l27Rq\/\/vor9fX1BAcHv5ApHPHloeyK9WL9vuVEZW577G1RmdtYv285u2LWEF8WIv33hPJQQhLWsmG\/CwdauWbzjuOrmDxvDBJfG2KLg596+6GMbcxdNonvJ2uyYZ\/LY8vliYBuWyKg5YC8BPSlS5eYMGECkydPbvZyVMnJydIlsuTFiw7o119\/nSlTprB27VqKi4t\/9zHk8SbCu3fvsmfPHrS1tXFycqKiouKxtbibrkwbGhrK3VSOFx3Qn376KdbW1pw\/f57ffvvtqSvwDQ0NIqD\/JKDb48\/5n3\/+OTY2NkgkEhQVFV9IQFdXV2Nvb09UVFSzzo2lpaU4ODgwceJEzp4926rPWV9fT0xMDBMnTsTFxUW6iVRbae+A\/uc\/\/0nv3r358ccf\/3AJ0Rd1E+GZK2FYLDDm7Xf+HzaSyY+twTzPZQpvv\/P\/UDccwu6EtdJ\/35u8EaMpWozQGci2wyta9Xm3RnlgZKGFg+dMYoqCnnr7gbQtTF0wFjX9wfwUsvSZ61GLgG4bIqDlQHsFdENDA3fv3uX69evU1NSQkZHxWEA3LepfXV1NZWUl165do6amhrq6OhoaGrh37x5r1qzBzMyM48ePS\/\/MWFdXx507d7h27RqVlZXSj2mrKQGyDOj\/\/ve\/0itdSkpKLF26lIsXLzbrMeQxoOvrQ+msxAAAHlZJREFU67l9+zZVVVXP\/LNwfX091dXVXLt2jTt37rT5n43\/iCwD+vXXX+eDDz6gU6dOjB8\/nqioKG7cuPGn36MbN258KQL64sWLLF++nB9++IGUlJQ\/ff+srCzWr1\/PDz\/8QExMTKsDeunSpa36nmnOFI6mqHrvvffo2rUrU6ZM4fDhw9y4cQN4sVM4ngzoPzo3Nm1U1BTQcXFx3Lx5U\/o+j74+TRuhNJ0vf\/nlF+mSbXV1dU8FdENDA7\/++is3btyQTu14csMVWWnLgP773\/\/OW2+9xccff8zgwYORSCRcuHCB+\/fv\/+ljvMhVONaGLWPAiO8wn2tIdJY\/ZysjOJ67k6kLjHnnvbf5us9XrNzhIH3\/jftdGDjiO0xn6RJ92Z\/Eq+GcLg3hWE4A0Ze3E1MUJN1EJfFKOLHFwZzMD+RUwS6O5QRwsmAXWw65PxbQTY9xJHs7R7K3szd5owhoOSECWg60dUA3Njby22+\/kZKSgkQiYezYsSxevJj169czevRoaUBXV1dz7NgxHBwcMDQ0RE9PD3t7e2JiYrh58ybHjx9HS0uLzz77DC0tLUJCQrh+\/Trx8fH88MMPGBsbo6uri42NDdHR0W22uoMsArqqqoodO3Ywbdo0li9f\/thcy+aSx4B+mT1vQFdXV7N\/\/34sLS1ZtGgRR48e5fr16y0KvpcloBMSEp7agOXPgnvBggUYGRmxd+\/eVgf0i5gD\/eabb9KlSxfU1NSYO3cue\/bs4cqVK216E+GTAX3nzh1OnDiBo6MjY8aMkZ4bT548SU1NjTSgR48ezdy5c5kwYQIaGhrY2dkRHx9PdXU1jY2NlJWVcfDgQZYuXYquri4GBgb8+OOPXLp0idra2scCury8nIyMDFxdXZk2bRo\/\/PADq1atIjQ0lPLycpn\/stsWAX3lyhV+\/PFHjIyMWL16Nenp6dy7d69FvxC8yICOvLgZI4tRDNcegN+RHzlbGUHgqTVom6gySK0vg9X7YbVkIqfLQogvD2Xpurn06t+dhSumc7o0hF0xXtivmoWBuQbqhkOYvmgcP+1eQlTmNk4V7mJN0GIsbI2ZOMcQzTHDWOA+jbWhS6UBfSJvJ+HnfFnsbYWqzkA0jYZj6zYNHdORqOoMFAHdzkRAy4G2DuiGhgaysrKwtLRkyJAhzJ8\/n+XLl2NiYkKnTp2YPHkyly9f5vTp00ycOJEJEyawdetWfvrpJ7S0tDA3NyclJYVLly4xffp0Bg8ezPLly0lOTiY5ORlLS0sMDAzw9vbG19cXLS0t9PX1SUxMfOFfG8gmoB88eEBNTQ337t1r9Q8mEdCy9bwB3XST7K1bt1o9NWX79u18+eWXmJubk5qa2qLQLC8vp6CggPz8fIqLi8nNzSUnJ4eSkhLKy8spKysjPz+f\/Pz8pzZAKS8vp6ioiOzsbPLy8igvL3\/q8Zses6CggPj4+GcGdHl5OdnZ2WRkZFBQUCB9nOcJ6KysLKytrfn3v\/\/NypUrW\/W6PhnQb7zxBl27dsXQ0BBnZ2f2799PSUnJY9teP6mtAvry5cucP3+eqVOnYmJiwoYNG\/D29kZLSwtTU1OSkpKkAd2pUycGDBjA\/PnzWbRoEerq6kyePJlz587x4MED1q9fz3fffceUKVNYt24dCxYsYOjQoUgkEq5du\/ZYQKekpODo6IiGhgYrVqxg9+7dLF68mGnTprFv375Wb4X9e9oioGtra7l58ybV1dWtPs++yIBOKA\/F0mkC3Xt1ZvnG+SRUhLEqwBGN74exwGM65tbfYzJDm8jUzRzO8mf2YjNGGauwfu9ygk\/\/hKG5Jr2Ue2A2x4C5y8xR1RlAN0UFFnvP5lhuAEvWzqHnd13p8nUnRo8djoffQnz3SKQBHZq4jinzjfimXzf0zdSZ5WTG95O16PL1l\/RX6S0Cup2JgJYDbR3QtbW1REREMGbMGDw9Pbl27RoPHjzAz8+PHj16SAM6NzeXAwcOkJKSwv3797l\/\/z4+Pj7o6emxZ88ebt++zapVq7CwsCAlJYX6+npKSkqIiori9OnT0qssW7duZeTIkfj7+\/\/hD0BZkUVAy4IIaNl63oCWhUOHDqGsrIyenh4nT55sUWjm5+ezceNGFi5ciJOTE+bm5piamuLl5UVKSgoRERFYWVkxa9Ys\/P39uXTpEhUVFRQUFHDo0CEcHBwYN24cVlZWbN++ndTUVEpLSykrKyMpKQkvLy+mTJmCk5MTGzduRE9PTxrQJSUlJCcns2nTJiwsLPj++++xtLQkMDCQnJyc5wroc+fOMWnSJL799lt27tzZqtf1wYMHHD58GBMTEwwNDXF1dSUyMpKioqJm\/7LTlgFdUFBAVFQU58+f5+7du9Jzo6amJrt376awsBAHBwd69erFmjVrqKmpobq6Gj8\/PywsLAgPD6e4uJh58+ZhZmZGVlYWDQ0NlJeX4+zszIQJE4iLi3ssoBMSErC2tkZfX59jx45RX1\/PL7\/8wsWLF8nJyZF55LZFQMvCi95IxWPbQgaM+I55LlOIuuTHwh9nMHbaaPyO\/MjCFdMZZazCloPuBMV6oTdBjXEzddmXshHXzbYoq\/TCcvEEoi75caYijI37Xeiv0ovxs\/WITNvMkrVz6Df0W8znGrL\/wiYSr4Y\/Ngfae\/cSBqh+h+74kUScX09CRSjbDq9giEY\/vhv4tQjodiYCWg60dUA\/ePAAf39\/DA0N2b17t\/QH1Pnz5zEwMJBO4Xjw4AHp6en4+fnh7u7OjBkz6NOnD0pKSgQEBHDjxo3HAhoexvnPP\/9MYGAgHh4ezJ49G2VlZXr06MHatWtlfpXkWURAv5rkIaCTk5MxNDRkwIABBAcHtyg0s7OzmTFjBh9++CEqKipMnToVDQ0NFBUV0dTUZNasWSxYsABNTU2MjY2JjIykuLgYHx8flJWVUVVVxdLSEiMjI\/r27YuTkxOZmZlcuHABOzs7+vXrh4mJCba2thgaGvLpp59iaGhIXFwcZ86cwcrKCjU1NaytrXFyckJdXZ2hQ4eyY8cOkpOTWx3Q0dHRaGtro6GhQUxMTKte14aGBiorK0lLSyMvL69Vy7a15RSO2tpaMjIy8PPzw8PDg5kzZ9KnTx8UFRXZsmULubm5ODg4oKurS3R0NPDw\/oLo6GgmTpyIl5cX+\/fvR1NTE1VVVVxcXFi9ejUrV67EyMiIoUOHEhoa+lhAFxYWsnHjRr799lv69evHokWLOH78eLPm7reGCOiHY\/fpnxgzWYsJVvqs37uc8ZZ6WNgacyhjG15BixllrMIyH2u8gp0ZpqXELAdTjufuxGrJRLp+3YllPtYkVDy8AfFA2hb0J6qjYTgEv+gVLFk7B93xI3DbsoDYoocrbjwa0Cv8F6E0TBELW2NO5O3kbGUE+1I2YjpLj2Fa\/UVAtzMR0HKgvQJ6zJgxRERESH9QPboKR1paGvv27WPkyJH0798fBwcHNm7cyPTp0xkxYsQzA\/r+\/fucPHkSfX19FBUVmTNnDhs3bsTKyooBAwaIgBaeizwEdFFRETNmzKBz5854e3u3KqB79OiBj48POTk5eHt707lzZwwMDDhx4gQZGRl4e3tjbGyMj48PBw4cQE9PD21tbQ4cOEBeXh5nzpxh7ty5TJ8+nZiYGHbs2CEN43PnzpGTk4Ovry9ff\/01hoaGnDx5krCwMKZNm8bKlStJT0+nsLCQAwcOYGJiwuzZszl48GCrAzo4OBhlZWUmTJhAdnZ2q17XxsZG6Wittgro9PR0Dh8+jJaWFn379sXOzo7169dLp7M9GtBmZmbSqWuNjY2cPHkSY2Njli1bhr+\/PwMHDuSrr77C0NCQ8ePHM378eIyNjZkzZw6xsbFP3URYU1NDUlISzs7OfPPNN3z44Yd8\/\/33nD59+qWcAy0LLzqgj+XsYPL8MQzVUmKGgymaY4ZhLZnEyfxAQhLWYjpTF4sFY5nvaoH2OFU8\/BYSV7obqyUT+erbL3HZNF\/6WMdzAxg3U4dvlbrjttWOJWvnYDx1FD+FLJGG8JMBrTKqP3OXmXOyIFAa4eImQvkgAloOtHVA19XVsW\/fPszNzQkICJCeHCMjI1FWVmby5MmcOnUKiUTCgAED8PT05NatW9Ln2bNnz2cG9PXr1\/H29mbgwIHY29tLl7aTSCR8+umnIqCF5yIPAV1TU4OTkxMdOnRg0aJFlJSUtCigLS0t0dHR4dixY1RUVBAWFsawYcOwsbEhLy+PoqIidu\/ezeTJk1m1ahVbt25lwIABzJo1i59\/\/lk6FWTlypXo6enh5+fH2rVrGTJkCC4uLuTl5VFRUSENvDFjxnDw4EFWrFjB999\/j6enJ6dPn+bcuXNERkZiYmKCnp4e27dvb1VAl5aWsnbtWjp37tzuOwC2VUDHx8ezYsUKBg8ejIeHh3TtdwcHBzp37vxYQKurq0vPQbW1tRw4cAAjIyM8PDwICAhg6NChWFtbc\/Xq1ac+5x8tY9fY2MitW7dYt24dI0eOZMWKFc98jOchAvrhiCkKwnntHFR1BzJSbxCjjFVw32pHXMlujuUEMG3hWFRGK6NlrILx1FHsOL6KM1fC+XG7PSN0B7LY24rTpbsfXs1OWIu64RBURimzYZ\/L\/wb06MdC+NGAXhu6jEFqfTGzMuBYTsDDx4hfi7rBEDGFQw6IgJYD7XETYWpqKnPnzsXJyYnLly9z7do1PD09pTcRnjx5EmdnZ7S1tdm5cydXrlzhzJkzmJiY0KVLF1xdXcnNzcXT0xMdHR327dtHeXk5K1euRFNTk7Vr11JUVMSFCxcwNzenY8eO2NnZUVBQ8MKXRhMB\/WqSh4AGWL16NR988AFTpkzh4sWLLQro2bNnY2pqSmJiIhUVFURGRqKhocGCBQsoKCigpKSEPXv2MG3aNFatWsW2bdsYNGgQtra20lgvLS1l3bp1DBkyBA8PD7y9vVFRUWHNmjXSmwJPnz6NkZGRNIgdHR354osveP\/99\/nkk0\/o2LEjHTt2REFBAXNzc3bt2tWqgM7MzMTZ2ZkvvvgCNze3dj0ubRXQcXFxuLq6oqenx44dOygvLycxMRETExO++OILli1bxtmzZ7G3t6dbt24sX76cyspKysrKWLt2LUZGRvj5+XHhwgUsLCzQ19cnJiaGGzdukJmZSUBAAIcPH+bmzZvSgF6+fDkJCQn4+\/sTFRXFrVu3uHfvHjExMZiYmDBnzhzy8vJk+jWLgH44EipC2XrYAw3DIXz08fuo6Q9m6yF3zlSEEVMYhNOa2Xz1rQIf\/Od9jCxGE3FuPWcrIwhJWPtwuseCsYSd9eVI9g48\/Bai2L87RhajCE1c96cBHRTrhcl0bQwmqrPj2CqOZG9nbehSlIf3FgEtB0RAy4H2WMbu6tWrrFixgoEDB6KlpYWenh4qKip89dVXTJ48mdTUVPbt24eqqipKSkqMHTsWdXV1zM3NUVdXR1FRkfXr17Nz504GDBjAsGHDCAgIICwsDD09Pb755ht0dXVRU1Nj2rRp6Ovr06VLFzw8PGR+peRJIqBfTfIS0CdOnGD48OGMGDGCyMjIFxrQERERaGtrM336dDIzM6moqCA3NxcPDw9pNG\/evBl1dXVcXV3Jz8+noqKCAwcOMHLkSMaMGcO+fftYvHgxmpqarF69mnPnzpGenk5aWhppaWnSVSVaE9CnTp1i\/PjxDB8+nP3797frcWnrKRwaGhp89913jBkzBg0NDczNzaVz2hcvXszMmTPp3bs3vXv3RltbG2NjYwYNGsSCBQvIysqirq5Oenw1NDQwMjJi0KBBfPfdd\/j6+nLr1q3HrkBfuHABd3d3Ro8ezbx583Bzc2PChAlMnDiR6OhocRPhCwroxKvh7E3egKG5Ov\/vrX+hN0GN8LO+nK18uFvhhn0uKA\/vjUL3z3FcbSm9Unw8dycL3KfRZ9DXDNPqj5r+EPoNVWSE7iDWBDlzPG\/nnwb0oYytSNbboDRMkX5DFdEcM4w+g7\/h884dGaLRTwR0OxMBLQfaYyOVxsZGbt68yZEjR1i2bBkSiYRjx44RHh5OUFAQlZWVXL16lYiICOzt7XFwcCA8PJz8\/HwOHTqEm5sbkZGR5OfnExoayqJFiwgODiYnJ4dDhw7h7OyMvb09QUFBFBUVcfLkSVxcXAgNDRUBLbSKvAR0aWkp06ZNo2vXrqxbt67Z0zhaE9BJSUnSm\/\/CwsIoKCjg9OnTzJw5E3V1dXbs2MHRo0cxMzNj6tSpxMbGkpWVxapVq6Rzaw8fPoyvry86Ojo4OjqSlJREbm4u+\/fv56effuLQoUMkJia2OKBLS0sJCgpi0KBBmJqacunSpXY9Li8yoH\/77TcOHDhAVlYW165do6qqir1792Jvb4+9vT1hYWHk5+cTFRWFm5sbO3fuJCAggPDwcCIjI5FIJNjb2xMcHExpaSl1dXXAw2kaxcXF7Ny5k4ULF+Lo6Eh4eDhXr16lvr6e3NxcAgMDOXLkCNXV1RQVFbFjxw7s7OywtLRk2bJlREdHSzeTkSUR0P83TuQFsjrQidnOZg\/jN3enNK4PZWxl6dq5zHe1ICjWSxq0iVfDOVW4C7\/oH7GWTGLKvDGs8FvIocxtnPnfTVS2HV6Bx7aFhCSs5cz\/3mi4N3kD7tvs2HLQnfiyEOJKdrPj2CpmO5sxfpYuy3ysWR3o9NTHiYBueyKg5UB7buXd0NBAfX09DQ0Nz7yBp2nHrdra2mbf4NPY2EhdXV2LPkaWREC\/muQloGtra1mxYgWdOnXC2tq6WTv9tTagL1++jL+\/P6qqqowcOZKZM2dibGzM0KFDcXJyIiUlhczMTJYuXYqSkhLa2tqMHz8eNTU1Pv\/8cwwNDYmJiSE+Pp558+ahoqLCuHHjmDRpEkpKSgwaNIjNmze3KqAvXbqEi4sLX3\/9Nfb29ly\/fr1dj8uLDOhnae65sbGxUbpD6+9NX2toaKC2trbZO7bW1tZy7949aYi\/CCKgZTcSKsKILw95bDvwlo74shDiy0Je+HMVAd18IqDlQHsG9KtIBPSrSV4CGiAhIQFtbW1UVFQIDw9vVnAWFhYSFBTEtm3byMrKoqKigqSkJNatW0doaCglJSWUlZVx7tw5du7cyeHDhyksLCQvL49Tp06xdu1abGxsWL58Ofv37ycjI4PS0lJKS0tJTU0lMDAQOzs77Ozs8Pf3x9fXl82bN5ORkUFJSQkXLlwgJCSERYsWYW5ujrOzM3v37iU7O5ucnBxCQ0PZvHkz586da9bXc+LECemSa+Hh4c3advlFauuAftWJgP5rDhHQzScCWg6IgJYtEdCvJnkK6Js3b2JjY0OXLl1YuXIlOTk5fxqcTbsJFhYWSncaLC0tpaCggKKiIsrLyykvL6e0tJSioiKKi4ulNwU2fWxOTg4FBQXP3KmwpKSE3NxccnNzKS4ufupzNX2+vLw8srOzyc\/Pp7S0VLoLYtP7l5aW\/unX0jSVQElJie+\/\/57U1NQXfnPwnxEBLVsioP+aQwR084mAlgMioGVLBPSrSZ4C+sGDB2zdupUePXqgo6PD4cOHm33j3aswLly4wMyZM+natSvLli2joqKivQ+JCGgZEwH91xwioJtPBLQcEAEtWyKgX03yFNCNjY1cvnyZiRMn8vXXX7Ny5UouX77c7mHbFqO4uJjg4GCGDh2KlpYWMTExzd5u+0USAS1bIqD\/mkMEdPOJgJYDIqBlSwT0q0meAhoefp9t2rSJ3r17o6Ojw6FDh5o1\/eFlHxcuXGDGjBl0794diURCWVlZex8KQAS0rImA\/msOEdDNJwJaDoiAli0R0K8meQvo+vp60tLSmDx5Mj169EAikZCVlSWdt\/wqjtLSUjZt2kSvXr3Q0tLixIkTL3QliJYQAS1bIqD\/mkMEdPOJgJYDIqBlSwT0q0neAhoebrARGBiIsrIyampq7N2795W+Cn3y5EkMDAz48ssvWbFiBb\/88kt7HwIpEdCyJQL6rzlEQDefCGg5IAJatkRAv5rkMaAbGxspKCjAwcEBBQUFpk6dSnJycruH7osYly5dwsbGho8++ghTU1MuXrzYLuu8\/x4R0LIlAvqvOURAN58IaDkgAlq2REC\/muQxoOHhVI4TJ06goaHBJ598wtKlSykoKGj34JXlKCoq4qeffqJr16707NmTXbt2ycWNg48SAS1bIqD\/mkMEdPOJgJYDIqBlSwT0q0leAxqgrq6Obdu2oaCgQJcuXfD19X1qreaXdZSVlRESEsKwYcN4\/\/338fDwkLt4BhHQsiYC+q85REA3nwhoOSACWrZEQL+a5DmgAW7fvo27uzv\/+c9\/UFRUZOPGjRQWFrZ7AD\/PKC4uJiQkhJEjR\/LRRx\/h5OTU7lt2\/x4R0LIlAvqvOURAN58IaDkgAlq2REC\/muQ9oAFKSkpYuHAhn332GZqamgQHB5Ofn9\/uIdzaeI6KisLU1JQvvviCyZMnk56e3t4v8e8SAS1bIqD\/mkMEdPOJgJYDIqBlSwT0q+llCGiA7OxsrK2tUVBQYNSoUezevfulmxNdUlLCsWPHMDc3R0FBgXHjxhEbG8v9+\/fb++X9XSKgZUsE9F9ziIBuPhHQckAEtGyJgH41vSwB3dDQQFZWFvPnz6dLly4MGTKETZs2kZOT81KsEV1WVkZoaCijRo1CQUEBc3NzEhIS5DqiQAS0rImA\/msOEdDNJwJaDoiAli0R0K+mlyWg4eFNhZmZmcybN4\/PP\/+c3r17s27dOnJzc9s9kP9oFBUVsX37dgYNGsQHH3yAqakpCQkJcn3luYkIaNkSAf3XHCKgm08EtBwQAS1bIqBfTS9TQMPD5e3y8\/Oxt7enY8eOfPLJJ9ja2pKamtruofyskZWVhbu7O926dePtt9\/G3Nyc1NRUuVxx41lEQMuWCOi\/5hAB3XwioOWACGjZEgH9anrZArrJ7du38fHxoVu3bvzzn\/9ERUWF4OBg8vLy2n2pu\/LycgoLCzl48CBjx47l3Xff5aOPPkIikcjtahu\/RwS0bImA\/msOEdDNJwJaDjQFdNP2uKmpqWI8xzh9+jQTJkyQi4B+++23WbhwYbu\/Jq\/CmDVr1ksZ0PBwSsfBgwfR1NTkgw8+oFOnTlhZWXHkyBHy8vLaZW50YWEh8fHxSCQSFBUVeffddxkwYAC7d+9+aa46P6opoCdMmMDp06fb\/fv1ZR9eXl5069btpQlow0kaBJzwFOM5x\/RFJnz08fsioJtBBLQcaAro1157TQwZDnkI6PZ+DV618bIGdJP8\/HxcXV3p06cP77\/\/PkpKSixbtoyjR4+Sl5fXZuEcGxuLp6cnI0aM4L333qN79+7Y2tqSlJTEgwcP2vtlapWmgG7v79FXbbwsAd3er9OrNkRA\/zkR0HKgrq6OAwcOMG\/ePDFkOFatWkVGRka7Hdfo6Oh2fw1etbFkyRISEhLa7Zg+r8bGRqqrqzl27BhWVlb06NGDd999l4EDB2Jvb09QUBApKSmUlJTINJpLS0tJT08nIiICiUSCqqoqHTp04LPPPmP8+PGEhYVRVVVFY2Nje79ErXb58mW8vLza\/Xv0VRsHDhyQ679IXLhwAXd393Z\/nV61ER0d3d6HVu6JgBYEQWhj9fX1XLt2jWPHjmFra8tXX33FG2+8QadOndDQ0GDevHn4+\/tz7tw5CgsLWzXFo7S0lNTUVEJCQnByckJPT4+vvvqKN998k88++4zp06ezb98+SktLqaura++XRBAE4aUiAloQBKGd1NfXU1VVxfnz59m8eTPa2tq88847vPXWW3z++ecoKiqirq7OrFmzWLNmDfv27SMxMfGZc1bPnz9PVFQUPj4+2NjYoK2tTZ8+fVBQUODdd9\/l7bffZtiwYXh6ehIXF8eVK1dEOAuCILSSCGhBEIR21tjYyP3796msrCQpKYl169ahpqbG22+\/zd\/\/\/nfeeOMNOnTowIcffsjHH39Mx44dnxqffPIJH330Ee+88w7\/+te\/+J\/\/+R\/+8Y9\/0K9fP1xcXIiNjaWiooJ79+7R0NDQ3l+yIAjCS00EtCAIgiAIgiC0gAhoQRAEQRAEQWgBEdCCIAiCIAiC0AIioAVBEARBEAShBURAC4IgCIIgCEILiIAWBEEQBEEQhBYQAS0IgiAIgiAILSACWhAEQRAEQRBaQAS0IAiCIAiCILSACGhBEARBEARBaAER0IIgCIIgCILQAiKgBUEQBEEQBKEFREALgiAIgiAIQguIgBYEQRAEQRCEFhABLQiCIAiCIAgtIAJaEARBEARBEFpABLQgCIIgCIIgtIAIaEEQBEEQBEFoARHQgiAIgiAIgtACIqAFQRAEQRAEoQVEQAuCIAiCIAhCC4iAFgRBEARBEIQWEAEtCIIgCIIgCC0gAloQBEEQBEEQWuD\/A2FKB\/aX0JDkAAAAAElFTkSuQmCC)","079fce4f":"==> As we see  have a better acccuracy just but adding more data ","70d8629b":"# X and y","ef85950d":"## pipe5:  GaussianNB","4f262d9c":"# Phase 2: Initial Preprocess and Clean Data","044083fb":"({'XGB__learning_rate': 0.3, 'XGB__n_estimators': 100},\n {'XGB__learning_rate': 0.3, 'XGB__n_estimators': 100},\n 0.8454971065622523)","9bac99fc":"# Train our best Model from previous steps :","b01b9ef7":"\n\nFinally, it is time for you to push your first model to production. It is a random forest classifier which you will use as a baseline, while you are still working to develop a better alternative. You have access to the data split in training test with their usual names, X_train, X_test, y_train and y_test, as well as to the modules RandomForestClassifier() and pickle, whose methods .load() and .dump() you will need for this exercise.","8ce3f54f":"we will add data only for training , test data will kept untouched ","8bd2796f":"## Pipe8 :Catboost","48cd5996":"## Plot History1","9342eb25":"**this new architecture is overfitting becasue we have a complex model and small data**","7c254bd7":"## pipe6 :  AdaBoostClassifier\/RandomForestClassifier","991651d6":"##  Pipe2 :XGB","d99c10d5":"{'KNN__n_neighbors': 50}","1d849fce":"## Stack 3","1059eb08":"# Phase3 :Transformation","b12a9f52":"## Plot History","09ca0c50":"# Preprocess Pipe \nTo combine the preprocessing steps specified in columntransformer with the model, we use a pipe externally. The following is its visual representation:\n![image.png](attachment:image.png)\nColumntransformer complements the pipeline well when we need to perform different operations on different subsets of columns.","a15d3dfb":"# Step 2 find the best model in iterative way \n## Pipeline 1 : RandomForest Classifer","e93c01aa":"# Final Evaluation ","a477150b":"# Data Centric Approch \n## Balance the dataset with synthetic samples (SMOTE)\nIn addition to being extremely small, our training dataset has the unbalanced target  variable, which can undermine some models' predictability. We will perform an oversampling, which consists of creating new samples to increase the 0 minority class. For this we will use the SMOTE technique.\n\nSMOTE (Synthetic Minority Oversampling TEchnique) consists of synthesizing elements for the minority class, based on those that already exist. It works randomly picingk a point from the minority class and computing the k-nearest neighbors for this point. The synthetic points are added between the chosen point and its neighbor\n\n","92a7ba1e":"# Define\/Compile the model","a2c84010":"### Explain Stacking :","6aadb643":"{'rf__n_estimators': 100}","da302786":"## Complet Evaluation","0b7df421":"# Prepare Data again ","d0b0e31a":"**AS we see i find that rondom forest really perfom well .\nIt will be slected**\n# Final Phase : train our model in all data wihout CV, evaluate it again and save it  ","3a82a49c":"# Classification \n\nWe have a classification Problem :\n","18390d4d":"# Phase 1:Load Data ","6318a739":"\n## Training our Deep learning\nWe can now train our model. First, we configure our optimizer (Adam), our loss function, and our precision metric. Then we compile the model and practice!\n"}}