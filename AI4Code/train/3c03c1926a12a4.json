{"cell_type":{"65a0d406":"code","341b5278":"code","4e6bc14e":"code","e5e03078":"code","7b1ce6c4":"code","4780f6f8":"code","d1cdf1a5":"code","7c21a04b":"code","f0fcc34d":"code","ed5b1c73":"code","45f06f12":"code","47381fc2":"code","9e5b84cc":"code","013b5572":"code","0ff77ea0":"code","1eb9d791":"code","04f3e42a":"code","9f6d9d15":"code","a7812fe1":"code","d5ff5e81":"code","63e15736":"code","5f241860":"code","5e16ae79":"markdown","da3fd207":"markdown","9573b2dd":"markdown","fd8df4d0":"markdown","49b08a9e":"markdown","f6e1f673":"markdown"},"source":{"65a0d406":"import os\nfrom xml.etree import ElementTree\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder","341b5278":"dataset_path = '\/kaggle\/input\/car-crashes-severity-prediction\/'\n\ndf = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\n\nprint(\"The shape of the dataset is {}.\\n\\n\".format(df.shape))\n\ndf.head()","4e6bc14e":"weather_df = pd.read_csv(os.path.join(dataset_path, 'weather-sfcsv.csv'))\nweather_df.head()","e5e03078":"tree = ElementTree.parse(os.path.join(dataset_path, 'holidays.xml'))\nroot = tree.getroot()\n\nholidays = []\nfor row in root:\n    try:\n        holidays.append(row[0].text)\n    except Exception as ex:\n        pass","7b1ce6c4":"for col in df.columns:\n    if df[col].dtype in ['object', 'bool']:\n        print(df[col].value_counts())\n        print()","4780f6f8":"df['Severity'].value_counts()","d1cdf1a5":"weather_df.describe().T","7c21a04b":"for col in weather_df.columns:\n    if weather_df[col].dtype in ['object', 'bool']:\n        print(weather_df[col].value_counts(), '\\n\\n')","f0fcc34d":"counts = weather_df['Weather_Condition'].value_counts()\nless_occur = weather_df['Weather_Condition'].isin(counts[counts < 20].index)\nweather_df['Weather_Condition'][less_occur] = 'Other'\nprint(weather_df.value_counts('Weather_Condition'))","ed5b1c73":"weather_df = weather_df.drop(columns=['Selected', 'Wind_Chill(F)', 'Precipitation(in)'],axis=1)","45f06f12":"weather_df = weather_df.fillna(weather_df.mean())\nweather_df = weather_df.fillna(weather_df.mode().iloc[0])\nweather_df = weather_df.drop_duplicates(['Year','Month', 'Day', 'Hour'])","47381fc2":"def merge_weather(df):\n    merge_list = ['Year','Month', 'Day', 'Hour']\n    new_df = df.merge(weather_df,  how='left', on=merge_list)\n    return new_df","9e5b84cc":"def add_is_holiday(df):\n    df['holiday'] = df['timestamp'].dt.date.isin(holidays)\n    return df","013b5572":"def add_time_cols(df):\n    df['timestamp'] = pd.to_datetime(df['timestamp'])\n    df['Year'] = df['timestamp'].apply(lambda x : x.year)\n    df['Month'] = df['timestamp'].apply(lambda x : x.month)\n    df['DayOfWeek'] = df['timestamp'].apply(lambda x : x.dayofweek)\n    df['Day'] = df['timestamp'].apply(lambda x : x.day)\n    df['Hour'] = df['timestamp'].apply(lambda x : x.hour)\n\n    return df","0ff77ea0":"encoder = OneHotEncoder(handle_unknown='ignore')\ndef pipline(df, my_list, is_train=False):\n    df = add_time_cols(df)\n    df = merge_weather(df)\n    df = add_is_holiday(df)\n    df = df[my_list]\n    object_cols = [col for col in df.columns if df[col].dtype == 'object']\n    if is_train:\n        encoder.fit(df[object_cols])\n    X = pd.DataFrame(encoder.transform(df[object_cols]).toarray(), columns=encoder.get_feature_names(object_cols))\n    df = df.drop(columns=object_cols)\n    df = pd.concat([df, X], axis=1)\n    return df","1eb9d791":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(df, test_size=0.2, shuffle =True, random_state=42, stratify=df['Severity'])\n\nX_train = train_df.drop(columns=['ID', 'Severity'])\ny_train = train_df['Severity']\n\nX_val = val_df.drop(columns=['ID', 'Severity'])\ny_val = val_df['Severity']\n","04f3e42a":"from sklearn.ensemble import RandomForestClassifier\n\n# Create an instance of the classifier\nclassifier = RandomForestClassifier(max_depth=2, random_state=0)","9f6d9d15":"from itertools import combinations\ncols = ['Side', 'Year', 'Humidity(%)']\nmax_score = 0\nbest_features = []\nbest_classifier = None\nfor i in range(len(cols) + 1):\n    for j in combinations(cols, i):\n        my_list = ['Lat', 'Lng', 'Distance(mi)']\n        my_list += list(j)\n        X_train_curr = pipline(X_train, my_list, True)\n        X_val_curr = pipline(X_val, my_list)\n        # Train the classifier\n        classifier = classifier.fit(X_train_curr, y_train)\n        score = classifier.score(X_val_curr, y_val)\n        if max_score < score:\n            max_score = score\n            best_features = my_list\n            best_classifier = classifier\n\nprint(\"The best accuracy of the classifier on the validation set is \", max_score)\nprint(\"Features List \", best_features)\nclassifier = best_classifier","a7812fe1":"plt.figure(figsize = (20,10))\nimportances_rf = pd.Series(classifier.feature_importances_, index = pipline(X_train, best_features).columns) \nsorted_importances_rf = importances_rf.sort_values() \nsorted_importances_rf.plot(kind='barh', color='lightgreen')\nplt.show()","d5ff5e81":"test_df = pd.read_csv(os.path.join(dataset_path, 'test.csv'))\ntest_df.head()","63e15736":"X_test = test_df.drop(columns=['ID'])\n\nX_test = pipline(X_test, best_features)\n\ny_test_predicted = classifier.predict(X_test)\n\ntest_df['Severity'] = y_test_predicted\n\ntest_df.head()","5f241860":"test_df[['ID', 'Severity']].to_csv('\/kaggle\/working\/submission.csv', index=False)","5e16ae79":"# Merge & Data Manipulation","da3fd207":"# Pipline","9573b2dd":"# Model Traning","fd8df4d0":"# Submission File Generation","49b08a9e":"# Exploratory Data Analysis","f6e1f673":"# Model Selection"}}