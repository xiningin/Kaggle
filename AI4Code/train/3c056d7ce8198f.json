{"cell_type":{"e64c63bb":"code","756577a0":"code","f32ad976":"code","c056ebe8":"code","3144036e":"code","c2046630":"code","f3b14116":"code","30daf2a0":"code","582fd0c7":"code","1ad4348f":"code","8bf6cbc8":"code","cc30c4ab":"code","ebcd4fac":"code","282d0ab9":"code","16d14173":"code","c376e8a9":"code","e31a7d6a":"code","11dffcd0":"code","b527a348":"code","82401d7e":"code","5ad6622f":"code","7769852a":"code","c308dc30":"code","1585b1e1":"code","20b9dd9b":"markdown","916d5b03":"markdown","012a4a00":"markdown","6246f0e1":"markdown","2e912dcf":"markdown","23a57ff7":"markdown","0162cfad":"markdown"},"source":{"e64c63bb":"!pip install sklearn","756577a0":"from sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport pandas as pd","f32ad976":"df = pd.read_csv(\"..\/input\/the-movies-dataset\/movies_metadata.csv\", low_memory=False)","c056ebe8":"df.head(1)","3144036e":"df = df[['id','title','overview']]","c2046630":"df.head(1)","f3b14116":"tfidf = TfidfVectorizer(stop_words='english')","30daf2a0":"df['overview'] = df['overview'].fillna('')","582fd0c7":"tfidf_matrix = tfidf.fit_transform(df['overview'])\n\ntfidf_matrix.shape \n# In this matrix, rows represent movies and columns represent the unique words from overviews.","1ad4348f":"df['title'].shape","8bf6cbc8":"cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix) # the matrix that we calculated cosine similarity\n\ncosine_sim.shape","cc30c4ab":"cosine_sim[1] # the 2nd row's movie's cosine similarity with each movie","ebcd4fac":"df = df[~df['title'].isna()]","282d0ab9":"indices = pd.Series(df.index, index=df['title'])\n\nindices = indices[~indices.index.duplicated(keep='last')]","16d14173":"indices","c376e8a9":"target_movie_index = indices['Toy Story']\n\ntarget_movie_index","e31a7d6a":"cosine_sim[target_movie_index]","11dffcd0":"# We created a dataframe by using the target_movie_index's similarities\nsimilarity_scores = pd.DataFrame(cosine_sim[target_movie_index], columns=[\"score\"]) \n\nsimilarity_scores","b527a348":"movie_indices = similarity_scores.sort_values(\"score\", ascending=False)[0:11].index ","82401d7e":"df['title'].iloc[movie_indices]","5ad6622f":"def get_films_by_name(movie_name, movie_indices):\n    return movie_indices[movie_indices.index.str.contains(movie_name, na=False)]","7769852a":"get_films_by_name('Lord',indices)","c308dc30":"def get_recommended_movies(target_movie_index, movie_similarities,movies_df):\n    similarity_scores = pd.DataFrame(movie_similarities[target_movie_index], columns=[\"score\"]) \n    movie_indices = similarity_scores.sort_values(\"score\", ascending=False)[0:11].index \n    return df['title'].iloc[movie_indices]","1585b1e1":"get_recommended_movies(2007,cosine_sim,df)","20b9dd9b":"# Loading Dataset","916d5b03":"# Creating TF-IDF Matrix","012a4a00":"# Introduction\n\nI prefer medium.com for explaining the scenarios. You can access the medium story that is relevant to this notebook from [here](https:\/\/medium.com\/@mebaysan\/what-is-content-based-filtering-an-applied-example-in-python-42acb4cbaa30). This notebook will cover just codes.\n\nKind regards.\n\n[@mebaysan](https:\/\/github.com\/mebaysan)","6246f0e1":"# Installing and Importing Libraries","2e912dcf":"# Recommending By Using Similarities","23a57ff7":"# Creating Functions","0162cfad":"# Calculating Cosine Similarity"}}