{"cell_type":{"f3c65a2c":"code","9811049b":"code","4363c254":"code","605f7c63":"code","86b76cdd":"code","11b1ff99":"code","37cf18a3":"code","bdfe9b80":"code","9f48d4b9":"code","c6ce76d0":"code","b40a5099":"code","d89772b8":"code","6e664daa":"code","0623dcaf":"code","176779b8":"code","8d899192":"code","79fe2f83":"code","fad53ef7":"code","13232334":"code","50f02d9f":"code","fefc6b9d":"code","92d7ebf0":"code","c8ea2a26":"code","cec2d201":"code","f2894de3":"code","f1ab0bc5":"code","6fdfd2e2":"code","c6509ca1":"code","fa8ea29c":"code","e4af5aa3":"code","4545c13e":"code","d043bc54":"code","5a4ef91a":"code","5ac5ce7e":"code","6e057948":"code","e372cc9c":"code","30e120ee":"code","6c34a3b8":"code","18356d35":"code","3c48f07c":"code","625d645a":"code","afc25962":"code","7525aba9":"code","a0ba278d":"code","bc9abc43":"code","dd4ef808":"code","43f3865d":"code","4699fe25":"code","9b7f23de":"code","a1e0e04e":"code","6d0bea1b":"code","5e03f376":"code","67ccea0e":"code","e40e6bb3":"code","98f9d213":"code","34697590":"code","3f245a59":"code","dc563430":"code","21a05110":"code","375077a0":"code","a4c0e501":"code","6e735144":"code","fe483abd":"code","3e33603c":"code","590f5961":"code","49bb02fb":"code","1f1091db":"code","10bb82c2":"code","bee921b0":"code","4ba83141":"code","c023b45b":"code","977b6fc5":"code","c93b0cf2":"code","e7d2c6f1":"code","961e5f85":"code","a09541a4":"code","42e48d5a":"code","49e6768c":"code","198f101d":"code","4ca6e62f":"code","84236b6b":"code","18b3331c":"code","51717c7e":"code","08d1f462":"code","408840e3":"code","584e4429":"code","5e21989e":"code","6f7db177":"code","ec34ae55":"code","06210ecb":"code","845a5eac":"code","5f6e4b1e":"code","85d65f5b":"code","d57dbb71":"code","e02cfe00":"code","0e6bada0":"code","45148838":"code","06eb19e1":"code","abc229c1":"code","79b42b63":"code","599b1a16":"code","dfb65b12":"code","4db0e983":"code","f0452fc9":"code","d464ca4d":"code","3d349906":"code","f13815f9":"code","a26e2330":"code","acacd4bf":"code","e53d5b22":"code","7b444fb1":"code","b74dd4f8":"markdown","5bcec3be":"markdown","85bb4571":"markdown","7d0428f6":"markdown","1a9372c0":"markdown","d298d414":"markdown","a2c454e4":"markdown","7763bce7":"markdown","1f02afbd":"markdown","44596f06":"markdown","4ab36784":"markdown","30960e67":"markdown","d277fc3f":"markdown","a745994b":"markdown","e0c4994a":"markdown","c769e180":"markdown","97ab8d6c":"markdown"},"source":{"f3c65a2c":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import confusion_matrix, classification_report, plot_confusion_matrix\nfrom sklearn.metrics import accuracy_score, f1_score, recall_score, precision_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import explained_variance_score\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n","9811049b":"df = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv', encoding = \"UTF-8\")","4363c254":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', encoding = \"UTF-8\")","605f7c63":"train2 = train.copy()","86b76cdd":"test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv', encoding = \"UTF-8\")","11b1ff99":"test2 = test.copy()","37cf18a3":"df.head()","bdfe9b80":"df.info()","9f48d4b9":"train.head()","c6ce76d0":"train.isna().sum()","b40a5099":"train.info()","d89772b8":"test.isna().sum()","6e664daa":"train.Survived.value_counts(dropna = False)","0623dcaf":"palette = [\"red\", \"blue\"]\nsb.countplot(train.Survived, palette = palette)\nplt.title(\"Number of Passengers Who Survived vs Died\", fontdict = {\"fontsize\" : 18});","176779b8":"train.Pclass.value_counts(dropna = False)","8d899192":"sb.countplot(train.Pclass, palette = \"viridis\")\nplt.title(\"Number of Pclasses\")\nplt.show()","79fe2f83":"sb.countplot(train.Pclass, hue = train.Survived, palette = \"viridis\")\nplt.title(\"Number of Pclasses\")\nplt.show()","fad53ef7":"train.Sex.value_counts(dropna = False)","13232334":"sb.countplot(train.Sex, palette = \"viridis\")\nplt.title(\"Sex Feature\")\nplt.show()","50f02d9f":"sb.countplot(train.Sex, hue = train.Survived, palette = \"viridis\")\nplt.title(\"Sex vs Survived\")\nplt.show()","fefc6b9d":"train.Age.value_counts(dropna = False)","92d7ebf0":"age = train.Age.value_counts().iloc[:10]","c8ea2a26":"age","cec2d201":"sb.barplot(x = age.index, y= age, palette= \"viridis\")\nplt.title(\"Most common 10-age- values\")\nplt.show()","f2894de3":"train.SibSp.value_counts()","f1ab0bc5":"sb.countplot(train.SibSp, palette = \"viridis\")\nplt.title(\"SibSp Feature\")\nplt.show()","6fdfd2e2":"sb.countplot(train.SibSp, hue = train.Survived, palette = \"viridis\")\nplt.title(\"SibSp Feature vs Survived\")\nplt.show()","c6509ca1":"train.Parch.value_counts(dropna = False )","fa8ea29c":"sb.countplot(train.Parch, palette = \"viridis\")\nplt.title(\"Parch Feature\")\nplt.show()","e4af5aa3":"sb.countplot(train.Parch, hue = train.Survived, palette = \"viridis\")\nplt.title(\"Parch Feature vs Survived\")\nplt.show()","4545c13e":"train.Ticket.value_counts(dropna = False)","d043bc54":"train[train.Ticket == \"347082\"]","5a4ef91a":"train[train.Ticket == \"CA. 2343\"]","5ac5ce7e":"train[train.Ticket == \"1601\"]","6e057948":"train.Fare.value_counts(dropna = False)","e372cc9c":"sb.scatterplot(x = train.Pclass, y = train.Fare, hue = train.Survived )","30e120ee":"train.Embarked.value_counts(dropna = False)","6c34a3b8":"sb.countplot(train.Embarked, hue = train.Survived, palette = \"viridis\")\nplt.title(\"Embarked vs Survived\")\nplt.show()","18356d35":"sb.countplot(train.Embarked, hue = train.Pclass, palette = \"viridis\")\nplt.title(\"Embarked vs Pclass\")\nplt.show()","3c48f07c":"df.head()","625d645a":"train.head()","afc25962":"pd.crosstab(train.Cabin, train.Survived).T","7525aba9":"train.Cabin.value_counts( dropna = False)","a0ba278d":"train.Age.value_counts(dropna = False)","bc9abc43":"train.Age.groupby([train.Pclass]).median()","dd4ef808":"for i in range(len(train.Age)):\n    if (train.Pclass[i] == 1) and (pd.isna(train.Age[i])):\n        train.Age[i] = 37\n    elif (train.Pclass[i] == 2) and (pd.isna(train.Age[i])): \n        train.Age[i] = 29\n    elif (train.Pclass[i] == 3) and (pd.isna(train.Age[i])):    \n        train.Age[i] = 24\n        \ntrain.Age.value_counts(dropna = False)      ","43f3865d":"for i in range(len(test.Age)):\n    if (test.Pclass[i] == 1) and (pd.isna(test.Age[i])):\n        test.Age[i] = 37\n    elif (test.Pclass[i] == 2) and (pd.isna(test.Age[i])): \n        test.Age[i] = 29\n    elif (test.Pclass[i] == 3) and (pd.isna(test.Age[i])):    \n        test.Age[i] = 24\n        \ntest.Age.value_counts(dropna = False)","4699fe25":"train.head()","9b7f23de":"train.Embarked.groupby(train.Pclass).value_counts(dropna = False)","a1e0e04e":"train[pd.isna(train.Embarked)]","6d0bea1b":"train.Embarked.fillna(\"S\", inplace = True)","5e03f376":"train.Embarked.value_counts(dropna = False)","67ccea0e":"test.isna().sum()","e40e6bb3":"test[pd.isna(test.Fare)]","98f9d213":"test.Fare.fillna(test.Fare[test.Pclass == 3].median(), inplace = True)","34697590":"test.isna().sum()","3f245a59":"len_train = len(train)\nlen_train","dc563430":"len_test = len(test)\nlen_test","21a05110":"train = pd.concat([train, test], axis = 0)","375077a0":"train.head()","a4c0e501":"from sklearn.preprocessing import LabelEncoder","6e735144":"le=LabelEncoder()\ntrain[\"Sex\"]=le.fit_transform(train[\"Sex\"])\ntrain.head()","fe483abd":"embarked = train.Embarked.str.get_dummies()\ntrain = pd.concat([train, embarked], axis =1)","3e33603c":"train[\"relative\"] = train[\"SibSp\"] + train[\"Parch\"]","590f5961":"test = train[891:]","49bb02fb":"train = train[:891]","1f1091db":"test.shape","10bb82c2":"test.info()","bee921b0":"train.shape","4ba83141":"y_test = df.Survived\nX_test = test.drop(columns = [\"PassengerId\", \"Name\", \"Cabin\", \"Ticket\", \"Survived\", \"Embarked\", \"SibSp\", \"Parch\"])\ny_train = train.Survived\nX_train = train.drop(columns = [\"PassengerId\", \"Name\", \"Cabin\", \"Ticket\", \"Survived\", \"Embarked\", \"SibSp\", \"Parch\"])","c023b45b":"X_train.head()","977b6fc5":"X_train.info()","c93b0cf2":"n = 31","e7d2c6f1":"from sklearn.ensemble import GradientBoostingClassifier","961e5f85":"gradient_model = GradientBoostingClassifier(random_state = n)","a09541a4":"gradient_model.fit(X_train, y_train)","42e48d5a":"y_pred = gradient_model.predict(X_test)\ny_train_pred = gradient_model.predict(X_train)","49e6768c":"print(confusion_matrix(y_test, y_pred))","198f101d":"accuracy_score(y_test, y_pred)","4ca6e62f":"print(confusion_matrix(y_train, y_train_pred))","84236b6b":"accuracy_score(y_train, y_train_pred)","18b3331c":"gradient_model2 = GradientBoostingClassifier(random_state = n)","51717c7e":"param_grid = {\"n_estimators\": range(1, 51, 5), \"max_depth\" : [5], \"learning_rate\" : [ 0.01, 0.1],\n            \"subsample\" : [0.5, 1], \"max_features\" : [None, 2, 3, 4]}","08d1f462":"gradient_grid_model = GridSearchCV(gradient_model2, param_grid, scoring = \"accuracy\", verbose = 2, cv = 3)","408840e3":"gradient_grid_model.fit(X_train, y_train)","584e4429":"gradient_grid_model.best_params_","5e21989e":"y_pred = gradient_grid_model.predict(X_test)\ny_train_pred = gradient_grid_model.predict(X_train)","6f7db177":"print(confusion_matrix(y_test, y_pred))","ec34ae55":"accuracy_score(y_test, y_pred)","06210ecb":"print(confusion_matrix(y_train, y_train_pred))","845a5eac":"accuracy_score(y_train, y_train_pred)","5f6e4b1e":"# Add Ticked Feature ","85d65f5b":"train2 = pd.concat([train2, test2], axis = 0)","d57dbb71":"le=LabelEncoder()\ntrain2[\"Sex\"]=le.fit_transform(train2[\"Sex\"])\ntrain2.head()","e02cfe00":"train2[\"relative\"] = train2[\"SibSp\"] + train2[\"Parch\"]\nembarked = train2.Embarked.str.get_dummies()\ntrain2 = pd.concat([train2, embarked], axis =1)","0e6bada0":"ticked = train2.Ticket.str.get_dummies()\nticked.shape\nfor column in ticked.columns:\n    if ticked[\"{}\".format(column)].sum() <= 1:\n        ticked.drop(columns = [\"{}\".format(column)], inplace = True)\ntrain2 = pd.concat([train2, ticked], axis =1)        ","45148838":"test2 = train2[891:]\ntrain2 = train2[:891]","06eb19e1":"y_test2 = df.Survived\nX_test2 = test2.drop(columns = [\"PassengerId\", \"Name\", \"Cabin\", \"Ticket\", \"Survived\", \"Embarked\", \"SibSp\", \"Parch\"])\ny_train2 = train2.Survived\nX_train2 = train2.drop(columns = [\"PassengerId\", \"Name\", \"Cabin\", \"Ticket\", \"Survived\", \"Embarked\", \"SibSp\", \"Parch\"])","abc229c1":"xg_model = XGBClassifier(random_state = n)\nxg_model.fit(X_train2, y_train2)","79b42b63":"y_pred = xg_model.predict(X_test2)\ny_train_pred = xg_model.predict(X_train2)","599b1a16":"print(accuracy_score(y_test2, y_pred))\nprint(accuracy_score(y_train2, y_train_pred))","dfb65b12":"xg2_model = XGBClassifier(random_state = n)\nparam_grid = {\"n_estimators\": range(50, 101), \"max_depth\" : [3, 5, 6], \"learning_rate\" : [0.1, 1],\n            }\nxgb_grid = GridSearchCV(xg2_model, param_grid, scoring= 'accuracy', verbose= 2)\nxgb_grid.fit(X_train2, y_train2)","4db0e983":"xgb_grid.best_params_","f0452fc9":"y_pred2 = xgb_grid.predict(X_test2)\ny_train_pred2 = xgb_grid.predict(X_train2)","d464ca4d":"print(confusion_matrix(y_test2, y_pred2))","3d349906":"accuracy_score(y_test2, y_pred2)","f13815f9":"print(confusion_matrix(y_train2, y_train_pred2))","a26e2330":"accuracy_score(y_train2, y_train_pred2)","acacd4bf":"xg_grid_test =  accuracy_score(y_test2, y_pred2)\nxg_grid_f1_test  = f1_score(y_test2, y_pred2)\nxg_grid_acr_train = accuracy_score(y_train2, y_train_pred2)\nxg_grid_f1_train  = f1_score(y_train2, y_train_pred2)","e53d5b22":"submission = pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':y_pred2})\nsubmission.Survived = submission.Survived.astype(\"int\")\nsubmission.head()","7b444fb1":"filename = 'submission.csv'\n\nsubmission.to_csv(filename,index=False)\n\nprint('Saved file: ' + filename)","b74dd4f8":"## Fare Faeture","5bcec3be":"# Import the Libarys","85bb4571":"# Dependent and Independent Variables","7d0428f6":"## Age Feature","1a9372c0":"# Import the Dataset","d298d414":"# Gradient Boosting Modelling and Model Performance","a2c454e4":"## Grid Search","7763bce7":"## Ticket Feaure","1f02afbd":"## Sex Feature","44596f06":"## SibSp Feature","4ab36784":"# XG Boositing ","30960e67":"## Grid Search","d277fc3f":"# Feature Enginering","a745994b":"## Parch Feaure","e0c4994a":"# Visualization","c769e180":"## Embarked Feature","97ab8d6c":"## Pclass Feature"}}