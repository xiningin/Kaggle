{"cell_type":{"035a0343":"code","48493d1a":"code","72866eff":"code","a4958b84":"code","01c21faf":"code","52cf357c":"code","51024406":"code","10bd579e":"code","6823d7bf":"code","04f7514c":"code","650fad4d":"code","cee4737c":"code","c08638d5":"code","8d39f43b":"code","5328f8c2":"code","3e0c0888":"code","5e1c252f":"code","295a4db8":"code","8779a012":"code","6d89e2c5":"code","a08294db":"code","d27bfaee":"code","26028c40":"code","4191345e":"code","da66b719":"code","81087fa0":"code","b7aba69b":"code","dbd79d3f":"code","c4590531":"code","c7b58d94":"markdown","cf0ee79e":"markdown","3fa0090c":"markdown","70099980":"markdown","8be63b34":"markdown","11ff12c2":"markdown","82ba4fea":"markdown","b2507815":"markdown","dea6cfd7":"markdown"},"source":{"035a0343":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\nimport warnings\nimport os \nwarnings.filterwarnings(\"ignore\")\nimport datetime\n","48493d1a":"data=pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\n","72866eff":"data.head()      #displaying the head of dataset they gives the 1st to 5 rows of the data","a4958b84":"data.describe()      #description of dataset ","01c21faf":"data.info()","52cf357c":"data.shape       #569 rows and 33 columns","51024406":"data.columns     #displaying the columns of dataset","10bd579e":"data.value_counts","6823d7bf":"data.dtypes","04f7514c":"data.isnull().sum()","650fad4d":"data.drop('Unnamed: 32', axis = 1, inplace = True)\n","cee4737c":"data","c08638d5":"data.corr()","8d39f43b":"plt.figure(figsize=(18,9))\nsns.heatmap(data.corr(),annot = True, cmap =\"Accent_r\")\n\n\n\n","5328f8c2":"sns.barplot(x=\"id\", y=\"diagnosis\",data=data[160:190])\nplt.title(\"Id vs Diagnosis\",fontsize=15)\nplt.xlabel(\"Id\")\nplt.ylabel(\"Diagonis\")\nplt.show()\nplt.style.use(\"ggplot\")\n","3e0c0888":"sns.barplot(x=\"radius_mean\", y=\"texture_mean\", data=data[170:180])\nplt.title(\"Radius Mean vs Texture Mean\",fontsize=15)\nplt.xlabel(\"Radius Mean\")\nplt.ylabel(\"Texture Mean\")\nplt.show()\nplt.style.use(\"ggplot\")\n","5e1c252f":" \nmean_col = ['diagnosis','radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean']\n\nsns.pairplot(data[mean_col],hue = 'diagnosis', palette='Accent')\n","295a4db8":"sns.violinplot(x=\"smoothness_mean\",y=\"perimeter_mean\",data=data)","8779a012":"plt.figure(figsize=(14,7))\nsns.lineplot(x = \"concavity_mean\",y = \"concave points_mean\",data = data[0:400], color='green')\nplt.title(\"Concavity Mean vs Concave Mean\")\nplt.xlabel(\"Concavity Mean\")\nplt.ylabel(\"Concave Points\")\nplt.show()\n\n","6d89e2c5":"worst_col = ['diagnosis','radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']\n\nsns.pairplot(data[worst_col],hue = 'diagnosis', palette=\"CMRmap\")","a08294db":"# Getting Features\n\nx = data.drop(columns = 'diagnosis')\n\n# Getting Predicting Value\ny = data['diagnosis']\n","d27bfaee":"\n#train_test_splitting of the dataset\nfrom sklearn.model_selection import train_test_split \nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)\n","26028c40":"print(len(x_train))\n","4191345e":"print(len(x_test))","da66b719":"print(len(y_train))","81087fa0":"print(len(y_test))","b7aba69b":"from sklearn.ensemble import AdaBoostClassifier\nadb = AdaBoostClassifier(base_estimator = None)\nadb.fit(x_train,y_train)\n\n\n\n\n\n","dbd79d3f":"y_pred=adb.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,mean_squared_error,r2_score\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Training Score: \",adb.score(x_train,y_train)*100)","c4590531":"print(accuracy_score(y_test,y_pred)*100)","c7b58d94":"# IMPORTING THE LIBRARIES","cf0ee79e":"# TRAINING AND TESTING DATA","3fa0090c":"# MODELS","70099980":"# LOADING THE DATASET","8be63b34":"**Ada Boost Classifier got the highest accuracy**","11ff12c2":"#  AdaBoostClassifier","82ba4fea":"**So we have to drop the Unnamed: 32 coulumn which contains NaN values**","b2507815":"**So we get a accuracy score of 98.24 % using AdaBoostClassifier**","dea6cfd7":"# VISUALIZING THE DATA"}}