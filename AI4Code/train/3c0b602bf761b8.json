{"cell_type":{"d4256def":"code","8b54e503":"code","68c6edd9":"code","02291855":"code","ac583277":"code","b029a3e7":"code","d44d25a8":"code","cd9db628":"code","e8f37e4c":"code","8689e659":"code","3e08c5b2":"code","0695955f":"code","c7eb63c6":"code","40a6112e":"code","c49d0f7d":"code","27300730":"code","171ee79b":"code","31ea6c1c":"code","f7f8a315":"code","e40cdcad":"code","c6809367":"code","83ee0e4d":"code","b35f3429":"code","9ac8358a":"code","15798c1a":"code","5da4823d":"code","c0f9d442":"code","1f6aca34":"markdown","503262d2":"markdown","ea5d53c9":"markdown","308dde30":"markdown","441edc23":"markdown"},"source":{"d4256def":"import pandas as pd\n\ndata = pd.read_csv(\"..\/input\/ethereum-tweets\/Ethereum_tweets.csv\")\n\ndata.head()","8b54e503":"data.info()","68c6edd9":"data.isnull().sum()","02291855":"data = data[[\"user_name\",\"text\"]]","ac583277":"data.head()","b029a3e7":"import re\nfrom gensim.parsing.preprocessing import remove_stopwords\nimport string\nimport unicodedata\n\ndef lower_case(text):\n    return text.lower()\n\ndef remove_punctuation(text):\n    text_list = [char for char in text if char not in string.punctuation]\n    clean_text = \"\".join(text_list)\n    return clean_text\n\ndef remove_numbers(text):\n    text_list = []\n    for i in text:\n        if not re.search(\"\\d\", i):\n            text_list.append(i)\n    return \"\".join(text_list)\n\ndef remove_special_char(text):\n    pat =  r'[^a-zA-z0-9]' \n    return re.sub(pat, \" \", text)\n\ndef remove_square_bracket(text):\n    clean_text = re.sub(r'\\[[0-9]*\\]', ' ', text)\n    return clean_text\n\ndef remove_white_spaces_char(text):\n    clean_text = re.sub(r'\\s+', ' ', text)\n    \n    return clean_text\n\ndef remove_unicode_char(text):\n    new_text = unicodedata.normalize('NFKD', text).encode('ascii', 'ignore').decode('utf-8', 'ignore')\n    return new_text\n\n\ndef remove_user(text):\n    clean_text = re.sub('(@[A-Za-z]+[A-Za-z0-9-_]+)', '', text)\n    \n    return clean_text\n\ndef remove_links(text):\n    clean_text = re.sub(r'http\\S+', '', text)\n    clean_text = re.sub(r'bit.ly\/\\S+', '', text)\n    clean_text = clean_text.strip('[link]')\n    \n    return clean_text\n\ndef remove_html(text):\n    html = re.compile('<.*?>')\n    \n    return html.sub(r'',text)\n\ndef remove_email(text):\n    email = re.compile(r'[\\w\\.-]+@[\\w\\.-]+')\n    return email.sub(r'',text)\n\ndef remove_stopwords_from_text(text):\n    \n    clean_text = remove_stopwords(text)\n    \n    return clean_text","d44d25a8":"data[\"clean_text\"] = data[\"text\"].apply(lower_case)\ndata[\"clean_text\"] = data[\"clean_text\"].apply(remove_punctuation)\ndata[\"clean_text\"] = data[\"clean_text\"].apply(remove_numbers)\ndata[\"clean_text\"] = data[\"clean_text\"].apply(remove_special_char)\ndata[\"clean_text\"] = data[\"clean_text\"].apply(remove_square_bracket)\ndata[\"clean_text\"] = data[\"clean_text\"].apply(remove_white_spaces_char)\ndata[\"clean_text\"] = data[\"clean_text\"].apply(remove_unicode_char)\ndata[\"clean_text\"] = data[\"clean_text\"].apply(remove_user)\ndata[\"clean_text\"] = data[\"clean_text\"].apply(remove_links)\ndata[\"clean_text\"] = data[\"clean_text\"].apply(remove_html)\ndata[\"clean_text\"] = data[\"clean_text\"].apply(remove_email)\ndata[\"clean_text\"] = data[\"clean_text\"].apply(remove_stopwords_from_text)","cd9db628":"data.head()","e8f37e4c":"data = data.drop(data[[\"user_name\"]], axis = 1)","8689e659":"data.head()","3e08c5b2":"from textblob import TextBlob\n\ndef finding_polarity(text):\n    clean_text = TextBlob(str(text))\n    pol = clean_text.sentiment.polarity\n    if(pol==0):\n        return \"Neutral\"\n    elif(pol>0 and pol<=0.3):\n        return \"Weakly Positive\"\n    elif(pol>0.3 and pol<=0.6):\n        return \"Positive\"\n    elif(pol>0.6 and pol<=1):\n        return \"Strongly Positive\"\n    elif(pol>-0.3 and pol<=0):\n        return \"Weakly Negative\"\n    elif(pol>-0.6 and pol<=-0.3):\n        return \"Negative\"\n    elif(pol>-1 and pol<=-0.6):\n        return \"Strongly Negative\"","0695955f":"data[\"polarity\"] = data[\"clean_text\"].apply(finding_polarity)","c7eb63c6":"data.head()","40a6112e":"# categorizing the text\n\nfrom textblob import TextBlob\n\ndef positive_negative(text):\n  clean_text = TextBlob(str(text))\n  pol = clean_text.sentiment.polarity\n\n  \n\n  if(pol==0):\n    return 1\n  elif(pol>0 and pol<=0.3):\n    return 1\n  elif(pol>0.3 and pol<=0.6):\n    return 1\n  elif(pol>0.6 and pol<=1):\n    return 1\n  elif(pol>-0.3 and pol<=0):\n    return 0\n  elif(pol>-0.6 and pol<=-0.3):\n    return 0\n  elif(pol>-1 and pol<=-0.6):\n    return 0","c49d0f7d":"data[\"label\"] = data[\"clean_text\"].apply(positive_negative)","27300730":"data.head()","171ee79b":"data[\"label\"].value_counts()","31ea6c1c":"num_words = sum([len(word.split()) for word in data[\"clean_text\"]])","f7f8a315":"num_words","e40cdcad":"# text vectorizing\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nvectorizer = TfidfVectorizer(max_features= 3500)\n\nx = vectorizer.fit_transform(data[\"clean_text\"]).toarray()\n\ny = data[\"label\"].values.astype(\"int\")","c6809367":"x.shape, y.shape","83ee0e4d":"# splitting the data\n\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size= 0.25, random_state= 42)","b35f3429":"x_train.shape, x_test.shape, y_train.shape, y_test.shape","9ac8358a":"from sklearn.naive_bayes import GaussianNB\n\nnav_model = GaussianNB()\n\nnav_model.fit(x_train,y_train)","15798c1a":"print(f\"Training Accuracy : {nav_model.score(x_train,y_train) * 100 : 0.2f} %\")\nprint(f\"Test Accuracy : {nav_model.score(x_test,y_test)* 100 : 0.2f} %\")","5da4823d":"from sklearn.svm import SVC\n\nsvc_model = SVC()\n\nsvc_model.fit(x_test,y_test)\n","c0f9d442":"print(f\"Training Accuracy: {svc_model.score(x_train, y_train)*100 : 0.2f} %\")\nprint(f\"Test Accuracy: {svc_model.score(x_test,y_test) * 100 : 0.2f} %\")","1f6aca34":"## **Naive Bayes Classifier**","503262d2":"## **Labeling the Tweets**","ea5d53c9":"## **Processing the Data**","308dde30":"## **Support Vector Machine**","441edc23":"## **Tweets Polarity**"}}