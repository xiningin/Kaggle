{"cell_type":{"ce396f78":"code","e2989a59":"code","50bffff2":"code","be953da3":"code","f1c2163b":"code","eae0b347":"code","75b6df81":"code","0b70b1ac":"code","eaf771d8":"code","dceb01f9":"code","feaa71e3":"code","1bbcc74b":"code","9c7d0b40":"code","61dc6a33":"code","91b8e1a9":"code","a28487bd":"code","b366d694":"code","ad7aac45":"code","11257146":"code","8455a3ef":"code","46bb1c90":"code","e05feb5e":"code","9f2ba8ad":"code","eb403174":"code","207bd574":"code","34659f73":"code","994a037c":"code","7b2893e8":"code","4449daf1":"code","e088ba33":"code","fc3d931c":"code","ac36638a":"markdown","bfff6a8a":"markdown","e608b1cd":"markdown","7da4d8df":"markdown","940d8571":"markdown","a43bd621":"markdown","f3983ebe":"markdown","6c43b275":"markdown","7aec16a5":"markdown","699c6ffc":"markdown","0bb14127":"markdown","26180736":"markdown","3576c1cf":"markdown","a6ccd65b":"markdown","af244f07":"markdown"},"source":{"ce396f78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e2989a59":"import operator, re\nimport seaborn as sns\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\n\nsns.set_style(\"whitegrid\")","50bffff2":"data = pd.read_csv(\"\/kaggle\/input\/friends-series-dataset\/friends_episodes_v2.csv\")","be953da3":"print(\"Total episodes : \", data.shape[0])\ndata.head()","f1c2163b":"data[\"Episode_Title\"].iloc[-1] = \"The Last One Part(2)\"","eae0b347":"data.isnull().sum() # No null values","75b6df81":"temp = data[\"Year_of_prod\"]\nprint(\"Start :  {} \\nEnd : {}\".format(min(temp), max(temp)))","0b70b1ac":"data[[\"Stars\", \"Votes\"]].describe()","eaf771d8":"sns.distplot(data[\"Votes\"])\nplt.grid(b=None)\nplt.show()","dceb01f9":"sns.distplot(data[\"Stars\"])\nplt.grid(b=None)\nplt.show()","feaa71e3":"temp = data.groupby(\"Season\").count()[\"Episode_Title\"]\nseasons = list(temp.index)\nepisodes = list(temp.values)\n\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nsns.barplot(seasons,episodes, palette='inferno')\nax.grid(False)\nplt.xlabel('Seasons') \nplt.ylabel('Number of episodes') \nplt.title('Episodes in a season')\nplt.ylim(15, 30)\nplt.show()","1bbcc74b":"# Total duration of a season\n\nduration = data.groupby(\"Season\").sum()[\"Duration\"]\n\nfig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nsns.barplot(list(duration.index),list(duration.values), palette='inferno')\nax.grid(False)\nplt.xlabel('Seasons') \nplt.ylabel('Duration') \nplt.title('Total Duration of Seasons')\nplt.ylim(400, 600)\nplt.show()","9c7d0b40":"season_stars = data.groupby('Season').mean().Stars.to_frame()\nstars = list(season_stars[\"Stars\"])\nseason = list(season_stars.index)\n\nplt.figure(figsize=(10,5))\nsns.barplot(season, stars, palette='inferno')\nplt.title('Average Stars of each Season')\nplt.xlabel('Average Stars')\nplt.ylabel('Seasons')\nplt.ylim(8.2,8.8)\nplt.show()","61dc6a33":"temp = data.groupby(\"Season\").mean()[\"Stars\"]\nindex = list(temp.index)\nvalues = list(temp.values)\n\nprint(\"Best Season according to Stars : \", np.argmax(values)+1)\nprint(\"Least Best Season according to Stars : \", np.argmin(values)+1)","91b8e1a9":"temp = data.groupby(\"Season\").mean()[\"Votes\"]\nindex = list(temp.index)\nvalues = list(temp.values)\n\nprint(\"Best Season according to Votes : \", np.argmax(values)+1)\nprint(\"Least Best Season according to Votes : \", np.argmin(values)+1)","a28487bd":"# Top 10 best episodes according to the stars\n\ntemp = data.sort_values(by=[\"Stars\"], ascending=False)[:10]\nepisodes = list(temp[\"Episode_Title\"])\nstars = list(temp[\"Stars\"])\n\nsns.barplot(stars, episodes, palette='inferno')\nplt.xlabel('Stars') \nplt.ylabel('Episodes') \nplt.title('Top 10 Episodes according to Stars')\nplt.xlim(9,10)\nplt.show()","b366d694":"# Top 10 best episodes according to the Votes\n\ntemp = data.sort_values(by=[\"Votes\"], ascending=False)[:10]\nepisodes = list(temp[\"Episode_Title\"])\nvotes = list(temp[\"Votes\"])\n\nsns.barplot(votes, episodes, palette='inferno')\nplt.xlabel('Votes') \nplt.ylabel('Episodes') \nplt.title('Top 10 Episodes according to Votes')\nplt.xlim(4000, 11000)\nplt.show()","ad7aac45":"# Top 10 best episodes according to the Votes\n\ntemp = data.sort_values(by=[\"Duration\"], ascending=False)[:10]\nepisodes = list(temp[\"Episode_Title\"])\nduration = list(temp[\"Duration\"])\n\nsns.barplot(duration, episodes, palette='inferno')\nplt.xlabel('Duration') \nplt.ylabel('Episodes') \nplt.title('Top 10 Episodes according to Time Duration')\nplt.xlim(20,40)\nplt.show()","11257146":"data.groupby(\"Director\").count()[\"Year_of_prod\"]   # Episode directed by different directory","8455a3ef":"# Top 5 High-rated Directors (Directing more than 10 Episodes)\n\ntemp = data.groupby(\"Director\").agg({\"Stars\": \"mean\", \"Season\":\"count\"}).sort_values(\"Stars\", ascending=False)\ntemp = temp[temp[\"Season\"]>=10][:5]\n\nstars = list(temp[\"Stars\"])\ndirector = list(temp.index)\n\nsns.barplot(stars, director, palette='inferno')\nplt.xlabel('Stars') \nplt.ylabel('Director') \nplt.title('Top 5 High-rated Directors (Directing more than 10 Episodes)')\nplt.xlim(8,9)\nplt.show()","46bb1c90":"# Top 5 High-voted work of Directors (Directing more than 10 Episodes)\n\ntemp = data.groupby(\"Director\").agg({\"Votes\": \"mean\", \"Season\":\"count\"}).sort_values(\"Votes\", ascending=False)\ntemp = temp[temp[\"Season\"]>=10][:5]\n\nvotes = list(temp[\"Votes\"])\ndirector = list(temp.index)\n\nsns.barplot(votes, director, palette='inferno')\nplt.xlabel('Votes') \nplt.ylabel('Director') \nplt.title('Top 5 High-voted  work of Directors (Directing more than 10 Episodes)')\nplt.xlim(3000, 4500)\nplt.show()","e05feb5e":"import nltk\nfrom nltk import word_tokenize\nfrom nltk.corpus import stopwords\nstop_words = stopwords.words('english')\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer \n\nimport string\nprint(string.punctuation)","9f2ba8ad":"sid_obj = SentimentIntensityAnalyzer() \n\nsimilarity = list(map(lambda x: sid_obj.polarity_scores(x) ,data[\"Summary\"]))","eb403174":"positive = {}\nnegative = {}\n\nfor i in range(len(similarity)):\n    positive[i] = similarity[i][\"pos\"]\n    negative[i] = similarity[i][\"neg\"]","207bd574":"positive_summary = []\ntemp = sorted(positive.items(), key=operator.itemgetter(1), reverse=True)\nfor i in range(50):\n    temp1 = data[\"Summary\"].iloc[temp[i][0]]\n    temp1 = re.sub(\"Rachel|Ross|Chandler|Monica|Phoebe|Joey|Emily|Janice|Richard\",\"\", temp1)\n    positive_summary.append(temp1)\n    \nnegative_summary = []\ntemp = sorted(negative.items(), key=operator.itemgetter(1), reverse=True)\nfor i in range(50):\n    temp1 = data[\"Summary\"].iloc[temp[i][0]]\n    temp1 = re.sub(\"Rachel|Ross|Chandler|Monica|Phoebe|Joey|Emily|Janice|Richard\",\"\", temp1)\n    negative_summary.append(temp1)","34659f73":"wordcloud = WordCloud(stopwords=STOPWORDS,\n                      max_words=300\n                         ).generate(\"\".join(positive_summary))\n\nplt.figure(figsize=(10,10))\nplt.clf()\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","994a037c":"wordcloud = WordCloud(stopwords=STOPWORDS, \n                      max_words=300\n                         ).generate(\"\".join(negative_summary))\n\nplt.figure(figsize=(10,10))\nplt.clf()\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","7b2893e8":"data[\"Summary\"] = data[\"Summary\"].apply(lambda x: x.lower())\n\nsummary = []\nfor i in data[\"Summary\"]:\n    summary.append(\"\".join([char for char in i if char not in string.punctuation]))\n\ndata[\"Summary\"] = summary\n\ndata[\"Summary\"] = data[\"Summary\"].apply(lambda x : word_tokenize(x))\ndata[\"Summary\"] = data[\"Summary\"].apply(lambda x: [word for word in x if word not in stop_words])","4449daf1":"cast = {\"Ross\": 0,\"Rachel\": 0, \"Monica\": 0, \"Chandler\":0, \"Phoebe\": 0, \"Joey\": 0}\n\nfor i in data[\"Summary\"]: \n    for j in i:\n        if j==\"ross\" or j == \"rosss\": cast[\"Ross\"] +=1\n        elif j==\"rachel\" or j== \"rachels\" : cast[\"Rachel\"] +=1\n        elif j==\"monica\" or j==\"monicas\" : cast[\"Monica\"] +=1\n        elif j==\"chandler\" or j==\"chandlers\" : cast[\"Chandler\"] +=1\n        elif j==\"phoebe\" or j==\"phoebes\" : cast[\"Phoebe\"] +=1\n        elif j==\"joey\" or j==\"joeys\" : cast[\"Joey\"] +=1","e088ba33":"actors = list(cast.keys())\ncount = list(cast.values())\n\nsns.barplot(count, actors, palette='inferno')\nplt.xlabel('Names in Summary') \nplt.ylabel('Actors') \nplt.title('Names appears in the summary')\nplt.xlim(100, 200)\nplt.show()","fc3d931c":"temp = data[\"Stars\"].sort_values(ascending=False)[:20]\nindex = list(temp.index)\n\npopular_summary = []\nfor i in index:\n    temp1 = \" \".join(data[\"Summary\"].iloc[i])\n    temp1 = re.sub(\"rachel|ross|chandler|monica|phoebe|joey\",\"\", temp1)\n    popular_summary.append(temp1)\n    \nwordcloud = WordCloud(stopwords=STOPWORDS,\n                      max_words=300\n                         ).generate(\"\".join(popular_summary))\n\nplt.figure(figsize=(10,10))\nplt.clf()\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","ac36638a":"# What's in the most popular episodes?","bfff6a8a":"### Season 6 and 5 have highest number of episodes. Season 10 has lowest number of episodes","e608b1cd":"# Episode Details","7da4d8df":"### It's seems like \"The Last one\" is everyone's favourite episode.","940d8571":"# Thanks for reading this.\n# Could this be more illustrative.\n![image.png](attachment:image.png)","a43bd621":"# Stars Distribution","f3983ebe":"### Season 6 is long-lasting season.","6c43b275":"# Votes distribution","7aec16a5":"## WordCloud of (-)ve words using in the show","699c6ffc":"# Directors Performance","0bb14127":"![image.png](attachment:image.png)","26180736":"# Season info","3576c1cf":"# Director ranking according to Stars and Votes","a6ccd65b":"# Which season is best according to the Stars and Votes","af244f07":"## WordCloud of (+)ve words using in the show"}}