{"cell_type":{"586f722f":"code","2a63abb6":"code","38665bb5":"code","3ad111f2":"code","b00d0a58":"code","fe8b82fa":"code","fa5701b8":"code","daa98567":"code","1e0d5f92":"code","44254497":"code","0e35e3cf":"code","446e82be":"code","0c28f58f":"code","e02f76e9":"code","778ceb13":"code","8f8f00b6":"code","abffdb9e":"code","ab7b2f08":"code","eea381a6":"code","ec7a86e7":"code","18e8c6f3":"markdown"},"source":{"586f722f":"#import all the required libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","2a63abb6":"#load the dataset\ndf = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")\ndf.sample(n=5)\n","38665bb5":"#check the dataset\ndf.describe()","3ad111f2":"#plot a pairplot\nsns.pairplot(data=df)","b00d0a58":"#get the names of the columns\ndf.columns","fe8b82fa":"#normalise the dataset\ndf_norm = df[['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach',\n       'exang', 'oldpeak', 'slope', 'ca', 'thal']].apply(lambda x: (x - x.min()) \/ (x.max() - x.min()))\ndf_norm.sample(n=5)","fa5701b8":"#check the normalised dataset\ndf_norm.describe()","daa98567":"#create the target column to have integer 0\/1\ntarget = df['target']\ntarget.sample(n=5)","1e0d5f92":"#add the target column to the normalised dataset\ndf = pd.concat([df_norm, target], axis=1)\ndf.sample(n=5)","44254497":"#mark some data to test as unseen data\ntrain_test_per = 75\/100.0\ndf['train'] = np.random.rand(len(df)) < train_test_per\ndf.sample(n=5)","0e35e3cf":"#seperate train data\ntrain = df[df.train == 1]\ntrain = train.drop('train', axis=1).sample(frac=1)\ntrain.sample(n=5)","446e82be":"#seperate test data\ntest = df[df.train == 0]\ntest = test.drop('train', axis=1)\ntest.sample(n=5)","0c28f58f":"X = train.values[:,:13]\nX[:14]","e02f76e9":"targets = [[1,0],[0,1]]\ny = np.array([targets[int(x)] for x in train.values[:,13:14]])\ny[:14]","778ceb13":"#create backpropogation neural network\nnum_inputs = len(X[0])\nhidden_layer_neurons = 14\nnp.random.seed(13)\nw1 = 2*np.random.random((num_inputs, hidden_layer_neurons)) - 1\nw1","8f8f00b6":"#connect hidden layer and input layer\nnum_outputs = len(y[0])\nw2 = 2*np.random.random((hidden_layer_neurons, num_outputs)) - 1\nw2","abffdb9e":"#train the neural network by updating weights\ndef draw_neural_net(ax, left, right, bottom, top, layer_sizes):\n    n_layers = len(layer_sizes)\n    v_spacing = (top - bottom)\/float(max(layer_sizes))\n    h_spacing = (right - left)\/float(len(layer_sizes) - 1)\n    # Nodes\n    for n, layer_size in enumerate(layer_sizes):\n        layer_top = v_spacing*(layer_size - 1)\/2. + (top + bottom)\/2.\n        for m in range(layer_size):\n            circle = plt.Circle((n*h_spacing + left, layer_top - m*v_spacing), v_spacing\/4.,\n                                color='w', ec='k', zorder=4)\n            ax.add_artist(circle)\n    # Edges\n    for n, (layer_size_a, layer_size_b) in enumerate(zip(layer_sizes[:-1], layer_sizes[1:])):\n        layer_top_a = v_spacing*(layer_size_a - 1)\/2. + (top + bottom)\/2.\n        layer_top_b = v_spacing*(layer_size_b - 1)\/2. + (top + bottom)\/2.\n        for m in range(layer_size_a):\n            for o in range(layer_size_b):\n                line = plt.Line2D([n*h_spacing + left, (n + 1)*h_spacing + left],\n                                  [layer_top_a - m*v_spacing, layer_top_b - o*v_spacing], c='k')\n                ax.add_artist(line)","ab7b2f08":"learning_rate = 0.28 # slowly update the network\nfor epoch in range(50000):\n    l1 = 1\/(1 + np.exp(-(np.dot(X, w1)))) # sigmoid function\n    l2 = 1\/(1 + np.exp(-(np.dot(l1, w2))))\n    er = (abs(y - l2)).mean()\n    l2_delta = (y - l2)*(l2 * (1-l2))\n    l1_delta = l2_delta.dot(w2.T) * (l1 * (1-l1))\n    w2 += l1.T.dot(l2_delta) * learning_rate\n    w1 += X.T.dot(l1_delta) * learning_rate\nprint('Error:', er)","eea381a6":"#test the network for accuracy\nX = test.values[:,:13]\ny = np.array([targets[int(x)] for x in test.values[:,13:14]])\n\nl1 = 1\/(1 + np.exp(-(np.dot(X, w1))))\nl2 = 1\/(1 + np.exp(-(np.dot(l1, w2))))\n\nnp.round(l2,3)","ec7a86e7":"#make the predictions\nyp = np.argmax(l2, axis=1) # prediction\nres = yp == np.argmax(y, axis=1)\ncorrect = np.sum(res)\/len(res)\n\ntestres = test[['target']].replace([0,1], ['heart-disease','healthy'])\n\ntestres['Prediction'] = yp\ntestres['Prediction'] = testres['Prediction'].replace([0,1], ['heart-disease','healthy',])\n\nprint(testres)\nprint('Accuracy is : ',sum(res),'\/',len(res), ':', (correct*100),'%')","18e8c6f3":" ***THANKYOU! HOPE THIS KERNEL HELPS YOU! AN UPVOTE WILL ENCOURAGE TO MAKE MORE SUCH KERNELS! :))***"}}