{"cell_type":{"fec9a5c4":"code","b1d94df0":"code","7171ac04":"code","fb627033":"code","17f83b0f":"code","c30149e0":"code","4625b2ad":"code","3eedb828":"code","cbfee85d":"code","a38b4374":"code","c513f539":"code","9b3802e5":"code","85705769":"code","15ed59d2":"code","14d2a70d":"code","d3c3aeb4":"code","87779283":"code","0f7c8a59":"code","93c70988":"code","e8463c28":"code","61a9f620":"code","30c6c02e":"code","271e668c":"code","5909a9ad":"code","b5596218":"code","855d3791":"code","bd972f3b":"code","6d25bb4d":"code","4828582d":"code","4827b22c":"code","41eba894":"code","731cab91":"code","f250232c":"code","1707cd63":"code","fc1e473f":"code","a0d6cba4":"code","cdc05621":"code","237341a5":"code","0c3392dc":"code","663b64b7":"code","1f491346":"code","e5d379e0":"code","8c010e89":"code","7245ca3b":"code","2a9083ed":"code","f202feb1":"code","4c438c81":"code","b0fc85ac":"code","7c3d56a2":"code","6c3bf643":"code","e14a551e":"code","2a7639fa":"code","ffe04bf8":"code","49bc7f39":"code","7bb8b87a":"code","63f9e65b":"code","e970b7da":"code","7abbb7fe":"code","0776466f":"markdown","e0e122c4":"markdown","22d79144":"markdown","73930ab2":"markdown","76db572d":"markdown","9220940a":"markdown","baaa5f28":"markdown","213b4bb5":"markdown","a63a0308":"markdown","d293bb8a":"markdown","e6bcf4dd":"markdown","80f25626":"markdown","694a5b51":"markdown","b23e0f3c":"markdown","6ba6b657":"markdown","15033741":"markdown","2dea3def":"markdown","1aaf5ff4":"markdown","874b7499":"markdown","4c4248b6":"markdown","4117d383":"markdown"},"source":{"fec9a5c4":"import datetime\nimport os\nimport time\nwith os.scandir(\"\/kaggle\/input\/covid19-world-testing-progress\") as dir_entries:\n    for entry in dir_entries:\n        unix_timestamp  = int(entry.stat().st_mtime)\n        utc_time = time.gmtime(unix_timestamp)\n        print(f\"Dataset last time updated: {utc_time.tm_year}-{utc_time.tm_mon}-{utc_time.tm_mday}\")\n        break\n        \nldt = datetime.datetime.now()\nprint(f\"Noteboook last time updated: {ldt.year}-{ldt.month}-{ldt.day}\")","b1d94df0":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly import tools\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.express as px\ninit_notebook_mode(connected=True)\nimport warnings\nwarnings.filterwarnings(\"ignore\")","7171ac04":"data_df = pd.read_csv(\"\/kaggle\/input\/covid19-world-testing-progress\/covid-testing.csv\")","fb627033":"data_df['Country'] = data_df['Entity'].apply(lambda x: x.split(\" - \")[0].rstrip().lstrip())\ndata_df['Mode'] = data_df['Entity'].apply(lambda x: x.split(\" - \")[1].rstrip().lstrip())","17f83b0f":"data_df[['Entity', 'Country', 'Mode']].sample(10)","c30149e0":"country_testing = data_df.groupby([\"Entity\", \"Country\", \"Mode\", \"ISO code\"])['Daily change in cumulative total', \n                                                          'Cumulative total',\n                                                           'Cumulative total per thousand',\n                                                           'Daily change in cumulative total per thousand',\n                                                           '7-day smoothed daily change',\n                                                           '7-day smoothed daily change per thousand', \n                                                           'Short-term positive rate',\n                                                           'Short-term tests per case'].max().reset_index()\ncountry_testing.columns = [\"Entity\", \"Country\", \"Mode\", \"iso_code\", 'Daily change in cumulative total', \n                                                          'Cumulative total',\n                                                           'Cumulative total per thousand',\n                                                           'Daily change in cumulative total per thousand',\n                                                           '7-day smoothed daily change',\n                                                           '7-day smoothed daily change per thousand', \n                                                           'Short-term positive rate',\n                                                           'Short-term tests per case']","4625b2ad":"print(f\"Reporting mode (number): {data_df.Mode.nunique()}\")\nprint(f\"Reporting mode (items): {data_df.Mode.unique()}\")","3eedb828":"fig = px.choropleth(locations=country_testing['Country'], \n                    locationmode=\"country names\",\n                    color=country_testing['Mode'],\n                    title=\"Countries with each type of reporting mode\",\n                    height = 500\n                   )\nfig.update_layout({'legend_orientation':'v'})\nfig.update_layout({'legend_title':'Reporting mode'})\nfig.show()","cbfee85d":"fig = px.treemap(country_testing, path = ['Mode', 'Country'], values = 'Cumulative total',\n                title=\"Cumulative total (max registered value) per country, grouped by reporting mode\")\nfig.show()","a38b4374":"fig = px.treemap(country_testing, path = ['Mode', 'Country'], values = 'Cumulative total per thousand',\n                title=\"Cumulative total per thousand (max registered value) per country, grouped by reporting mode\")\nfig.show()","c513f539":"fig = px.treemap(country_testing, path = ['Mode', 'Country'], values = 'Daily change in cumulative total',\n                title=\"Daily change in cumulative total (max registered value) per country, grouped by reporting mode\")\nfig.show()","9b3802e5":"fig = px.treemap(country_testing, path = ['Mode', 'Country'], values = 'Daily change in cumulative total per thousand',\n                title=\"Daily change in cumulative total per thousand (max registered value) per country, grouped by reporting mode\")\nfig.show()","85705769":"fig = px.treemap(country_testing, path = ['Mode', 'Country'], values = '7-day smoothed daily change',\n                title=\"7-day smoothed daily change (max registered value) per country, grouped by reporting mode\")\nfig.show()","15ed59d2":"fig = px.treemap(country_testing, path = ['Mode', 'Country'], values = '7-day smoothed daily change per thousand',\n                title=\"7-day smoothed daily change per thousand (max registered value) per country, grouped by reporting mode\")\nfig.show()","14d2a70d":"fig = px.treemap(country_testing, path = ['Mode', 'Country'], values = 'Short-term positive rate',\n                title=\"Short-term positive rate (max registered value) per country, grouped by reporting mode\")\nfig.show()","d3c3aeb4":"fig = px.treemap(country_testing, path = ['Mode', 'Country'], values = 'Short-term tests per case',\n                title=\"Short-term tests per case (max registered value) per country, grouped by reporting mode\")\nfig.show()","87779283":"fig = px.choropleth(locations=country_testing['Country'], \n                    locationmode=\"country names\",\n                    color=country_testing['Cumulative total'],\n                    title=\"Cumulative total of tests per countries\",\n                    height = 500\n                   )\nfig.update_layout({'legend_orientation':'v'})\nfig.update_layout({'legend_title':'Cumulative total'})\nfig.show()","0f7c8a59":"fig = px.choropleth(locations=country_testing['Country'], \n                    locationmode=\"country names\",\n                    color=country_testing['Cumulative total per thousand'],\n                    title=\"Cumulative total per thousands (population) of tests per countries\",\n                    height = 500\n                   )\nfig.update_layout({'legend_orientation':'v'})\nfig.update_layout({'legend_title':'Cumulative total'})\nfig.show()","93c70988":"fig = px.choropleth(locations=country_testing['Country'], \n                    locationmode=\"country names\",\n                    color=country_testing['Daily change in cumulative total per thousand'],\n                    title=\"Daily change in cumulative total per thousand (max value) per countries\",\n                    height = 500\n                   )\nfig.update_layout({'legend_orientation':'v'})\nfig.update_layout({'legend_title':'Max daily change\/THS'})\nfig.show()","e8463c28":"fig = px.choropleth(locations=country_testing['Country'], \n                    locationmode=\"country names\",\n                    color=country_testing['Daily change in cumulative total'],\n                    title=\"Daily change in cumulative total (max value) per countries\",\n                    height = 500\n                   )\nfig.update_layout({'legend_orientation':'v'})\nfig.update_layout({'legend_title':'Max daily change'})\nfig.show()","61a9f620":"fig = px.choropleth(locations=country_testing['Country'], \n                    locationmode=\"country names\",\n                    color=country_testing['7-day smoothed daily change per thousand'],\n                    title=\"7-day smoothed daily change per thousand (max value) per countries\",\n                    height = 500\n                   )\nfig.update_layout({'legend_orientation':'v'})\nfig.update_layout({'legend_title':'7-day avg change\/THS'})\nfig.show()","30c6c02e":"fig = px.choropleth(locations=country_testing['Country'], \n                    locationmode=\"country names\",\n                    color=country_testing['7-day smoothed daily change'],\n                    title=\"7-day smoothed daily change (max value) per countries\",\n                    height = 500\n                   )\nfig.update_layout({'legend_orientation':'v'})\nfig.update_layout({'legend_title':'7-day avg change'})\nfig.show()","271e668c":"fig = px.choropleth(locations=country_testing['Country'], \n                    locationmode=\"country names\",\n                    color=country_testing['Short-term positive rate'],\n                    title=\"Short-term positive rate (max value) per countries\",\n                    height = 500\n                   )\nfig.update_layout({'legend_orientation':'v'})\nfig.update_layout({'legend_title':'Short-term positive rate'})\nfig.show()","5909a9ad":"fig = px.choropleth(locations=country_testing['Country'], \n                    locationmode=\"country names\",\n                    color=country_testing['Short-term tests per case'],\n                    title=\"Short-term tests per case (max value) per countries\",\n                    height = 500\n                   )\nfig.update_layout({'legend_orientation':'v'})\nfig.update_layout({'legend_title':'Short-term tests per case'})\nfig.show()","b5596218":"def draw_trace_bar(data, feature, title, xlab, ylab,color='Blue'):\n    data = data.sort_values(feature, ascending=False)[0:50]\n    trace = go.Bar(\n            x = data['Country'],\n            y = data[feature],\n            marker=dict(color=color),\n            text=data['Entity']\n        )\n    data = [trace]\n\n    layout = dict(title = title,\n              xaxis = dict(title = xlab, showticklabels=True, tickangle=45, \n                           zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                           showline=True, linewidth=2, linecolor='black', mirror=True,\n                          tickfont=dict(\n                            size=8,\n                            color='black'),), \n              yaxis = dict(title = ylab, gridcolor='lightgrey', zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                          showline=True, linewidth=2, linecolor='black', mirror=True),\n              plot_bgcolor = 'rgba(0, 0, 0, 0)', paper_bgcolor = 'rgba(0, 0, 0, 0)',\n              hovermode = 'closest',\n              barmode='group',\n              height = 600\n             )\n    fig = dict(data = data, layout = layout)\n    iplot(fig, filename='draw_trace')\n","855d3791":"draw_trace_bar(country_testing, 'Daily change in cumulative total', 'Daily change in cumulative total per country (max value, top 50)', 'Country', 'Daily change in cumulative total', \"Darkgreen\" )","bd972f3b":"draw_trace_bar(country_testing, 'Cumulative total', 'Cumulative total per country (max value, top 50)', 'Country', 'Cumulative total' )","6d25bb4d":"draw_trace_bar(country_testing, 'Cumulative total per thousand', 'Cumulative total per thousand per country (max value, top 50)', 'Country', 'Cumulative total per thousand', \"red\" )","4828582d":"draw_trace_bar(country_testing, 'Daily change in cumulative total per thousand', 'Daily change in cumulative total per thousand per country (max value, top 50)', 'Country',\\\n               'Daily change in cumulative total per thousand', \"magenta\" )","4827b22c":"draw_trace_bar(country_testing, '7-day smoothed daily change', '7-day smoothed daily change per country (max value, top 50)', 'Country',\\\n               '7-day smoothed daily change', \"lightblue\" )","41eba894":"draw_trace_bar(country_testing, '7-day smoothed daily change per thousand', '7-day smoothed daily change per thousand per country (max value, top 50)', 'Country',\\\n               '7-day smoothed daily change per thousand', \"orange\" )","731cab91":"draw_trace_bar(country_testing, 'Short-term positive rate', 'Short-term positive rate per country (max value, top 50)', 'Country',\\\n               'Short-term positive rate', \"lightgreen\" )","f250232c":"draw_trace_bar(country_testing, 'Short-term tests per case', 'Short-term tests per case per country (max value, top 50)', 'Country',\\\n               'Short-term tests per case', \"darkgreen\" )","1707cd63":"def plot_custom_scatter(df, x, y, size, color, hover_name, title):\n    fig = px.scatter(df, x=x, y=y, size=size, color=color,\n               hover_name=hover_name, size_max=80, title = title)\n    fig.update_layout({'legend_orientation':'h'})\n    fig.update_layout({'height': 800})\n    fig.update_layout(legend=dict(yanchor=\"top\", y=-0.2))\n    fig.update_layout({'legend_title':'Testing country and modality'})\n    fig.update_layout({'plot_bgcolor': 'rgba(0, 0, 0, 0)','paper_bgcolor': 'rgba(0, 0, 0, 0)'})\n    fig.update_xaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_yaxes(showline=True, linewidth=2, linecolor='black', mirror=True)\n    fig.update_xaxes(zeroline=True, zerolinewidth=1, zerolinecolor='grey')\n    fig.update_yaxes(zeroline=True, zerolinewidth=1, zerolinecolor='grey')\n    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgrey')\n    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgrey')\n    fig.show()    ","fc1e473f":"country_testing = country_testing.dropna()","a0d6cba4":"plot_custom_scatter(country_testing, x=\"Cumulative total\", y=\"Cumulative total per thousand\", size=\"Cumulative total\", color=\"Mode\",\n           hover_name=\"Country\", title = \"Testing cumulative total and total\/THS, grouped per mode (max values)\")","cdc05621":"plot_custom_scatter(country_testing, x=\"Daily change in cumulative total\", y=\"Daily change in cumulative total per thousand\", \n                    size=\"Daily change in cumulative total\", color=\"Mode\",\n           hover_name=\"Country\", title = \"Daily change in cumulative total vs total per thousand grouped per mode (max values)\")","237341a5":"plot_custom_scatter(country_testing, x=\"Cumulative total\", y=\"Daily change in cumulative total\", size=\"Cumulative total\", color=\"Mode\",\n           hover_name=\"Country\", title = \"Testing cumulative total and daily change in cumulative total, grouped per mode (max values)\")","0c3392dc":"plot_custom_scatter(country_testing, x=\"Cumulative total per thousand\", y=\"Daily change in cumulative total per thousand\", size=\"Cumulative total\", color=\"Mode\",\n           hover_name=\"Country\", title = \"Testing cumulative total\/THS and daily change in cumulative total\/THS, per country, grouped per mode (max values)\")","663b64b7":"plot_custom_scatter(country_testing, x=\"7-day smoothed daily change\", y=\"7-day smoothed daily change per thousand\", size=\"Cumulative total\", color=\"Mode\",\n           hover_name=\"Country\", title = \"7-day smoothed daily change (total and per THS), per country, grouped per mode (max values)\")","1f491346":"plot_custom_scatter(country_testing, x=\"Daily change in cumulative total\", y=\"Short-term tests per case\", size=\"Cumulative total\", color=\"Mode\",\n           hover_name=\"Country\", title = \"Short-term tests per case vs Daily change in cumulative total, per country, grouped per mode (max values)\")","e5d379e0":"plot_custom_scatter(country_testing, x=\"Daily change in cumulative total\", y=\"Short-term positive rate\", size=\"Cumulative total\", color=\"Mode\",\n           hover_name=\"Country\", title = \"Short-term positive rate vs Daily change in cumulative total, per country, grouped per mode (max values)\")","8c010e89":"country_testing_time = data_df[[\"Entity\", \"Country\", \"Mode\", \"Date\", \"ISO code\", 'Daily change in cumulative total', \n                                                          'Cumulative total',\n                                                           'Cumulative total per thousand',\n                                                           'Daily change in cumulative total per thousand',\n                                                           '7-day smoothed daily change',\n                                                           '7-day smoothed daily change per thousand', \n                                                           'Short-term positive rate',\n                                                           'Short-term tests per case']].dropna()","7245ca3b":"countries = ['Austria', 'Belgium','Cyprus', 'Czechia', 'Denmark', 'Estonia', 'Finland', 'France', 'Germany',\n             'Greece', 'Israel', 'Italy', 'Japan', 'Malta','Netherlands', 'Norway','Poland', 'Portugal', 'Romania', 'Spain', 'Sweden',\n             'United Kingdom', 'United States', 'China']","2a9083ed":"def plot_time_variation_countries_group(data_df, feature, title, countries):\n    data = []\n    for country in countries:\n        df = data_df.loc[data_df.Country==country]\n        trace = go.Scatter(\n            x = df['Date'],y = df[feature],\n            name=country,\n            mode = \"lines\",\n            marker_line_width = 1,\n            marker_size = 8,\n            marker_symbol = 'circle',\n            text=df['Country'])\n        data.append(trace)\n    layout = dict(title = title,\n          xaxis = dict(title = 'Date', showticklabels=True,zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                       showline=True, linewidth=2, linecolor='black', mirror=True,\n                       tickfont=dict(size=10,color='darkblue'),), \n          yaxis = dict(title = feature, gridcolor='lightgrey', zeroline=True, zerolinewidth=1, zerolinecolor='grey',\n                       showline=True, linewidth=2, linecolor='black', mirror=True, type=\"log\"),\n                       plot_bgcolor = 'rgba(0, 0, 0, 0)', paper_bgcolor = 'rgba(0, 0, 0, 0)',\n         hovermode = 'x', \n         height=600\n         )\n    fig = dict(data=data, layout=layout)\n    iplot(fig, filename='all_countries')","f202feb1":"plot_time_variation_countries_group(country_testing_time, 'Cumulative total', 'Total testing evolution (selected countries, log scale)', countries)","4c438c81":"plot_time_variation_countries_group(country_testing_time, 'Daily change in cumulative total', 'Daily change in cumulative total testing evolution (selected countries, log scale)', countries)","b0fc85ac":"plot_time_variation_countries_group(country_testing_time, 'Cumulative total per thousand', 'Cumulative total per thousand testing evolution (selected countries, log scale)', countries)","7c3d56a2":"plot_time_variation_countries_group(country_testing_time, 'Daily change in cumulative total per thousand', 'Daily change in cumulative total per thousand testing evolution (selected countries, log scale)', countries)","6c3bf643":"plot_time_variation_countries_group(country_testing_time, '7-day smoothed daily change', '7-day smoothed daily change testing evolution (selected countries, log scale)', countries)","e14a551e":"plot_time_variation_countries_group(country_testing_time, '7-day smoothed daily change per thousand', '7-day smoothed daily change per thousand testing evolution (selected countries, log scale)', countries)","2a7639fa":"from wordcloud import WordCloud, STOPWORDS\ndef show_wordcloud(data, title=\"\"):\n    text = \" \".join(t for t in data.dropna())\n    stopwords = set(STOPWORDS)\n    stopwords.update([\"t\", \"co\", \"https\", \"amp\", \"U\"])\n    wordcloud = WordCloud(stopwords=stopwords, scale=4, max_font_size=50, max_words=500,background_color=\"black\").generate(text)\n    fig = plt.figure(1, figsize=(16,16))\n    plt.axis('off')\n    fig.suptitle(title, fontsize=20)\n    fig.subplots_adjust(top=2.3)\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.show()","ffe04bf8":"show_wordcloud(data_df['Notes'], title = 'Prevalent words in Notes')","49bc7f39":"show_wordcloud(data_df['Source label'], title = 'Prevalent words in Source label')","7bb8b87a":"import nltk\nimport gensim\nimport re\nfrom gensim.utils import simple_preprocess\n\n# Remove punctuation\nfiltered_data_df = data_df.loc[~data_df.Notes.isna()]\nfiltered_data_df['notes_processed'] = filtered_data_df['Notes'].map(lambda x: re.sub('[,\\.!?]', '', x))\n# Convert the titles to lowercase\nfiltered_data_df['notes_processed'] = filtered_data_df['notes_processed'].map(lambda x: x.lower())\n\n\nnltk.download('stopwords')\nen_stop = set(nltk.corpus.stopwords.words('english'))\n\nen_stop.update(['nan','https', 'http'])\n\ndef sent_to_words(sentences):\n    for sentence in sentences:\n        # deacc=True removes punctuations\n        yield(gensim.utils.simple_preprocess(str(sentence), deacc=True))\ndef remove_stopwords(texts):\n    return [[word for word in simple_preprocess(str(doc)) \n             if word not in en_stop] for doc in texts]\n\ndef filter_size(texts):\n    return [[word for word in simple_preprocess(str(doc)) \n             if len(word) > 4 ] for doc in texts]\n\ndata = filtered_data_df['notes_processed'].values.tolist()\ndata_words = list(sent_to_words(data))\n# remove stop words\ndata_words = remove_stopwords(data_words)\ndata_words = filter_size(data_words)\nprint(data_words[:1][0][:30])","63f9e65b":"import gensim.corpora as corpora\nfrom pprint import pprint\n\n# create dictionary\nid2word = corpora.Dictionary(data_words)\n# create corpus\ntexts = data_words\n# term document frequency\ncorpus = [id2word.doc2bow(text) for text in texts]\n# view\npprint(corpus[:1][0][:30])","e970b7da":"# number of topics\nnum_topics = 10\n# build LDA model\nlda_model = gensim.models.LdaMulticore(corpus=corpus,\n                                       id2word=id2word,\n                                       num_topics=num_topics)\n# print the keyword in the 10 topics\npprint(lda_model.print_topics())\ndoc_lda = lda_model[corpus]","7abbb7fe":"import pyLDAvis.gensim_models\nlda_display = pyLDAvis.gensim_models.prepare(lda_model, corpus, id2word, sort_topics=False)\npyLDAvis.enable_notebook()\npyLDAvis.save_html(lda_display, \"lda_vis.html\")","0776466f":"We will only show progress for a selection of countries.","e0e122c4":"**Observation**   \n\nSome of the countries appears with 2 entries: this is because in that country there are two different modes of reporting - and there is one entry per each reporting mode.\n\n\n","22d79144":"\n<a id=\"3\"><\/a><h1 style='background:#2676DE; border:0; color:white'><center>Which country tests most?<\/center><\/h1>","73930ab2":"<small><a href='#0'>Go to top<\/a><\/small>  ","76db572d":"<small><a href='#0'>Go to top<\/a><\/small>  ","9220940a":"Let's perform topic analysis on the notes.","baaa5f28":"\n<a id=\"2\"><\/a><h1 style='background:#2676DE; border:0; color:white'><center>Testing reporting mode per country<\/center><\/h1>\n\nEach country is using a different mode to report the testing.  \nLet's look to the list of the reporting modes.","213b4bb5":"\n<a id=\"4\"><\/a><h1 style='background:#2676DE; border:0; color:white'><center>Top per country - how many are tested<\/center><\/h1>\n\nLet's look now to the top (per countries) in terms of:\n\n* Daily change in cumulative total;   \n* Cumulative total;  \n* Cumulative total per thousand;  \n* Daily change in cumulative total per thousand;  \n* 7-day smoothed daily change;  \n* 7-day smoothed daily change per thousand;    \n* Short-term positive rate;  \n* Short-term tests per case.\n\n\nWe will look to **top 50** per country. Multiple modes are shown on the same graph.","a63a0308":"Let's also visualize the testing reported values per mode and country using treemaps.","d293bb8a":"<center><h1>COVID-19 Testing Evolution<\/h1><\/center>\n<br>\n<center><img src=\"https:\/\/oklahoma.gov\/content\/dam\/ok\/en\/covid19\/images\/homepage-images\/COVID-Web_Card%20-%20Testing.png\" width=400><\/img><\/center>  \n\n<br>\n\n<h1 style='background:#2676DE; border:0; color:white'><center>Introduction<\/center><\/h1> \n\nThe data (country testings) contains the following information:\n* **Entity**- this is the  country for which the testing information is provided as well as type of testing counting, such as: `people tested`, `tests performed` or `unclear unit`; this entity can be further split in `country` and `type of testing counting`;     \n* **ISO Code** - ISO code for the country;   \n* **Date** - date for the data entry;   \n* **Source URL** - this is the source for daily data in the country; usually, this will be a public site; \n* **Source Label** - human readable title of the entity providing the information; ex: Ministry of Health;  \n* **Notes** - explanatory notes related to the collected data;  \n* **Daily change in cumulative total** - for a certain data entry, the number of tests for that date\/country;  \n* **Cumulative total** - for a certain data entry, the total (cumulative, up to date) number of tests for that date\/country;  \n* **Cumulative total per thousands** - for a certain data entry, the total (cumulative, up to date)number of tests for that date\/country per thousands of people in the population;   \n* **Daily change in cumulative total per thousands** - for a certain data entry, the number of tests for that date\/country per thousands of people in the population;  \n* **7-day smoothed daily change** - averaged value of daily change in number of tests for the current date in the country;    \n* **7-day smoothed daily change per thousands** - averaged value of daily change in number of tests per thousands people for the current date in the country;    \n* **Short-term positive rate** - Averaged on short period positive rate for the tests - for date\/country;   \n* **Short-term tests per case** - Averaged on short period tests\/confirmed case - for date\/country;    \n\n\n\n<a id=\"0\"><\/a>\n\n### Content  \n\n* <a href='#1'><font style='background:#2676DE; border:0; color:white'>Analysis preparation<\/font><\/a>  \n* <a href='#2'><font style='background:#2676DE; border:0; color:white'>Testing reporting mode per country<\/font><\/a> \n* <a href='#3'><font style='background:#2676DE; border:0; color:white'>Which country tests more?<\/font><\/a> \n* <a href='#4'><font style='background:#2676DE; border:0; color:white'>Top per country - how many are tested<\/font><\/a>  \n* <a href='#5'><font style='background:#2676DE; border:0; color:white'>Countries selection - how testing progressed<\/font><\/a>  \n* <a href='#6'><font style='background:#2676DE; border:0; color:white'>What is in the notes?<\/font><\/a>  \n\n\n### Last updated\n","e6bcf4dd":"<small><a href='#0'>Go to top<\/a><\/small>  ","80f25626":"Let's inspect, using WordCloud, the most frequent words that appears in Notes and Source label.","694a5b51":"<small><a href='#0'>Go to top<\/a><\/small> ","b23e0f3c":"<a id=\"1\"><\/a><h1 style='background:#2676DE; border:0; color:white'><center>Analysis preparation<\/center><\/h1>\n\n\nWe initialize the Python packages we will use for data ingestion, preparation and visualization. We will use mostly Plotly for visualization.\nThen we read the data file and aggregate the data on few fields (entity and iso_code).\n\nWe will mainly look to:\n* Which country tests mostly;  \n* Total (cumulative) number of tests and tests per thousands;  \n* Daily tests and daily tests per thousands; \n\nWe visualize the latest (maximum) values and as well for the variation in time of the above mentioned values.   \n\nWe will also analyze the Notes (text darta)\n\n","6ba6b657":"Let's first split `Entity` in `Country` and `Mode`.","15033741":"Let's check the result for few rows.","2dea3def":"<small><a href='#0'>Go to top<\/a><\/small>  ","1aaf5ff4":"\n<a id=\"5\"><\/a><h1 style='background:#2676DE; border:0; color:white'><center>Countries selection - how testing progressed<\/center><\/h1>","874b7499":"<small><a href='#0'>Go to top<\/a><\/small>  ","4c4248b6":"\n<a id=\"6\"><\/a><h1 style='background:#2676DE; border:0; color:white'><center>What is in the notes?<\/center><\/h1>","4117d383":"<small><a href='#0'>Go to top<\/a><\/small>  "}}