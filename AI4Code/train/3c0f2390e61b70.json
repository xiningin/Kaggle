{"cell_type":{"04ab18c8":"code","08cbb5fe":"code","4e9ee176":"code","de309308":"code","891f81df":"code","f0bd53dc":"code","127fc8d2":"code","9c0e02eb":"code","b3706613":"code","d93da828":"code","9a50ace3":"code","572f9180":"code","7f087875":"code","faeb8118":"code","84dc98a4":"code","d6295c05":"code","68f24d79":"code","ac7d1c10":"code","dbc7bb22":"code","29e236a1":"code","c879e417":"code","3f7e08eb":"code","810ec67c":"markdown","0e21a7ef":"markdown"},"source":{"04ab18c8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nfrom matplotlib import pyplot as plt\nimport matplotlib.ticker as ticker\n\nimport seaborn as sns\nimport os\nimport warnings\n","08cbb5fe":"df = pd.read_csv('..\/input\/books.csv', error_bad_lines = False)","4e9ee176":"df.head()","de309308":"df.describe()","891f81df":"null_count = df.isnull().sum().sort_values(ascending=False)\npercent_1 = df.isnull().sum()\/df.isnull().count()*100\npercent_2 = (round(percent_1, 1)).sort_values(ascending=False)\nmissing_data = pd.concat([null_count, percent_2], axis=1, keys=['Total', '%'])\nmissing_data.head(5)","f0bd53dc":"most_read_lang = df['language_code'].value_counts().head(10)\nncount = df['bookID'].count()\nplt.figure(figsize=(12,8))\nsns.set(style=\"darkgrid\")\nax = sns.barplot(most_read_lang.index, most_read_lang.values, alpha=0.9)\nplt.title('Frequency Distribution of Books in various languages')\nplt.ylabel('Number of Books', fontsize=12)\nplt.xlabel('Language Code', fontsize=12)\n\n# Make twin axis\nax2=ax.twinx()\n\n# Switch so count axis is on right, frequency on left\nax2.yaxis.tick_left()\nax.yaxis.tick_right()\n\n# Also switch the labels over\nax.yaxis.set_label_position('right')\nax2.yaxis.set_label_position('left')\n\nax2.set_ylabel('Frequency [%]')\n\nfor p in ax.patches:\n    x=p.get_bbox().get_points()[:,0]\n    y=p.get_bbox().get_points()[1,1]\n    ax.annotate('{:.1f}%'.format(100.*y\/ncount), (x.mean(), y), \n            ha='center', va='bottom') # set the alignment of the text\n\n# Use a LinearLocator to ensure the correct number of ticks\nax.yaxis.set_major_locator(ticker.LinearLocator(11))\n\n# Fix the frequency range to 0-100\nax2.set_ylim(0,100)\nax.set_ylim(0,ncount)\n\n# And use a MultipleLocator to ensure a tick spacing of 10\nax2.yaxis.set_major_locator(ticker.MultipleLocator(10))\n\n# Need to turn the grid on ax2 off, otherwise the gridlines end up on top of the bars\nax2.grid(None)","127fc8d2":"df_new = df[(df.language_code == 'eng') | (df.language_code == 'en-US') | (df.language_code == 'en-GB')]","9c0e02eb":"h_labels = [x.replace('_', ' ').title() for x in \n            list(df_new.select_dtypes(include=['number', 'bool']).columns.values)]\n\nfig, ax = plt.subplots(figsize=(10,6))\nsns.heatmap(df_new.corr(), annot=True, xticklabels=h_labels, yticklabels=h_labels, cmap=sns.cubehelix_palette(as_cmap=True), ax=ax)","b3706613":"most_rated = df.sort_values('ratings_count',ascending=False).head(10).set_index('title')\nplt.subplots(figsize=(12,8))\nsns.set(style=\"darkgrid\")\n\nax = most_rated['ratings_count'].sort_values().plot.barh(width=0.8,color=sns.color_palette('hls',12))\nax.set_xlabel(\"Total ratings count \", fontsize=15)\nax.set_ylabel(\"Book Title\", fontsize=15)\nax.set_title(\"Top 10 most rated books\",fontsize=20,color='black')\n\nfor i in ax.patches:\n    ax.text(i.get_width()+5, i.get_y()+.3,str(round(i.get_width())), fontsize=15, color='black')\nplt.show()","d93da828":"def categorize_rating(data):\n    values = []\n    for val in data.average_rating:\n        if val>=0 and val<=1:\n            values.append(\"Poor\")\n        elif val>1 and val<=2:\n            values.append(\"Below Average\")\n        elif val>2 and val<=3:\n            values.append(\"Average\")\n        elif val>3 and val<=4:\n            values.append(\"Good\")\n        elif val>4 and val<=5:\n            values.append(\"Excellent\")\n        else:\n            values.append(\"NaN\")\n    print(len(values))\n    return values","9a50ace3":"df_new['rating_category'] = categorize_rating(df_new)\ndf_new.head()","572f9180":"x = df_new['average_rating']\ny = df_new['# num_pages']\nz = np.log10(df_new['ratings_count']+1)\np = np.log10(df_new['text_reviews_count']+1)\nc = df_new['rating_category']\n\nsns.pairplot(pd.DataFrame(list(zip(x,y,z,p,c)),columns=['average_rating','No. of Pages', 'Rating Count', 'Text Review Count',\n                                                      'rating_category']),\n                           hue='rating_category',markers=\"o\",palette=\"husl\")","7f087875":"rating_value = df_new['rating_category'].value_counts()\nprint(rating_value)","faeb8118":"plt.subplots(figsize=(10,8))\nsns.set(style=\"whitegrid\")\nax = sns.barplot(rating_value.index, rating_value.values, alpha=0.9, palette= sns.color_palette(\"pastel\"))\nplt.title('Frequency Distribution of various Ratings for English Books')\nplt.ylabel('Number of Books', fontsize=12)\nplt.xlabel('Rating Categories', fontsize=12)\n\n# Make twin axis\nax2=ax.twinx()\n\n# Switch so count axis is on right, frequency on left\nax2.yaxis.tick_left()\nax.yaxis.tick_right()\n\n# Also switch the labels over\nax.yaxis.set_label_position('right')\nax2.yaxis.set_label_position('left')\n\nax2.set_ylabel('Frequency [%]')\n\nfor p in ax.patches:\n    x=p.get_bbox().get_points()[:,0]\n    y=p.get_bbox().get_points()[1,1]\n    ax.annotate('{:.1f}%'.format(100.*y\/ncount), (x.mean(), y), \n            ha='center', va='bottom') # set the alignment of the text\n\n# Use a LinearLocator to ensure the correct number of ticks\nax.yaxis.set_major_locator(ticker.LinearLocator(11))\n\n# Fix the frequency range to 0-100\nax2.set_ylim(0,100)\nax.set_ylim(0,ncount)\n\n# And use a MultipleLocator to ensure a tick spacing of 10\nax2.yaxis.set_major_locator(ticker.MultipleLocator(10))\n\n# Need to turn the grid on ax2 off, otherwise the gridlines end up on top of the bars\nax2.grid(None)","84dc98a4":"df_new = df_new.drop(['isbn','isbn13','bookID'],axis=1)\ndf_new.head()","d6295c05":"plt.subplots(figsize=(10,8))\nsns.set(style=\"whitegrid\")\nax = sns.stripplot(x=\"rating_category\", y=\"ratings_count\", data=df_new)","68f24d79":"ax = sns.boxplot(x=df_new[\"rating_category\"], y=np.log10(df_new[\"ratings_count\"]+1))","ac7d1c10":"plt.subplots(figsize=(10,6))\nsns.violinplot(\n    x='rating_category',\n    y='# num_pages',\n    data=df_new)","dbc7bb22":"#ignoring data above 1000 pages\ndata_1 = df[df['# num_pages']<= 1000]","29e236a1":"ax = sns.jointplot(x=\"average_rating\", y=\"# num_pages\", data = data_1, color = 'lightgreen')\nax.set_axis_labels(\"Average Rating\", \"Number of Pages\")","c879e417":"most_popular_authors = df_new.groupby('authors')['title'].count().reset_index().sort_values('title',ascending=False).head(10).set_index('authors')\n\nplt.subplots(figsize=(12,8))\nsns.set(style=\"darkgrid\")\n\nax = most_popular_authors['title'].sort_values().plot.barh(width=0.8,color=sns.color_palette('pastel',12))\nax.set_xlabel(\"Total no. of Books\", fontsize=15)\nax.set_ylabel(\"Authors\", fontsize=15)\nax.set_title(\"Top 10 Authors with higher book counts\",fontsize=20,color='black')\n\nfor i in ax.patches:\n    ax.text(i.get_width()+1, i.get_y()+.3,str(round(i.get_width())), fontsize=15, color='black')\nplt.show()","3f7e08eb":"## Authors with ratings more than 4.5\nmost_rated_authors = df_new[df_new[\"average_rating\"]>4.5]\nmost_popular = most_rated_authors.groupby('authors')['title'].count().reset_index().sort_values('title',ascending=False).head(10).set_index('authors')\n\nplt.subplots(figsize=(12,8))\nsns.set(style=\"darkgrid\")\n\nax = most_popular['title'].sort_values().plot.barh(width=0.8,color=sns.color_palette('colorblind',12))\nax.set_xlabel(\"Total no. of Books\", fontsize=15)\nax.set_ylabel(\"Authors\", fontsize=15)\nax.set_title(\"Top 10 Authors with higher Ratings\",fontsize=20,color='black')\n\nfor i in ax.patches:\n    ax.text(i.get_width(), i.get_y()+.3,str(round(i.get_width())), fontsize=15, color='black')\nplt.show()","810ec67c":"**There are no missing values in the dataset**","0e21a7ef":"More than 90 percent of the books in the dataset consists belongs to English - eng, en-US and en-GB. So, limiting our analysis to English books only."}}