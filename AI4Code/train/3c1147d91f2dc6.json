{"cell_type":{"c8725405":"code","2f7b615e":"code","32562d0a":"code","8e9a212d":"code","b3319a61":"code","12b3ee34":"code","de4e4159":"code","1351d942":"code","2fc405d0":"code","5f002092":"code","47792b35":"code","59378538":"code","a3c8f732":"code","195048c6":"code","1b00155e":"code","af86cc7f":"code","37fcbd17":"code","b0105972":"code","f0f829ea":"code","0980ce2b":"code","e755d64a":"code","6f4cc458":"code","e5da2c55":"markdown","9334a437":"markdown","035350f6":"markdown","6b572a35":"markdown","063733d1":"markdown","2474a20a":"markdown","621edfcb":"markdown","fa6499a1":"markdown","edebf3f6":"markdown"},"source":{"c8725405":"#Import Useful Libraries\nimport numpy as np\nimport pandas as pd\nimport re\n\n#Visualization Libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\n\n\n#NLP Related Libraries\nfrom nltk.corpus import wordnet\nfrom nltk.corpus import stopwords\nimport nltk\nfrom textblob import TextBlob\n","2f7b615e":"#Import dataset\ndf = pd.read_csv('..\/input\/hotel-reviews-city-chennai\/chennai_reviews.csv')\ndf.head()","32562d0a":"#Describe the shape (rows,columns)\ndf.shape","8e9a212d":"#Describe the data types of every column values\ndf.info()","b3319a61":"#Remove noisy data from column 6,7,8,9\n#Remove the columns that have 'unnamed' in the column name\ndf = df.loc[:, ~df.columns.str.contains('^Unnamed')]\ndf.head()","12b3ee34":"#Replace empty cells with 'Unavailable' in Review_Title column \nvalues = {'Hotel_name': 'Unavailable', 'Review_Title': 'Unavailable', 'Review_Text': 'Unavailable'}\ndf = df.fillna(value=values)\ndf.head()\n","de4e4159":"#Replace noisy data in column Sentiment and Rating_Percentage with column mean value\ndf['Sentiment'] = df['Sentiment'].str.replace(r'[^0-9]','')\ndf['Rating_Percentage'] = df['Rating_Percentage'].str.replace(r'[^0-9]+','')\n\n#Remove white spaces\ndf['Sentiment'] = df['Sentiment'].str.replace(r'[s+]','')\n\n#Fill missing values\ndf['Sentiment'] = df['Sentiment'].fillna(2)\ndf['Rating_Percentage'] = df['Rating_Percentage'].fillna(72)\n","1351d942":"df.head()","2fc405d0":"#Count Plot for Sentiment Values\nsns.countplot(df['Sentiment'])","5f002092":"#Count Plot for Rating Percentage\nsns.countplot(df['Rating_Percentage'])\n","47792b35":"#Count plot of the Hotel Names\nsns.set(rc={'figure.figsize':(11.7,55)})\nsns.countplot(y=df['Hotel_name'],data=df).set_title('Count of Reviews Per Hotel')\nsns.despine()","59378538":"#Sentiment Analysis of Review Title and Review Text\n\n#Preprocessing value\n\n#Convert to lower case\ndef preprocess(column_name):\n    column_name = column_name.str.lower()\n    column_name = column_name.str.replace(r\"^[a-zA-Z]\\s+\",\"\")\n    column_name = column_name.str.replace(r\"wouldn't\",\"would not\")\n    column_name = column_name.str.replace(r\"ain't\",\"am not\")\n    column_name = column_name.str.replace(r\"isn't\",\"is not\")\n    column_name = column_name.str.replace(r\"aren't\",\"are not\")\n    column_name = column_name.str.replace(r\"can't\",\"can not\")\n    column_name = column_name.str.replace(r\"shouldn't\",\"should not\")\n    column_name = column_name.str.replace(r\"shan't\",\"shall not\")\n    column_name = column_name.str.replace(r\"won't\",\"will not\")\n    column_name = column_name.str.replace(r\"hasn't\",\"has not\")\n    column_name = column_name.str.replace(r\"hadn't\",\"had not\")\n    column_name = column_name.str.replace(r\"don't\",\"do not\")\n    column_name = column_name.str.replace(r\"couldn't\",\"could not\")\n    column_name = column_name.str.replace(r\"didn't\",\"did not\")\n    column_name = column_name.str.replace(r\"aint\",\"am not\")\n    column_name = column_name.str.replace(r\"isnt\",\"is not\")\n    column_name = column_name.str.replace(r\"wouldnt\",\"would not\")\n    column_name = column_name.str.replace(r\"aint\",\"am not\")\n    column_name = column_name.str.replace(r\"isnt\",\"is not\")\n    column_name = column_name.str.replace(r\"arent\",\"are not\")\n    column_name = column_name.str.replace(r\"cant\",\"can not\")\n    column_name = column_name.str.replace(r\"shouldnt\",\"should not\")\n    column_name = column_name.str.replace(r\"shant\",\"shall not\")\n    column_name = column_name.str.replace(r\"wont\",\"will not\")\n    column_name = column_name.str.replace(r\"hasnt\",\"has not\")\n    column_name = column_name.str.replace(r\"hadnt\",\"had not\")\n    column_name = column_name.str.replace(r\"dont\",\"do not\")\n    column_name = column_name.str.replace(r\"couldnt\",\"could not\")\n    column_name = column_name.str.replace(r\"didnt\",\"did not\")\n    column_name = column_name.str.replace(r\"aint\",\"am not\")\n    column_name = column_name.str.replace(r\"isnt\",\"is not\")    \n\n    \n    return column_name","a3c8f732":"df.Review_Title = preprocess(df.Review_Title)\ndf.Review_Text = preprocess(df.Review_Text)\ndf.head()","195048c6":"#TODO: Implement remove_not() for dataframe values\n'''\ndef remove_not():\n    for i in range(df.Review_Title.size):\n        words = nltk.word_tokenize(df.Review_Title[i])\n        new_words = []\n        temp_word = \"\"\n        for word in words:\n            antonyms = []\n            if word == \"not\":\n                temp_word = \"not_\"\n            elif temp_word == \"not_\":\n                for syn in wordnet.synsets(word):\n                    for s in syn.lemmas():\n                        for a in s.antonyms():\n                            antonyms.append(a.name())\n                if len(antonyms) >= 1:\n                    word = antonyms[0]\n                else:\n                    word = temp_word + word\n                temp_word = \"\"\n\n            if word != \"not\":\n                new_words.append(word)\n\n        df.Review_Title[i] = ' '.join(new_words) \n\n\n    return df.Review_Title\nremove_not()\n'''","1b00155e":"#Remove StopWords\ndef stopwords_removal(dfCol):\n    \n    dfCol = dfCol.astype(str)\n    for j in range(dfCol.size):\n        sentences = nltk.word_tokenize(dfCol[j])\n        for i in range(len(sentences)):\n            words = nltk.word_tokenize(sentences[i])\n            newWords = [word for word in words if word not in stopwords.words('english')]\n            sentences[i] = ' '.join(newWords)\n        #dfCol[] \n    return dfCol","af86cc7f":"df.head(563)","37fcbd17":"#TODO: create a fxn that takes all the params and gives an overall score\n#Sentiment Analysis of Hotel\n\n#This function will take a hotel name \n#and generate visualization based on Review Title, Review Text, Sentiment and Rating Percentage\n\ndef sentiment_analysis_fxn(hotel_name):\n    \n    if df[df.Hotel_name == hotel_name].empty:\n        print(\"This hotel name does not exists !\")\n        \n    else:\n        #Analysis of Review_Title column\n        review_title = df[df.Hotel_name == hotel_name].iloc[:,1].to_string()\n        title_analysis = TextBlob(review_title)\n        review_title_polarity = title_analysis.sentiment.polarity\n        \n        #Analysis Review_Text column\n        review_text = df[df.Hotel_name == hotel_name].iloc[:,2].to_string()\n        text_analysis = TextBlob(review_text)\n        review_text_polarity = text_analysis.sentiment.polarity\n        \n        \n        #Analysis of Sentiment column\n        sentiment_sum_value = 0\n        review_sentiment = df[df.Hotel_name == hotel_name].iloc[:,3].tolist()\n        for i in range(len(review_sentiment)):\n            sentiment_sum_value = sentiment_sum_value + int(review_sentiment[i])\n        \n        #Normalize sentiment_sum_value\n        sentiment_sum_value \/= len(review_sentiment)\n        \n        \n        #Analysis of Rating Percentage\n        rating_sum_value = 0\n        review_rating = df[df.Hotel_name == hotel_name].iloc[:,4].tolist()\n        for i in range(len(review_rating)):\n            rating_sum_value = rating_sum_value + int(review_rating[i])\n            \n        #Normalize rating_sum_value\n        rating_sum_value \/= (len(review_rating) * 72)\n        \n        total_polarity = review_text_polarity + review_title_polarity + sentiment_sum_value + rating_sum_value\n        \n        print(\"Score for \"+hotel_name.upper()+\" out of 7 is: \", total_polarity)\n    \n","b0105972":"sentiment_analysis_fxn('Accord Metropolitan')\nsentiment_analysis_fxn('Somerset Greenways')\nsentiment_analysis_fxn('Bell Hotel Chennai')\n#x = df.Hotel_name\n#x = x.unique()\n\n#for names in range(len(x)):\n #   y = sentiment_analysis_fxn(x[names])\n\n#print(y)","f0f829ea":"def sentiment_analysis_insights(hotel_name):\n    print(\"** SENTIMENT ANALYSIS RESULT OF HOTEL:\",hotel_name.upper()+\" **\\n\\n\")\n    Neutral = 0\n    Weak_Positive = 0\n    Mild_Positive = 0\n    Strong_Positive = 0\n    Weak_Negative = 0\n    Mild_Negative = 0\n    Strong_Negative = 0\n\n    if df[df.Hotel_name == hotel_name].empty:\n        print(\"This hotel name does not exists !\")\n        \n    else:\n        review_title = df[df.Hotel_name == hotel_name].iloc[:,1]\n        for values in review_title:\n            title_analysis = TextBlob(values)\n            review_title_polarity = title_analysis.sentiment.polarity\n            \n            if(review_title_polarity == 0 ):\n                Neutral += 1\n    \n            elif(review_title_polarity > 0 and review_title_polarity < .3):\n                Weak_Positive += 1\n            \n            elif(review_title_polarity >= .3  and review_title_polarity < .6):\n                Mild_Positive += 1\n        \n            elif(review_title_polarity >= .6 and review_title_polarity <= 1 ):\n                Strong_Positive += 1\n              \n            elif(review_title_polarity >= -.3 and review_title_polarity < 0):\n                Weak_Negative += 1\n        \n            elif(review_title_polarity >= -.6 and review_title_polarity < -.3):\n                Mild_Negative += 1\n        \n            elif(review_title_polarity >= -1 and review_title_polarity < -.6):\n                Strong_Negative += 1\n        \n        \n        \n        print('********************************************************')    \n        print('TOTAL NEUTRAL IS:' + str(Neutral))\n        print('TOTAL WEAK POSITIVE IS:' + str(Weak_Positive))\n        print('TOTAL MILDLY POSITIVE IS:' + str(Mild_Positive))\n        print('TOTAL STRONGLY POSITIVE IS:' + str(Strong_Positive))\n        print('TOTAL WEAKLY NEGATIVE IS:' + str(Weak_Negative))\n        print('TOTAL MILDY NEGATIVE IS:' + str(Mild_Negative))\n        print('TOTAL STRONGLY NEGATIVE IS:' + str(Strong_Negative))\n        print('********************************************************')    \n\n        #Visualization of result\n        plt.figure(figsize=[6,6])\n        labels = 'Weak Positive','Mild Positive','Strong Positive', 'Neutral', 'Weak Negative', 'Mild Negative', 'Strong Negative'\n        sizes = [Weak_Positive, Mild_Positive, Strong_Positive, Neutral, Weak_Negative, Mild_Negative, Strong_Negative]\n        colors = ['blue', 'yellow', 'green','white','grey','maroon','red']\n        explode = (0.0,0.0,1.0,0.0,0.0,0.0,0.0)\n        plt.pie(sizes,explode = explode, labels=labels, colors=colors, \n                autopct='%1.1f%%', shadow=True, startangle=140, radius = 90000)\n        plt.axis('equal')\n        plt.title('Visualization with 7 categories\\n\\n\\n')\n        plt.show()\n        \n        #Visualization of result\n        plt.figure(figsize=[6,6])\n        labels = 'Positive', 'Neutral', 'Negative'\n        sizes = [Weak_Positive + Mild_Positive + Strong_Positive, Neutral, Weak_Negative + Mild_Negative + Strong_Negative]\n        colors = ['blue', 'green','red']\n        explode = (0.0,0.0,0.0)\n        plt.pie(sizes,explode = explode, labels=labels, colors=colors, \n                autopct='%1.1f%%', shadow=True, startangle=140, radius = 90000)\n        plt.axis('equal')\n        plt.title('Visualization with 3 categories\\n')\n        plt.show()\n        ","0980ce2b":"sentiment_analysis_insights('Accord Metropolitan')  \nsentiment_analysis_insights('The Residency Chennai')  ","e755d64a":"#Generates a WordCLoud for visualization using the Review Text\ndef get_WordCloud(hotel_name):\n    \n    if df[df.Hotel_name == hotel_name].empty:\n        print(\"This hotel name does not exists !\")\n        \n    else:\n        review_text = df[df.Hotel_name == hotel_name].iloc[:,2].to_string()\n        \n        wordcloud = WordCloud(width=800, height=500, random_state=21, max_font_size=110).generate(review_text)\n        plt.figure(figsize=(10,10))\n        plt.imshow(wordcloud, interpolation=\"bilinear\")\n        plt.axis('off')\n        plt.title(\"WordCloud for \"+hotel_name.upper())\n        plt.show\n    ","6f4cc458":"get_WordCloud('Accord Metropolitan')\nget_WordCloud('Somerset Greenways')","e5da2c55":"<hr>\n<h3>\nNatural Language Processing \n& Sentiment Analysis<\/h3>\n<br><hr>","9334a437":"<hr>\n<h3>\nCLEANING AND PREPROCESSING THE DATASET\n<\/h3>\n<br><hr>","035350f6":"<h4>Test the above function with multiple hotel names<\/h4>","6b572a35":"<hr>\n<h3>\nVISUALIZATION OF DATASET<\/h3>\n<br><hr>","063733d1":"<h4>Pass Hotel Name in sentiment_analysis_fxn() to get an overall review score<h4>","2474a20a":"<hr>\n<h3>\nEXPLORATORY DATA ANALYSIS<\/h3>\n<br><hr>","621edfcb":"<h2>\nExploratory Data Analysis<br>\nChennai Hotel Reviews\n<\/h2>\n<br>","fa6499a1":"<h4> WordCloud Generation<h4>","edebf3f6":"<h4>Pass Hotel Name in get_WordCloud() to get a WordCloud Image<h4>"}}