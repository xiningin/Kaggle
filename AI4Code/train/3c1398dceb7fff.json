{"cell_type":{"35852543":"code","519fcb02":"code","57c485b5":"code","b51d45f9":"code","5857bdf3":"code","c125250d":"code","4d34b113":"code","e5552f7e":"code","84d4084f":"code","50b52787":"code","e6057100":"code","8f29a049":"code","1c16c794":"markdown","603dcb3f":"markdown"},"source":{"35852543":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport cufflinks as cf\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.graph_objects as go\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode()\ncf.go_offline()\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","519fcb02":"df = pd.read_csv('..\/input\/wholesale-customers-data-set\/Wholesale customers data.csv')","57c485b5":"df.head()","b51d45f9":"fig = go.Figure(data=[go.Surface(z=df[df.Region == 1].corr().values), \n                      go.Surface(z=df[df.Region == 2].corr().values + 3, showscale=False, opacity=0.9), \n                      go.Surface(z=df[df.Region == 3].corr().values + 6, showscale=False, opacity=0.9)])\n\nfig.update_layout(title='Region Correlation', autosize=False,\n                  width=500, height=500,\n                  margin=dict(l=65, r=50, b=65, t=90))\n\n\nfig.show()","5857bdf3":"fig = go.Figure(data=[go.Surface(z=df[df.Channel == 1].corr().values), \n                      go.Surface(z=df[df.Channel == 2].corr().values + 3, showscale=False, opacity=0.9)])\n\nfig.update_layout(title='Channel Correlation', autosize=False,\n                  width=500, height=500,\n                  margin=dict(l=65, r=50, b=65, t=90))\n\nfig.show()","c125250d":"targets = df.Channel\ndf.drop(['Channel', 'Region'], inplace=True, axis=1)","4d34b113":"from sklearn.preprocessing import StandardScaler\n\nX = StandardScaler().fit_transform(df)","e5552f7e":"from sklearn.decomposition import PCA\npca = PCA(n_components=3)\nprincipalComponents = pca.fit_transform(X)\n# principalDf = pd.DataFrame(data = principalComponents, columns = ['principal component 1', 'principal component 2', 'principal component 3'])\npca.explained_variance_.round(2)","84d4084f":"pca.explained_variance_ratio_","50b52787":"from sklearn.cluster import KMeans\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nkmeans = KMeans(n_clusters=2, random_state=0).fit(X)\ny_pred = kmeans.predict(X) + 1\nkmeans_pca = KMeans(n_clusters=2, random_state=0).fit(principalDf.values)\ny_pred_pca = kmeans_pca.predict(principalDf.values) + 1","e6057100":"ax = sns.scatterplot(x=X[:,0], y=X[:,1], hue=y_pred)","8f29a049":"ax = sns.scatterplot(x=X[:,0], y=X[:,1], hue=y_pred_pca)","1c16c794":"### Kmeans without PCA:","603dcb3f":"### Kmeans with PCA"}}