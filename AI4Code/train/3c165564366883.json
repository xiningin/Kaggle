{"cell_type":{"9f3b775d":"code","b89e3c79":"code","d115a12b":"code","70675739":"code","1e5cc2e8":"code","022db74b":"code","c6256339":"code","3521ea24":"code","d16cead4":"code","39684d08":"code","748951d0":"code","022568ae":"markdown","2f13b74b":"markdown","4b514d49":"markdown"},"source":{"9f3b775d":"import keras\nfrom keras import layers\nfrom keras import regularizers\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.layers import Input, Dense, BatchNormalization, Dropout, Concatenate, Lambda, GaussianNoise, Activation\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.layers.experimental.preprocessing import Normalization\nimport tensorflow as tf\n\nfrom sklearn.model_selection import train_test_split","b89e3c79":"train=pd.read_csv('..\/input\/keras-denoiser\/1X.csv') # train file already encoded for categories\ntrain.head(2)","d115a12b":"X = train.values\n","70675739":"input_data = keras.Input(shape=(30,))\n\nencoded = GaussianNoise(0.01)(input_data)\nencoded = layers.Dense(60, activation='relu')(encoded)\nencoded = layers.Dense(30, activation='relu')(encoded)\nencoded = layers.Dropout(0.3)(encoded)\nencoded = layers.Dense(15, activation='relu')(encoded)\n\ndecoded = layers.Dense(15, activation='relu')(encoded)\ndecoded = BatchNormalization()(decoded)\ndecoded = layers.Dense(30, activation='relu')(decoded)\ndecoded = layers.Dense(30, activation='sigmoid')(decoded)\n","1e5cc2e8":"# This model maps an input to its reconstruction\nautoencoder = keras.Model(input_data, decoded)\nautoencoder.summary()","022db74b":"optimizer = keras.optimizers.Adam(learning_rate=0.00001)\n\nautoencoder.compile(optimizer=optimizer, \n                    loss='binary_crossentropy',\n                    )\n","c6256339":"autoencoder.fit(X, X,\n                epochs=500,\n                batch_size=256,\n                shuffle=True,\n                validation_split=0.2,\n                callbacks=[EarlyStopping('val_loss',patience=3)])","3521ea24":"train_denoised = autoencoder.predict(train)","d16cead4":"test_denoised = autoencoder.predict(test)","39684d08":"train_denoised=pd.DataFrame(train_denoised)\ntest_denoised=pd.DataFrame(test_denoised)","748951d0":"train_denoised.to_csv('train_denoised.csv',index=False)\ntest_denoised.to_csv('test_denoised.csv',index=False)","022568ae":"![image.png](attachment:image.png)","2f13b74b":"<h4> TRAINING :<h4>","4b514d49":"<h4> AUTOCODER MODEL : https:\/\/blog.keras.io\/building-autoencoders-in-keras.html<h4>"}}