{"cell_type":{"7a0bc06c":"code","1218e29e":"code","91526e54":"code","c79212df":"code","150d3f8e":"code","810726db":"code","299fb0f0":"code","9c7d0f3a":"code","326faa9a":"code","83733024":"code","ede3f9a0":"code","7dc7e846":"code","176c2018":"code","c07d0e89":"code","010dec73":"code","cdc1fb08":"code","9d9ba6b4":"code","f568ab38":"code","97c1e91f":"code","07113d5f":"code","18250081":"code","7d35fce6":"code","44b0958e":"markdown","88e3f2ce":"markdown","763d3802":"markdown","8908c73c":"markdown","fa17a8b8":"markdown","2f92119f":"markdown","9944bcc0":"markdown","81d4e36a":"markdown","1cf46964":"markdown","4f0aa26f":"markdown","bfe74e87":"markdown","66bc799f":"markdown","41663bc9":"markdown","517abdcc":"markdown","b4e7293b":"markdown","b5dc3617":"markdown","babe86aa":"markdown","ff971588":"markdown"},"source":{"7a0bc06c":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport cufflinks as cf\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport numpy as np\ninit_notebook_mode(connected=True)\ncf.go_offline()\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1218e29e":"df = pd.read_csv('\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')","91526e54":"df","c79212df":"country_df = df.groupby('country').sum()\ncountry_df.reset_index(inplace=True)\ncountry_df","150d3f8e":"date_df = df.groupby('date').sum()\ndate_df.reset_index(inplace=True)\ndate_df","810726db":"fig = go.Figure(data=[\n    go.Scatter(\n        x = date_df['date'],\n        y = date_df['people_vaccinated'],\n        name = 'Total People Vaccinated'\n    ),\n    go.Scatter(\n        x = date_df['date'],\n        y = date_df['people_fully_vaccinated'],\n        name = 'People Fully Vaccinated'\n    ),\n    go.Scatter(\n        x = date_df['date'],\n        y = date_df['total_vaccinations'],\n        name = 'Total Vaccinations in Circulation'\n    )\n\n])\n\nfig.update_layout(title = 'Vaccines Distributed and Administered',\n                 xaxis_title = 'Date',\n                 yaxis_title = 'Count')\nfig.show()","299fb0f0":"df.isnull().sum()","9c7d0f3a":"'''\nThis function will take in a given text and will return 0 if the data is missing.\nIf data isn't missing, return the data\n'''\n\ndef change_nan(text):\n    \n    if np.isnan(text) == True:\n        return 0\n    else:\n        return text\n\ndf['people_vaccinated'] = df['people_vaccinated'].apply(change_nan)\ndf['total_vaccinations'] = df['total_vaccinations'].apply(change_nan)\ndf['people_fully_vaccinated'] = df['people_fully_vaccinated'].apply(change_nan)","326faa9a":"print('Earliest Date in Data: ', df['date'].min())\nprint('Latest Date in Data: ', df['date'].max())\ndate_range = pd.date_range(df['date'].min(), df['date'].max())\ndate_range","83733024":"# Create a new DataFrame, df1\ndf1 = pd.DataFrame(columns=df.columns)\n\n# x will be the index location for the new DataFrame, df1. \n# The size of df1 will always be len(date_range) * len(df.country.unique())\nx = 0\n\n# df_index will be used to grab the index location of df, the DataFrame with raw data\ndf_index = 0\n\n# Iterates through every unique country in df\nfor country in list(df.country.unique()):\n\n    # Iterates through the length of date_range\n    for date in range(0, len(date_range)):\n        \n        # If the date (from date_range) is in the df DataFrame (.iloc[:,2] will grab the df date),\n        # we will add the data that is in df, into df1\n        \n        if str(date_range[date].date()) in list(df[df['country'] == country].iloc[:,2].values):\n\n            df1.loc[x] = [country, df.iloc[df_index].iso_code, df.iloc[df_index].date,\n                          df.iloc[df_index].total_vaccinations,df.iloc[df_index].people_vaccinated,df.iloc[df_index].people_fully_vaccinated,\n                          df.iloc[df_index].daily_vaccinations_raw,df.iloc[df_index].daily_vaccinations, df.iloc[df_index].total_vaccinations_per_hundred,\n                          df.iloc[df_index].people_vaccinated_per_hundred, df.iloc[df_index].people_fully_vaccinated_per_hundred, df.iloc[df_index].daily_vaccinations_per_million,\n                          df.iloc[df_index].vaccines, df.iloc[df_index].source_name, df.iloc[df_index].source_website]\n            df_index += 1\n            \n        # If the date (from date_range) is NOT in the df DataFrame (.iloc[:,2] will grab the df date),\n        # we will add country info and the date that was missing from df into new df1. Zeros will be added for the other columns\n        else:\n\n            df1.loc[x] = [country,0, str(date_range[date].date()),0,0,0,0,0,0,0,0,0,0,0,0]\n                \n        x+=1","ede3f9a0":"df1","7dc7e846":"# Loops through all of the unique coutries in new DataFrame, df1\n\nfor country in list(df1.country.unique()):\n    \n    # Grabs all of the indexes for the given country the above loop is on\n    index = df1[df1['country'] == country].index\n    \n    start = True\n    \n    for i in index:\n        \n        # If we are on the first index for a given country, there is no previous data to grab if entry is zero,\n        # so we will ignore this case \n        if start == True:\n            \n            start = False\n            \n            continue\n        \n        # If people_vaccinated at given index location is 0, then grab the previous index people_vaccinated data\n        if int(df1.loc[i, 'people_vaccinated']) == 0:\n            \n            df1.loc[i, 'people_vaccinated'] = df1.loc[i-1, 'people_vaccinated']\n            \n        # If total_vaccinations at given index location is 0, then grab the previous index total_vaccinations data            \n        if int(df1.loc[i, 'total_vaccinations']) == 0:\n            \n            df1.loc[i, 'total_vaccinations'] = df1.loc[i-1, 'total_vaccinations']\n            \n        # If people_fully_vaccinated at given index location is 0, then grab the previous index people_fully_vaccinated data    \n        if int(df1.loc[i, 'people_fully_vaccinated']) == 0:\n            \n            df1.loc[i, 'people_fully_vaccinated'] = df1.loc[i-1, 'people_fully_vaccinated']","176c2018":"df1.isnull().sum()","c07d0e89":"date_df = df1.groupby('date').sum()\ndate_df.reset_index(inplace=True)\n\nfig = go.Figure(data=[\n    go.Scatter(\n        x = date_df['date'],\n        y = date_df['people_vaccinated'],\n        name = 'Total People Vaccinated'\n    ),\n    go.Scatter(\n        x = date_df['date'],\n        y = date_df['people_fully_vaccinated'],\n        name = 'People Fully Vaccinated'\n    ),\n    go.Scatter(\n        x = date_df['date'],\n        y = date_df['total_vaccinations'],\n        name = 'Total Vaccinations Distributed'\n    )\n\n])\n\nfig.update_layout(title = 'Vaccines Distributed and Administered',\n                 xaxis_title = 'Date',\n                 yaxis_title = 'Count')\nfig.show()","010dec73":"# Get the data in df1 in which there is data under the vaccine column and only grab country and vaccines columns\n# Could have also grabed the data from the original DataFrame, df. It will be the same\n\nvaccine_df = df1[df1['vaccines'] != 0].reset_index().drop('index', axis=1)[['country', 'vaccines']]\nvaccine_df","cdc1fb08":"'''\nGrab all the vaccine used for every row\n'''\n\nvaccine_list = []\n\n# Iterates through all the rows in vaccine_df in the vaccines columns. Split on ','\nfor i in vaccine_df.vaccines.str.split(','):\n    \n    # Take leading whitespace away and append ot the vaccine_list\n    for x in i:\n        vaccine_list.append(str(x.lstrip()))\n\n# Grab all the unique values out vaccine_list\nvaccines = list(set(vaccine_list))\nvaccines","9d9ba6b4":"# Create new DataFrame with the vaccines set found above\nvaccine = pd.DataFrame(columns=vaccines)\n# Attatch this to the df2 DataFrame\ndf2 = pd.concat((vaccine_df, vaccine))\ndf2.fillna(0,inplace=True)\ndf2","f568ab38":"'''\nThis might be a little tricky to understand and there might be a better way to do this. Please feel free to share\nif you have any suggestions\n\nWe want to fill in the newly added vaccine columns with a 1 to represent if a certain country used that vaccine\n'''\n\n# Iterate through all the index positions in df2\nfor x in range(0, len(df2)):\n    \n    # Grab the 'vaccines' column in df2 and split it on ','\n    vaccines = df2.iloc[x]['vaccines'].split(',')\n    \n    # Iterate through each vaccine found in the 'vaccines' columns after splitting on ','\n    for vaccine in vaccines:\n        \n        # Intiate empty list. Will be reset every time\n        vac_list = []\n        \n        # Remove leading whitepace from vaccine and append to vac_list (at any given point, vac_list will only have \n        # one value in it)\n        vac_list.append(vaccine.lstrip())\n        \n        # If value in vac_list, which will be a eqaul to one of the newly added vaccine columns in df2,\n        # add 1 to that index postion (x) and column position (vaccine_column)\n        for vaccine_column in list(df2.columns[2:]):\n            if vac_list[0] in vaccine_column:\n                df2.at[x, vaccine_column] = 1\n\ndf2","97c1e91f":"# Grab the top 10 countries that have the most fully vaccinated people for the most recent date in the data (df['date'].max()])\ntop_fullyvaccinated = df1[df1['date'] == df['date'].max()].sort_values(['people_fully_vaccinated'], ascending=False).head(10).country.tolist()\ntop_fullyvaccinated","07113d5f":"df2.groupby('country').sum().loc[top_fullyvaccinated].reset_index()","18250081":"data1 = df2.groupby('country').sum().loc[top_fullyvaccinated].reset_index()\n\nfig = go.Figure(data=[\n    go.Bar(\n        x = data1['country'],\n        y = data1['Pfizer\/BioNTech'],\n        name = 'Pfizer\/BioNTech'\n    ),\n    go.Bar(\n        x = data1['country'],\n        y = data1['Oxford\/AstraZeneca'],\n        name = 'Oxford\/AstraZeneca'\n    ),\n    go.Bar(\n        x = data1['country'],\n        y = data1['Moderna'],\n        name = 'Moderna'\n    )\n    \n])\n\nfig.update_layout(title = 'Top Vaccine Usage per Country',\n                 xaxis_title = 'Country',\n                 yaxis_title = 'Count')\n\nfig.show()","7d35fce6":"df2.groupby('country').sum().iplot(kind='bar')","44b0958e":"**Now let's take a look at the top 10 countries with people that are fully vaccinated**\n\n**Here we can see that, the way the data is imported, if a country uses a certain vaccine on at least one day, it will be reported in all of the days there is data. This must be the way the data is scraped. Regardless, this will give us insight into the variety and popularity of certain vaccines**","88e3f2ce":"# Vaccine Usage","763d3802":"**Hmmm...Since we have the columns *people_vaccinated*, *people_fully_vaccinated* and *total_vaccinations* have cumulative data, we expect the lines to always be increasing or not changing, not declining!**\n\n**Below, we can see that there is missing data for these three columns. We should fill in this data**\n\n**To do so, we will want to replace the missing data with the previous date data. To do this we will need the same dates for every country**","8908c73c":"**Now let's explore what countires are using what vaccines**\n\n**The raw data contains one vaccine column. In this column, there could be more than one vaccine reported. We will need to separate this out.**","fa17a8b8":"**We can see that when we use the `.groupby()` method with `.sum()` we only get the columns that contained numerical data back, which makes sense.**\n\n**The country_df DataFrame will help us see all the data from the each country for every day in which data was trakced.**\n\n**The date_df DataFrame will help us see all the data from each date for every body in the world since we grouped by date and not by country.**","2f92119f":"**Below, we graphed the cumulative amount of vaccinations distibuted in the the world at on a given date, the amount of people in the world that have gotten vaccinated and the amount of people that were fully vaccinated in the world on a given day.**","9944bcc0":"**Here we will import the data into a DataFrame**","81d4e36a":"**Our goal is to track the progress of the COVID-19 Vaccination campaign across the globe.**\n\n**We can use the `.groupby()` method off of the current df DataFrame to group the data based off a given column. For example, it might be worthwhile to group the data by country or by the date.**","1cf46964":"**Thank you for looking at my code. Like I said, if you have any comments, please share!**\n\n**I will continue working on this notebook and upload my findings!**","4f0aa26f":"**This is clearly skewing our data. Let's try to fill in those NaN values. If a country reports NaN for the people vaccinated in their country on a given day, we should use the previous day's reported value.**","bfe74e87":"# Introduction\n\n**Hello all. Thank you for viewing my notebook! I am a rookie as of now when it comes to Data Science. My code might not be the cleanest, so I try to explain my thought process as I go along in this notebook**\n\n**If you find this notebook useful, feel free to give me an upvote. Also, if you have any suggestions on how I can improve my way of thinking or code, please do share!**","66bc799f":"# Cumulative Data Visualization","41663bc9":"**Let's look at the top three wildly used and known vaccines for the countries in top_fullyvaccinated list. That is Pfizer\/BioNTech, Oxford\/AstraZeneca and Moderna**","517abdcc":"# Import Data","b4e7293b":"**We can look at all the vaccines used in every country with the plot below. It is messy, but gives us a good overal picture of what vaccines are being used.**","b5dc3617":"\n**Now we can see that there is no missing data in the columns *people_vaccinated*, *people_fully_vaccinated* and *total_vaccinations***\n","babe86aa":"**Now we can get a clearer picture of the cumulative data**","ff971588":"**To get the whole range of data in the DataFrame, we will use pandas built in function `.date_range()`**"}}