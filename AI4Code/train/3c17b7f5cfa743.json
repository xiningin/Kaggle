{"cell_type":{"79fce453":"code","8b2a4dd6":"code","36f6b8e0":"code","d8528829":"code","e4b89d0e":"code","8dd24417":"code","66e6177e":"code","3b2d3b92":"code","709ab70b":"code","ec3182f0":"code","1c300191":"code","296a2013":"code","a97c86f8":"code","5affe373":"code","99673f62":"code","413fee9c":"code","b05e281d":"code","e62b0fdb":"code","b68b598a":"code","e7737e8a":"code","3f96bcb1":"code","de30ed47":"code","272aa2c2":"code","35a70978":"code","f764a78c":"code","5820bd4a":"markdown","07368924":"markdown","394b6b0f":"markdown","71be0c97":"markdown","be3105bb":"markdown","e1614f1c":"markdown","72d343ec":"markdown","f68dff4f":"markdown","510380d4":"markdown","40af6c36":"markdown","df9094c7":"markdown","2e511270":"markdown","1034f2fc":"markdown","a30d96ba":"markdown","319acfb4":"markdown","a7091146":"markdown","c5d70872":"markdown"},"source":{"79fce453":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","8b2a4dd6":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nss = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","36f6b8e0":"train.head()","d8528829":"plt.figure(figsize=(20,5))\nsns.countplot(train['label']);","e4b89d0e":"train[\"label\"].value_counts()","8dd24417":"X = train.drop(columns=[\"label\"]).copy()\ny = train[\"label\"]\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, y_train, y_val = train_test_split(\n    X, y, test_size=0.10, random_state=42)","66e6177e":"plt.figure(figsize=(20,5))\nfor i in range(1,15):\n    plt.subplot(2,7,i)\n    img = X_train.sample(n=1).to_numpy().reshape(28,28)\n    plt.imshow(img, cmap=\"gray\")\n    plt.axis(\"off\")\n    \nplt.show()","3b2d3b92":"X_train = X_train \/ 255\nX_val = X_val \/ 255\ntest = test \/ 255","709ab70b":"X_train  = X_train.to_numpy().reshape(X_train.shape[0], 28,28,1)\nX_val = X_val.to_numpy().reshape(X_val.shape[0], 28,28,1)\ntest = test.to_numpy().reshape(test.shape[0], 28,28,1)","ec3182f0":"plt.figure(figsize=(20,20))\nsns.heatmap(test[333].reshape(28,28), annot=True, cmap=\"gray\")\nplt.show()","1c300191":"from keras.utils import to_categorical\ny_train = to_categorical(y_train)\ny_val = to_categorical(y_val)\n","296a2013":"from keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization, Activation\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3), padding = 'Same', input_shape = (28,28,1)))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.1))\n\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same'))\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.1))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same'))\nmodel.add(BatchNormalization())\nmodel.add(Activation(\"relu\"))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.1))\n\n\nmodel.add(Flatten())\n\nmodel.add(Dense(1024))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dropout(0.1))\n\nmodel.add(Dense(10, activation = \"softmax\"))\n\noptimizer = Adam(learning_rate=0.001, beta_1=0.9, beta_2=0.999, amsgrad=False)\n\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\nepochs = 30  # for better result increase the epochs\nbatch_size = 512\n","a97c86f8":"# data augmentation\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # dimesion reduction\n        rotation_range=0.5,  # randomly rotate images in the range 5 degrees\n        zoom_range = 0.5, # Randomly zoom image 5%\n        width_shift_range=0.5,  # randomly shift images horizontally 5%\n        height_shift_range=0.5,  # randomly shift images vertically 5%\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\n\ndatagen.fit(X_train)\n","5affe373":"learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', \n                                            patience=5, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)","99673f62":"history = model.fit_generator(datagen.flow(X_train,y_train, batch_size=batch_size),\n                              epochs = epochs, validation_data = (X_val,y_val),\n                              steps_per_epoch=X_train.shape[0] \/\/ batch_size,\n                              callbacks=[learning_rate_reduction])\n","413fee9c":"history.history.keys()","b05e281d":"plt.plot(history.history[\"val_loss\"], label=\"Test loss\")\nplt.plot(history.history[\"loss\"], label=\"Training loss\")\nplt.legend()\nplt.show()","e62b0fdb":"plt.plot(history.history[\"val_accuracy\"], label=\"Test Accuracy\")\nplt.plot(history.history[\"accuracy\"], label=\"Training Accuracy\")\nplt.legend()\nplt.show()","b68b598a":"plt.plot(history.history[\"lr\"], label=\"Learning Rate\")\nplt.legend()\nplt.show()","e7737e8a":"y_pred = model.predict(X_val)\ny_pred_labels = np.argmax(y_pred, axis=1)\ny_val_labels = np.argmax(y_val, axis=1)","3f96bcb1":"from sklearn.metrics import confusion_matrix\nplt.figure(figsize=(16,9))\nsns.heatmap(confusion_matrix(y_val_labels, y_pred_labels), annot=True, fmt=\".1f\")\nplt.xlabel(\"Prediction\")\nplt.ylabel(\"Real\")\nplt.title(\"Confusion matrix of the model\")\nplt.show()","de30ed47":"from random import randint\n\nplt.figure(figsize=[20,30])\nfor i in np.arange(1,20,2):\n    random_number = randint(0,X_val.shape[0])\n    plt.subplot(5,4,i)\n    img = X_val[random_number].reshape(28,28)\n    plt.imshow(img, cmap=\"gray\")\n    plt.title(\"True: \" + str(y_val_labels[random_number]))\n    plt.axis(\"off\")\n    \n    #Arange plot color green if predicted correct or red if predicted wrong\n    if y_val_labels[random_number] == y_pred_labels[random_number]:\n        color=\"g\"\n    else:\n        color=\"r\"\n    \n    plt.subplot(5,4,i+1)\n    plt.bar([i for i in range(0,10)], y_pred[random_number], color=color)\n    plt.title(\"Predicted: \" + str(y_pred_labels[random_number]))\n    plt.xticks([i for i in range(0,10)])\n    \nplt.show()","272aa2c2":"wrong = np.where((y_pred_labels != y_val_labels) == True)[0]\n\nfrom random import randint\n\nplt.figure(figsize=[20,30])\nfor i in np.arange(1,20,2):\n    random_number = int(np.random.choice(wrong, 1))\n    plt.subplot(5,4,i)\n    img = X_val[random_number].reshape(28,28)\n    plt.imshow(img, cmap=\"gray\")\n    plt.title(\"True: \" + str(y_val_labels[random_number]))\n    plt.axis(\"off\")\n    \n    #Arange plot color green if predicted correct or red if predicted wrong\n    if y_val_labels[random_number] == y_pred_labels[random_number]:\n        color=\"g\"\n    else:\n        color=\"r\"\n    \n    plt.subplot(5,4,i+1)\n    plt.bar([i for i in range(0,10)], y_pred[random_number], color=color)\n    plt.title(\"Predicted: \" + str(y_pred_labels[random_number]))\n    plt.xticks([i for i in range(0,10)])\n    \nplt.show()","35a70978":"y_test = y_pred = model.predict(test)\ny_test_labels = np.argmax(y_test, axis=1)","f764a78c":"submission = pd.DataFrame(y_test_labels)\nsubmission.index += 1 #ImageId starting from 1\nsubmission.index.name = \"ImageId\"\nsubmission.columns = [\"Label\"] #name columns\nsubmission.to_csv(\"submission.csv\") # to csv","5820bd4a":"TO DO:\n* Model will be tuned","07368924":"Arange train, val datasets;","394b6b0f":"Convert X_train, X_val, test shapes to (28,28,1)","71be0c97":"Visualize some digits;","be3105bb":"Creat CNN model;","e1614f1c":"Importing datasets to DataFrames.","72d343ec":"Create submission and write to csv;","f68dff4f":"Let's evaluate our model.","510380d4":"Prediction;","40af6c36":"Fitting the model;","df9094c7":"Convert labels to one_hot_encoding;","2e511270":"Data augmentation;","1034f2fc":"Now let's see which indexes we have predicted wrong; (random select)","a30d96ba":"Let's discover label counts in train dataset.","319acfb4":"Confusion matrix;\n","a7091146":"Normalize data;","c5d70872":"Visualisation of the predictions;"}}