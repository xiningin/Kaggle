{"cell_type":{"7ccd6956":"code","f88b5935":"code","42224bd9":"code","f0d36a52":"code","c2a169ea":"code","1e2bf481":"code","122a2707":"code","43164ff8":"code","2960eebb":"code","110eee41":"code","9c5f4ccb":"code","bc0bd67c":"markdown","7f88e6ea":"markdown","ae54a9ed":"markdown","e7d4ff14":"markdown","b0c2b9ea":"markdown","6eea0c50":"markdown","a53c8fa9":"markdown","f24d4d53":"markdown","92af3ccc":"markdown"},"source":{"7ccd6956":"import pandas as pd\nimport numpy as np\nimport math\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import LearningRateScheduler\nimport matplotlib.pyplot as plt","f88b5935":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","42224bd9":"# cut the data, percentage to take into account, None : to use full dataset\ncut=0.01\n# number of cnn models that should trained and ensembled\nnets = 5\n#epochs = 45\nepochs = 45\n\n","f0d36a52":"if cut > 0:\n    n_train=round(cut*train.shape[0])\n    train = train[:n_train]\n\n# PREPARE DATA FOR NEURAL NETWORK\nY_train = train[\"label\"]\nX_train = train.drop(labels = [\"label\"],axis = 1)\nX_train = X_train \/ 255.0\nX_test = test \/ 255.0\nX_train = X_train.values.reshape(-1,28,28,1)\nX_test = X_test.values.reshape(-1,28,28,1)\nY_train = to_categorical(Y_train, num_classes = 10)","c2a169ea":"test.shape","1e2bf481":"# CREATE MORE IMAGES VIA DATA AUGMENTATION\ndatagen = ImageDataGenerator(\n        rotation_range=10,  \n        zoom_range = 0.10,  \n        width_shift_range=0.15, \n        height_shift_range=0.15)","122a2707":"# PREVIEW AUGMENTED IMAGES\nX_train3 = X_train[9,].reshape((1,28,28,1))\nY_train3 = Y_train[9,].reshape((1,10))\nplt.figure(figsize=(15,4.5))\nfor i in range(30):  \n    ax=plt.subplot(3, 10, i+1)\n    ax.axis('on')\n    ax.patch.set_edgecolor('black')  \n    ax.patch.set_linewidth('2')\n    X_train2, Y_train2 = datagen.flow(X_train3,Y_train3).next()\n    plt.imshow(X_train2[0].reshape((28,28)),cmap=plt.cm.binary)\n    plt.xticks([])\n    plt.yticks([])\n    if i==9: X_train3 = X_train[11,].reshape((1,28,28,1))\n    if i==19: X_train3 = X_train[18,].reshape((1,28,28,1))\nplt.subplots_adjust(wspace=-0.1, hspace=-0.1)\nplt.show()","43164ff8":"model = [0] *nets\nfor j in range(nets):\n    model[j] = Sequential()\n\n    model[j].add(Conv2D(32, kernel_size = 3, activation='relu', input_shape = (28, 28, 1)))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(32, kernel_size = 3, activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(32, kernel_size = 5, strides=2, padding='same', activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Dropout(0.4))\n\n    model[j].add(Conv2D(64, kernel_size = 3, activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(64, kernel_size = 3, activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Conv2D(64, kernel_size = 5, strides=2, padding='same', activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Dropout(0.4))\n\n    model[j].add(Conv2D(128, kernel_size = 4, activation='relu'))\n    model[j].add(BatchNormalization())\n    model[j].add(Flatten())\n    model[j].add(Dropout(0.4))\n    model[j].add(Dense(10, activation='softmax'))\n\n    model[j].compile(optimizer=\"adam\", loss=\"categorical_crossentropy\", metrics=[\"accuracy\"])","2960eebb":"# decreate lr at each epoch\nannealer = LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x)\n# train\nhistory = [0] * nets\n\nfor j in range(nets):\n    X_train2, X_val2, Y_train2, Y_val2 = train_test_split(X_train, Y_train, test_size = 0.1)\n    history[j] = model[j].fit_generator(datagen.flow(X_train2,Y_train2, batch_size=64),\n        epochs = epochs, steps_per_epoch = X_train2.shape[0]\/\/64,  \n        validation_data = (X_val2,Y_val2), callbacks=[annealer], verbose=0)\n    print(\"CNN {0:d}: Epochs={1:d}, Train accuracy={2:.5f}, Validation accuracy={3:.5f}\".format(\n        j+1,epochs,max(history[j].history['acc']),max(history[j].history['val_acc']) ))","110eee41":"# choose the output of the most confident model as the overal ouput\nresults = np.zeros( (X_test.shape[0],10) ) \nfor j in range(nets):\n    results = results + model[j].predict(X_test)\nresults = np.argmax(results,axis = 1)\nresults = pd.Series(results,name=\"Label\")\nsubmission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\nsubmission.to_csv(\"submission.csv\",index=False)","9c5f4ccb":"# PREVIEW PREDICTIONS\nplt.figure(figsize=(15,6))\nfor i in range(40):  \n    plt.subplot(4, 10, i+1)\n    plt.imshow(X_test[i].reshape((28,28)),cmap=plt.cm.binary)\n    plt.title(\"predict=%d\" % results[i],y=0.9)\n    plt.xticks([])\n    plt.yticks([])\nplt.subplots_adjust(wspace=0.3, hspace=-0.1)\nplt.show()","bc0bd67c":"# Build the individual Convolutional Neural Networks that will be ensembled","7f88e6ea":"# Train the CNNs","ae54a9ed":"# Load librairies","e7d4ff14":"* Chris Deotte","b0c2b9ea":"# Ensemble CNN predictions and submit","6eea0c50":"# Credits","a53c8fa9":"# Load data","f24d4d53":"### Parameter of the run (to test the notebook, choose little values)","92af3ccc":"# Do data augmentation"}}