{"cell_type":{"65c0cd59":"code","60aa3e9d":"code","4c1c4fba":"code","34639837":"code","fb55c2ea":"code","84931a6a":"code","493e406c":"code","f070ee8e":"code","f2be84cc":"code","91d92089":"code","18ba6efb":"code","6388b7ac":"code","e996f6e9":"code","b700d021":"code","dac58332":"code","d064ebb1":"code","3cc742e7":"code","2f12a4ff":"code","d8e846ad":"code","89db3c5b":"code","4b7feb8d":"code","82455baf":"code","9be5b435":"code","c50e8775":"code","b497102f":"code","448dba89":"code","52b56f64":"code","ecf49a04":"code","ac10fa2a":"code","b1b2373c":"code","8f55aad2":"markdown","78a6600d":"markdown","9d0de547":"markdown","34d8457d":"markdown","75a521e5":"markdown","f1f5c17b":"markdown","e4908d69":"markdown","8043477d":"markdown","92dad00d":"markdown","324e035b":"markdown","08ec8c45":"markdown","c57eace8":"markdown","ecd3a4b0":"markdown","7aae8b9c":"markdown"},"source":{"65c0cd59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","60aa3e9d":"train = pd.read_csv('..\/input\/human-activity-recognition-with-smartphones\/train.csv')\ntrain.head()","4c1c4fba":"train.shape","34639837":"train.isnull().values.any()","fb55c2ea":"test = pd.read_csv('..\/input\/human-activity-recognition-with-smartphones\/test.csv')\ntest.head()","84931a6a":"print(test.shape)\ntest.isnull().values.any()","493e406c":"X_train = train.iloc[:,:-2]\nY_train = train.iloc[:,-1]\n\nprint(X_train.shape)\nprint(Y_train.shape)","f070ee8e":"X_test = test.iloc[:,:-2]\nY_test = test.iloc[:,-1]\n\nprint(X_test.shape)\nprint(Y_test.shape)","f2be84cc":"Category_counts = np.array(Y_train.value_counts())\nCategory_counts","91d92089":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(10,8))\nsns.countplot(train.Activity)\nplt.xticks(rotation=45)\n","18ba6efb":"from sklearn.manifold import TSNE\ntsne = TSNE(random_state = 42, n_components=2, verbose=1, perplexity=50, n_iter=1000).fit_transform(X_train)","6388b7ac":"plt.figure(figsize=(12,8))\nsns.scatterplot(x =tsne[:, 0], y = tsne[:, 1],data = train,hue = train[\"Activity\"])\n","e996f6e9":"train['tBodyAcc-mean()-X'].hist()","b700d021":"train['tBodyAcc-mean()-Y'].hist()","dac58332":"train['tBodyAcc-mean()-Z'].hist()","d064ebb1":"#Y_train = Y_train.reshape((-1,1))\n#Y_test = Y_test.reshape((-1,1))\n\n#print(Y_train.shape)\n#print(Y_test.shape)","3cc742e7":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\n\nY_train = le.fit_transform(Y_train)\nY_test = le.transform(Y_test)\n\nle.classes_","2f12a4ff":"Y_train = pd.get_dummies(Y_train).values\nY_test = pd.get_dummies(Y_test).values","d8e846ad":"Y_train","89db3c5b":"Y_train.shape\n\n","4b7feb8d":"from tensorflow.keras import models\nfrom tensorflow.keras.layers import Dense,Dropout\n\nmodel = models.Sequential()\n\nmodel.add(Dense(64,activation='relu',input_dim=X_train.shape[1]))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dense(32,activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(10,activation='relu'))\nmodel.add(Dense(6,activation='softmax'))\n\nmodel.summary()\n","82455baf":"model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","9be5b435":"hist = model.fit(X_train,Y_train,epochs=30,batch_size = 128,validation_split=0.3)","c50e8775":"plt.plot(hist.history['loss'],label='train_loss')\nplt.plot(hist.history['val_loss'],label='val_loss')\nplt.xlabel('Epochs',fontsize=18)\nplt.ylabel('Loss',fontsize=18)\nplt.legend()\nplt.title('Loss Curve',fontsize=22)\nplt.show()","b497102f":"plt.plot(hist.history['accuracy'],label='train_accuracy')\nplt.plot(hist.history['val_accuracy'],label='val_accuracy')\nplt.xlabel('Epochs',fontsize=18)\nplt.ylabel('Accuracy',fontsize=18)\nplt.legend()\nplt.title('Accuracy Curve',fontsize=22)\nplt.show()","448dba89":"model.save('my_model.h5')","52b56f64":"predict = model.predict(X_test)\n\npredictions = np.argmax(predict,axis=1)\n\n","ecf49a04":"predictions","ac10fa2a":"Y_test = np.argmax(Y_test,axis=1)","b1b2373c":"from sklearn.metrics import accuracy_score,precision_score,recall_score,confusion_matrix\nfrom mlxtend.plotting import plot_confusion_matrix\n\nconf_matrix = confusion_matrix(Y_test,predictions)\nplot_confusion_matrix(conf_matrix)\n\nprecision = precision_score(Y_test,predictions,average='weighted')\nrecall = recall_score(Y_test, predictions,average='weighted')\naccuracy = accuracy_score(Y_test,predictions)\n\nprint(\"Accuracy = \"+str(accuracy))\nprint(\"Precision = \"+str(precision))\nprint(\"Recall = \"+str(recall))","8f55aad2":"**Calculating accuracy**","78a6600d":"**Visualising loss and accuracy curve of the model.**","9d0de547":"**Creating our model**","34d8457d":"**Scaling the data**","75a521e5":"**Creating a scatter plot using t-SNE**","f1f5c17b":"**It is necessary to create a one-hot vector for classes to fit the data in the model.**","e4908d69":"**Plotting a count plot of each activity in the training data.**","8043477d":"**Compiling and training the model.**","92dad00d":"**The model was able to produce 93% accurate results.**","324e035b":"**There are five different activities i.e 'Standing','Sitting','Laying','Walking','Walking_downstairs','Walking_upstairs'.**","08ec8c45":"**Making predictions on test data**","c57eace8":"   **Creating labels for different classes**","ecd3a4b0":"**Preparing data**","7aae8b9c":"Using t-SNE data can be visualized from a extremely high dimensional space to a low dimensional space and still it retains lots of actual information. Given training data has 562 unqiue features, using t-SNE let's visualize it to a 2D space."}}