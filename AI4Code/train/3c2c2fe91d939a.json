{"cell_type":{"050fe31b":"code","8f8c1911":"code","e2adb7ef":"code","b812c2c0":"code","d3e41d8d":"code","b4443538":"code","6c94ff7f":"code","ffe7d185":"code","68620a3c":"code","e312b4cd":"code","efb37f3f":"code","95d503d4":"code","385a8100":"code","91184725":"code","3d0c902b":"code","e3210623":"code","51edc886":"code","6afad9db":"code","2f8905f5":"code","d778969b":"code","863961ae":"code","74cb9277":"code","6c8a06f4":"code","effd516b":"code","850d5a48":"code","38c1850c":"code","85a467b9":"code","e370ba1f":"code","16966008":"code","c115e099":"code","957c5961":"markdown","4a211ea3":"markdown","4f49020a":"markdown","e81f5aa8":"markdown"},"source":{"050fe31b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8f8c1911":"## Import Liberaries\nimport pandas as pd\nimport sqlite3","e2adb7ef":"pip install openpyxl","b812c2c0":"## Read the files\n\ndf_entriesgender= pd.read_excel('\/kaggle\/input\/2021-olympics-in-tokyo\/EntriesGender.xlsx')\ndf_teams= pd.read_excel('\/kaggle\/input\/2021-olympics-in-tokyo\/Teams.xlsx')\ndf_athletes= pd.read_excel('\/kaggle\/input\/2021-olympics-in-tokyo\/Athletes.xlsx')\ndf_coaches= pd.read_excel('\/kaggle\/input\/2021-olympics-in-tokyo\/Coaches.xlsx')\ndf_medals= pd.read_excel('\/kaggle\/input\/2021-olympics-in-tokyo\/Medals.xlsx')","d3e41d8d":"## Read all the columns of the files\n\nprint('The columns of the gender table are:',df_entriesgender.columns.to_list())\nprint('\\n')\nprint('The columns of the teams table are:',df_teams.columns.to_list())\nprint('\\n')\nprint('The columns of the athletes table are:',df_athletes.columns.to_list())\nprint('\\n')\nprint('The columns of the coaches table are:',df_coaches.columns.to_list())\nprint('\\n')\nprint('The columns of the medals table are:',df_medals.columns.to_list())\nprint('\\n')","b4443538":"## Let's Rename the titles to simple forms as it will simplify query writing\n\n## For Simplicity let's do the rename for only applicable columns (where reading titles need simplification) \n\n\ndf_entriesgender_SQL = df_entriesgender # no change required\n\ndf_teams_SQL = df_teams # no change required\n\ndf_athletes_SQL = df_athletes # no change required\n\ndf_coaches_SQL = df_coaches # no change required\n\ndf_medals_SQL = df_medals.rename(columns = {'Team\/NOC': 'Teamnoc',\n                              }, inplace = False)","6c94ff7f":"# import sqlalchemy and create a sqlite engine\nfrom sqlalchemy import create_engine\nengine = create_engine('sqlite:\/\/', echo=False)\n\n# export the dataframe as a table 'playstore' to the sqlite engine\ndf_entriesgender_SQL.to_sql(\"EntriesGender\", con =engine)\ndf_teams_SQL.to_sql(\"Teams\", con =engine)\ndf_athletes_SQL.to_sql(\"Athletes\", con =engine)\ndf_coaches_SQL.to_sql(\"Coaches\", con =engine)\ndf_medals_SQL.to_sql(\"Medals\", con =engine)\n","ffe7d185":"##  Test the Query\n\nsql='''\n\nSelect * from entriesgender\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()\n\n","68620a3c":"##  Query 1: - Avg count of participants across all disciplines\n\nsql='''\n\nSelect\ndiscipline,\ntotal as Participants\nfrom entriesgender\ngroup by discipline\norder by total desc\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()\n\n","e312b4cd":"##  Query 2: - Most Medals won by each country, top 3 ranks\n\nsql='''\n\nselect *\nfrom medals\norder by total desc\nlimit 3\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()\n\n","efb37f3f":"##  Query 3: - Most Bronze,silver and gold\n\nsql='''\n\nselect 'Most Gold  :- ' || teamnoc as Country_With_Most_Medals,max(gold) as Medals from medals\nunion all\nselect 'Most Silver :- ' || teamnoc as Country_With_Most_Medals,max(silver) as Medals from medals\nunion all\nselect 'Most Bronze  :- ' || teamnoc as Country_With_Most_Medals,max(bronze) as Medals from medals\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()\n\n","95d503d4":"##  Query 4: - Particpants at across countries\n\nsql='''\nselect * from (\nselect count(name) as Count_of_Players,NOC\nfrom athletes\ngroup by noc) a\norder by a.count_of_players desc\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()\n\n","385a8100":"##  Query 5: - Numbers Table, count of various events\nsql='''\nselect 'Count of Events :- '|| count(distinct discipline) as Number from athletes\nunion all\nselect 'Count of Countries :- '|| count(distinct noc) as Number from athletes\nunion all\nselect 'Total Female Athletes :- '|| sum(female) as Number from EntriesGender\nunion all\nselect 'Total Male Athletes :- '|| sum(male) as Number from EntriesGender\nunion all\nselect 'Total Athletes :- '|| sum(total) as Number from EntriesGender\nunion all\nselect 'Total Gold :- '|| sum(gold) as Number from medals\nunion all\nselect 'Total Silver :- '|| sum(silver) as Number from medals\nunion all\nselect 'Total Bronze :- '|| sum(bronze) as Number from medals\nunion all\nselect 'Total Medals :- '|| sum(total) as Number from medals\n\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(10)\n\n","91184725":"##  Query 6: - Coaches produced by the countries\n\nsql='''\nselect * from (\nselect count(name) as Count_of_Coaches,noc as NOC from coaches\ngroup by noc) a\norder by a.Count_of_Coaches desc\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()\n\n","3d0c902b":"##  Query 7: - Coaches vs Player Ratio\n\nsql='''\n\n\nselect\ncoach_table.NOC,\nCount_of_Players,\nCount_of_Coaches,\nround(Count_of_Players\/Count_of_Coaches,2) as Player_Coach_Ratio\n\nfrom \n(select * from (\nselect count(name) as Count_of_Players,NOC\nfrom athletes\ngroup by noc) a\norder by a.count_of_players desc) player_table\n\njoin (\nselect * from (\nselect count(name) as Count_of_Coaches,noc as NOC from coaches\ngroup by noc) a\norder by a.Count_of_Coaches desc) coach_table\n\non player_table.noc=coach_table.noc\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()\n\n","e3210623":"##  Query 8: - Country wise Performance Table\n\nsql='''\n\nselect \ncount(c.name) as Coach_Team,\ncount_of_players as Player_Team,\nc.noc,\nm.total as Total_Medals_Won\n\nfrom coaches c\njoin (select \nteamnoc as country,\ngold,\nsilver,\nbronze,\ntotal\nfrom medals) m\non c.noc=m.country \njoin (select * from (\nselect count(name) as Count_of_Players,NOC\nfrom athletes\ngroup by noc) a\norder by a.count_of_players desc) p\non c.noc=p.noc\ngroup by c.noc\norder by m.total desc\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()\n\n","51edc886":"##  Query 9: - Sports with Highes female participation\n\nsql='''\nselect * from (\nselect\ndiscipline as Discipline,\nsum(female) as Count_of_Female,\nsum(total) as Count_of_Total,\n100*(round(round(female,4)\/round(total,4),4))as Female_Participation\nfrom entriesgender\ngroup by discipline)\norder by Female_Participation desc\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()\n\n","6afad9db":"##  Query 10: - Sports with Highes male participation\n\nsql='''\nselect * from (\nselect\ndiscipline as Discipline,\nsum(Male) as Count_of_Male,\nsum(total) as Count_of_Total,\n100*(round(round(male,4)\/round(total,4),4))as Male_Participation\nfrom entriesgender\ngroup by discipline)\norder by Male_Participation desc\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()\n\n","2f8905f5":"##  Query 11: -  Player vs coach List\n\nsql='''\n\nselect\na.name as Player_Name,\ncoach.coach_name as Coach_Name,\na.noc,\na.discipline as discipline\n\nfrom athletes a\njoin (\nselect \nc.name as coach_name,\nc.noc as country,\nc.discipline as discipline from coaches c) coach\non coach.country=a.noc and coach.discipline=a.discipline\ngroup by\na.noc,\ncoach.coach_name\norder by discipline asc\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()\n\n","d778969b":"##  Query 12: -  Teams vs Disciplines\nsql='''\n\nselect * from (\nselect\nName,\ncount(distinct discipline) as Count_of_Discipline\nfrom teams\ngroup by name\n) a\norder by a.Count_of_Discipline desc\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()\n\n","863961ae":"## Import the dataset\n\ndf_continents= pd.read_excel('\/kaggle\/input\/continent-list-for-2021-olympics-in-tokyo-dataset\/Continent List.xlsx')\ndf_continents.head()","74cb9277":"##rename the file for simplicity while writing SQL queries\ndf_copy= df_continents \ndf_copy.to_excel('continents.xlsx',index=False)","6c8a06f4":"## Read the Renamed File\ndf_continents  = pd.read_excel('continents.xlsx')\ndf_continents.head()","effd516b":"## Read all the columns of the files\n\nprint('The columns of the Continents table are:',df_continents.columns.to_list())\n","850d5a48":"## Let's rename the df to for the normalization purpose\n\ndf_continents_SQL=df_continents","38c1850c":"# import sqlalchemy and create a sqlite engine\n\ndf_continents_SQL.to_sql(\"continents\", con = engine)","85a467b9":"## Query 13:- Test the added contient table query\n\nsql='''\n\nselect * from continents\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()","e370ba1f":"##  Query 14: -  Continent wise breakdown\nsql='''\n\nselect \ndistinct(name) as Country,\nc.continent\nfrom teams t\njoin continents c on t.name=c.country\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()\n\n","16966008":"##  Query 15: -  Continent vs count of countries partcipated in the olympics\n\n\nsql='''\n\nselect * \nfrom (\nselect \ncontinent, \ncount(country) as No_of_Countries\nfrom continents\ngroup by continent) a\n\norder by a.No_of_Countries desc\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head(10)\n\n","c115e099":"##  Query 16: - Continents Performance Table\n\nsql='''\n\nselect \nco.continent,\ncount(c.name) as Total_Coaches,\ncount_of_players as TOtal_Players,\nm.total as Total_Medals_Won\n\nfrom coaches c\njoin (select \nteamnoc as country,\ngold,\nsilver,\nbronze,\ntotal\nfrom medals) m\non c.noc=m.country \njoin (select * from (\nselect count(name) as Count_of_Players,NOC\nfrom athletes\ngroup by noc) a\norder by a.count_of_players desc) p\non c.noc=p.noc\njoin continents co on\nc.noc=co.country\ngroup by co.continent\norder by m.total desc\n\n''';\n\n    \ndf_sql = pd.read_sql_query(sql,con=engine)\ndf_sql.head()\n\n","957c5961":"## In the below analysis, we will diving deep on the continent level performance, to achieve this result we will require an additional dataset called continent list (not available in the exising set) \n\n## This list is prepared and uploaded in the current notebook for further analysis.","4a211ea3":"# We will perform  EDA for the provided data and then apply the continents table \n\n# Link to the continents dataset:- https:\/\/www.kaggle.com\/arvinthsss\/continent-list-for-2021-olympics-in-tokyo-dataset","4f49020a":"# Hey Kaggle Fam :)! The below is an exhaustive SQL EDA of the 2021 Tokyo Olympics Dataset,\n# If you'd like a buddy mentor for SQL and Data Analytics i'm just a ping away : )","e81f5aa8":"##  We will also dive deep on continent level analysis in the notebook, to achieve this we will add one more data file called the continents, which contains a repository of countries vs continents."}}