{"cell_type":{"d8fe6332":"code","6bea9167":"code","f2059ae0":"code","9ceefa98":"code","daf8312d":"code","7a902473":"code","27f60697":"code","e9b18c8f":"code","22f70afd":"code","cbadda4c":"code","3bf3286b":"code","745a2999":"code","ae956094":"code","1a92ec74":"code","82aee8bc":"code","5c30f281":"code","d3a63038":"code","830732c9":"code","b4c25a54":"code","1feb6d99":"code","0718c3af":"code","7182642f":"code","d2fadf1a":"code","53cef693":"code","a9540f6d":"code","1751c219":"code","a36f717d":"code","7738a612":"code","1505cda3":"code","5f5b2be7":"code","e34ab321":"code","cf39d6b3":"code","0d43beb7":"code","257145a6":"code","8f4dec82":"code","1a0563b3":"code","87c5f757":"code","bbe5664f":"code","2f4dfe61":"code","75921598":"code","41500e4e":"code","63631417":"code","60265689":"code","f0d5c023":"code","ca675047":"code","08c8d75b":"code","7ea99969":"code","ca4658a6":"code","703de5d6":"code","29fad100":"code","d84d3dff":"code","d1a42cac":"code","b0109aff":"code","70ce52ea":"code","b75e33fe":"code","fab74f16":"code","502b3cc2":"code","782a5ae2":"code","c0db22c7":"code","f39ad3f2":"code","ba1265bc":"code","df139783":"code","04c87e51":"code","1173f678":"code","fe774909":"markdown","a22a9391":"markdown","6e6fc416":"markdown","120a0c56":"markdown","0aeabe4c":"markdown","eb93a419":"markdown","e126cdb6":"markdown","73972355":"markdown","6178e01d":"markdown","6cc10b07":"markdown","a916f406":"markdown","64dfa34d":"markdown","e06afefe":"markdown","5f5024ae":"markdown","03f05e26":"markdown","297148f3":"markdown","cd03521e":"markdown","64fb4983":"markdown","e3bfe434":"markdown","a3e96617":"markdown","6f1e449b":"markdown","42d925fc":"markdown","5bc5c962":"markdown","09c735cd":"markdown","23d84c3e":"markdown","8742c0a9":"markdown","8605a3a5":"markdown","2567b1cb":"markdown","1e596df3":"markdown","29987ead":"markdown","84f33f01":"markdown","bad17491":"markdown","6b25c364":"markdown","ab5f5384":"markdown","6d8eff6d":"markdown","894a4a2f":"markdown","6882f3a7":"markdown","eda657b4":"markdown","6c7bd4cf":"markdown","f43c6f8c":"markdown","8cb3528b":"markdown","9f9989bd":"markdown","2519f099":"markdown","607292af":"markdown","efcf379d":"markdown","9e8ab930":"markdown","f8bc4782":"markdown","1106df32":"markdown","6900694a":"markdown","a99e3bd4":"markdown","67fb1e95":"markdown","3e40cbba":"markdown","97e29f2f":"markdown","9f200005":"markdown","6b4ef41a":"markdown","43208951":"markdown","c65ca796":"markdown","8044f955":"markdown","3a804b64":"markdown","29580b64":"markdown","775b8eb2":"markdown","ee329896":"markdown","cb646f5c":"markdown"},"source":{"d8fe6332":"list = [\"Java\", \"C++\", \"C\", \"Python\"]","6bea9167":"# Method 1 :\nfor i in range(len(list)):\n    print(list[i])","f2059ae0":"# Method 2 :\nwhile list:\n    print(list[-1])\n    list.remove(list[-1])","9ceefa98":"# Method 3 :","daf8312d":"week_days = [\"Monday\", \"Tuesday\", \"Thursday\", \"Wednesday\", \"Friday\", \"Saturday\", \"Sunday\"]","7a902473":"for day in week_days:\n    print(day)","27f60697":"weekend_counter = 0\nwhile weekend_counter != 2:\n    weekend_counter += 1\n    print(week_days[len(week_days) - weekend_counter])","e9b18c8f":"numbers = [i for i in range(1, 11)]","22f70afd":"for number in numbers:\n    print(number, end = ' ')","cbadda4c":"odd_numbers = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]","3bf3286b":"even_numbers = [i+1 for i in odd_numbers]\nprint(even_numbers)","745a2999":"import numpy as np\nstudent_marks = np.array([14, 9, 6, 8, 12])","ae956094":"print(\"The student's average grade is : {:.2f}\".format(student_marks.mean()))","1a92ec74":"numbers_list = list(range(2, 23, 2))\nprint(numbers_list)","82aee8bc":"for i in range(len(numbers_list)-1):\n    print(numbers_list[i] * numbers_list[i+1])","5c30f281":"for i in range(1, 11):\n    print(\"*\"*i)","d3a63038":"for i in range(10, 0, -1):\n    print(\"*\"*i)","830732c9":"for i in range(1, 11):\n    print(\" \" * (10 - i), end=\"\")\n    print(\"*\" * i)","b4c25a54":"for i in range(0, 10):\n    print(\" \" * (10 - i), end=\"\")\n    print(\"*\" * i, end=\"\")\n    print(\"*\", end=\"\")\n    print(\"*\"*i)\n","1feb6d99":"N = int(input(\"Entrer le nombre de lignes :\"))\nfor i in range(0, N):\n    print(\" \" * (N - 1 - i), end=\"\")\n    print(\"*\" * i, end=\"\")\n    print(\"*\", end=\"\")\n    print(\"*\" * i)","0718c3af":"print(\"parcours d'une matrice carr\u00e9\")\nrep = input(\"entrer la taille de la matrice N:\")\nN = int(rep)\nprint(\"Ligne  colonne \\n\")\n\nfor i in range(0, N):\n    for j in range(0, N):\n        print(str(i + 1) + \"        \" + str(j + 1))","7182642f":"week_days = [\"Monday\", \"Tuesday\", \"Thursday\", \"Wednesday\", \"Friday\", \"Saturday\", \"Sunday\"]\nfor day in week_days:\n    if day in [\"Sunday\", \"Saturday\"]:\n        print(\"Repos ce week-end\")\n    elif day == \"Friday\":\n        print(\"Bientot le week-end\")\n    else:\n        print(\"Au travail\")","d2fadf1a":"numbers = [8, 4, 6, 1, 5]\nmin_list = numbers[0]\n\nfor number in numbers:\n    if number < min_list:\n        min_list = number\n\nnumbers","53cef693":"print(min_list)","a9540f6d":"import collections\n\nlist = [\"a\", \"r\", \"a\", \"w\", \"w\", \"a\", \"w\", \"r\", \"a\", \"w\", \"a\", \"a\", \"g\", \"r\", \"w\", \"a\", \"w\", \"r\"]\ncounter = collections.Counter(list)\nprint(dict(counter))","1751c219":"import numpy as np\nnotes = [14, 9, 13, 15, 12]\nstudent_marks = np.array(notes)\n\nprint(\"la note maximum : \" + str(max(notes)))\nprint(\"la note minimum : \" + str(min(notes)))\nprint(\"la note moyenne : {:.2f}\".format((student_marks.mean())))","a36f717d":"moyenne = student_marks.mean()\n\nif moyenne >= 14:\n    print(\"Bien\")\nelif moyenne >= 12:\n    print(\"Assez bien\")\nelse:\n    print(\"Passable\")\n","7738a612":"for i in range(0, 21):\n    if i < 10:\n        if i % 2 == 0:\n            print(\"Nombre pair : \" + str(i))\n    else:\n        if i % 2 != 0:\n            print(\"Nombre impair : \" + str(i))","1505cda3":"def Syracuse(n):\n    if n % 2 == 0:\n        n = n \/ 2\n    else:\n        n = 3 * n + 1\n    return n","5f5b2be7":"n = int(input(\"Donnez un nombre : \"))\nl = []\nfor i in range(15):\n    l.append(n)\n    n = Syracuse(n)\n\nl","e34ab321":"# working on ...","cf39d6b3":"def calc_puissance(x, y):\n    return x**y","0d43beb7":"calc_puissance(2, 3)","257145a6":"for i in range(0, 21):\n    print(\"2^ \" + str(i) + \" =  \" + str(calc_puissance(2, i)))","8f4dec82":"def gen_pyramide():\n    N = int(input(\"Entrer le nombre de lignes :\"))\n    for i in range(0, N):\n        print(\" \" * (N - 1 - i), end=\"\")\n        print(\"*\" * i, end=\"\")\n        print(\"*\", end=\"\")\n        print(\"*\" * i)","1a0563b3":"gen_pyramide()","87c5f757":"def est_premier(k):\n    if k == 2 or k == 3:\n        return True\n    if k % 2 == 0 or k < 2:\n        return False\n    for i in range(3, int(k ** 0.5) + 1, 2):\n        if k % i == 0:\n            return False\n    return True","bbe5664f":"prime_numbers = []\nfor e in [i for i in range(2, 201)]:\n    if est_premier(e):\n        prime_numbers.append(e)\n        \nprint(\"Voici la liste des nombres premiers entre 2 et 200 : \")\nprint(prime_numbers)","2f4dfe61":"def calc_puissance(x, y):\n    return x ** y\n\nclass Point:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def calc_distance_3D(self, point):\n        return calc_puissance(\n            calc_puissance(self.a - point.a, 2) + calc_puissance(self.b - point.b, 2) + calc_puissance(self.c - point.c,\n                                                                                                       2), 0.5)\n\n    def Aff(self):\n        return \"(\" + str(self.a) + \" ,\" + str(self.b) + \" ,\" + str(self.c) + \")\"","75921598":"A = Point(0, 0, 0)\nB = Point(1, 1, 1)\nprint(\"La distance euclidienne en trois dimensions entre les points A\" + A.Aff() + \" et B\" + B.Aff() + \" est : \" + str(\n    A.calc_distance_3D(B)))","41500e4e":"import random\n\ndef gen_distrib(debut, fin, n):\n    random_list = []\n    for i in range(n):\n        random_list.append(random.uniform(debut, fin))\n    return random_list\n\n\nprint(gen_distrib(3, 50, 9))","63631417":"import numpy as np\n\ndef calc_stat(list):\n    result = []\n    array_list = np.array(list)\n    result.append(array_list.min())\n    result.append(array_list.max())\n    result.append(array_list.mean())\n    return result","60265689":"test_liste = gen_distrib(3, 50, 9)  # On g\u00e9n\u00e9re une liste al\u00e9atoire de nombres r\u00e9els commpris entre 3 et 50\nprint(test_liste)","f0d5c023":"print(calc_stat(test_liste)) # On affiche le minimum, le maximum et la moyenne de la liste g\u00e9n\u00e9r\u00e9e.","ca675047":"random_lists = [] # liste qui contient l'ensemble des listes g\u00e9n\u00e9r\u00e9es.\nliste_min = [] # liste qui contient le minimum de chaque liste g\u00e9n\u00e9r\u00e9e.\nliste_max = [] # liste qui contient le maximum de chaque liste g\u00e9n\u00e9r\u00e9e.\nliste_moyenne = [] # liste qui contient la moyenne de chaque liste g\u00e9n\u00e9r\u00e9e.\nx = [i for i in range(1,21)]\n\nfor i in range(0, 20):\n    random_list = gen_distrib(0, 100, 100)\n    random_lists.append(random_list)\n    liste_min.append(calc_stat(random_list)[0])\n    liste_max.append(calc_stat(random_list)[1])\n    liste_moyenne.append(calc_stat(random_list)[2])","08c8d75b":"for i in range(len(random_lists)):\n    print(\"Liste \" + str(i + 1) + \" : min = {:.2f} ; max = {:.2f} ; moyenne = {:.2f}\".format(\n        calc_stat(random_lists[i])[0], calc_stat(random_lists[i])[0], calc_stat(random_lists[i])[0]))","7ea99969":"from pylab import *\n\nabscisse = array([i for i in range(20)])\nplot(abscisse, liste_max) # On plot la courbe max ( cas 1 : 20 listes al\u00e9atoires de 100 floats compris entre 0 et 100 )\nplot(abscisse, liste_min) # On plot la courbe min ( cas 1 : 20 listes al\u00e9atoires de 100 floats compris entre 0 et 100 )\nplot(abscisse, liste_moyenne) # On plot la courbe moyenne ( cas 1 : 20 listes al\u00e9atoires de 100 floats compris entre 0 et 100 )\nshow()  # affiche la figure a l'ecran","ca4658a6":"import random\n\ndef gen_distrib(debut, fin, n):\n    random_list = []\n    for i in range(n):\n        random_list.append(random.uniform(debut, fin))\n    return random_list\n\ndef calc_stat(list):\n    result = []\n    array_list = np.array(list)\n    result.append(array_list.min())\n    result.append(array_list.max())\n    result.append(array_list.mean())\n    return result\n\nrandom_lists = []\nliste_min = []\nliste_max = []\nliste_moyenne = []\nx = [i for i in range(1,21)]\nfor i in range(0, 20):\n    random_list = gen_distrib(0, 100, 1000)\n    random_lists.append(random_list)\n    liste_min.append(calc_stat(random_list)[0])\n    liste_max.append(calc_stat(random_list)[1])\n    liste_moyenne.append(calc_stat(random_list)[2])\n\nfor i in range(len(random_lists)):\n    print(\"Liste \" + str(i + 1) + \" : min = {:.2f} ; max = {:.2f} ; moyenne = {:.2f}\".format(\n        calc_stat(random_lists[i])[0], calc_stat(random_lists[i])[1], calc_stat(random_lists[i])[2]))","703de5d6":"from pylab import *\n\nabscisse = array([i for i in range(20)])\nplot(abscisse, liste_max) # On plot la courbe max ( cas 2 : 20 listes al\u00e9atoires de 1000 floats compris entre 0 et 100 )\nplot(abscisse, liste_min) # On plot la courbe min ( cas 2 : 20 listes al\u00e9atoires de 1000 floats compris entre 0 et 100 )\nplot(abscisse, liste_moyenne) # On plot la courbe moyenne ( cas 2 : 20 listes al\u00e9atoires de 100 floats compris entre 0 et 100 )\nshow()  # affiche la figure a l'ecran","29fad100":"import random\n\ndef gen_distrib(debut, fin, n):\n    random_list = []\n    for i in range(n):\n        random_list.append(random.uniform(debut, fin))\n    return random_list\n\ndef calc_stat(list):\n    result = []\n    array_list = np.array(list)\n    result.append(array_list.min())\n    result.append(array_list.max())\n    result.append(array_list.mean())\n    return result","d84d3dff":"random_lists = []\nfor i in range(0, 20):\n    random_list = gen_distrib(0, 100, 100)\n    random_lists.append(random_list)\n\nrandom_lists = []\nliste_min = []\nliste_max = []\nliste_moyenne = []\nx = [i for i in range(1, 21)]\nfor i in range(0, 20):\n    random_list = gen_distrib(0, 100, 10000)\n    random_lists.append(random_list)\n    liste_min.append(calc_stat(random_list)[0])\n    liste_max.append(calc_stat(random_list)[1])\n    liste_moyenne.append(calc_stat(random_list)[2])","d1a42cac":"from pylab import *\n\nabscisse = array([i for i in range(20)])\nplot(abscisse, liste_max) # On plot la courbe max ( cas 3 : 20 listes al\u00e9atoires de 10000 floats compris entre 0 et 100 )\nplot(abscisse, liste_min) # On plot la courbe min ( cas 3 : 20 listes al\u00e9atoires de 10000 floats compris entre 0 et 100 )\nplot(abscisse, liste_moyenne) # On plot la courbe moy ( cas 3 : 20 listes al\u00e9atoires de 10000 floats compris entre 0 et 100 )\n\nshow()  # affiche la figure a l'ecran","b0109aff":"# d'apr\u00e8s la figure suivante, on constate que lorsque le nombre d'\u00e9l\u00e9ments augmente, \n# les \u00e9carts sur les statistiques entre les diff\u00e9rentes diminuent.","70ce52ea":"# cas 1 : 20 listes al\u00e9atoires de 100 floats compris entre 0 et 100\n# cas 2 : 20 listes al\u00e9atoires de 1000 floats compris entre 0 et 100\n# cas 3 : 20 listes al\u00e9atoires de 10000 floats compris entre 0 et 100","b75e33fe":"file_list = [float(line[:-1]) for line in open(\"notes.txt\",\"r\")] # reading file content with list comprehension method.\nprint(file_list)","fab74f16":"import numpy as np\n\nstudent_marks = np.array(file_list)\nprint(\"The student's average grade is : {:.2f}\".format(student_marks.mean()))","502b3cc2":"file_notes_list = [float(line[:-1]) for line in open(\"notes.txt\",\"r\")] # reading file content with list comprehension method.\n\nwith open(\"notes2.txt\",\"w\") as file: # w -> overwriting mode \n    for e in file_notes_list:\n        if e >= 10:\n            file.write(\"{}  admis\\n\".format(e)) # write the text.\n        else:\n            file.write(\"{}  recal\u00e9\\n\".format(e)) # write the text.\n\n        \nwith open(\"notes2.txt\") as file: # v\u00e9rifcation.\n    print(file.read())","782a5ae2":"import math\nimport numpy as np\n\n\u03b8 = np.arange(0, 4 * math.pi, 0.1)\nprint(\u03b8)  # \u03b8 c'est l'intervalle [0, 4\u03c0]","c0db22c7":"print(\u03b8.shape)\nprint(\u03b8[3]) ","f39ad3f2":"\u03c1 = np.arange(0.5, 13.1, 0.1)\n\u03c1 # \u03c1 c'est l'intervalle \u03c1 \u2208 [0.5, 13.1[","ba1265bc":"print(\u03c1.shape)\nprint(\u03c1[3]) ","df139783":"coordinates = []\nfor i in range(0, 125):\n    coordinate = (\u03c1[i]* math.cos(\u03b8[i]), \u03c1[i]* math.sin(\u03b8[i]))\n    coordinates.append(coordinate)\n    \nprint(coordinates[0: 5]) # Affichage  des 5 premi\u00e9res coordonn\u00e9es.","04c87e51":"with open(\"spirale.dat\",\"w\") as file: # w -> overwriting mode \n    for coordinate in coordinates: \n        file.write(\"{}   {}\".format(coordinate[0],  coordinate[1])) # write the text.\n        \nwith open(\"spirale.dat\") as file: # v\u00e9rifcation.\n    print(file.read())","1173f678":"import matplotlib.pyplot as plt # v\u00e9rification de la validit\u00e9 de la spirale\nplt.plot([coordinate[0] for coordinate in coordinates],[coordinate[1] for coordinate in coordinates])","fe774909":"**Jours de la semaine**  : constituez une liste semaine contenant le nom des sept jours de la semaine. En utilisant une boucle, \u00e9crivez chaque jour de la\nsemaine ainsi que les messages suivants :                                      \n  \u2022 Au travail s\u2019il s\u2019agit du lundi au jeudi ;                                       \n  \u2022 Bient\u00f4t le week-end s\u2019il s\u2019agit du vendredi ;                                   \n  \u2022 Repos ce week-end s\u2019il s\u2019agit du samedi ou du dimanche.                        ","a22a9391":"<h3> Exercice 6 : <\/h3>","6e6fc416":"**La conjecture de Syracuse** : est une conjecture math\u00e9matique qui reste improuv\u00e9e \u00e0 ce jour et qui est d\u00e9finie de la mani\u00e8re suivante.\nSoit un entier positif n. Si n est pair, alors le diviser par 2. Si il est impair, alors le multiplier par 3 et lui ajouter 1. En r\u00e9p\u00e9tant cette proc\u00e9dure, la suite de\nnombres atteint la valeur 1 puis se prolonge ind\u00e9finiment par une suite de trois valeurs triviales appel\u00e9e cycle trivial.\nJusqu\u2019\u00e0 pr\u00e9sent, la conjecture de Syracuse, selon laquelle depuis n\u2019importe quel entier positif la suite de Syracuse atteint 1, n\u2019a pas \u00e9t\u00e9 mise en d\u00e9faut.\nPar exemple, les premiers \u00e9l\u00e9ments de la suite de Syracuse si on prend comme point de d\u00e9part 10 sont : 10, 5, 16, 8, 4, 2, 1\u2026\nCr\u00e9ez un script qui, partant d\u2019un entier positif n, cr\u00e9e une liste des nombres de la suite de Syracuse.","120a0c56":"<h3> Exercice 4 : <\/h3>","0aeabe4c":"Dans le programme principal, **g\u00e9n\u00e9rez 20 listes al\u00e9atoires de 100 floats compris entre 0 et 100** et **affichez le minimum (min()), le maximum\n(max())** et **la moyenne pour chacune d\u2019entre elles**.","eb93a419":"<h3> Exercice 19 : <\/h3>","e126cdb6":"Soit impairs la liste de nombres [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]. \u00c9crivez un programme qui, \u00e0 partir de la liste impairs, construit une liste\npairs dans laquelle tous les \u00e9l\u00e9ments de impairs sont incr\u00e9ment\u00e9s de 1.","73972355":"<h3> Exercice 18 : <\/h3>","6178e01d":"**Nombres pairs** : Construisez une boucle qui parcourt les nombres de 0 \u00e0 20 et qui affiche les nombres pairs inf\u00e9rieurs ou \u00e9gaux \u00e0 10 d\u2019une part, et les nombres impairs strictement sup\u00e9rieurs \u00e0 10 d\u2019autre part.","6cc10b07":"<h3> Exercice 22 : <\/h3>","a916f406":"Cr\u00e9ez une fonction calc_puissance(x, y) qui renvoie xy en utilisant l\u2019op\u00e9rateur **.","64dfa34d":"<h3> Exercice 13 : <\/h3>","e06afefe":"Cr\u00e9ez un script qui parcourt chaque \u00e9l\u00e9ment de la matrice et qui affiche le num\u00e9ro de ligne et de colonne uniquement avec des boucles for :","5f5024ae":"What I need ?| Python Basics","03f05e26":"<h3> Exercice 3 : <\/h3>","297148f3":"Triangle gauche ","cd03521e":"<h3> Exercice 5 : <\/h3>","64fb4983":"<h3> Exercice 21 : <\/h3>","e3bfe434":"<h3> Exercice 15 : <\/h3>","a3e96617":"<h3> Exercice 1 : <\/h3>","6f1e449b":"Essayez de faire \u00e9voluer votre script pour dessiner la pyramide \u00e0 partir d\u2019un nombre arbitraire de lignes N. Vous pourrez demander \u00e0 l\u2019utilisateur le\nnombre de lignes de la pyramide avec les instructions suivantes qui utilisent la fonction input() :","42d925fc":" **Notes et mention d\u2019un \u00e9tudiant** : Voici les notes d\u2019un \u00e9tudiant : 14, 9, 13, 15 et 12. Cr\u00e9ez un script qui affiche la note maximum (utilisez la fonction\nmax()), la note minimum (utilisez la fonction min()) et qui calcule la moyenne.\nAffichez la valeur de la moyenne avec deux d\u00e9cimales. Affichez aussi la mention obtenue sachant que la mention est \u00ab passable \u00bb si la moyenne est entre\n10 inclus et 12 exclus, \u00ab assez bien \u00bb entre 12 inclus et 14 exclus et \u00ab bien \u00bb au-del\u00e0 de 14.","5bc5c962":"<h3> Exercice 12 : <\/h3>","09c735cd":"<h3> Exercice 11 : <\/h3>","23d84c3e":"Cr\u00e9ez une fonction **gen_distrib()** qui prend comme argument les entiers : **debut**, **fin** et **n**. La fonction renverra une **liste de n floats**\nal\u00e9atoires entre debut et fin.                      \nPour g\u00e9n\u00e9rer un nombre al\u00e9atoire dans un intervalle donn\u00e9, utilisez la fonction **uniform()** du module **random**.\nAvec la fonction **random.uniform()**, les bornes pass\u00e9es en argument sont incluses.","8742c0a9":"R\u00e9sultat du script avec des listes de 1000 \u00e9l\u00e9ments :","8605a3a5":"<h3> Exercice 14 : <\/h3>","2567b1cb":"la proc\u00e9dure derni\u00e9re permet d'avoir les variables \u03c1 et \u03b8 varient deux  en m\u00eame temps.","1e596df3":"<h3> Exercice 2 : <\/h3>","29987ead":"<h3> Exercice 23 : <\/h3>","84f33f01":"Triangle invers\u00e9","bad17491":"Avez les fonctions list() et range(), cr\u00e9ez la liste entiers contenant les nombres entiers pairs de 2 \u00e0 20 inclus. Calculez ensuite le produit des nombres\ncons\u00e9cutifs deux \u00e0 deux de entiers en utilisant une boucle.","6b25c364":"Dans un script pyra.py, cr\u00e9ez une fonction **gen_pyramide()** \u00e0 laquelle vous passez un nombre entier N et qui renvoie une pyramide de N lignes\nsous forme de cha\u00eene de caract\u00e8res. Le programme principal demandera \u00e0 l\u2019utilisateur le nombre de lignes souhait\u00e9es (utilisez pour cela la fonction\ninput()) et affichera la pyramide \u00e0 l\u2019\u00e9cran.","ab5f5384":"Cr\u00e9ez un script Python qui lit chaque ligne de ce fichier, extrait les notes sous forme de float et les stocke dans\nune liste. Terminez le script en calculant et affichant la moyenne des notes avec deux d\u00e9cimales.","6d8eff6d":"Consider the list [\"Java\", \"C++\", \"C\", \"Python\"]. I want to display all the elements of this list (one element per line) in three different ways (two with\nfor and one with while).","894a4a2f":"**Recherche d\u2019un nombre par dichotomie :**","6882f3a7":"Interpretaion : Les \u00e9carts changent-ils quand le nombre d\u2019\u00e9l\u00e9ments par liste augmente ?","eda657b4":"<h3> Exercice 22 : <\/h3>","6c7bd4cf":"<h3> Exercice 20 : <\/h3>","f43c6f8c":"Voici les notes d\u2019un \u00e9tudiant [14, 9, 6, 8, 12]. Calculez la moyenne de ces notes. Utilisez l\u2019\u00e9criture format\u00e9e pour afficher la valeur de la moyenne\navec deux d\u00e9cimales.","8cb3528b":"<h3> Exercice 8 : <\/h3>","9f9989bd":"***Fr\u00e9quence de caract\u00e8res** : La liste ci-dessous repr\u00e9sente une s\u00e9quence de caract\u00e8res :\n[\"A\",\"R\",\"A\",\"W\",\"W\",\"A\",\"W\",\"A\",\"R\",\"W\",\"W\",\"R\",\"A\",\"G\"]. Calculez la fr\u00e9quence des caract\u00e8res \"A\", \"R\", \"W\" et \"G\"\ndans cette s\u00e9quence.","2519f099":"Cr\u00e9ez une fonction **est_premier()** qui prend comme argument un nombre entier positif n (sup\u00e9rieur \u00e0 2) et qui renvoie le bool\u00e9en True si n est\npremier et False si n n\u2019est pas premier. D\u00e9terminez tous les nombres premiers de 2 \u00e0 100.","607292af":"![image.png](attachment:image.png)","efcf379d":"<h3> Exercice 17 : <\/h3>","9e8ab930":"<h3> Exercice 9 : <\/h3>","f8bc4782":"Pyramide","1106df32":"I want to build a week list containing the 7 days of the week. I'm going to write a series of instructions displaying the days of the week (using a\nfor loop), as well as another set of instructions showing the days of the weekend (using a while loop).","6900694a":"<h3> Exercice 16 : <\/h3>","a99e3bd4":"<h3> Exercice 10 : <\/h3>","67fb1e95":"Distance 3D Cr\u00e9ez une fonction **calc_distance_3D()** qui calcule la distance euclidienne en trois dimensions entre deux atomes. \nOn rappelle que la distance euclidienne d entre deux points M et N de coordonn\u00e9es cart\u00e9siennes respectives **(xm , ym , zm)** et **(xn , yn , zn)** se calcule comme suit :","3e40cbba":"Dans le programme principal, calculez et affichez \u00e0 l\u2019\u00e9cran 2i avec i variant de 0 \u00e0 20 inclus. On souhaite que le r\u00e9sultat soit pr\u00e9sent\u00e9 avec le\nformatage suivant :","97e29f2f":"![image.png](attachment:image.png)","9f200005":"soit P(x, y) un point d'une spirale, alors les coordonn\u00e9es cart\u00e9siennes du point P soit tel que :                          \n    - \u03c1(P) = f(\u03b8)                                    \n    - x = \u03c1 * cos(\u03b8)  ( dans notre cas : \u03b8 \u2208 [0, 4\u03c0] )                     \n    - y = \u03c1 * sin(\u03b8)  ( dans notre cas : \u03c1 \u2208 [0.5, +\u221e[ )                 ","6b4ef41a":"R\u00e9sultat du script avec des listes de 10000 \u00e9l\u00e9ments :","43208951":"Cr\u00e9ez une autre fonction **calc_stat()** qui prend en argument une **liste de floats** et qui renvoie une **liste de trois \u00e9l\u00e9ments** contenant respectivement\n**le minimum**, **le maximum** et **la moyenne** de la liste.","c65ca796":"Triangle","8044f955":"<h3> Exercice 7 : <\/h3>","3a804b64":"**Minimum d\u2019une liste** : la fonction min() de Python renvoie l\u2019\u00e9l\u00e9ment le plus petit d\u2019une liste constitu\u00e9e de valeurs num\u00e9riques ou de cha\u00eenes de\ncaract\u00e8res. Sans utiliser cette fonction, cr\u00e9ez un script qui d\u00e9termine le plus petit \u00e9l\u00e9ment de la liste : **[8, 4, 6, 1, 5]**.","29580b64":"voici un extrait du contenu du fichier **note.txt**","775b8eb2":"Using a for loop, I'm going to display numbers from 1 to 10 in the same line!","ee329896":"![image.png](attachment:image.png)","cb646f5c":"![image.png](attachment:image.png)"}}