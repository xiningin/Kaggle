{"cell_type":{"bc6d958a":"code","50a4f92a":"code","2d242862":"code","20ba997a":"code","a4c18a62":"code","209abd0d":"code","9c532a86":"code","6a40a30f":"code","ff950f25":"code","bd3cf135":"code","50378417":"code","4732f7ec":"code","2de7260c":"code","55920625":"code","506a9044":"code","bf61e0f3":"code","1cfa7645":"code","4b47c0c4":"code","586da631":"code","578312e7":"code","3bd6d549":"code","0010ee52":"code","8c4a430e":"code","241ca740":"code","33521e67":"code","05c00f1b":"code","de247e31":"code","f8da1e53":"code","fbd0646a":"code","712b6587":"code","6de6180c":"code","90717ed4":"code","ddc044d3":"code","df78147e":"code","b03b66f1":"code","499c29db":"markdown","c0ddb384":"markdown","bd8d7ca5":"markdown","9231d776":"markdown","82794cd2":"markdown","18c99e9f":"markdown","7fa8c4e5":"markdown","a6d0efbf":"markdown","32dfc6c7":"markdown","2e85b5b9":"markdown","ee2d6fd3":"markdown","85b51f7a":"markdown","4d887f62":"markdown","b7197371":"markdown","cc7f1596":"markdown","14a34b1e":"markdown","d123f713":"markdown","0192573e":"markdown","dd847f5e":"markdown","095891f5":"markdown","c0a50288":"markdown"},"source":{"bc6d958a":"import numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier","50a4f92a":"squads = pd.read_csv('..\/input\/winnerpredictionchallenge\/IPL 2020 Squads.csv', engine = 'python')\ndeliveries = pd.read_csv('..\/input\/winnerpredictionchallenge\/Traning Deliveries Matches IPL 2008-2019.csv' ,engine = 'python')\nqualifier = pd.read_csv('..\/input\/winnerpredictionchallenge\/Qualifiers IPL 2008-2019.csv', engine = 'python')\ntest = pd.read_csv('..\/input\/winnerpredictionchallenge\/Testset Matches IPL 2020.csv',engine = 'python')\ntrain = pd.read_csv('..\/input\/winnerpredictionchallenge\/Training Matches IPL 2008-2019.csv', engine = 'python')","2d242862":"deliveries.drop([\"over\",\"ball\",\"non_striker\",\"is_super_over\",\"wide_runs\",\"bye_runs\",\n                 \"legbye_runs\",\"noball_runs\",\"penalty_runs\",\"extra_runs\",\n                 \"total_runs\",\"dismissal_kind\"],axis = 1,inplace = True)","20ba997a":"deliveries[\"player_dismissed\"] = deliveries[\"player_dismissed\"].fillna(0)\ndeliveries[\"player_dismissed\"] = np.where(deliveries[\"player_dismissed\"] == 0 ,0,1)\ndeliveries[\"catch\"] = deliveries[\"fielder\"]\ndeliveries[\"catch\"] = deliveries[\"catch\"].fillna(0)\ndeliveries[\"catch\"] = np.where(deliveries[\"catch\"] == 0 ,0,1)","a4c18a62":"deliveries[\"batsman_extra_score\"] = deliveries[\"batsman_runs\"]\ndeliveries[\"batsman_extra_score\"] = deliveries[\"batsman_extra_score\"].replace(1,0)\ndeliveries[\"batsman_extra_score\"] = deliveries[\"batsman_extra_score\"].replace(2,0)\ndeliveries[\"batsman_extra_score\"] = deliveries[\"batsman_extra_score\"].replace(3,0)\ndeliveries[\"batsman_extra_score\"] = deliveries[\"batsman_extra_score\"].replace(5,0)\ndeliveries[\"batsman_extra_score\"] = deliveries[\"batsman_extra_score\"].replace(4,1)\ndeliveries[\"batsman_extra_score\"] = deliveries[\"batsman_extra_score\"].replace(6,2)","209abd0d":"teams = train.team1.unique()\nfor i in teams:\n    print(i)","9c532a86":"squads[\"Player_ipl_team\"].unique()","6a40a30f":"teams.sort()\n\nteam_abv = []\nfor t in teams:\n    new = t[0]\n    if t == \"Kings XI Punjab\":\n        team_abv.append(\"KXIP\")\n    if t == \"Sunrisers Hyderabad\":\n        team_abv.append(\"SRH\")\n    else:\n        for i in range(len(t)):\n            if t[i] == \" \":\n                new = new + t[i+1]\n        team_abv.append(new)\n\nl1 = [\"team1\" , \"team2\",\"toss_winner\",\"winner\"]\nl2 = [\"batting_team\",\"bowling_team\"]\nfor i in range(len(teams)):\n    for l in l1:\n        train[l] = train[l].replace(teams[i],team_abv[i])\n    for l in l2:\n        deliveries[l] = deliveries[l].replace(teams[i],team_abv[i])","ff950f25":"batsman = deliveries.batsman.unique()\nbatsman.sort()\nbowler = deliveries.bowler.unique()\nbowler.sort()\n\ncorrected_batsman = []\nfor b in batsman:\n    new = b[0]\n    for i in range(len(b)):\n        if b[i] == \" \":\n            new = new + b[i:]\n    corrected_batsman.append(new)\n\ncorrected_bowler = []\nfor b in bowler:\n    new = b[0]\n    for i in range(len(b)):\n        if b[i] == \" \":\n            new = new + b[i:]\n    corrected_bowler.append(new)\n    \nfor i in range(len(batsman)):\n    deliveries[\"batsman\"] = deliveries[\"batsman\"].replace(batsman[i],corrected_batsman[i])\n\nfor i in range(len(bowler)):\n    deliveries[\"bowler\"] = deliveries[\"bowler\"].replace(bowler[i],corrected_bowler[i])","bd3cf135":"for j in range(squads.shape[0]):\n    p = squads[\"Player_name\"][j]\n    tem = p[0]+\" \"\n    for i in range(len(p)):\n        if p[i] == \" \":\n            tem += p[i+1:]\n        if p[i] == \"(\":\n            tem = tem[:i-2]\n            \n    squads[\"Player_name\"][j] = tem","50378417":"train[\"toss_decision\"] = np.where(train[\"toss_decision\"] == \"bat\",1,0)","4732f7ec":"train[\"team1_toss_win\"] = train[\"team1\"]\ntrain[\"team1_toss_win\"] = np.where(train[\"team1\"] == train [\"toss_winner\"],1,0)\n\ntrain[\"team1_bat\"] = train[\"team1\"]\ntrain[\"team1_bat\"] = np.where(train[\"team1_toss_win\"] == train[\"toss_decision\"],1,0)\n\ntrain[\"team1_win\"] = train[\"team1\"]\ntrain[\"team1_win\"] = np.where(train[\"team1\"] == train [\"winner\"],1,0)","2de7260c":"encoder= preprocessing.LabelEncoder()\ntrain[\"team1\"]=encoder.fit_transform(train[\"team1\"])\ntrain[\"team2\"]=encoder.fit_transform(train[\"team2\"])\n","55920625":"# Used fantasy cricket scoring points to get player value.\n\ndef Player_value(player,match):\n    df_1 = deliveries.query(\"match_id == '%s'\"%match).query(\"batsman == '%s'\"%player)\n    score = sum(df_1[\"batsman_runs\"])\n    if score == 0:\n        score += -2\n    if score >= 50 and score < 100:\n        score += 8\n    if score >= 100:\n        score += 16\n    score += sum(df_1[\"batsman_extra_score\"])\n    \n    df_2 = deliveries.query(\"match_id == '%s'\"%match).query(\"bowler == '%s'\"%player)\n    if sum(df_2[\"player_dismissed\"]) == 4:\n        score += 8\n    if sum(df_2[\"player_dismissed\"]) >= 5:\n        score += 16\n    score += sum(df_2[\"player_dismissed\"])*25\n    \n    df_3 = deliveries.query(\"match_id == '%s'\"%match).query(\"fielder == '%s'\"%player)\n    score += sum(df_3[\"catch\"])*8\n    \n    if df_1.shape[0] == 0 and df_2.shape[0] == 0 and df_3.shape[0] == 0:\n        return 0\n    \n    return score","506a9044":"match_id = deliveries.match_id.unique()\n\nScores = pd.DataFrame(columns = [\"id\",\"team1_bats_score\",\"team1_bowl_score\",\"team2_bats_score\",\"team2_bowl_score\"])\n\nfor i in match_id:\n    bowler_1 = deliveries.query(\"match_id == '%s'\"%i).query(\"inning == 2\").bowler.unique()\n    bowler_2 = deliveries.query(\"match_id == '%s'\"%i).query(\"inning == 1\").bowler.unique()\n    bats_1 = deliveries.query(\"match_id == '%s'\"%i).query(\"inning == 1\").batsman.unique()\n    bats_2 = deliveries.query(\"match_id == '%s'\"%i).query(\"inning == 2\").batsman.unique()\n    \n    team1_bowl_score = 0\n    team2_bowl_score = 0\n    team1_bats_score = 0\n    team2_bats_score = 0\n    \n    for p in bowler_1:\n        team1_bowl_score += Player_value(p,i)\n        \n    for p in bowler_2:\n        team2_bowl_score += Player_value(p,i)\n    \n    for p in bats_1:\n        team1_bats_score += Player_value(p,i)\n        \n    for p in bats_2:\n        team2_bats_score += Player_value(p,i)\n        \n    Scores = Scores.append({\"id\":i,\"team1_bats_score\":team1_bats_score,\n                            \"team1_bowl_score\":team1_bowl_score,\n                            \"team2_bats_score\":team2_bats_score,\n                            \"team2_bowl_score\":team2_bowl_score},  ignore_index = True)","bf61e0f3":"train = train[[\"id\",\"team1\",\"team2\",\"team1_toss_win\",\"team1_bat\",\"team1_win\"]]","1cfa7645":"TEMP = Scores.merge(train,how='left', on = 'id')","4b47c0c4":"TEMP.drop([\"id\"],axis = 1,inplace = True)","586da631":"TEMP = TEMP.astype(float)","578312e7":"correlated_features = set()\ncorrelation_matrix = TEMP.drop('team1_win', axis=1).corr()\n\nfor i in range(len(correlation_matrix.columns)):\n    for j in range(i):\n        if abs(correlation_matrix.iloc[i, j]) > 0.9:\n            column = correlation_matrix.columns[i]\n            correlated_features.add(column)\n            \n\ncorrelation_matrix","3bd6d549":"X = TEMP[[\"team1\",\"team2\",\"team1_toss_win\",\"team1_bat\",\"team1_bats_score\",\"team1_bowl_score\",\"team2_bats_score\",\"team2_bowl_score\"]]\ntarget = TEMP[\"team1_win\"]\nX_train, X_test, y_train, y_test = train_test_split(X, target, test_size=0.2, random_state=0,shuffle=True)","0010ee52":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\ny_pred = logreg.predict(X_test)\nprint('Accuracy of Logistic Regression Classifier on test set: {:.4f}'.format(logreg.score(X_test, y_test)))\n\n#Decision Tree Classifier\ndtree=DecisionTreeClassifier()\ndtree.fit(X_train,y_train)\ny_pred = dtree.predict(X_test)\nprint('Accuracy of Decision Tree Classifier on test set: {:.4f}'.format(dtree.score(X_test, y_test)))\n\n#SVM\nsvm=SVC()\nsvm.fit(X_train,y_train)\ny_pred = svm.predict(X_test)\nprint('Accuracy of SVM Classifier on test set: {:.4f}'.format(svm.score(X_test, y_test)))\n\n#Random Forest Classifier\nrandomForest= RandomForestClassifier(n_estimators=100)\nrandomForest.fit(X_train,y_train)\ny_pred = randomForest.predict(X_test)\nprint('Accuracy of Random Forest Classifier on test set: {:.4f}'.format(randomForest.score(X_test, y_test)))","8c4a430e":"test = test[[\"id\",\"team1\",\"team2\"]]","241ca740":"test[\"team1_toss_win\"] = np.random.randint(0,2,test.shape[0])\ntest[\"team1_bat\"] = np.random.randint(0,2,test.shape[0])","33521e67":"teams2020 = squads[\"Player_ipl_team\"].unique()\nExpected = pd.DataFrame(columns = [\"team\",\"avg_bats_score\",\"avg_bowl_score\"])\n\nfor t in teams2020:\n    team_bats_avg = 0\n    team_bowl_avg = 0\n    temp = squads.query(\"Player_ipl_team == '%s'\"%t)\n    for i in temp[\"Player_name\"]:\n        player_bowl_value = 0\n        player_bats_value = 0\n        bats_matches = deliveries.query(\"batsman == '%s'\"%i).match_id.unique()\n        bowler_matches = deliveries.query(\"bowler == '%s'\"%i).match_id.unique()\n        \n        for m in bowler_matches:\n            player_bowl_value += Player_value(i,m)\n        \n        for m in bats_matches:\n            player_bats_value += Player_value(i,m)\n        \n        if len(bats_matches) != 0:\n            team_bats_avg += player_bats_value \/\/ len(bats_matches)\n            \n            \n        if len(bowler_matches) != 0:\n            team_bowl_avg += player_bowl_value \/\/ len(bowler_matches)\n            \n        else: \n            team_bats_avg += 20\n            team_bowl_avg += 20\n            \n    Expected = Expected.append({\"team\": t,\"avg_bats_score\":team_bats_avg,\"avg_bowl_score\":team_bowl_avg},ignore_index=True)","05c00f1b":"test[\"team1_bats_score\"] = test[\"team1\"]\ntest[\"team1_bowl_score\"] = test[\"team2\"]\ntest[\"team2_bats_score\"] = test[\"team1\"]\ntest[\"team2_bowl_score\"] = test[\"team2\"]\n\nfor i in range(Expected.shape[0]):\n    test[\"team1_bats_score\"] = test[\"team1_bats_score\"].replace(Expected[\"team\"][i],Expected[\"avg_bats_score\"][i])\n    test[\"team2_bats_score\"] = test[\"team2_bats_score\"].replace(Expected[\"team\"][i],Expected[\"avg_bats_score\"][i])\n    test[\"team1_bowl_score\"] = test[\"team1_bowl_score\"].replace(Expected[\"team\"][i],Expected[\"avg_bowl_score\"][i])\n    test[\"team2_bowl_score\"] = test[\"team2_bowl_score\"].replace(Expected[\"team\"][i],Expected[\"avg_bowl_score\"][i])","de247e31":"test","f8da1e53":"test[\"team1\"]=encoder.fit_transform(test[\"team1\"])\ntest[\"team2\"]=encoder.fit_transform(test[\"team2\"])","fbd0646a":"predictor = test[[\"team1\",\"team2\",\"team1_toss_win\",\"team1_bat\",\"team1_bats_score\",\"team1_bowl_score\",\"team2_bats_score\",\"team2_bowl_score\"]]","712b6587":"y_pred_rforest = randomForest.predict(predictor)","6de6180c":"Submission_rforest = pd.DataFrame(test[\"id\"])","90717ed4":"Submission_rforest[\"winner\"] = y_pred_rforest","ddc044d3":"Submission_rforest[\"winner\"] = Submission_rforest[\"winner\"].replace(0,2)","df78147e":"Submission_rforest = Submission_rforest.astype(int)","b03b66f1":"Submission_rforest.to_csv(\"Submission_rforest.csv\", index = False)","499c29db":"Spliting data for training","c0ddb384":"### Importing data","bd8d7ca5":"Checking for the best Model","9231d776":"### Data pre-processing","82794cd2":"### Defining function for calculating Player_value","18c99e9f":"Finding the higly correlated features","7fa8c4e5":"We can see both Logistic and SVM model are good. But we choose SVM classifier.","a6d0efbf":"# Test","32dfc6c7":"Assigning values to each team as above (train data)","2e85b5b9":"Assigning values to each team","ee2d6fd3":"Defining team1 toss win with 0.5 probability and decision of toss with 0.5 probability","85b51f7a":"Calculating expected Scores for each team","4d887f62":"Predicting data from SVM classifier","b7197371":"Selecting parameters from test data","cc7f1596":"Merging teams' scores and train data","14a34b1e":"Cleaning train data","d123f713":"Checking all teams","0192573e":"### Training Models","dd847f5e":"### Creating Dataset for teams' scores","095891f5":"Selecting useful parameters from train data","c0a50288":"Dropping unwanted parameters from deliveries."}}