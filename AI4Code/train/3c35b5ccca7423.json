{"cell_type":{"98e8be7d":"code","ce60fe17":"code","0de66033":"code","3d2d744c":"code","214a70b2":"code","068b7667":"code","9677033d":"code","05e81c5b":"code","2cce8142":"code","cf09618c":"code","6a334b9f":"code","ab206b00":"code","76007b08":"code","0973f4e0":"code","3c469420":"code","7c008d93":"code","efba2881":"code","6875da34":"code","1b4c4bcb":"code","b1ac2367":"code","4d3a2704":"code","62b0245c":"code","7a1cae76":"markdown","6dd0efd8":"markdown","6ec08f3d":"markdown","0a86d755":"markdown","03b5e1dc":"markdown","3b3c62f8":"markdown","189fa2ef":"markdown","3c19f8b3":"markdown","e8ba8820":"markdown","2cf9e563":"markdown","16d2a6f3":"markdown","e784e710":"markdown","ea4ee380":"markdown","6bc0e4a3":"markdown","4b0e3886":"markdown","785a8944":"markdown","2421dc34":"markdown"},"source":{"98e8be7d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ce60fe17":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nplt.style.use('ggplot')\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import metrics","0de66033":"df = pd.read_csv('\/kaggle\/input\/wine-customer-segmentation\/Wine.csv')\ndf.head(10)","3d2d744c":"df.info()","214a70b2":"plt.figure(figsize=(12,8))\nsns.heatmap(df.describe()[1:].transpose(),\n            annot=True,linecolor=\"w\",\n            linewidth=2,cmap=sns.color_palette(\"Set1\"))\nplt.title(\"Data summary\")\nplt.show()","068b7667":"cor_mat= df[:].corr()\nmask = np.array(cor_mat)\nmask[np.tril_indices_from(mask)] = False\nfig=plt.gcf()\nfig.set_size_inches(30,12)\nsns.heatmap(data=cor_mat,mask=mask,square=True,annot=True,cbar=True)","9677033d":"corr=df.corr()\ncorr.sort_values(by=[\"Customer_Segment\"],ascending=False).iloc[0].sort_values(ascending=False)","05e81c5b":"print('Goup 1:',len(df[df.Customer_Segment == 1]))\nprint('Group 2:',len(df[df.Customer_Segment == 2]))\nprint('Group 3:',len(df[df.Customer_Segment == 3]))","2cce8142":"plt.rcParams['figure.figsize'] = (20, 10)\nsize = [59, 71, 48]\ncolors = ['mediumseagreen', 'c', 'gold']\nlabels = \"Group A\", \"Group B\", \"Group C\"\nexplode = [0, 0, 0.1]\nplt.subplot(1, 2, 1)\nplt.pie(size, colors = colors, labels = labels, explode = explode, shadow = True, autopct = '%.2f%%')\n#plt.title('Different Visitors', fontsize = 20)\nplt.axis('off')\nplt.legend()","cf09618c":"plt.figure(figsize=(10,9))\nsns.scatterplot(x='Ash_Alcanity',y='Color_Intensity',data=df,palette='Set1', hue = 'Customer_Segment');","6a334b9f":"X = df.drop('Customer_Segment',axis=1).values\ny = df['Customer_Segment'].values","ab206b00":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 0)","76007b08":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","0973f4e0":"from sklearn.decomposition import PCA\npca = PCA(n_components = None)\nX_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)\nexplained_variance = pca.explained_variance_ratio_\nexplained_variance","3c469420":"from sklearn.decomposition import PCA\npca = PCA(n_components = 2)\nX_train = pca.fit_transform(X_train)\nX_test = pca.transform(X_test)\nexplained_variance = pca.explained_variance_ratio_\nexplained_variance","7c008d93":"from xgboost import XGBClassifier\nclassifier = XGBClassifier()\nclassifier.fit(X_train, y_train)","efba2881":"#prediction the test set result\ny_pred = classifier.predict(X_test)","6875da34":"cm = confusion_matrix(y_test,y_pred)\nclass_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cm), annot=True, cmap=\"BuPu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","1b4c4bcb":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","b1ac2367":"from sklearn import metrics\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","4d3a2704":"from matplotlib.colors import ListedColormap\nplt.figure(figsize=(12,8))\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n                c = ListedColormap(('red', 'green', 'blue'))(i), label = j)\nplt.title('Logistic Regression (Training set)')\nplt.xlabel('PC1')\nplt.ylabel('PC2')\nplt.legend()\nplt.show()","62b0245c":"from matplotlib.colors import ListedColormap\nplt.figure(figsize=(12,8))\nX_set, y_set = X_test, y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),\n             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],\n                c = ListedColormap(('red', 'green', 'blue'))(i), label = j)\nplt.title('Logistic Regression (Test set)')\nplt.xlabel('PC1')\nplt.ylabel('PC2')\nplt.legend()\nplt.show()","7a1cae76":"**Importing the libraries**","6dd0efd8":"Let's grab 2 number of component","6ec08f3d":"**Visualising the Test set results**","0a86d755":"**Correlation Matrix**","03b5e1dc":"**Predictions and Evaluations**","3b3c62f8":"**Splitting the data into training set and test set**","189fa2ef":"**Applying PCA**","3c19f8b3":"**Making Confusion Matrix**","e8ba8820":"Create a classification report for the model.","2cf9e563":"**EDA**","16d2a6f3":"**Feature Scalling**","e784e710":"**Let\u2019s create some simple plots to check out the data!**","ea4ee380":"**Fitting XGBoost to the training set**","6bc0e4a3":"**Let's see Percentage of customer group in the dataset!**","4b0e3886":"**Importing the dataset**","785a8944":"**Visualising the Training set results**","2421dc34":"**Let's see the correlation for Customer Segment column in our dataset**"}}