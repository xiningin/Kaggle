{"cell_type":{"906526a7":"code","3b09509d":"code","7133239b":"code","8f127739":"code","31d74e5c":"code","f95c0863":"code","fcb1633f":"code","de2175cd":"code","277aa0e8":"code","43e6e830":"code","4fc6c37b":"code","a76bd897":"code","d38a17da":"code","9901221b":"code","362991a2":"code","ce8e481b":"code","7951ad08":"code","e64a159d":"code","8c8b714c":"code","abd21196":"code","9468de3a":"code","d468a8d6":"code","37d8b87b":"code","c966be62":"code","d6ee7207":"code","e74e141a":"code","e824420b":"code","6675ecc0":"code","cbf0feb9":"code","134c33b0":"code","6dbb1c5c":"code","9025a09d":"code","3a5c3da0":"code","0c26c14f":"code","ee4dbe2f":"code","bfd14683":"code","26f6582f":"code","6de9b58f":"code","3a28034d":"code","b577e184":"code","fd95c114":"code","434dc440":"code","9cd3c256":"code","91aa8b48":"code","c6ec9ef5":"code","b988fe30":"markdown","38a575b5":"markdown","15a3a883":"markdown","fc7d070d":"markdown","e1d2e265":"markdown","b1bb451e":"markdown","465b2da3":"markdown","d2e18cc8":"markdown"},"source":{"906526a7":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","3b09509d":"import numpy as np\nimport pandas as pd\nimport datetime\nimport random\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.preprocessing import LabelEncoder\nfrom scipy.stats import norm, skew\nfrom scipy.special import boxcox1p\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import scale\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.linear_model import Ridge, RidgeCV\nfrom sklearn.linear_model import ElasticNet, ElasticNetCV","7133239b":"train_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntrain_df.shape, test_df.shape","8f127739":"df = pd.concat((train_df, test_df)).reset_index(drop=True)\ny=df['SalePrice']\nprint(\"all_data size is : {}\".format(df.shape))","31d74e5c":"df.head()","f95c0863":"quantitative = [f for f in df.columns if df.dtypes[f] != 'object']\nquantitative.remove('SalePrice')\nquantitative.remove('Id')\nqualitative = [f for f in df.columns if df.dtypes[f] == 'object']","fcb1633f":"quantitative","de2175cd":"qualitative","277aa0e8":"corr = df.corr()\nplt.subplots(figsize=(15,12))\nsns.heatmap(corr, vmax=0.9, cmap=\"Blues\", square=True)","43e6e830":"sns.pairplot(df[[\"SalePrice\", 'OverallQual']])","4fc6c37b":"sns.pairplot(df[[\"SalePrice\", 'GrLivArea']])","a76bd897":"sns.pairplot(df[[\"SalePrice\", 'GrLivArea']])","d38a17da":"sns.set_style(\"white\")\nsns.set_color_codes(palette='deep')\nf, ax = plt.subplots(figsize=(8, 7))\nsns.distplot(df['SalePrice'], color=\"b\");\nax.xaxis.grid(False)\nax.set(ylabel=\"Frequency\")\nax.set(xlabel=\"SalePrice\")\nax.set(title=\"SalePrice distribution\")\nsns.despine(trim=True, left=True)\nplt.show()","9901221b":"df[\"SalePrice\"] = np.log1p(df[\"SalePrice\"])","362991a2":"sns.set_style(\"white\")\nsns.set_color_codes(palette='deep')\nf, ax = plt.subplots(figsize=(8, 7))\nsns.distplot(df['SalePrice'], color=\"b\");\nax.xaxis.grid(False)\nax.set(ylabel=\"Frequency\")\nax.set(xlabel=\"SalePrice\")\nax.set(title=\"SalePrice distribution\")\nsns.despine(trim=True, left=True)\nplt.show()","ce8e481b":"def percent_missing(df):\n    data = pd.DataFrame(df)\n    df_cols = list(pd.DataFrame(data))\n    dict_x = {}\n    for i in range(0, len(df_cols)):\n        dict_x.update({df_cols[i]: round(data[df_cols[i]].isnull().mean()*100,2)})\n    \n    return dict_x\n\nmissing = percent_missing(df)\ndf_miss = sorted(missing.items(), key=lambda x: x[1], reverse=True)\nprint('Percent of missing data')\ndf_miss[0:15]","7951ad08":"sns.set_style(\"whitegrid\")\nmissing = df.isnull().sum()\nmissing = missing[missing > 0]\nmissing.sort_values(inplace=True)\nmissing.plot.bar()","e64a159d":"df['Fence'].value_counts()","8c8b714c":"def missing_data(df):\n    df[\"PoolQC\"] = df[\"PoolQC\"].fillna(\"None\")\n    for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n        df[col] = df[col].fillna(0)\n    for col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n        df[col] = df[col].fillna('None')\n    for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n        df[col] = df[col].fillna('None')\n    objects = []\n    for i in df.columns:\n        if df[i].dtype == object:\n            objects.append(i)\n    df.update(df[objects].fillna('None'))\n    \n    numeric=[]\n    for i in df.columns:\n        if df[i].dtype != object:\n              numeric.append(i)  \n    df.update(df[numeric].fillna(0))       \n\n    return df","abd21196":"df=missing_data(df)","9468de3a":"missing=df.isnull().sum()","d468a8d6":"missing","37d8b87b":"def convert_string(df):\n    df['MSSubClass'] = df['MSSubClass'].apply(str)\n    df['YrSold'] = df['YrSold'].astype(str)\n    df['MoSold'] = df['MoSold'].astype(str)\n    return df","c966be62":"df=convert_string(df)","d6ee7207":"df.columns","e74e141a":"df.info()","e824420b":"def logs(res, ls):\n    m = res.shape[1]\n    for l in ls:\n        res = res.assign(newcol=pd.Series(np.log(1.01+res[l])).values)   \n        res.columns.values[m] = l + '_log'\n        m += 1\n    return res\n\nlog_features = ['LotFrontage','LotArea','MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF',\n                 'TotalBsmtSF','1stFlrSF','2ndFlrSF','LowQualFinSF','GrLivArea',\n                 'BsmtFullBath','BsmtHalfBath','FullBath','HalfBath','BedroomAbvGr','KitchenAbvGr',\n                 'TotRmsAbvGrd','Fireplaces','GarageCars','GarageArea','WoodDeckSF','OpenPorchSF',\n                 'EnclosedPorch','3SsnPorch','ScreenPorch','PoolArea','MiscVal','YearRemodAdd']","6675ecc0":"print(df.shape)","cbf0feb9":"df = logs(df, log_features)","134c33b0":"y=df['SalePrice']","6dbb1c5c":"df=df.drop(['SalePrice','Id'],axis=1)","9025a09d":"print(df.shape)","3a5c3da0":"df = pd.get_dummies(df).reset_index(drop=True)\ndf.shape","0c26c14f":"X_train = df[:train_df.shape[0]]\nX_test = df[train_df.shape[0]:]","ee4dbe2f":"print(X_train.shape)\nprint(X_test.shape)","bfd14683":"y=y[:train_df.shape[0]]","26f6582f":"X_t, X_val, y_train, y_val = train_test_split(X_train, y, test_size=0.2, random_state=42)","6de9b58f":"kf = KFold(n_splits=12, random_state=42, shuffle=True)\ndef rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\ndef cv_rmse(model, X=X_t):\n    rmse = np.sqrt(-cross_val_score(model, X, X.columns, scoring=\"neg_mean_squared_error\", cv=kf))\n    return (rmse)","3a28034d":"ridge_alphas = [1e-15, 1e-10, 1e-8, 9e-4, 7e-4, 5e-4, 3e-4, 1e-4, 1e-3, 5e-2, 1e-2, 0.1, 0.3, 1, 3, 5, 10, 15, 18, 20, 30, 50, 75, 100]\nridge = make_pipeline(RobustScaler(), RidgeCV(alphas=ridge_alphas, cv=kf))","b577e184":" ridge.fit(X_t, y_train)","fd95c114":"y_pred_tr=ridge.predict(X_t)\ny_pred_val=ridge.predict(X_val)","434dc440":"print(r2_score(y_true=y_train, y_pred=y_pred_tr))\nprint(r2_score(y_true=y_val, y_pred=y_pred_val))","9cd3c256":"preds = np.exp(ridge.predict(X_test))","91aa8b48":"predictions = pd.DataFrame({'Id': test_df['Id'] ,'SalePrice': preds })","c6ec9ef5":"predictions.to_csv(\"House_Price.csv\",index=False)","b988fe30":"# **Import Libary**","38a575b5":"# **Encoding Fetaure**","15a3a883":"# **Prepare & Submission Prediction**","fc7d070d":"# **Ridge Regressor Model**","e1d2e265":"# **Xxploratory Data Analysis**","b1bb451e":"# **Read Data**","465b2da3":"# **Feature Engineering**","d2e18cc8":"# **Cross Validation**"}}