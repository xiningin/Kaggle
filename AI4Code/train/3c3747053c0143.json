{"cell_type":{"0ee20536":"code","c8c10ea8":"code","4e16f424":"code","c33502a3":"code","cc828efa":"code","22b8e38a":"code","7d571247":"code","88c75b92":"code","2ff3201e":"code","7374b021":"code","7273c784":"code","87351e67":"code","3d4613f9":"code","2fdd4677":"code","8a428601":"code","3662121c":"code","0978eeea":"code","205ecd80":"code","c220b1e1":"code","9cf90c3b":"code","5c13b602":"code","17989165":"code","2083ead9":"code","5b752aff":"code","e5bfb0e6":"code","eb6c3316":"code","6ac12e7e":"code","a0e292c2":"code","777831ba":"code","aaf97af6":"markdown","110eb90b":"markdown","6939c333":"markdown","00a914e5":"markdown","bb966a94":"markdown","4986bb7a":"markdown","c04c09d2":"markdown","9e40d9ca":"markdown","4deab76e":"markdown","b565fbec":"markdown","bedeb52a":"markdown","a4b391fc":"markdown","471f8da1":"markdown","3e2f3683":"markdown","a5f17a48":"markdown","1764b222":"markdown","819d5a93":"markdown","7c9bafbc":"markdown","f4be6f82":"markdown","1fd523e9":"markdown","42fc23b1":"markdown","a11e3af5":"markdown","9e1ce6d3":"markdown","284d627a":"markdown","c62cde2f":"markdown","b1354c69":"markdown","a053d274":"markdown","f228b1fe":"markdown","15c7e466":"markdown","28e0f4cb":"markdown","a01c9af8":"markdown","0f48f3e1":"markdown","6a93610b":"markdown","086615c5":"markdown","61728ffc":"markdown"},"source":{"0ee20536":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly\nfrom plotly import tools\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport cufflinks as cf\ncf.go_offline()\n\nimport warnings\nwarnings.filterwarnings('ignore') \n\n# import sys\n# reload(sys)\n# sys.setdefaultencoding('utf8') #\n\n%matplotlib inline","c8c10ea8":"df = pd.read_csv('..\/input\/AppleStore.csv', encoding='utf8')\ndf.drop(axis=1, labels=['Unnamed: 0'], inplace=True) #droping unwanted 'Unnamed: 0' column.\ndf.head() ","4e16f424":"df.info() #Information about columns","c33502a3":"df.shape #data has 7197 rows with 16 features","cc828efa":"df.isnull().any()","22b8e38a":"def bytes_convertor(B):\n    B = float(B)\n    KB = float(1024)\n    MB = float(KB ** 2) # 1,048,576\n    GB = float(KB ** 3) # 1,073,741,824\n    if B < KB:\n        return '{0:.2f}Bytes'.format(B)\n    elif KB <= B < MB:\n        return '{0:.2f}KB'.format(B\/KB)\n    elif MB <= B < GB:\n        return '{0:.2f}MB'.format(B\/MB)\n    elif GB <= B:\n        return '{0:.2f}GB'.format(B\/GB)\n\ndf['app_size'] = df['size_bytes'].apply(bytes_convertor)","7d571247":"df = df[['id', 'track_name', 'size_bytes', 'app_size','currency', 'price',\n       'rating_count_tot', 'rating_count_ver', 'user_rating',\n       'user_rating_ver', 'ver', 'cont_rating', 'prime_genre',\n       'sup_devices.num', 'ipadSc_urls.num', 'lang.num', 'vpp_lic']]","88c75b92":"large_size = df[['track_name','size_bytes', 'app_size']].sort_values(by='size_bytes', ascending=False)[0:15]\nlarge_size['app_size'] = large_size['app_size'].str.replace('GB','')\nlarge_size['app_size'] = large_size['app_size'].apply(pd.to_numeric)","2ff3201e":"trace = go.Bar(\n    x = large_size.track_name,\n    y = large_size.app_size,\n    marker = dict(\n        color = 'rgb(242, 215, 213)',\n        line = dict(\n            color = 'rgb(100, 30, 22)',\n            width = 1\n        )\n    ),\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    title = 'Top 15 Biggest games',\n    xaxis = dict(\n        title = 'Games'\n    ),\n    yaxis = dict(\n        title = 'Size of the games in GBs'\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","7374b021":"small_size = df[['track_name','size_bytes', 'app_size']].sort_values(by='size_bytes', ascending=True)[:15]\nsmall_size['app_size'] = small_size['app_size'].str.replace('KB','')\nsmall_size['app_size'] = small_size['app_size'].apply(pd.to_numeric)","7273c784":"trace = go.Bar(\n    y = small_size.app_size,\n    x = small_size.track_name,\n    marker = dict(\n        color = 'rgb(215, 189, 226)',\n        line = dict(\n            color = 'rgb(108, 52, 131)',\n            width = 1\n        )\n    )\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    xaxis = dict(\n        title = 'Games'\n    ),\n    yaxis = dict(\n        title='Size of games in KBs'\n    ),\n    title = 'Top 15 Smallest games',\n    margin = dict(\n        l = 100,\n        t = 100\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","87351e67":"free_or_paid = df['price'].apply(lambda x:1 if x > 0 else 0)\nfree_or_paid = free_or_paid.value_counts().reset_index()\nfree_or_paid.rename(columns={'index':'free or paid', 'price':'count'}, inplace=True)\nfree_or_paid.loc[free_or_paid['free or paid'].values == 0, 'free or paid'] = 'free' #THERE ARE 4056 GAMES WHICH ARE FREE\nfree_or_paid.loc[free_or_paid['free or paid'].values == 1, 'free or paid'] = 'paid' #THERE ARE 3141 GAMES WHICH ARE PAID","3d4613f9":"trace = go.Bar(\n    x = free_or_paid['free or paid'],\n    y = free_or_paid['count'],\n    marker = dict(\n        color = 'pink',\n        line = dict(\n            color = 'red',\n            width = 1\n        )\n    )\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    xaxis = dict(\n        title = 'Free or paid'\n    ),\n    yaxis = dict(\n        title = 'Number of apps'\n    ),\n    title = 'Number of free vs paid apps',\n    margin = dict(\n        l = 100,\n        t = 100\n    )\n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)","2fdd4677":"app_genre = df.prime_genre.value_counts().reset_index()[0:25]\napp_genre.rename(columns={'index':'genre', 'prime_genre':'count'}, inplace=True)","8a428601":"trace = go.Bar(\n    x = app_genre['genre'],\n    y = app_genre['count'],\n    marker = dict(\n        color = 'lightgreen',\n        line=dict(\n            color='green',\n            width=1.5),\n    ),\n    \n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    margin = dict(\n        l = 100,\n        t = 100\n    ),\n    xaxis = dict(\n        title = 'Genre'\n    ),\n    yaxis = dict(\n        title = 'Number of apps'\n    ),\n    title = 'Total number of apps with genres',\n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)","3662121c":"top_rating_apps = df[['track_name','app_size', 'rating_count_tot']].sort_values(by='rating_count_tot', ascending=False)[0:20]\n\ntrace = go.Bar(\n    x = top_rating_apps['track_name'],\n    y = top_rating_apps['rating_count_tot'],\n    name = 'Highest rating apps',\n    marker = dict(\n        color = 'rgb(169, 204, 227)',\n        line=dict(\n            color='rgb(21, 67, 96)',\n            width=1.5),\n    ),\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    margin = dict(\n        l = 100,\n        t = 100\n    ),\n    xaxis = dict(\n        title = 'Apps name'\n    ),\n    yaxis = dict(\n        title = 'Total user rating'\n    ),\n    title = 'Top user rated apps'\n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)","0978eeea":"user_rating_ver = df.user_rating.value_counts().reset_index()\nuser_rating_ver.rename(columns={'index':'ratings', 'user_rating':'count'}, inplace=True)\n\ntrace = go.Bar(\n    x = user_rating_ver['ratings'],\n    y = user_rating_ver['count'],\n    name = 'user ratings',\n    marker = dict(\n        color = 'rgb(163, 228, 215)',\n        line=dict(\n            color='rgb(14, 98, 81)',\n            width=1),\n    ),\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    margin = dict(\n        l = 100,\n        t = 100\n    ),\n    xaxis = dict(\n        title = 'Average user rating' \n    ),\n    \n    yaxis = dict(\n        title = 'Number of apps'\n    ),\n    title = 'Top average user rated apps',\n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)","205ecd80":"cont_rating = df['cont_rating'].value_counts().reset_index()\ncont_rating.rename(columns={'index':'age', 'cont_rating':'count'}, inplace=True)\ncont_rating\n\n\ntrace = go.Bar(\n    x = cont_rating['age'],\n    y = cont_rating['count'],\n    marker = dict(\n        color = 'lightgreen',\n        line = dict(\n            color = 'green',\n            width = 1\n        )\n    )\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    margin = dict(\n        l = 100,\n        t = 100\n    ),\n    xaxis = dict(\n        title = 'Content ratings'\n    ),\n    yaxis = dict(\n        title = 'Number of apps'\n    ),\n#     plot_bgcolor = 'black',\n#     paper_bgcolor = 'black',\n    title = 'Total apps with contant ratings'\n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)","c220b1e1":"supporting_devices = df['sup_devices.num'].value_counts().reset_index()\nsupporting_devices.rename(columns={'index':'supporting_devices', 'sup_devices.num':'count'}, inplace= True)\nsupporting_devices.sort_values(by='supporting_devices', ascending = False)\n\ntrace = go.Bar(\n    x = supporting_devices['supporting_devices'],\n    y = supporting_devices['count'],\n    marker = dict(\n        color = 'pink',\n        line = dict(\n            color = 'red',\n            width = 1\n        )\n    ),\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    xaxis = dict(\n        title = 'Number of supporting devices'\n    ),\n    yaxis = dict(\n        title = 'Number of apps'\n    ),\n    title = 'Number of devices supported by apps',\n    margin = dict(\n        l = 100,\n        t = 100\n    )\n    \n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)","9cf90c3b":"supporting_languages = df[['track_name','lang.num']].sort_values(by='lang.num', ascending=False)[0:20]\n\ntrace = go.Bar(\n    x = supporting_languages['track_name'],\n    y = supporting_languages['lang.num'],\n    marker = dict(\n        color = 'grey',\n        line = dict(\n            color = 'black',\n            width = 1\n        )\n    ),\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    xaxis = dict(\n        title = 'App Name'\n    ),\n    yaxis = dict(\n        title = 'Number of languages'\n    ),\n    title = 'Total number of Languages supported by apps',\n    margin = dict(\n        l = 100,\n        t = 100\n    )\n    \n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)","5c13b602":"genrewise_p = df[['track_name','price','rating_count_tot', 'prime_genre']]\ngenrewise_p = genrewise_p[genrewise_p['price'] != 0].sort_values(by='rating_count_tot', ascending=False)\ngenrewise_p = genrewise_p[['prime_genre','track_name']].groupby(['prime_genre']).count().sort_values(by='track_name', ascending=False).reset_index()\ngenrewise_p.rename(columns={'track_name':'count'}, inplace=True)","17989165":"genrewise_f = df[['track_name','price','rating_count_tot', 'prime_genre']]\ngenrewise_f = genrewise_f[genrewise_f['price'] == 0].sort_values(by='rating_count_tot', ascending=False)\ngenrewise_f = genrewise_f[['prime_genre','track_name']].groupby(['prime_genre']).count().sort_values(by='track_name', ascending=False).reset_index()\ngenrewise_f.rename(columns={'track_name':'count'}, inplace=True)","2083ead9":"trace1 = go.Bar(\n    x = genrewise_p['prime_genre'],\n    y = genrewise_p['count'],\n    marker = dict(\n        color = 'lightgreen',\n        line = dict(\n            color = 'green',\n            width = 1\n        )\n    )\n)\n\ntrace2 = go.Bar(\n    x = genrewise_f['prime_genre'],\n    y = genrewise_f['count'],\n    marker = dict(\n        color = 'lightblue',\n        line = dict(\n            color = 'blue',\n            width = 1\n        )\n    )\n)\n\ntrace3 = go.Bar(\n    x = genrewise_p['prime_genre'],\n    y = genrewise_p['count'],\n    marker = dict(\n        color = 'lightgreen',\n        line = dict(\n            color = 'green',\n            width = 1\n        )\n    )\n)\n\ntrace4 = go.Bar(\n    x = genrewise_f['prime_genre'],\n    y = genrewise_f['count'],\n    marker = dict(\n        color = 'lightblue',\n        line = dict(\n            color = 'blue',\n            width = 1\n        )\n    )\n)\n\nfig = tools.make_subplots(rows=2, cols=2, specs = [[{}, {}], [{'colspan':2}, None]], \n                          subplot_titles=('(1) Each genre count in paid apps', '(2) Each genre count in free apps', \n                                          '(3) Grouped barplot containing count of Free(Blue) and Paid(Green) apps'), print_grid=False)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 1)\n\nfig['layout']['yaxis1'].update(title='Number of apps')\nfig['layout']['yaxis2'].update(title='Number of apps')\nfig['layout']['yaxis3'].update(title='Number of apps')\nfig['layout'].update(showlegend=False, height=800)\n\npy.iplot(fig)","5b752aff":"games = df[df['prime_genre'] == 'Games'].sort_values(by='rating_count_tot', ascending=False)[0:15]\nentertainment = df[df['prime_genre'] == 'Entertainment'].sort_values(by='rating_count_tot', ascending=False)[0:15]\nphoto_video = df[df['prime_genre'] == 'Photo & Video'].sort_values(by='rating_count_tot', ascending=False)[0:15]\neducation = df[df['prime_genre'] == 'Education'].sort_values(by='rating_count_tot', ascending=False)[0:15]","e5bfb0e6":"trace1 = go.Scatter(\n    x = games['track_name'],\n    y = games['rating_count_tot'],\n    marker = dict(\n        color = 'lightblue',\n        line = dict(\n            color = 'blue',\n            width = 1\n        )\n    )\n)\n\ntrace2 = go.Scatter(\n    x = entertainment['track_name'],\n    y = entertainment['rating_count_tot'],\n    marker = dict(\n        color = 'pink',\n        line = dict(\n            color = 'red',\n            width = 1\n        )\n    ),\n)\n\ntrace3 = go.Scatter(\n    x = photo_video['track_name'],\n    y = photo_video['rating_count_tot'],\n    marker = dict(\n        color = 'lightgreen',\n        line = dict(\n            color = 'green',\n            width = 1\n        )\n    )\n)\n\ntrace4 = go.Scatter(\n    x = education['track_name'],\n    y = education['rating_count_tot'],\n    marker = dict(\n        color = 'grey',\n        line = dict(\n            color = 'black',\n            width = 1\n        )\n    )\n)\n\nfig = tools.make_subplots(rows=2, cols=2, specs = [[{}, {}], [{}, {}]], \n                          subplot_titles=('(1) Top apps in Games genre', '(2) Top apps in Entertainment genre', \n                                          '(3) Top apps in Photo & Video genre','(4) Top apps in Education genre'\n                                          ), print_grid=False)\n\nfig.append_trace(trace1, 1, 1)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\nfig.append_trace(trace4, 2, 2)\n\nfig['layout']['yaxis1'].update(title='User rating count in Millions')\nfig['layout']['yaxis2'].update(title='User rating count in Thousands')\nfig['layout']['yaxis3'].update(title='User rating count in Millions')\nfig['layout']['yaxis4'].update(title='User rating count in Thousands')\nfig['layout'].update(showlegend=False, height=950, )\nfig['layout']['margin'].update(l=50, t=50)\n\npy.iplot(fig)","eb6c3316":"average_cost = df[['prime_genre', 'price']].groupby('prime_genre').price.mean().sort_values(ascending=False).reset_index()\n\ntrace = go.Bar(\n    x = average_cost['prime_genre'],\n    y = average_cost['price'],\n    marker = dict(\n        color = 'rgb(247, 220, 111)',\n        line = dict(\n            color = 'rgb(154, 125, 10)',\n            width = 1\n        )\n    ),\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    xaxis = dict(\n        title = 'Genre'\n    ),\n    yaxis = dict(\n        title = 'Average Cost'\n    ),\n    title = 'Average cost of apps per genre',\n    margin = dict(\n        l = 100,\n        t = 100\n    )\n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)","6ac12e7e":"genre_bs = df[['size_bytes','prime_genre']].groupby(['prime_genre']).size_bytes.mean().sort_values(ascending=False).reset_index()\ngenre_bs['size_bytes'] = (genre_bs['size_bytes']\/1024)\/1024 #in MBs\n\ntrace = go.Bar(\n    x = genre_bs['prime_genre'],\n    y = genre_bs['size_bytes'],\n    marker = dict(\n        color = 'rgb(210, 180, 222)',\n        line = dict(\n            color = 'rgb(108, 52, 131)',\n            width = 1\n        )\n    ),\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    xaxis = dict(\n        title = 'Genre'\n    ),\n    yaxis = dict(\n        title = 'Average Size in MBs'\n    ),\n    title = 'Average size of apps per genre',\n    margin = dict(\n        l = 100,\n        t = 100\n    )\n    \n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)","a0e292c2":"genre_ls = df[['prime_genre','lang.num']].groupby(['prime_genre'])['lang.num'].mean().sort_values(ascending=False).reset_index()\n\ntrace = go.Bar(\n    x = genre_ls['prime_genre'],\n    y = genre_ls['lang.num'],\n    marker = dict(\n        color = 'rgb(171, 178, 185)',\n        line = dict(\n            color = 'rgb(33, 47, 61)',\n            width = 1\n        )\n    ),\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    xaxis = dict(\n        title = 'Genre'\n    ),\n    yaxis = dict(\n        title = 'Average language support'\n    ),\n    title = 'Average languages support per genre',\n    margin = dict(\n        l = 100,\n        t = 100\n    )\n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)","777831ba":"genre_ds = df[['prime_genre','sup_devices.num']].groupby(['prime_genre'])['sup_devices.num'].mean().sort_values(ascending=False).reset_index()\n\ntrace = go.Bar(\n    x = genre_ds['prime_genre'],\n    y = genre_ds['sup_devices.num'],\n    marker = dict(\n        color = 'rgb(162, 217, 206)',\n        line = dict(\n            color = 'rgb(20, 143, 119)',\n            width = 1\n        )\n    ),\n)\n\ndata = [trace]\n\nlayout = go.Layout(\n    xaxis = dict(\n        title = 'Genre'\n    ),\n    yaxis = dict(\n        title = 'Average device support'\n    ),\n    title = 'Average device support per genre',\n    margin = dict(\n        l = 100,\n        t = 100\n    )\n)\n\nfig = go.Figure(data = data, layout = layout)\npy.iplot(fig)","aaf97af6":"#### Observations\n<ul> \n    <li>On average, apps in medical genre are costliest. Their average cost is \\$8.77<\/li>\n    <li>Apps in shopping genre are cheapest which have cost average cost of \\$0.016.<\/li>\n<\/ul>","110eb90b":"#### Observations\n<ul> \n    <li>3263 apps can be worked on 37 devices and 1912 apps can be worked on 38 devices.<\/li>\n<\/ul>","6939c333":"#### Observations\n<ul> \n    <li>Facebook is the top rated app on the Apple Store which has approximately 2.97 Million rating.<\/li>\n    <li>Then comes Instagram and Class of Clans with total rating of approximately 2.16 Million and 2.14 Million respectively.<\/li>\n    <li>Interestingly, most of the top rated apps are games.<\/li>\n<\/ul>","00a914e5":"## On average, which genre has maximum lanugage support?","bb966a94":"## Lets count each genre in paid apps","4986bb7a":"#### Observations\n<ul> \n    <li>Games genre is the most significant genre in paid and free apps well.<\/li>\n    <li>Then comes Entertainment, Education and Photo & Videos genre in both.<\/li>\n<\/ul>","c04c09d2":"## Lets plot them both and compare","9e40d9ca":"## On average, which genre has costly apps?","4deab76e":"# Now lets go more into the details","b565fbec":"#### Observations\n<ul> \n    <li>Most of the apps which have highest number of language supporting system are from Google. Google Rocks!<\/li>\n    <li>There is also another company which provide good language support system named Tinybop.<\/li>\n<\/ul>","bedeb52a":"So there are no missing values in the dataset","a4b391fc":"### Total number of apps with most number of suporting devices","471f8da1":"## By highest number of average user rating ","3e2f3683":"#### Observations\n<ul> \n    <li>On average, apps in medical genre have larger apps. The average size is 358.95MBs<\/li>\n    <li>Apps in catelog genre are smaller apps with average size of 47.85MBs.<\/li>\n<\/ul>","a5f17a48":"## By number of supporting languages","1764b222":"### Top 15 smallest apps ","819d5a93":"# Lets start Exploratory Data Analysis","7c9bafbc":"#### Just for the simplicity, lets change the byes into corresponding KBs, MBs and GBs","f4be6f82":"## By content rating","1fd523e9":"#### Observations\n<ul> \n    <li>Most of the apps on the Appl store are games.<\/li>\n    <li>Then comes Entertainment and Education genre. Also there is a huge difference between Games and Entertainment genre count.<\/li>\n    <li>Apps with Navigation, Medical, Catalogs genre are very few.<\/li>\n<\/ul>","42fc23b1":"#### Observations\n<ul> \n    <li>On average, apps in productivity genre have large number of language support (11 languages).<\/li>\n    <li>Apps in finance genre are smaller number of language support (2 languages).<\/li>\n<\/ul>","a11e3af5":"## Conclusion\n\nUsing this dataset, we tried to find some meaningful insights. I just barely scratched the surface, we can go more into the deeper.\nThank you for watching!\n\nP.S. Thanks to other participants for some greats ideas.","9e1ce6d3":"## On average, which genre has bigger apps?","284d627a":"## Lets look at top user rated apps in Games, Entertainment, Photo & Video and Education genre","c62cde2f":"## By free apps and paid apps","b1354c69":"## By apps genre","a053d274":"## By highest number of user rating ","f228b1fe":"### Before we start,we need to look whether there are null values in the dataset or not.","15c7e466":"### Rearranging the columns","28e0f4cb":"## Lets count each genre in free apps","a01c9af8":"#### Observations\n<ul> \n    <li>Most of the apps (2663 to be exact) have 4.5 rating.<\/li>\n    <li>Not a single app has a 0.5 rating from any of the user.<\/li>\n    <li>Interestingly, there are some apps which have 0 user rating.<\/li>\n<\/ul>","0f48f3e1":"## Lets start with size_bytes","6a93610b":"## By number of supporting devices","086615c5":"## On average, which genre has maximum device support?","61728ffc":"### Top 15 biggest apps "}}