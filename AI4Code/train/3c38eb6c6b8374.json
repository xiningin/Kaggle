{"cell_type":{"396c1db2":"code","db7ab59a":"code","118da4b7":"code","3b6a611e":"code","b860931f":"code","ff6dc266":"code","26c5dc8a":"code","81a71d6f":"code","9cc21130":"code","932781f2":"code","6a684f44":"code","5ad7adf2":"code","b8427860":"code","ba50992c":"code","44e29cb6":"code","1a6a4cca":"code","bf7663b5":"code","9750db54":"code","a0435f85":"code","a45139bf":"code","0d51c248":"code","237b63cb":"code","311354a1":"code","4bf12687":"code","65635902":"markdown","fc7303b8":"markdown","e0da9ea9":"markdown","11ab089f":"markdown","938d39b6":"markdown","70dd52e4":"markdown","4c1bb7a8":"markdown","446a023e":"markdown","54c89fce":"markdown","6491ebef":"markdown","6d2a57a8":"markdown","a5bd4195":"markdown","5b616f43":"markdown","3ac1dd08":"markdown","70a1cd0d":"markdown","30b8ccaf":"markdown","855bff0e":"markdown","bd447735":"markdown","b1d8dd6d":"markdown","f3c13319":"markdown","0c776101":"markdown","52d19b37":"markdown","3d836b3d":"markdown","b8fd6f76":"markdown","2671c31a":"markdown","c8150c8c":"markdown","3ba6ce57":"markdown","b8b6ff72":"markdown","fb5c8c5d":"markdown"},"source":{"396c1db2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nbook = pd.read_csv('..\/input\/goodreads10k-dataset-cleaned\/Books.csv', usecols=[\"book_id\", \"Title\", \"Author\",\"Publication Year\",\"AvgRating\"], encoding='utf-8') \nbook.head(10) # stampa delle prime 10 righe del dataframe","db7ab59a":"rating = pd.read_csv('..\/input\/goodreads10k-dataset-cleaned\/Ratings.csv', encoding='utf-8') \nrating.head(10) # stampa delle prime 10 righe del dataframe","118da4b7":"to_read = pd.read_csv('..\/input\/goodreads10k-dataset-cleaned\/to_read.csv', encoding='utf-8') \nto_read.head(10) # stampa delle prime 10 righe del dataframe","3b6a611e":"book.shape","b860931f":"book.info()","ff6dc266":"book.describe()","26c5dc8a":"# Rappresento la disribuzione dei libri per valutazione utente media\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.rcParams['font.sans-serif']=['SimHei'] # permette di compilare caratteri cinesi\n\nfig, axs = plt.subplots(1,1,figsize=(20,30)) \n\nsns.countplot(y  = \"AvgRating\", data = book, palette=\"Set3\")\naxs.set_title('Distribuzione valutazione media utenti', fontweight='bold')\nplt.show()","81a71d6f":"# Ordino gli autori per indice di gradimento complessivo, piu' alto (rating per autore)\ndef query_rating_complessivo_per_autore():\n    best_author = book.groupby('Author').sum() # raggruppo il dataframe per Author. Su ogni caratteristica faccio la somma dei valori\n    best_author.sort_values(by=['AvgRating'], ascending = False, inplace = True) # ascending rating in ordine decrescente, inplace la modifica e' applicata al dataframe originale\n    best_author = best_author['AvgRating'] \n    print(\"Classificazione degli autori per votazione media complessiva in ordine decrescente (primi 10): \\n\", best_author.head(10)) # i primi 10 autori con rating piu' elevato\n    return best_author","9cc21130":"# Ordino i titoli sulla media del voto ottenuto da ogni titolo (rating per libro) e ne seleziono i 10 titoli con voto medio maggiore\ndef query_libri_con_ratingsingolo_maggiore():\n\n# Ordino i titoli sulla media del voto ottenuto da ogni titolo (rating per libro)\n# Coppie lette per ogni libro\n    copy  = book.groupby(['Author', 'Title']).mean() # raggruppo i libri per Author e per Title. Su ogni caratteristica calcolo la media dei valori.\n    print(\"Statistiche descrittive raggruppate per autore e libro: \")\n    print(copy.describe())\n    print(\"\\n\")\n# Ogni libro ha solo una copia\n\n# Seleziono i 10 titoli con voto medio maggiore\n    copy.sort_values(by = 'AvgRating', ascending = False, inplace = True)  # ordino i rating in modo decresecente\n    best_book = copy['AvgRating']\n    print(\"Classificazione dei autori-titoli per votazione media in ordine decrescente (primi 10): \\n\", best_book.head(10))\n    return best_book\n\n","932781f2":"# Metodo di supporto, ritorna false quando nella lista l e' gia' contenuto l'elemento value\ndef no_duplicate(l, value):\n    for i in l:\n        if(value == i):\n            return False\n    return True","6a684f44":"def sottoquery_migliori_autori_ratingprimi10titoli(best_book):\n    ten_bbook = best_book[:10] # prendo i primi 10 rating dei libri migliori (da best_book)\n\n# e di questi 10 libri migliori estraggo i loro autori, in ordine di rating decrescente (da book)\n    ten_best_author_avg = []\n    for i in ten_bbook:\n# cerco i titoli a cui e' assegnato ciascun rating, e di questi ne seleziono l'autore\n        row = 0\n        for j in book['AvgRating']:\n            if i == j:\n                ten_best_author_avg.append(book.loc[row]['Author'])\n                break\n            row = row + 1\n        \n    print(\"I migliori autori, considerando il miglior rating dei primi 10 titoli: \")\n    print(list(set(ten_best_author_avg))) # tolgo i duplicati  \n    return ten_best_author_avg","5ad7adf2":"# Estraggo da best_author (la somma del punteggio per ogni autore) il nome del autore\ndef sottoquery_migliori_autori_ratingcomplessivoperautore(best_author):\n    best_author_sum = []\n    best_author_sum_axes = best_author.axes # prendo la label\n    element = best_author_sum_axes[0].values\n    for i in element:\n        best_author_sum.append(i)\n        \n    print(\"\\n\")\n    print(\"I migliori autori, considerando il rating complessivo per autore: \")\n    print(list(set(best_author_sum)))\n    return best_author_sum","b8427860":"# Cerco su best_author_sum se gli autori sono presenti anche in ten_best_book. Estraggo i primi 3\ndef sottoquery_merge_migliori_autori_ratingprimi10titoli_with_migliori_autori_ratingcomplessivoperautore(ten_best_author_avg, best_author_sum):\n    three_best_author = []\n    total_best_author = []\n    n_authors = 0\n    for i in best_author_sum:\n        for j in ten_best_author_avg:\n            if i == j:\n                if(no_duplicate(total_best_author, i)):\n                        total_best_author.append(i)\n                        n_authors = n_authors + 1\n                        if(n_authors <= 3):\n                            three_best_author.append(i)\n    print(\"\\n\")\n    print(\"I migliori 3 autori nei primi 10 libri ratati sono: \")\n    print(three_best_author) \n    return total_best_author","ba50992c":"# Estraggo i primi 3 autori con rating maggiore, che hanno anche un libro classificato tra i primi 10 rating. \n# In caso di piu' libri, prendo quello con rating maggiore.\n\n# Ritorno il caso piu' generale (gli autori con rating maggiore, che hanno anche un libro classificato tra i primi 10 rating)\n\ndef query_3autori_con_votocomplessivomaggiore_e_librosingoloclassificatoprimi10(best_book, best_author):\n    ten_best_author_avg = sottoquery_migliori_autori_ratingprimi10titoli(best_book)\n    best_author_sum = sottoquery_migliori_autori_ratingcomplessivoperautore(best_author)\n    return sottoquery_merge_migliori_autori_ratingprimi10titoli_with_migliori_autori_ratingcomplessivoperautore(ten_best_author_avg, best_author_sum)","44e29cb6":"### MAIN ###\nbest_author = query_rating_complessivo_per_autore()","1a6a4cca":"best_book = query_libri_con_ratingsingolo_maggiore()","bf7663b5":"total_best_author = query_3autori_con_votocomplessivomaggiore_e_librosingoloclassificatoprimi10(best_book, best_author)","9750db54":"# Voglio visualizzare un grafico con total_best_author (i 10 migliori autori per rating per libro e per autore) rapportati al loro rating complessivo\n\ntotalrating_for_author = pd.DataFrame(columns=['Author', 'AvgRating'])\nfor name_author in total_best_author:\n    totalrating_for_author.loc[name_author] = [name_author, best_author.loc[name_author]]\n\nprint(\"I migliori autori nei primi 10 libri ratati sono: \")\nprint(total_best_author)\n","a0435f85":"fig, ax = plt.subplots(figsize =(16, 9)) \nauthor = totalrating_for_author['Author']\nrating_avg = totalrating_for_author['AvgRating'] \n  \n\nmy_colors = 'pink', 'orange', 'blue', 'black', 'purple' \n\nax.barh(author, rating_avg, color = my_colors) \nax.invert_yaxis() # inverto gli assi\nax.set_title('Autori con il rating complessivo maggiore nei primi 10 libri preferiti dagli utenti', fontweight='bold')   \nplt.show() ","a45139bf":"# Devo capire quanti utenti non hanno dato alcuna votazione\n\nn_users_read = to_read['user_id'].nunique() # numero di utenti che hanno letto un libro\nn_users = rating['user_id'].nunique() # il numero di utenti che hanno votato\nn_book = book['book_id'].nunique() # il numero di libri presenti nel dataset\nn_votes = (rating['user_id'].shape)[0] # numero di voti totali\n\nprint(\"Numero di utenti che hanno letto un libro: \", n_users_read)\nprint(\"Numero di utenti che hanno votato (numero di users): \",n_users)\nprint(\"Numero di libri: \", n_book)\nprint(\"Numero di voti complessivi: \",n_votes)","0d51c248":"densita =  n_votes\/(n_book * n_users)","237b63cb":"\n\nprint(\"La densita' della matrice e': \", densita * 100, \"%\")\n    ","311354a1":"sparsita = 1.0 - densita\n\nprint(\"La sparsita' della matrice e': \", sparsita*100, \"%\")","4bf12687":"distribution_votes = rating.groupby('user_id').count()\n\nplt.figure(figsize=(15, 10))\nplt.hist(distribution_votes[\"book_id\"], color = 'purple')\nplt.gca().set_xlabel(\"user_id\")\nplt.gca().set_ylabel(\"numero di voti\")\nplt.title('Distribuzione dei voti per users', fontweight='bold')\nplt.show()","65635902":"**shape** e' un campo proprio del dataframe `book`, e mi ha permesso di comprenderne le dimensioni: 10 000 campioni e 5 features.","fc7303b8":"<h3>Main<\/h3>","e0da9ea9":"<h3>Densita'<\/h3>","11ab089f":"Una volta creati i dataframe di lavoro, comprese le dimensioni e i valori che vi sono contenuti; sono passata alla creazione di un plot che distribuisse in classi di punteggi, le valutazioni medie ottenute dagli utenti.\n\nPer costruirlo ho usato il dataframe `book`.","938d39b6":"<h2>Visualizzazione dei dati<\/h2>","70dd52e4":"Il metodo **describe()** mi ha permesso di generare statistiche descrittive. Per una maggiore comprensione dei risultati che ho raccolto:\n- count, conta il numero di osservazioni non NA \/ nulle;\n- mean, la media dei valori;\n- std, la deviazione standard delle osservazioni;\n- min, il minimo dei valori nella feature;\n- 25%, 50%, 75%, sono alcune stime medie sui valori. Da notarsi come il 50% indica la mediana;\n- max, il massimo dei valori nella feature.\n\nLa media delle valutazioni ottenute da tutti i libri sono attorno al 4.00, la mediana attorno al 4.02, in un range tra 2.47 e 4.82.","4c1bb7a8":"<h2>Calcolo della densita' e della sparsita' della matrice di rating<\/h2>","446a023e":"* I primi 3 autori con voto complessivo maggiore, che hanno anche un libro classificato tra i primi 10 piu' votati: `query_3autori_con_votocomplessivomaggiore_e_librosingoloclassificatoprimi10()`\n\nHo ritenuto opportuno anche implementare 3 sottquery alla query principale:\n- `sottoquery_migliori_autori_ratingprimi10titoli`\n- `sottoquery_migliori_autori_ratingcomplessivoperautore`\n- `sottoquery_merge_migliori_autori_ratingprimi10titoli_with_migliori_autori_ratingcomplessivoperautore` con  un metodo di supporto `no_duplicate`","54c89fce":"I dataframes `rating` e `to_read` gli ho usati per calcolarmi la matrice di rating, e di conseguenza per il calcolo di densita' e sparsita' della stessa.","6491ebef":"<h2>Caratteristiche dei dati<\/h2>","6d2a57a8":"Dunque ho circa 1.8 entry su 1000, della matrice di rating, che sono diverse da 0.","a5bd4195":"<h3>Effetto Long Tail<\/h3>\n\nL'effetto **Long Tail** si ha quando pochi utenti (users) hanno interagito con un numero elevato di items (in questo caso i libri); e la stragrande maggioranza invece non ha espresso alcuna preferenza. Questo e' quello che capita nel caso in esame, che gia' si evince  dalla sparsita' della matrice di rating, confermato anche dal grafico sottostante.","5b616f43":"La sparsita' della matrice, non e' altro che il numero di 0 di cui e' composta. Applicata al mio caso significa","3ac1dd08":"Come gia' preanunciato, dal valore della media e della mediana, il maggior numero di valutazioni (si vede in figura) e' attorno a [3.91;4.16], con un numero di conteggi anche superiore a 175. Invece agli estremi la situzione decresce molto rapidamente, fino a diventare 0 in > 4.82 e < 2.47 (valutazioni di conseguenza mai date da nessun utente).\n\nVista la distribuzione dei valori, posso assumere che le valutazioni > 3.9, significano che il libro ha avuto un riscontro, in media, positivo negli utenti.","70a1cd0d":"<h1>Analisi della densita' e della sparsita' di un dataset<\/h1>","30b8ccaf":"Il dataset `Goodreads-10K Dataset` contiene tre cvs: Books, Ratings e to_read.\n\nIo ho deciso di concentrarmi su:\n- `Books.csv` e di estrapolarne solo le informazioni indispensabili: *titolo* del libro con alcuni metadati (book id, anno di pubblicazione e *autore*), evitando per esempio il codice ISBN non rilevante ai fini del mio lavoro, e la *valutazione media degli utenti* data a un certo libro.\n- `Ratings.csv`: con *id del libro*, *id dell'utente* e *voto dato dall'utente*;\n- `to_read.csv`: con *id del libro* e *id dell'utente*.","855bff0e":"Il dataframe `book` l'ho usato per la visualizzazione delle relazioni titolo libro-votazione utente media. L'ho considerato il dataframe principale di lavoro, ed anche quello su cui ho svolto l'implementazione del codice \"query\".","bd447735":"<h2>Caricamento del dataframe<\/h2>","b1d8dd6d":"Il main che manda in esecuzione le 3 query principali e' il seguente:","f3c13319":"Di seguito ho voluto inserire un plot che mostrasse i migliori autori, con valutazione media migliore, dei primi 10 libri miglior ratati. Ovvero la lista di ritorno di `query_3autori_con_votocomplessivomaggiore_e_librosingoloclassificatoprimi10`.","0c776101":"Matrice densa significa che tutte le sue entry hanno ricevuto una votazione da parte degli utenti.","52d19b37":"Ovvero piu' del 99% degli utenti non ha espresso alcuna preferenza in almeno un titolo.","3d836b3d":"* I titoli che hanno ottenuto una votazione media utente maggiore: `query_libri_con_ratingsingolo_maggiore`","b8fd6f76":"Di seguito effettuo l'analisi di un modello, basato sul dataset `Goodreads-10K Dataset`. Per farlo utilizzo nozioni note per i sistemi di raccomandazione.\n\nI tasks del mio lavoro si suddividono in:\n- **Caricamento dei dati:** con lettura del dataset e creazione dei dataframe di lavoro;\n- **Caratteristiche dei dati:** in questa parte, ho ritenuto utile utilizzare metodi della classe `pandas.DataFrame`;\n- **Visualizzazione dei dati:** con la rappresentazione dei dati su istogrammi. Ho deciso di valutare il rapporto tra numero medio di valutazioni utente e valore di appartenenza.\n- **Analisi dei dati:** con cui ho approfondito l'informazione contenuta all'interno dei datasets. Per farlo mi sono costruita del codice \"query\";\n- **Calcolo della densita' e sparsita' della matrice di rating:** con cui ho valutato la matrice di rating.","2671c31a":"Il metodo **info()** mi ha permesso di visualizzare un sommario conciso del dataframe in esame. Da come si puo' vedere sotto, mi sono accorta di avere: per ogni features 10 000 valori non nulli; di tipo int64 per le features numeriche a valori interi; di tipo object per le features di stringhe; e di tipo flot64 per la valutazione utente (che e' in virgola mobile).","c8150c8c":"<h3>Sparsita'<\/h3>","3ba6ce57":"<h2>Analisi dei dati<\/h2>","b8b6ff72":"L'analisi dei dati l'ho svolta nel dataframe `book`.\n\n<h3> Codice \"query\"<\/h3>\n\nIl codice \"query\" che ho creato estrapola le seguenti informazioni:\n\n* Gli autori per indice di gradimento complessivo, piu' alto (rating per autore): `query_rating_complessivo_per_autore`","fb5c8c5d":"Per calcolare il numero di utenti che, nella matrice di rating, non hanno dato alcuna informazione di preferenza su un libro, ho deciso di considerare il numero di voti complessivo, diviso il numero di utenti per il numero di libri.\n\nNon ho vincolato il voto solo agli utenti che hanno letto un libro, in quanto gli utenti che hanno letto un libro sono in numero inferiore rispetto agli utenti che hanno espresso una preferenza."}}