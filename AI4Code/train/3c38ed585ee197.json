{"cell_type":{"d96942af":"code","bd18381a":"code","43c4cdd2":"code","1c3a006f":"code","d2f392c0":"code","48b92054":"code","a839a7d7":"markdown","82a9b381":"markdown","b3f67006":"markdown","c69a54b2":"markdown"},"source":{"d96942af":"# general purpose libraries\nimport numpy as np\nimport datetime as dt\nimport pandas as pd\nimport os\nimport pickle\nfrom timeit import default_timer as timer\nfrom collections import OrderedDict\n\npd.set_option(\"display.max_columns\", None)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        if filename.endswith(\".csv\"):\n            print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bd18381a":"# plots and visualisation\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as ply_go\nimport plotly.figure_factory as ply_ff\nimport plotly.colors as ply_colors #.sequential.Oranges as orange_palette\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)","43c4cdd2":"data_dir = '\/kaggle\/input\/covid19-cough-audio-classification\/'\nmetadata_file = \"metadata_compiled.csv\"\nmetadata=pd.read_csv(data_dir+metadata_file,sep=\",\")\nprint(metadata.columns)\n\n# convert strings 'True'\/'False' to genuine booleans\ncols_to_boolean = (['respiratory_condition', 'fever_muscle_pain',\n                     'dyspnea_1', 'wheezing_1', 'stridor_1','choking_1', 'congestion_1', 'nothing_1',\n                     'dyspnea_2', 'wheezing_2', 'stridor_2','choking_2', 'congestion_2', 'nothing_2',\n                     'dyspnea_3', 'wheezing_3', 'stridor_3','choking_3', 'congestion_3', 'nothing_3',\n                     'dyspnea_4', 'wheezing_4', 'stridor_4','choking_4', 'congestion_4', 'nothing_4'])\n#metadata[cols_to_boolean] = metadata[cols_to_boolean].apply(lambda x: x.astype(bool))\nfor c in cols_to_boolean:\n    metadata.loc[metadata[c].notnull(),c] = metadata.loc[metadata[c].notnull(),c].astype(bool) \n\nprint(\"NULL or NA records for each column:\")\nprint( metadata.isnull().sum() )\n    \ncols_to_fillna = ['gender', 'status','diagnosis_1','diagnosis_2','diagnosis_3','diagnosis_4']\nmetadata[cols_to_fillna]=metadata[cols_to_fillna].fillna('n\/a')\n\n#print(metadata.dtypes)\n#print(metadata.shape)\nmetadata.head(5)","1c3a006f":"my_title_layout = dict({\"text\":\"my distribution\", 'xanchor':'center', 'x':0.5, 'y':0.9, 'font':{'size':24}})\nmy_xaxis_layout = dict(title=dict(text=\"my x axis\", font={'size':16}))\nmy_layout = dict(title=my_title_layout,\n                xaxis= my_xaxis_layout)\nbin_size_dict = dict(cough_detected=0.001,SNR=0.5, age=1, gender=1, respiratory_condition=1, fever_muscle_pain=1, status=1 )\nxaxis_title_dict = dict(cough_detected=\"Cough Detection Score\",SNR=\"Signal-to-Noise Ratio\" , age=\"Age\", \n                        gender=\"Gender\", respiratory_condition=\"Resp. Condition\", fever_muscle_pain=\"Fever\", status=\"Status\" )\n\nfor c in ['cough_detected','SNR', 'age', 'gender','respiratory_condition','fever_muscle_pain', 'status' ]:\n    hist_data = ply_go.Histogram(x=metadata[c], name=c, showlegend=False, xbins={'size':bin_size_dict[c]})\n    fig = ply_go.Figure(data=[hist_data], layout=my_layout)\n    fig.update_layout(title={'text': c+\" distribution\"}, xaxis={\"title\":{\"text\":xaxis_title_dict[c]}})\n    fig.show()\n###\n\n\nfig = ply_go.Figure( layout=my_layout)\nfor tmp_diag in metadata['status'].unique():\n    violin_data = ply_go.Violin(x=metadata.loc[metadata['status']==tmp_diag, 'status'],\n                                y=metadata.loc[metadata['status']==tmp_diag, 'age'],\n                                name=tmp_diag,\n                                box_visible=True,\n                                meanline_visible=True)\n    fig.add_trace(violin_data)\n    #end for\nfig.update_layout(title={'text': \"Distribution of AGE by type of DIAGNOSYS\"}, xaxis={\"title\":{\"text\":None}}, \n                  yaxis={\"title\":{\"text\":\"AGE [years]\"}})\nfig.show()\n\n\nfig = ply_go.Figure( layout=my_layout)\nfor tmp_diag in metadata['status'].unique():\n    violin_data = ply_go.Violin(x=metadata.loc[metadata['status']==tmp_diag, 'status'],\n                                y=metadata.loc[metadata['status']==tmp_diag, 'cough_detected'],\n                                name=tmp_diag,\n                                box_visible=True,\n                                meanline_visible=True)\n    fig.add_trace(violin_data)\n    #end for loop on unique statuses\n\n    \nfig.update_layout(title={'text': \"Distribution of cough detection classifier by type of DIAGNOSYS\"}, \n                  xaxis={\"title\":{\"text\":None}}, \n                  yaxis={\"title\":{\"text\":\"Cough Detection Score\"}})\nfig.show()\n\n\n\nfig = ply_go.Figure( layout=my_layout)\nfor tmp_diag in metadata['status'].unique():\n    violin_data = ply_go.Violin(x=metadata.loc[(metadata['status']==tmp_diag)&(metadata['SNR']<100), 'status'],\n                                y=metadata.loc[(metadata['status']==tmp_diag)&(metadata['SNR']<100), 'SNR'],\n                                name=tmp_diag,\n                                box_visible=True,\n                                meanline_visible=True)\n    fig.add_trace(violin_data)\n    #end for loop on unique statuses\n\n    \nfig.update_layout(title={'text': \"Distribution of SNR by type of DIAGNOSYS\"}, \n                  xaxis={\"title\":{\"text\":None}}, \n                  yaxis={\"title\":{\"text\":\"Signal-to-Noise Ratio\"}})\nfig.show()\n","d2f392c0":"def summarise_pivot_df(df, xcols, ycols, valcol):\n    summary_df = df[xcols+ycols+valcol]\n    summary_df.loc[summary_df[xcols[0]].isnull(),xcols] = 'n\/a' #replace NA with a default string\n    summary_df.loc[summary_df[ycols[0]].isnull(),ycols] = 'n\/a' #replace NA with a default string\n    summary_df = summary_df.groupby(xcols+ycols).count().reset_index()\n    print(summary_df)\n    pivot_df = pd.pivot_table(data=summary_df,values=valcol, index=xcols,columns=ycols)\n    pivot_df.columns = [ c[1] for c in pivot_df.columns ] # get rid of multiindex\n    return pivot_df\n\ndef pandas_to_plotly_heatdata(df):\n    #print(df.index)\n    return {'x': df.columns.tolist(),\n            'y': df.index.tolist(),\n            'z': df.values.tolist()}\n\n# Heatmap Fever vs status\nmeta_summary_df = summarise_pivot_df(metadata, ['fever_muscle_pain'], ['status'], ['uuid'])\nmeta_summary_df = meta_summary_df[['healthy','symptomatic','COVID-19','n\/a']]\nn = meta_summary_df.sum().sum()\nprint(meta_summary_df.head(5) )\n\nheat_data = ply_go.Heatmap(pandas_to_plotly_heatdata(meta_summary_df), \n                           colorscale=ply_colors.sequential.Oranges,\n                           colorbar={'title':\"Entries\", 'titleside':\"top\"} ,\n                           text=meta_summary_df.values)\nrounded_annotation = [ [\"NA\" if pd.isnull(c) else \"{:.0f}\".format(c) for c in r] for r in heat_data['z']]\nfig = ply_ff.create_annotated_heatmap(z=heat_data['z'], \n                                      x=heat_data['x'],\n                                      y=[i for i,t in enumerate(heat_data['y'])],\n                                      annotation_text=rounded_annotation,\n                                      colorscale=heat_data['colorscale'],\n                                      showscale=True,\n                                      colorbar=heat_data['colorbar']  )\nfig.update_layout( yaxis={\"title\":{\"text\":\"Muscle Pain\"},\n                          \"tickmode\":'array',\"tickvals\":[2,1,0],\"ticktext\":['n\/a','Yes','No']})\nfig.show()\n\nheat_data = ply_go.Heatmap(pandas_to_plotly_heatdata(100.0*meta_summary_df\/n) ,\n                           colorscale=ply_colors.sequential.Oranges,\n                          colorbar={'title':\"Percentage\", 'titleside':\"top\"})\nrounded_annotation = [ [ \"NA\" if pd.isna(c)  else \"{:.2f}%\".format(c)  for c in r] for r in heat_data['z']]\nfig = ply_ff.create_annotated_heatmap(z=heat_data['z'], \n                                      x=heat_data['x'],\n                                      y=[i for i,t in enumerate(heat_data['y'])],\n                                      annotation_text=rounded_annotation,\n                                      colorscale=heat_data['colorscale'],\n                                      showscale=True,\n                                      colorbar=heat_data['colorbar'])\nfig.update_layout( yaxis={\"title\":{\"text\":\"Muscle Pain\"},\n                          \"tickmode\":'array',\"tickvals\":[2,1,0],\"ticktext\":['n\/a','Yes','No']})\nfig.show()\n\n# Heatmap RespCond vs status\nmeta_summary_df = summarise_pivot_df(metadata, ['respiratory_condition'], ['status'], ['uuid'])\nmeta_summary_df = meta_summary_df[['healthy','symptomatic','COVID-19','n\/a']]\nn = meta_summary_df.sum().sum()\n#print(meta_summary_df.head(5) )\n#print( pandas_to_plotly_heatdata(meta_summary_df) )\nheat_data = ply_go.Heatmap(pandas_to_plotly_heatdata(meta_summary_df), \n                           colorscale=ply_colors.sequential.Oranges,\n                           colorbar={'title':\"Entries\", 'titleside':\"top\"} ,\n                           text=meta_summary_df.values)\nrounded_annotation = [ [\"NA\" if pd.isnull(c) else \"{:.0f}\".format(c) for c in r] for r in heat_data['z']]\nfig = ply_ff.create_annotated_heatmap(z=heat_data['z'], \n                                      x=heat_data['x'],\n                                      #y=heat_data['y'],#\n                                      y=[int(i) for i,t in enumerate(heat_data['y']) ],\n                                      annotation_text=rounded_annotation,\n                                      colorscale=heat_data['colorscale'],\n                                      showscale=True,\n                                      colorbar=heat_data['colorbar']  )\nfig.update_layout( yaxis={\"title\":{\"text\":\"REspiratory Condition\"},\n                          \"tickmode\":'array',\"tickvals\":[2,1,0,],\"ticktext\":['n\/a','Yes','No']})\nfig.show()\n","48b92054":"# Heatmap Age vs status\nmetadata['age_class'] = 0 # NAs will end up here\nmetadata.loc[ (metadata['age']<40),'age_class'] = 1\nmetadata.loc[ (metadata['age']>=40) &(metadata['age']<60),'age_class'] = 2\nmetadata.loc[ (metadata['age']>=60),'age_class'] = 3\n\nmeta_summary_df = summarise_pivot_df(metadata, ['age_class'], ['status'], ['uuid'])\nmeta_summary_df = meta_summary_df[['healthy','symptomatic','COVID-19','n\/a']]\nn = meta_summary_df.sum().sum()\nprint(meta_summary_df.head(5) )\n#print( pandas_to_plotly_heatdata(meta_summary_df) )\nheat_data = ply_go.Heatmap(pandas_to_plotly_heatdata(meta_summary_df), \n                           colorscale=ply_colors.sequential.Oranges,\n                           colorbar={'title':\"Entries\", 'titleside':\"top\"} ,\n                           text=meta_summary_df.values)\nrounded_annotation = [ [\"NA\" if pd.isnull(c) else \"{:.0f}\".format(c) for c in r] for r in heat_data['z']]\nfig = ply_ff.create_annotated_heatmap(z=heat_data['z'], \n                                      x=heat_data['x'],\n                                      y=heat_data['y'],#\n                                      #y=[int(i) for i,t in enumerate(heat_data['y']) ],\n                                      annotation_text=rounded_annotation,\n                                      colorscale=heat_data['colorscale'],\n                                      showscale=True,\n                                      colorbar=heat_data['colorbar']  )\nfig.update_layout( yaxis={\"title\":{\"text\":\"Age\"},\n                          \"tickmode\":'array',\"tickvals\":[3,2,1,0,],\"ticktext\":['> 60 yo','40 - 60 yo','< 40 yo', 'n\/a']})\nfig.show()","a839a7d7":"## Concluding remarks\n\nA couple of things to keep in mind for the next stages:\n* there are a lot of audio records without a diagnosis label in the \"status\" column. We might want to get rid of them in first instance\n* the dataset is imbalanced, the ratio healthy:covid19 is about 11:1\n* there is a decent amount of entries with a covid19 diagnosis that have a low cough_detection score. The dataset authors recommend to cut entries with cough_detection < 0.80 but this might result in the loss of a significant fraction of the already limited COVID sample. A possibility could be to train different ML for different categories of records (categorised by age, cough_detection, SNR, etc.).\n* according to the data, there are 90+ year old seniors who connected to the website, recorded an audio sample of their cough and populated a webform with their generalities, all of this while being diagnosed with COVID. Allow me to be suspicious... might decide to apply a cut on the max age of the entry\n\n","82a9b381":"## Visualise metadata","b3f67006":"# PART1: Data Exploration\n\n## Introductory notes\nOriginal article is open at the URL: https:\/\/www.nature.com\/articles\/s41597-021-00937-4\n\n\nDataset description is contained therein, it is worth a read. Some interesting notes from the article:\n* Metadata explanation: https:\/\/www.nature.com\/articles\/s41597-021-00937-4\/tables\/2\n* Experts labels are not fully consistent and often in disagreement for the same audio recording. Cough type and congestion are the features where the four experts tend to agree more. Everything else should be used - if used at all - with care.\n* A certain number of records does not contain any cough audio, they are spurious. Authors have run XGBoost classification to idenitfy records with coughs. Score of classifier is contained in column cough_detected. They suggest to cut at cough_detected > 0.8, that should leave you with a contamination of non-cough audio by about 4.6%\n* On top of that, the SNR variable tells you about the Signal-to-Noise Ratio ofthe cough audio. High SNR correspond to clearer cough sounds\n* The XGBoost classifier that identifies whether there is any coughing sound at all was based on the audio features listed at https:\/\/www.nature.com\/articles\/s41597-021-00937-4\/tables\/3\n\n","c69a54b2":"## Import metadata file and visualise key metadata properties"}}