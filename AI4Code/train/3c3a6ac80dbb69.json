{"cell_type":{"564f937b":"code","024679b1":"code","a5c85632":"code","3cfeb532":"code","1ee155cb":"code","4db44572":"code","e120721f":"code","05b3bfa0":"code","fdfc862b":"code","4491d693":"code","58c6d5d6":"code","1b6dbc70":"code","40d73763":"code","f04a47c2":"code","b3012740":"code","21120e46":"code","f56f0372":"code","180592ae":"code","c0665c16":"code","04ced927":"code","764eb7ca":"code","29ca50ad":"code","f90f3b8c":"code","a8ece864":"code","07fb2798":"code","44a762b1":"code","ca4aa033":"code","ee2f31d6":"code","1b8aeaa2":"code","48d990d7":"code","f8ddddd6":"code","9ac244c5":"code","1560fc55":"code","7ab30b79":"code","3d35b711":"code","c66591eb":"code","2eec2882":"code","3f3a9bf9":"markdown","d0ad2783":"markdown","e81ef4ee":"markdown","8e0bdd52":"markdown","c5b271a5":"markdown","b90c43e4":"markdown","cdad00ba":"markdown","d650f1c1":"markdown","3d910f91":"markdown","28d57ae9":"markdown","aab3b06a":"markdown","d2bb343d":"markdown","9f2280d9":"markdown","d7bf4ec2":"markdown","8c60bd8f":"markdown","300d0baa":"markdown","0f7a4998":"markdown","91f8c097":"markdown","3e2fd5c5":"markdown","079446fe":"markdown","3b8eed0b":"markdown","7dd72493":"markdown","1c8e4965":"markdown","49d103bd":"markdown","3ac540b1":"markdown","f463e09e":"markdown","55ac9be2":"markdown","4a8376ce":"markdown","6ac0861f":"markdown","63242cdc":"markdown","4413290c":"markdown","48f21c11":"markdown","5b16a7b9":"markdown","c414064f":"markdown"},"source":{"564f937b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n#plotly\nimport plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nfrom wordcloud import WordCloud\n\nimport matplotlib.pyplot as plt\n\nfrom collections import Counter\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","024679b1":"import plotly as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go","a5c85632":"import plotly.io as pio\npio.templates","3cfeb532":"pio.templates.default = \"plotly_dark\"","1ee155cb":"data=pd.read_csv('..\/input\/fifa19\/data.csv')","4db44572":"data.info()","e120721f":"data.head()","05b3bfa0":"data.isnull().sum()","fdfc862b":"data['ShortPassing'].fillna(data['ShortPassing'].mean(), inplace = True)\ndata['Volleys'].fillna(data['Volleys'].mean(), inplace = True)\ndata['Dribbling'].fillna(data['Dribbling'].mean(), inplace = True)\ndata['Curve'].fillna(data['Curve'].mean(), inplace = True)\ndata['FKAccuracy'].fillna(data['FKAccuracy'], inplace = True)\ndata['LongPassing'].fillna(data['LongPassing'].mean(), inplace = True)\ndata['BallControl'].fillna(data['BallControl'].mean(), inplace = True)\ndata['HeadingAccuracy'].fillna(data['HeadingAccuracy'].mean(), inplace = True)\ndata['Finishing'].fillna(data['Finishing'].mean(), inplace = True)\ndata['Crossing'].fillna(data['Crossing'].mean(), inplace = True)\ndata['Weight'].fillna('200lbs', inplace = True)\ndata['Height'].fillna(\"5'11\", inplace = True)\ndata['Position'].fillna('ST', inplace = True)\ndata['Club'].fillna('No Club', inplace = True)\ndata['Skill Moves'].fillna(data['Skill Moves'].median(), inplace = True)\ndata['Weak Foot'].fillna(3, inplace = True)\ndata['Preferred Foot'].fillna('Right', inplace = True)\ndata['Wage'].fillna('\u20ac200K', inplace = True)","4491d693":"data.fillna(0, inplace = True)","58c6d5d6":"def convert(Value):\n    out = Value.replace('\u20ac', '')\n    if 'M' in out:\n        out = float(out.replace('M', ''))*1000000\n    elif 'K' in Value:\n        out = float(out.replace('K', ''))*1000\n    return float(out)\n","1b6dbc70":"\n#prepare data frame\ndata['Value'] = data['Value'].apply(lambda x : convert(x)\/100000)\n\nnationlist=list(data['Nationality'].unique())\noverall_ratio=[]\nage_ratio=[]\nvalue_ratio=[]\ncount=[]\nfor i in nationlist:\n    x=data[data['Nationality']==i]\n    overall_rate=sum(x.Overall)\/len(x)\n    age_rate=sum(x.Age)\/len(x)\n    value_rate=sum(x.Value)\/len(x)\n    counter=len(x)\n    \n    overall_ratio.append(overall_rate)\n    age_ratio.append(age_rate)\n    value_ratio.append(value_rate)\n    count.append(counter\/10)\n\nnewdata=pd.DataFrame({'Nation': nationlist, 'overallRatio':overall_ratio,\n                      'ageRatio':age_ratio, 'valueRatio':value_ratio, 'PlayerCounts':count })\nnewdata.head()\n\n\n","40d73763":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n#creating traces\ntrace0 = go.Scatter(x=newdata.Nation.head(15), y=newdata.overallRatio, name='Overall Ratio')\ntrace1 = go.Scatter(x=newdata.Nation.head(15), y=newdata.ageRatio, name='Age Ratio')\ntrace2 = go.Scatter(x=newdata.Nation.head(15), y=newdata.valueRatio, name='Value Ratio x100000')\ntrace3 = go.Scatter(x=newdata.Nation.head(15), y=newdata.PlayerCounts, name='Number of Player x10')\ndataV = [trace0, trace1, trace2, trace3]\niplot(dataV)","f04a47c2":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n#creating traces\ntrace0=go.Scatter(\n                    x = data.Name.head(15),\n                    y = data.GKDiving,\n                    mode = \"markers\",\n                    name = \"GKdiving\",\n                    marker = dict(symbol = 'diamond',\n                                  sizemode = 'diameter',\n                                  size = 20,\n                                  color = 'rgba(66,133,244,0.8)'),\n                    text=data.Overall\n)\n\ntrace1=go.Scatter(\n                    x = data.Name.head(15),\n                    y = data.Finishing,\n                    mode = \"markers\",\n                    name = \"Finishing\",\n                    marker = dict(\n                                  symbol = 'star-square',\n                                  sizemode = 'diameter',\n                                  size = 20,\n                                  color = 'rgba(219,68,55,0.8)'),\n                    text=data.Overall)\n\ntrace2=go.Scatter(\n                    x = data.Name.head(15),\n                    y = data.Strength,\n                    mode = \"markers\",\n                    name = \"Strength\",\n                    marker = dict(\n                                  symbol = 'hexagon2-dot',\n                                  sizemode = 'diameter',\n                                  size = 20,\n                                  color = 'rgba(244,160,0,0.8)'),\n                    text=data.Overall)\n\ntrace3=go.Scatter(\n                    x = data.Name.head(15),\n                    y = data.Vision,\n                    mode = \"markers\",\n                    name = \"Vision\",\n                    marker = dict(\n                                  symbol = 'bowtie',\n                                  sizemode = 'diameter',\n                                  size = 20,\n                                  color = 'rgba(15,157,88,0.8)'),\n                    text=data.Overall)\n\ndataV=[trace0,trace1,trace2,trace3]\nlayout=dict(title='GKDiving, Finishing, Strength, Vision',\n            xaxis=dict(title='Highest Overall Score', ticklen=5, zeroline=False),\n            yaxis=dict(title='Rating on Scale of 100', ticklen=5, zeroline=False)\n)\n\nfig=dict(data=dataV,layout=layout)\niplot(fig)\n","b3012740":"#prepare data frame\nnationlist=list(data['Nationality'].unique())\nleft=[]\nright=[]\nfor i in nationlist:\n    x=data[data['Nationality']==i]\n    leftf=len(x[x['Preferred Foot']==\"Left\"])\n    rightf=len(x[x['Preferred Foot']==\"Right\"])\n    \n    left.append(leftf)\n    right.append(rightf)\n    \nnewdata0=pd.DataFrame({'Nation': nationlist, 'LeftFoot': left, 'RightFoot': right})\n","21120e46":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n#creating traces\ntrace0=go.Bar(\n                    x = newdata0.Nation.head(4),\n                    y = newdata0.LeftFoot,\n                    name = \"Left Foot\",\n                    marker = dict(color = 'rgba(60,30,180,0.9)',\n                                  line=dict(color='rgb(205,141,45)',width=1.5)),\n                    )\ntrace1=go.Bar(\n                    x = newdata0.Nation.head(4),\n                    y = newdata0.RightFoot,\n                    name = \"Right Foot\",\n                    marker = dict(color = 'rgba(255,30,18,0.9)',\n                                  line=dict(color='rgb(111,191,54)',width=1.5)),\n                    )\n\ndataV=[trace0,trace1]\nlayout=go.Layout(barmode=\"group\")\nfig=go.Figure(data=dataV,layout=layout)\niplot(fig)","f56f0372":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n#creating traces\ntrace0={\n    'x': newdata0.Nation.head(4),\n    'y': newdata0.LeftFoot,\n    'name' : 'Left Foot',\n    'type' : 'bar'\n};\ntrace1={\n    'x' : newdata0.Nation.head(4),\n    'y' : newdata0.RightFoot,\n    'name' : 'Right Foot',\n    'type' : 'bar'\n    \n};\ndataV=[trace0,trace1];\nlayout={\n    'xaxis':{'title': 'Nations'},\n    'barmode':'relative',\n    'title':'Preferred Foot'\n    };\nfig=go.Figure(data=dataV,layout=layout)\niplot(fig)","180592ae":"newdata.PlayerCounts=newdata.apply(lambda x: newdata.PlayerCounts*10, axis=0)","c0665c16":"#prepare data frame\nsorted_data=newdata.sort_values(by='PlayerCounts', ascending=False)\nsorted_data.head()\n\nsize=sorted_data.PlayerCounts.head(10)\nlabel=sorted_data.Nation\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n#creating trace\ntrace=go.Pie(labels=label,\n             values=size,\n             )\ndataV=[trace]\niplot(dataV)","04ced927":"# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\nnewcolors = ['#355BC5', '#CB4A3E', '#D2D25A', '#487247', '#AD7C1B', '#6A1467', '#9F9C99', \n          '#755139','#88B04B','#00A591']\n\n#creating trace\ntrace = go.Pie(labels=label, \n               values=size, \n               marker=dict(colors=newcolors),\n               textposition = \"outside\",\n               hole = .3)\n\nlayout=go.Layout(\n                 title=\"Top 10 Country with the Most Football Players \",\n                 legend=dict(orientation=\"h\")\n                 )\nfig = go.Figure(data=trace, layout=layout)\niplot(fig)","764eb7ca":"trace0 = go.Histogram(\n    x=data.Age,\n    opacity=0.7,\n    name=\"Age\",\n    marker=dict(color='rgba(85,172,238,0.8)',\n                line=dict(color='rgb(0,0,0)',width=1.5)\n               )\n)\n\ndataV=[trace0]\nlayout=go.Layout(barmode='overlay', title='Histogram of Players Age',\n                 xaxis=dict(title='Age'),\n                 yaxis=dict(title='count')\n                )\nfig=go.Figure(data=dataV, layout=layout)\niplot(fig)\n","29ca50ad":"trace0 = go.Histogram(\n    x=data.Overall,\n    opacity=0.7,\n    name=\"Overall\",\n    marker = dict(color = 'rgba(255,187,0,0.9)',\n                           line=dict(color='rgb(0,0,0)',width=1.5)\n                 )\n)\n\ndataV=[trace0]\nlayout=go.Layout(barmode='overlay', title='Histogram of Players Age',\n                 xaxis=dict(title='Age'),\n                 yaxis=dict(title='count')\n                )\nfig=go.Figure(data=dataV, layout=layout)\niplot(fig)","f90f3b8c":"import plotly.figure_factory as ff","a8ece864":"hist_data = [data.Special]\nlabels = ['Speciality Scores']\n\nfig = ff.create_distplot(hist_data, labels)\nfig.update_layout(title_text='Distribution of Speciality Scores')\niplot(fig)","07fb2798":"Nations = data.Nationality\nplt.subplots(figsize=(15,15))\nwordcloud = WordCloud(\n            background_color = 'black',\n            #width=800,\n            #height=600,\n            #max_font_size=34,\n            min_font_size=10,\n            colormap=\"jet\").generate(\" \".join(Nations))\n\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","44a762b1":"sorted_data.Nation[11]=\"United Kingdom\" # replace England to United Kingdom\n\ntrace =go.Choropleth(\n            locationmode = 'country names',\n            locations = sorted_data['Nation'],\n            text = sorted_data['Nation'],\n            z = sorted_data['PlayerCounts'],\n            colorscale = 'inferno',\n            marker_line_color='darkgray',\n            marker_line_width=0.5,\n            colorbar_title='Number of<br>Player'\n         \n)\n\nlayout = go.Layout(title = 'Country vs Number of Players')\n\nfig = go.Figure(data = trace, layout = layout)\niplot(fig)","ca4aa033":"dataV= [\n    {\n        'y' : data.Overall,\n        'x' : data.Name.head(20),\n        'mode' : 'markers',\n        'marker' : {\n            'color': data.Value,\n            'size' : data.Special,\n            'showscale': True,\n            'sizeref': 2.*max(size)\/(9.**2),\n            'sizemin': 1,\n            'colorbar_title':'Value \u20ac<br>(x100000)'\n        },\n        \"text\" : data.Position\n    }\n]\n\nlayout=go.Layout(title='',\n                 xaxis=dict(title='Top 20 Players'),\n                 yaxis=dict(title='Overall Score')\n                )\n\nfig=go.Figure(data=dataV, layout=layout)\niplot(fig)","ee2f31d6":"\ntrace0= go.Box(\n    y=data.Overall,\n    x=data.Position,\n    name='Overall vs Position',\n    marker=dict(color='#FF851B',outliercolor='#000000'),\n    \n    text=data.Name\n)\n\n\nlayout=go.Layout(title='Overall Score vs Positions',\n                 xaxis=dict(title='Positions',linecolor='#87BDD8', color='#FFCC5C'),\n                 yaxis=dict(title='Overall Score', linecolor='#87BDD8', color='#87BDD8'),\n                )\n\n\nfig=go.Figure(data=trace0,layout=layout)\niplot(fig)","1b8aeaa2":"clubs = ('Juventus', 'Paris Saint-Germain', 'Manchester United', \n                  'Manchester City', 'Atl\u00e9tico Madrid', 'FC Barcelona', \n                  'FC Bayern M\u00fcnchen', 'Chelsea', 'Real Madrid')\n\nselected_clubs = data.loc[data['Club'].isin(clubs) & data['Overall']]\nleagues=('Serie A', 'League A', 'La Liga', 'Premiere', 'Bundesliga')","48d990d7":"juv=selected_clubs.loc[selected_clubs['Club']=='Juventus']\ntrace0= go.Box(\n    y=juv.Overall,   \n    name='Juventus',\n    marker=dict(color='#DCDCDC'),\n    boxmean='sd',\n    text=juv.Name\n)\n\nparis=selected_clubs.loc[selected_clubs['Club']=='Paris Saint-Germain']\ntrace1= go.Box(\n    y=paris.Overall,    \n    name='Paris Saint-Germain',\n    marker=dict(color='#DA291C'),\n    boxmean='sd',\n    text=paris.Name\n)\n\nmunited=selected_clubs.loc[selected_clubs['Club']=='Manchester United']\ntrace2= go.Box(\n    y=munited.Overall,    \n    name='Manchester United',\n    marker=dict(color='#FBE122'),\n    boxmean='sd',\n    text=munited.Name\n)\n\nmcity=selected_clubs.loc[selected_clubs['Club']=='Manchester City']\ntrace3= go.Box(\n    y=mcity.Overall,    \n    name='Manchester City',\n    marker=dict(color='#6CABDD'),\n    boxmean='sd',\n    text=mcity.Name\n)\n\naMadrid=selected_clubs.loc[selected_clubs['Club']=='Atl\u00e9tico Madrid']\ntrace4= go.Box(\n    y=aMadrid.Overall,    \n    name='Atl\u00e9tico Madrid',\n    marker=dict(color='#CB3524'),\n    boxmean='sd',\n    text=aMadrid.Name\n)\n\nbarca=selected_clubs.loc[selected_clubs['Club']=='FC Barcelona']\ntrace5= go.Box(\n    y=barca.Overall,    \n    name='FC Barcelona',\n    marker=dict(color='#A50044'),\n    boxmean='sd',\n    text=barca.Name\n)\n\nbayern=selected_clubs.loc[selected_clubs['Club']=='FC Bayern M\u00fcnchen']\ntrace6= go.Box(\n    y=bayern.Overall,    \n    name='FC Bayern M\u00fcnchen',\n    marker=dict(color='#0066B2'),\n    boxmean='sd',\n    text=bayern.Name\n)\n\nchelsea=selected_clubs.loc[selected_clubs['Club']=='Chelsea']\ntrace7= go.Box(\n    y=chelsea.Overall,    \n    name='Chelsea',\n    marker=dict(color='#034694'),\n    boxmean='sd',\n    text=chelsea.Name\n)\n\nrMadrid=selected_clubs.loc[selected_clubs['Club']=='Real Madrid']\ntrace8= go.Box(\n    y=rMadrid.Overall,    \n    name='Real Madrid',\n    marker=dict(color='#FEBE10'),\n    boxmean='sd',\n    text=rMadrid.Name\n)\n\nlayout=go.Layout(title='Overall Score vs Clubs',\n                 xaxis=dict(tickangle=90,linecolor='#87BDD8', color='#87BDD8'),\n                 yaxis=dict(title='Overall Score', linecolor='#87BDD8', color='#87BDD8')\n                )\n\ndataV=[trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8]\nfig=go.Figure(data=dataV,layout=layout)\niplot(fig)","f8ddddd6":"juv=selected_clubs.loc[selected_clubs['Club']=='Juventus']\ntrace0= go.Box(\n    y=juv.Value,   \n    name='Juventus',\n    marker=dict(color='#DCDCDC'),\n    boxmean='sd',\n    text=juv.Name\n)\n\nparis=selected_clubs.loc[selected_clubs['Club']=='Paris Saint-Germain']\ntrace1= go.Box(\n    y=paris.Value,    \n    name='Paris Saint-Germain',\n    marker=dict(color='#DA291C'),\n    boxmean='sd',\n)\n\nmunited=selected_clubs.loc[selected_clubs['Club']=='Manchester United']\ntrace2= go.Box(\n    y=munited.Value,    \n    name='Manchester United',\n    marker=dict(color='#FBE122'),\n    boxmean='sd',\n    text=munited.Name\n)\n\nmcity=selected_clubs.loc[selected_clubs['Club']=='Manchester City']\ntrace3= go.Box(\n    y=mcity.Value,    \n    name='Manchester City',\n    marker=dict(color='#6CABDD'),\n    boxmean='sd',\n    text=mcity.Name\n)\n\naMadrid=selected_clubs.loc[selected_clubs['Club']=='Atl\u00e9tico Madrid']\ntrace4= go.Box(\n    y=aMadrid.Value,    \n    name='Atl\u00e9tico Madrid',\n    marker=dict(color='#CB3524'),\n    boxmean='sd',\n)\n\nbarca=selected_clubs.loc[selected_clubs['Club']=='FC Barcelona']\ntrace5= go.Box(\n    y=barca.Value,    \n    name='FC Barcelona',\n    marker=dict(color='#A50044'),\n    boxmean='sd',\n)\n\nbayern=selected_clubs.loc[selected_clubs['Club']=='FC Bayern M\u00fcnchen']\ntrace6= go.Box(\n    y=bayern.Value,    \n    name='FC Bayern M\u00fcnchen',\n    marker=dict(color='#0066B2'),\n    boxmean='sd',\n)\n\nchelsea=selected_clubs.loc[selected_clubs['Club']=='Chelsea']\ntrace7= go.Box(\n    y=chelsea.Value,    \n    name='Chelsea',\n    marker=dict(color='#034694'),\n    boxmean='sd',\n    text=chelsea.Name\n)\n\nrMadrid=selected_clubs.loc[selected_clubs['Club']=='Real Madrid']\ntrace8= go.Box(\n    y=rMadrid.Value,    \n    name='Real Madrid',\n    marker=dict(color='#FEBE10'),\n    boxmean='sd',\n)\n\nlayout=go.Layout(title='Value vs Clubs',\n                 xaxis=dict(tickangle=90,linecolor='#87BDD8', color='#87BDD8'),\n                 yaxis=dict(title='Value \u20ac (x100000)', linecolor='#87BDD8', color='#87BDD8')\n                )\n\ndataV=[trace0,trace1,trace2,trace3,trace4,trace5,trace6,trace7,trace8]\nfig=go.Figure(data=dataV,layout=layout)\niplot(fig)","9ac244c5":"#import figure factory\nimport plotly.figure_factory as ff\n\n#prepare data frame\ndataV=data.loc[:2500]\ndataV1 = dataV.loc[:,[\"Overall\",\"Age\",\"Value\"]]\ndataV1[\"index\"]=np.arange(1,len(dataV1)+1)\n\n#scatter matrix\nfig=ff.create_scatterplotmatrix(dataV1, diag=\"box\", index=\"index\", colormap='Portland',\n                                colormap_type='cat',\n                                height=700,width=700)\n\niplot(fig)","1560fc55":"dataV=data.loc[:250]\n\ntrace1=go.Scatter3d(\n    x=dataV.Overall,\n    y=dataV.BallControl,\n    z=dataV.ShotPower,\n    mode='markers',\n    marker=dict(\n        size=dataV.Age,\n        color=dataV.Value,\n        colorscale='inferno',\n        showscale=True\n        \n    )\n)\n\ndataV1=[trace1]\n\nlayout=go.Layout(\n    margin=dict(l=0,r=0,b=0,t=0),\n    \n    scene = dict(\n    xaxis = dict(\n        title='Overall'),\n    yaxis = dict(\n        title='Ball Control'),\n    zaxis = dict(\n        title='Shot Power'),),\n\n\n)\n\nfig=go.Figure(data=dataV1, layout=layout)\niplot(fig)","7ab30b79":"selected = data.loc[:,[\"Potential\",\"Overall\",\"Age\",\"Value\",\"Crossing\", \n                        \"Finishing\",\"HeadingAccuracy\",\"ShortPassing\",\"Volleys\", \n                        \"Dribbling\",\"Curve\",\"FKAccuracy\",\"LongPassing\",\"BallControl\", \n                        \"Acceleration\",\"SprintSpeed\",\"Agility\",\"Reactions\",\"Balance\", \n                        \"ShotPower\",\"Jumping\",\"Stamina\",\"Strength\",\"Positioning\", \n                        \"Vision\",\"Penalties\",\"Marking\",\"GKDiving\"]]\nfltr=selected.loc[:2500]\ncorr=fltr.corr()\n\ntrace0 = go.Heatmap(z=corr,\n                    x=fltr.columns,\n                    y=fltr.columns, \n                    colorscale='thermal')\n\nlayout = go.Layout(dict(title = \"Correlation Matrix\",\n                        autosize = False,\n                        height  = 600,\n                        width   = 800,\n                        margin  = dict(l = 200),\n                        yaxis   = dict(tickfont = dict(size = 8)),\n                        xaxis   = dict(tickfont = dict(size = 8))\n                       )\n                  )\nfig = go.Figure(data=trace0, layout=layout)\niplot(fig)","3d35b711":"sorted_data.head()","c66591eb":"pio.templates.default = \"plotly\"\ntrace0 = go.Sunburst(\n    ids=[\n    \"United Kingdom\", \"Germany\", \"Spain\", \"Argentina\", \"France\",\n    \"United Kingdom - Players\", \"Germany - Players\", \"Spain - Players\", \"Argentina - Players\", \"France - Players\",\n    \"United Kingdom - Overall\", \"Germany - Overall\", \"Spain - Overall\", \"Argentina - Overall\", \"France - Overall\",\n    \"United Kingdom - Age\", \"Germany - Age\", \"Spain - Age\", \"Argentina - Age\", \"France - Age\",\n    \"United Kingdom - Value\", \"Germany - Value\", \"Spain - Value\", \"Argentina - Value\", \"France - Value\"\n    ],\n    labels=[\"United Kingdom\", \"Germany\", \"Spain\", \"Argentina\", \"France\", \n            \"Number of<br>Players\", \"Number of<br>Players\", \"Number of<br>Players\",\"Number of<br>Players\",\"Number of<br>Players\",\n            \"Age Ratio\", \"Value<br>Ratio\", \"Overall\",\n            \"Age Ratio\", \"Value<br>Ratio\", \"Overall\", \n            \"Age Ratio\", \"Value<br>Ratio\", \"Overall\",\n            \"Age Ratio\", \"Value<br>Ratio\", \"Overall\",\n            \"Age Ratio\", \"Value<br>Ratio\", \"Overall\"],\n    parents=[\"\", \"\", \"\", \"\", \"\",  \n             \"United Kingdom\", \"Germany\", \"Spain\", \"Argentina\", \"France\",\n             \"United Kingdom - Players\", \"United Kingdom - Players\", \"United Kingdom - Players\", \n             \"Germany - Players\", \"Germany - Players\", \"Germany - Players\",\n             \"Spain - Players\", \"Spain - Players\", \"Spain - Players\",\n             \"Argentina - Players\", \"Argentina - Players\", \"Argentina - Players\",\n             \"France - Players\", \"France - Players\", \"France - Players\",\n             \n             ],\n    values=[0, 0, 0, 0, 0, \n            sorted_data.PlayerCounts[0], sorted_data.PlayerCounts[1], sorted_data.PlayerCounts[2], sorted_data.PlayerCounts[3], sorted_data.PlayerCounts[4], \n            sorted_data.ageRatio[0], sorted_data.valueRatio[0]*10, sorted_data.overallRatio[0],\n            sorted_data.ageRatio[1], sorted_data.valueRatio[1]*10, sorted_data.overallRatio[1],\n            sorted_data.ageRatio[2], sorted_data.valueRatio[2]*10, sorted_data.overallRatio[2],\n            sorted_data.ageRatio[3], sorted_data.valueRatio[3]*10, sorted_data.overallRatio[3], \n            sorted_data.ageRatio[4], sorted_data.valueRatio[4]*10, sorted_data.overallRatio[4]\n           ],\n    outsidetextfont = {\"size\": 20, \"color\": \"#377eb8\"},\n    marker = {\"line\": {\"width\": 2}},\n)\n\nlayout = go.Layout(\n    margin = go.layout.Margin(t=0, l=0, r=0, b=0)\n)\n\nfig=go.Figure(data=trace0, layout=layout)\niplot(fig)","2eec2882":"dataV = dict(\n    type='sankey',\n    node = dict(\n      pad = 15,\n      thickness = 20,\n      line = dict(\n        color = \"black\",\n        width = 0.5\n      ),\n      label=[\"United Kingdom\", \"Germany\", \"Spain\", \"Argentina\", \"France\", \n             \"Number of<br>Players\", \"Number of<br>Players\", \"Number of<br>Players\", \"Number of<br>Players\",\"Number of<br>Players\", \n             \"Overall Ratio\", \"Age Ratio\", \"Value Ratio\",\n             \"Overall Ratio\", \"Age Ratio\", \"Value Ratio\",\n             \"Overall Ratio\", \"Age Ratio\", \"Value Ratio\",\n             \"Overall Ratio\", \"Age Ratio\", \"Value Ratio\",\n             \"Overall Ratio\", \"Age Ratio\", \"Value Ratio\",],\n      color = [\"yellow\", \"blue\", \"red\", \"orange\", \"green\",\n               \"yellow\", \"blue\", \"red\", \"orange\", \"green\",\n               \"brown\",\"purple\",\"cyan\",\n               \"brown\",\"purple\",\"cyan\",\n               \"brown\",\"purple\",\"cyan\",\n               \"brown\",\"purple\",\"cyan\",\n               \"brown\",\"purple\",\"cyan\"]\n    ),\n    link = dict(\n      source = [0,1,2,3,4,\n                5,5,5,\n                6,6,6,\n                7,7,7,\n                8,8,8,\n                9,9,9],\n      target = [5,6,7,8,9,\n                10,11,12,\n                13,14,15,\n                16,17,18,\n                19,20,21,\n                22,23,24],\n      value = [sorted_data.PlayerCounts[0], sorted_data.PlayerCounts[1], sorted_data.PlayerCounts[2],sorted_data.PlayerCounts[3],sorted_data.PlayerCounts[4], \n               sorted_data.overallRatio[0], sorted_data.ageRatio[0], sorted_data.valueRatio[0],\n               sorted_data.overallRatio[1], sorted_data.ageRatio[1], sorted_data.valueRatio[1],\n               sorted_data.overallRatio[2], sorted_data.ageRatio[2], sorted_data.valueRatio[2],\n               sorted_data.overallRatio[3], sorted_data.ageRatio[3], sorted_data.valueRatio[3], \n               sorted_data.overallRatio[4], sorted_data.ageRatio[4], sorted_data.valueRatio[4], \n              ]\n  ))\n\n\n\n\nfig = dict(data=[dataV])\niplot(fig, validate=False)","3f3a9bf9":"<a id=\"2\"><\/a> <br>\n### Line Charts","d0ad2783":"<a id=\"15\"><\/a> <br>\n### Sunburst","e81ef4ee":"<a id=\"6\"><\/a> <br>\n### Histogram Charts","8e0bdd52":"<a id=\"14\"><\/a> <br>\n### Heatmap","c5b271a5":"<a id=\"5\"><\/a> <br>\n### Pie Charts","b90c43e4":"* WordCloud = word cloud library that I import at the beginning of kernel\n    * background_color = color of back ground\n    * generate = generates the nation name list(Nations) a word cloud","cdad00ba":"<a id=\"12\"><\/a> <br>\n### Scatter Matrix","d650f1c1":"<a id=\"3\"><\/a> <br>\n### Scatter Plot","3d910f91":"* import plotly.figure_factory as ff\n* create_scatterplotmatrix = creates scatter plot\n    * colormap = color map of scatter plot\n    * colormap_type = color type of scatter plot\n    * height and weight","28d57ae9":"<a id=\"1\"><\/a> <br>\n# What is Plotly?","aab3b06a":"<a id=\"10\"><\/a> <br>\n### Bubble Charts","d2bb343d":"\n    * Box Plots\n        * Median (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile \n        that is 50% of data are less that median(50th quartile)(quartile)\n        * 25th percentile = quartile 1 (Q1) that is lower quartile\n        * 75th percentile = quartile 3 (Q3) that is higher quartile\n        * height of box = IQR = interquartile range = Q3-Q1\n        * Whiskers = 1.5 * IQR from the Q1 and Q3\n        * Outliers = being more than 1.5*IQR away from median commonly.\n        \n    \n   * trace = box\n        * x = x axis\n        * y = y axis \n        * marker = color\n        * name = name of legend","9f2280d9":"<a id=\"8\"><\/a> <br>\n### WordCloud","d7bf4ec2":"<a id=\"16\"><\/a> <br>\n### Sankey","8c60bd8f":"> ## Actually, if you change only the barmode from *group* to *relative* in previous example, you achieve what we did here. However, for diversity I use different syntaxes. \n","300d0baa":"<a id=\"4\"><\/a> <br>\n### Bar Charts","0f7a4998":"**The libraries we need to import to use Plotly.**","91f8c097":"## \"Plotly\" is a library built on open source d3.js that enables us to create interactive images. Matlab, R and Python APIs are available. This means that Python users can easily manipulate the data in the pandas dataframe and create interactive visuals.","3e2fd5c5":"<a id=\"9\"><\/a> <br>\n### Map Plots","079446fe":"* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * name = name of the plots\n* data = is a list that we add traces into it\n* iplot(data)","3b8eed0b":"* x = x axis\n* y = y axis\n* mode = markers(scatter)\n* marker = marker properties\n    * color = third dimension of plot. Value\n    * size = fourth dimension of plot. Special\n* text: Position","7dd72493":"* Import graph_objs as *go*\n* Creating traces\n    * values = values of plot\n    * labels = labels of plot\n    * marker = marker is used with dictionary. \n        * colors = colors of pieces.\n    * hole = hole width\n    * textposition =\n* layout = layout of plot\n    * title = title of layout\n    * legend = legend is used with dictionary.\n        * orientation = orientation like horizontal","1c8e4965":"* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n        * line = It is dictionary. line between bars\n            * color = line color around bars\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * barmode = bar mode of bars like grouped\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","49d103bd":"<a id=\"13\"><\/a> <br>\n### 3D Scatter Plots","3ac540b1":"* Import graph_objs as *go*\n* Creating traces\n    * values: values of plot\n    * labels: labels of plot","f463e09e":"How does Plotly work?\n\n* call our libraries\n* put x, y variables into go.Scatter function >> trace\n* iplot (trace)","55ac9be2":"* Import graph_objs as *go*\n* Creating traces\n    * x = x axis\n    * y = y axis\n    * mode = type of plot like marker, line or line + markers\n    * name = name of the plots\n    * marker = marker is used with dictionary. \n        * color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n    * text = The hover text (hover is curser)\n* data = is a list that we add traces into it\n* layout = it is dictionary.\n    * title = title of layout\n    * x axis = it is dictionary\n        * title = label of x axis\n        * ticklen = length of x axis ticks\n        * zeroline = showing zero line or not\n    * y axis = it is dictionary and same with x axis\n* fig = it includes data and layout\n* iplot() = plots the figure(fig) that is created by data and layout","4a8376ce":"# INTRODUCTION\n**Content:**\n1. [What is Plotly?](#1)\n2. Plot Contents:\n    * 2.1. [Line Charts](#2)\n    * 2.2. [Scatter Plots](#3)\n    * 2.3. [Bar Charts](#4)\n    * 2.4. [Pie Charts](#5)\n    * 2.5. [Histogram Charts](#6)\n    * 2.6. [Displots](#7)\n    * 2.7. [WordCloud](#8)\n    * 2.8. [Map Plots](#9)\n    * 2.9. [Bubble Charts](#10)\n    * 2.10. [Box Plots](#11)\n    * 2.11. [Scatter Matrix](#12)\n    * 2.12. [3D Scatter Plots](#13)\n    * 2.13. [Heatmap](#14)\n    * 2.14. [Sunburst](#15)\n    * 2.15. [Sankey](#16)\n3. [CONCLUSION](#17)","6ac0861f":"* go.Scatter3d: create 3d scatter plot\n* x,y,z: axis of plots\n* mode: market that is scatter\n* size: marker size\n* color: axis of colorscale\n* colorscale:  actually it is 4th dimension","63242cdc":"**Let's beautify it.**","4413290c":"<a id=\"17\"><\/a> <br>\n# CONCLUSION\nIf you like it, please upvote :)","48f21c11":"<a id=\"7\"><\/a> <br>\n### Distplots","5b16a7b9":"\n* x = x axis\n* opacity = opacity of histogram\n* name = name of legend\n* marker = color of histogram\n\n* layout = layout \n    * barmode = mode of histogram like overlay. ","c414064f":"<a id=\"11\"><\/a> <br>\n### Box Plots"}}