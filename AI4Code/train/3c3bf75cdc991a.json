{"cell_type":{"c0fd89ac":"code","2994c4f6":"code","75d846a3":"code","9d80ec9a":"code","45b337b9":"code","d56482eb":"code","d8b51c5d":"code","9eb2a69e":"code","c8f08e68":"code","c78c8d51":"code","8e48d94b":"code","37d97b10":"code","4f8c9a43":"code","cfbf9fdb":"code","fbf90661":"code","3e634d82":"markdown","25cd3849":"markdown","f24c1461":"markdown","a57ef5e7":"markdown","30c8c930":"markdown","b82d871d":"markdown"},"source":{"c0fd89ac":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2994c4f6":"data = pd.read_json('\/kaggle\/input\/shopee-code-leagu-da\/contacts.json')\ndata.head(100)","75d846a3":"data.info()","9d80ec9a":"df.to_csv('contacts.csv', index=False)","45b337b9":"df = data[:100].copy()\ndf[\"ticket_trace\"] = df[\"Id\"].astype(str)\ndf[\"ticket_trace\"] = ''\ndf.info()","d56482eb":"import time\nstart_time = time.time()\n\nfor i in df[\"Id\"]:\n    x = []\n    if df.Email[i]:\n        #email = df.loc[df.Id == i][\"Email\"].values[0]  \n        x = df.loc[df.Email == df.Email[i]][\"Id\"].values\n        #print(x)\n        for j in range(len(x)):\n            #print(j)\n            df.ticket_trace[i] = df.ticket_trace[i] + str(x[j]) + '-'\n        #df.ticket_trace[i] = df.ticket_trace[i][:-1]\n        #print(df.ticket_trace[i])\n\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","d8b51c5d":"df.head(20)","9eb2a69e":"df = data[:100].copy()\ndf[\"ticket_trace\"] = ''\ndf.info()","c8f08e68":"import time\nstart_time = time.time()\n\nfor i in df[\"Id\"]:\n    x = []\n    if df.Email[i]: \n        x = df.loc[df.Email == df.Email[i]][\"Id\"].values\n    if df.Phone[i]:\n        x = np.append(x, df.loc[df.Phone == df.Phone[i]][\"Id\"].values).astype(int)   \n    if df.OrderId[i]:\n        x = np.append(x, df.loc[df.OrderId == df.OrderId[i]][\"Id\"].values).astype(int)\n    x = np.unique(x)\n    #print(x)\n    for j in range(len(x)):\n        df.ticket_trace[i] = df.ticket_trace[i] + str(x[j]) + '-'\n    df.ticket_trace[i] = df.ticket_trace[i][:-1]\n\nprint(\"--- %s seconds ---\" % (time.time() - start_time))","c78c8d51":"df.head(50)","8e48d94b":"df = data[:10000].copy()\ndf[\"ticket_trace\"] = ''\ndf[\"total_contacts\"] = 0\n\ndf.info()","37d97b10":"import time\nstart_time = time.time()\n\nfor i in df[\"Id\"]:\n    x = []\n    if df.Email[i]: \n        x = df.loc[df.Email == df.Email[i]][\"Id\"].values\n    if df.Phone[i]:\n        x = np.append(x, df.loc[df.Phone == df.Phone[i]][\"Id\"].values).astype(int)   \n    if df.OrderId[i]:\n        x = np.append(x, df.loc[df.OrderId == df.OrderId[i]][\"Id\"].values).astype(int)\n    x = np.unique(x)\n    #print(x)\n    \n    for j in range(len(x)):\n        df.ticket_trace[i] = df.ticket_trace[i] + str(x[j]) + '-'\n        df.total_contacts[i] = df.total_contacts[i] + df.Contacts[x[j]]\n    df.ticket_trace[i] = df.ticket_trace[i][:-1]\n\ndf[\"ticket_trace\/contact\"] = df.ticket_trace.astype(str) + ', ' + df.total_contacts.astype(str)\n    \nprint(\"--- %s seconds ---\" % (time.time() - start_time))","4f8c9a43":"df.head(20)","cfbf9fdb":"result = df.copy()\nresult = result.drop(['Email', 'Phone', 'Contacts', 'OrderId', 'ticket_trace', 'total_contacts'], axis=1)\nresult.head()","fbf90661":"result.to_csv('submission.csv', index=False)","3e634d82":"### Count Total Contacts + Merge trace and total contact","25cd3849":"## Real Code Parts","f24c1461":"# Code Execution Optimation","a57ef5e7":"## Drop unnecessary column, and Export Final File ","30c8c930":"### Multiple Condition","b82d871d":"### Only Checking Emails"}}