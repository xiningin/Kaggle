{"cell_type":{"05fc5431":"code","e392d359":"code","5772fabf":"code","350901f1":"code","32eeeceb":"code","30d1ec63":"code","bd4150e0":"markdown","a11f156a":"markdown"},"source":{"05fc5431":"import pandas as pd\nimport numpy as np\n\nimport gc\nimport cudf\nimport cuml\nimport cupy\nfrom cuml.feature_extraction.text import TfidfVectorizer\nfrom cuml.neighbors import NearestNeighbors","e392d359":"df = pd.read_csv('..\/input\/shopee-product-matching\/test.csv')\n# df = pd.read_csv('..\/input\/shopee-product-matching\/train.csv')\ndf_cu = cudf.DataFrame(df)\n","5772fabf":"def get_text_predictions(df, max_features = 25_000):\n    \n    model = TfidfVectorizer(stop_words = 'english', binary = True, max_features = max_features)\n    text_embeddings = model.fit_transform(df_cu['title']).toarray()\n    preds = []\n    CHUNK = 1024*4\n\n    print('Finding similar titles...')\n    CTS = len(df)\/\/CHUNK\n    if len(df)%CHUNK!=0: CTS += 1\n    for j in range( CTS ):\n\n        a = j*CHUNK\n        b = (j+1)*CHUNK\n        b = min(b,len(df))\n        print('chunk',a,'to',b)\n\n        # COSINE SIMILARITY DISTANCE\n        cts = cupy.matmul( text_embeddings, text_embeddings[a:b].T).T\n\n        for k in range(b-a):\n            IDX = cupy.where(cts[k,]>0.7)[0]\n            o = df.iloc[cupy.asnumpy(IDX)].posting_id.values\n            preds.append(o)\n    \n    del model,text_embeddings\n    gc.collect()\n    return preds\n","350901f1":"def combine_predictions(row):\n    x = np.concatenate([row['text_predictions']])\n    return ' '.join( np.unique(x))","32eeeceb":"text_predictions = get_text_predictions(df, max_features = 25_000)","30d1ec63":"df['text_predictions'] = text_predictions\ndf['matches'] = df.apply(combine_predictions, axis = 1)\ndf[['posting_id', 'matches']].to_csv('submission.csv', index = False)","bd4150e0":"# Using Text with Tfidf\n","a11f156a":"# TFIDF Only Solution\n\nA Work in Progress...\n\nAn beginner friendly attempt to understand TFIDF by removing everything else and building a simple notebook.\n\n## Other Focused Solutions\n\n- [Shopee Word2Vect](https:\/\/www.kaggle.com\/mmellinger66\/shopeeword2vec)\n\n## References\n\n- https:\/\/www.kaggle.com\/parthdhameliya77\/pytorch-efficientnet-b3-image-tfidf-inference\n- https:\/\/www.kaggle.com\/cdeotte\/part-2-rapids-tfidfvectorizer-cv-0-700#Use-Text-Embeddings"}}