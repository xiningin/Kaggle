{"cell_type":{"40e20ed2":"code","086380be":"code","af9b76bf":"code","0d99ecda":"code","8b76d735":"code","569cf1c3":"code","5878edef":"code","42d4b8fb":"code","8eb613b9":"code","838e2522":"code","2073e2d6":"code","abbf10e1":"code","11e08b1b":"code","cb529e81":"code","ae2f6821":"code","8ca5055a":"code","b479d4ab":"code","9eb99661":"code","efa6af82":"code","109359e8":"code","d4117d56":"code","5ac0dbbe":"code","b01b334e":"code","39f02151":"code","ba87c66b":"code","cc98ec65":"code","af0c91f0":"code","daad8b73":"code","5fc625e2":"code","8b34203f":"code","d28b9aff":"code","c2b8dc48":"code","7e0c2eeb":"code","a012fc4c":"code","0e76b748":"code","a0299c3d":"code","731b6c01":"code","1894eec1":"code","29094106":"code","f54c0f36":"code","f645f129":"code","6efdba9d":"code","2a407979":"code","b98ccc54":"code","3d06a587":"code","f248bafc":"code","4139c1e2":"code","47b97dd0":"code","d50bbea4":"code","a67f00da":"code","98f944ad":"code","c7b48958":"code","21bcf6b2":"code","162cd4bc":"code","32594d12":"code","8147fb87":"code","634dfb66":"code","bd57f2c3":"code","0cde2513":"code","abf5abc1":"code","461212ce":"code","9c3c86cf":"code","8c903fe7":"code","ef1edf98":"code","2fb583d5":"code","3d444a6a":"code","873cdacb":"code","2f812e85":"code","ae11c265":"code","85cd1959":"code","de51e76d":"code","c67d6e21":"code","4c41961f":"code","08f6f5d7":"markdown","593d0bc1":"markdown","38ff8962":"markdown","4bb1e9f7":"markdown","ebbd86a8":"markdown","245a78dd":"markdown","4b95389b":"markdown","616a5c91":"markdown","0b3c561c":"markdown","24e3b5c6":"markdown","760f73e2":"markdown","41d9bde2":"markdown","df525e42":"markdown","b9c2d2da":"markdown","29082839":"markdown","24b49ad2":"markdown","1c3d5115":"markdown","0d4a2f58":"markdown","432751ca":"markdown","91785599":"markdown","ee85bb09":"markdown","7f3b007a":"markdown","83847fe8":"markdown","3467c04c":"markdown","dfeb83a3":"markdown","360babb4":"markdown","a21bce15":"markdown","28a627b0":"markdown","917286c2":"markdown","2eb870e9":"markdown","2c6ee38e":"markdown","ef82d5cc":"markdown","7e0c219f":"markdown","2c572f60":"markdown","f306439a":"markdown","56fca5aa":"markdown","6cb40025":"markdown","5b1b7130":"markdown","7ba6c9b9":"markdown","908d8680":"markdown","942a92b8":"markdown","8f614bfb":"markdown","c5758571":"markdown","6cf8d857":"markdown","0415bdd0":"markdown","a48f77f1":"markdown","3a7690fb":"markdown"},"source":{"40e20ed2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndataset = pd.read_csv('..\/input\/home-credit-default-risk\/application_train.csv')\ndf = dataset[0:10000]","086380be":"df.head()","af9b76bf":"y = df['TARGET'].copy()\nx = df[['CODE_GENDER', 'NAME_FAMILY_STATUS', 'AMT_CREDIT', 'DAYS_BIRTH']].copy()\ndf_test = df[['TARGET', 'CODE_GENDER', 'NAME_FAMILY_STATUS', 'AMT_CREDIT', 'DAYS_BIRTH']].copy()","0d99ecda":"df_test.info()","8b76d735":"x['CODE_GENDER'] ","569cf1c3":"x['CODE_GENDER'] = x['CODE_GENDER'].map({'M' : 0, 'F' : 1}).astype(int) # \u6027\u5225\u306e\u30c0\u30df\u30fc\u5909\u6570\nx['NAME_FAMILY_STATUS'] = x['NAME_FAMILY_STATUS'].map({'Civil marriage' : 0, 'Married' : 1, 'Separated' : 2, 'Single \/ not married' : 3, 'Widow' : 4}).astype(int) # \u6027\u5225\u306e\u30c0\u30df\u30fc\u5909\u6570","5878edef":"x.head()","42d4b8fb":"import seaborn as sns\nsns.pairplot(df_test);","8eb613b9":"from sklearn.model_selection import train_test_split\nx_train, x_test = train_test_split(x.values, random_state=0).copy()\ny_train, y_true = train_test_split(y.values, random_state=0).copy()","838e2522":"from sklearn.linear_model import LogisticRegression\nimport sklearn.metrics as me\nfrom sklearn.metrics import classification_report\n\nlogi = LogisticRegression()\nlogi.fit(x_train, y_train)\nlogi_pred = logi.predict(x_test)\nlogi_confusion = me.confusion_matrix(y_true, logi_pred) \nprint(logi_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, logi_pred))","2073e2d6":"from sklearn.metrics import roc_auc_score\nfpr_all, tpr_all, th_all  = me.roc_curve(y_true, logi.predict_proba(x_test)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, logi.predict_proba(x_test)[:, 1])))","abbf10e1":"from sklearn.neighbors import KNeighborsClassifier\nneigh5 = KNeighborsClassifier(n_neighbors=5)\nneigh5.fit(x_train, y_train) # \u6a5f\u68b0\u306b\u5b66\u3070\u305b\u3066\u3044\u308b\nKNN5_pred = neigh5.predict(x_test) # \u691c\u8a3c\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066\u3001\u7d50\u679c\u3092\u5f97\u308b\nprint(np.sum(KNN5_pred==0)) # python\u3067\u306fTrue\u30921\u3068\u3057\u3066\u3042\u3064\u304b\u3046\u305f\u3081\u5408\u8a08\u5024\u3067\u3044\u3051\u308b\nprint(np.sum(KNN5_pred==1))","11e08b1b":"neigh3 = KNeighborsClassifier(n_neighbors=3)\nneigh3.fit(x_train, y_train) # \u6a5f\u68b0\u306b\u5b66\u3070\u305b\u3066\u3044\u308b\nKNN3_pred = neigh3.predict(x_test) # \u691c\u8a3c\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066\u3001\u7d50\u679c\u3092\u5f97\u308b\nprint(np.sum(KNN3_pred==0))\nprint(np.sum(KNN3_pred==1))","cb529e81":"neigh1 = KNeighborsClassifier(n_neighbors=1)\nneigh1.fit(x_train, y_train) # \u6a5f\u68b0\u306b\u5b66\u3070\u305b\u3066\u3044\u308b\nKNN1_pred = neigh1.predict(x_test) # \u691c\u8a3c\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066\u3001\u7d50\u679c\u3092\u5f97\u308b\nprint(np.sum(KNN1_pred==0))\nprint(np.sum(KNN1_pred==1))","ae2f6821":"import sklearn.metrics as me\nfrom sklearn.metrics import classification_report\nknn5_confusion = me.confusion_matrix(y_true, KNN5_pred) \nprint(knn5_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, KNN5_pred))","8ca5055a":"knn3_confusion = me.confusion_matrix(y_true, KNN3_pred) \nprint(knn3_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, KNN3_pred))","b479d4ab":"knn1_confusion = me.confusion_matrix(y_true, KNN1_pred) \nprint(knn1_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, KNN1_pred))","9eb99661":"unique_name, count = np.unique(neigh3.predict_proba(x_test)[:, 1], return_counts=True) # \u95be\u5024\u3068\u305d\u308c\u3092\u8d85\u3048\u308b\u5024\u3092\u683c\u7d0d\npd.DataFrame(list(zip(unique_name, count)), columns = ['unique_name','count'])","efa6af82":"from sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfpr_all, tpr_all, th_all  = me.roc_curve(y_true, neigh3.predict_proba(x_test)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, neigh3.predict_proba(x_test)[:, 1])))","109359e8":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier()\nclf.fit(x_train, y_train)\nclf_pred = clf.predict(x_test)\nclf_confusion = me.confusion_matrix(y_true, clf_pred) \nprint(clf_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, clf_pred))","d4117d56":"unique_name, count = np.unique(clf.predict_proba(x_test)[:, 1], return_counts=True) # \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u3092\u53d6\u308b\u78ba\u7387\u95a2\u6570\npd.DataFrame(list(zip(unique_name, count)), columns = ['unique_name','count'])","5ac0dbbe":"fpr_all, tpr_all, th_all  = me.roc_curve(y_true, clf.predict_proba(x_test)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, clf.predict_proba(x_test)[:, 1])))","b01b334e":"clf_1000 = RandomForestClassifier(n_estimators=1000)\nclf_1000.fit(x_train, y_train)\nclf_1000_pred = clf_1000.predict(x_test)\nclf_1000_confusion = me.confusion_matrix(y_true, clf_1000_pred) \nprint(clf_1000_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, clf_1000_pred))","39f02151":"fpr_all, tpr_all, th_all  = me.roc_curve(y_true, clf_1000.predict_proba(x_test)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, clf_1000.predict_proba(x_test)[:, 1])))","ba87c66b":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(x_train, y_train)\ndtc_pred = dtc.predict(x_test)\ndtc_confusion = me.confusion_matrix(y_true, dtc_pred) \nprint(dtc_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, dtc_pred))","cc98ec65":"unique_name, count = np.unique(dtc.predict_proba(x_test)[:, 1], return_counts=True) # \u95be\u5024\u3068\u305d\u308c\u3092\u8d85\u3048\u308b\u5024\u3092\u683c\u7d0d\npd.DataFrame(list(zip(unique_name, count)), columns = ['unique_name','count'])","af0c91f0":"fpr_all, tpr_all, th_all  = me.roc_curve(y_true, dtc.predict_proba(x_test)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, dtc.predict_proba(x_test)[:, 1])))","daad8b73":"from sklearn.svm import SVC\nsvc = SVC(probability=True) # probability\u3067\u78ba\u7387\u51fa\u529b\nsvc.fit(x_train, y_train)\nsvc_pred = svc.predict(x_test)\nsvc_confusion = me.confusion_matrix(y_true, svc_pred) \nprint(svc_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, svc_pred))","5fc625e2":"unique_name, count = np.unique(svc.predict_proba(x_test)[:, 1], return_counts=True) # \u95be\u5024\u3068\u305d\u308c\u3092\u8d85\u3048\u308b\u5024\u3092\u683c\u7d0d\npd.DataFrame(list(zip(unique_name, count)), columns = ['unique_name','count'])","8b34203f":"fpr_all, tpr_all, th_all  = me.roc_curve(y_true, svc.predict_proba(x_test)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, svc.predict_proba(x_test)[:, 1])))","d28b9aff":"from sklearn.linear_model import LogisticRegression\nlogi = LogisticRegression()\nlogi.fit(x_train, y_train)\nlogi_pred = svc.predict(x_test)\nlogi_confusion = me.confusion_matrix(y_true, logi_pred) \nprint(logi_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, logi_pred))","c2b8dc48":"unique_name, count = np.unique(logi.predict_proba(x_test)[:, 1], return_counts=True) # \u95be\u5024\u3068\u305d\u308c\u3092\u8d85\u3048\u308b\u5024\u3092\u683c\u7d0d\npd.DataFrame(list(zip(unique_name, count)), columns = ['unique_name','count'])","7e0c2eeb":"fpr_all, tpr_all, th_all  = me.roc_curve(y_true, logi.predict_proba(x_test)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, logi.predict_proba(x_test)[:, 1])))","a012fc4c":"x_l = x.copy()","0e76b748":"x_l['AMT_CREDIT_log'] = x_l['AMT_CREDIT'].apply(np.log) # \u5bfe\u6570\u5909\u63db\nsns.displot(x_l.AMT_CREDIT_log);","a0299c3d":"x_l.head()","731b6c01":"x_log = x_l.drop('AMT_CREDIT', axis=1)\nx_log.head()","1894eec1":"x_train_l, x_test_l = train_test_split(x_log.values, random_state=0).copy()","29094106":"logi_l = LogisticRegression()\nlogi_l.fit(x_train_l, y_train)\nlogi_l_pred = logi_l.predict(x_test_l)\nlogi_l_confusion = me.confusion_matrix(y_true, logi_l_pred) \nprint(logi_l_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, logi_l_pred))","f54c0f36":"fpr_all, tpr_all, th_all  = me.roc_curve(y_true, logi_l.predict_proba(x_test_l)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, logi_l.predict_proba(x_test_l)[:, 1])))","f645f129":"x_train_df, x_test_df = train_test_split(x, random_state=0).copy() # df\u72b6\u614b\u3067\u5206\u914d","6efdba9d":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(x_train_df[['AMT_CREDIT', 'DAYS_BIRTH']])\nx_train_h = scaler.transform(x_train_df[['AMT_CREDIT', 'DAYS_BIRTH']]) # \u6a19\u6e96\u5316\u3067\u304d\u308b\u3082\u306e\u3092\u6a19\u6e96\u5316\u3057h\u306b\u683c\u7d0d\nx_test_h = scaler.transform(x_test_df[['AMT_CREDIT', 'DAYS_BIRTH']])\nx_train_h","2a407979":"x_train_df_2 = x_train_df.drop(['AMT_CREDIT', 'DAYS_BIRTH'], axis=1) # \u6a19\u6e96\u5316\u3057\u305f\u3082\u306e\u3092\u524a\u9664\nx_test_df_2 = x_test_df.drop(['AMT_CREDIT', 'DAYS_BIRTH'], axis=1) \nx_train_df_2","b98ccc54":"x_train_2 = x_train_df_2.values # df\u3092ndarray\u306b\nx_test_2 = x_test_df_2.values\nx_train_h_2 = np.hstack([x_train_h, x_train_2])\nx_test_h_2 = np.hstack([x_test_h, x_test_2])\nx_test_h_2","3d06a587":"logi_h = LogisticRegression()\nlogi_h.fit(x_train_h_2, y_train)\nlogi_h_pred = logi_h.predict(x_test_h_2)\nlogi_h_confusion = me.confusion_matrix(y_true, logi_h_pred) \nprint(logi_h_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, logi_h_pred))","f248bafc":"fpr_all, tpr_all, th_all  = me.roc_curve(y_true, logi_h.predict_proba(x_test_h_2)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, logi_h.predict_proba(x_test_h_2)[:, 1])))","4139c1e2":"x_cnd = x.drop('AMT_CREDIT', axis=1)\nx_train_cnd, x_test_cnd = train_test_split(x_cnd.values, random_state=0).copy()","47b97dd0":"logi_cnd = LogisticRegression()\nlogi_cnd.fit(x_train_cnd, y_train)\nlogi_cnd_pred = logi_cnd.predict(x_test_cnd)\nlogi_cnd_confusion = me.confusion_matrix(y_true, logi_cnd_pred) \nprint(logi_cnd_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, logi_cnd_pred))\nfpr_all, tpr_all, th_all  = me.roc_curve(y_true, logi_cnd.predict_proba(x_test_cnd)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, logi_cnd.predict_proba(x_test_cnd)[:, 1])))","d50bbea4":"x_nad = x.drop('CODE_GENDER', axis=1)\nx_train_nad, x_test_nad = train_test_split(x_nad.values, random_state=0).copy()","a67f00da":"logi_nad = LogisticRegression()\nlogi_nad.fit(x_train_nad, y_train)\nlogi_nad_pred = logi_nad.predict(x_test_nad)\nlogi_nad_confusion = me.confusion_matrix(y_true, logi_nad_pred) \nprint(logi_nad_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, logi_nad_pred))\nfpr_all, tpr_all, th_all  = me.roc_curve(y_true, logi_nad.predict_proba(x_test_nad)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, logi_nad.predict_proba(x_test_nad)[:, 1])))","98f944ad":"x_gad = x.drop('NAME_FAMILY_STATUS', axis=1)\nx_train_gad, x_test_gad = train_test_split(x_gad.values, random_state=0).copy()","c7b48958":"logi_gad = LogisticRegression()\nlogi_gad.fit(x_train_gad, y_train)\nlogi_gad_pred = logi_gad.predict(x_test_gad)\nlogi_gad_confusion = me.confusion_matrix(y_true, logi_gad_pred) \nprint(logi_gad_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, logi_gad_pred))\nfpr_all, tpr_all, th_all  = me.roc_curve(y_true, logi_gad.predict_proba(x_test_gad)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, logi_gad.predict_proba(x_test_gad)[:, 1])))","21bcf6b2":"x_gan = x.drop('DAYS_BIRTH', axis=1)\nx_train_gan, x_test_gan = train_test_split(x_gan.values, random_state=0).copy()","162cd4bc":"logi_gan = LogisticRegression()\nlogi_gan.fit(x_train_gan, y_train)\nlogi_gan_pred = logi_gan.predict(x_test_gan)\nlogi_gan_confusion = me.confusion_matrix(y_true, logi_gan_pred) \nprint(logi_gan_confusion) # \u6df7\u540c\u884c\u5217\nprint(classification_report(y_true, logi_gan_pred))\nfpr_all, tpr_all, th_all  = me.roc_curve(y_true, logi_gan.predict_proba(x_test_gan)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, logi_gan.predict_proba(x_test_gan)[:, 1])))","32594d12":"x2 = df[['CODE_GENDER', 'NAME_FAMILY_STATUS', 'AMT_CREDIT', 'DAYS_BIRTH', 'AMT_INCOME_TOTAL']].copy()\nx2['CODE_GENDER'] = x2['CODE_GENDER'].map({'M' : 0, 'F' : 1}).astype(int) # \u6027\u5225\u306e\u30c0\u30df\u30fc\u5909\u6570\nx2['NAME_FAMILY_STATUS'] = x2['NAME_FAMILY_STATUS'].map({'Civil marriage' : 0, 'Married' : 1, 'Separated' : 2, 'Single \/ not married' : 3, 'Widow' : 4}).astype(int) # \u6027\u5225\u306e\u30c0\u30df\u30fc\u5909\u6570\nx2_train, x2_test = train_test_split(x2.values, random_state=0).copy()","8147fb87":"logi2 = LogisticRegression()\nlogi2.fit(x2_train, y_train)\nlogi2_pred = logi2.predict(x2_test)\nlogi2_confusion = me.confusion_matrix(y_true, logi2_pred) \nprint(logi2_confusion)\nprint(classification_report(y_true, logi2_pred))\nfpr_all, tpr_all, th_all  = me.roc_curve(y_true, logi2.predict_proba(x2_test)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, logi2.predict_proba(x2_test)[:, 1])))","634dfb66":"x3 = df[['CODE_GENDER', 'NAME_FAMILY_STATUS', 'AMT_CREDIT', 'DAYS_BIRTH', 'DAYS_REGISTRATION']].copy()\nx3['CODE_GENDER'] = x3['CODE_GENDER'].map({'M' : 0, 'F' : 1}).astype(int) # \u6027\u5225\u306e\u30c0\u30df\u30fc\u5909\u6570\nx3['NAME_FAMILY_STATUS'] = x3['NAME_FAMILY_STATUS'].map({'Civil marriage' : 0, 'Married' : 1, 'Separated' : 2, 'Single \/ not married' : 3, 'Widow' : 4}).astype(int) # \u6027\u5225\u306e\u30c0\u30df\u30fc\u5909\u6570\nx3_train, x3_test = train_test_split(x3.values, random_state=0).copy()","bd57f2c3":"logi3 = LogisticRegression()\nlogi3.fit(x3_train, y_train)\nlogi3_pred = logi3.predict(x3_test)\nlogi3_confusion = me.confusion_matrix(y_true, logi3_pred) \nprint(logi3_confusion)\nprint(classification_report(y_true, logi3_pred))\nfpr_all, tpr_all, th_all  = me.roc_curve(y_true, logi3.predict_proba(x3_test)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(y_true, logi3.predict_proba(x3_test)[:, 1])))","0cde2513":"dff = dataset\nyf = dff['TARGET'].copy()\nxf = dff[['CODE_GENDER', 'NAME_FAMILY_STATUS', 'AMT_CREDIT', 'DAYS_BIRTH', 'DAYS_REGISTRATION']].copy()","abf5abc1":"unique_name, count = np.unique(xf.CODE_GENDER, return_counts=True) # \u95be\u5024\u3068\u305d\u308c\u3092\u8d85\u3048\u308b\u5024\u3092\u683c\u7d0d\npd.DataFrame(list(zip(unique_name, count)), columns = ['unique_name','count'], index=dff.CODE_GENDER.unique())","461212ce":"unique_name, count = np.unique(xf.NAME_FAMILY_STATUS, return_counts=True) # \u95be\u5024\u3068\u305d\u308c\u3092\u8d85\u3048\u308b\u5024\u3092\u683c\u7d0d\npd.DataFrame(list(zip(unique_name, count)), columns = ['unique_name','count'], index=dff.NAME_FAMILY_STATUS.unique())","9c3c86cf":"xf['CODE_GENDER'] = xf['CODE_GENDER'].map({'M' : 0, 'F' : 1, 'XNA' : 2}).astype(int) # \u6027\u5225\u306e\u30c0\u30df\u30fc\u5909\u6570\nxf['NAME_FAMILY_STATUS'] = xf['NAME_FAMILY_STATUS'].map({'Civil marriage' : 0, 'Married' : 1, 'Separated' : 2, 'Single \/ not married' : 3, 'Widow' : 4, 'Unknown' : 5}).astype(int) # \u6027\u5225\u306e\u30c0\u30df\u30fc\u5909\u6570","8c903fe7":"xf_train, xf_test = train_test_split(xf.values, random_state=0).copy()\nyf_train, yf_true = train_test_split(yf.values, random_state=0).copy()","ef1edf98":"logi_f = LogisticRegression()\nlogi_f.fit(xf_train, yf_train)\nlogi_f_pred = logi_f.predict(xf_test)\nlogi_f_confusion = me.confusion_matrix(yf_true, logi_f_pred) \nprint(logi_f_confusion)\nprint(classification_report(yf_true, logi_f_pred))\nfpr_all, tpr_all, th_all  = me.roc_curve(yf_true, logi_f.predict_proba(xf_test)[:, 1], pos_label=1)# \u6b63\u89e3\u30e9\u30d9\u30eb\uff11\u30921\u306b\u8a2d\u5b9a\u3001\u306a\u306e\u3067\u307f\u308b\u3079\u304d\u306a\u306e\u306f0\u3092\u53d6\u308b\u6642\u306e\u78ba\u7387\u5bc6\u5ea6\ndf_roc = pd.DataFrame({'th_all': th_all, 'tpr_all': tpr_all, 'fpr_all': fpr_all}) # \u95be\u5024\u3001\u518d\u73fe\u7387(recall)\u3001\u9670\u6027\u3092\u9593\u9055\u3048\u3066\u967d\u6027\u3068\u5224\u65ad\u3057\u305f\u5834\u5408\nplt.plot(fpr_all, tpr_all, marker='o')\nplt.xlabel('FPR: False positive rate')\nplt.ylabel('TPR: True positive rate')\nplt.grid()\ndisplay(df_roc)\nprint('AUC : {}'.format(roc_auc_score(yf_true, logi_f.predict_proba(xf_test)[:, 1])))","2fb583d5":"testdata = pd.read_csv('..\/input\/home-credit-default-risk\/application_test.csv')\nx_testdata = testdata[['CODE_GENDER', 'NAME_FAMILY_STATUS', 'AMT_CREDIT', 'DAYS_BIRTH', 'DAYS_REGISTRATION']].copy() # \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","3d444a6a":"x_testdata['CODE_GENDER'] = x_testdata['CODE_GENDER'].map({'M' : 0, 'F' : 1, 'XNA' : 2}).astype(int) # \u6027\u5225\u306e\u30c0\u30df\u30fc\u5909\u6570\nx_testdata['NAME_FAMILY_STATUS'] = x_testdata['NAME_FAMILY_STATUS'].map({'Civil marriage' : 0, 'Married' : 1, 'Separated' : 2, 'Single \/ not married' : 3, 'Widow' : 4, 'Unknown' : 5}).astype(int) # \u6027\u5225\u306e\u30c0\u30df\u30fc\u5909\u6570","873cdacb":"logi_pred_testdata = logi_f.predict(x_testdata.values) # \u7d50\u679c\u306e\u51fa\u529b","2f812e85":"unique_name, count = np.unique(logi_pred_testdata, return_counts=True) # \u95be\u5024\u3068\u305d\u308c\u3092\u8d85\u3048\u308b\u5024\u3092\u683c\u7d0d\npd.DataFrame(list(zip(unique_name, count)), columns = ['unique_name','count'])","ae11c265":"logi_pred_proba_testdata = logi_f.predict_proba(x_testdata.values) # \u78ba\u7387\u5bc6\u5ea6\u3067\u306e\u7d50\u679c\u306e\u51fa\u529b","85cd1959":"result = pd.DataFrame(logi_f.predict_proba(x_testdata)[:, 1], columns=['TARGET']) # df\u306b\u3057\u3066\u4fdd\u5b58","de51e76d":"x_testdata_id = testdata[['SK_ID_CURR']].copy() # id\u306e\u5217\u306e\u62bd\u51fa","c67d6e21":"result_1 = pd.concat([x_testdata_id, result], axis=1)\nRESULT = result_1.set_index('SK_ID_CURR') # \u7d50\u5408\u3068index\u306e\u632f\u308a\u76f4\u3057","4c41961f":"RESULT.to_csv('result.csv')","08f6f5d7":"##  \u30c7\u30fc\u30bf\u306e\u5207\u308a\u5206\u3051","593d0bc1":"\u7d50\u679c\u3092\u307f\u308b\u30680\u306e\u5272\u5408\u304c\u9ad8\u3059\u304e\u308b\u306e\u304b1\u3092\u8868\u793a\u3067\u304d\u306a\u304b\u3063\u305f\u3002  \nk\u8fd1\u508d\u6cd5\u306f\u76ee\u7684\u5909\u6570\u306e\u6570\u304c\u540c\u3058\u3058\u3083\u306a\u3044\u3068\u4f7f\u3044\u3065\u3089\u3044\uff1f\uff1f\uff1f  \n\u5c11\u3057\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","38ff8962":"\u5bfe\u6570\u5909\u63db\u3057\u305f\u65b9\u304c\u7d50\u679c\u306f\u60aa\u304f\u306a\u3063\u305f\u3002  \n\u4f4f\u5b85\u4fa1\u683c\u306e\u6642\u306f\u826f\u304f\u306a\u3063\u305f\u306e\u3067\u8003\u3048\u3089\u308c\u308b\u539f\u56e0\u306f\n- \u5bfe\u6570\u5909\u63db\u3057\u305f\u306e\u304c\u3001\u76ee\u7684\u5909\u6570\u3067\u306f\u306a\u304f\u8aac\u660e\u5909\u6570\u306e\u307f\n- \u5206\u985e\u554f\u984c\u3060\u3063\u305f\u305f\u3081","4bb1e9f7":"### \u8a55\u4fa1","ebbd86a8":"## \u5b66\u7fd2\u65b9\u6cd5\u306e\u5224\u65ad\n### \u8fd1\u508d\u6cd5","245a78dd":"gender\u3092\u524a\u3063\u305f\u6642\u3068\u5168\u304f\u540c\u3058\u30b9\u30b3\u30a2\u306b\u306a\u3063\u305f\u3002  \n\u3068\u3044\u3046\u3053\u3068\u306f\u5168\u304f\u540c\u3058\u91cd\u307f\u306b\u306a\u3063\u3066\u308b\uff1f  \n\u3042\u308b\u3044\u306f\u30ab\u30c6\u30b4\u30ea\u30fc\u7cfb\u306e\u91cd\u307f\u306f\u4e00\u5b9a\u306a\u306e\u304b\uff1f","4b95389b":"0.6\u6642\u70b9\u3067\u306f\u304b\u306a\u308a\u751f\u304d\u6b8b\u3063\u3066\u308b","616a5c91":"\u3072\u3068\u3064\u3082\u6b63\u89e3\u30e9\u30d9\u30eb\u898b\u3064\u3051\u3089\u308c\u3066\u306a\u3044\u3068\u3044\u3046\u60b2\u3057\u304d\u7d50\u679c\u306b  \n\u95be\u5024\u306b\u95a2\u3057\u3066\u306f\u30e6\u30cb\u30fc\u30af\u304c2500\u500b(\u30c7\u30fc\u30bf\u306e\u6570\u3054\u3068\u306b\u78ba\u7387\u3060\u3057\u3066\u304f\u308c\u3066\u308b)\u306e\u306b362\u3057\u304b\u51fa\u529b\u3055\u308c\u3066\u3044\u306a\u3044\u3057  \nAUC\u306b\u95a2\u3057\u3066\u306f\u304a\u305d\u3089\u304f\u3060\u3051\u3069\u5404\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u30660\u3092\u63a8\u5968\u3057\u3066\u3044\u308b\u305f\u3081\u30010.5\u3088\u308a\u4e0b\u306b\u884c\u3063\u305f\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3041","0b3c561c":"\u304b\u306a\u308a\u30b9\u30b3\u30a2\u306f\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044  \n\u7406\u7531\u306f\u304a\u3044\u304a\u3044\u308f\u304b\u308a\u305d\u3046\u3060\u304c...","24e3b5c6":"\u304a\u304a\u3080\u306d\u4e88\u60f3\u901a\u308a\u306e\u7d50\u679c\u51fa\u529b\u3068\u306a\u3063\u305f\u3002","760f73e2":"### \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8","41d9bde2":"\u3053\u3061\u3089\u3082\u7cbe\u5ea6\u3068\u3057\u3066\u306f\u4e0b\u304c\u3063\u3066\u308b  \n\u4f55\u3067\u3082\u304b\u3093\u3067\u3082\u6a19\u6e96\u5316\u3059\u308c\u3070\u3044\u3044\u3063\u3066\u308f\u3051\u3067\u306f\u306a\u3044  \n\u53ef\u80fd\u6027\u3068\u3057\u3066\u306f\u3001'AMT_CREDIT', 'DAYS_BIRTH'\u306e\u91cd\u307f\u304c\u6df1\u304f\u3001\u6a19\u6e96\u5316\u3057\u305f\u3053\u3068\u3067\u91cd\u307f\u304c\u6e1b\u3063\u3066\u3057\u307e\u3063\u305f\u3053\u3068\u3002","df525e42":"## \u7279\u5fb4\u91cf\u306e\u524a\u6e1b","b9c2d2da":"## \u7279\u5fb4\u91cf\u306e\u8ffd\u52a0\n\u6b21\u306b\u826f\u3055\u305d\u3046\u3060\u3063\u305fAMT_INCOME_TOTAL\u3092\u8ffd\u52a0","29082839":"# \u3010\u554f\u984c4\u3011\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\n\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u89b3\u70b9\u3067 \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\uff08Feature Engineering\uff09 \u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\u3069\u306e\u7279\u5fb4\u91cf\u3092\u4f7f\u3046\u304b\n\u3069\u3046\u524d\u51e6\u7406\u3092\u3059\u308b\u304b\n\n\u4f55\u3092\u3057\u305f\u6642\u306b\u691c\u8a3c\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u8a55\u4fa1\u6307\u6a19\u304c\u3069\u306e\u3088\u3046\u306b\u306a\u3063\u305f\u304b\u3092\u307e\u3068\u3081\u3066\u304f\u3060\u3055\u3044\u3002\u6700\u4f4e5\u30d1\u30bf\u30fc\u30f3\u306e\u5b66\u7fd2\u30fb\u691c\u8a3c\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002","24b49ad2":"### \u8a55\u4fa1","1c3d5115":"## \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u306e\u5b9f\u884c","0d4a2f58":"### \u8a55\u4fa1\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e301\u5f37  \n\u4eca\u5f8c\u306e\u5b66\u7fd2\u306f\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u4f7f\u3063\u3066\u3044\u304f","432751ca":"### \u8a55\u4fa1","91785599":"### \u8a55\u4fa1","ee85bb09":"\u304a\u3082\u3063\u3066\u305f\u7d50\u679c\u306b\u306f\u5168\u304f\u306a\u3089\u306a\u304b\u3063\u305f  \n0.5\u30672\u500b1\u3067190\u500b\u3063\u3066\u3069\u3046\u3044\u3046\u610f\u5473\u306a\u3093\u3060\u308d\u3046\u304b  \n\u305d\u3057\u305f\u3089190\u304cTP\u3067\u51fa\u529b\u3055\u308c\u305d\u3046\u306a\u3082\u306e\u3060\u304c  \n\u6c7a\u5b9a\u6728\u306e\u5834\u5408\u95be\u5024\u3067\u5224\u65ad\u3057\u3066\u306a\u3044\u8aac","7f3b007a":"- CODE_GENDER = c\n- NAME_FAMILY_STATUS = n\n- AMT_CREDIT = a\n- DAYS_BIRTH = d\n\na\u304c\u4e00\u756a\u95a2\u4fc2\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u524a\u3063\u3066\u307f\u308b","83847fe8":"## \u76f8\u95a2\u56f3","3467c04c":"## \u6a19\u6e96\u5316","dfeb83a3":"\u6b63\u89e3\u7387\u306f\u9ad8\u3044\u304c\u3001\u6b63\u89e3\u30e9\u30d9\u30eb\u5224\u65ad\u7cbe\u5ea6\u306f\u304b\u306a\u308a\u4f4e\u3044  \n\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u7279\u5fb4\u3092\u3046\u307e\u304f\u629c\u304d\u51fa\u305b\u3066\u3044\u306a\u3044\u8a3c\u62e0","360babb4":"### \u3069\u306e\u3088\u3046\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308aKaggle\u306b\u63d0\u51fa\u3059\u308b\u304b\n\nID\u3068TARGET\u306e2\u5217\u304b\u3089\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3001\u63d0\u51fa\u3059\u308b","a21bce15":"### \u6c7a\u5b9a\u6728","28a627b0":"\u3082\u306e\u3059\u3054\u304f\u4e0b\u304c\u3063\u305f\u30024\u30d1\u30bf\u30fc\u30f3\u5168\u3066\u884c\u3044\u308f\u304b\u3063\u305f\u306e\u304c\u91cd\u8981\u5ea6\u306f\n1. DAYS_BIRTH \n2. AMT_CREDIT \n3. CODE_GENDER = NAME_FAMILY_STATUS \n  \n\u306e\u9806\u756a\u3060\u3063\u305f\uff01","917286c2":"### \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3000","2eb870e9":"\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u5834\u5408\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3092100\u56de\u884c\u3046\u306e\u3067\u78ba\u7387\u5206\u5e03\u306f\u304b\u306a\u308a\u7d30\u304b\u304f\u306a\u308b\u3002  \n\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5909\u66f4\u3059\u308b\u3068...","2c6ee38e":"##  \u30c0\u30df\u30fc\u5909\u6570\u4f5c\u6210","ef82d5cc":"### \u8a55\u4fa1","7e0c219f":"gender\u3092\u524a\u9664\u3057\u3066\u3082\u30b9\u30b3\u30a2\u306f\u4e0b\u304c\u3063\u305f\uff01","2c572f60":"\u7279\u5fb4\u91cf\u3092\u524a\u6e1b\u3059\u308b\u3053\u3068\u3067\u30b9\u30b3\u30a2\u306f\u82e5\u5e72\u4e0b\u304c\u3063\u305f  \n\u8ffd\u52a0\u3059\u308c\u3070\u4e0a\u304c\u308b\u304b\u3082\uff01\u3000\u3000\n\n\n\n\u3061\u306a\u307f\u306b\u4ed6\u306e\u30c7\u30fc\u30bf\u3092\u524a\u308b\u3068","f306439a":"\u304c\u3063\u3064\u308a\u4e0b\u304c\u3063\u305f\u7b11\n\n'DAYS_REGISTRATION'\u306e\u5834\u5408","56fca5aa":"## \u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u4f5c\u6210","6cb40025":"## \u5bfe\u6570\u5909\u63db","5b1b7130":"# \u4fe1\u7528\u60c5\u5831\u306e\u5b66\u7fd2\n# \u3010\u554f\u984c1\u3011\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u5185\u5bb9\u306e\u78ba\u8a8d\n\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u306eOverview\u30da\u30fc\u30b8\u8aad\u307f\u3001\u300cHome Credit Default Risk\u300d\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u306e\u89b3\u70b9\u306b\u3064\u3044\u3066\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n- \u4f55\u3092\u5b66\u7fd2\u3057\u3001\u4f55\u3092\u4e88\u6e2c\u3059\u308b\u306e\u304b\n- \u3069\u306e\u3088\u3046\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308aKaggle\u306b\u63d0\u51fa\u3059\u308b\u304b\n- \u63d0\u51fa\u3055\u308c\u305f\u3082\u306e\u306f\u3069\u3046\u3044\u3063\u305f\u6307\u6a19\u5024\u3067\u8a55\u4fa1\u3055\u308c\u308b\u306e\u304b","7ba6c9b9":"### SVC","908d8680":"\u307b\u3093\u3068\u306b\u82e5\u5e72\u3060\u304c\u4e0a\u304c\u3063\u305f\uff01  \n\u95a2\u4fc2\u306f\u3042\u3063\u305f\u307f\u305f\u3044\uff01","942a92b8":"### \u63d0\u51fa\u3055\u308c\u305f\u3082\u306e\u306f\u3069\u3046\u3044\u3063\u305f\u6307\u6a19\u5024\u3067\u8a55\u4fa1\u3055\u308c\u308b\u306e\u304b\n\nROC\u66f2\u7dda\u306e\u4e0b\u5074(AUC)\u3067\u306e\u8a55\u4fa1\u3068\u306a\u308b","8f614bfb":"\u5404\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u30001\u3092\u53d6\u308b\u78ba\u7387","c5758571":"\u6848\u306e\u5b9a\u78ba\u7387\u3067\u51fa\u3055\u306a\u3044\u9650\u308a\u306f0\u3067\u51fa\u529b\u3055\u308c\u308b\u3002","6cf8d857":"# \u3010\u554f\u984c2\u3011\u5b66\u7fd2\u3068\u691c\u8a3c\n\u30c7\u30fc\u30bf\u3092\u7c21\u5358\u306b\u5206\u6790\u3001\u524d\u51e6\u7406\u3057\u3001\u5b66\u7fd2\u3001\u691c\u8a3c\u3059\u308b\u307e\u3067\u306e\u4e00\u9023\u306e\u6d41\u308c\u3092\u4f5c\u6210\u30fb\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\u691c\u8a3c\u306b\u306f\u3053\u306e\u30b3\u30f3\u30da\u30c6\u30a3\u30b7\u30e7\u30f3\u3067\u4f7f\u7528\u3055\u308c\u308b\u8a55\u4fa1\u6307\u6a19\u3092\u7528\u3044\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5b66\u7fd2\u306b\u7528\u3044\u308b\u624b\u6cd5\u306f\u6307\u5b9a\u3057\u307e\u305b\u3093\u3002\n\n\n\u5206\u6790\u306e\u6642\u306b\u3044\u3044\u7279\u5fb4\u91cf\u306b\u306a\u308a\u305d\u3046\u306a\uff14\u3064\u3092\u4f7f\u7528\u3057\u3066\u30e2\u30c7\u30eb\u4f5c\u6210\u3092\u884c\u3046\n\n- CODE_GENDER\n- NAME_FAMILY_STATUS\n- AMT_CREDIT\n- DAYS_BIRTH","0415bdd0":"### \u4f55\u3092\u5b66\u7fd2\u3057\u3001\u4f55\u3092\u4e88\u6e2c\u3059\u308b\u306e\u304b\ntrain\u30c7\u30fc\u30bf\u3092\u4f7f\u3044model\u4f5c\u6210\u3092\u884c\u3046  \ntest\u30c7\u30fc\u30bf\u304b\u3089TAAGET\u5909\u6570\u3092\u4e88\u6e2c\u3059\u308b  ","a48f77f1":"## \u5168\u30c7\u30fc\u30bf\u3067\u306e\u691c\u8a3c","3a7690fb":"\u4fe1\u3058\u3089\u308c\u306a\u3044\u304f\u3089\u3044\u7cbe\u5ea6\u306f\u843d\u3061\u305f  \n\u5b9f\u884c\u6642\u9593\u306f\u305d\u3053\u307e\u3067\u304b\u304b\u3089\u306a\u304b\u3063\u305f.  \n\u5916\u308c\u5024\u306e\u554f\u984c\u304b\u30b5\u30f3\u30d7\u30eb\u6642\u306e\u304b\u305f\u3088\u308a(10000\u3082\u5f15\u3063\u5f35\u3063\u305f\u3057\u305d\u308c\u306f\u306a\u3044\u3068\u601d\u3046\u3051\u3069)\u306e\u53ef\u80fd\u6027\u304c\u9ad8\u3044  \n\u904e\u5b66\u7fd2\u306e\u53ef\u80fd\u6027\u3082\u3042\u308b"}}