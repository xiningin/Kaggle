{"cell_type":{"67110499":"code","70df996f":"code","9db50cc9":"code","f5f3ad1a":"code","af3ce120":"code","4818f1d2":"code","ba911289":"code","330eac4b":"code","86ca712a":"code","d4bc1765":"code","89e78d75":"code","a1b42191":"code","09204118":"code","7eeedcdd":"code","5460a831":"code","bd45f92b":"code","78ef3fce":"code","9a57828c":"code","2ed83bfa":"code","e3321d32":"code","c5e4276a":"code","4d202570":"code","521a5ee1":"code","b792db63":"code","e3698a09":"code","6e9dde9e":"code","0bde9b61":"markdown","8a17946e":"markdown","569ccfb2":"markdown","8ac8284e":"markdown","fb283943":"markdown","590ad539":"markdown","45c499a6":"markdown","adf3eba6":"markdown","8dc41aee":"markdown"},"source":{"67110499":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","70df996f":"#import the libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import pyplot\nimport seaborn as sns\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split","9db50cc9":"heart_data = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\nheart_data.head()","f5f3ad1a":"#check datatypes\nheart_data.dtypes","af3ce120":"#check for missing values \nheart_data.isnull().sum()","4818f1d2":"# Output distribution\noutcome = heart_data['output'].value_counts().to_frame()\nprint(outcome)\noutcome['output'].plot(kind='pie',\n                            figsize=(15, 6),\n                            autopct='%1.1f%%', \n                            startangle=90, \n                            labels=None,         \n                            pctdistance=1.12,\n                            )\n\nplt.title('Outcome Distribution', y=1.2) \nplt.axis('equal') \nplt.legend(labels=outcome.index, loc='upper left') \nplt.show()","ba911289":"# Age break Down \ngroup_names_age = ['20\\'s', '30\\'s', '40\\'s', '50\\'s', '60\\'s', '70\\'s']\nheart_data['AgeG'] = pd.cut(heart_data['age'], bins=[20,29,39,49,59,69,79], labels=group_names_age, \n                            include_lowest=True )\n\nheart_data","330eac4b":"#Age break down\nageG = heart_data.AgeG.value_counts().to_frame()\nageG.index\n\nprint('Age Break Down')\nprint(heart_data.AgeG.value_counts())\n\nplt.figure(figsize = (10,8))\npyplot.bar(ageG.index, heart_data[\"AgeG\"].value_counts())\n\npyplot.xlabel(\"Age Groups\")\npyplot.ylabel(\"count\")\npyplot.title(\"Age Break Down \")","86ca712a":"# Exercise induced angina distribution\nplt.figure(figsize=(10, 8))\nsns.countplot(heart_data[\"exng\"], palette = 'deep')\nprint('Exercise induced angina. 0 = No 1 = Yes \\n')\nprint(heart_data.exng.value_counts())","d4bc1765":"# Chest Pain type distribution\n# Value 0: typical angina, Value 1: atypical angina, \n# Value 2: non-anginal pain, Value 3: asymptomatic\nplt.figure(figsize=(10, 8))\nsns.countplot(x ='cp', hue = \"output\", data = heart_data, palette = 'deep')\nprint('Chest Pain type. \\n Value 0: typical angina, Value 1: atypical angina,' ,\n      '\\n Value 2: non-anginal pain, Value 3: asymptomatic')\nheart_data.groupby(['cp', 'output'])['output'].count().to_frame()","89e78d75":"# fasting blood sugar distribution\nplt.figure(figsize=(10, 8))\nsns.countplot(heart_data[\"fbs\"], palette = 'deep')\nprint('Fasting Blood Sugar > 120 mg\/dl. \\n 0 = No 1 = Yes\\n')\nprint(heart_data.fbs.value_counts())","a1b42191":"# find the mean values based on output for trtbps : resting blood pressure (in mm Hg), \n# chol : cholestoral in mg\/dl fetched via BMI sensor, thalach : maximum heart rate achieved and oldpeak\ngrouped = heart_data.groupby('output').mean()\ngrouped[['trtbps', 'chol', 'thalachh', 'oldpeak']]","09204118":"plt.figure(figsize=(10, 8))\nvaribales = ['trtbps', 'chol', 'thalachh', 'oldpeak']\nfor x in varibales:\n    sns.displot(x = x, data=heart_data, hue = 'output', kind = 'kde', palette = 'deep')","7eeedcdd":"# convert age column.  1 to male and 0 to female \nheart_data['M\/F'] = heart_data['sex'].apply(lambda x : 'Male' if x == 1 else 'Female')\nheart_data.head()","5460a831":"plt.figure(figsize=(10, 8))\nprint('Sex distribution \\n')\nsns.countplot(x='M\/F', data=heart_data, palette = 'deep')\nprint(heart_data['M\/F'].value_counts())","bd45f92b":"#Age and output\nplt.figure(figsize=(10, 8))\nprint('Age and output distribution.\\n')\nsns.countplot(x='AgeG', data = heart_data, hue='output', palette = 'deep')\nheart_data.groupby(['AgeG', 'output'])['output'].count().to_frame()","78ef3fce":"#Sex and ouput\nplt.figure(figsize=(10, 8))\nprint('Sex and output distribution.\\n')\nsns.countplot(x='M\/F', data = heart_data, hue = 'output', palette = 'deep')\nheart_data.groupby(['M\/F', 'output'])['output'].count().to_frame()","9a57828c":"#number of major vessels (0-3) and ouput\nplt.figure(figsize=(10, 8))\nprint('Number of major vessels and output distribution.\\n')\nsns.countplot(x='caa', data = heart_data, hue = 'output', palette = 'deep')\nheart_data.groupby(['caa', 'output'])['output'].count().to_frame()","2ed83bfa":"# feature selection \nx = heart_data.drop(['output', 'AgeG', 'M\/F'], axis=1)\ny = heart_data['output'].values","e3321d32":"# feature scaling \nsc = StandardScaler()\nX = sc.fit_transform(x)","c5e4276a":"# train and test split \nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.20,random_state = 5)","4d202570":"# train and test shapes \nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","521a5ee1":"#Stop model training when validation accuracy hits a certian level \nclass myCallback(tf.keras.callbacks.Callback):\n        def on_epoch_end(self, epoch, logs={}):\n            if logs.get('val_accuracy') is not None and logs.get('val_accuracy') > 0.91:\n                print(\"\\nReached greater than 91% accuracy so cancelling training!\")\n                self.model.stop_training = True","b792db63":"# Build model, compile model, train and validate model preformace\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Dense(128, input_dim=13, activation='relu'),\n  tf.keras.layers.Dropout(.2),\n  tf.keras.layers.Dense(256, activation='sigmoid'),\n  tf.keras.layers.Dropout(.2),\n  tf.keras.layers.Dense(32, activation='sigmoid'),\n  tf.keras.layers.Dropout(.2),\n  tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\ncallbacks = myCallback()\n\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\nhisto = model.fit(X_train, y_train, epochs=50, batch_size=64, callbacks=[callbacks],\n                  verbose = 1, validation_data=(X_test, y_test))","e3698a09":"# graph model accuracy of training and testing subsets \nplt.figure(figsize=(15,5))\nplt.plot(histo.history['accuracy'])\nplt.plot(histo.history['val_accuracy'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","6e9dde9e":"# graph the loss of both training and testing subsets \nplt.figure(figsize=(15,5))\nplt.plot(histo.history['loss']) \nplt.plot(histo.history['val_loss']) \nplt.title('Model loss') \nplt.ylabel('Loss') \nplt.xlabel('Epoch') \nplt.legend(['Train', 'Test'], loc='upper left') \nplt.show()","0bde9b61":"We will use the heart attack dataset containing following parameters, to predict the chances of heart attack in patients:\n\nAge : Age of the patient\n\nSex : Sex of the patient\n\nexang: exercise induced angina (1 = yes; 0 = no)\n\ncaa: number of major vessels (0-3)\n\ncp : Chest Pain type chest pain type\nValue 1: typical angina\nValue 2: atypical angina\nValue 3: non-anginal pain\nValue 4: asymptomatic\n\ntrtbps : resting blood pressure (in mm Hg)\n\nchol : cholestoral in mg\/dl fetched via BMI sensor\n\nfbs : (fasting blood sugar > 120 mg\/dl) (1 = true; 0 = false)\n\nrest_ecg : resting electrocardiographic results\nValue 0: normal\nValue 1: having ST-T wave abnormality (T wave inversions and\/or ST elevation or depression of > 0.05 mV)\nValue 2: showing probable or definite left ventricular hypertrophy by Estes' criteria\n\nthalach : maximum heart rate achieved\n\ntarget : 0= less chance of heart attack 1= more chance of heart attack","8a17946e":"85% of the dataset participants fasting blood sugar is below 120.","569ccfb2":"The dataset has more twice as much males to females.","8ac8284e":"The dataset consist largely of people in their 50's, 60's and 40's. ","fb283943":"Of the dataset female participants 72\/96 or 75% have a output of 1. 1 = more chance of heart attack. \nIn contrast, of the dataset male participants 93\/207 or 45% have a output of 1.","590ad539":"# EDA","45c499a6":"Of the dataset participants people with 0 major vessels had the greatest risk of a heart attack. \nThe risk of heart attack falls with the increase number of major vessels. ","adf3eba6":"# Model","8dc41aee":"1\/3 of the dataset participants experience exercise induced angina. "}}