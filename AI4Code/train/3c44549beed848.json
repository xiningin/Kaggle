{"cell_type":{"c62626d5":"code","341bc8d2":"code","9af00b54":"code","5cd94fea":"code","717fe9e3":"code","bef74ebf":"code","8044f108":"code","8c867c75":"code","c4eb605b":"code","6af89bce":"code","9bc88730":"code","c3ec0964":"code","7fd43977":"code","627dedca":"code","353c2ba1":"code","e3fb5f0c":"code","6b76f2b9":"code","6ff8dc7c":"code","be697552":"code","e6c9bc6d":"code","d08f70b5":"code","c3300855":"code","875185b9":"code","012ad2fe":"code","9265309c":"code","90e3a7b1":"code","ddc30201":"code","a19dc865":"code","f6bf0116":"code","8f592718":"code","c99695d5":"code","c8d9b026":"code","ef582886":"code","5f2aba33":"code","41a2f0df":"code","7a3ffd9e":"code","597bb9b6":"code","dd216d44":"code","3ae3540a":"markdown","90757d34":"markdown","d042e3c1":"markdown"},"source":{"c62626d5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","341bc8d2":"train = pd.read_csv('\/kaggle\/input\/nmlo-contest-1\/train.csv')","9af00b54":"test = pd.read_csv('\/kaggle\/input\/nmlo-contest-1\/test.csv')","5cd94fea":"train.info()","717fe9e3":"test.info()","bef74ebf":"train.head()","8044f108":"train.describe()","8c867c75":"train[['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active']] = \\\ntrain[['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active']].astype('category')","c4eb605b":"train.dtypes","6af89bce":"import matplotlib.pyplot as plt","9bc88730":"fig, axes = plt.subplots(5, figsize = (10,30))\nfor ax,col in enumerate(['cholesterol', 'smoke', 'active', 'alco', 'gluc']):\n    sns.countplot(hue=col, x = 'cardio', data = train, ax = axes[ax])","c3ec0964":"sns.relplot(x= 'height', y = 'weight', hue = 'cardio', data = train)","7fd43977":"sns.boxplot(x='cardio', y = 'age', data = train)","627dedca":"sns.relplot(x= 'ap_hi', y = 'ap_lo', hue = 'cardio', data = train)","353c2ba1":"sns.relplot(x= 'ap_hi', y = 'ap_lo', hue = 'cardio', data = train[(train.ap_lo < 200) & (train.ap_hi < 200)])","e3fb5f0c":"train.loc[train.ap_hi <= 20, 'ap_hi'] = train.loc[train.ap_hi <= 20, 'ap_hi'] * 10\ntrain.loc[train.ap_lo >= 5000, 'ap_lo'] = train.loc[train.ap_lo >= 5000, 'ap_lo'] \/ 100\ntrain.loc[train.ap_lo >= 1000, 'ap_lo'] = train.loc[train.ap_lo >= 1000, 'ap_lo'] \/ 10\ntrain.drop(train[train.ap_lo>5000].index, axis = 0,inplace = True)\ntrain.drop(train[train.ap_hi>5000].index, axis = 0,inplace = True)\ntrain.drop(train[train.ap_lo<50].index, axis = 0,inplace = True)\ntrain.loc[train.ap_hi >= 300, 'ap_hi'] = train.loc[train.ap_hi >= 300, 'ap_hi'] \/ 10\ntrain.loc[train.ap_lo == 710, 'ap_lo'] = train.loc[train.ap_lo == 710, 'ap_lo'] \/ 10","6b76f2b9":"# Change ap_lo and ap_hi, if ap_lo > ap_hi\nindexes = train.loc[train.ap_lo > train.ap_hi, 'ap_lo'].index\ntrain.loc[indexes, 'ap_lo'], train.loc[indexes, 'ap_hi'] = \\\ntrain.loc[indexes, 'ap_hi'], train.loc[indexes, 'ap_lo']","6ff8dc7c":"sns.relplot(x= 'ap_hi', y = 'ap_lo', hue = 'cardio', data = train);","be697552":"train.isnull().sum()","e6c9bc6d":"sns.relplot(x= 'ap_hi', y = 'ap_lo', data = test)","d08f70b5":"test.loc[test.ap_lo > 9000,'ap_lo'] = test.loc[test.ap_lo > 9000,'ap_lo'] \/ 100\ntest.loc[test.ap_hi > 9000,'ap_hi'] = test.loc[test.ap_hi > 9000,'ap_hi'] \/ 100\ntest.loc[test.ap_lo > 600,'ap_lo'] = test.loc[test.ap_lo > 600,'ap_lo'] \/ 10\ntest.loc[test.ap_hi > 600,'ap_hi'] = test.loc[test.ap_hi > 600,'ap_hi'] \/ 10\ntest.loc[test.ap_hi < 25, 'ap_hi'] = test.loc[test.ap_hi < 25, 'ap_hi'] * 10\ntest.loc[test.ap_lo < 25, 'ap_lo'] = 60","c3300855":"# Change ap_lo and ap_hi, if ap_lo > ap_hi\nindexes = test.loc[test.ap_lo > test.ap_hi, 'ap_lo'].index\ntest.loc[indexes, 'ap_lo'], test.loc[indexes, 'ap_hi'] = \\\ntest.loc[indexes, 'ap_hi'], test.loc[indexes, 'ap_lo']","875185b9":"from sklearn.model_selection import train_test_split","012ad2fe":"y = train.cardio\nX = train.drop(columns = 'cardio')","9265309c":"X_train, X_test, y_train, y_test = train_test_split(X, y, shuffle= True, test_size=0.33, random_state=42)","90e3a7b1":"X_train.info()","ddc30201":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV","a19dc865":"rfc = RandomForestClassifier()","f6bf0116":"params = {'n_estimators': [30,50,70,100],\n         'max_depth': [3,5,7,10,15,20],\n         'min_samples_split': [3,5,10,20]}","8f592718":"clf = GridSearchCV(rfc, params)\nclf.fit(X_train, y_train)","c99695d5":"clf.best_score_","c8d9b026":"best_rcf = clf.best_estimator_","ef582886":"from sklearn.metrics import accuracy_score","5f2aba33":"X_test.info()","41a2f0df":"test_predict = best_rcf.predict(X_test)","7a3ffd9e":"accuracy_score(y_test, test_predict)","597bb9b6":"predict = best_rcf.predict(test.drop(columns = 'id'))","dd216d44":"submission = pd.DataFrame ({'id': test.index,\n                           'cardio': predict})\nsubmission.to_csv('submission.csv',index=False)","3ae3540a":"## Model","90757d34":"## Testset preparing","d042e3c1":"## Trainset preparing"}}