{"cell_type":{"64183442":"code","27da4fbd":"code","8af4007e":"code","3864e345":"code","874341a3":"code","feec0b9c":"code","78ef8b55":"code","eaa5c59f":"code","d3083fcf":"code","c03772df":"markdown","cae3847d":"markdown","8206c5df":"markdown"},"source":{"64183442":"guessed = 0 # this is how many pets you saw\ncorrect = 0 # this is how many times you (human) predicted correctly","27da4fbd":"# DATA PREPARATION (JUST RUN FIRST TIME)\nimport pandas as pd\nimport numpy as np\nimport json\ntrain = pd.read_csv(\"..\/input\/train\/train.csv\")\nbreed=pd.read_csv('..\/input\/breed_labels.csv')\nbreedmap = breed.set_index(\"BreedID\").drop(\"Type\", axis=1).to_dict()['BreedName']\ntrain['Breed1'] = train['Breed1'].map(breedmap)\ntrain['Breed2'] = train['Breed2'].map(breedmap)\ncolor=pd.read_csv('..\/input\/color_labels.csv')\ncolormap = color.to_dict()['ColorName']\nfor c in ['Color1', 'Color2', 'Color3']:\n    train[c] = train[c].map(colormap)\nstate=pd.read_csv('..\/input\/state_labels.csv')\nstatemap = state.set_index(\"StateID\").to_dict()['StateName']\nc='State'\ntrain[c] = train[c].map(statemap)\ntrain['Type'] = train['Type'].map({2:'Cat',1:'Dog'})\nmmap = {1:'Yes',2:'No',3:'not sure'}\nfor c in ['Vaccinated', 'Dewormed', 'Sterilized']:\n    train[c] = train[c].map(mmap)\ntrain['Health'] = train['Health'].map({0:\"NA\",1:\"Healthy\",2:\"Minor Injury\",3:\"Serious Injury\"})","8af4007e":"pets=train.iterrows()","3864e345":"# RUN THIS TO LOAD NEXT PET EVERY TIME\nimport os, re\ndef purge(dir, pattern):\n    for f in os.listdir(dir):\n        if re.search(pattern, f):\n            os.remove(os.path.join(dir, f))\npurge('.', 'image*') # delete previous images\nfrom PIL import Image, ImageDraw\npet = next(pets)[1]\nID,index = pet['PetID'],str(int(pet['PhotoAmt']))\nimages = []\nfor i in range(int(pet['PhotoAmt'])):\n    annotations = json.load(open(\"..\/input\/train_metadata\/\"+ID+\"-\"+index+\".json\"))\n    vects = annotations['cropHintsAnnotation']['cropHints'][0]['boundingPoly']['vertices']\n    for vect in vects:\n        for k in ['x', 'y']:\n            if vect.get(k) is None:\n                vect[k] = 0\n    im = Image.open(\"..\/input\/train_images\/\"+ID+\"-\"+str(i + 1)+\".jpg\")\n    draw = ImageDraw.Draw(im)\n    draw.polygon([\n    vects[0]['x'], vects[0]['y'],\n    vects[1]['x'], vects[1]['y'],\n    vects[2]['x'], vects[2]['y'],\n    vects[3]['x'], vects[3]['y']], None, 'red')\n    im.save('image'+str(i)+'.jpg', 'JPEG')    \n    images.append(im)","874341a3":"# RUN THIS TO SHOW IMAGE\nfrom matplotlib import pyplot as plt\nplt.figure(figsize=(30,10))\nfor i, im in enumerate(images):\n    if i > 8: break\n    plt.subplot('1'+str(min(9, len(images)))+str(i + 1))\n    plt.imshow(np.asarray(im))","feec0b9c":"pd.DataFrame(pet).transpose().drop('AdoptionSpeed', axis=1)","78ef8b55":"pet['Description']","eaa5c59f":"guess = 1 # GUESS ADOPTION SPEED HERE\nreal = int(pet['AdoptionSpeed'])\nprint(real)\nguessed += 1\nif guess == real: correct += 1","d3083fcf":"print(\"HUMAN ACCURACY SCORE: \"+str(correct\/guessed))","c03772df":"<p><b>What? <\/b>I implemented in this notebook a <b>CLASSIFICATION GAME<\/b> for petfinder.my challange.<\/p>\n<p><b>How?<\/b> Just run the notebook and you will iteratevly will get a pet with all the info (human readable). You can predict the adoption rate based on your personal judgement and check your HUMAN ACCURACY SCORE<\/p>\n<p><b>Why?<\/b> You can build a feeling on the dataset and feature interactions, plus you can add your own features and validate them in a non-statistical but intuitive sense. You could also 'observe' your brain decision process and try to get insights from there.<\/p>","cae3847d":"1. You are welcome to improve this thing, for instance add weighted-K score, add encoded features, or other popular features from other kernels.\n2. Put your score in the comments !","8206c5df":"<h1>HUMAN CLASSIFIER<\/h1>"}}