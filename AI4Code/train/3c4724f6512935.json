{"cell_type":{"52208ee4":"code","04ae9adb":"code","6d7503a4":"code","3fde98af":"code","7100adb5":"code","4f6fe031":"code","1e2c5dab":"code","658efd24":"code","ff09f1f9":"code","b9551b9e":"code","433b7162":"code","f67b88f5":"code","ca3d4a49":"code","e4bd41d8":"code","ad6f33c0":"code","2dc30456":"code","e8de68e9":"code","3031d617":"code","feaae4d2":"code","c2ecf06e":"code","fdafe170":"code","538d7cda":"markdown","b21a0ae1":"markdown","7548f8d5":"markdown"},"source":{"52208ee4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, classification_report\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","04ae9adb":"df = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')","6d7503a4":"df.head()","3fde98af":"df.info()","7100adb5":"categorical_col = ['sex','cp','fbs','restecg','slope','exang','ca','thal']\nnumer_col = df.columns.drop(categorical_col+['target'])","4f6fe031":"sns.set_theme(style=\"darkgrid\")\nsns.countplot(x='target',data=df)\nplt.xlabel(\"Target (0 = False, 1 = True)\")\nplt.show()","1e2c5dab":"fig, axes = plt.subplots(1, 4, figsize=(20, 5))\nfor i,col in enumerate(['age','trestbps','chol','thalach']):\n    sns.histplot(ax = axes[i], data=df,x=col,hue='target',kde=True)","658efd24":"df.drop('target',axis=1).corrwith(df.target).plot.bar()","ff09f1f9":"data = pd.get_dummies(df,columns=categorical_col)\ndata.head()","b9551b9e":"scaler = StandardScaler()\ndata[numer_col] = scaler.fit_transform(data[numer_col])\ndata.head()","433b7162":"X_train,X_test,y_train,y_test = train_test_split(data.drop('target',axis=1),data.target,test_size=0.2,random_state=42)","f67b88f5":"lreg_model = LogisticRegression(solver='liblinear')\nlreg_model.fit(X_train,y_train)\n\ny_pred = lreg_model.predict(X_test)\nprint(classification_report(y_test,y_pred))\nprint('Test Accuracy {:.4f}'.format(accuracy_score(y_test,y_pred)))\n# print('Precision {:.4f}'.format(precision_score(y_test,lreg_model.predict(X_test))))\n# print('Recall {:.4f}'.format(recall_score(y_test,lreg_model.predict(X_test))))","ca3d4a49":"knn_model = KNeighborsClassifier()\nknn_model.fit(X_train, y_train)\n\ny_pred = knn_model.predict(X_test)\nprint(classification_report(y_test,y_pred))\nprint('Test Accuracy {:.4f}'.format(accuracy_score(y_test,y_pred)))","e4bd41d8":"decisiontree_model = DecisionTreeClassifier(random_state=42)\ndecisiontree_model.fit(X_train, y_train)\n\ny_pred = decisiontree_model.predict(X_test)\nprint(classification_report(y_test,y_pred))\nprint('Test Accuracy {:.4f}'.format(accuracy_score(y_test,y_pred)))","ad6f33c0":"randomforest_model = RandomForestClassifier(n_estimators=1000, random_state=42)\nrandomforest_model.fit(X_train, y_train)\n\ny_pred = randomforest_model.predict(X_test)\nprint(classification_report(y_test,y_pred))\nprint('Test Accuracy {:.4f}'.format(accuracy_score(y_test,y_pred)))","2dc30456":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping\nimport matplotlib.pyplot as plt","e8de68e9":"def create_model(input_shape):\n    return Sequential([\n        Dense(64,activation='relu',input_dim=input_shape),\n        Dropout(0.2),\n        Dense(128,activation='relu'),\n        Dropout(0.2),\n        Dense(64,activation='relu'),\n        Dropout(0.2),\n        Dense(1,activation='sigmoid')\n    ])","3031d617":"tf_model = create_model(X_train.shape[1])\ntf_model.summary()","feaae4d2":"early_stopping = EarlyStopping(monitor='val_loss',verbose=0,patience=8,restore_best_weights=True)\ntf_model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\nhistory = tf_model.fit(X_train, y_train, batch_size = 16, epochs = 20,\n                       validation_data=(X_test, y_test),\n                       callbacks=[early_stopping],\n                       verbose=2)","c2ecf06e":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\n\nplt.plot(epochs, acc, 'b', label='Training acc')\nplt.plot(epochs, val_acc, 'g', label='Validation acc')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.title('Training and validation accuracy')\nplt.legend()","fdafe170":"tf_model.evaluate(X_test, y_test)","538d7cda":"<ol>\n    <li>age<\/li>\n    <li>sex<\/li>\n    <li>cp = chest pain type (4 values)<\/li>\n    <li>trestbps = resting blood pressure<\/li>\n    <li>chol = serum cholestoral in mg\/dl<\/li>\n    <li>fbs = fasting blood sugar > 120 mg\/dl (0 = false, 1 = true)<\/li>\n    <li>restecq = resting electrocardiographic results (values 0,1,2)<\/li>\n    <li>thalach = maximum heart rate achieved<\/li>\n    <li>exang = exercise induced angina<\/li>\n    <li>oldpeak = ST depression induced by exercise relative to rest<\/li>\n    <li>slope = the slope of the peak exercise ST segment (0,1,2)<\/li>\n    <li>ca = number of major vessels (0-3) colored by flourosopy<\/li>\n    <li>thal = (3 = normal; 6 = fixed defect; 7 = reversable defect)<\/li>\n    <li>target = (0 = no disease; 1 = has hear disease)<\/li>\n<\/ol>","b21a0ae1":"Age might be a factor in influencing the y label","7548f8d5":"Spilt data into categorical columns and numerical columns for preprocessing"}}