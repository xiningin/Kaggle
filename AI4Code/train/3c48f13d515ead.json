{"cell_type":{"f11aa0fe":"code","b2a7041f":"code","2f345a3f":"code","78a5c5c5":"code","d9716a95":"code","7e1b4e6f":"code","17974979":"code","31e55093":"code","5841c3ce":"code","b7e75211":"code","f6610a48":"code","dcf8b512":"code","3b64fce4":"code","54066c35":"code","8c4de009":"code","6682a1a1":"code","779d6947":"code","5f18b5d9":"code","02b4cf66":"code","53e9f3c6":"markdown","9a7f2771":"markdown","1e51adbf":"markdown","3c137a1f":"markdown","15b30883":"markdown","193d9224":"markdown","be06e46c":"markdown","d4f60033":"markdown","a0e12ffc":"markdown","acbc9d83":"markdown","6ab82a5d":"markdown","87913ca9":"markdown"},"source":{"f11aa0fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b2a7041f":"import lightgbm as lgb\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt\n%matplotlib inline","2f345a3f":"train_df = pd.read_csv(\"..\/input\/ds2019uec-task1\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/ds2019uec-task1\/test.csv\")","78a5c5c5":"# train_df.head()","d9716a95":"# test_df.head()","7e1b4e6f":"train = train_df.copy()\ntest = test_df.copy()","17974979":"encoders = dict()\nfor col in [\"job\", \"marital\", \"education\", \"default\", \"housing\", \"loan\", \"contact\", \"month\", \"poutcome\"]:\n    le = preprocessing.LabelEncoder()\n    le.fit(pd.concat([train_df[col], test_df[col]], axis=0))\n    train[col] = le.transform(train_df[col])\n    test[col] = le.transform(test_df[col])\n    encoders[col] = le","31e55093":"train[\"y\"] = (train_df[\"y\"] == \"yes\").astype(np.int)","5841c3ce":"# train.head()","b7e75211":"train_data = lgb.Dataset(train.drop(\"y\", axis=1), label=train[\"y\"])","f6610a48":"param = {'num_leaves': 31, 'objective': 'binary'}\nparam['verbose'] = -1\nparam['metric'] = 'auc'","dcf8b512":"cv_result = lgb.cv(param, train_data, 50, nfold=5, verbose_eval=False)","3b64fce4":"np.array(cv_result[\"auc-mean\"]).argmax()","54066c35":"bst = lgb.train(param, train_data, 42)","8c4de009":"# lgb.plot_importance(bst, figsize=(12, 6))","6682a1a1":"ypred = bst.predict(test)","779d6947":"sub = pd.read_csv(\"..\/input\/ds2019uec-task1\/sample_submission.csv\")\nsub[\"pred\"] = ypred\nsub.to_csv(\"sample_lgbm.csv\", index=False)","5f18b5d9":"# train_y_pred = bst.predict(train.drop(\"y\", axis=1))\n# plt.hist(train_y_pred)","02b4cf66":"# plt.hist(ypred)","53e9f3c6":"\uff08\u30c0\u30e1\uff09\u4e88\u6e2c\u5024\u306e\u5206\u5e03\u306e\u78ba\u8a8d\u306f\u30c7\u30d0\u30c3\u30b0\u306b\u6709\u52b9\u3089\u3057\u3044\u304c\u3001\u79c1\u306f\u5931\u6557\u3057\u306a\u3044\u306e\u3067\u898b\u306a\u3044","9a7f2771":"# \u524d\u51e6\u7406","1e51adbf":"\u30ab\u30c6\u30b4\u30ea\u30fc\u5909\u6570\uff08\u6587\u5b57\u3067\u5165\u3063\u3066\u3044\u308b\u5909\u6570\uff09\u3092encode  \ntest\u3082\u304f\u3063\u3064\u3051\u3066\u3057\u307e\u3046\u306e\u306f\u3001test\u3067\u65b0\u767b\u5834\u306e\u30ab\u30c6\u30b4\u30ea\u3067\u3082\u5bfe\u5fdc\u3059\u308b\u305f\u3081\uff08\u73fe\u5b9f\u7684\u306b\u306f\u30a8\u30e9\u30fc\u51fa\u3057\u3066\u6c17\u3065\u304f\u306e\u3082\u30a2\u30ea\uff09  \n\u3053\u306e\u51e6\u7406\u3067\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u6574\u6570\u306b\u7121\u7406\u3084\u308a\u5909\u63db\u3059\u308b\uff08label encoding\uff09  \n\u672c\u5bb6: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.LabelEncoder.html  \n  \npandas\u306eget_dummies\u3067\u3082\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u6570\u5024\u306b\u5909\u63db\u3067\u304d\u308b\u304c\u3001\u3053\u3063\u3061\u306f\u5927\u91cf\u306e0-1\u3092\u4f5c\u6210\u3059\u308b(one-hot encoding)  \nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.get_dummies.html  \nsklearn\u306eOneHotEncoder\u3068\u3044\u3046\u3082\u306e\u3082\u3042\u308b  \nhttps:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.OneHotEncoder.html  \n\n\u3053\u3063\u3061\u306e\u65b9\u304c\u672c\u6765\u5b58\u5728\u3057\u306a\u3044\u9806\u5e8f\u3092\u52a0\u3048\u306a\u3044\u3068\u3044\u3046\u610f\u5473\u3067\u306f\u60c5\u5831\u3092\u30ed\u30b9\u3057\u306a\u3044\u306e\u3060\u304c\u3001\u30ab\u30c6\u30b4\u30ea\u6570\u3060\u3051\u5217\u304c\u5897\u3048\u308b\u306e\u3067\u4e00\u9577\u4e00\u77ed  \n\u4f8b\u3048\u3070\u300c\u90fd\u9053\u5e9c\u770c\u300d\u7a0b\u5ea6\u306a\u308947\u5217\u306a\u306e\u3067\u307e\u3060\u3044\u3044\u304c\u3001\u300c\u5e02\u753a\u6751\u300d\u3068\u304b\u3067\u3084\u308b\u3068\u3072\u3069\u3044\u3053\u3068\u306b\u306a\u308b  \n\uff08\u3057\u304b\u3082\u65b0\u30ab\u30c6\u30b4\u30ea\u30fc\u304c\u3069\u3093\u3069\u3093\u304f\u308b\u306f\u305a\u3060\u304b\u3089\u904b\u7528\u3067\u304d\u306a\u3044\u3088\u306d\uff09    \n  \nLightGBM\u3060\u3068label encoding\u3057\u3066\u304a\u3044\u3066\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3060\u3068\u6307\u5b9a\u3059\u308c\u3070\u3088\u3057\u306a\u306b\u6271\u3063\u3066\u304f\u308c\u308b  ","3c137a1f":"\uff08\u30c0\u30e1\uff09 \u691c\u8a3c\u30c7\u30fc\u30bf\u306f5 fold cross validation\u3060\u304b\u3089\u3001\u3053\u308c\u3067\u306a\u3093\u3067\u3082\u5927\u4e08\u592b","15b30883":"# \u30e2\u30c7\u30eb\u69cb\u7bc9","193d9224":"\u3082\u3057\u7de8\u96c6\u4e2d\u306a\u3089\u3001\u30b3\u30fc\u30c9\u3092Commit\u3059\u308b\u3068\u51e6\u7406\u304c\uff11\u304b\u3089\u6d41\u308c\u3066\u3001GUI\u3067\u6295\u7a3f\u3067\u304d\u307e\u3059","be06e46c":"\uff08\u30c0\u30e1\uff09\u30e2\u30c7\u30eb\u306e\u5909\u6570\u91cd\u8981\u5ea6\u3068\u304b\u3042\u308b\u3089\u3057\u3044\u3051\u3069\u3001\u9762\u5012\u306a\u306e\u3067\u898b\u306a\u3044","d4f60033":"### \u601d\u8003\u505c\u6b62\u3057\u3066LightGBM\u3067\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u3053\u308c\u306f\u60aa\u3044\u898b\u672c\u3067\u3059\u3002\u3053\u308c\u3092\u76f4\u3059\u306e\u304c\u4eca\u65e5\u306e\u8ab2\u984c\u3067\u3059","a0e12ffc":"\uff08\u30c0\u30e1\uff09 head\u306f\u30b5\u30f3\u30d7\u30eb\u306b\u3042\u3063\u305f\u3051\u3069\u3069\u3046\u305b\u898b\u306a\u3044\u304b\u3089\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3001\u57fa\u790e\u96c6\u8a08\u306f\u304b\u3063\u3053\u60aa\u3044\u306e\u3067\u3084\u3089\u306a\u3044","acbc9d83":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","6ab82a5d":"round42\u304cbest\u306a\u306e\u3067\u3001\u5168\u30c7\u30fc\u30bf\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u3057\u3066\u540c\u3058\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067\u518d\u5b66\u7fd2\u3059\u308b  \n\u6700\u8fd1\u3067\u306fcv\u3067\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u3092\u305d\u306e\u307e\u307etest\u306b\u9069\u7528\u3057\u3066\u5e73\u5747\u3092\u3068\u308b\uff08\u4f8b\u3048\u30705-fold cv\u306a\u30895\u500b\u5e73\u5747\uff09\u4eba\u3082\u591a\u3044\u3001  \n\u3069\u3061\u3089\u304c\u9ad8\u7cbe\u5ea6\u304b\u306f\u4e00\u822c\u7684\u306b\u306f\u3044\u3048\u306a\u3044\u304c\u3001\u65e5\u5e38\u751f\u6d3b\u3067\u306f\u6c17\u306b\u306a\u3089\u306a\u3044\u5dee  ","87913ca9":"# \u4e88\u6e2c\u5024\u306e\u4ed8\u4e0e\u3001submit"}}