{"cell_type":{"adad15e3":"code","225be35d":"code","369e17a3":"code","054c7d60":"code","361ea13f":"code","f111186e":"code","3bb00d0b":"code","060501af":"code","bb77581a":"code","4823db7f":"code","5720a7ba":"code","f0404c91":"code","37a19b18":"code","e4d44f25":"code","5c1d011b":"code","ce22aebd":"markdown","2af5dfee":"markdown"},"source":{"adad15e3":"import numpy as np\nimport pandas as pd\n\nimport optuna\n\nimport tensorflow as tf\nfrom tensorflow import keras\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.callbacks import LearningRateScheduler, ReduceLROnPlateau\nfrom tensorflow.keras.optimizers.schedules import ExponentialDecay\n\nfrom sklearn.metrics import mean_absolute_error as mae\nfrom sklearn.preprocessing import RobustScaler, normalize\nfrom sklearn.model_selection import train_test_split, GroupKFold, KFold\n\nfrom IPython.display import display","225be35d":"seed = 2021\n\nDEBUG = True\nDEBUG_samples = 1000\nEPOCH = 300\nBATCH_SIZE = 1024\nNUM_FOLDS = 10\nexp_1_fold = True\n\n# train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\n# test = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\ntrain = np.load(r\"..\/input\/gventpreprocessed-ft-fp32\/train_fp32.npy\")\ntest = np.load(r\"..\/input\/gventpreprocessed-ft-fp32\/test_fp32.npy\")\ntargets = np.load(r\"..\/input\/gventpreprocessed-ft-fp32\/targets_fp32.npy\")\nsubmission = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')\n\nif DEBUG:\n    train = train[:DEBUG_samples]\n    targets = targets[:DEBUG_samples]","369e17a3":"train.shape","054c7d60":"def add_features(df):\n    df['last_value_u_in'] = df.groupby('breath_id')['u_in'].transform('last')\n    \n    df['area'] = df['time_step'] * df['u_in']\n    df['area'] = df.groupby('breath_id')['area'].cumsum()\n    \n    df['u_in_cumsum'] = (df['u_in']).groupby(df['breath_id']).cumsum()\n    df['time_step_cumsum'] = df.groupby(['breath_id'])['time_step'].cumsum()\n    \n    df['u_in_lag1'] = df.groupby('breath_id')['u_in'].shift(1)\n    df['u_out_lag1'] = df.groupby('breath_id')['u_out'].shift(1)\n    df['u_in_lag_back1'] = df.groupby('breath_id')['u_in'].shift(-1)\n    df['u_out_lag_back1'] = df.groupby('breath_id')['u_out'].shift(-1)\n    df['u_in_lag2'] = df.groupby('breath_id')['u_in'].shift(2)\n    df['u_out_lag2'] = df.groupby('breath_id')['u_out'].shift(2)\n    df['u_in_lag_back2'] = df.groupby('breath_id')['u_in'].shift(-2)\n    df['u_out_lag_back2'] = df.groupby('breath_id')['u_out'].shift(-2)\n    df['u_in_lag3'] = df.groupby('breath_id')['u_in'].shift(3)\n    df['u_out_lag3'] = df.groupby('breath_id')['u_out'].shift(3)\n    df['u_in_lag_back3'] = df.groupby('breath_id')['u_in'].shift(-3)\n    df['u_out_lag_back3'] = df.groupby('breath_id')['u_out'].shift(-3)\n    df['u_in_lag4'] = df.groupby('breath_id')['u_in'].shift(4)\n    df['u_out_lag4'] = df.groupby('breath_id')['u_out'].shift(4)\n    df['u_in_lag_back4'] = df.groupby('breath_id')['u_in'].shift(-4)\n    df['u_out_lag_back4'] = df.groupby('breath_id')['u_out'].shift(-4)\n    df['u_in_lag_back10'] = df.groupby('breath_id')['u_in'].shift(-10)\n    df['u_out_lag_back10'] = df.groupby('breath_id')['u_out'].shift(-10)\n    df = df.fillna(0)\n    \n    df['u_in_first'] = df.groupby('breath_id')['u_in'].first()\n    df['u_out_first'] = df.groupby('breath_id')['u_out'].first()\n    \n    ## time since last step\n    df['time_step_diff'] = df.groupby('breath_id')['time_step'].diff().fillna(0)\n    ### rolling window ts feats\n    df['ewm_u_in_mean'] = (df\n                           .groupby('breath_id')['u_in']\n                           .ewm(halflife=9)\n                           .mean()\n                           .reset_index(level=0,drop=True))\n    df['ewm_u_in_std'] = (df\n                          .groupby('breath_id')['u_in']\n                          .ewm(halflife=10)\n                          .std()\n                          .reset_index(level=0,drop=True)) ## could add covar?\n    df['ewm_u_in_corr'] = (df\n                           .groupby('breath_id')['u_in']\n                           .ewm(halflife=15)\n                           .corr()\n                           .reset_index(level=0,drop=True)) # self umin corr\n    \n    df[[\"15_in_sum\",\"15_in_min\",\"15_in_max\",\"15_in_mean\",\"15_out_std\"]] = (df\n                                                                              .groupby('breath_id')['u_in']\n                                                                              .rolling(window=15,min_periods=1)\n                                                                              .agg({\"15_in_sum\":\"sum\",\n                                                                                    \"15_in_min\":\"min\",\n                                                                                    \"15_in_max\":\"max\",\n                                                                                    \"15_in_mean\":\"mean\",\n                                                                                    \"15_in_std\":\"std\"})\n                                                                              .reset_index(level=0,drop=True))\n    \n    df[[\"45_in_sum\",\"45_in_min\",\"45_in_max\",\"45_in_mean\",\"45_out_std\"]] = (df\n                                                                              .groupby('breath_id')['u_in']\n                                                                              .rolling(window=45,min_periods=1)\n                                                                              .agg({\"45_in_sum\":\"sum\",\n                                                                                    \"45_in_min\":\"min\",\n                                                                                    \"45_in_max\":\"max\",\n                                                                                    \"45_in_mean\":\"mean\",\n                                                                                    \"45_in_std\":\"std\"})\n                                                                              .reset_index(level=0,drop=True))\n    \n    df[[\"15_out_mean\"]] = (df\n                           .groupby('breath_id')['u_out']\n                           .rolling(window=15,min_periods=1)\n                           .agg({\"15_out_mean\":\"mean\"})\n                           .reset_index(level=0,drop=True))\n    \n    df = df.fillna(0)\n    \n    df['breath_id__u_in__max'] = df.groupby(['breath_id'])['u_in'].transform('max')\n    df['breath_id__u_out__max'] = df.groupby(['breath_id'])['u_out'].transform('max')\n    \n    df['breath_id__u_out__mean'] =df.groupby(['breath_id'])['u_out'].mean()\n    df['breath_id__u_in__mean'] =df.groupby(['breath_id'])['u_in'].mean()\n\n    df['breath_id__u_in__min'] = df.groupby(['breath_id'])['u_in'].transform('min')\n    df['breath_id__u_out__min'] = df.groupby(['breath_id'])['u_out'].transform('min')\n    \n    df['R_div_C'] = df[\"R\"].div(df[\"C\"])\n    \n    df['R__C'] = df[\"R\"].astype(str) + '__' + df[\"C\"].astype(str)\n    df['u_in_diff1'] = df['u_in'] - df['u_in_lag1']\n    df['u_out_diff1'] = df['u_out'] - df['u_out_lag1']\n    df['u_in_diff2'] = df['u_in'] - df['u_in_lag2']\n    df['u_out_diff2'] = df['u_out'] - df['u_out_lag2']\n    df['u_in_diff3'] = df['u_in'] - df['u_in_lag3']\n    df['u_out_diff3'] = df['u_out'] - df['u_out_lag3']\n    df['u_in_diff4'] = df['u_in'] - df['u_in_lag4']\n    df['u_out_diff4'] = df['u_out'] - df['u_out_lag4']\n    \n    df['u_in_diff_1_2'] = df['u_in_lag1'] - df['u_in_lag2']\n    df['u_out_diff_1_2'] = df['u_out_lag1'] - df['u_out_lag2']\n    df['u_in_lagback_diff_1_2'] = df['u_in_lag_back1'] - df['u_in_lag_back2']\n    df['u_out_lagback_diff_1_2'] = df['u_out_lag_back1'] - df['u_out_lag_back2']\n    \n    df['u_in_lagback_diff1'] = df['u_in'] - df['u_in_lag_back1']\n    df['u_out_lagback_diff1'] = df['u_out'] - df['u_out_lag_back1']\n    df['u_in_lagback_diff2'] = df['u_in'] - df['u_in_lag_back2']\n    df['u_out_lagback_diff2'] = df['u_out'] - df['u_out_lag_back2']\n    \n    df.loc[df['time_step'] == 0, 'u_in_diff'] = 0\n    df.loc[df['time_step'] == 0, 'u_out_diff'] = 0\n    \n    df['breath_id__u_in__diffmax'] = df.groupby(['breath_id'])['u_in'].transform('max') - df['u_in']\n    df['breath_id__u_in__diffmean'] = df.groupby(['breath_id'])['u_in'].transform('mean') - df['u_in']\n    \n    df = df.merge(pd.get_dummies(df['R'], prefix='R'), left_index=True, right_index=True).drop(['R'], axis=1)\n    df = df.merge(pd.get_dummies(df['C'], prefix='C'), left_index=True, right_index=True).drop(['C'], axis=1)\n    df = df.merge(pd.get_dummies(df['R__C'], prefix='R__C'), left_index=True, right_index=True).drop(['R__C'], axis=1)\n    \n    \n    df['u_in_partition_out_sum'] = df.groupby(['breath_id',\"u_out\"])['u_in'].transform(\"sum\")\n    \n    df['cross']= df['u_in']*df['u_out']\n    df['cross2']= df['time_step']*df['u_out']\n    \n#     df['R'] = df['R'].astype(str)\n#     df['C'] = df['C'].astype(str)\n#     df['R__C'] = df[\"R\"].astype(str) + '__' + df[\"C\"].astype(str)\n#     df = pd.get_dummies(df)\n    df = df.fillna(0)\n    return df\n\n# train = add_features(train_ori)\n# test = add_features(test_ori)","361ea13f":"# targets = train[['pressure']].to_numpy().reshape(-1, 80)\n# train.drop(['pressure', 'id', 'breath_id'], axis=1, inplace=True)\n# test = test.drop(['id', 'breath_id'], axis=1)","f111186e":"# RS = RobustScaler()\n# train = RS.fit_transform(train)\n# test = RS.transform(test)","3bb00d0b":"# train = train.reshape(-1, 80, train.shape[-1])\n# test = test.reshape(-1, 80, train.shape[-1])","060501af":"class mish(keras.layers.Layer):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n    def call(self, z):\n        return (z*tf.math.tanh(tf.math.softplus(z)))","bb77581a":"def ventilation_mae_loss(y_true, y_pred, input_tensor, u_out_index=2):\n    w = 1 - tf.expand_dims(input_tensor[:, :, u_out_index], axis=2)\n    mae = w * K.abs(y_true - y_pred)\n    return K.mean(K.sum(mae, axis=-1) \/ K.sum(w, axis=-1))","4823db7f":"def get_model(input_shape):\n    inputs = tf.keras.Input(input_shape)\n    x = keras.layers.Bidirectional(keras.layers.LSTM(1024, return_sequences=True))(inputs)\n    x = keras.layers.Bidirectional(keras.layers.LSTM(512, return_sequences=True))(x)\n    x = keras.layers.Bidirectional(keras.layers.LSTM(256, return_sequences=True))(x)\n    x = keras.layers.Bidirectional(keras.layers.LSTM(128, return_sequences=True))(x)\n    x = keras.layers.Dense(128, activation='selu')(x)\n    outs = keras.layers.Dense(1)(x)\n    targets = tf.keras.Input((80, 1))\n    \n    model = tf.keras.Model([inputs, targets], outs)\n    model.add_loss(ventilation_mae_loss(targets, outs, inputs))\n    model.compile(optimizer=\"adam\", loss=None)\n    return model","5720a7ba":"!pip install wandb -qqq\nimport wandb\nfrom wandb.keras import WandbCallback\nwandb.login()","f0404c91":"name = \"addntl_features\"","37a19b18":"# run.finish()","e4d44f25":"# detect and init the TPU\ntpu = tf.distribute.cluster_resolver.TPUClusterResolver.connect()\n\n# instantiate a distribution strategy\ntpu_strategy = tf.distribute.experimental.TPUStrategy(tpu)\n\nrun = wandb.init(project=\"TF-BiLSTM_0.157_FT\", name=name)\n\nwith tpu_strategy.scope():\n    kf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=seed)\n    test_preds = []\n    for fold, (train_idx, test_idx) in enumerate(kf.split(train, targets)):\n        print('-'*15, '>', f'Fold {fold+1}', '<', '-'*15)\n        X_train, X_valid = train[train_idx], train[test_idx]\n        y_train, y_valid = targets[train_idx], targets[test_idx]\n        \n        model = get_model(input_shape=X_train.shape[-2:])\n        \n        lr = ReduceLROnPlateau(monitor=\"val_loss\", factor=0.5, patience=10, verbose=1)\n    \n        es = EarlyStopping(monitor=\"val_loss\", patience=15, verbose=1, mode=\"min\", restore_best_weights=True)\n\n        checkpoint_filepath = f\"folds{fold}.hdf5\"\n        sv = keras.callbacks.ModelCheckpoint(\n            checkpoint_filepath, monitor='val_loss', verbose=1, save_best_only=True,\n            save_weights_only=False, mode='auto', save_freq='epoch',\n            options=None\n        )\n        \n        print(f\"epochs:{EPOCH} | b_size:{BATCH_SIZE}\", end=\"\\n\")\n        print(f\"{NUM_FOLDS}:Folds | (exp_1_fold:{exp_1_fold}) | seed:{seed} | shuffle:{kf.shuffle}\", end=\"\\n\")\n        print(f\"LR:{lr.__class__} | monitor:{lr.monitor} | factor:{lr.factor} | patience:{lr.patience}\", end=\"\\n\")\n        print(f\"ES:{es.__class__} | monitor:{es.monitor} | patience:{es.patience}\", end=\"\\n\")\n        print(f\"MC:{sv.__class__} | monitor:{sv.monitor}\", end=\"\\n\")\n        model.summary()\n        print(\"\\n\")\n        print(f\"opt:{model.optimizer.__class__} | init_lr:{model.optimizer.learning_rate.numpy()}\", end=\"\\n\\n\")\n        \n        \n        model.fit(x=[X_train, y_train], y=None, validation_data=([X_valid, y_valid], None), epochs=EPOCH, batch_size=BATCH_SIZE, callbacks=[lr, es, sv])\n\n        #test_preds.append(model.predict(test).squeeze().reshape(-1, 1).squeeze())\n        \n        if exp_1_fold: break","5c1d011b":"submission[\"pressure\"] = sum(test_preds)\/5\nsubmission.to_csv('submission.csv', index=False)","ce22aebd":"# Custom Loss Function","2af5dfee":"# Custom Activation Functions"}}