{"cell_type":{"5e8f0eed":"code","5379576e":"code","c206f729":"code","0536504f":"code","d4f744c0":"code","395d0b38":"code","b05c07cc":"code","19b698f7":"code","13a5c4cf":"code","c1dc82ce":"code","c7c98797":"code","9d7d0af3":"code","2bfeabb5":"code","9aa87fa2":"code","cc21b7f4":"code","12db1f9e":"code","fb8641b9":"code","3409ef2e":"code","79095143":"code","a8318e55":"code","50c8c17a":"code","564907a5":"code","18078a1c":"code","7668a633":"code","278f0274":"code","0d925479":"code","30c9d21e":"code","e080c5b1":"code","009e0d6a":"code","eb4f9089":"code","3d806e90":"code","ce5415b9":"code","c0281212":"code","a79e0cfb":"code","33564a3a":"code","00e3d24f":"code","ec4ebdb7":"code","a112d72a":"code","8b3c52d9":"code","e7206b5c":"code","2142af93":"code","701edee9":"code","8904a473":"code","e5e9c373":"code","1d538f7e":"code","c72b15ed":"code","bdfa4a86":"code","71bd41b0":"code","401661bc":"markdown","455bd3f0":"markdown","ac8cdf5d":"markdown","fa1ad332":"markdown","2656f1fe":"markdown","8c774095":"markdown","e779beaa":"markdown","52823c5e":"markdown","b24c5a19":"markdown","ca730d1c":"markdown","a18e9b11":"markdown"},"source":{"5e8f0eed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5379576e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import accuracy_score,recall_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier","c206f729":"train = pd.read_csv(\"..\/input\/loan-prediction-analytics-vidhya\/train_ctrUa4K.csv\")\ntest_og = pd.read_csv(\"..\/input\/loan-prediction-analytics-vidhya\/test_lAUu6dG.csv\")\ntest = pd.read_csv(\"..\/input\/loan-prediction-analytics-vidhya\/test_lAUu6dG.csv\")","0536504f":"train","d4f744c0":"train.drop(['Loan_ID'],axis = 1,inplace = True)\ntest.drop(['Loan_ID'],axis = 1,inplace = True)","395d0b38":"train.shape","b05c07cc":"train.replace(\"3+\",3,inplace = True)\ntest.replace(\"3+\",3,inplace = True)","19b698f7":"train.info()","13a5c4cf":"train.describe()","c1dc82ce":"train.isnull().sum()","c7c98797":"#Replacing Null Values\ntrain['Gender'] = train['Gender'].fillna(train['Gender'].mode()[0])\ntrain['Married'] = train['Married'].fillna(train['Married'].mode()[0])\ntrain['Self_Employed'] = train['Self_Employed'].fillna(train['Self_Employed'].mode()[0])\ntrain['Dependents'] = train['Dependents'].fillna(train['Dependents'].mode()[0])\ntrain['LoanAmount'] = train['LoanAmount'].fillna(train['LoanAmount'].mean())\ntrain['Loan_Amount_Term'] = train['Loan_Amount_Term'].fillna(train['Loan_Amount_Term'].mean())\ntrain['Credit_History'] = train['Credit_History'].fillna(train['Credit_History'].mean())","9d7d0af3":"train.isnull().sum()","2bfeabb5":"train[\"Dependents\"] = train[\"Dependents\"].astype(str).astype(int)      #converting to integer","9aa87fa2":"train.shape","cc21b7f4":"plt.figure(figsize=(10,6))\nsns.countplot(\"Gender\",data = train,hue = \"Loan_Status\")\nprint(train.groupby(\"Gender\")[\"Loan_Status\"].count())","12db1f9e":"plt.figure(figsize=(10,6))\nsns.countplot(\"Dependents\",data = train,hue = \"Loan_Status\")\nprint(train.groupby(\"Dependents\")[\"Loan_Status\"].count())","fb8641b9":"plt.figure(figsize=(10,6))\nsns.countplot((\"Education\"),data = train,hue = \"Loan_Status\")\nprint(train.groupby(\"Education\")[\"Loan_Status\"].count())","3409ef2e":"plt.figure(figsize=(10,6))\nsns.countplot((\"Property_Area\"),data = train,hue = \"Loan_Status\")\nprint(train.groupby(\"Property_Area\")[\"Loan_Status\"].count())","79095143":"plt.figure(figsize = (10,6))\ncorr = train.corr()\nsns.heatmap(corr,annot = True)","a8318e55":"test","50c8c17a":"test.shape","564907a5":"test.info()","18078a1c":"test.describe()","7668a633":"test.isnull().sum()","278f0274":"#Replacing Null Values\ntest['Gender'] = test['Gender'].fillna(test['Gender'].mode()[0])\ntest['Married'] = test['Married'].fillna(test['Married'].mode()[0])\ntest['Self_Employed'] = test['Self_Employed'].fillna(test['Self_Employed'].mode()[0])\ntest['Dependents'] = test['Dependents'].fillna(test['Dependents'].mode()[0])\ntest['LoanAmount'] = test['LoanAmount'].fillna(test['LoanAmount'].mean())\ntest['Loan_Amount_Term'] = test['Loan_Amount_Term'].fillna(test['Loan_Amount_Term'].mean())\ntest['Credit_History'] = test['Credit_History'].fillna(test['Credit_History'].mean())","0d925479":"test[\"Dependents\"] = test[\"Dependents\"].astype(str).astype(int)","30c9d21e":"test.isnull().sum()","e080c5b1":"test.shape","009e0d6a":"#Encoding Categorical Values of train data\nle = LabelEncoder()\ntrain[\"Gender\"] = le.fit_transform(train[\"Gender\"])\ntrain[\"Married\"] = le.fit_transform(train[\"Married\"])\ntrain[\"Education\"] = le.fit_transform(train[\"Education\"])\ntrain[\"Self_Employed\"] = le.fit_transform(train[\"Self_Employed\"])\ntrain[\"Property_Area\"] = le.fit_transform(train[\"Property_Area\"])\ntrain[\"Loan_Status\"] = le.fit_transform(train[\"Loan_Status\"])","eb4f9089":"train","3d806e90":"# Label Encoding Categorical Values of test data\ntest[\"Gender\"] = le.fit_transform(test[\"Gender\"])\ntest[\"Married\"] = le.fit_transform(test[\"Married\"])\ntest[\"Education\"] = le.fit_transform(test[\"Education\"])\ntest[\"Self_Employed\"] = le.fit_transform(test[\"Self_Employed\"])\ntest[\"Property_Area\"] = le.fit_transform(test[\"Property_Area\"])","ce5415b9":"test","c0281212":"x = train.drop(['Loan_Status'],axis = 1)\ny = train['Loan_Status']","a79e0cfb":"#Splitting train data into test and train\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)","33564a3a":"rf = RandomForestClassifier()\nmodel = rf.fit(x_train,y_train)\ny_pred = rf.predict(x_test)\nprint(\"accuracy score is: \",accuracy_score(y_test,y_pred))\nprint(\"recall score is: \",recall_score(y_test,y_pred))\nprint(classification_report(y_test,y_pred))","00e3d24f":"xg = XGBClassifier()\nxg.fit(x_train, y_train)\ny_pred1 = xg.predict(x_test)\nprint(\"accuracy score is: \",accuracy_score(y_test,y_pred1))\nprint(\"recall score is: \",recall_score(y_test,y_pred1))\nprint(classification_report(y_test,y_pred1))","ec4ebdb7":"nb= MultinomialNB()\nnb.fit(x_train,y_train)\ny_pred2 = nb.predict(x_test)\nprint(\"accuracy score is: \",accuracy_score(y_test,y_pred2))\nprint(\"recall score is: \",recall_score(y_test,y_pred2))\nprint(classification_report(y_test,y_pred2))","a112d72a":"knn_classifier = KNeighborsClassifier()\nknn_classifier.fit(x_train,y_train)\ny_pred3 = knn_classifier.predict(x_test)\nprint(\"accuracy score is :\",accuracy_score(y_test,y_pred3))\nprint(\"recall score is: \",recall_score(y_test,y_pred3))\nprint(classification_report(y_test,y_pred3))","8b3c52d9":"gb = GradientBoostingClassifier()\ngb.fit(x_train,y_train)\ny_pred4 = gb.predict(x_test)\nprint(\"accuracy score is :\",accuracy_score(y_test,y_pred4))\nprint(\"recall score is: \",recall_score(y_test,y_pred4))\nprint(classification_report(y_test,y_pred4))","e7206b5c":"cb = CatBoostClassifier(learning_rate= 0.0055)\ncb.fit(x_train,y_train)\ny_pred5 = cb.predict(x_test)\nprint(\"accuracy score is :\",accuracy_score(y_test,y_pred5))\nprint(\"recall score is: \",recall_score(y_test,y_pred4))\nprint(classification_report(y_test,y_pred5))","2142af93":"prediction = model.predict(test)","701edee9":"prediction.shape","8904a473":"def y_n(x):\n    y_n_flag = None\n    if x == 0:\n        y_n_flag = \"N\"\n    if x == 1:\n        y_n_flag = \"Y\"\n    \n    return y_n_flag","e5e9c373":"test_og","1d538f7e":"test_og.drop(test_og.iloc[:,1:12],axis = 1,inplace = True)","c72b15ed":"test_og[\"Loan_Status\"]=prediction","bdfa4a86":"test_og[\"Loan_Status\"]=test_og[\"Loan_Status\"].apply(y_n)","71bd41b0":"test_og","401661bc":"## <center> **KNN Classifier**","455bd3f0":"## <center> **Visualization**","ac8cdf5d":"## <center> **Random Forest**","fa1ad332":"## <center> **Data Preprocessing**","2656f1fe":"## <center> **XGBoost**","8c774095":"##  <center> **EDA**","e779beaa":"## <center> **Checking Test Data**","52823c5e":"## <center> **Naive Bayes**","b24c5a19":"## <center> **CatBoost**","ca730d1c":"#### We can see there is correlation between `LoanAmount` and `ApplicantIncome`\n#### which means if `applicant income` is high `loan amount` issued is high","a18e9b11":"## <Center> Gradient Boost"}}