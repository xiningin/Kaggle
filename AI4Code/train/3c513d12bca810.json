{"cell_type":{"046e4696":"code","a4968906":"code","b9c78579":"code","34c8cacf":"code","53c3269c":"code","e9bb5514":"code","c0bdf14f":"code","8ea26cac":"code","4517989c":"code","455b4bca":"code","7946c3c3":"code","cc98bc2f":"code","18a712fd":"code","379ddf5a":"code","45a03e55":"code","290e3fe4":"code","153997c3":"code","723a88ce":"code","13883f91":"code","cd13a4f0":"markdown","05e4927c":"markdown","88a521ee":"markdown","b23cdcf8":"markdown","6009e0c7":"markdown","1e7528fd":"markdown","adcd4faa":"markdown","372460ae":"markdown","da4be935":"markdown","81578584":"markdown","0d8ce4a9":"markdown","fb064bb2":"markdown","4ad2bf01":"markdown","6a227874":"markdown","9fcb2529":"markdown","87841c6c":"markdown","c06ccc09":"markdown","d45596fd":"markdown","a1c8ccc4":"markdown","4beb1bcc":"markdown"},"source":{"046e4696":"import pandas as pd","a4968906":"pd.set_option('display.max_columns', None)\n\ndf = pd.read_csv(\"..\/input\/cardiovascular-disease-dataset\/cardio_train.csv\", sep = r';')\ndf.head()","b9c78579":"# Appearing data types\ndf.info()","34c8cacf":"# Statistic Overview\ndf.describe()","53c3269c":"import matplotlib.pyplot as plt\nimport numpy as np","e9bb5514":"# Multivariate Analysis & Correlation Detection\nimport seaborn as sb\ncorrel = df.corr()\ncmap = sb.diverging_palette(220, 10, as_cmap = True)\n\nmask = np.zeros_like(correl, dtype = np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nf, ax = plt.subplots(figsize = (16, 12))\n\nsb.heatmap(correl, mask = mask, cmap = cmap, vmax = 0.3, center = 0,annot = True, square = True, linewidths = 0.5, cbar_kws = {\"shrink\": .5});","c0bdf14f":"# Gender Distribution\nfig, ax = plt.subplots(figsize = (14, 10))\nax.set_title('Distribution of Genders (1 - Female; 2 - Male)', fontsize = 20)\nax.set_xlabel(\"Gender\", fontsize = 16)\nax.set_ylabel(\"Number of Occurences\", fontsize = 16)\ndf[\"gender\"].value_counts().plot(ax = ax, kind = \"bar\", color = \"green\")","8ea26cac":"# Height Distribution (Ordered)\nfig, ax = plt.subplots(figsize = (22, 14))\nax.set_title('Distribution of Heights', fontsize = 20)\nax.set_xlabel(\"Height in cm\", fontsize = 16)\nax.set_ylabel(\"Number of Occurences\", fontsize = 16)\ndf[\"height\"].value_counts().plot(ax = ax, kind = \"bar\", color = \"blue\")","4517989c":"num = df[\"smoke\"].value_counts(\"0\")\nnum","455b4bca":"num_ns = 70000 * 0.911871\nnum_s = 70000 * 0.088129\n\nprint(\"There are \" + str(num_ns) + \" Non-Smokers and \" + str(num_s) + \" Smokers in the data set.\")","7946c3c3":"from sklearn.model_selection import train_test_split\n\nX = df.drop([\"smoke\"], axis = 1).values\ny = df[\"smoke\"].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 0, test_size = 0.25)","cc98bc2f":"from sklearn.naive_bayes import GaussianNB\n\nmodel = GaussianNB()\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","18a712fd":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","379ddf5a":"%matplotlib inline\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize = (12, 10))\nplt.scatter(X_train[:,1], X_train[:,4], c = y_train)\nplt.xlabel(\"Age\")\nplt.ylabel(\"Weight\")\nplt.legend([\"Smokers\", \"Non-Smokers\"], loc = \"best\")\nplt.show()","45a03e55":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","290e3fe4":"from sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier(criterion = \"entropy\")\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","153997c3":"from sklearn.ensemble import RandomForestClassifier\n\nmodel = RandomForestClassifier(criterion = \"entropy\")\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test, y_test)","723a88ce":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nscaler.fit(X_train)\n\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","13883f91":"from sklearn.neighbors import KNeighborsClassifier\n\nmodel = KNeighborsClassifier(n_neighbors = 5)\nmodel.fit(X_train, y_train)\n\nprint(model.score(X_test, y_test))","cd13a4f0":"## **Machine Learning**","05e4927c":"# **Cardiovascular Disease - EDA & Machine Learning**","88a521ee":"#### **Decision Tree**","b23cdcf8":"#### Plotting features, correlations & more","6009e0c7":"#### **Gaussian Naive Bayes Algorithm**","1e7528fd":"## **EDA**","adcd4faa":"#### Scaling data","372460ae":"### **Method 1: Naive Bayes**","da4be935":"#### Visualizing","81578584":"### **Binary Classification for Smoker\/Non-Smoker Distinction**","0d8ce4a9":"#### Scaling data","fb064bb2":"### **Method 3: Decision Tree**","4ad2bf01":"#### Loading and Displaying data","6a227874":"**How many Smokers and Non-Smokers are there then?**","9fcb2529":"### **Method 4: Random Forest**","87841c6c":"### **Method 2: Logistic Regression**","c06ccc09":"### **Method 5: K-Nearest-Neighbor Algorithm (KNN)**","d45596fd":"#### **Random Forest Model**","a1c8ccc4":"#### Defining X and y and Splitting data","4beb1bcc":"#### **Logistic Regression**"}}