{"cell_type":{"4b82af2d":"code","c8b40474":"code","76daa6ae":"code","9f0ac1f6":"code","a2a584d8":"code","5344999a":"code","3be401d2":"code","225898e9":"code","3d105c25":"code","33017d26":"code","9cf4f67f":"code","441f8778":"code","35e83c26":"code","47a0b1bb":"code","998e392b":"code","edf9cec5":"code","540ec9ca":"code","bf4ee8a0":"code","d098668c":"code","a258bb4a":"code","7b9f92d5":"code","166066ef":"code","0110c9d5":"code","796975ad":"code","34ed8220":"code","3c4980a3":"code","87d573f2":"code","2b7b6178":"code","e68f3566":"code","97c22b2f":"code","839f1780":"code","fd9efc18":"code","1b98e0ce":"code","2a65cba4":"code","799f2dbb":"code","dd0b149f":"code","7c1d9a95":"code","15dd49a8":"code","152d0a90":"code","fce6abc2":"code","7c7b2117":"code","766e3009":"code","e8ee5f9f":"code","29d6934e":"code","2dd05cb7":"code","922bf1f4":"code","05647899":"code","982c7394":"code","cceba632":"code","fcb91fbb":"code","f71cf464":"code","20f6c798":"markdown","34169b43":"markdown","7d646866":"markdown","9cc424f5":"markdown","8cee311f":"markdown","b376320e":"markdown","7e53359c":"markdown","3076a2c7":"markdown","a9eb9778":"markdown","33d80e8d":"markdown","2feed4d2":"markdown","1ef5acf0":"markdown","837cfd30":"markdown","aa6267e0":"markdown","05f27f41":"markdown","50b6f539":"markdown","04b9b1b4":"markdown","07a9a479":"markdown","bdee6b5e":"markdown","7973b431":"markdown","8208e68d":"markdown","330a390a":"markdown","31adeb4a":"markdown","c8121bb0":"markdown","e5e20def":"markdown","5f2d5f35":"markdown","59121f0e":"markdown","c99378b1":"markdown","1385aade":"markdown","6dc768c1":"markdown","8b36f78a":"markdown","6fabfd3a":"markdown","3b36f840":"markdown","66401511":"markdown","7fbf75aa":"markdown","1af1a5fe":"markdown","ea6b9f40":"markdown","452e1176":"markdown","25563f0e":"markdown","3b7a7e42":"markdown","22c03cae":"markdown","4135038d":"markdown","1b94ebd3":"markdown","ceaef745":"markdown","bcffee2e":"markdown","1bfcf7be":"markdown","b7bbbca8":"markdown","22c0b731":"markdown","4e096bae":"markdown","fafd97d7":"markdown","3afd0223":"markdown","49e980c7":"markdown","083244f4":"markdown","e1a57bbb":"markdown","6630ed4c":"markdown","f6fbef6c":"markdown","5bef23fd":"markdown","9e6fc0ad":"markdown","45f8d5b0":"markdown","ad41069f":"markdown","9fe497dd":"markdown","b4055fb7":"markdown","bd7aab06":"markdown","e6a934b3":"markdown","050b79b6":"markdown","659e2847":"markdown","af8477ec":"markdown","0c2ab960":"markdown","1e0cb47e":"markdown","97de89ec":"markdown","a7dc6bcf":"markdown","60daa43c":"markdown","0517ad84":"markdown","90d264a5":"markdown","88c53a02":"markdown","090d5f7b":"markdown","ebd2716c":"markdown","2cabed93":"markdown","f90ec390":"markdown","e83ca80c":"markdown"},"source":{"4b82af2d":"!pip install sparklines > \/dev\/null","c8b40474":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport plotly.graph_objects as go\n#import networkx as nx\n#from networkx.readwrite import json_graph\nimport csv\nimport json\nfrom pandas.api.types import is_string_dtype, CategoricalDtype\nimport warnings\nimport sys\nimport os\n#from sklearn.preprocessing import MinMaxScaler\nimport datetime\nfrom pandas.tseries.offsets import MonthBegin\nfrom operator import attrgetter\nimport sparklines\nimport base64\nimport copy\nfrom itertools import combinations\nfrom io import BytesIO\nfrom IPython.display import display, HTML, Image\nimport matplotlib.pyplot as plt\nfrom plotly.subplots import make_subplots\nsys.path.append('\/kaggle\/input\/custom-survey-scripts-2021\/')\nimport kaggle_survey_2021 as show\n\npd.set_option('display.MAX_COLUMNS', None)\npd.set_option('display.MAX_ROWS', 5000)\npd.set_option('display.max_colwidth', None)\n\n# path_2021 = r'..\/input\/kaggle-survey-2021'\n# path_2020 = r'..\/input\/kaggle-survey-2020'\n# path_2019 = r'..\/input\/kagglesurvey2019'\n# path_2018 = r'..\/input\/kaggle-survey-2018'","76daa6ae":"cleaned_mcr = show.load_cleaned_data()","9f0ac1f6":"def data_for_sparkline(df, grp_var, max_time='2021',\n                              min_time='2018',\n                              agg_var=None,\n                              is_pct=False,\n                              is_univariate=False, \n                              is_bivariate=False, \n                              period=3, \n                              cust_sparkline=True):\n    \"\"\"\n    Create data for sparkline\n    \"\"\"\n    tmp_df = df.copy()\n    if is_univariate and not agg_var:\n        g = tmp_df.groupby(grp_var).size()\n        if is_pct:\n            g = g.groupby(level=[0]).apply(lambda x: x\/x.sum()).reset_index()\n        else:\n            g = g.reset_index()\n    elif is_bivariate and not agg_var:\n        g = tmp_df.groupby(grp_var).size()\n        if is_pct:\n            g = g.groupby(level=[0, 1]).apply(lambda x: x\/x.sum()).reset_index()\n        else:\n            g = g.reset_index()\n    elif is_univariate and agg_var:\n        g = tmp_df.groupby(grp_var).agg({agg_var: np.sum,})\n        if is_pct:\n            g = g.groupby(level=[0]).apply(lambda x: x\/x.sum()).reset_index().rename(columns={0: 'value'})\n        else:\n            g = tmp_df.groupby(grp_var).agg({agg_var: np.mean,}).reset_index().rename(columns={0: 'value'})\n    elif is_bivariate and agg_var:\n        g = tmp_df.groupby(grp_var).agg({agg_var: np.sum,})\n        if is_pct:\n            g = g.groupby(level=[0, 1]).apply(lambda x: x\/x.sum()).reset_index().rename(columns={0: 'value'})\n        else:\n            g = tmp_df.groupby(grp_var).agg({agg_var: np.mean,}).reset_index().rename(columns={0: 'value'})\n    \n    # grp_mean = g.iloc[:, -1].mean() # compute mean for the last column\n    g['Survey'] = g['Survey'].astype(str)\n    g = g.pivot_table(index=grp_var[:-1], columns='Survey', fill_value=0)\n    g.columns = g.columns.droplevel() # drop usage_value\n    g = g.rename_axis(None, axis=1) # remove usage_month\n    if cust_sparkline:\n        g['trend'] = g.apply(custom_sparkline, axis=1)\n    else:\n        g['trend'] = g.apply(lambda x: sparklines.sparklines(x)[0], axis=1)\n    g['growth'] = np.round((g[max_time] \/ g[min_time]) ** (1\/period) - 1, 2)\n    g['growth'] = g['growth'].replace(np.inf, 0).replace(np.nan, 0)\n    return g","a2a584d8":"def highlight_table(row, threshold=.05):\n    \"\"\"\n    Helper function to highlight cells\n    in a Pandas dataframe\n    \"\"\"\n    if isinstance(row[0], str): return\n    return [\n        'background-color: #FF7F7F; color: white' if cell <= threshold\n        else 'background-color: green; color: white'\n        for cell in row\n    ]","5344999a":"def custom_sparkline(data, figsize=(3, 0.25), **kwags):\n    \"\"\"\n    Create a sparkline chart\n    https:\/\/github.com\/iiSeymour\/sparkline-nb\/blob\/master\/sparkline-nb.ipynb\n    \"\"\"\n    data = list(data)\n    fig, ax = plt.subplots(1, 1, figsize=figsize, **kwags)\n    ax.plot(data)\n    for k, v in ax.spines.items():\n        v.set_visible(False)\n    \n    ax.set_xticks([])\n    ax.set_yticks([])\n    \n    plt.plot(len(data)-1, data[len(data)-1], 'r.', linewidth=2)\n    \n    # ax.fill_between(range(len(data)), data, len(data)*[min(data)], alpha=0.1)\n    \n    img = BytesIO()\n    plt.savefig(img, transparent=True, dpi=100, bbox_inches='tight')\n    # img.seek(0)\n    plt.close()\n    \n    return f'<img src=\"data:image\/png;base64,{base64.b64encode(img.getvalue()).decode()}\"\/>'\n    # return display(HTML(df.to_html(escape=False))","3be401d2":"def subset_sparkline_data(df, obs_var, time='Survey',\n                          agg_var=None,\n                          is_univariate=False,\n                          is_bivariate=False,\n                          is_pct=False,\n                          max_time='2021',\n                          min_time='2018',\n                          period=3\n                         ):\n    \"\"\"\n    Used for subsetting the original dataframe by various\n    dimensions\n    \"\"\"\n    if is_univariate:\n        subset_df = data_for_sparkline(df, [obs_var] + [time], max_time=max_time,\n                                  min_time=min_time,\n                                  agg_var=agg_var,\n                                  is_pct=is_pct,     \n                                  is_univariate=is_univariate, \n                                  is_bivariate=is_bivariate,\n                                  period=period,\n                                  cust_sparkline=False)\n    elif is_bivariate:\n        subset_df = data_for_sparkline(df, obs_var + [time], max_time=max_time,\n                          min_time=min_time,\n                          agg_var=agg_var,\n                          is_pct=is_pct,\n                          is_univariate=is_univariate, \n                          is_bivariate=is_bivariate,\n                          period=period,             \n                          cust_sparkline=False)\n    grad_cols = subset_df.columns.drop(['trend', 'growth']).tolist()\n    return subset_df, grad_cols","225898e9":"def plot_pandas_table(df, obs_var, \n                      is_pct=False,\n                      is_univariate=False, \n                      is_bivariate=False,\n                      sort_field='growth', \n                      agg_var=None,\n                      filter_dim=None,\n                      filter_list=[],\n                      top_n=5,\n                      asc=False,\n                      min_time='2018',\n                      period=3,\n                      is_profession=False,\n                      title=None):\n    \"\"\"\n    Wrapper to subset the data for a particular dimension\n    and to display the table\n    Returns: A styled Pandas Table\n    \"\"\"\n    tbl=None\n    if is_univariate and top_n == 0 and not agg_var:\n        trend_df, grad_cols = subset_sparkline_data(df, obs_var,\n                                                    is_univariate=is_univariate,\n                                                   min_time=min_time,\n                                                   period=period)\n        tbl = trend_df.sort_values([sort_field, obs_var], ascending=[False, True], kind='mergesort').style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_caption(title)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0) \n    elif is_univariate and top_n > 0 and not agg_var:\n        trend_df, grad_cols = subset_sparkline_data(df, obs_var,\n                                                    is_univariate=is_univariate,\n                                                   min_time=min_time,\n                                                   period=period)\n        tbl = trend_df.sort_values([sort_field, obs_var], ascending=[asc, True], kind='mergesort')[:top_n].style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_caption(title)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0) \n    elif is_univariate and agg_var and is_pct:\n        trend_df, grad_cols = subset_sparkline_data(df, obs_var,\n                                                    agg_var=agg_var,\n                                                    is_pct=is_pct,\n                                                    is_univariate=is_univariate,\n                                                   min_time=min_time,\n                                                   period=period)\n        tbl = trend_df.sort_values([sort_field, obs_var], ascending=[asc, True], kind='mergesort')[:top_n].style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .format('{:.1%}', subset=grad_cols)\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_caption(title)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0) \n    elif is_univariate and agg_var and not is_pct:\n        if len(filter_list) > 0:\n            subset_df = df[~df[obs_var].isin(filter_list)].copy()\n        else:\n            subset_df = df.copy()\n        trend_df, grad_cols = subset_sparkline_data(subset_df, obs_var,\n                                                    agg_var=agg_var,\n                                                    is_pct=is_pct,\n                                                    is_univariate=is_univariate,\n                                                   min_time=min_time,\n                                                   period=period)\n        tbl = trend_df.sort_values([sort_field, obs_var], ascending=[asc, True], kind='mergesort')[:top_n].style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .format('${:,.0f}', subset=grad_cols)\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_caption(title)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0) \n        \n    elif is_bivariate and top_n == 0 and not agg_var:\n        subset_df = df.query(f'{obs_var[0]} == @filter_list').copy()\n        trend_df, grad_cols = subset_sparkline_data(subset_df, obs_var, \n                                               is_bivariate=is_bivariate,\n                                                   min_time=min_time,\n                                                   period=period)\n        tbl = trend_df.sort_values(obs_var[:1] + [sort_field], ascending=[True, False], kind='mergesort').groupby(obs_var[0])\\\n                                                .style\\\n                                                .format('{:.1%}', subset=['growth'])\\\n                                                .set_table_styles([{\n                                                    'selector': 'caption',\n                                                    'props': [\n                                                        ('font-size', '16px')\n                                                    ]\n                                                }])\\\n                                                .set_caption(title)\\\n                                                .set_properties(padding='10px', border='2px solid white')\\\n                                                .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\n    elif is_bivariate and top_n > 0 and agg_var:\n        subset_df = df.query(f'{obs_var[0]} == @filter_list').copy()\n        trend_df, grad_cols = subset_sparkline_data(subset_df, obs_var, \n                                               is_bivariate=is_bivariate,\n                                                   min_time=min_time,\n                                                   period=period)\n        tbl = trend_df.sort_values(obs_var[:1] + [sort_field], ascending=[True, False], kind='mergesort').groupby(obs_var[0])\\\n                                                .head(top_n)\\\n                                                .style\\\n                                                .format('{:.1%}', subset=['growth'])\\\n                                                .set_table_styles([{\n                                                    'selector': 'caption',\n                                                    'props': [\n                                                        ('font-size', '16px')\n                                                    ]\n                                                }])\\\n                                                .set_caption(title)\\\n                                                .set_properties(padding='10px', border='2px solid white')\\\n                                                .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\n    elif is_bivariate and top_n == 0 and is_profession:\n        subset_df = df[~df.isin(filter_list)]\n        trend_df, grad_cols = subset_sparkline_data(subset_df, obs_var, \n                                               is_bivariate=is_bivariate,\n                                                   min_time=min_time,\n                                                   period=period)\n        tbl = trend_df.sort_values(obs_var[:1] + [sort_field], ascending=[True, False], kind='mergesort').groupby(obs_var[0])\\\n                                                .style\\\n                                                .format('{:.1%}', subset=['growth'])\\\n                                                .set_table_styles([{\n                                                    'selector': 'caption',\n                                                    'props': [\n                                                        ('font-size', '16px')\n                                                    ]\n                                                }])\\\n                                                .set_caption(title)\\\n                                                .set_properties(padding='10px', border='2px solid white')\\\n                                                .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0) \n    elif is_bivariate and top_n > 0 and is_profession:\n        subset_df = df[~df.isin(filter_list)]\n        trend_df, grad_cols = subset_sparkline_data(subset_df, obs_var, \n                                               is_bivariate=is_bivariate,\n                                                   min_time=min_time,\n                                                   period=period)\n        tbl = trend_df.sort_values(obs_var[:1] + [sort_field], ascending=[True, False], kind='mergesort').groupby(obs_var[0])\\\n                                                .head(top_n)\\\n                                                .style\\\n                                                .format('{:.1%}', subset=['growth'])\\\n                                                .set_table_styles([{\n                                                    'selector': 'caption',\n                                                    'props': [\n                                                        ('font-size', '16px')\n                                                    ]\n                                                }])\\\n                                                .set_caption(title)\\\n                                                .set_properties(padding='10px', border='2px solid white')\\\n                                                .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0) \n    \n    return tbl","3d105c25":"Image(filename=\"\/kaggle\/input\/banner-survey\/Image_20211024_065457.png\")","33017d26":"obs_var = 'Age'\nplot_pandas_table(cleaned_mcr, obs_var, \n                  is_univariate=True, \n                  is_bivariate=False,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=[], \n                  top_n=0, \n                  title='Fastest growing Age categories - 2018-2021')","9cf4f67f":"obs_var = 'Country'\nplot_pandas_table(cleaned_mcr, obs_var, \n                  is_univariate=True, \n                  is_bivariate=False,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=[], \n                  top_n=12, \n                  asc=False,\n                  title='Fastest growing Countries - 2018-2021')","441f8778":"def plot_side_by_side_tables(df,\n                            obs_var, \n                            is_univariate=True, \n                            is_bivariate=False,\n                            sort_field='growth', \n                            is_pct=False, \n                            agg_var=None,\n                            filter_list=[],\n                            filter_level=None,\n                            filter_list2=[],\n                            filter_list3=[], \n                            n=5, \n                            m=0, \n                            asc=False,\n                            title1=None,\n                            title2=None):\n    \"\"\"\n    Display styled tables side by side\n    # https:\/\/stackoverflow.com\/questions\/38783027\/jupyter-notebook-display-two-pandas-tables-side-by-side\n    \"\"\"\n    a, b = None, None\n    if is_univariate and len(filter_list) == 0 and not agg_var and len(filter_list2) == 0:\n        trend, grad_cols = subset_sparkline_data(df, obs_var, \n                                                    is_univariate=True)\n        a = trend.sort_values(['growth', obs_var], ascending=[False, True], kind='mergesort')[:n].style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_table_attributes(\"style='display:inline'\")\\\n                                                        .set_caption(title1)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                        ._repr_html_()\n        b = trend.sort_values(['growth', obs_var], ascending=[False, True], kind='mergesort')[-n:].style\\\n                                                .format('{:.1%}', subset=['growth'])\\\n                                                .set_table_styles([{\n                                                    'selector': 'caption',\n                                                    'props': [\n                                                        ('font-size', '16px')\n                                                    ]\n                                                }])\\\n                                                .set_table_attributes(\"style='display:inline'\")\\\n                                                .set_caption(title2)\\\n                                                .set_properties(padding='10px', border='2px solid white')\\\n                                                .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                ._repr_html_() \n    if is_univariate and len(filter_list) > 0 and not agg_var and len(filter_list2) == 0:\n        subset_df = df[~df[obs_var].isin(filter_list)].copy()\n        trend, grad_cols = subset_sparkline_data(subset_df, obs_var, \n                                                    is_univariate=True)\n        a = trend.sort_values(['growth', obs_var], ascending=[False, True], kind='mergesort')[:n].style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_table_attributes(\"style='display:inline'\")\\\n                                                        .set_caption(title1)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                        ._repr_html_()\n        b = trend.sort_values(['growth', obs_var], ascending=[False, True], kind='mergesort')[-n:].style\\\n                                                .format('{:.1%}', subset=['growth'])\\\n                                                .set_table_styles([{\n                                                    'selector': 'caption',\n                                                    'props': [\n                                                        ('font-size', '16px')\n                                                    ]\n                                                }])\\\n                                                .set_table_attributes(\"style='display:inline'\")\\\n                                                .set_caption(title2)\\\n                                                .set_properties(padding='10px', border='2px solid white')\\\n                                                .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                ._repr_html_() \n    elif is_univariate and agg_var and len(filter_list2) > 0 and is_pct:\n        trend, grad_cols = subset_sparkline_data(df, obs_var, \n                                               agg_var=agg_var, \n                                               is_pct=is_pct,         \n                                               is_univariate=is_univariate)\n        a = trend.sort_values(['growth', obs_var], ascending=[False, True], kind='mergesort')[:n].style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .format('{:.1%}', subset=grad_cols)\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_table_attributes(\"style='display:inline'\")\\\n                                                        .set_caption(title1)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                        ._repr_html_()\n\n        subset_df = df[~df.isin(filter_list2)].copy()\n        trend, grad_cols = subset_sparkline_data(subset_df, obs_var, \n                                                       agg_var=agg_var, \n                                                       is_pct=is_pct,         \n                                                       is_univariate=is_univariate)\n        b = trend.sort_values(['growth', obs_var], ascending=[False, True], kind='mergesort')[-n:].style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .format('{:.1%}', subset=grad_cols)\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_table_attributes(\"style='display:inline'\")\\\n                                                        .set_caption(title2)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                        ._repr_html_()\n    elif is_univariate and agg_var and len(filter_list) > 0 and not is_pct:\n        subset_df = df.query(f'{obs_var} == @filter_list').copy()\n        # subset_df = df[~df[obs_var].isin(filter_list)].copy()\n        trend, grad_cols = subset_sparkline_data(subset_df, obs_var, \n                                               agg_var=agg_var, \n                                               is_pct=is_pct,         \n                                               is_univariate=is_univariate)\n        a = trend.sort_values(['growth', obs_var], ascending=[False, True], kind='mergesort')[:n].style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .format('${:,.0f}', subset=grad_cols)\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_table_attributes(\"style='display:inline'\")\\\n                                                        .set_caption(title1)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                        ._repr_html_()\n\n        b = trend.sort_values(['growth', obs_var], ascending=[False, True], kind='mergesort')[-n:].style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .format('${:,.0f}', subset=grad_cols)\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_table_attributes(\"style='display:inline'\")\\\n                                                        .set_caption(title2)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                        ._repr_html_()\n    elif is_univariate and agg_var and len(filter_list2) > 0 and not is_pct:\n        trend, grad_cols = subset_sparkline_data(df, obs_var, \n                                               agg_var=agg_var, \n                                               is_pct=is_pct,         \n                                               is_univariate=is_univariate)\n        a = trend.sort_values(['growth', obs_var], ascending=[False, True], kind='mergesort')[:n].style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .format('${:,.0f}', subset=grad_cols)\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_table_attributes(\"style='display:inline'\")\\\n                                                        .set_caption(title1)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                        ._repr_html_()\n\n        subset_df = df[~df.isin(filter_list2)].copy()\n        trend, grad_cols = subset_sparkline_data(subset_df, obs_var, \n                                                       agg_var=agg_var, \n                                                       is_pct=is_pct,         \n                                                       is_univariate=is_univariate)\n        b = trend.sort_values(['growth', obs_var], ascending=[False, True], kind='mergesort')[-n:].style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .format('${:,.0f}', subset=grad_cols)\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_table_attributes(\"style='display:inline'\")\\\n                                                        .set_caption(title2)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                        ._repr_html_()\n    elif is_univariate and not agg_var and len(filter_list2) > 0:\n        trend, grad_cols = subset_sparkline_data(df, obs_var,         \n                                               is_univariate=is_univariate)\n        a = trend.sort_values(['growth', obs_var], ascending=[False, True], kind='mergesort')[:n].style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_table_attributes(\"style='display:inline'\")\\\n                                                        .set_caption(title1)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                        ._repr_html_()\n\n        subset_df = df[~df.isin(filter_list2)].copy()\n        trend, grad_cols = subset_sparkline_data(subset_df, obs_var,         \n                                                       is_univariate=is_univariate)\n        b = trend.sort_values(['growth', obs_var], ascending=[False, True], kind='mergesort')[-m:].style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_table_attributes(\"style='display:inline'\")\\\n                                                        .set_caption(title2)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                        ._repr_html_()\n    elif is_bivariate and len(filter_list) > 0 and filter_level is None:\n        subset_df = df.query(f'{obs_var[0]} == @filter_list').copy()\n        trend, grad_cols = subset_sparkline_data(subset_df, obs_var, \n                                                       is_bivariate=True)\n        a = trend.sort_values(obs_var[:1] + ['growth'], ascending=[True, False], kind='mergesort').groupby(obs_var[0])\\\n                                                        .head(n)\\\n                                                        .style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_table_attributes(\"style='display:inline'\")\\\n                                                        .set_caption(title1)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                        ._repr_html_()\n\n        b = trend.sort_values(obs_var[:1] + ['growth'], ascending=[True, False], kind='mergesort').groupby(obs_var[0])\\\n                                                        .tail(n)\\\n                                                        .style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_table_attributes(\"style='display:inline'\")\\\n                                                        .set_caption(title2)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                        ._repr_html_()\n    elif is_bivariate and filter_level and len(filter_list2) > 0 and len(filter_list3) > 0:\n        subset_df = df.query(f'{obs_var[0]} == @filter_list').copy()\n        trend, grad_cols = subset_sparkline_data(subset_df, obs_var, \n                                                       is_bivariate=True)\n        a = trend.sort_values(obs_var[:1] + ['growth'], ascending=[True, False], kind='mergesort').groupby(obs_var[0])\\\n                                                        .head(n)\\\n                                                        .style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_table_attributes(\"style='display:inline'\")\\\n                                                        .set_caption(title1)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                        ._repr_html_()\n\n        subset_df = df.query(f'{obs_var[0]} == @filter_list2').copy()\n        subset_df = subset_df[~subset_df.isin(filter_list3)].copy()\n        trend, grad_cols = subset_sparkline_data(subset_df, obs_var, \n                                                       is_bivariate=True)\n        b = trend.sort_values(obs_var[:1] + ['growth'], ascending=[True, False], kind='mergesort').groupby(obs_var[0])\\\n                                                        .tail(n)\\\n                                                        .style\\\n                                                        .format('{:.1%}', subset=['growth'])\\\n                                                        .set_table_styles([{\n                                                            'selector': 'caption',\n                                                            'props': [\n                                                                ('font-size', '16px')\n                                                            ]\n                                                        }])\\\n                                                        .set_table_attributes(\"style='display:inline'\")\\\n                                                        .set_caption(title2)\\\n                                                        .set_properties(padding='10px', border='2px solid white')\\\n                                                        .background_gradient(cmap='RdYlGn', subset=grad_cols, axis=1)\\\n                                                        .background_gradient(cmap='RdYlGn', subset=['growth'], axis=0)\\\n                                                        ._repr_html_()\n        \n    output = a + \"\\xa0\\xa0\\xa0\\xa0\" + b    \n    display(HTML(output))","35e83c26":"obs_var = 'Country'\nplot_side_by_side_tables(cleaned_mcr,\n                            obs_var, \n                            is_univariate=True, \n                            is_bivariate=False,\n                            sort_field='growth', \n                            agg_var=None,\n                            filter_list=[], \n                            n=12, \n                            asc=False,\n                            title1='Top 12 fastest growing Countries - 2018-2021',\n                            title2='Bottom 12 slowest growing Countries - 2018-2021')","47a0b1bb":"obs_var = 'Gender'\nplot_pandas_table(cleaned_mcr, obs_var, \n                  is_univariate=True, \n                  is_bivariate=False,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=[], \n                  top_n=0, \n                  title='Fastest growing Gender - 2018-2021')","998e392b":"obs_var = ['Gender', 'Country']\ngender_list = ['Female', 'Male']\nplot_side_by_side_tables(cleaned_mcr,\n                            obs_var, \n                            is_univariate=False, \n                            is_bivariate=True,\n                            sort_field='growth', \n                            agg_var=None,\n                            filter_list=gender_list, \n                            n=3, \n                            asc=False,\n                            title1='Top 3 fastest growing countries based on Gender growth - 2018-2021',\n                            title2='Bottom 3 slowest growing countries based on Gender growth - 2018-2021')","edf9cec5":"obs_var = ['Age', 'Country']\nage_list = ['18-21', '22-24', '25-29', '30-34', '35-39']\nage_list2 = ['40-44', '45-49', '50-54', '55-59', '60-69']\ncountry_list = ['Finland', 'Hungary', 'New Zealand', 'Nigeria', 'Undisclosed',\n               'Hong Kong', 'China', 'Belarus', 'Denmark', 'Norway', 'Malaysia',\n               'Kenya', 'Tunisia', 'Greece', 'Canada', 'Switzerland', 'Czech Republic', \n               'Ukraine', 'Viet Nam', 'South Africa', 'South Korea', 'Taiwan', 'Thailand',\n               'Uganda', 'UAE', 'Singapore', 'Spain', 'Turkey', 'Sri Lanka', 'Saudi Arabia',\n               'Romania', 'Portugal', 'Sweden', 'Nepal', 'Kazakhstan', 'Morocco', 'Philippines',\n               'Ireland', 'Iraq', 'Egypt', 'Bangladesh', 'Peru', 'Ethiopia', 'Ghana', 'Algeria',\n               'Indonesia', 'Iran', 'Belgium', 'Ecuador', 'Colombia']\nplot_side_by_side_tables(cleaned_mcr,\n                            obs_var, \n                            is_univariate=False, \n                            is_bivariate=True,\n                            sort_field='growth', \n                            agg_var=None,\n                            filter_level=2, \n                            filter_list=age_list, \n                            filter_list2=age_list2,\n                            filter_list3=country_list, \n                            n=3, \n                            asc=False,\n                            title1='Top 3 youngest growing countries Age wise - 2018-2021',\n                            title2='Bottom 3 oldest growing countries Age wise - 2018-2021')","540ec9ca":"obs_var = 'Education'\nplot_pandas_table(cleaned_mcr, obs_var, \n                  is_univariate=True, \n                  is_bivariate=False,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=[], \n                  top_n=0, \n                  title='Fastest growing Education categories - 2018-2021')","bf4ee8a0":"\nfig = px.line(cleaned_mcr.groupby('Survey')['Salary_Cleaned'].mean().round(), y='Salary_Cleaned',\n              title='Mean salary - 2018-2021')\nfig.update_xaxes(dtick=\"M1\",\n               #  tickformat=\"%b\\n%Y\"\n                )\nfig.show()","d098668c":"obs_var = 'Country'\ncountry_list = ['Finland', 'Hungary', 'New Zealand', 'Undisclosed', 'Uganda',\n                   'UAE', 'Taiwan', 'Sri Lanka', 'Saudi Arabia', 'Nepal', \n                   'Kazakhstan', 'Iraq', 'Ghana', 'Ethiopia', 'Ecuador', 'Algeria']\nplot_side_by_side_tables(cleaned_mcr,\n                            obs_var, \n                            is_univariate=True, \n                            is_bivariate=False,\n                            is_pct=False,\n                            sort_field='growth', \n                            agg_var='Salary_Cleaned',\n                            filter_level=2,  \n                            filter_list2=country_list,\n                            n=10, \n                            asc=False,\n                            title1='Top 10 high rate payers - 2018-2021',\n                            title2='Bottom 10 low rate payers - 2018-2021')","a258bb4a":"obs_var = 'Age'\nplot_pandas_table(cleaned_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=True, \n                  is_bivariate=False,\n                  sort_field='growth', \n                  agg_var='Salary_Cleaned',\n                  filter_list=[], \n                  top_n=10, \n                  title='Fastest Income growers Age wise - 2018-2021')","7b9f92d5":"obs_var = 'Role title'\nrole_list = ['Chief Officer', 'Consultant', 'Data Journalist', \n            'Developer Advocate', 'Manager', 'Marketing Analyst', \n            'Principal Investigator', 'Salesperson']\nplot_side_by_side_tables(cleaned_mcr,\n                            obs_var, \n                            is_univariate=True, \n                            is_bivariate=False,\n                            sort_field='growth', \n                            agg_var=None,\n                            filter_level=2,  \n                            filter_list2=role_list,\n                            n=10,\n                            m=4, \n                            asc=False,\n                            title1='Top 10 fastest growing Role titles growth - 2018-2021',\n                            title2='Bottom 10 slowest growing Role titles growth - 2018-2021')","166066ef":"obs_var = 'Role title'\nrole_list = ['Developer Relations\/Advocacy', 'Machine Learning Engineer']\nplot_pandas_table(cleaned_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=True, \n                  is_bivariate=False,\n                  sort_field='growth', \n                  agg_var='Salary_Cleaned',\n                  filter_list=role_list, \n                  top_n=10, \n                  title='Top 10 popular Role titles based on mean Salary - 2018-2021')","0110c9d5":"obs_var = 'Industry'\nplot_pandas_table(cleaned_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=True, \n                  is_bivariate=False,\n                  sort_field='2021', \n                  agg_var=None,\n                  filter_list=[], \n                  top_n=10, \n                  min_time='2021',\n                  title='Top 10 Industries - 2021')","796975ad":"obs_var = 'Company size'\nplot_pandas_table(cleaned_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=True, \n                  is_bivariate=False,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=[], \n                  top_n=0, \n                  min_time='2019',\n                  period=2,\n                  title='Popular Company sizes - 2019-2021')","34ed8220":"obs_var = 'Num of DS folks'\nplot_pandas_table(cleaned_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=True, \n                  is_bivariate=False,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=[], \n                  top_n=0, \n                  min_time='2019',\n                  period=2,\n                  title='Popular Data Science workloads - 2019-2021')","3c4980a3":"obs_var = 'Is ML used at work'\nplot_pandas_table(cleaned_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=True, \n                  is_bivariate=False,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=[], \n                  top_n=0, \n                  title='Popular Machine Learning use cases - 2018-2021')","87d573f2":"obs_var = 'Expenditure on ML services'\nplot_pandas_table(cleaned_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=True, \n                  is_bivariate=False,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=[], \n                  top_n=0, \n                  min_time='2019',\n                  period=2,\n                  title='Expenditure classification on Machine Learning services - 2019-2021')","2b7b6178":"obs_var = ['Profession', 'Coding experience']\nplot_pandas_table(cleaned_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=3, \n                  is_profession=True,\n                  title='Top 3 fastest growing Coding experience categories by Profession - 2018-2021')","e68f3566":"obs_var = ['Profession', 'Recommended language']\nplot_pandas_table(cleaned_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  is_profession=True,\n                  title='Top 5 fastest growing Recommended languages by Profession - 2018-2021')","97c22b2f":"def melt_feats(df, label, rename=None):\n    \"\"\"\n    Unstack the multiple choice questions\n    into a dataframe\n    \"\"\"\n    q_s = [col for col in cleaned_mcr.columns.tolist() if label in col]\n    sub = ( pd.melt(df, id_vars=['Profession', 'Survey'], value_vars=q_s)\n                                                .drop(['variable'], axis=1)\n                                                .rename(columns={'value': rename})\n           )\n    return sub[(sub[rename] != 'None') & (sub[rename] != 'Other')]","839f1780":"feat = 'Language'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  is_profession=True,\n                  title='Top 5 fastest growing regularly used languages by Profession - 2018-2021')","fd9efc18":"obs_var = ['Profession', 'Machine learning experience']\nplot_pandas_table(cleaned_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  is_profession=True,\n                  title='Top 5 fastest growing Machine Learning experiences by Profession - 2018-2021')","1b98e0ce":"feat = 'IDE'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  is_profession=True,\n                  title='Top 5 fastest growing IDEs by Profession - 2018-2021')","2a65cba4":"feat = 'Primary_Tool'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  is_profession=True,\n                  title='Top 5 popular primary tools for analysis - 2018-2021')","799f2dbb":"feat = 'Share'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  min_time='2020',\n                  period=1,\n                  is_profession=True,\n                  title='Top 5 popular places to share data analysis projects - 2020-2021')","dd0b149f":"feat = 'Hosted_NB'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  min_time='2019',\n                  period=2,\n                  is_profession=True,\n                  title='Top 5 fastest growing Hosted Notebooks - 2019-2021')","7c1d9a95":"feat = 'Visualization'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  min_time='2018',\n                  period=3,\n                  is_profession=True,\n                  title='Top 5 favourite Visualization libraries - 2018-2021')","15dd49a8":"feat = 'Computing platform'\nobs_var = ['Profession', feat]\nplot_pandas_table(cleaned_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=10, \n                  min_time='2020',\n                  period=1,\n                  is_profession=True,\n                  title='Popular Computing platforms - 2020-2021')","152d0a90":"feat = 'Hardware'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  min_time='2019',\n                  period=2,\n                  is_profession=True,\n                  title='Popular Specialized Hardware - 2019-2021')","fce6abc2":"feat = 'TPU Usage'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='2021', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  min_time='2021',\n                  period=1,\n                  is_profession=True,\n                  title='Frequency of TPU usage - 2021')","7c7b2117":"feat = 'ML_framework'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=3, \n                  min_time='2018',\n                  period=3,\n                  is_profession=True,\n                  title='Top 3 fastest growing Machine Learning frameworks - 2018-2021')","766e3009":"feat = 'ML_algorithm'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=3, \n                  min_time='2019',\n                  period=2,\n                  is_profession=True,\n                  title='Top 3 fastest growing Machine Learning algorithms - 2019-2021')","e8ee5f9f":"feat = 'Computer_Vision'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=3, \n                  min_time='2019',\n                  period=2,\n                  is_profession=True,\n                  title='Top 3 popular Computer Vision methods - 2019-2021')","29d6934e":"feat = 'NLP'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=3, \n                  min_time='2019',\n                  period=2,\n                  is_profession=True,\n                  title='Top 3 popular Natural Language Processing methods - 2019-2021')","2dd05cb7":"feat = 'Activities'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  min_time='2020',\n                  period=1,\n                  is_profession=True,\n                  title='Top 5 popular Activities performed - 2020-2021')","922bf1f4":"feat = 'Cloud_platform'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=10, \n                  min_time='2019',\n                  period=2,\n                  is_profession=True,\n                  title='Top 10 popular Cloud related services - 2019-2021')","05647899":"feat = 'Cloud_computing'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  min_time='2019',\n                  period=2,\n                  is_profession=True,\n                  title='Top 5 popular Cloud computing services - 2019-2021')","982c7394":"feat = 'Big_data'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  min_time='2019',\n                  period=2,\n                  is_profession=True,\n                  title='Top 5 fastest growing Big Data products\/services - 2019-2021')","cceba632":"feat = 'Data_storage'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='2021', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  min_time='2021',\n                  period=1,\n                  is_profession=True,\n                  title='Top 5 most popular Data storage solutions - 2021')","fcb91fbb":"feat = 'Online'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  min_time='2019',\n                  period=2,\n                  is_profession=True,\n                  title='Top 5 most popular Online learning platforms - 2019-2021')","f71cf464":"feat = 'Media'\nobs_var = ['Profession', feat]\nsubset_mcr = melt_feats(cleaned_mcr, feat, rename=feat)\nplot_pandas_table(subset_mcr, obs_var,\n                  is_pct=False,\n                  is_univariate=False, \n                  is_bivariate=True,\n                  sort_field='growth', \n                  agg_var=None,\n                  filter_list=['Other', 'Not employed'], \n                  top_n=5, \n                  min_time='2018',\n                  period=3,\n                  is_profession=True,\n                  title='Top 5 popular Media for Data Science news - 2018-2021')","20f6c798":"## What is you choice of Hardware?","34169b43":"**What do we observe**\n\n1) Most participants have never used a TPU despite its rising popularity as shown in the table above this one.","7d646866":"## What is your choice of tool for Analysis?","9cc424f5":"**What do we observe**\n\nAs this question was phrased differently in 2018, 2019 and 2020 and 2021, I have used the data from the last 3 years for analysis.\nIt would have been nice to compare proprietary databases separately from open source databases.\n\n1) Amazon Dynamo DB is a NoSQL database which is a proprietry DB unlike MySQL and PostgreSQL which are open source.","8cee311f":"**What do we observe**\n\n1) The mean income, in the last 4 years, has declined across all age groups. The pandemic may have impacted the earning power of the younger groups in the last 2 years","b376320e":"**What do we observe**\n\nNeedless to say, the countries with the highest absolute numbers aren't the ones witnessing highest growth rates in the last 4 years.\n\n1) The country with the highest overall particiaption rate is also the country with the highest female participation rate - Egypt. Similarly, Nigeria and Bangladesh have also witnessed an increase in women participation, in the last 4 years.","7e53359c":"**What do we observe**\n\nQuestion on choice of IDE for Visual Studio \/ Visual Studio Code, in 2018 and 2021 were asked as separate questions. However, in 2019 and 2020, they were clubbed. So, for the ease of analysis, they have been clubbed here as well; this may affect the ranking based on growth.\n\n1) After cleaning up the data, especially the responses relating to the use of Visual Studio \/ Visual Studio Code, it appears to be the favourite among both the Professionals and Students alike, followed by Jupyter Notebook.","3076a2c7":"**What do we observe**\n\nThis is a new question asked in the 2021 survey\n\n1) No surprises. Computers\/IT dominate the pack, followed by Education. It is good to note that Kagglers from the Accounting domain are also active here.","a9eb9778":"## Whats is your choice of Computing platform?","33d80e8d":"This is the 5th instalment of the annual Kaggle Survey. The survey had 369 questions and 25973 responses - a 3% yearly growth rate in the last 4 years.\n\n\nThe demographic analysis covers all participants to understand how responses have varied in the last 4 years including the years 2020 and 2021,which have been extremely difficult on everyone. Post analysis of individual questions, a comparison of students and professsionals is done to understand how each group differs in their preferences to various questions asked in the rest of the survey.\n\nPandas styled dataframes have been used to show number of responses\/percentage across each category for the years from 2018-2021; this is augmented by a compounded growth for each category across time. The data is mostly sorted in descending order of growth or frequency where there is data for only 2021. Each cell represents either a number of responses, a share of responses or a dollar amount.","2feed4d2":"## What are your favourite IDEs to use?","1ef5acf0":"## Computer vision methods","837cfd30":"## Top Industries","aa6267e0":"**What do we observe**\n\n1) Youngest growing countries are from Middle east, Asia and African regions, whereas, oldest growing countries are from North America, Europe and Australia.","05f27f41":"## Popular Cloud platforms","50b6f539":"## Favourite Online learning platforms","04b9b1b4":"**What do we observe**\n\nThis question only applies to professionals.\n\n1) It appears not much as changed in the last few years. Most companies are still in the analysis and decision support phase.","07a9a479":"**What do we observe**\n\nIt is not clear why Students were not part of this question.\n\n1) Streamlit appears to be the most tool for sharing work publicly.","bdee6b5e":"**What do we observe**\n\nAzure Cloud services, one of the responses in 2019 was clubbed with Microsoft Azure Virtual Machines, as I thought that was the closest match. In any case, it shouldn't affect the growth rate computation significantly.\n\n1) Microsoft VMs have witnessed a postive growth rate despite not retaining the top position in platform growth during the same period.","7973b431":"**What do we observe**\n\n1) This seems to suggest that Machine Learning is an expensive affair. Only those organisations that know what they are doing or have extra cash to spare can afford to spend time on building ML services.","8208e68d":"## How many years of Coding experience do you have?","330a390a":"**What do we observe**\n\n1) Spreadsheets are the goto tool for data analysis among both the students and professionals.","31adeb4a":"**What do we observe**\n\nDeveloper Advocates and Machine Learning Engineers were filtered as these options were available only in the last 2 years.\n\n1) Everyone has witnessed a decline in their salaries due to the pandemic. However, Data Scientists, Software Engineers and Business Analysts have seen a sharper decline relatively compared with Product\/Project Manager, DBAs and Research Scientists.","c8121bb0":"**What do we observe**\n\nThis question wasn't shown to students since 2019. Don't schools\/colleges use cloud providers?\n\n1) There are a few up and coming risers such as SAP Cloud, Oracle Cloud, Alibaba Cloud and Salesforce Cloud that are chipping away at the market shares\nof the heavy weights such as Microsoft Azure, Google Cloud Platform and Amazon Web Services during the last 3 years.","e5e20def":"## Demograhic analysis","5f2d5f35":"## Machine Learning Algorithms","59121f0e":"**What do we observe**\n\nProfessional Doctorate is a new category introduced this year. This has been clubbed with Doctoral degree for ease of analysis. Professional degree\nwas removed from this year's survey.\n\n1) There is a growing trend among participants who didn't want to disclose their level of education.\n\n2) Those with no degree or those with some schooling up to high school are on the rise. While the more formal degrees are either seeing very small growth or declining growth in the last 4 years.","c99378b1":"**What do we observe**\n\n'GPUs' in 2019 were replaced with NIVIDIA GPUs\n\n'TPUs in 2019 were replaced with Google Cloud TPUs\n\n1) Surprisingly, there has been a tremendous growth in the usage of specialized hardware - TPUs in the last 3 years. NIVIDIA GPUs are more common, but they have been growing relatively slowly in the last 3 years.","1385aade":"## Most common Activities performed","6dc768c1":"**How is the data prepared**\n\n1) The midpoint in the slaray range is taken, and the yearly mean is computed.\n\n2) Undisclosed and null values are ignored.\n\n**What do we observe**\n\n1) The mean salary has seen a decline since 2020, which is expected as people lost jobs, and others may have had to take a pay cut.","8b36f78a":"## Fastest growing Big Data products\/services","6fabfd3a":"## Fastest growing Hosted Notebook?","3b36f840":"**What do we observe**\n\n\n1) Professionals have a preference for Geoplotlib, Altair, and Seaborn in that order. Whereas Students prefer Seaborn, Matplotlib and Geoplotlib in that order. Plotly has fallen out of favour among Professionals but has grown at 11% yearly among the Students.","66401511":"**What do we observe**\n\nThe 70+ categorgy has been clubbed into the 70-79 category as the maximum age group is 80+ years.\n\nOne plausible explanation could be that the pandemic, needless to say, has put a lot of stress on the economy and its people; I suspect\nlot of young folks were affected due to academic disruptions and loss of jobs which has had a profound effect on their mental well being. Despite the upheaval, there has been a healthy rise in participation in 2021.\n\n1) A side effect of clubbing the 70+ category into the 70-79 category has resulted in this group showing the highest\ngrowth in the last 4 years. However, even if this category is ignored, there seems to be an increase in Kagglers in the \nother age categories, especially - 50-54, 55-59, and 60-69 years.\n\n2) On the other hand, the growth rate in the young groups, baring 18-21 years, such as 22-24, 25-29 and 30-34 years have \nseen a slight drop in growth the last 4 years.","7fbf75aa":"**What do we observe**\n\n1) The responses indicate that companies are still not mature enough to deploy models into production. Respondents are either not aware of ML use cases or they are sure their companies aren't using them or they are just using them to support decision making.\n","1af1a5fe":"## Your favourite media sources for news on Data Science topics","ea6b9f40":"## Fastest and slowest aging Countries","452e1176":"## Which are the fastest growing regularly used programming languages?","25563f0e":"## What are some of the popular Machine Learning use cases?","3b7a7e42":"**What do we observe**\n\nIt is interesting to note that experienced programers also compete on Kaggle; this is immensely useful for the community as they can share their experiences with those less experienced who are generally more in number.\n\n1) Participants in the 20-30 years category have witnessed the highest growth in the last 4 years followed by those in the 10-20 years group.","22c03cae":"**What do we observe**\n\n1) It is mostly the European countries that have seen a positive growth in mean Salary in the last 4 years. A couple of outliers in the top10 list are South Africa and Singapore each with a 10% and 8% growth rate respectively.","4135038d":"**What do we observe**\n\nVariations in notebook names were replaced to align with the names used in the most recent survey; this is especially true for Colab, Kaggle and Azure related notebooks. For example, Google Colab was replaced with Colab Notebooks.\n\n1) Based on growth in the last 3 years, the top 3 preferences for Students are: Code Ocean, Paperspace and Colab  in that order. On the other hand, Professionals prefer Code Ocean, Colab, and Kaggle Notebooks in that oder.","1b94ebd3":"## How many Data Science folks does it take to change a light bulb?","ceaef745":"## What programming language would you recommend?","bcffee2e":"## Fastest growing Countries","1bfcf7be":"### Fastest growing Age groups","b7bbbca8":"## Kaggle trends","22c0b731":"## Cloud related services","4e096bae":"## Natural Language Processing methods used","fafd97d7":"## Learning and Media","3afd0223":"## Fastest growing Age groups based on their Salaries","49e980c7":"## Popular Role titles","083244f4":"## Fastest growing Salary by Country","e1a57bbb":"**What do we observe**\n\n1) YouTube is #1 among Professionals whereas Course Forums are #1 with Students.","6630ed4c":"## What are you favourite Visualization libraries?","f6fbef6c":"## Fastest growing Gender","5bef23fd":"## How do Machine Learning experiences compare across Professions?","9e6fc0ad":"## Most popular Company sizes","45f8d5b0":"## Popular Cloud computing services","ad41069f":"In this section let us separate the students from professionals, and analyze their responses to various questions\n\n* Professional - Anybody who isn't in the 'Other' or 'Not employed' category; this category makes up 62% of the responses.\n\n* Student - Someone who identifies themself as a student; this category has a share of 24%; the rest form the 'Other' and 'Not employed categories.","9fe497dd":"**What do we observe**\n\n1) Small sized companies seem to be growing the fastest of the lot.","b4055fb7":"**What do we observe**\n\nIn 2018, C\/C++ were clubbed together.\n\n1) While Python might still be the most regularly used programming languages in 2021; its growth tells another story. Among the Professionals, it only grew at 4% yearly, and is closely followed by SQL at 3% yearly. On the other hand, among Students, SQL has pipped Python by 1 percent point.","bd7aab06":"**What do we observe**\n\n1) Move over Data Scientists! Kaggle has been attracting people from other walks of life in the last 4 years; this could bring a fresh perspective to competitions and conversations in general.","e6a934b3":"## Fastest and slowest growing Countries with respect to Gender","050b79b6":"**What do we observe**\n\nThe options 'A laptop' and A personal computer\/Desktop appeared as two separate choices in the 2021 survey, but appeared as 1 choice in 2020. So, the responses in 2021 were merged into 1 option to align with the response in 2020 for ease of analysis.\n\n1) A PC\/Laptop are the most popular computing platforms among both groups. Choice 'None', here makes no sense.","659e2847":"**What do we observe**\n\n1) Respondents with no ML experience are growing at the rates of 16% and 45%, respectively, among both the Professional and Student categories.\n","af8477ec":"## How frequently have you used TPUs?","0c2ab960":"## Popular Data storage solutions","1e0cb47e":"## Coding experience, languages learned and company analysis","97de89ec":"## Fastest growing Education categories","a7dc6bcf":"**What do we observe**\n\n1) Have Data Science roles been shrinking? It is hard to say, but based on the responses, it appears DS workloads with 0 individuals has been on the rise for the last 3 years.\n","60daa43c":"## How much do you spend on Machine Learning services?","0517ad84":"**What do we observe**\n\nIt appears that both students and professionals works on different problems that warrant the variation in ML algorithms used. Professionals use deep learning algorithms, whereas, students use trees and regression algoritms implying the source is tabular data.","90d264a5":"## Fastest growing Machine Learning frameworks","88c53a02":"## Fastest growing open source service for sharing data analysis projects","090d5f7b":"**What do we observe**\n\nThere is a growing trend among African and Asian participants in the last 4 years, and a declining one among the American and European countries.\n\n1) The top 2 fastest growing countries in terms of participation rate are Egypt and Nigeria, followed by Pakistan, Bangladesh and Kenya. India is in 11th place.\n\n2) From the top 12 slowest growing countries, USA shares the 1st place along with Netherlands.","ebd2716c":"**What do we observe**\n\nJavascript and SQL seem to be growing in popularity, much faster than Python, with both Students and Professionals. Although Professionals make up 62% of the responses compared with Students who make up 24% of the population, Python's popularity, based on growth rate, has been slower among Professionals than among Students.","2cabed93":"**What do we observe**\n\n1) LinkedIn Learning appears to be a rising star in the last 3 years.","f90ec390":"**What do we observe**\n\n1) For a change, the pandemic has seen an upward trend in Female participation, which grew at 7% in the last 4 years.\n","e83ca80c":"## Mean yearly Salary "}}