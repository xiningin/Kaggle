{"cell_type":{"3c78b95e":"code","5feb3c23":"code","afec8981":"code","b3f3d957":"code","00dca76b":"code","ede568bc":"code","96844fcf":"code","1410587c":"code","782cba6c":"code","4f4a5dab":"code","7e167e21":"code","2af2b19c":"code","fd388ba3":"code","1a9ccebd":"code","7ab33c41":"code","0dde7d16":"code","a6cbe77e":"code","7299ddf4":"code","6fe94189":"code","b74f99df":"code","f40b2295":"code","4acb5329":"code","ef552722":"code","5bc2f26f":"code","2cb8b745":"code","27fe5370":"code","1d956d9a":"markdown","f0352685":"markdown"},"source":{"3c78b95e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n# We use a butterfly dataset of 50 species to demonstrate the classification method\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5feb3c23":"import torch\nimport torchvision\nfrom torchvision import datasets\nfrom torchvision import transforms as T # for simplifying the transforms\nfrom torch import nn, optim\nfrom torch.nn import functional as F\nfrom torch.utils.data import DataLoader, sampler, random_split\nfrom torchvision import models","afec8981":"## Now, we import timm, torchvision image models\n!pip install timm # kaggle doesnt have it installed by default\nimport timm\nfrom timm.loss import LabelSmoothingCrossEntropy # This is better than normal nn.CrossEntropyLoss","b3f3d957":"# remove warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")","00dca76b":"import matplotlib.pyplot as plt\n%matplotlib inline","ede568bc":"import sys\nfrom tqdm import tqdm\nimport time\nimport copy","96844fcf":"torch.backends.cudnn.benchmark = True","1410587c":"def get_classes(data_dir):\n    all_data = datasets.ImageFolder(data_dir)\n    return all_data.classes","782cba6c":"def get_data_loaders(data_dir, batch_size, train = False):\n    if train:\n        #train\n        transform = T.Compose([\n            T.RandomHorizontalFlip(),\n            T.RandomVerticalFlip(),\n            T.RandomApply(torch.nn.ModuleList([T.ColorJitter()]), p=0.25),\n            T.Resize(256),\n            T.CenterCrop(224),\n            T.ToTensor(),\n            T.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)), # imagenet means\n            T.RandomErasing(p=0.2, value='random')\n        ])\n        train_data = datasets.ImageFolder(os.path.join(data_dir, \"train\/\"), transform = transform)\n        train_loader = DataLoader(train_data, batch_size=batch_size, shuffle=True, num_workers=4, pin_memory=True)\n        return train_loader, len(train_data)\n    else:\n        # val\/test\n        transform = T.Compose([ # We dont need augmentation for test transforms\n            T.Resize(256),\n            T.CenterCrop(224),\n            T.ToTensor(),\n            T.Normalize((0.485, 0.456, 0.406), (0.229, 0.224, 0.225)), # imagenet means\n        ])\n        val_data = datasets.ImageFolder(os.path.join(data_dir, \"valid\/\"), transform=transform)\n        test_data = datasets.ImageFolder(os.path.join(data_dir, \"test\/\"), transform=transform)\n        val_loader = DataLoader(val_data, batch_size=batch_size, shuffle=True, num_workers=4)\n        test_loader = DataLoader(test_data, batch_size=batch_size, shuffle=True, num_workers=4)\n        return val_loader, test_loader, len(val_data), len(test_data)","4f4a5dab":"dataset_path = \"\/kaggle\/input\/butterfly-images40-species\/\"","7e167e21":"(train_loader, train_data_len) = get_data_loaders(dataset_path, 128, train=True)\n(val_loader, test_loader, valid_data_len, test_data_len) = get_data_loaders(dataset_path, 32, train=False)","2af2b19c":"classes = get_classes(\"\/kaggle\/input\/butterfly-images40-species\/train\/\")\nprint(classes, len(classes))","fd388ba3":"dataloaders = {\n    \"train\": train_loader,\n    \"val\": val_loader\n}\ndataset_sizes = {\n    \"train\": train_data_len,\n    \"val\": valid_data_len\n}","1a9ccebd":"print(len(train_loader), len(val_loader), len(test_loader))","7ab33c41":"print(train_data_len, valid_data_len, test_data_len)","0dde7d16":"# now, for the model\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\ndevice","a6cbe77e":"model = timm.create_model(\"efficientnet_b0\", pretrained=True)","7299ddf4":"for param in model.parameters(): #freeze model\n    param.requires_grad = False\n\nn_inputs = model.classifier.in_features\nmodel.classifier = nn.Sequential(\n    nn.Linear(n_inputs, 512),\n    nn.ReLU(),\n    nn.Dropout(0.3),\n    nn.Linear(512, len(classes))\n)\nmodel = model.to(device)\nprint(model.classifier)","6fe94189":"criterion = LabelSmoothingCrossEntropy()\ncriterion = criterion.to(device)\noptimizer = optim.AdamW(model.classifier.parameters(), lr=0.001)","b74f99df":"# lr scheduler\nexp_lr_scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=3, gamma=0.97)","f40b2295":"def train_model(model, criterion, optimizer, scheduler, num_epochs=10):\n    since = time.time()\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_acc = 0.0\n    \n    for epoch in range(num_epochs):\n        print(f'Epoch {epoch}\/{num_epochs - 1}')\n        print(\"-\"*10)\n        \n        for phase in ['train', 'val']: # We do training and validation phase per epoch\n            if phase == 'train':\n                model.train() # model to training mode\n            else:\n                model.eval() # model to evaluate\n            \n            running_loss = 0.0\n            running_corrects = 0.0\n            \n            for inputs, labels in tqdm(dataloaders[phase]):\n                inputs = inputs.to(device)\n                labels = labels.to(device)\n                \n                ## Supposedly faster than optimizer.zero_grad() ##\n                for param in model.parameters():\n                    param.grad = None\n                \n                with torch.set_grad_enabled(phase == 'train'): # no autograd makes validation go faster\n                    outputs = model(inputs)\n                    _, preds = torch.max(outputs, 1) # used for accuracy\n                    loss = criterion(outputs, labels)\n                    \n                    if phase == 'train':\n                        loss.backward()\n                        optimizer.step()\n                running_loss += loss.item() * inputs.size(0)\n                running_corrects += torch.sum(preds == labels.data)\n                \n            if phase == 'train':\n                scheduler.step() # step at end of epoch\n            \n            epoch_loss = running_loss \/ dataset_sizes[phase]\n            epoch_acc =  running_corrects.double() \/ dataset_sizes[phase]\n            \n            print(\"{} Loss: {:.4f} Acc: {:.4f}\".format(phase, epoch_loss, epoch_acc))\n            \n            if phase == 'val' and epoch_acc > best_acc:\n                best_acc = epoch_acc\n                best_model_wts = copy.deepcopy(model.state_dict()) # keep the best validation accuracy model\n        print()\n    time_elapsed = time.time() - since # slight error\n    print('Training complete in {:.0f}m {:.0f}s'.format(time_elapsed \/\/ 60, time_elapsed % 60))\n    print(\"Best Val Acc: {:.4f}\".format(best_acc))\n    \n    model.load_state_dict(best_model_wts)\n    return model","4acb5329":"model_ft = train_model(model, criterion, optimizer, exp_lr_scheduler, num_epochs=5)","ef552722":"# anyways, we can use model, for it is also updated witht he latest weights","5bc2f26f":"test_loss = 0.0\nclass_correct = list(0 for i in range(len(classes)))\nclass_total = list(0 for i in range(len(classes)))\nmodel_ft.eval()\n\nfor data, target in tqdm(test_loader):\n    data, target = data.to(device), target.to(device)\n    with torch.no_grad(): # turn off autograd for faster testing\n        output = model_ft(data)\n        loss = criterion(output, target)\n    test_loss = loss.item() * data.size(0)\n    _, pred = torch.max(output, 1)\n    correct_tensor = pred.eq(target.data.view_as(pred))\n    correct = np.squeeze(correct_tensor.cpu().numpy())\n    if len(target) == 32:\n        for i in range(32):\n            label = target.data[i]\n            class_correct[label] += correct[i].item()\n            class_total[label] += 1\n\ntest_loss = test_loss \/ test_data_len\nprint('Test Loss: {:.4f}'.format(test_loss))\nfor i in range(len(classes)):\n    if class_total[i] > 0:\n        print(\"Test Accuracy of %5s: %2d%% (%2d\/%2d)\" % (\n            classes[i], 100*class_correct[i]\/class_total[i], np.sum(class_correct[i]), np.sum(class_total[i])\n        ))\n    else:\n        print(\"Test accuracy of %5s: NA\" % (classes[i]))\nprint(\"Test Accuracy of %2d%% (%2d\/%2d)\" % (\n            100*np.sum(class_correct)\/np.sum(class_total), np.sum(class_correct), np.sum(class_total)\n        ))","2cb8b745":"# our model earns 93% test accuracy, which is very high. lets save it\nexample = torch.rand(1, 3, 224, 224)\ntraced_script_module = torch.jit.trace(model.cpu(), example)\ntraced_script_module.save(\"butterfly_efficientnet_b0.pt\")","27fe5370":"# That's it for this video, see you next time","1d956d9a":"# Efficient Net PyTorch\n\nThis notebook trains EfficientNet  on the Butterfly dataset.","f0352685":"## Testing\n\nOk, now we finished training. Lets run the dataset on the test loader and calculate accuracy"}}