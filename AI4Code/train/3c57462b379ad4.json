{"cell_type":{"6566b6d1":"code","f44da29c":"code","cebef335":"code","467f49e2":"code","5bb5b38f":"code","ea30c56c":"code","7f8ea2f7":"code","a5260d42":"code","c83d27a4":"code","1e1d92f8":"code","44f952d7":"code","7c3e1301":"code","6b7528a2":"code","b0c18eae":"code","75dbfb51":"code","174087d3":"code","db6d3104":"code","ea2d0ee0":"code","43e3c8c9":"code","1a361e43":"code","508a587c":"code","cbf61782":"code","d2f2f41a":"code","41b8ba8d":"code","89f967eb":"code","25ff07bf":"code","5d54aaee":"code","326f617c":"code","c8381139":"code","6d5f30b8":"code","0c53daed":"markdown","1c5334ca":"markdown","ffbc9919":"markdown","e91abbb0":"markdown","3b218ff3":"markdown","022d948f":"markdown","9f140b95":"markdown","22841718":"markdown","cc98b42d":"markdown","2d79a12a":"markdown","dc276e99":"markdown","25f82b20":"markdown","dfa708bc":"markdown","cf59e486":"markdown"},"source":{"6566b6d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f44da29c":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport random\nimport numpy as np\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.cluster import KMeans\n\nimport scipy.stats as stats\nimport seaborn as sns\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_curve, roc_auc_score\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_val_score\n\nimport sys\n\nimport category_encoders as ce\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings('ignore')","cebef335":"df = pd.read_csv('..\/input\/nyc-motor-vehicle-collisions-to-person\/NYC_Motor_Vehicle_Collisions_to_Person.csv')\ndf_copy = df.copy()\n\ndf_copy.head()","467f49e2":"df_copy = df_copy.drop(['VEHICLE_ID','PERSON_ID','UNIQUE_ID','COLLISION_ID'],axis=1)","5bb5b38f":"df_copy.info()","ea30c56c":"df_copy = df_copy.fillna({'SAFETY_EQUIPMENT':'Unknown'})\ndf_copy = df_copy.fillna({'PED_LOCATION':'Unknown'})\ndf_copy = df_copy.fillna({'CONTRIBUTING_FACTOR_2':'Unknown'})\ndf_copy['PED_LOCATION'].replace({37.48764586280057:'Unknown'},inplace=True)\ndf_copy = df_copy.fillna({'EJECTION':'Unknown'})\ndf_copy['EJECTION'].replace({37.48764586280057:'Unknown'},inplace=True)\ndf_copy = df_copy.fillna({'POSITION_IN_VEHICLE':'Unknown'})\ndf_copy['POSITION_IN_VEHICLE'].replace({37.48764586280057:'Unknown'},inplace=True)\ndf_copy = df_copy.dropna(subset=['PERSON_AGE'])\ndf_copy['PED_ACTION'].replace({37.48764586280057:'Unknown'},inplace=True)\ndf_copy.loc[df['PERSON_AGE'] < 0, 'PERSON_AGE'] = df_copy['PERSON_AGE'].mean()\ndf_copy.loc[df['PERSON_AGE'] > 100, 'PERSON_AGE'] = df_copy['PERSON_AGE'].mean()\ndf_copy.loc[df['PERSON_AGE'] == 0, 'PERSON_AGE'] = df_copy['PERSON_AGE'].mean()\ndf_copy = df_copy.dropna(subset=['PED_ACTION'])\ndf_copy = df_copy.dropna(subset=['CONTRIBUTING_FACTOR_1'])\n\ndf_copy = df_copy.loc[df_copy['PERSON_SEX'] != 'U']\n\ndf_copy.loc[((df_copy['PERSON_AGE'] > 21) & (df_copy['PERSON_AGE']) < 50), 'NEW_AGE_CAT'] = 'mature'\ndf_copy.loc[df_copy['PERSON_AGE'] <= 21, 'NEW_AGE_CAT'] = 'young'\ndf_copy.loc[df_copy['PERSON_AGE'] > 50, 'NEW_AGE_CAT'] = 'senior'","7f8ea2f7":"df_copy['CRASH_DATE'] = pd.to_datetime(df_copy['CRASH_DATE'])\n#df_copy['CRASH_YEAR'] = df_copy['CRASH_DATE'].dt.year\ndf_copy['CRASH_MONTH'] = df_copy['CRASH_DATE'].dt.month","a5260d42":"sns.distplot(df_copy[\"PERSON_AGE\"],hist=True,bins=10)","c83d27a4":"sns.countplot(x=\"PERSON_INJURY\", data=df_copy)","1e1d92f8":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1,figsize=(7,18))\n\nax1 = sns.countplot(x=\"PERSON_SEX\",hue=\"PERSON_INJURY\", data=df_copy,ax=ax1)\nax1.set_xticklabels(ax1.get_xticklabels(), rotation=40, ha=\"right\")\n\nax2 = sns.countplot(x=\"BODILY_INJURY\",hue=\"PERSON_INJURY\", data=df_copy,ax=ax2)\nax2.set_xticklabels(ax2.get_xticklabels(), rotation=40, ha=\"right\")\n\nax3 = sns.countplot(x=\"PERSON_TYPE\",hue=\"PERSON_INJURY\", data=df_copy,ax=ax3)\nax3.set_xticklabels(ax3.get_xticklabels(), rotation=40, ha=\"right\")\n\nax4 = sns.countplot(x=\"NEW_AGE_CAT\",hue=\"PERSON_INJURY\", data=df_copy,ax=ax4)\nax4.set_xticklabels(ax4.get_xticklabels(), rotation=40, ha=\"right\")\n\nplt.tight_layout()\n\nplt.show()","44f952d7":"Killed_num = df_copy[df_copy['PERSON_INJURY'] == \"Killed\"]\nYear = Killed_num.groupby([\"CRASH_MONTH\"]).agg({\"PERSON_INJURY\": \"count\"}).sort_values(\"CRASH_MONTH\",ascending=True).reset_index()\nYear.head()","7c3e1301":"fig = px.line(Year, x=\"CRASH_MONTH\", y=['PERSON_INJURY'], title='Died by Month')\nfig.show()","6b7528a2":"month = df_copy.sort_values(\"CRASH_TIME\",ascending=True)\n\nplt.figure(figsize = (10,8))\nplt.xticks(rotation=45)\nsns.countplot(x=\"CRASH_TIME\",hue=\"PERSON_INJURY\", data=month)","b0c18eae":"px.scatter(df_copy,x=\"COMPLAINT\",y=\"PERSON_AGE\",animation_frame=\"EMOTIONAL_STATUS\",color=\"PERSON_INJURY\")","75dbfb51":"px.scatter(month,x=\"PED_ACTION\",y=\"CRASH_TIME\",animation_frame=\"PED_ROLE\",color=\"PERSON_INJURY\")","174087d3":"df_copy['PERSON_INJURY'].replace({'Killed':0,'injured':1},inplace=True)\ndf_copy['CRASH_DATE'] = df_copy['CRASH_DATE'].map(pd.Timestamp.timestamp).astype(int)","db6d3104":"# object\u578b\u3059\u3079\u3066\u5bfe\u8c61\ncats = []\n\nfor col in df_copy.columns:\n    if df_copy[col].dtype == 'object':\n        cats.append(col)\n\n# \u5e8f\u6570\u3092\u30ab\u30c6\u30b4\u30ea\u306b\u4ed8\u4e0e\u3057\u3066\u5909\u63db\nce_oe = ce.OrdinalEncoder(cols=cats,handle_unknown='impute')\ndf_session_ce_ordinal = ce_oe.fit_transform(df_copy)\n\ndf_session_ce_ordinal.head()","ea2d0ee0":"X = df_session_ce_ordinal.drop(['PERSON_INJURY'],axis=1)\ny = df_session_ce_ordinal['PERSON_INJURY']\nX","43e3c8c9":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import cross_validate\n\nmodels = []\nmodels.append((\"Log\",LogisticRegression()))\nmodels.append((\"KNC\",KNeighborsClassifier()))\nmodels.append((\"DTC\",DecisionTreeClassifier()))\nmodels.append((\"RDC\",RandomForestClassifier()))\nmodels.append((\"SVM\",SVC()))\n\nresults = []\nnames = []\nfor name,model in models:\n    kfold = StratifiedKFold(n_splits=5,shuffle=True,random_state=43)\n    \n    score_funcs = [\n        'accuracy',\n        'precision',\n        'recall',\n        'f1',\n    ]\n    \n    scores = cross_validate(model,X,y, cv = kfold, scoring = score_funcs)\n\n    print('Model:', model)\n    print('accuracy:', scores['test_accuracy'].mean())\n    print('precision:', scores['test_precision'].mean())\n    print('recall:', scores['test_recall'].mean())\n    print('f1:', scores['test_f1'].mean())\n    print('--------------------------------------')","1a361e43":"clf = RandomForestClassifier(n_estimators=100, random_state=42)\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n\nscore_funcs = [\n    'accuracy',\n    'precision',\n    'recall',\n    'f1',\n]\n\ny_pred = cross_val_predict(clf,X,y,cv = skf)\nconf_mat = confusion_matrix(y,y_pred)","508a587c":"import itertools\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=0)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        #print(\"Normalized confusion matrix\")\n    else:\n        1#print('Confusion matrix, without normalization')\n\n    #print(cm)\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')","cbf61782":"class_names = ['Killed','injured']\nplt.figure()\nplot_confusion_matrix(conf_mat\n                      , classes=class_names\n                      , title='Confusion matrix')\nplt.show()","d2f2f41a":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state =42)","41b8ba8d":"estimator = DecisionTreeClassifier(random_state=0)\nparam_grid = [{\n    'max_depth': [3, 20, 50],\n    'min_samples_split': [3, 20, 30]\n}]\n\ncv = 5\n\ntuned_model = GridSearchCV(estimator=estimator, \n                           param_grid=param_grid, \n                           cv=cv, return_train_score=False)\n\ntuned_model.fit(X_train, y_train)\npd.DataFrame(tuned_model.cv_results_).T","89f967eb":"tuned_model.best_params_","25ff07bf":"best_model = tuned_model.best_estimator_\n\nprint('Trainning score:{0:.4f}'.format(best_model.score(X_train, y_train)))\nprint('Test score:{0:.4f}'.format(best_model.score(X_test, y_test)))","5d54aaee":"clf = DecisionTreeClassifier(max_depth = 3,min_samples_split=3,random_state=43)\nclf = clf.fit(X_train, y_train)\npred = clf.predict(X_test)\n\naccuracy_score(y_test, pred)","326f617c":"lr_auc = roc_auc_score(y_test, pred)\nrf_fpr, rf_tpr, rf_thresholds = roc_curve(y_test, pred, pos_label=1)","c8381139":"print(classification_report(y_test, pred))","6d5f30b8":"conf_mat = confusion_matrix(y_test,pred)\nclass_names = ['Killed','injured']\nplt.figure()\nplot_confusion_matrix(conf_mat\n                      , classes=class_names\n                      , title='Confusion matrix')\nplt.show()","0c53daed":"# Dealing Null values","1c5334ca":"\u30fbGender distribution is all but equivalent . <br>\n\u30fbReason of death is oviously because of wounding head .<br>\n\u30fbAccidents tend to happen for pedestrians .<br>\n\u30fbAge distribution are equivalent , however seniors tend come to severe outcomes .","ffbc9919":"# GridSearch","e91abbb0":"Since target is very imbalanced , so I use StratifiedKFold in order to boost score.","3b218ff3":"According to above info , there are columns that have missing values , so I have to deal with it .","022d948f":"# confusion matrix","9f140b95":"\u30fbAfternoon is overwhelmingly high rate , indeed , people are very active. <br>\n\u30fbApparent death is undoubtedly dying or dead .<br>\n\u30fbUnconsious and severe bleeding is sign of death on most of cases .","22841718":"\u30fbSome columns have 37.48764586280057 , which sort of queer value and it does not make any sense , so I delete them all on each columns . <br>\n\u30fbI mostly filled null rows with Unknown .","cc98b42d":"RandomForestClassifier is competent to compare with other models , so I use it ","2d79a12a":"Majority people could avoid death , which is good thing , how is distribution of that ?","dc276e99":"# feature engineering","25f82b20":"# EDA","dfa708bc":"Dropping unnecessary columns at first . ","cf59e486":"# Model"}}