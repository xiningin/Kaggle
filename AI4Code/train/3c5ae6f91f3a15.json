{"cell_type":{"1a496c5b":"code","fc2e6af9":"code","4f7d369b":"code","8a63911b":"code","b170a8b2":"code","8cfaa331":"code","8e15cf06":"code","c1afb776":"code","f8708653":"code","599b4b51":"code","ef18cffc":"code","09f70db7":"code","2fdd752b":"code","b4de7ed8":"code","d950e509":"code","492071ac":"code","99bfecf7":"code","303aef9b":"code","47f10b7d":"code","9d281566":"code","c92d8e29":"code","6be6dd8b":"code","2a69c6f5":"code","b73b2d67":"code","94995e54":"code","1bd0fffc":"code","6c191036":"code","4b30c8fb":"code","7a5468e8":"code","c1101008":"code","1889a412":"code","654b50b4":"code","a6e2bf31":"code","642e6631":"code","1f2eb655":"code","fd72a2f9":"code","b27a6c91":"code","5d17a728":"code","7741f523":"code","1c82740b":"code","151cb081":"code","2f29da5b":"code","c187a393":"code","662c8aec":"code","1ddca34b":"code","43ad36a9":"code","8a9e056b":"code","de965e6c":"code","b10843bc":"code","a5df7e4c":"code","d7d794d0":"code","3e152ac5":"code","e63a84de":"code","499995a6":"code","747e10d3":"code","d127a748":"code","7c706e38":"code","5216db75":"code","98604497":"code","67c6fb47":"code","506d8279":"code","c0a27912":"code","1a3350a9":"code","ac8bcc6a":"code","339dd617":"code","1e1663de":"code","eb6951c8":"code","7c0fac01":"code","d72fa1ae":"code","c5362887":"code","ee516ad5":"code","638a8e7a":"code","bf329b17":"code","24c83d28":"code","06a460ee":"code","e5bdeaab":"code","c1834867":"code","1d114663":"code","38d8ecf6":"code","b93d12c2":"code","9cba82d1":"code","78298ef3":"code","e2032e04":"code","dbbdc57c":"code","ae722c85":"code","e916bdae":"code","e4f6a297":"code","16ceb1fb":"code","68bca94a":"code","45d25657":"code","219438be":"code","cf2eadec":"code","9df64b9f":"code","7726a1fd":"code","e3c2e313":"code","2d3935da":"code","a6027f1f":"markdown","c1aacc34":"markdown","05c25af8":"markdown","e9ad3933":"markdown","d3b8b843":"markdown","d16f978c":"markdown","bb59435a":"markdown","8f7aa523":"markdown"},"source":{"1a496c5b":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline","fc2e6af9":"titanic_train = pd.read_csv(\"https:\/\/gist.githubusercontent.com\/michhar\/2dfd2de0d4f8727f873422c5d959fff5\/raw\/ff414a1bcfcba32481e4d4e8db578e55872a2ca1\/titanic.csv\",\n                           sep='\\t')   ","4f7d369b":"titanic_train.head()","8a63911b":"# we can check the shape of the dataframe\ntitanic_train.shape","b170a8b2":"titanic_train.tail(10)","8cfaa331":"# shows datatypes of all the columns present in the dataframe\ntitanic_train.dtypes","8e15cf06":"titanic_train.dtypes == \"object\"","c1afb776":"# Checking the summaries of categorical data.\na = titanic_train.dtypes[titanic_train.dtypes == \"object\"].index\nprint(a)\ntitanic_train[a].describe()","f8708653":"# Checking summaries of numerical Data\ntitanic_train.describe()\n# we can use include=all to get categorical aswell.","599b4b51":"titanic_train.dtypes[titanic_train.dtypes == \"object\"].index","ef18cffc":"titanic_train[['Name','Sex','Age']]","09f70db7":"sorted(titanic_train[\"Name\"])[5:10:2]\n# we are slicing the dataframe from 5th row to 9th row with the jump size of 2","2fdd752b":"titanic_train[\"Name\"].describe()","b4de7ed8":"titanic_train[[\"Ticket\"]][4:9]","d950e509":"titanic_train[\"Ticket\"].describe()","492071ac":"titanic_train.columns # Used to see all the column names of DataFrame","99bfecf7":"#We Can Add a new column to our dataframe\/\ntitanic_train[\"Purvansh\"]=\"Purvansh\"\ntitanic_train.head()","303aef9b":"titanic_train[\"Cabin\"][0:15]       # Check the first 15 tickets","47f10b7d":"# Check number of unique cabins\ntitanic_train['Name'].unique()","9d281566":"titanic_train[\"Survived\"]","c92d8e29":"titanic_train[titanic_train[\"Survived\"] == 1].shape","6be6dd8b":"titanic_train.columns","2a69c6f5":"titanic_train.describe()","b73b2d67":"# we Can See See the details of Categorial Data\nnew_Pclass = pd.Categorical(titanic_train[\"Pclass\"])\nnew_Pclass","94995e54":"new_Pclass = pd.Categorical(titanic_train[\"Sex\"])\nnew_Pclass","1bd0fffc":"titanic_train[\"Cabin\"].unique()   # Check unique cabins","6c191036":"import numpy as np \nchar_cabin = titanic_train[\"Cabin\"].astype(str) # Convert data to str\n\nnew_Cabin = [cabin[0] for cabin in char_cabin] # Take first letter\n\nnew_Cabin = pd.Categorical(new_Cabin)\n#new_Cabin\nnew_Cabin","4b30c8fb":"# Setting new cabin values to the dataframe\ntitanic_train[\"Cabin\"] = new_Cabin\ntitanic_train.head()","7a5468e8":"# checking for NAN values\ntitanic_train[\"Age\"].isnull()","c1101008":"# Getting the places where there is NULL in Age\nmissing = np.where(titanic_train[\"Age\"].isnull() == True)\nmissing","1889a412":"titanic_train.Age.iloc[5]","654b50b4":"# Getting the places where there is maximum fare\nnp.where(titanic_train[\"Fare\"]==max(titanic_train[\"Fare\"]))","a6e2bf31":"# DataFrame where the fare is maximum\ntitanic_train.iloc[np.where(titanic_train[\"Fare\"]==max(titanic_train[\"Fare\"]))]","642e6631":"len(missing[0])","1f2eb655":"titanic_train[\"Family\"] = titanic_train[\"SibSp\"] + titanic_train[\"Parch\"]\ntitanic_train[\"Family\"]\nmost_family = np.where(titanic_train[\"Family\"] == max(titanic_train[\"Family\"]))\nmost_family\n#titanic_train.iloc[most_family]","fd72a2f9":"titanic_train[\"Family\"] = titanic_train[\"SibSp\"] + titanic_train[\"Parch\"]\n\nmost_family = np.where(titanic_train[\"Family\"] == max(titanic_train[\"Family\"]))\nmost_family\ntitanic_train.iloc[most_family]","b27a6c91":"import numpy as np\nimport pandas as pd\n\nlabels = ['a','b','c']\nmy_data = [10,20,30]\narr = np.array(my_data)\nd = {'a':10,'b':20,'c':30}\n\nprint (\"Labels:\", labels)\nprint(\"My data:\", my_data)\nprint(\"Dictionary:\", d)\npd.Series(my_data, index=labels)","5d17a728":"print (\"\\nHolding numerical data\\n\",'-'*25, sep='')\nprint(pd.Series(arr)[1])","7741f523":"print (\"\\nHolding text labels\\n\",'-'*20, sep='')\nprint(pd.Series(labels))","1c82740b":"# Series Using Dictionary\nd = {'a':\"Raj\",'b':20,'c':30}\nd.items\npd.DataFrame(d,index = ['a','b','c'])","151cb081":"print (\"\\nHolding objects from a dictionary\\n\",'-'*40, sep='')\nprint(pd.Series([type, sum, max]))","2f29da5b":"ser1 = pd.Series([1,2,3,4],index = [2,4,6,8])\nser2 = pd.Series([1,2,5,4],['CA', 'OR', 'NV', 'AZ'])\nser1","c187a393":"ser2","662c8aec":"ser1[0:3:2]","1ddca34b":"print (\"\\nIndexing by number (positional value in the series)\\n\",'-'*52, sep='')\nprint(\"Value for CA in ser1:\", ser1[8])\nprint(\"Value for AZ in ser1:\", ser1[4])\nprint(\"Value for AZ in ser1:\", ser1.iloc[1])\nprint(\"Value for NV in ser2:\", ser2[2])\nser1","43ad36a9":"print (\"\\nIndexing by a range\\n\",'-'*25, sep='')\nprint (\"Value for OR, CO, and AZ in ser1:\\n\", ser1[0:3:2], sep='')","8a9e056b":"# It will add indexwise\nser1 = pd.Series([1,2,3,4],['CA', 'OR', 'CO', 'CA'])\nser2 = pd.Series([1,2,5,4],['CA', 'NV', 'AZ','OR'])\nser3 = ser1+ser2\nser3","de965e6c":"print (\"\\nAfter adding the two series, the result looks like this...\\n\",'-'*59, sep='')\nprint(ser3)\nprint(\"\\nPython tries to add values where it finds common index name, and puts NaN where indices are missing\\n\")\n","b10843bc":"print (\"\\nThe idea works even for multiplication...\\n\",'-'*43, sep='')\nprint (ser1*ser2)","a5df7e4c":"from numpy.random import randn as rn\nnp.random.seed(101)\nmatrix_data = rn(5,4)\nrow_labels = ['A','B','C','D','E']\ncolumn_headings = ['W','X','Y','Z']\ndf = pd.DataFrame(matrix_data,index=row_labels,columns=column_headings)\nprint(\"\\nThe data frame looks like\\n\",'-'*45, sep='')\nprint(df)","d7d794d0":"# getting DataFrame with column name\ndf['Z']","3e152ac5":"# getting DataFrame with row_name\ndf.loc['E']","e63a84de":"# getting DataFrame with row_number\ndf.iloc[2]","499995a6":"df.loc[:,'Z']","747e10d3":"print(\"\\nType of the pair of columns: \", type(df[['X','Z']]), sep='')\nprint (\"\\nSo, for more than one column, the object turns into a DataFrame\")","d127a748":"print(\"\\nThe 'X' column accessed by DOT method (NOT recommended)\\n\",'-'*55, sep='')\nprint(df[\"X\"])\ndf.X","7c706e38":"print(\"\\nA column is created by assigning it in relation to an existing column\\n\",'-'*75, sep='')\ndf['New'] = df['X']+df['Z']\ndf['New (Sum of X and Z)'] = df['X']+df['Z']\nprint(df)","5216db75":"df","98604497":"df.drop('New (Sum of X and Z)',inplace=True,axis=1)\ndf","67c6fb47":"df1=df.drop('A')\nprint(\"\\nA row (index) is dropped by using df.drop() method and axis=0\\n\",'-'*65, sep='')\nprint(df1)","506d8279":"df","c0a27912":"print(\"\\nLabel-based 'loc' method can be used for selecting row(s)\\n\",'-'*60, sep='')\nprint(\"\\nSingle row\\n\")\nprint(df.loc['A'])","1a3350a9":"print(\"\\nMultiple rows\\n\")\nprint(df.loc[['B','D']])","ac8bcc6a":"print(\"\\nIndex position based 'iloc' method can be used for selecting row(s)\\n\",'-'*70, sep='')\nprint(\"\\nSingle row\\n\")\nprint(df.iloc[2])","339dd617":"print(\"\\nMultiple rows\\n\")\nprint(df.iloc[[1,2]])","1e1663de":"matrix_data = rn(5,4)\nrow_labels = ['A','B','C','D','E']\ncolumn_headings = ['W','X','Y','Z']\ndf = pd.DataFrame(data=matrix_data, index=row_labels, columns=column_headings)","eb6951c8":"print(\"\\nThe DatFrame\\n\",'-'*45, sep='')\nprint(df)\n","7c0fac01":"print(\"\\nElement at row 'B' and column 'Y' is\\n\") \nprint(df.loc[['B','C'],['Y','W']])","d72fa1ae":"print(\"\\nSubset comprising of rows B and D, and columns W and Y, is\\n\")\ndf.iloc[[1,2,3],[0,1]]","c5362887":"print(df.loc[['B','C'],])","ee516ad5":"print(\"\\nThe DataFrame\\n\",'-'*45, sep='')\nprint(df)","638a8e7a":"print(\"\\nBoolean DataFrame(s) where we are checking if the values are greater than 0\\n\",'-'*75, sep='')\nprint(df>0)","bf329b17":"print(\"\\n\")\nprint(df.loc[['A','B','C']]>0)","24c83d28":"booldf = df>0\nprint(\"\\nDataFrame indexed by boolean dataframe\\n\",'-'*45, sep='') # It will replace False values with Nan\nprint(df[booldf])","06a460ee":"import pandas as pd \nimport numpy as np\n# Via String Input\nmatrix_data = np.matrix('22,66,140;42,70,148;30,62,125;35,68,160;25,62,152')\nrow_labels = ['A','B','C','D','E']\ncolumn_headings = ['Age', 'Height', 'Weight']\nmatrix_data","e5bdeaab":"df = pd.DataFrame(data=matrix_data, index=row_labels, columns=column_headings)\nprint(\"\\nA new DataFrame\\n\",'-'*25, sep='')\nprint(df)","c1834867":"df['Height']>65","1d114663":"df>65","38d8ecf6":"print(\"\\nRows with Height > 65 inch\\n\",'-'*35, sep='')\ndf[df['Height']>65]","b93d12c2":"df['Height']>65","9cba82d1":"booldf1 = df['Height']>65\nbooldf2 = df['Weight']>145","78298ef3":"print(\"\\nRows with Height > 65 inch and Weight >145 lbs\\n\",'-'*55, sep='')\nprint(df[(booldf1) & (booldf2)])","e2032e04":"print(\"\\nDataFrame with only Age and Weight columns whose Height > 65 inch\\n\",'-'*68, sep='')\nprint(df[booldf1][['Age','Weight']])","dbbdc57c":"matrix_data = np.matrix('22,66,140;42,70,148;30,62,125;35,68,160;25,62,152')\nrow_labels = ['A','B','C','D','E']\ncolumn_headings = ['Age', 'Height', 'Weight']","ae722c85":"df = pd.DataFrame(data=matrix_data, index=row_labels, columns=column_headings)\nprint(\"\\nThe DataFrame\\n\",'-'*25, sep='')\ndf","e916bdae":"# It will reset our index to default index starting with 0 and make a new xolumn as index\nprint(\"\\nAfter resetting index\\n\",'-'*35, sep='')\ndf = df.reset_index()\ndf","e4f6a297":"df.drop('index',axis=1,inplace=True)","16ceb1fb":"print(\"\\nAfter resetting index with 'drop' option TRUE\\n\",'-'*45, sep='')\nprint(df.reset_index(drop=True))\n\"Student Teacher Engineer Doctor Nurse\".split()","68bca94a":"print(\"\\nAdding a new column 'Profession'\\n\",'-'*45, sep='')\ndf['Profession'] = \"Student Teacher Engineer Doctor Nurse\".split()\ndf","45d25657":"# Setting Index\nprint(\"\\nSetting 'Profession' column as index\\n\",'-'*45, sep='')\ndf.set_index('Profession')","219438be":"# Index Levels\noutside = ['G1','G1','G1','G2','G2','G2']\ninside = [1,2,3,1,2,3]\nhier_index = list(zip(outside,inside))","cf2eadec":"print(\"\\nTuple pairs after the zip and list command\\n\",'-'*45, sep='')\nprint(hier_index)","9df64b9f":"hier_index = pd.MultiIndex.from_tuples(hier_index)\nprint(\"\\nIndex hierarchy\\n\",'-'*25, sep='')\nprint(hier_index)","7726a1fd":"print(\"\\nIndex hierarchy type\\n\",'-'*25, sep='')\nprint(type(hier_index))","e3c2e313":"print(\"\\nCreating DataFrame with multi-index\\n\",'-'*37, sep='')\n#np.random.seed(101)\ndf1 = pd.DataFrame(data=np.round(rn(6,3)), index= hier_index, columns= ['A','B','C'])\ndf1","2d3935da":"print(\"\\nGrabbing a cross-section from outer level\\n\",'-'*45, sep='')\nprint(df1.xs('G1'))","a6027f1f":"# multi-indexing","c1aacc34":"# cross tabulation like pivot table","05c25af8":"#### Subsetting DataFrame","e9ad3933":"## Loading data in DataFrame.","d3b8b843":"# *BOOLEAN MASKING*","d16f978c":"## Always remember to use bitwise operator for adding logical conditions to boolean dataframes","bb59435a":"### Selecting\/indexing Rows\nLabel-based 'loc' method\n\nIndex (numeric) 'iloc' method","8f7aa523":"# Series"}}