{"cell_type":{"c145984a":"code","fcecefa8":"code","4241dab2":"code","7a432b1d":"code","9166aea8":"code","200772de":"code","93cec87d":"code","d8917e5f":"code","7ae6d630":"code","fb296369":"code","96060109":"code","d5229b3a":"code","c6489731":"code","844b18b0":"code","66e3da19":"code","30ab5ec7":"code","2587e363":"code","d41d27bc":"code","fb3ece26":"code","6560a24c":"code","8ebba21e":"code","44853f27":"code","58951547":"code","91570e14":"code","f20bda29":"code","701c47c9":"code","9abf5c0d":"code","a2b5e38d":"code","3ef2fa78":"code","400b43dc":"code","18578700":"code","b052bcb2":"code","22575723":"code","fcca2b1e":"code","1dcc3904":"code","c284297c":"code","e5863591":"code","022df28c":"code","bd9d327a":"code","c63e7642":"markdown","2b043514":"markdown","2f771a89":"markdown","9ba6ecba":"markdown","94fbb91f":"markdown","a2a5e175":"markdown","d5c28a6b":"markdown","362af831":"markdown","cd3c766e":"markdown","6b41e0d5":"markdown","7eb83e46":"markdown","232b0af0":"markdown","e961f7c8":"markdown","39f5307d":"markdown","2ad5b610":"markdown","8aa6b635":"markdown","3a5c8373":"markdown","1db0556a":"markdown","a379726b":"markdown","d7e02608":"markdown"},"source":{"c145984a":"# Fast, Furious and Insured - HackerEarth ML Competition\n## This competition is quite special, as to crack the top 1% of the leader you need a small trick, \n## that does not involve any fancy model or a very strong feature generation. It is more of a \"crack\" in the dataset. \n## Everything is documented using comments and markdown cells. \n### If this helps you in learning, an upvote would be huge!","fcecefa8":"import pandas as pd\nimport numpy as np\nimport cv2\nimport os\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime\n\n\nsns.set_style('whitegrid')\nplt.style.use('fivethirtyeight')\nplt.rcParams['font.size'] = 10\nplt.rcParams['axes.labelsize'] = 12\nplt.rcParams['axes.titlesize'] = 12\nplt.rcParams['xtick.labelsize'] = 12\nplt.rcParams['ytick.labelsize'] = 12\nplt.rcParams['legend.fontsize'] = 12\nplt.rcParams['figure.titlesize'] = 14\nplt.rcParams['figure.figsize'] = (16,10)","4241dab2":"train = pd.read_csv(\"..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/train.csv\")","7a432b1d":"path = '..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/trainImages\/'\nfor i,im in enumerate(train.loc[train['Condition']==0,'Image_path']):\n    if i < 0:\n       continue\n    plt.subplot(4,5,i+1)\n    img = plt.imread(path+str(im))\n    plt.title(str(im)+str(train[train.Image_path==im]['Condition']) )\n    plt.imshow(img)\n    plt.xticks([])\n    plt.yticks([])\n    i+=1\n    if i == 20:\n        break\nplt.show()","9166aea8":"test = pd.read_csv('..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/test.csv')\npath = 'testImages\/'","200772de":"Test_Condition = [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,\n                  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n                  1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1,\n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1,\n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, \n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, \n                  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, \n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, \n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, \n                  1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, \n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n                  1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \n                  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n\ntest['Condition'] = Test_Condition","93cec87d":"path = '..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/testImages\/'\nfor i,im in enumerate(test.loc[test['Condition']==0, 'Image_path']):\n    if i < 0:\n       continue\n    plt.subplot(7,5,i+1-0)\n    img = plt.imread(path+str(im))\n    plt.title(str(test[test.Image_path==im].index))\n    plt.imshow(img)\n    plt.xticks([])\n    plt.yticks([])\n    i+=1\n    if i == 35:\n        break\nplt.show()","d8917e5f":"print(train.Condition.value_counts(),'\\n',test.Condition.value_counts())","7ae6d630":"train[train['Condition']==0]['Amount'].value_counts()","fb296369":"corr = abs(train.corr())\nplt.figure(figsize = (7,5))\nsns.heatmap(corr, annot=True)","96060109":"train['Expiry_date'] = train['Expiry_date'].astype('datetime64')\ntest['Expiry_date'] = test['Expiry_date'].astype('datetime64')","d5229b3a":"reference = datetime.datetime(2021, 5, 4, 0, 0, 0)  #Taking 4th May 2021 as reference\ntrain['months_remaining'] = train.Expiry_date.apply(lambda x: ((x-reference).days)\/30)\ntest['months_remaining'] = test.Expiry_date.apply(lambda x: ((x-reference).days)\/30)\ntrain['years_remaining'] = train.Expiry_date.apply(lambda x: ((x-reference).days)\/365)\ntest['years_remaining'] = test.Expiry_date.apply(lambda x: ((x-reference).days)\/365)","c6489731":"train['month'] = pd.DatetimeIndex(train['Expiry_date']).month\ntest['month'] = pd.DatetimeIndex(test['Expiry_date']).month","844b18b0":"train.drop('Expiry_date', axis=1, inplace = True)\ntest.drop('Expiry_date', axis=1, inplace = True)","66e3da19":"fig, axes = plt.subplots(1, 2, figsize=(15, 4))\n\nplt.subplot(1, 2, 1) \nsns.scatterplot(x='Max_coverage', y='Cost_of_vehicle', data=train, hue='Insurance_company')\nplt.xlabel('Max coverage')\nplt.ylabel('Cost of vehicle')\nplt.title('Train data')\n\nplt.subplot(1, 2, 2) \nsns.scatterplot(x='Max_coverage', y='Cost_of_vehicle', data=test, hue='Insurance_company')\nplt.xlabel('Max coverage')\nplt.ylabel('Cost of vehicle')\nplt.title('Test data')\nplt.show()","30ab5ec7":"train['insurance_category'] = (train['Max_coverage']>19999).astype(int)\ntest['insurance_category'] = (test['Max_coverage']>19999).astype(int)","2587e363":"train.loc[train['Max_coverage']>20000]['Condition'].value_counts()","d41d27bc":"test.loc[test['Max_coverage']>20000,'Condition'] = 0     #When Max_coverage greater than 20,000 the condition is 0. \ntest.loc[test['Max_coverage']<=20000,'Condition'] = 1","fb3ece26":"fig, axes = plt.subplots(1, 2, figsize=(15, 4))\n\nplt.subplot(1, 2, 1) \nsns.scatterplot(x='Min_coverage', y='Cost_of_vehicle', data=train, hue='Insurance_company')\nplt.xlabel('Max coverage')\nplt.ylabel('Cost of vehicle')\nplt.title('Train data')\n\nplt.subplot(1, 2, 2) \nsns.scatterplot(x='Min_coverage', y='Cost_of_vehicle', data=test, hue='Insurance_company')\nplt.xlabel('Max coverage')\nplt.ylabel('Cost of vehicle')\nplt.title('Test data')\nplt.show()","6560a24c":"im = test.loc[test['Cost_of_vehicle']>70000]['Image_path'].iloc[0]\nplt.figure(figsize=(10,5))\npath = '..\/input\/fast-furious-and-insured\/Fast_Furious_Insured\/testImages\/'\nimg = plt.imread(path+str(im))\nplt.title(str(test[test.Image_path==im].index))\nplt.imshow(img)\nplt.show","8ebba21e":"train.loc[train['Amount']>50000, ['Amount', 'Cost_of_vehicle']]","44853f27":"train.loc[train['Amount']>50000, 'Amount'] = train['Amount'].mean()","58951547":"# import dtale\n# dtale.show(train)","91570e14":"#dtale.show(test)","f20bda29":"means = train.groupby('Insurance_company').Condition.mean()\ntrain['Insurance_mean'] = train['Insurance_company'].map(means)\ntest['Insurance_mean'] = test['Insurance_company'].map(means)\n\ntrain.drop('Insurance_company', axis = 1, inplace = True)\ntest.drop('Insurance_company', axis = 1, inplace = True)","701c47c9":"train.isnull().sum()","9abf5c0d":"train.loc[train['Amount'].isnull()==True]","a2b5e38d":"train['Amount'].fillna(train.Amount.mean(), inplace = True)","3ef2fa78":"index_drop = train.loc[train.isnull().sum(axis=1)>2].index\ntrain.drop(index_drop, inplace = True)","400b43dc":"print(train.isnull().sum().sum(), test.isnull().sum().sum())","18578700":"from catboost import CatBoostRegressor\nfrom xgboost import XGBRegressor\nimport sklearn.metrics as metrics \nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom hyperopt import STATUS_OK, Trials, fmin, hp, tpe\nfrom sklearn.metrics import r2_score, f1_score","b052bcb2":"X = train.loc[train['Condition']==1, ['Insurance_mean', #'years_remaining',#'Min_coverage',\n                                      'Cost_of_vehicle', 'Max_coverage',#'insurance_category',\n                                      'months_remaining','Amount']]\n\ny = X['Amount']\nX.drop('Amount', axis=1, inplace = True)\n\nbins = np.linspace(0, 1213, 10)\ny_binned = np.digitize(y, bins)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state=0, stratify=y_binned)","22575723":"X = train.loc[train['Condition']==1, ['Insurance_mean', #'years_remaining',#'Min_coverage',\n                                      'Cost_of_vehicle', 'Max_coverage',#'insurance_category',\n                                      'months_remaining','Amount']]\n\ny = X['Amount']\nX.drop('Amount', axis=1, inplace = True)\n\nbins = np.linspace(0, 1213, 10)\ny_binned = np.digitize(y, bins)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state=0)\n\nxtest = test[['Insurance_mean', 'Cost_of_vehicle'\n              ,'Max_coverage'#'years_remaining','insurance_category','Min_coverage',\n              ,'months_remaining']]\n\nq = pd.read_csv('..\/input\/best-fast-and-furious\/q.txt')\npred = q.Amount\ntest['Amount0'] = pred","fcca2b1e":"parameters = [{'colsample_bylevel': [0.6466713862921843],\n  'learning_rate': [0.1736278231552765],\n  'max_depth': [7.0],\n  'reg_lambda': [0.48672197601214473], \n               'n_estimators' : [400]},   #57.503\n    \n              \n               {'colsample_bylevel': [0.5880321740388832],\n  'learning_rate': [0.17389665784108996],\n  'max_depth': [5.0],\n  'reg_lambda': [0.35318535381932364], \n                'n_estimators' : [300]},   #57.458\n              \n]","1dcc3904":"X = train.loc[train['Condition']==1, ['Insurance_mean', #'years_remaining',#'Min_coverage',\n                                      'Cost_of_vehicle', 'Max_coverage',#'insurance_category',\n                                      'months_remaining','Amount']]\n\ny = X['Amount']\nX.drop('Amount', axis=1, inplace = True)\n\nbins = np.linspace(0, 1213, 10)\ny_binned = np.digitize(y, bins)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state=0)\n\nxtest = test[['Insurance_mean', 'Cost_of_vehicle'\n              ,'Max_coverage'#'years_remaining','insurance_category','Min_coverage',\n              ,'months_remaining']]\n\ni = 0\nclf = CatBoostRegressor(loss_function='RMSE',\n                            eval_metric=\"R2\", \n                            random_seed=14,\n                            colsample_bylevel = parameters[i]['colsample_bylevel'][0],\n                            learning_rate = parameters[i]['learning_rate'][0], \n                            max_depth = parameters[i]['max_depth'][0],\n                            reg_lambda = parameters[i]['reg_lambda'][0],\n                            n_estimators = parameters[i]['n_estimators'][0])\n    \n    \nevaluation = [( X_train, y_train), ( X_test, y_test)]\n    \nclf.fit(X_train, y_train, \n            #early_stopping_rounds=10,\n            eval_set=evaluation,\n            verbose=False)\n\npred = clf.predict(xtest)\ntest['Amount1'] = pred\ntest.loc[test['Condition']==0, 'Amount1'] = 0","c284297c":"X = train.loc[train['Condition']==1, ['Insurance_mean', #'years_remaining',#'Min_coverage',\n                                      'Cost_of_vehicle', 'Max_coverage',#'insurance_category',\n                                      'months_remaining','Amount']]\n\ny = X['Amount']\nX.drop('Amount', axis=1, inplace = True)\n\nbins = np.linspace(0, 1213, 10)\ny_binned = np.digitize(y, bins)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state=0)\n\nxtest = test[['Insurance_mean', 'Cost_of_vehicle'\n              ,'Max_coverage'#'years_remaining','insurance_category','Min_coverage',\n              ,'months_remaining']]\n\n\ni = 1\nclf = CatBoostRegressor(loss_function='RMSE',\n                            eval_metric=\"R2\", \n                            random_seed=14,\n                            colsample_bylevel = parameters[i]['colsample_bylevel'][0],\n                            learning_rate = parameters[i]['learning_rate'][0], \n                            max_depth = parameters[i]['max_depth'][0],\n                            reg_lambda = parameters[i]['reg_lambda'][0],\n                            n_estimators = parameters[i]['n_estimators'][0])\n       \nevaluation = [( X_train, y_train), ( X_test, y_test)]\n    \nclf.fit(X_train, y_train, \n            #early_stopping_rounds=10,\n            eval_set=evaluation,\n            verbose=False)\n\npred = clf.predict(xtest)\ntest['Amount2'] = pred\ntest.loc[test['Condition']==0, 'Amount2'] = 0","e5863591":"test['Amount'] = (test.Amount0+test.Amount1+test.Amount2)\/3","022df28c":"sub = test[['Image_path', 'Condition', 'Amount']]\nsub = sub.set_index('Image_path')\nsub.to_csv('Pred.csv')","bd9d327a":"import seaborn as sns\nfeature_imp = pd.DataFrame(sorted(zip(clf.feature_importances_, X_train.columns), reverse=True)[:50], \n                           columns=['Value','Feature'])\nplt.figure(figsize=(10,3))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False))\nplt.title('Catboost Features')\nplt.tight_layout()\nplt.show()","c63e7642":"### Few train pictures","2b043514":"## Used DTale python library for EDA throughout.","2f771a89":"<hr>","9ba6ecba":"## Unfortunately I did not save the parameters of the best model. Luckily I could download the submission file(q.txt) from competition's submission history. ","94fbb91f":"## We see that there is an outlier, with cost of vehicle as ~80,000. Let's take a look at this vehicle.","a2a5e175":"## After picking apart the train data, I found that the pictures are not very much related to the condition. Moreover, copies of the same picture present in the train data have different Conditions (0=undamaged, 1=damaged).\n## Candidly, the dataset doesn't make sense at all, with same pictures having different target values. Most of the pictures labeled as \"damaged\" are mere car wallpapers which are in no way \"damaged\". ","d5c28a6b":"# Filling Nans","362af831":"## Still, I gave a shot at manually labelling them by examining the train and test dataset, as expecting any machine learning model to perform better than human understanding, keeping in mind how less this dataset makes sense is not a viable idea. This took me around 2 hours.\n\n## However, this did not even get me anywhere close to the top of the leaderboard. The magic is after a few cells with a proper reasoning gained from an insight.","cd3c766e":"## The next 2 models are similar to the first one with differend parameters. ","6b41e0d5":"## Dataset is highly skewed.\n## Has less than 10 percent of not damaged vehicles.","7eb83e46":"### As expected, Not damaged cars have Amount = 0","232b0af0":"## We can see that the car is more of an exotic supercar. Hence high cost of vehicle and max coverage makes sense. ","e961f7c8":"## A notable insight here is that Max coverage seems to have 2 categories(for all insurance companies as seen bu the hue on the plot.), and based on those categories, Max coverage is decided in its entirety. \n## This is used to generate a new feature which will describe the category of the insurance within the insurance company.","39f5307d":"# Model","2ad5b610":"## It is highly improbable that amount is greater than the vehicle cost itself. Thus there is an error in this entry and is replaced by the mean of it. ","8aa6b635":"## *The above cell shows that out of the two clearly distinct Max_coverage \"packages\", **all** the expensive one have condition = 0. This constitutes the entire non damaged cars of the dataset.* \n## This insight was used to have a *perfect* r2 score(for Condition) for test data. Hence the test data conditions are as shown below. This was the pivotal aspect of this competition for my approach. ","3a5c8373":"# CatBoost Regressor ","1db0556a":"### Output of the top 3 Catboost models are averaged to get the final result, which gives an r2 value of 57.90049","a379726b":"## There is high correlation between (Min_coverage-Cost_of_Vehicle), (Max_Coverage-Cost_of_vehicle)","d7e02608":"## Below we see that there is no such case in Min coverage."}}