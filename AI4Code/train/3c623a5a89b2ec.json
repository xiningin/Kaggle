{"cell_type":{"727f30fc":"code","cb8ae8e5":"code","1ee944e9":"code","db91008f":"code","2bf11270":"code","ecd6ef4c":"code","5148e165":"code","8a2db1a7":"code","d55e4135":"code","114fe23f":"code","85c708a5":"code","c3750c97":"code","e4e11fe3":"code","199bced8":"code","631320c3":"code","f72a512d":"code","38e2ba78":"code","39150019":"code","45bba0a2":"code","6ff7c577":"code","10d3937d":"code","b2815a98":"code","b690a7cd":"code","528ad2b7":"code","6a22f15e":"code","0448331b":"code","b56f7030":"code","68f71566":"code","ab9676a7":"code","062a64a8":"code","04cea6f2":"code","9b9900c0":"code","4c3e867f":"code","c08f5bc7":"code","5cfbb2ae":"code","ed526ddf":"code","9876b6af":"code","520c3888":"code","ed68f07a":"code","ac29d85c":"code","fd855c5e":"code","ad6b6e1b":"code","1db104ea":"code","7d888249":"code","d4a5228a":"code","eb52ac2b":"code","8b54df84":"code","384e10a0":"code","c89ec1eb":"code","2997c6ac":"code","6b8ee386":"code","d7f4acc3":"code","f7bb0bb5":"code","f594fa42":"code","646bef43":"code","39df7b1e":"code","f4c0924d":"code","dce7c553":"code","12da7e2e":"code","62f5d15d":"code","b3b12915":"code","b0649a28":"code","b93ff9e2":"code","cfcffc3e":"code","97520a9b":"code","0a4e6d2c":"code","19278155":"code","3e834853":"code","609c8a34":"code","06c4ae25":"code","beca026e":"code","f110a556":"code","505ec097":"code","efa0b79e":"code","d12c1ca8":"code","49b44a49":"code","5ca1c8b3":"code","16a675bb":"code","4a28275d":"code","3789a2db":"code","b6178449":"code","1f13ef93":"code","42d00cea":"code","52679dbd":"code","4f864ea8":"code","16405fe4":"code","e38777b9":"code","c9e99886":"code","14f13d84":"code","cfc81ce1":"code","43a8baef":"code","2654e8c3":"code","be9d1de3":"code","b62f0481":"code","939478aa":"code","ef32c4da":"code","70806728":"code","2fb49a6d":"code","71dee60f":"code","083cd064":"code","54440b3f":"code","900ac6e4":"code","14e0ac0d":"code","7bfdf273":"code","e3868998":"code","5575c78c":"code","d56ca4dc":"code","e2da6982":"code","73a91040":"code","b6cce8f0":"code","3cb2911d":"code","f0e40784":"code","a38fb498":"code","5085a298":"code","6cb8a222":"code","583e5956":"code","5cff9489":"code","3ce680d2":"code","d41bb0a5":"code","f067b6f1":"code","76b8fd24":"code","64516168":"code","8285b7df":"code","4a6d272a":"code","6f28b76b":"code","41d808af":"code","56130053":"code","27b04577":"code","bf861473":"code","104492f1":"code","e9670bcc":"code","0bfa7fdf":"code","72faea72":"code","8fbe722a":"markdown","369f2a9d":"markdown","59ffeb76":"markdown","b356fe7f":"markdown","2b74a632":"markdown","1a2599d8":"markdown","64ef3485":"markdown","7d7e4c3c":"markdown","1c22a179":"markdown","a7e5dfee":"markdown","798805c6":"markdown","6436a744":"markdown","430c79df":"markdown","a48df7e9":"markdown","7759eb60":"markdown","a461f9db":"markdown","3c20b463":"markdown","19b9c093":"markdown","6acdfc15":"markdown","d2c2aba4":"markdown","7e14b6f6":"markdown","76e87dee":"markdown","582998ce":"markdown","9cf18cdc":"markdown","dda8beac":"markdown","4ca9dc75":"markdown","a744b878":"markdown","5220a69b":"markdown","ae7269b5":"markdown","1f2c3d95":"markdown","2307c2c3":"markdown","94ed46bb":"markdown","491526fa":"markdown","3f9488c9":"markdown","b058a889":"markdown","a6168771":"markdown","cbced110":"markdown","7326cd4a":"markdown","6f4a69c9":"markdown","d5dd17af":"markdown","3b8b69ba":"markdown","6a6c3803":"markdown","6b632e43":"markdown","94cbefaf":"markdown","449f2961":"markdown","a2db81d1":"markdown","ce473f0d":"markdown","20a6448a":"markdown","8fa93063":"markdown"},"source":{"727f30fc":"import numpy as np\nimport pandas as pd\nimport missingno as msno #Graphically analyse the misssing values\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer\nimport sklearn.preprocessing as pre\nimport sklearn.model_selection as ms\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.neighbors import KNeighborsRegressor","cb8ae8e5":"df = pd.read_csv(\"..\/input\/ml-hackathon\/train_SJC.csv\")\ndf.head()","1ee944e9":"#Dataset Information\ndf.info()","db91008f":"#Taking a copy of the data for preprocessing and model building\ndata = df.copy()","2bf11270":"#Dataset information\ndata.info()","ecd6ef4c":"data.shape","5148e165":"data.apply(pd.Series.nunique)","8a2db1a7":"duplicate = data[data.duplicated()]\nduplicate.head()","d55e4135":"#For Categorical\ndata.select_dtypes(include='object').describe().transpose()","114fe23f":"#For Numerical\ndata.select_dtypes(exclude='object').describe().transpose()","85c708a5":"#isnull function returns a boolean information about whether there is any null value or not.\n#by adding sum function, we take the total count of the null values in each of the columns.\ndata.isnull().sum()","c3750c97":"msno.matrix(data,color=(0.20, 0.20, 0.20))","e4e11fe3":"data['MaritalStatus'].value_counts()","199bced8":"data['MaritalStatus'].fillna(data['MaritalStatus'].mode()[0],inplace = True)","631320c3":"data['MaritalStatus'].isnull().sum()","f72a512d":"imp = SimpleImputer(missing_values=np.nan, strategy='mean')","38e2ba78":"data.iloc[:,8:9]","39150019":"data.iloc[:,8:9] = imp.fit_transform(data.iloc[:,8:9])","45bba0a2":"data.iloc[:,10:11]","6ff7c577":"data.iloc[:,10:11] = imp.fit_transform(data.iloc[:,10:11])","10d3937d":"data.isnull().sum()","b2815a98":"#initial format\ndf['DateTimeOfAccident']","b690a7cd":"data['DateTimeOfAccident']=pd.to_datetime(data['DateTimeOfAccident'])","528ad2b7":"#after transformation\ndata['DateTimeOfAccident']","6a22f15e":"df['DateReported']","0448331b":"data['DateReported']=pd.to_datetime(data['DateReported'])","b56f7030":"data['DateReported']","68f71566":"data.info()","ab9676a7":"plt.figure(figsize = (10, 10))\nsns.heatmap(data.corr(), annot = True, cmap = 'Blues')\nplt.title('Correlation matrix for numerical features')","062a64a8":"data['Age'].describe()","04cea6f2":"sns.distplot(data['Age'])","9b9900c0":"#converting age as bins\ndata['Age_Bin']=pd.cut(data['Age'],\n                       bins=[10,20,40,60,80],\n                       labels=['Teenager','Adult','Middle Age', 'Old'])","4c3e867f":"data['Age_Bin'].value_counts()","c08f5bc7":"sns.distplot(data['WeeklyWages'])","5cfbb2ae":"data['WeeklyWages'].describe()","ed526ddf":"data['DaysWorkedPerWeek'].mode()","9876b6af":"data[data['WeeklyWages']>1000].count()","520c3888":"data.drop(data[data['WeeklyWages']>1000].index, inplace = True)","ed68f07a":"data.shape","ac29d85c":"sns.distplot(data['WeeklyWages'])","fd855c5e":"#converting weekly wage as bins\ndata['WeeklyWages_Bin']=pd.cut(data['WeeklyWages'],\n                               bins=[0,200,400,600,800,1000],\n                               labels=['Low','Slightly Low','Average','Slightly High','High'])","ad6b6e1b":"data['WeeklyWages_Bin'].value_counts()","1db104ea":"sns.distplot(data['HoursWorkedPerWeek'])","7d888249":"data[data['HoursWorkedPerWeek']>168]","d4a5228a":"data.drop(data[data['HoursWorkedPerWeek']>168].index, inplace = True)","eb52ac2b":"data.shape","8b54df84":"data['HoursWorkedPerWeek'].max()","384e10a0":"sns.distplot(data['HoursWorkedPerWeek'])","c89ec1eb":"data['HoursWorkedPerWeek'].describe()","2997c6ac":"data['HoursWorkedPerWeek'].mode()","6b8ee386":"data.select_dtypes(include='object').describe().transpose()","d7f4acc3":"data.select_dtypes(exclude='object').describe().transpose()","f7bb0bb5":"plt.figure(figsize = (10, 10))\nsns.heatmap(data.corr(), annot = True, cmap = 'Blues')\nplt.title('Correlation matrix for numerical features')","f594fa42":"data.plot.box(figsize = (16,6))\nplt.xticks(rotation = 90)","646bef43":"data['InitialIncurredCalimsCost'].describe()","39df7b1e":"data[data['InitialIncurredCalimsCost']>10000].count()","f4c0924d":"#data.drop(data[data['InitialIncurredCalimsCost']>10000].index, inplace = True)","dce7c553":"sns.distplot(data['UltimateIncurredClaimCost'])","12da7e2e":"data['UltimateIncurredClaimCost'].describe()","62f5d15d":"data[data['UltimateIncurredClaimCost']>1000000].count()","b3b12915":"data.drop(data[data['UltimateIncurredClaimCost']>1000000].index, inplace = True)","b0649a28":"data.plot.box(figsize = (16,6))\nplt.xticks(rotation = 90)","b93ff9e2":"sns.distplot(data['UltimateIncurredClaimCost'])","cfcffc3e":"data['Gender'].value_counts()","97520a9b":"sns.countplot(data['Gender'])","0a4e6d2c":"sns.countplot(data['PartTimeFullTime'])","19278155":"sns.scatterplot(x=data['Age_Bin'], y=data['WeeklyWages_Bin'], hue = data['PartTimeFullTime'])","3e834853":"sns.lineplot(x=data['DateTimeOfAccident'],y=data['UltimateIncurredClaimCost'],hue=data['WeeklyWages_Bin'],palette='muted')","609c8a34":"sns.lineplot(x=data['DateTimeOfAccident'],y=data['UltimateIncurredClaimCost'],hue=data['Age_Bin'],palette='muted')","06c4ae25":"sns.pairplot(data)","beca026e":"data.head()","f110a556":"list_encode = ['Gender', 'MaritalStatus', 'PartTimeFullTime', 'Age_Bin', 'WeeklyWages_Bin']","505ec097":"lb = pre.LabelEncoder()","efa0b79e":"for x in list_encode:\n    data[x]=lb.fit_transform(data[x])\ndata.head()","d12c1ca8":"data_encode = data.drop(['ClaimNumber','DateTimeOfAccident','DateReported',\n                     'Age','WeeklyWages','ClaimDescription'], axis = 1)","49b44a49":"data_encode.head()","5ca1c8b3":"data_scale=pre.minmax_scale(data_encode)","16a675bb":"data_scale=pd.DataFrame(data_scale,columns=data_encode.columns.tolist())","4a28275d":"data_scale.head()","3789a2db":"features = data_scale.drop(['UltimateIncurredClaimCost'],axis = 1)\ntarget = data_scale['UltimateIncurredClaimCost']","b6178449":"x_train1,x_test1,y_train1,y_test1 = ms.train_test_split(features,target,\n                                                    test_size = 0.3,\n                                                    random_state =111231)","1f13ef93":"model_LR = LinearRegression()\nmodel_LR.fit(x_train1,y_train1)\nimportance_LR = model_LR.coef_","42d00cea":"er = dict(zip(data_scale.columns,importance_LR))\ner","52679dbd":"input_vr = data_scale.drop(['UltimateIncurredClaimCost'],axis = 1)\noutput_vr = data['UltimateIncurredClaimCost']","4f864ea8":"x_train,x_test,y_train,y_test = ms.train_test_split(input_vr,output_vr,\n                                                    test_size = 0.3,\n                                                    random_state =111231)","16405fe4":"LR = LinearRegression()","e38777b9":"LR.fit(x_train,y_train)","c9e99886":"y_pred = LR.predict(x_test)\ny_pred","14f13d84":"tar_scr = LR.score(x_train,y_train)\ntes_scr = LR.score(x_test,y_test)\nrmse = np.sqrt(mean_squared_error(y_test,y_pred))","cfc81ce1":"finalreport = {'Linear Regression':[tar_scr,tes_scr,rmse]}\nReport  = pd.DataFrame(finalreport, index = ['Train Score','Test Score','RMSE'])\nReport","43a8baef":"from sklearn.model_selection import cross_val_score\nmse=cross_val_score(LR,input_vr,output_vr,scoring='neg_mean_squared_error',cv=10)\nmean_mse=np.mean(mse)\nRmse=np.sqrt(-mean_mse)\nRmse","2654e8c3":"finalreport1 = {'Linear Regression':[tar_scr,tes_scr,Rmse]}\nReport1  = pd.DataFrame(finalreport1, index = ['Train Score','Test Score','RMSE'])\nReport1","be9d1de3":"neighbors = np.arange(1,10)\ntrain_accuracy =np.empty(len(neighbors))\ntest_accuracy = np.empty(len(neighbors))\nfor i,k in enumerate(neighbors):\n    KNN = KNeighborsRegressor(n_neighbors=k,metric='minkowski')\n    KNN.fit(x_train, y_train)\n    train_accuracy[i] = KNN.score(x_train, y_train)\n    test_accuracy[i] = KNN.score(x_test, y_test)","b62f0481":"plt.title('k-NN Varying number of neighbors')\nplt.plot(neighbors, test_accuracy, label='Testing Accuracy')\nplt.plot(neighbors, train_accuracy, label='Training accuracy')\nplt.legend()\nplt.xlabel('Number of neighbors')\nplt.ylabel('Accuracy')\nplt.show()","939478aa":"KNN=KNeighborsRegressor(n_neighbors=10,metric='minkowski')","ef32c4da":"KNN.fit(x_train,y_train)","70806728":"y_pred_KNN = KNN.predict(x_test)","2fb49a6d":"np.sqrt(mean_squared_error(y_test,y_pred_KNN))","71dee60f":"data.shape","083cd064":"df_test = pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv\")\ndf_test.head()","54440b3f":"#Dataset Information\ndf_test.info()","900ac6e4":"#Taking a copy of the data for preprocessing and model building\ndata_test = df_test.copy()","14e0ac0d":"data_test.shape","7bfdf273":"#Dataset information\ndata_test.info()","e3868998":"duplicate = data_test[data_test.duplicated()]\nduplicate.head()","5575c78c":"#For Categorical\ndata_test.select_dtypes(include='object').describe().transpose()","d56ca4dc":"#For Numerical\ndata_test.select_dtypes(exclude='object').describe().transpose()","e2da6982":"#isnull function returns a boolean information about whether there is any null value or not.\n#by adding sum function, we take the total count of the null values in each of the columns.\ndata_test.isnull().sum()","73a91040":"data_test['MaritalStatus'].value_counts()","b6cce8f0":"data_test['MaritalStatus'].fillna(data_test['MaritalStatus'].mode()[0],inplace = True)","3cb2911d":"data_test.isnull().sum()","f0e40784":"data_test['DateTimeOfAccident']=pd.to_datetime(data_test['DateTimeOfAccident'])","a38fb498":"data_test['DateReported']=pd.to_datetime(data_test['DateReported'])","5085a298":"sns.distplot(data_test['Age'])","6cb8a222":"data_test['Age'].describe()","583e5956":"#converting age as bins\ndata_test['Age_Bin']=pd.cut(data_test['Age'],\n                       bins=[10,20,40,60,80,90],\n                       labels=['Teenager','Adult','Middle Age','Old','Very Old'])","5cff9489":"data_test['Age_Bin'].value_counts()","3ce680d2":"sns.distplot(data_test['WeeklyWages'])","d41bb0a5":"#converting weekly wage as bins\ndata_test['WeeklyWages_Bin']=pd.cut(data_test['WeeklyWages'],\n                               bins=[0,200,400,600,800,1000,10000],\n                               labels=['Low','Slightly Low','Average','Slightly High','High','Overfit'])","f067b6f1":"data_test['WeeklyWages_Bin'].value_counts()","76b8fd24":"data_test.head()","64516168":"ls = ['Age_Bin','WeeklyWages_Bin','Gender','MaritalStatus','PartTimeFullTime']","8285b7df":"for x in ls:\n    data_test[x]=lb.fit_transform(data_test[x])\ndata_test.head()","4a6d272a":"data_test_encode = data_test.drop(['ClaimNumber','DateTimeOfAccident','DateReported',\n                     'Age','WeeklyWages','ClaimDescription'], axis = 1)","6f28b76b":"data_test_encode.head()","41d808af":"data_test_scale=pre.minmax_scale(data_test_encode)","56130053":"data_test_scale=pd.DataFrame(data_test_scale,columns=data_test_encode.columns.tolist())","27b04577":"data_test_scale.head()","bf861473":"data_test_scale.shape","104492f1":"nr = LR.predict(data_test_scale)","e9670bcc":"nr.shape","0bfa7fdf":"csv = pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv\")\ncsv[\"UltimateIncurredClaimCost\"] = nr","72faea72":"csv.to_csv(\"Last Final Submission.csv\", index = False)","8fbe722a":"### 7. Data Encoding","369f2a9d":"- KNN","59ffeb76":"# Problem Statement\nPredict Workers Compensation claims using the realistic data give data tab.","b356fe7f":"Here we can see that the numerical count of the 'Age','WeeklyWages' and 'HoursWorkedPerWeek' doesnot have much impact on the target variable. So we try to bin them by looking into their distribution.","2b74a632":"### 4. Data Cleaning","1a2599d8":"### 1. Importing Packages","64ef3485":"We are going to import the Test dataset and perform all the operation that we did for the training data. **Donot Delete any rows**","7d7e4c3c":"Since the distance between testing and training scores are lesser when we move to higher neighbours, we conider the number of neighbours as 10.","1c22a179":"## Data Preprocessing","a7e5dfee":"Now we can do the binning in the data","798805c6":"Since the percentage of the missing values in the dataset is very low than the data, 1st we are trying Mean\/mode imputation.","6436a744":"As in the training data, for the test data too we did all the cleaning and preprocessing and finally we got the dataset to be tested.","430c79df":"#### considering the factor that a person working for 24 hours for 7 day, i kept the weekly age to the maximum as 1000","a48df7e9":"#### Descriptive statistics","7759eb60":"- **Linear Regression**","a461f9db":"Even though there are few features with negative weights, after the model tarining it is found that, all the above give features gives the lowest RMSE score","3c20b463":"### Conclusion\nThe task was to predict Workers Compensation claims using the realistic data give data tab. Even though there were no much missing values, the otliers were very high, which had significant influence in the model. Hence finding them and treating them was the major task. From the EDA performed, we observed that there is no multicolinearity in the given dataset. Linear Reression model gave the best RMSE value with more than 20% accuracy.","19b9c093":"input_vr = data_scale.drop(['UltimateIncurredClaimCost','Gender','DependentsOther','Age_Bin'],axis = 1)\noutput_vr = data['UltimateIncurredClaimCost']","6acdfc15":"### 5. Data Transformation","d2c2aba4":"### 10. ML Model (Linear Regression)","7e14b6f6":"- Date Transformation\n\nDate is an essential factor in any of the data. Here the date and time is not given in a proper standard way. We are going to transform the date and time in the data using DateTime function in pandas.","76e87dee":"- Data Binning\n\nWe bin the data if the frequency or counts of the data is not relevant for making the model.","582998ce":"Describe function helps us by decribing the dataset.","9cf18cdc":"Different methods can be adapted to treat the missing values.\n- Droping nullvalue rows\n- Mean\/mode imputation\n- KNN\/Regression based predictive imputation","dda8beac":"### 2. Loading the dataset","4ca9dc75":"#### since i scaled the target veriable, we get the RMSE score as 24248.648249","a744b878":"### 3. Dataset Information ","5220a69b":"**Correlation Plot**","ae7269b5":"### 9. Feature Selection","1f2c3d95":"The CVS output file is saved as Last Final Submission.","2307c2c3":"#### Assume that the wage sacle of the workers are equal\n#### The mode of the hours worked per week is 38 and mode number of days worked is 5. So the total working hour a day will be 7.5hrs. From the distribution of the weekly wage we can say that the average wage of the woker per week will be 420. This implies, wage per hour = 11. This creates an anomaly in the weekly wage data. The maximum weekly age is given as 7497 which is very high. ","94ed46bb":"In the above plot, there is a white line on the column 'HoursWorkedPerWeek'. This indicates the empytness of the value over there. ","491526fa":"I droped 26 rows with hours greater than 168","3f9488c9":"## Test data","b058a889":"Checking for duplicated values","a6168771":"75% of the data is less than 10000","cbced110":"## Machine Learning Pipeline","7326cd4a":"Graphically analyse the missing values","6f4a69c9":"#### 1 week = 7 days, 1 day = 24hrs \n#### => total hours a person can work in a week = 7*24 = 168hrs\n#### but in the data we have hours greater than 168, which is an anomaly, and hence to be treated\n","d5dd17af":"After performing modelling for this dataset using Machine Learning algorithms like Linear Regression, cross validation, KNN, Lasso and Ridge regressions. It was found that the cross validation linear regression model gave the lowest RMSE value. Hence Cross validation Linear Regression was considered as the primary model.","3b8b69ba":"- **Cross Validation Method**","6a6c3803":"Categorical variable","6b632e43":"#### Outlier analysis","94cbefaf":"## Loading the Data","449f2961":"#### After doing the cross validation, we get the RMSE value as 24125.086133, which is less than the normal Linear Regression Model","a2db81d1":"Numerical Variable","ce473f0d":"### 8. Data Normalisation","20a6448a":"We passed our dataset to Linear regression model and hence to obtain the final output.","8fa93063":"### 6. EDA"}}