{"cell_type":{"d1bfd87a":"code","dda61378":"code","cb93f5e0":"code","dddf8f58":"code","8237e3a0":"code","3859557c":"code","096d4fb1":"code","f4878f07":"code","52298d40":"code","7ee778d3":"code","cfddbe34":"code","0dc12008":"code","17f7b9d6":"code","d943aa16":"code","52ceeb3d":"code","aab58434":"code","8ecaae90":"code","db9a7a81":"code","24dd69a1":"code","9fbe5b64":"code","463fd46b":"code","e8194517":"code","fea51bc7":"code","717dae9c":"code","f5ac7e00":"code","4542bdff":"code","6bce946f":"code","56f9045d":"markdown","5450d439":"markdown","ee39ca2d":"markdown","2c1c6782":"markdown"},"source":{"d1bfd87a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","dda61378":"# Read the dataset using pandas\ndf = pd.read_csv(\"..\/input\/diabetes-risk-prediction-dataset\/diabetes_data_upload.csv\")\n\n# Display first five entries\ndf.head()","cb93f5e0":"# Display last five entries\ndf.tail()","dddf8f58":"# To know numberb of columns an rows\ndf.shape","8237e3a0":"# to know the Dtype of the features\ndf.info()","3859557c":"# To find if there are any missing values\ndf.isnull().sum()","096d4fb1":"# Countplot for the categorical features\nfor col in df.columns[~(df.columns.isin(['Age']))]:\n    sns.countplot(df[col])\n    plt.show()","f4878f07":"# distributions plot for feature 'Age'\nsns.distplot(df.Age)\nplt.show()","52298d40":"# Since majority of the features are object time so using label encoding\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\nfor col in df.columns[~(df.columns.isin(['Age']))].tolist():\n    df[col] = le.fit_transform(df[col])","7ee778d3":"# Display first five entries after label Encoding\ndf.head()","cfddbe34":"# Display last five entries after label Encoding\ndf.tail()","0dc12008":"X = df.drop('class',axis=1)\ny = df['class']","17f7b9d6":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=1)","d943aa16":"from sklearn.linear_model import LogisticRegression\n\nlog_reg = LogisticRegression(solver='liblinear', fit_intercept=True, random_state=1)\n\nlog_reg.fit(X_train, y_train)","52ceeb3d":"#For train data\ny_prob_train = log_reg.predict_proba(X_train)[:,1]\ny_pred_train = log_reg.predict(X_train)","aab58434":"# for test data\ny_prob = log_reg.predict_proba(X_test)[:,1]\ny_pred = log_reg.predict(X_test) #to change threshold should do it manually","8ecaae90":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n\nprint('Accuracy for test: ',accuracy_score(y_test,y_pred))","db9a7a81":"print('Confussion matrix - Train: ','\\n',confusion_matrix(y_train,y_pred_train))\nprint('Overall accuracy - Train: ',accuracy_score(y_train,y_pred_train))","24dd69a1":"print('Confussion matrix - Test: ','\\n',confusion_matrix(y_test,y_pred))\nprint('Overall accuracy - Test: ',accuracy_score(y_test,y_pred))","9fbe5b64":"# for train\nprint(classification_report(y_train,y_pred_train))","463fd46b":"# for test\nprint(classification_report(y_test,y_pred))","e8194517":"from sklearn.metrics import roc_auc_score, roc_curve\n\nprint('AUC of train: ', roc_auc_score(y_train, y_prob_train)) #for train data\n\nfpr, tpr, thresholds = roc_curve(y_train, y_prob_train)\n\nplt.plot(fpr, tpr)\nplt.plot(fpr, fpr, 'r-')\nplt.xlabel('FPR')\nplt.ylabel('TPR')\nplt.title('ROC_Curve of Train data')\nplt.show()","fea51bc7":"print('AUC of test: ', roc_auc_score(y_test, y_prob)) #for test data\n\nfpr, tpr, thresholds = roc_curve(y_test, y_prob)\n\nplt.plot(fpr, tpr)\nplt.plot(fpr, fpr, 'r-')\nplt.xlabel('FPR')\nplt.ylabel('TPR')\nplt.title('ROC_Curve of Test data')\nplt.show()","717dae9c":"thresholds #first one is more than 1","f5ac7e00":"thresholds[thresholds>1]=1 #made value more than 1 to 1","4542bdff":"thresholds","6bce946f":"print('AUC of train: ', roc_auc_score(y_train, y_prob_train)) #for train data\n\nfig, ax = plt.subplots()\n\nax.plot(fpr, tpr) #blue color\nax.plot(fpr, fpr, 'r-') #red color\nplt.xlabel('FPR')\nplt.ylabel('TPR')\nax1 = ax.twinx()\nax1.plot(fpr,thresholds) \nax1.set_ylabel('Threshold')\n\nplt.title('ROC_Curve of Train data')\nplt.show()","56f9045d":"### ROC Analysis:","5450d439":"### Modelling","ee39ca2d":"### Important important libraries:","2c1c6782":"### Splitting dataset in train and test:"}}