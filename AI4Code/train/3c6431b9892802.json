{"cell_type":{"c9f74113":"code","40ebee7e":"code","fec99d47":"code","a0f78de3":"code","1c9f3c48":"code","254466e3":"code","cff0d3d4":"code","3700daaa":"code","ba4df128":"code","f7575f4d":"code","c13ea9ee":"code","2c5be697":"code","8feccc99":"markdown","4bf28d7f":"markdown","f13c4900":"markdown","e90d73c6":"markdown"},"source":{"c9f74113":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression ","40ebee7e":"# Read files\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\n# Train.csv will contain the details of a subset of the passengers on board (891 to be exact) and importantly, the \u201cground truth\u201d.\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")\n# The test.csv dataset contains similar information but does not disclose the \u201cground truth\u201d for each passenger. It\u2019s your job to predict these outcomes.\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain.head()","fec99d47":"train.info()","a0f78de3":"fig, ax = plt.subplots(1,4, figsize=(15,3))\n\ntrain.Sex.value_counts().plot(kind='bar', ax=ax[0])\ntrain.Embarked.value_counts().plot(kind='bar', ax=ax[1])\ntrain.Pclass.value_counts().plot(kind='bar', ax=ax[2])\n\ndf_plot = train.groupby(['Pclass', 'Embarked']).size().reset_index().pivot(columns='Pclass', index='Embarked', values=0)\ndf_plot.apply(lambda x: x\/x.sum(), axis=1).plot(kind='bar', stacked=True, ax=ax[3])","1c9f3c48":"train.drop(['PassengerId'], axis=1).hist(figsize=(20,10))","254466e3":"pclass_dummies = pd.get_dummies(train.Pclass, prefix = 'Pcclass')\nembarked_dummies = pd.get_dummies(train.Embarked, prefix = 'Embarked')\nsex_dummies = pd.get_dummies(train.Sex, prefix = 'Sex')\n\ntrain_y = train['Survived']\n\ntitanic_train = train.drop(['PassengerId','Name','Ticket','Cabin','Pclass','Embarked','Sex','Survived'], axis=1)\ntitanic_train[\"Age\"].fillna(train[\"Age\"].mean(), inplace = True)\ntitanic_train[\"Fare\"].fillna(train[\"Fare\"].mean(), inplace = True)\n\ntitanic_train = pd.concat([titanic_train,pclass_dummies,embarked_dummies,sex_dummies], axis=1)\ntitanic_train.head()","cff0d3d4":"titanic_train[titanic_train.isna().any(axis=1)]","3700daaa":"reg = LogisticRegression().fit(titanic_train, train_y)\nreg.score(titanic_train, train_y)","ba4df128":"pclass_dummies = pd.get_dummies(test.Pclass, prefix = 'Pcclass')\nembarked_dummies = pd.get_dummies(test.Embarked, prefix = 'Embarked')\nsex_dummies = pd.get_dummies(test.Sex, prefix = 'Sex')\n\ntitanic_test = test.drop(['PassengerId','Name','Ticket','Cabin','Pclass','Embarked','Sex'], axis=1)\ntitanic_test[\"Age\"].fillna(train[\"Age\"].mean(), inplace = True)\ntitanic_test[\"Fare\"].fillna(train[\"Fare\"].mean(), inplace = True)\n\ntitanic_test = pd.concat([titanic_test,pclass_dummies,embarked_dummies,sex_dummies], axis=1)\ntitanic_test","f7575f4d":"titanic_test[titanic_test.isna().any(axis=1)]","c13ea9ee":"pred = reg.predict(titanic_test)\n\nmy_submission = test[['PassengerId']]\nmy_submission['Survived'] = pred\nmy_submission.head()","2c5be697":"my_submission.to_csv('my_submission.csv', index=False)","8feccc99":"# Titanic: Machine Learning from Disaster\n\n## The Challenge\nThe sinking of the Titanic is one of the most infamous shipwrecks in history.\n\nOn April 15, 1912, during her maiden voyage, the widely considered \u201cunsinkable\u201d RMS Titanic sank after colliding with an iceberg. Unfortunately, there weren\u2019t enough lifeboats for everyone onboard, resulting in the death of 1502 out of 2224 passengers and crew.\n\nWhile there was some element of luck involved in surviving, it seems some groups of people were more likely to survive than others.\n\nIn this challenge, we ask you to build a predictive model that answers the question: \u201cwhat sorts of people were more likely to survive?\u201d using passenger data (ie name, age, gender, socio-economic class, etc).","4bf28d7f":"### 1. Import libraries and read all files","f13c4900":"## Features and Transformations\n| categorical        \t| numerical         \t|\n|--------------------\t|-------------------\t|\n| Survived - boolean \t| Age - continuous  \t|\n| Pclass - ordinal   \t| SibSp - discrete  \t|\n| Name - nominal       \t| Parch  - discrete \t|\n| Sex - boolean        \t| Fare - continuous \t|\n| Ticket - nominal     \t|                   \t|\n| Cabin - nominal     \t|                   \t|\n| Embarked - nominal  \t|                   \t|\n","e90d73c6":"## features Transformation\nSurvived - True and False\n\nPcclass - boolean \n* Pcclass_1\n* Pcclass_2\n* Pcclass_3\n\nName - removed for now\n\nTicket - removed for now\n\nCabin - removed for now\n\nEmbarked - boolean\n* Embarked_C\n* Embarked_Q\n* Embarked_S\n"}}