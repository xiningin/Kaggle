{"cell_type":{"015dfece":"code","fb13317a":"code","02101d8c":"code","ed501681":"code","3ba1f282":"code","46a77633":"code","33669424":"code","41954009":"code","ae186897":"code","48d06675":"code","8d0bb3ed":"markdown","bab7f191":"markdown","cabab563":"markdown","18c0e19e":"markdown","2052a25e":"markdown","187aac69":"markdown","c33d5fe3":"markdown","f7b9659d":"markdown","062d25b6":"markdown"},"source":{"015dfece":"import pandas as pd, numpy as np, os\nimport warnings\nimport random\nwarnings.filterwarnings('ignore')\npd.set_option('max_columns',None)\nimport gc\n\nfrom sklearn.metrics import roc_auc_score,auc, roc_curve\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingClassifier\nfrom sklearn.model_selection import KFold, StratifiedKFold","fb13317a":"# helper functions\ndef get_auc(y_true, y_hat):\n    fpr, tpr, _ = roc_curve(y_true, y_hat)\n    score = auc(fpr, tpr)\n    return score\n\ndef seed_everything(seed=42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)","02101d8c":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")","ed501681":"TARGET = 'Survived'\nFOLD = 5\nSEED = 42\nseed_everything(SEED)","3ba1f282":"drop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","46a77633":"y = train['Survived']\nX = train.drop(['Survived'], axis=1)\nX_test = test","33669424":"hist_params = {'l2_regularization': 1.3244040135051264e-10,\n               'early_stopping': 'True',\n               'learning_rate': 0.01, \n#                'max_iter': 100, \n               'max_depth': 5, \n#                'max_bins': 129, \n#                'min_samples_leaf': 13449, \n#                'max_leaf_nodes': 68\n              }","41954009":"#check of all the columns in train is in test set\nassert X.columns.to_list() == X_test.columns.to_list()\n\nmeta_pred_tmp = []\nscores_tmp = []\n\n# create cv\nkf = StratifiedKFold(n_splits=FOLD, shuffle=False, random_state=SEED)\n\nfor fold, (idx_train, idx_valid) in enumerate(kf.split(X, y)):\n    # create train, validation sets\n    X_train, y_train = X.iloc[idx_train], y.iloc[idx_train]\n    X_valid, y_valid = X.iloc[idx_valid], y.iloc[idx_valid]\n    \n    model = HistGradientBoostingClassifier(**hist_params)\n    model.fit(X_train, y_train)\n    # validation prediction\n    pred_valid = model.predict_proba(X_valid)[:,1]\n    \n    score = get_auc(y_valid, pred_valid)\n    scores_tmp.append(score)\n    \n    print(f\"Fold: {fold + 1} Score: {score}\")\n    print('--'*20)\n    \n    # test prediction based on oof_set\n    y_hat = model.predict_proba(X_test)[:,1]\n    meta_pred_tmp.append(y_hat)\n# print overall validation scores\nprint(f\"Overall Validation Score | Meta: {np.mean(scores_tmp)}\")\nprint('::'*20)","ae186897":"meta_predictions = np.mean(np.column_stack(meta_pred_tmp), axis=1)\nmeta_predictions[:20]","48d06675":"stacked_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\nstacked_submission[TARGET] = (meta_predictions > 0.5).astype(int)\nstacked_submission.to_csv('.\/titanic_submission.csv', index=False)","8d0bb3ed":"# submission","bab7f191":"# preprocessing","cabab563":"# get mean of test predictions","18c0e19e":"# hyperparameters","2052a25e":"# split input and label ","187aac69":"# global variables","c33d5fe3":"# common functions","f7b9659d":"# train and predict using StratifiedKFold","062d25b6":"# load data"}}