{"cell_type":{"37bb16fa":"code","a9839146":"code","c5c833fe":"code","39abc814":"code","eb94a731":"code","71cf3b8a":"code","75b46dc6":"code","f3afe081":"code","9926f4cc":"code","36078a79":"code","a120ba46":"code","084fba72":"code","16df3570":"code","c56e3841":"code","b1526169":"code","464b2f2e":"code","946653fc":"code","820df9fd":"code","4518e8ab":"code","8b0b2a3f":"markdown","28ae1649":"markdown","a8687c8a":"markdown","eba11dbc":"markdown"},"source":{"37bb16fa":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Comment this if the data visualisations doesn't work on your side\n%matplotlib inline\n\nplt.style.use('bmh')","a9839146":"df= pd.read_csv('..\/input\/COVID_19.csv', index_col=None)\ndf.head()\n","c5c833fe":"df.info()\n","39abc814":"list(set(df.dtypes.tolist()))\n","eb94a731":"from collections import Counter\nCounter(df[\"Label\"]) ","71cf3b8a":"df.columns","75b46dc6":"plt.figure(figsize = (10,10))\nboxplot = df.boxplot()\n","f3afe081":"from sklearn.preprocessing import LabelEncoder\nencodings = dict()\nfor c in df.columns:\n    #print df[c].dtype\n    if df[c].dtype == \"object\":\n        encodings[c] = LabelEncoder() #to give numerical label to char type labels.\n        encodings[c]\n        df[c] = encodings[c].fit_transform(df[c])\nprint(encodings)","9926f4cc":"df.head()","36078a79":"X = df.iloc[:,0:9]\nY = df.iloc[:,9]\nY.head()","a120ba46":"from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X,Y)","084fba72":"print(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n","16df3570":"feat_importances = pd.Series(model.feature_importances_, index=X.columns)\nplt.figure(figsize=(10,10))\nfeat_importances.nlargest(9).plot(kind='barh')\nplt.show()\n","c56e3841":"from sklearn.preprocessing import StandardScaler #normalization\nstd = StandardScaler()\nX = std.fit_transform(X)","b1526169":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)#random for splitting same data when run again.\n","464b2f2e":"# Fitting Random Forest Regression to the dataset \n# import the regressor \nfrom sklearn.ensemble import RandomForestClassifier \n\n# create regressor object \nclf = RandomForestClassifier(n_estimators=50,criterion='gini',  \nrandom_state=0)\n\n# fit the regressor with x and y data \nclf.fit(X_train,y_train)\n","946653fc":"y_pred = clf.predict(X_test) \nprint(Counter(y_pred))\nprint(Counter(y_test))\n","820df9fd":"# Python script for confusion matrix creation. \nfrom sklearn.metrics import confusion_matrix \nfrom sklearn.metrics import accuracy_score \nfrom sklearn.metrics import classification_report \n \nresults = confusion_matrix(y_test, y_pred) \nprint('Confusion Matrix :')\nprint(results) \nprint('Accuracy Score :',accuracy_score(y_test, y_pred))\nprint('Report : ')\nprint(classification_report(y_test, y_pred))\n#0 : Negative (No coronavirus)\n#1: Positive","4518e8ab":"'''age=int(input(\"Enter your Age : \"))\ngender=input(\"Enter your Gender : \")\nRegion1=input(\"Enter your City : \")\nRegion2=input(\"Enter your District : \")\ndetected_state=input(\"Enter your State : \")\nnationality=input(\"Enter your Nationality : \")\nTravel_hist=input(\"Enter last City\/Nation travelled : \")\nDisease_hist=input(\"If you have BP\/Diabetes, mention it : \")\nSymptom=input(\"Mention present symptom of illness : \")\n'''\nage=45\ngender='Male'\nRegion1='Solapur'\nRegion2='Solapur'\ndetected_state='Maharashtra'\nnationality='India'\nTravel_hist='Italy'\nDisease_hist='Null'\nSymptom='Null'\n\ndata=[[age,gender,Region1,Region2,detected_state,nationality,Travel_hist,Disease_hist,Symptom]]\ndfX = pd.DataFrame(data, columns = ['age','gender','Region1 ','Region2','detected_state','nationality','Travel_hist','Disease_hist','Symptom'])\nprint(dfX)\nfor c in dfX.columns:\n    #print df[c].dtype\n    if dfX[c].dtype == \"object\":\n        dfX[c] = encodings[c].transform(dfX[c])\nX_test1 = std.transform(dfX)\ny_pred1 = clf.predict(X_test1) \nans = encodings['Label'].inverse_transform(y_pred1)\nfor dt in ans:\n  if dt=='Positive':\n    print(\"Result : High chances of COVID-19\")\n  else:\n    print(\"Result : You are not suffering from COVID-19\")","8b0b2a3f":"# This is basically a MVP ,ofcourse for final model the dataset should be more relevant and vast.","28ae1649":"Testing the model with user's data","a8687c8a":"# The dataset has some data which is officially available for research in COVID-19 and some I have added randomly by refering to various common facts and news articles because the required data for every feature for my project is not available yet.\n# This model can be used to give us the idea about the quantity of medical and administrative facilities needed.\n\n# This model uses travel history, so it will detect the persons who have not yet acquired any symptoms but would be acquiring.","eba11dbc":"Used Random Forest for classification as it fits better for this type of dataset which is based on conditions. \nI am trying different algorithms currently to the find the best one. Random Forest was my first try."}}