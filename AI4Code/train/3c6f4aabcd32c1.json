{"cell_type":{"dbdc959e":"code","638bfbd7":"code","4a97b4e7":"code","2bf491d4":"code","62548779":"code","719d41e3":"code","ed08e1ae":"code","e4a3492b":"code","48f57ff5":"code","7d1d50c2":"code","73796e6c":"code","9aefb071":"code","96fa53b1":"code","3c600d74":"code","e2522caf":"code","fdf35349":"code","3bc49d63":"code","701a2cb7":"code","73a007b9":"code","e2e05672":"markdown","fd415c72":"markdown"},"source":{"dbdc959e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)","638bfbd7":"#import all useful libraries\n#Data Processing libraries\nimport numpy as np\nimport pandas as pd\nfrom keras.preprocessing.image import ImageDataGenerator               # used for data augmentation\n#ML Libraries\nimport tensorflow as tf\nimport keras \nfrom sklearn.model_selection import train_test_split\nfrom keras.layers import Dense, Conv2D, AveragePooling2D, Flatten, Dropout","4a97b4e7":"# read train and test data\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")","2bf491d4":"#inspect the shape of the dataset\nprint(train.shape)\nprint(test.shape)\n# 784 = pixels of a 28x28 image\n# 785 = pixels of a 28x28 image + class of the data\n# The large dimention is the dimention with no of examples","62548779":"# split into x and y\ny_train = train['label']\nx_train = train.drop(labels = ['label'],axis = 1)\n\n#clear up the memory\ndel train\n\n# print the y_train which has the class of each data\ny_train","719d41e3":"# scale values to between 0 and 1 for faster learning\nx_train = x_train\/255\n\n# you want number of imput channels to be last index for this version of keras\nimage_size = int(np.sqrt(x_train.shape[1]))\n\nip_shape = (image_size, image_size, 1)\nx_train = x_train.values.reshape(x_train.shape[0], image_size, image_size, 1)\n\n# convert y to one hot vectors for training\ny_train = keras.utils.np_utils.to_categorical(y_train.values, num_classes=10)","ed08e1ae":"y_train","e4a3492b":"print('x_train.shape = ', x_train.shape)\nprint('y_train.shape = ', y_train.shape)\n\n# 42000 = number of examples\n# 28    = no of pixels\n# 1     = number of channels ( the image is black\/white so has only one channel)\n# 10    = number of classes","48f57ff5":"# process the test model similarly\ntest = test\/255\ntest = test.values.reshape(test.shape[0], image_size, image_size, 1)\n\nprint(test.shape)","7d1d50c2":"# Keep aside a part of the training set (10000 examples ) for development\nx_train, x_dev, y_train, y_dev = train_test_split(x_train, y_train, test_size=10000, random_state = 12)","73796e6c":"#inspect the shape to make sure the train dev split was successful\nprint('x_train.shape = ', x_train.shape)\nprint('y_train.shape = ', y_train.shape)\nprint('x_dev.shape   = ', x_dev.shape)\nprint('y_dev.shape   = ', y_dev.shape)","9aefb071":"# build a keras model\nmodel = keras.Sequential()\nmodel.add(Conv2D(filters=6, kernel_size=(3, 3), activation='relu', input_shape=ip_shape ))\nmodel.add(AveragePooling2D())\nmodel.add(Conv2D(filters=16, kernel_size=(3, 3), activation='relu'))\nmodel.add(AveragePooling2D())\nmodel.add(Flatten())\nmodel.add(Dense(units=120, activation='relu'))\nmodel.add(Dense(units=84, activation='relu'))\nmodel.add(Dense(units=10, activation = 'softmax'))\n# even though the original paper did not use relu we'll use it as it is better.\n# The reason why relu wasn't used on the og paper was because it was not famous at the time of writing the paper","96fa53b1":"# Summary of the model descriing it's structure\nmodel.summary()","3c600d74":"# compile the model with a loss function and an optimizer\nmodel.compile(loss = keras.losses.categorical_crossentropy,\n             optimizer = keras.optimizers.Adam(),\n             metrics = ['accuracy'])","e2522caf":"# train the model for 15 epochs using batches of size 128\nmodel.fit(x_train, y_train, batch_size = 128, epochs = 15)","fdf35349":"# crosscheck with dev set for overfitting\ndev_loss, dev_metric = model.evaluate(x_dev, y_dev)\nprint('Accuracy = ', dev_metric)","3bc49d63":"# predict the results \nresults = model.predict(test)\nresults = np.argmax(results,axis = 1)\nresults","701a2cb7":"#convert the resuts into a dataframs with the appropriate ImageId\nresults_df = pd.DataFrame()\nresults_df['ImageId'] = np.arange(len(results)) + 1\nresults_df['Label'] = pd.Series(results)\nresults_df","73a007b9":"#save the results as a dataframe for submission\nresults_df.to_csv('submission.csv', index = False)","e2e05672":"Since the difference in performance between train and dev set is <1% overfitting is very minimal","fd415c72":"## LeNet-5 Architecture:\n![LeNet-5 architecture](https:\/\/miro.medium.com\/fit\/c\/1838\/551\/0*H9_eGAtkQXJXtkoK)"}}