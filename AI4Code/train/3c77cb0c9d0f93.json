{"cell_type":{"ac498ca7":"code","4cbcacbf":"code","fa9637c7":"code","b749d9ae":"code","f8b606fe":"code","24f0b645":"code","70016f7a":"code","5b30db89":"code","20c9b7ae":"code","81d8a36f":"code","e37456ec":"code","bd9991ab":"code","1504ca74":"code","06cb9cd7":"code","3f2266b3":"code","d4d86c27":"code","75420b99":"code","29431147":"code","b0be643c":"code","bae1e436":"code","d89e86f4":"code","7ea76726":"code","c7afab47":"code","fcfd3c64":"code","baa6709b":"code","e197a691":"code","211e636f":"code","10a2c717":"code","6cfd78a8":"code","81283a1a":"code","339d1e46":"code","958a9c0d":"code","dc1f5580":"code","62c1a6d4":"code","d84c759a":"code","4815d8e6":"code","81cb2d07":"code","a2cf6fb1":"code","e3fd2e1c":"code","76aa33d9":"code","f00b4cb3":"code","9c9aad95":"code","ef8a02e0":"code","51917134":"code","105fbbfd":"code","54e59808":"code","eeeb6075":"code","d6bbc037":"code","64193a8d":"code","ef325463":"code","7bdf294b":"code","0be46651":"code","51ba4c83":"code","113b4e82":"code","ecd0e791":"code","f4769f72":"code","2e5a4a94":"code","cfb2905a":"code","a99fcb8a":"code","26238550":"code","e3b66f0d":"code","defe97c8":"code","63b16a2d":"code","b9eeefd7":"code","872bf470":"code","f547614d":"code","39a8a4ee":"code","7a093612":"markdown","965db2bc":"markdown","2e277122":"markdown","8a07c0ba":"markdown","44de5797":"markdown","13f6f295":"markdown","31c251e3":"markdown"},"source":{"ac498ca7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\n#import numpy as np # linear algebra\n#import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n#import os\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    #for filename in filenames:\n        #print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4cbcacbf":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math as m\n\nfrom datetime import datetime\n\nimport os\nimport glob\n\n\nimport folium \n\nimport geopandas\n\nfrom folium import plugins","fa9637c7":"pd.set_option('max_columns', 500)\npd.set_option('max_rows', 500)\nimport warnings\nwarnings.filterwarnings('ignore')","b749d9ae":"from IPython.display import display\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","f8b606fe":"# Code for displaying plotly express plot\ndef configure_plotly_browser_state():\n  import IPython\n  display(IPython.core.display.HTML('''\n        <script src=\"\/static\/components\/requirejs\/require.js\"><\/script>\n        <script>\n          requirejs.config({\n            paths: {\n              base: '\/static\/base',\n              plotly: 'https:\/\/cdn.plot.ly\/plotly-latest.min.js?noext',\n            },\n          });\n        <\/script>\n        '''))","24f0b645":"from plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected = True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nconfigure_plotly_browser_state()\nfrom IPython.display import IFrame","70016f7a":"from sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error","5b30db89":"# Building and fitting Random Forest\nfrom sklearn.metrics import r2_score\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.model_selection import GridSearchCV\n","20c9b7ae":"covid_train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv')\ncovid_test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv')\ndata_path = '\/kaggle\/input\/'\nweather_data = pd.read_csv('..\/input\/covid19formattedweatherjan22march24\/covid_dataset.csv')\n'''\npollution_data = pd.read_csv('..\/input\/pollution-by-country-for-covid19-analysis\/region_pollution.csv')\n\nresponse_tracker_date = pd.read_excel(data_path + 'oxford-covid19-government-response-tracker\/OxCGRT_Download_latest_data.xlsx')\n\ncord_metadata = pd.read_csv('\/kaggle\/input\/CORD-19-research-challenge\/metadata.csv')\n'''","81d8a36f":"submission = pd.read_csv(data_path + '\/covid19-global-forecasting-week-2\/submission.csv')\nsubmission.head()","e37456ec":"covid_train.head(10)\ncovid_train.shape\ntrain = covid_train\ntest = covid_test\n#covid_train.info()","bd9991ab":"covid_train.rename(columns={'Province_State':'Province'}, inplace=True)\ncovid_train.rename(columns={'Country_Region':'Country'}, inplace=True)\ncovid_train.rename(columns={'Id':'ForecastId'}, inplace=True)\n\ncovid_test.rename(columns={'Province_State':'Province'}, inplace=True)\ncovid_test.rename(columns={'Country_Region':'Country'}, inplace=True)\n\n","1504ca74":"covid_train['Date'] = pd.to_datetime(covid_train['Date'])\ncovid_test['Date'] = pd.to_datetime(covid_test['Date'])","06cb9cd7":"covid_train = covid_train.set_index(['Date'])\ncovid_test = covid_test.set_index(['Date'])","3f2266b3":"print ('Training Data provided from', train['Date'].min(),'to ', train['Date'].max() )\n\nprint ('Test Data provided from', test['Date'].min(),'to ', test['Date'].max() )\n\nprint ('Weather Data provided from 2020-01-22 to 2020-03-24')","d4d86c27":"def create_time_features(df):\n    \"\"\"\n    Creates time series features from datetime index\n    \"\"\"\n    df['date'] = df.index\n    df['hour'] = df['date'].dt.hour\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['quarter'] = df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['dayofmonth'] = df['date'].dt.day\n    df['weekofyear'] = df['date'].dt.weekofyear\n    \n    X = df[['hour','dayofweek','quarter','month','year',\n           'dayofyear','dayofmonth','weekofyear']]\n    return X","75420b99":"covid_train['Province'] = covid_train['Province'].fillna(covid_train['Country'])\ncovid_test['Province'] = covid_test['Province'].fillna(covid_test['Country'])\n","29431147":"create_time_features(covid_train).head()\ncreate_time_features(covid_test).head()","b0be643c":"covid_train.isnull().values.any()\ncovid_train.isnull().sum()\ncovid_test.isnull().values.any()\ncovid_test.isnull().sum()","bae1e436":"configure_plotly_browser_state()\nfig = px.scatter(covid_train, x=\"date\", y=\"ConfirmedCases\",   \n                 color=\"Country\",\n                 hover_name=\"Province\")\nfig.show()","d89e86f4":"configure_plotly_browser_state()\nfig = px.scatter(covid_train, x=\"date\", y=\"Fatalities\",   \n                 color=\"Country\",\n                 hover_name=\"Province\")\nfig.show()","7ea76726":"configure_plotly_browser_state()\nfig = px.scatter(covid_train.dropna(), y=\"ConfirmedCases\", x=\"Fatalities\",   \n                 color=\"Province\",\n                 hover_name=\"Country\", \n                log_x=True, size_max=60\n                )\nfig.show()","c7afab47":"grpbydate = covid_train.groupby(['date','Country', 'Province'])['ConfirmedCases', 'Fatalities'].sum().reset_index().sort_values('date', ascending = True)","fcfd3c64":"grpbydate[grpbydate['Country']=='US']","baa6709b":"grpbydate['Country'].nunique()","e197a691":"weather_data.rename(columns={'Province\/State':'Province'}, inplace=True)\nweather_data.rename(columns={'Country\/Region':'Country'}, inplace=True)\nweather_data['Province'] = weather_data['Province'].fillna(weather_data['Country'])\n","211e636f":"weather_data[(weather_data['Country'] == 'US') ].head(100)\n","10a2c717":"weather_data_df = geopandas.GeoDataFrame(\n    weather_data, geometry=geopandas.points_from_xy(weather_data.long, weather_data.lat))","6cfd78a8":"world = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\nweather_data_df.plot(ax=world.plot(figsize=(28, 12)), marker='o', color='#fb5599', markersize=10);\nplt.show()","81283a1a":"from sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\ncovid_train['country_encoded'] = labelencoder.fit_transform(covid_train['Country'])\ncovid_test['country_encoded'] = labelencoder.fit_transform(covid_test['Country'])","339d1e46":"covid_train.describe(include=('int64','float64'))","958a9c0d":"covid_test.describe(include = ('int64','float64'))","dc1f5580":"covid_train.head()\ncovid_test.head()","62c1a6d4":"train_y_inf = covid_train[\"ConfirmedCases\"]\ntrain_y_ft = covid_train[\"Fatalities\"]\ntrain_x = covid_train\ntrain_x.drop([\"ConfirmedCases\",\"Fatalities\", \"Country\",\"date\", \"Province\"], axis=1, inplace=True)\n","d84c759a":"test_x = covid_test\ntest_x.drop([\"Country\",\"date\", \"Province\"], axis=1, inplace=True)","4815d8e6":"from fbprophet import Prophet","81cb2d07":"train_ts= pd.DataFrame()\ntrain_ts['ds'] = pd.to_datetime(train[\"Date\"])\ntrain_ts['y']=train[\"ConfirmedCases\"]\nindexedData = train_ts.set_index('ds')\nindexedData.tail()","a2cf6fb1":"m = Prophet(yearly_seasonality= True,\n    weekly_seasonality = True,\n    daily_seasonality = True,\n    seasonality_mode = 'multiplicative')\nm.fit(train_ts)\nfuture = m.make_future_dataframe(periods=14)\nforecast = m.predict(future)\n","e3fd2e1c":"m.plot_components(forecast)","76aa33d9":"py.iplot([\n    go.Scatter(x=train_ts['ds'], y=train_ts['y'], name='y'),\n    go.Scatter(x=forecast['ds'], y=forecast['yhat'], name='yhat'),\n    go.Scatter(x=forecast['ds'], y=forecast['yhat_upper'], fill='tonexty', mode='none', name='upper'),\n    go.Scatter(x=forecast['ds'], y=forecast['yhat_lower'], fill='tonexty', mode='none', name='lower'),\n    go.Scatter(x=forecast['ds'], y=forecast['trend'], name='Trend')\n])","f00b4cb3":"from fbprophet.plot import plot_plotly\n\npy.init_notebook_mode()\n\nfig = plot_plotly(m, forecast)  \npy.iplot(fig)","9c9aad95":"train_ts1= pd.DataFrame()\ntrain_ts1['ds'] = pd.to_datetime(train[\"Date\"])\ntrain_ts1['y']=train[\"Fatalities\"]\nindexedData = train_ts1.set_index('ds')\nindexedData.tail()","ef8a02e0":"m = Prophet(yearly_seasonality= True,\n    weekly_seasonality = True,\n    daily_seasonality = True,\n    seasonality_mode = 'multiplicative')\nm.fit(train_ts1)\nfuture1 = m.make_future_dataframe(periods=14)\nforecast1 = m.predict(future1)\n","51917134":"m.plot_components(forecast1)","105fbbfd":"py.iplot([\n    go.Scatter(x=train_ts1['ds'], y=train_ts1['y'], name='y'),\n    go.Scatter(x=forecast1['ds'], y=forecast1['yhat'], name='yhat'),\n    go.Scatter(x=forecast1['ds'], y=forecast1['yhat_upper'], fill='tonexty', mode='none', name='upper'),\n    go.Scatter(x=forecast1['ds'], y=forecast1['yhat_lower'], fill='tonexty', mode='none', name='lower'),\n    go.Scatter(x=forecast1['ds'], y=forecast1['trend'], name='Trend')\n])","54e59808":"#py.init_notebook_mode()\nfig = plot_plotly(m, forecast1)  \npy.iplot(fig)","eeeb6075":"ts_submission = pd.DataFrame()\nts_submission['ForecastId'] = forecast.index\nts_submission['ConfirmedCases'] = forecast['yhat']\nts_submission['Fatalities'] = forecast1['yhat']","d6bbc037":"ts_submission['ConfirmedCases'] = ts_submission['ConfirmedCases'].astype(int)\nts_submission['Fatalities'] = ts_submission['Fatalities'].astype(int)\nts_submission.tail()","64193a8d":"#ts_submission.to_csv('submission.csv',index = False)","ef325463":"import xgboost \nxg_reg = xgboost.XGBRegressor(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1, max_depth = 5, \n                          alpha = 10, n_estimators = 100)","7bdf294b":"xg_reg.fit(train_x,train_y_inf)\npreds = xg_reg.predict(test_x)","0be46651":"xg_reg.fit(train_x,train_y_ft)\npreds1 = xg_reg.predict(test_x)","51ba4c83":"xgb_submission = pd.DataFrame()\nxgb_submission['ForecastId'] = test_x['ForecastId']\nxgb_submission['ConfirmedCases'] = preds\nxgb_submission['Fatalities'] = preds1","113b4e82":"xgb_submission['ConfirmedCases'] = xgb_submission['ConfirmedCases'].astype(int)\nxgb_submission['Fatalities']  = xgb_submission['Fatalities'].astype(int)","ecd0e791":"xgb_submission.to_csv('submission.csv', index = False)","f4769f72":"\nxgdmat = xgboost.DMatrix(train_x,train_y_inf) # Create our DMatrix to make XGBoost more efficient\nxgdmat\nour_params = {'eta': 0.1, 'seed':0, 'subsample': 0.8, 'colsample_bytree': 0.8, \n             'objective': 'reg:linear', 'max_depth':3, 'min_child_weight':1} \n# Grid Search CV optimized settings\n%time cv_xgb = xgboost.cv(params = our_params, dtrain = xgdmat, num_boost_round = 3000, nfold = 5, metrics = ['logloss'], early_stopping_rounds = 100) # Look for early stopping that minimizes error, \n# Make sure you enter metrics inside a list or you may encounter issues!\ncv_xgb.head()\n","2e5a4a94":"covid_xgb = xgboost.train(our_params, xgdmat, num_boost_round = 50)\n#testdmat = xgboost.DMatrix(x_test_infected)","cfb2905a":"xgboost.plot_tree(covid_xgb,num_trees=0)\nplt.rcParams['figure.figsize'] = [100, 50]\nplt.show()","a99fcb8a":"xgboost.plot_importance(covid_xgb)\nplt.rcParams['figure.figsize'] = [17, 15]\nplt.show()","26238550":"forest = RandomForestRegressor(max_depth = 10, n_estimators = 1000, random_state = 2020)\ncovid_rf = forest.fit(train_x, train_y_inf)\nprint(covid_rf.score(train_x, train_y_inf))","e3b66f0d":"rf_test_pred_infected = covid_rf.predict(test_x)\n#covid_rf_mse = mean_squared_error(test_y_inf, rf_test_pred_infected)\n#print (covid_rf_mse)\nrf_test_pred_infected.astype(int)\nrf_test_pred_infected[rf_test_pred_infected<0]=0\n","defe97c8":"forest1 = RandomForestRegressor(max_depth = 10, n_estimators = 1000, random_state = 2020)\ncovid_rf1 = forest1.fit(train_x, train_y_ft)\nprint(covid_rf1.score(train_x, train_y_ft))","63b16a2d":"rf_test_pred_fatality = covid_rf1.predict(test_x)\n\nrf_test_pred_fatality.astype(int)\nrf_test_pred_fatality[rf_test_pred_fatality<0]=0\n","b9eeefd7":"submission = pd.DataFrame()\nsubmission['ForecastId'] = test_x['ForecastId']\nsubmission['ConfirmedCases'] = rf_test_pred_infected\nsubmission['Fatalities'] = rf_test_pred_fatality","872bf470":"submission['ConfirmedCases'] = submission['ConfirmedCases'].astype(int)\nsubmission['Fatalities'] = submission['Fatalities'].astype(int)","f547614d":"#submission.to_csv('submission.csv', index = False)","39a8a4ee":"#submission.head()","7a093612":"### Random Forest Regressor","965db2bc":"### Model Prediction","2e277122":"### XGBoost Regressor","8a07c0ba":"#### Submission","44de5797":"### Time Series Prophet","13f6f295":"### Train Test Split","31c251e3":"# Datasets Acknowledgement\n\nhttps:\/\/www.kaggle.com\/hbfree\/covid19formattedweatherjan22march24\n\n"}}