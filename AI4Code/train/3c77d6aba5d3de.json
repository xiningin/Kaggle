{"cell_type":{"35d1c186":"code","6f796499":"code","516b8448":"code","4b64f204":"code","108fcab2":"code","e2dc3694":"code","3387b6ae":"code","f32a6c4e":"code","c9f9ac5e":"code","87f3b8ab":"code","73176a3a":"code","fedb46f4":"code","7cab6ba1":"code","13080a49":"code","608e716b":"code","008557cc":"code","925fe557":"code","7f2137db":"code","2f157fbf":"code","91cd4c4f":"code","29b1635e":"code","a2ce7135":"code","1e218ec6":"code","60fb8c77":"code","638a8a2d":"code","7461bb9a":"code","4c95cc69":"code","07123d1e":"code","c0db10b8":"code","42f77a18":"code","91bd06c6":"code","41114e88":"code","76cf272c":"code","0611f9a1":"code","a766f61c":"code","cc6ea39a":"code","a3fe6481":"markdown","ed70d4bf":"markdown","2b9c741e":"markdown","ecbfad54":"markdown","cab91d65":"markdown","c6679d8f":"markdown","2ffd418d":"markdown","aff4c14a":"markdown","bc96eec6":"markdown","e6aca2e6":"markdown","5b82af44":"markdown","3c0a114a":"markdown","70f961cc":"markdown","32becf7d":"markdown","b46e7f6f":"markdown","5298c4ea":"markdown","c08b8c6b":"markdown","6bea74cd":"markdown","c3f8bbb5":"markdown","ac519a69":"markdown","4ad9d18a":"markdown","78892ee3":"markdown","18353e7d":"markdown","d2c7c2fb":"markdown","85fe8e48":"markdown","e60e512b":"markdown","ee573265":"markdown","ffd31c69":"markdown","df79fd8e":"markdown","f47d77a6":"markdown","9a999e32":"markdown","79e8199a":"markdown","3b77ce51":"markdown","4ab2afd0":"markdown","93a0dad7":"markdown","e4978916":"markdown","5854a35b":"markdown","0e64953e":"markdown","13540be1":"markdown","7894b283":"markdown","887ad26e":"markdown","8e7751a5":"markdown","a4685af5":"markdown","82003cf6":"markdown","4d442745":"markdown","eaf17789":"markdown","a4183182":"markdown","08350061":"markdown","79b71217":"markdown","748d2245":"markdown","b63e4194":"markdown","1f24ee61":"markdown","833c603e":"markdown","4d5807dc":"markdown","56552ac2":"markdown","ccad55c6":"markdown","169e5e4d":"markdown","f47f428d":"markdown","3d82a166":"markdown","e483beb4":"markdown"},"source":{"35d1c186":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \npd.set_option(\"display.max_columns\",None) \npd.set_option(\"display.max_rows\",None) \nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom IPython.display import Image\nsns.set(style=\"darkgrid\", palette=\"pastel\", color_codes=True)\nsns.set_context(\"paper\")\nfrom datetime import datetime\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"seaborn\"\nfrom plotly.subplots import make_subplots\n\nfrom pathlib import Path\ndata_dir = Path('..\/input\/images')\n\nimport os\nos.listdir(data_dir)","6f796499":"Image(filename=data_dir\/'cov_8.PNG')","516b8448":"df = pd.read_csv(\"..\/input\/corona-virus-report\/covid_19_clean_complete.csv\", parse_dates = ['Date'])\ndf.head()","4b64f204":"df.columns","108fcab2":"df.info()","e2dc3694":"df.describe(include = 'object')","3387b6ae":"a = df.Date.value_counts().sort_index()\nprint('The first date is:',a.index[0])\nprint('The last date is:',a.index[-1])","f32a6c4e":"df.isnull().sum()","c9f9ac5e":"#Renaming the coulmns for easy usage\ndf.rename(columns={'Date': 'date', \n                     'Province\/State':'state',\n                     'Country\/Region':'country',\n                     'Lat':'lat', 'Long':'long',\n                     'Confirmed': 'confirmed',\n                     'Deaths':'deaths',\n                     'Recovered':'recovered'\n                    }, inplace=True)\n\n# Active Case = confirmed - deaths - recovered\ndf['active'] = df['confirmed'] - df['deaths'] - df['recovered']","87f3b8ab":"df1 = df\ndf1['date'] = pd.to_datetime(df1['date'])\ndf1['date'] = df1['date'].dt.strftime('%m\/%d\/%Y')\ndf1 = df1.fillna('-')\nfig = px.density_mapbox(df1, lat='lat', lon='long', z='confirmed', radius=20,zoom=1, hover_data=[\"country\",'state',\"confirmed\"],\n                        mapbox_style=\"carto-positron\", animation_frame = 'date', range_color= [0, 10000],title='Spread of Covid-19')\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.show()","73176a3a":"top = df[df['date'] == df['date'].max()]\nworld = top.groupby('country')['confirmed','active','deaths'].sum().reset_index()\nworld.head()","fedb46f4":"figure = px.choropleth(world, locations=\"country\", \n                    locationmode='country names', color=\"active\", \n                    hover_name=\"country\", range_color=[1,500000], \n                    color_continuous_scale=\"Peach\", \n                    title='Countries with Active Cases')\nfigure.show()","7cab6ba1":"fig = px.scatter_mapbox(top, lat=\"lat\", lon=\"long\", hover_name=\"country\", hover_data=[\"country\",\"recovered\"],\n                        color_discrete_sequence=[\"fuchsia\"], zoom=0.5, height=300,title='Recovered count of each country' )\nfig.update_layout(\n    mapbox_style=\"white-bg\",\n    mapbox_layers=[\n        {\n            \"below\": 'traces',\n            \"sourcetype\": \"raster\",\n            \"source\": [\n                \"https:\/\/basemap.nationalmap.gov\/arcgis\/rest\/services\/USGSImageryOnly\/MapServer\/tile\/{z}\/{y}\/{x}\"\n            ]\n        }\n      ])\nfig.update_layout(margin={\"r\":0,\"t\":30,\"l\":0,\"b\":0})\nfig.show()","13080a49":"world['size'] = world['deaths'].pow(0.2)\nfig = px.scatter_geo(world, locations=\"country\",locationmode='country names', color=\"deaths\",\n                     hover_name=\"country\", size=\"size\",hover_data = ['country','deaths'],\n                     projection=\"natural earth\",title='Death count of each country')\nfig.show()","608e716b":"plt.figure(figsize= (15,10))\nplt.xticks(rotation = 90 ,fontsize = 10)\nplt.yticks(fontsize = 15)\nplt.xlabel(\"Dates\",fontsize = 30)\nplt.ylabel('Total cases',fontsize = 30)\nplt.title(\"Worldwide Confirmed Cases Over Time\" , fontsize = 30)\ntotal_cases = df.groupby('date')['date', 'confirmed'].sum().reset_index()\ntotal_cases['date'] = pd.to_datetime(total_cases['date'])\n\n\nax = sns.pointplot( x = total_cases.date.dt.week ,y = total_cases.confirmed , color = 'r')\nax.set(xlabel='Weeks', ylabel='Total cases')","008557cc":"top = df[df['date'] == df['date'].max()]\ntop_casualities = top.groupby(by = 'country')['confirmed'].sum().sort_values(ascending = False).head(20).reset_index()\ntop_casualities","925fe557":"plt.figure(figsize= (15,10))\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.xlabel(\"Total cases\",fontsize = 30)\nplt.ylabel('Country',fontsize = 30)\nplt.title(\"Top 20 countries having most confirmed cases\" , fontsize = 30)\nax = sns.barplot(x = top_casualities.confirmed, y = top_casualities.country)\nfor i, (value, name) in enumerate(zip(top_casualities.confirmed,top_casualities.country)):\n    ax.text(value, i-.05, f'{value:,.0f}',  size=10, ha='left',  va='center')\nax.set(xlabel='Total cases', ylabel='Country')","7f2137db":"top_actives = top.groupby(by = 'country')['active'].sum().sort_values(ascending = False).head(20).reset_index()\ntop_actives","2f157fbf":"plt.figure(figsize= (15,10))\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.xlabel(\"Total cases\",fontsize = 30)\nplt.ylabel('Country',fontsize = 30)\nplt.title(\"Top 20 countries having most active cases\" , fontsize = 30)\nax = sns.barplot(x = top_actives.active, y = top_actives.country)\nfor i, (value, name) in enumerate(zip(top_actives.active, top_actives.country)):\n    ax.text(value, i-.05, f'{value:,.0f}',  size=10, ha='left',  va='center')\nax.set(xlabel='Total cases', ylabel='Country')","91cd4c4f":"top_deaths = top.groupby(by = 'country')['deaths'].sum().sort_values(ascending = False).head(20).reset_index()\ntop_deaths","29b1635e":"plt.figure(figsize= (15,10))\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.xlabel(\"Total cases\",fontsize = 30)\nplt.ylabel('Country',fontsize = 30)\nplt.title(\"Top 20 countries having most deaths\" , fontsize = 30)\nax = sns.barplot(x = top_deaths.deaths, y = top_deaths.country)\nfor i, (value, name) in enumerate(zip(top_deaths.deaths,top_deaths.country)):\n    ax.text(value, i-.05, f'{value:,.0f}',  size=10, ha='left',  va='center')\nax.set(xlabel='Total cases', ylabel='Country')","a2ce7135":"top_recovered = top.groupby(by = 'country')['recovered'].sum().sort_values(ascending = False).head(20).reset_index()\ntop_recovered","1e218ec6":"plt.figure(figsize= (15,10))\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.xlabel(\"Total cases\",fontsize = 30)\nplt.ylabel('Country',fontsize = 30)\nplt.title(\"Top 20 countries having most recovered cases\" , fontsize = 30)\nax = sns.barplot(x = top_recovered.recovered, y = top_recovered.country)\nfor i, (value, name) in enumerate(zip(top_recovered.recovered,top_recovered.country)):\n    ax.text(value, i-.05, f'{value:,.0f}',  size=10, ha='left',  va='center')\nax.set(xlabel='Total cases', ylabel='Country')","60fb8c77":"rate = top.groupby(by = 'country')['recovered','confirmed','deaths'].sum().reset_index()\nrate['recovery percentage'] =  round(((rate['recovered']) \/ (rate['confirmed'])) * 100 , 2)\nrate['death percentage'] =  round(((rate['deaths']) \/ (rate['confirmed'])) * 100 , 2)\nrate.head()","638a8a2d":"mortality = rate.groupby(by = 'country')['death percentage'].sum().sort_values(ascending = False).head(20).reset_index()\nmortality","7461bb9a":"plt.figure(figsize= (15,10))\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.xlabel(\"Total cases\",fontsize = 30)\nplt.ylabel('Country',fontsize = 30)\nplt.title(\"Top 20 countries having most mortality rate\" , fontsize = 30)\nax = sns.barplot(x = mortality['death percentage'], y = mortality.country)\nfor i, (value, name) in enumerate(zip(mortality['death percentage'], mortality.country)):\n    ax.text(value, i-.05, f'{value:,.0f}',  size=10, ha='left',  va='center')\nax.set(xlabel='Mortality Rate in percentage', ylabel='Country')","4c95cc69":"recovery = rate.groupby(by = 'country')['recovery percentage'].sum().sort_values(ascending = False).head(20).reset_index()\nrecovery","07123d1e":"plt.figure(figsize= (15,10))\nplt.xticks(fontsize = 15)\nplt.yticks(fontsize = 15)\nplt.xlabel(\"Total cases\",fontsize = 30)\nplt.ylabel('Country',fontsize = 30)\nplt.title(\"Top 20 countries having most recovery rate\" , fontsize = 30)\nax = sns.barplot(x = recovery['recovery percentage'], y = recovery.country)\nfor i, (value, name) in enumerate(zip(recovery['recovery percentage'], recovery.country)):\n    ax.text(value, i-.05, f'{value:,.0f}',  size=10, ha='left',  va='center')\nax.set(xlabel='Recovery Rate in percentage', ylabel='Country')","c0db10b8":"china =  df[df.country == 'China']\nchina = china.groupby(by = 'date')['recovered', 'deaths', 'confirmed', 'active'].sum().reset_index()\nchina['date'] = china['date'].apply(lambda x : datetime.strptime(x, \"%m\/%d\/%Y\"))\nchina.head()","42f77a18":"us =  df[df.country == 'US']\nus = us.groupby(by = 'date')['recovered', 'deaths', 'confirmed', 'active'].sum().reset_index()\nus = us.iloc[33:].reset_index().drop('index', axis = 1)\nus['date'] = us['date'].apply(lambda x : datetime.strptime(x, \"%m\/%d\/%Y\"))\nus.head()","91bd06c6":"italy =  df[df.country == 'Italy']\nitaly = italy.groupby(by = 'date')['recovered', 'deaths', 'confirmed', 'active'].sum().reset_index()\nitaly = italy.iloc[9:].reset_index().drop('index', axis = 1)\nitaly['date'] = italy['date'].apply(lambda x : datetime.strptime(x, \"%m\/%d\/%Y\"))\nitaly.head()","41114e88":"india =  df[df.country == 'India']\nindia = india.groupby(by = 'date')['recovered', 'deaths', 'confirmed', 'active'].sum().reset_index()\nindia = india.iloc[8:].reset_index().drop('index', axis = 1)\nindia['date'] = india['date'].apply(lambda x : datetime.strptime(x, \"%m\/%d\/%Y\"))\nindia.tail()","76cf272c":"plt.figure(figsize=(15,30))\na = plt.subplot(4, 1, 1)\nsns.pointplot(china.date.dt.week ,china.confirmed)\nplt.title(\"China's Confirmed Cases Over Time\" , fontsize = 25)\nplt.ylabel('Total cases', fontsize = 15)\nplt.xlabel('No. of Weeks', fontsize = 15)\n\nplt.subplot(4, 1, 2)\nsns.pointplot(us.date.dt.week ,us.confirmed)\nplt.title(\"US's Confirmed Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Weeks', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\nplt.subplot(4, 1, 3)\nsns.pointplot(italy.date.dt.week ,italy.confirmed)\nplt.title(\"Italy's Confirmed Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Weeks', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\nplt.subplot(4, 1, 4)\nsns.pointplot(india.date.dt.week ,india.confirmed)\nplt.title(\"India's Confirmed Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Weeks', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\nplt.subplots_adjust(bottom=0.01, top=0.9)","0611f9a1":"plt.figure(figsize=(15,30))\nplt.subplot(4, 1, 1)\nsns.pointplot(china.index ,china.active, color = 'r')\nplt.title(\"China's Active Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Days', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\nplt.subplot(4, 1, 2)\nsns.pointplot(us.index ,us.active, color = 'r')\nplt.title(\"US's Active Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Days', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\nplt.subplot(4, 1, 3)\nsns.pointplot(italy.index ,italy.active, color = 'r')\nplt.title(\"Italy's Active Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Days', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\nplt.subplot(4, 1, 4)\nsns.pointplot(india.index ,india.active, color = 'r')\nplt.title(\"India's Active Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Days', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\nplt.subplots_adjust(bottom=0.01, top=0.9)","a766f61c":"plt.figure(figsize=(15,30))\nplt.subplot(4, 1, 1)\nsns.pointplot(china.index ,china.deaths, color = 'g')\nplt.title(\"China's Deaths Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Days', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\nplt.subplot(4, 1, 2)\nsns.pointplot(us.index ,us.deaths, color = 'g')\nplt.title(\"US's Deaths Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Days', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\nplt.subplot(4, 1, 3)\nsns.pointplot(italy.index ,italy.deaths, color = 'g')\nplt.title(\"Italy's Deaths Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Days', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\n\nplt.subplot(4, 1, 4)\nsns.pointplot(india.index ,india.deaths, color = 'g')\nplt.title(\"India's Deaths Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Days', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\nplt.subplots_adjust(bottom=0.01, top=0.9)","cc6ea39a":"plt.figure(figsize=(15,30))\nplt.subplot(4, 1, 1)\nsns.pointplot(china.index ,china.recovered, color = 'orange')\nplt.title(\"China's Recovered Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Days', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\nplt.subplot(4, 1, 2)\nsns.pointplot(us.index ,us.recovered, color = 'orange')\nplt.title(\"US's Recovered Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Days', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\nplt.subplot(4, 1, 3)\nsns.pointplot(italy.index ,italy.recovered, color = 'orange')\nplt.title(\"Italy's Recovered Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Days', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\nplt.subplot(4, 1, 4)\nsns.pointplot(india.index ,india.recovered, color = 'orange')\nplt.title(\"India's Recovered Cases Over Time\" , fontsize = 25)\nplt.xlabel('No. of Days', fontsize = 15)\nplt.ylabel('Total cases', fontsize = 15)\n\nplt.subplots_adjust(bottom=0.01, top=0.9)","a3fe6481":"##### Here are my observations:\n##### 1) From Day 0 to Day 15, China has very a high slope as the covid-19 originated there. Whereas in other countries, the slope is quite low.\n##### 2) After day 15, there was an incremental rise in the number of cases in the US, whereas in Italy and India it is still less.\n##### 3) But after that, there is a high surge in no. of cases in US and Italy\n##### 4) India seems to be doing a great job in controlling the spread of the virus and keep the count of cases less. But lately, there has been a rise in the number of cases!","ed70d4bf":"## C. Recovered count around the world:","2b9c741e":"###### Coronavirus disease (COVID-19) is an infectious disease caused by a newly discovered coronavirus.","ecbfad54":"### 1) HANDS : Wash them often\n###  2) ELBOW : Cough into it\n### 3) FACE : Don't touch it\n### 4) SPACE : Keep safe distance\n### 5) HOME : Stay if you can","cab91d65":"##### For more information :  [Seaborn](http:\/\/seaborn.pydata.org\/index.html) , [Matplotlib](https:\/\/matplotlib.org\/)","c6679d8f":"<img src=\"data:image\/gif;base64,R0lGODlhIAEgAaIFAP\/\/\/\/\/\/zOlCNczMzJmZmf\/\/\/wAAAAAAACH\/C05FVFNDQVBFMi4wAwEAAAAh+QQFBAAFACwAAAAAIAEgAQAD\/wi63P4wyknrGCLrzbv\/YCiO5HhVaKqubOu+8IKVdG3feEgMce\/\/wGBrlisaj8jNTshsOp8UYnJKrZqg2Kz2JbV6v9\/AdkwuKwjgtLrKM7vfwMB6Tj\/C7\/hVt87vi9p5gYIyfoWGIICDim97h46FiYuSWo2PlnyRk5pMlZeec5mbojGdn6ZpoaOqKqUhA2KrWwEBrYixtym1Ham4Wmg2vL24uhzCd8QbwcajyBnKy1m\/NM\/Qi80C1NVQ19naeNze38Dhm+Dkx+PniubqcOzt6DXd8E7v9GX2EbP7\/P3+\/wADChxIsGBAFPnuZUno4NopMNQYKmwikYG0h5Yippu4bf+jhIsYM1rwyFFIxQUgQ4qMQrKkj5NnVD7UKM8lEJgAUsq8RHOazR44de7kObLmTxdBh6rsWWLeUQVJlS4t6vMpwpYPhEr9xJSEU5dRt8rsesVqhLBix1JtavYB2rRqWRptCxWrA61wZ671ShfA27w7yf5p+xdw4L1ljxY2fFhuVZuLGTeegDNcZMmTJVSudhlz5rN2yXX2\/BnC5l6jSZd2GxpaatWrG7YW9hp27AanRdW2fZtB7km7efcmNNdYcOHD6xYfNjsmctiCXdFunvM57+i2bh23rhT7h6+MqOPlzti7B\/D4xJN\/bn6XbvXr2SMeDBx+fPmO2Vqzfx8\/Zer\/Y2zXH1ztcYAeJ\/wNaF2ByeQhoIJ5MajBgS8lCCF3EjoT3nIQjHfhdfNJlx6HWX2oYIbYkPGgieWFmN1CFrIYH4oUXkXiXTJ+SGNHNzbgYY4LuvhdPTEC2d+OJhVp5JFCnhfEikuqhiRQSkY54JRcVGnllU26l2WPFm25JJasaCnmiV0ayAKUZwpH5n9gotTmlm+aZuacF6IIiwRyxOkcnnSmuQEFdwKqo6AafORndYa2mWEqzVDzY6MsZrgnA4tOSmmliBIgm34TaLopp\/mJcCkAjyk6qqEMekpcYqquymoFk2LKFwWiypojNaCWQKuuo\/JKgnIi\/ApssKUO6eEz\/7kea+QzfA0bqrO6KqOLLtNSW+0EXsGKo7bABuOQB6f6Bq6zvIzbgQTnUgsaEvq06+y7dkDQp7y60mtEvPjmaye89vbrL2sAP3CvwJvqWwS\/CCf8b70GNzyqwjkwLLGhFONg8cV4ZnzDxhy36bENIIcs5sg1lGyylSjToPLKS7bsa8Awi\/zwvjSH+8oCtKgro8zSRrytZhPfvHDOm3bjM4RAj\/Cyo3pM88osFywNV9PFIn3kzgr0TEK5XYobH9YhPI2cMgd7OcSLcFpHNghm26a0kzAMmQt3b38Qt5RRF0OK2nc\/l7cHe3sGnhQ1KqDm2sgNvq7WZ38pwA9EuOpCs\/9SOe630HjXLYDlf2cAdgppq6b5oJCDCAMGiXedaAyYD3X665wLHoMcrSueYui2zZ5B4Ya1vrsPv\/dQume+T576Tju8UrWIpOSOqvI9CJc88ETZ2wjl0hdfPW\/XL6+XsbRHD4T3MVhvdMXimzKPFNyfT3364K+vcfuefDUD6Kt3z\/8L6iMYxBxwPPe5QEMv6V7uAvipATaggJ74391yd4IfDI9+vbPfx\/D3CApdsH\/nW2D9BIiz2j0EdrmbRQgtOMIGlpCAKpEgK1I4uiHUUAUQZEz4TGhAECrEaiHZIQxDUqMK3gOIGBHiA6fSl2QhT4Mk4+AhpHdEBuImCdjrAxX\/6YHEE0IxZVI0xBbh0cVTKJEBOexgE52ImTPyjIlrTJ4XSXg0HnIljrGCjRtdR0Q8RiB2O9kjANLoiDG2o3FfdFkYIeFHCCCSjuyzY\/4a+YBHurCOQ8SIIdVhySsWLJPjo6StWuhJB6IRjqLUHSnN9ckl9jGVclrlq17oSk3CcpamS+TMJJm9W5bRFIIk5BRvuQArstKUb3wlMX\/piWCiEpbCTIszlbnMDELyfrxcCTEHac1LRhKUp7hhI5n5iGliRJx+jGbmdBk0cJoCnX4k5yHM+RB44lGdsmOn0xbpB3viEZBm1GfWsvkIf8ZRnoWgZzi3WUvJKPSdDPXRE6+5\/0GCOsKgB52oN7Hpzk9gdI0I7cNDPRrRU7ZRoGXjZx8+ukaNlpKWJj1nScPkUJTCTaWYmCku8zLSSerULyelaBQtOsyfhrQOPe3lTI9Kh6Rqc6lB3WhFO+pTnTJ1Dk5Vo1Gj+lJMNvQUm5zIVdeQ1UL+FKg1FSoYiSrGs45VDWUtqlW5ekyYJtOWW02rVIdKVaWW9K1piGtb86pDm+oNp3UI6w\/pulOOftUUMiQmQJtpWMIhlg6RveVkLyFYQ5zVpXX1akyTqFN8qqSzCZ0rY4llVz6GhKV0AWxgK\/s4thoCtoQBbWOn+tge\/lW3rBXtXfH629Wi9Qg1jEtJPRNZJP\/WULY1yCwlTftamdVCbEEsbov+aIJ2qtURUN1uBIbl3e8OlqHQZUPbQOApD0n3uHeMqHjHe4VrsVGu1QTMM3QBi10SDZjo1S8FohlLEbwXvpbA7U8ETKhbIZhtckSCYi0ToQoospig+u9TU5neIwjLwcGFnobLSUwCWfjCowRxhIswYc6k5cMqdm2MzbuGFkPjxSdGcVfps17PclgsMJ4xhlO14hvYWBhAznGGHbmoDmfgwE9xspGV7N+3oUi96dxKkMtrZURZ4cixkPKibmBQnDgZzMyQypZH8FEzGwLKJVEzlb+GFOp0GM2aEPOSmVwDBbs5tbHtzpzZTKUmMzL\/t0NZs6koZ+dDR1nQDe7zkxrtBzw7CNLcsoGCbXplJGyaOYke9KIpQmmRggXT7NI0j4hM2yLA2TWopq+ksfDnlS421JGmwadtxGoafxke1D1vqme9hVrn9Bx63nMlVT2iXu8VFbv+xmbpoOgQRHtNpdYiNGihZVFbOx7O3nFie8Htbue6BNeWnLKfXeNVXADH56ZzIIwNiXQ\/adrajjehB0HvQuzA3lzAd6W9DQKAFzrcoS0k11Q0AIE7eti6znO2L9G8hQuhZw7Hr6wjXo6Jn6LiFzBoz54nN4J\/wOBJMnTNjFDtgofZ4ytfdwPIDGqE7zbmEOYzx2su84Tj3G6Z\/yY2amD+8wbpe9TL6HfRERj0ncNa5UufkMnJJRqir7zlJ1eH0muGdaq3Y+sm63oHUH5pqHN96mMXq9UbJnYOkJ3fa+9X2zfw9nXEvV1z10Dd92N2hOVddFYBO7j+LoC9S7zveEe72\/si+HApnu4gvTuyjv7tjCLe8ZR3eTwlDyjCG37ol0\/a4\/UOy8bPyfP5tXmIZ5X5rG\/T9FZCfURh\/6zRAz68qn+wmGSv2twnG9dNR\/dZVy\/iIpe89V4fvu6L32oM2b7wyvc58319HwLAk+bRl37Osz9kp3N\/+dvPPva\/r32gf3\/85C8\/3biP\/vSrH3DDb7\/738+BV1NS\/vOn\/27mZkrdz+PRIZb2dEKXf4MTgDznfQToOFWzgAzYgA74gBAYgRI4gRRYgRcQO\/73Yz+XgaWHcxzoSyv3gakXMiL4eiZTggwVbKuSgELAdiyIIPhigMoXABlHKi\/4BDSILjcYILIigyz4bnjybz+RAAAh+QQFBAAFACwAAAAAAQABAAADAlgJACH5BAUEAAUALAAAAAABAAEAAAMCWAkAIfkEBQQABQAsAAAAAAEAAQAAAwJYCQAh+QQFBAAFACygAH8AAgAGAAADBDgD3J4AIfkEBQQABQAsVQB0AG8AdwAAA\/9Yutz+MMpJVag468317WAojstAnmgKAWrriuYrzxVL33iu7\/Hut72fUHQJDo+bInLJETCfGYERSm1Iq1jHNcstbEnTbmjwGQFs4uoZnX6uw23hGgCP7+Zsu3xe19\/weX46gH2CL4CBhjSIhYopiImOLpCSOJCNlSKXmTObnIeMn6CEopOhpSqeqCiqqyenrq+ksbJ4mLQ1tri1b7u8AAS+JHjCvMXDa8fIkcoZyc0hZ2XQHXTU0bfXDtbaHNzdG9ngJePl5lTT5xLp6hDs7Q7v8AzM8wXy9vn6+\/z9\/v8AkTgJSLCgwYMI4Q30h8+euIQQiy3s1zDiuGAWM3bD6O8yoUZhFT+KHPmJI8mTjkK2M7kOpcuXMI+oVCdgZsybKFjibKBzp8+fQDl5DEr0RM8dCQAAIfkEBQQABQAsUQB0AH0AdgAAA\/9Yutz+MMpJ3ag46837vF4ojiRFlGiqcoEIEkM8nGttFwI5BEDvB6CbcBQM+Y7H4nDJZCCfAFpzGsmVoEmq9mElYY\/bcAGAQ319UnGT3B2de0o1My16A+LyfMaO1\/slfH+CFYGDhhB2ZIeLDXZ0jIdvfZB\/dpSUkpeQb5qMmZ2RX5Ogapykhmejp1upq4NnroJnj7FhrbV5t7ilortyur6sXy3Btr3FwliqyDXAzEywz1TR0mvK1VNf2NlQy9tX3d\/QUOLjSN7ldU+06SlP6O0e7\/E3T8T0zef4Nuv7+T7w\/O3JIlAFkoIrCCI042OhwR73HHqBI5GhoooTA2KM0GODIwqNHh\/cCemG5IiIJlOqXMkyJLuWVWDKtAGSZc2ZOHOKeKlTQZueDVACZXBzqFEJQlX+PJrUKDqeR1kujVCUXtWoMKcixToTas6bTbluLKpVbMWrJMua3aAWH9qQbddy8Cq3bs+3dvNixKu370K+csL6HVxRMCPAGOMSVmE4mGJsCQAAIfkEBQQABQAsUAB3AJMAcwAAA\/9Yutz+MMpJqy1Bic2v\/2AojhXBnRuprmz7DWjsznQ9BrFs73zP5CifcOgCnojIJMh4VDqfD2YHSoVKU9Vs8irQeofcy2A8IHzPlbBkDGi7AWO0PHqNDALvfHsw72O4XQ0DeoR7fnIwaguDhYV8h1+JdQt4jYUZkF6Sk4yWjplam1IFnZ6Ej6BUolKVpqepVatGBa6NmLBPsjlmtZe4ULoxfL2vv04mV4\/EeajGSchSqMuGzk5czdPN1UhXZgzLAd7bW6wNxOHj1kzatL3s6ULQMQS3C+7wx0bvveL4RLrv2pkK6I+HLIKu6hUcsqqfA1cEF9pYNcGUQok+cDSRMBDyY5JEERV09IgkwJ0KntCRlDNyJRpTLud4ChlTycyaLy3RxEnkJk8vnn4C1SlUC9GiWY4ihaJ06RNLTqs02hnVxtSqTAmpxJrkKlebxb52JSQWrB6qZVuETStkLVsfbt\/yOCt3CNm6bZnhzesG7d4Rb\/z+FeHG5GC41A7PhaMYscPGMxJDrsF48o6LljODCqR5BubOKgSDzsL58OPRJEqjJvF5NQjRrh+cjv1BNe0Xt3NbITK7LGzdwEXgCE7ch+3iyFkcT45mudPWzKNLn86buvXr2JH+Br49u\/fv4J0b6+4aAHjzMaGDR0N+Per2o+FnSQAAIfkEBQQABQAsUACBAJ0AZwAAA\/9Yutz+MMpJq71YaI27\/2AoXltZjmiqrp\/pbmwsz+Nrc3Su78zt88CgyvcTGo8kYhHJbC6URKeUCV1Or7uqFcuNaV2EsKBL9moHg0ADAAigy3DQGcKutwfxvAVKwD\/sgH56gw5Qgg6AiYeEg4YRiZAEjIxKiwyQkJaTZJUSmIlqm05jEEQEoXSfiaJxPpprqoCSrEizhTevl7GytLUPrhS7iba9QcQKwMHCdsVHxwW4Fct2qM1Axza5iNNs2tYxA6TRFtzd30LhydLcb+dB6TYd027uRgHZHsLt9UbwG9XkYgV4xg\/IQA37MOzyVnAHQHmqGDbME0vixDgRLxbLqJHFliqCHQlhGhjSIySSJVmdBJmSIqSWKkHBFJVpJs1ANjcpyqnTjkWeU3ACFelzKNE6P402KapUD9OmLgEkhXqkDkuqQdtcxeoEKVc4Xr+WMSeWDNmyXaSiNTt1rQ61brG0icsFAJO2TfHS3cu3L4itfrMEbqJ3MIrChkUATiyDFON3jyN3dCxZB+LKmDllttxl8ebPCh6CHq1HNOnTZC6jbuB5tesgpsuofg2Ntu3buHPr3s27t+\/f\/GIDdyB8uPHjNGajTQAAIfkEBQQABQAsVACLAJgAYAAAA\/9Yutz+MMpJq714iZ27\/2AoMgIxnCjKjWzrvo4ZTKcA33g+2djA68Cgi+AJ\/ITIJNKnbDqf0Kg0MphacYLqaHbtNo4XAtdLdoEt47JadF67he23HHtJz++WOH4f0iMBRHxNfkAAdoJWJjgAAFqITY4OhyOGkY+DDpYslZdSjjaTIo2dXaGUpKipqqusra43AZqvnaOzqgC2qwCEuXeyvYK\/wMPExcbHyMnKy8zNzs\/QN4HRZEbUZabXULjaZNPdieDi4+Tl5uct3OhNgOtOwu7x8vP0cPVB8Pf6eLz7IP3+OuQLSJAMwIIWBiJcGOUgQwkKH0pE4hBHxGQXJ0KoqJEwQcaOX0CKVMIxSLaR5D6iLImypcuXMGPKnEnTg5iaOHPqpKZup8+TPsWpDCoBaK4EACH5BAUEAAUALFEAiwCcAGAAAAP\/WLrc\/jDKSau9uIzNef5gKI4kMwRAqq6AVr5wLEMbSwlzru\/VsF4DHG9InBF8qU+wyGyCCKikUiB0Wq8OqEoUrGK\/zmiLSwWbi1op2XtuRwIZpHrNdttD8jGpW7\/7LSdze1R9f4YQaTIEZYeNEgRbMXyOlA5IOYuMlZWXRoSFm1YDEZ0xAZ+hnIIkAXygqVYAow2lJa2osHeyC7Ulrrl\/LKsjma\/AZsMjk8fMIMvN0ICE0dQUxdXYDwHX2d0K29Pe3eCa4tWn5ebU6MbqsM\/u0fDxzfP0x+z31OH6zPn9\/jIBrJduYKouBo8hTJhrCUNgBR9SiiixkcOKmy5ipKRxh6PHjyBDimQya+SfkibvwEnpZxdLOy5futEjsw3KmmBo4tzJs6eMmz4Htvs4dMjKl0eDKtVHwE1RiUnPAF1K9UVTO08TTq3Kdd2hqF3DVgArtmwusmbTqmWI9mvFq6Hgrp1Lt67du3jLxszL14lOdUf6CpYKSy5Dw3\/aDo6AePFaxY4hZB2ZAAAh+QQFBAAFACxPAIoAmwBgAAAD\/1i63P4wykmrvViNzXf+YCiO5EIMAaCubOm+cCyhrUQIcq7vFK1eN55wKDutPgIcccnM+ACgQbJJrT6eoql1SyXUQjcldyz8hqRisnoSwKR+JPR6\/hrAS2G63tGu2KEvSWl7en0Tf4AlaIOEc4YRiDBhjI1qjxB2MYuVnJCJLouUnZWZMKGjqBqfioKpewADfKsjA5OuhLAEBUazIQGbt40svWetwce0xsjLbsrMzz3O0NNX0tTXGtbY1MDb293e1+Dh03Lk2Obn3Frq5eztz+nwz+\/zy0H28aL5qfL8wfX+uZIiEBnBgsEC7ENYSRfDW7EeulIo0ZXDihgzlljognSjxo\/MiIEUeGmkhJIm1cBKybJlgZUu10SMSQYmzTEzb24BcJFKzpg\/dVKxKbQKyqJLgiIlInKp06dQlUKdSs0j1asWsWrdypXI0a5bpYId0ZNQ2bFo06pdy7at27dw43a1Kreu3bt48+p1enZvhL47AE9LAAAh+QQFBAAFACxQAL0AbAAuAAADaAi13P4wykmrvTjrzbv\/YCiOZGmeaKqubOu+cCwzwWzfeK7vEcH\/wKBwSCwaj8ikcslsOgVO2eChiFqvjimkiu16vyaoRAsuC8nmcHrNbrvf8LicFPCR7PO8fs\/v+\/9LaICDKXgLNUgJACH5BAUEAAUALE8AbgBvAH0AAAP\/WLrc\/jDKSWshI+thu\/9gqAwBYJ7nQIhs60pEic7pa9\/hcEpngP9AiA5gMfmCyB\/B5DFxklBXCeSMWkE6EfPKrRy1z674QWQBwuN0AS36qt+tMlzMDsnn3Dp+P3Hz\/4CBgoMvAoSHBYaIgysvfot8j5B4epMfjS+VlpucnZ6foKGioxSYpFyKp6iqXamsUa6vsqGSszi1tjaauS67vCy+vznCQMHEHsbHFsnKFLjN0NGjzNLV1tfY2drb3N3e3+Dh4uPk5ebn6Onq6+zt7u\/w8fIw8\/X29\/j5+vv8\/f7\/ANXcCUhwUipT554VJPUIoTmFCyOmcSjRVqyKsyBijDYQJprGBtRkXdxIsqTJaCNPgvpYMaTKCinVsORGMd1MgB15URvoskUCACH5BAUEAAUALFAAbABtAH4AAAP\/WLrc\/jDKSWsZOOBhu\/9gOARAaZpaqK5sNZzwybV0rZ7RSdh8n5cVk284JHlKAaKS9gKVZsvoB3CjSq8uawgAxXqH3a+4oFUlx2jaOe0VsN8hN3xu2dHvEjt+3wjz935\/d4GCc2uFiIlvcop0eo2QkVGEkliHlZiZmpucmY+dUoygo6SlpqOXpz2Uqi2srSufsDWis7S2PbW4LLK7vr\/AwcLDxMXGx8jJysvMzc7P0NHS09TV1tfY2drb3N3e3+Dh4uPk5ebnV6no6+x7ve3w8fLz9PX29wrv+Pv847r9AO+UCahIH8FKr5apg2aQWcODkB4mCyARWUKIBTFqPPUPDs9FNAuhdZw2kkdIHgkAACH5BAUEAAUALE8AagBvAIEAAAP\/WLrc\/jDKSasaOARMrP9gKF5AaZ7DqK7sNJwwnLZ0Hb5lhNp8D+EV08xHtL1AuaKyBRABhsvo5xgqdaTYoOqZ7UauKqh3TAuQz7Qmeiyurtks9TvbRs67Zhb4rhTQ9nxEfoGEEIOFiAuHiYyNiHWOb5AfeZGWlx+LYZgsmpxknp+io6SlpqcKgKhRoauur7BLlbFFs7Q+k7e6u7y9vr\/AwcLDxMXGx8jJyss0uczP0NHS09TV1tfY2drb3N3e3+Dh4uPk5ebn6Onq6+zt7u\/w8fLz9PVKzvartvm\/+Pz\/WNr4A3hpH8GDCCMYTHhqILNWDCPi2hYAojSL0VRRq7gNF6PEj2E8gqSmMdHCkSgtyEkpiEdJIgkAACH5BAUEAAUALFEAZgBsAIUAAAP\/WLrc\/jDKSesi2OrNu19DAIxjMHxoqk4D6brnKs9d+94jre+QjeO84M4ncQWESJXNQoolnxpCTkOCWiuizsh57TKkn6l3XOByxOS0B2BWJ48ottsqgIfbc55AJc8n90p+SQQreIIzhIGHiw2GjCmOGpGPHpOUZJaXXpmaV5ydT3WgfoCjc6Wmap+pQXasr7ApibFdq7S3uLm6u7y9vr\/AwcLDxMXGx8jJysvMzc7P0NHS09TV1tfY2drb3N3e3+Dh4uPk5ebn6Onq6+zt7u\/w8fLz9PX29\/j5hwD6\/f79rv4JdMNvG6qBwAoiXIgkoLhZ02w5g8jwlsMHF7FRrMixGl1GawEOdmQlcaRJcx9PqlQncuWGEOE2mkoAACH5BAUEAAUALKEAWwAdADEAAAONKLrcNIO0SdsAOIdRu7hZmHEeA4ooWQZoi6nV6aKePItww95ux885he0XogyJGArSFVy2mk7cJCo1UUO54zJ7HTW6GQkDnPySp2cGgQywsN3pxa4bMINzbDwZtt5b\/QtaS2JCb39gOoYLbG1jigJ9YHWBeY6ACowqgluFmZiMACSgoZ+MYqOLoKlskwIJACH5BAUEAAUALE8AQwBxAFwAAAP\/WLrc\/jDKSSskA+gwrP9gKDqBZprdqK6sRZyw2c50+8ZxUO+8hf+pnnBYyPxwxCTvCFQ6WUZm7EkVRaWnqtZTwsKC2\/DDGwOLzwryF81Oq1Ft9O0NMMerV7X9\/syT93xKfl6AgURddASGWnQyi1WNGo+QkZNPc3SWToNemoKROp6HoKJEMA5HhaUsjhFlq0KSFGuwSx4nqrVOcLozArmoGoq9Lb8hssQsAqEfyMkjAgIjAM8r0dPVKtci1NkiAsPH3t\/AEMzjHsboTtHl68rq70TR5\/I92\/ZD+Pn34fw88f7VaCcQYMCCxZYhHChtIY19Dq01jKjMH8VvBy+CIKgRS1rGjhYggkw3ceQHkSYpoEwpARxLku5ecnypsiTNljZvNugwUyeqIvV8ChVjcWiDnEaTKl3KtKnTp1CjSp1KtarVq1izat2qNejSBAAh+QQFBAAFACxPADwAcQBiAAAD\/1i63P4wykkrJcTqzbuPQwCMwDB8aKpyA+mO5yrPcvvedK5r9v0Gu6Cw4SvGhkhar+gCJp8rnKKYgVo7S8jreO1SbBQS10t+tCqusvrhRI\/W8AVg847bNfU7WdCZ68lVdH9kYxVtg1aFFIeIT4qNf4+QdgKMk3p8l42ZmoOcnXqSoGWio16lpleoqU+frGqur3uycLG0qrdqq7k7u7y\/ubbAQ8LDQcXGOoHJSL7MKM7PHtHSG5XVQsjYKdrbH93e4XbU4hLk5RDn6A3X6yrg7hPw8RHz9A\/L9yz6H+r3\/vHa8Yvgh4G9gQoOIlQ4MB\/CLw83AIxnKSIEhvww6tP4zyWihYkeQ4IMSbKkyZMoU6pcybKly5cwY8qcSbOmzZs4c96piDIBACH5BAUEAAUALKkAPAAXACsAAAM4WLq8Ii3KMlYoZDZytf+UloEV6I1mqirQgq5wrHVybd94rjPl7v\/ATXAYpBGBxqNyyWw6n7YkLAEAIfkEBQQABQAsTwA9AHEAYAAAA9tYutz+MMpJaxQ4Y8u7\/yCDDUNgkluorqwlEAE0CG1tt8IwzXfvWzoKgfYrGhXESvLItAUrz6ZUtVROr1MCdsuJdaLccA0sLofI5nRXzfZ422H05A2vy+z4vH7fpvPrAH+Cg4QOWoVth4hqVYuOj5CRkml+k5aXmDeKX5mdnp8dlaCjpAqbpTeNqKtHcqyvsLGyFYEforOcuLorp7u+e72\/FKrCxcbHyMmst8oLrs3Q0dLTTcHSxNTZ2tvcEszQz93i4+Tl5ufo6err7O3u7\/Dx8vP09fb3+KXfzQkAIfkEBQQABQAshwA+ADkAPgAAA65Yutz+EIpJRbw4uzmGCgMxaWS5CN4TjGYboZjozk2KWTRNkAOe\/zGgMNIbamwknzECaO2W0CgUKV08TdQqLavter\/gsHhMDpaTYG5GeW6739FmKwCvb+0Q9RTP7\/vfbH2Bf11XhIeIiT90h3qKj4QdAJOTII5fA5SamiBnmZoLmwCXcZMYoGGmJJRgAXIlk6Q\/mTOThnE5AIxLu0CvNXdDo4iykHa\/br1+ysaRQwkAIfkEBQQABQAshABnACIAHQAAA15YusxELcqpxgA4W8rXzSA4dNMXnkBANkHYoKvSYp1LmrHWEXS8YBDKxfcaUXpEBTIyTDIAFJXzaYxAp4xqFru6cr9cLXgsJJfMEjG6oEa3zdL1Ii4v0OX3uv6sDyQAACH5BAUEAAUALIMAZAAdACIAAANmWLrMNIO0SdkIIOswqh9aKHYeg4moJpXohK7UCZRKWIEZvWhko+m+WQMHdPVqwiIjt1RSkgWQ09WcfqDWBibbENS43S+4ARsvyuYC2rwet8FvbjxNrx\/Td3N+vAdf6lGAC31cAYAJACH5BAUEAAUALIMAYQAdACUAAAN0KLq8NHC0SdkIIGswSK3DJmrS54woaYZpW05EKwPVLAcTa6fTLr8CnW+EWwxlpyNPIVRuFk1nZoGRiqhWkUdQzWa2XS\/YqxmTAWZyWqwIZ0tuK\/zMadMh3LskLsXznX56eWeBhDh\/SheDZCGLXhgEiIB0GQkAIfkEBQQABQAsgwBUAB4AMgAAA5couiwzAcjwmr0uyr0DwdjAjdwANhqpmqeQquoHinANnLbNWnQOh77ajhGsBS7FmoWQ\/DWYTZJs0Ytuhg7rCFvVcrWlRtf6BU\/E5jNjbEWnb+v3MZ6eU99lcx6897r1KHiBdYNmdgpvAIcCiYuNDY9EcpCTkm8KLIlwmYmYiJ0On5ehjKCco6dpCnOaiKJpJnCaNwAPswAJACH5BAUEAAUALIMANQApAFEAAAP\/WLrM84O0SSsdAegdhv3gsI2bB54OqQImGq6r5H7wGsyWWKsy3uyrlm8BXA1TRdJxoUuWloWmkwWVOoU+axKL0xa5s8xUc1uKx+XjeZoerp1t39sJnSfr4w00r1\/yNXt\/gXyDeYVjh1OJdCg9RIJ+Rgo1hxYqgygjgTN9QwQAPoBHjpxLpC6gQwJgjaqsUB+rS68Wske0kwwCtm4+u7gWAQI4v2bDM8W3xy7JQwPLKM1Z0CfSXdQg1jPPxLzT3cAV3Mje1+Cz2LHl2+m16y7jzAJx7N308O0Vu\/co8ROpuuYZ61YnH4VdBSucKoAQisEJDZc8bBDxyMSAsNrdq6iKNKBDjxJBWqSwkOHFWiI7kstIrCQzCgApuozWkiWycChvwpq5oMy7egxiUuS3jRnOEAr4JQAAIfkEBQQABQAsgwAxACEAVQAAA81YutxELcqpRgAYD8oZyWAGddMQnsBINii6NmYWgduryBT+xqRmXy9AbQWwYYy2QjFpHDJJTorKFp1Mn9isdsvtrqrQ7xMcIXPMDHRJzFRXngF2Mh5m0jv33yr\/4k\/8XgWAXoNdhVyHgYqLjI2ONgKPkY6TjZVMlxKZkB2bL54MoCSiCqQcplecHKmfHawrr12xXLOPtre4ubq7WW69j75YwWUdwzDFv2fJFIkUas1rHNASidMR1na82tvcK6Za31nhWOM7C+WaUsDdTAAJACH5BAUEAAUALGkAMQA0AFMAAANrWLrc\/rAJEau9bgQVNv6g4DkBBZ6PWaloi41uLM90bd94ru987xC+oHBILBqPyKRyyWw6n9Co9DOYWq\/YrHbL7Xq\/4LB4TC6bz+i0es1uu99wcgCwAGyARQIMgo\/7\/4CBghyDhYZte010NQkAIfkEBQQABQAsaQAyADUAUwAAA7dYutz+UIlJZ7w4SzLCGoOgjaQwQIFIrpB6uWwMR2lsnxpul+u8X7qf0OEhBYfIpJLhW9oIzkYzSq1CoNasdsvter\/gsHhMPpLP6LQ6Wly73\/BwO06v2+\/4vH7P76OnfoGCgyRYhIeIiYqLECAAj48ghl4DkJaWZlaVl5yQmU6blg2cn0mhABiYVpAkkJNKAY8skQ6lGgSyMbRLlT8AtrpDqEvDvkuvNsVuyIzNzs\/QXcBh02BzQgkAIfkEBQQABQAsaQAzADQASQAAA6tYutz+UIkpCI046yJGaIOwjeOAmWT6oBihvtIowimb2XQ2y\/mG98DCh\/QLGo\/AHXJ5VDKf0IgrSq1ar9isdsvteq3Fr3gbHpvP6LR6zW673\/C4fE6v2+\/44DTP7\/v\/CwR7XQQDAIeIAANlUIaJjwABjEeOkJaTQJWIDZCYNJoZiZ4vmyOIg0aOKoejJIcwh6g9hjmKSLQ0kUgAQENGvD2+Z8KAC07Fx2KyMAkAIfkEBQQABQAsaABjACEAIwAAA2xYutz+bMBJq70460WGJxvkAWQJBFJYdGZbptngziRsyebTBhdOViYbpJQpgSa4TY3yCzUfMpUCIFxEpVSR1ArhbSnerdBb3ZQL55j2ywa33\/C2wAF4z+OMO16h3x85cH97fXiEewyCX0KJcQkAIfkEBQQABQAsaABgACEAJgAAA3xYutz+jMBJq7046zV6l5szBEBplgO4DWd7Dqsrl0HGno973aVlwhVTxqR63DYoSi+0fBAAoQUUwooqAEUG0FrIch3eb0Qc2lrDBXMUPeWyyca2Va2gl41ke01sl8\/heIANdnB7DAKFiIeJDYpihguOggqSX44wlYKZXJIJACH5BAUEAAUALGgAYQAhACYAAAOMWLpc83CQRmsbAeitw7CgMnAkF0zhVa4bmjqkFb+j9hbbl263koe1HgOgs2SEQ0BIiRyCRk2npRjdVRcBEPM6EMiuioCXAgV3K+WrYKwCF9bobRXOyKbn7Lr7ncfuCX1he2dOWW6EDYZmgTiDjHsKj5CSe5RulmCYapAWLpwMVJ6DnxRifqRUb6QBigkAIfkEBQQABQAsZwBLACMAPAAAA+9YujUTIDhGq6UQ6A3G\/RYnbqAVMNkolt+gqidbpS\/nyUwN44urjwRe4ze6lQAKGjEiXI6aTg40qgniqBsjC6vRHrnIK9j7AWvEYDTXamGbOx+3mQ16g4y6C6m1UOEEMk8yAQKAX3uDhVuIf4p1Z0IFhY56kEKThhcZkZKTIBCcnZQmYZEEnh+gnAOomqENrSavrKMzs7GvJrgFMbm8tUm+C8C8wgrExseZOT25pyHNt8sKpWQ8tHe52HzS2d1xuYTTFHScyMe+55Lp4wztPLV07zjPDPK+2wr32qNa8zL5KvyTMapUgXKcxNmytspLAgAh+QQFBAAFACxnAD0AIwBKAAAD\/1i6ND4ryklZADgPUjsdWah5pCKeAFRWICpy6+SeQSy1cwjbBZ5jKt7lF+KZiEUjMhSMLUe8Z0YpBVBRBdd1SkmuakMrCWMMr1JC8rlZahltIB6bFLcFBOeeOHaH72N4MXMlgSuDJIVtbwSJHoeOjR2PkpEsbwOVFDtwApkSm4Kdb3yiHaBGnZ6jEamrhKUfrgWwshWMtZC4lHyXqhE1Rpi8Zb4LwKiCo8UKkx3LPcrLzbbSo8KKvYbWnsenhsveK8vPE5575BLmC+is4qu0FewMxfLM9KvXHvU999uEq30QAdwH6Ms7TRKOISuhkMetGwnxRWLTkBNDibqcCXQVUAVGxkEJAAAh+QQFBAAFACxoAD0AEAAJAAADEliqsrSQjcjiozjrvRr\/IDeFCQAh+QQFBAAFACxoAD0AEQAsAAADOli60rIQijFCoC+WqdXIy9AtAUiMUECikAiyygvPnUor9q3vfO\/\/wKBwSCwaj5ETkrFsOp\/QKEp0SwAAIfkEBQQABQAsTwA+ACwASgAAA5pYutz+SsgJq61z6EGvx8LgBNxnMpJVnqbgrewlvvHltnVFnHPu9D4f0HMLLoZGVoCF9C2TuSc0Jp1ar7\/YDtrEer\/gsHhMLpvP6LR6zW673\/C4fO6k2+\/4vH7P7\/v\/gIGCg2UbAYcDW2ADAQCOj48kXwOQlZBdTo8VkVaNACYAmDyOLKFJpFRGlEJBVWifaoqENUVptVE5smgJACH5BAUEAAUALE8AdgAZAA8AAAM2KLpKMwGAx6odMutp7\/7S0CkRCIpWaYJEha0musCw\/NLncuPfovKbGZClGOYEP6OkqAwKmsEEACH5BAUEAAUALE8AcwAcABUAAANMWLo6ATCMwapdA+oN6LUEJ2ofE46KWKZkqXlXBq0LBFctnd7YrDOAWPAHjBEtgqOOoKTxCs8mI0qEUajNq3QRqHS34HAzqWCKreJKAgAh+QQFBAAFACxPAHAAHAAXAAADT1i6NRMggjCYvYoMyWXF19aNwAcqIreMJqie3ime1gQD9IVjW663i55vCBwaj8XjJaBsOi0t5lMhndIqVaegZt0ydk9TBexMTlsEa0htSQAAIfkEBQQABQAsTwBsABoAIgAAA2EoujzOMMIBqg1Damq7zdrCeSS4kWhlTmmrBW26KkQsR6PdzUKuq7ifhwcTXiJGDzJpWTIBBMgTuKhNVz5joDGtcLvfafhpyhrLXcBWYTaK0oB3el2EB+p2+EVfwc\/5aoAJACH5BAUEAAUALE0AXQAeADwAAAPQKLo07mTJuQCQJNi9B\/3WMnCkFXxTKIxleaKK2s4eHLJzCQthTtsXX6sGAuCEHZjmiDQqjU0OkbKMJlEjgtUynYx4267ku3Vig9vXh1yGsbdu9DayllvFCi04jNKXVSB7cCh2VjaCVnQUhVF4PIiNhJBRkn+AKZNNlZZ4Fxp\/eCefZXgeTFFqYyuWFxSmrGurnK6yoLSnkV61f4u7pJi4iQsavqADn8WsN8otAlrMJM7Q0Zmw1ZYx0xvZ2q3dMt\/c2uLT5NDmzOjKCqPlAu3QCQAh+QQFBAAFACxMAFYAHwBEAAADzVi6SsQwSjaAvWNqevt9m1R5ZBYyBKkCJ7Oq5jm+XlvMNNYG5GTFm1oQqOm0iBMe6yiQWWyDZqhiuwmkwWrgelrauCFvC5ytkotVazcdPQXSW3e6gNW80\/XkHLS5V5ERgBttg3OEGoIbeQtSiRqLEI4TkBRzN1OWhyKZlAqSkxt8eKGWdKWYp4iQd2I2cYEKrV9lc50Fsi2iEbgytGydvCGvEsEhwKeJxX11fH6cEs6W0anUqZ+Z1ZvZkdsQutvf3eLj5OXm5+i76eLTqQkAIfkEBQQABQAsTABWABUAHwAAA0lYuirCMBZHqWR0aF2vG9JgQd+lEA8Jmk3asouIrfDkCjQsN0Gt7BPf4iZsDItBI3IZYyp6zqj0tIBOfTmk9Yp0cb9gyDZMZhASACH5BAUEAAUALE0AWAAUACIAAANAWKrSvTCWRoYdTy4xgsSCxmmbRpBQmKLQEJ1subix5tUFje98D\/fAVnAoue1UxKRyudPtfsyoximtWq9FIrKXAAAh+QQFBAAFACwAAAAAAQABAAADAlgJACH5BAUEAAUALAAAAAABAAEAAAMCWAkAIfkEBQQABQAsAAAAAAEAAQAAAwJYCQAh+QQFBAAFACwAAAAAAQABAAADAlgJACH5BAUEAAUALAAAAAABAAEAAAMCWAkAIfkEBQQABQAsAAAAAAEAAQAAAwJYCQAh+QQFBAAFACwAAAAAAQABAAADAlgJACH5BAUEAAUALAAAAAABAAEAAAMCWAkAIfkEBQQABQAsAAAAAAEAAQAAAwJYCQAh+QQFBAAFACwAAAAAAQABAAADAlgJACH5BAUEAAUALAAAAAABAAEAAAMCWAkAIfkEBQQABQAsAAAAAAEAAQAAAwJYCQAh+QQFBAAFACwAAAAAAQABAAADAlgJACH5BAUEAAUALAAAAAABAAEAAAMCWAkAIfkEBQQABQAsTQAzAJsAuQAAA\/9Yutz+MMqpyLg06827\/yBDFEATDGGqrmzrvnAss+hs33gz5nzvL4GfcEgUFY\/IpHIZCzKf0Kh0uZtar9hbTbHNLkqkk5czADPMYwegm36wTW13HOTkVJXvub6D3vvJfnl\/EXWDhoeIIYJZhYmOUY2PPZEvlBACkpmaP4sRfZs4dxKdEJ+gG5YRpAuraqevsLGymq2HtTeYHqKbt1G7mqmzwsPEGsHFN8fIg70xzctEn8qs0Ei\/h9dSzw\/Z1X\/bw+As0yDdXN5H5gXkDeIgptgz6ugU8\/REpLn3Qu77M\/2a4OGTwY5IwSwA\/S05yEKgwmgPnziM+GNiO4oLoSXEqML\/XqUO+jjG2ghHpMkXHhkwxLhSQrCWMiwSgxlD5pKQs2j603lSBsmeHHhyAjrk5xOhF4ekXHAN6QpLOO0QWeqzCQSqe4xeDeF0T1dLWBV0JZrBklYrUZ1xhWGTbIuxbh+dRRm3rl0v7voILQF3T1tCCv5iBCN4zty7TBErxhi2WmEIrRrbbXt48ZbKiFqm3bADc1wnkik+1lEgNKxnQj0XU724tTaTrB2YvjdbZevNKWLD6us6GcfadDjy1jC6Guvi4WJOQN77AfPmDZ67tScdemDrLapb1w6de3PvvcG7Ft+a\/GLzioenbx6gtnpkJN\/flW+X\/izg2PPrLwIAf2\/dtPsFGJh\/rgEooAYGPkJgUgd2sGBrDzYoYXQTcoAeMD\/YV+GGHDqQYE8RZvKhSRqW1OGJKNoQIiIXUtBiijDG6M2KxjxUooyIvYijIvvoGNSODIwIiRU3WiHkKEDe42MIS5J1ZJJJFNlTk+PIQuVbsPT3h5Q+aAkkl1DaUEaYibQHygBgqnBlEWnC1mYGa0IRpwRzRvHkF6U9tAOVQdCYCQDigXGnLUD8BeibyBBgwQCKKopMAgAh+QQFBAAFACxMADIAnQC6AAAD\/1i63P4wylnIABiEQbv\/YCiOJHNlKMCVbOu+8JI52RrfeB4HgITpwKCQcqGohshksNcBEJTQKKvYtEmvWInVmO16GQGQ80vGMj3Hsnrd2LLfXrdoQJfDR6eavfMMhUkWKRp9dyIEgjWAIn9zPzKJhSGONGdDjCBUDxh7kQ6ZmpcenBChHZ+aY50Th0ajnosilREaqhOnELI6pbYfqbUPuxCuLcEvab80H8Uwyw6ETbnIrGrNLdG\/06JC18KSz8gFt13cD8MMx+Dh5FLrDdUN6ODiEeYk7SzxyPOk2x8CsfXYZOvwLsk\/b+kWDOxwMGGBe3cWUvgWoSAUiHcwsgmoQP\/jG49qOD50KAMIyAoeLJYkOXINRX5+WLZU89JBQ0wyVYYTUrPBzQ8i1+jUGSKoNpZEhRhtlVPEzxvDROaLUqcOkp4uogLMkifF0i9aJX0tcULTWK4EY2EFUpaeqY0UnjbBwuPF2Qdr3U6Qy0WKRBJ3Y7jKq+nKPjBE5iTGAyRpi8MM+C4I3Abw4phS6q2lbPcyTikWR3HOSiHp6LRH9YaQXOh0aWWsgxLWwVrLFZWsZ6uprRpKwNzpdJ9zzQvohJPppg4JOAokcc+9nveGngyz4RG+fIMIwBqkYxdJkT9e7QMZb1xYOGIVL+V8YcMaOZ10f4O+u\/TxJXyvyGY\/2fz\/\/OHgHw7S0aMRd1EMWI5l8JHXDTW2MdYgCD0F5doyjhUojEd7WKhLBAJkiF9R06VU3gjF2FfZFX\/pVyJqAkYg3HBYtCgBXxp6kV0UIOFIgopZsGeNYguOMONcD8YyDpHOrMGNUULiw2QDRy7xIoxXeMdXlAxU2VGAsAQ5wpY3eDmTTyUoaI+R6E0JwzVATrakmyvBsBSXK5ohYXV2lrAjaWLS+WUZf+7EIF0oyoVcnKsUuVUWjimqCIE3KJcEZ3h2FkOhShjlho0T7LJfPN9luqdTeZ5qKD4DEBCIlF0stYWQrSoAWS9RmtoIC08MoOAMH8Uh5CQyhSpssUqoCZiu\/8gmmYOrWN3aLKB9BsCDV25IO+0Um\/pAS5fMbitDjjKEEq64D5E77jno6mDpEjacK+58X00i77Y9npXGvdN6JMBd+7abg7JiDSrwDp8ZswLBB1tEgLJpMCwwRCFWuoK6LN1T8aaMYEzSPaMdo+3BVRS3qRUjk3wcxvGkrPKJSeTj8su45FioxxlLZynOGYdz2gYu0twJ0MYKHQlhEhvtwrv3Ke1kQEk7jR1HPEsNj0hVW60A0SRqbYanXmcpa9g8fpW10kxTR7a7Z51Nc9qm8Bs23HGvbRJlM9tNkJmeyG013aL47TTgget9g8R5G25WDokrTiPjggtNXOOOp8tW5P8qE14U5iRLR7nhmocAauU1I8F5u1HDQ7oYNq9uXMyulwx77D6oe3q\/6rr9Mcafa83p5bQvTtXtMt1O\/O56Bs8uosp3VHXvRh8P\/dupT3Q8OL\/PHnz1WLoeOoHX1xK+OrR\/n8P4kaBP\/urmQ+697nVWzv3mpLdvUv1wTI87HKMPrn7foIMfXv43DgFuyG4EbNPcDGigBeojgTGDoH4k2I+EEOttfBsHBXFgPy8cYoNvYiB2QIiP7IGjLu26ILL0RygR2kWFDtmEytrysfmR4WEw7IQMlYZDEnakgywJxAZ3uDZfAYsMm3AhWPJghiQqzwLXyuGbapDBsNEhiigYIQoSNlBF0lmgKtZCRAasVRU6CC0BACH5BAUEAAUALEsAMACeAL0AAAP\/KLrc\/jDKqcgIIIdBu\/\/fkI3kCJ4oKJYjl77ws7JmbL906d78OdO9IAWTIxGEyMmvlGwulsWAc8qAZqjJIm2HbVq7QWuRC0ZCyzxxEe1csm1Ere6d\/NFh8u3dXNuDCHksZH42K4R\/gSVSNxZHfiJTFxoDgyqJTDAWipVgnIVjL2paMGqLh2lynhKiaymsAKc8gaoQr0Aotqaxrom4lyS+ibS7EZfDDbYsKL+6xB7JV5a\/0SHTx85Pv9cK0MDSxtjV4OLTJ3HC4R7nec1K0xmO6u\/pHet537\/xHe+w9BP2cvS5eydQAqB5\/iQA1LKt24iCERzCSxhhIahn\/CDW4kex\/6I1cvlAXuoIwWKOhvxQIiTZwCSNdhFTfnD5kqUDiSLReeAHkyROee+2ybRZZeWQoRQOfiSabZpGBzT1dJAIYBs2idf4VcUYlGlTbTuRDlzqFWvYrlPFEjW7T61HtGXf9XSgNWtGr9w4toU7QetTLJJIWKV6lqxBrXvU\/GWg9FdhsBSo9nvDavECvRMaQx5bjnKgx4ksax7H+dLcKTr78oUwOrVCnm9a16Tg9mbderWpQNu7OWbuBrfZQBv2+6vhYsWbRM1AfLWM4IeTJ1kO4LQC2KVJ+3aOhfrkt51XabUuQLJVHt6PGt2IXbx0JN5pEc6eiLxky3y0PydIPxB57\/\/eCNfbfsfZ1h5ymKHRjXVUyafVdxA8SIdD\/aVS4T3uJVgGhRkOaKCGH67XSYFFcVciiMiMNyGJxpl2oRwvXiSghycy84+EHdII2DSnSXYjYq+9l59j24VXEo4Imqgbf6z5JcGDENIFnYJKypaHKlBGJ6QQbEVYXJZFOkWHlVE8+SWSBIoIBpmteKmkAGCyh2IXbOZg5ptxpmkkG7+pmCSTD+TJp5IA9hHog08JisZvhVJzqJNuyrXHgSnOeR2iTU45qJp5WVonQ3K+SQWkIer4qYyVbomEpi3q16qOkm11B6udmhirrFA9eF4QjXJiXqgmNsrcHo329KueLEKJn3L\/QJZKpLM6KpsYqTXu+aqr5SlKZW2xAkvirY\/QGitEt8IkrKOeNVstjecOu66NN1BywQaURIYpcIre2sK1LpKixgB\/xdqMvrgSDOVJodC0QZhkGazBwRCj6gEB8Xkb8cUYY3yeRMZm7PHHEA8mLsgkl4ytxfUha\/LKLF+j7wOnsixzyGkdXFDMM+d8F20QQ6Tzzx\/XDGVPQBd9sb00P2r00pby+6yUTEfd751QeiL11bPEeGWQWHctyI+6gu312LiqrOO7ZEutSrvHOJx2xp7c6vLbY3tyrkp0Y+3rgwEsm23eeqOcdU6AG12JwD4UfvUgcieueNRkNO7440wvoIm0\/5NTbjS9SWeu+ecBeg7657vWOvrn5DF8uuKlm7664qmr\/jrdrbs+O92xy3573Z\/snnftTvuudrzCvw188MUb7XeOyQ+PSvNdL8889IaHQb3UuQt9ffXWb899994DfTy04a88Pvnllyy99umb70X7M5+PPvwaO4Ez\/aqegH\/J2S+zP8jrA8H\/Pia\/Pw2wc044IMb6lwIFXqyABnRg03glwaqNqIKUigQG80eKDXKqCffbIAR55kH\/vKGErgEDCtmxohVK7IIuZAEDnxfDOcyqhoLxAw5D10IcjlB0KwxgEEK4vx\/6r4ZGBKIHY+E26iXxiCskRhOT98QGRtEZU\/RdFZx5UcJ0tAt6WwzFEumRxdWFMQYVPGMMygg6knzxdkKkwwHVSEP60bEHbPwdXvKYtjsOyXt+rEP4Avm+6xFyCm8k2ww7wkfx4WVijZQZwCgyvsCAbmGUjFLCNIfJTGrSX4XrpCc\/WYhIymWSLLFDJEwpB3oxxQ10osTP6rVHZcSGEgFI5AjodUjw8XAPFpCXvHJJTF4KkxJxTIcYEgAAIfkEBQQABQAsSwAwAJkAvQAAA\/9Yutz+MMqphBh4EEG7\/2AojuT1DByprmzrNoOEvnRt2\/E033zvSylK7kcs3oaUoHHJFCmb0Gg0IK1aF8gO4crter\/XJ3hcFS8tZjJIQMhYVmkfZxAIYDbqkMmxE22ZBFQOAX95SVkMAXEShV2IhnxJfmONkA2VEI9emBGLeZqWiR+geZ6hTqcLnKkkq6yvBQCwIaQOskSmDLcfgqm1UbmzJL8wwsYFxMcQwY7Kzh3Jz8bRCr09roMi1qHUIds3u9JQ383i5ucU2Lo\/3egRyeHu8vP09fYU5Omv6u7MXfzo\/HERWCBfE4APCKpgk+HOmmmhBJDrM0HhvRbqLGqRRMb\/YA1THlm08zJSRElzI09+kEgjZKsf8cAw++XyoqGaNl2ozOYtp8kPMSOFCOpTRo2dOHwgXEFNHdKjcoo8ZbH0Bk4HGmFNHUFU2FV7X5d0zROWV1EeZT1shcoqLTQjVXu4xddjbYS4PMaumLup512uOkiE5FtE4Fi8V\/QO\/Lns5VmOIEBZJEUYAuImWbGi5XHysp5TlW1k9jC6SGhhpYueTlLWrhS3q+m2vBd7Qu0Rt324jlDW4O4bnrO0AUDcztR2iicxOU68eXM7LX7TmjXAufXmO1M+ZlD9uneV0l141u29fPJ32\/ea\/65i5HlD722tZz8M8Pb59EeUHM\/zFP7r\/+Fl8gB\/\/v3nHIEvIGiJgc6lJwQ4DAKQ2xc7KahAhMQ9gsaGqWEhVIItEEIDhgAgweGJb\/SQWR8dYlAZiQugKKMSCu7BgnF5wDjjjqpEF+AXJO7IYwUOihCkkDMSWSQIGBaAZJJOLskkgwps8OSJSkrZAZUKoHAllh1eZCB3X2KpJVD\/kVkmGmdOOR8Ma7JZTZsTpJlInEpM6I6dDeDJHZ0R8MlAnMUA+oCgMZb5oaG6vDngl4x6gJ9lV0Yq6Xp3PWnppeZlKuSmnHrHCJKgbtmpp1D+VeqpnQzJSKmxiFqRq6qCKuusMm4Eq3UdKJIqrBQ0N8qvwOKQa7HXHIvsDf\/KLntUs86+4CWH0TKLYrU1+EottjRMuyG33ZoJrgvXjkvutsqZ26W4IVh4prcauaslvCrIKyW6I9hbpLaZ6eugt1Spu26KK\/ib3rcBCywnC2EuOS25Alv5QsNFLsywul7SQHF6GQuc4MbjEvyCnj5RNHLIFJNskyKbcWuytOCC\/KM9L3u8kM3SglyAwRfpHGW0NeOMChEqzxM0W8WyLLRIPlerdGHIHr00aU3MLI7VU9PAc0BQNO1y1mCXEXZ7Y5dt9tnmeI0t1suq\/UrR1W6tDdofyA2aIWyXAgnchth9M91UA66r4BP4Ha3bVxguGt9TIF6XPHnDKuI5jv9Q+Rk1ked8j42+XG4FB4zjJrU9io+Cx70FcaGB56ewgcxyPwPregaV4Xi6uRYQ0EhDGDhgJetFJAAAIfkEBQQABQAsSwAwAIUAvQAAA\/8outz+MMpJq7046827\/2AojmRpnmiqrmzrvnAsz3Rt33gOD3wABDyd0EMYAI7IY4AwbF6MyeiR6axCCNIswMpt+LTRQbcLBUepY2fZjBSnnezsu7mOH93zXN2Oz2t6SEBoGXtxfX88iVWFdxuMZgEcA19hQ4+NhHZRkX+QgzVYhhmUmj+dcXqahxOkmpxPqjilrxWtmhmlAKs7ubsQuUkYl1K0MsOVFsBIGMqfvLMXykewwL4ttmzOv9LUvTXK1g3SWxbHxN\/VydwW2Kg04OrN7Osz8BXj2g\/j6MDxwPkO9r1TViGUPAoGcxWDQU9CwlwAGZg7N\/AfhYlSwi3AmET\/owppHjl2rCAS04x2ZkKO8yigpK4aKMGoBFmLJo2YWmbam7AS5s4ILl9S6HlT2UIHQXWm85AoiLCGEJJexNehEEsFLqfalBC0Q0yWWSdIFSvwlBmS0iK2JMq17FNRZH8+GCsBJxhHmtS61Eg3wrijQ2O1lYuUrd+tFx5Cirs0gt2cExQLfpt3cGMIj7PwNVzOG1DEDzJnZHy5c6lwLgEvEI3sM2i0py33q8u58GutrmTn4llbXG\/SdhxSPXybwTgAaudavPJbwXGNx5Pbjk28tO\/iWI\/j9byNsPHma912m6wPu4DnunebLSUBPHrXRrer7279u3nWIzVIZmPtb4T9\/3aodh54\/3mnAH7LMOdfdfUhZKAACE6joDSqAQhXBhZqoVqEyEV1nGpBCaUBVBL9FiKI74140HQNngjfg7y1aOJx5ChHIIPklVhciDUGFB0HO86onY3iMRMfkTIO6aOSKhKEpEIeMrkRjT3iktaT8zXAY2g0ChhjfSFGWeSAH3p1W4jabNlAhhdqEOEuIcJJI4vmsULhA2zKhGWW2dF41Z7BOZAnZHQuN6WfVQ3HwKCaAVqZjimux90CjI5W6KThISqfdZVKwWWkmWqaSZE8HsKjSaGKOl5pPBbDYRiJUBmFpFAe2mUir8p6C2UUxqrrr8CmxGuwxBar65+nGqussf+rLuvss8LCBu201M4qbbXYQgtWttw+y1Kn3Yabm4PilgusP+amO2Z56ra7YnvuxluKdPLW2yaO9uaLqmP69ttGTf72y1KuAWt7bcHybouwvQovnPDBDqsrXbIREysdwRVbDHDG6s7Dcccbf1yuxyKPHHLJ3ZKMcsonr4ytyi6\/3HLM08JMc80z3+yszTrvnHPPxXq5GtDTCn0g0dAanSrSxV5FMdN6Qgw1sE5PrWzVVjdtWtbBYs011Vt\/fWzYYlPpddlmk432jX2uTaN0AoDrtrXozl1r3Xbn+GXe8xrJN5+B\/a333oJHewHGYtNaOEXDLm5p444nAfeikd+1QeW1WSi9JOb\/boC41ZNryXkwkoy+r5Wj\/8ku5x88jbTmYlauOn2Rh8D57LEvHjq8jsMO3N+4v\/i374ELHnx6cxN\/j+AouI7y8T9zrXxiebPgfMbQY\/A59i+gnb3iTH+\/KdTTg3C9vuIzBXX6rSPNvu097249ze+XcH649Z9wf7X5q7C\/s\/1rwf+CBQQ\/zGWAfgpgDSbRrgIaUBgMzBYQFMiFIgAiaIp4IAosiKtZTJAH8tOgCF2QAAAh+QQFBAAFACxMADkAegCzAAAD\/yi63P4wykmrvTjrzbv\/YCiOZGmeaKqubOu+cCzPdG3feK7vfO\/\/wKBwSCwaj8ikcslsOp9QwSAQAAACg0H0NbB6v4HtivAtfwniE9nMBqQX0yp1gNa021pxF5\/Z3815UH53gRR\/bWEdWXU2g3+MEo6HXpAWU2VYNVWTVxWbnF+FFASfZpkxkn+iD6CAF6muMLB3hq1glq2rKrZWugtrvFYWtokts4SRwV4Vx2y+Js1sxQ\/Rd5UOwK3TKtVm13DKVt8M3WXPJKW5EeXeE+mg5yPvnM\/s5hPh2yjh9eEA8f5a8Fvn71w2XgKV9RtIMNw4EvkaKkwWLqEyicHO2ftiMf8YRl4aA1ogkGVOPAYiqRWUMA8ULmcVVqpkCMGfvgctvQCk2WCjTgk2KVR7KECmA5+9Ihy0Fa\/bzQVGG+SctHAiRXoRojKYeqhqRglL\/zwtGhGnVnJn0doa58+NWZ4904JjWjOlVLkCuKq6Cq9uxbdWWeGVAtKvsm9tfYVtRXQjBL3IHCSGgFQcX1DfIPORLLey249YHWiGyRnu3L+gqQL+Wjpw3LKpu850rWBx39nBxirYeLOyPtuhRQ8m7PFo0AbAJ51qMPkyZuN2d7fVySi5bOfBT198PT0pcdPc6YYPVsmzK89NaX+nbR4Q+glIocNt3\/0edk7y2dff7z32pPL\/zWnHX1tErSeegIWpNeB0Qs0XoHQLMggfbBBSaGCExd2Hn4KoVYhhbg12eCEvkNDHn24eJpgiawqM9iEmIbpmXjHWvbiZhspt1V0eLtr404QymejjcCMOaeSAJwl55JKhxMjkkzs6CeWU2wFJ5ZUISYnlln8ww+WXh3gJ5phmiEnmmZ\/hiCaVZq4JZptucplknGOiKECNdB5ZIJ55DhkPn33aeFKgX9ZCKJY7HYolPopiSVSjiAIFKZW6TXqlpJZC+UymU47F6ZRZffqkL6KOalipRp6Kqo+IrXqkLq4uKVisfrZG64ur3DqkProOaWuvEYoCrKDMDfuhsMZiuE2y+RgiyyySxT7Ln7PS1kdttdNdi60\/lWxb36\/eZrhAj+HeMl656pyLbnYrrvtffu5uqG68tGBDbyuq3ksauPrax2+\/lOQL8DKPDdyGf\/16ZXB\/8C7M6MIEhwrxP+5MTLGa8Y4ysZ1kLXxSXhC\/NDDHCixcoI4DY6Ckqx+jBLAGK5facrT0chAzpydLvO7MuJULgrs8U4Zu0BGQuyrRmFZL8ivbnnAznSk8veYKUtdpDLBI26xr1h4YHWcAOTuNKtcikMIpHTpc0uhyO6jdZxZCZEEn2ka4\/SXcTJREKd5RkCS3j1jQ\/QYDfuvdVuCCD45B4Vk07vgiYcOQAAAh+QQFBAAFACxOAE4AdgCeAAAD\/yi63P4wykmrvTjrzbv\/YCiOZGmeaKqubOu+cCzPdG3feK7vfO\/\/wKBwSCwaj8ikcsnUDZ5PQhNGCACu2Otgyhpkv9gt9+QFm8WXp\/UaeI4XZfPZEje33\/I8AA0h6LN8GVA3dX9ZEoV\/gRQDa4BSMoZyiwp+kod0jnMwiZeUApdfnw2dZpAtoWYPpYaMqS+pYA+xgIixAS60tQyWugASuqMjrJKBxK0Qx3kaBFF0vloN0Fen0r7CvIl3ttCB03ur3RXHo8p6uAzflObLE+boDpq61uLx09UO7ADwDPK09NdmTRMWa5G\/WAB18VugLoI+LPamJaS1UEFDCMEaHEzF5\/9bxYebBN7SeNHit3wlG\/RCmK7kSl8o7yWD2XIaPJCqSJ2cmZHht18KcMqa+I8nrY4\/4SQlyjJcT5M7BQj94mDpg42SakoMarVSV6aXtEJTGpVrWbBZfV6ciokstIpqn\/4EJ\/Xrz1ED49ZjC1Hs06pv9QYUgDUUA77RMG4F9RNd4bBu64mkydgj1LyXJQMem3nsy7eIw0Ro+Hmu6bl41Z1evRqfX9awYyNTLLu27Zy0b+u2DWy379hwBf8ebrM38ePFRyNf\/ncz8+fFjEOfnocg9eshJ2Pfbn27d2GPvR8HL567hPDlf5NPf50b++nu3z8vJ386\/frQI6DHb\/vTfv7\/tUHwH4CxUTIggbBdhSBzBi3IXEQOjkdShMhNSCFxfBx44Vz8aLjhXQt4+CFmhI043E0mDhdZirdBEhqLnpgF421ivDijIjLeKFuNOvaXY4+s8QhkgT8OaZqQRq6GZJJHFskkZjY+SVeUTy4ppUwClHZlUVlu2ZWXyXUGZihIjXlUP2aeGWKaBR3G5ituvinJQlQOGYiWcoriXJ6T7MnnUDr9aYdTguoZU6G7+FmofoiKZhSi9zU6QaN0OdSoa4EKio2Yb2J6aJ6bevWnp4S+GeoCeHqpQZ0UnsqLqRywuqAHIppI6jhjumrplrrGl2SvE9S6ILAUCAsgsRUYWx+yShYoyx6zacwIrSAsTsuMs9BZ24Gsvm1jA7e1eZtDI8tqSwa46ty6A7nUuaGEGse1oe4RUGALRhsDzMtFM1Cwewm+UOj7BgYC35AAACH5BAUEAAUALE8AYgB0AIoAAAP\/KLrc\/jDKSau9OOvNu\/9gKI5kaZ5oqq5s675wLM90bd94ru987\/+ogXAI3A0CgKQyGRgUO4QjEhBoXgbL7NL5xGC1S6vkC9Zyr1Pq2ZYuK9cNsjsLj8izYhlhDq4L7nxKBBOAfTOBhgyFiH4Li2UxbYiCDJOQEI9lAS+ZfGedng97lm8upGCOp3gPkpYtoKECqloOsGWNJLZuTqOzlAytpBpCVU0DgxG+WX\/KpZXNuLVzQg69zczNAGu6txXWc5uK2UnY0OLZFNwA59lC49vjE9+I4eXQ6okKwacT+7H4fQDSeYbOjjIFAukkdGbvoEFfCMdpW5jkk0QJ5ihW1Ggx\/x6EeaScaJz4boE\/S\/WkKRMp0V3JkbgWshzXRKLNig99NTl5s6elmD6DCv2Zc6jRowxVIl06FNmDkUyjLisqteo1qlaz8sOqtWugMV7DTgIrtqwbsmbTLkGrVi3btmbfwhUrd67Xuna1As1bdi\/fsCnj\/C3rVPDgsI14Hl4KQfHio34e03UgGTHlyncbYPYKZ3PmBZ67rgmtNSVprQRPSz2j2irr1lVNwpYqezZTLo5tlxSQW7c53r6RhusdfFY4qMXBHE9uNCJzoc6f+4wu\/Sb16jSvY2+2fLvE7t7baQ+vigty7ObJi2+o\/hQykO3Hgo4\/KzV9V\/Pvo7SvP5a+\/q+TwANgIAIOOIdhBp6lWYLdLMigGZc9OBCCEpKjVIWNVJgUfwxyNaBfD0ajISESRsMegBWEWMF5sF2QoIns6BeYPAMWtmJ\/MD4gIwcsYuYBcbrliJF6QuLFXJEkbodkOuiZ0CNcS17BnI0lPClWlBtYKRoMWq42Q5dLYTkCmEHlcQOZ34mpApq+HNMFm4yoOUMUcIZBTRfyEAPZnXhuQOcROhHRJwsEFDpEoYMmekMCACH5BAUEAAUALFAAbwByAHwAAAP\/WLrc\/jDKN0q4odTJu\/9gyAwBAJliqqZC67prLM\/da9sSgdLU4A8C3spF8GEuPthDJ3RknMCmx7WRAIOOnZQTIGwnrSqHgP2qxOZF6\/khL7zpdlwtYIPKX\/R0XhDoPVVaPIKAc34xQXB8e2l4K38hjoQfkBA3LTkydjGKGjKOlpc4DYeLpm9gVEYWP0pqNJ08myKVfWGzI1GvpyCTIJVUgGWxvBO+H7gKYSABoMV8ycshtc9f0dQRxNUQyb+W23PHlA8C2h7i4AroHX+lKevFzYbYEfCFND482nUrAEXpcZw5YwYwILmCCL85GJgQoMCGECUwjNhwIkVe0S4ihGRR\/+Mijh4BggwJbiTJaiZPFkup8hTLlh8VwuTlzNzMYjZv5lmik6aDnD350AtqZijRLUaPxtiUVCmPpk5T2IEaNQbVqt4UXMX6ActWruy0gk3z5OtYMJ7OpjGrFkIFtm0dvI0rpRlcugzc4aWhd6+Mf37xAQ0MaDBhDgMMH7bScTFjx48aQ6YgeXIDXZZBuMl8pzJnW5+78gs9odlo0hFM38W7YTXd1qitiI3tdjbtn8puH+yje2Hu3gvY9L0txvVe42fxKJ4sb1dvNKeBjwAOCjnWdtIXdrPcXC7xCJ4DM4z+mZr1oxbDvw77ubvE0EOHL8bMQf3Y8OdbQiUf+Opyrmz0TXNYgJHkRxGBIvB3FoIsbBcVgyooWBWEQxhYkn01WBjPfyxoaAqFTcgHU2LFiEhSACA24qEsKfLhh4MibZaQHysic4VHNAKEoowktVBEjSjeGJQqJDQRJBkY9ujjDz8c4WSQTLoymSgXJQAAIfkEBQQABQAsTwBtAHQAfwAAA\/8outz+MEo4RgA41Mm7\/2D4DFhpYoOormwrkGecuXRtv3KOiURF3LZK4ALQpDhEnezIscQ0wBVMxxwplVXrNRuVEK4mLg6sk0y33SY57FhTIcl1OnJ2V+tukzYvTn\/zeguAOVl4a31RgycKf4psDI47cwuGfGORJQyVh5MKmDObgJCfnY2Yl6SCqR89Fa5mnyiheQumjogNm1AOcZEVsZKot2pkP6Oxv8DGvYoBE7MnVcAAybHG07CAR7a+0GvXsc4UjgreZEPTKeZX4g++wpHowOrz45HwjvLIAsyKfaTr2PXzJyAdhE8EuOUbOGiAQoIOAi55OC2ewYifqlXcuA\/\/I8ePIC15DEmyZAxjuUyqVGlvpcuPLV\/KDBdzps1mNW\/qXNMu5c6fnPYAHUooJ9Gj1IwiHdpH4tKVTZ8+jSoVaU9NVZcqzXpTjFOuIb2CPSp07E4uX81yvIpP7cwsDN26vBpXLlQGde2a7JlXb0kmff2GbBdYMMhlhnUeKZx4ozjGjSv+gBy5HuXKGflhluks7WZynj8P6iHapcbSJE+jBql6NcfWrivCjj0vNG0stm8Tyq07xuzet3gDL\/F7uDbhxosbt4N8uMPlygpCRyh9+r3q1gc9zg7xcvYjzXWD596wHHlt5s+7qaWe57H2WN7DL0ppvhKUbe0D8Kk\/Wpv+nf414J1xZeknFoAoHIQgW\/UBiEh4ok3g4DP9cUDRdx1A2BiDD1wIHS78kQdiAx4Cx2E23I3oTopSYMiChmapSGFyNgzol4weAIejByVWtiMINo71Ywgw\/jSkCkV21QmJQRJ1JA1J7vVkEHrtsmSGam1wJZFNgmTllir00OU8+IHpgnKsTWlmhkIM5sOacLbiCmNGvALnnSEkhCcICQAAIfkEBQQABQAsTgBsAHYAgAAAA\/8outz+MEpJhr0z6827pwMgjmMwfGiqrkxIviUrz\/TiwrhIfMRe\/4LLxZe55XJEiQV3AqYGgWMzYjzmJlWms0OIWkXTBuH7DTey0m2R\/Hp42Ug3fGRWt+akMz5Xf+PrdmN7Iwx+g4R3hwB2DopgCoKOdAySgE5oeAqYg1ObcIwLko+eeAGhopY1pGymq3OQogCmPD0ahopLsSKauh25JCYRugC\/sbyxSVRkswyRqK6fAsOpNnNh0GTFogrTE7dl1braktziSodN2GXqX+Wxqex5QdPxRwLOksmUjif1OCbDFvmDoe+YolbDAA6bp6sgQ0cPY31TFJEcBGQDYUxEF1D\/2LOAIEF6rLQxpMlXF0+qXPmFWSOWMGM+Simz5slUNnOGxKmz57uRPoNyAiq0KBueRpOCo6m0KQykTqPqICq1qUNpVaVezSoVKtekXr8WDStWKNWyQS2hVQoI39qgD9y+7Vkn49yFeu6OzavXbKK+af8C9il4sM5OhoMys5vYkQ\/GjdEZjGxzFmTKeyZjltlvc87OnmuCDh1zNGmWpuSeNnlvdUx3rlXCjm1yB+2Vtm+fzK07JO\/eAX8Db4h1OF7jHYsj36Z8OUQBJZ0vUxBduhXL1nFpzg4nHfehFb9n2y7eivfycHyoRg9jH\/vr7t\/zKSQ\/Tbj6Twvj36Ufv8vZn\/vVsd8LdQ2ICF8BMoWfWgYqkyAEl7l2VXPsURNeeRaul52F1Mk34X0YcvCeL+hx2ECIHkTY2BPcfSjBhiuoqJeJWCxHYwbVhXajLcDtuEFvPnKQY2JBknjaf2rIyBYo\/Q0WgIuXRFYkDV0MNiUQUNx1ZZJKhhQMkypk2RWYqgy50pdkXtKleVCmScMFZi5jwpZu\/lCBEHjOiacFbTKZAAAh+QQFBAAFACxOAGwAdgCAAAAD\/1i63P4wSimqFTPrzbunwhA0wTBgX6qu7EIMU0C0dG0vIXd+1e0rF8tGMOoEUJqiovRjCV7K5WBGUUUh12YrlCVRHUQt5yie5DYwR7o8ZD\/OugZy1U3N3fDOurBffVl1Wn12TYNuhDR\/gAuBh3GOGwAKhpAcd5UZlHp2PZk1ijWNWk8mRSYSopgNkjSXbyISg66qbqBgqW+0ulUqtim4u7zBSz++H8ZhwwqsN5oes3zKC8zSchDQGtQ02i3GPBDeGuEezh7jNOWe1brp6+4M7RPx7zbz9NX298r5+sH8\/ewACpw0UOC\/gpAOIjykcGGiCA0diokoUQU0ihW\/QcCYsf\/DxY6YjHEE2WIkSXkQTzoi88Ckygi28ryc+AbYTCe3brqRpfPQHWw9a\/QBGrQVA6JFWexBmnQFEqZNU6yBGpUcCqpVPQLJKmgr1x9psH7VgEHsWDMFzJ6FmXbtD7Vu1bSNi24uXaV3Q+WtAXfvVpt+rQEOjKPAYMJtDxPGoNivKcRGCEJGI3myOpdf02Dmutmy57nnLF\/9jNYu6VymT8O72vjuns5NX6t28Ad20r57WXqdXRlIa7eDbPcEJfymbt4NDOEe6+v32FnFVWoKnRfa8qo7UpIORx040GTI5VrOXnoy1OgO7V3XiRV9we6+Ax+EX5T8B\/f3jvNwTnL5+opZ6+FXzX\/RPFcIV\/o1gx2BtMXmCHgz2YeHgGVI+CCFPlhYCRcZaUgLhwh5GAwpAJXA4FunrGPCiWyEgOEkIiJUQSkMncCiMhW8QKMVJUzRyVpBKLIHAUGskwAAIfkEBQQABQAsTwBtAHQAfwAAA\/9Yutz+MMo4wgqjiMm7\/2DYbNNAimiqrmzrvl8GytxWBXh2wqhtKRgN5xeiQQRGh4kXQpZ2jSSTI50+CFYQVFGlZL8uaVcyBptr4XMBm9rC2Cm4ek5+len0n7yN7\/tfe3xMAC1ENVgDiQpuXH+OR2OGDJKPWYwLd5WVlwWZR3aaEZeUH4Epnn+MqGY4oaWuBa2wVLCyLpwtuGgvtrlgpo6kK8IhxLPHmMjKEKvLj83O0dLT1NXW19gswNl+29x43t9zuuJm5OXo6err7Crn7YDw8vPQ8+72f\/X4EpT6+x\/G\/hVrEFCgioIGPRhCmHBgw0IXHrpgw1Bih4oWIfzAmPHXSqyOEEGe+igShQWOJRcIQJlyjb+UL0vGFDmzo6KWRWpmvIkzhk6LPHt2CCq0xE+JR5EWXcr0UbimBJ4yJfCuaFWcLFvKyApya1NaX8OK5UFCak8iV2WOHbq2rSi3DJKkPbt2S1J7d0vOxZkXLr5Le7U2xWWWaV+\/QHs2Kyzw6uHGiPmueCytJuVlOlc+PBo4213G4vpqjuxEXoDOHi7\/4zprAOiUrHOpZhIbRulps5uQVOZaGpbab7D58JPhNTJEFbIEMV5NAJtEyQFCX5RSgPXr2K0rSwAAIfkEBQQABQAsaABwAFQAZAAAA3FYutz+MMrpBr046827\/2AojmRpnmiqrmzrvnAsz3Rt33iu73zv\/8CgcEjEEYrIpHLJbDqf0KiUKZhar9isdsvter\/gsHhMLpvP6LR6zW673\/C4fE6v2+\/4vH7P7\/v\/gIGCg4SFhoeIiYqLjI2OIQEFCQAh+QQFBAAFACwAAAAAAQABAAADAlgJACH5BAUEAAUALAAAAAABAAEAAAMCWAkAIfkEBQQABQAsAAAAAAEAAQAAAwJYCQAh+QQFBAAFACwAAAAAAQABAAADAlgJACH5BAUEAAUALAAAAAABAAEAAAMCWAkAOw==\">","2ffd418d":"## C. Top 20 countries having most active cases","aff4c14a":"# Help stop coronavirus by following these simple 5 steps:","bc96eec6":"##### Here are my observations:\n##### 1) Even though China was the first to get the virus, they were able to minimize the no. of deaths considerably after Day 30.\n##### 2) But lately there has been a huge surge in no. of deaths in Italy and it has also crossed the most no. of deaths in the world.\n##### 3) There is also a slight increase in no. of deaths in the US.\n##### 4) India on the other hand considerably have very less no. of deaths.","e6aca2e6":"# Coronavirus disease (COVID-19) Pandemic","5b82af44":"#### Here are my observations :\n##### 1) Most of the countries have crossed the 10000 barriers, while some of them can control the spread of the virus and have kept it under 1000.\n##### 2) China is one of the only nations which has been decreasing the active number of cases\n##### 3) But in some other nations like the US, Italy, Spain, France, the number of active cases is rising rapidly.","3c0a114a":"## 1. Details about the columns:","70f961cc":"##### Data visualization is one of the core skills in data science. In order to start building useful models, we need to understand the underlying dataset. You will never be an expert on the data you are working with, and will always need to explore the variables in great depth before you can move on to building a model or doing something else with the data. Effective data visualization is the most important tool in your arsenal for getting this done, and hence an critical skill for you to master.\n\n##### For this I'm gonna use [Plotly Python Open Source Graphing Library](https:\/\/plotly.com\/python\/). Plotly is another great Python visualization tool that\u2019s capable of handling geographical, scientific, statistical, and financial data.  Plotly has several advantages over matplotlib. One of the main advantages is that only a few lines of codes are necessary to create aesthetically pleasing, interactive plots. The interactivity also offers a number of advantages over static matplotlib plots:\n##### 1) Saves time when initially exploring your dataset\n##### 2) Makes it easy to modify and export your plot\n##### 3) Offers a more ornate visualization, which is well-suited for conveying the important insights hidden within your dataset.\n\n### I have tried to use different types of plotly map visualizations to show examples of it.","32becf7d":"##### Source:  [John Hopkins University and Medicine](https:\/\/coronavirus.jhu.edu\/map.html)","b46e7f6f":"#####  I did my best to follow a comprehensive, but not exhaustive, analysis of the data. I'm far from reporting a rigorous study in this kernel, but I hope that it can be useful for the community, so I'm sharing how I applied some of those data analysis principles to this problem. I will also be doing visualizations using plotly, matplotlib and seaborn from which we are gonna get valuable insights.\n\n#### The main purpose of creating this notebook is to visualize the pandemic covid-19 and it's effects. It can be used by resource persons to get valuables insights and to build upon it.\n\n####  Feel free to contact me, if you have any doubts in LinkedIn: [Suraj RP](https:\/\/www.linkedin.com\/in\/suraj-rp\/)\n\n\n##### What we are doing in this kernel is:\n##### 1) Basic exploratory data analysis\n##### 2) Univariable study: We'll just focus on the dependent variables i.e. ('Confirmed' ,'Deaths','Active') and try to know a little bit more about it.\n##### 3) Multivariate study: We'll try to understand how the dependent variable and independent variables relate. \n##### 4) To show vivid examples of Plotly, Seaborn and Matplotlib visualization libraries.\n\n## Please do upvote this notebook if you find it useful :)","5298c4ea":"#### Here are my observations :\n##### 1) The spread of the virus was initially slow and the numbers were also less.\n##### 2) But as time progresses, the spread is massive and the numbers have gone haywire.\n##### 3) If protective measures are not taken, the worse is yet to come!","c08b8c6b":"##### The first case of China recorded in this dataset is 22nd January,2020 . So let's consider it as day 1 and make the required changes in the dataset.","6bea74cd":"<img src=\"https:\/\/thespinoff.co.nz\/wp-content\/uploads\/2020\/03\/Covid-19-curves-graphic-social-v3.gif\">","c3f8bbb5":"## A. Worldwide spread analysis:","ac519a69":"##### The first case recorded in US is on 24th February,2020. So let's consider it as day 1 and make the required changes in the dataset","4ad9d18a":"# 3. Analysis of most affected countries","78892ee3":"##### For more information :  [WHO](https:\/\/www.who.int\/health-topics\/coronavirus#tab=tab_1)","18353e7d":"## D. Comparision on no. of recovered cases till date:","d2c7c2fb":"# 3. Visualization using Seaborn:","85fe8e48":"## A. Comparision on no. of confirmed cases till date:","e60e512b":"##### Let's start by importing the data","ee573265":"##### Now let's clean the data","ffd31c69":"##### Matplotlib is quite possibly the simplest way to plot data in Python. It is similar to plotting in MATLAB, allowing users full control over fonts, line styles, colors, and axes properties. This allows for complete customization and fine control over the aesthetics of each plot, albeit with a lot of additional lines of code. ","df79fd8e":"# 2. Visualization using Plotly:","f47d77a6":"# Remidial measures:","9a999e32":"## B. Top 20 countries having most confirmed cases","79e8199a":"#### Here are my observations :\n##### 1) China was the place of origin, but now they is o trace of them in Top 20.\n##### 2) The number of confirmed cases are on a high in the US, Brazil, India, and Russia.\n##### 3) But the number of cases in the third world countries is less.","3b77ce51":"##### Here are my observations:\n##### 1) It's showing the same insights as to the confirmed cases\n##### 2) But the only difference is the no.of active cases in China has been incrementally decreasing from day 30 as there a few deaths and a lot of recovered people and they have also prevented the spread of the covid-19 virus. \n##### 3) The no. of active cases in the US and Italy is rising detrimentally.\n##### 4) Even though the slope of India is high but the rate of increase is less.","4ab2afd0":"##### The first case recorded in India is on 30th January. So let's consider it as day 1 and make the required changes in the dataset.","93a0dad7":"## B. Active cases around the world:","e4978916":"##### Here are my observations:\n##### 1) Angola, Nicaragua and the Gambia have the highest mortality rate because there is very less number of the confirmed cases, yet there more deaths in them.\n##### 2) The majority of the countries which top the list have a bad healthcare system and they require help from developed countries.\n##### 3) But when a minimum of 100 confirmed cases is considered, San Marino, Iraq and Indonesia top the charts\n##### 4) When more than 10000 confirmed cases are considered, Italy is at the top and this percentage rate is very scary. It seems that they have lost control over the spread of covid-19 and cannot contain it.","5854a35b":"## F. Top 20 countries having the worst mortality and best recovery rate:","0e64953e":"## B. Comparision on no. of active cases now:","13540be1":"## E. Top 20 countries having most recovered cases","7894b283":"## C. Comparision on no. of death cases till date:","887ad26e":"#### Here are my observations :\n##### 1) The slope of the line, in the beginning, was gradually ascending and at recent times, it's very high!\n##### 2) At the current rate, there are no signs of a drop in the total cases.\n##### 3) If protective measures are not taken, there's no wonder the slope reaches to max","8e7751a5":"#### For more info:  [WHO: Advice for public](https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019\/advice-for-public)","a4685af5":"##### There are 5 numerical columns ('Lat','Long','Confirmed','Deaths','Recovered') , 2 catagorical columns ('Province\/State' & 'Country\/Region' ) and 1 datetime column ('Date')","82003cf6":"###### The dataset starts from 22nd January to 27th July 2020","4d442745":"## D. Death count around the world:","eaf17789":"##### Here are my observations:\n##### 1) China tops the chart and they are doing a remarkable job with a recovery rate of 90%. It tells us that in every 100 infected people, 90 people have recovered from the covid-19 virus.\n##### 2) The Cruise ship is unusual here as the outbreak was a while ago and it explains the high recovery rate.\n##### 3) South Korea, Bahrain and Iran are also doing a fantastic job treating the covid-19 virus.\n##### 4) Surprisingly the Maldives have recovered 8 out of their 13 confirmed cases.\n##### 5) Saint Vincent and the Grenadines has 100% because they have recovered 1 case out of 1 confirmed case.","a4183182":"## In this time of great distress, it is very important to do what we can to help the human community to fight this virus. If you can be of any assitance in this war against our biggest enemy, then please do your part!\n\n## Prepare, don\u2019t panic. Look after the vulnerable people in your community. We\u2019re all in this together. And we are in it for the long haul.\n\n## \"We might have lost the battle, but we'll surely win the war\"\n\n##### For more information :  [Suraj RP](https:\/\/www.linkedin.com\/in\/suraj-rp\/)\n#### Email ID: surajrp32@gmail.com","08350061":"#### Here are my observations :\n##### 1) As the covid-19 testing is increasing, The active number of cases is also increasing day by day.\n##### 2) The number of active cases is on a high in the US, Brazil, India, and .\n##### 3) In comparison with the total population, Italy, Spain, Germany and France are the worst-hit nation. ","79b71217":"#### Here are my observations :\n##### 1) Even though Italy has the 2nd best healthcare system according to the WHO, they haven't been able to tackle the pandemic problem effectively.\n##### 2) China even having so many confirmed cases was able to decrease the number of deaths\n##### 3) The number of deaths is also on a rise, especially in Italy, Spain, and Iran.","748d2245":"## A. Confirmed Cases Over Time","b63e4194":"#### Our aim will be to keep the epidemic curve as flat as possible, keeping the number of cases reported each day as low as we can. If we can achieve that, it\u2019ll mean we\u2019ll be able to treat everyone who needs treating. We can all help with this by washing our hands regularly, avoiding touching our mouth, nose, and eyes, and staying away from other people when we are sick. This also means calling ahead if you feel sick and want to go to the doctor or hospital. The last thing we need is loads of our healthcare workers in isolation because they\u2019ve been exposed to Covid-19. ","1f24ee61":"##### Going in detail, there are 185 unique countries and 80 unique province\/states enlisted in the dataset","833c603e":"##### I will select the most affected countries for further analysis and visualization i.e China, US, Italy.\n##### I will also select India so that I can analyze and foresee the covid - 19 problem of our country.\n##### The analysis and visualizations of the covid cases in each country will start from the day of their first covid-19 case. From this, we can get valuable insights like the rate of growth of the covid-19 virus.","4d5807dc":"#### Here are my observations :\n##### 1) By far Brazil is leading in the number of recoveries even though having a huge number of confirmed cases\n##### 2) Italy, Iran, and Spain are also doing a good job.\n##### 3) We have to pump up these numbers for a promising future!","56552ac2":"## D. Top 20 countries having most deaths","ccad55c6":"<img src=\"https:\/\/thespinoff.co.nz\/wp-content\/uploads\/2020\/03\/Covid-19-curves-graphic2-stopthespread-v2.gif\">","169e5e4d":"##### Here are my observations:\n##### 1) Compared to the number of confirmed cases, China has done an incredible job in recovering so many patients from the covid-19 pandemic.\n##### 2) Italy is also trying to increase the number of recoveries, but lately the number of deaths has gone through the roof.\n##### 3) Recoveries of the US and India are also less. ","f47f428d":"##### The cleaned data from [COVID-19 Complete Dataset (Updated every 24hrs)](https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report) is used for visualizations.","3d82a166":"# Conclusion:","e483beb4":"##### The first case recorded in Italy is on 31st January. So let's consider it as day 1 and make the required changes in the dataset."}}