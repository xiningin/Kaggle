{"cell_type":{"afd23629":"code","0b35907a":"code","f196beb1":"code","daf8c636":"code","df7828ed":"code","57b288b8":"code","2d185376":"code","d428e254":"code","a3bf9e96":"code","1927b51d":"code","9c321e00":"code","0779935e":"code","c14beac5":"code","8d292c4c":"code","7bda9cdf":"code","6867348c":"code","adb86059":"code","60351d57":"code","4c6f82ed":"code","68c5e586":"code","f2ba7d7e":"code","14576a48":"code","839ade8b":"code","35dd8732":"code","36183f25":"markdown","24e21640":"markdown","d2dbdffc":"markdown","acb3cd5e":"markdown","3af55229":"markdown","df1f1775":"markdown","bbbfe3ca":"markdown","f40e443d":"markdown","c47e0544":"markdown","a885905d":"markdown"},"source":{"afd23629":"!pip install geojsoncontour","0b35907a":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport datetime as dt\nimport folium\nfrom folium.plugins import HeatMap, HeatMapWithTime\nfrom scipy.interpolate import griddata\nimport geojsoncontour\nimport scipy as sp\nimport scipy.ndimage\nimport branca\nfrom folium import plugins\n%matplotlib inline","f196beb1":"birds_df = pd.read_csv(\"\/kaggle\/input\/bird-songs-recordings-from-united-states\/birds_united_states.csv\")","daf8c636":"birds_df.head()","df7828ed":"birds_df.info()","57b288b8":"birds_df.describe()","2d185376":"def missing_data(data):\n    total = data.isnull().sum()\n    percent = (data.isnull().sum()\/data.isnull().count()*100)\n    tt = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    types = []\n    for col in data.columns:\n        dtype = str(data[col].dtype)\n        types.append(dtype)\n    tt['Types'] = types\n    return(np.transpose(tt))","d428e254":"missing_data(birds_df)","a3bf9e96":"def unique_values(data):\n    total = data.count()\n    tt = pd.DataFrame(total)\n    tt.columns = ['Total']\n    uniques = []\n    for col in data.columns:\n        unique = data[col].nunique()\n        uniques.append(unique)\n    tt['Uniques'] = uniques\n    return(np.transpose(tt))","1927b51d":"unique_values(birds_df)","9c321e00":"def plot_count(feature, title, df, size=1):\n    f, ax = plt.subplots(1,1, figsize=(4*size,4))\n    total = float(len(df))\n    g = sns.countplot(df[feature], order = df[feature].value_counts().index[:20], palette='Set2')\n    g.set_title(\"Number and percentage of {}\".format(title))\n    if(size > 2):\n        plt.xticks(rotation=90, size=8)\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x()+p.get_width()\/2.,\n                height + 3,\n                '{:1.2f}%'.format(100*height\/total),\n                ha=\"center\") \n    plt.show()    ","0779935e":"plot_count(\"sp\", \"Species\", birds_df, size=4)","c14beac5":"plot_count(\"ssp\", \"Subspecies\", birds_df, size=4)","8d292c4c":"plot_count(\"en\", \"Species (English name)\", birds_df, size=4)","7bda9cdf":"plot_count(\"gen\", \"Latin name (for gen)\", birds_df, size=4)","6867348c":"plot_count(\"rec\", \"Recorder person\", birds_df, size=4)","adb86059":"plot_count(\"bird-seen\", \"`was the bird seen?`\", birds_df, size=2)","60351d57":"plot_count(\"playback-used\", \"`was playback used?`\", birds_df, size=2)","4c6f82ed":"aggregated_df = birds_df.groupby([\"lat\", \"lng\"])[\"id\"].count().reset_index()\naggregated_df.columns = ['lat', 'lng', 'count']","68c5e586":"m = folium.Map(location=[37, -95], zoom_start=4)\nmax_val = max(aggregated_df['count'])\nHeatMap(data=aggregated_df[['lat', 'lng', 'count']],\\\n        radius=15, max_zoom=12).add_to(m)\nm","f2ba7d7e":"def alt_conv(x):\n    \n    try:\n        x = float(x)\n    except:\n        x = 0.0\n    return x","14576a48":"filtered_df = birds_df[[\"lat\", \"lng\", \"alt\"]]\nfiltered_df.columns = ['lat', 'lng', 'altitude']\nfiltered_df['altitude']  = filtered_df['altitude'].apply(lambda x: alt_conv(x))\nfiltered_df = filtered_df.dropna()\n\n# focus on only US mainland, and excluding Alaska\nfiltered_df = filtered_df.loc[(filtered_df.lat<50) & (filtered_df.lat>25)&(filtered_df.lng>-125)&(filtered_df.lng<-70)]","839ade8b":"# define the colors for the elevation (altitude) map\ncolors = ['blue','royalblue', 'navy','pink',  'mediumpurple',  'darkorchid',  'plum',  'm', 'mediumvioletred', 'palevioletred', 'crimson',\n         'magenta','pink','red','yellow','orange', 'brown','green', 'darkgreen']\nlevels = len(colors)\n\n# create arrays for the x,y,z grid\nx = np.asarray(filtered_df.lng.tolist())\ny = np.asarray(filtered_df.lat.tolist())\nz = np.asarray(filtered_df.altitude.tolist()) \n\nvmin = filtered_df['altitude'].min() \nvmax = filtered_df['altitude'].max()\n\n# create a grid\nx_arr          = np.linspace(np.min(x), np.max(x), 5000)\ny_arr          = np.linspace(np.min(y), np.max(y), 5000)\nx_mesh, y_mesh = np.meshgrid(x_arr, y_arr)\n \n\nz_mesh = griddata((x, y), z, (x_mesh, y_mesh), method='linear')\n \n# use Gaussian filter to smoothen the contour\nsigma = [5, 5]\nz_mesh = sp.ndimage.filters.gaussian_filter(z_mesh, sigma, mode='constant')\n \n# create the contour\ncontourf = plt.contourf(x_mesh, y_mesh, z_mesh, levels, alpha=0.5, colors=colors, linestyles='None', vmin=vmin, vmax=vmax)","35dd8732":"# convert matplotlib contourf to geojson\ngeojson = geojsoncontour.contourf_to_geojson(\n    contourf=contourf,\n    min_angle_deg=3.0,\n    ndigits=5,\n    stroke_width=1,\n    fill_opacity=0.1)\n\ncm  = branca.colormap.LinearColormap(colors, vmin=vmin, vmax=vmax).to_step(levels)\n\n# set up the map placeholdder\ngeomap_elevation = folium.Map([filtered_df.lat.mean(), filtered_df.lng.mean()], zoom_start=4, tiles=\"OpenStreetMap\")\n# plot the contour on Folium map\nfolium.GeoJson(\n    geojson,\n    style_function=lambda x: {\n        'color':     x['properties']['stroke'],\n        'weight':    x['properties']['stroke-width'],\n        'fillColor': x['properties']['fill'],\n        'opacity':   0.5,\n    }).add_to(geomap_elevation)\n \n# add the colormap to the folium map for legend\ncm.caption = 'Elevation'\ngeomap_elevation.add_child(cm)\n \n# add the legend to the map\nplugins.Fullscreen(position='topright', force_separate_button=True).add_to(geomap_elevation)\ngeomap_elevation","36183f25":"### 3. Data exploration\n\n#### 3.1. Glimpse the data","24e21640":"#### 3.5. Data collection geographical distribution","d2dbdffc":"#### 2.2. Load data","acb3cd5e":"#### 3.4. Data distribution","3af55229":"#### 3.6. Data collection geographical distribution: altitude\n\nLet's represent the altitude \/ (lat\/long)","df1f1775":"Zoom-out to see also Alaska & Hawaii.","bbbfe3ca":"### 2. Data preparation\n\n#### 2.1. Load packages","f40e443d":"#### 3.2. Missing data","c47e0544":"#### 3.3. Unique values","a885905d":"\n<img src=\"https:\/\/images.unsplash.com\/photo-1582836943770-2a359d8fd255?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1778&q=80\"\n     width=\"600\"><\/img>\n\n### 1. Introduction  \n\n\nThis is a preliminary exploratory data analysis for the dataset with birds songs recordings metadata from United States of America.  \n\nThe data is collected using [Xeno-Canto](https:\/\/www.xeno-canto.org) public API and "}}