{"cell_type":{"06a5d8af":"code","c3961191":"code","27d09ce6":"code","747529b1":"code","e46624c9":"code","9fe8e3a8":"code","91474dc1":"code","472f7725":"code","8dd6fc3e":"code","c36c3d81":"code","87179538":"code","717c5aa4":"code","b9f5c5c1":"code","71ba628f":"code","0394eaa3":"code","5622c863":"code","3e3760fc":"code","35859c4a":"code","ebda456c":"code","8ded07eb":"code","7a841fca":"code","f6e806b9":"code","179cba8b":"code","05fa7c66":"code","dac1241d":"code","d0a63969":"code","1bb55fc5":"code","bf4592aa":"code","cd5451d9":"code","e6413a54":"code","3c1d7ee1":"code","a56bb7f4":"code","c42e6d61":"code","4b24beca":"code","57806093":"code","0c7a7db8":"code","414cec82":"code","a028d9c6":"code","cb32cede":"code","e42c9d0b":"code","da9e1ec9":"code","28a89b33":"code","f040d9ff":"markdown","03d2aad1":"markdown","2dc78926":"markdown","8e93465d":"markdown","c9541c11":"markdown","81fd384f":"markdown","e4232c6c":"markdown","08f10405":"markdown","21a4e77d":"markdown","cbeb5635":"markdown","3bda3b8d":"markdown","e9b2b183":"markdown","9b9a6d9a":"markdown","2c869403":"markdown","0f35f865":"markdown","4d0497d5":"markdown","3f4dbc9f":"markdown","daef7150":"markdown","4e42c9ff":"markdown","b7fd7993":"markdown"},"source":{"06a5d8af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport datetime, nltk, warnings\nimport itertools\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom kmodes.kprototypes import KPrototypes\nfrom sklearn.model_selection import train_test_split, StratifiedShuffleSplit\nfrom IPython.display import display, HTML\nimport plotly.graph_objs as go\nfrom plotly.offline import init_notebook_mode,iplot\nimport statsmodels.api as sm\ninit_notebook_mode(connected=True)\nwarnings.filterwarnings(\"ignore\")\nplt.rcParams[\"patch.force_edgecolor\"] = True\nplt.style.use('fivethirtyeight')\nmpl.rc('patch', edgecolor='dimgray', linewidth=1)\nplt.rc(\"figure\", figsize=(10, 5))\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3961191":"df = pd.read_csv('\/kaggle\/input\/marketing-data\/marketing_data.csv')","27d09ce6":"df.head()","747529b1":"df.info()","e46624c9":"temp = df[['ID', 'Country']].groupby(['ID','Country']).count()\ntemp = temp.reset_index(drop = False)\ncountries = temp['Country'].value_counts()\nprint('Number of countries in dataframe: {}'.format(len(countries)))\ncountries","9fe8e3a8":"data = dict(type='choropleth',\nlocations = ['Spain', 'Saudi Arabia', 'Canada', 'Australia', 'India', 'Germany', 'US', 'Montenegro'],\nlocationmode = 'country names', z = countries,\ntext = countries.index, colorbar = {'title':'Order nb.'},\ncolorscale=[[0, 'rgb(224,255,255)'],\n            [0.01, 'rgb(166,206,227)'], [0.02, 'rgb(31,120,180)'],\n            [0.03, 'rgb(178,223,138)'], [0.05, 'rgb(51,160,44)'],\n            [0.10, 'rgb(251,154,153)'], [0.20, 'rgb(255,255,0)'],\n            [1, 'rgb(227,26,28)']],    \nreversescale = False)\n\nlayout = dict(title='Number of orders per country',\ngeo = dict(showframe = True, projection={'type':'mercator'}))\n\nchoromap = go.Figure(data = [data], layout = layout)\niplot(choromap, validate=False)","91474dc1":"sns.distplot(df['Year_Birth']);","472f7725":"df[['Year_Birth']].describe()","8dd6fc3e":"fig, ax = plt.subplots(figsize=(6,6))\ndata = df['Education'].value_counts().values\nlabels = df['Education'].value_counts().keys().values\nax.pie(data, labels = labels, autopct='%.0f%%')\nplt.show()","c36c3d81":"fig, ax = plt.subplots(figsize=(6,6))\ndata = df['Marital_Status'].value_counts().values\nlabels = df['Marital_Status'].value_counts().keys().values\nax.pie(data, labels = labels, autopct='%.0f%%')\nplt.show()","87179538":"df[' Income '].isna().sum()","717c5aa4":"df[' Income '] = df[' Income '].str.strip('$ ')\ndf[' Income '] = df[' Income '].str.replace(',','').astype(float)\ndf[' Income '] = pd.to_numeric(df[' Income '])","b9f5c5c1":"fig, ax = plt.subplots(figsize=(10,5))\nsns.distplot(df[' Income ']);","71ba628f":"fig, axes = plt.subplots(ncols=2, figsize=(10,4))\nsns.countplot(df['Kidhome'], ax=axes[0])\nsns.countplot(df['Teenhome'], ax=axes[1]);","0394eaa3":"fig, axes = plt.subplots(figsize=(15,4))\nplt.hist(pd.to_datetime(df['Dt_Customer']), bins=250);","5622c863":"sns.histplot(df['Recency'], bins=25);","3e3760fc":"fig, ax = plt.subplots(figsize=(20,15))\ndf[['MntWines','MntFruits','MntMeatProducts',\n    'MntFishProducts','MntSweetProducts', 'MntGoldProds']].hist(bins=25, ax=ax);","35859c4a":"fig, ax = plt.subplots(figsize=(20,15))\ndf[['NumDealsPurchases','NumWebPurchases','NumCatalogPurchases',\n    'NumStorePurchases','NumWebVisitsMonth']].hist(bins=15, ax=ax);","ebda456c":"fig, axes = plt.subplots(2,3, figsize=(10,6))\ni=1\nfor raw in axes:\n    for col in raw:\n        sns.countplot(x='AcceptedCmp{}'.format(i), data=df, ax=col)\n        i+=1\n        if i==6:\n            break\nsns.countplot(x='Response', data=df, ax=axes[1,2]);","8ded07eb":"sns.countplot(x='Complain', data=df);","7a841fca":"#fig, ax = plt.subplots(figsize=(15,15))\n#numeric_ix = df.select_dtypes(include=['int64', 'float64']).columns\n#sns.heatmap(df[numeric_ix].corr().round(2), cmap='RdBu', annot=True, vmin=-1, vmax=1, ax=ax)\n#plt.title('Correlation Matrix');","f6e806b9":"# Only variable with missing values is Income \n# Check correlation of Income variable with other variables\nnumeric_ix = df.select_dtypes(include=['int64', 'float64']).columns\ndf[numeric_ix].corr().round(2)[' Income ']","179cba8b":"# Strong correlation with several numerical variables suggest to use \n# linear regression to predict missing values of income variable.\n_ = sns.pairplot(df[[' Income ', 'Kidhome', 'MntMeatProducts', \n                    'NumCatalogPurchases', 'NumWebVisitsMonth']], \n                 kind=\"reg\", diag_kind=\"kde\")","05fa7c66":"# Linear regression to impute missing values for Income variable\nX = df[numeric_ix].drop(['ID', ' Income '], axis=1)\ny = df[' Income ']\nX_train = X[-y.isna()]\ny_train = y[-y.isna()]\n\n# Test set the set for which we want to predict missing values\nX_test = X[y.isna()]\n\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train.values)\nmodel = LinearRegression()\nreg = model.fit(X_train_scaled, y_train)\nreg.score(X_train_scaled, y_train)","dac1241d":"# Check if residuals are consistent with the Gaussian assumption\nfig, ax = plt.subplots(1,2, figsize=(13,5))\nsns.histplot(y_train-reg.predict(X_train_scaled), kde=True, ax=ax[0]);\nax[0].set_title('Histogram of Residuals')\nsm.graphics.qqplot(y_train-reg.predict(X_train_scaled), line='s', fit=True, ax=ax[1])\nax[1].set_title('Normal QQ plot of Residuals');","d0a63969":"# Impute missing values\nX_test_scaled = scaler.fit_transform(X_test.values)\ny_test = model.predict(X_test_scaled)","1bb55fc5":"df[' Income '].isnull().sum()","bf4592aa":"df.loc[df[' Income '].isnull(), ' Income '] = y_test","cd5451d9":"df[' Income '].isnull().sum()","e6413a54":"# Remove features which are irrelevent for market segmentation,\n# AcceptedCmp1-5, complain, response are highly imbalanced.\nfeatures = ['ID', 'AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', \n            'AcceptedCmp5', 'Complain', 'Response', 'Dt_Customer']\ndf = df.drop(features, axis=1)","3c1d7ee1":"np.shape(df)","a56bb7f4":"#Pre-processing numerical data\ndf_scaled=df.copy()\nfor c in list(df.select_dtypes(exclude=['object']).columns):\n    df_scaled.loc[:,c] = scaler.fit_transform(np.array(df[c]).reshape(-1, 1)).flatten()\n\ncategorical_columns = [1,2,18]","c42e6d61":"df_scaled.head()","4b24beca":"#Elbow plot with cost (will take a LONG time)\ncosts = []\nn_clusters = []\nclusters_assigned = []\ncategorical_columns = [1,2,18]\n\nfor i in range(2, 20):\n    try:\n        kproto = KPrototypes(n_clusters=i, random_state=10, init='Huang', n_init=1, verbose=1)\n        clusters = kproto.fit_predict(df_scaled, categorical=categorical_columns)\n        costs.append(kproto.cost_)\n        n_clusters.append(i)\n        clusters_assigned.append(clusters)\n    except:\n        print(f\"Can't cluster with {i} clusters\")","57806093":"plt.plot(n_clusters, costs, 'bx-')\nplt.ylabel('Distortion')\nplt.xlabel('K');","0c7a7db8":"# Check distribution of data among 6 clusters.\nnp.unique(clusters_assigned[4], return_counts=True)","414cec82":"kproto = KPrototypes(n_clusters=6, random_state=10, init='Huang', n_init=1, verbose=1)\nclusters = kproto.fit_predict(df_scaled, categorical=categorical_columns)","a028d9c6":"df['Cluster'] = kproto.labels_","cb32cede":"features = ['Teenhome', 'Kidhome', 'Country', 'Education', 'Marital_Status']\n\nfig, axes = plt.subplots(3,2, figsize=(10,14))\ni=0\nfor raw in axes:\n    for col in raw:\n        sns.countplot(x='Cluster', hue='{}'.format(features[i]), data=df, ax=col)\n        col.set_title('{}'.format(features[i]))\n        i+=1\n        if i==5:\n            break\naxes[-1, -1].axis('off');","e42c9d0b":"features = ['Year_Birth', ' Income ', 'MntWines', 'MntMeatProducts', \n            'NumCatalogPurchases', 'NumWebVisitsMonth']\n\nfig, axes = plt.subplots(3,2, figsize=(10,14))\ni=0\nfor raw in axes:\n    for col in raw:\n        sns.boxplot(x='Cluster', y='{}'.format(features[i]), \n                    data=df, ax=col, showfliers = False)\n        col.set_title('{}'.format(features[i]))\n        i+=1\n        if i==6:\n            break","da9e1ec9":"#plt.subplots(figsize=(10,10))\nsns.scatterplot(data=df[df[' Income ']<df[' Income '].quantile(.99)], \n                x=' Income ', y='MntWines', hue='Cluster');","28a89b33":"#df[df['Cluster']==3][[' Income ']].describe()","f040d9ff":"#### 2.3 Education <a class=\"anchor\" id=\"section_2_3\"><\/a>","03d2aad1":"#### 2.5 Income <a class=\"anchor\" id=\"section_2_5\"><\/a>","2dc78926":"#### 2.6 Children and teenagers in houshold <a class=\"anchor\" id=\"section_2_6\"><\/a>","8e93465d":"### 5. A few caracteristcs of each cluster <a class=\"anchor\" id=\"section_5\"><\/a>","c9541c11":"### 3. Dealing with missing values <a class=\"anchor\" id=\"section_3\"><\/a>","81fd384f":"#### 2.2 Age <a class=\"anchor\" id=\"section_2_2\"><\/a>","e4232c6c":"#### 2.9 Amount spent on different products <a class=\"anchor\" id=\"section_2_9\"><\/a>","08f10405":"### 4. Clustering with K-prototypes <a class=\"anchor\" id=\"section_4\"><\/a>","21a4e77d":"Cluster 0: Mostly one teen and one kid at home, number of web visits per month interquartile range of 6-8 visits. \n\nCluster 1: Mostly one teen and no kid at home, high income with interquartile range 58-64k. Significant amount spent on wine in the last 2 years with interquartile range 394-824.\n\nCluster 2: Mostly no teen or kid at home, very high income with interqaurtile range 71-82k.  Significant amount spent on wine in the last 2 years with interquartile range 350-794. Very low number of visits to company's web site in the last month with interquartile range 4-6.75 visits.\n\nCluster 3: No teen and mostly one kid at home, youngest population in dataset with birth year interqartil range 1973-1984. Very low income with interquartile range 22-36k.\n\nCluster 4: Same as Cluster 1 in terms of number of children and doesn't have other distingishable caracteristic. \n\nCluster 5: Same as Cluster 0 in terms of number of children and differs from cluster 0 by low number of purchases made with a discount and low number of purchases made using a catalogue and low income.","cbeb5635":"#### 2.7 Date of customer's enrollment with the company <a class=\"anchor\" id=\"section_2_7\"><\/a>","3bda3b8d":"6 for number of clusters seems reasonable choice. ","e9b2b183":"#### 2.10 Number of purchases <a class=\"anchor\" id=\"section_2_10\"><\/a>","9b9a6d9a":"#### 2.4 Marital status <a class=\"anchor\" id=\"section_2_4\"><\/a>","2c869403":"### 1. Data preparation <a class=\"anchor\" id=\"section_1\"><\/a>","0f35f865":"### Table of Contents\n\n* [1. Data Preparetion](#section_1)\n* [2. Exploring the content of variables](#section_2)\n    * [2.1 Countries](#section_2_1)\n    * [2.2 Age](#section_2_2)\n    * [2.3 Education](#section_2_3)\n    * [2.4 Marital status](#section_2_4)\n    * [2.5 Income](#section_2_5)\n    * [2.6 Children and teenagers in household](#section_2_6)\n    * [2.7 Date of customers enrollment with the company](#section_2_7)\n    * [2.8 Recency](#section2_7)\n    * [2.9 Amount spent on different products](#section_2_9)\n    * [2.10 Number of purchases](#section_2_10)\n    * [2.11 Customer's acceptence of campaign](#section_2_11)\n* [3. Dealing with missing values](#section_3)\n* [4. Clustering with K-prototypes](#section_4)\n* [5. A few caracteristcs of each cluster](#section_5)","4d0497d5":"### 2. Exploring the content of variables <a class=\"anchor\" id=\"section_2\"><\/a>","3f4dbc9f":"#### Dataset information:\n\n#### Client data:\n\n1. ID : Customer's unique identifier\n2. Year birth : Customer's birth year\n3. Education : Customer's education level\n4. Marital_Status : Customer's marital status\n5. Income : Customer's yearly household income\n6. Kidhome : Number of children in customer's household\n7. Teenhome : Number of teenagers in customer's household\n8. Dt_Customer : Date of customer's enrollment with the company\n9. Recency : Number of days since customer's last purchase\n10. MntWines : Amount spent on wine in the last 2 years\n11. MntFruits: Amount spent on fruits in the last 2 years\n12. MntMeatProducts : Amount spent on meat in the last 2 years\n13. MntFishProducts : Amount spent on fish in the last 2 years\n14. MntSweetProducts : Amount spent on sweets in the last 2 years\n15. MntGoldProds : Amount spent on gold in the last 2 years\n16. NumDealsPurchases : Number of purchases made with a discount\n17. NumWebPurchases : Number of purchases made through the company's web site\n18. NumCatalogPurchases : Number of purchases made using a catalogue\n19. NumStorePurchases : Number of purchases made directly in stores\n20. NumWebVisitsMonth : Number of visits to company's web site in the last month\n21. AcceptedCmp3 : 1 if customer accepted the offer in the 3rd campaign, 0 otherwise\n22. AcceptedCmp4 : 1 if customer accepted the offer in the 4th campaign, 0 otherwise\n23. AcceptedCmp5 : 1 if customer accepted the offer in the 5th campaign, 0 otherwise\n24. AcceptedCmp1 : 1 if customer accepted the offer in the 1st campaign, 0 otherwise\n25. AcceptedCmp2 : 1 if customer accepted the offer in the 2nd campaign, 0 otherwise\n26. Response : 1 if customer accepted the offer in the last campaign, 0 otherwise\n27. Complain : 1 if customer complained in the last 2 years, 0 otherwise\n28. Country : Customer's location\n","daef7150":"#### 2.8 Recency <a class=\"anchor\" id=\"section_2_8\"><\/a>","4e42c9ff":"#### 2.1 Countries <a class=\"anchor\" id=\"section_2_1\"><\/a>","b7fd7993":"#### 2.11 Customer's acceptence of campaign <a class=\"anchor\" id=\"section_2_11\"><\/a>"}}