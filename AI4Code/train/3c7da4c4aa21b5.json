{"cell_type":{"7cbb9892":"code","895c3c52":"code","6f2f8b17":"code","124e7c7e":"code","104eea5b":"code","2d260e86":"code","1fd81e0d":"code","4770c671":"code","83b98a16":"code","c508c3b4":"code","c7700e45":"code","90e7eb05":"code","b410ad7d":"code","fefdbc8a":"code","22d5afc6":"code","29fb450e":"code","95c2523a":"code","dd85e375":"code","e1e998ac":"code","1039cc8c":"code","a479ea3c":"code","3011eb84":"code","993bec5d":"code","0f190392":"code","84376ef2":"code","69d763d0":"code","7a053439":"code","827c67f6":"code","d22c28d1":"code","1a54f776":"markdown","cfa996d3":"markdown","58d666bb":"markdown","4056e698":"markdown","a8331aa9":"markdown","26002e05":"markdown","67a788d6":"markdown","9d1d8caf":"markdown","b286242d":"markdown","2e3ad067":"markdown","5ab35239":"markdown","dca3e645":"markdown","d6e1a7f7":"markdown","472033fc":"markdown","99f97ae1":"markdown","9ae8ccbb":"markdown","89a74c3f":"markdown","d62ff3bd":"markdown","58a806d3":"markdown","c2bc5fd5":"markdown","4fe3a98a":"markdown","c2dc9565":"markdown"},"source":{"7cbb9892":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # plot data\nimport sklearn #scikit-learn library, where the magic happens!\nimport seaborn as sns # beautiful graphs\nimport re","895c3c52":"df_titanic = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv')\n\n# Lowercase content\n# df_titanic = df_titanic.applymap(lambda s:s.lower() if isinstance(s, str) else s)\n\ndf_titanic = df_titanic.drop(columns=['PassengerId'])","6f2f8b17":"df_titanic","124e7c7e":"df_titanic['Female'] = (df_titanic['Sex']=='female')\ndf_titanic['Male'] = (df_titanic['Sex']=='male')\n\ndf_test['Female'] = (df_test['Sex']=='female')\ndf_test['Male'] = (df_test['Sex']=='male')","104eea5b":"# Compute the correlation matrix\ncorr = df_titanic.corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, cmap=cmap, mask=mask, vmax=.3, center=0, annot=True, square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot_kws={\"size\": 10})","2d260e86":"sns.set(font_scale=2)\nplt.figure(figsize=(10, 5))\nax = sns.boxplot(x='Age', orient='h',data=df_titanic,fliersize=8)","1fd81e0d":"sns.set(font_scale=2)\nplt.figure(figsize=(10, 5))\nax = sns.boxplot(x='Age',y='Survived', orient='h',data=df_titanic,fliersize=8)","4770c671":"sns.set(font_scale=2)\nplt.figure(figsize=(10, 5))\nax = sns.boxplot(x='Fare', orient='h',data=df_titanic,fliersize=8)","83b98a16":"sns.set(font_scale=2)\nplt.figure(figsize=(10, 5))\nax = sns.boxplot(x='Fare',y='Survived', orient='h',data=df_titanic,fliersize=8)","c508c3b4":"sns.set(font_scale=2)\nplt.figure(figsize=(10, 5))\nax = sns.boxplot(x='Survived', y='Age',hue='Pclass',orient='v',data=df_titanic,fliersize=8)","c7700e45":"ax = sns.barplot(x=\"Sex\", y=\"Survived\", data=df_titanic)","90e7eb05":"ax = sns.barplot(x=\"Pclass\", y=\"Survived\", hue=\"Sex\", data=df_titanic)","b410ad7d":"sns.set(font_scale=2)\nplt.figure(figsize=(12, 8))\nsns.distplot(df_titanic[df_titanic['Survived']==0]['Age'], color='red', label='0')\nsns.distplot(df_titanic[df_titanic['Survived']==1]['Age'], color='skyblue', label='1')\nplt.legend()","fefdbc8a":"ax = sns.barplot(x=\"Embarked\", y=\"Survived\", data=df_titanic)","22d5afc6":"df_titanic.loc[df_titanic['Age'] <= 10, 'Age Group'] = 1\ndf_titanic.loc[(df_titanic['Age'] > 10) & (df_titanic['Age'] <= 22) , 'Age Group'] = 2\ndf_titanic.loc[(df_titanic['Age'] > 22) & (df_titanic['Age'] <= 40), 'Age Group'] = 3\ndf_titanic.loc[df_titanic['Age'] > 40, 'Age Group'] = 4\n\ndf_test.loc[df_test['Age'] <= 10, 'Age Group'] = 1\ndf_test.loc[(df_test['Age'] > 10) & (df_test['Age'] <= 22) , 'Age Group'] = 2\ndf_test.loc[(df_test['Age'] > 22) & (df_test['Age'] <= 40), 'Age Group'] = 3\ndf_test.loc[df_test['Age'] > 40, 'Age Group'] = 4","29fb450e":"df_titanic['Group'] = df_titanic['SibSp']+df_titanic['Parch']+1\ndf_test['Group'] = df_test['SibSp']+df_test['Parch']+1","95c2523a":"df_titanic['Fare Group'] = df_titanic['Fare'] \/ df_titanic['Group']\ndf_test['Fare Group'] = df_test['Fare'] \/ df_test['Group']","dd85e375":"df_titanic['Name Lenght'] = df_titanic['Name'].str.len()\ndf_test['Name Lenght'] = df_test['Name'].str.len()","e1e998ac":"df_titanic['Deck'] = df_titanic['Cabin'].str.extract(r'([A-Za-z])?')\ndf_titanic['Room'] = df_titanic['Cabin'].str.extract(r'([0-9]+)')\n\ndf_test['Deck'] = df_test['Cabin'].str.extract(r'([A-Za-z])?')\ndf_test['Room'] = df_test['Cabin'].str.extract(r'([0-9]+)')\n\nregex = re.compile('\\s*(\\w+)\\s*')\n\ndf_titanic['Cabin'] = df_titanic['Cabin'].fillna('0')\ndf_titanic['CabinNum'] = df_titanic['Cabin']\ndf_titanic['CabinNum'] = df_titanic['CabinNum'].apply(lambda x : len(regex.findall(x)))\n\ndf_test['Cabin'] = df_test['Cabin'].fillna('0')\ndf_test['CabinNum'] = df_test['Cabin']\ndf_test['CabinNum'] = df_test['CabinNum'].apply(lambda x : len(regex.findall(x)))","1039cc8c":"from sklearn import preprocessing\n\ndf_titanic['Deck'].fillna('Z', inplace=True)\ndf_test['Deck'].fillna('Z', inplace=True)\n\ndf_titanic['Room'].fillna(0, inplace=True)\ndf_test['Room'].fillna(0, inplace=True)\n\ndf_titanic['Embarked'].fillna('S', inplace=True)\ndf_test['Embarked'].fillna('S', inplace=True)\n\nlabel_port = preprocessing.LabelEncoder()\nlabel_port.fit(['C', 'Q', 'S'])\ndf_titanic['Embarked'] = label_port.transform(df_titanic['Embarked'])\ndf_test['Embarked'] = label_port.transform(df_test['Embarked'])\n\nlabel_deck = preprocessing.LabelEncoder()\nlabel_deck.fit(['A', 'B', 'C','D','E','F','G','T','Z'])\ndf_titanic['Deck'] = label_deck.transform(df_titanic['Deck'])\ndf_test['Deck'] = label_deck.transform(df_test['Deck'])\n\ncabin_port = preprocessing.LabelEncoder()\ncabin_port.fit(pd.concat([df_titanic['Cabin'], df_test['Cabin']],join='inner',sort=False))\ndf_titanic['Cabin'] = cabin_port.transform(df_titanic['Cabin'])\ndf_test['Cabin'] = cabin_port.transform(df_test['Cabin'])","a479ea3c":"# Compute the correlation matrix\ncorr = df_titanic.corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, cmap=cmap, mask=mask, vmax=.3, center=0, annot=True, square=True, linewidths=.5, cbar_kws={\"shrink\": .5}, annot_kws={\"size\": 10})","3011eb84":"print('Train:')\nprint(df_titanic.isnull().sum())\nprint('Test:')\nprint(df_test.isnull().sum())","993bec5d":"df_test['Fare'].fillna(0, inplace=True)\nprint(df_test[df_test['Fare']==0])\nprint('\\n')\n\ndf_test.at[152,'Fare'] = df_titanic[df_titanic['Pclass']==3]['Fare'].mean()\ndf_test.at[266,'Fare'] = df_titanic[df_titanic['Pclass']==1]['Fare'].mean()\ndf_test.at[372,'Fare'] = df_titanic[df_titanic['Pclass']==1]['Fare'].mean()\n\ndf_test['Fare Group'] = df_test['Fare'] \/ df_test['Group']\n\ndf_titanic.loc[(df_titanic['Fare'] < 8),'Fare Cat'] = 0\ndf_titanic.loc[(df_titanic['Fare'] >= 8) & (df_titanic['Fare'] < 16),'Fare Cat'] = 1\ndf_titanic.loc[(df_titanic['Fare'] >= 16) & (df_titanic['Fare'] < 30),'Fare Cat'] = 2\ndf_titanic.loc[(df_titanic['Fare'] >= 30) & (df_titanic['Fare'] < 45),'Fare Cat'] = 3\ndf_titanic.loc[(df_titanic['Fare'] >= 45) & (df_titanic['Fare'] < 80),'Fare Cat'] = 4\ndf_titanic.loc[(df_titanic['Fare'] >= 80) & (df_titanic['Fare'] < 160),'Fare Cat'] = 5\ndf_titanic.loc[(df_titanic['Fare'] >= 160) & (df_titanic['Fare'] < 270),'Fare Cat'] = 6\ndf_titanic.loc[(df_titanic['Fare'] >= 270),'Fare Cat'] = 7\n\ndf_test.loc[(df_test['Fare'] < 8),'Fare Cat'] = 0\ndf_test.loc[(df_test['Fare'] >= 8) & (df_test['Fare'] < 16),'Fare Cat'] = 1\ndf_test.loc[(df_test['Fare'] >= 16) & (df_test['Fare'] < 30),'Fare Cat'] = 2\ndf_test.loc[(df_test['Fare'] >= 30) & (df_test['Fare'] < 45),'Fare Cat'] = 3\ndf_test.loc[(df_test['Fare'] >= 45) & (df_test['Fare'] < 80),'Fare Cat'] = 4\ndf_test.loc[(df_test['Fare'] >= 80) & (df_test['Fare'] < 160),'Fare Cat'] = 5\ndf_test.loc[(df_test['Fare'] >= 160) & (df_test['Fare'] < 270),'Fare Cat'] = 6\ndf_test.loc[(df_test['Fare'] >= 270),'Fare Cat'] = 7","0f190392":"from sklearn.neighbors import KNeighborsClassifier\n\ndf_titanic_drop = df_titanic.drop(columns=['Cabin']).dropna()\nX_train_age = df_titanic_drop.drop(columns=['Survived','Name','Sex','Age','Age Group','Ticket'])\ny_train_age = df_titanic_drop['Age Group'].dropna()\n\nage_classifier = KNeighborsClassifier(n_neighbors=3)\nage_classifier.fit(X_train_age, y_train_age)\n\nX_test_age = df_test[df_test['Age Group'].isnull()].drop(columns=['PassengerId','Name','Sex','Age','Age Group','Ticket','Cabin'])\ny_test_age = age_classifier.predict(X_test_age)\ny_test_age\n\nX_train_age = df_titanic[df_titanic['Age Group'].isnull()].drop(columns=['Survived','Name','Sex','Age','Age Group','Ticket','Cabin'])\ny_train_age = age_classifier.predict(X_train_age)\ny_train_age","84376ef2":"df_test.loc[(df_test['Age Group'].isnull()),'Age Group'] = y_test_age\ndf_titanic.loc[(df_titanic['Age Group'].isnull()),'Age Group'] = y_train_age","69d763d0":"mean_age_1 = df_titanic[df_titanic['Age Group']==1]['Age'].mean()\nmean_age_2 = df_titanic[df_titanic['Age Group']==2]['Age'].mean()\nmean_age_3 = df_titanic[df_titanic['Age Group']==3]['Age'].mean()\nmean_age_4 = df_titanic[df_titanic['Age Group']==4]['Age'].mean()\n\ndf_titanic.loc[(df_titanic['Age'].isnull()) & (df_titanic['Age Group']==1),'Age'] = mean_age_1\ndf_titanic.loc[(df_titanic['Age'].isnull()) & (df_titanic['Age Group']==2),'Age'] = mean_age_2\ndf_titanic.loc[(df_titanic['Age'].isnull()) & (df_titanic['Age Group']==3),'Age'] = mean_age_3\ndf_titanic.loc[(df_titanic['Age'].isnull()) & (df_titanic['Age Group']==4),'Age'] = mean_age_4\n\ndf_test.loc[(df_test['Age'].isnull()) & (df_test['Age Group']==1),'Age'] = mean_age_1\ndf_test.loc[(df_test['Age'].isnull()) & (df_test['Age Group']==2),'Age'] = mean_age_2\ndf_test.loc[(df_test['Age'].isnull()) & (df_test['Age Group']==3),'Age'] = mean_age_3\ndf_test.loc[(df_test['Age'].isnull()) & (df_test['Age Group']==4),'Age'] = mean_age_4","7a053439":"X_train = df_titanic.drop(columns=['Survived','Name','Sex','Age','Ticket','Fare','Cabin','Fare Group'])\ny_train = df_titanic['Survived']\n\nX_test = df_test.drop(columns=['PassengerId','Name','Sex','Age','Ticket','Fare','Cabin','Fare Group'])","827c67f6":"print('X_train:')\nprint(X_test.isnull().sum())","d22c28d1":"from sklearn.ensemble import RandomForestClassifier\n\ntree = RandomForestClassifier(max_depth = 10, min_samples_split = 4, n_estimators = 500, random_state=0)\ntree.fit(X_train, y_train)\n\ny_test = pd.Series(tree.predict(X_test))\n\ndf_final = pd.concat([df_test['PassengerId'], y_test], axis=1, sort=False)\ndf_final = df_final.rename(columns={0:\"Survived\"})\ndf_final.to_csv(r'titanic_random_forrest.csv', index = False)","1a54f776":"## Fare Group and Fare Categorie","cfa996d3":"## Age","58d666bb":"## Fare Distribution","4056e698":"## Name Lenght\n\n","a8331aa9":"# Fill","26002e05":"# Dictionary\n\n| Variable | Definition | Key |\n|-|-|-|\n| survival |Survival | 0 = No, 1 = Yes |\n| pclass | Ticket class | 1 = 1st, 2 = 2nd, 3 = 3rd |\n| sex| Sex | |\t\n| age| Age in years | |\t\n| sibsp | # of siblings \/ spouses aboard the Titanic | |\n| parch | # of parents \/ children aboard the Titanic | |\n| ticket | Ticket number | |\n| fare | Passenger fare | |\n| cabin\t| Cabin number | |\n| embarked | Port of Embarkation | C = Cherbourg, Q = Queenstown, S = Southampton |","67a788d6":"## Cabin","9d1d8caf":"## Embarked","b286242d":"## OneHot","2e3ad067":"## Pclass ","5ab35239":"# Random Forest","dca3e645":"# Import dataset","d6e1a7f7":"## Age Distribution","472033fc":"## SibSp + Parch","99f97ae1":"Wow, huge correlation.\n\nIf you were female on the titanic, there is a big chance that you survived.\nBeing rich doesn't hurt either.","9ae8ccbb":"## Sex Correlation","89a74c3f":"## Age group","d62ff3bd":"# Trying Random Forrest","58a806d3":"# Fill Age","c2bc5fd5":"# Correlation","4fe3a98a":"# One Hot","c2dc9565":"So **fare** and **pclass** have good correlation with **survived**.\n\nLet's see if the quali variable also have a good correlation."}}