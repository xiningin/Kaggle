{"cell_type":{"1c331e79":"code","58f8c1d1":"code","a17b5b5e":"code","0ed18f23":"code","a0458c8b":"code","9618fcb8":"code","bbd852cb":"code","fb7b72b1":"code","fbf69ca3":"code","13063c2e":"code","78355798":"code","266ada0d":"code","7b68ae49":"code","a0348426":"code","e0712d86":"code","df8c0d95":"code","f56b0223":"code","ddb8e432":"code","7414a36a":"code","d77c909d":"code","05ae269b":"code","6dbdd712":"code","992fefaf":"code","cc0eb066":"code","472758ff":"code","25010cff":"code","e8ec17ea":"code","78bde66b":"code","c39f8400":"code","5b87f958":"code","167f5485":"code","69307236":"code","eba88de2":"code","f6cbaee8":"code","e1b96506":"code","515ce2c9":"code","cb03bb5f":"code","fc523b6f":"code","cbfa4794":"code","5a7ea954":"code","2dfbba86":"code","3d55e24d":"code","c6c04dbb":"code","f9d02a01":"code","b3a1c55d":"code","c7a047cc":"code","6833c348":"code","2d3d2519":"markdown","883c98f5":"markdown","2859249d":"markdown","d5cc9e89":"markdown","0373d7a2":"markdown","4b5becdd":"markdown","a3b56e8c":"markdown","9db120e7":"markdown","45e2b998":"markdown","f022ba7d":"markdown"},"source":{"1c331e79":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58f8c1d1":"import pandas as pd\nimport numpy as np \nimport string \nstring.punctuation\nimport nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nstopwords.words('english')\nimport re\nimport unicodedata","a17b5b5e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM, SpatialDropout1D\nfrom sklearn.model_selection import train_test_split\nfrom keras.utils.np_utils import to_categorical\nimport re\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory","0ed18f23":"j_data=pd.read_csv('..\/input\/joe-biden-tweets\/JoeBidenTweets.csv')\nj_data.head()","a0458c8b":"words=set(nltk.corpus.words.words())","9618fcb8":"def tweets_cleaning(text):\n    lowercase = text.lower()\n    punc_removal = [char for char in lowercase if char not in string.punctuation]\n    punc_removal_joined = ''.join(punc_removal)\n    url_removal = re.sub(r'(https|http)?:\\\/\\\/(\\w|\\.|\\\/|\\?|\\=|\\&|\\%)*\\b', '', punc_removal_joined, flags=re.MULTILINE)\n    emoji_removal = url_removal.encode('ascii', 'ignore').decode('ascii')\n    stopwords_removal = [word for word in emoji_removal.split() if word not in stopwords.words('english')]\n    stop_words=\" \".join(stopwords_removal)\n    #remove non -english words\n    return \" \".join(w for w in nltk.wordpunct_tokenize(stop_words) if w .lower() in words and  w.isalpha())\n","bbd852cb":"import nltk\nwords = set(nltk.corpus.words.words())\n\nsent = \"shouldnt to the beach with my amico.\"\n\" \".join(w for w in nltk.wordpunct_tokenize(sent) \\\n         if w.lower() in words and  w.isalpha())","fb7b72b1":"j_data['cleaned_tweet'] = j_data['tweet'].apply(tweets_cleaning).astype(str)\n","fbf69ca3":"word_to_index[\"should\"]","13063c2e":"j_data['tweet'][0],j_data['cleaned_tweet'][0]","78355798":"import csv\nimport numpy as np\nimport emoji\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\n\ndef read_glove_vecs(glove_file):\n    with open(glove_file, 'r') as f:\n        words = set()\n        word_to_vec_map = {}\n        for line in f:\n            line = line.strip().split()\n            curr_word = line[0]\n            words.add(curr_word)\n            word_to_vec_map[curr_word] = np.array(line[1:], dtype=np.float64)\n        \n        i = 1\n        words_to_index = {}\n        index_to_words = {}\n        for w in sorted(words):\n            words_to_index[w] = i\n            index_to_words[i] = w\n            i = i + 1\n    return words_to_index, index_to_words, word_to_vec_map\n\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x \/ e_x.sum()\n\n\ndef read_csv(filename = 'data\/emojify_data.csv'):\n    phrase = []\n    emoji = []\n\n    with open (filename) as csvDataFile:\n        csvReader = csv.reader(csvDataFile)\n\n        for row in csvReader:\n            phrase.append(row[0])\n            emoji.append(row[1])\n\n    X = np.asarray(phrase)\n    Y = np.asarray(emoji, dtype=int)\n\n    return X, Y\n\ndef convert_to_one_hot(Y, C):\n    Y = np.eye(C)[Y.reshape(-1)]\n    return Y\n\n\nemoji_dictionary = {\"0\": \"smile\",    # :heart: prints a black instead of red heart depending on the font\n                    \"1\": \":disappointed:\",\n                    \"2\": \":smile:\",\n                    \"3\": \":disappointed:\",\n                    \"4\": \":fork_and_knife:\"}\n\ndef label_to_emoji(label):\n    \"\"\"\n    Converts a label (int or string) into the corresponding emoji code (string) ready to be printed\n    \"\"\"\n    return emoji.emojize(emoji_dictionary[str(label)], use_aliases=True)\n              \n    \ndef print_predictions(X, pred):\n    print()\n    for i in range(X.shape[0]):\n        print(X[i], label_to_emoji(int(pred[i])))\n        \n        \ndef plot_confusion_matrix(y_actu, y_pred, title='Confusion matrix', cmap=plt.cm.gray_r):\n    \n    df_confusion = pd.crosstab(y_actu, y_pred.reshape(y_pred.shape[0],), rownames=['Actual'], colnames=['Predicted'], margins=True)\n    \n    df_conf_norm = df_confusion \/ df_confusion.sum(axis=1)\n    \n    plt.matshow(df_confusion, cmap=cmap) # imshow\n    #plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(df_confusion.columns))\n    plt.xticks(tick_marks, df_confusion.columns, rotation=45)\n    plt.yticks(tick_marks, df_confusion.index)\n    #plt.tight_layout()\n    plt.ylabel(df_confusion.index.name)\n    plt.xlabel(df_confusion.columns.name)\n    \n    \ndef predict(X, Y, W, b, word_to_vec_map):\n    \"\"\"\n    Given X (sentences) and Y (emoji indices), predict emojis and compute the accuracy of your model over the given set.\n    \n    Arguments:\n    X -- input data containing sentences, numpy array of shape (m, None)\n    Y -- labels, containing index of the label emoji, numpy array of shape (m, 1)\n    \n    Returns:\n    pred -- numpy array of shape (m, 1) with your predictions\n    \"\"\"\n    m = X.shape[0]\n    pred = np.zeros((m, 1))\n    \n    for j in range(m):                       # Loop over training examples\n        \n        # Split jth test example (sentence) into list of lower case words\n        words = X[j].lower().split()\n        \n        # Average words' vectors\n        avg = np.zeros((50,))\n        for w in words:\n            avg += word_to_vec_map[w]\n        avg = avg\/len(words)\n\n        # Forward propagation\n        Z = np.dot(W, avg) + b\n        A = softmax(Z)\n        pred[j] = np.argmax(A)\n        \n    print(\"Accuracy: \"  + str(np.mean((pred[:] == Y.reshape(Y.shape[0],1)[:]))))\n    \n    return pred","266ada0d":"import csv\nimport numpy as np\nimport emoji\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\n\ndef read_glove_vecs(glove_file):\n    with open(glove_file, 'r') as f:\n        words = set()\n        word_to_vec_map = {}\n        for line in f:\n            line = line.strip().split()\n            curr_word = line[0]\n            words.add(curr_word)\n            word_to_vec_map[curr_word] = np.array(line[1:], dtype=np.float64)\n        \n        i = 1\n        words_to_index = {}\n        index_to_words = {}\n        for w in sorted(words):\n            words_to_index[w] = i\n            index_to_words[i] = w\n            i = i + 1\n    return words_to_index, index_to_words, word_to_vec_map\n\ndef softmax(x):\n    \"\"\"Compute softmax values for each sets of scores in x.\"\"\"\n    e_x = np.exp(x - np.max(x))\n    return e_x \/ e_x.sum()\n\n\ndef read_csv(filename = 'data\/emojify_data.csv'):\n    phrase = []\n    emoji = []\n\n    with open (filename) as csvDataFile:\n        csvReader = csv.reader(csvDataFile)\n\n        for row in csvReader:\n            phrase.append(row[0])\n            emoji.append(row[1])\n\n    X = np.asarray(phrase)\n    Y = np.asarray(emoji, dtype=int)\n\n    return X, Y\n\ndef convert_to_one_hot(Y, C):\n    Y = np.eye(C)[Y.reshape(-1)]\n    return Y\n\n\nemoji_dictionary = {\"0\": \"smile\",    # :heart: prints a black instead of red heart depending on the font\n                    \"1\": \":disappointed:\",\n                    \"2\": \":smile:\",\n                    \"3\": \":disappointed:\",\n                    \"4\": \":fork_and_knife:\"}\n\ndef label_to_emoji(label):\n    \"\"\"\n    Converts a label (int or string) into the corresponding emoji code (string) ready to be printed\n    \"\"\"\n    return emoji.emojize(emoji_dictionary[str(label)], use_aliases=True)\n              \n    \ndef print_predictions(X, pred):\n    print()\n    for i in range(X.shape[0]):\n        print(X[i], label_to_emoji(int(pred[i])))\n        \n        \ndef plot_confusion_matrix(y_actu, y_pred, title='Confusion matrix', cmap=plt.cm.gray_r):\n    \n    df_confusion = pd.crosstab(y_actu, y_pred.reshape(y_pred.shape[0],), rownames=['Actual'], colnames=['Predicted'], margins=True)\n    \n    df_conf_norm = df_confusion \/ df_confusion.sum(axis=1)\n    \n    plt.matshow(df_confusion, cmap=cmap) # imshow\n    #plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(df_confusion.columns))\n    plt.xticks(tick_marks, df_confusion.columns, rotation=45)\n    plt.yticks(tick_marks, df_confusion.index)\n    #plt.tight_layout()\n    plt.ylabel(df_confusion.index.name)\n    plt.xlabel(df_confusion.columns.name)\n    \n    \ndef predict(X, Y, W, b, word_to_vec_map):\n    \"\"\"\n    Given X (sentences) and Y (emoji indices), predict emojis and compute the accuracy of your model over the given set.\n    \n    Arguments:\n    X -- input data containing sentences, numpy array of shape (m, None)\n    Y -- labels, containing index of the label emoji, numpy array of shape (m, 1)\n    \n    Returns:\n    pred -- numpy array of shape (m, 1) with your predictions\n    \"\"\"\n    m = X.shape[0]\n    pred = np.zeros((m, 1))\n    \n    for j in range(m):                       # Loop over training examples\n        \n        # Split jth test example (sentence) into list of lower case words\n        words = X[j].lower().split()\n        \n        # Average words' vectors\n        avg = np.zeros((50,))\n        for w in words:\n            avg += word_to_vec_map[w]\n        avg = avg\/len(words)\n\n        # Forward propagation\n        Z = np.dot(W, avg) + b\n        A = softmax(Z)\n        pred[j] = np.argmax(A)\n        \n    print(\"Accuracy: \"  + str(np.mean((pred[:] == Y.reshape(Y.shape[0],1)[:]))))\n    \n    return pred","7b68ae49":"X_train, Y_train = read_csv('..\/input\/emojify\/emojify_data.csv')\nX_test, Y_test = read_csv('..\/input\/emojify\/tesss.csv')","a0348426":"#maxLen = len(max(X_train, key=len).split())\nmaxLen =300","e0712d86":"for idx in range(10,30):\n    print(X_train[idx], label_to_emoji(Y_train[idx]))","df8c0d95":"Y_oh_train = convert_to_one_hot(Y_train, C = 5)\nY_oh_test = convert_to_one_hot(Y_test, C = 5)","f56b0223":"idx = 50\nprint(f\"Sentence '{X_train[50]}' has label index {Y_train[idx]}, which is emoji {label_to_emoji(Y_train[idx])}\", )\nprint(f\"Label index {Y_train[idx]} in one-hot encoding format is {Y_oh_train[idx]}\")","ddb8e432":"word_to_index, index_to_word, word_to_vec_map = read_glove_vecs('..\/input\/glove-data\/glove.6B.50d.txt')","7414a36a":"word = \"cucumber\"\nidx = 289846\nprint(\"the index of\", word, \"in the vocabulary is\", word_to_index[word])\nprint(\"the\", str(idx) + \"th word in the vocabulary is\", index_to_word[idx])","d77c909d":"def sentence_to_avg(sentence, word_to_vec_map):\n    \"\"\"\n    Converts a sentence (string) into a list of words (strings). Extracts the GloVe representation of each word\n    and averages its value into a single vector encoding the meaning of the sentence.\n    \n    Arguments:\n    sentence -- string, one training example from X\n    word_to_vec_map -- dictionary mapping every word in a vocabulary into its 50-dimensional vector representation\n    \n    Returns:\n    avg -- average vector encoding information about the sentence, numpy-array of shape (50,)\n    \"\"\"\n    \n    # Step 1: Split sentence into list of lower case words (\u2248 1 line)\n    words = (sentence.lower()).split()\n\n    # Initialize the average word vector, should have the same shape as your word vectors.\n    avg = np.zeros(word_to_vec_map[words[0]].shape)\n    \n    # Step 2: average the word vectors. You can loop over the words in the list \"words\".\n    total = 0\n    for w in words:\n        total += word_to_vec_map[w]\n    avg = total\/len(words)\n    \n    \n    return avg","05ae269b":"avg = sentence_to_avg(\"Morrocan couscous is my favorite dish\", word_to_vec_map)\nprint(\"avg = \\n\", avg)","6dbdd712":"\ndef model(X, Y, word_to_vec_map, learning_rate = 0.01, num_iterations = 400):\n    \"\"\"\n    Model to train word vector representations in numpy.\n    \n    Arguments:\n    X -- input data, numpy array of sentences as strings, of shape (m, 1)\n    Y -- labels, numpy array of integers between 0 and 7, numpy-array of shape (m, 1)\n    word_to_vec_map -- dictionary mapping every word in a vocabulary into its 50-dimensional vector representation\n    learning_rate -- learning_rate for the stochastic gradient descent algorithm\n    num_iterations -- number of iterations\n    \n    Returns:\n    pred -- vector of predictions, numpy-array of shape (m, 1)\n    W -- weight matrix of the softmax layer, of shape (n_y, n_h)\n    b -- bias of the softmax layer, of shape (n_y,)\n    \"\"\"\n    \n    np.random.seed(1)\n\n    # Define number of training examples\n    m = Y.shape[0]                          # number of training examples\n    n_y = 5                                 # number of classes  \n    n_h = 50                                # dimensions of the GloVe vectors \n    \n    # Initialize parameters using Xavier initialization\n    W = np.random.randn(n_y, n_h) \/ np.sqrt(n_h)\n    b = np.zeros((n_y,))\n    \n    # Convert Y to Y_onehot with n_y classes\n    Y_oh = convert_to_one_hot(Y, C = n_y) \n    \n    # Optimization loop\n    for t in range(num_iterations): # Loop over the number of iterations\n        for i in range(m):          # Loop over the training examples\n            \n            # Average the word vectors of the words from the i'th training example\n            avg = sentence_to_avg(X[i],word_to_vec_map)\n\n            # Forward propagate the avg through the softmax layer\n            z = np.dot(W,avg)+b\n            a = softmax(z)\n\n            # Compute cost using the i'th training label's one hot representation and \"A\" (the output of the softmax)\n            cost = -np.sum(np.dot(Y_oh[i],np.log(a)))\n            \n            # Compute gradients \n            dz = a - Y_oh[i]\n            dW = np.dot(dz.reshape(n_y,1), avg.reshape(1, n_h))\n            db = dz\n\n            # Update parameters with Stochastic Gradient Descent\n            W = W - learning_rate * dW\n            b = b - learning_rate * db\n        \n        if t % 100 == 0:\n            print(\"Epoch: \" + str(t) + \" --- cost = \" + str(cost))\n            pred = predict(X, Y, W, b, word_to_vec_map) #predict is defined in emo_utils.py\n\n    return pred, W, b","992fefaf":"print(X_train.shape)\nprint(Y_train.shape)\nprint(np.eye(5)[Y_train.reshape(-1)].shape)\nprint(X_train[0])\nprint(type(X_train))\nY = np.asarray([5,0,0,5, 4, 4, 4, 6, 6, 4, 1, 1, 5, 6, 6, 3, 6, 3, 4, 4])\nprint(Y.shape)\n\nX = np.asarray(['I am going to the bar tonight', 'I love you', 'miss you my dear',\n 'Lets go party and drinks','Congrats on the new job','Congratulations',\n 'I am so happy for you', 'Why are you feeling bad', 'What is wrong with you',\n 'You totally deserve this prize', 'Let us go play football',\n 'Are you down for football this afternoon', 'Work hard play harder',\n 'It is suprising how people can be dumb sometimes',\n 'I am very disappointed','It is the best day in my life',\n 'I think I will end up alone','My life is so boring','Good job',\n 'Great so awesome'])\n\nprint(X.shape)\nprint(np.eye(5)[Y_train.reshape(-1)].shape)\nprint(type(X_train))\n","cc0eb066":"pred, W, b = model(X_train, Y_train, word_to_vec_map)\nprint(pred)","472758ff":"print(\"Training set:\")\npred_train = predict(X_train, Y_train, W, b, word_to_vec_map)\nprint('Test set:')\npred_test = predict(X_test, Y_test, W, b, word_to_vec_map)","25010cff":"X_my_sentences = np.array([\"i adore you\", \"i love you\", \"funny lol\", \"lets play with a ball\", \"food is ready\", \"not feeling happy\"])\nY_my_labels = np.array([[0], [0], [2], [1], [4],[3]])\n\npred = predict(X_my_sentences, Y_my_labels , W, b, word_to_vec_map)\nprint_predictions(X_my_sentences, pred)","e8ec17ea":"print(Y_test.shape)\nprint('           '+ label_to_emoji(0)+ '    ' + label_to_emoji(1) + '    ' +  label_to_emoji(2)+ '    ' + label_to_emoji(3)+'   ' + label_to_emoji(4))\nprint(pd.crosstab(Y_test, pred_test.reshape(56,), rownames=['Actual'], colnames=['Predicted'], margins=True))\nplot_confusion_matrix(Y_test, pred_test)","78bde66b":"import numpy as np\nnp.random.seed(0)\nfrom keras.models import Model\nfrom keras.layers import Dense, Input, Dropout, LSTM, Activation\nfrom keras.layers.embeddings import Embedding\nfrom keras.preprocessing import sequence\nfrom keras.initializers import glorot_uniform\nnp.random.seed(1)","c39f8400":"for idx, val in enumerate([\"I\", \"like\", \"learning\"]):\n    print(idx,val)\n    ","5b87f958":"\ndef sentences_to_indices(X, word_to_index, max_len):\n    \"\"\"\n    Converts an array of sentences (strings) into an array of indices corresponding to words in the sentences.\n    The output shape should be such that it can be given to `Embedding()` (described in Figure 4). \n    \n    Arguments:\n    X -- array of sentences (strings), of shape (m, 1)\n    word_to_index -- a dictionary containing the each word mapped to its index\n    max_len -- maximum number of words in a sentence. You can assume every sentence in X is no longer than this. \n    \n    Returns:\n    X_indices -- array of indices corresponding to words in the sentences from X, of shape (m, max_len)\n    \"\"\"\n    \n    m = X.shape[0]                                   # number of training examples\n    \n    # Initialize X_indices as a numpy matrix of zeros and the correct shape (\u2248 1 line)\n    X_indices = np.zeros(shape=(m,max_len))\n    \n    for i in range(m):                               # loop over training examples\n        \n        # Convert the ith training sentence in lower case and split is into words. You should get a list of words.\n        sentence_words =X[i].lower().split()\n        \n        # Initialize j to 0\n        j = 0\n        \n        # Loop over the words of sentence_words\n        for w in sentence_words:\n            # Set the (i,j)th entry of X_indices to the index of the correct word.\n            X_indices[i, j] = word_to_index[w]\n            # Increment j to j + 1\n            j = j+1\n            \n    \n    return X_indices","167f5485":"X1 = np.array([\"funny lol\", \"lets play baseball\", \"food is ready for you\"])\nX1_indices = sentences_to_indices(X1,word_to_index, max_len = 5)\nprint(\"X1 =\", X1)\nprint(\"X1_indices =\\n\", X1_indices)","69307236":"\ndef pretrained_embedding_layer(word_to_vec_map, word_to_index):\n    \"\"\"\n    Creates a Keras Embedding() layer and loads in pre-trained GloVe 50-dimensional vectors.\n    \n    Arguments:\n    word_to_vec_map -- dictionary mapping words to their GloVe vector representation.\n    word_to_index -- dictionary mapping from words to their indices in the vocabulary (400,001 words)\n\n    Returns:\n    embedding_layer -- pretrained layer Keras instance\n    \"\"\"\n    \n    vocab_len = len(word_to_index) + 1                  # adding 1 to fit Keras embedding (requirement)\n    emb_dim = word_to_vec_map[\"cucumber\"].shape[0]      # define dimensionality of your GloVe word vectors (= 50)\n    \n    # Step 1\n    # Initialize the embedding matrix as a numpy array of zeros.\n    # See instructions above to choose the correct shape.\n    emb_matrix = np.zeros(shape=(vocab_len,emb_dim))\n    \n    # Set each row \"idx\" of the embedding matrix to be \n    # the word vector representation of the idx'th word of the vocabulary\n    for word, idx in word_to_index.items():\n        emb_matrix[idx, :] = word_to_vec_map[word]\n\n    # Define Keras embedding layer with the correct input and output sizes\n    # Make it non-trainable.\n    embedding_layer = Embedding(vocab_len,emb_dim,trainable=False)\n    ### END CODE HERE ###\n\n    # Build the embedding layer, it is required before setting the weights of the embedding layer. \n    embedding_layer.build((None,)) # Do not modify the \"None\".  This line of code is complete as-is.\n    \n    # Set the weights of the embedding layer to the embedding matrix. Your layer is now pretrained.\n    embedding_layer.set_weights([emb_matrix])\n    \n    return embedding_layer","eba88de2":"embedding_layer = pretrained_embedding_layer(word_to_vec_map, word_to_index)\nprint(\"weights[0][1][3] =\", embedding_layer.get_weights()[0][1][3])","f6cbaee8":"\ndef Emojify_V2(input_shape, word_to_vec_map, word_to_index):\n    \"\"\"\n    Function creating the Emojify-v2 model's graph.\n    \n    Arguments:\n    input_shape -- shape of the input, usually (max_len,)\n    word_to_vec_map -- dictionary mapping every word in a vocabulary into its 50-dimensional vector representation\n    word_to_index -- dictionary mapping from words to their indices in the vocabulary (400,001 words)\n\n    Returns:\n    model -- a model instance in Keras\n    \"\"\"\n    \n    # Define sentence_indices as the input of the graph.\n    # It should be of shape input_shape and dtype 'int32' (as it contains indices, which are integers).\n    sentence_indices = Input(shape=(input_shape[0],), dtype='int32')\n    \n    # Create the embedding layer pretrained with GloVe Vectors (\u22481 line)\n    embedding_layer = pretrained_embedding_layer(word_to_vec_map, word_to_index)\n    \n    # Propagate sentence_indices through your embedding layer\n    # (See additional hints in the instructions).\n    embeddings = embedding_layer(sentence_indices)   \n    \n    # Propagate the embeddings through an LSTM layer with 128-dimensional hidden state\n    # The returned output should be a batch of sequences.\n    X = LSTM(units = 128, return_sequences= True)(embeddings)\n    # Add dropout with a probability of 0.5\n    X = Dropout(0.5)(X)\n    # Propagate X trough another LSTM layer with 128-dimensional hidden state\n    # The returned output should be a single hidden state, not a batch of sequences.\n    X = LSTM(units=128,return_sequences=False)(X)\n    # Add dropout with a probability of 0.5\n    X = Dropout(rate=0.5)(X)\n    # Propagate X through a Dense layer with 5 units\n    X = Dense(units=5)(X)\n    # Add a softmax activation\n    X = Activation(activation='softmax')(X)\n    \n    # Create Model instance which converts sentence_indices into X.\n    model = Model(inputs=sentence_indices,outputs=X)\n    \n    ### END CODE HERE ###\n    \n    return model","e1b96506":"model = Emojify_V2((maxLen,), word_to_vec_map, word_to_index)\nmodel.summary()","515ce2c9":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","cb03bb5f":"X_train_indices = sentences_to_indices(X_train, word_to_index, maxLen)\nY_train_oh = convert_to_one_hot(Y_train, C = 5)","fc523b6f":"model.fit(X_train_indices, Y_train_oh, epochs = 50, batch_size = 32, shuffle=True)","cbfa4794":"X_test_indices = sentences_to_indices(X_test, word_to_index, max_len = maxLen)\nY_test_oh = convert_to_one_hot(Y_test, C = 5)\nloss, acc = model.evaluate(X_test_indices, Y_test_oh)\nprint()\nprint(\"Test accuracy = \", acc)","5a7ea954":"# Change the sentence below to see your prediction. Make sure all the words are in the Glove embeddings.  \nx_test = np.array([' I am feeling awesome'])\nX_test_indices = sentences_to_indices(x_test, word_to_index, maxLen)\nprint(x_test[0] +' '+  label_to_emoji(np.argmax(model.predict(X_test_indices))))","2dfbba86":"j_data.head()","3d55e24d":"# Change the sentence below to see your prediction. Make sure all the words are in the Glove embeddings. \ndef emojification(data):\n    x_test = np.array([data])\n    X_test_indices = sentences_to_indices(x_test, word_to_index, maxLen)\n    return label_to_emoji(np.argmax(model.predict(X_test_indices)))","c6c04dbb":"j_data['cleaned_tweet'].shape[0]","f9d02a01":"maxLen1=0","b3a1c55d":"for i in range(j_data['cleaned_tweet'].shape[0]):\n    n1=len(j_data['cleaned_tweet'][i])\n    if n1>maxLen1:\n        maxLen1=n1","c7a047cc":"maxLen1","6833c348":"for i in range(j_data['cleaned_tweet'].shape[0]):\n    j_data['emoji']=emojification(j_data['cleaned_tweet'][i])","2d3d2519":"Amazing! \n* Because *adore* has a similar embedding as *love*, the algorithm has generalized correctly even to a word it has never seen before. \n* Words such as *heart*, *dear*, *beloved* or *adore* have embedding vectors similar to *love*. \n    * Feel free to modify the inputs above and try out a variety of input sentences. \n    * How well does it work?\n\n#### Word ordering isn't considered in this model\n* Note that the model doesn't get the following sentence correct:\n>\"not feeling happy\" \n\n* This algorithm ignores word ordering, so is not good at understanding phrases like \"not happy.\" \n\n#### Confusion matrix\n* Printing the confusion matrix can also help understand which classes are more difficult for your model. \n* A confusion matrix shows how often an example whose label is one class (\"actual\" class) is mislabeled by the algorithm with a different class (\"predicted\" class).","883c98f5":"# Emojify! \n\nI have used word vector representations to build an Emojifier. \n\nHave you ever wanted to make your text messages more expressive? this emojifier app will help you do that. \nSo rather than writing:\n>\"Congratulations on the promotion! Let's get coffee and talk. Love you!\"   \n\nThe emojifier can automatically turn this into:\n>\"Congratulations on the promotion! \ud83d\udc4d Let's get coffee and talk. \u2615\ufe0f Love you! \u2764\ufe0f\"\n\n* I have  implemented a model which inputs a sentence (such as \"Let's go see the baseball game tonight!\") and finds the most appropriate emoji to be used with this sentence (\u26be\ufe0f).\n\n#### Using word vectors to improve emoji lookups\n* In many emoji interfaces, you need to remember that \u2764\ufe0f is the \"heart\" symbol rather than the \"love\" symbol. \n    * In other words, you'll have to remember to type \"heart\" to find the desired emoji, and typing \"love\" won't bring up that symbol.\n* We can make a more flexible emoji interface by using word vectors!\n* When using word vectors, you'll see that even if your training set explicitly relates only a few words to a particular emoji, your algorithm will be able to generalize and associate additional words in the test set to the same emoji.\n    * This works even if those additional words don't even appear in the training set. \n    * This allows you to build an accurate classifier mapping from sentences to emojis, even using a small training set. \n\n#### What I have  build\n1. In this exercise, I have started with a baseline model (Emojifier-V1) using word embeddings.\n2. Then I have builded a more sophisticated model (Emojifier-V2) that further incorporates an LSTM. ","2859249d":"## 2 - Emojifier-V2: Using LSTMs in Keras: \n\nLet's build an LSTM model that takes word **sequences** as input!\n* This model will be able to account for the word ordering. \n* Emojifier-V2 will continue to use pre-trained word embeddings to represent words.\n* We will feed word embeddings into an LSTM.\n* The LSTM will learn to predict the most appropriate emoji. \n\nRun the following cell to load the Keras packages.","d5cc9e89":"## Joe Biden test tweet","0373d7a2":"\n## What we should remember from this section\n- Even with a 127 training examples, you can get a reasonably good model for Emojifying. \n    - This is due to the generalization power word vectors gives you. \n- Emojify-V1 will perform poorly on sentences such as *\"This movie is not good and not enjoyable\"* \n    - It doesn't understand combinations of words.\n    - It just averages all the words' embedding vectors together, without considering the ordering of words. \n    \n**You will build a better algorithm in the next section!**","4b5becdd":"### 1.4 - Examining test set performance \n\n* Note that the `predict` function used here is defined in emo_util.spy.","a3b56e8c":"#### Model\n\nI  have all the pieces to finish implementing the `model()` function. \nAfter using `sentence_to_avg()` you need to:\n* Pass the average through forward propagation\n* Compute the cost\n* Backpropagate to update the softmax parameters\n\n**Exercise**: Implement the `model()` function described in Figure (2). \n\n* The equations you need to implement in the forward pass and to compute the cross-entropy cost are below:\n* The variable $Y_{oh}$ (\"Y one hot\") is the one-hot encoding of the output labels. \n\n$$ z^{(i)} = W . avg^{(i)} + b$$\n\n$$ a^{(i)} = softmax(z^{(i)})$$\n\n$$ \\mathcal{L}^{(i)} = - \\sum_{k = 0}^{n_y - 1} Y_{oh,k}^{(i)} * log(a^{(i)}_k)$$\n\n**Note** It is possible to come up with a more efficient vectorized implementation. For now, let's use nested for loops to better understand the algorithm, and for easier debugging.\n\nWe provided the function `softmax()`, which was imported earlier.","9db120e7":"Run the following cell to print sentences from X_train and corresponding labels from Y_train. \n* Change `idx` to see different examples. \n* Note that due to the font used by iPython notebook, the heart emoji may be colored black rather than red.","45e2b998":"I have loaded:\n\n    word_to_index: dictionary mapping from words to their indices in the vocabulary\n        (400,001 words, with the valid indices ranging from 0 to 400,000)\n    index_to_word: dictionary mapping from indices to their corresponding words in the vocabulary\n    word_to_vec_map: dictionary mapping words to their GloVe vector representation.\n\nRun the following cell to check if it works.\n","f022ba7d":"#### The model matches emojis to relevant words\nIn the training set, the algorithm saw the sentence \n>\"*I love you*\" \n\nwith the label \u2764\ufe0f. \n* You can check that the word \"adore\" does not appear in the training set. \n* Nonetheless, lets see what happens if you write \"*I adore you*.\""}}