{"cell_type":{"af705436":"code","d38c3bc2":"code","7b0efc68":"code","19c57f26":"code","13909af7":"code","11b421b2":"code","c11f04fa":"code","8635b8ef":"code","7d4914be":"code","e00a0822":"code","0bac6084":"code","1469ce95":"code","98039283":"code","11bc3dcd":"code","628eaf7d":"code","2bba1b90":"code","cce68883":"code","3f63bf7b":"code","d9f93773":"code","32c62876":"code","5de40e5b":"code","29664e7a":"code","02c6568b":"code","18e1e76e":"code","6a9c9120":"code","574d1f3d":"code","4e08a464":"code","85e456b6":"code","ffc1130a":"code","785e4db4":"code","03ea7a94":"code","16fa556b":"code","f4868afc":"code","41bb9cc2":"code","ef85ef24":"code","b41ba81e":"code","d41544cc":"markdown"},"source":{"af705436":"import math\nimport matplotlib.pyplot as plt\nimport tensorflow.keras as keras\nimport pandas as pd\nimport numpy as np\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dropout\nfrom tensorflow.keras.layers import *\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.optimizers import Adam\nimport tensorflow as tf\nfrom sklearn.utils import shuffle\nfrom tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\nfrom keras.models import model_from_json\n","d38c3bc2":"DATASET_PATH = \"..\/input\/392-crypto-currency-pairs-at-minute-resolution\/btcusd.csv\"","7b0efc68":"sess = tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(log_device_placement=True))","19c57f26":"df=pd.read_csv(DATASET_PATH)\ndata = df['close']","13909af7":"data = data.tolist()","11b421b2":"len(data)","c11f04fa":"data = data[-1500000:]","8635b8ef":"len(data)","7d4914be":"data = np.array(data)","e00a0822":"print(data)","0bac6084":"print(np.min(data), np.max(data))","1469ce95":"def make_data(data,train):\n    X_train = []\n    y_train = []\n    X_val = []\n    y_val = []\n    \n    X_total = []\n    y_total = []\n    \n    X_eql = []\n    X_inc = []\n    X_dec = []\n\n    y_eql = []\n    y_inc = []\n    y_dec = []\n    \n    len_eql = 0\n    len_inc = 0\n    len_dec = 0\n    \n    for i in range(len(data)-401):\n        \n        X = data[i:i+400]\n        mx = np.max(X)\n        X = (X\/mx)*0.9\n        \n        \n        if data[i+400]>data[i+399]:\n            y = [1,0,0]\n            y_inc.append(y)\n            len_inc+=1\n            X_inc.append(X)\n        if data[i+400]==data[i+399]:\n            y = [0,1,0]\n            y_eql.append(y)\n            len_eql+=1\n            X_eql.append(X)\n        if data[i+400]<data[i+399]:\n            y = [0,0,1]\n            y_dec.append(y)\n            len_dec+=1\n            X_dec.append(X)\n        \n    length = min(len_inc,len_eql,len_dec)\n\n    y_total = y_inc[:length] + y_eql[:length] + y_dec[:length]\n    X_total = X_inc[:length] + X_eql[:length] + X_dec[:length]\n\n    len_train = int(len(y_total)*train)\n        \n    X_train = X_total[:len_train]\n    y_train = y_total[:len_train]\n    \n    X_val = X_total[-len_train:]\n    y_val = y_total[-len_train:]\n    \n    X_train = np.array(X_train).reshape(-1,400,1)\n    y_train = np.array(y_train).reshape(-1,3)\n    X_val = np.array(X_val).reshape(-1,400,1)\n    y_val = np.array(y_val).reshape(-1,3)\n\n\n    \n    return X_train, y_train, X_val, y_val\n","98039283":"X_train, y_train, X_val, y_val = make_data(data,0.96)","11bc3dcd":"y_train[0]","628eaf7d":"X_train[0]","2bba1b90":"print(type(y_train[0]))","cce68883":"X_train, y_train = shuffle(X_train, y_train)","3f63bf7b":"y_train[10:20]","d9f93773":"model = Sequential()\nmodel.add(LSTM(128,\n          input_shape=(400, 1)))\nmodel.add(Dense(100,activation='relu'))\nmodel.add(Dense(3,activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","32c62876":"model.summary()","5de40e5b":"# early_stop = EarlyStopping(monitor='val_loss', patience=20)\n\ncheckpoint = ModelCheckpoint(\"model_best.h5\", monitor='val_accuracy', verbose=1, save_best_only=True, mode='auto')","29664e7a":"history = model.fit(X_train, y_train, \n                    epochs=30, \n                    batch_size=50,\n                    validation_data=(X_val,y_val),\n                    callbacks=[checkpoint])","02c6568b":"model_json = model.to_json()\nwith open(\"model_final.json\", \"w\") as json_file : \n    json_file.write(model_json)","18e1e76e":"model.save_weights(\"model_final.h5\")","6a9c9120":"# with open(\".\/model_final.json\", \"r\") as fp:\n#   model_test = model_from_json(fp.read())\n\n# # Load weights to new model\n# model_test.load_weights(\".\/model_final.h5\")","574d1f3d":"# df=pd.read_csv(DATASET_PATH)\n# data_test = df['close']","4e08a464":"# data_test = data_test.tolist()","85e456b6":"# data_test = data_test[800000:1300000]","ffc1130a":"# data_test = np.array(data_test)","785e4db4":"# plt.plot(range(len(data_test)),data_test)\n# # plt.plot(range(len(train_data)),train_data)\n# plt.show()","03ea7a94":"# X_train_test, y_train_test, X_val_test, y_val_test = make_data(data_test,0.95)","16fa556b":"# all = 0\n# counter = 0\n# test = 0\n# for i,y_guess in enumerate(model_test.predict(X_train_test)):\n\n#     if y_train_test[i][0]>X_train_test[i][-1][0]:\n#         all+=1\n#         if y_guess[0]>X_train_test[i][-1][0]:\n#             counter+=1\n    \n#     if y_train_test[i][0]==X_train_test[i][-1][0]:\n#         test+=1\n\n# print(counter\/all)\n# print(test\/all)","f4868afc":"# all = 0\n# counter = 0\n# for i,y_guess in enumerate(model_test.predict(X_train_test)):\n    \n#     if not y_train_test[i][0]==X_train_test[i][-1][0]:\n#         all+=1\n\n#     if y_train_test[i][0]<X_train_test[i][-1][0]:\n#         if y_guess[0]<X_train_test[i][-1][0]:\n#             counter+=1\n#     if y_train_test[i][0]>X_train_test[i][-1][0]:\n#         if y_guess[0]>X_train_test[i][-1][0]:\n#             counter+=1\n\n# print(counter\/all)","41bb9cc2":"# predict = model_test.predict(X_train_test)","ef85ef24":"# a=1\n# for i,y_guess in enumerate(predict):\n#     if y_guess[0]<X_train_test[i][-1][0]:\n#         a *= (y_train_test[i][0]\/X_train_test[i][-1][0])","b41ba81e":"# print(a)","d41544cc":"plt.plot(range(len(data)),data)\n# plt.plot(range(len(train_data)),train_data)\nplt.show()"}}