{"cell_type":{"7f876422":"code","4f26408b":"code","3598b71c":"code","a6eda297":"code","dfc1875e":"code","ede67f66":"code","eb81ba85":"code","ac8796b5":"code","d1e176b7":"code","212d71cf":"code","918dcf67":"code","90f384c2":"code","e9ed6ef2":"code","3039caac":"code","ee46e9b5":"code","92c5475a":"code","8a7a2c09":"code","6a926c05":"code","f5190aa9":"code","3d835622":"code","84490ae9":"code","36e21975":"code","92f1be9b":"code","c1d777c0":"code","b1fade35":"code","7be2d9cd":"code","9fa53d01":"code","8a4ef416":"code","45405bf1":"code","1f3ee691":"code","4ad416c6":"code","7c3880f0":"code","e568356b":"code","4b57f337":"code","0487821c":"code","22567d24":"code","b417d2b5":"code","a6c86478":"code","1ba6d4cd":"code","2bcbee4c":"code","7e4a472b":"code","2cb243ba":"code","de95b05f":"code","c0a5f5ba":"code","d18c0a74":"code","be31833a":"code","c00dba8e":"code","2ea08606":"code","495d52e7":"code","ba64a389":"code","9d26f6d9":"code","77474d88":"code","98595b82":"code","c826e2cd":"code","8d460de6":"code","31bb8831":"code","0ec4990d":"code","72ee9c6d":"code","2639b391":"code","2e8cb473":"code","f0a60763":"markdown","a07ef5b3":"markdown","42be368c":"markdown","2797b058":"markdown","a63ed5c7":"markdown","9c6a033c":"markdown","7ed4498e":"markdown","1cfd305d":"markdown","725d8e78":"markdown","d138eb2c":"markdown","df670b66":"markdown","d73672b4":"markdown","3d3b1cf4":"markdown","5304681d":"markdown","c46950ee":"markdown"},"source":{"7f876422":"\nimport numpy as np \nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport os\nprint(os.listdir(\"..\/input\"))\n","4f26408b":"urldata = pd.read_csv(\"..\/input\/malicious-and-benign-urls\/urldata.csv\")","3598b71c":"urldata.head()","a6eda297":"#Removing the unnamed columns as it is not necesary.\nurldata = urldata.drop('Unnamed: 0',axis=1)","dfc1875e":"urldata.head()","ede67f66":"urldata.shape","eb81ba85":"urldata.info()","ac8796b5":"urldata.isnull().sum()","d1e176b7":"#Importing dependencies\nfrom urllib.parse import urlparse\nimport os.path","212d71cf":"#Length of URL\nurldata['url_length'] = urldata['url'].apply(lambda i: len(str(i)))","918dcf67":"#Hostname Length\nurldata['hostname_length'] = urldata['url'].apply(lambda i: len(urlparse(i).netloc))","90f384c2":"#Path Length\nurldata['path_length'] = urldata['url'].apply(lambda i: len(urlparse(i).path))","e9ed6ef2":"#First Directory Length\ndef fd_length(url):\n    urlpath= urlparse(url).path\n    try:\n        return len(urlpath.split('\/')[1])\n    except:\n        return 0\n\nurldata['fd_length'] = urldata['url'].apply(lambda i: fd_length(i))","3039caac":"urldata.head()","ee46e9b5":"urldata['count-'] = urldata['url'].apply(lambda i: i.count('-'))","92c5475a":"urldata['count@'] = urldata['url'].apply(lambda i: i.count('@'))","8a7a2c09":"urldata['count?'] = urldata['url'].apply(lambda i: i.count('?'))","6a926c05":"urldata['count%'] = urldata['url'].apply(lambda i: i.count('%'))","f5190aa9":"urldata['count.'] = urldata['url'].apply(lambda i: i.count('.'))","3d835622":"urldata['count='] = urldata['url'].apply(lambda i: i.count('='))","84490ae9":"urldata['count-http'] = urldata['url'].apply(lambda i : i.count('http'))","36e21975":"urldata['count-https'] = urldata['url'].apply(lambda i : i.count('https'))","92f1be9b":"urldata['count-www'] = urldata['url'].apply(lambda i: i.count('www'))","c1d777c0":"def digit_count(url):\n    digits = 0\n    for i in url:\n        if i.isnumeric():\n            digits = digits + 1\n    return digits\nurldata['count-digits']= urldata['url'].apply(lambda i: digit_count(i))","b1fade35":"def letter_count(url):\n    letters = 0\n    for i in url:\n        if i.isalpha():\n            letters = letters + 1\n    return letters\nurldata['count-letters']= urldata['url'].apply(lambda i: letter_count(i))","7be2d9cd":"def no_of_dir(url):\n    urldir = urlparse(url).path\n    return urldir.count('\/')\nurldata['count_dir'] = urldata['url'].apply(lambda i: no_of_dir(i))","9fa53d01":"urldata.head()","8a4ef416":"import re","45405bf1":"#Use of IP or not in domain\ndef having_ip_address(url):\n    match = re.search(\n        '(([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.'\n        '([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\\/)|'  # IPv4\n        '((0x[0-9a-fA-F]{1,2})\\\\.(0x[0-9a-fA-F]{1,2})\\\\.(0x[0-9a-fA-F]{1,2})\\\\.(0x[0-9a-fA-F]{1,2})\\\\\/)' # IPv4 in hexadecimal\n        '(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}', url)  # Ipv6\n    if match:\n        # print match.group()\n        return -1\n    else:\n        # print 'No matching pattern found'\n        return 1\nurldata['use_of_ip'] = urldata['url'].apply(lambda i: having_ip_address(i))","1f3ee691":"def shortening_service(url):\n    match = re.search('bit\\.ly|goo\\.gl|shorte\\.st|go2l\\.ink|x\\.co|ow\\.ly|t\\.co|tinyurl|tr\\.im|is\\.gd|cli\\.gs|'\n                      'yfrog\\.com|migre\\.me|ff\\.im|tiny\\.cc|url4\\.eu|twit\\.ac|su\\.pr|twurl\\.nl|snipurl\\.com|'\n                      'short\\.to|BudURL\\.com|ping\\.fm|post\\.ly|Just\\.as|bkite\\.com|snipr\\.com|fic\\.kr|loopt\\.us|'\n                      'doiop\\.com|short\\.ie|kl\\.am|wp\\.me|rubyurl\\.com|om\\.ly|to\\.ly|bit\\.do|t\\.co|lnkd\\.in|'\n                      'db\\.tt|qr\\.ae|adf\\.ly|goo\\.gl|bitly\\.com|cur\\.lv|tinyurl\\.com|ow\\.ly|bit\\.ly|ity\\.im|'\n                      'q\\.gs|is\\.gd|po\\.st|bc\\.vc|twitthis\\.com|u\\.to|j\\.mp|buzurl\\.com|cutt\\.us|u\\.bb|yourls\\.org|'\n                      'x\\.co|prettylinkpro\\.com|scrnch\\.me|filoops\\.info|vzturl\\.com|qr\\.net|1url\\.com|tweez\\.me|v\\.gd|'\n                      'tr\\.im|link\\.zip\\.net',\n                      url)\n    if match:\n        return -1\n    else:\n        return 1\nurldata['short_url'] = urldata['url'].apply(lambda i: shortening_service(i))","4ad416c6":"urldata.head()","7c3880f0":"#Heatmap\ncorrmat = urldata.corr()\nf, ax = plt.subplots(figsize=(25,19))\nsns.heatmap(corrmat, square=True, annot = True, annot_kws={'size':10})","e568356b":"plt.figure(figsize=(15,5))\nsns.countplot(x='label',data=urldata)\nplt.title(\"Count Of URLs\",fontsize=20)\nplt.xlabel(\"Type Of URLs\",fontsize=18)\nplt.ylabel(\"Number Of URLs\",fontsize=18)","4b57f337":"print(\"Percent Of Malicious URLs:{:.2f} %\".format(len(urldata[urldata['label']=='malicious'])\/len(urldata['label'])*100))\nprint(\"Percent Of Benign URLs:{:.2f} %\".format(len(urldata[urldata['label']=='benign'])\/len(urldata['label'])*100))","0487821c":"plt.figure(figsize=(20,5))\nplt.hist(urldata['url_length'],bins=50,color='LightBlue')\nplt.title(\"URL-Length\",fontsize=20)\nplt.xlabel(\"Url-Length\",fontsize=18)\nplt.ylabel(\"Number Of Urls\",fontsize=18)\nplt.ylim(0,1000)\n","22567d24":"plt.figure(figsize=(20,5))\nplt.hist(urldata['hostname_length'],bins=50,color='Lightgreen')\nplt.title(\"Hostname-Length\",fontsize=20)\nplt.xlabel(\"Length Of Hostname\",fontsize=18)\nplt.ylabel(\"Number Of Urls\",fontsize=18)\nplt.ylim(0,1000)","b417d2b5":"plt.figure(figsize=(15,5))\nplt.title(\"Number Of Directories In Url\",fontsize=20)\nsns.countplot(x='count_dir',data=urldata)\nplt.xlabel(\"Number Of Directories\",fontsize=18)\nplt.ylabel(\"Number Of URLs\",fontsize=18)","a6c86478":"plt.figure(figsize=(15,5))\nplt.title(\"Number Of Directories In Url\",fontsize=20)\nsns.countplot(x='count_dir',data=urldata,hue='label')\nplt.xlabel(\"Number Of Directories\",fontsize=18)\nplt.ylabel(\"Number Of URLs\",fontsize=18)","1ba6d4cd":"plt.figure(figsize=(15,5))\nplt.title(\"Use Of IP In Url\",fontsize=20)\nplt.xlabel(\"Use Of IP\",fontsize=18)\n\nsns.countplot(urldata['use_of_ip'])\nplt.ylabel(\"Number of URLs\",fontsize=18)","2bcbee4c":"plt.figure(figsize=(15,5))\nplt.title(\"Use Of IP In Url\",fontsize=20)\nplt.xlabel(\"Use Of IP\",fontsize=18)\nplt.ylabel(\"Number of URLs\",fontsize=18)\nsns.countplot(urldata['use_of_ip'],hue='label',data=urldata)\nplt.ylabel(\"Number of URLs\",fontsize=18)","7e4a472b":"plt.figure(figsize=(15,5))\nplt.title(\"Use Of http In Url\",fontsize=20)\nplt.xlabel(\"Use Of IP\",fontsize=18)\nplt.ylim((0,1000))\nsns.countplot(urldata['count-http'])\nplt.ylabel(\"Number of URLs\",fontsize=18)","2cb243ba":"plt.figure(figsize=(15,5))\nplt.title(\"Use Of http In Url\",fontsize=20)\nplt.xlabel(\"Count Of http\",fontsize=18)\nplt.ylabel(\"Number of URLs\",fontsize=18)\nplt.ylim((0,1000))\nsns.countplot(urldata['count-http'],hue='label',data=urldata)\nplt.ylabel(\"Number of URLs\",fontsize=18)","de95b05f":"plt.figure(figsize=(15,5))\nplt.title(\"Use Of http In Url\",fontsize=20)\nplt.xlabel(\"Count Of http\",fontsize=18)\n\nsns.countplot(urldata['count-http'],hue='label',data=urldata)\n\nplt.ylabel(\"Number of URLs\",fontsize=18)","c0a5f5ba":"plt.figure(figsize=(15,5))\nplt.title(\"Use Of WWW In URL\",fontsize=20)\nplt.xlabel(\"Count Of WWW\",fontsize=18)\nsns.countplot(urldata['count-www'])\nplt.ylim(0,1000)\nplt.ylabel(\"Number Of URLs\",fontsize=18)","d18c0a74":"plt.figure(figsize=(15,5))\nplt.title(\"Use Of WWW In URL\",fontsize=20)\nplt.xlabel(\"Count Of WWW\",fontsize=18)\n\nsns.countplot(urldata['count-www'],hue='label',data=urldata)\nplt.ylim(0,1000)\nplt.ylabel(\"Number Of URLs\",fontsize=18)","be31833a":"#from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.metrics import confusion_matrix,classification_report,accuracy_score\n\n\n","c00dba8e":"#Independent Variables\nx = urldata[['hostname_length',\n       'path_length', 'fd_length', 'count-', 'count@', 'count?',\n       'count%', 'count.', 'count=', 'count-http','count-https', 'count-www', 'count-digits',\n       'count-letters', 'count_dir', 'use_of_ip']]\n\n#Dependent Variable\ny = urldata['result']","2ea08606":"#Oversampling using SMOTE\nfrom imblearn.over_sampling import SMOTE\n\nx_sample, y_sample = SMOTE().fit_sample(x, y.values.ravel())\n\nx_sample = pd.DataFrame(x_sample)\ny_sample = pd.DataFrame(y_sample)\n\n# checking the sizes of the sample data\nprint(\"Size of x-sample :\", x_sample.shape)\nprint(\"Size of y-sample :\", y_sample.shape)","495d52e7":"#Train test split\nfrom sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x_sample, y_sample, test_size = 0.2)\nprint(\"Shape of x_train: \", x_train.shape)\nprint(\"Shape of x_valid: \", x_test.shape)\nprint(\"Shape of y_train: \", y_train.shape)\nprint(\"Shape of y_valid: \", y_test.shape)","ba64a389":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.callbacks import ModelCheckpoint\nimport keras\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv1D, MaxPooling1D, Flatten, Dropout, BatchNormalization ,Activation\nfrom keras.utils import np_utils, to_categorical\nfrom keras.callbacks import ModelCheckpoint","9d26f6d9":"x_train.shape","77474d88":"model = Sequential()\nmodel.add(Dense(32, activation = 'relu', input_shape = (16, )))\n\nmodel.add(Dense(16, activation='relu'))\n\nmodel.add(Dense(8, activation='relu')) \n\nmodel.add(Dense(1, activation='sigmoid')) \nmodel.summary()","98595b82":"opt = keras.optimizers.Adam(lr=0.0001)\nmodel.compile(optimizer= opt ,loss='binary_crossentropy',metrics=['acc'])","c826e2cd":"checkpointer = ModelCheckpoint('url.h5', monitor='val_acc', mode='max', verbose=2, save_best_only=True)\nhistory=model.fit(x_train, y_train, batch_size=256, epochs=5, validation_data=(x_test, y_test), callbacks=[checkpointer])","8d460de6":"# plot the training artifacts\nplt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train_acc','val_acc'], loc = 'upper right')\nplt.show()","31bb8831":"# plot the training artifacts\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train_loss','val_loss'], loc = 'upper right')\nplt.show()","0ec4990d":"# predicting on test data.\npred_test = model.predict(x_test)\nfor i in range (len(pred_test)):\n    if (pred_test[i] < 0.5):\n        pred_test[i] = 0\n    else:\n        pred_test[i] = 1\npred_test = pred_test.astype(int)","72ee9c6d":"def view_result(array):\n    array = np.array(array)\n    for i in range(len(array)):\n        if array[i] == 0:\n            print(\"Non Mallicious\")\n        else:\n            print(\"Mallicious\")","2639b391":"view_result(pred_test[:10])","2e8cb473":"view_result(y_test[:10])","f0a60763":"### 1.1 Length Features","a07ef5b3":"# Malicious URL detection using MLP<br>\n","42be368c":"### 1.3 Binary Features","2797b058":"The following features will be extracted from the URL for classification. <br>\n<ol>\n    <li>Length Features\n    <ul>\n        <li>Length Of Url<\/li>\n        <li>Length of Hostname<\/li>\n        <li>Length Of Path<\/li>\n        <li>Length Of First Directory<\/li>\n        <li>Length Of Top Level Domain<\/li>\n    <\/ul>\n    <\/li>\n    <br>\n   <li>Count Features\n    <ul>\n    <li>Count Of  '-'<\/li>\n    <li>Count Of '@'<\/li>\n    <li>Count Of '?'<\/li>\n    <li>Count Of '%'<\/li>\n    <li>Count Of '.'<\/li>\n    <li>Count Of '='<\/li>\n    <li>Count Of 'http'<\/li>\n    <li>Count Of 'www'<\/li>\n    <li>Count Of Digits<\/li>\n    <li>Count Of Letters<\/li>\n    <li>Count Of Number Of Directories<\/li>\n    <\/ul>\n    <\/li>\n    <br>\n    <li>Binary Features\n    <ul>\n        <li>Use of IP or not<\/li>\n        <li>Use of Shortening URL or not<\/li>\n    <\/ul>\n    <\/li>\n    \n<\/ol>\n\n","a63ed5c7":"# 1. DATA PREPROCESSING","9c6a033c":"### 1.2 Count Features","7ed4498e":"# 3. Building Models Using Lexical Features Only","1cfd305d":"Checking Missing Values","725d8e78":"Data after extracting Count Features","d138eb2c":"Data after extracting Binary Features","df670b66":"\n<br>1. Logistic Regression\n<br>2. XGBoost Classifier\n<br>3. Random Forest","d73672b4":"Dataset after extracting length features","3d3b1cf4":"## 3.1 Train test split","5304681d":"# 2. Data Visualization","c46950ee":"The data shows a class imbalance to some extent."}}