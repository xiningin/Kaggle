{"cell_type":{"58edf291":"code","67179c5d":"code","c4c787c1":"code","a59052b3":"code","bcb7b973":"code","2996018c":"code","69ab7189":"code","f0553641":"code","25d9f121":"code","414e744a":"code","61031456":"code","e285f0c1":"code","1f46a57c":"code","abf1a566":"code","943a7ed0":"code","11d8f2aa":"code","c1f41407":"code","ed9b248d":"code","8a7b2a9e":"code","4421dd8b":"code","baf871c2":"code","5fdf56de":"code","c2938295":"code","ee82055b":"code","c6fd4fa0":"code","47f608f0":"code","a7f0f161":"code","c4860a70":"code","1a300818":"code","7e5761ee":"code","d2a0593b":"code","8a19cc04":"code","8b547688":"code","bff289a9":"code","870559fa":"code","c6196a0a":"code","236c956c":"code","e3266770":"code","a6f550c9":"code","d66fcb28":"code","8d2ea3f4":"code","38e69a42":"code","cf8deec0":"code","69e46c60":"code","412e6a32":"code","6925a1af":"code","cf9c3171":"code","c7719653":"code","b8fb8a91":"code","21278598":"code","ca63f755":"code","3d76268c":"code","db234400":"code","93a9fcd1":"code","80884775":"code","e89582ff":"code","76ae565f":"markdown","adda2695":"markdown","3e20a1f6":"markdown","e28e87c3":"markdown","ef3fbb95":"markdown","45bdc2ed":"markdown","efc02bc2":"markdown","a45d2847":"markdown","c0a79cea":"markdown","ba44b21a":"markdown","1070eac9":"markdown","3f46466d":"markdown"},"source":{"58edf291":"# Importing libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","67179c5d":"# Loading Data\nproducts_df = pd.read_csv(\"..\/input\/summer-products-and-sales-in-ecommerce-wish\/summer-products-with-rating-and-performance_2020-08.csv\")\nproducts_df.head()","c4c787c1":"products_df.info()","a59052b3":"# To check Null Value Count\nproducts_df.isnull().any().to_frame()","bcb7b973":"# Replacing Null Values\nproducts_df['rating_five_count'] = products_df['rating_five_count'].replace(np.nan, 0)\nproducts_df['rating_four_count'] = products_df['rating_four_count'].replace(np.nan, 0)\nproducts_df['rating_three_count'] = products_df['rating_three_count'].replace(np.nan, 0)\nproducts_df['rating_two_count'] = products_df['rating_two_count'].replace(np.nan, 0)\nproducts_df['rating_one_count'] = products_df['rating_one_count'].replace(np.nan, 0)","2996018c":"products_df['product_color'].value_counts().iloc[:60].to_frame()","69ab7189":"# Replacing Null and duplicates\nproducts_df['product_color'] = products_df['product_color'].replace('White', 'white')\nproducts_df['product_color'] = products_df['product_color'].replace('Black', 'black')\nproducts_df['product_color'] = products_df['product_color'].replace('coolblack', 'black')\n\nproducts_df['product_color'] = products_df['product_color'].replace('navyblue', 'blue')\nproducts_df['product_color'] = products_df['product_color'].replace('lightblue', 'blue')\nproducts_df['product_color'] = products_df['product_color'].replace('skyblue', 'blue')\nproducts_df['product_color'] = products_df['product_color'].replace('darkblue', 'blue')\nproducts_df['product_color'] = products_df['product_color'].replace('navy', 'blue')\nproducts_df['product_color'] = products_df['product_color'].replace('lakeblue', 'blue')\nproducts_df['product_color'] = products_df['product_color'].replace('purple', 'blue')\nproducts_df['product_color'] = products_df['product_color'].replace('navy blue', 'blue')\n\nproducts_df['product_color'] = products_df['product_color'].replace('winered', 'red')\nproducts_df['product_color'] = products_df['product_color'].replace('rosered', 'red')\nproducts_df['product_color'] = products_df['product_color'].replace('rose', 'red')\nproducts_df['product_color'] = products_df['product_color'].replace('orange-red', 'red')\nproducts_df['product_color'] = products_df['product_color'].replace('burgundy', 'red')\nproducts_df['product_color'] = products_df['product_color'].replace('lightred', 'red')\nproducts_df['product_color'] = products_df['product_color'].replace('coralred', 'red')\nproducts_df['product_color'] = products_df['product_color'].replace('wine', 'red')\nproducts_df['product_color'] = products_df['product_color'].replace('watermelonred', 'red')\n\nproducts_df['product_color'] = products_df['product_color'].replace('lightpink', 'pink')\nproducts_df['product_color'] = products_df['product_color'].replace('beige', 'pink')\nproducts_df['product_color'] = products_df['product_color'].replace('camel', 'pink')\nproducts_df['product_color'] = products_df['product_color'].replace('apricot', 'pink')\nproducts_df['product_color'] = products_df['product_color'].replace('Pink', 'pink')\nproducts_df['product_color'] = products_df['product_color'].replace('dustypink', 'pink')\n\nproducts_df['product_color'] = products_df['product_color'].replace('armygreen', 'green')\nproducts_df['product_color'] = products_df['product_color'].replace('army green', 'green')\nproducts_df['product_color'] = products_df['product_color'].replace('Army green', 'green')\nproducts_df['product_color'] = products_df['product_color'].replace('lightgreen', 'green')\nproducts_df['product_color'] = products_df['product_color'].replace('fluorescentgreen', 'green')\nproducts_df['product_color'] = products_df['product_color'].replace('mintgreen', 'green')\nproducts_df['product_color'] = products_df['product_color'].replace('khaki', 'green')\nproducts_df['product_color'] = products_df['product_color'].replace('applegreen', 'green')\n\nproducts_df['product_color'] = products_df['product_color'].replace('gray', 'grey')\nproducts_df['product_color'] = products_df['product_color'].replace('silver', 'grey')\nproducts_df['product_color'] = products_df['product_color'].replace('lightgray', 'grey')\nproducts_df['product_color'] = products_df['product_color'].replace('lightgrey', 'grey')\n\nproducts_df['product_color'] = products_df['product_color'].replace('lightyellow', 'yellow')\n\nproducts_df['product_color'] = products_df['product_color'].replace('coffee', 'brown')\n\nproducts_df['product_color'] = products_df['product_color'].replace('white & green', 'dual')\nproducts_df['product_color'] = products_df['product_color'].replace('black & green', 'dual')\nproducts_df['product_color'] = products_df['product_color'].replace('black & white', 'dual')\nproducts_df['product_color'] = products_df['product_color'].replace('pink & grey', 'dual')\nproducts_df['product_color'] = products_df['product_color'].replace('pink & white', 'dual')\nproducts_df['product_color'] = products_df['product_color'].replace('black & blue', 'dual')\nproducts_df['product_color'] = products_df['product_color'].replace('white & black', 'dual')\nproducts_df['product_color'] = products_df['product_color'].replace('black & yellow', 'dual')\nproducts_df['product_color'] = products_df['product_color'].replace('pink & blue', 'dual')\nproducts_df['product_color'] = products_df['product_color'].replace('pink & black', 'dual')\nproducts_df['product_color'] = products_df['product_color'].replace('blackwhite', 'dual')\n\nproducts_df['product_color'] = products_df['product_color'].replace('multicolor', 'other')\nproducts_df['product_color'] = products_df['product_color'].replace('floral', 'other')\nproducts_df['product_color'] = products_df['product_color'].replace('whitefloral', 'other')\nproducts_df['product_color'] = products_df['product_color'].replace('leopard', 'other')\nproducts_df['product_color'] = products_df['product_color'].replace('camouflage', 'other')\nproducts_df['product_color'] = products_df['product_color'].replace('rainbow', 'other')\nproducts_df['product_color'] = products_df['product_color'].replace(np.nan, 'other')","f0553641":"# Visualizing Product Color Count\nplt.figure(figsize=(10,5))\nsns.countplot('product_color', data = products_df, order = products_df['product_color'].value_counts().iloc[:12].index)\nplt.xlabel('Colors')\nplt.ylabel('Count')\nplt.title('Product Color Count')\nplt.xticks(rotation=45)\nplt.show()","25d9f121":"products_df.isnull().any().to_frame()","414e744a":"pr_cl = products_df['product_variation_size_id'].value_counts()\npr_cl[pr_cl >1].to_frame()","61031456":"# Replacing duplicates\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('S.', 'S')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('Size S', 'S')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('Size S.', 'S')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('s', 'S')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('Size-S', 'S')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('size S', 'S')\n\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('XS.', 'XS')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('Size-XS', 'XS')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('SIZE XS', 'XS')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('Size -XXS', 'XXS')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('SIZE-XXS', 'XXS')\n\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('M.', 'M')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('Size M', 'M')\n\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('Size4XL', 'XL')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('SizeL', 'L')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('5XL', 'XXXXXL')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('4XL', 'XXXXL')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('3XL', 'XXXL')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace('2XL', 'XXL')\n","e285f0c1":"pr_cl = products_df['product_variation_size_id'].value_counts()\npr_cl[pr_cl >1].to_frame()","1f46a57c":"def df_SId(name):\n    if name == 'S' \\\n    or name == 'XS' \\\n    or name == 'XXS' \\\n    or name == 'XXXS' \\\n    or name == 'M' \\\n    or name == 'L' \\\n    or name == 'XL' \\\n    or name == 'XXL' \\\n    or name == 'XXXL' \\\n    or name == 'XXXXL' \\\n    or name == 'XXXXXL' :\n        return name\n    else:\n        return 'OTHER'\n\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].replace(np.nan,'OTHER')\nproducts_df['product_variation_size_id'] = products_df['product_variation_size_id'].apply(df_SId)\n    ","abf1a566":"products_df['product_variation_size_id'].value_counts().to_frame()","943a7ed0":"# Visualizing Product Color Count\nfig, ax = plt.subplots(figsize=(10,5))\nsns.countplot('product_variation_size_id', data = products_df, order = products_df['product_variation_size_id'].value_counts().index, ax = ax)\nax.set(xlabel='Size', ylabel='Count')\nplt.show()","11d8f2aa":"products_df.isnull().any().to_frame()","c1f41407":"# Replacing Null Values\nproducts_df['has_urgency_banner'] = products_df['has_urgency_banner'].replace(np.nan,0)","ed9b248d":"products_df = products_df.drop(['urgency_text'], axis=1)","8a7b2a9e":"fig, ax = plt.subplots(figsize=(10,5))\n\nsns.countplot('has_urgency_banner', data = products_df, ax=ax)\nax.set(xlabel='Urgency Banner', ylabel='Count')\nplt.show()","4421dd8b":"products_df.isnull().any().to_frame()","baf871c2":"products_df['origin_country'].value_counts().to_frame()","5fdf56de":"# Replacing by frequency\n\nproducts_df['origin_country'] = products_df['origin_country'].replace(np.nan, 'CN')","c2938295":"fig, ax = plt.subplots(figsize=(10,5))\n\nsns.countplot('origin_country', data = products_df, ax=ax)\nax.set(xlabel='Country', ylabel='Count')\nplt.show()","ee82055b":"products_df.isnull().any().to_frame()","c6fd4fa0":"products_df['merchant_profile_picture'].describe().to_frame()","47f608f0":"products_df['merchant_name'] = products_df['merchant_name'].replace(np.nan, 'no name')\nproducts_df['merchant_info_subtitle'] = products_df['merchant_info_subtitle'].replace(np.nan, 'no info')\nproducts_df['merchant_profile_picture'] = products_df['merchant_profile_picture'].replace(np.nan, 'no profile picture')","a7f0f161":"products_df.isnull().any().to_frame()","c4860a70":"df_keywords = pd.read_csv(\"..\/input\/summer-products-and-sales-in-ecommerce-wish\/unique-categories.sorted-by-count.csv\")\n\nfig, ax = plt.subplots(figsize=(10, 5))\nsns.barplot(x = 'keyword', y = 'count', data = df_keywords.iloc[:20], ax = ax)\nax.set(xlabel='Keyword', ylabel='Count')\n\nplt.xticks(rotation=45, ha='right')\nplt.show()","1a300818":"top_tags = df_keywords.iloc[:10]['keyword'].tolist()\n\ndef tag_pop(tags):\n    lst_tags = tags.split(',')\n    common_elements = np.intersect1d(top_tags, lst_tags)\n    return len(common_elements) \/ len(top_tags)\n    \nproducts_df['tag_popularity'] = products_df['tags'].apply(tag_pop)","7e5761ee":"# As most of the customers are from CN so converting the price into CNY\n\nproducts_df['price'] = products_df['price'] *7.97\nproducts_df['retail_price'] = products_df['retail_price'] *7.97\nproducts_df['currency_buyer'] = products_df['currency_buyer'].replace('EUR', 'CNY')","d2a0593b":"products_df['price_discount'] = products_df['retail_price'] - products_df['price']","8a19cc04":"def add_tags(tags):\n    lst_tag = tags.split(',')\n    return len(lst_tag)\nproducts_df['tags_count'] = products_df['tags'].apply(add_tags)","8b547688":"products_df[['rating','rating_one_count','rating_two_count','rating_three_count','rating_four_count','rating_five_count','rating_count']].head(10)","bff289a9":"# Data Normalization of ratings\ndef ratings_nor(rate, counts) :\n    if rate == 0:\n        return 0\n    else :\n        return rate\/counts\nproducts_df['rating_one_count'] = products_df.apply(lambda x: ratings_nor(x.rating_one_count, x.rating_count), axis=1)\nproducts_df['rating_two_count'] = products_df.apply(lambda x: ratings_nor(x.rating_two_count, x.rating_count), axis=1)\nproducts_df['rating_three_count'] = products_df.apply(lambda x: ratings_nor(x.rating_three_count, x.rating_count), axis=1)\nproducts_df['rating_four_count'] = products_df.apply(lambda x: ratings_nor(x.rating_four_count, x.rating_count), axis=1)\nproducts_df['rating_five_count'] = products_df.apply(lambda x: ratings_nor(x.rating_five_count, x.rating_count), axis=1)","870559fa":"products_df[['rating_count','merchant_rating_count']].head(10)","c6196a0a":"def merchant_ratings_nor(c_rating,m_rating):\n    if c_rating == 0:\n        return 0\n    else:\n        return c_rating\/m_rating\nproducts_df['merchant_rating_count'] = products_df.apply(lambda x: merchant_ratings_nor(x.rating_count, x.merchant_rating_count), axis=1)","236c956c":"def dis(d_price, r_price):\n    if d_price==0:\n        return 0\n    else:\n        return d_price\/r_price\nproducts_df['price_discount'] = products_df.apply(lambda x: dis(x.price_discount, x.retail_price),axis=1)","e3266770":"# Correlation Heat Map\nfig, ax = plt.subplots(figsize=(25,25))\n\nsns.heatmap(products_df.corr(), annot=True, ax=ax)\nax.add_patch(plt.Rectangle((0,2),31,1, fill = False, edgecolor = 'blue', lw = 3))\n\nplt.xticks(rotation=45, ha='right')\nplt.yticks(rotation=45, ha='right')\nplt.show()","a6f550c9":"# Creating a pivot table for product color and origin country\ndf_group_c = products_df[['product_color','origin_country','units_sold']]\n\ndf_group_c = df_group_c.groupby(['origin_country','product_color'],as_index=False).mean()\n\ngrouped_pivot_c = df_group_c.pivot(index='origin_country',columns='product_color')\ngrouped_pivot_c","d66fcb28":"# Fill the NaN values with 0\ngrouped_pivot_c = grouped_pivot_c.fillna(0)\ngrouped_pivot_c","8d2ea3f4":"# Visualizing the pivot table\nfig, ax = plt.subplots(figsize=(15,5))\nim = ax.pcolor(grouped_pivot_c, cmap='RdBu')\n\n#label names\nrow_labels = grouped_pivot_c.columns.levels[1]\ncol_labels = grouped_pivot_c.index\n\n#move ticks and labels to the center\nax.set_xticks(np.arange(grouped_pivot_c.shape[1]) + 0.5, minor=False)\nax.set_yticks(np.arange(grouped_pivot_c.shape[0]) + 0.5, minor=False)\n\n#insert labels\nax.set_xticklabels(row_labels, minor=False)\nax.set_yticklabels(col_labels, minor=False)\n\n#rotate label if too long\nplt.xticks(rotation=90)\n\nfig.colorbar(im)\nplt.show()","38e69a42":"df_group_s = products_df[['product_variation_size_id','origin_country','units_sold']]\n\ndf_group_s = df_group_s.groupby(['origin_country','product_variation_size_id'],as_index=False).mean()\n\ngrouped_pivot_s = df_group_s.pivot(index='origin_country',columns='product_variation_size_id')\ngrouped_pivot_s","cf8deec0":"# Fill the NaN values with 0\ngrouped_pivot_s = grouped_pivot_s.fillna(0)\ngrouped_pivot_s","69e46c60":"# Visualizing the pivot table\nfig, ax = plt.subplots(figsize=(10,5))\nim = ax.pcolor(grouped_pivot_s, cmap='RdBu')\n\n#label names\nrow_labels = grouped_pivot_s.columns.levels[1]\ncol_labels = grouped_pivot_s.index\n\n#move ticks and labels to the center\nax.set_xticks(np.arange(grouped_pivot_s.shape[1]) + 0.5, minor=False)\nax.set_yticks(np.arange(grouped_pivot_s.shape[0]) + 0.5, minor=False)\n\n#insert labels\nax.set_xticklabels(row_labels, minor=False)\nax.set_yticklabels(col_labels, minor=False)\n\n#rotate label if too long\nplt.xticks(rotation=90)\n\nfig.colorbar(im)\nplt.show()","412e6a32":"products_df = products_df.drop(['currency_buyer','title','title_orig','tags','shipping_option_name'], axis=1)\nproducts_df = products_df.drop(['merchant_title','merchant_name', 'merchant_info_subtitle', 'merchant_id', 'merchant_profile_picture'], axis = 1)\nproducts_df = products_df.drop(['product_url','product_picture','product_id','crawl_month','theme'], axis=1)\n","6925a1af":"color_dummy = pd.get_dummies(products_df['product_color'])\nproducts_df = pd.concat([products_df, color_dummy], axis=1)\n\nproducts_df.drop(\"product_color\", axis = 1, inplace=True)\nproducts_df.head()","cf9c3171":"size_dummy = pd.get_dummies(products_df['product_variation_size_id'])\nproducts_df = pd.concat([products_df, size_dummy], axis=1)\n\nproducts_df.drop(\"product_variation_size_id\", axis = 1, inplace=True)\nproducts_df.head()","c7719653":"country_dummy = pd.get_dummies(products_df['origin_country'])\nproducts_df = pd.concat([products_df, country_dummy], axis=1)\n\nproducts_df.drop(\"origin_country\", axis = 1, inplace=True)\nproducts_df.head()","b8fb8a91":"from sklearn.model_selection import train_test_split\n\nX = products_df.loc[:,products_df.columns !='units_sold']\ny = products_df['units_sold']\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state=66)","21278598":"from sklearn.neighbors import KNeighborsClassifier\n\ntraining_accuracy = []\ntest_accuracy = []\n# try n_neighbors from 1 to 10\nneighbors_settings = range(1,11)\n\nfor n_neighbors in neighbors_settings:\n    # build the model\n    knn = KNeighborsClassifier(n_neighbors=n_neighbors)\n    knn.fit(X_train, y_train)\n    # record training set accuracy\n    training_accuracy.append(knn.score(X_train, y_train))\n    # record test set accuracy\n    test_accuracy.append(knn.score(X_test, y_test))\n\nplt.plot(neighbors_settings, training_accuracy, label=\"training accuracy\")\nplt.plot(neighbors_settings, test_accuracy, label=\"test accuracy\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"K\")\nplt.legend()","ca63f755":"# Applying KNN with probably the best value of K\nknn = KNeighborsClassifier(n_neighbors=9).fit(X_train, y_train)\n\nprint('Accuracy on training set {:.3f} '.format(knn.score(X_train,y_train)))\nprint('Accuracy on testing set {:.3f} '.format(knn.score(X_test,y_test)))","3d76268c":"from sklearn.tree import DecisionTreeClassifier\n\ntree = DecisionTreeClassifier(random_state=0)\ntree.fit(X_train,y_train)\n\nprint('Accuracy on training set {:.3f} '.format(tree.score(X_train,y_train)))\nprint('Accuracy on testing set {:.3f} '.format(tree.score(X_test,y_test)))","db234400":"tree = DecisionTreeClassifier(max_depth=5, random_state=0)\ntree.fit(X_train, y_train)\n\nprint(\"Accuracy on training set: {:.3f}\".format(tree.score(X_train, y_train)))\nprint(\"Accuracy on test set: {:.3f}\".format(tree.score(X_test, y_test)))","93a9fcd1":"from sklearn import svm\n\nfor kernel in ('linear', 'poly', 'rbf'):\n    SVM = svm.SVC(kernel=kernel)\n    SVM.fit(X_train, y_train)\n    print(\"Accuracy on training set for \",kernel,\" kernel : {:.3f}\".format(SVM.score(X_train, y_train)))\n    print(\"Accuracy on test set for \",kernel,\" kernel : {:.3f}\".format(SVM.score(X_test, y_test)))\n    print(\"\\n\")","80884775":"# Choosing the best kernel for model accuracy\nSVM = svm.SVC(kernel='linear')\nSVM.fit(X_train, y_train)","e89582ff":"from sklearn.metrics import accuracy_score\n\n# Accuracy Score of KNN\ny_knn = knn.predict(X_test)\nacc_knn = accuracy_score(y_test,y_knn)\n\n# Accuracy Score of Decision Tree\ny_tree = tree.predict(X_test)\nacc_tree = accuracy_score(y_test,y_tree)\n\n# Accuracy Score of SVM\ny_svm = SVM.predict(X_test)\nacc_svm = accuracy_score(y_test,y_svm)\n\n# Visualizing for better comparison\nAccuracies = [acc_tree,acc_knn,acc_svm]\nypos = np.arange(len(Accuracies))\nfig, ax = plt.subplots(figsize=(5,5))\nplt.xticks(ypos,['Desicion','KNN','SVM'])\nplt.xlabel('Models')\nplt.ylabel('Accuracies')\nplt.title('Model Accuracies')\nax.bar(ypos,Accuracies, width=0.5)\nplt.show()\n","76ae565f":"The training accuracy of 100% indicates that the tree is overfitting and not generalizing well to new data.","adda2695":"**How to deal with missing data?**\n\n1. drop data\n\n    *(a)* drop the whole row\n    *(b)* drop the whole column\n    \n2. replace data\n\n    *(a)* replace it by mean\n    *(b)* replace it by frequency\n    *(c)* replace it based on other functions","3e20a1f6":"# Data Normalization","e28e87c3":"A special thanks to [Mudith Silva](https:\/\/www.kaggle.com\/mudithsilva) his notebook helped me a lot","ef3fbb95":"**Dropping features with no or very low correlation**","45bdc2ed":"# Data Standardization","efc02bc2":"# K-Nearest Neighbor is the best model to predict sales here","a45d2847":"# Decision Tree","c0a79cea":"Converting categorical features for using in predictive modeling","ba44b21a":"**To understand the correlation for Categorical Variables**","1070eac9":"# K-Nearest Neighbor","3f46466d":"# Support Vector Machines"}}