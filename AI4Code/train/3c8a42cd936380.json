{"cell_type":{"201a1a19":"code","4b17031a":"code","90afe173":"code","e804493d":"code","8d99319f":"code","668a804d":"code","f3368eb4":"code","337c6564":"code","0a51b4ce":"code","4fb19194":"code","0dd5d044":"code","bfc6bcce":"code","e5f4047b":"code","4a8ff744":"code","be64e9bc":"code","855a410b":"code","b91e659f":"code","4f629f7d":"code","7ac0d657":"code","222f9058":"code","035e67d1":"code","276dff15":"code","763abac3":"code","f8a0c934":"code","890f05d4":"code","73d7278c":"code","dff5e81c":"code","3441de55":"code","a84305e8":"code","e1620bcc":"code","59881e31":"code","e7b5b8a4":"code","04a58b9f":"markdown","deff6df7":"markdown","e440f39b":"markdown","84680d24":"markdown","be170159":"markdown","5fa62d85":"markdown","3d03a140":"markdown","ec7b31c9":"markdown","9f56d23c":"markdown","2cfabce7":"markdown","0e3ee8eb":"markdown","15d78556":"markdown","2a1d4501":"markdown","4560c9e0":"markdown","06475f65":"markdown","b4808b36":"markdown","454c38a3":"markdown","fae8700f":"markdown","966f6cae":"markdown","63a5f3ee":"markdown","03ec3ba6":"markdown"},"source":{"201a1a19":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics.pairwise import cosine_similarity\n%matplotlib inline","4b17031a":"df = pd.read_csv(\"..\/input\/anime.csv\")\ndf.head()","90afe173":"df.shape","e804493d":"df.isnull().sum()","8d99319f":"df.loc[df['rating'].isnull(), 'rating'] = 0.0\ndf['rating'].isnull().any()","668a804d":"df['type'].value_counts().plot.bar()","f3368eb4":"df.loc[(df['episodes']==\"Unknown\") & (df['type'].isnull())].head()","337c6564":"missing = df.loc[(df['episodes']==\"Unknown\") & (df['type'].isnull())].copy()\nmissing.shape","0a51b4ce":"missing.head(25)","4fb19194":"df.loc[(df['name'] == \"Steins;Gate 0\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Steins;Gate 0\"), 'episodes'] = '23'\ndf.loc[(df['name'] == \"Violet Evergarden\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Violet Evergarden\"), 'episodes'] = '13'\ndf.loc[(df['name'] == \"Code Geass: Fukkatsu no Lelouch\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Code Geass: Fukkatsu no Lelouch\"), 'episodes'] = '25'\ndf.loc[(df['name'] == \"K: Seven Stories\"), 'type'] = 'Movie'\ndf.loc[(df['name'] == \"K: Seven Stories\"), 'episodes'] = '6'\ndf.loc[(df['name'] == \"Free! (Shinsaku)\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Free! (Shinsaku)\"), 'episodes'] = '12'\ndf.loc[(df['name'] == \"Busou Shoujo Machiavellianism\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Busou Shoujo Machiavellianism\"), 'episodes'] = '12'\ndf.loc[(df['name'] == \"Code:Realize: Sousei no Himegimi\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Code:Realize: Sousei no Himegimi\"), 'episodes'] = '12'\ndf.loc[(df['name'] == \"Gamers!\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Gamers!\"), 'episodes'] = '12'\ndf.loc[(df['name'] == \"Ganko-chan\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Ganko-chan\"), 'episodes'] = '10'\ndf.loc[(df['name'] == \"Ginga Eiyuu Densetsu (2017)\"), 'type'] = 'OVA'\ndf.loc[(df['name'] == \"Ginga Eiyuu Densetsu (2017)\"), 'episodes'] = '110'\ndf.loc[(df['name'] == \"Grancrest Senki\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Grancrest Senki\"), 'episodes'] = '24'\ndf.loc[(df['name'] == \"IDOLiSH7\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"IDOLiSH7\"), 'episodes'] = '17'\ndf.loc[(df['name'] == \"Isekai Shokudou\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Isekai Shokudou\"), 'episodes'] = '12'\ndf.loc[(df['name'] == \"Oushitsu Kyoushi Haine\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Oushitsu Kyoushi Haine\"), 'episodes'] = '12'\ndf.loc[(df['name'] == \"Peace Maker Kurogane (Shinsaku)\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Peace Maker Kurogane (Shinsaku)\"), 'episodes'] = '24'\ndf.loc[(df['name'] == \"Seikaisuru Kado\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Seikaisuru Kado\"), 'episodes'] = '12'\ndf.loc[(df['name'] == \"UQ Holder!\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"UQ Holder!\"), 'episodes'] = '12'\ndf.loc[(df['name'] == \"Citrus\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Citrus\"), 'episodes'] = '12'\ndf.loc[(df['name'] == \"Hitorijime My Hero\"), 'type'] = 'TV'\ndf.loc[(df['name'] == \"Hitorijime My Hero\"), 'episodes'] = '12'\ndf.isnull().sum()","0dd5d044":"df.dropna(subset=['type'], inplace=True)\ndf.shape","bfc6bcce":"df.isnull().sum()","e5f4047b":"df[df['genre'].isnull()]","4a8ff744":"df['genre'].fillna('Unknown', inplace=True)\ndf.isnull().any()","be64e9bc":"df.head()","855a410b":"m = df.members.quantile(0.75)\nC = df.rating.mean()\nprint(m, C)","b91e659f":"def weighted_rating(df, m, C):\n    term = df['members'] \/ (m + df['members'])\n    return df['rating'] * term + (1-term) * C","4f629f7d":"df['community_rating'] = df.apply(weighted_rating, axis=1, args=(m,C))\ndf.head()","7ac0d657":"df.drop(['anime_id', 'rating', 'members', 'episodes'], axis=1, inplace=True)\ndf.head()","222f9058":"df = pd.concat([df, df['type'].str.get_dummies(), df['genre'].str.get_dummies(sep=',')], axis=1)\ndf.head()","035e67d1":"anime_features = df.loc[:, \"Movie\":].copy()\nanime_features.head()","276dff15":"cosine_sim = cosine_similarity(anime_features.values, anime_features.values)","763abac3":"cosine_sim","f8a0c934":"cosine_sim.shape","890f05d4":"anime_index = pd.Series(df.index, index=df.name).drop_duplicates()","73d7278c":"def get_recommendation(anime_name, similarity=cosine_sim):\n    idx = anime_index[anime_name]\n    \n    # Get the pairwsie similarity scores of all anime with that anime\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the anime based on the similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar anime\n    sim_scores = sim_scores[0:11]\n\n    # Get the anime indices\n    anime_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar anime\n    result = df[['name', 'genre', 'community_rating']].iloc[anime_indices].drop(idx)\n    return result","dff5e81c":"get_recommendation(\"Steins;Gate\")","3441de55":"get_recommendation(\"Kimi no Na wa.\")","a84305e8":"get_recommendation(\"Kokoro ga Sakebitagatterunda.\")","e1620bcc":"get_recommendation(\"Naruto\")","59881e31":"get_recommendation(\"Noragami\")","e7b5b8a4":"get_recommendation(\"Plastic Memories\")","04a58b9f":"It seems the data is not up to date with the current season. There is no other way, We have to manually fill the type and the episodes.","deff6df7":"## Handling Unknown Genre","e440f39b":"My approach is to fill the missing type based on the number of the episodes. But after checking the data, some of the anime have 'unknown' episodes and missing type.","84680d24":"## Handling missing type","be170159":"We see that it is very reasonable that __Steins;Gate 0__ is the most similar anime, because it is the alternate ending of __Steins;Gate__. The rating is very low because __Steins;Gate 0__ was a new anime when the data is collected.","5fa62d85":"# Read the data","3d03a140":"There still some unknown 'type', because it has not yet aired. I will drop those anime.","ec7b31c9":"## Breakdown the genre and type","9f56d23c":"# Handling Missing Value","2cfabce7":"Now we must create an indexing for each anime name, this will be used when user querying a recommendation.","0e3ee8eb":"## Calculate the similarity matrix","15d78556":"## Calculate Weighted Rating","2a1d4501":"Maybe it is also a good idea to show the weighted rating to the user whenever they query for similiar anime. We can improve the recommendation by sorting the recommendation based on their respective weighted rating.","4560c9e0":"# Build the Recommender System","06475f65":"For now, let's just fill it with 'Unknown'.","b4808b36":"We only want to build recommender based on the genre and the type, so let's focus only to those feature.","454c38a3":"these are the features that will be dropped:\n* anime_id -> just the index of the anime, it is easier if we used the panda's index\n* rating -> we have weighted rating (community_rating)\n* members -> we have weighted rating (community_rating)\n* episodes -> the data that we have is not updated with the current airing anime, and some anime is still airing (One Piece, etc)","fae8700f":"## Handling missing rating","966f6cae":"## Dropping some unused columns","63a5f3ee":"We want our algorithm to treat the 'type' and 'genre' of anime as equal. Therefore if we use label encoding, maybe the algorithm will treat a certain category more important than the other categories.","03ec3ba6":"# Content Based Recommender System"}}