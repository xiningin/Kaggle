{"cell_type":{"993b1c88":"code","74c20115":"code","327b4d6e":"code","9c920833":"code","e255afad":"code","508b20e0":"code","c1fa632e":"code","3a14f2d1":"code","404a2639":"code","baedfae8":"code","4c55b4ad":"code","c6346a94":"code","2f6f7032":"code","3bc05164":"code","4790915f":"code","2206d6e4":"code","1c142f08":"code","102ed5ab":"code","1685d57e":"code","f6c3cd93":"code","91696ba0":"code","486d2dbf":"code","02bae00b":"code","325c6f0e":"markdown","57a8a2bb":"markdown"},"source":{"993b1c88":"# Installing Dependencies\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas_datareader as web\nimport datetime as dt\n\nimport math\n\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.layers import Dense, Dropout, LSTM\nfrom tensorflow.keras.models import Sequential","74c20115":"#PRIMARY OPTION - Grabs pricing for Bitcoin from YahooFinance\ncrypto = 'ETH' #Change code to cryptocurrency of choice\ncurrency = 'GBP' #Change code to fiat currency of choice\n\nstart = dt.datetime(2016,1,1)\nend = dt.datetime.now()\n\ndf = web.DataReader(f'{crypto}-{currency}', data_source='yahoo', start=start, end=end)","327b4d6e":"#SECONDARY OPTION - Grabs pricing for Bitcoin from crytocurrencypricehistory, a historical cryptocurrency dataset\n#df = pd.read_csv('..\/input\/backupdataset')","9c920833":"df.head()","e255afad":"df.tail()","508b20e0":"df.shape","c1fa632e":"df.describe()","3a14f2d1":"df.isnull().sum()","404a2639":"#Draws line plot based on current date and closing price data available\nsns.set(rc = {'figure.figsize':(16,8)})\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.title(f'{crypto} Close Price History', fontsize=16)\nplt.ylabel(f'Close Price ({currency})', fontsize=14)\nplt.xlabel('Date', fontsize=14)\nax = sns.lineplot(data=df,x='Date',y='Close')\nplt.show()","baedfae8":"#Scales data\nscaler = MinMaxScaler(feature_range=(0,1))\n#Pulls only 'Close' column and reshapes data\nscaled_data = scaler.fit_transform(df['Close'].values.reshape(-1,1))\n#Assigns number of days the prediction is based on\nprediction_days = 60","4c55b4ad":"x_train = []\ny_train = []\n\n#Grabs 59 days for x_train and the 60th day for y_train\nfor i in range (prediction_days, len(scaled_data)):\n    x_train.append(scaled_data[i-prediction_days:i, 0])\n    y_train.append(scaled_data[i, 0])","c6346a94":"#Converts to numpy array\nx_train = np.array(x_train)\ny_train = np.array(y_train)","2f6f7032":"#Adds additional dimension as the model requires 3 dimensions\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))","3bc05164":"#Builds Neural Network\nmodel = Sequential()\n#Adds LSTM layer\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1], 1)))\n#Prevents overfitting\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units=50, return_sequences=True))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units=50))\nmodel.add(Dropout(0.2))\n#Actual price prediction\nmodel.add(Dense(units=1))","4790915f":"#Compiles model\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.fit(x_train, y_train, epochs=200, batch_size=32)","2206d6e4":"#Testing model\n#Assigns start and end times for the test\ntest_start = dt.datetime.now() - dt.timedelta(days=365)\ntest_end = dt.datetime.now()\n#Applies start and end times to the test\ntest_data = web.DataReader(f'{crypto}-{currency}', 'yahoo', test_start, test_end)\n#Assigns the actual closing prices to a value\nactual_prices = test_data['Close'].values\n#Combines the original dataset with the test dataset\ntotal_dataset = pd.concat((df['Close'], test_data['Close']), axis=0)","1c142f08":"#Creates model inputs to be used for prediction\n#Takes the total dataset and removes any data being used for testing\nmodel_inputs = total_dataset[len(total_dataset) - len(test_data) - prediction_days:].values\nmodel_inputs = model_inputs.reshape(-1, 1)\n#Scales model inputs to test scale\nmodel_inputs = scaler.fit_transform(model_inputs)","102ed5ab":"#Creates test data\nx_test = []\nfor i in range(prediction_days, len(model_inputs)):\n    x_test.append(model_inputs[i-prediction_days:i, 0])\n    \nx_test = np.array(x_test)\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))","1685d57e":"#Pulls actual prediction for every 60th day based on the past 59 days\nprediction_prices = model.predict(x_test)\n#Reverts prior scaling\nprediction_prices = scaler.inverse_transform(prediction_prices)","f6c3cd93":"#Draws line plot based on current date and closing price data available\nplt.plot(actual_prices, color='red', label='Actual prices')\nplt.plot(prediction_prices, color='green', label='Predicted prices')\nplt.title(f'{crypto} to {currency} Price Prediction', fontsize=16)\nplt.xlabel('Time (Days)', fontsize=14)\nplt.ylabel(f'Close Price ({currency})', fontsize=14)\nplt.legend(loc='upper left')\nplt.show()","91696ba0":"#Re-scales actual and prediction pricing data for RMSE values\nactual_norm = scaler.fit_transform(actual_prices.reshape(-1,1))\nprediction_norm = scaler.fit_transform(prediction_prices.reshape(-1,1))\n#Compares scaled real pricing data to scaled predicted pricing data to ascertain RMSE value\nrmse = math.sqrt(mean_squared_error(actual_norm,prediction_norm))\nprint(\"Root Mean Square Error:\", rmse)","486d2dbf":"#Adds extra date to computation for future date calculations\nreal_data = [model_inputs[len(model_inputs) + 1 - prediction_days:len(model_inputs) + 1, 0]]\nreal_data = np.array(real_data)\nreal_data = np.reshape(real_data, (real_data.shape[0], real_data.shape[1], 1))","02bae00b":"#Performs prediction for tomorrow's closing price\nprediction = model.predict(real_data)\nprediction = scaler.inverse_transform(prediction)\nprint(crypto, \"Predicted Closing Price for Tomorrow:\", prediction, currency)","325c6f0e":"**SECONDARY (BACKUP) OPTION FOR PRICING DATASET**","57a8a2bb":"**PRIMARY OPTION FOR PRICING DATASET**"}}