{"cell_type":{"c11f7d1e":"code","017e6981":"code","69782bc0":"code","edfc3a71":"code","96ffe6ed":"code","a2b06d75":"code","d646baaa":"code","2dabe4b4":"code","69027f9a":"code","df5e9434":"code","57d984d5":"code","b1df0512":"code","66d6ed71":"markdown","a31e618b":"markdown","740ad240":"markdown","6204d9b8":"markdown","71fe6100":"markdown","ff6c49cd":"markdown"},"source":{"c11f7d1e":"import numpy as np\nimport pandas as pd\nimport os\nimport re\nimport string\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nimport random","017e6981":"story_path = \"\/kaggle\/input\/sherlock-holmes-stories\/sherlock\/sherlock\/\"\n\ndef read_all_stories(story_path):\n    txt = []\n    for _, _, files in os.walk(story_path):\n        for file in files:\n            with open(story_path+file) as f:\n                for line in f:\n                    line = line.strip()\n                    if line=='----------': break\n                    if line!='':txt.append(line)\n    return txt\n        \nstories = read_all_stories(story_path)\nprint(\"number of lines = \", len(stories))","69782bc0":"def clean_txt(txt):\n    cleaned_txt = []\n    for line in txt:\n        line = line.lower()\n        line = re.sub(r\"[,.\\\"\\'!@#$%^&*(){}?\/;`~:<>+=-\\\\]\", \"\", line)\n        tokens = word_tokenize(line)\n        words = [word for word in tokens if word.isalpha()]\n        cleaned_txt+=words\n    return cleaned_txt\n\ncleaned_stories = clean_txt(stories)\nprint(\"number of words = \", len(cleaned_stories))","edfc3a71":"def make_markov_model(cleaned_stories, n_gram=2):\n    markov_model = {}\n    for i in range(len(cleaned_stories)-n_gram-1):\n        curr_state, next_state = \"\", \"\"\n        for j in range(n_gram):\n            curr_state += cleaned_stories[i+j] + \" \"\n            next_state += cleaned_stories[i+j+n_gram] + \" \"\n        curr_state = curr_state[:-1]\n        next_state = next_state[:-1]\n        if curr_state not in markov_model:\n            markov_model[curr_state] = {}\n            markov_model[curr_state][next_state] = 1\n        else:\n            if next_state in markov_model[curr_state]:\n                markov_model[curr_state][next_state] += 1\n            else:\n                markov_model[curr_state][next_state] = 1\n    \n    # calculating transition probabilities\n    for curr_state, transition in markov_model.items():\n        total = sum(transition.values())\n        for state, count in transition.items():\n            markov_model[curr_state][state] = count\/total\n        \n    return markov_model","96ffe6ed":"markov_model = make_markov_model(cleaned_stories)","a2b06d75":"print(\"number of states = \", len(markov_model.keys()))","d646baaa":"print(\"All possible transitions from 'the game' state: \\n\")\nprint(markov_model['the game'])","2dabe4b4":"def generate_story(markov_model, limit=100, start='my god'):\n    n = 0\n    curr_state = start\n    next_state = None\n    story = \"\"\n    story+=curr_state+\" \"\n    while n<limit:\n        next_state = random.choices(list(markov_model[curr_state].keys()),\n                                    list(markov_model[curr_state].values()))\n        \n        curr_state = next_state[0]\n        story+=curr_state+\" \"\n        n+=1\n    return story","69027f9a":"for i in range(20):\n    print(str(i)+\". \", generate_story(markov_model, start=\"dear holmes\", limit=8))","df5e9434":"for i in range(20):\n    print(str(i)+\". \", generate_story(markov_model, start=\"my dear\", limit=8))","57d984d5":"for i in range(20):\n    print(str(i)+\". \", generate_story(markov_model, start=\"i would\", limit=8))","b1df0512":"print(generate_story(markov_model, start=\"the case\", limit=100))","66d6ed71":"## Generating Sherlock Holmes stories!","a31e618b":"## Creating the Markov Model","740ad240":"## Importing tools","6204d9b8":"## Cleaning the text","71fe6100":"## Reading every Sherlock Holmes adventure!","ff6c49cd":"<img src=\"https:\/\/drive.google.com\/uc?export=view&amp;id=1zSJwAUxWv5bxyYLmYPNi-s6M_Wq5iWXh\">"}}