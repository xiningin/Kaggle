{"cell_type":{"2e383dfb":"code","203f51b6":"code","cb45b887":"code","b5288616":"code","253eb7a4":"code","15900212":"code","c11762a7":"code","2dd29d5b":"code","63a3c689":"code","0c4f825c":"code","da6852e4":"code","c7eb24d9":"code","acd632b4":"code","2fae14c2":"code","f4bbf17b":"code","d0686b02":"code","a369b000":"code","d7cd66dd":"code","501a8e98":"code","d46d3ea5":"markdown"},"source":{"2e383dfb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","203f51b6":"import tensorflow as tf\nprint(tf.__version__)\n\nimport pandas as pd\nimport numpy as np","cb45b887":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\ntrain_df.head()","b5288616":"test_df.head()","253eb7a4":"y_train = train_df.label.values\nx_train = train_df.drop(columns=[\"label\"]).values\nx_test = test_df.values\nx_train[:10]","15900212":"print(x_train.shape)\nprint(x_test.shape)\nprint(max(x_train[1]))","c11762a7":"x_train = x_train \/ 255.0\nx_test = x_test \/ 255.0\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Flatten(input_shape=(784,)),\n    # tf.keras.layers.Dense(2048, activation=tf.nn.relu),\n    # tf.keras.layers.Dense(1024, activation=tf.nn.relu),\n    # tf.keras.layers.Dense(512, activation=tf.nn.relu),\n    tf.keras.layers.Dense(256, activation=tf.nn.relu),\n    tf.keras.layers.Dense(128, activation=tf.nn.relu),\n    tf.keras.layers.Dense(10, activation=tf.nn.softmax)\n])\n","2dd29d5b":"class myCallback(tf.keras.callbacks.Callback):\n    def on_epoch_end(self, epoch, logs={}):\n        if(logs.get('acc') > 0.997):\n            print(\"\\n Reached 99% accuracy so cancelling training!\")\n            self.model.stop_training = True\n\n\nmodel.compile(optimizer=\"adam\", loss=\"sparse_categorical_crossentropy\", metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=30)\n","63a3c689":"classifications = model.predict(x_test)","0c4f825c":"classifications.shape\nclassifications\nnp.argmax(classifications, axis=1)[0]","da6852e4":"def write_submissions(file_name, imageId, predictions):\n    \n    output = pd.DataFrame({\n        'ImageId': imageId, 'Label': predictions\n    })\n    output.to_csv(file_name, index=False)\n    \n    \nwrite_submissions('submission_1.csv', pd.Series(range(1,28001)), np.argmax(classifications, axis=1))","c7eb24d9":"y_train = train_df.label.values\nx_train = train_df.drop(columns=[\"label\"]).values\nx_test = test_df.values","acd632b4":"print(x_train.shape)\nprint(x_test.shape)","2fae14c2":"x_train = x_train.reshape(42000, 28, 28, 1)\nx_test = x_test.reshape(28000, 28, 28, 1)\n\nx_train = x_train \/ 255.0\nx_test = x_test \/ 255.0","f4bbf17b":"model = tf.keras.models.Sequential([\n    tf.keras.layers.Conv2D(64, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n    tf.keras.layers.MaxPooling2D(2, 2),\n    tf.keras.layers.Flatten(),\n    # tf.keras.layers.Dense(2048, activation='relu'),\n    tf.keras.layers.Dense(1024, activation='relu'),\n    tf.keras.layers.Dense(512, activation='relu'),\n    tf.keras.layers.Dense(256, activation='relu'),\n    # tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.summary()","d0686b02":"model.fit(x_train, y_train, epochs=20)","a369b000":"classifications = model.predict(x_test)\nwrite_submissions('submission_2.csv', pd.Series(range(1,28001)), np.argmax(classifications, axis=1))","d7cd66dd":"print(y_train[:100])\nx_train.shape","501a8e98":"import matplotlib.pyplot as plt\nf, axarr = plt.subplots(3, 4)\nFIRST_IMAGE = 0\nSECOND_IMAGE = 7\nTHIRD_IMAGE = 8\nCONVOLUTION_NUMBER = 1\n\nfrom tensorflow.keras import models\nlayer_outputs = [layer.output for layer in model.layers]\nactivation_model = tf.keras.models.Model(inputs=model.input, outputs=layer_outputs)\n\nfor x in range(0, 4):\n    f1 = activation_model.predict(x_train[FIRST_IMAGE].reshape(1, 28, 28, 1))[x]\n    axarr[0, x].imshow(f1[0, :, :, CONVOLUTION_NUMBER], cmap='inferno')\n    axarr[0, x].grid(False)\n    f2 = activation_model.predict(x_train[SECOND_IMAGE].reshape(1, 28, 28, 1))[x]\n    axarr[1, x].imshow(f2[0, :, :, CONVOLUTION_NUMBER], cmap='inferno')\n    axarr[1, x].grid(False)\n    f3 = activation_model.predict(x_train[THIRD_IMAGE].reshape(1, 28, 28, 1))[x]\n    axarr[2, x].imshow(f3[0, :, :, CONVOLUTION_NUMBER], cmap='inferno')\n    axarr[2, x].grid(False)\n    ","d46d3ea5":"## CNN"}}