{"cell_type":{"5983b940":"code","aef0f990":"code","d5771ff8":"code","ad0788ce":"code","7b69effb":"code","e1a6a38e":"code","18e7696b":"code","26a78d0f":"code","4ef20517":"code","e29a7b9a":"code","69affa4f":"code","9783daa8":"code","5e3b4e28":"code","25f3757d":"code","457c6bd9":"code","8d71b170":"code","44ec6767":"code","4e6267e9":"code","3618a46c":"code","6325cdb9":"code","b64656dc":"code","6545a085":"code","da849ca8":"code","0b167f03":"code","8e79d4ce":"code","a6572384":"code","0a51f7de":"code","127b7d1d":"code","281196f4":"code","f0395935":"code","b1e012b3":"code","16439ca0":"code","3f3035a9":"code","053a38af":"code","a37ed6a6":"markdown","beb2c4ce":"markdown","60521232":"markdown"},"source":{"5983b940":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aef0f990":"mov_df = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/movie.csv')\nrat_df = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/rating.csv')\ngen_tag_df = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/genome_tags.csv')\ngen_sco_df = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/genome_scores.csv')\ntag_df = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/tag.csv')\nlink_df = pd.read_csv('\/kaggle\/input\/movielens-20m-dataset\/link.csv')\n","d5771ff8":"mov_rat = pd.merge(mov_df,rat_df)\nmov_rat","ad0788ce":"gen_sco_tag = pd.merge(gen_tag_df,gen_sco_df)\ngen_sco_tag.head()","7b69effb":"tag_df.head()\ntag_df = tag_df.drop(['timestamp'],axis=1)","e1a6a38e":"gen_sco_tag = pd.merge(gen_sco_tag,tag_df)","18e7696b":"gen_sco_tag","26a78d0f":"link_df.head()","4ef20517":"df = pd.merge(mov_rat,gen_sco_tag)\ndf.head()","e29a7b9a":"df = df.drop(['timestamp','tagId','tag','relevance'],axis=1)\ndf","69affa4f":"df['rating']=df['rating'].astype(int)\ndf","9783daa8":"number_rating = mov_rat.groupby('title')['rating'].count().reset_index()","5e3b4e28":"number_rating.rename(columns={'rating':'number of rating'},inplace=True)\nnumber_rating.head()","25f3757d":"df = pd.merge(df,number_rating)\ndf","457c6bd9":"df.shape","8d71b170":"df=df[df['number of rating']>=50]","44ec6767":"df.drop_duplicates(['title','userId'],inplace=True)","4e6267e9":"df.shape","3618a46c":"df.head()","6325cdb9":"df.drop(columns=['number of rating'],inplace=True)\ndf.head()","b64656dc":"mov_piv=df.pivot_table(columns='userId',index='title',values='rating')","6545a085":"mov_piv.shape","da849ca8":"mov_piv.fillna(0,inplace=True)","0b167f03":"mov_piv","8e79d4ce":"from scipy.sparse import csr_matrix\nmov_spar=csr_matrix(mov_piv)","a6572384":"from sklearn.neighbors import NearestNeighbors\nknn = NearestNeighbors(n_neighbors=10,algorithm='brute',metric='cosine')","0a51f7de":"knn.fit(mov_spar)","127b7d1d":"df.drop(columns=['genres','userId','rating'],inplace=True)\n","281196f4":"df.drop_duplicates(inplace=True)","f0395935":"df.to_csv('RecoSys.csv',index=False)","b1e012b3":"df_f =df.copy()\nfin=[]\nfor i in df_f['title']:\n    fin.append(i.split(' (')[0])\ndf_f['title']=fin","16439ca0":"def reco(mov_name):\n    movie_id=df_f[df_f['title']=='Toy Story'].drop_duplicates('title')['movieId'].values[0]\n    distances,suggestions=knn.kneighbors(mov_piv.iloc[movie_id,:].values.reshape(1,-1))\n    \n    \n    \n    for i in range(len(suggestions)):\n        return (mov_piv.index[suggestions[i]])","3f3035a9":"res=reco('xXx(2002)')","053a38af":"for i in res:\n    print(i)","a37ed6a6":"Guess i wont be needing this","beb2c4ce":"this looks better with all tags sorted together, I will sort it into one big datframe later","60521232":"So now we have the neccesary data and thus we will combine it and do some preprocessing"}}