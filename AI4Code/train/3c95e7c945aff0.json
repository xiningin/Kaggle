{"cell_type":{"4f930b8b":"code","f05efe38":"code","6263e066":"code","4c54f0cf":"code","fb5989cf":"code","3000d1e3":"code","94d100b6":"code","3f0c29dc":"code","22f57c74":"code","71a2718a":"code","4ade6151":"code","fd6e1d1b":"code","ac65d978":"code","e5c46120":"code","40ef2768":"code","da50fd72":"code","78970128":"code","9877399c":"code","0f97fa45":"code","cffdd5f1":"code","006b50fc":"code","35461f93":"code","18e146ba":"code","13229efe":"code","0983940e":"code","eed26317":"code","aa4e7c84":"code","90604407":"code","73ba2f19":"code","bd9db654":"code","51429898":"markdown","5695af8b":"markdown","218269b4":"markdown","9bf330c2":"markdown","04174074":"markdown","d7a81794":"markdown","26d84aca":"markdown","2d10779f":"markdown","ebe69dcb":"markdown","1fb7f2e6":"markdown","f51d9245":"markdown","d4c808c8":"markdown","bc6c62a7":"markdown","1aa0ac04":"markdown","2869f670":"markdown","ffd6fea2":"markdown","1ef1a793":"markdown","58804aeb":"markdown","d09c2d5f":"markdown","ac8ecc66":"markdown","73d51ced":"markdown","c0465c0e":"markdown","6bbace83":"markdown","b494908d":"markdown","ebfaca5c":"markdown","8cc1f1e0":"markdown","efa774be":"markdown","8db1a424":"markdown","566a6cdb":"markdown","1ff1b95c":"markdown"},"source":{"4f930b8b":"import numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport datetime\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import linear_model, svm, gaussian_process\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom lightgbm import LGBMRegressor\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","f05efe38":"data = pd.read_csv('..\/input\/renfe.csv', index_col=0)\ndata.head()","6263e066":"data[\"price\"].describe()","4c54f0cf":"data.columns.values","fb5989cf":"data.info()","3000d1e3":"data.shape","94d100b6":"data.isnull().sum()\/data.shape[0] * 100","3f0c29dc":"data['price'].fillna(data['price'].mean(),inplace=True)","22f57c74":"data['train_class'].value_counts()","71a2718a":"data['train_class'].fillna(\"Turista\",inplace=True)","4ade6151":"data['fare'].value_counts()","fd6e1d1b":"data['fare'].fillna(\"Promo\",inplace=True)","ac65d978":"data.isnull().sum()","e5c46120":"data['price'].describe()","40ef2768":"sns.distplot(data['price'])","da50fd72":"\n# train_type\nvar = 'train_type'\ndata_train_type = pd.concat([data['price'], data[var]], axis=1)\nplt.subplots(figsize=(15,6))\nsns.boxplot(x=var, y=\"price\",data=data_train_type)","78970128":"# train_class\nvar = 'train_class'\ndata_train_class = pd.concat([data['price'], data[var]], axis=1)\nplt.subplots(figsize=(15,6))\nsns.boxplot(x=var, y=\"price\",data=data_train_class)","9877399c":"# origin\nvar = 'origin'\ndata_origin = pd.concat([data['price'], data[var]], axis=1)\nplt.subplots(figsize=(15,6))\nsns.boxplot(x=var, y=\"price\",data=data_origin)","0f97fa45":"#  destination\nvar = 'destination'\ndata_dest = pd.concat([data['price'], data[var]], axis=1)\nplt.subplots(figsize=(15,6))\nsns.boxplot(x=var, y=\"price\",data=data_dest)","cffdd5f1":"data.drop('insert_date',axis=1,inplace=True)","006b50fc":"#strp time\n#data['start_date'] = pd.to_datetime(data['start_date'])\n#data['end_date'] = pd.to_datetime(data['end_date'])","35461f93":"def dataInterval(start,end):\n    start = datetime.datetime.strptime(start, '%Y-%m-%d %H:%M:%S')\n    end = datetime.datetime.strptime(end, '%Y-%m-%d %H:%M:%S')\n    delta = end - start\n    return delta.seconds\/3600","18e146ba":"data['data_interval'] = data.apply(lambda x:dataInterval(x['start_date'],x['end_date']),axis = 1)","13229efe":"data.drop(['start_date','end_date'],axis=1,inplace=True)","0983940e":"data.head()","eed26317":"f_names = [\"origin\",\"destination\",\"train_type\",\"train_class\",\"fare\"]\nfor x in f_names:\n    label = preprocessing.LabelEncoder()\n    data[x] = label.fit_transform(data[x])\n","aa4e7c84":"data.head()","90604407":"corrmat = data.corr()\nf, ax = plt.subplots(figsize=(20, 9))\nsns.heatmap(corrmat, vmax=0.8, square=True)","73ba2f19":"# Get the date \ncols = ['origin','destination', 'train_type', 'train_class', 'fare', 'data_interval']\nx = data[cols].values\ny = data['price'].values\nx_scaled = preprocessing.StandardScaler().fit_transform(x)\ny_scaled = preprocessing.StandardScaler().fit_transform(y.reshape(-1,1))\nX_train,X_test, y_train, y_test = train_test_split(x_scaled, y_scaled, test_size=0.1, random_state=10)","bd9db654":"clfs ={\n    \"LGBMRegressor\":LGBMRegressor(),\n    \"RandomForestRegressir\":RandomForestRegressor(n_estimators=200),\n    'BayesianRidge':linear_model.BayesianRidge()\n}\nfor clf in clfs:\n    try:\n        clfs[clf].fit(X_train, y_train)\n        #y_pred = clfs[clf].predict(X_test)\n        #print(clf + \" cost:\" + str(np.sum(y_pred-y_test)\/len(y_pred)) )\n        print(clf+\" score:\"+ str(clfs[clf].score(X_test,y_test)))\n    except Exception as e:\n        print(clf + \" Error:\")\n        print(str(e))","51429898":"****2. Analyze the price ****","5695af8b":"****7. deal with the datetime ****","218269b4":"****6. destination and price ****","9bf330c2":"Load Data","04174074":"\nUse Support Vector Machines , RandomForestRegressor and BayesianRidge mode to run  in the workflow. And compare the result with the each mode","d7a81794":"**Data Analyze**","26d84aca":"\"Cama G. Clase\" is the train class with the highest ticket price. \"Turista con enlace\" is the train class with the lowest price.\n","2d10779f":"Calculate the  time delta between the place of origin and destination","ebe69dcb":"compare with the score of each mode,the RandomForestRegressir has high score(0.8293834131266755)","1fb7f2e6":"****4. train_class and price ****","f51d9245":"**Analyze by visualizing data**\n\n****1. Dealwith the Nan value ****","d4c808c8":"Distribution of the ticket prices","bc6c62a7":"split the training and testing data","1aa0ac04":"The \"Promo\" has every high frequency in the fare column.","2869f670":"Calculate the missed percentage","ffd6fea2":"What are the data types for various features?","1ef1a793":"![](http:\/\/)The \"start_date\" and \"end_date\" just the departure time in origin and the Arrival  time in destination.So we just use the timedelta.","58804aeb":"\"AVE\" and \"AVE-TGV\" are higher compared with other train types.\n","d09c2d5f":"The \"insert_date\" column just store the time when the ticket is sold,it's no releated with the price,so just delet this column. ","ac8ecc66":"The \"Turista\" has every high frequency in the train_class column.","73d51ced":"origin  destination train_type train_class fare","c0465c0e":"****Feature Engineering****","6bbace83":"****Model, predict and solve****","b494908d":"****3. train_type and price ****","ebfaca5c":"****7. Completing a categorical feature****","8cc1f1e0":"****5. origin and price ****","efa774be":"Categorical: origin  destination train_type train_class fare\n\nnumerical:price\n\n![](http:\/\/)should change these columns(insert_data start_date end_data ) into Datetime later.","8db1a424":"Fill the missed value in the \"train_class\" and \"fare\" column with the value has the most frequency.","566a6cdb":"Fill the missed value in the \"price\" column with mean of the ticket price.\n","1ff1b95c":"**Import package**"}}