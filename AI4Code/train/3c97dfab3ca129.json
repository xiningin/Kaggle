{"cell_type":{"3ca92733":"code","894c7a3e":"code","1874f8bc":"code","36c08347":"code","f4b56ce6":"code","cd54b226":"code","6fa22b80":"code","5cc0322b":"code","59b3156a":"code","5538261d":"code","a217359c":"code","cad4cb14":"code","cb93935c":"code","751dc2a6":"code","5b0b8d8d":"code","7b127b48":"code","8fbbb260":"code","31169bb5":"code","98e97abe":"code","8d7e5857":"code","2afa623f":"code","75ae75e7":"code","f69d8d2d":"code","553a3075":"code","7d61a479":"code","bb0c36b5":"code","12ea0fff":"code","95222e6b":"code","9d1d601d":"code","de1994a3":"code","39aebdeb":"code","7518453c":"code","7df10dbe":"code","c6696bca":"code","99b17723":"code","6e569e2d":"code","ebd009f9":"code","c8f1b83c":"code","debde6ea":"code","aa268fc1":"code","5a4c4279":"markdown","669f00cb":"markdown","2d1f70bf":"markdown","469fa794":"markdown","1012b324":"markdown"},"source":{"3ca92733":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","894c7a3e":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","1874f8bc":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","36c08347":"train.info()","f4b56ce6":"test.info()","cd54b226":"all = pd.concat([train, test], sort = False)\nall.info()","6fa22b80":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","5cc0322b":"all.info()","59b3156a":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","5538261d":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","a217359c":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","cad4cb14":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","cb93935c":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","751dc2a6":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","5b0b8d8d":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","7b127b48":"all.info()","8fbbb260":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","31169bb5":"all.info()","98e97abe":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","8d7e5857":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","2afa623f":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","75ae75e7":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","f69d8d2d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","553a3075":"from sklearn.ensemble import RandomForestClassifier","7d61a479":"RF_Model = RandomForestClassifier()","bb0c36b5":"#from sklearn.model_selection import GridSearchCV","12ea0fff":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","95222e6b":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","9d1d601d":"#RF_grid_model = RF_grid.fit(X_train, y_train)","de1994a3":"#RF_grid_model.best_estimator_","39aebdeb":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","7518453c":"RF_Model.fit(X_train, y_train)","7df10dbe":"predictions = RF_Model.predict(X_test)\npredictions","c6696bca":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","99b17723":"all_test.head()","6e569e2d":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","ebd009f9":"t_pred = RF_Model.predict(TestForPred).astype(int)","c8f1b83c":"PassengerId = all_test['PassengerId']","debde6ea":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","aa268fc1":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","5a4c4279":"****Check Accuracy","669f00cb":"****Train\/Test Split","2d1f70bf":"****Final Predictions","469fa794":"****Extra Features:","1012b324":"### Build Random Forest"}}