{"cell_type":{"fe4251a1":"code","e549523a":"code","27370596":"code","06106f4e":"code","c3f5cd51":"code","b82a7d60":"code","83b432a7":"code","c046ab42":"code","7a6eeeeb":"code","d0c71cec":"code","29d58d1e":"code","790b4852":"code","c97ceffd":"code","47d850d7":"code","d6a449e5":"code","8cb879c0":"code","8cec08fe":"code","77713c5b":"code","e2f1dcf8":"code","8754f567":"code","ef77653e":"code","6be70d05":"code","df63f7aa":"code","f0417856":"code","5cbc3e17":"code","30ee22c9":"code","0bbb4292":"code","fac948b2":"code","217a9e0a":"code","e650557c":"code","17b34725":"code","9fbebf53":"code","24aa0036":"code","607fadda":"code","3348705c":"code","820283d6":"code","af7c45db":"code","977161be":"code","acb709ab":"code","7e94050a":"code","ba3b2949":"code","8054ee37":"code","8e99b57e":"code","46745c37":"markdown","f56e65bf":"markdown","eecd892d":"markdown","68c10da4":"markdown","817a377e":"markdown","761374bc":"markdown","d3d61fe5":"markdown","5d2b8ee0":"markdown","796ff9db":"markdown"},"source":{"fe4251a1":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nfrom pandas_profiling import ProfileReport\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nfrom sklearn.tree import DecisionTreeClassifier\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#check version\nimport sys\nprint(sys.version)","e549523a":"train=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","27370596":"train.head(10)","06106f4e":"test.head()","c3f5cd51":"train.shape","b82a7d60":"train.describe()","83b432a7":"train.isnull().sum()","c046ab42":"test.isnull().sum()","7a6eeeeb":"train.describe(percentiles=[0.05,.1,.2,.3,0.4,0.5,0.6,0.7,0.8,0.9,0.98])","d0c71cec":"test.describe(percentiles=[0.05,.1,.2,.3,0.4,0.5,0.6,0.7,0.8,0.9,0.98])","29d58d1e":"train.corr().style.background_gradient(cmap='Blues')","790b4852":"train_test = [train,test]\ntrain.head()","c97ceffd":"print (train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean())","47d850d7":"print (train[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean())","d6a449e5":"sex_mapping = {\"male\": 1, \"female\": 0}\nfor dataset in train_test:\n    dataset['Sex'] = dataset['Sex'].map(sex_mapping)","8cb879c0":"for dataset in train_test:\n    dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\nprint (train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean())","8cec08fe":"for dataset in train_test:\n    dataset['IsAlone'] = 0\n    dataset.loc[dataset['FamilySize'] == 1, 'IsAlone'] = 1\nprint (train[['IsAlone', 'Survived']].groupby(['IsAlone'], as_index=False).mean())","77713c5b":"for dataset in train_test:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')\nprint (train[['Embarked', 'Survived']].groupby(['Embarked'], as_index=False).mean())","e2f1dcf8":"for dataset in train_test:\n    dataset['Fare'] = dataset['Fare'].fillna(train['Fare'].median())","8754f567":"for dataset in train_test:\n    age_avg    = dataset['Age'].mean()\n    age_std    = dataset['Age'].std()\n    age_null_count = dataset['Age'].isnull().sum()\n    \n    age_null_random_list = np.random.randint(age_avg - age_std, age_avg + age_std, size=age_null_count)\n    \n    dataset['Age'][np.isnan(dataset['Age'])] = age_null_random_list\n    dataset['Age'] = dataset['Age'].astype(int)\n    \nprint (train[['Age', 'Survived']].groupby(['Age'], as_index=False).mean())","ef77653e":"for df in train_test:\n    df['Person']=df['Name'].str.extract('([A-Za-z]*)\\.')\ntrain['Person'].value_counts()","6be70d05":"test['Person'].value_counts()","df63f7aa":"title_mapping = { \"Mr\": 1, \"Miss\": 2, \"Mrs\": 3,\"Master\": 4, \"Dr\": 5, \"Rev\": 5, \"Col\": 5, \"Major\": 5, \"Mlle\": 5,\"Countess\": 5,\n                 \"Ms\": 5, \"Lady\": 5, \"Jonkheer\": 5, \"Don\": 5, \"Dona\" : 5, \"Mme\": 5,\"Capt\": 5,\"Sir\": 5 }\nfor dataFrame in train_test:\n    dataFrame['Person']=dataFrame['Person'].map(title_mapping)","f0417856":"print(pd.crosstab(train['Person'], train['Sex']))","5cbc3e17":"for dataset in train_test:\n    dataset['Embarked'] = dataset['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)","30ee22c9":"# Mapping Fare\n    \n#for dataset in train_test:\n #   dataset.loc[ dataset['Fare'] <= 7.91, 'Fare']   = 0\n  #  dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n   # dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n #   dataset.loc[ dataset['Fare'] > 31, 'Fare']      = 3\n  #  dataset['Fare'] = dataset['Fare'].astype(int)\n    \n    # Mapping Age\n    dataset.loc[ dataset['Age'] <= 16, 'Age']     = 0\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n    dataset.loc[ dataset['Age'] > 64, 'Age'] =4","0bbb4292":"train","fac948b2":"# Feature Selection\ndrop_list = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp',\\\n                 'Parch','Fare','FamilySize']\ntrain = train.drop(drop_list, axis = 1)\ntest  = test.drop(['Name', 'Ticket', 'Cabin', 'SibSp',\\\n                 'Parch', 'Fare', 'FamilySize'], axis = 1)\n\ntrain.head(10)","217a9e0a":"test.head(10)","e650557c":"# Importing Classifier Modules\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier , AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import LogisticRegression\n\n\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis\n\nclassifiers = [\n    KNeighborsClassifier(3),\n    SVC(probability=True),\n    DecisionTreeClassifier(),\n    RandomForestClassifier(),\n    AdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis(),\n    LogisticRegression()]\n","17b34725":"X_train=train.drop('Survived',axis=1)\nY_train=train['Survived']\n\nX_test = test.drop('PassengerId',axis=1).copy()\n","9fbebf53":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","24aa0036":"# Support Vector Machines\n\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","607fadda":"from sklearn.model_selection import KFold , cross_val_score\n\n#10 splits of Kfolds \nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)\n\nscoring = 'accuracy'\nscore = cross_val_score(svc, X_train, Y_train, cv=k_fold, n_jobs=1, scoring=scoring)\nscore","3348705c":"#LogisticRegression Model\nLr = LogisticRegression()\nLr.fit(X_train, Y_train)\nprediction = Lr.predict(X_test)\nacc_lr = round(Lr.score(X_train, Y_train) * 100, 2)\nacc_lr","820283d6":"#GaussianNaifBayesien\nGs = GaussianNB()\nGs.fit(X_train, Y_train)\nprediction = Gs.predict(X_test)\nacc_gs = round(Gs.score(X_train, Y_train) * 100, 2)\nacc_gs","af7c45db":"#KNN Model\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","977161be":"# Linear SVC\n\nlinear_svc = LinearSVC()\nlinear_svc.fit(X_train, Y_train)\nY_pred = linear_svc.predict(X_test)\nacc_linear_svc = round(linear_svc.score(X_train, Y_train) * 100, 2)\nacc_linear_svc","acb709ab":"# Stochastic Gradient Descent\nfrom sklearn.linear_model import SGDClassifier\n\nsgd = SGDClassifier()\nsgd.fit(X_train, Y_train)\nY_pred = sgd.predict(X_test)\nacc_sgd = round(sgd.score(X_train, Y_train) * 100, 2)\nacc_sgd","7e94050a":"# Decision Tree\n\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","ba3b2949":"models = pd.DataFrame({\n    'Model': ['Random Forest', 'Support Vector Machines', 'Logistic Regression', \n              'Gaussian Naif Bayesien', 'KNeighbors Classifier',\n              'Linear SVC', 'Stochastic Gradient Descent', \n              'Decision Tree'],\n    'Score': [acc_random_forest, acc_svc, \n              acc_lr, \n              acc_gs, acc_knn, acc_linear_svc ,  acc_sgd ,  acc_decision_tree       ]})\nmodels.sort_values(by='Score', ascending=False)","8054ee37":"#Y_pred = random_forest.predict(X_test)\n#Y_pred = knn.predict(X_test)\n#Y_pred = decision_tree.predict(X_test)","8e99b57e":"Y_pred = decision_tree.predict(pd.get_dummies(X_test))\nsubmission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\n\nsubmission.to_csv('submission1.csv', index=False)","46745c37":"## Age","f56e65bf":"## Pclass","eecd892d":"## Name ","68c10da4":"## Classification Model","817a377e":"## Train data & Taret","761374bc":"## SibSp & Parch\nSibling Spouse  &  Parent Child ","d3d61fe5":"## Fare","5d2b8ee0":"##  Sex ","796ff9db":"## Embarked"}}