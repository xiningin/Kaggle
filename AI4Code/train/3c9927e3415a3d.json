{"cell_type":{"679364d3":"code","66a980bb":"code","3e3f0f54":"code","7cb00d02":"code","6d433dac":"code","5f0ab60f":"code","1723cd52":"code","2953ccfe":"code","93327243":"code","7a3a4cbf":"code","c53ce7e9":"code","63a3df29":"code","5e856e3b":"code","a241aa5f":"code","a1fc4ff2":"code","adb0a72e":"code","918042b4":"markdown","2dd3b4f7":"markdown","0fcd6de9":"markdown","2105a682":"markdown","9364cba4":"markdown","77170e40":"markdown","875b57fb":"markdown","ed398b2e":"markdown","d55294b7":"markdown","05df6bf3":"markdown","c8723610":"markdown"},"source":{"679364d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","66a980bb":"import matplotlib\nimport matplotlib.pyplot as plt\nimport sklearn\n","3e3f0f54":"oecd_bli = pd.read_csv(\"..\/input\/life-satisfaction-dataset\/oecd_bli_2015.csv\", thousands=',')\ngdp_per_capita = pd.read_csv(\"..\/input\/life-satisfaction-dataset\/gdp_per_capita.csv\",\n                              thousands=',',\n                             delimiter='\\t',\n                             encoding='latin1',\n                             na_values=\"n\/a\")","7cb00d02":"oecd_bli.Indicator.unique()","6d433dac":"oecd_bli.head()\n","5f0ab60f":"gdp_per_capita.head()","1723cd52":"def prepare_country_stats(df1, df2):\n    df1 = df1[df1[\"INEQUALITY\"] == \"TOT\"]\n    df1 = df1.pivot(\n        index=\"Country\", columns=\"Indicator\", values=\"Value\")\n    df2.rename(columns={\"2015\": \"GDP per capita\"}, inplace=True)\n    df2.set_index(\"Country\", inplace=True)\n    full_country_stats = pd.merge(left=df1, right=df2,\n                                  left_index=True, right_index=True)\n    full_country_stats.sort_values(by=\"GDP per capita\", inplace=True)\n    keep_indices = list(set(range(30)) )\n \n    return full_country_stats[[\"GDP per capita\", 'Life satisfaction']].iloc[keep_indices]","2953ccfe":"country_stats= prepare_country_stats(oecd_bli, gdp_per_capita)","93327243":"\nX = np.c_[country_stats[\"GDP per capita\"]]\ny = np.c_[country_stats[\"Life satisfaction\"]]\n","7a3a4cbf":"\ncountry_stats.plot(kind='scatter', x=\"GDP per capita\", y='Life satisfaction')\nplt.show()\n","c53ce7e9":"from sklearn.linear_model import LinearRegression\n\nlinearmodel  = LinearRegression()","63a3df29":"\nlinearmodel.fit(X, y)","5e856e3b":"X_new = [[22587]] # Cyprus' GDP per capita\nprint(linearmodel.predict(X_new)) ","a241aa5f":"from sklearn.neighbors import KNeighborsRegressor\n\nclf = KNeighborsRegressor(n_neighbors=3)","a1fc4ff2":"clf.fit(X, y)","adb0a72e":"X_new = [[22587]] # Cyprus' GDP per capita\nprint(clf.predict(X_new)) ","918042b4":"## Make a prediction for Cyprus\n","2dd3b4f7":"**Please upvote if you like my approach or if you learned something from this notebook. Your support gives me motivation to create interesting stuff. Thank you.**\n","0fcd6de9":"# Select a K Neighbors Regressor model","2105a682":"# Training and running a linear model using Scikit-Learn\n","9364cba4":"# Prepare the data","77170e40":"# Visualize the data","875b57fb":"# Select a linear model","ed398b2e":"# Load the data\n","d55294b7":"## Train the model\n","05df6bf3":"## Make a prediction for Cyprus\n","c8723610":"## Train the model"}}