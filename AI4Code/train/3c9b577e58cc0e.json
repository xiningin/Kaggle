{"cell_type":{"953d13b1":"code","ec7ec52a":"code","410ec4c3":"code","f11fcf25":"code","5457353d":"code","90fbc7e7":"code","0d55ae41":"code","6acee433":"code","f95e2f51":"code","d558f849":"code","7623aa8a":"code","b540ec1e":"code","a1fd645b":"code","649e00a2":"code","d9b7752a":"code","97de54d3":"code","000063ed":"code","78b10238":"code","66f0fd64":"code","35dc9207":"code","4b969b8b":"markdown"},"source":{"953d13b1":"from sklearn import linear_model\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nfrom sklearn.model_selection import train_test_split","ec7ec52a":"d=pd.read_csv(\"..\/input\/lung-cancer-dataset-by-staceyinrobert\/survey lung cancer.csv\")","410ec4c3":"d['LUNG_CANCER'] = d['LUNG_CANCER'].map({'YES': 1, 'NO': 0})","f11fcf25":"d=d.drop(\"GENDER\",axis=1)","5457353d":"d.head()","90fbc7e7":"d.info()","0d55ae41":"y=d[\"LUNG_CANCER\"]\ny.head()","6acee433":"x=d\nx.head()","f95e2f51":"x_train,x_test,y_train,y_test=train_test_split(x,y)\nx_test.head()","d558f849":"reg=linear_model.LogisticRegression()\nreg.fit(x_train,y_train)\ny_predict=reg.predict(x_test)\nprint(y_predict)","7623aa8a":"accuracy_score(y_predict,y_test)","b540ec1e":"print(accuracy_score(y_predict,y_test)*100,'%')","a1fd645b":"confusion_matrix(y_predict,y_test)","649e00a2":"sns.kdeplot(y_test,cumulative=True, bw=1.5)","d9b7752a":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(d, nGraphShown, nGraphPerRow):\n    nunique = d.nunique()\n    d = d[[col for col in d if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = d.shape\n    columnNames = list(d)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = d.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","97de54d3":"plotPerColumnDistribution(d, 10, 5)","000063ed":"# Correlation matrix\ndef plotCorrelationMatrix(d, graphWidth):\n    d.dataframeName = 'survey lung cancer.csv'\n    filename = d.dataframeName\n    d = d.dropna('columns') # drop columns with NaN\n    d = d[[col for col in d if d[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if d.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({d.shape[1]}) is less than 2')\n        return\n    corr = d.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","78b10238":"plotCorrelationMatrix(d,10)","66f0fd64":"# Scatter and density plots\ndef plotScatterMatrix(d, plotSize, textSize):\n    d = d.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    d = d.dropna('columns')\n    d = d[[col for col in d if d[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(d)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    d = d[columnNames]\n    ax = pd.plotting.scatter_matrix(d, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = d.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","35dc9207":"plotScatterMatrix(d, 20, 10)","4b969b8b":"# Exploratory Analysis"}}