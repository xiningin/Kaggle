{"cell_type":{"36e91584":"code","41f88348":"code","41bfc372":"code","a33b4cf3":"code","df21e66d":"code","fe0b33e3":"code","f6d91c01":"code","f3190865":"code","84c56bfd":"code","bb6db89e":"code","8ff92266":"code","424a2678":"code","c207371e":"code","9fa5ea16":"code","9bfaffb2":"code","17258348":"code","6dec65e5":"code","8ced3b09":"code","a5102baa":"code","8cb81d13":"code","60913adb":"code","e3b64b7d":"code","0d1f34bd":"code","ce05d917":"code","65314af0":"code","63f4c6d4":"code","c6c89e5b":"code","b70909be":"code","4a550c2e":"code","8475c506":"code","4b75ebd7":"code","3038f85d":"code","1be1fc72":"markdown","42500e98":"markdown","f3930d10":"markdown","64bf6b43":"markdown","7b4d5348":"markdown","436c1317":"markdown","eaa6eca5":"markdown","ca0ccc95":"markdown","44456168":"markdown","a80c03b7":"markdown","49de5df2":"markdown","3d050af9":"markdown","37f2993f":"markdown","08062fdf":"markdown","fa0ec9ed":"markdown","aa3931ae":"markdown","b92b3eb0":"markdown","ca814f85":"markdown","92faba74":"markdown","bf919fae":"markdown","7f48af0a":"markdown","b80e1916":"markdown","08fa93b2":"markdown","5ad1aa70":"markdown","8c5751bf":"markdown","d28f7e21":"markdown","699e49cf":"markdown","f54af419":"markdown"},"source":{"36e91584":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (10, 6)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nprint('The followings are files in the dataset: ')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","41f88348":"df_InfoUser = pd.read_csv('\/kaggle\/input\/learning-activity-public-dataset-by-junyi-academy\/Info_UserData.csv')\ndf_LogProblem = pd.read_csv('\/kaggle\/input\/learning-activity-public-dataset-by-junyi-academy\/Log_Problem.csv')\ndf_InfoContent = pd.read_csv('\/kaggle\/input\/learning-activity-public-dataset-by-junyi-academy\/Info_Content.csv')","41bfc372":"df_InfoUser.head(5)","a33b4cf3":"df_LogProblem.head(5)","df21e66d":"df_InfoContent.head(5)","fe0b33e3":"print('Total number of users:', len(df_InfoUser))","f6d91c01":"df_InfoUser = df_InfoUser.fillna('-1')\ncount_each_gender = df_InfoUser['gender'].value_counts()\ncount_each_gender","f3190865":"plt.title('Number of users per gender')\nplt.bar(count_each_gender.index, count_each_gender.values)\nplt.show()","84c56bfd":"# Select students from grade 1 to grade 6\ndf_elem = df_InfoUser[(df_InfoUser['user_grade'] > 0) & (df_InfoUser['user_grade'] < 7)]\ndf_elem.describe()","bb6db89e":"plt.plot(df_elem['points'].sort_values().reset_index(drop=True))\n\nplt.title('Distribution of energy points for students in elementary school', fontsize=16)\nplt.xlim((1, 50000))\nplt.xlabel('Student sorted by energy point count', fontsize=10)\nplt.ylim((0, 4100000))\nplt.ylabel('Energy points', fontsize=10)\nplt.grid()\n\nplt.show()","8ff92266":"# Let's pick a random exercise\ndf_LogProblem_first_ucid = df_LogProblem[df_LogProblem['ucid'] == df_LogProblem['ucid'][1]]","424a2678":"# Calculate number of problems done by each user\ndf_pcnt = df_LogProblem_first_ucid.groupby('uuid').size().reset_index(name='problem_cnt')\ndf_pcnt = df_pcnt.sort_values(by=['problem_cnt'])\ndf_pcnt = df_pcnt.reset_index()\n\n# Sort and plot\npcnt_distribution = df_pcnt['problem_cnt'].value_counts()\npcnt_distribution = pcnt_distribution.sort_index()\n\nplt.bar(pcnt_distribution.index, pcnt_distribution.values)\n\nplt.title('Distribution of problem attempts for students in this exercise', fontsize=16)\nplt.xlabel(\"Number of problems done in this exercise\", fontsize=10)\nplt.ylabel(\"User count\", fontsize=10)\nplt.xlim((0, 25))\n\nplt.show()","c207371e":"print(df_InfoUser['user_city'].value_counts().head(5))\n#TOP 5 : Taipei, New Taipei, Taichung, Taoyuan, Kaohsiung","9fa5ea16":"# Lets randomly pick a user and an exercise and observe the learning process!\nlearning_path = df_LogProblem[(df_LogProblem['uuid'] == \"AAITw26FaJFdy0VfpYXlUhEpJnYcjEucad09AXqKmUE=\") &\n                              (df_LogProblem['ucid'] == \"FDFKlshYbN4rO93MtgimwfpEoKerSWp1RFhoSKWXHsY=\")]","9bfaffb2":"#sort by problem_number\nlearning_path = learning_path.sort_values(by=['problem_number']).reset_index()\nlearning_path = learning_path[['timestamp_TW', 'upid', 'problem_number', 'exercise_problem_repeat_session', 'is_correct']]\nlearning_path","17258348":"uuidgb = df_LogProblem.groupby('uuid')","6dec65e5":"problem_cnt = uuidgb['uuid'].count()\ntotal_time = uuidgb['total_sec_taken'].agg(np.sum)\nmean_time_taken = total_time \/ problem_cnt\nprint(\"The mean of mean_time_taken\", mean_time_taken.mean())\nprint(\"The std of mean_time_taken\", mean_time_taken.std())","8ced3b09":"plt.plot(np.sort(mean_time_taken))\n\nplt.title('Mean time for a user to finish a problem',fontsize=16)\nplt.xlabel('Student sorted by average time taken', fontsize=10)\nplt.ylabel('time (sec)', fontsize=10)\nplt.ylim((0, 200))\n\nplt.grid()\nplt.show()","a5102baa":"# There are definitely outliers in the time recorded\nmean_time_taken[mean_time_taken > 1000]","8cb81d13":"correct_count = uuidgb['is_correct'].agg(np.sum)\ncorrect_rate = correct_count \/ problem_cnt\nprint(f\"mean : {correct_rate.mean()}\\n std : {correct_rate.std()}\\n min : {correct_rate.min()}\\n max : {correct_rate.max()}\")","60913adb":"plt.plot(np.sort(correct_rate))\n\nplt.title('Distribution of correct rate', fontsize=16)\nplt.xlabel('Student sorted by correct rate', fontsize=10)\nplt.ylabel('correct rate', fontsize=10)\n\nplt.grid()\nplt.show()","e3b64b7d":"# Lets look at the problems in elementary school students\nucid_chosen = df_InfoContent[df_InfoContent['learning_stage']=='elementary']['ucid']","0d1f34bd":"filter_time = (df_LogProblem['timestamp_TW'] >= \"2018-09-01\") & (df_LogProblem['timestamp_TW'] < \"2018-10-01\")\nfilter_ucid = (df_LogProblem['ucid'].isin(ucid_chosen))\ndf_LogProblem_elem = df_LogProblem[filter_ucid & filter_time].groupby(['ucid']).size().reset_index(name='counts')\ndf_LogProblem_elem","ce05d917":"plt.plot(np.sort(df_LogProblem_elem['counts']))\nplt.axhline(df_LogProblem_elem['counts'].mean(), color = 'r',linestyle = '--')\n\nplt.title('How many problems attempts were done for each exercise during 2018\/09', fontsize=16)\n\nplt.xlabel('Exercise', fontsize=10)\nplt.xlim((1, 741))\nplt.ylabel('Number of problem attempts', fontsize=10)\nplt.ylim((0, 16000))\n\nplt.grid()\nplt.show()","65314af0":"df_InfoContent['learning_stage'].value_counts()","63f4c6d4":"diff_count = df_InfoContent['difficulty'].value_counts()","c6c89e5b":"plt.bar(x=diff_count.index, height=diff_count)\n\nplt.ylim((0, 900))\nplt.title('Distribution of Difficulty',fontsize=16)\nplt.xlabel('Difficulty', fontsize=10)\nplt.ylabel('Problem count', fontsize=10)\n\nplt.show()","b70909be":"df_Problem_Content = df_LogProblem[['ucid', 'is_correct']].merge(df_InfoContent[['ucid', 'difficulty']], how='inner', left_on='ucid', right_on='ucid')\n\n# We remove the content with difficulty unset for now\ndf_Problem_Content = df_Problem_Content[df_Problem_Content['difficulty'] != 'unset']\n\ndf_Problem_Content = df_Problem_Content.groupby(['difficulty', 'is_correct']).size().unstack(level=-1)\ndf_Problem_Content['correct_rate'] = df_Problem_Content[True] \/ (df_Problem_Content[True] + df_Problem_Content[False])\n\ndf_Problem_Content.sort_values(by=['correct_rate'], ascending=False)","4a550c2e":"# Randomly pick an exercise\ndf_userreturn = df_LogProblem[df_LogProblem['ucid'] == \"CPI+5YCeEmhqdk6znJeii6jJUNl1QWGEvwCUJ6uLflg=\"][['timestamp_TW','uuid']].sort_values(by=['timestamp_TW'])","8475c506":"def GetSurvivalRate(df_week1, df_week2):\n    user_w1 = set(np.unique(df_week1['uuid']))\n    user_w2 = set(np.unique(df_week2['uuid']))\n    SurvivalRate = round(len(user_w1.intersection(user_w2)) \/ len(user_w1) * 100, 3)\n    print(f\"{SurvivalRate}% users in the first week still stay in this week\")\n    return SurvivalRate","4b75ebd7":"df_week0 = df_userreturn[(df_userreturn['timestamp_TW'] >= \"2018-09-02\") & (df_userreturn['timestamp_TW'] < \"2018-09-09\")]\ndf_week1 = df_userreturn[(df_userreturn['timestamp_TW'] >= \"2018-09-09\") & (df_userreturn['timestamp_TW'] < \"2018-09-16\")]\ndf_week2 = df_userreturn[(df_userreturn['timestamp_TW'] >= \"2018-09-16\") & (df_userreturn['timestamp_TW'] < \"2018-09-23\")]\ndf_week3 = df_userreturn[(df_userreturn['timestamp_TW'] >= \"2018-09-23\") & (df_userreturn['timestamp_TW'] < \"2018-09-30\")]\ndf_week4 = df_userreturn[(df_userreturn['timestamp_TW'] >= \"2018-09-30\") & (df_userreturn['timestamp_TW'] < \"2018-10-07\")]\n\nSR_list = [GetSurvivalRate(df_week0, df_week0),\n           GetSurvivalRate(df_week0, df_week1),\n           GetSurvivalRate(df_week0, df_week2),\n           GetSurvivalRate(df_week0, df_week3),\n           GetSurvivalRate(df_week0, df_week4)]","3038f85d":"plt.plot(SR_list)\n\nplt.xticks(np.arange(0, 4.1, 1))\nplt.yticks(np.arange(0, 101, 10))\nplt.title('Survival Rate of Week 0 users in the next few weeks', fontsize=16)\nplt.xlabel('Number of week', fontsize=10)\nplt.ylabel('Survival Rate', fontsize=10)\n\nfor x, y in zip(range(5), SR_list): \n    plt.text(x, y, str(round(y, 2)))\n\nplt.grid()\nplt.show()","1be1fc72":"### How many exercises are in each learning stage?","42500e98":"### For each exercise, how many math problems were done by elementary students from 2018-09-01 to 2018-09-30 ? ","f3930d10":"We have 47867 students from grade 1 to grade 6 and the student with max energy points have 4047528 energy points.","64bf6b43":"## How many percent of user will continue to review the exercise in the next few weeks?","7b4d5348":"# Your turn now!\n\nThere are lots of open ended questions that can be answered.\n\nPlease refer to the dataset description for some ideas to start with!","436c1317":"### Calculate the correct rate for each user","eaa6eca5":"### How long does it take a user to finish a problem ?","ca0ccc95":"The Majority of the students do not set their gender on the platform.","44456168":"# EDA : Log_Problem","a80c03b7":"# EDA : Info_Content","49de5df2":"The plot shows that there are significant differences within the students. <br>\nSome are power users of the platform, while some students are less active.","3d050af9":"## Does the Proficiency mechanism affect users?","37f2993f":"We can observe a peak in the plot, most users do 5 or 6 problems in the exercise. <br>\nThis is mainly due to the proficiency mechanism, users would usually want to upgrade to level 1 and move onto the next exercise.","08062fdf":"There are some exercise that are much more popular than the others. <br>\nIt will be interesting to look into the seasonality changes to the exercises as teachers guide students throughout the school year.","fa0ec9ed":"Observing the table, we can conclude that:\n1. \"problem number\" is <font color='red'>the problem order<\/font> in the exercise for the user\n2. \"exercise_problem_repeat_session\" is <font color='red'>how many times the user encounter this problem<\/font>\n3. The timestamp is rounded to the nearest 15 minute interval to preserve privacy in the dataset","aa3931ae":"## What do \"<font color='red'>problem number<\/font>\" and \"<font color='red'>exercise_problem_repeat_session<\/font>\" mean?","b92b3eb0":"## The relation between <font color='red'>levels<\/font>, <font color='red'>exercise<\/font> and <font color='red'>problem<\/font>.\n![level relation](https:\/\/i.imgur.com\/fi8rgqK.jpg)","ca814f85":"Different exercises will also have different correct rates distribution among users!","92faba74":"## What is [energy point](https:\/\/help.junyiacademy.org\/home\/badge_learning\/)?\n\nEnergy points are like experience points in games. <br>\nSimilar to game-based learning, users will try to learn to earn more energy points. <br>\nEnergy Points are earned from Junyi Academy after completing exercises, watching videos, and when the user receives a badge. <br>\n\nThe rules of energy point are as the following:\n1. A user earns 750 * (effective watching time \/ video length) energy points after watching a video. (Effective watching time for a 10-minute video at 2X speed will be only 5-minute)\n2. A user earns a base of 75 energy points after completing an exercise at <font color='red'>level<\/font> 0.\n3. This might increase to at most 225 due to fast answering speed or repeated correct attempts.\n4. The points earned will decrease to as few as 5 as the user's <font color='red'>level<\/font> of that exercise increase to encourage the user to practice other exercises.\n5. Users will earn points from badges, which encourage students to keep learning and complete certain targets to earn the different badges.\n\n![\u80fd\u91cf\u9ede\u6578\u8aaa\u660e:\u7fd2\u984c](https:\/\/help.junyiacademy.org\/wp-content\/uploads\/2018\/04\/learn_4.png)\n![\u80fd\u91cf\u9ede\u6578\u8aaa\u660e:\u5f71\u7247](https:\/\/help.junyiacademy.org\/wp-content\/uploads\/2018\/04\/learn_5.png)","bf919fae":"### The correct rate for each exercise difficulty","7f48af0a":"## What is <font color='red'>level<\/font> ([Proficiency mechanism](https:\/\/help.junyiacademy.org\/home\/badge_learning\/))?\n\n\"*Proficiency mechanism*\" allows students to convert short-term memory into long-term memory through appropriate and repeated review. <br>\nIt also helps teachers and parents to use the least amount of time to confirm whether the children's learning is proficient. <br>\n\nThere are five possible levels, all users start from level 0 and progress to level 4 which we considered Proficient for that exercise. <br>\nThe rules are as the following for each exercise:\n\n1. Every user starts at level 0.\n<br>\n<br>\n2. To reach level 1, the user will have to answer the problems correctly 5 times in the recent 6 problems in the exercise.\n<br>\n<br>\n3. To reach next level, the user needs to wait some hours, which will be longer if user is at higher level, and will answer 2 problems from the exercise. For example, the user is at level 2 and get a chance to answer 2 problems:<br>\n    *  If <font color='red'>both are correct<\/font>, the user is <font color='red'>upgraded<\/font> to level 3.<br>\n    *  If <font color='red'>both are incorrect<\/font>, the user is <font color='red'>downgraded<\/font> to level 1.<br>\n    *  If one of them is correct and one of them is incorrect, the level is <font color='red'>unchanged<\/font> and the user is prompted to try again the challenge.\n<br>\n<br>\n4. The procedure to upgrade or downgrade is the same for the other levels. But users will not be downgraded at level 1 or when the user reaches level 4 `Proficient`.\n<br>\n<br>\n5. After reaching <font color='blue'>level 1<\/font>, the user is required to wait <font color='blue'>6 hours<\/font> before he\/she is able to attempt to level up again to level 2.\n<br>\n<br>\n6. After reaching <font color='blue'>level 2<\/font>, the user is required to wait <font color='blue'>16 hours<\/font> before he\/she is able to attempt to level up again to level 3.<br>\n<br>\n7. After reaching <font color='blue'>level 3<\/font>, the user is required to wait <font color='blue'>40 hours<\/font> before he\/she is able to attempt to level up again to level 4, which is the final level and considered `Proficient` for that exercise.\n<br>\n<br>\n![\u7cbe\u719f\u6a5f\u5236\u8aaa\u660e](https:\/\/help.junyiacademy.org\/wp-content\/uploads\/2018\/04\/learn_6.png)","b80e1916":"# EDA : Info_UserData","08fa93b2":"### Top 5 city of all users","5ad1aa70":"### Dataset Description:\n\nThere are three tables provided in the dataset<br>\n***The Log_Problem.csv*** recorded 16,217,311 problem attempt logs of 72,758 students for a year from 2018\/08\/01 to 2019\/07\/31.<br>\nAn exercise is a basic unit of learning, which is related to a certain concept, it consists of several problems. <br>\n***Info_Content.csv*** describes the metadata of the exercise.<br> \n***Info_UserData.csv*** described the metadata of the selected students in Junyi Academy.<br>\n\n### About this notebook:\n\nThis notebook will try to introduce you to the Junyi Academy Dataset<br>\nWe hope that these tasks can help you better understand the dataset and enable you to discover more interesting findings.<br>","8c5751bf":"### Student Count for each gender","d28f7e21":"### Distribution of energy points for students in elementary school","699e49cf":"The city names are the different cities in Taiwan\n\n![Taiwan Map](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/e\/e7\/Taiwan_ROC_political_divisions_labeled.svg\/1200px-Taiwan_ROC_political_divisions_labeled.svg.png)","f54af419":"### The distribution of difficulty of exercises."}}