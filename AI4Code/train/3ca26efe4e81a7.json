{"cell_type":{"2ee79b20":"code","5eaf0dd9":"code","5ab8c197":"code","f9446cad":"code","d4fbcada":"code","1149d5a3":"code","2648d616":"code","dbbe4457":"code","d67a121c":"code","8fcbef48":"code","d694da4b":"code","bf9c6cf5":"code","4c9c4f65":"code","7b2138c3":"code","e906a378":"code","14a245d5":"code","ebc2db4b":"code","1b036525":"code","b8dea2d0":"code","a13cd367":"code","b629cb27":"code","28274d71":"code","ad3447f1":"code","c3ffe0c4":"code","b242e055":"code","cac324d8":"code","9ca6f1c7":"code","e8c98674":"code","58732251":"code","d9d7f85e":"code","2bbdcf63":"code","8ed57a20":"code","9be44a73":"code","ca5173ac":"markdown","a62be7dd":"markdown"},"source":{"2ee79b20":"import pandas as pd\nimport numpy as np","5eaf0dd9":"starting_data = pd.read_csv('..\/input\/covid-clean\/clean_train.csv')","5ab8c197":"starting_data.head()","f9446cad":"region_metadata = pd.read_csv('..\/input\/covid19-forecasting-metadata\/region_metadata.csv')","d4fbcada":"region_metadata.head()","1149d5a3":"merged_data = pd.merge(starting_data, region_metadata, how='left', on=['Country_Region', 'Province_State'])","2648d616":"len(merged_data)\nmerged_data.head()","dbbe4457":"lockdown = pd.read_csv('..\/input\/covid19-lockdown-dates-by-country\/countryLockdowndatesJHUMatch.csv')","d67a121c":"lockdown.rename(columns={'Country\/Region': 'Country_Region'}, inplace=True)\nlockdown.head()","8fcbef48":"merge_lockdown = pd.merge(merged_data, lockdown, how='left', on=['Country_Region'])","d694da4b":"merge_lockdown.head()","bf9c6cf5":"merge_lockdown['Date_x'] = pd.to_datetime(merge_lockdown['Date_x'], errors='coerce')\nmerge_lockdown['Date_y'] = pd.to_datetime(merge_lockdown['Date_y'], errors='coerce')\nmerge_lockdown['days_since_lockdown_raw'] = merge_lockdown['Date_x'] - merge_lockdown['Date_y']\nmerge_lockdown['days_since_lockdown_raw'] = merge_lockdown['days_since_lockdown_raw'].apply(lambda x: x.days)\nmerge_lockdown['days_since_lockdown'] = merge_lockdown['days_since_lockdown_raw'].apply(lambda x: -1 if x < 0 else x)\nmerge_lockdown.head()","4c9c4f65":"merge_lockdown['type_cleaned'] = merge_lockdown.apply(lambda x: x['Type'] if x['days_since_lockdown'] >= 0 else 'None', axis=1)","7b2138c3":"merge_lockdown.tail()","e906a378":"cases = merge_lockdown['ConfirmedCases']\ndeaths = merge_lockdown['Fatalities']","14a245d5":"data = merge_lockdown.drop(['ConfirmedCases','Fatalities', 'Date_y', 'Type', 'Reference', 'days_since_lockdown_raw'], axis=1)","ebc2db4b":"data.head()","1b036525":"data[['days_since_lockdown']] = data[['days_since_lockdown']].fillna(value=-1)","b8dea2d0":"data.head()","a13cd367":"data = pd.get_dummies(data, columns=['continent', 'type_cleaned'])","b629cb27":"features = data[['day_from_jan_first','Lat','Long',\n                   'medianage','urbanpop','hospibed','sexratio',\n                   'lung','avgtemp','avghumidity','days_from_firstcase', 'population', 'area', 'density_y', 'continent_Africa', 'continent_Americas','continent_Asia','continent_Europe','continent_Oceania', 'days_since_lockdown', 'type_cleaned_Full','type_cleaned_None','type_cleaned_Partial']]\nfeature_list = list(features.columns)","28274d71":"from sklearn.model_selection import train_test_split\nfeatures_train,features_test,cases_train,cases_test=train_test_split(features,cases,test_size=0.2)","ad3447f1":"print(cases_test.head())\nprint(features_test.head())","c3ffe0c4":"from sklearn.tree import DecisionTreeRegressor\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor = regressor.fit(features_train, cases_train)","b242e055":"def merge(list1, list2): \n      \n    merged_list = [(list1[i], list2[i]) for i in range(0, len(list1))] \n    return merged_list ","cac324d8":"feature_weights = merge(features_train.columns, regressor.feature_importances_)\nsorted_features = sorted(feature_weights, key=lambda x: x[-1])\nprint(sorted_features)","9ca6f1c7":"predictions = regressor.predict(features_test)","e8c98674":"df = pd.DataFrame({'Actual': cases_test, 'Predicted': predictions})\ndf","58732251":"from sklearn import metrics\nfrom statistics import mean\nprint('Mean Absolute Error:', metrics.mean_absolute_error(cases_test, predictions))  \nprint('Mean Squared Error:', metrics.mean_squared_error(cases_test, predictions))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(cases_test, predictions)))\nprint(mean(predictions))\nscore = regressor.score(features_test, cases_test)\nprint(score)","d9d7f85e":"# Import the model we are using\nfrom sklearn.ensemble import RandomForestRegressor\n# Instantiate model with 1000 decision trees\nrf = RandomForestRegressor(n_estimators = 100, random_state = 42)\n# Train the model on training data\nrf.fit(features_train, cases_train);","2bbdcf63":"predictions = rf.predict(features_test)","8ed57a20":"feature_weights = merge(features_train.columns, rf.feature_importances_)\nsorted_features = sorted(feature_weights, key=lambda x: x[-1])\nprint(sorted_features)","9be44a73":"print('Mean Absolute Error:', metrics.mean_absolute_error(cases_test, predictions))  \nprint('Mean Squared Error:', metrics.mean_squared_error(cases_test, predictions))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(cases_test, predictions)))\nprint(mean(predictions))\nscore = rf.score(features_test, cases_test)\nprint(score)","ca5173ac":"Citation for base: https:\/\/www.kaggle.com\/prashant268\/covid19-forecasting-with-country-information","a62be7dd":"# Try doing the same thing to predict fatalities"}}