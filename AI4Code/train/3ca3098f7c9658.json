{"cell_type":{"343873a3":"code","c56b98f8":"code","43fef6f8":"code","fc4e5db7":"code","903ed16f":"code","157d4ce4":"code","d58c86f0":"code","fea8d042":"code","b0f488c7":"code","0ed9e585":"code","6c7e5445":"code","65b39577":"code","bc1fa34e":"code","2d0d21b2":"markdown","80343b7d":"markdown","4262ff79":"markdown","eeb110d8":"markdown","9551c79a":"markdown"},"source":{"343873a3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","c56b98f8":"# training data:\ntrain_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntrain_data.head()\n","43fef6f8":"# creating training img and label\ntrain_label = train_data[\"label\"]\ntrain_img = train_data.iloc[:30000,1:]\nprint(train_img.shape)\n","fc4e5db7":"train_label.head()","903ed16f":"# encoding training labels : one hot encoding\nimport keras\nn_classes = 10\ntrain_label_new = keras.utils.to_categorical(train_label, n_classes)\nprint(train_label_new.shape)\ntrain_label_ = train_label_new[:30000,:]\ntrain_label_.shape\n","157d4ce4":"# creating validation set\ntrain_img_val = train_data.iloc[30000:,1:]\ntrain_label_val = train_label_new[30000:,:]\nprint(train_img_val.shape)\nprint(train_label_val.shape)\n","d58c86f0":"# test data \ntest_data = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\n# print(test_data.head())\nprint(test_data.shape)","fea8d042":"# importing necessary dependencies\nfrom keras.models import Sequential\nfrom keras.layers import Dense","b0f488c7":"# creating model with dense layer\nmodel = Sequential()\nmodel.add(Dense(512,input_shape=(784,), activation = \"relu\"))\nmodel.add(Dense(512, activation = \"relu\"))\nmodel.add(Dense(512, activation = \"relu\"))\nmodel.add(Dense(10, activation = \"softmax\"))\n\n","0ed9e585":"# compiling model\nmodel.compile(optimizer = \"rmsprop\",loss = \"categorical_crossentropy\", metrics = ['accuracy'])","6c7e5445":"model.fit(train_img,train_label_,epochs = 50, batch_size=128, validation_data = (train_img_val,train_label_val),shuffle=True)","65b39577":"predictions = model.predict(test_data)\nresult = [x.argmax() for x in predictions]\nprint(result)\n","bc1fa34e":"output = pd.DataFrame({'ImageId':test_data.index +1,'Label': result})\nprint(output.head())\noutput.to_csv(\"\/kaggle\/working\/submission6.csv\",index = False)\nprint(\"Your submission was successfully saved!\")\n","2d0d21b2":"# Calculating loss and optimizing network parameter","80343b7d":"# Model Creation","4262ff79":"# loading training and testing data using pandas","eeb110d8":"# Creating Predictions","9551c79a":"# Training model"}}