{"cell_type":{"63ca213b":"code","43c49e26":"code","be6b8e92":"code","430e5af9":"code","cd6913fd":"code","c57ad33b":"code","4f367dea":"code","3693ec7d":"code","89749b9c":"code","db512824":"code","3305aedf":"code","64daa061":"code","27ccabf2":"code","68a5ca61":"code","73816b61":"markdown","621a41c6":"markdown","34e68be2":"markdown","a4a62c55":"markdown","ab9b43b3":"markdown"},"source":{"63ca213b":"import matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n!pip install ppscore\nimport ppscore as pps","43c49e26":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","be6b8e92":"with open(\"\/kaggle\/input\/leagues.json\", \"r\") as read_file:\n    data = json.load(read_file)","430e5af9":"def random_cmap():\n    cmaps = ['Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', 'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', 'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'icefire', 'icefire_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'mako', 'mako_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', 'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'rocket', 'rocket_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10', 'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r', 'twilight', 'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'vlag', 'vlag_r', 'winter', 'winter_r']\n    return cmaps[int(np.random.random(1) * len(cmaps))]","cd6913fd":"df11 = pd.DataFrame(data[20][\"daily_results\"][\"2020-07-27\"])\ndf12 = pd.DataFrame(data[20][\"daily_results\"][\"2020-08-01\"])\ndf21 = pd.DataFrame(data[21][\"daily_results\"][\"2020-07-27\"])\ndf22 = pd.DataFrame(data[21][\"daily_results\"][\"2020-08-01\"])","c57ad33b":"df_1 = pd.concat([df11.set_index(\"Team\")[\"Pts\"], df12.set_index(\"Team\")[\"Pts\"]], axis = 1)\ndf_2 = pd.concat([df21.set_index(\"Team\")[\"Pts\"], df22.set_index(\"Team\")[\"Pts\"]], axis = 1)\ndf_1.columns = df_2.columns = [\"2020-07-27\", \"2020-08-01\"]\n\nfig = plt.figure(figsize = (18, 10))\nax = fig.add_subplot(2, 2, 1)\nax_2 = fig.add_subplot(2, 2, 2)\nax_3 = fig.add_subplot(2, 2, 3)\nax_4 = fig.add_subplot(2, 2, 4)\n\nax.set_title(\"Points, Serie A\")\nax.set_xlabel(\"Team\")\nax.set_ylabel(\"Points\")\ndf_1.plot(kind = \"bar\", ax = ax, cmap = \"coolwarm\") \n\nax_2.set_title(\"Points, Serie B\")\nax_2.set_xlabel(\"Team\")\nax_2.set_ylabel(\"Points\")\ndf_2.plot(kind = \"bar\", ax = ax_2, cmap = \"brg\")\n\nax_3.set_xlabel(\"Points\")\ndf_1.plot(kind = \"kde\", ax = ax_3, cmap = \"coolwarm\") \n\nax_4.set_xlabel(\"Points\")\ndf_2.plot(kind = \"kde\", ax = ax_4, cmap = \"brg\")","4f367dea":"def form(df_1, df_2):\n    df = pd.DataFrame(list(df_2[\"Form\"].values), columns = ['sixth', 'fifth', 'fourth', 'third', 'second', 'first'])\n    df[\"seventh\"] = [x[::6][0] for x in df_1[\"Form\"].values]\n    df = df[['seventh', 'sixth', 'fifth', 'fourth', 'third', 'second', 'first'][::-1]]\n    df[\"Team\"] = df_1[\"Team\"].values\n    df.set_index(\"Team\", inplace = True)\n    xs = []\n    for y in range(len(df.index)):\n        ys = []\n        for x in range(len(df.columns)):\n            nums = df.iloc[y, x].split(\"-\")\n            ys.append(int(nums[0]) - int(nums[1]))\n        xs.append(ys)\n    df = pd.DataFrame(data = xs, columns = df.columns, index = df.index)\n    for col in df.columns:\n        df[col] = (df[col] - df[col].min())\/(df[col].max() - df[col].min())\n    return df","3693ec7d":"fig = plt.figure(figsize = (18, 10))\nax = fig.add_subplot(1, 2, 1)\nax_2 = fig.add_subplot(1, 2, 2)\nax.set_title(\"Form of teams in Italy Serie A\")\nax.set_xlabel(\"Team\")\nax.set_ylabel(\"Form\")\nform(df11, df12).plot(kind = \"bar\", ax = ax, stacked = True, cmap = \"Wistia\")\n\nax_2.set_title(\"Form of teams in Italy Serie B\")\nax_2.set_xlabel(\"Team\")\nax_2.set_ylabel(\"Form\")\nform(df21, df22).plot(kind = \"bar\", ax = ax_2, stacked = True, cmap = \"winter\")","89749b9c":"def predictivePlotScoreMatrix(df):\n    df = df.drop(\"Form\", 1)\n    corr = pps.matrix(df)\n    corr_df = pd.DataFrame(corr[\"ppscore\"].values.reshape(len(df.columns), len(df.columns)), index = df.columns.values, columns = df.columns.values)\n    fig = plt.figure(figsize = (18, 10))\n    ax = fig.subplots()\n    ax.set_title(\"Correlation Matrix\")\n    sns.heatmap(corr_df, cmap = \"Greens\", annot = True, ax = ax)\n    plt.show()","db512824":"predictivePlotScoreMatrix(df11)","3305aedf":"def compareFeatures(df_1, df_2, cmaps, *features):\n    fig = plt.figure(figsize = (18, 10))\n    ax = fig.add_subplot(1, 2, 1)\n    ax_2 = fig.add_subplot(1, 2, 2)\n    ax.set_title(\"Serie A, COMPARISON: \" + \" - \".join(features))\n    df_1.set_index(\"Team\")[list(features)].plot(cmap = cmaps[0], stacked = True, kind = \"bar\", ax = ax)\n    ax_2.set_title(\"Serie B, COMPARISON: \" + \" - \".join(features))\n    df_2.set_index(\"Team\")[list(features)].plot(cmap = cmaps[1], stacked = True, kind = \"bar\", ax = ax_2)","64daa061":"compareFeatures(df11, df21, [\"inferno\", \"magma\"],\"W\", \"GF\", \"Pts\")","27ccabf2":"def winDrawLose(df_1, df_2, cmaps):\n    features = [\"W\", \"D\", \"L\"]\n    df_1 = df_1.copy()\n    df_2 = df_2.copy()\n    for feature in features:\n        df_1[feature + \"_\"] = df_1[feature]\/df_1[features].sum(axis = 1)\n        df_2[feature + \"_\"] = df_2[feature]\/df_2[features].sum(axis = 1)\n    fig = plt.figure(figsize = (18, 10))\n    ax = fig.add_subplot(1, 2, 1)\n    ax_2 = fig.add_subplot(1, 2, 2)\n    ax.set_title(\"Serie A, COMPARISON: \" + \" - \".join(features))\n    df_1.set_index(\"Team\")[[x + \"_\" for x in features]].plot(cmap = cmaps[0], stacked = True, kind = \"bar\", ax = ax)\n    ax_2.set_title(\"Serie B, COMPARISON: \" + \" - \".join(features))\n    df_2.set_index(\"Team\")[[x + \"_\" for x in features]].plot(cmap = cmaps[1], stacked = True, kind = \"bar\", ax = ax_2)","68a5ca61":"winDrawLose(df11, df21, [\"rainbow\", \"cividis\"])","73816b61":"# SHOW THE POINTS OF EACH TEAM","621a41c6":"# SHOW THE FORM OF TEAMS (7 MATCHES ARE GIVEN)","34e68be2":"# CREATE A PREDICTIVE POWER SCORE MATRIX","a4a62c55":"# COMPARE TEAMS BY METRICS","ab9b43b3":"# VISUALIZE PERCENTAGES OF WIN-DRAW-LOSE FOR EACH TEAM"}}