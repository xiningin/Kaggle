{"cell_type":{"a6a80166":"code","31a74764":"code","5f2c9b83":"code","a7663cdb":"code","cb9165a8":"code","f1ec94a7":"code","10595c0d":"code","7cbe5981":"code","52a86d41":"code","9a94ebe7":"code","c010041d":"code","b4687917":"code","8ed33a7d":"code","8c9cfdeb":"code","8e18d611":"code","76cc2b20":"code","efe37bcc":"code","ab011a6d":"code","3048c9be":"code","aba759bd":"code","0a3aea31":"code","c6ce1b45":"code","2232a413":"code","a1174cd5":"code","1263ea73":"code","2d27c044":"code","d8b8a9f0":"code","daa6c30b":"code","8fa14f53":"markdown","f5d4d61f":"markdown","62777518":"markdown","d3946b4e":"markdown","0a908a25":"markdown","3e562e20":"markdown","c89b5a12":"markdown","1d2853b7":"markdown","d719b412":"markdown","6af1aedb":"markdown","8ef56a8f":"markdown","cd4bf656":"markdown","ce8cef5d":"markdown","6f73d151":"markdown","a1cf77bf":"markdown"},"source":{"a6a80166":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31a74764":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndf = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\n\ndf.head()","5f2c9b83":"df.info()","a7663cdb":"df.isnull().sum()","cb9165a8":"df.describe()","f1ec94a7":"plt.figure(figsize=(8,8))\n\nsns.countplot(x='class' , data=df , alpha=1 , linewidth=1.25 , palette='rocket_r')\nplt.title('Class Distribution ( Edible \/ Poisonous)' , fontweight='bold' , size=18)\n\nplt.xlabel('Class' ,fontweight='bold' , size = 16)\nplt.ylabel('Count' ,fontweight='bold' , size = 16)\n\nplt.xticks(fontweight='bold' , size=12)\n\nplt.plot()","10595c0d":"features = df.columns[1:].tolist()\n\nprint(features)","7cbe5981":"rows = 8\ncols = 3\nfig = plt.figure(figsize=(15, 25))\nfig.set_facecolor(\"#fff\")\n\nfor idx, feature in enumerate(features):\n    ax = fig.add_subplot(rows, cols, idx+1)\n    ax.set_facecolor(\"#fff\")\n    \n    ax.grid(axis=\"y\", linewidth=1, color=\"lightgrey\", linestyle=\"--\", zorder=0)\n    sns.countplot(x=feature, palette='magma', data=df, ec=\"#000\", alpha=1, linewidth=1.5, zorder=2)\n    ax.xaxis.set_tick_params(size=0, labelsize=12, pad=7)\n    ax.yaxis.set_tick_params(size=0, labelsize=10, pad=7)\n    \n    if idx % cols == 0:\n        ax.set_ylabel(\"Count\", fontsize=14, fontfamily=\"serif\", labelpad=7)\n    else:\n        ax.set_ylabel(\"\")\n        \n    ax.set_xlabel(feature, fontsize=14, fontfamily=\"serif\", labelpad=7)\n    #hide_spines(ax, spines=[\"top\", \"right\", \"left\"])\n    ax.spines[\"bottom\"].set(linewidth=2)\n    ax.set_ylim(1)\n\nfig.text(x=0.05, y=1.01, s=\"Features Distributions\", fontsize=22, fontweight=\"bold\", fontfamily=\"serif\")\nfig.tight_layout(w_pad=2, h_pad=1.5)\nfig.show()","52a86d41":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()","9a94ebe7":"for col in df.columns:\n    df[col] = le.fit_transform(df[col])\n\ndf.head()","c010041d":"plt.figure(figsize = (15, 10))\nsns.heatmap(df.corr(), annot = True)","b4687917":"from sklearn.feature_selection import chi2\n\nX = df.drop('class' , axis=1)\ny = df['class']\n\nchi_scores = chi2(X,y)\n\nchi_scores","8ed33a7d":"p_values = pd.Series(chi_scores[1],index = X.columns)\np_values.sort_values(ascending = False , inplace = True)\n\np_values.plot.bar()","8c9cfdeb":"X_cleaned = X.drop(['gill-attachment' , 'veil-color' , 'cap-color'] , axis=1)","8e18d611":"from sklearn.model_selection import train_test_split\nx_train , x_test , y_train , y_test = train_test_split(X_cleaned,y,test_size = 0.3 , random_state = 1)","76cc2b20":"from sklearn.tree import DecisionTreeClassifier\n\ndec_model = DecisionTreeClassifier(random_state=0 , max_depth=5)\n\ndec_model.fit(x_train , y_train)\n\npred = dec_model.predict(x_test)","efe37bcc":"from sklearn.metrics import accuracy_score\n\naccuracy_score(y_test , pred)","ab011a6d":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier()\n\nrf.fit(x_train , y_train)\n\npred2 = rf.predict(x_test)","3048c9be":"accuracy_score(y_test , pred2)","aba759bd":"from sklearn.ensemble import GradientBoostingClassifier as gbc  # Same for AdaBoostClassifier\nclassifier_gbc = gbc()\n\nclassifier_gbc.fit(x_train,y_train)\n\npred3 = classifier_gbc.predict(x_test)","0a3aea31":"accuracy_score(y_test , pred3)","c6ce1b45":"from sklearn.metrics import classification_report , roc_auc_score , roc_curve , auc\n\nreport = classification_report(y_test , pred3)\n\nprint(report)","2232a413":"roc_auc_score(y_test,pred3)","a1174cd5":"fpr,tpr,threshold =roc_curve(y_test,pred3)\nauc = auc(fpr,tpr)\nplt.figure(figsize=(5,5),dpi=100)\nplt.plot(fpr,tpr,linestyle='-',label = \"(auc = %0.3f)\" % auc)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()\nplt.show()","1263ea73":"df = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\n","2d27c044":"from scipy.stats import chi2_contingency \n\nrows = 8\ncols = 3\nmagma_palette = sns.color_palette(\"magma\")\nfig = plt.figure(figsize=(15, 25))\nfig.set_facecolor(\"#fff\")\n\nfor idx, feature in enumerate(features):\n    ax = fig.add_subplot(rows, cols, idx+1)\n    ax.set_facecolor(\"#fff\")\n    ax.grid(axis=\"y\", linewidth=1, color=\"lightgrey\", linestyle=\"--\", zorder=0)\n    sns.countplot(x=feature, palette='rocket_r', hue=\"class\", data=df, ec=\"#000\", alpha=1, linewidth=1.5, zorder=2)\n    \n    feature_data_p = df[df[\"class\"] == \"p\"][feature].value_counts()\n    feature_data_e = df[df[\"class\"] == \"e\"][feature].value_counts()\n    # does count for each var of a feature for p and e\n    #print(feature_data_p)\n    \n    for idx_p in feature_data_p.index:\n        if idx_p not in feature_data_e.index:\n            feature_data_e[idx_p] = 0\n    \n    for idx_e in feature_data_e.index:\n        if idx_e not in feature_data_p.index:\n            feature_data_p[idx_e] = 0\n\n    # if index s does not have poisnous but has edible.. make it's poisonous index = 0        \n    #print(feature_data_p)\n        \n    feature_data_p = feature_data_p.sort_index()\n    feature_data_e = feature_data_e.sort_index()\n    \n    crosstable = pd.crosstab(feature_data_p.values, feature_data_e.values)\n    stat, p_value, dof , _ = chi2_contingency(crosstable)\n    \n    if idx % cols == 0:\n        ax.set_ylabel(\"Count\", fontsize=14, fontfamily=\"serif\", labelpad=7)\n    else:\n        ax.set_ylabel(\"\")\n        \n    ax.set_xlabel(feature, fontsize=14, fontfamily=\"serif\", labelpad=7)\n\n    ax.spines[\"bottom\"].set(linewidth=2)\n    ax.axvline(x=0, label=f\"chi^2 p_value: {np.round(p_value, 2)}\", visible=False, color=\"#000\")\n    ax.set_ylim(1)\n    ax.legend()\n\nfig.text(x=0.05, y=1.01, s=\"class - Features Distributions\", fontsize=22, fontweight=\"bold\", fontfamily=\"serif\")\nfig.tight_layout(w_pad=2, h_pad=1.5)\nfig.show()\n","d8b8a9f0":"most_useful_features = [\"cap-shape\", \"cap-surface\", \"cap-color\", \"odor\", \"gill-color\", \"stalk-surface-below-ring\", \"veil-color\", \"ring-number\", \"ring-type\", \"spore-print-color\", \"population\", \"habitat\", \"class\"]\ncleaned_dataset = df[most_useful_features]\ncleaned_dataset\n\n# Continue as done above again for these features","daa6c30b":"# Modelling with Kfold Cross Validation\n\n# strategy = KFold(n_splits=CONFIG.folds, random_state=CONFIG.seed, shuffle=True)\n# folds = strategy.split(encoded_dataset, labels)\n# accuracies, precisions = [], []\n# for fold_idx, (train_indexes, test_indexes) in enumerate(folds):\n#     print(f\"Fold: [{fold_idx+1}\/{CONFIG.folds}]\", end=\": \")\n#     train_data, train_labels = encoded_dataset[train_indexes], labels[train_indexes]\n#     test_data, test_labels = encoded_dataset[test_indexes], labels[test_indexes]\n    \n#     fold_model = DecisionTreeClassifier().fit(train_data, train_labels)\n    \n#     predictions = fold_model.predict(test_data)\n#     accuracy = accuracy_score(test_labels, predictions)\n#     precision = precision_score(test_labels, predictions)\n#     print(f\"Accuracy: {accuracy}\", end=\" \")\n#     print(f\"Precision: {precision}\", end=\"\\n\"*2)\n#     accuracies.append(accuracy)\n#     precisions.append(precision)\n    \n# accuracies, precisions = np.array(accuracies), np.array(precisions)\n# print(f\"Mean Accuracy: {accuracies.mean()}\\nMean Precision: {precisions.mean()}\")","8fa14f53":"**For GBClassifier**","f5d4d61f":"**Inspired by https:\/\/www.kaggle.com\/vad13irt\/uci-ml-mushrooms-classification**","62777518":"# Importing and Reading Data","d3946b4e":"**Heatmap**","0a908a25":"**Random Forest**","3e562e20":"# A different method of FE(chi2_contingency)","c89b5a12":"# Modelling","1d2853b7":"**Performing Chi Square Test to remove irrelevant features**","d719b412":"# EDA and FE","6af1aedb":"# Attribute Information: (classes: edible=e, poisonous=p)\n\ncap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n\ncap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n\ncap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n\nbruises: bruises=t,no=f\n\nodor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n\ngill-attachment: attached=a,descending=d,free=f,notched=n\n\ngill-spacing: close=c,crowded=w,distant=d\n\ngill-size: broad=b,narrow=n\n\ngill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n\nstalk-shape: enlarging=e,tapering=t\n\nstalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n\nstalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nstalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nveil-type: partial=p,universal=u\n\nveil-color: brown=n,orange=o,white=w,yellow=y\n\nring-number: none=n,one=o,two=t\n\nring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n\nspore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n\npopulation: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n\nhabitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d","8ef56a8f":"# Confusin Matrix \/ ROC","cd4bf656":"here first array represents chi square values and second array represnts p-values","ce8cef5d":"**GBClassifier**","6f73d151":"**Encoding**","a1cf77bf":"**Decision Tree**"}}