{"cell_type":{"07524fe4":"code","b1ad168f":"code","f09aafe6":"code","f72ac317":"code","3246adc8":"code","9cdb693b":"code","f853097b":"code","8ebd94e4":"markdown"},"source":{"07524fe4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b1ad168f":"df = pd.read_json('..\/input\/persiansmsspamword\/spam-words.json', encoding='utf8')\ndf.head()","f09aafe6":"!pip install arabic_reshaper\n!pip install python-bidi\n!pip install requests","f72ac317":" !pip install ar_wordcloud","3246adc8":"import codecs\nfrom wordcloud import WordCloud\nfrom bidi.algorithm import get_display\n\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\nimport arabic_reshaper # this was missing in your code\n\nfrom collections import Counter\n\nfrom wordcloud import WordCloud          # pip install wordcloud\nimport matplotlib.pyplot as plt          \n# -- Arabic text dependencies\nfrom arabic_reshaper import reshape      # pip install arabic-reshaper\nfrom bidi.algorithm import get_display   # pip install python-bidi\n\ntext = \" \".join(str(each) for each in df.spamWord)\n\nrtl = lambda w: get_display(reshape(f'{w}'))\n\nCOUNTS = Counter(\"\u0627\u0644\u0633\u0644\u0627\u0645 \u0639\u0644\u064a\u0643\u0645 \u0648\u0631\u062d\u0645\u0629 \u0627\u0644\u0644\u0647 \u0648 \u0628\u0631\u0643\u0627\u062a\u0647 \u0627\u0644\u0633\u0644\u0627\u0645 \u0643\u0644\u0645\u0629 \u062c\u0645\u064a\u0644\u0629\".split())\ncounts = {rtl(k):v for k, v in COUNTS.most_common(10)}\n\nurl= 'https:\/\/www.google.com\/get\/noto\/#naskh-arab'\n#url = 'https:\/\/fonts.google.com\/specimen\/Scheherazade?subset=arabic'\n#font_file = '.\/Scheherazade?subset=arabic.ttf'\n\n\nfont_file = '.\/NotoNaskhArabic-Regular.ttf' # download from: https:\/\/www.google.com\/get\/noto\nwordcloud = WordCloud(font_path=font_file).generate_from_frequencies(counts)\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","9cdb693b":"import arabic_reshaper\nfrom bidi.algorithm import get_display\n\ntext = \" \".join(str(each) for each in df.spamWord)\n\nreshaped_text = arabic_reshaper.reshape(text)\nbidi_text = get_display(reshaped_text)\nwordcloud = WordCloud(font_path='NotoNaskhArabic-Regular.ttf').generate(bidi_text)\nwordcloud.to_file(\"worCloud.png\")","f853097b":"from collections import Counter\n\nfrom wordcloud import WordCloud          # pip install wordcloud\nimport matplotlib.pyplot as plt          \n# -- Arabic text dependencies\nfrom arabic_reshaper import reshape      # pip install arabic-reshaper\nfrom bidi.algorithm import get_display   # pip install python-bidi\n\nrtl = lambda w: get_display(reshape(f'{w}'))\n\nCOUNTS = Counter(\"\u0627\u0644\u0633\u0644\u0627\u0645 \u0639\u0644\u064a\u0643\u0645 \u0648\u0631\u062d\u0645\u0629 \u0627\u0644\u0644\u0647 \u0648 \u0628\u0631\u0643\u0627\u062a\u0647 \u0627\u0644\u0633\u0644\u0627\u0645 \u0643\u0644\u0645\u0629 \u062c\u0645\u064a\u0644\u0629\".split())\ncounts = {rtl(k):v for k, v in COUNTS.most_common(10)}\n\nfont_file = '.\/NotoNaskhArabic-Regular.ttf' # download from: https:\/\/www.google.com\/get\/noto\nwordcloud = WordCloud(font_path=font_file).generate_from_frequencies(counts)\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","8ebd94e4":"#After that \"OSError: cannot open resource\" And many attempts. I still can't make an arabic WordCloud.  I hope that anyone can't perform that Arabic\/Persian WordCloud.\n\nI didn't find any code that could be successful in Kaggle or even in StackOverflow."}}