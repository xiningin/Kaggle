{"cell_type":{"3763ace3":"code","3a044ee2":"code","4eb565a6":"code","9f4e3a94":"code","a20fad5b":"code","e9507de8":"code","b331dbc4":"code","7e0bc7c2":"code","68f6b867":"code","1ce88deb":"code","a8e2262d":"code","a0d7adb2":"code","820affad":"code","a2ae232d":"code","3d7053ca":"code","97902769":"code","1ca055f7":"code","fe3c8761":"code","759cdc1e":"code","8d15bced":"code","87fff2b5":"code","676c0b4e":"code","047085eb":"code","565ecfb5":"code","1a44ed29":"code","ba0caa4d":"code","88f86255":"code","79ea9657":"code","e872e052":"code","1bbe6bdf":"code","5ff4a169":"code","167cd392":"code","69681106":"code","81683ed7":"code","2f2aa6e5":"code","8cb9d32f":"code","0ebaeeea":"code","c10908e6":"code","5166023a":"code","df4ea3a2":"code","9a288102":"code","a80f9c40":"code","bd89f98d":"code","f0e96030":"code","4256d1b4":"code","cdcc4041":"code","640280fe":"code","7498067e":"markdown","173efdf5":"markdown","aa27a9cf":"markdown","ac1dc846":"markdown","04758edd":"markdown","6ddc6ea0":"markdown","5a206ceb":"markdown","2ece1295":"markdown"},"source":{"3763ace3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3a044ee2":"df = pd.read_csv(\"..\/input\/fake-news\/train.csv\")","4eb565a6":"df.head()","9f4e3a94":"df.describe()","a20fad5b":"df.info()","e9507de8":"#Dropping the NaN values\ndf = df.dropna()","b331dbc4":"df.info()","7e0bc7c2":"#Independent variables\n\nx = df.drop('label',axis=1)","68f6b867":"x.head()\n","1ce88deb":"#depedent variable\ny=df['label']","a8e2262d":"y.head()","a0d7adb2":"x.shape","820affad":"y.shape","a2ae232d":"import tensorflow as tf\ntf.__version__","3d7053ca":"from tensorflow.keras.layers import Embedding","97902769":"from tensorflow.keras.preprocessing.sequence import pad_sequences","1ca055f7":"from tensorflow.keras.models import Sequential","fe3c8761":"from tensorflow.keras.preprocessing.text import one_hot","759cdc1e":"from tensorflow.keras.layers import LSTM","8d15bced":"from tensorflow.keras.layers import Dense","87fff2b5":"#Vocabulary\nvocab = 5000","676c0b4e":"msg = x.copy()","047085eb":"msg.reset_index(inplace=True)","565ecfb5":"msg.head()","1a44ed29":"import nltk\nimport re\nfrom nltk.corpus import stopwords","ba0caa4d":"nltk.download('stopwords')","88f86255":"# Data preprocessing\n\nfrom nltk.stem.porter import PorterStemmer\nps = PorterStemmer()\ncorpus = []\nfor i in range(0, len(msg)):\n    print(i)\n    #Substituting letters other than a-z with blank spaces\n    review = re.sub('[^a-zA-Z]', ' ', msg['title'][i]) \n    review = review.lower()\n    review = review.split()\n    \n    #Taking only the words from review which are not the stopwords\n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)","79ea9657":"corpus","e872e052":"onehot_rep = [one_hot(words,vocab) for words in corpus]\nonehot_rep","1bbe6bdf":"sen_len = 20\nembed = pad_sequences(onehot_rep,padding='pre',maxlen=sen_len)\nembed","5ff4a169":"embed[0]","167cd392":"embedding_vector_features = 40\n\nmodel = Sequential()\n\nmodel.add(Embedding(vocab,embedding_vector_features,input_length=sen_len))\n\nmodel.add(LSTM(100))\n\nmodel.add(Dense(1,activation = 'sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])","69681106":"model.summary()","81683ed7":"x_final = np.array(embed)\ny_final = np.array(y)","2f2aa6e5":"x_final.shape","8cb9d32f":"y_final.shape","0ebaeeea":"from sklearn.model_selection import train_test_split\nxtrain,xtest,ytrain,ytest = train_test_split(x_final,y_final,test_size=0.33,random_state=42)","c10908e6":"model.fit(xtrain,ytrain,validation_data=(xtest,ytest),epochs=10,batch_size=64)","5166023a":"ypred = model.predict_classes(xtest)","df4ea3a2":"from sklearn.metrics import confusion_matrix","9a288102":"confusion_matrix(ypred,ytest)","a80f9c40":"from sklearn.metrics import accuracy_score","bd89f98d":"accuracy_score(ypred,ytest)*100","f0e96030":"#Adding some dropout layers in order to reduce the overfitting problem\n\nfrom tensorflow.keras.layers import Dropout\n\nembedding_vector_features = 40\n\nmodel = Sequential()\n\nmodel.add(Embedding(vocab,embedding_vector_features,input_length=sen_len))\n\nmodel.add(Dropout(0.3))\n\nmodel.add(LSTM(100))\n\nmodel.add(Dropout(0.3))\n\nmodel.add(Dense(1,activation = 'sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])","4256d1b4":"model.fit(xtrain,ytrain,validation_data=(xtest,ytest),epochs=10,batch_size=64)","cdcc4041":"ypred = model.predict_classes(xtest)\n\nconfusion_matrix(ypred,ytest)","640280fe":"accuracy_score(ypred,ytest)*100","7498067e":"# One hot representation","173efdf5":"# Model creation","aa27a9cf":"# Performance metrics","ac1dc846":"# Model training","04758edd":"# Embedding representation","6ddc6ea0":"**We can able to see that the accuracy is little bit increased due to the hyper parameter tuning of the model by adding some dropout layer in order to solve the overfitting problem**","5a206ceb":"# Hyper parameter tuning","2ece1295":"It fills up the first layer prepadded with zeros to make the length of 20"}}