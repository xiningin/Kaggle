{"cell_type":{"8f2edb89":"code","01e44f63":"code","0beb8cff":"code","7e095fc4":"code","775688ad":"code","2472737a":"code","b9eb20a7":"code","d80d5555":"code","8cb86dbf":"code","ce93aac6":"code","528f66b9":"code","e6d26c0d":"code","7d63b9d2":"code","d7f9ca62":"code","bb2caf1c":"code","4e0efd83":"code","f96c8090":"code","018a8464":"code","86166344":"code","6abfc08c":"code","89044a15":"code","88e95577":"code","49857163":"code","db916673":"code","019dfbe0":"code","ebdbdc45":"code","c880da5d":"code","e997fbda":"code","9673e598":"code","cde811e6":"code","67073e55":"code","31c0d0e2":"code","06dcf404":"code","ffd98d2a":"code","3c9bb626":"code","71e57906":"code","596108e0":"code","e58efabb":"code","8d01ac4d":"code","e3b54314":"code","a5e1c9e0":"code","06e109db":"code","6fe1580b":"code","2be13d7a":"code","070eb53d":"code","d6a8310b":"code","fd92a938":"code","f84c4a41":"code","3bd12782":"code","b76f6465":"code","17955793":"code","9739e010":"code","8c209896":"code","1b8cc919":"code","fe1a34e9":"code","0cebf223":"code","88040aa6":"code","ad42d8e8":"code","c3fd641b":"code","eb513c76":"code","12806160":"code","35a98f1c":"code","5843cdd0":"code","bb13d5b4":"code","7ab1a492":"code","d7c2516d":"code","85c45e39":"code","87b2f20a":"code","f40a807b":"code","e5e11633":"code","2a1bff2f":"code","a23c873a":"code","09c7ccce":"code","1f2fd1dd":"code","08b3f9a5":"code","8ab285f8":"code","773d1737":"code","1dbd6d7d":"code","1a02dcd3":"code","cce1ea86":"code","f64d983c":"code","482b1aaf":"code","3ac5c516":"code","be1030df":"code","5a3e014e":"code","c06db70a":"code","a6aa4020":"code","2eb9a2c3":"code","028cd008":"code","ed30855c":"code","f5f8923c":"code","26d3ef91":"code","a4e639ad":"code","d0e61996":"code","6af52f7d":"code","7d3cf483":"code","19253c75":"code","258339f0":"code","698ca573":"code","89e53b36":"code","b57551cd":"code","c568fc94":"code","990b12ea":"code","1ea7eca0":"code","d5ad4922":"code","57dc07f5":"code","d341c269":"code","83d6292f":"code","10f8fa53":"code","4b548f5c":"code","d64b8013":"code","85ce1f57":"code","b8e8a9cb":"code","2ee2e4c8":"code","9dec7a90":"code","7f4ffe9c":"code","317f6faf":"code","95a1b9a0":"code","f60c9865":"code","68903112":"code","ab5d67ba":"code","f52da9c6":"code","008f4b1f":"code","43cb9e4e":"code","5c633f19":"code","cb871336":"code","0d4aad2b":"code","243d0ae2":"code","561a90f3":"code","632b2636":"code","307214b7":"code","83ee1f50":"code","0add96f0":"markdown","fe973a4f":"markdown","e0d8b9f7":"markdown","60e78986":"markdown","6ecf252f":"markdown","c6e22319":"markdown","6d3edc02":"markdown","cba16916":"markdown","a93c8028":"markdown","881f96ba":"markdown","1d930ce1":"markdown","98c0ca5c":"markdown","ab5fbe06":"markdown","c167781a":"markdown","aaa666bb":"markdown","92fdbf58":"markdown","35765957":"markdown","52cec92c":"markdown","7f3c95b0":"markdown","98b6e160":"markdown","5f82b9a9":"markdown","3138f0f1":"markdown","22ea6953":"markdown","6f45aa75":"markdown","67d869f8":"markdown","8a4a53db":"markdown","21c2bded":"markdown","789fe498":"markdown","57b2c931":"markdown","6a7e86d8":"markdown","d93a08bd":"markdown","5ebb5d38":"markdown"},"source":{"8f2edb89":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","01e44f63":"bank_data = pd.read_csv('\/kaggle\/input\/predicting-churn-for-bank-customers\/Churn_Modelling.csv')","0beb8cff":"bank_data.head()","7e095fc4":"\n\nbank_data.shape","775688ad":"bank_data.isnull().sum()","2472737a":"labels = 'Exited', 'Retained'\nsizes = [bank_data.Exited[bank_data['Exited']==1].count(), bank_data.Exited[bank_data['Exited']==0].count()]\nexplode = (0, 0.1)\nfig1, ax1 = plt.subplots(figsize=(10, 8))\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')\nplt.title(\"Proportion of customer churned and retained\", size = 20)\nplt.show()","b9eb20a7":"Bank_data_geography_wise = bank_data.groupby('Geography')['Exited'].value_counts().unstack().add_prefix('').rename_axis(None, axis =1).reset_index()","d80d5555":"Bank_data_geography_wise.head()","8cb86dbf":"Bank_data_geography_wise.columns =['Geography', 'Not_Exited', 'Exited']","ce93aac6":"Bank_data_geography_wise.head()","528f66b9":"Bank_data_geography_wise[\"Total\"] = Bank_data_geography_wise[\"Not_Exited\"] + Bank_data_geography_wise[\"Exited\"]","e6d26c0d":"Bank_data_geography_wise[\"Percentage_Exited\"] = (Bank_data_geography_wise[\"Exited\"] \/ Bank_data_geography_wise[\"Total\"]) * 100","7d63b9d2":"Bank_data_geography_wise[\"Percentage_Not_Exited\"] = (Bank_data_geography_wise[\"Not_Exited\"] \/ Bank_data_geography_wise[\"Total\"]) * 100","d7f9ca62":"Bank_data_geography_wise.head()","bb2caf1c":"Bank_data_geography_wise.plot(x=\"Geography\", y=[\"Percentage_Exited\", \"Percentage_Not_Exited\"], kind=\"bar\")\nplt.xlabel('Geography')\nplt.ylabel('Percentage')\nplt.title('Percentage of customers exited and not exited')\nplt.legend(bbox_to_anchor=(1.05, 1.0), loc='upper left')","4e0efd83":"bank_data_gender_wise = bank_data.groupby('Gender')['Exited'].value_counts().unstack().add_prefix('').rename_axis(None, axis =1).reset_index()","f96c8090":"bank_data_gender_wise.head()","018a8464":"bank_data_gender_wise.columns = ['Gender','Not_Exited','Exited']","86166344":"bank_data_gender_wise[\"Total\"] = bank_data_gender_wise['Not_Exited'] + bank_data_gender_wise['Exited']","6abfc08c":"bank_data_gender_wise.head()","89044a15":"bank_data_gender_wise[\"Percentage_Exited\"] = (bank_data_gender_wise[\"Exited\"] \/ bank_data_gender_wise[\"Total\"]) * 100","88e95577":"bank_data_gender_wise[\"Percentage_Not_Exited\"] = (bank_data_gender_wise[\"Not_Exited\"] \/ bank_data_gender_wise[\"Total\"]) * 100","49857163":"bank_data_gender_wise.head()","db916673":"bank_data_gender_wise.plot(x = \"Gender\", y = [\"Percentage_Exited\", \"Percentage_Not_Exited\"], kind = \"bar\")\nplt.xlabel('Gender')\nplt.ylabel('Percentage')\nplt.title('Percentage of customers Exited and Not Exited (Gender wise)')\nplt.legend(bbox_to_anchor=(1.05, 1.0), loc='upper left')","019dfbe0":"print(\"Min Age in dataset\", min(bank_data[\"Age\"].unique()))\nprint(\"Max Tenure in dataset\", max(bank_data[\"Age\"].unique()))","ebdbdc45":"bank_data[\"Age_Group\"] = pd.cut(x=bank_data['Age'], bins = [0, 20 , 35, 50, 100], \n                                labels = [\"Teenager\",\"Younger\",\"Elder\",\"Older\"])","c880da5d":"bank_data.head()","e997fbda":"bank_data.tail()","9673e598":"bank_data_age_group_wise = bank_data.groupby('Age_Group')['Exited'].value_counts().unstack().add_prefix('').rename_axis(None , axis = 1).reset_index()","cde811e6":"bank_data_age_group_wise.head()","67073e55":"bank_data_age_group_wise.columns = [\"Age_Group\",\"Not_Exited\",\"Exited\"]","31c0d0e2":"bank_data_age_group_wise.head()","06dcf404":"bank_data_age_group_wise[\"Total\"] = bank_data_age_group_wise[\"Not_Exited\"] + bank_data_age_group_wise[\"Exited\"]","ffd98d2a":"bank_data_age_group_wise[\"Percentage_Exited\"] = (bank_data_age_group_wise[\"Exited\"] \/ bank_data_age_group_wise[\"Total\"]) * 100","3c9bb626":"bank_data_age_group_wise[\"Percentage_Not_Exited\"] = (bank_data_age_group_wise[\"Not_Exited\"] \/ bank_data_age_group_wise[\"Total\"]) * 100","71e57906":"bank_data_age_group_wise.head()","596108e0":"bank_data_age_group_wise.plot(x = \"Age_Group\", y = [\"Percentage_Exited\", \"Percentage_Not_Exited\"], kind = \"bar\")\nplt.xlabel('Age_Group')\nplt.ylabel('Percentage')\nplt.title('Percentage of customers Exited and Not Exited (Age Group Wise)')\nplt.legend(bbox_to_anchor=(1.05, 1.0), loc='upper left')","e58efabb":"g = sns.FacetGrid(bank_data, col = \"Exited\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","8d01ac4d":"plt.figure(figsize=(12,5))\nplt.title(\"Box plot for credit score and customer exited\")\nsns.boxplot(y=\"Exited\", x=\"CreditScore\", data = bank_data, orient=\"h\", palette = 'magma')\nplt.xlabel('Credit Score')\nplt.ylabel('Customer _Exited (1 = True, 0 = False) ')","e3b54314":"g = sns.FacetGrid(bank_data, col = \"Exited\")\ng.map(sns.distplot, \"CreditScore\", bins = 25)\nplt.show()","a5e1c9e0":"plt.figure(figsize=(12,5))\nplt.title(\"Box plot for salary and customer exited\")\nsns.boxplot(y=\"Exited\", x=\"EstimatedSalary\", data = bank_data, orient=\"h\", palette = 'magma')\nplt.xlabel('Estimated Salary')\nplt.ylabel('Customer _Exited (1 = True, 0 = False) ')","06e109db":"g = sns.FacetGrid(bank_data, col = \"Exited\")\ng.map(sns.distplot, \"EstimatedSalary\", bins = 25)\nplt.show()","6fe1580b":"g = sns.FacetGrid(bank_data, col = \"Exited\")\ng.map(sns.distplot, \"Balance\", bins = 25)\nplt.show()","2be13d7a":"Bank_data_No_of_products = bank_data.groupby('NumOfProducts')['Exited'].value_counts().unstack().add_prefix('').rename_axis(None, axis =1).reset_index()","070eb53d":"Bank_data_No_of_products.head()","d6a8310b":"Bank_data_No_of_products.columns = ['Product_count','Not_Exited','Exited']","fd92a938":"Bank_data_No_of_products.head(10)","f84c4a41":"Bank_data_No_of_products[\"Not_Exited\"] = Bank_data_No_of_products[\"Not_Exited\"].fillna(0)","3bd12782":"\nBank_data_No_of_products.head()","b76f6465":"Bank_data_No_of_products[\"Total\"] = Bank_data_No_of_products[\"Not_Exited\"] + Bank_data_No_of_products[\"Exited\"]\nBank_data_No_of_products[\"Percentage_Exited\"] = (Bank_data_No_of_products[\"Exited\"] \/ Bank_data_No_of_products[\"Total\"]) * 100\nBank_data_No_of_products[\"Percentage_Not_Exited\"] = (Bank_data_No_of_products[\"Not_Exited\"] \/ Bank_data_No_of_products[\"Total\"]) *100","17955793":"Bank_data_No_of_products.head()","9739e010":"Bank_data_No_of_products.plot(x = \"Product_count\", y = [\"Percentage_Exited\", \"Percentage_Not_Exited\"], kind = \"bar\")\nplt.xlabel('Product_count')\nplt.ylabel('Percentage')\nplt.title('Percentage of customers Exited and Not Exited ( Product_count wise)')\nplt.legend(bbox_to_anchor=(1.05, 1.0), loc='upper left')","8c209896":"Bank_data_Tenure = bank_data.groupby('Tenure')['Exited'].value_counts().unstack().add_prefix('').rename_axis(None, axis =1).reset_index()","1b8cc919":"Bank_data_Tenure.head(10)","fe1a34e9":"Bank_data_Tenure.columns = ['Tenure','Not_Exited','Exited']\nBank_data_Tenure.head(10)","0cebf223":"Bank_data_Tenure[\"Total\"] = Bank_data_Tenure[\"Not_Exited\"] + Bank_data_Tenure[\"Exited\"]\nBank_data_Tenure[\"Percentage_Exited\"] = (Bank_data_Tenure[\"Exited\"] \/ Bank_data_Tenure[\"Total\"]) * 100\nBank_data_Tenure[\"Percentage_Not_Exited\"] = (Bank_data_Tenure[\"Not_Exited\"] \/ Bank_data_Tenure[\"Total\"]) *100\nBank_data_Tenure.head(10)","88040aa6":"Bank_data_Tenure.plot(x = \"Tenure\", y = [\"Percentage_Exited\", \"Percentage_Not_Exited\"], kind = \"bar\")\nplt.xlabel('Tenure')\nplt.ylabel('Percentage')\nplt.title('Percentage of customers Exited and Not Exited ( Tenure wise)')\nplt.legend(bbox_to_anchor=(1.05, 1.0), loc='upper left')","ad42d8e8":"Bank_data_IsActiveMember = bank_data.groupby('IsActiveMember')['Exited'].value_counts().unstack().add_prefix('').rename_axis(None, axis =1).reset_index()","c3fd641b":"Bank_data_IsActiveMember.columns = ['IsActiveMember','Not_Exited','Exited']\nBank_data_IsActiveMember.head(10)","eb513c76":"Bank_data_IsActiveMember[\"Total\"] = Bank_data_IsActiveMember[\"Not_Exited\"] + Bank_data_IsActiveMember[\"Exited\"]\nBank_data_IsActiveMember[\"Percentage_Exited\"] = (Bank_data_IsActiveMember[\"Exited\"] \/ Bank_data_IsActiveMember[\"Total\"]) * 100\nBank_data_IsActiveMember[\"Percentage_Not_Exited\"] = (Bank_data_IsActiveMember[\"Not_Exited\"] \/ Bank_data_IsActiveMember[\"Total\"]) *100\nBank_data_IsActiveMember.head(10)","12806160":"Bank_data_IsActiveMember.plot(x = \"IsActiveMember\", y = [\"Percentage_Exited\", \"Percentage_Not_Exited\"], kind = \"bar\")\nplt.xlabel('IsActiveMember')\nplt.ylabel('Percentage')\nplt.title('Percentage of customers Exited and Not Exited ( Active Member wise)')\nplt.legend(bbox_to_anchor=(1.05, 1.0), loc='upper left')","35a98f1c":"Bank_data_HasCrCard = bank_data.groupby('HasCrCard')['Exited'].value_counts().unstack().add_prefix('').rename_axis(None, axis =1).reset_index()","5843cdd0":"Bank_data_HasCrCard.columns = ['HasCrCard','Not_Exited','Exited']\nBank_data_HasCrCard.head(10)","bb13d5b4":"Bank_data_HasCrCard[\"Total\"] = Bank_data_HasCrCard[\"Not_Exited\"] + Bank_data_HasCrCard[\"Exited\"]\nBank_data_HasCrCard[\"Percentage_Exited\"] = (Bank_data_HasCrCard[\"Exited\"] \/ Bank_data_HasCrCard[\"Total\"]) * 100\nBank_data_HasCrCard[\"Percentage_Not_Exited\"] = (Bank_data_HasCrCard[\"Not_Exited\"] \/ Bank_data_HasCrCard[\"Total\"]) *100\nBank_data_HasCrCard.head(10)","7ab1a492":"Bank_data_HasCrCard.plot(x = \"HasCrCard\", y = [\"Percentage_Exited\", \"Percentage_Not_Exited\"], kind = \"bar\")\nplt.xlabel('HasCrCard')\nplt.ylabel('Percentage')\nplt.title('Percentage of customers Exited and Not Exited ( HasCrCard wise)')\nplt.legend(bbox_to_anchor=(1.05, 1.0), loc='upper left')","d7c2516d":"print(\"Min Balance in dataset\", min(bank_data[\"Balance\"].unique()))\nprint(\"Max Balance in dataset\", max(bank_data[\"Balance\"].unique()))","85c45e39":"bank_data[\"Balance_1\"] = pd.cut(x=bank_data['Balance'], bins = [-1, 10000, 100000, 200000,300000 ], \n                                labels = [\"Low balance\",\"Medium balance\",\"High balance\",\"Highest balance\"])","87b2f20a":"bank_data.head()","f40a807b":"bank_data_balance = bank_data.groupby('Balance_1')['Exited'].value_counts().unstack().add_prefix('').rename_axis(None , axis = 1).reset_index()","e5e11633":"bank_data_balance.columns = ['Balance_1','Not_Exited','Exited']\nbank_data_balance.head(10)","2a1bff2f":"bank_data_balance[\"Not_Exited\"] = bank_data_balance[\"Not_Exited\"].fillna(0)","a23c873a":"bank_data_balance[\"Total\"] = bank_data_balance[\"Not_Exited\"] + bank_data_balance[\"Exited\"]\nbank_data_balance[\"Percentage_Exited\"] = (bank_data_balance[\"Exited\"] \/ bank_data_balance[\"Total\"]) * 100\nbank_data_balance[\"Percentage_Not_Exited\"] = (bank_data_balance[\"Not_Exited\"] \/ bank_data_balance[\"Total\"]) *100\nbank_data_balance.head(10)","09c7ccce":"bank_data_balance.plot(x = \"Balance_1\", y = [\"Percentage_Exited\", \"Percentage_Not_Exited\"], kind = \"bar\")\nplt.xlabel('Balance_1')\nplt.ylabel('Percentage')\nplt.title('Percentage of customers Exited and Not Exited ( Balance wise)')\nplt.legend(bbox_to_anchor=(1.05, 1.0), loc='upper left')","1f2fd1dd":"print(\"Min CreditScore\", min(bank_data[\"CreditScore\"].unique()))\nprint(\"Max CreditScore\", max(bank_data[\"CreditScore\"].unique()))","08b3f9a5":"bank_data[\"CreditScore_1\"] = pd.cut(x=bank_data['CreditScore'], bins = [249, 500, 650, 851 ], \n                                labels = [\"Low score\",\"Medium score\",\"High score\"])","8ab285f8":"bank_data.head()","773d1737":"bank_data_creditscore = bank_data.groupby('CreditScore_1')['Exited'].value_counts().unstack().add_prefix('').rename_axis(None , axis = 1).reset_index()","1dbd6d7d":"bank_data_creditscore.columns = ['CreditScore_1','Not_Exited','Exited']\nbank_data_creditscore.head(10)","1a02dcd3":"bank_data_creditscore[\"Total\"] = bank_data_creditscore[\"Not_Exited\"] + bank_data_creditscore[\"Exited\"]\nbank_data_creditscore[\"Percentage_Exited\"] = (bank_data_creditscore[\"Exited\"] \/ bank_data_creditscore[\"Total\"]) * 100\nbank_data_creditscore[\"Percentage_Not_Exited\"] = (bank_data_creditscore[\"Not_Exited\"] \/ bank_data_creditscore[\"Total\"]) *100\nbank_data_creditscore.head(10)","cce1ea86":"bank_data_creditscore.plot(x = \"CreditScore_1\", y = [\"Percentage_Exited\", \"Percentage_Not_Exited\"], kind = \"bar\")\nplt.xlabel('CreditScore_1')\nplt.ylabel('Percentage')\nplt.title('Percentage of customers Exited and Not Exited ( CreditScore wise)')\nplt.legend(bbox_to_anchor=(1.05, 1.0), loc='upper left')","f64d983c":"print(\"Min Estimated Salary in dataset\", min(bank_data[\"EstimatedSalary\"].unique()))\nprint(\"Max Estimated Salary in dataset\", max(bank_data[\"EstimatedSalary\"].unique()))","482b1aaf":"bank_data[\"EstimatedSalary_1\"] = pd.cut(x=bank_data['EstimatedSalary'], bins = [10, 1000, 10000, 50000, 100000, 200000 ], \n                                labels = [\"Extremly_low\",\"Low\",\"Average\",\"Above Average\",\"High\"])","3ac5c516":"bank_data.head()","be1030df":"bank_data_EstimatedSalary = bank_data.groupby('EstimatedSalary_1')['Exited'].value_counts().unstack().add_prefix('').rename_axis(None , axis = 1).reset_index()","5a3e014e":"bank_data_EstimatedSalary.columns = ['EstimatedSalary_1','Not_Exited','Exited']\nbank_data_creditscore.head(10)","c06db70a":"bank_data_EstimatedSalary[\"Total\"] = bank_data_EstimatedSalary[\"Not_Exited\"] + bank_data_EstimatedSalary[\"Exited\"]\nbank_data_EstimatedSalary[\"Percentage_Exited\"] = (bank_data_EstimatedSalary[\"Exited\"] \/ bank_data_EstimatedSalary[\"Total\"]) * 100\nbank_data_EstimatedSalary[\"Percentage_Not_Exited\"] = (bank_data_EstimatedSalary[\"Not_Exited\"] \/ bank_data_EstimatedSalary[\"Total\"]) *100\nbank_data_EstimatedSalary.head(10)","a6aa4020":"bank_data_EstimatedSalary.plot(x = \"EstimatedSalary_1\", y = [\"Percentage_Exited\", \"Percentage_Not_Exited\"], kind = \"bar\")\nplt.xlabel('EstimatedSalary')\nplt.ylabel('Percentage')\nplt.title('Percentage of customers Exited and Not Exited ( EstimatedSalary wise)')\nplt.legend(bbox_to_anchor=(1.05, 1.0), loc='upper left')","2eb9a2c3":"bank_data.head()","028cd008":"bank_data.drop(['RowNumber','CustomerId','Surname','CreditScore','Age','Tenure','Balance','HasCrCard','EstimatedSalary'], axis = 1, inplace = True)","ed30855c":"bank_data.head()","f5f8923c":"bank_data = pd.get_dummies(bank_data, columns=[\"Geography\",\"Gender\",\"NumOfProducts\"])","26d3ef91":"bank_data.head()","a4e639ad":"replace_nums = {\"Age_Group\":     {\"Teenager\": 0, \"Younger\": 1, \"Elder\":2, \"Older\":3},\n                \"EstimatedSalary_1\": {\"Extremly_low\": 0, \"Low\": 1, \"Average\": 2, \"Above Average\": 3,\n                                  \"High\": 4},\n                \"CreditScore_1\": {\"Low score\":0, \"Medium score\":1, \"High score\":2},\n                \"Balance_1\":{\"Low balance\":0, \"Medium balance\":1, \"High balance\":2, \"Highest balance\":3}\n               }","d0e61996":"bank_data.replace(replace_nums, inplace=True)\nbank_data.head()","6af52f7d":"corrmat = bank_data.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(bank_data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","7d3cf483":"bank_data.head()","19253c75":"Predictors = bank_data.drop(['Exited'], axis = 1)\nTarget = bank_data['Exited']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(Predictors, Target, test_size = 0.20, random_state = 42, stratify = Target)","258339f0":"from sklearn.ensemble import ExtraTreesClassifier\nimport matplotlib.pyplot as plt\nmodel = ExtraTreesClassifier()\nmodel.fit(X_train,y_train)\nprint(model.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(model.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\nplt.show()","698ca573":"plt.plot(model.feature_importances_)\nplt.xticks(np.arange(X_train.shape[1]), X_train.columns.tolist(), rotation=90);","89e53b36":"X_train.head()","b57551cd":"y_train.head()","c568fc94":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","990b12ea":"# Support functions\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV\nfrom scipy.stats import uniform\n\n# Fit models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n\n# Scoring functions\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import roc_curve","1ea7eca0":"# Function to give best model score and parameters\ndef best_model(model):\n    print(model.best_score_)    \n    print(model.best_params_)\n    print(model.best_estimator_)\ndef get_auc_scores(y_actual, method,method2):\n    auc_score = roc_auc_score(y_actual, method); \n    fpr_df, tpr_df, _ = roc_curve(y_actual, method2); \n    return (auc_score, fpr_df, tpr_df)","d5ad4922":"# Fit logistic regression\nparam_grid = {'C': [0.1,0.5,1,10,50,100], 'max_iter': [100,150,200], 'fit_intercept':[True],'intercept_scaling':[1],\n              'penalty':['l2'], 'tol':[0.00001,0.0001,0.000001]}\nlr = GridSearchCV(LogisticRegression(solver='lbfgs'),param_grid, cv=10, refit=True, verbose=0)\nlr.fit(X_train,y_train)\nbest_model(lr)","57dc07f5":"# Fit best logistic regression\nlr_best = LogisticRegression(C=0.5, class_weight=None, dual=False, fit_intercept=True,intercept_scaling=1, max_iter=100, multi_class='ovr',n_jobs=None, \n                                penalty='l2', random_state=None, solver='lbfgs',tol=1e-05, verbose=0, warm_start=False)\nlr_best.fit(X_train,y_train)","d341c269":"y_test.head(10)","83d6292f":"X_test.head(10)","10f8fa53":"y_pred = lr_best.predict(X_test) \nprint(':',\"%.3f\" % accuracy_score(y_pred, y_test))","4b548f5c":"from sklearn.metrics import confusion_matrix\nconfmat = confusion_matrix(y_true=y_test, y_pred=y_pred)\nfig, ax = plt.subplots(figsize=(2.5, 2.5))\nax.matshow(confmat, cmap=plt.cm.Blues, alpha=0.3)\nfor i in range(confmat.shape[0]):\n    for j in range(confmat.shape[1]):\n        ax.text(x=j, y=i,s=confmat[i, j],va='center', ha='center')\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\nplt.show()","d64b8013":"r_probs = [0 for _ in range(len(y_test))]\nlr_probs = lr_best.predict_proba(X_test)\nlr_probs","85ce1f57":"r_probs","b8e8a9cb":"lr_probs_p = lr_probs[:, 1]\nlr_probs_p","2ee2e4c8":"r_auc = roc_auc_score(y_test, r_probs)\nlr_auc = roc_auc_score(y_test, lr_probs_p)","9dec7a90":"print('Random (chance) Prediction: AUROC = %.3f' % (r_auc))\nprint('Logistic Regression: AUROC = %.3f' % (lr_auc))","7f4ffe9c":"r_fpr, r_tpr, _ = roc_curve(y_test, r_probs)\nlr_fpr, lr_tpr, _ = roc_curve(y_test, lr_probs_p)","317f6faf":"plt.plot(r_fpr, r_tpr, linestyle='--', label='Random prediction (AUROC = %0.3f)' % r_auc)\nplt.plot(lr_fpr, lr_tpr, marker='.', label='Logistic Regression (AUROC = %0.3f)' % lr_auc)\n# Title\nplt.title('ROC Plot')\n# Axis labels\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n# Show legend\nplt.legend() # \n# Show plot\nplt.show()","95a1b9a0":"# Fit logistic regression with degree 2 polynomial\nparam_grid = {'C': [0.1,10,50], 'max_iter': [300,500], 'fit_intercept':[True],'intercept_scaling':[1],'penalty':['l2'],\n              'tol':[0.0001,0.000001]}\nlr_2 = PolynomialFeatures(degree=2)\nlr_2_Grid = GridSearchCV(LogisticRegression(solver = 'liblinear'),param_grid, cv=5, refit=True, verbose=0)\nlr_2_Grid.fit(X_train,y_train)\nbest_model(lr_2_Grid)","f60c9865":"# Fit best_logistic regression with pol 2 kernel\nlr_2 = PolynomialFeatures(degree=2)\nlr_2d = LogisticRegression(C=0.1, class_weight=None, dual=False, fit_intercept=True,intercept_scaling=1, max_iter=300, multi_class='ovr', n_jobs=None, \n                              penalty='l2', random_state=None, solver='liblinear',tol=0.0001, verbose=0, warm_start=False)\nlr_2d.fit(X_train,y_train)","68903112":"y_pred_1 = lr_2d.predict(X_test) \nprint(':',\"%.3f\" % accuracy_score(y_pred_1, y_test))","ab5d67ba":"from sklearn.metrics import confusion_matrix\nconfmat = confusion_matrix(y_true=y_test, y_pred=y_pred_1)\nfig, ax = plt.subplots(figsize=(2.5, 2.5))\nax.matshow(confmat, cmap=plt.cm.Blues, alpha=0.3)\nfor i in range(confmat.shape[0]):\n    for j in range(confmat.shape[1]):\n        ax.text(x=j, y=i,s=confmat[i, j],va='center', ha='center')\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\nplt.show()","f52da9c6":"lr2_probs = lr_2d.predict_proba(X_test)\nlr2_probs = lr2_probs[:, 1]\nr_auc = roc_auc_score(y_test, r_probs)\nlr2_auc = roc_auc_score(y_test, lr2_probs)\nprint('Random (chance) Prediction: AUROC = %.3f' % (r_auc))\nprint('Logistic Regression Degree 2: AUROC = %.3f' % (lr2_auc))\nr_fpr, r_tpr, _ = roc_curve(y_test, r_probs)\nlr_2_fpr, lr_2_tpr, _ = roc_curve(y_test, lr2_probs)\nplt.plot(r_fpr, r_tpr, linestyle='--', label='Random prediction (AUROC = %0.3f)' % r_auc)\nplt.plot(lr_2_fpr, lr_2_tpr, marker='.', label='Logistic Regression degree 2(AUROC = %0.3f)' % lr2_auc)\n# Title\nplt.title('ROC Plot')\n# Axis labels\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n# Show legend\nplt.legend() # \n# Show plot\nplt.show()","008f4b1f":"# Fit random forest classifier\nparam_grid = {'max_depth': [3, 5, 6, 7, 8], 'max_features': [2,4,6,7,8,9],'n_estimators':[50,100],'min_samples_split': [3, 5, 6, 7]}\nRanFor_grid = GridSearchCV(RandomForestClassifier(), param_grid, cv=5, refit=True, verbose=0)\nRanFor_grid.fit(X_train, y_train)\nbest_model(RanFor_grid)","43cb9e4e":"# Fit best_Random Forest classifier\nRF = RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',max_depth=8, max_features=6, max_leaf_nodes=None,min_impurity_decrease=0.0,\n                            min_impurity_split=None,min_samples_leaf=1, min_samples_split=3,min_weight_fraction_leaf=0.0, n_estimators=50, n_jobs=None,\n                            oob_score=False, random_state=None, verbose=0,warm_start=False)\nRF.fit(X_train, y_train)","5c633f19":"y_pred_4 = RF.predict(X_test) \nprint(':',\"%.3f\" % accuracy_score(y_pred_4, y_test))","cb871336":"from sklearn.metrics import confusion_matrix\nconfmat = confusion_matrix(y_true=y_test, y_pred=y_pred_4)\nfig, ax = plt.subplots(figsize=(2.5, 2.5))\nax.matshow(confmat, cmap=plt.cm.Blues, alpha=0.3)\nfor i in range(confmat.shape[0]):\n    for j in range(confmat.shape[1]):\n        ax.text(x=j, y=i,s=confmat[i, j],va='center', ha='center')\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\nplt.show()","0d4aad2b":"RF_probs = RF.predict_proba(X_test)\nRF_probs = RF_probs[:, 1]\nr_auc = roc_auc_score(y_test, r_probs)\nRF_auc = roc_auc_score(y_test, RF_probs)\nprint('Random (chance) Prediction: AUROC = %.3f' % (r_auc))\nprint('Random Forest: AUROC = %.3f' % (RF_auc))\nr_fpr, r_tpr, _ = roc_curve(y_test, r_probs)\nrf_fpr, rf_tpr, _ = roc_curve(y_test, RF_probs)\nplt.plot(r_fpr, r_tpr, linestyle='--', label='Random prediction (AUROC = %0.3f)' % r_auc)\nplt.plot(rf_fpr, rf_tpr, marker='.', label='Random Forest(AUROC = %0.3f)' % RF_auc)\n# Title\nplt.title('ROC Plot')\n# Axis labels\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n# Show legend\nplt.legend() # \n# Show plot\nplt.show()","243d0ae2":"# Fit Extreme Gradient boosting classifier\nparam_grid = {'max_depth': [5,6,7,8], 'gamma': [0.01,0.001,0.001],'min_child_weight':[1,5,10], 'learning_rate': [0.05,0.1, 0.2, 0.3], 'n_estimators':[5,10,20,100]}\nxgb_grid = GridSearchCV(XGBClassifier(), param_grid, cv=5, refit=True, verbose=0)\nxgb_grid.fit(X_train, y_train)\nbest_model(xgb_grid)","561a90f3":"# Fit best_Extreme Gradient Boost Classifier\nXGB = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,colsample_bytree=1, gamma=0.01, learning_rate=0.2, max_delta_step=0,max_depth=5,\n                    min_child_weight=10, missing=None, n_estimators=20,n_jobs=0, nthread=None, objective='binary:logistic', random_state=0,reg_alpha=0, \n                    reg_lambda=1, scale_pos_weight=1, seed=None, silent=True, subsample=1)\nXGB.fit(X_train, y_train)","632b2636":"y_pred_5 = XGB.predict(X_test) \nprint(':',\"%.3f\" % accuracy_score(y_pred_5, y_test))","307214b7":"from sklearn.metrics import confusion_matrix\nconfmat = confusion_matrix(y_true=y_test, y_pred=y_pred_5)\nfig, ax = plt.subplots(figsize=(2.5, 2.5))\nax.matshow(confmat, cmap=plt.cm.Blues, alpha=0.3)\nfor i in range(confmat.shape[0]):\n    for j in range(confmat.shape[1]):\n        ax.text(x=j, y=i,s=confmat[i, j],va='center', ha='center')\nplt.xlabel('Predicted label')\nplt.ylabel('True label')\nplt.show()","83ee1f50":"XGB_probs = XGB.predict_proba(X_test)\nXGB_probs = XGB_probs[:, 1]\nr_auc = roc_auc_score(y_test, r_probs)\nXGB_auc = roc_auc_score(y_test, XGB_probs)\nRF_auc = roc_auc_score(y_test, RF_probs)\nlr2_auc = roc_auc_score(y_test, lr2_probs)\nlr_auc = roc_auc_score(y_test, lr_probs_p)\nr_fpr, r_tpr, _ = roc_curve(y_test, r_probs)\nXGB_fpr, XGB_tpr, _ = roc_curve(y_test, XGB_probs)\nplt.plot(r_fpr, r_tpr, linestyle='--', label='Random prediction (AUROC = %0.3f)' % r_auc)\nplt.plot(lr_fpr, lr_tpr, marker='.', label='Logistic Regression(AUROC = %0.3f)' % lr_auc)\nplt.plot(lr_2_fpr, lr_2_tpr, marker='.', label='Logistic Regression degree 2(AUROC = %0.3f)' % lr2_auc)\nplt.plot(rf_fpr, rf_tpr, marker='.', label='Random Forest(AUROC = %0.3f)' % RF_auc)\nplt.plot(XGB_fpr, XGB_tpr, marker='.', label='XGB (AUROC = %0.3f)' % XGB_auc)\n# Title\nplt.title('ROC Plot')\n# Axis labels\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\n# Show legend\nplt.legend() # \n# Show plot\nplt.show()","0add96f0":"### Accuracy","fe973a4f":"### Accuracy","e0d8b9f7":"### Customers having product count 3 & 4 have more churn rate","60e78986":"### Plotting co-relation plot","6ecf252f":"### Adding new features based on the results of EDA","c6e22319":"### It seems that there is no relation between creditscore and customer exited","6d3edc02":"### Calculating AUROC","cba16916":"### Accuracy","a93c8028":"### Exploratory data analysis","881f96ba":"### ROC AUC Curve","1d930ce1":"### Accuracy","98c0ca5c":"### Calculating ROC Curve","ab5fbe06":"### Selecting best model","c167781a":"### Younger customer stick with the company compare to older","aaa666bb":"### Conclusion : - Most of the customer exited are from older age group (50 to 70 years)","92fdbf58":"### Building machine learning model for predicting churn","35765957":"### Dividing the dataset into training and test set","52cec92c":"### Customer having low credit score have slightly more chances to churn than customer having high credit score","7f3c95b0":"### It seems that there is no so-relation between balance and estimated salary","98b6e160":"### Conclusion : - 20 Percent customer has churned only. Machine learning model accuracy must be 80 percent so that it is useful for the bank.","5f82b9a9":"### Feature Importance","3138f0f1":"### Printing AUROC Score","22ea6953":"### Checking null value","6f45aa75":"### Conclusion : - More female exited than men","67d869f8":"### Prediction probablities","8a4a53db":"### Probablity for positive outcome","21c2bded":"### From above plot it can be seen that as the balance increases churn percentage increases","789fe498":"### No any relation found between tenure and percentage of customer exited","57b2c931":"### Confusion matrix","6a7e86d8":"### Conclusion : - In geograpghy Germany more customers exited compared to spain and france","d93a08bd":"### Plotting the curve","5ebb5d38":"### Roc Auc Curve"}}