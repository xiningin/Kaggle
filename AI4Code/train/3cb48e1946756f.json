{"cell_type":{"1b821fe4":"code","af88aa75":"code","8b1b7cf3":"code","c5f52b37":"code","599d5dae":"code","01654185":"code","f9aaa744":"code","6440241f":"code","c6721a44":"code","c09774c8":"code","4d93538b":"code","d42bac44":"code","7d36fbd7":"code","d45e1a51":"code","12f7f577":"code","de7bd59d":"code","dba677a6":"code","b0531f7e":"code","64bd6948":"markdown","3faf4ede":"markdown","6e36f72a":"markdown"},"source":{"1b821fe4":"!pip uninstall --y kaggle\n!pip install --upgrade pip\n!pip install kaggle==1.5.6","af88aa75":"!mkdir -p ~\/.kaggle\n!cp ..\/input\/kagglejson\/kaggle.json ~\/.kaggle\n!ls -lha ..\/input\/kagglejson\/kaggle.json\n!chmod 600 ~\/.kaggle\/kaggle.json","8b1b7cf3":"!kaggle competitions download -c 2020termproject-18011826","c5f52b37":"!unzip 2020termproject-18011826.zip","599d5dae":"import pandas as pd \nimport numpy as np\nimport torch \nimport torchvision.datasets as datasets\nimport torchvision.transforms as transforms\nimport torch.optim as optim\nimport torch.nn.functional as F\nimport torch.nn as nn","01654185":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\ntorch.manual_seed(777)\nif device == 'cuda':\n    torch.cuda.manual_seed_all(777)","f9aaa744":"train = pd.read_csv('..\/input\/2020termproject-18011826\/train_sweetpotato_price.csv')\nprint(train.head(10))\nprint(train.info())\n","6440241f":"learning_rate = 0.001\ntraining_epoch = 2000\nbatch_size = 50 ","c6721a44":"x_train = train.iloc[:,1:-1]\ny_train = train.iloc[:,[-1]]\n\nx_train = np.array(x_train)\ny_train = np.array(y_train)\n\nx_train = torch.FloatTensor(x_train)\ny_train = torch.FloatTensor(y_train)\n\nprint(x_train.shape)\nprint(y_train.shape)","c09774c8":"train_dataset = torch.utils.data.TensorDataset(x_train,y_train)\n\ndata_loader = torch.utils.data.DataLoader(dataset = train_dataset,\n                                          batch_size = batch_size,\n                                          shuffle = True,\n                                          drop_last=True)\n\n","4d93538b":"linear1 = nn.Linear(4,8,bias=True)\nlinear2 = nn.Linear(8,8,bias=True)\nlinear3 = nn.Linear(8,4,bias=True)\nlinear4 = nn.Linear(4,4,bias=True)\nlinear5 = nn.Linear(4,1,bias=True)\n\nnn.init.kaiming_uniform_(linear1.weight)\nnn.init.kaiming_normal_(linear2.weight)\nnn.init.kaiming_uniform_(linear3.weight)\nnn.init.kaiming_normal_(linear4.weight)\nnn.init.kaiming_uniform_(linear5.weight)\nselu = nn.SELU()","d42bac44":"model = nn.Sequential(\n    linear1,selu,\n    linear2,selu,\n    linear3,selu,\n    linear4,selu,\n    linear5\n).to(device)","7d36fbd7":"loss = nn.MSELoss().to(device)\noptimizer = optim.Adam(model.parameters(),lr=learning_rate)","d45e1a51":"total_batch = len(data_loader)\n\nfor epoch in range(training_epoch):\n    avg_cost = 0\n    for X,Y in data_loader:\n        X = X.to(device)\n        Y = Y.to(device)\n\n        optimizer.zero_grad()\n        hypothesis = model(X)\n        cost = loss(hypothesis,Y)\n        cost.backward()\n        optimizer.step()\n\n        avg_cost += cost\/total_batch\n\n    print('epoch {:.4f} , cost = {:.6f}'.format(epoch,avg_cost))\nprint('learning finished!')","12f7f577":"test = pd.read_csv('..\/input\/2020termproject-18011826\/test_sweetpotato_price.csv')\nprint(test.info())\ntest = test.iloc[:,1:]\ntest = np.array(test)\ntest = torch.FloatTensor(test).to(device)\n\nwith torch.no_grad():\n    predict = model(test)\npredict","de7bd59d":"correct_prediction = predict.cpu().numpy().reshape(-1,1)\nresult = pd.read_csv('..\/input\/2020termproject-18011826\/submit_sample.csv')","dba677a6":"for i in range(len(correct_prediction)):\n    result['Expected'][i] = correct_prediction[i]\n    ","b0531f7e":"result.to_csv('submit.csv',index=False)","64bd6948":"layer 5\uac1c , kaiming uniform, kaiming normal \ub85c \ucd08\uae30\ud654","3faf4ede":"\uace0\uad6c\ub9c8 \uac00\uaca9 \uc608\uce21 \ubb38\uc81c","6e36f72a":"activation function - selu"}}