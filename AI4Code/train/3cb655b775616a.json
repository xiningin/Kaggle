{"cell_type":{"da31433e":"code","040dc234":"code","bf45e374":"code","ffcf2c38":"code","479620a3":"code","777c3b9c":"code","eb29d955":"markdown","b4b4d7c7":"markdown","9a338f4a":"markdown","4c05bd35":"markdown","a3b272dc":"markdown"},"source":{"da31433e":"import torch\nimport torch.optim as optim\nimport numpy as np\nimport pandas as pd\n\n#\ud559\uc2b5\uc2dc\ud0ac \ub370\uc774\ud130\ub97c pandas\ub97c \ud1b5\ud574 \ud655\uc778\nxy = pd.read_csv(\"..\/input\/2020-ai-termproject-18011793\/train.csv\")\nxy","040dc234":"#\ub370\uc774\ud130 \uc804\ucc98\ub9ac(year\uacfc \uc2a4\ucf00\uc77c\uc774 \ud070 9to10:23to24, total \uac12\ub4e4\uc744 \uc18c\uc218\uc810 \uc790\ub9ac\ub4e4\ub85c \ubcc0\uacbd)\nxy['year'] = xy['year']%10000\/100\nxy.loc[:,'9to10':'23to24'] = xy.loc[:,'9to10':'23to24']\/100\nxy['total'] = xy['total']\/1000\nxy","bf45e374":"#Tensor\ud615 \ub370\uc774\ud130\ub85c \ub9cc\ub4e4\uae30\nx_p = xy.loc[:, \"year\": \"maxTemp\"]\ny_p = xy[\"total\"]\nx_data = np.array(x_p)\ny_data = np.array(y_p)\nx_train = torch.FloatTensor(x_data)\ny_train = torch.FloatTensor(y_data).unsqueeze(1)","ffcf2c38":"#W, b\uac12 \ud559\uc2b5 (\ubc30\ucd94\uac12\uacfc \uac19\uc740 \ub2e4\ub978 \ud68c\uadc0 \ubb38\uc81c\uc640 \ud559\uc2b5\uacfc\uc815 \ub3d9\uc77c)\n\nW = torch.zeros((10, 1), requires_grad= True)\nb = torch.zeros(1, requires_grad= True)\n\noptimizer = optim.SGD([W, b], lr = 1e-4)\n\nnb_epochs = 10000\n\nfor epoch in range(nb_epochs + 1):\n\n  hypothesis = x_train.matmul(W) + b\n\n  cost = torch.mean((hypothesis - y_train)**2)\n\n  optimizer.zero_grad()\n  cost.backward()\n  optimizer.step()\n\n  if epoch % 1000 == 0 :\n    print(epoch, cost.item())","479620a3":"#test\ub370\uc774\ud130\ub97c \ubc1b\uc544 \uc704\uc5d0\uc11c\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c \ub370\uc774\ud130 \uc804\ucc98\ub9ac\ntest = pd.read_csv(\"..\/input\/2020-ai-termproject-18011793\/test.csv\")\ntest['year'] = test['year']%10000\/100\ntest.loc[:,'9to10':'23to24'] = test.loc[:,'9to10':'23to24']\/100\n\nx_test = test.loc[:, \"year\": \"maxTemp\"]\ntest_x = torch.FloatTensor(np.array(x_test))\n\npredict = (test_x.matmul(W) + b).detach()\n\n#\ud559\uc2b5\uc2dc\ud0ac \ub54c xy['total']\/1000 \uc774\ub807\uac8c \uc0ac\uc6a9\ud558\uc600\uc73c\ubbc0\ub85c \ub2e4\uc2dc 1000\uc744 \uacf1\ud574\uc8fc\uc5b4 \uc6d0\ub798 \uac12\uc744 \uc608\uce21\npredict = predict*1000 ","777c3b9c":"#submission.csv \uc0dd\uc131\nsubmit = pd.read_csv(\"..\/input\/2020-ai-termproject-18011793\/submit_sample.csv\")\nfor i in range(len(predict)):\n  submit[\"Total\"][i] = predict[i].int()\nsubmit[\"Total\"] =submit[\"Total\"].astype(int)\n\nsubmit.to_csv(\"submission.csv\", index = False, header = True)","eb29d955":"# 1. \ub370\uc774\ud130 \ub85c\ub354","b4b4d7c7":"# 2. \ubaa8\ub378 \ud559\uc2b5","9a338f4a":"# 4. kaggle \uc81c\ucd9c","4c05bd35":"# 3. Test \ub370\uc774\ud130 \uc608\uce21","a3b272dc":"# Baseline\uc744 \uc704\ud55c \ucf54\ub4dc"}}