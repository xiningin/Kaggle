{"cell_type":{"096a2e04":"code","213c3ff0":"code","b1d83328":"code","cb23a9fb":"code","38a6455b":"code","5aa838e0":"code","53f1183e":"code","4e83fbcb":"code","5ec4dfec":"code","8e5a8189":"code","022784b0":"code","2f60ac88":"code","a867e2c5":"code","0d157983":"code","5a72eee1":"code","60f66f88":"code","c0595360":"code","f22c7b93":"code","68d80100":"code","6d3dca24":"code","480fa517":"code","ffe5f9af":"code","e3214d0c":"code","b401552b":"code","609af0c4":"code","bf298910":"code","306e739e":"code","52eb2e7e":"code","2839567e":"code","07d6e1fc":"code","0b78e952":"code","f5d99529":"code","61735e18":"code","af61f15e":"code","467963e5":"code","a72b7268":"code","875faf18":"code","a14f8779":"code","e5df0386":"code","3658b2f2":"code","057aaa87":"code","26b29d23":"code","2eb1633d":"code","7956eef0":"code","4cf72fe3":"code","eef45fd2":"code","50886e3f":"code","bea3a640":"code","8a845ae4":"code","67e1eb69":"code","2770e76f":"code","e5d7aa8e":"code","ee16d7a1":"code","109e270f":"code","6eff1a34":"code","cd9e79aa":"code","3fb64ee3":"code","2fadd8b1":"code","c65ca495":"code","5644142d":"code","a1d98273":"code","40f126fb":"markdown","8e10c614":"markdown","842f62d1":"markdown","6f87a6e4":"markdown"},"source":{"096a2e04":"import pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\n\nimport keras \nfrom keras.models import Sequential \nfrom keras.layers import Dense      \n \nfrom sklearn.metrics import accuracy_score,confusion_matrix,precision_score, recall_score, classification_report\n","213c3ff0":"train_orig = pd.read_csv('..\/input\/titanic\/train.csv')","b1d83328":"def data_kyc(data):\n    print(\"**INFO**\")\n    print(data.info())\n    print(\"**DESCRIBE**\")\n    print(data.describe())\n    print(\"**MISSING VALUES**\")\n    print(data.isna().sum())","cb23a9fb":"data_kyc(train_orig)","38a6455b":"sns.heatmap(train_orig.isna(),cmap=\"YlGnBu\")","5aa838e0":"sns.boxplot(x='Parch',y='Age', data=train_orig)","53f1183e":"parch_medians = dict(train_orig[['Age']].groupby(train_orig['Parch']).mean().apply((list)))['Age']","4e83fbcb":"def map_age_parch(frame):\n    age = frame[0]\n    parch = frame[1]\n    if pd.isnull(age):\n        return parch_medians[parch]\n    else:\n        return age","5ec4dfec":"train_orig['Age'] = train_orig[['Age','Parch']].apply(map_age_parch,axis=1)","8e5a8189":"train_orig.isna().sum() #All NA values in Age are removed","022784b0":"#what is the correlation between Cabin present with Survival\ntrain_orig[[\"Cabin\",\"Survived\"]].groupby(train_orig[\"Cabin\"].isnull()).mean()","2f60ac88":"#67% on an average survived when cabin was missing so correlation can be established\ntrain_orig['Cabin_derived'] = np.where(train_orig['Cabin'].isnull(),0,1)","a867e2c5":"train_orig.isna().sum()","0d157983":"part = train_orig[['Parch','SibSp','Survived']]\nd=part.corr()","5a72eee1":"sns.heatmap(d,cmap=\"YlGnBu\") #SibSp and Parch have good correlation can be combined","60f66f88":"sns.barplot(x='SibSp',y='Survived', data=train_orig) \nplt.show()\nsns.barplot(x='Parch',y='Survived', data=train_orig) \nplt.show()","c0595360":"train_orig['family_count'] = train_orig['SibSp'] + train_orig['Parch']","f22c7b93":"part = train_orig[['Parch','SibSp','family_count','Survived']]\nd=part.corr()","68d80100":"sns.heatmap(d,cmap=\"YlGnBu\")","6d3dca24":"train_orig['Sex_int'] = train_orig['Sex'].map({'male':1, 'female':0})","480fa517":"train_orig.columns","ffe5f9af":"train = train_orig.drop(['PassengerId','Name','Sex','Ticket','Embarked','Cabin','Parch','SibSp'], axis=1)","e3214d0c":"train.columns","b401552b":"train.head()","609af0c4":"sns.heatmap(train.corr(),cmap=\"YlGnBu\")","bf298910":"#Fare is strong correlation with Cabin_derived\ntrain[[\"Fare\"]].groupby(train[\"Cabin_derived\"]).mean()\n#if cabin derived is 1 then fare 76.14 else 19.15","306e739e":"train.corr() #Pclass has strong correlation with Fare, Cabin_derived and Family count so better to remove it","52eb2e7e":"train=train.drop('Pclass',axis=1)","2839567e":"def pre_processing(data):\n    data['Age'] = data[['Age','Parch']].apply(map_age_parch,axis=1)\n    data['Cabin_derived'] = np.where(data['Cabin'].isnull(),0,1)\n    data['family_count'] = data['SibSp'] + data['Parch']\n    data['Sex_int'] = data['Sex'].map({'male':1, 'female':0})\n    data=data.drop(['PassengerId','Name','Sex','Ticket','Embarked','Cabin','Parch','SibSp','Pclass'], axis=1)\n    return data","07d6e1fc":"x = train.drop(\"Survived\",axis=1)\ny = train[\"Survived\"]","0b78e952":"X_train, X_test, Y_train, Y_test = train_test_split(x,y,test_size=0.2, random_state=7)","f5d99529":"sns.countplot(Y_train) #target variable is not normalized so need to use standard scaler","61735e18":"scaler = preprocessing.StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.fit_transform(X_test)","af61f15e":"print(X_train.shape)\nprint(Y_test.shape)","467963e5":"X_train #all are converted into (x - u) \/ s","a72b7268":"model = Sequential()\nmodel.add(Dense(units = 9, kernel_initializer = 'uniform', activation = 'relu', input_dim = 5))\nmodel.add(Dense(units = 9, kernel_initializer = 'uniform', activation = 'relu'))\nmodel.add(Dense(units = 5, kernel_initializer = 'uniform', activation = 'relu'))\nmodel.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\nmodel.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","875faf18":"model.fit(X_train, Y_train, batch_size = 32, epochs = 200)","a14f8779":"y_pred = model.predict(X_test)","e5df0386":"y_pred_final =  (y_pred > 0.5).astype(int).reshape(X_test.shape[0])","3658b2f2":"accuracy_score(y_pred_final, Y_test)","057aaa87":"con_mat = confusion_matrix(y_pred_final, Y_test)","26b29d23":"plt.imshow(con_mat, interpolation='nearest', cmap=\"YlGnBu\")\nplt.title(\"Confusion Matrix\")\nplt.tight_layout()\nplt.ylabel('True label')\nplt.xlabel('Predicted label')","2eb1633d":"precision_score(y_pred_final, Y_test)","7956eef0":"print(classification_report(y_pred_final, Y_test))","4cf72fe3":"test_orig = pd.read_csv(\"..\/input\/titanic\/test.csv\")","eef45fd2":"test_orig.columns","50886e3f":"test_orig.isna().sum()","bea3a640":"sns.countplot(test_orig['Parch'])","8a845ae4":"parch_medians[9]=parch_medians.mean()","67e1eb69":"parch_medians","2770e76f":"test = pre_processing(test_orig)","e5d7aa8e":"test.isna().sum()","ee16d7a1":"test[test['Fare'].isnull()]","109e270f":"# as seen in the training data if cabin derived is 1 then fare 76.14 else 19.15\ntest.iloc[152, test.columns.get_loc('Fare')] = 19.15","6eff1a34":"test.isna().sum()","cd9e79aa":"scaler = preprocessing.StandardScaler()\ntest = scaler.fit_transform(test)","3fb64ee3":"Y_pred_test = model.predict(test)","2fadd8b1":"Y_pred_test_final =  (Y_pred_test > 0.5).astype(int).reshape(test.shape[0])","c65ca495":"print(test_orig.shape)\nprint(Y_pred_test_final.shape)","5644142d":"submission_frame = pd.DataFrame({'PassengerId':test_orig['PassengerId'],'Survived':Y_pred_test_final})\nsubmission_frame.to_csv(\"NN_submit.csv\")","a1d98273":"sns.countplot(submission_frame['Survived'])","40f126fb":"1. Picking Age first - using Parch(No of parents\/childeren) guessing age","8e10c614":"Treating Missing Values - Age, Cabin and Embarked","842f62d1":"2. Picking Cabin now","6f87a6e4":"NA values need to be filtered. columns having NULL values are 'Age', 'Cabin', 'Embarked'"}}