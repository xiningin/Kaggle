{"cell_type":{"d266037b":"code","b2c3beee":"code","2dc737b7":"code","92a404bb":"code","b4f7001e":"code","0ed84bb6":"code","dc12e56b":"code","caf01231":"code","f2241aa9":"code","6847e0eb":"code","4bde68ac":"code","3832af94":"code","94ebf061":"code","c0490bb0":"code","a2036c3f":"markdown","ece4a787":"markdown","a2363f66":"markdown","1c1bbbf0":"markdown"},"source":{"d266037b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2c3beee":"import h2o\nimport matplotlib as plt\n%matplotlib inline\nfrom h2o.automl import H2OAutoML","2dc737b7":"h2o.init()","92a404bb":"loan_level = h2o.import_file(\"https:\/\/s3.amazonaws.com\/data.h2o.ai\/H2O-3-Tutorials\/loan_level_50k.csv\")","b4f7001e":"loan_level.head()","0ed84bb6":"loan_level['DELINQUENT'].table()","dc12e56b":"loan_level['ORIGINAL_INTEREST_RATE'].hist()","caf01231":"train, test = loan_level.split_frame([0.8],seed=42)","f2241aa9":"print('train: %d test: %d' % (train.nrows, test.nrows))","6847e0eb":"y = 'DELINQUENT'\nignore = ['DELINQUENT', 'PREPAID', 'PREPAYMENT_PENALTY_MORTGAGE_FLAG', 'PRODUCT_TYPE']\nx = list(set(train.names)-set(ignore))","4bde68ac":"H2OAutoML(nfolds=5, max_runtime_secs=3600, max_models=None, stopping_metric='AUTO',\n         stopping_tolerance=None, stopping_rounds=3, seed=None, project_name=None)","3832af94":"aml = H2OAutoML(max_models=25, max_runtime_secs_per_model=30, seed=42, project_name='classification',\n                balance_classes=True, class_sampling_factors=[0.5,1.25])\n%time aml.train(x=x, y=y, training_frame=train)","94ebf061":"lb = aml.leaderboard\nlb.head(rows=lb.nrows)","c0490bb0":"from h2o.automl import get_leaderboard\nlb2 = get_leaderboard(aml, extra_columns='ALL')\nlb.head(rows=lb2.nrows)","a2036c3f":"run AutoML with default parameters:","ece4a787":"We can also print a leaderboard with the training time, in milliseconds, of each model and the time it takes each model to predict each row, in milliseconds:","a2363f66":"The only required parameters for H2O's AutoML are, ytraining_frame, and max_runtime_secs, which let us train AutoML for \u2018x' amount of seconds and\/or max_models, which would train a maximum number of models. Please note that max_runtime_secs has a default value, while max_models does not. For this task, we will set a number of models constraint. The seed is the usual parameter that we set for reproducibility purposes. We also need a project name because we will do both classification and regression with AutoML. Lastly, we are setting balance_classes=True because we have a very imbalanced dataset, and we are using the default number of folds for cross-validation.\n\nThe second line of code has the parameters that we need in order to train our model. For now, we will just pass x, y, and the training frame. Please note that the parameter x is optional because if you were using all the columns in your dataset, you would not need to declare this parameter. The leaderboard frame can be used to score and rank models on the leaderboard, but we will use the validation scores to do so because we will check the performance of our models with the test set.\n\nBelow is a list of optional parameters that the user could set for H2O's AutoML\n\n- validation_frame\n- leaderboard_frame\n- blending_frame\n- fold_column\n- weights_column\n- ignored_columns\n- class_sampling_factors\n- max_after_balance_size\n- max_runtime_secs_per_model\n- sort_metric\n- exclude_algos\n- include_algos\n- keep_cross_validation_predictions\n- keep_cross_validation_models\n- keep_cross_validation_fold_assignment\n- verbosity\n- export_checkpoints_dir\nTo learn more about each of them, make sure to check the AutoML Section in the Documentation. We will be using some of them in the regression part of this tutorial.\n\nOnce AutoML is finished, print the leaderboard, and check out the results.","1c1bbbf0":"As you can see, H2O AutoML is designed to have as few parameters as possible, which makes it very easy to use. For this experiment, we could've just changed the maximum runtime, the seed, and the project name; however, from our first tutorial, we learned that our dataset is highly imbalanced and that models have a hard time classifying the minority class. For that reason, we are setting balance_classes=True, and we are setting the sampling factors to [0.5,1.25], which means that we will undersample the majority class, and oversample the minority class. Also, we will set max_models = 25 and to make sure that AutoML trains all 25 models in less than 20 min, we will also set max_runtime_secs_per_model=30 which will make sure no model takes more than 30 seconds to be trained."}}