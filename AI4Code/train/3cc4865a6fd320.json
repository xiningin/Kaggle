{"cell_type":{"eb041419":"code","4bcf69c4":"code","dcc6bdce":"code","e0f99c36":"code","1bb7aa80":"code","d9eaf42a":"code","b6eb0c45":"code","b550eb18":"code","79c0e326":"code","b13fb95d":"code","3050dcdb":"code","d792a2b3":"code","ae128fea":"code","50c03952":"code","824f2d19":"code","0265873c":"code","25672c13":"code","b47a2a99":"code","2f60a1d3":"code","1e1616c6":"code","14cb77a3":"markdown","14d18881":"markdown","989664af":"markdown","718ee5a3":"markdown","302945a5":"markdown","92f91c86":"markdown","0d369cc3":"markdown","47ac4db3":"markdown"},"source":{"eb041419":"# Install the PyDrive wrapper & import libraries.\nfrom pydrive.auth import GoogleAuth\nfrom pydrive.drive import GoogleDrive\nfrom google.colab import auth\nfrom oauth2client.client import GoogleCredentials\n\n# Authenticate and create the PyDrive client.\nauth.authenticate_user()\ngauth = GoogleAuth()\ngauth.credentials = GoogleCredentials.get_application_default()\ndrive = GoogleDrive(gauth)\n\nfile_id = '1-eC8YdXmu79KqmmYuOFmR-qXqXHF32sF'\ndownloaded = drive.CreateFile({'id':file_id})\ndownloaded.FetchMetadata(fetch_all=True)\ndownloaded.GetContentFile(downloaded.metadata['title'])","4bcf69c4":"!unzip Covid-19.zip","dcc6bdce":"import pandas as pd\n\ndf = pd.read_csv(\".\/Covid-19\/train.csv\")\nimg_name = df['image'].values\ndir_img = ['.\/Covid-19\/Train\/'+ img for img in img_name]\ndf[\"dir_image\"] = dir_img\n\nX_dir = df['dir_image']\ny = df['label']","e0f99c36":"from tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.resnet50 import preprocess_input, decode_predictions\nimport numpy as np\n\n\ndef preprocess(img_path):\n  img = image.load_img(img_path, target_size=(224, 224))\n  x = image.img_to_array(img)\n  x = np.expand_dims(x, axis=0)\n  x = preprocess_input(x)\n  return x\n\nresnet_model = ResNet50(input_shape=(224, 224, 3), weights='imagenet', include_top=False, pooling='avg') # Since top layer is the fc layer used for predictions\n\ndef extract_resnet(X):\n  # X : images numpy array\n  features_array = resnet_model.predict(X)\n  return features_array","1bb7aa80":"import pandas as pd\nfrom shutil import copyfile\n\ndf_test = pd.read_csv(\".\/Covid-19\/sample_submission.csv\")\nimg_name = df_test['image'].values\ndir_img_test = ['.\/Covid-19\/Test\/'+ img for img in img_name]","d9eaf42a":"data = [ preprocess(dir) for dir in X_dir]\nembedded =  [ extract_resnet(emb) for emb in data]\n\nembedded = np.asarray(embedded)\nX_train = embedded.reshape(len(embedded), 2048)","b6eb0c45":"data_test = [ preprocess(dir) for dir in dir_img_test]\nembedded_test =  [ extract_resnet(emb) for emb in data_test]\n\nembedded_test = np.asarray(embedded_test)\nX_test = embedded_test.reshape(len(embedded_test), 2048)","b550eb18":"import numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn.datasets import make_hastie_10_2\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.svm import LinearSVC\n\nscoring = make_scorer(accuracy_score)\nCs = [0.0001,0.001, 0.01, 0.1, 1., 2.]\nparameters = {'C':Cs}\nsvm = LinearSVC(multi_class = 'ovr', max_iter= 10000)\nclf = GridSearchCV(svm, parameters, cv=5,return_train_score=True,scoring=scoring,refit='Accuracy')\nclf.fit( X_train , y )","79c0e326":"clf.best_score_","b13fb95d":"clf.best_estimator_","3050dcdb":"svm_final = LinearSVC(C=0.1, class_weight=None, dual=True, fit_intercept=True,\n                      intercept_scaling=1, loss='squared_hinge', max_iter=10000,\n                      multi_class='ovr', penalty='l2', random_state=None, tol=0.0001,\n                      verbose=0\n                      )\n","d792a2b3":"svm_final = svm_final.fit(X_train, y)","ae128fea":"class_predict = svm_final.predict(X_test)","50c03952":"df_test = pd.read_csv(\".\/Covid-19\/sample_submission.csv\")\ndf_test['label'] = class_predict\ndf_test.to_csv(\"resnet50_noscaler.csv\", index = False)","824f2d19":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.ensemble import IsolationForest\nfrom sklearn import svm\n\n# Apply standard scaler to output from resnet50\nss = StandardScaler()\nss.fit(X_train)\nX_train_scaled = ss.transform(X_train)\nX_test_scaled = ss.transform(X_test)","0265873c":"import numpy as np\nfrom matplotlib import pyplot as plt\nfrom sklearn.datasets import make_hastie_10_2\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import make_scorer\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.svm import LinearSVC\n\nscoring = make_scorer(accuracy_score)\nCs = [0.0001,0.001, 0.01, 0.1, 1., 2.]\nparameters = {'C':Cs}\nsvm = LinearSVC(multi_class = 'ovr', max_iter= 5000)\nclf = GridSearchCV(svm, parameters, cv=5,return_train_score=True,scoring=scoring,refit='Accuracy')\nclf.fit( X_train_norm , y )","25672c13":"class_predict = clf.best_estimator_.predict(X_test_norm)","b47a2a99":"df_test = pd.read_csv(\".\/Covid-19\/sample_submission.csv\")\ndf_test['label'] = class_predict\ndf_test.to_csv(\"resnet50_normalize.csv\", index = False)","2f60a1d3":"clf.best_score_","1e1616c6":"clf.best_estimator_","14cb77a3":"Load model resnet 50","14d18881":"Standard Scaler","989664af":"Train without Standard Scaler","718ee5a3":"Load training data directory in the file csv","302945a5":"Unzip data","92f91c86":"Download data ","0d369cc3":"Extract feature resnet 50","47ac4db3":"Load testing data directory in the file csv"}}