{"cell_type":{"8fab37a8":"code","fcbb75a5":"code","6b8701e4":"code","e9a48599":"code","2733ad99":"code","cef05dfb":"code","9991578a":"code","9e9d72fd":"code","2de51254":"code","13b7f5ba":"code","f6b75dda":"code","41e5dca7":"code","7242ea07":"code","67866a07":"code","e957fffc":"code","e1841cdb":"code","80777b96":"code","8fcaa695":"code","f40aa847":"code","1a8895bc":"code","92ce87db":"code","74889c71":"code","6daa5e30":"markdown","39a60b88":"markdown","6ab49056":"markdown","bfd4a905":"markdown","e9d719c8":"markdown","38c0d225":"markdown"},"source":{"8fab37a8":"#Loading Libraries\nimport pandas as pd\nimport numpy as np\n\n#ML Algorithm Libraries\nfrom sklearn.tree import DecisionTreeClassifier  #classifier algorithm\nfrom sklearn.model_selection import train_test_split #dataset splitting function\nfrom sklearn import metrics","fcbb75a5":"#Loading Dataset\ndata = pd.read_csv('..\/input\/cancer-data-set\/CancerData.csv',header='infer')","6b8701e4":"data.shape","e9a48599":"#Checking for null\/missing values\ndata.isna().sum()","2733ad99":"data.head()","cef05dfb":"data.columns","9991578a":"#Dropping the id column\ndata = data.drop(columns='id',axis=1)","9e9d72fd":"data.head()","2de51254":"#Randomly selecting 10 records for testing \ntest_df = data.sample(n=10)","13b7f5ba":"features = ['radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']\ntarget = ['diagnosis']\n\nX = data[features]\ny = data[target]","f6b75dda":"#Splitting the dataset (train & test)\nsize = 0.1  #10% of the dataset will used of testing the model & metrics calculation\nstate = 1\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=size, random_state=state)","41e5dca7":"dtc = DecisionTreeClassifier(max_depth=2)","7242ea07":"dtc.fit(X_train,y_train)","67866a07":"#Getting the Accuracy Score of the Trained Model\nprint('Accuracy of the model: ','{:.2%}'.format(dtc.score(X_train,y_train)) )","e957fffc":"#Prediction on the test data\ny_pred = dtc.predict(X_test)","e1841cdb":"print(\"Accuracy Score: \",'{:.2%}'.format(metrics.accuracy_score(y_test, y_pred)))","80777b96":"# Confusion Matrix Heatmap\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nclass_names=[0,1] \nconfMatrix = metrics.confusion_matrix(y_test,y_pred)\nfig, ax = plt.subplots(figsize=(8,8))\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(confMatrix), annot=True, cmap=\"Blues\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","8fcaa695":"test_df","f40aa847":"# Making a prediction\ntestdata_pred = dtc.predict(test_df.iloc[:,1:31])\n","1a8895bc":"# Merging the prediction with the test-data\ntest_df['Predicted_Diagnosis'] = testdata_pred","92ce87db":"test_df.head(10)","74889c71":"#Calculating the accuracy\nprint(\"Accuracy Score: \",'{:.2%}'.format(metrics.accuracy_score(test_df['diagnosis'], testdata_pred)))","6daa5e30":"**Making a Prediction on the randomly selected data records**","39a60b88":"**Prediction & Model Evaluation**","6ab49056":"As seen above, we have got a good 90% accuracy of the model on the randomly selected records.","bfd4a905":"**Data Exploration**","e9d719c8":"**Feature Selection & Dataset Split**","38c0d225":"**Model Building**"}}