{"cell_type":{"9cdfbc3d":"code","7ba3b308":"code","2bbb0d7b":"code","c9449046":"code","5bd672c1":"markdown"},"source":{"9cdfbc3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n# print(os.listdir(\"..\/input\"))\ndata = pd.read_csv(\"..\/input\/9gag.csv\")\nprint(data.columns)\n# Any results you write to the current directory are saved as output.","7ba3b308":"def convert_to_list(string):\n    to_list = string.strip('][').lower().split(',')\n    return to_list\ntag_score = {}\ntags = []\nfor i in range(data.shape[0]):\n    item = data[\"all_tags\"][i]\n    score = data[\"upVoteCount\"][i] + data[\"commentsCount\"][i] * 2\n    if item:\n        for x in convert_to_list(item):\n            x = x.lstrip().rstrip()\n            if x:\n                if (x not in tag_score):\n                    tag_score[x] = score\n    #                 tags.append(x.lstrip().rstrip())\n                else:\n                    tag_score[x] += score\n# print(tag_score)\nkey = max(tag_score, key=lambda key: tag_score[key])\nprint(key, tag_score[key])\n# print(tag_score)\n","2bbb0d7b":"score_keys = sorted(tag_score, key=(lambda key:tag_score[key]), reverse=True)[:10]\nprint(score_keys)\nscore_values = []\nfor key in score_keys:\n    score_values.append(tag_score[key])\nprint(score_values)\n\n","c9449046":"plt.bar(np.arange(len(score_keys)), score_values, align='center', alpha=0.5)\n# index = np.arange(len(label))\n#     plt.bar(index, no_movies)\nplt.xlabel('Category', fontsize=10)\nplt.ylabel('Score', fontsize=10)\nplt.xticks(np.arange(len(score_keys)), score_keys, fontsize=10, rotation=30)\nplt.title('Most liked joke type')\n \nplt.show()","5bd672c1":"This implies that people actually like memes and jokes that are \"**satisfying**\"."}}