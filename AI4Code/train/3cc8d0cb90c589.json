{"cell_type":{"73d95518":"code","a721b301":"code","5315befa":"code","f13cf450":"code","a327d551":"code","fef9ac5c":"code","23528282":"code","6849aced":"code","12017994":"code","154701d2":"code","af03b1a1":"code","36969a52":"code","82f2fb5f":"code","692b9450":"code","597e7ffb":"code","e7cb772c":"code","2a131e96":"code","7b65c716":"code","5d36ca0a":"code","96b26fec":"code","852f38b5":"markdown","ef63ed46":"markdown","117ca721":"markdown","08fa977d":"markdown","4f8a4ed6":"markdown","5b23ef13":"markdown","15e6bff8":"markdown","35b0b543":"markdown","2abc9ea2":"markdown","44230ac1":"markdown"},"source":{"73d95518":"#import libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier","a721b301":"#read train data and test data\ndata = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', engine='python', encoding='utf-8')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv', engine='python', encoding='utf-8')","5315befa":"#Check the data.\ndata","f13cf450":"#fill missing values of datasets by using \"bfill\" method.\ndata = data.fillna(method='bfill')\ndata = data.fillna(method='ffill')\ntest = test.fillna(method='bfill')\ntest = test.fillna(method='ffill')","a327d551":"#Change Cabin numbers like C-100 ,A-200 into A , C.  \ndata['Cabin']=data['Cabin'].str[0:1]\ntest['Cabin']=test['Cabin'].str[0:1]","fef9ac5c":"data","23528282":"#Encode 3 columns into categorical features. \nle = LabelEncoder()\nle = le.fit(data['Sex'])\ndata['Sex'] = le.transform(data['Sex'])\ntest['Sex'] = le.transform(test['Sex'])\nle = le.fit(data['Cabin'])\ndata['Cabin'] = le.transform(data['Cabin'])\ntest['Cabin'] = le.transform(test['Cabin'])\nle = le.fit(data['Embarked'])\ndata['Embarked'] = le.transform(data['Embarked'])\ntest['Embarked'] = le.transform(test['Embarked'])","6849aced":"data","12017994":"x_train= data.iloc[:,[2,4,5,6,7,9,10,11]].astype(\"int64\")\ny_train= data.iloc[:,[1]].astype(\"int64\")","154701d2":"x_train","af03b1a1":"y_train","36969a52":"check_df=pd.concat([x_train,y_train],axis=1)\ncheck_df.corr()","82f2fb5f":"x_test=test.iloc[:,[1,3,4,5,6,8,9,10]]\nx_test","692b9450":"#Normalize data from 0 to 1 by using StandardScaler\nx_train = StandardScaler().fit_transform(x_train)\nx_test = StandardScaler().fit_transform(x_test)","597e7ffb":"#Let's fit and predict.\nforest = RandomForestClassifier(n_estimators=200, random_state=2, max_depth=300)\nforest.fit(x_train, y_train)\nmodel_score=forest.score(x_train, y_train)\n","e7cb772c":"print(\"The score on traing data of this machine learning model is \",model_score,\"!\")","2a131e96":"y_pred=forest.predict(x_test)","7b65c716":"y_pred2= pd.DataFrame(y_pred)\ny_pred2[\"Survived\"]= y_pred2[0]\ny_pred2=y_pred2.iloc[:,[1]].astype(\"int\")\ny_pred2","5d36ca0a":"#Connect test data and prediction data \nresult=pd.concat([test,y_pred2],axis=1)\nresult=result.iloc[:,[0,11]]\nresult","96b26fec":"#make an output csv file as submission.csv\nresult.to_csv('submission_final.csv', index=False)\nprint('submission_final.csv was saved!')","852f38b5":"## Step6 :Let's compile a submission file.","ef63ed46":"## Step5 :Let's make a prediction!? ","117ca721":"## Step1 : Preparation for prediction","08fa977d":"### Let's get started with <font color=\"green\">Titanic Machine Learning Competition<\/font> by using <font color=\"Blue\">Random Forest Classifier.<\/font>","4f8a4ed6":"\n### Ummm. I decided to use whole columns.\n","5b23ef13":"## Step2 : Remodel datasets.","15e6bff8":"## Step4 :Let's fit this remodeled dataset. ","35b0b543":"<HR>","2abc9ea2":"## Step3: Check the correlation in the dataset.","44230ac1":"<HR>"}}