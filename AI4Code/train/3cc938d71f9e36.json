{"cell_type":{"2f6f5f2f":"code","900e0888":"code","edc66296":"code","286bfa32":"code","5a36342a":"code","88d7cb11":"code","d4924697":"code","1c9df83f":"code","78716b91":"code","360be77a":"code","12769070":"code","a681f82e":"code","94f9ff5b":"code","1abc37e0":"code","fbbd22ec":"code","f9ff8667":"code","830c76ce":"code","242ebc79":"code","af6d4123":"code","998147a5":"code","60fdc74f":"code","61452330":"code","2ef76ef4":"code","4d9faa58":"code","4d5bbeb0":"code","f57d9146":"code","77b51cda":"code","057c9271":"code","5bac184f":"code","47393bb0":"code","abb94f6b":"code","df78c08f":"code","5a8c01d5":"code","053811c5":"code","47d8e831":"code","0f5f2311":"code","f199d77b":"code","3ab9ef8b":"code","69c19dfc":"code","cbe4ab14":"code","6f9862ef":"code","f5b7aabb":"code","52837506":"code","beaca585":"code","7db78d0b":"code","f9ffe60f":"code","61605fe1":"code","4478e97a":"code","e4076a2b":"code","06624840":"code","242db6d2":"code","b77e7a89":"code","4f03b730":"code","25f2534d":"code","389ea947":"code","55811e76":"code","7f5e52f6":"code","17633db6":"code","7b75438e":"code","1c12bec4":"code","04bcc865":"code","afdf7ef7":"code","c19836ef":"code","dc33744e":"code","087ef947":"code","a7beb9f5":"code","d56972db":"code","90360272":"code","13e5e5dc":"code","0229fb7f":"markdown","6c8aabdc":"markdown","5bb9627f":"markdown","ee641313":"markdown","12eacc74":"markdown","10a6af1e":"markdown","5a3db8c0":"markdown","b7f72528":"markdown","2db80746":"markdown","4789eaf7":"markdown","2f9ff0a3":"markdown","14419df1":"markdown","e1644f69":"markdown","a70e4663":"markdown","19197cf4":"markdown","bc551f61":"markdown","2b46fcce":"markdown","feeaa34e":"markdown","bd7f5b1d":"markdown","c72f7f79":"markdown","44aad519":"markdown","5d421782":"markdown","cdaf6f79":"markdown","e1c85737":"markdown","1f304c9f":"markdown","ff13798f":"markdown","5a777ed2":"markdown","278aa380":"markdown","1c4448b2":"markdown","dcf764dc":"markdown","be2f83fe":"markdown","800957e2":"markdown","e10e63ce":"markdown","6fcf59cb":"markdown","c23b92d8":"markdown","4549e370":"markdown","2bb177ae":"markdown","2f9488d1":"markdown","59118ba7":"markdown","2505b76d":"markdown","04b98303":"markdown","dd9fb325":"markdown","143b7c60":"markdown","28d17315":"markdown","605a47b3":"markdown","b75ef6fe":"markdown","7cf6c7f6":"markdown","83cb5a17":"markdown","b44d792b":"markdown","f952a737":"markdown","b87e8fe6":"markdown","ce677934":"markdown","b8fb7d9d":"markdown","0e257390":"markdown","04004556":"markdown","9bca79c5":"markdown","243e76cd":"markdown","cb453d76":"markdown","2974dcfd":"markdown","54d5e911":"markdown","576870c4":"markdown","d93aea8e":"markdown","1712690e":"markdown","4f0d75b0":"markdown","e175fc10":"markdown","27a3afd0":"markdown","917fcaf4":"markdown","eb08d416":"markdown","ace34de3":"markdown","559ad7bd":"markdown"},"source":{"2f6f5f2f":"from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport matplotlib.pyplot as plt\nimport plotly.graph_objs as go\nimport scipy.stats as stats\nimport plotly.plotly as py\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nimport matplotlib\nimport warnings\nimport sklearn\nimport scipy\nimport json\nimport sys\nimport csv\nimport os","900e0888":"print('matplotlib: {}'.format(matplotlib.__version__))\nprint('sklearn: {}'.format(sklearn.__version__))\nprint('scipy: {}'.format(scipy.__version__))\nprint('seaborn: {}'.format(sns.__version__))\nprint('pandas: {}'.format(pd.__version__))\nprint('numpy: {}'.format(np.__version__))\nprint('Python: {}'.format(sys.version))","edc66296":"warnings.filterwarnings('ignore')\nsns.set(color_codes=True)\nplt.style.available\n%matplotlib inline\n%precision 2","286bfa32":"hp_train=pd.read_csv('..\/input\/train.csv')\n","5a36342a":"import this","88d7cb11":"x = 2\ny = 5\nxy = 'Hey'","d4924697":"def add_numbers(x, y):\n    return x + y\n\nadd_numbers(1, 2)","1c9df83f":"type('This is a string')","78716b91":"type(None)","360be77a":"type(1)","12769070":"type(1.0)","a681f82e":"type(add_numbers)","94f9ff5b":"tuple_sample = (1, 'a', 2, 'b')\ntype(tuple_sample)","1abc37e0":"list_sample = [1, 'a', 2, 'b']\ntype(list_sample)","fbbd22ec":"list_sample.append(3.3)\nprint(list_sample)","f9ff8667":"for item in list_sample:\n    print(item)","830c76ce":"i=0\nwhile( i != len(list_sample) ):\n    print(list_sample[i])\n    i = i + 1","242ebc79":"x = 'This is a string'\nprint(x[0]) #first character\nprint(x[0:1]) #first character, but we have explicitly set the end character\nprint(x[0:2]) #first two characters\n","af6d4123":"x = {'MJ Bahmani': 'Mohamadjavad.bahmani@gmail.com', 'irmatlab': 'irmatlab.ir@gmail.com'}\nx['MJ Bahmani'] # Retrieve a value by using the indexing operator\n","998147a5":"print('MJ' + str(2))","60fdc74f":"sales_record = {\n'price': 3.24,\n'num_items': 4,\n'person': 'MJ'}\n\nsales_statement = '{} bought {} item(s) at a price of {} each for a total of {}'\n\nprint(sales_statement.format(sales_record['person'],\n                             sales_record['num_items'],\n                             sales_record['price'],\n                             sales_record['num_items']*sales_record['price']))\n","61452330":"\n\nwith open('..\/input\/train.csv') as csvfile:\n    house_train = list(csv.DictReader(csvfile))\n    \nhouse_train[:1] # The first three dictionaries in our list.","2ef76ef4":"type(house_train)","4d9faa58":"len(house_train)","4d5bbeb0":"house_train[0].keys()","f57d9146":"sum(float(d['SalePrice']) for d in house_train) \/ len(house_train)","77b51cda":"SalePrice = set(d['SalePrice'] for d in house_train)\nprint(type(SalePrice ))\nlen(SalePrice)","057c9271":"type(house_train[0] )","5bac184f":"import datetime as dt\nimport time as tm","47393bb0":"tm.time()","abb94f6b":"dtnow = dt.datetime.fromtimestamp(tm.time())\ndtnow","df78c08f":"dtnow.year, dtnow.month, dtnow.day, dtnow.hour, dtnow.minute, dtnow.second # get year, month, day, etc.from a datetime","5a8c01d5":"delta = dt.timedelta(days = 100) # create a timedelta of 100 days\ndelta","053811c5":"today = dt.date.today()","47d8e831":"class Person:\n    department = 'School of Information' #a class variable\n\n    def set_name(self, new_name): #a method\n        self.name = new_name\n    def set_location(self, new_location):\n        self.location = new_location","0f5f2311":"person = Person()\nperson.set_name('MJ Bahmani')\nperson.set_location('MI, Berlin, Germany')\nprint('{} live in {} and works in the department {}'.format(person.name, person.location, person.department))","f199d77b":"my_function = lambda a, b, c : a + b","3ab9ef8b":"my_function(1, 2, 3)","69c19dfc":"my_list = []\nfor number in range(0, 9):\n    if number % 2 == 0:\n        my_list.append(number)\nmy_list","cbe4ab14":"my_list = [number for number in range(0,10) if number % 2 == 0]\nmy_list","6f9862ef":"class FirstClass:\n    test = 'test'\n    def __init__(self,name,symbol):\n        self.name = name\n        self.symbol = symbol","f5b7aabb":"eg3 = FirstClass('Three',3)","52837506":"print (eg3.test, eg3.name)","beaca585":"class FirstClass:\n    def __init__(self,name,symbol):\n        self.name = name\n        self.symbol = symbol\n    def square(self):\n        return self.symbol * self.symbol\n    def cube(self):\n        return self.symbol * self.symbol * self.symbol\n    def multiply(self, x):\n        return self.symbol * x","7db78d0b":"eg4 = FirstClass('Five',5)","f9ffe60f":"print (eg4.square())\nprint (eg4.cube())","61605fe1":"eg4.multiply(2)","4478e97a":"FirstClass.multiply(eg4,2)","e4076a2b":"class SoftwareEngineer:\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n    def salary(self, value):\n        self.money = value\n        print (self.name,\"earns\",self.money)","06624840":"a = SoftwareEngineer('Kartik',26)","242db6d2":"a.salary(40000)","b77e7a89":"dir(SoftwareEngineer)","4f03b730":"class Artist:\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n    def money(self,value):\n        self.money = value\n        print (self.name,\"earns\",self.money)\n    def artform(self, job):\n        self.job = job\n        print (self.name,\"is a\", self.job)","25f2534d":"b = Artist('Nitin',20)","389ea947":"b.money(50000)\nb.artform('Musician')","55811e76":"dir(Artist)","7f5e52f6":"\n\n# some JSON:\nx =  '{ \"name\":\"John\", \"age\":30, \"city\":\"New York\"}'\n\n# parse x:\ny = json.loads(x)\n\n# the result is a Python dictionary:\nprint(y[\"age\"])","17633db6":"# a Python object (dict):\nx = {\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}\n\n# convert into JSON:\ny = json.dumps(x)\n\n# the result is a JSON string:\nprint(y)","7b75438e":"print(json.dumps({\"name\": \"John\", \"age\": 30}))\nprint(json.dumps([\"apple\", \"bananas\"]))\nprint(json.dumps((\"apple\", \"bananas\")))\nprint(json.dumps(\"hello\"))\nprint(json.dumps(42))\nprint(json.dumps(31.76))\nprint(json.dumps(True))\nprint(json.dumps(False))\nprint(json.dumps(None))","1c12bec4":"x = {\n  \"name\": \"MJ\",\n  \"age\": 32,\n  \"married\": True,\n  \"divorced\": False,\n  \"children\": (\"Ann\",\"Billy\"),\n  \"pets\": None,\n  \"cars\": [\n    {\"model\": \"BMW 230\", \"mpg\": 27.5},\n    {\"model\": \"Ford Edge\", \"mpg\": 24.1}\n  ]\n}\n\nprint(json.dumps(x))","04bcc865":"try:\n  print(x)\nexcept NameError:\n  print(\"Variable x is not defined\")\nexcept:\n  print(\"Something else went wrong\")","afdf7ef7":"try:\n  print(x)\nexcept:\n  print(\"Something went wrong\")\nfinally:\n  print(\"The 'try except' is finished\")","c19836ef":"mytuple = (\"apple\", \"banana\", \"cherry\")\nmyit = iter(mytuple)\n\nprint(next(myit))\nprint(next(myit))\nprint(next(myit))","dc33744e":"mytuple = (\"apple\", \"banana\", \"cherry\")\n\nfor x in mytuple:\n  print(x)","087ef947":"thisdict =\t{\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(thisdict)","a7beb9f5":"thistuple = (\"apple\", \"banana\", \"cherry\")\nprint(thistuple)","d56972db":"house_price = {\"store\", \"apartment\", \"house\"}\nprint(house_price)","90360272":"house_price = {\"store\", \"apartment\", \"house\"}\n\nfor x in house_price:\n  print(x)","13e5e5dc":"thisset = {\"apple\", \"banana\", \"cherry\"}\n\nthisset.add(\"orange\")\n\nprint(thisset)","0229fb7f":"<a id=\"1\"><\/a> <br>\n## 1-Introduction","6c8aabdc":"<br>\nHow to do some math action on the data set","5bb9627f":"<a id=\"22\"><\/a> <br>\n# 2-2 How to define a Functions?\n`add_numbers` is a function that takes two numbers and adds them together.","ee641313":"<a id=\"2122\"><\/a> <br>\n### 2-12-2 Install PIP\nIf you do not have PIP installed, you can download and install it from this page: https:\/\/pypi.org\/project\/pip\/","12eacc74":"<a id=\"11\"><\/a> <br>\n## 1-1 Import\n\n> <font color=\"red\"><b>Note<\/b><\/font>\n\n>> 20 Python libraries you can\u2019t live without : [pythontips](https:\/\/pythontips.com\/2013\/07\/30\/20-python-libraries-you-cant-live-without\/)","10a6af1e":" <a id=\"top\"><\/a> <br>\n**Notebook Content**\n1. [Introduction](#1)\n    1. [Import](#11)\n    1. [Version](#12)\n    1. [setup](#13)\n1. [Python](#2)\n    1. [Python Syntax compared to other programming languages](#21)\n    1. [Python: Basics](#22)\n        1. [Variables](#221)\n        1. [Operators](#222)\n    1. [Functions](#23)\n    1. [Types and Sequences](#24)\n    1. [More on Strings](#25)\n    1. [Reading and Writing CSV files](#26)\n    1. [Dates and Times](#27)\n    1. [Objects and map()](#28)\n    1. [Lambda and List Comprehensions](#29)\n    1. [OOP](#210)\n        1. [Inheritance](#2101)\n    1. [ Python JSON](#211)\n        1. [Convert from Python to JSON](#2111)\n    1. [Python PIP](#212)\n        1. [Install PIP](#2121)\n    1. [Python Try Except](#213)\n    1. [Python Iterators](#214)\n        1. [Looping Through an Iterator](#2141)\n    1. [Dictionary](#215)\n    1. [Tuples](#216)\n    1. [Set](#217)\n        1. [Add Items](#2171)\n1. [Python Packages](#3)\n    1. [Numpy](#31)\n    1. [Pandas](#32)\n1. [Courses](#4)\n1. [Ebooks](#5)\n1. [Conclusion](#6)\n1. [References](#7)","5a3db8c0":"<br>\nConvert the timestamp to datetime.","b7f72528":"<br>\nNow let's look at strings. Use bracket notation to slice a string.\n\n###### [Go to top](#top)","2db80746":"<a id=\"217\"><\/a> <br>\n## 2-17 Set\nA set is a collection which is unordered and unindexed. In Python sets are written with curly brackets.\n###### [Go to top](#top)","4789eaf7":"<a id=\"214\"><\/a> <br>\n## 2-14 Python Iterators\nAn iterator is an object that contains a countable number of values.\n\nAn iterator is an object that can be iterated upon, meaning that you can traverse through all the values.\n\nTechnically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__().\n###### [Go to top](#top)","2f9ff0a3":"<a id=\"215\"><\/a> <br>\n## 2- 15 Dictionary\nA **dictionary** is a collection which is **unordered, changeable and indexed**. In Python dictionaries are written with curly brackets, and they have **keys and values**.","14419df1":"> <font color=\"red\"><b>Note<\/b><\/font>\n\n>> \nPython language supports the following types of operators. [tutorialspoint](https:\/\/www.tutorialspoint.com\/python\/python_basic_operators.htm)\n\n* Arithmetic Operators\n* Comparison (Relational) Operators\n* Assignment Operators\n* Logical Operators\n* Bitwise Operators\n* Membership Operators\n* Identity Operators\n\n| Symbol | Task Performed |\n|----|---|\n| +  | Addition |\n| -  | Subtraction |\n| \/  | division |\n| %  | mod |\n| *  | multiplication |\n| \/\/  | floor division |\n| **  | to the power of |\n\n### Relational Operators\n| Symbol | Task Performed |\n|----|---|\n| == | True, if it is equal |\n| !=  | True, if not equal to |\n| < | less than |\n| > | greater than |\n| <=  | less than or equal to |\n| >=  | greater than or equal to |\n### Bitwise Operators\n| Symbol | Task Performed |\n|----|---|\n| &  | Logical And |\n| l  | Logical OR |\n| ^  | XOR |\n| ~  | Negate |\n| >>  | Right shift |\n| <<  | Left shift |\n\n###### [Go to top](#top)","e1644f69":"<br>\n`timedelta` is a duration expressing the difference between two dates.","a70e4663":"<a id=\"3\"><\/a> <br>\n# 3- Python Packages\n* Numpy\n* Pandas\n* Matplotlib\n* Seaborn\n* Sklearn\n* plotly","19197cf4":" <a id=\"2\"><\/a> <br>\n# 2-Python\n\nPython is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python has a design philosophy that emphasizes code readability, notably using significant whitespace.[6]\n\nApplications for Python:\n\n1. Web and Internet Development\n1. Scientific and Numeric\n1. Education\n1. Desktop GUIs\n1. Software Development\n1. Business Applications[7]\n\n###### [Go to top](#top)","bc551f61":"<a id=\"28\"><\/a> <br>\n# 2-8 Objects and map()","2b46fcce":"<br>\nUse `set` to return the unique values for the type of Sex  in our dataset have.","feeaa34e":"<br>\nThis is an example of how to** loop through** each item in the list.","bd7f5b1d":"<a id=\"232\"><\/a> <br>\n### 2-3-2 Lists\n> <font color=\"red\"><b>Note<\/b><\/font>\n\n>> \nLists are a mutable data structure.","c72f7f79":"<br>\nUse `type` to return the object's type.","44aad519":"> <font color=\"red\"><b>Note<\/b><\/font>\n\n>> \n**Dictionaries** associate keys with values.","5d421782":"<br>\nUse `append` to append an object to a list.","cdaf6f79":"<br>\nOr using the indexing operator:","e1c85737":"<br>\n`csv.Dictreader` has read in each row of our csv file as a dictionary. `len` shows that our list is comprised of 234 dictionaries.","1f304c9f":"<a id=\"26\"><\/a> <br>\n# 2-6 How read a CSV files?\n> <font color=\"red\"><b>Note<\/b><\/font>\n\n>> \nLet's import our datafile train.csv [realpython](https:\/\/realpython.com\/python-csv\/)\n###### [Go to top](#top)","ff13798f":"<br>\n`time` returns the current time in seconds since the Epoch. (January 1st, 1970)\n\n###### [Go to top](#top)","5a777ed2":"<a id=\"21\"><\/a> <br>\n### 2-12-1 What is a Package?\nA package contains all the files you need for a **module**.\n\n**Modules** are Python code libraries you can include in your project.\n\n###### [Go to top](#top)","278aa380":"<a id=\"212\"><\/a> <br>\n### 2-1-2 Operators","1c4448b2":"<a id=\"25\"><\/a> <br>\n# 2-5 Strings\n\n###### [Go to top](#top)","dcf764dc":"<br>\nAn example of a class in python:","be2f83fe":" # <div align=\"center\">  The Data Scientist\u2019s Toolbox Tutorial - 1 <\/div>\n ### <div align=\"center\"><b>Quite Practical and Far from any Theoretical Concepts<\/b><\/div>\n \n<div style=\"text-align:center\">last update: <b>18\/01\/2019<\/b><\/div>","800957e2":"<br>\n`date.today` returns the current local date.","e10e63ce":"<a id=\"2171\"><\/a> <br>\n### 2-17-1 Add Items\nTo add one item to a set use the add() method.\n\nTo add more than one item to a set use the update() method.\n###### [Go to top](#top)","6fcf59cb":"<a id=\"29\"><\/a> <br>\n# 2-9 Lambda\nA lambda function is a small anonymous function.\n\nA lambda function can take any number of arguments, but can only have one expression. [w3schools](https:\/\/www.w3schools.com\/python\/python_lambda.asp)","c23b92d8":"<a id=\"211\"><\/a> <br>\n## 2-11 Python JSON\n","4549e370":"<a id=\"12\"><\/a> <br>\n## 1-2 Version","2bb177ae":"Convert a Python object containing all the legal data types:","2f9488d1":"<br>\nHandy datetime attributes:","59118ba7":"<a id=\"210\"><\/a> <br>\n# 2-10 OOP\n1. **Class** \u2212 A user-defined prototype for an object that defines a set of attributes that characterize any object of the class. The attributes are data members (class variables and instance variables) and methods, accessed via dot notation.\n\n1. **Class variable** \u2212 A variable that is shared by all instances of a class. Class variables are defined within a class but outside any of the class's methods. Class variables are not used as frequently as instance variables are.\n\n1. **Data member** \u2212 A class variable or instance variable that holds data associated with a class and its objects.\n\n1. **Function overloading** \u2212 The assignment of more than one behavior to a particular function. The operation performed varies by the types of objects or arguments involved.\n\n1. **Instance variable** \u2212 A variable that is defined inside a method and belongs only to the current instance of a class.\n\n1. **Inheritance** \u2212 The transfer of the characteristics of a class to other classes that are derived from it.\n\n1. **Instance** \u2212 An individual object of a certain class. An object obj that belongs to a class Circle, for example, is an instance of the class Circle.\n\n1. **Instantiation** \u2212 The creation of an instance of a class.\n\n1. **Method** \u2212 A special kind of function that is defined in a class definition.\n\n1. **Object** \u2212 A unique instance of a data structure that's defined by its class. An object comprises both data members (class variables and instance variables) and methods.\n\n1. **Operator overloading** \u2212 The assignment of more than one function to a particular operator.[4]\n\n###### [Go to top](#top)","2505b76d":"<a id=\"2141\"><\/a> <br>\n### 2- 14-1 Looping Through an Iterator\n","04b98303":"<a id=\"212\"><\/a> <br>\n## 2-12 Python PIP\n","dd9fb325":"<br>\n`keys` gives us the column names of our csv.","143b7c60":"<a id=\"14\"><\/a> <br>\n## 1-4 Import DataSets","28d17315":"<a id=\"7\"><\/a> <br>\n## 7- References\n1. [Coursera](https:\/\/www.coursera.org\/specializations\/data-science-python)\n1. [GitHub](https:\/\/github.com\/mjbahmani)\n1. [plot.ly](https:\/\/plot.ly\/python\/offline\/)\n1. [tutorialspoint](https:\/\/www.tutorialspoint.com\/python\/python_classes_objects.htm)\n1. [Top 28 Cheat Sheets for Machine Learning](https:\/\/www.analyticsvidhya.com\/blog\/2017\/02\/top-28-cheat-sheets-for-machine-learning-data-science-probability-sql-big-data\/)\n1. [Python](https:\/\/en.wikipedia.org\/wiki\/Python_(programming_language))\n1. [python-app](https:\/\/www.python.org\/about\/apps\/)\n1. [tutorialspoint-operators](https:\/\/www.tutorialspoint.com\/python\/python_basic_operators.htm)\n1. [w3schools](https:\/\/www.w3schools.com\/python\/python_lambda.asp)\n1. [Machine Learning Certification by Stanford University (Coursera)](https:\/\/www.coursera.org\/learn\/machine-learning\/)\n\n1. [Machine Learning A-Z\u2122: Hands-On Python & R In Data Science (Udemy)](https:\/\/www.udemy.com\/machinelearning\/)\n\n1. [Deep Learning Certification by Andrew Ng from deeplearning.ai (Coursera)](https:\/\/www.coursera.org\/specializations\/deep-learning)\n\n1. [Python for Data Science and Machine Learning Bootcamp (Udemy)](Python for Data Science and Machine Learning Bootcamp (Udemy))\n\n1. [Mathematics for Machine Learning by Imperial College London](https:\/\/www.coursera.org\/specializations\/mathematics-machine-learning)\n\n1. [Deep Learning A-Z\u2122: Hands-On Artificial Neural Networks](https:\/\/www.udemy.com\/deeplearning\/)\n\n1. [Complete Guide to TensorFlow for Deep Learning Tutorial with Python](https:\/\/www.udemy.com\/complete-guide-to-tensorflow-for-deep-learning-with-python\/)\n\n1. [Data Science and Machine Learning Tutorial with Python \u2013 Hands On](https:\/\/www.udemy.com\/data-science-and-machine-learning-with-python-hands-on\/)\n\n1. [Machine Learning Certification by University of Washington](https:\/\/www.coursera.org\/specializations\/machine-learning)\n\n1. [Data Science and Machine Learning Bootcamp with R](https:\/\/www.udemy.com\/data-science-and-machine-learning-bootcamp-with-r\/)\n1. [Creative Applications of Deep Learning with TensorFlow](https:\/\/www.class-central.com\/course\/kadenze-creative-applications-of-deep-learning-with-tensorflow-6679)\n1. [Neural Networks for Machine Learning](https:\/\/www.class-central.com\/mooc\/398\/coursera-neural-networks-for-machine-learning)\n1. [Practical Deep Learning For Coders, Part 1](https:\/\/www.class-central.com\/mooc\/7887\/practical-deep-learning-for-coders-part-1)\n1. [Machine Learning](https:\/\/www.cs.ox.ac.uk\/teaching\/courses\/2014-2015\/ml\/index.html)\n\n###### [Go to top](#top)","605a47b3":"<a id=\"211\"><\/a> <br>\n### 2-1-1 how to define a Variable?","b75ef6fe":"<a id=\"216\"><\/a> <br>\n## 2-16 Tuples\nA **tuple** is a collection which is **ordered and unchangeable**. In Python tuples are written with round brackets.\n\n","7cf6c7f6":"Return a iterator from a tuple, and print each value:","83cb5a17":"<a id=\"291\"><\/a> <br>\n### 2-9-1  List Comprehensions","b44d792b":"<a id=\"41\"><\/a> <br>\n# 3-2 Pandas\n\nFor Reading this section please fork and run the following kernel:\n\n[The Data Scientist\u2019s Toolbox Tutorial - 2](https:\/\/www.kaggle.com\/mjbahmani\/the-data-scientist-s-toolbox-tutorial-2\/)","f952a737":"<br>\nNow the same thing but with list comprehension.","b87e8fe6":"<a id=\"231\"><\/a> <br>\n### 2-3-1 Tuples\n> <font color=\"red\"><b>Note<\/b><\/font>\n\n>> \nTuples are an **immutable** data structure (cannot be altered).","ce677934":"<a id=\"13\"><\/a> <br>\n##  1-3 Setup","b8fb7d9d":" <a id=\"5\"><\/a> <br>\n## 5 Ebooks\nIf you love reading , here is **10 free machine learning books**\n1. [Probability and Statistics for Programmers](http:\/\/www.greenteapress.com\/thinkstats\/)\n2. [Bayesian Reasoning and Machine Learning](http:\/\/web4.cs.ucl.ac.uk\/staff\/D.Barber\/textbook\/091117.pdf)\n2. [An Introduction to Statistical Learning](http:\/\/www-bcf.usc.edu\/~gareth\/ISL\/)\n2. [Understanding Machine Learning](http:\/\/www.cs.huji.ac.il\/~shais\/UnderstandingMachineLearning\/index.html)\n2. [A Programmer\u2019s Guide to Data Mining](http:\/\/guidetodatamining.com\/)\n2. [Mining of Massive Datasets](http:\/\/infolab.stanford.edu\/~ullman\/mmds\/book.pdf)\n2. [A Brief Introduction to Neural Networks](http:\/\/www.dkriesel.com\/_media\/science\/neuronalenetze-en-zeta2-2col-dkrieselcom.pdf)\n2. [Deep Learning](http:\/\/www.deeplearningbook.org\/)\n2. [Natural Language Processing with Python](https:\/\/www.researchgate.net\/publication\/220691633_Natural_Language_Processing_with_Python)\n2. [Machine Learning Yearning](http:\/\/www.mlyearning.org\/)","0e257390":"<a id=\"2111\"><\/a> <br>\n## 2-11-1 Convert from Python to JSON\n","04004556":"<a id=\"27\"><\/a> <br>\n# 2-7 Dates and Times","9bca79c5":"\n\n---------------------------------------------------------------------\nFork, Run and Follow this kernel on GitHub:\n> ###### [ GitHub](https:\/\/github.com\/mjbahmani\/10-steps-to-become-a-data-scientist)\n\n\n-------------------------------------------------------------------------------------------------------------\n **I hope you find this kernel helpful and some <font color=\"red\">UPVOTES<\/font> would be very much appreciated.**\n \n -----------\n","243e76cd":"<br>\nPython has a built in method for convenient string formatting.","cb453d76":"<a id=\"23\"><\/a> <br>\n# 2-3 Types and Sequences","2974dcfd":"<br>\nLet's iterate from 0 to 9 and return the even numbers.\n\n###### [Go to top](#top)","54d5e911":"\n<a id=\"6\"><\/a> <br>\n## 6 -Conclusion\nYou have got an introduction to the main packages and ideas in the **The Data Scientist\u2019s Toolbox Tutorial - 1**. I hope,  you have had fun with it also, I want to hear your voice to update this kernel. in addition, there is the new and second version of the kernel that introduces the next packages. to continue please click on [**The Data Scientist\u2019s Toolbox Tutorial - 2**](https:\/\/www.kaggle.com\/mjbahmani\/the-data-scientist-s-toolbox-tutorial-2)","576870c4":"<a id=\"31\"><\/a> <br>\n# 3-1 NumPy\n\nFor Reading this section please fork and run the following kernel:\n\n[The Data Scientist\u2019s Toolbox Tutorial - 2](https:\/\/www.kaggle.com\/mjbahmani\/the-data-scientist-s-toolbox-tutorial-2\/)","d93aea8e":"<a id=\"21\"><\/a> <br>\n# 2-1  Basic\n","1712690e":" <img src=\"http:\/\/s8.picofile.com\/file\/8340141626\/packages1.png\"  height=\"420\" width=\"420\">\n \n ###### [Go to top](#top)","4f0d75b0":"You can convert Python objects of the following types, into JSON strings:\n\n* dict\n* list\n* tuple\n* string\n* int\n* float\n* True\n* False\n* None\n\n###### [Go to top](#top)","e175fc10":"In this kernel, we have a comprehensive tutorials for some important packages in python after that you can read my other kernels about machine learning.","27a3afd0":"Go to first step: [Course Home Page](https:\/\/www.kaggle.com\/mjbahmani\/10-steps-to-become-a-data-scientist)\n\nGo to next step : [Titanic](https:\/\/www.kaggle.com\/mjbahmani\/a-comprehensive-ml-workflow-with-python)","917fcaf4":"<a id=\"2101\"><\/a> <br>\n### 2-10-1 Inheritance\n\nThere might be cases where a new class would have all the previous characteristics of an already defined class. So the new class can \"inherit\" the previous class and add it's own methods to it. This is called as inheritance.\n\nConsider class SoftwareEngineer which has a method salary.","eb08d416":">###### You may  be interested have a look at 10 Steps to Become a Data Scientist: \n\n1. <font color=\"red\">You are in the first step<\/font>\n2. [Python Packages](https:\/\/www.kaggle.com\/mjbahmani\/the-data-scientist-s-toolbox-tutorial-2)\n3. [Mathematics and Linear Algebra](https:\/\/www.kaggle.com\/mjbahmani\/linear-algebra-for-data-scientists)\n4. [Programming &amp; Analysis Tools](https:\/\/www.kaggle.com\/mjbahmani\/20-ml-algorithms-15-plot-for-beginners)\n5. [Big Data](https:\/\/www.kaggle.com\/mjbahmani\/a-data-science-framework-for-quora)\n6. [Data visualization](https:\/\/www.kaggle.com\/mjbahmani\/top-5-data-visualization-libraries-tutorial)\n7. [Data Cleaning](https:\/\/www.kaggle.com\/mjbahmani\/machine-learning-workflow-for-house-prices)\n8. [How to solve a Problem?](https:\/\/www.kaggle.com\/mjbahmani\/the-data-scientist-s-toolbox-tutorial-2)\n9. [Machine Learning](https:\/\/www.kaggle.com\/mjbahmani\/a-comprehensive-ml-workflow-with-python)\n10. [Deep Learning](https:\/\/www.kaggle.com\/mjbahmani\/top-5-deep-learning-frameworks-tutorial)\n\n---------------------------------------------------------------------\nFork, Run and Follow this kernel on GitHub:\n> ###### [ GitHub](https:\/\/github.com\/mjbahmani\/10-steps-to-become-a-data-scientist)\n\n\n-------------------------------------------------------------------------------------------------------------\n **I hope you find this kernel helpful and some <font color=\"red\">UPVOTES<\/font> would be very much appreciated**\n \n -----------\n","ace34de3":"<a id=\"213\"><\/a> <br>\n## 2-13 Python Try Except\nThe **try** block lets you test a block of code for errors.\n\nThe **except** block lets you handle the error.\n\nThe **finally** block lets you execute code, regardless of the result of the try- and except blocks.","559ad7bd":"<a id=\"4\"><\/a> <br>\n## 4- Courses\nThere are a lot of online courses that can help you develop your knowledge, here I have just  listed some of them:\n\n1. [Machine Learning Certification by Stanford University (Coursera)](https:\/\/www.coursera.org\/learn\/machine-learning\/)\n\n2. [Machine Learning A-Z\u2122: Hands-On Python & R In Data Science (Udemy)](https:\/\/www.udemy.com\/machinelearning\/)\n\n3. [Deep Learning Certification by Andrew Ng from deeplearning.ai (Coursera)](https:\/\/www.coursera.org\/specializations\/deep-learning)\n\n4. [Python for Data Science and Machine Learning Bootcamp (Udemy)](Python for Data Science and Machine Learning Bootcamp (Udemy))\n\n5. [Mathematics for Machine Learning by Imperial College London](https:\/\/www.coursera.org\/specializations\/mathematics-machine-learning)\n\n6. [Deep Learning A-Z\u2122: Hands-On Artificial Neural Networks](https:\/\/www.udemy.com\/deeplearning\/)\n\n7. [Complete Guide to TensorFlow for Deep Learning Tutorial with Python](https:\/\/www.udemy.com\/complete-guide-to-tensorflow-for-deep-learning-with-python\/)\n\n8. [Data Science and Machine Learning Tutorial with Python \u2013 Hands On](https:\/\/www.udemy.com\/data-science-and-machine-learning-with-python-hands-on\/)\n\n9. [Machine Learning Certification by University of Washington](https:\/\/www.coursera.org\/specializations\/machine-learning)\n\n10. [Data Science and Machine Learning Bootcamp with R](https:\/\/www.udemy.com\/data-science-and-machine-learning-bootcamp-with-r\/)\n11. [Creative Applications of Deep Learning with TensorFlow](https:\/\/www.class-central.com\/course\/kadenze-creative-applications-of-deep-learning-with-tensorflow-6679)\n12. [Neural Networks for Machine Learning](https:\/\/www.class-central.com\/mooc\/398\/coursera-neural-networks-for-machine-learning)\n13. [Practical Deep Learning For Coders, Part 1](https:\/\/www.class-central.com\/mooc\/7887\/practical-deep-learning-for-coders-part-1)\n14. [Machine Learning](https:\/\/www.cs.ox.ac.uk\/teaching\/courses\/2014-2015\/ml\/index.html)"}}