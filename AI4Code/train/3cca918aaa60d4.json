{"cell_type":{"26a68ac4":"code","2d060f63":"code","a17d4e1a":"code","3a72977d":"code","9e15f6b2":"code","b62df78c":"code","d1beeb90":"code","8bb24e51":"code","23ce6c6a":"code","559ad02f":"code","85da5590":"code","90a7f6ba":"code","bf9cc9a9":"code","1a4b1179":"code","d9973d9e":"code","3a8ff2d7":"code","643cb834":"code","7f9cf3a3":"code","5c5d7dfd":"code","69377769":"code","34a7ba7c":"code","760d86e4":"code","fc8fa4f9":"code","2337fdd0":"code","3c2bdc42":"code","0268ed6b":"code","0e3446cc":"code","3337b571":"code","4eed16e0":"code","43fe521e":"code","dfe4592c":"code","377fbd9f":"code","a0f22d2c":"code","21b37219":"code","765ecc39":"code","3ff3476f":"code","cdb036e8":"code","d6418c46":"code","81511c16":"code","7683668b":"code","1de2bf93":"code","a0e4d3bd":"code","3686881c":"code","8d4e36dc":"code","f20693dc":"code","197b2786":"code","e1b1e738":"code","e7f32ce6":"code","9eed48f3":"code","8b934590":"code","dcbb867a":"code","a72dd48c":"code","1c2f3b1b":"code","d1575f36":"code","4ef267a9":"code","faadaeb5":"code","71b76171":"code","0bc5b74d":"code","76144c5d":"code","edc4e973":"code","a4c4eb3b":"code","c88a0eb8":"code","38825c32":"code","b8fded23":"code","41c89591":"code","714a0d42":"code","790b8c4c":"code","458df45a":"code","212c31b8":"code","56ba7a75":"code","912b1d15":"code","1b4f4a90":"code","3f3342c4":"code","fa5ab0e3":"code","042a5984":"code","e599ac22":"code","6ee71999":"code","f0e6cbc5":"code","0fd52b05":"code","03ef630b":"code","d987d3a3":"code","e022d050":"code","2cd1480e":"markdown","0553ba02":"markdown","ff1e88fb":"markdown","2709b579":"markdown","14e349a0":"markdown","f682ea55":"markdown","b7108171":"markdown","bfd00ea4":"markdown","5a51e319":"markdown","16f9c4ed":"markdown","8756e1de":"markdown","5c0577ca":"markdown","770a7fc7":"markdown","7653a5eb":"markdown","30a84c6f":"markdown","16eecf09":"markdown","d25a7fbe":"markdown"},"source":{"26a68ac4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport matplotlib \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d060f63":"raw_data=pd.read_csv('\/kaggle\/input\/bengaluru-house-price-data\/Bengaluru_House_Data.csv')\nraw_data.head()","a17d4e1a":"raw_data.shape","3a72977d":"list(raw_data.groupby('area_type'))","9e15f6b2":"list(raw_data.groupby('area_type')['area_type'])","b62df78c":"list(raw_data.groupby('area_type')['location'])","d1beeb90":"raw_data.describe()","8bb24e51":"raw_data.groupby('area_type')['location'].agg('count')","23ce6c6a":"featured_data=raw_data.drop(['area_type','availability','society'],axis='columns')\nfeatured_data.head()","559ad02f":"featured_data.isnull().sum()","85da5590":"featured_data.dropna(inplace=True)","90a7f6ba":"featured_data.isnull().sum()","bf9cc9a9":"featured_data.shape","1a4b1179":"featured_data['size'].unique()","d9973d9e":"featured_data['balcony'].unique()","3a8ff2d7":"featured_data['bhk']=featured_data['size'].apply(lambda x: int(x.split(' ')[0]))\nfeatured_data.head()","643cb834":"featured_data.drop(['size'],axis='columns',inplace=True)\nfeatured_data.head()","7f9cf3a3":"featured_data.loc[featured_data['bhk']>11] #featured_data[featured_data['bhk']>15] #featured_data[featured_data.bhk>15]","5c5d7dfd":"featured_data.shape","69377769":"featured_data.groupby('bhk')['bhk'].agg('count')","34a7ba7c":"featured_data.bhk.describe()","760d86e4":"featured_data.groupby('total_sqft')['total_sqft'].agg('count')","fc8fa4f9":"featured_data=featured_data[featured_data['bhk']<=12]","2337fdd0":"featured_data.shape","3c2bdc42":"featured_data.groupby('balcony')['total_sqft'].agg('count')","0268ed6b":"featured_data=featured_data[featured_data['bath']<=8]\nfeatured_data.shape","0e3446cc":"featured_data.groupby('bath')['bath'].agg('count')","3337b571":"featured_data.head()","4eed16e0":"featured_data['total_sqft'].unique()","43fe521e":"def is_float(x):\n    try:\n        float(x)\n    except:\n        return False\n    return True","dfe4592c":"featured_data[featured_data['total_sqft'].apply(is_float)]","377fbd9f":"featured_data[~featured_data['total_sqft'].apply(is_float)].head()","a0f22d2c":"def clean_data(x):\n    tokens=x.split('-')\n    if len(tokens) == 2:\n        return (float(tokens[0])+float(tokens[1]))\/2\n    \n    try:\n        return float(x)\n    except:\n        return None        ","21b37219":"clean_data('1000-1000')","765ecc39":"featured_data['total_sqft']=featured_data['total_sqft'].apply(clean_data)\nfeatured_data['total_sqft'].unique()","3ff3476f":"featured_data.shape","cdb036e8":"featured_data['total_sqft']","d6418c46":"featured_data.isnull().sum()","81511c16":"featured_data.dropna(inplace=True)","7683668b":"featured_data.isnull().sum()","1de2bf93":"featured_data.shape","a0e4d3bd":"len(featured_data['location'].unique())","3686881c":"featured_data['location']=featured_data['location'].apply(lambda x : x.strip())","8d4e36dc":"featured_data.groupby('location')['location'].agg('count')","f20693dc":"location_stats=featured_data.groupby('location')['location'].agg('count').sort_values()\nlocation_stats.head(100)","197b2786":"less_locations=location_stats[location_stats<10]\nless_locations","e1b1e738":"featured_data['location']=featured_data['location'].apply(lambda x: 'others' if x in less_locations else x)\nlen(featured_data['location'].unique())","e7f32ce6":"featured_data['price_per_sqft']=(featured_data['price']*100000)\/featured_data['total_sqft']\nfeatured_data.head()","9eed48f3":"featured_data=featured_data[~(featured_data['total_sqft']\/featured_data['bhk']<250)]\nfeatured_data.shape","8b934590":"featured_data['price_per_sqft'].describe()","dcbb867a":"def remove_outlier_ppsqft(df):\n    new_df=pd.DataFrame()\n    for key,sub_data in df.groupby('location'):\n        mn=np.mean(sub_data['price_per_sqft'])\n        stdv=np.std(sub_data['price_per_sqft'])\n        accepted_data=sub_data[(sub_data['price_per_sqft']>(mn-stdv)) & (sub_data['price_per_sqft']<=(mn+stdv)) ]\n        new_df=pd.concat([new_df,accepted_data])\n    return new_df    ","a72dd48c":"new_data=remove_outlier_ppsqft(featured_data)","1c2f3b1b":"new_data.shape","d1575f36":"new_data.head()","4ef267a9":"def plot_area(df,location):\n    bhk2=df[(df['location']==location) & (df['bhk']==2)]\n    bhk3=df[(df['location']==location) & (df['bhk']==3)]\n    matplotlib.rcParams['figure.figsize']=(15,10)\n    plt.scatter(bhk2.total_sqft,bhk2.price,color=\"blue\",label=\"2 bhk\",s=70)\n    plt.scatter(bhk3.total_sqft,bhk3.price,marker=\"+\",color=\"green\",label=\"3 bhk\",s=80)\n    plt.legend()\n    plt.title(location,color='red')\n    plt.xlabel('Total Square Feet')\n    plt.ylabel('Total Price')\n    \nplot_area(new_data,\"Rajaji Nagar\")    ","faadaeb5":"new_data.groupby('location')['location'].agg('count')","71b76171":"new_data.groupby('location')['location'].agg('count').sort_values(ascending=False).head(10)","0bc5b74d":"plot_area(new_data,\"Whitefield\")","76144c5d":"plot_area(new_data,\"Marathahalli\")","edc4e973":"def remove_outliers(df):\n    arr_del=np.array([])\n    for location_name,location_data in df.groupby('location'):\n        bhk_stats=dict()\n        for bhk_number,bhk_data in location_data.groupby('bhk'):\n            bhk_stats[bhk_number]={\n                'mean':np.mean(bhk_data.price_per_sqft),\n                'stdv':np.std(bhk_data.price_per_sqft),\n                'count':bhk_data.shape[0]\n            }\n        for bhk_number,bhk_data in location_data.groupby('bhk'):\n            prev_stats=bhk_stats.get(bhk_number-1)\n            if prev_stats:\n                arr_del=np.append(arr_del,bhk_data[bhk_data.price_per_sqft<(prev_stats['mean'])].index.values)\n            #exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)\n    return df.drop(arr_del,axis='index')\n\n","a4c4eb3b":"final_data=remove_outliers(new_data)","c88a0eb8":"final_data.shape","38825c32":"plot_area(final_data,\"Whitefield\")","b8fded23":"plot_area(final_data,\"Rajaji Nagar\")   ","41c89591":"dummies=pd.get_dummies(final_data['location'])\ndummies.head()","714a0d42":"final_data=pd.concat([final_data,dummies.drop('others',axis='columns')],axis='columns')\nfinal_data.head()","790b8c4c":"final_data","458df45a":"final_data.drop(['location'],axis='columns',inplace=True)\nfinal_data.head()","212c31b8":"#out=final_data['price']\nout.head(60)","56ba7a75":"out.shape","912b1d15":"final_data.drop(['price'],axis='columns',inplace=True)\n","1b4f4a90":"final_data.head()","3f3342c4":"from sklearn.model_selection import ShuffleSplit\nfrom  sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score","fa5ab0e3":"cv=ShuffleSplit(n_splits=6 ,test_size=0.3,random_state=10)\na=list(cross_val_score(LinearRegression(),final_data,out,cv=cv))\nfor x in a:\n    print(x)","042a5984":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\n\ndef find_the_best(X,y):\n    algos = {\n        'linear_regression' : {\n            'model': LinearRegression(),\n            'params': {\n                'normalize': [True, False]\n            }\n        },\n        'lasso': {\n            'model': Lasso(),\n            'params': {\n                'alpha': [1,2],\n                'selection': ['random', 'cyclic']\n            }\n        },\n        'decision_tree': {\n            'model': DecisionTreeRegressor(),\n            'params': {\n                'criterion' : ['mse','friedman_mse'],\n                'splitter': ['best','random']\n            }\n        }\n    }\n    scores = []\n    cv = ShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\n    for algo_name, config in algos.items():\n        gs =  GridSearchCV(config['model'], config['params'], cv=cv, return_train_score=False)\n        gs.fit(X,y)\n        scores.append({\n            'model': algo_name,\n            'best_score': gs.best_score_,\n            'best_params': gs.best_params_\n        })\n\n    return pd.DataFrame(scores,columns=['model','best_score','best_params'])\n    \n","e599ac22":"find_the_best(final_data,out)","6ee71999":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nx_train,x_test,y_train,y_test=train_test_split(final_data,out,test_size=0.3,random_state=82)\n\nDt_model=DecisionTreeRegressor(criterion='friedman_mse',splitter= 'best')\nDt_model.fit(x_train,y_train)\nDt_model.score(x_test,y_test)","f0e6cbc5":"a=np.where(final_data.columns==\"bath\")\na[0][0]","0fd52b05":"def predict_price(location,sqft,bath,balcony,bhk):\n    location_index=np.where(final_data.columns==location)[0][0]\n    x=np.zeros(len(final_data.columns))\n    x[0]=sqft\n    x[1]=bath\n    x[2]=balcony\n    x[3]=bhk\n    if location_index>=0:\n        x[location_index]=1\n    return Dt_model.predict([x])[0]\npredict_price('Indira Nagar',1000, 3, 1,3)","03ef630b":"final_data.loc[210][1]","d987d3a3":"import pickle\nwith open('house_price.pickle','wb') as f:\n    pickle.dump(Dt_model,f)","e022d050":"import json\ncolumns={\n    'data_cols':[col.lower() for col in final_data.columns]\n}\nwith open('column_names.json','w') as f:\n    f.write(json.dumps(columns))","2cd1480e":"#### Here we can see the values that shows float values . Now we will locate those values not supposed to be float","0553ba02":"### Outliers will be detected now","ff1e88fb":"### From above scatter plot we can see that we can remove the erros successfully","2709b579":"## Data Cleaning","14e349a0":"# Exporting the column names into json file","f682ea55":"# Exporting model  into pickle file","b7108171":"### Errorenous values are found in the bedroom and bathroom numbers keeping campatible with the square feet ","bfd00ea4":"## Feature Engineering","5a51e319":"# Above code segment shows the best accuracy","16f9c4ed":"## Exploring error (where the 3 bhk should contain higher price than 2 bhk in the same location)","8756e1de":" ## Data Preprocessing","5c0577ca":"#### min price is 267 and max is 176470 which i incompatible because we wanna build a generic model","770a7fc7":"# Now we look forward to building the model","7653a5eb":"### Assume that typical minimum square foot per room is 250 sqft","30a84c6f":"### This function creates some NaN values with should be deleted","16eecf09":"### Now we should remove the properties where for a same location the price of 2 bedrooms is higher than the price of 3 bedrooms \n\n##### We will make such kind of dictionary\n{\n   \n   '1' : {\n        'mean': 4000,\n        'std: 2000,\n        'count': 34\n    },\n    \n    \n   '2' : {\n        'mean': 4300,\n        'std: 2300,\n        'count': 22\n    }, \n    \n}","d25a7fbe":"## Error check in the dataset "}}