{"cell_type":{"92b0cbd2":"code","f618c26d":"code","b95d7860":"code","29bead69":"code","e6361c8f":"code","3047b7f3":"code","3b9a883d":"code","313d6526":"code","d12e792d":"code","42e360a2":"code","08a73616":"code","9e951652":"code","3c890645":"code","e5d0a4e4":"code","470ebc2e":"code","d8ff5cd8":"code","522930cc":"code","a3a839cf":"code","f97200b9":"code","a48fdbfb":"code","82384b90":"code","96e4e822":"markdown","47bc4737":"markdown","df7ee67c":"markdown","4964a6dd":"markdown","3c94acaf":"markdown","651a752a":"markdown","00b1b004":"markdown","d2fd7d23":"markdown","09ca8fd8":"markdown","fc45ab02":"markdown"},"source":{"92b0cbd2":"import pandas as pd","f618c26d":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","b95d7860":"Y = train['label']\nX = train.drop(labels=[\"label\"], axis=1)","29bead69":"X = X \/ 255.0\ntest = test \/ 255.0","e6361c8f":"import seaborn as sns\ng = sns.countplot(Y)\nY.value_counts()","3047b7f3":"%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\nXshow = X.values.reshape(-1,28,28,1)\ng = plt.imshow(Xshow[0][:,:,0])","3b9a883d":"from sklearn.model_selection import train_test_split\nrandom_seed=0\nX_train, X_val, Y_train, Y_val = train_test_split(X, Y, test_size=0.1, random_state=random_seed)","313d6526":"#from sklearn.linear_model import SGDClassifier\n#sgd_clf = SGDClassifier(max_iter=5, random_state=42)\n# Train the model using splited train dataset\n#sgd_clf.fit(X_train, Y_train)\n# Check the score using splited test dataset\n#sgd_clf.score(X_val, Y_val)","d12e792d":"from sklearn.ensemble import RandomForestClassifier\nrforest_model = RandomForestClassifier(n_estimators=200)\n# Train the model using splited train dataset\nrforest_model.fit(X_train, Y_train)\n# Check the score using splited test dataset\nrforest_model.score(X_val, Y_val)","42e360a2":"#from sklearn.neighbors import KNeighborsClassifier\n#knn = KNeighborsClassifier(n_neighbors=3)\n# Train the model using splited train dataset\n#knn.fit(X_train, Y_train)\n# Check the score using splited test dataset\n#knn.score(X_val, Y_val)","08a73616":"#from sklearn.linear_model import LogisticRegression\n#lr = LogisticRegression(C=1)\n# Train the model using splited train dataset\n#lr.fit(X_train, Y_train)\n# Check the score using splited test dataset\n#lr.score(X_val, Y_val)","9e951652":"#from sklearn.svm import LinearSVC\n#svc = LinearSVC(C=0.1)\n#svc.fit(X_train, Y_train)\n#svc.score(X_val, Y_val)","3c890645":"#from sklearn.tree import DecisionTreeClassifier\n#tree = DecisionTreeClassifier(max_depth=20, random_state=0)\n#tree.fit(X_train, Y_train)\n#tree.score(X_val, Y_val)","e5d0a4e4":"#from sklearn.ensemble import GradientBoostingClassifier\n#gbrt = GradientBoostingClassifier(random_state=0)\n#gbrt.fit(X_train, Y_train)\n#gbrt.score(X_val, Y_val)","470ebc2e":"#from sklearn.svm import SVC\n#svm = SVC(kernel='rbf', C=10, gamma=0.1)\n#svm.fit(X_train, Y_train)\n#svm.score(X_val, Y_val)","d8ff5cd8":"#from sklearn.neural_network import MLPClassifier\n# \ud544\uc694\ud558\uba74 activiation, alpha\n#mlp = MLPClassifier(solver='lbfgs', random_state=0, hidden_layer_sizes=[20])\n#mlp.fit(X_train, Y_train)\n#mlp.score(X_val, Y_val)","522930cc":"rforest_model.fit(X, Y)","a3a839cf":"results = rforest_model.predict(test)","f97200b9":"submission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission[\"Label\"] = results","a48fdbfb":"submission.head()","82384b90":"submission.to_csv('.\/simpleMNIST.csv', index=False)","96e4e822":"## Predict the test dataset","47bc4737":"> ## Visualize Dataset","df7ee67c":"## Train using sklearn","4964a6dd":"## Load Dataset","3c94acaf":"## Split the train, test data","651a752a":"# Digit Recognizer without deep learning","00b1b004":"* Use the RandomForest\n* Train again using all of train dataset","d2fd7d23":"* We need to preprocess 0~255 -> 0~1","09ca8fd8":"### Check the image in dataset","fc45ab02":"* Seperate X(784 pixel 1dim vector) and Y(target)"}}