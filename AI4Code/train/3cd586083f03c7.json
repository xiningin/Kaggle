{"cell_type":{"a967e394":"code","760735b8":"code","8abdd309":"code","68b46fe9":"code","d01edd6f":"code","9ba27d1a":"code","5d29f5b1":"code","96d007e1":"code","42bd851a":"code","acd00fc9":"code","fc288acb":"code","b2ec1dd9":"code","0b1605f3":"code","9607b63d":"code","e1e83cb0":"code","8d6561b8":"code","ae45105e":"code","3eb71944":"code","7778ba07":"code","2471c27f":"code","8667f1a6":"code","acf51f97":"code","ab50cca4":"code","7e61cf08":"code","bef8e198":"code","87ed42f3":"code","49bbb145":"code","ddc0d317":"code","71b7e583":"markdown","56974ec7":"markdown","b32bb77d":"markdown","f5d11f25":"markdown","37743a36":"markdown","0e1f77d0":"markdown","f5b1e380":"markdown","17673a82":"markdown","a4ca4543":"markdown","41730c92":"markdown","6509cb0d":"markdown","3569efa2":"markdown","dcf70a3f":"markdown","a99bc7bb":"markdown","82683847":"markdown","abbe81eb":"markdown","5db43c68":"markdown","fc227ed1":"markdown","354e7a4f":"markdown","c211e9ba":"markdown","94199e4c":"markdown","9f912d01":"markdown","a9ec356a":"markdown","14411505":"markdown","ec45aac9":"markdown","2c71934f":"markdown","47323182":"markdown","b7098730":"markdown","781539c1":"markdown","5158fa8e":"markdown"},"source":{"a967e394":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nfrom datetime import datetime\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom itertools import combinations\n\nfrom datetime import datetime\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.tsa.stattools import acf, pacf\nfrom statsmodels.tsa.arima_model import ARIMA as ARIMA\nimport statsmodels.api as sm\nimport statsmodels.tsa.api as smt\npd.options.display.float_format = '{:.2f}'.format","760735b8":"data = pd.read_csv('..\/input\/air-passengers\/AirPassengers.csv')\ndata.head()","8abdd309":"data.isnull().sum()","68b46fe9":"data.info()","d01edd6f":"data['Date'] = pd.to_datetime(data['Month'])\ndata = data.drop(columns = 'Month')\ndata = data.set_index('Date')\ndata = data.rename(columns = {'#Passengers':'Passengers'})\ndata.head()","9ba27d1a":"def test_stationarity(timeseries):\n    #Determing rolling statistics\n    MA = timeseries.rolling(window=12).mean()\n    MSTD = timeseries.rolling(window=12).std()\n\n    #Plot rolling statistics:\n    plt.figure(figsize=(15,5))\n    orig = plt.plot(timeseries, color='blue',label='Original')\n    mean = plt.plot(MA, color='red', label='Rolling Mean')\n    std = plt.plot(MSTD, color='black', label = 'Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)\n\n    #Perform Dickey-Fuller test:\n    print('Results of Dickey-Fuller Test:')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print(dfoutput)","5d29f5b1":"def tsplot(y, lags=None, figsize=(12, 7), style='bmh'):\n    if not isinstance(y, pd.Series):\n        y = pd.Series(y)\n        \n    with plt.style.context(style):    \n        fig = plt.figure(figsize=figsize)\n        layout = (2, 2)\n        ts_ax = plt.subplot2grid(layout, (0, 0), colspan=2)\n        acf_ax = plt.subplot2grid(layout, (1, 0))\n        pacf_ax = plt.subplot2grid(layout, (1, 1))\n        \n        y.plot(ax=ts_ax)\n        p_value = sm.tsa.stattools.adfuller(y)[1]\n        ts_ax.set_title('Time Series Analysis Plots\\n Dickey-Fuller: p={0:.5f}'.format(p_value))\n        smt.graphics.plot_acf(y, lags=lags, ax=acf_ax)\n        smt.graphics.plot_pacf(y, lags=lags, ax=pacf_ax)\n        plt.tight_layout()","96d007e1":"test_stationarity(data['Passengers'])","42bd851a":"dec = sm.tsa.seasonal_decompose(data['Passengers'],period = 12).plot()\nplt.show()","acd00fc9":"sns.distplot(data['Passengers'])","fc288acb":"log_data = np.log(data)\nlog_data.head()","b2ec1dd9":"test_stationarity(log_data['Passengers'])","0b1605f3":"sns.distplot(log_data['Passengers'])","9607b63d":"data_diff = data['Passengers'].diff()\ndata_diff = data_diff.dropna()\ndec = sm.tsa.seasonal_decompose(data_diff,period = 12).plot()\nplt.show()","e1e83cb0":"test_stationarity(data_diff)","8d6561b8":"log_data_diff = log_data['Passengers'].diff()\nlog_data_diff = log_data_diff.dropna()\ndec = sm.tsa.seasonal_decompose(log_data_diff,period = 12)\ndec.plot()\nplt.show()","ae45105e":"test_stationarity(log_data_diff)","3eb71944":"tsplot(data_diff)","7778ba07":"model = ARIMA(data['Passengers'],order = (2,1,2))\nmodel_fit = model.fit()\nprint(model_fit.summary())","2471c27f":"data['FORECAST'] = model_fit.predict(start = 120,end = 144,dynamic = True)\ndata[['Passengers','FORECAST']].plot(figsize = (10,6))","8667f1a6":"exp = [data.iloc[i,0] for i in range(120,len(data))]\npred = [data.iloc[i,1] for i in range(120,len(data))]\ndata = data.drop(columns = 'FORECAST')\nprint(mean_absolute_error(exp,pred))","acf51f97":"data_diff_seas = data_diff.diff(12)\ndata_diff_seas = data_diff_seas.dropna()\ndec = sm.tsa.seasonal_decompose(data_diff_seas,period = 12)\ndec.plot()\nplt.show()","ab50cca4":"tsplot(data_diff_seas)","7e61cf08":"model = sm.tsa.statespace.SARIMAX(data['Passengers'],order = (2,1,2),seasonal_order = (1,1,2,12))\nresults = model.fit()\nprint(results.summary())","bef8e198":"data['FORECAST'] = results.predict(start = 120,end = 144,dynamic = True)\ndata[['Passengers','FORECAST']].plot(figsize = (12,8))","87ed42f3":"exp = [data.iloc[i,0] for i in range(120,len(data))]\npred = [data.iloc[i,1] for i in range(120,len(data))]\ndata = data.drop(columns = 'FORECAST')\nprint(mean_absolute_error(exp,pred))","49bbb145":"from pandas.tseries.offsets import DateOffset\nfuture_dates = [data.index[-1] + DateOffset(months = x)for x in range(0,25)]\ndf = pd.DataFrame(index = future_dates[1:],columns = data.columns)","ddc0d317":"forecast = pd.concat([data,df])\nforecast['FORECAST'] = results.predict(start = 144,end = 168,dynamic = True)\nforecast[['Passengers','FORECAST']].plot(figsize = (12,8))","71b7e583":"- SARIMA MODEL ORDER [(p,d,q)x(P,D,Q,s)]\n- (p,d,q) = THIS ORDER IS INHERITED FROM OUR ABOVE ARIMA MODEL\n- (P,D,Q,s) = THIS IS ORDER IS SELECTED USING THE SAME TECHNIQUE USED FOR ARIMA\n- s = SEASONAL ORDER = ONLY ADDITIONAL PARAMETER \n- WE AGAIN SELECT THE MODEL WITH LEAST AIC SCORE","56974ec7":"## IMPORT THE DATASET","b32bb77d":"1] DATA ","f5d11f25":"- TREND HAS DIED DOWN AND IS CONSTANT\n- TEST STATISTIC < CRITICAL VALUE(10%) --> DATA IS 90% SURELY STATIONARY\n- P-Value = 0.05\n- ROLLING IS ALSO CONSTANT\n- HENCE DATA IS STATIONARY\n- HOWEVER SEASONALITY IS STILL PRESENT","37743a36":"- SEASONAL DIFFERENCE WITH A SEASONAL PERIOD(s) OF 12\n- SINCE OUR DATA IS MONTHLY DATA AND FROM THE PLOTS,WE OBSERVE THAT A YEARLY PATTERN IS PRESENT\n- WE USE THIS OPERATION ON THE PREVIOUSLY DIFFERENCED DATA SO THAT WE DO  NOT HAVE TO DEAL WITH TREND & STATIONARITY AGAIN","0e1f77d0":"- LOG DATA ALSO HAS THE SAME ATTRIBUTES AS THAT OF DATA\n- ONLY THE DATA DISTRIBUTION IS SLIGHTLY BETTER THAN PREVIOUS","f5b1e380":"## IMPORT THE NECESSARY LIBRARIES","17673a82":"### ADD DATES TO OUR DATAFRAME FOR OUR FORECASTING PURPOSE","a4ca4543":"# ARIMA [p,d,q]","41730c92":"- TREND HAS DIED DOWN AND IS CONSTANT\n- TEST STATISTIC < CRITICAL VALUE(10%) --> DATA IS 90% SURELY STATIONARY\n- P-Value = 0.05\n- ROLLING IS ALSO CONSTANT\n- HENCE DATA IS STATIONARY\n- HOWEVER SEASONALITY IS STILL PRESENT","6509cb0d":"# ARIMA vs SARIMA ","3569efa2":"## CHECK FOR MISSING VALUES AND BASIC INFO","dcf70a3f":"### LOG DATA","a99bc7bb":"## FUNCTIONS FOR TIMESERIES ANALYSIS","82683847":"- ARIMA MODEL ORDER [p,d,q]\n- p = PARTIAL AUTOCORRELATION PLOT = LAG VALUE AT WHICH THE LINE TOUCHES THE CONFIDENCE INTERVAL FIRST\n- d = DIFFERENCING ORDER\n- q = AUTOCORRELATION PLOT =  LAG VALUE AT WHICH THE LINE TOUCHES THE CONFIDENCE INTERVAL FIRST","abbe81eb":"# THANK YOU","5db43c68":"- FOR OUR MODEL :- \n- p = [1-2]\n- d = 1\n- q = [1-2]\n- SELECT THE ORDER OF ARIMA MODEL WITH THE LOWEST AIC VALUE","fc227ed1":"1] DATA","354e7a4f":"- NO MISSING VALUES\n- CONVERT THE MONTH COLUMN TO DATETIME DATATYPE AND ASSIGN IT AS INDEX ","c211e9ba":"# FORECASTING","94199e4c":"# SARIMA [(p,d,q)x(P,D,Q,s)]","9f912d01":"### DATA ","a9ec356a":"1] DATA","14411505":"## FROM THE ABOVE TESTS, WE CAN CHOOSE ANY OF THE DATA ABOVE FOR SELECTING THE ORDER OF ARIMA","ec45aac9":"- DATA IS NOT STATIONARY AS THE TEST STATISTIC VALUE IS MORE THAN ANY OF THE CRITICAL VALUE\n- ALSO THE P-Value IS NOT LESS THAN 0.05\n- DATA HAS AN INCREASING TREND\n- DATA IS ALSO SEASONAL WITH A PATTERN OF 1 YEAR","2c71934f":"## FINAL PLOT","47323182":"- THE PREDICTION PLOTS ARE NOT GOOD AT ALL \n- THE MEAN ABSOLUTE ERROR VALUE IS ALSO HIGH\n- THIS IS BECAUSE OF THE ISSUE OF SEASONALITY\n- HENCE WE REJECT ARIMA MODEL AND MOVE ONTO SARIMA WHICH HANDLES SEASONALITY","b7098730":"- PREDICTED PLOTS ARE GREAT \n- ERROR HAS ALSO REDUCED ALOT\n- HENCE WE ACCEPT THIS MODEL AND FORECAST FOR 2 MORE YEARS","781539c1":"## DIFFERENCING","5158fa8e":"2] LOG DATA"}}