{"cell_type":{"7bd02675":"code","b6509bbf":"code","5708efd2":"code","9b0e5383":"code","66849fe2":"code","4a6f9c9a":"code","245a9844":"code","ca469637":"code","f0ecdb29":"code","b3ca7fc2":"code","4070bd92":"code","09481bb5":"code","f1bd1644":"code","f02de16b":"code","fb9da5a5":"code","ee10b5f4":"code","00156143":"code","d297ba0e":"code","6dbac642":"markdown","fa50a3aa":"markdown","656f44cd":"markdown","db35c106":"markdown","f5f92ff4":"markdown","6a071c4f":"markdown","86726b77":"markdown","e2e6e721":"markdown","82233856":"markdown","743f0c63":"markdown","6161389a":"markdown","09f5c985":"markdown","a17f844d":"markdown","32fe0cca":"markdown","90bb4de4":"markdown","14c07427":"markdown","82862356":"markdown","b4bc46bb":"markdown","675a0eb5":"markdown","32669f5e":"markdown","7d383da0":"markdown","67ca9456":"markdown","b8f3bffb":"markdown"},"source":{"7bd02675":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b6509bbf":"# There are problems reading the CSV file since there are commas in the array of the last columns \"friends\"\n# We will use a regular expression to consider only the commas that are NOT followed by a whitespace\ntwitterData = pd.read_csv(\"\/kaggle\/input\/TwitterFriends\/data.csv\", sep=',(?=\\S)', engine='python')\n\n#Take a look at the data\ntwitterData.head()","5708efd2":"twitterData.info()","9b0e5383":"twitterData['id'] = twitterData['id'].str.strip('\"')\ntwitterData['id'] = twitterData['id'].astype('int')\n\ntwitterData['screenName'] = twitterData['screenName'].str.strip('\"')\n\ntwitterData['avatar'] = twitterData['avatar'].str.strip('\"')\n\ntwitterData['lang'] = twitterData['lang'].str.strip('\"')\n\ntwitterData['tweetId'] = twitterData['tweetId'].str.strip('\"')\ntwitterData['tweetId'] = twitterData['tweetId'].astype('int')\n\ntwitterData.info()","66849fe2":"twitterData.head()","4a6f9c9a":"# Count distinct values\ntwitterData['id'].nunique()","245a9844":"# argmax gets the row ID with the highest followersCount\ntwitterData['followersCount'].argmax()","ca469637":"twitterData.loc[10784]","f0ecdb29":"twitterData[\"lang\"].value_counts(sort=True)","b3ca7fc2":"# get a DataFrame of nb_of_followers vs. nb_of_users\nvalue_countsDF = twitterData[\"followersCount\"].value_counts().rename_axis('nb_of_followers').reset_index(name='nb_of_users')\nvalue_countsDF.head()","4070bd92":"# Find the highest nb_of_followers for 2 people\nvalue_countsDF[value_countsDF[\"nb_of_users\"] == 2].sort_values(\"nb_of_followers\", ascending=False)","09481bb5":"# Find those two profiles\ntwitterData[twitterData[\"followersCount\"] == 21367]","f1bd1644":"# gets the data in the format {0: '[ \"1969574754\", \"1969295556\", ..]', 1: '[\"60789485\", ...]', ...}\ndict = twitterData[\"friends\"].to_dict()\n\n# the arays are in fact strings, so we need to convert them to arrays\nfor index, string in dict.items():\n    dict[index] = eval(string) # eval parses the string argument and evaluates it as a python expression","f02de16b":"# We now have a dict of {index : friend_list} --> {0: [ \"1969574754\", \"1969295556\", ..], 1: [\"60789485\", ...], ...}\n\n# 40,000 is too much data, get only 1000 first\nfirst1000pairs = {k: dict[k] for k in list(dict)[:1000]}\n\n# create a new dict of the form: {index : [nb_friends_in_common, index_of_friend], ...}\ndict_most_friends_in_common = {}\nfor index1, friend_list1 in first1000pairs.items():\n    dict_most_friends_in_common[index1] = [0,0] # this will represent (nb_friends_in_common, index_of_friend)\n    for index2, friend_list2 in first1000pairs.items():\n        if index1 == index2:\n            continue\n        nb_friends_in_common = len(list(set(friend_list1) & set(friend_list2)))\n        if nb_friends_in_common > dict_most_friends_in_common[index1][0]:\n            dict_most_friends_in_common[index1] = [nb_friends_in_common, index2]","fb9da5a5":"# Now we have a dict of type {0: [7, 696], [6, 654]...} where [nb_friends_in_common, index_of_friend]\n\n# Get the couple with highest number of friends in common\nindex1 = -1\nindex2 = -1\nnb_friends_in_common = -1\nfor index, friend_list in dict_most_friends_in_common.items():\n    if friend_list[0] > nb_friends_in_common:\n        index1 = index\n        index2 = friend_list[1]\n        nb_friends_in_common = friend_list[0]\n\nprint(f'index1 : {index1}')\nprint(f'index2 : {index2}')\nprint(f'friends in common : {nb_friends_in_common}')","ee10b5f4":"twitterData.loc[661]","00156143":"twitterData.loc[827]","d297ba0e":"# Solution mostly taken off of: https:\/\/stackoverflow.com\/questions\/55911018\/how-to-get-two-lists-that-have-the-most-elements-in-common-in-a-nested-list-in-p\n\n'''\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.neighbors import KDTree, DistanceMetric\n\ndata = np.array([' '.join(words) for words in dict.values()])\n\nvectorised = CountVectorizer(binary=True).fit_transform(data).todense()\nmetric = DistanceMetric.get_metric('manhattan')\nkdtree = KDTree(vectorised, metric=metric)\ndistances, indices = [result[:, 1] for result in kdtree.query(vectorised, k=2, dualtree=True)]\n\nnearest_distances = (distances == distances.min()) # list of 40,000 booleans : 2 of them are supposed to be True\n\nlist_keys = np.array(list(dict.keys()))\nprint(f'list_keys: {list_keys[nearest_distances]}') # Gives a list of 32 indexes... doesn't work\n'''","6dbac642":"According to info(), there are 40,000 entries. However, we can make sure all the entries are unique ids. ","fa50a3aa":"Twitter is a unique kind of social media because you can follow two different types of profiles: people you personally know, and celebrities (or public figures). Therefore both of these must be taken into account. \n\nThe first solution would be to use the friends or friends algorithm and give more importance to the users that you have the most friends in common. This works well to try to find people you know personally, and also for public figures because you might be interested in the other public figures they follow.   \n\nTo get more accurate public figure suggestions to follow, we could consider the tags they use. You'd ideally want user suggestions that are aligned with what you already follow, so their could be some weight on whether the same tags are present or not.  ","656f44cd":"Many columns do not have the correct data type; we will transform them to correct data  \nWe will remove quotes and turn dtype to integer if needed. Arrays will not be modified for now\u00ab","db35c106":"The notebook had trouble calculating the highest number of friends in common for all 40,000 users, so we will cut it down to the first 1,000. Python can only handle so many calculations.\n\nNote that an attempt to handle all 40,000 users has been made at the end of this section.","f5f92ff4":"# Conclusion","6a071c4f":"# 4- Which couple of users have the highest number of accounts they follow in common?","86726b77":"# 2- What is the screenName of the user with the most followers?","e2e6e721":"# ","82233856":"# 3- How many users have English as language?","743f0c63":"### Case 1: The highest number of followers in common","6161389a":"I'm not completely sure I understand what is asked here, because this dataset does not give access to the number of accounts a user follows. The two possible answers would be:  \n\n1 - The highest number of **followers** (Accounts that follow **me**, and not accounts that I follow) in common  \n2 - The highest number of **friends** in common.  \n\n\nIn a real life situation, I would ask about this to make sure I've understood what is wanted here. For the sake of this exercice, I will answer both of these questions.\n\n****NOTE: After some research on Twitter's API, I learnt that \"friends\" are people that you follow. This means that we are in case 2. I will still leave the insights about case 1, just for additional info on the matter.***","09f5c985":"The screen names of the two players with the highest common follower count at 21,367 followers are **meathouse60005** and **COleksyn_**","a17f844d":"In the first 1000 profiles of the dataset, the two profiles with the most friends in common are **RepeatedJustin** and **BieberDynamic** with a total of 1,975 friends in common","32fe0cca":"# Introduction\n\nThe following notebook will be analyzing Twitter Data to gather insights on friendships on the platform. We will want to answer the following questions:\n\n1- How many users are there in the dataset?  \n2- What is the screenName of the user with the most followers?  \n3- How many users have English as language?  \n4- Which couple of users have the highest number of accounts they follow in common?  \n5- If you were to recommend Twitter users to follow, how would you do it?  \n(no need to code this part just explain the approach)  ","90bb4de4":"### Case 2: The highest number of friends in common","14c07427":"# Exploring and cleaning the data","82862356":"**NOTE**: This solution is not the most optimal one. An attempt has been made to use python's Scikit-learn package to find the solution that takes into account all 40,000 users. Here was the code attempt (note that I am leaving the code here for traces of what I have tried, but in a real analysis this wouldn't be present):","b4bc46bb":"(Also, does this question imply we also want to count the users in the friend lists? If necessary, count unique ids from all friends.)","675a0eb5":"In this analysis on twitter, we answered specific questions on the data and gathered the following insights:  \n\n1.  There are 40,000 users in the dataset  \n2.  The user with the most followers is **RyanSeacrest** with **147,655,554** followers\n3.  **All** the users have their language set as English, which is 40,000 users \n4. * The screen names of the two players with the highest common follower count are **meathouse60005** and **COleksyn_** with 21,367 followers.   \n   * Also, In the first 1000 profiles of the dataset, the two profiles with the most friends in common are **RepeatedJustin** and **BieberDynamic** with a total of 1,975 friends in common  \n5.  An interesting way to suggest users would be to use the **friend of friends** algorithm","32669f5e":"The screenName is **RyanSeacrest** with **147,655,554** followers","7d383da0":"**All** the users in this dataset have their language set as English, which is 40,000 users","67ca9456":"# 5- If you were to recommend Twitter users to follow, how would you do it?","b8f3bffb":"# 1- How many users are there in the dataset?"}}