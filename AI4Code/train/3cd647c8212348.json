{"cell_type":{"94151ed9":"code","ab3e3ae6":"code","0428bcb8":"code","46f76249":"code","c9834267":"code","c3504bff":"code","cae6fd0b":"code","1d031965":"code","d9be9b6e":"code","c9a0c72b":"code","4324965f":"code","d093130c":"code","e7c0c6d8":"code","999ea74a":"code","06244996":"code","aadd829a":"code","86a32817":"code","7ea32e97":"code","29fb79a8":"code","723dcc28":"code","cc8b31e0":"code","9de30f0c":"code","ada311cb":"code","eafd9a28":"code","f1550a41":"code","b037dccb":"code","23fcc14e":"code","9f07cf5f":"code","c9428678":"code","ca5ee787":"code","ef5322e4":"code","77865c38":"code","ccf827dd":"code","73ee11da":"code","d1e6ccda":"code","2a06610c":"code","ecc5a8ca":"code","64fe339d":"code","329afeab":"code","89046003":"code","68a98586":"code","33b529dc":"markdown","3719b571":"markdown","1e2c6c33":"markdown","873a25b0":"markdown","a5fa80af":"markdown","8f4d2659":"markdown","0bddda18":"markdown","40b65986":"markdown","444180b2":"markdown","7b4d3f2d":"markdown","86648346":"markdown","4d479027":"markdown","88f3a59d":"markdown","6a5ff6d2":"markdown","915e5ea5":"markdown","0d7058f9":"markdown","15a19b2d":"markdown","fdde1b5a":"markdown","b3ca5883":"markdown","614c1aa4":"markdown","8221735a":"markdown"},"source":{"94151ed9":"# Vers\u00e3o da Linguagem Python\nfrom platform import python_version\nprint('Vers\u00e3o Python:', python_version())","ab3e3ae6":"# Instala o pacote watermark. \n# Esse pacote \u00e9 usado para gravar as vers\u00f5es de outros pacotes usados neste jupyter notebook.\n!pip install -q -U watermark","0428bcb8":"# Pacote Pingouin\n# Pacote para analise estatisticas\n!pip install -q -U pingouin","46f76249":"# Imports\n\n# Imports para Web Scraping\nimport bs4\nimport csv \nimport requests \nfrom bs4 import BeautifulSoup\n\n# Imports para manipula\u00e7\u00e3o, visualiza\u00e7\u00e3o e an\u00e1lise de dados\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pingouin as pg\nimport numpy as np","c9834267":"# Vers\u00f5es dos pacotes usados neste jupyter notebook\n%reload_ext watermark\n%watermark --iversions","c3504bff":"# Etapa 1: Carregar os dados direto do website.\nwebsite = requests.get(\"https:\/\/www.basketball-reference.com\/leagues\/NBA_2020_per_game.html\")","cae6fd0b":"# Validando a conexao com a url {200} = OK\nwebsite.status_code","1d031965":"# Visualizando todo o documento extra\u00eddo do website\nwebsite.text","d9be9b6e":"# Obtendo o C\u00f3digo HTML da P\u00e1gina atrav\u00e9s da biblioteca BeatufilSoap\nwebsite_html = BeautifulSoup(website.text, 'html.parser')","c9a0c72b":"#website_html","4324965f":"dados_extraidos = website_html.find(\"div\", {\"class\": \"overthrow table_container\"})\n#dados_extraidos","d093130c":"# A partir dos dados extraidos, queremos obter o cabe\u00e7alho da tabela. Cabe\u00e7alho esse que cont\u00e9m os nomes das colunas.\n# Esses dados se encontram na TAG THEAD\nheader = dados_extraidos.find(\"thead\")\nheader_elements = header.find_all(\"th\")\n# Para cada registro na lista, extra\u00eda somente os texto, que \u00e9 onde est\u00e1 o nome das colunas. [1:] para ignorar a coluna Rk\nheader_elements = [head.text for head in header_elements[1:]]","e7c0c6d8":"# Salvando todo o resultado da extra\u00e7\u00e3o em uma lista\nfull_data = []\nfull_data.append(header_elements)\nfull_data","999ea74a":"# Obtendo as informa\u00e7\u00f5es contidas nos dados extra\u00eddos.\nLine_elements = dados_extraidos.find_all(\"tr\", {\"class\": \"full_table\"})","06244996":"# Extrai somente as informa\u00e7\u00f5es da tag td e obtem o texto.  No fim, adiciona o resultado dentro de uma lista.\nfull_elements = []\nfor row in Line_elements:\n    data_elements = row.find_all(\"td\")\n    data_elements = [data.text for data in data_elements]\n    full_elements.append(data_elements)","aadd829a":"# Transforma as 2 listas em dataframe\ndf = pd.DataFrame(full_data + full_elements)\n# Renomeia o cabe\u00e7alho para os registros da posi\u00e7\u00e3o 0\ndf = df.rename(columns=df.iloc[0])\n# Remove a linha de posi\u00e7\u00e3o 0\ndf = df.drop(df.index[0])","86a32817":"# Salva os dados obtidos em um arquivo CSV\n#df.to_csv('\/kaggle\/input\/scraping-nba\/scraping_nba.csv', index=False, header=True)","7ea32e97":"# Carrega o arquivo csv com o conte\u00fado do web scraping\ndf_nba = pd.read_csv('\/kaggle\/input\/scraping-nba\/scraping_nba.csv')","29fb79a8":"# Shape\ndf_nba.shape","723dcc28":"# Visualiza uma amostra dos dados\ndf_nba.head(10)","cc8b31e0":"df_nba['Age'].mean()","9de30f0c":"df_nba['Age'].hist()","ada311cb":"# hist = Plota a distribui\u00e7\u00e3o do histograma\n# kde = plota a linha de densidade estimada\n# rug = plota um gr\u00e1fico de linhas ao p\u00e9 do eixo de suporte\n# hist_kwd = cor da divis\u00e3o das linhas no histograma\nax = sns.distplot(df_nba['Age'], hist = True, kde = True, rug = False, color = 'blue', bins = 25, hist_kws = {'edgecolor':'black'})\nplt.show()","eafd9a28":"# Teste de normalidade com Pingouin\n# Valor alpha default: 0.05\npg.normality(df_nba['Age'])","f1550a41":"# reset_index \u00e9 utilizado para que a coluna Player n\u00e3o seja categorizada como INDEX do resultado.\ndf_nba_pts = df_nba.groupby(['Player'])['PTS'].sum().reset_index()\ndf_nba_pts","b037dccb":"# Retorna o TOP 10 maiores registros na coluna PTS\ndf_nba_pts.nlargest(10, 'PTS')","23fcc14e":"df_nba_35Age = df_nba[(df_nba['Age'] >= 35) & (df_nba['GS'] > 0)]\ndf_nba_35Age[['Player','Age']]","9f07cf5f":"plt.figure(figsize=[10,10])\nplt.title('\\nMinutos Jogados x Rebotes Ofensivos\\n', fontsize = 20)\nax = sns.regplot(x = df_nba['MP'], y = df_nba['ORB'], marker = '+')\nax.set_xlabel('Minutos Jogados', fontsize=15)\nax.set_ylabel('N\u00famero Rebotes Ofensivos', fontsize=15);","c9428678":"plt.figure(figsize=[10,10])\nplt.title('\\nMinutos Jogados x Rebotes Defensivos\\n', fontsize = 20)\nax = sns.regplot(x = df_nba['MP'], y = df_nba['DRB'], marker = '+')\nax.set_xlabel('Minutos Jogados', fontsize=15)\nax.set_ylabel('N\u00famero Rebotes Defensivos', fontsize=15);","ca5ee787":"# Obtendo somente os dados de tempo jogado e rebote ofensivo \ndf_preditcion = df_nba[['MP', 'ORB']]\ndf_preditcion","ef5322e4":"# Importa\u00e7\u00e3o dos pocates para dividir os dados em treino e teste, pacote do modelo de regress\u00e3o e o pacote para avaliar o resultado.\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n%matplotlib inline","77865c38":"df_preditcion.shape","ccf827dd":"(df_preditcion['MP'].values).shape","73ee11da":"# Necess\u00e1rio aplicar a convers\u00e3o utilizando o reshape para que as informa\u00e7\u00f5es sejam representadas com 2 dimens\u00f5es (linhaxcoluna)\nx = df_preditcion['MP'].values.reshape(-1, 1)\ntarget = df_preditcion['ORB'].values","d1e6ccda":"x.shape","2a06610c":"x_train, x_test, y_train, y_test = train_test_split(x, target, test_size=0.3)","ecc5a8ca":"regressor = LinearRegression()\nregressor.fit(x_train, y_train)","64fe339d":"y_pred = regressor.predict(x_test)","329afeab":"# flatten() : retorna os dados em uma \u00fanica dimens\u00e3o (semelhante ao ravel)\ndf = pd.DataFrame({'Actual': y_test.flatten(), 'Predicted': y_pred.flatten()})\ndf","89046003":"df1 = df.head(25)\ndf1.plot(kind='bar',figsize=(16,10))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","68a98586":"import numpy as np\n\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","33b529dc":"**Dicion\u00e1rio de Dados** (conforme mostrado na fonte de dados):\n\n- Rk -- Rank\n- Pos -- Position\n- Age -- Player's age on February 1 of the season\n- Tm -- Team\n- G -- Games\n- GS -- Games Started\n- MP -- Minutes Played Per Game\n- FG -- Field Goals Per Game\n- FGA -- Field Goal Attempts Per Game\n- FG% -- Field Goal Percentage\n- 3P -- 3-Point Field Goals Per Game\n- 3PA -- 3-Point Field Goal Attempts Per Game\n- 3P% -- 3-Point Field Goal Percentage\n- 2P -- 2-Point Field Goals Per Game\n- 2PA -- 2-Point Field Goal Attempts Per Game\n- 2P% -- 2-Point Field Goal Percentage\n- eFG% -- Effective Field Goal Percentage\n\nThis statistic adjusts for the fact that a 3-point field goal is worth one more point than a 2-point field goal.\n\n- FT -- Free Throws Per Game\n- FTA -- Free Throw Attempts Per Game\n- FT% -- Free Throw Percentage\n- ORB -- Offensive Rebounds Per Game\n- DRB -- Defensive Rebounds Per Game\n- TRB -- Total Rebounds Per Game\n- AST -- Assists Per Game\n- STL -- Steals Per Game\n- BLK -- Blocks Per Game\n- TOV -- Turnovers Per Game\n- PF -- Personal Fouls Per Game\n- PTS -- Points Per Game","3719b571":"## Defini\u00e7\u00e3o do Problema\n\nA Ci\u00eancia de Dados est\u00e1 em todos os lugares. Se h\u00e1 dados dispon\u00edveis, podemos extrair, analisar e gerar insights poderosos. E no esporte n\u00e3o seria diferente.\n\nCada vez mais gestores de todos os esportes descobrem os benef\u00edcios e vantagem competitiva em usar an\u00e1lise de dados para compreender o comportamento dos atletas, melhorar o desempenho, unir atletas com caracter\u00edsticas complementares no mesmo time e muito mais.\n\nNeste Lab, vamos extrair dados reais de atletas da NBA - a Liga de Basquete Norte Americana - e analisar os dados.","1e2c6c33":"### Quantos jogos os jogadores com 35 anos de idade ou mais iniciaram jogando a partida (vari\u00e1vel GS)?","873a25b0":"<strong><b><font size=\"5\">Laborat\u00f3rio 3<\/font><\/b><\/strong>\n\n<strong><b><font size=\"4\">Data Science no Esporte - Web Scraping e An\u00e1lise Estat\u00edstica em Dados da NBA<\/font><\/b><\/strong>","a5fa80af":"## Fonte de Dados\n\nNossa fonte de dados ser\u00e1 o site <a href=\"https:\/\/www.basketball-reference.com\">Bastketball Reference<\/a> que mant\u00e9m todos os detalhes e estat\u00edsticas sobre a NBA.","8f4d2659":"### Gr\u00e1fico que mostra a rela\u00e7\u00e3o entre rebotes defensivos e minutos jogados. \n\nO que podemos concluir a partir do gr\u00e1fico?","0bddda18":"<strong><b><font size=\"5\">Web Scraping e An\u00e1lise de Dados<\/font><\/b><\/strong>","40b65986":"### Qual a idade m\u00e9dia dos jogadores que disputaram a temporada 2019\/2020 da NBA?","444180b2":"## Carregando os Pacotes Usados Neste Jupyter Notebook","7b4d3f2d":"### Gr\u00e1fico que mostra a rela\u00e7\u00e3o entre rebotes ofensivos (ORB) e minutos jogados (MP). \nO que podemos concluir a partir do gr\u00e1fico?\n\nSer\u00e1 utilizado um gr\u00e1fico de dispers\u00e3o junto com uma linha de regress\u00e3o do relacionamento entre Rebotes Ofensivos e Minutos Jogados","86648346":"A partir da inspe\u00e7\u00e3o realizada na p\u00e1gina web, os dados que queremos extrair se encontra dentro de um TAG DIV, class do tipo \"overthrow table_container\". ","4d479027":"##### Resultado do modelo preditivo:\n\nO modelo de previs\u00e3o n\u00e3o obteve bons resultados.\n\nMotivos:\n\n- Temos poucos dados para realizar o treinamento;\n- Foi considerado apenas 1 vari\u00e1vel preditora;\n\n#### IMPROVEMENT :\nPara uma an\u00e1lise mais precisa e melhor elaborada, a abordagem ser\u00e1 a seguinte:\n\n- Realizar o levantamento individual de cada player em cada jogo e analisar o tempo jogado x rebotes ofensivos.\n\nCom essa an\u00e1lise ser\u00e1 poss\u00edvel realizar a previs\u00e3o individual de cada jogador baseado em suas pontua\u00e7\u00f5es anteriores.\n","88f3a59d":"A idade m\u00e9dia foi de 25 anos na temporadada 2019\/2020. Vamos criar um histograma e um boxplot e analisar a distribui\u00e7\u00e3o da vari\u00e1vel idade.","6a5ff6d2":"--------------------------------------------------------------------------------------------------------------------------\n### Aplicando uma previs\u00e3o de n\u00fameros de rebotes ofensivos em determinado tempo do jogo baseado nos dados que foram feitos o scraping.\n\n##### Os dados extra\u00eddos corresponde ao resumo da temporada e possui apenas 1 linha de cada player. Devido a essa caracteristica se torna invi\u00e1vel realizar o treinamento do modelo considerando o player.","915e5ea5":"### Quais s\u00e3o os jogadores com maior n\u00famero de pontos por jogo? Selecione os Top 10.\nColuna PTS do Dataframe","0d7058f9":"\u00c9 poss\u00edvel notar que temos alguns outliers (Valores mais afastados da m\u00e9dia no gr\u00e1fico, vamos confirmar isso com o boxplot). Ser\u00e1 que a vari\u00e1vel idade segue uma distribui\u00e7\u00e3o normal? Olhando atrav\u00e9s do gr\u00e1fico visual podemos tirar conclus\u00f5es precipitadas. Vamos conferir.","15a19b2d":"O comportamento dos rebotes desensivos segue um padr\u00e3o diferente dos rebotes ofensivos. Mais ao final do jogo, as equipes itensificam suas defesas e consequentemente aumenta o n\u00famero de rebotes defensivos.","fdde1b5a":"Baseado no teste de normalidade com Pingouin, os dados da vari\u00e1vel Age n\u00e3o seguem uma distribui\u00e7\u00e3o normal.\n\n- Movito: o pvalue \u00e9 < 0.05.","b3ca5883":"## Web Scraping","614c1aa4":"## Carregando e Analisando os Dados","8221735a":"Aumenta a dispers\u00e3o dos dados \u00e0 media que aumenta o n\u00famero de minutos jogados. Ou seja, com os jogadores mais cansados ao final do jogo \u00e9 mais dif\u00edcil fazer rebotes ofensivos.\n\nO n\u00famero de rebote n\u00e3o aumenta de acordo com o tempo que o jogador passa em quadra.\n\nCaso tivessemos uma reta linear crescente aguda e a maioria dos dados come\u00e7assem a ser representados com alto n\u00famero de rebotes ao final dos jogos, a conclus\u00e3o seria que os jogadores conseguem mais rebotes ofensivos ao final de cada jogo."}}