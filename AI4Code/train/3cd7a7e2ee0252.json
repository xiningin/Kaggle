{"cell_type":{"bd0215f3":"code","efde11c6":"code","67c66d41":"code","9f41e336":"code","894882b3":"code","a00dfdc7":"code","91d90539":"code","e366b539":"code","7b089402":"code","c0b5587e":"code","82d238b1":"code","70be10e8":"code","0f6dbb0b":"code","3cb44f0e":"code","303dc5bf":"code","399e5479":"code","3c672fc9":"code","859920d2":"code","5d8d3ca3":"code","47d08b2f":"code","ce878485":"code","6e78b9b8":"code","165dafc2":"code","0414eeee":"code","12126972":"code","1095a7cb":"code","bbd87fa1":"code","80cf83f3":"code","6610740d":"code","3c764a21":"code","adbe98c4":"code","d4e3ffbc":"code","90db5ed3":"code","34067e5e":"code","997ea18c":"code","29e0b934":"code","897346c0":"code","38402437":"code","619ac0b0":"code","8584ff1b":"markdown","07272961":"markdown","f9bed2c5":"markdown","b1bc97b7":"markdown","ad6fb113":"markdown","2a8388f8":"markdown","dae43333":"markdown","d2e01d44":"markdown","2a85d518":"markdown","8494d22e":"markdown","71258fb5":"markdown","cd2e4ae8":"markdown","de9c5e91":"markdown","43a97edd":"markdown","59007d7d":"markdown","f56e4464":"markdown","68ef9bf7":"markdown","b8bd0029":"markdown","f4433417":"markdown","423a9c36":"markdown","b6ed6f27":"markdown","f2f7c45b":"markdown","2338a222":"markdown","68820a2d":"markdown","9034e190":"markdown","bcada522":"markdown","92ab88e3":"markdown","228d9bd1":"markdown","bea7b21a":"markdown","a912d473":"markdown","32c54a86":"markdown","ce50512d":"markdown","7cc77927":"markdown","a6abc4f9":"markdown","4fbc9816":"markdown"},"source":{"bd0215f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom datetime import datetime\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","efde11c6":"cab_df = pd.read_csv(\"..\/input\/uber-lyft-cab-prices\/cab_rides.csv\")\ncab_df.info()","67c66d41":"# Checking for the null values\n\ncab_df.isnull().sum()","9f41e336":"cab_df.dropna(inplace=True)\n\ncab_df.isnull().sum()","894882b3":"cab_df.columns","a00dfdc7":"cab_df = cab_df[['distance', 'cab_type', 'time_stamp', 'destination', 'source', 'price',\n       'surge_multiplier', 'name']]\n\ncab_df.head()","91d90539":"cab_df[\"rounded_timestamp\"] = cab_df[\"time_stamp\"] \/ 1000\ncab_df[\"rounded_timestamp\"] = cab_df[\"rounded_timestamp\"].apply(np.floor)\n\ncab_df[\"date\"] = cab_df[\"rounded_timestamp\"].apply(lambda x : datetime.fromtimestamp(x).date())\ncab_df[\"time\"] = cab_df[\"rounded_timestamp\"].apply(lambda x: datetime.fromtimestamp(x).time())\ncab_df['weekday'] = cab_df['date'].apply(lambda x: x.weekday())\ncab_df[\"weekday\"] = cab_df[\"weekday\"].map({0: 'Monday', 1: 'Tuesday', 2: 'Wednesday', 3: 'Thursday', 4: 'Friday', 5: 'Saturday', 6: 'Sunday'})\ncab_df['hour'] = cab_df['time'].apply(lambda time: time.hour)\n\ncab_df.loc[(cab_df.hour >= 6) & (cab_df.hour < 12) , 'time_of_day'] = 'Morning'\ncab_df.loc[(cab_df.hour >= 12) & (cab_df.hour < 15) , 'time_of_day'] = 'Afternoon'\ncab_df.loc[(cab_df.hour >= 15) & (cab_df.hour < 18) , 'time_of_day'] = 'Evening'\ncab_df.loc[(cab_df.hour >= 18) | (cab_df.hour < 6) , 'time_of_day'] = 'Night'\n\ncab_df = cab_df[['distance', 'cab_type', 'time_stamp', 'destination', 'source', 'price',\n       'surge_multiplier', 'name', 'date', 'time', 'weekday', 'hour', 'time_of_day']]","e366b539":"cab_df['cab_type'].value_counts()","7b089402":"uber_df = cab_df[cab_df['cab_type'] ==\"Uber\"]\nlyft_df = cab_df[cab_df['cab_type'] ==\"Lyft\"]","c0b5587e":"lyft_df = cab_df[cab_df[\"cab_type\"] == \"Lyft\"]\nuber_ds = cab_df[cab_df['cab_type'] == \"Uber\"]\n\nuber_ds_corr = uber_ds[[\"distance\", \"price\", \"surge_multiplier\"]]\nlyft_df_corr = lyft_df[[\"distance\", \"price\", \"surge_multiplier\"]]","82d238b1":"sns.heatmap(uber_ds_corr.corr(), cmap=\"viridis\")","70be10e8":"sns.heatmap(lyft_df_corr.corr() , cmap=\"viridis\")","0f6dbb0b":"uber_df[\"surge_multiplier\"].value_counts()\nlyft_df[\"surge_multiplier\"].value_counts()","3cb44f0e":"high_surge_dataset = lyft_df[lyft_df[\"surge_multiplier\"]> 1]","303dc5bf":"t_high_surge = pd.DataFrame(high_surge_dataset.groupby([\"weekday\", \"surge_multiplier\"]).size().reset_index())\nt_high_surge.columns = [\"Weekday\", \"Surge\", \"Count\"]\nplt.figure(figsize=(15, 5))\nsns.barplot(x=\"Weekday\", y=\"Count\", hue=\"Surge\", data=t_high_surge).set_title(\"Weekday wise Surge\");","399e5479":"td_high_surge = pd.DataFrame(high_surge_dataset.groupby([\"weekday\", \"surge_multiplier\",\"time_of_day\"]).size().reset_index())\ntd_high_surge.columns = [\"Weekday\", \"Surge\", \"Time of Day\", \"Count\"]\n\nplt.figure(figsize=(15, 10))\nsns.lineplot(x=\"Time of Day\", y=\"Count\", hue=\"Surge\", data=td_high_surge).set_title(\"Time of Day wise Surge\");","3c672fc9":"uber_dis_price_surge = uber_df[['distance', 'surge_multiplier', 'price']]\nlyft_dis_price_surge = lyft_df[['distance', 'surge_multiplier', 'price']]","859920d2":"plt.figure(figsize=(15, 15))\nsns.scatterplot(data=uber_dis_price_surge, x=\"distance\", y=\"price\", hue=\"surge_multiplier\").set_title(\"Uber - Distance Vs Price\");","5d8d3ca3":"plt.figure(figsize=(15, 10))\nsns.scatterplot(data=lyft_dis_price_surge, x=\"distance\", y=\"price\", hue=\"surge_multiplier\", palette=\"deep\").set_title(\"Lyft - Distance Vs Price\");","47d08b2f":"uber_s_d_df= uber_df.groupby(['source', \"destination\"]).size().reset_index()\nuber_s_d_df.columns = [\"source\", \"destination\", \"count\"]\nuber_s_d_df.sort_values(\"count\", inplace=True, ascending = False)\nuber_five_most = uber_s_d_df.iloc[0:5, ]\nuber_five_most[\"Source - Destination\"] = uber_s_d_df[\"source\"] + \" - \" + uber_s_d_df[\"destination\"]\n\n# So the top five most Source - Destination for Uber\nuber_five_most = uber_five_most[[\"Source - Destination\", \"count\"]]\nuber_five_most","ce878485":"lyft_s_d_df= lyft_df.groupby(['source', \"destination\"]).size().reset_index()\nlyft_s_d_df.columns = [\"source\", \"destination\", \"count\"]\nlyft_s_d_df.sort_values(\"count\", inplace=True, ascending = False)\nlyft_five_most = lyft_s_d_df.iloc[0:5, ]\nlyft_five_most[\"Source - Destination\"] = lyft_s_d_df[\"source\"] + \" - \" + lyft_s_d_df[\"destination\"]\n\n# So the top five most Source - Destination for lyft\nlyft_five_most = lyft_five_most[[\"Source - Destination\", \"count\"]]\nlyft_five_most","6e78b9b8":"high_surge_rows = cab_df[cab_df[\"surge_multiplier\"] >= 2]\nloc_wise_surge = high_surge_rows.groupby([\"source\", \"destination\"]).size().reset_index()","165dafc2":"loc_wise_surge.columns=[\"source\", \"destination\", \"count\"]\nloc_wise_surge.sort_values(inplace=True, ascending=False, by=[\"count\"])\n\n\nhighest_destination_surge = loc_wise_surge.head(5)\nlowest_destination_surge = loc_wise_surge.tail(5)\n# highest_destination_surge\ndestination_surge_df = highest_destination_surge.append(lowest_destination_surge, ignore_index=True)\ndestination_surge_df[\"source - destination\"] = destination_surge_df[\"source\"] + \" \" + destination_surge_df[\"destination\"]\nplt.figure(figsize=(20, 10))\ng = sns.barplot(data = destination_surge_df, x = \"source - destination\", y = \"count\")\ng.set_title(\"Top and least 5 source - destinations for surge\")\nloc, labels = plt.xticks()\ng.set_xticklabels(labels, rotation=60);","0414eeee":"lyft_df[\"name\"].value_counts()","12126972":"lyft_shared_rides_df = lyft_df[lyft_df[\"name\"] == \"Shared\"]\nlyft_shared_ride_td = lyft_shared_rides_df.groupby([\"name\", \"time_of_day\"]).size().reset_index()\nlyft_shared_ride_td.columns = [\"Name\", \"Time of Day\", \"Count\"]\nplt.figure(figsize=(15, 5))\nsns.barplot(y=\"Time of Day\", x=\"Count\", data=lyft_shared_ride_td, palette=\"Blues_d\", orient ='h' ).set_title(\"Shared Rides wrt Time of Day\");","1095a7cb":"lyft_shared_rides_distance_price = lyft_shared_rides_df.groupby([\"name\", \"distance\", \"price\"]).size().reset_index()\nlyft_shared_rides_distance_price.columns = [\"name\", \"distance\", \"price\", \"count\"]","bbd87fa1":"lyft_shared_rides_distance_price","80cf83f3":"plt.figure(figsize=(15, 8))\nsns.scatterplot(data = lyft_shared_rides_distance_price, x = \"distance\", y=\"price\", hue=\"count\", size=\"count\").set_title(\"Lyft Rides - Distance vs Price - Count\");","6610740d":"weather_df = pd.read_csv(\"..\/input\/uber-lyft-cab-prices\/weather.csv\")\ncab_weather_df = pd.read_csv(\"..\/input\/uber-lyft-cab-prices\/cab_rides.csv\")","3c764a21":"cab_weather_df[\"time_stamp\"] = cab_weather_df[\"time_stamp\"] \/ 1000\ncab_weather_df[\"time_stamp\"] = cab_weather_df[\"time_stamp\"].apply(np.floor)","adbe98c4":"cab_weather_df[\"time_stamp\"] = cab_weather_df[\"time_stamp\"].astype(int)\nweather_df.columns = ['temp', 'source', 'clouds', 'pressure', 'rain', 'time_stamp', 'humidity', 'wind']\nweather_df.isnull().sum()","d4e3ffbc":"merged_data = pd.merge(weather_df, cab_weather_df, on=[\"source\", \"time_stamp\"])","90db5ed3":"tmp_merged_data = merged_data[['temp', 'source', 'time_stamp', 'cab_type', 'destination',\n       'surge_multiplier',  'name']]\ntmp_merged_data_g =  tmp_merged_data.groupby([\"temp\", \"source\"]).size().reset_index()\ntmp_merged_data_g.columns = [\"temp\", \"source\", \"count\"]\nplt.figure(figsize=(15, 10))\nsns.scatterplot( data = tmp_merged_data_g, x =\"temp\", y = \"count\", size=\"count\", hue=\"count\");","34067e5e":"rain_merged_data = merged_data[['source', 'time_stamp', 'cab_type',  \"rain\"]]\nlen(rain_merged_data)\nrain_merged_data.isnull().sum()","997ea18c":"rain_merged_data[\"rain\"] = rain_merged_data[\"rain\"].fillna(value=0)","29e0b934":"t_rain = rain_merged_data.groupby([\"rain\"]).size().reset_index()\nt_rain.columns=[\"rain\", \"count\"]\nplt.figure(figsize=(15, 10))\nsns.scatterplot(data = t_rain, x = \"rain\", y=\"count\", hue=\"count\", size=\"count\")","897346c0":"rain_merged_data.head()","38402437":"only_rain_data = rain_merged_data[rain_merged_data[\"rain\"] != 0]\nprint(len(only_rain_data))","619ac0b0":"c_only_rain = only_rain_data.groupby([\"cab_type\"]).size().reset_index()\nc_only_rain.columns = [\"cab_type\", \"count\"]\nsns.barplot(x =\"cab_type\", y=\"count\", data=c_only_rain).set_title(\"Uber vs Lyft - Who gets more rides\");","8584ff1b":"### Surge and Day of Week\nFirst we see the value counts for the Uber and Lyft","07272961":"From above we see that for Uber we have only one value of surge multiplier\n\nSo we consider the surge multiplier for Lyft only and plot which day it is highest. We only consider the surge multiplier > 1.","f9bed2c5":"#### For Lyft","b1bc97b7":"### Factors affecting the Surge Factor\n#### Surge correlation with price and distance","ad6fb113":"We see that **time_stamp** is Unix, so we need to convert it to the readable form. Using the time_stamp column, lets convert it to date, week day, hour and time of day.\n\nWe calculate time of day into: **Morning, Afternoon, Evening and Night**","2a8388f8":"### Understanding count and rain effect","dae43333":"From above we see that some 51233 rides in our dataset are shared. Let us study these shared rides with time of day along with along with distance and price factor.","d2e01d44":"To find the correlation, we need to pick up numeric values.","2a85d518":"Now from above we can see as the distance increases, price tends to increase, however shared rides are not affected. People prefer taking shared rides over the courses of small rides, roughly lying between 1 to 3 kilometers.","8494d22e":"We have only 409 rows where there is rain data available. Very less but lets see which company is getting more rides during rains","71258fb5":"### Surge and Distance\nNow lets try to study the surge, price and distance. We are trying to see if one of the value affects another for both the brands.","cd2e4ae8":"We learn that\n\n* Surge 1.25 is happening most. Tuesday is the day when you are most likely to encounter it and Wednesday is the day when its most unlikely.\n* 3.0 is very unlikely to happen","de9c5e91":"### Top 5 Source destinations\n#### For Uber","43a97edd":"### Understanding with Weather\nIf you look at the downloaded dataset, you will find out that there is another file called weather.csv. Lets try to see what we can get from it.","59007d7d":"Does the Distance and Price affect the Shared Rides? Lets try to understand","f56e4464":"### Shared Rides with Time of Day","68ef9bf7":"Where there are null values, replace them with 0 as there was no rain.","b8bd0029":"We see that price column has 55095 rows missing data. Total rows we have 693071 so we can remove the rows with no price.","f4433417":"Now, from above we learn that distance and price are not strongly correlated. As the distance increases, price does not increase linearly.","423a9c36":"Above we get an idea of the pattern. We have three clusters. What is evident is:\n\n* Rides are most when there is little or no rain\n* Then when it rains between 0.1 to 0.3 mm, people take lesser rides\n* Between 0.3 to 0.5 we do not have much data. When taking a decision, this data will be needed.\n* Then beyond 0.5, as the rain increases, rides do not increase","b6ed6f27":"So above we can see we have two cab types: Uber and Lyft\nSo we need to separate the datasets","f2f7c45b":"### Shared Rides\nIn the Lyft rides, we can see that there are some shared rides as well.\n\nNow, lets see when do people want to have these","2338a222":"From above we can see that as the temperature increases, count of rides also increase. However if the temperature execdes beyond 45(unit), count tends to decreases.","68820a2d":"### Surge and Time of Day","9034e190":"So people are more preferring to have shared rides during the night than any other time of the day. This might be due to the surge","bcada522":"Columns of this dataset are already self explanatory. We need to merge the weather data with the cab data. To perform this, we need to execute a series of steps.\n\n* First, we need to scale the timestamp of cab data to weather data\n* Next, we will be applying floor, since the timestamp cannot be floating point.\n* To merge, we need to convert the type of timestamp of cab data to int.\nWe shall also need to change the column name of the weather data to **source** so that we can merge the data","92ab88e3":"No null values. Now time to move on.\n\nFirst, lets see what columns do we have","228d9bd1":"So as the **distance** increases, **price** increases. We also see that with higher prices, more surge multiplier increases","bea7b21a":"From above we learn:\n\n* For lyft: Surge Multiplier and Distance are weakly correlated\n* For lyft: Surge Multiplier and Price are more correlated than above pair\n* For Uber: Price and Distance are weakly correlated","a912d473":"### Shared rides with Distance and Price","32c54a86":"We dont need **id**, **product_id**. So lets get rid of them","ce50512d":"### Understanding count and temperature effect","7cc77927":"* Night sees the most Surge\n* Afternoon and Evening the least\n* Morning also witnesses surge maybe because of school or busineeses","a6abc4f9":"### Which destinations attract more surge and which are least\nHere we pick only those rows which have surge greater than or equal to 2","4fbc9816":"### Which company gets more rides during rains?"}}