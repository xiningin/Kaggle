{"cell_type":{"d3e58359":"code","dd10f3ff":"code","5486115d":"code","2d9c3f93":"code","2de10fa5":"code","e2dd904e":"code","a09c6f99":"code","5dcb4e47":"code","2db6f3cc":"code","30a3f4be":"code","767552bc":"code","f2080610":"code","68079aee":"code","ef0cc262":"code","3bc6a4c8":"code","d5354743":"code","b68186b3":"code","c1a923a1":"code","a6fdba25":"code","8f30ecf5":"code","b1ebd662":"code","a385bed9":"code","3ef12ab2":"code","13481f14":"code","d9c0782f":"code","574a5832":"code","68e382da":"code","a679d6c7":"code","5f5ba720":"code","f4924a19":"code","4b8ca161":"code","f9ff23a6":"markdown","5fadffac":"markdown","7974a189":"markdown","21950b61":"markdown","3540d575":"markdown","d61e6866":"markdown","4450247b":"markdown","ed352d1a":"markdown","f03326d1":"markdown","6c7250dd":"markdown","b3a55c4d":"markdown","f56d0172":"markdown","e6f1810b":"markdown","06643b92":"markdown","815fbd5d":"markdown","dbaf4be2":"markdown","5a26fe06":"markdown","8e6ffbb0":"markdown","0fbc3e18":"markdown","ab403319":"markdown","fcc968b5":"markdown","19e0a867":"markdown","bba90522":"markdown","35f66d2a":"markdown","25e611d1":"markdown","cf3ed483":"markdown","00e4e3bf":"markdown","92b2b0e1":"markdown","668692ea":"markdown"},"source":{"d3e58359":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dd10f3ff":"train_set = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest_set = pd.read_csv(\"..\/input\/titanic\/test.csv\")","5486115d":"test_set_duplicate = test_set.copy() #for future use","2d9c3f93":"train_set.isnull().sum() ","2de10fa5":"test_set.isnull().sum()","e2dd904e":"test_set.loc[test_set.Fare.isnull()]","a09c6f99":"test_set.groupby(\"Pclass\").Fare.describe()","5dcb4e47":"missing_fare = np.where(test_set.Fare.isnull())\n\nfor row in missing_fare:\n    test_set.iloc[row] = test_set.iloc[row].fillna(12.459678)","2db6f3cc":"train_set.Sex = train_set.Sex.replace({\n    'female' : 1,\n    'male' : 0,\n})\n\ntest_set.Sex = test_set.Sex.replace({\n    'female' : 1,\n    'male' : 0,\n})","30a3f4be":"train_set.groupby(\"Sex\").describe()","767552bc":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, = train_test_split(train_set, train_size = 0.8, test_size = 0.2, random_state = 25)","f2080610":"y_train = X_train[\"Survived\"]\ny_test = X_test[\"Survived\"]\n\nX_train = X_train.drop([\"Survived\"], axis = 1)\nX_test = X_test.drop([\"Survived\"], axis = 1)","68079aee":"X_train.describe(include = \"all\")","ef0cc262":"X_test = X_test.drop([\"Embarked\", \"Cabin\"], axis = 1)\nX_train = X_train.drop([\"Embarked\", \"Cabin\"], axis = 1)\n\ntest_set = test_set.drop([\"Embarked\", \"Cabin\"], axis = 1)","3bc6a4c8":"miss_mean_age_test = X_test.loc[X_test.Name.str.contains(\"Miss.\")].Age.mean(skipna = True)\nmr_mean_age_test = X_test.loc[X_test.Name.str.contains(\"Mr. \")].Age.mean(skipna = True)\nmrs_mean_age_test = X_test.loc[X_test.Name.str.contains(\"Mrs. \")].Age.mean(skipna = True)\nmaster_mean_age_test = X_test.loc[X_test.Name.str.contains(\"Master.\")].Age.mean(skipna = True)\n\nprint('X_test')\nprint('Mr: ', mr_mean_age_test)\nprint('Mrs: ', mrs_mean_age_test)\nprint('Master: ', master_mean_age_test)\nprint('Miss: ', miss_mean_age_test)\n\nmiss_mean_age_train = X_train.loc[X_train.Name.str.contains(\"Miss.\")].Age.mean(skipna = True)\nmr_mean_age_train = X_train.loc[X_train.Name.str.contains(\"Mr. \")].Age.mean(skipna = True)\nmrs_mean_age_train = X_train.loc[X_train.Name.str.contains(\"Mrs. \")].Age.mean(skipna = True)\nmaster_mean_age_train = X_train.loc[X_train.Name.str.contains(\"Master.\")].Age.mean(skipna = True)\n\nprint('X_train')\nprint('Mr: ', mr_mean_age_train)\nprint('Mrs: ', mrs_mean_age_train)\nprint('Master: ', master_mean_age_train)\nprint('Miss: ', miss_mean_age_train)\n\nmiss_mean_age_test_set = test_set.loc[test_set.Name.str.contains(\"Miss.\")].Age.mean(skipna = True)\nmr_mean_age_test_set = test_set.loc[test_set.Name.str.contains(\"Mr. \")].Age.mean(skipna = True)\nmrs_mean_age_test_set = test_set.loc[test_set.Name.str.contains(\"Mrs. \")].Age.mean(skipna = True)\nmaster_mean_age_test_set = test_set.loc[test_set.Name.str.contains(\"Master.\")].Age.mean(skipna = True)\n\nprint('test_set')\nprint('Mr: ', mr_mean_age_test_set)\nprint('Mrs: ', mrs_mean_age_test_set)\nprint('Master: ', master_mean_age_test_set)\nprint('Miss: ', miss_mean_age_test_set)","d5354743":"X_train.loc[((X_train.Name.str.contains(\"Mr. \") |\n           X_train.Name.str.contains(\"Mrs. \") |\n           X_train.Name.str.contains(\"Master.\") |\n           X_train.Name.str.contains(\"Miss.\")) == False) & X_train.Age.isnull()]","b68186b3":"doc_row = np.where(((X_train.Name.str.contains(\"Mr. \") |\n           X_train.Name.str.contains(\"Mrs. \") |\n           X_train.Name.str.contains(\"Master.\") |\n           X_train.Name.str.contains(\"Miss.\")) == False) & X_train.Age.isnull())\n\nfor row in doc_row:\n    X_train.iloc[row] = X_train.iloc[row].fillna(mr_mean_age_train)","c1a923a1":"test_set.loc[((test_set.Name.str.contains(\"Mr. \") |\n           test_set.Name.str.contains(\"Mrs. \") |\n           test_set.Name.str.contains(\"Master.\") |\n           test_set.Name.str.contains(\"Miss.\")) == False) & test_set.Age.isnull()]","a6fdba25":"ms_row = np.where(((test_set.Name.str.contains(\"Mr. \") |\n           test_set.Name.str.contains(\"Mrs. \") |\n           test_set.Name.str.contains(\"Master.\") |\n           test_set.Name.str.contains(\"Miss.\")) == False) & test_set.Age.isnull())\n\nfor row in ms_row:\n    test_set.iloc[row] = test_set.iloc[row].fillna(mrs_mean_age_test_set)","8f30ecf5":"mr_cols_test = np.where(X_test.Age.isnull() & X_test.Name.str.contains(\"Mr.\"))\nmrs_cols_test = np.where(X_test.Age.isnull() & X_test.Name.str.contains(\"Mrs. \"))\nmaster_cols_test = np.where(X_test.Age.isnull() & X_test.Name.str.contains(\"Master.\"))\nmiss_cols_test = np.where(X_test.Age.isnull() & X_test.Name.str.contains(\"Miss.\"))\n\nfor row in mr_cols_test:\n    X_test.iloc[row] = X_test.iloc[row].fillna(mr_mean_age_test)\n    \nfor row in mrs_cols_test:\n    X_test.iloc[row] = X_test.iloc[row].fillna(mrs_mean_age_test)\n    \nfor row in master_cols_test:\n    X_test.iloc[row] = X_test.iloc[row].fillna(master_mean_age_test)\n    \nfor row in miss_cols_test:\n    X_test.iloc[row] = X_test.iloc[row].fillna(miss_mean_age_test)\n    \n\nmr_cols_train = np.where(X_train.Age.isnull() & X_train.Name.str.contains(\"Mr.\"))\nmrs_cols_train = np.where(X_train.Age.isnull() & X_train.Name.str.contains(\"Mrs. \"))\nmaster_cols_train = np.where(X_train.Age.isnull() & X_train.Name.str.contains(\"Master.\"))\nmiss_cols_train = np.where(X_train.Age.isnull() & X_train.Name.str.contains(\"Miss.\"))\n\nfor row in mr_cols_train:\n    X_train.iloc[row] = X_train.iloc[row].fillna(mr_mean_age_train)\n    \nfor row in mrs_cols_train:\n    X_train.iloc[row] = X_train.iloc[row].fillna(mrs_mean_age_train)\n    \nfor row in master_cols_train:\n    X_train.iloc[row] = X_train.iloc[row].fillna(master_mean_age_train)\n    \nfor row in miss_cols_train:\n    X_train.iloc[row] = X_train.iloc[row].fillna(miss_mean_age_train)\n    \nmr_cols_test_set = np.where(test_set.Age.isnull() & test_set.Name.str.contains(\"Mr.\"))\nmrs_cols_test_set = np.where(test_set.Age.isnull() & test_set.Name.str.contains(\"Mrs. \"))\nmaster_cols_test_set = np.where(test_set.Age.isnull() & test_set.Name.str.contains(\"Master.\"))\nmiss_cols_test_set = np.where(test_set.Age.isnull() & test_set.Name.str.contains(\"Miss.\"))\n\nfor row in mr_cols_test_set:\n    test_set.iloc[row] = test_set.iloc[row].fillna(mr_mean_age_test_set)\n    \nfor row in mrs_cols_test_set:\n    test_set.iloc[row] = test_set.iloc[row].fillna(mrs_mean_age_test_set)\n    \nfor row in master_cols_test_set:\n    test_set.iloc[row] = test_set.iloc[row].fillna(master_mean_age_test_set)\n    \nfor row in miss_cols_test_set:\n    test_set.iloc[row] = test_set.iloc[row].fillna(miss_mean_age_test_set)","b1ebd662":"def isChild(row):\n    \n    if row[\"Age\"] < 18:\n        return 1\n    else:\n        return 0","a385bed9":"X_train['isChild'] = X_train.apply(lambda row: isChild(row), axis = 1)\n\nX_test['isChild'] = X_test.apply(lambda row: isChild(row), axis = 1)\n\ntest_set['isChild'] = test_set.apply(lambda row: isChild(row), axis = 1)","3ef12ab2":"X_train['Family'] = X_train['SibSp'] + X_train['Parch']\nX_test['Family'] = X_test['SibSp'] + X_test['Parch']\ntest_set['Family'] = test_set['SibSp'] + test_set['Parch']","13481f14":"X_train = X_train.drop([\n    \"PassengerId\",\n    \"Name\",\n    \"Ticket\",\n], axis = 1)\n\nX_test = X_test.drop([\n    \"PassengerId\",\n    \"Name\",\n    \"Ticket\",\n], axis = 1)\n\ntest_set = test_set.drop([\n    \"PassengerId\",\n    \"Name\",\n    \"Ticket\",\n], axis = 1)","d9c0782f":"X_train.head()","574a5832":"from sklearn.preprocessing import StandardScaler\n\nscaling = StandardScaler()\nscaling_list = ['Age', 'Family', 'Fare', 'SibSp', 'Parch']\n\nX_train[scaling_list] = scaling.fit_transform(X_train[scaling_list])\nX_test[scaling_list] = scaling.fit_transform(X_test[scaling_list])\ntest_set[scaling_list] = scaling.fit_transform(test_set[scaling_list])","68e382da":"from tensorflow import keras\nfrom tensorflow.keras import layers\n\nmodel = keras.Sequential([\n    layers.BatchNormalization(),\n    \n    layers.Dense(512, activation = 'relu', input_shape = [8]),\n    layers.BatchNormalization(),\n    layers.Dropout(0.3),\n    \n    layers.Dense(512, activation = 'relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.3),\n\n    layers.Dense(512, activation = 'relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(0.3),\n    \n    layers.Dense(1, activation = 'sigmoid')\n])\n\nmodel.compile(\n    optimizer = 'adam',\n    loss = 'binary_crossentropy',\n    metrics = ['binary_accuracy']\n)\n\nearly_stopping = keras.callbacks.EarlyStopping(\n    patience =10,\n    min_delta = 0.005,\n    restore_best_weights = True\n)\n\nmodel.fit(\n    X_train, y_train,\n    validation_data = (X_test, y_test),\n    epochs = 250,\n    callbacks = [early_stopping]\n)","a679d6c7":"preds = model.predict(test_set)\npreds_list = []\n\nfor item in preds:\n    if item[0] < 0.5:\n        preds_list.append(0)\n    else:\n        preds_list.append(1)","5f5ba720":"submission = pd.DataFrame({\n    \"PassengerId\" : test_set_duplicate[\"PassengerId\"],\n    \"Survived\" : preds_list\n})","f4924a19":"submission.head()","4b8ca161":"submission.to_csv(\"submission.csv\", index = False)","f9ff23a6":"# Submission","5fadffac":"We will store this file in `submission.csv`","7974a189":"From this, we can see that females had a much higher chance of survival","21950b61":"We will first look at the missing fare in `test_set`","3540d575":"I chose to drop `PassengerId`, `Name` and `Ticket` as I felt that they were not relevant to the model","d61e6866":"Getting an insight into the data,","4450247b":"From this, we can see that there are patterns in age depending on the name, however we encounter a problem","ed352d1a":"We know we have a lot of missing ages, so we can fill in these values by looking at their names and in their names, specifically their title.\n\nFor example, those with 'Master.' will be younger than those with 'Mr.' or 'Mrs.' as 'Master.'  is generally used as a title for children","f03326d1":"We will also combine the `SibSp` and `Parch` features to create a new feature, `Family`","6c7250dd":"We see that the mean was `12.459678`, which is what we will use to fill in this gap","b3a55c4d":"We can now get on to scaling","f56d0172":"# Final Score\n\nOne particular submission got a score of 0.78229, however this can vary slightly.\n\nThanks for reading!","e6f1810b":"# Introduction\n\nThis is a variation on my other solution for the Titanic dataset task. It utilises Tensorflow, Deep Learning and neural network concepts which I have recently learned. Please let me know if there is anything on which I can improve!","06643b92":"We can see that there is a doctor that has not been accounted for, As this doctor is obviously and adult male, we will use `mr_mean_age_train`","815fbd5d":"We see that he was in 3rd class, so we look at the mean fare for 3rd class","dbaf4be2":"# Preprocessing","5a26fe06":"# Model","8e6ffbb0":"Now that we have no missing values, we will choose the features we want","0fbc3e18":"We can see that there is a Ms that has also not been accounted for, we will use `mrs_mean_age_test_set` to fill in this gap","ab403319":"# Reading in the Data","fcc968b5":"Note that this also fills in `12.459678` in the  `Cabin` column, however this does not matter as `Cabin` is dropped later","19e0a867":"We will first replace the values in the `Sex` column using 1 for female and 0 for male for convenience","bba90522":"As the model returns only probabilities, we will convert these into 0s and 1s as desired","35f66d2a":"To build the model, I use keras and tensorflow","25e611d1":"After filling in all the missing values, we now create a new feature, `isChild`. If a passenger's `Age` < 18, `isChild = 1`","cf3ed483":"Now, we can fill in the rest of the gaps","00e4e3bf":"Let's take a look at how many missing values there are in the dataset","92b2b0e1":"Taking a look at the submission to see if everything worked as planned","668692ea":"Before preprocessing, we should split the training set in order to avoid data leakage"}}