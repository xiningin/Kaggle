{"cell_type":{"fb668b21":"code","bc394fb6":"code","13a5ddc8":"code","3616cdfc":"code","d998ebd6":"code","9ba9d799":"code","628e4235":"code","03406d46":"code","c7b8008b":"code","b775a193":"code","25470557":"code","2b2c550a":"code","4b9d6652":"code","cb74989f":"code","9bcfce17":"code","45e45d8f":"code","583dae17":"code","45b61f32":"code","d1a3bfe8":"code","3d064a47":"code","140f2241":"code","2ccd395f":"code","2d8e05a6":"code","87aa342d":"code","2ce6acfa":"code","c4cd5cba":"code","02508e90":"code","97d46790":"code","1a3fccdb":"code","93ab0bc5":"code","1f9658e0":"code","38ed10b6":"code","0b1e3d1b":"code","7c841efb":"code","5c05e17c":"code","ed2745d0":"code","3fedfd7d":"code","82b3f505":"code","2f9116f0":"code","12d119fb":"code","c442af14":"code","e4f760e4":"code","fcf034a6":"code","f14e9fb3":"code","6657d88a":"code","77b44206":"code","c464266e":"code","7d931a95":"code","cc7ccc62":"code","711c1ab8":"code","52416c31":"code","682b1ce9":"code","433c0fe5":"code","e6dbec5c":"code","688a7ad0":"code","66dedb76":"code","52be0339":"code","016e3b71":"code","d59681ea":"code","36a3dd7d":"code","3555f64c":"code","dd0cd7f7":"code","4d2ef623":"code","cdc0c140":"code","cf013e8f":"code","bda0f474":"code","622e853f":"code","64be46ad":"code","9ae5c935":"code","c8be92b9":"code","425460a8":"code","7b1d7546":"code","9afef142":"code","039cc917":"code","9cfc3722":"code","22de8158":"code","660d7805":"code","ec14d33d":"code","4bd8c539":"code","4c93a02b":"code","2d6b0f29":"code","b09e331b":"code","c970384b":"code","967b0724":"code","3e7b3ebd":"code","5d094069":"code","eb4e37b0":"code","29bfe6fc":"code","f531fe3e":"code","5092d397":"code","bcf928df":"code","93689161":"code","edb7aee3":"code","8e2705be":"code","b73d012c":"code","445fa0fb":"code","c8d4168d":"code","ff8ef593":"code","7d37ccd2":"code","28660407":"code","0bac9d2a":"code","5ccd0eda":"code","4d97929f":"code","db6739e1":"code","33254c01":"code","34883227":"code","44f34fb9":"code","2666b8d0":"code","3889159d":"code","28d9db2c":"code","6ff8a054":"code","fd862179":"code","b1b3c480":"code","06fa8240":"code","c2db687e":"code","b6fbd2fc":"code","836cd73a":"code","39398ded":"code","c2e07e58":"code","9fd4d7e7":"code","0477b982":"code","afbab188":"code","268bffbc":"code","894fefe9":"code","ed8e5807":"code","73a33885":"code","2e1bdb30":"code","0bcdb009":"code","2f56c369":"code","4c423bc5":"code","c2ccd4f4":"code","648ed818":"code","5b01d763":"code","1a4b76c9":"code","64c363eb":"code","e67943e5":"code","6683c498":"code","5c268534":"code","3c804d68":"code","ff554879":"code","cf5ec3b5":"code","627322a7":"code","d6d3e541":"code","1785e306":"code","76a5b2e8":"code","985a675c":"code","e0bc91cb":"code","b97ecea4":"code","2dd4945e":"code","908393de":"code","9a7167fd":"code","a808d19b":"code","f96a3b2a":"code","d7317317":"code","05b2d550":"code","f73bc520":"code","823f56e9":"code","85d220e5":"code","e152320f":"code","fe29ec93":"code","06636867":"code","e214faac":"code","216ade12":"code","581bc20b":"code","dd1b6eaa":"code","ac1e2fd8":"code","54393c6f":"code","af564bee":"code","c901cef1":"code","7abd97f1":"code","4b92bd97":"code","cba40cc0":"code","c929b581":"code","42f13fd3":"code","a0ad809f":"code","eaefb955":"code","b3563d14":"code","af7aaf50":"code","faaae5b7":"code","3f945f81":"code","65455260":"code","017a00f9":"code","7df8f081":"code","1d0125aa":"code","8d639bd9":"code","13908fcc":"markdown","0baf7182":"markdown","37ada013":"markdown","cdce8801":"markdown","b6bd4936":"markdown","99a64c33":"markdown","b4e940a2":"markdown","6153e37e":"markdown","64fae74a":"markdown","e8fce664":"markdown","d48d3091":"markdown","07bb2315":"markdown","1fc61bb8":"markdown","923d2882":"markdown","458649fb":"markdown","cf0b393d":"markdown","ce871d19":"markdown","86496f45":"markdown","b291a3c1":"markdown","4c627dd2":"markdown","7153a967":"markdown","9f4bd469":"markdown","9af4dcfa":"markdown","a77085ff":"markdown","ddca38e6":"markdown","69a84699":"markdown","11062c3e":"markdown","e8ef70f7":"markdown","bfcc93bc":"markdown","ef0488cb":"markdown","0a86d691":"markdown","80af66da":"markdown","4a3fe996":"markdown","2afcef00":"markdown","517fd6df":"markdown","deaa316d":"markdown","fd91ebce":"markdown","1a252592":"markdown","826ae1fd":"markdown","38c6d8f3":"markdown","f7e08a4e":"markdown","c95f5f23":"markdown","29ac98ae":"markdown","46f49356":"markdown","9604d6ad":"markdown","2f0d26fe":"markdown","ebeb581e":"markdown","69e5fd79":"markdown","1ceec92d":"markdown","bcf5bc00":"markdown","74eb34ec":"markdown","791197f8":"markdown","610450f6":"markdown","fd61219d":"markdown","9f5e5b1b":"markdown","5eb3731c":"markdown","96ccb595":"markdown"},"source":{"fb668b21":"import numpy as np\nimport pandas as pd","bc394fb6":"# for getting the file path\nimport os\nprint(os.listdir('..\/input'))","13a5ddc8":"#Data Visualization Libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","3616cdfc":"# reading the dataset\ndf=pd.read_csv(\"\/kaggle\/input\/online-shoppers-intention\/online_shoppers_intention.csv\")\n\n# checking the shape of the data\ndf.shape","d998ebd6":"df.head()","9ba9d799":"df.info()","628e4235":"print('The basic distribution of the dataset', df.describe())","03406d46":"df['Administrative']=df['Administrative'].astype(object)\ndf['Informational']=df['Informational'].astype(object)\ndf['ProductRelated']=df['ProductRelated'].astype(object)\ndf['OperatingSystems']=df['OperatingSystems'].astype(object)\ndf['Browser']=df['Browser'].astype(object)\ndf['Region']=df['Region'].astype(object)\ndf['TrafficType']=df['TrafficType'].astype(object)\ndf['SpecialDay']=df['SpecialDay'].astype(object)\ndf.info()","c7b8008b":"# Checking the unique visitor types\ndf['VisitorType'].value_counts()","b775a193":"# Checking the unique Browsers\ndf['Browser'].value_counts()","25470557":"plt.figure(figsize = (18,7))\nsns.countplot(df['Administrative'], color = \"crimson\")\nplt.show()","2b2c550a":"plt.figure(figsize = (18,7))\nsns.distplot(df['Administrative_Duration'], color = \"crimson\")\nplt.show()","4b9d6652":"plt.figure(figsize = (18,7))\nsns.countplot(df['Informational'], color = \"crimson\")\nplt.show()","cb74989f":"plt.figure(figsize = (18,7))\nsns.countplot(df['Informational_Duration'], color = \"crimson\")\nplt.show()","9bcfce17":"plt.figure(figsize = (18,7))\nsns.countplot(df['ProductRelated'], color = \"crimson\")\nplt.show()","45e45d8f":"from sklearn.preprocessing import quantile_transform\nimport scipy.stats as stats\npro_duratn = quantile_transform(df[['ProductRelated_Duration']], output_distribution='normal',random_state=0, copy='warn').flatten()\ninf_duration= quantile_transform(df[['Informational_Duration']], output_distribution='uniform',random_state=0, copy='warn').flatten()\nadm_duration= quantile_transform(df[['Administrative_Duration']], output_distribution='normal',random_state=0, copy='warn').flatten()\n\n#pro_duratn, _ = stats.boxcox(df[['ProductRelated_Duration']])\n#inf_duration, _ = stats.boxcox(df[['Informational_Duration']])\n#adm_duration, _ = stats.boxcox(df[['Administrative_Duration']])\n\n#sns.distplot(pro_duratn, color = \"crimson\")\n#plt.show()\n#sns.distplot(inf_duration, color = \"crimson\")\n#plt.show()\n#sns.distplot(adm_duration, color = \"crimson\")\n#plt.show()","583dae17":"plt.figure(figsize = (18,7))\nsns.distplot(df['BounceRates'], color = \"crimson\")\nplt.show()","45b61f32":"plt.figure(figsize = (18,7))\nsns.distplot(df['ExitRates'], color = \"crimson\")\nplt.show()","d1a3bfe8":"df['SpecialDay'].value_counts()","3d064a47":"plt.figure(figsize = (18,7))\n\nsns.countplot(df['SpecialDay'], palette = 'pastel')\nplt.show()","140f2241":"plt.figure(figsize = (18,7))\nsns.countplot(df['OperatingSystems'], palette = 'pastel')\nplt.show()","2ccd395f":"plt.figure(figsize = (18,7))\nsns.countplot(df['Browser'], palette = 'pastel')\nplt.show()","2d8e05a6":"plt.figure(figsize = (18,7))\nsns.countplot(df['Region'], palette = 'pastel')\nplt.show()","87aa342d":"plt.figure(figsize = (18,7))\nsns.countplot(df['TrafficType'], palette = 'pastel')\nplt.show()","2ce6acfa":"print(df['Month'].value_counts())\nprint(df['VisitorType'].value_counts())","c4cd5cba":"# Month\ndf['Month'].value_counts().plot(kind = \"bar\")\n\n# By Sns\n#sns.countplot(x = \"Month\", data = df)\nplt.xticks(rotation = 90)\nplt.show()","02508e90":"# VisitoType\ndf['VisitorType'].value_counts().plot(kind = \"bar\")\n\n# By Sns\n#sns.countplot(x = \"Month\", data = df)\nplt.xticks(rotation = 90)\nplt.show()","97d46790":"\nplt.figure(figsize = (10,7))\n\nplt.subplot(1, 2, 1)\nsns.countplot(df['Weekend'], palette = 'pastel')\nplt.title('Buy or Not', fontsize = 20)\nplt.xlabel('Revenue or not', fontsize = 15)\nplt.ylabel('count', fontsize = 15)\n\n# checking the Distribution of customers on Weekend\nplt.subplot(1, 2, 2)\nsns.countplot(df['Weekend'], palette = 'inferno')\nplt.title('Purchase on Weekends', fontsize = 20)\nplt.xlabel('Weekend or not', fontsize = 15)\nplt.ylabel('count', fontsize = 15)\n\nplt.show()","1a3fccdb":"# Cat Vs Num\n#plt.figure(figsize = (25,18))\n\nsns.boxplot(df['Revenue'], df['Informational_Duration'], palette = 'rainbow')\nplt.title('Info. duration vs Revenue', fontsize = 30)\nplt.xlabel('Info. duration', fontsize = 15)\nplt.ylabel('Revenue', fontsize = 15)\nplt.show()","93ab0bc5":"# Cat Vs Num\n#plt.figure(figsize = (25,18))\nsns.boxplot(df['Revenue'], df['Administrative_Duration'], palette = 'pastel')\nplt.title('Admn. duration vs Revenue', fontsize = 30)\nplt.xlabel('Admn. duration', fontsize = 15)\nplt.ylabel('Revenue', fontsize = 15)\nplt.show()","1f9658e0":"# Cat Vs Num\n#plt.figure(figsize = (25,18))\nsns.boxplot(df['Revenue'], df['ProductRelated_Duration'], palette = 'dark')\nplt.title('Product Related duration vs Revenue', fontsize = 30)\nplt.xlabel('Product Related duration', fontsize = 15)\nplt.ylabel('Revenue', fontsize = 15)\nplt.show()","38ed10b6":"\n# Cat Vs Num\n#plt.figure(figsize = (25,18))\nsns.boxplot(df['Revenue'], df['ExitRates'], palette = 'rainbow')\nplt.title('ExitRates vs Revenue', fontsize = 30)\nplt.xlabel('ExitRates', fontsize = 15)\nplt.ylabel('Revenue', fontsize = 15)\nplt.show()","0b1e3d1b":"# Cat Vs Num\n# page values vs revenue\n#plt.figure(figsize = (15,9))\nsns.stripplot(df['Revenue'], df['PageValues'], palette = 'autumn')\nplt.title('PageValues vs Revenue', fontsize = 30)\nplt.xlabel('PageValues', fontsize = 15)\nplt.ylabel('Revenue', fontsize = 15)\nplt.show()","7c841efb":"# Cat Vs Num\n# bounce rates vs revenue\n\n#plt.figure(figsize = (15,9))\nsns.stripplot(df['Revenue'], df['BounceRates'], palette = 'magma')\nplt.title('Bounce Rates vs Revenue', fontsize = 30)\nplt.xlabel('Boune Rates', fontsize = 15)\nplt.ylabel('Revenue', fontsize = 15)\nplt.show()","5c05e17c":"# Cat Vs Cat\n\n# weekend vs Revenue\ndata = pd.crosstab(df['Weekend'], df['Revenue'])\ndata.plot(kind = 'bar', stacked = True, color  = ['lightpink', 'yellow'])\nplt.title('Weekend vs Revenue')\nplt.show()","ed2745d0":"# Cat vs Cat\n# Traffic Type vs Revenue\ndata = pd.crosstab(df['TrafficType'], df['Revenue'])\ndata.plot(kind = 'bar', stacked = True, figsize = (8, 5), color = ['orange', 'green'])\nplt.title('Traffic Type vs Revenue')\nplt.show()","3fedfd7d":"# Cat vs Cat\n# visitor type vs revenue\ndata = pd.crosstab(df['VisitorType'], df['Revenue'])\ndata.plot(kind = 'bar', stacked = True, figsize = (8, 5), color = ['lightgreen', 'green'])\nplt.title('Visitor Type vs Revenue')\nplt.show()","82b3f505":"# Cat vs Cat\n# Region vs revenue\ndata = pd.crosstab(df['Region'], df['Revenue'])\ndata.plot(kind = 'bar', stacked = True, figsize = (8, 5), color = ['lightblue', 'green'])\nplt.title('Visitor Type vs Revenue')\nplt.show()","2f9116f0":"df['OperatingSystems']=df['OperatingSystems'].astype(object)\ndf['Browser']=df['Browser'].astype(object)\ndf['Region']=df['Region'].astype(object)\ndf['TrafficType']=df['TrafficType'].astype(object)\ndf['SpecialDay']=df['SpecialDay'].astype(object)\ndf['Administrative']=df['Administrative'].astype(object)\ndf['Informational']=df['Informational'].astype(object)\ndf['ProductRelated']=df['ProductRelated'].astype(object)","12d119fb":"# month vs pagevalues with respect to revenue\nplt.figure(figsize = (25,20))\nsns.boxplot(x = df['Month'], y = df['PageValues'], hue = df['Revenue'], palette = 'inferno')\nplt.title('Month vs PageValues with respect to Revenue', fontsize = 30)\nplt.show()","c442af14":"# month vs exitrates with respect to revenue\nplt.figure(figsize = (25,20))\n#plt.subplot(2, 2, 2)\nsns.boxplot(x = df['Month'], y = df['ExitRates'], hue = df['Revenue'], palette = 'Reds')\nplt.title('Month vs ExitRates with respect to Revenue', fontsize = 30)\nplt.show()","e4f760e4":"# month vs bouncerates with respect to revenue\nplt.figure(figsize = (25,20))\nsns.boxplot(x = df['Month'], y = df['BounceRates'], hue = df['Revenue'], palette = 'Oranges')\nplt.title('Month vs BounceRates with respect to Rev.', fontsize = 30)\nplt.show()","fcf034a6":"# VisitorType vs Bouncerates with respect to revenue\nplt.figure(figsize = (25,20))\nsns.boxplot(x = df['VisitorType'], y = df['BounceRates'], hue = df['Revenue'], palette = 'Purples')\nplt.title('Visitors vs BounceRates with respect to Rev.', fontsize = 30)\nplt.show()","f14e9fb3":"# visitor type vs exit rates w.r.t revenue\nplt.figure(figsize = (25,20))\nsns.boxplot(x = df['VisitorType'], y = df['ExitRates'], hue = df['Revenue'], palette = 'rainbow')\nplt.title('VisitorType vs ExitRates wrt Rev.', fontsize = 30)\nplt.show()","6657d88a":"# visitor type vs exit rates w.r.t revenue\nplt.figure(figsize = (25,20))\nsns.boxplot(x = df['VisitorType'], y = df['PageValues'], hue = df['Revenue'], palette = 'gnuplot')\nplt.title('VisitorType vs PageValues wrt Rev.', fontsize = 30)\nplt.show()","77b44206":"# region vs pagevalues w.r.t. revenue\nplt.figure(figsize = (25,20))\nsns.boxplot(x = df['Region'], y = df['PageValues'], hue = df['Revenue'], palette = 'Greens')\nplt.title('Region vs PageValues wrt Rev.', fontsize = 30)\nplt.show()","c464266e":"#region vs exit rates w.r.t. revenue\nplt.figure(figsize = (25,20))\nsns.boxplot(x = df['Region'], y = df['ExitRates'], hue = df['Revenue'], palette = 'spring')\nplt.title('Region vs Exit Rates w.r.t. Revenue', fontsize = 30)\nplt.show()","7d931a95":"df_w = df[['Weekend','Revenue']]\ndf_w.head()","cc7ccc62":"df_w1 = pd.get_dummies(df_w)","711c1ab8":"df_w1.head()","52416c31":"df_w1.Weekend = df_w1.Weekend.map({False : 0, True : 1})","682b1ce9":"df_w1.Revenue = df_w1.Revenue.map({False : 0, True :1})","433c0fe5":"df_w1.head()","e6dbec5c":"from scipy.stats import chi2_contingency\nfrom scipy.stats import chi2","688a7ad0":"ct=pd.crosstab(df_w.Weekend, df_w.Revenue)\nct","66dedb76":"nn=np.array(ct)\nnn","52be0339":"stat, p, dof, expected = chi2_contingency(nn)\nprint('dof=%d' % dof)\nprint(expected)\n# interpret test-statistic\nprob = 0.95\ncritical = chi2.ppf(prob, dof)\nprint('probability=%.3f, critical=%.3f, stat=%.3f' % (prob, critical, stat))\nif abs(stat) >= critical:\n    print(' Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')\n# interpret p-value\nalpha = 1.0 - prob\nprint('significance=%.3f, p=%.3f' % (alpha, p))\nif p <= alpha:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail)')","016e3b71":"df.columns","d59681ea":"df_vt = pd.crosstab(df.VisitorType, df.Revenue)\ndf_vt","36a3dd7d":"vt = np.array(df_vt)\nvt","3555f64c":"stat, p, dof, expected = chi2_contingency(vt)\nprint('dof=%d' % dof)\nprint(expected)\n# interpret test-statistic\nprob = 0.95\ncritical = chi2.ppf(prob, dof)\nprint('probability=%.3f, critical=%.3f, stat=%.3f' % (prob, critical, stat))\nif abs(stat) >= critical:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')\n# interpret p-value\nalpha = 1.0 - prob\nprint('significance=%.3f, p=%.3f' % (alpha, p))\nif p <= alpha:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')","dd0cd7f7":"df_tt = pd.crosstab(df.TrafficType, df.Revenue)\ndf_tt.plot(kind = 'bar')","4d2ef623":"df_tt.TrafficType = df.TrafficType.replace(to_replace = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], value = 5)","cdc0c140":"df_tt = pd.crosstab(df_tt.TrafficType, df.Revenue)\ndf_tt.plot(kind = 'bar')","cf013e8f":"df.TrafficType.nunique()","bda0f474":"tt = np.array(df_tt)\ntt","622e853f":"stat, p, dof, expected = chi2_contingency(tt)\nprint('dof=%d' % dof)\nprint(expected)\n# interpret test-statistic\nprob = 0.95\ncritical = chi2.ppf(prob, dof)\nprint('probability=%.3f, critical=%.3f, stat=%.3f' % (prob, critical, stat))\nif abs(stat) >= critical:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')\n# interpret p-value\nalpha = 1.0 - prob\nprint('significance=%.3f, p=%.3f' % (alpha, p))\nif p <= alpha:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')","64be46ad":"df_r = pd.crosstab(df.Region, df.Revenue)\ndf_r.plot(kind = 'bar')\nplt.show()","9ae5c935":"df_r","c8be92b9":"df_r.iloc[5,:]","425460a8":"df_r.Region = df.Region.replace(to_replace = [5,6,7,8,9], value = 5)","7b1d7546":"print(df.Region.nunique())\nprint(df_r.Region.unique())","9afef142":"df_r.Region.unique()","039cc917":"df_r = pd.crosstab(df_r.Region, df.Revenue)\ndf_r.plot(kind = 'bar')\nplt.show()","9cfc3722":"rg = np.array(df_r)\nrg","22de8158":"stat, p, dof, expected = chi2_contingency(rg)\nprint('dof=%d' % dof)\nprint(expected)\n# interpret test-statistic\nprob = 0.95\ncritical = chi2.ppf(prob, dof)\nprint('probability=%.3f, critical=%.3f, stat=%.3f' % (prob, critical, stat))\nif abs(stat) >= critical:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')\n# interpret p-value\nalpha = 1.0 - prob\nprint('significance=%.3f, p=%.3f' % (alpha, p))\nif p <= alpha:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')","660d7805":"df_b = pd.crosstab(df.Browser, df.Revenue)\ndf_b.plot(kind = 'bar')\nplt.show()","ec14d33d":"df_b.Browser = df.Browser.replace(to_replace = [3,4,5,6,7,8,9,10,11,12,13], value = 3)","4bd8c539":"print(df.Browser.nunique())\nprint(df_b.Browser.unique())","4c93a02b":"df_b = pd.crosstab(df_b.Browser, df.Revenue)\ndf_b.plot(kind = 'bar')","2d6b0f29":"b = np.array(df_b)\nb","b09e331b":"stat, p, dof, expected = chi2_contingency(b)\nprint('dof=%d' % dof)\nprint(expected)\n# interpret test-statistic\nprob = 0.95\ncritical = chi2.ppf(prob, dof)\nprint('probability=%.3f, critical=%.3f, stat=%.3f' % (prob, critical, stat))\nif abs(stat) >= critical:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')\n# interpret p-value\nalpha = 1.0 - prob\nprint('significance=%.3f, p=%.3f' % (alpha, p))\nif p <= alpha:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')","c970384b":"df_os = pd.crosstab(df.OperatingSystems, df.Revenue)\ndf_os.plot(kind = 'bar')\nplt.show()","967b0724":"df_os","3e7b3ebd":"df_os.OperatingSystems = df.OperatingSystems.replace(to_replace = [4,5,6,7,8], value =4)","5d094069":"df_os = pd.crosstab(df_os.OperatingSystems, df.Revenue)\ndf_os","eb4e37b0":"os = np.array(df_os)\nos","29bfe6fc":"stat, p, dof, expected = chi2_contingency(os)\nprint('dof=%d' % dof)\nprint(expected)\n# interpret test-statistic\nprob = 0.95\ncritical = chi2.ppf(prob, dof)\nprint('probability=%.3f, critical=%.3f, stat=%.3f' % (prob, critical, stat))\nif abs(stat) >= critical:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')\n# interpret p-value\nalpha = 1.0 - prob\nprint('significance=%.3f, p=%.3f' % (alpha, p))\nif p <= alpha:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')","f531fe3e":"df_m = pd.crosstab(df.Month, df.Revenue)\ndf_m.plot(kind = 'bar')\nplt.show()","5092d397":"df_m.Month = df.Month.replace(to_replace = ['Aug','Feb',' Jul','June','Oct', 'Sep'], value = 'Rest')","bcf928df":"df_m = pd.crosstab(df_m.Month, df.Revenue)\ndf_m.plot(kind = 'bar')\nplt.show()","93689161":"m = np.array(df_m)\nm","edb7aee3":"stat, p, dof, expected = chi2_contingency(m)\nprint('dof=%d' % dof)\nprint(expected)\n# interpret test-statistic\nprob = 0.95\ncritical = chi2.ppf(prob, dof)\nprint('probability=%.3f, critical=%.3f, stat=%.3f' % (prob, critical, stat))\nif abs(stat) >= critical:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')\n# interpret p-value\nalpha = 1.0 - prob\nprint('significance=%.3f, p=%.3f' % (alpha, p))\nif p <= alpha:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')","8e2705be":"df_sd = pd.crosstab(df.SpecialDay, df.Revenue)\ndf_sd.plot(kind = 'bar')\nplt.show()","b73d012c":"df_sd.SpecialDay = df.SpecialDay.replace(to_replace = [0.2,0.4,0.6,0.8,1.0], value = 1.0)","445fa0fb":"df_sd = pd.crosstab(df_sd.SpecialDay, df.Revenue)\ndf_sd.plot(kind = 'bar')\nplt.show()","c8d4168d":"sd = np.array(df_sd)\nsd","ff8ef593":"stat, p, dof, expected = chi2_contingency(sd)\nprint('dof=%d' % dof)\nprint(expected)\n# interpret test-statistic\nprob = 0.95\ncritical = chi2.ppf(prob, dof)\nprint('probability=%.3f, critical=%.3f, stat=%.3f' % (prob, critical, stat))\nif abs(stat) >= critical:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')\n# interpret p-value\nalpha = 1.0 - prob\nprint('significance=%.3f, p=%.3f' % (alpha, p))\nif p <= alpha:\n    print('Dependent (reject H0)')\nelse:\n    print('Independent (fail to reject H0)')","7d37ccd2":"sns.pairplot(df,x_vars=['BounceRates','ExitRates'],y_vars=['BounceRates','ExitRates'],hue='Revenue',diag_kind='kde')\nplt.show()","28660407":"df.isnull().sum()[df.isnull().sum()>0]","0bac9d2a":"# For Administrative_Duaration\nq1_adm=np.quantile(df.Administrative_Duration,0.25)\nq3_adm=np.quantile(df.Administrative_Duration,0.75)\niqr_adm=q3_adm-q1_adm\nll=q1_adm-(1.5*iqr_adm)\nul=q3_adm+(1.5*iqr_adm)\ndf_ad_out=df[(df.Administrative_Duration<ll) | (df.Administrative_Duration>ul)]\ndf_ad_out.shape","5ccd0eda":"# for Informational_Duration\nq1_inf=np.quantile(df.Informational_Duration,0.25)\nq3_inf=np.quantile(df.Informational_Duration,0.75)\niqr_inf=q3_inf-q1_inf\nll=q1_inf-(1.5*iqr_inf)\nul=q3_inf+(1.5*iqr_inf)\ndf_inf_out=df[(df.Informational_Duration<ll) | (df.Informational_Duration>ul)]\ndf_inf_out.shape","4d97929f":"# for Product Related Duaration\nq1_pro=np.quantile(df.ProductRelated_Duration,0.25)\nq3_pro=np.quantile(df.ProductRelated_Duration,0.75)\niqr_pro=q3_pro-q1_pro\nll=q1_pro-(1.5*iqr_pro)\nul=q3_pro+(1.5*iqr_pro)\ndf_pro_out=df[(df.ProductRelated_Duration<ll) | (df.ProductRelated_Duration>ul)]\ndf_pro_out.shape","db6739e1":"# For Bounce Rate\nq1_bou=np.quantile(df.BounceRates,0.25)\nq3_bou=np.quantile(df.BounceRates,0.75)\niqr_bou=q3_bou-q1_bou\nll=q1_bou-(1.5*iqr_bou)\nul=q3_bou+(1.5*iqr_bou)\ndf_bou_out=df[(df.BounceRates<ll) | (df.BounceRates>ul)]\ndf_bou_out.shape","33254c01":"# for Exit Rate\nq1_ex=np.quantile(df.ExitRates,0.25)\nq3_ex=np.quantile(df.ExitRates,0.75)\niqr_ex=q3_ex-q1_ex\nll=q1_ex-(1.5*iqr_ex)\nul=q3_ex+(1.5*iqr_ex)\ndf_ex_out=df[(df.ExitRates<ll) | (df.ExitRates>ul)]\ndf_ex_out.shape","34883227":"# for Page Values\nq1_pg=np.quantile(df.PageValues,0.25)\nq3_pg=np.quantile(df.PageValues,0.75)\niqr_pg=q3_pg-q1_pg\nll=q1_pg-(1.5*iqr_pg)\nul=q3_pg+(1.5*iqr_pg)\ndf_pg_out=df[(df.PageValues<ll) | (df.PageValues>ul)]\ndf_pg_out.shape","44f34fb9":"dff=pd.DataFrame()","2666b8d0":"dff['Administrative_Duration']=df.index.isin(df_ad_out.index)\ndff['Informational_Duration']=df.index.isin(df_inf_out.index)\ndff['ProductRelated_Duration']=df.index.isin(df_pro_out.index)\ndff['BounceRates']=df.index.isin(df_bou_out.index)\ndff['ExitRates']=df.index.isin(df_ex_out.index)\ndff['PageValues']=df.index.isin(df_pg_out.index)","3889159d":"# Plotting heat map for Otliers","28d9db2c":"plt.figure(figsize=(20,15))\nsns.heatmap(dff , yticklabels = False , cbar = False , cmap = 'viridis')\nplt.show()","6ff8a054":"# Converting Booleans into 1's and 0's\nbool_map={True:1,False:0}\ndf.Weekend.replace(bool_map,inplace=True)\ndf.Revenue.replace(bool_map,inplace=True)","fd862179":"df.head()","b1b3c480":"dff.head()","06fa8240":"dff['multi'] = ['Y' if x >= 4 else 'N' for x in np.sum(dff.values == True, 1)]","c2db687e":"dff['multi'] = ['Y' if x >= 4 else 'N' for x in np.sum(dff.values == True, 1)]","b6fbd2fc":"df_new=df[dff['multi']=='N']\ndf_new.shape","836cd73a":"# Converting Booleans into 1's and 0's\nbool_map={True:1,False:0}\ndf_new.Weekend.replace(bool_map,inplace=True)\ndf_new.Revenue.replace(bool_map,inplace=True)\ndf_new.head()","39398ded":"# Replacing the Outliers with NAN\ndf_new.loc[(dff['Administrative_Duration']==True),'Administrative_Duration']=np.NAN\ndf_new.loc[(dff['Informational_Duration']==True),'Informational_Duration']=np.NAN\ndf_new.loc[(dff['ProductRelated_Duration']==True),'ProductRelated_Duration']=np.NAN\ndf_new.loc[(dff['BounceRates']==True),'BounceRates']=np.NAN\ndf_new.loc[(dff['PageValues']==True),'PageValues']=np.NAN\n#df_new=df_new.drop('ExitRates',axis=1)","c2e07e58":"df_new.isnull().sum()[df_new.isnull().sum()>0]","9fd4d7e7":"imp_col=df_new.isnull().sum()[df_new.isnull().sum()>0].index","0477b982":"# Creating dummy Variables\ndf_dum=pd.get_dummies(df_new)\ndf_dum.head()","afbab188":"!pip install impyute","268bffbc":"from impyute.imputation.cs import mice","894fefe9":"imputed_df=mice(df_dum.values)","ed8e5807":"imputed_df=pd.DataFrame(imputed_df,columns=df_dum.columns)","73a33885":"imputed_df.head()","2e1bdb30":"X=imputed_df.drop(['Revenue','ExitRates'],axis=1)\nY=imputed_df.Revenue\n#Y.value_counts(normalize=True)","0bcdb009":"from sklearn.metrics import f1_score,cohen_kappa_score,classification_report,confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier","2f56c369":"x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.3,random_state=1)","4c423bc5":"imputed_df['Revenue'].value_counts().plot(kind='bar')\nplt.show()","c2ccd4f4":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.linear_model import LogisticRegressionCV\nlog=LogisticRegression(C=0.005994,penalty='l1',solver='liblinear')\nlog.fit(x_train,y_train)\nprint('Train score:',log.score(x_train,y_train))\nprint('Test score:',log.score(x_test,y_test))\n#log.C_","648ed818":"log_pred=log.predict(x_test)\nprint('F1 Score:',f1_score(y_test,log_pred))\nprint('Kappa Score:',cohen_kappa_score(y_test,log_pred))\nprint('Classification report:\\n',classification_report(y_test,log_pred))","5b01d763":"from sklearn.metrics import roc_curve,auc\nfrom sklearn.ensemble import GradientBoostingClassifier,RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB","1a4b76c9":"fpr,tpr,thresh=roc_curve(y_test,log_pred)\nauc_log=auc(fpr,tpr)","64c363eb":"dt=DecisionTreeClassifier(max_depth=6)\ndt.fit(x_train,y_train)\nprint('Train score:',dt.score(x_train,y_train))\nprint('Test score:',dt.score(x_test,y_test))","e67943e5":"dt_pred=dt.predict(x_test)\nprint('F1 Score:',f1_score(y_test,dt_pred))\nprint('Kappa Score:',cohen_kappa_score(y_test,dt_pred))\nprint('Classification report:\\n',classification_report(y_test,dt_pred))","6683c498":"fpr_dt,tpr_dt,thresh=roc_curve(y_test,dt_pred)\nauc_dt=auc(fpr,tpr)","5c268534":"rf_sm=RandomForestClassifier(max_depth=6)\nrf_sm.fit(x_train,y_train)\nprint('Train score:',rf_sm.score(x_train,y_train))\nprint('Test score:',rf_sm.score(x_test,y_test))","3c804d68":"rf_sm_pred=rf_sm.predict(x_test)\nprint('F1 Score:',f1_score(y_test,rf_sm_pred))\nprint('Kappa Score:',cohen_kappa_score(y_test,rf_sm_pred))\nprint('Classification report:\\n',classification_report(y_test,rf_sm_pred))","ff554879":"fpr_rf,tpr_rf,thresh=roc_curve(y_test,rf_sm_pred)\nauc_rf=auc(fpr,tpr)","cf5ec3b5":"plt.plot(fpr,tpr, label='LR(area = %0.2f)' % auc_log,color='red')\nplt.plot(fpr_dt, tpr_dt, label='DT(area = %0.2f)' % auc_dt,color='green')\nplt.plot(fpr_rf, tpr_rf, label='RF(area = %0.2f)' % auc_rf,color='blue')\nplt.plot([0, 1], [0, 1], 'k--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.legend(loc=\"lower right\")\nplt.show()","627322a7":"gnb=GaussianNB()\ngnb.fit(x_train,y_train)\nprint('Train score:',gnb.score(x_train,y_train))\nprint('Test score:',gnb.score(x_test,y_test))","d6d3e541":"nb_pred=gnb.predict(x_test)\nfpr2,tpr2,thresh=roc_curve(y_test,nb_pred)\nauc2=auc(fpr2,tpr2)","1785e306":"dt=DecisionTreeClassifier(max_depth=6)\ndt.fit(x_train,y_train)\nprint('Train score:',dt.score(x_train,y_train))\nprint('Test score:',dt.score(x_test,y_test))","76a5b2e8":"dt_pred=dt.predict(x_test)\nprint('F1 Score:',f1_score(y_test,dt_pred))\nprint('Kappa Score:',cohen_kappa_score(y_test,dt_pred))","985a675c":"fpr3,tpr3,thresh=roc_curve(y_test,dt_pred)\nauc3=auc(fpr3,tpr3)","e0bc91cb":"rf_sm=RandomForestClassifier(max_depth=6)\nrf_sm.fit(x_train,y_train)\nprint('Train score:',rf_sm.score(x_train,y_train))\nprint('Test score:',rf_sm.score(x_test,y_test))","b97ecea4":"rf_pred_sm=rf_sm.predict(x_test)\nprint('F1 Score:',f1_score(y_test,rf_pred_sm))\nprint('Kappa Score:',cohen_kappa_score(y_test,rf_pred_sm))","2dd4945e":"fpr4,tpr4,thresh=roc_curve(y_test,rf_pred_sm)\nauc4=auc(fpr4,tpr4)","908393de":"!pip install -U imbalanced-learn","9a7167fd":"from imblearn.over_sampling import RandomOverSampler\nsmote=RandomOverSampler(random_state=42)\nX_new,Y_new=smote.fit_sample(X,Y)\nX_new=pd.DataFrame(X_new,columns=X.columns)\nY_new=pd.DataFrame(Y_new,columns=['Revenue'])\nX_new.head()","a808d19b":"Y_new['Revenue'].value_counts().plot(kind='bar')\nplt.show()","f96a3b2a":"x_train,x_test,y_train,y_test=train_test_split(X_new,Y_new,test_size=0.3,random_state=1)","d7317317":"log=LogisticRegression(penalty='l1',solver='liblinear')\nlog.fit(x_train,y_train)\nprint('Train score:',log.score(x_train,y_train))\nprint('Test score:',log.score(x_test,y_test))\n","05b2d550":"log_pred=log.predict(x_test)\nprint('F1 Score:',f1_score(y_test,log_pred))\nprint('Kappa Score:',cohen_kappa_score(y_test,log_pred))\nprint('Classification report:\\n',classification_report(y_test,log_pred))","f73bc520":"fpr1,tpr1,thresh=roc_curve(y_test,log_pred)\nauc1=auc(fpr1,tpr1)","823f56e9":"gnb=GaussianNB()\ngnb.fit(x_train,y_train)\nprint('Train score:',gnb.score(x_train,y_train))\nprint('Test score:',gnb.score(x_test,y_test))","85d220e5":"nb_pred=gnb.predict(x_test)\nfpr2,tpr2,thresh=roc_curve(y_test,nb_pred)\nauc2=auc(fpr2,tpr2)","e152320f":"dt=DecisionTreeClassifier(max_depth=6)\ndt.fit(x_train,y_train)\nprint('Train score:',dt.score(x_train,y_train))\nprint('Test score:',dt.score(x_test,y_test))","fe29ec93":"dt_pred=dt.predict(x_test)\nprint('F1 Score:',f1_score(y_test,dt_pred))\nprint('Kappa Score:',cohen_kappa_score(y_test,dt_pred))","06636867":"fpr3,tpr3,thresh=roc_curve(y_test,dt_pred)\nauc3=auc(fpr3,tpr3)","e214faac":"rf_sm=RandomForestClassifier(max_depth=6)\nrf_sm.fit(x_train,y_train)\nprint('Train score:',rf_sm.score(x_train,y_train))\nprint('Test score:',rf_sm.score(x_test,y_test))","216ade12":"rf_pred_sm=rf_sm.predict(x_test)\nprint('F1 Score:',f1_score(y_test,rf_pred_sm))\nprint('Kappa Score:',cohen_kappa_score(y_test,rf_pred_sm))","581bc20b":"fpr4,tpr4,thresh=roc_curve(y_test,rf_pred_sm)\nauc4=auc(fpr4,tpr4)","dd1b6eaa":"imp=pd.DataFrame(rf_sm.feature_importances_, columns = [\"Imp\"], index =x_train.columns)","ac1e2fd8":"plt.figure(figsize=(20,8))\nimp.sort_values('Imp',ascending=False).head(70).plot(kind='bar')\nplt.xticks(rotation=80)\nplt.show()","54393c6f":"imp.sort_values('Imp',ascending=False).head()","af564bee":"imp.sort_values('Imp',ascending=False).head()","c901cef1":"imp2=imp[imp[\"Imp\"]>0.0005]\nlen(imp2['Imp'])","7abd97f1":"imp2.sort_values('Imp',ascending=False).index","4b92bd97":"xnew=X_new[imp2.index]\nx_train,x_test,y_train,y_test=train_test_split(xnew,Y_new,test_size=0.3,random_state=1)","cba40cc0":"log=LogisticRegression(penalty='l1',solver='liblinear')\nlog.fit(x_train,y_train)\nprint('Train score:',log.score(x_train,y_train))\nprint('Test score:',log.score(x_test,y_test))","c929b581":"log_sm1_pred=log.predict(x_test)\nprint('F1 Score:',f1_score(y_test,log_sm1_pred))\nprint('Kappa Score:',cohen_kappa_score(y_test,log_sm1_pred))","42f13fd3":"dt=DecisionTreeClassifier(max_depth=6)\ndt.fit(x_train,y_train)\nprint('Train score:',dt.score(x_train,y_train))\nprint('Test score:',dt.score(x_test,y_test))","a0ad809f":"dt_sm1_pred_sm=dt.predict(x_test)\nprint('F1 Score:',f1_score(y_test,dt_sm1_pred_sm))\nprint('Kappa Score:',cohen_kappa_score(y_test,dt_sm1_pred_sm))","eaefb955":"rf_sm1=RandomForestClassifier(n_estimators=50,max_depth=16)\nrf_sm1.fit(x_train,y_train)\nprint('Train score:',rf_sm1.score(x_train,y_train))\nprint('Test score:',rf_sm1.score(x_test,y_test))","b3563d14":"rf_sm1_pred_sm=rf_sm1.predict(x_test)\nprint('F1 Score:',f1_score(y_test,rf_sm1_pred_sm))\nprint('Kappa Score:',cohen_kappa_score(y_test,rf_sm1_pred_sm))","af7aaf50":"fpr5,tpr5,thresh=roc_curve(y_test,rf_sm1_pred_sm)\nauc5=auc(fpr5,tpr5)","faaae5b7":"gb=GradientBoostingClassifier(n_estimators=50,max_depth=5)\ngb.fit(x_train,y_train)\nprint('Train score:',gb.score(x_train,y_train))\nprint('Test score:',gb.score(x_test,y_test))","3f945f81":"gb_pred_sm=gb.predict(x_test)\nprint('F1 Score:',f1_score(y_test,gb_pred_sm))\nprint('Kappa Score:',cohen_kappa_score(y_test,gb_pred_sm))","65455260":"fpr6,tpr6,thresh=roc_curve(y_test,gb_pred_sm)\nauc6=auc(fpr6,tpr6)","017a00f9":"plt.plot(fpr1,tpr1, label='LR(area = %0.2f)' % auc1,color='red')\nplt.plot(fpr2, tpr2, label='NB(area = %0.2f)' % auc2,color='black')\nplt.plot(fpr3, tpr3, label='DT(area = %0.2f)' % auc3,color='magenta')\nplt.plot(fpr4, tpr4, label='RF(area = %0.2f)' % auc4,color='blue')\nplt.plot(fpr6, tpr6, label='GB(area = %0.2f)' % auc6,color='pink')\nplt.plot(fpr6, tpr6, label='RF with FS(area = %0.2f)' % auc5,color='green')\n\n\nplt.plot([0, 1], [0, 1], 'k--',color='grey')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.legend(loc=\"lower right\")\nplt.show()","7df8f081":"y = df['Revenue']","1d0125aa":"from sklearn.model_selection import KFold,cross_val_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import classification_report","8d639bd9":"models = []\nmodels.append(('LR', LogisticRegression(penalty='l1',solver='liblinear')))\nmodels.append(('CART', DecisionTreeClassifier()))\nmodels.append(('NB', GaussianNB()))\nmodels.append(('RF', RandomForestClassifier()))\nmodels.append(('GBM', GradientBoostingClassifier()))\nresults = []\nnames = []\nscoring = 'accuracy'\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=12345)\n    cv_results = cross_val_score(model, xnew, Y_new, cv=kfold, scoring=scoring)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (std=%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)\n# boxplot algorithm comparison\nfig = plt.figure()\nfig.suptitle('Algorithm Comparison')\nax = fig.add_subplot(111)\nplt.boxplot(results)\nax.set_xticklabels(names)\nplt.show()","13908fcc":"The distribution for Administrative_Duration is right skewed. A good no. of users do spend time on the Administratve pages.","0baf7182":"__As observed from findings it is clear that the performance improved with SMOTE.\nAmong all models Random Forest With Feature Selection gives best accuracy metrics.__","37ada013":"### Chi-Square","cdce8801":"### Month","b6bd4936":"__Normalizing the following Variables using Quantile Transformation method__","99a64c33":"__Finding out the datatype of variable features of dataset__","b4e940a2":"__Spliting the data into Train and test__","6153e37e":"### Region","64fae74a":"### OperatingSystems","e8fce664":"__Our Target Variable is Imbalanced \nFirst we train model without bakacing the target vairble\nand__ \n\n__Later we will train the model using Oversampling technique SMOTE (Synthetic Minority Over-sampling Technique) From imblearn library__","d48d3091":"### Decision Tree","07bb2315":"__Informational Duration vs revenue__","1fc61bb8":"### Browser\n","923d2882":"__Checking the Distribution of customers on Revenue__","458649fb":"###  Decision Tree","cf0b393d":"### Decision Tree","ce871d19":"__Importing and reading dataset__","86496f45":"__Displaying the top 5 rows from the dataset__","b291a3c1":"As seen from accuracy metrics and ROC, we can see that Random Forest is best among all as it gives 98% area under, F1 score as 0.90\n\nTransformation improved accuracies for Logistic and Na\u00efve Bayes but it hardly improved Random Forest and Decision Tree. So, we go ahead without transformations as it hardly improves any accuracy.\n\nKNN is a classification technique but due to less computational power we were able to use it. Also, KNN takes more time to\n\nRandom Forest was used for feature selection and the important features given by Random Forest are supported by the EDA analysis done.","4c627dd2":"\nMajority of the users doesn't spend time on Informational pages however we do have users who checks out multiple pages. Now the question if its the website's 'ABOUT' sectoin or Google serach pages","7153a967":"__Outlier Treatment__","9f4bd469":"### Logistic Regression","9af4dcfa":"### With SMOTE","a77085ff":"### Muti-Variate Analysis","ddca38e6":"Checkout My Github Profile: (https:\/\/github.com\/swapnilbhange\/Online-Shoppers-Purchasing-Intention--Capstone-Project.git)\n\n\n# **Please make sure to give it an UPVOTE if you find it useful.**","69a84699":"__Using Random Forest, we found important features:\nAmong 405 dummy+ continuous variables Random Forest could give us 68 important features.__","11062c3e":"__Product related duration vs revenue__","e8ef70f7":"__After Converting the Outliers into NAN, we need to assign values to this null\/missing Values. \nHere we are using MICE(Missing Imputaions through Chained Equations) technique for imputing the missing values.__","bfcc93bc":"# HYPOTHESIS\n\nHO: The variables are independent.\n\nHA: The variables are dependent.","ef0488cb":"__Importing Librabries__","0a86d691":"___Above Heatmap is For Variables Administrative_Duration, Informational_Duration, ProductRelated_Duration, BounceRates, ExitRates, PageValues. Inwhich Yellow lines Represents the presence of Outliers...___","80af66da":"### Random Forest","4a3fe996":"__exit rate vs revenue__","2afcef00":"### Cross Validating different models","517fd6df":"### Gradient Boosting","deaa316d":"## Logistic Regression\n","fd91ebce":"### *Bi-Variate Analysis*","1a252592":"### Logit Regression","826ae1fd":" __To determine whether there is a statistically significance of Various Fetaures we use Chi-Square Test__","38c6d8f3":"#### Weekend","f7e08a4e":"### Navie Bayes","c95f5f23":"len(imp['Imp'])","29ac98ae":"### Naive Bayes","46f49356":"## __Business Insight__\n\n\uf0b7 We suggest to provide discount 3 to 4 days prior to the special day to increase revenue.\n\n\uf0b7 Jan & April require special attention to generate some revenue. Month of Feb has had special days but revenue is very low, hence need to take advantage of that.\n\n\uf0b7 Advertising on other browsers will help to reach new consumers since we do have users using non mainstream browsers.\n\n\uf0b7 Region - We have reach in multiple regions hence an extensive market will help to generate revenue in low generating regions.\n\n\uf0b7 We have to design plans to generate revenue from the new visitors.\n\n\uf0b7 Special offers during weekends has to be promoted since weekend revenue is very low.\n\n\uf0b7 We already have good exit rate during the month of July, June, May and August reducing Bounce rate in that period can result into increased revenue.\n\n\uf0b7 Apart from the regular traffic generator channels special plans needs to be made for other channels also.\n\n\uf0b7 Since lots of pages have low page values, we suggest to make the product search algorithm better so that we can increase pages value.\n","9604d6ad":"### Exploratory Data Analysis\n\n#### Univariate Analysis","2f0d26fe":"# Visitor Type","ebeb581e":"### Traffic Type","69e5fd79":"### Random Forest","1ceec92d":"## __CONCLUSION__\nSMOTE has improved our accuracy as the dataset was unbalanced dataset.\n\nDataset with outliers (without treating outliers) gave us better results.\n\nTransformation did not improve model performance significantly\n\nSo, our final model is the Random Forest employed on top of SMOTE, with outliers and without transformations.","bcf5bc00":"### Special Day","74eb34ec":"__Checking for insights from 5 five summery__","791197f8":"Majority of the users don't spend much time on the Administrative pages which might a sign of a good website design.","610450f6":"### Without SMOTE","fd61219d":"### Plotting ROC Curve for Different Models","9f5e5b1b":"__Administrative Duration vs revenue__","5eb3731c":"### Random Forest","96ccb595":"## Problem Statement:\n\nPeople often spend a lot of time browsing through online shopping websites, but the coversion rate into purchases is low. Determine the likelihood of purchase based on the given features in the datsaset. The dataset consists of feature vectors belonging to 12,330 online sessions. The purpose of this project is to identify user behaviour patterns to effectively understand features that influence the sales.\n\n *    Dataset: https:\/\/archive.ics.uci.edu\/ml\/datasets\/Online+Shoppers+Purchasing+Intention+Dataset\n\n\n__Data Description:__\n\nThe dataset cointains the following features:\n\nThe data set provided had features which are more or less related to the purchases of the users. All features are mentioned below with explanations.\n\nThe data set provided for model making has a total entry of \"12330\" with \"18\" features. Among these features 9 features are numerical, continuous and distinct, and 9 are categorical including the target feature Revenue. \n\nThe categorical features are Special Day, Month, Operating Systems, Browser, Region, Traffic Type, Visitor Type, Weekend. The numerical features are Administrative, Administrative Duration, Informational, Information Duration, Product Related, Product Relation duration, Bounce rates, Exit rates, Page Values.\n\n__Administrative:__ Number of pages visited by the user for user account management related activities.\n\n__Administrative Duration:__ Time spent on Admin pages by the user.\n\n__Informational:__ Number of pages visited by the user about the website\n\n___Informational Duration:__ Time spent on Informational pages by the user\n\n___Product Related:__ Number of product related pages visited by the user\n\n__Product Related Duration:__ Time spent on Product related pages by the user. \n\n__Bounce Rates:__ Average bounce rate of the pages visited by the user. It represents the percentage of visitors who enter the site and then leave rather than continuing to view other pages within the same site. \n\n__Exit Rates:__ Average exit rate of the pages visited by the user. It is the percentage of people who left your site from that page. \n\n__Page Values:__ Average page value of the pages visited by the user. It is the average value for a page that a user visited before landing on the goal page or completing an Ecommerce transaction (or both).\n\n__Special Day:__ Closeness of the visiting day to a special event like Mother\u201fs Day or festivals like Christmas.\n\n__Month:__ Visiting month during the whole year.\n\n__Operating Systems:__ Operating Systems of the visitor.\n\n__Browser:__ Browser of the visitor.\n\n__Region:__ Geographic region from which the session has been started by the visitor.\n\n__Traffic Type:__ Traffic source through which user has entered the website.\n\n__Visitor Type:__ Defines the nature of user.\n\n__Weekend:__ Defines the timing of the user.\n"}}