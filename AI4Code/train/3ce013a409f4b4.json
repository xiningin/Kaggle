{"cell_type":{"f2066afc":"code","6abb441e":"code","896111a7":"code","79f9951e":"code","c800d7ae":"code","a15111d4":"code","7d55c966":"code","1cfbbfb7":"code","782a00c0":"code","a683e828":"code","c00c491e":"code","00bd0b58":"code","275db2e0":"code","5e49df64":"markdown","d7f58845":"markdown","6c220c32":"markdown","c44cb8ca":"markdown","b51485d5":"markdown","687b3b0e":"markdown","a229e88a":"markdown","aa87d4d1":"markdown","cc8a5b10":"markdown","f615b90d":"markdown","52bd0a22":"markdown"},"source":{"f2066afc":"# lets install yahoo finance for getting our data\n# -q is argument for quiet installation\n! pip install -q yfinance","6abb441e":"# Now lets import all the required libraries\nimport yfinance as yf\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport os\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport seaborn as sb\nimport plotly\nfrom plotly.offline import plot, iplot, download_plotlyjs, init_notebook_mode\ninit_notebook_mode(connected=True)","896111a7":"# let fetch and Visualize data\n# To get data just follow these steps\ntkrObj = yf.Ticker('RALLIS.NS')\n\n# Downloading historical data (10 year data)\n# the returned obj is a pandas data frame\ndata = tkrObj.history(start = '2010-01-01', end = '2021-01-01')","79f9951e":"data[0:10]","c800d7ae":"plt.figure(figsize = (18, 9))\nsb.lineplot(data = data, x = 'Date', y = 'High')\nplt.grid(True)\nplt.title('Rallis India high\\'s variation form 2010-2021')\nplt.show()","a15111d4":"fig = go.Figure([go.Scatter(x=data.index, y=data['High'])])\nfig.show()","7d55c966":"# doing same for stock volumes\nplt.figure(figsize = (18, 9))\nsb.lineplot(data = data, x = 'Date', y = 'Volume')\nplt.grid(True)\nplt.title('Rallis India stock Volumes variation form 2010-2021')\nplt.show()","1cfbbfb7":"fig = go.Figure([go.Scatter(x=data.index, y=data['Volume'])])\nfig.show()","782a00c0":"from statsmodels.tsa.stattools import adfuller\n\ndef StationarityCheck(TS, doLog = False):\n    \n    # Determing rolling statistics\n    # 365 => 12 months rolling window\n    if doLog:\n        TS['High'] = np.log(TS['High'])\n    \n    rolmean = TS['High'].rolling(365).mean()\n    rolstd = TS['High'].rolling(365).std()\n    \n    fig = go.Figure([go.Scatter(x=TS.index, y=TS['High'], name = 'Rallis Stock High 2010-2021'),\n                     go.Scatter(x=TS.index, y=rolmean, name = '12 month rolling Mean'),\n                     go.Scatter(x=TS.index, y=rolstd, name = '12 month standard deviation')])\n    fig.show()\n    \n    print ('Results of Dickey-Fuller Test:')\n    \n    dftest = adfuller( (TS['High']), autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    \n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    \n    print(dfoutput)\n    \n    ","a683e828":"StationarityCheck(data, doLog = False)","c00c491e":"StationarityCheck(data, doLog = True)\n","00bd0b58":"from statsmodels.tsa.arima.model import ARIMA\nmodel = ARIMA(data['High'], order=(10, 0, 1))  \nresults_ARIMA = model.fit()  \nplt.figure(figsize = (19, 9))\nplt.plot(data['High'].map(lambda a : pow(np.e, a)), label = \"Actual Series\")\n\n# multiplying by 0.9 to avoid overlapping\nplt.plot(0.9*results_ARIMA.fittedvalues.map(lambda a : pow(np.e, a)), color='red' ,label = \"Predicted Series\")\nplt.grid(True)\nplt.legend()\nplt.title('Results: Actual Vs Predicted ( predicted scalled to 0.9)')\nplt.show()","275db2e0":"values = results_ARIMA.forecast(30).map(lambda a : pow(np.e, a))\nplt.figure(figsize = (19, 9))\nplt.plot(values)\nplt.title('next 30 day Predictions for Rallis India')\nplt.grid(True)\nplt.show()","5e49df64":"Since test statistics is greater than the critical values when fail to reject Null hypothesis ie that is not Stationary.  But Since test test statistic is closest to critical values 10 % let us reject the null hypothesis for just this once. Methods of making data stationary willbe dealt with later in this notebook, this will also give us the chance to compare our results, had test statistics been something like 0.88 we would not be doing this.\n\n\nOn a side note a way to make data stationary is by eleminating the trends in data, which can be done using log transformation. see below. Testing this on logarithmic transform we find our hypothesis to be 95 % or it's 95 % certain that our data is stationary. ","d7f58845":"let's add some more interactivity using Plotly. If we observe the graphs carefully we find that the stock increases in the months of March till October then falls (assusing ideal cases, ie not considering what's going in the market at that time)","6c220c32":"# References\n* https:\/\/www.analyticsvidhya.com\/blog\/2016\/02\/time-series-forecasting-codes-python\/\n\nThanks...","c44cb8ca":"# Yahoo Finance\nIf you are quant developer you must be familiar with Yahoo Finance, for those who don't know, yfinance is a python library that helps you get data for your analysis seemlessly.","b51485d5":"let's now plot the daily high's and Volume traded","687b3b0e":"# ForeCasting values for the comming month","a229e88a":"# Dickey Fuller Test for data Stationarity\nFor in deapth explanation Check out the following link:\nhttps:\/\/www.analyticsvidhya.com\/blog\/2015\/12\/complete-tutorial-time-series-modeling\/\n\nThis article explains the above concept beautifully and in more easy words than I could ever do!\nBasically in Dickey Fuller Test the null hypothesis is that the TS is non-stationary. The test results comprise of a Test Statistic and some Critical Values for difference confidence levels. If the \u2018Test Statistic\u2019 is less than the \u2018Critical Value\u2019, we can reject the null hypothesis and say that the series is stationary. Now coding the Dickey Fuller Test.","aa87d4d1":"# Stationarity of Data and It's importance\nCommentary: Note the peaks in Volume traded (spikes noticed in months around Jan, June and July).\n\nProceeding further, Let us talk about **Stationary Data** and it's importantance. A TS is said to be stationary if it's statistical properties remain constant over time. Most TS model assumes data to be stationary because if the series has shown these variations earilier it is bound to repeat it(or lets say it's highly probable!!), in absence of an external Stimuli.\n\nFrom the above graphs we interpret 2 things:\n* There is an overall postive trend in data.\n* Seasonal variations are observed.\n\n\nAlso for TS to be stationary it must suffice the following conditions:\n* The mean of the TS must not vary with time.\n* The varience of the TS must not vary with time. This property is known as homoscedasticity.\n* The covariance of the i th term and the (i + m) th term should not be a function of time.","cc8a5b10":"# Introduction\nTime Series Forecasting(commonly reffered as TS) is one of the most interesting fields in Data Science. I mean who doesn't want to predict the trends in stock market and gain monetary benefits! What makes TS different from normal modelling is techniques(like linear regression etc) is :\n* Data is time dependent so assumptions like target values being independent of one another doesn't hold.\n* The data, along with upward and downward trends, also has seasonal trends, for example the stocks of an agri based company will rise during the planting seasons of the year.\n\nwith the context being said let's begin............","f615b90d":"# The Stock to be Analyzed : Rallis India Limited\nAs mentioned previously we will be using data that is Seasonal in nature, hence I have picked up Rallis India Limited for our case Study. Rallis, a TATA Enterprise is a subsidiary of Tata Chemicals, with its business presence in the Farm Essentials vertical. It is one of India's leading crop care companies. The company's 2,300 distributors reach more than 40,000 retail counters across the country covering more than 80% of India's districts.","52bd0a22":"# ForeCasting Model\n\n* ARIMA (Auto Regressive Integrated Moving Averages):\nARIMA is a linear model very naively it can be explained as below:\nx(t) = x(t-1) + x(t-2) + x(t-3) ...... + x(t-p) + e(t -1) + e(t-2) + ..... + e(t-q)\n\nARIMA takes 3 arguments namely p(Number of AR), q(Number of MA), d (Number of Differences)"}}