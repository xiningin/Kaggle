{"cell_type":{"f3a70e6b":"code","85e7dece":"code","9e6c82eb":"code","5232e112":"code","241bb036":"code","99a3c5ce":"code","44935d80":"code","cde4e91e":"code","99dc80d2":"code","9699c5c4":"code","c7a54566":"code","8324ad3c":"code","bbde0d4c":"code","1d70decd":"code","f4b733a8":"code","2471d0da":"code","02704654":"code","dba76d2d":"code","fec6fc95":"code","79f1b776":"code","af7d3639":"code","a8e7c22d":"code","fb4f83e1":"code","658f5b73":"code","982503bc":"code","14a9c4df":"code","4385a76c":"code","29c7192f":"code","2d7b919d":"code","c81a2d2b":"code","65f8c353":"code","1318df94":"code","8d65b89e":"code","058df334":"code","1d4a62c5":"code","52b5170a":"code","cf33b30c":"code","54aa11ae":"code","a1003855":"code","195ba529":"code","497e8e39":"code","5b0d5ba4":"code","99447249":"code","5a330ded":"code","52296998":"code","120957a7":"code","309aee44":"code","33740515":"code","f5640e87":"code","918000d2":"code","d5dd9fcb":"code","f58c17a7":"code","e78007e3":"code","e222068b":"code","40ba49bf":"code","de4f4102":"code","4b5cae91":"code","a5b500da":"code","6fd0b806":"code","a1a9070e":"code","0e3e6ef9":"code","c06aa865":"code","a58b84d5":"code","9fb15991":"code","218e2b8e":"code","a8b822f3":"code","d1f5686c":"code","98f4b09f":"code","f8fd502b":"code","07544b31":"code","4947a290":"code","993fb8af":"code","d195ab03":"code","31f6a56c":"code","e40e2c1b":"code","5bc54f9a":"code","dea4c260":"code","9ab653e1":"code","8523cb18":"code","b6896c78":"code","4c059ada":"code","025c2cbd":"code","20c0ffff":"code","6e5d7ffe":"code","0fb83a91":"code","c4fd36c7":"code","413abd88":"code","d0c4df22":"code","e633986b":"code","2ed38709":"code","49367568":"code","c0ee913e":"code","35e6ab79":"code","0ffe00cb":"code","b48d63fc":"code","259f7935":"code","02506688":"code","dcffebb3":"code","bfed6d58":"code","fb307af2":"code","8a60ec1f":"code","cbf8468d":"code","a0435421":"code","03c16bc2":"code","9a7f3ac3":"code","f8b4ac78":"code","9352fdfb":"code","37e513d9":"code","0412e789":"code","2c543d53":"code","6e91d678":"code","6df375a9":"code","d2b9283d":"code","3d89746d":"code","8ee1562d":"code","89b222ed":"code","12cac5cb":"code","83021f46":"code","6fae83e2":"code","20dc985e":"code","e8d5f4f6":"code","c4a89dc9":"code","6adecd57":"code","40b9bf5a":"code","944a049a":"code","ff508cd7":"code","108860d6":"code","f8f4f66e":"code","1219b868":"code","310dc25a":"code","292546a2":"code","686c7402":"code","4293e186":"code","3cb70aff":"code","4ab5dffc":"code","e01e6dd6":"code","071cce01":"code","60cafc40":"code","5417c63d":"code","138a6a82":"code","3c158467":"code","15d940c1":"code","cb843d92":"code","72ff0b70":"code","24dc8201":"code","21e38a75":"code","2e3f8bc4":"code","e2d8a451":"code","b8964841":"code","af75d018":"code","463971cb":"code","30ffa5db":"code","e0263565":"code","b9b852db":"code","a7bffa99":"code","a173ea52":"code","44fddf0c":"code","d52bcf28":"code","362adb3c":"code","79b619d1":"code","b0e39d7a":"code","c7c124de":"code","de733e04":"code","4e79741d":"code","0f7f86dd":"code","ac73f749":"code","25b3d514":"code","0945a62c":"code","940c91f1":"code","1189203c":"code","dcf31bc7":"code","e0e612be":"code","ab30f5cd":"code","0989d144":"code","0c6c8f80":"code","655d5d5a":"code","e3a8a213":"code","eee58c35":"code","2e5c435e":"code","207eb352":"code","1dd75ce9":"code","00a04990":"code","d0ccb2d0":"code","031917bf":"code","21095bf3":"code","f8372a34":"code","cb8ea917":"code","98e855d8":"code","2131235a":"code","0dea8008":"code","9e6aac03":"code","d9a5851f":"code","395b1b8c":"code","8aebe40a":"code","68fd4953":"code","c5af70de":"code","8b17ec27":"code","2c704dbb":"code","007d93a6":"code","91693112":"code","82185564":"code","d34be1e7":"code","0a12a9fa":"code","5dedcfdc":"code","0b249a4c":"markdown","c6ed5545":"markdown","abc6f262":"markdown","3b58b65f":"markdown","a02fa06f":"markdown","df51a41f":"markdown","53fdc159":"markdown","f3170b3a":"markdown","5021c1a5":"markdown","a0ba98f1":"markdown","afe6d5a6":"markdown","17162b94":"markdown","e84da9e8":"markdown","bd4c1b45":"markdown","040f85f0":"markdown","3899f559":"markdown","fd7d77be":"markdown","5d34b605":"markdown","1c532de3":"markdown","c6b013fb":"markdown","d34b0e3d":"markdown","083219ee":"markdown","4bfb4f10":"markdown","d0f0cd78":"markdown","8445631d":"markdown","e9c5c53e":"markdown","bf04c75e":"markdown","f48ffdde":"markdown","75c2c28a":"markdown","b5813ecd":"markdown","f4672acd":"markdown","09f6149b":"markdown","1c20c2be":"markdown","2a800cbe":"markdown","bc2a5343":"markdown","55857375":"markdown","20f73929":"markdown","a8a3d8e0":"markdown","64bf8935":"markdown","4cab2351":"markdown","b3bc92c4":"markdown","8a187827":"markdown","3e0e8c3b":"markdown","248567a0":"markdown","095ff7a5":"markdown","60b9107f":"markdown","af02ceab":"markdown"},"source":{"f3a70e6b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","85e7dece":"df = pd.read_csv('\/kaggle\/input\/sanction-loan\/train.csv')","9e6c82eb":"df.head()","5232e112":"df.info()","241bb036":"df.describe()","99a3c5ce":"df.isnull().sum()*100\/len(df)","44935d80":"# Number of distinct values in variables\nfor i, column in enumerate(df.columns):\n    print(\"{}. \".format(i) + str(column.title()) + \": {}\". format(df[column].nunique()))","cde4e91e":"df = df[~(df[\"Loan Sanction Amount (USD)\"].isnull()==True)]","99dc80d2":"df = df.reset_index(drop=True)","9699c5c4":"# We will drop the unique and identity columns \ndf = df.drop(['Customer ID', 'Name'], axis = 1)","c7a54566":"var_target = ['Loan Sanction Amount (USD)']","8324ad3c":"var_categorical = ['Gender', 'Income Stability', 'Profession', 'Type of Employment', 'Location',\n                  'Expense Type 1', 'Expense Type 2', 'Dependents', 'No. of Defaults', 'Has Active Credit Card',\n                  'Property Type', 'Property Location', 'Co-Applicant']\nvar_numerical = list(set(df.columns) - set(var_categorical) - set(var_target))","bbde0d4c":"# Function to label the count on top of each bar in graph\ndef label_values(ax, spacing=5):\n    total = 0\n    for rect in ax.patches:\n        total += rect.get_height()\n\n    for rect in ax.patches:\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() \/ 2\n\n        space = spacing\n        \n        va = 'bottom'\n        \n        if y_value < 0:\n            space *= -1\n            va = 'top'\n        label = \"{:.2f}, {:.2f}\".format(y_value, y_value\/total*100)\n        ax.annotate(\n            label,                      \n            (x_value, y_value),         \n            xytext=(0, space),          \n            textcoords=\"offset points\", \n            ha='center',                \n            va=va)                      ","1d70decd":"sns.boxplot(x = df[\"Loan Sanction Amount (USD)\"])\nplt.show()","f4b733a8":"len(df[df[\"Loan Sanction Amount (USD)\"] == 0])","2471d0da":"# Box plot to see the values of loan sactioned without 0 USD\ntarget_variable_without_zero = df[~(df[\"Loan Sanction Amount (USD)\"] == 0)][\"Loan Sanction Amount (USD)\"]\nsns.boxplot(x = target_variable_without_zero)\nplt.show()","02704654":"for column in var_categorical:\n    plt.figure(figsize=(15, 6))\n    print(column.title())\n    ax = sns.countplot(x = df[column])\n    label_values(ax)\n    plt.show()","dba76d2d":"df[\"Type of Employment\"].value_counts()","fec6fc95":"for column in var_categorical:\n    plt.figure(figsize=(15, 6))\n    print(column.title())\n    ax = sns.boxplot(x = df[column], y = df[\"Loan Sanction Amount (USD)\"])\n    label_values(ax)\n    plt.show()","79f1b776":"for column in var_categorical:\n    plt.figure(figsize=(15, 6))\n    print(column.title())\n    ax = sns.boxplot(x = df[column], y = target_variable_without_zero)\n    label_values(ax)\n    plt.show()","af7d3639":"i = 1\nfor column in var_numerical:\n    print(column.title())\n    plt.subplots(figsize=(16, 35))\n    plt.subplot(len(var_numerical) + 1, 4, i)\n    sns.boxplot(y = df[column])\n    i += 1\n    plt.subplot(len(var_numerical) + 1, 4, i)\n    sns.distplot(x = df[column])\n    i += 1\n    plt.subplot(len(var_numerical) + 1, 4, i)\n    sns.scatterplot(y = df[\"Loan Sanction Amount (USD)\"], x = df[column])\n    i += 1\n    plt.subplot(len(var_numerical) + 1, 4, i)\n    sns.scatterplot(y = target_variable_without_zero, x = df[column])\n    i += 1\n    plt.show()","a8e7c22d":"# Pairplot between all the variables\nsns.pairplot(df[var_numerical + var_target])\nplt.show()","fb4f83e1":"# Heatmap linear correlation between numerical variables\nplt.figure(figsize=(10, 10))\nsns.heatmap(df[var_numerical+var_target].corr(), annot=True)\nplt.show()","658f5b73":"df = df.drop([\"Property Age\"], axis = 1)","982503bc":"var_numerical = list( set(var_numerical) - set(['Property Age']))","14a9c4df":"loan_to_be_requested = []\nfor i in range(len(df)):\n    value = min(df[\"Loan Amount Request (USD)\"][i], 0.80*df[\"Property Price\"][i])\n    loan_to_be_requested.append(value)","4385a76c":"df[\"Loan_To_Be_Requested\"] = loan_to_be_requested","29c7192f":"len(df[df[\"Loan_To_Be_Requested\"] <0])","2d7b919d":"len(df[df[\"Property Price\"] <0])","c81a2d2b":"len(df[df[\"Loan Amount Request (USD)\"]<0])","65f8c353":"df[df[\"Loan_To_Be_Requested\"]==0][\"Loan Sanction Amount (USD)\"].head()","1318df94":"len(df[df[\"Current Loan Expenses (USD)\"]<0])","8d65b89e":"df = df[df[\"Property Price\"] >=0]","058df334":"df = df[df[\"Current Loan Expenses (USD)\"]>=0]","1d4a62c5":"df = df.reset_index(drop=True)","52b5170a":"i = 1\nfor column in [\"Loan_To_Be_Requested\", \"Current Loan Expenses (USD)\"]:\n    print(column.title())\n    plt.subplots(figsize=(16, 35))\n    plt.subplot(len(var_numerical) + 1, 4, i)\n    sns.boxplot(y = df[column])\n    i += 1\n    plt.subplot(len(var_numerical) + 1, 4, i)\n    sns.distplot(x = df[column])\n    i += 1\n    plt.subplot(len(var_numerical) + 1, 4, i)\n    sns.scatterplot(y = df[\"Loan Sanction Amount (USD)\"], x = df[column])\n    i += 1\n    plt.subplot(len(var_numerical) + 1, 4, i)\n    sns.scatterplot(y = target_variable_without_zero, x = df[column])\n    i += 1\n    plt.show()","cf33b30c":"df = df.drop([\"Loan Amount Request (USD)\", \"Property Price\"], axis = 1)","54aa11ae":"var_numerical = list(set(var_numerical) - set([\"Loan Amount Request (USD)\", \"Property Price\"]))","a1003855":"var_numerical = var_numerical + [\"Loan_To_Be_Requested\"]","195ba529":"column = \"Loan_To_Be_Requested\"\ni = 1\nplt.subplots(figsize=(16, 35))\nplt.subplot(len(var_numerical) + 1, 4, i)\nsns.boxplot(y = df[column])\ni += 1\nplt.subplot(len(var_numerical) + 1, 4, i)\nsns.distplot(x = df[column])\ni += 1\nplt.subplot(len(var_numerical) + 1, 4, i)\nsns.scatterplot(y = df[\"Loan Sanction Amount (USD)\"], x = df[column])\ni += 1\nplt.subplot(len(var_numerical) + 1, 4, i)\nsns.scatterplot(x = target_variable_without_zero, y = df[column])\ni += 1\nplt.show()","497e8e39":"df[\"Income (USD)\"].sort_values(ascending=False)","5b0d5ba4":"df[df[\"Income (USD)\"] > 40000]","99447249":"sns.boxplot(df[df[\"Income (USD)\"] < 40000][\"Income (USD)\"])\nplt.show()","5a330ded":"plt.figure(figsize=(16, 16))\nsns.boxplot(x=df[\"Type of Employment\"], y = df[df[\"Income (USD)\"] < 40000][\"Income (USD)\"])\nplt.show()","52296998":"index0 = df[df[\"Income (USD)\"] > 100000].index[0]\nindex1 = df[df[\"Income (USD)\"] > 100000].index[1]","120957a7":"df[\"Income (USD)\"][index0] = df[df[\"Type of Employment\"] == df[\"Type of Employment\"][index0]][\"Income (USD)\"].median()\ndf[\"Income (USD)\"][index1] = df[df[\"Type of Employment\"] == df[\"Type of Employment\"][index1]][\"Income (USD)\"].median()","309aee44":"sns.boxplot(df[\"Income (USD)\"])\nplt.show()","33740515":"missing_df = pd.DataFrame({\n    \"Columns\": df.columns[df.isnull().sum()>0],\n    \"Values\": df[df.columns[df.isnull().sum()>0]].isnull().sum()\/len(df)*100\n})\nmissing_df = missing_df.reset_index(drop=True)\nmissing_df","f5640e87":"df[\"Type of Employment\"] = df[\"Type of Employment\"].fillna(\"Other\")","918000d2":"df[\"Type of Employment\"].value_counts()","d5dd9fcb":"df[\"Dependents\"] = df[\"Dependents\"].fillna(df[\"Dependents\"].mode().values[0])","f58c17a7":"df[\"Dependents\"].value_counts()","e78007e3":"df[\"Gender\"].mode().values[0]","e222068b":"df[\"Gender\"] = df[\"Gender\"].fillna(df[\"Gender\"].mode().values[0])","40ba49bf":"df[\"Income (USD)\"] = df.groupby(by=[\"Type of Employment\"])[\"Income (USD)\"].transform(lambda x: x.fillna(x.median()))","de4f4102":"df[\"Income Stability\"] = df[\"Income Stability\"].fillna(df[\"Income Stability\"].mode().values[0])","4b5cae91":"sns.boxplot(x = df[\"Current Loan Expenses (USD)\"])","a5b500da":"len(df[df[\"Current Loan Expenses (USD)\"]== -999][\"Current Loan Expenses (USD)\"])","6fd0b806":"for i in range(len(df)):\n    if df[\"Current Loan Expenses (USD)\"][i] == -999:\n        df[\"Current Loan Expenses (USD)\"][i] = np.nan","a1a9070e":"df[\"Current Loan Expenses (USD)\"] = df[\"Current Loan Expenses (USD)\"].fillna(df[\"Current Loan Expenses (USD)\"].median())","0e3e6ef9":"sns.distplot(x = df[\"Credit Score\"])\nplt.show()","c06aa865":"df[\"Credit Score\"] = df[\"Credit Score\"].fillna(df[\"Credit Score\"].mean())","a58b84d5":"df[\"Has Active Credit Card\"].value_counts()","9fb15991":"df[\"Has Active Credit Card\"] = df[\"Has Active Credit Card\"].fillna(df[\"Has Active Credit Card\"].mode().values[0])","218e2b8e":"df[\"Property Location\"].value_counts()","a8b822f3":"df[\"Property Location\"] = df[\"Property Location\"].fillna(df[\"Property Location\"].mode().values[0])","d1f5686c":"df[\"Co-Applicant\"].value_counts()","98f4b09f":"for i in range(len(df)):\n    if df[\"Co-Applicant\"][i] == -999:\n        df[\"Co-Applicant\"][i] = 1","f8fd502b":"df.isnull().sum()\/len(df)*100","07544b31":"len(df)","4947a290":"df[var_categorical].nunique()","993fb8af":"def top_labels(df, col, max_col):\n    top = list(df[col].value_counts().sort_values(ascending=False).head(max_col).index)\n    print(\"Top Labels: \", top)\n    for categories in top:\n        df[col+ \"_\" +str(categories)]=np.where(df[col]==categories,1,0)\n        print(col + \"_\" + str(categories))\n    return top","d195ab03":"df[\"Type of Employment\"].value_counts()","31f6a56c":"top_labels_emp = top_labels(df, 'Type of Employment', 12)\ndf = df.drop(['Type of Employment'], axis = 1)","e40e2c1b":"df[\"Dependents\"].value_counts()","5bc54f9a":"top_labels_dep = top_labels(df, 'Dependents', 8)\ndf = df.drop(['Dependents'], axis = 1)","dea4c260":"df[\"Profession\"].value_counts()","9ab653e1":"top_labels_prof = top_labels(df, 'Profession', 4)\ndf = df.drop(['Profession'], axis = 1)","8523cb18":"var_categorical = list(set(var_categorical) - set(['Type of Employment', 'Dependents', 'Profession']))","b6896c78":"# Make dummy variables for the nominal columns\ndf = pd.get_dummies(df, columns=var_categorical, drop_first=True)","4c059ada":"df.head()","025c2cbd":"from sklearn.model_selection import train_test_split","20c0ffff":"df_regression = df[df[\"Loan Sanction Amount (USD)\"]>0]","6e5d7ffe":"# We will divide the training and testing set in 70% and 30% respectively\n# We used random_state = 100 so that everytime we run it we will have same set of training and testing set\ndf_train, df_test = train_test_split(df, train_size = 0.7, random_state = 100)","0fb83a91":"print(\"Train Dataset: \"+ str(len(df_train)) + \" Test Dataset: \" + str(len(df_test)))","c4fd36c7":"# Divide the train data into X and y\n\ny_train = df_train.pop('Loan Sanction Amount (USD)')\nX_train = df_train","413abd88":"# Divide the test data into X and y\n\ny_test = df_test.pop('Loan Sanction Amount (USD)')\nX_test = df_test","d0c4df22":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","e633986b":"min_max_scaler = ['Age', 'Current Loan Expenses (USD)']\nrobust_scaler = ['Loan_To_Be_Requested','Income (USD)']\nstandard_scaler = ['Property ID', 'Credit Score']","2ed38709":"# Feature scaling\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler, StandardScaler","49367568":"minMaxScaler = MinMaxScaler()\nrobustScaler = RobustScaler()\nstandardScaler = StandardScaler()","c0ee913e":"X_train[min_max_scaler] = minMaxScaler.fit_transform(X_train[min_max_scaler])\nX_test[min_max_scaler] = minMaxScaler.transform(X_test[min_max_scaler])","35e6ab79":"X_train[robust_scaler] = robustScaler.fit_transform(X_train[robust_scaler])\nX_test[robust_scaler] = robustScaler.transform(X_test[robust_scaler])","0ffe00cb":"X_train[standard_scaler] = standardScaler.fit_transform(X_train[standard_scaler])\nX_test[standard_scaler] = standardScaler.transform(X_test[standard_scaler])","b48d63fc":"X_train.head()","259f7935":"y_train_c = y_train.apply(lambda x: 1 if x>0 else 0)\ny_test_c = y_test.apply(lambda x: 1 if x>0 else 0)","02506688":"y_train_c.value_counts()*100\/len(y_train_c)","dcffebb3":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, roc_auc_score, roc_curve, confusion_matrix","bfed6d58":"from sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso","fb307af2":"# Model evaluation function\nfrom sklearn.metrics import r2_score, mean_absolute_error\nfrom sklearn.model_selection import cross_val_score\n# Grid Search CV for hyperparameter tuning\nfrom sklearn.model_selection import GridSearchCV\n# K Fold cross validation\nfrom sklearn.model_selection import KFold","8a60ec1f":"# Draw ROC curve from training and test data probability\ndef draw_roc( train_actual, train_probs, test_actual, test_probs ):\n    train_fpr, train_tpr, train_thresholds = roc_curve( train_actual, train_probs,\n                                              drop_intermediate = False )\n    test_fpr, test_tpr, test_thresholds = roc_curve( test_actual, test_probs,\n                                              drop_intermediate = False )\n    train_auc_score = roc_auc_score( train_actual, train_probs )\n    test_auc_score = roc_auc_score( test_actual, test_probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( train_fpr, train_tpr, label='ROC curve (area = %0.2f)' % train_auc_score )\n    plt.plot( test_fpr, test_tpr, label='ROC curve (area = %0.2f)' % test_auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None","cbf8468d":"logisticRegression = LogisticRegression()","a0435421":"logisticRegression.fit(X_train, y_train_c)","03c16bc2":"y_pred_train_c = logisticRegression.predict(X_train)","9a7f3ac3":"y_pred_test_c = logisticRegression.predict(X_test)","f8b4ac78":"print(\"Accuracy train: \", accuracy_score(y_train_c, y_pred_train_c))\nprint(\"Accuracy test: \", accuracy_score(y_test_c, y_pred_test_c))","9352fdfb":"print(\"ROC AUC train: \", roc_auc_score(y_train_c, y_pred_train_c))\nprint(\"ROC AUC test: \", roc_auc_score(y_test_c, y_pred_test_c))","37e513d9":"draw_roc(y_train_c, logisticRegression.predict_proba(X_train)[:, 1], y_test_c, logisticRegression.predict_proba(X_test)[:, 1])","0412e789":"from sklearn.ensemble import RandomForestClassifier","2c543d53":"# Create the param grid for random forest\nparam_grid_rf = [{\n               'max_depth': [5, 6, 7, 8, 9],\n               'max_features': [10, 15, 20, 25, 30]}]\nprint(param_grid_rf)","6e91d678":"rf_model = RandomForestClassifier()","6df375a9":"folds = KFold(n_splits = 5, shuffle = True, random_state=100)","d2b9283d":"grid_rf = GridSearchCV(estimator = rf_model, scoring='roc_auc', param_grid = param_grid_rf, cv = folds, \n                           verbose=0, return_train_score=True, n_jobs=3)\ngrid_rf.fit(X_train, y_train_c)","3d89746d":"grid_rf.best_params_","8ee1562d":"cv_results = pd.DataFrame(grid_rf.cv_results_)\ncv_results[[\"param_max_depth\",\"param_max_features\",\"mean_train_score\",\"mean_test_score\"]]","89b222ed":"rf_model = RandomForestClassifier(max_depth = grid_rf.best_params_[\"max_depth\"], \n                                  max_features= grid_rf.best_params_[\"max_features\"])","12cac5cb":"rf_model.fit(X_train, y_train_c)","83021f46":"y_train_pred_rf_c = rf_model.predict(X_train)\ny_test_pred_rf_c = rf_model.predict(X_test)","6fae83e2":"print(\"Accuracy train: \", accuracy_score(y_train_c, y_train_pred_rf_c))\nprint(\"Accuracy test: \", accuracy_score(y_test_c, y_test_pred_rf_c))","20dc985e":"print(\"ROC AUC train: \", roc_auc_score(y_train_c, y_train_pred_rf_c))\nprint(\"ROC AUC test: \", roc_auc_score(y_test_c, y_test_pred_rf_c))","e8d5f4f6":"act_prob_pred = pd.DataFrame({\n    \"Actual\": y_train_c,\n    \"Prediction Prob 1\" : rf_model.predict_proba(X_train)[:,1],\n    \"Prediction Prob 2\" : rf_model.predict_proba(X_train)[:,0],\n    \"Prediction\": y_train_pred_rf_c\n    })","c4a89dc9":"act_prob_pred[act_prob_pred[\"Actual\"]!=act_prob_pred[\"Prediction\"]].to_csv(\"looks_at_threshold.csv\")","6adecd57":"draw_roc(y_train_c, rf_model.predict_proba(X_train)[:, 1], y_test_c, rf_model.predict_proba(X_test)[:, 1])","40b9bf5a":"print(\"Confusion Matrix train: \\n\", confusion_matrix(y_train_c, y_train_pred_rf_c))\nprint(\"Confusion Matrix test: \\n\", confusion_matrix(y_test_c, y_test_pred_rf_c))","944a049a":"import statsmodels.api as sm","ff508cd7":"X_train_const = sm.add_constant(X_train)","108860d6":"lm = sm.OLS(y_train, X_train_const).fit()  ","f8f4f66e":"lm.summary()","1219b868":"# Importing RFE and LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LinearRegression\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","310dc25a":"# Running RFE with the output number of the variable equal to 10\nlr = LinearRegression()\nlr.fit(X_train, y_train)\n\n# running RFE \n# For the first model we are taking half features\nrfe = RFE(lr, 10)             \nrfe = rfe.fit(X_train, y_train)","292546a2":"# Columns with RFE Support as True\ncol = X_train.columns[rfe.support_]\nlen(col), col","686c7402":"# Creating X_train_rfe dataframe with RFE selected variables\n\nX_train_rfe = X_train[col]","4293e186":"# Adding a constant to X_train_rfe as statsmodel does not include it. We have to explicitly define it.\n\nX_train_rfe_const = sm.add_constant(X_train_rfe)","3cb70aff":"# Running the linear model\n\nlm1 = sm.OLS(y_train, X_train_rfe_const).fit()   ","4ab5dffc":"lm1.summary()","e01e6dd6":"# Calculate the VIFs for the new model\nvif = pd.DataFrame()\n\nX = X_train_rfe\nvif['Features'] = X.columns\nvif['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","071cce01":"# Initialisation of ridge linear regression model\nridge_lr = Ridge(random_state = 42)","60cafc40":"# Create the param grid for logistic regression\nparam_ridge_lr = {\n    'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n     0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n     4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100, 500, 1000 ]\n}\nprint(param_ridge_lr)","5417c63d":"folds = KFold(n_splits = 5, shuffle = True, random_state=100)","138a6a82":"grid_ridge = GridSearchCV(estimator = ridge_lr, scoring= 'r2', param_grid = param_ridge_lr, cv = folds, \n                           verbose=0, return_train_score=True, n_jobs=3)\ngrid_ridge.fit(X_train, y_train)","3c158467":"int(grid_ridge.best_estimator_.alpha)","15d940c1":"pd.DataFrame(grid_ridge.cv_results_)[['param_alpha', 'mean_test_score', 'mean_train_score']]","cb843d92":"#Fitting ridge model and printing coefficients which have been penalised\nalpha = int(grid_ridge.best_estimator_.alpha)\nridge = Ridge(alpha=alpha)","72ff0b70":"ridge = ridge.fit(X_train, y_train)\nridge","24dc8201":"y_pred_train = ridge.predict(X_train)\ny_pred_test = ridge.predict(X_test)\n\nmetric2 = []\nr2_train_lr = r2_score(y_train, y_pred_train)\nprint(\"R2 Train Score: \", r2_train_lr)\nmetric2.append(r2_train_lr)\n\nr2_test_lr = r2_score(y_test, y_pred_test)\nprint(\"R2 Test Score: \", r2_train_lr)\nmetric2.append(r2_test_lr)","21e38a75":"sns.scatterplot(x = y_train, y=y_pred_train)\nplt.show()","2e3f8bc4":"# Initialise the lasso model\nlasso_lr = Lasso(random_state = 42)","e2d8a451":"# Create the param grid for logistic regression\nparam_lasso_lr = {\n    'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100, 500, 1000 ]\n}\nprint(param_lasso_lr)","b8964841":"grid_lasso = GridSearchCV(estimator = lasso_lr, scoring= 'r2', param_grid = param_lasso_lr, cv = folds, \n                           verbose=0, return_train_score=True, n_jobs=3)\ngrid_lasso.fit(X_train, y_train)","af75d018":"int(grid_lasso.best_estimator_.alpha)","463971cb":"pd.DataFrame(grid_lasso.cv_results_)[['param_alpha', 'mean_test_score', 'mean_train_score']]","30ffa5db":"#Fitting lasso model and printing coefficients which have been penalised\nalpha = int(grid_lasso.best_estimator_.alpha)\nlasso = Lasso(alpha=alpha)\n\nlasso = lasso.fit(X_train, y_train)\nlasso","e0263565":"y_pred_train = lasso.predict(X_train)\ny_pred_test = lasso.predict(X_test)\n\nmetric3 = []\nr2_train_lr = r2_score(y_train, y_pred_train)\nprint(\"R2 Train Score: \", r2_train_lr)\nmetric3.append(r2_train_lr)\n\nr2_test_lr = r2_score(y_test, y_pred_test)\nprint(\"R2 Test Score: \", r2_train_lr)\nmetric3.append(r2_test_lr)","b9b852db":"sns.scatterplot(x = y_train, y=y_pred_train)\nplt.show()","a7bffa99":"betas = pd.DataFrame(index=df_train.columns)\nbetas.rows = df_train.columns","a173ea52":"betas['Ridge'] = ridge.coef_\nbetas['Lasso'] = lasso.coef_\nbetas['Linear Regression'] = lm.params\nbetas['Linear Regression with RFE'] = lm1.params","44fddf0c":"pd.set_option('display.max_rows', None)\nbetas","d52bcf28":"df_test = pd.read_csv('\/kaggle\/input\/sanction-loan\/test.csv')","362adb3c":"df_test.head()","79b619d1":"df_test.info()","b0e39d7a":"df_test.replace('?', np.NaN, inplace=True)","c7c124de":"df_test.isnull().sum()","de733e04":"for column in var_categorical:\n    plt.figure(figsize=(15, 6))\n    print(column.title())\n    ax = sns.countplot(x = df_test[column])\n    label_values(ax)\n    plt.show()","4e79741d":"loan_to_be_requested_test = []\nfor i in range(len(df_test)):\n#     print(df_test[\"Loan Amount Request (USD)\"][i], df_test[\"Property Price\"][i])\n    if df_test[\"Property Price\"][i] == np.nan:\n        value = df_test[\"Loan Amount Request (USD)\"][i]\n    else:\n        value = min(df_test[\"Loan Amount Request (USD)\"][i], 0.80*float(df_test[\"Property Price\"][i]))\n    loan_to_be_requested_test.append(value)","0f7f86dd":"df_test = df_test.drop(['Loan Amount Request (USD)', 'Property Price', 'Property Age'], axis = 1)","ac73f749":"df_test[\"Loan_To_Be_Requested\"] = loan_to_be_requested_test","25b3d514":"i = 1\nfor column in var_numerical:\n    print(column.title())\n    plt.subplots(figsize=(16, 35))\n    plt.subplot(len(var_numerical) + 1, 4, i)\n    sns.boxplot(y = df_test[column])\n    i += 1\n    plt.subplot(len(var_numerical) + 1, 4, i)\n    sns.distplot(x = df_test[column])\n    i += 1\n    plt.show()","0945a62c":"df_test[\"Type of Employment\"] = df_test[\"Type of Employment\"].fillna(\"Other\")","940c91f1":"df_test[\"Dependents\"] = df_test[\"Dependents\"].fillna(0)","1189203c":"df_test[\"Gender\"] = df_test[\"Gender\"].fillna(df_test[\"Gender\"].mode().values[0])","dcf31bc7":"df_test[\"Income (USD)\"] = df_test[\"Income (USD)\"].fillna(df_test[\"Income (USD)\"].median())","e0e612be":"df_test[\"Income Stability\"] = df_test[\"Income Stability\"].fillna(df_test[\"Income Stability\"].mode().values[0])","ab30f5cd":"df_test[\"Current Loan Expenses (USD)\"] = df_test[\"Current Loan Expenses (USD)\"].fillna(df_test[\"Current Loan Expenses (USD)\"].median())","0989d144":"df_test[\"Credit Score\"] = df_test[\"Credit Score\"].fillna(df_test[\"Credit Score\"].mean())","0c6c8f80":"df_test[\"Has Active Credit Card\"] = df_test[\"Has Active Credit Card\"].fillna(df_test[\"Has Active Credit Card\"].mode().values[0])","655d5d5a":"df_test[\"Property Location\"] = df_test[\"Property Location\"].fillna(df_test[\"Property Location\"].mode().values[0])","e3a8a213":"df_test[\"Co-Applicant\"] = df_test[\"Co-Applicant\"].fillna(1)","eee58c35":"def top_labels(df_test, col, max_col, top):\n    print(\"Top Labels: \", top)\n    for categories in top:\n        df_test[col+ \"_\" +str(categories)]=np.where(df_test[col]==categories,1,0)\n        print(col + \"_\" + str(categories))","2e5c435e":"top_labels(df_test, 'Type of Employment', 12, top_labels_emp)\ndf_test = df_test.drop(['Type of Employment'], axis = 1)","207eb352":"top_labels(df_test, 'Dependents', 8, top_labels_dep)\ndf_test = df_test.drop(['Dependents'], axis = 1)","1dd75ce9":"top_labels(df_test, 'Profession', 4, top_labels_prof)\ndf_test = df_test.drop(['Profession'], axis = 1)","00a04990":"# Make dummy variables for the nominal columns\ndf_test = pd.get_dummies(df_test, columns=var_categorical, drop_first=True)","d0ccb2d0":"df_test[min_max_scaler] = minMaxScaler.transform(df_test[min_max_scaler])","031917bf":"df_test[robust_scaler] = robustScaler.transform(df_test[robust_scaler])","21095bf3":"df_test[standard_scaler] = standardScaler.transform(df_test[standard_scaler])","f8372a34":"class_pred = rf_model.predict(df_test[list(X_train.columns)])","cb8ea917":"col = list(col)","98e855d8":"col","2131235a":"X_df_test = df_test[col]","0dea8008":"y_pred_test_sub = lm1.predict(sm.add_constant(X_df_test))","9e6aac03":"df_test[\"Loan Sanction Amount (USD)\"] = y_pred_test_sub","d9a5851f":"df_sub = df_test[[\"Customer ID\", \"Loan Sanction Amount (USD)\"]]","395b1b8c":"df_sub.head()","8aebe40a":"for i in range(len(class_pred)):\n    if class_pred[i] == 0:\n        df_sub[\"Loan Sanction Amount (USD)\"][i] = 0\n    if df_sub[\"Loan Sanction Amount (USD)\"][i] < 0:\n        df_sub[\"Loan Sanction Amount (USD)\"][i] = 0","68fd4953":"df_sub.to_csv(\"submission.csv\", index=False)","c5af70de":"df_sub_lasso = pd.DataFrame({\n    \"Loan Sanction Amount (USD)\": lasso.predict(df_test[list(X_train.columns)]),\n    \"Customer ID\" : df_test[\"Customer ID\"]\n})","8b17ec27":"for i in range(len(class_pred)):\n    if class_pred[i] == 0:\n        df_sub_lasso[\"Loan Sanction Amount (USD)\"][i] = 0\n    if df_sub_lasso[\"Loan Sanction Amount (USD)\"][i] < 0:\n        df_sub_lasso[\"Loan Sanction Amount (USD)\"][i] = 0","2c704dbb":"df_sub_lasso.to_csv(\"submission_lasso.csv\", index=False)","007d93a6":"df_sub_ridge = pd.DataFrame({\n    \"Loan Sanction Amount (USD)\": ridge.predict(df_test[list(X_train.columns)]),\n    \"Customer ID\" : df_test[\"Customer ID\"]\n})","91693112":"for i in range(len(class_pred)):\n    if class_pred[i] == 0:\n        df_sub_ridge[\"Loan Sanction Amount (USD)\"][i] = 0\n    if df_sub_ridge[\"Loan Sanction Amount (USD)\"][i] < 0:\n        df_sub_ridge[\"Loan Sanction Amount (USD)\"][i] = 0","82185564":"df_sub_ridge.to_csv(\"submission_ridge.csv\", index=False)","d34be1e7":"df_sub_without_rfe = pd.DataFrame({\n    \"Loan Sanction Amount (USD)\": lm.predict(sm.add_constant(df_test[list(X_train.columns)])),\n    \"Customer ID\" : df_test[\"Customer ID\"]\n})","0a12a9fa":"for i in range(len(class_pred)):\n    if class_pred[i] == 0:\n        df_sub_without_rfe[\"Loan Sanction Amount (USD)\"][i] = 0\n    if df_sub_without_rfe[\"Loan Sanction Amount (USD)\"][i] < 0:\n        df_sub_without_rfe[\"Loan Sanction Amount (USD)\"][i] = 0","5dedcfdc":"df_sub_without_rfe.to_csv(\"submission_without_rfe.csv\", index=False)","0b249a4c":"Here we can see that current loan has -999 expense which is wrong data.","c6ed5545":"We will drop the row where loan sanction amount is null. As we do not have information about our target variable.","abc6f262":"# Handling Missing Values","3b58b65f":"## Target Analysis","a02fa06f":"There are too many variables with high p-values so we will remove some variables using RFE.","df51a41f":"# 2.3 Ridge Regression","53fdc159":"# Exploratory Data Analysis","f3170b3a":"We can see from heatmap that 'Loan Amount Request (USD)' and 'Property Price' has 0.95 collinearity. <br>\nWe know that the bank only lends up to 80%  of the total amount based on a person's finances (salary, outgoing expenses, existing loans, etc.). <br>\n**So we will create a new column which store the minimum of request amount and 80% of property price.**","5021c1a5":"# Dividing into X and Y sets for the model building","a0ba98f1":"Buying a house requires a lot of careful planning. Once you have finalized your budget and the house that you want to buy, you must ensure that you have sufficient funds to pay the seller.","afe6d5a6":"We will take top 12 columns for Type of Employment.","17162b94":"# 2.2 Features selection using RFE","e84da9e8":"Looking at this confusion matrix we can see that we are prediction that we are going to provide loan but we actually are not. But when we apply regression on top it we are going to get less value so we can proceed with this random forest model.","bd4c1b45":"We will run classification to identify whether the loan saction amount will be zero or not.","040f85f0":"For columns 'Type of Employment' and 'Dependents', we will use one hot encoding for multiclass variables. <br\/>\nBased on the winning solution of KDD 2009 Cup i.e. we are going to limit the number of categories in the these 3 variables to 10 most frequent labels.","3899f559":"# 1.1  Logistic Regression","fd7d77be":"## Task","5d34b605":"We can see that there is linear relationship between some of the columns with the target variable.","1c532de3":"# One hot multiclass encoding","c6b013fb":"We will take top 12 columns for Type of Employment.","d34b0e3d":"## Categorical Variable","083219ee":"For columns 'Type of Employment' and 'Dependents', we will use one hot encoding for multiclass variables. <br\/>\nBased on the winning solution of KDD 2009 Cup i.e. we are going to limit the number of categories in the these 3 variables to 10 most frequent labels.","4bfb4f10":"# Creating Submission File","d0f0cd78":"#### First use classification","8445631d":"#### Building model using statsmodel, for the detailed statistics","e9c5c53e":"For profession column we will take only top 4 columns","bf04c75e":"We will impute mean values in credit score null places","f48ffdde":"# 2.4 Lasso Regression","75c2c28a":"Many values in the Loan Sanction Amount is zero. That means no amount of loan was sactioned to those customers.","b5813ecd":"## Numerical Variables","f4672acd":"## Loading Libraries","09f6149b":"# 2. Linear Regression (statsmodels)","1c20c2be":"By looking at the column value and heatmap, we can say that property age has income values in it.  So we will drop the 'Property Age' column.","2a800cbe":"You work for XYZ bank. Predict the loan amount that can be sanctioned to customers who have applied for a home loan using the features provided in the dataset.","bc2a5343":"# 1.2 Train Random Forest Classifier model with hyperparameter tuning","55857375":"sns.boxplot(x = np.log(df[\"Loan Sanction Amount (USD)\"]))\nplt.show()","20f73929":"# Predict the loan sanction Amount","a8a3d8e0":"# 1. Classification","64bf8935":"We will impute mean values in credit score null places","4cab2351":"With rising property rates, most people avail home loans to buy their dream houses. The bank only lends up to 80%  of the total amount based on a person's finances (salary, outgoing expenses, existing loans, etc.). You will need to make the rest of the payment yourself after the bank tells you how much they can lend.","b3bc92c4":"Here we will take only top 8.","8a187827":"# Split the dataset into train and test","3e0e8c3b":"# Model Building","248567a0":"# Scaling the numerical variables","095ff7a5":"# Loading Dataset","60b9107f":"Here we will take only top 8.","af02ceab":"For profession column we will take only top 4 columns"}}