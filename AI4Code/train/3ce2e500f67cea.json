{"cell_type":{"f7f00368":"code","e2109bfd":"code","b7a9b8ed":"code","2bff5e83":"code","cdebd0a5":"code","49c379a1":"code","a950eb57":"code","54474986":"code","b18e7f0d":"code","88fbfb2a":"code","4f1e107f":"code","53eca5db":"code","675a20d9":"code","7e2ff208":"code","10f957fb":"code","0bd124ce":"code","e80b91d7":"code","9ac8bfb0":"code","ed86a2d7":"code","9bc8d326":"code","31b04927":"code","6da42ecf":"code","d3afbfea":"code","69931d11":"code","d8ac5b0e":"code","d5078869":"code","0ca9d560":"code","1bf61869":"code","7642d7ef":"code","cd15a7dc":"code","a39af852":"code","bd5627c8":"code","ee2ff4bc":"code","52dfa2db":"code","065db74c":"code","63739d06":"code","9944338d":"code","a3944474":"code","112d5f82":"code","8779596d":"code","531e401b":"code","1ae91f6a":"code","ee9f5041":"code","c96cc8b3":"code","051a5e7a":"code","786144cd":"code","042d3e3f":"code","4e046c35":"code","9288c4a9":"code","3b1245ec":"code","57c63292":"code","e3c85027":"code","f2aca520":"code","010e9375":"code","e3317d09":"code","76d60a9b":"code","f8a220c9":"code","5c0b3d8d":"code","7f3a8765":"code","ded36283":"code","fab8b20e":"code","141e29b6":"markdown","c29d2f46":"markdown","65d9b00d":"markdown","027d5d53":"markdown","19d61959":"markdown","e2d7e139":"markdown","03a8ced6":"markdown","05426b9d":"markdown"},"source":{"f7f00368":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e2109bfd":"import matplotlib.pyplot as plt \nimport seaborn as sns\nimport datetime\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\n%matplotlib inline","b7a9b8ed":"# Loading the data\ndeaths_global= pd.read_csv('\/kaggle\/input\/covid19-assignment\/time_series_covid19_deaths_global.csv')\ndeaths_global.head()","2bff5e83":"col= deaths_global.columns\ncol","cdebd0a5":"deaths_global = deaths_global.loc[:, col[4]:col[-1]]\ndeaths_global.head()","49c379a1":"#total number of deaths on 1\/22\/2020 in the world.\ndeaths_global['1\/22\/20'].sum()","a950eb57":"#total number of deaths on 7\/13\/2020 in the world.\ndeaths_global['7\/13\/20'].sum()","54474986":"#creating the list of total number of deaths in the world.\ndates = deaths_global.keys()\ny_deaths = []\nfor i in dates:\n    y_deaths.append(deaths_global[i].sum())","b18e7f0d":"print(y_deaths)","88fbfb2a":"#will be transformed into matrix format\ny_deaths = np.array(y_deaths).reshape(-1,1) \nprint(y_deaths)","4f1e107f":"#will generate the number of dates according to the size of the \"dates\"\nx_deaths = np.arange(len(dates)).reshape(-1,1) \nprint(x_deaths)","53eca5db":"#will generate the number of dates according to the size of the \"dates\"+20 to forecast the number cases for those days\nforecast_deaths = np.arange(len(dates) + 20).reshape(-1,1)\nprint(forecast_deaths)","675a20d9":"print('shape of x:       ',x_deaths.shape)\nprint('shape of y:       ',y_deaths.shape)\nprint('shape of forecast:',forecast_deaths.shape)","7e2ff208":"start = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forecast_dates = []\nfor i in range(len(forecast_deaths)):\n    future_forecast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","10f957fb":"from sklearn.model_selection import train_test_split\nX_train_deaths, X_test_deaths, Y_train_deaths, Y_test_deaths = train_test_split(x_deaths, y_deaths, test_size = 0.15, shuffle = False)","0bd124ce":"from sklearn.preprocessing import PolynomialFeatures\npf = PolynomialFeatures(degree = 2)\nX_train_deaths_pf = pf.fit_transform(X_train_deaths)\nX_test_deaths_pf = pf.transform(X_test_deaths)","e80b91d7":"print('Shape of X_train:   ',X_train_deaths.shape)\nprint('Shape of X_train_pf:', X_train_deaths_pf.shape)\nprint('Shape of X_test:    ', X_test_deaths.shape)\nprint('Shape of X_test_pf: ', X_test_deaths_pf.shape)","9ac8bfb0":"from sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train_deaths_pf, Y_train_deaths)","ed86a2d7":"pf_pred_deaths = lr.predict(X_test_deaths_pf)\nplt.plot(pf_pred_deaths, linestyle = 'dashed')\nplt.plot(Y_test_deaths);\nplt.legend(['Predicted','y_test']);","9bc8d326":"print('MAE:', mean_absolute_error(pf_pred_deaths, Y_test_deaths))\nprint('MSE:', mean_squared_error(pf_pred_deaths, Y_test_deaths))\nprint('RMSE:', np.sqrt(mean_absolute_error(pf_pred_deaths, Y_test_deaths)))","31b04927":"X_train_deaths_all = pf.transform(forecast_deaths)\npred_deaths_all = lr.predict(X_train_deaths_all)\n\nplt.figure(figsize=(8,6))\nplt.plot(forecast_deaths[:-20], y_deaths, color='red')\nplt.plot(forecast_deaths, pred_deaths_all, linestyle='dashed')\nplt.title('DEATHS of COVID-19')\nplt.xlabel('Days since 1\/22\/2020')\nplt.ylabel('Number of deaths')\nplt.legend(['Death cases', 'Predictions']);","6da42ecf":"#creating dataframe for the Predicted no. of Deaths for 20 days.\npred_deaths_all = pred_deaths_all.reshape(1,-1)[0]\npredicted_death_df = pd.DataFrame({'Date': future_forecast_dates[-20:], 'Predicted no. of Deaths': np.round(pred_deaths_all[-20:])})\npredicted_death_df","d3afbfea":"#Loading the data\nconfirmed_global= pd.read_csv('\/kaggle\/input\/covid19-assignment\/time_series_covid19_confirmed_global.csv')\nconfirmed_global.head()","69931d11":"column = confirmed_global.columns\ncolumn","d8ac5b0e":"confirmed_global = confirmed_global.loc[:, column[4]:column[-1]]\nconfirmed_global.head()","d5078869":"# Total number of confirmed cases on the given date in the world\nconfirmed_global['1\/22\/20'].sum(),confirmed_global['7\/13\/20'].sum()","0ca9d560":"#creating the list of total number of deaths in the world.\ndates_c = confirmed_global.keys()\ny_confirmed = []\nfor i in dates:\n    y_confirmed.append(confirmed_global[i].sum())","1bf61869":"print(y_confirmed)","7642d7ef":"#will be transformed into matrix format\ny_confirmed = np.array(y_confirmed).reshape(-1,1) \nprint(y_confirmed)","cd15a7dc":"#will generate the number of dates according to the size of the \"dates\"\nx_confirmed = np.arange(len(dates_c)).reshape(-1,1) \nprint(x_confirmed)","a39af852":"#will generate the number of dates according to the size of the \"dates\"+20 to forecast the number cases for those days\nforecast_confirmed = np.arange(len(dates_c) + 20).reshape(-1,1)\nprint(forecast_confirmed)","bd5627c8":"print('shape of x:       ',x_confirmed.shape)\nprint('shape of y:       ',y_confirmed.shape)\nprint('shape of forecast:',forecast_confirmed.shape)","ee2ff4bc":"start = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forecast_dates_c = []\nfor i in range(len(forecast_confirmed)):\n    future_forecast_dates_c.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","52dfa2db":"X_train_confirmed, X_test_confirmed, Y_train_confirmed, Y_test_confirmed = train_test_split(x_confirmed, y_confirmed, test_size = 0.15, shuffle = False)","065db74c":"pf_c = PolynomialFeatures(degree = 2)\nX_train_confirmed_pf = pf_c.fit_transform(X_train_confirmed)\nX_test_confirmed_pf = pf_c.transform(X_test_confirmed)","63739d06":"print('Shape of X_train:   ',X_train_confirmed.shape)\nprint('Shape of X_train_pf:', X_train_confirmed_pf.shape)\nprint('Shape of X_test:    ', X_test_confirmed.shape)\nprint('Shape of X_test_pf: ', X_test_confirmed_pf.shape)","9944338d":"lr_c = LinearRegression()\nlr_c.fit(X_train_confirmed_pf, Y_train_confirmed)","a3944474":"pf_pred_confirmed = lr_c.predict(X_test_confirmed_pf)\nplt.plot(pf_pred_confirmed, linestyle = 'dashed')\nplt.plot(Y_test_confirmed);\nplt.legend(['Predicted','Y_test'])","112d5f82":"print('MAE:', mean_absolute_error(pf_pred_confirmed, Y_test_confirmed))\nprint('MSE:', mean_squared_error(pf_pred_confirmed, Y_test_confirmed))\nprint('RMSE:', np.sqrt(mean_absolute_error(pf_pred_confirmed, Y_test_confirmed)))","8779596d":"X_train_confirmed_all = pf_c.transform(forecast_confirmed)\npred_confirmed_all = lr_c.predict(X_train_confirmed_all)\n\nplt.figure(figsize=(8,6))\nplt.plot(forecast_confirmed[:-20], y_confirmed, color='brown')\nplt.plot(forecast_confirmed, pred_confirmed_all, linestyle='dashed')\nplt.title('CONFIRMED Cases of COVID-19')\nplt.xlabel('Days since 1\/22\/2020')\nplt.ylabel('Number of Confirmed Cases')\nplt.legend(['Confirmed cases', 'Predictions']);","531e401b":"#creating dataframe for the Predicted no. of Confirmed cases for next 20 days.\npred_confirmed_all = pred_confirmed_all.reshape(1,-1)[0]\npredicted_confirmed_df = pd.DataFrame({'Date': future_forecast_dates_c[-20:], 'Predicted no. of Confirmed Cases': np.round(pred_confirmed_all[-20:])})\npredicted_confirmed_df","1ae91f6a":"#Loading the data\nrecovered_global= pd.read_csv('\/kaggle\/input\/covid19-assignment\/time_series_covid19_recovered_global.csv')\nrecovered_global.head()","ee9f5041":"columns2 = recovered_global.columns\ncolumns2","c96cc8b3":"recovered_global = recovered_global.loc[:, columns2[4]:columns2[-1]]\nrecovered_global.head()","051a5e7a":"# Total number of recovered cases on the given date in the world.\nrecovered_global['1\/22\/20'].sum(), recovered_global['7\/13\/20'].sum()","786144cd":"#creating the list of total number of recovered cases in the world.\ndates2 = recovered_global.keys()\ny_recovered = []\nfor i in dates2:\n    y_recovered.append(recovered_global[i].sum())","042d3e3f":"print(y_recovered)","4e046c35":"#will be transformed into matrix format\ny_recovered = np.array(y_recovered).reshape(-1,1)\ny_recovered","9288c4a9":"#will generate the number of dates according to the size of the \"dates\"\nx_recovered = np.arange(len(dates2)).reshape(-1,1)\nx_recovered","3b1245ec":"#will generate the number of dates according to the size of the \"dates\"+20 to forecast the number cases for those days\nforecast_recovered = np.arange(len(dates2) + 20).reshape(-1,1)\nforecast_recovered","57c63292":"print('shape of x:       ',x_recovered.shape)\nprint('shape of y:       ',y_recovered.shape)\nprint('shape of forecast:',forecast_recovered.shape)","e3c85027":"start = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forecast_dates_r = []\nfor i in range(len(forecast_recovered)):\n    future_forecast_dates_r.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","f2aca520":"X_train_recovered, X_test_recovered, Y_train_recovered, Y_test_recovered = train_test_split(x_recovered, y_recovered, test_size = 0.15, shuffle = False)","010e9375":"pf_r = PolynomialFeatures(degree = 3)\nX_train_pf_recovered = pf_r.fit_transform(X_train_recovered)\nX_test_pf_recovered = pf_r.transform(X_test_recovered)","e3317d09":"print('Shape of X_train:   ',X_train_recovered.shape)\nprint('Shape of X_train_pf:', X_train_pf_recovered.shape)\nprint('Shape of X_test:    ', X_test_recovered.shape)\nprint('Shape of X_test_pf: ', X_test_pf_recovered.shape)","76d60a9b":"lr_r = LinearRegression()\nlr_r.fit(X_train_pf_recovered, Y_train_recovered)","f8a220c9":"pf_pred_recovered = lr_r.predict(X_test_pf_recovered)\nplt.plot(pf_pred_recovered, linestyle = 'dashed')\nplt.plot(Y_test_recovered)\nplt.legend(['Predicted','Y_test']);","5c0b3d8d":"print('MAE:', mean_absolute_error(pf_pred_recovered, Y_test_recovered))\nprint('MSE:', mean_squared_error(pf_pred_recovered, Y_test_recovered))\nprint('RMSE:', np.sqrt(mean_absolute_error(pf_pred_recovered, Y_test_recovered)))","7f3a8765":"X_train_all_recovered = pf_r.transform(forecast_recovered)\npred_all_recovered = lr_r.predict(X_train_all_recovered)\n\nplt.figure(figsize=(8,6))\nplt.plot(forecast_recovered[:-20], y_recovered, color='red')\nplt.plot(forecast_recovered, pred_all_recovered, linestyle='dashed')\nplt.title('RECOVERED Cases of COVID-19')\nplt.xlabel('Days since 1\/22\/2020')\nplt.ylabel('Number of recovered')\nplt.legend(['Recovered', 'Predictions']);","ded36283":"#creating dataframe for the Predicted no. of Confirmed cases for next 20 days.\npred_all_recovered = pred_all_recovered.reshape(1,-1)[0]\npredicted_recovered_df = pd.DataFrame({'Date': future_forecast_dates_r[-20:], 'Predicted no. of Recovered Cases': np.round(pred_all_recovered[-20:])})\npredicted_recovered_df","fab8b20e":"temp= predicted_confirmed_df.merge(predicted_death_df,on='Date',how='right')\n\nfinal_df= temp.merge(predicted_recovered_df,on='Date',how='right')\nfinal_df","141e29b6":"# Thank You.","c29d2f46":"# Predicting Total Death Cases in the world.","65d9b00d":"**Taking the required data from the above dataframe (i.e. the number of Recovered cases).**","027d5d53":"**Taking the required data from the above dataframe (i.e. the number of confirmed cases).**","19d61959":"# Predicting Total Confirmed Cases in the world.","e2d7e139":"# Predicting Total Confirmed Cases in the world.","03a8ced6":"# Instructions:\n 1. In this notebook, three datasets i.e.\n     * time_series_covid19_confirmed_global.csv\n     * time_series_covid19_deaths_global.csv\n     * time_series_covid19_recovered_global.csv \n    \n    are used to predict the number of cases of COVID-19.","05426b9d":"**Taking the required data from the above dataframe (i.e. the number of death cases).**"}}