{"cell_type":{"5fa840f2":"code","53ee04a2":"code","7b681f51":"code","041c24c4":"code","822df3be":"code","11b0c125":"code","b8a4a6d2":"code","d8d67579":"code","9d09551c":"code","62809cf6":"code","0a968c50":"code","67f41efb":"code","71351e54":"code","3794654c":"code","1d2521f9":"code","0c47445f":"code","787fe9d2":"code","44b38c59":"code","1cc3b2ed":"code","d91d5d08":"code","b27a40b2":"code","70b05ecf":"code","8edf16c4":"code","c9768ee4":"code","80f3d639":"code","917107b7":"code","cb520dd3":"code","cec05fee":"code","74a52124":"code","b3e34a2f":"code","987c2a20":"code","33bcfc72":"code","dc640751":"code","d9f1cddf":"code","35783be7":"code","85a8f586":"code","1eebd2d6":"code","d581e1eb":"code","a399b90d":"code","b2490d0a":"code","1677c8b8":"code","f598f035":"code","d2d4a1ae":"code","0fefda11":"code","3ac695f3":"code","8986fd65":"code","9107ac79":"code","21a8448c":"code","78b8a843":"code","7872b7e5":"code","46ee58d5":"code","f76998ab":"code","76436653":"code","1de8241c":"code","e974cf9b":"code","d28ee741":"code","5d915091":"code","8e37e4ce":"markdown","11925867":"markdown","4c00f6e2":"markdown","831695b6":"markdown","8fc8f773":"markdown","49fa6de4":"markdown","1d099222":"markdown","6003a3de":"markdown","a382397c":"markdown","3a5b2029":"markdown","bc9bdcec":"markdown","e7850270":"markdown","c4fec0be":"markdown","2630ee46":"markdown","b2391c38":"markdown","eb218298":"markdown","e87d3538":"markdown","f1f9ca68":"markdown","0161ba71":"markdown","723517d6":"markdown","2e940d88":"markdown","99d5f5bb":"markdown"},"source":{"5fa840f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","53ee04a2":"df = pd.read_csv('..\/input\/pandas-bokeh\/dataset_tk.csv')\ndf.head()","7b681f51":"# Numerical features\nNumerical_feat = [feature for feature in df.columns if df[feature].dtypes != 'O']\nprint('Total numerical features: ', len(Numerical_feat))\nprint('\\nNumerical Features: ', Numerical_feat)","041c24c4":"# Zoomed heatmap, correlation matrix\nsns.set(rc={'figure.figsize':(12,8)})\ncorrelation_matrix = df.corr()\n\nk = 10             #number of variables for heatmap\ncols = correlation_matrix.nlargest(k, 'Rajasthan')['Rajasthan'].index\ncm = np.corrcoef(df[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","822df3be":"## Lets Find the realtionship between discrete features and SalePrice\n\n#plt.figure(figsize=(8,6))\n\nfor feature in Numerical_feat:\n    data=df.copy()\n    plt.figure(figsize=(8,6))\n    data.groupby(feature)['Rajasthan'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('Rajasthan')\n    plt.title(feature)\n    plt.show()","11b0c125":"df[Numerical_feat].hist(bins=25)\nplt.show()","b8a4a6d2":"## let us now examine the relationship between continuous features and SalePrice\n## Before that lets find continous features that donot contain zero values\n\ncontinuous_nozero = [feature for feature in Numerical_feat if 0 not in data[feature].unique() and feature not in ['Tripura', 'Nagaland']]\n\nfor feature in continuous_nozero:\n    plt.figure(figsize=(8,6))\n    data = df.copy()\n    data[feature] = np.log(data[feature])\n    data['Rajasthan'] = np.log(data['Rajasthan'])\n    plt.scatter(data[feature], data['Rajasthan'])\n    plt.xlabel(feature)\n    plt.ylabel('Rajasthan')\n    plt.show()","d8d67579":"## Normality and distribution checking for continous features\nfor feature in continuous_nozero:\n    plt.figure(figsize=(6,6))\n    data = df.copy()\n    sns.distplot(data[feature])\n    plt.show()","9d09551c":"# categorical features\ncategorical_feat = [feature for feature in df.columns if df[feature].dtypes=='O']\nprint('Total categorical features: ', len(categorical_feat))\nprint('\\n',categorical_feat)","62809cf6":"# lets find unique values in each categorical features\nfor feature in categorical_feat:\n    print('{} has {} categories. They are:'.format(feature,len(df[feature].unique())))\n    print(df[feature].unique())\n    print('\\n')","0a968c50":"# let us find relationship of categorical with target variable\n\nfor feature in categorical_feat:\n    data=df.copy()\n    data.groupby(feature)['Rajasthan'].median().plot.bar()\n    plt.xlabel(feature)\n    plt.ylabel('Rajasthan')\n    plt.title(feature)\n    plt.show()","67f41efb":"# these are selected features from EDA section\nfeatures = ['Rajasthan', 'Punjab', 'Uttarakhand', 'UP', 'J&K', 'Meghalaya', 'DNH', 'Unnamed: 0']","71351e54":"# plot bivariate distribution (above given features with saleprice(target feature))\nfor feature in features:\n    if feature!='Rajasthan':\n        plt.scatter(df[feature], df['Rajasthan'])\n        plt.xlabel(feature)\n        plt.ylabel('Rajasthan')\n        plt.show()","3794654c":"#Deleting outliers for GrLivArea\ndf = df.drop(df[(df['Uttarakhand']>4000) & (df['Rajasthan']<300000)].index)\n\nplt.scatter(df['Uttarakhand'], df['Rajasthan'])\nplt.xlabel('Uttarakhand')\nplt.ylabel('Rajasthan')\nplt.show()","1d2521f9":"# these are selected features from EDA section\nfeatures = ['Rajasthan', 'Punjab', 'Uttarakhand', 'UP', 'J&K', 'Meghalaya', 'DNH']\n\n# selecting continuous features from above\ncontinuous_features = ['Rajasthan', 'Uttarakhand']","0c47445f":"#Train = train_df.shape[0]\n#Test = test_df.shape[0]\n#target_feature = train_df.SalePrice.values\n#combined_data = pd.concat((train_df, test_df)).reset_index(drop=True)\n#combined_data.drop(['SalePrice','Id'], axis=1, inplace=True)\n#print(\"all_data size is : {}\".format(combined_data.shape))","787fe9d2":"#Since I have no train, test files, Id, I adapted the code above for just 1 line, so that I could plot the distplot.  \ncombined_data = pd.concat((df, df)).reset_index(drop=True)","44b38c59":"from scipy.stats import norm\n\n# checking distribution of continuous features(histogram plot)\nfor feature in continuous_features:\n    if feature!='Rajasthan':\n        sns.distplot(combined_data[feature], fit=norm)\n        plt.show()\n    else:\n        sns.distplot(df['Rajasthan'], fit=norm)\n        plt.show()","1cc3b2ed":"# so let's label encode above ordinal features\nfrom sklearn.preprocessing import LabelEncoder\nfor feature in features:\n    encoder = LabelEncoder()\n    combined_data[feature] = encoder.fit_transform(list(combined_data[feature].values))","d91d5d08":"# Now lets see label encoded data\ncombined_data[features].head()","b27a40b2":"## One hot encoding or getting dummies \n\ndummy_ordinals = pd.get_dummies(features) \ndummy_ordinals.head()","70b05ecf":"# creating dummy variables\n\ncombined_data = pd.get_dummies(combined_data)\nprint(combined_data.shape)","8edf16c4":"combined_data.head()","c9768ee4":"# let's first see descriptive stat info \ncombined_data.describe()","80f3d639":"## we willtake all features from combined_dummy_data \nfeatures_to_scale = [feature for feature in combined_data]\nprint(len(features_to_scale))","917107b7":"## Now here is where we will scale our data using sklearn module.\n\nfrom sklearn.preprocessing import MinMaxScaler\n\ncols = combined_data.columns  # columns of combined_dummy_data\n\nscaler = MinMaxScaler()\ncombined_data = scaler.fit_transform(combined_data[features_to_scale])","cb520dd3":"# after scaling combined_data it is now in ndarray datypes\n# so we will create DataFrame from it\ncombined_scaled_data = pd.DataFrame(combined_data, columns=[cols])","cec05fee":"combined_scaled_data.head() # this is the same combined_dummy_data in scaled form.","74a52124":"# lets see descriptive stat info \ncombined_scaled_data.describe()","b3e34a2f":"#That's the code. Though we don't have train nor test, then I adapted once more. \n#train_df.shape, test_df.shape, combined_scaled_data.shape, combined_data.shape","987c2a20":"df.shape, df.shape, combined_scaled_data.shape, combined_data.shape","33bcfc72":"# separate train data and test data \ntrain_data = combined_scaled_data.iloc[:504,:]\ntest_data = combined_scaled_data.iloc[504:,:]\n\ntrain_data.shape, test_data.shape","dc640751":"## lets add target feature to train_data\n#train_data['Rajasthan']= train_data['Rajasthan']  # This saleprice is normalized. Its very impportant","d9f1cddf":"train_data = train_data\ntrain_data.head(10)","35783be7":"test_data = test_data.reset_index()\ntest_data.tail()","85a8f586":"dataset = train_data.copy()  # copy train_data to dataset variable","1eebd2d6":"dataset.head()","d581e1eb":"dataset = dataset.dropna()","a399b90d":"## lets create dependent and target feature vectors\n\nX = dataset.drop(['Rajasthan'],axis=1)\nY = dataset[['Rajasthan']]\n\nX.shape, Y.shape","b2490d0a":"Y.head()","1677c8b8":"# lets do feature selection here\n\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_regression\n\n# define feature selection\nfs = SelectKBest(score_func=f_regression, k=27)\n# apply feature selection\nX_selected = fs.fit_transform(X, Y)\nprint(X_selected.shape)","f598f035":"cols = list(range(1,28))\n\n## create dataframe of selected features\n\nselected_feat = pd.DataFrame(data=X_selected,columns=[cols])\nselected_feat.head()","d2d4a1ae":"# perform train_test_split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(selected_feat,Y,test_size=0.3,random_state=0)","0fefda11":"x_train.shape, x_test.shape","3ac695f3":"from sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\n\nlr = LinearRegression()\nlr.fit(x_train,y_train)","8986fd65":"y_pred = lr.predict(x_test) # predicting test data\ny_pred[:10]","9107ac79":"# Evaluating the model\nprint('R squared score',metrics.r2_score(y_test,y_pred))\n\nprint('\\nMean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","21a8448c":"# check for underfitting and overfitting\nprint('Train Score: ', lr.score(x_train,y_train))\nprint('Test Score: ', lr.score(x_test,y_test))","78b8a843":"## scatter plot of original and predicted target test data\nplt.figure(figsize=(8,6))\nplt.scatter(y_test,y_pred)\nplt.xlabel('y_tes')\nplt.ylabel('y_pred')\nplt.show()","7872b7e5":"## Lets do error plot\n## to get error in prediction just substract predicted values from original values\n\nerror = list(y_test.values-y_pred)\nplt.figure(figsize=(8,6))\nsns.distplot(error)","46ee58d5":"from sklearn.ensemble import RandomForestRegressor\nrf_reg = RandomForestRegressor(n_estimators=100)\nrf_reg.fit(x_train,y_train)","f76998ab":"y_pred = rf_reg.predict(x_test)\nprint(y_pred[:10])","76436653":"## evaluating the model\n\nprint('R squared error',metrics.r2_score(y_test,y_pred))\n\nprint('\\nMean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","1de8241c":"# check score\nprint('Train Score: ', rf_reg.score(x_train,y_train))\nprint('Test Score: ', rf_reg.score(x_test,y_test))","e974cf9b":"## scatter plot of original and predicted target test data\nplt.figure(figsize=(8,6))\nplt.scatter(y_test,y_pred)\nplt.xlabel('y_tes')\nplt.ylabel('y_pred')\nplt.show()","d28ee741":"## Lets do error plot\n## to get error in prediction just substract predicted values from original values\n\nerror = list(y_test.values-y_pred)\nplt.figure(figsize=(8,6))\nsns.distplot(error)","5d915091":"# Plot\nsns.set_style('whitegrid')\nfig, (ax1,ax2) = plt.subplots(1, 2)\nfig.set_size_inches(18, 6)\n\nsns.countplot(df['Punjab'], order=df['Punjab'].value_counts().index[:20],palette='viridis', ax=ax1)\nsns.countplot(df['Rajasthan'], order=df['Rajasthan'].value_counts().index[:20],palette='viridis', ax=ax2)\n\nax1.tick_params(axis='x', labelrotation=45)\nax2.tick_params(axis='x', labelrotation=45)\nax1.set_title('Punjab')\nax2.set_title('Tripura')\nax2.set(ylim=(0, 100))\n\n\nplt.show()","8e37e4ce":"Such a nice error plot? We can see the errors are normally distributed. If you say so.","11925867":"Above two dataframe tables that datas are now scaled.","4c00f6e2":"LINEAR REGRESSION","831695b6":"R square score is prety high almost 80% score which is prety good. MAE, MSE and RMSE values also shows pretty good result. It was written that in AmritGrg's Notebook. I don't know if my result is good or not.","8fc8f773":"Above train score and test score comparable which is good. Even though it shows a slight case of underfitting but thats fine here. Is it? I don't know.","49fa6de4":"Initially, train data had 504 observations but I had droped 1 (oo 3 )in outlier handling section so now I have ??? observations.\nI simply didn't understand that countability. The original said: \"Initially, train data had 1460 observations but we had droped 2 oo 3 in outlier handling section so now we have 4581 observations.\" And the numbers are: ((1458, 81), (1459, 80), (2919, 225), (2919, 225)). I'll read it later and try to get it.","1d099222":"#Normalizing some numerical data","6003a3de":"#Feature Selection","a382397c":"![](https:\/\/i1.wp.com\/gyanshare.in\/wp-content\/uploads\/2019\/11\/List-of-Indian-states-and-their-languages.jpg?w=800&ssl=1)\nhttps:\/\/gyanshare.in\/list-of-indian-states-and-their-languages-indian-states-and-their-languages\/","3a5b2029":"We can see that 28 (27+1 outlier?) best\/important features have been selected.","bc9bdcec":"#Feature Scaling","e7850270":"#Categorical features","c4fec0be":"#Label encoding, One-Hot-Encoding\/dummies","2630ee46":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke ","b2391c38":"#Above, data range differs so much. We need to scale them to same range.","eb218298":"#Code from Ria https:\/\/www.kaggle.com\/rai555\/google-landmark-retrieval-eda-outlier-analysis\/comments","e87d3538":"#Model Building","f1f9ca68":"\"We have train set accuracy of 0.9792356047371404 and test set accuracy of 0.8848913083086402. Here we can see overfitting issue but for now we'll leave it alone. They are still pretty good score.\"  I didn't understand again that words and that numbers.","0161ba71":"#Codes from AmritGrg https:\/\/www.kaggle.com\/amritgrg\/high-accuracy-with-detailed-eda-feature-engineer","723517d6":"#RandomForestRegressor","2e940d88":"Literal english meanings of names of Indian states.\n![](https:\/\/preview.redd.it\/vmmbl5uml4151.jpg?width=960&crop=smart&auto=webp&s=d94c0167566189047eee8ae919eca988087c6f04)\nhttps:\/\/preview.redd.it\/vmmbl5uml4151.jpg?width=960&crop=smart&auto=webp&s=d94c0167566189047eee8ae919eca988087c6f04","99d5f5bb":"#Outliers\n\nWe can see a clear otliers in Uttarakhand. I mean it just doesn't make sense for larger values Uttarakhand to have low value of Rajasthan (SalePrice). There might be some reason for this but we'll consider them as outliers and drop them."}}