{"cell_type":{"98d09f18":"code","4c94bd3e":"code","68c566c1":"code","f75e406e":"code","18fa3e0f":"code","4f34b69d":"code","3d297bf3":"code","141520fd":"code","c58a78a8":"code","8026080e":"code","ab74d0f9":"code","02097c84":"code","76ed5f7c":"code","1ab63340":"code","de4ccf5a":"code","77b979a1":"code","b88edd2b":"code","feb7667d":"code","49d696f6":"code","2f54ac26":"code","8c65ccda":"code","fb60ad94":"code","c06db82d":"code","aafd03fa":"code","2d6ea792":"code","b9d2c71b":"code","d3a08427":"markdown"},"source":{"98d09f18":"import pandas as pd\ndataset=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ndataset.head()","4c94bd3e":"dataset.info()","68c566c1":"dataset.nunique().sort_values(ascending=False)[:5]","f75e406e":"data = dataset.sample(frac=0.8, random_state=42)\ndata_unseen = dataset.drop(data.index)\ndata.reset_index(inplace=True, drop=True)\ndata_unseen.reset_index(inplace=True, drop=True)\nprint('Data for Modeling: ' + str(data.shape))","18fa3e0f":"print('Unseen Data For Predictions: ' + str(data_unseen.shape))","4f34b69d":"!pip install pycaret","3d297bf3":"from pycaret.classification import *","141520fd":"numeric_features=data.columns.tolist()\nnumeric_features.remove('label')\nnumeric_features[:5]","c58a78a8":"data.label.value_counts()","8026080e":"exp_clf101 = setup(data = data, target = 'label', session_id=42,\n                  normalize = True, \n                  transformation = True, \n                  log_experiment = True,\n                  handle_unknown_categorical = True, \n                  unknown_categorical_method = 'most_frequent',\n                  remove_multicollinearity = True, #rop one of the two features that are highly correlated with each other\n                  ignore_low_variance = True,#all categorical features with statistically insignificant variances are removed from the dataset.\n                  combine_rare_levels = True,# all levels in categorical features below the threshold defined in rare_level_threshold param are combined together as a single level\n                  numeric_imputation='median',\n                  categorical_imputation='mode',\n                   numeric_features=numeric_features)","ab74d0f9":"lightgbm = create_model('lightgbm')","02097c84":"print(lightgbm)","76ed5f7c":"tuned_lightgbm = tune_model(lightgbm,optimize = 'Kappa')","1ab63340":"plot_model(tuned_lightgbm, plot = 'auc')","de4ccf5a":"plot_model(tuned_lightgbm, plot = 'pr')","77b979a1":"plot_model(tuned_lightgbm, plot='feature')","b88edd2b":"plot_model(tuned_lightgbm, plot = 'confusion_matrix')","feb7667d":"evaluate_model(tuned_lightgbm)","49d696f6":"predict_model(tuned_lightgbm)","2f54ac26":"unseen_predictions = predict_model(tuned_lightgbm, data=data_unseen)\nunseen_predictions.head()","8c65ccda":"print(\"Confidence Score :   {}\".format(round(unseen_predictions.Score.mean(),2)))#Confidence Score","fb60ad94":"test=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest.head()","c06db82d":"sol = predict_model(tuned_lightgbm, data=test)\nsol.head()","aafd03fa":"final=pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nfinal.head()","2d6ea792":"final.Label=sol.Label\nfinal.head()","b9d2c71b":"final.to_csv('final.csv', index=False)","d3a08427":"#### Time is constant, so using model which will take less time to execute"}}