{"cell_type":{"5cfeee43":"code","ac0fe276":"code","236e3669":"code","a00b6a92":"code","939f9a38":"code","c3773454":"code","716ab93f":"code","13e5b6c6":"code","ba37cfcf":"code","2dfadbd5":"code","e528cd63":"code","e4de0179":"code","04712ba0":"code","07091e9d":"code","4291c36f":"code","e1ac5c93":"code","65cf37e0":"code","860422a4":"code","018e4e20":"code","55dd93d0":"code","faf22ad9":"code","22551b14":"code","ca832e1d":"code","f4b183ef":"code","e0bd9e5b":"code","daca358d":"code","13bd32dd":"code","1493903d":"code","8a879f09":"code","ce29e4f1":"code","fa96d12f":"code","da429356":"code","12151f62":"code","321f4474":"code","4f504f65":"code","c4c3a404":"code","2654aea6":"code","3dd8659c":"code","fd78b74b":"markdown"},"source":{"5cfeee43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn.metrics import accuracy_score,confusion_matrix,classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nimport seaborn as sbn\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ac0fe276":"data = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")","236e3669":"data","a00b6a92":"data.corr()","939f9a38":"data.describe()","c3773454":"sbn.pairplot(data, hue='target', markers='+')\nplt.tight_layout()","716ab93f":"data_target = data.groupby(\"target\").size()","13e5b6c6":"data_target","ba37cfcf":"plt.pie(data_target.values, labels = [\"Percentage of persons who doesn't suffer from heart diseases \", \"Percentage of persons who suffer from heart diseases\"] , autopct='%1.1f%%', radius = 1.5, textprops = {\"fontsize\" : 16}) \nplt.show()","2dfadbd5":"data_sex = data.groupby([\"sex\",\"target\"]).size()\nprint(data_sex)","e528cd63":"plt.pie(data_sex.values, labels = [\"(Percent of women who suffer from heart diseases)\", \" (Percent of women who suffer from heart diseases)\", \" (Percent of men who do suffer from heart diseases)\", \"(Percent of who suffering from heart diseases)\"],autopct='%1.1f%%',radius = 2, textprops = {\"fontsize\" : 14})\nplt.show()","e4de0179":"data_age = data.groupby([\"age\", \"target\"]).size(). head(60)","04712ba0":"data_age","07091e9d":"plt.hist([data[data.target==0].age, data[data.target==1].age], bins = 19, alpha =0.5,  align='mid',histtype = \"bar\", orientation='vertical',  label = [\"Doesn't suffer from heart diseases\",\"Suffering from heart diseases\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Percentage\")\nplt.legend()\nplt.show()","4291c36f":"data.isnull().sum()","e1ac5c93":"sbn.scatterplot(x = \"age\", y = \"chol\", data=data)","65cf37e0":"x = data.iloc[:,0:13]","860422a4":"y = data.iloc[:,-1].values","018e4e20":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state = 0)","55dd93d0":"sc = StandardScaler()\nX_train = sc.fit_transform(x_train)\nX_test = sc.transform(x_test)","faf22ad9":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 8, metric = \"minkowski\")\nknn.fit(X_train, y_train)\ny_pred1 = knn.predict(X_test)\ncm = confusion_matrix(y_test, y_pred1)","22551b14":"cm","ca832e1d":"accuracy_score_knn = accuracy_score(y_pred1, y_test)","f4b183ef":"accuracy_score_knn","e0bd9e5b":"from sklearn.naive_bayes import BernoulliNB\nbn = BernoulliNB()\nbn.fit(X_train, y_train)\ny_pred2 = bn.predict(X_test)\ncm = confusion_matrix(y_test, y_pred2)","daca358d":"cm","13bd32dd":"accuracy_score_bn = accuracy_score(y_pred2, y_test)","1493903d":"accuracy_score_bn","8a879f09":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier(criterion = \"entropy\")\ndtc.fit(X_train, y_train)\ny_pred3 = dtc.predict(X_test)\ncm = confusion_matrix(y_test, y_pred3)\n","ce29e4f1":"cm","fa96d12f":"accuracy_score_dtc = accuracy_score(y_pred3, y_test)","da429356":"accuracy_score_dtc","12151f62":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators = 11, criterion = \"entropy\")\nrfc.fit(X_train, y_train)\ny_pred4 = rfc.predict(X_test)\ncm = confusion_matrix(y_test, y_pred4)","321f4474":"cm","4f504f65":"accuracy_score_rfc = accuracy_score(y_pred4, y_test)","c4c3a404":"accuracy_score_rfc","2654aea6":"models = [accuracy_score_knn, accuracy_score_bn, accuracy_score_dtc, accuracy_score_rfc]\naccuracy_scores = []\nfor model in models:\n    accuracy_scores.append(model)\nprint(accuracy_scores)    ","3dd8659c":"plt.bar(['KNN', 'BN', 'DTC', 'RFC'], accuracy_scores)\nplt.ylim(0.6,1.0)\nplt.title('Accuracy comparison for various models', fontsize=15, color='b')\nplt.xlabel('Models', fontsize=15, color='g')\nplt.ylabel('Accuracy Score', fontsize=15, color='m')\nplt.tight_layout()\nplt.show()","fd78b74b":"0 --> doesn't suffer from heart diseases, \n1 --> suffer from heart diseases"}}