{"cell_type":{"2c0af4ed":"code","1396f03a":"code","5ccf6925":"code","8be665a2":"code","575e9fb9":"code","2ddabd55":"code","da290ffc":"code","1b8b8374":"code","7bd96dc0":"code","08739cad":"code","3046be91":"code","7188bb42":"code","f9839005":"code","a0af1816":"code","21a22f5f":"code","cedfcd40":"code","17a36eb5":"code","c7ea1889":"code","6bb74a12":"code","472692f4":"code","21e27233":"code","cce1e979":"code","0bdb47a2":"code","67440e43":"code","a0e55617":"code","03fe42eb":"code","bec753d5":"code","c45ffb14":"code","a2ed4af4":"code","f2d913a7":"code","e89ae75e":"code","689719e4":"code","1a97d1a4":"code","8d56e638":"code","776b40df":"code","cf0aa99a":"code","4e197ef2":"code","8a24f07e":"code","d13231b7":"markdown","7a8d90e7":"markdown","3040023a":"markdown","a164d1de":"markdown","177c367d":"markdown","ba4bcc52":"markdown","4ef6d785":"markdown","c6a11dc4":"markdown","ebb258b7":"markdown","7c0eca2d":"markdown","1666b020":"markdown","f8ac0bd7":"markdown","3c10a4b3":"markdown"},"source":{"2c0af4ed":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1396f03a":"import matplotlib.pyplot as plt","5ccf6925":"data = {\n'year': [2010, 2011, 2012,\n2010, 2011, 2012,\n2010, 2011, 2012],\n'team': ['FCBarcelona', 'FCBarcelona', 'FCBarcelona',\n'RMadrid', 'RMadrid', 'RMadrid',\n'ValenciaCF', 'ValenciaCF', 'ValenciaCF'],\n'wins': [30, 28, 32, 29, 32, 26, 21, 17, 19],\n'draws': [6, 7, 4, 5, 4, 7, 8, 10, 8],\n'losses': [2, 3, 2, 4, 2, 5, 9, 11, 11]\n}","8be665a2":"football = pd.DataFrame(data, columns = ['year', 'team', 'wins', 'draws', 'losses'])","575e9fb9":"edu = pd.read_csv('\/kaggle\/input\/ense3ict2020\/files\/ch02\/educ_figdp_1_Data.csv',\n                  na_values=':', usecols=['TIME', 'GEO', 'Value'])","2ddabd55":"edu","da290ffc":"edu.tail()","1b8b8374":"edu.tail(3)","7bd96dc0":"edu.head()","08739cad":"edu.head(3)","3046be91":"edu.describe()","7188bb42":"edu['Value']","f9839005":"edu[10:14]","a0af1816":"edu.iloc[90:94][['TIME','GEO']]","21a22f5f":"edu[edu['Value'] > 6.5].tail()","cedfcd40":"edu[edu[\"Value\"].isnull()].head()","17a36eb5":"edu.index[edu['Value'] > 6.5]","c7ea1889":"type(edu.index[edu['Value'] > 6.5])","6bb74a12":"edu[edu[\"Value\"].isnull()].head()","472692f4":"edu.max(axis = 0)","21e27233":"print ('Pandas max function:', edu['Value'].max())\nprint ('Python max function:', max(edu['Value']))","cce1e979":"s = edu[\"Value\"]\/100\ns.head()","0bdb47a2":"s = edu[\"Value\"].apply(np.sqrt)\ns.head()","67440e43":"s = edu[\"Value\"].apply(lambda d: d**2)\ns.head()","a0e55617":"edu = edu.append({\"TIME\": 2000, \"Value\": 5.00, \"GEO\": 'a'},\n                  ignore_index = True)","03fe42eb":"edu.tail()","bec753d5":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","c45ffb14":"edu.drop(max(edu.index), axis = 0, inplace = True)\nedu.tail()","a2ed4af4":"eduFilled = edu.fillna(value = {\"Value\": 0})\neduFilled.head()","f2d913a7":"edu.sort_values(by = 'Value', ascending = False,\n                inplace = True)\nedu.head()","e89ae75e":"edu.sort_index(axis = 0, ascending = True, inplace = True)\nedu.head()","689719e4":"group = edu[[\"GEO\", \"Value\"]].groupby('GEO').mean()\ngroup.head()","1a97d1a4":"filtered_data = edu[edu[\"TIME\"] > 2005]\npivedu = pd.pivot_table(filtered_data, values = 'Value',\n                        index = ['GEO'], columns = ['TIME'])\npivedu.head()","8d56e638":"pivedu.loc[['Spain','Portugal'], [2006,2011]]","776b40df":"pivedu = pivedu.drop(['Euro area (13 countries)',\n                      'Euro area (15 countries)',\n                      'Euro area (17 countries)',\n                      'Euro area (18 countries)',\n                      'European Union (25 countries)',\n                      'European Union (27 countries)',\n                      'European Union (28 countries)'\n                      ], axis=0)\npivedu = pivedu.rename(\n    index={'Germany (until 1990 former territory of the FRG)': 'Germany'})\npivedu = pivedu.dropna()\npivedu.rank(ascending=False, method='first').head()","cf0aa99a":"totalSum = pivedu.sum(axis = 1)\n\ntotalSum.rank(ascending = False, method = 'dense').sort_values().head()","4e197ef2":"totalSum = pivedu.sum(axis = 1).sort_values(ascending = False)\ntotalSum.plot(kind = 'bar', style = 'b', alpha = 0.4,\n              title = \"Total Values for Country\")","8a24f07e":"my_colors = ['b', 'r', 'g', 'y', 'm', 'c']\nax = pivedu.plot(kind='barh', stacked=True, color=my_colors, figsize=(12, 6))\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\nplt.savefig('Value_Time_Country.png', dpi=300, bbox_inches='tight')","d13231b7":"its like a filtering the values which are greater than 6.5","7a8d90e7":"we got the three last rows : 381,382,383","3040023a":"we got top 3 rows : 0,1,2","a164d1de":"the max values","177c367d":"By default, equal values are assigned a rank that is the average of the ranks of those values.\n\nascending: bool, default True\nWhether or not the elements should be ranked in ascending order. therefore ascending=False means some elements shoud not be ranked and To rank our data means to have better visualization of the data we possess. For example, we\nwould like to know how each country is ranked simply using the function rank() defined in\nPandas. But before that our data has to be clean so the following steps are needed:\n\u25cf Drop the euro area entries\n\u25cf Shorten the Germany name entry\n\u25cf Drop all rows containing the Nan value\nThen you can use the rank() fn.\n\nParameters: axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0\nIndex to direct ranking.\n\nmethod: {\u2018average\u2019, \u2018min\u2019, \u2018max\u2019, \u2018first\u2019, \u2018dense\u2019}, default \u2018average\u2019\nHow to rank the group of records that have the same value (i.e. ties):\n\naverage: average rank of the group\n\nmin: lowest rank in the group\n\nmax: highest rank in the group\n\nfirst: ranks assigned in order they appear in the array\n\ndense: like \u2018min\u2019, but rank always increases by 1 between groups.\n\nnumeric_only: bool, optional\nFor DataFrame objects, rank only numeric columns if set to True.\n\nna_option: {\u2018keep\u2019, \u2018top\u2019, \u2018bottom\u2019}, default \u2018keep\u2019\nHow to rank NaN values:\n\nkeep: assign NaN rank to NaN values\n\ntop: assign smallest rank to NaN values if ascending\n\nbottom: assign highest rank to NaN values if ascending.\n\npct: bool, default False\nWhether or not to display the returned rankings in percentile form.\n\nReturns: same type as caller\nReturn a Series or DataFrame with data ranks as value","ba4bcc52":"we can observe the type of our results","4ef6d785":"Note that the coolection elements are in general seprated by \":\" this can be observed in the data lab section of Kaggle","c6a11dc4":"The iloc indexer syntax is data.iloc[<row selection>, <column selection>], which is sure to be a source of confusion for R users. \u201ciloc\u201d in pandas is used to select rows and columns by number, in the order that they appear in the data frame Using ilocindexing with the command, edu.iloc[90:94][['TIME','GEO']], selects a subset of columns and rows using the labels as our references instead of the positions. Thus the data for\u2018Time\u2019 and \u2018Geo\u2019 for the row indexes of 90, 91,92 and 93 are returned as per the aboved figure","ebb258b7":"we got the new data fram with the selection of rows : 90,91,92,93 and we can get Time and geometric","7c0eca2d":"*Question1:*Which is the size of edu DataFrame (row*columns)?\n    384 rows and 3 columns","1666b020":"head() method. Python is a great language for doing data analysis, primarily because of the fantastic ecosystem of data-centric Python packages. Pandas is one of those packages and makes importing and analyzing data much easier. Pandas head() method is used to return top n (5 by default) rows of a data frame or series.","f8ac0bd7":"The describe() function computes a summary of statistics pertaining to the DataFrame columns:\n\n\u25cfCount represents: the number of (rows) non-zero entries in a column (eg TIME)\n\u25cfMean represents the mean value of the columns\n\u25cfStd represents the standard deviation of the column\n\u25cf Min represents the minimum value within the column\n\u25cf 25% represents the value at the first quartile (1st quarter) when the data in the column\nis arranged in ascending order.\n\u25cf 50% represents the value at the second quartile (2nd quarter) when the data in the\ncolumn is arranged in ascending order.\n\u25cf 75% represents the value at the third quartile (3rd quarter) when the data in the column\nis arranged in ascending order\n\u25cf Max represents the maximum value of the columns\nThe instruction describe (), however does not provide statistics on columns which contain string\ndata types.","3c10a4b3":"Note that the coolection elements are in general seprated by \":\" this can be observed in the data lab section of Kaggle."}}