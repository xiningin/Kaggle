{"cell_type":{"14ca7ad9":"code","f89a8f5f":"code","30ae0ed5":"code","317cbd25":"code","bed2c9f3":"code","9cb77965":"code","9c42345c":"code","e93d7bcd":"code","fe022757":"code","84731af7":"code","f2a8e656":"code","a052b58f":"code","23ee8ab3":"code","0c4cff64":"code","701d3c5e":"code","59e09b18":"code","867bc119":"code","f1746867":"code","d8ca3cf0":"code","662797e6":"code","380b2e83":"code","3fcde4b2":"code","b0897412":"code","9473d804":"code","05910d61":"code","ef24f655":"code","51b15ba5":"code","92a9fc6d":"code","308d1c0e":"code","181c696a":"code","758bef7d":"code","1b1418e3":"code","0bb2f48d":"code","ab5ab6b9":"markdown","bdfdf307":"markdown","d13b10ce":"markdown","70d36a03":"markdown","330e3e26":"markdown","80a548f2":"markdown","42e40218":"markdown","5b717d07":"markdown","d067ebd9":"markdown","ed6920e3":"markdown","aaf42bc7":"markdown","8a34851f":"markdown","7a3ef63e":"markdown","e688f4be":"markdown","7c42a600":"markdown","b7ae8539":"markdown","f49cb425":"markdown","b6cf6d8e":"markdown","249d4935":"markdown","c8e55fa4":"markdown","0ec7fe21":"markdown","b827084b":"markdown","878e4eec":"markdown","e9dc8da5":"markdown","7748c683":"markdown","cc550242":"markdown","b7d631d8":"markdown","8254270c":"markdown","bbc980c6":"markdown","0d594d8d":"markdown","4c1b24fc":"markdown","a607775b":"markdown","41704d6b":"markdown","7849f7d6":"markdown"},"source":{"14ca7ad9":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f89a8f5f":"# importing libraries required\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# defining figuresize and theme for plot\nplt.rcParams['figure.figsize'] = (18, 10)\nplt.style.use('ggplot')\n\n# plotting the area graph\nturnover = [2, 7, 14, 17, 20, 27, 30, 38, 25, 18, 6, 1]\nplt.fill_between(np.arange(12), turnover,color=\"skyblue\", alpha=0.4)\nplt.plot(np.arange(12), turnover, color=\"darkblue\",alpha=0.6, linewidth=2)\n\n# customizing the plot\nplt.tick_params(labelsize=15)\nplt.xticks(np.arange(12), np.arange(1,13))\nplt.title('Ice-Cream sells Distribution over an Year', size=20, color='k')\nplt.xlabel('Month', size=18)\nplt.ylabel('Turn-over of ice-cream', size=18)\nplt.ylim(bottom=0)\n\nplt.show()","30ae0ed5":"# importing libraries\nimport numpy as np \nimport matplotlib.pyplot as plt  \n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (18, 8)\nplt.style.use('ggplot')\n\n# creating the dataset \ndata = {'C':20, 'C++':15, 'Java':30,  \n        'Python':35} \ncourses = list(data.keys()) \nvalues = list(data.values())  \n  \n# creating the bar plot \nplt.bar(courses, values, color ='maroon',  \n        width = 0.4) \n\n# customizing the bar plot\nplt.tick_params(labelsize=15)  \nplt.xlabel(\"Courses offered\", size=18) \nplt.ylabel(\"No. of students enrolled\", size=18) \nplt.title(\"Students enrolled in different courses\", size=20, color='k') \nplt.show()","317cbd25":"# importing libraries \nimport matplotlib.pyplot as plt \nimport numpy as np \n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (18, 10)\nplt.style.use('ggplot')\n\n# creating dataset \nnp.random.seed(10) \n  \ndata_1 = np.random.normal(100, 10, 200) \ndata_2 = np.random.normal(90, 20, 200) \ndata_3 = np.random.normal(80, 30, 200) \ndata_4 = np.random.normal(70, 40, 200) \ndata = [data_1, data_2, data_3, data_4]  \n\n\n# creating Box plot \nplt.boxplot(data) \nplt.tick_params(labelsize=15) \nplt.show() ","bed2c9f3":"# importing libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (15, 8)\nplt.style.use('fast')\n\n# create data\nx = np.random.rand(20)\ny = np.random.rand(20)\nz = np.random.rand(20)\ncolors = np.random.rand(20)\n\n# use the scatter function to plot the bubble chart\nplt.scatter(x, y, s=z*1000,c=colors)\n\n# customizing the plot\nplt.tick_params(labelsize=15)\nplt.xlabel(\"X\", size=18)\nplt.ylabel(\"y\", size=18)\nplt.title(\"Bubble Plot with Matplotlib\", size=20, color='k')\nplt.show()","9cb77965":"# importing libraries\nimport folium\nimport pandas as pd\n\n# defining san-francisco coordinates\nSF_COORDINATES = (37.76, -122.45)\n\n# reading san-francisco crime data\ncrimedata = pd.read_csv('\/kaggle\/input\/sanfranciso-crime-dataset\/Police_Department_Incidents_-_Previous_Year__2016_.csv')\n \n# for speed purposes choose only 10 crime records\nMAX_RECORDS = 10\n  \n# create empty map zoomed in on San Francisco\nmap = folium.Map(location=SF_COORDINATES, zoom_start=12)\n \n# add a marker for every record in the filtered data, use a clustered view\nfor each in crimedata[0:MAX_RECORDS].iterrows():\n    folium.CircleMarker(\n        location = [each[1]['Y'],each[1]['X']], \n        clustered_marker = True,\n        color='crimson',\n        fill=True,\n        fill_color='crimson'\n    ).add_to(map)\n  \ndisplay(map)","9c42345c":"# importing libraries\nimport calendar\nimport numpy as np\nfrom matplotlib.patches import Rectangle\nimport matplotlib.pyplot as plt\n\n# defining calendar plot function\ndef plot_calendar(days, months):\n    # non days are grayed\n    ax = plt.gca().axes\n    ax.add_patch(Rectangle((29, 2), width=.8, height=.8, \n                           color='gray', alpha=.3))\n    ax.add_patch(Rectangle((30, 2), width=.8, height=.8,\n                           color='gray', alpha=.5))\n    ax.add_patch(Rectangle((31, 2), width=.8, height=.8,\n                           color='gray', alpha=.5))\n    ax.add_patch(Rectangle((31, 4), width=.8, height=.8,\n                           color='gray', alpha=.5))\n    ax.add_patch(Rectangle((31, 6), width=.8, height=.8,\n                           color='gray', alpha=.5))\n    ax.add_patch(Rectangle((31, 9), width=.8, height=.8,\n                           color='gray', alpha=.5))\n    ax.add_patch(Rectangle((31, 11), width=.8, height=.8,\n                           color='gray', alpha=.5))\n    for d, m in zip(days, months):\n        ax.add_patch(Rectangle((d, m), \n                               width=.8, height=.8, color='coral'))\n    plt.yticks(np.arange(1, 13)+.5, list(calendar.month_abbr)[1:])\n    plt.xticks(np.arange(1,32)+.5, np.arange(1,32))\n    plt.xlim(1, 32)\n    plt.ylim(1, 13)\n    plt.gca().invert_yaxis()\n    # remove borders and ticks\n    for spine in plt.gca().spines.values():\n        spine.set_visible(False)\n    plt.tick_params(top=False, bottom=False, left=False, right=False)\n    plt.title('Full Moons in 2018', size=20)\n    plt.show()","e93d7bcd":"# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (18, 8)\nplt.style.use('grayscale')\n\n# defining data\nfull_moon_day = [2, 31, 2, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22]\nfull_moon_month = [1, 1, 3, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n# plotting the Calendar\nplot_calendar(full_moon_day, full_moon_month)","fe022757":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.dates as mdates\n\ndatafile = '\/kaggle\/input\/week4data\/SPY.csv'\ndata = pd.read_csv(datafile, index_col = 'Date')\ndata.index = pd.to_datetime(data.index) # Converting the dates from string to datetime format\n\n# We need to exctract the OHLC prices into a list of lists:\ndvalues = data[['Open', 'High', 'Low', 'Close']].values.tolist()\n\n# Dates in our index column are in datetime format, we need to comvert them \n# to Matplotlib date format\npdates = mdates.date2num(data.index)\n\n# We prepare a list of lists where each single list is a [date, open, high, low, close] sequence:\nohlc = [ [pdates[i]] + dvalues[i] for i in range(len(pdates)) ]","84731af7":"! pip install mpl_finance","f2a8e656":"# importing libraries\nimport mpl_finance as mpf\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# defining figuresize and theme for the plot\nplt.style.use('fivethirtyeight')\nfig, ax = plt.subplots(figsize = (18,8))\n\n# plotting the candelstick chart\nmpf.candlestick_ohlc(ax, ohlc[-50:], width=0.4)\n\n# customizing the plot\nplt.tick_params(labelsize=15)\nax.set_xlabel('Date', size=18)\nax.set_ylabel('Price ($)', size=18)\nax.set_title('SPDR S&P 500 ETF Trust - Candlestick Chart', size=20, color='k')\nax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))\n\nfig.autofmt_xdate()\nplt.show()","a052b58f":"# importing library\nimport plotly.express as px\n\n# reading the data\ndf = px.data.gapminder().query(\"year==2007\")\n\n# plotting the choropleth map\nfig = px.choropleth(df, locations=\"iso_alpha\",\n                    color=\"lifeExp\", # lifeExp is a column of gapminder\n                    hover_name=\"country\", # column to add to hover information\n                    color_continuous_scale=px.colors.sequential.Plasma)\nfig.show()","23ee8ab3":"# required libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# reading the data\ndata = pd.read_csv('\/kaggle\/input\/la-liga-results-19952020\/LaLiga Complete Matches 1995-2020.csv')\n\n# setting figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (20,10)\nplt.style.use('dark_background')\n\n# creating the countplot\nsns.countplot(data['Season'], palette = 'gnuplot')\n\n# customizing the plot\nplt.title('Number of Matches Played in each Season', fontweight = 30, fontsize =20)\nplt.tick_params(labelsize=15)\nplt.xticks(rotation = 90)\nplt.show()","0c4cff64":"# import libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# read the data\ndiamonds = pd.read_csv('\/kaggle\/input\/diamonds\/diamonds.csv')\n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (15, 10)\nplt.style.use('ggplot')\n\n# plotting the density plot\ndiamonds[\"carat\"].plot(kind=\"density\",  # Create density plot\n                      xlim= (0,5));     # Limit x axis values\n\n# customizing the plot\nplt.tick_params(labelsize=15)","701d3c5e":"# library required\nimport matplotlib.pyplot as plt\n \n# create data\nsize_of_groups=[12,11,3,30]\n\n# Create a pieplot\nplt.pie(size_of_groups)\n#plt.show()\n \n# add a circle at the center\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()\n","59e09b18":"# libraries required\nimport numpy as np \nimport matplotlib.pyplot as plt \n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (18, 12)\nplt.style.use('ggplot')\n\n# example data \nxval = np.arange(0.1, 4, 0.5) \nyval = np.exp(-xval) \n\n# plot the error-bar\nplt.errorbar(xval, yval, xerr = 0.4, yerr = 0.5) \n\n# customize the plot\nplt.tick_params(labelsize=15)\nplt.xlabel(\"X\", size=18)\nplt.ylabel(\"y\", size=18)\nplt.title(\"Error Bar with Matplotlib\", size=20)\nplt.show() \n","867bc119":"# Importing the matplotlb.pyplot \nimport matplotlib.pyplot as plt \n\nplt.rcParams['figure.figsize'] = (18, 10)\nplt.style.use('ggplot')\n\n# Declaring a figure \"gnt\" \nfig, gnt = plt.subplots() \n\n# Setting Y-axis limits \ngnt.set_ylim(0, 50) \n\n# Setting X-axis limits \ngnt.set_xlim(0, 160) \n\n# Setting labels for x-axis and y-axis \ngnt.set_xlabel('seconds since start', size=18) \ngnt.set_ylabel('Processor', size=18) \n\n# Setting ticks on y-axis \ngnt.set_yticks([15, 25, 35]) \n# Labelling tickes of y-axis \ngnt.set_yticklabels(['1', '2', '3']) \n\n# Setting graph attribute \ngnt.grid(True) \n\n# Declaring a bar in schedule \ngnt.broken_barh([(40, 50)], (30, 9), facecolors =('tab:orange')) \n\n# Declaring multiple bars in at same level and same width \ngnt.broken_barh([(110, 10), (150, 10)], (10, 9), \n\t\t\t\t\t\tfacecolors ='tab:blue') \n\ngnt.broken_barh([(10, 50), (100, 20), (130, 10)], (20, 9), \n\t\t\t\t\t\t\t\tfacecolors =('tab:red')) \nplt.title(\"Gantt Chart for task sheduling in CPU\", size=20)\n\nplt.show()\n","f1746867":"# libraries required\nimport seaborn as sns\n\n# reading and cleaning data\ndiamonds = pd.read_csv('\/kaggle\/input\/diamonds\/diamonds.csv')\ndiamonds = diamonds.drop(columns=['Unnamed: 0'])\n\n# defining plot size\nplt.figure(figsize=(14,12))\n\n# plotting the heatmap\nsns.heatmap(diamonds.corr(), linewidth=0.2, cmap=\"YlGnBu\", annot=True)\nplt.tick_params(labelsize=15)\nplt.show() ","d8ca3cf0":"# libraries required\nimport matplotlib.pyplot as plt\n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (18, 8)\nplt.style.use('bmh')\n\n# plotting the bar graph\nplt.bar([1,3,5,7,9],[5,2,7,8,2], label=\"Example one\")\nplt.bar([2,4,6,8,10],[8,6,2,5,6], label=\"Example two\", color='g')\n\n# customizing the plot\nplt.legend()\nplt.tick_params(labelsize=15)\nplt.xlabel('Bar number', size=18)\nplt.ylabel('Height', size=18)\nplt.title('Histogram',size=20, color='k')\n\nplt.show()","662797e6":"# libraries required\nimport matplotlib.pyplot as plt\n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (15, 7)\nplt.style.use('ggplot')\n\n# using the 'diamond dataset'\ndiamond = diamonds.head(10)\n\n# plotting the line plot\nplt.plot(diamond['price'], diamond['carat'])\n\n# customizing the plot\nplt.tick_params(labelsize=15)\nplt.xlabel('Price', size=18)\nplt.ylabel('Carat', size=18)\nplt.title('Diamonds Price vs Carat - Line Plot',size=20, color='k')\nplt.show()","380b2e83":"# libraries required\nfrom statsmodels.graphics.mosaicplot import mosaic\nimport matplotlib.pyplot as plt\nimport pandas\n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (15, 12)\nplt.style.use('ggplot')\n\n# creating the dataframe\ngender = ['male', 'male', 'male', 'female', 'female', 'female']\npet = ['cat', 'dog', 'dog', 'cat', 'dog', 'cat']\ndata = pandas.DataFrame({'gender': gender, 'pet': pet})\n\n# plotting the data\nmosaic(data, ['pet', 'gender'])\n\nplt.title('MOSAIC Plot \/ Marimekko Chart',size=20)\n\nplt.show()","3fcde4b2":"# libraries required\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (15, 8)\nplt.style.use('grayscale')\n \n# set width of bar\nbarWidth = 0.25\n \n# set height of bar\nbars1 = [12, 30, 1, 8, 22]\nbars2 = [28, 6, 16, 5, 10]\nbars3 = [29, 3, 24, 25, 17]\n \n# Set position of bar on X axis\nr1 = np.arange(len(bars1))\nr2 = [x + barWidth for x in r1]\nr3 = [x + barWidth for x in r2]\n \n# Make the plot\nplt.bar(r1, bars1, color='#7f6d5f', width=barWidth, edgecolor='white', label='var1')\nplt.bar(r2, bars2, color='#557f2d', width=barWidth, edgecolor='white', label='var2')\nplt.bar(r3, bars3, color='#2d7f5e', width=barWidth, edgecolor='white', label='var3')\n \n# Add xticks on the middle of the group bars\nplt.tick_params(labelsize=15)\nplt.xlabel('Group', fontweight='bold',size=18)\nplt.xticks([r + barWidth for r in range(len(bars1))], ['A', 'B', 'C', 'D', 'E'])\nplt.title('Grouped Bar Plot, size=20')\n \n# Create legend & Show graphic\nplt.legend()\nplt.show()\n","b0897412":"# libraries required\nimport matplotlib.pyplot as plt\n\n# defining figuresize for the plot\nplt.rcParams['figure.figsize'] = (18, 10)\n\n# Pie chart, where the slices will be ordered and plotted counter-clockwise:\nlabels = 'Frogs', 'Hogs', 'Dogs', 'Logs'\nsizes = [15, 30, 45, 10]\nexplode = (0, 0.1, 0, 0)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()","9473d804":"# libraries required\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (18, 12)\nplt.style.use('dark_background')\n\n# creating data for plot\ndf = pd.DataFrame({'Age': ['0-4','5-9','10-14','15-19','20-24','25-29','30-34','35-39','40-44','45-49','50-54','55-59','60-64','65-69','70-74','75-79','80-84','85-89','90-94','95-99','100+'], \n                    'Male': [-49228000, -61283000, -64391000, -52437000, -42955000, -44667000, -31570000, -23887000, -22390000, -20971000, -17685000, -15450000, -13932000, -11020000, -7611000, -4653000, -1952000, -625000, -116000, -14000, -1000], \n                    'Female': [52367000, 64959000, 67161000, 55388000, 45448000, 47129000, 33436000, 26710000, 25627000, 23612000, 20075000, 16368000, 14220000, 10125000, 5984000, 3131000, 1151000, 312000, 49000, 4000, 0]})\n\n\nAgeClass = ['100+','95-99','90-94','85-89','80-84','75-79','70-74','65-69','60-64','55-59','50-54','45-49','40-44','35-39','30-34','25-29','20-24','15-19','10-14','5-9','0-4']\n\n# creating the population pyramid\nbar_plot = sns.barplot(x='Male', y='Age', data=df, order=AgeClass)\nbar_plot = sns.barplot(x='Female', y='Age', data=df, order=AgeClass)\n\n# customizing the plot\nplt.tick_params(labelsize=15)\nbar_plot.set(xlabel=\"Population (hundreds of millions)\", ylabel=\"Age-Group\", title = \"Population Pyramid\")\nplt.show()","05910d61":"# Libraries required\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom math import pi\n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (18, 12)\nplt.style.use('ggplot')\n \n# DataFrame for plot\ndf = pd.DataFrame({\n'group': ['A','B','C','D'],\n'var1': [38, 1.5, 30, 4],\n'var2': [29, 10, 9, 34],\n'var3': [8, 39, 23, 24],\n'var4': [7, 31, 33, 14],\n'var5': [28, 15, 32, 14]\n})\n \n# number of variable\ncategories=list(df)[1:]\nN = len(categories)\n \n# We are going to plot the first line of the data frame.\n# But we need to repeat the first value to close the circular graph:\nvalues=df.loc[0].drop('group').values.flatten().tolist()\nvalues += values[:1]\nvalues\n \n# What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\nangles = [n \/ float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]\n \n# Initialise the spider plot\nax = plt.subplot(111, polar=True)\n \n# Draw one axe per variable + add labels labels yet\nplt.xticks(angles[:-1], categories, color='grey', size=8)\n \n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([10,20,30], [\"10\",\"20\",\"30\"], color=\"grey\", size=7)\nplt.ylim(0,40)\n\n\nplt.tick_params(labelsize=15)\nplt.title('Radar Chart',size=20)\n\n# Plot data\nax.plot(angles, values, linewidth=1, linestyle='solid')\n \n# Fill area\nax.fill(angles, values, 'b', alpha=0.1)\n\nplt.show()","ef24f655":"# libraries required\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom math import log10\n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (18, 12)\nplt.style.use('ggplot')\n\nlabels = list(\"ABCDEFG\")\ndata = [21, 57, 88, 14, 76, 91, 26]\n#number of data points\nn = len(data)\n#find max value for full ring\nk = 10 ** int(log10(max(data)))\nm = k * (1 + max(data) \/\/ k)\n\n#radius of donut chart\nr = 1.5\n#calculate width of each ring\nw = r \/ n \n\n#create colors along a chosen colormap\ncolors = [cm.terrain(i \/ n) for i in range(n)]\n\n#create figure, axis\nfig, ax = plt.subplots()\nax.axis(\"equal\")\n\n#create rings of donut chart\nfor i in range(n):\n    #hide labels in segments with textprops: alpha = 0 - transparent, alpha = 1 - visible\n    innerring, _ = ax.pie([m - data[i], data[i]], radius = r - i * w, startangle = 90, labels = [\"\", labels[i]], labeldistance = 1 - 1 \/ (1.5 * (n - i)), textprops = {\"alpha\": 0}, colors = [\"white\", colors[i]])\n    plt.setp(innerring, width = w, edgecolor = \"white\")\n\nplt.legend()\nplt.show()","51b15ba5":"# libraries required\nimport matplotlib.pyplot as plt \n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (15, 10)\nplt.style.use('ggplot')\n\n# creating data points\nx =[5, 7, 8, 7, 2, 17, 2, 9, \n    4, 11, 12, 9, 6]  \ny =[99, 86, 87, 88, 100, 86,  \n    103, 87, 94, 78, 77, 85, 86] \n\n# creating the plot\nplt.scatter(x, y, c =\"blue\") \n\nplt.tick_params(labelsize=15)\n# To show the plot \nplt.show()","92a9fc6d":"# libraries required\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (20, 9)\nplt.style.use('ggplot')\n \n# Data\nx=range(1,6)\ny=[ [1,4,6,8,9], [2,2,7,10,12], [2,8,5,10,6] ]\n \n# Plot\nplt.stackplot(x,y, labels=['A','B','C'])\nplt.legend(loc='upper left')\nplt.show()","308d1c0e":"# libraries required\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import rc\nimport pandas as pd\n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (15, 10)\nplt.style.use('seaborn-pastel')\n \n# Data\nr = [0,1,2,3,4]\nraw_data = {'greenBars': [20, 1.5, 7, 10, 5], 'orangeBars': [5, 15, 5, 10, 15],'blueBars': [2, 15, 18, 5, 10]}\ndf = pd.DataFrame(raw_data)\n \n# From raw value to percentage\ntotals = [i+j+k for i,j,k in zip(df['greenBars'], df['orangeBars'], df['blueBars'])]\ngreenBars = [i \/ j * 100 for i,j in zip(df['greenBars'], totals)]\norangeBars = [i \/ j * 100 for i,j in zip(df['orangeBars'], totals)]\nblueBars = [i \/ j * 100 for i,j in zip(df['blueBars'], totals)]\n \n# plot\nbarWidth = 0.85\nnames = ('A','B','C','D','E')\n# Create green Bars\nplt.bar(r, greenBars, color='#b5ffb9', edgecolor='white', width=barWidth)\n# Create orange Bars\nplt.bar(r, orangeBars, bottom=greenBars, color='#f9bc86', edgecolor='white', width=barWidth)\n# Create blue Bars\nplt.bar(r, blueBars, bottom=[i+j for i,j in zip(greenBars, orangeBars)], color='#a3acff', edgecolor='white', width=barWidth)\n \n# Custom x axis\nplt.xticks(r, names)\nplt.xlabel(\"group\")\n \n# Show graphic\nplt.show()\n","181c696a":"#libraries required\nimport matplotlib.pyplot as plt\nimport squarify # !pip install squarify (algorithm for treemap)\n\n# defining figuresize\nplt.rcParams['figure.figsize'] = (15, 10)\n\n# plotting the figure\nsquarify.plot(sizes=[13,22,35,5], label=[\"group A\", \"group B\", \"group C\", \"group D\"], color=[\"red\",\"green\",\"blue\", \"grey\"], alpha=.4)\nplt.axis('off')\nplt.show()","758bef7d":"# libraries required\nimport matplotlib.pyplot as plt\nfrom matplotlib_venn import venn2\n \n# First way to call the 2 group Venn diagram:\nvenn2(subsets = (10, 5, 2), set_labels = ('Group A', 'Group B'))\nplt.show()","1b1418e3":"# libraries required\nimport matplotlib.pyplot as plt\n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (18, 12)\nplt.style.use('Solarize_Light2')\n\n# creating the data\nnp.random.seed(10)\ncollectn_1 = np.random.normal(100, 10, 200)\ncollectn_2 = np.random.normal(80, 30, 200)\ncollectn_3 = np.random.normal(90, 20, 200)\ncollectn_4 = np.random.normal(70, 25, 200)\n\n# combine these different collections into a list\ndata_to_plot = [collectn_1, collectn_2, collectn_3, collectn_4]\n\n# Create a figure instance\nfig = plt.figure()\n\n# Create an axes instance\nax = fig.add_axes([0,0,1,1])\n\n# Create the boxplot\nbp = ax.violinplot(data_to_plot)\nplt.tick_params(labelsize=15)\nplt.show()","0bb2f48d":"# libraries required\nfrom wordcloud import WordCloud\n\n# defining figuresize and theme for the plot\nplt.rcParams['figure.figsize'] = (15, 8)\nplt.style.use('fast')\n\n# create the word cloud\nwc = WordCloud(background_color = 'white', width = 1500, height = 800).generate(str(crimedata['Descript']))\n\nplt.imshow(wc)\nplt.axis('off')\nplt.show()","ab5ab6b9":"<a id = 10><\/a>\n# Density Plot\n> Density plots are used to observe the distribution of a variable in a dataset. It plots the graph on a continuous interval or time-period. This is also known as Kernel density plot. Density plots are a variation of Histograms.","bdfdf307":"<a id = 29><\/a>\n# Word Cloud\n> A word cloud is an image composed of words used in a particular text or subject, in which the size of each word indicates its frequency or importance.\n\n> So, the more often a specific words appears in your text, the bigger and bolder it appears in your word cloud.","d13b10ce":"<a id = 1><\/a>\n\n# Area Graph\n> Area Graphs are used to display the development of quantitative values over an interval or time period. They are most commonly used to show trends, rather than convey specific values.","70d36a03":"<a id = 20><\/a>\n# Population Pyramid Chart\n> A Population Pyramid is a pair of back-to-back Histograms (for each sex) that displays the distribution of a population in all age groups and in both sexes.","330e3e26":"> A Bubble Chart resembles a combination of a Scatterplot and a Proportional Area Chart.\n* It is an extension of the scatter plot used to look at relationships between three numeric variables.\n* Each dot in a bubble chart corresponds with a single data point, and the variables' values for each point are indicated by horizontal position, vertical position, and dot size.","80a548f2":"<a id = 6><\/a>\n# Calendar","42e40218":"<a id = 16><\/a>\n# Line Plot\n> A line chart or line plot or line graph or curve chart is a type of chart which displays information as a series of data points called 'markers' connected by straight line segments. ","5b717d07":"<a id = 2><\/a>\n# Bar Chart\/ Graph\n>A bar graph uses a horizontal or vertical rectangular bar that levels off at the appropriate level.\n* Each bar or column in a barchart is of equal width.\n* All bars have a common base.\n* The height of the bar corresponds to the value of the data.\n* The distance between each bar is the same.","d067ebd9":"<a id = 14><\/a>\n# Heatmap\n\n> A heat map is a data visualization technique that shows magnitude of a phenomenon as color in two dimensions. The variation in color may be by hue or intensity, giving obvious visual cues to the reader about how the phenomenon is clustered or varies over space.","ed6920e3":"<a id = 19><\/a>\n# Pie Chart\n> A pie chart is a circular statistical graphic, which is divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice, is proportional to the quantity it represents.","aaf42bc7":"<a id = 23><\/a>\n# Scatter Plot\n> A scatter plot is a type of plot or mathematical diagram using Cartesian coordinates to display values for typically two variables for a set of data.","8a34851f":"<a id = 18><\/a>\n# Multi set Bar Chart\n> Multi-set bar charts, also known as clustered bar charts, are a variation of a bar chart where two or more data sets are plotted side by side along a common axis.","7a3ef63e":"## Data Visualization","e688f4be":"<a id = 25><\/a>\n# Stacked Barplot\n> The stacked bar chart (aka stacked bar graph) extends the standard bar chart from looking at numeric values across one categorical variable to two. Each bar in a standard bar chart is divided into a number of sub-bars stacked end to end, each one corresponding to a level of the second categorical variable.","7c42a600":"<a id = 5><\/a>\n# Bubble Map","b7ae8539":"<a id = 8><\/a>\n# Choropleth Map\n> A choropleth map is a type of thematic map in which areas are shaded or patterned in proportion to a statistical variable that represents an aggregate summary of a geographic characteristic within each area, such as population density or per-capita income.","f49cb425":"<a id = 24><\/a>\n# Stacked Area Chart","b6cf6d8e":"<a id = 11><\/a>\n# Donut Chart\n> Donut Chart (also known as Doughnut chart) is a variation on a Pie chart except it has a round hole in the center which makes it look like a donut","249d4935":"<a id = 7><\/a>\n# Candelstick Chart\n> A candlestick chart is a style of financial chart used to describe price movements of a security, derivative, or currency. Each \"candlestick\" typically shows one day, thus a one-month chart may show the 20 trading days as 20 candlesticks.","c8e55fa4":"## Table of Content\n* [Area Graph](#1)\n* [Bar Graph](#2)\n* [Box Plot](#3)\n* [Bubble Chart](#4)\n* [Bubble Map](#5)\n* [Calendar](#6)\n* [Candelstick Chart](#7)\n* [Chropleth Map](#8)\n* [Count Plot](#9)\n* [Density Chart](#10)\n* [Donut Chart](#11)\n* [Error Bars](#12)\n* [Gantt Chart](#13)\n* [HeatMap](#14)\n* [Histogram](#15)\n* [Line Plot](#16)\n* [Mosaic Plot](#17)\n* [Grouped Bar Graph](#18)\n* [Pie Chart](#19)\n* [Population Pyramid](#20)\n* [Radar Chart](#21)\n* [Radial Bar Chart](#22)\n* [Scatter Plot](#23)\n* [Stacked Area Chart](#24)\n* [Stacked Bar Plot](#25)\n* [Tree Map](#26)\n* [Venn Diagram](#27)\n* [Violin Plot](#28)\n* [Word Cloud](#29)","0ec7fe21":"<a id = 13><\/a>\n# Gantt Chart\n> A Gantt chart is a type of bar chart that illustrates a project schedule, named after its inventor, Henry Gantt.","b827084b":"<a id = 17><\/a>\n# Mosaic Plot\n> A mosaic plot is a graphical display of the cell frequencies of a contingency table in which the area of boxes of the plot are proportional to the cell frequencies of the contingency table.","878e4eec":"<a id = 3><\/a>\n# Box & Whisker Plot\n\n> A boxplot is a graph that gives us a good indication of how the values in the data are spread out. Boxplots are a standardized way of displaying the distribution of data based on a five number summary **(\u201cminimum\u201d, first quartile (Q1), median, third quartile (Q3), and \u201cmaximum\u201d)**.\n<img src='https:\/\/cdn1.byjus.com\/wp-content\/uploads\/2020\/03\/box-and-whisker-plot.png'>","e9dc8da5":"### All Visualizations are in alphabetical order.","7748c683":"<a id = 15><\/a>\n# Histogram\n> A histogram is a display of statistical information that uses rectangles to show the frequency of data items in successive numerical intervals of equal size.","cc550242":"<a id = 9><\/a>\n# Countplot","b7d631d8":"<a id = 22><\/a>\n# Radial Bar Chart\n> Radial charts use circles to compare different categories. Radial charts are essentially bar charts plotted on a polar coordinate system instead of a cartesian system. Radial bar charts can be used for aesthetic reasons while simple bar charts are better for comparing values.","8254270c":"<a id = 27><\/a>\n# Venn Diagram\n> A Venn diagram is a diagram that shows all possible logical relations between a finite collection of different sets. These diagrams depict elements as points in the plane, and sets as regions inside closed curves. A Venn diagram consists of multiple overlapping closed curves, usually circles, each representing a set.","bbc980c6":"<a id = 4><\/a>\n# Bubble Chart","0d594d8d":"<a id = 28><\/a>\n# Violin Plot\n> A violin plot is a method of plotting numeric data. It is similar to a box plot, with the addition of a rotated kernel density plot on each side. Violin plots are similar to box plots, except that they also show the probability density of the data at different values, usually smoothed by a kernel density estimator.","4c1b24fc":"## End of Notebook","a607775b":"<a id = 26><\/a>\n# Tree Map\n> A treemap chart provides a hierarchical view of your data and makes it easy to spot patterns, such as which items are a store's best sellers. The tree branches are represented by rectangles and each sub-branch is shown as a smaller rectangle.","41704d6b":"<a id = 12><\/a>\n# Error Bars\n> Error bars are graphical representations of the variability of data and used on graphs to indicate the error or uncertainty in a reported measurement. ... Error bars often represent one standard deviation of uncertainty, one standard error, or a particular confidence interval (e.g., a 95% interval).","7849f7d6":"<a id = 21><\/a>\n# Radar Chart\n> A radar chart is a visual interpretation of data bearing multiple dimensions, the radial grid-like structure, the chart displays different categories of values."}}