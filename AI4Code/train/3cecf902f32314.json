{"cell_type":{"982f91a6":"code","7851d7a7":"code","15d1900b":"code","1fcdebb5":"code","3879daf3":"code","b4a5266d":"code","49cdd742":"code","abf7f6cf":"code","1dcf42a6":"code","00a7065a":"code","60e2637c":"code","d8e8c223":"code","5b7b0e65":"code","5d6c4023":"code","fa104777":"code","4003c260":"code","1b740d98":"code","7881ab33":"code","2fcf083e":"code","cd7037f2":"code","70b8263c":"code","41a13f39":"code","f328e389":"markdown"},"source":{"982f91a6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nwine = pd.read_csv('\/kaggle\/input\/wine-quality-binary-classification\/wine.csv', encoding='ISO-8859-1')","7851d7a7":"#importing necessary libraries\nimport numpy as np \nimport pandas as pd \nimport warnings\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.neural_network import MLPClassifier\nimport matplotlib.pyplot as plt\n","15d1900b":"wine.head()","1fcdebb5":"wine.isnull().sum()","3879daf3":"plt.figure(figsize=(40,25))\nplt.subplots_adjust(left=0, bottom=0.5, right=0.9, top=0.9, wspace=0.5, hspace=0.8)\nplt.subplot(141)\nplt.title('Percentage of good and bad quality wine',fontsize = 20)\nwine['quality'].value_counts().plot.pie(autopct=\"%1.1f%%\")","b4a5266d":"wine['quality'].replace({'bad': 0 , 'good': 1}, inplace=True)","49cdd742":"wine.head()","abf7f6cf":"Y = wine['quality']","1dcf42a6":"Y","00a7065a":"X = wine.drop(['quality'],axis = 1)","60e2637c":"X","d8e8c223":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\ntraining_set_scaled = sc.fit_transform(X)","5b7b0e65":"num_val = 0.2\nX_train, X_test, y_train, y_test = train_test_split(training_set_scaled, Y, test_size=num_val, random_state=23)\n","5d6c4023":"mlp = MLPClassifier(hidden_layer_sizes=(15,15,15), activation='relu', solver='adam', max_iter=1000)\nmlp.fit(X_train,y_train)","fa104777":"# y_pred = mlp.predict(X_test)\n# print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","4003c260":"predict_train = mlp.predict(X_train)\npredict_test = mlp.predict(X_test)","1b740d98":"from sklearn.metrics import classification_report,confusion_matrix\n","7881ab33":"cf_matrix = confusion_matrix(y_train,predict_train)\nprint(confusion_matrix(y_train,predict_train))\nprint(classification_report(y_train,predict_train))","2fcf083e":"mlp.predict([[7.4,\t0.700,\t0.00,\t1.9,\t0.076,\t11.0,\t34.0,\t0.99780,\t3.51,\t0.56,\t9.4]])","cd7037f2":"sns.heatmap(cf_matrix, annot=True)","70b8263c":"wine.corr()","41a13f39":"plt.figure(figsize=(12,10))\nsns.heatmap(wine.corr(),annot=True)","f328e389":"## **Krish Sukhani**\n## **TE IT**\n## **Batch D**\n## **59**\n"}}