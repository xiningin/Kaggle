{"cell_type":{"69a920f7":"code","e4e2a459":"code","9f99ab6b":"code","7222dac4":"code","2a949fed":"code","c0562330":"code","3807f860":"code","b981bd3b":"code","3411283a":"code","6f75ab77":"code","aac177fa":"markdown","02d08383":"markdown","63957fee":"markdown","2aa0b73e":"markdown","7c0037bd":"markdown","24e06446":"markdown","86898328":"markdown","21fe0e2a":"markdown","c2243eb3":"markdown","610f3f98":"markdown","a696ab26":"markdown","a89b9d5c":"markdown","84316035":"markdown"},"source":{"69a920f7":"import matplotlib.pyplot as plt # to plot\n\nimport plotly.graph_objs as go # for interactive plots\nfrom plotly import tools\nfrom plotly.offline import iplot\nfrom plotly.subplots import make_subplots\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n","e4e2a459":"data = pd.read_csv(\"..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv\") # reading data","9f99ab6b":"data.head() # showing data's first 5 rows ","7222dac4":"newData = {\"Duration\" : data[\"Time from Start to Finish (seconds)\"], \"Age\" : data.Q1, \"Gender\" : data.Q2, \"Country\" : data.Q3, \"Education Level\" : data.Q4, \"Job\" : data.Q5, \"Coding for Years\" : data.Q6, \"Which Program Do You Use?\" : data.Q7_Part_1, \"Annual Compensation\" : data.Q24}\n\nnewDF = pd.DataFrame(data = newData) # making new smaller data set which i'll use\nnewDF = newDF.drop([0], axis = 0) # dropping first row which is include questions\n\nnewDF[\"Duration\"] = newDF[\"Duration\"].astype(int) # changing data type of duration\nnewDF[\"Duration\"] = newDF[\"Duration\"]\/3600 # convertimg seconds to hours\n\n#newDF[\"Annual Compensation\"] = newDF[\"Annual Compensation\"].astype(int) \n\n# changing long names in country column\ncountryNameChange = {\"United States of America\": \"USA\", \n                     \"United Kingdom of Great Britain and Northern Ireland\": \"UK\",\n                     \"Iran, Islamic Republic of...\": \"Iran\",\n                     \"United Arab Emirates\" : \"UAE\",\n                     \"Republic of Korea\" : \"North Korea\" \n                    }\nnewDF[\"Country\"] = newDF[\"Country\"].replace(countryNameChange)\n\n","2a949fed":"# changing data type of compensation and taking average value of it \navgComp = []\nfor i in newDF[\"Annual Compensation\"]:\n    if i == \"100,000-124,999\":\n        avgComp.append(112500)\n    elif i == \"15,000-19,999\":\n        avgComp.append(17500)\n    elif i == \"125,000-149,999\":\n        avgComp.append(137500)\n    elif i == \"70,000-79,999\":\n        avgComp.append(75000)\n    elif i == \"30,000-39,999\":\n        avgComp.append(35500)\n    elif i == \"90,000-99,999\":\n        avgComp.append(95000)\n    elif i == \"1,000-1,999\":\n        avgComp.append(1500)\n    elif i == \"$0-999\":\n        avgComp.append(500)\n    elif i == \"10,000-14,999\":\n        avgComp.append(12500)\n    elif i == \"150,000-199,999\":\n        avgComp.append(175000)\n    elif i == \"60,000-69,999\":\n        avgComp.append(65000)\n    elif i == \"4,000-4,999\":\n        avgComp.append(4500)\n    elif i == \"> $500,000\":\n        avgComp.append(500000)\n    elif i == \"300,000-500,\":\n        avgComp.append(400000)\n    elif i == \"40,000-49,999\":\n        avgComp.append(45000)\n    elif i == \"25,000-29,999\":\n        avgComp.append(27500)\n    elif i == \"80,000-89,999\":\n        avgComp.append(85000)\n    elif i == \"7,500-9,999\":\n        avgComp.append(8750)\n    elif i == \"50,000-59,999\":\n        avgComp.append(55000)\n    elif i == \"250,000-299,999\":\n        avgComp.append(275000)\n    elif i == \"5,000-7,499\":\n        avgComp.append(6750)\n    elif i == \"2,000-2,999\":\n        avgComp.append(2500)\n    elif i == \"20,000-24,999\":\n        avgComp.append(22500)\n    elif i == \"200,000-249,999\":\n        avgComp.append(225000)\n    elif i == \"3,000-3,999\":\n        avgComp.append(3500)\n    else: \n        avgComp.append(0)\n\n# updating \"Average Compensation\" column\nnewDF[\"Average Compensation\"] = avgComp\nnewDF[\"Average Compensation\"].astype(int)","c0562330":"# preparing to add new continent column\ncontList = []\n\nfor i in newDF[\"Country\"]:\n    if i == \"Colombia\":\n        contList.append(\"South America\")\n    elif i == \"USA\":\n        contList.append(\"North America\")\n    elif i == \"Argentina\":\n        contList.append(\"South America\")\n    elif i == \"Japan\":\n        contList.append(\"Asia\")\n    elif i == \"India\":\n        contList.append(\"Asia\")\n    elif i == \"Brazil\":\n        contList.append(\"South America\")\n    elif i == \"China\":\n        contList.append(\"Asia\")\n    elif i == \"Germany\":\n        contList.append(\"Europe\")\n    elif i == \"Indonesia\":\n        contList.append(\"Asia\")\n    elif i == \"Canada\":\n        contList.append(\"North America\")\n    elif i == \"Switzerland\":\n        contList.append(\"Europe\")\n    elif i == \"Singapore\":\n        contList.append(\"Asia\")\n    elif i == \"Russia\":\n        contList.append(\"Europe\")\n    elif i == \"South Africa\":\n        contList.append(\"Africa\")\n    elif i == \"Egypt\":\n        contList.append(\"Africa\")\n    elif i == \"Netherlands\":\n        contList.append(\"Europe\")\n    elif i == \"Pakistan\":\n        contList.append(\"Asia\")\n    elif i == \"Nepal\":\n        contList.append(\"Asia\")\n    elif i == \"South Korea\":\n        contList.append(\"Asia\")\n    elif i == \"Poland\":\n        contList.append(\"Europe\")\n    elif i == \"Belarus\":\n        contList.append(\"Europe\")\n    elif i == \"Tunisia\":\n        contList.append(\"Africa\")\n    elif i == \"Ukraine\":\n        contList.append(\"Europe\")\n    elif i == \"Belgium\":\n        contList.append(\"Europe\")\n    elif i == \"Saudi Arabia\":\n        contList.append(\"Asia\")\n    elif i == \"Taiwan\":\n        contList.append(\"Asia\")\n    elif i == \"Nigeria\":\n        contList.append(\"Africa\")\n    elif i == \"Italy\":\n        contList.append(\"Europe\")\n    elif i == \"Spain\":\n        contList.append(\"Europe\")\n    elif i == \"UAE\":\n        contList.append(\"Asia\")\n    elif i == \"Mexico\":\n        contList.append(\"North America\")\n    elif i == \"Viet Nam\":\n        contList.append(\"Asia\")\n    elif i == \"Thailand\":\n        contList.append(\"Asia\")\n    elif i == \"UK\":\n        contList.append(\"Europe\")\n    elif i == \"France\":\n        contList.append(\"Europe\")\n    elif i == \"Ghana\":\n        contList.append(\"Africa\")\n    elif i == \"Ireland\":\n        contList.append(\"Europe\")\n    elif i == \"Philippines\":\n        contList.append(\"Asia\")\n    elif i == \"Morocco\":\n        contList.append(\"Africa\")\n    elif i == \"Turkey\":\n        contList.append(\"Europe\")\n    elif i == \"Iran\":\n        contList.append(\"Asia\")\n    elif i == \"Peru\":\n        contList.append(\"South America\")\n    elif i == \"Romania\":\n        contList.append(\"Europe\")\n    elif i == \"Republic of Korea\":\n        contList.append(\"Asia\")\n    elif i == \"Australia\":\n        contList.append(\"Australia\")\n    elif i == \"Chile\":\n        contList.append(\"South America\")\n    elif i == \"Kenya\":\n        contList.append(\"Africa\")\n    elif i == \"Sweden\":\n        contList.append(\"Europe\")\n    elif i == \"Bangladesh\":\n        contList.append(\"Asia\")\n    elif i == \"Greece\":\n        contList.append(\"Europe\")\n    elif i == \"Malaysia\":\n        contList.append(\"Asia\")\n    elif i == \"Portugal\":\n        contList.append(\"Europe\")\n    elif i == \"Israel\":\n        contList.append(\"Asia\")\n    elif i == \"Sri Lanka\":\n        contList.append(\"Asia\")\n    else:\n        contList.append(\"-\")\n\n# adding new column (\"Continet\") to data\nnewDF[\"Continent\"] = contList\nnewDF.head()","3807f860":"list1 = newDF[\"Age\"].unique()\n# sorting values equivalently with value counts output sort\nuniqueSorting = [list1[3], list1[2], list1[4], list1[1], list1[0], list1[7], list1[9], list1[6], list1[5], list1[8], list1[10]]\n\nlist2 = newDF[\"Gender\"].unique()\n# sorting values equivalently with value counts output sort\nuniqueSorting2 = [list2[0], list2[1], list2[3], list2[2], list2[4]]\n\nlist3 = newDF[\"Coding for Years\"].unique()\n# sorting values equivalently with value counts output sort\nuniqueSorting3 = [list3[2], list3[4], list3[3], list3[0], list3[1], list3[5], list3[6]]","b981bd3b":"pie1 = newDF[\"Age\"].value_counts()\nlabels1 = uniqueSorting\n\npie2 = newDF[\"Gender\"].value_counts()\nlabels2 = uniqueSorting2\n\npie3 = newDF[\"Coding for Years\"].value_counts()\nlabels3 = uniqueSorting3\n\nfig = make_subplots(\n    rows = 1, cols = 3,\n    column_widths = [1, 1, 1],\n    row_heights = [2],\n    specs = [[{\"type\" : \"pie\"}, {\"type\" : \"pie\"}, {\"type\" : \"pie\"}]]\n)\n\nfig.add_trace(\n    go.Pie(values = pie1, labels = labels1, name = \"Age Dist.\"),\n    row = 1, col = 2\n)      \n    \nfig.add_trace(\n    go.Pie(values = pie2, labels = labels2, name = \"Gender Dist.\"),\n    row = 1, col = 1\n)      \n\nfig.add_trace(\n    go.Pie(values = pie3, labels = labels3, name = \"Year Dist.\"),\n    row = 1, col = 3\n)      \n\nfig.update_layout(\n    title={\n        'text': \"Distribution of Age, Gender and Coding Years\",\n        'y':0.9,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'\n        })\nfig.update(layout_showlegend = False)\nfig.update_layout(\n    template = \"plotly_dark\"\n)\n          \nfig.show()","3411283a":"\nfig = make_subplots(\n    rows = 1, cols = 2,\n    column_widths = [0.5,0.25],\n    row_heights = [0.5],\n    specs=[[{\"type\": \"bar\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(\n    go.Bar(x = newDF[\"Country\"].value_counts()[:20].index, y = newDF[\"Country\"].value_counts()[:20].values\n, marker = dict(color=\"crimson\"), showlegend = False),\n    row = 1, col = 1\n)\n\nfig.add_trace(\n    go.Pie(values = newDF[\"Continent\"].value_counts().values, labels = newDF[\"Continent\"].value_counts().index, name = \"Continents in Kaggle\"),\n    row = 1, col = 2\n)      \n\nfig.update_xaxes(tickangle = 90)\n\nfig.update_layout(\n    xaxis = dict(\n        title='Countries',\n        titlefont_size=16,\n        tickfont_size=14,\n    ),\n    yaxis = dict(\n        title='Number of Users',\n        titlefont_size=16,\n        tickfont_size=14,\n    )\n)\nfig.update_layout(\n    template = \"plotly_dark\",\n    margin = dict(r = 10, t = 25, b = 80, l = 60),\n    #margin = dict(r = 0, t = 0, b = 80, l = 50),\n    annotations=[\n        dict(\n            visible = False,\n            showarrow = False,\n            xref = \"paper\",\n            yref = \"paper\",\n            x = 0,\n            y = 0)\n    ]\n)\nfig.update_layout(\n    updatemenus=[\n        dict(\n            type = \"buttons\",\n            direction = \"right\",\n            x = 0.55,\n            y = 1.2,\n            showactive = True,\n            bgcolor = '#EBEBEB',\n            bordercolor = '#C20000',\n            font = dict(size=11, color='#000000'),\n            buttons = list(\n                [\n                    dict(\n                        label = \"Top 20\",\n                        method = \"update\",\n                        args = [{\"x\": [newDF[\"Country\"].value_counts()[:20].index],\"y\": [newDF[\"Country\"].value_counts()[:20].values]}],\n                    ),\n                    dict(\n                        label = \"Asia\",\n                        method = \"update\",\n                        args = [{\"x\": [newDF.Country[newDF['Continent'] == 'Asia'].value_counts().index],\"y\": [newDF.Country[newDF['Continent'] == 'Asia'].value_counts().values]}],\n                        visible = True,\n                    ),\n                    dict(\n                        label = \"Africa\",\n                        method = \"update\",\n                        args = [{\"x\": [newDF.Country[newDF['Continent'] == 'Africa'].value_counts().index],\"y\": [newDF.Country[newDF['Continent'] == 'Africa'].value_counts().values]}],\n                    ),\n                    dict(\n                        label = \"Europe\",\n                        method = \"update\",\n                        args = [{\"x\": [newDF.Country[newDF['Continent'] == 'Europe'].value_counts().index],\"y\": [newDF.Country[newDF['Continent'] == 'Europe'].value_counts().values]}],\n                    ),\n                    dict(\n                        label = \"North America\",\n                        method = \"update\",\n                        args = [{\"x\": [newDF.Country[newDF['Continent'] == 'North America'].value_counts().index],\"y\": [newDF.Country[newDF['Continent'] == 'North America'].value_counts().values]}],\n                    ),\n                    dict(\n                        label = \"South America\",\n                        method = \"update\",\n                        args = [{\"x\": [newDF.Country[newDF['Continent'] == 'South America'].value_counts().index],\"y\": [newDF.Country[newDF['Continent'] == 'South America'].value_counts().values]}],\n                    ),\n                    \n                ]\n            ),\n        )\n    ]\n)\nfig.show()","6f75ab77":"fig = go.Figure()\n\nfig.add_trace(go.Box(\n    x = newDF[\"Country\"],\n    y = newDF[\"Average Compensation\"],\n    \n    marker = dict(\n        color = 'rgb(220, 20, 60)',\n    )\n)\n)\n\nfig.update_layout(\n    template = \"plotly_dark\",\n    autosize=False,\n    width=1000,\n    height=500,\n)    \n\nfig.update_layout(\n    title={\n        'text': 'Box Plot of Annual Average Compensation via Countries',\n        'y':0.9,\n        'x':0.475,\n        'xanchor': 'center',\n        'yanchor': 'top'\n        })\n\nfig.show()\n","aac177fa":"<a id =\"6\"><\/a><br>\n### Subplots: Bar and Pie Charts for Counting Users by Countries and Continents\n\nIn this section, users were categorized according to where they are from and according to which continent their country belongs. Bar chart and pie chart were used to show distribution.","02d08383":"<font color = 'green'> \n    \n    \n    \n Me and my team just started this adventure. Please, support us with your UPVOTES. Thank you all!  \n    ![image.png](attachment:image.png)","63957fee":"* The chart above is suitable for understanding the income levels of countries. \n* It can be predicted which countries have high income levels even by looking out of the corner of your eye. For example: USA, Switzerland, Australia, Israel...\n* All countires have outliers which is out of average.\n* Almost half of the countries have high average compensatitons fee as $500000.\n* Countries that exceed some values can be divided into classes by putting limits on demand.\n","2aa0b73e":"The results that can be obtained from the above charts are as follows:\n\n* The majority of Kaggle users are men. So, it can be said that if somebody will join Kaggle, that person is very likely to be a man. \n* There is no group that constitutes the majority in the age distribution. However, it can be said that the majority of the distribution consists of 18-29 year old users.\n* The same thing can be said about the age distribution for this chart. There is no the majority group. In addition, It can be observed that the number of users who have been dealing with coding for **1-2 years** and users who have been dealing with coding for **3-5 years** is very close to each other. Also, It is seen that the number of users who have been dealing with coding for **1 year or less** is also significantly higher.","7c0037bd":"<a id =\"5\"><\/a><br>\n### Pie Charts: Distribution of Age, Gender and Coding Years\n\nIn this section, there are three **pie charts** to visualize distribution of age, gender and coding years features. With this chart, it can be observed where and what is **intense** or **sparse**.","24e06446":"<a id =\"3\"><\/a><br>\n## Simplify and Organise Data\n\n**Simplification** and **organization** data are very helpful to focus on spesific subjects. Thanks to this, you can:\n\n* Get rid of missing values and data you won't use.\n* Change long names in columns or rows which are effecting your charts in bad way.\n* Add new columns or rows which are convenient with data.\n* Change data type of colums.\n\nAre these all? Of course not! You have many option to make data better for your work.\n\n![image.png](attachment:image.png)","86898328":"<a id =\"4\"><\/a><br>\n## Visualization\n\n**Visualization** is one of the most important part to understand about data more. With visualization, you can:\n\n* See relationships between features.\n* Realise new things which could not see before while looking tables.\n* Set up your machine learning model with this part.\n* Make your notebook more fun :)\n* Categorize and manipulate data however you want for visualizing.\n\nAfter doing this, you can:\n\n* Deduce.\n* Fit your machine learning algorithm.\n\nAnd more!\n\n![image.png](attachment:image.png)","21fe0e2a":"<a id =\"1\"><\/a><br>\n## Import Libraries \n\nFirstly, libraries need to be imported for using next examinations. \n\n* <font color = 'red'> matplotlib.pyplot: <font color = 'black'> This library provides basic charts to visualize data.\n* <font color = 'red'> plotly: <font color = 'black'> This library provides interactive charts to visualize data and you can see more info when you are on these types of charts.\n* <font color = 'red'> numpy: <font color = 'black'> This library is for scientific computing.\n* <font color = 'red'> pandas: <font color = 'black'> This library is a fast, powerful, flexible and easy to use open source data analysis.\n* <font color = 'red'> seaborn: <font color = 'black'> This library is data visualization library based on matplotlib. It provides a high-level interface for informative statistical graphics.   \n    ","c2243eb3":"The results that can be obtained from the interactive bar chart above are as follows:\n\n* <font color = 'red'> Top 20: <font color = 'black'> Although the majority of the countries in the first twenty are **Asian** and **European** countries. But, the number of **USA** users is almost higher than the number of users in **European** countries. Also, **India** is the country that dominates this group by far.\n* <font color = 'red'> Asia: <font color = 'black'> There are 19 countries included in the **Asia**n continent. **India** takes the lead among these countries. Then, it can be said that **Japan** and **China** have user density compared to other countries.\n* <font color = 'red'> Africa: <font color = 'black'> There are 7 countries included in the **African** continent. **Nigeria** is the country with the highest number of users among these countries. The number of users in the following 4 countries is very close to each other.\n* <font color = 'red'> Europe: <font color = 'black'> There are 18 countries included in the **European** continent. The number of users ranges from 54 **(Ireland)** to 582 **(Russia)**. There is a certain difference in the number of users of the first three countries. However, the user numbers of the following 3 countries are very close to each other.\n* <font color = 'red'> North America: <font color = 'black'> Three countries with a far higher number of users in the **USA** are included in this continent.\n* <font color = 'red'> South America: <font color = 'black'> There are 5 countries including the **South America** continent. **Brazil** is the country with the most users. However, the user numbers of **Peru** and **Chile** are very similar.     \n    \nOther results that can be obtained from the pie chart above are as follows:\n* It can be seen that users in **Asia** have far superiority compared to other continents. After examining the bar chart, we can also say that **India** is the country with the greatest contribution to this superiority.\n* There is no country that dominates as the majority in the **European** continent, which follows the **Asia** continent.\n* The **North America** continent is the 3rd with the highest rate in the pie chart. However, in this continent, the **USA** has a tremendous advantage over other countries.    ","610f3f98":"<a id =\"2\"><\/a><br>\n## Load and Check Data\n\nSecondly, data need to be read in order to analyze it.","a696ab26":"![image.png](attachment:image.png)\n# Who are we?\nHello Kaggle Users! Hello Experts and Beginners! Hello everyone! \n\nWe all use this platform to write better codes and analyze data. But, I think it is **NOT** enough! We live in the same world, however we do not know about different cultures, economic situations or similarity with people who are from across the world. \n\nIt is time to know more about your colleague, your coder friend or other users who is commenting for your notebook. Now, we will see under what conditions your friend wrote her\/his code or preferred programming language and more.\n\nLet's review the content of this notebook below:\n\n<font color = 'red'>\n    \n1.  [Import Libraries](#1)\n    \n1.  [Load and Check Data](#2)\n    \n1.  [Simplify and Organise Data](#3)  \n    \n1.  [Visualization](#4)\n    \n    [Pie Charts: Distribution of Age, Gender and Coding Years](#5)\n    \n    [Subplots: Bar and Pie Charts for Counting Users by Countries and Continents](#6)\n    \n    [Box Plot: Annual Average Compensation via Countries](#7)\n    \n    .\n    \n    .\n    \n    .\n    \n    ...It's still in process! :)\n    \n","a89b9d5c":"## References\n\n* https:\/\/seaborn.pydata.org\/\n* https:\/\/pandas.pydata.org\/\n* https:\/\/plotly.com\/python\/\n* https:\/\/numpy.org\/\n* https:\/\/matplotlib.org\/\n* https:\/\/www.google.com\/imghp?hl=tr&tab=wi&ogbl\n","84316035":"<a id =\"7\"><\/a><br>\n### Box Chart: Annual Average Compensation via Countries\n\nThe box chart is a very useful chart used for analyzing statistical data. In this section, countries' average annual compensation fees are shown in the chart. The following data can be seen in the chart:\n* q1 \n* q3 \n* Median \n* Upper fence \n* Max \n"}}