{"cell_type":{"37986a54":"code","ce42b072":"code","6a342584":"code","9ddf1add":"code","450280d9":"code","4823d470":"code","aa265b2f":"code","23fc48cb":"code","50eac2e1":"code","597f9f3c":"code","2f9eda5c":"code","4d45c579":"code","2e623f9f":"code","12f2c458":"code","65eed974":"code","1869f6b7":"code","c9065888":"code","b29a18cc":"code","34df1da9":"code","d6fb90b9":"code","d13e6011":"code","e26ddf6a":"code","017d3f02":"code","bfcd706d":"code","caa4e52c":"code","e024dbc1":"code","413a72fc":"code","8e78467f":"code","42abbc5d":"code","eb458613":"code","7d9616ef":"code","593ed81c":"code","ad22f30e":"code","cdb0bb2d":"code","26b6ac7f":"code","4c6f2ad7":"code","91b1a741":"code","08da6b42":"code","e0e0495c":"code","5cdfa854":"code","c7a2f1b7":"code","679522aa":"code","9c883a72":"code","173f412b":"code","6bde87d7":"code","1f5845eb":"code","7abb6047":"code","b7022835":"code","f81f7562":"code","5f9b0297":"code","5760dad2":"code","e48c558c":"code","a47a341e":"code","0ea3c94e":"code","8d29371b":"code","523f2d76":"code","66c45a24":"code","99c87fb5":"code","3add1bea":"code","28d9be7f":"code","9e63f2b5":"code","caf5c4ee":"code","78d268b1":"code","58b61162":"code","72f755db":"code","056daebb":"code","614d1099":"code","f668d05a":"code","ef20f3e7":"code","7ea51b92":"code","98f67a11":"code","1dc04219":"code","39b78603":"code","6f3b75d8":"code","db810488":"code","7d0c8514":"code","f32d39e9":"code","8e9b7a36":"code","6d9fcf6a":"code","1e34bff9":"code","fe363391":"code","960211f1":"code","b50de049":"code","6c18a274":"code","bd01456a":"code","cd7be5d1":"code","e916ffd1":"code","ac606882":"code","70ba7166":"code","46ab36b6":"code","799d9635":"code","7ae426fd":"code","73f11bdb":"code","9cf5b109":"code","b32b9828":"code","d0b71e91":"code","af1fade1":"code","79e80ea2":"code","155c4e75":"code","1971e71a":"code","c71fa8c3":"code","f4c4c63f":"code","fef0827a":"code","00de43a4":"code","769fa210":"code","ba351c24":"code","4c225c06":"code","8fdf3dfe":"code","c51667ad":"code","2e1a124c":"code","ae1fe180":"code","7e92e4fb":"code","b20c58a8":"code","c9eb0521":"code","131eed98":"code","62d1a82b":"markdown","973c59b8":"markdown","b98b1ea7":"markdown","1c52b417":"markdown","2551a686":"markdown","137faa8f":"markdown","f7be83dc":"markdown","27a23dbf":"markdown","744e1048":"markdown","1a93a8a4":"markdown","a4189db0":"markdown","9c71c2ed":"markdown","fbb85def":"markdown","1b6df8c7":"markdown","9543603c":"markdown","f35f7da4":"markdown","96fb62dc":"markdown","f43c8382":"markdown","f4dbcb08":"markdown","67c13006":"markdown","85e8f33b":"markdown","a4ec47c4":"markdown","caa162a7":"markdown","54e9eeb0":"markdown","427daf6b":"markdown","e8ca73a2":"markdown","727fe141":"markdown","43bf11b6":"markdown","5f69c40a":"markdown","75278b23":"markdown","515abae4":"markdown","159270d4":"markdown","07f5f74e":"markdown","faf05523":"markdown","cebd80b0":"markdown","a7cec205":"markdown","e87da551":"markdown","3c98fc62":"markdown","88006613":"markdown","dc565e17":"markdown","3edaf08e":"markdown","529b33ec":"markdown","1ffd6a6d":"markdown","f6336f22":"markdown","2e15fa04":"markdown","5730e9de":"markdown","945b3472":"markdown","81ea5b40":"markdown","d7eb7cfd":"markdown","33f893c7":"markdown","7b8a3bf5":"markdown","af34c3a5":"markdown","d0a65236":"markdown","8d371b1f":"markdown","06344898":"markdown","7c9f6d1a":"markdown","c01d67ee":"markdown","f6af6ae4":"markdown","02c88dac":"markdown","86893fd1":"markdown","a9112382":"markdown","14e88ab3":"markdown","35e74ffc":"markdown","99eaf152":"markdown","3a9e907e":"markdown","9a940229":"markdown","562b99de":"markdown","602211d1":"markdown","9752e26a":"markdown","0db775f2":"markdown","740c90c4":"markdown","19851746":"markdown","1480aa1f":"markdown","4bc08604":"markdown","2c2c5476":"markdown","20393367":"markdown","18ea6379":"markdown"},"source":{"37986a54":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom IPython.display import Image\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)","ce42b072":"train = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntest = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")","6a342584":"train.head(3)","9ddf1add":"test.head(3)","450280d9":"fig, ax = plt.subplots()\nax.scatter(x = train['GrLivArea'], y = train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","4823d470":"train = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)","aa265b2f":"fig, ax = plt.subplots()\nax.scatter(train['GrLivArea'], train['SalePrice'])\nplt.ylabel('SalePrice', fontsize=13)\nplt.xlabel('GrLivArea', fontsize=13)\nplt.show()","23fc48cb":"cor = train.corr()\ncor_fe = cor.index[abs(cor['SalePrice']) >= 0.3]\ncor_fe","50eac2e1":"plt.figure(figsize=(15,10))\nsns.heatmap(train[cor_fe].corr(),annot=True)","597f9f3c":"fe_name = list(test)\ndf_train = train[fe_name]\ndf = pd.concat((df_train,test))","2f9eda5c":"print(train.shape, test.shape, df.shape)","4d45c579":"from scipy import stats\nfrom scipy.stats import norm","2e623f9f":"sns.distplot(train['SalePrice'],fit = norm)","12f2c458":"stats.probplot(train['SalePrice'], plot=plt)","65eed974":"train['SalePrice'] = np.log1p(train[\"SalePrice\"])\nsns.distplot(train['SalePrice'],fit=norm)","1869f6b7":"stats.probplot(train['SalePrice'], plot=plt)","c9065888":"target = train['SalePrice']","b29a18cc":"null_df = (df.isna().sum() \/ len(df)) *100\nnull_df = null_df.drop(null_df[null_df == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :null_df})\nmissing_data.head(20)","34df1da9":"f, ax = plt.subplots(figsize=(15, 12))\nplt.xticks(rotation='90')\nsns.barplot(x=null_df.index, y=null_df)","d6fb90b9":"df[\"PoolQC\"] = df[\"PoolQC\"].fillna(\"None\")","d13e6011":"df[\"MiscFeature\"] = df[\"MiscFeature\"].fillna(\"None\")","e26ddf6a":"df[\"Alley\"] = df[\"Alley\"].fillna(\"None\")","017d3f02":"df[\"Fence\"] = df[\"Fence\"].fillna(\"None\")","bfcd706d":"df[\"FireplaceQu\"] = df[\"FireplaceQu\"].fillna(\"None\")","caa4e52c":"df[\"LotFrontage\"] = df.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(lambda x: x.fillna(x.median()))","e024dbc1":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    df[col] = df[col].fillna('None')","413a72fc":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    df[col] = df[col].fillna(0)","8e78467f":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    df[col] = df[col].fillna(0)","42abbc5d":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    df[col] = df[col].fillna('None')","eb458613":"df[\"MasVnrType\"] = df[\"MasVnrType\"].fillna(\"None\")\ndf[\"MasVnrArea\"] = df[\"MasVnrArea\"].fillna(0)","7d9616ef":"df['MSZoning'] = df['MSZoning'].fillna(df['MSZoning'].mode()[0])","593ed81c":"df = df.drop(['Utilities'], axis=1)","ad22f30e":"df[\"Functional\"] = df[\"Functional\"].fillna(\"Typ\")","cdb0bb2d":"df['Electrical'] = df['Electrical'].fillna(df['Electrical'].mode()[0])","26b6ac7f":"df['KitchenQual'] = df['KitchenQual'].fillna(df['KitchenQual'].mode()[0])","4c6f2ad7":"df['Exterior1st'] = df['Exterior1st'].fillna(df['Exterior1st'].mode()[0])\ndf['Exterior2nd'] = df['Exterior2nd'].fillna(df['Exterior2nd'].mode()[0])","91b1a741":"df['SaleType'] = df['SaleType'].fillna(df['SaleType'].mode()[0])","08da6b42":"df['MSSubClass'] = df['MSSubClass'].fillna(\"None\")","e0e0495c":"null_df = (df.isna().sum() \/ len(df)) *100\nnull_df = null_df.drop(null_df[null_df == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :null_df})\nmissing_data.head(20)","5cdfa854":"#MSSubClass\ndf['MSSubClass'] = df['MSSubClass'].apply(str)\n#OverallCond\ndf['OverallCond'] = df['OverallCond'].astype(str)\n#YrSold,MoSold\ndf['YrSold'] = df['YrSold'].astype(str)\ndf['MoSold'] = df['MoSold'].astype(str)","c7a2f1b7":"df_obj = df.select_dtypes(include='object')\ndf_obj.head(3)","679522aa":"li_obj = list(df_obj.columns)","9c883a72":"df_num = df.select_dtypes(exclude = 'object')\ndf_num.head(3)","173f412b":"li_num = list(df_num.columns)","6bde87d7":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n\nfor c in cols:\n    lb = LabelEncoder() \n    lb.fit(list(df[c].values)) \n    df[c] = lb.transform(list(df[c].values))","1f5845eb":"df['TotalSF'] = (df['TotalBsmtSF'] \n                       + df['1stFlrSF'] \n                       + df['2ndFlrSF'])\n\ndf['YrBltAndRemod'] = df['YearBuilt'] + df['YearRemodAdd']\n\ndf['Total_sqr_footage'] = (df['BsmtFinSF1'] \n                                 + df['BsmtFinSF2'] \n                                 + df['1stFlrSF'] \n                                 + df['2ndFlrSF']\n                                )\n                                 \n\ndf['Total_Bathrooms'] = (df['FullBath'] \n                               + (0.5 * df['HalfBath']) \n                               + df['BsmtFullBath'] \n                               + (0.5 * df['BsmtHalfBath'])\n                              )\n                               \n\ndf['Total_porch_sf'] = (df['OpenPorchSF'] \n                              + df['3SsnPorch'] \n                              + df['EnclosedPorch'] \n                              + df['ScreenPorch'] \n                              + df['WoodDeckSF']\n                             )","7abb6047":"df['haspool'] = df['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ndf['has2ndfloor'] = df['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ndf['hasgarage'] = df['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\ndf['hasbsmt'] = df['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\ndf['hasfireplace'] = df['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)","b7022835":"row = 11\ncol = 3 \n\nfig, axs = plt.subplots(row,col, figsize = (col*3,row*4))\n\nfor r in range(0,row):\n    for c in range(0,col):\n        i = r*col + c\n        if i < len(li_num):\n            sns.regplot(train[li_num[i]],target , ax = axs[r][c])","f81f7562":"stats.pearsonr(train[li_num[11]],target)","5f9b0297":"strong_num = ['OverallQual','YearBuilt','YearRemodAdd','TotalBsmtSF','1stFlrSF',\n             'FullBath','TotRmsAbvGrd','GarageYrBlt','GarageCars','GrLivArea']","5760dad2":"row = 12\ncol = 4 \n\nfig, axs = plt.subplots(row,col, figsize = (col*4,row*3))\n\nfor r in range(0,row):\n    for c in range(0,col):\n        i = r*col + c\n        if i < len(li_obj):\n            sns.boxplot(train[li_obj[i]],target , ax = axs[r][c])","e48c558c":"strong_obj = [ 'MSZoning', 'Neighborhood', 'Condition2', 'MasVnrType', 'ExterQual', \n                'BsmtQual','CentralAir', 'Electrical', 'KitchenQual', 'SaleType']","a47a341e":"for li in strong_obj:\n    sns.violinplot(x= li, y = target, data=train)\n    plt.show()","0ea3c94e":"numeric_features = df.dtypes[df.dtypes != \"object\"].index","8d29371b":"from scipy.stats import skew \nskewness = df[numeric_features].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)","523f2d76":"high_skewness = skewness[abs(skewness) > 0.5]\nskew_feat = high_skewness.index","66c45a24":"print(high_skewness)\nprint(skew_feat)","99c87fb5":"df[['MiscVal', 'PoolArea', 'haspool', 'LotArea', 'LowQualFinSF',\n       '3SsnPorch', 'LandSlope', 'KitchenAbvGr', 'BsmtFinSF2', 'EnclosedPorch',\n       'ScreenPorch', 'BsmtHalfBath', 'MasVnrArea', 'OpenPorchSF',\n       'WoodDeckSF', 'Total_porch_sf', '1stFlrSF', 'Total_sqr_footage',\n       'LotFrontage', 'GrLivArea', 'TotalSF', 'BsmtFinSF1', 'BsmtUnfSF',\n       '2ndFlrSF', 'TotRmsAbvGrd', 'Fireplaces', 'HalfBath', 'TotalBsmtSF',\n       'BsmtFullBath', 'OverallCond', 'YearBuilt', 'GarageFinish', 'LotShape',\n       'MoSold', 'Alley', 'BsmtExposure', 'KitchenQual', 'ExterQual', 'Fence',\n       'ExterCond', 'BsmtCond', 'PavedDrive', 'BsmtFinType2', 'GarageQual',\n       'CentralAir', 'GarageCond', 'GarageYrBlt', 'hasgarage', 'Functional',\n       'hasbsmt', 'Street', 'PoolQC']].head(3)","3add1bea":"from scipy.special import boxcox1p\nlam = 0.15\nfor feat in skew_feat:\n    df[feat] = boxcox1p(df[feat], lam)","28d9be7f":"df[['MiscVal', 'PoolArea', 'haspool', 'LotArea', 'LowQualFinSF',\n       '3SsnPorch', 'LandSlope', 'KitchenAbvGr', 'BsmtFinSF2', 'EnclosedPorch',\n       'ScreenPorch', 'BsmtHalfBath', 'MasVnrArea', 'OpenPorchSF',\n       'WoodDeckSF', 'Total_porch_sf', '1stFlrSF', 'Total_sqr_footage',\n       'LotFrontage', 'GrLivArea', 'TotalSF', 'BsmtFinSF1', 'BsmtUnfSF',\n       '2ndFlrSF', 'TotRmsAbvGrd', 'Fireplaces', 'HalfBath', 'TotalBsmtSF',\n       'BsmtFullBath', 'OverallCond', 'YearBuilt', 'GarageFinish', 'LotShape',\n       'MoSold', 'Alley', 'BsmtExposure', 'KitchenQual', 'ExterQual', 'Fence',\n       'ExterCond', 'BsmtCond', 'PavedDrive', 'BsmtFinType2', 'GarageQual',\n       'CentralAir', 'GarageCond', 'GarageYrBlt', 'hasgarage', 'Functional',\n       'hasbsmt', 'Street', 'PoolQC']].head(3)","9e63f2b5":"df = pd.get_dummies(df)\nprint(df.shape)","caf5c4ee":"new_train = df[:train.shape[0]]\nnew_test = df[train.shape[0]:]","78d268b1":"new_train = pd.concat([new_train,target], axis=1, sort=False)","58b61162":"corr_new_train = new_train.corr()\nplt.figure(figsize=(5,15))\nsns.heatmap(corr_new_train[['SalePrice']].sort_values(by=['SalePrice'],\n                                ascending=False).head(30),annot=True)","72f755db":"col_corr_dict = corr_new_train['SalePrice'].sort_values(ascending=False).to_dict()","056daebb":"best_columns=[]\nfor key,value in col_corr_dict.items():\n    if ((value>=0.33) & (value<0.9)) | (value<=-0.325):\n        best_columns.append(key)\nprint(len(best_columns))","614d1099":"new_train = new_train.drop(['SalePrice'], axis=1)\nnew_train = new_train.drop(['Id'], axis=1)\nnew_test = new_test.drop(['Id'], axis=1)","f668d05a":"final_train = new_train[best_columns]\nfinal_test = new_test[best_columns]\nfinal_num = list(final_train.columns)","ef20f3e7":"row = 19\ncol = 2\n\nfig, axs = plt.subplots(row,col, figsize = (20,60))\nfig.subplots_adjust(hspace=0.8)\n\nfor r in range(0,row):\n    for c in range(0,col):\n        i = r*col + c\n        if i < len(best_columns):\n            sns.regplot(final_train[final_num[i]],target,fit_reg=True,marker='o', ax = axs[r][c])","7ea51b92":"from sklearn.model_selection import KFold, cross_val_score, GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.linear_model import ElasticNet, Lasso, LinearRegression","98f67a11":"from sklearn.preprocessing import RobustScaler","1dc04219":"rbst_scaler=RobustScaler()\nX_rbst=rbst_scaler.fit_transform(new_train)\ntest_rbst=rbst_scaler.transform(new_test)","39b78603":"import statsmodels.api as sm","6f3b75d8":"model = sm.OLS(target.values, new_train)","db810488":"re = model.fit()","7d0c8514":"re.summary()","f32d39e9":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nvif = pd.DataFrame()\nvif['Features'] = new_train.columns\nvif['vif'] = [variance_inflation_factor(\n    new_train.values, i) for i in range(new_train.shape[1])]","8e9b7a36":"vif.sort_values(by='vif',ascending=False)[165:190]","6d9fcf6a":"from sklearn.preprocessing import RobustScaler\nrbst_scaler=RobustScaler()\nX_rbst=rbst_scaler.fit_transform(new_train)\ntest_rbst=rbst_scaler.transform(new_test)","1e34bff9":"from sklearn.model_selection import GridSearchCV, cross_val_score, StratifiedKFold","fe363391":"kfold = KFold(n_splits=4)","960211f1":"random_state = 1\nreg = []\n\nreg.append(Lasso(random_state = random_state))\nreg.append(ElasticNet(random_state = random_state))\nreg.append(RandomForestRegressor(random_state=random_state))\nreg.append(GradientBoostingRegressor(random_state=random_state))\nreg.append(XGBRegressor(silent=True,random_state=random_state))\nreg.append(LGBMRegressor(verbose_eval=False,random_state = random_state))","b50de049":"reg_results = []\n\nfor regre in reg :\n    reg_results.append(np.mean(np.sqrt(-cross_val_score(regre, X_rbst, y = target,scoring = 'neg_mean_squared_error',\n                                       cv = kfold, n_jobs=-4))))","6c18a274":"reg_means = []\nreg_std = []\nfor reg_result in reg_results:\n    reg_means.append(reg_result.mean())\n    reg_std.append(reg_result.std())","bd01456a":"reg_re = pd.DataFrame({\"CrossValMeans\":reg_means,\"CrossValerrors\": reg_std})\nreg_re","cd7be5d1":"# Gradient boosting \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\nGBC = GradientBoostingRegressor()\ngb_param_grid = {'n_estimators' : [100,200,300],\n              'learning_rate': [0.1, 0.05, 0.01],\n              'max_depth': [4, 8],\n              'min_samples_leaf': [100,150],\n              'max_features': [0.3, 0.1] \n              }\ngsGBC = GridSearchCV(GBC,param_grid = gb_param_grid, cv=kfold, scoring=\"neg_mean_squared_error\", n_jobs= 4, verbose = 1)\ngsGBC.fit(X_rbst,target)\nGBC_best = gsGBC.best_estimator_\n\n# \ucd5c\uace0 \uc810\uc218\ngsGBC.best_score_","e916ffd1":"# XGBoost \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \n#xgb_param_grid = {'learning_rate': [1,0.1,0.01,0.001],\n#              'n_estimators': [50, 100, 200, 500, 1000,3000],\n#              'max_depth' : [1,3,5,10,50],\n#              'subsample': [0.6, 0.7, 1.0],\n#              'colsample_bytree' : [0.3,0.5,0.7,1],\n#              'scale_pos_weight' : [0.5,1],\n#              'reg_alpha': [0,0.05,0.0005,0.000005]\n#               }","ac606882":"# XGBoost \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd \n\nXGB = XGBRegressor()\nxgb_param_grid = {'learning_rate': [1,0.1,0.01,0.001],\n              'n_estimators': [50, 100, 200, 500, 1000],\n              'max_depth' : [1,3,5,10,50]}\ngsXGB = GridSearchCV(XGB,param_grid = xgb_param_grid, cv=kfold, scoring=\"neg_mean_squared_error\", n_jobs= 4, verbose = 1)\ngsXGB.fit(X_rbst,target)\nXGB_best = gsXGB.best_estimator_\n\n# \ucd5c\uace0 \uc810\uc218\ngsXGB.best_score_","70ba7166":"#LGBMClassifier \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\nLGB = LGBMRegressor()\nlgb_param_grid = {\n    'num_leaves' : [1,5,10],\n    'learning_rate': [1,0.1,0.01,0.001],\n    'n_estimators': [50, 100, 200, 500, 1000,5000], \n    'max_depth': [15,20,25],\n    'num_leaves': [50, 100, 200],\n    'min_split_gain': [0.3, 0.4],\n}\ngsLGB = GridSearchCV(LGB,param_grid = lgb_param_grid, cv=kfold, scoring=\"neg_mean_squared_error\", n_jobs= 4, verbose = 1)\ngsLGB.fit(X_rbst,target)\nLGB_best = gsLGB.best_estimator_\n\n# \ucd5c\uace0 \uc810\uc218\ngsLGB.best_score_","46ab36b6":"test_Survived_GBC = pd.Series(GBC_best.predict(test_rbst), name=\"GBC\")\ntest_Survived_XGB = pd.Series(XGB_best.predict(test_rbst), name=\"XGB\")\ntest_Survived_LGB = pd.Series(LGB_best.predict(test_rbst), name=\"LGB\")\n\nensemble_results = pd.concat([test_Survived_XGB,test_Survived_LGB,\n                              test_Survived_GBC],axis=1)\ng= sns.heatmap(ensemble_results.corr(),annot=True)","799d9635":"ensemble = np.expm1(0.1*test_Survived_GBC + 0.8*test_Survived_XGB + 0.1*test_Survived_LGB)\nsubmission = pd.DataFrame({\n    \"Id\" :test['Id'],\n    \"SalePrice\": ensemble\n})\nsubmission.head()","7ae426fd":"#submission.to_csv('ensemblesubmission.csv', index=False)","73f11bdb":"from sklearn.ensemble import VotingRegressor","9cf5b109":"votingC = VotingRegressor(estimators=[('XGB', XGB_best), ('LGB', LGB_best), ('GBC',GBC_best)], n_jobs=4)\nvotingC = votingC.fit(X_rbst, target)  ","b32b9828":"test_SalePrice = pd.Series(votingC.predict(test_rbst), name=\"SalePrice\")","d0b71e91":"submission = pd.DataFrame({\n    \"Id\" :test['Id'],\n    \"SalePrice\": np.expm1(test_SalePrice)\n})\nsubmission.head()","af1fade1":"#submission.to_csv('votingsubmission.csv', index=False)","79e80ea2":"from mlxtend.regressor import StackingRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.utils.testing import ignore_warnings","155c4e75":"params = {'meta_regressor__C': [0.1, 1.0, 10.0, 100.0],\n          'use_features_in_secondary' : [True, False]}","1971e71a":"clf1 = XGB_best\nclf2 = LGB_best\nclf3 = GBC_best\n\nlr = LogisticRegression()\nst_re= StackingRegressor(regressors=[clf1, clf2, clf3], meta_regressor=RandomForestRegressor())\nst_mod = st_re.fit(X_rbst, target)\nst_pred = st_mod.predict(test_rbst)","c71fa8c3":"submission = pd.DataFrame({\n    \"Id\" :test['Id'],\n    \"SalePrice\": np.expm1(st_pred)\n})\nsubmission.head()","f4c4c63f":"kfolds = KFold(n_splits=10, shuffle=True, random_state=42)","fef0827a":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\ndef cv_rmse(model, X=new_train):\n    rmse = np.sqrt(-cross_val_score(model, X_rbst, target,\n                                    scoring=\"neg_mean_squared_error\",\n                                    cv=kfolds))\n    return (rmse)","00de43a4":"alphas_ridge = [14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5]\nalphas_lasso = [5e-05, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]\nalphas_enect = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007]\nenect_l1ratio = [0.8, 0.85, 0.9, 0.95, 0.99, 1]","769fa210":"from sklearn.linear_model import ElasticNetCV, LassoCV, RidgeCV\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.svm import SVR\nfrom mlxtend.regressor import StackingCVRegressor","ba351c24":"ridge = make_pipeline(RobustScaler(),\n                      RidgeCV(alphas=alphas_ridge, cv=kfolds))","4c225c06":"lasso = make_pipeline(RobustScaler(),\n                      LassoCV(max_iter=1e7, alphas=alphas_lasso,\n                              random_state=2, cv=kfolds))","8fdf3dfe":"enet = make_pipeline(RobustScaler(),\n                           ElasticNetCV(max_iter=1e7, alphas=alphas_enect,\n                                        cv=kfolds, l1_ratio=enect_l1ratio))","c51667ad":"svr = make_pipeline(RobustScaler(),\n                      SVR(C= 20, epsilon= 0.008, gamma=0.0003,))","2e1a124c":"stack_gen = StackingCVRegressor(regressors=(ridge, lasso, enet,\n                                            GBC_best, XGB_best, LGB_best),\n                                meta_regressor=XGB_best,\n                                use_features_in_secondary=True)","ae1fe180":"score = cv_rmse(ridge)\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(),score.std()))\n\nscore = cv_rmse(lasso)\nprint(\"Lasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n\nscore = cv_rmse(enet)\nprint(\"ElasticNet score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n\nscore = cv_rmse(svr)\nprint(\"SVR score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n\nscore = cv_rmse(GBC_best)\nprint(\"Lightgbm score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n\nscore = cv_rmse(XGB_best)\nprint(\"GradientBoosting score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n\nscore = cv_rmse(LGB_best)\nprint(\"Xgboost score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()) )","7e92e4fb":"stack_gen_model = stack_gen.fit(np.array(X_rbst), np.array(target))\nelastic_model_full_data = enet.fit(X_rbst, target)\nlasso_model_full_data = lasso.fit(X_rbst, target)\nridge_model_full_data = ridge.fit(X_rbst, target)\nsvr_model_full_data = svr.fit(X_rbst, target)\ngbr_model_full_data = GBC_best.fit(X_rbst, target)\nxgb_model_full_data = XGB_best.fit(X_rbst, target)\nlgb_model_full_data = LGB_best.fit(X_rbst, target)","b20c58a8":"def blend_models_predict(X):\n    return ((0.1 * elastic_model_full_data.predict(X)) + \\\n            (0.1 * lasso_model_full_data.predict(X)) + \\\n            (0.1 * ridge_model_full_data.predict(X)) + \\\n            (0.1 * svr_model_full_data.predict(X)) + \\\n            (0.1 * gbr_model_full_data.predict(X)) + \\\n            (0.15 * xgb_model_full_data.predict(X)) + \\\n            (0.1 * lgb_model_full_data.predict(X)) + \\\n            (0.25 * stack_gen_model.predict(np.array(X))))","c9eb0521":"pred = np.floor(np.expm1(blend_models_predict(test_rbst)))\nsubmission = pd.DataFrame({\n    \"Id\" :test['Id'],\n    \"SalePrice\": pred\n})\nsubmission.head()","131eed98":"submission.to_csv('final_submission.csv', index=False)","62d1a82b":"> \ub370\uc774\ud130\uc5d0 RobustScaler\ud654 \ud574\uc90d\ub2c8\ub2e4","973c59b8":"- **MSZoning (The general zoning classification)** : 'RL'\uc774 \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \uac12\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c 'RL'\ub85c \uacb0 \uce21\uac12\uc744 \ucc44\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4","b98b1ea7":"> \ubc15\uc2a4\uce75\uc2a4 \ubcc0\ud658\ub4a4\uc5d0 \ub370\uc774\ud130\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4","1c52b417":">\uc559\uc0c1\ube14 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \uc131\ub2a5\uc744 \ubd84\uc0b0\uc2dc\ucf1c \uacfc\uc801\ud569 \uac10\uc18c \ud6a8\uacfc\uc640 \uac1c\ubcc4 \ubaa8\ub378 \uc131\ub2a5\uc774 \uc798 \uc548\ub098\uc62c \ub54c \uc559\uc0c1\ube14 \ud559\uc2b5\uc744 \uc774\uc6a9\ud558\uba74 \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0ac\uc218 \uc788\ub2e4. \uc559\uc0c1\ube14\uc5d0\ub294 \ubc30\uae45\uacfc \ubd80\uc2a4\ud305\uc774 \uc2a4\ud0dc\ud0b9 \ub4f1 \uc788\ub294\ub370 \uc2a4\ud0dc\ud0b9\uc740 \uc11c\ub85c \ub2e4\ub978 \ubaa8\ub378\ub4e4\uc744 \uc870\ud569\ud574\uc11c \ucd5c\uace0\uc758 \uc131\ub2a5\uc744 \ub0b4\ub294 \ubaa8\ub378\uc744 \uc0dd\uc131\ud558\ub294 \uac83\uc774\uace0 \uc704\uc758 5\uac1c\uc758 \uc608\uce21\uac12\ub9cc\uc744 \uc774\uc6a9\ud574\uac00\uc9c0\uace0 \ud0c0\uac9f\ubcc0\uc218\ub97c \uc608\uce21\ud558\ub294 \uac83\uc774\ub2e4.average\ub294 \ubaa8\ub378\uc758 \uc608\uce21\uac12\uc744 \ud3c9\uade0\uc744 \ub0b4\uc90c\uc73c\ub85c\uc11c \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\ub294 \uac83\uc778\ub370 \ubaa8\ub378\uc758 \uc2a4\ucf54\uc5b4\uc5d0 \ub9de\ucd94\uc5b4 \uac00\uc911\uce58\ub97c \ub2ec\ub9ac \ud574\uc8fc\ub294 \ubc29\uc2dd\uc744 \uc120\ud0dd\ud558\uc600\ub2e4.","2551a686":"- **SaleType** : \uac00\uc7a5 \ube48\ubc88\ud55c \ub370\uc774\ud130\uc778 WD\ub85c \uacb0\uce21\uce58\ub97c \ub300\uccb4\ud569\ub2c8\ub2e4","137faa8f":"### c. KFold <a id=\"three-c\"><\/a>","f7be83dc":"> \uc0b0\uc810\ub3c4 \ud655\uc778\uacb0\uacfc \uc774\uc0c1\uce58\ub97c \uc81c\uac70\ud574 \uc8fc\uc5c8\uc2b5\ub2c8\ub2e4","27a23dbf":"## III. \ubaa8\ub378\ub9c1 <a id=\"three\"><\/a>","744e1048":"> \uac74\ubb3c\uc758 \ud074\ub798\uc2a4\uc778 MSSubClass,\uc804\ubc18\uc801\uc778 \uc870\uac74 \ub4f1\uae09\uc778 OverallCond,\uc5f0 \uc6d4\uc758 \ubcc0\uc218\uc778 YrSold\uc640 MoSold \ud53c\ucc98\uc5d0 \ub300\ud574\uc11c int\uac00 \uc544\ub2cc \ubc94\uc8fc\ud615\uc73c\ub85c astype \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \ubc94\uc8fc\ud654 \uc2dc\ucf1c\uc90d\ub2c8\ub2e4","1a93a8a4":"### d.\uacb0\uce21\uce58 \ud655\uc778 \ubc0f \ucc98\ub9ac <a id=\"two-d\"><\/a>","a4189db0":"- **Alley** : data description\uc5d0 \uc758\ud558\uba74 NA\ub294 \"no alley access\"\ub85c \uace8\ubaa9 \uc811\uadfc \uae08\uc9c0\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4.","9c71c2ed":"- **Functional** : data description\uc5d0 \uc758\ud558\uba74 NA\ub294 typical\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4","fbb85def":">regplot\uc744 \uadf8\ub824\ubcf4\uc544\uc11c \uc120\ud615\uc120\uc774 \uac15\ud55c \ubcc0\uc218\ub4e4\uc744 \ub530\ub85c \uad6c\ubd84\ud558\uc600\uc73c\uba70 \uc2dc\uac01\uc801\uc73c\ub85c \uc560\ub9e4\ud55c \ubd80\ubd84\ub4e4\uc740 stats\ud568\uc218\uc758 \ud53c\uc5b4\uc2a8\uc0c1\uad00\uacc4\uc218\ub97c \ubcf4\uace0 \uc0c1\uad00\uc131\uc774 \uac15\ud55c \ubcc0\uc218\ub4e4\uc744 \ub530\ub85c \uad6c\ubd84\ud558\uc600\uc2b5\ub2c8\ub2e4.","1b6df8c7":">Boosting, Stacking \ubc0f Voting\uacfc \uac19\uc740 regressor\uc5d0 \uc559\uc0c1\ube14 \ubaa8\ub378\uc744 \uc801\uc6a9\ud558\uc5ec \ubcf4\uc2a4\ud134 \uc9d1\uac12 \uc608\uce21\uc744 \ud558\uc600\uc2b5\ub2c8\ub2e4.","9543603c":"### a.Data Processing <a id=\"two-a\"><\/a>","f35f7da4":">vif\uac00 10 \uc774\uc0c1\uc774\uba74 \ub2e4\uc911\uacf5\uc120\uc131\uc774 \uc874\uc7ac\ud55c\ub2e4\uace0 \ud558\ub294\ub370  \ub9ce\uc740 \ubcc0\uc218\ub4e4\uc774 \ub2e4\uc911\uacf5\uc120\uc131 \ubb38\uc81c \uc874\uc7ac\n>\n>\ud574\uacb0 \ubc29\uc548\uc73c\ub85c\ub294\n>\n>1.\ub2e4\uc911\uacf5\uc120\uc131\uc5d0 robust\ud55c \ud2b8\ub9ac\ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\n>\n>2.\ubcc0\uc218\uc81c\uac70 \ubc0f FE, \ubcc0\ud658\ub4f1\uc744 \ud1b5\ud55c \ub300\uccb4\n>\n>3.\uad00\uce21\uac12\uc744 \ub298\ub824 \ud45c\ubcf8\uc758 \ud06c\uae30\ub97c \uc99d\uac00","96fb62dc":"> \ub098\uc911\uc5d0 \ubaa8\ub378\ub9c1\uc744 \ud558\uae30 \uc704\ud574\uc11c \ubc94\uc8fc\ud615 \ubcc0\uc218\ub4e4\uc744 \ub77c\ubca8\uc778\ucf54\ub529 \ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.","f43c8382":"> \uacb0\uce21\uce58 \ud655\uc778\uacb0\uacfc \uacb0\uce21\uac12\uc774 \uc5c6\ub294\uac83\uc73c\ub85c \ud310\ub2e8\ub418\uc5c8\uc2b5\ub2c8\ub2e4","f4dbcb08":">\ubc94\uc8fc\ud615 \ubcc0\uc218\ub4e4 \uacbd\uc6b0 boxplot\uc744 \uace0\ub824\ubcf4\uc544  \ube44\uad50\ub97c \ud558\uc600\uc73c\uba70 \ud0c0\uac9f\ubcc0\uc218\uc778 SalePrice\uc5d0 \uc601\ud5a5\uc744 \ub9ce\uc774 \ub07c\uce58\ub294 \ubcc0\uc218\ub4e4\uacfc  \uc57d\ud55c \ubcc0\uc218\ub4e4\uc744 \uad6c\ubd84\ud574 \uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.","67c13006":"## I. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 \ubc0f \ud655\uc778 <a id=\"one\"><\/a>","85e8f33b":"$$ x > 0 \uc5d0 \ub300\ud574 g(x) := {{\\frac{x^\u03bb-1}{\u03bb}}, \u03bb = 0\uc774 \uc544\ub2d0\ub54c  \/\nlogx , \u03bb =0} $$","a4ec47c4":"### d.blending <a id=\"four-d\"><\/a>","caa162a7":"\ubaa9\ucc28:\n\n**[I. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30 \ubc0f \ud655\uc778](#one)**\n\n- [a. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30](#one-a)\n\n**[II. EDA & FE](#two)**\n\n- [a. Data Processing](#two-a)\n- [b. concat](#two-b)\n- [c. \ud0c0\uac9f\ubcc0\uc218 \ud655\uc778](#two-c)\n- [d. \uacb0\uce21\uce58 \ud655\uc778 \ubc0f \ucc98\ub9ac](#two-d)\n- [e. \uc21c\uc11c\ud615\uacfc \uba85\ubaa9\ud615 \ub370\uc774\ud130 \ubd84\ub9ac](#two-e)\n- [f. f.\ud30c\uc0dd \ubcc0\uc218 \uc0dd\uc131](#two-f)\n- [g. \uc218\uce58\ud615 \ubcc0\uc218 \ud655\uc778](#two-g)\n- [h. \ubc94\uc8fc\ud615 \ubcc0\uc218 \ud655\uc778](#two-h)\n- [i. box-cox \ubcc0\ud658](#two-i)\n- [j. \uc911\uc694 \ubcc0\uc218 \ud655\uc778](#two-j)\n\n\n    \n**[III. \ubaa8\ub378\ub9c1](#three)**\n\n- [a. \ub2e8\uc21c\uc120\ud615 \ud68c\uadc0 & \ud1b5\uacc4\uce58\ud655\uc778](#three-a)\n- [b. RobustScaler](#three-b)\n- [c. KFold](#three-c)\n- [d. \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & GridSearchCV](#three-d)\n\n**[IV. \uc608\uce21](#four)**\n\n- [a. \uc559\uc0c1\ube14](#four-a)\n- [b. voting](#four-b)\n- [c. stacking](#four-c)\n- [c. blending](#four-c)","54e9eeb0":"### c.\uc2a4\ud0dc\ud0b9 <a id=\"four-c\"><\/a>","427daf6b":"- **LotFrontage** : \uc8fc\ud0dd\uac74\ubb3c\uc5d0 \uc5f0\uacb0\ub41c \uac01 \uac70\ub9ac\uc758 \uba74\uc801\uc774 \uc8fc\ubcc0\uc758 \ub2e4\ub978 \uc8fc\ud0dd\uacfc \ube44\uc2b7\ud55c \uc9c0\uc5ed\uc77c \uac00\ub2a5\uc131\uc774 \ub192\uae30 \ub54c\ubb38\uc5d0 \uc774\uc6c3\uc758 LotFrontage\uc758 \uc911\uc559\uac12\uc73c\ub85c \uacb0\uce21\uce58\ub97c \ucc44\uc6c1\ub2c8\ub2e4","e8ca73a2":"### a. \ub2e8\uc21c\uc120\ud615 \ud68c\uadc0 <a id=\"three-a\"><\/a>","727fe141":"### a.\uc559\uc0c1\ube14 <a id=\"four-a\"><\/a>","43bf11b6":">gridSearchCV\ub294 \ub9e4\uac1c \ubcc0\uc218 \uadf8\ub9ac\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc54c\uace0\ub9ac\uc998\uc744 \ucd5c\uc801\ud654\ud569\ub2c8\ub2e4. \uc774 \uadf8\ub9ac\ub4dc\ub294 \ub9e4\uc6b0 \ucee4\uc9c8 \uc218 \uc788\uc73c\ubbc0\ub85c \uc644\ub8cc\ud558\ub824\uba74 \ub9ce\uc740 \uacc4\uc0b0 \ub2a5\ub825\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \uacc4\uc0b0 \uc2dc\uac04\uc744 \uc904\uc774\uae30 \uc704\ud574 \uadf8\ub9ac\ub4dc\uc5d0 \uc77c\ub828\uc758 \ub2f5\ubcc0\uc744 \ud3ec\ud568 \uc2dc\ucf30\uc9c0\ub9cc \ucd5c\uc885 \ub2f5\ubcc0\uc740 \uc544\ub2d9\ub2c8\ub2e4. \ucd5c\uace0\uc758 \uac00\uce58\ub97c \ucc3e\uae30 \uc704\ud574 \uc774\uac83\uc744 \ub2f9\uc2e0\uc5d0\uac8c \ub9e1\uae30\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc2e4\uc81c\ub85c\ub294 \ucd5c\uc0c1\uc758 \uc870\ud569\uc744 \ucc3e\uc73c\ub824\ub294 \ubaa9\ud45c\ub85c \uc774\ub7ec\ud55c \uadf8\ub9ac\ub4dc\ub97c \uc801\uc808\ud55c \uac12\uc73c\ub85c \ucc44\uc6cc\uc57c\ud569\ub2c8\ub2e4.","5f69c40a":"### h.\ubc94\uc8fc\ud615 \ubcc0\uc218 \ud655\uc778 <a id=\"two-h\"><\/a>","75278b23":"> Boxplot\uc73c\ub85c \uc720\uc758\ud558\ub2e4\uace0 \ud310\ub2e8\ub418\ub294 \ubcc0\uc218\ub4e4\uc744 \ucc44\ud0dd\ud558\uc600\uace0 \uac01 \ubc94\uc8fc\ub4e4\uacfc SalePrice\uc758 \uad00\uacc4\ub97c \uc0b4\ud3b4\ubcf4\uae30 \uc704\ud574\uc11c violinplot\uc744 \ud1b5\ud574\uc11c \uc0b4\ud3b4 \ubcf4\uc558\uc2b5\ub2c8\ub2e4","515abae4":"### i.box-cox \ubcc0\ud658  <a id=\"two-i\"><\/a>","159270d4":">\ud0c0\uac9f \ubcc0\uc218\uc778 SalePrice\uc758 \uc65c\ub3c4 \ud655\uc778 \uacb0\uacfc \uc67c\ucabd\uc73c\ub85c \uce58\uc6b0\uccd0 \uc788\uc5c8\uc73c\uba70 \uc815\uaddc\uc131\uc744 \ub744\uc9c0 \uc54a\uc544 \ubcf4\uc600\ub2e4. qq \ud50c\ub86f\uc744 \uadf8\ub824\ubcf4\ub2c8 \uc815\uaddc\uc131\uc744 \ub744\uc9c0 \uc54a\uc544\uc11c \ub85c\uadf8 \ubcc0\ud658\uc744 \ud558\uc600\ub2e4. \ud1b5\uacc4 \uc6a9\uc5b4\ub85c \uba71\ubcc0\ud658\uc774\ub77c\uae30\ub3c4 \ud558\uace0 \ubc15\uc2a4\uce75\uc2a4 \ubcc0\ud658\uc73c\ub85c \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \ub85c\uadf8\ub97c \ucde8\ud558\uc600\ub2e4. \ubc15\uc2a4-\uce75\uc2a4 \ubcc0\ud658\uc758 \uc8fc\ub41c \uc6a9\ub3c4\ub294 \ub370\uc774\ud130\ub97c \uc815\uaddc\ubd84\ud3ec\uc5d0 \uac00\uae5d\uac8c \ub9cc\ub4e4\uac70\ub098 \ub370\uc774\ud130 \ubd84\uc0b0\uc744 \uc548\uc815\ud654 \ud558\ub294 \uac83\uc73c\ub85c \ub370\uc774\ud130 \uc804\ucc98\ub9ac\uc5d0 \uc720\uc694\ud558\uac8c \uc4f8 \uc218 \uc788\ub2e4.\n\n","07f5f74e":"- **BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1 and BsmtFinType2** :\uc774\ub7ec\ud55c \ubaa8\ub4e0 \ubc94\uc8fc \ud615 \uc9c0\ud558\uc2e4 \uad00\ub828 \uae30\ub2a5\uc5d0 \ub300\ud574 NaN\uc740 \uc9c0\ud558\uc2e4\uc774 \uc5c6\uc74c\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.","faf05523":"> \uc0c1\uad00\uc131\uc774 \ud070 \ubcc0\uc218\ub4e4\uc744 38\uac1c \ucc3e\uc544\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4","cebd80b0":"- **Fence** : data description\uc5d0 \uc758\ud558\uba74NA\ub294 \"no fence\"\ub85c \uc6b8\ud0c0\ub9ac\uac00 \uc5c6\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.","a7cec205":"> \uacb0\uce21\uce58\ub97c \uc21c\uc11c\ub300\ub85c \uc815\ub82c\ud55c\ub4a4 xticks \uadf8\ub798\ud504\ub97c \ud1b5\ud574\uc11c \uc2dc\uac01\ud654 \uc2dc\ucf1c\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. ","e87da551":"> \ubcc0\uc218\ub4e4\uc758 \uc65c\ub3c4\ub97c \ud30c\uc545\ud558\uae30 \uc704\ud574\uc11c skew \ud568\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ubcc0\uc218\ub4e4\uc911 \uc808\ub300\uac12\uc774 0.75 \uc774\uc0c1\uc778 \ubcc0\uc218\ub4e4\ub9cc \ub530\ub85c \ucc44\ud0dd\ud55c \ub2e4\uc74c\uc5d0 \ub85c\uadf8\ubcc0\ud658\uc744 \ucde8\ud558\uc5ec \uc90d\ub2c8\ub2e4.","3c98fc62":"- **KitchenQual**: \uc804\uae30\uc640 \ub3d9\uc77c\ud55c \ud558\ub098\uc758 NA \uac12\ub9cc\uc73c\ub85c KitchenQual\uc758 \uacb0 \uce21\uac12\uc5d0 'TA'(\uac00\uc7a5 \ube48\ubc88)\ub97c \uc124\uc815\ud569\ub2c8\ub2e4.","88006613":">\uc559\uc0c1\ube14 \uae30\ubc95\uc5d0\ub294 \ub2e4\uc591\ud55c \ubc29\ubc95\uc774 \uc874\uc7ac\ud558\ub294\ub370\n>\n>Voting (\ud22c\ud45c) - \ud22c\ud45c\ub97c \ud1b5\ud574 \uacb0\uacfc \ub3c4\ucd9c\n>\n>Bagging - Bootstrap Aggregating (\uc0d8\ud50c\uc744 \ub2e4\uc591\ud558\uac8c \uc911\ubcf5 \uc0dd\uc131)\n>\n>Boosting - \uc774\uc804 \uc624\ucc28\ub97c \ubcf4\uc644\ud558\uba70 \uac00\uc911\uce58 \ubd80\uc5ec\n>\n>Stacking- \uc5ec\ub7ec \ubaa8\ub378\uc744 \uae30\ubc18\uc73c\ub85c meta \ubaa8\ub378","dc565e17":"> 3\uac00\uc9c0 \ubaa8\ub378\uc744 heatmap\uc744 \ud1b5\ud574\uc11c \uc0c1\uad00\uad00\uacc4\ub97c \ube44\uad50\ud574\ubcf4\uace0 \uc0c1\uad00\uc131\uc774 \ub192\uc740 XGB\uc640 GBC \ubaa8\ub378\uc744 \uc774\uc6a9\ud558\uc5ec\n\uc559\uc0c1\ube14 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4\uc11c \uacb0\uacfc\ub97c \uc81c\ucd9c\ud569\ub2c8\ub2e4","3edaf08e":"1. \ubcc0\uc218 | \uc124\uba85\n------- | ------- \n**SalePrice** | \uc9d1\uac12 \n**ID** |  \uc9d1\uc744 \uad6c\ubd84\ud558\ub294 \ubc88\ud638\n**date** | \uc9d1\uc744 \uad6c\ub9e4\ud55c \ub0a0\uc9dc\n**price** | \uc9d1\uc758 \uac00\uaca9\n**OverallQual** | \uc804\uccb4 \uc7ac\ub8cc \ubc0f \ub9c8\uc9c0\ub9c9 \ud488\uc9c8\n**GrLivArea** | \uc0dd\ud65c \uba74\uc801 \ud3c9\ubc29 \ud53c\ud2b8\n**GarageCars** | \ucc28\uace0\n**1stFlrSF** | 1\uce35 \ud3c9\ubc29 \ud53c\ud2b8\n**YearBuilt** | \ucd5c\ucd08 \uacf5\uc0ac \uc77c\n**YearRemodAdd** | \ub9ac\ubaa8\ub378\ud55c \ub0a0\n**Fireplaces** | \ubcbd\ub09c\ub85c \uc218\n**OpenPorchSF** | \ud3c9\ubc29 \ud53c\ud2b8 \ub2e8\uc704\uc758 \ud604\uad00 \uba74\uc801\n**MasVnrArea** | \uc81c\uacf1 \ud53c\ud2b8\uc758 \ubcbd\ub3cc \ubca0\ub2c8\uc5b4 \uba74\uc801\n**LotFrontage** | \uac74\ubb3c\uc5d0 \uc5f0\uacb0\ub41c \uac70\ub9ac\uc758 \uc120\ud615 \ud53c\ud2b8\n**CentralAir** | \uc911\uc559 \uc5d0\uc5b4\ucee8\n**KitchenQual** | \uc8fc\ubc29 \ud488\uc9c8\n**HeatingQC** | \ub09c\ubc29 \ud488\uc9c8 \ubc0f \uc0c1\ud0dc\n**ExterQual** | \uc678\ubd80 \uc7ac\ub8cc \ud488\uc9c8\n**BsmtQual** | \uc9c0\ud558\uc2e4\uc758 \ub192\uc774\n\n**\ub370\uc774\ud130\ub294 \uc77c\ubd80\ub9cc\uc744 \uc124\uba85\ud558\uc600\uc2b5\ub2c8\ub2e4**","529b33ec":"- **MSSubClass** : Na\ub294 \uac74\ubb3c \ub4f1\uae09 \uc5c6\uc74c\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uacb0\uce21\uac12\uc744 None\uc73c\ub85c \ub300\uccb4 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4","1ffd6a6d":"- **MiscFeature** : data description\uc5d0 \uc758\ud558\uba74 NA\ub294 \"no misc feature\"\ub85c \uae30\ud0c0\uae30\ub2a5 \uc5c6\uc74c\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.","f6336f22":"> Blending\uc740 \ub2e4\ub978 \uc559\uc0c1\ube14 \uae30\uc220\uc778 \uc2a4\ud0dc\ud0b9\uacfc \ube44\uad50\ub429\ub2c8\ub2e4. \ub2e4\ub978 \uc608\uce21 \ubaa8\ud615\ub4e4\uc758 \uacb0\uacfc\uac12\ub4e4\uc744 \ud1b5\ud574 \uc0c8\ub85c\uc6b4 \ubaa8\ub378\uc758 \ubc29\ubc95\uc744 \ub9cc\ub4dc\ub294 \uc559\uc0c1\ube14 \ubc29\ubc95\uc785\ub2c8\ub2e4. \uc2a4\ud0dc\ud0b9\uc758 \uacbd\uc6b0\ub294 train \ub370\uc774\ud130 \uc14b\uc758 \uc608\uce21\uac12\uc744 train \ub370\uc774\ud130\ub85c \ud558\uc5ec meta regression \ud559\uc2b5\uc744 \ud558\uace0 \uc774 meta regression\uc744 \ud1b5\ud574 test \ub370\uc774\ud130 \uc14b\uc744 \uc608\uce21\ud569\ub2c8\ub2e4. \n>\n>Blending\uacfc Stacking\uc758 \ucc28\uc774\ub294\n>\n>1.Blending\uc740 \uac80\uc99d \ub370\uc774\ud130 \uc14b\uc5d0 \ub300\ud55c \uc608\uce21\uac12\uc744 train \ub370\uc774\ud130\uc5d0 \uc774\uc6a9\ud558\uc9c0\ub9cc Stacking\uc740 train \ub370\uc774\ud130 \uc14b\uc5d0 \ub300\ud55c \uc608\uce21\uac12\uc744 \ud65c\uc6a9\ud569\ub2c8\ub2e4.\n>\n>2.Blending\uc740 \uc608\uce21\uac12 \ubfd0 \uc544\ub2c8\ub77c \uc6d0\ub798 \ud53c\ucc98\ub3c4 \ud65c\uc6a9\ud558\ub294 \ubc18\uba74 Stacking\uc740 \uc608\uce21\uac12\ub9cc \ud65c\uc6a9\ud569\ub2c8\ub2e4.","2e15fa04":"- **PoolQC** : \ub370\uc774\ud130\uc758 NA\ub294 \ud480\uc774 \uc5c6\uc74c\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uacb0\uce21\uac12\uc758 \ube44\uc728\uc774 99%\ub85c \ub9e4\uc6b0 \ub192\uace0 \ub300\ubd80\ubd84 \uc8fc\ud0dd\uc5d0\ub294 \uc218\uc601\uc7a5\uc774 \uc5c6\uc74c\uc744 \uac10\uc548\ud560\ub54c \uc758\ubbf8\uc788\ub294 \ubcc0\uc218\uc785\ub2c8\ub2e4","5730e9de":"\ubaa8\ub378\uc758 \uc124\uba85\ub825\uc774 1\ub85c \uad49\uc7a5\ud788 \ub192\uc9c0\ub9cc \ubcc0\uc218\ub4e4\uc911 P-value\uac00 \ub192\uc740 \uac12\ub4e4\uc774 \uc874\uc7ac\ud558\uba70 \n\ub2e4\uc911\uacf5\uc120\uc131\uc758 \ubb38\uc81c \uc788\uc744\uc218\ub3c4 \uc788\uc74c","945b3472":"- **Exterior1st and Exterior2nd** : \ub450\ubcc0\uc218 \ubaa8\ub450 Exterior 1 & 2 \ud558\ub098\uc758 \uacb0\uce21\uac12\ub9cc \uac00\uc9d1\ub2c8\ub2e4. \ub530\ub77c\uc11c \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \ubb38\uc790\ub85c \ub300\uccb4\ud560 \uac83\uc785\ub2c8\ub2e4.","81ea5b40":">\uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uae30 \uc704\ud574\uc11c \ud788\ud2b8\ub9f5\uc744 \uadf8\ub824\uc92c\ub2e4. corr()\ud568\uc218\ub97c \ud1b5\ud574\uc11c \uc0c1\uad00\uad00\uacc4\uac00 0.3 \uc774\uc0c1\uc778 \ubcc0\uc218\ub4e4\ub9cc \ud788\ud2b8\ub9f5\uc73c\ub85c \ucd9c\ub825\ud558\uc600\ub2e4. \uc605\uc740 \ubd80\ubd84\uc774 \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc740\uac83\uc73c\ub85c \ub450 \ubcc0\uc218\uac04\uc5d0 \uc0c1\uad00\uad00\uacc4\uac00 \ub108\ubb34 \uac15\ud558\uba74 \ub2e4\uc911 \uacf5\uc120\uc131 \uc0c1\ud669\uc774 \ub098\ud0c0\ub0a0 \uc218\ub3c4 \uc788\ub2e4.\ud0c0\uac9f \ubcc0\uc218\uc778 Saleprice\uc640\uc758 \uc0c1\uad00\uad00\uacc4\ub3c4 \ub208 \uc5ec\uaca8 \ubcf4\uc544\uc57c \ud560 \uac83\uc774\ub2e4.","d7eb7cfd":"> CrossValMeans \ud655\uc778 \uacb0\uacfc Gradient boosting, xgboost, lightgbm \ubaa8\ub378\uc5d0 \ub300\ud574\uc11c \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc744 \ud574\uc90d\ub2c8\ub2e4","33f893c7":"- **MasVnrArea and MasVnrType** :NA\ub294 \uc544\ub9c8\ub3c4\uc774 \uc9d1\ub4e4\uc5d0 \ub300\ud55c \uace0\uc815 \ubca0\ub2c8\uc5b4\uac00 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. Area\uc740 0\uc744, Type\uc740 \uc5c6\uc74c\uc744 \ucc44\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","7b8a3bf5":"- **GarageYrBlt, GarageArea and GarageCars** : \uacb0\uce21\uce58\ub97c 0\uc73c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4 (\ucc28\uace0\uac00 \uc5c6\ub294 \uac83\uc740 \ucc28\uace0\uc5d0 \ucc28\uac00 \uc5c6\ub294 \uac83\uc744 \uc758\ubbf8\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.)","af34c3a5":"> \ub77c\ubca8\uc778\ucf54\ub529\uc744 \ud558\uc9c0 \uc54a\ub294 \ubcc0\uc218\ub4e4\uc5d0 \ub300\ud574\uc11c \ubaa8\ub378\ub9c1 \ucc98\ub9ac\ub97c \ud558\uae30 \uc704\ud574 \ub354\ubbf8\ubcc0\uc218\ub97c \ub9cc\ub4e4\uc5b4 \uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.","d0a65236":"> \uc0c1\uad00\uc131\uc774 \ud070 \ubcc0\uc218\ub4e4\uc744 \ud655\uc778\ud558\uc5ec regplot\uc744 \ud655\uc778\ud55c\ub4a4\uc5d0 \uc774\uc0c1\uce58 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\uba74 \ubaa8\ub378\ub9c1 \uc131\ub2a5\uc744 \ub354 \ub192\uc77c\uc218 \uc788\uc744\uac83\uc73c\ub85c \ubcf4\uc785\ub2c8\ub2e4","8d371b1f":">haspool,has2ndfloor,hasgarage,hasbsmt,hasfireplace \ud53c\ucc98\ub97c \uc0dd\uc131\ud558\uc600\ub294\ub370 \uac01 \ud53c\ucc98\uac00 \ud480\uc7a5\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4 \uc5c6\ub2e4\ub97c \uae30\uc900\uc73c\ub85c apply \ud568\uc218\ub97c \uc801\uc6a9\uc2dc\ucf1c\uc11c \uc0dd\uc131\ud558\uc600\ub2e4","06344898":"### b.\ubcf4\ud305 <a id=\"four-b\"><\/a>","7c9f6d1a":"### g.\uc218\uce58\ud615 \ubcc0\uc218 \ud655\uc778 <a id=\"two-g\"><\/a> ","c01d67ee":"- **FireplaceQu** : data description\uc5d0 \uc758\ud558\uba74NA\ub294 \"no fireplace\"\ub85c \ub09c\ub85c\uac00 \uc5c6\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4","f6af6ae4":"> \ud53c\ucc98\uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\uc744 \ud1b5\ud574\uc11c \uac01 \ud53c\ucc98\ub4e4\uc758 \ud569\uc73c\ub85c Total \ud53c\ucc98\ub97c \uc0dd\uc131\ud558\uc600\ub2e4","02c88dac":"### f.\ud30c\uc0dd \ubcc0\uc218 \uc0dd\uc131 <a id=\"two-f\"><\/a>","86893fd1":"- **GarageType, GarageFinish, GarageQual and GarageCond** : \ub204\ub77d\ub41c \ub370\uc774\ud130\ub97c None\uac12\uc73c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4","a9112382":"### e.\uc21c\uc11c\ud615\uacfc \uba85\ubaa9\ud615 \ub370\uc774\ud130 \ubd84\ub9ac <a id=\"two-e\"><\/a>","14e88ab3":"### b.concat <a id=\"two-b\"><\/a>","35e74ffc":"### d. \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd & GridSearchCV <a id=\"three-d\"><\/a>","99eaf152":"- **Electrical** : \ud558\ub098\uc758 NA \uac12\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uae30\ub2a5\uc740 \ub300\ubd80\ubd84 'SBrkr'\uc744 \uac00\uc9c0\ubbc0\ub85c \uacb0\uce21\uac12\uc73c\ub85c \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","3a9e907e":"> \ud22c\ud45c\ub294 \uc5ec\ub7ec \uba38\uc2e0 \ub7ec\ub2dd \ubaa8\ub378\uc758 \uc608\uce21\uc744 \uacb0\ud569\ud558\ub294 \uac00\uc7a5 \uac04\ub2e8\ud55c \ubc29\ubc95 \uc911 \ud558\ub098\uc785\ub2c8\ub2e4. \uc2e4\uc81c \ubd84\ub958\uae30\ub294 \uc544\ub2c8\uc9c0\ub9cc \uac01 \uc54c\uace0\ub9ac\uc998\uc758 \ub2e4\ub978 \ud2b9\uc131\uc744 \uc774\uc6a9\ud558\uae30 \uc704\ud574 \ubcd1\ub82c\ub85c \ud559\uc2b5\ub418\uace0 \ud3c9\uac00\ub418\ub294 \ub2e4\ub978 \uc138\ud2b8\uc5d0 \ub300\ud55c \ub798\ud37c\uc785\ub2c8\ub2e4. \ud22c\ud45c\ub97c \uae30\ubc18\uc73c\ub85c \uad6c\ucd95\ud558\uace0 \uc608\uce21 \ud55c \ubaa8\ub378\uc758 \uc608\uce21\uc744 \uacb0\ud569\ud569\ub2c8\ub2e4.","9a940229":"- **BsmtFinSF1, BsmtFinSF2, BsmtUnfSF, TotalBsmtSF, BsmtFullBath and BsmtHalfBath** :\uc9c0\ud558\uc2e4\uc774 \uc5c6\uc73c\uba74 \uacb0\uce21\uac12\uc774 0 \uc77c \uac00\ub2a5\uc131\uc774 \ub192\uae30 \ub54c\ubb38\uc5d0 \uacb0\uce21\uce58\ub97c 0\uc73c\ub85c \ub300\uccb4\ud569\ub2c8\ub2e4","562b99de":"## House-Price-Prediction","602211d1":"> \ubc15\uc2a4\uce75\uc2a4 \ubcc0\ud658 \uacb0\uacfc \ub370\uc774\ud130\uac00 \uc815\uaddc\uc131\uc744 \uc798 \ub530\ub974\uace0 \uc788\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\ub2e4.","9752e26a":"- **Utilities** : \uc774 \ubc94\uc8fc \uae30\ub2a5\uc758 \uacbd\uc6b0 \ud558\ub098\uc758 \"NoSeWa\"\ubc0f 2 NA\ub97c \uc81c\uc678\ud55c \ubaa8\ub4e0 \ub370\uc774\ud130\ub294 \"AllPub\"\uc785\ub2c8\ub2e4. 'NoSewa'\uac00\uc788\ub294 \uc9d1\uc774 \ud6c8\ub828 \uc138\ud2b8\uc5d0 \uc788\uc73c\ubbc0\ub85c\uc774 \uae30\ub2a5\uc740 \uc608\uce21 \ubaa8\ub378\ub9c1\uc5d0 \ub3c4\uc6c0\uc774\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ubcc0\uc218\ub97c \uc81c\uac70\ud574\uc90d\ub2c8\ub2e4","0db775f2":"## II. EDA & FE <a id=\"two\"><\/a> ","740c90c4":"### c.\ud0c0\uac9f\ubcc0\uc218 \ud655\uc778 <a id=\"two-c\"><\/a>","19851746":"## IV. \uc608\uce21 <a id=\"four\"><\/a>","1480aa1f":"### b. RobustScaler <a id=\"three-b\"><\/a>","4bc08604":">\ub370\uc774\ud130 \ucc98\ub9ac\ub97c \ud558\uae30 \uc704\ud574\uc11c \uc21c\uc11c\ud615\uacfc \uba85\ubaa9\ud615 \ub370\uc774\ud130\ub97c \ubd84\ub9ac \ud558\uc600\uc2b5\ub2c8\ub2e4.\uac01 \ubcc0\uc218\ub4e4\uc758 \uacb0\uce21\uce58 \ucc98\ub9ac\ub97c \ud569\ub2c8\ub2e4.","2c2c5476":"> \ubaa8\ub378\ub9c1 \uacfc\uc815\uc5d0\uc11c \ud544\uc694\uc5c6\ub294 \ubcc0\uc218\uc778 Id\uc640 \ud0c0\uac9f\ubcc0\uc218\ub97c \ub4dc\ub86d\ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4","20393367":">\uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\ub85c \uc778\ud558\uc5ec \ud45c\ubcf8\uc758 \ud06c\uae30\ub97c \uc99d\uac00\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 robust\ud55c \ud2b8\ub9ac\ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \ud0dd\ud558\uc600\uc2b5\ub2c8\ub2e4.\n>\n>*Robust : \uc911\uc559\uac12(median)\uacfc IQR(interquartile range) \uc0ac\uc6a9. \uc544\uc6c3\ub77c\uc774\uc5b4\uc758 \uc601\ud5a5\uc744 \ucd5c\uc18c\ud654","18ea6379":"### j.\uc911\uc694 \ubcc0\uc218 \ud655\uc778 <a id=\"two-j\"><\/a>"}}