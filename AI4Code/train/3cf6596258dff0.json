{"cell_type":{"d819f157":"code","40f79374":"code","12176d0b":"code","6265c7f9":"code","ed5eaa1e":"code","34e63782":"code","477855ca":"code","7ea1d85c":"code","0e49786a":"code","ed0f1a4e":"code","e1794fc5":"code","7e9d88bf":"code","359b490d":"code","8c278dfc":"code","fa144491":"code","991dce61":"code","316f835a":"code","8f7e1f41":"code","95a27027":"code","a19892b8":"code","bfbff3d1":"code","badc7ca7":"code","ecc97627":"code","60d0ab09":"code","1943cc2f":"code","c20936c7":"code","798bb9b4":"code","08a8bd67":"code","5a81ad22":"code","9b753b3d":"code","a335e8fd":"code","16ea9838":"code","cb49dde4":"code","f2494256":"code","abb357ff":"code","a0299c39":"code","4c8e61fa":"code","9988bd55":"code","2f42d9e0":"code","7b18e9ba":"code","ee447e2c":"code","ffafab7a":"markdown","222dc4d1":"markdown","1c5d30e1":"markdown","e2e07339":"markdown","b3b5456a":"markdown","72168933":"markdown","162e02f6":"markdown","9e115bfb":"markdown","072ad800":"markdown","8b8da020":"markdown","2e056303":"markdown","29b7b2dd":"markdown","69440ba4":"markdown","8805ac37":"markdown","9c080848":"markdown","b01f182a":"markdown","4d2d7492":"markdown","c24dd948":"markdown","c985fe45":"markdown","f2fc8b89":"markdown","9d12547f":"markdown","40bc55e9":"markdown","302ebec6":"markdown","c089a8aa":"markdown","85f81739":"markdown","41c68b3a":"markdown","48d4670d":"markdown"},"source":{"d819f157":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","40f79374":"import warnings\nwarnings.filterwarnings('ignore')","12176d0b":"train = pd.read_csv('..\/input\/seoul-bike-rental-ai-pro-iti\/train.csv')\ntest = pd.read_csv('..\/input\/seoul-bike-rental-ai-pro-iti\/test.csv')\nsample_submission = pd.read_csv('..\/input\/seoul-bike-rental-ai-pro-iti\/sample_submission.csv')\n","6265c7f9":"train.head(2)","ed5eaa1e":"train.info()","34e63782":"train.Date = pd.to_datetime(train.Date, format='%d\/%m\/%Y')\ntrain['year'] = train.Date.dt.year\ntrain['Rainfall(cm)'] = train['Rainfall(mm)'] \/ 10\n#------------------------------------------------------------\ntrain['Seasons'] = train['Seasons'].astype('category')\ntrain['Holiday'] = train['Holiday'].astype('category')\ntrain['Functioning Day'] = train['Functioning Day'].astype('category')","477855ca":"train.info()","7ea1d85c":"train.isnull().sum()","0e49786a":"train.describe()","ed0f1a4e":"plt.figure(figsize=(15, 5))\n\nsns.boxplot(data = train)\n\nplt.tick_params(axis='x', rotation=30)\n\nplt.yscale('symlog')\n","e1794fc5":"import plotly.express as px\n%matplotlib inline\nimport cufflinks as cf\n# Make Plotly work in your Jupyter Notebook\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objects as go\n# Use Plotly locally\ncf.go_offline()\n\n\npx.pie(train, names='Seasons', \n       title='categories of  seasons', \n       color_discrete_sequence=px.colors.sequential.Reds, hole=.3)\n","7e9d88bf":" px.pie(train, names='Holiday', \n        title=('categories of Holidays'), hole=0.5)\n","359b490d":" px.pie(train, names='Functioning Day', \n        title=('categories of Functioning Day'), hole=0.5)","8c278dfc":"plt.subplots(3, 3,figsize=(18,10))\n\nplt.subplots_adjust(top=1)\nplt.suptitle(\"Distribution of the numerical features\", fontsize=25) \n\n\nfor i, col in enumerate(train[train.columns[3:-5]]):\n    plt.subplot(3, 3, i+1)\n    sns.distplot(train[col]).set_title(\"{} distribution\".format(col), fontsize=18);\n    plt.tight_layout(pad=3.0)","fa144491":"plt.figure(figsize=(15,10))\n\nsns.heatmap(train.corr(),\n            vmin=-1,\n            vmax=1,\n            cmap='RdBu',\n            annot=True);","991dce61":"plt.subplots(2, 4,figsize=(18,10))\n\nplt.subplots_adjust(top=1)\nplt.suptitle(\"investigate relation between 'y' and numerical features\", fontsize=25) \n\n\nfor i, col in enumerate(train[train.columns[3:-5]]):\n    plt.subplot(3, 3, i+1)\n    sns.regplot(x = train['y'], y = train[col], line_kws = {'color': 'red'}).set_title(\"{} vs y distribution\".format(col), fontsize=18);\n    plt.tight_layout(pad=3.0)\n   ","316f835a":"from plotly.subplots import make_subplots\n\nfig = make_subplots(rows=1, cols=2, specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\n\nfig.add_trace(go.Pie(labels=train['Holiday'], values=train['y']),\n    row=1, col=1)\n\nfig.add_trace(go.Pie(labels=train['Functioning Day'], values=train['y']),\n    row=1, col=2)\n\nfig.update_traces(hole=.5)\n\nfig.update_layout(height=600, width=800, title_text=\"The count of <b>y<\/b> according to <b>Holidays<\/b> and <b>Functioning days<\/b>\"\n                  ,annotations=[dict(text='Holidays', x=0.17, y=0.5, font_size=15, showarrow=False),\n                                dict(text='Functioning day', x=0.87, y=0.5, font_size=14, showarrow=False)])\nfig.show()\n","8f7e1f41":"train[train['Functioning Day'] == 'No'].head()","95a27027":"train[train['Functioning Day'] == 'No']['y'].sum()","a19892b8":"plt.figure(figsize=(15, 5))\n\nsns.barplot(data = train, x = 'Seasons', y = 'y', palette = 'Blues').set_title(\"number of bikes rented in each season\", fontsize=18);\n","bfbff3d1":"features_for_lp = ['Rainfall(mm)','y','Snowfall (cm)','Solar Radiation (MJ\/m2)','Humidity(%)','Wind speed (m\/s)']\n\nplt.subplots(3, 3,figsize=(18,10))\nplt.subplots_adjust(top=1)\n#plt.suptitle(\"investigate relation between 'y' and numerical features\", fontsize=25) \n\nfor i, col in enumerate(features_for_lp):\n    plt.subplot(3, 2, i+1)\n    sns.lineplot(data = train , x = 'Date', y=train[col]).set_title(\"change of the count of {} over provided years\".format(col), fontsize=18);\n\n    plt.tight_layout(pad=3.0)\n\n","badc7ca7":"sns.barplot(data = train, x = 'year', y = 'y', hue = 'Seasons', palette = 'Reds').set_title(\"Season's rental bikes Frequency for each year\", fontsize=18);","ecc97627":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=[20, 5])\n\nsns.barplot(data = train, x = 'Seasons', y = 'y', hue = 'Functioning Day', palette = 'Reds', ax = axes[0]).set_title(\"Season's rental bikes Frequency for each year\", fontsize=18);\nsns.barplot(data = train, x = 'Seasons', y = 'y', hue = 'Holiday', palette = 'Blues', ax = axes[1]).set_title(\"Season's rental bikes Frequency for each year\", fontsize=18);","60d0ab09":"features_for_fp = ['Rainfall(mm)','Snowfall (cm)','Solar Radiation (MJ\/m2)','Humidity(%)','Wind speed (m\/s)']\n","1943cc2f":"for i, col in enumerate(features_for_fp):\n    g = sns.FacetGrid(data = train, col = 'Seasons', height = 4.5,\n            margin_titles = True);\n    g.map(sns.regplot, col, 'y',scatter = True, fit_reg = True, line_kws = {'color': 'red'});","c20936c7":"train.isnull().sum()","798bb9b4":"train.info()","08a8bd67":"train.Date = pd.to_datetime(train.Date, format='%d\/%m\/%Y')\ntrain['day'] = train['Date'].dt.day_name()\ntrain['month'] = train['Date'].dt.month_name()\ntrain['year'] = pd.DatetimeIndex(train['Date']).year\ntrain['day_night'] = train['Hour'].apply(lambda x: 'Night' if (x >= 20) or (x<=5) else \"Day\")\n#-------------------------------------------\ntrain[\"weather\"] = train.Seasons.map({'Spring': \" Clear\",\\\n                                        'Summer' : \" Mist \", \\\n                                        'Autumn' : \" Light Rain\", \\\n                                        'Winter' :\" Heavy Rain\" })\n\n# #-------------------------------------------\nhours_binning = []\nfor i in train['Hour']:\n    if i < 8 :\n        hours_binning.append(1)\n    elif i >= 22 :\n        hours_binning.append(2)\n    elif i > 9 and i<18 :\n        hours_binning.append(3)\n    elif i == 8 :\n        hours_binning.append(4)\n    elif i == 9 :\n        hours_binning.append(5)\n    elif i == 20 or i == 21 :\n        hours_binning.append(6)\n    elif i == 19 or i == 18 :\n        hours_binning.append(7)\n        \ntrain['hours_binning'] = hours_binning\n\n# #-------------------------------------------\nday_condition = []\nfor i in train['Humidity(%)']:\n    if i >= 0 and i<= 20 :\n        day_condition.append(\"uncomfortably dry\")\n    elif i >= 21 and i<=60 :\n        day_condition.append(\"comfort\")\n    elif i >= 61 and i<=100 :\n        day_condition.append(\"uncomfortably wet\")\n        \ntrain['day_condition'] = day_condition\n\n# #-------------------------------------------\nbins = [-20,0,25.7,40]\nlabels = ['cold', 'normal', 'hot']\ntrain['temp_binned'] = pd.cut(train['Temperature(\ufffdC)'], bins=bins, labels=labels).astype('object')\n\n# #-------------------------------------------\nbins = [-28,9,13,15.5,17.5,28]\nlabels = ['A bit dry', 'Very comfortable', 'Comfortable','Ok','Very humid']\ntrain['dew_point_binned'] = pd.cut(train['Dew point temperature(\ufffdC)'], bins=bins, labels=labels).astype('object')","5a81ad22":"pd.set_option('display.max_columns', None)\ntrain.head()","9b753b3d":"# train_modified = train.drop(columns = ['y','ID','day_condition','Rainfall(cm)'],axis=1)\n\ntrain_modified = train[['Date', 'Hour', 'Temperature(\ufffdC)', 'Humidity(%)', 'Wind speed (m\/s)','Visibility (10m)', 'Dew point temperature(\ufffdC)',\n        'Solar Radiation (MJ\/m2)', 'Rainfall(mm)', 'Snowfall (cm)', 'Seasons','Holiday', 'Functioning Day', 'day', 'month', 'year', 'day_night',\n        'weather', 'hours_binning', 'temp_binned', 'dew_point_binned']]\n\ny = train['y'].astype('float')\ny =  np.log1p(y)\n\n# define numerical features\nnumerical = train_modified[['Hour', 'Temperature(\ufffdC)', 'Humidity(%)', 'Wind speed (m\/s)','Visibility (10m)', 'Dew point temperature(\ufffdC)',\n                            'Solar Radiation (MJ\/m2)', 'Rainfall(mm)', 'Snowfall (cm)', 'year', 'hours_binning']]","a335e8fd":"from sklearn.ensemble import ExtraTreesRegressor\n\nETR = ExtraTreesRegressor()\nETR.fit(numerical,y)\nprint(ETR.feature_importances_) #use inbuilt class feature_importances of tree based classifiers\n#plot graph of feature importances for better visualization\nfeat_importances = pd.Series(ETR.feature_importances_, index=numerical.columns)\nfeat_importances.nlargest(15).plot(kind='barh')\nplt.show()","16ea9838":"colormap = plt.cm.RdBu\nplt.figure(figsize=(22,11))\nplt.title('Pearson Correlation of Features', y=1.05, size=20)\nsns.heatmap(numerical.corr(),linewidths=0.1,vmin= -1.0,vmax=1.0, \n            square=True, cmap=colormap, linecolor='white', annot=True);","cb49dde4":"categorical = train[['Seasons','Holiday', 'Functioning Day', 'day', 'month', 'day_night','weather', 'temp_binned', 'dew_point_binned','y']]\n\nfrom scipy.stats import f_oneway\n \n# Running the one-way anova test between CarPrice and FuelTypes\n# Assumption(H0) is that FuelType and CarPrices are NOT correlated\n \n# Finds out the Prices data for each FuelType as a list\nfor i in categorical.columns:\n    CategoryGroupLists=categorical.groupby(i)['y'].apply(list)\n\n    # Performing the ANOVA test\n    # We accept the Assumption(H0) only when P-Value > 0.05\n    AnovaResults = f_oneway(*CategoryGroupLists)\n    print('P-Value for Anova {} is: '.format(i), AnovaResults[1], '\\ncorrelated = {} \\n'.format(AnovaResults[1] < 0.05))","f2494256":"train_modified.head(2)","abb357ff":"train_modified.info()","a0299c39":"train_modified['weather'] = train_modified['weather'].astype(np.object)\ntrain_modified['Functioning Day'] = train_modified['Functioning Day'].astype(np.object)\ntrain_modified['Holiday'] = train_modified['Holiday'].astype(np.object)\ntrain_modified['Seasons'] = train_modified['Seasons'].astype(np.object)\n","4c8e61fa":"from sklearn.model_selection import train_test_split\nfrom catboost import CatBoostRegressor\n\nX_train, X_val, y_train, y_val = train_test_split(train_modified, y, test_size=0.2, random_state=42) \n\n\ncategorical_features_indices = np.where(train_modified.dtypes == np.object)[0]\n\nmodel= CatBoostRegressor(iterations = 4998,\n                         loss_function='RMSE',\n                         learning_rate = 0.01, \n                         depth = 8, \n                         l2_leaf_reg = 2)\n                         #,early_stopping_rounds = 10 )\n\n\nmodel.fit(X_train, y_train,cat_features=categorical_features_indices,eval_set=(X_val, y_val),plot=True)","9988bd55":"print(model.score(X_train, y_train))\nprint(model.score(X_val, y_val))","2f42d9e0":"from sklearn.metrics import r2_score\n\n#model_predicted = np.exp(model.predict(X_val))\nmodel_predicted = model.predict(X_val)\n\nr2 = r2_score(y_val, model_predicted)\nprint('R2: {:.6f}'.format(r2))","7b18e9ba":"testing = test.copy()\ntesting.columns\ntesting.Date = pd.to_datetime(testing.Date, format='%d\/%m\/%Y')\ntesting['day'] = testing['Date'].dt.day_name()\ntesting['month'] = testing['Date'].dt.month_name()\ntesting['year'] = pd.DatetimeIndex(testing['Date']).year\ntesting['day_night'] = testing['Hour'].apply(lambda x: 'Night' if (x >= 20) or (x<=5) else \"Day\")\n#-------------------------------------------\ntesting[\"weather\"] = testing.Seasons.map({'Spring': \" Clear\",\\\n                                        'Summer' : \" Mist \", \\\n                                        'Autumn' : \" Light Rain\", \\\n                                        'Winter' :\" Heavy Rain\" })\n\n# #-------------------------------------------\nday_condition = []\nfor i in testing['Humidity(%)']:\n    if i >= 0 and i<= 20 :\n        day_condition.append(\"uncomfortably dry\")\n    elif i >= 21 and i<=60 :\n        day_condition.append(\"comfort\")\n    elif i >= 61 and i<=100 :\n        day_condition.append(\"uncomfortably wet\")\n        \ntesting['day_condition'] = day_condition\n# #-------------------------------------------\n\nhours_binning = []\nfor i in testing['Hour']:\n    if i < 8 :\n        hours_binning.append(1)\n    elif i >= 22 :\n        hours_binning.append(2)\n    elif i > 9 and i<18 :\n        hours_binning.append(3)\n    elif i == 8 :\n        hours_binning.append(4)\n    elif i == 9 :\n        hours_binning.append(5)\n    elif i == 20 or i == 21 :\n        hours_binning.append(6)\n    elif i == 19 or i == 18 :\n        hours_binning.append(7)\n\ntesting['hours_binning'] = hours_binning\n\n# #-------------------------------------------\nbins = [-20,0,25.7,40]\nlabels = ['cold', 'normal', 'hot']\ntesting['temp_binned'] = pd.cut(testing['Temperature(\ufffdC)'], bins=bins, labels=labels).astype('object')\n\n# #-------------------------------------------\nbins = [-35,9,13,15.5,17.5,35]\nlabels = ['A bit dry', 'Very comfortable', 'Comfortable','Ok','Very humid']\ntesting['dew_point_binned'] = pd.cut(testing['Dew point temperature(\ufffdC)'], bins=bins, labels=labels).astype('object')\n\ntesting = testing.drop(columns = ['ID','day_condition'],axis=1)\n\nCB_predicted = model.predict(testing)\ntest['y'] = np.exp(CB_predicted)\ntest[['ID', 'y']].to_csv('\/kaggle\/working\/CB_submission.csv', index=False)\n\n","ee447e2c":"plt.savefig('facetgrid.jpg')\nplt.show()","ffafab7a":"## 1- Univariate Exploration","222dc4d1":"now preparing test set","1c5d30e1":"### now let's preprocess some features before starting","e2e07339":"### as **y** is the target feature, we will see the correlation between it and all other numerical features by ploting heatmap which represent the **Pearson's Correlation** between each two features","b3b5456a":"### for each season we can see the change of the number of rented bikes based on the variety of some features like **Rainfall** , **Snowfall** , **Solar Radiation** , **Humidity** and **Wind speed**","72168933":"### First, let's take a quick look on the dataset","162e02f6":"so there is no null values, let's continue","9e115bfb":"### great, all set to go","072ad800":"welcome to our nootbook about Seoul Bike Rental dataset\n\nin this nootbook we will try to show some insights about the features in this dataset by visualize them, the Exploration will go into **3** steps:\n\n> **1- Univariate Exploration**\n\n> **2- Bivariate Exploration**\n\n> **3- Multivariate Exploration**\n\nalso we will create a **model** that predict the number of bikes rented over 2017 and 2018 in seoul\n\nif you have any suggest,advice or correction please don't hesitate to write it, it will be very helpful for me ","8b8da020":"## 2- Bivariate Exploration","2e056303":"### we can see the change of some features over time with **Date** feature as follows :","29b7b2dd":"## 4- ML Implementation","69440ba4":"now, to the categorical we will calcaulate **anova** ","8805ac37":"### well, that's it for now, hope this notebook would be helpful ","9c080848":"### now, let's see the numerical features","b01f182a":"![Bikes-2.jpg](attachment:8a240da6-f22a-4b05-a431-d7cd1cf16ad8.jpg)","4d2d7492":"### let's see the relation between 'y' and the same features with plots","c24dd948":"### Here, we can detect outlier's with boxplot","c985fe45":"- we wiil see the distribution of the numerical features \n\n- as **ID** isn't important we will not consider it as well as the categorical features **Seasons**, **Holiday** and **Functioning Day**","f2fc8b89":"### it looks like there is no rented bikes when there is no functioning day, to make sure that it's not a bug in the plot we can see the table using **Groupby**","9d12547f":"now we will calculate correlation between **numerical**, **categorical features** and **y**","40bc55e9":"now we will do **feature engineering** ","302ebec6":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:SlateBlue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<span style='padding: 10px; font-family:Helvetica; font-size:30px' > Seoul Bike Rents <\/span>\n<\/div>","c089a8aa":"### as we can see **Rainfall** and **Snowfall** has alot of outliers","85f81739":"### first we will see the distribution of the categorical features ","41c68b3a":"### now let's see the relation between **y** and the categorical features","48d4670d":"## 3- Multivariate Exploration"}}