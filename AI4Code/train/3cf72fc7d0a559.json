{"cell_type":{"5ff7c989":"code","cc4d5c17":"code","500b907d":"code","0834e76a":"code","2fe3b7e3":"code","2830061d":"code","52d78dfc":"code","7e1b2439":"code","95448843":"code","8f645ee3":"markdown","91c0d16e":"markdown","486231d1":"markdown","f3fbfe2e":"markdown","b73b673f":"markdown","fac1374b":"markdown","59a21476":"markdown"},"source":{"5ff7c989":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nimport random\nimport datetime\n\nfrom sklearn.datasets import load_digits\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score","cc4d5c17":"sample_submission = pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")","500b907d":"print(train.shape)\ntrain.head(10)","0834e76a":"X_train = (train.iloc[:,1:].values).astype('float32') # all pixel values\ny_train = train.iloc[:,0].values.astype('int32') # only labels i.e targets digits\nX_test = test.values.astype('float32')","2fe3b7e3":"plt.figure(figsize=(25,10))\nX_train = X_train.reshape(X_train.shape[0], 28, 28)\nfor i in range(10):\n    rand = random.randrange(len(X_train))\n    plt.subplot(2, 5, i + 1)\n    plt.imshow(X_train[rand], cmap=plt.get_cmap('gray'))\n    plt.title(y_train[rand]);\nX_train = (train.iloc[:,1:].values).astype('float32') # all pixel values","2830061d":"classifier = KNeighborsClassifier(n_neighbors=11)\nclassifier.fit(X_train, y_train)","52d78dfc":"rand = random.randrange(len(X_train))\nplt.imshow(X_train[rand].reshape(28, 28), cmap=plt.get_cmap('gray'))\nplt.title(\"real: %s , predicted : %s\" % (y_train[rand], classifier.predict(np.reshape(X_train[rand], (1, -1)))));","7e1b2439":"plt.figure(figsize=(18,15))\nfor i in range(20):\n    plt.subplot(4, 5, i + 1)\n    rand = random.randrange(len(X_train))\n    plt.imshow(X_train[rand].reshape(28, 28), cmap=plt.get_cmap('gray'))\n    plt.title(\"predicted : %s\" % (classifier.predict(np.reshape(X_train[rand], (1, -1)))));","95448843":"now = datetime.datetime.now()\nlabels = classifier.predict(X_test[:100]) # probably its gonna take too much time\nprint((datetime.datetime.now() - now).microseconds)\nlabels","8f645ee3":"So we've got 42000 images in our dataset with size $\\sqrt{785} \\times \\sqrt{785} \\approx 28 \\times 28$\n<br>But we should reshape this dataset for showing images or learning algorith<\/br>","91c0d16e":"The result was successfull!! , So lets check it on test dataset","486231d1":"Wow, So lets check the result of model","f3fbfe2e":"Result are so successful, let take output from them","b73b673f":"Lets see some of these images, randomly![](http:\/\/)","fac1374b":"At the first, we check the model on train dataset and then if the result be good, we will check it on test dataset","59a21476":"We are gonna detect numbers with this dataset with KNN algorithm and see what the result will be ? \n<br>First of all we look at our dataset and prepare it for learning algorithm.<\/br>\n<br>Previously we analyse this dataset with logisticRegression algorithm and the result was successful<\/br>"}}