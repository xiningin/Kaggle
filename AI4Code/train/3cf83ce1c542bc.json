{"cell_type":{"6f04e7ca":"code","0948d433":"code","74ed7a1e":"code","a7198d18":"code","b1c5f9c0":"code","f7cddb92":"code","c1bce687":"code","844d4c99":"code","bcad6457":"code","6cbdb268":"code","e822af35":"code","3c323781":"code","14e4a781":"code","e69b33ba":"code","84e9dc17":"code","41997fba":"markdown","cb7235fc":"markdown","ad4bdbaa":"markdown","d1bc41dd":"markdown","04a994a8":"markdown","301b67c7":"markdown","b9b3d97d":"markdown","c32cf68f":"markdown","dc56b09b":"markdown","e655cab2":"markdown"},"source":{"6f04e7ca":"%env JOBLIB_TEMP_FOLDER=\/tmp\n\nimport numpy as np\nimport pandas as pd\n\nimport xgboost as xgb\nfrom sklearn.model_selection import GridSearchCV\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom datetime import datetime\nfrom dateutil import tz\n\nfrom geopy import distance","0948d433":"# Let's load 700_000 rows and exclude the first column\ntrain = pd.read_csv(\"..\/input\/train.csv\", parse_dates=['pickup_datetime'], usecols=range(1,8), nrows=700_000)\ntest = pd.read_csv(\"..\/input\/test.csv\", parse_dates=['pickup_datetime'])","74ed7a1e":"print(\"Train shape: {}\".format(train.shape))\ntrain.describe()","a7198d18":"#Drop rows with null values\ntrain = train.dropna(how = 'any', axis = 'rows')\n\n#Free rides, negative fares and passenger count filtering\ntrain = train[train.eval('(fare_amount > 0) & (passenger_count <= 6)')]","b1c5f9c0":"train.iloc[:100000].plot.scatter('pickup_longitude', 'pickup_latitude')\ntrain.iloc[:100000].plot.scatter('dropoff_longitude', 'dropoff_latitude')","f7cddb92":"# Coordinates filtering\ntrain = train[(train.pickup_longitude >= -77) &\n              (train.pickup_longitude <= -70) &\n              (train.dropoff_longitude >= -77) &\n              (train.dropoff_longitude <= 70) &\n              (train.pickup_latitude >= 35) &\n              (train.pickup_latitude <= 45) &\n              (train.dropoff_latitude >= 35) &\n              (train.dropoff_latitude <= 45)\n             ]","c1bce687":"train.pickup_datetime = train.pickup_datetime.dt.tz_localize('UTC')\ntrain.pickup_datetime = train.pickup_datetime.dt.tz_convert(tz.gettz('America\/New_York'))\n\n# Fares may change every year\ntrain['year'] = train.pickup_datetime.dt.year\n\n# Different fares during weekdays and weekends\ntrain['dayofweek'] = train.pickup_datetime.dt.dayofweek\n\n# Different fares during public holidays\ntrain['dayofyear'] = train.pickup_datetime.dt.dayofyear\n\n# Different fares in peak periods and off-peak periods\ntrain['hourofday'] = train.pickup_datetime.dt.hour\n\ntrain = train.drop('pickup_datetime', axis=1)","844d4c99":"# Computes the distance (in miles) between the pickup and the dropoff locations\ntrain['distance'] = train.apply(\n    lambda x: distance.distance((x.pickup_latitude, x.pickup_longitude), (x.dropoff_latitude, x.dropoff_longitude)).miles,\n    axis = 1)\n\ntrain = train[train.eval('(distance > 0) & (distance < 150)')]\nfare_distance_ratio = (train.fare_amount\/train.distance)\nfare_distance_ratio.describe()\n\n(fare_distance_ratio[fare_distance_ratio < 45]).hist()\n\n# Drop incoherent fares\ntrain = train[fare_distance_ratio < 45]\ndel fare_distance_ratio","bcad6457":"# Coordinates of the 3 airpots of NYC\nairports = {'jfk': [40.6441666, -73.7822222],\n            'laguardia': [40.7747222, -73.8719444],\n            'newark': [40.6897222, -74.175]}\n\n# Computes the distance between the pickup location and the airport\npickup = train.apply(lambda x: distance.distance((x.pickup_latitude, x.pickup_longitude), (airports.get('jfk'))).miles, axis=1)\n# Computes the distance between the dropoff location and the airport\ndropoff = train.apply(lambda x: distance.distance((x.dropoff_latitude, x.dropoff_longitude), (airports.get('jfk'))).miles, axis=1)\n# Selects the shortest distance\ntrain['to_jfk'] = pd.concat((pickup, dropoff), axis=1).min(axis=1)\n\npickup = train.apply(lambda x: distance.distance((x.pickup_latitude, x.pickup_longitude), (airports.get('laguardia'))).miles, axis=1)\ndropoff = train.apply(lambda x: distance.distance((x.dropoff_latitude, x.dropoff_longitude), (airports.get('laguardia'))).miles, axis=1)\ntrain['to_laguardia'] = pd.concat((pickup, dropoff), axis=1).min(axis=1)\n\npickup = train.apply(lambda x: distance.distance((x.pickup_latitude, x.pickup_longitude), (airports.get('newark'))).miles, axis=1)\ndropoff = train.apply(lambda x: distance.distance((x.dropoff_latitude, x.dropoff_longitude), (airports.get('newark'))).miles, axis=1)\ntrain['to_newark'] = pd.concat((pickup, dropoff), axis=1).min(axis=1)\n\ndel pickup, dropoff","6cbdb268":"y = train.fare_amount\ntrain = train.drop('fare_amount', axis=1)\n#train = train.drop('passenger_count', axis=1)","e822af35":"# Grid of parameters for XGBoost training\n#param_grid = {'n_estimators': [3000],\n#              'max_depth': [7, 8, 9],\n#              'learning_rate': [0.01, 0.1],\n#              'subsample': [0.8, 0.9, 1],\n#              'colsample_bytree': [0.8, 0.9, 1],\n#              'gamma': [0, 1e-5, 1e-4, 1e-3],\n#              'reg_alpha': [1e-4]\n#              }\n\n\n#xgb_grid_search = GridSearchCV(xgb.XGBRegressor(eval_metric='rmse'),\n#                               param_grid=param_grid,\n#                               cv=3,\n#                               n_jobs=-1,\n#                               verbose=0)\n\n#xgb_grid_search.fit(train, y)\n#print(\"Best estimator: {}\".format(xgb_grid_search.best_params_))\n#print(\"Best score: {}\".format(xgb_grid_search.best_score_))\n\n# The best parameters given by the grid search\nxgb_param = {'eval_metric': 'rmse',\n            'n_estimators': 3000,\n            'max_depth': 9,\n            'learning_rate': 0.1,\n            'subsample': 0.9,\n            'colsample_bytree': 0.8,\n            'gamma': 1e-4,\n            'reg_alpha': 1e-4,\n            'verbose': 0,\n            'n_jobs': -1\n            }\n\nxgb_model = xgb.XGBRegressor(**xgb_param)\nxgb_model.fit(train, y)\nxgb.plot_importance(xgb_model)","3c323781":"# Processing\ntest_key = test['key']\ntest = test.drop('key', axis=1)\n#test = test.drop('passenger_count', axis=1)","14e4a781":"test.pickup_datetime = test.pickup_datetime.dt.tz_localize('UTC')\ntest.pickup_datetime = test.pickup_datetime.dt.tz_convert(tz.gettz('America\/New_York'))\n\ntest['year'] = test.pickup_datetime.dt.year\ntest['dayofweek'] = test.pickup_datetime.dt.dayofweek\ntest['dayofyear'] = test.pickup_datetime.dt.dayofyear\ntest['hourofday'] = test.pickup_datetime.dt.hour\ntest = test.drop('pickup_datetime', axis=1)\n\n\ntest['distance'] = test.apply(lambda x: distance.distance((x.pickup_latitude, x.pickup_longitude), (x.dropoff_latitude, x.dropoff_longitude)).miles, axis = 1)\n\npickup = test.apply(lambda x: distance.distance((x.pickup_latitude, x.pickup_longitude), (airports.get('jfk'))).miles, axis=1)\ndropoff = test.apply(lambda x: distance.distance((x.dropoff_latitude, x.dropoff_longitude), (airports.get('jfk'))).miles, axis=1)\ntest['to_jfk'] = pd.concat((pickup, dropoff), axis = 1).min(axis=1)\npickup = test.apply(lambda x: distance.distance((x.pickup_latitude, x.pickup_longitude), (airports.get('laguardia'))).miles, axis=1)\ndropoff = test.apply(lambda x: distance.distance((x.dropoff_latitude, x.dropoff_longitude), (airports.get('laguardia'))).miles, axis=1)\ntest['to_laguardia'] = pd.concat((pickup, dropoff), axis = 1).min(axis=1)\npickup = test.apply(lambda x: distance.distance((x.pickup_latitude, x.pickup_longitude), (airports.get('newark'))).miles, axis=1)\ndropoff = test.apply(lambda x: distance.distance((x.dropoff_latitude, x.dropoff_longitude), (airports.get('newark'))).miles, axis=1)\ntest['to_newark'] = pd.concat((pickup, dropoff), axis = 1).min(axis=1)\ndel pickup, dropoff","e69b33ba":"xgb_predict = xgb_model.predict(test)","84e9dc17":"xgb_submission = pd.DataFrame({ 'key': test_key,\n                               'fare_amount': xgb_predict })\nxgb_submission.to_csv(\"xgb_submission.csv\", index=False)","41997fba":"### Distances engineering","cb7235fc":"### Dates conversion and engineering","ad4bdbaa":"# Load the datasets","d1bc41dd":"Let's try to see how far from the NYC airports the pickups and the dropoffs are","04a994a8":"# Train","301b67c7":"Pickup and dropoff locations should be within the limits of NYC","b9b3d97d":"### Coordinates filtering","c32cf68f":"# Test data","dc56b09b":"# Data exploration","e655cab2":"Fares change according to the date and the hour of the day"}}