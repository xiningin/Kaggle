{"cell_type":{"09361ab3":"code","6dc1aaea":"code","effa5167":"code","8852facb":"code","3c6155e8":"code","69747fb2":"code","e9e7fdcc":"code","f10499ae":"code","ff5451ca":"code","21be7a95":"code","e9b387b1":"code","46bbd90b":"code","2bf7455c":"code","1d701b8b":"code","8401cf7e":"markdown","ee96b522":"markdown","4540ce0e":"markdown"},"source":{"09361ab3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","6dc1aaea":"x_l = np.load('\/kaggle\/input\/sign-language-digits-dataset\/X.npy')\nY_l = np.load('\/kaggle\/input\/sign-language-digits-dataset\/Y.npy')\nimg_size = 64\nplt.subplot(1, 2, 1)\nplt.imshow(x_l[260].reshape(img_size, img_size))\nplt.axis('off')\nplt.subplot(1, 2, 2)\nplt.imshow(x_l[900].reshape(img_size, img_size))\nplt.axis('off')","effa5167":"X=x_l\nY=Y_l\nX = X.reshape(-1,64,64,1)\nprint(\"X shape: \" , X.shape)\nprint(\"Y shape: \" , Y.shape)","8852facb":"#X = X \/ 255.0\n\nprint(\"X shape: \" , X.shape)\nprint(\"Y shape: \" , Y.shape)","3c6155e8":"X = X.reshape(-1,64,64,1)\n\nprint(\"x_train shape: \",X.shape)\n","69747fb2":"from sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X, Y, test_size = 0.2, random_state=2)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","e9e7fdcc":"from sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\nmodel = Sequential()\n#\nmodel.add(Conv2D(filters = 32, kernel_size = (6,6),padding = 'Same', \n                 activation ='relu', input_shape = (64,64,1)))\nmodel.add(MaxPool2D(pool_size=(4,4)))\nmodel.add(Dropout(0.2))\n#\nmodel.add(Conv2D(filters = 64, kernel_size = (4,4),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(3,3), strides=(3,3)))\nmodel.add(Dropout(0.2))\n#\nmodel.add(Conv2D(filters =128 , kernel_size = (3,3),padding = 'Same', \n                 activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.2))\n# fully connected\n\nmodel.add(Flatten())\nmodel.add(Dropout(0.2))\nmodel.add(Dense(512, activation = \"relu\"))\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dense(128, activation = \"relu\"))\nmodel.add(Dense(10, activation='softmax'))","f10499ae":"epochs = 30  # for better result increase the epochs\nbatch_size = 16","ff5451ca":"# Define the optimizer\noptimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","21be7a95":"# Compile the model\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])","e9b387b1":"# fitting\nhistory = model.fit(X_train,Y_train,epochs=epochs,validation_data=(X_val,Y_val),batch_size=batch_size)","46bbd90b":"plt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","2bf7455c":"scores = model.evaluate(X_val, Y_val, verbose=0)\nprint(\"{}: {:.2f}%\".format(\"accuracy\", scores[1]*100))","1d701b8b":"# confusion matrix\nimport seaborn as sns\n# Predict the values from the validation dataset\nY_pred = model.predict(X_val)\n# Convert predictions classes to one hot vectors \nY_pred_classes = np.argmax(Y_pred,axis = 1) \n# Convert validation observations to one hot vectors\nY_true = np.argmax(Y_val,axis = 1) \n# compute the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \n# plot the confusion matrix\nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","8401cf7e":"1. [Load and Preprocessing](#1)\n2. [CNN Part](#2)","ee96b522":"<a id=\"1\" >\n\n# Load and Preprocessing","4540ce0e":"<a id=\"2\" >\n    \n# CNN Part"}}