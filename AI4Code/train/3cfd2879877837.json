{"cell_type":{"dfec3d83":"code","aee70eec":"code","2c142e9a":"code","6cac0c5a":"code","93b264f5":"code","04250708":"code","d8f5dbae":"code","c9487c91":"code","e6597279":"code","d0097a16":"code","7f6df763":"code","eccb2bd8":"code","a0fc453f":"code","0a9790c3":"code","21a3ece0":"code","c398f36c":"code","85fa7f25":"code","4a0e98dd":"code","f922028f":"code","1f0a206e":"code","c1732724":"code","513c4603":"code","81e49202":"code","fedc8188":"code","98a83171":"code","a35f7e06":"code","7314183b":"code","813dc107":"code","15f65144":"code","faeb7dcc":"code","5e8be0a0":"code","523677a7":"code","6702a193":"code","70b1b435":"code","8bbc0336":"code","452c4d1d":"code","4626f8f8":"code","df88f917":"code","efb13824":"code","1cb50466":"code","c93ff7d9":"code","91c3a1a2":"code","360bc82a":"code","368c1592":"code","d02227b0":"code","cd2caf63":"code","45e21197":"code","379723cc":"code","2ff35d31":"code","27bf0d3e":"code","b4931fa2":"code","47463e3e":"code","81893f67":"code","49666541":"markdown","2aa0e71f":"markdown","8965380b":"markdown","c9ae04a5":"markdown","7dad4002":"markdown","ca601435":"markdown","0cb6a47b":"markdown","c101b55b":"markdown","eee7d045":"markdown","d762c7cb":"markdown","3d8f7a3d":"markdown","4147c102":"markdown","96c0062a":"markdown","c14e4f61":"markdown","b058b18b":"markdown","f39cfb7a":"markdown","2c82dae8":"markdown","a0222f13":"markdown","0ad2d445":"markdown","50ef54d8":"markdown","8d3cac2c":"markdown","10dafc55":"markdown","146f3460":"markdown","368eeb29":"markdown","119407f4":"markdown","ad86197e":"markdown","d8942e63":"markdown","3e30e6cf":"markdown","b8d8f792":"markdown","0c43039a":"markdown"},"source":{"dfec3d83":"# Import the libraries needed\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\ndf = pd.read_csv('..\/input\/nutrition-facts\/menu.csv') # Read the dataset","aee70eec":"df.head() #Get the first 5 rows of the dataset","2c142e9a":"df.describe(include=\"all\") # Generate descriptive statistics","6cac0c5a":"df.info() # Generate dataset info","93b264f5":"df.isnull().values.any() # Check if there is any missing value","04250708":"df.Category.unique() # Get the menu categories","d8f5dbae":"import matplotlib.pyplot as plt\n\nmeals = df.head(110) # All meals (without drinks) are in first 110 rows of the dataset\nmeals_cal = pd.DataFrame({'Item': meals.Item, 'Calories': meals.Calories}) # Select only Items and Calories columns\nmeals_sort = meals_cal.sort_values('Calories', ascending=False) # Sort by calories\nmeals_sort.plot.barh(x='Item', y='Calories', figsize= (10,45)) # Plot horizontal bar\nplt.show()","c9487c91":"# Calories on each category\n\n# Define dataframes for each category\nbrkf = df.loc[df.Category == 'Breakfast']\nbnp = df.loc[df.Category == 'Beef & Pork']\ncnf = df.loc[df.Category == 'Chicken & Fish']\nsld = df.loc[df.Category == 'Salads']\nsnass = df.loc[df.Category == 'Snacks & Sides']\ndess = df.loc[df.Category == 'Desserts'] \nbev = df.loc[df.Category == 'Beverages']\ncnt = df.loc[df.Category == 'Coffee & Tea']\nss = df.loc[df.Category == 'Smoothies & Shakes']\n\nimport seaborn as sns\n# Plot calorie distribution for each category\nfig, axes = plt.subplots(3, 3, figsize=(15, 7), sharex=True)\nsns.color_palette(\"tab10\")\nsns.distplot( brkf[\"Calories\"] , color='red', ax=axes[0, 0], label = \"Breakfast\")\nsns.distplot( bnp[\"Calories\"] , color='orange',ax=axes[0, 1], label = \"Beef & Pork\")\nsns.distplot( cnf[\"Calories\"] , color='brown',ax=axes[0, 2], label = \"Chicken & Fish\")\nsns.distplot( sld[\"Calories\"] , color='lime',ax=axes[1, 0], label = \"Salads\")\nsns.distplot( snass[\"Calories\"] , color='green',ax=axes[1, 1], label = \"Snacks & Sides\")\nsns.distplot( dess[\"Calories\"] ,  color='teal',ax=axes[1, 2], label = \"Desserts\")\nsns.distplot( bev[\"Calories\"] ,  color='gold',ax=axes[2, 0], label = \"Beverages\")\nsns.distplot( cnt[\"Calories\"] ,  color='blue',ax=axes[2, 1], label = \"Coffee & Tea\")\nsns.distplot( ss[\"Calories\"] ,  color='violet',ax=axes[2, 2], label = \"Smoothies & Shake\")\nfig.suptitle(\"Calories Distribution on Each Menu Category\")\nfig.legend()\nplt.show()","e6597279":"# Average calories on each categories\navg_cat = [round(brkf['Calories'].mean(axis=0), 2), round(bnp['Calories'].mean(axis=0), 2), round(cnf['Calories'].mean(axis=0), 2),\n          round(sld['Calories'].mean(axis=0), 2), round(snass['Calories'].mean(axis=0), 2), round(dess['Calories'].mean(axis=0), 2),\n          round(bev['Calories'].mean(axis=0), 2), round(cnt['Calories'].mean(axis=0), 2), round(ss['Calories'].mean(axis=0), 2)]\nindex = ['Breakfast', 'Beef & Pork', 'Chicken & Fish', 'Salads', 'Snacks & Sides', 'Desserts', 'Beverages', 'Coffee & Tea', 'Smoothies & Shakes']\navg_calat= pd.DataFrame({'Avg Calories': avg_cat}, index=index)\nax = avg_calat.plot.bar(rot=0, color='gray', figsize=(13,8), title='Average Calories in Each Menu Category (in Cal)', legend=True)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))\n#ax.set_title(\"Average Calories in Each Menu Category (in Cal)\")","d0097a16":"print(\"Average calories of all McD's meals (include drinks) is \", round(df['Calories'].mean(axis=0), 2), \"Cal.\") #average calories of all meals (include drinks)\nprint(\"Average calories of all McD's meals (drinks excluded) is \", round(meals.Calories.mean(axis=0), 2), \"Cal.\") #average calories of meals (no drinks)","7f6df763":"# Category: Beverages\n#bev = df.loc[df.Category == 'Beverages']","eccb2bd8":"# Get caloric intake contribution from Beverages category\ncal_bev = pd.DataFrame({'Item': bev.Item, 'Calories': bev.Calories})\ncal_bev['Men'] = cal_bev.Calories\/2500\ncal_bev['Women'] = cal_bev.Calories\/2000\ncal_bev","a0fc453f":"# Average Calories in 'Beverages' Category\navg_bev = bev['Calories'].mean(axis=0)\nprint(\"Average calories of 'Beverages' category is\", round(avg_bev, 2))\n\n# Generally, the recommended daily calorie intake is 2,000 calories a day for women and 2,500 for men.\navg_bev = pd.to_numeric(avg_bev) \nbev_men = avg_bev\/2500\nprint(\"Averagely 'Beverages' contributes to men's calories intake for \", round(bev_men,2))\n\nbev_women = avg_bev\/2000\nprint(\"Averagely 'Beverages' contributes to women's calories intake for \", round(bev_women, 2))","0a9790c3":"# Category: Coffee & Tea\n#cnt = df.loc[df.Category == 'Coffee & Tea']","21a3ece0":"# Get caloric intake contribution from Coffee & Tea category\ncal_cnt = pd.DataFrame({'Item': cnt.Item, 'Calories': cnt.Calories})\ncal_cnt['Men'] = cal_cnt.Calories\/2500\ncal_cnt['Women'] = cal_cnt.Calories\/2000\ncal_cnt","c398f36c":"# Average Calories in 'Coffee & Tea' Category\navg_cnt = cnt['Calories'].mean(axis=0)\nprint(\"Average calories of 'Coffee & Tea' category is\", round(avg_cnt, 2))\n\n# Generally, the recommended daily calorie intake is 2,000 calories a day for women and 2,500 for men.\navg_cnt = pd.to_numeric(avg_cnt)\ncnt_men = avg_cnt\/2500\nprint(\"Averagely 'Coffee & Tea' contributes to men's calories intake for \", round(cnt_men, 2))\n\ncnt_women = avg_cnt\/2000\nprint(\"Averagely 'Coffee & Tea' contributes to women's calories intake for \", round(cnt_women, 2))","85fa7f25":"# Category: Smoothies & Shakes\n#ss = df.loc[df.Category == 'Smoothies & Shakes']","4a0e98dd":"# Get caloric intake contribution from Smoothies & Shakes category\ncal_ss = pd.DataFrame({'Item': ss.Item, 'Calories': ss.Calories})\ncal_ss['Men'] = cal_ss.Calories\/2500\ncal_ss['Women'] = cal_ss.Calories\/2000\ncal_ss","f922028f":"# Average Calories in 'Smoothies & Shakes' Category\navg_ss = ss['Calories'].mean(axis=0)\nprint(\"Average calories of 'Smoothies & Shakes' category is\", round(avg_ss, 2))\n\n# Generally, the recommended daily calorie intake is 2,000 calories a day for women and 2,500 for men.\navg_ss = pd.to_numeric(avg_ss)\nss_men = avg_ss\/2500\nprint(\"Averagely 'Smoothies & Shakes' contributes to men's calories intake for \", round(ss_men, 2))\n\nss_women = avg_ss\/2000\nprint(\"Averagely 'Coffee & Tea' contributes to women's calories intake for \", round(ss_women, 2))","1f0a206e":"drink = df.tail(150)\navg_drink = drink['Calories'].mean(axis=0)\nprint(\"Average calories of all drinks is\", round(avg_drink, 2))\n\n# Generally, the recommended daily calorie intake is 2,000 calories a day for women and 2,500 for men.\navg_drink = pd.to_numeric(avg_drink)\ndrink_men = avg_drink\/2500\nprint(\"Averagely drink options contributes to men's calories intake for \", round(drink_men, 2))\n\ndrink_women = avg_drink\/2000\nprint(\"Averagely drink options contributes to women's calories intake for \", round(drink_women, 2))","c1732724":"# Exploring the amount of calories on Crispy Chicken category\ncrispy = df[df['Item'].str.contains('Crispy Chicken')]\ncrispy_cal = pd.DataFrame({'Item': crispy.Item, 'Calories': crispy.Calories})\ncrispy_sort = crispy_cal.sort_values('Calories', ascending=False)\nax = crispy_sort.plot.barh(x='Item', y='Calories', figsize= (10,7))\nax.set_title(\"Total Calories in Crispy Chicken Item Category (in Cal)\")","513c4603":"# Average calories on Crispy Chicken Category\navg_crispy_cal = crispy.Calories.mean(axis=0)\nprint(\"Average calories on Crispy Chicken category is \", avg_crispy_cal, \"Cal.\")","81e49202":"# Exploring the amount of calories on Grilled Chicken category\ngrilled = df[df['Item'].str.contains('Grilled Chicken')]\ngrilled_cal = pd.DataFrame({'Item': grilled.Item, 'Calories': grilled.Calories})\ngrilled_sort = grilled_cal.sort_values('Calories', ascending=False)\nax = grilled_sort.plot.barh(x='Item', y='Calories', figsize= (10,7))\nax.set_title(\"Total Calories in Grilled Chicken Item Category (in Cal)\")","fedc8188":"# Average calories on Grilled Chicken Category\navg_grilled_cal = round(grilled.Calories.mean(axis=0), 2)\nprint(\"Average calories on Grilled Chicken category is \", avg_grilled_cal, \"Cal.\")","98a83171":"# Get visual comparison of Crispy vs Grilled on calories\navg_cal = pd.DataFrame({'Categories':['Crispy Chicken', 'Grilled Chicken'], 'Avg Calories': [avg_crispy_cal, avg_grilled_cal]})\nax = avg_cal.plot.bar(x = 'Categories', y = 'Avg Calories', figsize=(7,5))\nax.set_title(\"Average Calories on Crispy Chicken and Grilled Chicken Menu Categories (in Cal)\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","a35f7e06":"# Get the amount of cholesterol and sodium in Crispy Chicken category\ncrispy_chsod = pd.DataFrame({'Item': crispy.Item, 'Cholesterol': crispy.Cholesterol, 'Sodium': crispy.Sodium})\ncrispy_chsod_sort = crispy_chsod.sort_values('Sodium', ascending=False) #sort by sodium amount\nax = crispy_chsod_sort.plot.barh(x='Item', y=['Cholesterol','Sodium'], stacked=False, figsize= (10,15), color=['yellow', 'orange'])\nax.set_title(\"Total Cholesterol and Sodium in Crispy Chicken Menu Category (in mg)\")\n#for p in ax.patches:\n#    ax.annotate(str(p.get_width()), (p.get_x() * 1.005, p.get_width() * 1.005))\n#ax = crispy.plot.barh(stacked=True, figsize=(10, 12))\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    ax.annotate(str(width), xy=(left+width\/2, bottom+height\/2), \n                horizontalalignment='left', verticalalignment='center') # Give annotation to the chart","7314183b":"# Get the amount of cholesterol and sodium in Grilled Chicken category\ngrilled_chsod = pd.DataFrame({'Item': grilled.Item, 'Cholesterol': grilled.Cholesterol, 'Sodium': grilled.Sodium})\ngrilled_chsod_sort = grilled_chsod.sort_values('Sodium', ascending=False) #sort by sodium amount\nax = grilled_chsod_sort.plot.barh(x='Item', y=['Cholesterol','Sodium'], stacked=False, figsize= (10,15), color=['yellow', 'orange'])\nax.set_title(\"Total Cholesterol and Sodium in Grilled Chicken Menu Category (in mg)\")\n#ax = grilled.plot.barh(stacked=True, figsize=(10, 12))\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    ax.annotate(str(width), xy=(left+width\/2, bottom+height\/2), \n                horizontalalignment='left', verticalalignment='center') # Give annotation to the chart","813dc107":"# Get the average of sodium and cholesterol amount in Crispy Chicken category\navg_crispy_sod = round(crispy.Sodium.mean(axis=0), 2)\navg_crispy_ch = round(crispy.Cholesterol.mean(axis=0), 2)\nprint(\"The average amount of sodium in Crispy Chicken category is \", avg_crispy_sod, \"mg, while the average amount of cholesterol is \", avg_crispy_ch, \"mg.\")\n\n# Get the average of sodium and cholesterol amount in Grilled Chicken category\navg_grilled_sod = round(grilled.Sodium.mean(axis=0), 2)\navg_grilled_ch = round(grilled.Cholesterol.mean(axis=0), 2)\nprint(\"The average amount of sodium in Grilled Chicken category is \", avg_grilled_sod, \"mg, while the average amount of cholesterol is \", avg_grilled_ch, \"mg.\")","15f65144":"# Plot a bar chart for visual comparison\navg_sod = [avg_crispy_sod, avg_grilled_sod]\navg_ch = [avg_crispy_ch, avg_grilled_ch]\nindex = ['Crispy Chicken', 'Grilled Chicken']\navg_sodch = pd.DataFrame({'Avg Sodium': avg_sod,\n                   'Avg Cholesterol': avg_ch}, index=index)\nax = avg_sodch.plot.bar(rot=0, color=['brown', 'orange'], figsize=(13,5))\nax.set_title(\"Average Sodium and Cholesterol in Crispy Chicken and Grilled Chicken Categories (in mg)\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))\n#plt.barh(['Avg Sodium on Crispy Chicken items', 'Avg Cholesterol on Crispy Chicken items', 'Avg Sodium on Grilled Chicken items', 'Avg Cholesterol on Grilled Chicken items'], [avg_crispy_sod, avg_crispy_ch, avg_grilled_sod, avg_grilled_ch])","faeb7dcc":"# Get the amount of sugar and dietary fiber in Crispy Chicken category\ncrispy_sdf = pd.DataFrame({'Item': crispy.Item, 'Sugars': crispy.Sugars, 'Dietary Fiber': crispy['Dietary Fiber']})\ncrispy_sdf_sort = crispy_sdf.sort_values('Sugars', ascending=False) #sort by sugar amount\nax = crispy_sdf_sort.plot.barh(x='Item', y=['Sugars','Dietary Fiber'], stacked=False, figsize= (10,10), color=['lime', 'yellow'])\nax.set_title(\"Total Sugars and Dietary Fiber in Crispy Chicken Menu Category (in g)\")\n#ax = grilled.plot.barh(stacked=True, figsize=(10, 12))\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    ax.annotate(str(width), xy=(left+width\/2, bottom+height\/2), \n                horizontalalignment='left', verticalalignment='center') # Give annotation to the chart","5e8be0a0":"# Get the amount of sugar and dietary fiber in Grilled Chicken category\ngrilled_sdf = pd.DataFrame({'Item': grilled.Item, 'Sugars': grilled.Sugars, 'Dietary Fiber': grilled['Dietary Fiber']})\ngrilled_sdf_sort = grilled_sdf.sort_values('Sugars', ascending=False) #sort by sugar amount\nax = grilled_sdf_sort.plot.barh(x='Item', y=['Sugars','Dietary Fiber'], stacked=False, figsize= (10,10), color=['lime', 'yellow'])\nax.set_title(\"Total Sugars and Dietary Fiber in Grilled Chicken Menu Category (in g)\")\n#ax = grilled.plot.barh(stacked=True, figsize=(10, 12))\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    ax.annotate(str(width), xy=(left+width\/2, bottom+height\/2), \n                horizontalalignment='left', verticalalignment='center') # Give annotation to the chart","523677a7":"# Get the average of sugars and dietary fiber amount in Crispy Chicken category\navg_crispy_sug = round(crispy.Sugars.mean(axis=0), 2)\navg_crispy_df = round(crispy['Dietary Fiber'].mean(axis=0), 2)\nprint(\"The average amount of sugars in Crispy Chicken category is \", avg_crispy_sug, \"g, while the average amount of dietary fiber is \", avg_crispy_df, \"g.\")\n\n# Get the average of sodium and cholesterol amount in Grilled Chicken category\navg_grilled_sug = round(grilled.Sugars.mean(axis=0), 2)\navg_grilled_df = round(grilled['Dietary Fiber'].mean(axis=0), 2)\nprint(\"The average amount of sugars in Grilled Chicken category is \", avg_grilled_sug, \"g, while the average amount of dietary fiber is \", avg_grilled_df, \"g.\")","6702a193":"# Plot a bar chart for visual comparison\navg_sug = [avg_crispy_sug, avg_grilled_sug]\navg_df = [avg_crispy_df, avg_grilled_df]\nindex = ['Crispy Chicken', 'Grilled Chicken']\navg_sdf = pd.DataFrame({'Avg Sugars': avg_sug,\n                   'Avg Dietary Fiber': avg_df}, index=index)\nax = avg_sdf.plot.bar(rot=0, color=['lime', 'green'], figsize=(10,5))\nax.set_title(\"Average Sodium and Cholesterol in Crispy Chicken and Grilled Chicken Categories (in mg)\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","70b1b435":"# Get the amount of vitamins and minerals in Crispy Chicken category\ncrispy_vm = pd.DataFrame({'Item': crispy.Item, 'Vit A': crispy['Vitamin A (% Daily Value)'], 'Vit C': crispy['Vitamin C (% Daily Value)'], 'Calcium': crispy['Calcium (% Daily Value)'], 'Iron': crispy['Iron (% Daily Value)']})\ncrispy_vm_sort = crispy_vm.sort_values('Vit A', ascending=False) #sort by vit A amount\nax = crispy_vm_sort.plot.barh(x='Item', y=['Vit A','Vit C', 'Calcium', 'Iron'], stacked=False, figsize= (8,15), colormap='spring')\nax.set_title(\"Total Vitamins and Minerals in Crispy Chicken Menu Category (in %DV)\")\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    ax.annotate(str(width), xy=(left+width\/2, bottom+height\/2), \n                horizontalalignment='left', verticalalignment='center') # Give annotation to the chart","8bbc0336":"# Get the amount of vitamins and minerals in Grilled Chicken category\ngrilled_vm = pd.DataFrame({'Item': grilled.Item, 'Vit A': grilled['Vitamin A (% Daily Value)'], 'Vit C': grilled['Vitamin C (% Daily Value)'], 'Calcium': grilled['Calcium (% Daily Value)'], 'Iron': grilled['Iron (% Daily Value)']})\ngrilled_vm_sort = grilled_vm.sort_values('Vit A', ascending=False) #sort by vit A amount\nax = grilled_vm_sort.plot.barh(x='Item', y=['Vit A','Vit C', 'Calcium', 'Iron'], stacked=False, figsize= (8,15), colormap='spring')\nax.set_title(\"Total Vitamins and Minerals in Grilled Chicken Menu Category (in %DV)\")\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    ax.annotate(str(width), xy=(left+width\/2, bottom+height\/2), \n                horizontalalignment='left', verticalalignment='center') # Give annotation to the chart","452c4d1d":"# Get the average of vitamins and minerals in Crispy Chicken category\navg_crispy_vita = round(crispy_vm['Vit A'].mean(axis=0), 2)\navg_crispy_vitc = round(crispy_vm['Vit C'].mean(axis=0), 2)\navg_crispy_calc = round(crispy_vm['Calcium'].mean(axis=0), 2)\navg_crispy_iron = round(crispy_vm['Iron'].mean(axis=0), 2)\nprint(\"The average amount of Vit A, Vit C, Calcium, and Iron respectively in Crispy Chicken category is \", avg_crispy_vita, \"%DV,\", avg_crispy_vitc, \"%DV,\", avg_crispy_calc, \"%DV, and\", avg_crispy_iron, \"%DV.\")\n\n# Get the average of vitamins and minerals in Grilled Chicken category\navg_grilled_vita = round(grilled_vm['Vit A'].mean(axis=0), 2)\navg_grilled_vitc = round(grilled_vm['Vit C'].mean(axis=0), 2)\navg_grilled_calc = round(grilled_vm['Calcium'].mean(axis=0), 2)\navg_grilled_iron = round(grilled_vm['Iron'].mean(axis=0), 2)\nprint(\"The average amount of Vit A, Vit C, Calcium, and Iron respectively in Grilled Chicken category is \", avg_grilled_vita, \"%DV,\", avg_grilled_vitc, \"%DV,\", avg_grilled_calc, \"%DV, and\", avg_grilled_iron, \"%DV.\")","4626f8f8":"# Plot a bar chart for visual comparison\navg_vita = [avg_crispy_vita, avg_grilled_vita]\navg_vitc = [avg_crispy_vitc, avg_grilled_vitc]\navg_calc = [avg_crispy_calc, avg_grilled_calc]\navg_iron = [avg_crispy_iron, avg_grilled_iron]\nindex = ['Crispy Chicken', 'Grilled Chicken']\navg_vm = pd.DataFrame({'Avg Vit A': avg_vita,\n                   'Avg Vit C': avg_vitc,\n                   'Avg Calcium': avg_calc,\n                   'Avg Iron': avg_iron}, index=index)\nax = avg_vm.plot.bar(rot=0, colormap='spring', figsize=(10,5))\nax.set_title(\"Average Vitamins and Minerals in Crispy Chicken and Grilled Chicken Categories (in %DV)\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","df88f917":"# Exploring the amount of calories on Crispy Chicken category\nwhites = df[df['Item'].str.contains('Egg White')]\nwhites_cal = pd.DataFrame({'Item': whites.Item, 'Calories': whites.Calories})\nwhites_sort = whites_cal.sort_values('Calories', ascending=False)\nwhites_sort.plot.barh(x='Item', y='Calories', figsize= (10,7))","efb13824":"# Exploring the amount of calories on Whole Eggs category\nwhole = df[df['Item'].str.contains('Egg')] \nwhole = whole[~whole['Item'].str.contains('White')]\nwhole_cal = pd.DataFrame({'Item': whole.Item, 'Calories': whole.Calories})\nwhole_sort = whole_cal.sort_values('Calories', ascending=False)\nwhole_sort.plot.barh(x='Item', y='Calories', figsize= (10,7))","1cb50466":"# Average calories on Egg Whites Category\navg_whites_cal = whites.Calories.mean(axis=0)\nprint(\"Average calories on Egg Whites category is \", round(avg_whites_cal, 2), \"Cal.\")\n\n# Average calories on Whole Egg Category\navg_whole_cal = whole.Calories.mean(axis=0)\nprint(\"Average calories on Whole Egg category is \", round(avg_whole_cal, 2), \"Cal.\")","c93ff7d9":"# Plot a bar chart for visual comparison\navg_egg_cal = [avg_whites_cal, avg_whole_cal]\nindex = ['Egg Whites', 'Whole Eggs']\navg_egg_cal = pd.DataFrame({'Avg Cal': avg_egg_cal,}, index=index)\nax = avg_egg_cal.plot.bar(rot=0)\nax.set_title(\"Average Calories in Egg Whites and Whole Eggs Categories (in Cal)\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","91c3a1a2":"# Get the amount of cholesterol and sodium in Egg Whites category\nwhites_chsod = pd.DataFrame({'Item': whites.Item, 'Cholesterol': whites.Cholesterol, 'Sodium': whites.Sodium})\nwhites_chsod_sort = whites_chsod.sort_values('Sodium', ascending=False) #sort by sodium amount\nax = whites_chsod_sort.plot.barh(x='Item', y=['Cholesterol','Sodium'], stacked=False, figsize= (10,15), color=['yellow', 'orange'])\nax.set_title(\"Total Cholesterol and Sodium in Egg Whites Menu Category (in mg)\")\n#for p in ax.patches:\n#    ax.annotate(str(p.get_width()), (p.get_x() * 1.005, p.get_width() * 1.005))\n#ax = crispy.plot.barh(stacked=True, figsize=(10, 12))\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    ax.annotate(str(width), xy=(left+width\/2, bottom+height\/2), \n                horizontalalignment='left', verticalalignment='center') # Give annotation to the chart","360bc82a":"# Get the amount of cholesterol and sodium in Whole Whites category\nwhole_chsod = pd.DataFrame({'Item': whole.Item, 'Cholesterol': whole.Cholesterol, 'Sodium': whole.Sodium})\nwhole_chsod_sort = whole_chsod.sort_values('Sodium', ascending=False) #sort by sodium amount\nax = whole_chsod_sort.plot.barh(x='Item', y=['Cholesterol','Sodium'], stacked=False, figsize= (10,15), color=['yellow', 'orange'])\nax.set_title(\"Total Cholesterol and Sodium in Whole Eggs Menu Category (in mg)\")\n#for p in ax.patches:\n#    ax.annotate(str(p.get_width()), (p.get_x() * 1.005, p.get_width() * 1.005))\n#ax = crispy.plot.barh(stacked=True, figsize=(10, 12))\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    ax.annotate(str(width), xy=(left+width\/2, bottom+height\/2), \n                horizontalalignment='left', verticalalignment='center') # Give annotation to the chart","368c1592":"# Get the average of sodium and cholesterol amount in Egg Whites category\navg_whites_sod = round(whites.Sodium.mean(axis=0), 2)\navg_whites_ch = round(whites.Cholesterol.mean(axis=0), 2)\nprint(\"The average amount of sodium in Egg Whites category is \", avg_whites_sod, \"mg, while the average amount of cholesterol is \", avg_whites_ch, \"mg.\")\n\n# Get the average of sodium and cholesterol amount in Whole Eggs category\navg_whole_sod = round(whole.Sodium.mean(axis=0), 2)\navg_whole_ch = round(whole.Cholesterol.mean(axis=0), 2)\nprint(\"The average amount of sodium in Whole Eggs category is \", avg_whole_sod, \"mg, while the average amount of cholesterol is \", avg_whole_ch, \"mg.\")","d02227b0":"# Plot a bar chart for visual comparison\navg_egg_sod = [avg_whites_sod, avg_whole_sod]\navg_egg_ch = [avg_whites_ch, avg_whole_ch]\nindex = ['Egg Whites', 'Whole Eggs']\navg_egg_sodch = pd.DataFrame({'Avg Sodium': avg_sod,\n                   'Avg Cholesterol': avg_ch}, index=index)\nax = avg_egg_sodch.plot.bar(rot=0, color=['brown', 'orange'], figsize=(10,5))\nax.set_title(\"Average Sodium and Cholesterol in Egg Whites and Whole Eggs Categories (in mg)\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))\n#plt.barh(['Avg Sodium on Crispy Chicken items', 'Avg Cholesterol on Crispy Chicken items', 'Avg Sodium on Grilled Chicken items', 'Avg Cholesterol on Grilled Chicken items'], [avg_crispy_sod, avg_crispy_ch, avg_grilled_sod, avg_grilled_ch])","cd2caf63":"# Get the amount of sugar and dietary fiber in Egg Whites category\nwhites_sdf = pd.DataFrame({'Item': whites.Item, 'Sugars': whites.Sugars, 'Dietary Fiber': whites['Dietary Fiber']})\nwhites_sdf_sort = whites_sdf.sort_values('Sugars', ascending=False) #sort by sugar amount\nax = whites_sdf_sort.plot.barh(x='Item', y=['Sugars','Dietary Fiber'], stacked=False, figsize= (10,10), color=['lime', 'yellow'])\nax.set_title(\"Total Sugars and Dietary Fiber in Egg Whites Menu Category (in g)\")\n#ax = grilled.plot.barh(stacked=True, figsize=(10, 12))\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    ax.annotate(str(width), xy=(left+width\/2, bottom+height\/2), \n                horizontalalignment='left', verticalalignment='center') # Give annotation to the chart","45e21197":"# Get the amount of sugar and dietary fiber in Whole Eggs category\nwhole_sdf = pd.DataFrame({'Item': whole.Item, 'Sugars': whole.Sugars, 'Dietary Fiber': whole['Dietary Fiber']})\nwhole_sdf_sort = whole_sdf.sort_values('Sugars', ascending=False) #sort by sugar amount\nax = whole_sdf_sort.plot.barh(x='Item', y=['Sugars','Dietary Fiber'], stacked=False, figsize= (10,10), color=['lime', 'yellow'])\nax.set_title(\"Total Sugars and Dietary Fiber in Whole Eggs Menu Category (in g)\")\n#ax = grilled.plot.barh(stacked=True, figsize=(10, 12))\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    ax.annotate(str(width), xy=(left+width\/2, bottom+height\/2), \n                horizontalalignment='left', verticalalignment='center') # Give annotation to the chart","379723cc":"# Get the average of sugars and dietary fiber amount in Egg Whites category\navg_whites_sug = round(whites.Sugars.mean(axis=0), 2)\navg_whites_df = round(whites['Dietary Fiber'].mean(axis=0), 2)\nprint(\"The average amount of sugars in Egg Whites category is \", avg_whites_sug, \"g, while the average amount of dietary fiber is \", avg_whites_df, \"g.\")\n\n# Get the average of sodium and cholesterol amount in Grilled Chicken category\navg_whole_sug = round(whole.Sugars.mean(axis=0), 2)\navg_whole_df = round(whole['Dietary Fiber'].mean(axis=0), 2)\nprint(\"The average amount of sugars in Whole Whites category is \", avg_whole_sug, \"g, while the average amount of dietary fiber is \", avg_whole_df, \"g.\")","2ff35d31":"# Plot a bar chart for visual comparison\navg_egg_sug = [avg_whites_sug, avg_whole_sug]\navg_egg_df = [avg_whites_df, avg_whole_df]\nindex = ['Egg Whites', 'Whole Eggs']\navg_egg_sdf = pd.DataFrame({'Avg Sugars': avg_sug,\n                   'Avg Dietary Fiber': avg_df}, index=index)\nax = avg_egg_sdf.plot.bar(rot=0, color=['lime', 'green'], figsize=(10,5))\nax.set_title(\"Average Sugars and Dietary Fiber in Egg Whites and Whole Eggs Categories (in g)\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","27bf0d3e":"# Get the amount of vitamins and minerals in Egg Whites category\nwhites_vm = pd.DataFrame({'Item': whites.Item, 'Vit A': whites['Vitamin A (% Daily Value)'], 'Vit C': whites['Vitamin C (% Daily Value)'], 'Calcium': whites['Calcium (% Daily Value)'], 'Iron': whites['Iron (% Daily Value)']})\nwhites_vm_sort = whites_vm.sort_values('Iron', ascending=False) #sort by iron amount\nax = whites_vm_sort.plot.barh(x='Item', y=['Vit A','Vit C', 'Calcium', 'Iron'], stacked=False, figsize= (8,15), colormap='spring')\nax.set_title(\"Total Vitamins and Minerals in Egg Whites Menu Category (in %DV)\")\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    ax.annotate(str(width), xy=(left+width\/2, bottom+height\/2), \n                horizontalalignment='left', verticalalignment='center') # Give annotation to the chart","b4931fa2":"# Get the amount of vitamins and minerals in Whole Eggs category\nwhole_vm = pd.DataFrame({'Item': whole.Item, 'Vit A': whole['Vitamin A (% Daily Value)'], 'Vit C': whole['Vitamin C (% Daily Value)'], 'Calcium': whole['Calcium (% Daily Value)'], 'Iron': whole['Iron (% Daily Value)']})\nwhole_vm_sort = whole_vm.sort_values('Vit A', ascending=False) #sort by iron amount\nax = whole_vm_sort.plot.barh(x='Item', y=['Vit A','Vit C', 'Calcium', 'Iron'], stacked=False, figsize= (8,15), colormap='spring')\nax.set_title(\"Total Vitamins and Minerals in Whole Eggs Menu Category (in %DV)\")\nfor p in ax.patches:\n    left, bottom, width, height = p.get_bbox().bounds\n    ax.annotate(str(width), xy=(left+width\/2, bottom+height\/2), \n                horizontalalignment='left', verticalalignment='center') # Give annotation to the chart","47463e3e":"# Get the average of vitamins and minerals in Egg Whites category\navg_whites_vita = round(whites_vm['Vit A'].mean(axis=0), 2)\navg_whites_vitc = round(whites_vm['Vit C'].mean(axis=0), 2)\navg_whites_calc = round(whites_vm['Calcium'].mean(axis=0), 2)\navg_whites_iron = round(whites_vm['Iron'].mean(axis=0), 2)\nprint(\"The average amount of Vit A, Vit C, Calcium, and Iron respectively in Egg Whites category is \", avg_whites_vita, \"%DV,\", avg_whites_vitc, \"%DV,\", avg_whites_calc, \"%DV, and\", avg_whites_iron, \"%DV.\")\n\n# Get the average of vitamins and minerals in Whole Eggs category\navg_whole_vita = round(whole_vm['Vit A'].mean(axis=0), 2)\navg_whole_vitc = round(whole_vm['Vit C'].mean(axis=0), 2)\navg_whole_calc = round(whole_vm['Calcium'].mean(axis=0), 2)\navg_whole_iron = round(whole_vm['Iron'].mean(axis=0), 2)\nprint(\"The average amount of Vit A, Vit C, Calcium, and Iron respectively in Whole Eggs category is \", avg_whole_vita, \"%DV,\", avg_whole_vitc, \"%DV,\", avg_whole_calc, \"%DV, and\", avg_whole_iron, \"%DV.\")","81893f67":"# Plot a bar chart for visual comparison\navg_egg_vita = [avg_whites_vita, avg_whole_vita]\navg_egg_vitc = [avg_whites_vitc, avg_whole_vitc]\navg_egg_calc = [avg_whites_calc, avg_whole_calc]\navg_egg_iron = [avg_whites_iron, avg_whole_iron]\nindex = ['Egg Whites', 'Whole Eggs']\navg_egg_vm = pd.DataFrame({'Avg Vit A': avg_egg_vita,\n                   'Avg Vit C': avg_egg_vitc,\n                   'Avg Calcium': avg_egg_calc,\n                   'Avg Iron': avg_egg_iron}, index=index)\nax = avg_egg_vm.plot.bar(rot=0, colormap='spring', figsize=(10,5))\nax.set_title(\"Average Vitamins and Minerals in Crispy Chicken and Grilled Chicken Categories (in %DV)\")\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))","49666541":"Now take a look on the amount of vitamins and minerals in both categories. the types of vitamins and minerals that are in the dataset are vitamin A & C, calcium, and iron. All in daily value percentages (%DV).","2aa0e71f":"\nProblem #1 How many calories does the average McDonald's value meal contain?<br>\nNote: 'Calories from Fat' is included in 'Calories' so we only have to count the average calories from 'Calories'.","8965380b":"We can conclude that Crispy Chicken category has higher average calories than Grilled Chicken category.","c9ae04a5":"Let's compare the average amount of vitamins and minerals on both categories","7dad4002":"We can conclude that Egg Whites category has higher average amount of sodium, and lower average cholesterol amount than Whole Eggs category.\n\nNow, let's take a look at the amount of sugars and dietary fiber in both category.","ca601435":"\nProblem #3 Does ordered grilled chicken instead of crispy increase a sandwich's nutritional value?<br>\nThe nutritional value of foods, including meat and meat products, can be defined in a number of different ways, from simply listing the quantities of various nutrients contained in the foods, to considering biological factors that affect the utilization of these nutrients by the body. -P.A. Lofgren, in Encyclopedia of Human Nutrition (Third Edition), 2013.<br> \nThere are five major classes of nutrients: proteins, lipids (fat), carbohydrates, vitamins, and minerals.","0cb6a47b":"We can concluded that Crispy Chicken category has higher average amount of sugar and lower average amount of dietary fiber than Grilled Chicken category.","c101b55b":"From analysis above, we can conclude that items in Egg Whites category has higher average amount of calories than items in Whole Eggs category.","eee7d045":"We can concluded that Crispy Chicken category is higher in average sodium amount and lower in average cholesterol amount than Grilled Chicken Category","d762c7cb":"We can concluded that Crispy Chicken category has higher average amount of vitamin C and lower average amount of vitamin A, calcium, and iron than Grilled Chicken category.\n\nSo, to answer Problem 3, despite the health aspects, menu items in Grilled Chicken category has more nutritional values in terms of the average amount of dietary fiber, cholesterol, vitamin A & C, calcium, and iron than menu items in Crispy Chicken category. While Crispy Chicken category has higher average amount of calories, sodium, and sugar than Grilled Chicken category. To determine whether a food item is healthy or not, we have to do lab test. In the mean time, eat wisely.","3d8f7a3d":"We can concluded that Egg Whites category has lower average amount of vitamin A & C, calcium, and iron than Egg Whites category.\n\nSo, to answer Problem 4, despite the health aspects, menu items in Egg Whites category has more nutritional values in terms of the average amount of calorie, sodium, sugar, dietary fiber, vitamin A & C, calcium, and iron than menu items in Whole Eggs category. While Whole Eggs category has higher average amount of cholesterol than Egg Whites category. To determine whether a food item is healthy or not, we have to do lab test. In the mean time, eat wisely.","4147c102":"Let's compare the average amount of sugars and dietary fiber on both categories.","96c0062a":"Note: As stated in previous problem, the amount of cholesterol in this menu set is not always directly proportional to the amount of sodium. \n\nNow let's compare the average amount of those nutrients in both categories.","c14e4f61":"# Average Meal Calories","b058b18b":"# General dataset analysis","f39cfb7a":"# **McDonald's Menu Exploratory Data Analysis**<br>\nExploratory Data Analysis of Nutrition Facts for McDonald's menu","2c82dae8":"Problem #2 How much do beverages, like soda or coffee, contribute to the overall caloric intake? <br>\nIn McD there are several categories of drinks, which are 'Beverages', 'Coffee & Tea', and 'Smoothies and Shakes'. Let's see the analysis from each item to average calorie of all drinks.","a0222f13":"Now take a look on the amount of vitamins and minerals in both categories. the types of vitamins and minerals that are in the dataset are vitamin A & C, calcium, and iron. All in daily value percentages (%DV).","0ad2d445":"Note: The amount of cholesterol in this menu set is not always directly proportional to the amount of sodium. For example, Premium Crispy Chicken Club Sandwich with 1410mg of sodium has 85mg of cholesterol, while Premium McWrap Southwest Chicken (Crispy Chicken) with 1480mg of sodium (which is higher than the previous item) only has 65mg of cholesterol.\n\nSo does in Grilled Chicken category, Premium Grilled Chicken Club Sandwich with 1250mg of sodium has 105mg of cholesterol, while Premium McWrap Southwest Chicken (Grilled Chicken) with 1370mg of sodium has 95mg of cholesterol.\n\nNow let's compare the average amount of those nutrients in both categories.","50ef54d8":"Let's see for all drink options","8d3cac2c":"Let's compare the average amount of vitamins and minerals on both categories","10dafc55":"Now, let's look at cholesterol and sodium in them!","146f3460":"# Drink the Calories!","368eeb29":"# Whole Egg vs Egg Whites","119407f4":"Reported from US Department of Agriculture, Carbohydrates provide 4 calories per gram, protein provides 4 calories per gram, and fat provides 9 calories per gram. (https:\/\/www.nal.usda.gov\/fnic\/how-many-calories-are-one-gram-fat-carbohydrate-or-protein). So the amount of those 3 nutrients is already depicted in calories chart.\n\nNow take a look on the amount of sugar and dietary fiber in both categories.","ad86197e":"Egg Whites category has higher average amount of sugars and dietary fiber than Whole Eggs category.","d8942e63":"Now take a look at the Cholesterol and Sodium inside those categories.","3e30e6cf":"Let's compare the average amount of sugars and dietary fiber on both categories.","b8d8f792":"# Grilled Chicken vs Crispy Chicken","0c43039a":"Problem #4 What about ordering egg\nwhites instead of whole\neggs?"}}