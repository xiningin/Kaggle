{"cell_type":{"ae06cc3b":"code","317ecf3f":"code","0e0b32e0":"code","b79b838b":"code","f1ef1d0f":"code","adba17f5":"code","b57ccd3f":"code","245c60c4":"code","a637a403":"code","a5ecca49":"code","ac941be9":"markdown","29da18ec":"markdown","6889f782":"markdown","421584ee":"markdown","979917bf":"markdown","79f34fc2":"markdown","5ace6641":"markdown","c43d8063":"markdown","964b6e74":"markdown"},"source":{"ae06cc3b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os, sys\nsys.path.insert(0,\"\/kaggle\/input\/our-env\/lib\")","317ecf3f":"!pip install fastai==1.0.34","0e0b32e0":"from sklearn.model_selection import train_test_split\nimport numpy as np\nimport scipy.optimize as opt\n# common\nfrom lib.data.utils import read_dataset_info, save_pred, Oversampling\nfrom lib.constants import *\nfrom lib.data.data_visualization import visualize_samples\n# torch\nfrom torchvision.transforms import *\nfrom torch.utils.data import DataLoader, WeightedRandomSampler\nimport fastai\nimport fastai.vision\nfrom fastai.vision.learner import create_cnn, cnn_config, create_body, create_head\nfrom fastai.torch_core import *\nfrom fastai import DatasetType\nfrom fastai.metrics import accuracy_thresh\n\nfrom lib.torch.dataset import ProteinDataset, get_sample_weights\nfrom lib.torch.losses import FocalLoss\nfrom lib.torch.metrics import f1_macro, fbeta, fit_thresholds\nfrom lib.torch.augmentation import tta, train_transforms\nfrom lib.torch.fit_custom_cycle import *","b79b838b":"labeled_dataset_info = read_dataset_info(\"..\/input\/human-protein-atlas-image-classification\/train\", \"..\/input\/human-protein-atlas-image-classification\/train.csv\", target_col='Target')\ntest_dataset_info = read_dataset_info(\"..\/input\/human-protein-atlas-image-classification\/test\", \"..\/input\/human-protein-atlas-image-classification\/sample_submission.csv\")","f1ef1d0f":"#visualize_samples(labeled_dataset_info)","adba17f5":"label_count = np.zeros(len(CLASS_LABEL_DICT))\nfor info in labeled_dataset_info:\n    label_count[info['labels']] += 1\nlabeled_fractions = torch.cuda.FloatTensor((label_count \/ len(labeled_dataset_info)).astype(np.float32))\n    \nimage_size = (256, 256)\nbatch_size = 256\ntrain_stats = ([0.08069, 0.05258, 0.05487, 0.08282], [0.13704, 0.10145, 0.15313, 0.13814])\ntest_stats = ([0.05913, 0.0454, 0.04066, 0.05928], [0.11734, 0.09503, 0.129, 0.11528])\n\n\ny = [x['labels'] for x in labeled_dataset_info]\nstratifiing_y = [labels[np.argmin(label_count[labels])] for labels in y]\ntrain_indices, validation_indices, _, _  = train_test_split(range(len(y)), y, test_size=0.08, stratify=stratifiing_y, \n                                                            random_state=13)\n#train_dataset_info = Oversampling().apply(labeled_dataset_info[train_indices])\ntrain_dataset_info = labeled_dataset_info #[train_indices]\n\nprint('Train dataset len = {} \/ {} (oversampling)'.format(len(train_indices), len(train_dataset_info)))\nprint('Validation dataset len = {}'.format(len(validation_indices)))\nprint('Test dataset len = {}'.format(len(test_dataset_info)))\n\ntrain_dataset = ProteinDataset(train_dataset_info, image_size, train_stats, train_transforms)\nvalidation_dataset = ProteinDataset(labeled_dataset_info[validation_indices], image_size, train_stats)\ntest_dataset = ProteinDataset(test_dataset_info, image_size, train_stats)\n\nweigths = get_sample_weights(train_dataset_info, label_count)\ntrain_loader = DataLoader(train_dataset, batch_size, sampler=WeightedRandomSampler(weigths, len(train_dataset_info)))\nvalidation_loader = DataLoader(validation_dataset, batch_size)\ntest_loader = DataLoader(test_dataset, batch_size)\n\ndata_bunch = fastai.DataBunch(train_loader, validation_loader, test_loader)","b57ccd3f":"classes_number = 28\n\ndef create_model():\n    pretrain_model = fastai.vision.models.resnet34\n    meta = cnn_config(pretrain_model)\n    body = create_body(pretrain_model(True), meta['cut'])\n\n    w = body[0].weight\n    body[0] = nn.Conv2d(4,64,kernel_size=(7,7),stride=(2,2),padding=(3, 3), bias=False)\n    body[0].weight = torch.nn.Parameter(torch.cat((w, w[:,:1,:,:]),dim=1))\n\n    resnet_body_output = 512\n    head = create_head(resnet_body_output*2, nc=classes_number)\n    head[3].p = 0.5 # make dropout with p=0.5\n    model = nn.Sequential(body, head)\n    return model\n\nmodel = create_model()\nlayer_groups = split_model_idx(model, [0,41,92,100])","245c60c4":"learn = fastai.Learner(data_bunch, model, loss_func=FocalLoss(), metrics=[accuracy_thresh, f1_macro], layer_groups=layer_groups)\nlearn.freeze()\nlearn.clip_grad(1.)\nlr = 5e-3","a637a403":"weight_history = []\nlearn.load('..\/..\/input\/resnet34-optimized-lr-freezedpth\/ResNet34_1st_phase')\nlearn.unfreeze()\nlrs=np.array([lr\/2,lr\/2, lr])\nfor i in range(2):\n    pred_y, true_y = learn.get_preds(DatasetType.Train)\n    sample_loss = (pred_y.sigmoid() - true_y).abs().sum(dim=1).numpy()\n    weights = get_sample_weights(train_dataset_info, label_count, sample_loss=sample_loss)\n    learn.data.train_dl.sampler.weights = torch.tensor(weights)\n    \n    fit_custom_cycle(learn, 4, lrs\/16, div_factor=15, pct_start=0.05)\nlearn.save('ResNet34_2nd_phase')","a5ecca49":"pred_y, true_y = learn.get_preds()\nclass_f1 = fbeta(pred_y, true_y, beta=1, thresh=0.5).numpy()\nprint(class_f1)\nprint(np.mean(class_f1))","ac941be9":"fit_custom_cycle(learn, 4, lrs\/32, div_factor=15, pct_start=0.05)\nlearn.save('.\/trained_learner')","29da18ec":"th_val = fit_thresholds(pred_val, labeled_fractions)\n\nprint('Thresholds: ',th_val)\nprint('F1 macro: ',f1_macro(pred_val, y_val, th_val))\nprint('F1 macro (th = 0.5): ',f1_macro(pred_val, y_val))\nprint('Fractions: ',(pred_val.sigmoid() > th_val).float().mean(dim=0))\nprint('Fractions (all labeled): ',labeled_fractions)\nprint('Fractions (true): ',y_val.mean(dim=0))","6889f782":"pred_val, y_val = tta(learn)","421584ee":"lr = 5e-3\nlearn.fit(1, lr)\nlearn.save('ResNet34_optimized_lr_freezed')","979917bf":"pred_y, true_y = learn.get_preds()\nclass_f1 = fbeta(pred_y, true_y, beta=1, thresh=0.5).numpy()\nprint(np.mean(class_f1))\nprint(class_f1)","79f34fc2":"for i in range(2):\n    fit_custom_cycle(learn, 2, lrs\/16, div_factor=15, pct_start=0.05)","5ace6641":"weight_history = []\nlearn.unfreeze()\nlrs=np.array([lr\/2,lr\/2,lr])\nfor _ in range(4):\n    fit_custom_cycle(learn, 2, lrs\/4, div_factor=20, pct_start=0.05)\n    \n    pred_y, true_y = learn.get_preds()\n    class_f1 = fbeta(pred_y, true_y, beta=1, thresh=0.5).numpy()\n    weights = get_sample_weights(train_dataset_info, label_count, class_f1)\n    learn.data.train_dl.sampler.weights = torch.tensor(weights)\n    weight_history.append(class_f1)\n    #print(np.mean(class_f1))\n\nlearn.save('ResNet34_1st_phase')","c43d8063":"pred_test, _ = tta(learn, DatasetType.Test)\nth_test = fit_thresholds(pred_test, labeled_fractions)\nth_test","964b6e74":"save_pred('.\/submission.csv', test_dataset_info, pred_test.sigmoid().numpy(), th_test.numpy())\nsave_pred('.\/submission05.csv', test_dataset_info, pred_test.sigmoid().numpy())"}}