{"cell_type":{"cbfdd350":"code","ad77ab8b":"code","debff4a7":"code","dc60b344":"code","94bc7740":"code","5b772017":"code","66c55c0b":"code","7521564d":"code","f0892e1f":"code","8342a8c9":"markdown","11a78523":"markdown","25c9979c":"markdown","96a83b9f":"markdown","911279dc":"markdown","ad0ecd16":"markdown"},"source":{"cbfdd350":"import pandas as pd\nimport numpy as np","ad77ab8b":"df = pd.read_csv(\"..\/input\/train-set\/train.csv\")","debff4a7":"df.head()","dc60b344":"df.columns","94bc7740":"id = [\"PassengerId\",\"PassengerID\",\"Passengerid\",\"PassengerID\"]","5b772017":"num_cols = []\nfor col in df.columns:\n    if df[col].dtypes !=\"O\" and col not in id  and col not in \"Survived\" :\n         num_cols.append(col)      ","66c55c0b":"num_cols","7521564d":"num_cols = pd.Series([col for col in df.columns if df[col].dtypes != \"O\" and col not in \"Survived\" ])\nidColumns = num_cols[num_cols.str.contains(\"id|iD|\u0131d|\u0131D|Id|ID\" ,regex=True)]\ndf = df.drop(idColumns , axis=1)\n","f0892e1f":"df.columns","8342a8c9":"![regex.png](attachment:regex.png)","11a78523":"![KiaKd.png](attachment:KiaKd.png)","25c9979c":"\n # <font color='darkred'> Detecting and Cleaning Erroneous or Differently Spelled \"id\" Variables.<\/font> \n","96a83b9f":"## <font color='green'> Clearing IDs with the Regex method<\/font> \n","911279dc":"***Regex expressions are a very important way to manipulate data related to text. However, regex expressions are definitely not easy to memorize at all.***\n\n***I have a Regex Expressions Cheatsheet that you can download and refer to whenever implementing regex expressions. It will save you a lot of time!***\n\n***You can find the Cheatsheet at the bottom of the page.***","ad0ecd16":"## <font color='green'> Clearing IDs with the List Method<\/font> \n"}}