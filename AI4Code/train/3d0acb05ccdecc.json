{"cell_type":{"a091fa5d":"code","da463dba":"code","26bbff0a":"code","1531b0bf":"code","f75b8f12":"code","660e71bc":"code","9dbed6c0":"code","4e48c5d5":"code","2fa9a874":"code","46ee5d5c":"code","be1f5a57":"code","06d62403":"code","9a1fde56":"code","6daa894f":"markdown","4b2fb8af":"markdown","a3ef88eb":"markdown","2fbc1b14":"markdown","129fab19":"markdown","5e1a9947":"markdown","b63b4bc7":"markdown","d287bfc0":"markdown","2ccf3b94":"markdown","258af23f":"markdown","b0607975":"markdown","bb1bcc49":"markdown","14474509":"markdown","fcc66a7c":"markdown"},"source":{"a091fa5d":"# importing python libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","da463dba":"pd.set_option('display.max_rows', None, 'display.max_columns', None)\nstats_df = pd.read_csv('..\/input\/premier-league\/stats.csv')","26bbff0a":"stats_df.head()","1531b0bf":"# Creating a new column draws\nstats_df['draws'] = 38 - stats_df['wins'] - stats_df['losses']\n# Changing the column location\npop_column = stats_df.pop('draws')\nstats_df.insert(3, 'draws', pop_column)\n# Creating a new column total_matches\nstats_df['total_matches'] = stats_df['wins'] + stats_df['losses'] + stats_df['draws']\n# Changing the column location\npop_column2 = stats_df.pop('total_matches')\nstats_df.insert(4, 'total_matches', pop_column2)\nstats_df.head()","f75b8f12":"# Creating a new dataframe to find the total wins, losses, draws, total_matches by grouping teams\ndf = stats_df.groupby('team').agg({'wins':'sum', 'losses':'sum', 'draws':'sum', 'total_matches':'sum'})\n# Sorting the teams with most wins and getting the top 10 teams\ndf = df.sort_values(by = 'wins', ascending = False)\ndf.head(10)","660e71bc":"teams = df.index[:10]\nwins = df.wins[:10]\nmatches = df.total_matches[:10]\nplt.style.use('fivethirtyeight')\n# using x_index so that the bars can be placed side by side\nx_index = np.arange(len(teams))\nplt.bar(x_index - 0.25, wins, width = 0.5, label = 'Total Wins')\nplt.bar(teams, matches, width = 0.35, label = 'Total Matches')\nplt.ylabel('Total Wins per total matches', size = 14)\nplt.xlabel('Teams', size = 15)\nplt.xticks(rotation = 'vertical', size = 12)\nplt.legend(loc = 4, prop = {'size': 10})\nplt.show()","9dbed6c0":"# Creating a new dataframe \ndf2 = df.sort_values(by = 'losses', ascending = False)\ndf2.head(10)","4e48c5d5":"lost_teams = df2.index[:10]\nlosses = df.losses[:10]\ntotal_matches = df.total_matches[:10]\nplt.style.use('ggplot')\nx_index2 = np.arange(len(lost_teams))\nplt.bar(x_index2 - 0.25, losses, width = 0.5, label = 'Total losses')\nplt.bar(lost_teams, total_matches, width = 0.35, label = 'Total Matches')\nplt.ylabel('Total losses per total matches', size = 14, color = 'black')\nplt.xlabel('Teams', size = 15, color = 'black')\nplt.xticks(rotation = 'vertical', size = 12, color = 'black')\nplt.yticks(color = 'black')\nplt.legend(loc = 4, prop = {'size': 10})\nplt.show()","2fa9a874":"df3 = stats_df.groupby('team').agg({'total_scoring_att':'sum', 'ontarget_scoring_att':'sum'})\ndf3 = df3.sort_values(by = 'total_scoring_att', ascending = False)\ndf3.head(10)","46ee5d5c":"teams = df3.index[:10]\nscoring_chances = df3.total_scoring_att[:10]\nontarget = df3.ontarget_scoring_att[:10]\n# Using seaborn style plot\nplt.style.use('seaborn')\nplt.bar(teams, scoring_chances, label = 'Total_Scoring_Chances')\nplt.bar(teams, ontarget, label = 'On-target')\nplt.xlabel('Teams', size = 15, color = 'black')\nplt.ylabel('Scoring chances', size = 15, color = 'black')\nplt.xticks(rotation = 'vertical', size = 12)\nplt.yticks(size = 12)\nplt.legend()\nplt.show()","be1f5a57":"df4 = stats_df.groupby('season').first()\ndf4","06d62403":"winner_df = df4.groupby('team').agg({'team':'count'})\nwinner_df = winner_df.rename(columns = {'team': 'no_of_times_being_champ'})\nwinner_df","9a1fde56":"team = winner_df.index\nchamp = winner_df.no_of_times_being_champ\nexplode = [0,0,0,0.075]\nplt.style.use('fivethirtyeight')\nplt.pie(champ, labels = team , explode = explode, wedgeprops = {'edgecolor':'black'}, autopct='%1.1f%%')\nplt.title('Teams that are crowned champions')\nplt.show()","6daa894f":"## Reading csv files","4b2fb8af":"Clearly Chelsea created most chances and on-targets.","a3ef88eb":"#### Counting the no of times a team being a champion","2fbc1b14":"## Finding the teams with total wins, losses and draws per total matches ","129fab19":"## Plotting the top 10 teams with most losses","5e1a9947":"we can see that Manchester United played all matches in the top division and also won most matches.","b63b4bc7":"## Finding the champion for every season from 2006\/07 to 2017\/2018","d287bfc0":"## Plotting the above data using pie chart","2ccf3b94":"Clearly Manchester United won the championship the most, thanks to Sir Alex Ferguson\ud83d\ude00.","258af23f":"## Finding the top 10 teams with most scoring chances and on-target chances","b0607975":"## Plotting the top 10 teams with most wins","bb1bcc49":"We can observe that West Ham United and Sunderland lost most matches, but WHU played most matched in top division so it is on top of the table. Also <b>Everton is in both most wins and most losses dataframes<\/b>. ","14474509":"## Finding the teams with most losses","fcc66a7c":"## Plotting the chances created vs on-target chances for top 10 teams"}}