{"cell_type":{"a1c16ec9":"code","2d53d018":"code","304ac156":"code","9bff8e82":"code","e7077105":"code","707b0169":"code","b98ae797":"code","e43eab45":"code","94af9c62":"code","c17556c3":"code","2007a785":"code","7e537a76":"code","af203bc3":"code","e6903e06":"code","7ee5a3cc":"code","39fdfd8f":"code","2695c7f7":"code","e3a272bc":"code","4b093859":"code","b1363f72":"code","4e5579f9":"code","ae23fa34":"code","c400da5f":"code","a086c98c":"code","67abe889":"code","ae70ea1a":"code","b741247b":"code","41b7e8c9":"code","48e04411":"code","5d8677ed":"code","b491bde3":"code","56762e16":"code","60e5afb5":"code","1cc9ee6d":"code","4b8c73ad":"code","023bc0bb":"code","53ac6511":"code","bd4913b4":"code","0e17bcc8":"code","5da29b47":"code","9b9ada9f":"code","73c0c382":"code","6203c0c4":"code","a6caaee9":"markdown","6e5c4ebb":"markdown","8061ebbe":"markdown","f58eae33":"markdown","4e0c4689":"markdown","cf91796a":"markdown","e97a3685":"markdown","f6a6f153":"markdown","b8f87d4d":"markdown","f58603dd":"markdown","b5aea464":"markdown","d767aa08":"markdown","c5b0d964":"markdown"},"source":{"a1c16ec9":"print(\"Intro to Functions\") # print() is also a function","2d53d018":"?print #We can see details of a function with ? in the beginning","304ac156":"print(\"Intro to\",\"Functions\",sep=\"-\") # They're parameters, argumants","9bff8e82":"len(\"argumant\")","e7077105":"2*3 # For multiple 2 values, we use *. We can use a function for it.","707b0169":"def write_name(name): # Functions can be defined with def\n    print(name)","b98ae797":"write_name(\"Berkay\")","e43eab45":"def write_name(name): # Functions can be defined with def\n    return name","94af9c62":"write_name(\"Berkay\")","c17556c3":"def new_function(name,subject):\n    print(\"Good Luck in your data science adventure\",name,\"Today's subject is \", subject)","2007a785":"new_function(\"Berkay\",\"Functions\")","7e537a76":"def choose_a_kid(*kids):\n    print(kids[1], \"is chosen!\")","af203bc3":"choose_a_kid(\"Josh\",\"Kate\",\"Hurry\")","e6903e06":"choose_a_kid(\"Josh\",\"Kate\",\"Hurry\",\"Amanda\",\"Jo\",\"Mike\")","7ee5a3cc":"def choose_a_kid(**kids):\n    print(kids[\"name1\"], \"is chosen!\")","39fdfd8f":"choose_a_kid(name1= \"Josh\",name2= \"Kate\",name3= \"Hurry\")","2695c7f7":"choose_a_kid(name1= \"Josh\",name2= \"Kate\",name3= \"Hurry\",name4=\"Berkay\")","e3a272bc":"def square(num):\n    print(\"Square of Input: \", num**2)","4b093859":"square(3)","b1363f72":"def square(num):\n    print(\"Input: \"+ str(num))\n    print(\"Square of Input: \"+ str(num**2))","4e5579f9":"square(5)","ae23fa34":"def multiply(num1,num2): # Functions can have multiple parameters\n    print(num1*num2)","c400da5f":"multiply(5,6)","a086c98c":"def divide(num1,num2): # Functions can have multiple parameters\n    return (num1\/num2)","67abe889":"divide(9,3)","ae70ea1a":"def grade(student,note=50): # Predefined Parameters should be in last\n    print(\"Grade of \",student,\" is\", note)","b741247b":"grade(student=\"Berkay\")","41b7e8c9":"grade(\"Berkay\",note=80)","48e04411":"global_x = 10\n\ndef f2():\n    local_x = 15\n    print(\"Local X: \", local_x)","5d8677ed":"f2()","b491bde3":"global_x = 10\n\ndef f2():\n    local_x = 15\n    print(\"Global X: \", global_x)","56762e16":"f2()","60e5afb5":"print(global_x) # We can print global x but not local x","1cc9ee6d":"x = 5\ny = 7\n\ndef multiply(x,y):\n    return x*y","4b8c73ad":"multiply(2,3) # It did not get 5 and 7, because they are global","023bc0bb":"list1 = []","53ac6511":"def add_to_list(y):\n    \n    global list1\n    \n    list1.append(y)","bd4913b4":"add_to_list(4)","0e17bcc8":"list1","5da29b47":"add_to_list(2)","9b9ada9f":"list1","73c0c382":"def function():\n    pass","6203c0c4":"function()","a6caaee9":"### Arbitrary Keyword Arguments, **kwargs\n\nIf you do not know how many keyword arguments that will be passed into your function, add two asterisk: ** before the parameter name in the function definition.","6e5c4ebb":"**Created by Berkay Alan**\n\n**Functions**\n\n**16 of November, 2020**\n\n**For more Tutorial: https:\/\/github.com\/berkayalan**","8061ebbe":"## return","f58eae33":"### Arbitrary Arguments, *args\n\nIf you do not know how many arguments that will be passed into your function, add a * before the parameter name in the function definition.","4e0c4689":"## Number of Arguments\n\nBy default, a function must be called with the correct number of arguments. Meaning that if your function expects 2 arguments, you have to call the function with 2 arguments, not more, and not less.","cf91796a":"## Intro to Functions\n\nA function is a block of code which only runs when it is called.\n\nYou can pass data, known as parameters, into a function.\n\nA function can return data as a result.\n\nLess code for same transactions.","e97a3685":"## Changing global variables in local area","f6a6f153":"## Functions that have 2 parameters","b8f87d4d":"## Predefined Parameters in Functions","f58603dd":"## Local and Global Variables","b5aea464":"## Content\n\n- Intro to Functions\n- return()\n- Number of Arguments\n    - Arbitrary Arguments, *args\n    - Arbitrary Keyword Arguments, **kwargs\n- Giving output with Information\n- Functions that have 2 parameters\n- Predefined Parameters in Functions\n- Local and Global Variables\n- Changing global variables in local area\n- Pass Statement","d767aa08":"## Giving output with Information","c5b0d964":"## Pass Statement"}}