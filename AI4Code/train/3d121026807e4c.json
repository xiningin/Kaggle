{"cell_type":{"952eda65":"code","02ff45a9":"code","4970c6d9":"code","129c74c2":"code","feda1681":"code","d1442474":"code","00998c00":"code","2c05bc53":"code","53d6f3f3":"code","ca5cdf7c":"code","6d59a502":"code","d3b48c4d":"code","eb8874c7":"code","b4b04d68":"code","ef69c466":"code","03a69afa":"code","e2581bab":"code","f0ac42fb":"code","a99b0bd5":"code","3a8f19de":"markdown","cb37b1f8":"markdown","d6163ef7":"markdown","456f92aa":"markdown","f2a39ecc":"markdown"},"source":{"952eda65":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom kaggle_datasets import KaggleDatasets\nimport os\nimport glob\nimport re\n%matplotlib inline\nfrom sklearn.metrics import confusion_matrix,f1_score,precision_score,recall_score\n# from sklearn.utils import class_weight\n# import efficientnet.tfkeras as efn\n# import keras.backend as K\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","02ff45a9":"print('The Number of Training TF Record Files:{}'.format(len(os.listdir(\"..\/input\/tpu-getting-started\/tfrecords-jpeg-224x224\/train\"))))\nprint('The Number of Validation TF Record Files:{}'.format(len(os.listdir(\"..\/input\/tpu-getting-started\/tfrecords-jpeg-224x224\/val\"))))\nprint('The Number of Testing TF Record Files:{}'.format(len(os.listdir(\"..\/input\/tpu-getting-started\/tfrecords-jpeg-224x224\/test\"))))","4970c6d9":"# Getting Count of Total Number of Train,Validation and Test Files\ndef count_tfrecord_examples(\n        tfrecords_dir: str,\n) -> int:\n    \"\"\"\n    Counts the total number of examples in a collection of TFRecord files.\n\n    :param tfrecords_dir: directory that is assumed to contain only TFRecord files\n    :return: the total number of examples in the collection of TFRecord files\n        found in the specified directory\n    \"\"\"\n\n    count = 0\n    for file_name in os.listdir(tfrecords_dir):\n        tfrecord_path = os.path.join(tfrecords_dir, file_name)\n        count += sum(1 for _ in tf.data.TFRecordDataset(tfrecord_path))\n\n    return count","129c74c2":"TRAIN_FILES_COUNT=count_tfrecord_examples(\"..\/input\/tpu-getting-started\/tfrecords-jpeg-224x224\/train\")\nVALIDATION_FILES_COUNT=count_tfrecord_examples(\"..\/input\/tpu-getting-started\/tfrecords-jpeg-224x224\/val\")\nTEST_FILES_COUNT=count_tfrecord_examples(\"..\/input\/tpu-getting-started\/tfrecords-jpeg-224x224\/test\")\n\nprint('Number of Training Image Files: {}'.format(TRAIN_FILES_COUNT))\nprint('Number of Validation Image Files: {}'.format(VALIDATION_FILES_COUNT))\nprint('Number of Testing Image Files: {}'.format(TEST_FILES_COUNT))","feda1681":"# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()  # TPU detection. No parameters necessary if TPU_NAME environment variable is set. On Kaggle this is always the case.\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    strategy = tf.distribute.get_strategy() # default distribution strategy in Tensorflow. Works on CPU and single GPU.\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","d1442474":"GCS_DS_PATH = KaggleDatasets().get_gcs_path()","00998c00":"EPOCHS = 50\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nIMAGE_SIZE=[224, 224]\nNUM_TRAINING_IMAGES = 12753\nNUM_TEST_IMAGES = 7382\nNUM_VALIDATION_IMAGES=3712\nSTEPS_PER_EPOCH = NUM_TRAINING_IMAGES \/\/ BATCH_SIZE\nAUTO = tf.data.experimental.AUTOTUNE","2c05bc53":"def decode_image(image_data):\n    image = tf.image.decode_jpeg(image_data, channels=3)\n    image = tf.cast(image, tf.float32) \/ 255.0  # convert image to floats in [0, 1] range\n    image = tf.reshape(image, [*IMAGE_SIZE, 3]) # explicit size needed for TPU\n    return image\n\ndef read_labeled_tfrecord(example):\n    LABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"class\": tf.io.FixedLenFeature([], tf.int64),  # shape [] means single element\n    }\n    example = tf.io.parse_single_example(example, LABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    label = tf.cast(example['class'], tf.int32)\n    return image, label # returns a dataset of (image, label) pairs\n\ndef read_unlabeled_tfrecord(example):\n    UNLABELED_TFREC_FORMAT = {\n        \"image\": tf.io.FixedLenFeature([], tf.string), # tf.string means bytestring\n        \"id\": tf.io.FixedLenFeature([], tf.string),  # shape [] means single element\n        # class is missing, this competitions's challenge is to predict flower classes for the test dataset\n    }\n    example = tf.io.parse_single_example(example, UNLABELED_TFREC_FORMAT)\n    image = decode_image(example['image'])\n    idnum = example['id']\n    return image, idnum # returns a dataset of image(s)\n\ndef load_dataset(filenames, labeled=True, ordered=False):\n    # Read from TFRecords. For optimal performance, reading from multiple files at once and\n    # disregarding data order. Order does not matter since we will be shuffling the data anyway.\n\n    ignore_order = tf.data.Options()\n    if not ordered:\n        ignore_order.experimental_deterministic = False # disable order, increase speed\n\n    dataset = tf.data.TFRecordDataset(filenames, num_parallel_reads=AUTO) # automatically interleaves reads from multiple files\n    dataset = dataset.with_options(ignore_order) # uses data as soon as it streams in, rather than in its original order\n    dataset = dataset.map(read_labeled_tfrecord if labeled else read_unlabeled_tfrecord, num_parallel_calls=AUTO)\n    # returns a dataset of (image, label) pairs if labeled=True or (image, id) pairs if labeled=False\n    return dataset\n\ndef data_augment(image, label):\n    image = tf.image.random_flip_left_right(image)\n    image = tf.image.random_saturation(image, 0, 2)\n    return image, label\n\ndef get_training_dataset():\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-224x224\/train\/*.tfrec'), labeled=True)\n#     dataset=dataset.map(augment_data())\n    dataset = dataset.repeat() # the training dataset must repeat for several epochs\n    dataset = dataset.shuffle(2048)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_validation_dataset(ordered=False):\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-224x224\/val\/*.tfrec'), labeled=True, ordered=False)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.cache()\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ndef get_test_dataset(ordered=False):\n    dataset = load_dataset(tf.io.gfile.glob(GCS_DS_PATH + '\/tfrecords-jpeg-224x224\/test\/*.tfrec'), labeled=False, ordered=ordered)\n    dataset = dataset.batch(BATCH_SIZE)\n    dataset = dataset.prefetch(AUTO) # prefetch next batch while training (autotune prefetch buffer size)\n    return dataset\n\ntraining_dataset = get_training_dataset()\nvalidation_dataset = get_validation_dataset()","53d6f3f3":"# Visualizing Some Random Training\ndef plot_images(dataset,batches):\n    training_dataset = dataset.unbatch().batch(batches)\n    training_batch = iter(training_dataset)\n    images,labels=next(training_batch)\n    \n    for i in range(len(images)):\n        plt.subplot(5,5,i+1)\n        plt.imshow(images[i])\n    plt.show()","ca5cdf7c":"# Training Images\nplt.figure(figsize=(12,12))\nplot_images(training_dataset,20)","6d59a502":"# Number of  Classes\nCLASSES = [\n    'pink primrose', 'hard-leaved pocket orchid', 'canterbury bells', 'sweet pea', \n    'wild geranium', 'tiger lily', 'moon orchid', 'bird of paradise', 'monkshood', \n    'globe thistle', 'snapdragon', \"colt's foot\", 'king protea', 'spear thistle', \n    'yellow iris', 'globe-flower', 'purple coneflower', 'peruvian lily', \n    'balloon flower', 'giant white arum lily', 'fire lily', 'pincushion flower', \n    'fritillary', 'red ginger', 'grape hyacinth', 'corn poppy', \n    'prince of wales feathers', 'stemless gentian', 'artichoke', 'sweet william', \n    'carnation', 'garden phlox', 'love in the mist', 'cosmos',  'alpine sea holly', \n    'ruby-lipped cattleya', 'cape flower', 'great masterwort',  'siam tulip', \n    'lenten rose', 'barberton daisy', 'daffodil',  'sword lily', 'poinsettia', \n    'bolero deep blue',  'wallflower', 'marigold', 'buttercup', 'daisy', \n    'common dandelion', 'petunia', 'wild pansy', 'primula',  'sunflower', \n    'lilac hibiscus', 'bishop of llandaff', 'gaura',  'geranium', 'orange dahlia', \n    'pink-yellow dahlia', 'cautleya spicata',  'japanese anemone', 'black-eyed susan', \n    'silverbush', 'californian poppy',  'osteospermum', 'spring crocus', 'iris', \n    'windflower',  'tree poppy', 'gazania', 'azalea', 'water lily',  'rose', \n    'thorn apple', 'morning glory', 'passion flower',  'lotus', 'toad lily', \n    'anthurium', 'frangipani',  'clematis', 'hibiscus', 'columbine', 'desert-rose', \n    'tree mallow', 'magnolia', 'cyclamen ', 'watercress',  'canna lily', \n    'hippeastrum ', 'bee balm', 'pink quill',  'foxglove', 'bougainvillea', \n    'camellia', 'mallow',  'mexican petunia',  'bromelia', 'blanket flower', \n    'trumpet creeper',  'blackberry lily', 'common tulip', 'wild rose']","d3b48c4d":"# Training and Validation Distribution\ny_train = next(iter(training_dataset.unbatch().map(lambda image, label: label).batch(NUM_TRAINING_IMAGES))).numpy()\ny_val = next(iter(validation_dataset.unbatch().map(lambda image, label: label).batch(NUM_VALIDATION_IMAGES))).numpy()\ntrain_agg = np.asarray([[label, (y_train == index).sum()] for index, label in enumerate(CLASSES)])\nval_agg = np.asarray([[label, (y_val == index).sum()] for index, label in enumerate(CLASSES)])\nfig, (ax1, ax2) = plt.subplots(2, 1, figsize=(24, 64))\nax1 = sns.barplot(x=train_agg[...,1], y=train_agg[...,0], order=CLASSES, ax=ax1)\nax1.set_title('Train', fontsize=30)\nax1.tick_params(labelsize=16)\nax2 = sns.barplot(x=val_agg[...,1], y=val_agg[...,0], order=CLASSES, ax=ax2)\nax2.set_title('Validation', fontsize=30)\nax2.tick_params(labelsize=16)\nplt.show()","eb8874c7":"# Defining Callbacks\nsave_best=tf.keras.callbacks.ModelCheckpoint(filepath='best_model.h5',monitor='val_loss',save_best_only=True)\nreduce_lr=tf.keras.callbacks.ReduceLROnPlateau(patience=10,monitor='val_accuracy',factor=0.6,min_lr=0.0000001)\n# early_stopping=tf.keras.callbacks.EarlyStopping(monitor='val_loss',patience=10)\nmy_callbacks=[save_best,reduce_lr]","b4b04d68":"# Building the Model Under Strategy Scope\nwith strategy.scope():\n    base_model=tf.keras.applications.DenseNet201(weights='imagenet',include_top=False,input_shape=(224,224,3))\n    for layer in base_model.layers:\n        layer.trainable=False\n    x=tf.keras.layers.GlobalAveragePooling2D()(base_model.output)\n    x=tf.keras.layers.Dropout(0.5)(x)\n    out=tf.keras.layers.Dense(104,activation='softmax')(x)\n    model=tf.keras.models.Model(inputs=base_model.input,outputs=out)\n\n# Compiling the Model\n# opt=tf.keras.optimizers.Adam(0.001)\nmodel.compile(optimizer=\"adam\",loss='sparse_categorical_crossentropy',metrics=['sparse_categorical_accuracy'])\n\n# Fitting the Model\nhistory=model.fit(training_dataset,steps_per_epoch=NUM_TRAINING_IMAGES\/\/BATCH_SIZE,validation_data=validation_dataset,epochs=EPOCHS,callbacks=my_callbacks)","ef69c466":"# Saving the Model\nmodel.save(\"model.h5\")","03a69afa":"# Visualizing Training and Validation Loss\nprint(history.history.keys())\n#  \"Accuracy\"\nplt.plot(history.history['sparse_categorical_accuracy'])\nplt.plot(history.history['val_sparse_categorical_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()\n# \"Loss\"\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'validation'], loc='upper left')\nplt.show()","e2581bab":"def display_confusion_matrix(cmat, score, precision, recall):\n    plt.figure(figsize=(15,15))\n    ax = plt.gca()\n    ax.matshow(cmat, cmap='Reds')\n    ax.set_xticks(range(len(CLASSES)))\n    ax.set_xticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_xticklabels(), rotation=45, ha=\"left\", rotation_mode=\"anchor\")\n    ax.set_yticks(range(len(CLASSES)))\n    ax.set_yticklabels(CLASSES, fontdict={'fontsize': 7})\n    plt.setp(ax.get_yticklabels(), rotation=45, ha=\"right\", rotation_mode=\"anchor\")\n    titlestring = \"\"\n    if score is not None:\n        titlestring += 'f1 = {:.3f} '.format(score)\n    if precision is not None:\n        titlestring += '\\nprecision = {:.3f} '.format(precision)\n    if recall is not None:\n        titlestring += '\\nrecall = {:.3f} '.format(recall)\n    if len(titlestring) > 0:\n        ax.text(101, 1, titlestring, fontdict={'fontsize': 18, 'horizontalalignment':'right', 'verticalalignment':'top', 'color':'#804040'})\n    plt.show()\n    ","f0ac42fb":"# Plotting Confusion Matrix F1 Score\ncmdataset = get_validation_dataset(ordered=True)\nimages_ds = cmdataset.map(lambda image, label: image)\nlabels_ds = cmdataset.map(lambda image, label: label).unbatch()\n\ncm_correct_labels = next(iter(labels_ds.batch(NUM_VALIDATION_IMAGES))).numpy()\ncm_probabilities = model.predict(images_ds)\ncm_predictions = np.argmax(cm_probabilities, axis=-1)\n\nlabels = range(len(CLASSES))\ncmat = confusion_matrix(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n)\ncmat = (cmat.T \/ cmat.sum(axis=1)).T # normalize","a99b0bd5":"score = f1_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\nprecision = precision_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\nrecall = recall_score(\n    cm_correct_labels,\n    cm_predictions,\n    labels=labels,\n    average='macro',\n)\ndisplay_confusion_matrix(cmat, score, precision, recall)","3a8f19de":"Setting up TPU Accelerator","cb37b1f8":"Setting UP Parameters","d6163ef7":"Setting Up the GCS Path","456f92aa":"Exploring the Data","f2a39ecc":"Preprocessing the Data"}}