{"cell_type":{"0e70856f":"code","c07d17ee":"code","afeafed8":"code","07666ab8":"code","1924a05d":"code","c7688765":"code","f1d64346":"code","c358c08a":"code","eda14bda":"code","f57898c7":"code","c63951b9":"code","1560371f":"code","3ff2900f":"code","f122b82d":"code","08d76e53":"code","d3f8477f":"code","8be936ca":"code","edd4756d":"code","85c1127b":"code","4fabb99d":"code","a7a18f85":"code","9aad3066":"code","380688d8":"code","2ffe8043":"code","ade66697":"code","4ec0c191":"code","a00f0883":"code","e838f218":"code","3b8bb176":"code","efacd505":"code","0b3d3fa3":"code","95c8d275":"code","d00b2cce":"code","7a1a9133":"code","55f1c2da":"code","bc70d3a6":"code","faa2389e":"code","5b566c83":"code","53a1aa8c":"code","bc24219f":"markdown","0884ac94":"markdown","c13916fd":"markdown","f86a105f":"markdown","ab4f5bef":"markdown","5114fe27":"markdown","3b1038f5":"markdown"},"source":{"0e70856f":"import numpy as np \nimport pandas as pd \nimport seaborn as sns \nimport matplotlib.ticker as mtick \nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix, f1_score,accuracy_score, precision_score, recall_score, roc_auc_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes  import GaussianNB\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\n\nLogistic_model=LogisticRegression()\nR_F_model=RandomForestClassifier()\nDecision_model=DecisionTreeClassifier()\nKN_model=KNeighborsClassifier()\n#svr()\nNB_model=GaussianNB()\n\nsns.set(style = 'white')\ntelecom_cust = pd.read_csv('..\/input\/telefonia\/train.csv')\ntelecom_test = pd.read_csv('..\/input\/telefonia\/test.csv')\nlabel_size = 17\ntelecom_cust.head().T","c07d17ee":"telecom_cust.describe().T","afeafed8":"print (\"Rows     : \" ,telecom_cust.shape[0])\nprint (\"Columns  : \" ,telecom_cust.shape[1])\nprint (\"\\nFeatures : \\n\" ,telecom_cust.columns.tolist())\nprint (\"\\nMissing values :  \", telecom_cust.isnull().sum().values.sum())\nprint (\"\\nUnique values :  \\n\",telecom_cust.nunique())","07666ab8":"telecom_cust.dtypes","1924a05d":"telecom_cust.TotalCharges = pd.to_numeric(telecom_cust.facturacion, errors='coerce')\ntelecom_cust.isnull().sum()","c7688765":"# Churn de los datos y su distribuci\u00f3n\ncolors = ['#00A5E0', '#DD403A']\n\nfig = plt.figure(figsize = (5, 5))\nsns.countplot(x = 'resultado', data = telecom_cust, palette = colors)\n\nfor index, value in enumerate(telecom_cust['resultado'].value_counts()):\n    label =  '{}%'.format(round( (value\/telecom_cust['resultado'].shape[0])*100, 2)) \n    plt.annotate(label, xy = (index - 0.18, value - 800), color = 'w', fontweight = 'bold', size = label_size)\n\nplt.title('Numero de clientes retenidos y clientes que han salido')\nplt.xticks([0, 1], ['Retencion', 'Salida'])\nplt.xlabel('Status')\nplt.ylabel('Count');","f1d64346":"# Matriz de correlacion\nimport matplotlib.pyplot as plt\n\nfeatures = telecom_cust.loc[:,'tipo cliente':'facturacion']\ntarget = telecom_cust['resultado']\n\nfig = plt.figure(figsize=(24,12))\nax = sns.heatmap(telecom_cust.corr(), cmap='viridis_r',\n      linecolor='black', lw=.65,annot=True, alpha=.95)\nax.set_xticklabels([x[:7] for x in telecom_cust.columns])\nax.set_yticklabels([y[:7] for y in telecom_cust.columns])\n\nplt.show()","c358c08a":"telecom_cust[['edad', 'tipo cliente']].plot.scatter(x = 'edad',\n                                                          y='tipo cliente')\nprint('Edad vs Tipo Cliente')","eda14bda":"telecom_cust[['edad', 'Antiguedad Equipo']].plot.scatter(x = 'edad',\n                                                              y='Antiguedad Equipo')\nprint('Edad vs Antiguedad del Equipo')","f57898c7":"telecom_cust[['edad', 'Plan de datos']].plot.scatter(x = 'edad',\n                                                              y='Plan de datos')\nprint('Edad vs Plan de Datos')","c63951b9":"telecom_cust[['edad', 'mora']].plot.scatter(x = 'edad',\n                                                              y='mora')\nprint('Edad vs Mora')","1560371f":"telecom_cust[['edad', 'anos de contrato']].plot.scatter(x = 'edad',\n                                                              y='anos de contrato')\nprint('Edad vs A\u00f1os de Contrato')","3ff2900f":"telecom_cust[['edad', 'minutos']].plot.scatter(x = 'edad',\n                                                              y='minutos')\nprint('Edad vs Minutos')","f122b82d":"telecom_cust[['tipo cliente', 'mora']].plot.scatter(x = 'tipo cliente',\n                                                              y='mora')\nprint('Tipo Cliente vs Mora')","08d76e53":"telecom_cust[['tipo cliente', 'minutos']].plot.scatter(x = 'tipo cliente',\n                                                              y='minutos')\nprint('Tipo Cliente vs Minutos')","d3f8477f":"telecom_cust[['Plan de datos', 'mora']].plot.scatter(x = 'Plan de datos',\n                                                              y='mora')\nprint('Plan de Datos vs Mora')","8be936ca":"telecom_cust[['Plan de datos', 'minutos']].plot.scatter(x = 'Plan de datos',\n                                                              y='minutos')\nprint('Plan de Datos vs Minutos')","edd4756d":"telecom_cust[['mora', 'facturacion']].plot.scatter(x = 'mora',\n                                                              y='facturacion')\nprint('Mora vs Facturacion')","85c1127b":"telecom_cust[['mora', 'anos de contrato']].plot.scatter(x = 'mora',\n                                                              y='anos de contrato')\nprint('Mora vs Anos de Contrato')","4fabb99d":"telecom_cust[['mora', 'minutos']].plot.scatter(x = 'mora',\n                                                              y='minutos')\nprint('Mora vs Minutos')","a7a18f85":"telecom_cust.groupby([\"edad\", \"resultado\"]).size().unstack().plot(kind='bar', stacked=True, figsize=(10,10)) \nprint('Edad vs Churn')","9aad3066":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\ng = sns.FacetGrid(telecom_cust, col = \"resultado\")\ng.map(plt.hist, \"edad\", bins = 5)\n\nmeans = telecom_cust[[\"edad\", \"resultado\"]].groupby([\"edad\"], as_index = False).mean()\n\nlabels = \"30-40\", \"41-50\", \"51-60\", \"61-70\", \"71-80\", \"81-95\"\ntotal = means[\"resultado\"].sum()\nsizes = [means[\"resultado\"][0] \/ total, means[\"resultado\"][1] \/ total \\\n        , means[\"resultado\"][2] \/ total, means[\"resultado\"][3] \/ total, means[\"resultado\"][4] \/ total, means[\"resultado\"][5] \/ total]\n\nexplode = (0.2, 0.2, 0.2, 0.2, 0.2, 0.2)\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode = explode, labels = labels, autopct = '%1.1f%%', shadow = True, startangle = 100)\nax1.axis(\"equal\")  \nplt.suptitle(\"Churn por rando de edad\")\n\nplt.show()\nprint('Edad vs Churn')","380688d8":"telecom_cust.groupby([\"tipo cliente\", \"resultado\"]).size().unstack().plot(kind='bar', stacked=True, figsize=(10,10)) \nprint('Tipo Cliente vs Churn')","2ffe8043":"telecom_cust.groupby([\"Plan de datos\", \"resultado\"]).size().unstack().plot(kind='bar', stacked=True, figsize=(10,10)) \nprint('Plan de Datos vs Churn')","ade66697":"g = sns.FacetGrid(telecom_cust, col = \"resultado\")\ng.map(plt.hist, \"Antiguedad Equipo\", bins = 5)\n\nmeans = telecom_cust[[\"Antiguedad Equipo\", \"resultado\"]].groupby([\"Antiguedad Equipo\"], as_index = False).mean()\n\nlabels = \"1-6\", \"7-12\", \"13-24\", \"25-36\", \"37-50\", \"50\"\ntotal = means[\"resultado\"].sum()\nsizes = [means[\"resultado\"][0] \/ total, means[\"resultado\"][1] \/ total \\\n      , means[\"resultado\"][2] \/ total, means[\"resultado\"][3] \/ total, means[\"resultado\"][4] \/ total, means[\"resultado\"][5] \/ total]\n\nexplode = (0.2, 0.2, 0.2, 0.2, 0.2, 0.2)\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode = explode, labels = labels, autopct = '%1.1f%%', shadow = True, startangle = 100)\nax1.axis(\"equal\")  \nplt.suptitle(\"Churn por antiguedad del equipo \/ meses\")\n\nplt.show()\nprint('Plan de Datos vs Churn')","4ec0c191":"g = sns.FacetGrid(telecom_cust, col = \"resultado\")\ng.map(plt.hist, \"anos de contrato\", bins = 5)\n\nmeans = telecom_cust[[\"anos de contrato\", \"resultado\"]].groupby([\"anos de contrato\"], as_index = False).mean()\n\nlabels = \"1-2\", \"3\", \"4\", \"5\", \"6\", \"7-10\"\ntotal = means[\"resultado\"].sum()\nsizes = [means[\"resultado\"][0] \/ total, means[\"resultado\"][1] \/ total \\\n        , means[\"resultado\"][2] \/ total, means[\"resultado\"][3] \/ total, means[\"resultado\"][4] \/ total, means[\"resultado\"][5] \/ total]\n\nexplode = (0.2, 0.2, 0.2, 0.2, 0.2, 0.2)\nfig1, ax1 = plt.subplots()\nax1.pie(sizes, explode = explode, labels = labels, autopct = '%1.1f%%', shadow = True, startangle = 100)\nax1.axis(\"equal\")  \nplt.suptitle(\"Churn por a\u00f1os de Contrato\")\n\nplt.show()\nprint('A\u00f1os de Contrato vs Churn')","a00f0883":"telecom_cust.dropna(inplace = True)\ndf2 = telecom_cust.iloc[:,1:]\ndf2['resultado'].replace(to_replace='Yes', value=1, inplace=True)\ndf2['resultado'].replace(to_replace='No', value=0, inplace=True)\ndf_dummies = pd.get_dummies(df2)\n","e838f218":"\n#  dummy variables\ny = df_dummies['resultado'].values\nX = df_dummies.drop(columns = ['resultado'])\n# Scaling all the variables to a range of 0 to 1\nfrom sklearn.preprocessing import MinMaxScaler\nfeatures = X.columns.values\nscaler = MinMaxScaler(feature_range = (0,1))\nscaler.fit(X)\nX = pd.DataFrame(scaler.transform(X))\nX.columns = features\n","3b8bb176":"# Variable metodos\nfrom sklearn.metrics import confusion_matrix, f1_score,accuracy_score, precision_score, recall_score, roc_auc_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes  import GaussianNB\nfrom sklearn import metrics\nfrom sklearn.metrics import classification_report\nimport matplotlib.pyplot as plt\nLogistic_model=LogisticRegression()\nR_F_model=RandomForestClassifier()\nDecision_model=DecisionTreeClassifier()\nKN_model=KNeighborsClassifier()\n#svr()\nNB_model=GaussianNB()\n","efacd505":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)","0b3d3fa3":"#                                             NAIVE BAYES \n\nNB_model.fit(X_train, y_train)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,random_state=114)\npredic=NB_model.predict(X_test)\nacc =metrics.accuracy_score(y_test,predic)\nNB=acc*100\nNB\nprint(\"Accuracy = \" + str(acc))\nprint(confusion_matrix(y_test, predic))\nprint(classification_report(y_test, predic))\nprint(\"ROC AUC : \", roc_auc_score(y_test, predic) *  100)","95c8d275":"#                                       RANDOM FOREST \n\nR_F_model.fit(X_train, y_train)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.85,random_state=114)\npredic=R_F_model.predict(X_test)\nacc = accuracy_score(y_test,predic)\nRandom_F=acc*100\nRandom_F\n\nprint(\"Accuracy = \" + str(acc))\nprint(confusion_matrix(y_test, predic))\nprint(classification_report(y_test, predic))\nprint(\"ROC AUC : \", roc_auc_score(y_test, predic) *  100)","d00b2cce":"#                                     DECISION TREE\n    \nDecision_model.fit(X_train, y_train)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.85)\npredic=Decision_model.predict(X_test)\nacc = accuracy_score(y_test,predic)\nDeci_Tr_Model=acc*100\nDeci_Tr_Model\n\nprint(\"Accuracy = \" + str(acc))\nprint(confusion_matrix(y_test, predic))\nprint(classification_report(y_test, predic))\nprint(\"ROC AUC : \", roc_auc_score(y_test, predic) *  100)","7a1a9133":"#                                         LOGISTIC REGRESSION \n    \nLogistic_model.fit(X_train, y_train)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.85)\npredic=Logistic_model.predict(X_test)\nacc = accuracy_score(y_test,predic)\nLogist_Model=acc*100\nLogist_Model\n\nprint(\"Accuracy = \" + str(acc))\nprint(confusion_matrix(y_test, predic))\nprint(classification_report(y_test, predic))\nprint(\"ROC AUC : \", roc_auc_score(y_test, predic) *  100)","55f1c2da":"#                             KN \n    \nKN_model.fit(X_train, y_train)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.85)\npredic=KN_model.predict(X_test)\nacc = accuracy_score(y_test,predic)\nKN_Model=acc*100\nKN_Model\n\nprint(\"Accuracy = \" + str(acc))\nprint(confusion_matrix(y_test, predic))\nprint(classification_report(y_test, predic))\nprint(\"ROC AUC : \", roc_auc_score(y_test, predic) *  100)","bc70d3a6":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom keras.layers import Dropout\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import Adam\nfrom keras.losses import BinaryCrossentropy\n\n#train the model\nmodel = Sequential()\nmodel.add(Dense(32, input_shape=(X_train.shape[1],), activation='relu')),\nmodel.add(Dropout(0.2)),\nmodel.add(Dense(32, activation='relu')),\nmodel.add(Dropout(0.2)),\nmodel.add(Dense(4, activation='relu')),\nmodel.add(Dropout(0.2)),\nmodel.add(Dense(1, activation='sigmoid'))","faa2389e":"opt = Adam(learning_rate=0.0001)\nearlystopper = tf.keras.callbacks.EarlyStopping(monitor='val_loss',mode='min',patience=15, verbose=1,restore_best_weights=True)\nmodel.compile(optimizer = opt, loss = 'binary_crossentropy', metrics = ['accuracy'])\nhistory = model.fit(X_train, y_train, batch_size=32, epochs=50,validation_split = 0.15, callbacks = [earlystopper],verbose = 1)\nhistory_dict = history.history","5b566c83":"y_pred = model.predict(X_test)\ny_pred = (y_pred > 0.5)\ny_pred = [1 if x == True else 0 for x in predic]\nprint(\"Accuracy = \" + str(acc))\nprint(confusion_matrix(y_test, predic))\nprint(classification_report(y_test, predic))\nprint(\"ROC AUC : \", roc_auc_score(y_test, predic) *  100)","53a1aa8c":"from pandas import DataFrame\nmd=DataFrame({'MODELS':['Random fores','Decision Treee','KN','Logistic Reg','Naive Bayes'],'ACCURACY SCORES % ':[Random_F,Deci_Tr_Model,KN_Model,Logist_Model,NB]})\nmd","bc24219f":"**4. REGRESION LOGISTICA**","0884ac94":"**RESULTADOS**","c13916fd":"**3. ARBOLES DE DECISION**","f86a105f":"**1. NAIVE BAYES**","ab4f5bef":"**5. KNN**","5114fe27":"**2. RANDOM FOREST**","3b1038f5":"**6. REDES NEURONALES**"}}