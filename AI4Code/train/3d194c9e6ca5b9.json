{"cell_type":{"6d80e4a8":"code","d4fff989":"code","4c9c2535":"code","b184b023":"code","e7eb815b":"code","9ce00c4b":"code","e7079b41":"code","90b9ed0a":"code","05f1afc3":"code","fe9f03f2":"code","8490ba99":"code","400ce21c":"code","ed142f8a":"code","0160dc9b":"code","aa05bc9c":"code","7a0cd3fc":"code","22c4abac":"code","ff895851":"code","1b071ae2":"code","22ae9388":"code","249b2a3c":"code","af282e32":"code","13526fa0":"code","86662836":"code","758deb51":"code","dd5eb526":"code","8fee01a5":"code","da8fc977":"code","6d68b05a":"code","d3af2628":"code","df3ad3a3":"code","7c3e2105":"code","1fbeb456":"code","08046ee7":"code","7fb352b5":"code","030b806c":"code","0cd918c6":"code","541c33df":"code","7de1bfde":"code","13974423":"code","52747e65":"code","e5324fa4":"code","43b02249":"code","e6fd453d":"code","c1f9dda3":"markdown","aca68467":"markdown","51737717":"markdown","57fbe912":"markdown","a0adf255":"markdown","2fa6b194":"markdown","be8ded43":"markdown","51eeb1db":"markdown","74ae222a":"markdown","e284814d":"markdown","8e6f605a":"markdown","98281c91":"markdown","34014cf0":"markdown","ecd17948":"markdown","de931636":"markdown","b8631a05":"markdown"},"source":{"6d80e4a8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d4fff989":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\ndata = pd.read_csv(\"\/kaggle\/input\/top50spotify2019\/top50.csv\",encoding='ISO-8859-1')","4c9c2535":"data.head()","b184b023":"data.sort_values(by = ['Popularity'],ascending=False)","e7eb815b":"plt.figure(figsize = (15,7))\nax = sns.swarmplot(x=\"Genre\", y=\"Popularity\", data = data)\nax = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nax = plt.title('Genre')","9ce00c4b":"plt.figure(figsize = (15,7))\nax = sns.countplot(x=\"Genre\", data=data)\nax = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nax = plt.title('Genre')","e7079b41":"plt.figure(figsize = (15,7))\nax = sns.countplot(x=\"Artist.Name\", data=data)\nax = ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nax = plt.title('Artist.Name')","90b9ed0a":"data.columns","05f1afc3":"f, axes = plt.subplots(4, 2, figsize=(20,20))\n\nsns.distplot(data[\"Beats.Per.Minute\"],kde = False, ax=axes[0][0])\nsns.distplot(data[\"Energy\"],kde = False, ax=axes[0][1])\nsns.distplot(data[\"Danceability\"],kde = False, ax=axes[1][0])\nsns.distplot(data[\"Loudness..dB..\"],kde = False, ax=axes[1][1])\nsns.distplot(data[\"Liveness\"],kde = False, ax=axes[2][0])\nsns.distplot(data[\"Valence.\"],kde = False, ax=axes[2][1])\nsns.distplot(data[\"Length.\"],kde = False, ax=axes[3][0])\nsns.distplot(data[\"Speechiness.\"],kde = False, ax=axes[3][1])","fe9f03f2":"data.columns","8490ba99":"import numpy as np; np.random.seed(0)\nimport seaborn as sns; sns.set()\n\nplt.figure(figsize=(20,20))\nheatmap_data = data[['Beats.Per.Minute','Energy','Danceability','Loudness..dB..','Liveness','Valence.',\n                   'Length.','Acousticness..','Speechiness.','Popularity']].corr()\nax = sns.heatmap(heatmap_data,annot=True)","400ce21c":"data_ml = data.copy()","ed142f8a":"data_ml.head()","0160dc9b":"data_ml['Artist.Name'] = data_ml['Artist.Name'].astype('category').cat.codes\ndata_ml['Genre'] = data_ml['Genre'].astype('category').cat.codes","aa05bc9c":"data_ml.head()","7a0cd3fc":"X = data_ml.iloc[:,2:13].values\ny = data_ml.iloc[:,13:].values","22c4abac":"X","ff895851":"y","1b071ae2":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\nX = sc.fit_transform(X)","22ae9388":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","249b2a3c":"from sklearn.svm import SVC","af282e32":"clf = SVC(probability=True,kernel='poly',degree=4,gamma='auto')","13526fa0":"clf.fit(X_train,y_train.ravel())","86662836":"train_result = clf.predict(X_train)\ntest_result = clf.predict(X_test)","758deb51":"from sklearn.metrics import mean_squared_error\n\nprint('Training MSE: ', mean_squared_error(y_train, train_result))\nprint('Test MSE: ', mean_squared_error(y_test, test_result))","dd5eb526":"indices_train = np.arange(0,len(y_train),1)\nindices_test = np.arange(0,len(y_test),1)","8fee01a5":"indices_train.shape","da8fc977":"fig = plt.figure(figsize = (10,10))\nplt.subplot(1, 2, 1)\nax1 = sns.scatterplot(indices_train, train_result.ravel(), label = 'train result')\nax1 = sns.scatterplot(indices_train, y_train.ravel(),label = 'actual data')\nplt.title('SVR')\nplt.subplot(1, 2, 2)\nax2 = sns.scatterplot(indices_test, test_result.ravel(), label = 'train result')\nax2 = sns.scatterplot(indices_test, y_test.ravel(),label = 'actual data')\nplt.title('SVR')","6d68b05a":"from sklearn.neighbors import KNeighborsRegressor\nneigh = KNeighborsRegressor(n_neighbors=2)","d3af2628":"knn_clf = neigh.fit(X_train, y_train.ravel())","df3ad3a3":"train_result_knn = knn_clf.predict(X_train)\ntest_result_knn = knn_clf.predict(X_test)","7c3e2105":"from sklearn.metrics import mean_squared_error\n\nprint('Training MSE: ', mean_squared_error(y_train, train_result_knn))\nprint('Test MSE: ', mean_squared_error(y_test, test_result_knn))","1fbeb456":"fig = plt.figure(figsize = (10,10))\nplt.subplot(1, 2, 1)\nax1 = sns.scatterplot(indices_train, train_result_knn.ravel(), label = 'train result')\nax1 = sns.scatterplot(indices_train, y_train.ravel(),label = 'actual data')\nplt.title('KNN')\nplt.subplot(1, 2, 2)\nax2 = sns.scatterplot(indices_test, test_result_knn.ravel(), label = 'train result')\nax2 = sns.scatterplot(indices_test, y_test.ravel(),label = 'actual data')\nplt.title('KNN')","08046ee7":"from sklearn.tree import DecisionTreeRegressor\n\ndec_clf = DecisionTreeRegressor(max_depth=4)","7fb352b5":"dec_tree_clf = dec_clf.fit(X_train, y_train.ravel())","030b806c":"train_result_dec = dec_clf.predict(X_train)\ntest_result_dec = dec_clf.predict(X_test)","0cd918c6":"from sklearn.metrics import mean_squared_error\n\nprint('Training MSE: ', mean_squared_error(y_train, train_result_dec))\nprint('Test MSE: ', mean_squared_error(y_test, test_result_dec))","541c33df":"fig = plt.figure(figsize = (10,10))\nplt.subplot(1, 2, 1)\nax1 = sns.scatterplot(indices_train, train_result_dec.ravel(), label = 'train result')\nax1 = sns.scatterplot(indices_train, y_train.ravel(),label = 'actual data')\nplt.title('DT')\nplt.subplot(1, 2, 2)\nax2 = sns.scatterplot(indices_test, test_result_dec.ravel(), label = 'train result')\nax2 = sns.scatterplot(indices_test, y_test.ravel(),label = 'actual data')\nplt.title('DT')","7de1bfde":"from sklearn.ensemble import AdaBoostRegressor","13974423":"regr = AdaBoostRegressor(random_state=0, n_estimators=100)","52747e65":"boost = regr.fit(X, y)","e5324fa4":"train_result_boost = boost.predict(X_train)\ntest_result_boost = boost.predict(X_test)","43b02249":"from sklearn.metrics import mean_squared_error\n\nprint('Training MSE: ', mean_squared_error(y_train, train_result_boost))\nprint('Test MSE: ', mean_squared_error(y_test, test_result_boost))","e6fd453d":"fig = plt.figure(figsize = (10,10))\nplt.subplot(1, 2, 1)\nax1 = sns.scatterplot(indices_train, train_result_boost.ravel(), label = 'train result')\nax1 = sns.scatterplot(indices_train, y_train.ravel(),label = 'actual data')\nplt.title('boost')\nplt.subplot(1, 2, 2)\nax2 = sns.scatterplot(indices_test, test_result_boost.ravel(), label = 'train result')\nax2 = sns.scatterplot(indices_test, y_test.ravel(),label = 'actual data')\nplt.title('boost')","c1f9dda3":"![](https:\/\/scikit-learn.org\/0.18\/_images\/sphx_glr_plot_svm_regression_001.png)","aca68467":"## 3.4 AdaBoost Regression","51737717":"![](https:\/\/miro.medium.com\/max\/405\/0*BMFO6QFX55-oESwy.png)","57fbe912":"![](https:\/\/scikit-learn.org\/stable\/_images\/sphx_glr_plot_adaboost_regression_thumb.png)","a0adf255":"## 3.3 Decision tree regression","2fa6b194":"### 3.1 Support Vector Regression","be8ded43":"# Predict the Song Popularity\n\n![spotify](https:\/\/www.ft.com\/__origami\/service\/image\/v2\/images\/raw\/http%3A%2F%2Fcom.ft.imagepublish.upp-prod-us.s3.amazonaws.com%2F97fcb70e-447a-11ea-9a2a-98980971c1ff?fit=scale-down&source=next&width=700)\n\n### Spotify has become a recent music station preference. With recommendation system, it was better to search for your preferred music. The 50 most popular song is listed, and each song has their popularity. \n\n### This data consisted of many parameters, and from the parameters we want to predict how popular the song is. The higher the value the more popular the song is.\n\n### This notebook consist of:\n### 1. Exploratory and Data Analysis\n### 2. Preprocessing and Feature Engineering\n### 3. Machine learning modeling using SVM, decision tree, kNN, and Adaboost.\n### 4. Some mathematical notes","51eeb1db":"# 2. Feature Engineering\n\nPreparing what we need for machine learning modeling. \nWe need:\n* Dummy variable for categorical data (Artist Name, Genre)\n* Treat track name as uniue value","74ae222a":"## 3.2 KNN regression","e284814d":"## Now, we want to know what genre is the most popular. We will make the genre plot.","8e6f605a":"# 3. Alright, then the data is ready to learn!","98281c91":"* ### Dummy variable for artist and genre","34014cf0":"# 1. Loading Data, Exploratory, and Data Analysis\n\nHere is popular spotify song. Then, see what inside the data and visualize it.","ecd17948":"## Scaling\n\n![](https:\/\/i.stack.imgur.com\/Z7ATR.png)\n\n![](https:\/\/scikit-learn.org\/stable\/_images\/sphx_glr_plot_all_scaling_thumb.png)","de931636":"### Sorted by popularity","b8631a05":"![](https:\/\/scikit-learn.org\/stable\/_images\/sphx_glr_plot_tree_regression_001.png)"}}