{"cell_type":{"57148a62":"code","7b95d1ec":"code","b2896837":"code","366816b7":"code","322bdbcd":"code","b79160a2":"code","42d6fbcf":"code","f09cd172":"code","4e2c99c7":"code","8cbf1ce8":"code","e2ae14ca":"code","a06316ac":"code","141cd332":"code","f26cb385":"code","5ceb3ab8":"code","37aa33e2":"code","1850367c":"code","ea5ea662":"code","f42ff008":"code","f041105a":"code","b1f3f9cb":"code","001d6b46":"code","6be52c59":"code","04bc9be5":"code","e2eb2087":"code","275230f0":"code","47434588":"code","a1b45905":"code","50276488":"code","cf880f5f":"code","7562f9db":"code","39de2623":"code","d1e68674":"code","97bdd6d6":"code","f5e99f72":"code","98d4fe6d":"code","d245ac00":"code","bee445e7":"code","db99b40d":"code","57c0c322":"code","334099c3":"code","ea1d1278":"code","f7421992":"code","76c22926":"code","f750c3bd":"code","25cac330":"code","c54deed5":"code","16c9030e":"code","9a8040bb":"code","9b189c1d":"code","40ced821":"code","7ddf6c4a":"code","c662d09c":"code","71c68dd9":"code","0f1e7142":"code","2c219719":"code","5a87fb12":"code","c3e7fd3c":"code","ab413d81":"code","3bda1ed4":"code","f17b1392":"code","7146bcb7":"code","12ce6ec5":"code","e4ac1fe0":"code","8c0e99c3":"code","17a72b6c":"code","d4cc94fb":"code","293fed7e":"code","0d343896":"markdown","19b2d16c":"markdown","2f943c4c":"markdown","3ce00967":"markdown","e4362da8":"markdown","aaf6017f":"markdown","35a65ab1":"markdown","c2de4729":"markdown","a0a23d3b":"markdown","9fff5038":"markdown","d204dfde":"markdown","140afb52":"markdown","a14139a9":"markdown","e34cf322":"markdown","94078478":"markdown","0e2c248a":"markdown","075a195b":"markdown","8c1585c5":"markdown","25882689":"markdown","1bb62767":"markdown","dc602d17":"markdown","aac464d6":"markdown","0745bd39":"markdown"},"source":{"57148a62":"import pandas as pd\nimport plotly.express as px\nimport numpy as np\nfrom pprint import pprint","7b95d1ec":"data1 = pd.read_csv(\"..\/input\/ipldatasets\/matches.csv\")\ndata2 = pd.read_csv(\"..\/input\/ipldatasets\/deliveries.csv\")","b2896837":"print(len(data1), len(data2))\n\ndata1[\"team1\"] = data1[\"team1\"].replace(\"Rising Pune Supergiant\", \"Rising Pune Supergiants\")\ndata1[\"team2\"] = data1[\"team2\"].replace(\"Rising Pune Supergiant\", \"Rising Pune Supergiants\")\ndata1[\"winner\"] = data1[\"winner\"].replace(\"Rising Pune Supergiant\", \"Rising Pune Supergiants\")\n\ndata1[\"team1\"] = data1[\"team1\"].replace(\"Delhi Daredevils\", \"Delhi Capitals\")\ndata1[\"team2\"] = data1[\"team2\"].replace(\"Delhi Daredevils\", \"Delhi Capitals\")\ndata1[\"winner\"] = data1[\"winner\"].replace(\"Delhi Daredevils\", \"Delhi Capitals\")","366816b7":"data1.columns\n# data2[data2[\"is_super_over\"] == 1].head(30)","322bdbcd":"data1[data1[\"result\"] != \"normal\"].head()","b79160a2":"data1[data1[\"winner\"] == np.nan]","42d6fbcf":"teams = list(set(list(data1.team1)).union(set(list(data1.team2))))\nteams","f09cd172":"data1.winner.unique()","4e2c99c7":"px.histogram(data1.loc[data1[\"win_by_wickets\"] > 0], x=\"win_by_wickets\", labels={\n    \"win_by_wickets\": \"Wickets left\",\n    \"count\": \"Number of matches won\"\n}, title=\"Counts of matches won by wickets vs Win margin\")","8cbf1ce8":"px.histogram(data1.loc[data1[\"win_by_runs\"] > 0], x=\"win_by_runs\", labels={\n    \"win_by_runs\": \"Runs\",\n    \"count\": \"Number of matches won\"\n}, title=\"Counts of matches won by runs vs Win margin\")","e2ae14ca":"print(f\"Chances that toss winner will win the match = {len(data1[data1['toss_winner'] == data1['winner']])*100\/\/len(data1)}%\")\nprint(f\"Chances that fielding first will win the match = {len(data1[data1['win_by_wickets'] > 0])*100\/\/len(data1)}%\")\nprint(f\"Chances that a team will win on home ground = {len(data1[data1['team1'] == data1['winner']])*100\/\/len(data1)}%\")","a06316ac":"team_wins = {}\nteam_losses = {}\nteam_ties = {}\n# data1 = data1[data1[\"winner\"] != np.nan]\n\nnm1 = np.nan # Ties\nnm2 = np.nan # Losses\nnm = np.nan # Wins\n\nfor i in range(len(data1)):\n    nm = data1.iloc[i,:].winner\n    \n    if data1.iloc[i,:].team2 == data1.iloc[i,:].winner:\n        nm1 = data1.iloc[i,:].team1\n    elif data1.iloc[i,:].team1 == data1.iloc[i,:].winner:\n        nm1 = data1.iloc[i,:].team2\n\n    if nm != np.nan:\n        if nm in team_wins.keys(): \n            team_wins[nm] += 1\n        else:\n            team_wins[nm] = 1\n    \n    if nm1 != np.nan:\n        if nm1 in team_losses.keys(): \n            team_losses[nm1] += 1\n        else:\n            team_losses[nm1] = 1\n    \n    if nm == np.nan:\n        t1 = data1.iloc[i,:].team1\n        t2 = data1.iloc[i,:].team2\n\n        if t1 in team_ties.keys():\n            team_ties[t1] +=1\n        else:\n            team_ties[t1] = 1\n\n        if t2 in team_ties.keys():\n            team_ties[t2] +=1\n        else:\n            team_ties[t2] = 1\n    \ndel team_wins[np.nan]\n# del team_losses[np.nan]\nprint(\"Win counts:\\n\")\npprint(sorted(team_wins.items(), key= lambda x: x[1], reverse=True))\nprint(\"----------------------------------\\n\")\nprint(\"Loss counts:\\n\")\npprint(sorted(team_losses.items(), key= lambda x: x[1], reverse=True))\nprint(\"----------------------------------\\n\")\nprint(\"Tie counts:\\n\")\npprint(sorted(team_ties.items(), key= lambda x: x[1], reverse=True))\nprint(\"----------------------------------\\n\")","141cd332":"team_stats = pd.DataFrame({\"team\": [], \"wins\": [], \"losses\": [], \"ties\": []})\n\nfor team in team_wins.keys():\n    team_stats = team_stats.append({\"team\": team, \"wins\": team_wins[team], \"losses\": team_losses[team]}, ignore_index = True)\n\nteam_stats.fillna(0)","f26cb385":"team_stats_disp = team_stats[[\"team\", \"wins\", \"losses\"]]\nteam_stats_disp = team_stats_disp.sort_values(\"wins\", ascending=False)\nteam_stats_disp","5ceb3ab8":"px.bar(team_stats_disp, x=\"team\", y=[\"wins\", \"losses\"], title=\"Team Stats, ranked by success in IPL (2008-2019)\", labels={\n    \"team\": \"Team Name\",\n    \"value\": \"Match Results\"\n}).show()","37aa33e2":"batsmen = sorted(list(set(list(data2[\"batsman\"]))))\n\nballs_faced_index = {}\n\nfor i in batsmen:\n    balls_faced_index[i] = len(data2[data2[\"batsman\"] == i])\n\nruns_index = {}\n\nfor i in batsmen:\n    runs_index[i] = data2[data2[\"batsman\"] == i].batsman_runs.sum()\n\n# pprint(runs_index)\nlen(runs_index)\n\ntop_batsmen = sorted(runs_index.items(), key = lambda x: x[1], reverse=True)\n# pprint(top_batsmen[:20])\n\nstrike_rate_index = {}\n\nfor i in runs_index.keys():\n    strike_rate_index[i] = runs_index[i]\/balls_faced_index[i] * 100\n\n# strike_rate_index\n\n","1850367c":"batsmen_matches_index = {}\nbuf = None\nfor i in batsmen:\n    batsmen_matches_index[i] = len(set(list(data2[data2[\"batsman\"] == i].match_id)))","ea5ea662":"dict(sorted(batsmen_matches_index.items(), key=lambda x: x[1], reverse=True)[:20])","f42ff008":"batsmen_df = pd.DataFrame({\"Name\": [], \"Matches\": [], \"Runs\": [], \"Balls faced\": [], \"Strike Rate\": []})\n\nfor i in batsmen:\n    batsmen_df = batsmen_df.append({\"Name\": i, \"Matches\": batsmen_matches_index[i], \"Runs\": runs_index[i], \"Balls faced\": balls_faced_index[i], \"Strike Rate\": strike_rate_index[i]}, ignore_index=True)\n\nbatsmen_df = batsmen_df.sort_values(\"Runs\", ascending=False)","f041105a":"batsmen_df.iloc[:20]","b1f3f9cb":"bowlers = sorted(list(set(list(data2[\"bowler\"]))))\n\ndeliveries_index = {}\nfor i in bowlers:\n    deliveries_index[i] = len(data2[data2[\"bowler\"] == i])\n","001d6b46":"# Verification if total sum of all deliveries match number of rows of deliveries.csv\n\nsumd = 0 \nfor i in bowlers:\n    sumd += deliveries_index[i]\n\nsumd","6be52c59":"# pprint(deliveries_index)\npprint(sorted(deliveries_index.items(), key = lambda x: x[1], reverse=True)[:10])","04bc9be5":"print(data2[\"dismissal_kind\"].unique())\nkinds = [\"caught\", \"bowled\", \"lbw\", \"caught and bowled\", \"stumped\"]","e2eb2087":"wickets_index = {}\n\nfor i in bowlers:\n    wickets_index[i] = len(data2.loc[(data2[\"player_dismissed\"].isin(batsmen)) & (data2[\"bowler\"] == i) & (data2[\"dismissal_kind\"].isin(kinds))])\n\n","275230f0":"pprint(sorted(wickets_index.items(), key = lambda x: x[1], reverse=True)[:10])","47434588":"runs_conceded_index = {}\n\nfor i in bowlers:\n    runs_conceded_index[i] = data2.loc[(data2[\"bowler\"]) == i].total_runs.sum()","a1b45905":"dict(sorted(runs_conceded_index.items(), key = lambda x: x[1], reverse=True)[:20])","50276488":"average_index = {}\n\nfor i in bowlers:\n    average_index[i] = runs_conceded_index[i]\/wickets_index[i]","cf880f5f":"average_index[\"SL Malinga\"]","7562f9db":"bowlers_matches_index = {}\nfor i in bowlers:\n    bowlers_matches_index[i] = len(set(list(data2[data2[\"bowler\"] == i].match_id)))","39de2623":"bowlers_df = pd.DataFrame({\"Name\": [], \"Matches\": [], \"Wickets\": [], \"Runs conceded\": [], \"Average\": []})\n\nfor i in bowlers:\n    bowlers_df = bowlers_df.append({\"Name\": i, \"Matches\": bowlers_matches_index[i], \"Wickets\": wickets_index[i], \"Runs conceded\": runs_conceded_index[i], \"Average\": average_index[i]}, ignore_index=True)\n\nbowlers_df = bowlers_df.sort_values(\"Wickets\", ascending=False)","d1e68674":"bowlers_df","97bdd6d6":"bowlers_df.loc[bowlers_df[\"Matches\"] >= 50].sort_values(\"Average\", ascending=True)[:10]","f5e99f72":"pprint(bowlers_df[:10].Name)","98d4fe6d":"MoM_names = list(data1.player_of_match)\n\nMoM_index = {}\n\nfor i in MoM_names:\n    if i in MoM_index.keys():\n        MoM_index[i] += 1\n    else:\n        MoM_index[i] = 1\nMoM_index\n\n# print(len(MoM_index.keys()))\ntop_MoM = pd.DataFrame({\"Name\": [], \"MoM awards\": []})\n\nfor i in MoM_index.keys():\n    top_MoM = top_MoM.append({\"Name\": i, \"MoM awards\": MoM_index[i]}, ignore_index=True)\n\ntop_MoM = top_MoM.sort_values(\"MoM awards\", ascending=False)\n\ntop_MoM.iloc[:20, :]","d245ac00":"h2h = data1[[\"team1\", \"team2\", \"winner\", \"venue\"]]\nh2h_data = pd.DataFrame({\"team1\": [], \"team2\": [], \"matchups\": [], \"wins for team 1\": [], \"wins for team 2\": [], \"tie(s)\": [], \"probability of team1 winning\": [], \"probability of team2 winning\": [], \"probability of tie\": [], \"venue\": []})\n\nh2h.reset_index(drop=True, inplace=True)\nbuf = None\nexplored = []\nfor i in teams:\n    ct1 = 0\n    ct2 = 0\n    ct3 = 0\n    sct = 0\n    for j in teams:\n        if i != j:\n            # print(i, j)\n            buf = h2h.loc[(h2h[\"team1\"] == i) & (h2h[\"team2\"] == j)]\n            for k in range(len(buf)):\n                # print(buf.iloc[k].winner)\n                if buf.iloc[k].winner == i:\n                    ct1 += 1\n                elif buf.iloc[k].winner == j:\n                    ct2 += 1\n                else:\n                    ct3 += 1\n            sct = ct1+ct2+ct3\n            if sct == 0: sct = 1\n            h2h_data = h2h_data.append({\"team1\": i, \"team2\": j, \"matchups\": ct1+ct2+ct3, \"wins for team 1\": ct1, \"wins for team 2\": ct2, \"tie(s)\": ct3, \"probability of team1 winning\": ct1\/sct, \"probability of team2 winning\": ct2\/sct, \"probability of tie\": ct3\/sct, \"venue\": list(buf.venue)}, ignore_index=True)\n        ct1 = 0\n        ct2 = 0\n        ct3 = 0\n\nh2h_data","bee445e7":"h2h_data[\"wins for team 2\"].sum() + h2h_data[\"wins for team 1\"].sum() + h2h_data[\"tie(s)\"].sum() # should be same as total matches played (756)","db99b40d":"h2h_data[h2h_data[\"tie(s)\"] > 0.0]","57c0c322":"# data1[(data1[\"team1\"] == \"Kings XI Punjab\") & (data1[\"team2\"] == \"Kolkata Knight Riders\")] # Verifying correctness of findings","334099c3":"h2h_data.sort_values(\"matchups\", ascending=False)","ea1d1278":"fig1a = px.bar(h2h_data, x = \"team1\", y=\"wins for team 1\", text=\"wins for team 1\", color=\"team2\", labels={\n    \"team1\": \"Team\",\n    \"wins for team 1\": \"Wins\",\n    \"team2\": \"Opponent\",\n\n}, title=\"Stacked head-to-head wins at home\", width=1000, height=800)\nfig1a.update_layout(uniformtext_minsize=8)\nfig1a.show()","f7421992":"fig2a = px.bar(h2h_data, x = \"team1\" , y=\"wins for team 2\", text=\"wins for team 2\", color=\"team2\", labels={\n    \"team1\": \"Team\",\n    \"wins for team 2\": \"Losses\",\n    \"team2\": \"Opponent\",\n\n}, title=\"Stacked head-to-head losses at home\", width=1000, height=800)\nfig2a.update_layout(uniformtext_minsize=8)\nfig2a.show()","76c22926":"figA = px.bar(h2h_data, x = \"team1\", y=[\"wins for team 1\", \"wins for team 2\"], color=\"team2\", labels={\n    \"team1\": \"Team\",\n    \"value\": \"Stats (wins | losses)\",\n    \"team2\": \"Opponent\",\n\n}, title=\"Stacked head-to-head performance at home\", width=1000, height=800)\n\nfigA.show()","f750c3bd":"fig1b = px.bar(h2h_data, x = \"team2\", y=\"wins for team 2\", text=\"wins for team 2\", color=\"team1\", labels={\n    \"team2\": \"Team\",\n    \"wins for team 2\": \"Wins\",\n    \"team1\": \"Opponent\",\n\n}, title=\"Stacked head-to-head wins at away matches\", width=1000, height=800)\nfig1b.update_layout(uniformtext_minsize=8)\nfig1b.show()","25cac330":"fig2b = px.bar(h2h_data, x = \"team2\", y=\"wins for team 1\", text=\"wins for team 1\", color=\"team1\", labels={\n    \"team2\": \"Team\",\n    \"wins for team 1\": \"Losses\",\n    \"team1\": \"Opponent\",\n\n}, title=\"Stacked head-to-head losses at away matches\", width=1000, height=800)\nfig2b.update_layout(uniformtext_minsize=8)\nfig2b.show()","c54deed5":"figB = px.bar(h2h_data, x = \"team2\", y=[\"wins for team 2\", \"wins for team 1\"], color=\"team1\", labels={\n    \"team2\": \"Team\",\n    \"value\": \"Stats (wins | losses)\",\n    \"team1\": \"Opponent\",\n\n}, title=\"Stacked head-to-head performance at away matches\", width=1000, height=800)\n\nfigB.show()","16c9030e":"data1.loc[(data1[\"team1\"] == \"Gujarat Lions\") & (data1[\"winner\"] == \"Gujarat Lions\")]","9a8040bb":"len(data1.loc[(data1[\"team1\"] == \"Gujarat Lions\")])","9b189c1d":"print(data2.columns)\nwinners = {}\n\nfor i in list(data1.id):\n    winners[i] = (data1[data1[\"id\"] == i][\"winner\"].values)[0]\n\n# print(winners)","40ced821":"balls_match_index = {}\n\nfor i in range(len(data2)):\n    w = data2.iloc[i].match_id\n\n    if w not in balls_match_index.keys():\n        balls_match_index[w] = 1\n    else:\n        balls_match_index[w] += 1\n    # print(w)\n\nprint(balls_match_index)\n\n# data3.iloc[10000].match_id","7ddf6c4a":"winner_lst = []\n\nfor i in winners.keys():\n    winner_lst +=  balls_match_index[i] * [winners[i]]","c662d09c":"data2 = data2.assign(winner=winner_lst)","71c68dd9":"print(data2.head())","0f1e7142":"# data2.to_csv(\"deliveries2.csv\", index=False)  # (save to file for faster lookups)","2c219719":"data1.head(1)","5a87fb12":"match_ids = sorted(list(set(list(data2.match_id))))\nprint(match_ids)","c3e7fd3c":"# over_data = pd.DataFrame({\"match_id\": [], \"inning\": [], \"batting_team\": [], \"bowling_team\": [], \"over\": [], \"runs\":[], \"wickets\": [], \"winner\": []})\n\n# overs = list(range(1,21))\n# print(overs)\n\n# buf = None\n\n# innings = [1,2]\n\n# for i in match_ids:\n#     j = 1\n#     for j in innings:\n#         k = 1\n#         for k in overs:\n#             buf = data2[(data2[\"match_id\"] == i) & (data2[\"inning\"] == j) & (data2[\"over\"] == k) & (data2[\"is_super_over\"] == 0)]\n\n#             if len(buf.batting_team.values) > 0:\n#                 bat = buf.batting_team.values[0]\n#             else:\n#                 bat = np.nan\n#             if len(buf.bowling_team.values) > 0:\n#                 bowl = buf.bowling_team.values[0]\n#             else:\n#                 bowl = np.nan\n#             # bowl = list(set(buf.bowling_team.values))\n#             ballrun = (buf.total_runs.sum())\n#             wicket = buf.player_dismissed.count()\n#             # winner_match = list(set(data1[data1[\"id\"] == i].winner.values))\n\n#             if len(data1[data1[\"id\"] == i].winner.values) > 0:\n#                 winner_match = data1[data1[\"id\"] == i].winner.values[0]\n#             else:\n#                 winner_match = np.nan\n\n#             over_data = over_data.append({\"match_id\": i, \"inning\": j, \"batting_team\": bat, \"bowling_team\": bowl, \"over\": k, \"runs\": ballrun, \"wickets\": wicket, \"winner\": winner_match}, ignore_index=True)","ab413d81":"over_data = pd.read_csv(\"..\/input\/ipldatasets\/Overwise statistics without super over.csv\") # Reading uploaded data for quick reuse","3bda1ed4":"print(over_data[\"winner\"]) # .iloc[35:50,]","f17b1392":"data2[(data2[\"match_id\"] == 1) & (data2[\"inning\"] == 2) & (data2[\"over\"] == 3) & (data2[\"is_super_over\"] == 0)]","7146bcb7":"# super_over_data = pd.DataFrame({\"match_id\": [], \"inning\": [], \"batting_team\": [], \"bowling_team\": [], \"over\": [], \"runs\":[], \"wickets\": [], \"winner\": []})\n\n# buf = None\n# overs = [1]\n# innings = [3,4]\n\n# data3 = data2[data2[\"is_super_over\"] == 1]\n# for i in match_ids:\n#     j = 3\n#     for j in innings:\n#         k = 1\n#         # for k in overs:\n#         buf = data3[(data3[\"match_id\"] == i) & (data3[\"inning\"] == j)] # & (data3[\"over\"] == k)]\n\n#         if len(buf.batting_team.values) > 0:\n#             bat = buf.batting_team.values[0]\n#         else:\n#             bat = np.nan\n#         if len(buf.bowling_team.values) > 0:\n#             bowl = buf.bowling_team.values[0]\n#         else:\n#             bowl = np.nan\n\n#         ballrun = (buf.total_runs.sum())\n#         wicket = buf.player_dismissed.count()\n\n#         if len(data1[data1[\"id\"] == i].winner.values) > 0:\n#             winner_match = data1[data1[\"id\"] == i].winner.values[0]\n#         else:\n#             winner_match = np.nan\n\n#         super_over_data = super_over_data.append({\"match_id\": i, \"inning\": j, \"batting_team\": bat, \"bowling_team\": bowl, \"over\": k, \"runs\": ballrun, \"wickets\": wicket, \"winner\": winner_match}, ignore_index=True)","12ce6ec5":"data2[data2[\"is_super_over\"] == 1].head(12)","e4ac1fe0":"# super_over_data.loc[super_over_data[\"batting_team\"] != np.nan]","8c0e99c3":"# super_over_data.bowling_team.count()","17a72b6c":"# over_data.to_csv(\"Overwise statistics without super over.csv\", index=False)\n\n# len(over_data)*6 - len(data2.loc[data2[\"is_super_over\"] == 0]) # Just a random check ","d4cc94fb":"over_data = pd.read_csv(\"..\/input\/ipldatasets\/Overwise statistics without super over.csv\")","293fed7e":"avg = {}\n\nbuf = None\nfor i in teams:\n    buf = over_data[over_data[\"batting_team\"] == i]","0d343896":"# Objective 2: To find the most favourable players to be ambassadors of different companies for promotions\n\nThe top-performing player in each match is regarded as the Man of the Match (MoM). And popular So an argument can be modelled optimally: \"The players with more MoM rewards are more likely to be popular.\"","19b2d16c":"## Find the top performing bowlers","2f943c4c":"# Generate over-wise data","3ce00967":"# Inference 1b: \n\nThe top 10 batsmen in IPL history (going by runs) are:\n\n- V Kohli\n- SK Raina\n- RG Sharma\n- DA Warner\n- S Dhawan\n- CH Gayle\n- MS Dhoni\n- RV Uthappa\n- AB de Villiers\n- G Gambhir\n\nThe top 10 batsmen in IPL history (going by wickets) are:\n\n- SL Malinga\n- A Mishra\n- Harbhajan Singh\n- PP Chawla\n- DJ Bravo\n- B Kumar\n- R Ashwin\n- SP Narine\n- UT Yadav\n- RA Jadeja","e4362da8":"## Finding the top-performing batsmen","aaf6017f":"### Verifying that the data filtering is correct","35a65ab1":"# Understanding the structure of the data and fixing some errors","c2de4729":"## Performance in away matches","a0a23d3b":"# Stitching ```winner``` column from match-wise data to delivery-wise data","9fff5038":"## Filtering over-wise data without super over","d204dfde":"# Cells under work below (please don't judge me for this... it's a work under construction)","140afb52":"## Filtering over-wise data with super over","a14139a9":"## Inference:\n\nFrom this, we can infer that teams that won while chasing, most frequently won by aaround 6 wickets. While defending the target, they mostly won by less than 30 runs.\n\nAlso, toss result and decision doesn't affect the chances of winning significantly.\n\nSurprisingly, the chances of a random team winning on their home ground is less likely than winning on away matches, probably because a team plays more away matches on average than on home ground.","e34cf322":"# Inference 1a:\n\nFrom the above graph, we can infer that the top 3 successful teams in IPL are:\n- Mumbai Indians (109 wins, 78 losses)\n- Chennai Super Kings(100 wins, 64 losses)\n- Kolkata Knight Riders(92 wins, 87 losses)","94078478":"### Finding tied matches:","0e2c248a":"## Analysing over-wise (without super over) data (Under work)","075a195b":"# Head-to-Head (H2H) matchups","8c1585c5":"# Objective 1a: Deciding the best teams in IPL history.\n\nIn this regard, we can model a reasonable assumption: \"The teams with more wins are more likely to be the best teams, as they are more likely to perform better.\" ","25882689":"# Some Generic exploration\n\nHere we do some generic data exploration, like those concerning  generic wins and losses, ie, not specific to any team or player.","1bb62767":"## Analyzing super over data (Under work)","dc602d17":"# Objective 1b: To find the top-performing players in IPL history.\n\n","aac464d6":"# Check if toss or some other statistic affects the wins:\n\n","0745bd39":"## Performance on home ground"}}