{"cell_type":{"35cfd425":"code","365bd8dd":"code","a0da3c30":"code","c6cbf63f":"code","74b5c83f":"code","a3970634":"code","82ed435b":"code","48af11e0":"code","5b45bf74":"code","b97fe878":"code","b66d5c80":"code","090600c6":"markdown","2049717e":"markdown","138c7d03":"markdown","988a130c":"markdown","77b17319":"markdown","ff0a7705":"markdown","4e53da95":"markdown"},"source":{"35cfd425":"# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# # For example, here's several helpful packages to load in \n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# # Input data files are available in the \"..\/input\/\" directory.\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input\/'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# # Any results you write to the current directory are saved as output.","365bd8dd":"import os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/covid19-global-forecasting-week-2'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a0da3c30":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\nsns.set()\npd.options.display.max_rows=1000\ntrain=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-2\/test.csv')\ntrain['Date_str']=train['Date'].copy()\ntrain['Date']=pd.to_datetime(train['Date'])\ntest['Date_str']=test['Date'].copy()\ntest['Date']=pd.to_datetime(test['Date'])","c6cbf63f":"total_country_date=train.groupby(['Country_Region','Date'])['ConfirmedCases','Fatalities'].sum().reset_index()\ntotal_country_max=total_country_date.groupby(['Country_Region'])['ConfirmedCases','Fatalities'].max().sort_values(by=['ConfirmedCases'],ascending=False).reset_index()\ntotal_country_max['Fatality Rate']=np.round((100*total_country_max['Fatalities'])\/total_country_max['ConfirmedCases'],2)\ntotal_country_max.head(10)","74b5c83f":"import plotly.express as px\ntoplot=total_country_max[total_country_max['ConfirmedCases']>=10]\ndef plot_cases_fatal(total_country_max):\n    fig = go.Figure()\n    fig = px.scatter(total_country_max, x=\"ConfirmedCases\", y=\"Fatalities\",hover_name=list(total_country_max.Country_Region.values),\n                     hover_data=[\"Fatality Rate\",'ConfirmedCases','Fatalities'],color=\"ConfirmedCases\")\n    fig.update_layout(height=500, width=900,title_text=\"Fatality vs  ConfirmedCases \")\n    xd=np.arange(1\/0.1,total_country_max['ConfirmedCases'].max(),100)\n    xd_5=np.arange(1\/0.05,total_country_max['ConfirmedCases'].max(),100)\n    xd_2=np.arange(1\/0.02,total_country_max['ConfirmedCases'].max(),100)\n    xd_1=np.arange(1\/0.01,total_country_max['ConfirmedCases'].max(),100)\n    yd=0.1*xd\n    yd_5=0.05*xd_5\n    yd_2=0.02*xd_2\n    yd_1=0.01*xd_1\n\n    fig.add_trace(go.Scatter(x=xd, y=yd, name='10% fatality rate',opacity=0.7,\n                             line=dict(color='grey', width=3,\n                                  dash='dash')))\n    fig.add_trace(go.Scatter(x=xd_5, y=yd_5, name='5% fatality rate',opacity=0.5,\n                             line=dict(color='grey', width=3,\n                                  dash='dash')))\n    fig.add_trace(go.Scatter(x=xd_2, y=yd_2, name='2% fatality rate',opacity=0.3,\n                             line=dict(color='grey', width=3,\n                                  dash='dash')))\n    fig.add_trace(go.Scatter(x=xd_1, y=yd_1, name='1% fatality rate',opacity=0.3,\n                             line=dict(color='grey', width=3,\n                                  dash='dash')))\n\n    fig.update_layout(coloraxis_showscale=False)\n    fig.update_layout( yaxis_type=\"log\", xaxis_type=\"log\")\n    fig.update_layout(\n            xaxis_title=\"ConfirmedCases\",\n            yaxis_title=\"Fatalities\",\n            )\n    fig.show()\nplot_cases_fatal(toplot)","a3970634":"def plot_dist(total_country_date,total_country_max,combinations_to_plot=[[10,100],[100,1000],[1000,10000]]):\n    val=[]\n    \n    my_fig = make_subplots(rows=1, cols=2)\n    my_fig.update_layout(height=500, width=1200,title_text=\" Distribution of Days\")\n    for combinations in combinations_to_plot:\n        comb_val={}\n        lower_limit,upper_limit=combinations[0],combinations[1]\n        for country in total_country_date['Country_Region'].unique():\n            if total_country_max[total_country_max['Country_Region']==country].ConfirmedCases.values[0]>=upper_limit:\n                country_data=total_country_date[(total_country_date['Country_Region']==country)]\n                if (country_data[country_data.ConfirmedCases<=lower_limit].tail(1).ConfirmedCases.values.size==0):\n                    continue\n                elif (country_data[country_data.ConfirmedCases<=lower_limit].tail(1).ConfirmedCases.values[0]==0):\n                    continue \n                else:\n                    comb_val[country]=pd.to_timedelta((country_data[country_data.ConfirmedCases>=upper_limit].head(1).Date.values[0]-country_data[country_data.ConfirmedCases<=lower_limit].tail(1).Date.values[0]),'D').days\n        val.append(comb_val)\n    fig = ff.create_distplot([list(xx.values()) for xx in val],[ '{} to {}'.format(xx[0],xx[1]) for xx in combinations_to_plot])\n    \n    distplot=fig['data']\n    my_fig = make_subplots(rows=1, cols=2)\n    my_fig.update_layout(height=500, width=1200)\n    \n    for i in range(2*len(combinations_to_plot)):\n        my_fig.append_trace(distplot[i], 1, 1)\n\n    \n    for xx,comb in zip(val,combinations_to_plot):\n        my_fig.add_trace(go.Box(y=list(xx.values()),name='{} to {}'.format(comb[0],comb[1] )),row=1,col=2)\n    my_fig.update_layout(height=500, width=1200,title_text=\" Distribution of Days\")\n    my_fig.show()\n            \nplot_dist(total_country_date,total_country_max)      ","82ed435b":"world_date_data=train.groupby(['Date','Date_str'])['ConfirmedCases','Fatalities'].sum().reset_index()\nworld_date_data['new_cases']=world_date_data.ConfirmedCases-world_date_data.ConfirmedCases.shift()\nworld_date_data['new_deaths']=world_date_data.Fatalities-world_date_data.Fatalities.shift()\nfig = make_subplots(rows=1, cols=1)\nfig.update_layout(height=500, width=800,title_text='Cumilative visualization for the world')\nfig.add_trace(\n                  go.Scatter(\n                            x=world_date_data['Date_str'].values,\n                            y=world_date_data['ConfirmedCases'].values\n                            ,mode='lines+markers',\n                            text=list(world_date_data.Fatalities.values),\n                             name='world cumulative cases',fill='tozeroy'\n                            ) \n                  )\nfig.add_trace(\n                  go.Scatter(\n                            x=world_date_data['Date_str'].values,\n                            y=world_date_data['new_cases'].values\n                            ,mode='lines+markers',\n                            text=list(world_date_data.Fatalities.values),fill='tozeroy',\n                             name='daily new confirmed cases',\n                            ) \n                  )\nfig.add_trace(\n                  go.Scatter(\n                            x=world_date_data['Date_str'].values,\n                            y=world_date_data['Fatalities'].values\n                            ,mode='lines+markers',\n                            text=list(world_date_data.Fatalities.values),fill='tozeroy',\n                             name='world cumulative Fatalities',\n                            ) \n                  )\nfig.update_layout( yaxis_type=\"log\")","48af11e0":"pop_dict={'Afghanistan': 38928346,'Albania': 2877797,'Algeria': 43851044,'Andorra': 77265,'Argentina': 45195774,'Australia': 25499884,'Austria': 9006398,'Azerbaijan': 10139177,'Bahrain': 1701575,'Bangladesh': 164689383,'Belgium': 11589623,\n          'Bosnia and Herzegovina': 3280819,'Brazil': 212559417,'Bulgaria': 6948445,'Burkina Faso': 20903273,'Canada': 37742154,'Chile': 19116201,'China': 1439323776,'Colombia': 50882891,'Costa Rica': 5094118,'Croatia': 4105267,'Cuba': 11326616,\n          'Cyprus': 1207359,'Denmark': 5792202,'Dominican Republic': 10847910,'Ecuador': 17643054,'Egypt': 102334404,'Finland': 5540720,'France': 65273511,'Gabon': 2225734,'Germany': 83783942,'Ghana': 31072940,\n          'Greece': 10423054,'Guatemala': 17915568,'Guyana': 786552,'Hungary': 9660351,'Iceland': 341243,'India': 1380004385,'Indonesia': 273523615,'Iran': 83992949,'Iraq': 40222493,'Ireland': 4937786,'Israel': 8655535,'Italy': 60461826,\n          'Jamaica': 2961167,'Japan': 126476461,'Kazakhstan': 18776707,'Korea, South': 51269185,'Lebanon': 6825445,'Lithuania': 2722289,'Luxembourg': 625978,'Malaysia': 32365999,'Martinique': 375265,'Mauritius': 1271768,'Mexico': 128932753,\n          'Moldova': 4033963,'Montenegro': 628066,'Morocco': 36910560,'Netherlands': 17134872,'Nigeria': 206139589,'North Macedonia': 2083374,'Norway': 5421241,'Pakistan': 220892340,'Panama': 4314767,'Paraguay': 7132538,'Peru': 32971854,\n          'Philippines': 109581078,'Poland': 37846611,'Portugal': 10196709,'Romania': 19237691,'Russia': 145934462,'San Marino': 33931,'Saudi Arabia': 34813871,'Serbia': 8737371,'Seychelles': 98347,'Singapore': 5850342,\n          'Slovakia': 5459642,'Slovenia': 2078938,'Somalia': 15893222,'South Africa': 59308690,'Spain': 46754778,'Sri Lanka': 21413249,'Sudan': 43849260,'Suriname': 586632,'Sweden': 10099265,'Switzerland': 8654622,'Thailand': 69799978,\n          'Tunisia': 11818619,'Turkey': 84339067,'US': 331002651,'Ukraine': 43733762,'United Arab Emirates': 9890402,'United Kingdom': 67886011,'Uruguay': 3473730,'Uzbekistan': 33469203,'Venezuela': 28435940,'Vietnam': 97338579}\nclass plot_per_million:\n    def __init__(self,list_of_count_to_plot,data,column_to_plot):\n        self.list_of_count_to_plot=list_of_count_to_plot\n        self.train=data\n        self.column_to_plot=column_to_plot\n    \n    def initiate_plotting(self,):\n        fig = make_subplots(rows=1, cols=1)\n        fig.update_layout(height=500, width=800, title_text=\"Number of {} per million population vs no of days since 10 {} per million population \".format(self.column_to_plot,self.column_to_plot))\n        for countt in self.list_of_count_to_plot:\n            self.plotter(self.return_count_data(countt,self.train),countt,fig)\n        fig.update_layout(\n            xaxis_title=\"no of days since 10 cases\",\n            yaxis_title=\"Number of {} per million population\".format(self.column_to_plot),\n                            )\n        fig.update_layout( yaxis_type=\"log\")\n        fig.show()\n\n    def return_count_data(self,countt,train):\n        iran_db=train[train['Country_Region']==countt].groupby(['Date','Date_str']).agg({'ConfirmedCases':['sum'],'Fatalities':['sum']}).reset_index()\n        iran_db.columns=[\t'Date',\t'Date_str',\t'ConfirmedCases',\t'Fatalities']\n        iran_db_tp=iran_db[(iran_db[self.column_to_plot]\/(pop_dict[countt]\/1000000))>=10].copy()\n        iran_db_tp['to_sub']=[iran_db_tp.head(1).Date_str.values[0]]*iran_db_tp.shape[0]\n        iran_db_tp['to_sub']=pd.to_datetime(iran_db_tp['to_sub'])\n        iran_db_tp['diff']=(iran_db_tp['Date']-iran_db_tp['to_sub']).dt.days\n        return iran_db_tp\n\n    def plotter(self,db_tp,countt,fig):\n        fig.add_trace(go.Scatter(\n                            x=db_tp['diff'].values,\n                            y=db_tp[self.column_to_plot].values\/(pop_dict[countt]\/1000000)\n                             ,mode='lines+markers',\n                              text=list(db_tp.Date_str.values),name=countt\n                            ) )\nlist_of_countries_to_plot=list(total_country_max.head(10).Country_Region.values)\nFeature_to_plot_on='ConfirmedCases'\nplotter_obj=plot_per_million(list_of_countries_to_plot,train,Feature_to_plot_on)\nplotter_obj.initiate_plotting()","5b45bf74":"train=train.fillna('nan')\ntest=test.fillna('nan')\ntotal_highest_ccp=train.groupby(['Country_Region','Province_State']).ConfirmedCases.max().reset_index().sort_values(by=['ConfirmedCases'],ascending=False).head(10)[['Country_Region','Province_State','ConfirmedCases']]\nto_map_dict={}\nfor c in list(total_highest_ccp.Country_Region.values):\n    to_map_dict[c]=list(total_highest_ccp[total_highest_ccp['Country_Region']==c].Province_State.values)\nto_map_dict ","b97fe878":"train=train.fillna('nan')\ntest=test.fillna('nan')\nfrom scipy.optimize import curve_fit\ndef sigmoid(x, m, alpha, beta):\n    return m \/ ( 1 + np.exp(-beta * (x - alpha)))\ntest['ConfirmedCases']=[0]*test.shape[0]\ntest['Fatalities']=[0]*test.shape[0]\nmodel_param_dict_cc={}\nmodel_param_dict_f={}\ntotal_world=pd.DataFrame()\nfig, ax = plt.subplots(int(len(to_map_dict.values())\/2)+1, 2,figsize=(20,10*int(len(to_map_dict.keys())\/2)))\nax=ax.ravel()\ncounter=0\nfor country in test['Country_Region'].unique():\n    for province in test[test['Country_Region']==country].Province_State.unique():\n        \n        # Removing Dates that are present in train\n        not_to_include=list(set(train[(train['Country_Region']==country)&(train.Province_State==province)].Date_str.values).intersection(\\\n            set(test[(test['Country_Region']==country)&(test.Province_State==province)].Date_str.values)))\n        to_train=train[(train['Country_Region']==country)&(train.Province_State==province)&(~(train.Date_str.isin(not_to_include)))].copy()\n        to_train['days']=(pd.to_datetime(to_train['Date'])-pd.to_datetime(\\\n                         to_train[to_train.Date==to_train.Date.min()].Date_str.unique()[0])).dt.days\n        \n        to_test=test[(test['Country_Region']==country)&(test.Province_State==province)].copy()\n        to_train['istest']=[0]*to_train.shape[0]\n        to_test['istest']=[1]*to_test.shape[0]\n\n        total=pd.concat([to_train,to_test],sort=False)\n        total['pred_cc']=[0]*total.shape[0]\n        total['pred_f']=[0]*total.shape[0]\n        total['days']=(pd.to_datetime(total['Date'])-pd.to_datetime(\\\n                         total[total.Date==total.Date.min()].Date_str.unique()[0])).dt.days\n        if to_train.ConfirmedCases.max()<10:\n            total['pred_cc']=[to_train.ConfirmedCases.max()]*total.shape[0]\n        else:\n            popt_cc, pcov_cc = curve_fit(sigmoid, to_train['days'].values,to_train.ConfirmedCases.values,bounds=([0,0,0],np.inf),maxfev=5000)\n            total['pred_cc']=sigmoid(total.days.values,popt_cc[0],popt_cc[1],popt_cc[2])\n            model_param_dict_cc['{}|{}'.format(country,province)]=popt_cc\n            \n        if to_train.Fatalities.max()<10:\n            total['pred_f']=[to_train.Fatalities.max()]*total.shape[0]\n        else:\n            popt_f, pcov_f = curve_fit(sigmoid, to_train['days'].values,to_train.Fatalities.values,bounds=([0,0,0],np.inf),maxfev=5000)\n            total['pred_f']=sigmoid(total.days.values,popt_f[0],popt_f[1],popt_f[2])\n            model_param_dict_f['{}|{}'.format(country,province)]=popt_f\n        total_world=total_world.append(total)\n        \n        \n        if (country in list(to_map_dict.keys())):\n            if province in list(np.array(to_map_dict[country]).ravel()):\n\n                data=total_world[(total_world['Country_Region']==country)&(total_world['Province_State']==province)&\n                                (total_world['istest']==0)]\n                data_pred=total_world[(total_world['Country_Region']==country)&(total_world['Province_State']==province)&\n                                (total_world['istest']==1)]\n                ax[counter].scatter(data['days'].values,data['ConfirmedCases'].values,color='blue',label='true')\n                ax[counter].scatter(data_pred['days'].values,data_pred['pred_cc'].values,color='red',label='predicted')\n                ax[counter].title.set_text('{} {}'.format(country,province))\n                ax[counter].legend()\n                counter+=1\n        \n        \n    \nplt.show()","b66d5c80":"zz=total_world[total_world.istest==1][['ForecastId','pred_cc','pred_f']].astype(int)\nzz.columns=['ForecastId','ConfirmedCases','Fatalities']\nzz.to_csv('submission.csv',index=False)","090600c6":"## Total Confirmed Cases plot","2049717e":"## Importing ","138c7d03":"## Non-Leaky training and visualization(top 10) of predictions ","988a130c":"## Fatality vs Confirmed Cases","77b17319":"## Current standing of countries","ff0a7705":"## Distribution of Days it took from 100 cases to 1000","4e53da95":"## Number of Cases per million population"}}