{"cell_type":{"06519281":"code","11ab7cae":"code","7e79fb95":"code","bd6ec1dc":"code","d9e36816":"code","fb6bf6f1":"code","4c176ecf":"code","0330f723":"code","da08b9ff":"code","2a6920f0":"code","63f1783e":"code","541a663d":"code","3cdb4c55":"code","c2daccce":"code","078d46be":"code","232597cb":"code","2df04eac":"code","687c1ad6":"code","e33c89f9":"code","65de33f5":"code","7078fb26":"code","cf54f250":"code","aa2a6012":"code","b5b1bb75":"code","827fbc5a":"code","b1da4d55":"code","26565de3":"code","b9b45152":"code","9b5b9d6e":"code","8ff02247":"markdown","fb038a63":"markdown","af16f1e7":"markdown","70f0832b":"markdown","386d8700":"markdown","e8153090":"markdown","4478e3bc":"markdown","76488229":"markdown","b933a3ee":"markdown","0512bcb4":"markdown","310ae0e3":"markdown"},"source":{"06519281":"## \uc2dc\ud5d8\ud658\uacbd \uc138\ud305 (\ucf54\ub4dc \ubcc0\uacbd X)\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\ndef exam_data_load(df, target, id_name=\"\", null_name=\"\"):\n    if id_name == \"\":\n        df = df.reset_index().rename(columns={\"index\": \"id\"})\n        id_name = 'id'\n    else:\n        id_name = id_name\n    \n    if null_name != \"\":\n        df[df == null_name] = np.nan\n    \n    X_train, X_test = train_test_split(df, test_size=0.2, random_state=2021)\n    \n    y_train = X_train[[id_name, target]]\n    X_train = X_train.drop(columns=[target])\n\n    \n    y_test = X_test[[id_name, target]]\n    X_test = X_test.drop(columns=[target])\n    return X_train, X_test, y_train, y_test \n    \ndf = pd.read_csv(\"..\/input\/insurance\/insurance.csv\")\nX_train, X_test, y_train, y_test = exam_data_load(df, target='charges')\n\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","11ab7cae":"X_train.head()","7e79fb95":"y_train.head()","bd6ec1dc":"y_train['charges'].hist()","d9e36816":"X_train.isnull().sum()","fb6bf6f1":"X_test.isnull().sum()","4c176ecf":"# \uacb0\uce21\uce58 \uc5ec\ubd80, \uc790\ub8cc\ud615 \ud30c\uc545\ud558\uae30\nX_train.info()","0330f723":"# \ub370\uc774\ud130\uc758 \ud3c9\uade0, \ud45c\uc900\ud3b8\ucc28, \ucd5c\ub300\uac12, \ucd5c\uc18c\uac12, \uc0ac\ubd84\uc704\uc218 \ubcf4\uae30\ndf.describe()","da08b9ff":"X_train.select_dtypes(\"object\").columns","2a6920f0":"# Train ['sex', 'smoker', 'region']\ncols = X_train.select_dtypes('object').columns\n\nfor col in cols:\n    print('\\n=====', col, '=====')\n    print('[train]')\n    print(X_train[col].value_counts())\n    print('[test]')\n    print(X_test[col].value_counts())","63f1783e":"X_train = pd.get_dummies(X_train, columns = cols)\nX_test = pd.get_dummies(X_test, columns = cols)","541a663d":"X_train.head(2)","3cdb4c55":"y_train['charges'].hist()","c2daccce":"y_train['charges'] = np.log1p(y_train['charges'])","078d46be":"y_train['charges'].hist()","232597cb":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train['bmi'] = scaler.fit_transform(X_train[['bmi']])\nX_test['bmi'] = scaler.transform(X_test[['bmi']])","2df04eac":"# \ub098\uc774\ub97c 10\ub300, 20\ub300, 30\ub300\ub85c \uad6c\ubd84\ud558\uae30 \uc704\ud574 10\uc744 \ub098\ub208 \ubaab \uac12\ub9cc \uad6c\ud568\nX_train['age'] = X_train['age'].apply(lambda x: x\/\/10)\nX_test['age'] = X_test['age'].apply(lambda x: x\/\/10)","687c1ad6":"X_train.head(3)","e33c89f9":"target = y_train['charges']\nX_train = X_train.drop('id', 1)","65de33f5":"from sklearn.model_selection import train_test_split\nX_tr, X_val, y_tr, y_val = train_test_split(X_train, target, test_size=0.15, random_state=2022)\nX_tr.shape, X_val.shape, y_tr.shape, y_val.shape","7078fb26":"from sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor()\nrf.fit(X_tr, y_tr)\npred = rf.predict(X_val)","cf54f250":"from sklearn.metrics import mean_squared_error\ndef rmse2(y_true, y_pred):\n    return np.sqrt(mean_squared_error(y_true, y_pred))\n\nrmse2(y_val, pred)","aa2a6012":"def rmse(y_true, y_pred):\n    return np.sqrt(np.mean((y_true-y_pred)**2))\n\nrmse(y_val, pred)","b5b1bb75":"from xgboost import XGBRegressor\n\nxgb = XGBRegressor()\nxgb.fit(X_tr, y_tr)\npred = xgb.predict(X_val)","827fbc5a":"rmse2(y_val, pred)","b1da4d55":"rf.fit(X_train, y_train['charges'])\npred = rf.predict(X_test.drop('id',1))","26565de3":"pred = np.exp(pred)\noutput = pd.DataFrame({'id': y_test['id'], 'charges':pred})\noutput.head()","b9b45152":"output.to_csv(\"000000.csv\", index=False)","9b5b9d6e":"rmse(y_test['charges'], pred)","8ff02247":"# Preprocessing","fb038a63":"## Train-Validation Split","af16f1e7":"## Scaling\n\nScaling\uc774\ub780 \ubcc0\uc218\uc758 \ub2e8\uc704\ub97c \uc870\uc815\ud558\uae30 \uc704\ud574 \ubcc0\uc218\ub97c \ubcc0\ud658\ud558\ub294 \uc791\uc5c5\uc744 \ub9d0\ud569\ub2c8\ub2e4. \ub300\ud45c\uc801\uc778 scaling\uc5d0\ub294 \ud45c\uc900\ud654(Standardization)\uc640 \uc815\uaddc\ud654(Normalization)\uac00 \uc788\ub294\ub370, \uac01\uac01\uc758 \uc6a9\uc5b4\ub294 \ub2e4\uc74c\uc758 \ucc28\uc774\uac00 \uc788\ub2e4\uace0 \ud569\ub2c8\ub2e4.\n\n* \uc815\uaddc\ud654(Normalization)\ub780 \ubcc0\uc218\uc758 \ubc94\uc704\ub97c $[0, 1]$ \uc0ac\uc774\ub85c \uc62e\uae30\ub294 \uc791\uc5c5\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 \uc8fc\ub85c \uc0ac\uc6a9\ud558\ub294 Scikit-learn \ud328\ud0a4\uc9c0\ub85c\ub294 MinMaxScaler\uac00 \uc788\uc2b5\ub2c8\ub2e4. MinMaxScaler\ub97c \uc218\uc2dd\uc73c\ub85c \uc4f0\uba74 \uc544\ub798\uc640 \uac19\uc740\ub370, \uc5ec\uae30\uc11c $X$\uac00 \uac1c\ubcc4 \ubcc0\uc218, $X_{min}$\uc774 \ubcc0\uc218\uc758 \ucd5c\uc19f\uac12, \uadf8\ub9ac\uace0 $X_{max}$\uac00 \ubcc0\uc218\uc758 \ucd5c\ub313\uac12\uc785\ub2c8\ub2e4.\n\n$$ \\frac{X - X_{min}}{X_{max} - X_{min}} $$\n\n* \ud45c\uc900\ud654(Standardization)\ub780 \ubcc0\uc218\ub85c\ubd80\ud130 \ud3c9\uade0\uac12\uc744 \ube7c\uace0, \ub2e4\uc2dc \ubcc0\uc218\uc758 \ud45c\uc900\ud3b8\ucc28\ub85c \ub098\ub204\uc5b4 \uacb0\uacfc\uc801\uc73c\ub85c \ubcc0\uc218\uac00 \ud3c9\uade0 0, \ud45c\uc900\ud3b8\ucc28 1\uc744 \uac16\ub3c4\ub85d \ub9de\ucdb0\uc8fc\ub294 \uc791\uc5c5\uc785\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574 \uc8fc\ub85c \uc0ac\uc6a9\ud558\ub294 Scikit-learn \ud328\ud0a4\uc9c0\ub85c\ub294 StandardScaler\uac00 \uc788\uc2b5\ub2c8\ub2e4. StandardScaler\ub97c \uc218\uc2dd\uc73c\ub85c \uc4f0\uba74 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\n$$ \\frac{X - \\bar{X}}{\\sigma_{X}} $$\n\n\ub2e8, \uc8fc\uc758\ud560 \uc810\uc740 Scikit-learn\uc758 \ud328\ud0a4\uc9c0\ub85c scaling\uc744 \uc9c4\ud589\ud560 \ub54c **Training set\uc5d0\ub9cc fitting\uc744 \ud574\uc8fc\uace0, Test set\uc5d0\ub294 fitting\uc744 \ud574\uc8fc\uba74 \uc548 \ub41c\ub2e4\ub294 \uc810**\uc785\ub2c8\ub2e4.\n\nScikit-learn\uc758 MinMaxScaler\uc640 StandardScaler\uc5d0\ub294 \uac01\uac01 fit, transform, \uadf8\ub9ac\uace0 fit_transform\uc758 \uba54\uc18c\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. StandardScaler\ub97c \uc608\uc2dc\ub85c \ub4e4\uc790\uba74, fit \uba54\uc18c\ub4dc\ub294 \ubcc0\uc218\uc758 \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28\ub97c \ud559\uc2b5\ud558\uace0, transform\uc740 fit\uc5d0\uc11c \ud559\uc2b5\ub41c \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28\uc5d0 \ub530\ub77c\uc11c \uc2e4\uc81c \ubcc0\uc218\ub97c \ubcc0\ud658\ud558\ub294 \uba54\uc18c\ub4dc\uc785\ub2c8\ub2e4. fit_transform\uc740 \uc774 \ub450 \ub2e8\uacc4\ub97c \ud55c \ubc88\uc5d0 \uc218\ud589\ud569\ub2c8\ub2e4. \n\n\ub2e4\ub9cc \uc774\ub54c Test set\uc5d0\ub3c4 fitting\uc744 \ud574\uc8fc\uac8c \ub418\uba74 Training set\uc5d0\ub294 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uc0c8\ub85c\uc6b4 \uc815\ubcf4(Test set\uc758 \ud3c9\uade0\uacfc \ud45c\uc900\ud3b8\ucc28)\uac00 \uc0ac\uc6a9\ub418\ub294 \uaf34\uc774\uae30 \ub54c\ubb38\uc5d0, \ud559\uc2b5\uc774 \uc81c\ub300\ub85c \uc774\ub8e8\uc5b4\uc9c0\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\ub97c **\ub370\uc774\ud130 \ub204\uc218(Data Leakage)**\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4. \ub530\ub77c\uc11c \ubcf4\ud1b5 scaling\ud560 \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c, training set\uc758 \ub370\uc774\ud130\uc5d0 fit \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uace0, \uadf8\ub807\uac8c fit\ud55c \uacb0\uacfc\ub97c \uac00\uc9c0\uace0 training set\uacfc test set\uc744 \ub3d9\uc2dc\uc5d0 \ubcc0\ud658\uc2dc\ud0b5\ub2c8\ub2e4.","70f0832b":"# Data Explanation\n\n\uc758\ub8cc\ubcf4\ud5d8 \ub370\uc774\ud130\ub97c \ud65c\uc6a9\ud574 \ud55c \uc0ac\ub78c\uc774 \ubcf4\ud5d8\ub8cc\ub97c \uc5bc\ub9c8\ub098 \ub0bc\uc9c0\ub97c \uc608\uce21\ud558\ub294 \ud68c\uadc0 \ubb38\uc81c\ub97c \ub2e4\ub904\ubcf4\uc790. \n\uc704\uc758 input\uc5d0 \ucd94\uac00\ub41c \ub370\uc774\ud130\uc5d0\uc11c \ubc14\ub85c \uc774\uc6a9\ud560 \uc218 \uc788\uace0, \ub370\uc774\ud130\ub97c \uc774\ub8e8\uace0 \uc788\ub294 column\ub4e4\uc5d0 \ub300\ud55c \uc124\uba85\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n\n* Age: \ud53c\ubcf4\ud5d8\uc790\uc758 \ub098\uc774\n* Sex: \ud53c\ubcf4\ud5d8\uc790\uc758 \uc131\ubcc4\n* BMI: \ud53c\ubcf4\ud5d8\uc790\uc758 \uccb4\uc9c8\ub7c9 \uc9c0\uc218 - $\\frac{Weight\\:(kg)}{\\left(Height\\:(m)\\right)^{2}}$\n* Children: \ud53c\ubcf4\ud5d8\uc790\uc758 \uc790\ub140\uc758 \uc218\n* Smoker: \ud761\uc5f0 \uc5ec\ubd80 (yes \/ no)\n* Region: \ud53c\ubcf4\ud5d8\uc790\uac00 \uac70\uc8fc\ud558\ub294 \uc9c0\uc5ed (Southeast \/ Southwest \/ Northeast \/ Northwest)\n* Charges: \ubcf4\ud5d8\ub8cc","386d8700":"## Standard Scaler","e8153090":"## Normal Transformation\n\n\ub2e4\ub9cc, \uc704\uc758 Scaling\uc740 \ub2e8\uc704\ub9cc \ubcc0\ud658\ud574\uc904 \ubfd0 \ubcc0\uc218\uc758 \ubd84\ud3ec \ud615\ud0dc\ub97c \ubc14\uafb8\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc77c\ubc18\uc801\uc73c\ub85c machine learning\uc5d0\uc11c \ud559\uc2b5\uc774 \uc798 \ub418\uae30 \uc704\ud574\uc11c\ub294 \uc124\uba85\ubcc0\uc218\uac00 \ucd5c\ub300\ud55c **\uc815\uaddc\ubd84\ud3ec**\ub97c \ub530\ub97c\uc218\ub85d \uc88b\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc815\uaddc\ubd84\ud3ec\uc758 \ud615\ud0dc\ub97c \ub530\ub974\uc9c0 \uc54a\ub294 \ubcc0\uc218\ub4e4\uc744 \ucd5c\ub300\ud55c \uc815\uaddc\ubd84\ud3ec\uc5d0 \uac00\uae5d\uac8c \ubcc0\uc218\ub97c \ubcc0\ud658\ud558\ub294 \uc791\uc5c5\uc774 \ud544\uc694\ud558\uba70, \uc774\ub97c \uc815\uaddc\ubcc0\ud658(Normal Transformation)\uc774\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4.\n\n\ubcc0\uc218\uac00 \uc815\uaddc\ubd84\ud3ec\uc5d0 \uac00\uae5d\ub3c4\ub85d \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc5d0\ub294 \ubcf4\ud1b5 \uc544\ub798\uc758 3\uac00\uc9c0 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n* \ub85c\uadf8 \ubcc0\ud658: \ubcc0\uc218\uc5d0 \ub85c\uadf8\ub97c \ucde8\ud574\uc8fc\uba74 \uc815\uaddc\ubd84\ud3ec\uc758 \ud615\ud0dc\uc640 \uac00\uae5d\uac8c \ubcc0\ud658\ub418\ub294 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574\uc11c np.log\ub97c \uae30\ubcf8\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\uace0, \ubcc0\uc218\uc5d0 0\uc774 \ud3ec\ud568\ub41c \uacbd\uc6b0 np.log1p\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n    - \ub2e4\ub9cc, \ub85c\uadf8\uc758 \ud2b9\uc131\uc0c1 0\ubcf4\ub2e4 \uc791\uc740 \uac12\uc774 \uc788\ub294 \ubcc0\uc218\uc5d0\ub294 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\n    \n    \n* Power Transformation: \ud2b9\uc815\ud55c \uc218\uc2dd\uc5d0 \ub530\ub77c\uc11c \ubcc0\uc218\ub97c \ubcc0\ud658\ud569\ub2c8\ub2e4. \uc8fc\ub85c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc73c\ub85c\ub294 \uc544\ub798\uc758 \ub450 \uac00\uc9c0\uac00 \uc788\uc73c\uba70, \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc544\ub798\uc758 \ube14\ub85c\uadf8\ub97c \ucc38\uc870\ud558\uba74 \uc88b\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\n    - Box-Cox Transformation:\n    - Yeo-Johnson Transformation\n    - For more: [[\ub370\uc774\ud130 \uc804\ucc98\ub9ac] Yeo Johnson \ubcc0\ud658](https:\/\/m-insideout.tistory.com\/5)\n\n\ub2e4\ub9cc Box-Cox \ubcc0\ud658 \uc5ed\uc2dc 0\ubcf4\ub2e4 \ud070 \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c\ub9cc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc73c\uba70, Yeo-Johnson\uc740 \ubcc0\uc218\uc758 \ubd80\ud638\uc640 \uad00\uacc4 \uc5c6\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\uace0 \ud558\uba70, Scikit-learn\uc5d0\uc11c\ub294 preprocessing\uc758 power_transform \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n* Quantile Transformation: Quantile function\uc774\ub780 \uc218\ud559\uc801\uc73c\ub85c \ud655\ub960\uac12\uc774 \uc8fc\uc5b4\uc9c0\uba74, \ubbf8\ub9ac \uc815\ud55c \ubd84\ud3ec\uc5d0 \ub530\ub77c\uc11c \uadf8\uc5d0 \uc0c1\uc751\ud558\ub294 $x$\uac12\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c \uc911\uc694\ud55c \uc810\uc740 \uc774 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uba74 \ubcc0\uc218\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub4e4\uc758 \uc21c\uc704\uac00 \ub9e4\uaca8\uc9c0\uace0 \ubd84\uc11d\uc790\uac00 \uc9c0\uc815\ud55c \ubd84\ud3ec\uc758 \ud615\ud0dc\ub85c \ubc14\ub010\ub2e4\uace0 \ud569\ub2c8\ub2e4.\n    - Scikit-learn\uc5d0\uc11c\ub294 preprocessing\uc758 QuantileTransformer\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    - \uc6d0\uce59\uc801\uc73c\ub85c quantile function\uc5d0 \ub4e4\uc5b4\uac00\ub294 input\uc740 [0, 1] \uc0ac\uc774\uac00 \ub418\uc5b4\uc57c \ud558\uc9c0\ub9cc, scikit-learn\uc758 QuantileTransformer \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 input\uc758 \uad6c\uac04\uc744 \ub9de\ucdb0\uc8fc\uc9c0 \uc54a\uc544\ub3c4 \ub429\ub2c8\ub2e4.","4478e3bc":"# \uacb0\uacfc \uccb4\uc810","76488229":"## Categorical Variables","b933a3ee":"## Log Transform","0512bcb4":"## label encoding","310ae0e3":"# EDA"}}