{"cell_type":{"bceeff83":"code","525abdc0":"code","af326957":"code","c9f3737c":"code","98683f74":"code","33e33b37":"code","0c3154bc":"code","5165fb03":"code","14c00510":"code","af25ca7f":"code","c08f3414":"code","08822f55":"code","3accc821":"code","62b5744a":"code","c76db028":"code","e935a8ee":"code","75375762":"code","2a496471":"code","ec31fe20":"code","edcf5362":"code","efda830e":"code","39ec1983":"code","9dd1571e":"code","9906b743":"code","e18f4173":"code","ac1483ae":"code","9f821efc":"code","fee147e6":"code","687f84d6":"code","87ba3a26":"code","ca71748f":"code","761fc183":"code","8664aea2":"code","5ddd2b2e":"code","0cf9c6cf":"code","580b5032":"code","a2d3399f":"code","6fa99307":"code","66597c8d":"code","0399389b":"code","b5079505":"markdown","d68f9dff":"markdown","90ce17ef":"markdown"},"source":{"bceeff83":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","525abdc0":"data = pd.read_csv('\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv')","af326957":"data","c9f3737c":"data.isnull().sum()\n","98683f74":"data.drop(columns=[\"CustomerID\"],inplace=True)","33e33b37":"data","0c3154bc":"nom_col =[0]","5165fb03":"from sklearn.preprocessing import OneHotEncoder , OrdinalEncoder\nfrom sklearn.compose import make_column_transformer\nfrom sklearn import set_config\ntrans = make_column_transformer((OneHotEncoder(sparse=False),nom_col)\n                                ,remainder='passthrough')   #ask\nset_config(display='diagram')\n","14c00510":"from sklearn.cluster import KMeans\nkm = KMeans(n_clusters=2)\nkm\n","af25ca7f":"from sklearn.pipeline import make_pipeline\npipe=make_pipeline(trans,km)\npipe\n","c08f3414":"pipe.fit(data)","08822f55":"km.labels_","3accc821":"data['Gender']= pd.get_dummies(data.Gender,drop_first = True)\nkm.fit(data)","62b5744a":"data.head()","c76db028":"#for k in K:\n   # km=KMeans(n_clusters=k).fit(data)\n    #km.fit(data)","e935a8ee":"km.labels_","75375762":"km.cluster_centers_","2a496471":"km.n_iter_","ec31fe20":"X=data","edcf5362":"\nfrom sklearn.cluster import KMeans\nfrom sklearn import metrics\nfrom scipy.spatial.distance import cdist\nimport numpy as np\nimport matplotlib.pyplot as plt","efda830e":"distortions = []\ninertias = []\nmapping1 = {}\nmapping2 = {}\nK = range(1, 10)\n \nfor k in K:\n    # Building and fitting the model\n    kmeanModel = KMeans(n_clusters=k).fit(X)\n    kmeanModel.fit(X)\n \n    distortions.append(sum(np.min(cdist(X, kmeanModel.cluster_centers_,\n                                        'euclidean'), axis=1)) \/ X.shape[0])\n    inertias.append(kmeanModel.inertia_)\n \n    mapping1[k] = sum(np.min(cdist(X, kmeanModel.cluster_centers_,\n                                   'euclidean'), axis=1)) \/ X.shape[0]\n    mapping2[k] = kmeanModel.inertia_","39ec1983":"for key, val in mapping1.items():\n    print(f'{key} : {val}')","9dd1571e":"plt.plot(K, distortions, 'bx-')\nplt.xlabel('Values of K')\nplt.ylabel('Distortion')\nplt.title('The Elbow Method using Distortion')\nplt.show()","9906b743":"for key, val in mapping2.items():\n    print(f'{key} : {val}')","e18f4173":"plt.plot(K, inertias, 'bx-')\nplt.xlabel('Values of K')\nplt.ylabel('Inertia')\nplt.title('The Elbow Method using Inertia')\nplt.show()","ac1483ae":"range_n_clusters = [2, 3, 4, 5, 6, 7, 8]\nfrom sklearn.metrics import silhouette_score\nsilhouette_avg = []\n\nfor num_clusters in range_n_clusters:\n\n \n # initialise kmeans\n kmeans = KMeans(n_clusters=num_clusters)\n kmeans.fit(data)\n cluster_labels = kmeans.labels_\n \n # silhouette score\n silhouette_avg.append(silhouette_score(data, cluster_labels))\nplt.plot(range_n_clusters,silhouette_avg,'bx-')\nplt.xlabel('Values of K') \nplt.ylabel('Silhouette score') \nplt.title('Silhouette analysis For Optimal k')\nplt.show()","9f821efc":"range_n_clusters = [2, 3, 4, 5, 6, 7, 8]\nfrom sklearn.metrics import silhouette_score\nsilhouette_avg = []\n\nfor num_clusters in range_n_clusters:\n\n \n # initialise kmeans\n kmeans = KMeans(n_clusters=num_clusters)\n kmeans.fit(data)\n cluster_labels = kmeans.labels_\n \n # silhouette score\n silhouette_avg.append(silhouette_score(data, cluster_labels))\nplt.barh(range_n_clusters,silhouette_avg)\nplt.xlabel('Values of K') \nplt.ylabel('Silhouette score') \nplt.title('Silhouette analysis For Optimal k')\nplt.show()","fee147e6":"from sklearn.cluster import AgglomerativeClustering\nimport scipy.cluster.hierarchy as shc\ndend = shc.dendrogram(shc.linkage(data,method='ward'))","687f84d6":"Ag = AgglomerativeClustering(n_clusters = 5)\npipe_Ag = make_pipeline(trans,Ag)\npipe_Ag","87ba3a26":"pipe_Ag.fit(data)\n","ca71748f":"from sklearn.cluster import DBSCAN\nDb = DBSCAN(6,min_samples = 4)\npipe_Db = make_pipeline(trans,Db)\npipe_Db\n","761fc183":"pipe_Db.fit(data)  \n","8664aea2":"Db.labels_    #-1 is noisy points\n","5ddd2b2e":"Db.labels_.max()\n","0cf9c6cf":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nnew_data = pca.fit_transform(data.iloc[:,1:])\nnew_data","580b5032":"import seaborn as sns\nsns.jointplot(new_data[0],new_data[1])","a2d3399f":"sns.pairplot(data)","6fa99307":"pca.explained_variance_ratio_","66597c8d":"from sklearn.decomposition import PCA\n\npca=PCA(n_components=2)\npc=pca.fit_transform(data)\n\npdf=pd.DataFrame(data=pc,columns=['principal component 1','principal component 2'])\ntarget=pd.DataFrame(km.labels_,columns=['target'])\ndata=pd.concat([pdf,target],axis=1)\ndata.head()","0399389b":"import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize = (8,8))\nax = fig.add_subplot(1,1,1) \nax.set_xlabel('Principal Component 1', fontsize = 15)\nax.set_ylabel('Principal Component 2', fontsize = 15)\nax.set_title('Visualizing', fontsize = 20)\ntargets = [0,1]\ncolors = ['r', 'g']\nfor target, color in zip(targets,colors):\n    indicesToKeep = data['target'] == target\n    ax.scatter(data.loc[indicesToKeep, 'principal component 1']\n           , data.loc[indicesToKeep, 'principal component 2']\n           , c = color\n           , s = 50)\nax.legend(targets)\nax.grid()","b5079505":"# Inertia","d68f9dff":"#silhouette score","90ce17ef":"# Distortion"}}