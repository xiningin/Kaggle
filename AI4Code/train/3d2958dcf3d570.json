{"cell_type":{"b16d9e0a":"code","ab0f462c":"code","3453ff60":"code","22c0ff19":"code","b945d7a9":"code","e4e1d063":"code","cf0fe682":"code","cefd9f53":"code","84dda733":"code","a93e0740":"code","25dbcb7e":"code","80a488ad":"code","ff8f34b5":"code","2cfaea80":"code","8ff21cad":"code","22ea9086":"code","16bf45a9":"code","1ec2be44":"code","233eda95":"code","66a5a15b":"code","fccb3825":"code","2c1c61cc":"code","b6b2da41":"code","307c5d64":"code","50d5129b":"code","af4bad8e":"code","e8a63a32":"code","7671a971":"code","a1525089":"code","c394b935":"code","dfa9f447":"code","49057d69":"code","1a132225":"code","3f81ba15":"code","216de2ad":"code","d060b7ab":"code","535fe72f":"code","55e890c2":"code","0df0223f":"code","a638c595":"code","02486e92":"code","53cbfb7f":"code","34e02b69":"code","9c89081d":"code","c6832e02":"code","ff134d31":"code","314fb497":"code","2ec9b89d":"code","ded30b12":"code","2c893608":"code","3118d56a":"code","ec1e8dad":"code","1daeb396":"code","2f8688ab":"code","77387aff":"code","512dde50":"code","63658476":"code","add6772f":"code","e275fb61":"code","3ac40a6f":"code","c8bb7c27":"code","d2378c7e":"code","317c150f":"code","02c3eb1c":"code","52ea4371":"code","fae89fac":"code","0152ff8d":"code","a8f302ee":"markdown","f068986f":"markdown","b538b172":"markdown","d082c418":"markdown","6cd36faf":"markdown","4c77cd38":"markdown","2f08c7b3":"markdown","86a7e2d5":"markdown","a284a111":"markdown","37fc4056":"markdown","cc5710a1":"markdown","df065dd7":"markdown","9471ae30":"markdown","70405e40":"markdown","f6143b67":"markdown","5b65bef9":"markdown","72cc4d50":"markdown","f6863817":"markdown"},"source":{"b16d9e0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ab0f462c":"import matplotlib.colors as mcolors\n\nimport datetime \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n#plt.style.use('seaborn')\n%matplotlib inline\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n","3453ff60":"covid_data=pd.read_csv(\"..\/input\/covid19-saudiarabia\/saudi_covid19_places.csv\")","22c0ff19":"covid_data.tail()","b945d7a9":"print(covid_data.size)","e4e1d063":"covid_data.head()","cf0fe682":"covid_data.shape","cefd9f53":"covid_data.columns","84dda733":"covid_data['DateTime']","a93e0740":"covid_data['DateTime'].dtype","25dbcb7e":"covid_data['Date']=pd.to_datetime(covid_data['DateTime'], format = \"%Y-%m-%d \")","80a488ad":"covid_data['Date'].head()","ff8f34b5":"# missing value check\nmissing_values_count = covid_data.isnull().sum()\nprint(missing_values_count)","2cfaea80":"covid_data.describe()","8ff21cad":"import plotly.express as px\n# Top 50 cities with highest confirmed cases\ncovid_city_top50=covid_data.sort_values(\"Confirmed\",ascending=False).head(50)\n\nfig = px.bar(covid_city_top50, \n             x=\"Place_EN\",\n             y=\"Confirmed\",\n             orientation='v',\n             height=800,\n             title='Top 50 cities with COVID19 Confirmed Cases',\n            color='Place_EN')\nfig.show()","22ea9086":"import plotly.express as px\n# Top 50 cities with highest Recovered \ncovid_city_top50=covid_data.sort_values(\"Recovered\",ascending=False).head(50)\n\nfig = px.bar(covid_city_top50, \n             x=\"Place_EN\",\n             y=\"Recovered\",\n             orientation='v',\n             height=800,\n             title='Top 50 cities with COVID19 Recovered Cases',\n            color='Place_EN')\nfig.show()","16bf45a9":"import plotly.express as px\n# Top 50 cities with highest Deaths \ncovid_city_top50=covid_data.sort_values(\"Deaths\",ascending=False).head(50)\n\nfig = px.bar(covid_city_top50, \n             x=\"Place_EN\",\n             y=\"Deaths\",\n             orientation='v',\n             height=800,\n             title='Top 50 cities with COVID19 Deaths Cases',\n            color='Place_EN')\nfig.show()","1ec2be44":"# Set the width and height of the figure\nplt.figure(figsize=(20,15))\n\n# Add title\nplt.title(\"Cumulative cases by date\")\n\n# Line chart showing daily streams of 'Cases'\nsns.lineplot(data=covid_data['Confirmed'],color='purple', label=\"Confirmed\")\nsns.lineplot(data=covid_data['Deaths'],color='red', label=\"Deaths\", linestyle='--')\nsns.lineplot(data=covid_data['Recovered'],color='green', label=\"Recovered\")\n\n# Add label for horizontal axis\nplt.xlabel(\"DateTime\")\nplt.ylabel(\"COVID-19 cases\")\nplt.show()\n","233eda95":"boxplot=covid_data.boxplot(grid=False, rot=45, figsize=(10,8))\nboxplot","66a5a15b":"boxplot=covid_data.boxplot(grid=False, column=['Recovered'],figsize=(10,8))\nboxplot","fccb3825":"\nQ1=covid_data['Recovered'].quantile(0.25)\nQ3=covid_data['Recovered'].quantile(0.75)\nprint(Q1, '   ', Q3)\n#THE Result\n# Q1 is 25% \n# Q3 is 75% ","2c1c61cc":"#interquartile range (IQR)\nIQR= Q3-Q1\nprint(\"interquartile range is \", IQR)","b6b2da41":"minimum=Q1 - 1.5*IQR\nmaximum=Q3 + 1.5*IQR\nprint ( \"minimum is \", minimum,'     ', \"and \",\"maximum is \",maximum )","307c5d64":"#covid_data['Confirmed_outlier', 'Deaths_outlier','Active_outlier']=False\ncovid_data['Recovered_outlier']=False","50d5129b":"\nfor index, row in covid_data.iterrows():\n   if row ['Recovered']> maximum:\n     covid_data.at[index,'Recovered_outlier']=True","af4bad8e":"covid_data['Recovered_outlier'].sum()","e8a63a32":"mean=covid_data['Recovered_outlier'].mean()\nmean","7671a971":"for index, row in covid_data.iterrows():\n    if row ['Recovered_outlier']==True:\n        covid_data.at[index,'Recovered']=mean","a1525089":"boxplot2=covid_data.boxplot(grid=False, fontsize=15, column=['Recovered'], figsize=(10,8))\nboxplot2","c394b935":"Q1_confirmed=covid_data['Confirmed'].quantile(0.25)\nQ3_confirmed=covid_data['Confirmed'].quantile(0.75)\nprint(Q1_confirmed, '   ', Q3_confirmed)\n#THE Result\n# Q1 is 25% \n# Q3 is 75% ","dfa9f447":"#interquartile range (IQR)\nIQR_confirmed= Q3_confirmed-Q1_confirmed\nprint(\"interquartile range is \", IQR_confirmed)","49057d69":"minimum_confirmed=Q1_confirmed - 1.5*IQR_confirmed\nmaximum_confirmed=Q3_confirmed + 1.5*IQR_confirmed\nprint ( \"minimum is \", minimum_confirmed,'     ', \"and \",\"maximum is \",maximum_confirmed )","1a132225":"#_confirmed\n#covid_data['Confirmed_outlier', 'Deaths_outlier','Active_outlier']=False\ncovid_data['Confirmed_outlier']=False\n\nfor index, row in covid_data.iterrows():\n   if row ['Confirmed']> maximum:\n     covid_data.at[index,'Confirmed_outlier']=True","3f81ba15":"sum__confirmed=covid_data['Confirmed_outlier'].sum()\nsum__confirmed","216de2ad":"mean_confirmed=covid_data['Confirmed_outlier'].mean()\nmean_confirmed","d060b7ab":"for index, row in covid_data.iterrows():\n    if row ['Confirmed_outlier']==True:\n        covid_data.at[index,'Confirmed']=mean_confirmed","535fe72f":"boxplot_confirmed=covid_data.boxplot(grid=False, fontsize=15, column=['Confirmed'], figsize=(10,8))\nboxplot_confirmed","55e890c2":"#outliers = covid_data['Confirmed','Deaths', 'Recovered','Active'] \n","0df0223f":"###################################################","a638c595":"#Grouping different cases as per the date\ncovid_sa = covid_data.groupby(['Date'])[['Confirmed','Deaths','Recovered', 'Active']].sum()\ncovid_sa","02486e92":"#Grouping different cases as per the date\ncovid_sa.describe()                                     ","53cbfb7f":"covid_sa.plot(kind='line', figsize=(20,8))\nplt.ylabel(\"Number of Cases\")\n","34e02b69":"total_=covid_data['Confirmed'].sum()\ntotal_","9c89081d":"total_=covid_data['Recovered'].sum()\ntotal_","c6832e02":"total_=covid_data['Deaths'].sum()\ntotal_","ff134d31":"###&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&\nprint('&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&')","314fb497":"from fbprophet import Prophet","2ec9b89d":"model2 = Prophet()","ded30b12":"#interval_width=0.95, yearly_seasonality=True, weekly_seasonality=True, changepoint_prior_scale=2\n#model2.add_seasonality(name='monthly', period=30.5, fourier_order=5, prior_scale=0.02)","2c893608":"cases=covid_sa.reset_index()\ncases.head()","3118d56a":"#[['Date''Confirmed','Deaths','Recovered', 'Active'\ncomfired_case=cases[['Date','Confirmed']]\nrecovered_cases=cases[['Date','Recovered']]\ndeath_cases=cases[['Date','Deaths']]\nActive_cases=cases[['Date','Active']]\n","ec1e8dad":"#Recovered\nrecovered_cases","1daeb396":"death_cases","2f8688ab":"\ncomfired_cases.rename(columns={'Date':'ds','Confirmed':'y'}, inplace=True)\n\n","77387aff":"#2\n\ntrain2=comfired_cases[:40]\ntest2=comfired_cases[40:]\ntrain2.head()","512dde50":"#Confirmed\ntrain2.tail()","63658476":"#fit fp model\nmodel2.fit(train2)","add6772f":"#dates_in_future2= model2.make_future_dataframe(periods=190)\ndates_in_future2= model2.make_future_dataframe(periods=195)\ndates_in_future2.tail()","e275fb61":"predicted2=model2.predict(dates_in_future2)","3ac40a6f":"model2.plot(predicted2)\nplt.title(\"Number of death cases over time\")\nplt.xlabel('death cases for coming days')\nplt.ylabel('Number of death cases')","c8bb7c27":"#observe covid 19 separately: Daily yearly and weekly seasonality.\nmodel2.plot_components(predicted2)","d2378c7e":"#predicted\npredicted2.tail()","317c150f":"predicted2[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","02c3eb1c":"#compares to  actual values using a few different metrics - R-Squared and Mean Squared Error (MSE).\nmetric_covid2 = predicted2.set_index('ds')[['yhat']].join(comfired_cases.set_index('ds').y).reset_index()\nmetric_covid2.tail()\n","52ea4371":"#11\nmetric_covid2.dropna(inplace=True)\nmetric_covid2.tail()","fae89fac":"\nprint ('R-Squared value: ',r2_score(metric_covid2.y, metric_covid2.yhat))\nprint ('Mean Square Error value: ',mean_squared_error(metric_covid2.y, metric_covid2.yhat))\nprint ('Mean Absolute Error value: ',mean_absolute_error(metric_covid2.y, metric_covid2.yhat))","0152ff8d":"y = metric_covid2.y.values\ny_pred = metric_covid2.yhat.values\n# plot expected vs actual\nplt.plot(metric_covid2.y, label='Actual')\nplt.plot(metric_covid2.yhat, label='Predicted')\nplt.title('Comparison between Actual and predicted value')\nplt.legend()\nplt.show()","a8f302ee":"covid_ksa.set_index('ds').y.plot(kind='line', figsize=(20,8))","f068986f":"predicted.tail()","b538b172":"#Time Series for Forecasting\nfrom fbprophet import Prophet\n# Initialize the Model\ndeath_model = Prophet(daily_seasonality=True)","d082c418":"metric_covid.tail()","6cd36faf":"death_model.plot_components(predicted);\n","4c77cd38":"from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nprint ('R-Squared value: ',r2_score(metric_covid.y,metric_covid.yhat))\nprint ('Mean Square Error value: ',mean_squared_error(metric_covid.y, metric_covid.yhat))\nprint ('Mean Absolute Error value: ',mean_absolute_error(metric_covid.y, metric_covid.yhat))","2f08c7b3":"#fit fp model\ndeath_model.fit(covid_ksa)","86a7e2d5":"covid_ksa=covid_ksa.rename(columns={'Date':'ds','Deaths':'y'})\ncovid_ksa.tail()","a284a111":"covid_ksa=covid_data.reset_index()\ncovid_ksa.head()","37fc4056":"recovered_cases","cc5710a1":"predicted = death_model.predict(future)","df065dd7":"metric_covid =predicted.set_index('ds')[['yhat']].join(covid_ksa.set_index('ds').y).reset_index()\n","9471ae30":"death_model.plot(predicted);","70405e40":"#53\nfuture = death_model.make_future_dataframe(periods=53)\nfuture.tail()\n","f6143b67":"covid_ksa[['ds', 'y']].tail()","5b65bef9":"metric_covid.dropna(inplace=True)\nmetric_covid.tail()","72cc4d50":"y = metric_covid.y.values\ny_pred = metric_covid.yhat.values\n\n# plot expected vs actual\nplt.figure(figsize=(20,18))\nplt.plot(metric_covid.y, label='Actual')\nplt.plot(metric_covid.yhat, label='Predicted')\nplt.title('Comparison between Actual and predicted value')\nplt.legend()\nplt.show()","f6863817":"predicted[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()"}}