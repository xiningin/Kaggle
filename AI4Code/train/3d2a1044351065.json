{"cell_type":{"12910d30":"code","236d2b78":"code","72cb1dd4":"code","4816cbe0":"code","434f87ed":"code","baa94c83":"code","813abb78":"code","6e14a461":"code","66310ed0":"code","4f6dc0f4":"code","6b8f625d":"code","8b467102":"code","de6ea593":"code","70d56c88":"markdown","628db01a":"markdown","d958e496":"markdown","0fc157d4":"markdown","0ec68a68":"markdown","c3ed7767":"markdown"},"source":{"12910d30":"import numpy as np \nimport pandas as pd\nimport tensorflow as tf\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","236d2b78":"df = pd.read_csv('..\/input\/churn-predictions-personal\/Churn_Predictions.csv')\ny = df.iloc[:,13].values\nX = df.iloc[:, 3:13].values","72cb1dd4":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nLabelEncoder_X_1 = LabelEncoder()\nX[:,1] = LabelEncoder_X_1.fit_transform(X[:,1])\n\nLabelEncoder_X_2 = LabelEncoder()\nX[:,2] = LabelEncoder_X_2.fit_transform(X[:,2])\n\none_hot = OneHotEncoder()\none_hot_encoder = ColumnTransformer(transformers=[('one_hot', one_hot,[1])],remainder='passthrough')\nX = one_hot_encoder.fit_transform(X)","4816cbe0":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=0)","434f87ed":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.fit_transform(X_test)","baa94c83":"# Couche d'entrer\nmodel = tf.keras.Sequential(tf.keras.layers.Dense(units=512,\n                                  kernel_initializer = \"uniform\",\n                                  activation = \"relu\",\n                                  input_dim = 12))\n# On ajoute une couche cach\u00e9\nmodel.add(tf.keras.layers.Dense(units=512,\n                                kernel_initializer = \"uniform\",\n                                activation = \"relu\"))\nmodel.add(tf.keras.layers.Dense(units=1,\n                                  kernel_initializer = \"uniform\",\n                                  activation = \"sigmoid\"))","813abb78":"model.compile(optimizer=\"adam\", loss=\"binary_crossentropy\", metrics=[\"accuracy\"])","6e14a461":"model.fit(X_train, y_train, batch_size=25, epochs=500)","66310ed0":"# Predicting the Test set results\ny_pred = model.predict(X_test)\ny_pred = (y_pred > 0.5)","4f6dc0f4":"from sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","6b8f625d":"print(cm)","8b467102":"# Evaluate\ndef build_classifier():\n    classifier = Sequential()\n    classifier.add(Dense(units = 512, kernel_initializer = 'uniform', activation = 'relu', input_dim = 11))\n    classifier.add(Dense(units = 512, kernel_initializer = 'uniform', activation = 'relu'))\n    classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n    classifier.compile(optimizer = \"adam\", loss = 'binary_crossentropy', metrics = ['accuracy'])\n    return classifier","de6ea593":"# Evaluate\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nclassifier = KerasClassifier(build_fn = build_classifier, batch_size = 25, epochs = 500)\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, \n                             cv = 10, n_jobs = -1)\nmean = accuracies.mean()\nvariance = accuracies.std()","70d56c88":"## mod\u00e9lisation","628db01a":"## Pr\u00e9paration des donn\u00e9es.","d958e496":"### Feature scaling","0fc157d4":"### S\u00e9paration de donn\u00e9es de test et training set","0ec68a68":"# Pr\u00e9diction par r\u00e9seau de neurones.\n\n### Demarche:\n*   Definir un objectif mesurable : \n> Objectif : Pr\u00e9dire si un client X va quitter la banque ou pas.\\\n> M\u00e9trique : F1 -> 50% et Recall -> 70%. \\\n> Pr\u00e9cision : permet de r\u00e9duire au maximum le nombre de faux positifs.\\\n> Recall (sensibilit\u00e9) : permet de r\u00e9duire au maximum le nombre de faux n\u00e9gatifs.\\\n> Score F1.\n*   Pr\u00e9paration des donn\u00e9es.\n*   Mettre en place le r\u00e9seau de neuones artificiel.","c3ed7767":"## Evaluation"}}