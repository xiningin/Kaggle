{"cell_type":{"a5286e2c":"code","d1c1fc4f":"code","7f1850cb":"code","105d4949":"code","3468bf6a":"code","ad87c2b6":"code","72fa85a1":"code","7aecd765":"code","57ebc48d":"code","505f9d81":"code","f4e120a6":"code","3a2e1085":"code","6d3d1157":"code","258d7aa3":"code","ceaf6776":"code","c57190e2":"code","a9e93e31":"code","a84a0837":"code","57b5d17f":"markdown","820d18a8":"markdown"},"source":{"a5286e2c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d1c1fc4f":"#importing data science modules\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","7f1850cb":"cereals = pd.read_csv(\"..\/input\/80-cereals\/cereal.csv\")\nprint(cereals)","105d4949":"cereals.info()","3468bf6a":"cereals.head(10)","ad87c2b6":"cereals.tail(10)","72fa85a1":"print(cereals.loc[0,:])","7aecd765":"cereals.loc[:,:]","57ebc48d":"cereals.shape","505f9d81":"cereals.size","f4e120a6":"cereals.index","3a2e1085":"cereals.columns","6d3d1157":"print(cereals.ndim)","258d7aa3":"cereals['mfr'].astype('category')","ceaf6776":"#Memory used by category data type and by normal object data type\ncereals['mfr'].memory_usage","c57190e2":"cereals['mfr'].astype('category').memory_usage","a9e93e31":"#find mean of proteins column\ncereals['protein'].mean()","a84a0837":"#printing name of cereal having more than 13 units of sugar\nprint(cereals['name'][cereals['protein']>13])","57b5d17f":"Using loc function","820d18a8":"***VIEW THE DATA***"}}