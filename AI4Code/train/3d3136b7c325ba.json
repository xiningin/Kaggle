{"cell_type":{"a1aff438":"code","0df99ebe":"code","5f595a6b":"code","64269ec5":"code","a101d9bb":"code","64ad2bd3":"code","3429029b":"code","27328a22":"code","9fff8c2c":"code","6f171e36":"code","68f22418":"code","71cc05b9":"code","6e6e156d":"code","e56dccb6":"code","0502c220":"code","c1170f87":"code","839433df":"code","b82cc738":"code","79592422":"code","b2dc6e7c":"code","b6f31f86":"code","d4aefe9f":"code","bfbef39a":"code","36460abf":"code","815c13f6":"markdown","82b26819":"markdown","96484fd9":"markdown","e732b74b":"markdown","07f56225":"markdown","d6b3f751":"markdown","788855d8":"markdown","1f00ebad":"markdown","1b9321de":"markdown","27e8c28f":"markdown","3d29fa8c":"markdown","9ae724c1":"markdown","d0c713a5":"markdown","787374ef":"markdown","37e70458":"markdown","2ae8b81d":"markdown","8a51de3e":"markdown"},"source":{"a1aff438":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.model_selection import train_test_split\nimport keras\nfrom keras.layers import Dense\nfrom keras.models import Sequential\nfrom tensorflow.keras import backend as K\nimport tensorflow as tf\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0df99ebe":"# To store results\nmodels = []\nvals = []","5f595a6b":"evalData = pd.read_csv('..\/input\/cap-4611-2021-fall-assignment-3\/eval.csv')\ntrainData = pd.read_csv('..\/input\/cap-4611-2021-fall-assignment-3\/train.csv')","64269ec5":"print(evalData.head())\nprint(trainData.head())","a101d9bb":"print('train\\n', trainData.isna().sum())\nprint('eval\\n', evalData.isna().sum())","64ad2bd3":"trainData = trainData.drop(['id','pubchem_id'], axis=1)","3429029b":"print(trainData.describe())\nprint(evalData.describe())","27328a22":"trainData.info()\nevalData.info()","9fff8c2c":"print('Shapes:\\n' + str(trainData.shape) + '\\n' + str(evalData.shape))","6f171e36":"features = trainData.drop('Eat', axis=1)\nlabels = trainData['Eat']\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)","68f22418":"n_cols=X_train.shape[1]","71cc05b9":"print(n_cols)","6e6e156d":"# building the model\nmodel = Sequential() # init sequential model\nmodel.add(Dense(50, activation='relu', input_shape=(n_cols,))) #first layer - any # rows are accept. as input\nmodel.add(Dense(32,activation='relu',input_shape=(n_cols,))) #second\nmodel.add(Dense(1)) #final","e56dccb6":"# fitting the model\nmodel.compile(optimizer='adam',loss='mean_squared_error', metrics=[tf.keras.metrics.RootMeanSquaredError(name='rmse')]) #compiling it\nmodel.fit(X_train,y_train, epochs=100, batch_size=32, validation_split =0.2, callbacks=[tf.keras.callbacks.EarlyStopping(monitor='loss',patience=15),tf.keras.callbacks.ModelCheckpoint(filepath='.\/checkpoint.tf',monitor='val_loss',mode='min',save_best_only=True)])\n\n#verify the model contains info from compiling\nprint(\"Loss function: \" + model.loss)","0502c220":"val1=model.evaluate(X_test,y_test)\nprint(val1)\nvals.append(val1)\nmodels.append(model)","c1170f87":"# Create the new model: model_2\nmodel2 = Sequential()\n\n# Add the first, second, and third hidden layers\nmodel2.add(Dense(50, activation='relu', input_shape=(n_cols,)))\nmodel2.add(Dense(50, activation='relu'))\nmodel2.add(Dense(50, activation='relu'))\n\n# Add the output layer\nmodel2.add(Dense(1))","839433df":"# fitting the model\nmodel2.compile(optimizer='adam',loss='mean_squared_error', metrics=[tf.keras.metrics.RootMeanSquaredError(name='rmse')]) #compiling it\nmodel2.fit(X_train,y_train, epochs=200, batch_size=32, validation_split =0.2, callbacks=[tf.keras.callbacks.EarlyStopping(monitor='loss',patience=15),tf.keras.callbacks.ModelCheckpoint(filepath='.\/checkpoint.tf',monitor='val_loss',mode='min',save_best_only=True)])\n\n#verify the model contains info from compiling\nprint(\"Loss function: \" + model2.loss)","b82cc738":"val2=model2.evaluate(X_test,y_test)\nprint(val2)\nvals.append(val2)\nmodels.append(model2)","79592422":"model3 = Sequential()\n\n# Add the first, second, and third hidden layers\nmodel3.add(Dense(500, activation='relu', input_shape=(n_cols,)))\nmodel3.add(Dense(300, activation='relu'))\nmodel3.add(Dense(50, activation='relu'))\n\n# Add the output layer\nmodel3.add(Dense(1))","b2dc6e7c":"# fitting the model\nmodel3.compile(optimizer='adam',loss='mean_squared_error', metrics=[tf.keras.metrics.RootMeanSquaredError(name='rmse')]) #compiling it\nmodel3.fit(X_train,y_train, epochs=50, batch_size=32, validation_split =0.2, callbacks=[tf.keras.callbacks.EarlyStopping(monitor='loss',patience=15),tf.keras.callbacks.ModelCheckpoint(filepath='.\/checkpoint.tf',monitor='val_loss',mode='min',save_best_only=True)])\n\n#verify the model contains info from compiling\nprint(\"Loss function: \" + model2.loss)","b6f31f86":"val3=model3.evaluate(X_test,y_test)\nprint(val3)\nvals.append(val3)\nmodels.append(model3)","d4aefe9f":"# Determine the best RMSE\nbest_model_index = vals.index(min(vals))\nprint(best_model_index)\nbest_rmse = vals[best_model_index][1]\nprint(best_rmse)","bfbef39a":"X_eval = evalData.drop(['id','pubchem_id'],axis=1)\npredictions = models[best_model_index].predict(X_eval)\npredictions = predictions.reshape(len(predictions),) # reshape for submission\noutput = pd.DataFrame(data = {'id':evalData['id'], 'Eat': predictions})","36460abf":"output.to_csv('submission.csv',index=False)\nprint('Successfully saved\\n')\nprint(output)","815c13f6":"*Make the predictions on the evaluation data*","82b26819":"*Splitting  data into testing data*","96484fd9":"*It appears we aren't missing any data. The data consists of float and integer data types.*","e732b74b":"**Kaggle Username: kevinrwh**","07f56225":"**Loading the Data**","d6b3f751":"**What I may need to add (model...) python version**","788855d8":"*As mentioned in the competition instructions, the first column is the ID, the 1276th is the pubchem ID, and the 1277th (last column) is the energy of activation. The ID and pubchem ID are unneeded. We'll drop them and do the same for the eval data*","1f00ebad":"*Evaluating with the first model*","1b9321de":"*The best model has the lowest root mean squared error value*","27e8c28f":"*Checking for missing data*","3d29fa8c":"*Inspecting the first five rows*","9ae724c1":"*Further data exploration*","d0c713a5":"*A decent rmse but perhaps we can do better.*\n*Lets try adding more nodes per layer*","787374ef":"*Building the third model*\n*Goal is to have more nodes on the first two layers*","37e70458":"*Output for submission*","2ae8b81d":"*Fitting*","8a51de3e":"**Actual Work**"}}