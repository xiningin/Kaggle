{"cell_type":{"87a398d5":"code","ee15e4a4":"code","4ab20ce7":"code","19e66315":"code","70a1db35":"code","e14ec036":"code","7a09e875":"code","390020e0":"code","61085959":"code","d54c1773":"code","0fda7e5f":"code","5d6555bc":"code","4d126030":"code","7c8eb74f":"code","b274e2fb":"code","ab74556e":"code","390b8a48":"code","8259399f":"code","e71e3314":"code","2ada5702":"code","28d908e2":"code","ced3e870":"code","ade38213":"code","e50d4748":"code","b1e8eb3d":"code","153006ba":"code","8202655e":"code","3a845a3b":"code","81825e2b":"code","54ffea9d":"code","4ba17e14":"code","c839b1df":"code","a7537add":"code","0df1d66a":"code","6f262c06":"code","2c0113df":"code","da5a3f80":"code","46635a4e":"code","9f173914":"code","c32a076b":"code","e80884c9":"code","65cb9e65":"code","b59aab3a":"code","9d54d9e3":"code","6e88be7d":"code","212fd72f":"code","68fc1a1a":"code","a3e136fc":"code","273677cf":"code","c800e20f":"code","2834c933":"code","adb137dc":"code","cd5a36ac":"code","7c985be1":"code","e31e422c":"code","6c602539":"code","4dd7c77c":"code","625d1d05":"code","7d74a131":"code","23693b53":"code","72f7beb0":"code","0aaae57d":"code","871640da":"code","70c90130":"code","761d3824":"code","cfaade17":"code","64ebd387":"code","a2244769":"code","9468c539":"code","419510c4":"markdown","0e93a69f":"markdown","02d71957":"markdown","5a9045e2":"markdown","b47fabee":"markdown","1a060fff":"markdown","676c2741":"markdown","20ed82c1":"markdown","7022d630":"markdown","149acbd5":"markdown","73984d65":"markdown","7dd9c37b":"markdown","4a2f3f51":"markdown","392da46e":"markdown","2ca3fd4b":"markdown","c142e835":"markdown","9c14680e":"markdown","078262f3":"markdown","66bf764f":"markdown","20782c4d":"markdown","8816fc04":"markdown","b15aa88d":"markdown","4ed4c1e5":"markdown","31908c32":"markdown","48ffff1b":"markdown","593aaa7b":"markdown","73af9c6c":"markdown","e3d1429f":"markdown","f9914bd1":"markdown","ed83fcd4":"markdown","68fbed0e":"markdown","4a4ba71e":"markdown","3daa5035":"markdown","95536728":"markdown","182e67e7":"markdown","b5dc5511":"markdown","eb3923ac":"markdown","fac3a76b":"markdown","2d053ac7":"markdown","9c98be9d":"markdown","c1838ee9":"markdown","768ed9ec":"markdown","68d5b01b":"markdown"},"source":{"87a398d5":"import pandas as pd\nimport numpy as np\n\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(style=\"ticks\", color_codes=True)\n\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import StratifiedKFold\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.regularizers import l2","ee15e4a4":"seed = 7\nnp.random.seed(seed)","4ab20ce7":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\ntrain_copy = train.copy()\ntest_copy = test.copy()\n\nall_data = pd.concat([train, test], sort = False)\n\ntrain.head()","19e66315":"train.info()","70a1db35":"def cat_plot(x, y = 'Survived', kind = 'bar', hue = None, data = train):\n    sns.catplot(x = x, y = y, kind = kind, hue = hue, data = data)\n    \ndef count_plot(x, col = 'Survived', data = train):\n    sns.catplot(x = x, col = col, kind = 'count', data = data)\n    ","e14ec036":"train.groupby('Pclass').Survived.mean()","7a09e875":"cat_plot('Pclass')","390020e0":"train.groupby('Sex').Survived.mean()","61085959":"cat_plot('Sex')","d54c1773":"grid = sns.FacetGrid(data = train, hue = 'Survived', height = 5, aspect = 3)\nplt.xticks(range(0, 81, 5))\ngrid.map(sns.kdeplot, 'Age').add_legend()","0fda7e5f":"train.groupby(['SibSp']).Survived.mean()","5d6555bc":"cat_plot('SibSp')","4d126030":"train.groupby(['Parch']).Survived.mean()","7c8eb74f":"cat_plot('Parch')","b274e2fb":"grid = sns.FacetGrid(data = train, hue = 'Survived', height = 5, aspect = 2)\ngrid.map(sns.kdeplot, 'Fare').add_legend()","ab74556e":"cat_plot('Embarked')","390b8a48":"all_data['Title'] = all_data['Name'].str.extract('([A-Za-z]+)\\.', expand=True)","8259399f":"all_data['Title'].value_counts()","e71e3314":"all_data['Title'].value_counts().plot(kind = 'bar')","2ada5702":"sns.catplot(x = 'Title', y = 'Survived', kind = 'bar', hue = None, data = all_data, aspect = 3)","28d908e2":"mappings = {'Dr':'Respected_Male', 'Col':'Respected_Male', 'Major':'Respected_Male', 'Capt':'Respected_Male',\n            'Mme':'Noble', 'Mlle':'Noble', 'Countess': 'Noble', 'Lady': 'Noble', 'Sir':'Noble',\n            'Ms' : 'Miss', 'Rev': 'Other', 'Jonkheer': 'Other', 'Dona': 'Other', 'Don': 'Other' \n           }\n\nall_data.replace({'Title': mappings}, inplace = True)","ced3e870":"all_data['Title'].value_counts()","ade38213":"sns.catplot(x = 'Title', y = 'Survived', kind = 'bar', hue = None, data = all_data, aspect = 3)","e50d4748":"one_hot_encoding_list = []\none_hot_encoding_list.append('Title')","b1e8eb3d":"all_data['Age'].isnull().sum()","153006ba":"title_grouped = all_data.groupby(['Title'])\n\nfor title in all_data.Title.unique():\n    all_data.loc[(all_data.Age.isnull()) & (all_data.Title == title), 'Age'] = title_grouped.get_group(title).Age.mean()","8202655e":"all_data['AgeBin'] = pd.qcut(all_data['Age'], 5)","3a845a3b":"label = preprocessing.LabelEncoder()\nall_data['AgeBin'] = label.fit_transform(all_data['AgeBin'])\ncat_plot('AgeBin', data = all_data)","81825e2b":"one_hot_encoding_list.append('AgeBin')","54ffea9d":"all_data['FamilySize'] = all_data['SibSp'] + all_data['Parch'] + 1","4ba17e14":"all_data['FamilySize'].value_counts(dropna = False)","c839b1df":"cat_plot('FamilySize', data = all_data)","a7537add":"all_data['Alone'] = 0;\nall_data.loc[all_data['FamilySize'] == 1, 'Alone'] = 1\n\nall_data['SmallFamily'] = 0;\nall_data.loc[(all_data['FamilySize'] > 1) & (all_data['FamilySize'] <= 4), 'SmallFamily'] = 1\n\nall_data['BigFamily'] = 0;\nall_data.loc[all_data['FamilySize'] > 4, 'BigFamily'] = 1","0df1d66a":"all_data.Cabin.describe()","6f262c06":"all_data.Cabin.isnull().sum()","2c0113df":"all_data['HaveCabin'] = 0;\nall_data.loc[all_data['Cabin'].notnull(), 'HaveCabin'] = 1","da5a3f80":"cat_plot('HaveCabin', data = all_data)","46635a4e":"cat_plot('HaveCabin', data = all_data, hue = 'Pclass', kind = 'point')","9f173914":"all_data['AnyoneSurvivedFromGroup'] = 0.5\n                \nfor _, grp_df in all_data.groupby('Ticket'):\n    if (len(grp_df) != 1):\n        for ind, row in grp_df.iterrows():\n            if (row['AnyoneSurvivedFromGroup'] == 0) | (row['AnyoneSurvivedFromGroup']== 0.5):\n                smax = grp_df.drop(ind)['Survived'].max()\n                smin = grp_df.drop(ind)['Survived'].min()\n                passID = row['PassengerId']\n                if (smax == 1.0):\n                    all_data.loc[all_data['PassengerId'] == passID, 'AnyoneSurvivedFromGroup'] = 1\n                elif (smin == 0.0):\n                    all_data.loc[all_data['PassengerId'] == passID, 'AnyoneSurvivedFromGroup'] = 0","c32a076b":"cat_plot('AnyoneSurvivedFromGroup', data = all_data)","e80884c9":"\nall_data[all_data['AnyoneSurvivedFromGroup'] != 0.5]['PassengerId'].count()","65cb9e65":"for _, grp_df in all_data.groupby('Cabin'):\n    if (len(grp_df) != 1):\n        for ind, row in grp_df.iterrows():\n            if (row['AnyoneSurvivedFromGroup'] == 0) | (row['AnyoneSurvivedFromGroup']== 0.5):\n                smax = grp_df.drop(ind)['Survived'].max()\n                smin = grp_df.drop(ind)['Survived'].min()\n                passID = row['PassengerId']\n                if (smax == 1.0):\n                    all_data.loc[all_data['PassengerId'] == passID, 'AnyoneSurvivedFromGroup'] = 1\n                elif (smin == 0.0):\n                    all_data.loc[all_data['PassengerId'] == passID, 'AnyoneSurvivedFromGroup'] = 0","b59aab3a":"all_data[all_data['AnyoneSurvivedFromGroup'] != 0.5]['PassengerId'].count()","9d54d9e3":"cat_plot('AnyoneSurvivedFromGroup', data = all_data)","6e88be7d":"all_data.Fare.isnull().sum()","212fd72f":"pclass_grouped = all_data.groupby(['Pclass'])\n\nfor pclass in all_data.Pclass.unique():\n    all_data.loc[(all_data.Fare.isnull()) & (all_data.Pclass == pclass), 'Fare'] = pclass_grouped.get_group(pclass).Fare.mean()","68fc1a1a":"all_data['FareBin'] = pd.qcut(all_data['Fare'], 4)\nlabel = preprocessing.LabelEncoder()\nall_data['FareBin'] = label.fit_transform(all_data['FareBin'])","a3e136fc":"cat_plot('FareBin', data = all_data)","273677cf":"cat_plot(x= 'Pclass', y ='FareBin', kind = 'point', data = all_data)","c800e20f":"all_data.isnull().sum()","2834c933":"all_data.loc[all_data['Embarked'].isnull(), 'Embarked'] = all_data['Embarked'].mode()[0]","adb137dc":"one_hot_encoding_list.append('Embarked')","cd5a36ac":"all_data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin', 'Age', 'Fare', 'SibSp', 'Parch', 'FamilySize', 'FareBin'], axis = 1, inplace = True)","7c985be1":"all_data.head()","e31e422c":"sex_mappings = {'male': 0,'female': 1}\nall_data['Sex'].replace(sex_mappings, inplace = True)","6c602539":"one_hot_encoding_list","4dd7c77c":"one_hot_encoding_list.append('Pclass')","625d1d05":"all_data = pd.get_dummies(data = all_data, columns = one_hot_encoding_list)","7d74a131":"all_data.head()","23693b53":"train_data = all_data[:len(train)]\ntest_data = all_data[len(train):]","72f7beb0":"X = train_data.iloc[: , 1:].values\ny = train_data.iloc[:, 0].values\n\ntest_data = test_data.iloc[: , 1:]\nX_test = test_data.values\n\nprint(str(X.shape))\nprint(str(X_test.shape))","0aaae57d":"def create_model():\n\n    model = Sequential()\n    model.add(Dense(16, input_dim = X.shape[1], activation = 'relu', kernel_regularizer=l2(0.01)))\n    model.add(Dense(16, activation = 'relu', kernel_regularizer=l2(0.01)))\n    model.add(Dense(1, activation = 'sigmoid'))\n    \n    model.compile(loss='binary_crossentropy', optimizer = 'adam', metrics = ['accuracy'])\n    \n    return model","871640da":"epochs = 150\nmodel = create_model()\nhistory = model.fit(X, y, epochs=epochs, validation_split = 0.2, batch_size=10, verbose = 0)\n\nval_acc = history.history['val_acc']\nacc = history.history['acc']\n\nmax_val_acc_epoch = np.argmax(val_acc) + 1;\nprint(\"Maximum validation accuracy epoch: {}\".format(max_val_acc_epoch))\n\nepochs = range(1, len(acc) + 1)\n\nplt.figure(figsize=(15,12))\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()","70c90130":"num_epochs = max_val_acc_epoch\n\nkfold = StratifiedKFold(n_splits=5, shuffle=True, random_state=seed)\n\ncvscores = []\n\nfor train, test in kfold.split(X, y):\n  model = create_model()\n  history = model.fit(X[train], y[train], epochs=num_epochs, batch_size=10, verbose = 0)\n  scores = model.evaluate(X[test], y[test], verbose=0)\n  print(\"%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n  cvscores.append(scores[1] * 100)\n\nprint(\"%.2f%% (+\/- %.2f%%)\" % (np.mean(cvscores), np.std(cvscores)))","761d3824":"model = create_model()\nhistory = model.fit(X, y, epochs=num_epochs, batch_size=10, verbose = 0)","cfaade17":"prediction = model.predict(X_test)","64ebd387":"submission = pd.DataFrame(test_copy[['PassengerId']])\nsubmission['Survived'] = prediction\nsubmission['Survived'] = submission['Survived'].apply(lambda x: 0 if x < 0.5 else 1)","a2244769":"submission.head()","9468c539":"submission.to_csv('submission.csv', index = False)","419510c4":"### Relationship between \"Parch\" and \"Survived\"","0e93a69f":"### Alone, SmallFamily, BigFamily","02d71957":"No linear relationship, so we will apply one hot encoding to 'AgeBin' too.","5a9045e2":"But the fare information is already captured by Pclass. So, this will be redundant given that we have a fairly small dataset.","b47fabee":"### Relationship between \"Pclass\" and \"Survived\"","1a060fff":"First we will find the best training epoch for our model","676c2741":"We have two missing values in Embarked. Lets fill that up! ","20ed82c1":"### Title","7022d630":"### Age","149acbd5":"There are quite a few missing values in Age column. We will fill these with the average of same titled passeners. Then we will divide age into five bins. Since we have seen affect of age on survival rate changes after every 15 years or so.","73984d65":"### Relationship between \"Embarked\" and \"Survived\"","7dd9c37b":"### Relationship between \"Age\" and \"Survived\"","4a2f3f51":"C has highest chance of survival, but the other two is same.","392da46e":"### Relationship between \"SibSp\" and \"Survived\"","2ca3fd4b":"Let's first remove the columns that have already proven less useful and also columns that we have turned into bins.","c142e835":"### Family Size","9c14680e":"We have 7 numerical columns and 5 non numerical columns. And missing values in 3 columns. We have to convert non numerical columns to numerical columns and fill up the missing values before we fit the dataset into our model. But first, let's see how each of them affects the survival chance of the titanic passengers. \n\n","078262f3":"As we assumed, passenger class has a significant impact on survival rate. Passengers from upper class survived most and passengers from lower class survived less.","66bf764f":"Let's turn rest of the non numerical columns into numerical ones!","20782c4d":"### Anyone Survived From Group","8816fc04":"Most female survived while most male didn't make it! Women and children first? We will have to see.","b15aa88d":"We will replace the less frequently used titles with meaningful categories.","4ed4c1e5":"### Data preaparation","31908c32":"A nice linear relationship!","48ffff1b":"## Build A Simple Neural Network Model","593aaa7b":"### FareBin","73af9c6c":"We fill missing fare with the average fare of Pclass.","e3d1429f":"<h2>Loading Data<\/h2>","f9914bd1":"## Feature Engineering and Data Preparation","ed83fcd4":"## Data Analysis","68fbed0e":"Age doesn't have any linear relationship with survival. But we can break them into few categories -\n\nAge 30 to 57 has no effect of survival\n\nAge under 13 has higer chance of survival\n\nAge 14 to 30 has lower chance of survival\n\nAge above 57 has lower chance of survival","4a4ba71e":"The relationship is not entirely linear with Pclass.","3daa5035":"Also, we will apply one hot encoding to 'Embarked'","95536728":"## Import All The Things","182e67e7":"### Filling Missing Values","b5dc5511":"We all add 'Pclass' to this list too.","eb3923ac":"### HaveCabin","fac3a76b":"### Relationship between \"Fare\" and \"Survived\"","2d053ac7":"### Data Description\n\n**PassengerId:** Unique identifier for each row. It can't have any effect on the outcome.\n\n**Survived:** Survival of the passenger. 0 = No, 1 = Yes\n\n**Pclas:** A proxy for socio-economic status (SES); 1 = Upper, 2 = Middle, 3 = Lower. People with higher social status may have higher survival rate.\n\n**Name:** Name of the passenger. I don't think in its entirety have any effect on that person's survival. But name may carry additional information like title, family name, which may indicate that persons social staus and thus having impact on survival.\n\n**Sex:** Gender may have significant role on survival. \n\n**Age:** Age in years. Old people have lower survival rate or childrens? \n\n**SibSp:**  Number of siblings \/ spouses aboard the Titanic. \n\n**Parch:**  Number of parents \/ children aboard the Titanic. \n\n**Ticket:** Ticket number\n\n**Fare:** Passenger fare. Higher the fare, higher the social class?\n\n**Cabin:** Cabin number\n\n**Embarked:** Port of Embarkation; C = Cherbourg, Q = Queenstown, S = Southampton\n","9c98be9d":"Passengers with more SipSp (larger family) has lower chance of survival. But with no SibSp (traveling alone?) lower the survival chances too. ","c1838ee9":"### Relationship between \"Sex\" and \"Survived\"","768ed9ec":"No obvious pattern here. We will combined above two feature into one to see if family size matters.","68d5b01b":"The relationship is as same as Pclss. Higher fare means higher class, thus higer survival rate."}}