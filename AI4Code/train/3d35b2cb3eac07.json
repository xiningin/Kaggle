{"cell_type":{"d6b7916c":"code","b6c19665":"code","c4a93802":"code","772101b2":"code","bb546c7f":"code","106a15fe":"code","4e7d1425":"code","9afef89c":"code","6eb964e1":"code","9fd24cdd":"code","0e74e0c9":"code","b35f1b23":"code","0752ff54":"code","2b5b6753":"code","fca36a54":"code","0eee14a4":"code","a4321507":"code","1f7605fb":"code","2cce6085":"code","83c0c5ba":"code","7e254094":"code","ec4af0f1":"code","c8a6ea0a":"code","562d2049":"code","ed64f1a4":"code","01a87cec":"markdown","732c1fd3":"markdown","d589658c":"markdown","956c0da8":"markdown","96061584":"markdown","f0cfa778":"markdown","ef74c975":"markdown","02c47af4":"markdown","785e74eb":"markdown","417459e6":"markdown","c47f2475":"markdown"},"source":{"d6b7916c":"# Do all necessary imports here\nimport numpy as np\nimport pandas as pd\nimport os\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_selection import mutual_info_regression\nfrom sklearn.preprocessing import OneHotEncoder,LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier","b6c19665":"# Getting the available files\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","c4a93802":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data","772101b2":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data","bb546c7f":"# Finding features with missing values in train dataset\ncolumns_with_nan_train = train_data.columns[train_data.isna().any()].tolist()\nprint(\"Columns with Missing Values in Train Dataset : \", columns_with_nan_train)","106a15fe":"# Impute mean value to the missing values\ndef impute_missing_data_using_mean(dataframe, columns):\n\n    for col in columns:\n        dataframe[col] = dataframe[col].fillna((dataframe[col].mean()))\n\n    return dataframe\n\n\ntrain_data = impute_missing_data_using_mean(train_data,['Age','Fare'])\ntest_data = impute_missing_data_using_mean(test_data,['Age','Fare'])","4e7d1425":"# train dataset after imputing `Age` and `Cabin` missing values with their mean\ntrain_data","9afef89c":"# plot Age Distribution\n\nplt.figure(figsize=(10,5))\nplt.xlim(0,100)\nplt.title('Age Distribution')\nplt.xlabel('Age')\nplt.ylabel('Number of People')\nsns.histplot(train_data['Age'])\nplt.show()","6eb964e1":"# plot Fare Distribution\n\nplt.figure(figsize=(10,5))\nplt.xlim(0,100)\nplt.title('Fare Distribution')\nplt.xlabel('Fare')\nplt.ylabel('Number of People')\nsns.histplot(train_data['Fare'])\nplt.show()","9fd24cdd":"# Normalizing `Age` and `Fare` columns\ndef normalize(df,feature_list):\n    result = df.copy()\n    for feature_name in feature_list:\n        max_value = df[feature_name].max()\n        min_value = df[feature_name].min()\n        result[feature_name] = (df[feature_name] - min_value) \/ (max_value - min_value)\n    return result\n\ntrain_data = normalize(train_data, ['Age','Fare'])\ntest_data = normalize(test_data, ['Age','Fare'])","0e74e0c9":"# Train Dataset after Normalizing `Age` and `Fare`\ntrain_data","b35f1b23":"survived = train_data.loc[train_data.Survived == 1][\"Survived\"]\nrate_survival = sum(survived)\/len(train_data)\nprint(\"% of people who survived:\", rate_survival)","0752ff54":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nmen = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of women who survived:\", rate_women)\nprint(\"% of men who survived:\", rate_men)","2b5b6753":"# Pearson Corelation\ndef pearson(dataframe):\n    results = dataframe.corr(method='pearson')\n    return results\n\ndef heatmap(dataframe):\n    corr = dataframe.abs().round(2)\n    mask = np.zeros_like(corr)\n    mask[np.triu_indices_from(mask)] = True\n\n    with sns.axes_style(\"white\"):\n        f, ax = plt.subplots(figsize=(6, 6))\n\n        ax = sns.heatmap(corr, cmap=sns.color_palette(\"rocket_r\", as_cmap=True), mask=mask, square=True,\n                         annot=True, annot_kws={\"fontsize\": 8}, linewidths=.5)\n\n\n    plt.show()\n\ncorelation = pearson(train_data)\nheatmap(corelation)","fca36a54":"features = [\"PassengerId\",\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"Embarked\",'Age','Fare']","0eee14a4":"train_data","a4321507":"X = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\ny = train_data[\"Survived\"]","1f7605fb":"X","2cce6085":"X.dtypes","83c0c5ba":"# getting MI Scores\ndef make_mi_scores(X, y):\n    discrete_features = X.dtypes == int\n    discrete_features = discrete_features.drop(labels='PassengerId')\n    X_ = X.drop('PassengerId', 1)\n    mi_scores = mutual_info_regression(X_, y, discrete_features=discrete_features)\n    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X_.columns)\n    mi_scores = mi_scores.sort_values(ascending=False)\n    return mi_scores\n\n# plot MI Scores\ndef plot_mi_scores(scores):\n    scores = scores.sort_values(ascending=True)\n    width = np.arange(len(scores))\n    ticks = list(scores.index)\n    plt.barh(width, scores)\n    plt.yticks(width, ticks)\n    plt.title(\"Mutual Information Scores\")","7e254094":"mi_scores = make_mi_scores(X, y)\n\n# show features with their MI scores\nprint(mi_scores)\n\nplt.figure(dpi=100, figsize=(8, 5))\nplot_mi_scores(mi_scores)","ec4af0f1":"X","c8a6ea0a":"X_test","562d2049":"y","ed64f1a4":"model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Submission was successfully saved!\")\noutput","01a87cec":"## Correlation between features","732c1fd3":"## Exploring Patterns in the dataset","d589658c":"## Selected Feature set for model training","956c0da8":"## Normalize Continous Features","96061584":"We keep the `Embarked` feature for a moment since its data type is not float\/int. And impute values only for `Age` and `Cabin`","f0cfa778":"## Random Forest Classifier","ef74c975":"Continous Features Identified : `Age`, `Fare`","02c47af4":"## Feature Encoding","785e74eb":"## MI Scores","417459e6":"## Import Train & Test Datasets","c47f2475":"## Impute Missing Values"}}