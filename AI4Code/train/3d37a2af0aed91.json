{"cell_type":{"f7100fd8":"code","50f3a57c":"code","60fe3d16":"code","328a5b54":"code","1ec16225":"code","172a0418":"markdown"},"source":{"f7100fd8":"import os\nimport numpy as np\nimport pandas as pd\nfrom shutil import copyfile","50f3a57c":"os.mkdir('.\/images\/')\nalpha = 'a'\nfor i in range(0, 26): \n    os.mkdir('.\/images\/' + alpha)\n    alpha = chr(ord(alpha) + 1)\n\nrootdir = '\/kaggle\/input\/braille-character-dataset\/Braille Dataset\/Braille Dataset\/'\nfor file in os.listdir(rootdir):\n    letter = file[0]\n    copyfile(rootdir+file, '.\/images\/' + letter + '\/' + file)    ","60fe3d16":"from keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(rotation_range=20,\n                             shear_range=10,\n                             validation_split=0.2)\n\ntrain_generator = datagen.flow_from_directory('.\/images\/',\n                                              target_size=(28,28),\n                                              subset='training')\n\nval_generator = datagen.flow_from_directory('.\/images\/',\n                                            target_size=(28,28),\n                                            subset='validation')","328a5b54":"from keras import backend as K\nfrom keras import layers as L\nfrom keras.models import Model,load_model\nfrom keras.regularizers import l2\nfrom keras.callbacks import ModelCheckpoint,ReduceLROnPlateau,EarlyStopping\n\nK.clear_session()\n\nmodel_ckpt = ModelCheckpoint('BrailleNet.h5',save_best_only=True)\nreduce_lr = ReduceLROnPlateau(patience=8,verbose=0)\nearly_stop = EarlyStopping(patience=15,verbose=1)\n\nentry = L.Input(shape=(28,28,3))\nx = L.SeparableConv2D(64,(3,3),activation='relu')(entry)\nx = L.MaxPooling2D((2,2))(x)\nx = L.SeparableConv2D(128,(3,3),activation='relu')(x)\nx = L.MaxPooling2D((2,2))(x)\nx = L.SeparableConv2D(256,(2,2),activation='relu')(x)\nx = L.GlobalMaxPooling2D()(x)\nx = L.Dense(256)(x)\nx = L.LeakyReLU()(x)\nx = L.Dense(64,kernel_regularizer=l2(2e-4))(x)\nx = L.LeakyReLU()(x)\nx = L.Dense(26,activation='softmax')(x)\n\nmodel = Model(entry,x)\nmodel.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n\nhistory = model.fit_generator(train_generator,validation_data=val_generator,epochs=666,\n                              callbacks=[model_ckpt,reduce_lr,early_stop],verbose=0)","1ec16225":"model = load_model('BrailleNet.h5')\nacc = model.evaluate_generator(val_generator)[1]\nprint('model accuracy: {}'.format(round(acc,4)))","172a0418":"# Braille Classifier\n5 minutes to ~92--97% accuracy  \nnot a perfect solution  \njust cuz i'm bored  "}}