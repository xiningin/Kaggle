{"cell_type":{"16d81667":"code","f8a8d8fd":"code","b7edc464":"code","d2e4d87f":"code","77c5b9a5":"code","bb858f04":"code","a418d204":"code","4758d398":"code","2f2a5d9e":"code","3252bc64":"code","ad6c3b04":"code","2075f4e7":"code","3ceee521":"code","bc5c8fbb":"code","3bea2c6c":"code","0e995ad3":"code","6cc55af3":"code","d2ff99e6":"code","39653f8a":"code","de2ed896":"code","fe990c10":"code","d14e7a0d":"markdown","b2282003":"markdown","b3e725b9":"markdown","619a2c74":"markdown","11f874d4":"markdown"},"source":{"16d81667":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f8a8d8fd":"df=pd.read_csv('..\/input\/house\/USA_Housing.csv')","b7edc464":"df.head()","d2e4d87f":"df.info()\n","77c5b9a5":"df.describe()","bb858f04":"df.columns\n","a418d204":"sns.pairplot(df)","4758d398":"sns.distplot(df['Price'])\n#distribution of the price","2f2a5d9e":"sns.heatmap(df.corr(),annot=True,cmap=\"YlGnBu\")","3252bc64":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n\nX = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',\n       'Avg. Area Number of Bedrooms', 'Area Population']]\ny = df['Price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101)\n\nlm_model= LinearRegression() #create lr object (model)\nlm_model.fit(X_train,y_train) #train the model\n\n\n","ad6c3b04":"print(lm_model.intercept_)","2075f4e7":"lm_model.coef_\n","3ceee521":"X.columns\n","bc5c8fbb":"cdf=pd.DataFrame(lm_model.coef_, X.columns, columns=['Coeff'])\n#Coefficiant means if you increase the Avg. Area Income by 1 unit the cost will increase by $21\n#Avg area housing age increases by 1 unit the price increases by $164883\n#cdf = coefficient dataframe\ncdf","3bea2c6c":"predictions=lm_model.predict(X_test) #features that the model hasn't seen before\npredictions","0e995ad3":"y_test\n#contains the correct prices of the house\n#how far off are the predictions(X_test)from the actual prices (y_test)?","6cc55af3":"plt.scatter(y_test, predictions)\n#how to test to see if the predictions you've made are in line with the actual prices\n#X_test compared to y_test","d2ff99e6":"sns.distplot(y_test-predictions)\n#histogram of our residuals\n#difference between the actual values (y_test) and predicted values (X_test)\n#equally distributed residuals indicates the model was correct for your data\n#if it is not equally distrubted look back and consider choosing a different model","39653f8a":"from sklearn import metrics\n\nmetrics.mean_absolute_error(y_test, predictions)\n","de2ed896":"metrics.mean_squared_error(y_test, predictions)","fe990c10":"np.sqrt(metrics.mean_squared_error(y_test, predictions))","d14e7a0d":"# PREDICTIONS","b2282003":"EDA on the data.\nSplit the data into a training set and a testing set based on the features and the target.\n\ntrain a linear model \n\nfit the model, check out the the coefficients and the intercepts to try to learn a bit about the model \n\nmake predictions using the model and analyze residuals \n\n\n\n.","b3e725b9":"# FITTING THE MODEL","619a2c74":"# REGRESSION EVALUATION METRICS","11f874d4":"Mean Absolute Error** (MAE) is the mean of the absolute value of the errors:\n**MAE** is the easiest to understand, because it's the average error.\n\nMean Squared Error** (MSE) is the mean of the squared errors:\n**MSE** is more popular than MAE, because MSE \"punishes\" larger errors, which tends to be useful in the real world.\n\nRoot Mean Squared Error** (RMSE) is the square root of the mean of the squared errors:\n**RMSE** is even more popular than MSE, because RMSE is interpretable in the \"y\" units.\n\nThese are loss functions because you want to minimize them to create the best model"}}