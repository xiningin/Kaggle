{"cell_type":{"43584d44":"code","e754257e":"code","166bf2ef":"code","4286361b":"code","9a92cf4e":"code","f55a4579":"code","a949cffc":"code","d07bc890":"code","62406bf2":"code","3debc337":"code","e16a9da4":"code","94de9af1":"code","52baf4ff":"code","450fc06a":"code","8f34a9ee":"code","9ba0761e":"code","1a9f754d":"code","66ffc2cf":"code","a3eea123":"code","98e2198b":"code","9bda4a65":"code","074ba163":"code","d7636488":"code","f29c9166":"code","1abb8a4c":"code","e3cbbdaf":"code","48d9fd86":"code","9cf28f4a":"code","d3d37d5b":"code","7e264fef":"code","96825714":"code","8071a070":"code","f65863ca":"code","ab8ad501":"code","829bdeb9":"code","a9dbe055":"code","88ac0075":"code","869d27be":"code","1c71dfa8":"code","f374f57f":"code","bdb710aa":"code","17faa7c9":"code","99b312d4":"code","6fb1d8da":"code","a40fa9ca":"code","75e28140":"code","66ba6a5b":"code","8ba956e4":"code","dd5bfe96":"code","6bf8a0f6":"code","bef0059e":"code","fa439e4f":"code","3d13ac74":"code","3faa167b":"code","6e8ba45f":"code","ccd58f2f":"code","89289839":"code","0a1212bf":"code","09b5f8a9":"code","deefbf9d":"code","bfc346a9":"code","8316a0c1":"code","dd82461b":"code","fb6b45ac":"code","ccb8e594":"code","de1457a2":"code","960798cf":"code","a6baf195":"code","1171adb9":"code","5dc22925":"code","662ba327":"code","d5378470":"code","e0fe1444":"code","52d043c4":"code","afb336c8":"code","3611e1ea":"code","9ad12c57":"code","b353cb0e":"code","0d58c909":"code","0588ea8e":"code","49f357fe":"code","ba427e80":"code","b8c4d6b3":"code","a1b4122f":"code","0121d59e":"code","46ec0007":"code","0bd5ba93":"code","fe3f42d5":"code","958da8dc":"code","a100146a":"code","445aa945":"code","3f42868f":"code","38f93186":"code","e9634508":"code","bfebcd94":"code","9d579f5c":"code","a06d1db3":"code","c0964e4c":"code","e7114176":"code","2823d37e":"code","461bc59c":"code","a4b7d036":"code","4bdf918a":"code","daaef046":"code","1ccca8b8":"code","d0ba7b39":"code","885a158f":"code","df28e4ad":"code","b1871a63":"code","de1d0a10":"code","1eb3832c":"code","de7acd4f":"code","690ac2e9":"code","a8728787":"code","378127ef":"code","4d4c707f":"code","2ec2e321":"code","51fde426":"code","1e7af68c":"markdown","88e13f9f":"markdown","e1b97a07":"markdown","3c28b2bf":"markdown","f9ddeb8d":"markdown","3610b8ff":"markdown"},"source":{"43584d44":"#import libraries\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport missingno as msno\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","e754257e":"train=pd.read_csv('..\/input\/datasets-for-churn-telecom\/cell2celltrain.csv')\ntest=pd.read_csv('..\/input\/datasets-for-churn-telecom\/cell2cellholdout.csv')","166bf2ef":"test.info()","4286361b":"train.info()","9a92cf4e":"#categoric features\nfor i in train.columns:\n      if train[i].dtype=='object':\n            print(pd.DataFrame(train[i].value_counts()))","f55a4579":"train['HandsetPrice'] = train['HandsetPrice'].replace('Unknown', np.nan)\ntest['HandsetPrice'] = test['HandsetPrice'].replace('Unknown', np.nan)","a949cffc":"train['HandsetPrice']  = pd.to_numeric(train['HandsetPrice'] )\ntest['HandsetPrice']  = pd.to_numeric(test['HandsetPrice'] )","d07bc890":"print(train.select_dtypes(exclude=['int', 'float']).columns,\"\\n***\\n\"*5,train.select_dtypes(include=['int', 'float']).columns)","62406bf2":"print(train.columns[train.isnull().any()],\"\\n***\\n\"*5,test.columns[test.isnull().any()])","3debc337":"test.columns[test.isnull().any()]","e16a9da4":"train_missings=train.filter(['MonthlyRevenue', 'MonthlyMinutes', 'TotalRecurringCharge',\n       'DirectorAssistedCalls', 'OverageMinutes', 'RoamingCalls',\n       'PercChangeMinutes', 'PercChangeRevenues', 'ServiceArea', 'Handsets',\n       'HandsetModels', 'CurrentEquipmentDays', 'AgeHH1', 'AgeHH2',\n       'HandsetPrice'], axis=1)\ntest_missings=test.filter(['MonthlyRevenue', 'MonthlyMinutes', 'TotalRecurringCharge',\n       'DirectorAssistedCalls', 'OverageMinutes', 'RoamingCalls',\n       'PercChangeMinutes', 'PercChangeRevenues', 'ServiceArea', 'AgeHH1',\n       'AgeHH2', 'HandsetPrice'],axis=1)","94de9af1":"msno.matrix(train_missings);","52baf4ff":"msno.heatmap(train_missings,cmap='coolwarm');","450fc06a":"msno.dendrogram(train_missings);","8f34a9ee":"msno.bar(train_missings);","9ba0761e":"train_missings.describe().T","1a9f754d":"def values_table(train_missings):\n        mis_val = train_missings.isnull().sum()\n        mis_val_percent = 100 * train_missings.isnull().sum() \/ len(train_missings)\n        mean=train_missings.mean()\n        median=train_missings.median()\n        total=train_missings.count()\n        zeros=train_missings[train_missings==0].count()\n        table = pd.concat([ mis_val,mis_val_percent, mean, median, total, zeros], axis=1)\n        table = table.rename(columns = {0 :'Train Missing Values', 1 : '% of Train Total Values', 2 : 'Mean'\n                                       , 3 : 'Median' , 4 : '# of Values' , 5 : '# of Zeros'})\n        table['Data Type'] = train_missings.dtypes\n        table = table[table.iloc[:,1] != 0].sort_values('% of Train Total Values', ascending=False).round(1)\n        print (\"Dataframe'in i\u00e7inde \" + str(train.shape[1]) + \" s\u00fctun ve \" + str(train.shape[0]) + \" sat\u0131r vard\u0131r.\\n\"      \n            \"Bu s\u00fctunlardan \" + str(table.shape[0]) +\" tanesinde missing value bulunmaktad\u0131r.\")\n        return table\n\nvalues_table(train_missings)","66ffc2cf":"def values_table(test_missings):\n        mis_val = test_missings.isnull().sum()\n        mis_val_percent = 100 * test_missings.isnull().sum() \/ len(test_missings)\n        mean=test_missings.mean()\n        median=test_missings.median()\n        total=test_missings.count()\n        zeros=test_missings[test_missings==0].count()\n        table = pd.concat([ mis_val,mis_val_percent, mean, median, total, zeros], axis=1)\n        table = table.rename(columns = {0 :'Test Missing Values', 1 : '% of Test Total Values', 2 : 'Mean'\n                                       , 3 : 'Median' , 4 : '# of Values' , 5 : '# of Zeros'})\n        table['Data Type'] = test_missings.dtypes\n        table = table[table.iloc[:,1] != 0].sort_values('% of Test Total Values', ascending=False).round(1)\n        print (\"Dataframe'in i\u00e7inde \" + str(train.shape[1]) + \" s\u00fctun ve \" + str(train.shape[0]) + \" sat\u0131r vard\u0131r.\\n\"      \n            \"Bu s\u00fctunlardan \" + str(table.shape[0]) +\" tanesinde missing value bulunmaktad\u0131r.\")\n        return table\n\nvalues_table(test_missings)","a3eea123":"train_1=train.copy()\ntest_1=test.copy()","98e2198b":"train_1.Churn.replace(('Yes', 'No'), (1, 0), inplace=True)","9bda4a65":"train_1['MonthlyRevenue'].fillna(train_1['MonthlyRevenue'].median(), inplace=True)\ntest_1['MonthlyRevenue'].fillna(test_1['MonthlyRevenue'].median(), inplace=True)","074ba163":"train_1[train_1['Handsets'].isna()][['HandsetModels','Handsets','CurrentEquipmentDays']] \n#HandsetModels ve Handsets numeric g\u00f6z\u00fckmesine ra\u011fmen kategorik de\u011fi\u015fkenler.Bu y\u00fczden mode ile doldurmak daha do\u011fru","d7636488":"print(\"Handsets:\",train_1.Handsets.mode()[0])\nprint(\"HandsetModels:\",train_1.HandsetModels.mode()[0])\nprint(\"CurrentEquipmentDays:\",train_1.CurrentEquipmentDays.mode()[0])","f29c9166":"train_1['Handsets'].fillna(train_1['Handsets'].mode()[0],inplace=True)","1abb8a4c":"train_1['HandsetModels'].fillna(train_1['HandsetModels'].mode()[0],inplace=True)","e3cbbdaf":"train_1['CurrentEquipmentDays'].mode()[0]","48d9fd86":"train_1['CurrentEquipmentDays'].value_counts()","9cf28f4a":"train_1['CurrentEquipmentDays'].fillna(train_1['CurrentEquipmentDays'].median(),inplace=True)","d3d37d5b":"train_1['ServiceArea'].fillna(train_1['ServiceArea'].mode()[0],inplace=True)\ntest_1['ServiceArea'].fillna(test_1['ServiceArea'].mode()[0],inplace=True)","7e264fef":"train_2=train.HandsetPrice.groupby([train['HandsetModels'],\n        train['Handsets']]).sum().astype(int).reset_index(name='count_price')\ndisplay(train_2[train_2['count_price']==0])","96825714":"train_3=train_1.HandsetPrice.isnull().groupby([train_1['HandsetModels'],\n        train_1['Handsets']]).sum().astype(int).reset_index(name='count_missing_price')\n\ndisplay(train_3.count_missing_price.sum())\ndisplay(train_3[train_3['count_missing_price'] > 0])\n","8071a070":"train_1.loc[train_1.HandsetModels.eq(1),'HandsetPrice'] = (train_1.loc[train_1.HandsetModels.eq(1),\n                            'HandsetPrice'].fillna(train_1.HandsetPrice.median()))","f65863ca":"train_1['HandsetPrice']= train_1['HandsetPrice'].fillna(train_1.groupby([train_1['HandsetModels'],\n        train_1['Handsets']])['HandsetPrice'].transform('median'))","ab8ad501":"train_1.HandsetPrice.isnull().sum()","829bdeb9":"test_2=test.HandsetPrice.groupby([test['HandsetModels'],\n        test['Handsets']]).sum().astype(int).reset_index(name='count_price')\ndisplay(test_2[test_2['count_price']==0])","a9dbe055":"test_3=test_1.HandsetPrice.isnull().groupby([test_1['HandsetModels'],\n        test_1['Handsets']]).sum().astype(int).reset_index(name='count_missing_price')\n\ndisplay(test_3.count_missing_price.sum())\ndisplay(test_3[test_3['count_missing_price'] > 0])","88ac0075":"test_1.loc[test_1.HandsetModels.eq(1),'HandsetPrice'] = (test_1.loc[test_1.HandsetModels.eq(1),\n                            'HandsetPrice'].fillna(test_1.HandsetPrice.median()))","869d27be":"test_1['HandsetPrice']= test_1['HandsetPrice'].fillna(test_1.groupby([test_1['HandsetModels'],\n        test_1['Handsets']])['HandsetPrice'].transform('median'))","1c71dfa8":"test_1.HandsetPrice.isnull().sum()","f374f57f":"train_1['AgeHH1'].fillna(value=0,inplace=True)\ntest_1['AgeHH1'].fillna(value=0,inplace=True)","bdb710aa":"train_1['AgeHH2'].fillna(value=0,inplace=True)\ntest_1['AgeHH2'].fillna(value=0,inplace=True)","17faa7c9":"display(train_1.groupby(['Churn'],as_index=False)['MonthlyMinutes'].median().style.hide_index())","99b312d4":"train_1['MonthlyMinutes'].fillna(train_1.groupby('Churn')['MonthlyMinutes'].transform('median'), inplace=True)","6fb1d8da":"test_1['MonthlyMinutes'].fillna(test_1['MonthlyMinutes'].median(), inplace=True)","a40fa9ca":"train_1['TotalRecurringCharge'].fillna(train_1['TotalRecurringCharge'].median(),inplace=True)\ntest_1['TotalRecurringCharge'].fillna(test_1['TotalRecurringCharge'].median(),inplace=True)","75e28140":"train_1['PercChangeRevenues'].fillna(value=0,inplace=True)\ntest_1['PercChangeRevenues'].fillna(value=0,inplace=True)","66ba6a5b":"train_1['PercChangeMinutes'].fillna(value=0,inplace=True)\ntest_1['PercChangeMinutes'].fillna(value=0,inplace=True)","8ba956e4":"train_1['RoamingCalls'].fillna(value=0,inplace=True)\ntest_1['RoamingCalls'].fillna(value=0,inplace=True)","dd5bfe96":"train_1['OverageMinutes'].fillna(value=0,inplace=True)\ntest_1['OverageMinutes'].fillna(value=0,inplace=True)","6bf8a0f6":"train_1['DirectorAssistedCalls'].fillna(value=0,inplace=True)\ntest_1['DirectorAssistedCalls'].fillna(value=0,inplace=True)","bef0059e":"test_1.isnull().sum()","fa439e4f":"train_yeni=train_1.select_dtypes(include=['int', 'float'])\nfrom scipy.stats import zscore\nfrom scipy import stats ","3d13ac74":"#Z Score\ntrain_1_replaced = train_yeni.copy()\noutliers={}\nfor col in train_yeni:\n    z_score = zscore(train_yeni[col])\n    upper_replace_value = train_yeni[z_score<=3][col].max()\n    lower_replace_value = train_yeni[z_score>=-3][col].min()\n    train_1_replaced = train_yeni.copy()\n    outliers[col] = len(train_1_replaced[col][(train_1_replaced[col] > upper_replace_value)| (train_1_replaced[col] < lower_replace_value)])","3faa167b":"outliers_zscore=pd.DataFrame(outliers.items(),columns=['Feature','Outliers'])\nprint(\"Outlier Z Score:\\n\",outliers_zscore)","6e8ba45f":"#IQR outliers\ntrain_2_replaced = train_yeni.copy()\noutliers_1={}\nfor col in train_yeni:\n    q1 = train_yeni[col].quantile(q=0.15)\n    q3 = train_yeni[col].quantile(q=0.85)\n    iqr = stats.iqr(train_yeni[col]) \n    train_2_replaced = train_yeni.copy()\n    upper_limit = q3 + 1.5*iqr\n    lower_limit = q1 - 1.5*iqr\n    outliers_1[col] = len(train_2_replaced[col][(train_2_replaced[col] > upper_limit)| (train_2_replaced[col] < lower_limit)])","ccd58f2f":"outliers_iqr=pd.DataFrame(outliers_1.items(),columns=['Feature','Outliers'])\nprint(\"IQR Outliers:\\n\",outliers_iqr)","89289839":"#Hard Edge Outliers\ntrain_3_replaced = train_yeni.copy()\noutliers_2={}\nfor col in train_yeni:\n    lower_lim = train_yeni[col].quantile(q=0.01)\n    upper_lim = train_yeni[col].quantile(q=0.99)\n    outliers_2[col] = len(train_3_replaced[col][(train_3_replaced[col] > upper_lim)| (train_3_replaced[col] < lower_lim)])","0a1212bf":"outliers_hard=pd.DataFrame(outliers_2.items(),columns=['Feature','Outliers'])\nprint(\"Hard Edge Outliers:\\n\",outliers_hard)","09b5f8a9":"numerik = train_1.select_dtypes(include=['int', 'float'])","deefbf9d":"numerik","bfc346a9":"# https:\/\/www.kaggle.com\/kevinarvai\/outlier-detection-practice-uni-multivariate#Nonparametric-methods:-Multivariate","8316a0c1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pylab import rcParams\n\nimport sklearn\nfrom sklearn.cluster import DBSCAN\nfrom collections import Counter","dd82461b":"%matplotlib inline\nrcParams['figure.figsize']= 5, 4\nsns.set_style('whitegrid')","fb6b45ac":"train_4_replaced = train_yeni.copy()","ccb8e594":"model = DBSCAN(eps = 0.8, min_samples=19).fit(train_yeni)\nprint(model)","de1457a2":"outliers_df = pd.DataFrame(train_yeni)\nprint (Counter(model.labels_))\nprint(\"***\"*20)\nprint (outliers_df[model.labels_==-1])","960798cf":"#train_yeni.drop(['MonthlyRevenue','MonthlyMinutes','TotalRecurringCharge'], axis=1,inplace=True)","a6baf195":"fig = plt.figure()\nax = fig.add_axes([3,3,3,3])\ncolors = model.labels_\nax.scatter(outliers_df.iloc[outliers_df.index[:],:],outliers_df.iloc[:,:], s=100)\nax.set_xlabel('MonthlyRevenue')\nax.set_ylabel('MonthlyMinutes')\nplt.title('DBSCAN outliers')","1171adb9":"train_yeni.loc[train_yeni.index[1:10000]]","5dc22925":"#Heatmap\nplt.rcParams[\"figure.figsize\"] = (30,20)\nsns.heatmap(train[:].corr(),annot = True,fmt='.1g',linecolor='white',cmap=\"YlGnBu\",linewidths=.5)\nplt.title(\"Heatmap\",fontsize= 18)\nplt.show()","662ba327":"((numerik['PercChangeMinutes']<0)==True).sum()","d5378470":"((numerik['RoamingCalls']>555)==True).sum()","e0fe1444":"((numerik['MonthlyMinutes']>2000)==True).sum()","52d043c4":"# MonthlyRevenueayl\u0131k gelir \u00e7ok y\u00fcksek olabilirr o y\u00fczden ellemedim\n# PercChangeMinutes z skoru +-3 olanlar at\u0131labilir bilgi kayb\u0131 min olacakat\u0131r.\n# MonthlyMinutes \u00e7ok abs\u00fcrt anomali oldu\u011funu d\u00fc\u015fnm\u00fcyorum buray\u0131\n# TotalRecurringCharge normal\n# DirectorAssistedCalls normal \n# OverageMinutes biraz abart\u0131 var 1500+ \u00e7\u0131kar\u0131labilir\n# RoamingCalls 200+ silinebilir\n# PercChangeMinutes normal","afb336c8":"#'MonthlyRevenue', 'MonthlyMinutes', 'TotalRecurringCharge',\n#       'DirectorAssistedCalls', 'OverageMinutes', 'RoamingCalls',\n#       'PercChangeMinutes'","3611e1ea":"## BOXPLOT","9ad12c57":"sns.boxplot(train['MonthlyRevenue'])","b353cb0e":"sns.boxplot(train['MonthlyMinutes'])","0d58c909":"sns.boxplot(train['TotalRecurringCharge'])","0588ea8e":"sns.boxplot(train['DirectorAssistedCalls'])","49f357fe":"sns.boxplot(train['OverageMinutes'])","ba427e80":"sns.boxplot(train['RoamingCalls'])","b8c4d6b3":"sns.boxplot(train['PercChangeMinutes'])","a1b4122f":"# H\u0130STOGRAM","0121d59e":"def plot_distro(train, col = '', y_limit=None, x_limit_r=None, x_limit_l = None):\n    plt.figure(figsize=(10,10))\n    plt.grid(True)\n    sns.distplot(train[col][train.Churn == 'Yes'])\n    sns.distplot(train[col][train.Churn == 'No'])\n    plt.legend(['1(Yes)', '0(No)'])\n    if y_limit:\n        plt.ylim(top=y_limit)\n    if x_limit_r:\n        plt.xlim(right=x_limit_r)\n    if x_limit_l:\n        plt.xlim(left=x_limit_l)","46ec0007":"plot_distro(train, col='MonthlyMinutes', x_limit_r=6000, x_limit_l=0)","0bd5ba93":"plot_distro(train, col='MonthlyRevenue', x_limit_r=500, x_limit_l=0)","fe3f42d5":"plot_distro(train, col='TotalRecurringCharge', x_limit_r=250, x_limit_l=0)","958da8dc":"plot_distro(train, col='DirectorAssistedCalls', x_limit_r=20, x_limit_l=0)","a100146a":"plot_distro(train, col='OverageMinutes', x_limit_r=250, x_limit_l=0)","445aa945":"plot_distro(train, col='RoamingCalls', x_limit_r=200, x_limit_l=0)","3f42868f":"plot_distro(train, col='PercChangeMinutes', x_limit_r=1000, x_limit_l=0)","38f93186":"import statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, BaggingClassifier, VotingClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import StandardScaler  \nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.naive_bayes import GaussianNB\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","e9634508":"Y = numerik['Churn']\nX = numerik.drop(columns=['Churn'])\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.4, random_state=44)","bfebcd94":"print('X train shape: ', X_train.shape)\nprint('Y train shape: ', y_train.shape)\nprint('X test shape: ', X_test.shape)\nprint('Y test shape: ', y_test.shape)","9d579f5c":"rf_model = RandomForestClassifier(random_state = 42, n_estimators=150, max_depth=9, max_leaf_nodes=9).fit(X_train, y_train)\ny_pred = rf_model.predict(X_test)\ny_pred_train = rf_model.predict(X_train)\nprint(\"** Karma\u015f\u0131kl\u0131k Matrisi **\\n\",confusion_matrix(y_test, y_pred))\nprint(\"** Test Seti Do\u011fruluk Oran\u0131 **\\n:\",accuracy_score(y_test, y_pred))\nprint(\"** Train Seti Do\u011fruluk Oran\u0131 **\\n:\",accuracy_score(y_train, y_pred_train))\nprint(classification_report(y_test, y_pred)) ","a06d1db3":"#svc = SVC(probability=True,kernel='linear')\n#adb_model = AdaBoostClassifier(base_estimator = svc, random_state = 42).fit(X_train, y_train)\n#y_pred = adb_model.predict(X_test)\n#y_pred_train = adb_model.predict(X_train)\n#print(\"** Karma\u015f\u0131kl\u0131k Matrisi **\\n\",confusion_matrix(y_test, y_pred))\n#print(\"** Test Seti Do\u011fruluk Oran\u0131 **\\n:\",accuracy_score(y_test, y_pred))\n#print(\"** Train Seti Do\u011fruluk Oran\u0131 **\\n:\",accuracy_score(y_train, y_pred_train))\n#print(classification_report(y_test, y_pred)) ","c0964e4c":"gbm_model = GradientBoostingClassifier(random_state=42).fit(X_train, y_train)\ny_pred = gbm_model.predict(X_test)\ny_pred_train = gbm_model.predict(X_train)\nprint(\"** Karma\u015f\u0131kl\u0131k Matrisi **\\n\",confusion_matrix(y_test, y_pred))\nprint(\"** Test Seti Do\u011fruluk Oran\u0131 **\\n:\",accuracy_score(y_test, y_pred))\nprint(\"** Train Seti Do\u011fruluk Oran\u0131 **\\n:\",accuracy_score(y_train, y_pred_train))\nprint(classification_report(y_test, y_pred)) ","e7114176":"lgbm_model = LGBMClassifier(random_state = 42).fit(X_train, y_train)\ny_pred = lgbm_model.predict(X_test)\ny_pred_train = lgbm_model.predict(X_train)\nprint(\"** Karma\u015f\u0131kl\u0131k Matrisi **\\n\",confusion_matrix(y_test, y_pred))\nprint(\"** Test Seti Do\u011fruluk Oran\u0131 **\\n:\",accuracy_score(y_test, y_pred))\nprint(\"** Train Seti Do\u011fruluk Oran\u0131 **\\n:\",accuracy_score(y_train, y_pred_train))\nprint(classification_report(y_test, y_pred)) ","2823d37e":"knn = KNeighborsClassifier()\nknn_model = knn.fit(X_train, y_train)\ny_pred = knn_model.predict(X_test)\ny_pred_train = knn_model.predict(X_train)\nprint(\"** Karma\u015f\u0131kl\u0131k Matrisi **\\n\",confusion_matrix(y_test, y_pred))\nprint(\"** Test Seti Do\u011fruluk Oran\u0131 **\\n:\",accuracy_score(y_test, y_pred))\nprint(\"** Train Seti Do\u011fruluk Oran\u0131 **\\n:\",accuracy_score(y_train, y_pred_train))\nprint(classification_report(y_test, y_pred)) ","461bc59c":"!pip install xgboost\nfrom xgboost import XGBClassifier","a4b7d036":"xgb_model = XGBClassifier().fit(X_train, y_train)","4bdf918a":"xgb_model","daaef046":"y_pred = xgb_model.predict(X_test)\naccuracy_score(y_test, y_pred)","1ccca8b8":"xgb_model","d0ba7b39":"?xgb_model","885a158f":"xgb_params = {\n        'n_estimators': [100, 200, 500, 1000],\n        'subsample': [0.6, 1.0],\n        'max_depth': [3, 4, 5,6],\n        'learning_rate': [0.1,0.01],\n        \"min_samples_split\": [2,5,10]}","df28e4ad":"xgb = XGBClassifier()\n\nxgb_cv_model = GridSearchCV(xgb, xgb_params, cv = 5, n_jobs = -1, verbose = 2)","b1871a63":"xgb_cv_model.fit(X_train, y_train)","de1d0a10":"xgb_cv_model.best_params_","1eb3832c":"xgb = XGBClassifier(learning_rate = 0.01, \n                    max_depth = 6,\n                    min_samples_split = 2,\n                    n_estimators = 1000,\n                    subsample = 1.0)","de7acd4f":"xgb_tuned =  xgb.fit(X_train,y_train)","690ac2e9":"y_pred = xgb_tuned.predict(X_test)\nxgbm_model_skor = accuracy_score(y_test, y_pred)","a8728787":"print(\"** Karma\u015f\u0131kl\u0131k Matrisi **\\n\",confusion_matrix(y_test, y_pred))\nprint(\"** Test Seti Do\u011fruluk Oran\u0131 **\\n:\",accuracy_score(y_test, y_pred))\nprint(\"** Train Seti Do\u011fruluk Oran\u0131 **\\n:\",accuracy_score(y_train, y_pred_train))","378127ef":"xgbm_model_skor","4d4c707f":"0.7284881727802537","2ec2e321":"modeller = [\n    knn_model,\n    rf_model,\n    gbm_model,\n    lgbm_model,\n    \n]\n\n\nfor model in modeller:\n    isimler = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    dogruluk = accuracy_score(y_test, y_pred)\n    print(\"-\"*28)\n    print(isimler + \":\" )\n    print(\"Accuracy: {:.4%}\".format(dogruluk))","51fde426":"sonuc = []\n\nsonuclar = pd.DataFrame(columns= [\"Modeller\",\"Accuracy\"])\n\nfor model in modeller:\n    isimler = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    dogruluk = accuracy_score(y_test, y_pred)    \n    sonuc = pd.DataFrame([[isimler, dogruluk*100]], columns= [\"Modeller\",\"Accuracy\"])\n    sonuclar = sonuclar.append(sonuc)\n    \n    \nsns.barplot(x= 'Accuracy', y = 'Modeller', data=sonuclar, color=\"b\")\nplt.xlabel('Accuracy %')\nplt.title('Modellerin Do\u011fruluk Oranlar\u0131');    ","1e7af68c":"# Modelling","88e13f9f":"## Handling Missing Values","e1b97a07":"# OUTLIER HANDLING","3c28b2bf":"# Outliers Sefa","f9ddeb8d":"# model tuning","3610b8ff":"# Random forest"}}