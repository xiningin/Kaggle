{"cell_type":{"6f4394dc":"code","6798bf92":"code","30f09f6b":"code","d3f8114b":"code","2548a30b":"code","8b7dcf34":"code","3b7f5ce2":"code","13135c57":"markdown","dd712a5c":"markdown","e96e61e8":"markdown","b9b0c17a":"markdown"},"source":{"6f4394dc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport networkx as nx\nimport random\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6798bf92":"office =  pd.read_csv('\/kaggle\/input\/the-office-script-lines\/The_Office_lines.csv')\noffice.head(5)","30f09f6b":"#Create episode_id for comparation later \noffice['episode_id'] = office['season'].astype(str)+office['episode'].astype(str)\n#get 20 main characters \nmain_characters = list(office['speaker'].value_counts().index[:20])\n\nmain_characters_suffle = random.sample(main_characters, len(main_characters))\n#print(main_characters_suffle)\ncharacter_dict = {character: i for i, character in enumerate(main_characters)}\nid_dict = {i: character for i, character in enumerate(main_characters)}","d3f8114b":"#create networkx object\nG = nx.Graph()","2548a30b":"#%% Get coversation info betwwen characters\nscene_before = \"\"\nepisode_id_before = -1\nfor i in range(len(office)):\n    #dont need this code from original repo \n    #     # is something spoken?\n    #     if office[\"speaker\"].iloc[i] == False or sorted_text_df[\"speaking_line\"].iloc[i] == \"false\":\n    #         # print(sorted_text_df[\"speaking_line\"].iloc[i])\n    #         continue\n\n    # check if episode and location of text is the same\n    if scene_before != office[\"scene\"].iloc[i] or office[\"episode_id\"].iloc[i] != episode_id_before:\n        scene_before = office.iloc[i][\"scene\"]\n        episode_id_before = office.iloc[i][\"episode_id\"]\n        continue\n\n    scene_before = office.iloc[i][\"scene\"]\n    episode_id_before = office.iloc[i][\"episode_id\"]\n\n    # get characters\n    c1 = office[\"speaker\"].iloc[i]\n    c2 = office[\"speaker\"].iloc[i+1]\n\n    # if type(first) == float or type(second) == float:\n    #fail check for character not in the interested list \n    if c1 not in main_characters_suffle or c2 not in main_characters_suffle:\n        continue\n\n    sorted_characters = sorted([c1, c2])\n    try:\n        #add +1 to weight if characters have conversation on the same sence\n        G.edges[sorted_characters][\"weight\"] += 1\n    except KeyError:\n        G.add_edge(sorted_characters[0], sorted_characters[1], weight=1)","8b7dcf34":"def plot_fig():\n    plt.figure(figsize=(25, 25))\n    pos = nx.circular_layout(G)\n    edges = G.edges()\n   \n    #darker colors for higher weigth\n    colors = [G[u][v]['weight']**0.39 for u, v in edges]\n    #only looking into characters that had conversation more than 10 times\n    weights = [G[u][v]['weight']**0.4 if G[u][v]['weight'] > 10 else 0 for u, v in edges]\n    \n    #colors\n    cmap = matplotlib.cm.get_cmap('plasma_r')\n \n    nx.draw_networkx(G, pos, width=weights, edge_color=colors,\n                     node_color=\"black\", edge_cmap=cmap, with_labels=False, alpha=0.99)\n   \n\n    labels_pos = {name: [pos_list[0], pos_list[1]-0.04] for name, pos_list in pos.items()}\n    nx.draw_networkx_labels(G, labels_pos, font_size=35, font_family=\"sans-serif\",\n                            font_color=\"#000000\", font_weight='normal')\n\n    ax = plt.gca()\n    # ax.set_solid_capstyle(\"butt\")\n    ax.margins(0.25)\n    plt.axis(\"equal\")\n    plt.tight_layout()\n    \n\n    #plt.savefig(\"Theoffice_conversation\")\n\n","3b7f5ce2":"plot_fig()","13135c57":"**Prepare Data**","dd712a5c":"**Plot the conversations between characters**","e96e61e8":"This project was inspired by [u\/Gandagorn](https:\/\/www.reddit.com\/u\/Gandagorn\/) [post](https:\/\/www.reddit.com\/r\/dataisbeautiful\/comments\/kkp3lr\/oc_interaction_intensity_in_the_simpsons\/) on Reddit. \nI am a big fan the The Office show. It is a rough estimation on who speaks to whom. The interaction between characters are counted by checking if they are speaking in the same scene.","b9b0c17a":"**Get coversation info betwwen characters**"}}