{"cell_type":{"0d320b6b":"code","137e60bf":"code","7f675f8e":"code","69d6a012":"code","d14b06d8":"code","3ef097a3":"code","c7205c77":"code","c6132e3a":"code","b782429c":"code","924d4dca":"code","b2df42d4":"code","ae74a5b0":"code","d298f9f1":"code","1990b398":"code","cd09448b":"code","281cff9f":"code","84e04cb9":"code","bf1a63bd":"code","dbed26a2":"code","c780af33":"code","8685ef70":"code","1c8b96ab":"code","f7619215":"code","4260e0b9":"code","b29e31d5":"code","430074c4":"markdown","859840dc":"markdown","d1ac4a2c":"markdown","a8dd8b6f":"markdown","4aa00ea2":"markdown","d1da6bdb":"markdown","efd2a200":"markdown","0231002f":"markdown","6ccbffdc":"markdown","a96b1870":"markdown","1da8fb37":"markdown","a3f6f78d":"markdown","d92ab242":"markdown"},"source":{"0d320b6b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","137e60bf":"## importing all the libraries \n## here we will be building our model using fastai library\n\nfrom fastai.vision import *","7f675f8e":"path = Path('..\/input\/intel-image-classification\/seg_train\/seg_train\/')  ## setting the path to the train images\npath.ls()\n","69d6a012":"classes =['glacier','sea','forest','street','mountain','buildings']  ## deifining labels of the images\n\nfor c in classes:\n    print(c)\n    verify_images(path\/c,delete=True,max_size=500)","d14b06d8":"np.random.seed(42)\ndata = ImageDataBunch.from_folder(path, train=\".\", valid_pct=0.2,ds_tfms=get_transforms(), size=224, num_workers=4).normalize(imagenet_stats)\n## here using ImageDataBunch object we are splitting data in to valid_pct and normalizing the images","3ef097a3":"data.classes   ## printing the classes of our dataset","c7205c77":"data.show_batch(rows=3,figsize=(7,8))  ## viewing our data images","c6132e3a":"data.classes, data.c, len(data.train_ds),len(data.valid_ds)","b782429c":"model = cnn_learner(data,models.resnet34,metrics=error_rate)","924d4dca":"model.fit_one_cycle(5)","b2df42d4":"model.model_dir =\"\/tmp\/model\/\"\n\n","ae74a5b0":"model.save('version-1')","d298f9f1":"model.unfreeze()","1990b398":"model.lr_find()","cd09448b":"model.recorder.plot()","281cff9f":"model.fit_one_cycle(2,max_lr=slice(1e-05,1e-04))","84e04cb9":"model.save(\"version 1.1\")","bf1a63bd":"interpret = ClassificationInterpretation.from_learner(model)","dbed26a2":"interpret.plot_confusion_matrix()","c780af33":"losess,idxs = interpret.top_losses()\n","8685ef70":"interpret.plot_top_losses(9,figsize=(15,11))  ### these are some of our wrongly classified images","1c8b96ab":"interpret.most_confused(min_val=5)   ## seeingw which were badly predictied","f7619215":"test_img = model.data.train_ds[0][0]\nprint(model.predict(test_img))\n\ndata.train_ds[0][0]\n\n","4260e0b9":"test_img = data.train_ds[3213][0]\nprint(model.predict(test_img))\n\ndata.train_ds[3213][0]\n","b29e31d5":"test_img = data.train_ds[6378][0]\nprint(model.predict(test_img))\n\ndata.train_ds[6378][0]\n","430074c4":"## View Data","859840dc":"### here we can see that , we have 6 classes , having 11228 images in training set and 2806 images in validation set","d1ac4a2c":"#### choosing learning rate between 1e-05 and 1e-04","a8dd8b6f":"# Training the Model","4aa00ea2":"### we can see that there are no bad images in our dataset","d1da6bdb":"##  Intel Image Classification Using Fastai \n\nIn this notebook we will build an image classfier for classification of images from [Intel-Image-Classification](https:\/\/www.kaggle.com\/puneet6060\/intel-image-classification) dataset using [fastai](https:\/\/www.fast.ai\/) library\n\n","efd2a200":"### we can see that at the end of 5 epochs we managed to get an error_rate of just around 6% \u21d2this is quite awesome !!!!!","0231002f":"\n### checking whether the dataset contains any image that can't be read, if so then delete it.","6ccbffdc":"### Setting the path to our train data\t","a96b1870":"### here we can see that glaciers were classified as mountains almost 55 times , hence these all are our top wrong predictions with number of bad predictions","1da8fb37":"## now we can test our model on few images","a3f6f78d":"\n#### So this was the whole process of creating a classification model using fastai library.\n","d92ab242":"#### here we are storing our model in the 'tmp\/model\/'  which is a writeable directory in kaggle working"}}