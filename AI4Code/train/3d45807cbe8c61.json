{"cell_type":{"000bb782":"code","e05c772a":"code","03f09688":"code","876651cd":"code","804cae3b":"code","3cdf6642":"code","5b6b5563":"markdown","4f86218c":"markdown","dc055e11":"markdown","78d61149":"markdown","889705a7":"markdown","fc3c36f4":"markdown"},"source":{"000bb782":"import numpy as np\nimport pandas as pd\nimport os\n\nimport matplotlib.pyplot as plt\nfrom keras_preprocessing.image import ImageDataGenerator\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense","e05c772a":"TRAINING_DIR = \"\/kaggle\/input\/fruits\/fruits-360\/Training\/\"\nTEST_DIR = \"\/kaggle\/input\/fruits\/fruits-360\/Test\/\"\n\nSIZE = 100\n\ntraining_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntraining_generator = training_datagen.flow_from_directory(\n    TRAINING_DIR,\n    target_size=(SIZE,SIZE),\n    color_mode=\"rgb\",\n    batch_size=128,\n    shuffle=True,\n    classes=os.listdir(\"\/kaggle\/input\/fruits\/fruits-360\/Training\/\"),\n    class_mode='categorical'\n)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_datagen.flow_from_directory(\n    TEST_DIR,\n    target_size=(SIZE, SIZE),\n    color_mode=\"rgb\",\n    batch_size=64,\n    shuffle=True,\n    classes=os.listdir(\"\/kaggle\/input\/fruits\/fruits-360\/Training\/\"),\n    class_mode='categorical'\n)","03f09688":"model = tf.keras.models.Sequential([\n    # Note the input shape is the desired size of the image SIZExSIZE with 3 bytes color\n    # This is the first convolution\n    tf.keras.layers.Conv2D(16, kernel_size=2, activation='relu', input_shape=(SIZE, SIZE, 3), padding='same'),\n    tf.keras.layers.MaxPooling2D(pool_size=2),\n    # The second convolution\n    tf.keras.layers.Conv2D(32, kernel_size=2, activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D(pool_size=2),\n    # The third convolution\n    tf.keras.layers.Conv2D(64, kernel_size=2, activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D(pool_size=2),\n    # The fourth convolution\n    tf.keras.layers.Conv2D(128, kernel_size=2, activation='relu', padding='same'),\n    tf.keras.layers.MaxPooling2D(pool_size=2),\n    # Flatten the results to feed into a DNN\n    tf.keras.layers.SpatialDropout2D(0.3),\n    tf.keras.layers.Flatten(),\n    # 150 neuron hidden layer\n    tf.keras.layers.Dense(150, activation='relu'),\n    tf.keras.layers.Dense(131, activation='softmax')\n])\n\n#model.build((SIZE, SIZE))\nmodel.summary()\nmodel.compile(loss = 'categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])","876651cd":"history = model.fit(\n    training_generator,\n    steps_per_epoch = 128,\n    epochs = 20, \n    verbose = 1,\n    validation_data=test_generator,\n    validation_steps=64,\n)","804cae3b":"def line_plot(series, legends, title, ylabel, xlabel):\n    for serie in series:\n        plt.plot(serie)\n    plt.title(title)\n    plt.ylabel(ylabel)\n    plt.xlabel(xlabel)\n    plt.legend(legends, loc='upper left')\n    #plt.ylim([0, 1.1])\n    plt.show()\n\n    \nline_plot(\n    [history.history['accuracy'], history.history['val_accuracy']],\n    ['train', 'test'],\n    'model accuracy',\n    'accuracy',\n    'epoch'\n)\n\nline_plot(\n    [history.history['loss'], history.history['val_loss']],\n    ['train', 'test'],\n    'model loss',\n    'loss',\n    'epoch'\n)","3cdf6642":"x_test_batch, y_test_batch = next(test_generator)\n\nlabels = os.listdir(\"\/kaggle\/input\/fruits\/fruits-360\/Test\/\")\n\ndef predict(img):\n    y_pred = model.predict(np.array([img]))\n    y_class = y_pred.argmax(axis=-1)\n    return labels[y_class[0]]\n\n\nf, axarr = plt.subplots(3,3)\n\nf.tight_layout()\n\nfor col in range(0,3):\n    for row in range(0,3):\n        axarr[col, row].imshow(x_test_batch[col*3+row])\n        axarr[col, row].title.set_text(predict(x_test_batch[col*3+row]))\n\nplt.show()","5b6b5563":"# Load Data","4f86218c":"# Architecture","dc055e11":"# Imports","78d61149":"# Fit","889705a7":"# Accuracy plots","fc3c36f4":"# Random Tests"}}