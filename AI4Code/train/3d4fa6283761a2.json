{"cell_type":{"8d890563":"code","78357467":"code","2b88bd05":"code","2dbe0da7":"code","057a17cd":"code","62e79066":"code","055715f7":"code","3aa6f18d":"code","fe97e58a":"code","56369337":"code","386bd37b":"code","33557022":"code","7654d249":"code","f8e76ec5":"code","d08b1c44":"code","3ab12463":"markdown","5872785c":"markdown","62bcc8ad":"markdown"},"source":{"8d890563":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","78357467":"df = pd.read_csv(\"\/kaggle\/input\/siber-zorbalk\/tweetset.csv\",encoding=\"windows-1254\")\ndf.head()","2b88bd05":"# Veri setinde kay\u0131p verilerin olup olmad\u0131\u011f\u0131na bak\u0131yoruz ve d\u00fczeltilemeyecek kadar olan feature'leri siliyoruz\nprint(\"Kay\u0131p Veriler :{}\".format(df.isnull().sum()))\n","2dbe0da7":"df.drop([\"Unnamed: 2\",\"Unnamed: 3\",\"Unnamed: 4\",\"Unnamed: 5\"],axis=1,inplace=True)","057a17cd":"#Label encoder i\u015flemi yaparak veri seti i\u00e7erisinde bulunan \"Negatif\" de\u011ferli 0 \"Pozitif\" de\u011ferleri ise 1 yap\u0131yoruz.\ndf[\"s\u0131n\u0131f\"] = [0 if (i==\"Negatif\") else 1 for i in df[\"Tip\"]]\ndf.head()","62e79066":"import string \nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer","055715f7":"#CLEANING SPECIAL CHARACTERS\ndef ozel_karakter (text):\n    punctation = string.punctuation\n    return text.translate(str.maketrans(\"\",\"\",punctation))\n\n#CLEANING THE STOP WORDS FROM THE DATA SET\ndef stop_words_temizle (text):\n    words = set(stopwords.words(\"turkish\"))\n    return (' '.join([i for i in text if i not in words and not i.isnumeric()]))\n\n\ndf[\"ozel_karakter\"] = df[\"Payla\u015f\u0131m\"].apply(lambda x: ozel_karakter(x))\ndf[\"ozel_karakter\"] = df[\"ozel_karakter\"].str.split()\ndf[\"stop_word\"] = df[\"ozel_karakter\"].apply(lambda x : stop_words_temizle(x))","3aa6f18d":"df['stop_word']= df['stop_word'].str.lower()\ndf.head()","fe97e58a":"# VER\u0130 SET\u0130 \u0130\u00c7ER\u0130S\u0130NDE \u0130HT\u0130YACIMIZ OLMAYAN S\u00dcTUNLARI S\u0130L\u0130YORUZ\ndf.drop([\"ozel_karakter\",\"Payla\u015f\u0131m\",\"Tip\"],inplace=True,axis=1)\ndf.head()","56369337":"\nfrom sklearn.model_selection import train_test_split\n\nX_train,X_test,Y_train,Y_test = train_test_split(df[\"stop_word\"].values.astype('U'),\n                                                 df[\"s\u0131n\u0131f\"],\n                                                 test_size=0.2,\n                                                 random_state=42)","386bd37b":"# COUNT VECTOR\u0130ZE \u0130LE SAYMA VEKT\u00d6RLER\u0130 OLU\u015eTURMA\nfrom sklearn.feature_extraction.text import CountVectorizer\n\ncount_vect = CountVectorizer()\nX_train_counts = count_vect.fit_transform(X_train)\nprint(X_train_counts.shape)","33557022":"# TF\u0130IDF VEKT\u00d6R\u00dc OLU\u015eTURMA SAYMA VEKT\u00d6RLER\u0130N\u0130 TFIDF VEKT\u00d6RLER\u0130NE D\u00d6N\u00dc\u015eT\u00dcR\u00dcCEZ\n\nfrom sklearn.feature_extraction.text import TfidfTransformer\ntfidf =TfidfTransformer() \nX_train_tfidf= tfidf.fit_transform(X_train_counts)\nprint(X_train_tfidf.shape)","7654d249":"# \u00c7OK MODLU NAIVE BAYES SINIFLANDIRICI E\u011e\u0130T\u0130YORUZ\n\nfrom sklearn.naive_bayes import MultinomialNB\n\nmnb = MultinomialNB()\nclf = mnb.fit(X_train_tfidf, Y_train)\n\nX_test_counts = count_vect.transform(X_test)\nX_test_tfidf = tfidf.transform(X_test_counts)","f8e76ec5":"#Measuring Model Performance\n\ny_pred = clf.predict(X_test_tfidf)\n\nfor text, sentiment in zip(X_test[:5],y_pred[:]):\n    print(\"\\n %r => %s\" %(text,sentiment ))","d08b1c44":"# Test Result\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\n\n\nprint(f\"Accuracy Score %{round(accuracy_score(Y_test,y_pred)*100,2)}\")\nprint(f\"f-1 Score = %{round(f1_score(Y_test,y_pred)*100,2)}\")\nprint(f\"Precision = %{round(precision_score(Y_test,y_pred)*100,2)}\")\nprint(f\"Recall Score = %{round(recall_score(Y_test,y_pred)*100,2)}\")\n","3ab12463":"Veri setinin i\u00e7erisindeki \u00f6zniteliklere bakacak olursak \"Tip\" ve \"Payla\u015f\u0131m\" olmak \u00fczere 2 \u00f6znitelik vard\u0131r.\n\nBu \u00f6zniteliklerin haricinde \"NaN\" yani bo\u015f de\u011ferlerle dolu olan \u00f6znitelikleri silmemiz gerekiyor .\n\n**Payla\u015f\u0131m :** Sosyal medya platformu olan Tweetter'da kullan\u0131c\u0131lar\u0131n yapt\u0131klar\u0131 payla\u015f\u0131mlar\u0131n i\u00e7eriklerini g\u00f6stermektedir.\n\n**Tip :** At\u0131lan tweet lerin siber zorbal\u0131k ifade edip etmedi\u011finin etiketlendi\u011fi \u00f6z niteliktir. \"Pozitif\",\"Negatif\"","5872785c":"<a id= \"1\"> <\/a><br>\n## Veri Setini Y\u00fckl\u00fcyoruz","62bcc8ad":"<a id= \"2\"> <\/a><br>\n# Veri \u00d6n \u0130\u015fleme"}}