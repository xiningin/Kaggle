{"cell_type":{"11d8586c":"code","c1eafb56":"code","60cc99f1":"code","11bc8af2":"code","7a90e5d3":"code","8fbe6bd1":"code","e98ae5d9":"code","dcddc5cc":"code","828cac80":"code","c0f15679":"code","87da80a3":"code","ab4bc81f":"code","2e8d4b69":"code","57bf523e":"markdown","e32393f7":"markdown","0720d947":"markdown","76fd3ff7":"markdown","106370c3":"markdown","0d899dbe":"markdown","5a3bee17":"markdown","4712117a":"markdown","32dc2b47":"markdown","f1a19d13":"markdown","75e4b64b":"markdown","807033f8":"markdown","49288663":"markdown","465b923a":"markdown"},"source":{"11d8586c":"from IPython.display import YouTubeVideo\nYouTubeVideo('gsoHoem2kl4', width=800, height=450)","c1eafb56":"import numpy as np\nimport numpy.polynomial.polynomial as poly\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.lines import Line2D\nfrom mpl_toolkits.basemap import Basemap\nimport os\nimport bq_helper\n\n# Connect to BigQuery datasets\nny_data_set = bq_helper.BigQueryHelper(active_project= \"bigquery-public-data\", \n                                       dataset_name = \"new_york\")\nnoaa_data_set = bq_helper.BigQueryHelper(active_project= \"bigquery-public-data\", \n                                         dataset_name = \"noaa_gsod\")\n\n#noaa_data_set.list_tables()\n#ny_data_set.table_schema(\"311_service_requests\")\n#ny_data_set.head(\"311_service_requests\")\n#ny_data_set.head(\"311_service_requests\",selected_columns=\"location\", num_rows=10)","60cc99f1":"# Define query \nquery = \"\"\"\nSELECT \n Extract(DATE from created_date) AS creation_date, \n REPLACE(UPPER(complaint_type), \"HEATING\", \"HEAT\/HOT WATER\") as complaint_type, \n COUNT(*) AS count \nFROM        `bigquery-public-data.new_york.311_service_requests` \nWHERE\n Extract(YEAR from created_date) = 2016\nGROUP BY creation_date, complaint_type \nORDER BY creation_date ASC, count DESC \n\"\"\" \n#ny_data_set.estimate_query_size(query)\n\n# Run query \ncomplaint_counts = ny_data_set.query_to_pandas_safe(query, max_gb_scanned=0.5)\n\n# Pivot complaint data to create new columns for all of the complaint types \ncomplaint_counts = complaint_counts.pivot(index='creation_date', columns='complaint_type', values='count')\ncomplaint_counts.columns = [c.lower()\n                            .replace(' ', '_')\n                            .replace('-', '_') \n                            .replace('\/', '_') \n                            for c in complaint_counts.columns]\n# Fill zeros for missing values\ncomplaint_counts = complaint_counts.fillna(0)\n# Reset index to numeric values for later trending since the date took over the index \ncomplaint_counts[\"creation_date\"] = complaint_counts.index\ncomplaint_counts.index = range(len(complaint_counts.index))\n\n#print(complaint_counts.head())","11bc8af2":"# Define query \nquery = \"\"\"\nSELECT \n CAST(CONCAT(w.year,'-',w.mo,'-',w.da) AS date) AS date,\n AVG(w.temp) AS avg_temp,\n MAX(w.max) AS max_temp,\n MIN(w.min) AS min_temp\nFROM        `bigquery-public-data.noaa_gsod.gsod2016`  w\nINNER JOIN  `bigquery-public-data.noaa_gsod.stations`  s\n ON w.stn=s.usaf\n AND w.wban=s.wban\nWHERE\n s.country='US'\n AND s.state = 'NY'\n AND s.name='CENTRAL PARK'\nGROUP BY date\nORDER BY date\n\"\"\"\n#noaa_data_set.estimate_query_size(query)\n\n# Run query \nweather_by_day = noaa_data_set.query_to_pandas_safe(query, max_gb_scanned=0.5)\n\n#print(weather_by_day.head(365))","7a90e5d3":"# Create first axis\ncolor = 'tab:orange'\nX = complaint_counts.index\ny = complaint_counts.urinating_in_public\nfig, ax1 = plt.subplots(figsize=(12, 5))\nax1.set_xlabel('time (days)')\nax1.set_ylabel('urine', color=color)\nax1.plot(X, y, color=color)\ncoefs = poly.polyfit(X, y, 4)\nffit = poly.polyval(X, coefs)\nax1.plot(X, ffit, dashes=[6, 2], color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create second axis\ncolor = 'tab:green'\nX = weather_by_day.index\ny = weather_by_day.avg_temp\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\nax2.set_ylabel('temp', color=color)\nax2.plot(y, color=color)\ncoefs = poly.polyfit(X, y, 4)\nffit = poly.polyval(X, coefs)\nax2.plot(X, ffit, dashes=[6, 2], color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Display plot\nplt.show()","8fbe6bd1":"query = \"\"\"\nSELECT \n REPLACE(UPPER(complaint_type), \"HEATING\", \"HEAT\/HOT WATER\") as complaint_type, \n EXTRACT(DAYOFWEEK FROM created_date) AS day_of_week,\n EXTRACT(HOUR FROM created_date)+1 AS hour_of_day,\n latitude,\n longitude\nFROM        `bigquery-public-data.new_york.311_service_requests` \nWHERE\n     Extract(YEAR from created_date) = 2016\n AND complaint_type = 'Urinating in Public'\n AND latitude IS NOT NULL\n\"\"\"\n#ny_data_set.estimate_query_size(query)\n\n# Run query \npublic_urination = ny_data_set.query_to_pandas_safe(query, max_gb_scanned=1)\n#public_urination['postal_code'] = pd.to_numeric(public_urination.postal_code, errors='coerce')\n\n#print(public_urination)","e98ae5d9":"plt.figure(figsize=(12, 6))\n\n# Prep map base\nmap = Basemap(llcrnrlon=-74.1,\n              llcrnrlat=40.6,\n              urcrnrlon=-73.7,\n              urcrnrlat=40.90,\n              resolution = 'f')\nmap.drawmapboundary(fill_color='aqua')\nmap.fillcontinents(color='white',lake_color='aqua', zorder=1) # zorder keeps this behind scatter points\nmap.drawcoastlines()\n\n# Plot point on map\nx, y = map(public_urination['longitude'], public_urination['latitude'])\nmap.scatter(x, y, s=1, color='#FF8C00', zorder=2)\n\n#Display map\nplt.title('Public Urination occurrences', fontsize=20)\nplt.show()","dcddc5cc":"ax = sns.jointplot(x='day_of_week', \n                   y='hour_of_day', \n                   data=public_urination, \n                   kind=\"kde\", \n                   ratio=4, size=8, space=0)\n\n#ax = sns.jointplot(x='hour_of_day', \n#                   y='day_of_week', \n#                   data=public_urination,\n#                   kind='hex', \n#                   gridsize=20,\n#                   space=1)\n\n#ax = public_urination.plot.hexbin(x='day_of_week', \n#                                  y='hour_of_day', \n#                                  gridsize=15, \n#                                  figsize=(12, 6),\n#                                  fontsize=16)\n\n# remove the boundaries around the outside of the plot\nsns.despine(bottom=True, left=True)","828cac80":"# Calculate heating and cooling degree days \nchange_point = 65\nweather_by_day['raw_degree_day_calc'] = change_point - weather_by_day['avg_temp']\nweather_by_day['HDD'] = abs(weather_by_day.loc[weather_by_day.raw_degree_day_calc>0,'raw_degree_day_calc'])\nweather_by_day['HDD'] = weather_by_day['HDD'].fillna(0)\nweather_by_day['CDD'] = abs(weather_by_day.loc[weather_by_day.raw_degree_day_calc<0,'raw_degree_day_calc'])\nweather_by_day['CDD'] = weather_by_day['CDD'].fillna(0)\n#weather_by_day['total_degree_days'] = weather_by_day['HDD'] + weather_by_day['CDD']\n\n#print(weather_by_day.head(200))","c0f15679":"plt.figure(figsize=(12, 5))\nplt.plot(weather_by_day.HDD, color='tab:red')\nplt.plot(weather_by_day.CDD, color='tab:blue')\nplt.plot(weather_by_day.avg_temp, color='tab:green')\nplt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,\n           ncol=1, mode=\"expand\", borderaxespad=0.)\nplt.show()","87da80a3":"# Define columns for new data frame that holds correlation coefficients for complaint types \ncorr_types = ['HDD','CDD','avg_temp']\ncomplaint_corr = pd.DataFrame(columns=['complaint_type']+corr_types)\n# add in complaint types and temp types \ncomplaint_corr['complaint_type'] = complaint_counts.drop(['creation_date'],axis=1).columns\ncomplaint_corr = pd.melt(complaint_corr, id_vars=['complaint_type'], \n                         var_name = 'temp_type', value_name = 'corrcoef')\n# calculate correlation coefficients against many weather data types for each complaint type \nfor index, row in complaint_corr.iterrows():\n    row['corrcoef'] = np.corrcoef(complaint_counts[row['complaint_type']],\n                                  weather_by_day[row['temp_type']])[0, 1]\n\n# Find the top complaint types that correlate the most\ncomplaint_corr = complaint_corr.sort_values(by='corrcoef', ascending=False)\ncomplaint_corr = complaint_corr.drop_duplicates(subset='complaint_type', keep=\"first\")\ncomplaint_corr.reset_index(drop=True, inplace=True)\ntop_complaint_corr = complaint_corr.head(30)\n\nprint(top_complaint_corr)","ab4bc81f":"# Specify the chart types I want to create for the various temp types \nchart_types = pd.DataFrame([('Occurs mostly in cold temperature (degree days)','HDD','tab:red'),\n                            ('Occurs mostly in warm temperature (degree days)','CDD','tab:blue'),\n                            ('Correlation to be higher in warm temperature','avg_temp','tab:green')],\n                          columns=['title','temp_type','color'])\n\n# Iterate through the chart type to create them\nfor index, row in chart_types.iterrows():\n    custom_legend_lines = list()\n    \n    # Plot complaint types that had high correlation to the temp type\n    fig, ax1 = plt.subplots(figsize=(12, 5))\n    ax1.set_xlabel('time (days)')\n    ax1.set_ylabel('count of complaints')\n    for index2, row2 in top_complaint_corr.iterrows():\n        if row['temp_type'] == row2['temp_type']:\n            color = plt.cm.gist_ncar(np.random.random())\n            X = complaint_counts.index\n            y = complaint_counts[row2['complaint_type']]\n            ax1.plot(X, y, label=row2['complaint_type'], color=color)\n            custom_legend_lines.append(Line2D([0], [0], color=color, \n                                              lw=1, label=row2['complaint_type']))\n    \n    # Plot temp type\n    color=row['color']\n    X = weather_by_day.index\n    y = weather_by_day[row['temp_type']]\n    ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n    ax2.set_ylabel(row['temp_type'], color=row['color'])\n    ax2.plot(y, label=row['temp_type'], color=color, linewidth=3)\n    ax2.tick_params(axis='y', labelcolor=row['color'])\n    custom_legend_lines.append(Line2D([0], [0], color=color, \n                                      lw=3, label=row['temp_type']))\n    \n    # Finalize chart \n    plt.legend(handles=custom_legend_lines, bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n    #plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,\n    #       ncol=1, mode=\"expand\", borderaxespad=0.)\n    plt.title(row['title'])\n    plt.show()","2e8d4b69":"# Specify the chart types I want to create for the various temp types \nchart_types = pd.DataFrame([('Occurs mostly in cold temperature (degree days)','HDD','tab:red'),\n                            ('Occurs mostly in warm temperature (degree days)','CDD','tab:blue'),\n                            ('Correlation to be higher in warm temperature','avg_temp','tab:green')],\n                          columns=['title','temp_type','color'])\n\n# Iterate through the chart type to create them\nfor index, row in chart_types.iterrows():\n    custom_legend_lines = list()\n    \n    # Plot complaint types that had high correlation to the temp type\n    fig, ax1 = plt.subplots(figsize=(12, 5))\n    ax1.set_xlabel('time (days)')\n    ax1.set_ylabel('complaint range - 0 to 1')\n    for index2, row2 in top_complaint_corr.iterrows():\n        if row['temp_type'] == row2['temp_type']:\n            color = plt.cm.gist_ncar(np.random.random())\n            X = complaint_counts.index\n            # this is the main line that changed from the prior code to normalize the chart results \n            y = complaint_counts[row2['complaint_type']]\/complaint_counts[row2['complaint_type']].max()\n            ax1.plot(X, y, label=row2['complaint_type'], color=color)\n            custom_legend_lines.append(Line2D([0], [0], color=color, \n                                              lw=1, label=row2['complaint_type']))\n    \n    # Plot temp type\n    color=row['color']\n    X = weather_by_day.index\n    y = weather_by_day[row['temp_type']]\n    ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\n    ax2.set_ylabel(row['temp_type'], color=row['color'])\n    ax2.plot(y, label=row['temp_type'], color=color, linewidth=3)\n    ax2.tick_params(axis='y', labelcolor=row['color'])\n    custom_legend_lines.append(Line2D([0], [0], color=color, \n                                      lw=3, label=row['temp_type']))\n    \n    # Finalize chart \n    plt.legend(handles=custom_legend_lines, bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n    #plt.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,\n    #       ncol=1, mode=\"expand\", borderaxespad=0.)\n    plt.title(row['title'])\n    plt.show()","57bf523e":"2) Chart the degree days to see how they turned out.","e32393f7":"This is a bit of fun I had messing around with the NYC data along with some weather correlation. Thanks Kaggle team for pulling this together for us to use!\n\nFirst a quick video that came out leading up to the decriminalization of public urination in NYC  June 2017...","0720d947":"3) Show the most prevalent day of week for public urination by month. (days of week are on the x axis starting with Sunday as day 1 and ending with Saturday as day 7.","76fd3ff7":"- - -\n\n**Other ideas for future exploration:**\n- find cases of repeated disorderly youth complaints in 311 to find grumpy people\n- buildings with sustained and extreme noise issues","106370c3":"- - -\n\n**Complaint types most affected by weather**\n\nRealizing that there is a correlation between public urination and weather made me want to take this a step further and discover the top 311 complaint types overall that are affected by weather.","0d899dbe":"- - -\n\n**Initial data collection and prep...**\n\n1) Prep the BigQuery connectors to pull in \"NYC Open Data\" and \"NOAA GSOD\" (weather) data sets.","5a3bee17":"5) This next set of charts is very similar to the last set but instead the complaint types are all normalized to a scale of 0 to 1 so they're visually more comparable to the weather data.","4712117a":"2) Plot all of the occurrences of public urination on a map.\n\n**Note:** I found that Basemap is quite slow to compile compared to many other mapping tools I've used previously. I need to look into this more at some point to understand why.","32dc2b47":"3) Retrieve weather data for the Central Park station in New York City.","f1a19d13":"2) Retrieve the NYC 311 data and pivot it so there is a column for every complaint type. I moved back to a numeric index after the pivot changed the index to a date - this ensures that polyfit will still work correctly in a later step.","75e4b64b":"3) Run Pearson Correlation for all complaint types against 3 different weather data points: average temperature, heating degree days, and cooling degree days. The result of this is a set of coefficients to inform us of the complaint types that correlate most with temperature.","807033f8":"- - -\n\n**Public urination...**\n\nThis section pulls together complaints about public urination in NYC to show the correlation of higher complaint counts to nice weather and lower compliant counts to cold weather.\n\n1) Plot two independent axes both displayed on the x-axis.","49288663":"1) Calculate heating and cooling \"degree days\" to normalize the temperature into something a little easier to compare.","465b923a":"4) Chart the top 30 complaint types based on count of complaints that most correlate to weather."}}