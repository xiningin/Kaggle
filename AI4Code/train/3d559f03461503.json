{"cell_type":{"9745d78e":"code","25ebdf24":"code","11d1f8c8":"code","125879c2":"code","0e156878":"code","84fd2531":"code","45622556":"code","1224e46a":"code","c46c8c13":"code","e0551ed7":"code","d4181ec8":"code","091b186e":"code","d501848e":"code","35bba9f2":"code","682fd54e":"code","ffe077d4":"code","13971f03":"code","81266163":"code","2e1d7db5":"code","a3a14f30":"code","9c614c35":"code","48d169a1":"code","40c23755":"code","0638cb8d":"code","27384290":"code","dc37a0d9":"code","7a9c0990":"code","4c391e9a":"code","0c69dfeb":"code","26c5722c":"code","c2da198b":"code","cc23e16a":"code","dccbb357":"markdown","2b592471":"markdown","b333e8c3":"markdown","565a5f48":"markdown","b4822f33":"markdown","12b39043":"markdown","10697992":"markdown","2c3f1916":"markdown","fa7eba2a":"markdown"},"source":{"9745d78e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sn \n\nimport sklearn\nfrom sklearn.preprocessing import StandardScaler\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","25ebdf24":"address='\/kaggle\/input\/fekry-python-case\/imports-805.data'\ndf=pd.read_csv(address, header=None)\ndf.columns= ['sympoling','normloss','make','fuel','aspiration','doorcount','style','drive','engine','wheelbase','lenght','width','hight','netweight','enginetype','cylcount','enginsize','fuelsys','bore','stroke','compratio','hp','rpm','city-mpg','hwy-mpg','price']\ndf.head(3)","11d1f8c8":"df.info()","125879c2":"df.shape #Our dataset consists of 26 columns & 205 rows.","0e156878":"#Replacing ?  with not a number value.\ndf.replace(\"?\", np.nan, inplace = True)","84fd2531":"df.isnull().sum()\n\n# price is the target variable, so, we should remove the rows that contain the missed values.","45622556":"# price is the target variable, so, we should remove the rows that contain the missed values.\ndf.dropna(subset=['price'], axis=0, inplace=True)\n\n# reset index, because we droped two rows\ndf.reset_index(drop=True, inplace=True)\ndf.info()","1224e46a":"df[['doorcount','bore','stroke','hp','rpm']].head(10)","c46c8c13":"# replace NaN by mean value in the following columns.\navg_bore=df['normloss'].astype('float').mean(axis=0)\ndf[\"normloss\"].replace(np.nan, avg_bore, inplace=True)\n\navg_bore=df['bore'].astype('float').mean(axis=0)\ndf[\"bore\"].replace(np.nan, avg_bore, inplace=True)\n\navg_rpm=df['rpm'].astype('float').mean(axis=0)\ndf['rpm'].replace(np.nan, avg_rpm, inplace=True)\n\navg_rpm=df['stroke'].astype('float').mean(axis=0)\ndf['stroke'].replace(np.nan, avg_rpm, inplace=True)\n\navg_rpm=df['hp'].astype('float').mean(axis=0)\ndf['hp'].replace(np.nan, avg_rpm, inplace=True)\n\n#replace the missing 'num-of-doors' values by the most frequent\nmost_freq_doorcount=df['doorcount'].value_counts().idxmax()\ndf[\"doorcount\"].replace(np.nan, most_freq_doorcount, inplace=True)","e0551ed7":"df.isnull().sum()\n\n#as we see there is no NaN values.","d4181ec8":"df.dtypes","091b186e":"# we need to change 'normloss', 'bore' & 'stroke' to float \ndf[[\"normloss\", \"bore\", \"stroke\"]] = df[[\"normloss\", \"bore\",\"stroke\"]].astype(\"float\")\n\n# and chane 'hp', 'rpm', & 'price' to int64\ndf[[\"hp\",\"rpm\",\"price\"]] = df[[\"hp\",\"rpm\",\"price\"]].astype(\"int\")\n\ndf.dtypes","d501848e":"#Data transformation\ndf['city-L\/100km'] = 235\/df[\"city-mpg\"]\ndf['hwy-L\/100km'] = 235\/df[\"hwy-mpg\"]","35bba9f2":"#removig 'city-mpg' & 'hwy-mpg' columns.\ndf.drop(['city-mpg'], axis=1)\ndf.drop(['hwy-mpg'], axis=1)","682fd54e":"#To maximize the output view of rows and columns.\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\ndf.head(5)","ffe077d4":"df.describe()","13971f03":"numerical_variables=['sympoling','normloss','wheelbase','lenght','width','hight','netweight','enginsize','bore','stroke','compratio','hp','rpm','city-L\/100km','hwy-L\/100km','price']\ncategorical_variables=['make','fuel','aspiration','doorcount','style','drive','engine','enginetype','cylcount','fuelsys']","81266163":"for i in categorical_variables:\n    print(\"\\033[1m\",df[i].value_counts(),'\\n','\\n',\"\\033[1m\")","2e1d7db5":"%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams \nrcParams['figure.figsize']=10,6 ","a3a14f30":"for f in categorical_variables:\n    plt.figure(figsize = (15, 6), dpi = 100)\n    plt.title('The Price Range of '+f,fontsize=30, bbox=dict(boxstyle=\"sawtooth,pad=0.2\", fc=\"cyan\", ec=\"b\", lw=2))\n    plt.xticks(rotation=90, fontsize=20)\n    plt.yticks(fontsize=20)\n    plt.xlabel(f + 'Values',fontsize=25)\n    plt.ylabel('Price',fontsize=25)\n    sn.boxplot(x=f, y='price', data = df)\n    plt.show()","9c614c35":"for i in categorical_variables:\n    a_group=df.groupby([i])['price'].agg([np.sum,np.mean]);\n    print(\"\\033[1m\",a_group,'\\n','\\n',\"\\033[1m\")","48d169a1":"def count_plt(key):\n    plt.subplots(figsize=(10,6)) \n    ax=df[key].value_counts().plot.bar(width=0.9,color=sn.color_palette(\"hsv\",20)) \n    ax.grid()\n    for p in ax.patches:\n        ax.annotate(str(p.get_height()), (p.get_x()*1.005, p.get_height()+1.05)) \n    ax.tick_params(labelsize=15)\n    plt.xticks(rotation=90)\n    ","40c23755":"for i in categorical_variables:\n    count_plt(i) \n    plt.xlabel(i+' Categories',fontsize=20) \n    plt.ylabel('Number of Cars', fontsize=25) \n    plt.title('Cars Count By '+ i,fontsize=40,\n               bbox=dict(boxstyle=\"sawtooth,pad=0.2\", fc=\"cyan\", ec=\"b\", lw=2))\n    plt.show()\n","0638cb8d":"import seaborn as sn\n\nfor g in numerical_variables:\n        fig, axes = plt.subplots(figsize=(10,5))\n        plot=sn.distplot(df[g], color='b') \n        plot.set_xlabel(g, fontsize=25)\n        fig.suptitle(\"The Distribution \"+g+\" Values\", fontsize=25, bbox={\"facecolor\":\"0.8\", \"pad\":3})\n        plt.tight_layout()\n        plt.grid()\n        plt.show()","27384290":"correlation=df.corr(method='pearson')\nplt.figure(figsize=(20,20))\nsn.heatmap(correlation,xticklabels=correlation.columns,yticklabels=correlation.columns, cmap=\"gist_earth_r\",annot= True)","dc37a0d9":"from scipy import stats\nfor i in numerical_variables:\n    pearson_coeff, p_value = stats.pearsonr(df[i], df['price']) \n   #\"\\033[1m\" before and after the string to print in bold format.\n    print(\"\\033[1m\"+i+\"\\033[1m\")\n    print(f'Pearson Co-relation: {pearson_coeff}')\n    print(f'P-Value: {p_value}')\n    if p_value<0.05:\n        print('Correlation is Significant \\n \\n') \n    else:\n        print('Correlation is Insignificant \\n \\n')","7a9c0990":"from sklearn.linear_model import LinearRegression\nlm=LinearRegression()\nZ = df[['wheelbase', 'lenght', 'width', 'netweight','enginsize','bore','hp','city-L\/100km','hwy-L\/100km']]\nlm.fit(Z, df['price'])\nprint('The R-square is: ', lm.score(Z, df['price']))","4c391e9a":"lm.intercept_","0c69dfeb":"lm.coef_","26c5722c":"Y_predict_multifit = lm.predict(Z)\nprint('The output of the first four predicted value is: ', Y_predict_multifit[0:4])","c2da198b":"from sklearn.metrics import mean_squared_error\nmse = mean_squared_error(df['price'], Y_predict_multifit)\nprint('The mean square error of price and predicted value is: ', mse)","cc23e16a":"width=12\nheight=7\nplt.figure(figsize=(width, height))\nax1 = sn.distplot(df['price'], hist=False, color=\"r\", label=\"Actual Value\")\nsn.distplot(Y_predict_multifit, hist=False, color=\"b\", label=\"Fitted Values\" , ax=ax1)\nplt.title('Actual vs Fitted Values for Price', fontsize=25)\nplt.xlabel('Price (in dollars)', fontsize=25)\nplt.ylabel('Proportion of Cars', fontsize=25)\nplt.show()\nplt.close()","dccbb357":"**Insights and information about the data**","2b592471":"**Dealing with missed values**","b333e8c3":"****Distribution Plot (Visualization of the multiple linear regression)****","565a5f48":"**Correcting data formats**","b4822f33":"**Importing our data**","12b39043":"Now we have finally obtained the cleaned dataset with no missing values with all data in its proper\nformat.","10697992":"as we see, the most popular cars are toyota, the fuel type is gas, aspiration is std, doorcounts is four, style is sedan , drive is fwd, engine is front, engine type is ohc, cylcount is four, & fuelsys is mpfi.","2c3f1916":"****Calculating The mean square error****","fa7eba2a":"****Model Development****"}}