{"cell_type":{"97f17ef5":"code","33cd7012":"code","a56d1708":"code","2bb76fa1":"code","eb3a53f3":"code","43428dd5":"code","e2a58c4f":"code","27002e81":"code","bdaba5d7":"code","9841ea78":"code","8034fd4a":"code","6d9f546a":"code","3d8a726e":"code","36745eed":"code","96e99e33":"markdown","002eee39":"markdown","cbc4efe2":"markdown","89f3945a":"markdown","a28c6357":"markdown","3393b575":"markdown","1e73db13":"markdown","0f72bec6":"markdown","82b9a0ef":"markdown","27faa3ab":"markdown","21107867":"markdown"},"source":{"97f17ef5":"import pandas as pd\nimport numpy as np\nimport re\nfrom bs4 import BeautifulSoup\nimport emoji\nfrom transformers import AutoTokenizer, AutoModel,AdamW\nfrom tqdm import tqdm\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nfrom torch.utils.data import Dataset, DataLoader\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import mean_squared_error\nfrom colorama import Fore, Back, Style\nimport gc\nimport copy\nimport time\nimport random\nimport string\nimport os\nfrom collections import defaultdict\nb_ = Fore.BLUE\ny_ = Fore.YELLOW\nsr_ = Style.RESET_ALL\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nos.environ['CUDA_LAUNCH_BLOCKING'] = \"1\"\n\n\nimport wandb\n\ntry:\n    from kaggle_secrets import UserSecretsClient\n    user_secrets = UserSecretsClient()\n    api_key = user_secrets.get_secret(\"wandb_api\")\n    wandb.login(key=api_key)\n    anony = None\nexcept:\n    anony = \"must\"\n    print('If you want to use your W&B account, go to Add-ons -> Secrets and provide your W&B access token. Use the Label name as wandb_api. \\nGet your W&B access token from here: https:\/\/wandb.ai\/authorize')","33cd7012":"CONFIG = {\"seed\": 2021,\n          \"epochs\": 5,\n          \"model_name\": \"..\/input\/constrastive-tension-roberta-large\/ct-stsb\",\n          \"train_batch_size\": 32,\n          \"valid_batch_size\": 64,\n          \"max_length\": 128,\n          \"learning_rate\": 1e-4,\n          \"scheduler\": 'CosineAnnealingLR',\n          \"min_lr\": 1e-6,\n          \"T_max\": 500,\n          \"weight_decay\": 1e-6,\n          \"n_fold\": 5,\n          \"n_accumulate\": 1,\n          \"num_classes\": 1,\n          \"margin\": 0.5,\n          \"device\": torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n          }\nCONFIG[\"tokenizer\"] = AutoTokenizer.from_pretrained(CONFIG['model_name'])\ndef id_generator(size=12, chars=string.ascii_lowercase + string.digits):\n    return ''.join(random.SystemRandom().choice(chars) for _ in range(size))\n\nHASH_NAME = id_generator(size=12)\nprint(HASH_NAME)\nCONFIG['group'] = f'{HASH_NAME}-Baseline'\n","a56d1708":"def set_seed(seed=42):\n    '''Sets the seed of the entire notebook so results are the same every time we run.\n    This is for REPRODUCIBILITY.'''\n    np.random.seed(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    # When running on the CuDNN backend, two further options must be set\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    # Set a fixed value for the hash seed\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    \nset_seed(CONFIG['seed'])","2bb76fa1":"df=pd.read_csv('..\/input\/jigsaw-toxic-severity-rating\/validation_data.csv')\ndef clean_data(text):\n    # remove website links\n    template = re.compile(r'https?:\/\/\\S+|www\\.\\S+')\n    text=template.sub(r'',text)\n    # remove html tags\n    soup=BeautifulSoup(text,'lxml')\n    text=soup.get_text()\n    # remove emoji\n    text=emoji.get_emoji_regexp().sub(r'',text.encode('utf-8').decode('utf-8'))\n    # remove special Charecters\n    text = re.sub(r\"[^a-zA-Z\\d]\", \" \", text)\n    # remove Extra Spaces\n    text = re.sub(' +', ' ', text)\n    # remove spaces at the beginning and at the end of string\n    text = text.strip()\n    # lower the text\n    text=text.lower()\n\n    return text\ndf['less_toxic']=df['less_toxic'].apply(clean_data)\ndf['more_toxic']=df['more_toxic'].apply(clean_data)\n","eb3a53f3":"skf = StratifiedKFold(n_splits=CONFIG['n_fold'], shuffle=True, random_state=CONFIG['seed'])\n\nfor fold, ( _, val_) in enumerate(skf.split(X=df, y=df.worker)):\n    df.loc[val_ , \"kfold\"] = int(fold)\n    \ndf[\"kfold\"] = df[\"kfold\"].astype(int)","43428dd5":"class CT_Dataset(Dataset):\n    def __init__(self, dataset, tokenizer, max_length):\n        self.dataset = dataset\n        self.max_len = max_length\n        self.tokenizer = tokenizer\n        self.more_toxic = dataset['more_toxic'].values\n        self.less_toxic = dataset['less_toxic'].values\n        \n    def __len__(self):\n        return len(self.dataset)\n\n    def __getitem__(self, index):\n        more_toxic = self.more_toxic[index]\n        less_toxic = self.less_toxic[index]\n        inputs_more_toxic = self.tokenizer.encode_plus(\n                                more_toxic,\n                                truncation=True,\n                                add_special_tokens=True,\n                                max_length=self.max_len,\n                                padding='max_length'\n                            )\n        inputs_less_toxic = self.tokenizer.encode_plus(\n                                less_toxic,\n                                truncation=True,\n                                add_special_tokens=True,\n                                max_length=self.max_len,\n                                padding='max_length'\n                            )\n        target=1\n        \n        more_toxic_ids = inputs_more_toxic['input_ids']\n        more_toxic_mask = inputs_more_toxic['attention_mask']\n        \n        less_toxic_ids = inputs_less_toxic['input_ids']\n        less_toxic_mask = inputs_less_toxic['attention_mask']\n        \n        return {\n            'more_toxic_ids': torch.tensor(more_toxic_ids, dtype=torch.long),\n            'more_toxic_mask': torch.tensor(more_toxic_mask, dtype=torch.long),\n            'less_toxic_ids': torch.tensor(less_toxic_ids, dtype=torch.long),\n            'less_toxic_mask': torch.tensor(less_toxic_mask, dtype=torch.long),\n            'target': torch.tensor(target, dtype=torch.long)\n        }","e2a58c4f":"class CT_Roberta(nn.Module):\n    def __init__(self,model_name):\n        super(CT_Roberta,self).__init__()\n        self.model1=AutoModel.from_pretrained(model_name,output_hidden_states=True)\n        \n    def generate_single_emb(self,model,input_ids,attention_mask):\n        output=model(input_ids,attention_mask)\n        emb=output.hidden_states[0]\n        input_mask_expanded=torch.unsqueeze(attention_mask,axis=-1).expand(emb.size()).float()\n        sum_emb=torch.sum(emb*input_mask_expanded,1)\n        length=input_mask_expanded.sum(1)\n        length=torch.clamp(length,min=1e-9)\n        mean_emb=sum_emb\/length\n        return mean_emb\n        \n    def forward(self,inputs_ids,attention_mask):\n        emb1=self.generate_single_emb(self.model1,inputs_ids,attention_mask)\n        \n        return emb1\n        \n        ","27002e81":"def criterion(outputs1, outputs2, targets):\n    return nn.CosineEmbeddingLoss(margin=0.5)(outputs1, outputs2, targets)","bdaba5d7":"def train_one_epoch(model, optimizer, scheduler, dataloader, device, epoch):\n    model.train()\n    \n    dataset_size = 0\n    running_loss = 0.0\n    \n    bar = tqdm(enumerate(dataloader), total=len(dataloader))\n    for step, data in bar:\n        more_toxic_ids = data['more_toxic_ids'].to(device, dtype = torch.long)\n        more_toxic_mask = data['more_toxic_mask'].to(device, dtype = torch.long)\n        less_toxic_ids = data['less_toxic_ids'].to(device, dtype = torch.long)\n        less_toxic_mask = data['less_toxic_mask'].to(device, dtype = torch.long)\n        targets = data['target'].to(device, dtype=torch.long)\n        \n        batch_size = more_toxic_ids.size(0)\n\n        more_toxic_outputs = model(more_toxic_ids, more_toxic_mask)\n        less_toxic_outputs = model(less_toxic_ids, less_toxic_mask)\n        \n        loss = criterion(more_toxic_outputs, less_toxic_outputs, targets)\n        loss = loss \/ CONFIG['n_accumulate']\n        loss.backward()\n    \n        if (step + 1) % CONFIG['n_accumulate'] == 0:\n            optimizer.step()\n\n            # zero the parameter gradients\n            optimizer.zero_grad()\n\n            if scheduler is not None:\n                scheduler.step()\n                \n        running_loss += (loss.item() * batch_size)\n        dataset_size += batch_size\n        \n        epoch_loss = running_loss \/ dataset_size\n        \n        bar.set_postfix(Epoch=epoch, Train_Loss=epoch_loss,\n                        LR=optimizer.param_groups[0]['lr'])\n    gc.collect()\n    \n    return epoch_loss\n","9841ea78":"@torch.no_grad()\ndef valid_one_epoch(model, dataloader, device, epoch):\n    model.eval()\n    \n    dataset_size = 0\n    running_loss = 0.0\n    \n    bar = tqdm(enumerate(dataloader), total=len(dataloader))\n    for step, data in bar:        \n        more_toxic_ids = data['more_toxic_ids'].to(device, dtype = torch.long)\n        more_toxic_mask = data['more_toxic_mask'].to(device, dtype = torch.long)\n        less_toxic_ids = data['less_toxic_ids'].to(device, dtype = torch.long)\n        less_toxic_mask = data['less_toxic_mask'].to(device, dtype = torch.long)\n        targets = data['target'].to(device, dtype=torch.long)\n        \n        batch_size = more_toxic_ids.size(0)\n\n        more_toxic_outputs = model(more_toxic_ids, more_toxic_mask)\n        less_toxic_outputs = model(less_toxic_ids, less_toxic_mask)\n        \n        loss = criterion(more_toxic_outputs, less_toxic_outputs, targets)\n        \n        running_loss += (loss.item() * batch_size)\n        dataset_size += batch_size\n        \n        epoch_loss = running_loss \/ dataset_size\n        \n        bar.set_postfix(Epoch=epoch, Valid_Loss=epoch_loss,\n                        LR=optimizer.param_groups[0]['lr'])   \n    \n    gc.collect()\n    \n    return epoch_loss","8034fd4a":"def run_training(model, optimizer, scheduler, device, num_epochs, fold):\n    \n    #wandb.watch(model, log_freq=100)\n    \n    if torch.cuda.is_available():\n        print(\"[INFO] Using GPU: {}\\n\".format(torch.cuda.get_device_name()))\n    \n    start = time.time()\n    best_model_wts = copy.deepcopy(model.state_dict())\n    best_epoch_loss = np.inf\n    history = defaultdict(list)\n    \n    for epoch in range(1, num_epochs + 1): \n        gc.collect()\n        train_epoch_loss = train_one_epoch(model, optimizer, scheduler, \n                                           dataloader=train_loader, \n                                           device=CONFIG['device'], epoch=epoch)\n        \n        val_epoch_loss = valid_one_epoch(model, valid_loader, device=CONFIG['device'], \n                                         epoch=epoch)\n    \n        history['Train Loss'].append(train_epoch_loss)\n        history['Valid Loss'].append(val_epoch_loss)\n        \n        # Log the metrics\n        #wandb.log({\"Train Loss\": train_epoch_loss})\n        #wandb.log({\"Valid Loss\": val_epoch_loss})\n        print({\"Train Loss\": train_epoch_loss})\n        print({\"Valid Loss\": val_epoch_loss})\n        \n        # deep copy the model\n        if val_epoch_loss <= best_epoch_loss:\n            print(f\"{b_}Validation Loss Improved ({best_epoch_loss} ---> {val_epoch_loss})\")\n            best_epoch_loss = val_epoch_loss\n            #run.summary[\"Best Loss\"] = best_epoch_loss\n            best_model_wts = copy.deepcopy(model.state_dict())\n            PATH = f\"Loss-Fold-{fold}.bin\"\n            torch.save(model.state_dict(), PATH)\n            # Save a model file from the current directory\n            print(f\"Model Saved{sr_}\")\n            \n        print()\n    \n    end = time.time()\n    time_elapsed = end - start\n    print('Training complete in {:.0f}h {:.0f}m {:.0f}s'.format(\n        time_elapsed \/\/ 3600, (time_elapsed % 3600) \/\/ 60, (time_elapsed % 3600) % 60))\n    print(\"Best Loss: {:.4f}\".format(best_epoch_loss))\n    \n    # load best model weights\n    model.load_state_dict(best_model_wts)\n    \n    return model, history","6d9f546a":"def prepare_loaders(fold):\n    df_train = df[df.kfold != fold].reset_index(drop=True)\n    df_valid = df[df.kfold == fold].reset_index(drop=True)\n    \n    train_dataset = CT_Dataset(df_train, tokenizer=CONFIG['tokenizer'], max_length=CONFIG['max_length'])\n    valid_dataset = CT_Dataset(df_valid, tokenizer=CONFIG['tokenizer'], max_length=CONFIG['max_length'])\n\n    train_loader = DataLoader(train_dataset, batch_size=CONFIG['train_batch_size'], \n                              num_workers=2, shuffle=True, pin_memory=True, drop_last=True)\n    valid_loader = DataLoader(valid_dataset, batch_size=CONFIG['valid_batch_size'], \n                              num_workers=2, shuffle=False, pin_memory=True)\n    \n    return train_loader, valid_loader","3d8a726e":"def fetch_scheduler(optimizer):\n    if CONFIG['scheduler'] == 'CosineAnnealingLR':\n        scheduler = lr_scheduler.CosineAnnealingLR(optimizer,T_max=CONFIG['T_max'], \n                                                   eta_min=CONFIG['min_lr'])\n    elif CONFIG['scheduler'] == 'CosineAnnealingWarmRestarts':\n        scheduler = lr_scheduler.CosineAnnealingWarmRestarts(optimizer,T_0=CONFIG['T_0'], \n                                                             eta_min=CONFIG['min_lr'])\n    elif CONFIG['scheduler'] == None:\n        return None\n        \n    return scheduler","36745eed":"for fold in range(0, CONFIG['n_fold']):\n    print(f\"{y_}====== Fold: {fold} ======{sr_}\")\n    #run = wandb.init(project='Jigsaw', \n                     #config=CONFIG,\n                     #job_type='Train',\n                     #group=CONFIG['group'],\n                     #tags=['RoBerta-Large-CT-STSb', f'{HASH_NAME}', 'margin-loss'],\n                     #name=f'{HASH_NAME}-fold-{fold}',\n                     #anonymous='must')\n    \n    # Create Dataloaders\n    train_loader, valid_loader = prepare_loaders(fold=fold)\n    \n    model = CT_Roberta(CONFIG['model_name'])\n    model.to(CONFIG['device'])\n    \n    # Define Optimizer and Scheduler\n    optimizer = AdamW(model.parameters(), lr=CONFIG['learning_rate'], weight_decay=CONFIG['weight_decay'])\n    scheduler = fetch_scheduler(optimizer)\n    \n    model, history = run_training(model, optimizer, scheduler,\n                                  device=CONFIG['device'],\n                                  num_epochs=CONFIG['epochs'],\n                                  fold=fold)\n    \n    #run.finish()\n    _ = gc.collect()\n    print()","96e99e33":"**Create Fold**","002eee39":"**Create Model**","cbc4efe2":"**Loss Function**","89f3945a":"**Dataset**","a28c6357":"**Set Seed**","3393b575":"**Data process**","1e73db13":"**Training Function**","0f72bec6":"**Config**","82b9a0ef":"1. **Contrastive-Tension** is a SOTA STS model, first produced by SEMANTIC RE-TUNING WITH CONTRASTIVE TENSION on ICLR 2021.[the paper is here](https:\/\/openreview.net\/pdf?id=Ov_sMNau-PF).\n2. the main idea of Contrastive-Tension is to **use embedding to calculate the coisine similarity of sentence pairs**.so it does not need label datas and is much faster. Another point about this model is to **use positive and negative samples to extract features**.\n3. the loss function i use is **CosineEmbeddingLoss**, [here is the official document](https:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.CosineEmbeddingLoss.html#torch.nn.CosineEmbeddingLoss)\n4. i use the frame of [this notebook](https:\/\/www.kaggle.com\/debarshichanda\/pytorch-w-b-jigsaw-starter#Dataset-Class) but change the model and loss function. i am impressed by wandb. this package is wonderful.\n\n","27faa3ab":"**Run Training**","21107867":"**Validation Function**"}}