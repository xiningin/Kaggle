{"cell_type":{"15fcb148":"code","f1e209ad":"code","4492be37":"code","0b3cf878":"code","6ffa39e7":"code","6a3fa960":"code","ad6ef7f5":"code","b56e823d":"code","0c01eed6":"code","c2b2fecf":"code","15ea1809":"code","8b8f8fa3":"code","c904dd50":"code","c55c0b59":"code","5bef203f":"code","25d82654":"markdown","45650d03":"markdown","8b0016d0":"markdown","024d8405":"markdown","d70e0232":"markdown","12ad60ee":"markdown","68600201":"markdown","8929c762":"markdown","4a60e8b0":"markdown"},"source":{"15fcb148":"import numpy as np # linear algebra\nimport matplotlib.pyplot as plt\n\nfrom tensorflow.keras.datasets import fashion_mnist\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras import models, layers","f1e209ad":"((trainX, trainY), (testX, testY)) = fashion_mnist.load_data()\nprint(trainX.shape)\nprint(testX.shape)","4492be37":"labels = [\"top\", \"trouser\", \"pullover\", \"dress\", \"coat\", \"sandal\", \"shirt\", \"sneaker\", \"bag\", \"ankle boot\"]\n\n# Show image of training data\nplt.figure(figsize = (10, 10)) # set size of figure 10x10\nrand_indexes = np.random.randint(0, trainX.shape[0], 10) # select 10 training data randomly \nprint(rand_indexes)\nfor index,im_index in enumerate(rand_indexes):\n    plt.subplot(5, 5, index+1)\n    plt.imshow(trainX[im_index], cmap = 'gray', interpolation = 'none')\n    plt.title(labels[trainY[im_index]])\nplt.tight_layout()","0b3cf878":"# reshape for model's input_shape\nX_train = trainX.reshape((trainX.shape[0], 28,28,1))\nX_test  = testX.reshape((testX.shape[0], 28,28,1))","6ffa39e7":"# normalization\nX_train = X_train.astype(\"float32\") \/255.0\nX_test  = X_test.astype(\"float32\")  \/255.0\n\nprint(X_train.shape)\nprint(X_test.shape)","6a3fa960":"# one-hot encoding\ny_train = to_categorical(trainY)\ny_test  = to_categorical(testY)\n\nprint(y_train.shape)\nprint(y_test.shape)","ad6ef7f5":"num_classes = 10\ninput_shape = (28, 28, 1)","b56e823d":"# Build Model\nmodel = models.Sequential()\n\nmodel.add(layers.Conv2D(32, kernel_size=(3, 3), padding='same', activation='relu', input_shape=input_shape))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Dropout(0.25))\n\nmodel.add(layers.Conv2D(64, (3, 3), padding='same', activation='relu'))\nmodel.add(layers.MaxPooling2D(pool_size=(2, 2)))\nmodel.add(layers.Dropout(0.25))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(128, activation='relu'))\nmodel.add(layers.Dropout(0.3))\nmodel.add(layers.Dense(num_classes, activation='softmax'))\n\nmodel.summary()","0c01eed6":"# Compile Model\nmodel.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])","c2b2fecf":"batch_size = 32\nnum_epochs = 25","15ea1809":"# Train Model\nhist = model.fit(X_train, y_train, batch_size=batch_size, epochs=num_epochs, validation_data=(X_test, y_test))","8b8f8fa3":"# Evaluate Model\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])","c904dd50":"# Selecd a Test data\npreds = model.predict(X_test[0].reshape(-1,28,28,1))\nprint(preds)\nprint(int(np.argmax(preds)))\n\nprint(y_test[0])\nprint(int(np.argmax(y_test[0])))","c55c0b59":"# Random Selection\nrand_indexes = np.random.randint(0, testX.shape[0], 10) # select 10 testdata randomly \nprint(rand_indexes)","5bef203f":"# Show image of test data\nplt.figure(figsize = (10, 10)) # set size of figure 10x10\n\nfor index,im_index in enumerate(rand_indexes):\n    plt.subplot(5, 5, index+1)\n    plt.imshow(testX[im_index], cmap = 'gray', interpolation = 'none')\n    \n    preds = model.predict(X_test[im_index].reshape(-1,28,28,1))\n    \n    maxindex = int(np.argmax(preds)) # maxindex = index of max. probility \n    if maxindex==testY[im_index]: \n        plt.title(labels[maxindex], color='green') # title in green if match\n    else:\n        plt.title(labels[maxindex], color='red')   # title in red if mismatch \nplt.tight_layout()","25d82654":"### *Random Test*","45650d03":"## Train Model","8b0016d0":"## Test Model","024d8405":"# Fashion MNIST\n![](https:\/\/miro.medium.com\/max\/638\/1*PtQ2I-3RIFiCypor4u_Nbg.jpeg)","d70e0232":"## Dataset\n* 60,000 training examples\n* 10,000 testing examples\n* 10 classes\n* 28\u00d728 grayscale\/single channel images\n\n### 10 classes: T-shirt\/Top, Trouser, Pullover, Dress, Coat, Sandal, Shirt, Sneaker, Bag, Ankle boot\n","12ad60ee":"## Prepare Train\/Validation Dataset","68600201":"## Load Dataset\n**fashion_mnist** (Tensorflow.Keras built-in)","8929c762":"## Evaluate Model","4a60e8b0":"## Built Model"}}