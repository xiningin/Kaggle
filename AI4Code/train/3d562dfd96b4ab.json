{"cell_type":{"4be46473":"code","f948bcbd":"code","67319820":"code","d2cbf809":"code","effe08ee":"code","077629f4":"code","4903d05d":"code","7e8e9e35":"code","808c7328":"code","b0ea9f0b":"code","418e9a35":"code","5939805a":"code","0bf95759":"code","51353032":"code","f2accc43":"code","6bed1cfd":"code","aed4c813":"code","1fd9dd33":"code","8f3969ff":"code","aa461cb0":"code","842d51e0":"code","b61f017a":"code","84a67bad":"code","608e156e":"code","03dba60d":"code","0188d86c":"code","f2c77c6a":"markdown","c69c7bba":"markdown","f2792ebf":"markdown","11990f19":"markdown","24f30a72":"markdown","3a6229e4":"markdown","c3e38494":"markdown","885c4cf5":"markdown","8fc41c0b":"markdown","80d39350":"markdown","bfa34111":"markdown","c1ef591e":"markdown"},"source":{"4be46473":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport pandas as pd\nimport pickle\n\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras import backend as K\nfrom sklearn.utils import shuffle\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimport zipfile ","f948bcbd":"train = pd.read_csv(\"..\/input\/histopathologic-cancer-detection\/train_labels.csv\", dtype=str)\nprint(train.shape)","67319820":"train.head(10)","d2cbf809":"y_train = train.label\n\n(train.label.value_counts() \/ len(train)).to_frame().T","effe08ee":"plt.figure(figsize=(10,10)) \n\nfor i in range(16):\n    plt.subplot(4,4,i+1)   \n    img = mpimg.imread(f'..\/input\/histopathologic-cancer-detection\/train\/{train[\"id\"][i]}.tif')\n    plt.imshow(img)\n    plt.text(0, -5, f'Label {train[\"label\"][i]}')\n    plt.axis('off')\n    \nplt.tight_layout()\nplt.show()","077629f4":"train_neg = train[train['label']=='0'].sample(10000,random_state=45)\ntrain_pos = train[train['label']=='1'].sample(10000,random_state=45)\n\ntrain_data = pd.concat([train_neg, train_pos], axis=0).reset_index(drop=True)\n\ntrain = shuffle(train_data)","4903d05d":"train['label'].value_counts()","7e8e9e35":"def append_ext(fn):\n    return fn+\".tif\"\n\n\ntrain['id'] = train['id'].apply(append_ext)\ntrain.head()","808c7328":"train_df, valid_df = train_test_split(train, test_size=0.2, random_state=45, stratify=train.label)\n\nprint(train_df.shape)\nprint(valid_df.shape)","b0ea9f0b":"train_datagen = ImageDataGenerator(rescale=1\/255)\nvalid_datagen = ImageDataGenerator(rescale=1\/255)","418e9a35":"BATCH_SIZE = 64\n\ntrain_loader = train_datagen.flow_from_dataframe(\n    dataframe = train_df,\n    directory = '..\/input\/histopathologic-cancer-detection\/train\/',\n    x_col = 'id',\n    y_col = 'label',\n    batch_size = BATCH_SIZE,\n    seed = 1,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = (32,32)\n)\n\nvalid_loader = train_datagen.flow_from_dataframe(\n    dataframe = valid_df,\n    directory = '..\/input\/histopathologic-cancer-detection\/train\/',\n    x_col = 'id',\n    y_col = 'label',\n    batch_size = BATCH_SIZE,\n    seed = 1,\n    shuffle = True,\n    class_mode = 'categorical',\n    target_size = (32,32)\n)","5939805a":"TR_STEPS = len(train_loader)\nVA_STEPS = len(valid_loader)\n\nprint(TR_STEPS)\nprint(VA_STEPS)","0bf95759":"base_model = tf.keras.applications.VGG16(input_shape=(32,32,3),\n                                         include_top=False,\n                                         weights='imagenet')\n\nbase_model.trainable = False","51353032":"base_model.summary()","f2accc43":"cnn1 = Sequential([\n    base_model,\n    \n    Flatten(),\n    \n    Dense(32, activation='relu'),\n    Dropout(0.5),\n    Dense(16, activation='relu'),\n    Dropout(0.25),\n    BatchNormalization(),\n    Dense(2, activation='softmax')\n])\n\ncnn1.summary()","6bed1cfd":"opt = tf.keras.optimizers.Adam(0.001)\ncnn1.compile(loss='categorical_crossentropy', optimizer=opt, metrics=['accuracy', tf.keras.metrics.AUC()])","aed4c813":"%%time \n\nh1 = cnn1.fit(\n    x = train_loader, \n    steps_per_epoch = TR_STEPS, \n    epochs = 15,\n    validation_data = valid_loader, \n    validation_steps = VA_STEPS, \n    verbose = 1\n)","1fd9dd33":"history = h1.history\nprint(history.keys())","8f3969ff":"epoch_range = range(1, len(history['loss'])+1)\n\nplt.figure(figsize=[14,4])\n\nplt.subplot(1,3,1)\nplt.plot(epoch_range, history['loss'], label='Training')\nplt.plot(epoch_range, history['val_loss'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Loss'); plt.title('Loss')\nplt.legend()\n\nplt.subplot(1,3,2)\nplt.plot(epoch_range, history['accuracy'], label='Training')\nplt.plot(epoch_range, history['val_accuracy'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Accuracy'); plt.title('Accuracy')\nplt.legend()\n\nplt.subplot(1,3,3)\nplt.plot(epoch_range, history['auc'], label='Training')\nplt.plot(epoch_range, history['val_auc'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('AUC'); plt.title('AUC')\nplt.legend()\n\nplt.tight_layout()\nplt.show()","aa461cb0":"tf.keras.backend.set_value(cnn1.optimizer.learning_rate, 0.0001)","842d51e0":"%%time \n\nh2 = cnn1.fit(\n    x = train_loader, \n    steps_per_epoch = TR_STEPS, \n    epochs = 20,\n    validation_data = valid_loader, \n    validation_steps = VA_STEPS, \n    verbose = 1\n)","b61f017a":"for k in history.keys():\n    history[k] += h2.history[k]\n\nepoch_range = range(1, len(history['loss'])+1)\n\nplt.figure(figsize=[14,4])\nplt.subplot(1,3,1)\nplt.plot(epoch_range, history['loss'], label='Training')\nplt.plot(epoch_range, history['val_loss'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Loss'); plt.title('Loss')\nplt.legend()\nplt.subplot(1,3,2)\nplt.plot(epoch_range, history['accuracy'], label='Training')\nplt.plot(epoch_range, history['val_accuracy'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Accuracy'); plt.title('Accuracy')\nplt.legend()\nplt.subplot(1,3,3)\nplt.plot(epoch_range, history['auc'], label='Training')\nplt.plot(epoch_range, history['val_auc'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('AUC'); plt.title('AUC')\nplt.legend()\nplt.tight_layout()\nplt.show()","84a67bad":"tf.keras.backend.set_value(cnn1.optimizer.learning_rate, 0.00001)","608e156e":"%%time \n\nh3 = cnn1.fit(\n    x = train_loader, \n    steps_per_epoch = TR_STEPS, \n    epochs = 30,\n    validation_data = valid_loader, \n    validation_steps = VA_STEPS, \n    verbose = 1\n)","03dba60d":"for k in history.keys():\n    history[k] += h3.history[k]\n\nepoch_range = range(1, len(history['loss'])+1)\n\nplt.figure(figsize=[14,4])\nplt.subplot(1,3,1)\nplt.plot(epoch_range, history['loss'], label='Training')\nplt.plot(epoch_range, history['val_loss'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Loss'); plt.title('Loss')\nplt.legend()\nplt.subplot(1,3,2)\nplt.plot(epoch_range, history['accuracy'], label='Training')\nplt.plot(epoch_range, history['val_accuracy'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('Accuracy'); plt.title('Accuracy')\nplt.legend()\nplt.subplot(1,3,3)\nplt.plot(epoch_range, history['auc'], label='Training')\nplt.plot(epoch_range, history['val_auc'], label='Validation')\nplt.xlabel('Epoch'); plt.ylabel('AUC'); plt.title('AUC')\nplt.legend()\nplt.tight_layout()\nplt.show()","0188d86c":"cnn1.save('cancer_model_v02.h5')\npickle.dump(history, open(f'cancer_history_v02.pkl', 'wb'))","f2c77c6a":"# Training Run 1","c69c7bba":"# Build Network","f2792ebf":"# Label Distribution","11990f19":"# Train Network","24f30a72":"# Data Generators","3a6229e4":"# Load Packages","c3e38494":"# Save Model and History","885c4cf5":"# Split and Sample Data","8fc41c0b":"# Training Run 2","80d39350":"# Training Run 3","bfa34111":"# Load DataFrame","c1ef591e":"# View Sample of Images"}}