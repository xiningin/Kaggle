{"cell_type":{"89773805":"code","ed30d7b0":"code","4a187999":"code","56e390b0":"code","933c4d72":"code","841e768b":"code","78a348a4":"code","697f7c2b":"code","1935d1a4":"code","0c297f27":"code","21b21052":"code","03648381":"code","4af4ee73":"code","1506153b":"code","206cd50f":"code","621dd803":"code","b388c793":"code","9f049fa0":"code","7c508913":"code","4d38182c":"code","18c750e2":"code","d67e0aba":"code","cba26bd8":"code","8887ae5a":"code","e9d1ba98":"code","49106f07":"code","5574f853":"code","bd04a233":"code","c3ef1f26":"code","6c5769d4":"code","9efc32e6":"code","98881786":"code","d609fccc":"code","6f37af2e":"code","a900e2af":"code","9129470a":"code","6ade9736":"code","aedc49e0":"code","1f7ef64b":"code","0b277245":"code","4f6aec59":"code","5ef2c7b1":"code","4d2ea884":"code","c1b086b0":"code","2cca2490":"code","b2b31c26":"code","e9009e2f":"code","5d950b66":"code","10de63c5":"code","00aa2811":"code","5972612c":"code","c5bc0d29":"code","a66872c7":"code","b2d86d8b":"code","dd5af47d":"code","f2228f27":"code","684c2e83":"code","17fbf468":"code","3fa1240d":"code","28a6851b":"markdown","7796504e":"markdown","bd05ec2a":"markdown","10bb0a88":"markdown","a185fdb0":"markdown","a02df331":"markdown","316613bc":"markdown","6a805319":"markdown","a40e7015":"markdown","9eb7ea9a":"markdown","a2bf25e1":"markdown","510ac20e":"markdown","d927707e":"markdown","b18bdd7a":"markdown","8ae74583":"markdown","0563e9b0":"markdown","cb176c52":"markdown","26f7b767":"markdown","691a4e8e":"markdown","8757f6b0":"markdown","d0005d31":"markdown","aba7f91b":"markdown","a5a8708c":"markdown","31c51ef6":"markdown","152b53f0":"markdown","16334414":"markdown","23c9f0ce":"markdown","4565b139":"markdown","a7c86526":"markdown","a0992aa4":"markdown","3c76d82c":"markdown","83c4825b":"markdown","9e875cb9":"markdown","4cd34db6":"markdown","a4381ac7":"markdown","e27ab089":"markdown","a94b78b3":"markdown","6464b4a4":"markdown","7c69f39e":"markdown","18103e31":"markdown","1f11130d":"markdown","c362d140":"markdown","0fd796ed":"markdown","7b6da71e":"markdown","2f7375aa":"markdown","af6174f8":"markdown","f00824ab":"markdown","3ce83432":"markdown","1bb3dcca":"markdown","d20cb31c":"markdown","3f28a9ae":"markdown","c45a32fc":"markdown","de6fde38":"markdown","9c34f691":"markdown","df65dcb9":"markdown","3687f364":"markdown","6897e3cb":"markdown","4dc0d637":"markdown","64573602":"markdown","f0f87bc4":"markdown","9062c384":"markdown","8eed9b3c":"markdown","9a53af1a":"markdown","fa6bbb75":"markdown","79464b75":"markdown","25cad3af":"markdown","4ff33d93":"markdown"},"source":{"89773805":"import os\nimport pytz\nimport random\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom datetime import datetime,date,timedelta \nimport datetime as dt\nimport time\nimport calendar\nfrom pandas.tseries import offsets\n\nfrom pytz import all_timezones\nfrom pytz import common_timezones\n\nimport holidays\n\n# Plotly\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.figure_factory as ff\nfrom plotly.colors import n_colors\nimport plotly.graph_objs as go\ninit_notebook_mode()","ed30d7b0":"df=pd.read_csv('..\/input\/meta-kaggle\/Kernels.csv')\ndf=df.dropna()\ndf.head(3)","4a187999":"df['CreationDate'] = pd.to_datetime(df['CreationDate'],format='%m\/%d\/%Y %H:%M:%S')","56e390b0":"print(\"What is the time now : {}\".format(datetime.now()),\"- by Default timezone is UTC\")","933c4d72":"print(\"I am in India.What is the date time now : {}\".format(datetime.now(pytz.timezone('Asia\/Kolkata'))))","841e768b":"random.choices(common_timezones,k=5)","78a348a4":"df['only_date'] = df['CreationDate'].dt.date\ndf[['CreationDate','only_date']][:3]","697f7c2b":"df['time'] = df['CreationDate'].dt.time\ndf[['CreationDate','time']][:3]","1935d1a4":"df['year'] = df['CreationDate'].dt.year.astype('Int16')\ndf[['CreationDate','year']][:3]","0c297f27":"df['month'] = df['CreationDate'].dt.month.astype('Int8')\ndf[['CreationDate','month']][:3]","21b21052":"df['month_name'] = df['CreationDate'].dt.strftime('%B') \ndf[['CreationDate','month_name']][:3]","03648381":"df['day'] = df['CreationDate'].dt.day.astype('Int8')\ndf[['CreationDate','day']][:3]","4af4ee73":"df['weekday'] = df['CreationDate'].dt.strftime('%A')  \ndf[['CreationDate','weekday']].sample(3)","1506153b":"df['week_num'] = df['CreationDate'].dt.strftime('%W') #  (Monday as first day)\ndf[['CreationDate','week_num']][:3]","206cd50f":"df['period'] = df['CreationDate'].dt.strftime('%p')\ndf[['CreationDate','period']][:3]","621dd803":"element = datetime.strptime('03\/25\/2015 13:49:55',\"%m\/%d\/%Y %H:%M:%S\")  \ntimestamp = datetime.timestamp(element) \nprint(timestamp)","b388c793":"old_date=min(df['CreationDate'])\nlatest_date=max(df['CreationDate'])\nprint(\"Oldest datetime :{}\".format(old_date))\nprint(\"Latest datetime :{}\".format(latest_date))","9f049fa0":"def random_future_date(start):\n    end = pd.to_datetime(\"2022-02-25 09:23:34\",format='%Y-%m-%d %H:%M:%S')  # We will set a random date\n    random_date = start + (end - start) * random.random()\n    return random_date.strftime(\"%Y-%m-%d %H:%M:%S\")","7c508913":"df['future_date']=df['CreationDate'].apply(lambda x:random_future_date(x))\ndf[['CreationDate','future_date']].sample(3)","4d38182c":"df['diff_year']=round((pd.to_datetime(df['future_date'])-pd.to_datetime(df['CreationDate'])).dt.days\/365).astype(int)\ndf[['CreationDate','future_date','diff_year']].sample(3)","18c750e2":"def months(d1,d2):\n    d1=pd.to_datetime(d1)\n    d2=pd.to_datetime(d2)\n    return (d1.year-d2.year)*12 + (d1.month-d2.month) ","d67e0aba":"df['diff_month']=df.apply(lambda x:months(x.future_date,x.CreationDate),axis=1)\ndf[['CreationDate','future_date','diff_month']].sample(3)","cba26bd8":"df['diff_days']=(pd.to_datetime(df['future_date'])-pd.to_datetime(df['CreationDate'])).dt.days\ndf[['CreationDate','future_date','diff_days']].sample(3)","8887ae5a":"df['diff_hours']=(df['diff_days']*24)+(((pd.to_datetime(df['future_date'])-pd.to_datetime(df['CreationDate'])).dt.seconds)\/\/ 3600).astype(int)\ndf[['CreationDate','future_date','diff_hours']].sample(3)","e9d1ba98":"df['diff_minutes']=(df['diff_days']*24*60)+(((pd.to_datetime(df['future_date'])-pd.to_datetime(df['CreationDate'])).dt.seconds)\/\/60).astype(int)\ndf[['CreationDate','future_date','diff_minutes']].sample(3)","49106f07":"df['add_days']=df['CreationDate']+timedelta(5)\ndf[['CreationDate','add_days']].sample(3)","5574f853":"df['add_hours_min']=df['CreationDate']+timedelta(hours=5,minutes=30)\ndf[['CreationDate','add_hours_min']].sample(3)","bd04a233":"((date.today() + offsets.YearEnd())-datetime.now()).days    ","c3ef1f26":"(datetime.now()-(date.today() - offsets.YearBegin())).days","6c5769d4":"def weekend(date):\n    date=pd.to_datetime(date)\n    if((date.strftime('%w')=='0')|(date.strftime('%w')=='6')):\n        return \"weekend\"\n    else:\n        return \"working day\"","9efc32e6":"df['weekend_or_not']=df['CreationDate'].apply(lambda x:weekend(x))\ndf[['CreationDate','weekday','weekend_or_not']].sample(3)","98881786":"def leap(date):\n    date=pd.to_datetime(date)\n    if(date.year%4==0):\n        return \"leap\"\n    else:\n        return \"non leap\"","d609fccc":"df['leap']=df['CreationDate'].apply(lambda x:leap(x))\ndf[['CreationDate','year','leap']].sample(3)","6f37af2e":"us_holidays=[]\nfor date in holidays.UnitedStates(years=2020).items():\n    us_holidays.append(str(date[0]))  #retrieve only dates\n    print(date)","a900e2af":"df['is_holiday']=[\"yes\" if str(val).split()[0] in us_holidays else \"no\" for val in df['CreationDate'].dt.date]\ndf.loc[df['is_holiday']==\"yes\"][['CreationDate','is_holiday']].sample(3)","9129470a":"df.loc[df['is_holiday']==\"no\"][['CreationDate','is_holiday']].sample(3)","6ade9736":"print(\"Calendar - June 2020\")\nprint(calendar.month(2020,6))\nprint(75*\"*\",\"\\n\")\nprint(\"Calendar - 2020\")\nprint(calendar.calendar(2020))","aedc49e0":"shift_df=df.loc[df['AuthorUserId']==5309][['CreationDate']]\nshift_df['diff_from_last_date']=(shift_df['CreationDate']-shift_df['CreationDate'].shift()).dt.days\nshift_df[:5]","1f7ef64b":"temp_df=df['MadePublicDate'].value_counts().to_frame().reset_index().rename(columns={'index':'MadePublicDate','MadePublicDate':'count'})\ntemp_df['MadePublicDate']=pd.to_datetime(temp_df['MadePublicDate'])\ntemp_df=temp_df.sort_values('MadePublicDate',ascending=False)\ntemp_df['Moving_Average']=temp_df.rolling(window=4).mean()\ntemp_df[:7] # This reveals that for every n days(window) an average of x kernels(mean of last n days) are made.","0b277245":"calendar=pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/calendar.csv\")\nsell_prices=pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sell_prices.csv\")\nsales_valid=pd.read_csv(\"..\/input\/m5-forecasting-accuracy\/sales_train_validation.csv\")","4f6aec59":"d_cols = [c for c in sales_valid.columns if 'd_' in c] \none_item=(sales_valid.loc[sales_valid['id'] == 'HOBBIES_1_234_CA_3_validation'][d_cols].T).reset_index().rename(columns={'index':'d', 6324:'HOBBIES_1_234_CA_3_validation'})\none_item=one_item.merge(calendar[['date','wm_yr_wk','weekday','wday','month','year','d']],how='left',validate='1:1')\none_item['date']=pd.to_datetime(one_item['date'])\none_item.head(3)","5ef2c7b1":"trace = go.Scatter(\n    y= one_item.HOBBIES_1_234_CA_3_validation, x= one_item.date,\n    mode= 'lines', line=dict(width=3),\n    name='Daily Sold Hobby Item'\n)\n\nlayout = go.Layout(autosize=True, title= '# of Units Sold Daily', showlegend=False)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)","4d2ea884":"monthly_df = one_item.groupby(['year','month'])['HOBBIES_1_234_CA_3_validation'].sum()\nmonthly_df.index = monthly_df.index.set_names(['year', 'month'])\nmonthly_df = monthly_df.reset_index()\n\n# Above lines can be replaced by these lines in terms of grouping.Both will produce same result\n#one_item['date'] = pd.to_datetime(one_item['date'],format='%Y-%m-%d')\n#month_df = one_item[[\"date\", \"HOBBIES_1_234_CA_3_validation\"]].set_index(\"date\").resample(\"M\").sum()\n\nx_axis = []\nfor y in range(11, 16):\n    for m in range(1,12):\n        x_axis.append(\"{}\/{}\".format(m,y))\ntrace = go.Scatter(x= x_axis, y= monthly_df.HOBBIES_1_234_CA_3_validation, mode= 'lines+markers', name= 'sales avg per month', line=dict(width=3))\nlayout = go.Layout(autosize=True, title= 'Units Sold - Total per month', showlegend=False)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)","c1b086b0":"year_df = one_item.groupby(['year'])['HOBBIES_1_234_CA_3_validation'].sum().to_frame()\n\n# Above line can be replaced by this line in terms of grouping year\n# year = one_item[[\"date\", \"HOBBIES_1_234_CA_3_validation\"]].set_index(\"date\").resample(\"Y\").sum()\n\ntrace = go.Scatter(\n    y= year_df.HOBBIES_1_234_CA_3_validation, x= ['2011','2012','2013','2014','2015','2016'],\n    mode= 'lines+markers', line=dict(width=3),\n    name='Units Sold - Total per year'\n)\n\nlayout = go.Layout(autosize=True, title= 'Units Sold - Total per year',xaxis_title=\"Year\", yaxis_title=\"Units Sold\",showlegend=False)\nfig = go.Figure(data=[trace], layout=layout)\niplot(fig)","2cca2490":"fig = go.Figure(data=go.Scatter(x=one_item['date'], y=one_item['HOBBIES_1_234_CA_3_validation'],\n                                mode='lines',\n                               marker_color='darkred')) \n\nfig.update_layout(title='Sales from July 2014 to Dec 2015',xaxis_title=\"Date\",yaxis_title=\"Number of Sales\",xaxis_range=['2014-06-01','2015-12-31'])\nfig.show()","b2b31c26":"monthly_df['date']=pd.to_datetime(monthly_df['year'].astype(str)+\"-\"+monthly_df['month'].astype(str)+\"-\"+\"01\")","e9009e2f":"fig = go.Figure([go.Scatter(x=monthly_df['date'], y=monthly_df['HOBBIES_1_234_CA_3_validation'])])\nfig.update_xaxes(\n    rangeslider_visible=True,\n    rangeselector=dict(\n        buttons=list([\n            dict(count=1, label=\"1m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=6, label=\"6m\", step=\"month\", stepmode=\"backward\"),\n            dict(count=1, label=\"YTD\", step=\"year\", stepmode=\"todate\"),\n            dict(count=1, label=\"1y\", step=\"year\", stepmode=\"backward\"),\n            dict(step=\"all\")\n        ])\n    )\n)\nfig.update_layout(title=\"Range Slider for time series\")\niplot(fig)","5d950b66":"def SetColor(x):\n    if(x < 100):\n        return \"green\"\n    elif(100<= x <=200):\n        return \"orange\"\n    elif(x > 200):\n        return \"red\"","10de63c5":"\nfig=go.Figure(go.Scatter(x=one_item['date'], y=one_item['HOBBIES_1_234_CA_3_validation'], # Data\n                    mode='markers', name='Show1',\n                    marker = dict(size=8, color=list(map(SetColor,one_item['HOBBIES_1_234_CA_3_validation']))),\n                    line=dict(color='rgb(200,200,200)'\n                       )))\nfig.update_layout(xaxis_title=\"Days\", yaxis_title=\"Units Sold\",title=\"Units Sold colored based on Values\")\n\nfig.show() ","00aa2811":"sales_valid['total']=sales_valid.loc[:,sales_valid.columns[6:]].sum(axis=1)\ntop_sales=sales_valid.sort_values(by=['total'],ascending=False)\ntop_sales_df=top_sales.head(100)\ntop_sales_df=top_sales_df.drop(columns=['total']).reset_index()\ntop_sales_df.head(3)","5972612c":"all_item=(top_sales_df.loc[top_sales_df['id'] == top_sales_df['id'][0]][d_cols].T).reset_index().rename(columns={'index':'d', int(top_sales_df.loc[top_sales_df['id'] == top_sales_df['id'][0]].index.values):top_sales_df['id'][0]})\n\nfor j in top_sales_df['id'][1:]:\n    j=(top_sales_df.loc[top_sales_df['id'] == j][d_cols].T).reset_index().rename(columns={'index':'d', int(top_sales_df.loc[top_sales_df['id'] == j].index.values):j})\n    all_item=all_item.merge(j, on='d', how='outer') \nall_item.head(3)","c5bc0d29":"calen=calendar[['date','wm_yr_wk','weekday','wday','month','year','d']]\nmerged_data=pd.merge(calen,all_item,on=\"d\",how=\"left\")\nmerged_data[7:].shape\nall_col=merged_data.columns[7:]\ndate=[]\nunit_sold=[]\nitem=[]\nfor i in range(len(all_col)):\n    date.append(merged_data['date'])\n    unit_sold.append(merged_data[all_col[i]])\n    item.append(pd.Series([all_col[i]]*len(merged_data)))\n    \ndate=pd.concat(date)\nunit_sold=pd.concat(unit_sold)\nitem=pd.concat(item)\n\nplot_df=pd.DataFrame(list(zip(date, unit_sold,item)),columns=['date', 'unit_sold','item'])\nplot_df.head(3)","a66872c7":"item_sum = plot_df.groupby(['item', 'date'])['unit_sold'].sum()\nitem_sum=item_sum.to_frame().reset_index()\ndata = []\nfor i in all_col:\n    s = item_sum.loc[item_sum['item']==i]\n    trace = go.Scatter(\n        x= s.date,\n        y= s.unit_sold,\n        name = \"Item \"+str(i),\n        opacity = 0.9)\n    data.append(trace)\n\n# Buttons to select a specific store visualization\nupdate_buttons = []\nfor i in all_col:\n    visible = [True if j == i else False for j in all_col]\n    button= dict(label = 'Item ' + str(i), method= 'update', args= [{'visible': visible}])\n    update_buttons.append(button)\n# Button to return to all stores visualization\nupdate_buttons.append(dict(label = 'All', method= 'update', args= [{'visible': [True]*10}]))\n\nupdatemenus = list([dict(active=-1, buttons=list(update_buttons))])\n\nlayout = dict(\n    title='Units Sold for each Item',\n    updatemenus= updatemenus,\n    xaxis=dict(\n        rangeselector=dict(\n            buttons=list([\n                dict(count=1, label='1m', step='month', stepmode='backward'),\n                dict(count=6, label='6m', step='month', stepmode='backward'),\n                dict(count=12, label='12m', step='month', stepmode='backward'),\n                dict(count=24, label='24m', step='month', stepmode='backward'),\n                dict(count=36, label='36m', step='month', stepmode='backward'),\n                dict(step='all')\n            ])\n        ),\n        rangeslider=dict(), type='date'\n    )\n)\n\nfig = dict(data=data, layout=layout)\niplot(fig, validate= False)","b2d86d8b":"user=pd.read_csv('..\/input\/meta-kaggle\/Users.csv')\nuser_achievement=pd.read_csv('..\/input\/meta-kaggle\/UserAchievements.csv')\n\n#Merging User and Userachievement dataset to get TierAchievement date field\nonly_notebook_gm=user_achievement[(user_achievement['AchievementType']==\"Scripts\")&(user_achievement['Tier']==4)][['UserId','TierAchievementDate']]\nonly_notebook_gm=only_notebook_gm.rename(columns={'UserId':'Id'})\nonly_notebook_gm_df=pd.merge(only_notebook_gm,user,on=\"Id\",how=\"left\")","dd5af47d":"# Scaling difference between register date and tier achievement date for all grandmasters\nonly_notebook_gm_df['diff_days']=(pd.to_datetime(only_notebook_gm_df['TierAchievementDate'])-pd.to_datetime(only_notebook_gm_df['RegisterDate'])).dt.days \nscaler = MinMaxScaler()\nonly_notebook_gm_df['scaled_days'] = scaler.fit_transform(only_notebook_gm_df[['diff_days']])*100\nonly_notebook_gm_df.head(2)","f2228f27":"def plot_gantt_no_grad(data,height,title):\n    df=[]\n    for i in data.index:\n        df.append(dict(Task=data['DisplayName'][i],Start=data['RegisterDate'][i],Finish=data['TierAchievementDate'][i],\n                   Complete=data['scaled_days'][i]))\n    df=pd.DataFrame(df)\n    df['Start']=pd.to_datetime(df['Start'], format='%m\/%d\/%Y')\n    df['Finish']=pd.to_datetime(df['Finish'], format='%m\/%d\/%Y')\n    df=df.sort_values('Complete',ascending=False)\n    fig = ff.create_gantt(df,showgrid_x=True, show_colorbar=True,showgrid_y=True,height=height,title=title)\n    fig.update_layout(title_x=0.5)\n    fig.show()","684c2e83":"plot_gantt_no_grad(only_notebook_gm_df,600,\"Simple Gantt Chart - Time Taken by each Grandmaster\")","17fbf468":"def plot_gantt_gradient(data,color,height,title):\n    df=[]\n    for i in data.index:\n        df.append(dict(Task=data['DisplayName'][i],Start=data['RegisterDate'][i],Finish=data['TierAchievementDate'][i],\n                   Complete=data['scaled_days'][i]))\n    df=pd.DataFrame(df)\n    df['Start']=pd.to_datetime(df['Start'], format='%m\/%d\/%Y')\n    df['Finish']=pd.to_datetime(df['Finish'], format='%m\/%d\/%Y')\n    df=df.sort_values('Complete',ascending=False)\n    fig = ff.create_gantt(df,colors=color, index_col='Complete',showgrid_x=True, show_colorbar=True,showgrid_y=True,height=height,title=title)\n    fig.update_layout(title_x=0.5)\n    fig.show()","3fa1240d":"plot_gantt_gradient(only_notebook_gm_df,\"Blues\",600,\"Gradient Color Gantt Chart - Time Taken by each Grandmaster\")","28a6851b":"<a id=\"4.4\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.4 Difference - Month<\/b><\/font><br>","7796504e":"<a id=\"3.10\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>3.10 Periods<\/b><\/font><br>","bd05ec2a":"<a id=\"5.1\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>5.1 Daily Series<\/b><\/font><br>","10bb0a88":"<h4 style=\"border:2px solid DodgerBlue;\">  Use '%b' inside strftime to get abbreviated month name<\/h4>","a185fdb0":"<a id=\"4.12\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.12 Weekend or not<\/b><\/font><br>","a02df331":"<font size=+2 color=\"brown\"><center><i><b>\"Time is not on your side. DO IT NOW.\"<\/b><\/i><\/center><\/font>","316613bc":"<a id=\"4.10\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.10 Days left in year<\/b><\/font><br>\n\nHow many days are left in current year?","6a805319":"<a id=\"5.5\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>5.5 Range Slider<\/b><\/font><br>","a40e7015":"<a id=\"3.2\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>3.2 Current Date Time - TZ<\/b><\/font><br>","9eb7ea9a":"<a id=\"3.7\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>3.7 Day<\/b><\/font><br>","a2bf25e1":"<a id=\"3.3\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>3.3 Date<\/b><\/font><br>","510ac20e":"**Version 15 :**\n<font size=\"+3\" color=\"red\"><b><i>Loading...<\/i><\/b><\/font><br><br>\n\n\n<a href=\"#top\" class=\"btn btn-success btn-lg active\" role=\"button\" aria-pressed=\"true\" style=\"color:white\" data-toggle=\"popover\" title=\"go to Colors\">Go to TOP<\/a>","d927707e":"<font size=\"+3\" color=\"blue\"><b>2. Data<\/b><\/font><br><a id=\"2\"><\/a><br>\nThis competition has tidy data in terms of date.So we will mostly do our own formatting and extraction","b18bdd7a":"<a id=\"5\"><\/a>\n<font size=\"+3\" color=\"blue\"><b>5. Plots<\/b><\/font><br>","8ae74583":"<a id=\"3.5\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>3.5 Year<\/b><\/font><br>","0563e9b0":"Import the library \"holidays\" to get holidays of almost all states. <font color=red>*'holidays.state'*<\/font> would produce result of respective state.<br>\nThis feature can be used in almost every sales\/time series competitions.","cb176c52":"<font size=\"+2\" color=\"chocolate\"><b>Derivatives<\/b><\/font><br><a id=\"3.1\"><\/a>\n\n<ul class=\"list-group\">\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%a <\/b><\/font>:  Weekday abbreviated name <b>(Sun,Mon,..Sat)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%A <\/b><\/font>:  Weekday full name <b>(Sunday Monday,..Saturday)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%w <\/b><\/font>:  Weekday number <b>(Sunday is 0,1..6)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%d <\/b><\/font>:  Day of month <b>(1,2..31)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%b <\/b><\/font>:  Month Abbrevated <b>(Jan,Feb...Dec)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%B <\/b><\/font>:  Month Full name <b>(January,February...December)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%m <\/b><\/font>:  Month Numbers <b>(1,2..12)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%y <\/b><\/font>:  Two digits of year <b>(01,02...20(2020))<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%Y <\/b><\/font>:  Years with century <b>(0001,...2020,...)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%H <\/b><\/font>:  24 Hour Format <b>(00,01,...24)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%I <\/b><\/font>:  12 Hour Format <b>(00,01,...12)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%p <\/b><\/font>:  Period <b>(AM or PM)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%M <\/b><\/font>:  Mintues <b>(00,01,02...60)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%S <\/b><\/font>:  Seconds <b>(00,01,02...60)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%f <\/b><\/font>:  Microseconds <b>(000000,000001,.999999)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%Z <\/b><\/font>:  TimeZone <b>(IST,CST..)<\/b><\/li>\n  <li class=\"list-group-item\"><font size=+1 color=\"blue\" ><b>%W <\/b><\/font>:  Week Number <b>(00,01,..53)<\/b><\/li>\n\n<\/ul>","26f7b767":"<a id=\"3.9\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>3.9 Week Number<\/b><\/font><br>","691a4e8e":"<a id=\"4.15\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.15 Calendar<\/b><\/font><br>\n\nWe can see calendar for any month or year after importing library \"calendar\"","8757f6b0":"Data from M5 Forecasting Accuracy","d0005d31":"<a id=\"3.1\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>3.1 Current Date Time<\/b><\/font><br>","aba7f91b":"<font size=\"+3\" color=\"blue\"><b>1. Objective<\/b><\/font><br><a id=\"1\"><\/a>","a5a8708c":"<a id=\"4.8\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.8 Add Days<\/b><\/font><br>","31c51ef6":"<a id=\"3.4\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>3.4 Time<\/b><\/font><br>","152b53f0":"<a id=\"5.8\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>5.8 Gantt Chart<\/b><\/font><br>\n\nGantt chart is useful to show activities (tasks or events) displayed against time.Below we will see how long did the kagglers take time to become Grandmasters.Below code is from my own kernel [Become Grandmaster](https:\/\/www.kaggle.com\/raenish\/become-grandmaster) where i have explored more on Grandmasters principles and strategies.","16334414":"<a id=\"5.4\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>5.4 Custom Range Date<\/b><\/font><br>","23c9f0ce":"<a id=\"5.6\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>5.6 Color based on Value<\/b><\/font><br>","4565b139":"<a id=\"6\"><\/a>\n<font size=\"+3\" color=\"blue\"><b>6. End Notes<\/b><\/font><br>","a7c86526":"<a id=\"4.16\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.16 Days difference from next row(Shift)<\/b><\/font><br>\n\nWe will be using shift() operator to determine the difference from next row value.This can be useful to know how much days does a person take to do next activity.\n\nBelow example denotes the days difference between each kernel creation.","a0992aa4":"Check if the dates are in US holidays","3c76d82c":"**Note :** For instance,1 year 11 months will be considered as 1 only.","83c4825b":"<a id=\"4.3\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.3 Difference - Year<\/b><\/font><br>","9e875cb9":"<a id=\"4.7\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.7 Difference - Minutes <\/b><\/font><br>","4cd34db6":"**Version 1-5**  :  First run and modification<br>\n**Version 6**    :  Added Holidays <br>\n**Version 7**    :  Added Calendar <br>\n**Version 8**    :  Added Gantt chart & Shift operator<br>\n**Version 9**    :  Modification in script<br>\n**Version 10**   :  Added Moving Average<br>\n**Version 11**   :  Added plot-Coloring points based on Value<br>\n**Version 12**   :  Added range slider<br>\n**Version 13**   :  Added custom range date <br>\n**Version 14**   :  (Current) Added color gradient gantt chart<br>\n**Version 15**   :  *Loading...*","a4381ac7":"<a id='top'><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\"  role=\"tab\" aria-controls=\"home\">Table of Content<\/h3>\n    \n* [1. Objective](#1)\n* [2. Data](#2)\n* [3. Extraction](#3)\n    - [3.1 Current Date Time](#3.1)\n    - [3.2 Current Date Time - TZ](#3.2)\n    - [3.3 Date](#3.3)\n    - [3.4 Time](#3.4)\n    - [3.5 Year](#3.5)\n    - [3.6 Month](#3.6)\n    - [3.7 Day](#3.7)\n    - [3.8 Weekday](#3.8)\n    - [3.9 Week Number](#3.9)\n    - [3.10 Periods](#3.10)\n    - [3.11 Timestamp](#3.11)\n* [4. Queries](#4)\n    - [4.1 Least & Last](#4.1)\n    - [4.2 Random](#4.2)\n    - [4.3 Difference - Year](#4.3)\n    - [4.4 Difference - Month](#4.4)\n    - [4.5 Difference - Days](#4.5)\n    - [4.6 Difference - Hours](#4.6)\n    - [4.7 Difference - Minutes](#4.7)\n    - [4.8 Add Days](#4.8)\n    - [4.9 Add Hours & Minutes](#4.9)\n    - [4.10 Days left in year](#4.10)\n    - [4.11 Days surpassed](#4.11)\n    - [4.12 Weekend or not ](#4.12)\n    - [4.13 Leap year or not](#4.13)\n    - [4.14 Holidays](#4.14)\n    - [4.15 Calendar](#4.15)\n    - [4.16 Days difference from next row(Shift)](#4.16)\n    - [4.17 Moving Average](#4.17)\n* [5. Plots](#5)\n    - [5.1 Daily Series](#5.1)\n    - [5.2 Monthly Series](#5.2)\n    - [5.3 Yearly Series](#5.3)\n    - [5.4 Custom Range Date](#5.4)\n    - [5.5 Range Slider](#5.5)\n    - [5.6 Color based on Value](#5.6)\n    - [5.7 Series with selector](#5.7)\n    - [5.8 Gantt Chart](#5.8)\n    - [5.9 Color Gradient Gantt Chart](#5.9)\n* [6. End Notes](#6)","e27ab089":"<a id=\"3.6\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>3.6 Month<\/b><\/font><br>","a94b78b3":"<h4 style=\"border:2px solid DodgerBlue;\"> Use '%w' inside strftime to get number of weekday starting from Sunday as 0<\/h4>","6464b4a4":"<a id=\"3.11\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>3.11 Timestamp<\/b><\/font><br>","7c69f39e":"<a id=\"5.9\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>5.9 Color Gradient Gantt Chart<\/b><\/font><br>","18103e31":"## Background<br>\nHello readers,the motive of this kernel is to aid kagglers with helper codes essential for date\/time series oriented competitions.This is just a fun experiment by me.\nI tried a cheatsheet on text helpers for  which i got good response.So I thought of doing the same for date fields.\nInstead of surfing deep towards finding the exact piece of code.What if you get everything in a single page.My aim would be to provide <b><i>multiple helpers in a single page<\/i><\/b> to save your time.Most of the codes may be very basic with one liners.\n\n## Audience<br>\nEveryone can utilize this notebook.For beginners this might be a date formatting tutorial and for others this would be a refresh or handbook for their next competition where date feature generation needs more attention.\n\n## Main sections<br>\n<ul style=\"list-style-type:circle;\">\n  <li>Basic Extraction<\/li>\n  <li>Queries<\/li>\n  <li>Plots<\/li>\n<\/ul>\n\n## Note:<br>\n* I have utilized **meta kaggle** data for date field extractions and **m5 forecasting data** for plotting.\n* Just a heads up that this kernel will not aid to uplift your LB score in competitions but i can promise that this kernel will be handy anytime formatting date\/time series problems.This page is at a starting stage now,i will be developing it at frequent intervals.So please **Upvote** and keep it in your favourite section so that you will never miss any of updates\n\n\nAleady i have published other sheets.If you missed it,please have a look at it.<br>\nhttps:\/\/www.kaggle.com\/raenish\/cheatsheet-text-helper-functions <br>\nhttps:\/\/www.kaggle.com\/raenish\/cheatsheet-50-plotly-charts\/","1f11130d":"<a id=\"4.13\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.13 Leap year or not<\/b><\/font><br>","c362d140":"<a id=\"4.14\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.14 Holidays<\/b><\/font><br>","0fd796ed":"This is not the end of kernel.As I said earlier,this kernel is just the beginning,there are lot more to come.I will add more codes related to plots and other areas in upcoming versions.Also your feedbacks and comments are always welcome.I would like to get an appreciation from you with an \ud83d\udc4d which will motivate me to do more quality kernels.Please <font color=\"red\"><b>Upvote<\/b><\/font> and keep it in your favourite list to stay updated.\n\nThanks for your patience.\n\n*Happy Kaggling!!!*","7b6da71e":"<a id=\"4.9\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.9 Add Hours & Minutes<\/b><\/font><br>","2f7375aa":"<h4 style=\"border:2px solid DodgerBlue;\">  Use strftime('%y') to get last two digit of year<\/h4>","af6174f8":"<font size=\"+2\" color=\"chocolate\"><b>Reference<\/b><\/font><br>\n* https:\/\/www.guru99.com\/date-time-and-datetime-classes-in-python.html\n* https:\/\/www.journaldev.com\/23365\/python-string-to-datetime-strptime\n* https:\/\/www.pythonprogramming.in\/get-range-of-dates-between-specified-start-and-end-date.html\n* https:\/\/stackoverflow.com\/questions\/19216334\/python-give-start-and-end-of-week-data-from-a-given-date\n* http:\/\/pytz.sourceforge.net\/\n* https:\/\/towardsdatascience.com\/5-minute-guide-to-detecting-holidays-in-python-c270f8479387\n* https:\/\/pypi.org\/project\/holidays\/\n","f00824ab":"<a id=\"3.8\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>3.8 Weekday<\/b><\/font><br>","3ce83432":"I will utilize **HOBBIES_1_234_CA_3_validation** item for few basic plots","1bb3dcca":"<a id=\"5.7\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>5.7 Multiple Series with selector<\/b><\/font><br>","d20cb31c":"<a id=\"4.1\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.1 Least & Last<\/b><\/font><br>\n\nTo know the earliest and latest date in the date field column of a dataframe","3f28a9ae":"If you have more queries on dealing timezones with python,click [here](http:\/\/pytz.sourceforge.net\/) ","c45a32fc":"<a id=\"4.17\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.17 Moving Average<\/b><\/font><br>","de6fde38":"<a id=\"5.3\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>5.3 Yearly Series<\/b><\/font><br>","9c34f691":"### Not sure about timezones ?\n\nAfter installing all_timezones and common_timezones libraries from datetime,we will be able to see all\/common timezones.So if you are unaware of any country's timezone ,just fetch from below list.\n\n* all_timezones  - This list will contain all timezones\n* common_timezones - This list contains very common timezones","df65dcb9":"I will select top most 100 sold items.","3687f364":"### Converting the string field to datetime is mandatory before processing them","6897e3cb":"<a id=\"4.11\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.11 Days surpassed<\/b><\/font><br>\n\nHow many days are passed till today?","4dc0d637":"<font size=\"+3\" color=purple ><b> <center><u>Date\/Time Helpers<\/u><\/center><\/b><\/font>","64573602":"<a id=\"5.2\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>5.2 Monthly Series<\/b><\/font>","f0f87bc4":"<font size=\"+3\" color=\"blue\"><b>3. Extraction<\/b><\/font><br><a id=\"3\"><\/a>","9062c384":"<font size=\"+2\" color=\"chocolate\"><b>My Other Kernels<\/b><\/font><br>\n\nClick on the button...\n\n<a href=\"https:\/\/www.kaggle.com\/raenish\/cheatsheet-50-plotly-charts\" class=\"btn btn-primary\" style=\"color:white;\">Cheatsheet 50+ Plotly<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/raenish\/don-t-shoot\" class=\"btn btn-primary\" style=\"color:white;\">Don't Shoot<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/raenish\/become-grandmaster\/\" class=\"btn btn-primary\" style=\"color:white;\">Become GrandMaster<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/raenish\/cheatsheet-text-helper-functions\" class=\"btn btn-primary\" style=\"color:white;\">Cheatsheet Text Helpers<\/a>\n\n<a href=\"https:\/\/www.kaggle.com\/raenish\/tweet-sentiment-insight-eda\/\" class=\"btn btn-primary\" style=\"color:white;\">Tweet Sentiment Extraction<\/a>\n<br>\n<br>\n### If these kernels impress you,give them an <font size=\"+2\" color=\"red\"><b>Upvote<\/b><\/font>.<br>\n\n","8eed9b3c":"**Note:** Above calculation is not based on days.It is based on month numbers.","9a53af1a":"<a id=\"4.5\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.5 Difference - Days<\/b><\/font><br>","fa6bbb75":"<font size=\"+3\" color=\"blue\"><b>4. Queries<\/b><\/font><br><a id=\"4\"><\/a>\n\nThis section holds basic analysis with date fields.","79464b75":"<a id=\"4.6\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.6 Difference - Hours <\/b><\/font><br>","25cad3af":"<a id=\"4.2\"><\/a>\n<font size=\"+2\" color=\"indigo\"><b>4.2 Random<\/b><\/font><br>\n\nNow let us create a new column with random dates greater than the created date.","4ff33d93":"Transposing all 100 items into columns."}}