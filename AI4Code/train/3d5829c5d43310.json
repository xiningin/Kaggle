{"cell_type":{"92dd4004":"code","1419584d":"code","52698fcf":"code","2ed22200":"code","50ad160e":"code","c2c5fafd":"code","4d0e67f3":"code","4776921b":"code","b67e1180":"code","79cff519":"code","83ea96dc":"code","3cd467ec":"code","f301ab96":"code","64d79c1c":"code","3ba010aa":"code","c151a02d":"code","5ab0fc4d":"code","1c0c7d6c":"code","05a000ec":"code","9dbbd6ae":"code","9f14f2f3":"code","a4cb66af":"code","aaca6dc8":"code","ae43cccf":"code","9b3128af":"code","d6f67c50":"code","f02fe66a":"code","ba8660de":"code","3f62ea57":"code","520887e1":"code","7e126e88":"code","fcc2917f":"code","08c1d410":"code","c4f80678":"code","ddc86a2b":"code","c62e492b":"code","eb7e0b4e":"code","90db0869":"code","48711c09":"code","b9458e09":"code","2967e453":"markdown"},"source":{"92dd4004":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1419584d":"import numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\n#from google.colab import files\nimport io\n%matplotlib inline\nsns.set_style('whitegrid')","52698fcf":"#read data\ndata = pd.read_csv('https:\/\/raw.githubusercontent.com\/kevinasyraf\/find-it-2020-dac\/master\/hotel_bookings.csv')\ndata.head()","2ed22200":"#lets get the whole overview of data\ndata.info()","50ad160e":"#check for missing data\ndata.isnull().sum()","c2c5fafd":"#lets fill null data with zero\ndata = data.drop('company', axis = 1)\ndata = data.fillna({\n    'children' : 0,\n    'agent' : 0,\n    'country': 'Unknown',\n})","4d0e67f3":"#again check for null data\nany(data.isna().sum())","4776921b":"# find no guest data\nzero_guests = list(data.loc[data[\"adults\"]\n                   + data[\"children\"]\n                   + data[\"babies\"]==0].index)\ndata.drop(data.index[zero_guests], inplace=True)\ndata.shape","b67e1180":"#find outliers\nsns.boxplot(data=data, x = 'lead_time')\nplt.show()\n\nsns.boxplot(data=data, x = 'adr')\nplt.show()","79cff519":"#remove outliers using linear and non linear techniques\nIQR_lt = data['lead_time'].quantile(0.75) -  data['lead_time'].quantile(0.25)\nRUB = data['lead_time'].quantile(0.75) + 1.5*IQR_lt\n\ndata_no_outlier = data[data['lead_time'] <= RUB]","83ea96dc":"IQR_adr = data['adr'].quantile(0.75) -  data['adr'].quantile(0.25)\nRUB = data['adr'].quantile(0.75) + 1.5*IQR_adr\n\ndata_no_outlier = data_no_outlier[data_no_outlier['adr'] <= RUB]","3cd467ec":"#lets see country wise data\ndata_country = pd.DataFrame(data.loc[data['is_canceled'] != 1]['country'].value_counts())\ndata_country.index.name = 'country'\ndata_country.rename(columns={\"country\": \"Number of Guests\"}, inplace=True)\ntotal_guests = data_country[\"Number of Guests\"].sum()\ndata_country[\"Guests in %\"] = round(data_country[\"Number of Guests\"] \/ total_guests * 100, 2)\ndata_country.head(10)","f301ab96":"#lets see the guest map\nimport plotly.express as px\nguest_map = px.choropleth(data_country,\n                    locations=data_country.index,\n                    color=data_country[\"Guests in %\"], \n                    hover_name=data_country.index, \n                    color_continuous_scale=px.colors.sequential.Viridis,\n                    title=\"Guest from countries\")\nguest_map.show()","64d79c1c":"#lets see month wise data of hotels\nmonths = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\nguest_data = data[data['is_canceled'] == 0].copy()\nguests_monthly = guest_data[['hotel', 'arrival_date_year', 'arrival_date_month', 'adults', 'children', 'babies']].sort_values('arrival_date_year')\nguests_monthly['total visitors'] = guests_monthly['adults'] + guests_monthly['children'] + guests_monthly['babies']\nguests_monthly = guests_monthly.astype({'total visitors' : int})\nguests_monthly = guests_monthly.drop(['adults', 'children', 'babies'], axis=1)\nguests_monthly.head()","3ba010aa":"guests_monthly['arrival_date_month'] = pd.Categorical(guests_monthly['arrival_date_month'], categories=months, ordered=True)\nguests_monthly = guests_monthly.groupby(['hotel', 'arrival_date_year', 'arrival_date_month'], as_index = False).sum()\n\nf, ax = plt.subplots(3,1,figsize=(15,15))\nsns.lineplot(x = 'arrival_date_month', y=\"total visitors\", hue=\"hotel\", data=guests_monthly[guests_monthly['arrival_date_year'] == 2015],  ci=\"sd\", ax=ax[0])\nsns.lineplot(x = 'arrival_date_month', y=\"total visitors\", hue=\"hotel\", data=guests_monthly[guests_monthly['arrival_date_year'] == 2016],  ci=\"sd\", ax=ax[1])\nsns.lineplot(x = 'arrival_date_month', y=\"total visitors\", hue=\"hotel\", data=guests_monthly[guests_monthly['arrival_date_year'] == 2017],  ci=\"sd\", ax=ax[2])\n\nax[0].set(title=\"Visitors come in whole 2015\")\nax[0].set(xlabel=\"Month\", ylabel=\"Total Visitor\")\nax[0].set(ylim = (0,5000))\n\nax[1].set(title=\"Visitors come in whole2016\")\nax[1].set(xlabel=\"Month\", ylabel=\"Total Visitor\")\nax[1].set(ylim = (0,5000))\n\nax[2].set(title=\"Visitors come in whole 2017\")\nax[2].set(xlabel=\"Month\", ylabel=\"Total Visitor\")\nax[2].set(ylim = (0,5000))\n\nplt.show()","c151a02d":"rh = data_no_outlier[(data_no_outlier['hotel'] == 'Resort Hotel') & (data_no_outlier['is_canceled'] == 0)]\nch = data_no_outlier[(data_no_outlier['hotel'] != 'Resort Hotel') & (data_no_outlier['is_canceled'] == 0)]","5ab0fc4d":"rh['adr_pp'] = rh['adr'] \/ (rh['adults'] + rh['children'])\nch['adr_pp'] = ch['adr'] \/ (ch['adults'] + ch['children'])","1c0c7d6c":"full_data_guests = data.copy()\nfull_data_guests = full_data_guests.loc[full_data_guests['is_canceled'] == 0]\nfull_data_guests['adr_pp'] = full_data_guests['adr'] \/ (full_data_guests['adults'] + full_data_guests['children'])\nroom_prices = full_data_guests[['hotel', 'reserved_room_type', 'adr_pp']].sort_values(\"reserved_room_type\")","05a000ec":"plt.figure(figsize=(10,5))\nsns.barplot(x='reserved_room_type', y='adr_pp', hue='hotel', data=room_prices, hue_order=['City Hotel', 'Resort Hotel'], palette='pastel')\nplt.title('Hotel room prices data', fontsize=16)\nplt.xlabel('Tipe Kamar', fontsize = 16)\nplt.ylabel('Euro (\u20ac)', fontsize = 16)\nplt.show()","9dbbd6ae":"sns.countplot(x = 'reserved_room_type', data = data.sort_values('reserved_room_type'), hue='hotel')","9f14f2f3":"#cancelled booking\ndata_canceled = data[data['is_canceled'] == 1].sort_values('market_segment')\ndata_not_canceled = data[data['is_canceled'] == 0].sort_values('market_segment')\nf, ax = plt.subplots(1,2,figsize=(20,5))\nsns.countplot(data=data_canceled, x= 'market_segment', hue='hotel', ax =ax[0])\nsns.countplot(data=data_not_canceled, x= 'market_segment', hue='hotel', ax =ax[1])\nax[0].set(title='Market Segment basis cancellation of hotel booking')\nax[1].set(title='Market Segment basis cancellation of hotel booking')\nplt.show()","a4cb66af":"#heatmap of whole dataset\nplt.figure(figsize=(20, 20))\nsns.heatmap(data.corr(), annot=True)","aaca6dc8":"#lets see adult and children data\nadult_only = data[(data['adults'] != 0) & (data['children'] == 0) & (data['babies'] == 0)].sort_values('reserved_room_type')\nadult_child = data[(data['adults'] != 0) & (data['children'] != 0) | (data['babies'] != 0)].sort_values('reserved_room_type')","ae43cccf":"percentage = [(len(adult_only)\/(len(adult_only) + len(adult_child)))*100, (len(adult_child)\/(len(adult_only) + len(adult_child)))*100]\nlabels = 'adults', 'children'\n\nf, ax = plt.subplots(figsize=(7,7))\nax.pie(percentage, labels = labels, autopct='%1.1f%%' , startangle = 180)\nax.axis('equal')\n\nax.set_title('Percentage of adults and children came', fontsize=16)\nplt.show()","9b3128af":"from sklearn.model_selection import train_test_split, KFold, cross_validate, cross_val_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier, ExtraTreesClassifier\nfrom xgboost import XGBClassifier, plot_importance, DMatrix, train\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import make_scorer, accuracy_score, precision_score, recall_score, f1_score","d6f67c50":"dtrain = pd.read_csv('https:\/\/raw.githubusercontent.com\/kevinasyraf\/find-it-2020-dac\/master\/hotel_bookings.csv')","f02fe66a":"nan_replacements = {\"children:\": 0.0,\"country\": \"Unknown\", \"agent\": 0, \"company\": 0}\ndtrain = dtrain.fillna(nan_replacements)\n\n# \"meal\" contains values \"Undefined\", which is equal to SC.\ndtrain[\"meal\"].replace(\"Undefined\", \"SC\", inplace=True)","ba8660de":"dtrain=dtrain.drop(['company'],axis=1)\ndtrain=dtrain.dropna(axis=0)\ndtrain.isna().sum()","3f62ea57":"#label encoding\n# hotel\ndtrain['hotel']=dtrain['hotel'].map({'Resort Hotel':0,'City Hotel':1})\ndtrain['hotel'].unique()","520887e1":"# arrival_date_month\ndtrain['arrival_date_month'] = dtrain['arrival_date_month'].map({'July':7,'August':8,'September':9,'October':10\n                                                                ,'November':11,'December':12,'January':1,'February':2,'March':3,\n                                                                'April':4,'May':5,'June':6})\ndtrain['arrival_date_month'].unique()","7e126e88":"label_encoder = LabelEncoder()\ndtrain['meal']=label_encoder.fit_transform(dtrain['meal'])\ndtrain['meal'].unique()","fcc2917f":"dtrain.head()","08c1d410":"# Gathering which feature is more important.....using corr() function\ncorrelation=dtrain.corr()['is_canceled']\ncorrelation.abs().sort_values(ascending=False)","c4f80678":"cols=['arrival_date_day_of_month','children',\n     'arrival_date_week_number','stays_in_week_nights','reservation_status']\ndtrain=dtrain.drop(cols,axis=1)\ndtrain.head(5)","ddc86a2b":"y=dtrain['is_canceled'].values\nx=dtrain.drop(['is_canceled'],axis=1).values","c62e492b":"#dataset split.\ntrain_size=0.80\ntest_size=0.20\nseed=5\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,train_size=train_size,test_size=test_size,random_state=seed)","eb7e0b4e":"ensembles=[]\nensembles.append(('scaledRFC',Pipeline([('scale',StandardScaler()),('rf',RandomForestClassifier(n_estimators=10))])))\n\nresults=[]\nnames=[]\nfor name,model in ensembles:\n    fold = KFold(n_splits=10,random_state=5)\n    result = cross_val_score(model,x_train,y_train,cv=fold,scoring='accuracy')\n    results.append(result)\n    names.append(name)\n    msg=\"%s : %f (%f)\"%(name,result.mean(),result.std())\n    print(msg)","90db0869":"# Random Forest Classifier Tuning\nfrom sklearn.model_selection import GridSearchCV\n\nscaler=StandardScaler().fit(x_train)\nrescaledx=scaler.transform(x_train)\n\nn_estimators=[10,20,30,40,50]\n\nparam_grid=dict(n_estimators=n_estimators)\n\nmodel=RandomForestClassifier()\n\nfold=KFold(n_splits=10,random_state=0)\n\ngrid=GridSearchCV(estimator=model,param_grid=param_grid,scoring='accuracy',cv=fold)\ngrid_result=grid.fit(rescaledx,y_train)\n\nprint(\"Best: %f using %s \"%(grid_result.best_score_,grid_result.best_params_))","48711c09":"from sklearn.metrics import confusion_matrix\n\nscaler=StandardScaler().fit(x_train)\nscaler_x=scaler.transform(x_train)\nmodel=RandomForestClassifier(n_estimators=40)\nmodel.fit(scaler_x,y_train)\n\n#Transform the validation test set data\nscaledx_test=scaler.transform(x_test)\ny_pred=model.predict(scaledx_test)\n\naccuracy_mean=accuracy_score(y_test,y_pred)\naccuracy_matric=confusion_matrix(y_test,y_pred)\nprint(accuracy_mean)\nprint(accuracy_matric)","b9458e09":"y_pred = model.predict(scaler.transform(x))\nprint(accuracy_score(y, y_pred))","2967e453":"Machine learning model"}}