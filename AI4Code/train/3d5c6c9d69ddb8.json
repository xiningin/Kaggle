{"cell_type":{"3c2cbab6":"code","cce8f4d8":"code","d78c2d89":"code","f1176ce6":"code","af9f5922":"code","1438881c":"markdown","cd0015cc":"markdown","d8f9dd51":"markdown"},"source":{"3c2cbab6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cce8f4d8":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","d78c2d89":"dataset=pd.read_csv('\/kaggle\/input\/ads-ctr-optimisation\/Ads_CTR_Optimisation.csv')","f1176ce6":"import math #to perform math operations like logarithm\nN=10000 #no of times the ads are shown\nd=10 #number of ads\nads_selected=[] #ads that are selected will be append to this list\nnumber_of_selection=[0]*d #how many times each add is selected \nsums_of_rewards=[0]*d #no of rewards each ads got\ntotal_rewards=0 #total no of rewards\nfor n in range(0,N):\n    ad=0 #selected ad is initialised to 0\n    max_upper_bound=0 #maximum upper nond is initialised to zero\n    for i in range(0,d): #seceond for loop to take each ad in the row n\n        if(number_of_selection[i]>0):   #as first number_of_selection all the values are intialized to zero and something by zero doesnt make sense\n            average_rewards=sums_of_rewards[i]\/number_of_selection[i]\n            \n            delta_i =math.sqrt(((3\/2)*math.log(n+1))\/number_of_selection[i])\n            \n            upper_bound=average_rewards+delta_i\n        else:\n            \n            upper_bound=1e400\n        if(upper_bound>max_upper_bound):\n            \n            max_upper_bound=upper_bound\n            ad=i\n            \n            \n    ads_selected.append(ad)\n    number_of_selection[ad]+=1\n    rewards=dataset.values[n,ad]\n    sums_of_rewards[ad]+=rewards\n    total_rewards+=rewards\n    \n    \nprint(ads_selected)\nprint(number_of_selection)\nprint(sums_of_rewards)\nprint(total_rewards)\n            \n            \n       \n        ","af9f5922":"plt.hist(ads_selected)\nplt.title('Histogram of ads selections')\nplt.xlabel('Ads')\nplt.ylabel('Number of times each ad was selected')\nplt.show()","1438881c":"# Impleting Upper Confidence Bound","cd0015cc":"# Importing the dataset\n","d8f9dd51":"# Importing the libraries\n"}}