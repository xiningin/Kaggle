{"cell_type":{"317f1fef":"code","f159c235":"code","d4a226e3":"code","829a9269":"code","a18acca6":"code","4bd32f68":"code","261703d7":"code","4a412af4":"code","7182295e":"code","1bd1e7b3":"code","9120fa8d":"code","b3b2d70d":"code","694ae45e":"code","77dc3225":"code","90ad28b7":"code","14185194":"code","5914e7f7":"code","a69d29a1":"code","49890534":"code","f4404aa1":"code","3af511a7":"code","f7a32405":"code","d86b74c3":"code","80e74d3d":"code","0a7f794c":"code","dfc25614":"code","ff6a4331":"code","2e894bea":"code","1f4d4db1":"code","5a3ea72c":"code","c3f74a8f":"code","74004ea9":"code","962e4bea":"code","9a975b73":"code","7a4f8081":"code","b4301afe":"code","207e4ac0":"code","70462eff":"markdown","0ae79079":"markdown","82992932":"markdown","254121f2":"markdown","50ec9275":"markdown","f4ea8ca1":"markdown","4db8f285":"markdown","06de4505":"markdown","8b442c99":"markdown","008b05cb":"markdown","f0df4c8b":"markdown","24fb6ef4":"markdown","e059c645":"markdown","6c78571d":"markdown","1da6fcec":"markdown","3bc0c6f3":"markdown","86ec37f7":"markdown","6274e693":"markdown","5d1b513f":"markdown","dc051c62":"markdown","fb3b4c53":"markdown","ce868c64":"markdown","f5a61533":"markdown","d319c45c":"markdown","0c5c5515":"markdown","8a0a84ec":"markdown","f4b145a8":"markdown","dc7b65db":"markdown","8e554467":"markdown","27889d9b":"markdown","dea6befb":"markdown","ad8d625f":"markdown","7f8e97fb":"markdown"},"source":{"317f1fef":"import numpy as np\nimport pandas as pd","f159c235":"credits = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\nmovies_df = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')","d4a226e3":"print(credits.shape)\nprint(movies_df.shape)","829a9269":"credits.head()","a18acca6":"movies_df.shape","4bd32f68":"movies_df.head()","261703d7":"# making the column name same for merging the two datasets\ncredits = credits.rename(index = str,columns = {'movie_id':'id'})","4a412af4":"# merging the datasets\nmovies = movies_df.merge(credits,on = 'id')","7182295e":"movies.head()","1bd1e7b3":"# drop the unnecessary columns\nmovies = movies.drop(['homepage','title_x','title_y','status','production_countries'],1)","9120fa8d":"movies.info()","b3b2d70d":"movies['overview'].head(1)","694ae45e":"\nfrom sklearn.feature_extraction.text import TfidfVectorizer","77dc3225":"tfv = TfidfVectorizer(stop_words='english',min_df = 3,max_features=None, strip_accents='unicode',\n                     analyzer='word', token_pattern=r'\\w{1,}', ngram_range=(1,3))\n# ngram_range will take the combination of 1 to 3 different kind of words\n# stopwords is used to ignore words like 'the','a','is', etc types of words\n# strip_accents, analyzer and token_pattern are used to remove unnecessary letters like '!',',',''\n# meaning special symbols\n# fill the null values.\nmovies['overview'] = movies['overview'].fillna('')","90ad28b7":"tfv_matrix = tfv.fit_transform(movies['overview'])","14185194":"tfv_matrix","5914e7f7":"tfv_matrix.shape","a69d29a1":"from sklearn.metrics.pairwise import sigmoid_kernel\nsig = sigmoid_kernel(tfv_matrix,tfv_matrix)","49890534":"\nsig[0]","f4404aa1":"# Lets give indexes to the movie\nindices = pd.Series(movies.index, index = movies['original_title']).drop_duplicates()","3af511a7":"indices","f7a32405":"# index of the maze runner\nindices['The Maze Runner']","d86b74c3":"def recommend(title, sig = sig):\n    # Here title is in text and we will get the respective index assigned to it\n    index = indices[title]\n    # lets calculate the sigmoid scores of this movie with every other movie.\n    sigmoid_scores = list(enumerate(sig[index]))\n    # Sort it descending so that top correlated can be listed on top\n    sigmoid_scores = sorted(sigmoid_scores,key = lambda x: x[1], reverse = True)\n    # We will take only top 5 recommendations\n    sigmoid_scores = sigmoid_scores[1:6]\n    \n    movie_indices = [i[0] for i in sigmoid_scores]\n    \n    return movies['original_title'].iloc[movie_indices]","80e74d3d":"print(' Top Recommendations for this Movie is : ')\nrecommend('The Dark Knight')","0a7f794c":"print('Recommendation for the Fast and furious 5 : \\n',recommend('Fast Five'))","dfc25614":"# lets import libraries\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity","ff6a4331":"# dataset\nmovies.head()","2e894bea":"cv = CountVectorizer(stop_words='english')\ncv_matrix = cv.fit_transform(movies['overview'])","1f4d4db1":"cv_matrix.shape","5a3ea72c":"cv_matrix","c3f74a8f":"cos_similarity = cosine_similarity(cv_matrix)","74004ea9":"cos_similarity","962e4bea":"## Again lets take the indexes\nindexes = pd.Series(movies.index, index = movies['original_title']).drop_duplicates()","9a975b73":"def recommend_m2(title,cos = cos_similarity):\n    index = indexes[title]\n    \n    similarity_score = list(enumerate(cos_similarity[index]))\n    \n    similarity_score = sorted(similarity_score, reverse = True,key = lambda x:x[1])\n    \n    similarity_score = similarity_score[1:6]\n    \n    movie_indexes = [i[0] for i in similarity_score]\n    \n    return movies['original_title'].iloc[movie_indexes]\n    \n    ","7a4f8081":"recommend_m2('Fast Five')","b4301afe":"recommend_m2('The Maze Runner')","207e4ac0":"recommend_m2('Star Wars')","70462eff":"In this we have 2 datasets you will get the idea about the datasets below","0ae79079":"![image.png](attachment:image.png)","82992932":"__With this type of basic recommendation engine, I hope you should have some questions after seeing the recommendations. Post a comment if you could identify what are the problems and what type of recommendations we can expect.__","254121f2":"Another Example : A recommendation engine filters the data using different algorithms and recommends the most relevant items to users. It first captures the past behavior of a customer and based on that, recommends products which the users might be likely to buy.","50ec9275":"TF-IDF is a technique which will help us to create a document matrix for those types of sentences.\nDocument matrix is nothing but vector of sentences","f4ea8ca1":"![image.png](attachment:image.png)","4db8f285":"##### Note : \nThe Overview feature in the dataset is the heart of this recommendation engine. As this feature includes the overall summary about the movie.              ","06de4505":"Here the angle between item 1 and item 2 is known as cosine simalrity which lies between 0 to 1 in the first quadrant. ","8b442c99":"Lets try one more time","008b05cb":"In the above method we have TF-IDF for vectorizing and used sigmoid for similarity scoring.","f0df4c8b":"Here we can see that a sparse matrix is created which has many 0's inside it","24fb6ef4":"### Method 2","e059c645":"So we can see we got some good recommendations on those movies with method 2 of content based filtering.","6c78571d":"So by this time when i got those results I wanted to check on google what google recommends.\n\nJust check this out\n\n\n\n\n\n","1da6fcec":"After that we will be using sigmoid kernel as we know sigmoid is nothing but a S like curve between 0 to 1.\n\nSo sigmoid will just convert the values between 0 and 1.\n\nSuppose we are finding sigmoid value of sentence 1 and sentence 2 from overview column we will get a value. Lets say 0.5 , this will indicate that movie1 is half similar to movie 2.\n\nSigmoid basically gives us the similarity score of the vector matrix that we had created above","3bc0c6f3":"**********************************************************************","86ec37f7":"__This was the recommendation engine based on content based filtering__\n*************\n__********TMDB MOVIES Dataset********__\n****************\n__Soon will be uploading a kernel on collaborative based filtering__\n***********\n__Any comments\/feedbacks are most welcome__\n***********\n__Thanx for visiting my kernel__\n","6274e693":"To play with NLP concepts or we can say to understand or create vector of matrix so that\nour overview column can be converted into machine understable format, for this we will be using \nTF-IDF (Term frequency\u2013inverse document frequency)","5d1b513f":"### Method 1","dc051c62":"### Content Based Recommendation Engine","fb3b4c53":"![image.png](attachment:image.png)","ce868c64":"<font color=green>__Recommendation Engine__ :<\/font> \n\n> _Wondered how movies on any app\/website like Netflix,Hotstar or even Google recommends movies. After this notebook I think everyone would be able create a recommendation. Lets get started..._ \n","f5a61533":"To create a recommendation we need to create a vectors of matrix for each movies.","d319c45c":"Now in this method of Content Based Filtering we will use the same data set above \n\nBut this time for vectorizing we will use ___Count Vectorizer___.\n\nAnd for similarity scoring we will use ___Cosine Similarity___","0c5c5515":"Again we got a sparse matrix that we have seen in tfidf vectorizer also but this time the counts are mainly focused.","8a0a84ec":"I know you are thinking why we have given tfv matrix with tfv matrix. This is because so that I can generate a dataframe of the similarity scores with each movie and many would have null values because of null similarity.","f4b145a8":"![image.png](attachment:image.png)","dc7b65db":"#### This is the function for content based recommendation system","8e554467":"___P.S : I had to remove some images in this kernel. Kaggle wasnt letting me commit.___","27889d9b":"__We will go through content based and collaborative filtering based recommendation engines.__","dea6befb":"As we can see we are getting the values in between 0 and 1, mostly are 0's","ad8d625f":"# <font color = red>Recommendation Engine : Hollywood Movies<\/font>","7f8e97fb":"### There are 3 types of recommendation engines\n\n    * Popularity Based Recommendation\nThis is the simplest kind of recommendation engine that you will come across. The trending list you see in YouTube or Netflix is based on this algorithm. It keeps a track of view counts for each movie\/video and then lists movies based on views in descending order(highest view count to lowest view count)\n    * Content Based Recommendation Engine\nThis type of recommendation systems, takes in a movie that a user currently likes as input. Then it analyzes the contents (storyline, genre, cast, director etc.) of the movie to find out other movies which have similar content. Then it ranks similar movies according to their similarity scores and recommends the most relevant movies to the user.\n    * Collaborative Filtering Based Recommendation Engine\nThis algorithm at first tries to find similar users based on their activities and preferences (for example, both the users watch same type of movies or movies directed by the same director). Now, between these users(say, A and B) if user A has seen a movie that user B has not seen yet, then that movie gets recommended to user B and vice-versa. In other words, the recommendations get filtered based on the collaboration between similar user\u2019s preferences (thus, the name \u201cCollaborative Filtering\u201d). One typical application of this algorithm can be seen in the Amazon e-commerce platform, where you get to see the \u201cCustomers who viewed this item also viewed\u201d and \u201cCustomers who bought this item also bought\u201d list.    "}}