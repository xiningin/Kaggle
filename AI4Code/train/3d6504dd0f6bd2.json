{"cell_type":{"765c3d65":"code","98406c23":"code","e297a741":"code","ea7fdeda":"code","8d53c241":"code","c1b722fd":"code","03b28366":"code","a971011c":"code","baabc184":"code","dd09d0a9":"code","c38b11d4":"code","63344313":"code","6c65e668":"code","521b761e":"code","0829eef6":"code","6f32bf32":"code","7b1abaa2":"code","14497053":"code","208407c1":"code","82ef65a5":"code","d1bb331d":"code","6a28f2c6":"code","c373d3b8":"code","49c8c2de":"code","ce4a3994":"markdown","e39f394d":"markdown","78284e15":"markdown","bec60548":"markdown","46252251":"markdown","eb9bfef6":"markdown","5d0e9123":"markdown","9d407bee":"markdown","09b9b143":"markdown","bbe43225":"markdown","dd4e9f58":"markdown","f704bc45":"markdown","ed0e9683":"markdown","4b0ceafc":"markdown","a43cd7fc":"markdown","d737c0fd":"markdown","a2c68c75":"markdown","d7a40b7e":"markdown","84201b7d":"markdown"},"source":{"765c3d65":"import os\nimport numpy as np\nimport pandas as pd","98406c23":"import tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.applications import NASNetLarge, ResNet101, DenseNet121\nfrom tensorflow.keras.applications.resnet import preprocess_input\nfrom tensorflow.keras.metrics import Precision, Recall\nfrom tqdm.keras import TqdmCallback\nfrom keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint, ModelCheckpoint\n\nfrom keras.models import load_model\n\nprint(f'tf version - {tf.__version__}')","e297a741":"IMAGE_PATH = '..\/input\/plant-pathology-2021-224x224\/train_imgs'","ea7fdeda":"train = pd.read_csv('..\/input\/plant-pathology-2021-fgvc8\/train.csv')\ntrain","8d53c241":"len(train.labels.unique())","c1b722fd":"from PIL import Image\nImage.open(os.path.join('..\/input\/plant-pathology-2021-fgvc8\/train_images', train[train.labels == 'rust'].image.iloc[0]))","03b28366":"train.labels.value_counts()","a971011c":"CLASSES = train['labels'].unique().tolist()\nBATH_SIZE = 128\nEPOCH = 10","baabc184":"data_generator = ImageDataGenerator(\n    validation_split=0.15,\n)","dd09d0a9":"train_data_loader = data_generator.flow_from_dataframe(\n    train,\n    directory=IMAGE_PATH,\n    classes=CLASSES,\n    x_col=\"image\",\n    y_col=\"labels\",\n    target_size=(150, 150),\n    subset='training'\n)\n\nval_data_loader = data_generator.flow_from_dataframe(\n    train,\n    directory=IMAGE_PATH,\n    classes=CLASSES,\n    x_col=\"image\",\n    y_col=\"labels\",\n    target_size=(150, 150),\n    subset='validation'\n)","c38b11d4":"dict_classes = train_data_loader.class_indices\ndict_classes","63344313":"OPTIMIZER = tf.keras.optimizers.Adam(learning_rate=0.001)\n\nCALLBACKS = [ReduceLROnPlateau(monitor='val_loss', patience=3, verbose=0.5, factor=0.5),\n             EarlyStopping(monitor='val_loss', verbose=1, patience=5),\n             TqdmCallback(verbose=0)]","6c65e668":"base_resnet = ResNet101(\n                    weights='..\/input\/keras-pretrained-models\/ResNet101_NoTop_ImageNet.h5',\n                    include_top=False, \n                    pooling='avg', \n                    input_shape=(150, 150, 3))\n\nmodel_resnet = Sequential()\nmodel_resnet.add(base_resnet)\nmodel_resnet.add(layers.Dense(12, activation='softmax'))\n\nmodel_resnet.compile(loss='categorical_crossentropy', optimizer=OPTIMIZER, metrics=['accuracy', 'Precision', 'Recall'])\nmodel_resnet.summary()\n\nhistory_resnet = model_resnet.fit(train_data_loader, \n                            validation_data=val_data_loader, \n                            batch_size=BATH_SIZE,\n                            epochs=9,\n                            callbacks=CALLBACKS)","521b761e":"base_DenseNet121 = tf.keras.applications.DenseNet121(\n                    weights='..\/input\/keras-pretrained-models\/DenseNet121_NoTop_ImageNet.h5',\n                    include_top=False, \n                    pooling='avg', \n                    input_shape=(150, 150, 3))\n\nmodel_DenseNet121 = Sequential()\nmodel_DenseNet121.add(base_DenseNet121)\nmodel_DenseNet121.add(layers.Dense(12, activation='softmax'))\n\nmodel_DenseNet121.compile(loss='categorical_crossentropy', optimizer=OPTIMIZER, metrics=['accuracy'])\nmodel_DenseNet121.summary()\n\nhistory_DenseNet121 = model_DenseNet121.fit(train_data_loader, \n                                  validation_data=val_data_loader, \n                                  batch_size=BATH_SIZE,\n                                  epochs=15,\n                                  callbacks=CALLBACKS)","0829eef6":"base_MobileNetV2 = tf.keras.applications.MobileNetV2(\n                    weights='..\/input\/keras-pretrained-models\/MobileNetV2_NoTop_ImageNet.h5',\n                    include_top=False, \n                    pooling='avg', \n                    input_shape=(150, 150, 3))\n\nmodel_MobileNetV2 = Sequential()\nmodel_MobileNetV2.add(base_MobileNetV2)\nmodel_MobileNetV2.add(layers.Dense(12, activation='softmax'))\n\nmodel_MobileNetV2.compile(loss='categorical_crossentropy', optimizer=OPTIMIZER, metrics=['accuracy'])\nmodel_MobileNetV2.summary()\n\nhistory_MobileNetV2 = model_MobileNetV2.fit(train_data_loader, \n                                  validation_data=val_data_loader, \n                                  batch_size=BATH_SIZE,\n                                  epochs=15,\n                                  callbacks=CALLBACKS)","6f32bf32":"# base_InceptionResNetV2 = tf.keras.applications.InceptionResNetV2(\n#                     weights='..\/input\/keras-pretrained-models\/InceptionResNetV2_NoTop_ImageNet.h5',\n#                     include_top=False, \n#                     pooling='avg', \n#                     input_shape=(150, 150, 3))\n\n# model_InceptionResNetV2 = Sequential()\n# model_InceptionResNetV2.add(base_InceptionResNetV2)\n# model_InceptionResNetV2.add(layers.Dense(12, activation='softmax'))\n\n# model_InceptionResNetV2.compile(loss='categorical_crossentropy', optimizer=OPTIMIZER, metrics=['accuracy'])\n# model_InceptionResNetV2.summary()\n\n# history_InceptionResNetV2 = model_InceptionResNetV2.fit(train_data_loader, \n#                                   validation_data=val_data_loader, \n#                                   batch_size=BATH_SIZE,\n#                                   epochs=15,\n#                                   callbacks=CALLBACKS)","7b1abaa2":"import statistics\nfrom statistics import mode\n\n\ndef most_common(List):\n    return(mode(List))\n\n\ntest_dir = '\/kaggle\/input\/plant-pathology-2021-fgvc8\/test_images\/'\ntest_df = pd.DataFrame()\ntest_df['image'] = os.listdir(test_dir)\n\ntest_set = data_generator.flow_from_dataframe(dataframe=test_df,\n                                    directory=test_dir,\n                                    x_col=\"image\",\n                                    y_col=None,\n                                    batch_size=64,\n                                    seed=42,\n                                    shuffle=False,\n                                    class_mode=None,\n                                    target_size=(150,150))\n\npred_resnet = model_resnet.predict(test_set).tolist()\npred_densnet = model_DenseNet121.predict(test_set).tolist()\npred_mobile = model_MobileNetV2.predict(test_set).tolist()\n# pred_inception = model_InceptionResNetV2.predict(test_set).tolist()\n\n\nfor i in range(len(pred_resnet)):\n    pred_resnet[i] = np.argmax(pred_resnet[i])\n    \nfor i in range(len(pred_densnet)):\n    pred_densnet[i] = np.argmax(pred_densnet[i])\n    \nfor i in range(len(pred_mobile)):\n    pred_mobile[i] = np.argmax(pred_mobile[i])\n    \n#for i in range(len(pred_inception)):\n    #pred_inception[i] = np.argmax(pred_inception[i])\n    \nres = []\n \nfor i in range(len(pred_resnet)):\n    try:\n        res.append(most_common([pred_resnet[i], pred_densnet[i], pred_mobile[i]]))\n    except:\n        res.append(pred_resnet[i])\n\n    \ndef get_key(val):\n    for key, value in dict_classes.items():\n        if val == value:\n            return key\n        \n\nfor i in range(len(res)):\n    res[i] = get_key(res[i])","14497053":"test_df['labels'] = res\ntest_df","208407c1":"test_df.to_csv('submission.csv', index=False)","82ef65a5":"predict = []\n\nsubmission = pd.DataFrame({'image':os.listdir('..\/input\/plant-pathology-2021-fgvc8\/test_images')})\n\nfor i in range(submission.shape[0]):\n    image = Image.open(f'..\/input\/plant-pathology-2021-fgvc8\/test_images\/{submission.iloc[i, 0]}')\n    image = image.resize((150, 150))\n    \n    image = preprocess_input(np.asarray(image))\n    image = np.expand_dims(image, axis=0)\n    \n    predict.append(np.argmax(model_DenseNet121.predict(image)))\n    ","d1bb331d":"from keras.preprocessing import image\nimport matplotlib.pyplot as plt\n\nfor i in range(len(os.listdir('..\/input\/plant-pathology-2021-fgvc8\/test_images'))):\n    img = image.load_img(f'..\/input\/plant-pathology-2021-fgvc8\/test_images\/{submission.iloc[i, 0]}', target_size=(150, 150))\n    plt.imshow(img)\n    plt.axis('off')\n    plt.show()\n    print(predict[i])","6a28f2c6":"def get_key(val):\n    for key, value in dict_classes.items():\n        if val == value:\n            return key\n        \n\nfor i in range(len(predict)):\n    predict[i] = get_key(predict[i])","c373d3b8":"predict","49c8c2de":"submission['labels'] = predict\nsubmission","ce4a3994":"\u041c\u043d\u043e\u0433\u0438\u0435 \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0431\u0443\u0447\u0430\u043b\u0438\u0441\u044c \u043d\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 ImageNet, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 14,197,122 \u043a\u0430\u0440\u0442\u0438\u043d\u043e\u043a - \u044d\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u043c\u0435\u0447\u0430\u043d\u043d\u044b\u0445 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0441 \u0432\u044b\u0441\u043e\u043a\u0438\u043c \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c, \u043e\u0442\u043d\u043e\u0441\u044f\u0449\u0438\u0445\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043a 22 \u0442\u044b\u0441\u044f\u0447\u0430\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439. \u041f\u0440\u043e\u0432\u043e\u0434\u0438\u043b\u0441\u044f \u00ab\u041a\u0440\u0443\u043f\u043d\u043e\u043c\u0430\u0441\u0448\u0442\u0430\u0431\u043d\u044b\u0439 \u043a\u043e\u043d\u043a\u0443\u0440\u0441 \u0432\u0438\u0437\u0443\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0440\u0430\u0441\u043f\u043e\u0437\u043d\u0430\u0432\u0430\u043d\u0438\u044f ImageNet\u00bb (ILSVRC2013). ILSVRC \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e ImageNet \u0438\u0437 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 1000 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 1000 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439.\n\n<img src='https:\/\/avatars.mds.yandex.net\/get-zen_doc\/127510\/pub_5c33ad37c906e200abbace3b_5c33adfbe5e73b00aad095a1\/scale_1200'>","e39f394d":"## ResNet'15\n\n\u0414\u043e \u044d\u0442\u043e\u0433\u043e \u0431\u043e\u0440\u043e\u043b\u0438\u0441\u044c \u0441 \u0437\u0430\u0442\u0443\u0445\u0430\u044e\u0449\u0438\u043c\u0438 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430 \u0441\u0447\u0435\u0442 \u0432\u0432\u043e\u0434\u0430 \u0434\u0440\u0443\u0433\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0430\u043a\u0442\u0438\u0432\u0430\u0446\u0438\u0438.\n\n\u0427\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u043e\u0434\u043e\u043b\u0435\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0437\u0430\u0442\u0443\u0445\u0430\u044e\u0449\u0438\u0445 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043e\u0432, Microsoft \u0432\u0432\u0435\u043b\u0430 \u0433\u043b\u0443\u0431\u043e\u043a\u0443\u044e \u00ab\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u0443\u044e\u00bb \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f.\n\n<img src='https:\/\/drive.google.com\/uc?export=view&id=1RGJQl4-SmysYbAqwcy8Lm5qEPbiebZOO'>\n\n\u0421\u043c\u044b\u0441\u043b:\n\n$y = f(x) + x $<br>\n$dy = df(x) + 1 $<br>\n<h3>$\\frac{dL}{dx} = \\frac{dL}{dy} \\frac{dy}{dx} = \\frac{dL}{dy}(df(x) + 1 )$<\/h3><br>\n\n\u0422\u043e \u0435\u0441\u0442\u044c \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u044b \u0432\u0441\u0451 \u0440\u0430\u0432\u043d\u043e \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u043e\u0442\u0435\u043a\u0430\u0442\u044c \u0434\u0430\u043b\u044c\u0448\u0435 \u0432 \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u043e\u043c \u0432\u0438\u0434\u0435.\n\n\n\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 (shortcut connections, residual connections) \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u044e\u0442 \u043e\u0434\u0438\u043d \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0435\u0432 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u0441\u043e\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u043e\u0432.\n\n<img src='https:\/\/drive.google.com\/uc?export=view&id=1JcQDIjA-97L2xs3o-JD4SWBld9J0OMW-'>\n\n\u0415\u0449\u0435 \u043e\u0434\u043d\u0430 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c ResNet, \u0447\u0442\u043e \u0432 \u043a\u043e\u043d\u0446\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0435 \u0441\u043b\u043e\u0438, \u043f\u0440\u0438\u0447\u0438\u043d\u0430 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0443\u0436\u0435 \u0438 \u0442\u0430\u043a \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0441\u043b\u043e\u0436\u043d\u0430\u044f \u043d\u0435\u0439\u0440\u043e\u043d\u043d\u0430\u044f \u0441\u0435\u0442\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u0436\u0435 \u0438 \u0442\u0430\u043a \u043c\u043e\u0433\u043b\u0430 \u0440\u0435\u0448\u0438\u0442\u044c\u0441\u044f \u0437\u0430\u0434\u0430\u0447\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0431\u044b\u0447\u043d\u0430 \u043f\u0435\u0440\u0435\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u043f\u043e\u043b\u043d\u043e\u0441\u0432\u044f\u0437\u043d\u044b\u0439 \u0441\u043b\u043e\u0439.","78284e15":"## VGG'14\n\u0412 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u0432 \u041e\u043a\u0441\u0444\u043e\u0440\u0434\u0435 VGG-\u0441\u0435\u0442\u044f\u0445 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u043e\u043c \u0441\u043b\u043e\u0435 \u0432\u043f\u0435\u0440\u0432\u044b\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043b\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u044b 3\u04453 \u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u043b\u0438 \u044d\u0442\u0438 \u0441\u043b\u043e\u0438 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0432\u0451\u0440\u0442\u043e\u043a.\n\n\u0412\u043c\u0435\u0441\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0445 \u0432 AlexNet \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 9\u04459 \u0438 11\u044511 \u0441\u0442\u0430\u043b\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0442\u044c \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u0435\u0435 \u043c\u0435\u043b\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u0442\u0430\u0440\u0430\u043b\u0438\u0441\u044c \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u0430\u0432\u0442\u043e\u0440\u044b LeNet. \u041d\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u043c VGG \u0441\u0442\u0430\u043b\u0430 \u043d\u0430\u0445\u043e\u0434\u043a\u0430, \u0447\u0442\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0432\u0451\u0440\u0442\u043e\u043a 3\u04453, \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0451\u043d\u043d\u044b\u0445 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043c\u043e\u0433\u0443\u0442 \u044d\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u043a\u0440\u0443\u043f\u043d\u044b\u0435 \u0441\u0432\u0435\u0440\u0442\u043a\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 5\u04455 \u0438\u043b\u0438 7\u04457.\n\n\u041a\u0430\u0441\u043a\u0430\u0434 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u0432\u0435\u0440\u0442\u043e\u043a 3\u04453 \u0440\u0430\u0432\u0435\u043d \u0441\u0432\u0435\u0440\u0442\u043a\u0435 5\u04455, \u043d\u043e \u0441 \u043c\u0435\u043d\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432.\n(5\u04455 = 25 + 1 = 26; 3x3 + 3x3 + 2 = 20)\n\n<img src='https:\/\/drive.google.com\/uc?export=view&id=1GvrtEDocJ3xp9RKqgQu0-JnyTssqZhzV'>","bec60548":"<img src='https:\/\/proproprogs.ru\/htm\/neural_network\/files\/struktura-i-princip-raboty-polnosvyaznyh-neyronnyh-setey.files\/image009.jpg'>","46252251":"<img src='https:\/\/hsto.org\/getpro\/habr\/post_images\/437\/61c\/a43\/43761ca43da0f4f6e5920e56cf7185cf.png'>","eb9bfef6":"**CNN (\u0421\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0435 \u0441\u0435\u0442\u0438)**","5d0e9123":"<img src='https:\/\/hsto.org\/getpro\/habr\/post_images\/7d8\/88d\/66c\/7d888d66cda6787af984befdc025ef78.png'>","9d407bee":"<img src='https:\/\/hsto.org\/getpro\/habr\/post_images\/355\/148\/987\/355148987ed68fe7592f074b1e746625.png'>","09b9b143":"* **\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441?**\n* **\u041a\u0430\u043a \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044c accuracy, MAE?**\n* **\u041d\u0430 \u043a\u0430\u043a\u0438\u0435 4 \u0442\u0438\u043f\u0430 \u043e\u0442\u0432\u0435\u0442\u043e\u0432 \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u044b \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u0438 \u0438 \u043a\u0430\u043a \u0447\u0435\u0440\u0435\u0437 \u043d\u0438\u0445 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043c\u0435\u0442\u0440\u0438\u043a\u0443 accuracy?**\n* **\u041f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u044d\u0442\u043e?**","bbe43225":"<img src='https:\/\/hsto.org\/getpro\/habr\/post_images\/442\/b7c\/bb2\/442b7cbb29128bd5f02c8cdcc78eb655.png'>","dd4e9f58":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u043e\u0435\u0432 \u0441\u0432\u0435\u0440\u0442\u043a\u0438 \u0438 \u043f\u0443\u043b\u0438\u043d\u0433\u0430\n![\u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435.png](attachment:ee67c98c-0cd5-4b45-a50b-1850d90cdb65.png)","f704bc45":"## GoogLeNet\n\n\u042d\u0442\u0430 \u0441\u0435\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 Inception \u0431\u043b\u043e\u043a\u0438. \u042d\u0442\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u0430\u044f \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f \u0441\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 1\u04451, 3\u04453 \u0438 5\u04455. \u041d\u043e \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u044b\u0445 \u0431\u043b\u043e\u043a\u043e\u0432 1\u04451 \u0434\u043b\u044f \u0443\u043c\u0435\u043d\u044c\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u043f\u043e\u0434\u0430\u0447\u0435\u0439 \u0432 \u0431\u043e\u043b\u0435\u0435 \u00ab\u0434\u043e\u0440\u043e\u0433\u0438\u0435\u00bb \u0441\u0432\u0435\u0440\u0442\u043e\u0447\u043d\u044b\u0435 \u0431\u043b\u043e\u043a\u0438. \u041e\u0431\u044b\u0447\u043d\u043e \u044d\u0442\u0443 \u0447\u0430\u0441\u0442\u044c \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442 bottleneck. \u0412\u043c\u0435\u0441\u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0432\u0435\u0440\u0442\u043a\u0438 5\u04455 \u043d\u0430 \u043d\u0430\u0448\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0438, \u043c\u043e\u0436\u0435\u043c \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u043e\u0439\u0442\u0438\u0441\u044c \u0441\u0432\u0435\u0440\u0442\u043a\u043e\u0439 1\u04451 \u0443\u043c\u0435\u043d\u044c\u0448\u0438\u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432, \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u043e \u043d\u0438\u043c \u043f\u0440\u043e\u0439\u0442\u0438\u0441\u044c \u0441\u0432\u0435\u0440\u0442\u043a\u043e\u0439 5\u04455, \u0432\u0435\u0440\u043d\u0443\u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432. \u041e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0431\u0443\u0434\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0435, \u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u0443\u0434\u0435\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0439.\n\n<img src='https:\/\/drive.google.com\/uc?export=view&id=1hgoTi6d-pdRPHgnfVGssQIQXBUdrkWrk'>","ed0e9683":"<img src='https:\/\/drive.google.com\/uc?export=view&id=1qqbZ6iWZaD6LMjuIJ85mBGYpBwi0w-HL'>","4b0ceafc":"## AlexNet'12\n\n\u0412 AlexNet \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 LeNet \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0431\u043e\u043b\u0435\u0435 \u043a\u0440\u0443\u043f\u043d\u0443\u044e \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u0430 \u0438\u0437\u0443\u0447\u0438\u0442\u044c \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u0431\u043e\u043b\u0435\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b \u0438 \u0438\u0445 \u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0438. \u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438:\n\n- \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u043b\u043e\u043a\u043e\u0432 ReLU \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043d\u0435\u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0441\u0442\u0435\u0439.\n- \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 max pooling, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u044d\u0444\u0444\u0435\u043a\u0442\u043e\u0432 \u0443\u0441\u0440\u0435\u0434\u043d\u0435\u043d\u0438\u044f average pooling.\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u0438\u0434\u0443\u0442 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 224\u0445224, \u0435\u0441\u0442\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043d\u0435 \u0432\u0441\u0435 \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0438 \u0442\u0430\u043a\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0431\u0443\u0434\u0435\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u0436\u0430\u0442\u044c \u0438\u0445 \u0434\u043e \u043d\u0443\u0436\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430.\n\n<img src='https:\/\/drive.google.com\/uc?export=view&id=1sjEftFGiJ50-m3VevamktVznsx6bY3Yw' width=700>","a43cd7fc":"<img src='https:\/\/hsto.org\/getpro\/habr\/post_images\/596\/9d4\/395\/5969d4395ea17419793401ec4183b4a6.png'>","d737c0fd":"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0438 \u044d\u0442\u043e\u0439 \u0441\u0435\u0442\u0438 \u043f\u0440\u0438\u0434\u0443\u043c\u0430\u043b\u0438 \u0441\u043f\u043e\u0441\u043e\u0431, \u0447\u0442\u043e\u0431\u044b \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u044b \u043d\u0435 \u0437\u0430\u0442\u0443\u0445\u0430\u043b\u0438: \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043d\u0430 \u043f\u0440\u043e\u0442\u044f\u0436\u0435\u043d\u0438\u0438 \u0432\u0441\u0435\u0439 \u0441\u0435\u0442\u0438, \u0447\u0442\u043e\u0431\u044b \u043a\u043e\u0433\u0434\u0430 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442 \u043e\u0442 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u044b\u0445\u043e\u0434\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u043b \u0437\u0430\u0442\u0443\u0445\u0430\u0442\u044c, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u043b\u0441\u044f \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442 \u0441\u043e \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0432\u044b\u0445\u043e\u0434\u0430.\n\n<img src='https:\/\/drive.google.com\/uc?export=view&id=1q3oJXpwGStYit5Ii13DIsexVqxwIjyjE'>","a2c68c75":"<img src='https:\/\/www.mdpi.com\/water\/water-12-01500\/article_deploy\/html\/images\/water-12-01500-g007.png'>","d7a40b7e":"<img src='https:\/\/hsto.org\/getpro\/habr\/post_images\/09e\/08e\/c54\/09e08ec5407bec4e6b78e2b0303ce336.png'>","84201b7d":"## LeNet'98\n\n\u041e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438 LeNet5:\n\n- \u0421\u0432\u0451\u0440\u0442\u043e\u0447\u043d\u0430\u044f \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u0437 \u0442\u0440\u0451\u0445 \u0441\u043b\u043e\u0451\u0432: \u0441\u043b\u043e\u0438 \u0441\u0432\u0451\u0440\u0442\u043a\u0438 (convolution), \u0441\u043b\u043e\u0438 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f (pooling) \u0438 \u0441\u043b\u043e\u0438 \u043d\u0435\u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0441\u0442\u0438 (non-linearity) \u2013> \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u041b\u0435\u043a\u0443\u043d\u0430 \u044d\u0442\u043e, \u043f\u043e\u0436\u0430\u043b\u0443\u0439, \u043e\u0434\u043d\u0430 \u0438\u0437 \u0433\u043b\u0430\u0432\u043d\u044b\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0433\u043b\u0443\u0431\u043e\u043a\u043e\u0433\u043e \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c.\n- \u041f\u043e\u0434\u0432\u044b\u0431\u043e\u0440\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0443\u0441\u0440\u0435\u0434\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0440\u0442.\n- \u041d\u0435\u043b\u0438\u043d\u0435\u0439\u043d\u043e\u0441\u0442\u044c \u0432 \u0432\u0438\u0434\u0435 \u0433\u0438\u043f\u0435\u0440\u0431\u043e\u043b\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e \u0442\u0430\u043d\u0433\u0435\u043d\u0441\u0430 \u0438\u043b\u0438 \u0441\u0438\u0433\u043c\u043e\u0438\u0434.\n- \u0424\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0432 \u0432\u0438\u0434\u0435 \u043c\u043d\u043e\u0433\u043e\u0441\u043b\u043e\u0439\u043d\u043e\u0439 \u043d\u0435\u0439\u0440\u043e\u0441\u0435\u0442\u0438.\n\n<img src='https:\/\/drive.google.com\/uc?exoprt=view&id=1pPe1aBh7ySg89cxbWEZ07iabvvXABUxd'>"}}