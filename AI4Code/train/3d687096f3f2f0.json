{"cell_type":{"efdb0c2b":"code","3f41447e":"code","a2b3c6aa":"code","47835688":"code","a4e55a34":"code","61c5b853":"code","d543cea5":"code","611ecc77":"code","b8c7f27c":"code","caaf6758":"code","1bbad3a6":"code","90cf27cd":"code","d1884f6b":"code","7a9ba162":"code","8f8d3f64":"code","c775daad":"code","3e04dda4":"code","bf77fb84":"markdown","5d5bd7b4":"markdown","9c58e828":"markdown","8fbd2e62":"markdown","b62d13ee":"markdown","f5fc51ca":"markdown","7a0a6387":"markdown","29c90379":"markdown","c0c2f226":"markdown","104176a2":"markdown","fe3b1245":"markdown","a554a4f8":"markdown","6eebccec":"markdown","ad8f3d87":"markdown","f26971e0":"markdown","05ded5df":"markdown","31a6695d":"markdown","2511d83c":"markdown"},"source":{"efdb0c2b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport keras\nimport keras.models as M\nimport keras.layers as L\nimport tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import optimizers\nfrom keras.callbacks import EarlyStopping\nimport keras.backend as K\nfrom keras.constraints import max_norm\nfrom PIL import Image","3f41447e":"datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=10,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    shear_range=0.1,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    fill_mode='nearest',\nvalidation_split=0.2)\ntraining_set = datagen.flow_from_directory('..\/input\/dogs-cats-images\/dataset\/training_set', \n                                                    target_size = (64, 64), \n                                                    batch_size = 16,subset='training')\nvalidation_set=datagen.flow_from_directory('..\/input\/dogs-cats-images\/dataset\/training_set',target_size = (64, 64), \n                                                    batch_size = 16,subset='validation')","a2b3c6aa":"# Making simple 3 block vgg model\nmodel=M.Sequential()\nmodel.add(L.Conv2D(filters=256,kernel_size=(3,3),activation='relu'))\nmodel.add(L.BatchNormalization(momentum=0.8))\nmodel.add(L.MaxPooling2D(pool_size=(2,2)))\nmodel.add(L.Dropout(0.6))\nmodel.add(L.Conv2D(filters=128,kernel_size=(3,3),activation='relu'))\nmodel.add(L.BatchNormalization(momentum=0.8))\nmodel.add(L.MaxPooling2D(pool_size=(2,2)))\nmodel.add(L.Dropout(0.5))\nmodel.add(L.Conv2D(filters=32,kernel_size=(3,3),activation='relu'))\nmodel.add(L.BatchNormalization(momentum=0.8))\nmodel.add(L.MaxPooling2D(pool_size=(2,2)))\nmodel.add(L.Dropout(0.4))\nmodel.add(L.Flatten())\nmodel.add(L.Dense(2,activation='softmax'))","47835688":"sgd = optimizers.SGD(lr=0.01, decay=1e-6, momentum=0.9, nesterov=True) \nearlystopping = EarlyStopping(monitor =\"val_accuracy\",\n                              mode = 'auto', patience = 6,\n                              restore_best_weights = True)\nadam=keras.optimizers.Adam(lr=0.001)\nmodel.compile(loss='categorical_crossentropy',\n                     optimizer=adam,\n                     metrics=['accuracy'])","a4e55a34":"model.fit(training_set,validation_data=validation_set,epochs=100,batch_size=100,callbacks=[earlystopping])","61c5b853":"def maxout_activation_function(inputs,units,axis=None):\n    if axis is None:\n        axis=-1\n    input_shape=inputs.get_shape().as_list()\n    n_dims=len(input_shape)\n    assert n_dims==4\n    num_channels=input_shape[axis]\n    if num_channels%units :\n        raise ValueError('number of features({}) is not a multiple of num_units({})'.format(num_channels, units))\n    input_shape[axis]=units\n    input_shape+=[num_channels\/\/units]\n    output=K.reshape(inputs,(-1,input_shape[1],input_shape[2],input_shape[3],input_shape[4]))\n    output_max=K.max(output,axis=-1,keepdims=False)\n    return output_max","d543cea5":"# MAking a second model where we use maxout activation function\nmax_norm = max_norm(max_value=8, axis=[0, 1, 2])\nimg_shape=(64,64,3)\ninp=L.Input(img_shape)\nconv1=L.Conv2D(filters=64,kernel_size=(3,3),activation=None, kernel_constraint=max_norm)(inp)\nmaxout1=L.Lambda(maxout_activation_function,arguments={'units':32})(conv1)\nbatch1=L.BatchNormalization(momentum=0.8)(maxout1)\npool1 = L.MaxPooling2D(pool_size=(2,2))(batch1)\ndrop1= L.Dropout(0.6)(pool1)\nconv2=L.Conv2D(filters=128,kernel_size=(3,3),activation=None, kernel_constraint=max_norm)(drop1)\nmaxout2=L.Lambda(maxout_activation_function,arguments={'units':64})(conv2)\nbatch2=L.BatchNormalization(momentum=0.8)(maxout2)\npool2 = L.MaxPooling2D(pool_size=(2,2))(batch2)\ndrop2= L.Dropout(0.5)(pool2)\nconv3=L.Conv2D(filters=256,kernel_size=(3,3),activation=None, kernel_constraint=max_norm)(drop2)\nmaxout3=L.Lambda(maxout_activation_function,arguments={'units':64})(conv3)\nbatch3=L.BatchNormalization(momentum=0.8)(maxout3)\npool3 = L.MaxPooling2D(pool_size=(2,2))(batch3)\ndrop3= L.Dropout(0.4)(pool3)\nflatten=L.Flatten()(drop3)\ndense=L.Dense(2,activation='softmax')(flatten)","611ecc77":"model2=M.Model(inputs=inp,outputs=dense)","b8c7f27c":"model2.summary()","caaf6758":"model2.compile(loss='categorical_crossentropy',\n                     optimizer=adam,\n                     metrics=['accuracy'])","1bbad3a6":"model2.fit(training_set,validation_data=validation_set,epochs=100,batch_size=40,callbacks=[earlystopping])","90cf27cd":"history=model2.history.history","d1884f6b":"# Plot for training and validation accuracy of the model\nplt.plot(history['accuracy'])\nplt.plot(history['val_accuracy'])","7a9ba162":"# Plot for training and validation loss of the model\nplt.plot(history['loss'])\nplt.plot(history['val_loss'])","8f8d3f64":"def make_predictions(path):\n    image=Image.open(path)\n    plt.imshow(image)\n    image=image.resize((64,64))\n    arr=np.array(image)\n    x=np.expand_dims(arr,axis=0)\n    cl=np.argmax(model2.predict(x))\n    if cl==0:\n        print('Its a cat!!')\n    else:\n        print('Its a dog!!')","c775daad":"make_predictions('..\/input\/dogs-cats-images\/dataset\/test_set\/dogs\/dog.4004.jpg')","3e04dda4":"make_predictions('..\/input\/dogs-cats-images\/dataset\/test_set\/cats\/cat.4010.jpg')","bf77fb84":"# Plotting Loss And Accuracy","5d5bd7b4":"# Fitting Model On Our Data","9c58e828":"# Predicting some of the images","8fbd2e62":"# Summary of the model","b62d13ee":"![](https:\/\/miro.medium.com\/max\/763\/1*pvqVEwK-AS7jCJoDIOtAsQ.png)","f5fc51ca":"# Generating Data","7a0a6387":"# Fitting the model","29c90379":"# We used it on our testing set and it's workin amazin :)","c0c2f226":"# Compiling the model","104176a2":"# Making simple 3 Block VGG Model using Relu","fe3b1245":"# Maxout Network Vs Simple CNN Network\n\n![](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMREhUSExMWFhUXGB0bGBgYGBgbHhoZGh8fGB8XGxgYHSggGR0nGxgYJTEnJSkrLi4uGx8zODMsOCgtLisBCgoKDg0OGxAQGy0lICUtLS41LS0tLS0tNy4tLS8tMC8tMC0tLS0tLS8wLS0tLS0tLS0tLzUvLS0vLSstLS8tLf\/AABEIALQBFwMBEQACEQEDEQH\/xAAcAAEAAwEBAQEBAAAAAAAAAAAABQYHBAMCAQj\/xABFEAACAQIEBAMEBwUHAwQDAQABAhEAAwQSITEFBkFRImFxBxMygSNCUnKRobEUM2KywTQ1grPR4fBDc8IkU2OidJLxJf\/EABsBAQACAwEBAAAAAAAAAAAAAAADBAECBQYH\/8QANxEAAgECBAIHCAEEAwEBAAAAAAECAxEEITFBElEFYXGBobHwEyIyM5HB0eFCFDRScgYj8WIk\/9oADAMBAAIRAxEAPwDWuH4bEribz3HVrLx7tATNvJAEaQc4LMexAGu9AS9AKAUAoBQCgFAKAUAoBQCgFAKAUAoCC5uwGJvW0XC3MjhiSfeOmnu3VdUBmLhtmDoY67ECdFAKAUAoBQFT5k5ySzmt4eLl3Yn6iHzI+I+Q+Z6UB6ez7GXL1i49xi7G8ZJ+4mw2UeQoC0UAoBQCgFAKAUAoBQHxcuqsSQJMCTud4HfQH8Kyk3oD7rAFAKAUAoBQCgFAKAUAoBQCgFAKAUAoBQCgFAKA58fjrdhDcusFUdT+gG5PkKAzbmHm67iybVibdrZjMMw\/iI+FfIfj0oCvW7YQZAT5nbTv5UBofsyIOFuZRA980efgTWgLfQCgFAKAUAoBQCgKrzdzvYwIKD6S\/wBLYPw+bn6o8t\/1roYPo6piPe0jz\/BpKaRnvLPHL+M4rYuX3zfvMqjRVHu30Ven6mu3i8PDD4WUKayy7dVqRxbcszSrfNiQuazeVmt58oUHQAEgagtBMbT1IA1ryhOS3C+IC+mcKyiYhoB2BmATGhoDsoDl4jxG1YXPdcKOncnsoGrH0raMJSdoo1lJRV2fnCseuItLdUEBiYDRPhJXWPSszg4S4WISUldHXWhsKAUAoBQCgFAKAUAoBQCgFAKAUBAcx81WsICo+ku9EB27Zj09N\/1oDMeJY+9i7me8xY65VHwqP4V\/rv3NAdNjDhdBI2nzn9KAjr75ywGiyPU9vT0FAaX7OcObeFYERN0kemVRP5UBaqAUAoBQCgFAeWJxC21LuwVVElmIAA7kmsxi5OyV2DK+cPaUzzZwRKrsbx0Y\/cB+EeZ17RvXfwXRSXv1vpt3kUp8jPU1kmWOpYk9Z3nrvXdpLZFeTdyf9na\/\/wChY3+v\/lvVPpJf\/mlJ7280SRfvGtJhOIKq\/S2WYIBLA\/FIkzlkghdfM+leOLJ78MuYtSXxLWltBTI0BDA\/EWByhY8\/Wd6AiuM86ASmGGY\/+4w8P+Fd29TA9au0sG3nPIq1MSllEp2IvvcYvcYux+sxk+g6AeQ0roQhGCtFFKUnJ3Zo3Jf9jt+r\/wA7VycT81nSofLRN1ASigFAKAUAoBQCgFAKAUAoBQHnfvKil3YKqiSSYAHck7UBn3MnPbNKYXwr1unQt9wHYeZ19N6Ap2H8ZLNtsT5nUknv+etASeEQLLGCSCFAn0zfiaAY1yy5R8PXuY2J8tYgdvMUB6WbItZSVzH6qn8cx+f5UBfORrrtZuM+hN06REDKmgHSgLHQCgFAKAUBx8R4illXYmWW2z5QdSFEmpKdKU2raXSv2mjqRUuG+fIwfmbmu\/j2m4ctsHw2lPhHmftN5n5RXqsJhKWHzSuyKUmyHSx12HWdOk9d9KvxitVzInPY7uHsLkoVOVlA8Ikm5EqJ82XUnYA7VFWqSUHKNrrnkrbvuWhpwJTTbbef09NfsnuSsJctcUsqykFQwbQED6Juo030\/GqeNqxqYNyjo7W+q5m9Nq9r7vc1fmLj64QKMpd3ByjYaRJZug1GwJrzNGg6ryLFWqqazKBxTil7EtNxpE+FF0UHpC9T5mTXThSp0VfxKMqk6jsfK4IiGueFesbjsT0A7nWNOkkVquN2h9Senhd5nhiECswGwJ\/5rVrDycqab9ZleskptI0bkv8Asdv1f+dq5mJ+ay\/Q+Wjh5q57wuBlCfe3h\/0kI0++2yfPXyNaQpORtKoole5N54xmJxIW9atizcMLEqU0JEEznGmsxv8AKpp4e0OLkRRrXlwmlVVLAoBQCgFAKAUAoBQCgI7j\/F0wdhr7gkLAhdySYA\/E0Bj\/AB3mW\/jn8Zy2wZW2uw7febzPyAoDwWySoOmh1X9B59KA7LVkwqyV79NdqAnrGCU+Igkg5Y03AmPkIn5d6AYzCnS4fgBCyYAzazA22k6bUB54GwLt4lwQCfinQDYLPRiB\/QaxOE0zedOUEm9zQOBRkYKoUK8R8l386yaElQCgFACaArHH+aRbBWz4m+10G+qj60ROldHDYFzd5\/T88rnLrY9SfBRa7du71YrfD7jXFxNxyC7Ya7mM9cvTyjz3roYiKjwQislJW9cyngZp4l5t5PUyq2k67CQCY2n\/APh\/CuurrQ6zdu07LqDOwAzjKwDCRMDMGg9h+lSWdr2tz9fcrxb4E9M1l4W7zowy2LWUszs2R82Q5YY+FADHYsTUbp1E2la2Wvj+jScqs7qKSzWvLf7Fp5W4lbvY\/DRJKoVzmVLZbRADCSGYDNrpNc2th\/ZYSo+cr2vfWW2mutttNCSjGaqK9rLKySyyf0LX7Rf3lj7tz9Urk4H+XcSYvYqtowyn+Jdteo6VaxHypEFH5iJ9HDCQQR\/zQ\/6VxTqFP4ljEw1xizfRsTGskHsO46fhtEnqYeXBTVzn1o8U3Y+G5uxl6yuFw02rYzZnUwzZmLav9Qa7Lr51o6SnNysb+04YqJ48O4ClvxP42312B9OtWo0ktSvKo3oWnlr+12Pv\/wDi1a4n5TNqHzEanXGOmKAUAoBQCgFAKAUAoCre0u2WwLgfbT+YUBlmFtgfCNtJ8+\/n\/tQHdhcPmddTG+nl4vwoCasWFCeMyVliCNzv36SPzoD4W+JzHwiJaJJgn4RruaMzFcTsiSRRiIYmLKaW1B08zPU9z8tKhlJs6dGhGGerPlrQzOhOVcoEDrufmQRW1Pcgxmq7yy8oXCqMjGZc5W+14VkfeAHz1PeJCkWKgFAc2Px1uyuZ2gdB1J7Adakp0p1HaKIa1eFGPFNlH4\/x+7eORYRCDIkg6zBYx\/Cdvzrs0MNToRc5ZtesjhSxc8ZLgWUbrLn2\/jTmVxxLDNBBY+HTUSdjpoAZk\/j3uqT0XL7b675WRiKjGm+Hbe2WfLXP9Epwx8wxB6fst3tMFAREmQIPTc69RVavdOK\/+l9U8\/XcWOj6cIza3t3ft+uZl6OREEiII9R1rr32Oi4p6khgWIuIRlVyw3MKFIMggaAFTW8rNO\/fvmV6qTg1m1bvvdeR68J4Xexd0ph7Wp1InwIJ3YtMADvrUdWtGhDiqP8AfYvXcTKN9XpvoatyhyrYwji4Yu3zM3IhVkGRbXoOk\/ptXmMd0jKs1BZLlu7bv1+TFKtFzUIZrn3bfk+PaL+8sfdufqlMD\/LuM4vYqiNBB7EH8DNXakeODjzK1OXDJM4+Ycbcy5lIViY02jsftfOR2Aqo8PGkk9WWVWlUdtEQeF4OX8eJJII7yI\/iP1f086lVO+cyJztlEmuHWyhFgCetsgfEvY\/xD8xr3jdzjSVpM14HUd4kmcKRbLkwQQCvYyBB+R6eRkg1BHF8dRRisiaWH4YNvU6+W\/7XY+\/\/AOLVNiflMiofMRqdcY6YoBQCgFAKAUAoBQCgKv7Sf7C\/30\/mFAZXYWROsbDzO0UBYOCYQZWukxHhXsT1j5afOgPy3eLOHOoEjQbzIgAb7\/nQHVw\/hBuIbz6JMqvclgBPkKxLQko\/Mj2kwuDyqAkTuV6N69j5\/jI0qBZ5HUm1FcTZ83xEmZcaG2e3k3Xrrt0PcTRjY51et7Rk3yoFu4dwdfpDPQggKfVSNI+RrYgJnD3iD7t\/i6H7Y7+o6j59aA8cdxFUV4IJVC3l2\/WtMPVp1q\/sYu7WtvWpFi3Uo4eVZLQoHEse9y5nJkjadgIO2sD+uvYCvUUaMYQ4Vp69dR4+U51nxVXdv165d9yLa4CCdjlUkSNvzkqF229TIqaV8kubt6yyb7\/Bl2lS4ZK+a9aaanJcvQSAYKgly2wzbfaOc5FEdo07RuDcld6vK2uW2ytm2\/Pn0KVuC\/DdJW\/e1tcjv4O5a7iYMr+yXSBM7rAnaTA0iQJ3JmsVrulC6z41n352\/flY3wsYwlZcn4fVfczxYjrP5V07WVy3nct\/KfI1zFAXb02bBMgx47nkgOw\/iPymuZjOlKeHi4x96XkHaPvSdkaJba1YX3FhAigwQBJLMAZY7sY1n\/SuIo1a79tVfZ2K\/wB9jj4rGt\/9cU0rfXq\/ZJ4BwjIpPiM\/jEmPwrn8E6s3UStFePb9fVi3hXCFRR1efd2evAgvaL+8sfdufqldXA\/y7i1i9ipV0CmR3Gz4R97+hqviNETUdWduG+Bfuj9KnjoiKWp14HDgq6owVpDBZG42YD6pnqNNTIbauXjVaouwv4V3h3nzdOIbC+8vW1tX5h0UhlID+EggnWI\/FhpIiKh8xEtb4GdXKl0PicOw2Lf+LaV0sQ70WyjRVqiRoGF5lwly+cOmIttdXdQdz2B2YiNQCSOtclwklex0FJN2JatTYUAoBQCgFAKAUAoCte0OP2J5+0n8woDOuGeEhiO+WRuenyoDvXErlKnQjXT57ToZ0mO9LmXFrUlOCcOZ3TOBlBA9QPFPkNPxNDBY+IWyB7tIiNBG0Rodf+a1hq5tGXDJM4b1\/a3BtmPE0iGP\/c0AE7AgelErGZ1JTd2c64Z7pFuyCzL\/ANQ6ZPNSevmd+1ZNCXw2GGDQm5cAaZ96fgefqMu4Omm+ux8RWtZzjBXk8jaEJTfDFZn7+1nFAgg21GoE+Oejz0XeI31B6rXnMd0pOfu0clz58+zr3Lfs4UstZeC7ObInB4w3FxKwIFvRgNGgwCo+yO2up9Cbv\/HaahiL+H56yLp6HDgWpfFy+\/ayqY\/EZRKSW1y77MYzGBtudu32q+jRhfKWn69ekeJw9NuWbsvx3+u4427sykBWLRrKjUaL4ZzhR3MkTpIUnwxur7a3Wffna3d5HQrtuVkrXtbT6vuz6iFv8TN4j6MGCxjVtIgDXscxnu5gawZlRjF5PZLlne\/irLuRaVJU4Wcu\/wBZdniTXIee5ev2lEscLeVQIkmFABP5D1qHH+5RjN7TiT0oLiuuXr6lm5W5CtYbLdxWW7e0hN0Q+f22\/IfnXnMf07Ks5UsNyefZ601JZyjSScuaLNxPFwpYnbb16f0HzrnYKhJ\/MV3Lny0ttvn6y5eJrupNcLyX\/rf09bOrWuNILxEBAGylpWWaIOgk6nJ0mfSK9DLDP2a3+3LXqu+W\/IrOjUcXJvN2fYuay12O\/hHGV\/abSkeO4WjfQBXbQEDoBJjf0qOth37KTvkrfbXXn5E2CoyVaL6m7\/VbeTPX2hibuHABJK3AABJJlNABqTVfBNJSb6jp4pNtJHnwbk53hr5NtfsD4j6nZfzPpW1XGJZQ+pinhd5Hj7TsFbs4SyltAq++2HU5G1J3J8zVanJyk2yecVGNkVjDfAv3R+ldeOiOa9Tsw2ICqwK5pI0MR85qniMPKrUTWlizRrRhDPW5wcRxAVS7ZgBsqSB8knL+NSRo06SvvzNZVZ1HYo6Ym4DdIuPFxyxExEz4dOkGPOoc889STLLqPi0hJAUGekd\/KmoNn9mHFMW+aziXzgJmQtq4ggQz\/WGvWT51BiKPAlIlo1OJ2NAqqWBQCgFAKAUAoBQFb9oJjBsYB8ab7fEKN2Mxi5OyM3XSCdY2HSoZTudGjhlDOWbO\/A4A33ljlAMyN80aEd4A\/wCTW8NCti\/mdxdMHfWyAreF9J3OYbZl8pIkdJ7QTuVjnxt2WMGAdf6A\/KDQHTgeDNd8TyEIjXdh6HYetAffFOI2sAuW0QSP+jMjXrm3T8x5darV8TClk9S9hMBVxDyyXNnFw662Jh8To7SVtn4QvZejab9e9eZxVeria1k7pcvsuZZxNSnhk4Ul1Nvdnvi7AIIVyQo1ynxIDuFPUbeE\/LYCuhXwldwhGFLhU3lfXLS\/Ln2nn8PjqMZym58Tgs+V+rnyOfE3UazcTwrcFuUUbEAgFgu\/kynUajsT1ehcOqdS0I5XtxvVvkuohxtSdWE51JPOPw8r83zKQUYE5iUA1Yye+6mSdQND1JHWvce0i456rb1scWnJOyirt5L96Lt5akFxLHFm91mUrmBYjuSSYk5freWw7VNRgrKaTTS32sv11nVjT4U5Wz29antgeFGDiLlwWbOqs8MJM627a73G06aDqRWKleMXwpcUsrLL6t7LxJIwc1ZrLm8y2ez3jguYw2bKe7si0x1gvcYZVDu3TT6q6Dz3rjdLUn\/TSnN3fVotdPy8yxShGHwl5xFzKCxMAbyeg615PB0lJKC8Fvy56blDFVJJ3fi9tvHYqIvPfdXYsiEqpWI8YJcRA1lhG\/UabE+qa9guBK9t9cslu+Tza5a5sqqlBQby4s39dcvJNeRC81OmGYMrL7wEkID9YxFxhvI8Ua\/73sM5Vo5\/Dz2fUurma4OEp2Tz2b5W1XLX1Y8+QuIm5jLOdy1wl8xYAyoRssE6r16Ct8ZSUcNPhWSta3ar\/U6MaTVZNLLt3NlNpSwYqMwBAMagHcA9JgfhXl77HSsfdYBRfa5\/ZrP\/AHv\/AAapqOrI6uhUMN8C\/dH6V2Y6I5b1PQmsmD44zw66MN74oVt5lAJ0zTPwjcjz27TVStVi\/cWpYpU5L3mVV8IrkdCTuKijm7Er0LHguH27IhRr1J3NXowUdCpKTZbORrypiGLMFBtwCSBJLKANepqpjvhRZwvxM0OuYXhQCgFAKAUAoBQFc5+E4Nh\/Gn81az0J8N8xetjObGGgggwOx2\/1Hy\/CodTpO0VcnOH4j3IzMu+2sgHQSDEH+byNTRVkcyvUU5XRKXZxMKmrdCvQ99duxn0NbEJOcG4aEMXYNwCQPqlZ+JZ3gnWfhJ8wSB9c44u5awrtabK0qM3YEgGPOKgxFRwpuSL\/AEZRhWxMY1FdZ+CKpwHhvfxZtXLHWdyZ7xNeTxFWdWdo67Hax+KUIt3so6W0J\/EoLwayFOWNTGnYR516Lo\/BU+jEsRXacpJZder+x88xeMq4+Xs6Oid2\/XiUHGcVfh125oxt6ratOTLsIm6W3yDYTMntqa9i4f1MIuLV8m3yXJdb35fQho4ONSPvPPmtN7ZeJ98tX\/2s4y+9wG41lZSCAACNO+ncHQ9a3xVCFJUqdNWs\/WnmWJqUKM4W2vfdu5BcZx73StrL49ApX4iTsAo3nQee8AwBdoU+C7k7PPXS3b67mQ4PDxiuJfTv9fl6taFrBqRiFW7fB0w\/1bTd7rjc6DwKegkjatHVdbKnkt5c+xfd9yOm6avd+u0h+KcTu4l\/eXWzHYDYKPsqo0UeQqSnSjTVoo2LR7JT\/wCuP\/Yf9VrndMq+Fa9aM3g7O5eeYM11GtCCCR1jMNzr9mIH41zOjaNOjw1M00vpt9TztXEylUaut9vFFe4\/zAMLbVLcMygLB+ppoWA2IgRB7106GFdX3quV3fLfPbqed7rxJKFBVazls+r1o\/VjO8QGLy5ktqTM\/wDNK7CjeyR14OKjaK0LjyRgLdnEWcS75FOb3atqz+BgSoA1USddtO9U8fL\/AK5UYK7yvyWd8zWlKo5q6yW\/4NqryZfFAUb2tqf2a0YMC8JPbwsNe2tTUdWR1NCtcD4ZdxAVbSzAEsdFXTq39BJ8q6c60KcVc58aUpvIvnBuU7VmHufS3B1I8Kn+Fe\/mZPaK59XEznkskXadCMM9WcvtNtM2BOVSYdSYBMATJMdKipfESVNDILHxL6irkPiRWloye4hiDbQsoBPSdqu1JcMblWEeJ2KXj79y403SSex2HoNqqOTlmywopZFr5V9ouJwkW7s37I6MfGo\/hc7+jT5EVDOkpaEsajRsHL3MeHxyZ7FySIzIdGWftL8jrsY0NVZQcdSeMlLQlq1NhQCgFAKAUBAc8KThTABOdNCYHxDrBrDV1YkpT4JKRQsMwB1UmNyIInsApn8qKKQqVZTeZO8JwvvyAWVV\/j0J8lVoJ\/SskZZ7fA1ta2GNtuvUNHf+g2EmBQC9jYhcQvuyD4bq\/Dm2BDa5Tvo24mdDFAcHNlw3MMbZID5kII+FlzDxr5aiRuCRuCCaeOko0W2dPomajiU3yfkcS8Pe2iKhEuwDT0Tdv8RGnzqj0HSi6ssTWWUYtx7XfM5P\/Icd7eKw8f5Ozt5dh8c18y28AkAZrpEIn\/k3YD86udH9E1+k1x15e45cTtr\/AKr7sqw4KU+Cis4q3763y\/Bj\/E+I3cVc95dbO206CBvAA2Gpr6Bh8NCnFUqMUktkZjFQT68+ZduTOBsMJi3vxbtvbEM+gWDJaYkadtap42vFVKUFm09EQRqe1nKNPZa7XuVniPFkTOmFBIb4r7qBdYbQnS0n\/wBiNz0qaUKlVL2uaX8fz\/k+3Is04qEbIr2aP9f9f9azxOOfj+fybnsikgkAmBJ8htJ7akfiKnTuatpal39kdknGO\/QWXHqSV2rm9Lu2Gb6\/yY4lxcG7TL7zBj7eGtl9JA2n+k6xvp2Nec6JhiMS7Tdo87eN\/DwepzMTRp+0Spq73z25duZjz+8xl0kBmdjOUAmSYk+Ukk\/7V7eMYwiruyXPqLsIqilFfv8AZ13btrD75b14D4Zm3bMQc5Bi63kPD3J2rVylW+HJc9\/0ut59mptGml8R+8Avvcxlu5dYszZtSd4RgAOyjoBp0FZxEYU8PKMctPP0zdO8rI3riOJNtMyrmMqOsAEgFjAJgAz8um9eKLZB4nmK+rZVwjPJiZYAHP7sZpTQRDSNgwO0mgO\/hXEGxOYPYKWyisucNLK7XFysjKMpyohK6kZ4MdQJKxZVFCooVRoAoAAHkBWW76hKx6VgCgKnx3kPD4hveW\/oXmSVEq3eU0g+YjzmpYVXFkc6akcHOHLluxgH90jO+ZSzxmaAZJ0HhX0gVJ7aVSfvM09lGEcjKnQMIIkVKRn7w\/gouMZYhR06+k1NShxkdSXCXPlzj+F4X70sDJQBUQSzGTudh6mtcVTvZRM4edrtn1w32uP74+\/sL7knQWyS6DzLaXP\/AK1WdBWyZOqrvmaZwji9nF2xcsXFdfLcHswOqnyNV5RccmTJp6HdWDIoBQCgIHnVC2FZVBJLIAACSTmHQb0BH8ucphAHv775Og+8Rv6DT1oC2FBEQI7Rp+FAc\/7Bb+quX7hKfkpE0B+NhniBckHo6qwj\/DlP4mgKzzLw5rNkuuVVVlbKDKlp0ItsPozr9Vo3kNtVLHq9Brs9evAtYOE51VGGuZG8M5wZsLdxGIsG17pso1kXDsCnkTP5b1zsB0bVrYqOGo1PcavJ7qPJ+S7yDpCCo\/HH327RT8+zcyviePuYm4btwklj8h5Dyr6nRoKMVCmrRWRz6dONNWX13fWTOF4RawqrexuYEwbeHX9446F\/\/aSe+p6CtXXvJ08Pns5bLs5vwN3G6zJPD8wXsZax3vCFRcKcltdFQZ02HUx1OtVKmGhQdO2b4s3vozNOMYx4Yqy5FHq6D8IrVxTMkvy9w\/EXSi2rPvbXvk9+oOXMkyeokKJ0B0LDSuP0lif6ThSkouSdm9ravl6sjHBe82m7cuvT6lv5Kwf7Pxa8kQq2rpUa\/DKwPw\/SpsfJ18FGTeUraaaFehWvRc90nfndHrzWgvHPci2iEA3HJ9ciqNWbbQa6dpqbAcNCChDO+iXn2HJwHtasnK\/b6+xTMXxQKrWsOptoZzuY95cB6Mw+Ff4QfUtXRdJyd55vlsvy+v6JHcikjitKi\/FLGPhXaegJ7DrHp51twy2NG5y0y6yX5RVP2q290tJzZVUDXwsNSdFET32FV8ZxOk2t+faZTlxcMVktz+gq8aXRQCgInHjE52yZsukZfdbRr8eufN38OX+KgI22OJjNn92wl492UUwPEkZwQCSMms6ENvIoCxYIP7tPeGXyjOQIlo1MAmNZ6mgPagFAVPmTkWxipe39DdP1lHhY\/wAS\/wBRB9akjUaNJQTKfwvk3GJea2bYG30k+CO4bc+kT5CrlLEQgm2VqlGUmkQXOfChZxL2icxUL4ojUqDp2Fa+0c\/eM8HB7pWL+DK6jUfnWyZixI8tpiUuC7h3a0R9cbEdip0ceR0rdUuPXQ0dThN8wPE1GFtX79xEzW0LMxCrmYDuYGprnyjabii7GV4psklYESDIOxrQ2P2gFAKAUAoBQCgI3mDAi\/ZNsmAWUk+QM1R6Rc1QfArvLzLWExP9PU9pyTKRzbwa5iQlmyYtW\/iGigQNyx2Heu\/\/AMfp0cDh71V78tWtWeYqdISxWOm1eT26ufUU08RsYEZMKVvX\/rYgiUQ\/\/Cp+Ij7bfIa13nGpiF73uw\/xvm\/9n9l3nT4Und6kDdJdi9xyzN4iSSxae57x3q5SilGy0Ro5t6dhMctfueIf\/in\/ADEqnjW3Up3\/AMvsyWOjK7UxgsPJvARi7jG4ctq0uZzsD2TN0nX5CqWOxf8ATRg0ruUlFJeduogxE5Rg+BpOzefrXl9y2YrmlLGGAw9kLiHbIqROWY1AXfwhQBG9cfFdATxeOVTFTTpRWmau979W7+m5D0fUcKcqUG7t3ctuStff9scp4e5ZxT38XdBxT2bhFkQSqgZpuEaJsAFGuvSujirToRhSjanFpX25e7z7dC5TpwinDne\/fzfNlB4pxa7in95eaT0A0CjeFXoP16zXYpUYUFwpW8zEYqKtFZHLbtljA9dwPxJra+eV7CUlFXZI2MChU3CWFpRBOks5GiL0LEyeuVRJ1qCrWlTkqMVeUn4bt+C621tc0g5O\/F65fvv6iR5Wtp+02ndobUBAuaAEYS0EAazA8iT56Yu\/BJJer95HGU+Lhisud7fT7\/Q3yvHHSFAKAUAoDyxN3IjPBbKpMKJJgTAHU0BAY7msWlLe6NyIkWmzmCRLqIGZAGOo1LKygE7gdXD+P+9dU92Vl2QydQyKXJAjVIy+LuyjrQE1QCgKdzhyQMWxv23yXiBIbVWgQPNTHUT6VLCpw5MjlC+Zl3FOGXcM\/u7yFG6TsfNSNGHpVhNPQiaa1JT3hWzmUSQgPXy1MbDWrznwwuU1HilYqnF8ffvZBedmCAKg+qoAjwgaDTruetVFa90WWTXJnM+Nwpy2fpLQ3tuTlH3W3Q+mnkaw6PtB7XgNH5j9pWGwy5bf014gHKp8KEiYd\/LsJPeKrRot6k8qqWhTuD+1XFJdLYhVu22PwqApT7h6jyb8RUkqEbZGiqvc1TgHMOHxqZ7FwNHxKdGX7ynUeux6VXlBx1JoyT0JWtTYUAoBQEdzBxK3hrD3rpIRYmBJJJAAA7kkCo6uCnjUqEXa7WfUs2OJRzZiXM\/N93GkoPorE6W1PxedxvrHy2H517DA4GnQSbd3a13t2FSMIwuoK1yvLbP6\/l0\/Sugk42v1hyR3W8ODaugH4CCzCCMs5BHmS2npWs60YuKv8WXXzz5KyIlxOSl1aaciW4KwKcSyiF\/ZzA7D3iwKpYly4qV3\/L7MloJqCvm7FXqzFXdjYveAxr3LP7HhET3QtEX7z+FFLRLs3kBp1PbSqVWhTp11Xq3cr+7FZuy0S7dznUsPVqNzqu2d7dV7q\/hbl3nGnELODB\/ZTnumQ2IfRiTv7pT+6Tz+I+WlWoYSpWd8Rp\/jt3831adpbnUfwwy6\/wAHpyPdLYq4xaS1i8Se\/h6eVbdJq1BJaKUfMzRjZ29d5T7QmBoJjU6AeZNWpTedvX7N27K50XSF8A26kfWI232G2n9axlBLy+35I4py97fy9esj3wHv3dFQkMuqDYLOpbXQaSST0FQ1GknKenpGlSNLhfErp6+vAlOB4BkxltQfeCW8SzDEI0x9qJ+Va15J4eUnk8te1amcPWVWztZ8t7fY32vEnRFAKAUAoBQCgFAeOIxKpGYxJgbn56bAdTsKA5Bx3DlgvvVzHL4TIPjJC6ESJIMfLuKA6cFjrd4E23DAEAx0JVXAPnldT86A\/OIYC1fQ27qK6noR+YO4PmKym1oYauQfHuBpbwF6zhrWpTQLqzQRuTqxgVIpuUk5M14Eo2RizpuCPIgjr2INWSA++L3Lg+jtwqADwroToDr3qec2nwohhHK5AxUZuKAlOB4S\/nW7aZrZXa4CQR6Rv6bVtGm5mrmon9Bcs4h7mFtPcbM5XxNAEkEiYGg26VQqxUZtIuU5OUU2SdRm4oBQFS9qn923fvW\/51q\/0Z\/cLv8AI1noYdhrRdlVRJJ0HevUKy19dZWqSUIuTeSOu6qxcEwRBg6QZhkEaHWKk4miCLleLtk\/xkzu4OxtDOzoPd5bltSJzXLhCjNHZVJ8pqvOHF7tsmmm+pX9Za9xHWftHwxvndX6ly73vyJ0IoXibIdDYkg5SVYuJAZd1EVVkpqnQU83fW1r5ctuzYlw8+JvK2ts28sue5CYTgS2kF\/GlraHVLK\/vbvyP7tP4m+Q2qaMp1pcFBX5v+K\/L6kWclqfnEuLteVbQC2rK\/DZT4VH2m6u3cnX0ro4fCwoNy1l\/k9X1LkupEE5uXYcl5G+zlDCFB+IqNZ8h3PqO9bxs9X9PIhg4872zdtL+tC0cjv9NcVEGX9nu5ng6kLEKeig9epnyFcrpK8qabf8lZfkzQj\/ANt5PPPL89fkvqUq2QADO0adSf6RXTkoweb\/APSdpvI+7VhnYnLoDqNgPKTtp86hirv3jWVSMElcsfLPAMRjpSzmW0dHuN8AmMyqN2MBRp21IBiq+KxlHDL385ckYhh3KSlK2Xr8vqNd5c5asYJItiXIhrjasfL+FfIaV5fFYyriZXm8uS09dZdhBR0JmqhuKAUAoBQCgFAKA8MThEuRmE5TpBI30IMESD1B0NAR93lnCvOa1JK5SSz5spBEZs2bY7zIhfsiAO\/B4G3az+7QLnbO0dWIAJjpoo2oDooBQEFzFyph8YJdctzpcWA3z6MPX5RW8ZuJrKKZkfNOCFjFXbKkkJlEmJPgU9PM1aU3P3mV+HhyRC3sOrb796zcwSXCeBoAHfxE6gdB8utW6dNWuyvObvZE2pGwiR07fKpyI07lH+yWfQ\/zGuLiPmS7Tp0fgRMVCSigFAVL2qf3be+9b\/nWuh0Z\/cLv8jWehiFq6AVkAgEnTQ6+flGn+9eqV\/oVJRbTs9fX\/p0YFQ7tnzlSGLZYJAHiza77T8qy3l+e4jq3hFcNsmvwdHCcM18m2ls3bjMIA0yruzMx0A0AkxGta1JqnnN2Xr1kHTm5rhySXr8\/QtfLBs4VcWtq6Lt9MMzNcABtJlZSFQEfSkMZzHTQRXMxDniJ01JNQ4krfyd768uws\/Cm1qVHE4t7jlmJLkyWfU\/Of+fhXoYUowjwpZckVbXzlmedwqoOonTQSfxJ20E\/OsObvawjxSemR2YJFZHZ2GYjxuwZhZQkAEAfFcaYUdAD125mKrzpNcCbtolZOTs+eSS1f30e1KHFPg0ivFr1brb5E7yfig2JZUkWxYuwDoWhCAxA0AGsAbSdySar46MvYxcrXuuvfb87\/QYalwzbebzz9b8\/wkUmymaAJJMAACZPYR1roxXE+KTsTGncp+zk3Mt3GLkXcWAdT5udx6DX02rj4zphQXs8Pm\/8vx+TanRazkzTsPYW2oRFCqogKoAAHYAbV52UnJ8Undlg9K1AoBQCgFAKAUAoBQCgFAKAisfwb3rs2ZdY0ZM3w\/V3Ep1y\/a1mgI21ycqk\/TXGBLSHJMhpbKSCDpcyvoQZBiJ0AsOCse7toklsqhZPWBE0Bi\/PykcQvyNypHpkXWrdP4UV5\/EQFbmpYcB+7X0q\/T+BFOfxMrOKwL23zAlX7zv6Gqj4ovMsLhksi98l+0dLKLhsYhQLot1QSNTPjUajfdZHkKr1abk+JE1OairM1LC4lLqB7bK6MJDKQQR5EVVatqWE7nrQCgKl7VP7tu\/et\/zrXQ6M\/uY9\/kaz0MKFenSvoQFg4Rw1sgxN657ixqC5+K7O6Wk3ckaTsNZNR1sQo2hFcUtbbLt5eZG6KldPTLwPDiXHZQ2MOnubB+ITL3f4rr\/W+6PCPOoo0m5cdR8UvBdi++pLfZHVyYPDjun\/AKN\/5kpV+bS\/3X3MN+6+wj7WRYY5WOsKep2DN2E6x5eddepKWaXUU5ccvdV1pn9kfvDsCtxpZ8qKC1xvsqD8Indj0Hn1qGrUdON7Z6Lr\/XMzVrSgrRWbyXX19h+cQ4p7yLdu2EtAgqm5JGgLndm1J+dVYQtaTd5b\/pbI2hh+Fucnm1rt3E77NcPcu4xgAYFm4pOsKWGUAnprVbpKtw0Pe5rwZZpxWxpXKXJVjAgOYuX41uEQB5Iv1R+fnXDxnSVXE5aR5fnmTQgolornm4oBQCgFAKAUAoBQCgFAKAUAoBQCgPK\/fVACxiTA8yegA3oCM4jg8Jjl924W4YkEfEo+0rDUA9Oh862jJx0MNJ6mdcx8g38PL2ZvW+wHjUeaj4vVfwFTxqp6kMqbWh98tcCvYlEyrlWNXYED5Ddj6adyKuvEQpwS3KqoynJ8i+YDlPDW0KugulhDM4B\/\/UbL8tfM1QqYic3mXIUYwRUeZPZpPiwpzLP7pzqPuud\/Q\/iazCt\/kYnT5HvxjAXMBgLdgPlz3GzC2SBBUnLm0J1HlNWKThUqt2ysQ1FKFNK+dzQcP8C+g\/Suey2j0oZKt7S7LPw+4iKWZmtgKokkl10AFX+jZKOITlpZ+RpNXRk\/7JYwOt8LfxI2sAzbtn\/5mHxsPsLp3NdzjnWyh7see77Py+4jyREcT4jdxD+8uuWbYdAo6KqjRVHYVPTpxprhijDdzkrexgs\/JiH3eOaJAwjj1OZTH5VBVv7Sl\/uvuYbWcb52IjD4Y3GlmVV3ZjpAG8Dr5AdYrrVHwKyz87\/b0ytOqqcbRTb2R+cQxoZRbX4VJgkAfkP1Mnbbaqs21J8zNCi4tzlq\/XrYs3J\/IF7GRduzZsd48bj+EHYfxH5A1zsb0jTo5Rzly2Xa+fV9WW4wubDwnhdnC2xasoEUdBuT3J3J8zXm61epWlxTd2TJWO2ojIoBQCgFAKAUAoBQCgFAKAUAoBQCgFAeOJwqXModQwVgwB2kbGOu9Ac+E4RZtOHRSGVPdglmMIDITU7DpQHdQCgIEXcblMqAxXwwFIDksPFJEADIYEzLa7QBO0BWLvHzlFy7g7hZSpBymFDAFjLL4Sksp7x0kxm7MWO\/BccN11QYe6oJgsykKBlLBgeoJEdKwZJmgK17R8S9rh99rbFW8IlTBhnUGCNtCRVzARUsRFNX18jWWhgNepIBQFh4DgEu2mLytpSM5HxXLhnJbU5TCgan19Kr1pzU4xpq7fPRJWu3mrvZf+lOvV9nJtvO2S83nb0uZ18p2z\/65DoBhLgjeJZPxNSYqVp0f919yxGS9m565EXZS5eK2LCZ3J0CiW9Z2A8\/9qu15qmnOTt2kVOleXE7\/Y0zk72cW8PF3FRdu7hN0Q\/P428zp5da8vjOk3UbjSyXPf8ARejC2pf65JIKAUAoBQCgFAKAUAoBQCgFAKAUAoBQCgFAKAUAoBQCgFAKAUAoCqe1D+7b\/wDg\/wAxavdHf3Ee\/wAjWehg9enICU4Fwz3zOzfu7a5nA3YfZHrrr0E1rJ2t1uyKmMxPsYpL4pZIsyczWsNhQtgA3GJOUrAQnqe8CAIn1qKrg51K16miy12RzVgatas\/avJd9\/Wu3Yens94NexhxTsCtu9Za373LpmZlJyjTNAB20qv0hi403T34Wna+1jvUaSjHhWhp\/L3LtjApkspqfic6s3qf6DSuHisXVxMuKb7tkTRiloS1VTYUAoBQCgFAKAUAoBQCgFAKAUAoBQCgFAKAUAoBQCgFAKAUAoBQCgKp7UP7tv8A+D\/MWr3R39xHv8jWehhCivUwjxSSIGTdziP0Qwtm3OaJyyS79+7dgKy4qnPjk9NOSRz6eFlKt7abz2XJF35R9mpMXsdqdxZn\/MI\/lHz7Vw8Z0q37lJ9\/4OpCmkadathQFUAKBAAEADsANq4jbbuyU+qwBQCgFAKAUAoBQCgFAKAUAoBQCgFAKAUAoBQCgFAKAUAoBQCgFAKAUBVPah\/dt\/8Awf5i1e6O\/uI9\/kaz0Me5d5dxGOfJZXQfE50VPU9\/Ia16CviYUI3k+7chUWzaOU+TbGAEqM94jxXWGvoo+oPz7k153FY2pXeeS5E0YpFkqmbCgFAKAUAoBQCgFAKAUAoBQCgFAKAUAoBQCgFAKAUAoBQCgFAKAUAoBQCgI7j\/AAtMVZNi5ORmXNlMHRg0T02qahVlSnxx1VzDVzpwGCt2EFu0ioi7Kogf7nzrSc5TlxSd2ZtY6K0AoBQCgFAKAUAoBQCgFAf\/2Q==)\n\nIn this file i have made both the simple VGG 3 block model and tried to compare it with Maxout Network . Let's see how it will work out in the end :)","a554a4f8":"# Making MAXOUT Activation Function","6eebccec":"A maxout layer is simply a layer where the activation function is the max of the inputs. Even an MLP with 2 maxout units can approximate any function. They give a couple of reasons as to why maxout may be performing well, but the main reason they give is the following --\n\nDropout can be thought of as a form of model averaging in which a random subnetwork is trained at every iteration and in the end the weights of the different random networks are averaged. Since one cannot average the weights explicitly, an approximation is used. This approximation is exact for a linear network\nIn maxout, they do not drop the inputs to the maxout layer. Thus the identity of the input outputting the max value for a data point remains unchanged. Thus the dropout only happens in the linear part of the MLP but one can still approximate any function because of the maxout layer.\nAs the dropout happens in the linear part only, they conjecture that this leads to more efficient model averaging as the averaging approximation is exact for linear networks.\n\nReference Taken From :https:\/\/stats.stackexchange.com\/questions\/129698\/what-is-maxout-in-neural-network","ad8f3d87":"# Making Model Using Maxout Activation","f26971e0":"# Importing Libraries","05ded5df":"# Compiling Model","31a6695d":"# The model worked great as we can see that the accuracy increased from 80 to 83 :) Cool :)","2511d83c":"# Thank you :)"}}