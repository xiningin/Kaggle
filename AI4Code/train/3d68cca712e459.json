{"cell_type":{"f6630139":"code","bbe30fdd":"code","c1c15279":"code","f0e559a8":"code","663f2847":"code","14e1d216":"code","59837546":"code","3ee18c2f":"code","a052a0f1":"code","92a65e0f":"code","84cbb208":"code","8ee0a070":"code","ccef2116":"code","d906f8f8":"code","6503df21":"code","06764e4b":"code","d6285d9e":"code","d04bd0ec":"code","da23a925":"code","afd50102":"code","13d4f225":"code","f8b9bd35":"code","106e7088":"code","7381d850":"code","28e4041e":"code","9709e174":"code","a0a984be":"code","c710e6e4":"code","2bdd34a3":"code","fbf7b16e":"code","536f5c5c":"code","7f870bee":"code","7d148e93":"code","84b84a68":"code","b327b44b":"code","c0860470":"code","6d5c88e8":"code","da5a038b":"code","2cd83b6f":"code","46bc54e9":"code","d054a5d8":"code","9759d255":"code","0eeaa94c":"code","08890bb7":"code","0c411170":"code","6ee7e6e7":"code","95feb120":"code","c61c6d3f":"code","12a98615":"code","ea7bcbd7":"code","6f9be969":"code","5d6efd76":"code","00fdc951":"code","e2aaf1bc":"code","f0114d66":"markdown","f45e04d6":"markdown","d5940b40":"markdown","6bbaba10":"markdown","99c8e2d3":"markdown","74ced0dc":"markdown","7ce90a76":"markdown","acd11672":"markdown","c722cf8d":"markdown","880dd23d":"markdown","72352a4a":"markdown","3313b3af":"markdown","d0d3dc8c":"markdown","ddb2caee":"markdown","3fb91a77":"markdown","27e7bb98":"markdown","5159e1d9":"markdown","b123f1cf":"markdown","20012a91":"markdown","6e08c5b3":"markdown","5d00ab7e":"markdown","cfb1bfb7":"markdown","560ed364":"markdown","ffdc8395":"markdown","cb336cf3":"markdown","baba20d5":"markdown"},"source":{"f6630139":"import os\nfor i in os.listdir('\/kaggle\/input\/'):\n    print('\/kaggle\/input\/'+i)","bbe30fdd":"import os\nfor i in os.listdir('\/kaggle\/input\/african-wildlife\/'):\n    print('\/kaggle\/input\/african-wildlife\/'+i)","c1c15279":"# for data processing\n\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\nimport numpy as np\nimport pandas as pd\nimport re\nimport os\nimport glob\nimport cv2\n\n# for data pipeline --------------------\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import*\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import*\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nfrom skimage import data, color\nfrom skimage.transform import rescale, resize, downscale_local_mean\nimport matplotlib.image as mpimg\n\n# for prediction (machine learning models) ------------------------\n\nfrom sklearn.linear_model import*\nfrom sklearn.preprocessing import*\nfrom sklearn.ensemble import*\nfrom sklearn.neighbors import*\nfrom sklearn import svm\nfrom sklearn.naive_bayes import*\nimport xgboost as xgb\n\n#deep learning libraries\n\nimport tensorflow as tf\nfrom tensorflow.keras import Sequential\n\nfrom tensorflow.keras.layers import Dense,Conv2D,MaxPool2D,Flatten,Dropout,BatchNormalization\nfrom tensorflow.keras.optimizers import Adam\nprint(tf.__version__)\n\n# for confusion matrix plotting\nfrom mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import multilabel_confusion_matrix,confusion_matrix","f0e559a8":"os.listdir('\/kaggle\/input\/african-wildlife\/buffalo')[:7]","663f2847":"data=open('\/kaggle\/input\/african-wildlife\/buffalo\/184.txt')\n\ndata.read()","14e1d216":"k=0\nfor i in os.listdir('\/kaggle\/input\/african-wildlife\/buffalo\/'):\n  if i[-3:] !='txt':\n    img=mpimg.imread('\/kaggle\/input\/african-wildlife\/buffalo\/'+i)\n    plt.imshow(img)\n    plt.show()\n    k+=1\n  if k==3:\n    break","59837546":"df=[]\nlabel=[]\nfor i in os.listdir('\/kaggle\/input\/african-wildlife\/buffalo\/'):\n  if i[-3:] !='txt':\n    img=mpimg.imread('\/kaggle\/input\/african-wildlife\/buffalo\/'+i)\n    img=resize(img,(128,128),anti_aliasing=True)\n    tensor=img.reshape(49152)\n    df.append(tensor)\nfor i in range(len(df)):\n  label.append(0)\ndf=pd.DataFrame(df)\nlabel=pd.DataFrame({'label':label})\ndata=pd.concat([label,df],axis=1)\nX=data.drop('label',1)\ny=data['label']\nxtr1,xts1,ytr1,yts1=train_test_split(X,y,test_size=0.2,random_state=0)\n\n","3ee18c2f":"xtr1.shape,xts1.shape,ytr1.shape,yts1.shape","a052a0f1":"xtr1.head()","92a65e0f":"df=[]\nlabel=[]\nfor i in os.listdir('\/kaggle\/input\/african-wildlife\/elephant\/'):\n  if i[-3:] !='txt':\n    img=mpimg.imread('\/kaggle\/input\/african-wildlife\/elephant\/'+i)\n    img=resize(img,(128,128),anti_aliasing=True)\n    tensor=img.reshape(49152)\n    df.append(tensor)\nfor i in range(len(df)):\n  label.append(1)\ndf=pd.DataFrame(df)\nlabel=pd.DataFrame({'label':label})\ndata=pd.concat([label,df],axis=1)\nX=data.drop('label',1)\ny=data['label']\nxtr2,xts2,ytr2,yts2=train_test_split(X,y,test_size=0.2,random_state=0)","84cbb208":"df=[]\nlabel=[]\nfor i in os.listdir('\/kaggle\/input\/african-wildlife\/rhino\/'):\n  if i[-3:] !='txt':\n    img=mpimg.imread('\/kaggle\/input\/african-wildlife\/rhino\/'+i)\n    img=resize(img,(128,128),anti_aliasing=True)\n    tensor=img.reshape(49152)\n    df.append(tensor)\nfor i in range(len(df)):\n  label.append(2)\ndf=pd.DataFrame(df)\nlabel=pd.DataFrame({'label':label})\ndata=pd.concat([label,df],axis=1)\nX=data.drop('label',1)\ny=data['label']\nxtr3,xts3,ytr3,yts3=train_test_split(X,y,test_size=0.2,random_state=0)","8ee0a070":"df=[]\nlabel=[]\nfor i in os.listdir('\/kaggle\/input\/african-wildlife\/zebra\/'):\n  if i[-3:] !='txt':\n    img=mpimg.imread('\/kaggle\/input\/african-wildlife\/zebra\/'+i)\n    img=resize(img,(128,128),anti_aliasing=True)\n    tensor=img.reshape(49152)\n    df.append(tensor)\nfor i in range(len(df)):\n  label.append(3)\ndf=pd.DataFrame(df)\nlabel=pd.DataFrame({'label':label})\ndata=pd.concat([label,df],axis=1)\nX=data.drop('label',1)\ny=data['label']\nxtr4,xts4,ytr4,yts4=train_test_split(X,y,test_size=0.2,random_state=0)","ccef2116":"X_train=pd.concat([xtr1,xtr2,xtr3,xtr4],axis=0)","d906f8f8":"y_train=pd.concat([ytr1,ytr2,ytr3,ytr4],axis=0)","6503df21":"X_test=pd.concat([xts1,xts2,xts3,xts4],axis=0)","06764e4b":"y_test=pd.concat([yts1,yts2,yts3,yts4],axis=0)","d6285d9e":"train=pd.concat([X_train,y_train],axis=1)\ntrain=train.sample(frac=1)\ntest=pd.concat([X_test,y_test],axis=1)\ntest.sample(frac=1)\n\nX_train=train.drop('label',1)\ny_train=train['label']\nX_test=test.drop('label',1)\ny_test=test['label']","d04bd0ec":"X_train.shape,X_test.shape,y_train.shape,y_test.shape","da23a925":"X_train=X_train.to_numpy()\nX_test=X_test.to_numpy()\ny_train=y_train.to_numpy()\ny_test=y_test.to_numpy()","afd50102":"X_train.shape,X_test.shape,y_train.shape,y_test.shape","13d4f225":"X_train=X_train.reshape(1200,128,128,3)\nX_test=X_test.reshape(304,128,128,3)\n# y_train=y_train.reshape(1200,1)\n# y_tets=y_test.reshape(304,1)","f8b9bd35":"decoder=['buffalo','elephant','rhino','zebra']","106e7088":"y_train=y_train.astype('int64')\ny_test=y_test.astype('int64')","7381d850":"for i in range(4):\n  plt.imshow(X_train[i])\n  plt.show()\n  print(decoder[y_train[i]])","28e4041e":"y_train=y_train.reshape(1200,1)\ny_tets=y_test.reshape(304,1)","9709e174":"model=Sequential()\n\nmodel.add(Conv2D(64,activation='relu',kernel_size=(3,3),input_shape=X_train[0].shape))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dense(4,activation='softmax'))","a0a984be":"model.summary()","c710e6e4":"model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])","2bdd34a3":"hist=model.fit(X_train,y_train,batch_size=20,epochs=10,verbose=1,validation_data=(X_test,y_test))","fbf7b16e":"plt.title('Model Accuracy')\nplt.plot(hist.history['accuracy'],label='train')\nplt.plot(hist.history['val_accuracy'],label='validation')\nplt.legend()\nplt.show()\nplt.title('Model Loss')\nplt.plot(hist.history['loss'],label='train')\nplt.plot(hist.history['val_loss'],label='validation')\nplt.legend()\nplt.show()","536f5c5c":"model=Sequential()\n\nmodel.add(Conv2D(64,activation='relu',kernel_size=(4,4),input_shape=X_train[0].shape))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dense(4,activation='softmax'))","7f870bee":"model.summary()","7d148e93":"model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])","84b84a68":"hist=model.fit(X_train,y_train,batch_size=20,epochs=10,verbose=1,validation_data=(X_test,y_test))","b327b44b":"plt.title('Model Accuracy')\nplt.plot(hist.history['accuracy'],label='train')\nplt.plot(hist.history['val_accuracy'],label='validation')\nplt.legend()\nplt.show()\nplt.title('Model Loss')\nplt.plot(hist.history['loss'],label='train')\nplt.plot(hist.history['val_loss'],label='validation')\nplt.legend()\nplt.show()","c0860470":"model=Sequential()\n\nmodel.add(Conv2D(64,activation='relu',kernel_size=(2,2),input_shape=X_train[0].shape))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dense(4,activation='softmax'))","6d5c88e8":"model.summary()","da5a038b":"model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])","2cd83b6f":"hist=model.fit(X_train,y_train,batch_size=20,epochs=10,verbose=1,validation_data=(X_test,y_test))","46bc54e9":"plt.title('Model Accuracy')\nplt.plot(hist.history['accuracy'],label='train')\nplt.plot(hist.history['val_accuracy'],label='validation')\nplt.legend()\nplt.show()\nplt.title('Model Loss')\nplt.plot(hist.history['loss'],label='train')\nplt.plot(hist.history['val_loss'],label='validation')\nplt.legend()\nplt.show()","d054a5d8":"model=Sequential()\n\nmodel.add(Conv2D(64,activation='relu',kernel_size=(3,3),input_shape=X_train[0].shape))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(64,activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Flatten())\nmodel.add(Dense(128,activation='relu'))\nmodel.add(Dense(4,activation='softmax'))","9759d255":"model.summary()","0eeaa94c":"model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])","08890bb7":"epoch=6","0c411170":"hist=model.fit(X_train,y_train,batch_size=20,epochs=epoch,verbose=1,validation_data=(X_test,y_test))","6ee7e6e7":"plt.title('Model Accuracy')\nplt.plot(hist.history['accuracy'],label='train')\nplt.plot(hist.history['val_accuracy'],label='validation')\nplt.legend()\nplt.show()\nplt.title('Model Loss')\nplt.plot(hist.history['loss'],label='train')\nplt.plot(hist.history['val_loss'],label='validation')\nplt.legend()\nplt.show()","95feb120":"prediction=model.predict(X_test)\ntype(prediction[0])","c61c6d3f":"tr_pred=model.predict(X_train)\ny1=[]\nfor i in tr_pred:\n  y1.append(np.argmax(i))\nts_pred=model.predict(X_test)\ny2=[]\nfor i in ts_pred:\n  y2.append(np.argmax(i))","12a98615":"min(y1),max(y1)","ea7bcbd7":"for i in range(len(y1)):\n  y1[i]=decoder[y1[i]]\nfor i in range(len(y2)):\n  y2[i]=decoder[y2[i]]","6f9be969":"y_train=y_train.reshape(1200)\ny_test=y_test.reshape(304)","5d6efd76":"y_1=[]\ny_2=[]\nfor i in range(len(y_train)):\n  y_1.append(decoder[y_train[i]])\nfor i in range(len(y_test)):\n  y_2.append(decoder[y_test[i]])","00fdc951":"train_mat=confusion_matrix(y_1,y1)\nplot_confusion_matrix(train_mat,figsize=(5,5),colorbar=True)","e2aaf1bc":"test_mat=confusion_matrix(y_2,y2)\nplot_confusion_matrix(test_mat,figsize=(5,5),colorbar=True)","f0114d66":"Conclusion :\n\n Having too big kernel or very small kernel will affect the model in a worse manner which will give you unwanted bad accuracy.\n\n ### So we can say the kernel size of (3,3) really fits great for this project.","f45e04d6":"# Confusion Matrix Generation :\n---\n\nIn this part we can see that how the features are connected towards each other in pictorial or bilogical form.","d5940b40":"We can see the model is overfitted after 5th epoch when : \n###                                  KERNEL SIZE ---> (3,3)","6bbaba10":"As the model produces prediction as tensors we have to find the actual prediction with the **numpy** function **argmax** **(numpy.argmax)**.\n\n### prediction tensors ---> np.argmax() ---> prediction ---> decoders ---> actual predictions","99c8e2d3":"# Steps of making a deep learning model to predict images :\n\n\n1. Creating environment and downloading data and unzipping\n1. Importing required libraries \n2. Understanding the stacks of folders of images to gather their file paths\n3. Getting path and primary visualizations\n4. Creating dataframes with the images\n4. Data preparing to feed into the model\n5. Model building\n6. Compilation of Model\n7. Model Fitting and Evaluation\n8. Conclusion and others","74ced0dc":"Now we are going to check with the model and havin 6 epochs that if it works better of not.","7ce90a76":"Let's visualize the images once from the dataset and see if the dataframe is well-built or not.","acd11672":"# Conclusions :\n---\n1. The model is not tuned in case of fitting the elephant as it has mispredicted as zebras. It is a model-error.\n2. The rhino and the elephant colour do matches very appropriately and the shape is also symmetrical , so that can be an error created biologically. XD\n\n\n## THANK YOU :)\n\nIf you have reached this far do give an upvote .\n\nYou can visit my other works in [s_agnik1511](https:\/\/kaggle.com\/sagnik1511\/notebooks) or in [github](https:\/\/github.com\/sagnik1511).","c722cf8d":"![](https:\/\/vetstreet.brightspotcdn.com\/dims4\/default\/23a8554\/2147483647\/thumbnail\/590x420\/quality\/90\/?url=https%3A%2F%2Fvetstreet-brightspot.s3.amazonaws.com%2F4d%2F0c%2F243018c14dc5a88137a99f6da010%2FZebra-Smiling-Alamy-AJBK9K-590lc021813.jpg)","880dd23d":"# Gathering file paths :\n\nWe are gathering the file paths and visualizing those images for understanding how to proceed further.","72352a4a":"![](https:\/\/free4kwallpapers.com\/uploads\/originals\/2015\/07\/14\/nature-animals-cute-little-baby-elephant-wide.jpg)","3313b3af":"Now we have make a name array of the animal kinds which will help us know the names of the animal from the test data after the prediction.","d0d3dc8c":"And now we've reached the most inetresting part of our whole project -**MODEL FITTING**.\nwe are going to declare the batch size as 20 which will be convinient to the model's accuracy and time.\nWe are using 10 epochs to train the model and we are using the test data as validation\nand after all we are also putting the verbose on as we can see how the NN model progresses.\n\nWe are going to store this fitting into a variable **hist** so we can see how the model performed and find if the model is overfitting or underfitting or has very much bias or not.","ddb2caee":"We can see the moel is overfitted after 4th epoch when :\n### KERNEL SIZE ---> (4,4)","3fb91a77":"Yes ! it works very good. we can proceed further. as we are feeding the data into Convnet layers we have to reshape the data.","27e7bb98":"As the target values should be integer we are changing the traget value format into **int64**.","5159e1d9":"Or if you are using **Google Collab** The **first work**  is to change the **runtime type to TPU or GPU** for **faster** competion of the project.\nYou can do it in following steps :\n\n        Click on Runtime --> Change Runtime Type --> Change it to GPU or TPU ","b123f1cf":"If you are doing this in Kaggle Notebook then change the **accelerator** like this :\n![Screenshot (399).png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAfIAAAGMCAYAAAAhuSBhAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAhdEVYdENyZWF0aW9uIFRpbWUAMjAyMTowMToxNiAxNjozNToxMvJgIj0AAGgVSURBVHhe7d0JfAznHwbwxxlBEgQJ4ohb1K1xlLaouo9SVWeVqtbRVtXR0upBb9XqpUUPZ1UpWoq6+neVEuK+zziCOBIkkYj\/+3t3JjYrxyaS7K48X5+R3ZnZa2Z2nvd9553ZbLcVEBEROdix4yfgX6a0cY8SExZ2ybh1R3bjLxEREbkgBjkREZELY5ATERG5MAY5ERGRC2OQExERuTAGORERkQtjkBMREbkwBjkREZELY5ATERG5MAY5ERGRC2OQExERuTAGORERkQtjkBMREbkw\/vqZC7hxIxKXLl\/B1fBruH7jBqKibyI2NtaYSknJmTMn8rjlRr68eeHlmR+FChZA3rzuxtT0982OEHy\/4zSCL1wzxhClzsFO5VFxwWHjnuNlywZUL5Ifz9cogYE1\/YyxGYe\/fpayxH79jEHuxM6GXsCZc6GIioqGd6GCKODpgfz58iJPHjfkUCGlvmOUBNmob6nCjiy7a9dv4Ep4BMIuXdbLrrivD4r5FLHMmE4kxAf9fcC4R5Q2zhbk1r5uXinDw5xBnjIGuYu4cPESjp04BbfcuVGiuA8KexcyptC9uqi+BKfPhCL65k34ly6JIoXTZ9nW\/Gkza+J0z5w5yGsUzY8dz9Qz7mUMBnnK+HvkLuDAoaM4evwkypYpiRrVqjDE05ksT1musnxlOcvyTg8Mcbrf7eQ27rQY5E5CaojbgnfrJuHAujUZ4BlMlq8sZ1nestxl+RNR0th267wY5E5AQiR41z54FyyAyhXK8th3JpHlLMtblrssf4Y5EbkiBrkT2L3vIIoW8UaZUhnfK5TuJstdlr+sByIiV8MgdzA5RiunRzHEHUuWv6yH9DpmTkSUWRjkDiS9069cDUelCmWNMeRIsh5kfch6ISJyFQxyB5JTzMr5l+IxcSch60HWh6wXIiJXwSB3ELnYi5wnzt7pzkXWh6wXWT9ElBVsx\/tlK8BfDe9vNUal4NRv\/VGj\/zycumWMcDAGuYPIFdvkYi\/kfGS9yPpxhDJeefBynZIY29BfD888UEyPs1azqIdxi4gym4R48xFrEb7qHbwy84gx1rEY5A4g106XS4ema238wiZ81b8hKkvJ8oEOGPXbEUSrf0ETm+iSZo3e32DjPVYyoy+HYM\/67Th8LtoYY7gVjfDL4Qi\/Ydx3cbJeZP3IesosBdxy4sdWATj2\/EP4vGlFvP1QWT38ZIybqMaJPirYP29aQd9ONV9vDGpcBbOalUH3co4uDLijaSVfdK9UEP7GmATUe+1e1RetfY37GaD1IzUR1K0K+hn37z8pLGNKNTPEo+GGqkNmYPYz5YwpjsUgdwD5ARS5dnq6id6OCd17Y8IqTzTpOxBdA45g7oiWePG3cNTu1A+11Szh6yeiR+cPEWSTwfaIPjgTrzR8AJXrNEHb3k+hudxu+CqmHzSebPtE1KhTBzUmbbfcvw\/I+pH1lBkkxNc8XVuH9Dsbj8H\/+w3I9skqPdT6eQt+3n0Wr6haugS6hH3quWNYp4aI7FUTX9Uvju61y2FWp0Bc7lUJrY05Ml8kmtZVhYr2VfBpGWOUlU9b1MSs1mXRI2FjRLrqVNYbtfwKo3VVY8T9xNcPs54NxKr2VTGrhT86GaMp7WxDfP7QWuqWc2CQO4D8ipn8AEq62bsWU44Atcd+jW\/HDMWHM75CbzV6zdK1uFC6KupY5gJCpmHZLuO2vaI34f1O72DROaBqu4H48Iv3MbidCpNzf2DscxPTVDBwBbJ+ZD1lhoVPVNfN5U8s3Im3NxzF8atRxhRgx\/kI9Plrrw5z2yZ2e\/k3qYZx5dwRdeYkekxVBYSpQXjtUCTyqJ39tI4ZWOVNwZijEYhShYyGtW3eQ8FKaFpY\/b18FdOOW0ZlhOcWBqHzgh3ovMcYcb+oWhVHu1VCd49o7LtujKN7cifEgfLPO1eICwa5A8hPkcqvmKWbW9KIrjLXck9Rm5g8vRpxJxIMMcZfe+36B9OlybzBWHz7xVB0bdcFw76Yio+eCEDVgkHYZnsNlXObMP3NQWj74juYvsmmLV+mTXwHL3bojVfGzcSaI+HGBOXECkyYOBETlh\/BhU3T8Erv3qrGb5l0Yes8TJHn7P0q3p+1CRcyoYOJrB9ZTxlNAvyRkgXxxbZTWHjozvJaq2ro0rQupKYux8rTqlNRd+TBdcyfdQizL6sRly9jwsLjmHXmOi6rKfFUsE\/tGoijg5vg8vP1sbG1H2oZk\/q1rIu9z9ZOWHuuWgUbn62PJY94GSPc0b1JTQQ9\/wgiBzdEUNdKGJRcw9Omi9h+U72sry+6G6OEf20v1FJ7pu3HjmK1Oa5KBSzp1RCXX34ER3vVxlc1rX6O1ngf8x9RtdBejdU8gfhKT1Dvp1E1bOwn49TjulXDaKuW0O6B5TDu4TIYbdwX1q9zVn3eqbUTFrhHd6yPvd2qYJg0yxufU5aTUzVdu2fHFSm0zfgXG+\/TgnZmShjiv+LPUc4V4oJB7gDye+Lyc5rpploLDFY7qD3vPIe+70zEqF79Vfi6ockTDVDyxB5sM2ZDuX5oWcO4ba+CftAtjypcv\/5tLy7oHUMRdJiwCH8u+hX9q8l9w6XFGPtYb4ydtQJ7ls\/E2B5P4f2tlj1J9PaJaN5QTftyMQ7jKjb+8g76Nm+IV5YaYX4hCF99+Q2++uMzvNXjQyxavwkhapJ8iRo\/9Qbe\/307cPYfFei9EdjyQwRlcMbK+pH1lNEkpIXUxBMjze5lvNx1k7s5\/KRq56mx\/bqU3vKhc49K6Bdf+T2D52b9iwAV6FrBCghStbh+xdXnvnARGyNzoVbVSljdpZSePO2qCrnCBdHpgTvJ3L1SYTQonEutdzVRmu9VIWBWXW8Vatex8UIcihX3w1c9amNYkmF+HPPPxaq35oEe8c3b6nn8VHjGRWBjkKWPgn9gbQS1LYXW6nn2nVO1eA8vDGoeiFWBRpi7u6NK4XzoVLcCOuWLwdlrN3UBtmmLGpjWoCiqqPez+liE2myLYlz7QHxqvJ9iBfLpx5khbP06Z8OjcdndC\/2a1UVQkzuFBn9v9ZjivhhX0wN5YqJxNrs7GqjltKRlkh8y823dhdpzjUIb3RNXCHHBIHeA2NhY\/Xvi6catFobNno5hzaKx8edvMPdIAHp\/\/Cs+f6IIghZMQ5Da9Io0G4pZM0ahdmobAsp1wbtDAtQzyHH3DghUNZbKDZ\/CK98nUjNeGoKARbtx7NA2zOorV6oLwZSVe9XfaJwKAVoOGYgPF23E34sWYcsU6WIUjUW\/\/4ME9falR1By+kbs370bw8r8gfflS6QKIPO3bMSff2\/D\/z5+FG5HpmH87+oJM5CsH1lPGa1m0fw4ER6FK9GJv5aMl5C3HlIb5Kv\/PIAJITdRQAXr1F7NEPlSY+ztWgWDrFu0vdS2c+AcJqxch4C5u9BmxlYsUEFQwKcwBsn0Ted17c7ftzia6gf4oodvbuB6BGbJ4ZoyZTGoVE6cO7YPBb\/fimZz\/0WxlWE4514Q\/epZ1Z5tTNh7FeeQG7UrGW+mYCk0lGb1i5cxWAdRQYyrXhAFrofhuUkb0XBuEAK+OYCl13OiabUyCWrCUedOImCyKpxM24HX1P1OxfMhz82r+HRaEDovDkLZJUcwbW+Y+j4kxngdNf\/4GRsR8KN6Hv062VGriirgGHNp2aOx9E+1nNQ8ZWec1K0KVUo47hAFZYxTv7hGiAsG+f2iSAP0\/3gZtmzbhuCVUzGsXQA8c7ih9tA1OHZ0N7Z80Q8N07SvkedYhOD\/LcLn7\/VDh7pFgHPbsehDqRnbHCMPfBxNy6lNPYcnGrZsYRl38LAKajeUbzcUg3u2R4WrKzB94kSM\/XaeZfotm8b\/R\/uhf6MicMvrhugta7BMxnmex5rvJuqm91\/3AEXVqKC12xMWAFxYYr8qJQHeoXzhu46LS5O7DKkThtfmrEPZufswfs9l7IvKjiqliqvacuM7tdrjJzF40xnsK1AFs1rXxMZna6G1tJirPYTlHZzE7DMqsQqqWqo0r1f1Re18wLGTJzBbJlfyUKEah8sqEGe1rmoZSmZHpCqfFPNS20xSdp1H0HVL87qEpX+9gqiVPQ6bjhyyTFcFhlqqshultrOm5vOqKnOem3GqJu+eoBPXsbAjOGbcFgvOXEdUbi+MGVgfG5+sgnH5VEgvP5JETdV4HVWAGBM\/\/QxmnVOfOV9etLY+pBAdhY3mWUeXVc2dvwp2f0rHulZGY5A7QE5V27uVTrU9OX78\/ouqpvyAqilLz3FziK85r8Vh3Xodgun9G6LzsImYuzUVEXgjXJ9aFl0kAB16jMLnv6ra8o7p6C\/HGo98g0WbrJM8aYdnPYUa9Vqi8wsf4Nftp+BWJOXTNqJvRFhuHN+LNWvXWoag8\/CsFoCqRTK2bCzrR9ZTRttx\/lqindg6\/r4Tiw5fxI5n6unzyU1yTF0ekxbHTp7BmKVBqP39P8i24JwKvdxoWr2spYZdrgr29qmNqYG+aO2XBwWibmCfzdl30\/ZFqNqzOxo8UBDdVXD7IhKbdhuppy9PmB3FCniglo855EbUlevYdyW5QxRnMCFEvVA+D3Sq5o7RJVTp4GYElqw3JhvyuOe1el4PFLsViX0XIpFc28Tq5cHot+k8tse6oVbJ4hjdojaODkyuqV8FeWzCTiSboqTZKRcK8LpNWU7JJ6fgb2kBVLcPf\/8U2n64XdfOnRGD3AHyuKkdnFQx7sWtECwaXAeBT72BKVuiUeeJsfh8+q\/4e+M2\/G\/RdPzw8UC09AvBsg\/7o3nNlnh\/rx96jxkI\/P4NRj3VEA+\/\/IddVyU6tXiwLhi0\/WTTnY04X0mUK2m5efWGPZ9D1eA\/kC9BF\/wgTeTTP8MbT6ZcqyxSTpr0lWajMH+RHJNXw5wZ+PGnGZg96hEkU8+7Z7J+ZD1lNLODm5xeZkua0Wv+vBnBFyzBLcfTvdxyprJpvShm9WuCyBdqYpgxRjuiauYS1HncUEX9GVa3KKrkjMTsH9ag4Pf\/ImDOARyzzd89J7BRjpX7lLY0q19StVezV\/nFm5CT9Y4dC7Y0S+thD3r89S8aLj9nmScJq3de1YWK2pUroaEKzKjzFzHemAZcx1nZxCLC0Cb+ef9Vz7tHvcd9ltaAZJw7eRwNVcHFfeIqtNkjBQZp6jcmJmB5nQIeHsahA+GOYUXcgbhIbE+8PZ7uc64S5gxyB5Bf2bp2\/d56a0Wvm6Y7ipXsOwVbNi7Dt+\/1RIdGtVDe1xMlqzVAkyeH6tpz8N\/vo0neI5gyZiYOW52KduqPV\/H12pQ3yZKPdlGPV\/P\/0BuBzQdhrPQ6b9kBo9aqiXnboWUDT8uMyXKDm67RBGHt0k3YuP4PTJg4U09JVvX2eEO6Tf82GN3HzcOaVfPw\/gtNEKgKFs\/+kbEN67J+ZD1ltLWnLuMfNcgFXxK7YpuciiZhL9NkHplXTkmz33msvhyLPB7eGPNsNYyr7YvuVctgaq9yaK0qv+fOnMPXaq6zMXHq\/1zwryoXD\/FAv2ZVdaevhC7j6zMqDAt568duP378TlP21nPYeB2oVbUGZtX3Ri1fb4zuWA0bezVDULOkj5Frx89gk6rY+5bxVoWKm1i92\/qcs5OYHaJKFEV9saR1GbT29UDr+tUwv1sgbj9TKcEx8oQKYtZzDbGqc1XMqqaWa8GCqJI3hxofhyiblgYL43UKFsXUjup1ynljkFoGPYqqgsW5ML2MKGtyhTBnkDuAl2d+XAlPzc74buEXLZ29og7+g+nfWI4fJzZ8tXiv2vGqGQ9ewHmbGvipC3aEoW87fLvgffSu5YnwIysw\/cuZWHYkHJ61euLzJZ\/Bvs66Aej\/2VDULngE00f0Ro+XZ8DtqaFoYkxNUo5y6P3jr3ijmSf2\/PAG+vZ\/A1PWAw2HTsfkpzP2Z19l\/ch6ygzSjH41OlZfFCax08ykJi7TpPVa5k2taQv2YsLJSOQpVBSjVTjNal0O\/Xxz4tjJk+i34IyeZ\/aaE1h9PScaNKiNo8MDMbVSHPZJZ3QbqzeomrzcsOpVbnEGbZafxKbYfOjeuCaCetXEuApuOHvsCPqtSjQ5raiafYhxwvP1CCywudaBfv8hcahStRyW9ArEksZFUex6GMYsP5DgmHhCl9FjTQi231Lvp6UK\/edq41N\/9ZmPHEHnf4xZbFheJxb+FdTrdKqJr2p7qZJOCPotTXjsnbKehGHeC50nOleYZ7utGLcpk8ilP7fv2ouH6sVfqiXVLvzWH4EjpFpsr36YdagF1lZ4ClOMMQ3fX4NZqQlEuRRreDTcPD3hJpWbNIi+rB5fUDeYp0605RKw9\/LaqbFh8zbUqhaAvHlTqE0a5Cps90JOM5MLw8g55dLRzax1S01cpklNXEI8qd7t9lG12ar5UAAx2LcnDIldh69WOV9UyRmNTQcupzm8\/EsVRQOPW0m+RpqpWnUnOT0u7ByWJt9an0Cq349+nVy4ckZaM4xxmeRgp\/KouOCwcc\/53B7ezLiVMY4dPwH\/MqWNe5lFfjTFsl\/s\/+shvFHXMjYxznB1t7Cwu39mmUHuINuCd6O0X3H++pkTuqi+KCdCzqBOjQeMMSm71yA3PaqCvGOFIvq0NCEd26RpXZrg6f7HIHfuIBfWYV577CLMz+TrrScW5Gxad5Divj44fcYxv7BFyZP1IuvHESSwX1l9EI\/+EqQHuc0QJ3IeZjO7Z7Ox+Lxn5oZ4UhjkDlLMpwiib97UtT9yHrI+ZL3I+iGirKAW3jh6CMfUkFJt3CRhHjylC0pmwmE+ezDIHci\/dEkcOXYSPLbhHGQ9yPqQ9UJE5CoY5A5UpHAhFPDyxIFDiV9nmzKXrAdZH7JeiIhcBYPcwSpVKKt\/Zev4yYy9djglT5a\/rAdZH0REroRB7gQeqFIR5y+EMcwdRJa7LH9ZD0REroZB7gTccudGjWpVEHb5CvYfOspj5plElrMsb1nusvxlPRARuRoGuZOQEJHzluXqXVu27mBv9gwmy1eWsyxvWe4McSJyVQxyJyPHaMuWKYWjx08heNc+Bno6k+Upy1WWryzn9DomXqNI5lzOlchRahgXKSLnwyB3QtJrOrBODRQtWlhfYUwuFypNwOdCL+DateuIjY1l83sKZPnIcpLlJctNlp8sR1meslxl+aZn7\/Tna5YwbhHdn56vwW3cWfESrS5Ars1+6fIVXA2\/pntWR0Xf1CFFyZPfE5efIpVfMZMfQClUsIDd105Pi292hOD7Hafjf3aUKLWc8RKtUhOXEB9YM2N\/qEg45hKtroXXWiciIqfFIE8Zr7VORER0n2GQExERuTAGORERkQtjkBMREbkwBjkREZELY5ATERG5MAY5ERGRC2OQExERuTAGORERkQtjkBMREbkwBjkREZELY5ATERG5MAY5ERGRC2OQExERuTAGORERkQvLdvTYcf4eORERkQvw9PAwbt2R7bZi3CYiIiInFhZ2ybh1B5vWiYiIXBiDnIiIyIUxyImIiFwYg5yIiMiFsbMbURZz48YNXL16Vd\/28vJC3rx59W1nxvdMZMHObkSkwyUuLk4PZtCkxrHjJ4xbaRWLyPBIxBj37OH495x69\/qeiezFICdyUcE\/fIQVoeadnzB+mXkneRIsJuvbmSJ0PSZ\/8g1mL5qLr97\/Fuvse8sOfc+hyz7CO5\/PxPQZ32L8hLWw8y07djnfR0I3bsYxLr5kMciJKNPsXRGEiv1fQr9efTB04EOIDLm7mdAZ+TXpid69XkTbgpsRbG+SO72dmDbkVbykhmnBxignE7psAsbPmYuJn6xEKMM8SQxyIpcVhv\/9NAkTJ6hh0SFjnDMLRcgJT3gXMO4WqI7H6xQy7ji3kDWqRj51EhZerocaPsZIynCexXzgKSkVshTjGeZJYpATuSxvPNznJQwdpoYOFYxxzswHZcqF4dhx425oEP7c5jo18m4PesKzahX1KSgjxVzYiRUzJmH86yMwcmoQws3wVmH+8QTnCfPIvQsw\/lVp0RiB8b\/uQ6Qx3hEY5ESUaSp2bI2YeRMwecYUfDzlEEoGuEaNXOSq0QpVgxdjkyP32GkUGXIaYakMwLCTpzM3nOIuYeusjzDq3Z\/w55bjCL0Wa0y4IybuJmJuGXcc6hAW\/rQeobrHZixC183Ewv16gkMwyJ1CLG7eOI+9l45g+9VLuBbN9iNKWY2+I\/G4WT2s0QejW7pAXdG9CroMH4YXevXHiDFdUcPdGO\/EfFqORL8a+hYeH9kfDVzgPSdwdiW+\/GQC3klF07Qcm35HPeZLOztQ3rO4UKyY8CGm\/xuqz2bwLNMI3YaNxOge1RG\/uP1aY\/Tw1vDLJR3gVIHqrDGeGOSOFYtzl4IwIGQtWl3aiSE3juG1iCB0uLAarc7swPYbThDocbGIjLy7ZHw\/i7kWqUr+xp10EBMZgcjUnGtFlG5UQE5fihDZnq+E4Fy0ZWzyInHujOWQR8hfM++cGZFhYrF31iT8eVL2M+4I6DEG44Z1QoMy3ogJC7O0CugQfww+KrFCV03Ax3PWYs6kmdhr1+fJCBXQsU8j+KhCBZATPo17omNlPcEhcrytGLcpU8Xh3IUNeDbqGi4YY6zdun0DKyLPwS9HKZTNbYxMwd5fx+KLX9Zi9Ro1bNyFY+q7WLS4HzzdjBlSKWb3XIz9aCbWbboC7yYPwPe2CvXrcciVO4nyX8wlbJ0\/BT\/+shQr1gThWLYiKF\/aG27ZjOnp5jgWjn4XK3M3RGDpNH64pISuxIS5V\/BgoB\/0dzTmNNb9PAVTFizHpp0RKBxQCUVS+ZI5Ti\/HxEXRCKzlgxzGOEeKiIgwbll4enoat+xz5cpVFCxg9ljLHFnxPaeLvUvw\/erTKird0aD\/MDxWzBivhWL7Xzv06XS+tVugtq9lLNSW71ujFK6s34qQ6AiculkKzasXMaZlgJA\/8c2vh3Vg+z\/5JoY0MtdTdnhWVN\/xCmXxaNsHUcTY7eR3v4HgDYcQHn0Wx249gEcrO2C5KrmKVMHDLVqgVevmeLhqEcv+IhNERt59wIM1cke5sgNDom\/ipnE3cZF4\/8pOnDTupSTmWgRy1eqJEcNfw4iXOqOx1yFMe3sCVqSxCWrvls3we+p9jBvfFTVkS7mwFp99ntR5tBFY9\/WHWJ2zFV54Y5QqPT+NgIM\/YfzcjOhNXQZNB7yEbvXv\/l3ee7V35b8o+Ug9ozlPPtMX2FSgPUaMeRPPBYbi5w\/m4mBqa+tlmqBu2GIsCTHuE2WS4H83W2q0pZqjTWpqjNkroM3jJfTNSLUfCM7AxsGD6zYjTG4UehRdHrn7O+1doQK8rZOq2GPo3sTStyJs43oc1LeyNga5Q0RgVeQl2NVf9\/Z5zLxkf9N2zryequTvoYYSqNikJ8Y+74dVkxdDZ0j4Pvy57jjCti3G9BnrLePU1zxk20rMmzET0xduRki4HomQdTOx+oQqs\/\/7C6b\/sQ\/h8tiFwepvMH5X8667q3RxDAePBKBFJ\/Wlc3eHu3r9Br0H4pkanneu4KVq7MHLFqjXnomFG0\/f6Y2q6J6qv8pFNxZjU4hViTP8NDYtlPELsGL3nSUWfmI99loVUMJPbsZC+Qy\/rkTwhTvLK2TdUuy9cAlb9XPYPLetuJ3YtM0PAeYOL3Qz\/hfWCF3UZ\/J0ywmfhs+iY6nNWLfLMjnBc\/+6FgfVsou5EGR5HwuDEBb\/wT1QtVou7Nmdvm2UwT+MxsffqdeaOgkff7veJU7NSevFVRwtZstPGPa6KsQZ911DKE4ZhUfvgCpIbb3Vs3IVeMuNuBCcyrAVFYrjRyzfSZ8G9eCnb6XMr0F9y9kDkcdx3EEbEXutZ3mXsCcVPS+3x543bqVB5XpoEHdIBY66HXkawUt\/xPS9nggI8FNf7FjsnTEOX264oUK\/A5oW34dpRo3Ts2QA\/NQ339MvAAHlCsHdrRDKlvdGLjdvVAywTEvIG96FDmHdskMINwPMvYR6HR9Lk5N0ZvnsC6yLKo+mLRvB58iP+HjWPkvIX1mPrz7fAFRvjY5NfBD89QQslB2Qet9zPvoRh4o3QceW1XBjyYeYvMUS0mGHgnDwsr6JyOCf8PFPh+DTuDWaVrqBdZ9\/Ed8KEXZoA37+bjHCa6pp1WOx7pNJSR\/zO3kcx3z84Gd+K0JCEOpfBv7GXTkWVtbfR422PIE89+zpfyOmZhPUz7cT0yaMw1eLwlGjSSP4hc7Hx+rLbfLxK4HQ\/WrZGPfThydqduyJ3s+9hBcqB+FPo4Dh7Fzv4iqx2Lo9Bi0aXcK2vcYolxCKUOO4nZ9fGjpCFlPfBX3jEkLvYReUPFXYMLYB32KpeI8+RWE5EqAef07fyGTstU5IXdXp5u17Od\/CHXndVPiZL+leD917PYq6dcqoGMiJgKffwbjB7VHDzwN+ga1Qx12VcNWX37NMbVQsqP5WqI26EsZuPgh4wE8Fuh+q1qkN\/7sON5ZAx1H9EXBmMcaPHIGR4yZhnlWtO2brYqzyexqDO1aHX5EyaNCjJ2oc\/Bv\/SrKFSIBWQ\/2KhVTBoR5eeHcUOsoeJOwETmUPQP1aJeBZpAI6vvo++gXm1M93x2ksXxCCun17okGZQvCr0R4DOnhi+eIgoyUgEhVb9UFTPa0TOtYPx579CY9dxrt6CeFFilpqIUrohVD4FE+4c\/FRO5uwUDN9IuH\/aFf1uiVQsc2jqHjJB\/XVsvX3K4OmHZvA89hptZsxFPGFz7WoDCu1exbyxLmzLpGKCFeFsK0bF2PdtTqucXGV8H+xDXXQ5KEqCNt+p3Dm+qqj35efYZIaLL3yyVUxyB3CHd6p6ABWKns+41ba3LQuN2S36TkXcQhrfpuCj98cizGjJ2GNPliVRu4qwPoOw0efvY+3+zyKXFu\/wXij1n3p0iVEbv8FY+R1ZBj7owrxSOh+GwHN0SXH33hnxFh8\/O0CrD5uxF2Rh9C22iF8N3I0xn\/+ExZuT6w+G4awS34qPI27Sq7S\/ih0werQhVX2exX0xI3IG8a95BUqUEiFecIDIGGhYfAsYNUckaBckUsVmoybmSw0JCx1NRoHci9eARUfaI4Bgx9ziYurhG8LQljsXsz5IwQxR9Zjq8N6SqeWD3yMPmpmK1KqnA0xDr8VkgpwBvFBSWMjSFVBNPQ8LBVx9fj4TnqZybl6rTPIHcIXjXPb1iyTkhuPud\/DRTNCdyH4WhmUSXSPeRzzPlmMq9U7Y8hbqmY+\/iW0SGvn1JhIhMdfwCEn3P2qo+Pgzqi4dRvM7m7eTQZi3HvqdYxhwhfGedDZfdB4kLr\/wSj0a1UCx2aONZrQ3RHw1EhM+PQdvPpkbWDjBLy\/8LR+LlsJTheLu4lY9QWzdwknEHfn+HouFdju50ITNIdLsHt7m3X2VJD3ZNxMP+HYsXAmJk8Yh9nXW6O7i9SqcuWTPhzuyOUSe58IbA32RMcX5XBAT\/R7JFbdT\/81mTF8ULGCpdtm2N59qT6sE75\/n6UTWna\/+LBNf3K1P8t7DN202Sg4pCxk07+W1i5VeUh835bx3AM6YfRn0qLxMUY\/VcXoIOsYDHIHKeXhjw521MrL5\/ZHq\/zGnVSKORuE6d+tQN42rVHRGJdQuApfH\/hXLAR3KVle2Ic9iZ0LZ1JbS67ocCR6evv1zZg8+kdsstpbhG\/diYN+luNsPg9UAbZswDHz+HnkTsz7dikOqtqNdBqZvOS4enJ3eJeph6bVPBB+RT1RyFp8NSsIkdktBYMWgX4Ii7DdHQWgxgN7sTr+wHckgv\/aAFQyOuqkRnH1Xs+cu9McXrkRGlz7G\/OCjRaCsyvx57YyaJyW3vJnziPMV9VsjLvpoUbf8RgxoCdeGDYGQx28I7HXnYuruAoPNH2lj+WsDcXzkRfxwl2Hd5xXxRrGBVVO\/o0lqTmGG3cIS1ZYCs3ugfXiP39GqNi4nuW7emktZttcgCbs0KG7r0h3ZT3mrbG0lHk3bJTEvi1rYZA7Sp7SeMmrNFolE+blc5XDB4VKqjq5\/UKXfKR\/zUiGUZPXw73NKAxN5JQOi+po2y4Mc0YYzd3TQ+CZXPoVUSFbOhhfqfnv6thR4FH065YLS94egZHyXK+PwDt\/AB37PWrpLevXHi80DcW010fr1xr55nyEBtRBRTe1o\/BXobv9GwwbrR43ejQmn6iHLo8UUsFaBTWuLFLPJe9vNN7+yx2926kCQQI5Ubf3s\/DfOsHyeDXvvMhWeKG95dSZVClSBRVvHda9zy1KoOMLrRD5q7zfsRg2YRv8n+uJumloPj948BACHqhu3CPKJAGt0bac3IjEpp9\/glkmTZ4qDP\/0EzZdUzezl0Czx2y\/c+nMrzW6BFqKoaG79sUXpPXV5SZ9i3c+WYoQswJwSVUYPlpg+VnT\/LXRpVUavufpxJl6rWe7rRi3yRFir+Pk1SOYGX0Je\/SayI7SOQqgWd5yaOZ5b8fG7SbN4tG54Jk\/PWoasYgMj0SMql17uif2fDI9BjmladUYY5IroMVm94C7bVBGq\/cXp95fos93R5KPTwU5Pepnt4EY0SRh4Ueu9ob8d79nu8Ttw5zR61Hh7f5pKgSkt9OnEx6eKFEidTvDY8dPwL9MaeNe5siK7zndqBrsxLFG+HlWR7dhfdAgqaN1MZdU4H+BOcGWDqF+bUZiRGZc+jcuFJsWH0fZ9vUsV2+Tny9dYrQI1OqKV9v44Og\/i7Fkw3FLB9pcJdB2+DA8nuACN5npkKoAfWt13X13NBg0Ht0y4Th5WNjdJy4zyImsxR3Cwkn7EDCoPSqmKbXvFrZxCuZEtsfgZg46mGeDQZ45nCbIxdmV+PhD41Kt2XPCJ1DVgh+pB\/\/ilr4KMddOY+\/6v\/Hnip3GKVVymuBLGNKpTCYfsolFyJIv8PGyhMvOWi6feug2sCvqOvT3dhjkRJQO5IIwy2OqwDfHJZyLqY1nBjTStZmUODIUg3\/4CKGqlqc7OQb\/hPFnW9n1Yy+Oes\/SQjP+RHNMGFBbt8aEr5mAMceaY1LflA+TOFWQi\/B9mDfpR6wLTaGzXi4fNOjRH90c9FvxoSsm4OM\/Tt+5kJTI5Q6fUlXwYJPWaFKjUNpaxtKZNK1\/NlXOJZde68\/i1Uzqp5JYkPMYOZHLcs0Lwrgaz5CdWHdFbp3G6l2Rqe9E6Sw8q6DLmPcxblhXNA0okfBQmhwKU0HZtNtLGPfRSIeFuPB5fBhGtLlT6PEM7IOPPhuP0a\/0xONOEuKCvdaJKF250gVhXI2\/CrW9a1Xteu96hFRrZPdlRJ1TTniWqYeOLw7DuA8+1heD0YMKynHD+6NjwzLwdIKk9Gk5DKONMA8\/cz7B5ZzpbgxyovuAq1wQxl1VW24YxxVjImOQ1z2v5Y4z82+CgNN\/Y9q6SNRv6NADs1mKhPnYl17EWOPnSylpXDxELittF4TJnv3O1976dmao2PQhnJs3CdNmTMHEdd5oEWjfOfmOfM9yLnnjB2NwMH+9VJ114Nj3fH+465fPKFHs7EaUxdy4cQNXr17Vt728vJA3r\/PXivmeiSzYa52IiMiFsdc6ERHRfYZBTkRE5MIY5ERERC6MQU5EROTCsh09dpyd3YiIiFyAp8fdp2yy1zoREZGDLP1ruXHLPvUCHzRu3cGmdSIiIhfGICciInJhGd60zpZ7IiK1s82WzbhFdIdTNK1LUCc3EBER95WUcdJcI7d9WHJPw42UiLKy5GrjttNYc89a0qNGnqYgNx+S1F9baXgJIqL7RlLhbI5P6i\/d\/zI9yK1nldu2gznemu19IqKsyDacrUPbdjBZ36b7k0OCPLEhLi4uwX1rtveJiLIi21C2Dm75vXLr+9YD3d8yNcjN2czQNv\/eunVL346NjU0Q6LYSG0dEdL9LLIzNkJYAz5kzp\/6bI0eO+HHmX3Neun9lWpCbs8hfCWtzkBCPiYnRf93d3fXAjY6IKGWyP42MjNSDhHiuXLn0XwlwczD3p9yv3r\/SI8jtPv1MNjrrQcL75s2biI6ORqFChZA3b15ubEREdpL9pew3Zf8p+1HZn8p+1XZfS5SSFIPcekMyNyyzNh4VFaVq4QxwIqK0kv2n7Edlfyr71cQOUVrfJrKV6hq52awux8QjI6OQP38+Yw4iIkoL2Y\/K\/tTsa5RYmBMlxa4gNzcm6zCXkqM0B5kdMoiIKG1kPyr708Rq5OZfoqSkqkZu\/pUhLu62Kj3e0uOIiOjeyP5U9qvmPlaYf4mSk6rqtLmBWQ9ERHTvuH+ltEo2yJPakLiRERGlv+T2rdznUlLu6QA3NywiovTB\/SmllV1Bzg2MiMgxuP+llKSqs5s5EBFRxuH+llIjTU3r3LiIiDIG96+UWvd0jJyIiIgci0FORETkwhjkRERELoxBTkRE5MIY5ERERC6MQU5EROTCGOREREQujEFORETkwhjkRERELoxBTkRE5MKcOshjb93C9u07MG7c+2jZqi0qVKwC\/7IV8PAjTfDii4OwfPkKREREGHMTERFlPU4Z5HKt4Z07d6J7957o1LkLpv3wIw4cOIDY2Fg9\/dSpECxTIf6CCvNmj7XAvN\/m4+bNm3oaERFRVuJ0QS618KlTp6Hzk13x339bUbp0aXz4wXhs2rgORw4fwLGjhxC8YxtmTP8JTZs8igsXLmDEiFEYPORlhIWFGc9CRESUNThVkEuI\/zp3Hj7+ZIK+\/8ILz2Ppkj\/QtetT8PX1Rfbslrfr6emJRo0ewpQp3+GHH6agRIkS+PvvlXjvvfG4evWqnoeIiCgrcKog37Z1mwrxT\/XtcePexfDXhiFvXnd9PzES7E0efRRTp0yGv78\/Fi3+Az\/\/PEMXCNLL9Rs39JAYaeqXgoP8PXfuHHbt3p2pP0Eor3Xp8mVsC9quXz8uE1\/78JEjOHrsuHEv\/cXExODKFcuyTYx89vCIiCTXzb2Q1\/xPbYvy\/EREzs5pglw6rf3w4086GHv16oHOnTvF18DFZRVYT3R6Und227x5izHWonLlyhgz5g3kzJkTs+fMwf59+40p927btiCMemMMrl+\/boy54+9Vq\/HWO+MQffMm\/lz6F77+9jtcu3bNmJqxwsIu4dXhI9Gnb3989vkkPP\/iYPQfMBAhIaeNOTKOhOzsOXMxc9ZsfTsjbN8RjHZPdMayFX8bYxI6f+ECXhg4BJO\/m2KMSZn0o9gRvDPFdXQuNBQTJn6Bf222MyIiZ+Q0QR6kapWrV6\/RNetnnumNnDlyGFPs0+ihhuj0REeEhp7HokWL061WXqlSRV3rO3HypDHGQkJhw4aNaNyoIfLlzYvn+j6LyV9\/CQ8PD2OOjHNL+hH88CNKly6F3+bOxqzpP2LBvF\/w6CONMfn7KRne8S9Xrlx4SxWcZJDbGenvlasTrXVLjflUSIhxzz7XVGHsuynTdFAnx69ECfwyazoef6yZMYaIyHnleFsxbidJmjHNIS4uTg+xsbdULfUGfH19jLnSTp533rz52LxlCzp0aI+2bdskqI0Ld3d3PN31Kbzy8kvw8ythjL0jhwr+HKpGvnjxH0A2oMXjzfVj7pWE9JmzZ3HyZAjq1qltjAVCTp\/RtfDuTz+NAl5eunl707+bUaF8Of1e5DPt2bsPU6b9gPm\/L0K2bNlQqmRJPU2ajH9XhY0SJYrHv8cVK1dh7979KF+urP7s0mQujytWzFe\/B2uRUVFYqD5nm1YtUapUST1OHlOurL\/uS1CkSOEU34OQpvit24Lw7eTvseiPJciuppcpXTp+2ct7mDd\/gW5pOHj4MEqXKgVPo6Ai7\/fI0WPqNcvq+zdU2P624HcVlFOx78ABlPTzg5enp54mQTx\/\/u+6b8PSv5bhm8lT9DKQz5pUQeD0mTM4dOiwbgmpWKGCXg4meb5pP\/wENzc3+Pr4oGGD+np8cp\/3\/PkLmDXnF+zctUt3ipRWFHnvst527dqNixfD8Mlnn6O4eh0pjM1W83p6eqFgwQL6uS+qx8z+Za567p\/0YYxSalnkNdZLSsuRyB5SCcmXL59uWZRtVrYfGWQ7lkGYf+n+cejwEeOWfaSiYcsp9jSRkVE4eeqUvl2jerVU18ZN\/mVK67A5e\/ac3vGmB\/ni1A8MxI7gYB0+JjkeLgtUdvzi2PHj2Lz5P11bFov\/XIKPP\/0MdVT4P9GhHZao0J846St9\/DVPHjfddCxBJSSsFqsA+PW3+fGd9WTaZlWwyZtIYSSPCrDixYph+d8rE3Tuy58\/P2rWqI7cuXPr+8m9ByHn4U\/66hs83vwx9O\/XR8+\/aPGfOhDled8Y85Zuwh\/x2qsopgoI743\/QJ8lICT8ZBAyz7ARr6uAC0U3Vdgq6++PV4YNV+\/\/Pz09Ojoaq9asxeeTvtQFl65dOmPjpn\/1e0uu9UBC+pGHG6ta+ar45SoOHDiotplIPNTQEuCm5D6v9LV4oGqA3lEGBFRRQVtKP0bW21RVKJAmfHmMFEDk\/a5ctVqF+8X4eQYNeUUXXHt2f1oVZG\/j1ddGxtfsk1uOREQZzSmCPDo6CiFGM2nx4sX1X1vJHSM3FShQAAULFVRBfhaXL102xt678qqWnT17Dhw9dkzfj1I14v+tW4\/HmjZJtEYpgS9BMHL4MLR8vDkefeRhvPf2WP0ZDx85qoI8jy6wbNi4Se\/sz6oangR2gQJe8c3FEvR169TRwWNLSuvP9+8nVVB0eqqbPj4+f8FCXYM2pfQexN59+9GuTWs83LiRCrmq+GD8e2imPpMUXi6oEJMc6t2zh6o5l1Ph+yTefmuMqqEW1I+1tuaff+CtlvugFweocG2gArE9Br\/4An75dV58s3hUVCTatm6lp8l7efWVIThx8pSuKSencaOHcODQId0CIiTQJdhlvLe3tx4nUvq8UsipVasmvLy8dGFHavmmokWLqPfzkn5MoUKFjLEWsn7+UkH9yCON8dLggfrz9Xv2GXTp3EkXXERyy5GIKKOx7c8O0pwstb+1\/\/xP79iPnzipa6Fy\/DwxZ86e0bVsKVBIWMuwfccOHWrSLCtq1ayha3oR167pppWqqrZYv57U\/Hfpxx44eFAFTjU9b2IKqkLLm6Nfx+Lff0PvXt11027vPv2w5K9l+j3a8x4CqlTGzzNmYvL3U3ULgLsqYEhhQhQpXFg\/z5tvv4s1a\/\/B1fBw+BQtqpv9rEmwSg1ZCh1mS4CoUL68fn3rApV1\/wEJTCnQRKlCXHJKlfRDJRW66zds0PelteWgeq+NHnpI3zfZ83mTki9vPuROoolfDhnIsnmoQf34YJaCVLu2rXWBQCS3HImIMppTBLmbWx74+fnp22fOWGpeaXHlyhUdHMWKFdM18\/RUp3ZtFa6HdMvAtqAgVA2ogqJFihhTE5JDBRER17Bz1259DFYfh929BzWrV48PM\/PzHj16TF\/4RkJbwv306dP6MIOEaOlSpfU8yZHj540aNlS1wHcxasRr+HXeb7pHtz3voWWLx\/HFxE9VQAHvjv8AHTs\/pY\/zC6m5fj7hY3Ts0E434Xfv1UeHulnDNsXExurCiI9PUWOMhTShZ8uWPcWgTomEZvPHmmHd+g261r1j505Vmy4PvxIJW27s+bxpERMTq5v\/86qwT0pyy5GIKKM5RZC7u+fRnZJE8M5dae5xfuz4Cd27XDpGFbZqdk0PZf3L6CbYTZu36GZvaYZNqum0kCpESCep7t266uZY66FO7Vp6HqnlVw0I0LX8q1fD9bFZCXcJxfUbNunl4eVl6SxmS5qjZ8yanaApXUgHKwk+qUXa8x5E2bJlMaD\/c5j+41S8\/NJg\/Pjz9Pjzp6UzmfTc\/nD8e5g7azouqUKSHFKwJsfr5XVlvVkLPW9pdi7sXVj\/vRfS8iEFgw2bNunlJcEun9OavZ83tfLly6ub8KWAZU0KNHKIxZTcciQiykhOEeQSiIGBD+pm2\/\/9b91dO017SK1p+bLl+nbtWrXgqWqU6Umajeup9\/jd91NVUEbq4+ZJkVAuU6aMPkZsdubat\/8Ann1uAI4ctRyfFlID\/2PJUngX9tY1YI\/8+XUtXx4nPeSTKijky58PW7dt16egSWgLOQ9\/9ty5OjilY1pK70FCaOQbY\/D774t07V+6ZV26dAkFvAroZuZNmzdjwMAh8Z3b5DNLB7NCiRwjl+PVUmOW5xdynvbPM2apAJVj0okXRlJDWh3kmPOEiZ\/rpvzEDmnYu8zlvPdr1+6+JkBSpA9EE1VomzFrTnwTvTTvv\/TKMH1sPKXlSESU0bLLjii1g\/TqNYf0UlvVmpqqnfWxY8fws6rNpLZWvn7DRiz4faFu4pVT2NLa8z050kybK3cufbzcPA0rMVIgeXFAf0SER6BVu456GD7ydXTp\/ITu0W2SU9Wk97kEutQwJbjltrQmVKx4pzOWLQm2Ea8N1T8e06JNezRu8hjaduysa+qvvfqKPvac0nuQeV54vj8WL1mCDp26oLWaLp26XlCPkWkP1qmjP2e3Xn3QqcvT6NmnLx5u\/FCitVs5RiyvNWr0m3i8dTt06PyUbhXp3atnkoWR1Hqwbh34+vjqQLc9HU\/Ys8ylX0Gb1i0x9LUReOud9+y+mI0UVB5v3gy9+vTTy7v3s\/30\/erVHkhxORLZy3q\/mth+l4PzDVJpSOrqk5kpm6plJXmOjNQwhHnuuNSG5E3LEBUVrYMjMLCunic9SG\/0AS8M1J2W5BKtXZ7sbNe5uPv378fAQS\/pQsDQV15Wt1\/MkCBPC1nZ8sX08PTU5xenN3n+G6qmLLX5pM7JTu49yDqW5nwpSCQWkBJ2ctpV\/vyW81uTI+dTR4SH6\/OrM\/pCMcnJqGUu271sm+a5vtZSWo5EKdmyZas+fCenp8r2JYNsT+b55CK9CsaUvsz1lRZL\/7K0JNtLWoZtOUXTuqmOqnWNGP6avj1mzFv45NMJukk3KVK4WLN2LZ7r\/4IO8Q7t2+GZZ3o5TYgLqZVJs3lGhLiQ55fm7uSCM7n3IDsGaV1IKnzkeaUHtj0bqTy\/vI4jQ1xk1DKXZSDPm9iySGk5EtH9S7LIkZwqyCWAn+raRYX5MH1\/8uTv0bpNO8yd+6s+PmkurHBV61u\/fgP69x+Avn3762PqzZs\/hjffHK13tERERJnF0UHuVE3rJnndXbt2Ydz4D\/SpWckpUqQIhqvgl9q49XnMRESuhE3rri2tfWLuu6Z1k2ys1atXx+zZM7Fg\/jz06\/ssKlWqFN+kWbKknz53d\/K3X2PVyuX6WDpDnIiIsiKnrJETEWU1rJG7NtbIiYiIKE0Y5ERERC6MQU5EROTCGOREREQujEFORETkwhjkRERELoxBTkRE5MIY5ERERC6MQU5EROTCGOREREQujEFORETkwhjkRERELoxBTkRE5MIY5ERERC6MQU5EROTCGOREREQujEFORETkwhjkRERELoxBTkRE5MIY5ERERC6MQU5EROTCGOREREQujEFORETkwhjkRERELoxBTkRE5MIY5ERERC6MQU5EROTCGOREREQuzKmCfOvWrXi0yWPwL1shyWHz5i24fPkynuj0ZKLTZZB5iIiIsgKnCfLw8HB8MekrnDhxwhhDREREKXGaIL916xauXbumb\/8yZxaOHT2U6FCvXiAKFiyI3xf8pu8HbfsP7dq11Y8jIiLKalz6GPnly1cw9u138Mcff8Ld3R05c+Y0pqSf27dvIzwiAlFRUcaYO+KMabGxscYY5xITE6Pfn3wGZyDL6ezZcwjeuQtXr1512Pu6fuOGHu5VSp8nvV4nOfIeZB3LtpgS2YYT2x6S28ZFctPNabKtZaTM2pYzY50RpTeXDXLrEPf398eXkz7HAw9UNaamn+joaIwb\/yH+XPqXMeaOK1euYOTrY3DcSQ8HbN8RrN+7fIa0kFaS3Xv24NKlS8aYtNsWtB2du3bHs\/0H4IOPPkGnp7ph9Ftv47Jahplt8ndT9HAvbD9Pxye74tXhIxEWdmdZpcfrpES2PdkGZVtMjgTgN5O\/xzPPPoeTp0KMsRbJbePCnD581BuIUGFqzZwm25q9ZHuS7Uq2L3vd67Zsr8xYZ0TpzSWD3DbEP5vwCWrXrmVMpfQitaDpM2bj8JGjxpi02bN3H8a9\/yEGvTgAS\/9YiF9mTcei+b\/qVpSPPpngcjWgQ4cO4+NPP0vweZYsWoBixXzx6cTPk6zZOtL5Cxf0epBl\/t\/WrcbY1NkRvBNz5v56z7Vi2Z5ku8roWjxRVuFyQZ5YiNesWcOY6lhSS1uxchX27d+PMaq2OWr0m9i46d+7mj1PhYRgwudfYPDLQ7H0r2U4eOgQ5v++UO\/Yzp+\/gDm\/\/KrHffjxp5gy7Uf9GNl57t6zFx9P+Ew\/bubsX3RTo7WQ06fx5Tffxj+vbZO\/+RzjP\/gIL786HMtW\/I2bN28aUxOScJ05ew6OHjuG3xctjn9\/4oaaJjt0eR35HPJ5kiKPmTvvN3R6ogOaN2uK7Nmy6fH58+fH88\/1xSlVO9y9e48eJ1J6bns+w8WwMEz94Ue8OPhlzP5lLk6cPKWXaVIFBlk\/sp5kfSW1zkzyeeT9tW3TKsHnyZs3L57v10+fUXHg4EE9zlZKryPbjgwmeS1Z7kePHTfGqNqsev7pM2fFfzZ7Cw0HDhxE8eLF0OeZXtiwcVOaCk9tW7fCP\/9bjy3\/JV8QSG4dyndEtifZrqSFwPqzWa83+Sv3bck2Lt8Le9Z9Ys+RmnUtTp85g2k\/\/hzf6iafTd6\/PL9sg\/JdJ3I0lwry5ELcugOcdIhzhGPHj2PGzNm6tvGY2sk\/+sjD+Pa7Kfj990XxtRipzb024nV4F\/JGt65P4eDhw5j01bfYvPk\/3dQYHhGORerzffHl16gaEIBHHm6kH7ds+Qq8MeYtVK5UCf379dW9+6VJ19yRy\/MOGz4KHvk94p93tgova4v\/XKJrknXq1MYTHdphydK\/MHHSV4ke48+VM6d+fU8vT1SsUB6VKlZA9uzZddPxMPX+z50L1a9TVq2HV4YNx+Yt\/xmPTCg8PELPW79ePWQzQs\/kU7QoZk3\/EfUCH9T37Xlu68\/wZKeOekc89t1x8cvhgqp5SlNzRMQ19Oz+tNrRx6j5J2DVmrWJNsvKMp\/8\/RTMmvMLWj7eXK8zKTzNUSGZWM1TPk\/I6TOJfp4CBbww+esv8UDVuw\/x2L6ODFIY++bb7+KbmHft2q0Hk4yX7eLixYv6vny24SPf0MvJ\/GyyfZkFrKTI9JWr1+jlXLd2LRVGkboAlVrlypXFc3374PupP+j3kpiU1qGsc9meZLuqpb67BdRfId+dl14Zhpw5c+nPdv36Dbz62kicCw3V08XJU6fw5deT9Xdett\/FfyxRy3Rq\/PZr+xzyd9CQV3D06DE93Z51YO3cuXN4b\/wHetsvXaqULjTItifN\/EMGvYC6ahv84KNP9XePyJFcJsiduSZuTXaaLw8ZqANBdhSjRryGpcuW66ZN2VksWLhI1+ae6dUDDzVsgMEvvqBrStbibsfhheefQ7u2rdVOr4Ie16B+fXz79SS0b9sGNapXQz+1Qw1TtY2zamdjz\/NeuXIVK1etxsjhw\/T7kvf33ttjEaJqS4k1nefOnVvvaAurAocEuoRTjhw5sOaff1QhpKBuVpbXeaJDe\/1av\/w6L9Fa3uUrl\/XjvL0LGWOSltJzy7HVRYv\/wCsvDdafoXGjhzD81Vd0MJm1RKnRSuAMGfSifg5ZHvVVwS4qKlJPtyWhvGvXHrz5xqj4dfb2W2NUrfVfvc5s2fN5ZLotCRm5vsGI14bp15HhrdGjELRjBw4dPmLMlbzUfjbTmbPncFp9zprVq+sCb40a1bD2n\/8ZU1NHlnnVgCqqxj0v0QJgSuvQz6+E3p5ku2pQvx4KFSqkC0x\/qYJqq5aPx2+\/Lw0eiPr1A7FKFUBMV8PDdSuOuf3K8tuxc6fefuU5fl+4GI0aNYx\/Dvkr34l58xfo70hq1oGE+NvvjUeXzp30c0mh7dr16+r7FopePbojoEoVtFDv4+MPxqFMmdLGo4gcwyWC3J4Qt75IjCMvCCNf6gJqZ2kqU7oUPD099I5Bao1Sw6he7YH42pz0tG+odmjWcqmahBzLtCa1PW+105NOQkv+WoZpP\/ykgu2y3kHZ87xnzp5RtRy1Izp7VjetyrBd7cBk5yrvzR7yWtJEW7dOHR30pgrly+vnvqzeT2Li4uJwO+5O7VZCt3GTx+KH3xb8btdzy2fMlSu3ruWZPDw8UKVyJezdt18\/x\/HjJ3QBxDyDQZZHHVULzZMn4fI0HTt2TM9zUNWqzOWyf\/9+3XlMCkqJsf089ggJOY1ixYrBx6eoMQaqMOANvxIldMCkJC2fzSTHxMv6l9HH8OUx9QMDsSM4WBfuUkteu1ePbvrwxr8237O0bh\/SXH3w4CHd4iMtLLIO5K+cjiqfWZ5XlFSFgJIl\/fRtYb385Dnkb70HH4z\/Dshf+U7IoRXZzu1dB9IZ8I03x6oCw+No2uTR+OfLny8fivn64J33xunvoHxvivr4qG0yl55O5ChOH+TOXBOXpjbbZk2P\/Pl1s7RJamcSzNHRMm+srj3afvHd3NyMW4nTtY1Fi3XP6N8WLNTL5OHGjXRtRtjzvJGRUbq5eeeu3fo4pQy7du\/RtTQJQ3vEqBpYhNq5Wu8IhRQ6smXLjqjou4\/XFlKFmtu34xB6\/k4TaeCDdbFuzUr8b\/XfutVB2PPc8hmkUOTmdickhLyGBIX5HO558hhTLCT8E6slCwkzCQzpyGUulwMqVKSmm1hAFvYurP9afx6TrKekTtOS1ymkaqpuVgEnoZg\/fz793lOSls8mJMDWrd+ojyc\/+lgLXXB6+dXXsG\/\/gSSP5aekSJEi6NO7J6ZM+0HX9k1p2T6EbL+ybR5RNWtzHciQxy0PKqtCmhSchBw2sv5uWS8\/eQ6Zz9PT0lRvyps3ny4ISOuBvevgyNGjqtDghz+WLI0\/rCGkcPLGqBF4ccDz2LEjGM+\/OBgvDByS5GEGoszi1EEu5+a+8867Dg3xPGrHWbxEMb2TMWsGpjNnzqqdxy0dJCZperPekV9Rn+HK1Stq51cY+fLl1Ts56w4+svPfrmpHyZGd498rV+P9997B22+O1sf\/KlQoH7+Dy+OeBwULFtA1D2tSyzTJDkzm6d6tq262tB6kVmePPKpgUKZ0aX3etDUz1MyQs+bl5YVyZcti2fK\/72qKDVU1bGnWrlC+nF3PLcdXZZuwPsVL1smhw4f1a5jPsVfVqGW5miSwrl+3XGzIltTwvLw80e\/ZZ+5aLlKLteXhkR9VqlRK8vO8PPQ13ZHLlr9\/aVW7PKnXpUlqkXKs2r+M5XUKF064\/OQzmNucfDZfVRvcr2q81k6fPp3kZxPy\/BHXIvDDlO+waMG8+KFHt6d187rtNm0vOd7+YN26+Oqbb+M\/U1q2DyHbr3w\/pHBquw46P9ExvoAqHd2ked1kvfzkuyW168NHEjaRy\/KR7V46I9qzDkSTRx7Gm6Nf14ewJnw+SReGTDnVe2nYoD5Gvz4Sv82drQ9fzf99kTGVyDGcOsilptigYQN9XNCRNfHmzZrpZkQpocvOW3awEsZffPmVrrnJcUfTrt279TFx6QkrNXY5Nli8WDGUKF5c75DatGqpO8St37BR90CWmtJ6VWNKTm71OKk1yOEDeW15D3Ls0KwJyA70EbUT\/G3+7\/HN5FLj+lO9X5PUMMqonZW8H7Onr8zz7HMDdA0kOVIYMYNRjpGuW79BP1ZIbfbnGbNUYaCmDkRbUlvs9vRT+HfLFnw3ZZquFclzSU\/mjz79TB8zrVSxop43peeWIJPP8Nvvv+vPIM+z6d\/Nulm9tppHPP5YM\/zzzzr12f\/Sgb9l61Z9jFRqromRjlfZs+eIX2fynLJuBqiaVmLnz8vn6fF0V30ql3weOa9aHiO9mt8d\/6Fu+jb7NViTwwGy\/per9S2vI4O8prTolFfbt\/AvU1q3DEgzb1R0tA4IOQZsevThh7Fm7T\/xy0fWtfRcl9puUiSsK6n3I4USKXCag4SmFPQS6xluD1kO0sR+7dp1fbjHZO\/2Icebzc6Hsv22aP4YZsyaE7\/9yuOkV7n0\/TBduHgBv86br9e97fKTZSsBbP0dkL\/ynPLdkNewZx2YpKYuhR3ZBpYtW6HXsRQS+vTtj8PG8XR5HxHhEaoA5q3vEzmKUwe5HDPr8mRnLF600KHN6dK557133tLN202at8TDTZtjwIuDdGeZPr17qR3pnd7LNWvU0CHful1HtGn\/BE6cOIkhgwbGHzOUZuURr72KWXPmYsjLr+rawIDnn9PTkiKtAl27PIlJX3+Ldh07o60apFevr6+vMYcqbKgAa\/RQA\/R4pi\/aduiEiV98iV49uxtTLTumFwf01zueVuq9yTB85Ovo0vkJvYNLjLzuEx3b4zNVKxkwcLBuNg6oUlk\/j+xkH2\/dDh06P6WPvfbu1TPBcrBWqmRJTPz0Y11z7tC5i15+fVUBQgJcOpnJ64iUntv2MzRv1RZff\/ud7sAnryHKlvXHB+Pe1QH20tBhWLPmH93xynwNW1JYHPHaUPxv3Xq0UM\/Xok17fcaAdKoyD13Ykqbld99+U38eWRfyefoPGKjWfTU837+ffp+2rF+necs2eli5ag3GvD5Kt1oI6Ykv21qffs+jVdsO6jNDFwxMUkPs3asHhr42Qq\/jIa8MQ4f27VQhL78xR0JSaAravl1vp7bN79ISIY\/7b+s2Y0zqyft+ecigBK9vz\/ZRtWqAbiGSZSed3IQUAFq3aoE+aruQzyaPk3mkQ5mpdq1aupNh+05d0FKtJ7mAjXRcM5ef9XPIeuzVpx8eb95MfzeEPevAmrzW8FeH4tff5uvj9vI96frUk7oXfqcuT+v3KC0JrVq2MB5B5BjZIiMjk+y1I6VQIU24MpjHmmSIiorW5zwHBtbV89wrqW327ddfH3uSa62n9hSye328vaSZLVaV4D08PePPITZJp60tW7bqnby4pZZZvrx59W2TLFNZqtaPldCRmrn0lpaaQ1KkBhERHq6bCc3mRltSu5DmwsTen0ma\/qU2lNw8KbHnvSTGnvdnz3PLZ7gp60GFiG0BQrZT6+Dau2+fCudv8NH743SnwaTIupXHJvacSbHn89gym2pttw17yfdPjunmy5cv0UKDM0jr9iGfTWr50lSe3DYeqdZ\/UuvJnuVzL+vAnveYFrLvKFq0iCp0uun3LYNsx1KhkUHYu11S5kuqspCSpX8tN27Zxzxd15pT18idkXzxpfSe0k5bVmpiOwlpyhv5+miEnj+vQ12O+82dNx\/VHqiabIgLeU157eR2HjItpfcn782ez5Ace95LYux5f\/Y8t3wGT1XDst2xSQ1ULtYhrSKyfOXwhTTHStOyHN9OjqyvxJ4zOfZ8HlvyOmkJEJPs4OU1nTXERVq3D\/lMUthK7nEyLbn1ZM\/yuZd1YM97JMpMTlMjl58xHTT4Jaxfv8EYkzZSCp8542eHNMX\/pUJaOvq88vKQJENZjqvJhVr0ebWq1lDY2xtdnuyEJzs9keCUHUobfdzTOD1Pjv\/K9tCmdUs827tXkk3QRM6ANXLX5sgaudMEudi6dSteGz4qzb9JLqdbDR8+DM880xs5bY4JEhE5Mwa5a2OQExFlcQxy1+bIIOcxciIiIhfGICciInJhDHIiIiIXxiAnIiJyYQxyIiIiF8YgJyIicmEMciIiIhfGICciInJhDHIiIiIXxiAnIiJyYQxyIiIiF8YgJyIicmEMciIiIhfGICciInJh9\/wzppUDquh5iIgo7fbv3cefMXVh\/BlTIiIiShMGORERkQtjkBMREbkwBjkREZELY5ATJUE6e3LgwME1h6yEQU5ZVmJffuuBiFxXYt9p6+F+wtPPKMux\/RIn96W+377w5LwO7NuPIkUK8\/SzdJDccrKdll7L1JGnnzHIKUsxt+mk\/tpKajxRepMgl\/PI3dxyM8jvUVLLyRyf1N97wSAnymDWgSy3bQdzvDXb+0QZ6eD+A3fVyM0QZ5Cnnu2ysg5t28FkfTu1GOREGcwMbNtBtmv5q\/6D\/LMmo4kyy8H9lqZ1N7e7m9bNgLmXoMlqbJeV3DcHc5kmNqQVg5woA1lvx9bhHae25zj1V7Znc5w5r7XExhGlt0MHDhpBbmlalxBn03rqJbaMzJCW5WguU\/lrjjP\/mvOmBYOcKIOY27D8Nbdjy3ALMTGxMgFeXp7wyJ8\/zV9gInJ+sg+4fv06IiIidGhbt3iYg7kPSMu+wJFBbimCEN3H5AtsPUiI37wZg9iYGPiVKA5PDw+GONF9Tr7j+VWB3dfXV33\/b6qCfIyunNruH1wRg5zuW9ZfSvNLamlZikNUVJSqiXsxwImyGPnOe3h46n2ABLnsE2xD3Pq2K3D6IL9y9Sr69n0O9eo1QND27XfdJ0qJdYjfvh1nHBqKQgEvT2MOIspKPD09EBl5J8gTC3NXwhp5KkjHqKvh4YhRQZDZbqkNTV5b\/pL9zC\/mnTC\/rb+80dE34zu3EFHWIt\/96OjoRGvk5l9X4pR7sh3Bwejevaeudbd4vCX27Nmjx7\/4wsC77ss8jz32OOb8MjfDQ+7EiZPo3fsZzJwx865TlTLayZOn8MrLQ\/XfjHT5yhXs3bf\/viowxH8xjS+rhHls7C3LOCLKkmQfIPsCVw9x4XRBfv3GDcyaOQtHjhwxxqRMeiH+\/NPPOHz4sDEmY2zbtg0FCxTA9u07cOXKVWPs\/eXYsWP4Zc4c3RHkfqK\/rPLP\/NK66BeWiNKHuS+wHlyV0wW5BEhY2CV9+9vJ32Dz5k3JDstXLEPVqlVx+fJlfWpBRrkRGYkdKsAHvDAA+fPnw\/79+40pd0RGRWHBgt8xbNhwfP3Ntzh95owxxeJep9sKu3QJM1ShZ+jQV\/VfuW+SVo3Va9aowkcQRo56HbuNVgx5jYWLFutxn074DMHBO+NbF+QxS\/5cgoMHD+GHH37EiZMn9XiZvv\/AAT2\/PE6e96ZV0Cf1Wik5eeoUfpv\/e4bU\/pP6Urr6F5aI0k9y+wJX2k\/wIKGdjh49qmv+AQEBaNCggSpEbEkQQJdUQeKN19\/AwUOH0OWpJ+HnVwIjR47CgYMHUzU9NPQ8uj7dFd7ehRJMtyUhOOzVYfpcyG7du+PGjRsYpeY\/f+GCnn7q5ClMnTINf69cifbt2qFEiRL6GPvIESOxVwVtt25Po07t2vjk0091C4OQ6zyXK18ehdRr16heHZ6els5gy\/5ajgmfTkDt2rXwxBMd8e+mf\/HRhx8hKjpaT0\/stey1atUqzJ79S6Y35TPMibK2+2kf4DRBbvZGtz4GLqx7qdsOtr3WzWPm6d2bXWqk\/235DzVr1YCXCrdaKtAOqYANDT1nzAFs3boV3oW98eqrQ1G\/Xj10aN8egwYNVPOE2j29ZMlSeH5AfwQ+WBdPd+2K3r174a+\/lt0VcvJ+Vq1chdatW+Ppp5\/S8z\/\/\/HNo2LAh\/ve\/dcZcgG8xX\/0aDz3UUB8SkHMoR4wcgWGvDUPNGjXQpMmjaNu2jf5sonix4qhcuRIKe3ujTt06+jFyzHzx4sUYPGQImjZpot\/7Sy+\/hGvXr6sCwJ3lbPtaqbF8+YoMC3MGNhGlhivuM1gjt4McD98eFKSDUhQtWhTFihfD7t2WAocE0M6du3RNPXeuXHqcaFC\/Ph5u3Nju6XJKhDRPb\/lvqx4uXgzD6ZAQfaqUtRs3InHgwEFkz5ED\/\/23Tc8rfyOuXcPx48fjAzF\/vnzIZfV6ObJnR\/HixdXnuaIfM3v2HB38cjpWUs6fP6+eIzfKlCltjLE8rwS+9eEF29dKrYwOc8tgjCAisnJnH+GaOwmnCfICXl744Yep8ce808I8pl67Vi1jTPqQwNqmgrx3r2d0jb9xo4fxx+I\/sX7det28LEF4\/dr1+KZoW\/ZOP3v2LHbs2BE\/XFPBXLtOHWOuO2T+iIhwHD1yJMH8colACVg5nSIxUjB45eVX8NabYxEcHAy\/kn54UNXmkxMZGakvnJI7d25jjEXBgoVw4\/oN4176kDCfNWt2hp7e56pfVCLKGOmxT7iXU1nlkqupGRLDGnkKpIYox8MHDRqkCxnmMOeX2fp49qlTp+CmQq5U6ZJ39bSXkJde+PZM9\/X1QYWKFfB8\/+cSDN2e7op8efMaj7CQwC5a1AcPPfTQXfO3bdMGuXLmNOZMKHhnMIr6FMWXX01C\/+f66dYAd3d3Y2ri5Lj51SuXcfnynY50skzkDIGy\/v7GmPSTLdudH4ggInIFjt5nOc0eM6lj5KmREcfI5Tj47l278aAqCUmrgTmULl0aVQKq6F7fQprNly9bgUPGKXDXVW31vffGYcOGDfp+StMfefSRBNOlV\/h3332PKVOn6QvRWJPgf+yxZpg9ezbOGcfY5fneeec9LFm6VN9PTMGCBRF+NTy+qf7M2TNYtWq1vm1NmujlYgnCx8cXZfzL6hYIeU9yfP6\/\/\/7Dnt17UK1GdT1PemnR4nF07\/60PgRAROTsJMDNn5x1pOxSu0vtIL+Xaw73OzkOXrx4MZQsWdIYYyFhU69eIP63dq3uDV6pUkX069cXw159DY+rwkjbtu1QSj3mkUce0fPbM33AC8\/j9VGj0KZNO12gOXUqBJ07d0L2RK4HXr9BfbRq3Qp9n+2H9u076ucrWKggmjRpYsxxt8qVK+tj5B3U\/J07P4kPP\/gIDz6YsKlG5pHObo83b4FVq1frz9lXve9w9RnlPTVr2hzffjMZw4e\/Br9U9E5PCUOciDKTdY4llnP2DHLI0dEhLrLdTuYAgTnJvBatXM5Ojs\/Kud7mz5j6lyur50kvUjN\/degwXSuXY94pHe9O7fwZTWrPcppa3rx5E23itne63rjsKChJM7ccS0\/q+RIjTfqyDuV8+Gzqn73S+rikyCl0H6jChHQiTO8QT2zblcHcdi9euIiGDQL1PESU9QQH79KHDvPkcdMddW1\/1lRkxo8qmddNuRes\/qQzqT3LKWpJhaq90+0JcSHhl9zzJUaeW\/\/+dirDOK2PS06zZs1YEyciugdOVyOXzl9vj307wfnQ9pDjv19M+hyVKlY0xlBWxho5ESWHNfIMJD20e\/TsgXLlyhljUubh4YFn+jyD8uXLG2OIiIiyBqdsz5Srjs2ePTPBtdSFHAO3vS\/zrFy5Qp+mxeZZIiLKaph8RERELszpjpETpQceIyei5PAYORERETkFBjkREZELY5ATERG5MAY5kRM4c+YMbH+ulojIHgxyIgfbsHEjWrdpj9ffGKMvt5tepMNfeEREogUEc5p0\/iMi18YgJ3IgCfFBg17C1atXE\/SWTQ\/yC3bjxn+I4aPe0Nfvt2ZO274j2BhDRK6KQU7kINYh3qnTE3jv3bf1j9+ktx3BOzFn7q\/xp+QR0f2FQU7kAJkV4qJt61b453\/rseW\/rcaYxMkv723c9C9GjX5TD3Lb+rfwV6xchf+2bsO\/m7fg5VeH48OPP8WpkBBjqsWNGzd0oWHwy0Mx4fMv7ppOROmPQU6UyTIzxEW5cmXxXN8++H7qD7hw4YIxNiG5WM7k76dg1pxf0PLx5nqYOfsXfPPtd3qa2LVrN6b9+BO2bgvCU0920j+1O2zEKP1ztEIubDFsxOs4dy4U3bo+hcLehfGaur933z49nYgyBoOcKBNldoibGjd6CFUDqqja8jx9dUZbx44fx2ZV0x7x2jA8+sjDenhr9CgE7diBQ4ePGHMBxYsVwwvPP4eHGjbAiwP6o0yp0tiz1xLUmzZvRsmSfhgy6EU9\/ZlePdCrZ3f88efS+MIAEaU\/BjlROohVQTXx8y\/0ILcT46gQF3L5yV49umH3nr26adxWSMhpFFMh7eNT1BgDeHt7w69ECR3ypnz58unnEnny5NHzX79+XQd1cPBOeHjkx+Yt\/6nPukkP0gJwSj03T60jyjgMcqJ0sHbNWnzzzWRMmvQVvvzyq7vC3JEhbipSpAj69O6JKdN+wJmz54yxFleuXEWhQgXhlju3McYS\/vnz59NBnZIYVcuPuHYNZ86cxbag7fFDRMQ11K1TSy5abcxJROmNQU6UDpo1a4r33x+nw882zJ0hxE31Ah\/Eg3Xr4qtvvtXBa\/L3L43jx08mGCcd106dCoF\/mTLGmKTlcXODr68PKleqhJcGD0ww9OndC\/kc9HmJsgIGOVE6kF9JerJzp7vCfO3af5wmxIX8upM0sV+7dh279+wxxgJl\/f31L0AtX\/G37qkuw9Jly\/UFY8rb+QuHzZs1w4q\/V2Lf\/gP6\/s2bN\/G5WgZffv1tgt7vRJS+7vlnTGvUqKbnIXImjtp25XV\/m78Ab7wxJkGnMkeEuByXfuvt9xAYWBdPqte3Jh3UXhv5Ot55awwCH6yrx50+c0afUrZ33359v3y5cnjzjVHw8yuh70+Y+IX+O2zoy\/qvkHGlS5fSzy+fXY6Lf\/LZ5zrEZahVswZeHzEc3t6FjEcQOYf76WdM0xTkMkRGRjHIyWklte1mRiFUXts6zJ2hJp4a12\/c0H\/T2hwute+I8HB9epp0iCNyRlny98jlA5kDESVNviNmM3tn9deVQlxIgN\/LMe3s6vN7eXkxxIkyiV1BzvAmSh35znR5sjM+\/eQjlwpxInI999TZTZofpMmSiIiIHCPZIE+qJi7jLQNwMSzMGEtERESZLVU18jsBnk3XxnPnzo1TJ0+xVk5EROQgqersZv6VIWfOHLozS\/bsObBly3\/61BUGOhERUeZK9vQzkdhpPDLIaTzR0Tf15RsvX76C8IhwREZGIvZWrJ6PyJHM7Vb+yhAn263aLi2noMXi6pWreOXlIXoeIsp6ssx55MJ6h5jYObmyU5QLT0iIywUgbt2Ki995EjlKYtutbLMy3LwZg0uXLqNbty56HiLKerJUkAuZxRxsw1yGuLjbOtTNaeZjiBzF3P5ke5Tb1turtCSFhYWhRYvmeh4iynqyZJCbf82wNgfZQd65fyfwiRzJ3Aatt1UJcfOQ0MWLYXj00cZ6HiLKerJckAvrHaPctv5rDnLfHGwlNo4oo5jbm\/X2aR3kFy5cROPGD+l5iCjryZJBLmTWxIbkQtz2PlFmMLc7M8Sl5UgGCXK51roEeYMG9fQ8RJT1ZOkgN8lt28Ecb832PlFmMLc76yA3j5GbP5oivwpGRFlTlg1yk\/mQpP7aSsNLEN0Tc5uzDXLrGnmdOrX0PESU9ZhB7uaWW1\/cLMsFubB9WHJPk8aXIEozc5tLLshr1aqh5yGirGfpXyv07+RLjVwubpY\/fz54enjoHznKMkFuYkiTM0opyKVpvWbN6noeIsp6rJvWJbCjb97EjRuROsiLFPbW41wlyC3FjntgftikBiIiImcmzepenp7wK1Fc3buNUFXQlwqAq7jnIE9JYuHOgYMzDEREtgp7e6tgz6Gv\/ugqMjzIiYiIXImEeWRUFOTy466AQU5ERGRDOr5dv37DuOfcGOREREQ28uXLq2vlroBBTkREZEM6wMmZLq6AQU5ERJQIVzm9mkFORETkwhjkRERELoxBTkRE5MKyRUZG8hqrdN9J6hKtMvDXz4jInl8\/O37iJIr5+ujbiTHnlcemlVNcopWIiCgrkkqCWUFwJAY5ERHRPXD0ddkZ5ERERPeAQU5EROSEXOWnlRjkRERENuS4d4576MSWmRjkRERENq7fuIHcuXMZ95wbg5yIiMhG+NVwuOfJY9xzbgxyIiIiKxcvhiG3m5uqkec2xjg3BjkREZHhYlgYYmJi4OmR3xjj\/BjkROlAOsacPXsOwTt34erVq3f9apLsGC5dvhw\/XLly9a6LSMg88ti4RH5xKSoqSh+zI6L0J9\/Fq+HhCAk5ra8CWaCAF7Jlc5U+67xEK92nMvMSrduCtuPd8R8gOjoaBby8cOHiRdQLfBDDhw1FwQIF9Dxb\/tuKYSNG6dumfPnyYdALA9CmTStkVzsNmWfSV19j0uefoVDBgsZcFr8t+B0nTpzEsKEvG2OI6F4s\/WsFvL0Lwc0tN\/LkyYO8efMiX153fdu8RGtqwlwelxa8RCuRg+3Zuw\/j3v8Qg14cgKV\/LMQvs6Zj0fxf4e7ujo8+mZCgFl26VEksWjAP69as1MPETz\/GjNmzsWNHsDEHEWWWwirEfYoWga9PUX1bmtJd5Zi4LQY5URpJU\/jceb+h0xMd0LxZU12rFvnz58fzz\/XFqVMh2L17jx6XmCqVK6Fhg\/q6Jk5ElFYMcqI0Cg+PwLlzoahfr95dTXA+RYti1vQfdRN7SqKio4xbRESpxyAnSqPLVy7rnz2U42xpoTvHBe9C7Zo1jTFERKnHICe6B9KR7nbcnf6i0kzeuMlj8YN0UjOdPnMWAwe\/jB69n8XTPXqj17P98HDjh3TzOhFRWjHIidJIepbfvh2H0POhxhgg8MG6uiPb\/1b\/jXZtWxtjLXx9fPDB+Hfx5Ref4ZuvvsCfC+fj2Wd6I6cd13O+fp2nnhFR4hjkRGnk5eWFcmXLYtnyv+86Jzw0NBS7du1BhfLljDFAjhzZ9WOkACCD7ekqRYoUVjX82\/rUOGs3b97EoUOHULp0KWMMEdEdDHKiNJLj492efgr\/btmC76ZM0xd5kfPXT4WE4KNPP4OfXwlUqljRmDtlJf388MADVfHVN5P18XMRFR2te8YfPHxY1\/aJiGwxyInuQamSJfX54IdU0Hbo3AUPN22Ovs8N0AH+5hujUnWRCGlif\/WVl\/BA1QB0791HH2Nv3rIN1v6zDuPffUe\/FhGRLV7Zje5LmXllN5OcV37jxg14eHrGn1OeVvI+r127rgoCbmm+YhQRJW3Llq0oWrSI\/o5JIVoGaWWTq7rxym5EWVSuXLn0MfB7DXEhOxW53jNDnIhSwiAnIiJyYQxyIiIiF8YgJyIicmEMciIiIhfGICciInJhDHIiIiIXxiAnIiJyYQxyIiIiF8YgJyIicmEMciIiIhfGICciInJhDHIiIiIXxiAnIiJyYQxyIiIiF8YgJyIicmEMciIiIhfGICciInJhDHIiIiIXxiAnIiJyYQxyIiIiF8YgJyIicmEMciIiIhfGICciInJhDHIiIiIXxiAnIiJyYQxyIiIiF8YgJyIicmEMciIiIhfGICciInJhDHIiIiIXxiAnIiJyYQxyIiIiF8YgJyIicmEMciIiIhfGICciInJhDHKiNIqJicGly5eTHGT67du3ER4RkWD89Rs3jGe4IyoqSs8n89uS+WX6vYhTz3vu3DkE79ylXye15DHyWHkOeS4ich7ZIiMj+a2k+44ZiHFxcXq4desWYmNj9RAVFY3z5y8gMLCuniettvy3FcNGjDLu3W3Cxx+ierUH8Nbb72HT5s3GWIu6dWrj9RHDUbRoEX3\/twW\/Y8uWrXj37TeRJ08ePc40YeIXKF26FJ7s9IQxJnXCwi5h3Acf4siRo8ifP78uTHTt0hm9enRHzpw5jbkSJ8trxqzZmDtvPgoVLIhr164hIKAKRg4fhoIFChhzEbke+b7J9y9PHjf9PZAhR44cyJ49ux5EtmzZ9F972H5v7SXfz3vFGjlRGgU+WBfr1qzUw49Tv0OpkiX1X3OcTDe9PGRQ\/PhVy5fqYJ701de4efOmMUfGkALM1B9+hH+ZMlgw7xfMnvETpk7+Bus2bMRhFewp2bN3L9Zv2IQfp3ynH\/vb3NnwUIWBpX8tM+YgIkdjkBNlsty5c6NDu7Y4c\/asbhm4F+s3bsSyFX8naJKX5m+pRV+5clW3RjR\/rBl6dn86vvZduLA3ChfyRnh4uL6fnDNnz8G7UCEULGipfct7r1SponqNUH2fiByPQU7kIFJbjomNMe6ljdSOFy5ajKtX74TyqjVrcebMWXh45EeuXLlQu1ZNFFJhbDp1KkQ3r\/v6+hhjklahfDlcuXoFFy+G6ftyvH7btu0IqFJZ3ycix2OQE2Uy6Sy2ect\/KFCgIIoWLWqMTZvy5cvD3d0dBw4e1PclaLduC0KD+vX08T5rU6b9iKd79Ma74z\/Ay0MG6kMBKSlXtix69+yBV4YNR\/defdC1W09UrlxJ1\/KJyDkwyIkywfQZs9Cj97N66NipC\/5avkIfN8+XN68xR9rI46Xj3IaNm3TzutS2pYNa9WrVjDnueOThRhgy6EU9\/ycTPsfRY8f1+MNHjqBtx85o3OSx+EE68okjR4\/im8nfo0P7tvj4g\/EY8dqrWLV6DZbwGDmR02CQE2WCLk92wpdffKaHGT9Nw49Tv0dZ\/zLG1KRJ83tKp57VC3xQ1cgP4fyFC9gWFIQqVSrDy8vTmHpHxQoV8FDDBnhp8EDUrx+om+Ql\/MuULo2ZP\/2ARQvmxQ+1atbQrz1\/wUJV+26Knt27wc+vBB5u3AjDh72CpX8t18fgicjxGOREmUCav+X0LRm8vLyQ3ea0FulVfvrMGVy16YAWEXENJ06eREk\/P2PM3aSJXE6jkSZ1GR5qUD\/+tJkLFy\/i5xmzEnSqk2lFixTBlatXde1dOsEVKOAV\/\/5kkGPrch68nBoj7836NBz5LNLbXk5FIyLHY5ATOYGKFcqjUKGC+H7qD7iqAlZERETg+2nT1K1sqFypoh6XGOlJ3lCF93ffT9XHxeW4uSlv3rwI2r4DP82YgRvGhWiOnziBP5YsRYN6gTqwkyLnxdaoUU2fQ3727Dk9Tp5jwcJFKF3KUnggIsdjkBM5AQ8PD7z79ltyJRu079RFH6eW49ZSkx73zlhdi0+O9EyXi71Ik7j1cXe5PXrUCP08rdp11M\/7wqCX0L5tG7s6rHXp3AmBD9ZB72f76cfKc8hzDRk0UBcgiMjxeGU3ui9lxpXdMoo0aUdcu6ZPLUuuxpxa8rxSo\/bw9LyraT8l0tM+Ijxc1\/DT8z0ROQqv7EZEGUaC0jxOnZ7k+RI7Pm8PeYw8liFO5HwY5ERERC6MQU5EROTCGOREREQujEFORETkwhjkRERELoxBTkRE5MIY5ERERC6MQU5EROTCGOREREQujEFORETkwhjkRERELoxBTkRE5MIY5ERERC6MQU5EROTCGOREREQujEFORETkwhjkRERELoxBTkRE5MIY5JSlZMuWzbhFRHR\/7BMY5HTfky+qORAR2XL1fQSDnO5rDG8iSg1X3GcwyClLyp49O27dumXcI6KsRL77sg+4XzDI6b6UXKna0oQGnL9wwRhDRFmJfPdlH5DSfsJVMMgpS7CEt2WQknju3Llx\/Nhx1sqJshj5zst3X\/YBsi+w3je4KgY53ffML6j5Zc2ZMwfy5MmjbmfHhg0bcSokhIFOdJ+T77h81+U7L9992QfIvsA6xM2\/riZbZGTkbeM20X3l9m3Lph0XF6cH+SLLEBsbi+jom7h+\/TquXLmK8IhwqO8BYm\/Fxj+GiO4fugCfIyfc3d3h6eGJAgW8kC9fPri55VZhnhM5cuTQg9TQzWPnqQ11KRikRVjYJeNW2jHI6b5lhrL8tQ5zCXIZYmJiERUVpUP85s2bavptPS\/DnOj+Yda4s2fPppvTJcwldHPlyqlD3AxyM8TNAGeQEzkJM5gTC3P5K+EdExMTP818DBHdH8xANoM6V65cOtQlvBMLcXNILQY5UQYxQ9k6yM3BEuRxxjTWxonuV2Y4S4Bb\/mZPEODWQW7On1oMcqIMZIbzndC+89cckgvxpMYTkfNJKoRlvBni1sFt\/decLy0Y5EQZzAxq28E6xGWwZnufiFyHbSDLfXMwwzuxIa0cF+TA\/wHANFkcC9E4nAAAAABJRU5ErkJggg==)","20012a91":"# Model Generation :\n---\n Now we are going to see how the model reacts if we change the kernel sizes of the Conv-layer.\n\n And that will be our main motive as this task is mainly on *how CNN layer works*.","6e08c5b3":"# *Animal Recognition* with **Custom CNN** : deeper understanding into **CNN**\n---\n\nThis project is basically for those -\n  1. who are facing difficulties in making train and test data from the images in folders\n  2. Deeper understanding of [**Convolutional Neural Network**](https:\/\/en.wikipedia.org\/wiki\/Convolutional_neural_network) *(CNN)*\n\n\n# UPVOTE if you like this kernel :)\n\"This notebook is made with with love \u2764\ufe0f\"    -**s_agnik1511**","5d00ab7e":"# Dataframe Generation :\n  1. Creating separate train and test of each type of animal.\n  2. Connecting the train parts and test parts of each folder.\n  3. Reshuffling the train and test dataset.\n  4. Producing **Featureset** and **Target Value** from the data.\n","cfb1bfb7":"This gives us slightly overfitted model which will not be a too bad case for us :D\n\n","560ed364":"We can see the model is overfitted after 3rd epoch and the validation accuracy is not better than other cases when :\n### KERNEL SIZE ---> (2,2)","ffdc8395":"We can see in the confusion matrix of the test data :\n\n1. Buffalo and Zebra are predicted most correctly.\n2. Elephants are predicted nicely but some are predicted as Zebras which is odd.\n3. The Rhino is not predicted well, we can see it has been mispredicted as elephants.\n4. The Zebra has been mispredicted in some cases as Rhinos.","cb336cf3":"Checking if it the values are in correct manner or not.","baba20d5":"# Libraries :\n\n     As this is a deep learning task we surely need any deep learning library to start work with . \n     \n     In Python we have 2 very famous libraries -   \n     1. Tensorflow\n     2. Pytorch\n     \n     For this project we are proceeding with tensorflow.\n     \n     We also need some supporting libraries which will help us wrangle the data and produce the dataframes and others.\n     \n     At last but not the least we are importing some libraries to make confusion matrix as this is a problem of multiclass classifiation.\n\n     "}}