{"cell_type":{"a2fb1795":"code","b55b7912":"code","5c8b0f3e":"code","af04b747":"code","fa0eaa48":"code","af998e0a":"code","bf22297f":"code","ea9f59c1":"code","f9dff2d3":"code","acbc6028":"markdown","766433cf":"markdown","0a8b975a":"markdown","f6d98b2f":"markdown"},"source":{"a2fb1795":"import warnings\nwarnings.filterwarnings(\"ignore\")\nfrom PIL import Image, ImageDraw\nimport matplotlib.pyplot as plt\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport pandas as pd\nimport os\nimport numpy as np\nimport cv2\nimport ast","b55b7912":"%%time\n\ntrain_df = pd.read_csv('..\/input\/tensorflow-great-barrier-reef\/train.csv')\ntrain_df = train_df[train_df['annotations'].str.len() > 2]\ntrain_df['ann'] = train_df['annotations'].apply(lambda x: ast.literal_eval(x))\ntrain_df['count'] = train_df['ann'].str.len()\ntrain_df['bboxes'] = train_df['ann'].apply(lambda x: [[ann['x'], ann['y'], ann['x'] + ann['width'], ann['y']+ann['height']] for ann in x])\ntrain_df['areas'] = train_df['ann'].apply(lambda x: [np.array([ann['width']*ann['height'] for ann in x])])","5c8b0f3e":"train_df.sample(5)","af04b747":"area_list = np.concatenate(train_df['areas'].values.flatten(), axis=1).ravel().tolist()\nprint(\"Total crops : \" + str(len(area_list)))\nprint(\"Mean \", np.mean(area_list), \" Median \", np.median(area_list))","fa0eaa48":"filter_per = 0.10 # bottom 10 %\nf_index = int(filter_per * len(area_list))\ns_area_list = np.sort(area_list)\nf_area_list = s_area_list[f_index:]\nmin_area = f_area_list[0]\nprint(\"Actual min area:\", s_area_list[0], ' After 10% filtered min area : ', min_area)","af998e0a":"fig = make_subplots(rows=1, cols=2)\nfig.add_trace(go.Histogram(x=area_list, name='Area'), 1, 1)\nfig.add_vrect(x0=0, x1=min_area,fillcolor=\"LightSalmon\", opacity=0.5, layer=\"below\", line_width=0, col=1)\nfig.add_trace(go.Box(x=area_list, name='Area'), 1, 2)\nfig.add_trace(go.Box(x=f_area_list, name='Filtered_Area'), 1, 2)\nfig.show()","bf22297f":"%%time\ntrain_df['f_bboxes'] = train_df['bboxes'].apply(lambda x : [i for i in x if ((i[2]-i[0])*(i[3]-i[1])) >= min_area])\ntrain_df['f_count'] = train_df['f_bboxes'].str.len()\nf_train_df = train_df[train_df['f_count']!=0]\n\nprint(\"Actual data frame len :\", len(train_df), \" after filtered : \", len(f_train_df))","ea9f59c1":"sample_df = f_train_df[(f_train_df['f_count'] > 3) & (f_train_df['f_count']!=f_train_df['count'])].sample(5)\nsample_df","f9dff2d3":"train_dir = '..\/input\/tensorflow-great-barrier-reef\/train_images'\nvideo_pre = 'video_'\ndef get_img_path(v_id, img_id):\n    return os.path.join(train_dir, video_pre + str(v_id), str(img_id) + '.jpg')\n\ndef get_cropped_images(v_id, image_id, bboxes): \n    img = Image.open(get_img_path(v_id, image_id))\n    images = list()\n    for bbox in bboxes:\n        images.append(img.crop(bbox))\n    return images\n\ndef draw_bboxes(v_id, image_id, bboxes): \n    img = Image.open(get_img_path(v_id, image_id))\n    draw = ImageDraw.Draw(img)\n    for bbox in bboxes:\n        draw.rectangle(bbox, outline='Red', width=10)\n    return img\n\nfor i, row in sample_df.iterrows():\n    plt.figure(figsize=(20, 15))\n    \n    img1 = draw_bboxes(row.video_id, row.video_frame, row.bboxes)\n    plt.subplot(1, 2, 1)\n    plt.imshow(img1)\n    \n    img2 = draw_bboxes(row.video_id, row.video_frame, row.f_bboxes)\n    plt.subplot(1, 2, 2)\n    plt.imshow(img2)\n    \n    plt.show()","acbc6028":"# Import","766433cf":"# Filtering reefs lies on last 10% Area","0a8b975a":"# Visualizing filter effect","f6d98b2f":"# Pre process"}}