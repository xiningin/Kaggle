{"cell_type":{"aca1eb56":"code","71640c5e":"code","6fe04a07":"code","54cb0eec":"code","3cb174bc":"code","74f1b3f9":"code","bd47ad79":"code","94badccf":"code","e5c092f2":"code","745d9cc1":"code","a544006a":"markdown","aa3d554e":"markdown","17525c58":"markdown","f417ea6e":"markdown","17e53e96":"markdown","ab70f452":"markdown","c97af3c8":"markdown","13642cae":"markdown","ce04f633":"markdown","c0a86935":"markdown","642db9ac":"markdown","fccb9a32":"markdown","969c3040":"markdown","9f9a91fc":"markdown","afdaf4c4":"markdown"},"source":{"aca1eb56":"import os\nimport glob\n\nimport pandas as pd\nimport numpy as np\nfrom itertools import chain\n\nimport matplotlib.pyplot as plt\nimport folium\nfrom folium.plugins import HeatMapWithTime\nfrom IPython.display import HTML\n\nplt.rcParams['figure.figsize'] = [10, 10]\n\n# dataset read\nolist_orders_df = pd.read_csv(\"..\/input\/olist_orders_dataset.csv\")\nolist_order_items_df = pd.read_csv(\"..\/input\/olist_order_items_dataset.csv\")\nolist_customers_df = pd.read_csv(\"..\/input\/olist_customers_dataset.csv\")\nolist_geolocation_df = pd.read_csv(\"..\/input\/olist_geolocation_dataset.csv\")\n\ngroupby_month_zipcode_latlng_df = pd.merge(\n            olist_orders_df,\n            olist_customers_df,\n            on = [\"customer_id\"],\n            how = \"left\"\n        ).\\\n        pipe(\n            lambda df:\n            pd.merge(\n                df,\n                olist_order_items_df,\n                on = [\"order_id\"],\n                how = \"left\"\n            )\n        ).\\\n        rename(columns={\n            \"customer_zip_code_prefix\":\"zip_code_prefix\",\n            \"customer_city\":\"city\",\n            \"customer_state\":\"state\"\n        }).\\\n        pipe(lambda df:\n            df.assign(\n                year_month = df[\"order_purchase_timestamp\"].str[0:7]               \n        )).\\\n        groupby([\n            \"zip_code_prefix\",\n            \"city\",\n            \"state\",\n            \"year_month\",\n            \"order_id\"\n        ])[\n            \"price\",\n            \"freight_value\"\n        ].sum().reset_index().\\\n        assign(\n            order_count = 1\n        ).\\\n        groupby([\n            \"zip_code_prefix\",\n            \"city\",\n            \"state\",\n            \"year_month\"\n        ])[\n            \"price\",\n            \"freight_value\",\n            \"order_count\"\n        ].sum().reset_index().\\\n    pipe(lambda df:\n        pd.merge(\n            df,\n            olist_geolocation_df.\\\n            rename(columns={\n                \"geolocation_zip_code_prefix\":\"zip_code_prefix\",\n                \"geolocation_lat\":\"lat\",\n                \"geolocation_lng\":\"lng\",\n                \"geolocation_city\":\"city\",\n                \"geolocation_state\":\"state\"\n            }).\\\n            groupby([\n                    \"zip_code_prefix\",\n                    \"city\",\n                    \"state\"\n                ])[\"lat\",\"lng\"].mean().reset_index(),\n            on=[\"zip_code_prefix\",\"city\",\"state\"]\n    )\n)\n\ntime_index,for_heat_map_data = groupby_month_zipcode_latlng_df.\\\n    pipe(lambda df:\n        df.assign(order_count_for_hm = df[\"order_count\"]\/10)\n    ).\\\n    groupby(\"year_month\")[\"lat\",\"lng\",\"order_count_for_hm\"].\\\n    apply(lambda row: row.values.tolist()).\\\n    pipe(lambda df:\n        (\n            df.reset_index()[\"year_month\"].tolist(),\n            df.tolist()\n        )\n    )\n\ncenter_map = [\n    groupby_month_zipcode_latlng_df[\"lat\"].mean(),\n    groupby_month_zipcode_latlng_df[\"lng\"].mean()\n]\n\nmap1 = folium.Map(location=center_map,tiles='stamentoner',zoom_start=4.0)\n\nheat_map = HeatMapWithTime(\n    for_heat_map_data,\n    index = time_index,\n    auto_play = True,\n    radius = 10,\n    max_opacity = 0.5\n).add_to(map1)\n\nmap1","71640c5e":"import os\nimport glob\n\nimport pandas as pd\nimport numpy as np\nfrom itertools import chain\n\nimport matplotlib.pyplot as plt\nimport folium\nfrom folium.plugins import HeatMapWithTime\nfrom IPython.display import HTML\n\nplt.rcParams['figure.figsize'] = [10, 10]\n\n# dataset read\nolist_orders_df = pd.read_csv(\"..\/input\/olist_orders_dataset.csv\")\nolist_order_items_df = pd.read_csv(\"..\/input\/olist_order_items_dataset.csv\")\nolist_customers_df = pd.read_csv(\"..\/input\/olist_customers_dataset.csv\")\nolist_geolocation_df = pd.read_csv(\"..\/input\/olist_geolocation_dataset.csv\")\n","6fe04a07":"# group by city (groupby_city_df) : For Table 1-2\ngroupby_city_df = pd.merge(\n            olist_orders_df,\n            olist_customers_df,\n            on = [\"customer_id\"],\n            how = \"left\"\n        ).\\\n        pipe(\n            lambda df:\n            pd.merge(\n                df,\n                olist_order_items_df,\n                on = [\"order_id\"],\n                how = \"left\"\n            )\n        ).\\\n        rename(columns={\n                    \"customer_zip_code_prefix\":\"zip_code_prefix\",\n                    \"customer_city\":\"city\",\n                    \"customer_state\":\"state\"\n                }).\\\n        groupby([\n            \"zip_code_prefix\",\n            \"city\",\n            \"state\",\n            \"order_id\"\n        ])[\n            \"price\",\n            \"freight_value\",\n        ].sum().reset_index().\\\n        assign(\n            order_count = 1\n        ).\\\n        groupby([\n            \"zip_code_prefix\",\n            \"city\",\n            \"state\",\n        ])[\n            \"price\",\n            \"freight_value\",\n            \"order_count\"\n        ].sum().reset_index().\\\n        pipe(lambda df:\n            pd.merge(  \n                df,\n                df.groupby([\n                        \"city\"\n                    ])[\"order_count\"].sum().reset_index().\\\n                    sort_values(\"order_count\",ascending=False).\\\n                    pipe(lambda df:\n                        df.assign(\n                                order_count_cumsum = df[\"order_count\"].cumsum()\/sum(df[\"order_count\"])\n                            )\n                    ).\\\n                    reset_index(drop=True).\\\n                    reset_index().\\\n                    pipe(lambda df:\n                        df.assign(\n                                city_other = df.apply(\n                                    lambda row: \n                                    str(row[\"index\"]).zfill(2)+ \"_\"+ row[\"city\"] if row[\"index\"]<10 else \"99_other\",\n                                    axis=1\n                                )\n                            )\n                    ).loc[:,[\"city\",\"city_other\"]],\n                on=[\"city\"]\n            )\n    )\n\n# group by month and city(groupby_month_city_df) : For Chart 1-2\ngroupby_month_city_df = pd.merge(\n            olist_orders_df,\n            olist_customers_df,\n            on = [\"customer_id\"],\n            how = \"left\"\n        ).\\\n        pipe(\n            lambda df:\n            pd.merge(\n                df,\n                olist_order_items_df,\n                on = [\"order_id\"],\n                how = \"left\"\n            )\n        ).\\\n        rename(columns={\n                    \"customer_zip_code_prefix\":\"zip_code_prefix\",\n                    \"customer_city\":\"city\",\n                    \"customer_state\":\"state\"\n        }).\\\n        pipe(lambda df:\n            df.assign(\n                year_month = df[\"order_purchase_timestamp\"].str[0:7]              \n        )).\\\n        groupby([\n            \"city\",\n            \"state\",\n            \"year_month\",\n            \"order_id\"\n        ])[\n            \"price\",\n            \"freight_value\"\n        ].sum().reset_index().\\\n        assign(\n            order_count = 1\n        ).\\\n        groupby([\n            \"city\",\n            \"state\",\n            \"year_month\"\n        ])[\n            \"price\",\n            \"freight_value\",\n            \"order_count\"\n        ].sum().reset_index().\\\n    pipe(lambda df:\n        pd.merge(\n            df,\n            olist_geolocation_df.\\\n                rename(columns={\n                    \"geolocation_zip_code_prefix\":\"zip_code_prefix\",\n                    \"geolocation_lat\":\"lat\",\n                    \"geolocation_lng\":\"lng\",\n                    \"geolocation_city\":\"city\",\n                    \"geolocation_state\":\"state\"\n                }).\\\n                groupby([\n                        \"city\",\n                        \"state\"\n                    ])[\"lat\",\"lng\"].mean().reset_index(),\n            on=[\"city\",\"state\"]\n        )\n    ).\\\n    pipe(lambda df:\n        pd.merge(\n            df,\n            df.groupby([\n                    \"city\"\n                ])[\"order_count\"].sum().reset_index().\\\n                sort_values(\"order_count\",ascending=False).\\\n                pipe(lambda df:\n                    df.assign(\n                            order_count_cumsum = df[\"order_count\"].cumsum()\/sum(df[\"order_count\"])\n                        )\n                ).\\\n                reset_index(drop=True).\\\n                reset_index().\\\n                pipe(lambda df:\n                    df.assign(\n                            city_other = df.apply(\n                                lambda row: \n                                str(row[\"index\"]).zfill(2)+ \"_\"+ row[\"city\"] if row[\"index\"]<10 else \"99_other\",\n                                axis=1\n                            )\n                        )\n                ).loc[:,[\"city\",\"city_other\"]],\n            on=[\"city\"]\n        )\n    )\n\n# group by month and zip_code with latlng(groupby_month_zipcode_latlng_df) : For Map 1\ngroupby_month_zipcode_latlng_df = pd.merge(\n            olist_orders_df,\n            olist_customers_df,\n            on = [\"customer_id\"],\n            how = \"left\"\n        ).\\\n        pipe(\n            lambda df:\n            pd.merge(\n                df,\n                olist_order_items_df,\n                on = [\"order_id\"],\n                how = \"left\"\n            )\n        ).\\\n        rename(columns={\n            \"customer_zip_code_prefix\":\"zip_code_prefix\",\n            \"customer_city\":\"city\",\n            \"customer_state\":\"state\"\n        }).\\\n        pipe(lambda df:\n            df.assign(\n                year_month = df[\"order_purchase_timestamp\"].str[0:7]               \n        )).\\\n        groupby([\n            \"zip_code_prefix\",\n            \"city\",\n            \"state\",\n            \"year_month\",\n            \"order_id\"\n        ])[\n            \"price\",\n            \"freight_value\"\n        ].sum().reset_index().\\\n        assign(\n            order_count = 1\n        ).\\\n        groupby([\n            \"zip_code_prefix\",\n            \"city\",\n            \"state\",\n            \"year_month\"\n        ])[\n            \"price\",\n            \"freight_value\",\n            \"order_count\"\n        ].sum().reset_index().\\\n    pipe(lambda df:\n        pd.merge(\n            df,\n            olist_geolocation_df.\\\n            rename(columns={\n                \"geolocation_zip_code_prefix\":\"zip_code_prefix\",\n                \"geolocation_lat\":\"lat\",\n                \"geolocation_lng\":\"lng\",\n                \"geolocation_city\":\"city\",\n                \"geolocation_state\":\"state\"\n            }).\\\n            groupby([\n                    \"zip_code_prefix\",\n                    \"city\",\n                    \"state\"\n                ])[\"lat\",\"lng\"].mean().reset_index(),\n            on=[\"zip_code_prefix\",\"city\",\"state\"]\n    )\n)","54cb0eec":"print(\"\u3010Table 1\u3011: Top10 City EDA index\")\ngroupby_city_df.\\\n    groupby(\"city_other\")[\n        \"order_count\",\n        \"price\",\n        \"freight_value\"\n    ].sum()","3cb174bc":"print(\"\u3010Table 2\u3011: Top10 City EDA index Percent (%)\")\ngroupby_city_df.\\\n    groupby(\"city_other\")[\n        \"order_count\",\n        \"price\",\n        \"freight_value\"\n    ].sum().\\\n    pipe(\n        lambda df: df.divide(df.sum(axis=0), axis=1)*100\n    )","74f1b3f9":"print(\"\u3010Chart 1\u3011Top 10 City TimeSeries order_count value stacked area chart\")\nchart1 = pd.pivot_table(\n    groupby_month_city_df,\n    index=\"year_month\",\n    columns=\"city_other\",\n    values=\"order_count\",\n    aggfunc=np.sum\n).plot(kind=\"area\", stacked=True, title=\"Top 10 City TimeSeries order_count value stacked area chart\")\nchart1.legend(loc=\"upper left\",bbox_to_anchor=(1, 1),borderaxespad=0, fontsize=10)\nchart1.set_ylabel(\"order count\")\nplt.show()","bd47ad79":"print(\"\u3010Chart 2\u3011Top 10 City TimeSeries order_count 100 % stacked area chart\")\nchart2 = pd.pivot_table(\n    groupby_month_city_df,\n    index=\"year_month\",\n    columns=\"city_other\",\n    values=\"order_count\",\n    aggfunc=np.sum\n).\\\npipe(\n    lambda df: df.divide(df.sum(axis=1), axis=0)*100\n).plot(kind=\"area\", stacked=True, title=\"Top 10 City TimeSeries order_count 100 % stacked area chart\",ylim=[0,100])\nchart2.legend(loc=\"upper left\",bbox_to_anchor=(1, 1),borderaxespad=0, fontsize=10)\nchart2.set_ylabel(\"Percent (%)\")\nplt.show()","94badccf":"time_index,for_heat_map_data = groupby_month_zipcode_latlng_df.\\\n    pipe(lambda df:\n        df.assign(order_count_for_hm = df[\"order_count\"]\/10)\n    ).\\\n    groupby(\"year_month\")[\"lat\",\"lng\",\"order_count_for_hm\"].\\\n    apply(lambda row: row.values.tolist()).\\\n    pipe(lambda df:\n        (\n            df.reset_index()[\"year_month\"].tolist(),\n            df.tolist()\n        )\n    )\n\ncenter_map = [\n    groupby_month_zipcode_latlng_df[\"lat\"].mean(),\n    groupby_month_zipcode_latlng_df[\"lng\"].mean()\n]\n\nmap1 = folium.Map(location=center_map,tiles='stamentoner',zoom_start=4.0)\n\nheat_map = HeatMapWithTime(\n    for_heat_map_data,\n    index = time_index,\n    auto_play = True,\n    radius = 10,\n    max_opacity = 0.5\n).add_to(map1)\n\nmap1","e5c092f2":"print(\"\u3010Chart 3\u3011Top 10 City TimeSeries order_count value stacked area chart(excluding 99_other)\")\n\nchart3 = pd.pivot_table(\n    groupby_month_city_df[groupby_month_city_df[\"city_other\"] != \"99_other\"],\n    index=\"year_month\",\n    columns=\"city_other\",\n    values=\"order_count\",\n    aggfunc=np.sum\n).plot(kind = \"area\", stacked=True, title=\"Top 10 City TimeSeries order_count value stacked area chart(excluding 99_other)\")\nchart3.legend(loc=\"upper left\",bbox_to_anchor=(1, 1),borderaxespad=0, fontsize=10)\nchart3.set_ylabel(\"order count\")\nplt.show()","745d9cc1":"print(\"\u3010Chart 4\u3011Top 10 City TimeSeries order_count 100 % stacked area chart(excluding 99_other)\")\nchart_4 = pd.pivot_table(\n        groupby_month_city_df[groupby_month_city_df[\"city_other\"] != \"99_other\"],\n        index=\"year_month\",\n        columns=\"city_other\",\n        values=\"order_count\",\n        aggfunc=np.sum\n    ).\\\n    pipe(\n        lambda df: df.divide(df.sum(axis=1), axis=0)*100\n    ).plot(kind=\"area\", stacked=True, title=\"Top 10 City TimeSeries order_count 100 % stacked area chart(excluding 99_other)\",ylim=[0,100])\nchart_4.legend(loc=\"upper left\",bbox_to_anchor=(1, 1),borderaxespad=0, fontsize=10)\nchart_4.set_ylabel(\"Percent (%)\")\nplt.show()","a544006a":"***************************************\n\n## 6. Next\n- **Predict Delivery Date on Top10 City**  \n  Now, it's too large between \"order_estimated_delivery_date\" and \"order_delivered_customer_date\".  \n  We think it be going to affect customer satisfaction, but it's difficult for predicting perfect.  \n  So we start predicting it on Top10 City.  \n\n\n- **User Analysis Heavy\/Middle\/Light Clustering on specific term**  \n  We know its repeat-rate is a bit low on pre-analysis. So we will be do user clustering.","aa3d554e":"***************************************\n\n## 3. Top 10 City TimeSeries","17525c58":"***************************************\n\n## 5. Consideration in ML\n\n### Base\n- **Order counts 35% occupancy TOP 10 city.** (In 4,121 customer city)  \n  sao paulo,rio de janeiro,belo horizonte,brasilia,curitiba,porto alegre,campinas,salvador,guarulhos,sao bernardo do campo\n\n### TimeSeries\n- From **2016-09 to 2017-02 and 2018-09** is different tendency from recently(Chart 1-2),  \n  so we shouldn't use for train\/test ML **2016-09 - 2017-02 and 2018-09 (2016-11 NA)**\n- On ML train\/test, we recommend select from **2017-03 to 2018-08** but we consider about **2017-11** as outlier.\n- **progressively increasing occupancy on Top 10 City**. It does not mention this time, this factor may be repeat customer rate.\n\n### GeoGraphic\n- **Coastline's city is always a demand**. we think the factor are population,logistics and infrastructure.\n- **It is a gradient increase around major city** (ex. rio de janeiro,sao paulo,brasilia).On the other hand , around other city isn't.  \n we think also the factor are thoses.","f417ea6e":"### Top 10 City TimeSeries excluding 99_other","17e53e96":"***************************************\n# EDA - TimeSeries and GeoGraphic Understanding\n# Brazilian E-Commerce Public Dataset by Olist\n***************************************","ab70f452":"### Preprocesssing code\n- use dataset\n- group by city (groupby_city_df) : For Table 1-2\n- group by month and city(groupby_month_city_df) : For Chart 1-2\n- group by month and zip_code with latlng(groupby_month_zipcode_latlng_df) : For Map 1","c97af3c8":"```python\n# group by month and zip_code with latlng(groupby_month_zipcode_latlng_df) : For Map 1\ngroupby_month_zipcode_latlng_df = pd.merge(\n            olist_orders_df,\n            olist_customers_df,\n            on = [\"customer_id\"],\n            how = \"left\"\n        ).\\\n        pipe(\n            lambda df:\n            pd.merge(\n                df,\n                olist_order_items_df,\n                on = [\"order_id\"],\n                how = \"left\"\n            )\n        ).\\\n        rename(columns={\n            \"customer_zip_code_prefix\":\"zip_code_prefix\",\n            \"customer_city\":\"city\",\n            \"customer_state\":\"state\"\n        }).\\\n        pipe(lambda df:\n            df.assign(\n                year_month = df[\"order_purchase_timestamp\"].str[0:7]                \n        )).\\\n        groupby([\n            \"zip_code_prefix\",\n            \"city\",\n            \"state\",\n            \"year_month\",\n            \"order_id\"\n        ])[\n            \"price\",\n            \"freight_value\"\n        ].sum().reset_index().\\\n        assign(\n            order_count = 1\n        ).\\\n        groupby([\n            \"zip_code_prefix\",\n            \"city\",\n            \"state\",\n            \"year_month\"\n        ])[\n            \"price\",\n            \"freight_value\",\n            \"order_count\"\n        ].sum().reset_index().\\\n    pipe(lambda df:\n        pd.merge(\n            df,\n            olist_geolocation_df.\\\n            rename(columns={\n                \"geolocation_zip_code_prefix\":\"zip_code_prefix\",\n                \"geolocation_lat\":\"lat\",\n                \"geolocation_lng\":\"lng\",\n                \"geolocation_city\":\"city\",\n                \"geolocation_state\":\"state\"\n            }).\\\n            groupby([\n                    \"zip_code_prefix\",\n                    \"city\",\n                    \"state\"\n                ])[\"lat\",\"lng\"].mean().reset_index(),\n            on=[\"zip_code_prefix\",\"city\",\"state\"]\n    )\n)\n\n```","13642cae":"```python\n# dataset read\nolist_orders_df = pd.read_csv(\"olist_orders_dataset.csv\")\nolist_order_items_df = pd.read_csv(\"olist_order_items_dataset.csv\")\nolist_customers_df = pd.read_csv(\"olist_customers_dataset.csv\")\nolist_geolocation_df = pd.read_csv(\"olist_geolocation_dataset.csv\")\n```","ce04f633":"***************************************\n\n## 4. GeoGraphic Visualization\n### Visualization GeoGraphic from 2016-09 to 2018-09","c0a86935":"```python\n\n# group by month and city(groupby_month_city_df) : For Chart 1-2\ngroupby_month_city_df = pd.merge(\n            olist_orders_df,\n            olist_customers_df,\n            on = [\"customer_id\"],\n            how = \"left\"\n        ).\\\n        pipe(\n            lambda df:\n            pd.merge(\n                df,\n                olist_order_items_df,\n                on = [\"order_id\"],\n                how = \"left\"\n            )\n        ).\\\n        rename(columns={\n                    \"customer_zip_code_prefix\":\"zip_code_prefix\",\n                    \"customer_city\":\"city\",\n                    \"customer_state\":\"state\"\n        }).\\\n        pipe(lambda df:\n            df.assign(\n                year_month = df[\"order_purchase_timestamp\"].str[0:7]                \n        )).\\\n        groupby([\n            \"city\",\n            \"state\",\n            \"year_month\",\n            \"order_id\"\n        ])[\n            \"price\",\n            \"freight_value\"\n        ].sum().reset_index().\\\n        assign(\n            order_count = 1\n        ).\\\n        groupby([\n            \"city\",\n            \"state\",\n            \"year_month\"\n        ])[\n            \"price\",\n            \"freight_value\",\n            \"order_count\"\n        ].sum().reset_index().\\\n    pipe(lambda df:\n        pd.merge(\n            df,\n            olist_geolocation_df.\\\n                rename(columns={\n                    \"geolocation_zip_code_prefix\":\"zip_code_prefix\",\n                    \"geolocation_lat\":\"lat\",\n                    \"geolocation_lng\":\"lng\",\n                    \"geolocation_city\":\"city\",\n                    \"geolocation_state\":\"state\"\n                }).\\\n                groupby([\n                        \"city\",\n                        \"state\"\n                    ])[\"lat\",\"lng\"].mean().reset_index(),\n            on=[\"city\",\"state\"]\n        )\n    ).\\\n    pipe(lambda df:\n        pd.merge(\n            df,\n            df.groupby([\n                    \"city\"\n                ])[\"order_count\"].sum().reset_index().\\\n                sort_values(\"order_count\",ascending=False).\\\n                pipe(lambda df:\n                    df.assign(\n                            order_count_cumsum = df[\"order_count\"].cumsum()\/sum(df[\"order_count\"])\n                        )\n                ).\\\n                reset_index(drop=True).\\\n                reset_index().\\\n                pipe(lambda df:\n                    df.assign(\n                            city_other = df.apply(\n                                lambda row: \n                                str(row[\"index\"]).zfill(2)+ \"_\"+ row[\"city\"] if row[\"index\"]<10 else \"99_other\",\n                                axis=1\n                            )\n                        )\n                ).loc[:,[\"city\",\"city_other\"]],\n            on=[\"city\"]\n        )\n    )\n\n```","642db9ac":"***************************************\n\n## 1.Motivation \nNow, We research about ML on imbalance and asymmetric dataset.  \nSo we interested in this dataset \"Brazilian E-Commerce Public Dataset by Olist\"\nAs first, we'd like to understand it's TimeSeriese and GeoGraphic for ML.","fccb9a32":"***************************************\n\n## 2. Preprocessing and EDA Forcus\n\n### Preprocessing (code \u2192 Appendix)\n- raw dataset\n    + olist_orders_df \u2190 olist_public_dataset_v2.csv\n    + olist_order_items_df \u2190 geolocation_olist_public_dataset.csv\n    + olist_customers_df \u2190 geolocation_olist_public_dataset.csv\n    + olist_geolocation_df \u2190 olist_geolocation_dataset.csv\n\n- bulid dataset\n    + group by city (groupby_city_df) : For Table 1-2\n    + group by month and city(groupby_month_city_df) : For Chart 1-2\n    + group by month and zip_code with latlng(groupby_month_zipcode_latlng_df) : For Map 1\n\n### Forcus Features\n- order_count : olist_public_data_df are count by month and city\/zip_code\n\n### Forcus TimeSeries\n- year_month  : columns [order_purchase_timestamp] as PO's timestamp to yyyy-mm\n\n### Top 10 City\n- city_other : city order by order_count and  lower rank than 10 city defined \"99_other\"\u3010Table 1\u3011: Top10 City EDA index \n\n### Geo Location on zip_code\n- lat ,lng : Average Latitude and Longitude  by \"zip_code_prefix\",\"city\",\"state\" on olist_geolocation_df.","969c3040":"```python \n# group by city (groupby_city_df) : For Table 1-2\ngroupby_city_df = pd.merge(\n            olist_orders_df,\n            olist_customers_df,\n            on = [\"customer_id\"],\n            how = \"left\"\n        ).\\\n        pipe(\n            lambda df:\n            pd.merge(\n                df,\n                olist_order_items_df,\n                on = [\"order_id\"],\n                how = \"left\"\n            )\n        ).\\\n        rename(columns={\n                    \"customer_zip_code_prefix\":\"zip_code_prefix\",\n                    \"customer_city\":\"city\",\n                    \"customer_state\":\"state\"\n                }).\\\n        groupby([\n            \"zip_code_prefix\",\n            \"city\",\n            \"state\",\n            \"order_id\"\n        ])[\n            \"price\",\n            \"freight_value\",\n        ].sum().reset_index().\\\n        assign(\n            order_count = 1\n        ).\\\n        groupby([\n            \"zip_code_prefix\",\n            \"city\",\n            \"state\",\n        ])[\n            \"price\",\n            \"freight_value\",\n            \"order_count\"\n        ].sum().reset_index().\\\n        pipe(lambda df:\n            pd.merge(\n                df,\n                df.groupby([\n                        \"city\"\n                    ])[\"order_count\"].sum().reset_index().\\\n                    sort_values(\"order_count\",ascending=False).\\\n                    pipe(lambda df:\n                        df.assign(\n                                order_count_cumsum = df[\"order_count\"].cumsum()\/sum(df[\"order_count\"])\n                            )\n                    ).\\\n                    reset_index(drop=True).\\\n                    reset_index().\\\n                    pipe(lambda df:\n                        df.assign(\n                                city_other = df.apply(\n                                    lambda row: \n                                    str(row[\"index\"]).zfill(2)+ \"_\"+ row[\"city\"] if row[\"index\"]<10 else \"99_other\",\n                                    axis=1\n                                )\n                            )\n                    ).loc[:,[\"city\",\"city_other\"]],\n                on=[\"city\"]\n            )\n    )\n```","9f9a91fc":"***************************************\n\n## 7. Appendix","afdaf4c4":"***************************************\n\n## Summary\n0. Motivation - EDA for ML\n1. Preprocessing - preprocessing order_count by month and city\n2. Top 10 City TimeSeries - progressively increasing occupancy on Top 10 City\n3. GeoGraphic Visualization - Coastline's city is always a demand\n4. Consideration in ML - On ML train\/test, we recommend select from 2017-03 to 2018-08\n5. Next - Predict Delivery Date on Top10 City, User Analysis\n6. Appendix\u3000- Preprocessing-code,Top 10 City TimeSeries excluding 99_other\n"}}