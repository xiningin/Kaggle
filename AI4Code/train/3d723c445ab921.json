{"cell_type":{"842f4f6e":"code","1e7f08b3":"code","ba66233c":"code","be99f14a":"code","b5590af0":"code","e9a696fc":"code","c5cbd7e8":"code","7e32d078":"code","754b3ccb":"code","a11e9b8a":"code","e94d0775":"code","382a908c":"code","3532b379":"code","745dd6a6":"code","4c9744c4":"code","c6154dd5":"code","c2ab3e52":"code","2e7b96c5":"code","7cb01f3b":"code","87e2cd40":"code","9b4db4ac":"code","36fd4c2e":"code","f9961d8f":"code","fcca227a":"code","d41dbf6c":"code","bcd055ce":"code","39933e0f":"code","198c7c9b":"code","063e68cf":"code","36d4e8d6":"code","1407ee6c":"code","8740fb11":"code","32a32cc9":"code","edaf8d95":"code","ce62c2cb":"code","d198028b":"code","cafe1e09":"code","5bccf896":"code","f5b68346":"code","f7add5dd":"code","41893438":"code","a11761ae":"code","21ee94b1":"code","1cebefe4":"code","87aef565":"markdown","a8b89486":"markdown","1de9b094":"markdown","3bb14aa3":"markdown","1efdb8e2":"markdown","4c3ea0ea":"markdown","10c4e276":"markdown","504ffd6e":"markdown","5f11cca5":"markdown","84def863":"markdown","03f58c45":"markdown","18bbe5e1":"markdown","908eaab1":"markdown","20dd689e":"markdown","4792baa2":"markdown","f3570bc4":"markdown","d726645f":"markdown","8ed9991e":"markdown","c5b05cd6":"markdown","6ca4e222":"markdown","2c1cc2d5":"markdown","4db104d2":"markdown","a48e9236":"markdown","a8b321a6":"markdown","91eb6f9f":"markdown","5a624e1f":"markdown","fc7335be":"markdown","da051e3c":"markdown","988a379f":"markdown","acc726b6":"markdown","932fc38b":"markdown","5941f59e":"markdown","dbc8e101":"markdown","8089ea64":"markdown"},"source":{"842f4f6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nfrom scipy.stats import norm\nfrom scipy import stats\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.tools as tls\nimport plotly.figure_factory as ff\nfrom sklearn.metrics import r2_score, mean_squared_error\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1e7f08b3":"df = pd.read_csv('\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')","ba66233c":"df.head()","be99f14a":"df.info()","b5590af0":"df.describe()","e9a696fc":"pd.DataFrame(round(df.isnull().sum()\/df.shape[0] * 100,3), columns = ['Missing'])","c5cbd7e8":"categorical_col = []\nfor column in df.columns:\n    if df[column].dtype == object and len(df[column].unique()) <= 50:\n        categorical_col.append(column)\n        print(f\"{column} : {df[column].unique()}\")\n        print(\"====================================\")","7e32d078":"numerical_col = []\nfor column in df.columns:\n    if df[column].dtype != object and len(df[column].unique()) <= 50:\n        numerical_col.append(column)\n        print(f\"{column} : {df[column].unique()}\")\n        print(\"====================================\")","754b3ccb":"df.head()","a11e9b8a":"df.shape","e94d0775":"plt.rcParams['figure.figsize'] = 14,7\nsns.countplot(df['price'][:200], palette='Set1')\nplt.title(\"Count plot of the price variable\")\nplt.xticks(rotation = 90)\nplt.show()","382a908c":"plt.figure(figsize=(14,10))\nsns.set_style(\"darkgrid\")\nsns.jointplot(x = 'price', y = 'number_of_reviews', data=df, color = 'darkgreen',height = 8, ratio = 4)","3532b379":"df.head()","745dd6a6":"fig = go.Figure(go.Bar(y=df['name'][:30], x=df['number_of_reviews'], # Need to revert x and y axis\n                      orientation=\"h\")) # default orentation value is \"v\" - vertical ,we need to change it as orientation=\"h\"\nfig.update_layout(title_text='Top 30 Hotel with their reviews',xaxis_title=\"Count\",yaxis_title=\"New York City Air BnB Hotels\")\nfig.show()","4c9744c4":"df.head()","c6154dd5":"fig = px.scatter_mapbox(df, lat=\"latitude\", lon=\"longitude\", hover_name=\"neighbourhood\", hover_data=[\"neighbourhood_group\"],\n                        color_discrete_sequence=[\"fuchsia\"], zoom=8,center=dict(lat=40.74765, lon=-73.89445), height=300)\nfig.update_layout(mapbox_style=\"open-street-map\")\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","c2ab3e52":"data=df['neighbourhood_group'].value_counts().to_frame().reset_index().rename(columns={'index':'neighbourhood_group','neighbourhood_group':'count'})","2e7b96c5":"colors=['red','green','yellow','light blue', 'pink']\nfig = go.Figure([go.Pie(labels=data['neighbourhood_group'], values=data['count'])])\nfig.update_traces(hoverinfo='label+percent', textinfo='percent+label', textfont_size=15,\n                 marker=dict(colors=colors, line=dict(color='#000000', width=2)))\nfig.update_layout(title=\"PERCENTAGE WISE NEIGHBOURHOOD GROUPS\",title_x=0.5)\nfig.show()","7cb01f3b":"plt.figure(figsize=(20,10))\ndf.groupby('room_type')['price'].value_counts().nlargest(20).sort_values(ascending=True).plot(kind='barh')\nplt.xlabel('Price Of The Room')\nplt.show","87e2cd40":"fig = px.scatter(df, x='name', y='price',\n                 color='availability_365') # Added color to previous basic \nfig.update_layout(title='NAME & PRICE OF THE HOTELS WITH AVAILABILITY STATUS',xaxis_title=\"HOTEL NAMES\",yaxis_title=\"PRICE\")\nfig.show()","9b4db4ac":"df.head()","36fd4c2e":"plt.figure(figsize=(10,10))\nsns.distplot(df['price'], fit=norm)\nplt.title(\"Price Distribution Plot\",size=15, weight='bold')","f9961d8f":"df['price'] = np.log(df.price+1)","fcca227a":"plt.figure(figsize=(12,10))\nsns.distplot(df['price'], fit=norm)\nplt.title(\"Log-Price Distribution Plot\",size=15, weight='bold')","d41dbf6c":"plt.figure(figsize=(7,7))\nstats.probplot(df['price'], plot=plt)\nplt.show()","bcd055ce":"df.head()","39933e0f":"df.room_type.value_counts()","198c7c9b":"\n\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\ndf['room_type'] = le.fit_transform(df['room_type'])\ndf['neighbourhood_group'] = le.fit_transform(df['neighbourhood_group'])","063e68cf":"df = df.drop(columns=['name','id' ,'host_id','host_name', 'last_review', 'neighbourhood'])\ndf.head()","36d4e8d6":"sns.heatmap(df.isnull(), cmap='viridis')","1407ee6c":"df.room_type.value_counts()","8740fb11":"df['reviews_per_month'] = df['reviews_per_month'].fillna(df['reviews_per_month'].mean())","32a32cc9":"plt.figure(figsize=(15,12))\npalette = sns.diverging_palette(20, 220, n=256)\ncorr=df.corr(method='pearson')\nsns.heatmap(corr, annot=True, fmt=\".2f\", cmap=palette, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5}).set(ylim=(11, 0))\nplt.title(\"Correlation Matrix\",size=15, weight='bold')","edaf8d95":"x = df.drop(['price'], axis=1) ## Independent variable\ny = df['price'] ## Dependent variable","ce62c2cb":"from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.30, random_state = 42)","d198028b":"from sklearn.preprocessing import StandardScaler\n\nsc = StandardScaler()\n\nx_train = sc.fit_transform(x_train)\nx_test = sc.transform(x_test)","cafe1e09":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\n\nlr.fit(x_train, y_train)\n\nlr_pred = lr.predict(x_test)\n\nr2 = r2_score(y_test,lr_pred)\nprint('R-Square Score: ',r2*100)\n\n\n# Calculate the absolute errors\nlr_errors = abs(lr_pred - y_test)\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(lr_pred), 2), 'degrees.')\n\n\n# Calculate mean absolute percentage error (MAPE)\nmape = 100 * (lr_errors \/ y_test)\n\n\n\nsns.distplot(y_test-lr_pred)","5bccf896":"from sklearn.metrics import mean_absolute_error,mean_squared_error\n\nprint('mse:',mean_squared_error(y_test, lr_pred))\nprint('mae:',mean_absolute_error(y_test, lr_pred))\nprint('rmse', np.sqrt(mean_absolute_error(y_test, lr_pred)))","f5b68346":"from sklearn.tree import DecisionTreeRegressor\n\ndtree = DecisionTreeRegressor(criterion='mse')\ndtree.fit(x_train, y_train)\n\n\ndtree_pred = dtree.predict(x_test)\n\nr2 = r2_score(y_test,dtree_pred)\nprint('R-Square Score: ',r2*100)\n\n# Calculate the absolute errors\ndtree_errors = abs(dtree_pred - y_test)\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(dtree_pred), 2), 'degrees.')\n","f7add5dd":"print('mse:',mean_squared_error(y_test, dtree_pred))\nprint('mae:',mean_absolute_error(y_test, dtree_pred))\nprint('rmse', np.sqrt(mean_absolute_error(y_test, dtree_pred)))","41893438":"from sklearn.ensemble import RandomForestRegressor\n\nrandom_forest_regressor = RandomForestRegressor()\nrandom_forest_regressor.fit(x_train, y_train)\n\nrf_pred = random_forest_regressor.predict(x_test)\n\nr2 = r2_score(y_test,rf_pred)\nprint('R-Square Score: ',r2*100)\n\n# Calculate the absolute errors\nrf_errors = abs(rf_pred - y_test)\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(rf_pred), 2), 'degrees.')","a11761ae":"print('mse:',mean_squared_error(y_test, rf_pred))\nprint('mae:',mean_absolute_error(y_test, rf_pred))\nprint('rmse', np.sqrt(mean_absolute_error(y_test, rf_pred)))","21ee94b1":"import xgboost as xgb\n\nxg_boost = xgb.XGBRegressor()\n\nxg_boost.fit(x_train, y_train)\n\nxgb_pred = xg_boost.predict(x_test)\n\nr2 = r2_score(y_test,xgb_pred)\nprint('R-Square Score: ',r2*100)\n\n# Calculate the absolute errors\nxgb_errors = abs(xgb_pred - y_test)\n# Print out the mean absolute error (mae)\nprint('Mean Absolute Error:', round(np.mean(xgb_pred), 2), 'degrees.')","1cebefe4":"print('mse:',mean_squared_error(y_test, xgb_pred))\nprint('mae:',mean_absolute_error(y_test, xgb_pred))\nprint('rmse', np.sqrt(mean_absolute_error(y_test, xgb_pred)))","87aef565":"### Plotting a Joint plot\n\n* **Joint plot** allows us to compare two different variables and see if there is any relationship between these two variables. By using joint plot we can do both univariate and bivariate analysis by plotting the scatter plot (bivariate) and distribution plot (univariate) of two different variables in a single plotting grid\n\n* **Univariate analysis** is the analysis of **one** (\u201cuni\u201d) variable. **Bivariate analysis** is the analysis of exactly **two** variables. \n\n* **Multivariate analysis** is the analysis of more than two variables","a8b89486":"### Checking the number of reviews for top 30 hotels","1de9b094":"# Model Building","3bb14aa3":"### Label Encoding the room_type & neighbourhood column.","1efdb8e2":"### Checking for numerical column.","4c3ea0ea":"### Dropping the non necessary columns","10c4e276":"### Applying Decision tree Regressor","504ffd6e":"### Applying Random Forest Regressor Algorithm","5f11cca5":"### Checking the count of few prices","84def863":"### Checking for categorical columns","03f58c45":"### Handelling the missing values.","18bbe5e1":"### Splitting the data into Independent & Dependent variables","908eaab1":"### Checking The Price Of The Room According To The Room Type","20dd689e":"![](https:\/\/qtxasset.com\/hotelmanagement\/1573846987\/Airbnb%20Logo.png\/Airbnb%20Logo.png?odjCy3bpxSmeWSOJuDmHp1bVTFe879J)","4792baa2":"### Converting into Normal Distribution","f3570bc4":"### Handeling the missing values","d726645f":"### Visualizing the Percentage wise Neighbourhood Groups.","8ed9991e":"## You can even re-use this code in your projects so If you like it please consider upvoting it.","c5b05cd6":"# Data Pre-Processing","6ca4e222":"* From the scatter plot we can see that the restaurants with higher number of reviews has more price. The distribution plot of `number_of_reviews` on the right side indicates that the majority of reviews pooled lie in a bucket of 1000-2000","2c1cc2d5":"# Exploratory Data Analysis (EDA)","4db104d2":"### Plotting a correlation matrix","a48e9236":"### Checking for missing values","a8b321a6":"* The above distribution graph shows that there is a right-skewed distribution on price. This means there is a positive skewness. Log transformation will be used to make this feature less skewed. This will help to make easier interpretation and better statistical analysis\n\n* Since division by zero is a problem, log+1 transformation would be better.","91eb6f9f":"* The yellow lines in this graph are the missing values.","5a624e1f":"* From the above comparison of RMSE scores we can see that our XGBoost model is perfoming well ","fc7335be":"* From the dataset we can see that the values are very high so we need to scale down the values so we will be scaling down the values with the help of Standard Scaler","da051e3c":"### Splitting The Dataset Into Training & Validation Set.","988a379f":"### Plotting a map plot to check which all hotels are in the neighbourhood","acc726b6":"### Checking the Name & Price of The Hotels with the Availability Status","932fc38b":"### Visualizing The Target Variable","5941f59e":"### Plotting a Probability Plot","dbc8e101":"### Applying Linear Regression Algorithm","8089ea64":"### Applying XGBoost Regressor"}}