{"cell_type":{"3bd65adf":"code","a0eba9d3":"code","2d4c4c6d":"code","11da1616":"code","3a2596f7":"code","d03384fb":"code","b97d5772":"code","5b66bd20":"code","d4713cde":"code","be8431ac":"code","d144d6f1":"code","01de5577":"code","f64b2182":"markdown","3bb8cd5e":"markdown","20b46123":"markdown","91494b88":"markdown","b6949e79":"markdown","30f048f0":"markdown","b61456e8":"markdown","49e5b17d":"markdown","80f49056":"markdown","719d91d4":"markdown","45693c7f":"markdown","2b73f477":"markdown"},"source":{"3bd65adf":"from IPython.display import clear_output\n!pip install flaml --user\nclear_output()","a0eba9d3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom flaml import AutoML\nfrom sklearn.model_selection import train_test_split,learning_curve","2d4c4c6d":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","11da1616":"drop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin', 'SibSp','Parch']\ntrain = train.drop(drop_elements, axis = 1)\ntest = test.drop(drop_elements, axis = 1)\n\ndef checkNull_fillData(df):\n    for col in df.columns:\n        if len(df.loc[df[col].isnull() == True]) != 0:\n            if df[col].dtype == \"float64\" or df[col].dtype == \"int64\":\n                df.loc[df[col].isnull() == True,col] = df[col].mean()\n            else:\n                df.loc[df[col].isnull() == True,col] = df[col].mode()[0]\n                \ncheckNull_fillData(train)\ncheckNull_fillData(test)\n\nstr_list = [] \nnum_list = []\nfor colname, colvalue in train.iteritems():\n    if type(colvalue[1]) == str:\n        str_list.append(colname)\n    else:\n        num_list.append(colname)\n        \ntrain = pd.get_dummies(train, columns=str_list)\ntest = pd.get_dummies(test, columns=str_list)","3a2596f7":"y = train['Survived']\nX = train.drop(['Survived'], axis=1)\nX_test = test\nRANDOM_SEED = 42\n\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size = 0.2,random_state = RANDOM_SEED )","d03384fb":"automl = AutoML()\nautoml_settings = {\n    \"time_budget\": 10,  # in seconds\n    \"metric\": 'accuracy',\n    \"task\": 'classification'\n}\nautoml.fit(X_train=X_train, y_train=y_train,**automl_settings)","b97d5772":"train_sizes, train_scores, val_scores =\\\n                learning_curve(estimator=automl.model.model,\n                               X=X_train,\n                               y=y_train,\n                               train_sizes=np.linspace(0.1, 1.0, 10), # 10% ~ 100%\n                               cv=10,\n                               n_jobs=1)","5b66bd20":"#get mean and std \ntrain_mean = np.mean(train_scores, axis=1)\ntrain_std = np.std(train_scores, axis=1)\nval_mean = np.mean(val_scores, axis=1)\nval_std = np.std(val_scores, axis=1)","d4713cde":"#draw train mean score\nplt.plot(train_sizes, train_mean,\n         color='blue', marker='o',\n         markersize=5, label='Training accuracy')\n\n# draw train mean score + std ~ tarin mean score - std \nplt.fill_between(train_sizes,\n                 train_mean + train_std,\n                 train_mean - train_std,\n                 alpha=0.15, color='blue')\n\n#draw test mean score\nplt.plot(train_sizes, val_mean,\n         color='green', linestyle='--',\n         marker='s', markersize=5,\n         label='Validation accuracy')\n\n# draw test mean score + std ~ test mean score - std \nplt.fill_between(train_sizes,\n                 val_mean + val_std,\n                 val_mean - val_std,\n                 alpha=0.15, color='green')\n\n# grid + xlabel + ylabel + legend position \nplt.grid()\nplt.xlabel('Number of training examples')\nplt.ylabel('Accuracy')\nplt.legend(loc='lower right')\nplt.ylim([0.0, 1.00])\nplt.tight_layout()\nplt.show()","be8431ac":"pred_test = automl.model.model.predict(X_test)","d144d6f1":"output = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\noutput.Survived = (pred_test > 0.5).astype(int)\noutput.to_csv('automl_submission.csv', index=False)","01de5577":"output.head(10)","f64b2182":"# predict test data ","3bb8cd5e":"# load data","20b46123":"# check submission data ","91494b88":"# get learning curve data","b6949e79":"# preprocess data","30f048f0":"# import libraries","b61456e8":"# make flaml model and fit data","49e5b17d":"# submission","80f49056":"# get mean and std ","719d91d4":"# install flaml ","45693c7f":"# draw learning curve","2b73f477":"# split data (input,label) (train,validation)"}}