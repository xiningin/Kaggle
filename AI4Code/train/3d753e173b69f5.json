{"cell_type":{"c71605e0":"code","b6149fcc":"code","0afe8016":"code","f16810b0":"code","cec8dc4b":"code","4ccc990d":"code","d3a30cf0":"code","08e3bb80":"code","8c8d6029":"code","8b87882d":"code","ed9a5b22":"code","accaa209":"markdown","e3d2ef04":"markdown","1bba6250":"markdown","eb78b281":"markdown","c6a8fa8f":"markdown","5971f875":"markdown","8ddaa49d":"markdown","2f8c126d":"markdown","eeae2a9f":"markdown","2a9261f4":"markdown"},"source":{"c71605e0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nplt.rcParams.update({'font.size': 14})\nfrom math import pi\nfrom matplotlib.patches import Rectangle, Ellipse\nimport warnings\nwarnings.filterwarnings(\"ignore\")","b6149fcc":"df=pd.read_csv('..\/input\/kaggle-survey-2021\/kaggle_survey_2021_responses.csv')\ndf","0afe8016":"responses = df[1:].reset_index(drop=True)\n\n# Color palette\nother_color = \"#008080\"\njapan_color = \"#800080\"\n\nresponses['Egypt'] = responses['Q3'] == 'Egypt'\nresponses['Egypt']","f16810b0":"temp = responses.groupby('Egypt')['Q2'].value_counts().to_frame()\n\ntemp.columns = ['amount']\ntemp = temp.reset_index(drop=False)\ntemp = temp.pivot(index='Egypt', columns ='Q2')['amount']\n\ntemp['all'] = temp.sum(axis=1)\n\nfor c in temp.columns:\n    temp[c] = temp[c] \/ temp['all'] * 100\n\ntemp = temp.drop(['all'], axis=1)\n\nwidth = 0.35       # the width of the bars: can also be len(x) sequence\n\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(12, 6))\n\nax.bar(['Rest of World', 'Egypt'], temp['Man'].values, width, label='Men', color=['lightblue', 'lightblue'])\nax.bar(['Rest of World', 'Egypt'], temp['Woman'].values, width, bottom=temp['Man'].values, label='Women', color=['red', 'blue'])\n\nax.set_ylabel('Percentage')\nax.legend()\n\nplt.show()","cec8dc4b":"temp = responses.groupby('Egypt')['Q5'].value_counts().to_frame()\n\ntemp.columns = ['amount']\ntemp = temp.reset_index(drop=False)\ntemp = temp.pivot(index='Egypt', columns ='Q5')['amount']\n\ntemp['all'] = temp.sum(axis=1)\n\nfor c in temp.columns:\n    temp[c] = temp[c] \/ temp['all'] * 100\n\ntemp = temp.drop(['all'], axis=1)\ntemp = temp[responses['Q5'].value_counts().index]\n\ntemp = temp.drop(['Currently not employed', 'Other', 'Student'], axis=1)\n\ncategories = list([c.replace(' ', '\\n') for c in temp.columns])\n\nangles = [n \/ float(len(categories)) * 2 * pi for n in range(len(categories))]\nangles += angles[:1]\n\nfig, ax = plt.subplots(nrows=1, ncols=1, figsize=(8, 8),\n                       subplot_kw=dict(polar=True))\n\nplt.xticks(angles[:-1], categories)\nplt.ylim(0, 18)\n\nvalues = temp.iloc[0].values.flatten().tolist()\nvalues += values[:1]\nax.plot(angles, values, other_color, linewidth=3, linestyle='solid')\nax.fill(angles, values, other_color, alpha=0.6)\n\nvalues = temp.iloc[1].values.flatten().tolist()\nvalues += values[:1] \nax.plot(angles, values, japan_color, linewidth=3, linestyle='solid')\nax.fill(angles, values, japan_color, alpha=0.2)\n\nplt.show()","4ccc990d":"temp = responses.groupby('Egypt')['Q5'].value_counts().to_frame()\n\ntemp.columns = ['amount']\ntemp = temp.reset_index(drop=False)\ntemp = temp.pivot(index='Egypt', columns ='Q5')['amount']\n\ntemp['all'] = temp.sum(axis=1)\n\nfor c in temp.columns:\n    temp[c] = temp[c] \/ temp['all'] * 100\n\ntemp = temp.drop(['all'], axis=1)\ntemp = temp[responses['Q5'].value_counts().index]\n\ntemp = temp.reset_index(drop=False)#[['Student']]\n\ng = sns.catplot(x='Egypt', y='Student',kind='bar',data=temp,\n                height=6, aspect=1\/1,\n                palette = [other_color, japan_color])\ng.ax.set_ylim(0,30)\nfor p in g.ax.patches:\n    txt = str(p.get_height().round(1)) + '%'\n    txt_x = p.get_x() + 0.3\n    txt_y = p.get_height()+0.5\n    g.ax.text(txt_x,txt_y,txt)\n\ng.ax.set_xlabel('Country')\ng.ax.set_xticklabels(['Rest of World', 'Egypt'])\n\ng.ax.set_ylabel('Percentage [%]')\n\nplt.show()","d3a30cf0":"\ntemp = responses.groupby('Egypt').Q1.value_counts(normalize=True).to_frame()\ntemp = temp * 100\ntemp.columns = ['amount']\n\ntemp = temp.reset_index(drop=False)\n\ntemp = temp.pivot(index='Egypt', columns='Q1')['amount']\ntemp = temp.T\ntemp.columns = ['Row', 'Egypt']\n# create data\nlabels = temp.index.values\ny1 = temp['Row'].values\ny2 = temp['Egypt'].values\n\nwidth = 0.35  # the width of the bars\n\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(12, 6))\n\nx = np.arange(len(labels))  # the label locations\n\nrects1 = ax.bar(x -width\/2, y1, width, label='Rest of World', color=other_color)\nrects2 = ax.bar(x + width\/2, y2, width, label='Egypt', color=japan_color)\n\nplt.xlabel(\"Age\")\nplt.ylabel(\"Percentage\")\nax.set_xticks(x)\nax.set_xticklabels(labels, rotation=90)\nplt.legend()\nplt.title('Age Distribution among Kagglers')\nplt.show()\n\n\ntemp = responses[(responses.Q5 != 'Student')].groupby('Egypt').Q1.value_counts(normalize=True).to_frame()\ntemp = temp * 100\ntemp.columns = ['amount']\n\ntemp = temp.reset_index(drop=False)\n\ntemp = temp.pivot(index='Egypt', columns='Q1')['amount']\ntemp = temp.T\ntemp.columns = ['Row', 'Egypt']\n# create data\nlabels = temp.index.values\ny1 = temp['Row'].values\ny2 = temp['Egypt'].values\n\nwidth = 0.35  # the width of the bars\n\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(12, 6))\n\nx = np.arange(len(labels))  # the label locations\n\nrects1 = ax.bar(x -width\/2, y1, width, label='Rest of World', color=other_color)\nrects2 = ax.bar(x + width\/2, y2, width, label='Egypt', color=japan_color)\n\nplt.xlabel(\"Age\")\nplt.ylabel(\"Percentage\")\nax.set_xticks(x)\nax.set_xticklabels(labels, rotation=90)\nplt.legend()\nplt.title('Age Distribution among Kagglers without Students')\nplt.show()","08e3bb80":"ml_cols = ['Q17_Part_1', 'Q17_Part_2', 'Q17_Part_3', 'Q17_Part_4', 'Q17_Part_5', 'Q17_Part_6', 'Q17_Part_7', 'Q17_Part_8', 'Q17_Part_9', 'Q17_Part_10', 'Q17_OTHER']\n\ncv_cols = ['Q18_Part_1', 'Q18_Part_2', 'Q18_Part_3', 'Q18_Part_4', 'Q18_Part_5', 'Q18_OTHER']\n\nnlp_cols = ['Q19_Part_1', 'Q19_Part_2', 'Q19_Part_3', 'Q19_Part_4', 'Q19_OTHER']\n\nresponses['ml_usage'] = responses[ml_cols].any(axis=1)\nresponses['cv_usage'] = responses[cv_cols].any(axis=1)\nresponses['nlp_usage'] = responses[nlp_cols].any(axis=1)\n\n\ntemp = responses[(responses.Q5 != 'Student')].groupby('Egypt')['ml_usage'].value_counts(normalize=True).to_frame()\ntemp.columns = ['percentage']\ntemp = temp.reset_index()\ntemp = temp.pivot(index='Egypt', columns='ml_usage')['percentage']\ntemp = temp.reset_index()\ntemp['tech'] = 'ml'\n\ntemp2 = responses[(responses.Q5 != 'Student')].groupby('Egypt')['cv_usage'].value_counts(normalize=True).to_frame()\ntemp2.columns = ['percentage']\ntemp2 = temp2.reset_index()\ntemp2 = temp2.pivot(index='Egypt', columns='cv_usage')['percentage']\ntemp2 = temp2.reset_index()\ntemp2['tech'] = 'cv'\n\ntemp = pd.concat([temp, temp2])\n\ntemp2 = responses[(responses.Q5 != 'Student')].groupby('Egypt')['nlp_usage'].value_counts(normalize=True).to_frame()\ntemp2.columns = ['percentage']\ntemp2 = temp2.reset_index()\ntemp2 = temp2.pivot(index='Egypt', columns='nlp_usage')['percentage']\ntemp2 = temp2.reset_index()\ntemp2['tech'] = 'nlp'\n\ntemp = pd.concat([temp, temp2])\n\ntemp = temp.pivot(index='tech', columns='Egypt')[True]\ntemp.columns = ['Rest of world', 'Egypt']\n\n# create data\nlabels = ['CV', 'ML', 'NLP']\ny1 = temp['Rest of world'].values\ny2 = temp['Egypt'].values\n\nwidth = 0.2  # the width of the bars\n\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(12, 6))\n\nx = np.arange(len(labels))  # the label locations\n\nrects1 = ax.bar(x -width, y1, width, label='Rest of World', color=other_color)\nrects2 = ax.bar(x, y2, width, label='Egypt', color=japan_color)\n\nplt.xlabel(\"Industry\")\nplt.ylabel(\"Percentage\")\nax.set_xticks(x)\nax.set_xticklabels(labels)\nplt.legend()\nplt.show()","8c8d6029":"temp = responses[(responses.Q5 != 'Student')].groupby(['Egypt', 'Q1'])['ml_usage', 'cv_usage', 'nlp_usage'].sum().reset_index(drop=False)\ntemp['all'] = responses[(responses.Q5 != 'Student')].groupby(['Egypt', 'Q1'])['Q1'].count().values#to_frame()#.reset_index(drop=False)\nfor c in ['ml_usage', 'cv_usage', 'nlp_usage']:\n    temp[c] = temp[c]\/temp['all']*100\n\n    \nf, ax = plt.subplots(nrows=1, ncols=3, figsize=(24, 6))\n\nfor i, j in enumerate(['ml_usage', 'cv_usage', 'nlp_usage']):\n    df = temp.pivot(index='Q1', columns='Egypt')[j].reset_index(drop=False)#[['ml_usage', 'cv_usage', 'nlp_usage']]\n    df.columns = ['Age', 'Rest of World', 'Egypt']\n    sns.lineplot(data=df, x='Age', y='Egypt', color=japan_color, ax=ax[i])\n    sns.lineplot(data=df, x='Age', y='Rest of World', color=other_color, ax=ax[i])\n    ax[i].set_title(j)\n    ax[i].set_ylabel('Percentage [%]')\n    ax[i].set_ylim([0,100])\n    ax[0].set_title('ML Methods')\nax[0].add_patch(Ellipse((8, 75), width=5, height=25, angle=0, fill=False, alpha=1, color='k', lw=1))\n\nax[1].set_title('CV Methods')\nax[1].add_patch(Ellipse((8, 30), width=5, height=25, angle=0, fill=False, alpha=1, color='k', lw=1))\nplt.tight_layout()\nplt.show()\n","8b87882d":"native_speaker = ['Australia', 'Canada', 'Ireland', 'United Kingdom of Great Britain and Northern Ireland',\n       'United States of America']\n\nresponses['non_native_english'] = responses.Q3.apply(lambda x: 0 if x in native_speaker else (2 if x == 'Japan' else 1))\n\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(10, 6))\nresponses['Time from Start to Finish (minutes)'] = responses['Time from Start to Finish (seconds)'].astype(int)\/60\nax = sns.boxplot(y='Time from Start to Finish (minutes)', x='non_native_english', data=responses, fliersize=0, palette=[other_color,other_color, japan_color])\n\nax.set_ylim([0,40])\nax.set_xticklabels(['Native English RoW', 'Non Native English RoW', 'Egypt'])\nax.set_xlabel('')\nplt.show()\n","ed9a5b22":"media_sources = ['Twitter', 'Newsletters', 'Reddit', 'Kaggle', 'Course Forums', 'YouTube', 'Podcasts', 'Blogs', 'Journal Publications', 'Slack Communities']\ni=1\ntemp = responses[['Egypt', f'Q42_Part_{i}']]\ntemp[f'Q42_Part_{i}'] = temp[f'Q42_Part_{i}'].notna()\n\ntemp = temp.groupby('Egypt')[f'Q42_Part_{i}'].value_counts(normalize=True).to_frame()\ntemp.columns = [media_sources[i-1]]\ntemp = temp.reset_index(drop=False)\ntemp  = temp[temp[f'Q42_Part_{i}'] == True]\ndf = temp[[media_sources[i-1]]].copy()\n\nfor i in range(2,11):\n    temp = responses[['Egypt', f'Q42_Part_{i}']]\n    temp[f'Q42_Part_{i}'] = temp[f'Q42_Part_{i}'].notna()\n\n    temp = temp.groupby('Egypt')[f'Q42_Part_{i}'].value_counts(normalize=True).to_frame()\n    temp.columns = [media_sources[i-1]]\n    temp = temp.reset_index(drop=False)\n    temp  = temp[temp[f'Q42_Part_{i}'] == True]\n    \n    df = pd.concat([df, temp[media_sources[i-1]]], axis=1)\n\ndf = df*100\n\nlabels = df.columns.values\ny1 = df.loc[1].values\ny2 = df.loc[3].values\n\nwidth = 0.4  \n\nf, ax = plt.subplots(nrows=1, ncols=1, figsize=(12, 6))\n\nx = np.arange(len(labels))\n\nrects1 = ax.bar(x -width, y1, width, label='Rest of world', color=other_color)\nrects2 = ax.bar(x, y2, width, label='Egypt', color=japan_color)\n\nplt.xlabel(\"Media Source\")\nplt.ylabel(\"Percentage [%]\")\nax.set_xticks(x)\nax.set_xticklabels(labels, rotation=90)\nplt.legend()\nplt.show()","accaa209":"    \u0628\u0627\u0644\u0645\u0642\u0627\u0631\u0646\u0629 \u0645\u0639 \u0628\u0642\u064a\u0629 \u0627\u0644\u0639\u0627\u0644\u0645\u060c \u0647\u0646\u0627\u0643 \u0639\u062f\u062f \u0644\u0627 \u0628\u0627\u0633 \u0628\u0647 \u0645\u0646 \u0643\u0627\u062c\u0644\u064a\u0646\u0631\u0632 \u0641\u064a \u0645\u0635\u0631 \u0627\u0644\u062a\u064a \u062a\u062a\u0628\u0639 \u0639\u0627\u0644\u0645 \u0628\u064a\u0627\u0646\u0627\u062a \u0627\u0644\u0645\u0647\u0646 \u0648\u0645\u062d\u0644\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0648\u0645\u0647\u0646\u062f\u0633 ML.\n    Compared to the rest of the world, there are no bass from Kallinsers in Egypt, which follows the world of professions and data and ML engineer.","e3d2ef04":"    \u0639\u0644\u0627\u0648\u0629 \u0639\u0644\u0649 \u0630\u0644\u0643\u060c \u064a\u0645\u0643\u0646\u0646\u0627 \u0623\u0646 \u0646\u0631\u0649 \u0623\u0646 \u0647\u0646\u0627\u0643 \u0639\u062f\u062f \u0627\u0643\u0628\u0631 \u0645\u0646 \u0627\u0644\u0637\u0644\u0627\u0628 \u0627\u0644\u0645\u0635\u0631\u064a\u064a\u0646 \u064a\u0633\u062a\u062e\u062f\u0645\u0648\u0646 \u062a\u062d\u0644\u064a\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a \u0645\u0646 \u0627\u0644\u0637\u0644\u0627\u0628 \u0628\u064a\u0646 \u0627\u0644\u0643\u063a\u0627\u0644\u064a\u064a\u0646 \u0627\u0644\u0645\u0635\u0631\u064a\u064a\u0646.\n    Moreover, we can see that there are more Egyptian students using data analysis of students among Egyptian Culture.","1bba6250":"<a id=\"2\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">\u062a\u062d\u0645\u064a\u0644 \u0627\u0644\u0628\u064a\u0627\u0646\u0627\u062a<\/p>","eb78b281":"<a id=\"2\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">\u0627\u0644\u0627\u0644\u0648\u0627\u0646 \u0627\u0644\u0645\u0633\u062a\u062e\u062f\u0645\u0647<\/p>","c6a8fa8f":"![gdgdr](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAoHCBYWFRgVFhYZGBgZGhgcGRocGhoeHBgcGRoZGhwYGhwcIS4lHB4rHxwYJjgmKy8xNTU1HCQ7QDs0Py40NTEBDAwMEA8QHhISHzQrISs0NDQ0NDQ0NzQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0MTQ0NDQ0NDQ0NDQ0NDQ0NDE0NP\/AABEIALcBEwMBIgACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAAEAAECAwUGB\/\/EAD8QAAIBAgQCBggFAgUFAQEAAAECEQAhAwQSMUFRBSJhcYGRBhMUMkJSobEVwdHh8GKSI0NygqIWJFPC8dIH\/8QAGgEAAwEBAQEAAAAAAAAAAAAAAAECAwQFBv\/EACsRAAICAgEDAwQBBQEAAAAAAAABAhEDEiExQVEEE2EicYGx8BRikaHRUv\/aAAwDAQACEQMRAD8A88OJO9NqXl5VWRUYr6Ns4Ei8aeZqSgcGHjQ1ITSsKDlU\/wBJ8qcKfkHhNCKTViYsUCC1I4pViaDzFCjMn+EipDM8\/sD96QGjh5ZDu3lUn6OX4W86zPaB8o+32qxM9GwjxNHIB+D0aZuVjvo\/D6Pw13afp+VYp6UfnHjVRzz\/ADGlyI6pFwluAJ8T96TZ9Jktt2\/pXJNmWPE1AuTS1GdLjdLJEST3UC3SSfLWPSpqKEaj9JDgi1X7ePlXyrPilpooA1s8f4KrbNmhwKkEpgSOYPOm9eeZptFLTRYEg57aWo0gtWKKLAhqNSUmrlFSGEKAsgqUQiQKfDw60MAoBDT\/AGihugM5UrTyeXDLJB7KkekQLBAeU8KrfpV\/6VHYBScpPoHBpphA9UKD\/OdamW6Ow\/jCDv37xF65QdIv85Hd+1VtnSd2Y+JqXCT7lKS8HZYmVyNgzm2+kGT50sQ9HLwxX7iv5i1ccuZHb51YHna3j+1L2f7mPb4R3uF0h0aAP8LE\/wCR\/OlXEQ\/L70qX9NH\/ANP\/ACP3H4X+DlhljzA8auXKWJP3q1sueVSYmIrZmYDoXifCKJw8opE3iojA52q3WQNI2pMAU5aNzFVlBwq9qYJTAp0UtFXjDNP6ugCgJT6av9XThKAsH0U+miBh1IYdArBglOEosYJ5U4y55UBYJppaaMGVblTnKkb2pBYHpp9FFHDA7abTQFg2inC0Rpp9FAFarUvV1IJV+EOFAA3qqkMI0YcBqb1VqABylMTFEezHkatTo5jvAFFoYIMcip+0tWjh9EDiRROH0Yg3YDu\/ek5IDFLsar0MeBNdRl8jhcx51t5Po3BbSNXgBee2s5ZVEpRbOCw8m5+E1oYPQTtwrvEwMFTpVJI47\/SjGzaYa3ieA2+grN+ofZFrGu7OSyPoi5uVJ7K2Mv6JsI6oHl9d\/vU8x6TAWvHEAhftTL6UdXqqvaW1N+lQ5ZmUljRqp6OMAOsvmP0pVkf9WtwVP7f3pVOucrbGcE+RHzEf6lIqH4Yx2ZT\/ALh+dFJ0pjD5z4z95q9OnG+JFb\/UiH\/1rsbkcyoz\/wAFxOC0VkvRjFc+6R30fhekKD\/Iw\/7Y+1aeX9MFUQMNR3E\/nWUpZOyLSj3Zz6+jOLqICEgVqZH0UMjVAm3GRWxl\/SdDx0z2ijR0yhAKuniONZyyZfBSjHyA5f0J6ospMmSeX61If\/z4zIceVbOV6cIInEwyPrWxlulVbd08DXNLLnRrGONnMD0ATib91Dv6BCZWNzbs7K75c4nAirFzC8x9Kx\/qcyK9qB5b0r6MLhNdSVgEQJ34bViOMNSYQz\/UfyAr2zExE4lbdorH6Qwcq\/vohPMAT9K3x+rk+JJmcsK6pnkWJir8tUHNGIUAeF\/OvTsbIZMKYQX57fWszM9G5YjqqvhJ8LfrXTH1EX2Zi8bXc8\/Z3POo+rJrqcboO8gMB\/pt9SKGPRyrufP9prdZE+hFMwBlzypeorbxdI90UI61SdkgQwO0VNEUcat9XTFKYWTXET5fL9DUMTEU7W8KiVHKm00qAtTMAbjxqRzI4CqNNLTTpDLDmW4GKj7U3zGo6aYpRQDtjsfiPnUQ550tFLRRQy3DZJvPhWjl+lFT3A4PO35zWVopwtJxT6gnRot0y0yASebMfyih8XpDEbjHdQ+mnCUKCQ7JDEPEmnXFPhUQlWKlUqAnqXlSp9FKqED+uI3UipLmhxml7c\/GD4VMZud0U+EViMtTMYZ95R5UQmHl25DxFCripxTyNTU4XysKl\/kA1OisFtnHnTjoJD7r0MFwebDwp0TD4OR5\/pS58gE\/9OtwcfWm\/wCn8YbMD41LCwx8ONHjRCJifDjHzH60rfn\/AEHAN+EZldp8D+9L2fNL8\/m361pJ68bYn0FFYeNmeDqe9alyfwPj5MHXmRwf\/kaNy+QzzgFUa\/OtcZ\/NjYp\/bT\/i2f4OB\/tX9KiUpdkhqu9jYXoxndJZ3RTwXqnzMWql+is0tjiv\/sYD7Cli9IZ9t8Q+ED7UHiPm2953PnUxU+7Q249kyWL0Xi\/E7+OISaCxejkBOpx4tTPlsU+9rPfNU+zNyraP3If2KsXAT5x4aj94qtgg91fOrmy5\/gqSZJzsu9aWvJIE96iUrcwOgHbeF7yJq0+jjzEiOcj7Uvdiu4as5wpTaa6l+hMNBfWeZod8hgf1jyoWVMerOe00tNbT5PC4F\/IUNi5ZBsT4gVSmmKjO002mjDg1A4dVsANopaKJ9VVgyjnZG8jQ5DoDCUtFGnKsNxHfUTg8yKWwUC6KfTRGgc6loFOxgwSpolXBBViqvKhSFRHq\/LSq6BypUrGB+qwzzpexodmoQCpAGs7+QDF6P5MKdcg\/A\/ahlJG1WJisOJpc+R8BIyr8gaTZVuKVWmaccaITPN2UrkLgiuBzQ05wl5MKtGdPECl7QDwpbMOCkYY4MR51YmobYn1qWoH\/AO04wAdo86d+QotXExeDg+Iq9Mzj8wfEUOMix2FL2F\/lPlUtx+Aph4zONxSe4im9qxBurD\/aDQQyzjg31pwmIOLjzpVH4DkLHSDfN5qaR6Qf5kPeg\/Ohxj4g3Y+NOM0\/EA96j9KKXgLLzmsRv\/Ef9ifnS9bjxZUj+lF\/KqlzHNEPhH2qxcdOOEvgWFL8D\/JE42ZF9J\/tqrEzuY4sw7hFEZrpHAwkLsjADk5knkO2tLL5RiiFw6uQCQHaATfRJ4qIWeMTxrDJ6nHiaUl1NIYZTTaObZ3bdmPeTSGXc8DXQDD3Gl54yxkeFOMM\/I58T96295diNDFHRxjUTH50M+EAd608To\/EJnQ\/dBqeDl3X\/I1HmwaqWT5FoZiKg3DN2SAPsam2Ms9XDUd+pvua1iuNwwkH+39aiUx\/lXySlvZWplDGfhC9wA+1RbDxDbrHsvWj63FHxhe7SPsKicV+OMfNqe\/2FQCnR+KdkY+Bqw9E4vyEeVEtin\/yOT\/O2qtRPFj50bsdIq\/CX7P7hT\/hbjfT\/cKs9mc\/Cab2Nz8JNHuPyGq8EPw4\/On9wpDIR8S+dSOUcbq3kakmA3I1Sn8g18C9h7V86VXeyvypVW3yL8HOwOVOFXkatqSistx0VBF7akEHP6Veqj+CrFwJ\/wDlTuPUGGGOYqxcHtFGJlVAlj4U4jgI7v1pPL4DUF9QRwpaKJ9WDzpxgjtoWQNQcLUglXrgipnC7afuIWrKFHfVqu42Y+ZqYwajmnXDTW5AEgAcWY7KOZqXNLljUG+EXJm8QbO3nV6dJYnzT3gfpWcmK0iVs3wx1k2AJMwwmQdiLb8SwkgEXBAII2IOxFYwz4st6mmTBPHVhSdKPxCHvUVaOkgfew0PhFAjDqQw6vgz5DPasM74K+BNLFzeWRC7oVUcmueQHMmqNAUFmICgSSbAAbk1w\/THSTYz29xSdA7PmPaf2rPJNRXHX7muLG5PnobPRKnO51WKacLD64SZAVT1FJ4lm0zzAPARXdO97lY5knh964j0SyD3xtTLNhpZ1BAmQdJAI89q3cdsdA5Rw1yUD4cxbYsAGibzeBXheoybz5Z6uPHUeDTzeVXE4w0WPZax7PrahW6HxBsQe40sPPkQWw3UEwNOlgCTu09YDe8W86WNmvWNrQtAEe6wggmZJHOONb+l9XKFRk+P0YZvTp\/UlyVtkMZfm8JqJOOvxOPOpLjuNmPnVg6QxB8R869fZ\/DOCl8g7ZvF2Lse+qC7cQD4Vo\/iL8QD3gU\/tk7op8KFNrsGq8mXqHFB9f1qYZOKf8jWi2NhnfD8jFVlcE\/Cw8afueUw0+QdMXDH+X\/y\/aiUzyDbDA8aXsuEdmYUxyCcH+lS5xfWylFrpRaOkU+Q\/Spfii\/I1Ufh\/wDUKici3A0LRibkGL0qu0Hypx0inyk9sUEMs4qYw3HCrSiJuQb+IJ8n88qVUhX5fSlR9P8AGHP8Ryvqez6U4y9aPqakMGjYNQBMrVgwG4ECjRg1YMKk5DoAGA3MVMZZuQo4YNSGFUuQ0gJcE8hU1T+n60X6qpLgVDY6AwB21MIO2jBlqhmmTBRsRzCKL9s2AA4kmAB20t6HrYLmsbDwkOI5hR3Sx4Ko4k1ymWxnzOIcZx1VOnCQNCq1rkkXtaTxO1gKzuk+kMTO4wUDSskIm4Rfic82i5PcK6rI5NVUKvuxAIZjqABK8tM2uLWgzFuH1efjVM7fT4Unsya5ZygZR1wAVYETMyJLMSRq2Hd2RLJ4+k6NMJLcNrklgQTsbEGLAm0QSkYQqhJXrXhyOUQp2tBXSPdIsZFBqgAOkSJAsAWDAspkG8zF7nltfgx5JQey6nXOMZqpLg21wAQCLg3B5g8atw8rWXkM0cPVKsyA3A6xUR7y3kiNMjhtvM4XpV6Rl2bBwiyIshtwz943CRw4zfhXqY\/Uqcb7+Dzp+ncZV2K\/SbpsYn+Fhn\/DB6zfOR\/6A7c9+VYeWwS7Kg3Yx+p8qo1c66H0Tyy6jiMLXVSZiRDE22+Hes802ouTNccFaSOwyWWVFCpIVdhae4zx4+dqKOExP1PLjYUE+IALdZdrsOqe3w4RfsiKkMxsYsZjrDzM9l4gkV5D55O0t9ng+VpI3ta1XerfaL7iLG5+uwoL1j8B1GW4JJP+3S2lrFrQZ8AKkH3vJuZFpB76VByWnCIjUOAngJ5gcAeVP6kVX66BuY7Da3dsPpFPl8wQQbsDuN+\/TPL867vTercPpl0\/RzZvT7fVHr+y1MvPCuW6d6dhvVYBBMw2IPqF5xxPgKf0u9IzqbLYUqBZ2ggtInQs3CwRfj3e9gdC4GpySLAfUn9jXfkzVBtHPiw3NWdbh50qELDqkAEjy1CedjE\/vpBJEgyDWQ2CL7bcOe+\/n9allMw2He5UkalPL5l7f08a5PT+rlH6Zcr9HTn9LGXMeH+zU9XSCUTgurqGUyD5jsI4GkcOvTWRNWjznBp0ykA8zUgW51bppaaeyFqyAdudWLiNzpxh04wqeyFqywZg\/wAinpvU09HBXIH6ql6kVfTVl7hWpSMOrAlTAqQWk8g9CKpUwtOBTipeQeg2in01IGqc1mkw0Z3YKiiWJ4Dw37hvUuZagNm8wmGjYjnSiCSfyA4k7Aca8t9I+nnzL8Vw1PUTl\/U3Nj9NhzMvSTp58y4jq4aE6Fk3\/rYbao8gY5yD0TkvWvEEqvWeATKyBFue1u3faplKlbNIQ5pG96MdFnQXZSWdepa6AhoZZU3YxFjw7a6bLTpImYJ0kTIJhQ0agtg2wuYJF6hlsFbRYEgAMlgYUBWAJiIXcbERV+Hh9UtqIBUnTpsIAHWB5MG7OtFeTOezbZ3KKiqKndFPXJWJ3kaZsGNjcQ1riALG0LFxwrqZkQ5BmQCGWQQ5BsGsRwB2JBBJA1amMEEAgCLnSAx3uP6Z376HxsOH0kgQwYMEYA\/C2qGkSJE7HsgkSqYA5Z5gJ1iCRAEERIEsdSiZsAYi\/bndL5BcVSwhHUE3tAUMSrLduQtIsWvJFb+G4OkNsvEBgATEzcReLntNiDUACSD1mAMjS0qdMK2\/uC8xvI3G1VGertCatUzzt8IqxSOsDpidzMb7R213\/Q2CcBAgF7kzAZTxMxsSTxHhNBZrJJqw3aNSE7QsrLQCCZIhQeJkm\/PYTCOnqhDNwNRVR8QAHP3Z5gmR8Na5synFIiENWy5sdtLMyiVJ1XBt\/pi5sbReKdMdBcqpWRdVJ6yyJ5Tfs42qDK5O6AzE8WXkYFjE3k7VW2EQTLaeMkbR1VN9zIAHG44RXPwWPhZQgdRQ6hiw2EA8CG4QfDs2EV4g7zxmdzMcog25HtkpMLaSdMMYloJtxAHAfXvp2w7q2sCBaAT2DgJ3W1thG9HAxsN5LQIsC24AME3JPG\/gKtdb8AYkXP72k8eVUYmC1ihFiAbNDK2y3HAEx38JpaBI1EAqQFuw6pCyZsTspvex5WGkMB6b6CGOAywjqIBBlWFrNyubGREm16yugMuUB1IytJkG1oAHeN66PDwGXqm0TBDj3WJiQSDNgASLXFVvlS1+qCYglsO4vEafegAbkGCLmtPdlrrfBKjFSsHGGvHVw3+8njtVegK0XAAkc5m8cudjxq9sONxDDwgxIknb+GqHv7sd3EXuON7N+3CEzYbLZjQ+tGO8EGdLCJg38AeFdHlMyuICV3Fip3H7HnXOOrWBm\/aeR5b0sIMjalYKwtN+wkEbFTy7LXrow53DjsYZcKnz3Op00xSq8lnA8gjS43G4jmrcR9qJYV6EcikrRwSg4umQVatRKZatWrUidR9FKrJpVWwanLfiwUw6MO3cUVh51W2M9wuO8bjxrRfoMtu\/mKpHo7BEsu4iNYi9rCfPsrzFny10OtwxlS44\/gJ+gqx80iAM7BQTpGq0k8BO5oTpTNHLMqYmghz1FIYMVGkM+pZsC1yVHK+9c1l8PGfGfFxHAVwLIXlG6vUUqGQqVCnfgNpM370krlQLFGT4OxOaSCdQgbkXjyqtekcI\/wCYni6j7msQ5bSwhy6wDJ1AkAkkTp1KqyDYkGYtuS8jn8NMIJiM7ONRUhMQOwuQNWletuI7KiPqG+w5YElwzTxM\/hKhc4iaAJLagRHhvXmnpF6RPmW0r1cJT1Vm7X95xztYcKo9IOnTmW0oCMIMSgYJ6wnmzATHISe2TEZyZZ2FkbcCeE3sJ3NjauyK4tmJWJJgAkkgAcSTYAc7xXddD5MZfAJcAEHU5Y6RqBi7EQqAWHElT81c10JhhB7S9kQkLaSxKsOqDZje3aDcQSNFMy+bxUc6QiMCE0Yjh2HzlB72kDYfeawz3Ljsuv8Aw2xcc9zom6TQKISUBgsXRgywsGNeoWm5t1Rzgm+2Kw96QYJGo3BYrOtSe3svHbWMp4amAJN4xLCIi2GI2A7O7Y\/LYqhxuoUMpJ1AkW0xKAH3SLXtsa4Gl4OloOfMoVlgTqAkAq0CdxtxI2kTtO9JsZWHUcyDq90kRqDMDckSAREWLCYNXZcJAcddAYaxQLA1BmUkW90cbMeF6i2Jhq+nVoEsGGrrI0IQsREx1iJkTNwbJR8IzckUYOZRQCXgwBPzhvdNjY7R+qwAukuksPBwyzNqLgAANd1gLA+pJEAbgkmrumszhZddbudTBgqIzQ5RTACzadS9YWErPOvPWzGLmMXU4LsSeqs2lidKgG12nfnJJk1viwbfU+hMp1wup0GTxMXMMXJUPIZEkEIgPuAFgTLH3oJubQRO1g5rTKkHUQSyH3io0ddAOqReTbn8xIFyx6mG6I5IGhSqsugmWgll1oCZAMGbARMm3CxWcI4w2VidLB1KkFSTB0+7cH3jME3lhJNW+nBUXSo2nwS6g+sLX6pClomygmY0nna\/Pi2YwXVNRBdFmQYgrAsQ15kbGeI2oPo7pFkVZVlDcLgCdUsC2xmQJIFu2tBc7hnS3rB1tNoMsLSCDsY+Hh27VjyhsTYUA\/CDJUi2+oW3UKAdwCOqtvhoV8o5lSW5DTtx6wvHAnnaOyjMDpDBYAjFQj3SFYEG7LqUgmCTI3PHjak2ZwTb1qqSTpI0gyQ2nnMRNuewFLlCUgMqRplgC2oXMXkmdp4g2uAJttSXDZjGoGRPWPykXtvNxxNxA3otHQyoxEO0ww0gGSv1JHbI4g1Q+YwxierXHTVMspdCygAMLC4WOH9QHEChKx7Ipwss6\/4ZYyGJOx1rJgkiwJXrcp1d4bLYYHvEMvwiOsAZ1IRFwI5WkjYUTmcxgiA2JhKerpJdBwvEkGwBsO08xVrYI6pGnjcMBALLMGdjEx2DiKp9AUkBnLoohCWtYFpMR1Ym525+NCvbgSRyO+km1+23jWwMAQPdAAgRHVA4HrCBYeZ7IoxcrqMmFF+sGFzxkRNr37NhUqylNGPg4mtVZG6rBSJJ49x3BtHOpMjwDHaOsfDan9kZXbDw8BmWCxcEqhZtJKCRIJJN7AtI3q\/ozMFicPEyjtpuHbWmuTbqtEACOHDattH17C9xA6K6kMDBGxF\/K255fStzIdI6+qwhx5NwJAm3dQWQ6QVtQHR2IACASMQgdYEkiSNQEX0zuKXSWJgQow8PERyy9U67qQZI1cVgGLW23FXHaDM5OM+GvybQerFeuLzmJilWdMUusgEBm6skgmBcgQJjaeyqujcziOQNWIuoFQWL2cCQJC8pPjtauuM1rdnM4NOjvfWUq4XGbFDGSszf\/uWH0ZgR40qrePkNWd9nOmMLDXU0xEzDX5ARYns\/Q1596YeluI8YWGThIVBb3g51RpJK2CwCIE3DXkCO4xuhsBt158AZldJub3H3J41k9J+h2Wxj1ziKB7oRwFWYnSNJiYmuKGSKdyLa8HI9DdF6G14mIH1KoBC4rEKxaRqjqgHyvtN9rSirILnYWwmaZCgDq3WNC34Ca109GcJQo1vABHDrggCHEQbco+9P\/wBO4UOAzHUDBYzDEzJACyBa08KxnLaVtnRGUYqkZJfB4lwRH+WygkrqiI3uBPMASKq1qswrkQGJKtxO0KeJIJHfW5idBDZCAIeSSZliSIBJEAmRYbC5vM8v0AogkxaCpbWLGflvelSrgfuIynwMLFcgM+s9Yh0fquDqbQTFixBgzOkREVn5vDyqh\/X46PzA1nEAhurKvqO\/H6DbrsHonDRtXULTMwBBiJsBeLVbmOh8tiGXwMJz8zIpa3bE1pDLT+psxkl2PFjmjiBMIdVA5KgCTLQJMkCY7uNdl0XkEwUZFLkyZbQizyscTgIHbFdXh+i+TRtSYCKwMg9aRHIzK+FE4nROG26DYdYO8\/zvJp5symqj0Hjai7ZzLupgkYmqGk6VBFpizm9txax8J4uJhjYs077CNwANQ2gWvsPCtU+jyGZC3Fx12iJIiXjczsI2ok9B4cg7EBh1RpDTFyFIvYfpWFI19xGFkc0ELKqkMQFGuDpuJGkN1rT2beNWd6byuAzYbnD1CPdw3N7nrAJp+U2kEm8b11I6GwRcoZ395wJiJibWtVHs2Gw0aMJ0UmFdS8Xnd5O97RVxlFP6uhEpKXQ8f6W6SONiFiNAiFTUTpBMzcnrG0nmOUVrejeWfWSpRtIIZdZGrWOqbgAwQwIPDV216tl8LCQaVwsJRyVABfewFT9lwZ1eqQNxYIgJtFzF+HkK6Jeoi46pGSTTs4j12NpkIWR9YRlxFZANIZQ9hAMcDvAJE1A58lhGEGhAGK4qsVVmjrJrB0jrNImyi9ya7ZcrhAEBBBYseZY7kyb+XCgM30PgzrcFm0lSwRNQVpleqsldrcN5msVKJrucyxxHAnBV4Gk4i6FsVE2LFoMBoNutYkgTp5DLLjo\/+Iy6gpAQyQYOqSYv2ETYXO1bf4ckygk6V62jDnq6bXQx7o\/LYQ+Zb1Ko2l4NiFIhTFi1u07Wnwo28CcrVAxTQqB0OKR1izojtOokamAtE2A2qjpPLpMYIVVBDOAjEuGBAAJG2qNrCOyCbkelkxB1VAPBnVTIuNQK9o7OFPmc26QCiFbS2mxMbxNu6aHLnlkJMzsrkUTUS2NhAxMYjLubadIBF+BJF9qsx\/R3LOxfSH1yz404YK8dZaAWmRJv21bnekuqNSAwywSJSTYHnuY8fIVs6hOoBVcix1kMNc6hAI60rEcdPZSTb7sfIOnRuRx1CF2ZGHVDaV4QWUwIaAbiDblW1g9CKiBMLHxcMAALpeIA2GxBtXEZ7p1FxiCjPoZlBOJiMSQNB94kAkTcAce2tzoP0jBIQKwZllVc6wflGqVCkxAECeJvWjhJfYTZ0uBgvhz\/ANwTMavWMW2m41MNM9nKiXxmIgsrqY2EfTrA8\/CslmbE04mGUj4kcOrCbEEarHcRFG4DMBpICnw0mOVRu1xYOIR7aVuxsBuBy8T5RUfxFCdOu87Tfhw8qHdODMAeFwfyv5cahjKqidUWiTt9TcVPuSQaoJ\/EUuPXBSLdbq+WoAEdoqxsdSI9YtxMHSZHOCbisLP5rBVCMUAiOsFAIixgyZEmOy45TT4RyzqGVlCxCxGzb3jaO3lyFU5urdj1NlsphtIKo24PUQ70MOh8EKUCKqEyVVFUEnsU8aw83n0w8TQuorMXV0Xgeq56hF46xAsb1HpHp1EKLGtyRqw9fXWxkjT1XIK7C96cZN9g1fk2PwHC4DzU\/wD6pUJidKYSmGzCqYFiRIkAib8opUbfcNWbJcNsYNVmRv8AQ\/rQwxO2oNj1y72XoG6OOrzFVvHEeRI\/ah1x+36fkaY4h50nLwPUIULwJHlVgbk1Bes7KWvv8qW7DQIeew1SVaoDG7aXralsaiSV3HE1emM1Da+2kX7aNmGppesBENeo4bhdj53oAPS1mjeQaI0faONUviA7ihNVLVeKNpC1ReH7B9PtTnEA7O+RQ4ccx5ipoZ2pqTG4ou9YAbGp6pqjSfl+lMT2fQ09\/gWoTHGB3kD71bhne4E8Jty2O1BLim3btfekXJvBp7tC1CMTKoD7ijuEfaozAiLVR60imXFJuL916Nx6k2Cnh+Y7o28KrOGkFdIgzaLbk7d5pEty+hqsk8R9KNg1MfPejOE7tiBirMSTxEnjH78KEw+gMVHZwyMSZBBIteBB2gHnwrpIPI+RptfYeW387atZpVQaobBLAaiIb4og6uE9tomilxwBJHfF5HdxocYn841H145jzFLZhqX57LLjLpZV06laTuNLAkCVO4BHcTQuJgMmGqBywVQCTuSBc8p7hxqbZmOP840O+Jq2MzVObaoFExc9hqzq7qWKgixHWEGVM2O8QbVciJACOoPBTuOzf8qLxUPEChGyoNo3vbzmja1TL1CghHxCeO\/3ihszlkYNqRH1C+pQdQBBuYncDyqo5VwbMQTwkE9u\/fVqriiNS6hvsRO3Hal05TH9ykZRB8Edg2HdalV5xUG+odh4Uqdz8jqIY2YqJzNKlXEjekRONUfayN\/52UqVXHkTSHGcm4p\/azSpUmCSoXtff50xzHf50qVFhSEc0e36fnTe1fyOVKlTCkSXNd9SObA50qVITSHGbHaf4Kf2gdtKlR3FqiXtHfT+upUqLFSGGL2n60xxT\/D+1PSosdIb157fOpLnO0jzpUqBUh2zTfMTVbZht5p6VAUiPr251W2OeZpqVNDpCGJHGO6kuaI2m\/M0qVUmGqIvmZ\/n3+lVPmj\/AD+dlNSqrFSK3zh7x\/OfjVD58zF57CaalVorVFb5xuF+80OM8ZhuqOe48hx7aVKqXQGkOuYaOqYHZ9feHfU8POuLXJ5yLfrxpUqYUiftWL8x8l\/WlSpUgpH\/2Q==)","5971f875":"<a id=\"2\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">\u0634\u0643\u0631\u0627 \u0644\u0643\u0645 \u062c\u0645\u064a\u0639\u0627 \u0639\u0644\u0649 \u0627\u0644\u0648\u0642\u062a \u0627\u0644\u0630\u0649 \u0627\u062e\u0632\u062a\u0645\u0648\u0647 \u0644\u0644\u0642\u0631\u0627\u0621\u0647\ud83d\ude4c\ud83d\ude04\ud83d\udca5 <\/p>","8ddaa49d":"<a id=\"2\"><\/a>\n# <p style=\"background-color:#627D78;font-family:newtimeroman;color:#D5CABD;font-size:150%;text-align:center;border-radius:20px 60px;\">\u062a\u062d\u0645\u064a\u0644 \u0627\u0644\u0645\u0643\u062a\u0628\u0627\u062a <\/p>","2f8c126d":"    \u062a\u0646\u0639\u0643\u0633 \u0647\u0630\u0647 \u0627\u0644\u062d\u0642\u064a\u0642\u0629 \u0623\u064a\u0636\u0627 \u0641\u064a \u062a\u0648\u0632\u064a\u0639 \u0627\u0644\u0639\u0645\u0631 \u0627\u0644\u0630\u064a \u064a\u062f\u0644 \u0639\u0644\u0649 \u0623\u0646 \u0627\u0644\u0646\u0633\u0628\u0629 \u0627\u0644\u0645\u0626\u0648\u064a\u0629 \u0644\u0644\u0645\u062c\u0645\u0648\u0639\u0627\u062a \u0627\u0644\u062a\u064a \u062a\u0642\u0644 \u0639\u0646\u0642\u0637 \u0662\u0666  \u0639\u0627\u0645\u0627 \u0623\u0642\u0644 \u0641\u064a \u0645\u0635\u0631 \u0645\u0645\u0627 \u0643\u0627\u0646\u062a \u0639\u0644\u064a\u0647 \u0641\u064a \u0628\u0642\u064a\u0629 \u0627\u0644\u0639\u0627\u0644\u0645.\n            This fact is also reflected in the distribution of age indicating that the percentage of 26 years of age is less in Egypt than in the rest of the world.","eeae2a9f":"    In this place, we have seen that the countries where the majority of the population speaks English only took 10 minutes and 5 seconds. Other non-native English speaking nations took about 11 minutes.","2a9261f4":"\n![fh](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAARMAAAC3CAMAAAAGjUrGAAAAnFBMVEUAAADOESb\/\/\/\/NABS8jAC+jwDAkwC6iAC8iwC\/kQDu48m7iQDRsmXTtm3j0KL9\/Pfp2rjk0qfl1Kz28OHx6NH7+PDs4MPhzJnYvoDy6tb49Onj0ajp27rdxpD+\/fXm1rDNqlDWunbcxYrGni\/38t+3gQDLpkTKpD7eyJru48TZwH7GnSfRsVrEmhnVuGvQr1Lbw5DZwHnKpTjFmwBMfBY0AAAHPklEQVR4nO2b23KrOBZA0xoJgQziIpAQgQhD2o5j41z6\/\/+thZ2ck44e5mFqersqe7lSFpdKba\/SZQuJuz+Q79xBB3CDoJMQdBKCTkLQSQg6CUEnIegkBJ2EoJMQdBKCTkLQSQg6CUEnIegkBJ2EoJMQdBKCTkLQSQg6CUEnIegkBJ2EoJMQdBKCTkLQSQg6CUEnIegkBJ2EoJMQdBKCTkLQSQg6CUEnIegkBJ2EoJMQdBKCTkLQSQg6CUEnIegkBJ2EoJMQdBKCTkLQSQg6CUEnIegkBJ2EoJMQdBJy9x\/kO3cE+c5NOMmFaqRuoMP45CacbHXLY8b3CjqQK7fgRJ3jts62Zb+FjuTKLTghNp9H4puOqqEjuXATTryV9tJuHHQcF27ESaMvXxVwGFduxEknLl\/o5Au1qg+2QSdfKXNduRKdfEXWqigqUkLHcQHKiTCy\/J2idbrqaqfz305UKaWACIyAOSktWb3oj0PjK0rntRT59Vib1YcFqjYwTvKPREQNlyxN6U5URBJ5HZLr4aMGuRwkOhgnWrWP15I1sreGTGtVWT+2l8ZeLz22Cqb1wDgpGH+cPw\/yszGlkVqa+jxND5+n50fOCpDogJxQ+siXz5aR+x7V9y5rlvLrjvzIHyn9SU7uGVV003yd8qnp65OCutn4O9j9vx3YBRgnT4wpGpPfv1mUUsjyl6N7RmKqGHsCiQ7GycAiSylhu6ZQSriiLOuc5HVZOlcrVTS7i5OIDSDRwThp2VJTRjYn9Wc7DdOOppfTKRuHaWj\/VOOGJLReWAsSHZSTWdCI8FTx+4ixJMkup9MkYeyve65STiIqjj\/KyZbtNV0eeFZvpvcoij6dMF9+bzd1xvOF6j2DeRgJ4yRlu57uG97qOE2TfzhJsjTWLW9mqncsBYkOxsnIxp6OHX8t6HFg\/3DCzEL7V97taO\/vAokOxsmepferkycXn+V3J+fYPfFupFXK9iDRwTiZWWboSXFZbZz81nak8+e4OtGnjM3\/5f\/8f4Bx4keUgWY1L5+4NmPyxUkyGs1lyeuMDi07gkQH42Rhry1tNXcDt7NhX5wwM1s+OK799Ve2gEQH48T\/9Ja+9rxvuY3kl7aT+CPLW3\/llbZeFkh0IE7yhMmMmoKLLVfRPLBfTthwjBTfCl480UyyBOShEowTxqqRynvfa\/AuNi5in3lsVJm445nl1RM9lYz9ICeUFTt6b7hNecM7KTcfTjZSdv5MavlTSXcFoz\/HSRNTMdNi4mqMm4hU5eljDpiWjiTNZlR8KKifEsUge1JAnCjv5Eh9Bt\/NrNsSfTDPl\/Nbc9Ak6+h757N+evROQHakgDix3slC662f6SWPPbFT7dYfryo7WdI\/Rkvju1m6eCcWIjwQJzWlh4j6DpZEixbdsyDPXopyz0Q8d0IvEfEzZhodKAXZkALiRFAqEmrHmLC5mCRxhdWVqLQtHJFTMTMSj5Ym620Q4UE5sSxWe\/bgnfjjrNQ+eeVWl+v4453kdK9iVv8kJwWlyo8px+SBJsoPLT0pJWOsLH2JNIqxh+ToxyYFtJgB4qSivg7EZIke+NKd8q4k7uQngidHyi4\/qZk\/RAuJac0oyOYLECe+UvjmkyfHLpuqvDAl0fGSLLEgpXF5NZn6mORrn8MkRHggTgxLDtR3JokkPjE5E0ne2D7ZszdfOvs0hfS++TA\/NjEDER6Ik1cWCZo8cEnEtB7rqY9f2EvcT5d9BZMgmj8kVETsFSI8ECfTuryzHHxnUTmiDCnERLf+M4mCGEVc6VMYt6wLPBNEeCBOtuyoKVvH2VIpI8mg92ygA9vrgUhj1xV1oqJYH2EWM0CcpD4t2Vyy+Zq8NPZMTBINsYkSQ862ebnuL+iYT1RAFjNAnJzYburWQkW6kzdDDJ1NbGZqfJmcuuv+x2basxNEeCBORjr7TK2WWhLTE2OJ5OmwGVLf6VpDekP8FT\/Tyd8pyAIPiJP9um5TusPgJztyMIaUvmIsvtqUxJhB+imPOawdLdmBLPCAOLksjQ\/DIJqDcG9icq4yFfF\/zk3izYlDI\/zVX3f+24DtGc4j3432payscZ3rpRiF7H3J2EqW6ztfC8ymRwLnpDsKYiZfMIOq+0IYJwsjfEENPp9\/9lf0EeplOCAndn0iP+l6nQaTcs1U1r2gzWqhU37sWRtOzkCessHVk1NO6mSoz3W9E9KQSzvJzWUrcTc3tZsKksPstIBzomZCDtWz3g7MmcENgxG61nJo7S7bze\/biZAj1CuTYH1stiZtndV5Pt7bdvc2jX+V5+xNlDtbXYacDuyNSTAn3Zy5a0VoiC18l+pTlFySnlx6VuWyuYMKDfD9na5ox91L2pr7XmtR18LTV2ZKX3ZjW4AZuYF3mnJVexPSrMiqF7UCy0s+AXdyg9whCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg\/zN\/A4gzNYq9ECe5AAAAAElFTkSuQmCC)"}}