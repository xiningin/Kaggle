{"cell_type":{"4710c1bd":"code","c753a05d":"code","a4ad75fe":"code","d31b8b5f":"code","3e6e0e4a":"code","c8a35be9":"code","4908db10":"code","2ddfb07c":"code","abcd93dd":"code","a2de5b9f":"code","c89e9a31":"code","f6580f19":"code","4895b032":"code","ab075925":"code","7e5f0e9a":"code","9c15f4c7":"code","ffec31a2":"code","d014509c":"code","e0361dea":"code","3567644b":"code","ddac3da7":"code","d3ba76ab":"code","640e2347":"code","aee97be9":"code","0dfc74f2":"code","b41fd29c":"markdown","fdfc7a10":"markdown","2d69bd4e":"markdown","035987b1":"markdown"},"source":{"4710c1bd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c753a05d":"df = pd.read_csv('\/kaggle\/input\/stop-words-in-28-languages\/arabic.txt')\ndf","a4ad75fe":"#Codes by Ragnar https:\/\/www.kaggle.com\/rowhitswami\/starter-load-stopwords\n\ndef get_stopwords_list(stop_file_path):\n    \"\"\"load stop words \"\"\"\n    \n    with open(stop_file_path, 'r', encoding=\"utf-8\") as f:\n        stopwords = f.readlines()\n        stop_set = set(m.strip() for m in stopwords)\n        return list(frozenset(stop_set))","d31b8b5f":"stopwords_path = \"\/kaggle\/input\/stop-words-in-28-languages\/arabic.txt\"\nstopwords = get_stopwords_list(stopwords_path)","3e6e0e4a":"stopwords[0:10]","c8a35be9":"print(f\"Total number of stopwords: {len(stopwords)}\")","4908db10":"from gensim.models import Word2Vec\nimport gensim","2ddfb07c":"corpus = [' \u0641\u0647\u0648 \u064a\u062a\u062d\u062f\u0651\u062b \u0628\u0644\u063a\u0629 \u064a\u0648\u0646\u064a\u0643\u0648\u062f. \u062a\u0633\u062c\u0651\u0644 \u0627\u0644\u0622\u0646 \u0644\u062d\u0636\u0648\u0631 \u0627\u0644\u0645\u0624\u062a\u0645\u0631', '\u0627\u0644\u062f\u0648\u0644\u064a \u0627\u0644\u0639\u0627\u0634\u0631 \u0644\u064a\u0648\u0646\u064a\u0643\u0648\u062f', '\u0639\u0644\u0649 \u0627\u0644\u0634\u0628\u0643\u0629 \u0627\u0644\u0639\u0627\u0644\u0645\u064a\u0629 \u0627\u0646\u062a\u0631\u0646\u064a\u062a \u0648\u064a\u0648\u0646\u064a\u0643\u0648\u062f\u060c \u062d\u064a\u062b \u0633\u062a\u062a\u0645\u060c', '\u0639\u0644\u0649 \u062d\u062f \u0633\u0648\u0627\u0621 \u0645\u0646\u0627\u0642\u0634\u0629 \u0633\u0628\u0644 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u064a\u0648\u0646\u0643\u0648\u062f \u0641\u064a \u0627\u0644\u0646\u0638\u0645 \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0648\u0641\u064a\u0645\u0627 \u064a\u062e\u0635 \u0627\u0644\u062a\u0637\u0628\u064a\u0642\u0627\u062a']","abcd93dd":"stop_words = ['\u0627\u0630\u0627', '\u0645\u0642\u0627\u0628\u0644', '\u0639\u0634\u0631\u0629', '\u0627\u0644\u062a\u064a', '\u0628', '\u0639\u0644\u0649', '\u062b\u0645', '\u0627\u0645\u0627', '\u0627\u0644\u0633\u0627\u0628\u0642', '\u0627\u064a']","a2de5b9f":"def remove_stop_words(corpus):\n    results = []\n    for text in corpus:\n        tmp = text.split(' ')\n        for stop_word in stop_words:\n            if stop_word in tmp:\n                tmp.remove(stop_word)\n        results.append(\" \".join(tmp))\n        \n    return results","c89e9a31":"corpus = remove_stop_words(corpus)","f6580f19":"words = []\nfor text in corpus:\n    for word in text.split(' '):\n        words.append(word)\n        \nwords = set(words)","4895b032":"words","ab075925":"\"\"\"Data Generation\"\"\"\n\nword2int = {}\n\nfor i,word in enumerate(words):\n    word2int[word] = i\n    \nsentences = []\nfor sentence in corpus:\n    sentences.append(sentence.split())\n    \nWINDOW_SIZE = 2\n\ndata = []\nfor sentence in sentences:\n    for idx, word in enumerate(sentence):\n        for neighbor in sentence[max(idx - WINDOW_SIZE, 0): min(idx + WINDOW_SIZE, len(sentence) + 1)]:\n            if neighbor !=word:\n                data.append([word, neighbor])","7e5f0e9a":"for text in corpus:\n    print(text)\n\ndf = pd.DataFrame(data, columns = ['input', 'label'])","9c15f4c7":"df.head(10)","ffec31a2":"df.shape","d014509c":"word2int","e0361dea":"import tensorflow.compat.v1 as tf\ntf.disable_v2_behavior()\nx = tf.placeholder(shape=[None, 2], dtype=tf.float32)","3567644b":"\"\"\"Define Tensorflow Graph\"\"\"\n\nONE_HOT_DIM = len(words)\n\n# function to convert numbers to one hot vectors\ndef to_one_hot_encoding(data_point_index):\n    one_hot_encoding = np.zeros(ONE_HOT_DIM)\n    one_hot_encoding[data_point_index] = 1\n    return one_hot_encoding\n\nX = [] # input word\nY = [] # target word\n\nfor x, y in zip(df['input'], df['label']):\n    X.append(to_one_hot_encoding(word2int[ x ]))\n    Y.append(to_one_hot_encoding(word2int[ y ]))\n\n# convert them to numpy arrays\nX_train = np.asarray(X)\nY_train = np.asarray(Y)\n\n# making placeholders for X_train and Y_train\nx = tf.placeholder(tf.float32, shape=(None, ONE_HOT_DIM))\ny_label = tf.placeholder(tf.float32, shape=(None, ONE_HOT_DIM))\n\n# word embedding will be 2 dimension for 2d visualization\nEMBEDDING_DIM = 2 \n\n# hidden layer: which represents word vector eventually\nW1 = tf.Variable(tf.random_normal([ONE_HOT_DIM, EMBEDDING_DIM]))\nb1 = tf.Variable(tf.random_normal([1])) #bias\nhidden_layer = tf.add(tf.matmul(x,W1), b1)\n\n# output layer\nW2 = tf.Variable(tf.random_normal([EMBEDDING_DIM, ONE_HOT_DIM]))\nb2 = tf.Variable(tf.random_normal([1]))\nprediction = tf.nn.softmax(tf.add( tf.matmul(hidden_layer, W2), b2))\n\n# loss function: cross entropy\nloss = tf.reduce_mean(-tf.reduce_sum(y_label * tf.log(prediction), axis=[1]))\n\n# training operation\ntrain_op = tf.train.GradientDescentOptimizer(0.05).minimize(loss)","ddac3da7":"\"\"\"Training\"\"\"\n\nsess = tf.Session()\ninit = tf.global_variables_initializer()\nsess.run(init) \n\niteration = 20000\nfor i in range(iteration):\n    # input is X_train which is one hot encoded word\n    # label is Y_train which is one hot encoded neighbor word\n    sess.run(train_op, feed_dict={x: X_train, y_label: Y_train})\n    if i % 3000 == 0:\n        print('iteration '+str(i)+' loss is : ', sess.run(loss, feed_dict={x: X_train, y_label: Y_train}))","d3ba76ab":"# Now the hidden layer (W1 + b1) is actually the word look up table\nvectors = sess.run(W1 + b1)\nprint(vectors)","640e2347":"\"\"\"Word Vector in Table\"\"\"\n\nw2v_df = pd.DataFrame(vectors, columns = ['x1', 'x2'])\nw2v_df['word'] = words\nw2v_df = w2v_df[['word', 'x1', 'x2']]\nw2v_df","aee97be9":"\"\"\"Word Vector in 2D Chart\"\"\"\n\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\nfor word, x1, x2 in zip(w2v_df['word'], w2v_df['x1'], w2v_df['x2']):\n    ax.annotate(word, (x1,x2 ))\n    \nPADDING = 1.0\nx_axis_min = np.amin(vectors, axis=0)[0] - PADDING\ny_axis_min = np.amin(vectors, axis=0)[1] - PADDING\nx_axis_max = np.amax(vectors, axis=0)[0] + PADDING\ny_axis_max = np.amax(vectors, axis=0)[1] + PADDING\n \nplt.xlim(x_axis_min,x_axis_max)\nplt.ylim(y_axis_min,y_axis_max)\nplt.rcParams[\"figure.figsize\"] = (20,20)\n\nplt.show()","0dfc74f2":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('\u0644\u0627 \u064a\u0647\u0645 \u0643\u0645 \u0623\u0646\u062a \u0628\u0637\u064a\u0626 \u0637\u0627\u0644\u0645\u0627 \u0623\u0646\u0643 \u0644\u0646 \u062a\u062a\u0648\u0642\u0641., @mpwolke was here' )","b41fd29c":"#Text by https:\/\/r12a.github.io\/scripts\/tutorial\/summaries\/arabic","fdfc7a10":"#It does not matter how slowly you go as long as you do not stop. (Translation from above)\nhttps:\/\/www.arabicpod101.com\/arabic-vocabulary-lists\/top-10-inspirational-quotes","2d69bd4e":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcSesubVYQhCpImd2_3EXywIISSYUJPLRbWSpw&usqp=CAU)github.com","035987b1":"#Codes by Anil Govind https:\/\/www.kaggle.com\/anilreddy8989\/stopwords-word2vector"}}