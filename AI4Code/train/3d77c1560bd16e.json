{"cell_type":{"a1b2b76b":"code","dc5e5c43":"code","11fc374d":"code","731c7c39":"code","6f2ae6cf":"code","996a01a0":"code","a91eb99b":"code","7ed16899":"code","70ad53e1":"code","15b5d3fc":"code","181c74d7":"code","949108eb":"code","51d79eac":"code","2e3497ef":"code","8120fb15":"code","250f6327":"code","6586de02":"code","4fa3a3da":"code","efb22d62":"code","74b3734d":"code","0c2b8695":"code","565aea5f":"code","00e4c897":"code","d338fe75":"code","57fd85b7":"code","63ad550d":"code","b868db2c":"code","c2d5359c":"code","1f9b4ee5":"code","91f05aec":"code","a0b59de6":"code","5bad9b89":"code","09f33e7d":"code","be310473":"code","f1377c37":"code","f1035147":"code","c964b156":"code","c6e62ef6":"code","0f5b9412":"code","bac07cbc":"code","daaa3521":"code","68deeebd":"code","3bc2b5b8":"code","9322db54":"code","64451475":"code","d348476f":"code","e6b61337":"code","69287959":"code","a3dba942":"code","f99bdbca":"code","d1d064a3":"code","371ff09b":"code","7e21fb76":"code","5d0ea77d":"code","33ea0c4a":"code","2b6355e3":"markdown","84239c85":"markdown","8489d4be":"markdown","b190d9fd":"markdown","25d0251d":"markdown","b066cee5":"markdown","6ed3c74a":"markdown","cac097f5":"markdown","ea7064d9":"markdown","4fcb4d08":"markdown","55779b93":"markdown","5a29fd83":"markdown","1ccb12cf":"markdown","cee78643":"markdown","d1ed331e":"markdown","abeed84c":"markdown"},"source":{"a1b2b76b":"import numpy as np\nimport pandas as pd\nimport os\nimport plotly.graph_objects as go\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","dc5e5c43":"DATE = '15-Jun-2021'\nSHEET_LABEL = 'By County'\nGENDER_SHEET = 'By Age, Gender, Race'\nAGE_SHEET = 'By Age, Day'\ndf = pd.read_csv('\/kaggle\/input\/texas-covid19-vaccine-allocation\/weekly_allocations.csv',index_col=None)\nsheet = pd.read_excel('\/kaggle\/input\/texas-covid19-vaccine-allocation\/COVID-19 Vaccine Data by County.xlsx', sheet_name=SHEET_LABEL)\ngender = pd.read_excel('\/kaggle\/input\/texas-covid19-vaccine-allocation\/COVID-19 Vaccine Data by County.xlsx', sheet_name=GENDER_SHEET)\nage = pd.read_excel('\/kaggle\/input\/texas-covid19-vaccine-allocation\/COVID-19 Vaccine Data by County.xlsx', sheet_name=AGE_SHEET)\n\nsheet.rename(columns={\n    'County Name':'county', 'Public Health Region (PHR)':'phr',\n       'Vaccine Doses Administered':'administered',\n       'People Vaccinated with at least One Dose':'atleast_one_dose', 'People Fully Vaccinated':'fully_vaccinated',\n       'Population, 16+':'pop_16_plus', 'Population, 65+':'pop_65_plus',\n       'Population, Phase 1A Healthcare Workers':'pop_ph1a_hc_workers',\n       'Population, Phase 1A Long-term Care Residents':'pop_ph1a_ltc_residents',\n        #'Population, Phase 1B Any Medical Condition' : 'pop_ph1b_medical_conditions'#\n        'Population, 16-64\\n Any Medical Condition' : 'pop_ph1b_medical_conditions',\n        'Population, Education and Child Care Personnel' : 'pop_ph1b_edu_childcare_personnel'\n        }, inplace=True)\ngender.rename(columns= {'Gender':'gender',\n                        'Age Group':'age_grp',\n                        'Race\/Ethnicity':'race_ethnicity',\n                        'Doses Administered':'doses_administered',\n                        'People Vaccinated with at least One Dose':'atleast_one_dose',\n                        'People Fully Vaccinated':'fully_vaccinated'},\n             inplace=True)\n\nage.rename(columns= {'Age Group':'age_grp',\n                     'Vaccination Date':'vacc_date',\n                     'Doses Administered':'doses_administered'}, \n           inplace=True)\n\ndaily = sheet.copy()\ntx_color = '#bf0a30'\nprint(\"Weekly data shape {} \\n Daily data shape {} \\nGender data shape {} \\n   Age data shape {}\".format(df.shape, sheet.shape, gender.shape, age.shape))","11fc374d":"daily.head()","731c7c39":"gender.rename(columns={'Gender ':'gender'}, inplace=True)\ngender.head()","6f2ae6cf":"#gender = gender.fillna(method='ffill') # to forward fill the gender column from excel pivot\n#gender","996a01a0":"gender_df = gender.loc[gender['age_grp'] != 'Total']\ngender_df","a91eb99b":"daily.drop(daily.tail(1).index,inplace=True)","7ed16899":"daily = daily.drop(index=1).reset_index(drop=True)\ndaily = daily.drop(index=1).reset_index(drop=True)","70ad53e1":"daily.info()","15b5d3fc":"#sns.heatmap(daily.isna())\ndaily['pop_16_plus'] = daily['pop_16_plus'].fillna(0)\ndaily['pop_65_plus'] = daily['pop_65_plus'].fillna(0)\ndaily['pop_ph1a_hc_workers'] = daily['pop_ph1a_hc_workers'].fillna(0)\ndaily['pop_ph1a_ltc_residents'] = daily['pop_ph1a_ltc_residents'].fillna(0)\ndaily['pop_ph1b_medical_conditions'] = daily['pop_ph1b_medical_conditions'].fillna(0)\ndaily['pop_ph1b_edu_childcare_personnel'] = daily['pop_ph1b_edu_childcare_personnel'].fillna(0)\n#print(daily[daily['pop_65_plus'].isnull()])","181c74d7":"daily['administered'] = daily['administered'].astype(int)\ndaily['atleast_one_dose'] = daily['atleast_one_dose'].astype(int)\ndaily['fully_vaccinated'] = daily['fully_vaccinated'].astype(int)\ndaily['pop_16_plus'] = daily['pop_16_plus'].astype(int)\ndaily['pop_65_plus'] = daily['pop_65_plus'].astype(int)\ndaily['pop_ph1a_hc_workers'] = daily['pop_ph1a_hc_workers'].astype(int)\ndaily['pop_ph1a_ltc_residents'] = daily['pop_ph1a_ltc_residents'].astype(int)\ndaily['pop_ph1b_medical_conditions'] = daily['pop_ph1b_medical_conditions'].astype(int)\ndaily['pop_ph1b_edu_childcare_personnel'] = daily['pop_ph1b_edu_childcare_personnel'].astype(int)\ndaily.info()","949108eb":"daily['total_percent_vaccd'] = round((daily['administered'] \/ daily['pop_16_plus'])*100,2)\ndaily.at[0,'county'] = '<b>Texas - Total<\/b>'","51d79eac":"from plotly.subplots import make_subplots\n\ntotal_data = None\ntotal_data = {'16+':daily.at[0, 'pop_16_plus'],\n              '65+':daily.at[0, 'pop_65_plus'],\n              'Healthcare Workers':daily.at[0, 'pop_ph1a_hc_workers'],\n              'Long-term Care Residents':daily.at[0, 'pop_ph1a_ltc_residents'],              \n              'Any Medical Condition':daily.at[0, 'pop_ph1b_medical_conditions'],\n              'School and Child Care Personnel':daily.at[0, 'pop_ph1b_edu_childcare_personnel'],              \n              'Vaccine Doses Administered':daily.at[0, 'administered'],                            \n              'Vaccinated with at least One Dose':daily.at[0, 'atleast_one_dose'],              \n              'Fully Vaccinated':daily.at[0, 'fully_vaccinated']                            \n             }\n\ncols = {'16+':'pop_16_plus',\n '65+':'pop_65_plus',\n 'Healthcare Workers':'pop_ph1a_hc_workers',\n 'Long-term Care Residents':'pop_ph1a_ltc_residents',\n 'Any Medical Condition':'pop_ph1b_medical_conditions',        \n'School and Child Care Personnel':'pop_ph1b_edu_childcare_personnel',              \n 'Vaccine Doses Administered':'administered',\n 'Vaccinated with at least One Dose':'atleast_one_dose',\n 'Fully Vaccinated':'fully_vaccinated'}\n\nbar_data = []\nfor key, val in cols.items():\n    bar_data.append(\n        go.Bar(name=key, x=[key], y=[daily.at[0, val]],text=[daily.at[0, val]],\n                  textposition='outside',\n                   texttemplate='%{text:.2s}')\n    )\n\n\ntotal_df = pd.DataFrame.from_dict(total_data,orient='index', columns=['count']).reset_index()\n\n\n\nfig = go.Figure(data=bar_data)\nfig.update_layout(xaxis= { 'tickfont' : {'size':18},  \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,                           \"tickangle\" : 45\n                        }, \n                   title = { 'text' : '<b>Population vs Vaccinated - as of {}<\/b>'.format(DATE),\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  #title_font_family = 'Computer Modern',\n                 yaxis={'title':'Population','range':[0, 26000000],\"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False},\n                 font=dict(family='Computer Modern',size=15, color=\"#00040a\"),\n                 showlegend=False,\n                plot_bgcolor=\"#f5f3e9\",\n                margin={\"r\":20, \"l\":30}\n                 )\n\n\nfig.add_annotation(\n        x=2,\n        y=23000000,\n        xref=\"x\",\n        yref=\"y\",\n        text=\"Population Estimates are from <br> Texas Demographic Center\",\n        showarrow=False,\n        font=dict(\n            #family=\"Computer Modern\",\n            size=12,\n            color=\"#fafafa\"\n            ),\n        align=\"center\",\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax=20,\n        ay=-30,\n        bordercolor=\"#f58e5b\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"#eb5409\",\n        opacity=0.8\n        )\n\nfig.add_annotation(\n        x=7.5,\n        y=20500000,\n        xref=\"x\",\n        yref=\"y\",\n        text=\"Total vaccinated so far\",\n        showarrow=False,\n        font=dict(\n            #family=\"Courier New, monospace\",\n            size=12,\n            color=\"#fafafa\"\n            ),\n        align=\"center\",\n        arrowhead=2,\n        arrowsize=1,\n        arrowwidth=2,\n        arrowcolor=\"#636363\",\n        ax=20,\n        ay=-30,\n        bordercolor=\"#9cc4f0\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"#527ccc\",\n        opacity=0.8\n        )\n\niplot(fig)","2e3497ef":"tm = pd.read_excel('\/kaggle\/input\/texas-covid19-vaccine-allocation\/COVID-19 Vaccine Data by County.xlsx', sheet_name=\"By Vaccination Date\")\ntm.rename(columns={'Vaccination Date':'date',\n                   'Doses Administered':'doses_administered',\n                   'People Vaccinated with at least One Dose' : 'atleast_1_dose',\n                   'People Fully Vaccinated ' : 'fully_vaccinated'}, inplace=True)\ntm.drop(tm.tail(1).index,inplace=True)\ntm['date'] = pd.to_datetime(tm['date'])\ntm","8120fb15":"#Plot\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=tm['date'], \n                         y=tm['atleast_1_dose'],\n                         mode='lines+markers',\n                         name = 'Vaccinated with atleast one dose',\n                         line=dict(color='#bf0a30', width = 1.5,)\n                        )\n             )\n              \nfig.add_trace(go.Scatter(x=tm['date'], \n                         y=tm['fully_vaccinated'],\n                         mode='lines+markers',\n                         name = 'Fully Vaccinated',\n                         line=dict(color='#03bafc', width = 1.5, )\n                        )                            \n              \n             )\nfig.update_layout(showlegend=True,\n                   title = { 'text' : '<b>Vaccination Progress<\/b>',\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Vaccine Doses\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)","250f6327":"#Plot\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=tm['date'], \n                         y=tm['doses_administered'],\n                         mode='lines+markers',\n                         name = 'Daily doses',\n                         line=dict(color='#0003bf', width = 3.5)\n                        )\n             )\n\nfig.update_layout(showlegend=True,\n                   title = { 'text' : '<b>Daily vaccine doses<\/b>',\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Doses\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)","6586de02":"gender_age = gender_df.groupby(['gender', 'age_grp']).sum().reset_index()\ngender_age = gender_age.loc[gender_age['gender'] != 'Texas']\ngender_age","4fa3a3da":"import plotly.graph_objects as go\n\nfig = go.Figure(data=go.Heatmap(name='Gender-Age',\n                   z=gender_age['doses_administered'],\n                   x=gender_age['gender'],\n                   y=gender_age['age_grp'],\n                   hoverongaps = True,\n                   colorscale = 'agsunset_r',\n                    hovertemplate = 'Age group : %{y}<br>Gender : %{x}<br><b>Doses :%{z}<\/b>'))\nfig.update_layout(xaxis= { 'tickfont' : {'size':18},  \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,\n                                                    \"tickangle\" : 45\n                        }, \n                   title = { 'text' : '<b>Vaccinations by gender and age as of {}<\/b>'.format(DATE),\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  #title_font_family = 'Computer Modern',\n                 yaxis={'title':'Age group',\"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False},\n                 font=dict(family='Computer Modern',size=15, color=\"#00040a\"),\n                 showlegend=True,\n                plot_bgcolor=\"#f5f3e9\",\n                margin={\"r\":20, \"l\":30}\n                 )\niplot(fig)","efb22d62":"gender_race = gender_df.groupby(['gender', 'race_ethnicity']).sum().reset_index()\ngender_race = gender_race.loc[gender_race['gender'] != 'Texas']\ngender_race","74b3734d":"import plotly.graph_objects as go\n\nfig = go.Figure(data=go.Heatmap(name='Race-Gender',\n                   z=gender_race['doses_administered'],\n                   x=gender_race['gender'],\n                   y=gender_race['race_ethnicity'],\n                   hoverongaps = True,\n                   colorscale = 'agsunset_r',\n                    hovertemplate = 'Race : %{y}<br>Gender : %{x}<br><b>Doses :%{z}<\/b>'))\n\nfig.update_layout(xaxis= { 'tickfont' : {'size':18},  \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,\n                                                    \"tickangle\" : 45\n                        }, \n                   title = { 'text' : '<b>Vaccinations by gender and ethnicity as of {}<\/b>'.format(DATE),\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  #title_font_family = 'Computer Modern',\n                 yaxis={'title':'Race',\"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False},\n                 font=dict(family='Computer Modern',size=15, color=\"#00040a\"),\n                 showlegend=True,\n                plot_bgcolor=\"#f5f3e9\",\n                margin={\"r\":20, \"l\":30}\n                 )\niplot(fig)","0c2b8695":"age_race = gender_df.groupby(['age_grp', 'race_ethnicity']).sum().reset_index()\nage_race = age_race.loc[age_race['race_ethnicity'] != 'Total']\nage_race","565aea5f":"import plotly.graph_objects as go\n\nfig = go.Figure(data=go.Heatmap(name='Age-Race',\n                   z=age_race['doses_administered'],\n                   x=age_race['race_ethnicity'],\n                   y=age_race['age_grp'],\n                   hoverongaps = True,\n                   colorscale = 'agsunset_r',\n                    hovertemplate = 'Age group : %{y}<br>Race : %{x}<br><b>Doses :%{z}<\/b>'))\nfig.update_layout(xaxis= { 'title':'Race','tickfont' : {'size':18},  \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,\n                                                    \"tickangle\" : 45\n                        }, \n                   title = { 'text' : '<b>Vaccinations by age and ethnicity as of {}<\/b>'.format(DATE),\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  #title_font_family = 'Computer Modern',\n                 yaxis={'title':'Age group',\"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False},\n                 font=dict(family='Computer Modern',size=15, color=\"#00040a\"),\n                 showlegend=True,\n                plot_bgcolor=\"#f5f3e9\",\n                margin={\"r\":20, \"l\":30}\n                 )\niplot(fig)","00e4c897":"age_groups = list(age['age_grp'].unique())\nage_groups.remove('Grand Total')\nage_groups.remove('Unknown')\n\n#Plot\nfig = go.Figure()\nfor grp in age_groups:\n    age_grp_df = age.loc[age['age_grp'] == grp].reset_index(drop=True)\n    fig.add_trace(go.Scatter(x=age_grp_df['vacc_date'], \n                             y=age_grp_df['doses_administered'],\n                             mode='lines+markers',\n                             name = grp,\n                             #line=dict(color='#54e871', width = 3)\n                            )\n                 )\n\nfig.update_layout(showlegend=True,\n                   title = { 'text' : '<b>Doses administered by age - Time series<\/b>',\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Doses administered\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)","d338fe75":"#daily.head()\nrowEvenColor = 'lightgrey'\nrowOddColor = 'white'\n\ncolor = [[rowOddColor,rowEvenColor,rowOddColor,rowEvenColor]*len(daily.index)]\n\nfig = go.Figure(data=[go.Table(\n    columnwidth = [1,1,1.25,1.25,1.25],\n    header=dict(values=['<b>County<\/b>',\n                        '<b>Doses <br>Administered<\/b>', \n                        '<b>People <br>received <br>atleast one dose<\/b>', \n                        '<b>People <br>Fully <br>vaccinated<\/b>',\n                       '<b>% of population <br> received <br>atleast one dose<\/b>'],\n                fill_color=tx_color,\n                font=dict(color='white',size=12),\n                line_color='darkslategray',\n                align=['left','center']),\n    cells=dict(values=[daily['county'], \n                       daily['administered'], \n                       daily['atleast_one_dose'], \n                       daily['fully_vaccinated'],\n                       daily['total_percent_vaccd']],\n               fill_color=color,\n               line_color='darkslategray',\n               align=['left','center'],\n              font=dict(color='darkslategray',size=13)\n              )\n    )\n])\nfig.update_layout(title=dict(text='<b>Vaccine doses administered per county <br> as of {}<\/b>'.format(DATE),\n                                                   x=0.5,\n                                                   font_color='black'),\n                  margin=dict(r=20, l=20)\n                 )\n                                                \n                  \niplot(fig)","57fd85b7":"TOP_COUNT = 20\ntop_counties = daily.sort_values(['administered','total_percent_vaccd'],ascending = False).head(TOP_COUNT).reset_index()\ntop_counties.drop(daily.head(1).index,inplace=True)","63ad550d":"rowEvenColor = 'lightgrey'\nrowOddColor = 'white'\n\ncolor = [[rowOddColor,rowEvenColor,rowOddColor,rowEvenColor]*len(daily.index)]\n\nfig = go.Figure(data=[go.Table(\n    columnwidth = [1,1,1.25,1.25,1.25],\n    header=dict(values=['<b>County<\/b>',\n                        '<b>Doses <br>Administered<\/b>', \n                        '<b>People <br>received <br>atleast one dose<\/b>', \n                        '<b>People <br>Fully <br>vaccinated<\/b>',\n                       '<b>% of population <br> received <br>atleast one dose<\/b>'],\n                fill_color=tx_color,\n                font=dict(color='white',size=12),\n                line_color='darkslategray',\n                align=['left','center']),\n    cells=dict(values=[top_counties['county'], \n                       top_counties['administered'], \n                       top_counties['atleast_one_dose'], \n                       top_counties['fully_vaccinated'],\n                       top_counties['total_percent_vaccd']],\n               fill_color=color,\n               line_color='darkslategray',\n               align=['left','center'],\n              font=dict(color='darkslategray',size=13)\n              )\n    )\n])\nfig.update_layout(title=dict(text='<b>Top {} counties with most administered doses <br> as of {}<\/b>'.format(TOP_COUNT,DATE),\n                                                   x=0.5,\n                                                   font_color='black'),\n                  margin=dict(r=20, l=20)\n                 )\n                                                \n                  \niplot(fig)","b868db2c":"\nfig = go.Figure([go.Bar(x=top_counties['county'], \n                        y=top_counties['administered'],\n                        text = top_counties['administered'],\n                       textposition='outside',\n                       texttemplate='%{text:.2s}')])\n\nfig.update_layout(showlegend=False,\n                   title = { 'text' : '<b>Top {} counties with most administered doses <br>as of {}<\/b>'.format(TOP_COUNT,DATE),\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Total doses administered\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,\n                           \"tickangle\" : 45\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\nfig.show()","c2d5359c":"top_counties = daily.sort_values(['total_percent_vaccd'],ascending = False).head(TOP_COUNT).reset_index()\ntop_counties.drop(daily.head(1).index,inplace=True)\n\nfig = go.Figure([go.Bar(x=top_counties['county'], \n                        y=top_counties['total_percent_vaccd'],\n                        text = top_counties['total_percent_vaccd'],\n                       textposition='outside',\n                       texttemplate='%{text:}%')])\n\nfig.update_layout(showlegend=False,\n                   title = { 'text' : '<b>Top {} counties with most % of population vaccinated <br>as of {}<\/b>'.format(TOP_COUNT,DATE),\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"% of population\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,\n                           \"tickangle\" : 45\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)","1f9b4ee5":"top_counties = daily.sort_values(['total_percent_vaccd'],ascending = True).head(TOP_COUNT).reset_index()\ntop_counties.drop(daily.head(1).index,inplace=True)\n\nfig = go.Figure([go.Bar(x=top_counties['county'], \n                        y=top_counties['total_percent_vaccd'],\n                        text = top_counties['total_percent_vaccd'],\n                       textposition='outside',\n                       texttemplate='%{text:}%')])\n\nfig.update_layout(showlegend=False,\n                   title = { 'text' : '<b>Bottom {} counties with least % of population vaccinated <br>as of {}<\/b>'.format(TOP_COUNT,DATE),\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"% of population\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,\n                           \"tickangle\" : 45\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)","91f05aec":"import plotly.figure_factory as ff\nimport numpy as np\n\ndaily = daily.loc[daily['county'] != 'Other']\n# histogram data\nhist_data = [np.log10(daily['administered']), \n             np.log10(daily['pop_65_plus']+daily['pop_ph1a_hc_workers']+daily['pop_ph1a_ltc_residents']),\n             np.log10(daily['pop_ph1b_medical_conditions']),\n             np.log10(daily['pop_16_plus']),             \n            ]\n\ngroup_labels = ['Doses administered', 'Phase Ia population to be vaccinated','Phase Ib population to be vaccinated','Total population to be vaccinated']\n\n# Create distplot with custom bin_size\nfig = ff.create_distplot(hist_data, \n                         group_labels, \n                         bin_size=.2,\n                        #curve_type='normal',\n                        colors=[tx_color,'#34a4eb', '#1317f0','#303328'],\n                        show_rug=False,\n                    )\nfig.update_layout(showlegend=True,\n                  title = { 'text' : '<b>Frequency distribution of vaccine doses vs Population<b>',\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Population in log scale\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)\n","a0b59de6":"from sklearn.linear_model import LinearRegression\ncounties = daily.copy()\ncounties.drop(counties.head(1).index,inplace=True)\nX = counties['pop_65_plus'].values.reshape(-1,1)\n\nX = counties['pop_16_plus'].values.reshape(-1,1)\nmodel = LinearRegression()\nmodel.fit(X, counties['administered'])\n\nx_range = np.linspace(X.min(), X.max(), 100)\ny_range = model.predict(x_range.reshape(-1,1))\n\nfig = go.Figure(data=go.Scatter(\n    x=counties['pop_16_plus'],\n    y=counties['administered'],\n    mode='markers',\n    marker=dict(size=counties['administered']\/18000, color = ['#2100f5']*len(counties.county)),\n    hovertemplate =\n    '<b>%{text}<\/b><br>' + \n    '<i>Population<\/i>: %{x}'+\n    '<br><b>Doses administered<\/b>: %{y}<br>',\n    text = ['{}'.format(i) for i in counties['county']],\n))\n\nfig.add_traces(go.Scatter(x=x_range, y=y_range, name='Regression Fit',marker=dict(size=2.5,\n                color='#13111f')))\n\nfig.update_layout(showlegend=False,\n                  title = { 'text' : '<b>Regression Trend - County popluation vs Doses administered<\/b>',\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Number of doses administered\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\"title\": \"County Population\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)","5bad9b89":"total = df['allocated_doses'].sum()\nweek4_federal_pharmacy = 121875 # This list does not include 121,875 Pfizer doses allocated to the federal pharmacy\/long-term care partnership.(as mentioned in dshs)\nweek5_federal_pharmacy = 121875\ntotal += week4_federal_pharmacy\ntotal += week5_federal_pharmacy\nprint(f\"{total:,} doses allocated\")","09f33e7d":"from plotly.subplots import make_subplots\nfig = make_subplots(rows=1, cols=2,\n                   specs=[[{\"type\": \"bar\"},{\"type\": \"pie\"}]],\n                    column_widths=[0.4, 0.6],\n                   subplot_titles=[\"Vaccines allocated since 12-Dec-2020 till today\", \"% of allocation\"])\n\ndf_bar = df.groupby(['vaccine_type'])['allocated_doses'].sum().to_frame().reset_index()\ndf_bar.at[2, 'allocated_doses'] = df_bar.at[2, 'allocated_doses'] + week4_federal_pharmacy\ndf_bar.at[0,'color'] = '#00040a'\ndf_bar.at[1,'color'] = '#cc34eb'\ndf_bar.at[2,'color'] = '#bf0a30'\ndf_bar.at[3,'color'] = '#03bafc'\ndf_bar.at[0,'vaccine_type'] = 'Combination (Pfizer + Moderna)'\ndf_bar.at[1,'vaccine_type'] = 'Johnson & Johnson'\ndf_bar['percent'] = 0.0\ndf_bar['percent'] = round((df_bar['allocated_doses'] \/ df_bar['allocated_doses'].sum()) * 100, 2)\n\nfig.add_trace(\n                go.Bar(name=df_bar.columns.values[0], \n                        x=df_bar['vaccine_type'], \n                        y=df_bar['allocated_doses'], \n                        text=df_bar['allocated_doses'], \n                        marker=dict(color=df_bar['color']),\n                        textposition='outside',\n                       texttemplate='%{text:.2s}'\n                      ),\n                row=1, col=1\n            )\n\n\nfig.add_trace(\n                go.Pie(labels=df_bar['vaccine_type'], \n                        values=df_bar['percent'],\n                        marker=dict(colors=df_bar['color']),                       \n                        name=\"vaccine type percent\",\n                       textinfo='label+percent',\n                       hoverinfo='label+percent',                       \n                       insidetextorientation='radial',\n                       pull=[0.05,0.05,0.05]\n                      ),\n                row=1, col=2)\n\n\n\nfig.update_layout(xaxis=dict(categoryorder='total descending',tickfont=dict(size=18)), \n                  title_font_family = 'Computer Modern',\n                 yaxis={'title':'Number of Doses','range':[0,6500000]},\n                 font=dict(family='Computer Modern',size=15, color=\"#00040a\"),\n                 showlegend=False)\n\nfig.update_layout(showlegend=False,\n                  title_font_size=20,\n                  title_font_color='black',\n                  yaxis={\"title\": \"Number of doses allocated\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,\n                         \"tickangle\" : -45\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)","be310473":"#Data\nweekly_trend = df.groupby(['week_starting'])['allocated_doses'].sum().reset_index()\nweekly = df.groupby(['week_starting','vaccine_type'])['allocated_doses'].sum().reset_index()\nmoderna = weekly.loc[weekly['vaccine_type']=='Moderna']\npfizer = weekly.loc[weekly['vaccine_type']=='Pfizer']\njohnson = weekly.loc[weekly['vaccine_type']=='Johnson']\ncombination = weekly.loc[weekly['vaccine_type']=='Combination']\n\n#Plot\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=weekly_trend['week_starting'], \n                         y=weekly_trend['allocated_doses'],\n                         mode='lines+markers',\n                         name = 'Weekly total allocation',\n                         line=dict(color='#0003bf', width = 3.5)\n                        )\n             )\n\nfig.add_trace(go.Scatter(x=moderna['week_starting'], \n                         y=moderna['allocated_doses'],\n                         mode='lines+markers',\n                         name = 'Moderna',\n                         line=dict(color='#bf0a30', width = 1.5,dash='dot')\n                        )\n             )\n              \nfig.add_trace(go.Scatter(x=pfizer['week_starting'], \n                         y=pfizer['allocated_doses'],\n                         mode='lines+markers',\n                         name = 'Pfizer',\n                         line=dict(color='#03bafc', width = 1.5, dash='dot')\n                        )                            \n              \n             )\nfig.add_trace(go.Scatter(x=combination['week_starting'], \n                         y=combination['allocated_doses'],\n                         mode='lines+markers',\n                         name = 'Combination <br> (Moderna + Pfizer)',\n                         line=dict(color='#00040a', width = 1.5, dash='dot')\n                        )                            \n              \n             )\nfig.add_trace(go.Scatter(x=johnson['week_starting'], \n                         y=johnson['allocated_doses'],\n                         mode='lines+markers',\n                         name = 'Johnson & Johnson',\n                         line=dict(color='#cc34eb', width = 1.5, dash='dot')\n                        )                            \n              \n             )\n\nfig.update_layout(showlegend=True,\n                   title = { 'text' : '<b>Weekly doses allocation trend for Texas<\/b>',\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Total doses allocated\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)","f1377c37":"#Data\ncountry = pd.read_csv('\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv',index_col=None)\nusa = country.loc[country['iso_code'] == \"USA\"]\nusa = usa[['country','iso_code','date','total_vaccinations']].reset_index(drop=True)\nusa.fillna(0)\nweekly_trend['cumulative'] = weekly_trend['allocated_doses'].cumsum()\n\n#Plot\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=usa['date'], \n                         y=np.log(usa['total_vaccinations']),\n                         mode='lines+markers',\n                         name = 'USA',\n                         line=dict(color='#0003bf', width = 3.5)\n                        )\n             )\nfig.add_trace(go.Scatter(x=weekly_trend['week_starting'], \n                         y=np.log(weekly_trend['cumulative']),\n                         mode='lines+markers',\n                         name = 'Texas',\n                         line=dict(color='#bf0a30', width = 3.5)\n                        )\n             )\nfig.update_layout(showlegend=True,\n                   title = { 'text' : '<b>Vaccination progress trend - USA vs Texas<\/b>',\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Doses in log scale\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)\n","f1035147":"#Data\n\ntop_10_counties = list(df.groupby(['county'])['allocated_doses'].sum().reset_index().sort_values('allocated_doses',ascending=False).reset_index(drop=True).head(10)['county'])\nweekly_county_trend = df.groupby(['week_starting','county'])['allocated_doses'].sum().reset_index().sort_values('allocated_doses',ascending=False).reset_index(drop=True)\n\n#Plot\nfig = go.Figure()\nfor county in top_10_counties:\n    county_trend_df = weekly_county_trend.loc[weekly_county_trend['county'] == county].sort_values('week_starting').reset_index(drop=True)\n    fig.add_trace(go.Scatter(x=county_trend_df['week_starting'], \n                             y=county_trend_df['allocated_doses'],\n                             mode='lines+markers',\n                             name = county,\n                             #line=dict(color='#54e871', width = 3)\n                            )\n                 )\n\nfig.update_layout(showlegend=True,\n                   title = { 'text' : '<b>Weekly allocation trend for top 10 counties<\/b>',\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Total doses allocated\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)","c964b156":"\ntop_10_cities = list(df.groupby(['city'])['allocated_doses'].sum().reset_index().sort_values('allocated_doses',ascending=False).reset_index(drop=True).head(10)['city'])\nweekly_city_trend = df.groupby(['week_starting','city'])['allocated_doses'].sum().reset_index().sort_values('allocated_doses',ascending=False).reset_index(drop=True)\n#Data\n\n\n#Plot\nfig = go.Figure()\nfor city in top_10_cities:\n    city_trend_df = weekly_city_trend.loc[weekly_city_trend['city'] == city].sort_values('week_starting').reset_index(drop=True)\n    fig.add_trace(go.Scatter(x=city_trend_df['week_starting'], \n                             y=city_trend_df['allocated_doses'],\n                             mode='lines+markers',\n                             name = city,\n                             #line=dict(color='#54e871', width = 3)\n                            )\n                 )\n\nfig.update_layout(showlegend=True,\n                   title = { 'text' : '<b>Weekly allocation trend for top 10 cities<\/b>',\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Total doses allocated\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)","c6e62ef6":"rowEvenColor = 'lightgrey'\nrowOddColor = 'white'\ncitywise = df.groupby(['city'])['allocated_doses'].sum().reset_index()\n\ncolor = [[rowOddColor,rowEvenColor]*len(citywise.index)]\n\nfig = go.Figure(data=[go.Table(\n    columnwidth = [1,1,1.25,1.25,1.25],\n    header=dict(values=['<b>City<\/b>',\n                        '<b>Doses Allocated<\/b>', \n                        ],\n                fill_color=tx_color,\n                font=dict(color='white',size=12),\n                line_color='darkslategray',\n                align=['left','center']),\n    cells=dict(values=[citywise['city'], \n                       citywise['allocated_doses'], \n                        ],\n               fill_color=color,\n               line_color='darkslategray',\n               align=['left','center'],\n              font=dict(color='darkslategray',size=13)\n              )\n    )\n])\nfig.update_layout(title=dict(text='<b>Cummulative weekly allocations per city <br>since 12-Dec-2020<\/b>',\n                                                   x=0.5,\n                                                   font_color='black'),\n                  margin=dict(r=20, l=20)\n                 )\n                                                \n                  \nfig.show()","0f5b9412":"pfizer = df.loc[df['vaccine_type'].isin(['Pfizer'])].groupby('county')['allocated_doses'].sum().sort_values(ascending=False).reset_index()\npfizer","bac07cbc":"#df_bar.at[0,'color'] = '#00040a'\n#df_bar.at[1,'color'] = '#bf0a30'\n#df_bar.at[2,'color'] = '#03bafc\nfig = go.Figure([go.Bar(x=pfizer['county'], \n                        y=pfizer['allocated_doses'],\n                        text = pfizer['allocated_doses'],\n                        marker=dict(color='#03bafc'),\n                       textposition='outside',\n                       texttemplate='%{text:.2s}')])\n\nfig.update_layout(showlegend=False,\n                   title = { 'text' : '<b>Counties that received Pfizer vaccine<\/b>',\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Total doses allocated\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,\n                          \"tickangle\" : 45\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)","daaa3521":"pfizer = df.loc[df['vaccine_type'].isin(['Combination'])].groupby('county')['allocated_doses'].sum().sort_values(ascending=False).reset_index()\npfizer","68deeebd":"fig = go.Figure([go.Bar(x=pfizer['county'], \n                        y=pfizer['allocated_doses'],\n                        text = pfizer['allocated_doses'],\n                        marker=dict(color='#88fc03'),\n                       textposition='outside',\n                       texttemplate='%{text:.2s}')])\n\nfig.update_layout(showlegend=False,\n                   title = { 'text' : '<b>Counties that received Pfizer + Moderna combination of doses<\/b>',\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Total doses allocated\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,\n                          \"tickangle\" : 45\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)","3bc2b5b8":"top_cities = citywise.sort_values('allocated_doses',ascending=False).head(10)\n\nfig = go.Figure([go.Bar(x=top_cities['city'], \n                        y=top_cities['allocated_doses'],\n                        text = top_cities['allocated_doses'],\n                       textposition='outside',\n                       texttemplate='%{text:.2s}')])\n\nfig.update_layout(showlegend=False,\n                   title = { 'text' : '<b>Top 10 cities with most allocated vaccine doses<\/b>',\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Total doses allocated\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,\n                          \"tickangle\" : 45\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\niplot(fig)","9322db54":"TOP_PROVIDERS = 40\nprovider_df = df.groupby(['vaccine_type','provider_name','city']).sum().reset_index()\nprovider_df = provider_df.sort_values('allocated_doses',ascending=False).head(TOP_PROVIDERS).reset_index()\n#pfizer_provider = provider_df.loc[provider_df['vaccine_type'] == 'Moderna'].sort_values('allocated_doses',ascending=False)\n#pfizer_provider.head()\nprovider_df","64451475":"print(\"Top {} provider doses {}\\nTotal doses {}\\nPercentage {}\".format(TOP_PROVIDERS,\n                                                                      provider_df['allocated_doses'].sum(),\n                                                                  df['allocated_doses'].sum(),\n                                                                  provider_df['allocated_doses'].sum()\/df['allocated_doses'].sum()*100))\n\n","d348476f":"#df.loc[(df['vaccine_type'] == 'Pfizer') & (df['city']=='Austin')]['allocated_doses'].sum()\nimport plotly.express as px\nfig = px.treemap(provider_df, \n                 path=['vaccine_type','city','provider_name'], \n                 values='allocated_doses',\n                color='allocated_doses',\n                color_continuous_scale='RdBu',\n                color_continuous_midpoint=np.mean(provider_df['allocated_doses']),\n                )\nfig.update_layout(showlegend=False,\n                   title = { 'text' : '<b>Top {} vaccine providers across Texas<\/b>'.format(TOP_PROVIDERS),\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Total doses allocated\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,\n                          \"tickangle\" : 45\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\nfig.show()","e6b61337":"provider_df = df.groupby(['vaccine_type','provider_name','city']).sum().reset_index()\nprovider_df = provider_df.sort_values('allocated_doses',ascending=False).reset_index(drop=True)\npfizer_provider = provider_df.loc[provider_df['vaccine_type'] == 'Pfizer'].sort_values('allocated_doses',ascending=False)\npfizer_provider = pfizer_provider.sort_values('allocated_doses',ascending=False).head(TOP_PROVIDERS).reset_index()\npfizer_provider","69287959":"#df.loc[(df['vaccine_type'] == 'Pfizer') & (df['city']=='Austin')]['allocated_doses'].sum()\nimport plotly.express as px\nfig = px.treemap(pfizer_provider, \n                 path=['vaccine_type','city','provider_name'], \n                 values='allocated_doses',\n                color='allocated_doses',\n                color_continuous_scale='deep',\n                color_continuous_midpoint=np.mean(pfizer_provider['allocated_doses']),\n                )\nfig.update_layout(showlegend=False,\n                   title = { 'text' : '<b>All Pfizer vaccine providers<\/b>'.format(TOP_PROVIDERS),\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Total doses allocated\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,\n                          \"tickangle\" : 45\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\nfig.show()","a3dba942":"provider_df = df.groupby(['vaccine_type','provider_name','city']).sum().reset_index()\nprovider_df = provider_df.sort_values('allocated_doses',ascending=False).reset_index(drop=True)\nmoderna_provider = provider_df.loc[provider_df['vaccine_type'] == 'Moderna'].sort_values('allocated_doses',ascending=False)\nmoderna_provider_top = moderna_provider.sort_values('allocated_doses',ascending=False).head(TOP_PROVIDERS).reset_index()\nmoderna_provider_top","f99bdbca":"#df.loc[(df['vaccine_type'] == 'Pfizer') & (df['city']=='Austin')]['allocated_doses'].sum()\nimport plotly.express as px\nfig = px.treemap(moderna_provider_top, \n                 path=['vaccine_type','city','provider_name'], \n                 values='allocated_doses',\n                color='allocated_doses',\n                color_continuous_scale='matter',\n                color_continuous_midpoint=np.average(moderna_provider_top['allocated_doses']),\n                )\nfig.update_layout(showlegend=False,\n                   title = { 'text' : '<b>Top {} Moderna vaccine providers<\/b>'.format(TOP_PROVIDERS),\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Total doses allocated\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,\n                          \"tickangle\" : 45\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\nfig.show()","d1d064a3":"provider_df = df.groupby(['vaccine_type','provider_name','city']).sum().reset_index()\nprovider_df = provider_df.sort_values('allocated_doses',ascending=False).reset_index(drop=True)\njohnson_provider = provider_df.loc[provider_df['vaccine_type'] == 'Johnson'].sort_values('allocated_doses',ascending=False)\njohnson_provider_top = johnson_provider.sort_values('allocated_doses',ascending=False).head(TOP_PROVIDERS).reset_index()\nfig = px.treemap(johnson_provider_top, \n                 path=['vaccine_type','city','provider_name'], \n                 values='allocated_doses',\n                color='allocated_doses',\n                color_continuous_scale='purp',\n                color_continuous_midpoint=np.average(johnson_provider_top['allocated_doses']),\n                )\nfig.update_layout(showlegend=False,\n                   title = { 'text' : '<b>Top {} Johnson & Johnson vaccine providers<\/b>'.format(TOP_PROVIDERS),\n                          'x':0.5,\n                        'xanchor': 'center',\n                        'yanchor': 'top'\n                        },\n                  title_font_color='black',\n                  yaxis={\"title\": \"Total doses allocated\",\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False\n                        },\n                   xaxis={\n                         \"zeroline\":False, \"showgrid\":False,\n                         \"fixedrange\": False,\n                          \"tickangle\" : 45\n                        },\n                  plot_bgcolor=\"#f5f3e9\",\n                  margin={\"r\":20, \"l\":30},\n                 )\nfig.show()","371ff09b":"import bokeh\nbokeh.sampledata.download()","7e21fb76":"from bokeh.io import show\nfrom bokeh.models import LogColorMapper, LinearColorMapper\nfrom bokeh.palettes import Viridis256 as palette\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.us_counties import data as counties\nfrom bokeh.io import output_notebook\n#from bokeh.models import ColumnDataSource, GeoJSONDataSource, LinearColorMapper, ColorBar\nfrom bokeh.models import ColorBar, BasicTicker, FixedTicker, FuncTickFormatter, PrintfTickFormatter\nfrom bokeh.transform import linear_cmap\nfrom bokeh.palettes import Spectral6\n\noutput_notebook()\npalette = tuple(reversed(palette))\n\n#mapper = linear_cmap(field_name='administered', palette=Spectral6 ,low=min(daily['administered']) ,high=max(daily['administered']))\n\ncounties = {\n    code: county for code, county in counties.items() if county[\"state\"] == \"tx\"\n}\n\ncounty_xs = [county[\"lons\"] for county in counties.values()]\ncounty_ys = [county[\"lats\"] for county in counties.values()]\n\ncounty_names = [county['name'] for county in counties.values()]\ncounty_rates = daily[daily['county'].isin(county_names)]['administered']\n#color_mapper = LogColorMapper(palette=palette)\ncolor_mapper = LinearColorMapper(palette=palette, low=min(daily['administered']), high=np.mean(daily['administered']))\n\ncolor_bar = ColorBar(color_mapper=color_mapper, major_label_text_font_size=\"10px\",\n                     ticker=BasicTicker(desired_num_ticks=15, base=10, mantissas=[1, 2,3,4,5,6,7,8]),\n                     label_standoff=6, border_line_color=None, location=(0, 0), orientation='horizontal')\n\n#color_bar = ColorBar(color_mapper=color_mapper, label_standoff=8, width=550, height=20,\n#                         location=(0,0), orientation='horizontal')\n\ndata=dict(\n    x=county_xs,\n    y=county_ys,\n    name=county_names,\n    rate=county_rates,\n)\n\nTOOLS = \"pan,wheel_zoom,reset,hover,save\"\np = figure(\n    title=\"Texas COVID-19 vaccine doses administered as of {}\".format(DATE), tools=TOOLS,\n    x_axis_location=None, y_axis_location=None,\n    tooltips=[\n        (\"Name\", \"@name\"), (\"Total doses administered\", \"@rate\"), (\"(Long, Lat)\", \"($x, $y)\")\n    ]\n    )\np.grid.grid_line_color = None\np.hover.point_policy = \"follow_mouse\"\np.title.text_font_size = '12pt'\np.title.text_font = 'Computer Modern'\n\np.patches('x', 'y', source=data,\n          fill_color={'field': 'rate', 'transform': color_mapper},\n          fill_alpha=0.7, line_color=\"white\", line_width=0.5)\np.add_layout(color_bar,'below')\n\nshow(p)","5d0ea77d":"#'pop_65_plus','pop_ph1a_hc_workers','pop_ph1a_ltc_residents','pop_ph1b_medical_conditions'\ndaily['phase1_pop'] = daily['pop_65_plus']+ daily['pop_ph1a_hc_workers']+ daily['pop_ph1a_ltc_residents']+ daily['pop_ph1b_medical_conditions']\ndaily['phase1_percent_vaccd'] = round((daily['administered'] \/ daily['phase1_pop'])*100,2)\n#daily['pop_65_plus']+ daily['pop_ph1a_hc_workers']+ daily['pop_ph1a_ltc_residents']+ daily['pop_ph1b_medical_conditions']\ndaily.head()","33ea0c4a":"from bokeh.io import show\nfrom bokeh.models import LogColorMapper, LinearColorMapper\n#from bokeh.palettes import Viridis256 as palette\nfrom bokeh.plotting import figure\nfrom bokeh.sampledata.us_counties import data as counties\nfrom bokeh.io import output_notebook\n#from bokeh.models import ColumnDataSource, GeoJSONDataSource, LinearColorMapper, ColorBar\nfrom bokeh.models import ColorBar, BasicTicker, FixedTicker, FuncTickFormatter, PrintfTickFormatter\nfrom bokeh.transform import linear_cmap\nfrom bokeh.palettes import Spectral6 as palette\n\noutput_notebook()\npalette = tuple(reversed(palette))\n\n#mapper = linear_cmap(field_name='administered', palette=Spectral6 ,low=min(daily['administered']) ,high=max(daily['administered']))\n\ncounties = {\n    code: county for code, county in counties.items() if county[\"state\"] == \"tx\"\n}\n\ncounty_xs = [county[\"lons\"] for county in counties.values()]\ncounty_ys = [county[\"lats\"] for county in counties.values()]\n\ncounty_names = [county['name'] for county in counties.values()]\ncounty_rates = daily[daily['county'].isin(county_names)]['phase1_percent_vaccd']\n#color_mapper = LogColorMapper(palette=palette)\ncolor_mapper = LinearColorMapper(palette=palette)\n\ncolor_bar = ColorBar(color_mapper=color_mapper, major_label_text_font_size=\"10px\",\n                     #ticker=BasicTicker(desired_num_ticks=15, base=10, mantissas=[1, 2,3,4,5,6,7,8]),\n                     label_standoff=6, border_line_color=None, location=(0, 0), orientation='horizontal')\n\n#color_bar = ColorBar(color_mapper=color_mapper, label_standoff=8, width=550, height=20,\n#                         location=(0,0), orientation='horizontal')\n\ndata=dict(\n    x=county_xs,\n    y=county_ys,\n    name=county_names,\n    rate=county_rates,\n)\n\nTOOLS = \"pan,wheel_zoom,reset,hover,save\"\np = figure(\n    title=\"Phase I - % of population received atleast one dose as of {}\".format(DATE), tools=TOOLS,\n    x_axis_location=None, y_axis_location=None,\n    tooltips=[\n        (\"Name\", \"@name\"), (\"% of population to receive atleast one dose\", \"@rate\"), (\"(Long, Lat)\", \"($x, $y)\")\n    ]\n    )\np.grid.grid_line_color = None\np.hover.point_policy = \"follow_mouse\"\np.title.text_font_size = '12pt'\np.title.text_font = 'Computer Modern'\n\np.patches('x', 'y', source=data,\n          fill_color={'field': 'rate', 'transform': color_mapper},\n          fill_alpha=0.7, line_color=\"white\", line_width=0.5)\np.add_layout(color_bar,'below')\n\nshow(p)","2b6355e3":"> I believe the counties showing more than 100% of population vaccinated indicates that people from neighboring counties traveling into nearby counties to get the vaccine.","84239c85":"### Vaccine Providers","8489d4be":"<a id='3'><\/a>\n# <div style=\"background-color:#60cff7; font-size:120%; text-align:center\">Details<\/div>\n","b190d9fd":"\n<div align=\"left\">\n    <h2>Texas Vaccine Rollout Timeline<\/h2>\n<span>\nTo date, Texas has opened up vaccine eligibility according to the following timeline:\n<ul>\n    <li> May 12, 2021: Everyone 12 years old and older\n    <li> March 29, 2021: Everyone 16 years old and older\n    <li> March 15, 2021: Phase 1C (people 50 to 64 years of age)\n    <li> March 3, 2021: Schools and licensed child care personnel\n    <li> December 29, 2020: Phase 1B (people 65+ or people 16+ with a health condition that increases risk of severe COVID\u201119 illness)\n    <li> December 14, 2020: Phase 1A (front-line healthcare workers and residents at long-term care facilities)\n<\/ul>\nTexas continues to receive doses of the Pfizer, Moderna, and Johnson & Johnson COVID-19 vaccines, and is distributing statewide to hospitals, pharmacies, local health departments, freestanding ERs, and other clinics<\/span><br>\n<div>\nSource : <a href=\"https:\/\/www.dshs.state.tx.us\/coronavirus\/immunize\/vaccine.aspx#eligible\">Texas Department of State Health Services<\/a>\n    <\/div>\n <\/div>","25d0251d":"<a id='7'><\/a>\n# <div style=\"background-color:#60cff7; font-size:120%; text-align:center\">Vaccine types and providers<\/div>","b066cee5":"> Thanks for going through the notebook. I welcome any comments\/feedback to improve further. ","6ed3c74a":"<a id='1'><\/a>\n# <div style=\"background-color:#60cff7; font-size:120%; text-align:center\">Summary<\/div>\n","cac097f5":"<a id='2'><\/a>\n# <div style=\"background-color:#60cff7; font-size:120%; text-align:center\">Demographic analysis<\/div>","ea7064d9":"<a id='4'><\/a>\n# <div style=\"background-color:#60cff7; font-size:120%; text-align:center\">Vaccine distribution vs population<\/div>\n\nThe following plots show that the vaccine distribution is proportional to the population across counties","4fcb4d08":"<a id='8'><\/a>\n# <div style=\"background-color:#60cff7; font-size:120%; text-align:center\">Texas choropleth maps<\/div>","55779b93":"## Type of vaccine allocated\n\nVaccines are allocated in batches from producers (Moderna, Pfizer). Some providers are allocated with combination of Moderna and Pfizer so exact count of those allocations are not reported.","5a29fd83":"<a id='6'><\/a>\n# <div style=\"background-color:#60cff7; font-size:120%; text-align:center\">Weekly trend<\/div>\n\n> Let's look at the weekly vaccine progress in Texas and plot the trendline to look at how Texas is progressing vs rest of USA","1ccb12cf":"> No new allocations of Johnson & Johnson vaccines since the week of 12-Apr-2021","cee78643":"<div align=\"center\">\n    <h2>TEXAS COVID-19 Vaccination Progress<\/h2>\n    <img src=\"https:\/\/images.unsplash.com\/photo-1513023001678-6927b70dc4a0?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1050&q=80\"  width=\"500\" height=\"200\">\n    <br><span>Photo by <a href=\"https:\/\/unsplash.com\/@accrualbowtie?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Ryan Wallace<\/a> on <a href=\"https:\/\/unsplash.com\/s\/photos\/texas-state-capitol?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash<\/a><\/span>\n\n<\/div>\n<br>\n<div align=\"left\"> \nThis notebook presents and analyzes information about COVID-19 vaccine doses allocated and administered in Texas, USA. \n<\/div><br>\n\n<div style=\"left\">As of Monday, March 29, 2021, everyone age 16 and older is now eligible to receive a COVID-19 vaccine in Texas. <a href=\"https:\/\/www.dshs.state.tx.us\/coronavirus\/immunize\/vaccine.aspx#eligible\"> Source <\/a><\/div><br>\n\n<div style=\"left\">The COVID-19 vaccine supply has increased to the point that Texas DSHS will no longer allocate vaccine to providers each week. As of May 10, providers can order vaccine from DSHS on a daily basis. The weekly allocations in this data set reflect allocations that were made between Dec. 14, 2020 \u2013 May 3,2021.\n<a href=\"https:\/\/www.dshs.state.tx.us\/coronavirus\/immunize\/vaccineallocations.aspx\"> Source <\/a><\/div><br>\n\n\n<div style=\"background-color:#60cff7; font-size:120%;  font-family:sans-serif; text-align:center\"><b>Table of Content<\/b><\/div>\n\n* [Summary \ud83d\udcca](#1)\n* [Demographic analysis](#2)\n* [Details](#3)\n* [Vaccine distribution vs population](#4)\n* [Vaccine Doses Allocated](#5)\n* [Weekly trend](#6)\n* [Vaccine types and providers](#7)\n* [Texas choropleth maps](#8) ","d1ed331e":"<a id='5'><\/a>\n# <div style=\"background-color:#60cff7; font-size:120%; text-align:center\">Vaccine Doses Allocated<\/div>\nThis section presents the allocated vaccine doses across counties based on the weekly report. So far there are 11 weekly reports published by Texas Department of State Health Services starting from 12-Dec-2020","abeed84c":"> Other counties received only Moderna vaccine doses. "}}