{"cell_type":{"787eb870":"code","3b3d5fef":"code","f85a0977":"code","b5c4b057":"code","87fdd2fa":"code","2dcd7a29":"code","37483998":"code","0e181951":"code","366e6637":"code","bcd12ca0":"code","13e4bc91":"code","2da0678d":"code","c9624ca6":"code","e7e60488":"code","3e64d5dd":"code","dd2d9770":"code","1c55cbda":"code","46c6ff33":"code","5d3bd352":"code","08abfd6a":"code","d548f2e6":"code","16ae1da4":"code","36791122":"code","7f38ce71":"code","fb354559":"code","9060f13b":"code","dba62731":"code","6ffb9e88":"code","2e1ae350":"code","623531c3":"code","0c1f1d88":"code","e3a52241":"markdown","7d4869a9":"markdown","c8b3440a":"markdown","706d091c":"markdown","3f57279a":"markdown"},"source":{"787eb870":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3b3d5fef":"data = pd.read_csv(\"\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv\")\ndata.head()","f85a0977":"batsman = data[[\"id\",\"batsman\", \"batsman_runs\",\"non_boundary\", \"is_wicket\"]]","b5c4b057":"matches = batsman.groupby([\"id\",\"batsman\"]).size().reset_index()\nmatches = matches[[\"id\",\"batsman\"]]\nnumber_of_matches = pd.DataFrame(matches[\"batsman\"].value_counts())\nnumber_of_matches.columns=['matches']","87fdd2fa":"total_runs = pd.DataFrame(batsman.groupby('batsman')['batsman_runs'].sum())\ntotal_runs.columns=['runs']","2dcd7a29":"u_batsman = pd.merge(number_of_matches, total_runs, left_index=True, right_index=True)\nu_batsman[\"runperatch\"] = u_batsman[\"runs\"]\/u_batsman[\"matches\"] ","37483998":"fielder = data[\"fielder\"]\nfielder.dropna()\ncatches = pd.DataFrame(fielder.value_counts())","0e181951":"player = pd.merge(u_batsman, catches, left_index=True, right_index=True)\nplayer.columns = ['n_match','t_runs','per_match_runs','catches']\nplayer[\"catchespermatch\"] = player[\"catches\"]\/player[\"n_match\"]\nplayer.columns = ['n_match','t_runs','per_match_runs','catches','per_match_catches']","366e6637":"bowler = data[[\"id\",\"bowler\", \"is_wicket\"]]","bcd12ca0":"matches = bowler.groupby([\"id\",\"bowler\"]).size().reset_index()\nmatches = matches[[\"id\",\"bowler\"]]\nnumber_of_matches = pd.DataFrame(matches[\"bowler\"].value_counts())\nnumber_of_matches.columns=['matches']","13e4bc91":"total_wickets = pd.DataFrame(bowler.groupby('bowler')['is_wicket'].sum())\ntotal_wickets.columns=['wickets']","2da0678d":"u_bowler = pd.merge(number_of_matches, total_wickets, left_index=True, right_index=True)\nu_bowler[\"wicketspermatch\"] = u_bowler[\"wickets\"]\/u_batsman[\"matches\"] \nu_bowler = u_bowler[[\"wickets\", \"wicketspermatch\"]]","c9624ca6":"#scoring - (score per run =1), (score per catch = 8), (score per wicket = 25)\nplayer = pd.merge(player, u_bowler, left_index=True, right_index=True)\nbatsman = player.index\nplayer[\"score\"]= player[\"t_runs\"] + player[\"catches\"]*8 + player[\"wickets\"]*25\nplayer = player[player['n_match']>=3]","e7e60488":"player = player.sort_values(by=['score','n_match'], ascending= False)","3e64d5dd":"print(\"Fantasy Team of top 11 players - IPL 2008-2020\")\nplayer.head(11)","dd2d9770":"data = pd.read_csv(\"\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Matches 2008-2020.csv\")\nu_data = pd.DataFrame()\nfor date in data['date']:\n    if date.split('-')[0] == '2020':\n        u_data = u_data.append(data[data['date']==date])\nmatch_id = u_data['id']\nmatch_id = match_id.reset_index()\nmatch_id = match_id['id']\nmatch_id = list(match_id)","1c55cbda":"data = pd.read_csv(\"\/kaggle\/input\/ipl-complete-dataset-20082020\/IPL Ball-by-Ball 2008-2020.csv\")\nu_data = pd.DataFrame()\n# data[data['id'] in match_id]\nl = len(data)\nfor id in match_id:\n    u_data = u_data.append(data[data['id'] == id])\ndata = u_data","46c6ff33":"batsman = data[[\"id\",\"batsman\", \"batsman_runs\",\"non_boundary\", \"is_wicket\"]]","5d3bd352":"matches = batsman.groupby([\"id\",\"batsman\"]).size().reset_index()\nmatches = matches[[\"id\",\"batsman\"]]\nnumber_of_matches = pd.DataFrame(matches[\"batsman\"].value_counts())\nnumber_of_matches.columns=['matches']","08abfd6a":"total_runs = pd.DataFrame(batsman.groupby('batsman')['batsman_runs'].sum())\ntotal_runs.columns=['runs']","d548f2e6":"u_batsman = pd.merge(number_of_matches, total_runs, left_index=True, right_index=True)\nu_batsman[\"runperatch\"] = u_batsman[\"runs\"]\/u_batsman[\"matches\"] ","16ae1da4":"fielder = data[\"fielder\"]\nfielder.dropna()\ncatches = pd.DataFrame(fielder.value_counts())","36791122":"player = pd.merge(u_batsman, catches, left_index=True, right_index=True)\nplayer.columns = ['n_match','t_runs','per_match_runs','catches']\nplayer[\"catchespermatch\"] = player[\"catches\"]\/player[\"n_match\"]\nplayer.columns = ['n_match','t_runs','per_match_runs','catches','per_match_catches']","7f38ce71":"bowler = data[[\"id\",\"bowler\", \"is_wicket\"]]","fb354559":"matches = bowler.groupby([\"id\",\"bowler\"]).size().reset_index()\nmatches = matches[[\"id\",\"bowler\"]]\nnumber_of_matches = pd.DataFrame(matches[\"bowler\"].value_counts())\nnumber_of_matches.columns=['matches']","9060f13b":"total_wickets = pd.DataFrame(bowler.groupby('bowler')['is_wicket'].sum())\ntotal_wickets.columns=['wickets']","dba62731":"total_wickets = pd.DataFrame(bowler.groupby('bowler')['is_wicket'].sum())\ntotal_wickets.columns=['wickets']","6ffb9e88":"u_bowler = pd.merge(number_of_matches, total_wickets, left_index=True, right_index=True)\nu_bowler[\"wicketspermatch\"] = u_bowler[\"wickets\"]\/u_batsman[\"matches\"] \nu_bowler = u_bowler[[\"wickets\", \"wicketspermatch\"]]","2e1ae350":"#scoring - (score per run =1), (score per catch = 8), (score per wicket = 25)\nplayer = pd.merge(player, u_bowler, left_index=True, right_index=True)\nbatsman = player.index\nplayer[\"score\"]= player[\"t_runs\"] + player[\"catches\"]*8 + player[\"wickets\"]*25\nplayer = player[player['n_match']>=3]","623531c3":"player = player.sort_values(by=['score','n_match'], ascending= False)","0c1f1d88":"print(\"Fantasy Team of top 11 players - IPL 2020\")\nplayer.head(11)","e3a52241":"**FANTASY TEAM BASED ON ALL MATCHES FROM 2008-2020**","7d4869a9":"2. Process data to create a fantasy team","c8b3440a":"**LOAD DATASET**","706d091c":"**FANTASY TEAM BASED ON MATCHES OF 2020**","3f57279a":"1. Extract Data only of the year 2020"}}