{"cell_type":{"7067fbf3":"code","4a8901dc":"code","0b69369f":"code","60b8b3db":"code","36abf290":"code","ebe0cdc2":"code","1aa2a2e5":"code","f157eaac":"code","1f6e165c":"code","33466dea":"code","c2873d31":"code","89f1aac0":"code","3b2baea6":"code","90407821":"code","b709145d":"code","fbc54034":"code","7bc58d21":"code","2691347a":"code","35386a21":"code","06c80f60":"code","affabf6b":"code","9eecb3b5":"code","5b40cd93":"code","a54cd654":"code","3ef0f86b":"code","4b1c18af":"code","7c66b027":"code","99aad574":"code","b2ab4b20":"code","73656ba9":"code","81ac4bc6":"code","90159386":"code","ece2e21b":"code","b2f5e39c":"code","8214f587":"code","72d17a94":"code","34bd36d3":"code","bd7140de":"code","a3f48d1a":"code","7ca1873e":"code","57760739":"code","df3adaea":"code","070bc936":"code","41215d61":"markdown","0cdd24cf":"markdown","ef0ab6ae":"markdown"},"source":{"7067fbf3":"# data analysis libraries:\nimport numpy as np\nimport pandas as pd\n\n# data visualization libraries:\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\n# to ignore warnings:\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# to display all columns:\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier \nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nimport numpy as np, pandas as pd, os, gc\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.metrics import roc_auc_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport seaborn as sns\nimport lightgbm as lgb\nimport gc\nfrom time import time\nimport datetime\nfrom tqdm import tqdm_notebook\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold, TimeSeriesSplit\nfrom sklearn.metrics import roc_auc_score\nwarnings.simplefilter('ignore')\nsns.set()\n%matplotlib inline\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np,gc # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\npd.set_option('display.max_columns', 500)\nimport numpy as np\nimport pandas as pd \nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nimport seaborn as sns\nfrom sklearn.preprocessing import scale \nfrom sklearn.model_selection import train_test_split, GridSearchCV, cross_val_score\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import roc_auc_score,roc_curve\nimport statsmodels.formula.api as smf\nimport matplotlib.pyplot as plt\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn import tree\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\n\nfrom warnings import filterwarnings\nfilterwarnings('ignore')\nfrom sklearn.model_selection import StratifiedKFold","4a8901dc":"# Read train and test data with pd.read_csv():\ndata = pd.read_csv(\"..\/input\/churn-modelling\/Churn_Modelling.csv\")","0b69369f":"data.head(10)","60b8b3db":"data.info()","36abf290":"data.nunique()\n","ebe0cdc2":"data.select_dtypes(include=\"object\").nunique()","1aa2a2e5":"for i in data.select_dtypes(include=\"object\"):\n    print(data.select_dtypes(include=\"object\")[i].value_counts())","f157eaac":"data['Gender']=LabelEncoder().fit_transform(data['Gender'])\ndata['Surname']=LabelEncoder().fit_transform(data['Surname'])\ndms= pd.get_dummies(data[['Geography']])\n\nndata=pd.concat([data, dms], axis=1)\nndata.head()","1f6e165c":"ndata.isnull().sum().any()","33466dea":"ndata.corrwith(data[\"Exited\"], method=\"spearman\")","c2873d31":"ndata[[\"CreditScore\",\"Age\",\"Tenure\",\"Balance\",\"NumOfProducts\",\"EstimatedSalary\"]].describe().T","89f1aac0":"bins = [0, 25, 35, 50, 65, 95, np.inf]\nmylabels = [ 'Young', 'Young_Adult','Adult', 'Senior', \"Old\", 'Death']\nndata['AgeGroup'] = pd.cut(ndata[\"Age\"], bins, labels = mylabels)\nndata[\"AgeGroup\"]=LabelEncoder().fit_transform(ndata[\"AgeGroup\"])\n\n\n\nndata.head(30)\n","3b2baea6":"# Coef.of variance\n\ncolumns=[\"CreditScore\",\n        \"Age\",\n        \"Tenure\",\n        \"Balance\",\n        \"EstimatedSalary\"]\n\nfor i in columns:\n    ndata[\"VC_\"+i]=ndata[i].std()\/ndata[i].mean()\n\nndata.head(10)","90407821":"ndata.head()","b709145d":"plt.subplots(figsize=(20,15))\nsns.heatmap(ndata.corr(), annot=True);","fbc54034":"#In the mid tenure level there is less exit.\n\ng= sns.factorplot(x = \"Tenure\", y = \"Exited\", data = ndata, kind = \"bar\", size = 7)\ng.set_ylabels(\"Churn Probability\")\nplt.show()","7bc58d21":"g= sns.factorplot(x = \"Gender\", y = \"Exited\", data = ndata, kind = \"bar\", size = 5)\ng.set_ylabels(\"Churn Probability\")\nplt.show()","2691347a":"g= sns.factorplot(x = \"AgeGroup\", y = \"Exited\", data = ndata, kind = \"bar\", size = 5)\ng.set_ylabels(\"Churn Probability\")\nplt.show()","35386a21":"sns.barplot(x=\"Exited\",y= \"Balance\", hue= 'Geography', data= ndata);","06c80f60":"sns.barplot(x=\"IsActiveMember\" ,y= \"Exited\" , hue= 'Geography',data=ndata) ;","affabf6b":"sns.barplot(x=\"NumOfProducts\" ,y=\"Exited\"  ,  hue= 'Geography', data=ndata) ;","9eecb3b5":"ndata[\"EstimatedSalary\"].describe()","5b40cd93":"bins = [0, 50607,  99041,149383,np.inf]\nmylabels = [ '1',  '2', '3',\"4\"]\nndata[\"EstimatedSalaryGroup\"] = pd.cut(ndata[\"EstimatedSalary\"], bins, labels = mylabels)\n","a54cd654":"ndata.head()","3ef0f86b":"ndata = ndata.drop([\"RowNumber\"],axis=1)\n","4b1c18af":"(sns\n .FacetGrid(ndata,\n              hue = \"Exited\",\n              height = 5,\n              xlim = (10, 99))\n .map(sns.kdeplot, \"Age\", shade= True)\n .add_legend()\n);","7c66b027":"Ktrain, Ktest = train_test_split(ndata, test_size=0.30, random_state=4)\ny_Ktest=Ktest[\"Exited\"]\nX_Ktest=Ktest.drop([\"Exited\"], axis=1)","99aad574":"Ktrain.head()","b2ab4b20":"y=Ktrain['Exited']\nX=Ktrain.drop(['Exited',\"CustomerId\",\"Surname\", 'Geography'], axis=1).astype('float64')\nX_train, X_test,y_train,y_test = train_test_split(X,y, test_size=0.30, random_state=4)\n","73656ba9":"def compML (ndata, y, algorithm):\n    \n    model=algorithm().fit(X_train, y_train)\n    y_pred=model.predict(X_test)\n    accuracy= accuracy_score(y_test, y_pred)\n    #return accuracy\n    model_name= algorithm.__name__\n    print(model_name,\": \",accuracy)","81ac4bc6":"models = [LogisticRegression,\n          KNeighborsClassifier,\n          GaussianNB,\n          SVC,\n          DecisionTreeClassifier,\n          RandomForestClassifier,\n          GradientBoostingClassifier,\n          LGBMClassifier,\n          XGBClassifier,\n          #CatBoostClassifier\n         ]","90159386":"for x in models:\n    compML(ndata,\"Exited\",x)","ece2e21b":"clf=GradientBoostingClassifier().fit(X_train, y_train)\ny_pred=clf.predict(X_test)\naccuracy_score(y_test, y_pred)\n","b2f5e39c":"#Model tuning\nclf","8214f587":"GBM_params = {\"loss\":[ 'deviance', 'exponential'],\n             \"min_samples_split\":[2,3,5],\n             \"n_estimators\":[100,200,500],\n             \"min_samples_leaf\":[1,2,5],\n             }","72d17a94":"GBM_cv_model = GridSearchCV(clf, \n                            GBM_params, \n                            cv=10, n_jobs=-1, \n                            verbose=2).fit(X_train, y_train)","34bd36d3":"GBM_cv_model.best_params_","bd7140de":"clf_tuned = GradientBoostingClassifier(min_samples_split= 2,\n                                        min_samples_leaf= 5,\n                                       learning_rate= 0.1,\n                                       max_depth= 3,\n                                       n_estimators= 100,\n                                       subsample= 1).fit(X_train, y_train)\ny_pred=clf.predict(X_test)\naccuracy_score(y_test, y_pred)","a3f48d1a":"Importance = pd.DataFrame({'Importance':clf_tuned.feature_importances_*100},\n                         index = X_train.columns)\n\nImportance.sort_values(by = 'Importance',\n                      axis = 0,\n                      ascending = True).plot(kind = 'barh',\n                                            color = '#d62728',\n                                            figsize=(10,6), \n                                            edgecolor='white')\nplt.xlabel('Variable Importance')\nplt.gca().legend_ = None","7ca1873e":"#Ktest_Exited=Ktest[\"Exited\"]\n#Ktest=Ktest.drop([\"Exited\"], axis=1)\nX_Ktest= X_Ktest.drop([\"Geography\",\"CustomerId\",\"Surname\"], axis=1).astype('float64')","57760739":"predictions= clf.predict(X_Ktest)","df3adaea":"real_test_y=pd.DataFrame(y_Ktest)\nreal_test_y[\"predictions\"]=predictions\n\nreal_test_y.loc[:,\"predictions\"]=round(real_test_y.loc[:,\"predictions\"] ).astype(int)\n\nreal_test_y.head()","070bc936":"accuracy_score(real_test_y.loc[:,\"Exited\"],real_test_y.loc[:,\"predictions\"] )","41215d61":"* Surname          : The surname of the customer\n* CreditScore      : The credit score of the customer\n* Geography        : The country of the customer(Germany\/France\/Spain)\n* Gender           : The gender of the customer (Female\/Male)\n* Age              : The age of the customer  \n* Tenure           : The customer's number of years in the in the bank \n* Balance          : The customer's account balance\n* NumOfProducts    : The number of bank products that the customer uses \n* HasCrCard        : Does the customer has a card? (0=No,1=Yes) \n* IsActiveMember   : Does the customer has an active mebership (0=No,1=Yes) \n* EstimatedSalary  : The estimated salary of the customer\n* Exited           : Churned or not? (0=No,1=Yes)","0cdd24cf":"# 1. Introduction ","ef0ab6ae":"# 2. Exploratory Data Analysis <a id = '2'><\/a><br> "}}