{"cell_type":{"cdbb94f2":"code","2abf0ed5":"code","954f79ff":"code","e5f982a1":"code","1b9a2f8f":"code","7cf52c75":"code","14ddb8cd":"code","0de7e731":"code","6e062d4b":"code","8302ac52":"code","515a7d23":"code","fa21f628":"code","a316555f":"markdown","ad2c5a03":"markdown","03acaa0c":"markdown","e1e8059a":"markdown","fd1493ac":"markdown","cc8e2fd9":"markdown","cc6558a1":"markdown","f864e555":"markdown","250972fe":"markdown","b20f37b1":"markdown","6c5bf03e":"markdown","63b4f768":"markdown","cc713ff6":"markdown","04af1673":"markdown","2165599e":"markdown","a4073535":"markdown"},"source":{"cdbb94f2":"print(\"This will take a while...\")\n#Install pre-req for OpenVINO\nprint(\"Installing Pre-Req for OpenVINO...\")\n!apt-get -qq install -y pciutils cpio sudo python3-pip > apt-get_log.txt\n!apt -qq autoremove\nprint(\"Installing OpenVINO Toolkit Official Packages...\")\n#Download the 2021.1 from Intel's Official Website\n!wget \"https:\/\/registrationcenter-download.intel.com\/akdlm\/irc_nas\/17062\/l_openvino_toolkit_p_2021.1.110.tgz\" -O l_openvino_toolkit_p_2021.1.110.tgz\npath = \"l_openvino_toolkit_p_2021.1.110.tgz\"\n## install OpenVINO with command line mode\n!tar xzf \"{path}\" && \\\n    cd l_openvino_toolkit_p_2021.1.110 && \\\n    .\/install_openvino_dependencies.sh > log_dep.txt && \\\n    sed -i 's\/decline\/accept\/g' silent.cfg && \\\n    .\/install.sh --silent silent.cfg\n\nprint(\"Finished Installing Packages...\")\n","2abf0ed5":"## install the OpenVINO Python Library \nprint(\"Installing OpenVINO Dependencies\")\n## TODO: This is a temp solution to get around the import openvino not found issue\n!pip install openvino-python > ignore_error.log 2>&1\n## install dependencies\n!\/opt\/intel\/openvino_2021\/install_dependencies\/install_openvino_dependencies.sh > log_dep2.txt 2>&1\n## install prerequisites (with Tensorflow 2.x)\n!pip install tensorflow mxnet networkx numpy protobuf onnx test-generator defusedxml > log_pre.txt 2>&1\n## link all libraries and lose ends\nprint(\"Finished Installing OpenVINO Dependencies\")\n!ldconfig","954f79ff":"#Run the Validation Demo code.\ndemo_cmd = \"\/opt\/intel\/openvino_2021\/deployment_tools\/demo\/demo_squeezenet_download_convert_run.sh\"\nimport os\nimport subprocess\nimport shutil\noutput = subprocess.check_output(demo_cmd, shell=True)\n#uncomment this to see sample output\n#print (output.decode('utf-8'))     ","e5f982a1":"import os\nimport tensorflow as tf\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\n\nimport shutil\nimport subprocess","1b9a2f8f":"print(\"Downloading the model....\")\nmodel = InceptionV3(weights='imagenet')\nmodel_fname = '.\/inceptionv3'\n\n# Save the model to path specified.\nif os.path.isdir(model_fname):\n    print(f\"{model_fname} exists already. Deleting the folder\")\n    shutil.rmtree(model_fname)\nos.mkdir(model_fname)\n\n# Save the model\nprint(\"\\nSaving the model in Tensorflow SavedModel Format ...\")\nmodel.save(model_fname)\nprint(f\"Model saved at {model_fname}\")","7cf52c75":"source_cmd= \"\/opt\/intel\/openvino_2021\/bin\/setupvars.sh\"\n\n# Setup model optimizer command ...\nir_name = \"inceptionv3\"\nir_data_type = \"FP32\"\nir_out_dir = f\"{model_fname}\/IR_models\/{ir_data_type}\"\nir_input_shape = \"[1,299,299,3]\"\n\nmo_cmd = f\"\/opt\/intel\/openvino_2021\/deployment_tools\/model_optimizer\/mo_tf.py \\\n      --saved_model_dir {model_fname} \\\n      --input_shape {ir_input_shape} \\\n      --data_type {ir_data_type} \\\n      --output_dir {ir_out_dir}  \\\n      --model_name {ir_name}\"\nprint (\"Running model optimizer to convert model to OpenVINO IR format ....\")\nprint(\"\\n--\".join(mo_cmd.split(\"--\")))\n\noutput = subprocess.check_output(source_cmd+\" && \"+mo_cmd, shell=True)\nprint (output.decode('utf-8'))     ","14ddb8cd":"#install pre-req\n!pip install pillow numpy -q\n\nfrom PIL import Image\nimport numpy as np\n\ndef pre_process_image(imagePath, img_height=299):\n    # Model input format\n    n, c, h, w = [1, 3, img_height, img_height]\n    image = Image.open(imagePath)\n    image = image.resize((h, w), resample=Image.BILINEAR)\n\n    # Normalize to keep data between 0 - 1\n    image = np.array(image) \/ 255.0\n\n    # Change data layout from HWC to CHW\n    image = image.transpose((2, 0, 1))\n    input_image = image.reshape((n, c, h, w))\n\n    return input_image","0de7e731":"inp_img_url = \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/3\/33\/GoldenRetrieverSnow.jpg\"\ninp_file_name = 'dog-image.jpg'\n\n#Download the image from wikipedia\noutput = subprocess.check_output(f\"curl {inp_img_url} --output {inp_file_name}\", shell=True)\n\n#Pre-process the image and get it ready for inference.\ninput_image = pre_process_image(inp_file_name)","6e062d4b":"from openvino.inference_engine import IECore\n\nmodel_xml = f'{ir_out_dir}\/{ir_name}.xml'\nmodel_bin = f'{ir_out_dir}\/{ir_name}.bin'\n\n# Load network to the plugin\nie = IECore()\nnet = ie.read_network(model=model_xml, weights=model_bin)\nexec_net = ie.load_network(network=net, device_name=\"CPU\")\ndel net\n\ninput_layer = next(iter(exec_net.input_info))\noutput_layer = next(iter(exec_net.outputs))\n\n# Run the Inference on the Input image...\nres = exec_net.infer(inputs={input_layer: input_image})\nres = res[output_layer]","8302ac52":"from tensorflow.keras.applications.inception_v3 import decode_predictions\n# Predicted class index.\nidx = np.argsort(res[0])[-1]\ntop3_pred = decode_predictions(res, top=3)[0]\n\nprint('Top 3 Predictions:')\nfor pred in top3_pred:\n    print(f\"{pred[1]}: {pred[2]*100 :.2f} %\")\n    \n#Display the result on screen\nfrom IPython.display import display \npred_class = top3_pred[0][1]\npred_prob = top3_pred[0][2]\nprint(f\"Prediction: {pred_class}: {pred_prob*100:.2f} %\")\ndisplay(Image.open(inp_file_name))","515a7d23":"from tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.imagenet_utils import preprocess_input, decode_predictions\n\nmodel = InceptionV3(weights='imagenet')\n\ninp_img_url = \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/3\/33\/GoldenRetrieverSnow.jpg\"\ninp_file_name = 'dog-image.jpg'\n\n#Download the image from wikipedia\noutput = subprocess.check_output(f\"curl {inp_img_url} --output {inp_file_name}\", shell=True)\n\nimg = image.load_img(inp_file_name, target_size=(299, 299))\nx = image.img_to_array(img)\nx = np.expand_dims(x, axis=0)\nx = preprocess_input(x, mode='tf')\n\npreds = model.predict(x)","fa21f628":"from tensorflow.keras.applications.inception_v3 import decode_predictions\n# Predicted class index.\nidx = np.argsort(preds[0])[-1]\ntop3_pred = decode_predictions(preds, top=3)[0]\n\nprint('Top 3 Predictions:')\nfor pred in top3_pred:\n    print(f\"{pred[1]}: {pred[2]*100 :.2f} %\")\n\nfrom IPython.display import display \npred_class = top3_pred[0][1]\npred_prob = top3_pred[0][2]\nprint(f\"Prediction: {pred_class}: {pred_prob*100:.2f} %\")\ndisplay(Image.open(inp_file_name))","a316555f":"# Install OpenVINO","ad2c5a03":"### Download, Load, and Preprocess, and Run Inference the Input Image","03acaa0c":"# OpenVINO Tensorflow Demos","e1e8059a":"### Load the OpenVINO IR network and Run the Inference","fd1493ac":"# References: \n\nIntel OpenVINO Toolkit:\n* https:\/\/software.intel.com\/content\/www\/us\/en\/develop\/tools\/openvino-toolkit\/download.html\n\nIntel DevCloud: \n* https:\/\/devcloud.intel.com\/edge\/\n","cc8e2fd9":"### Define Preprocessing Function","cc6558a1":"## Tensorflow Comparison","f864e555":"### Import the Tensorflow Library and InceptionV3","250972fe":"### Display Results","b20f37b1":"## Download and Install OpenVINO Toolkit (Direct Method)","6c5bf03e":"## Run Validation Demo","63b4f768":"### Process and Display the Results","cc713ff6":"## Image Classification (InceptionV3) ","04af1673":"### Download, Load and Pre-process the Input Image\n\n---\n\n\n","2165599e":"### Convert the Model to IR","a4073535":"### Download the InceptionV3 (imagenet) Model"}}