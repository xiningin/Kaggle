{"cell_type":{"be860a95":"code","7a733a41":"code","b5704580":"code","d23b582a":"code","887db8cf":"code","e45cda3a":"code","c0004374":"code","4da12078":"code","c5100f6f":"code","b37373c2":"code","9151a487":"code","60785720":"code","7f1be298":"code","58e84228":"code","108bbc16":"code","0861d31e":"code","726f75e0":"code","1d6bb68c":"code","82febe79":"code","e32facd4":"code","17020c93":"code","1613deb7":"code","81074de4":"code","00d1d1ae":"code","1bb773b6":"code","66c96293":"code","9c9b74be":"code","4588a738":"code","44622a7d":"code","e5909a8b":"code","9666ad41":"code","f44cce08":"code","f76e1392":"code","0c126c7e":"code","56f7930a":"code","db2008db":"code","a12e0a21":"code","6a0c1c57":"code","d1c7fa5e":"code","20c6a649":"code","99fb457f":"code","7debca1b":"code","72d77585":"code","9e2ad48a":"code","98d77bc3":"code","497767b8":"code","72254505":"code","a3416191":"code","41527d3d":"code","e14e8a77":"code","f931ac56":"code","99bafc32":"code","00ffdf4f":"code","756dbc2c":"code","f0ac54dd":"code","04dc1a6d":"code","e6797f26":"code","308c514d":"code","3d70f9c1":"code","7b3dcb36":"code","c6ae0d4d":"code","08c3d252":"code","721eccc6":"code","f76a0328":"code","1ea15e05":"code","a106048e":"code","59e904a5":"code","c78b1406":"code","e2b6cda1":"code","ee610cf2":"code","b7d497c1":"code","23608262":"code","8873eb2e":"code","c8e45905":"markdown"},"source":{"be860a95":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns","7a733a41":"data=pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')","b5704580":"data.head()","d23b582a":"data.shape","887db8cf":"data.isnull().sum()","e45cda3a":"import missingno as miss","c0004374":"miss.matrix(data)","4da12078":"data.columns","c5100f6f":"data.cat0.unique()","b37373c2":"import matplotlib.pyplot as plt\n\ndef pie_chart(col):\n    \n    rating_data = data.groupby(col)[['id']].count()\n\n    plt.figure(figsize = (12, 8))\n    plt.pie(rating_data['id'], \n            autopct = '%1.000f%%', \n            startangle = 140, \n            pctdistance = 1.1, \n            shadow = True)\n    \n    plt.axis('equal')\n\n    cols = []\n    for index, row in rating_data.iterrows():\n        cols.append(index)\n    \n    plt.legend(cols)\n    \n    plt.title('Pie Chart by ' +str(col), loc='center')\n    \n    plt.show()","9151a487":"pie_chart('cat0')","60785720":"ax = sns.barplot(\n    x = data['cat0'].value_counts().keys(), \n    y = data['cat0'].value_counts().values\n)\nax.set_xticklabels(ax.get_xticklabels(), rotation = 90)\n\nplt.title('z')\nplt.show()","7f1be298":"def bar(col):\n    ax = sns.barplot(\n    x = data[col].value_counts().keys(), \n    y = data[col].value_counts().values\n    )\n    ax.set_xticklabels(ax.get_xticklabels(), rotation = 90)\n    plt.title(col)\n    plt.show()   ","58e84228":"bar('cat1')","108bbc16":"pie_chart('cat1')","0861d31e":"cols=data.columns","726f75e0":"cols","1d6bb68c":"pie_chart('cat2')","82febe79":"pie_chart('target')","e32facd4":"data=data.apply(lambda x: pd.factorize(x)[0])","17020c93":"data","1613deb7":"data.describe()","81074de4":"col=['id', 'cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7',\n       'cat8', 'cat9', 'cat10', 'cat11', 'cat12', 'cat13', 'cat14', 'cat15',\n       'cat16', 'cat17', 'cat18', 'cont0', 'cont1', 'cont2', 'cont3', 'cont4',\n       'cont5', 'cont6', 'cont7', 'cont8', 'cont9', 'cont10']\nX=data[col]\nY=data['target']","00d1d1ae":"X.head()","1bb773b6":"Y.head()","66c96293":"import keras \nfrom sklearn.model_selection import train_test_split \nfrom keras.utils import to_categorical\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Embedding, LSTM,Dropout","9c9b74be":"def create_model():\n        model = Sequential()\n        model.add(Dense(31,input_dim=31,activation='relu'))\n        model.add(Dense(62,activation='relu'))\n        model.add(Dropout(0.4))\n        model.add(Dense(62,activation='relu'))\n        model.add(Dropout(0.4))\n        model.add(Dense(30,activation='relu'))\n        model.add(Dropout(0.4))\n        model.add(Dense(12,activation='relu'))\n        model.add(Dense(1, activation='sigmoid'))\n        model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n        return model","4588a738":"model=create_model()\nmodel.summary()","44622a7d":"train_x,test_x,train_y,test_y=train_test_split(X,Y,test_size=0.15)","e5909a8b":"hist=model.fit(train_x,train_y,epochs=10,batch_size=140)","9666ad41":"model.evaluate(test_x,test_y)","f44cce08":"y_pred=model.predict(test_x)","f76e1392":"def give_app(y_pred):\n    pred=[]\n    for i in y_pred:\n        if i>0.500000001:\n            pred.append(1)\n        else:\n            pred.append(0)\n    return np.asarray(pred)\n            ","0c126c7e":"pred=give_app(y_pred)","56f7930a":"from sklearn.metrics import roc_auc_score","db2008db":"roc_auc_score(test_y, y_pred)","a12e0a21":" pip install imbalanced-learn","6a0c1c57":"import imblearn\nprint(imblearn.__version__)","d1c7fa5e":"from imblearn.over_sampling import SMOTE","20c6a649":"oversample = SMOTE()\nX, y = oversample.fit_resample(X, Y)","99fb457f":"from collections import Counter\ncounter = Counter(y)\nprint(counter)","7debca1b":"train_x,test_x,train_y,test_y=train_test_split(X,y,test_size=0.15)","72d77585":"model2=create_model()","9e2ad48a":"hist=model2.fit(train_x,train_y,epochs=15,batch_size=128)","98d77bc3":"model2.evaluate(test_x,test_y)","497767b8":"y_pred=model.predict(test_x)\npred=give_app(y_pred)\nroc_auc_score(test_y, y_pred)","72254505":"test=pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv')\ntest2=pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/test.csv')","a3416191":"test=test.apply(lambda x: pd.factorize(x)[0])","41527d3d":"test.head()","e14e8a77":"y_pred=model2.predict(test)","f931ac56":"def app(y_pred):\n    pred=[]\n    for i in y_pred:\n        if i>0.500000001:\n            pred.append(1)\n        else:\n            pred.append(0)\n    return pred","99bafc32":"pred=app(y_pred)","00ffdf4f":"pred","756dbc2c":"submission = pd.DataFrame({'id':test2.id,'target':pred})\nsubmission.to_csv('submission.csv',index=False)","f0ac54dd":"import tensorflow as tf\nfrom keras import backend as K","04dc1a6d":"def create_model():\n        model = Sequential()\n        model.add(Dense(31,input_dim=31,activation='relu'))\n        model.add(Dense(62,activation='relu'))\n        model.add(Dense(62,activation='relu'))\n        model.add(Dense(128,input_dim=31,activation='relu'))\n        model.add(Dense(128,input_dim=31,activation='relu'))\n        model.add(Dense(256,input_dim=31,activation='relu'))\n        model.add(Dropout(0.4))\n        model.add(Dense(62,activation='relu'))\n        model.add(Dense(128,input_dim=31,activation='relu'))\n        model.add(Dense(128,input_dim=31,activation='relu'))\n        model.add(Dense(256,input_dim=31,activation='relu'))\n        model.add(Dropout(0.4))\n        model.add(Dense(30,activation='relu'))\n        model.add(Dense(62,activation='relu'))\n        model.add(Dense(128,input_dim=31,activation='relu'))\n        model.add(Dense(128,input_dim=31,activation='relu'))\n        model.add(Dense(256,input_dim=31,activation='relu'))\n        model.add(Dropout(0.4))\n        model.add(Dense(12,activation='relu'))\n        model.add(Dense(1, activation='sigmoid'))\n        model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy',tf.keras.metrics.AUC()])\n        return model","e6797f26":"model3=create_model()\nmodel3.summary()","308c514d":"hist=model3.fit(train_x,train_y,epochs=15,batch_size=130)","3d70f9c1":"col=['cat0', 'cat1', 'cat2', 'cat3', 'cat4', 'cat5', 'cat6', 'cat7',\n       'cat8', 'cat9', 'cat10', 'cat11', 'cat12', 'cat13', 'cat14', 'cat15',\n       'cat16', 'cat17', 'cat18', 'cont0', 'cont1', 'cont2', 'cont3', 'cont4',\n       'cont5', 'cont6', 'cont7', 'cont8', 'cont9', 'cont10']\nX=data[col]\nY=data['target']","7b3dcb36":"X","c6ae0d4d":"train_x,test_x,train_y,test_y=train_test_split(X,Y,test_size=0.15)","08c3d252":"def create_model2():\n        model = Sequential()\n        model.add(Dense(30,input_dim=30,activation='relu'))\n        model.add(Dense(60,activation='relu'))\n        model.add(Dense(60,activation='relu'))\n        model.add(Dense(120,activation='relu'))\n        model.add(Dense(120,activation='relu'))\n        model.add(Dense(60,activation='relu'))\n        model.add(Dense(60,activation='relu'))\n        model.add(Dense(128,activation='relu'))\n        model.add(Dense(128,activation='relu'))\n        model.add(Dense(120,activation='relu'))\n        model.add(Dense(120,activation='relu'))\n        model.add(Dense(256,activation='relu'))\n        model.add(Dropout(0.4))\n        model.add(Dense(62,activation='relu'))\n        model.add(Dense(128,activation='relu'))\n        model.add(Dense(128,activation='relu'))\n        model.add(Dense(120,activation='relu'))\n        model.add(Dense(120,activation='relu'))\n        model.add(Dense(256,activation='relu'))\n        model.add(Dropout(0.4))\n        model.add(Dense(30,activation='relu'))\n        model.add(Dense(62,activation='relu'))\n        model.add(Dense(128,activation='relu'))\n        model.add(Dense(128,activation='relu'))\n        model.add(Dense(256,activation='relu'))\n        model.add(Dropout(0.4))\n        model.add(Dense(12,activation='relu'))\n        model.add(Dense(1, activation='sigmoid'))\n        model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy',tf.keras.metrics.AUC()])\n        return model","721eccc6":"model4=create_model2()\nmodel4.summary()","f76a0328":"hist=model4.fit(train_x,train_y,epochs=15,batch_size=130)","1ea15e05":"model4.evaluate(test_x,test_y)","a106048e":"df=data[data['target']==0]","59e904a5":"df_true=data[data['target']==1]","c78b1406":"df_true","e2b6cda1":"df=df.head(79461)","ee610cf2":"df","b7d497c1":"frames = [df, df_true]\n\nresult = pd.concat(frames)","23608262":"result","8873eb2e":"data=pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')","c8e45905":"# Under Sampling"}}