{"cell_type":{"5d2ed20b":"code","8354b9cf":"code","4279086a":"code","9fe9d5c1":"code","04379865":"code","30838d5f":"code","29d760a4":"code","42560adc":"code","df9eed1a":"code","04a6304e":"code","4b4c3c03":"code","78edd7e0":"code","78f34bf8":"code","1e1fc24c":"code","80491f7c":"code","d2effa9a":"code","f01fb762":"code","65895b23":"code","894f5c9d":"markdown","873562a4":"markdown","2e6411bb":"markdown","b6b477ee":"markdown","a29212c1":"markdown","2f52d76d":"markdown","8f77f8dd":"markdown","24762ab8":"markdown","8f685582":"markdown","947660f4":"markdown","254d9c9c":"markdown","8c9f7597":"markdown","4fb964a9":"markdown"},"source":{"5d2ed20b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn import metrics\nfrom sklearn.preprocessing import normalize\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.callbacks import ModelCheckpoint\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8354b9cf":"df = pd.read_csv(\"..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")\ndf.head()","4279086a":"df['quality'].value_counts()","9fe9d5c1":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize=(25,5))\nsns.boxenplot('quality', 'fixed acidity', data=df, ax=ax1)\nsns.boxenplot('quality', 'volatile acidity', data=df, ax=ax2)\nsns.boxenplot('quality', 'citric acid', data=df, ax=ax3)\nsns.boxenplot('quality', 'residual sugar', data=df, ax=ax4)\nplt.show()","04379865":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize=(25,5))\nsns.boxenplot('quality', 'chlorides', data=df, ax=ax1)\nsns.boxenplot('quality', 'free sulfur dioxide', data=df, ax=ax2)\nsns.boxenplot('quality', 'total sulfur dioxide', data=df, ax=ax3)\nsns.boxenplot('quality', 'density', data=df, ax=ax4)\nplt.show()","30838d5f":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize=(25,5))\nsns.boxenplot('quality', 'pH', data=df, ax=ax1)\nsns.boxenplot('quality', 'sulphates', data=df, ax=ax2)\nsns.boxenplot('quality', 'alcohol', data=df, ax=ax3)\nplt.show()","29d760a4":"new_df = df\n\nnew_df['quality'] = np.where(new_df['quality']>=7, 'Nice', 'Bad')","42560adc":"new_df.head()","df9eed1a":"new_df['quality'].value_counts()","04a6304e":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize=(25,5))\n\nsns.kdeplot('fixed acidity', data=new_df, hue='quality', ax=ax1)\nsns.kdeplot('volatile acidity', data=new_df, hue='quality', ax=ax2)\nsns.kdeplot('citric acid', data=new_df, hue='quality', ax=ax3)\nsns.kdeplot('residual sugar', data=new_df, hue='quality', ax=ax4)\n# sns.kdeplot('chlorides', data=new_df, hue='quality', ax=ax5)","4b4c3c03":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize=(25,5))\nsns.boxenplot('quality', 'fixed acidity', data=new_df, ax=ax1)\nsns.boxenplot('quality', 'volatile acidity', data=new_df, ax=ax2)\nsns.boxenplot('quality', 'citric acid', data=new_df, ax=ax3)\nsns.boxenplot('quality', 'residual sugar', data=new_df, ax=ax4)\nplt.show()","78edd7e0":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize=(25,5))\nsns.boxenplot('quality', 'chlorides', data=new_df, ax=ax1)\nsns.boxenplot('quality', 'free sulfur dioxide', data=new_df, ax=ax2)\nsns.boxenplot('quality', 'total sulfur dioxide', data=new_df, ax=ax3)\nsns.boxenplot('quality', 'density', data=new_df, ax=ax4)\nplt.show()","78f34bf8":"fig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize=(25,5))\nsns.boxenplot('quality', 'pH', data=new_df, ax=ax1)\nsns.boxenplot('quality', 'sulphates', data=new_df, ax=ax2)\nsns.boxenplot('quality', 'alcohol', data=new_df, ax=ax3)\nplt.show()","1e1fc24c":"def plot_loss():\n    plt.figure(figsize=(10,5), dpi=80)\n\n    history_df = pd.DataFrame(history.history)\n\n    plt.plot(np.arange(0,history_df.shape[0]), history_df['loss'])\n    plt.plot(np.arange(0,history_df.shape[0]), history_df['val_loss'])\n    plt.show()\n    print(\"\\nMinimum validation loss: {}\".format(history_df['val_loss'].min()))","80491f7c":"df = pd.read_csv(\"..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")\n\nX = df.drop(['quality'], axis=1)\nX = normalize(X)\n\ny = df['quality']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=50)\n\n# Regression\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(512, input_shape=[11], activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(1, activation='relu')\n])\n\nmodel.compile(loss='mean_squared_error',\n             optimizer=tf.keras.optimizers.SGD(lr=0.0001))\n\ncheckpointer = ModelCheckpoint(filepath=\"model_1.h5\", verbose=1, save_best_only=True)\n\nhistory = model.fit(X_train, y_train,\n                    validation_data=(X_test, y_test),\n                    steps_per_epoch=100,\n                    epochs=50,\n                    callbacks=[checkpointer])\n\n\nmodel = \".\/model_1.h5\"\nmodel = tf.keras.models.load_model(model, compile = True)\nprediction_train = np.round(model.predict(X_train))\nprediction_val = np.round(model.predict(X_test))\n\nprint('\\nTrain Accuracy : {}' .format(metrics.accuracy_score(prediction_train, y_train)))\nprint('Validation Accuracy : {}' .format(metrics.accuracy_score(prediction_val, y_test)))\n\nplot_loss()","d2effa9a":"df = pd.read_csv(\"..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")\n\nX = df.drop(['quality'], axis=1)\nX = normalize(X)\n\ny = df['quality']\ny = np.array(tf.one_hot(y, 6))\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=50)\n\n# softmax classification\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(512, input_shape=[11], activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(6, activation='softmax')\n])\n\nmodel.compile(loss='CategoricalCrossentropy',\n             optimizer=tf.keras.optimizers.SGD(lr=0.0001))\n\ncheckpointer = ModelCheckpoint(filepath=\".\/model_2.h5\", verbose=1, save_best_only=True)\n\nhistory = model.fit(X_train, y_train,\n                    validation_data=(X_test, y_test),\n                    steps_per_epoch=100,\n                    epochs=500,\n                    callbacks=[checkpointer])\n\n\nmodel = \".\/model_2.h5\"\nmodel = tf.keras.models.load_model(model, compile = True)\nprediction_train = np.round(model.predict(X_train))\nprediction_val = np.round(model.predict(X_test))\n\nprint('\\nTrain Accuracy : {}' .format(metrics.accuracy_score(prediction_train, y_train)))\nprint('Validation Accuracy : {}' .format(metrics.accuracy_score(prediction_val, y_test)))","f01fb762":"df = pd.read_csv(\"..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")\nnew_df = df\nnew_df['quality'] = np.where(new_df['quality']>=7, 1, 0)\n\n\nX = new_df.drop(['quality'], axis=1)\nX = normalize(X)\n\ny = new_df['quality']\n# y = np.array(tf.one_hot(y, 2))\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=50)\n\n# softmax classification\n\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.Dense(512, input_shape=[11], activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(256, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(loss='BinaryCrossentropy',\n             optimizer=tf.keras.optimizers.SGD(lr=0.0001),\n             metrics=['accuracy'])\n\ncheckpointer = ModelCheckpoint(filepath=\".\/model_3.h5\", verbose=1, save_best_only=True)\n\nhistory = model.fit(X_train, y_train,\n                    validation_data=(X_test, y_test),\n                    steps_per_epoch=100,\n                    epochs=500,\n                    callbacks=[checkpointer])\n\n\nmodel = \".\/model_3.h5\"\nmodel = tf.keras.models.load_model(model, compile = True)\nprediction_train = np.round(model.predict(X_train))\nprediction_val = np.round(model.predict(X_test))\n\nprint('\\nTrain Accuracy : {}' .format(metrics.accuracy_score(prediction_train, y_train)))\nprint('Validation Accuracy : {}' .format(metrics.accuracy_score(prediction_val, y_test)))\n\nplot_loss()","65895b23":"df = pd.read_csv(\"..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")\nnew_df = df\nnew_df['quality'] = np.where(new_df['quality']>=7, 1, 0)\n\n\nX = new_df.drop(['quality'], axis=1)\nX = normalize(X)\n\ny = new_df['quality']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=50)\n\n\nmodel = [SGDClassifier(),\n        DecisionTreeClassifier(),\n        LinearSVC(),\n        GaussianNB(),\n        KNeighborsClassifier(),\n        RandomForestClassifier(),\n        LogisticRegression(),\n        GradientBoostingClassifier()\n        ]\n\nfor models in model:\n    model = models\n    model.fit(X_train,y_train)\n    prediction_train = model.predict(X_train)\n    prediction_val = model.predict(X_test)\n\n    print('\\n{} Train Accuracy : {}' .format(model, metrics.accuracy_score(prediction_train, y_train)))\n    print('{} Validation Accuracy : {}' .format(model, metrics.accuracy_score(prediction_val, y_test)))","894f5c9d":"# Model 2 : Neural Network Classification model to predict 5 class (quality : 3,4,5,6,7,8)","873562a4":"### Counts quality values","2e6411bb":"**From above graph, we can see that lower volatile acidity correlate to higher quality, while citric acid had positive correlation to quality. but we can see clear pattern in fixed acidity and residual sugar**","b6b477ee":"# Model 1 : Neural Network Regression models to predict 5 class (quality : 3,4,5,6,7,8)","a29212c1":"#### Plot loss function","2f52d76d":"# Exploratory Data Analysis\n## See relation between each feature to quality","8f77f8dd":"# Model 3 : Neural Network for Binary classification model (Nice or Bad)","24762ab8":"**This data is not evenly distributed for 2 types of classes**","8f685582":"# Import libraries","947660f4":"# Training Models","254d9c9c":"## Create new Dataframe\n### Change quality into 2 class : Nice and Bad","8c9f7597":"# Traditional Machine Learning Technique","4fb964a9":"**we can't get insight from distribution plot, since the data didn't distributed equally**"}}