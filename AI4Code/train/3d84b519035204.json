{"cell_type":{"0f4bae44":"code","62fc3cfb":"code","42308479":"code","c9d01915":"code","3818405b":"code","d3b34b8f":"code","7f2610aa":"code","dca17437":"code","de6d9efa":"code","ddab86ef":"code","2fe14373":"code","23a579f7":"code","c13b5097":"code","68a66cee":"code","48d3c3a7":"code","e757827e":"code","41ebcec8":"markdown","34dae5b3":"markdown","c1516d15":"markdown","a311adff":"markdown","2547cba7":"markdown","cb3cf631":"markdown","3709e642":"markdown","62c43b5a":"markdown"},"source":{"0f4bae44":"import numpy as np\nimport pandas as pd\nimport os\nimport nltk\nnltk.download('punkt')\nimport re\nimport networkx as nx\nfrom termcolor import colored \nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nstop_words=stopwords.words('english')\nstop_words.extend(['abstract','background','summary','introduction'])","62fc3cfb":"smoke=pd.read_csv(\"..\/input\/subtopic\/smokpaper.csv\",sep=',')\ndf=smoke.loc[[0]]\ndf","42308479":"## tokenize sentences\nfrom nltk.tokenize import sent_tokenize\nsentences = []\nfor s in df['abstract']:\n    sentences.append(sent_tokenize(s))\n\nsentences= [y for x in sentences for y in x] \nsentences[:2]","c9d01915":"## word embed from glove \nword_embedings = {}\nf= open('..\/input\/glovewordembed\/glove.6B.100d.txt',encoding='utf-8')\n\nfor line in f:\n    values=line.split()\n    word=values[0]\n    coefs=np.asarray(values[1:],dtype='float32')\n    word_embedings[word]= coefs\nf.close()  ","3818405b":"## remove special char\nclean_sentences = pd.Series(sentences).str.replace(\"[^a-zA-Z]\", \" \")\n\n# make alphabets lowercase\nclean_sentences = [s.lower() for s in clean_sentences]","d3b34b8f":"clean_sentences[:2]","7f2610aa":"## remove stop words\ndef remove_stopwords(sen):\n    sen_new = \" \".join([i for i in sen if i not in stop_words])\n    return sen_new\nclean_sentences = [remove_stopwords(r.split()) for r in clean_sentences]\n","dca17437":"clean_sentences[:2]","de6d9efa":"##sentence to vectors using word embeddings\nsentence_vectors = []\nfor i in clean_sentences:\n  if len(i) != 0:\n    v = sum([word_embedings.get(w, np.zeros((100,))) for w in i.split()])\/(len(i.split())+0.001)\n  else:\n    v = np.zeros((100,))\n  sentence_vectors.append(v)","ddab86ef":"sentence_vectors[:1]","2fe14373":"# similarity matrix\nsim_mat = np.zeros([len(sentences), len(sentences)])\nfrom sklearn.metrics.pairwise import cosine_similarity\nfor i in range(len(sentences)):\n  for j in range(len(sentences)):\n    if i != j:\n      sim_mat[i][j] = cosine_similarity(sentence_vectors[i].reshape(1,100), sentence_vectors[j].reshape(1,100))[0,0]","23a579f7":"import networkx as nx\n\nnx_graph = nx.from_numpy_array(sim_mat)\nscores = nx.pagerank(nx_graph)\n## each node represents a sentence\nnx.draw(nx_graph,pos=nx.spring_layout(nx_graph),with_labels = True)\nnx_graph","c13b5097":"ranked_sentences = sorted(((scores[i],s) for i,s in enumerate(sentences)), reverse=True)\nsummary=pd.DataFrame(ranked_sentences).drop_duplicates(subset=1,keep='first')\nsummary=summary.rename(columns={0:'score',1:\"sentence\"})\nsummary","68a66cee":"ranked= summary['sentence'].values.tolist()\n#top 20\n#for i in range(len(ranked)):\n  #print(i+1,\")\", ranked[i], \"\\n\")\n \n#print(colored(list(smoke['abstract']) ,'green'))\n#first=sentences[0]\n#aa=ranked[:3]\n#aa.append(first)\n#'.'.join(aa)   ## the first sentence  may be usefull\n\nprint(colored(list(df['abstract']) ,'green'))\n'.'.join(ranked[:3])","48d3c3a7":"preg= pd.read_csv(\"..\/input\/subtopic\/pregnantpaper.csv\",sep=',')\ndf2=preg.loc[[10]]\ndf2\nfrom nltk.tokenize import sent_tokenize\nsentences = []\nfor s in df2['abstract']:\n    sentences.append(sent_tokenize(s))\n\nsentences= [y for x in sentences for y in x]  \n\n## remove special char\nclean_sentences = pd.Series(sentences).str.replace(\"[^a-zA-Z]\", \" \")\n\n# make alphabets lowercase\nclean_sentences = [s.lower() for s in clean_sentences]\n\ndef remove_stopwords(sen):\n    sen_new = \" \".join([i for i in sen if i not in stop_words])\n    return sen_new\n\n# remove stopwords from the sentences\nclean_sentences = [remove_stopwords(r.split()) for r in clean_sentences]\n\n\nsentence_vectors = []\nfor i in clean_sentences:\n  if len(i) != 0:\n    v = sum([word_embedings.get(w, np.zeros((100,))) for w in i.split()])\/(len(i.split())+0.001)\n  else:\n    v = np.zeros((100,))\n  sentence_vectors.append(v)\n\nsim_mat = np.zeros([len(sentences), len(sentences)])\n\nfrom sklearn.metrics.pairwise import cosine_similarity\nfor i in range(len(sentences)):\n  for j in range(len(sentences)):\n    if i != j:\n      sim_mat[i][j] = cosine_similarity(sentence_vectors[i].reshape(1,100), sentence_vectors[j].reshape(1,100))[0,0]\n\nnx_graph = nx.from_numpy_array(sim_mat)\nscores = nx.pagerank(nx_graph)    \n\n## ranking \nranked_sentences = sorted(((scores[i],s) for i,s in enumerate(sentences)), reverse=True)\nsummary=pd.DataFrame(ranked_sentences).drop_duplicates(subset=1,keep='first')\nsummary=summary.rename(columns={0:'score',1:\"text\"})\n\n## output\nsummary=pd.DataFrame(ranked_sentences).drop_duplicates(subset=1,keep='first')\nsummary=summary.rename(columns={0:'score',1:\"text\"})\n\nranked= summary['text'].values.tolist()\n#top 20\n#for i in range(len(ranked)):\n  #print(i+1,\")\", ranked[i], \"\\n\")\n#for i in range(4):    \n    #print( ranked[i])\nprint(colored(list(df2['abstract']) ,'green'))\n'.'.join(ranked[:3])","e757827e":"card= pd.read_csv(\"..\/input\/subtopic\/respiratory_cardio_paper.csv\",sep=',')\ndf3=card.loc[[2]]\nfrom nltk.tokenize import sent_tokenize\nsentences = []\nfor s in df3['abstract']:\n    sentences.append(sent_tokenize(s))\n\nsentences= [y for x in sentences for y in x]  \n\n## remove special char\nclean_sentences = pd.Series(sentences).str.replace(\"[^a-zA-Z]\", \" \")\n\n# make alphabets lowercase\nclean_sentences = [s.lower() for s in clean_sentences]\n\ndef remove_stopwords(sen):\n    sen_new = \" \".join([i for i in sen if i not in stop_words])\n    return sen_new\n\n# remove stopwords from the sentences\nclean_sentences = [remove_stopwords(r.split()) for r in clean_sentences]\n\n\nsentence_vectors = []\nfor i in clean_sentences:\n  if len(i) != 0:\n    v = sum([word_embedings.get(w, np.zeros((100,))) for w in i.split()])\/(len(i.split())+0.001)\n  else:\n    v = np.zeros((100,))\n  sentence_vectors.append(v)\n\nsim_mat = np.zeros([len(sentences), len(sentences)])\n\nfrom sklearn.metrics.pairwise import cosine_similarity\nfor i in range(len(sentences)):\n  for j in range(len(sentences)):\n    if i != j:\n      sim_mat[i][j] = cosine_similarity(sentence_vectors[i].reshape(1,100), sentence_vectors[j].reshape(1,100))[0,0]\n\nnx_graph = nx.from_numpy_array(sim_mat)\nscores = nx.pagerank(nx_graph)    \n\n## ranking \nranked_sentences = sorted(((scores[i],s) for i,s in enumerate(sentences)), reverse=True)\nsummary=pd.DataFrame(ranked_sentences).drop_duplicates(subset=1,keep='first')\nsummary=summary.rename(columns={0:'score',1:\"text\"})\n\n## output\nsummary=pd.DataFrame(ranked_sentences).drop_duplicates(subset=1,keep='first')\nsummary=summary.rename(columns={0:'score',1:\"text\"})\n\nranked= summary['text'].values.tolist()\n#top 20\n#for i in range(len(ranked)):\n  #print(i+1,\")\", ranked[i], \"\\n\")\n#for i in range(4):    \n    #print( ranked[i])\nprint(colored(list(df3['abstract']) ,'green'))\n'.'.join(ranked[:3])","41ebcec8":"### Top 3 sentences to create new summary\n","34dae5b3":"## On Smoking","c1516d15":"### Created by a [TransUnion](www.transunion.com) data scientist that believes that information can be used to change our world for the better. #InformationForGood**\n\n### Our goal here is to summarize abstracts that are related to  covid19 risk factors using text rank. Joint work with [Karen](https:\/\/www.kaggle.com\/kejinqian\/find-answers-using-lda-and-skip-thoughts ).\n\n# COVID-19: extractive text summarization using text rank ","a311adff":"**Finally, we could just encapsulate all this into a function that receives as inputs an abstract and outputs a summary**","2547cba7":"### On cardiovascular and cerebrovascular","cb3cf631":"### Pipeline\n\n1. For each subtopic(smoking and pulmonary diseases, pregnancy and neonates, co-infections and commorbidities, etc)  generate a new dataframe for related abstracts using syntax. [These syntax or keyword were found using an LDA model output from karen's link here](https:\/\/www.kaggle.com\/kejinqian\/find-answers-using-lda-and-skip-thoughts )\n2. For each abstract   taken [from here](kkk.com), perform an extractive text summarization (text rank) using the top 3 sentences\n    1. Tokenize into sentences and cleaning,\n    2. Create sentence representations  using GLOVE word embeddings,\n    3. Construct similarity matrix using cosine similarity,\n    4. Build sentences network and apply page rank to find an importance score fro each sentence\n    5. Select top 3 sentences to build the new summary.","3709e642":"### Score and sentence","62c43b5a":"## On pregancy"}}