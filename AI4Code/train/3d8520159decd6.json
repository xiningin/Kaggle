{"cell_type":{"27670cde":"code","29370021":"code","24810622":"code","cd6593ca":"code","ef041e23":"code","ec8211bd":"code","d373c910":"code","bb8730e3":"code","46571784":"code","02a7bad8":"code","de385d77":"code","eb7f0fd7":"code","835cabfb":"code","55da2900":"code","0d3c264f":"code","6efd72bf":"code","ac13c34e":"markdown","a36e4e7a":"markdown"},"source":{"27670cde":"# This Python 2 environment comes with many helpful analytics libraries installed\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom IPython.display import display\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport re\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\n\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.linear_model import LogisticRegression,SGDClassifier\n\nfrom sklearn.multiclass import OneVsRestClassifier\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import LinearSVC\n\n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import make_scorer,accuracy_score\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras.utils import np_utils\n\nfrom sklearn.metrics import log_loss\n# Any results you write to the current directory are saved as output.\n\n%matplotlib inline","29370021":"train = pd.read_json('..\/input\/train.json', orient='columns')\ntest = pd.read_json('..\/input\/test.json', orient='columns')\nsample_submission = pd.read_csv(\"..\/input\/sample_submission.csv\")","24810622":"display(train.head())\ndisplay(test.head())\ndisplay(sample_submission.head())","cd6593ca":"## convert multi-word ingredient into single word by substituting underscore on place of space\ndef sub_space(x):\n    temp_value = list()\n    for i in x:\n        temp_value.append(re.sub(r'[^0-9a-zA-Z]+','_',i.lower()))\n    return temp_value\n\ntrain['ingredients_new'] = train['ingredients'].apply(sub_space)\ntest['ingredients_new'] = test['ingredients'].apply(sub_space)\n\n## convert list of ingredients into a sentence\ndef convert_list_to_sent(x):\n    return ' '.join(x)\n\ntrain['ingredient_sent'] = train['ingredients_new'].apply(convert_list_to_sent)\ntest['ingredient_sent'] = test['ingredients_new'].apply(convert_list_to_sent)\n\ndisplay(train.head())\ndisplay(test.head())\n","ef041e23":"X_train, X_val, y_train, y_val = train_test_split(train['ingredient_sent'], train['cuisine'], test_size=0.33, random_state=42)","ec8211bd":"## Getting Features using TfIDFVectorizer\ntfidf_vect = TfidfVectorizer(lowercase=True,binary=True)\n\n# binary value in feature set\nX_train_tfidf = tfidf_vect.fit_transform(X_train)\nX_val_tfidf = tfidf_vect.transform(X_val)\nX_test_tfidf = tfidf_vect.transform(test['ingredient_sent'])\n","d373c910":"lb = LabelEncoder()\ny_train_encode = lb.fit_transform(y_train)\ny_val_encode = lb.transform(y_val)\n\ny_train_dummy = np_utils.to_categorical(y_train_encode)\ny_val_dummy = np_utils.to_categorical(y_val_encode)","bb8730e3":"input_shape = X_train_tfidf.shape[1]\ndef model_structure1():    \n    mdl = Sequential()\n    mdl.add(Dense(512, init='glorot_uniform', activation='relu',input_shape=(input_shape,)))\n    mdl.add(Dropout(0.5))\n    mdl.add(Dense(128, init='glorot_uniform', activation='relu'))\n    mdl.add(Dropout(0.5))\n    mdl.add(Dense(20, activation='softmax'))\n    mdl.compile(loss='categorical_crossentropy', optimizer='adadelta', metrics=['accuracy'])\n    mdl.summary()\n    return mdl ","46571784":"print(\"Compile model ...\")\nestimator = KerasClassifier(build_fn=model_structure1, epochs=10, batch_size=128)","02a7bad8":"# estimator.fit(X_train_tfidf.toarray(), y_train_dummy)\nhistory = estimator.fit(X_train_tfidf.toarray(), y_train_dummy,\\\n                        validation_data=(X_val_tfidf.toarray(),y_val_dummy))\n","de385d77":"import matplotlib.pyplot as plt\nplt.style.use('ggplot')\n\ndef plot_history(history):\n    acc = history.history['acc']\n    val_acc = history.history['val_acc']\n    loss = history.history['loss']\n    val_loss = history.history['val_loss']\n    x = range(1, len(acc) + 1)\n    plt.figure(figsize=(12, 5))\n    plt.subplot(1, 2, 1)\n    plt.plot(x, acc, 'b', label='Training acc')\n    plt.plot(x, val_acc, 'r', label='Validation acc')\n    plt.title('Training and validation accuracy')\n    plt.legend()\n    plt.subplot(1, 2, 2)\n    plt.plot(x, loss, 'b', label='Training loss')\n    plt.plot(x, val_loss, 'r', label='Validation loss')\n    plt.title('Training and validation loss')\n    plt.legend()\n\nplot_history(history)","eb7f0fd7":"# Predictions on train and validation data\n\nmnb_train_prediction = estimator.predict_proba(X_train_tfidf.toarray())\nmnb_val_prediction = estimator.predict_proba(X_val_tfidf.toarray())\n\nmnb_tr_pred_value = estimator.predict(X_train_tfidf.toarray())\nmnb_val_pred_value = estimator.predict(X_val_tfidf.toarray())\nmnb_test_pred_value = estimator.predict(X_test_tfidf.toarray())\nprint(\"=====\")\nprint(\"Log loss for TfIDFVectorizer features in MLP for Training set {}\".format(log_loss(y_train_encode,mnb_train_prediction)))\nprint(\"Log loss for TfIDFVectorizer features in MLP for validation set {}\".format(log_loss(y_val_encode,mnb_val_prediction)))\nprint(\"Accuracy for TfIDFVectorizer features in MLP for Training set {}\".format(accuracy_score(y_train_encode,mnb_tr_pred_value)))\nprint(\"Accuracy for TfIDFVectorizer features in MLP for validation set {}\".format(accuracy_score(y_val_encode,mnb_val_pred_value)))","835cabfb":"mnb_val_pred_value","55da2900":"test_pred = list(lb.inverse_transform(mnb_test_pred_value))\nprint(test_pred)","0d3c264f":"result = pd.DataFrame({'id':test['id'],'cuisine':test_pred})\nresult.head()\n","6efd72bf":"result.to_csv('submission.csv',index=False)","ac13c34e":"### Get Train and Validation data","a36e4e7a":"## PreProcessing"}}