{"cell_type":{"b92d2599":"code","81f76b14":"code","5a781953":"code","d9a5dff6":"code","e48a41f0":"code","06310cb9":"code","30a08d12":"code","3db77dbf":"code","32a0b91e":"code","2fa05dbb":"code","9bdea942":"code","c75d3e03":"code","73b95bb2":"code","8e2a8dc7":"code","3618f208":"code","23015a18":"code","6eeb49ca":"code","0dc1de1e":"code","dcd183fb":"code","284ecb4b":"code","f8f3122e":"code","a73d0b61":"code","e5815ddb":"code","2b179397":"code","32a942e7":"code","4171edb0":"code","428f7fdc":"code","afdec3a9":"code","dbe9100e":"code","3064eed7":"code","cda8964b":"code","f3b5b3e4":"code","49689a42":"code","2fa2b906":"code","4f73129c":"code","68f346e0":"code","fc0454db":"code","c8a8ba67":"code","a29e3bab":"code","e09f8b5a":"code","bdabc99c":"code","dfcd2bf9":"code","53505f01":"code","c3274752":"code","a07b6be0":"markdown","8b72d2c8":"markdown","d0087458":"markdown","e9d2be0a":"markdown","4816dd6d":"markdown","e1ebf1ea":"markdown","edbcd0f2":"markdown","115c1199":"markdown","16ed443c":"markdown","1ad45c95":"markdown","de3c96fe":"markdown","aead6eb5":"markdown","d63ebca7":"markdown","e5370b24":"markdown","0e802a1f":"markdown","19f95b25":"markdown"},"source":{"b92d2599":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport warnings \nimport datetime\nimport math\n\nwarnings.filterwarnings(\"ignore\")\n%matplotlib inline\nsns.set_style(\"whitegrid\")","81f76b14":"data=pd.read_csv(\"..\/input\/life-expectancy-who\/Life Expectancy Data.csv\")","5a781953":"data.head(3)","d9a5dff6":"data.tail(3)","e48a41f0":"data.shape","06310cb9":"data.info()","30a08d12":"def checkna(data):\n    missing_values= data.isna().sum().reset_index()\n    missing_values.columns= [\"Features\", \"Missing_Values\"]\n    missing_values[\"Missing_Percent\"]= round(missing_values.Missing_Values\/len(data)*100,2)\n    return missing_values[missing_values.Missing_Values > 0 ]","3db77dbf":"checkna(data)","32a0b91e":"data.columns=['Country', 'Year', 'Status', 'Life_expectancy', 'Adult_Mortality',\n       'infant_deaths', 'Alcohol', 'percentage_expenditure', 'Hepatitis_B',\n       'Measles', 'BMI', 'under_five_deaths', 'Polio', 'Total_expenditure',\n       'Diphtheria', 'HIV\/AIDS', 'GDP', 'Population',\n       'thinness', 'thinness_5-9_years',\n       'Income_composition_of_resources', 'Schooling']","2fa05dbb":"y= data[\"Life_expectancy\"]\ndf=  data.drop([\"Life_expectancy\"], axis=1)\n\ncategorical= df.select_dtypes(include= \"O\")\nnumerical= df.select_dtypes(exclude= \"O\")","9bdea942":"categorical.describe()","c75d3e03":"round(numerical.describe(),3)","73b95bb2":"print(\"Top 10 Countries with Most Life Expectancy\")\nprint(\"=\"*50)\nprint(data.groupby(\"Country\").Life_expectancy.mean().sort_values(ascending =False).head(10))\nprint(\"=\"*50)\nprint(\"Top 10 Countries with Least Life Expectancy\")\nprint(\"=\"*50)\nprint(data.groupby(\"Country\").Life_expectancy.mean().sort_values(ascending =True).head(10))\nprint(\"=\"*50)\nprint(data.groupby(\"Country\").Life_expectancy.median().sort_values(ascending =False).head(10))","8e2a8dc7":"data.groupby(\"Status\").Life_expectancy.mean()","3618f208":"print(\"=\"*50)\nprint(\"Top 10 Developed Countries Life Expectancy\")\nprint(\"=\"*50)\nprint(data[data.Status== \"Developed\"].groupby(\"Country\").Life_expectancy.mean().sort_values(ascending=False).head(10))\nprint(\"=\"*50)\nprint(\"Top 10 Developing Countries Life Expectancy\")\nprint(\"=\"*50)\nprint(data[data.Status== \"Developing\"].groupby(\"Country\").Life_expectancy.mean().sort_values(ascending=False).head(10))\n\nprint(\"=\"*50)\nprint(\"Least 10 Developed Countries Life Expectancy\")\nprint(\"=\"*50)\nprint(data[data.Status== \"Developed\"].groupby(\"Country\").Life_expectancy.mean().sort_values(ascending=True).head(10))\nprint(\"=\"*50)\nprint(\"Least 10 Developing Countries Life Expectancy\")\nprint(\"=\"*50)\nprint(data[data.Status== \"Developing\"].groupby(\"Country\").Life_expectancy.mean().sort_values(ascending=True).head(10))","23015a18":"print(\"=\"*50)\nprint(\"Top 10 Countries with Most Population\")\nprint(\"=\"*50)\nprint(data.groupby(\"Country\").Population.mean().sort_values(ascending =False).head(10))\nprint(\"=\"*50)\nprint(\"Top 10 Countries with Least Population\")\nprint(\"=\"*50)\nprint(data.groupby(\"Country\").Population.mean().sort_values(ascending =True).head(10))","6eeb49ca":"print(\"=\"*50)\nprint(\"Top 10 Countries with Highest GDP\")\nprint(\"=\"*50)\nprint(data.groupby(\"Country\").GDP.mean().sort_values(ascending =False).head(10))\nprint(\"=\"*50)\nprint(\"Top 10 Countries with Lowest GDP\")\nprint(\"=\"*50)\nprint(data.groupby(\"Country\").GDP.mean().sort_values(ascending =True).head(10))","0dc1de1e":"for feature in categorical.columns:\n    sns.countplot(categorical[feature], dodge=True)\n    plt.show()","dcd183fb":"for feature in numerical.columns:\n    sns.histplot(numerical[feature])\n    plt.xticks(fontsize= 12)\n    plt.yticks(fontsize=12)\n    plt.ylabel(\"Count\", fontsize= 13, fontweight=\"bold\", name= \"helvetica\")\n    plt.xlabel(feature, fontsize=13, fontweight=\"bold\")\n    plt.show()","284ecb4b":"sns.histplot(y, color= \"olive\")\nplt.ylabel(\"Count\", fontsize= 13, fontweight=\"bold\", name= \"Sans\", family= \"monospace\")\nplt.xlabel(\"Life Expectancy\", fontsize=13, fontweight=\"bold\", family= \"monospace\")","f8f3122e":"sns.boxplot(x= data[\"Status\"], y= y,fliersize=5)\nplt.xticks(fontsize= 12)\nplt.yticks(fontsize=12)\nplt.ylabel(\"Life Expectancy\", fontsize= 13, fontweight=\"bold\", name= \"helvetica\")\nplt.xlabel(\"Status\", fontsize=13, fontweight=\"bold\")\nplt.show()","a73d0b61":"plt.figure(figsize= [7,5])\norder= data.groupby(\"Country\").Life_expectancy.mean().nlargest(20).index\nsns.barplot(y= \"Country\", x= \"Life_expectancy\", data= data, order= order, palette= \"YlGnBu_r\")\nplt.title(\"Top 20 Countries with Highest Life Expectancy\", fontsize= 18,fontweight=\"bold\", fontstyle=\"italic\")\nplt.xticks( fontsize= 12)\nplt.yticks(fontsize=12)\nplt.ylabel(\"Country\", fontsize= 14, fontweight=\"bold\")\nplt.xlabel(\"Life Expectancy\", fontsize=14, fontweight=\"bold\")","e5815ddb":"plt.figure(figsize= [7,5])\norder=data.groupby(\"Country\").Life_expectancy.mean().sort_values(ascending= True)[:20].index\nsns.barplot(y= \"Country\", x= \"Life_expectancy\", data= data, order= order, palette= \"RdYlBu\")\nplt.title(\"Top 20 Countries with Lowest Life Expectancy\", fontsize= 18,fontweight=\"bold\", fontstyle=\"italic\")\nplt.xticks(fontsize= 12)\nplt.yticks(fontsize=12)\nplt.ylabel(\"Country\", fontsize= 14, fontweight=\"bold\")\nplt.xlabel(\"Life Expectancy\", fontsize=14, fontweight=\"bold\")","2b179397":"for feature in numerical.columns:\n    sns.scatterplot(x= numerical[feature], y= y, hue= categorical.Status)\n    plt.xticks(rotation=90, fontsize= 12)\n    plt.yticks(fontsize=12)\n    plt.ylabel(\"Life Expectancy\", fontsize= 13, fontweight=\"bold\", name= \"helvetica\")\n    plt.xlabel(feature, fontsize=13, fontweight=\"bold\")\n    plt.show()","32a942e7":"plt.figure(figsize= [8,6])\norder= data.groupby(\"Country\").GDP.mean().sort_values(ascending= False).head(20).index\nsns.barplot(x= \"Country\", y= \"GDP\", data=data, order=order, errwidth=False, palette=\"mako\")\nplt.title(\"Top 20 Countries with Highest GDP\", fontsize= 18,fontweight=\"bold\", fontstyle=\"italic\")\nplt.xticks(rotation=90, fontsize= 12)\nplt.yticks(fontsize=12)\nplt.ylabel(\"GDP\", fontsize= 14, fontweight=\"bold\")\nplt.xlabel(\"Country\", fontsize=14, fontweight=\"bold\")","4171edb0":"plt.figure(figsize= [8,6])\norder= data.groupby(\"Country\").GDP.mean().sort_values(ascending= True).head(20).index\nsns.barplot(x= \"Country\", y= \"GDP\", data=data, order=order, errwidth=False, palette=\"mako\")\nplt.title(\"Top 20 Countries with Lowest GDP\", fontsize= 18,fontweight=\"bold\", fontstyle=\"italic\")\nplt.xticks(rotation=90, fontsize= 12)\nplt.yticks(fontsize=12)\nplt.ylabel(\"GDP\", fontsize= 14, fontweight=\"bold\")\nplt.xlabel(\"Country\", fontsize=14, fontweight=\"bold\")","428f7fdc":"checkna(df)","afdec3a9":"def imputer(data, feature, method):\n    if method== \"mode\":\n        data[feature]=data[feature].fillna(data[feature].mode()[0])\n    elif method== \"median\":\n        data[feature]=data[feature].fillna(data[feature].median())\n    else:\n        data[feature]=data[feature].fillna(data[feature].mean())","dbe9100e":"features_missing= df.columns[df.isna().any()]\nfor feature in features_missing:\n    imputer(data= df, feature= feature, method= \"mean\")","3064eed7":"y.fillna(y.median(), inplace=True)","cda8964b":"from sklearn.preprocessing import LabelEncoder","f3b5b3e4":"columns= [\"Country\", \"Year\", \"Status\"]\nfor feature in columns:\n    le= LabelEncoder()\n    df[feature]= le.fit_transform(df[feature])\n    df[feature].astype(\"int64\")","49689a42":"plt.figure(figsize= [12,12])\nsns.heatmap(pd.concat([df,y], axis=1).corr(), annot=True, cmap= \"YlGnBu_r\")","2fa2b906":"from sklearn.preprocessing import StandardScaler","4f73129c":"columns= [ 'Adult_Mortality', 'infant_deaths',\n       'Alcohol', 'percentage_expenditure', 'Hepatitis_B', 'Measles', 'BMI',\n       'under_five_deaths', 'Polio', 'Total_expenditure', 'Diphtheria',\n       'HIV\/AIDS', 'GDP', 'Population', 'thinness',\n       'Income_composition_of_resources', 'Schooling']\nfor feature in columns:\n    sc= StandardScaler()\n    df[[feature]]= sc.fit_transform(df[[feature]])","68f346e0":"from sklearn.feature_selection import mutual_info_regression","fc0454db":"plt.figure(figsize= [8,6])\npd.Series(mutual_info_regression(df, y), index= df.columns).sort_values(ascending=False).plot(kind=\"barh\")\nplt.title(\"Feature importances\", fontsize= 20)\nplt.yticks(fontsize= 12)","c8a8ba67":"from sklearn.model_selection import train_test_split","a29e3bab":"X_train, X_test, y_train, y_test= train_test_split(df, y, test_size= 0.30, random_state=9)","e09f8b5a":"columns= pd.Series(mutual_info_regression(df, y), index= df.columns).sort_values(ascending= False)[:10].index\ndatacopy= df[columns]\ntarget= y\n    \nX_train,X_test, y_train, y_test= train_test_split(datacopy, target, test_size= 0.33, random_state=9)   \n\nfrom sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_absolute_percentage_error as mape, mean_squared_error as mse\n\n    \nalg= [RandomForestRegressor(), AdaBoostRegressor(), GradientBoostingRegressor(), DecisionTreeRegressor(), LinearRegression(), SVR()]\n    \n    \nfor i in alg:\n    model= i\n    model.fit(X_train, y_train)\n    y_pred1= model.predict(X_test)\n    y_pred2= model.predict(X_train)\n    print(i, \"Train Root Mean Squared error:\", np.sqrt(mse(y_train, y_pred2)))\n    print(i, \"Train Accuracy:\", (1-mape(y_train, y_pred2))*100)\n    print(\"*\"*50)\n    print(i, \"Test Root Mean Squared error:\", np.sqrt(mse(y_test, y_pred1)))\n    print(i, \"Test Accuracy:\", (1-mape(y_test, y_pred1))*100)\n    print(\"=\"*70)","bdabc99c":"rf= RandomForestRegressor()\nrf.fit(X_train, y_train)\ny_pred3= rf.predict(X_test)\nprint( \"RMSE:\", np.sqrt(mse(y_test, y_pred3)))","dfcd2bf9":"columns= pd.Series(mutual_info_regression(df, y), index= df.columns).sort_values(ascending= False)[:10].index\ndatacopy= df[columns]\ntarget= y\n    \nX_train,X_test, y_train, y_test= train_test_split(datacopy, target, test_size= 0.33, random_state=9)\nfrom sklearn.ensemble import RandomForestRegressor\nrf= RandomForestRegressor(n_estimators=90)\nrf.fit(X_train, y_train)\ny_pred= rf.predict(X_test)\ny_pred2= rf.predict(X_train)\n  \nprint(\"Test Root Mean Squared error:\", round(np.sqrt(mse(y_test, y_pred)),2))\nprint(\"Test Accuracy:\", round((1-mape(y_test, y_pred))*100,2))\nprint(\"Mean Absolute Percentage Error:\", round(mape(y_test, y_pred)*100),2)","53505f01":"plt.figure(figsize= [7,5])\nsns.scatterplot(y=(y_pred2-y_train), x= y_pred2,color= \"brown\")\nplt.title(\"Residuals Vs Predicted value\", fontsize= 18,fontweight=\"bold\", fontstyle=\"italic\")\nplt.xticks( fontsize= 12)\nplt.yticks(fontsize=12)\nplt.ylabel(\"Residual\", fontsize= 14, fontweight=\"bold\")\nplt.xlabel(\"Predicted\", fontsize=14, fontweight=\"bold\")","c3274752":"plt.subplot(1,2,1)\nsns.histplot(y_pred)\nplt.title(\"Predicted\")\nplt.xlabel(\"Predicted\")\nplt.subplot(1,2,2)\nsns.histplot(y_test)\nplt.title(\"Actual\")\nplt.xlabel(\"Actual\")","a07b6be0":"### Feature Selection:","8b72d2c8":"## Checking Missing Values:","d0087458":"## Importing necessary packages for the Analysis:","e9d2be0a":"#### Countries Vs Life Expectancy on the basis of Status:","4816dd6d":"## Training and Testing the Model","e1ebf1ea":"#### Countries Vs Life Expectancy:","edbcd0f2":"### Graphical EDA:","115c1199":"## Feature Engineering:","16ed443c":"#### Countries Vs Population:","1ad45c95":"## Getting a Brief Look at the Data:","de3c96fe":"##### We have imputed missing values with mean of that particular columns:","aead6eb5":"### Non Graphical EDA:","d63ebca7":"#### Countries Vs GDP:","e5370b24":"## Loading the Dataset:","0e802a1f":"## Exporatory Data Analysis:","19f95b25":"### Label Encoding:"}}