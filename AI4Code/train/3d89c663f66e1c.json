{"cell_type":{"7abf2e32":"code","f031c81a":"code","33142c71":"code","794f1702":"code","4d925074":"code","f7cd181e":"code","e2b549c9":"code","bd1adfac":"markdown","76c2cf8e":"markdown","a867cd9e":"markdown"},"source":{"7abf2e32":"# Importing required libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nfrom IPython.display import HTML","f031c81a":"df= pd.read_csv(\"..\/input\/provinces.csv\",encoding='latin1')\ndf.head()\n\n\n","33142c71":"current_year = 2018\ndff = df[df['year'].eq(current_year)].sort_values(by='population', ascending=False).head(15)\ndff","794f1702":"fig, ax = plt.subplots(figsize=(15, 8))\nax.barh(dff['province'], dff['population'])\ncolors = dict(zip(\n    ['Marmara Region','Aegean Region','Mediterranean Region','Central Anatolia Region','Black Sea Region','Eastern Anatolia Region','Southeast Anatolia Region'],\n    ['#adb0ff', '#ffb3ff', '#90d595', '#e48381', '#aafbff', '#f7bb5f', '#eafb50']\n))\ngroup_lk = df.set_index('province')['region'].to_dict()","4d925074":"fig, ax = plt.subplots(figsize=(15, 8))\ndff = dff[::-1]   # flip values from top to bottom\n# pass colors values to `color=`\nax.barh(dff['province'], dff['population'], color=[colors[group_lk[x]] for x in dff['province']])\n# iterate over the values to plot labels and values (Tokyo, Asia, 38194.2)\nfor i, (value, name) in enumerate(zip(dff['population'], dff['province'])):\n    ax.text(value, i,     name,            ha='right')  # Tokyo: name\n    ax.text(value, i-.25, group_lk[name],  ha='right')  # Asia: group name\n    ax.text(value, i,     value,           ha='left')   # 38194.2: value\n# Add year right middle portion of canvas\nax.text(1, 0.4, current_year, transform=ax.transAxes, size=46, ha='right')","f7cd181e":"fig, ax = plt.subplots(figsize=(15, 16))\n\ndef draw_barchart(year):\n    dff = df[df['year'].eq(year)].sort_values(by='population', ascending=True).tail(20)\n    ax.clear()\n    ax.barh(dff['province'], dff['population'], color=[colors[group_lk[x]] for x in dff['province']])\n    dx = dff['population'].max() \/ 200\n    for i, (value, name) in enumerate(zip(dff['population'], dff['province'])):\n        ax.text(value-dx, i,     name,           size=14, weight=800, ha='right', va='bottom')\n        ax.text(value-dx, i-.25, group_lk[name], size=8, color='#444444', ha='right', va='baseline')\n        ax.text(value+dx, i,     f'{value:,.0f}',  size=14, ha='left',  va='center')\n    # ... polished styles\n    ax.text(1, 0.4, year, transform=ax.transAxes, color='#777777', size=46, ha='right', weight=500)\n    ax.text(0, 1.06, 'Population', transform=ax.transAxes, size=12, color='#777777')\n    ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n    ax.xaxis.set_ticks_position('top')\n    ax.tick_params(axis='x', colors='#777777', labelsize=12)\n    ax.set_yticks([])\n    ax.margins(0, 0.01)\n    ax.grid(which='major', axis='x', linestyle='-')\n    ax.set_axisbelow(True)\n    ax.text(0, 1.12, 'The most populous provinces in Turkey from 2007 to 2018',\n            transform=ax.transAxes, size=24, weight=600, ha='left')\n    ax.text(1, 0, 'by Can Iban', transform=ax.transAxes, ha='right',\n            color='#777777', bbox=dict(facecolor='white', alpha=0.8, edgecolor='white'))\n    plt.box(False)\n    \ndraw_barchart(2018)","e2b549c9":"import matplotlib.animation as animation\nfrom IPython.display import HTML\n\nfig, ax = plt.subplots(figsize=(15, 16))\nanimator = animation.FuncAnimation(fig, draw_barchart, frames=range(2007, 2018))\nHTML(animator.to_jshtml()) ","bd1adfac":"**BAR CHART RACE with MATPLOTLIB LIBRARY**\n\nPRELIMINARY INFO\nThis notebook creates a bar chart race with Matplotlib library. \nThe idea of bar chart race emerged with [the tweet of Matt Navarra](https:\/\/twitter.com\/MattNavarra\/status\/1098580810062618627). \n\nThen, John Burn-Murdoch released [his reproducible notebook](https:\/\/observablehq.com\/@johnburnmurdoch\/bar-chart-race-the-most-populous-cities-in-the-world) using d3.js\n\nPratap Vardhan released [his codes](https:\/\/pratapvardhan.com\/blog\/bar-chart-race-python-matplotlib\/) for visualising a bar chart race using Python's Matplotlib library. \n\nIn this notebook, I adopted Vardhan's understanding; however, I edited a lot in order to visualise my data better. \n\nDATA\nAdded CSV file contains the population of 81 Turkish provinces between 2007 and 2018. This file is extracted from Turkish Institute of Statistics databases.\n\nINTERPRETATION\nThe visualisation of a bar chart race is not as charming as Murdoch's code and [Flourish Team's template](https:\/\/app.flourish.studio\/@flourish\/bar-chart-race), since Matplotlib generates less dynamic sequences.\n\nCONTRIBUTIONS and COMMENTS\nAny contribution is welcomed in order to make this and similar visualisations better. \n","76c2cf8e":"Let's set the current year as 2018 and list the 15 most populous provinces in descending order. ","a867cd9e":"READING CSV FILE"}}