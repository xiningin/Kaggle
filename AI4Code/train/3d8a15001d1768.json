{"cell_type":{"d2e4f66e":"code","6073965a":"code","391233cd":"code","0c5cb12e":"code","c0cabff3":"code","42a94f5e":"code","f9067308":"code","04108687":"code","daa02792":"code","cae1b6f6":"code","24b00b41":"code","b83da0ce":"code","465d9471":"code","f06ed3fe":"code","b473fb19":"code","6d0f3579":"code","c9a9f0b2":"code","14f329fe":"code","6e55b97b":"code","17a95287":"code","273a810b":"code","98932cce":"code","6746cc7e":"code","c882acb3":"code","9b539557":"code","6dcd9a1f":"code","5fb6c58f":"code","c6ebaeec":"code","2f3b7254":"code","95eea392":"code","6936cfc6":"code","a5aed8ec":"code","bb574c16":"code","ae17d65a":"code","fb6132a6":"code","01c6e13f":"code","ffe094c5":"code","cc4fff40":"code","e9c548a8":"code","5a7f843c":"code","dac38049":"code","874b7a04":"markdown","6bacebe9":"markdown","92b7aa70":"markdown","9194dad4":"markdown","321ceb94":"markdown","17121327":"markdown","e31eb8f8":"markdown","1d0135ef":"markdown","192b8624":"markdown","3d99baaf":"markdown","9b64d98b":"markdown","ad35208f":"markdown","759c03c3":"markdown","3582796d":"markdown","a50975ce":"markdown","12dc27df":"markdown","63b41e8f":"markdown","258ad144":"markdown","40075e73":"markdown","e59c36ff":"markdown","26d4dfa4":"markdown","b22d5ec7":"markdown","7f224357":"markdown","384867d9":"markdown","80d1113e":"markdown","fc313142":"markdown","cfa112db":"markdown","807fd7cf":"markdown","4dad39cd":"markdown","ce756102":"markdown","cf1ba368":"markdown"},"source":{"d2e4f66e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns # seaborn plotting library\nimport matplotlib.pyplot as plt # plotting library\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6073965a":"# data \u0445\u0443\u0432\u044c\u0441\u0430\u0433\u0447\u0438\u0434 ..\/input\/house-prices-advanced-regression-techniques\/train.csv \u0444\u0430\u0439\u043b\u044b\u043d \u0434\u0430\u0442\u0430\u0433 \u0445\u0430\u0434\u0433\u0430\u043b\u0430\u0445\ndata = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")","391233cd":"# data \u0445\u0443\u0432\u044c\u0441\u0430\u0433\u0447\u0438\u0439\u043d \u0442\u043e\u043b\u0433\u043e\u0439 \u0445\u044d\u0441\u044d\u0433 \u0431\u0443\u044e\u0443 \u0434\u044d\u044d\u0434 \u0442\u0430\u043b\u044b\u043d \u0445\u044d\u0441\u0433\u0438\u0439\u0433 \u0445\u0430\u0440\u0443\u0443\u043b\u0430\u0445\ndata.head()","0c5cb12e":"# data \u0445\u0443\u0432\u044c\u0441\u0430\u0433\u0447\u0438\u0439\u043d \u0441\u04af\u04af\u043b \u0445\u044d\u0441\u044d\u0433 \u0431\u0443\u044e\u0443 \u0434\u043e\u043e\u0434 \u0442\u0430\u043b\u044b\u043d \u0445\u044d\u0441\u0433\u0438\u0439\u0433 \u0445\u0430\u0440\u0443\u0443\u043b\u0430\u0445\ndata.tail()","c0cabff3":"# data \u0445\u0443\u0432\u044c\u0441\u0430\u0433\u0447\u0438\u0434 \u0431\u0430\u0439\u0433\u0430\u0430 \u0434\u0430\u0442\u0430-\u043d \u0445\u044d\u043c\u0436\u044d\u044d (\u043c\u04e9\u0440, \u0431\u0430\u0433\u0430\u043d\u0430)\ndata.shape","42a94f5e":"# data \u0445\u0443\u0432\u044c\u0441\u0430\u0433\u0447\u0438\u0434 \u0431\u0430\u0439\u0433\u0430\u0430 \u0431\u0430\u0433\u0430\u043d\u044b \u043d\u044d\u0440\u0441\ndata.columns","f9067308":"# data \u0445\u0443\u0432\u044c\u0441\u0430\u0433\u0447\u0438\u0434 \u0431\u0430\u0439\u0433\u0430\u0430 \u0431\u0430\u0433\u0430\u043d\u044b \u043d\u044d\u0440, \u0434\u043e\u0442\u043e\u0440 \u043d\u044c \u0431\u0430\u0439\u0433\u0430\u0430 \u0443\u0442\u0433\u0430, \u0434\u0430\u0442\u0430 \u0442\u04e9\u0440\u04e9\u043b\ndata.info()","04108687":"# \u0422\u043e\u043e\u043d \u0443\u0442\u0433\u0430\u0442\u0430\u0439 \u0431\u0430\u0433\u0430\u043d\u0430 \u0431\u04af\u0440\u0438\u0439\u043d \u0442\u043e\u043e\u043d \u0443\u0442\u0433\u0430 \u0445\u0430\u0440\u0430\u0445\n# transpose() \u043d\u044c \u043c\u04e9\u0440 \u0431\u0430\u0433\u0430\u043d\u044b \u0431\u0430\u0439\u0440\u044b\u0433 \u0441\u043e\u043b\u0438\u0445\ndata.describe().transpose()","daa02792":"# Null value-\u043d \u0442\u043e\u043e\u043b\u043e\u0445\n# Null \u0431\u0430\u0439\u0433\u0430\u0430\u0433 \u043d\u044c \u0442\u043e\u043e\u043b\u0436 \u0438\u0445\u044d\u044d\u0441 \u043d\u044c \u0431\u0430\u0433\u0430 \u0443\u0440\u0443\u0443 \u043d\u044c \u0436\u0430\u0433\u0441\u0430\u0430\u0436 null_values \u0445\u0443\u0432\u044c\u0441\u0430\u0433\u0447\u0438\u0434 \u0445\u0430\u0434\u0433\u0430\u043b\u0430\u0445\nnull_values = data.isnull().sum().sort_values(ascending=False)\n\n# NOTE: isnull() \u043d\u044c Null \u0431\u0430\u0439\u0432\u0430\u043b 1, Null \u0431\u0438\u0448 \u0431\u0430\u0439\u0432\u0430\u043b 0 \u0433\u044d\u0441\u044d\u043d \u0443\u0442\u0433\u0430 \u0431\u0443\u0446\u0430\u0430\u043d\u0430\n\n# (Null \u0431\u0430\u0439\u0433\u0430\u0430 \u0442\u043e\u043e \/ \u0431\u04af\u0445 \u043c\u04e9\u0440\u0438\u0439\u043d \u0442\u043e\u043e) \u0438\u0445\u044d\u044d\u0441 \u043d\u044c \u0431\u0430\u0433\u0430 \u0443\u0440\u0443\u0443 \u0430\u043d\u0433\u0438\u043b\u0436 100-\u0440 \u04af\u0440\u0436\u04af\u04af\u043b\u044d\u043d \u0445\u0430\u0434\u0433\u0430\u043b\u0430\u0445\npercent = (data.isnull().sum()\/data.isnull().count()).sort_values(ascending=False)*100\npercent = percent[percent>0] # \u0445\u0443\u0432\u044c \u043d\u044c 0-\u0441 \u0438\u0445 \u0431\u0430\u0439\u0433\u0430\u0430\u0433 \u0445\u0430\u0434\u0433\u0430\u043b\u0430\u0445\npercent","cae1b6f6":"plt.figure(figsize=(12,6),dpi=200) # figsize - Plot \u0445\u044d\u043c\u0436\u044d\u044d, dpi - \u043d\u044f\u0433\u0442\u0430\u0440\u0448\u0438\u043b\nplt.xticks(rotation=90) # x \u0442\u044d\u043d\u0445\u043b\u044d\u0433\u0438\u0439\u043d \u0442\u0435\u043a\u0442 \u044d\u0440\u0433\u04af\u04af\u043b\u044d\u0445\nplt.axhline(50,color='r') # \u0433\u043e\u043b\u044b\u043d \u0437\u0443\u0440\u0430\u0430\u0441\nsns.barplot(x=percent.index,y=percent) # barplot","24b00b41":"# data-\u0441 \u0437\u04e9\u0432\u0445\u04e9\u043d object data type-\u0442\u0430\u0439 \u0431\u0430\u0433\u0430\u043d\u0443\u0443\u0434\u044b\u0433 \u0441\u043e\u043d\u0433\u043e\u043d \u0430\u0432\u0447 \u043c\u044d\u0434\u044d\u044d\u043b\u044d\u043b\u0438\u0439\u0433 \u043d\u044c \u0445\u0430\u0440\u0443\u0443\u043b\u0430\u0445\ndata[percent.index].select_dtypes(include = ['object']).info()","b83da0ce":"# data-\u0441 \u0437\u04e9\u0432\u0445\u04e9\u043d object data type-\u0442\u0430\u0439 \u0431\u0430\u0433\u0430\u043d\u0443\u0443\u0434\u044b\u043d \u043d\u044d\u0440\u0438\u0439\u0433 \u0441\u043e\u043d\u0433\u043e\u043d \u0430\u0432\u0447 columns_categor-\u0442 \u0445\u0430\u0434\u0433\u0430\u043b\u0430\u0445\ncolumns_categor = data[percent.index].select_dtypes(include = ['object']).columns\n\n# columns_categor-\u0442 \u0431\u0430\u0439\u0433\u0430\u0430 \u0431\u0430\u0433\u0430\u043d\u0443\u0443\u0434\u044b\u043d \u043d\u044d\u0440\u0442\u044d\u0439 data-\u043d\u0443\u0443\u0434\u044b\u043d null \u0443\u0442\u0433\u044b\u0433 'None' \u0433\u044d\u0445 \u0443\u0442\u0433\u0430\u0430\u0440 \u043d\u04e9\u0445\u04e9\u0445\ndata[columns_categor] = data[columns_categor].fillna('None')","465d9471":"# data-\u0441 float64', 'int64' data type-\u0442\u0430\u0439 \u0431\u0430\u0433\u0430\u043d\u0443\u0443\u0434\u044b\u0433 \u0441\u043e\u043d\u0433\u043e\u043d \u0430\u0432\u0447 \u043c\u044d\u0434\u044d\u044d\u043b\u044d\u043b\u0438\u0439\u0433 \u043d\u044c \u0445\u0430\u0440\u0443\u0443\u043b\u0430\u0445\ndata[percent.index].select_dtypes(include = ['float64', 'int64']).info()","f06ed3fe":"# data-\u0441 float64', 'int64' data type-\u0442\u0430\u0439 \u0431\u0430\u0433\u0430\u043d\u0443\u0443\u0434\u044b\u043d \u043d\u044d\u0440\u0438\u0439\u0433 \u0441\u043e\u043d\u0433\u043e\u043d \u0430\u0432\u0447 columns_numeric-\u0442 \u0445\u0430\u0434\u0433\u0430\u043b\u0430\u0445\ncolumns_numeric = data[percent.index].select_dtypes(include = ['float64', 'int64']).columns\n\n# columns_numeric-\u0442 \u0431\u0430\u0439\u0433\u0430\u0430 \u0431\u0430\u0433\u0430\u043d\u0443\u0443\u0434\u044b\u043d \u043d\u044d\u0440\u0442\u044d\u0439 data-\u043d\u0443\u0443\u0434\u044b\u043d null \u0443\u0442\u0433\u044b\u0433 0 \u0433\u044d\u0445 \u0443\u0442\u0433\u0430\u0430\u0440 \u043d\u04e9\u0445\u04e9\u0445\ndata[columns_numeric] = data[columns_numeric].fillna(0)","b473fb19":"plt.figure(figsize=(12,6),dpi=200)\nsns.histplot(data['SalePrice'],kde=True,color='r') # data.SalePrice \u0431\u0430\u0433\u0430\u043d\u044b histplot, \n\n# NOTE: kde - plot \u0434\u044d\u044d\u0440 \u0431\u0430\u0439\u0433\u0430\u0430 \u0437\u0443\u0440\u0430\u0430\u0441, color - \u04e9\u043d\u0433\u0438\u0439\u043d \u044d\u0445\u043d\u0438\u0439 \u04af\u0441\u0433\u0438\u0439\u0433 \u0431\u0438\u0447\u043d\u044d \u0416: 'r','g','b','y'","6d0f3579":"# SalePrice -\u043d Z Score \u0431\u043e\u0434\u043e\u0445\ndata['SalePrice_zscore'] = (data.SalePrice - data.SalePrice.mean()) \/ data.SalePrice.std()","c9a9f0b2":"# SalePrice_zscore-\u0433 \u0431\u0430\u0433\u0430\u0430\u0441 \u0438\u0445 \u0443\u0440\u0443\u0443 \u043d\u044c \u0436\u0430\u0433\u0441\u0430\u0430\u0436 \u044d\u0445\u043d\u0438\u0439 10-\u0433 \u0445\u0430\u0440\u0430\u0445\ndata.SalePrice_zscore.sort_values(ascending=True).head(10)","14f329fe":"# SalePrice_zscore-\u0433 \u0438\u0445\u044d\u044d\u0441 \u043d\u044c \u0431\u0430\u0433\u0430 \u0443\u0440\u0443\u0443 \u043d\u044c \u0436\u0430\u0433\u0441\u0430\u0430\u0436 \u044d\u0445\u043d\u0438\u0439 10-\u0433 \u0445\u0430\u0440\u0430\u0445\ndata.SalePrice_zscore.sort_values(ascending=False).head(10)","6e55b97b":"# SalePrice_zscore-\u043d absolute \u0443\u0442\u0433\u0430 \u043d\u044c 3-\u0441 \u0431\u0430\u0433\u0430 \u0431\u0430\u0439\u0445 \u0443\u0442\u0433\u0443\u0443\u0434\u044b\u0433 \u0445\u0430\u0434\u0433\u0430\u043b\u0430\u0436 \u0430\u0432\u0430\u0445\ndata = data[abs(data.SalePrice_zscore) < 3]\n# SalePrice_zscore-\u0433 \u0445\u044d\u0440\u044d\u0433\u043b\u044d\u0436 \u0434\u0443\u0443\u0441\u0441\u0430\u043d \u0431\u043e\u043b\u043e\u0445\u043e\u043e\u0440 \u0443\u0442\u0441\u0433\u0430\u0445\ndata = data.drop('SalePrice_zscore', axis=1)\n\n# NOTE: drop(('column_name' \/ row_index) , axis = (1 - column \/ 0 - row))\n#       \u0411\u0430\u0433\u0430\u043d\u0430 \u0443\u0441\u0442\u0433\u0430\u0445 \u0442\u043e\u0445\u0438\u043e\u043b\u0434\u043e\u043b\u0434 axis \u043d\u044c 1 \u0431\u0430\u0439\u0445 \n#       \u041c\u04e9\u0440 \u0443\u0441\u0442\u0433\u0430\u0445 \u0442\u043e\u0445\u0438\u043e\u043b\u0434\u043e\u043b\u0434 axis \u043d\u044c 0 \u0431\u0430\u0439\u0445 ","17a95287":"# correlation - Data \u0434\u0430\u0445\u044c \u0431\u04af\u0445 \u0442\u043e\u043e\u043d \u0443\u0442\u0433\u0443\u0443\u0434\u044b\u043d \u0445\u043e\u043e\u0440\u043e\u043d\u0434\u044b\u043d \u0445\u0430\u043c\u0430\u0430\u0440\u043b\u044b\u0433 \u043d\u044c \u04af\u043d\u044d\u043b\u044d\u0445\ncorrmat = data.corr()\n# SalePrice \u0431\u0430\u0433\u0430\u043d\u044b \u0431\u0443\u0441\u0430\u0434 \u0445\u0443\u0432\u044c\u0441\u0430\u0433\u0447\u0438\u0434\u0442\u0430\u0439 \u0445\u0430\u043c\u0430\u0430\u0440\u043b\u044b\u0433 \u043d\u044c \u0445\u0430\u043c\u0433\u0438\u0439\u043d \u0438\u0445 \u0431\u0430\u0439\u0433\u0430\u0430 3-\u0433 \u0445\u044d\u0432\u043b\u044d\u0445\ncorrmat.SalePrice.sort_values(ascending=False).head(3)","273a810b":"# SalePrice\/OverallQual \u0445\u0430\u0440\u044c\u0446\u0443\u0443\u043b\u0441\u0430\u043d plot\nsns.scatterplot(data = data, x='OverallQual', y='SalePrice')\nplt.axhline(y=200000,color='r')","98932cce":"# OverallQual > 8 \u0431\u0430\u0441 SalePrice < 200000 \u0431\u0430\u0433\u0430 \u0443\u0442\u0433\u044b\u043d SalePrice, OverallQual-\u0433 \u0445\u0430\u0440\u0430\u0445\ndata[(data['OverallQual']>8) & (data['SalePrice']<200000)][['SalePrice', 'OverallQual']]","6746cc7e":"sns.scatterplot(data=data,x='GrLivArea', y='SalePrice')\nplt.axhline(y=200000, color='r')\nplt.axvline(x=4000, color='r')","c882acb3":"data[(data['GrLivArea']>4000) & (data['SalePrice']<200000)][['SalePrice', 'GrLivArea']]","9b539557":"# OverallQual > 8 \u0431\u0430 SalePrice < 200000 \u0431\u0430\u0439\u0445 Data-\u043d index-\u0433 \u0445\u0430\u0434\u0433\u0430\u043b\u0430\u0445\ndrop_index = data[(data['OverallQual']>8) & (data['SalePrice']<200000)].index","6dcd9a1f":"# drop-\u043d axis \u043d\u044c 0 \u0433\u044d\u0434\u044d\u0433 \u043d\u044c index-\u0442\u044d\u0439 \u0431\u0430\u0439\u0433\u0430\u0430 \u043c\u04e9\u0440\u0438\u0439\u0433 \u0443\u0441\u0442\u0433\u0430\u0445\ndata=data.drop(drop_index, axis=0)","5fb6c58f":"data['SalePrice'].describe()","c6ebaeec":"plt.figure(figsize=(12,6),dpi=200)\nsns.histplot(data['SalePrice'],kde=True,color='g');","2f3b7254":"# data-\u043d \u0437\u04e9\u0432\u0445\u04e9\u043d object \u0442\u04e9\u0440\u043b\u0438\u0439\u043d \u0443\u0442\u0433\u0430\u0442\u0430\u0439 \u0431\u0430\u0433\u0430\u043d\u0443\u0443\u0434\u044b\u0433 \u0430\u0432\u0430\u0445\ndf_cat = data.select_dtypes('object')","95eea392":"plt.figure(figsize=(15,80),dpi=80)\n# df_cat \u0434\u043e\u0442\u043e\u0440 \u0431\u0430\u0439\u0433\u0430\u0430 \u0431\u0430\u0433\u0430\u043d\u0443\u0443\u0434\u044b\u0433 \u043d\u044d\u0433 \u043d\u044d\u0433\u044d\u044d\u0440 \u043d\u044c \u0434\u0430\u0432\u0442\u0430\u0436 \u0441ol \u0443\u0442\u0433\u0430\u043d\u0434 \u0430\u0432\u0430\u0445 loop\nfor col in enumerate(df_cat):\n    plt.subplot(int(len(df_cat.columns)\/2)+1,2,col[0]+1)     # subplot(rows, columns, number) \u043e\u043b\u043e\u043d Plot \u0437\u044d\u0440\u044d\u0433 \u0445\u0438\u0439\u0445\n    sns.boxplot(x = col[1], y = \"SalePrice\", data = data)\n    plt.tight_layout()                                       # plot \u0445\u043e\u043e\u0440\u043e\u043d\u0434\u044b\u043d \u0437\u0430\u0439\u0433 \u0448\u0430\u0445\u0443\u0443 \u0431\u043e\u043b\u0433\u043e\u0445\n    plt.xticks(rotation=90)\n","6936cfc6":"relatedCategoric = data[['MSZoning','Neighborhood',\n                         'ExterQual','BsmtQual','CentralAir',\n                         'KitchenQual','Heating','SalePrice']]","a5aed8ec":"plt.figure(figsize=(15,20),dpi=80)\nfor col in enumerate(relatedCategoric.columns[:-1]): # [:-1] \u0433\u044d\u0434\u044d\u0433 \u043d\u044c \u0441\u04af\u04af\u043b\u0438\u0439\u043d \u0431\u0430\u0433\u0430\u043d\u044b\u0433 \u0430\u0432\u0430\u0445\u0433\u04af\u0439 \u0433\u044d\u0441\u044d\u043d \u04af\u0433 \n    plt.xticks(rotation=90)\n    plt.subplot(int((len(relatedCategoric.columns)\/2))+1,2,col[0]+1)\n    sns.barplot(x = col[1], y = \"SalePrice\", data = data )\n    plt.tight_layout()","bb574c16":"df_num = data.select_dtypes(include = ['float64', 'int64'])","ae17d65a":"plt.figure(figsize=(15,80),dpi=80)\n# for loop \u043d\u044c 1-\u0441 SalePrice \u043e\u0440\u043e\u043e\u0433\u04af\u0439 df_num-\u043d \u0431\u0430\u0433\u0430\u043d\u0443\u0443\u0434\u044b\u0433 \u0442\u043e\u043e \u0445\u04af\u0440\u0442\u044d\u043b \u0434\u0430\u0445\u0438\u043d 3 3-\u0440 \u043d\u044d\u043c\u044d\u0433\u0434\u044d\u0436 \u0434\u0430\u0432\u0442\u0430\u043d\u0430\nfor i in range (1,len(df_num.drop('SalePrice',axis=1).columns),3):\n    sns.pairplot(x_vars=df_num.columns[i:i+3], y_vars = \"SalePrice\", data = data,height=6)\n    plt.tight_layout()\n    plt.xticks(rotation=90)\n\n# NOTE: pairplot \u043d\u044c \u043e\u043b\u043e\u043d X \u0443\u0442\u0433\u0430, \u043e\u043b\u043e\u043d Y \u0443\u0442\u0433\u0430 \u0430\u0432\u0447 \u0431\u043e\u043b\u043d\u043e","fb6132a6":"plt.figure(figsize=(12,6),dpi=200)\nrelatedNumeric = data[['OverallQual','YearBuilt','BsmtFinSF1','TotalBsmtSF','1stFlrSF','GrLivArea','GarageArea','SalePrice']]\nsns.pairplot(data=relatedNumeric,hue = 'SalePrice',diag_kind = 'kde',plot_kws = {'alpha': 0.6, 's': 80},\n             height = 4)","01c6e13f":"corrmat = data.corr()\ncorrmat.SalePrice.sort_values(ascending=False).head(20)","ffe094c5":"corr = df_num.corr()\nplt.figure(figsize=(12, 10))\n # heatmap-\u0434 -0.4 <= \u0445\u0430\u043c\u0430\u0430\u0440\u0430\u043b\u0442\u0430\u0439 \u0443\u0442\u0433\u0430 >= 0.5  \u0430\u0432\u0441\u0430\u043d\nsns.heatmap(corr[(corr >= 0.5) | (corr <= -0.4)], \n            cmap='viridis', vmax=1.0, vmin=-1.0, linewidths=0.1,\n            annot=True, annot_kws={\"size\": 8}, square=True);","cc4fff40":"# SalePrice-\u0442\u0430\u0439 0.5-\u0441 \u0438\u0445 \u0445\u0430\u043c\u0430\u0430\u0440\u0430\u043b\u0442\u0430\u0439 \u0445\u0443\u0432\u044c\u0441\u0430\u0433\u0447\u0434\u0438\u0439\u043d \u0445\u043e\u043e\u0440\u043e\u043d\u0434\u0438\u0439\u043d \u0445\u0430\u043c\u0430\u0430\u0440\u0430\u043b\ntop_corr_features = corrmat.index[abs(corrmat[\"SalePrice\"])>0.5]\nplt.figure(figsize=(10,10))\ng = sns.heatmap(data[top_corr_features].corr(),annot=True,cmap=\"RdYlGn\")","e9c548a8":"# SalePrice-\u0442\u0430\u0439 0.5-\u0441 \u0438\u0445 \u0445\u0430\u043c\u0430\u0430\u0440\u0430\u043b\u0442\u0430\u0439 \u0445\u0443\u0432\u044c\u0441\u0430\u0433\u0447\u0434\u0438\u0439\u043d salePrice-\u0442\u0430\u0439 \u0445\u0430\u0440\u0443\u0443\u043b\u0441\u0430\u043d Plot\nsns.pairplot(data=data, x_vars=df_num[top_corr_features[:5]],y_vars=['SalePrice'])\nsns.pairplot(data=data, x_vars=df_num[top_corr_features[5:]],y_vars=['SalePrice'])","5a7f843c":"# SalePrice-\u0434 \u0445\u0430\u043c\u0433\u0438\u0439\u043d \u0438\u0445\u044d\u044d\u0440 \u043d\u04e9\u043b\u04e9\u04e9\u043b\u0436 \u0431\u0443\u0439 \u0442\u043e\u043e\u043d \u0431\u0430\u0433\u0430\u043d\u0443\u0443\u0434\ntop_corr_features[:-1]","dac38049":"# SalePrice-\u0434 \u0445\u0430\u043c\u0433\u0438\u0439\u043d \u0438\u0445\u044d\u044d\u0440 \u043d\u04e9\u043b\u04e9\u04e9\u043b\u0436 \u0431\u0443\u0439 categorical \u0431\u0430\u0433\u0430\u043d\u0443\u0443\u0434\nrelatedCategoric.columns","874b7a04":"Categorical data \u0434\u044d\u044d\u0440 \u0443\u0442\u0433\u0430 \u0431\u0430\u0439\u0445\u0433\u04af\u0439 \u0431\u043e\u043b \u0430\u043b\u044c \u0447 category-\u0434 \u0445\u0430\u043c\u0430\u0430\u0440\u0430\u0433\u0434\u0430\u0445\u0433\u04af\u0439 \u0443\u0447\u0440\u0430\u0430\u0441 \u0443\u0442\u0433\u0438\u0439\u0433 \u043d\u044c \u0431\u0430\u0439\u0445\u0433\u04af\u0439 \u0431\u0443\u044e\u0443 'None'\u0433\u044d\u0436 \u04e9\u0433\u0447 \u0431\u043e\u043b\u043d\u043e","6bacebe9":"### Filling Null values ","92b7aa70":"## Data Preperation","9194dad4":"### Univariate analysis","321ceb94":"## Visialization\n","17121327":"### Dealing with missing data","e31eb8f8":"#### SalePrice\/OverallQual","1d0135ef":"#### Use Z_Score or Standard Deviation to find Outliers","192b8624":"#### Remove the outliers:\n","3d99baaf":"#### Removing the SalePrice ourliers","9b64d98b":"### Bivariate analysis","ad35208f":"## Conclusion","759c03c3":"Numeric data \u0434\u044d\u044d\u0440 \u0443\u0442\u0433\u0430 \u0431\u0430\u0439\u0445\u0433\u04af\u0439 \u0431\u043e\u043b \u0431\u0430\u0433\u0430\u043d\u044b \u0443\u0442\u0433\u0430\u0430\u0441 \u0448\u0430\u043b\u0442\u0433\u0430\u0430\u043b\u0430\u043d 0, 1, mean, median \u0443\u0442\u0433\u0430 \u04e9\u0433\u0447 \u0431\u043e\u043b\u043d\u043e","3582796d":"### SalePrice\/GrLivArea","a50975ce":"## Data Loading\n","12dc27df":"### Catergorical Data (object, string)","63b41e8f":"*Z Score:* ` (data - mean) \/ std `","258ad144":"## Descriptive analysis","40075e73":"### Data Understanding (SalesPrice)","e59c36ff":"### Finding Null Values","26d4dfa4":"#### Top corr values with SalePrice","b22d5ec7":"### Correlation","7f224357":"### Importing useful libraries","384867d9":"## Data Cleaning","80d1113e":"#### Top related categorical Features","fc313142":"### Most Related Numeric Features\n","cfa112db":"#### Categorical data (object, str) filling\n","807fd7cf":"#### Top related numerical Features","4dad39cd":"### Most related Categorical Features","ce756102":"### Numerical data (int, float)","cf1ba368":"## Outliers"}}