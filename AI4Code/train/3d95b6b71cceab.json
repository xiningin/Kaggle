{"cell_type":{"37acf3c5":"code","c7c5d3be":"code","7c844240":"code","46f751e4":"code","2613f184":"code","b574278a":"code","6adbc781":"code","4b13f497":"code","6322dbfb":"code","d3cf2178":"code","b418a6ba":"code","78302a9b":"code","ea5123c5":"code","88572162":"code","abfc8ced":"code","34c3b469":"code","7b2857ad":"code","f0e8c191":"code","dcdd50a4":"code","1eb0528c":"code","c3386bbf":"code","4568d89d":"code","06de9d98":"code","ae5bdcac":"code","d0ac4df6":"code","07afb056":"markdown","615b3995":"markdown","07805d05":"markdown","4f2352e5":"markdown","5687bfd4":"markdown","714d2194":"markdown","04e2dce2":"markdown","1898335d":"markdown","1fe2194a":"markdown","26ef032a":"markdown","9a729071":"markdown","93cf61d9":"markdown","a4729f8d":"markdown","72550dce":"markdown","32b92fd5":"markdown","af15cb01":"markdown","1114b7d1":"markdown","e1954fef":"markdown","669014eb":"markdown","9920e9c9":"markdown","47f8e981":"markdown","dccc2790":"markdown","3526023e":"markdown","e75a953e":"markdown"},"source":{"37acf3c5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime as dt\n\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5})\n\norders = pd.read_csv('..\/input\/olist_public_dataset_v2.csv')\n\n# converting to datetime\norders['order_purchase_timestamp'] = pd.to_datetime(orders.order_purchase_timestamp)\norders['order_aproved_at'] = pd.to_datetime(orders.order_aproved_at).dt.date  \norders['order_estimated_delivery_date'] = pd.to_datetime(orders.order_estimated_delivery_date).dt.date  \norders['order_delivered_customer_date'] = pd.to_datetime(orders.order_delivered_customer_date).dt.date  \n\n# get translations for category names\ntranslation = pd.read_csv('..\/input\/product_category_name_translation.csv')\norders = orders.merge(translation, on='product_category_name').drop('product_category_name', axis=1)\n\norders.head(3)","c7c5d3be":"orders = orders[['order_status', 'order_products_value',\n                 'order_freight_value', 'order_items_qty', 'order_sellers_qty',\n                 'order_purchase_timestamp', 'order_aproved_at', 'order_estimated_delivery_date', \n                 'order_delivered_customer_date', 'customer_state', \n                 'product_category_name_english', 'product_name_lenght', 'product_description_lenght', \n                 'product_photos_qty', 'review_score']]","7c844240":"# We keep the same proportion of classes\norders['review_score'].value_counts() \/ len(orders['review_score'])","46f751e4":"from sklearn.model_selection import train_test_split\n\n# split\ntrain_set, test_set = train_test_split(orders, test_size=0.2, random_state=42)","2613f184":"test_set['review_score'].value_counts() \/ len(test_set['review_score'])","b574278a":"from sklearn.model_selection import StratifiedShuffleSplit\n\n# Stratified Split\nsplit = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nfor train_index, test_index in split.split(orders, orders['review_score']):\n    strat_train_set = orders.loc[train_index]\n    strat_test_set = orders.loc[test_index]","6adbc781":"strat_train_set['review_score'].value_counts() \/ len(strat_train_set['review_score'])","4b13f497":"orders_features = strat_train_set.drop('review_score', axis=1)\norders_labels = strat_train_set['review_score'].copy()","6322dbfb":"corr_matrix = strat_train_set.corr()\ncorr_matrix['review_score'].sort_values(ascending=False)","d3cf2178":"#plt.figure(figsize=(20,5))\n#sns.heatmap(corr_matrix)\n#plt.show()","b418a6ba":"# To consider Brazilian calendar and hollidays\n!pip install workalendar\nfrom workalendar.america import Brazil\ncal = Brazil()","78302a9b":"from sklearn.base import BaseEstimator, TransformerMixin\n\nclass AttributesAdder(BaseEstimator, TransformerMixin):\n    def __init__(self):\n        pass    \n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        df = X.copy()\n        \n        # Calculate the estimated delivery time and actual delivery time in working days. \n        # This would allow us to exclude hollidays that could influence delivery times.\n        # If the order_delivered_customer_date is null, it returns 0.\n        df['wd_estimated_delivery_time'] = df.apply(lambda x: cal.get_working_days_delta(x.order_aproved_at, \n                                                                                      x.order_estimated_delivery_date), axis=1)\n        df['wd_actual_delivery_time'] = df.apply(lambda x: cal.get_working_days_delta(x.order_aproved_at, \n                                                                                   x.order_delivered_customer_date), axis=1)\n\n        # Calculate the time between the actual and estimated delivery date. If negative was delivered early, if positive was delivered late.\n        df['wd_delivery_time_delta'] = df.wd_actual_delivery_time - df.wd_estimated_delivery_time\n\n\n        # Calculate the time between the actual and estimated delivery date. If negative was delivered early, if positive was delivered late.\n        df['is_late'] = df.order_delivered_customer_date > df.order_estimated_delivery_date\n        \n        # Calculate the average product value.\n        df['average_product_value'] = df.order_products_value \/ df.order_items_qty\n\n        # Calculate the total order value\n        df['total_order_value'] = df.order_products_value + df.order_freight_value\n        \n        # Calculate the order freight ratio.\n        df['order_freight_ratio'] = df.order_freight_value \/ df.order_products_value\n        \n        # Calculate the order freight ratio.\n        df['purchase_dayofweek'] = df.order_purchase_timestamp.dt.dayofweek\n                       \n        # With that we can remove the timestamps from the dataset\n        cols2drop = ['order_purchase_timestamp', 'order_aproved_at', 'order_estimated_delivery_date', \n                     'order_delivered_customer_date']\n        df.drop(cols2drop, axis=1, inplace=True)\n        \n        return df","ea5123c5":"# Executing the estimator we just created\nattr_adder = AttributesAdder()\nfeat_eng = attr_adder.transform(strat_train_set)\nfeat_eng.head(3)","88572162":"corr_matrix = feat_eng.corr()\ncorr_matrix['review_score'].sort_values(ascending=False)","abfc8ced":"feat_eng.info()","34c3b469":"# selecting the numerical and text attributes\ncat_attribs = ['order_status', 'customer_state', 'product_category_name_english']\nnum_attribs = orders_features.drop(cat_attribs, axis=1).columns","7b2857ad":"class DataFrameSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, attribute_names):\n        self.attribute_names = attribute_names\n    \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X, y=None):\n        return X[self.attribute_names]","f0e8c191":"from sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\n# for now we wont work with categorical data. Planning to add it on next releases\nnum_pipeline = Pipeline([('selector', DataFrameSelector(num_attribs)),\n                         ('attribs_adder', AttributesAdder()),\n                         ('std_scaller', StandardScaler())\n                        ])","dcdd50a4":"# lets see how the resulting data looks like\norders_features_prepared = num_pipeline.fit_transform(orders_features)\norders_features_prepared","1eb0528c":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nlin_reg.fit(orders_features_prepared, orders_labels)","c3386bbf":"some_data = orders_features.iloc[:8]\nsome_labels = orders_labels.iloc[:8]\nsome_data_prepared = num_pipeline.transform(some_data)","4568d89d":"print('Predicted: {} \\n Labels: {}'.format(list(lin_reg.predict(some_data_prepared)), list(some_labels.values)))","06de9d98":"from sklearn.metrics import mean_squared_error\n\npredictions = lin_reg.predict(orders_features_prepared)\nlin_mse = mean_squared_error(orders_labels, predictions)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","ae5bdcac":"from sklearn.ensemble import RandomForestRegressor\n\nforest_reg = RandomForestRegressor()\nforest_reg.fit(orders_features_prepared, orders_labels)\n\npredictions = forest_reg.predict(orders_features_prepared)\nforest_mse = mean_squared_error(orders_labels, predictions)\nforest_rmse = np.sqrt(forest_mse)\nforest_rmse","d0ac4df6":"print('Predicted: {} \\n Labels: {}'.format(list(forest_reg.predict(some_data_prepared)), list(some_labels.values)))","07afb056":"Much better! We got a typical error of 0.53 with Random Forest. Looks like it's a good algorithm! Let's see some examples of predictions.","615b3995":"# d. Feature Engineering\nIf we see the original data there aren't many columns that are correlated to target.","07805d05":"Looks like we are not even close to predicting the right values. Lets see whats the root mean squared error.","4f2352e5":"By doing a stratified split we keep the same proportion between classes. This split better represent the original data and will possibli reduce any bias. ","5687bfd4":"## Numerical Attributes\nCreating pipelines to handle unseen data","714d2194":"It's clear that we have to create more informative features to model this problem.\n\n## Features Hypotesis\n\n#### Working Days Estimated Delivery Time\nGets the days between order approval and estimated delivery date. A customer might be unsatisfied if he is told that the estimated time is big.\n\n#### Working Days Actual Delivery Time\nGets the days between order approval and delivered customer date. A customer might be more satisfied if he gets the product faster.\n\n#### Working Days Delivery Time Delta\nThe difference between the actual and estimated date.  If negative was delivered early, if positive was delivered late. A customer might be more satisfied if the order arrives sooner than expected, or unhappy if he receives after the deadline\n\n#### Is Late\nBinary variable indicating if the order was delivered after the estimated date.\n\n#### Average Product Value\nCheaper products might have lower quality, leaving customers unhappy.\n\n#### Total Order Value\nIf a customer expends more, he might expect a better order fulfilment.\n\n#### Order Freight Ratio\nIf a customer pays more for freight, he might expect a better service.\n\n#### Purchase Day of Week\nDoes it affect how happy are the customers?","04e2dce2":"# c. Separate Labels From Features\nWe don't wanto to apply any transformation to the labels (review_score). To avoid that we just create a separate serie with labels, and drop the target column from features dataset.","1898335d":"### Correlation\nWhat is the correlation of the features we have just created with the review score?","1fe2194a":"### New Features - Working Days\nAnalysing the dataframe we see that the new features were succesfully created.","26ef032a":"# a. Drop columns\nSome columns have information about the review given by a customer (review_coment_message, review_creation_date, etc), but we don't want to use that. Our experiment assumes we don't have any information about the review, so we need to predict the score before a customer writes it. There are also some columns that are unninformative to predict the customer satisfaction.","9a729071":"# g. Selecting a Model\nStart simple.\n\n## Linear Regression","93cf61d9":"# f. Dealing with Categorical and Numerical Attributes\nThe way we handle categorical data is very different from the transformations needed for numerical features. We will create a transformer to select only categorical or numerical features for processing.","a4729f8d":"We see there is some difference between the proportion of each class compared to the original dataset.\n\n## Stratified Split\nNow lets do a stratified shuffle split and compare to the full dataset again.","72550dce":"# Predicting Customer Satisfaction - Ecommerce Data\nOlist has released a dataset of 100k orders made between 2016 and 2018. Lets create a model to predict what's the score a customer will give for an order.","32b92fd5":"## Simple split\nLets first try a simple random split and lets see if the proportions are kept equal.","af15cb01":"## Creating a Custom Transformer for FeatEng\nWe need to guarantee that we are apply exactly the same transformation to new\/unseen data. To do that we will create custom transformers using scikit-learn BaseEstimator.\n\nThis first custom transformer will do the feature engineering that we just described earlier.","1114b7d1":"# 2. Defining the Problem\nLet's say your manager asked you: \n\n**\"What is the probable score that we getting from customers?\"**\n\nOur problem is to find a way to estimate, based on data about the product and order, what will be the customer review score.\n\n# 3. The hypothesis\nOur main hypothesis is that the product and how the order was fulfilled might influence the customer review score. Keep in mind that each feature we create is a new hypothesis we are testing.","e1954fef":"# 4. Designing an Experiment\nTo answer that question we must implement collect data from each order up to delivery phase. With that, we should implement a model that estimates what will be the score given by the customer at the review phase.\n\n![frame the problem](https:\/\/i.imgur.com\/MTLzY55.png)\n\n####  How would you frame this problem? \nIf you would try a different approach, please leave a comment or write a kernel!\n","669014eb":"# 1. Exploratory Data Analysis\nSome **EDAs (Exploratory Data Analysis)** were already made by other users and are publicly available at the dataset's kernels. That's why we're going to skip much of the EDA and jump into the problem[](http:\/\/). We recommend the following EDAs:\n* [E-Commerce Exploratory Analysis](https:\/\/www.kaggle.com\/jsaguiar\/e-commerce-exploratory-analysis) by [Aguiar](https:\/\/www.kaggle.com\/jsaguiar)\n* [Data Cleaning, Viz and Stat Analysis on e-com](https:\/\/www.kaggle.com\/goldendime\/data-cleaning-viz-and-stat-analysis-on-e-com) by [Azim Salikhov](https:\/\/www.kaggle.com\/goldendime)\n\nThose analysis help us understand what is happening with data. After we are confortable with it, and confident of its value we may start working on bigger problems. ","9920e9c9":"Looks ok, there aren't any strong correlation. But it is clear that if a customer will give a lower score if he gets an order after the estimated date. \n\n## Any missing values?\nLet's see if there are any missing values.","47f8e981":"# b. Spliting the Dataset\nIt is important that we split our data at the very beginning of our analysis. Doing that after might introduce some unwanted bias. \n\n> To split correctly, lets first see how classes are distributed over the full dataset.","dccc2790":"Great! No missing values after this transformation!\n\n# e. Data Viz\nNow let's visually explore this dataset a little bit!","3526023e":"# Next steps\n\n1. Cross validation\n2. Grid search\n3. Full pipeline - transform and predict data\n4. Validation on test set\n5. Constructing a conclusion","e75a953e":"A typical prediction error of about 1.25 is not at all satisfying when we are trying to predict values that range from 1 to 5.  So let's try a different model."}}