{"cell_type":{"0169e8ba":"code","2a03e9cd":"code","4cd3f0cd":"code","c2e12f1d":"code","e0c4ceb9":"code","571e83c8":"code","c3b76372":"code","fbf24029":"code","9a602395":"code","c673c900":"code","29dab84a":"code","db24c334":"code","2d55273c":"code","bbfe4d81":"code","bed41925":"code","9c764d05":"code","fb8fe31a":"code","e5a3385c":"code","b21268c3":"code","b5ff0fde":"code","c0f2161f":"code","e0c13b0f":"code","bac19371":"code","bf9c37ca":"code","588a8236":"code","45cbf1c3":"code","965baf2c":"code","c9b2767d":"code","e312686f":"code","1e6c4494":"code","5d54fb50":"code","44445fc7":"code","f3865ba2":"code","3c84db5a":"code","055158a8":"code","ff95cfcf":"code","b1a078f9":"code","b015fe51":"code","d6207f4a":"code","01f6a374":"code","5e3491b2":"code","5ea91f7f":"code","a3d7a199":"code","87ad4845":"code","989b9ffe":"code","d3e9a438":"code","2dadb0ec":"code","56094878":"code","1ff4d2a2":"code","6c7bfcb8":"code","18232671":"code","1fd75996":"code","3c363c33":"code","ae4d7d00":"code","946c6534":"code","beb90b6e":"code","2f482c56":"code","57c0e5ff":"code","5a51a9ef":"code","9c20ccec":"code","6a794822":"code","aa69fa2a":"code","f46d7b58":"code","0ce4022c":"code","660cae37":"code","d7f22464":"code","72f7f33a":"code","6e083826":"code","147dce18":"code","625c3f66":"code","67f97757":"code","d6941b6d":"code","7f14b2f7":"code","77fe8f09":"code","8cf09c1d":"markdown","36e414a4":"markdown","3de22829":"markdown","bfbb3049":"markdown","6a37bfb4":"markdown","fbc720ba":"markdown","b1273a16":"markdown","82c34fac":"markdown","ce2cda7c":"markdown","067def3c":"markdown","a647a80b":"markdown","89e190cc":"markdown","8f86a450":"markdown","064188c1":"markdown","f3d7aab4":"markdown","acd4fe68":"markdown","6c0d7fc6":"markdown","cd0f87fe":"markdown","d45d22de":"markdown","f9125e34":"markdown","6be23f5e":"markdown"},"source":{"0169e8ba":"!pip install selenium\n!pip install webdriver-manager\n!pip install openpyxl\n!pip install xlrd\n!pip install xlrd==1.2.0","2a03e9cd":"import pandas as pd\nimport numpy as np\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom webdriver_manager.chrome import ChromeDriverManager\nfrom webdriver_manager.utils import ChromeType\nfrom selenium import webdriver\nimport csv","4cd3f0cd":"# %%time\n# tarih=[]\n# toplam_test=[]\n# toplam_vaka=[]\n# toplam_vefat=[]\n# pneumonia=[]\n# agir_hasta=[]\n# iyilesen=[]\n# bugun_vaka=[]\n# bugun_hasta=[]\n# bugun_test=[]\n# bugun_vefat=[]\n# bugun_iyilesen=[]\n\n\n# #options = webdriver.ChromeOptions()\n# #options.binary_location = \"C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\"\n# #chrome_driver_binary = r\"C:\\Users\\Nafiz\\Python\\chromedriver_win32\\chromedriver.exe\"\n# #driver = webdriver.Chrome(chrome_driver_binary, options=options)\n# driver = webdriver.Chrome(ChromeDriverManager(chrome_type=ChromeType.GOOGLE).install())\n\n# base_url = str(\"https:\/\/covid19.saglik.gov.tr\/TR-66935\/genel-koronavirus-tablosu.html\")\n# driver.get(base_url)\n\n# rows = 1 + len(driver.find_elements_by_xpath(\"\/html\/body\/div[1]\/section[2]\/div\/table\/tbody\/tr\"))\n\n\n# tables = WebDriverWait(driver,20).until(EC.presence_of_all_elements_located((By.XPATH,\"\/\/*[@id='TumVerileriGetir']\")))\n\n# for table in tables:\n\n#     for r in range(1, rows):\n        \n#         tarih.append(\n#             driver.find_element_by_xpath(\"\/html\/body\/div[1]\/section[2]\/div\/table\/tbody\/tr[\" + str(r) + \"]\/td[1]\").get_attribute('textContent').strip())\n\n#         toplam_test.append(\n#             driver.find_element_by_xpath(\"\/html\/body\/div[1]\/section[2]\/div\/table\/tbody\/tr[\" + str(r) + \"]\/td[2]\").get_attribute('textContent').strip())\n\n#         toplam_vaka.append(\n#             driver.find_element_by_xpath(\"\/html\/body\/div[1]\/section[2]\/div\/table\/tbody\/tr[\" + str(r) + \"]\/td[3]\").get_attribute('textContent').strip())\n        \n#         toplam_vefat.append(\n#             driver.find_element_by_xpath(\"\/html\/body\/div[1]\/section[2]\/div\/table\/tbody\/tr[\" + str(r) + \"]\/td[4]\").get_attribute('textContent').strip())\n        \n#         pneumonia.append(\n#             driver.find_element_by_xpath(\n#                 \"\/html\/body\/div[1]\/section[2]\/div\/table\/tbody\/tr[\" + str(r) + \"]\/td[5]\").get_attribute('textContent').strip())\n        \n#         agir_hasta.append(\n#             driver.find_element_by_xpath(\n#                 \"\/html\/body\/div[1]\/section[2]\/div\/table\/tbody\/tr[\" + str(r) + \"]\/td[6]\").get_attribute('textContent').strip())\n        \n#         iyilesen.append(\n#             driver.find_element_by_xpath(\n#                 \"\/html\/body\/div[1]\/section[2]\/div\/table\/tbody\/tr[\" + str(r) + \"]\/td[7]\").get_attribute('textContent').strip())\n        \n#         bugun_vaka.append(\n#             driver.find_element_by_xpath(\n#                 \"\/html\/body\/div[1]\/section[2]\/div\/table\/tbody\/tr[\" + str(r) + \"]\/td[8]\").get_attribute('textContent').strip())\n        \n#         bugun_hasta.append(\n#             driver.find_element_by_xpath(\n#                 \"\/html\/body\/div[1]\/section[2]\/div\/table\/tbody\/tr[\" + str(r) + \"]\/td[9]\").get_attribute('textContent').strip())\n        \n#         bugun_test.append(\n#             driver.find_element_by_xpath(\n#                 \"\/html\/body\/div[1]\/section[2]\/div\/table\/tbody\/tr[\" + str(r) + \"]\/td[10]\").get_attribute('textContent').strip())\n        \n#         bugun_vefat.append(\n#             driver.find_element_by_xpath(\n#                 \"\/html\/body\/div[1]\/section[2]\/div\/table\/tbody\/tr[\" + str(r) + \"]\/td[11]\").get_attribute('textContent').strip())\n        \n#         bugun_iyilesen.append(\n#             driver.find_element_by_xpath(\n#                 \"\/html\/body\/div[1]\/section[2]\/div\/table\/tbody\/tr[\" + str(r) + \"]\/td[12]\").get_attribute('textContent').strip())\n\n\n\n# df = pd.DataFrame({\"Tarih\":tarih, \n#                    \"Toplam Test Say\u0131s\u0131\":toplam_test, \n#                    \"Toplam Vaka Say\u0131s\u0131\":toplam_vaka, \n#                    \"Toplam Vefat Say\u0131s\u0131\":toplam_vefat,\n#                    \"Hastalarda Zat\u00fcrre Oran\u0131 (%)\":pneumonia, \n#                    \"A\u011f\u0131r Hasta Say\u0131s\u0131\":agir_hasta, \n#                    \"Toplam \u0130yile\u015fen Hasta Say\u0131s\u0131\": iyilesen, \n#                    \"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\": bugun_vaka,\n#                    \"Bug\u00fcnk\u00fc Hasta Say\u0131s\u0131\":bugun_hasta, \n#                    \"Bug\u00fcnk\u00fc Test Say\u0131s\u0131\":bugun_test, \n#                    \"Bug\u00fcnk\u00fc Vefat Say\u0131s\u0131\":bugun_vefat, \n#                    \"Bug\u00fcnk\u00fc \u0130yile\u015fen Say\u0131s\u0131\":bugun_iyilesen})\n\n# df.to_excel(\"covid19_data.xlsx\", index=False, encoding=\"utf-8-sig\")","c2e12f1d":"csv = '..\/input\/covid-tr\/covid19_data.xlsx'\ncovid_tr = pd.read_excel(csv, engine=\"openpyxl\", thousands=\".\")\ndf = covid_tr.copy()    ","e0c4ceb9":"df.head()","571e83c8":"df.info()","c3b76372":"df.isnull().sum()","fbf24029":"df[\"Toplam Test Say\u0131s\u0131\"] = df[\"Toplam Test Say\u0131s\u0131\"].fillna(0).astype(int)\ndf[\"Toplam Vaka Say\u0131s\u0131\"] = df[\"Toplam Vaka Say\u0131s\u0131\"].fillna(0).astype(int)\n\ndf[\"Toplam Vefat Say\u0131s\u0131\"] = df[\"Toplam Vefat Say\u0131s\u0131\"].fillna(0).astype(int)\n\ndf[\"Hastalarda Zat\u00fcrre Oran\u0131 (%)\"] = df[\"Hastalarda Zat\u00fcrre Oran\u0131 (%)\"].str.replace(',', '.', regex=True).fillna(0).astype(float)\n\ndf[\"A\u011f\u0131r Hasta Say\u0131s\u0131\"] = df[\"A\u011f\u0131r Hasta Say\u0131s\u0131\"].fillna(0).astype(int)\n\ndf[\"Toplam \u0130yile\u015fen Hasta Say\u0131s\u0131\"] = df[\"Toplam \u0130yile\u015fen Hasta Say\u0131s\u0131\"].fillna(0).astype(int)\n\ndf[\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\"] = df[\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\"].fillna(0).astype(int)\ndf[\"Bug\u00fcnk\u00fc Hasta Say\u0131s\u0131\"] = df[\"Bug\u00fcnk\u00fc Hasta Say\u0131s\u0131\"].fillna(0).astype(int)\ndf[\"Bug\u00fcnk\u00fc Test Say\u0131s\u0131\"] = df[\"Bug\u00fcnk\u00fc Test Say\u0131s\u0131\"].fillna(0).astype(int)\ndf[\"Bug\u00fcnk\u00fc Vefat Say\u0131s\u0131\"] = df[\"Bug\u00fcnk\u00fc Vefat Say\u0131s\u0131\"].fillna(0).astype(int)\ndf[\"Bug\u00fcnk\u00fc \u0130yile\u015fen Say\u0131s\u0131\"] = df[\"Bug\u00fcnk\u00fc \u0130yile\u015fen Say\u0131s\u0131\"].fillna(0).astype(int)","9a602395":"months = {'monthStr':  [' OCAK ', ' \u015eUBAT ', ' MART ', ' N\u0130SAN ', ' MAYIS ', ' HAZ\u0130RAN ', ' TEMMUZ ', ' A\u011eUSTOS ',' EYL\u00dcL ',' EK\u0130M ', ' KASIM ', ' ARALIK '],\n          'monthInt': ['-01-','-02-','-03-','-04-','-05-','-06-','-07-','-08-','-09-','-10-','-11-','-12-']\n         }\nfor i, j in df.iterrows():\n    for k in range(12):\n        df[\"Tarih\"].loc[i] = df[\"Tarih\"].loc[i].replace(months[\"monthStr\"][k], months[\"monthInt\"][k])","c673c900":"import datetime\n\ndef date_convert(date_to_convert):\n     return datetime.datetime.strptime(date_to_convert, \"%d-%m-%Y\").strftime(\"%Y-%m-%d\")\n    \ndf['Tarih'] = df['Tarih'].apply(date_convert)","29dab84a":"df = df[::-1].reset_index(drop=True)\n\ndf['Tarih'] = pd.to_datetime(df['Tarih'], format='%Y-%m-%d')\n\ndf['Tarih'] = pd.to_datetime(df['Tarih']).dt.date","db24c334":"for i in range(len(df[:259])):\n    if(i == 0):\n        df[\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\"].loc[i] = 1\n    else:\n        a = df[\"Toplam Vaka Say\u0131s\u0131\"].loc[i+1] - df[\"Toplam Vaka Say\u0131s\u0131\"].loc[i]\n        df[\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\"].loc[i+1] = a","2d55273c":"df","bbfe4d81":"import matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib import dates\nfrom matplotlib.dates import DateFormatter","bed41925":"new_df = df.copy()\nnew_df.index = new_df[\"Tarih\"]\nnew_df.index = pd.DatetimeIndex(new_df.index)\nnew_df.drop([\"Tarih\"], axis=1, inplace=True)","9c764d05":"list_select=[\"Toplam Vaka Say\u0131s\u0131\", \"Toplam Test Say\u0131s\u0131\", \"Toplam Vefat Say\u0131s\u0131\"]\n\nfig, ax = plt.subplots(figsize=(25,5))\nplt.title(\"Toplam Vaka Say\u0131s\u0131\", fontsize=18)\nax.get_yaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax.plot(new_df[\"Toplam Vaka Say\u0131s\u0131\"],lw=5,color=\"#FF0000\")\n\n\nfig, ax = plt.subplots(figsize=(25,5))\nplt.title(\"Toplam Test Say\u0131s\u0131\", fontsize=18)\nax.get_yaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax.plot(new_df[\"Toplam Test Say\u0131s\u0131\"],\"--\",lw=5,color=\"#8E44AD\")\n\n\nfig, ax = plt.subplots(figsize=(25,5))\nplt.title(\"Toplam Vefat Say\u0131s\u0131\", fontsize=18)\nax.get_yaxis().set_major_formatter(matplotlib.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))\nax.plot(new_df[\"Toplam Vefat Say\u0131s\u0131\"],\"-.\",lw=5,color=\"#008000\")","fb8fe31a":"from statsmodels.tsa.stattools import adfuller\ndef testStationarity(ts):\n    dftest = adfuller(ts)\n    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    return dfoutput","e5a3385c":"print(\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\")\nprint(testStationarity(new_df[\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\"]))\n\nprint(\"Bug\u00fcnk\u00fc Hasta Say\u0131s\u0131\")\nprint(testStationarity(new_df[\"Bug\u00fcnk\u00fc Hasta Say\u0131s\u0131\"]))\n\nprint(\"Bug\u00fcnk\u00fc Vefat Say\u0131s\u0131\")\nprint(testStationarity(new_df[\"Bug\u00fcnk\u00fc Vefat Say\u0131s\u0131\"]))","b21268c3":"df.corr()","b5ff0fde":"!pip install pmdarima","c0f2161f":"from pmdarima.arima import auto_arima\nimport statsmodels.api as sm","e0c13b0f":"b_vaka_df = new_df[\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\"]\nb_vaka_df = pd.DataFrame(b_vaka_df)\n\nresults = auto_arima(b_vaka_df, start_p=1, start_q=1, max_p=3, max_q=3, m=12, start_P=0, seasonal=True, d=1, D=1, trace=True, error_action='ignore', \n                     suppress_warnings=True, stepwise=True)\n\n\nmod = sm.tsa.statespace.SARIMAX(b_vaka_df,\n                                order=results.order,\n                                seasonal_order=results.seasonal_order,\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults_vaka = mod.fit()\n\n\nresults_vaka.plot_diagnostics(figsize=(14,10))\nplt.show()","bac19371":"b_hasta_df = new_df[\"Bug\u00fcnk\u00fc Hasta Say\u0131s\u0131\"]\nb_hasta_df = pd.DataFrame(b_hasta_df)\n\nresults = auto_arima(b_hasta_df, start_p=1, start_q=1, max_p=3, max_q=3, m=12, start_P=0, seasonal=True, d=1, D=1, trace=True, error_action='ignore', \n                     suppress_warnings=True, stepwise=True)\n\nmod = sm.tsa.statespace.SARIMAX(b_hasta_df,\n                                order=results.order,\n                                seasonal_order=results.seasonal_order,\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\n\nresults_hasta = mod.fit()\n\nresults_hasta.plot_diagnostics(figsize=(14,10))\nplt.show()","bf9c37ca":"b_vefat_df = new_df[\"Bug\u00fcnk\u00fc Vefat Say\u0131s\u0131\"]\nb_vefat_df = pd.DataFrame(b_vefat_df)\n\nresults = auto_arima(b_vefat_df, start_p=1, start_q=1, max_p=3, max_q=3, m=12, start_P=0, seasonal=True, d=1, D=1, trace=True, error_action='ignore', \n                     suppress_warnings=True, stepwise=True)\n\nmod = sm.tsa.statespace.SARIMAX(b_vefat_df,\n                                order=results.order,\n                                seasonal_order=results.seasonal_order,\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\n\nresults_vefat = mod.fit()\n\n\nresults_vefat.plot_diagnostics(figsize=(14,10))\nplt.show()","588a8236":"#BUG\u00dcNK\u00dc VAKA SAYISI\npred_vaka = results_vaka.get_prediction(start=pd.to_datetime('2021-03-01'),dynamic=False)\npred_vaka_ci = pred_vaka.conf_int()\n\npred_vaka_ci['Predicted'] = (pred_vaka_ci['lower Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131'] + pred_vaka_ci['upper Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131'])\/2\npred_vaka_ci['Observed'] = b_vaka_df['Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131']\npred_vaka_ci['Diff, %%'] = ((pred_vaka_ci['Predicted'] \/ pred_vaka_ci['Observed'])-1) * 100\npred_vaka_ci.head()","45cbf1c3":"#BUG\u00dcNK\u00dc HASTA SAYISI\npred_hasta = results_hasta.get_prediction(start=pd.to_datetime('2021-03-01'),dynamic=False)\npred_hasta_ci = pred_hasta.conf_int()\n\npred_hasta_ci['Predicted'] = (pred_hasta_ci['lower Bug\u00fcnk\u00fc Hasta Say\u0131s\u0131'] + pred_hasta_ci['upper Bug\u00fcnk\u00fc Hasta Say\u0131s\u0131'])\/2\npred_hasta_ci['Observed'] = b_hasta_df['Bug\u00fcnk\u00fc Hasta Say\u0131s\u0131']\npred_hasta_ci['Diff, %%'] = ((pred_hasta_ci['Predicted'] \/ pred_hasta_ci['Observed'])-1) * 100\npred_hasta_ci.head()","965baf2c":"#BUG\u00dcNK\u00dc VEFAT SAYISI\npred_vefat = results_vefat.get_prediction(start=pd.to_datetime('2021-03-01'),dynamic=False)\npred_vefat_ci = pred_vefat.conf_int()\n\npred_vefat_ci['Predicted'] = (pred_vefat_ci['lower Bug\u00fcnk\u00fc Vefat Say\u0131s\u0131'] + pred_vefat_ci['upper Bug\u00fcnk\u00fc Vefat Say\u0131s\u0131'])\/2\npred_vefat_ci['Observed'] = b_vefat_df['Bug\u00fcnk\u00fc Vefat Say\u0131s\u0131']\npred_vefat_ci['Diff, %%'] = ((pred_vefat_ci['Predicted'] \/ pred_vefat_ci['Observed'])-1) * 100\npred_vefat_ci.head()","c9b2767d":"fig, ax = plt.subplots(figsize=(25,5))\nplt.suptitle('SARIMAX', fontsize = 20)\nplt.title(\"2021 Mart-Nisan Ger\u00e7ek ve Tahmin Vaka Say\u0131lar\u0131\")\nax.plot(pred_vaka_ci['Observed'],lw=2,color=\"#008000\")\nax.plot(pred_vaka_ci['Predicted'],lw=2,color=\"#FF0000\")\nax.legend(['Ger\u00e7ek','Tahmin'])\n\nfig, ax = plt.subplots(figsize=(25,5))\nplt.title(\"2021 Mart-Nisan Ger\u00e7ek ve Tahmin Hasta Say\u0131lar\u0131\")\nax.plot(pred_hasta_ci['Observed'],lw=2,color=\"#008000\")\nax.plot(pred_hasta_ci['Predicted'],lw=2,color=\"#FF0000\")\nax.legend(['Ger\u00e7ek','Tahmin'])\n\nfig, ax = plt.subplots(figsize=(25,5))\nplt.title(\"2021 Mart-Nisan Ger\u00e7ek ve Tahmin Vefat Say\u0131lar\u0131\")\nax.plot(pred_vefat_ci['Observed'],lw=2,color=\"#008000\")\nax.plot(pred_vefat_ci['Predicted'],lw=2,color=\"#FF0000\")\nax.legend(['Ger\u00e7ek','Tahmin'])\nplt.show()","e312686f":"from dateutil.relativedelta import relativedelta","1e6c4494":"#BUG\u00dcNK\u00dc VAKA SAYISI\npred_vaka = results_vaka.get_forecast(steps=4)\npred_vaka_ci = pred_vaka.conf_int()\n\nvalue = pred_vaka.predicted_mean.copy() \nvalue.index = pd.DatetimeIndex([(pd.to_datetime(\"today\") + relativedelta(months = 1)).strftime(\"%Y-%m-%d\"),\n                                (pd.to_datetime(\"today\") + relativedelta(months = 2)).strftime(\"%Y-%m-%d\"),\n                                (pd.to_datetime(\"today\") + relativedelta(months = 3)).strftime(\"%Y-%m-%d\"),\n                                (pd.to_datetime(\"today\") + relativedelta(months = 4)).strftime(\"%Y-%m-%d\")])\nvalue = pd.DataFrame(value)\nvalue.columns = [\"Vaka Tahmin\"]\n\ndeneme = value.copy()\ndeneme.columns=[\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\"]\ndff_vaka = pd.concat([b_vaka_df, deneme])","5d54fb50":"#BUG\u00dcNK\u00dc HASTA SAYISI\npred_hasta = results_hasta.get_forecast(steps=4)\npred_hasta_ci = pred_hasta.conf_int()\n\nvalue = pred_hasta.predicted_mean.copy() \nvalue.index = pd.DatetimeIndex([(pd.to_datetime(\"today\") + relativedelta(months = 1)).strftime(\"%Y-%m-%d\"),\n                                (pd.to_datetime(\"today\") + relativedelta(months = 2)).strftime(\"%Y-%m-%d\"),\n                                (pd.to_datetime(\"today\") + relativedelta(months = 3)).strftime(\"%Y-%m-%d\"),\n                                (pd.to_datetime(\"today\") + relativedelta(months = 4)).strftime(\"%Y-%m-%d\")])\nvalue = pd.DataFrame(value)\nvalue.columns = [\"Hasta Tahmin\"]\n\ndeneme = value.copy()\ndeneme.columns=[\"Bug\u00fcnk\u00fc Hasta Say\u0131s\u0131\"]\ndff_hasta = pd.concat([b_hasta_df, deneme])","44445fc7":"#BUG\u00dcNK\u00dc VEFAT SAYISI\npred_vefat = results_vefat.get_forecast(steps=4)\npred_vefat_ci = pred_vefat.conf_int()\n\nvalue = pred_vefat.predicted_mean.copy() \nvalue.index = pd.DatetimeIndex([(pd.to_datetime(\"today\") + relativedelta(months = 1)).strftime(\"%Y-%m-%d\"),\n                                (pd.to_datetime(\"today\") + relativedelta(months = 2)).strftime(\"%Y-%m-%d\"),\n                                (pd.to_datetime(\"today\") + relativedelta(months = 3)).strftime(\"%Y-%m-%d\"),\n                                (pd.to_datetime(\"today\") + relativedelta(months = 4)).strftime(\"%Y-%m-%d\")])\nvalue = pd.DataFrame(value)\nvalue.columns = [\"Vefat Tahmin\"]\n\ndeneme = value.copy()\ndeneme.columns=[\"Bug\u00fcnk\u00fc Vefat Say\u0131s\u0131\"]\ndff_vefat = pd.concat([b_vefat_df, deneme])","f3865ba2":"fig, ax = plt.subplots(figsize=(25,5))\nplt.suptitle('SARIMAX', fontsize = 20)\nax.xaxis.set_major_locator(dates.DayLocator(interval = 20))\ndate_form = DateFormatter(\"%Y-%m-%d\")\nax.xaxis.set_major_formatter(date_form)\nplt.xticks(rotation = 50)\ndff_vaka[\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\"].plot(title = \"2021 May\u0131s-Haziran-Temmuz-A\u011fustos Vaka Tahmini\", color = \"r\", marker = \".\", ms=0, ls=\"--\")\nb_vaka_df[\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\"].plot(color = \"b\" , marker = \".\", ms = 0, ls = \"-\")\nplt.legend([\"Tahmin\",\"Ger\u00e7ekle\u015fen\"], loc=\"upper left\")\n\n\nfig, ax = plt.subplots(figsize=(25,5))\nax.xaxis.set_major_locator(dates.DayLocator(interval = 20))\ndate_form = DateFormatter(\"%Y-%m-%d\")\nax.xaxis.set_major_formatter(date_form)\nplt.xticks(rotation = 50)\ndff_hasta[\"Bug\u00fcnk\u00fc Hasta Say\u0131s\u0131\"].plot(title = \"2021 May\u0131s-Haziran-Temmuz-A\u011fustos Hasta Tahmini\", color = \"r\", marker = \".\", ms=0, ls=\"--\")\nb_hasta_df[\"Bug\u00fcnk\u00fc Hasta Say\u0131s\u0131\"].plot(color = \"b\" , marker = \".\", ms = 0, ls = \"-\")\nplt.legend([\"Tahmin\",\"Ger\u00e7ekle\u015fen\"], loc=\"upper left\")\n\n\nfig, ax = plt.subplots(figsize=(25,5))\nax.xaxis.set_major_locator(dates.DayLocator(interval = 20))\ndate_form = DateFormatter(\"%Y-%m-%d\")\nax.xaxis.set_major_formatter(date_form)\nplt.xticks(rotation = 50)\ndff_vefat[\"Bug\u00fcnk\u00fc Vefat Say\u0131s\u0131\"].plot(title = \"2021 May\u0131s-Haziran-Temmuz-A\u011fustos Vefat Tahmini\", color = \"r\", marker = \".\", ms=0, ls=\"--\")\nb_vefat_df[\"Bug\u00fcnk\u00fc Vefat Say\u0131s\u0131\"].plot(color = \"b\" , marker = \".\", ms = 0, ls = \"-\")\nplt.legend([\"Tahmin\",\"Ger\u00e7ekle\u015fen\"], loc=\"upper left\")","3c84db5a":"sarimax_rmse = np.sqrt(results_vaka.mse)\nsarimax_mae = results_vaka.mae\n\nprint(\"RMSE :\", sarimax_rmse)\nprint(\"MAE :\", sarimax_mae)","055158a8":"import statsmodels.api as sm\nfrom sklearn import preprocessing\nfrom sklearn import linear_model\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\nfrom sklearn.model_selection import train_test_split, cross_val_score, cross_val_predict","ff95cfcf":"ml_df = df.copy()\nml_df['Tarih'] = pd.to_datetime(ml_df['Tarih'], format='%Y-%m-%d')\nml_df['G\u00fcn'] = ml_df['Tarih'].dt.day\nml_df['Ay'] = ml_df['Tarih'].dt.month\nml_df['Y\u0131l'] = ml_df['Tarih'].dt.year\nml_df.drop('Tarih', axis=1, inplace=True)\nml_df.head()","b1a078f9":"ml_df.corr()","b015fe51":"X = ml_df.drop([\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\"], axis=1)\ny = ml_df[\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)","d6207f4a":"import xgboost as xg","01f6a374":"xgb_r = xg.XGBRegressor(objective ='reg:squarederror', n_estimators = 20, seed = 123)\nxgb_r.fit(X_train, y_train)","5e3491b2":"xgb_rmse = np.sqrt(mean_squared_error(y_test, xgb_r.predict(X_test)))\nxgb_mae = mean_absolute_error(y_test, xgb_r.predict(X_test))\n\nprint(\"RMSE :\", xgb_rmse)\nprint(\"MAE :\", xgb_mae)","5ea91f7f":"xgb_tahmin_df = pd.DataFrame({\"Ger\u00e7ek Vaka Test\": y_test, \"Tahmin Vaka Test\": xgb_r.predict(X_test)}).sort_index()\nxgb_tahmin_df['Tarih'] = np.nan\nfor i in range(len(xgb_tahmin_df)):\n    for j in range(len(df)):\n        if(xgb_tahmin_df.iloc[i].name == df.index[j]):\n            xgb_tahmin_df[\"Tarih\"].loc[j] = df[\"Tarih\"].loc[j]","a3d7a199":"xgb_tahmin_df.index = xgb_tahmin_df[\"Tarih\"]\nxgb_tahmin_df.index = pd.DatetimeIndex(xgb_tahmin_df.index)\nxgb_tahmin_df.drop([\"Tarih\"], axis=1, inplace=True)\nxgb_tahmin_df.head()","87ad4845":"fig, ax = plt.subplots(figsize=(25,5))\nplt.suptitle('XGBOOST', fontsize = 20)\nplt.title(\"Test Verisi \u00dczerinde Ger\u00e7ek ve Tahmin Vaka Say\u0131lar\u0131\")\nax.xaxis.set_major_locator(dates.DayLocator(interval = 20))\ndate_form = DateFormatter(\"%Y-%m-%d\")\nax.xaxis.set_major_formatter(date_form)\nplt.xticks(rotation = 50)\nax.plot(xgb_tahmin_df['Ger\u00e7ek Vaka Test'],lw=2,color=\"#008000\")\nax.plot(xgb_tahmin_df['Tahmin Vaka Test'],lw=2,color=\"#FF0000\")\nax.legend(['Ger\u00e7ek','Tahmin'])","989b9ffe":"sklearn_model = LinearRegression().fit(X_train,y_train)","d3e9a438":"sklearn_rmse = np.sqrt(mean_squared_error(y_test, sklearn_model.predict(X_test)))\nsklearn_mae = mean_absolute_error(y_test, sklearn_model.predict(X_test))\n\nprint(\"RMSE :\", sklearn_rmse)\nprint(\"MAE :\", sklearn_mae)","2dadb0ec":"sklearn_tahmin_df = pd.DataFrame({\"Ger\u00e7ek Vaka Test\": y_test, \"Tahmin Vaka Test\": sklearn_model.predict(X_test)}).sort_index()\nsklearn_tahmin_df['Tarih'] = np.nan\nfor i in range(len(sklearn_tahmin_df)):\n    for j in range(len(df)):\n        if(sklearn_tahmin_df.iloc[i].name == df.index[j]):\n            sklearn_tahmin_df[\"Tarih\"].loc[j] = df[\"Tarih\"].loc[j]","56094878":"sklearn_tahmin_df.index = sklearn_tahmin_df[\"Tarih\"]\nsklearn_tahmin_df.index = pd.DatetimeIndex(sklearn_tahmin_df.index)\nsklearn_tahmin_df.drop([\"Tarih\"], axis=1, inplace=True)\nsklearn_tahmin_df.head()","1ff4d2a2":"fig, ax = plt.subplots(figsize=(25,5))\nplt.suptitle('SKLEARN', fontsize = 20)\nplt.title(\"Test Verisi \u00dczerinde Ger\u00e7ek ve Tahmin Vaka Say\u0131lar\u0131\")\nax.xaxis.set_major_locator(dates.DayLocator(interval = 20))\ndate_form = DateFormatter(\"%Y-%m-%d\")\nax.xaxis.set_major_formatter(date_form)\nplt.xticks(rotation = 50)\nax.plot(sklearn_tahmin_df['Ger\u00e7ek Vaka Test'],lw=2,color=\"#008000\")\nax.plot(sklearn_tahmin_df['Tahmin Vaka Test'],lw=2,color=\"#FF0000\")\nax.legend(['Ger\u00e7ek','Tahmin'])","6c7bfcb8":"from sklearn.tree import DecisionTreeRegressor\ndt_regressor = DecisionTreeRegressor().fit(X_train,y_train)","18232671":"dt_regressor_rmse = np.sqrt(mean_squared_error(y_test, dt_regressor.predict(X_test)))\ndt_regressor_mae = mean_absolute_error(y_test, dt_regressor.predict(X_test))\n\nprint(\"RMSE :\", dt_regressor_rmse)\nprint(\"MAE :\", dt_regressor_mae)","1fd75996":"dc_tahmin_df = pd.DataFrame({\"Ger\u00e7ek Vaka Test\": y_test, \"Tahmin Vaka Test\": dt_regressor.predict(X_test)}).sort_index()\ndc_tahmin_df['Tarih'] = np.nan\nfor i in range(len(dc_tahmin_df)):\n    for j in range(len(df)):\n        if(dc_tahmin_df.iloc[i].name == df.index[j]):\n            dc_tahmin_df[\"Tarih\"].loc[j] = df[\"Tarih\"].loc[j]","3c363c33":"dc_tahmin_df.index = dc_tahmin_df[\"Tarih\"]\ndc_tahmin_df.index = pd.DatetimeIndex(dc_tahmin_df.index)\ndc_tahmin_df.drop([\"Tarih\"], axis=1, inplace=True)\ndc_tahmin_df.head()","ae4d7d00":"fig, ax = plt.subplots(figsize=(25,5))\nplt.suptitle('DESICION TREE REGRESSOR', fontsize = 20)\nplt.title(\"Test Verisi \u00dczerinde Ger\u00e7ek ve Tahmin Vaka Say\u0131lar\u0131\")\nax.xaxis.set_major_locator(dates.DayLocator(interval = 20))\ndate_form = DateFormatter(\"%Y-%m-%d\")\nax.xaxis.set_major_formatter(date_form)\nplt.xticks(rotation = 50)\nax.plot(dc_tahmin_df['Ger\u00e7ek Vaka Test'],lw=2,color=\"#008000\")\nax.plot(dc_tahmin_df['Tahmin Vaka Test'],lw=2,color=\"#FF0000\")\nax.legend(['Ger\u00e7ek','Tahmin'])","946c6534":"import tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom sklearn.preprocessing import MinMaxScaler","beb90b6e":"tf_df = df.copy()\ntf_df['Tarih'] = pd.to_datetime(tf_df['Tarih'], format='%Y-%m-%d')\ntf_df['G\u00fcn'] = tf_df['Tarih'].dt.day\ntf_df['Ay'] = tf_df['Tarih'].dt.month\ntf_df['Y\u0131l'] = tf_df['Tarih'].dt.year\ntf_df.drop([\"Tarih\"], axis=1, inplace=True)\ntf_df.head()","2f482c56":"X_tf = tf_df.drop([\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\"], axis=1)\ny_tf = tf_df[\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\"]\nX_train_tf, X_test_tf, y_train_tf, y_test_tf = train_test_split(X_tf, y_tf, test_size = 0.20, random_state = 0)","57c0e5ff":"scaler = MinMaxScaler()\n\nX_train_tf = scaler.fit_transform(X_train_tf)\nX_test_tf = scaler.transform(X_test_tf)","5a51a9ef":"tf_model = Sequential()\n\ntf_model.add(Dense(13, activation = \"relu\"))\ntf_model.add(Dense(13, activation = \"relu\"))\ntf_model.add(Dense(13, activation = \"relu\"))\ntf_model.add(Dense(13, activation = \"relu\"))\ntf_model.add(Dense(13, activation = \"relu\"))\ntf_model.add(Dense(13, activation = \"relu\"))\ntf_model.add(Dense(13, activation = \"relu\"))\ntf_model.add(Dense(13, activation = \"relu\"))\ntf_model.add(Dense(13, activation = \"relu\"))\ntf_model.add(Dense(13, activation = \"relu\"))\ntf_model.add(Dense(13, activation = \"relu\"))\ntf_model.add(Dense(13, activation = \"relu\"))\ntf_model.add(Dense(13, activation = \"relu\"))\n\ntf_model.add(Dense(1))\n\ntf_model.compile(optimizer = \"adam\", loss = \"mse\")\n\ntf_model.fit(x = X_train_tf, y = y_train_tf, validation_data = (X_test_tf, y_test_tf), batch_size = 50, epochs = 500)","9c20ccec":"kayipVeri = pd.DataFrame(tf_model.history.history)\nkayipVeri.plot()","6a794822":"tahmin_dizi = tf_model.predict(X_test_tf)\n\ntrainLoss = tf_model.evaluate(X_train_tf, y_train_tf, verbose = 0)\ntestLoss = tf_model.evaluate(X_test_tf, y_test_tf, verbose = 0)\n\nprint(\"Train Loss : \", trainLoss)\nprint(\"Test Loss : \", testLoss)","aa69fa2a":"tf_rmse = np.sqrt(mean_squared_error(y_test_tf, tf_model.predict(X_test_tf)))\ntf_mae = mean_absolute_error(y_test_tf, tf_model.predict(X_test_tf))\n\nprint(\"RMSE :\", tf_rmse)\nprint(\"MAE :\", tf_mae)","f46d7b58":"tf_tahmin_df = pd.DataFrame(y_test_tf.values, columns = [\"Ger\u00e7ek Vaka Test\"])\n\ntest_tahmin = pd.Series(tahmin_dizi.reshape(len(tf_tahmin_df),))\n\ntf_tahmin_df = pd.concat([tf_tahmin_df, test_tahmin], axis = 1)\ntf_tahmin_df.columns = [\"Ger\u00e7ek Vaka Test\", \"Tahmin Vaka Test\"]\ntf_tahmin_df.head()","0ce4022c":"tf_tahmin_df['Tarih'] = np.nan\nfor i in range(len(tf_tahmin_df)):\n    for j in range(len(df)):\n        if(tf_tahmin_df[\"Ger\u00e7ek Vaka Test\"][i] == df[\"Bug\u00fcnk\u00fc Vaka Say\u0131s\u0131\"][j]):\n            tf_tahmin_df[\"Tarih\"].loc[i] = df[\"Tarih\"].loc[j]","660cae37":"tf_tahmin_df.index = tf_tahmin_df[\"Tarih\"]\ntf_tahmin_df.index = pd.DatetimeIndex(tf_tahmin_df.index)\ntf_tahmin_df.drop([\"Tarih\"], axis=1, inplace=True)\ntf_tahmin_df = tf_tahmin_df.sort_index(axis = 0)\ntf_tahmin_df.head()","d7f22464":"fig, ax = plt.subplots(figsize=(25,5))\nplt.suptitle('TENSORFLOW', fontsize = 20)\nplt.title(\"Test Verisi \u00dczerinde Ger\u00e7ek ve Tahmin Vaka Say\u0131lar\u0131\")\nax.xaxis.set_major_locator(dates.DayLocator(interval = 20))\ndate_form = DateFormatter(\"%Y-%m-%d\")\nax.xaxis.set_major_formatter(date_form)\nplt.xticks(rotation = 50)\nax.plot(tf_tahmin_df['Ger\u00e7ek Vaka Test'],lw=2,color=\"#008000\")\nax.plot(tf_tahmin_df['Tahmin Vaka Test'],lw=2,color=\"#FF0000\")\nax.legend(['Ger\u00e7ek','Tahmin'])","72f7f33a":"from sklearn.ensemble import GradientBoostingRegressor","6e083826":"params = {'n_estimators': 500,\n          'max_depth': 10,\n          'min_samples_split': 20,\n          'learning_rate': 0.9,\n          'loss': 'ls'}\n\ngbr_model = GradientBoostingRegressor(**params)\ngbr_model.fit(X_train, y_train)","147dce18":"gbr_rmse = np.sqrt(mean_squared_error(y_test, gbr_model.predict(X_test)))\ngbr_mae = mean_absolute_error(y_test, gbr_model.predict(X_test))\n\nprint(\"RMSE :\", gbr_rmse)\nprint(\"MAE :\", gbr_mae)","625c3f66":"gbr_tahmin_df = pd.DataFrame({\"Ger\u00e7ek Vaka Test\": y_test, \"Tahmin Vaka Test\": gbr_model.predict(X_test)}).sort_index()\ngbr_tahmin_df['Tarih'] = np.nan\nfor i in range(len(gbr_tahmin_df)):\n    for j in range(len(df)):\n        if(gbr_tahmin_df.iloc[i].name == df.index[j]):\n            gbr_tahmin_df[\"Tarih\"].loc[j] = df[\"Tarih\"].loc[j]","67f97757":"gbr_tahmin_df.index = gbr_tahmin_df[\"Tarih\"]\ngbr_tahmin_df.index = pd.DatetimeIndex(gbr_tahmin_df.index)\ngbr_tahmin_df.drop([\"Tarih\"], axis=1, inplace=True)\ngbr_tahmin_df.head()","d6941b6d":"fig, ax = plt.subplots(figsize=(25,5))\nplt.suptitle('GRADIENT BOOSTING REGRESSOR', fontsize = 20)\nplt.title(\"Test Verisi \u00dczerinde Ger\u00e7ek ve Tahmin Vaka Say\u0131lar\u0131\")\nax.xaxis.set_major_locator(dates.DayLocator(interval = 20))\ndate_form = DateFormatter(\"%Y-%m-%d\")\nax.xaxis.set_major_formatter(date_form)\nplt.xticks(rotation = 50)\nax.plot(gbr_tahmin_df['Ger\u00e7ek Vaka Test'],lw=2,color=\"#008000\")\nax.plot(gbr_tahmin_df['Tahmin Vaka Test'],lw=2,color=\"#FF0000\")\nax.legend(['Ger\u00e7ek','Tahmin'])","7f14b2f7":"model_comp = pd.DataFrame({'Models': [\"SARIMAX\", \"XGBOOST\", \"SKLEARN\", \"DESICION TREE\", \"GRADIENT BOOSTING\", \"TENSORFLOW\"], \n                           'RMSE': [sarimax_rmse, xgb_rmse, sklearn_rmse, dt_regressor_rmse, gbr_rmse, tf_rmse],\n                           'MAE': [sarimax_mae, xgb_mae, sklearn_mae, dt_regressor_mae, gbr_mae, tf_mae]})\nmodel_comp = model_comp.sort_values(by=\"RMSE\",axis=0, ascending = False).reset_index(drop=True)\nmodel_comp","77fe8f09":"fig, ax = plt.subplots(figsize=(25,5))\nplt.suptitle('MODELLER\u0130N KAR\u015eILA\u015eTIRILMASI', fontsize = 20)\nplt.plot(model_comp['Models'], model_comp['RMSE'], label = \"RMSE\")\nplt.plot(model_comp['Models'], model_comp['MAE'], label = \"MAE\")\nplt.legend()\nplt.show()","8cf09c1d":"# MAK\u0130NE \u00d6\u011eRENMES\u0130 MODELLER\u0130 \u0130LE T\u00dcRK\u0130YE COVID19 VAKA TAHM\u0130NLEMES\u0130","36e414a4":"### XGBOOST","3de22829":"### \u0130LER\u0130 TAR\u0130HL\u0130 TAHM\u0130NLEME","bfbb3049":"### G\u00dcNL\u00dcK VAKA SAYISI","6a37bfb4":"## MAK\u0130NE \u00d6\u011eRENMES\u0130","fbc720ba":"### GER\u00c7EK VE \u00d6NG\u00d6R\u00dcLEN DE\u011eERLER\u0130N KAR\u015eILA\u015eTIRILMASI","b1273a16":"## SARIMAX","82c34fac":"## G\u00fcnl\u00fck Vaka Say\u0131s\u0131 Doldurulmas\u0131","ce2cda7c":"### G\u00dcNL\u00dcK VEFAT SAYISI","067def3c":"### TENSORFLOW","a647a80b":"### GRADIENT BOOSTING REGRESSOR","89e190cc":"# G\u00fcncel Veri \u00c7ekme","8f86a450":"## Tarih","064188c1":"# Veri \u0130nceleme","f3d7aab4":"# MODELLER\u0130N KAR\u015eILA\u015eTIRILMASI","acd4fe68":"# MODELLER","6c0d7fc6":"# Data Tipi De\u011fi\u015ftirme ve Eksik Verileri Doldurma","cd0f87fe":"### SKLEARN","d45d22de":"### G\u00dcNL\u00dcK HASTA SAYISI","f9125e34":"### DESICION TREE REGRESSOR","6be23f5e":"# G\u00f6rselle\u015ftirmeler"}}