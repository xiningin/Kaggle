{"cell_type":{"5b4656cb":"code","2ff20c0d":"code","0734b46f":"code","74d4579d":"code","0cf90f43":"code","f2e2654d":"code","72953219":"code","0cdeae03":"code","15842650":"code","a29fb97c":"code","4f625a62":"code","1ef573cd":"code","a13b428e":"code","e50ac15f":"code","8dacd4ed":"code","cd2087af":"code","27eb9d16":"code","dbd43de9":"code","c2d76f9c":"code","aea947e8":"code","146ac8d5":"code","52a6f573":"code","e8608728":"code","6a6f2f61":"code","04e2c189":"code","1cdd0104":"code","662440f4":"code","451491c6":"code","007687a8":"code","685a8ff9":"code","7c9a6b09":"code","cb4d798a":"code","33fc294c":"code","50528005":"code","96e82073":"code","b8e91b49":"code","c24c65d3":"code","cebda1c6":"code","6d758d54":"code","a3d9878d":"code","0f4e7966":"code","fa3f5871":"code","68d97032":"code","c6afd1c9":"code","a1be18f8":"code","720c2ab3":"code","48bc717a":"code","2f4e30ad":"code","1ead2b84":"code","7923d211":"code","da2fec71":"code","05251a0d":"code","71883e21":"code","01aae2fc":"code","6322908b":"code","3b9d103f":"code","011967ac":"code","07a696b6":"code","5648ab06":"code","4aef88da":"code","9fad73a5":"code","c95299bb":"code","3ac80a08":"code","ccd679f1":"code","c2758282":"code","9fbfd23f":"code","bfe639e8":"code","84768bda":"code","4428eb7b":"code","13533776":"code","b69cfdd8":"code","8bb97051":"code","8fc8bf9f":"code","8c621087":"code","f3abb3a2":"code","cece0b65":"code","3de8aa51":"code","b88eea6e":"code","126c984a":"code","a2f3ce65":"code","82003930":"code","e09fbe0a":"code","a1f21a93":"code","18835273":"code","400da5ae":"code","01a1d264":"code","e5521b8a":"code","e85edb15":"code","e941301f":"code","2740e5cd":"code","bd6c3f52":"code","16a0aaef":"code","0ec3ab5f":"code","05c12f79":"code","85895a0f":"code","317d2493":"code","13e14849":"code","3b53cff2":"code","0c9ce6d4":"code","b9007db2":"code","c058c1de":"code","6813a000":"code","4c420f4d":"code","5051f5cb":"code","58d005a6":"code","88aa449b":"code","42eca9f9":"code","d43f1c3f":"code","01fc4748":"code","96701319":"code","e1629462":"code","64826b88":"code","4b491861":"code","adff1e4f":"code","cd2fcfab":"code","f112fda7":"code","54a5ad27":"code","dff8fe2d":"code","394bee82":"markdown","c327cd10":"markdown","fd2a809f":"markdown","3fe54300":"markdown","6f292e8c":"markdown","4f070551":"markdown","5f0aea54":"markdown","6674f2a5":"markdown","01dabc0f":"markdown","93983aea":"markdown","afc83c5e":"markdown","d93bdb12":"markdown","ef79e9b9":"markdown","9e7637e4":"markdown","f5a8c5cc":"markdown","ebed18c6":"markdown","da6c5b43":"markdown","262a7388":"markdown"},"source":{"5b4656cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nfrom scipy import stats\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","2ff20c0d":"data=pd.read_csv('..\/input\/fifa19\/data.csv')\n","0734b46f":"data.info()\n","74d4579d":"data.corr()","0cf90f43":"data.head()","f2e2654d":"\nf,ax  = plt.subplots(figsize=(18,18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax,cmap=\"cubehelix\",cbar_kws={'label': 'My Colorbar', 'orientation': 'horizontal'})\nplt.show()","72953219":"data.columns","0cdeae03":"data.plot(kind='scatter', x='Age', y='Potential',alpha = 0.5,color = 'red')\nplt.xlabel('Attack')              # label = name of label\nplt.ylabel('Defence')\nplt.title('Attack Defense Scatter Plot') \nplt.show()","15842650":"\n\ndata.Age.plot(kind = 'hist',bins = 75,figsize = (10,12),edgecolor='red')\nplt.show()","a29fb97c":"data.Potential.plot(kind = 'hist',bins = 50)\nplt.clf()","4f625a62":"data.Age.plot(kind = 'line', color = 'g',label = 'Age',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata.Potential.plot(color = 'r',label = 'Potential',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","1ef573cd":"dicts =\t{\n  \"name\": \"Cristiano\",\n  \"surname\": \"Ronaldo\",\n  \"potential\": 94\n}\nprint(dicts)","a13b428e":"x = dicts[\"surname\"]\nprint(x)","e50ac15f":"dicts['potential']=99\nprint(dicts)","8dacd4ed":"for x in dicts:\n  print(dicts[x])","cd2087af":"print(len(dicts))","27eb9d16":"for x in  dicts.values():\n  print(x)","dbd43de9":"#Loop through both keys and values, by using the items() function:\nfor x, y in  dicts.items():\n  print(x, y)","c2d76f9c":"dicts.clear()                   # remove all entries in dict\nprint(dicts)","aea947e8":"dicts[\"age\"] = \"31\"\nprint(dicts)","146ac8d5":" dicts.pop(\"name\")\nprint( dicts)","52a6f573":"series = data['Potential']        \nprint(type(series))\ndata_frame = data[['Special']]  \nprint(type(data_frame))","e8608728":"# Comparison operator\nprint(3 > 2)\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","6a6f2f61":"x = data['Potential']>90\ndata[x]","04e2c189":"data.describe()","1cdd0104":"print(data.Name)","662440f4":"data[(data['Age']<25) & (data['Potential']>90)]","451491c6":"i = 1\nwhile i < len(data):\n  print(i)\n  if i ==5:\n    break\n  i += 1","007687a8":"for index, value in enumerate(data):\n    print(index,\" : \",value)\nprint('') ","685a8ff9":"data.columns","7c9a6b09":"#tuble\ndef tuble():\n    value=(29,82,70)\n    return value\nage,potantial,dribbling=tuble()\nprint(age,dribbling)","cb4d798a":"#SCOPE\nx=\"player\"\ndef scopf():\n    x=\"game\"\n    return x\nprint(x)\nprint(scopf())","33fc294c":"# What if there is no local scope\nx = 3\ndef f():\n    sonuc = 2*x+5      \n    return sonuc\nprint(f())  ","50528005":"#built in scope\nimport builtins\ndir(builtins)","96e82073":"# nested function\ndef circumference():\n    def circ():\n        def add():\n            x = (3.14,6)\n            return x\n        pi,r=add()\n        circle=pi*r\n        return circle\n    return circ()*2\nprint(circumference())\n","b8e91b49":"# default arguments\ndef f(a, b = -4, c = 0.2):\n    y = a + b + c\n    return y\nprint(f(5))\n\nprint(f(5,4,3))","c24c65d3":"# flexible arguments *args\ndef f(*fuc):\n    for i in fuc:\n        print(i)\nf(1)\nprint(\"\")\nf(5,4,3,2,1,0)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n   \n    for key, value in kwargs.items():               \n        print(key, \"=\", value)\nf(country = 'spain', capital = 'madrid', age= 27)","cebda1c6":"# lambda function\nsquare = lambda x: x**2    \nprint(square(4))\ntot = lambda x,y,z: x*y\/z   \nprint(tot(1,2,3))","6d758d54":"number = [1,2,3]\ny = map(lambda x:x**2,number)\nprint(list(y))","a3d9878d":"# iteration example\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    \nprint(*it)","0f4e7966":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","fa3f5871":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","68d97032":"num1 = [1,2,3]\nnum2 = [i**2   for i in num1 ]\nprint(num2)","c6afd1c9":"num1 = [5,10,15,20,25]\nnum2 = [i**3 if i == 15 else i-5 if i < 10 else i+5 for i in num1]\nprint(num2)","a1be18f8":"data.columns","720c2ab3":"threshold = sum(data.Potential)\/len(data.Balance)\ndata[\"BallControl\"] = [\"high\" if i > threshold else \"low\" for i in data.Balance]\ndata.loc[:10,[\"BallControl\",\"Balance\"]]","48bc717a":"data.tail()","2f4e30ad":"data.shape","1ead2b84":"data.info()","7923d211":"data.columns","da2fec71":"print(data.Position.value_counts(dropna=False))","05251a0d":"data.describe()","71883e21":"short=data.head(30)\nshort.boxplot(column=\"Potential\", by=\"Position\")","01aae2fc":"#melt\nshorts=data.head()\nmelts=pd.melt(frame=shorts,id_vars=\"Name\",value_vars=[\"Potential\",\"Position\"])\nmelts\n","6322908b":"melts.pivot(index=\"Name\",columns=\"variable\",values=\"value\")\n","3b9d103f":"#concatenating data\ndata1 = data.head()\ndata2= data.tail()\nconc_data_row = pd.concat([data1,data2],axis =0,ignore_index =True) \nconc_data_row\n\n","011967ac":"data1 = data['Age'].head()\ndata2= data['Potential'].head()\nconc_data_col = pd.concat([data1,data2],axis =1) \nconc_data_col","07a696b6":"data.dtypes","5648ab06":"data['Name'] = data['Name'].astype('category')\ndata['Age'] = data['Age'].astype('float')","4aef88da":"data.dtypes","9fad73a5":"data.info()\n","c95299bb":"data.Club.value_counts(dropna=False)\n","3ac80a08":"data1=data   # also we will use data to fill missing value so I assign it to data1 variable\ndata1[\"Age\"].dropna(inplace = True) ","ccd679f1":"assert 1==1","c2758282":"assert  data['Age'].notnull().all()","9fbfd23f":"data[\"Age\"].fillna('empty',inplace = True)","bfe639e8":"assert  data['Age'].notnull().all()","84768bda":"team=[\"fb\",\"gs\"]\nprize=[\"26\",\"12\"]\nlabel=[\"team\",\"prize\"]\ncol=[team,prize]\nzips=list(zip(label,col))\ndic=dict(zips)\ndf=pd.DataFrame(dic)\ndf\n","4428eb7b":"df[\"win\"]=[\"38\",\"21\"]\ndf","13533776":"df[\"null\"]=0\ndf","b69cfdd8":"data1=data.head()\ndata1= data.loc[:,[\"Age\",\"Potential\",\"Special\"]]\ndata1.plot()\n","8bb97051":"data1.plot(subplots = True)\nplt.show()","8fc8bf9f":"data1.plot(kind = \"scatter\",x=\"Age\",y = \"Potential\")\nplt.show()","8c621087":"data1.plot(kind = \"hist\",y = \"Potential\",bins = 50,range= (0,250),normed = True)\nplt.show()","f3abb3a2":"fig, axes = plt.subplots(nrows=2,ncols=1)\ndata1.plot(kind = \"hist\",y = \"Potential\",bins = 50,range= (0,250),normed = True,ax = axes[0])\ndata1.plot(kind = \"hist\",y = \"Potential\",bins = 50,range= (0,250),normed = True,ax = axes[1],cumulative = True)\nplt.savefig('graph.png')\nplt","cece0b65":"data.describe()","3de8aa51":"time_list = [\"1992-03-08\",\"1992-04-12\"]\nprint(type(time_list[1])) # As you can see date is string\n# however we want it to be datetime object\ndatetime_object = pd.to_datetime(time_list)\nprint(type(datetime_object))","b88eea6e":"\ndata2 = data.head()\ndate_list = [\"1992-01-10\",\"1992-02-10\",\"1992-03-10\",\"1993-03-15\",\"1993-03-16\"]\ndatetime_object = pd.to_datetime(date_list)\ndata2[\"date\"] = datetime_object\ndata2= data2.set_index(\"date\")\ndata2 ","126c984a":"print(data2.loc[\"1993-03-16\"])\nprint(data2.loc[\"1992-03-10\":\"1993-03-16\"])","a2f3ce65":"data2.resample(\"A\").mean()","82003930":"data2.resample(\"M\").mean()","e09fbe0a":"data2.resample(\"M\").first().interpolate(\"linear\")","a1f21a93":"data.head()","18835273":"data = pd.read_csv('..\/input\/fifa19\/data.csv')\ndata=data.set_index('ID')\ndata.head()","400da5ae":"data[\"Age\"][20801]","01a1d264":"data.Age[158023]","e5521b8a":"data.loc[158023,[\"Age\"]]","e85edb15":"data2=data[[\"Age\",\"Name\"]]\ndata2","e941301f":"data1=data2.head(10)\ndata1","2740e5cd":"data = pd.read_csv('..\/input\/fifa19\/data.csv')\nprint(type(data.Age))\nprint(type(data[\"Age\"]))\nprint(type(data[[\"Age\"]]))","bd6c3f52":"data.head()","16a0aaef":"data.loc[1:10,[\"Name\",\"Age\"]]","0ec3ab5f":"data.loc[10:0:-1,[\"Name\",\"Age\"]]","05c12f79":"data.loc[1:10,\"Marking\":]","85895a0f":"boolean=data.Age<17\n#data[boolean]\ndata.loc[boolean,[\"Name\",\"Age\"]]","317d2493":"filt1=data.Age<17\nfilt2=data.Potential>80\ndata[filt1 & filt2]\n","13e14849":"data.Name[data.Potential>92]","3b53cff2":"def age(n):\n    return n\/2\ndata.Age.apply(age)","0c9ce6d4":"data.Age.apply(lambda n:n\/2)","b9007db2":"data[\"expertise\"]=data.Potential*(data.Age\/100)\ndata.loc[0:10,[\"Name\",\"expertise\"]]","c058c1de":"print(data.index.name)\ndata.index.name=\"index_name\"\ndata.head()","6813a000":"data.head()\ndata2=data.copy()\ndata2.index=range(2,18209,1)\ndata2.head()","4c420f4d":"#hierarchical indexing\ndata=pd.read_csv('..\/input\/fifa19\/data.csv')\ndata.head()\n","5051f5cb":"data1=data.set_index([\"Age\",\"Name\"])\ndata1.head(100)","58d005a6":"dic={\"team\":[\"a\",\"b\",\"c\",\"d\"],\"player\":[\"x\",\"y\",\"z\",\"v\"],\"age\":[20,25,32,21],\"value\":[5,10,6,11]}\ndf=pd.DataFrame(dic)\ndf\n","88aa449b":"df.pivot(index=\"team\",columns=\"player\",values=\"age\")","42eca9f9":"df1=df.set_index([\"team\",\"player\"])\ndf1","d43f1c3f":"df1.unstack(level=0)","01fc4748":"df2=df1.swaplevel(0,1)\ndf2","96701319":"df\n#melt","e1629462":"\npd.melt(df,id_vars=\"team\",value_vars=[\"age\",\"value\"])","64826b88":"df","4b491861":"df.groupby(\"team\").mean()","adff1e4f":"df.groupby(\"team\").age.max()","cd2fcfab":"\ndf.info()","f112fda7":"df[\"team\"] = df[\"team\"].astype(\"category\")\ndf","54a5ad27":"df[\"player\"] = df[\"player\"].astype(\"category\")\ndf","dff8fe2d":"df.info()","394bee82":"**index object and labeled data**","c327cd10":" **The while Loop**\n> With the while loop we can execute a set of statements as long as a condition is true.","fd2a809f":"**Slicing**","3fe54300":"**filtering**","6f292e8c":"**pandas**","4f070551":"**stacking**","5f0aea54":"**DEFAULT and FLEXIBLE ARGUMENTS**","6674f2a5":"**third homework**","01dabc0f":"**analysis has finished**","93983aea":"**EDA**","afc83c5e":"***what is DICTIONARY***\n> A dictionary is a collection which is  indexed. In Python dictionaries are written with curly brackets, and they have keys and values.\n","d93bdb12":"**categoricals and groupby**","ef79e9b9":"****transforming data****","9e7637e4":"**visual exploratory data analysis**","f5a8c5cc":"**WHILE and FOR LOOPS**","ebed18c6":" **second homework**","da6c5b43":"**4th Homework**\n*indexing data frames*","262a7388":"**pivoting**"}}