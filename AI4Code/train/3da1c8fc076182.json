{"cell_type":{"d61e059f":"code","e54f938f":"code","41f55f7f":"code","43b30089":"code","db6e1650":"code","3039eec8":"code","ad43e5c7":"code","b6d969ae":"code","e90ecf9f":"code","6d6ac4aa":"code","923dc9d3":"code","902b9f86":"code","47a996cc":"code","32e61f07":"code","a551057f":"code","13a32838":"code","d09c0e15":"code","df46751e":"code","934f9bb3":"code","74d7dd66":"code","a6a91066":"code","931d3b98":"code","6e95ac94":"code","e3a5dda0":"code","b9d20161":"code","f2fc89aa":"code","94ea989e":"code","72767a51":"code","f2cd4e51":"code","c3db7a48":"code","da25a5ef":"code","e01abddc":"code","399cda90":"code","2e1856ba":"code","250d5532":"code","94c9beaf":"code","72196f4a":"code","a59363f4":"code","fa897eaf":"code","ac0ff596":"code","11f0a7d9":"code","a9956b16":"code","e1613e83":"code","07a85fe2":"code","daf1f170":"code","bc017f25":"code","d3491c8b":"code","a74594fd":"code","0552ee04":"markdown","ccb346c3":"markdown","ac401430":"markdown","8fe1ea74":"markdown","a6cc85b5":"markdown"},"source":{"d61e059f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","e54f938f":"import seaborn as sns\nimport random as rnd","41f55f7f":"from sklearn.linear_model import LogisticRegression","43b30089":"train=pd.read_csv('..\/input\/titanic\/train.csv')\ntest=pd.read_csv('..\/input\/titanic\/test.csv')\ncombine=[train,test]","db6e1650":"train.describe()","3039eec8":"train.columns\n","ad43e5c7":"train.head()","b6d969ae":"train.describe(include=['O'])","e90ecf9f":"train[['Pclass','Survived']].groupby(['Pclass'],as_index=False).mean().sort_values(by=['Survived'], ascending=True)","6d6ac4aa":"train[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by=['Survived'], ascending=True)","923dc9d3":"train[['Parch','Survived']].groupby(['Parch'],as_index=False).mean().sort_values(by=['Survived'], ascending=True)","902b9f86":"train[['SibSp','Survived']].groupby(['SibSp'],as_index=False).mean().sort_values(by=['Survived'], ascending=True)","47a996cc":"train['family']=train['SibSp']+train['Parch']+1\ntrain[['family','Survived']].groupby(['family'],as_index=False).mean().sort_values(by=['Survived'], ascending=True)","32e61f07":"test['family']=test['SibSp']+test['Parch']+1\ntest.head()","a551057f":"g = sns.FacetGrid(train, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","13a32838":"grid=sns.FacetGrid(train, col='Survived', row='Pclass', height=2, aspect=1.5)\ngrid.map(plt.hist,'Age')","d09c0e15":"grid = sns.FacetGrid(train, row='Embarked', col='Survived', height=2, aspect=1.5)\ngrid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\ngrid.add_legend()","df46751e":"train=train.drop(['Ticket','Cabin'], axis=1)\ntest=test.drop(['Ticket','Cabin'], axis=1)","934f9bb3":"combine=[train,test]\nprint(train.shape)\nprint(test.shape)","74d7dd66":"for dataset in combine:\n    dataset['Title']=dataset.Name.str.extract(' ([A-Za-z]+)\\.')\npd.crosstab(train['Title'], train['Sex'])    ","a6a91066":"for dataset in combine:\n    dataset['Title']=dataset['Title'].replace(['Capt','Col','Countess','Don','Jonkheer','Lady','Major','Rev','Sir','Dr'],'Rare')\n    dataset['Title']=dataset['Title'].replace('Mlle','Miss')\n    dataset['Title']=dataset['Title'].replace('Mme','Miss')\n    dataset['Title']=dataset['Title'].replace('Ms','Miss')\n\n    ","931d3b98":"pd.crosstab(train['Title'], train['Sex'])","6e95ac94":"train[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()","e3a5dda0":"title_mapping = {\"Mr\": 1, \"Miss\": 2, \"Mrs\": 3, \"Master\": 4, \"Rare\": 5}\nfor dataset in combine:\n    dataset['Title'] = dataset['Title'].map(title_mapping)\n    dataset['Title'] = dataset['Title'].fillna(0)\n\ntrain.head()","b9d20161":"train=train.drop(['Name','PassengerId'], axis=1)\ntest=test.drop(['Name'], axis=1)","f2fc89aa":"train[\"Sex\"] = train[\"Sex\"].map({\"male\": 0, \"female\":1})\ntest[\"Sex\"] = test[\"Sex\"].map({\"male\": 0, \"female\":1})\n    \ntrain['Sex'].head()","94ea989e":"train.head()","72767a51":"train['Embarked'].unique()","f2cd4e51":"title_mapping = {\"S\": 1, \"C\": 2, \"Q\": 3, np.NaN: 4}\n\ntrain['Embarked'] = train['Embarked'].map(title_mapping)\ntest['Embarked'] = test['Embarked'].map(title_mapping)\n\ntrain.head()","c3db7a48":"train.info()","da25a5ef":"for i in range(0,2):\n    for j in range(0,3):\n        #print(i,j+1)\n        temp_dataset=train[(train['Sex']==i) &  (train['Pclass']==j+1)]['Age'].dropna()\n        #print(temp_dataset)\n        #print(str(temp_dataset.median())+\"  \"+str(i)+\"  \"+str(j+1))\n        train.loc[(train.Age.isnull()) & (train.Sex==i) & (train.Pclass==j+1),'Age']=int(temp_dataset.median())\n        \nfor i in range(0,2):\n    for j in range(0,3):\n        #print(i,j+1)\n        temp_dataset=test[(test['Sex']==i) &  (test['Pclass']==j+1)]['Age'].dropna()\n        #print(temp_dataset)\n        #print(str(temp_dataset.median())+\"  \"+str(i)+\"  \"+str(j+1))\n        test.loc[(test.Age.isnull()) & (test.Sex==i) & (test.Pclass==j+1),'Age']=int(temp_dataset.median())        ","e01abddc":"train.head(15)","399cda90":"train['Age'] = pd.cut(train['Age'], bins=[0, 12, 50, 200], labels=['Child','Adult','Elder'])\ntest['Age'] = pd.cut(test['Age'], bins=[0, 12, 50, 200], labels=['Child','Adult','Elder'])\ntrain['Age'].head()","2e1856ba":"title_mapping = {'Child': 1, 'Adult': 2, 'Elder': 3}\n\ntrain['Age'] = train['Age'].map(title_mapping).astype(int)\ntest['Age'] = test['Age'].map(title_mapping).astype(int)\n    \n\ntrain.head()","250d5532":"\ntrain=train.drop(['SibSp','Parch'], axis=1)\n\ntest=test.drop(['SibSp','Parch'], axis=1)","94c9beaf":"train.head()","72196f4a":"train.info()\ntest.info()","a59363f4":"test['Fare'].fillna(test['Fare'].dropna().median(), inplace=True)","fa897eaf":"test.info()","ac0ff596":"train['Fare']=(train['Fare']- train['Fare'].mean())\/np.std(train['Fare'])\ntrain.head()\n","11f0a7d9":"test['Fare']=(test['Fare']- test['Fare'].mean())\/np.std(test['Fare'])\ntest.head()","a9956b16":"X_train = train.drop(\"Survived\", axis=1)\nY_train = train[\"Survived\"]\nX_test  = test.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","e1613e83":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(X_train, Y_train)\nY_pred = logreg.predict(X_test)\nacc_log = round(logreg.score(X_train, Y_train) * 100, 2)\nacc_log","07a85fe2":"from sklearn.svm import SVC, LinearSVC\nsvc = SVC()\nsvc.fit(X_train, Y_train)\nY_pred = svc.predict(X_test)\nacc_svc = round(svc.score(X_train, Y_train) * 100, 2)\nacc_svc","daf1f170":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 3)\nknn.fit(X_train, Y_train)\nY_pred = knn.predict(X_test)\nacc_knn = round(knn.score(X_train, Y_train) * 100, 2)\nacc_knn","bc017f25":"from sklearn.tree import DecisionTreeClassifier\ndecision_tree = DecisionTreeClassifier()\ndecision_tree.fit(X_train, Y_train)\nY_pred = decision_tree.predict(X_test)\nacc_decision_tree = round(decision_tree.score(X_train, Y_train) * 100, 2)\nacc_decision_tree","d3491c8b":"from sklearn.ensemble import RandomForestClassifier\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","a74594fd":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('submission.csv', index=False)\n","0552ee04":"**2.Support Vector Machines**","ccb346c3":")>**3.KNN**","ac401430":"> **Selecting the Random forest classifier**","8fe1ea74":"**1.Logistic Regression**","a6cc85b5":"# Predictive Models\n****"}}