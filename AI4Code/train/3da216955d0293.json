{"cell_type":{"6c5dbd52":"code","7370ece2":"code","35f47cc2":"code","6c930709":"code","4b31f7c4":"code","7aad65ec":"code","2e6e06c2":"code","7cefb655":"code","cb136aae":"code","3adbbdc1":"code","394c149a":"code","3359af72":"code","600ca6c8":"code","3636e998":"code","a5c741c7":"code","974a80c2":"code","e700c442":"code","204a1862":"code","80bd88ef":"code","ee688422":"code","15dd5c30":"code","519031f7":"code","4ab2bae4":"markdown","49f95ad4":"markdown","ade1193b":"markdown","042846d1":"markdown","82cab62c":"markdown","ae23eb98":"markdown","206ff800":"markdown","b6eec0fd":"markdown","9c5b9f5f":"markdown","9066c50b":"markdown","5348af0a":"markdown","f7f24229":"markdown","f895dec6":"markdown","66535f08":"markdown","3eee0eec":"markdown","d879779d":"markdown","98998e34":"markdown","62942223":"markdown","8ecb0e6e":"markdown","f3b528f4":"markdown","c3471483":"markdown","e5421fb6":"markdown","0cfdc502":"markdown","0c9de474":"markdown","af7e6897":"markdown","87b612c2":"markdown","2c60a844":"markdown","a39c55f7":"markdown","fe29fa6e":"markdown"},"source":{"6c5dbd52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom plotly import tools\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True) \n\nfrom PIL import Image #for image mask\n\n#for word cloud\nfrom subprocess import check_output\nfrom wordcloud import WordCloud, STOPWORDS\nstopwords = set(STOPWORDS)\n\nfrom termcolor import colored\n# Any results you write to the current directory are saved as output.","7370ece2":"pk = pd.read_csv(\"..\/input\/pokemon\/Pokemon.csv\")\n#pk.head(10)","35f47cc2":"plt.figure(figsize=(18,9))\nsns.countplot(pk['Type 1'],palette=['green','#FFA500','blue','red','#cc7700','purple','#0892d0','#654321','yellow',\\\n                                   '#830303','pink','grey','#444444','#fcfcfb','#FF8C00','black','#4682b4','skyblue'])\nplt.xlabel('Types')\nplt.title('Pokemon types')\nplt.show()","6c930709":"#how does different attributes of a Pokemon correlate with each other \n# Compute the correlation matrix\ncorr = pk.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(120, 100, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()","4b31f7c4":"#Function to compare the Pok\u00e9mon powers\ndef PokeFight(trace1,trace2,trace3,trace4):\n    x = pk[pk[\"Name\"] == trace1]\n    trace1 = go.Scatterpolar(\n      r = [x['HP'].values[0],x['Attack'].values[0],x['Defense'].values[0],x['Sp. Atk'].values[0],x['Sp. Def'].values[0],x['Speed'].values[0],x[\"HP\"].values[0]],\n      theta = ['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed','HP'],\n      fill = 'toself',\n      name = trace1\n    )\n    x = pk[pk[\"Name\"] == trace2]\n    trace2 = go.Scatterpolar(\n      r = [x['HP'].values[0],x['Attack'].values[0],x['Defense'].values[0],x['Sp. Atk'].values[0],x['Sp. Def'].values[0],x['Speed'].values[0],x[\"HP\"].values[0]],\n      theta = ['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed','HP'],\n      fill = 'toself',\n      name = trace2\n    )\n    x = pk[pk[\"Name\"] == trace3]\n    trace3 = go.Scatterpolar(\n      r = [x['HP'].values[0],x['Attack'].values[0],x['Defense'].values[0],x['Sp. Atk'].values[0],x['Sp. Def'].values[0],x['Speed'].values[0],x[\"HP\"].values[0]],\n      theta = ['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed','HP'],\n      fill = 'toself',\n      name = trace3\n    )\n    x = pk[pk[\"Name\"] == trace4]\n    trace4 = go.Scatterpolar(\n      r = [x['HP'].values[0],x['Attack'].values[0],x['Defense'].values[0],x['Sp. Atk'].values[0],x['Sp. Def'].values[0],x['Speed'].values[0],x[\"HP\"].values[0]],\n      theta = ['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed','HP'],\n      fill = 'toself',\n      name = trace4\n    )\n\n    layout = go.Layout(\n      xaxis=dict(\n            domain=[0, 0.45]\n        ),\n        yaxis=dict(\n            domain=[0, 0.45]\n        ),\n        xaxis2=dict(\n            domain=[0.55, 1]\n        ),\n        xaxis3=dict(\n            domain=[0, 0.45],\n            anchor='y3'\n        ),\n        xaxis4=dict(\n            domain=[0.55, 1],\n            anchor='y4'\n        ),\n        yaxis2=dict(\n            domain=[0, 0.45],\n            anchor='x2'\n        ),\n        yaxis3=dict(\n            domain=[0.55, 1]\n        ),\n        yaxis4=dict(\n            domain=[0.55, 1],\n            anchor='x4'\n        ),\n      showlegend = True,\n      title = \"Pok\u00e9mons' Performance (RAW power)\"\n    )\n\n    data = [trace1, trace2, trace3, trace4]\n    fig = go.Figure(data=data, layout=layout)\n\n    iplot(fig, filename = \"Pokemon stats\")","7aad65ec":"PokeFight(\"Squirtle\",\"Pikachu\",\"Bulbasaur\",\"Charmander\")","2e6e06c2":"#Data Prep:- summary stats for each type\nsummarypk = pk.groupby('Type 1').sum()","7cefb655":"from mpl_toolkits import mplot3d\n\nfig = plt.figure()\nax = fig.gca(projection='3d')\nfig.subplots_adjust(left=0.4, right=2,bottom=2,top=4)\n    \nx=summarypk.Attack\ny=summarypk.Defense\nz=summarypk.Speed\nDesc = np.array(summarypk.index)\n    \na = 'right'\nfor i in range(18):\n    ax.scatter(x[i], y[i], z[i], c='orange', marker='*',s=100)\n    ax.text(x[i], y[i], z[i], '%s'%(Desc[i]), color='r',alpha=0.8, fontsize=8,horizontalalignment=a,verticalalignment='bottom', \\\n           bbox=dict(facecolor='red', alpha=0.12)) \n    if a=='right':\n        a = 'left'\n    else:\n        a = 'right'\n        \nplt.title(\"Pokemon Attack, Defense and Speed by Types\")\n \nax.set_xlabel('Attack')\nax.set_ylabel('Defense')\nax.set_zlabel('Speed');\nax.w_xaxis.set_pane_color((0.0, 0.99, 1.0,  1.0))\nax.w_yaxis.set_pane_color((0.0, 0.99, 1.0, 1.0))\nax.w_zaxis.set_pane_color((0.1, 1.0, 0.2, 1.0))\n    \nplt.show()  ","cb136aae":"sns.jointplot(x='Attack', y='Speed', \n              data=pk, color ='#FF8C00', kind ='reg', \n              size = 8.0)\nplt.show()","3adbbdc1":"sns.jointplot(x='Defense', y='Speed', \n              data=pk, color ='grey', kind ='reg', \n              size = 8.0)\nplt.show()","394c149a":"sns.jointplot(x='Attack', y='Sp. Atk', \n              data=pk, color ='blue', kind ='reg', \n              size = 8.0)\nplt.ylabel(\"Special Attack\",color='red')\nplt.xlabel(\"Attack\",color='red')\nplt.show()","3359af72":"#Some Popular Type 2 Pok\u00e9mons'\nmaskComfy = np.array(Image.open( \"..\/input\/beerimage\/images.jpg\"))\n\nwordcloud = (WordCloud(width=1440, height=1080, relative_scaling=0.5, mask=maskComfy,max_words=1000,background_color='white').generate_from_frequencies(pk[\"Type 2\"].value_counts()))\n\nfig = plt.figure(1,figsize=(15, 15))\nplt.imshow(wordcloud,interpolation=\"gaussian\")\nplt.axis('off')\nplt.show()","600ca6c8":"x = pk[pk[\"Legendary\"]].sort_values(by=['HP'],ascending=False)[\"Name\"].head(1).values\nprint(colored(x[0],'green'))","3636e998":"#DataPrep\npkattack = pk.groupby(\"Generation\")[\"Attack\"].sum()\npkdefend = pk.groupby(\"Generation\")[\"Defense\"].sum()\n\n#Plotting\nfig = plt.figure(figsize=(15,9))\nplt.bar(np.array(pkattack.index),np.array(pkattack.values),color='#FF8C00',edgecolor=['black']*6,width = 0.25,align='center',label='Aggresive')\nplt.bar(np.array(pkdefend.index)+0.25,np.array(pkdefend.values),color='grey',edgecolor=['grey']*6,width = 0.25,align='center',label='Defensive')\nplt.xlabel(\"Generations\",color='blue')\nplt.ylabel(\"Aggresiveness\/Defensiveness\",color='blue') #measured by Attack points\nplt.legend(loc = 'upper right',)\nplt.grid(color='g', linestyle='--', linewidth=0.1)\nplt.show()","a5c741c7":"#Data Prep for legendry Pokemon\npklegendary = pk[pk[\"Legendary\"]]\npklegendary = pklegendary[[\"HP\",\"Attack\",\"Defense\",\"Sp. Atk\",\"Sp. Def\"]]\n\n#plotting\nfig = plt.figure(figsize= (12,9))\nsns.violinplot(data=pklegendary)\nplt.ylabel(\"Power Points\",color=\"grey\")\nsns.swarmplot(data=pklegendary, color=\"black\", edgecolor=\"gray\")\nplt.show()","974a80c2":"#DataPrep\ndatatemp = pk[[\"Type 1\",\"HP\",\"Attack\",\"Defense\",\"Sp. Atk\",\"Sp. Def\",\"Legendary\",\"Generation\"]] #can be used later\n\nfig = plt.figure(figsize= (15,9))\n#swarm plot\nsns.set(style=\"darkgrid\")\ng = sns.swarmplot(x=\"Type 1\",y=\"Sp. Atk\",data=datatemp,hue=\"Generation\", edgecolor=['black']*6)\nplt.ylabel(\"Special Attack\")\nplt.title(\"Special Attack of Different Types by Gen\")\nplt.show()","e700c442":"# Stacked Bar Chart of Pokemon Types and count differentiating based on Legend\nfig = plt.figure(figsize= (15,9))\nbarWidth = 1\nr = [i for i in range(18)]\nbars1 = pk[pk[\"Legendary\"]].groupby(\"Type 1\")[\"Type 1\"].count().values #initial counts it doesn't take into account pokemons that are not legendary\nbars1  = [0, 2, 12,  4,  1, 0, 5,  2,  2,  3,  4,  2,  2,0, 14,  4,  4,  4] #changing Non Legendary types with zero\nbars2 = pk[pk[\"Legendary\"]==False].groupby(\"Type 1\")[\"Type 1\"].count().values\nnames = pk.groupby(\"Type 1\")[\"Type 1\"].count().index\nplt.bar(r,bars2 , color='green', edgecolor=['black']*18, width=barWidth,label='Not Legendary') #first Non Legendary Pokemons bar\nplt.bar(r, bars1, bottom=bars2, color='blue', edgecolor=['black']*18, width=barWidth,label='Legendary',hatch='..') #Legendary Pokemons' stacked bar\nplt.xticks(r, names, fontweight='bold')\nplt.ylabel(\"Counts\",color='grey')\nplt.xlabel(\"Primary Types\",color='grey')\nplt.legend()\nplt.show()","204a1862":"cm = sns.light_palette(\"green\", as_cmap=True)\npd.crosstab(pk[\"Type 1\"],pk[\"Type 2\"] , rownames=['Primary Type'], colnames=['Secondary Type']).style.background_gradient(cmap=cm)\n","80bd88ef":"#function to plot line for each capability of pok\u00e9mon\ndef plotline(i):\n    a= pk.groupby(\"Generation\")[i].mean().index\n    b = pk.groupby(\"Generation\")[i].mean().values\n    plt.plot(a,b,ls='dashed')\n#plotting\nfig = plt.figure(figsize=(12,9))\nfor i in pk.columns[5:11]:   #go through each required column\n    plotline(i)\nplt.legend(pk.columns[5:11], loc='upper left')\nplt.ylabel(\"Avg. Points\", color = 'grey')\nplt.xlabel(\"Generations\", color = 'grey')\nplt.title(\"Pok\u00e9mon Capabilities by Generations\",color='blue')\nplt.show()\n","ee688422":"#Functions for Pok\u00e9mon Tracker\ndef pokeatri(trace1):\n    cm = sns.light_palette(\"orange\", as_cmap=True)\n    pkt = pk.fillna('Unknown')\n    display(pkt[pkt[\"Name\"] == trace1].iloc[:,2:-1])\n\n\ndef PokeTracker(trace1):\n    pokeatri(trace1)\n    x = pk[pk[\"Name\"] == trace1]\n    trace1 = go.Scatterpolar(\n      r = [x['HP'].values[0],x['Attack'].values[0],x['Defense'].values[0],x['Sp. Atk'].values[0],x['Sp. Def'].values[0],x['Speed'].values[0],x[\"HP\"].values[0]],\n      theta = ['HP','Attack','Defense','Sp. Atk','Sp. Def','Speed','HP'],\n      fill = 'toself',\n      name = trace1\n    )\n    layout = go.Layout(\n          xaxis=dict(\n            domain=[0, 0.45]\n            ),\n            yaxis=dict(\n            domain=[0, 0.45]\n            ),\n        \n           \n          showlegend = True,\n          title = \"Pok\u00e9mons' Performance (RAW power)\"\n    )\n\n    data = [trace1]\n    fig = go.Figure(data=data, layout=layout)\n\n    iplot(fig, filename = \"Pokemon stats\")\n","15dd5c30":"PokeTracker(\"Pikachu\")","519031f7":"cm = sns.light_palette(\"orange\", as_cmap=True)\npk[['Name','Type 1','Type 2','HP','Total','Legendary']].sort_values(by=['Total'],ascending = False).head(20).sort_values(by=['Legendary','Type 1','Type 2'],ascending = False).reset_index(drop=True).style.background_gradient(cmap=cm)\n","4ab2bae4":"<br\/>\n**<font size=4 color=\"#D4AF37\">Legendary Pok\u00e9mon with highest HP<\/font>**","49f95ad4":"<br\/>\n**<font size=4 color=\"#D4AF37\">Pok\u00e9mon Capabilities (Attack, Defense, Speed, etc) by Generations<\/font>**","ade1193b":"<br\/>\n**<font size=4 color=\"#D4AF37\">Which Generation is most Aggressive\/Defensive?<\/font>**","042846d1":"**<font size=4 color=\"#D4AF37\">Pokemon - what type are you?<\/font>**","82cab62c":"<br\/>\n**<font size=4 color=\"#D4AF37\">How closely related are Attack and Special Attack!<\/font>**","ae23eb98":"<br\/>\n**<font size=4 color=\"#D4AF37\">Does Speed of a Pok\u00e9mon has any impact on its Attacking Capability?<\/font>**","206ff800":"<br\/>\n**<font size=4 color=\"#D4AF37\">Legendary Pok\u00e9mon Capabilities<\/font>**","b6eec0fd":"***A bit maybe!***","9c5b9f5f":"<br\/>\n[>> Pokemon battle between Pikachu, Charmander, Bulbasaur and Squirtle <<](http:\/\/https:\/\/www.youtube.com\/watch?v=45g6_DoLgks)","9066c50b":"**<font size=3 color=\"blue\">Dataset used<\/font>**","5348af0a":"***As it Appears they seem to be correlated enough!***","f7f24229":"***Clearly a No!***","f895dec6":"<br\/>\n**<font size=4 color=\"#D4AF37\">Some Popular Type2 of Pok\u00e9mons (simple word cloud)<\/font>**","66535f08":"<br\/>\n**<font size=4 color=\"#D4AF37\">Correlation & Pok\u00e9 powers<\/font>**","3eee0eec":"<br\/>\n**<font size=4 color=\"#D4AF37\">Special Attacks of Different Types by Generations<\/font>**","d879779d":"<br\/>\n**<font size=4 color=\"#D4AF37\">Pok\u00e9mons Attack, Defense and Speed by Types<\/font>**","98998e34":"<br\/>\n**<font size=4 color=\"#D4AF37\">Aye!, Pok\u00e9mon, What Type are you?<\/font>**\n![Pok\u00e9dex](https:\/\/i.ytimg.com\/vi\/hDMLExpDRY0\/maxresdefault.jpg)","62942223":"**<font size=4 color=\"#830303\">Welcome to Pok\u00e9Land!!<\/font>** <font size=4 color=\"#830303\">(Feeding or Molesting of Pok\u00e9mons is STRICTLY PROHIBITED) <\/font>","8ecb0e6e":"<br\/>\n**<font size=4 color=\"#D4AF37\">Pok\u00e9mon --> Primary and Secondary Types (Type1, Type2)<\/font>**","f3b528f4":"***Clearly Generation 5th of Pok\u00e9mons is most Aggressive as well as Defensive!***","c3471483":"As seen above in terms of Total Power *16 out of 20 *Top Pok\u00e9mons are Legendary \n<br\/><br\/><br\/>\n**Thank you Everyone!!!, your Feedback is appreciated :)**","e5421fb6":"***Secondary Type of Normal Type Pok\u00e9mon is mostly Flying!***","0cfdc502":"![](https:\/\/i.ytimg.com\/vi\/fcd57IvKKsY\/maxresdefault.jpg)","0c9de474":"<br\/>\n**<font size=4 color=\"#D4AF37\">Top 20 Pok\u00e9mons with highest Total Power points<\/font>**","af7e6897":"> Pikachu- A generation 1, Electric Pokemon!","87b612c2":"<br\/>\n**<font size=4 color=\"#D4AF37\">Legendary\/Non-Legendary Count by Types<\/font>**","2c60a844":"<br\/>\n**<font size=4 color=\"#D4AF37\">Does Speed of a Pok\u00e9mon help in Defense?<\/font>**","a39c55f7":"***Some Types don't have a Single Legendary Pok\u00e9mon. Clearly Fire Type has maximum percentage of Legendary Pok\u00e9mons'***","fe29fa6e":"This data set includes 721 Pokemon, including their number, name, first and second type, and basic stats: HP, Attack, Defense, Special Attack, Special Defense, and Speed."}}