{"cell_type":{"f8b6bc74":"code","087629bd":"code","406c9d3e":"code","2edec134":"code","f144dc44":"code","a71dcc0c":"code","b66891fa":"code","153e21c3":"code","a4655695":"code","9d210295":"code","5daa86a3":"code","e8965a8d":"code","8ebba6ea":"code","478eb80a":"code","c32b12c8":"code","fec96005":"code","28040e15":"code","9eee95cf":"code","b7b01204":"code","4f8e16b7":"code","182ceeed":"code","f4153128":"code","1a8573e4":"code","e151461b":"code","632ba190":"code","4357d209":"code","96c76886":"code","757ee001":"code","6de43c6f":"code","2511f9ec":"code","e8911d44":"code","3a4d77d6":"code","994dc4e2":"code","47fd1da4":"code","4016d9b2":"code","c9c9be88":"code","9049a431":"code","83a66525":"code","e873403a":"code","23f73585":"code","de401b80":"code","b7f95844":"code","47e5b35b":"code","fb863a61":"code","66d66f82":"code","b52fbba6":"code","bd6b303d":"code","65117246":"code","744aed9e":"code","cfc52935":"code","3687a767":"code","ac7b5800":"code","967ae0ca":"code","e6ed014a":"code","37c22bfd":"code","58250ba6":"code","eaa02bac":"code","4b89f28f":"code","1af31204":"code","a5e88e49":"code","5006b295":"code","7d64284d":"code","e8e73a75":"code","6e90b3a4":"code","2561ba32":"markdown","2b314ef0":"markdown","3cb70087":"markdown","58711100":"markdown","042b9751":"markdown","642fb6c7":"markdown","437f350d":"markdown","2fc58e0a":"markdown","759cd60c":"markdown","2b68273a":"markdown","3e9c6f5b":"markdown","ff3d497e":"markdown","804cff49":"markdown","e46b23b5":"markdown","c16e0424":"markdown","e843c9f1":"markdown","4c217109":"markdown","7dcdb0a3":"markdown","32e61ab7":"markdown","3a2b30fa":"markdown","747ac7e4":"markdown","f43dae83":"markdown","bb0edca1":"markdown","8462cfd5":"markdown","e5a120b8":"markdown","f98b32b0":"markdown","b3eb686a":"markdown","6e79e221":"markdown","7e025769":"markdown","62548ac7":"markdown","7d5a938f":"markdown","37373d8d":"markdown","6806dcc6":"markdown","d2fab9a3":"markdown","f74a8f9c":"markdown","57b79881":"markdown","b670c85d":"markdown","6bb7f2dc":"markdown","4680b54f":"markdown","05334487":"markdown"},"source":{"f8b6bc74":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # import matplot library\nimport seaborn as sns # import seaborn library\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","087629bd":"df = pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")","406c9d3e":"df.info()","2edec134":"df.head()","f144dc44":"df.tail()","a71dcc0c":"df.columns","b66891fa":"df.shape","153e21c3":"df.corr()","a4655695":"f, ax = plt.subplots(figsize=(10,10))\nsns.heatmap(df.corr(), annot=True, linewidth=.5, fmt = \".1f\", ax=ax)","9d210295":"df.chol.plot(kind=\"line\", color=\"blue\", label=\"Chol\", linewidth=1, alpha=.5, grid=True, linestyle=\"-\")\ndf.age.plot(kind=\"line\", color=\"red\", label=\"Age\", linewidth=1, alpha=.7, grid=True, linestyle=\"-\")\nplt.legend(loc=\"upper right\") # Legend position\nplt.xlabel(\"Case ID\")           # Label of X axis\nplt.ylabel(\"Level\")     # Label of Y axis\nplt.title(\"Cholesterol\")      # Title of graph\nplt.show()                    #Removes scripting","5daa86a3":"df.loc[:,[\"age\", \"chol\"]].plot(subplots=True)\nplt.show()","e8965a8d":"df.plot(kind=\"scatter\", x=\"age\", y=\"chol\", alpha=.7, color=\"green\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Chol\")\nplt.title(\"Cholesterol Age Scatter Graphic\")\nplt.show()","8ebba6ea":"df.age.plot(kind=\"hist\", bins=20, range= (0,100), density=True)   # normed is depracated Use density instead\nplt.show()","478eb80a":"df.age.plot(kind=\"hist\", cumulative=True)\nplt.show()","c32b12c8":"myDic = { \"name\": \"Adem\", \"surname\": \"Gencer\", \"age\": 38}  # Define a dictionary\nprint(myDic)\nprint(myDic.keys()) # Get dictionary keys\nprint(myDic.values()) # Get dictionary values","fec96005":"myDic = { \"name\": \"Adem\", \"surname\": \"Gencer\", \"age\": 38}  # Define a dictionary\nmyDic[\"name\"] = \"John\"        # Edit existing value\nmyDic[\"Location\"] = \"Turkey\"  # Add a new KEY - VALUE pair\nprint(myDic)\ndel myDic[\"name\"]             # Delete a KEY - VALUE pair\nprint(myDic)\nmyDic.clear()                 # Clear a dictionary\nprint(myDic)\n#del myDic                    # Delete a dictionary\n#print(myDic)","28040e15":"myDic = { \"name\": \"Adem\", \"surname\": \"Gencer\", \"age\": 38}  # Define a dictionary\nprint(\"age\" in myDic)      # Search a KEY in a dictionary","9eee95cf":"print(df[\"age\"])     # series\nprint(\"--------------------------------\")\nprint(df[[\"age\"]])   # dataframe","b7b01204":"# df.age.head()\n# df[\"age\"][1]\n# df[\"age\"].head()\n# df.age[1]             \n# df[[\"age\", \"sex\"]]       # Selecting columns","4f8e16b7":"dfEx = df.copy()\ndfEx = dfEx.set_index(\"age\")          # Change index.\ndfEx.head()","182ceeed":"dfEx.index.name = \"myIndex\"\ndfEx.head()","f4153128":"dfEx.index = range(1,1515,5)\ndfEx.head()","1a8573e4":"dfEx.set_index([\"sex\", \"cp\"]).head()","e151461b":"dfEx.unstack(level=0).head()\n","632ba190":"df.groupby(\"sex\").mean()","4357d209":"df.groupby(\"sex\")[[\"age\", \"chol\"]].min()","96c76886":"df.pivot( columns=\"cp\", values=\"chol\").head(10)","757ee001":"df.loc[10:0:-1, \"cp\":\"fbs\"]  # Reverse select","6de43c6f":"xFilter = df[\"age\"] > 70 \n# This script will creates a filter based on data value.","2511f9ec":"df[xFilter]\n# This code applies filter to a dataframe and shows only records which has TRUE.","e8911d44":"xFilterAge = df[\"age\"] > 60\nxFilterChol = df[\"chol\"] > 300","3a4d77d6":"df[xFilterAge].head() # This shows AGE filtered datas","994dc4e2":"df[xFilterChol].head() # This shows CHOL filtered datas","47fd1da4":"df[xFilterAge & xFilterChol]  # Apple AGE, CHOL filters with AND operator.\n\n#This code can be written shortly\n#df[(df[\"age\"] > 60) & (df[\"chol\"] > 300)]","4016d9b2":"df.age[xFilterChol].head()    # Filter with xFilterChol but show age column.","c9c9be88":"def ageM(n):\n    return n*12\ndf.age.apply(ageM).head()\n\n# df.age.apply(lambda n: n*12)          # In a short way...\n\n# This function will transform age cloumn. Age = age*12","9049a431":"df[\"agelabel\"] = df.age * df.sex        # Only experimental result. It is meaningless.\ndf.head()","83a66525":"df[\"stayofhospital\"] = 0              # Create a new column\ndf.head()","e873403a":"\n\ndfExt = df.head().copy()\ndateList = [\"2020-01-10\",\"2020-01-12\",\"2020-01-12\",\"2020-01-14\",\"2020-01-15\"]\ndateTime = pd.to_datetime(dateList)\ndfExt[\"date\"] = dateTime\ndfExt = dfExt.set_index(\"date\")  # Change index to timeSeries data.\ndfExt.head()","23f73585":"dfExt.loc[\"2020-01-12\":\"2020-01-14\"]   # Use TimeSeries for index.","de401b80":"dfExt.resample(\"D\").mean()","b7f95844":"dfExt.resample(\"D\").mean().interpolate(\"linear\")   # Interpolate missing datas with linear function.","47e5b35b":"for index, value in enumerate(df[\"age\"][0:10]):\n    print(\"index:\", index, \" value:\", value)\n","fb863a61":"for index, value in df[[\"age\"]][10:11].iterrows():\n    print(\"index:\",index,\" value:\",value)","66d66f82":"x = 5 # This is a global variable\ndef myFunc():\n    \"\"\" This is definition of a function\"\"\"\n    y = 2               # This is a local variable. This variable cannot reached outside.\n    result = x*y        # This will print x*y. \n                        # If there is no X value inside function (local) it can be searched globally.\n    print(\"Function returned! Result = \", result)\nmyFunc()","b52fbba6":"def myFunc(x, y = 3, z = 5):\n    \"\"\" You must declare x when you call this function. \n        If you dont declare y, z default variables used in function... \"\"\"\n    print(x+y+z)\n\nmyFunc(5)\nmyFunc(2,1)","bd6b303d":"def myFunc(*args):\n    \"\"\" List of arguments. You can pass flexible parameters. \"\"\"\n    for each in args:\n        print(each)\n    # print(\"--\",args)  # List of variables.\nmyFunc(\"first\")\nprint(\"--------\")\nmyFunc(\"First\", \"Second\", 5)","65117246":"def myFunc(**kwargs):\n    \"\"\" Pass dictionary to a function. \"\"\"\n    for key, value in kwargs.items():\n        print(\"key:\", key, \" value:\", value)\n    \nmyFunc(name = \"Adem\", age = 38)","744aed9e":"multiply = lambda x, y: x*y  # One row function. It returns value.\nprint(multiply(5,4))","cfc52935":"mystr = \"TestString\"\nprint(next(iter(mystr)))\nprint(*iter(mystr))","3687a767":"listKey = {\"name\", \"surname\", \"age\"}\nlistVal = {\"Adem\", \"Gencer\", 38}\n\nzipList = zip(listKey, listVal)\nmyList = list(zipList)\nprint(myList)\n","ac7b5800":"unZip = zip(*myList)\nunList1, unList2 = list(unZip)\nprint(unList1)        # This is a tuple\nprint(list(unList2))  # This is a list","967ae0ca":"myList = [1,2,3,4,5]\nrevList = [i + 1 for i in myList]  # Do a function for every element.\nprint(revList)","e6ed014a":"myList = [1,2,3,4,5]\nrevList = [0 if i % 2 == 0 else 1 for i in myList]  # Get 0 for even numbers.\n\nprint(myList)\nprint(revList)","37c22bfd":"cutoff = sum(df.age)\/len(df.age)\nprint(\"Cutoff value: \",cutoff)\n\ndf[\"ageLevel\"] = [\"High age\" if i > cutoff else \"Low age\" for i in df.age]\ndf.loc[:10,[\"age\",\"ageLevel\"]]","58250ba6":"df.describe()","eaa02bac":"df.boxplot(column = \"chol\", by = \"sex\")\nplt.show()","4b89f28f":"df_short = df.head()\nmeltedData = pd.melt(frame=df_short, id_vars = \"age\", value_vars = [\"sex\", \"chol\"])\nmeltedData","1af31204":"meltedData.pivot(index = \"age\", columns = \"variable\", values = \"value\")","a5e88e49":"headerData = df.head()\ntailData = df.tail()\npd.concat([headerData, tailData], axis=0, ignore_index= True)","5006b295":"df.dtypes","7d64284d":"df.ca = df.ca.astype(float)\ndf.dtypes","e8e73a75":"df.sex.value_counts(dropna=False)   # Print value counts (drop null data = false)\ndf.sex.dropna(inplace= True)        # Check data. If value is null drop that raw\nassert 1==1                         # Check previous code.","6e90b3a4":"assert df.columns[0] == \"age\"    # If code is true it doesnot return anything.","2561ba32":"### 4. Iterable\nIterate a string, list or dictionary with Iter() function.","2b314ef0":"DataTypes can be converted via **astype()** command.","3cb70087":"### Resampling with TimeSeries\n> When using timeSeries we can resample\n* D: Day \n* M: Month \n* A: Year","58711100":"### 2. Load and read a database. ","042b9751":"### Indexing","642fb6c7":"### 5. MATPLOTLIB\nUsing for data virtualisation and creating **LINE**, **SCATTER**, **BAR**, **HISTOGRAM** graphics.\n","437f350d":"### 3. Lambda function\nLambda function is a one string function.","2fc58e0a":"Functions can be NESTED.. \n\n### 2. Function variables\n* Default variables\n* List of variables (*args)\n* Dictionary of variables (**kwargs)","759cd60c":"### 7. PANDAS\nPandas is a library where u can use your data like a structured database format.","2b68273a":"Dictionary can be used for storing KEY-VALUE pairs.","3e9c6f5b":"### 5. Zip\nCombine two lists. First is **keys** and second is **values**.","ff3d497e":"### Contents\n1. Functions basics\n2. Function variables\n3. Lambda function\n4. Iterable\n5. Zip\n6. List","804cff49":"### 3. Concatenating data\n\nCombining dataframes.\n* **axis**: 0 for vertical, 1 for horizontal","e46b23b5":"# Personal notebook for Data Science\n> **PART 3: Cleaning data**<br>\n*> Created by: Adem GENCER*","c16e0424":"### 6. List","e843c9f1":"### Filtering data in pandas\n* Filter a data will result a TRUE-FALSE series.\n* Apply this filter on data will show you data values.","4c217109":"### 4. Correlation map","7dcdb0a3":"### Selecting","32e61ab7":"This code \"info()\" shows how the data structured. \n* How many entries\n* How many columns\n* Column types\n* Memory usage","3a2b30fa":"### 5. Missing data\n\n* Drop missing data with **dropna()**\n* Fill missing value with **fillna()**\n* Fill missing value with sample data ","747ac7e4":"# Personal notebook for Data Science\n> **PART 1: Introduction to Pyton**<br>\n*> Created by: Adem GENCER*","f43dae83":"### Pivot table","bb0edca1":"### GroupBy","8462cfd5":"### 8. LOOPS\n\nThere is two different loop structure in Pyton. **FOR** loops and **WHILE** loops. \n","e5a120b8":"Create AGE and CHOL filters.","f98b32b0":"### 6. DICTIONARY\n","b3eb686a":"### TIMESERIES","6e79e221":"### 1. Import libraries \n*     **numpy** for linear algebra\n*     **pandas** for dataframes\n*     **matplotlib** for plot graphs\n*     **seaborn** for visualisation","7e025769":"# Personal notebook for Data Science\n> **PART 2: Introduction to Functions**<br>\n*> Created by: Adem GENCER*","62548ac7":"### 4. Datatypes","7d5a938f":"### 2. Melt and pivot data**","37373d8d":"### 1. Exploratory data analysis (EDA)\n* **Lower quartile**: %25, Q1\n* **Median**: %50, Q2\n* **Upper quartile**: %75, Q3\n\n**OUTLIER**: 1.5 IQR up or down","6806dcc6":"### Outher - inner index","d2fab9a3":"### Contents\n1. Import libraries\n2. Load and read database\n3. Basic database functions\n4. Correlation map\n5. Matplotlib\n6. Dictionary\n7. Pandas\n8. Loops","f74a8f9c":"### 1. Functions basics","57b79881":"### Example for dataframe\n* Get a mean of AGE values. This is our cutoff value.\n* Define a column (AGELEVEL) and iterate data with loop. If value is above pass HIGH AGE else LOW AGE.\n* Show first 10 record with AGE, AGELEVEL columns.","b670c85d":"### Contents\n1. Exploratory data analysis (EDA)\n2. Melt and pivot data\n3. Concatenating data\n4. Datatypes\n5. Missing data","6bb7f2dc":"### 3. Basic database functions\n* Show data **INFO**\n* Loading **HEAD** and **TAIL** of data\n* **COLUMNS** of data","4680b54f":"### Transforming","05334487":"# Personal notebook for Data Science\n> **PART 1: Introduction to Pyton**<br>\n> **PART 2: Introduction to Functions**<br>\n> **PART 3: Cleaning data**<br>\n> Created by: Adem GENCER"}}