{"cell_type":{"8677b8c2":"code","2dcf4c23":"code","53d21aae":"code","73a8b03f":"code","5d83d0db":"code","d3107756":"code","6427410f":"code","3e1687df":"code","c0f061ff":"code","fb7a295c":"code","d353cf6b":"code","dbd0dc68":"code","d639b456":"code","4322535a":"code","79b33168":"code","27d4b592":"code","bfd02891":"code","e72bbb54":"code","ae0ddb5f":"code","48e2e259":"code","ff5d2093":"code","e8896876":"code","2cf31b5a":"code","ad38892a":"code","cbb5b29f":"code","349c76aa":"code","ec30b475":"code","2a8eb231":"code","5f10cd3b":"code","8c6fc32d":"code","a2bd5b14":"markdown","cc2a2fb6":"markdown","3b9e3166":"markdown","77d77b6a":"markdown","6fd4bec5":"markdown","6ceb886e":"markdown","372cac0d":"markdown","ea9f451d":"markdown","9496dccc":"markdown"},"source":{"8677b8c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2dcf4c23":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline","53d21aae":"from pandas import read_csv\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\nfrom matplotlib import pyplot\n ","73a8b03f":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.metrics import roc_auc_score,accuracy_score","5d83d0db":"df1=pd.read_csv(\"\/kaggle\/input\/health-insurance-cross-sell-prediction\/train.csv\")","d3107756":"df1.head(n=10)","6427410f":"#we ll try look at the response variable if its balanced or impbalanced classification\nsns.countplot(df1['Response'])\n","3e1687df":"df1.dtypes","c0f061ff":"df1.isnull().sum()\n\n","fb7a295c":"numeric_cols=[]\ncategorical_cols=[]\ndef colmns_dtypes(dataframe):\n    for i in dataframe.columns:\n        if dataframe[i].dtypes!='object':\n            numeric_cols.append(i)\n        else:\n            categorical_cols.append(i)\ncolmns_dtypes(df1)\n            ","d353cf6b":"numeric_cols","dbd0dc68":"categorical_cols","d639b456":"fig, ax =plt.subplots(1,2,figsize=(15,5))\nsns.countplot(x='Gender',hue='Previously_Insured',data=df1,ax=ax[0])\nsns.countplot(x='Gender',hue='Vehicle_Damage',data=df1,ax=ax[1])\nfig.show()","4322535a":"sns.stripplot(y='Annual_Premium',x='Response',data=df1)","79b33168":"fig, ax =plt.subplots(1,2,figsize=(15,5))\nsns.countplot(data=df1,x='Gender',hue='Vehicle_Age',ax=ax[0])\nsns.countplot(data=df1,x='Previously_Insured',hue='Vehicle_Damage',ax=ax[1])\nfig.show()","27d4b592":"plt.figure(figsize=(20,9))\nsns.FacetGrid(df1, hue = 'Response',\n             height = 6,xlim = (0,150)).map(sns.kdeplot, 'Age', shade = True,bw=2).add_legend()","bfd02891":"df1.describe()","e72bbb54":"le = LabelEncoder()\ndf1['Gender'] = le.fit_transform(df1['Gender'])\ndf1['Driving_License'] = le.fit_transform(df1['Driving_License'])\ndf1['Previously_Insured'] = le.fit_transform(df1['Previously_Insured'])\ndf1['Vehicle_Damage'] = le.fit_transform(df1['Vehicle_Damage'])\ndf1['Driving_License'] = le.fit_transform(df1['Driving_License'])\ndf1['Vehicle_Age'] = le.fit_transform(df1['Vehicle_Age'])","ae0ddb5f":"X2 = df1.drop([\"Response\"], axis=1)\ny2 = df1[\"Response\"]\ndef select_features(X_train, y_train, X_test):\n    fs = SelectKBest(score_func=f_classif, k='all')\n    fs.fit(X_train, y_train)\n    X_train_fs = fs.transform(X_train)\n    X_test_fs = fs.transform(X_test)\n    return X_train_fs, X_test_fs, fs\nX_train, X_test, y_train, y_test = train_test_split(X2, y2, test_size=0.33, random_state=1)\nX_train_fs, X_test_fs, fs = select_features(X_train, y_train, X_test)\n\nfor i in range(len(fs.scores_)):\n    print('Feature %d: %f' % (i, fs.scores_[i]))\n\npyplot.bar([i for i in range(len(fs.scores_))], fs.scores_)\npyplot.show()","48e2e259":"df1.columns","ff5d2093":"def evaluation_stats(model,X_train, X_test, y_train, y_test,algo,is_feature=False):\n    print('Train Accuracy')\n    y_pred_train = model.predict(X_train)                           \n    print(accuracy_score(y_train, y_pred_train))\n    print('Validation Accuracy')\n    y_pred_test = model.predict(X_test)                           \n    print(accuracy_score(y_test, y_pred_test))\n    print(\"\\n\")\n    print(\"Train AUC Score\")\n    print(roc_auc_score(y_train, y_pred_train))\n    print(\"Test AUC Score\")\n    print(roc_auc_score(y_test, y_pred_test))\n    \ndef training(model,X_train, y_train):\n    return model.fit(X_train, y_train)","e8896876":"sm = SMOTE(random_state=101)\nX_res, y_res = sm.fit_resample(X_train, y_train)","2cf31b5a":"rf_model = training(RandomForestClassifier(),X_res,y_res)\nevaluation_stats(rf_model,X_res, X_test, y_res, y_test,'RANDOM FOREST')","ad38892a":"rf_model = training(RandomForestClassifier(criterion='entropy',n_estimators=200,max_depth=3),X_res, y_res)\nevaluation_stats(rf_model,X_res, X_test, y_res, y_test,'RANDOM FOREST')","cbb5b29f":"from sklearn.linear_model import LogisticRegression","349c76aa":"lr_model = training(LogisticRegression(),X_res,y_res)\nevaluation_stats(lr_model,X_res, X_test, y_res, y_test,'logistic regression')\n","ec30b475":"grid_values = {'penalty': ['l1', 'l2'],'C':[0.001,.009,0.01,.09,1,5,10,25]}\ngrid_clf_acc = GridSearchCV(lr_model, param_grid = grid_values,scoring = 'recall')\n\n\n\n","2a8eb231":"grid_clf_acc.fit(X_train, y_train)","5f10cd3b":"y_pred_acc = grid_clf_acc.predict(X_test)\n\nprint('Accuracy Score : ' + str(accuracy_score(y_test,y_pred_acc)))\nprint('Test AUC Score : ' + str(roc_auc_score(y_test,y_pred_acc)))","8c6fc32d":"xbg_model = training(XGBClassifier(n_estimators=1000,max_depth=10),X_res, y_res)\nevaluation_stats(xbg_model,X_res, X_test, y_res, y_test,'XGB',is_feature=False)","a2bd5b14":"**Okhaaaaayyyyy so Anova F-test gives us something important to look upon very cleary**\n**Perhaps fetaures in the bar graph  holding more impportance than others**\n\n","cc2a2fb6":"> **Looks quite clear average age of people who get the insurance done is 45 years**","3b9e3166":"**let's try some statistical ways of finding the important features of this Dataset.**\n**One of them is ANOVA F-test**","77d77b6a":"**So now we clearly know that we need to work upon this to get better scores on test dataset,we ll come to this later\nfirst lets try to do some EDA and find out some intresting things in the dataset**","6fd4bec5":"**Now let's try out the most talked about algorithm -LOGISTIC REGRESSION**","6ceb886e":"![](http:\/\/)","372cac0d":"![display image](https:\/\/media.giphy.com\/media\/W4WkaJE7w1T6455ve1\/giphy.gif)\n","ea9f451d":"**now I think we are ready for modelling but before that let's solve the problem of imbalanced classification**\n**There are many ways to solve this problem, here I ll be using Syntheic Minority Oversampling Technique(SMOTE)**\n\n**Go read about the techniques at https:\/\/machinelearningmastery.com\/**","9496dccc":"**Clearly visible that higher Premium amounts does not entertain people for the insurance,that means we have outliers and we don't need them**"}}