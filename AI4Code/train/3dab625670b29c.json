{"cell_type":{"8472193b":"code","d5b1e5aa":"code","0b070bf5":"code","bf32680a":"code","cfe32f86":"code","fbef87b8":"code","f8310d30":"code","1dc22d68":"code","9f5c54a2":"code","422abc33":"code","c84ad1d8":"code","b4ddaa9f":"code","cc0e409d":"code","e214596f":"code","3b9056f8":"code","6a26f96c":"code","2740df59":"code","e394a952":"code","c418570b":"code","994e334e":"code","43d5e5c2":"code","1286a594":"code","2e709c3a":"code","76190427":"code","4e44dc10":"code","be52027b":"code","0d6bc893":"code","a7b702a8":"code","c32e622c":"code","a8e151e6":"code","e20d064b":"code","f642bf01":"code","e57296ff":"code","c2749d53":"code","1939afcb":"code","0fc9defc":"code","0dd7a45f":"code","39148c6e":"code","38bd8554":"code","31249ff4":"code","73925bab":"code","70d21ea0":"code","bc37209b":"code","a69d8d8b":"code","95847b44":"code","8590403b":"code","f368a20d":"code","1c84655e":"code","445ce2ee":"code","83961763":"markdown","95968486":"markdown","92478858":"markdown","5dbb4c5a":"markdown","a5e244e0":"markdown","0937d8c5":"markdown","3a75df0d":"markdown","b99a4480":"markdown","3a45655d":"markdown","310d870c":"markdown","7c2fc3f8":"markdown","baa67867":"markdown","a610b807":"markdown","7d898f17":"markdown","482c0b7e":"markdown","4132d38d":"markdown","4fb33b4d":"markdown","2a7ac117":"markdown","4830e028":"markdown","ee734e98":"markdown","5123943b":"markdown","4f971d54":"markdown","f3638ed4":"markdown","ea7ee472":"markdown","d3c6e972":"markdown","2ea72d73":"markdown","7ee95edd":"markdown","f6e8f115":"markdown","3d7c2414":"markdown","8a00db51":"markdown","48338a3a":"markdown","8a8dafde":"markdown","b47739f8":"markdown","11d1b11d":"markdown","310f3c2e":"markdown","0157b66d":"markdown","11d7cc87":"markdown","c832931c":"markdown","dac4d525":"markdown","b18df8dd":"markdown","f2f97400":"markdown","8e722829":"markdown","6923e6d6":"markdown","22ca3ec4":"markdown","c2188320":"markdown","bb758f42":"markdown","25fb6b63":"markdown","021afa50":"markdown","5b3a845c":"markdown","8be5513b":"markdown","2572e1a3":"markdown","07d6faeb":"markdown","8a6ebcaa":"markdown","3f07b800":"markdown","36333dfd":"markdown","b14ee377":"markdown","ed02e045":"markdown","7868ae1e":"markdown","be7daeab":"markdown","6b0da382":"markdown","01cc0f97":"markdown","ad3923f7":"markdown","fb776137":"markdown","402c69a2":"markdown"},"source":{"8472193b":"import pandas as pd\n\nimport matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n\nimport nltk","d5b1e5aa":"df = pd.read_csv(\"..\/input\/train.tsv\", sep=\"\\t\")","0b070bf5":"df_test = pd.read_csv(\"..\/input\/test.tsv\", sep=\"\\t\")","bf32680a":"df.head(10)","cfe32f86":"df_test.head(10)","fbef87b8":"example = df[(df['PhraseId'] >= 0) & (df['PhraseId'] <= 2)]\n\nprint(example[\"Phrase\"].values[0], \" - Sentiment:\", example[\"Sentiment\"].values[0])\n\nprint()\n\nprint(example[\"Phrase\"].values[1], \" - Sentiment:\", example[\"Sentiment\"].values[1])","f8310d30":"example = df[(df['PhraseId'] >= 517) & (df['PhraseId'] <= 518)]\n\nprint(example[\"Phrase\"].values[0], \" - Sentiment:\", example[\"Sentiment\"].values[0])\n\nprint()\n\nprint(example[\"Phrase\"].values[1], \" - Sentiment:\", example[\"Sentiment\"].values[1])","1dc22d68":"example = df[(df['PhraseId'] >= 68) & (df['PhraseId'] <= 69)]\n\nprint(example[\"Phrase\"].values[0], \" - Sentiment:\", example[\"Sentiment\"].values[0])\n\nprint()\n\nprint(example[\"Phrase\"].values[1], \" - Sentiment:\", example[\"Sentiment\"].values[1])","9f5c54a2":"example = df[(df['PhraseId'] >= 10737) & (df['PhraseId'] <= 10738)]\n\nprint(example[\"Phrase\"].values[0], \" - Sentiment:\", example[\"Sentiment\"].values[0])\n\nprint()\n\nprint(example[\"Phrase\"].values[1], \" - Sentiment:\", example[\"Sentiment\"].values[1])","422abc33":"example = df[(df['PhraseId'] >= 22) & (df['PhraseId'] <= 24)]\n\nprint(example[\"Phrase\"].values[0], \" - Sentiment:\", example[\"Sentiment\"].values[0])\n\nprint()\n\nprint(example[\"Phrase\"].values[1], \" - Sentiment:\", example[\"Sentiment\"].values[1])\n\nprint()\n\nprint(example[\"Phrase\"].values[2], \" - Sentiment:\", example[\"Sentiment\"].values[2])","c84ad1d8":"example = df[(df['PhraseId'] >= 46) & (df['PhraseId'] <= 47)]\n\nprint(example[\"Phrase\"].values[0], \" - Sentiment:\", example[\"Sentiment\"].values[0])\n\nprint()\n\nprint(example[\"Phrase\"].values[1], \" - Sentiment:\", example[\"Sentiment\"].values[1])","b4ddaa9f":"## TF-IDF and uncleaned dataset\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom nltk.tokenize import TweetTokenizer\n\ntokenizer = TweetTokenizer()\n\nvectorizer = TfidfVectorizer(ngram_range=(1, 3), tokenizer=tokenizer.tokenize)\nfull_text = list(df['Phrase'].values) + list(df_test['Phrase'].values)\n#full_text\n\nvectorizer.fit(full_text)\ntrain_vectorized = vectorizer.transform(df['Phrase'])\ntest_vectorized = vectorizer.transform(df_test['Phrase'])","cc0e409d":"print(\"Train set dimensions after applying TF-IDF vectorizer:\")\nnp.shape(train_vectorized)","e214596f":"X = train_vectorized\ny = df.Sentiment.values\n\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import classification_report\nimport time\n\n# create a stratified split of the data and a 80\/20 split.\nxtrain, xvalid, ytrain, yvalid = train_test_split(X, y, stratify=y, random_state=42, test_size=0.2, shuffle=True)\n","3b9056f8":"ml_default_performance_metrics_df = pd.DataFrame(columns=['accuracy','F1-score','training-time'], index=['LogisticRegression', 'DecisionTreeClassifier', 'ExtraTreeClassifier', 'ExtraTreesClassifier', 'RandomForestClassifier', 'LinearSVC', 'BernoulliNB', 'MultinomialNB', 'AdaboostClassifier', 'XGB', 'KNeighborsClassifier'])\n","6a26f96c":"from sklearn.linear_model import LogisticRegression\n\nstart_time = time.time()\n\nclf_logistic_regression = LogisticRegression(multi_class='ovr', solver='sag', random_state=42)\nclf_logistic_regression.fit(xtrain, ytrain)\npredictions = clf_logistic_regression.predict(xvalid)\n\nprint(classification_report(yvalid, predictions))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions, average='weighted'))\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions)\n\n\nml_default_performance_metrics_df.loc['LogisticRegression']['training-time'] = time.time() - start_time\nml_default_performance_metrics_df.loc['LogisticRegression']['accuracy'] = accuracy_score(yvalid, predictions)\nml_default_performance_metrics_df.loc['LogisticRegression']['F1-score'] = f1_score(yvalid, predictions, average='micro')\n\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","2740df59":"from sklearn.tree import DecisionTreeClassifier\n\nstart_time = time.time()\n    \nprint()\nprint(\"Evaluation of DecisionTreeClassifier, with train-test split:\")\n\nclf_DecisionTreeClassifier = DecisionTreeClassifier(random_state=42)\nclf_DecisionTreeClassifier.fit(xtrain, ytrain)\npredictions = clf_DecisionTreeClassifier.predict(xvalid)\nprint(classification_report(yvalid, predictions))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions, average='weighted'))\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions)\n\n\nml_default_performance_metrics_df.loc['DecisionTreeClassifier']['training-time'] = time.time() - start_time\nml_default_performance_metrics_df.loc['DecisionTreeClassifier']['accuracy'] = accuracy_score(yvalid, predictions)\nml_default_performance_metrics_df.loc['DecisionTreeClassifier']['F1-score'] = f1_score(yvalid, predictions, average='weighted')\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","e394a952":"from sklearn.tree import ExtraTreeClassifier\n\nstart_time = time.time()\n    \nprint()\nprint(\"Evaluation of ExtraTreeClassifier with train-test split:\")\n\nclf_ExtraTreeClassifier = ExtraTreeClassifier(random_state=42)\nclf_ExtraTreeClassifier.fit(xtrain, ytrain)\npredictions = clf_ExtraTreeClassifier.predict(xvalid)\nprint(classification_report(yvalid, predictions))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions, average='weighted'))\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions)\n\nml_default_performance_metrics_df.loc['ExtraTreeClassifier']['training-time'] = time.time() - start_time\nml_default_performance_metrics_df.loc['ExtraTreeClassifier']['accuracy'] = accuracy_score(yvalid, predictions)\nml_default_performance_metrics_df.loc['ExtraTreeClassifier']['F1-score'] = f1_score(yvalid, predictions, average='weighted')\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","c418570b":"from sklearn.ensemble import ExtraTreesClassifier\n\nstart_time = time.time()\n    \nprint()\nprint(\"Evaluation of ExtraTreesClassifier with train-test split:\")\n\nclf_ExtraTreesClassifier = ExtraTreesClassifier(n_estimators=10, random_state=42)\nclf_ExtraTreesClassifier.fit(xtrain, ytrain)\npredictions = clf_ExtraTreesClassifier.predict(xvalid)\nprint(classification_report(yvalid, predictions))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions, average='weighted'))\n\n\nml_default_performance_metrics_df.loc['ExtraTreesClassifier']['training-time'] = time.time() - start_time\nml_default_performance_metrics_df.loc['ExtraTreesClassifier']['accuracy'] = accuracy_score(yvalid, predictions)\nml_default_performance_metrics_df.loc['ExtraTreesClassifier']['F1-score'] = f1_score(yvalid, predictions, average='weighted')\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions)\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","994e334e":"from sklearn.ensemble import RandomForestClassifier\n\nstart_time = time.time()\n    \nprint()\nprint(\"Evaluation of RandomForestClassifier with train-test split:\")\n\nclf_RandomForestClassifier = RandomForestClassifier(n_estimators = 10, random_state=42)\nclf_RandomForestClassifier.fit(xtrain, ytrain)\npredictions = clf_RandomForestClassifier.predict(xvalid)\nprint(classification_report(yvalid, predictions))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions, average='weighted'))\n\n\nml_default_performance_metrics_df.loc['RandomForestClassifier']['training-time'] = time.time() - start_time\nml_default_performance_metrics_df.loc['RandomForestClassifier']['accuracy'] = accuracy_score(yvalid, predictions)\nml_default_performance_metrics_df.loc['RandomForestClassifier']['F1-score'] = f1_score(yvalid, predictions, average='weighted')\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions)\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","43d5e5c2":"from sklearn.svm import LinearSVC\n\nstart_time = time.time()\n    \nprint()\nprint(\"Evaluation of LinearSVC, multi_class='ovr', with train-test split:\")\n\nclf_LinearSVC = LinearSVC(multi_class='ovr', random_state=42)\nclf_LinearSVC.fit(xtrain, ytrain)\npredictions = clf_LinearSVC.predict(xvalid)\nprint(classification_report(yvalid, predictions))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions, average='weighted'))\n\n\nml_default_performance_metrics_df.loc['LinearSVC']['training-time'] = time.time() - start_time\nml_default_performance_metrics_df.loc['LinearSVC']['accuracy'] = accuracy_score(yvalid, predictions)\nml_default_performance_metrics_df.loc['LinearSVC']['F1-score'] = f1_score(yvalid, predictions, average='weighted')\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions)\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","1286a594":"from sklearn.naive_bayes import BernoulliNB\n\nstart_time = time.time()\n    \nprint()\nprint(\"Evaluation of BernoulliNB with train-test split:\")\n\nclf_BernoulliNB = BernoulliNB()\nclf_BernoulliNB.fit(xtrain, ytrain)\npredictions = clf_BernoulliNB.predict(xvalid)\nprint(classification_report(yvalid, predictions))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions, average='weighted'))\n\n\nml_default_performance_metrics_df.loc['BernoulliNB']['training-time'] = time.time() - start_time\nml_default_performance_metrics_df.loc['BernoulliNB']['accuracy'] = accuracy_score(yvalid, predictions)\nml_default_performance_metrics_df.loc['BernoulliNB']['F1-score'] = f1_score(yvalid, predictions, average='weighted')\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions)\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","2e709c3a":"from sklearn.naive_bayes import MultinomialNB\n\nstart_time = time.time()\n    \nprint()\nprint(\"Evaluation of MultinomialNB with train-test split:\")\n\nclf_MultinomialNB = MultinomialNB()\nclf_MultinomialNB.fit(xtrain, ytrain)\npredictions = clf_MultinomialNB.predict(xvalid)\nprint(classification_report(yvalid, predictions))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions, average='weighted'))\n\n\nml_default_performance_metrics_df.loc['MultinomialNB']['training-time'] = time.time() - start_time\nml_default_performance_metrics_df.loc['MultinomialNB']['accuracy'] = accuracy_score(yvalid, predictions)\nml_default_performance_metrics_df.loc['MultinomialNB']['F1-score'] = f1_score(yvalid, predictions, average='weighted')\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions)\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","76190427":"from sklearn.ensemble import AdaBoostClassifier\n\nstart_time = time.time()\n    \nprint()\nprint(\"Evaluation of Adaboost with train-test split:\")\n\nclf_adaboost = AdaBoostClassifier(random_state=42)\nclf_adaboost.fit(xtrain, ytrain)\npredictions = clf_adaboost.predict(xvalid)\nprint(classification_report(yvalid, predictions))\n\nprint()\nprint(\"accuracy score\", accuracy_score(yvalid, predictions))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions, average='weighted'))\n\n\nml_default_performance_metrics_df.loc['AdaboostClassifier']['training-time'] = time.time() - start_time\nml_default_performance_metrics_df.loc['AdaboostClassifier']['accuracy'] = accuracy_score(yvalid, predictions)\nml_default_performance_metrics_df.loc['AdaboostClassifier']['F1-score'] = f1_score(yvalid, predictions, average='weighted')\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions)\n\n\n### storing performance results:\n\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","4e44dc10":"import xgboost as xgb\n\nstart_time = time.time()\n\nclf_xgb = xgb.XGBClassifier(objective = 'multi:softmax', seed=42)\nclf_xgb.fit(xtrain, ytrain)\npredictions = clf_xgb.predict(xvalid)\n\nprint(classification_report(yvalid, predictions))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions, average='weighted'))\n\n\nml_default_performance_metrics_df.loc['XGB']['training-time'] = time.time() - start_time\nml_default_performance_metrics_df.loc['XGB']['accuracy'] = accuracy_score(yvalid, predictions)\nml_default_performance_metrics_df.loc['XGB']['F1-score'] = f1_score(yvalid, predictions, average='weighted')\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions)\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","be52027b":"from sklearn.neighbors import KNeighborsClassifier\n\nstart_time = time.time()\n\nclf_knn = KNeighborsClassifier()\nclf_knn.fit(xtrain, ytrain)\npredictions = clf_knn.predict(xvalid)\n\nprint(classification_report(yvalid, predictions))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions, average='weighted'))\n\n\nml_default_performance_metrics_df.loc['KNeighborsClassifier']['training-time'] = time.time() - start_time\nml_default_performance_metrics_df.loc['KNeighborsClassifier']['accuracy'] = accuracy_score(yvalid, predictions)\nml_default_performance_metrics_df.loc['KNeighborsClassifier']['F1-score'] = f1_score(yvalid, predictions, average='weighted')\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions)\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","0d6bc893":"ml_default_performance_metrics_df.sort_values(by=\"accuracy\", ascending=False)","a7b702a8":"sns.set(rc={'figure.figsize':(15.27,6.27)})\nml_default_performance_metrics_df.sort_values(by=\"accuracy\", ascending=False).accuracy.plot(kind=\"bar\")","c32e622c":"ml_default_performance_metrics_df.sort_values(by=\"F1-score\", ascending=True)","a8e151e6":"sns.set(rc={'figure.figsize':(15.27,6.27)})\nml_default_performance_metrics_df.sort_values(by=\"F1-score\", ascending=False)[\"F1-score\"].plot(kind=\"bar\")","e20d064b":"ml_default_performance_metrics_df.sort_values(by=\"training-time\", ascending=True)","f642bf01":"sns.set(rc={'figure.figsize':(15.27,6.27)})\nml_default_performance_metrics_df.sort_values(by=\"training-time\", ascending=True)[\"training-time\"].plot(kind=\"bar\")","e57296ff":"predictions_linear_svc = clf_LinearSVC.predict(xvalid)\npredictions_extra_trees = clf_ExtraTreesClassifier.predict(xvalid)\npredictions_logistic_regression = clf_logistic_regression.predict(xvalid)\npredictions_random_forest = clf_RandomForestClassifier.predict(xvalid)\n\nensemble_all_ml_default_pred_df = pd.DataFrame({\n    'linear_svc':predictions_linear_svc,\n    'logistic_regression':predictions_logistic_regression,\n    'extra_trees':predictions_extra_trees,\n    'random_forest':predictions_random_forest})\n\n\n# ensemble classes' predictions over the validation set\npred_mode = ensemble_all_ml_default_pred_df.agg('mode',axis=1)[0].values\n\nprint(classification_report(yvalid, pred_mode))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, pred_mode))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, pred_mode, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, pred_mode, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, pred_mode, average='weighted'))\n\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, pred_mode)","c2749d53":"df_test = pd.read_csv(\"..\/input\/test.tsv\", sep=\"\\t\")\n\ntest_vectorized = vectorizer.transform(df_test['Phrase'])\n\npredictions_default_linear_svc = clf_LinearSVC.predict(test_vectorized)\nsubmission = pd.DataFrame()\nsubmission['PhraseId'] = df_test.PhraseId\nsubmission['Sentiment'] = predictions_default_linear_svc\n#submission['Sentiment'] = submission.Sentiment.astype(int)\nsubmission.to_csv('submission_linear_svc.csv',index=False)\n\npredictions_default_logistic_regression = clf_logistic_regression.predict(test_vectorized)\nsubmission = pd.DataFrame()\nsubmission['PhraseId'] = df_test.PhraseId\nsubmission['Sentiment'] = predictions_default_logistic_regression\n#submission['Sentiment'] = submission.Sentiment.astype(int)\nsubmission.to_csv('submission_logistic_regression.csv',index=False)\n\npredictions_default_extra_trees = clf_ExtraTreesClassifier.predict(test_vectorized)\nsubmission = pd.DataFrame()\nsubmission['PhraseId'] = df_test.PhraseId\nsubmission['Sentiment'] = predictions_default_extra_trees\n#submission['Sentiment'] = submission.Sentiment.astype(int)\nsubmission.to_csv('submission_extra_trees.csv',index=False)\n\npredictions_default_random_forest = clf_RandomForestClassifier.predict(test_vectorized)\nsubmission = pd.DataFrame()\nsubmission['PhraseId'] = df_test.PhraseId\nsubmission['Sentiment'] = predictions_default_random_forest\n#submission['Sentiment'] = submission.Sentiment.astype(int)\nsubmission.to_csv('submission_random_forest.csv',index=False)","1939afcb":"ensemble_all_ml_default_pred_test_df = pd.DataFrame({\n    'linear_svc':predictions_default_linear_svc,\n    'logistic_regression':predictions_default_logistic_regression,\n    'extra_trees':predictions_default_extra_trees,\n    'random_forest':predictions_default_random_forest})\n\n# ensemble classes' predictions over the validation set\npred_default_test_mode = ensemble_all_ml_default_pred_test_df.agg('mode',axis=1)[0].values\nsubmission = pd.DataFrame()\nsubmission['PhraseId'] = df_test.PhraseId\nsubmission['Sentiment'] = pred_default_test_mode\nsubmission['Sentiment'] = submission.Sentiment.astype(int)\nsubmission.to_csv('submission_ml_default_ensemble.csv',index=False)","0fc9defc":"ml_tuning_performance_metrics_df = pd.DataFrame(columns=['accuracy','F1-score','training-time'], index=['LogisticRegression', 'ExtraTreesClassifier', 'RandomForestClassifier', 'LinearSVC'])","0dd7a45f":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import LinearSVC\nimport time\n\nstart_time = time.time()\nprint(\"Linear SVC grid Search:\")\n\nclf_linear_svc_grid = LinearSVC(multi_class='ovr', random_state=42)\n\nX = train_vectorized\ny = df.Sentiment.values\n\nxtrain, xvalid, ytrain, yvalid = train_test_split(X, y, stratify=y, random_state=42, test_size=0.2, shuffle=True)\n\ngsc_linear_svc = GridSearchCV(\n    estimator=clf_linear_svc_grid,\n    param_grid={\n        'C': [10e-1, 10e-2, 1, 10],\n        'tol': [10e-5, 10e-4, 10e-3, 10e-2, 10e-1, 10e-0, 10e+1],\n    },\n    scoring='accuracy',\n    cv=2\n)\n\ngrid_result_linear_svc = gsc_linear_svc.fit(xtrain, ytrain)\n\nprint()\nprint(\"ExtraTreesClassifier best parameters and score\")\nprint(\"Best score: %f using %s\" % (grid_result_linear_svc.best_score_, grid_result_linear_svc.best_params_))\n\nprediction_tuned_linear_svc = gsc_linear_svc.predict(xvalid)\nprint(\"accuracy score after tuning:\", accuracy_score(yvalid, prediction_tuned_linear_svc))\n\nml_tuning_performance_metrics_df.loc['LinearSVC']['training-time'] = time.time() - start_time\nml_tuning_performance_metrics_df.loc['LinearSVC']['accuracy'] = accuracy_score(yvalid, prediction_tuned_linear_svc)\nml_tuning_performance_metrics_df.loc['LinearSVC']['F1-score'] = f1_score(yvalid, prediction_tuned_linear_svc, average='macro')\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","39148c6e":"predictions_tuned_linear_svc = grid_result_linear_svc.predict(xvalid)\n\nprint(classification_report(yvalid, predictions_tuned_linear_svc))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions_tuned_linear_svc))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions_tuned_linear_svc, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions_tuned_linear_svc, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions_tuned_linear_svc, average='weighted'))\n\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions_tuned_linear_svc)","38bd8554":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nimport time\n\nstart_time = time.time()\nprint(\"LogisticRegression grid Search:\")\n\nclf_logistic_regression_grid = LogisticRegression(multi_class = 'ovr', random_state=42)\n\nX = train_vectorized\ny = df.Sentiment.values\n\nxtrain, xvalid, ytrain, yvalid = train_test_split(X, y, stratify=y, random_state=42, test_size=0.2, shuffle=True)\n\ngsc_logistic_regression = GridSearchCV(\n    estimator=clf_logistic_regression_grid,\n    param_grid={\n        'solver': ['newton-cg', 'sag', 'saga'],\n        'C': [10e-1, 10e-2, 1, 10],\n        'tol': [10e-4, 10e-3, 10e-2, 10e-1, 10e-0],\n    },\n    scoring='accuracy',\n    cv=2\n)\n\ngrid_result_logistic_regression = gsc_logistic_regression.fit(xtrain, ytrain)\n\nprint()\nprint(\"LogisticRegression best parameters and score\")\nprint(\"Best score: %f using %s\" % (grid_result_logistic_regression.best_score_, grid_result_logistic_regression.best_params_))\n\nprediction_tuned_logistic_regression = grid_result_logistic_regression.predict(xvalid)\nprint(\"accuracy score after tuning:\", accuracy_score(yvalid, prediction_tuned_logistic_regression))\n\nml_tuning_performance_metrics_df.loc['LogisticRegression']['training-time'] = time.time() - start_time\nml_tuning_performance_metrics_df.loc['LogisticRegression']['accuracy'] = accuracy_score(yvalid, prediction_tuned_logistic_regression)\nml_tuning_performance_metrics_df.loc['LogisticRegression']['F1-score'] = f1_score(yvalid, prediction_tuned_logistic_regression, average='macro')\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","31249ff4":"predictions_tuned_logistic_regression = grid_result_logistic_regression.predict(xvalid)\n\nprint(classification_report(yvalid, predictions_tuned_logistic_regression))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions_tuned_logistic_regression))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions_tuned_logistic_regression, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions_tuned_logistic_regression, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions_tuned_logistic_regression, average='weighted'))\n\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions_tuned_logistic_regression)","73925bab":"# I will perform a shallow grid search \n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import ExtraTreesClassifier\nimport time\n\nstart_time = time.time()\nprint(\"ExtraTreesClassifier grid Search:\")\n\nclf_extra_trees_grid = ExtraTreesClassifier(random_state=42)\n\nX = train_vectorized\ny = df.Sentiment.values\n\nxtrain, xvalid, ytrain, yvalid = train_test_split(X, y, stratify=y, random_state=42, test_size=0.2, shuffle=True)\n\ngsc_extra_trees = GridSearchCV(\n    estimator=clf_extra_trees_grid,\n    param_grid={\n        'n_estimators': [2, 4, 6, 8, 10, 12]\n    },\n    scoring='accuracy',\n    cv=2\n)\n\ngrid_result_extra_trees = gsc_extra_trees.fit(xtrain, ytrain)\n\nprint()\nprint(\"ExtraTreesClassifier best parameters and score\")\nprint(\"Best score: %f using %s\" % (grid_result_extra_trees.best_score_, grid_result_extra_trees.best_params_))\n\nprediction_tuned_extra_trees = grid_result_extra_trees.predict(xvalid)\nprint(\"accuracy score after tuning:\", accuracy_score(yvalid, prediction_tuned_extra_trees))\n\nml_tuning_performance_metrics_df.loc['ExtraTreesClassifier']['training-time'] = time.time() - start_time\nml_tuning_performance_metrics_df.loc['ExtraTreesClassifier']['accuracy'] = accuracy_score(yvalid, prediction_tuned_extra_trees)\nml_tuning_performance_metrics_df.loc['ExtraTreesClassifier']['F1-score'] = f1_score(yvalid, prediction_tuned_extra_trees, average='macro')\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","70d21ea0":"predictions_tuned_extra_trees = grid_result_extra_trees.predict(xvalid)\n\nprint(classification_report(yvalid, predictions_tuned_extra_trees))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions_tuned_extra_trees))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions_tuned_extra_trees, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions_tuned_extra_trees, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions_tuned_extra_trees, average='weighted'))\n\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions_tuned_extra_trees)","bc37209b":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.ensemble import RandomForestClassifier\n\nstart_time = time.time()\nprint(\"RandomForestClassifier grid Search:\")\n\nclf_random_forest = RandomForestClassifier(random_state=42)\n\nX = train_vectorized\ny = df.Sentiment.values\n\nxtrain, xvalid, ytrain, yvalid = train_test_split(X, y, stratify=y, random_state=42, test_size=0.2, shuffle=True)\n\ngsc_random_forest = GridSearchCV(\n    estimator=clf_random_forest,\n    param_grid={\n        'n_estimators': [2, 4, 6, 8, 10, 12]\n    },\n    scoring='accuracy',\n    cv=2\n)\n\ngrid_result_random_forest = gsc_random_forest.fit(xtrain, ytrain)\n\nprint()\nprint(\"RandomForest best parameters and score\")\nprint(\"Best: %f using %s\" % (grid_result_random_forest.best_score_, grid_result_random_forest.best_params_))\n\nprediction_tuned_random_forest = grid_result_random_forest.predict(xvalid)\nprint(\"accuracy score after tuning:\", accuracy_score(yvalid, prediction_tuned_random_forest))\n\nml_tuning_performance_metrics_df.loc['RandomForestClassifier']['training-time'] = time.time() - start_time\nml_tuning_performance_metrics_df.loc['RandomForestClassifier']['accuracy'] = accuracy_score(yvalid, prediction_tuned_random_forest)\nml_tuning_performance_metrics_df.loc['RandomForestClassifier']['F1-score'] = f1_score(yvalid, prediction_tuned_random_forest, average='macro')\n\nprint()\nprint(\"elapsed time in seconds: \", time.time() - start_time)\nprint()","a69d8d8b":"predictions_tuned_random_forest = grid_result_random_forest.predict(xvalid)\n\nprint(classification_report(yvalid, predictions_tuned_random_forest))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, predictions_tuned_random_forest))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, predictions_tuned_random_forest, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, predictions_tuned_random_forest, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, predictions_tuned_random_forest, average='weighted'))\n\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, predictions_tuned_random_forest)","95847b44":"ml_tuning_performance_metrics_df.sort_values(by=\"accuracy\", ascending=False)","8590403b":"ml_default_performance_metrics_df.sort_values(by=\"F1-score\", ascending=False).head(4)","f368a20d":"predictions_tuned_linear_svc = grid_result_linear_svc.predict(xvalid)\npredictions_tuned_logistic_regression = grid_result_logistic_regression.predict(xvalid)\npredictions_tuned_extra_trees = grid_result_extra_trees.predict(xvalid)\npredictions_tuned_random_forest = grid_result_random_forest.predict(xvalid)\n\nensemble_all_ml_tuned_pred_df = pd.DataFrame({\n    'linear_svc':predictions_tuned_linear_svc,\n    'logistic_regression':predictions_tuned_logistic_regression,\n    'extra_trees':predictions_tuned_extra_trees,\n    'random_forest':predictions_tuned_random_forest})\n\npred_tuned_mode = ensemble_all_ml_tuned_pred_df.agg('mode',axis=1)[0].values\n\nprint(classification_report(yvalid, pred_tuned_mode))\n\nprint()\nprint(\"accuracy_score\", accuracy_score(yvalid, pred_tuned_mode))\n\nprint()\nprint(\"Weighted Averaged validation metrics\")\nprint(\"precision_score\", precision_score(yvalid, pred_tuned_mode, average='weighted'))\nprint(\"recall_score\", recall_score(yvalid, pred_tuned_mode, average='weighted'))\nprint(\"f1_score\", f1_score(yvalid, pred_tuned_mode, average='weighted'))\n\n\nprint()\nfrom sklearn.metrics import confusion_matrix\nimport scikitplot as skplt\nsns.set(rc={'figure.figsize':(8,8)})\nskplt.metrics.plot_confusion_matrix(yvalid, pred_tuned_mode)","1c84655e":"df_test = pd.read_csv(\"..\/input\/test.tsv\", sep=\"\\t\")\n\ntest_vectorized = vectorizer.transform(df_test['Phrase'])\n\npredictions_tuned_test_linear_svc = grid_result_linear_svc.predict(test_vectorized)\nsubmission = pd.DataFrame()\nsubmission['PhraseId'] = df_test.PhraseId\nsubmission['Sentiment'] = predictions_tuned_test_linear_svc\n#submission['Sentiment'] = submission.Sentiment.astype(int)\nsubmission.to_csv('submission_tuned_linear_svc.csv',index=False)\n\npredictions_tuned_test_logistic_regression = grid_result_logistic_regression.predict(test_vectorized)\nsubmission = pd.DataFrame()\nsubmission['PhraseId'] = df_test.PhraseId\nsubmission['Sentiment'] = predictions_tuned_test_logistic_regression\n#submission['Sentiment'] = submission.Sentiment.astype(int)\nsubmission.to_csv('submission_tuned_logistic_regression.csv',index=False)\n\npredictions_tuned_test_extra_trees = grid_result_extra_trees.predict(test_vectorized)\nsubmission = pd.DataFrame()\nsubmission['PhraseId'] = df_test.PhraseId\nsubmission['Sentiment'] = predictions_tuned_test_extra_trees\n#submission['Sentiment'] = submission.Sentiment.astype(int)\nsubmission.to_csv('submission_tuned_extra_trees.csv',index=False)\n\npredictions_tuned_test_random_forest = grid_result_random_forest.predict(test_vectorized)\nsubmission = pd.DataFrame()\nsubmission['PhraseId'] = df_test.PhraseId\nsubmission['Sentiment'] = predictions_tuned_test_random_forest\n#submission['Sentiment'] = submission.Sentiment.astype(int)\nsubmission.to_csv('submission_tuned_random_forest.csv',index=False)","445ce2ee":"ensemble_all_ml_tuned_pred_test_df = pd.DataFrame({\n    'linear_svc':predictions_tuned_test_linear_svc,\n    'logistic_regression':predictions_tuned_test_logistic_regression,\n    'extra_trees':predictions_tuned_test_extra_trees,\n    'random_forest':predictions_tuned_test_random_forest})\n\n\npred_tuned_test_mode = ensemble_all_ml_tuned_pred_test_df.agg('mode',axis=1)[0].values\nsubmission = pd.DataFrame()\nsubmission['PhraseId'] = df_test.PhraseId\nsubmission['Sentiment'] = pred_tuned_test_mode\nsubmission['Sentiment'] = submission.Sentiment.astype(int)\nsubmission.to_csv('submission_ml_tuned_ensemble.csv',index=False)","83961763":"Below another example that the appearance punctuation symbol \",\" is important","95968486":"### Extreme Gradient Boosting XGBoost\n\nXGBoost is one of the state of the art algorithms. XGBoost is a part of an ensemble of classifiers which are used to win data science competitions. XGBoost is similar to gradient boosting algorithm but it has a few tricks up its sleeve which makes it stand out from the rest.\n\nFeatures of XGBoost are:\n- Clever Penalisation of Trees\n- A Proportional shrinking of leaf nodes\n- Newton Boosting\n- Extra Randomisation Parameter","92478858":"### AdaBoostClassifier\n\nThe Adaptive Boosting technique works on improving the areas where the base learner fails. The base learner is a machine learning algorithm which is a weak learner and upon which the boosting method is applied to turn it into a strong learner. Any machine learning algorithm that accept weights on training data can be used as a base learner. In the example taken below, Decision stumps are used as the base learner. The training data are randomly sampled in sample points and from this data they areapplied decision stump algorithm to classify the points. After classifying the sampled points we fit the decision tree stump to the complete training data. This process iteratively happens until the complete training data fits without any error or until a specified maximum number of estimators [source](https:\/\/hackernoon.com\/boosting-algorithms-adaboost-gradient-boosting-and-xgboost-f74991cad38c).","5dbb4c5a":"### RandomForestClassifier\n\nRandom forest is just an improvement over the top of the decision tree algorithm. The core idea behind Random Forest is to generate multiple small decision trees from random subsets of the data (hence the name \u201cRandom Forest\u201d). Each of the decision tree gives a biased classifier (as it only considers a subset of the data). They each capture different trends in the data. This ensemble of trees is like a team of experts each with a little knowledge over the overall subject but thourough in their area of expertise. Now, in case of classification the majority vote is considered to classify a class. In analogy with experts, it is like asking the same multiple choice question to each expert and taking the answer as the one that most no. of experts vote as correct. In case of Regression, we can use the avg. of all trees as our prediction.In addition to this, we can also weight some more decisive trees high relative to others by testing on the validation data.\n\n[source](https:\/\/dimensionless.in\/introduction-to-random-forest\/)\n\n![](https:\/\/dimensionless.in\/wp-content\/uploads\/RandomForest_blog_files\/figure-html\/voting.png)","a5e244e0":"### DecisionTreeClassifier\n\nDecision trees cut feature space in rectangles which can adjust themselves to any monotonic transformation. Since decision trees are designed to work with discrete intervals or classes of predictors, any number of categorical variables are not really an issue with decision trees. Models obtained from decision tree is fairly intuitive and easy to explain to business. Probability scores are not a direct result but you can use class probabilities assigned to terminal nodes instead. This brings us to the biggest problem associated with Decision Trees, that is, they are highly biased class of models.\n\nDecision Trees Pros:\n- Intuitive Decision Rules\n- Can handle non-linear features\n- Take into account variable interactions\n\nDecision Trees Cons:\n- Highly biased to training set\n- No ranking score as direct result\n\n[source](https:\/\/www.edvancer.in\/logistic-regression-vs-decision-trees-vs-svm-part2\/)\n\n![](https:\/\/www.edvancer.in\/wp-content\/uploads\/2015\/10\/9a299e65388a9609d3d567ee3cf7a6c5.png)","0937d8c5":"RandomForest Classifier shows some promising results. Its accuracy and F1-score is 0.62 and 0.60 respectively. However, still the classifier shows great missclassification from phrases with Sentiment 0, 1, 3, 4 to Sentiment 2 based on the high recall to Sentiment 2.","3a75df0d":"### Summarizing ML Classifiers based on their accuracy with TF - IDF as Feature Extraction","b99a4480":"Here we can observe that ExtraTreesClassifier perform quite well, both accuracy and F1-score are above 0.6 or 60%. Especially the classifier has 70% accuracy in neutral phrases.","3a45655d":"### ExtraTreeClassifier\n\nExtra-trees differ from classic decision trees in the way they are built. When looking for the best split to separate the samples of a node into two groups, random splits are drawn for each of the max_features randomly selected features and the best split among those is chosen. When max_features is set 1, this amounts to building a totally random decision tree [source](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.ExtraTreeRegressor.html).","310d870c":"Here KNN classifier performs neither well or poorly. Its accuracy and F1-score are both 0.59 however presents in all classes high recall score which means KNN missclassfies most of the cases.","7c2fc3f8":"### RandomForestClassifier Tuning","baa67867":"Even ensembling the tuned predictions over the validation set using the statistical mode, we can not overcome and improve the accuracy over 0.65 and the same happens to F1-score. Still many cases are missclassified as class #2.","a610b807":"# NLP Capstone Project - Movie Review - Sentiment Analysis -  Classify the sentiment of sentences from the Rotten Tomatoes dataset\n## Developing Machine Learning Models using TF - IDF as feature extraction \/ representation\n\n![](https:\/\/cdn.steemitimages.com\/DQmQZCf7ME7Haj3X3MzXtG8R8JtGmTpuh5NXDSd3wKueva7\/rottentomatoes.png)\n\n![Sentiment](https:\/\/www.kdnuggets.com\/images\/sentiment-fig-1-689.jpg)\n\n![ML](https:\/\/juststickers.in\/wp-content\/uploads\/2017\/04\/machine-learning.png)\n\n\nMoving one from EDA to applying Machine Leaning models with the movie review sentiment analysis dataset. Inparticular the ML models will be developed in conjunction with TF - IDF as feature representation. \n\nAt first, There must be mention that after EDA an odd conclusion was made. The dataset of this competition turned to have some unique features. we have only phrases as data. And a phrase can contain a single word. And one punctuation mark can cause phrase to receive a different sentiment. Also assigned sentiments can be strange. This means several things:\n\n- using stopwords can be a bad idea, especially when phrases contain one single stopword;\n- puntuation could be important, so it should be used;\n\n** This thought will be enhanced later with my anomaly detection insights **\n\n","7d898f17":"### LogisticRegression tuning evaluation","482c0b7e":"Unfortunately after tuning still LogisticRegression classifier still can't classifier with great accuracy and F1-score the majority of the cases. In fact it missclassifies most of them and this can be seen by the high recall from class to class.","4132d38d":"### Summarizing ML Classifiers based on their training fitting time with TF - IDF as Feature Extraction","4fb33b4d":"### MultinomialNB","2a7ac117":"### KNeighborsClassifier\n\nk-nearest neighbors (or k-NN for short) is a simple machine learning algorithm that categorizes an input by using its k nearest neighbors. K-NN is non-parametric, which means that it does not make any assumptions about the probability distribution of the input. This is useful for applications with input properties that are unknown and therefore makes k-NN more robust than algorithms that are parametric. The contrast is that parametric machine learning algorithms tend to produce fewer errors than non-parametric ones, since taking input probabilities into account can influence decision making.\n\nFurthermore, k-NN is a type of lazy learning, which is a learning method that generalizes data in the testing phase, rather than during the training phase. This is contrasted with eager learning, which generalizes data in the training phase rather than the testing phase. A benefit of lazy learning is that it can quickly adapt to changes, since it is not expecting a certain generalized dataset. However, a major downside is that a huge amount of computation occurs during testing (actual use) rather than pre-computation during training [source](https:\/\/brilliant.org\/wiki\/k-nearest-neighbors\/).","4830e028":"Unfortunately Adaboost classifier has disappointing results, both accuracy and F1-score are 0.54 and 0.45 respectively.","ee734e98":"### LinearSVC tuning evaluation","5123943b":"### Tuning the top 4 best performed ML Models\n\nSince the top 4 Machine Learning models performed really well and evaluated in both accuracy and F1-score metric using their defauly paremeters as they are, the next step is to tune them in the same train - test split and see if they perform even better. To sum up the ML models that will be tuned are the following:\n\n- SVM\n- Logistic Regression\n- ExtraTrees\n- RandomForest","4f971d54":"### Producing Predictions for the Test Set for the top 4 best performed ML models with default paremeters\nWe are know getting prepared to create submission csv files for Kaggle's Movie Review competion to submit them and measure out ML models performance over the Test Set.","f3638ed4":"_________________________","ea7ee472":"## Libraries\nLoading most important libraries for the rest of the Machine Learning Analysis.","d3c6e972":"LinearSVC classifier exhibits great accuracy so far (0.65) and F1-score 0.64. Nevertheless these encouraging results. The recall in class \/ Sentiment 2 is high and close to 0.82.\n","2ea72d73":"The same situation and with ExtraTrees tuning, the accuracy and the F1-score did not improve as much as we wanted to. Furthermore, even now the ML model suffers from high recall.","7ee95edd":"### Summarizing ML Classifiers based on their F1-score with TF - IDF as Feature Extraction","f6e8f115":"### LinearSVC\n\nA Support Vector Machine (SVM) is a supervised machine learning algorithm that can be employed for both classification and regression purposes. SVMs are more commonly used in classification problems. SVMs are based on the idea of finding a hyperplane that best divides a dataset into two classes, as shown in the image below.\n\n![](https:\/\/66.media.tumblr.com\/ff709fe1c77091952fb3e3e6af91e302\/tumblr_inline_o9aa8dYRkB1u37g00_540.png)\n\nSupport vectors are the data points nearest to the hyperplane, the points of a data set that, if removed, would alter the position of the dividing hyperplane. Because of this, they can be considered the critical elements of a data set.\n\nAs a simple example, for a classification task with only two features (like the image above), you can think of a hyperplane as a line that linearly separates and classifies a set of data.Intuitively, the further from the hyperplane our data points lie, the more confident we are that they have been correctly classified. We therefore want our data points to be as far away from the hyperplane as possible, while still being on the correct side of it. So when new testing data is added, whatever side of the hyperplane it lands will decide the class that we assign to it.\n\nPros:\n- Accuracy\n- Works well on smaller cleaner datasets\n- It can be more efficient because it uses a subset of training points\n\nCons:\n- Isn\u2019t suited to larger datasets as the training time with SVMs can be high\n- Less effective on noisier datasets with overlapping classes\n\n[source](https:\/\/www.kdnuggets.com\/2016\/07\/support-vector-machines-simple-explanation.html).","3d7c2414":"### Creating the TF - IDF vectorizer","8a00db51":"## From Text Data to Feature Extration Representation with TF - IDF using TfidfVectorizer\n\n![TF-IDF](https:\/\/i.ytimg.com\/vi\/bPYJi1E9xeM\/maxresdefault.jpg)\n\nTF - IDF is an information retrieval technique that weighs a term\u2019s frequency (TF) and its inverse document frequency (IDF). Each word or term has its respective TF and IDF score. The product of the TF and IDF scores of a term is called the TF * IDF weight of that term. The higher the TF * IDF score (weight), the rarer the term and vice versa. The TF * IDF algorithm is used to weigh a keyword in any content and assign the importance to that keyword based on the number of times it appears in the document. More importantly, it checks how relevant the keyword is throughout the web, which is referred to as corpus [source](https:\/\/www.elephate.com\/blog\/what-is-tf-idf\/).","48338a3a":"### LinearSVC tuning","8a8dafde":"Although the LinearSVC tuning, the accuracy and the F1-score did not improve as much as we wanted to. Moreover, the ML model suffers from high recall.","b47739f8":"XGBoost classifier performs poorly in this dataset. Only 0.54 accuracy and 0.45 F1-score with default paremeters.","11d1b11d":"ExtraTreeClassifier does not perform very well, both accuracy and F1-score are below 0.6 or 60%, 0.58 and 0.57 respectively.","310f3c2e":"### Ensemble Predictions after Tuning from top 4 best performed ML Techniques after tuning\nEnsemble submission for Kaggle Competition","0157b66d":"### Multinomial Logistic Regression\n\n Logistic Regression , the most prevalent algorithm for solving industry scale problems, although its losing ground to other techniques with progress in efficiency and implementation ease of other complex algorithms.\n\nA very convenient and useful side effect of a logistic regression solution is that it doesn\u2019t give you discrete output or outright classes as output. Instead you get probabilities associated with each observation. You can apply many standard and custom performance metrics on this probability score to get a cutoff and in turn classify output in a way which best fits your business problem. Also, logistic regression is pretty efficient in terms of time and memory requirement.\n\nIn addition to above , logistic regression algorithm is robust to small noise in the data and is not particularly affected by mild cases of multi-collinearity. Severe cases of multi-collinearity can be handled by implementing logistic regression with L2 regularization, although if a parsimonious model is needed , L2 regularization is not the best choice because it keeps all the features in the model.\n\nWhere logistic regression starts to falter is, when you have a large number of features and good chunk of missing data. Too many categorical variables are also a problem for logistic regression. Another criticism of logistic regression can be that it uses the entire data for coming up with its scores. Although this is not a problem as such, but it can be argued that \u201cobvious\u201d cases which lie at the extreme end of scores should not really be a concern when you are trying to come up with a separation curve. It should ideally be dependent on those boundary cases, some might argue. Also if some of the features are non-linear, you\u2019ll have to rely on transformations, which become a hassle as size of your feature space increases. We have picked few prominent pros and cons from our discussion to summaries things for logistic regression.\n\nLogistic Regression Pros:\n- Convenient probability scores for observations\n- Efficient implementations available across tools\n- Multi-collinearity is not really an issue and can be countered with L2 regularization to an extent\n- Wide spread industry comfort for logistic regression solutions\nLogistic Regression Cons:\n- Doesn\u2019t perform well when feature space is too large\n- Doesn\u2019t handle large number of categorical features\/variables well\n- Relies on transformations for non-linear features\n- Relies on entire data\n\n![logistic-regression](https:\/\/www.edvancer.in\/wp-content\/uploads\/2015\/10\/f5bd5f87059fce20564f6e5eb562022e.png)\n\n[source](https:\/\/www.edvancer.in\/logistic-regression-vs-decision-trees-vs-svm-part2\/)\n","11d7cc87":"As you can see sentence id denotes a single review with the phrase column having the entire review text as an input instance followed by random suffixes of the same sentence to form multiple phrases with subsequent phrase ids. This repeats for every single new sentence id (or new review per se). The sentiment is coded with 5 values 0= Very negative to 4=Very positive and everything else in between.\n\nA quick glance will show you that the data is a little weird for a sentiment corpus:\n\n- Phrases of sentences are** chopped up compeltely randomly**. So logic like sentence tokenization based on periods or punctuations or something of that sort doesn't apply\n- Certain phrases are **with one single word!**.\n- For some phrases inclusion of a punctuation like a comma or a full stop changes the sentiment from say 2 to 3 i.e neutral to positive.\n- Some phrases **starts** with a punctuation like a **backquote**.\n- Some phrases **end** with a **punctuation**\n- There are some ** weird ** words such as ** -RRB-, -LRB- **\n\nAll these weird aspects of this dataset, can be helpful and may be predictive. Afterall, we are looking for patterns in data. Therefore, it would be easier for us to engineer features, I mean apart from the text features that can be extracted from the corpus.\n\nSo, after all this train of thought, let us move on to Machine Learning and Predictive Models.","c832931c":" ### GaussianNB\n \n I can not use GaussianNNB because the TF-IDF train vector is sparse and it can not work with sparse matrices.","dac4d525":"___________________________________________________________________","b18df8dd":"### ExtraTreesClassifier\n\nExtraTrees implements a meta estimator that fits a number of randomized decision trees (a.k.a. extra-trees) on various sub-samples of the dataset and uses averaging to improve the predictive accuracy and control over-fitting [source](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.ExtraTreesRegressor.html).","f2f97400":"### Comparing accuracy and F1-score between default and tuned parameters in ML models","8e722829":"### ML Predictions with Test Set\nLets prepare a sumbission for Kaggle's Competition","6923e6d6":"### Preview","22ca3ec4":"### load the dataset","c2188320":"### Ensemble Top 4 Models over the validation Set\nThe idea here is to ensemble ML models' predictions using the statistical mode over the predicted classes.","bb758f42":"### ExtraTrees tuning evaluation","25fb6b63":"Multinomial Logistic Regression presents a good accuracy 0.63 or 63%. However since the dataset is unbalanced we have to look at the  F1-score and to be more specific the weighted F1-score, We choose the weighted and not the macro or micro because Calculate metrics for each label, and find their average weighted by support (the number of true instances for each label). This alters \u2018macro\u2019 to account for label imbalance; it can result in an F-score that is not between precision and recall [souce](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.f1_score.html). So the weighted F1 score is 0.59. Furthermore the model's training is extremely fast, it takes only 19 seconds! It has a good precision score in phrases for Sentiment 0 to 4.","021afa50":"Both BernouliNB and MultivariateNB classifiers presents not so good accuracy close to 0.6 and F1-score is close to 0.56 and 0.54 respectively. Both have high recall on class 2 which means that they missclassfy lots of the validation data from othejr classes as class 2.","5b3a845c":"### ExtraTrees Tuning","8be5513b":"### Choosing the Top performed ML classifiers\n\nBased on the bar plots above the top performed ML models based on both accuracy and F1-score that outperform the XGBoost classifier are the following:\n\n- LinearSVC (SVM Classifier)\n- Logistic Regression Classifier\n- ExtraTreesClassifier\n- RandomForestClassfier\n\nThey perform very well in both accuracy and F1-score. So I will move on my ensembling their predictions using the statistical mode to judge what class should be used for my ensemble prediction in my validation set.","2572e1a3":"### BernoulliNB, GaussianNB and MultinomialNB\n\nIn machine learning, naive Bayes classifiers are a family of simple \"probabilistic classifiers\" based on applying Bayes' theorem with strong (naive) independence assumptions between the features [source](https:\/\/en.wikipedia.org\/wiki\/Naive_Bayes_classifier).\n\nThe multinomial Naive Bayes classifier is suitable for classification with discrete features (e.g., word counts for text classification). The multinomial distribution normally requires integer feature counts. However, in practice, fractional counts such as tf-idf may also work [source](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.naive_bayes.MultinomialNB.html).\n\nLike MultinomialNB, this classifier is suitable for discrete data. The difference is that while MultinomialNB works with occurrence counts, BernoulliNB is designed for binary\/boolean features [source](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.naive_bayes.BernoulliNB.html).","07d6faeb":"Here with this dataset DecisionTree classifier does not perform very well, its accuracy is only 0.55 and F1-score is 0.53. Based on the classification report the classifier performs well in Neutral class only, it has 0.65 precision on the neutral class. However the classifier missclassifies as Neutral Sentiment most of the other phrases. Hence the F1-score is 0.53.","8a6ebcaa":"### Ensemble The top 4 Tuned Models over the validation Set\nLet us ensemble now the tune ML models over the validation set using the statistical mode over the ML models' multiclass predictions and evaluate its performance.","3f07b800":"### Thoughts before training ML models\nHere are couple of instances where punctuations appeared to be predictive. So if we \"cleanedup\" the data in the name of data preparation some predictiveness will be lost.","36333dfd":"Another strange thing that I discovered is that there are phrases with a single word only and if they disappear at the following phrases the sentiment changes.","b14ee377":"### RandomForest tuning evaluation","ed02e045":"### Shape of TF - IDF vectorizer\nwe can see that due to the fact the ngram_range is from 1 to 3 the columns of the TF - IDF matrix vectorizer is extremely huge. This may lead us to slow down the Machine Learning models to fit the data.","7868ae1e":"### Ensemble Predictions from Test Set from the top 5 best performed ML models with default parameters\nSo we do and for out top 4 ML models ensemble predictions over the Test Set using the statistical mode as ensemble criterion and preparing a csv submission file to measure our accuracy over the Test Set.","be7daeab":"## Machine Learning Techiniques for Multiclass Sentiment Analysis\n\nThe Machine Learning models that will be deployed is the following:\n - **Regression Models**: \n     - LogisticRegression\n - **CART Models**: \n     - DecisionTreeClassifier\n     - ExtraTreeClassifier\n - **Bagging Trees**: \n     - ExtraTreesClassifier\n     - RandomForestClassifier \n - **SVM Models**: \n     - LinearSVC \n - **Naive Bayes Models**: \n     - BernoulliNB\n     - MultinomialNB\n - **Boosting Trees**: \n     - Adaboost Classifier\n     - Extreme Gradient Boosting, XGBoost \n - **Lazy Classifiers**: \n     - KNeighborsClassifier\n \n Since the competion evaluates the models based on accuracy then the models will be evaluated based on accuracy and because the dataset is unbalanced (based on its EDA) us a secondary statistical evaluation metric I will use the F1 score.\n \n The train set will be split in train and validation sets with ratio **80:20** .\n \n For all the ML models the random state will be set to 42 in order to the models be reproducable and create the same results in every run.\n \n Finally as a benchmark model, due to the fact that XGBoost is a state of the art model that is widely used in Machine Learning [source](https:\/\/www.kdnuggets.com\/2017\/10\/xgboost-top-machine-learning-method-kaggle-explained.html), it will be used as benchmark and the rest of the Machine Learning models will be compared to its performance","6b0da382":"Again the RandomForest tuning, the accuracy and the F1-score did not improve as much as we wanted to. Still the ML model continues to missclasify most of the cases as of a class #2.","01cc0f97":"### Logistic Regression Tuning","ad3923f7":"## Summary of Machine Learning and TF - IDF feature extraction \/ representation\nIin general most of the ML models tried to fit on this strange dataset with phrases even with one word and the absence of a single punctuation symbol can change the phrase's sentiment. Nevertheless LogisticRegression, ExtraTrees, LinearSVC and RandomForest presented good results and outperformed the famous XGBoost classifier but with high recalls especially in class #2 the \"Neutral\" sentiment. Tuning showed minor improvements. The next phase is to use word embeddings combined with Machine Learning models and see if there are some better improvements there.","fb776137":"Below another example that the appearance punctuation symbol \"!\" is important","402c69a2":"Although some improvements in accuracy  and F1-score tuning in fact provided some minor advantages to out models based on the two tables above."}}