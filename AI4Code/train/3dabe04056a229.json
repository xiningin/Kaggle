{"cell_type":{"94ef5246":"code","ff339759":"code","7c9ae455":"code","bda61fe2":"code","2bff4aec":"code","439d0a55":"code","b1c4531e":"code","8619084a":"code","5663dffc":"code","415407e0":"code","2790c484":"code","cecba2d7":"code","dde6556d":"code","6755a4b8":"code","6e2e8ccf":"code","b2502b42":"code","1a1955ec":"code","07b75da2":"code","e537de5e":"code","047aaee2":"code","ad6756cb":"code","485e6301":"code","7ba1657a":"code","27b9cb8f":"code","3abd9544":"code","c9cd1967":"code","a306268a":"code","fa748aeb":"code","6366a66c":"code","90abb91d":"code","10080407":"code","f9f860c1":"code","8a549d56":"markdown"},"source":{"94ef5246":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib\n\nimport matplotlib.pyplot as plt\nfrom scipy.stats import skew\nfrom scipy.stats.stats import pearsonr\n%matplotlib inline","ff339759":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")","7c9ae455":"train.head()","bda61fe2":"all_data = pd.concat((train.loc[:,'MSSubClass':'SaleCondition',],\n                      test.loc[:,'MSSubClass':'SaleCondition',]))","2bff4aec":"matplotlib.rcParams['figure.figsize'] = (12.0, 6.0)\nprices = pd.DataFrame({\"price\":train[\"SalePrice\"], \"log(price + 1)\":np.log1p(train[\"SalePrice\"])})\nprices.hist()","439d0a55":"#log transform the target:\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\n#log transform skewed numeric features:\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\nskewed_feats = train[numeric_feats].apply(lambda x: skew(x.dropna())) #compute skewness\nskewed_feats = skewed_feats[skewed_feats > 0.75]\nskewed_feats = skewed_feats.index\n\nall_data[skewed_feats] = np.log1p(all_data[skewed_feats])","b1c4531e":"all_data = pd.get_dummies(all_data)","8619084a":"#filling NA's with the mean of the column:\nall_data = all_data.fillna(all_data.mean())\nall_data","5663dffc":"all_data.describe()","415407e0":"sns.lineplot(data = all_data['LotArea'],label = \"Lot Area\")","2790c484":"sns.barplot(x = all_data.index,y=all_data['LotFrontage'])","cecba2d7":"#creating matrices for sklearn:\nX_train = all_data[:train.shape[0]]\nX_test = all_data[train.shape[0]:]\ny = train.SalePrice","dde6556d":"from sklearn.linear_model import Ridge, RidgeCV, ElasticNet, LassoCV, LassoLarsCV\nfrom sklearn.model_selection import cross_val_score\n\ndef rmse_cv(model):\n    rmse= np.sqrt(-cross_val_score(model, X_train, y, scoring=\"neg_mean_squared_error\", cv = 10))\n    return(rmse)","6755a4b8":"model_ridge = Ridge()","6e2e8ccf":"alphas = [0.05, 0.1, 0.3, 1, 3, 5, 10, 15, 30, 50, 75,100,125,150,175,200,225,250]\ncv_ridge = [rmse_cv(Ridge(alpha = alpha)).mean() \n            for alpha in alphas]","b2502b42":"cv_ridge = pd.Series(cv_ridge, index = alphas)\ncv_ridge.plot(title = \"Change in Root Mean Squared Error\")\nplt.xlabel(\"alpha\")\nplt.ylabel(\"rmse\")","1a1955ec":"cv_ridge.min()","07b75da2":"model_lasso = LassoCV(alphas = [1, 0.1, 0.001, 0.0005]).fit(X_train, y)","e537de5e":"rmse_cv(model_lasso).mean()","047aaee2":"coef = pd.Series(model_lasso.coef_, index = X_train.columns)","ad6756cb":"print(\"Lasso regularization selected \" + str(sum(coef != 0)) + \"variables and eliminated \" +  str(sum(coef == 0)) + \" variables\")","485e6301":"imp_coef = pd.concat([coef.sort_values().head(10),\n                     coef.sort_values().tail(10)])","7ba1657a":"matplotlib.rcParams['figure.figsize'] = (8.0, 10.0)\nimp_coef.plot(kind = \"barh\")\nplt.title(\"Coefficients in the Lasso Model\")","27b9cb8f":"#let's look at the residuals as well:\nmatplotlib.rcParams['figure.figsize'] = (6.0, 6.0)\n\npreds = pd.DataFrame({\"preds\":model_lasso.predict(X_train), \"true\":y})\npreds[\"residuals\"] = preds[\"true\"] - preds[\"preds\"]\npreds.plot(x = \"preds\", y = \"residuals\",kind = \"scatter\")","3abd9544":"import xgboost as xgb","c9cd1967":"\ndtrain = xgb.DMatrix(X_train, label = y)\ndtest = xgb.DMatrix(X_test)\n\nparams = {\"max_depth\":2, \"eta\":0.1}\nmodel = xgb.cv(params, dtrain,  num_boost_round=700, early_stopping_rounds=150)","a306268a":"model.loc[30:,[\"test-rmse-mean\", \"train-rmse-mean\"]].plot()","fa748aeb":"model_xgb = xgb.XGBRegressor(n_estimators=500, max_depth=2, learning_rate=0.1) #the params were tuned using xgb.c2\nmodel_xgb.fit(X_train, y)","6366a66c":"xgb_preds = np.expm1(model_xgb.predict(X_test))\nlasso_preds = np.expm1(model_lasso.predict(X_test))","90abb91d":"predictions = pd.DataFrame({\"xgb\":xgb_preds, \"lasso\":lasso_preds})\npredictions.plot(x = \"xgb\", y = \"lasso\", kind = \"scatter\")","10080407":"preds = 0.7*lasso_preds + 0.3*xgb_preds","f9f860c1":"output = pd.DataFrame({\"id\":test.Id, \"SalePrice\":preds})\noutput.to_csv(\"ridge_sol.csv\", index = False)","8a549d56":"The residual plot looks pretty good.To wrap it up let's predict on the test set and submit on the leaderboard:"}}