{"cell_type":{"09feb337":"code","39b67f07":"code","7df4882f":"code","e8d65fd8":"code","cb08bff0":"code","6d4972c8":"code","a005eb0d":"code","02b9e33a":"code","b18d8851":"code","a05a8e1d":"code","5939e666":"code","f847eeff":"code","9394f3e1":"code","5424bb7f":"code","5f1943bf":"code","424dc96c":"markdown","2e6695f1":"markdown","46564989":"markdown","6204a83d":"markdown"},"source":{"09feb337":"import numpy as np\nimport pandas as pd \nimport os\nimport pandas_profiling\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import average_precision_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import auc\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import f1_score\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","39b67f07":"df = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')\npd.options.display.max_columns = None\n\ndf.profile_report()","7df4882f":"plt.figure(figsize=(14,10))\nsns.heatmap(df.corr(),annot=True, cmap='gray')\nplt.show()","e8d65fd8":"df.groupby('target').mean()","cb08bff0":"pd.crosstab(df.age, df.target).plot(kind='kde', figsize=(15,5))\n# kernel density estimation plot shows frequency (density) distribution of ages for those with and those without heart disease\n# population with heart disease (orange) clearly right shifted. \n# infer older people more likely to have heart disease \n# note: ignore the xtick labels! ","6d4972c8":"pd.crosstab(df.sex, df.target).plot(kind='bar')","a005eb0d":"fig, ax = plt.subplots(1,3, figsize=(15,4))\nsns.boxplot(x=df.target, y=df.trestbps, ax=ax[0])\nsns.boxplot(x=df.target, y=df.thalach, ax=ax[1])\nsns.boxplot(x=df.target, y=df.chol, ax=ax[2])\n\n# median resting blood pressure (trestbps) is insignificiantly different between groups\n# max heart rate (thalach) is significantly higher in those with heart disease\n# cholesterol levels are close between groups, though slightly lower in those with heart disease","02b9e33a":"# one-hot encode categorical variables\n\nchest_pain=pd.get_dummies(df['cp'], prefix='cp')\nsp=pd.get_dummies(df['slope'], prefix='slope')\nth=pd.get_dummies(df['thal'], prefix='thal')\nrest_ecg=pd.get_dummies(df['restecg'], prefix='restecg')\n\nframes=[df,sp,th,rest_ecg,chest_pain]\ndf=pd.concat(frames,axis=1)\ndf.drop(['slope','thal','restecg','cp'],axis=1,inplace=True)","b18d8851":"y = df.target.values\nx = df.drop('target', axis=1)\n\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2)","a05a8e1d":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","5939e666":"# model building\nclassifier = Sequential()\n\n# Adding the input layer and the first hidden layer\nclassifier.add(Dense(11, kernel_initializer = 'uniform', activation = 'relu', input_dim = 23))  \n\n# Adding the second hidden layer\nclassifier.add(Dense(11, kernel_initializer = 'uniform', activation = 'relu'))\n\n# Adding the output layer\nclassifier.add(Dense(1, kernel_initializer = 'uniform', activation = 'sigmoid'))\n\n# Compiling the ANN\nclassifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])","f847eeff":"# train the model\nclassifier.fit(x_train, y_train, batch_size = 10, epochs = 30)","9394f3e1":"# make predictions on the test set \ny_pred = classifier.predict(x_test)","5424bb7f":"# cm = confusion_matrix(y_test, y_pred.round())\n# sns.heatmap(cm,annot=True,fmt=\"d\",cbar=False, xticklabels=['actual negative', 'actual positive'], yticklabels=['predicted negative','predicted positive'])\n\n# #accuracy score\n# ac=accuracy_score(y_test, y_pred.round())\n# print('accuracy of the model: ',ac)","5f1943bf":"## CREATE CONFUSION MATRIX\nCM = confusion_matrix(y_test, y_pred.round())\nsns.heatmap(pd.DataFrame(CM), annot=True)\nTN, FP, FN, TP = CM.ravel() # students do not need to do this, but good for you to have if they ask\n#  [TN, FP]\n#  [FN, TP]","424dc96c":"# model and predictions ","2e6695f1":"# Exploratory plots! ","46564989":"# preprocessing\n* 303 observations and 14 features \n* no missing values ! happy days \n* feature titles could be clearer...\n\n1.age: The person's age in years\n\n2.sex: The person's sex (1 = male, 0 = female)\n\n3.cp: The chest pain experienced (Value 1: typical angina, Value 2: atypical angina, Value 3: non-anginal pain, Value 4: asymptomatic)\n\n4.trestbps: The person's resting blood pressure (mm Hg on admission to the hospital)\n\n5.chol: The person's cholesterol measurement in mg\/dl\n\n6.fbs: The person's fasting blood sugar (> 120 mg\/dl, 1 = true; 0 = false)\n\n7.restecg: Resting electrocardiographic measurement (0 = normal, 1 = having ST-T wave abnormality, 2 = showing probable or definite left ventricular hypertrophy by Estes' criteria)\n\n8.thalach: The person's maximum heart rate achieved\n\n9.exang: Exercise induced angina (1 = yes; 0 = no)\n\n10.oldpeak: ST depression induced by exercise relative to rest ('ST' relates to positions on the ECG plot. See more here)\n\n11.slope: the slope of the peak exercise ST segment (Value 1: upsloping, Value 2: flat, Value 3: downsloping)\n\n12.ca: The number of major vessels (0-3)\n\n13.thal: A blood disorder called thalassemia (3 = normal; 6 = fixed defect; 7 = reversable defect)\n\n14.target: Heart disease (0 = no, 1 = yes)\n\n","6204a83d":"# encoding, scaling and train_test_split"}}