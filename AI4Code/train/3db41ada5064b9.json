{"cell_type":{"69629f9e":"code","f80b15fc":"code","c3c395d2":"code","5edda038":"code","cf4fb608":"code","709e513e":"code","b4d019d2":"code","c72093d6":"code","e1cf38f5":"code","32ae8012":"code","a95b0354":"code","a43fd436":"code","7aa984fd":"code","566dae41":"code","c1012af9":"code","eb866b48":"code","13ddd9d3":"code","bed1c5ca":"code","8be2dc96":"code","832ed6e3":"code","36a132ef":"code","46447e6e":"code","f3de50b5":"markdown","62334149":"markdown","6241c094":"markdown","94a43f4a":"markdown","928570d6":"markdown","d76c2c1b":"markdown","3df863dc":"markdown","0b93b9d3":"markdown","a75f5768":"markdown","7ab3fa5e":"markdown","d86194cb":"markdown","b8f49354":"markdown","3e4b1245":"markdown","974efb81":"markdown","bd107d0b":"markdown","5b0ecbb4":"markdown","549e3895":"markdown","e3e763af":"markdown","a6688cde":"markdown"},"source":{"69629f9e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n#plotly allows to use interactive visualizations\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\nimport warnings\nwarnings.filterwarnings('ignore')","f80b15fc":"!pip install ipytest\n\nimport pytest\nimport ipytest\n\nipytest.autoconfig()","c3c395d2":"world_data=pd.read_csv('..\/input\/corona-virus-report\/worldometer_data.csv')\nworld_data.head()","5edda038":"daywise=pd.read_csv('..\/input\/corona-virus-report\/day_wise.csv')\ndaywise.head()","cf4fb608":"full_grouped=pd.read_csv('..\/input\/corona-virus-report\/full_grouped.csv')\nfull_grouped.head()","709e513e":"from __future__ import print_function\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets","b4d019d2":"def show_cases_by_date(data, country):\n    if country not in np.unique(data['Country\/Region']):\n        return\n    data = data[data['Country\/Region'] == country]\n\n    area_data = pd.DataFrame(columns=['Date', 'Metric', 'Cases'])\n    for i, r in data.iterrows():\n        for m in ['Deaths', 'Recovered', 'Active']:\n            area_data = area_data.append(\n                {'Date': r['Date'], 'Metric': m, 'Cases': r[m]},\n                ignore_index=True)\n\n    fig = px.area(area_data,\n                  title=f'Cases by date in {country}',\n                  x='Date',\n                  y='Cases',\n                  color='Metric',\n                  line_group='Metric'\n                  )\n    fig.show()\n\n\ndata = full_grouped[['Country\/Region',\n                     'Date',\n                     'Deaths',\n                     'Recovered',\n                     'Active']]\nfor d in np.unique(data['Date']):\n    df = data[data['Date'] == d]\n    data = data.append(\n        {\n            'Country\/Region': 'all countries',\n            'Date': d,\n            'Deaths': df['Deaths'].sum(),\n            'Recovered': df['Recovered'].sum(),\n            'Active': df['Active'].sum()\n        },\n        ignore_index=True)\n\noptions = list(np.unique(data['Country\/Region']))\ninteractive(show_cases_by_date,\n         data=fixed(data),\n         country=widgets.Combobox(options=options,\n                                  value='all countries'))","c72093d6":"peak = (\n    daywise.iloc[daywise['New cases'].argmax()]\n    [['Date', 'New cases']]\n)\n\ndate, cases = peak['Date'], peak['New cases']\nfig = px.line(daywise,\n              x='Date',\n              y=['New cases', 'New recovered', 'New deaths'],\n              labels={'variable': 'Metric', 'value': 'Cases'},\n              title=f'New cases by date. Greatest number of {cases:,} cases on {date}',\n              custom_data=['variable', 'Date', 'value']\n              )\nfig.update_traces(hovertemplate='<br>'.join([\n                  'Date=%{customdata[1]}',\n                  'Cases=%{customdata[2]:,.f}'\n                  ]))\nfig.show()\n","e1cf38f5":"start = daywise.iloc[0][['Date', 'Confirmed']]\nend = daywise.iloc[-1][['Date', 'Confirmed']]\n\nprint('Start date: {}. Confirmed cases: {:,}'\n      .format(start['Date'], start['Confirmed']))\nprint('End date: {}. Confirmed cases: {:,}'\n      .format(end['Date'], end['Confirmed']))\n      \nstart, end = start['Date'], end['Date']","32ae8012":"data = full_grouped.copy()\nfig = px.scatter_geo(\n    data,\n    locationmode='country names',\n    locations='Country\/Region',\n    color='WHO Region',\n    hover_name='Country\/Region',\n    size='Confirmed',\n    animation_frame='Date',\n    projection='natural earth',\n    title=f'COVID spread over the world from {start} to {end}'\n)\n\nfig.show()","a95b0354":"print('Deaths: {:,}'.format(daywise.iloc[-1]['Deaths']))","a43fd436":"def country_death_by_date(full_grouped, region):\n    country_codes = (\n        pd.read_csv(\n            'https:\/\/raw.githubusercontent.com\/plotly\/datasets\/master\/2014_world_gdp_with_codes.csv')\n        .drop('GDP (BILLIONS)', axis=1)\n    )\n\n    country_codes.replace(['United States', 'Czech Republic'],\n                          ['US', 'Czechia'],\n                          inplace=True)\n    data = full_grouped[['Date', 'Country\/Region', 'Deaths', 'WHO Region']]\n\n    if region != 'all regions':\n        data = data[data['WHO Region'] == region]\n\n    data = pd.merge(data,\n                    country_codes,\n                    how='inner',\n                    left_on='Country\/Region',\n                    right_on='COUNTRY')\n    fig = px.choropleth(data,\n                        locations='CODE',\n                        color='Deaths',\n                        color_continuous_scale=px.colors.sequential.Plasma,\n                        labels={'CODE': 'Country', 'Deaths': 'Total deaths'},\n                        title=f'Deaths from COVID by country in {region}',\n                        animation_frame='Date'\n                        )\n    fig.show()\n\n\nregions = np.unique(full_grouped['WHO Region']).tolist()\nregions.insert(0, 'all regions')\ninteractive(country_death_by_date,\n         full_grouped=fixed(full_grouped),\n         region=regions)","7aa984fd":"import datetime\n\n\ndef show_cases_by_region(full_grouped, date):\n    date = date.strftime('%Y-%m-%d')\n    start, end = full_grouped['Date'].min(), full_grouped['Date'].max()\n\n    fig = make_subplots(\n        rows=1,\n        cols=2,\n        specs=[[{'type': 'domain'}, {'type': 'domain'}]]\n    )\n\n    if date < start or date > end:\n        display(widgets.Label(value=f'''No information for date: {date}.\n        Available dates are from {start} to {end}.'''))\n        return\n\n    data = full_grouped[full_grouped['Date'] == date]\n\n    fig.add_trace(\n        go.Pie(\n            labels=data['WHO Region'],\n            values=data['Confirmed'],\n            pull=[0, 0, 0, 0, 0, 0.3],\n            hole=0.4,\n            title='Confirmed'\n        ),\n        1, 1\n    )\n\n    fig.add_trace(\n        go.Pie(\n            labels=data['WHO Region'],\n            values=data['Deaths'],\n            pull=[0, 0, 0, 0, 0, 0.3],\n            hole=0.4,\n            title='Deaths'\n        ),\n        1, 2\n    )\n\n    fig.update_layout(title_text=f'''\n    Cases by WHO Region to date {date}\n    ''')\n    fig.show()\n\n\ninteractive(show_cases_by_region,\n            full_grouped=fixed(full_grouped),\n            date=widgets.DatePicker(\n                description='Pick a date',\n                disabled=False,\n                value=datetime.datetime.strptime(end, '%Y-%m-%d'))\n            )\n","566dae41":"data = full_grouped.copy()\n\n# select top 10 countries with biggest number of confirmed cases to the August 7. Only this contries will be shown\nlast_date = np.unique(data['Date']).max()\ncountries = (\n    data[data['Date'] == last_date]\n    .sort_values('Confirmed', ascending=False)\n    [:10]['Country\/Region']\n)\n\ndata = data[data['Country\/Region'].isin(countries)]\nfig = px.bar(data,\n             x='Country\/Region',\n             y=['Recovered', 'Active', 'Deaths'],\n             labels={'value': 'Cases', 'variable': 'Metric'},\n             title='Recovered to active cases\/deaths during the first half of year 2020',\n             animation_frame='Date',\n             custom_data=['variable', 'Country\/Region', 'Date', 'value'])\nfig.show()\n","c1012af9":"def show_tested_ratio(world_data, continent):\n    data = world_data[['Country\/Region', 'TotalTests', 'Population', 'Continent']].copy()\n    \n    if continent != 'all continents':\n        data = data[data['Continent'] == continent]\n        \n    data['Coverage'] = data['TotalTests'] \/ data['Population']\n\n    fig = px.treemap(data,\n                     values='Coverage',\n                     path=['Country\/Region'],\n                     title=f'<b>Test coverage by country in {continent}<\/b>',\n                     labels={'labels': 'Country'},\n                     custom_data=['Country\/Region', 'Coverage'])\n    fig.update_traces(\n        hovertemplate='<br>'.join([\n            'Country=%{customdata[0]}',\n            'Coverage=%{customdata[1]:.2f}',\n        ])\n    )\n    fig.show()\n\ncontinents = world_data['Continent'].astype(str)\ncontinents = ['all continents'] + list(np.unique(continents))[:-1]\ninteractive(show_tested_ratio,\n         world_data=fixed(world_data),\n         continent=continents)","eb866b48":"def get_start_date(full_grouped, country):\n    df = (\n        full_grouped[['Date', 'Country\/Region', 'Confirmed']]\n        [full_grouped['Country\/Region'] == country]\n        .drop('Country\/Region', axis=1)\n    )\n    \n    if df.empty:\n        return None\n\n    df.index = pd.Index([i for i in range(len(df))])\n    idx = df['Confirmed'].ne(0).idxmax()\n    return df.iloc[idx]['Date'], df.iloc[idx]['Confirmed']\n    \nget_start_date(full_grouped, 'Czechia')","13ddd9d3":"def get_max_new_cases(full_grouped, country):\n    df = (\n        full_grouped[['Date', 'Country\/Region', 'New cases']]\n        [full_grouped['Country\/Region'] == country]\n        .drop('Country\/Region', axis=1)\n    )\n    \n    if df.empty:\n        return None\n    \n    df.index = pd.Index([i for i in range(len(df))])\n    idx = df['New cases'].idxmax()\n    return df.iloc[idx]['New cases'], df.iloc[idx]['Date']\n    \nget_max_new_cases(full_grouped, 'Germany')","bed1c5ca":"def get_longest_increase(full_grouped, country):\n    df = (\n        full_grouped[['Date', 'Country\/Region', 'New cases']]\n        [full_grouped['Country\/Region'] == country]\n        .drop('Country\/Region', axis=1)\n    )\n    \n    if df.empty:\n        return None\n    \n    start, _ = get_start_date(full_grouped, country)\n    end = None\n    \n    df.index = pd.Index([i for i in range(len(df))])\n    start_idx = df.index[df['Date'] == start].tolist()[0]\n    cur_len, cur_start = 1, start\n    longest_len = 0\n    \n    for i in range(start_idx + 1, len(df) - 1):\n        if (df.iloc[i]['New cases'] >= df.iloc[i+1]['New cases']):\n            if cur_len > longest_len:\n                longest_len = cur_len\n                start = cur_start\n                end = df.iloc[i]['Date']\n            cur_len, cur_start = 1, df.iloc[i+1]['Date']\n            continue\n        cur_len += 1\n                \n    if end is None:\n        end = df.iloc[-1]['Date']\n    return longest_len, start, end\n            \n        \nget_longest_increase(full_grouped, 'Czechia')","8be2dc96":"%%run_pytest[clean]\n\ndef test_get_start_date():\n    assert(get_start_date(full_grouped, 'United Kingdom') == ('2020-01-31', 2))\n    assert(get_start_date(full_grouped, 'Germany') == ('2020-01-27', 1))\n    assert(get_start_date(full_grouped, 'Czechia') == ('2020-03-01', 3))\n    assert(get_start_date(full_grouped, '123') == None)\n    \ndef test_get_max_new_cases():\n    assert(get_max_new_cases(full_grouped, 'United Kingdom') == (5505, '2020-04-22'))\n    assert(get_max_new_cases(full_grouped, 'Germany') == (6933, '2020-03-27'))\n    assert(get_max_new_cases(full_grouped, 'Czechia') == (381, '2020-04-04'))\n    assert(get_max_new_cases(full_grouped, '123') == None)\n    \ndef test_get_longest_increase():\n    assert(get_longest_increase(full_grouped, 'United Kingdom') == (7, '2020-03-14', '2020-03-20'))\n    assert(get_longest_increase(full_grouped, 'Germany') == (6, '2020-07-12', '2020-07-17'))\n    assert(get_longest_increase(full_grouped, 'Czechia') == (6, '2020-06-14', '2020-06-19'))\n    assert(get_longest_increase(full_grouped, '123') == None)","832ed6e3":"def show_brief(full_grouped, country):\n    start_date = get_start_date(full_grouped, country)\n    if start_date is None:\n        display(widgets.Label(\n            value=f'There is no data for country {country}')\n        )\n        return\n\n    cases = 'case' if start_date[1] == 1 else 'cases'\n    display(widgets.Label(\n        value=f'First confirmed {start_date[1]} {cases} on {start_date[0]}')\n    )\n\n    max_new_cases = get_max_new_cases(full_grouped, country)\n    display(widgets.Label(\n        value='Maximal value of {} new cases reached on {}'\n        .format(*max_new_cases))\n    )\n\n    longest_increase = get_longest_increase(full_grouped, country)\n\n    days = 'day' if longest_increase[0] == 1 else 'days'\n    display(widgets.Label(\n        value='Longest increase in new cases from {} till {} lasted {} {}'\n        .format(longest_increase[1],\n                longest_increase[2],\n                longest_increase[0],\n                days))\n            )\n","36a132ef":"options = list(np.unique(full_grouped['Country\/Region']))\n\ndisplay(widgets.Label(\n        value=f'Show brief information about COVID-19 spread in country')\n    )\ninteractive(show_brief,\n         full_grouped=fixed(full_grouped),\n         country=widgets.Combobox(options=options,value=options[0]))","46447e6e":"data = pd.read_csv(\n    '..\/input\/provisional-covid-death-counts-by-sexagestate\/Provisional_COVID-19_Death_Counts_by_Sex__Age__and_State.csv')\n\ndata = data[['State',\n             'Sex',\n             'Age group',\n             'COVID-19 Deaths']]\n\ndeath_by_age = (data[(data['Age group'] != 'All Ages') &\n                     (data['State'] != 'United States') &\n                     (data['Sex'] != 'Unknown')])\n\ndeath_by_age['COVID-19 Deaths'] = death_by_age['COVID-19 Deaths'].fillna(0)\n\n\ndef heatmap_death_by_age(death_by_age, sex):\n    death_by_age = (\n        death_by_age[death_by_age['Sex'] == sex]\n        .drop('Sex', axis=1)\n    )\n\n    states = np.unique(death_by_age['State'])\n    age_groups = np.unique(death_by_age['Age group'])\n\n    death_list = []\n    for s in states:\n        death_list.append([])\n        for a in age_groups:\n            death = (\n                death_by_age[(death_by_age['State'] == s)\n                             & (death_by_age['Age group'] == a)]\n                .drop(['Age group', 'State'], axis=1)\n            )\n\n            death = None if death.empty else death.iloc[0, 0]\n            death_list[-1].append(death)\n\n    fig = go.Figure(data=go.Heatmap(\n        z=death_list,\n        x=age_groups,\n        y=states,\n        hoverongaps=False))\n    \n    fig.update_layout(\n    title=\"Deaths from COVID-19 by age group and state\",\n    xaxis_title=\"Age group\",\n    yaxis_title=\"State\"\n    )\n    fig.show()\n\n\ninteractive(heatmap_death_by_age,\n         death_by_age=fixed(death_by_age),\n         sex=['Male', 'Female'])","f3de50b5":"## Visualizing COVID deadliness in USA by state and age group","62334149":"## 16,480,485 cases were confirmed From January 22 to August 27","6241c094":"## Day wise no. of cases (Doesn't have country level data)","94a43f4a":"## Data from https:\/\/www.worldometers.info\/coronavirus\/","928570d6":"## Luxembourg tested the entire population","d76c2c1b":"## Most deathes from COVID happened in America","3df863dc":"## Pytest tests","0b93b9d3":"## References:\n1. https:\/\/www.scmp.com\/news\/china\/society\/article\/3074991\/coronavirus-chinas-first-confirmed-covid-19-case-traced-back\n2. https:\/\/www.theguardian.com\/world\/2020\/mar\/13\/first-covid-19-case-happened-in-november-china-government-records-show-report\n3. https:\/\/www.who.int\/news\/item\/27-04-2020-who-timeline---covid-19","a75f5768":"## What is the ratio of the dead to the recovered across countries?","7ab3fa5e":"## Total numbers of COVID cases throughout the first half of year 2020 grew exponentialy","d86194cb":"## Show the start date in certain country ","b8f49354":"## Show the max number of new cases and date in certain country","3e4b1245":"## Show the longest increase in new cases in certain country","974efb81":"## The greatest number of 282,756 new cases was registered on August 23","bd107d0b":"With first cases dating back to November 2019 \\[[1](https:\/\/www.scmp.com\/news\/china\/society\/article\/3074991\/coronavirus-chinas-first-confirmed-covid-19-case-traced-back), [2](https:\/\/www.theguardian.com\/world\/2020\/mar\/13\/first-covid-19-case-happened-in-november-china-government-records-show-report)\\] a novel coronavirus COVID-19 managed to spread outside China no later than January 2020 \\[[3](https:\/\/www.who.int\/news\/item\/27-04-2020-who-timeline---covid-19)\\].","5b0ecbb4":"## Day to day country wise no. of cases (Has County\/State\/Province level data) ","549e3895":"## 654,036 people died of COVID","e3e763af":"## Prepare pytest for unit testing","a6688cde":"# Get data (data is relevant to August 7, 2020)"}}