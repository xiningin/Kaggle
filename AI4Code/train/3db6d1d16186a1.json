{"cell_type":{"12377e01":"code","ee8f3626":"code","81d6a203":"code","74116c99":"code","e84472d3":"code","36e58007":"code","5b754c2f":"code","22a670bf":"code","ba7f5256":"code","8b5b2dca":"code","6321e970":"code","a97c9c95":"code","ddebdd1d":"code","a86a87f1":"code","31033f46":"code","27695c47":"code","da1bd9a0":"code","ce1f490e":"code","6adb1b73":"code","6e5999c7":"code","e55d4163":"code","815454f3":"code","d4b03a30":"code","676c3498":"code","8531ac6c":"code","b9f6e2d7":"code","afb1060b":"code","37d7ecf6":"code","056b9325":"code","9ee090c0":"code","2af4ddfd":"code","584a7cbb":"code","3babd4b3":"code","bb121cd0":"markdown","a7f3c72b":"markdown","11d13253":"markdown","6f77883f":"markdown","58c88281":"markdown","547a2d94":"markdown","9a906076":"markdown","069fcbeb":"markdown","32af9003":"markdown","987d151e":"markdown","a32bf50b":"markdown","dc9da7dc":"markdown","1860df0a":"markdown"},"source":{"12377e01":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt \n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ee8f3626":"X_train = np.load('\/kaggle\/input\/rcmemulators\/X_train.dat', allow_pickle=True)\nX_train.shape","81d6a203":"for t,i in zip(['500 hPa', '700 hPa','850 hPa'],range(3)):\n    plt.imshow(X_train[0,:,:,i])\n    plt.colorbar()\n    plt.title('Geopoential at '+t)\n    plt.show()","74116c99":"for t,i in zip(['500 hPa', '700 hPa','850 hPa'],range(3,7)):\n    plt.imshow(X_train[0,:,:,i])\n    plt.colorbar()\n    plt.title('Temperature at '+t)\n    plt.show()","e84472d3":"plt.imshow(X_train[0,:,:,15])\nplt.colorbar()\nplt.show()","36e58007":"temp_mpl_gcm=X_train[:,4,6,15]\nplt.plot(temp_mpl_gcm[0:365])","5b754c2f":"\n\ndef standardize1(data):\n    mean =  data.mean(axis=(0), keepdims=True)\n    sd   =  data.std(axis=(0), keepdims=True)\n    ndata = (data - mean)\/sd\n    return (ndata)\n\ndef standardize2(data):\n    maxx =  data.max(axis=(0), keepdims=True)\n    minn   =  data.min(axis=(0), keepdims=True)\n    ndata = (data - minn)\/(maxx - minn)\n    return (ndata)\n","22a670bf":"X_test=np.load('\/kaggle\/input\/rcmemulators\/X_test.dat', allow_pickle=True)\n\nXtrain = standardize2(X_train)\nXtest  =  standardize2(X_test)\n\n","ba7f5256":"Y_train = pd.read_csv('\/kaggle\/input\/rcmemulators\/Y_train_mpl.csv')\nY_train.head()\nY_train_temp=np.asarray(Y_train.temp\u00e9)","8b5b2dca":"plt.plot(Y_train_temp[0:365])","6321e970":"import seaborn as sn\n\nsn.distplot(Y_train_temp)","a97c9c95":"def rmse(A,B):\n    return(np.sqrt(((A-B)**2).mean(axis=(0), keepdims=True)))\nrmse(Y_train_temp,temp_mpl_gcm)","ddebdd1d":"import keras\nimport keras.models as km\nimport keras.layers as kl\nimport tensorflow as tf","a86a87f1":"model=km.Sequential()\nmodel.add(kl.Flatten(input_shape=(11,11, 19)))\nmodel.add(kl.Dense(256, activation='relu'))\nmodel.add(kl.Dense(64, activation='linear'))\nmodel.add(kl.Dense(32, activation='relu'))\nmodel.add(kl.Dense(8, activation='linear'))\nmodel.add(kl.Dense(1,activation='linear'))\nmodel.compile(loss='mse', optimizer='adadelta')\nmodel.summary()\n\n","31033f46":"Ytrain=np.asarray(Y_train.temp\u00e9) - temp_mpl_gcm ## I use the temperature series given by the low resolution model to standardize the data","27695c47":"yrs=[i for i in range(2006,2101)]\nyrs2=np.repeat(yrs, 365 , axis=0)\n\nyrs2=yrs2[np.where(yrs2%10>=3)[0]]\nech_train=np.where(yrs2%10!=6)[0]\nech_val=np.where(yrs2%10==6)[0]\n\nX_train2 , X_val = Xtrain[ech_train,:,:,:],Xtrain[ech_val,:,:,:]    \nY_train2 , Y_val = Ytrain[ech_train],Ytrain[ech_val] \n\nprint(X_train2.shape)\n\n","da1bd9a0":"\nepochs = 15\nbatch_size = 10\n\nhistory = model.fit(X_train2,Y_train2, batch_size=batch_size, validation_data=(X_val, Y_val), epochs=epochs)\n","ce1f490e":"previ = model.predict(Xtest)\npred = previ[:,0]+ X_test[:,4,6,15] ## we add again \npred.shape","6adb1b73":"plt.plot(pred)","6e5999c7":"res = pd.read_csv('\/kaggle\/input\/rcmemulators\/samplesub.csv')\n\nres.temp\u00e9 = pred\n","e55d4163":"res.to_csv('submission.csv', index=False)","815454f3":"Y_train_2d = np.load('\/kaggle\/input\/rcmemulators\/Y_train_box.dat', allow_pickle=True)\nY_train_2d.shape","d4b03a30":"plt.imshow(Y_train_2d[0,:,:])\nplt.colorbar()\nplt.show()","676c3498":"temp_2d_gcm=X_train[:,4:6,4:7,15]\nplt.imshow(temp_2d_gcm[0,:,:])\nplt.colorbar()","8531ac6c":"mean_box_gcm = temp_2d_gcm.mean(axis=(1,2),keepdims=True)\nmean_box_gcm.shape","b9f6e2d7":"model2=km.Sequential()\nmodel2.add(kl.Flatten(input_shape=(11,11, 19)))\nmodel2.add(kl.Dense(512, activation='relu'))\nmodel2.add(kl.Dense(256, activation='linear'))\nmodel2.add(kl.Dense(64, activation='relu'))\nmodel2.add(kl.Reshape((8, 8, 1)))\nmodel2.add(kl.UpSampling2D((2,2)))\nmodel2.add(kl.Conv2D(32, (5,5), activation='linear', padding='same'))\nmodel2.add(kl.UpSampling2D((2,2)))\nmodel2.add(kl.Conv2D(32, (3,3), activation='linear', padding='same'))\nmodel2.add(kl.Conv2D(1, (3,3), activation='linear', padding='same'))\nmodel2.compile(loss='mse', optimizer='adadelta')\nmodel2.summary()\n","afb1060b":"Y_train_2d_diff = Y_train_2d - mean_box_gcm ## We can try to predict the difference the region average in the GCM output\nprint(Y_train_2d_diff.shape)\nY_train2_2d , Y_val_2d = Y_train_2d_diff[ech_train,:,:,None],Y_train_2d_diff[ech_val,:,:,None] ","37d7ecf6":"plt.imshow(Y_train_2d_diff[0,:,:])\nplt.colorbar()","056b9325":"epochs = 5\nbatch_size = 10\n\nhistory2 = model2.fit(X_train2,Y_train2_2d, batch_size=batch_size, validation_data=(X_val, Y_val_2d), epochs=epochs)","9ee090c0":"temp_2d_gcm_test=X_test[:,4:6,4:7,15]\nmean_box_gcm_test = temp_2d_gcm_test.mean(axis=(1,2),keepdims=True)\n\npred_2d = model2.predict(Xtest) + mean_box_gcm_test[:,:,:,None]\n","2af4ddfd":"\npredictions = pred_2d[:,:,:,0]\npredictions.shape","584a7cbb":"plt.imshow(pred_2d[10,:,:,0],vmin=260)\nplt.colorbar()\nplt.show()","3babd4b3":"def create_submission(predictions):\n    assert predictions.shape==(10220, 32, 32), f\"Wrong shape for your prediction file : \"\\\n                                      f\"{predictions.shape} instead of (10220, 32, 32)\" \n    \n    if os.path.exists(\"submission.zip\"):\n        !rm submission.zip\n    np.save(\"y_test\", predictions)\n    !mv y_test.npy y_test.predict\n    !zip -r submission.zip y_test_predict.zip\n    print (\"Bundle submision.zip created !\")\n    return None\n\n#\npredictions = np.asarray(pred_2d[:,:,:,0])\ncreate_submission(predictions) ## the output y_test.predict is created then you need to download it and zip it before submit it on codalab","bb121cd0":"Separation between train and validation : (Each 6th year of the decade is used in the validation sample)","a7f3c72b":"And in the input it corresponds to this region : ","11d13253":"## **Simple network**","6f77883f":"# **Output : 1st version of the exercise**","58c88281":"Temperature at Montpellier from the low resolution model:","547a2d94":"# **Output : 2nd version of the exercise**\n2D output","9a906076":"2 functions to standardize data adapted to the 4 dimensions matrix : \n\nIn this case the features are scaled according the mean and standard error (or min and max) of each pixel time series for each variable.\n\n","069fcbeb":"A really naive network just to illustrate the submission:","32af9003":"**Let's firts open the output to have a look into it :**","987d151e":"Let now compute a basic multilayer perceptron model (fully dense)\n","a32bf50b":"One way to make the problem easier is to try to predict the difference between the output at low resolution and the output at high resolution.","dc9da7dc":"We have as an input a 4D matrix organized as follow : [time, lon, lat , variables ].\n\n","1860df0a":"# **INPUT**"}}