{"cell_type":{"502aad9d":"code","e5484e5c":"code","5272c7db":"code","9bbe7144":"code","d0ecf1c2":"code","be6c8406":"code","68786e65":"code","b05a7234":"code","690995d8":"code","3b2f9490":"code","7057c3ca":"code","9e8292c2":"code","05f2f6a6":"code","fc64385f":"code","9578d22c":"code","e9776a16":"code","bf6c2b49":"code","ff49039a":"code","37eb2b9b":"code","626d50ad":"code","c82bb31d":"code","a8ec1cf6":"markdown","c5766691":"markdown","94e3155d":"markdown","cf941503":"markdown","5db8926e":"markdown","83e6fbcc":"markdown","cd17553c":"markdown","d10f51f2":"markdown","b276d413":"markdown","1a01b86a":"markdown","6a6f2bf1":"markdown"},"source":{"502aad9d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e5484e5c":"import shutil\nif os.path.exists('DXY-2019-nCoV-Data'):\n    shutil.rmtree('DXY-2019-nCoV-Data')","5272c7db":"!git clone https:\/\/github.com\/BlankerL\/DXY-2019-nCoV-Data.git","9bbe7144":"import pandas as pd\nimport numpy as np\nimport os\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go","d0ecf1c2":"#file_path = '\/kaggle\/input\/panzura-cc-log\/file_audit_0901_0916.csv'\nbase_path = 'DXY-2019-nCoV-Data\/csv'","be6c8406":"import datetime\n\ndef date_parser (time_in_secs):\n    return datetime.datetime.fromtimestamp(float(time_in_secs))\n\n#df_origin = pd.read_csv(os.path.join(file_path, 'DXYOverall'), parse_dates=[4], date_parser=date_parser, \n#                 index_col='timestamp', keep_default_na = False)\n\ndf_origin = pd.read_csv(os.path.join(base_path, 'DXYOverall.csv'), parse_dates=[-1], index_col=['updateTime'])\nprint (df_origin.columns)\n\nselected_cols = ['confirmedCount','suspectedCount','curedCount','deadCount',  'seriousCount', 'suspectedIncr', 'confirmedIncr',\n    'curedIncr', 'deadIncr', 'seriousIncr', 'foreignStatistics']\ndf_origin=df_origin[selected_cols]\ndf_origin.head(10)","68786e65":"df_origin = df_origin.sort_index()\ndf_origin.head()","b05a7234":"df_origin.index = pd.to_datetime(df_origin.index)","690995d8":"df = df_origin.resample('D').last()\n","3b2f9490":"df['nonInfective'] = df['curedCount']+df['deadCount']\ndf['currentConfirmed'] = df['confirmedCount']-df['nonInfective']\ndf","7057c3ca":"# remove first row\ndf = df.drop(df.index[0])\n","9e8292c2":"fig = plt.figure(facecolor='w', figsize=(30, 10))\nax = fig.add_subplot(111, axisbelow=True)\nax.plot(df.index, df['confirmedCount'], 'r', alpha=0.5, lw=2, label='confirmedCount')\nax.plot(df.index, df['currentConfirmed'], alpha=0.5, lw=2, label='currentConfirmed')\nax.plot(df.index, df['suspectedCount'], 'y', alpha=0.5, lw=2, label='suspectedCount')\nax.plot(df.index, df['curedCount'], 'g', alpha=0.5, lw=2, label='Cured')\nax.plot(df.index, df['nonInfective'], 'b', alpha=0.5, lw=2, label='Cured+Dead')\n\nplt.legend(fontsize=18)\nplt.grid(True)\nplt.title('confirmedCount')\nplt.show()","05f2f6a6":"import numpy as np\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\n\n# Total population, N.\nN = 1000\n# Initial number of infected and recovered individuals, I0 and R0.\nI0, R0 = 1, 0\n# Everyone else, S0, is susceptible to infection initially.\nS0 = N - I0 - R0\n# Contact rate, beta, and mean recovery rate, gamma, (in 1\/days).\nbeta, gamma = 0.2, 1.\/10 \n# A grid of time points (in days)\nt = np.linspace(0, 160, 160)\n\n# The SIR model differential equations.\ndef deriv(y, t, N, beta, gamma):\n    S, I, R = y\n    dSdt = -beta * S * I \/ N\n    dIdt = beta * S * I \/ N - gamma * I\n    dRdt = gamma * I\n    return dSdt, dIdt, dRdt\n\n# Initial conditions vector\ny0 = S0, I0, R0\n# Integrate the SIR equations over the time grid, t.\nret = odeint(deriv, y0, t, args=(N, beta, gamma))\nS, I, R = ret.T\n\n# Plot the data on three separate curves for S(t), I(t) and R(t)\nfig = plt.figure(facecolor='w')\n#ax = fig.add_subplot(111, axis_bgcolor='#dddddd', axisbelow=True)\nax = fig.add_subplot(111, axisbelow=True)\nax.plot(t, S\/1000, 'b', alpha=0.5, lw=2, label='Susceptible')\nax.plot(t, I\/1000, 'r', alpha=0.5, lw=2, label='Infected')\nax.plot(t, R\/1000, 'g', alpha=0.5, lw=2, label='Recovered with immunity')\nax.set_xlabel('Time \/days')\nax.set_ylabel('Number (1000s)')\nax.set_ylim(0,1.2)\nax.yaxis.set_tick_params(length=0)\nax.xaxis.set_tick_params(length=0)\nax.grid(b=True, which='major', c='w', lw=2, ls='-')\nlegend = ax.legend()\nlegend.get_frame().set_alpha(0.5)\nfor spine in ('top', 'right', 'bottom', 'left'):\n    ax.spines[spine].set_visible(False)\nplt.show()","fc64385f":"# SIR\u6a21\u578b\u7684\u9884\u6d4b\u548c\u79d1\u666e https:\/\/zhuanlan.zhihu.com\/p\/105027022\nimport numpy as np \nimport matplotlib.pyplot as plt \nfrom scipy.integrate import odeint \ndef SIR(sir, t, beta, gamma):\n    \"SIR\u6a21\u578b\u7684\u5fae\u5206\u65b9\u7a0b\"\n    S, I, R = sir \n    dsdt = - beta * S * I \n    didt = beta * S * I - gamma * I \n    drdt = gamma * I \n    return [dsdt, didt, drdt]\n# \u5b9a\u4e49\u65f6\u95f4\nt = np.linspace(0, 20, 5000) \n# \u5b9a\u4e49\u521d\u59cb\u60c5\u51b5\uff0c\u6613\u611f\u67d3\u4eba\u65701000\u4eba\uff0c\u611f\u67d3\u4eba1\uff0c\u6062\u590d\u4eba0 \nS0, I0, R0 = 1000, 1, 0 \n# \u611f\u67d3\u6bd4\u4f8b\u4e0e\u6062\u590d\u6bd4\u5206\u522b\u4e3a\nbeta, gamma = 0.004, 0.25\n# \u6c42\u89e3\u65f6\u5e8f\u53d8\u5316\nresult = odeint(SIR, [S0, I0, R0], t, args=(beta, gamma))\nSt, It, Rt = result[:, 0], result[:, 1], result[:, 2] \n# \u7ed8\u56fe\nplt.plot(t, St, c=\"g\", label=\"S\") \nplt.plot(t, It, c=\"r\", label=\"I\")\nplt.plot(t, Rt, c=\"b\", label=\"R\") \nplt.title(\"SIR Model\", fontsize=18) \nplt.xlabel(\"days\", fontsize=18) \nplt.ylabel(\"human\", fontsize=18)\nplt.legend(fontsize=18)\nplt.grid(True)\nplt.show()","9578d22c":"import numpy as np\nfrom scipy.integrate import odeint, solve_ivp\nfrom sklearn import metrics   #Additional scklearn functions\n\nimport matplotlib.pyplot as plt\n\n\n# The COVID-19 model differential equations.\ndef deriv(y, t, N, beta, xi, sigma, gamma):\n    S, E, I, R = y\n    dSdt = -beta * S * I \/ N + xi * E\n    dEdt = beta * S * I \/ N - sigma * E - xi * E\n    dIdt = sigma * E - gamma * I\n    dRdt = gamma * I\n    return dSdt, dEdt, dIdt, dRdt\n","e9776a16":"# best parameter\nbeta_list = np.linspace(1, 4, 15)\nxi_list = np.linspace(0.5, 1.4, 29)\n#other_list = np.linspace(0, 1.0, 23)\nsigma_list = np.linspace(0, 0.5, 21)\ngamma_list = np.linspace(0, 0.1, 15)\n\nprint ('beta_list', beta_list)\nprint ('xi_list',xi_list)\n#print ('other_list',other_list)\nprint ('sigma_list',sigma_list)\nprint ('gamma_list',gamma_list)\n\n","bf6c2b49":"#def all_rmse()\n#np.sqrt(metrics.mean_squared_error(y.values, dtrain_predictions)))\n\nbeta = None\nxi = None\nsigma = None\ngamma = None\nN=90000\n\nE0=df.iloc[0, df.columns.get_loc('suspectedCount')]\nI0=df.iloc[0, df.columns.get_loc('currentConfirmed')]\nR0=df.iloc[0, df.columns.get_loc('nonInfective')]\nS0 = N-E0-I0-R0\n\n\ny0 = S0, E0, I0, R0\n\nleast_RMSE = 0\nt_least_RMSE = 0\n\n# initial value\ndf_with_index = df.reset_index()\nt = df_with_index.index.to_list()\n\n#plt.figure(facecolor='w', figsize=(30, 20))\n#plt.plot(t, N-df.suspectedCount.values-df.currentConfirmed.values-df.nonInfective.values, linestyle='--', label=\"S\")\n#plt.plot(t, df.suspectedCount.values, linestyle='--', label=\"E\")\ncount = 0\nfor beta_tmp in beta_list:\n    print (\"------------------------------beta\", beta_tmp)\n    for gamma_tmp in gamma_list:\n        for sigma_tmp in sigma_list:\n            for xi_tmp in xi_list:\n\n                ret = odeint(deriv, y0, t, args=(N, beta_tmp, xi_tmp, sigma_tmp, gamma_tmp))\n                #ret = solve_ivp(deriv, t_tmp, y0, args=(N, beta_tmp, xi, sigma, gamma_tmp))\n                S, E, I, R = ret.T\n                #print (S)\n                #print (E)\n                #if count in [0, 5] : \n                #    plt.plot(t, S, label=\"S\")\n                #    plt.plot(t, E, label=\"E\")\n\n                #all_rmse = 0.1*np.sqrt(metrics.mean_squared_error(np.log1p(N-df.suspectedCount.values-df.currentConfirmed.values-df.nonInfective.values), np.log1p(S)))\\\n                #    + 0.2*np.sqrt(metrics.mean_squared_error(np.log1p(df.suspectedCount.values), np.log1p(E)))\\\n                #    + 0.4*np.sqrt(metrics.mean_squared_error(np.log1p(df.currentConfirmed.values), np.log1p(I)))\\\n                #    + 0.3*np.sqrt(metrics.mean_squared_error(np.log1p(df.nonInfective.values), np.log1p(R)))\n                all_rmse = 0.1*np.sqrt(metrics.mean_squared_error(np.log1p(N-df.suspectedCount.values-df.currentConfirmed.values-df.nonInfective.values), np.log1p(S)))\\\n                    + 0.1*np.sqrt(metrics.mean_squared_error(np.log1p(df.suspectedCount.values), np.log1p(E)))\\\n                    + 0.5*np.sqrt(metrics.mean_squared_error(np.log1p(df.currentConfirmed.values), np.log1p(I)))\\\n                    + 0.3*np.sqrt(metrics.mean_squared_error(np.log1p(df.nonInfective.values), np.log1p(R)))\n                #print (all_rmse)\n\n                if count == 0:\n                    least_RMSE = all_rmse\n                    beta = beta_tmp\n                    gamma = gamma_tmp\n                    sigma = sigma_tmp\n                    xi = xi_tmp\n                if all_rmse < least_RMSE:\n                    print (all_rmse)\n                    least_RMSE = all_rmse\n                    #t_least_RMSE = day\n                    beta = beta_tmp\n                    gamma = gamma_tmp\n                    sigma = sigma_tmp\n                    xi = xi_tmp\n                count = count+1\nprint ('least_RMSE', least_RMSE)\nprint ('beta:',beta, 'sigma:', sigma, 'xi', xi, 'gamma:', gamma)","ff49039a":"\n# Integrate the SIR equations over the time grid, t.\nret = odeint(deriv, y0, t, args=(N, beta, xi, sigma, gamma))\nS, E, I, R = ret.T","37eb2b9b":"\n\n# visualize\nplt.figure(facecolor='w', figsize=(30, 10))\n\nplt.plot(t, S, c=\"g\", label=\"S\")\nplt.plot(t, N-df.suspectedCount-df.currentConfirmed-df.nonInfective, c=\"g\", linestyle='--', label=\"actual S\") \n\nplt.plot(t, E, c=\"y\", label=\"E\") \nplt.plot(t, df.suspectedCount, c=\"y\", linestyle='--', label=\"actual suspected\") \n\n\nplt.plot(t, I, c=\"r\", label=\"I\")\nplt.plot(t, df.currentConfirmed, c=\"r\", linestyle='--', label=\"actual current confirmed\") \n\nplt.plot(t, R, c=\"b\", label=\"R\") \nplt.plot(t, df.nonInfective, c=\"b\", linestyle='--', label=\"actual Cured+Dead\") \n\nplt.title(\"COVID-19 Model\", fontsize=18) \nplt.xlabel(\"days\", fontsize=18) \nplt.ylabel(\"human\", fontsize=18)\nplt.legend(fontsize=18)\nplt.grid(True)\nplt.show()","626d50ad":"beta = 1.5\nsigma = 0.3\nxi = 0.66\ngamma = 0.03\ny0 = 90000,1076,835,62\n# Initial conditions vector\n# Integrate the SIR equations over the time grid, t.\nret = odeint(deriv, y0, t, args=(N, beta, xi, sigma, gamma))\nS, E, I, R = ret.T","c82bb31d":"import numpy as np\nx = np.linspace(0, 1, 5)\nprint (x.size)\ny_a = np.zeros((2, x.size))\ny_b = np.zeros((2, x.size))\ny_b[0] = 3\ny_b","a8ec1cf6":"# <a id='1'> 1. EDA - Understanding the data","c5766691":"# <a id='2'> 2. SIR model example\n    this is only some examples i copy from website","94e3155d":"some reference links for how to solve boundary problems but finally i treat it as a initial problems\n\n2nd differential https:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.integrate.solve_bvp.html?  \n1st differential Examples of using solve_bvp https:\/\/gist.github.com\/nmayorov\/f8af5ca956c6a7f75ecdb578a2655894  \nhttps:\/\/github.com\/rpanderson\/teaching\/blob\/master\/FiniteSquareWellEigenstates.ipynb \nhttps:\/\/docs.scipy.org\/doc\/scipy\/reference\/generated\/scipy.integrate.solve_bvp.html?highlight=s\nhttps:\/\/scicomp.stackexchange.com\/questions\/30657\/scipy-two-point-boundary-value-problem","cf941503":"# **coronavirus 2019 prediction**\n\nThis post is about how to predict coronavirus trend.   \nData is from https:\/\/github.com\/BlankerL\/DXY-2019-nCoV-Data.git written by Isaac Lin.  \n\nWelcome comments and credits if you like it! Hope everyone in the world good!\n\n# <font color=\"red\">\u6b66\u6c49\u52a0\u6cb9!<\/font>  \n# <font color=\"red\">\u4e2d\u56fd\u52a0\u6cb9!<\/font> \n# <font color=\"red\">\u4e16\u754c\u52a0\u6cb9!<\/font>  \n\n\n","5db8926e":"- <a href='#1'>1. EDA - Understanding the data<\/a>\n- <a href='#2'>2. Some example code<\/a>\n- <a href='#3'>3. COVID-19 model<\/a>\n- <a href='#4'>4. TODO <\/a>","83e6fbcc":"to avoid tune the parameters manually, i use following code to select parameters automatically","cd17553c":"# <a id='3'> 3. COVID-19 model","d10f51f2":"this picture shows the state flow of this model. It's a modified version of SEIR model.\n\n![image.png](attachment:image.png)","b276d413":"use auto-selected parameters to run the model again","1a01b86a":"# <a id='4'> 4. TODO\n    1. at the end the tread looks not fit very well. need update the cost function\n    2. make the time span longer to see the whole trend","6a6f2bf1":"following is a backup copy when i try to manually tune the parameters"}}