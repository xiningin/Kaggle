{"cell_type":{"25e34454":"code","b875121c":"code","4c925210":"code","e0eef336":"code","bf85e138":"code","b51cd41d":"code","925fd415":"code","f0a42dce":"code","89222b5c":"code","2e3422fb":"code","19b47263":"code","057238c3":"code","edb1b934":"code","15717c89":"code","15cfd132":"code","a403e906":"code","abd650b8":"code","f48d74cb":"code","8b393500":"code","49b28151":"code","a605a599":"code","f9894056":"code","d915a6e9":"code","c71e89ad":"code","36e21c56":"code","12d6f12f":"code","e6f3906a":"code","5ed89a06":"code","40030bf4":"code","5c155d13":"code","787d1a43":"code","a7d3bac6":"code","552c58fc":"markdown","9566b32f":"markdown","0cda50c9":"markdown","24b3e796":"markdown","1e25185b":"markdown","07444276":"markdown","6e669530":"markdown","5d0ddd6b":"markdown","01d5dea2":"markdown","1dcd0180":"markdown","6e3228d2":"markdown","af727c78":"markdown","1355c559":"markdown","c0ad3676":"markdown","cf0868c4":"markdown","ef6b8a70":"markdown","746d7d69":"markdown","1fc0507c":"markdown","dd8d1a02":"markdown","7416e8c5":"markdown","aff48406":"markdown","f2f8be01":"markdown"},"source":{"25e34454":"# packages\n\n# standard\nimport numpy as np\nimport pandas as pd\nimport time\n\n# plot\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\n\n# map\nimport folium\nfrom folium.plugins import HeatMap\n\n# NLP\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator","b875121c":"# import csv file\ndf = pd.read_csv('..\/input\/ufo-sightings-1969-to-2019\/nuforc_reports.csv')\n# first glance\ndf.head()","4c925210":"# dimensions of table\nn_row = df.shape[0]\nprint('Number of observations:', n_row)","e0eef336":"# show all column names\nprint(list(df.columns))","bf85e138":"# convert dates\ndf.date_time = pd.to_datetime(df.date_time)\ndf.posted = pd.to_datetime(df.posted)\n\n# add year and months\ndf['year'] = df.date_time.dt.year\ndf['month'] = df.date_time.dt.month","b51cd41d":"# let's see what's in the stats column\ndf.stats[0]\n","925fd415":"# let's check another row, e. g. the row 2, where we have quite a few NaNs:\ndf.stats[2]","f0a42dce":"df.iloc[2,:]","89222b5c":"# Year\nprint('Year - Missing: ',np.round( 100*sum(df.year.isna())\/n_row,2 ), '%')\nfor_count = df.year[~df.year.isna()] # remove missings for count\nplt.figure(figsize=(14,5))\nfor_count.astype(int).value_counts().plot(kind='bar')\nplt.title('Year - Sorted by Frequency')\nplt.grid()\nplt.show()","2e3422fb":"# Year - plot in natural order\nplt.figure(figsize=(12,5))\nfor_count.astype(int).value_counts().sort_index().plot(kind='bar')\nplt.title('Year')\nplt.grid()\nplt.show()","19b47263":"# Month\nprint('Month - Missing: ',np.round( 100*sum(df.month.isna())\/n_row,2 ), '%')\nfor_count = df.month[~df.month.isna()] # remove missings for count\nplt.figure(figsize=(12,5))\nfor_count.astype(int).value_counts().plot(kind='bar')\nplt.title('Month - Sorted by Frequency')\nplt.grid()\nplt.show()","057238c3":"# Month - plot in natural order\nplt.figure(figsize=(12,5))\nfor_count.astype(int).value_counts().sort_index().plot(kind='bar')\nplt.title('Month')\nplt.grid()\nplt.show()","edb1b934":"# impute missing values\ndf.year = df.year.fillna(0).astype(int)\ndf.month = df.month.fillna(0).astype(int)","15717c89":"# add year+month combo\ndf['year_month'] = df.year.astype(str) + '_' + df.month.astype(str)","15cfd132":"plt.figure(figsize=(12,5))\ndf.year_month.value_counts()[0:20].plot(kind='bar')\nplt.title('Most frequent year\/month combinations (0_0 ~ missing values)')\nplt.grid()\nplt.show()","a403e906":"features_cat = ['city', 'state', 'shape', 'duration']","abd650b8":"for f in features_cat:\n    plt.figure(figsize=(12,5))\n    df[f].value_counts()[0:20].plot(kind='bar')\n    plt.title(f)\n    plt.grid()\n    plt.show()","f48d74cb":"my_text = df.summary[~df.summary.isna()]\n# example\nmy_text[0]","8b393500":"stopwords = set(STOPWORDS)\n\n# add more context specific stopwords\n# stopwords.update({'www','href','http','https'})\n\n# render wordcloud\ntext = \" \".join(txt for txt in my_text)\n\nt1 = time.time()\nwordcloud = WordCloud(stopwords=stopwords, max_font_size=50, max_words=500,\n                      width = 600, height = 400,\n                      background_color=\"white\").generate(text)\nt2 = time.time()\n\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()\n\nprint('Elapsed time: ', np.round(t2-t1,2), 's')","49b28151":"my_text = df.text[~df.text.isna()]\n# example\nmy_text[0]","a605a599":"stopwords = set(STOPWORDS)\n\n# add more context specific stopwords\n# stopwords.update({'www','href','http','https'})\n\n# render wordcloud\ntext = \" \".join(txt for txt in my_text)\n\nt1 = time.time()\nwordcloud = WordCloud(stopwords=stopwords, max_font_size=50, max_words=500,\n                      width = 600, height = 400,\n                      background_color=\"white\").generate(text)\nt2 = time.time()\n\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()\n\nprint('Elapsed time: ', np.round(t2-t1,2), 's')","f9894056":"# check coordinates first\nplt.scatter(df.city_longitude, df.city_latitude)\nplt.grid()\nplt.show()","d915a6e9":"df_strange = df[(df.city_latitude < 15) | (df.city_longitude > -40)]\ndf_strange","c71e89ad":"df_strange.iloc[7,].stats","36e21c56":"# let's remove the strange entries for the following\n# (alternatively we could fix the coordinates manually)\nlist_strange = list(df_strange.report_link)[0:7] # we keep the last one (Australia)!\ndf = df[~df.report_link.isin(list_strange)]","12d6f12f":"# missings\nmiss_lat = sum(df.city_latitude.isna())\nmiss_lon = sum(df.city_longitude.isna())\n\nprint('Missing Latitude:  ', miss_lat, ' ~ ', round(100*miss_lat\/n_row,2), '%')\nprint('Missing Longitude: ', miss_lon, ' ~ ', round(100*miss_lon\/n_row,2), '%')","e6f3906a":"# for plot we need to remove the rows with missing coordinates\ndf_plot = df[~df.city_latitude.isna()]\ndf_plot.shape","5ed89a06":"# heatmap of locations for first overview\nzoom_factor = 2 # inital map size\nmy_map_1 = folium.Map(location=[0,0], zoom_start=zoom_factor)\nHeatMap(data=df_plot[['city_latitude', 'city_longitude']], radius=10).add_to(my_map_1)\nmy_map_1 # display","40030bf4":"df_plot_2019 = df_plot[df_plot.year==2019]\ndf_plot_2019.shape","5c155d13":"# interactive map of individual locations (year 2019)\nzoom_factor = 5\nmy_map_2 = folium.Map(location=[36,-100], zoom_start=zoom_factor)\n\nfor i in range(0,df_plot_2019.shape[0]):\n   folium.Circle(\n      location=[df_plot_2019.iloc[i]['city_latitude'], df_plot_2019.iloc[i]['city_longitude']],\n      radius=10000,\n      color='red',\n      weight=1, # stroke width in pixels\n      popup='Report Link: ' + df_plot_2019.iloc[i]['report_link'] + ' - Time: ' + str(df_plot_2019.iloc[i]['date_time']),\n      fill=True,\n      fill_color='red'\n   ).add_to(my_map_2)\nmy_map_2 # display","787d1a43":"# interactive map of individual locations (year 2019)\nzoom_factor = 5\nmy_map_3 = folium.Map(location=[36,-100], zoom_start=zoom_factor)\n\nv_min = np.min(df_plot_2019.month)\nv_max = np.max(df_plot_2019.month)\n    \nfor i in range(0,df_plot_2019.shape[0]):\n        v = df_plot_2019.iloc[i]['month']\n        v_norm = (v-v_min)\/(v_max-v_min)\n        i_col = int(v_norm*256)\n        current_color = matplotlib.colors.to_hex(matplotlib.cm.rainbow(i_col))\n        folium.Circle(\n            location=[df_plot_2019.iloc[i]['city_latitude'], df_plot_2019.iloc[i]['city_longitude']],\n            radius=10000,\n            color='black',\n            weight=1, # stroke width in pixels\n            popup='Report Link: ' + df_plot_2019.iloc[i]['report_link'] + ' - Time: ' + str(df_plot_2019.iloc[i]['date_time']) + ' - Month: ' + str(df_plot_2019.iloc[i]['month']),\n            fill=True,\n            fill_opacity=0.25,\n            fill_color=current_color\n        ).add_to(my_map_3)\nmy_map_3 # display","a7d3bac6":"# interactive map of individual locations (year 2019)\nzoom_factor = 5\nmy_map_4 = folium.Map(location=[36,-100], zoom_start=zoom_factor)\n\n# creatue numeric version of shape column\nshape_as_number = df_plot_2019['shape'].astype('category').cat.codes\n\nv_min = np.min(shape_as_number) + 1 # min is -1 => add one\nv_max = np.max(shape_as_number) + 1\n\nfor i in range(0,df_plot_2019.shape[0]):\n        v = shape_as_number.iloc[i] + 1 # min is -1 => add one\n        v_norm = (v-v_min)\/(v_max-v_min)\n        i_col = int(v_norm*256)\n        current_color = matplotlib.colors.to_hex(matplotlib.cm.rainbow(i_col))\n        folium.Circle(\n            location=[df_plot_2019.iloc[i]['city_latitude'], df_plot_2019.iloc[i]['city_longitude']],\n            radius=10000,\n            color='black',\n            weight=1, # stroke width in pixels\n            popup='Report Link: ' + df_plot_2019.iloc[i]['report_link'] + ' - Time: ' + str(df_plot_2019.iloc[i]['date_time']) + ' - Shape: ' + str(df_plot_2019.iloc[i]['shape']),\n            fill=True,\n            fill_opacity=0.25,\n            fill_color=current_color\n        ).add_to(my_map_4)\nmy_map_4 # display","552c58fc":"# The X-Files: UFO Sightings EDA and Interactive Maps\n\nNotebook takes a few seconds to load completely, so please be patient...","9566b32f":"The first seven rows seem to have a wrong geocoding (you can check the details by following the report link). Only the last one, in Australia, seems to be actually correct, the website provides the following details:\n\nSighting Report\n* Occurred : 12\/21\/2018 02:20 (Entered as : 21\/12\/2018 02:20)\n* Reported: 12\/20\/2018 2:17:12 PM 14:17\n* Posted: 1\/4\/2019\n* Location: Perth (Western Australia), WA\n* Shape: Changing\n* Duration: 5.12 minutes","0cda50c9":"July 2014 was the month with the most observations.","24b3e796":"Looks reasonable, especially we do not have any (0,0) locations (which typically represent missing values).\n\nHowever, there are a few locations clearly outside of the US. Let's check:","1e25185b":"<a id='1'><\/a>\n# Data preparation","07444276":"<a id='3'><\/a>\n# Explore categorical features","6e669530":"### Heatmap","5d0ddd6b":"<a id='5'><\/a>\n# Geospatial Visualizations","01d5dea2":"<a id='4'><\/a>\n# Wordclouds","1dcd0180":"### Individual locations + color encoding of month (year 2019)","6e3228d2":"#### There does not seem to be a real pattern... shapes seem to occur more or the less randomly?","af727c78":"### Individual locations (year 2019)","1355c559":"### Wordcloud for \"summary\" column","c0ad3676":"Ok, this seems to be somewhat redundant. Only additional info would be the reported date. ","cf0868c4":"# Table of Contents\n* [Data preparation](#1)\n* [Explore time features](#2)\n* [Explore categorical features](#3)\n* [Wordclouds](#4)\n* [Geospatial Visualizations](#5)","ef6b8a70":"For an interactive detailed display of the locations let's first select **year 2019 only** so we do not have too many points to display.","746d7d69":"<a id='2'><\/a>\n# Explore time features","1fc0507c":"### Wordcloud for \"text\" column","dd8d1a02":"We see more sightings in the warmer months. Not so surprising.","7416e8c5":"### Individual locations + color encoding of shape (year 2019)","aff48406":"Well, there seems to be some info that is not transfered to the individual features, e. g. location is in the stats, but not in the corresponding column. Nevertheless, for the sake of simplicity, we will ignore the stats column in the following.","f2f8be01":"Statistics before 2006 are quite sparse..."}}