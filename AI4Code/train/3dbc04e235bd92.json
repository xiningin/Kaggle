{"cell_type":{"4dcf9439":"code","60a47c73":"code","40a7531d":"code","22871b28":"code","29b750d2":"code","8ceacc3d":"code","505bd0f6":"code","800c7d58":"code","84f9aa22":"code","f21d82cf":"code","f89a0a2d":"code","c8e25287":"code","73e33c67":"code","fb306784":"code","f6dc6d3c":"code","6900a4f4":"code","116a78b3":"code","4af7b514":"code","fff2c1c2":"code","95345dfd":"code","df81cd04":"code","63e22813":"code","e2118aae":"code","db0ac71b":"code","205630f7":"code","38905b22":"code","4cb4c0ba":"code","275c4cba":"code","06e4b4d1":"code","0fc16076":"code","bb2e35c2":"code","bee055b4":"code","3e6747bf":"code","0534cc4e":"code","836f5581":"code","39bd1220":"code","8b2e90e3":"code","79c93f85":"code","db19f956":"code","991271d8":"code","75ebce24":"markdown","ed431789":"markdown","932bc3e4":"markdown","29816334":"markdown","37a17acc":"markdown","ba6daa28":"markdown","645162c2":"markdown","b030dfec":"markdown","f48e8c9d":"markdown","4a0f688e":"markdown","dcf95763":"markdown"},"source":{"4dcf9439":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n#Installing windrose to have the wind direction overview\n!pip install windrose\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Use seaborn style defaults and set the default figure size\nsns.set(rc={'figure.figsize':(11, 4)})\nfrom windrose import WindroseAxes\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","60a47c73":"# Importing the data needed for the analysis into panda dataframe\n\ndf = pd.read_csv('..\/input\/wind-turbine-scada-dataset\/T1.csv')","40a7531d":"#checking the first 5 set of data in the dataframe\ndf.head()","22871b28":"#checking if the dataframe contains null\ndf.isna().sum()","29b750d2":"#Covert Data\/time to index and drop columns Date\/Time\ndf.index=df['Date\/Time']\ndf.drop(['Date\/Time'], axis=1, inplace=True)","8ceacc3d":"#New DataFrame after dropping column Date\/Time\ndf.head()","505bd0f6":"#plotting each data\ncols_plot = ['LV ActivePower (kW)', 'Wind Speed (m\/s)', 'Theoretical_Power_Curve (KWh)','Wind Direction (\u00b0)']\naxes = df[cols_plot].plot(marker='.', alpha=0.5, linestyle='None', figsize=(11, 9), subplots=True)","800c7d58":"# Plot the data distributions\nplt.figure(figsize=(10, 8))\nfor i in range(4):\n    plt.subplot(2, 2, i+1)\n    sns.kdeplot(df.iloc[:,i], shade=True)\n    plt.title(df.columns[i])\nplt.tight_layout()\nplt.show()","84f9aa22":"# Create wind speed and direction variables\nax = WindroseAxes.from_ax()\nax.bar(df['Wind Direction (\u00b0)'], df['Wind Speed (m\/s)'], normed=True, opening=0.8, edgecolor='white')\nax.set_legend()","f21d82cf":"#Checking for maximum and minimum value of the wind direction to help in choosing the right binning value\nprint(df['Wind Direction (\u00b0)'].max())\nprint(df['Wind Direction (\u00b0)'].min())","f89a0a2d":"#Continuous variable bins; qcut vs cut: https:\/\/stackoverflow.com\/questions\/30211923\/what-is-the-difference-between-pandas-qcut-and-pandas-cut\n#Fare Bins\/Buckets using qcut or frequency bins: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.qcut.html\n#df['Wind Speed (m\/s) Bin'] = pd.qcut(df['Wind Speed (m\/s)'], 4)\n\n #Age Bins\/Buckets using cut or value bins: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.cut.html\n#df['Wind Direction (\u00b0)'] = pd.cut(df['Wind Direction (\u00b0)'].astype(int), 45)","c8e25287":"#df","73e33c67":"#Bining the data by the wind direction\nbins_range = np.arange(0,375,30)","fb306784":"print(bins_range)","f6dc6d3c":"#Write a short code to map the bins data\ndef binning(x, bins):\n    kwargs = {}\n    if x == max(bins):\n        kwargs['right'] = True\n    bin = bins[np.digitize([x], bins, **kwargs)[0]]\n    bin_lower = bins[np.digitize([x], bins, **kwargs)[0]-1]\n    return '[{0}-{1}]'.format(bin_lower, bin)","6900a4f4":"df['Bin'] = df['Wind Direction (\u00b0)'].apply(binning, bins=bins_range)","116a78b3":"#group the binned data by mean and std\ngrouped = df.groupby('Bin')\ngrouped_std = grouped.std()\ngrouped_mean = grouped.mean()\ngrouped_mean.head()","4af7b514":"#Checking for maximum and minimum value of the windspeed to help in choosing the right binning value\nprint(df['Wind Speed (m\/s)'].max())\nprint(df['Wind Speed (m\/s)'].min())","fff2c1c2":"#Bining the data by the wind direction\nbins_range_ws = np.arange(0,26,0.5)","95345dfd":"df['Bin'] = df['Wind Speed (m\/s)'].apply(binning, bins=bins_range_ws)","df81cd04":"#Group by windspeed bin\ngrouped = df.groupby('Bin')\ngrouped_std = grouped.std()\ngrouped_mean = grouped.mean()\ngrouped_mean","63e22813":"#lets rearrange the index for proper visualisation\nstep = bins_range_ws[1]-bins_range_ws[0]\nnew_index = ['[{0}-{1}]'.format(x, x+step) for x in bins_range_ws]\nnew_index.pop(-1) #We dont need [360-375]...\ngrouped_mean = grouped_mean.reindex(new_index)","e2118aae":"#Rearranged and visulaizing the mean of each windspeed bin \ngrouped_mean","db0ac71b":"#Power Curve Anaylsis\n#Theoretical power curve\nplt.scatter(df['Wind Speed (m\/s)'],df['Theoretical_Power_Curve (KWh)'])\nplt.ylabel('Theoretical_Power (KWh)')\nplt.xlabel('Wind speed (m\/s)')\nplt.grid(True)\nplt.legend([' Theoretical_Power_Curve'], loc='upper left')\nplt.show()","205630f7":"# LV ActivePower (kW) CP_CURVE\nplt.scatter(df['Wind Speed (m\/s)'],df['LV ActivePower (kW)'])\nplt.ylabel('LV ActivePower (kW)')\nplt.xlabel('Wind speed (m\/s)')\nplt.grid(True)\nplt.legend([' LV ActivePower (kW) CP_CURVE'], loc='upper left')\nplt.show()","38905b22":"#Condition 1\n#The first step is the removal of downtime events, which can be identified as near-zero power at high wind speeds.\n\n#Eliminate datas where wind speed is bigger than 3.5 and active power is zero.\nnew_df=df[((df[\"LV ActivePower (kW)\"]!=0)&(df[\"Wind Speed (m\/s)\"]>3.5)) | (df[\"Wind Speed (m\/s)\"]<=3.5)]","4cb4c0ba":"#Condition 2\nnew_1 = (new_df[ (new_df['Wind Speed (m\/s)'] < 12.5)  | (new_df['LV ActivePower (kW)'] >= 3000) ])","275c4cba":"#Condition 3\nnew_2 = (new_1[ (new_1['Wind Speed (m\/s)'] < 9.5)  | (new_1['LV ActivePower (kW)'] >= 1500) ])","06e4b4d1":"#Condition 3\nnew_3 = (new_2[ (new_2['Wind Speed (m\/s)'] < 6.5)  | (new_2['LV ActivePower (kW)'] >= 500) ])","0fc16076":"#Theoretical_Power_Curve and Filtered LV ActivePower (kW) CP_CURVE Visualisation\nplt.scatter(new_3['Wind Speed (m\/s)'],new_3['LV ActivePower (kW)'])\nplt.scatter(df['Wind Speed (m\/s)'],df['Theoretical_Power_Curve (KWh)'], label='Theoretical_Power_Curve (KWh)')\nplt.ylabel('Power (kW)')\nplt.xlabel('Wind speed (m\/s)')\nplt.grid(True)\nplt.legend(['Theoretical_Power_Curve and Filtered LV ActivePower (kW) CP_CURVE'], loc='lower right')\nplt.show()","bb2e35c2":"#Function to create more feature as WS and  Category\ndef CP_group(val):\n    if val<3.5:\n        return 'Region_1'\n    elif val> 3.5 and val < 10:\n        return 'Region_1.5'\n    elif val>10 and val < 15:\n        return 'Region_2'\n    elif val>15 and val < 23:\n        return 'Region_2.5'\n    else:\n        return 'Region_3'\ndf['Operational Category']=df['Wind Speed (m\/s)'].apply(CP_group)","bee055b4":"df.head(5)","3e6747bf":"#Checking the data type for better understanding\ndf.dtypes","0534cc4e":"#Splitting the data into categorical data and float\ndf_float = df[df.dtypes[df.dtypes == \"float\"].index]\n\ndf_Cat = df[df.dtypes[df.dtypes == \"object\"].index]","836f5581":"df_float.head(5)","39bd1220":"df_Cat.head(5)","8b2e90e3":"#Converting the categorical data into dummy variable for easy analysis\ndf_Cat = pd.get_dummies(df_Cat)","79c93f85":"df_Cat.head(5)","db19f956":"#concatinating the two data type together\nResult=df_float.join([df_Cat])","991271d8":"Result.head(5)","75ebce24":"Feature Engineering","ed431789":"Data Description as it was found in https:\/\/www.kaggle.com\/berkerisen\/wind-turbine-scada-dataset\n\nContext\n\nIn Wind Turbines, Scada Systems measure and save data's like wind speed, wind direction, generated power etc. for 10 minutes intervals. This file was taken from a wind turbine's scada system that is working and generating power in Turkey.\n\nContent The data's in the file are:\n\n1) Date\/Time (for 10 minutes intervals)\n2) LV ActivePower (kW): The power generated by the turbine for that moment\n3) Wind Speed (m\/s): The wind speed at the hub height of the turbine (the wind speed that turbine use for electricity generation)\n4) TheoreticalPowerCurve (KWh): The theoretical power values that the turbine generates with that wind speed which is given by the turbine manufacturer\n5)Wind Direction (\u00b0): The wind direction at the hub height of the turbine (wind turbines turn to this direction automaticly)\n","932bc3e4":"The analysis above shows that highest avearge wind speed was recorded around 180(\u00b0)-225(\u00b0). \n\nContrary to the opinion once had from the windrose plot, south - southwest shows good site for wind turbine because it has the highest avearge wind speed. The region also also has highest theoretical power amd LV active power.","29816334":"Generating more features from the limited data given.","37a17acc":"The wind rose plot above shows that the wind direction is mostly from the north east while some significant wind also come from the south-west.","ba6daa28":"Converting the categorical data into variable","645162c2":"Looking at the table above, it can be assumed that the cut-in wind speed is 3.0-3.5 (m\/s), rated wind speed is 12.5-13.0 (m\/s) and cut-out wind speed is around 25(m\/s). This analysis will be us to determine better filter condition in the power curve analysis.","b030dfec":"The filtered power curve can still be improved. You can suggest best filter condition. ","f48e8c9d":"Using the information gathered above, we can now set a filter condition for our LV ActivePower (kW) power curve\n\nNote: The filter information will be done manually based on the knoweldge gathered above.","4a0f688e":"The feature generated is Operational category and windspeed bin, which can be converted into dummy variable for further ML prediction. For operational category, regions are derived from the operational state of wind turbine according to the data provided. Region_1 : Non-operational Region_1.5 :Max Rotor Efficinecy Region_2 : Rated Region_2.5 : Reduced Rotor Efficiency Region_3 : Cut-out","dcf95763":"                            The Project is Wind Data Analysis some Feature Engineering"}}