{"cell_type":{"ead11c3e":"code","b4d07476":"code","1ffd3907":"code","48171701":"code","3e6dd323":"code","68ed76b4":"code","cfc43b57":"code","d2bb804c":"code","29e27931":"code","0d51ff46":"code","485eeeb9":"code","c357b149":"code","43552821":"code","143af908":"code","d89f366b":"code","b92aa86e":"code","7a27dade":"code","ab0d8cd3":"code","9dfc0896":"code","ea4144a8":"code","f07fb2e0":"code","0b7445ba":"code","93a4261c":"code","f9a7b0e3":"code","f9c1e821":"markdown","503f1008":"markdown","9a43bf54":"markdown","e8edc726":"markdown","f7a5453f":"markdown","45179319":"markdown","62e8a30c":"markdown","6d5c4105":"markdown","d65d3eab":"markdown"},"source":{"ead11c3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b4d07476":"df = pd.read_csv('..\/input\/ecommerce-purchases\/Ecommerce Purchases.csv')","1ffd3907":"df.head(5)","48171701":"df.info()","3e6dd323":"df.isnull().sum()","68ed76b4":"df.shape\n#Method1\nprint('Number of rows:',df.shape[0])\nprint('Number of columns:',df.shape[1])","cfc43b57":"df.shape\n#Method2\nprint('Number of rows:',len(df))\nprint('Number of columns:',len(df.columns))","d2bb804c":"df['Purchase Price'].describe()","29e27931":"print('Highest Purchase Price is:', df['Purchase Price'].max())\nprint('Lowest Purchase Price is:', df['Purchase Price'].min())\nprint('Average Purchase Price is:', df['Purchase Price'].mean())","0d51ff46":"df['Language'].value_counts()","485eeeb9":"len(df[df['Language']=='de'])","c357b149":"df[df['Language']=='de'].count()","43552821":"df.columns","143af908":"len(df[df['Job'].str.contains('engineer', case=False)])","d89f366b":"df[df['IP Address']=='132.207.160.22']['Email']","b92aa86e":"df[df['Purchase Price']>50].count()","7a27dade":"df[df['CC Provider'].str.contains('Mastercard',case=False)].count()","ab0d8cd3":"len(df[(df['Purchase Price']>50) & (df['CC Provider'].str.contains('Mastercard',case=False))])","9dfc0896":"df[df['Credit Card']==4664825258997300]['Email']","ea4144a8":"df['AM or PM'].value_counts()","f07fb2e0":"def fun():\n    count=0\n    for date in df['CC Exp Date']:\n        if date.split('\/')[1]=='20':\n            count=count+1\n    print(count)","0b7445ba":"fun()","93a4261c":"len(df[df['CC Exp Date'].apply(lambda x:x[3:]=='20')])","f9a7b0e3":"df['Email'].apply(lambda x:x.split('@')[1]).value_counts().head()","f9c1e821":"**Email of the person with 4664825258997300 credit card number**","503f1008":"**Email of the person with IP address 132.207.160.22**","9a43bf54":"**Details on Engineers**","e8edc726":"**Break up by time period**","f7a5453f":"**Number of people who made a purchase of more than 50 dollars using Mastercard**","45179319":"**Highest and Lowest Purchase Price**","62e8a30c":"**Top 5 Most Popular email providers**","6d5c4105":"**Number of German Natives**","d65d3eab":"**Credit Card expires in 2020**"}}