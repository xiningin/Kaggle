{"cell_type":{"d468120c":"code","32dcb9a0":"code","9bc4b73e":"code","6bec9c23":"code","d0162f7f":"code","2fd816e9":"code","63857a35":"code","fca5fda2":"code","407cc63f":"code","28ad40bb":"code","4304b5aa":"code","80d5d60e":"code","14ef1eec":"code","3864bcbc":"code","b10ccb39":"code","6cd60b42":"code","2eddd042":"code","06ee3fd2":"code","f26cf49f":"markdown","52f1de25":"markdown","3e90c099":"markdown","13a66255":"markdown","c4eef10f":"markdown","6771ea13":"markdown","ea7de9b1":"markdown","a22f112e":"markdown","227d78a4":"markdown","04c1e441":"markdown","60509562":"markdown"},"source":{"d468120c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nimport plotly.express as ex\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\nimport bs4 as bs\nimport re","32dcb9a0":"movies_data = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv')\nmovies_data.drop(columns=['homepage','status'],inplace=True)\ncredits_data = pd.read_csv('\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv')\nmovies_data.head(5)","9bc4b73e":"genres_list =[]\nkeywords_list=[]\nproduction_companies_list=[]\nproduction_countries_list = []\nspoken_languages_list = []\nfor index,row in  movies_data.iterrows():\n    dec = re.findall(r'\"([A-Za-z0-9_\\.\/\\\\-]*)\"',row['genres'])\n    dec = [cat for cat in dec if cat not in ['id','name']]\n    genres_list +=dec\n    dec = re.findall(r'\"([A-Za-z0-9_\\.\/\\\\-]*)\"',row['keywords'])\n    dec = [cat for cat in dec if cat not in ['id','name']]\n    keywords_list +=dec\n    dec = re.findall(r'\"([A-Za-z0-9_\\.\/\\\\-]*)\"',row['production_companies'])\n    dec = [cat for cat in dec if cat not in ['id','name']]\n    production_companies_list +=dec\n    dec = re.findall(r'\"([A-Za-z0-9_\\.\/\\\\-]*)\"',row['production_countries'])\n    dec = [cat for cat in dec if cat not in ['id','name']]\n    production_countries_list +=dec\n    dec = re.findall(r'\"([A-Za-z0-9_\\.\/\\\\-]*)\"',row['spoken_languages'])\n    dec = [cat for cat in dec if cat not in ['id','name'] and len(cat)<= 2]\n    spoken_languages_list +=dec\n\ngenres_list = list(set(genres_list))\nkeywords_list = list(set(keywords_list))\nproduction_companies_list = list(set(production_companies_list))\nproduction_countries_list = list(set(production_countries_list))\nspoken_languages_list = list(set(spoken_languages_list))\n\n\nmovies_data.release_date = pd.to_datetime(movies_data.release_date)\n\nmovies_data['Day_Of_Week'] = movies_data.release_date.apply(lambda x: x.weekday())\nmovies_data['Month'] = movies_data.release_date.apply(lambda x: x.month)\nmovies_data['Year'] = movies_data.release_date.apply(lambda x: x.year)\nmovies_data.drop(columns=['release_date'],inplace=True)","6bec9c23":"movies_data = movies_data.dropna()","d0162f7f":"info = movies_data.describe()\ninfo.loc['skew'] = movies_data.skew()\ninfo.loc['kurt'] = movies_data.kurt()\ninfo","2fd816e9":"average_year = movies_data.groupby(by='Year').mean().reset_index()\naverage_year = average_year.drop(columns=['id','Day_Of_Week','Month'])\n\nfig,axs = plt.subplots(2,3,'all')\nfig.set_figwidth(25)\nfig.set_figheight(15)\nc,r=0,0\nfor col in average_year.columns[1:]:\n    sns.lineplot(data=average_year,x='Year',y=col,ax=axs[r,c],label='Mean '+col)\n    axs[r,c].set_title('Average '+col+' over the years',fontsize=15)\n    if c==2:\n        r+=1\n        c=0\n    else:\n        c+=1","63857a35":"from matplotlib.ticker import FormatStrFormatter\nplt.figure(figsize=(20,11))\nax = sns.kdeplot(movies_data['budget'],label='Budget')\nax = sns.kdeplot(movies_data['revenue'],label='Revenue')\nax.xaxis.set_major_formatter(FormatStrFormatter('%.1f'))\nax.set_title('Movie Budget Over Revenue Distribution',fontsize=19)","fca5fda2":"plt.figure(figsize=(20,11))\nax = sns.distplot(movies_data['popularity'])\nax.set_title('Movie Popularity Distribution',fontsize=19)","407cc63f":"movies_data = movies_data.drop(movies_data.query('Year == 2017').index)\nmovies_data = movies_data.drop(movies_data.query('revenue == 0').index)\nmovies_data = movies_data.drop(movies_data.query('budget == 0').index)\nmovies_data.revenue = np.log(movies_data.revenue)\nmovies_data.budget = np.log(movies_data.budget)\nmovies_data = movies_data.query('revenue > 10')\nmovies_data = movies_data.query('budget > 10')\n","28ad40bb":"from matplotlib.ticker import FormatStrFormatter\nplt.figure(figsize=(20,11))\nax = sns.kdeplot(movies_data['budget'],label='Budget')\nax = sns.kdeplot(movies_data['revenue'],label='Revenue')\nax.xaxis.set_major_formatter(FormatStrFormatter('%.1f'))\nax.set_title('Movie Budget Over Revenue Distribution After Normallization And Outlier Removal',fontsize=19)","4304b5aa":"from sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nvectorizer = TfidfVectorizer()\n\ntagline = vectorizer.fit_transform(movies_data.tagline)\ntagline\n\ntsvd = TruncatedSVD(n_components=900)\ntagline = tsvd.fit_transform(tagline)","80d5d60e":"cum_sum = np.cumsum(tsvd.explained_variance_ratio_)\nplt.figure(figsize=(20,11))\nax= sns.lineplot(x=np.arange(0,len(cum_sum)),y=cum_sum)\nax.set_title('Cumulative Variance Ratio',fontsize=20)\nax.set_xlabel('Number Of Components',fontsize=16)\nax.set_ylabel('Explained Variance',fontsize=16)\nplt.show()","14ef1eec":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\n\ndef RMSE(Y,Y_HAT):\n    return np.sqrt(mean_squared_error(Y,Y_HAT))","3864bcbc":"tag_df =pd.DataFrame(tagline)\n\ntrain_x,test_x,train_y,test_y = train_test_split(tag_df,movies_data.revenue)\nrf_pipe =Pipeline(steps=[('model',LinearRegression())])\nrf_pipe.fit(train_x,train_y)\npredictions= rf_pipe.predict(test_x)","b10ccb39":"print('Test Set RMSE: ',RMSE(predictions,test_y))","6cd60b42":"rf_pipe =Pipeline(steps=[('model',LinearRegression())])\nrf_pipe.fit(tag_df,movies_data.revenue)\npredictions= rf_pipe.predict(tag_df)\nprint('Entire Data RMSE: ',RMSE(predictions,movies_data.revenue))","2eddd042":"plt.figure(figsize=(20,11))\nax = sns.lineplot(x=np.arange(0,len(movies_data.revenue)),y=movies_data.revenue,label='Actual Revenue')\nax = sns.lineplot(x=np.arange(0,len(movies_data.revenue)),y=predictions,label='Predicted Revenue')\nax.set_xlabel('Sample Number',fontsize=16)\nax.set_ylabel('Log(Revenue)',fontsize=16)\nax.set_title(\"Prediction VS Real Values\",fontsize=20)\nplt.show()","06ee3fd2":"plt.figure(figsize=(20,11))\nax = sns.distplot(movies_data.revenue,label='Actual Revenue')\nax = sns.distplot(predictions,label='Predicted Revenue')\nax.set_xlabel('Log(Revenue)',fontsize=16)\nax.set_ylabel('Density',fontsize=16)\nax.set_title(\"Prediction VS Real Values\",fontsize=20)\nplt.plot([np.mean(predictions),np.mean(predictions)],[0,0.7],c='r',label='Prediction Mean')\nplt.plot([np.mean(predictions),np.mean(movies_data.revenue)],[0,0.5],c='g',label='Actual Values Mean')\nplt.legend(prop={'size':18})\n\n\nplt.show()","f26cf49f":"# Preprocessing And Feature Engineering","52f1de25":"# Normallization Of Skewed Distributions with Outliers","3e90c099":"### Judging by our statistics table above we can clearly see that we have an issue with some outliers which is no surprise considering the variety of the movies in the dataset.Most of our features are skewed more negatively than positively and the kurtosis value is high as well with some features.","13a66255":"### We will use the first 900 vectors from our Tfidf transformation which explains more than 80% of the variance in or tag-line Tfidf matrix.\n","c4eef10f":"# Model Selection And Evaluation","6771ea13":"# Short EDA","ea7de9b1":"# Tfidf Vectorization And SVD Decomposition","a22f112e":"### Dictionary lists were create in case we will needed to expand our feature space and include additional text featres.","227d78a4":"![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/11595\/logos\/header.png?t=2018-11-01-07-04-33)\n\n# $\\text{Introduction}$\n\nGreetings to all my fellow Kagglers!\nAs we all know every movie producer and company besides artistic goals thinks mainly of revenue. \nHow much money will I make after production?\nWill my movie become a hit?\nMany important features make up a great movie and I think it's too much for one short Kernel to cover all those features and the amount of contribution they bring to a good movie.\nThe following short Kernel will try to answer a simple question,\nCan the movie tag-line be used as a predictor of revenue?\n\nThe idea was derived from a dialog between me and my colleague where we discussed the fact that many popular movies share the same 'impact' when it comes down to tag-lines.\nIf it was true and the tag-line can indeed be used as a fair estimate of revenue, can we help movie producers 'tune' their movie tag-line in order to make it more appealing to people maybe more 'catchy' that way potentially increasing the number of viewers and of course the overall expected revenue.\n\n","04c1e441":"### We can see that over the years the changes in our features are with high variance and we cannot see any strong trend on which we can build cutting intuition ","60509562":"### We wont be dealing with the small amount of missing values in our dataset and just drop them."}}