{"cell_type":{"0b19c219":"code","87f584d3":"code","de1dbca5":"code","54f85258":"code","376da975":"code","083b3e6c":"code","65c3e60c":"code","5bc1c0b8":"code","23ca1714":"code","45580e8e":"code","a24be583":"code","b85688c3":"code","baf84dd2":"code","deee4042":"code","b2eeb5eb":"code","8cc7ed50":"code","3f7a81b1":"code","07ae53ff":"code","c184d654":"code","c9fbbb06":"code","24d3d912":"code","7e541b8d":"code","dce3f616":"code","dfed8077":"code","27a559a9":"code","85d6ade0":"code","8ab73473":"code","a3440e96":"code","4d1019df":"code","a8e82359":"code","1f4887dd":"code","74bfbb1c":"code","0a1140ab":"markdown","e267bef1":"markdown","cf1245cc":"markdown","f9cdb0ed":"markdown","fcffa576":"markdown","a54265dc":"markdown","994b9013":"markdown","7e6023a1":"markdown","4c090a8f":"markdown","d055ae4f":"markdown","1512ea1f":"markdown","53da8ffd":"markdown","cbb8dd81":"markdown"},"source":{"0b19c219":"import pandas as pd\nimport numpy as np","87f584d3":"my_csv_file_location = '..\/input\/hotel-booking\/hotel_booking.csv'\ndf = pd.read_csv(my_csv_file_location)","de1dbca5":"df.head()\n","54f85258":"df.tail()","376da975":"df.describe()","083b3e6c":"# way 1\nmissing_datas = df.isnull().sum()\n\nprint(missing_datas)","65c3e60c":"# way 2\nmax_value = missing_datas.max()\nmax_value_title = missing_datas.idxmax()\n\nprint(f'column \"{max_value_title}\" with ({max_value}) have most missing values')","5bc1c0b8":"# way 3\nmax_value = -1\nmax_value_title = '-1'\n\nfor title in missing_datas.index:\n    value = missing_datas[title]\n    if max_value < value:\n        max_value = value\n        max_value_title = title\n        \nprint(f'column \"{max_value_title}\" with ({max_value}) have most missing values')","23ca1714":"# way 4\nmissing_datas_info = dict()\n\nfor column in df.columns:\n    missing_data_count = 0\n    \n    for value in df[column]:\n        \n        if value is np.NaN :\n            missing_data_count+=1\n    \n    missing_datas_info[column] = missing_data_count\n    \nprint(missing_datas_info)\nprint(max(missing_datas_info.items(),key = lambda item:item[1]))","45580e8e":"# way 1\ndf.drop('company',axis=1,inplace=False)","a24be583":"# way 2\ndel df['company']\ndf","b85688c3":"# way 1 \ndf.groupby('country').size()","baf84dd2":"# way 2\ncountry_info = dict()\n\ncolumn = 'country'\n\nfor country in df[column]:\n    if country not in country_info:\n        country_info[country] = 0\n        \n    country_info[country] += 1\n    \nprint(country_info)","deee4042":"# way 3\nfrom collections import Counter\n\nCounter(df['country'])","b2eeb5eb":"# way 1\ncolume = 'adr'\nmax_value = df[colume].max()\nindex_max_value = df[colume].idxmax()\nindex_name = df['name'][index_max_value]\n\nprint(f'\"{index_name}\" with index({index_max_value}) have maximum value \"{max_value}\" in colume \"{colume}\"')","8cc7ed50":"# way 2\nmax_adr = 0\nmax_adr_index = -1\nmax_adr_person_name = '-1'\ncolume = 'adr'\n\nfor index,adr in enumerate(df[colume]):\n    if adr > max_adr:\n        max_adr = adr\n        max_adr_index = index\n        max_adr_person_name = df['name'][index]\n\nprint(f'\"{max_adr_person_name}\" with index({max_adr_index}) have maximum value \"{max_adr}\" in colume \"{colume}\"')","3f7a81b1":"# way 1\nmean = round(df['adr'].mean(),2)\n\nprint(mean)","07ae53ff":"# way 2\nmean = df.describe()['adr']['mean']\nmean = int(mean * 100) \/ 100\n\nprint(mean)","c184d654":"# way 3\nmean = 0\ntotal_count = 0\n\ncolume = 'adr'\n\nfor index,adr in enumerate(df[colume]):\n    mean = (mean * total_count + adr) \/ (total_count + 1) \n    total_count += 1\n\nmean = (\"%.2f\")  % (mean)\nprint(mean)","c9fbbb06":"# way 4\ncolume = 'adr'\ntotal = 0\n\nfor adr in df[colume]:\n    total += adr\n\nmean = total \/ len(df[colume])\nmean = round(mean,2)\n\nprint(mean)","24d3d912":"# way 1\ntotal = df['stays_in_weekend_nights'] + df['stays_in_week_nights']\n\nmean = total.mean()\nmean = round(mean,2)\n\nprint(mean)","7e541b8d":"# way 2\nmean = 0\ntotal_count=0\n\nfor index,name in enumerate(df['name']):\n    new_value = df['stays_in_weekend_nights'][index] + df['stays_in_week_nights'][index]\n    mean = (mean * total_count + new_value) \/ (total_count + 1) \n    total_count+=1\n\nmean = round(mean,2)\nprint(mean)","dce3f616":"# way 1\ntarget_indexes =  df['total_of_special_requests'] >= 5\n\nfor target_index,is_target in enumerate(target_indexes):\n\n    if is_target:\n        print(f\"'{df['name'][target_index]}' have ({df['total_of_special_requests'][target_index]}) Special Requests\")","dfed8077":"# way 2\n\nfor index,total_of_special_requests in enumerate(df['total_of_special_requests']):\n    \n    if total_of_special_requests >= 5:\n        print(f\"'{df['name'][index]}' have ({total_of_special_requests}) Special Requests\")","27a559a9":"# way 1\ndf.groupby('name').size()","85d6ade0":"# way 2\ndf.pivot_table(index=['name'], aggfunc='size')","8ab73473":"# way 3\nfrom collections import Counter\n\nname_with_count = Counter(df['name'])\n# print(name_with_count)","a3440e96":"# way 4\nname_with_count = dict()\n\nfor name in df['name']:\n    if name not in name_with_count:\n        name_with_count[name] = 0\n        \n    name_with_count[name] += 1\n    \n# print(name_with_count)","4d1019df":"# way 1\ndf['children'] = df['children'].fillna(0)\ndf['babies'] = df['babies'].fillna(0)\n\ndf['total_young_age'] = df['children'] + df['babies']\n\ndf.sort_values('total_young_age')[['name','total_young_age']]","a8e82359":"# way 2\ntotal_young_age = dict()\n\nfor index,name in enumerate(df['name']):\n    total_young_age[name] = df['children'][index] +df['babies'][index]\n    \n# print(total_young_age)","1f4887dd":"# way 1\ndf['phone-code'] = df['phone-number'].apply(lambda phone:phone.split('-')[0])\n\ndf.groupby('phone-code').size().sort_values(ascending=False)","74bfbb1c":"# way 2\nphone_repeats = dict()\n\nfor phone in df['phone-number']:\n    phone_code = phone.split('-')[0]\n    \n    if phone_code not in phone_repeats:\n        phone_repeats[phone_code] = 0\n        \n    phone_repeats[phone_code] +=1\n    \nphone_repeats = sorted(phone_repeats.items(), key=lambda phone_repeat: phone_repeat[1])    \nprint(phone_repeats[:3])","0a1140ab":"#### 8- \u0645\u06cc\u0627\u0646\u06af\u06cc\u0646 \u06a9\u0644 ADR \u0647\u0627 \u0631\u0627 \u0645\u0634\u062e\u0635 \u06a9\u0646\u06cc\u062f. (\u062a\u0627 \u062f\u0648\u0631 \u0631\u0642\u0645 \u0627\u0639\u0634\u0627\u0631)","e267bef1":"#### 5- \u0633\u062a\u0648\u0646 'company' \u0631\u0627 \u0627\u0632 \u062f\u06cc\u062a\u0627\u0641\u0631\u06cc\u0645 \u062d\u0630\u0641 \u06a9\u0646\u06cc\u062f.","cf1245cc":"#### 2 - \u0627\u0637\u0644\u0627\u0639\u0627\u062a \u067e\u0627\u06cc\u0647 \u0627\u06cc \u062f\u06cc\u062a\u0627\u0633\u062a \u0631\u0627 \u0628\u0631\u0631\u0633\u06cc \u0646\u0645\u0627\u06cc\u06cc\u062f","f9cdb0ed":"#### 1- \u062f\u06cc\u062a\u0627\u0633\u062a \u0631\u0627 \u0628\u062e\u0648\u0627\u0646\u06cc\u062f","fcffa576":"#### 9 - \u0645\u06cc\u0627\u0646\u06af\u06cc\u0646 \u062a\u0639\u062f\u0627\u062f \u0634\u0628 \u0647\u0627\u06cc \u0627\u0642\u0627\u0645\u062a \u0631\u0627 \u0645\u0634\u062e\u0635 \u0646\u0645\u0627\u06cc\u06cc\u062f (\u062a\u0627 \u062f\u0648 \u0631\u0642\u0645 \u0627\u0639\u0634\u0627\u0631)\n(\u0645\u0634\u0627\u0628\u0647 \u0633\u0648\u0627\u0644 \u0642\u0628\u0644\u06cc)","a54265dc":"#### 11- \u0646\u0627\u0645 \u0648 \u0622\u062f\u0631\u0633 \u0627\u06cc\u0645\u06cc\u0644 \u0627\u0641\u0631\u0627\u062f\u06cc \u06a9\u0647 5 \u062a\u0627 special request \u062f\u0627\u0634\u062a\u0646\u062f \u0631\u0627 \u0645\u0634\u062e\u0635 \u0646\u0645\u0627\u06cc\u06cc\u062f.","994b9013":"#### 7- \u0646\u0627\u0645 \u0641\u0631\u062f\u06cc \u06a9\u0647 \u0628\u06cc\u0634\u062a\u0631\u06cc\u0646 \u067e\u0631\u062f\u0627\u062e\u062a\u06cc )ADR(Average Daily Rate \u0631\u0627 \u062f\u0627\u0631\u062f \u0645\u0634\u062e\u0635 \u06a9\u0646\u06cc\u062f. \u0645\u0628\u0644\u063a \u0622\u0646 \u0686\u0642\u062f\u0631 \u0627\u0633\u062a\u061f","7e6023a1":"#### 6- \u0628\u06cc\u0634\u062a\u0631\u06cc\u0646 \u0645\u0633\u0627\u0641\u0631\u0627\u0646 \u0627\u0632 \u06a9\u062f\u0627\u0645 \u06a9\u0634\u0648\u0631\u0647\u0627 \u0647\u0633\u062a\u0646\u062f\u061f 5 \u06a9\u0634\u0648\u0631 \u0646\u062e\u0633\u062a \u0631\u0627 \u0645\u0634\u062e\u0635 \u06a9\u0646\u06cc\u062f.","4c090a8f":"#### 12 - \u0627\u0641\u0631\u0627\u062f\u06cc \u06a9\u0647 \u0647\u0645\u0631\u0627\u0647 \u0628\u0627 \u0628\u06cc\u0634\u062a\u0631\u06cc\u0646 \u062a\u0639\u062f\u0627\u062f babies \u0648 children \u0647\u062a\u0644 \u0631\u0632\u0631\u0648 \u06a9\u0631\u062f\u0647 \u0627\u0646\u062f \u0631\u0627 \u0645\u0634\u062e\u0635 \u06a9\u0646\u06cc\u062f.","d055ae4f":"#### 4- \u0622\u06cc\u0627 \u062f\u0627\u062f\u0647 \u06af\u0645\u0634\u062f\u0647 (missing data) \u0648\u062c\u0648\u062f \u062f\u0627\u0631\u062f\u061f \u0627\u06af\u0631 \u062c\u0648\u0627\u0628 \u0645\u062b\u0628\u062a \u0627\u0633\u062a\u060c \u06a9\u062f\u0627\u0645 \u0633\u062a\u0648\u0646 \u0628\u06cc\u0634\u062a\u0631\u06cc\u0646 \u062a\u0639\u062f\u0627\u062f \u062f\u0627\u062f\u0647 \u06af\u0645\u0634\u062f\u0647 \u0631\u0627 \u062f\u0627\u0631\u062f\u061f","1512ea1f":"## \u062f\u0648\u0645\u06cc\u0646 \u0628\u0648\u062a \u06a9\u0645\u067e \u0647\u0648\u0634 \u0645\u0635\u0646\u0648\u0639\u06cc \u0641\u06cc\u0644\u0627\u06af\u0631 - \u062a\u0645\u0631\u06cc\u0646 \u062c\u0644\u0633\u0647 \u06f2\nMahdi Ghaemi :)","53da8ffd":"#### 11 - \u0628\u06cc\u0634\u062a\u0631\u06cc\u0646 \u0641\u0631\u0627\u0648\u0627\u0646\u06cc \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc \u0645\u0631\u0628\u0648\u0637 \u0628\u0647 \u0686\u0647 \u0646\u0627\u0645 \u0647\u0627\u06cc\u06cc \u0647\u0633\u062a\u061f (5 \u0641\u0627\u0645\u06cc\u0644 \u067e\u0631\u062a\u0639\u062f\u0627\u062f \u0631\u0627 \u0645\u0634\u062e\u0635 \u06a9\u0646\u06cc\u062f)","cbb8dd81":"#### 13- \u06a9\u062f \u062a\u0644\u0641\u0646 \u0645\u0646\u0627\u0637\u0642\u06cc \u06a9\u0647 \u0628\u06cc\u0634\u062a\u0631\u06cc\u0646 \u0631\u0632\u0631\u0648 \u0631\u0627 \u062f\u0627\u0634\u062a\u0647 \u0627\u0646\u062f\u060c \u0645\u0634\u062e\u0635 \u06a9\u0646\u06cc\u062f (3 \u06a9\u062f \u067e\u0631\u062a\u06a9\u0631\u0627\u0631)"}}