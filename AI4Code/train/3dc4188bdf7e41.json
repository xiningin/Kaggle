{"cell_type":{"ebba56b6":"code","2797a372":"code","91264fc6":"code","5f2b8ec9":"code","47f9051a":"code","e6edf0d2":"code","bbdda837":"code","aecab200":"code","19ff3c25":"code","94c2f9c9":"code","3254cb91":"code","97f455df":"code","5cfd7e53":"code","be5d9a85":"code","5e4952a1":"code","1303f293":"markdown","e34f1811":"markdown","badf1a37":"markdown","f1ab0a4a":"markdown","acefde1e":"markdown","38e0b35e":"markdown","74159807":"markdown","9507729d":"markdown","78721ed7":"markdown","1b7b5d47":"markdown","e74c6a2f":"markdown","17ad7f24":"markdown","0f1c627c":"markdown","f3a1be51":"markdown"},"source":{"ebba56b6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport matplotlib.image as mpimg\n# Any results you write to the current directory are saved as output.\nfrom keras import backend as K\nfrom keras.preprocessing import image                  \n\n# Any results you write to the current directory are saved as output.","2797a372":"class1=os.listdir('..\/input\/1\/1')\nclass2=os.listdir('..\/input\/2\/2')\nclass3=os.listdir('..\/input\/3\/3')\nclass4=os.listdir('..\/input\/4\/4')\nclass5=os.listdir('..\/input\/5\/5')\nclass6=os.listdir('..\/input\/6\/6')","91264fc6":"def load_image(path):\n    img = image.load_img(path,target_size=(224,224))\n    return image.img_to_array(img)","5f2b8ec9":"classes=[class1,class2,class3,class4,class5,class6]\ndef index_helper(i):\n    return sum([len(k) for k in classes[:i]])\nall_images_len=sum([len(i) for i in classes])\nall_images=np.zeros([all_images_len,224,224,3])\nfor i in range(6):\n    for j in range(len(classes[i])):\n        all_images[j+index_helper(i),:,:,:]=load_image('..\/input\/'+str(i+1)+'\/'+str(i+1)+'\/'+classes[i][j])\n","47f9051a":"all_classes=np.zeros(all_images_len)\nall_classes[:index_helper(1)]=1\nall_classes[index_helper(1):index_helper(2)]=2\nall_classes[index_helper(2):index_helper(3)]=3\nall_classes[index_helper(3):index_helper(4)]=4\nall_classes[index_helper(4):index_helper(5)]=5\nall_classes[index_helper(5):index_helper(6)]=6\nprint(np.unique(all_classes,return_counts=True))\nprint([len(i) for i in classes])\n","e6edf0d2":"processed_images=all_images\/255","bbdda837":"import gc\ndel all_images\ngc.collect()","aecab200":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(processed_images, all_classes, stratify=all_classes,test_size=0.20, random_state=42)\n","19ff3c25":"del processed_images\ngc.collect()","94c2f9c9":"from keras import layers\nfrom keras.layers import Input, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D\nfrom keras.layers import AveragePooling2D, MaxPooling2D, Dropout, GlobalMaxPooling2D, GlobalAveragePooling2D\nfrom keras.models import Model","3254cb91":"Y_train=Y_train-1\nY_test=Y_test-1","97f455df":"Y_train_hot=np.eye(6)[Y_train.astype(int)]\nY_test_hot=np.eye(6)[Y_test.astype(int)]","5cfd7e53":"X_in=Input(X_train.shape[1:])\nx = ZeroPadding2D((1,1))(X_in)\nx = Conv2D(64, 3, 3, activation='relu')     (x)\nx = ZeroPadding2D((1,1))                           (x)\nx = Conv2D(64, 3, 3, activation='relu')     (x)\nx = MaxPooling2D((2,2), strides=(2,2))             (x)\n\nx = ZeroPadding2D((1,1))                           (x)\nx = Conv2D(128, 3, 3, activation='relu')    (x)\nx = ZeroPadding2D((1,1))                           (x)\nx = Conv2D(128, 3, 3, activation='relu')    (x)\nx = MaxPooling2D((2,2), strides=(2,2))             (x)\n\nx = ZeroPadding2D((1,1))                           (x)\nx = Conv2D(256, 3, 3, activation='relu')    (x)\nx = ZeroPadding2D((1,1))                           (x)\nx = Conv2D(256, 3, 3, activation='relu')    (x)\nx = ZeroPadding2D((1,1))                           (x)\nx = Conv2D(256, 3, 3, activation='relu')    (x)\nx = MaxPooling2D((2,2), strides=(2,2))             (x)\n\nx = ZeroPadding2D((1,1))                           (x)\nx = Conv2D(512, 3, 3, activation='relu')    (x)\nx = ZeroPadding2D((1,1))                           (x)\nx = Conv2D(512, 3, 3, activation='relu')    (x)\nx = ZeroPadding2D((1,1))                           (x)\nx = Conv2D(512, 3, 3, activation='relu')    (x)\nx = MaxPooling2D((2,2), strides=(2,2))             (x)\n\nx = ZeroPadding2D((1,1))                           (x)\nx = Conv2D(512, 3, 3, activation='relu')    (x)\nx = ZeroPadding2D((1,1))                           (x)\nx = Conv2D(512, 3, 3, activation='relu')    (x)\nx = ZeroPadding2D((1,1))                           (x)\nx = Conv2D(512, 3, 3, activation='relu')    (x)\nx = MaxPooling2D((2,2), strides=(2,2))             (x)\n\nx = Flatten()                                      (x)\nx = Dense(100, activation='relu')                 (x)\nx = Dropout(0.5)                                   (x)\nx = Dense(50, activation='relu')                 (x)\nx = Dropout(0.5)                                   (x)\nx = Dense(6, activation='softmax')                 (x)\nmodel=Model(inputs=X_in,outputs=x,name=\"meow\")","be5d9a85":"model.compile(optimizer=\"adam\",loss=\"binary_crossentropy\",metrics=['accuracy'])\nmodel.fit(x=X_train,y=Y_train_hot,epochs=4,batch_size=20)\n","5e4952a1":"model.evaluate(x=X_test, y=Y_test_hot)","1303f293":"Free a not needed variable from memorey ","e34f1811":"Here we the training starts, Keras.fit will shuffle the data by default.","badf1a37":"Classes are represented  numric values  1-6,  rerepresenting the classes as 0-5 would help later so the classes could match the indecies for the one hot vectore representation.","f1ab0a4a":"Setting the labels array, Y.","acefde1e":"Importing the needed Keras layres\/functions to create the VGG16 model\n","38e0b35e":"Evaluting Model the test data, gave the same for training which a good result meaning our model is not overfitting.","74159807":"Split the data to train\/test ","9507729d":"Loading Images path for each class.\n\nStoring the file names of each class in a list\n","78721ed7":"Normalizing the data","1b7b5d47":"A helper function to read an image given the path, then returing it as ndarray.","e74c6a2f":"Looping through the directory of each category, reading the images and storing them in one array.","17ad7f24":"Deleting variables to free memory","0f1c627c":"Building the Model  Archticutuire:\nOne verfication I made on the VGG16 standard model is that I reduced the last three dense network sizes to 100,50,6 respectively, the last should be 6 anyway because the model suppose to detect 6 classes.  ","f3a1be51":"Reshaping the Y train and test matrices with one hot vector so Keras could accept it"}}