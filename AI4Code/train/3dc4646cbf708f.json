{"cell_type":{"f4686372":"code","74112714":"code","b4819b37":"code","1fe46fe7":"code","ebe747c7":"code","9fb981cb":"code","8a528768":"code","a406c6f2":"code","cfc9deef":"code","07979add":"code","d16f8365":"code","cec38929":"code","84bd4aa0":"code","4a4eb3f5":"code","58d0e42b":"code","7b193e2a":"code","4a53c805":"code","595290ce":"code","ec711f29":"code","342c56f4":"code","adba9292":"code","e5d3b48c":"code","367339a9":"code","4291d8f0":"markdown","1b89452e":"markdown","7f3fd1b6":"markdown","d0eeca3b":"markdown","b42a5857":"markdown","8359cd4c":"markdown","dfd91e73":"markdown","ce3fff97":"markdown","fa403fc8":"markdown","3aaaaa23":"markdown"},"source":{"f4686372":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport datetime as dt\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import MinMaxScaler\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\ndf_ = pd.read_csv(\"..\/input\/online-retail-ii-csv-new\/online_retail_II.csv\")","74112714":"df = df_.copy()","b4819b37":"df.shape","1fe46fe7":"df.dtypes","ebe747c7":"df.head()","9fb981cb":"df[[\"Quantity\", \"Price\"]].describe().T","8a528768":"df[[\"Quantity\", \"Price\"]].quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T","a406c6f2":"# Missing Values\ndf.isnull().sum()","cfc9deef":"df[\"Description\"].fillna(\"Missing\", inplace= True)\n\n# Now the missing values are only in Customer ID column. Customer ID is essential to segment \n# the customers, we drop these missing values.\ndf.dropna(inplace= True)\n\n# The invoices that contain C letter in the Invoice column are  the cancelled ones. \n# we remove them from the dataset\ndf = df[~df[\"Invoice\"].str.contains(\"C\", na= False)]\n\n# The values in the price column are the unit prices of the products, \n# we need the total price per invoice.\ndf[\"TotalPrice\"] = df[\"Price\"] * df[\"Quantity\"]","07979add":"# the data is old, so i choose today's date as: 2011-12-11, to get reasonable recency values.\ntoday_date = dt.datetime(2011, 12, 11)","d16f8365":"# the type of the InvoiceDate column is object, i convert it to datetime:\ndf[\"InvoiceDate\"]= pd.to_datetime(df[\"InvoiceDate\"])","cec38929":"df_rf = df.groupby(\"Customer ID\").agg({ \"InvoiceDate\" : lambda date : (today_date - date.max()).days ,\n                                \"Invoice\" : lambda invoice : invoice.nunique() })","84bd4aa0":"df_rf.columns = [\"Recency\", \"Frequency\"]\ndf_rf.head()","4a4eb3f5":"df_rf[\"Recency_Score\"] = pd.qcut(df_rf[\"Recency\"], 5, labels= [5,4,3,2,1])\ndf_rf[\"Frequency_Score\"] = pd.qcut(df_rf[\"Frequency\"].rank(method = \"first\"), 5 , labels= [1,2,3,4,5])\n\ndf_rf[\"RF_Score\"]= (df_rf[\"Recency_Score\"].astype(str) + df_rf[\"Frequency_Score\"].astype(str))\ndf_rf.head()","58d0e42b":"# RF naming:\nseg_map = {\n    r'[1-2][1-2]': 'hibernating',\n    r'[1-2][3-4]': 'at_Risk',\n    r'[1-2]5': 'cant_loose',\n    r'3[1-2]': 'about_to_sleep',\n    r'33': 'need_attention',\n    r'[3-4][4-5]': 'loyal_customers',\n    r'41': 'promising',\n    r'51': 'new_customers',\n    r'[4-5][2-3]': 'potential_loyalists',\n    r'5[4-5]': 'champions'\n}\n\n# Segmantation according to RF scores\ndf_rf[\"RF_Segment\"] = df_rf[\"RF_Score\"].replace(seg_map, regex= True)\n\ndf_rf.head()","7b193e2a":"# we scale these values, in order to evaluate fairly and to use k-means\ndf_to_be_scaled = df_rf[[\"Recency\", \"Frequency\"]]\nsc = MinMaxScaler((0, 1))\ndf_rf_scaled = sc.fit_transform(df_to_be_scaled)\ndf_rf_scaled[0:5]","4a53c805":"# Creating the Clusters\nkmeans = KMeans(n_clusters= 10, random_state= 41).fit(df_rf_scaled)\nkmeans.cluster_centers_\n\nclusters = kmeans.labels_\n\nclusters","595290ce":"pd.DataFrame({\"Customer ID\": df_rf.index, \"Segments\": clusters})","ec711f29":"df_rf[\"Kmeans_Segment\"] = clusters\n# in order to start segments from 1 not 0:\ndf_rf[\"Kmeans_Segment\"] = df_rf[\"Kmeans_Segment\"] + 1\ndf_rf.head()","342c56f4":"df_rf[\"Kmeans_Segment\"].value_counts()","adba9292":"df_rf[\"RF_Segment\"].value_counts()","e5d3b48c":"# in order to get the mean values, convert the values to integer type.\ndf_rf[\"Recency_Score\"] = df_rf[\"Recency_Score\"].astype(int)\ndf_rf[\"Frequency_Score\"] = df_rf[\"Frequency_Score\"].astype(int)\n\n# to get the mode of RF_Segment column, we need to import stats from scipy\nfrom scipy import stats\ndf_rf.groupby(\"Kmeans_Segment\").agg({\"Recency_Score\" : [\"min\", \"max\",\"mean\",\"count\"], \n                                     \"Frequency_Score\": [\"min\", \"max\",\"mean\",\"count\"], \"RF_Segment\" : stats.mode })","367339a9":"df_rf.groupby(\"RF_Segment\").agg({\"Recency_Score\" : [\"min\", \"max\",\"mean\",\"count\"], \n                                     \"Frequency_Score\": [\"min\", \"max\",\"mean\",\"count\"], \"Kmeans_Segment\" : stats.mode })","4291d8f0":"**CUSTOMER SEGMENTATION USING K-MEANS CLUSTERING METHOD:**","1b89452e":"Summary:\nWe performed customer segmentation using K-means and RFM Analysis methods. \nWe identified 10 segments for both.\nAccording to the Recency and Frequency values, we have seen that customers with similar purchasing \nbehavior, are mostly in similar segments, but the two methods also differ in many respects.\n\nFor example, with the number of observations of 1524,the most frequent one, the hibernating segment appears to be scattered across 5 separate K-means clusters. Mostly in cluster 2, but this cluster also includes customers with a frequency score of 5. The clusters 3 and 5 are more homogeneous than 2.\n\nThe can't loose, new customers and promising segments, with the least number of customers in RFM Analysis, are not clearly observed in a cluster. Can't loose segment is mostly in cluster 6; Customers in the new customers and promising segments are mostly in segment 1.\n\nCustomers in the need attention and loyal customers segments seem to be scattered in clusters 4 and 7.\n\nThe champions class is mostly observed in clusters 1 (98%) and 9 (43%).\n\nTo sum up, We created 10 different segments using different methods and tried to observe their differences and similarities.","7f3fd1b6":"I only focus on recency and freequency values.\n\nLet\u2019s calculate the metrics we need to group the data over the Customer ID. I include only recency and frequency metrics.\n1. Customer\u2019s Recency:\nToday\u2019s date (or a few days after the latest date in the data, if the data is old) - Customer\u2019s last purchase date\n2. Customer\u2019s Frequency:\n Total number of unique invoices\n","d0eeca3b":"**COMPARING THE METHODS**","b42a5857":"# **Customer Segmentation using RFM Analysis and K-means Clustering Methods:**\n\n**Comparison between RFM and K-Means (Data set: ONLINE RETAIL II- 2010_2011)**\n\n**Description of the data set:**\nThis Online Retail II data set contains all the transactions occurring for a UK-based and registered, non-store online retail between 01\/12\/2009 and 09\/12\/2011.The company mainly sells unique all-occasion gift-ware. Many customers of the company are wholesalers.\n\n\n**Attribute Information:**\n\nInvoiceNo: Invoice number. Nominal. A 6-digit integral number uniquely assigned to each transaction. \n\nIf this code starts with the letter 'c', it indicates a cancellation.\n\nStockCode: Product (item) code. Nominal. A 5-digit integral number uniquely assigned to each distinct product.\n\nDescription: Product (item) name. Nominal.\n\nQuantity: The quantities of each product (item) per transaction. Numeric.\n\nInvoiceDate: Invice date and time. Numeric. The day and time when a transaction was generated.\n\nUnitPrice: Unit price. Numeric. Product price per unit in sterling (\u00c2\u00a3).\n\nCustomerID: Customer number. Nominal. A 5-digit integral number uniquely assigned to each customer.\n\nCountry: Country name. Nominal. The name of the country where a customer resides.\n\n","8359cd4c":"'champions'Considering the mean values and the RF_score frequency, we can say that they are clustered as follows:\n\n1  : 'champions'\n\n2  : 'hibernating'\n\n3  : 'hibernating'\n\n4  : 'need_attention', 'loyal_customers'\n\n5  : 'hibernating'\n\n6  : 'at_Risk'\n\n7  : 'need_attention', 'loyal_customers'\n\n8  : 'hibernating'\n\n9  : 'champions'\n\n10 : 'hibernating'","dfd91e73":"**UNDERSTANDING DATA:**","ce3fff97":"**CUSTOMER SEGMENTATION USING RFM ANALYSIS:**","fa403fc8":"**DATA PREPROCESSING**","3aaaaa23":"We have the RF segments, in order to compare with, we will compose the K-means segments too."}}