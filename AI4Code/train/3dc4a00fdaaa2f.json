{"cell_type":{"2494674d":"code","c559d895":"code","0eb0566b":"code","789f76d4":"code","cfcb5fee":"code","49e96c52":"code","da358b0a":"code","77c63ef9":"code","f0a3728c":"code","e354aef2":"code","5fd1fb85":"markdown","fd4b42cc":"markdown","b6614e27":"markdown","4f535a96":"markdown","29c3e05a":"markdown","99915089":"markdown","61885b74":"markdown","8507e6e6":"markdown","c781201c":"markdown","19fbef66":"markdown","07f34221":"markdown"},"source":{"2494674d":"import numpy as np\nimport pandas as pd \nfrom fastai.tabular.all import *","c559d895":"train_df = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/train.csv', index_col='id')\ntest_df  = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/test.csv',  index_col='id')\ndisplay('train_df')\ndisplay( train_df )\ndisplay('test_df')\ndisplay( test_df )","0eb0566b":"splits = RandomSplitter(valid_pct=0.01)(range_of(train_df))\ndls = TabularDataLoaders.from_csv(\n    '..\/input\/tabular-playground-series-jan-2021\/train.csv', \n    y_names    = \"target\",\n    cont_names = [ f'cont{n}' for n in range(1,14+1) ],\n    cat_names  = [],\n    procs = [\n        # Categorify, \n        FillMissing, \n        Normalize\n    ],\n    valid_idx = splits[1]\n)","789f76d4":"# for layers in [\n#     [200,100],         # fast.ai defaults\n#     [256,128,64],        \n#     [256,128,64,32],  \n#     [512,256,128,64],\n#     [512,256,128],\n#     [1024,512,256,128,64],\n#     [2048,1024,512,256,128,64],\n# ]:\n#     for loss_func in [ \n#         L1LossFlat,   # better with larger  models\n#         MSELossFlat,  # better with smaller models\n#     ]:  \n#         print(f'loss_func = {loss_func.__name__} | layers = {layers}')\n#         learn = tabular_learner(\n#             dls, \n#             metrics   = [ rmse ],\n#             layers    = layers,\n#             loss_func = loss_func(),\n#         )\n#         learn.fit_one_cycle(1)","cfcb5fee":"learn = tabular_learner(\n    dls, \n    metrics   = [ rmse ],\n    layers    = [512, 256, 128],\n    loss_func = L1LossFlat(),\n)\nlearn.lr_find(start_lr = 1e-05, end_lr = 1e+05, num_it = 100)\n# learn.recorder.plot()","49e96c52":"%%time\n\n# learn.fit_one_cycle(10)               # Score = 0.71423\n# learn.fit_one_cycle(100, lr_max=0.01) # Score = 1.56993 | lr_max causes training instability \nlearn.fit_one_cycle(20)                 # ","da358b0a":"learn.show_results()","77c63ef9":"row, clas, probs = learn.predict(train_df.loc[1])\nrow.show()\nprint('clas ', clas)\nprint('probs', probs)","f0a3728c":"# submission_df = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/sample_submission.csv', index_col='id')\n# for idx in test_df.index:\n#     row, clas, probs = learn.predict(test_df.loc[idx])\n#     submission_df.loc[idx]['target'] = row['target']\n# submission_df.to_csv('submission.csv')","e354aef2":"predictions   = learn.get_preds( dl=learn.dls.test_dl(test_df) )[0].numpy()\n\nsubmission_df = pd.read_csv('..\/input\/tabular-playground-series-jan-2021\/sample_submission.csv', index_col='id')\nsubmission_df['target'] = predictions\nsubmission_df.to_csv('submission.csv')\n!head submission.csv","5fd1fb85":"# Training\n\nWe create a learner and run `learn.fit_one_cycle()`","fd4b42cc":"# Further Reading\n\nThis notebook is part of a series exploring the [Tabular Playground](https:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2021)\n- 0.72935 - [scikit-learn Ensemble](https:\/\/www.kaggle.com\/jamesmcguigan\/tabular-playground-scikit-learn-ensemble)\n- 0.71423 - [Fast.ai Tabular Solver](https:\/\/www.kaggle.com\/jamesmcguigan\/fast-ai-tabular-solver)\n- 0.70426 - [XGBoost](https:\/\/www.kaggle.com\/jamesmcguigan\/tabular-playground-xgboost)","b6614e27":"# Hyperparameter Tuning","4f535a96":"A faster method is to run `learn.get_preds()` on the entire test dataframe, which returns a tuple `(pytorch.Tensor(), None)`","29c3e05a":"Then find the optimal learning rate","99915089":"Or generate predictions for individual rows","61885b74":"# Results\n\nWe can show preliminary results on the training dataset using `learn.show_results()`","8507e6e6":"This is the very slow way of generating results, using a python loop","c781201c":"# Submission","19fbef66":"# TabularDataLoaders\n\nFirst we define a TabularDataLoader, specify `y_names` and `cont_names`, and `proc` preprocessing steps","07f34221":"# Fast.ai Tabular Solver\n\nThis is a demo of using the Fast.ai Tabular Solver \n- https:\/\/docs.fast.ai\/tutorial.tabular.html\n- https:\/\/docs.fast.ai\/tabular.core.html\n- https:\/\/docs.fast.ai\/tabular.data.html\n- https:\/\/docs.fast.ai\/tabular.learner.html\n\nThis method produces very fast and simple plug-and-play results with almost zero effort.\n\nThis competition is evaluated based on RMSE score"}}