{"cell_type":{"3d7dbf2b":"code","2c2f6b1e":"code","004968f9":"code","b1f242d8":"markdown"},"source":{"3d7dbf2b":"import numpy as np \nimport pandas as pd \n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","2c2f6b1e":"train = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\n\nall = pd.concat([train, test], sort = False)\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())\nall['Embarked'] = all['Embarked'].fillna('S')\n\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4\n\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"\n\nall['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()\n\nall['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()\n\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()\n\nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\n\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_dummies = pd.get_dummies(all_1, drop_first = True)\nall_train = all_dummies[all_dummies['Survived'].notna()]\nall_test = all_dummies[all_dummies['Survived'].isna()]\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], \n                                                    test_size=0.30, \n                                                    random_state=111)","004968f9":"from sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(solver = 'liblinear')\nmodel.fit(X_train,y_train)\npredictions = model.predict(X_test)\n\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,predictions)\n\nTestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)\nt_pred = model.predict(TestForPred).astype(int)\nPassengerId = all_test['PassengerId']\n\nsub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nsub.to_csv(\"Submission.csv\", index = False)","b1f242d8":"## Logistic Regression Model"}}