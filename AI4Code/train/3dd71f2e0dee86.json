{"cell_type":{"57366426":"code","90dd13c7":"code","5c3fe0fc":"code","c86edf9d":"code","af355ff5":"code","4e7e456c":"code","5994b3be":"code","ed15a55a":"code","6e4fda57":"code","be9420e4":"code","9539f29b":"code","c7c9f1b1":"code","07c369ae":"code","f4b1014e":"code","d54e91a3":"code","5e0f8a94":"code","b6156f84":"markdown","41b1f650":"markdown","ce5031d1":"markdown","ec060c82":"markdown"},"source":{"57366426":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt #visualisation\n%matplotlib inline ","90dd13c7":"#reading data\ndata = pd.read_csv('\/kaggle\/input\/usa-cers-dataset\/USA_cars_datasets.csv')\nprint(data.shape)\ndata.head()","5c3fe0fc":"#drop un-necessary columns\ndata=data.drop(columns=['Unnamed: 0','vin','lot',  'country' , 'condition'],axis=1)\ndata.describe()","c86edf9d":"# check for null value\ndata.isnull().sum()","af355ff5":"#check for dublicate entres\nduplicate = data[data.duplicated()]\nduplicate.shape","4e7e456c":"data.year.value_counts()","5994b3be":"# some row have price and mileage zero, lets filter them \nprint(f'Total {data[data[\"price\"]==0][\"price\"].count()} row have price zero and {data[data[\"mileage\"]==0].mileage.count()} row have mileage zero')\n\n# print('Those row are have price zero\\n\\n', data[data['price']==0])\n# print('\\n Those row are have mileage zero\\n\\n', data[data['mileage']==0])\n\n#remove all row with price zero\ndata = data[data['price']!=0]\ndata = data[data['mileage']!=0]\n\n#drop entry year less then 2000\ndata = data[data['year']>2000]","ed15a55a":"# check for brands\nprint(f'All brands in Data are: \\n')\nfor brand in data[\"brand\"].unique():\n    print(brand, end=',\\t')","6e4fda57":"# Plotting a Histogram for brands and number of cars\ndata['brand'].value_counts().plot(kind='bar', figsize=(20,5))\nplt.title(\"Number of cars by brand\")\nplt.ylabel(\"Number of cars\")\nplt.xlabel(\"Brand\");","be9420e4":"# Plotting a scatter plot for brand and price\nfig, ax = plt.subplots(figsize=(30,6))\nax.scatter(data['brand'], data['price'])\nax.set_xlabel('brand')\nax.set_ylabel('Price')\nplt.show()","9539f29b":"print('Higest price entry \\n',data[data.price == data.price.max()])","c7c9f1b1":"#ploat bar chart for number of car in each year\ndata['year'].value_counts().nlargest(10).plot(kind='bar', figsize=(20,5))\nplt.title(\"Number of cars vs year\")\nplt.ylabel(\"Number of cars\")\nplt.xlabel(\"Year\")","07c369ae":"#ploat bar chart for number of car vs color\ndata['color'].value_counts().plot(kind='bar', figsize=(20,5))\nplt.title(\"Number of cars vs color\")\nplt.ylabel(\"Number of cars\")\nplt.xlabel(\"Color\");","f4b1014e":"#Look at prise of model Brand wise \ntemp =data.groupby(['brand'])#['model'].unique()\nfor brand_data in temp:\n    brand = brand_data[0]\n    print('\\n','Brand Name: ',brand)\n    data_brand = data[data['brand']==brand]\n    for model in data_brand['model'].unique():\n        data_brand_model = data_brand[data_brand['model']==model]\n        print('\\t',brand,'Model:' ,model,'\\n\\t\\t\\tMax price: ',data_brand_model.price.max(), '\\n\\t\\t\\tmin price: ',data_brand_model.price.min())","d54e91a3":"##pre prosess data\nX = data.iloc[:, [1,2,3,4,5,6,7]].values   # input columns are ['brand', 'model', 'year', 'title_status', 'mileage', 'color', 'state']\ny = data.iloc[:, 0].values                 # output columns are ['price']\n\n# Encoding text columns \nprint('Input row befor encoding : ',X[0])\n\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX[:,1]=le.fit_transform(X[:,1]) \nX[:,3]=le.fit_transform(X[:,3])\nX[:,5]=le.fit_transform(X[:,5])\nX[:,6]=le.fit_transform(X[:,6])\nX[:,0]=le.fit_transform(X[:,0])\n\nprint('Input row after encoding : ',X[0])","5e0f8a94":"\n\n# Split the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)\n\n# Training the Random Forest Regression model on the whole dataset\nfrom sklearn.ensemble import RandomForestRegressor\nregressor = RandomForestRegressor(n_estimators = 1000, random_state = 0   )\nregressor.fit( X_train, y_train)\n\ny_pred = regressor.predict(X_test)\n\n\nfrom sklearn.metrics import r2_score\nr2_score(y_test,y_pred) ","b6156f84":"# **Visualizations of Data**","41b1f650":"# predict car prise - using RandomForestRegressor","ce5031d1":"# **Data cleaning**","ec060c82":"As you can see,its showing min price and mileage zero,\n\n1. **Data contain some zero value for price and milege**\n2. **Some row of year 1973 is here **"}}