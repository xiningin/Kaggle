{"cell_type":{"f8f76bb3":"code","ba1f96e4":"code","531debb4":"code","0bea6deb":"code","adce13be":"code","b9861cba":"code","3513a577":"code","977d8f37":"code","e55e4db0":"code","d90d7c63":"code","57b00e5a":"code","f25ef607":"code","3f43b63e":"code","38e47169":"code","dc2c24db":"code","799bcdcb":"code","c3437414":"code","6dce40f9":"code","3299b3e9":"code","ed9cc847":"code","cbcb35c7":"code","4ce9cec4":"code","59dd6b28":"code","2b8060ad":"code","959373cd":"code","68237861":"code","07754432":"code","dfde753e":"code","a107c8df":"code","619604bc":"code","b960ff84":"code","384fae8b":"code","2ecd4c0b":"code","a16ec17c":"code","5093e3a5":"code","abf736af":"code","5620ddc5":"code","212c0861":"code","75463c62":"code","4b674f29":"code","c9ea6e55":"code","336b3c4d":"code","c60d596b":"code","c8125a44":"code","3a86d1fa":"code","e3cc8800":"code","aa18ff42":"code","c3a48281":"code","32160406":"code","d600a99e":"code","33602bca":"code","044aa709":"code","fca6a7a7":"code","cc0a8176":"code","1f9d5a7b":"code","a7a64d1d":"code","a9bb8d3c":"code","7bfaba01":"code","2fee95b0":"code","fddd4e46":"code","62839428":"code","2128a101":"code","18e15004":"code","e2fbbc9f":"code","9389bfab":"code","f18fdae0":"code","fcea82af":"code","9d131057":"code","92e9354c":"code","3392e91e":"code","e57543c6":"code","7bae2066":"code","a1d0e1a8":"code","6510b96b":"code","2e50bca2":"code","6a8f992d":"code","43c74fba":"code","cc8c8a3c":"code","4f21b4ed":"code","0a1488bf":"code","c020e1a7":"code","e6387f34":"code","21805533":"code","2d873cf6":"code","ff4e46bd":"code","66c280d5":"code","fc082417":"code","e5c50b08":"code","7800e6ca":"code","92a92400":"code","123cb1d6":"code","1a222998":"code","31636d4e":"code","704ba5a8":"code","c60b75ff":"code","ffec9b66":"code","0f76cade":"code","79fc9069":"code","43e15903":"code","2352cb50":"code","6efe18ea":"code","d5b53d5e":"code","1b91f44c":"code","4cbbe958":"code","88d95cc0":"code","a8d5d5b9":"code","a730cd5b":"code","94044e70":"code","c6916f32":"code","d89e7405":"code","6957660c":"code","00e3a093":"code","8e38d7d8":"code","c5d300bb":"code","aa900bbe":"code","fea62ced":"code","6ba54179":"code","4338f7db":"code","ff6699b6":"code","22c6cb4e":"code","d04fcd0b":"code","44a28af1":"code","c131d19d":"code","195ad90f":"code","86988157":"code","c8f9fcc7":"code","162614a8":"code","da5570c7":"code","3d67faf8":"code","17778e7b":"code","15d9ee5d":"code","a11066e1":"code","156001a4":"code","5292afc1":"code","e30db973":"code","bbeaf8d9":"code","7b0fedfb":"code","ff989a94":"markdown","4d2c863b":"markdown","10e28bf0":"markdown","d9f402d3":"markdown","22c7c11a":"markdown","d2c8b2cb":"markdown","29d3f704":"markdown","a6e70b93":"markdown","32acecc2":"markdown","db7bad33":"markdown","d199235c":"markdown","a9ccd7c9":"markdown","48f8ce20":"markdown","d4c2e673":"markdown","46aad904":"markdown","ec8b54fb":"markdown","9b97b9d1":"markdown","22ebb6dd":"markdown","2befeb25":"markdown","0f165ef1":"markdown","25516c4c":"markdown","3b14f6d4":"markdown","25c8412a":"markdown","5851e722":"markdown","515426de":"markdown","51528328":"markdown","3896da9e":"markdown","64775c5a":"markdown","87edc205":"markdown","ef108de1":"markdown","03982d28":"markdown","7e1f98cb":"markdown","15336c92":"markdown","faa8b9c5":"markdown","2d38c5fa":"markdown","5abf6426":"markdown","1363b2a3":"markdown","6b095133":"markdown","c6fc43f0":"markdown","06ef9131":"markdown","14142c28":"markdown","37dda073":"markdown","daf993a5":"markdown","ee44987c":"markdown","38ce5777":"markdown","91e225ab":"markdown","cd9c403d":"markdown","d5db4cdb":"markdown","d8966be6":"markdown","0277ff94":"markdown","543e643a":"markdown","27f7f3ac":"markdown","790bf431":"markdown","d339cbec":"markdown","2525c527":"markdown","8e2d1b46":"markdown","a9cf7be0":"markdown","ea6d422e":"markdown","a3531f8a":"markdown","73dada0f":"markdown","7bea7cec":"markdown","e0a4433b":"markdown","efe09bc6":"markdown","84f5012a":"markdown","63987635":"markdown","8287bf1c":"markdown","319ed750":"markdown","554eba3b":"markdown","6c5f86f8":"markdown","b6ea3506":"markdown","f5c27514":"markdown","bfd3631b":"markdown","163eb086":"markdown","110f07ec":"markdown","e4cc3cdf":"markdown","0af1b7fe":"markdown","15fee855":"markdown","d2de144b":"markdown","01840a96":"markdown","e1f1e210":"markdown","98a85fe8":"markdown","cde4f195":"markdown","6beed725":"markdown","15cea684":"markdown","9b54b60b":"markdown","a9cba19f":"markdown","1b3b2fd7":"markdown","d4a79aee":"markdown","ae45a115":"markdown","b0e27e53":"markdown","f40ddd43":"markdown","49388061":"markdown","2b7535ec":"markdown","baa4004a":"markdown","c479cab0":"markdown","534ac3a5":"markdown","8282ab36":"markdown","bdefe688":"markdown","472e3077":"markdown","08ef989d":"markdown","d969f5d8":"markdown","2e89632f":"markdown"},"source":{"f8f76bb3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import  Image\nfrom warnings import filterwarnings\nfilterwarnings('ignore')","ba1f96e4":"pd.set_option('display.max_columns',None)\npd.set_option('display.max_rows',None)\npd.set_option('display.float_format', lambda x:'%.3f' % x)\npd.set_option('display.width',500)","531debb4":"import pandas as pd","0bea6deb":"df_=pd.read_csv('..\/input\/titanic\/train.csv')","adce13be":"df=df_.copy()","b9861cba":"df.sample(10)","3513a577":"print(\"The dataset has {} rows and {} columns.\".format(df.shape[0],df.shape[1]),end=\"\\n\\n\")\nprint(\"Names of variables in the dataset:\" )\nfor col in df.columns:\n      print(col,end=\"  \")\nprint(end=\"\\n\\n\")\nprint(\"Index information in the dataset:\" )\nprint(df.index,end=\"\\n\\n\")\nprint(\"Data type of variables in dataset :\")\nprint(df.dtypes,end=\"\\n\\n\")\nprint(\"Missing values of variables in the dataset: \")\nprint(df.isnull().sum(),end=\"\\n\\n\")\nprint(\"The total number of missing values in the dataset: \")\nprint(df.isnull().sum().sum(),end=\"\\n\\n\")\nprint(\"Memory usage of label values (index\/columns) in the dataset: \" )\nprint(df.memory_usage())","977d8f37":"def grab_col_names(dataframe,cat_th=10,car_th=20):\n    #Categorical Veriables\n    cat_cols     =[i for i in df.columns if df[i].dtypes=='O']\n    num_but_cat  =[i for i in df.columns if df[i].dtypes!='O' and df[i].nunique()<cat_th]\n    cat_but_car  =[i for i in df.columns if df[i].dtypes=='O' and df[i].nunique()>car_th]\n    cat_cols     =cat_cols+num_but_cat\n    cat_cols     =[i for i in cat_cols if i not in cat_but_car]\n    \n    #Continuous Veriables\n    num_cols=[i for i in df.columns if df[i].dtypes!='O']\n    num_cols=[i for i in num_cols if i not in num_but_cat]\n    \n    print('Number of Observations : {}'.format(dataframe.shape[0]))\n    print('Number of Variables    : {}'.format(dataframe.shape[1]))\n    print('Number of Categorical Variables : {}'.format(len(cat_cols)))\n    print('Number of Numerical Variables : {}'.format(len(num_cols)))\n    print('Number of Numerical but Categorical Variables : {}'.format(len(num_but_cat)))\n    print('Number of Categorical but Cardinal Variables : {}'.format(len(cat_but_car)))\n    \n    return cat_cols,num_cols,cat_but_car\n    ","e55e4db0":"cat_cols,num_cols,cat_but_car=grab_col_names(df)\nprint(end='\\n\\n')\nprint('Categorical Veriables          :',cat_cols,end='\\n\\n')\nprint('Continuous  Veriables          :',num_cols,end='\\n\\n')\nprint('Categorical but Cardinal Veriables :',cat_but_car,end='\\n\\n')\n","d90d7c63":"num_cols=[i for i in num_cols if i!='PassengerId']\nnum_cols","57b00e5a":"for i in cat_cols:\n    print('Unique Class Number of '+i+': '+str(df[i].nunique()))","f25ef607":"for i in cat_cols:\n    if df[i].nunique()<5:\n        print('Categorical Veriables : ', i,end='\\n\\n')\n        print(df[i].value_counts(),end='\\n\\n')\n        df[i].value_counts().plot(kind='pie',y='points',autopct='%.2f',title='unique of '+ i)\n        plt.show()\n    else:\n        print('Categorical Veriables : ', i,end='\\n\\n')\n        print(df[i].value_counts(),end='\\n\\n')\n        df[i].value_counts().plot(kind='barh',title='unique of '+ i)\n        plt.show()\n        ","3f43b63e":"df[num_cols].describe().T","38e47169":"sorted(df.loc[df['Age']<1,'Age'])","dc2c24db":"print('Number of missing observation units in ticket variable : ',df['Ticket'].isnull().sum()) ","799bcdcb":"non_paying_passengers=df.loc[df['Fare']==0]\nnon_paying_passengers","c3437414":"print('If the price paid for the ticket is zero :',end='\\n\\n') \nprint('The passengers have boarded the ship from Southampton Harbor.',end='\\n\\n')\nprint([str(df.loc[index,'SibSp']+df.loc[index,'Parch']) \\\nfor index,i in enumerate(df['Fare']) if i==0])\nprint('Passengers are lonely individuals.',end='\\n\\n') \nprint('Each of the passengers has a male gender.',end='\\n\\n\\n')\nprint(non_paying_passengers.groupby('Pclass',dropna=False)['Age'].count(),end='\\n\\n')\nprint('Passengers with ticket class 2 are not known for their age.')","6dce40f9":"non_paying_passengers.groupby(['Pclass','Ticket']).agg({'PassengerId':['count']})","3299b3e9":"non_paying_passengers.groupby('Pclass',dropna=False)['Age'].count()","ed9cc847":"cat_cols","cbcb35c7":"for i in cat_cols:\n    if i!='Survived':\n        print(df.groupby(i)['Survived'].mean(),end='\\n\\n')\n        df.groupby(i)['Survived'].mean().plot(kind='barh')\n        plt.show()","4ce9cec4":"sns.heatmap(df.drop(columns=['PassengerId']).corr(),annot=True)","59dd6b28":"df.drop(columns=['PassengerId']).corr()['Survived'].nlargest(len(df.columns))[1:]","2b8060ad":"print('Total number of missing observation units in the dataset : ', df.isnull().sum().sum(),end='\\n\\n')","959373cd":"NaN_cols={i:[df[i].isnull().sum(),np.round((df[i].isnull().sum()\/df.shape[0])*100, 2)] \\\n              for i in df.columns if df[i].isnull().sum()!=0}\nprint(NaN_cols,end='\\n\\n')\nmissing_values_df=pd.DataFrame(data=NaN_cols.values(),columns=['NaN_Count','Ratio'],index=NaN_cols.keys())\nmissing_values_df","68237861":"NaN_index=df.loc[df[list(NaN_cols.keys())].isnull().any(axis=1)].index\ndf.loc[df[list(NaN_cols.keys())].isnull().any(axis=1)]","07754432":"df.groupby(df['Cabin'].notnull().astype('int'))['Survived'].mean()","dfde753e":"df['Age'].agg(['min','mean','median','std','max'])","a107c8df":"df['Age'].fillna(df['Age'].median(),inplace=True)","619604bc":"print('Number of missing observation units in ticket variable : ',df['Age'].isnull().sum()) ","b960ff84":"df.loc[df['Embarked'].isnull()].any(axis=1)","384fae8b":"df['Embarked'].fillna(df['Embarked'].mode()[0],inplace=True)","2ecd4c0b":"print('Number of missing observation units in ticket variable : ',df['Embarked'].isnull().sum()) ","a16ec17c":"def outlier_thresholds(dataframe,col,q1=0.05,q3=0.95):\n    quartile1=dataframe[col].quantile(q1)\n    quartile3=dataframe[col].quantile(q3)\n    inter_quartile_range=quartile3-quartile1\n    down_limit=quartile1-(1.5*inter_quartile_range)\n    up_limit=quartile3+(1.5*inter_quartile_range)\n    \n    return down_limit,up_limit","5093e3a5":"for i in num_cols:\n    print(i+\":\"+str(outlier_thresholds(df,i)))","abf736af":"def check_outlier(dataframe,col):\n    down_limit,up_limit=outlier_thresholds(dataframe,col)\n    if dataframe[((dataframe[col]<down_limit) | (dataframe[col]>up_limit))].any(axis=None):\n        return True\n    else:\n        return False","5620ddc5":"for i in num_cols:\n    print(i+\":\"+str(check_outlier(df,i)))","212c0861":"def grab_outliers(dataframe,col,table=False,index=False):\n    down,up=outlier_thresholds(dataframe,col)\n    if table:\n        if dataframe[((dataframe[col]<down) | (dataframe[col]>up))].any(axis=None):\n            print(dataframe[((dataframe[col]<down) | (dataframe[col]>up))])\n    if index:\n        outliers_index=dataframe[((dataframe[col]<down) | (dataframe[col]>up))].index\n        return outliers_index","75463c62":"for i in num_cols:\n    print(i+\": \"+str(grab_outliers(df,i,False,True)),end='\\n\\n\\n')\n    outliers_index=grab_outliers(df,i,False,True)\n    print(\"Outliers :\"+\"\\n\"+str(df[i][outliers_index]),end='\\n\\n\\n')\n                       ","4b674f29":"def replace_with_thresholds(dataframe,col):\n    down_limit,up_limit=outlier_thresholds(dataframe,col)\n    dataframe.loc[(dataframe[col]<down_limit),col]=down_limit\n    dataframe.loc[(dataframe[col]>up_limit),col]=up_limit","c9ea6e55":"for i in num_cols:\n    replace_with_thresholds(df,i)","336b3c4d":"for i in num_cols:\n    print(i+\":\"+str(check_outlier(df,i)))","c60d596b":"cat_but_car","c8125a44":"df.loc[:,'Letter_Count']=df['Name'].apply(lambda x:len(x))","3a86d1fa":"df.groupby('Embarked')['Letter_Count','Survived'].mean()","e3cc8800":"df.groupby('Sex')['Letter_Count','Survived'].mean()","aa18ff42":"df.loc[:,'Word_Count']=df['Name'].apply(lambda x:len(x.split(' ')))","c3a48281":"adjective=set()\nfor i in df['Name']:\n    for j in i.split(' '):\n        if '.' in j:\n            adjective.add(j)\nadjective","32160406":"for index,i in enumerate(df['Name']):\n    for j in i.split(' '):\n        if j in adjective :\n            df.loc[index,'Adjective']=j         ","d600a99e":"df.groupby('Adjective')['Survived'].mean()","33602bca":"df.groupby(df['Cabin'].notnull().astype('int'))['Survived'].mean()","044aa709":"df['Binary_Cabin']=df['Cabin'].notnull().astype('int')","fca6a7a7":"df['Binary_Cabin'].value_counts()","cc0a8176":"df.drop(columns=['Cabin'],inplace=True)","1f9d5a7b":"df.groupby('Ticket')['PassengerId'].count()","a7a64d1d":"df.groupby('Ticket')['PassengerId'].count().agg(['min','max'])","a9bb8d3c":"unique_group=df.groupby('Ticket')['PassengerId'].count()","7bfaba01":"unique_group=dict(unique_group)","2fee95b0":"df['Group_Size']=0\nfor i in df['Ticket']:\n    if i in unique_group:\n        df.loc[(df['Ticket']==i),'Group_Size']=unique_group[i]\n          ","fddd4e46":"for i in (df['Group_Size']):\n    if i==1:\n        df.loc[df['Group_Size']==i,'Categorical_Group']='Alone'\n    if i!=1:\n        df.loc[df['Group_Size']==i,'Categorical_Group']=str(i)+'_'+'Passenger'","62839428":"print(df['Categorical_Group'].value_counts().sort_index())\ndf['Categorical_Group'].value_counts().plot(kind='barh')","2128a101":"df.groupby('Categorical_Group')['Survived'].mean()","18e15004":"len(df[df['SibSp']+df['Parch']==df['Group_Size']])","e2fbbc9f":"df[df['SibSp']+df['Parch']==df['Group_Size']].sample(10)","9389bfab":"dif_ticket_in_family=df[df['SibSp']+df['Parch']==df['Group_Size']].index","f18fdae0":"dif_ticket_in_family","fcea82af":"for i in dif_ticket_in_family:\n    df.loc[df['Group_Size'].index==i,'Group_Size']+=1","9d131057":"len(df[df['SibSp']+df['Parch']==df['Group_Size']])","92e9354c":"for index,i in enumerate(df['Categorical_Group']):\n    if i[0].isdigit():\n        df.loc[index,'Categorical_Group']=i.replace(i[0],str(int(i[0])+1))\n        ","3392e91e":"df[['SibSp','Parch','Group_Size']]","e57543c6":"df['with_Travel']=df['Group_Size']-(df['SibSp']+df['Parch'])","7bae2066":"df['with_Travel'].unique()","a1d0e1a8":"negative=[i for i in df['with_Travel'].unique() if i<0]\nnegative","6510b96b":"print(df.loc[df['with_Travel']==-5,['SibSp','Parch','Group_Size']],end='\\n\\n')\nprint(df.loc[df['with_Travel']==-3,['SibSp','Parch','Group_Size']],end='\\n\\n')\nprint(df.loc[df['with_Travel']==-2,['SibSp','Parch','Group_Size']],end='\\n\\n')\nprint(df.loc[df['with_Travel']==-1,['SibSp','Parch','Group_Size']],end='\\n\\n')","2e50bca2":"df.loc[df['with_Travel']==-5,['Group_Size']]=df['SibSp']+df['Parch']+1\ndf.loc[df['with_Travel']==-3,['Group_Size']]=df['SibSp']+df['Parch']+1\ndf.loc[df['with_Travel']==-2,['Group_Size']]=df['SibSp']+df['Parch']+1\ndf.loc[df['with_Travel']==-1,['Group_Size']]=df['SibSp']+df['Parch']+1","6a8f992d":"df['with_Travel']=df['Group_Size']-(df['SibSp']+df['Parch'])","43c74fba":"[i for i in df['with_Travel'].unique() if i<0]","cc8c8a3c":"df['family_size']=df['SibSp']+df['Parch']","4f21b4ed":"df.astype({'with_Travel':'int32'})","0a1488bf":"df['with_Travel'].unique()","c020e1a7":"df.loc[(df['with_Travel']==1) & (df['family_size'] ==0), 'with_Travel'] = 'Alone'\ndf.loc[(df['with_Travel']==1) & (df['family_size'] !=0), 'with_Travel'] = 'with_family'  ","e6387f34":"df['with_Travel'].unique()","21805533":"for i in df['with_Travel']:\n    if len(str(i))==1:\n           df.loc[(df['with_Travel']==i) & (df['family_size'] !=0), 'with_Travel'] = 'with_friend_and_family'","2d873cf6":"for i in df['with_Travel']:\n    if len(str(i))==1:\n           df.loc[(df['with_Travel']==i) & (df['family_size'] ==0), 'with_Travel'] = 'with_friend'","ff4e46bd":"df.groupby('with_Travel')['Survived'].mean()","66c280d5":"df.head()","fc082417":"area=set()\nfor i in df['Ticket']:\n    if not i.isdigit():\n        area.add(i.split(' ')[0])\n","e5c50b08":"area","7800e6ca":"for index,i in enumerate(df['Ticket']):\n    for j in i.split(' '):\n        if j in area :\n            df.loc[index,'Area']=j\ndf['Area'].fillna('Unknown',inplace=True)","92a92400":"df['Area'].unique()","123cb1d6":"df.groupby('Area')['Survived'].mean()","1a222998":"num_cols","31636d4e":"df.loc[(df['Sex'] == 'male')   &   (df['Age'] >= 0)    & (df['Age'] <= 21), 'Categorical_Sex'] = 'young_male'\ndf.loc[(df['Sex'] == 'female') &   (df['Age'] >= 0)    & (df['Age'] <= 21), 'Categorical_Sex'] = 'young_male'\n\ndf.loc[(df['Sex'] == 'male')   &   (df['Age'] >= 21)   & (df['Age'] <= 35), 'Categorical_Sex'] = 'adult_male'\ndf.loc[(df['Sex'] == 'female') &   (df['Age'] >= 21)   & (df['Age'] <= 35), 'Categorical_Sex'] = 'adult_female'\n\ndf.loc[(df['Sex'] == 'male')   &   (df['Age'] >= 36)   & (df['Age'] <= 50), 'Categorical_Sex'] = 'mature_male'\ndf.loc[(df['Sex'] == 'female') &   (df['Age'] >= 36)   & (df['Age'] <= 50), 'Categorical_Sex'] = 'mature_female'\n\ndf.loc[(df['Sex'] == 'male')   &   (df['Age'] >= 50)   & (df['Age'] <= df['Age'].max()), 'Categorical_Sex'] = 'senior_male'\ndf.loc[(df['Sex'] == 'female') &   (df['Age'] >= 50)   & (df['Age'] <= df['Age'].max()), 'Categorical_Sex'] = 'senior_female'\n","704ba5a8":"df['Categorical_Sex'].unique()","c60b75ff":"df['Categorical_Sex'].unique()","ffec9b66":"df.sample(10)","0f76cade":"df['Fare_per_Person']=df['Fare']\/df['Group_Size']","79fc9069":"df['Fare_per_Person'].quantile([0,0.25,0.50,0.75,0.76,0.77,0.78,0.79\n                                ,0.80,0.90,0.95,1])","43e15903":"df['Fare_per_Person']=pd.cut(df['Fare_per_Person'],bins=(-1,0,\n                                                         df['Fare_per_Person'].quantile(0.77),\n                                                         df['Fare_per_Person'].quantile(0.95),\n                                                         df['Fare_per_Person'].quantile(1)),\n                             labels=['Free','Lower','Medium','Upper'])","2352cb50":"df.groupby('Fare_per_Person')['Survived'].mean()","6efe18ea":"df.groupby(['Categorical_Sex','Pclass']).agg({'Survived':'mean'}).T","d5b53d5e":"df['Age_with_Pclass']=df['Age']*df['Pclass']","1b91f44c":"cat_cols,num_cols,cat_but_car=grab_col_names(df)","4cbbe958":"num_cols=[i for i in num_cols if i!='PassengerId']\nnum_cols","88d95cc0":"binary_cols=[i for i in df.columns if df[i].dtypes=='O' and df[i].nunique()==2]\nbinary_cols","a8d5d5b9":"from sklearn.preprocessing import LabelEncoder ","a730cd5b":"lr=LabelEncoder()","94044e70":"for i in binary_cols:\n    df[i]=lr.fit_transform(df[i])","c6916f32":"def rare_analyser(dataframe, target, cat_cols):\n    for col in cat_cols:\n        print(col, \":\", len(dataframe[col].value_counts()))\n        print(pd.DataFrame({\"COUNT\": dataframe[col].value_counts(),\n                            \"RATIO\": dataframe[col].value_counts() \/ len(dataframe),\n                            \"TARGET_MEAN\": dataframe.groupby(col)[target].mean()}), end=\"\\n\\n\\n\")\n","d89e7405":"rare_analyser(df,'Survived',cat_cols)","6957660c":"def rare_encoder(dataframe, rare_perc, cat_cols):\n  \n    rare_columns = [col for col in cat_cols if (dataframe[col].value_counts() \/ len(dataframe) < 0.01).sum() > 1]\n\n    for col in rare_columns:\n        tmp = dataframe[col].value_counts() \/ len(dataframe)\n        rare_labels = tmp[tmp < rare_perc].index\n        dataframe[col] = np.where(dataframe[col].isin(rare_labels), 'Rare', dataframe[col])\n\n    return dataframe\n\n\nnew_df = rare_encoder(df, 0.01, cat_cols)","00e3a093":"df= rare_encoder(df, 0.01, cat_cols)","8e38d7d8":"one_hot_cols=[i for i in cat_cols if 10>=df[i].nunique()>2]\none_hot_cols","c5d300bb":"def one_hot_encoder(dataframe,col):\n    dataframe=pd.get_dummies(data=dataframe,columns=one_hot_cols,drop_first=True)\n    return dataframe","aa900bbe":"df=one_hot_encoder(df,one_hot_cols)","fea62ced":"cat_cols,num_cols,cat_but_car=grab_col_names(df)","6ba54179":"num_cols=[i for i in num_cols if i!='PassengerId']","4338f7db":"rare_analyser(df, \"Survived\", cat_cols)","ff6699b6":"useless_cols = [col for col in df.columns if df[col].nunique() == 2 and\n                (df[col].value_counts() \/ len(df) < 0.01).any(axis=None)]","22c6cb4e":"from sklearn.preprocessing import StandardScaler","d04fcd0b":"scaler=StandardScaler()\ndf[num_cols]=scaler.fit_transform(df[num_cols])","44a28af1":"corr_Series=df.corr()['Survived'].nlargest(len(df.columns))[1:]\ncorr_Series","c131d19d":"y = df['Survived']\nX = df.drop(['Survived','Name', 'Ticket', 'Area','PassengerId'], axis=1)","195ad90f":"from sklearn.model_selection import train_test_split","86988157":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=17)","c8f9fcc7":"from sklearn.linear_model import LogisticRegression","162614a8":"log_model = LogisticRegression().fit(X_train, y_train)","da5570c7":"y_pred = log_model.predict(X_test)","3d67faf8":"y_prob = log_model.predict_proba(X_test)[:, 1]\ny_prob","17778e7b":"from sklearn.metrics import classification_report","15d9ee5d":"print(classification_report(y_test, y_pred))","a11066e1":"from sklearn.metrics import plot_roc_curve,roc_auc_score","156001a4":"plot_roc_curve(log_model, X_test, y_test)\nplt.title('ROC Curve')\nplt.plot([0, 1], [0, 1], 'r--')\nplt.show()\n\nroc_auc_score(y_test, y_prob)","5292afc1":"from sklearn.model_selection import cross_validate","e30db973":"cv_results = cross_validate(log_model,\n                            X, y,\n                            cv=5,\n                            scoring=[\"accuracy\", \"precision\", \"recall\", \"f1\", \"roc_auc\"])","bbeaf8d9":"print('accuracy : ',cv_results['test_accuracy'].mean(),end='\\n\\n')\nprint('precision: ',cv_results['test_precision'].mean(),end='\\n\\n')\nprint('recall   : ',cv_results['test_recall'].mean(),end='\\n\\n')\nprint('test_f1  : ',cv_results['test_f1'].mean(),end='\\n\\n')\nprint('roc_auc  : ',cv_results['test_roc_auc'].mean(),end='\\n\\n')","7b0fedfb":"def plot_importance(model, features, num=len(X), save=False):\n    feature_imp = pd.DataFrame({\"Value\":model.coef_[0], 'Feature': features.columns})\n    plt.figure(figsize=(10, 10))\n    sns.set(font_scale=1)\n    sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\",\n                                                                      ascending=False)[0:num])\n    plt.title('Features')\n    plt.tight_layout()\n    plt.show()\n    if save:\n        plt.savefig('importances.png')\n\nplot_importance(log_model,X_train)","ff989a94":"### Variables Classification","4d2c863b":"### Accessing Missing Observation Units","10e28bf0":"When the Cabin variable is converted to a binary variable, it becomes meaningful for the target variable, so it should be deleted after it is converted to a new variable in the Feature Engineering stage. ","d9f402d3":"#### Cabin ","22c7c11a":"##### Categorical_Group","d2c8b2cb":"### Creating a new variable from Numeric Variables ","29d3f704":"### Calculating Threshold Values for Outlier Observations as Lower Limit and Upper Limit ","a6e70b93":"##### Binary_Cabin","32acecc2":"### Creating target variables and features ","db7bad33":"### Accessing The Index Information Of Outlier Observation Units ","d199235c":"![titanic_variables.png](attachment:7bb9a666-a103-4f4d-bdb2-b830d91d7193.png)","a9ccd7c9":"Hedef degisken --> by Survived<br>\n   - There is a direct proportionality between the Fare and Parch variables. .\n   - There is an inverse proportion between the SibSp -Age- Pclass variables. ","48f8ce20":"##### Word_Count","d4c2e673":"### About The Dataset ","46aad904":"# Feature Engineering","ec8b54fb":"If the number of people in the group is in the range of [1-5], there is a positive correlation between the unique class and the target variable, but if the number of people is in the range of [6-7], there is a negative correlation between the unique class and the target variable. ","9b97b9d1":"### Solving Outlier Observation Units Problems ","22ebb6dd":"If the area under the curve increases (AUC-->Area Under Curve), the accuracy score increases. ","2befeb25":"# Missing Observation Units Analysis","0f165ef1":"### Creating new variables from Carnival variables ","25516c4c":"Family members may travel in the same group and have different tickets. Therefore, we need to update the Group_Size variable again. ","3b14f6d4":"### Separating the Original Data Set as a Training Set and a Test Set \/ Holdout Method ","25c8412a":"##### Letter_Count","5851e722":"![Confusion Matrix.jpg](attachment:47d39079-298e-4e43-a875-a30f135ee40f.jpg)","515426de":"# Let's Get to Know the Variables ","51528328":"We should do the same operations in the Categorical_Group variable. ","3896da9e":"#### Name","64775c5a":"##### Categorical_Sex","87edc205":"### Features Importances","ef108de1":"# Dataset Story","03982d28":"Labels that individuals have can also be an important factor in terms of survival. ","7e1f98cb":"\n- **precision** : The success rate of positive class predictions.\n- **recall**    : It is the rate of correctly guessing the positive class.\n- **f1**:      It is a harmonic average created with Precision and Recall.\n- **accuracy**  : The rate at which the target variable is expressed with features. ","15336c92":"# Correlation Analysis ","faa8b9c5":"PassengerId is a continuous\/numeric variable but acts like an index. ","2d38c5fa":"# Encoding","5abf6426":"### y_prob for AUC Score (probability of belonging to class 1) \n","1363b2a3":"### One-Hot Encoding","6b095133":"# Reviewing Observation Units","c6fc43f0":"#### Let's Examine the Target\/Dependent\/Output Variable ","06ef9131":"# Correlation Analysis ","14142c28":"##### Age ","37dda073":"### Solve The Missing Observation Unit Problem ","daf993a5":"#### Fare ","ee44987c":"### Detecting the Presence of Outlier Observation Units","38ce5777":"Ticket numbers are unique, a ticket can belong to a group or to an individual.","91e225ab":"Observation units between 0 and 1 year old ","cd9c403d":"![box-plot.png](attachment:dcd8cec8-62a3-4d4f-953f-7072a609b20c.png)","d5db4cdb":"### k-fold cross validation ","d8966be6":"##### Embarked ","0277ff94":"The higher the number of people in the group, the higher the survival rate. ","543e643a":"Family members may travel in the same group and have different tickets. Therefore, we need to update the Group_Size variable. ","27f7f3ac":"It would be correct to fill the observation units of the variable Age, which is a continuous variable, with a statistical metric.\n\nStandard deviation is 14 and Age is a high ratio since it has values between 0 and 80. Therefore, filling with median should be preferred instead of filling with mean. ","790bf431":"# Scaling","d339cbec":"#### Age_with_Pclass","2525c527":"**My LinkedIn Address** :\n\n<a href=\"https:\/\/www.linkedin.com\/in\/ibrahim-turkoglu\/\">LinkedIn<\/a>\n\n**My Medium   Address** :\n\n<a href=\"https:\/\/medium.com\/@trkglu.ibrahim\">Medium<\/a>\n\n**My Github   Address** :\n\n<a href=\"https:\/\/github.com\/ibrahimturkoglu\">Github<\/a>\n\n**My Kaggle  Address** :\n\n<a href=\"https:\/\/www.kaggle.com\/brahimtrkolu\">Kaggle<\/a>","8e2d1b46":"### Classification Report","a9cf7be0":"### **If you want to interact with me**","ea6d422e":"### Creating Predicted Values","a3531f8a":"### Creating a new variable with interaction between variables ","73dada0f":"### Re-assignment with Tresholds","7bea7cec":"##### Adjective ","e0a4433b":"### Model Building \/ Training ","efe09bc6":"- Dropping\n- Filling with a statistical metric or filling by categorical breakdown \n- Filling with predictive Assignment","84f5012a":"##### Group_Size","63987635":"##### Ticket ","8287bf1c":"##### Target Variable by Category Variables","319ed750":"The names of the passengers can give us information about their ethnic origin and financial situation. \n\n- Gender - Name Length \n- Port of embarkation - Name length \n- Number of Family - Name Length ","554eba3b":"Because Cabin, which is a categorical and Cardinal variable, has a large number of unique classes and the ratio of missing observation units to total observation units is high, it is a logical decision to remove\/delete\/drop Cabin Variable from the data set.\n\nIf a significant variable is obtained for the target variable after the Cabin variable is converted to a bool categorical variable, it should be deleted after the Feature Engineering phase is completed. ","6c5f86f8":"# Modelling","b6ea3506":"# Loading Related Libraries ","f5c27514":"RMS Titanic was an Olympic-class transatlantic cruise ship owned by White Star Line. Manufactured at the Harland and Wolff (Belfast, Ireland) shipyards. On the night of April 15, 1912, it hit an iceberg on its first voyage and sank into the icy waters of the North Atlantic in about two hours and forty minutes. When its construction was completed in 1912, it was the largest steam passenger ship in the world. Its sinking resulted in the deaths of 1,514 people and went down in history as one of the greatest maritime disasters.\n\nThe great loss of life caused by the sinking of the Titanic was attributed to many reasons, but the fact that stood out over time was that the ship did not carry enough lifeboats for everyone. Although the full capacity of the Titanic was 3,547 people, the total capacity of the lifeboats on board was 1,178 people. **Also, the number of men who died in total was very inproportionate because they prioritized women and children during the accident** \n\n<a href=\"https:\/\/tr.wikipedia.org\/wiki\/RMS_Titanic\">References<\/a>","bfd3631b":"Outlier Observation Units: \n   - It is deleted from the data set with the drop method \n   - It is reassigned to the nearest threshold. ","163eb086":"# Let's Get To Know The Dataset","110f07ec":"### Rare Encoder","e4cc3cdf":"Examining the existence of unique rare classes of Categorical Variables ","0af1b7fe":"- The condition that the minimum value of the ticket price is zero\n    - Zero means missing observation unit, maybe.\n    - It could be a gift, a promotion, a free ticket, or they disregarded the ship's             security and boarded the ship illegally. ","15fee855":"- If a passenger is traveling only with family members <br>\n  \n  df['Group_Size']-df['SipSp']+df['Parch']=1 should be.\n\n- If a passenger is traveling with only friends \n  \n  df['SipSp']+df['Parch']=0 ve df['Group_Size']>1 should be.\n\n- If a passenger is traveling with family members and friends  <br>\n  \n  df['Group_Size']-df['SipSp']+df['Parch']>1 should be.","d2de144b":"#### Age ","01840a96":"In Dataset\n- The state of being a minimum age of 0 to 1  <br>\n- The condition that the minimum value of the ticket price is zero\n\nlet's analyze. ","e1f1e210":"##### Age","98a85fe8":"- Those who are females have a higher survival rate. \n- The order of survival according to the ports on board the ship\n    - Cherbourg >  Queenstown >  Southampton\n- Survival by category of tickets\n    - 1>2>3","cde4f195":"##### Fare","6beed725":"#### Let's Examine Categorical Variables ","15cea684":"##### Area ","9b54b60b":"##### Person_per_Fare ","a9cba19f":"##### with_Travel","1b3b2fd7":"![Titanic.jpg](attachment:62e6854a-3334-4bad-aacc-69184649052b.jpg)","d4a79aee":"### ROC Curve","ae45a115":"If you are not carrying out a project in an industry (e.g. : health) where even small odds are of great value, it is necessary to delete rare classes.\n\nAfter One Hot Encoding, a new variable is created for each class, but since the correlation between the variable created from rare classes and the target variable is at a very low level, residue occurs in the data set. ","b0e27e53":"### Label Encoding","f40ddd43":"##### Cabin","49388061":"There are many passengers with the same ticket tag. Tickets are cut after a single transaction and their tags are unique, so a ticket represents a group and is charged according to the number of people. ","2b7535ec":"# Dataset Display Settings ","baa4004a":"#### Ticket ","c479cab0":"![Recall_Sensitivity .png](attachment:39993c6e-f972-4824-ba5d-a1aeedf4fdf9.png)","534ac3a5":"The number of missing observations in the Age variable is approximately one-fifth of the dataset. The number of missing observations in the Cabine variable is approximately four-fifth of the dataset. The number of missing observations in the imbarked variable is approximately two-thousandths of the dataset.\n\nif\n \n   - Dropping method <br>\n   \n     It causes a huge data loss in the dataset. \n  \n   - Method of filling with a statistical metric <br>\n   \n     Since the standard deviation (std) of the age variable is high, filling with the            median instead of the mean is a reliable method and does not cause any bias. \n\n   - Fill with predictive assignment <br>\n   \n     With the KNN imputer, the average of the closest neighbor observation units to the          missing observation units is taken and assigned to the missing observation unit. Since      KNN imputer has a distance\/distance-based algorithm, it is also of great importance to      eliminate the missing observation unit problem in regression problems and some              classification problems. However, since the number of missing observation units in the      current variables is high, the nearest neighbor selections are likely to be made            incorrectly, so I will not prefer its use in the titanic data set.","8282ab36":"##### Family_Size ","bdefe688":"- If a passenger is traveling only with family members <br>\n  \n  df['Group_Size']-df['SipSp']+df['Parch']=1 should be.\n\n- If a passenger is traveling with only friends \n  \n  df['SipSp']+df['Parch']=0 ve df['Group_Size']>1 should be.\n\n- If a passenger is traveling with family members and friends  <br>\n  \n  df['Group_Size']-df['SipSp']+df['Parch']>1 should be.","472e3077":"As a result\n- If the price paid for the ticket is zero \n    - It does not represent missing observation units. \n    - It could be a gift, a promotion, a free ticket, or they disregarded the ship's security and boarded the ship illegally. \n     \n     \nIt cannot be ruled out that there are passengers with the same ticket number and all passengers embark from the same port. \nIt can be commented that, with the possibility that a certain number of promotional tickets were distributed according to the ticket grade, the age of the passengers included in the ticket class number two is not known, creating a false identity and ignoring the ship security. ","08ef989d":"#### Let's Review Continuous\/Numerical Variables","d969f5d8":"The ratio of missing observation units to the total observation units is two per thousand. \n- Missing observation units can be dropped with the drop method. \n- Since it is a categorical variable, missing observation units can be filled according to the most repeated unique class with the fillna method. ","2e89632f":"Observation units with float data type in the 0-1 age range express the age of a newborn baby. \n\nNumber of days since birthday \/ 365"}}