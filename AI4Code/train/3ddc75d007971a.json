{"cell_type":{"65d664a3":"code","1417a387":"code","3e044cd3":"code","b5ebdb05":"code","4d50b0ee":"code","bf98a8bd":"code","12d13f42":"code","d5f8e77b":"code","e9dbb4e9":"code","9efed0ff":"code","6129c7e8":"code","6a607cfc":"code","65af5193":"code","3d57be10":"code","4f40a4a3":"code","f44bf110":"code","f581b3f6":"code","4ab2d1f2":"code","185bdb55":"code","d2e1bc37":"code","1f8095b0":"markdown","45c88341":"markdown","b9b28155":"markdown","0ffb0aa7":"markdown","81a66f18":"markdown","3de03ca8":"markdown","6d875893":"markdown","1f13d694":"markdown","8da27b8c":"markdown","fbc865d8":"markdown"},"source":{"65d664a3":"#install kmodes library\n!pip install kmodes","1417a387":"#update sklearn\n!pip install scikit-learn==0.24.2","3e044cd3":"#import EDA tools\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n#import modeling tools and metrics\nfrom kmodes.kprototypes import KPrototypes\nfrom kmodes.kmodes import KModes\nfrom sklearn.metrics.cluster import rand_score\n\n#ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')","b5ebdb05":"#read CSV\ndf = pd.read_csv(\"..\/input\/mushroom-classification\/mushrooms.csv\")\ndf.head()","4d50b0ee":"#find the missing values\ndf.isna().sum()","bf98a8bd":"#copy the dataframe to keep the real one.\ndf1 = df.copy()","12d13f42":"df1.info()","d5f8e77b":"#Let's convert them into category values\nfor label,content in df1.items():\n  if pd.api.types.is_string_dtype(content):\n    df1[label]=content.astype(\"category\").cat.as_ordered()","e9dbb4e9":"df1.info()","9efed0ff":"#Turn categorical values into numbers\nfor label, content in df1.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        df1[label] =pd.Categorical(content).codes","6129c7e8":"df1","6a607cfc":"#split data into X,y\nX=df1.drop(\"class\", axis=1)\ny=df1[\"class\"]","65af5193":"#Correlation matrix\nfig = plt.subplots(figsize=(15,8))\n\nsns.heatmap(X.corr(),\n            annot=True,\n            fmt=\"0.2f\",\n            cmap=\"inferno\")","3d57be10":"X.nunique()","4f40a4a3":"#drop not important features\nX=df1.drop(\"class\", axis=1)\ndrops_list = [\"veil-type\", \"cap-shape\", \"cap-color\", \"veil-color\", \"gill-attachment\"]\nX.drop(drops_list, axis=1, inplace=True)","f44bf110":"#compare all of features dataframe with target \nfor label in X.keys():\n    pd.crosstab(df1[label],\n           df1[\"class\"]).plot(kind=\"bar\",\n                             color=[\"blue\", \"salmon\"],\n                             figsize=(4,3))\n    plt.title(label)","f581b3f6":"#modeling with KModes\nkmodes = KModes(n_clusters=2, init='Cao', verbose=1)\nclusters = kmodes.fit_predict(X)\nclusters","4ab2d1f2":"#KModes evaluation\nrand_score(y,clusters)","185bdb55":"#Modeling with KPrototypes\nkproto = KPrototypes(n_clusters=2, init='Cao', verbose=0, random_state=42,max_iter=20, n_init=50,n_jobs=-2) \nclusters1 = kproto.fit_predict(X, categorical=[0])","d2e1bc37":"#KPrototypes evaluation\nrand_score(y,clusters1)","1f8095b0":"#### NICE! No missing values :))","45c88341":"## Visualizing","b9b28155":"#### NOTE\n* We will use KModes and KPrototype because it is based on categories but KMeans is based on distance and it is not suitable for our dataset\n\n* k-modes is used for clustering categorical variables. It defines clusters based on the number of matching categories between data points. (This is in contrast to the more well-known k-means algorithm, which clusters numerical data based on Euclidean distance.) The k-prototypes algorithm combines k-modes and k-means and is able to cluster mixed numerical \/ categorical data.","0ffb0aa7":"## Data Description\n\n* cap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n* cap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n* cap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n* bruises: bruises=t,no=f\n* odor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n* gill-attachment: attached=a,descending=d,free=f,notched=n\n* gill-spacing: close=c,crowded=w,distant=d\n* gill-size: broad=b,narrow=n\n* gill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n* stalk-shape: enlarging=e,tapering=t\n* stalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n* stalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n* stalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n* stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n* stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n* veil-type: partial=p,universal=u\n* veil-color: brown=n,orange=o,white=w,yellow=y\n* ring-number: none=n,one=o,two=t\n* ring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n* spore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n* population: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n* habitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d\n","81a66f18":"## Data Modeling","3de03ca8":"Class 1 is `p` and \nClass 0 is `e`","6d875893":"## Add Dataset","1f13d694":"### The best Rand Index is 81.80 (KModes)","8da27b8c":"## Import Libraries","fbc865d8":"## EDA"}}