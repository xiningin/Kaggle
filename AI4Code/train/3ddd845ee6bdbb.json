{"cell_type":{"8bf30b2a":"code","4cb51ee4":"code","3bfe467e":"code","17a9a46c":"code","c2886f01":"code","2dcde1a8":"code","188b20a7":"code","c59911a3":"code","7ac51ed1":"code","a08e6a3a":"code","2f263f8b":"code","e0380415":"code","e4c19e3a":"code","6e14b94f":"code","e1ca0a32":"code","09f1dce4":"code","40d0120f":"code","a8b35266":"code","d12f4bdc":"code","938ddedc":"code","92b1446d":"code","8f436ef1":"code","2b9dde86":"code","89a9415e":"code","72e97900":"code","a9b951ee":"code","10943dcb":"code","cc4613af":"markdown","b1f6a311":"markdown","6fdc91f9":"markdown","42b41dff":"markdown","b9865fc5":"markdown","c9cedecb":"markdown","7a34a711":"markdown","e2a73d78":"markdown","6c9ad771":"markdown","c78c4f93":"markdown","b0e27866":"markdown","dedf3ae1":"markdown","568e8a51":"markdown","3a8374c2":"markdown","9d190504":"markdown","70ff61d6":"markdown","fecd4c7b":"markdown"},"source":{"8bf30b2a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4cb51ee4":"df = pd.read_csv(\"\/kaggle\/input\/customer-segmentation-tutorial-in-python\/Mall_Customers.csv\")","3bfe467e":"df","17a9a46c":"df.info()","c2886f01":"df.describe()","2dcde1a8":"sns.countplot(df.Gender)","188b20a7":"print(df[df.Gender==\"Female\"][\"Spending Score (1-100)\"].mean())\nprint(df[df.Gender==\"Male\"][\"Spending Score (1-100)\"].mean())","c59911a3":"sns.distplot(df.Age, kde = False)","7ac51ed1":"sns.distplot(df[\"Annual Income (k$)\"], kde = False)","a08e6a3a":"sns.distplot(df[\"Spending Score (1-100)\"], kde = False)","2f263f8b":"sns.scatterplot(x = df[\"Annual Income (k$)\"], y =df[\"Spending Score (1-100)\"], hue=df.Gender)","e0380415":"sns.scatterplot(x = df.Age, y =df[\"Spending Score (1-100)\"], hue=df.Gender)","e4c19e3a":"sns.pairplot(df)","6e14b94f":"income_spending = df.iloc[:,3:5]\nincome_spending","e1ca0a32":"from sklearn.cluster import KMeans\n\nwcss = []\nfor i in range(1, 11):\n    km = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n    km.fit(income_spending)\n    wcss.append(km.inertia_)\n    \nplt.plot(range(1, 11), wcss)\nplt.title('The Elbow Method', fontsize = 20)\nplt.xlabel('No. of Clusters')\nplt.ylabel('wcss')\nplt.show()","09f1dce4":"km = KMeans(n_clusters = 5, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\nincome_spending[\"cluster\"] = km.fit_predict(income_spending)\nincome_spending","40d0120f":"cust_dict = {0:\"target\", 1:\"usual\", 2:\"ideal\", 3:\"extravagant\", 4:\"possible\"}\nincome_spending.cluster = income_spending[\"cluster\"].map(cust_dict)","a8b35266":"sns.scatterplot(x = \"Annual Income (k$)\", y = \"Spending Score (1-100)\", hue = \"cluster\", data = income_spending, palette=\"tab10\")\nplt.scatter(km.cluster_centers_[:,0], km.cluster_centers_[:, 1], s = 50, c = 'blue' , label = 'centeroid')\nplt.legend(bbox_to_anchor=(1, 1.05))","d12f4bdc":"age_spending = df[[\"Age\", \"Spending Score (1-100)\"]]","938ddedc":"age_spending","92b1446d":"wcss = []\nfor i in range(1, 11):\n    km = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n    km.fit(age_spending)\n    wcss.append(km.inertia_)\n    \nplt.plot(range(1, 11), wcss)\nplt.title('The Elbow Method', fontsize = 20)\nplt.xlabel('No. of Clusters')\nplt.ylabel('wcss')\nplt.show()","8f436ef1":"km = KMeans(n_clusters = 4, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n\nage_spending[\"cluster\"] =  km.fit_predict(age_spending)\ncust_dict = {0:\"target (young)\", 1:\"ideal\", 2:\"potential\", 3:\"target(old)\"}\nage_spending[\"cluster\"] = age_spending[\"cluster\"].map(cust_dict)\n\nage_spending","2b9dde86":"sns.scatterplot(x=\"Age\", y=\"Spending Score (1-100)\", hue=\"cluster\", data=age_spending, palette=\"tab10\")\nplt.scatter(km.cluster_centers_[:,0], km.cluster_centers_[:, 1], s = 50, c = 'blue' , label = 'centeroid')\nplt.legend(bbox_to_anchor=(1, 1))","89a9415e":"df3d = df[[\"Age\", \"Annual Income (k$)\", \"Spending Score (1-100)\"]]","72e97900":"km = KMeans(n_clusters = 5, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\ndf3d[\"cluster\"] = km.fit_predict(df3d)\ncust_dict = {0:\"ideal\", 1:\"possible\", 2:\"usual\", 3:\"extravagant\", 4:\"target\"}\ndf3d.cluster = df3d.cluster.map(cust_dict)\ndf3d","a9b951ee":"import plotly.graph_objs as go","10943dcb":"import plotly.express as px\n\nfig = px.scatter_3d(df3d, x=\"Annual Income (k$)\", y=\"Spending Score (1-100)\", z=\"Age\",\n                    color='cluster', title=\"Mall Customer Segmentation\")\n\nfig.show()","cc4613af":"How about combining all features?","b1f6a311":"Labelling clusters","6fdc91f9":"It seems that we can do some clustering to divide the customer types, so we can focus on which customer to be the sales target.","42b41dff":"I will divide clusters from two plot above, I will use elbow method to determine how many clusters I will use.\n\nFirst, let's divide the customers based on their **income and spending**","b9865fc5":"# KMeans Clustering","c9cedecb":"well yes, but not that much\n\nhow about the distribution of other features?","7a34a711":"This notebook contains KMeans clustering for mall customer segmentation. Please give me suggestions to improve this notebook :)","e2a73d78":"Plotting the clusters","6c9ad771":"It seems that five is the best number","c78c4f93":"**That's it!**, please give me your suggestions to improve this notebook :)","b0e27866":"Let's inspect the distribution of each features","dedf3ae1":"The data is already clean, we don't have to do further preprocessing","568e8a51":"Now, I will divide the customers based on their Age and Spending","3a8374c2":"I think female might have higher spending score","9d190504":"Four is the best number","70ff61d6":"ummm.. can't tell much,\n\nlet's plot spending score with annual income and age","fecd4c7b":"# Inspecting Dataset"}}