{"cell_type":{"0fd433a0":"code","9df2be26":"code","21debdd5":"code","6b2a77b6":"code","157afa86":"code","5469be15":"code","f1ef3242":"code","3a675872":"code","1c22c201":"code","1fc08ccc":"markdown","c68450ec":"markdown"},"source":{"0fd433a0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json # to read json\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n\n# Any results you write to the current directory are saved as output.","9df2be26":"def squad_json_to_dataframe_train(input_file_path, record_path = ['data','paragraphs','qas','answers'],\n                           verbose = 1):\n    \"\"\"\n    input_file_path: path to the squad json file.\n    record_path: path to deepest level in json file default value is\n    ['data','paragraphs','qas','answers']\n    verbose: 0 to suppress it default is 1\n    \"\"\"\n    if verbose:\n        print(\"Reading the json file\")    \n    file = json.loads(open(input_file_path).read())\n    if verbose:\n        print(\"processing...\")\n    # parsing different level's in the json file\n    js = pd.io.json.json_normalize(file , record_path )\n    m = pd.io.json.json_normalize(file, record_path[:-1] )\n    r = pd.io.json.json_normalize(file,record_path[:-2])\n    \n    #combining it into single dataframe\n    idx = np.repeat(r['context'].values, r.qas.str.len())\n    ndx  = np.repeat(m['id'].values,m['answers'].str.len())\n    m['context'] = idx\n    js['q_idx'] = ndx\n    main = pd.concat([ m[['id','question','context']].set_index('id'),js.set_index('q_idx')],1,sort=False).reset_index()\n    main['c_id'] = main['context'].factorize()[0]\n    if verbose:\n        print(\"shape of the dataframe is {}\".format(main.shape))\n        print(\"Done\")\n    return main","21debdd5":"def squad_json_to_dataframe_dev(input_file_path, record_path = ['data','paragraphs','qas','answers'],\n                           verbose = 1):\n    \"\"\"\n    input_file_path: path to the squad json file.\n    record_path: path to deepest level in json file default value is\n    ['data','paragraphs','qas','answers']\n    verbose: 0 to suppress it default is 1\n    \"\"\"\n    if verbose:\n        print(\"Reading the json file\")    \n    file = json.loads(open(input_file_path).read())\n    if verbose:\n        print(\"processing...\")\n    # parsing different level's in the json file\n    js = pd.io.json.json_normalize(file , record_path )\n    m = pd.io.json.json_normalize(file, record_path[:-1] )\n    r = pd.io.json.json_normalize(file,record_path[:-2])\n    \n    #combining it into single dataframe\n    idx = np.repeat(r['context'].values, r.qas.str.len())\n#     ndx  = np.repeat(m['id'].values,m['answers'].str.len())\n    m['context'] = idx\n#     js['q_idx'] = ndx\n    main = m[['id','question','context','answers']].set_index('id').reset_index()\n    main['c_id'] = main['context'].factorize()[0]\n    if verbose:\n        print(\"shape of the dataframe is {}\".format(main.shape))\n        print(\"Done\")\n    return main","6b2a77b6":"# training data\ninput_file_path = '..\/input\/train-v1.1.json'\nrecord_path = ['data','paragraphs','qas','answers']\ntrain = squad_json_to_dataframe_train(input_file_path=input_file_path,record_path=record_path)","157afa86":"train.head()","5469be15":"# dev data\ninput_file_path = '..\/input\/dev-v1.1.json'\nrecord_path = ['data','paragraphs','qas','answers']\nverbose = 0\ndev = squad_json_to_dataframe_dev(input_file_path=input_file_path,record_path=record_path)","f1ef3242":"dev.head()","3a675872":"dev.columns","1c22c201":"train.columns","1fc08ccc":"We have to define a different fuctions for Dev data because the the dev data is slightly different mainly there are multiple possible answer for a single question","c68450ec":"# **Converting data in json format to pandas dataframe format**\nSQuAD dataset is vary convoluted in json format, lets untangle the data and convert it to clean dataframe.\n- I have written different functions for training and dev data as dev data have multiple answers for same questions unlike training data have only single..\n- Try the code to understad the data better"}}