{"cell_type":{"d30d9875":"code","6a11ebce":"code","044af385":"code","fcf0fe4c":"code","19928a02":"code","7c479c0c":"code","a20bdeb3":"code","37b9d652":"code","5f93193f":"code","13ba3e5b":"code","56d71bcc":"code","3a5545eb":"code","2c30f360":"code","ba7e1e3a":"code","40ae2e73":"code","4cb19c3e":"code","9d697949":"code","6f9d1827":"code","501b2c90":"code","cbf3cdea":"code","f4a61099":"code","b6bd380b":"code","25d77d9f":"code","d857f27d":"code","9229b3d3":"code","7cddd3de":"code","d2db5978":"code","cf32a7a9":"code","4b1f9d3c":"code","9cbbcac1":"code","9593844f":"code","0a3f8a3e":"code","c27df86c":"code","6c7f4125":"code","80e5b845":"code","04893bdb":"code","23b09a94":"code","c976bf98":"code","eda72655":"code","8beb60cd":"code","6dfda595":"markdown","5a75eb36":"markdown","c638cb80":"markdown","88c04e88":"markdown","2966eee9":"markdown","dfff8986":"markdown","8b30b70d":"markdown","aea6dd65":"markdown","5b0d814a":"markdown","9a28393e":"markdown","9564ef82":"markdown","402c24e7":"markdown","34da559f":"markdown","84af60ea":"markdown","2a354aaf":"markdown","350c394e":"markdown","bcfc405d":"markdown","1757d4ba":"markdown"},"source":{"d30d9875":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a11ebce":"data = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')\ndata.head(5)","044af385":"#We get information of data. There are 303 entries in \ndata.info()","fcf0fe4c":"#We're changing the names of the given columns to make it more understandable.\ndata.columns = ['age', 'sex', 'chest_pain_type', 'resting_blood_pressure', 'cholesterol', 'fasting_blood_sugar', 'rest_ecg', 'max_heart_rate_achieved',\n       'exercise_induced_angina', 'st_depression', 'st_slope', 'num_major_vessels', 'thalassemia', 'target']\ndata.head(10)","19928a02":"#We're looking for data types.\ndata.dtypes","7c479c0c":"data.corr()","a20bdeb3":"data.max_heart_rate_achieved.plot(kind = 'line', color = 'g',label = 'max_heart_rate_achieved',linewidth=1,alpha = 1,grid = True,linestyle = 'solid')\ndata.age.plot(kind = 'line',color = 'r',label = 'age',linewidth=1, alpha = 1,grid = True,linestyle = 'solid')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","37b9d652":"font = {'family': 'Times New Roman',\n        'color':  'black',\n        'weight': 'normal',\n        'size': 12,}\nplt.scatter(data.max_heart_rate_achieved,data.age,color=\"r\",alpha=0.5)\nplt.xlabel('max_heart_rate_achieved')\nplt.ylabel('Age')\nplt.title('Relationship between Max_heart_rate_achieved and Age  ',fontdict=font, loc='center')\n","5f93193f":"# Histogram\n# bins = number of bar in figure\ndata.age.plot(kind = 'hist',bins = 100,figsize = (10,10),color='g',rwidth = 0.5,histtype='bar')\nplt.title('Histogram of ages')\nplt.show()","13ba3e5b":"dictionary = {\n    \"car\" : \"Ford\",\n    \"motor\" : \"Harley Davidson\"\n}\ndictionary['Airplane'] = 'Boeing'\nprint(dictionary)\nprint(dictionary.keys())\nprint(dictionary.values())","56d71bcc":"#LOOP DATA STRUCTURES\nprint(4<3)\nprint(49-3 != 5)\n#code_1\nx= data['age'] < 70\ndata[x]\n#code_2\ndata[(data['age']<40) & (data['sex'] == 0)]\n","3a5545eb":"data[np.logical_and(data['age']>70,data['max_heart_rate_achieved']>150)]\n#data[(data['age']>70) & (data['max_heart_rate_achieved']>150)]","2c30f360":"\nfor index,value in data[['age']][0:1].iterrows(): #It appears that the index value is 0.\n    print(index,\" : \",value)\nfor key,value in dictionary.items(): #When using #dict.item, both key and value are given. like index value in list\n    print(key,\" : \",value)\nprint('')","ba7e1e3a":"average = sum(data.age)\/len(data.age)\nprint(\"Average of age:\",average)\ndata[\"age_level\"] = [\"high\" if i > average else \"low\" for i in data.age]#\ndata.loc[:10,[\"age_level\",\"age\"]]","40ae2e73":"#User defined function\n#def say(x): \n #   return x*6\n#say(2)\n\n#########Example_2#######\ndef liv(name,age,state = \"Istanbul\" ):\n    print(\"Hi my name is {} and I live in {} and I am {} years old\".format(name,state,age))\nliv(\"Burak\",25)","4cb19c3e":"a=4#global scope\ndef f():\n    a=5 #local scope\n    return a*2\nf()","9d697949":"def average():\n     def toplam():\n        x=5\n        y=7\n        return x+y\n     return toplam()\/2\nprint(average())","6f9d1827":"#def f(a,b=2,c=5):\n #  return a+b+c\n#print(f(5))\n#print(f(2,3,2))\n##########################\ndef f(*args): #args da bir\u00e7ok say\u0131sal parametre girmemizi sa\u011fl\u0131yor.\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n\ndef a(**kwargs):\n    for key,value in kwargs.items():\n        print(key ,\"\",value )\na(country = 'spain', team = 'barcelona',population = 23, hair_color= 'brown') #kwargs bir\u00e7ok paramtere konmas\u0131n\u0131 sa\u011fl\u0131yor.","501b2c90":"#topla = lambda x: x+x #lambda function\n#topla(6)\nnumber_list = [1,2,3] #lambda gibi fakat birden fazla parametre alabiliyor.\ny = map(lambda x:x**2,number_list) #t\u00fcm itemler i\u00e7in kullan\u0131r. Lambda fonksiyona uyguluyor ve y i\u00e7inde tutuyor. Birden \u00e7ok kez kullan\u0131l\u0131r.\nprint(list(y))","cbf3cdea":"list_1 = ['maltepe','pendik','kartal','kadik\u00f6y']\nit = iter(list_1) #list_1 i itere ettik.\nprint(next(it)) \nprint(next(it))\nprint(next(it))\nprint(next(it))\n\n","f4a61099":"# zip example\nlist1 = ['Istanbul','Sakarya','Eskisehir','Ankara']\nlist2 = [34,54,26,6]\nlist3 = ['Pendik','Serdivan','Tepebasi','Cankaya']\nresult =zip(list1,list2)\ncityandno_set = set(result)\nprint(cityandno_set)\nresult_1 =zip(list2,list3)\nnoandvillage_set = set(result_1)\nprint(noandvillage_set)\nunzip = zip(*list1) #\nprint(*list1)","b6bd380b":"#list1 = [1,2,3,4]\n#list2 = [i+1 for i in list1]\n#print(list2)\nnum_list = [23,6,56,86,97]\nnum2 = [ i*2 if i>20 else i-5 if i<10 else i == 0 for i in num_list ]\nprint(num2)","25d77d9f":"#data.tail() #shows last 5 rows\n#data.shape #shows size of data\n#data.columns #shows titles\n#data.head() #shows first 5 rows\n","d857f27d":"data.boxplot(column='max_heart_rate_achieved', by='sex')","9229b3d3":"# Firstly I create new data from pokemons data to explain melt nore easily.\ndata_new = data.head()    \ndata_new\n# lets melt\n# id_vars = what we do not wish to melt\n# value_vars = what we want to melt\nmelted = pd.melt(frame=data_new,id_vars = 'sex', value_vars= ['max_heart_rate_achieved','cholesterol']) # \nmelted\n# Index is name\n# I want to make that columns are variable\n# Finally values in columns are value\n#melted.pivot(index = 'sex', columns = 'variable',values='value')","7cddd3de":"data1 = data.head()\ndata2 = data.tail()\nconc_data_row = pd.concat([data1,data2],axis=0,ignore_index=True)\nconc_data_row","d2db5978":"data_1 = data['age'].head()\ndata_2 = data['sex'].head()\nconc_data_col = pd.concat([data_1,data_2], axis =1) #axis = 1 adds \nconc_data_col","cf32a7a9":"data.dtypes","4b1f9d3c":"data['age'] = data['age'].astype('category') #Turned to data type of age from integer to category\ndata['st_depression'] = data['st_depression'].astype('int') #Turned o data type of st_depression from float to integer\ndata.dtypes","9cbbcac1":"# Lets look at does pokemon data have nan value\n# As you can see there are 800 entries. However Type 2 has 414 non-null object so it has 386 null object.\ndata.info()","9593844f":"# Lets check sex\ndata[\"cholesterol\"].value_counts(dropna =False)\n#  you can see a number, if there are 386 NAN value","0a3f8a3e":"# Lets drop nan values\ndata1=data   # also we will use data to fill missing value so I assign it to data1 variable\ndata1[\"cholesterol\"].dropna(inplace = True)  # Remove missing values.\n#inplace = True means we do not assign it to new variable. Changes automatically assigned to data\n\n# So does it work ? ","c27df86c":"#  Lets check with assert statement\n# Assert statement:\nassert 1==1 # return nothing because it is true\n#assert 1==2 # returning error because it is wrong","6c7f4125":"assert  data['cholesterol'].notnull().all() # returns nothing because we drop nan values","80e5b845":"data[\"cholesterol\"].fillna('empty',inplace = True) #Fill NA\/NaN values using the specified method.","04893bdb":"# # With assert statement we can check a lot of thing. For example\n# assert data.columns[1] == 'Name'\nassert data.cholesterol.dtypes == np.int","23b09a94":"# We can build data frames from csv as we did earlier.\n# Also we can build dataframe from dictionaries\n# zip() method: This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables.\n# Adding new column\n# Broadcasting: Create new column and assign a value to entire column","c976bf98":"#data frames from dictionary\nteam = [\"Barcelona\",\"Real Madrid\"]\nplayer = [\"Messi\",\"Ronaldo\"]\nlist_label = [\"Team\",\"Player\"]\nlist_col = [team,player]\nzipped = list(zip(list_label,list_col))\ndata_dict = dict(zipped)\ndf = pd.DataFrame(data_dict)\ndf","eda72655":"df[\"captain\"] = [\"xavi\",\"ramos\"]\ndf","8beb60cd":"df[\"Captain\"].dropna(inplace = True)","6dfda595":"There are two scopes in here. One of them is used if there is no local scope that name is the global scope. But if there is a local scope, it is used in the function.","5a75eb36":"We can consider that the histogram of the age of these volunteers. According to this table, we conclude that there are no many young and old people in this research. People who has medium age are in the majority. This histogram graph was seen this situation confidentally. ","c638cb80":"The zip function returns an iterator. It makes that from the shortest way. What does it mean? If we have three parameters in the first list and we have five parameters in the second list, the result list will have three parameters with zip function. ","88c04e88":"I have seen that relationship between sex and maximum heart rate achieved. It was observed some outliers both male and female. The interval of maximum heart rate achieved for men is wider than for females.  This code helps to show this information.","2966eee9":"Firstly, we load the data. Then, we take first five column to examine. Some of these title are not clear. Let's look at the meaning of these titles:\n\n**age**: The person's age in years\n\n**sex**: The person's sex (1 = male, 0 = female)\n\n**cp**: The chest pain experienced (Value 1: typical angina, Value 2: atypical angina, Value 3: non-anginal pain, Value 4: asymptomatic)\n\n**trestbps**: The person's resting blood pressure (mm Hg on admission to the hospital)\n\n**chol**: The person's cholesterol measurement in mg\/dl\n\n**fbs**: The person's fasting blood sugar (> 120 mg\/dl, 1 = true; 0 = false)\n\n**restecg**: Resting electrocardiographic measurement (0 = normal, 1 = having ST-T wave abnormality, 2 = showing probable or \ndefinite left ventricular hypertrophy by Estes' criteria)\n\n**thalach**: The person's maximum heart rate achieved\n\n**exang**: Exercise induced angina (1 = yes; 0 = no)\n\n**oldpeak**: ST depression induced by exercise relative to rest ('ST' relates to positions on the ECG plot. See more here)\n\n**slope**: the slope of the peak exercise ST segment (Value 1: upsloping, Value 2: flat, Value 3: downsloping)\n\n**ca**: The number of major vessels (0-3)\n\n**thal**: A blood disorder called thalassemia (3 = normal; 6 = fixed defect; 7 = reversable defect)\n\n**target**: Heart disease (0 = no, 1 = yes)","dfff8986":"Here, I took the first 5 data from sex and age data frames. And I added two of them into columns.","8b30b70d":"Here, I took the first and last 5 five lines from data. I concatenated them in one table. ","aea6dd65":"Here, we found the average of the first 10 personages. We made this with the list comprehension method. In addition, a form of age_level was observed that the output value. It showed that the ages are high or low. ","5b0d814a":"Two people who were older than 70 years and had a maximum heart rate above 150 were identified.","9a28393e":"At the top of the code, there is a function in which given numbers were multiplied by 6. I wrote this code basically. That can be improved for difficult calculations. And at the under code, I defined the code which makes sentences. When I was doing this code,  I have attached importance to taking name and age information from users. ","9564ef82":"If we use  *args , it can help to enter different numbers of parameters. The numbers of parameter can be one or more. When we want to use this in dictionary, it turns to **kwargs. ","402c24e7":"We filtered out those aged over 70 and females.","34da559f":"In fact, there is a direct, though not a direct, link between maximum heart rate and age. This may be due to a decrease in maximum heart rate as age increases.","84af60ea":"It was created dictionary. And then there was seen that three different keys and values. It used for storing data values in keys. \n\n","2a354aaf":"That is a nested function that has two or more functions in it. In this code, I have written code that finds the summing of numbers firstly. Then it goes into the second function that calculates the averages of numbers using the dividing operator.","350c394e":"It provides to write code shortly. Thus we avoid the long lines of codes. The first comment code has meant the sum of two same numbers. The code of the bottom helped to take many variables from the given list. That helps us with a complicated situation.","bcfc405d":"There is a conditional statement. This statement defines that it has different calculations with changes of numbers.","1757d4ba":"It was determined how the title will be and in which font. In this graph, the maximum heart rate achieved by age is shown. As can be seen, with increasing age, a decrease in the maximum heart rate is observed."}}