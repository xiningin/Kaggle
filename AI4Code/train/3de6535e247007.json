{"cell_type":{"76296d44":"code","91b27664":"code","78c63854":"code","0390ff76":"code","7e95ddcf":"code","48189f72":"code","84290152":"code","c9aa2785":"code","24030055":"code","1fe503d9":"code","19a72997":"code","0048ee08":"code","2db277fd":"code","290da303":"code","80341b4d":"code","a1fe5613":"code","7e170612":"code","222f3452":"code","f5d71666":"code","ae4958c2":"code","fb4f340b":"code","ea8d4c27":"code","b0e38d40":"code","167b82e1":"code","cdaf658c":"code","7f11aa98":"code","b0ecfc33":"code","a2c32632":"code","2e69311c":"code","6525f11c":"code","95ad00b8":"code","dfd82c3a":"code","4dd1d008":"code","7a718928":"code","32dd6bbb":"code","6c3a76d8":"code","15294769":"code","ab176dce":"code","512999c2":"code","06a913e0":"code","c562dd94":"code","5ecc0a42":"code","6c32a4e0":"code","9980413a":"code","9df4e9e8":"code","a2e0c0e3":"code","f7390355":"code","4521261e":"code","a0844a54":"code","49b1b258":"code","d5f888c4":"code","1cbcf392":"code","bb3da3a1":"code","6340537c":"code","24561034":"code","4efc7754":"code","fffeac68":"code","76471ca0":"code","9f46eca5":"code","4002f148":"code","d2bd123c":"code","75fe94fb":"code","7e17c9d6":"code","801becd6":"code","8cbaf93a":"code","f54da472":"code","2aee89a8":"code","6a142c3e":"code","40fd481b":"code","c3e31c93":"code","527d4568":"code","fb8f87ae":"code","23d5459c":"code","4570e195":"code","744f9030":"code","3639800d":"code","65b342da":"code","041abd00":"code","22e19c6c":"code","edab6731":"code","ae70f65a":"code","992f96c7":"code","2787b8e4":"code","49ac23bc":"code","65b8b4f9":"code","371ff1c1":"code","b14db469":"code","3552d5b1":"code","2f49ae43":"code","5a47d29d":"code","9c6c0818":"code","d8ef0482":"code","2e72bd6e":"code","3de85b8e":"code","f0a0ef9e":"code","f593fd0f":"code","a061bad0":"code","732febca":"code","3d81e86f":"code","0ddcace5":"code","1f4a2052":"code","bae82bd7":"code","cd0febe8":"code","76144b9e":"code","4da8a142":"code","c3cb3d73":"code","8f35918b":"code","f455a673":"code","2cf9a072":"code","cdf6799f":"code","07bb275f":"code","5f4841d2":"code","ce57d079":"code","1574acf6":"code","4abaf928":"code","5c600278":"code","3fc63997":"code","45fee2fb":"code","5b9ec38f":"code","50096676":"code","375e975e":"code","43fc6155":"code","f6133c95":"code","771f22ca":"code","9ec493c9":"code","26d9376f":"code","af4a7265":"code","2e339728":"code","815e535b":"code","31053893":"code","5e76a93f":"code","b1e8afc4":"code","047e0ffa":"code","b35d9f5f":"code","d6a09940":"code","6742d860":"code","bb5892f6":"code","5bd47bf7":"code","7b40f3c0":"code","46f23eee":"code","a32323b7":"code","ba3dbba6":"code","6f280bbe":"code","74933cb7":"code","a2e05f61":"code","a84b4873":"code","60e89c92":"code","6963f206":"code","1981cdbb":"code","43037cdb":"code","8ec83072":"code","8797919b":"code","445afdf5":"code","4f0b352b":"code","1b71ac67":"code","90c436f3":"code","89e9246f":"code","f6b45d7a":"markdown","99986c99":"markdown","c43354c1":"markdown","6eeefd4f":"markdown","945d56e5":"markdown","567aa596":"markdown","5350334e":"markdown","a2003e02":"markdown","10a19eff":"markdown","d4367ad4":"markdown","86244551":"markdown","819f38da":"markdown","9d53528d":"markdown","968646f4":"markdown","edc4e665":"markdown","3df56dab":"markdown","b30169f1":"markdown","55d2eac0":"markdown","f2eaba3f":"markdown","ea2efc62":"markdown","726af272":"markdown","4f695f09":"markdown","8b98fa95":"markdown","3be7c0c9":"markdown","eb333704":"markdown","64c0aeca":"markdown","f7462cfb":"markdown","54b0cf25":"markdown","c1435d01":"markdown","1e7456cb":"markdown","160f6128":"markdown","e02e7068":"markdown","685465fb":"markdown","5b171b45":"markdown","36cab695":"markdown","d98ea5dc":"markdown","321de100":"markdown","18bbadcb":"markdown","f8b9348e":"markdown"},"source":{"76296d44":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nimport pickle\nimport warnings\nwarnings.filterwarnings('ignore')","91b27664":"# Toread xlsx files\n\n!pip install openpyxl","78c63854":"# Loading Train dataset\n\ndf = pd.read_excel(\"\/kaggle\/input\/flight-fare-prediction-mh\/Data_Train.xlsx\")\ndf.head()","0390ff76":"# Getting info\n\ndf.info()","7e95ddcf":"# Checking for null values\n\ndf.isna().sum()","48189f72":"# Loading testdata\n\ntt = pd.read_excel(\"\/kaggle\/input\/flight-fare-prediction-mh\/Test_set.xlsx\")\ntt.head()","84290152":"tt.info()","c9aa2785":"tt.isna().sum()","24030055":"# Histplot of price column\n\nplt.figure(figsize = (15 , 8))\nsns.histplot(data = df , x = \"Price\" , bins = 50)","1fe503d9":"# Getting Unique values , value_counts\n\nfor i in df.columns:\n    print(f\"The number of unique values in {i} column is\/are : {len(df[i].unique())}\")\n    print(\"\\n\")\n    print(f\"The unique values in {i} column is\/are : {df[i].unique()}\")\n    print(\"\\n\")\n    print(f\"The value counts for each value in {i} column is\/are :  \\n{df[i].value_counts()}\")\n    print(\"\\n\\n\")\n    print(\"*\"*100)\n    print(\"\\n\\n\")","19a72997":"df[\"Date_of_Journey\"] = pd.to_datetime(df[\"Date_of_Journey\"])\ndf[\"Dep_Time\"] = pd.to_datetime(df[\"Dep_Time\"])\ndf[\"Arrival_Time\"] = pd.to_datetime(df[\"Arrival_Time\"])","0048ee08":"tt[\"Date_of_Journey\"] = pd.to_datetime(tt[\"Date_of_Journey\"])\ntt[\"Dep_Time\"] = pd.to_datetime(tt[\"Dep_Time\"])\ntt[\"Arrival_Time\"] = pd.to_datetime(tt[\"Arrival_Time\"])","2db277fd":"df.info()","290da303":"tt.info()","80341b4d":"df[\"day\"] = df[\"Date_of_Journey\"].dt.day\ndf[\"Month\"] = df[\"Date_of_Journey\"].dt.month\ndf[\"year\"] = df[\"Date_of_Journey\"].dt.year","a1fe5613":"tt[\"day\"] = tt[\"Date_of_Journey\"].dt.day\ntt[\"Month\"] = tt[\"Date_of_Journey\"].dt.month\ntt[\"year\"] = tt[\"Date_of_Journey\"].dt.year","7e170612":"df[\"dep_hour\"] = df[\"Dep_Time\"].dt.hour\ndf[\"dep_minutes\"] = df[\"Dep_Time\"].dt.minute","222f3452":"tt[\"dep_hour\"] = tt[\"Dep_Time\"].dt.hour\ntt[\"dep_minutes\"] = tt[\"Dep_Time\"].dt.minute","f5d71666":"df[\"arr_hour\"] = df[\"Arrival_Time\"].dt.hour\ndf[\"arr_minutes\"] = df[\"Arrival_Time\"].dt.minute","ae4958c2":"tt[\"arr_hour\"] = tt[\"Arrival_Time\"].dt.hour\ntt[\"arr_minutes\"] = tt[\"Arrival_Time\"].dt.minute","fb4f340b":"def duration_convertion(x):\n    if len(x.split()) == 2:\n        one = int(x.split()[0][:-1])\n        two = int(x.split()[1][:-1])\n        return one * 60 + two\n    else:\n        return int(x[:-1]) * 60","ea8d4c27":"df[\"Duration\"] = df[\"Duration\"].apply(duration_convertion)","b0e38d40":"df[\"Duration\"]","167b82e1":"tt[\"Duration\"] = tt[\"Duration\"].apply(duration_convertion)","cdaf658c":"tt[\"Duration\"]","7f11aa98":"df[\"Route\"][4].split(\"\u2192\")","b0ecfc33":"tt[\"Route\"][4].split(\"\u2192\")","a2c32632":"df.iloc[np.where(df[\"Route\"].isnull())[0][0]]","2e69311c":"df.loc[(df[\"Source\"] == \"Delhi\") & (df[\"Destination\"] == \"Cochin\")][\"Total_Stops\"].value_counts()","6525f11c":"df[\"Total_Stops\"].fillna(\"1 stop\" , inplace = True)","95ad00b8":"df.loc[(df[\"Source\"] == \"Delhi\") & (df[\"Destination\"] == \"Cochin\")][\"Total_Stops\"].value_counts()","dfd82c3a":"df.loc[(df[\"Source\"] == \"Delhi\") & (df[\"Destination\"] == \"Cochin\")][\"Route\"].value_counts()","4dd1d008":"df[\"Route\"].fillna(\"DEL \u2192 BOM \u2192 COK\" , inplace = True)","7a718928":"df.loc[(df[\"Source\"] == \"Delhi\") & (df[\"Destination\"] == \"Cochin\")][\"Route\"].value_counts()","32dd6bbb":"sam = []\nfor i in range(len(df)):\n    sam.append(df[\"Route\"][i].split(\"\u2192\"))","6c3a76d8":"sam","15294769":"sam_tt = []\nfor i in range(len(tt)):\n    sam_tt.append(tt[\"Route\"][i].split(\"\u2192\"))","ab176dce":"sam_tt","512999c2":"# Getting max number of stops \/ routes\n\nlens = []\nfor i in sam:\n    lens.append((len(i) , i))  \nmax(lens)[0]   ","06a913e0":"for i in lens:\n    if i[0] == 6:\n\n        print(i[1])","c562dd94":"# Filling all route columns with \"None\" values\n\nfor i in sam:\n    while len(i) <= 5:\n        i.append(\"None\")","5ecc0a42":"for i in sam_tt:\n    while len(i) <= 5:\n        i.append(\"None\")","6c32a4e0":"sam","9980413a":"sam_tt","9df4e9e8":"df_routes = pd.DataFrame(sam , columns = [\"R1\" , \"R2\" , \"R3\" , \"R4\" , \"R5\" , \"R6\"])\ndf_routes","a2e0c0e3":"tt_routes = pd.DataFrame(sam_tt , columns = [\"R1\" , \"R2\" , \"R3\" , \"R4\" , \"R5\" , \"R6\"])\ntt_routes","f7390355":"df_routes[\"Source\"] = \"Train\"\ntt_routes[\"Source\"] = \"Test\"","4521261e":"routes = pd.concat([df_routes , tt_routes])","a0844a54":"routes","49b1b258":"from sklearn.preprocessing import LabelEncoder\nlb = LabelEncoder()\n\nfor i in [\"R1\" , \"R2\" , \"R3\" , \"R4\" , \"R5\" , \"R6\"]:\n    routes[i] = lb.fit_transform(routes[i])","d5f888c4":"routes","1cbcf392":"df_routes = routes.loc[routes[\"Source\"] == \"Train\"]\ndf_routes","bb3da3a1":"tt_routes = routes.loc[routes[\"Source\"] == \"Test\"]\ntt_routes","6340537c":"df_routes.drop([\"Source\"] , axis = 1 , inplace = True)\ntt_routes.drop([\"Source\"] , axis = 1 , inplace = True)","24561034":"df_routes","4efc7754":"tt_routes","fffeac68":"pd.get_option(\"display.max_columns\")\ndf = pd.concat([df , df_routes] , axis = 1)","76471ca0":"tt = pd.concat([tt , tt_routes] , axis = 1)","9f46eca5":"df.head().T","4002f148":"tt.head().T","d2bd123c":"df.isna().sum()","75fe94fb":"tt.isna().sum()","7e17c9d6":"df[\"Stops\"] = df[\"Total_Stops\"].str.split(\" \").str[0]\ndf[\"Stops\"].replace(\"non-stop\" , 0 , inplace = True)","801becd6":"df[\"Stops\"]","8cbaf93a":"tt[\"Stops\"] = tt[\"Total_Stops\"].str.split(\" \").str[0]\ntt[\"Stops\"].replace(\"non-stop\" , 0 , inplace = True)","f54da472":"tt[\"Stops\"]","2aee89a8":"df.drop([\"Date_of_Journey\" , \"Route\" , \"Dep_Time\" , \"Arrival_Time\" , \"Total_Stops\"] , axis = 1 , inplace = True)","6a142c3e":"tt.drop([\"Date_of_Journey\" , \"Route\" , \"Dep_Time\" , \"Arrival_Time\" , \"Total_Stops\"] , axis = 1 , inplace = True)","40fd481b":"df.head()","c3e31c93":"tt.head()","527d4568":"df.info()","fb8f87ae":"df.isna().sum()","23d5459c":"tt.info()","4570e195":"tt.isna().sum()","744f9030":"# Categorical Columns\n\ncats = df.select_dtypes(include=\"object\").columns.to_list()\ncats","3639800d":"# Non - categorical columns\n\nints = df.select_dtypes(exclude=\"object\").columns.to_list()\nints","65b342da":"df[[\"Source\" , \"R1\"]]","041abd00":"for i in df.columns:\n    print(f\"The number of unique values in {i} column is\/are : {len(df[i].unique())}\")\n    print(\"\\n\")\n    print(f\"The unique values in {i} column is\/are : {df[i].unique()}\")\n    print(\"\\n\")\n    print(f\"The value counts for each value in {i} column is\/are :  \\n{df[i].value_counts()}\")\n    print(\"\\n\\n\")\n    print(\"*\"*100)\n    print(\"\\n\\n\")","22e19c6c":"df.drop([\"year\" , \"R1\"] , axis = 1 , inplace = True)","edab6731":"tt.drop([\"year\" , \"R1\"] , axis = 1 , inplace = True)","ae70f65a":"df.head()","992f96c7":"tt.head()","2787b8e4":"plt.figure(figsize=(15,8))\nsns.boxplot(x = \"Airline\" , y = \"Price\", data = df.sort_values('Price', ascending = False))","49ac23bc":"plt.figure(figsize=(15,8))\nsns.boxplot(x = \"Stops\", y = \"Price\", data = df.sort_values(\"Price\", ascending = False))","65b8b4f9":"plt.figure(figsize=(15,8))\nsns.boxplot(x = \"Source\", y = \"Price\", data = df.sort_values(\"Price\", ascending = False))","371ff1c1":"plt.figure(figsize=(15,8))\nsns.boxplot(x = \"Destination\", y = \"Price\", data = df.sort_values(\"Price\", ascending = False))","b14db469":"plt.figure(figsize=(15,8))\nsns.boxplot(x = \"Additional_Info\", y = \"Price\", data = df.sort_values(\"Price\", ascending = False))","3552d5b1":"plt.figure(figsize = (15 , 8))\nsns.histplot(data = df , x = \"Duration\" , kde = True)","2f49ae43":"for i in [\"day\" , \"Month\" , \"dep_hour\" , \"dep_minutes\" , \"arr_hour\" , \"arr_minutes\"]:\n    plt.figure(figsize = (12 , 6))\n    sns.histplot(data = df , x = i)\n    plt.show()","5a47d29d":"for i in [\"Airline\" , \"Source\" , \"Destination\" , \"Stops\" , \"Additional_Info\"]:\n    plt.figure(figsize = (12 , 6))\n    sns.countplot(data = df , x = i)\n    plt.show()\n    print(\"\\n\\n\")","9c6c0818":"plt.figure(figsize = (12 , 6))\nsns.heatmap(df.corr() , annot = True , cmap = \"coolwarm\")","d8ef0482":"cats = df.select_dtypes(include=\"object\").columns.to_list()\ncats","2e72bd6e":"ints = df.select_dtypes(exclude=\"object\").columns.to_list()\nints.remove(\"Price\")","3de85b8e":"ints","f0a0ef9e":"X = df.drop([\"Price\"] , axis = 1)\ny = df[\"Price\"]","f593fd0f":"X.head()","a061bad0":"for i in ['Duration','day','Month','dep_hour','dep_minutes','arr_hour','arr_minutes']:\n    X[i] = np.log(X[i] + 1)\n    tt[i] = np.log(tt[i] + 1)","732febca":"X = pd.get_dummies(X , columns = [\"Airline\" , \"Source\" , \"Destination\" , \"Additional_Info\"] , prefix = [\"Airline\" , \"Source\" , \"Destination\" , \"Additional_Info\"] , drop_first = True)\ntt = pd.get_dummies(tt , columns = [\"Airline\" , \"Source\" , \"Destination\" , \"Additional_Info\"] , prefix = [\"Airline\" , \"Source\" , \"Destination\" , \"Additional_Info\"] , drop_first = True)","3d81e86f":"X.head().T","0ddcace5":"tt.head().T","1f4a2052":"X[\"Stops\"] = X[\"Stops\"].apply(lambda x : int(x))\ntt[\"Stops\"] = tt[\"Stops\"].apply(lambda x : int(x))","bae82bd7":"X.info()","cd0febe8":"tt.info()","76144b9e":"from sklearn.model_selection import train_test_split\n\nX_train , X_test , y_train , y_test = train_test_split(X , y , test_size = 0.2 , random_state = 42)\nlen(X_train) , len(X_test) , len(y_train) , len(y_test)","4da8a142":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\n\nscale_cols = [\"Duration\" , \"day\" , \"Month\" , \"dep_hour\" , \"dep_minutes\" , \"arr_hour\" , \"arr_minutes\"]\nX_train[scale_cols] = scaler.fit_transform(X_train[scale_cols])\nX_test[scale_cols] = scaler.transform(X_test[scale_cols])\ntt[scale_cols] = scaler.transform(tt[scale_cols])","c3cb3d73":"X_train.head()","8f35918b":"X_test.head()","f455a673":"tt.head()","2cf9a072":"from xgboost import XGBRegressor\nfrom sklearn.ensemble import AdaBoostRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\n\n\nfrom sklearn.metrics import mean_squared_log_error , mean_squared_error , mean_absolute_error , r2_score\nfrom sklearn.model_selection import cross_val_score","cdf6799f":"models = []\nmodels.append(['XGBRegressor', XGBRegressor(random_state = 42 , objective ='reg:squarederror')])\nmodels.append(['AdaBoostRegressor', AdaBoostRegressor(random_state = 42)])\nmodels.append(['RandomForest Regressor', RandomForestRegressor(random_state = 42)])\nmodels.append(['Linear Regression', LinearRegression()])\nmodels.append(['KNeigbors Regressor', KNeighborsRegressor()])","07bb275f":"def metrics(model , X_train , y_train , X_test , y_test , params = False):\n    \n    mod = model[1].fit(X_train , y_train)\n    preds = model[1].predict(X_test)\n    accuracies = cross_val_score(estimator = model[1], X = X_train , y = y_train, cv = 10)\n    log = mean_squared_log_error(preds , y_test)\n    mse = mean_squared_error(preds , y_test , squared = False)\n    mae = mean_absolute_error(preds , y_test)\n    score = max(0 , 100 * r2_score(y_test , preds))\n    \n    print(\"\\n\")            \n    print(model[0])\n    \n    print(\"\\n\")\n    if params:\n        print(f\"Best Parameters are : \\n\" , model[1].best_params_)\n        print(\"\\n\")\n    \n    print(f\"Training score : {model[1].score(X_train , y_train):.4f}\")\n    print(\"\\n\") \n    \n    print(f\"Test Score : {model[1].score(X_test , y_test):.4f}\")\n    print(\"\\n\")\n    \n    print(f\"K-fold accuracy : {np.mean(accuracies):.4f}\")\n    print(\"\\n\")\n    \n    print(f\"Standard Deviation of Accuracies in k-fold : {np.std(accuracies):.4f}\")\n    print(\"\\n\")\n    \n    print(f\"Mean Absolute Error : {mae:.4f}\")\n    print(\"\\n\")\n\n    print(f\"Root Mean Squared Error : {mse:.4f}\")\n    print(\"\\n\")\n\n    print(f\"Mean Squared Log Error : {log:.4f}\")\n    print(\"\\n\")\n    \n    print(f\"R2_score : {score:.4f}\")\n                \n    print(\"\\n\")            \n    \n    plt.scatter(y_test , preds)\n    x = np.linspace(min(y_test) , max(y_test) , 100)\n    y = x\n    plt.plot(x, y , \"-r\")\n    plt.show()\n    print(\"\\n\")\n\n    print(\"*\"*100)\n    \n    print(\"\\n\\n\")\n    \n    sam = []\n    sam.append(model[0])\n    sam.append(model[1].score(X_train , y_train))\n    sam.append(model[1].score(X_test , y_test))\n    sam.append(np.mean(accuracies))\n    sam.append(np.std(accuracies))\n    sam.append(mae)\n    sam.append(mse)\n    sam.append(log)\n    sam.append(score)\n    \n    return sam , mod","5f4841d2":"%%time\n\npre_final = []\nfor i in models:\n    sam = metrics(i , X_train , y_train , X_test , y_test)\n    pre_final.append(sam)","ce57d079":"pre_final","1574acf6":"data_pre_final = [x[0] for x in pre_final]\ndata_pre_final","4abaf928":"me = pd.DataFrame(data_pre_final , columns = [\"Model\" , \"Train Score\" , \"Test Score\" , \"K-fold Accuracy\" , \"K-fold Std\" , \"MAE\" , \"RMSE\" , \"MLSE\" , \"R2_Score\"])\n\nme.sort_values(by = [\"R2_Score\" , \"MLSE\" , \"RMSE\" , \"K-fold Accuracy\" , \"MAE\" , \"Train Score\" , \"Test Score\"] , inplace = True , ascending = (False , True , True , False , True , False , False))\nme = me.reset_index(drop = True)\nme","5c600278":"plt.figure(figsize = (10 , 5))\nsns.barplot(y = \"Model\" , x = \"R2_Score\" , data = me)\nplt.title(\"Model Comparision based on R2_Score\");","3fc63997":"plt.figure(figsize = (10 , 5))\nsns.barplot(y = \"Model\" , x = \"MLSE\" , data = me)\nplt.title(\"Model Comparision based on MLSE\");","45fee2fb":"plt.figure(figsize = (10 , 5))\nsns.barplot(y = \"Model\" , x = \"RMSE\" , data = me)\nplt.title(\"Model Comparision based on RMSE\");","5b9ec38f":"plt.figure(figsize = (10 , 5))\nsns.barplot(y = \"Model\" , x = \"K-fold Accuracy\" , data = me)\nplt.title(\"Model Comparision based on K-fold Accuracy\");","50096676":"from sklearn.model_selection import GridSearchCV\n\n\ngrid_xgb = {\"n_estimators\" : [100 , 200 , 300 , 400]}\n\n\ngrid_ada = {\"n_estimators\" : [50 , 100 , 200]}\n\n\ngrid_random = {\"n_estimators\" : [100 , 200 , 250 , 300], \n              \"max_features\" : ['auto', 'sqrt' , \"log2\"] , \n              \"min_samples_leaf\" : [2, 4] , \n              \"max_depth\" : [5 , 7 , 10]}\n\n\ngrid_linear = {\"max_iter\" : [100 , 150] , \n              \"solver\" : [\"liblinear\"] , \n              \"multi_class\" : [\"ovr\"]}\n\n\ngrid_neighbor = {\"n_neighbors\" : [5 , 7 , 10 , 12] , \n                \"algorithm\" : [\"auto\", \"ball_tree\", \"kd_tree\", \"brute\"]}","375e975e":"%%time\n\nxgb = metrics(['XGBRegressor', GridSearchCV(XGBRegressor(random_state = 42 , objective ='reg:squarederror') , param_grid = grid_xgb , cv = 5 , verbose = 0 , scoring = \"neg_mean_squared_log_error\")] ,  X_train , y_train , X_test , y_test , params = True )","43fc6155":"# %%time\n\n# random = metrics(['RandomForest Regressor', GridSearchCV(RandomForestRegressor(random_state = 42) , param_grid = grid_random , cv = 5 , verbose = 0 , scoring = \"neg_mean_squared_log_error\"  , n_jobs = -1)] ,  X_train , y_train , X_test , y_test , params = True )","f6133c95":"def feature_importance(model , X_train , y_train):\n    features = model.feature_importances_\n    print(f\"Feature importance list : \\n\" , features)\n    print(\"\\n\")\n    plt.figure(figsize = (15 , 8))\n    sns.barplot(X_train.columns.tolist() , features)\n    plt.show()\n    print(\"\\n\")\n    print(\"*\"*100)\n    print(\"\\n\")\n    return list(zip(features , X_train.columns))","771f22ca":"xgb = XGBRegressor(random_state = 42 , objective ='reg:squarederror' , n_estimators = 200)\nxgb.fit(X_train , y_train)","9ec493c9":"xgb_fi = feature_importance(xgb , X_train , y_train)","26d9376f":"xgb_df = pd.DataFrame(xgb_fi , columns = [\"Feature Importances\" , \"Feartures\"]).sort_values(by = [\"Feature Importances\"] , ascending = False).reset_index(drop = True)","af4a7265":"xgb_df","2e339728":"X.head()","815e535b":"tt.head()","31053893":"adds = []\nfor i in X.columns:\n    if i not in tt.columns:\n        adds.append(i)\n        print(i)","5e76a93f":"adds","b1e8afc4":"for i in adds:\n    tt[i] = 0","047e0ffa":"X","b35d9f5f":"tt = tt[X.columns]\ntt","d6a09940":"X.drop([\"Additional_Info_1 Short layover\" , \"Destination_Kolkata\" , \"Destination_Hyderabad\" , \"Destination_Cochin\" , \"Stops\"] , axis = 1 , inplace = True)","6742d860":"tt.drop([\"Additional_Info_1 Short layover\" , \"Destination_Kolkata\" , \"Destination_Hyderabad\" , \"Destination_Cochin\" , \"Stops\"] , axis = 1 , inplace = True)","bb5892f6":"X_train , X_test , y_train , y_test = train_test_split(X , y , test_size = 0.2 , random_state = 42)\nlen(X_train) , len(X_test) , len(y_train) , len(y_test)","5bd47bf7":"scaler1 = StandardScaler()\n\nscale_cols = [\"Duration\" , \"day\" , \"Month\" , \"dep_hour\" , \"dep_minutes\" , \"arr_hour\" , \"arr_minutes\"]\nX_train[scale_cols] = scaler1.fit_transform(X_train[scale_cols])\nX_test[scale_cols] = scaler1.transform(X_test[scale_cols])","7b40f3c0":"X_train.head()","46f23eee":"X_test.head()","a32323b7":"tt.head()","ba3dbba6":"%%time\n\nfinal = []\nfor i in models:\n    sam = metrics(i , X_train , y_train , X_test , y_test)\n    final.append(sam)","6f280bbe":"final","74933cb7":"data_final = [x[0] for x in final]\ndata_final","a2e05f61":"# Before removing useless columns\nme","a84b4873":"# After Removing useless columns\n\nmef = pd.DataFrame(data_final , columns = [\"Model\" , \"Train Score\" , \"Test Score\" , \"K-fold Accuracy\" , \"K-fold Std\" , \"MAE\" , \"RMSE\" , \"MLSE\" , \"R2_Score\"])\n\nmef.sort_values(by = [\"R2_Score\" , \"MLSE\" , \"RMSE\" , \"K-fold Accuracy\" , \"MAE\" , \"Train Score\" , \"Test Score\"] , inplace = True , ascending = (False , True , True , False , True , False , False))\nmef = mef.reset_index(drop = True)\nmef","60e89c92":"xgb = XGBRegressor(random_state = 42 , objective ='reg:squarederror' , n_estimators = 200)\nxgb.fit(X_train , y_train)","6963f206":"xgb_fi = feature_importance(xgb , X_train , y_train)","1981cdbb":"xgb_df = pd.DataFrame(xgb_fi , columns = [\"Feature Importances\" , \"Feartures\"]).sort_values(by = [\"Feature Importances\"] , ascending = False).reset_index(drop = True)","43037cdb":"xgb_df","8ec83072":"preds = xgb.predict(X_test)\npreds","8797919b":"plt.figure(figsize = (12 , 6))\nsns.scatterplot(preds , y_test)\nx = np.linspace(min(y_test) , max(y_test) , 100)\ny = x\nplt.plot(x, y , \"-r\")","445afdf5":"plt.figure(figsize = (12 , 6))\nsns.distplot(y_test - preds)","4f0b352b":"import pickle\npickle.dump(xgb, open(\"Flights Xgb.h5\", 'wb'))","1b71ac67":"test_preds = xgb.predict(tt)\ntest_preds","90c436f3":"final = pd.DataFrame(test_preds , columns = [\"Price\"])\nfinal","89e9246f":"final.to_csv(\"Kaggle Flight Rate 1.csv\" , index = False)","f6b45d7a":"## Predicting on Test Set","99986c99":"## Model Fitting and Evaluation","c43354c1":"## Loading necessory libraries (Primary libraires)","6eeefd4f":"### Hist Plots","945d56e5":"### Count Plots","567aa596":"### Converting to dataframe","5350334e":"### Removing Skewness","a2003e02":"### We will perform only on XGB due to lack of computation power","10a19eff":"## Model Evaluation With GridSearchCV","d4367ad4":"### Splitting Route column and preprocessing","86244551":"## Feature Scaling","819f38da":"### Converting Duration into minutes","9d53528d":"### Optional Runcell","968646f4":"### Splitting data into date , month . year","edc4e665":"# Flight Rate Prediction Model","3df56dab":"## Getting Feature Importances","b30169f1":"Dropping \"R1\" as it has same values as of \"Source\" column , \"year\" column as only one value (2019)","55d2eac0":"## Data Visualization","f2eaba3f":"### Correlation Heatmap","ea2efc62":"### Preprocessing Stops column","726af272":"so we can drop columns with 0 importance","4f695f09":"### Converting Stops column from object to ints","8b98fa95":"### Getting Dummies","3be7c0c9":"## Model Evaluation After Removing Useless columns","eb333704":"### Saveing splitted values into a nested list","64c0aeca":"### Final model performance visualization","f7462cfb":"## Lable Encoding Large unique values in categorical columns.\nUsed concat approach since test data has previously unknown \/ unseen values","54b0cf25":"### Box Plots","c1435d01":"## Train Test Split","1e7456cb":"### Dropping Features extracted columns","160f6128":"## Model Evaluation Visualization","e02e7068":"### Saving model with pickle module","685465fb":"## Preprocessing Missing Columns in Test Set","5b171b45":"## Data Preprocessing","36cab695":"## Downlaoding the submission file","d98ea5dc":"## Final model","321de100":"### Converting Time columns to datetime format","18bbadcb":"Dropping columns with zero importance towards the model","f8b9348e":"### Features and labels splitting"}}