{"cell_type":{"a0b846e4":"code","f022e23f":"code","78b00bfe":"code","6d2fc8c0":"code","02991bd2":"code","5fe06d34":"code","89a72257":"code","5bb01ba3":"code","f47bea78":"code","bebd81b9":"code","f0b6e762":"code","e49e431f":"code","74d3201f":"code","41d1522e":"code","4e2e416e":"code","c007549c":"code","4ea82aa2":"markdown","3660e609":"markdown","09dea456":"markdown","013d0bd7":"markdown","34f42843":"markdown","ae651dee":"markdown","0b116f9a":"markdown","4f1092c9":"markdown","b9b09af3":"markdown"},"source":{"a0b846e4":"import sys\nsys.path.append('..\/input\/iterative-stratification\/iterative-stratification-master')\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold","f022e23f":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import log_loss\nfrom tqdm.notebook import tqdm\n\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom torch.utils.data import Dataset, DataLoader\n\nimport warnings\nwarnings.filterwarnings('ignore')","78b00bfe":"train_features = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\ntrain_targets = pd.read_csv('..\/input\/lish-moa\/train_targets_scored.csv')\ntest_features = pd.read_csv('..\/input\/lish-moa\/test_features.csv')\n\nss = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')","6d2fc8c0":"def preprocess(df):\n    df = df.copy()\n    df.loc[:, 'cp_type'] = df.loc[:, 'cp_type'].map({'trt_cp': 0, \n                                                   'ctl_vehicle': 1})\n    df.loc[:, 'cp_dose'] = df.loc[:, 'cp_dose'].map({'D1': 0, 'D2': 1})\n    df = df.drop(columns='sig_id')\n    return df\n\n\ntrain_features = preprocess(train_features)\ntest_features = preprocess(test_features)\n\n# Delete objects without MoA. They has ctl_vehicle == 1 and they are cacb2b860 drug\ntrain_targets = train_targets.loc[train_features['cp_type'] == 0].reset_index(drop=True)\ntrain_features = train_features.loc[train_features['cp_type'] == 0].reset_index(drop=True)\ntrain_targets = train_targets.drop(columns='sig_id')\ntrain_features.head()","02991bd2":"from sklearn.feature_selection import VarianceThreshold\n\nfeatures_np = train_features.to_numpy()\nvt_selector = VarianceThreshold(threshold=0.8)\nvt_selector.fit(features_np[:, 3:])\n_top_feats = vt_selector.get_support(indices=True)\n_top_feats = _top_feats + 3\n_f = np.array([1, 2])\n_top_feats = np.copy(np.concatenate([_f, _top_feats]))\ndel _f\ntop_feats = _top_feats.tolist()  # !\ndel _top_feats\n\nprint(len(top_feats))\nprint(top_feats[:5], '\u2026', top_feats[-5:])\ndel features_np","5fe06d34":"def create_folds(num_starts, num_splits):\n    \n    folds = []\n    \n    # LOAD FILES\n    train_feats = pd.read_csv('..\/input\/lish-moa\/train_features.csv')\n    scored = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\n    drug = pd.read_csv('\/kaggle\/input\/lish-moa\/train_drug.csv')\n    scored = scored.loc[train_feats['cp_type'] == 'trt_cp', :]\n    drug = drug.loc[train_feats['cp_type'] == 'trt_cp', :]\n    targets = scored.columns[1:]\n    scored = scored.merge(drug, on='sig_id', how='left') \n\n    # LOCATE DRUGS\n    vc = scored.drug_id.value_counts()\n    vc1 = vc.loc[vc <= 18].index.sort_values()\n    vc2 = vc.loc[vc > 18].index.sort_values()\n    \n    for seed in range(num_starts):\n\n        # STRATIFY DRUGS 18X OR LESS\n        dct1 = {}; dct2 = {}\n        skf = MultilabelStratifiedKFold(n_splits=num_splits, shuffle=True, random_state=seed)\n        tmp = scored.groupby('drug_id')[targets].mean().loc[vc1]\n        for fold,(idxT,idxV) in enumerate(skf.split(tmp,tmp[targets])):\n            dd = {k:fold for k in tmp.index[idxV].values}\n            dct1.update(dd)\n\n        # STRATIFY DRUGS MORE THAN 18X\n        skf = MultilabelStratifiedKFold(n_splits=num_splits, shuffle=True, random_state=seed)\n        tmp = scored.loc[scored.drug_id.isin(vc2)].reset_index(drop=True)\n        for fold,(idxT,idxV) in enumerate(skf.split(tmp,tmp[targets])):\n            dd = {k:fold for k in tmp.sig_id[idxV].values}\n            dct2.update(dd)\n\n        # ASSIGN FOLDS\n        scored['fold'] = scored.drug_id.map(dct1)\n        scored.loc[scored.fold.isna(),'fold'] =\\\n            scored.loc[scored.fold.isna(),'sig_id'].map(dct2)\n        scored.fold = scored.fold.astype('int8')\n        folds.append(scored.fold.values)\n        \n        del scored['fold']\n        \n    return np.stack(folds)","89a72257":"def set_seed(seed):\n    torch.manual_seed(seed)\n    torch.backends.cudnn.deterministic = True\n    torch.backends.cudnn.benchmark = False\n    np.random.seed(seed)","5bb01ba3":"N_FOLDS = 6\nN_STARTS = 5\nN_EPOCHS = 50\nrandom_state = 42\n\nbatch_size = 128\nval_batch_size = batch_size * 4\n\nntargets = train_targets.shape[1]\ntargets = [col for col in train_targets.columns]\n\ncriterion = nn.BCELoss()  # Binary Cross Entropy loss function\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")","f47bea78":"class MoaModel(nn.Module):\n    def __init__(self, num_columns):\n        super(MoaModel, self).__init__()\n        self.batch_norm1 = nn.BatchNorm1d(num_columns)\n        self.dropout1 = nn.Dropout(0.2)\n        self.dense1 = nn.utils.weight_norm(nn.Linear(num_columns, 1048))\n        \n        self.batch_norm2 = nn.BatchNorm1d(1048)\n        self.dropout2 = nn.Dropout(0.5)\n        self.dense2 = nn.utils.weight_norm(nn.Linear(1048, 1048))\n        \n        self.batch_norm3 = nn.BatchNorm1d(1048)\n        self.dropout3 = nn.Dropout(0.5)\n        self.dense3 = nn.utils.weight_norm(nn.Linear(1048, 206))\n    \n    def forward(self, x):\n        x = self.batch_norm1(x)\n        x = self.dropout1(x)\n        x = F.relu(self.dense1(x))\n        \n        x = self.batch_norm2(x)\n        x = self.dropout2(x)\n        x = F.relu(self.dense2(x))\n        \n        x = self.batch_norm3(x)\n        x = self.dropout3(x)\n        x = F.sigmoid(self.dense3(x))\n        \n        return x","bebd81b9":"# dataset class\nclass MoaDataset(Dataset):\n    def __init__(self, df, targets, feats_idx, mode='train'):\n        self.mode = mode\n        self.feats = feats_idx\n        self.data = df[:, feats_idx]\n        if mode=='train':\n            self.targets = targets\n    \n    def __len__(self):\n        return len(self.data)\n    \n    def __getitem__(self, idx):\n        if self.mode == 'train':\n            return torch.FloatTensor(self.data[idx]), torch.FloatTensor(self.targets[idx])\n        elif self.mode == 'test':\n            return torch.FloatTensor(self.data[idx]), 0","f0b6e762":"folds_cv = create_folds(N_STARTS, N_FOLDS)\n\nunique, counts = np.unique(folds_cv[0], return_counts=True)\nfor i in unique:\n    print(i, counts[i])\ndel unique\ndel counts","e49e431f":"for seed in range(N_STARTS):\n    print(f'Train seed {seed}')\n    set_seed(seed)\n\n    for fold in range(N_FOLDS):\n        tr_idx = folds_cv[seed] != fold\n        te_idx = folds_cv[seed] == fold\n\n        xtrain = train_features.to_numpy()[tr_idx]\n        ytrain = train_targets.to_numpy()[tr_idx]\n        xval = train_features.to_numpy()[te_idx]\n        yval = train_targets.to_numpy()[te_idx]\n\n        train_set = MoaDataset(xtrain, ytrain, top_feats)\n        val_set = MoaDataset(xval, yval, top_feats)\n        \n        dataloaders = {\n            'train': DataLoader(train_set, batch_size=batch_size, shuffle=True),\n            'val': DataLoader(val_set, batch_size=val_batch_size, shuffle=False)\n        }\n\n        model = MoaModel(len(top_feats)).to(device)\n        checkpoint_path = f'repeat:{seed}_Fold:{fold+1}.pt'\n        optimizer = optim.Adam(model.parameters(), weight_decay=1e-5)\n        scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', \n                                                         factor=0.1, patience=3, \n                                                         eps=1e-4, verbose=True)\n        best_loss = {'train': np.inf, 'val': np.inf}\n            \n        for epoch in range(N_EPOCHS):\n            epoch_loss = {'train': 0.0, 'val': 0.0}\n          \n            for phase in ['train', 'val']:\n                if phase == 'train':\n                    model.train()\n                else:\n                    model.eval()\n                \n                running_loss = 0.0\n                \n                for i, (x, y) in enumerate(dataloaders[phase]):\n                    x, y = x.to(device), y.to(device)\n                    \n                    optimizer.zero_grad()\n                    \n                    with torch.set_grad_enabled(phase=='train'):\n                        preds = model(x)\n                        loss = criterion(preds, y)\n                        \n                        if phase=='train':\n                            loss.backward()\n                            optimizer.step()\n                        \n                    running_loss += loss.item() \/ len(dataloaders[phase])\n                \n                epoch_loss[phase] = running_loss\n            \n            print(\"Epoch {}\/{}   -   loss: {:5.5f}   -   val_loss: {:5.5f}\".format(epoch+1, N_EPOCHS, epoch_loss['train'], epoch_loss['val']))\n            \n            scheduler.step(epoch_loss['val'])\n            \n            if epoch_loss['val'] < best_loss['val']:\n                best_loss = epoch_loss\n                torch.save(model.state_dict(), checkpoint_path)","74d3201f":"test_np = test_features.to_numpy()\n\noof = np.zeros((len(train_features.to_numpy()), N_STARTS, ntargets))\noof_targets = np.zeros((len(train_features.to_numpy()), ntargets))\npreds = np.zeros((len(test_np), ntargets))","41d1522e":"def mean_log_loss(y_true, y_pred):\n    metrics = []\n    worst_target = None\n    worst_loss = 0.\n    all_targets_ll = {}\n    for i, target in enumerate(targets):\n        _ll = log_loss(y_true[:, i], y_pred[:, i].astype(float), labels=[0,1])\n        metrics.append(_ll)\n        all_targets_ll[target] = _ll\n        if _ll > worst_loss:\n            worst_loss = _ll\n            worst_target = target\n    return np.mean(metrics), (worst_target, worst_loss), all_targets_ll","4e2e416e":"worst_targets_in_seed = []\nall_targets_ll_in_seed = []\nfor seed in range(N_STARTS):\n    print(f\"Inference for seed {seed}\")\n    seed_targets = []\n    seed_oof = []\n    seed_preds = np.zeros((len(test_np), ntargets, N_FOLDS))\n    \n    for fold in range(N_FOLDS):\n        # print(n, len(tr))\n        tr_idx = folds_cv[seed] != fold\n        te_idx = folds_cv[seed] == fold\n        xval = train_features.to_numpy()[te_idx]\n        yval = train_targets.to_numpy()[te_idx]\n        fold_preds = []\n        \n        val_set = MoaDataset(xval, yval, top_feats)\n        test_set = MoaDataset(test_np, None, top_feats, mode='test')\n        \n        dataloaders = {\n            'val': DataLoader(val_set, batch_size=val_batch_size, shuffle=False),\n            'test': DataLoader(test_set, batch_size=val_batch_size, shuffle=False)\n        }\n        \n        checkpoint_path = f'repeat:{seed}_Fold:{fold+1}.pt'\n        model = MoaModel(len(top_feats)).to(device)\n        model.load_state_dict(torch.load(checkpoint_path))\n        model.eval()\n        \n        for phase in ['val', 'test']:\n            for i, (x, y) in enumerate(dataloaders[phase]):\n                # print(i)\n                if phase == 'val':\n                    x, y = x.to(device), y.to(device)\n                elif phase == 'test':\n                    x = x.to(device)\n                \n                with torch.no_grad():\n                    batch_preds = model(x)\n                    \n                    if phase == 'val':\n                        seed_targets.append(y)\n                        seed_oof.append(batch_preds)\n                        # print(y_pred_lr.shape)\n                    elif phase == 'test':\n                        fold_preds.append(batch_preds)\n                    \n        fold_preds = torch.cat(fold_preds, dim=0).cpu().numpy()\n        seed_preds[:, :, fold] = fold_preds\n        \n    seed_targets = torch.cat(seed_targets, dim=0).cpu().numpy()\n    seed_oof = torch.cat(seed_oof, dim=0).cpu().numpy()\n    seed_preds = np.mean(seed_preds, axis=2)\n    \n    print(\"Score for this seed {:5.5f}\".format(mean_log_loss(seed_targets, seed_oof)[0]))\n    worst_targets_in_seed.append(mean_log_loss(seed_targets, seed_oof)[1])\n    all_targets_ll_in_seed.append(mean_log_loss(seed_targets, seed_oof)[2])\n    oof_targets = seed_targets\n    oof[:, seed, :] = seed_oof\n    preds += seed_preds \/ N_STARTS\n\noof = np.mean(oof, axis=1)\nprint(\"Overall score is {:5.5f}\".format(mean_log_loss(oof_targets, oof)[0]))","c007549c":"ss[targets] = preds\nss.loc[test_features['cp_type']== 1, targets] = 0\nss.to_csv('submission.csv', index=False)","4ea82aa2":"# Group CV\nWe will use double stratified folds discussed here: https:\/\/www.kaggle.com\/c\/lish-moa\/discussion\/195195  \nCode copied from: https:\/\/www.kaggle.com\/gogo827jz\/self-stacking-groupcv-xgboost","3660e609":"# Features selection\nCreate list with best features","09dea456":"# Preprocessing","013d0bd7":"# Testing","34f42843":"# Load Data","ae651dee":"This is a modified version of https:\/\/www.kaggle.com\/nicohrubec\/pytorch-multilabel-neural-network.\n1. Reduced the number of neurons in the first hidden layer to 1048.\n2. Explicit feature selection with variance threshhold.\n3. Add group CV\n","0b116f9a":"# Initialize Parameters","4f1092c9":"# Training","b9b09af3":"# Model"}}