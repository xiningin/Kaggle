{"cell_type":{"9fc08f62":"code","bbd75eaa":"code","b1b62a01":"code","48f6d9af":"code","49748be8":"code","a200993c":"code","174edf17":"code","b971ca73":"code","f92ae913":"code","c8f7e4fe":"code","d05ee8cc":"code","469589cf":"code","1231291c":"code","dabc9ae4":"code","a0289913":"code","e7ec1040":"code","d27edb35":"code","8675a707":"code","f846b8e1":"code","da19cef2":"code","36637368":"code","c0d7eb3c":"code","c7888cd4":"code","779d6e6e":"code","bc0c9613":"code","cd06a8fd":"markdown","12e2e3ab":"markdown","37431499":"markdown","f93d971b":"markdown","98a9b8f1":"markdown","ef195aa2":"markdown","1d8dd635":"markdown","f9bcd765":"markdown","df41c9a8":"markdown","7e70f8ad":"markdown","7ee90f49":"markdown","5fc253a6":"markdown","7e6e86c5":"markdown","452f1a97":"markdown","45726d89":"markdown","f3b75a33":"markdown","9557e157":"markdown","985de047":"markdown","ca3fb1ad":"markdown","d677cec7":"markdown","c8da2a3a":"markdown","abeb0e4d":"markdown","f50fc2b6":"markdown"},"source":{"9fc08f62":"import torch\nimport torch.nn as nn\nimport torch.optim as optim\nimport torch.nn.functional as F\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm as tqdm","bbd75eaa":"# print dataset paths by Kaggle's way\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b1b62a01":"train_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')","48f6d9af":"train_data.head()","49748be8":"x_train = train_data.iloc[:,1:].values\/255 #train_data(x)\ny_train = train_data.label.values          #train_data(y)","a200993c":"train_x, train_valid_x, train_y, train_valid_y = train_test_split(x_train, y_train, test_size = 0.2, random_state = 42)","174edf17":"train_x_torch = torch.from_numpy(train_x).type(torch.FloatTensor)\nvalid_x_torch = torch.from_numpy(train_valid_x).type(torch.FloatTensor)\ntrain_y_torch = torch.from_numpy(train_y).type(torch.LongTensor)\nvalid_y_torch = torch.from_numpy(train_valid_y).type(torch.LongTensor)","b971ca73":"train_x_torch = train_x_torch.view(-1, 1,28,28).float()\nvalid_x_torch = valid_x_torch.view(-1, 1,28,28).float()","f92ae913":"train_set = torch.utils.data.TensorDataset(train_x_torch, train_y_torch)\nvalid_set = torch.utils.data.TensorDataset(valid_x_torch, valid_y_torch)","c8f7e4fe":"#preparing Data Loaders\nbatch_size = 128\ntrain_loader = torch.utils.data.DataLoader(train_set, shuffle = True, batch_size = 128)\nvalid_loader = torch.utils.data.DataLoader(valid_set, shuffle = True, batch_size = 128)","d05ee8cc":"plt.figure(figsize=(30,30))\nfor i in range(10):\n    plt.subplot(20, 20, i+1)\n    plt.title(\"No.\" + str(i))\n    plt.imshow(train_data.iloc[:,1:].iloc[i].values.reshape(28,28),cmap='Greys')","469589cf":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\") \ndevice","1231291c":"list_process=[]","dabc9ae4":"def train(model, epoch):\n    model.train()\n    train_loss = 0\n    correct = 0\n    for data, label in train_loader:\n        data, label = data.to(device), label.to(device)  \n        optimizer.zero_grad()  \n        output = model(data) \n        loss = criterion(output, label)  \n        loss.backward() \n        optimizer.step()  \n        train_loss += loss.item() \n        #get argmax values in outputs\n        pred = output.argmax(dim=1, keepdim=True)\n        correct += pred.eq(label.view_as(pred)).sum().item()\n    print('epoch for train: {}, accuracy: ({:.2f}%)'.format(epoch,correct*100 \/ len(train_loader.dataset)))\n    list_process.append(correct*100 \/ len(train_loader.dataset))","a0289913":"def valid(model, epoch):\n    model.eval()\n    test_loss = 0\n    correct = 0\n    with torch.no_grad():\n        for data, label in valid_loader:\n            data, label = data.to(device), label.to(device)\n            output = model(data)\n            test_loss += criterion(output, label).item()\n            pred = output.argmax(dim=1, keepdim=True)\n            correct += pred.eq(label.view_as(pred)).sum().item()\n    print('epoch for test: {}, accuracy: ({:.2f}%)'.format(epoch,correct*100 \/ len(valid_loader.dataset)))","e7ec1040":"class cnn_layers(nn.Module):\n    def __init__(self):\n        super(cnn_layers,self).__init__()\n        self.conv1 = nn.Conv2d(1, 32, 3, 1)\n        self.conv2 = nn.Conv2d(32, 64, 3, 1)\n        self.dropout1 = nn.Dropout(0.25)\n        self.dropout2 = nn.Dropout(0.5)\n        self.fc1 = nn.Linear(9216, 128)\n        self.fc2 = nn.Linear(128, 10)\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = F.relu(x)\n        x = self.conv2(x)\n        x = F.relu(x)\n        x = F.max_pool2d(x, 2)\n        x = self.dropout1(x)\n        x = torch.flatten(x, 1)\n        x = self.fc1(x)\n        x = F.relu(x)\n        x = self.dropout2(x)\n        x = self.fc2(x)\n        output = F.log_softmax(x, dim=1)\n        return output\n\nmodel = cnn_layers()\nmodel.to(device)\noptimizer = optim.Adam(model.parameters(), lr=0.0001)\ncriterion = nn.CrossEntropyLoss() ","d27edb35":"print(model)\nfor epoch in tqdm(range(30)):\n    train(model,epoch)","8675a707":"import matplotlib.pyplot as plt\nplt.plot(list_process)\nplt.xlabel(\"number of epochs\")\nplt.ylabel(\"accuracy(%)\")\nplt.title(\"CNN with Pytorch Model\")\nplt.legend()\nplt.show()","f846b8e1":"for epoch in tqdm(range(3)):\n    valid(model,epoch)","da19cef2":"test_data = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","36637368":"x_test = test_data.values\/255\nx_test_torch = torch.from_numpy(x_test).type(torch.FloatTensor)\nd_labels = np.zeros(x_test.shape)\nd_labels = torch.from_numpy(d_labels)\n#Think about dimentions of data. Without this \"an shapes doesn't fit error\", will occur.\nx_test_torch = x_test_torch.view(-1, 1, 28, 28)\n#Make a tensordataset and a testloader\ntestset = torch.utils.data.TensorDataset(x_test_torch, d_labels)\ntestloader = torch.utils.data.DataLoader(testset, batch_size = 1, shuffle = False)","c0d7eb3c":"submit_list = [['ImageId', 'Label']]\nwith torch.no_grad():\n    model.eval()\n    image_id = 1\n    for images,label in testloader:\n        images,label = images.to(device), label.to(device)\n        outputs = model(images)\n        probs = torch.exp(outputs)\n        top_p, top_class = probs.topk(1, dim = 1)\n        for preds in top_class:\n            submit_list.append([image_id,preds.item()])\n            image_id += 1","c7888cd4":"df = pd.DataFrame(submit_list)\ndf.columns = df.iloc[0]\ndf = df.drop(0, axis = 0)\ndf.to_csv('submit.csv', index = False)\nprint(\"submit.csv saved\")","779d6e6e":"plt.figure(figsize=(30,30))\nfor i in range(5,10):\n    plt.subplot(20, 20, i+1)\n    plt.imshow(test_data.iloc[i].values.reshape(28,28),cmap='Greys')","bc0c9613":"df.iloc[5:10,[1]].T","cd06a8fd":"4. Let's show images of Digit Recognizer.","12e2e3ab":"8. Let's defing test. One thing different from \"def train\" is \"torch.no_grad()\".","37431499":"That means the first column is \"label\", columns from the 2nd to the last is \"28 x 28 = 784 pixcels\".\n<BR>Okay, let's make x_train, y_train, x_test.","f93d971b":"11-2. Let's start prediction.","98a9b8f1":"3. Let's split train_data(x)&(y) into train_x, valid_x, train_y, valid_y by using sklearn's train_test_split.","ef195aa2":"2. Let's download datasets and check datasets.","1d8dd635":"### Correct answers?!\n### Thanks for reading my notebook :-) ","f9bcd765":"4.Change them into Pytorch's Float Tensors.","df41c9a8":"<BR>\nWhich do u like, tensorflow.keras or pytorch? \"Today\" I'm somehow in pytorch mode. Let's enjoy Pytorch!<BR>\nBTW, if you are in tensorflow.keras mode, you can find some of them in my notebooks area.","7e70f8ad":"1. Import libraries","7ee90f49":"11. Let's check if this model's prediction is correct or not.","5fc253a6":"11-3. Make a CSV file for submission","7e6e86c5":"6. Let's make DataLoaders for mini-batching.","452f1a97":"6. Check if GPU is available or not.","45726d89":"11-1. Make a dataloader for testing.","f3b75a33":"5. Let's make Tensor Datasets","9557e157":"Okay \"Type='cuda'\" means GPU is available.","985de047":"7.Let's send data to GPU and reset optimaizer and define loss calculation,loss backward .etc","ca3fb1ad":"5. Think about dimentions of data. Without this \"an shapes doesn't fit error\", will occur.","d677cec7":"<BR><BR>\n## Let's experience <font color=\"blue\">\"Image recognition by using Deep Learning Tech\"<\/font> with <font color=\"green\"> MNIST dataset.<\/font>\n## What is MNIST?\nThe MNIST is a database of handwritten digits from 0 to 9. By the way, MNIST stands for Modified National Institute of Standards and Technology database.\n## What is Deep Learning?\nDeep learning is one of machine learning algorithms which consists of multiple layers to extract features of datasets.\n## What is Pytorch?\nPytorch is one of machine learning libraries, originally developed by Facebook's AI Research Lab. It's useful especially for deep learning.\n<HR>","c8da2a3a":"9. Define layers like Conv2d for CNN, max_pool2d for max pooing .etc","abeb0e4d":"10. Let's start 20-epoch deep learning.","f50fc2b6":"Check the train_data."}}