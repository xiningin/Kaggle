{"cell_type":{"73a516a2":"code","c0a230cc":"code","a35be0d9":"code","a3a8b485":"code","5d0287d5":"code","47a7d87d":"code","e377b7d8":"code","b2d5b261":"code","60736bd2":"code","7bcb130c":"code","9afae283":"code","bc72685b":"code","9c56557b":"code","8550c808":"code","4db42033":"code","3ab930c7":"code","8fdb1f85":"code","c0504760":"code","46d315c7":"code","b8f8e1ef":"code","7ca1b57a":"code","1b8d3380":"code","9ed8d7e4":"code","d66705b8":"code","0f82a81f":"code","5d01e715":"code","f5d5476e":"code","40a4ba19":"code","ac680ab7":"code","9e48e93d":"code","ca9b51e2":"code","182c458f":"code","15b084f8":"code","73e5feed":"code","cf4bce04":"code","0eceeab8":"code","50df2f6e":"code","997df954":"code","f61f31f6":"code","84da8ac2":"code","011ac73e":"markdown","b17c0b35":"markdown","70e0be67":"markdown","929b45ba":"markdown","8b61a23d":"markdown","4f1d2421":"markdown","d1f5e5cb":"markdown","a40dc684":"markdown","03ada7c9":"markdown","ce0c06da":"markdown"},"source":{"73a516a2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c0a230cc":"import numpy as np\nimport pandas as pd\nimport gc\nimport time\n\n%matplotlib inline\n\n# Suppress warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# matplotlib and seaborn for plotting\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\npd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 200)","a35be0d9":"app_train = pd.read_csv('..\/input\/home-credit-default-risk\/application_train.csv')\napp_test = pd.read_csv('..\/input\/home-credit-default-risk\/application_test.csv')","a3a8b485":"# app_train\uc758 \uc804\uccb4 \uceec\ub7fc \uac1c\uc218\ub294 122\uac1c \uc774\uba70, \uc774 \uc911\uc5d0\uc11c \uacb0\uce21\uce58\uac00 \uc788\ub294 \uceec\ub7fc \uac1c\uc218\ub294 67\uac1c \napp_train.isnull().sum()","5d0287d5":"app_train['TARGET'].value_counts()","47a7d87d":"app_train['TARGET'].astype(int).plot.hist();","e377b7d8":"app_train.info()","b2d5b261":"def show_hist_by_target(df, columns):\n    cond_1 = (df['TARGET'] == 1)\n    cond_0 = (df['TARGET'] == 0)\n    \n    for column in columns:\n        fig, ax = plt.subplots(figsize=(12, 4), nrows=1, ncols=2, squeeze=False)\n        sns.violinplot(x='TARGET', y=column, data=df, ax=ax[0][0])\n        sns.distplot(df[cond_1][column], label='1', color='red', ax=ax[0][1])\n        sns.distplot(df[cond_0][column], label='0', color='blue', ax=ax[0][1])","60736bd2":"# Feature Importances \uc5d0\uc11c \uc911\uc694\ud558\uac8c \ub098\uc654\ub358 \uce7c\ub7fc\ub9cc \uac00\uc838\uc634\ncolumns = ['AMT_INCOME_TOTAL','AMT_CREDIT', 'AMT_ANNUITY', 'AMT_GOODS_PRICE', 'DAYS_BIRTH', 'DAYS_EMPLOYED', 'DAYS_ID_PUBLISH',\n           'DAYS_REGISTRATION', 'DAYS_LAST_PHONE_CHANGE', 'CNT_FAM_MEMBERS', 'REGION_RATING_CLIENT', 'EXT_SOURCE_1', \n           'EXT_SOURCE_2', 'EXT_SOURCE_3', 'AMT_REQ_CREDIT_BUREAU_HOUR', 'AMT_REQ_CREDIT_BUREAU_DAY', 'AMT_REQ_CREDIT_BUREAU_WEEK', \n           'AMT_REQ_CREDIT_BUREAU_MON', 'AMT_REQ_CREDIT_BUREAU_QRT', 'AMT_REQ_CREDIT_BUREAU_YEAR']\n\nshow_hist_by_target(app_train, columns)","7bcb130c":"# DAYS_BIRTH\uc758 \uc808\ub300\uac12\uacfc TARGET\ubcc0\uc218\uc640\uc758 \uc0c1\uad00\uacc4\uc218\napp_train['DAYS_BIRTH']=abs(app_train['DAYS_BIRTH'])\napp_train['DAYS_BIRTH'].corr(app_train['TARGET'])","9afae283":"plt.style.use('fivethirtyeight')\n\n# \uace0\uac1d \ub098\uc774\uc5d0 \ub300\ud55c \ud788\uc2a4\ud1a0\uadf8\ub7a8 \ubd84\ud3ec \ud655\uc778\nplt.hist(app_train['DAYS_BIRTH']\/365, edgecolor='k',bins=25)\nplt.title('Age of Client');\nplt.xlabel('Age (years)');\nplt.ylabel('Count');","bc72685b":"plt.figure(figsize=(10,8))\n\n# \uc81c\ub54c \ub300\ucd9c\uc744 \uc0c1\ud658\ud558\ub294 \uace0\uac1d\uc758 \ub098\uc774 plot (TARGET=0)\nsns.kdeplot(app_train.loc[app_train['TARGET']==0,'DAYS_BIRTH']\/365,label='target==0')\n\n# \uc81c\ub54c \ub300\ucd9c\uc744 \uc0c1\ud658\ud558\uc9c0\ubabb\ud558\ub294 \uace0\uac1d\uc758 \ub098\uc774 plot (TARGET=1)\nsns.kdeplot(app_train.loc[app_train['TARGET']==1,'DAYS_BIRTH']\/365,label='target==1')\n\nplt.xlabel('Age(years)');\nplt.ylabel('Density');\nplt.title('Distribution of Ages');","9c56557b":"#\napp_train[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].isnull().sum()","8550c808":"app_train['EXT_SOURCE_3'].value_counts(dropna=False)","4db42033":"# TARGET \ubcc0\uc218\uc640 EXT_SOURCE\uc640\uc758 \uc0c1\uad00\uad00\uacc4\uc640 EXT_SOURCE \uc11c\ub85c\uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uc0b4\ud54c\n\next_data=app_train[['TARGET','EXT_SOURCE_1','EXT_SOURCE_2','EXT_SOURCE_3','DAYS_BIRTH']]\next_data_corrs=ext_data.corr()\next_data_corrs","3ab930c7":"plt.figure(figsize=(8,6))\n\nsns.heatmap(ext_data_corrs, cmap=plt.cm.RdYlBu_r, vmin=-0.25, annot=True, vmax=0.6)\nplt.title('Correlation Heatmap');","8fdb1f85":"# \uac01 EXT_SOURCE \ub97c TARGET\uac12 \ubcc4\ub85c \ub098\ub220\uc11c \ubd84\ud3ec\ub97c \uc0b4\ud54c\nplt.figure(figsize=(10,12))\nplt.subplot(3,1,1);\nsns.kdeplot(app_train.loc[app_train['TARGET']==0, 'EXT_SOURCE_1'],label='target==0', color='GREEN')\nsns.kdeplot(app_train.loc[app_train['TARGET']==1, 'EXT_SOURCE_1'],label='target==1');","c0504760":"plt.figure(figsize=(10,12))\n\n# iterate through the sources\nfor i, source in enumerate(['EXT_SOURCE_1','EXT_SOURCE_2','EXT_SOURCE_3']):\n    plt.subplot(3,1,i+1)\n    \n    sns.kdeplot(app_train.loc[app_train['TARGET']==0,source],label='target==0')\n    sns.kdeplot(app_train.loc[app_train['TARGET']==1,source],label='target==1')\n    \n    plt.title('Distribution of %s by Target Value' % source)\n    plt.xlabel('%s' %source);\n    plt.ylabel('Density');\nplt.tight_layout(h_pad=2.5)","46d315c7":"object_columns = app_train.dtypes[app_train.dtypes == 'object'].index.tolist()\nobject_columns","b8f8e1ef":"sns.catplot(x='CODE_GENDER', col='TARGET', data=app_train, kind='count')","7ca1b57a":"def show_category_by_target(df, columns):\n    for column in columns:\n        chart = sns.catplot(x=column, col='TARGET', data=df, kind='count')\n        chart.set_xticklabels(rotation=65)\n\nshow_category_by_target(app_train, object_columns)","1b8d3380":"# \ub300\ucd9c \ud69f\uc218 \ub300\ube44 \uc5f0\uccb4 \ube44\uc728\uc774 \ub0a8\uc131\uc774 \uc5ec\uc131\ubcf4\ub2e4 \ub192\uc74c --> \uc774\ub97c value_counts()\ub85c \ud655\uc778\n\ncond_1 = (app_train['TARGET'] == 1)\ncond_0 = (app_train['TARGET'] == 0)\nprint(app_train['CODE_GENDER'].value_counts()\/app_train.shape[0])\nprint('\\n\uc5f0\uccb4\uc778 \uacbd\uc6b0\\n',app_train[cond_1]['CODE_GENDER'].value_counts()\/app_train[cond_1].shape[0])\nprint('\\n\uc5f0\uccb4\uac00 \uc544\ub2cc \uacbd\uc6b0\\n',app_train[cond_0]['CODE_GENDER'].value_counts()\/app_train[cond_0].shape[0])","9ed8d7e4":"apps = pd.concat([app_train, app_test])\nprint(apps.shape)","d66705b8":"apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].head()","0f82a81f":"#apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].mean() #--> \uceec\ub7fc \ubc29\ud5a5\uc73c\ub85c \ud3c9\uade0\uc744 \uad6c\ud558\uae30 \uc704\ud574\uc11c axis=1 \ucd94\uac00 \ud574\uc57c\ud568\napps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].mean(axis=1)","5d01e715":"# \ub808\ucf54\ub4dc\ub2e8 mean\uacfc std \ub9cc \uad6c\ud568\n# max, min \ub3c4 \ud574\ubcfc \uc218 \uc788\uc9c0\ub9cc, \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc740 \uac83\uc5d0 \ub300\ud574 \ub108\ubb34 \uac00\uacf5\ud558\uba74 \uc131\ub2a5\uc774 \uc624\ud788\ub824 \ub5a8\uc5b4\uc9c8 \uc218 \uc788\uc73c\ubbc0\ub85c mean\uacfc std \ub9cc \uad6c\ud568\napps['APPS_EXT_SOURCE_MEAN'] = apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].mean(axis=1)\napps['APPS_EXT_SOURCE_STD'] = apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3']].std(axis=1)","f5d5476e":"apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3', 'APPS_EXT_SOURCE_STD']].head(10)","40a4ba19":"apps['APPS_EXT_SOURCE_STD'] = apps['APPS_EXT_SOURCE_STD'].fillna(apps['APPS_EXT_SOURCE_STD'].mean())","ac680ab7":"apps[['EXT_SOURCE_1', 'EXT_SOURCE_2', 'EXT_SOURCE_3', 'APPS_EXT_SOURCE_STD']].head(10)","9e48e93d":"# AMT_CREDIT \ube44\uc728\ub85c Feature \uac00\uacf5\n\napps['APPS_ANNUITY_CREDIT_RATIO'] = apps['AMT_ANNUITY']\/apps['AMT_CREDIT']\napps['APPS_GOODS_CREDIT_RATIO'] = apps['AMT_GOODS_PRICE']\/apps['AMT_CREDIT']\napps['APPS_CREDIT_GOODS_DIFF'] = apps['AMT_CREDIT'] - apps['AMT_GOODS_PRICE']","ca9b51e2":"# AMT_INCOME_TOTAL \ube44\uc728\ub85c Feature \uac00\uacf5\n\n# AMT_INCOME_TOTAL \ube44\uc728\ub85c \ub300\ucd9c \uae08\uc561 \uad00\ub828 \ud53c\ucc98 \uac00\uacf5\napps['APPS_ANNUITY_INCOME_RATIO'] = apps['AMT_ANNUITY']\/apps['AMT_INCOME_TOTAL']\napps['APPS_CREDIT_INCOME_RATIO'] = apps['AMT_CREDIT']\/apps['AMT_INCOME_TOTAL']\napps['APPS_GOODS_INCOME_RATIO'] = apps['AMT_GOODS_PRICE']\/apps['AMT_INCOME_TOTAL']\n# \uac00\uc871\uc218\ub97c \uace0\ub824\ud55c \uac00\ucc98\ubd84 \uc18c\ub4dd \ud53c\ucc98 \uac00\uacf5. \napps['APPS_CNT_FAM_INCOME_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['CNT_FAM_MEMBERS']","182c458f":"# DAYS_BIRTH, DAYS_EMPLOYED \ube44\uc728\ub85c Feature \uac00\uacf5\n\n# DAYS_BIRTH, DAYS_EMPLOYED \ube44\uc728\ub85c \uc18c\ub4dd\/\uc790\uc0b0 \uad00\ub828 Feature \uac00\uacf5. \napps['APPS_EMPLOYED_BIRTH_RATIO'] = apps['DAYS_EMPLOYED']\/apps['DAYS_BIRTH']\napps['APPS_INCOME_EMPLOYED_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['DAYS_EMPLOYED']\napps['APPS_INCOME_BIRTH_RATIO'] = apps['AMT_INCOME_TOTAL']\/apps['DAYS_BIRTH']\napps['APPS_CAR_BIRTH_RATIO'] = apps['OWN_CAR_AGE'] \/ apps['DAYS_BIRTH']\napps['APPS_CAR_EMPLOYED_RATIO'] = apps['OWN_CAR_AGE'] \/ apps['DAYS_EMPLOYED']","15b084f8":"# \ub370\uc774\ud130 \ub808\uc774\ube14 \uc778\ucf54\ub529, NULL\uac12\uc740 LightGBM \ub0b4\ubd80\uc5d0\uc11c \ucc98\ub9ac\ud558\ub3c4\ub85d \ud2b9\ubcc4\ud55c \ubcc0\uacbd\ud558\uc9c0 \uc54a\uc74c\n\nobject_columns = apps.dtypes[apps.dtypes=='object'].index.tolist()\n\nfor column in object_columns:\n    apps[column] = pd.factorize(apps[column])[0]","73e5feed":"apps_train = apps[-apps['TARGET'].isnull()]\napps_test = apps[apps['TARGET'].isnull()]\napps.shape, apps_train.shape, apps_test.shape","cf4bce04":"from sklearn.model_selection import train_test_split\n\nftr_app = apps_train.drop(['SK_ID_CURR', 'TARGET'], axis=1)\ntarget_app = app_train['TARGET']\n\ntrain_x, valid_x, train_y, valid_y = train_test_split(ftr_app, target_app, test_size=0.3, random_state=2020)\ntrain_x.shape, valid_x.shape","0eceeab8":"from lightgbm import LGBMClassifier","50df2f6e":"clf = LGBMClassifier(\n        n_jobs=-1,\n        n_estimators=1000,\n        learning_rate=0.02,\n        num_leaves=32,\n        subsample=0.8,\n        max_depth=12,\n        silent=-1,\n        verbose=-1\n        )\n\nclf.fit(train_x, train_y, eval_set=[(train_x, train_y), (valid_x, valid_y)], eval_metric= 'auc', verbose= 100, \n        early_stopping_rounds= 100)","997df954":"from lightgbm import plot_importance\n\nplot_importance(clf, figsize=(16, 32))","f61f31f6":"preds = clf.predict_proba(apps_test.drop(['SK_ID_CURR', 'TARGET'], axis=1))[:, 1 ]","84da8ac2":"app_test['TARGET'] = preds\napp_test[['SK_ID_CURR', 'TARGET']].to_csv('apps_baseline_02.csv', index=False)","011ac73e":"#### \ud559\uc2b5\ub41c Classifier\ub97c \uc774\uc6a9\ud558\uc5ec \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uc608\uce21\ud558\uace0 \uacb0\uacfc\ub97c Kaggle\ub85c Submit \uc218\ud589","b17c0b35":"### \uc74c\uc758 \uc0c1\uad00\uc774 \uac00\uc7a5 \ub192\uc558\ub358 3\uac1c\uc758 \ubcc0\uc218 EXT_SOURCE_1, EXT_SOURCE_2, EXT_SOURCE_3 \uc2dc\uac01\ud654","70e0be67":"### \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 app \ub370\uc774\ud130 \uc138\ud2b8 \ub85c\ub529","929b45ba":"###  Application \ub370\uc774\ud130 \uc138\ud2b8\uc5d0 \ub2e4\uc591\ud55c feature engineering \uc218\ud589","8b61a23d":"### Application_train\uc5d0 \ub300\ud55c EDA \uc9c4\ud589","4f1d2421":"#### \ud559\uc2b5 \ub370\uc774\ud130\ub97c \uac80\uc99d \ub370\uc774\ud130\ub85c \ubd84\ub9ac\ud558\uace0 LGBM Classifier\ub85c \ud559\uc2b5 \uc218\ud589","d1f5e5cb":"### category \ud53c\ucc98(object \uceec\ub7fc)\uc744 TARGET \uc720\ud615\uc5d0 \ub530\ub77c Count \ube44\uad50","a40dc684":"### \ud559\uc2b5 \ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \ub2e4\uc2dc \ubd84\ub9ac","03ada7c9":"#### \uc5f0\uc18d\ud615 \uc22b\uc790 feature\ub4e4\uc5d0 \ub300\ud574\uc11c TARGET\uac12\uc774 \uac01\uac01 0\uacfc 1\uc77c\ub54c\uc758 Histogram \uc2dc\uac01\ud654\n-  feature\ub4e4\uc5d0 \ub300\ud574 TATGET\uac12 \ubd84\ud3ec\ub3c4 \ube44\uad50 \uc2dc\uac01\ud654","ce0c06da":"### \ub370\uc774\ud130 \uac00\uacf5 \uc804 \ud559\uc2b5\uacfc \ud14c\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130 \uc138\ud2b8 \uacb0\ud569"}}