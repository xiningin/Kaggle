{"cell_type":{"a826e25a":"code","f6fd8d90":"code","da6c28ec":"code","3479384c":"code","cda41af6":"code","4a20120d":"code","836bd3be":"code","1f1c8ec2":"markdown","45dcc0d2":"markdown","81868342":"markdown","48885a25":"markdown","f9785192":"markdown","c00fffa6":"markdown","c1f59393":"markdown"},"source":{"a826e25a":"import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nimport matplotlib.pyplot as plt","f6fd8d90":"train = pd.read_csv(\"..\/input\/tabular-playground-series-dec-2021\/train.csv\")\ntrain = train.drop('Id',axis=1)\n\nX_train = train.drop('Cover_Type',axis=1)\ny_train = train['Cover_Type']","da6c28ec":"pca = PCA(n_components=len(X_train.columns), svd_solver='auto')\npca.fit(X_train)\nplt.figure(figsize=(15,8))\nplt.plot([*range(len(X_train.columns))], pca.explained_variance_ratio_)\nplt.xlim(0,10)\nplt.title(\"Eigen Vector\")\nplt.show()","3479384c":"print('How much n_components accommodate the data : ', sum(pca.explained_variance_ratio_[:2]))","cda41af6":"pca = PCA(n_components=2, svd_solver='auto')\nX_train = pca.fit_transform(X_train)\ntrain = pd.concat([pd.DataFrame(X_train), pd.DataFrame(y_train)],axis=1)","4a20120d":"a = train['Cover_Type'].unique()\nfig = plt.figure(figsize=(15,10))\nfor index in a:\n    plt.scatter(x=train[train['Cover_Type']==index][0], y=train[train['Cover_Type']==index][1], alpha=0.3)\n    \nplt.title(\"2D Visualization\")\nplt.show()","836bd3be":"fig = plt.figure(figsize=(20, 13))\nax1 = fig.add_subplot(121, projection='3d')\nfor target_class in train['Cover_Type'].unique():\n    x = train[train['Cover_Type'] == target_class][0]\n    y = train[train['Cover_Type'] == target_class][1]\n    z = train[train['Cover_Type'] == target_class]['Cover_Type']\n    ax1.scatter(x, y, z, s= 10, alpha=0.05)\n    \nax2 = fig.add_subplot(122, projection='3d')\nfor target_class in train['Cover_Type'].unique():\n    sample_train = train[train['Cover_Type'] == target_class].sample(min(10000, train.Cover_Type.value_counts()[target_class]))\n    x = sample_train[0]\n    y = sample_train[1]\n    z = sample_train['Cover_Type']\n    ax2.scatter(x, y, z, s= 10, alpha=0.05)\n    \nax1.set_title(\"3D scatter All scatter\")\nax2.set_title(\"3D scatter Sample scatter - max 10000\")\n\nplt.show()","1f1c8ec2":"#### Libaries","45dcc0d2":"#### 3D Visualization\n\nHow about using 3D visualization. <br>\nI think it's better way than using 2D","81868342":"# Visualization - Using PCA\n\nThis time, I will Visualization many columns using PCA","48885a25":"#### PCA\n\nPCA is one of the way to decrease column's length <br>\nThen, How we can find best n_components? <br>\nI usually using Eigen Vector <br>\nIt mean that, how much n_component accommodate the data. ","f9785192":"#### Load Dataset and Data Preprocessing\n\nI just dropped 'Id' column and, divide 'Cover_Type'","c00fffa6":"#### 2D Viusailzation\n\nNow, we have only 2 columns and target data('Cover_Type'). <br>\nSo we can visualization it","c1f59393":"Look this Eigen Vector chart. If you select 2, You can take the 95% data"}}