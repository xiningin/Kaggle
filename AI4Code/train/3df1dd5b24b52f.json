{"cell_type":{"06e76aa5":"code","91fc2d33":"code","014cfb9d":"code","e963e656":"code","3565fd7f":"code","75436af5":"code","afe61abe":"code","485e2b5a":"code","97b2174f":"code","8dbb7395":"code","01f58f7c":"code","1c75c4ed":"code","a2644480":"code","09af9abc":"code","dd500e81":"code","2fc66311":"code","ee188e36":"code","362279d6":"code","d949a56f":"code","e19114a1":"code","efdbf77d":"code","b4cf96e0":"code","e73ec42c":"code","2793b469":"code","a18a6cb7":"markdown","95f1a7ee":"markdown","db3869ec":"markdown","28ebd3e4":"markdown","a8ff05b7":"markdown"},"source":{"06e76aa5":"import numpy as np\nimport pandas as pd","91fc2d33":"!pip install flaml","014cfb9d":"from flaml import AutoML","e963e656":"train = pd.read_csv('..\/input\/mercedes-benz-greener-manufacturing\/train.csv.zip')\ntest = pd.read_csv('..\/input\/mercedes-benz-greener-manufacturing\/test.csv.zip')\nsubmission = pd.read_csv('..\/input\/mercedes-benz-greener-manufacturing\/sample_submission.csv.zip')","3565fd7f":"print(\"\\ntrain shape\",train.shape)\nprint(\"\\ntest shape\", test.shape)\nprint(\"\\nsubmission\", submission.shape)","75436af5":"from sklearn.preprocessing import LabelEncoder\nfor c in train.columns:\n    if train[c].dtype == 'object':\n        lbl = LabelEncoder()\n        lbl.fit(list(train[c].values) + list(test[c].values))\n        train[c] = lbl.transform(list(train[c].values))\n        test[c] = lbl.transform(list(test[c].values))","afe61abe":"X=train.drop(['y'],axis=1)\ny=train['y']\nprint(X.shape)\nprint(y.shape,type(y))","485e2b5a":"from sklearn.model_selection import train_test_split\ntrain_x,test_x,train_y,test_y=train_test_split(X,y,test_size=0.2)\nprint(train_x.shape)\nprint(test_x.shape)\nprint(train_y.shape)\nprint(test_y.shape)","97b2174f":"automl = AutoML()\nautoml_settings = {\n    \"time_budget\": 10,  # in seconds\n    \"metric\": 'r2',\n    \"task\": 'regression'\n}\nautoml.fit(X_train=train_x, y_train=train_y,\n           **automl_settings)\nprint(automl.predict(train_x).shape)\n\n# Export the best model\nprint(automl.model)","8dbb7395":"print('Best ML leaner:', automl.best_estimator)\nprint('Best hyperparmeter config:', automl.best_config)\nprint('Best accuracy on validation data: {0:.4g}'.format(1-automl.best_loss))\nprint('Training duration of best run: {0:.4g} s'.format(automl.best_config_train_time))","01f58f7c":"test_predict = automl.predict(test)\nsubmission['y']=test_predict\nsubmission.to_csv('submission.csv', index=False)","1c75c4ed":"automl.best_config","a2644480":"from mlxtend.regressor import StackingCVRegressor\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor","09af9abc":"lgbm = LGBMRegressor(n_estimators= 40, \n          num_leaves= 46, \n          min_child_samples= 13,\n          learning_rate= 0.0955054451824824, \n          log_max_bin= 10, \n          colsample_bytree= 1.0, \n          reg_alpha= 0.005626855491108521, \n          reg_lambda= 11.660799315054836)","dd500e81":"xgboost = XGBRegressor(n_estimators= 2,         \n                     max_leaves=8,         \n                     min_child_weight= 1.888631728256368,         \n                     learning_rate=1.0,         \n                     subsample= 0.86572740032985,         \n                     colsample_bylevel= 1.0,         \n                     colsample_bytree= 1.0,         \n                     reg_alpha= 0.0014067552771442214,         \n                     tree_method='gpu_hist',         \n                     num_boost_round= 2,         \n                     gpu_id=0,         \n                     reg_lambda= 0.0182039394877554)","2fc66311":"stack_gen = StackingCVRegressor(regressors=(xgboost,lgbm),\n                                meta_regressor=xgboost,\n                                use_features_in_secondary=True)","ee188e36":"from datetime import datetime","362279d6":"print('\u8fdb\u884c\u6a21\u578b\u53c2\u6570\u8bad\u7ec3 START Fit')\n\nprint(datetime.now(), '\u5bf9stack_gen\u96c6\u6210\u5668\u6a21\u578b\u8fdb\u884c\u53c2\u6570\u8bad\u7ec3')\nstack_gen_model = stack_gen.fit(np.array(X), np.array(y))","d949a56f":"stacking_predict = stack_gen_model.predict(np.array(test))","e19114a1":"xgboost.fit(train_x, train_y)","efdbf77d":"xgboost_predict = xgboost.predict(test)","b4cf96e0":"lgbm.fit(train_x,train_y)","e73ec42c":"lgbm_predict = lgbm.predict(test)","2793b469":"submission['y']=0.2*stacking_predict+0.5*xgboost_predict+0.3*lgbm_predict\nsubmission.to_csv('stacking_submission.csv',index=False)","a18a6cb7":"FLAML\u53c2\u6570\u4f7f\u7528\u8bf7\u67e5\u8be2https:\/\/github.com\/microsoft\/FLAML","95f1a7ee":"# \u4ee5\u4e0b\u7684\u4e09\u4e2a\u6a21\u578b\u7684\u6743\u91cd\u662f\uff0c\u901a\u8fc7\u51e0\u6b21\u5b9e\u9a8c\u201c\u611f\u89c9\u201d\u51fa\u6765\u7684\uff0c\u51fa\u6765submission\u6587\u4ef6\u7684private score\u57280.55279","db3869ec":"# \u8c03\u7528\u6a21\u578b\u5b9e\u4f8b\uff0c\u8bad\u7ec3\u6a21\u578b\uff0c\u8fdb\u884c\u9884\u6d4b","28ebd3e4":"# \u4f7f\u7528label encoder\u8fdb\u884c\u8f6c\u6362","a8ff05b7":"# \u8bb2\u4e0a\u8ff0[9]~[11]\u7684\u4ee3\u7801\u53cd\u590d\u8fd0\u884c\uff0c\u83b7\u5f97\u591a\u7ec4\u53c2\u6570\uff0c\u5e76\u5c06\u5176\u4e2d\u6700\u597d\u7684\u53c2\u6570\u62ff\u6765\u4f7f\u7528"}}