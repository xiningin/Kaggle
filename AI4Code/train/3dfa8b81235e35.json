{"cell_type":{"42accae1":"code","35d172c6":"code","332af9ca":"code","a15d567b":"code","72b68dcb":"code","16be13f2":"code","7ab58897":"code","110977e6":"code","97ab7c83":"code","cc6b755c":"code","088f89d2":"code","c4b9cd28":"code","ad6be8da":"code","d638767d":"code","b4d72387":"code","331731f7":"code","8607c26e":"code","5bdc5d21":"code","e292d60d":"code","e09f2ad8":"code","ebf6608c":"code","6a3ac34d":"code","7b1a9b3d":"code","f32c7183":"code","d4066cfa":"code","ff3c4dc6":"code","2002fced":"markdown","956c1693":"markdown"},"source":{"42accae1":"import numpy as np\nimport pandas as pd \n\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle\nfrom datetime import datetime\n\nimport torch\nimport torch.nn as nn\nfrom torchtext import data","35d172c6":"train_path = '..\/input\/nlp-getting-started\/train.csv'\ntest_path = '..\/input\/nlp-getting-started\/test.csv'\n\ntrain_df = pd.read_csv(train_path)\ntest_df = pd.read_csv(test_path)","332af9ca":"X_train, X_val, y_train, y_val = train_test_split(train_df['text'], train_df['target'], test_size=0.001, random_state=42 )\n\nX_test = test_df['text'].copy()\n\nprint(X_train.shape)\nprint(y_train.shape)\n\nprint(X_val.shape)\nprint(y_val.shape)\n\nprint(X_test.shape)\n\nprint(X_train.head(3))\nprint(X_test.head(3))","a15d567b":"from spacy.lang.en import English\nnlp = English()\ntokenizer = nlp.tokenizer","72b68dcb":"def normalise_text(text):\n    text = text.str.lower()\n    \n    replace_pairs = [\n        [r\"\\#\",\"\"],\n        [r\"http\\S+\",\"URL\"], \n        [r\"@\",\"\"],\n        [r\"[^A-Za-z0-9()!?\\'\\`\\\"]\", \" \"],\n        [\"\\s{2,}\", \" \"]\n    ]\n\n    for pair in replace_pairs:               \n        text = text.str.replace(pair[0], pair[1])\n                     \n    return text","16be13f2":"X_train = normalise_text(X_train)\nprint(X_train.head(3))\n\nX_test = normalise_text(X_test)\nprint(X_test.head(3))","7ab58897":"idx = 1\nword2idx = {'<PAD>': 0}\n\nfor row in X_train:\n    tokens = row.lower().split()\n    for token in tokens:\n        if token not in word2idx:\n            word2idx[token] = idx\n            idx += 1","110977e6":"print(len(word2idx))","97ab7c83":"train_sentences_as_int = []\nfor row in X_train:\n    tokens = row.lower().split()\n    sentence_as_int = [word2idx[token] for token in tokens if token in word2idx]\n    train_sentences_as_int.append(sentence_as_int)\n    \nprint(len(train_sentences_as_int))\nprint(train_sentences_as_int[0])","cc6b755c":"val_sentences_as_int = []\nfor row in X_val:\n    tokens = row.lower().split()\n    sentence_as_int = [word2idx[token] for token in tokens if token in word2idx]\n    val_sentences_as_int.append(sentence_as_int)\n    \nprint(len(val_sentences_as_int))\nprint(val_sentences_as_int[0])","088f89d2":"test_sentences_as_int = []\nfor row in X_test:\n    tokens = row.lower().split()\n    sentence_as_int = [word2idx[token] for token in tokens if token in word2idx]\n    test_sentences_as_int.append(sentence_as_int)\n    \nprint(len(test_sentences_as_int))\nprint(test_sentences_as_int[0])","c4b9cd28":"def data_generator(X, y, batch_size = 32):\n    X, y = shuffle(X, y)\n    n_batches = int(np.ceil(len(y) \/ batch_size))\n    for i in range(n_batches):\n        end = min((i + 1) * batch_size, len(y))\n        \n        X_batch = X[i * batch_size:end]\n        y_batch = y[i * batch_size:end]\n        \n        max_len = np.max([len(x) for x in X_batch])\n        for j in range(len(X_batch)):\n            x = X_batch[j]\n            pad = [0] * (max_len - len(x))\n            X_batch[j] = pad + x\n            \n        X_batch = torch.from_numpy(np.array(X_batch)).long()\n        y_batch = torch.from_numpy(np.array(y_batch)).long()\n        \n        yield X_batch, y_batch","ad6be8da":"for inputs, targets in data_generator(train_sentences_as_int, y_train):\n    print(f\"Inputs: {inputs}, shape: {inputs.shape}\")\n    print(f\"Targets: {targets}, shape: {targets.shape}\")\n    break","d638767d":"device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","b4d72387":"class RNN(nn.Module):\n    def __init__(self, n_vocab, embed_dim, n_hidden, n_rnnlayers, n_outputs):\n        super(RNN, self).__init__()\n        self.V = n_vocab\n        self.D = embed_dim\n        self.M = n_hidden\n        self.K = n_outputs\n        self.L = n_rnnlayers\n        \n        self.embed = nn.Embedding(self.V, self.D)\n        self.rnn = nn.LSTM(\n            input_size=self.D,\n            hidden_size=self.M,\n            num_layers=self.L,\n            batch_first=True\n            )\n        self.fc = nn.Linear(self.M, self.K)\n        \n    def forward(self, X):\n        h0 = torch.zeros(self.L, X.size(0), self.M).to(device)\n        c0 = torch.zeros(self.L, X.size(0), self.M).to(device)\n        \n        out = self.embed(X)\n        \n        out, _ = self.rnn(out, (h0, c0))\n        \n        out, _ = torch.max(out, 1)\n        \n        out = self.fc(out)\n        return out","331731f7":"model = RNN(len(word2idx), 20, 15, 1, 1)\nmodel.to(device)","8607c26e":"criterion = nn.BCEWithLogitsLoss()\noptimizer = torch.optim.Adam(model.parameters())","5bdc5d21":"train_gen = lambda: data_generator(train_sentences_as_int, y_train)\nval_gen = lambda: data_generator(val_sentences_as_int, y_val)","e292d60d":"def batch_gd(model, critetion, optimizer, epochs):\n    train_losses = []\n    val_losses = []\n    \n    for it in range(epochs):\n        t0 = datetime.now()\n        train_loss = []\n        val_loss = []\n        \n        for inputs, targets in train_gen():\n            targets = targets.view(-1, 1).float()\n            inputs, targets = inputs.to(device), targets.to(device)\n            \n            optimizer.zero_grad()\n            \n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n            \n            loss.backward()\n            optimizer.step()\n            \n            train_loss.append(loss.item())\n        \n        train_loss = np.mean(train_loss)\n        \n        train_losses.append(train_loss)\n        \n        \n        for inputs, targets in val_gen():\n            targets = targets.view(-1, 1).float()\n            inputs, targets = inputs.to(device), targets.to(device)\n            \n            optimizer.zero_grad()\n            \n            outputs = model(inputs)\n            loss = criterion(outputs, targets)\n            \n            loss.backward()\n            optimizer.step()\n            \n            val_loss.append(loss.item())\n        \n        val_loss = np.mean(val_loss)\n        \n        val_losses.append(val_loss)\n             \n        dt = datetime.now() - t0\n        print(f'Epoch {it+1}\/{epochs}, Train Loss: {train_loss:.4f}, Val Loss: {val_loss:.4f}, Duration: {dt}')\n    \n    return train_losses, val_losses\n            ","e09f2ad8":"train_losses, val_losses = batch_gd(model, criterion, optimizer, 15)","ebf6608c":"plt.plot(train_losses, label=\"Train Loss\")\nplt.plot(val_losses, label=\"Val Loss\")\nplt.legend()\nplt.show()","6a3ac34d":"# Accuracy\n\nn_correct = 0.\nn_total = 0.\nfor inputs, targets in train_gen():\n    targets = targets.view(-1, 1).float()\n\n    # Forward pass\n    outputs = model(inputs)\n\n    # Get prediction\n    predictions = (outputs > 0)\n\n    # update counts\n    n_correct += (predictions == targets).sum().item()\n    n_total += targets.shape[0]\n\ntrain_acc = n_correct \/ n_total\n\n\nn_correct = 0.\nn_total = 0.\nfor inputs, targets in val_gen():\n    targets = targets.view(-1, 1).float()\n\n    # Forward pass\n    outputs = model(inputs)\n\n    # Get prediction\n    predictions = (outputs > 0)\n\n    # update counts\n    n_correct += (predictions == targets).sum().item()\n    n_total += targets.shape[0]\n\ntest_acc = n_correct \/ n_total\nprint(f\"Train acc: {train_acc:.4f}, Val acc: {test_acc:.4f}\")","7b1a9b3d":"def test_data_generator(X, batch_size = 4000):\n    n_batches = int(np.ceil(len(X) \/ batch_size))\n    \n    for i in range(n_batches):\n        end = min((i + 1) * batch_size, len(X))\n        \n        X_batch = X[i * batch_size:end]\n        \n        max_len = np.max([len(x) for x in X_batch])\n        for j in range(len(X_batch)):\n            x = X_batch[j]\n            pad = [0] * (max_len - len(x))\n            X_batch[j] = pad + x\n            \n        X_batch = torch.from_numpy(np.array(X_batch)).long()\n    \n    yield X_batch","f32c7183":"test_gen = lambda: test_data_generator(test_sentences_as_int)\n\nmodel.eval()\n\npreds = pd.DataFrame()\n\nfor inputs in test_gen():\n    print(len(inputs))\n    \n    # Forward pass\n    outputs = model(inputs)\n\n    # Get prediction\n    predictions = (outputs > 0)\n   \n    preds = preds.append(pd.DataFrame(predictions.numpy()), ignore_index=True)\n","d4066cfa":"results = pd.concat([test_df, preds], axis=1)\nresults = results.rename(columns={0:'target'})\nresults['target'] = results['target'].apply(lambda x: 1 if x==True else 0)\n\nsubmission = results[['id', 'target']]\nprint(results.head())","ff3c4dc6":"submission.to_csv('submission.csv', index=False)","2002fced":"## AIM: Build a model that predicts which Tweets are about real disasters and which one\u2019s aren\u2019t","956c1693":"## Data cleaning\n\n- change to lowercase\n- remove special characters"}}