{"cell_type":{"5b88fb39":"code","f2019be4":"code","2401e812":"code","50448292":"code","d5181a4b":"code","fd64c9f4":"code","1dab7917":"code","17aa896e":"code","898e853f":"code","3fe99e45":"code","aa9654a1":"code","b3adb378":"code","756c9047":"code","0115b531":"code","b538e2c7":"code","fdc7bfa3":"code","82260d67":"code","0ce8214d":"code","82b1514e":"code","25a9669a":"code","b029362c":"code","ad504568":"code","1a64ee92":"code","9544f845":"code","d57e38b6":"code","6ef3962b":"code","9bfdf7cb":"code","267cf5d4":"code","7ce05713":"code","806145ee":"code","225c875a":"code","774e92e9":"code","ffd667c0":"code","1a1c5f8d":"code","808f01f1":"code","ae7135ab":"code","400efe05":"code","acb8ea4e":"code","44165b5c":"code","5393ddf2":"code","fffcf23f":"code","7d85fc1b":"code","4d9685b1":"code","7129ec3c":"markdown","613b9eca":"markdown","410e4edf":"markdown","48b66a78":"markdown","9f839322":"markdown","9198672b":"markdown","7cef5c6d":"markdown","c272ba09":"markdown","fd4b26ed":"markdown","0326120b":"markdown","f7db8b20":"markdown","0f67c009":"markdown","7505cc20":"markdown","dbeee848":"markdown","6e30e552":"markdown","2daa06b4":"markdown","f9de1e05":"markdown"},"source":{"5b88fb39":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f2019be4":"dftrain=pd.read_csv('..\/input\/titanic\/train.csv')\ndftest=pd.read_csv('..\/input\/titanic\/test.csv')","2401e812":"dftrain.head()","50448292":"dftrain.describe()","d5181a4b":"dftrain.info()","fd64c9f4":"dftrain.isnull().sum()","1dab7917":"dftest.isnull().sum()","17aa896e":"#Let's make a visual of the null values\nplt.figure(figsize=(10,10))\nsns.heatmap(dftrain.isnull(), cmap=None, yticklabels=False, cbar = False)","898e853f":"sns.countplot(x='Survived', hue='Sex', data=dftrain)\n#0= did not survive\n#1 = survived","3fe99e45":"\nprint(\"Female Survivors %:\", \n      dftrain[\"Survived\"][dftrain[\"Sex\"] == 'female'].value_counts(normalize = True)[1]*100)\n\nprint(\"Male Survivors %:\", \n      dftrain[\"Survived\"][dftrain[\"Sex\"] == 'male'].value_counts(normalize = True)[1]*100)\n\nsns.barplot(data=dftrain, x='Sex', y='Survived')\nplt.ylabel('Survival Rate')\nplt.show()","aa9654a1":"sns.countplot(x='Survived', hue='Pclass', data=dftrain)\n#0= did not survive, more people in the 3rd class perished\n#1 = survived","b3adb378":"print(\"Pclass 1 Survivors %:\", dftrain[\"Survived\"][dftrain[\"Pclass\"] == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Pclass 2 Survivors %:\", dftrain[\"Survived\"][dftrain[\"Pclass\"] == 2].value_counts(normalize = True)[1]*100)\n\nprint(\"Pclass 3 Survivors %:\", dftrain[\"Survived\"][dftrain[\"Pclass\"] == 3].value_counts(normalize = True)[1]*100)\n\n\nsns.barplot(data=dftrain, x='Pclass', y='Survived', palette=\"pastel\", edgecolor=\".6\")\nplt.show()","756c9047":"sns.countplot(data=dftrain, x='SibSp')","0115b531":"# Some of the values survived percentage percentage values\nprint(\"Passangers with SibSp who survived %:\", dftrain[\"Survived\"][dftrain[\"SibSp\"] == 0].value_counts(normalize = True)[1]*100)\n\nprint(\"Passangers with SibSp who survived %:\", dftrain[\"Survived\"][dftrain[\"SibSp\"] == 1].value_counts(normalize = True)[1]*100)\n\nprint(\"Passangers with SibSp who survived %:\", dftrain[\"Survived\"][dftrain[\"SibSp\"] == 2].value_counts(normalize = True)[1]*100)\n\nprint(\"Passangers with SibSp who survived %:\", dftrain[\"Survived\"][dftrain[\"SibSp\"] == 3].value_counts(normalize = True)[1]*100)\n\nsns.barplot(x=\"SibSp\", y=\"Survived\", data=dftrain)","b538e2c7":"sns.displot(dftrain['Fare'].dropna(), kde=False, bins=40)","fdc7bfa3":"sns.displot(dftest['Fare'].dropna(), kde=False, bins=40)","82260d67":"import cufflinks as cf\ncf.go_offline()\ndftrain['Fare'].iplot(kind='hist', bins=30)","0ce8214d":"sns.displot(dftrain['Age'].dropna(), kde=False, bins=30)","82b1514e":"sns.boxplot(data=dftrain, x='Pclass', y='Age')","25a9669a":"dftrain['Age'].mean()","b029362c":"print(dftrain.groupby(['Sex', 'Pclass'])['Age'].agg(['mean', 'median']).round(1))","ad504568":"print(dftrain.groupby(['Pclass'])['Age'].agg(['mean', 'median']).round(1))","1a64ee92":"print(dftest.groupby(['Pclass'])['Age'].agg(['mean', 'median']).round(1))","9544f845":"#Let's seperate ages into categories - train data\n\ndftrain['Age']= dftrain['Age'].fillna(-0.5)\n\n# 0~5:baby\u30015~12:child\u300112~18:teenager\u300118~35:young adult\u300135~65:adult\u300165>:elder \u3001-5:unknown\n\ndftrain['Age_group']= dftrain['Age'].apply(lambda x: 'unknown' if x < 0\n                                                else   'baby' if x>=0 and x < 5\n                                                else   'child' if x>=5 and x < 12\n                                                else   'teenager' if x>=12 and x < 18\n                                                else   'young adult' if x>=18 and x < 35 \n                                                else   'adult' if x>=35 and x < 65\n                                                else   'elder'\n                                              )","d57e38b6":"#Let's seperate ages into categories - test data\n\ndftest['Age']= dftest['Age'].fillna(-0.5)\n\n# 0~5:baby\u30015~12:child\u300112~18:teenager\u300118~35:young adult\u300135~65:adult\u300165>:elder \u3001-5:unknown\n\ndftest['Age_group']= dftest['Age'].apply(lambda x: 'unknown' if x < 0\n                                                else   'baby' if x>=0 and x < 5\n                                                else   'child' if x>=5 and x < 12\n                                                else   'teenager' if x>=12 and x < 18\n                                                else   'young adult' if x>=18 and x < 35 \n                                                else   'adult' if x>=35 and x < 65\n                                                else   'elder'\n                                              )","6ef3962b":"#One missing row for Embarked.  Let's fill it with 'S'\ndftrain['Embarked']=dftrain['Embarked'].fillna('S')\n","9bfdf7cb":"print(dftrain.groupby('Age_group').mean()['Survived'])\n#dftrain.groupby(['Age_group'])['Survived'].agg(['mean', 'median']).round(1)","267cf5d4":"sns.barplot(x='Age_group', y='Survived', data=dftrain)","7ce05713":"#Drop these columns for our model.  They are not needed now that we explored them.\ndftrain.drop(['Name','Age','Ticket','Fare','Cabin'],inplace=True,axis=1)\ndftest.drop(['Name','Age','Ticket','Fare','Cabin'],inplace=True,axis=1)","806145ee":"#Let's change these features to be numerical or else our machine learning algorithim will not take\nage_mapping = {'unknown': 0, 'baby': 1, 'child': 2, 'teenager': 3, 'young adult': 4, 'adult': 5, 'elder': 6}\ndftrain['Age_group'] = dftrain['Age_group'].map(age_mapping)\ndftest['Age_group'] = dftest['Age_group'].map(age_mapping)","225c875a":"#Let's change these features to be numerical or else our machine learning algorithim will not take\nembarked_mapping = {\"S\": 1, \"C\": 2, \"Q\": 3}\ndftrain['Embarked'] = dftrain['Embarked'].map(embarked_mapping)\ndftest['Embarked'] = dftest['Embarked'].map(embarked_mapping)","774e92e9":"#Let's change these features to be numerical or else our machine learning algorithim will not take\nsex_mapping = {\"male\": 0, \"female\": 1}\ndftrain['Sex'] = dftrain['Sex'].map(sex_mapping)\ndftest['Sex'] = dftest['Sex'].map(sex_mapping)","ffd667c0":"dftrain.head()","1a1c5f8d":"dftest.head()","808f01f1":"dftest.isnull().sum()\n","ae7135ab":"dftrain.isnull().sum()\n","400efe05":"dftest.info()","acb8ea4e":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report #tell precison, recall values, accuracy, F1 score. So it doesn't have to be read off of a confusion matrix","44165b5c":"X = dftrain.drop(['PassengerId', 'Survived'], axis=1)\ny = dftrain['Survived']\nX_train, X_test, y_train, y_test=train_test_split(X, y, test_size=0.30, random_state=101)","5393ddf2":"lrmodel=LogisticRegression()\nlrmodel.fit(X_train, y_train)\npredictions = lrmodel.predict(X_test)\n\n","fffcf23f":"acc_logreg = round(accuracy_score(predictions, y_test)*100, 2)\nacc_logreg","7d85fc1b":"print(classification_report(y_test, predictions))\n","4d9685b1":"logreg = dftest['PassengerId']\npredictions = lrmodel.predict(dftest.drop('PassengerId', axis=1))\n\n\n\n\n#set the output as a dataframe and convert to csv file named submission.csv\noutput = pd.DataFrame({ 'PassengerId' : logreg, 'Survived': predictions })\noutput.to_csv('submission.csv', index=False)\nprint(\"your submission was succesfull\")\n","7129ec3c":"# THE MODEL","613b9eca":"**AGE FEATURE**","410e4edf":"**PCLASS FEATURE**","48b66a78":"**SEX FEATURE**","9f839322":"# DATA VISUALIZATION","9198672b":"Most fares are between 0-50. Makes sense as most passangers are in the 3rd class","7cef5c6d":"**FARE FEATURE**","c272ba09":"# LOGISTIC REGRESSION\n* A classification algorithim where the response variable is categorical.\nExample:\n* Use a credit score and bank balance to predict whether a customer with default\n    Response varialble = Default or No Default\n* Use average rebounds per game and average ponts per game to predicts if a basketball player will get drafted to the NBA\n    Response variable = Drafted or Not Drafted\n* Based on square footage and number of bedrooms to predict if a house price will be over 200K\n    Response varialbe = Yes or No\n    \np(X) = e\u03b20 + \u03b21X1 + \u03b22X2 + \u2026 + \u03b2pXp \/ (1 + e\u03b20 + \u03b21X1 + \u03b22X2 + \u2026 + \u03b2pXp)\n\nUse of the probability threshold to classify the observation as either 1 or 0.\n\nFor example, we might say that observations with a probability greater than or equal to 0.5 will be classified as \u201c1\u201d and all other observations will be classified as \u201c0.\u201d\n![image.png](attachment:image.png)","fd4b26ed":"Passangers with 1 spouse or sibling were more likely to survive that those with 0 spouses or siblings (single traveling passangers) Passangers with more than 1 family member were also less likely to survive","0326120b":"Older ages of the 1st class passangers vs 2nd and 3rd. Also higher degree of age range in the 1st class cabin. Will use these median age values to impute (fill in) the median age into the age column based off of the passenger class. This will fill in the missing age values.\n\nLet's take a closer look at the age column","f7db8b20":"More males perished (0) than females","0f67c009":"**SIBSP FEATURE**","7505cc20":"Passangers in 1st class had a higher rate of survival, 62.9%","dbeee848":"Quite a few children <=10, Most population is between late teens and 40","6e30e552":"High rate of null values in the Cabin column as well as Age column.\nUse imputation to take the mean age values and fill them in with the missing age. We will check the average age by passanger class","2daa06b4":"Most passangers did not have a sibling or spouse. 2nd column = passangers either had a sibling OR a spouse.","f9de1e05":"Females had a higher change of survival, 74.2%"}}