{"cell_type":{"b4f2ab8b":"code","25ec3462":"code","1b026ae9":"code","872cb7a9":"code","101bd088":"code","59db97e5":"code","a9b24786":"code","448b231f":"code","c9e11e79":"code","4d285354":"code","c09cc773":"code","36969fdf":"code","3a815263":"code","4b633f62":"code","b82eff09":"code","1f7057f1":"code","49f7cb0f":"code","01f167b7":"code","fa0a1141":"code","e5c0d926":"code","2692c4cb":"markdown","33119382":"markdown","8534f0c4":"markdown","3e0913a2":"markdown"},"source":{"b4f2ab8b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","25ec3462":"#read data file\ndf = pd.read_csv(\"\/kaggle\/input\/mushroom-classification\/mushrooms.csv\")\nprint(df)\n","1b026ae9":"#read first 6 rows\n\ndf.head(6)","872cb7a9":"#read last 6 rows\ndf.tail(6)","101bd088":"##read structure of dataframe\n#df in which 8124 rows,23 columns\n#all not null values\n#all datatype-object,object dtype is for all text data; other dtypes-int,float,date-time\ndf.info()\n","59db97e5":"#t1-no null values\n#t2-all data should be in numeric format only\n\n#label encoding for single column\ndf[\"class\"].value_counts()#eg-in column class all \"e\" and \"p\" are replaced with numeric format & total=8124\n","a9b24786":"#Fetch features of type object\nobjfeatures = df.select_dtypes(include=\"object\").columns\nprint(objfeatures)","448b231f":"#label encoding for entire dataset;\n\n#itrate a loop for features of type object\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()#it will assign unique values for individual features i.e cols\n\nfor feat in objfeatures:#for loop will run for 23 cols i.e range objfeature\n    df[feat] = le.fit_transform(df[feat].astype(str))#all \"object(str) dtype\" will replace by \"int dtype\"\n\n\n#df[\"class\"] = le.fit_transform(df[\"class\"].astype(str)):-internally it will assign unique values for each col\n#fit-it will understand internaL data & transform - replace values and it will be saved in same dataframe itself\n\ndf.info()","c9e11e79":"#x & y\nX = df.drop([\"class\"],axis=1)#dropping class form level 1 i.e x= other col except classfeatures\ny = df['class']#explicitly for class y=labels\n","4d285354":"X.info()\n\n","c09cc773":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)\n","36969fdf":"X_train.info()#70%values\nX_test.info()#30%values","3a815263":"#model training\nfrom sklearn.naive_bayes import GaussianNB #gaussian naive bayes\n\n#gnb =\"\" #training empty brain from algo \n\ngnb = GaussianNB()#creating variable of algo and follow rules defined by algo\n\ngnb.fit(X_train, y_train) #training empty brain i.e for given x these was y i.e understanding 70% data","4b633f62":"#predicting Y value\ny_prediction = gnb.predict(X_test)\n\nprint(\"Train score\",gnb.score(X_train, y_train)*100)\nprint(\"Test score\",gnb.score(X_test, y_test)*100)\nprint(y_prediction)","b82eff09":"print(y_test)","1f7057f1":"for i in y_prediction:\n    print(i)","49f7cb0f":"temp_predictions =[] #emty array \n\nfor i, val in enumerate(y_prediction):#preprocessing it make array 2d \n    if val == 0:\n        temp_predictions.append('e')\n    if val == 1:\n        temp_predictions.append('p')\n            \n            \n            ","01f167b7":"for i in temp_predictions:\n    print(i)","fa0a1141":"for d, c in zip(temp_predictions,y_prediction):\n    print(d,c)","e5c0d926":"print(\"Train score\",clf_gnb.score(X_train, y_train)*100)\nprint(\"Test score\",clf_gnb.score(X_test, y_test)*100)","2692c4cb":"preprocessing","33119382":"splitting data in 70% and 30 %","8534f0c4":"model i.e algo and training","3e0913a2":"seprate x and y i.e features and labels"}}