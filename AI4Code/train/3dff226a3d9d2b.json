{"cell_type":{"ae5a4e69":"code","9de11c3e":"code","a5de206a":"code","9fac374e":"code","cdfc366a":"code","0eabad83":"code","9c67e208":"code","403064f3":"code","5c68a225":"code","8185d180":"code","7b135099":"code","1f3a483d":"code","6bffba29":"code","f1ce5319":"code","9d034961":"code","dc069785":"code","4b70a771":"code","3a740cfb":"code","3f1df566":"code","dd6d4a27":"code","724f49ee":"code","39a75cda":"code","6afcc083":"code","4b791ff5":"code","fba57cdc":"code","a118dd02":"code","9a641930":"code","d96652bd":"code","37531c63":"code","0ba4bb97":"code","f4772d28":"markdown","889e7438":"markdown","a5288867":"markdown","c27352d9":"markdown","208e6785":"markdown","cbaa509c":"markdown","859110e0":"markdown","e435fd3c":"markdown","93fa8e20":"markdown","d980885b":"markdown","f845e3fe":"markdown","0c171a4b":"markdown","e0745926":"markdown","7408fa1f":"markdown","4a19bcfb":"markdown","46452a9b":"markdown","6449dc6b":"markdown","ae0a63d0":"markdown","bb22f01a":"markdown","493cbf55":"markdown","5bedaea4":"markdown","4375988a":"markdown","4288c881":"markdown","a01a8f93":"markdown"},"source":{"ae5a4e69":"import pandas as pd\nimport numpy as np","9de11c3e":"df = pd.read_csv('..\/input\/dados-workshop-data-science-ucs-rodrigo-riboldi\/Workshop_Data_Science_UCS.csv')\n\ndict_cols= {'Carimbo de data\/hora': 'timestamp',\n        '4 \u00faltimos n\u00fameros do seu telefone': 'id_cliente',\n        'Escolha at\u00e9 3 dos produtos abaixo, respeitando o seu perfil de consumidor': 'produto',\n        'Selecione a sua forma de pagamento.' : 'pagamento'}\n  \ndf.rename(columns=dict_cols,\n          inplace=True)\n\ndf = df.astype(str)\n\ndf.head()","a5de206a":"df = df.drop('produto', axis=1).join(df['produto'].str.split(',', expand=True).stack().reset_index(level=1, drop=True).rename('produto'))\n\ndf['produto'] = df['produto'].str.lstrip(' ')\n\ndf_raw = df\n\n\ndf.head()","9fac374e":"# Valor pago\ndf['valor_pago'] = df['produto'].str.strip().str[-7:].astype('float')\n\n# Se o produto era ou n\u00e3o uma promo\u00e7\u00e3o\ndf['promocao'] = df['produto'].str.contains(\"Promo\u00e7\u00e3o\").astype(int).astype(bool)\n\n# Criando um id para cada venda\nimport re\ndf['id_venda'] = (df['timestamp'] + df['id_cliente']).map(lambda x: re.sub(r'\\W+', '', x))\n","cdfc366a":"# Criando uma vari\u00e1vel categ\u00f3rica para cada produto e forma de pagamento,\n# contendo o valor total gasto em cada categoria\ndf_categorias = pd.DataFrame()\ndf_categorias['mocassim_f'] = df['produto'].str.contains(\"Mocassim F\").astype(int)*df['valor_pago']\ndf_categorias['bota_f'] = df['produto'].str.contains(\"Bota F\").astype(int)*df['valor_pago']\ndf_categorias['sandalia_f'] = df['produto'].str.contains(\"Sand\u00e1lia F\").astype(int)*df['valor_pago']\ndf_categorias['scarpin_f'] = df['produto'].str.contains(\"Scarpin F\").astype(int)*df['valor_pago']\ndf_categorias['tenis_corrida_f'] = df['produto'].str.contains(\"T\u00eanis F Corrida\").astype(int)*df['valor_pago']\ndf_categorias['tenis_f'] = df['produto'].str.contains(\"T\u00eanis F\").astype(int)*df['valor_pago']\n\ndf_categorias['tenis_corrida_m'] = df['produto'].str.contains(\"T\u00eanis M Corrida\").astype(int)*df['valor_pago']\ndf_categorias['bota_m'] = df['produto'].str.contains(\"Bota M\").astype(int)*df['valor_pago']\ndf_categorias['sapatenis_m'] = df['produto'].str.contains(\"Sapat\u00eanis M\").astype(int)*df['valor_pago']\ndf_categorias['sandalia_m'] = df['produto'].str.contains(\"Sand\u00e1lia M\").astype(int)*df['valor_pago']\ndf_categorias['sapato_m'] = df['produto'].str.contains(\"Sapato M\").astype(int)*df['valor_pago']\ndf_categorias['tenis_m'] = df['produto'].str.contains(\"T\u00eanis M\").astype(int)*df['valor_pago']\n\ndf_categorias['valor_pix'] = df['pagamento'].str.contains(\"Pix\").astype(int)*df['valor_pago']\ndf_categorias['valor_boleto'] = df['pagamento'].str.contains(\"Boleto\").astype(int)*df['valor_pago']\ndf_categorias['valor_credito_av'] = df['pagamento'].str.contains(\"Cr\u00e9dito \u00e0 vista\").astype(int)*df['valor_pago']\ndf_categorias['valor_credito_sj'] = df['pagamento'].str.contains(\"Cr\u00e9dito 2x sem juros\").astype(int)*df['valor_pago']\ndf_categorias['valor_credito_cj'] = df['pagamento'].str.contains(\"Cr\u00e9dito 3 ou mais vezes com juros\").astype(int)*df['valor_pago']","0eabad83":"# Unindo os datasets\ndf = pd.concat([df,df_categorias], axis=1)\n\n# Separando pagamentos em pre\u00e7o cheio e promo\u00e7\u00e3o\ndf['valor_fullprice'] = df['valor_pago']\ndf.loc[df['promocao'] == True, 'valor_fullprice'] = 0  \n\ndf['valor_promocao'] = df['valor_pago']\ndf.loc[df['promocao'] == False, 'valor_promocao'] = 0  \n\n# Verificando\ndf.head()","9c67e208":"df_soma = df.groupby('id_cliente').sum()\n\ndf_soma.drop('promocao', axis = 1, inplace = True)","403064f3":"# produtos unicos\ndf_produtos_unicos = df.groupby(['id_cliente']).nunique()[['produto']]\n\ndf_produtos_unicos.rename(columns={'produto': 'mix_produtos'}, inplace = True)\n\n# produtos total\nds_produtos_total = df.groupby(['id_cliente']).count()[['produto']]\n\nds_produtos_total.rename(columns={'produto': 'total_produtos'}, inplace = True)\n\n# vendas\ndf_quantidade_tickets = df.groupby(['id_cliente']).nunique()[['id_venda']]\n\ndf_quantidade_tickets.rename(columns={'id_venda': 'frequencia'}, inplace = True)","5c68a225":"df = df_soma.merge(df_produtos_unicos, on = 'id_cliente')\n\ndf = df.merge(ds_produtos_total, on = 'id_cliente')\n\ndf = df.merge(df_quantidade_tickets, on = 'id_cliente')\n\ndf.head()","8185d180":"df['ticket_medio'] = df['valor_pago'] \/ df['frequencia']\n\ndf['fullprice'] = df['valor_fullprice'] \/ df['valor_pago']\ndf['promocao'] = df['valor_promocao'] \/ df['valor_pago']\n\ndf.rename(columns={'valor_pago': 'valor_total'}, inplace = True)\n\ndf.head()","7b135099":"from sklearn.preprocessing import StandardScaler\n\ndf_normalizado = StandardScaler().fit_transform(df)\ndf_normalizado = pd.DataFrame(df_normalizado)\n\ndf_normalizado.head()","1f3a483d":"from sklearn.decomposition import PCA\n\nfor i in range(1,df_normalizado.shape[0]):\n  pca = PCA(n_components=i)\n  principalComponents = pca.fit_transform(df_normalizado)\n  variancia = pca.explained_variance_ratio_.sum()\n\n  if  variancia > 0.95:\n    break;\n\nprint(\"Componentes: \", pca.n_components_)\nprint(\"Vari\u00e2ncia: \", pca.explained_variance_ratio_.sum())\n\ndf_pca = pd.DataFrame(data = principalComponents)","6bffba29":"import matplotlib.pyplot as plt\n\nfig = plt.figure(figsize = (8,8))\nax = fig.add_subplot(1,1,1) \nax.set_xlabel('Componente 1', fontsize = 15)\nax.set_ylabel('Componente 2', fontsize = 15)\nax.set_title('Visualiza\u00e7\u00e3o de 2 componentes', fontsize = 20)\nax.scatter(df_pca[0],\n           df_pca[1],\n           s = 100,\n           marker = \"o\",\n           alpha = 0.6)\nax.grid()","f1ce5319":"# Visualizando em 3D\nimport plotly.express as px\n\nfig = px.scatter_3d(df_pca, x=0, y=1, z=2)\nfig.show()","9d034961":"from sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nfrom sklearn.metrics import calinski_harabasz_score\nfrom sklearn.metrics import davies_bouldin_score\n\nsilhouette_coefficients = []\ncalinski_coefficients = []\ndavies_coefficients = []\ndistorsions = []\n\nx = range(2,15)\nfor k in x:\n  kmeans = KMeans(n_clusters=k, random_state = 1)\n  kmeans.fit(df_pca)\n\n  silhueta = silhouette_score(df_pca, kmeans.labels_)\n  silhouette_coefficients.append(silhueta)\n\n  calinski = calinski_harabasz_score(df_pca, kmeans.labels_)\n  calinski_coefficients.append(calinski)\n\n  davies = davies_bouldin_score(df_pca, kmeans.labels_)\n  davies_coefficients.append(davies)\n\n  distorcao = kmeans.inertia_\n  distorsions.append(distorcao)\n\n  # Silhueta e Calinski quanto maior melhor\n  # Davies quanto menor melhor\n\n  print(\"N\u00famero de clusters: {:1}  Silhueta: {:1.4}  Elbow: {:1.4}  Calinski: {:1.4}  Davies: {:1.4}\".format(k, silhueta,distorcao, calinski, davies))","dc069785":"fig, axs = plt.subplots(2, 2,figsize=(10,10))\n\n# x \u00e9 o vetor com os clusters para testar no la\u00e7o for\n\naxs[0, 0].plot(x, silhouette_coefficients)\naxs[0, 0].set_title('Silhueta')\naxs[0, 1].plot(x, distorsions, 'tab:orange')\naxs[0, 1].set_title('Elbow')\naxs[1, 0].plot(x, calinski_coefficients, 'tab:green')\naxs[1, 0].set_title('Calinski Harabasz')\naxs[1, 1].plot(x, davies_coefficients, 'tab:red')\naxs[1, 1].set_title('Davies Bouldin')\n\nfor ax in axs.flat:\n    ax.set(xlabel='Clusters', ylabel='Score', xticks = x)\n\nfor ax in axs.flat:\n    ax.grid()\n\nplt.show()","4b70a771":"kmeans = KMeans(n_clusters=6, random_state = 123)\nkmeans.fit(df_pca)\n\ndf_cluster = pd.DataFrame(data = kmeans.labels_\n             , columns = ['Cluster']) \n\ndf_cluster = df_cluster.set_index(df.index)","3a740cfb":"df_pca_cluster = df_pca.set_index(df.index).merge(df_cluster, on = 'id_cliente')","3f1df566":"fig = plt.figure(figsize = (8,8))\nax = fig.add_subplot(1,1,1) \nax.set_xlabel('Componente 1', fontsize = 15)\nax.set_ylabel('Componente 2', fontsize = 15)\nax.set_title('Clusters', fontsize = 20)\nax.scatter(df_pca_cluster[0],\n           df_pca_cluster[1],\n           c = df_pca_cluster['Cluster'],\n           s = 100,\n           marker = \"o\",\n           alpha = 0.6)\n\nax.grid()","dd6d4a27":"# Em 3D\n\nfig = px.scatter_3d(df_pca_cluster, x=0, y=1, z=2, color='Cluster')\nfig.show()","724f49ee":"df_feature_cluster = df.merge(df_cluster, on = 'id_cliente')","39a75cda":"df_id_cluster = df_feature_cluster[['Cluster']]","6afcc083":"df_feature_cluster.groupby(by = 'Cluster').mean()","4b791ff5":"df_feature_cluster.groupby(by = 'Cluster').mean()[['frequencia', 'ticket_medio', 'valor_total', 'fullprice', 'promocao', 'total_produtos', 'mix_produtos']]","fba57cdc":"df_feature_cluster.groupby(by = 'Cluster').mean()[['valor_pix', 'valor_boleto', 'valor_credito_av', 'valor_credito_sj', 'valor_credito_cj']]\t\t\t\t","a118dd02":"df_feature_cluster.groupby(by = 'Cluster').mean()[['mocassim_f',\t'bota_f',\t'sandalia_f',\t'scarpin_f',\t'tenis_corrida_f',\t'tenis_f', 'tenis_corrida_m',\t'bota_m',\t'sapatenis_m',\t'sandalia_m',\t'sapato_m',\t'tenis_m'\t]]\t\t\t\t\n","9a641930":"tamanho_clusters = df_feature_cluster.reset_index().groupby(by = 'Cluster').count()[['id_cliente']]\n\ntotal_cliente_cluster = df_feature_cluster.reset_index().groupby(['Cluster']).agg({'id_cliente':'nunique'}).id_cliente\n\ntamanho_clusters","d96652bd":"total_clientes = df_feature_cluster.reset_index().nunique()['id_cliente']\ntotal_clientes","37531c63":"pd.options.mode.chained_assignment = None  # default='warn'\n\ndf_pagamento = df_feature_cluster[['Cluster', 'valor_pix', 'valor_boleto', 'valor_credito_av', 'valor_credito_sj', 'valor_credito_cj']].set_index('Cluster')\n\ndf_pagamento[df_pagamento != 0] = 1\n\ndf_pagamento = df_pagamento.reset_index().groupby(['Cluster']).sum()\n\ndf_pagamento = df_pagamento.div(total_cliente_cluster, axis=0)*100\n\ndf_pagamento","0ba4bb97":"df_categorias = df_feature_cluster[['Cluster', 'mocassim_f',\t'bota_f',\t'sandalia_f',\t'scarpin_f',\t'tenis_corrida_f',\t'tenis_f', 'tenis_corrida_m',\t'bota_m',\t'sapatenis_m',\t'sandalia_m',\t'sapato_m',\t'tenis_m'\t]].set_index('Cluster')\n\ndf_categorias[df_categorias != 0] = 1\n\ndf_categorias = df_categorias.reset_index().groupby(['Cluster']).sum()\n\ndf_categorias = df_categorias.div(total_cliente_cluster, axis=0)*100\n\ndf_categorias","f4772d28":"Importa\u00e7\u00e3o das bibliotecas e arquivo","889e7438":"## Normaliza\u00e7\u00e3o dos dados para an\u00e1lise de componentes principais","a5288867":"Somando o valor total gasto por cada cliente no per\u00edodo","c27352d9":"M\u00e9dia de todas colunas","208e6785":"Visualizando os componentes","cbaa509c":"## Simula\u00e7\u00e3o de uma segmenta\u00e7\u00e3o de clientes com base no perfil de compras em um e-commerce de cal\u00e7ados","859110e0":"Separando vendas com mais de um produto em v\u00e1rias linhas","e435fd3c":"Porcentagem de clientes dentro do grupo que comprou cada categoria\nN\u00e3o soma 100% pois cada cliente pode comprar mais de uma categoria","93fa8e20":"### Rodando a segmenta\u00e7\u00e3o","d980885b":"M\u00e9dia de frequencia, ticket m\u00e9dio, valor total, %fp, %md, total produtos e mix de produtos","f845e3fe":"# Workshop de Data Science - Rodrigo Martini Riboldi","0c171a4b":"## An\u00e1lise de componentes principais","e0745926":"# Estudando os Clusters\n\n","7408fa1f":"### Testes para escolher o n\u00famero ideal de clusters","4a19bcfb":"Calculando quantos produtos foram comprados por compra","46452a9b":"M\u00e9dia de cada categoria","6449dc6b":"## Clusteriza\u00e7\u00e3o utilizando KMeans","ae0a63d0":"Calculando ticket m\u00e9dio e percentual de compras com pre\u00e7o cheio e promo\u00e7\u00e3o","bb22f01a":"Visualizando os clusters","493cbf55":"Porcentagem de clientes dentro do grupo que utilizou cada forma de pagamento\nN\u00e3o soma 100% pois cada cliente pode utilizar mais de uma forma","5bedaea4":"M\u00e9dia de cada forma de pagamento","4375988a":"Quantidade de clientes em cada grupo","4288c881":"Juntando em um \u00fanico dataset","a01a8f93":"Nomeando e criando vari\u00e1veis categ\u00f3ricas"}}