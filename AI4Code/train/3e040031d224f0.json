{"cell_type":{"605c3043":"code","64720142":"code","c2ef7124":"code","beff6233":"code","c7a01370":"code","792dd124":"code","40680f67":"code","657175a6":"code","b90654fb":"code","ee00943c":"code","557d81d8":"code","7cf2223b":"code","77e25611":"code","1d24f856":"code","21603e85":"code","86a26f6c":"code","ce1120c9":"code","f795a40b":"code","b9af37bc":"code","78f614de":"code","490710f2":"code","ed821d00":"code","a49080f3":"code","a0f3f403":"code","ef01ac4f":"code","c170a842":"code","8cb98edb":"code","eda8a1d4":"code","3eb0b527":"code","8a1d6f24":"code","35a784b9":"code","9a224934":"code","ab0f7234":"code","453677f1":"code","f7aa9b2c":"code","94077669":"code","6c194ecd":"code","e87ea3f4":"code","8ff1b526":"markdown","ea2d52fb":"markdown","938afadf":"markdown","6a00021d":"markdown","1e372fd2":"markdown","13ac9188":"markdown","6334eef8":"markdown","d2c339ae":"markdown","0f8a0faa":"markdown","4c2389d0":"markdown","99d9d65f":"markdown","c5466a63":"markdown","0d44166a":"markdown","fdac928c":"markdown","5ff113bf":"markdown","c10750ec":"markdown","5d769f30":"markdown","beb7262c":"markdown","786007ae":"markdown","251e85c1":"markdown","ef0289ec":"markdown","e227efe9":"markdown","5daa0bbf":"markdown","71f4a19c":"markdown","570690af":"markdown","bb8e1a9c":"markdown","fd7a04c3":"markdown","0c630c65":"markdown","25ab195c":"markdown","73d9ef4b":"markdown","e3b7a3e2":"markdown","b4550f38":"markdown"},"source":{"605c3043":"# load dependencies\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import Pipeline\nfrom sklearn import svm\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder\n","64720142":"# read the data\ntitanic_train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntitanic_test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntitanic_result = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")","c2ef7124":"titanic_train.head(10)","beff6233":"print(f'Training dataset: {titanic_train.shape[0]} data points \\nTest dataset: {titanic_test.shape[0]} data points')","c7a01370":"# features count\nfeatures_count = titanic_test.shape[1]\nprint(f'There are {features_count} columns including class column, thus there are {features_count - 1} features in the dataset.')","792dd124":"# check the data type\ntitanic_train.dtypes","40680f67":"titanic_train.describe(include='all')","657175a6":"# selection by survival\nsurvived_mask = titanic_train['Survived'] == 1\nall_survived = titanic_train[survived_mask]\nnobody_survived = titanic_train[~survived_mask]","b90654fb":"# find min and max age\nmin_age = titanic_train['Age'].min(); max_age = titanic_train['Age'].max()\nprint(f'The youngest person is {min_age}, the oldest is {max_age} years old')","ee00943c":"# men and women who survived\nsurvived_men = all_survived[all_survived['Sex'] == 'male']\nsurvived_women = all_survived[all_survived['Sex'] == 'female']\nsurvived_men_age = survived_men[['Sex', 'Age']]\nsurvived_women_age = survived_women[['Sex', 'Age']]\n","557d81d8":"survived_men_age.head()","7cf2223b":"def get_age_by_sex_count(dataset, age_class, append_negative = False):\n    dataset = dataset.dropna()\n    dataset['Age'] = dataset['Age'].astype(int)\n    ranges = [i.split('-') for i in age_class]\n    result = []\n    for start, end in ranges:\n        range_ =  dataset[(dataset['Age'] >= int(start)) & (dataset['Age'] <= int(end))]\n        count = len(range_)\n        if append_negative == True:\n            count = -count\n        result.append(count)\n    return result","77e25611":"age_class = ['0-5', '6-10', '11-15', '16-20', '21-25', '26-30', '31-35', '36-40', '41-45', '46-50', '51-55', '56-60', '61-65', '66-70', '75-80', '80-85']\nage_sex_count_men = get_age_by_sex_count(survived_men_age, age_class, append_negative = True)\nage_sex_count_women = get_age_by_sex_count(survived_women_age, age_class)","1d24f856":"\nage_sex_data = pd.DataFrame({'Age': age_class, \n                    'Male': age_sex_count_men, \n                    'Female': age_sex_count_women})\n\nbar_plot = sns.barplot(x='Male', y='Age', data=age_sex_data, order=age_class, lw=0)\n\nbar_plot = sns.barplot(x='Female', y='Age', data=age_sex_data, order=age_class, lw=0)\n\nbar_plot.set(xlabel=\"Number of People\", ylabel=\"Age-Group\", title = \"Population Pyramid of Suvived on Titanic\")\n\n","21603e85":"# subset by port \nby_port = titanic_train[['Survived', 'Embarked']]\n# port Cherbourg\nport_c = by_port[by_port['Embarked'] == 'C']\n# port Queenstown\nport_q = by_port[by_port['Embarked'] == 'Q']\n# port Southampton\nport_s = by_port[by_port['Embarked'] == 'S']\n\nloaded_by_port = [len(port_c), len(port_q), len(port_s)]\nsurvived_by_port = [len(port_c[port_c['Survived'] == 1]), len(port_q[port_q['Survived'] == 1]), len(port_s[port_s['Survived'] == 1])]\nloaded_survived_by_port = [loaded_by_port, survived_by_port]","86a26f6c":"# bar plot initialization\nX = np.arange(3)\nfig = plt.figure(figsize=(10, 10))\nax = fig.add_axes([0,0,1,1])\nax.set_title('Survival by port Embarked')\nlabels = ['Cherbourg', 'Queenstown', 'Southampton']\nx = np.arange(len(labels))  # the label locations\nax.bar(X + 0.00, loaded_survived_by_port[0], color = 'b', width = 0.25)\nax.bar(X + 0.25, loaded_survived_by_port[1], color = 'g', width = 0.25)\nax.set_ylabel('Number of people')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend(labels=['Total', 'Survived'])","ce1120c9":"# select a subset of data by class and ticket price\nby_class = titanic_train[['Survived', 'Pclass', 'Fare']]","f795a40b":"# prepare the data\nfirst_class = by_class[by_class['Pclass'] == 1]\nsecond_class = by_class[by_class['Pclass'] == 2]\nthird_class = by_class[by_class['Pclass'] == 3]\n\ntotal_by_class = [len(first_class), len(second_class), len(third_class)]\nsurvived_by_class = [len(first_class[first_class['Survived'] == 1]), len(second_class[second_class['Survived'] == 1]), len(third_class[third_class['Survived'] == 1])]\n\ntotal_survived_by_class = [total_by_class, survived_by_class]","b9af37bc":"# plot \nX_class = np.arange(3)\nfig_class = plt.figure(figsize=(10, 10))\nax_class = fig_class.add_axes([0,0,1,1])\nax_class.set_title('Survival by Class')\nlabels_class = ['1', '2', '3']\nx_class = np.arange(len(labels_class))  # the label locations\nax_class.bar(X + 0.00, total_survived_by_class[0], color = 'b', width = 0.25)\nax_class.bar(X + 0.25, total_survived_by_class[1], color = 'g', width = 0.25)\nax_class.set_ylabel('Number of people')\nax_class.set_xticks(x_class)\nax_class.set_xticklabels(labels_class)\nax_class.legend(labels=['Total', 'Survived'])","78f614de":"# prepare selection\nsurvived_fare_mask = by_class['Survived'] == 1\nsurvived_fare = by_class[survived_fare_mask]\nno_survival_fare = by_class[~survived_fare_mask]\nsurvived_fare = survived_fare['Fare']","490710f2":"# plot\nax = sns.scatterplot(x='Pclass', y='Fare',\n                hue='Survived', data=by_class, )\nax.set_title('Distribution of fare among classes')","ed821d00":"first_class_fare_range = [first_class['Fare'].min(), first_class['Fare'].max()]\nprint(f'The lowest ticket price for first class is ${first_class_fare_range[0]}, the highest is ${first_class_fare_range[1]}')","a49080f3":"all_survived_no_cabin = all_survived[all_survived['Cabin'].isnull()]['Fare'].count()\nall_survived_yes_cabin = all_survived[all_survived['Cabin'].notnull()]['Fare'].count()\nnobody_survived_no_cabin = nobody_survived[nobody_survived['Cabin'].isnull()]['Fare'].count()\nnobody_survived_yes_cabin = nobody_survived[nobody_survived['Cabin'].notnull()]['Fare'].count()\n","a0f3f403":"df = pd.DataFrame({'Cabin':[all_survived_yes_cabin, nobody_survived_yes_cabin], 'No cabin':[all_survived_no_cabin, nobody_survived_no_cabin]}, index=['Survived', 'Did not survive'] )\n \n# make the multiple plot\ndf.plot(kind='pie', subplots=True, figsize=(16,8))\n","ef01ac4f":"# correlations\ntitanic_corr = titanic_train.corr()\nsns.heatmap(titanic_corr, annot=True)\nplt.show()","c170a842":"nulls = pd.concat([titanic_train.isnull().sum()], axis=1)\nnulls[nulls.sum(axis=1) > 0]","8cb98edb":"titanic_train.info()","eda8a1d4":"titanic_train.describe(include='all')","3eb0b527":"# creating preprocessing pipeline for numerical and categorical values\nnumeric_features = ['Age', 'Fare']\nnumeric_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='mean')), \n                                     ('scaler', StandardScaler())])\ncategorical_features = ['Embarked', 'Pclass', 'Sex']\ncategorical_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='most_frequent')),\n                                         ('onehotencoder', OneHotEncoder(handle_unknown='ignore'))])\npreprocessor = ColumnTransformer(transformers=[('num', numeric_transformer, numeric_features),\n                                               ('cat', categorical_transformer, categorical_features)])","8a1d6f24":"# select labels\nX = titanic_train.drop('Survived', axis=1)\ny = titanic_train['Survived']","35a784b9":"# random forest\nrandom_forest_model = make_pipeline(preprocessor, RandomForestClassifier())\nparam_grid = {\n    'randomforestclassifier__n_estimators': [10, 100, 1000]\n    }\ngrid_rf_clf = GridSearchCV(random_forest_model, param_grid, cv=8)\ngrid_rf_clf.fit(X, y);\ngrid_rf_clf.best_score_","9a224934":"# svm\nsvm_model = make_pipeline(preprocessor, svm.SVC())\nparam_grid = {\n    'svc__C': [0.01, 0.1, 1.0],\n    'svc__gamma': [0.001, 0.01, 0.1, 1],\n    'svc__kernel': ['linear', 'poly', 'rbf']\n    }\ngrid_svm_clf = GridSearchCV(svm_model, param_grid, cv=8)\ngrid_svm_clf.fit(X, y);\ngrid_svm_clf.best_score_","ab0f7234":"# decision tree\ndt_model = make_pipeline(preprocessor, DecisionTreeClassifier())\ndt_scores = cross_val_score(dt_model, X, y.values.ravel(), cv=8, scoring='accuracy')\ndt_scores.max()","453677f1":"dt_model.fit(X,y)\npredictions = dt_model.predict(titanic_test)","f7aa9b2c":"models = pd.DataFrame({\n    'Model': ['RandomForestClassifier', 'SVC', 'DecisionTreeClassifier'],\n    'Score': [grid_rf_clf.best_score_, grid_svm_clf.best_score_, dt_scores.max()]})\nmodels.sort_values(by='Score', ascending=False)","94077669":"predictions","6c194ecd":"submission = pd.DataFrame({\n        \"PassengerId\": titanic_test[\"PassengerId\"],\n        \"Survived\": predictions\n    })\nsubmission.head(20)","e87ea3f4":"# save to file\nfilename = 'titanic_predictions_1.csv'\n\nsubmission.to_csv(filename,index=False)","8ff1b526":"## 5.Prediction ","ea2d52fb":"### 1. Data collection","938afadf":"The age varies from 0.4 to 80 so we should take into account all possible categories.","6a00021d":"How many columns and what are their data types?","1e372fd2":"#### 1. Does survival depend on such demographic factors like sex and age?","13ac9188":"#### 4.Is survival correlated to a ticket class and ticket fare?","6334eef8":"#### 2.Is there a correlation between port of embarked and survival?","d2c339ae":"#### 4.Is there corrreletion beetwen the deck and survival?\n","0f8a0faa":"### 2. Exploratory data analysis","4c2389d0":"## 6. Submission","99d9d65f":"What are the top 10 data points in a training dataset?","c5466a63":"It is not clear from the dataset why majority of Cabin values is missing Accorrding to some open sourses a cabin was offered just to those of 1 class, but as we can see few 2 and 3 classes also have a cabin while some 1 class does not. Let's plot correlaion of survival to a cabin feature. \n","0d44166a":"The plot introduces the fact that majority was embarked in Southampton. Survivals are observed in each group but majority in Southampton. It looks like little over than half survivals from SH and CH while less than half survivals among passangers who embarked in QS.","fdac928c":"Let's ask questions which help us to understand the data better.\n\n1. Does survival depend on such demographic factors like sex and age?\n2. Is there a correlation between port of embarked and survival?\n3. Is survival correlated to a ticket class and ticket fare?\n4. Cabin indicates a deck. Is there corrreletion beetwen the deck and survival?","5ff113bf":"## 4. Train and evaluate the models ","c10750ec":"## Data analysis of survival on Titanic","5d769f30":"| Variable \t| Definition                                 \t| Key                       \t|\n|----------\t|--------------------------------------------\t|---------------------------\t|\n| survival \t| Survival                                   \t| 0 = No, 1 = Yes           \t|\n| pclass   \t| Ticket class                               \t| 1 = 1st, 2 = 2nd, 3 = 3rd \t|\n| sex      \t| Sex                                        \t|                           \t|\n| Age      \t| Age in years                               \t|                           \t|\n| sibsp    \t| # of siblings \/ spouses aboard the Titanic \t|                           \t|\n| parch    \t| # of parents \/ children aboard the Titanic \t|                           \t|\n| ticket   \t| Ticket number                              \t|                           \t|\n| fare     \t| Passenger fare                             \t|                           \t|\n| cabin    \t| Cabin number                               \t|                           \t|\n| embarked \t| Port of Embarkation                        \t|                           \t|","beb7262c":"There is a hypothesys that travellers from First class had higher surrvival rate. Does it make sense in terms of data?","786007ae":"We will now rank our models to choose one which perform better on validation set.","251e85c1":"#### 3. Is survival correlated to a ticket class and ticket fare?","ef0289ec":"## 3.Data preparation\n\nData preparation includes following steps:\n * missing data imputing\n * one hoc encoding\n * feature normalization ","e227efe9":"This pie chart illustrates that majority of travellers who have a cabin survived while majority who did not have one did not.","5daa0bbf":"What is age range? ","71f4a19c":"In order to have insights about sex\/age patterns which could affect survival we plot a two-sided histogram, in which the age ranges are listed down the center of the graph and the distribution of males and females are displayed on each side.","570690af":"Number of survivals is roughly even, however number of survived passengers from first class is higher. For second class the plot demonstrates around 50% survivals meanwhile more than medium survivals for 1 class in comparison with its total and much less then medium survival for third class in comparison with its total.","bb8e1a9c":"To understand this correlation we plot the data which showa how many people were embarked from differernt ports and how many survived by port. ","fd7a04c3":"This plot demonstrates that women surpass men by survival and the main age group of women who stayed alive after disaster is 21-26 years.","0c630c65":"This distributions shows that price ticket doesn'not garantee survival, and the its relation to a class can be observed much often.","25ab195c":"As you can see, this table presents numerical, textual and categorical values.","73d9ef4b":"### Problem definition\n\nThe RMS Titanic, a luxury steamship, sank in the early hours of April 15, 1912, off the coast of Newfoundland in the North Atlantic after sideswiping an iceberg during its maiden voyage. Of the 2,240 passengers and crew on board, more than 1,500 lost their lives in the disaster. \n\nWe are interested to discover relations and patterns which played main role in passenger survival on the ship with further training few models in order to predict survival on unseen data. In this case we deal with classification problem since there are two possible outputs - survived and did not survived.","e3b7a3e2":"According to [description](https:\/\/www.kaggle.com\/c\/titanic\/data?select=gender_submission.csv) the columns meanings are following.","b4550f38":"How many data points in training and test datasets?"}}