{"cell_type":{"cedc1017":"code","8d3c5115":"code","5a19f2d6":"code","24d195b2":"code","7b5a1dd4":"code","90afde01":"code","909714f0":"code","7d62d153":"code","80f249f6":"code","b47cdeac":"code","a3ffd73e":"code","acdf3ac5":"code","ae2e01b8":"code","f4250c59":"code","1a10b345":"code","73cbc57a":"code","2067ed21":"code","d88b3715":"code","1bf24350":"code","7b20d30f":"code","257a9a4b":"code","8ae5912d":"code","e4cdf333":"code","2765565a":"code","0651fbf3":"code","f66572a3":"code","7a756a5e":"code","95e78468":"code","6a106090":"markdown","6f4ac94d":"markdown","e29e71f7":"markdown","0576743a":"markdown","836b0561":"markdown","2d2d3096":"markdown","da9c83a1":"markdown","88609c55":"markdown","527888f6":"markdown","5bc1bed2":"markdown","16dd3cd6":"markdown","e37b1c7d":"markdown","a29a5a3e":"markdown","914a655a":"markdown","2fc21476":"markdown","3d8e4f97":"markdown","945c7335":"markdown","c0738302":"markdown","42ffb4a9":"markdown","a384d3d3":"markdown","bddb4995":"markdown","f6915370":"markdown","f1632955":"markdown","c66cb532":"markdown","4171f1e4":"markdown","78dc80fd":"markdown","15b36766":"markdown","4eb86fe8":"markdown","f395b873":"markdown","88fbe618":"markdown","5b2e6826":"markdown","ed2942e7":"markdown","e6316e08":"markdown","4bc4218b":"markdown","87c6490a":"markdown","4d976d71":"markdown","5b9ba479":"markdown","ef00fe11":"markdown","204deae6":"markdown","11cb8ba0":"markdown","efa0d065":"markdown","02c45c0b":"markdown","50ec7bfd":"markdown","e2507be8":"markdown","bf068ebf":"markdown","3f50f92e":"markdown","3e0e29cf":"markdown","836bc9d4":"markdown","de9d7791":"markdown","7f483864":"markdown","30e9abd7":"markdown"},"source":{"cedc1017":"# Inline installation from within a notebook\n# Uncomment these two lines if needed\n\n#!pip install ipywidgets\n#!jupyter nbextension enable --py --sys-prefix widgetsnbextension","8d3c5115":"import ipywidgets as widgets\n\n# For explicitly displaying widgets\nfrom IPython.display import display\n\n# Just need these for the demo purposes here\nfrom datetime import datetime\nimport matplotlib.pyplot as plt","5a19f2d6":"# Create an simple IntSlider widget\ndemo_IntSlider_1 = widgets.IntSlider(\n    min=1,                      # The minimum value\n    max=100,                    # The maximum value\n    description='Int Slider 1', # Label\n    value=53,                   # Default value\n)\n\n# Display the widget\ndisplay(demo_IntSlider_1)","24d195b2":"print(\"Demo Int Slider 1 Current Value:\", demo_IntSlider_1.value)","7b5a1dd4":"# Create a simple IntSlider widget\ndemo_IntSlider_2 = widgets.IntSlider(\n    min=1,                      # The minimum value\n    max=100,                    # The maximum value\n    description='Int Slider 2', # Label\n    value=23,                   # Default value\n)","90afde01":"# Create a simple FloatSlider widget\ndemo_FloatSlider_2 = widgets.FloatSlider(\n    min=1,                      # The minimum value\n    max=100,                    # The maximum value\n    description='Float Slider 2', # Label\n    value=64.87,                # Default value\n)","909714f0":"# Display the widgets\ndisplay(demo_IntSlider_2)\ndisplay(demo_FloatSlider_2)","7d62d153":"# Now, Synchronizing demo_IntSlider_2 and demo_FloatSlider_2\nwidgets.jslink(\n    (demo_IntSlider_2, 'value'), \n    (demo_FloatSlider_2, 'value')\n)\n\n# Checkinng result\ndisplay(demo_IntSlider_2)\ndisplay(demo_FloatSlider_2)","80f249f6":"# A basic button widget\ndemo_button_1 = widgets.Button(description='Basic Button')\n\n# An event handler for the click on the button\ndef demo_button_eventhandler(obj):\n    print('{} said: \"Hello!\"'.format(obj.description))\n\n# Attaching event handler on the widget\ndemo_button_1.on_click(demo_button_eventhandler)\n\n# Display the button\ndisplay(demo_button_1)","b47cdeac":"# A basic button widget\ndemo_button = widgets.Button(\n    description='Basic Button',    # Label\n    tooltip='Try to click on me',  # Tooltip caption that shows on hover\n    icon='camera',                 # Optional font-awesome icon name\n    disabled=False,                # Whether to disable user changes\n)\n\n# An event handler for the click on the button. The button will be passed as argument.\ndef demo_button_eventhandler(btn_obj):\n    print('\"Snapped a picture!\"')\n\n# Attaching event handler on the widget\ndemo_button.on_click(demo_button_eventhandler)\n\n# Display the button\ndisplay(demo_button)","a3ffd73e":"# Create the widget\ndemo_IntSlider = widgets.IntSlider(\n    min=1,                      # The minimum value\n    max=10,                     # The maximum value\n    step=1,                     # The step change per move of the slide\n    description='Int Slider',   # Label\n    value=5,                    # Default value\n    orientation='horizontal',   # Orientation of the slider\n    readout=True,               # Display the current value of the slider next to it?\n    readout_format=''           # Represent the format of the slider value for readout\n)\n\n# Display the widget\ndisplay(demo_IntSlider)","acdf3ac5":"# Create the widget\ndemo_FloatSlider = widgets.FloatSlider(\n    min=1,                      # The minimum value\n    max=100,                    # The maximum value\n    step=0.001,                 # The step change per move of the slide\n    description='Float Slider', # Label\n    value=25,                   # Default value\n    orientation='vertical',     # Orientation of the slider\n    readout=True,               # Display the current value of the slider next to it?\n    readout_format='.3f'        # Represent the format of the slider value for readout\n)\n\n# Display the widget\ndisplay(demo_FloatSlider)","ae2e01b8":"# List of options\nstate_options = ['', 'AL', 'AZ', 'CO', 'CA', 'FL', 'GE', 'MS', 'TN', 'WS']\n\n# Create the widget\ndemo_Dropdown = widgets.Dropdown(\n    options=state_options, # The list of available options\n    index=None,             # The index of the default selection\n    value='',               # The value of the default selection\n    label='',               # The label corresponding to the selected value\n    disabled=False,         # Whether to disable user changes\n    description='State'    # Label\n)\n\n# Display the widget\ndisplay(demo_Dropdown)","f4250c59":"# Create the widget\ndemo_Checkbox = widgets.Checkbox(\n    description='Acknowledge Requirements', # Label\n    value=False,                            # Default value\n    disabled=False,                         # Whether to disable user changes\n    indent=True                             # Align with other controls with a description\n)\n\n# Display the widget\ndisplay(demo_Checkbox)","1a10b345":"# List of tuples as options\neducation_levels = [\n    ('None', 0),\n    ('High School', 1),\n    ('Associate', 2),\n    ('Bachelor', 3),\n    ('Masters', 4),\n    ('Doctorate', 5),\n    ('Post-Doctorate', 6)\n]\n\n# Create the widget\ndemo_RadioButtons = widgets.RadioButtons(\n    description='Education',       # Label\n    options=education_levels,      # List of options or tuple of (label, value) for the dropdown\n    disabled=False,                # Whether to disable user changes\n    value=None,                    # Default value\n    index=None,                    # The index of the default selection\n    label=None                     # The label corresponding to the default selection\n)\n\n# Display the widget\ndisplay(demo_RadioButtons)","73cbc57a":"# Create the widget\ndemo_Text = widgets.Text(\n    placeholder='e.g. John Smith', # Placeholder for text \n    description='Name',            # Label\n    disabled=False                 # Whether to disable user changes\n)\n\n# Display the widget\ndisplay(demo_Text)","2067ed21":"# Create the widget\ndemo_password = widgets.Password(\n    placeholder='Enter password',  # Placeholder for text \n    description= 'Password',       # Label\n    disabled=False                 # Whether to disable user changes\n)\n\n# Display the widget\ndisplay(demo_password)","d88b3715":"# Create the widget\ndemo_DatePicker = widgets.DatePicker(\n    value=datetime.now(),          # Default date selection\n    description='Entry Date',      # Label\n    disabled=False                 # Whether to disable user changes\n)\n\n# Display the widget\ndisplay(demo_DatePicker)","1bf24350":"# Create the widget\ndemo_ColorPicker = widgets.ColorPicker(\n    concise=False,                  # Whether to allow search by entering the name of the color or not\n    description='Color',            # Label\n    value='Green',                  # Default value\n    disabled=False                  # Whether to disable user changes\n)\n\n# Display the widget\ndisplay(demo_ColorPicker)","7b20d30f":"# Create the widget\ndemo_IntProgress = widgets.IntProgress(\n    min=1,                      # The minimum value\n    max=100,                    # The maximum value\n    description='Loading',      # Label\n    value=35,                   # Default value\n    orientation='horizontal',   # Orientation of the slider\n    bar_style=''                # Color of the bar: 'success', 'info', 'warning', 'danger', ''\n)\n\n# Display the widget\ndisplay(demo_IntProgress)","257a9a4b":"# Create the widget\ndemo_FloatProgress = widgets.FloatProgress(\n    min=1,                      # The minimum value\n    max=100,                    # The maximum value\n    description='Float Slider', # Label\n    value=90,                   # Default value\n    orientation='vertical',     # Orientation of the slider\n    bar_style='danger'          # Color of the bar: 'success', 'info', 'warning', 'danger', ''\n)\n\n# Display the widget\ndisplay(demo_FloatProgress)","8ae5912d":"# Create the widget\ndemo_FileUpload = widgets.FileUpload(\n    accept='.pdf',   # The type of files to accept\n    multiple=True    # Whether to allow to upload multiple files or not\n)\n\n# Display the widget\ndisplay(demo_FileUpload)","e4cdf333":"for i, el in enumerate(dir(widgets)):\n    print(str(i + 1) + '.', el)","2765565a":"import ipywidgets as widgets\nfrom ipywidgets import interact\n\n# Just need these for the demo purposes here\nimport numpy as np\nimport seaborn as sns","0651fbf3":"def plot_random_normal_distribution(n):\n    \"\"\"Generate random n number of data that follows a normal distibution and plot them on a histogram\"\"\"\n    \n    data = np.random.normal(size=n)         # Generate random data: n\n    bins = int(np.sqrt(n))                  # Set bins for histogram: sqrt(n)\n    sns.distplot(data, bins=bins, kde=True) # Plot histogram of data","f66572a3":"# Creating a basic interctive plot\ndisplay(interact(\n    plot_random_normal_distribution, # Function to call at any value changes\n    n=10                             # Argument to pass to the function, with default value\n))","7a756a5e":"# Using interact() as a decorator\n\n@interact(\n    # Specifying the handler for the n argument in the function\n    n = widgets.IntSlider(min=2, max=100, step=1, value=10)\n)\ndef plot_random_normal_distribution(n):\n    \"\"\"Generate random n number of data that follows a normal distibution and plot it on the graph\"\"\"\n    \n    data = np.random.normal(size=n)\n    bins = int(np.sqrt(len(data)))\n    sns.distplot(data, bins=bins, kde=True)\n    \n    # Adding some labels\n    plt.title('Histogram of n random data')\n    plt.xlabel('Random data')\n    plt.ylabel('Proportion')","95e78468":"# Pre-specifying our handler widget\nn_widget_handler = widgets.IntSlider(\n    min=1,                      # The minimum value\n    max=100,                    # The maximum value\n    step=1,                     # The step change per move of the slide\n    description='n',            # Label\n    value=25,                   # Default value\n    orientation='horizontal',   # Orientation of the slider\n    readout=True                # Display the current value of the slider next to it?\n)\n\n# Specifying the handler for the n argument in the function\n@interact(n = n_widget_handler)\ndef plot_random_scatterplot(n):\n    \"\"\"Generate random n number of data and plot n x n on a scatterplot\"\"\"\n    \n    x_data = np.random.random(size=n)\n    y_data = np.random.random(size=n)\n    sns.scatterplot(x=x_data, y=y_data)\n    plt.title('Scatterplot of random data')\n    plt.xlabel('Random x')\n    plt.ylabel('Random y')","6a106090":"The password widget hides the data as soon as we type in it.","6f4ac94d":"To query the current value of a widget, use the `value` attribute. This is true for all widgets.","e29e71f7":"Sliders can be used to select a value if we have a defined `minimum` and `maximum` values. We can have an `IntSlider` or a `FloatSlider`, respectively for Integer and Float values.","0576743a":"Before you install, you can check if IPython Widgets is already installed on your environment. You can do this from the terminal:\n\n```sh\npip show ipywidgets\n```\n\nFor installing IPython Widgets on your local environment, do one of the following, depending on your environment setup:\n\n```sh\n# With pip\npip install ipywidgets\njupyter nbextension enable --py widgetsnbextension\n```\n\n```sh\n# With conda\nconda install -c conda-forge ipywidgets\n```\n\nIn this notebook, `ipywidgets` is already available within a Kaggle environment. If it is not, we can always try the inline installation too (This also works on local environment.)","836b0561":"### Basic `interact()`","2d2d3096":"## Widget Event Handling","da9c83a1":"### Button","88609c55":"## Dive Into Some Most Used Widgets","527888f6":"Progress bar can be used to show that something is loading or progress of a certain work. We can have an `IntProgress` or a `FloatProgress`, respectively for Integer and Float values. The arguments are similar to that of `Slider`.","5bc1bed2":"Text is used when the user needs to provide some text describing something.","16dd3cd6":"If you have done HTML, you will find that there are a lot of similarities between IPython Widgets and HTML elements. This list is not exhaustive but only shows the most used widgets. For the full list, check the section below *List of All Availables Widgets.*","e37b1c7d":"## Using `widgets.interact()`","a29a5a3e":"`interact()` is one of the most important helper function in the library. The `interact()` function automatically creates user interface controls for exploring code and data interactively. It is the easiest way to get started using IPython\u2019s widgets. We can also customize the actual widget to be displayed.","914a655a":"## Installation for local environment","2fc21476":"### File Upload","3d8e4f97":"Again, we are not going to have an exhaustive look into every single widgets in this notebook. The usage of most is pretty much similar to the way we demo-ed in this notebook. In a notebook, if you need help about a function, start by typing the function then press shift+tab 4 times to show the help and available parameters for the widget function constructor.\n\nThere are 120 elements in this library! Not all of them are widgets but most of them are. The ones that are capitalized are widget constructors. The other ones are helper functions.\n\nHere is the full list in alphabetical orders. Feel free to explore them. As I find more useful ones, I will come back and update this notebook.","945c7335":"Displays a button that has an `on_click` event hanlder that allows you to listen for the user clicking on the button.  The click event itself is stateless.","c0738302":"Use this function as an argument to `interact()`, along with other arguments. The second argument to `interact()` will be passed directly as an argument to this function. For the second argument:\n- Passing a number as default value will generate a `Slider` widget\n- Passing a text as default value will generate a `Text` widget\n- Passing a boolean as default value will generate a `Checkbox` widget","42ffb4a9":"### Slider","a384d3d3":"**Note**: It is plural everywhere! `widgets`, `ipywidgets`. Don't forget that `s` so you don't get the nasty error.","bddb4995":"Notice what happen when you try to move the slider to the negative zone? Oops!\n\nA better way to use `interact()` is as a *decorator* to the function. This way, we can specify and customize the widget to be called by `interact()` by passing it directly as the handler for the argument of the function.","f6915370":"### Text","f1632955":"### Date Picker","c66cb532":"We can also save the widget in a variable for better DRY and reusability.","4171f1e4":"At the most basic level, `interact()`:\n- automatically generates UI controls for function arguments\n- calls the function with those arguments when you manipulate the controls interactively\n\nTo use interact, you need to define a function that you want to be called when a user interaction happens. Here is an example function that we are going to use.","78dc80fd":"Allows to upload files","15b36766":"# Diving Into IPython Widgets","4eb86fe8":"### Dropdown","f395b873":"## Imports","88fbe618":"We can **synchornise** the value of 2 widgets by using the `jslink()` function. The first widget will be the source and the second widget will be the target. Once 2 widgets are synchronized, their value will change together. Any changes in one widget will also affect the other widget.","5b2e6826":"### Radio Buttons","ed2942e7":"Checkboxes can be used when the user can select multiple values for a particular attribute or can select a fixed option from minimum options","e6316e08":"Radio Buttons are used to select only one of the options from the given options.","4bc4218b":"## List of all Available Widgets","87c6490a":"### Checkbox","4d976d71":"Widgets allows to add interactivity to a notebook. Widgets are elements such as buttons, sliders, dropdowns, lists... They are GUI interfaces that helps us to better understand data as we analyze them in notebooks.\n\n`ipywidgets` is an open-source python library that is used to generate different types of widgets and implement them in a notebook. It is easy to use and provides a variety of interactive widgets. And these GUI elements can be assembled and customized to create complex dashboards.","5b9ba479":"- Button: `Button`\n- Slider: `IntSlider`, `FloatSlider`\n- Dropdown: `Dropdown`\n- Checkbox: `Checkbox`\n- Radio Buttons: `RadioButtons`\n- Text: `Text`\n- Password: `Password`\n- Date Picker: `DatePicker`\n- Color Picker: `ColorPicker`\n- Progress Bar: `IntProgress`, `FloatProgress`\n- File Upload: `FileUpload`","ef00fe11":"## Displaying A Widget","204deae6":"The `display()` function allows to explicitly render a widget object in an input cell.","11cb8ba0":"Dropdowns can be used to select a value from a list of preset values.","efa0d065":"### Color Picker","02c45c0b":"### Password","50ec7bfd":"Allow to select a particular color from a color palette.","e2507be8":"When a user interact with a widget (clicking, typing text, ...), those interactions generate events that we can capture and we are expecting some actions to take place. Depending on its specific features, each widget exposes different events. \n\nAn event handler is a function that will be executed every time the event is fired. Event handler is a callback function in response to an event, that operates asynchronously and handles the inputs received.\n\n**Note: Unfortunately, it looks like some event handlings do not work in the Public Display View of Kaggle. If you would like to have a better look at how these event handlings work, click on the Copy and Edit button above to enter the Kernel View. Another option is to download this notebook and run it on your local environment.**","bf068ebf":"### Progress Bar","3f50f92e":"![widgets](https:\/\/miro.medium.com\/max\/1050\/1*i7rKCOZrrFXT9WkTt4BTiw.gif)","3e0e29cf":"Allows to select a date from a calendar.","836bc9d4":"**Note: Unfortunately, I have not found a way in Kaggle to make `interact()` work in the Public Display View. If you would like to have a better look at how `interact()` works in this section of the notebook, click on the *Copy and Edit* button above to enter the Kernel View. Another option is to download this notebook and run it on your local environment.**","de9d7791":"## Widgets Synchronization","7f483864":"## Querying the Value of a Widget","30e9abd7":"**Note**: Synchronizing widgets is like a general broadcast. That is, running the following cell will affect not only  all the `demo_IntSlider_2` and `demo_FloatSlider_2` after this cell but also all instances of them, even in the previous cells."}}