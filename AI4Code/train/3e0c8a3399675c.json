{"cell_type":{"5a25b7c4":"code","c105c720":"code","79ba5b57":"code","326b149e":"code","f385678a":"code","7f94c5a3":"code","72455043":"code","a2ed95b7":"code","c3286422":"code","2d2d58cc":"code","084e5b9f":"code","f20d5e23":"code","123343d5":"code","0bb9fce5":"code","9dfe6d5f":"markdown"},"source":{"5a25b7c4":"import math\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c105c720":"DATA_PATH = '\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv'","79ba5b57":"df = pd.read_csv(DATA_PATH)","326b149e":"df","f385678a":"df.columns","7f94c5a3":"fig, axes = plt.subplots(4, 3, figsize=(24, 18))\n\nsns.distplot(df['fixed acidity'], ax=axes[0, 0])\nsns.distplot(df['volatile acidity'], ax=axes[0, 1])\nsns.distplot(df['citric acid'], ax=axes[0, 2])\nsns.distplot(df['residual sugar'], ax=axes[1, 0])\nsns.distplot(df['chlorides'], ax=axes[1, 1])\nsns.distplot(df['free sulfur dioxide'], ax=axes[1, 2])\nsns.distplot(df['total sulfur dioxide'], ax=axes[2, 0])\nsns.distplot(df['density'], ax=axes[2, 1])\nsns.distplot(df['pH'], ax=axes[2, 2])\nsns.distplot(df['sulphates'], ax=axes[3, 0])\nsns.distplot(df['alcohol'], ax=axes[3, 1])\n\nplt.show()","72455043":"df = df.loc[:, ['fixed acidity',\n                'residual sugar',\n                'chlorides',\n                'density',\n                'pH',\n                'quality']]","a2ed95b7":"df.head()","c3286422":"class NaiveBayes(object):\n    def __init__(self):\n        pass\n    \n    @staticmethod\n    def _compute_mean(list_of_numbers):\n        return sum(list_of_numbers) \/ len(list_of_numbers)\n    \n    @staticmethod\n    def _compute_mean_std(list_of_numbers):\n        mean = NaiveBayes._compute_mean(list_of_numbers)\n        std = math.sqrt(sum([(number - mean)**2 for number in list_of_numbers]) \/ (len(list_of_numbers) - 1))\n        \n        return (mean, std)\n            \n    \n    def fit(self, df, feature_cols=['fixed acidity', 'residual sugar', 'chlorides', 'density', 'pH'], label_col='quality'):\n        df = df.loc[:, feature_cols + [label_col]]\n        self.feature_cols = feature_cols\n        self.label_col = label_col\n        self.classes = df[self.label_col].unique()\n        self.classes.sort()\n        \n        self.groups = [df.loc[df[self.label_col] == class_name].drop(self.label_col, axis=1) for class_name in self.classes]\n        \n        self.class_prior_probs = {class_name: (len(group) \/ len(df)) for class_name, group in zip(self.classes, self.groups)}\n        \n        self.params = dict()\n        for class_name, group in zip(self.classes, self.groups):\n            self.params[class_name] = [self._compute_mean_std(group[feature].tolist()) for feature in self.feature_cols]\n    \n    @staticmethod    \n    def _compute_gaussian_prob(x, mean, std):\n        return 1 \/ (math.sqrt(2 * math.pi) * std) * math.exp(-((x-mean)**2)\/(2*(std**2)))\n    \n    def _compute_prob_given_class(self, row, class_name):\n        class_prob = 1\n        for feature, (mean, std) in zip(self.feature_cols, self.params[class_name]):\n            class_prob *= self._compute_gaussian_prob(row[feature], mean, std)\n            \n        return class_prob\n        \n    def predict(self, df):\n        predictions = []\n        \n        for idx, row in df.iterrows():\n            best_label, best_value = None, -1\n            \n            for class_name in self.classes:\n                prob_item_given_class = self._compute_prob_given_class(row, class_name)\n                class_prior_prob = self.class_prior_probs[class_name]\n                \n                prob_class_given_item = prob_item_given_class * class_prior_prob\n                \n                if prob_class_given_item > best_value:\n                    best_value = prob_class_given_item\n                    best_label = class_name\n                    \n            predictions.append(best_label)\n                    \n        return predictions\n            ","2d2d58cc":"model = NaiveBayes()","084e5b9f":"df = pd.read_csv(DATA_PATH)","f20d5e23":"model.fit(df)","123343d5":"model.params","0bb9fce5":"model.predict(df)","9dfe6d5f":"### Selected features\n\n- fixed acidity\n- residual sugar\n- chlorides\n- density\n- pH"}}