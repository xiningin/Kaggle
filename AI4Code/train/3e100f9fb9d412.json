{"cell_type":{"c334ecd1":"code","4600002b":"code","29d546f1":"code","1ea134d0":"code","fc83edcd":"code","a7f5da27":"code","4338a664":"code","0bb6ba8c":"code","e992edcd":"code","47f5b3f9":"code","e733b5b8":"code","11e65362":"code","c5c54126":"code","63b4b8dd":"code","b8acb569":"code","7c29ff0b":"code","e26b3ebc":"code","3132c9d4":"code","d8ad9715":"code","5ca484c2":"code","06b26e03":"code","4a7b59be":"code","98a00288":"code","48f154c9":"code","6fbb6d32":"code","3c5c0989":"code","9958645d":"code","2a972785":"code","ecac4bfc":"code","f38002e4":"code","206f1cf3":"code","370282a1":"code","496b1219":"code","7bac2b4f":"code","40df7046":"code","7fed50de":"code","f69a01a5":"code","ecdfd937":"code","1036686d":"code","e00d1adf":"code","6f842596":"code","efba3ad5":"code","dbac1f69":"code","1f4c0c6f":"code","50b2ef21":"code","4d8ecbcd":"markdown","d390924d":"markdown","d6fc0ec6":"markdown","6d6cb64f":"markdown","917105e3":"markdown","0bbaa2bf":"markdown","37ffb50b":"markdown","b050c774":"markdown","d9870b72":"markdown","5d6c4b41":"markdown","8b057fef":"markdown","bd4b6395":"markdown","3aaeaa36":"markdown","13b3ba09":"markdown","7189616a":"markdown","d485ffaf":"markdown","7ebc305c":"markdown","d70186a6":"markdown","1ff0534a":"markdown","aa44db00":"markdown","b5e50156":"markdown"},"source":{"c334ecd1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4600002b":"df=pd.read_csv('\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')\ndf","29d546f1":"import seaborn as sns\nsns.lmplot(x='time',y='DEATH_EVENT',data=df,aspect=6)","1ea134d0":"import seaborn as sns\nsns.heatmap(data=df.corr())","fc83edcd":"corr=abs(df.corr()['DEATH_EVENT'].drop(labels='DEATH_EVENT'))\nfeatures=corr.nlargest(5).index\nfeatures","a7f5da27":"X=df[features]\ny=df['DEATH_EVENT']","4338a664":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,random_state=1, test_size=0.4)\nbasic_model = DecisionTreeRegressor(random_state=1)\nbasic_model.fit(train_X, train_y)\npredictions=basic_model.predict(val_X)","0bb6ba8c":"pd.options.mode.chained_assignment = None\nframe=val_X\nframe['death']=val_y\nframe['predictions']=predictions\nframe['correct?']=frame['death']==frame['predictions']\nframe['correct?'].value_counts()","e992edcd":"101\/120","47f5b3f9":"X=df.drop(columns='DEATH_EVENT')\ny=df['DEATH_EVENT']\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,random_state=1, test_size=0.4)\nbasic_model = DecisionTreeRegressor(random_state=1)\nbasic_model.fit(train_X, train_y)\npredictions=basic_model.predict(val_X)\n\nframe=val_X\nframe['death']=val_y\nframe['predictions']=predictions\nframe['correct?']=frame['death']==frame['predictions']\nframe['correct?'].value_counts()","e733b5b8":"p=frame['correct?'].value_counts()\np[True]\/(p[False]+p[True])","11e65362":"def n_inputs_decision_tree(n):\n    corr=abs(df.corr()['DEATH_EVENT'].drop(labels='DEATH_EVENT'))\n    features=corr.nlargest(n).index\n    X=df[features]\n    y=df['DEATH_EVENT']\n    train_X, val_X, train_y, val_y = train_test_split(X, y,random_state=1, test_size=0.4)\n    basic_model = DecisionTreeRegressor(random_state=1)\n    basic_model.fit(train_X, train_y)\n    predictions=basic_model.predict(val_X)\n\n    val_X['death']=val_y\n    val_X['predictions']=predictions\n    val_X['correct?']=val_X['death']==val_X['predictions']\n    return val_X['correct?'].value_counts()","c5c54126":"dt_tracker=pd.DataFrame()\nfor i in range(1,12):\n    data=n_inputs_decision_tree(i)\n    dt_tracker=dt_tracker.append({'n':i,'true':data[True],'false':data[False],'percent':data[True]\/(data[True]+data[False])},ignore_index=True)","63b4b8dd":"dt_tracker.sort_values(by='true',ascending=False)","b8acb569":"from sklearn.ensemble import RandomForestRegressor\n\n# Define the model. Set random_state to 1\nrf_model = RandomForestRegressor(random_state=1)\n\n# fit your model\ncorr=abs(df.corr()['DEATH_EVENT'].drop(labels='DEATH_EVENT'))\nfeatures=corr.nlargest(5).index\nX=df[features]\ny=df['DEATH_EVENT']\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,random_state=1, test_size=0.4)\n\nrf_model.fit(train_X,train_y)\nrf_val_predictions = rf_model.predict(val_X)","7c29ff0b":"val_X['death']=val_y\nval_X['raw predictions']=rf_val_predictions\nval_X['predictions']=rf_val_predictions.round()\nval_X['correct?']=val_X['predictions']==val_X['death']\nval_X['correct?'].value_counts()","e26b3ebc":"def n_inputs_rf_regressor(n):\n    corr=abs(df.corr()['DEATH_EVENT'].drop(labels='DEATH_EVENT'))\n    features=corr.nlargest(n).index\n    X=df[features]\n    y=df['DEATH_EVENT']\n    train_X, val_X, train_y, val_y = train_test_split(X, y,random_state=1, test_size=0.4)\n    \n    rf_model.fit(train_X,train_y)\n    rf_val_predictions = rf_model.predict(val_X)\n\n    val_X['death']=val_y\n    val_X['raw predictions']=rf_val_predictions\n    val_X['predictions']=rf_val_predictions.round()\n    val_X['correct?']=val_X['predictions']==val_X['death']\n    return val_X['correct?'].value_counts()","3132c9d4":"rfr_tracker=pd.DataFrame()\nfor i in range(1,len(df.columns)):\n    data=n_inputs_rf_regressor(i)\n    rfr_tracker=rfr_tracker.append({'n':i,'true':data[True],'false':data[False],'percent':data[True]\/(data[True]+data[False])},ignore_index=True)","d8ad9715":"rfr_tracker.sort_values(by='true',ascending=False)","5ca484c2":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\n\ncorr=abs(df.corr()['DEATH_EVENT'].drop(labels='DEATH_EVENT'))\nfeatures=corr.nlargest(5).index\nX=df[features]\ny=df['DEATH_EVENT']\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,random_state=1, test_size=0.4)\n\nclf = RandomForestClassifier(n_estimators=100, random_state=1, n_jobs=1)\nclf.fit(train_X, train_y)\n\ny_pred=clf.predict(val_X)","06b26e03":"accuracy_score(val_y,y_pred)","4a7b59be":"def n_inputs_rf_classifier(n):\n    corr=abs(df.corr()['DEATH_EVENT'].drop(labels='DEATH_EVENT'))\n    features=corr.nlargest(n).index\n    X=df[features]\n    y=df['DEATH_EVENT']\n\n    train_X, val_X, train_y, val_y = train_test_split(X, y,random_state=1, test_size=0.4)\n\n    clf = RandomForestClassifier(n_estimators=100, random_state=1, n_jobs=1)\n    clf.fit(train_X, train_y)\n\n    y_pred=clf.predict(val_X) \n    val_X['death']=val_y\n    val_X['predictions']=y_pred\n    val_X['correct?']=val_X['death']==val_X['predictions']\n    return val_X['correct?'].value_counts()","98a00288":"rfc_tracker=pd.DataFrame()\nfor i in range(1,12):\n    data=n_inputs_rf_classifier(i)\n    rfc_tracker=rfc_tracker.append({'n':i,'true':data[True],'false':data[False],'percent':data[True]\/(data[True]+data[False])},ignore_index=True)","48f154c9":"rfc_tracker.sort_values(by='true',ascending=False)","6fbb6d32":"from sklearn.neighbors import KNeighborsClassifier\n\ncorr=abs(df.corr()['DEATH_EVENT'].drop(labels='DEATH_EVENT'))\nfeatures=corr.nlargest(5).index\nX=df[features]\ny=df['DEATH_EVENT']\n\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,random_state=1, test_size=0.4)\nkgmodel = KNeighborsClassifier(n_jobs=-1)\nkgmodel.fit(train_X, train_y)\n\n#Getting the accuracy\npred_gen = kgmodel.predict(val_X)\naccuracy_score(pred_gen, val_y)","3c5c0989":"def n_inputs_knn(n):\n    corr=abs(df.corr()['DEATH_EVENT'].drop(labels='DEATH_EVENT'))\n    features=corr.nlargest(n).index\n    X=df[features]\n    y=df['DEATH_EVENT']\n\n    train_X, val_X, train_y, val_y = train_test_split(X, y,random_state=1, test_size=0.4)\n\n    kgmodel = KNeighborsClassifier(n_jobs=-1)\n    kgmodel.fit(train_X, train_y)\n\n    pred_gen = kgmodel.predict(val_X)\n    val_X['death']=val_y\n    val_X['predictions']=pred_gen\n    val_X['correct?']=val_X['death']==val_X['predictions']\n    return val_X['correct?'].value_counts()","9958645d":"knn_tracker=pd.DataFrame()\nfor i in range(1,12):\n    data=n_inputs_knn(i)\n    knn_tracker=knn_tracker.append({'n':i,'true':data[True],'false':data[False],'percent':data[True]\/(data[True]+data[False])},ignore_index=True)","2a972785":"knn_tracker.sort_values(by='true',ascending=False)","ecac4bfc":"corr=abs(df.corr()['DEATH_EVENT'].drop(labels='DEATH_EVENT'))\nfeatures=corr.nlargest(5).index\nX=df[features]\ny=df['DEATH_EVENT']\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,random_state=1, test_size=0.4)\n\nfrom sklearn import metrics\nneigh = KNeighborsClassifier(n_neighbors = 10).fit(train_X,train_y)\nypred=neigh.predict(val_X)\nmetrics.accuracy_score(val_y, ypred)","f38002e4":"for i in range(1,20):\n    neigh = KNeighborsClassifier(n_neighbors = i).fit(train_X,train_y)\n    ypred=neigh.predict(val_X)\n    print(i,' neighbors:  ',metrics.accuracy_score(val_y, ypred))","206f1cf3":"neigh = KNeighborsClassifier(n_neighbors = 6,algorithm='brute').fit(train_X,train_y)\nypred=neigh.predict(val_X)\nmetrics.accuracy_score(val_y, ypred)","370282a1":"from sklearn.linear_model import LogisticRegression\n\nlr=LogisticRegression()\n\n# fitting the model to the training data\nlr.fit(train_X, train_y)\n\n# use the model to predict on the testing data\nlr.predict(val_X)\n\n# Printing the accuracy of the model\nscore = lr.score(val_X, val_y)\nscore","496b1219":"def n_inputs_lr(n):\n    corr=abs(df.corr()['DEATH_EVENT'].drop(labels='DEATH_EVENT'))\n    features=corr.nlargest(n).index\n    X=df[features]\n    y=df['DEATH_EVENT']\n\n    train_X, val_X, train_y, val_y = train_test_split(X, y,random_state=1, test_size=0.4)\n\n    lr=LogisticRegression()\n    lr.fit(train_X, train_y)\n    pred=lr.predict(val_X)\n\n    val_X['death']=val_y\n    val_X['predictions']=pred\n    val_X['correct?']=val_X['death']==val_X['predictions']\n    return val_X['correct?'].value_counts()","7bac2b4f":"lr_tracker=pd.DataFrame()\nfor i in range(1,12):\n    data=n_inputs_lr(i)\n    lr_tracker=lr_tracker.append({'n':i,'true':data[True],'false':data[False],'percent':data[True]\/(data[True]+data[False])},ignore_index=True)","40df7046":"lr_tracker.sort_values(by='true',ascending=False)","7fed50de":"# from sklearn import preprocessing\n# le_sex = preprocessing.LabelEncoder()\n# le_sex.fit(['F','M'])\n# X[:,1] = le_sex.transform(X[:,1]) \n\n\n# le_BP = preprocessing.LabelEncoder()\n# le_BP.fit([ 'LOW', 'NORMAL', 'HIGH'])\n# X[:,2] = le_BP.transform(X[:,2])\n\n\n# le_Chol = preprocessing.LabelEncoder()\n# le_Chol.fit([ 'NORMAL', 'HIGH'])\n# X[:,3] = le_Chol.transform(X[:,3]) \n\n# X[0:5]","f69a01a5":"from sklearn.tree import DecisionTreeClassifier\ndrugTree = DecisionTreeClassifier(criterion=\"gini\")\ndrugTree.fit(train_X,train_y)\npredTree = drugTree.predict(val_X)\nmetrics.accuracy_score(val_y, predTree)","ecdfd937":"def n_inputs_dtc(n):\n    corr=abs(df.corr()['DEATH_EVENT'].drop(labels='DEATH_EVENT'))\n    features=corr.nlargest(n).index\n    X=df[features]\n    y=df['DEATH_EVENT']\n\n    train_X, val_X, train_y, val_y = train_test_split(X, y,random_state=1, test_size=0.4)\n\n    drugTree = DecisionTreeClassifier(criterion=\"gini\")\n    drugTree.fit(train_X,train_y)\n    predTree = drugTree.predict(val_X)\n\n    val_X['death']=val_y\n    val_X['predictions']=predTree\n    val_X['correct?']=val_X['death']==val_X['predictions']\n    return val_X['correct?'].value_counts()","1036686d":"dtc_tracker=pd.DataFrame()\nfor i in range(1,12):\n    data=n_inputs_dtc(i)\n    dtc_tracker=dtc_tracker.append({'n':i,'true':data[True],'false':data[False],'percent':data[True]\/(data[True]+data[False])},ignore_index=True)","e00d1adf":"dtc_tracker.sort_values(by='true',ascending=False)","6f842596":"drugTree.get_params().keys()","efba3ad5":"from sklearn.model_selection import GridSearchCV\n\nparameters={'min_samples_split' : range(10,500,20),'min_samples_leaf':[1, 5, 10, 20, 50, 100],'max_depth':np.arange(1, 21),\n           'criterion':['gini','entropy']}\ngd_sr = GridSearchCV(estimator=drugTree,\n                     param_grid=parameters)\n\ngd_sr.fit(train_X, train_y)","dbac1f69":"best_parameters = gd_sr.best_params_\nprint(best_parameters)","1f4c0c6f":"best_result = gd_sr.best_score_\nprint(best_result)","50b2ef21":"pred=gd_sr.best_estimator_.predict(val_X)\npd.Series(pred==val_y).value_counts()","4d8ecbcd":"Best accuracy is 88.3%- this is the better model so far.","d390924d":"Let's make some more adjustments- changing the number of neighbors to be taken into account.","d6fc0ec6":"# Classification approach- random forest classifier","6d6cb64f":"Changing paramaters for optimization results in slight increase in accuracy of model (before we had predicted 101\/120 correct).","917105e3":"# Numerical approach- random forest regressor","0bbaa2bf":"Limiting inputs to the top 5 columns most correlated (either positive or negative) with death events results in the most accurate model at 84.2% correct.","37ffb50b":"Code below is in case there is categorical data that needs to be preprocessed so that sci-kit learn's decision tre classifier can interpret it.","b050c774":"# Classification- K nearest neighbors","d9870b72":"Not any better.","5d6c4b41":"# Decision tree classifier","8b057fef":"# Logistic regression model","bd4b6395":"# Numerical Approach- decision tree regressor","3aaeaa36":"# Import and read data","13b3ba09":"84.2% accuracy.\nLet's try a model that includes all factors.","7189616a":"79.2% accuracy- including more inputs in the model makes it worse.","d485ffaf":"This data was uploaded to kaggle with the task of predicting a death due to the data provided. Some columns are binary, such that a 1 is affirmative and a 0 negative, or in the case of sex indicates male or female. Other columns are measures, such as age and platelets.","7ebc305c":"Heatmap is a quick way to visualize how  ","d70186a6":"Default is 5 neighbors, but increasing to 6 increases the accuracy to 87.5%. ","1ff0534a":"While the most accurate input did not improve the random forest regressor, this model across the board shows higher accuracies.","aa44db00":"# Using grid search on decision tree classifier","b5e50156":"85.8% accuracy with the top 5 columns most correlated with death events."}}