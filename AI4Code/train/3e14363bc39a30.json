{"cell_type":{"7d3ea5ac":"code","95445f07":"code","cc3010be":"code","02ce44e9":"code","026dc0dc":"code","44317c6b":"code","ffbe6bce":"code","5cba60bb":"code","33adccc9":"code","133ba0d0":"code","4bd22aa8":"code","4b5f7154":"code","615a8213":"code","bff082bb":"code","1f8a8bbc":"code","6088ecc6":"code","4ad87d71":"code","6a3f4474":"code","40ac9ab8":"code","377ac947":"code","ae250e09":"code","bd07dd15":"code","bc5b2514":"code","585f36ea":"code","b9b22780":"code","09702ffd":"code","3638376b":"code","3a91cc66":"code","af94e810":"code","0e276ebd":"code","5a0ec2fe":"code","a9641062":"code","478323b1":"code","232ecc94":"code","2129c270":"code","44f01ef1":"code","59b338e8":"code","c8cb7d26":"code","84d0c53c":"code","dc4b3df1":"code","700a753a":"code","3ff23781":"code","3cf24d80":"code","fd69b12c":"code","fc4a0b23":"code","24df633c":"code","eb5943a1":"code","143f4e1d":"code","7e9c499d":"code","aab5d786":"code","f1596255":"code","c978f963":"code","d3d6c412":"code","8f74dd91":"code","aa8fe8e3":"code","b8a725f4":"code","541b38a7":"code","75230ab4":"code","42a93c89":"code","a609ed66":"code","fb6ca98d":"code","622088b6":"code","b48134ab":"code","efc1c591":"code","9345b72b":"code","485dc9cd":"code","8a8ba960":"code","79f4cac2":"code","876ddb5c":"code","0511e672":"code","41dd5bf2":"code","6b720a31":"code","ee9cfefe":"code","ad31a086":"code","e0c01279":"code","8521baf5":"code","1fcbaaa7":"code","c334e981":"code","9864367c":"code","a1d2b9e1":"code","262c3b58":"code","c39b5b71":"code","c8d15ee6":"code","5096dc89":"markdown","88f80588":"markdown","2e0e99d5":"markdown","ef1b02fe":"markdown","6c2674dd":"markdown","330c9c05":"markdown","746e4418":"markdown","bb3ef153":"markdown","0706659b":"markdown","aba884b8":"markdown","7fd6bd0d":"markdown","1e3066d0":"markdown","484bf6f6":"markdown","1ac7ee50":"markdown","ddc778f6":"markdown","bb0f965f":"markdown","cbb89b3f":"markdown","ae6e4544":"markdown","531f2372":"markdown","3f9bce87":"markdown","7ce7e755":"markdown","a71f5810":"markdown","f52bad9b":"markdown","9e5f4429":"markdown","84362291":"markdown","9a5041d6":"markdown","d27764eb":"markdown","fb667055":"markdown","156f8d06":"markdown","24dafa69":"markdown","ee7bd6a6":"markdown","e4e3fc23":"markdown","3b3dec02":"markdown","932ac3ce":"markdown","5daadda3":"markdown","fd3f0166":"markdown","eb68c449":"markdown","24bb5484":"markdown","80d50bff":"markdown","bd19269b":"markdown"},"source":{"7d3ea5ac":"#Import the toos for analysis\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style('darkgrid')\npd.options.display.max_rows = 4000","95445f07":"train_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nanswer_id = test_df['Id']","cc3010be":"train_df.shape,test_df.shape","02ce44e9":"train_df.dtypes","026dc0dc":"# Define function to print the columns with missing value\ndef print_missing(df):\n    ### Check for missing data\n    missing_columns = pd.DataFrame(df.isnull().sum())\n    missing_columns.columns = ['missing']\n    missing_columns = missing_columns[missing_columns.missing>0]\n    missing_columns.sort_values(by=['missing'],ascending=False, inplace=True)\n    return missing_columns.index.tolist()\n\ndef missing_detail(col):\n    print('Missing value:', col.isnull().sum())\n    print('Data type:',col.dtype)\n    if col.dtype == 'object':\n        print(col.value_counts())\n    else:\n        print(col.median())","44317c6b":"comp_df = pd.concat([train_df, test_df])","ffbe6bce":"comp_df.reset_index(drop=True,inplace=True)","5cba60bb":"# Watch the missing percentage for every columns with missing values\nmiss_list = print_missing(comp_df)\nprint('Missing Rate:\\n')\nfor col in miss_list:\n    print('{} : {:.2f} %.'.format(col, comp_df[col].isnull().sum()\/len(comp_df)*100))","33adccc9":"comp_df.FireplaceQu.value_counts()\ncomp_df.groupby('FireplaceQu').median()['SalePrice'].plot.bar()","133ba0d0":"drop_list = ['PoolQC','MiscFeature','Alley','Fence','FireplaceQu']\ncomp_df.drop(drop_list,axis=1,inplace=True)","4bd22aa8":"# Let see the correlation in data\nplt.figure(figsize=(15,13))\nsns.heatmap(comp_df.corr(),cmap='Reds', cbar=True)","4b5f7154":"# Fill median for numeric values and mode for categorical values.\n\ncomp_df.LotFrontage.fillna(comp_df.LotFrontage.median(),inplace=True)\n\ncomp_df.GarageCond.fillna('TA',inplace=True)\ncomp_df.GarageYrBlt.fillna(1979, inplace=True)\ncomp_df.GarageFinish.fillna('Unf',inplace=True) \ncomp_df.GarageQual.fillna('TA',inplace=True)\ncomp_df.GarageType.fillna('Attchd',inplace=True) \ncomp_df.GarageCars.fillna(2,inplace=True)\ncomp_df.GarageArea.fillna(480,inplace=True)\n\ncomp_df.BsmtExposure.fillna('No',inplace=True)\ncomp_df.BsmtCond.fillna('TA',inplace=True)\ncomp_df.BsmtQual.fillna('TA',inplace=True)\ncomp_df.BsmtFinType2.fillna('Unf',inplace=True)\ncomp_df.BsmtFinType1.fillna('Unf',inplace=True)# marginal case for filling\ncomp_df.TotalBsmtSF.fillna(989.5,inplace=True)\ncomp_df.BsmtUnfSF.fillna(467,inplace=True)\ncomp_df.BsmtFinSF2.fillna(0,inplace=True)\ncomp_df.BsmtFinSF1.fillna(368.5,inplace=True)\n\ncomp_df.MasVnrType.fillna('None',inplace=True)\ncomp_df.MasVnrArea.fillna(0,inplace=True)\ncomp_df.MSZoning.fillna('RL',inplace=True)\ncomp_df.Functional.fillna('Typ',inplace=True)\n\ncomp_df.BsmtHalfBath.fillna(0,inplace=True)\ncomp_df.BsmtFullBath.fillna(0,inplace=True)\ncomp_df.Utilities.fillna('AllPub',inplace=True)\ncomp_df.KitchenQual.fillna('TA',inplace=True)\n\ncomp_df.Exterior2nd.fillna('VinylSd',inplace=True)\ncomp_df.Exterior1st.fillna('VinylSd',inplace=True)\ncomp_df.SaleType.fillna('WD',inplace=True)\ncomp_df.Electrical.fillna('SBrkr',inplace=True)","615a8213":"comp_df.isnull().sum()","bff082bb":"fig, (ax1,ax2) = plt.subplots(2,1,figsize=(10,5))\nsns.distplot(comp_df.SalePrice,ax=ax1)\nsns.boxplot(comp_df.SalePrice,ax=ax2,width=0.3)","1f8a8bbc":"### First floor, second floor , and above ground area\ncomp_df[comp_df['1stFlrSF'] + comp_df['2ndFlrSF']+comp_df['LowQualFinSF']!= comp_df['GrLivArea']].head()","6088ecc6":"comp_df.drop(['1stFlrSF','2ndFlrSF'],axis=1, inplace=True)","4ad87d71":"fig, (ax1,ax2) = plt.subplots(1,2,figsize=(13,3))\nsns.boxplot(comp_df.GrLivArea,ax=ax1)\nsns.regplot('GrLivArea','SalePrice',data=comp_df,ax=ax2)","6a3f4474":"drop_index = comp_df[(comp_df.GrLivArea>4000)&(comp_df.SalePrice.notnull())].index.tolist()\ncomp_df.drop(drop_index,inplace=True)","40ac9ab8":"# Change low qual fin sf from square feet to ratio of above ground area\ncomp_df['LowQualFinSF'] = comp_df['LowQualFinSF']\/comp_df['GrLivArea']","377ac947":"porch_col = ['OpenPorchSF','EnclosedPorch','3SsnPorch','ScreenPorch']","ae250e09":"comp_df[porch_col].head()","bd07dd15":"comp_df['EnclosedPorch'] = comp_df['EnclosedPorch'] + comp_df['3SsnPorch'] + comp_df['ScreenPorch']\ncomp_df.drop(['3SsnPorch','ScreenPorch'],axis=1,inplace=True)","bc5b2514":"fig, (ax1,ax2) = plt.subplots(1,2,figsize=(13,3))\nsns.regplot('EnclosedPorch','SalePrice',data=comp_df,ax=ax1)\nsns.regplot('OpenPorchSF','SalePrice',data=comp_df,ax=ax2)","585f36ea":"garag_col = ['GarageType','GarageYrBlt','GarageFinish','GarageArea','GarageQual','GarageCond','PavedDrive']\ncomp_df[garag_col].head()","b9b22780":"fig, (ax1,ax2) = plt.subplots(2,1,figsize=(7,6))\nsns.boxplot(comp_df.GarageArea,ax=ax1)\nsns.distplot(comp_df.GarageYrBlt,ax=ax2, color='orange')","09702ffd":"# filter out the outlier\nout_index = comp_df[(comp_df.GarageArea>1200)&(comp_df.SalePrice.notnull())].index.tolist()\ncomp_df.drop(out_index, inplace=True)","3638376b":"# relatioship between garage area, built year and sale price\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(10,3))\nsns.regplot('GarageArea','SalePrice',data=comp_df,ax=ax1)\nsns.regplot('GarageYrBlt','SalePrice',data=comp_df,ax=ax2)","3a91cc66":"## Is garage condition and garage quality are the same?\n(comp_df.GarageCond == comp_df.GarageQual).value_counts()","af94e810":"## Are garage quality and condition has high relationship with sale price?\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(10,3))\ncomp_df.groupby(['GarageQual']).mean()['SalePrice'].plot.bar(ax=ax1)\ncomp_df.groupby(['GarageCond']).mean()['SalePrice'].plot.bar(ax=ax2)","0e276ebd":"# Every house in dataset has its own garage.\ncomp_df.GarageType.value_counts()","5a0ec2fe":"fig, (ax1,ax2) = plt.subplots(1,2,figsize=(10,3))\n# Relation between garage finish and sale price\ncomp_df.groupby(['GarageFinish']).mean()['SalePrice'].plot.bar(ax=ax1)\n\n# paved drive\ncomp_df.groupby(['PavedDrive']).mean()['SalePrice'].plot.bar(ax=ax2)","a9641062":"baths = ['BsmtFullBath', 'BsmtHalfBath','FullBath','HalfBath']\ncomp_df[baths].head()","478323b1":"comp_df['FullBath'] = comp_df['FullBath'] + comp_df['BsmtFullBath']\ncomp_df.drop('BsmtFullBath',axis=1,inplace=True)\n\ncomp_df['HalfBath'] = comp_df['HalfBath'] + comp_df['BsmtHalfBath']\ncomp_df.drop('BsmtHalfBath',axis=1,inplace=True)\n\ncomp_df['BathNum'] = comp_df['FullBath'] + (comp_df['HalfBath']\/2)\ncomp_df.drop(['FullBath','HalfBath'],axis=1, inplace=True)","232ecc94":"baths = ['BathNum']\ncomp_df[baths].head()","2129c270":"base_cols = ['BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinSF1','BsmtFinType2','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF']\ncomp_df[base_cols].head()","44f01ef1":"fig, (ax1,ax2) = plt.subplots(1,2,figsize=(10,3))\ncomp_df.groupby(['BsmtQual']).mean()['SalePrice'].plot.bar(ax=ax1)\ncomp_df.groupby(['BsmtCond']).mean()['SalePrice'].plot.bar(ax=ax2)","59b338e8":"comp_df.BsmtExposure.value_counts()","c8cb7d26":"comp_df.BsmtFinType2.value_counts()","84d0c53c":"# Area of basement\nbase_area = ['BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF']\ncondition = (comp_df['TotalBsmtSF'] == comp_df['BsmtFinSF1'] + comp_df['BsmtFinSF2'] + comp_df['BsmtUnfSF'])\ncomp_df[~condition][base_area]","dc4b3df1":"# We will drop the basement area type1 and type2\ncomp_df.drop(['BsmtFinSF1','BsmtFinSF2'],axis=1, inplace=True)\n\n# Change to unfinished area to ratio\ncomp_df['BsmtUnfSF'] = comp_df['BsmtUnfSF'] \/ comp_df['TotalBsmtSF']\ncomp_df['BsmtUnfSF'].fillna(0,inplace=True)","700a753a":"plt.figure(figsize=(12,2))\nsns.boxplot(comp_df.TotalBsmtSF)","3ff23781":"# Drop the outliers\ndrop_index = comp_df[(comp_df.TotalBsmtSF>3000)&(comp_df.SalePrice.notnull())].index.tolist()\ncomp_df.drop(drop_index, inplace=True)","3cf24d80":"devices = ['Heating','HeatingQC','CentralAir','Electrical']\ncomp_df[devices].head()","fd69b12c":"fig,(ax1,ax2) = plt.subplots(1,2,figsize=(15,3))\nsns.boxplot(comp_df.LotArea,ax=ax1)\nsns.regplot(comp_df.LotArea,comp_df.SalePrice,ax=ax2)","fc4a0b23":"# drop the outliers \ndrop_index = comp_df[(comp_df.LotArea>50000)&(comp_df.SalePrice.notnull())].index.tolist()\ncomp_df.drop(drop_index,inplace=True)","24df633c":"fig,(ax1,ax2) = plt.subplots(1,2,figsize=(13,2))\nsns.countplot(comp_df.LotShape,ax=ax1)\ncomp_df.groupby(['LotShape']).mean()['SalePrice'].plot.bar(ax=ax2)","eb5943a1":"# Group ir3 to ir2\ncomp_df['LotShape'].where(comp_df['LotShape'] != 'IR3','IR2', inplace=True)","143f4e1d":"comp_df[['BedroomAbvGr','KitchenAbvGr','TotRmsAbvGrd']].head()","7e9c499d":"fig, (ax1,ax2) = plt.subplots(1,2,figsize=(13,2))\ncomp_df.TotRmsAbvGrd.plot.hist(ax=ax1)\nsns.regplot(comp_df.TotRmsAbvGrd,comp_df.SalePrice,ax=ax2)","aab5d786":"comp_df.RoofMatl.value_counts()","f1596255":"#Group the rare values to other group to reduce variance\nonly_one = ['ClyTile','Roll','Membran','Metal']\ncomp_df['RoofMatl'] = comp_df.apply(lambda x : 'WdShngl' if x.RoofMatl in only_one else x.RoofMatl, axis=1)","c978f963":"comp_df.Exterior1st.value_counts()\ncomp_df['Exterior1st'] = comp_df.apply(lambda x : 'CBlock' if x.Exterior1st == 'ImStucc' else x.Exterior1st, axis=1)","d3d6c412":"comp_df.Exterior2nd.value_counts()\ncomp_df['Exterior2nd'] = comp_df.apply(lambda x : 'CBlock' if x.Exterior2nd == 'Other' else x.Exterior2nd, axis=1)","8f74dd91":"import datetime","aa8fe8e3":"date_col = ['MoSold','YrSold','YearBuilt','YearRemodAdd']\ncomp_df[date_col].head()","b8a725f4":"comp_df['HouseAge'] = datetime.datetime.today().year - comp_df['YearBuilt']\ncomp_df['RemodelAge'] = datetime.datetime.today().year - comp_df['YearRemodAdd']\ncomp_df.RemodelAge.where(comp_df.HouseAge != comp_df.RemodelAge,0, inplace=True)\ncomp_df.drop(['YearBuilt','YearRemodAdd'],axis=1,inplace=True)","541b38a7":"sns.boxplot(x=comp_df.YrSold, y=comp_df.SalePrice)","75230ab4":"# Create column for sold hist\ncomp_df['Sold_date'] = comp_df['YrSold'].astype(str)+'-'+comp_df['MoSold'].astype(str)\ncomp_df['Sold_hist'] = datetime.datetime.now() - pd.to_datetime(comp_df['Sold_date'])\ncomp_df['Sold_hist'] = comp_df['Sold_hist'].dt.days\ncomp_df.drop(['Sold_date'],axis=1,inplace=True)","42a93c89":"comp_df.Condition2.value_counts()","a609ed66":"for idex in comp_df[(comp_df.Condition2=='RRAe') | (comp_df.Condition2 == 'RRAn')].index:\n    comp_df.loc[idex, 'Condition2'] = 'RRNn'","fb6ca98d":"from sklearn.preprocessing import MinMaxScaler, LabelEncoder","622088b6":"set(comp_df.dtypes)","b48134ab":"numeric_list = comp_df.select_dtypes(include=['int64','float64']).head().columns.tolist()\nnumeric_list.remove('SalePrice')\nnumeric_list.remove('Id')","efc1c591":"comp_df[numeric_list] = MinMaxScaler().fit_transform(comp_df[numeric_list])","9345b72b":"comp_df.ExterCond = comp_df.ExterCond.map({'Po':0,'Fa':1,'TA':2,'Gd':3,'Ex':4})\ncomp_df.BsmtCond = comp_df.BsmtCond.map({'Po':0,'Fa':1,'Gd':2,'TA':3})\ncomp_df.BsmtQual = comp_df.BsmtQual.map({'Fa':0,'TA':1,'Gd':2,'Ex':3})\ncomp_df.HeatingQC = comp_df.HeatingQC.map({'Po':0,'Fa':1,'TA':2,'Gd':3,'Ex':4})\ncomp_df.KitchenQual = comp_df.KitchenQual.map({'Fa':0,'TA':1,'Gd':2,'Ex':3})\ncomp_df.GarageCond = comp_df.GarageCond.map({'Po':0,'Fa':1,'TA':2,'Gd':3,'Ex':4})\ncomp_df.ExterQual = comp_df.ExterQual.map({'Fa':0,'TA':1,'Gd':2,'Ex':3})\ncomp_df.GarageQual = comp_df.GarageQual.map({'Po':0,'Fa':1,'TA':2,'Gd':3,'Ex':4})","485dc9cd":"object_list = comp_df.select_dtypes(include='object').head().columns.tolist()","8a8ba960":"for col in object_list :\n    comp_df[col] = LabelEncoder().fit_transform(comp_df[col])","79f4cac2":"comp_df.drop('Id',axis=1,inplace=True)","876ddb5c":"comp_df.shape","0511e672":"comp_df.head().T","41dd5bf2":"train_df = comp_df[comp_df.SalePrice.notnull()]\ntest_df = comp_df[comp_df.SalePrice.isnull()]\ntest_df.drop('SalePrice',axis=1,inplace=True)","6b720a31":"plt.figure(figsize=(13,2))\nsns.boxplot(comp_df.SalePrice)","ee9cfefe":"train_df  = train_df[train_df.SalePrice <= 400000]","ad31a086":"x_train = train_df.drop('SalePrice',axis=1)\ny_train =train_df['SalePrice']","e0c01279":"# Check the shape\ntrain_df.shape, test_df.shape","8521baf5":"x_train.shape, y_train.shape","1fcbaaa7":"from lightgbm import LGBMRegressor\n\nfrom sklearn.model_selection import GridSearchCV, cross_validate, RepeatedKFold","c334e981":"cv = RepeatedKFold(n_repeats=3, n_splits=10, random_state=42)\nmodel = LGBMRegressor(random_state=42)\nscores = cross_validate(model, x_train, y_train, cv=cv,scoring=['r2','neg_mean_squared_log_error'], verbose=1, n_jobs=-1)","9864367c":"print(scores['test_r2'].mean())\nprint(np.sqrt(np.abs(scores['test_neg_mean_squared_log_error'].mean())))","a1d2b9e1":"params = {\n    'n_estimators':[50,100,200],\n    'max_depth':[0,3,5,7],\n    'learning_rate':[0.0001,0.001,0.01,0.1,1],\n    'boosting_type':['gbdt','dart','goss'],\n    'subsample':[0.3,0.5,0.7,1],\n    'colsample_bytree':[0.3,0.5,0.7,1]\n}\ncv = RepeatedKFold(n_repeats=1, n_splits=5, random_state=42)\nlbm_grid = GridSearchCV(LGBMRegressor(random_state=42),params, cv=cv,verbose=1, n_jobs=-1, scoring='r2')\nlbm_grid.fit(x_train, y_train)","262c3b58":"print(lbm_grid.best_score_,lbm_grid.best_estimator_)","c39b5b71":"y_pred = pd.DataFrame(lbm_grid.predict(test_df))\ny_pred['Id'] = answer_id\ny_pred.set_index('Id',inplace=True)\ny_pred.columns = ['SalePrice']","c8d15ee6":"y_pred.to_csv('answer.csv')","5096dc89":"#### There are many outliers, I will drop the outliers after formatting all the features.","88f80588":"- The total basement area is equal to basement area of type 1 and 2 + unfinished area\n- There is one extra case beacause of fillna() at the beginning.","2e0e99d5":"# Filling missing value and filtering outliers","ef1b02fe":"#### Check the distribution of SalePrice","6c2674dd":"#### Combine the training set and testing set for fill missing value","330c9c05":"- first floor + second floor + low quality finished flooor = Above grade living area.\n- I will drop the columns of first floor and second ","746e4418":"#### Drop the outliers","bb3ef153":"# Data EDA and Features engineering","0706659b":"We will drop columns with missing value more than 50%, there is a marginal case : FireplaceQu","aba884b8":"#### Label encoding","7fd6bd0d":"- There are total 80 features (exclude the labels) in the data.\n- The size of training set and testing set are very similar.","1e3066d0":"#### Relation between living area and sale price.","484bf6f6":"### Tuning hyperparameters","1ac7ee50":"#### Correlation","ddc778f6":"#### Features of grading\nExterCond, \nBsmtCond,\nHeatingQC,\nHeatingQC,\nKitchenQual,\nGarageCond","bb0f965f":"- Group 3Ssn porch and screen porch to enclosed porch","cbb89b3f":"#### Porch Area\n\n- There are 4 porch area in data, \n- openporch, \n- enclosed porch, \n- 3 season porch, \n- screen porch.","ae6e4544":"### Filter out the outliers of SalePrice","531f2372":"#### Group all bathroom columns into one","3f9bce87":"#### Other room, places and functionality rate.\n- Bedroom: Number of bedrooms above basement level\n- Kitchen: Number of kitchens\n- KitchenQual: Kitchen quality\n- TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n- Functional: Home functionality rating\n- Fireplaces: Number of fireplaces\n","7ce7e755":"#### Garage\n\n- garage type, the garage location, some are attached to house\n- garageyrblt, the year garage was built\n- garage finish, the interior finish of garage\n- garage quality: 6 levels\n- garage cond: 6 levels\n- paved Driveway: Y:Paved, P:partial , N: gravel","a71f5810":"#### Basement\n\n- BsmtQual\n- BsmtCond\n- BsmtExposure\n- BsmtFinType1\n- BsmtFinSF1\n- BsmtFinType2\n- BsmtFinSF2\n- BsmtUnfSF\n- TotalBsmtSF","f52bad9b":"#### Normalized the numeric features.","9e5f4429":"# Prediction on test data","84362291":"#### Bathroom\n- BsmtFullBath, Basement full bathrooms\n- BsmtHalfBath, Basement half bathrooms\n- FullBath, full bathrooms above grade\n- HalfBath, half bathrooms above grade","9a5041d6":"#### Above ground area","d27764eb":"#### Other column\n\n- SaleType: Type of sale\n- SaleCondition: Condition of sale\n- Neighborhood: Physical locations within Ames city limits\n- Condition1: Proximity to main road or railroad\n- Condition2: Proximity to main road or railroad (if a second is present)\n- BldgType: Type of dwelling\n- HouseStyle: Style of dwelling\n- MSSubClass: The building class\n- MSZoning: The general zoning classification","fb667055":"# House Prices - Advanced Regression Techniques\n### Predict sales prices and practice feature engineering, RFs, and gradient boosting\n\n### Goal\nPredict the sales price for each house. For each Id in the test set, predict the value of the SalePrice variable. \n\n### Metric\nSubmissions are evaluated on Root-Mean-Squared-Error (RMSE) between the logarithm of the predicted value and the logarithm of the observed sales price. (Taking logs means that errors in predicting expensive houses and cheap houses will affect the result equally.)\n\n### File descriptions\n- train.csv - the training set\n- test.csv - the test set\n- data_description.txt - full description of each column, originally prepared by Dean De Cock but lightly edited to match the column names used here\n- sample_submission.csv - a benchmark submission from a linear regression on year and month of sale, lot square footage, and number of bedrooms\n\n### Data fields\n- SalePrice - the property's sale price in dollars. This is the target variable that you're trying to predict.\n- MSSubClass: The building class\n- MSZoning: The general zoning classification\n- LotFrontage: Linear feet of street connected to property\n- LotArea: Lot size in square feet\n- Street: Type of road access\n- Alley: Type of alley access\n- LotShape: General shape of property\n- LandContour: Flatness of the property\n- Utilities: Type of utilities available\n- LotConfig: Lot configuration\n- LandSlope: Slope of property\n- Neighborhood: Physical locations within Ames city limits\n- Condition1: Proximity to main road or railroad\n- Condition2: Proximity to main road or railroad (if a second is present)\n- BldgType: Type of dwelling\n- HouseStyle: Style of dwelling\n- OverallQual: Overall material and finish quality\n- OverallCond: Overall condition rating\n- YearBuilt: Original construction date\n- YearRemodAdd: Remodel date\n- RoofStyle: Type of roof\n- RoofMatl: Roof material\n- Exterior1st: Exterior covering on house\n- Exterior2nd: Exterior covering on house (if more than one material)\n- MasVnrType: Masonry veneer type\n- MasVnrArea: Masonry veneer area in square feet\n- ExterQual: Exterior material quality\n- ExterCond: Present condition of the material on the exterior\n- Foundation: Type of foundation\n- BsmtQual: Height of the basement\n- BsmtCond: General condition of the basement\n- BsmtExposure: Walkout or garden level basement walls\n- BsmtFinType1: Quality of basement finished area\n- BsmtFinSF1: Type 1 finished square feet\n- BsmtFinType2: Quality of second finished area (if present)\n- BsmtFinSF2: Type 2 finished square feet\n- BsmtUnfSF: Unfinished square feet of basement area\n- TotalBsmtSF: Total square feet of basement area\n- Heating: Type of heating\n- HeatingQC: Heating quality and condition\n- CentralAir: Central air conditioning\n- Electrical: Electrical system\n- 1stFlrSF: First Floor square feet\n- 2ndFlrSF: Second floor square feet\n- LowQualFinSF: Low quality finished square feet (all floors)\n- GrLivArea: Above grade (ground) living area square feet\n- BsmtFullBath: Basement full bathrooms\n- BsmtHalfBath: Basement half bathrooms\n- FullBath: Full bathrooms above grade\n- HalfBath: Half baths above grade\n- Bedroom: Number of bedrooms above basement level\n- Kitchen: Number of kitchens\n- KitchenQual: Kitchen quality\n- TotRmsAbvGrd: Total rooms above grade (does not include bathrooms)\n- Functional: Home functionality rating\n- Fireplaces: Number of fireplaces\n- FireplaceQu: Fireplace quality\n- GarageType: Garage location\n- GarageYrBlt: Year garage was built\n- GarageFinish: Interior finish of the garage\n- GarageCars: Size of garage in car capacity\n- GarageArea: Size of garage in square feet\n- GarageQual: Garage quality\n- GarageCond: Garage condition\n- PavedDrive: Paved driveway\n- WoodDeckSF: Wood deck area in square feet\n- OpenPorchSF: Open porch area in square feet\n- EnclosedPorch: Enclosed porch area in square feet\n- 3SsnPorch: Three season porch area in square feet\n- ScreenPorch: Screen porch area in square feet\n- PoolArea: Pool area in square feet\n- PoolQC: Pool quality\n- Fence: Fence quality\n- MiscFeature: Miscellaneous feature not covered in other categories\n- MiscVal: $ Value of miscellaneous feature\n- MoSold: Month Sold\n- YrSold: Year Sold\n- SaleType: Type of sale\n- SaleCondition: Condition of sale","156f8d06":"It is difficult the fill the missing value, I will drop this column also.","24dafa69":"Thank you","ee7bd6a6":"#### Roof and exterior\n- RoofStyle: Type of roof\n- RoofMatl: Roof material\n- Exterior1st: Exterior covering on house\n- Exterior2nd: Exterior covering on house (if more than one material)\n- MasVnrType: Masonry veneer type\n- MasVnrArea: Masonry veneer area in square feet\n- ExterQual: Exterior material quality\n- ExterCond: Present condition of the material on the exterior\n- Foundation: Type of foundation","e4e3fc23":"#### Create two new columns : house age, and remodel age.","3b3dec02":"#### Features encoding","932ac3ce":"#### Drop the columns with too many missing values","5daadda3":"#### Date\n\n- MoSold: Month Sold\n- YrSold: Year Sold\n- YearBuilt: Original construction date\n- YearRemodAdd: Remodel date :same as construction date if no remodeling or additions\n","fd3f0166":"#### Land","eb68c449":"# Training Models","24bb5484":"- LotFrontage: Linear feet of street connected to property\n- LotArea: Lot size in square feet\n- Street: Type of road access\n- LotShape: General shape of property\n- LandContour: Flatness of the property\n- Utilities: Type of utilities available\n- LotConfig: Lot configuration\n- LandSlope: Slope of property\n","80d50bff":"#### Electronic devices\n- Heating: Type of heating\n- HeatingQC: Heating quality and condition\n- CentralAir: Central air conditioning\n- Electrical: Electrical system","bd19269b":"# Splt to training set and testing set"}}