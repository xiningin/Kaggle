{"cell_type":{"779cd51a":"code","b79370a5":"code","ba02ca2c":"code","cc2e92ee":"code","d5381149":"code","30978081":"code","99f9a8aa":"code","474e1309":"code","a04f996f":"code","391f2c5d":"code","2ad09faf":"code","c18330a6":"code","b90e60dc":"code","6f3b167e":"code","59804258":"code","172d9510":"code","0bc87c18":"code","55e30f19":"code","b9db0d47":"code","1c3cc176":"code","63fd49c8":"code","b4680a0f":"code","bc73cae0":"code","e4d3eaab":"code","a35e1c8c":"code","5a3eca24":"code","f94f131a":"code","ab480710":"code","629a1445":"code","a08352dd":"code","2de923b2":"code","f14e2c94":"code","76bf057b":"code","2f14107c":"code","4ece5f2f":"code","498551ae":"code","3d5e32a8":"code","98a38d1d":"code","67b7baa8":"code","3fa463be":"code","31c857ba":"code","768e2b39":"code","579c7e92":"code","5b550447":"code","24d65b51":"code","72c9cbf8":"code","de419857":"code","b6e4b080":"code","3d3218e7":"code","5bddf0ad":"code","35fe2517":"code","5af1d4a1":"code","f867601b":"code","181ef80a":"code","a3aa31d5":"code","c30f61dd":"code","85cc33ad":"code","89daaeb2":"code","b495765f":"code","b8252c04":"code","db3a45bd":"code","e6a65cdd":"code","9a2d6e06":"code","32a5e4e5":"code","c87153cc":"code","2276588f":"markdown","abdcfa15":"markdown","1b88c6a3":"markdown","2c6640ce":"markdown","88bdd538":"markdown","104c6298":"markdown","59f86813":"markdown","b5bf094b":"markdown"},"source":{"779cd51a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b79370a5":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","ba02ca2c":"gender_submission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","cc2e92ee":"train.head()","d5381149":"test.head()","30978081":"train.info()","99f9a8aa":"train['Age'].fillna(round(train['Age'].mean()), inplace=True)","474e1309":"train.drop('Cabin', axis=1, inplace=True)","a04f996f":"train.dropna(inplace=True)","391f2c5d":"Sex = pd.get_dummies(train['Sex'], drop_first=True)\nSex.rename({'male':'Sex'}, axis=1, inplace=True)","2ad09faf":"Embarked = pd.get_dummies(train['Embarked'])","c18330a6":"train.drop('Name', axis=1, inplace=True)\ntrain.drop('Sex', axis=1, inplace=True)\ntrain.drop('Ticket', axis=1, inplace=True)\ntrain.drop('Embarked', axis=1, inplace=True)","b90e60dc":"train.info()","6f3b167e":"Train = pd.concat([train, Sex, Embarked], axis=1)","59804258":"Train.info()","172d9510":"X_train = Train.drop('Survived', axis=1)\ny_train = Train['Survived']","0bc87c18":"test.info()","55e30f19":"test['Age'].fillna(round(test['Age'].mean()), inplace=True)\ntest['Fare'].fillna(test['Fare'].mean(), inplace=True)","b9db0d47":"test.drop('Cabin', axis=1, inplace=True)","1c3cc176":"Sex = pd.get_dummies(test['Sex'], drop_first=True)\nSex.rename({'male':'Sex'}, axis=1, inplace=True)","63fd49c8":"Embarked = pd.get_dummies(test['Embarked'])","b4680a0f":"test.drop('Name', axis=1, inplace=True)\ntest.drop('Sex', axis=1, inplace=True)\ntest.drop('Ticket', axis=1, inplace=True)\ntest.drop('Embarked', axis=1, inplace=True)","bc73cae0":"X_test = pd.concat([test, Sex, Embarked], axis=1)","e4d3eaab":"X_test","a35e1c8c":"from sklearn.linear_model import LogisticRegression","5a3eca24":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)","f94f131a":"predictions = logreg.predict(X_test)","ab480710":"predictions = pd.Series(predictions, name='Survived')","629a1445":"predictions","a08352dd":"submission = pd.concat([X_test['PassengerId'], predictions], axis=1)","2de923b2":"submission.to_csv('submission.csv', header=True, index=False)","f14e2c94":"from sklearn.tree import DecisionTreeClassifier","76bf057b":"tree = DecisionTreeClassifier()\ntree.fit(X_train, y_train)","2f14107c":"predictions = tree.predict(X_test)","4ece5f2f":"predictions = pd.Series(predictions, name='Survived')","498551ae":"submission = pd.concat([X_test['PassengerId'], predictions], axis=1)","3d5e32a8":"submission.to_csv('submission.csv', header=True, index=False)","98a38d1d":"from sklearn.neighbors import KNeighborsClassifier","67b7baa8":"knn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)","3fa463be":"predictions = knn.predict(X_test)","31c857ba":"predictions = pd.Series(predictions, name='Survived')","768e2b39":"submission = pd.concat([X_test['PassengerId'], predictions], axis=1)","579c7e92":"submission.to_csv('submission.csv', header=True, index=False)","5b550447":"knn = KNeighborsClassifier(n_neighbors=1)\nknn.fit(X_train, y_train)","24d65b51":"predictions = knn.predict(X_test)","72c9cbf8":"predictions = pd.Series(predictions, name='Survived')","de419857":"submission = pd.concat([X_test['PassengerId'], predictions], axis=1)","b6e4b080":"submission.to_csv('submission.csv', header=True, index=False)","3d3218e7":"knn = KNeighborsClassifier(n_neighbors=25)\nknn.fit(X_train, y_train)","5bddf0ad":"predictions = knn.predict(X_test)","35fe2517":"predictions = pd.Series(predictions, name='Survived')","5af1d4a1":"submission = pd.concat([X_test['PassengerId'], predictions], axis=1)","f867601b":"submission.to_csv('submission.csv', header=True, index=False)","181ef80a":"from sklearn.ensemble import RandomForestClassifier","a3aa31d5":"rfc = RandomForestClassifier(n_estimators=100, max_depth=5)\nrfc.fit(X_train, y_train)","c30f61dd":"predictions = rfc.predict(X_test)","85cc33ad":"predictions = pd.Series(predictions, name='Survived')","89daaeb2":"submission = pd.concat([X_test['PassengerId'], predictions], axis=1)","b495765f":"submission.to_csv('submission.csv', header=True, index=False)","b8252c04":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC","db3a45bd":"clf = make_pipeline(StandardScaler(), SVC(gamma='auto'))\nclf.fit(X_train, y_train)","e6a65cdd":"predictions = clf.predict(X_test)","9a2d6e06":"predictions = pd.Series(predictions, name='Survived')","32a5e4e5":"submission = pd.concat([X_test['PassengerId'], predictions], axis=1)","c87153cc":"submission.to_csv('submission.csv', header=True, index=False)","2276588f":"# Support Vector Machines","abdcfa15":"# Logistic Regression","1b88c6a3":"# Decision Tree","2c6640ce":"# Random Forest Classifier","88bdd538":"# K-Nearest Neighbors (k=25)","104c6298":"# Data Exploration & Cleaning","59f86813":"# K-Nearest Neighbors (k=5)","b5bf094b":"# K-Nearest Neighbors (k=1)"}}