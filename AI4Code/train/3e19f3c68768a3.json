{"cell_type":{"b430d7cb":"code","59170ac4":"code","c326ca2d":"code","5ebe1907":"code","8972697e":"code","fec84acf":"code","5f33b058":"code","ba5f6315":"code","88795ade":"code","10d8b95c":"code","e2ad23d3":"code","96906f74":"code","750ade2b":"code","7586a3e0":"code","9ef6c9f0":"code","4efe8770":"code","ce4c9982":"code","c668635f":"code","540517b0":"code","8b7c0f2c":"code","9b4a7bfd":"code","f3761fda":"code","0ed433a1":"code","94c6e811":"markdown","81823b5b":"markdown","e4539dbb":"markdown","91ce93e0":"markdown","455b4fa6":"markdown","6e332ef5":"markdown"},"source":{"b430d7cb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59170ac4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c326ca2d":"df=pd.read_csv('\/kaggle\/input\/wine-quality\/winequalityN.csv')\ndf.head()","5ebe1907":"df.shape","8972697e":"df.describe()","fec84acf":"# Number of missing values in each column of training data\nmissing_val_count_by_column = (df.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","5f33b058":"#fill missing value with their mean value\ndf.fillna(df.mean(), inplace=True)","ba5f6315":"#show all type of winery\ndf['type'].unique()","88795ade":"# plot histogram of type\nplt.figure(figsize=(10,7))\nsns.countplot(x='type', data=df, palette='hls')\nplt.show()","10d8b95c":"# correlation\nplt.figure(figsize=(10,5))\nsns.heatmap(df.corr(),cmap='coolwarm')\nplt.show()","e2ad23d3":"#ploting countplot quality \nplt.figure(figsize=(5,3))\nsns.countplot(x='quality',data=df)","96906f74":"#converting categorical to numerical\ndf['type']=pd.get_dummies(df['type'],drop_first=True)\ndf.head()","750ade2b":"#standardize the data\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(df.drop('quality',axis=1))","7586a3e0":"# start with modelling\n# split data into train and test\nfrom sklearn.model_selection import train_test_split\nX=df.drop('quality',axis=1)\ny=df['quality']\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=101)","9ef6c9f0":"#linear regression\nfrom sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(X_train,y_train)\n#acurracy\nlr=lr.score(X_test,y_test)","4efe8770":"#svm\nfrom sklearn.svm import SVC\nsvm=SVC()\nsvm.fit(X_train,y_train)\nsvm=svm.score(X_test,y_test)","ce4c9982":"# random forest\nfrom sklearn.ensemble import RandomForestClassifier\nrf=RandomForestClassifier(n_estimators=100)\nrf.fit(X_train,y_train)\nrf=rf.score(X_test,y_test)","c668635f":"# knn\nfrom sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train,y_train)\nknn=knn.score(X_test,y_test)","540517b0":"# decision tree\nfrom sklearn.tree import DecisionTreeClassifier\ndt=DecisionTreeClassifier()\ndt.fit(X_train,y_train)\ndt=dt.score(X_test,y_test)","8b7c0f2c":"# naive bayes\nfrom sklearn.naive_bayes import GaussianNB\nnb=GaussianNB()\nnb.fit(X_train,y_train)\nnb=nb.score(X_test,y_test)","9b4a7bfd":"models = pd.DataFrame({\n    'Model': ['Linear Regression', 'KNN', 'SVM', \n              'Random Forest', 'Naive Bayes', 'Decision Tree'],\n    'Score': [lr,knn,svm,rf,nb,dt]})","f3761fda":"# show all the models \nmodels.sort_values(by='Score', ascending=False)","0ed433a1":"#plotting the graph \nplt.figure(figsize=(10,5))\nsns.barplot(x='Model',y='Score',data=models)\nplt.show()","94c6e811":"# Train model","81823b5b":"# checking out any missing value","e4539dbb":"# Analysis","91ce93e0":"# Visualization","455b4fa6":"# Read data","6e332ef5":"# Importing libraries"}}