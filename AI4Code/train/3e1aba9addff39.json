{"cell_type":{"ddeda5a7":"code","685778e8":"code","1cb85d3d":"code","dd803b64":"code","83af9c9e":"code","ce0e706d":"code","26327962":"code","9aa6bcb2":"code","3fbee002":"code","9c17f9d5":"code","42414e11":"code","04ffef38":"code","e5e112af":"code","b013c603":"code","6028dd23":"code","382c5214":"code","fc698e27":"code","cf85447f":"code","a7951e40":"code","bbb76828":"code","d96b82b4":"markdown","5224210e":"markdown","8fd528fc":"markdown","6ec1de3a":"markdown","3aea5cbc":"markdown","00834f24":"markdown","b8dedd1a":"markdown","b4e38723":"markdown","4c7d0386":"markdown","cabe252e":"markdown","f53e4bb6":"markdown","5f7c8a59":"markdown","cc0d01ea":"markdown","83e3c649":"markdown","62126c28":"markdown","790ed162":"markdown","e31d68cd":"markdown","b323538e":"markdown","d29d5e47":"markdown","2a377d2d":"markdown","d63ecf93":"markdown","14b70630":"markdown","87e10b2d":"markdown"},"source":{"ddeda5a7":"%%capture capt\n#install\n!pip install jupyter-dash pyngrok -q\n!pip install dash-cytoscape -q\n!pip install dash\n!pip install plotly\n\n#imports\nimport numpy as np \nimport pandas as pd \nimport os, sys\nimport os\n\nfrom jupyter_dash import JupyterDash  # pip install dash\nimport dash_cytoscape as cyto  # pip install dash-cytoscape==0.2.0 or higher\nimport dash_html_components as html\nimport dash_core_components as dcc\nfrom dash.dependencies import Output, Input\nimport pandas as pd  # pip install pandas\nimport plotly.express as px\nimport math\nfrom dash import no_update\n\nimport pandas as pd\nimport numpy as np\n\nimport plotly.express as px \nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nimport dash  \nimport dash_core_components as dcc\nimport dash_html_components as html\nfrom dash.dependencies import Input, Output\n\nfrom datetime import date\n\nfrom pyngrok import ngrok\n\nfrom statistics import *\n\nfrom pandas.api.types import CategoricalDtype","685778e8":"# we'll  use a class to accelerate calculations\nclass concatenate_all_data:\n    def concatenate():\n        \"\"\"\n        Input: nothing\n        Operation: read all tables we have (product, district, engagagement) \n                    and merge them in one single big table\n        Output: merged data table\n        \"\"\"\n        \n        # Reading products_info and districts_info\n        products_info=pd.read_csv('\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv').set_index('LP ID')\n        districts_info=pd.read_csv('\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv').set_index('district_id')\n        \n        #reading engagement_data and joining them to Reading products_info and districts_info files\n        path = \"\/kaggle\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data\/\"\n        dirs = os.listdir( path )\n        first_file=True\n        for file in dirs:\n            #the 4 numbers of the name file is the district id\n            id_district=int(file.split('.')[0])\n            if first_file:\n                #reading the chosen file\n                data=pd.read_csv(path+file).rename(columns={'lp_id':'LP ID'}) # to have the same name \n                data['district_id'] = id_district\n                first_file=False\n            else:\n                #reading the chosen file\n                data_file=pd.read_csv(path+file).rename(columns={'lp_id':'LP ID'}) # to have the same name \n                data_file['district_id'] = id_district\n                data= pd.concat((data,data_file), axis=0)\n        \n        #adding district infos to the data file\n        data = pd.merge(data,districts_info, how='left', on='district_id')\n        #adding products_info to the data\n        data= pd.merge(data,products_info, how='left', on='LP ID')\n        \n        return data\ndata = concatenate_all_data.concatenate()","1cb85d3d":"# drop rows if null on state state\n\ndata=data.dropna(subset=['state'])\n\n# for primary_fct, we extract the large groups that correspond to the first 2 letters \n# because we have too many \ndata['primary_fct'] = data['Primary Essential Function'].str[:2]\n\n#We change 'na' bby np.Nan understandable by pandas\ndata['primary_fct']=data['primary_fct'].replace('na', np.nan)","dd803b64":"data.head()","83af9c9e":"def avg_interval(column):\n    \"\"\"\n    Input: a column name of our dataframe, type=string\n    Operation: calculate the average of all string intervals in the columns\n    Output: the serie of interval's average , type=float\n    \"\"\"\n    #we dellete brackets\n    y=data[column].str.strip('][')\n    \n    #we separate 2 values and make them float\n    y=y.str.split(',',  expand=True).astype('float32')\n    \n    #return average of all rows \n    return y.mean(axis=1)\n\ninterval_variables=['pct_free\/reduced','county_connections_ratio', \n                    'pp_total_raw', 'pct_black\/hispanic']\n\nfor column in interval_variables:\n    data[column+'_avg'] = avg_interval(column)","ce0e706d":"data.head()","26327962":"#pct_access>1\ndata[data.pct_access>1].head()","9aa6bcb2":"#setting pct_access>1 to 1\ndata.loc[data.pct_access>1,'pct_access']=1","3fbee002":"#No pct_access <0\ndata[data.pct_access<0].head()","9c17f9d5":"data.info(memory_usage=\"deep\")","42414e11":"dtypes_float64=data.dtypes[data.dtypes=='float64'].index\ndtypes_string=data.dtypes[data.dtypes=='object'].index\ndtypes_int64=data.dtypes[data.dtypes=='int64'].index\n\n#float64 to float32\nfor u in dtypes_float64:\n    data[u]=data[u].astype('float32')\n\n    #int64 to int32\nfor u in dtypes_int64:\n    data[u]=data[u].astype('int32')\n\n# object to category ordered (if not ordered impossible to filter data)\nfor u in dtypes_string:\n    if u!='time': # time dtype will be changed below\n        data[u]=data[u].astype(CategoricalDtype(categories=sorted(list(data[u][data[u].notna(\n                                                                        )].unique())), \n                                               ordered=True))\n    \n#pour le temps time faut le mettre dans le bon format\ndata.time=pd.to_datetime(data.time)\n\ndata.info(memory_usage=\"deep\")\n","04ffef38":"url_code_states='https:\/\/raw.githubusercontent.com\/jasonong\/List-of-US-States\/master\/states.csv'\ncode_states=pd.read_csv(url_code_states)\n\n#we rename district of columbia to adapt it to our dataset\ncode_states.State= code_states.State.replace('District of Columbia', 'District Of Columbia')\n\n#we set index as State to accelerate the next join operation\ncode_states=code_states.set_index('State')\n\n#we add this abbreviations to our dataset \ndata=pd.merge(data.rename(columns={'state': 'State'}),code_states, how='left', on='State')\n\ndata.head()","e5e112af":"%%capture capt\n#using the api, renaming columns to adapt it to our dataset \nlink_api='https:\/\/api.covidtracking.com\/v1\/states\/daily.csv'\ncases_deaths_covid=pd.read_csv(link_api).rename(\n                    columns={'state': 'Abbreviation', 'date': 'time'})\n\n#taking interesting columns for our analyse\ninteresting_columns=['time', 'Abbreviation', 'totalTestResultsIncrease','positiveIncrease', \n                        'hospitalizedIncrease', 'deathIncrease']\ncases_deaths_covid=cases_deaths_covid[interesting_columns]\n\n#we we put the right format for 'time'\ncases_deaths_covid.time=pd.to_datetime(cases_deaths_covid.time, format='%Y%m%d', errors='ignore')\n\n# we're just consider increase not decrease of interesting variables \nnumeric=['totalTestResultsIncrease','positiveIncrease','hospitalizedIncrease', 'deathIncrease']\nfor u in numeric:\n    cases_deaths_covid[u][cases_deaths_covid[u] < 0] = 0","b013c603":"cases_deaths_covid.head()","6028dd23":"#dahsboard background image\nimage='https:\/\/photos.lci.fr\/images\/613\/344\/illustration-virus-a230b4-0@1x.jpeg'\n\n#Connectivity and pct_access colors in our dahsboard\nconnectivity_color='#1f77b4'\nengagement_color='#ff7f0e'","382c5214":"from pyngrok import ngrok\n#we stip the server if it's being used \nngrok.kill()\ntunnel = ngrok.connect(8050)","fc698e27":"external_stylesheets = ['https:\/\/codepen.io\/chriddyp\/pen\/bWLwgP.css']\napp = JupyterDash(__name__, external_stylesheets=external_stylesheets, server_url=tunnel.public_url)","cf85447f":"# Construction of the dashboard\napp.layout = html.Div(style={'height': '100%', 'width':'100%','top': '0%',\n        'background-image': 'url('+image+')'}, #the background image\n                      \n        children=[ \n            # Title\n            html.Div(style={'width':'100%', 'margin-top': '0','vertical-align': 'middle',\n                                            'display' : 'inline-block', 'height':'9vh'},\n                     \n                children=[html.H3(\"LearnPlatform COVID-19 Impact on Digital Learning\", \n                            style={'text-align': 'center', 'margin-top':'1%' , \n                                  'color':'white','font-family': \"Helvetica Neue, sans-serif\",\n                                   'vertical-align': 'middle', 'letter-spacing': '1px'\n                                  }\n                                 )\n            ]),\n            \n            # Dropdowns\n            html.Div(style={'background-color': 'white','width':'100%','display': 'flex',\n                           'height': '2vw !important', 'block':'inline'},\n                children=[\n                    \n                    # Date range dropdown\n                    dcc.DatePickerRange(style={'display':'inline-block', 'height':'50%'},\n                                id='my-date-picker-range',\n                                min_date_allowed=date(2020, 1, 1),\n                                max_date_allowed=date(2020, 12, 31),\n                                start_date=date(2020, 1, 1),\n                                end_date=date(2020, 12, 31)\n                    ),\n                    \n                    #State Selection dropdown\n                    dcc.Dropdown(id=\"slct_state\",style={'width':'12.4vw', 'margin':'auto',\n                                                         'font-family': '\"Gill Sans\", sans-serif',\n                                                         'font-size': '1.1em', \n                                                         'background-color': '#E0E0E0' },\n                        #labels and values of States \n                        options=[\n                             {\"label\": u, \"value\": u} for u in sorted(data['State'][data['State'].notna()].unique().astype(str))\n                        ],\n                         multi=True,\n                         placeholder=\"State\", \n\n                     ),\n                    \n                     # Locale Selection dropdown\n                     dcc.Dropdown(id=\"slct_locale\",style={'width':'12.4vw', 'margin':'auto', \n                                                         'font-family': '\"Gill Sans\", sans-serif', \n                                                          'font-size': '1.1em', \n                                                          'background-color': '#E0E0E0'},\n                         #labels and values of Locales \n                         options=[\n                             {\"label\": u, \"value\": u} for u in sorted(data['locale'][\n                                                                    data['locale'].notna()].unique().astype(str))\n                         ],\n                         multi=True,\n                         placeholder=\"Locale\",\n                     ),\n                    \n                     # pct_black\/hispanic Selection dropdown\n                     dcc.Dropdown(id=\"slct_pct_black\/hispanic\",\n                                  style={'width':'12.4vw', 'margin':'auto',\n                                         'font-family': '\"Gill Sans\", sans-serif', \n                                         'font-size': '1.1em', 'background-color': '#E0E0E0'\n                                        },\n                         #labels and values of pct_black\/hispanic\n                         options=[\n                             {\"label\": u, \"value\": u} for u in sorted(data['pct_black\/hispanic'][\n                                                                    data['pct_black\/hispanic'].notna()].unique().astype(str))\n                         ],\n                         multi=True,\n                         placeholder=\"%Black\/hispanic\",\n                     ),\n                    \n                     # pct_free\/reduced Selection dropdown\n                     dcc.Dropdown(id=\"slct_pct_free\/reduced\",\n                                  style={'width':'12.4vw', 'margin':'auto', \n                                         'font-family': '\"Gill Sans\", sans-serif',\n                                         'font-size': '1.1em', 'background-color': '#E0E0E0'},\n                         #labels and values of pct_black\/hispanic\n                         options=[\n                             {\"label\": u, \"value\": u} for u in sorted(data['pct_free\/reduced'][\n                                                                data['pct_free\/reduced'].notna()].unique().astype(str))\n                         ],\n                         multi=True,\n                         placeholder=\"%Free\/reduced\",\n                     ),\n                    \n                     # county_connections_ratio Selection dropdown\n                     dcc.Dropdown(id=\"slct_county_connections_ratio\",\n                                  style={'width':'12.4vw', 'margin':'auto', \n                                         'font-family': '\"Gill Sans\", sans-serif', \n                                         'font-size': '1.1em', 'background-color': '#E0E0E0'},\n                         #labels and values of county_connections_ratio\n                         options=[\n                             {\"label\": u, \"value\": u} for u in sorted(data['county_connections_ratio'][\n                                                                data['county_connections_ratio'].notna()].unique().astype(str))\n                         ],\n                         multi=True,\n                         placeholder=\"Connections ratio\",\n                     ),\n                    \n                     # primary_fct Selection dropdown\n                     dcc.Dropdown(id=\"slct_primary_fct\",style={'width':'12.4vw', 'margin':'auto',\n                                                         'font-family': '\"Gill Sans\", sans-serif',\n                                                         'font-size': '1.1em', \n                                                         'background-color': '#E0E0E0'},\n                         #labels and values of primary_fct\n                         options=[\n                             {\"label\": u, \"value\": u} for u in sorted(data['primary_fct'][\n                                                                data['primary_fct'].notna()].unique().astype(str))\n                         ],\n                         multi=True,\n                         placeholder=\"Primary fct\",\n                     ),\n                    \n                ]),\n            \n            # Graphes\n            html.Div(style={'display': 'flex', 'flex-wrap': 'wrap', 'height': '82vh', 'margin-left':'auto'},\n                     children=[\n                \n                #Covid test\/ positive graph\n                html.Div(style={'height': '21vh', 'width': '22.5vw'},\n                    children=dcc.Graph(id='fig1',style={'height':'92%', 'width': '95%', 'margin': 'auto',\n                                                       'margin-top':'2.6%'},\n                                           figure={})\n                ),\n                  \n                #Average connectivity graph\n                html.Div(style={'height': '19.3vh', 'width': '8vw','background-color': 'white',  \n                                'margin-top':'0.65%', 'margin-left':'0%'},\n                    children=[\n                        html.Div(style={'text-align': 'center', 'margin': 'auto', 'margin-top': '15%', 'font-weight': 'bold'},\n                            children=['Average  ', html.Span('Connectivity', style={'color': '#1f77b4', 'font-weight': 'bold'})]),\n                            \n                        dcc.Graph(id='fig2',style={'height':'35%', 'width': '85%', 'margin': 'auto', 'margin-top':'2.5%'},\n                                           figure={})\n                             ]),\n                \n                # connectivity\/engament by time graph\n                html.Div(style={'height': '21vh', 'width': '36.5vw'},#engagement * connectivit\u00e9\n                    children=dcc.Graph(id='fig3',style={'height':'92%', 'width': '100%', 'margin': 'auto','margin-top':'1.7%'},\n                                           figure={})\n                ),\n                \n                # Average engagement graph  \n                html.Div(style={'height': '19.3vh', 'width': '8vw','background-color': 'white',  \n                                'margin-top':'0.65%', 'margin-left':'0%'},\n                    children=[ \n                        html.Div(style={'text-align': 'center', 'margin': 'auto', 'margin-top': '15%', 'font-weight': 'bold'},\n                            children=['Average ', html.Span('Engagement', style={'color': '#ff7f0e', 'font-weight': 'bold'}) ]),\n                        \n                        dcc.Graph(id='fig4',style={'height':'35%', 'width': '85%', 'margin': 'auto', 'margin-top':'2.5%'},\n                                           figure={})\n                             ]\n                ),        \n                \n                #Hospitalized\/deaths graph    \n                html.Div(style={'height': '21vh', 'width': '22.5vw'},#a voir\n                    children=dcc.Graph(id='fig5',style={'height':'92%', 'width': '95%', 'margin': 'auto',\n                                                       'margin-top':'2.6%'},\n                                           figure={})\n                ),\n                \n                # Engagement\/pct_access by locale graph and Egagement\/pct_access by pct_black_hispanic graph      \n                html.Div(style={'display': 'flex', 'flex-direction': 'column'},#a voir\n                    children=[\n                        \n                        # Engagement\/pct_access by locale graph\n                        html.Div(style={'height': '30.8vh', 'width': '22.5vw'},\n                        children=dcc.Graph(id='fig9',style={'height':'92%', 'width': '95%', 'margin': 'auto',\n                                                       'margin-top':'1.95%'},\n                                           figure={})),\n                        \n                        #Engagement\/pct_access by pct_black_hispanic graph\n                        html.Div(style={'height': '30.8vh', 'width': '22.5vw'},#a voir\n                        children=dcc.Graph(id='fig10',style={'height':'93%', 'width': '95%', 'margin': 'auto',\n                                                       'margin-top':'0%'},\n                                           figure={}))\n                 ]),\n                 \n                # map graph\n                html.Div(style={'height': '59.5vh', 'width': '52.5vw'},\n                         \n                    children=[html.H3('Engagement (point size) and connectivity (gradient color) by state',\n                                      style={'text-align': 'center', 'margin': 'auto',\n                                             'width': '100%',\n                                             'margin-top':'0.7%',\n                                             'background-color':'white',\n                                             'font-size':'1.3em','color':'black',\n#                                               'font-weight': 'lighter',\n                                              'font-family': 'Georgia, serif',\n                                              'height': '3.9vh'\n                                            }),\n                              \n                                       dcc.Graph(id='fig7',style={'height':'55vh', 'width': '100%', \n                                                           'margin': 'auto'},\n                                           figure={})\n                             ]\n                 ),\n                 \n                #Engagement\/pct_access by primary_fct graph and best_product by Engagement\/pct_access\n                html.Div(style={'display': 'flex', 'flex-direction': 'column'},\n                    children=[\n                        \n                        #Engagement\/pct_access by primary_fct graph\n                        html.Div(style={'height': '30.8vh', 'width': '22.5vw'},\n                        children=dcc.Graph(id='fig11',style={'height':'92%', 'width': '95%', \n                                                             'margin': 'auto',\n                                                             'margin-top':'1.95%'},\n                                           figure={})),\n                        \n                        #best_product by Engagement\/pct_access\n                        html.Div(style={'height': '30.8vh', 'width': '22.5vw'},\n                        children=dcc.Graph(id='fig12',style={'height':'93%', 'width': '95%', \n                                                             'margin': 'auto','margin-top':'0%'},\n                                           figure={}))\n                ])\n            ])\n    \n\n])\n","a7951e40":"@app.callback( #outputs: where the graphs will be positioned\n               Output(component_id='fig7', component_property='figure'),\n               Output(component_id='fig1', component_property='figure'),\n               Output(component_id='fig5', component_property='figure'),\n               Output(component_id='fig2', component_property='figure'),\n               Output(component_id='fig4', component_property='figure'),\n               Output(component_id='fig3', component_property='figure'),\n               Output(component_id='fig9', component_property='figure'),\n               Output(component_id='fig11', component_property='figure'),\n               Output(component_id='fig10', component_property='figure'),\n               Output(component_id='fig12', component_property='figure'),\n              \n               #inputs: dropdowns to filter data and make dashboard interractive\n               Input('my-date-picker-range', 'start_date'),\n               Input('my-date-picker-range', 'end_date'),\n               Input(component_id='slct_state', component_property='value'),\n               Input(component_id='slct_locale', component_property='value'),\n               Input(component_id='slct_pct_black\/hispanic', component_property='value'),\n               Input(component_id='slct_pct_free\/reduced', component_property='value'),\n               Input(component_id='slct_county_connections_ratio', component_property='value'),\n               Input(component_id='slct_primary_fct', component_property='value')\n                \n)\n\n\ndef update_graph(date_start, date_end, city_selected, locale_selected, \n                 pct_black_hispanic_selected,pct_free_reduced_selected, county_connections_ratio_selected,\n                primary_fct_selected):\n    \"\"\"\n    Input: all dropdowns\n    Operation: filter looking dropdowns selected and create graphs\n    Output: return graphs \n    \"\"\"\n    \n    # we set date_start and date_end t the good format\n    start=pd.to_datetime(date_start)\n    end=pd.to_datetime(date_end)\n    \n    # we make a copy of our datasets to not modify them directly\n    df1 = data.copy()\n    covid_cases = cases_deaths_covid.copy()\n    \n    ##### Fitering \n    \n    #filtering covid dataset and our dataset by time range chosen\n    df1=df1[(start<=df1.time) & (df1.time<=end)]\n    covid_cases=covid_cases[(start<=covid_cases.time) & (covid_cases.time<=end)]   \n    \n    #filtering by selected city  \n    if city_selected!=None and city_selected!=[]:\n        df1=df1[df1.State.isin(city_selected)]\n        covid_cases=covid_cases[covid_cases.Abbreviation.isin(df1.Abbreviation.unique())]\n    \n    #filtering by selected locale \n    if locale_selected!=None and locale_selected!=[]:\n        df1=df1[df1.locale.isin(locale_selected)]\n       \n    #filtering by selected  pct_black_hispanic\n    if pct_black_hispanic_selected!=None and  pct_black_hispanic_selected!=[]:\n        df1=df1[df1['pct_black\/hispanic'].isin(pct_black_hispanic_selected)]\n    \n    #filtering by selected locale pct_free_reduced\n    if pct_free_reduced_selected!=None and pct_free_reduced_selected!=[]:\n        df1=df1[df1['pct_free\/reduced'].isin(pct_free_reduced_selected)]\n       \n    #filtering by selected county_connections_ratio\n    if county_connections_ratio_selected!=None and county_connections_ratio_selected!=[]:\n        df1=df1[df1['county_connections_ratio'].isin(county_connections_ratio_selected)]\n    \n    #filtering by selected primary_fct \n    if primary_fct_selected!=None and primary_fct_selected!=[]:\n        df1=df1[df1['primary_fct'].isin(primary_fct_selected)]\n    \n    #####Graph creation\n    \n    ### Map graph\n    \n    #we select unique states\n    dff=df1[['State','Abbreviation' ]].drop_duplicates()\n    \n    #adding variables' averages in our dataset\n    dff=pd.merge(dff, df1[[\"State\",'Abbreviation','pct_access','engagement_index',\n                          'pct_free\/reduced_avg', 'county_connections_ratio_avg', \n                           'pp_total_raw_avg', 'pct_black\/hispanic_avg']].groupby(\n                 by=[\"State\"]).mean(),\n                 on='State',how='left')  \n    \n    #calculating the number of districts studied by state\n    nb_districts_by_state = df1[['State','district_id' ]].groupby(by=['State']).nunique().rename(\n                                    columns={'district_id':'nb districts'})\n    \n    #Adding this numbers of districts studied in our map dataset\n    dff=pd.merge(dff, nb_districts_by_state, on='State',how='left')  \n    \n    #Adding covid data\n    dff=pd.merge(dff,covid_cases.groupby( by=[\"Abbreviation\"]).sum(), on='Abbreviation',how='left')\n    \n    #Plotting\n    fig_map = px.scatter_geo(dff, locationmode='USA-states' ,\n                     locations='Abbreviation',\n                     color=\"pct_access\", # which column to use to set the color of markers\n                     hover_name='State',\n                     hover_data={'Abbreviation':True, \"engagement_index\": ':.0f',\n                                 \"pct_access\":':.2f',\"nb districts\":True,\n                                 'pct_free\/reduced_avg':':.2f', 'county_connections_ratio_avg':':.2f', \n                                 'pp_total_raw_avg':':.2f','pct_black\/hispanic_avg':':.2f',\n                                 'totalTestResultsIncrease':True,'positiveIncrease':True, \n                                 'hospitalizedIncrease':True,'deathIncrease':True} ,\n                     size=\"engagement_index\", # size of markers\n                     scope=\"usa\",\n                     color_continuous_scale=['#d62728', '#bcbd22', '#2ca02c']\n                     \n                    )\n    #paramtering the graph\n    fig_map.update_geos(\n        visible=False, resolution=110, scope=\"usa\",\n        showcountries=True, countrycolor=\"Black\",\n        showsubunits=True, subunitcolor=\"grey\"\n    )\n\n    fig_map.update_layout(\n            autosize=True,\n            margin = dict(\n                    l=0,\n                    r=0,\n                    b=0,\n                    t=0,\n                    autoexpand=False\n                )\n    )\n    \n    \n    ### Covid Test and positive graph\n\n    fig_case_positive = go.Figure()\n    \n    # Covid Test\n    fig_case_positive.add_trace(go.Indicator(\n            mode = \"number\",\n            value = covid_cases.totalTestResultsIncrease.sum(),\n            title=  {\"text\": \"<span style='font-size:20;color:black'>Covid tests<\/span>\"},\n            number={\"font\":{\"size\":20}},\n            domain = {'x': [0, .5], 'y': [0, 1]}))\n\n    # Positive\n    fig_case_positive.add_trace(go.Indicator(\n            mode = \"number\",\n            value = covid_cases.positiveIncrease.sum(),\n            title= {\"text\": \"<span style='font-size:20;color:black'>Positive<\/span>\"},\n            number={\"font\":{\"size\":20}},\n        domain = {'x': [.5, 1], 'y': [0, 1]}))\n\n    #paramtering the graph\n    fig_case_positive.update_layout(\n            autosize=True,\n            margin = dict(\n                    l=20,\n                    r=0,\n                    b=0,\n                    t=20,\n                    autoexpand=True\n                )\n        )\n    \n    ### Hospitalized and deaths graph\n    \n    fig_hospi_death = go.Figure()\n    \n    #Hospitalized\n    fig_hospi_death.add_trace(go.Indicator(\n            mode = \"number\",\n            value = covid_cases.hospitalizedIncrease.sum(),\n            title=  {\"text\": \"<span style='font-size:20;color:black'>Hospitalized<\/span>\"},\n            number={\"font\":{\"size\":20}},\n            domain = {'x': [0, .5], 'y': [0, 1]}))\n    \n    #deaths\n    fig_hospi_death.add_trace(go.Indicator(\n            mode = \"number\",\n            value = covid_cases.deathIncrease.sum(),\n            title= {\"text\": \"<span style='font-size:20;color:black'>Deaths<\/span>\"},\n            number={\"font\":{\"size\":20}},\n        domain = {'x': [.5, 1], 'y': [0, 1]}))\n\n    fig_hospi_death.update_layout(\n            autosize=True,\n            margin = dict(\n                    l=20,\n                    r=0,\n                    b=0,\n                    t=20,\n                    autoexpand=True\n                )\n        )\n    \n    ### Average Connectivity graph\n    \n    fig_avg_conn = go.Figure(go.Indicator(\n        mode = \"number+delta\",\n        value = round(df1['pct_access'].mean(),2)))\n    #paramtering the graph\n    fig_avg_conn.update_layout(\n        template = {'data' : {'indicator': [{\n            'mode' : \"number+delta+gauge\",\n            'delta' : {'reference': round(data['pct_access'].mean(),2), 'relative': True, 'valueformat': '.1%'}}]\n                             }})\n    \n    fig_avg_conn.update_layout(\n            autosize=True,\n            margin = dict(\n                    l=0,\n                    r=0,\n                    b=0,\n                    t=0,\n                    autoexpand=True\n                )\n        )\n    \n    ###Average engagement\n    \n    fig_avg_eng = go.Figure(go.Indicator(\n        mode = \"number+delta\",\n        value = int(df1['engagement_index'].mean())))\n    #paramtering the graph\n    fig_avg_eng.update_layout(\n        template = {'data' : {'indicator': [{\n            'mode' : \"number+delta+gauge\",\n            'delta' : {'reference': int(data['engagement_index'].mean()), 'relative': True, 'valueformat': '.1%'}}]\n                             }})\n    \n    fig_avg_eng.update_layout(\n            autosize=True,\n            margin = dict(\n                    l=0,\n                    r=0,\n                    b=0,\n                    t=0,\n                    autoexpand=True\n                )\n        )\n    \n    ### Connectivt\u00e9 and engagement by time graph\n    \n    #Average of engagement and connectivity by time\n    by_time=df1[['time',\"engagement_index\",'pct_access']].groupby(by=[\"time\"]).mean().reset_index()\n    fig_time = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n    # Add traces connectivity\n    fig_time.add_trace(\n        go.Scatter(x=by_time[\"time\"],\n                   y=by_time[\"pct_access\"].to_numpy().round(2),\n                   name=\"connectivity\",\n                   mode=\"lines+markers\",\n                   marker=dict(\n                       color=connectivity_color,\n                       size=0.2,\n                        line=dict(\n                            width=0.2,\n                            color=connectivity_color\n                        )\n                    )),\n                secondary_y=False,\n    )\n\n    #add trace engagement\n    fig_time.add_trace(\n        go.Scatter(x=by_time[\"time\"],\n                   y=by_time['engagement_index'].astype('int32'),\n                   name=\"engagement\",\n                   mode=\"lines+markers\",\n                   marker=dict(\n                    color=engagement_color,\n                       size=0.2,\n                    line=dict(\n                        color=engagement_color,\n                        width=0.2\n                    ))\n                  ),\n        secondary_y=True,\n    )\n    \n    #paramtering the graph\n    fig_time.update_layout(\n        template='simple_white', #pour mettre un fond blanc\n        autosize=True,\n        margin = dict(\n                    l=0,\n                    r=0,\n                    b=0,\n                    t=0,\n                    autoexpand=True\n                ),\n        showlegend=False\n    )\n    \n    # yaxis parameters\n    fig_time.update_yaxes(title_text=None, secondary_y=False,ticks=\"outside\", \n                     tickwidth=2,tickcolor=connectivity_color)\n    fig_time.update_yaxes(title_text=None, secondary_y=True, ticks=\"outside\", \n                     tickwidth=2, tickcolor=engagement_color)\n    \n    ### Engagement*connectivity by locale graph\n\n    #average of Engagement*connectivity by locale\n    locale= df1[['locale',\"engagement_index\",'pct_access']].groupby(by=[\"locale\"]).mean().dropna().reset_index()\n    #plotting\n    fig_locale = go.Figure(data=[\n        #add trace average engagement\n        go.Bar(name='Average engagement', x=locale['locale'], \n               y=locale[\"engagement_index\"].astype('int32'), \n               text=locale[\"engagement_index\"].astype('int32'),\n              textposition='auto',\n              marker=dict(\n                    color=engagement_color,\n                    line=dict(\n                        color=engagement_color\n                    )\n                )\n              ),\n\n        #add trace average connectivity\n        go.Bar(name='Average Connectivity', x=locale['locale'], \n               y=locale[\"pct_access\"].to_numpy().round(2) * 300, #*300 to make bigger the ticks\n               text=locale[\"pct_access\"].to_numpy().round(2),\n                textposition='outside',\n              marker=dict(\n                    color=connectivity_color,\n                    line=dict(\n                        color=connectivity_color\n                    )\n                )\n              )\n    ])\n    \n    #paramtering the graph\n    fig_locale.update_layout(barmode='group', yaxis=dict(visible=False), \n                       template='simple_white',\n                       autosize=True,\n                       margin = dict(\n                                    l=0,\n                                    r=0,\n                                    b=0,\n                                    t=0,\n                                    autoexpand=True\n                                    ),\n                      legend=dict(\n                            x=0,\n                            y=0.7,\n                            traceorder='normal',\n                            font=dict(\n                                size=12,),\n                            ),\n                       showlegend=False\n                      )\n    \n    #fixing x categories\n    fig_locale.update_xaxes(categoryorder='array', categoryarray= ['Rural','Suburb','Town','City'])\n    \n    ### connectivity \/ engagement by primary_fct\n    \n    #average of connectivity and engagment by primary_fct\n    primary_fct= df1[['primary_fct',\"engagement_index\",'pct_access']].groupby(by=[\"primary_fct\"]).mean().dropna().reset_index()\n    #plotting\n    fig_prim_pct = go.Figure(data=[\n        #add trace engagement\n        go.Bar(name='Average engagement', x=primary_fct['primary_fct'], \n               y=primary_fct[\"engagement_index\"].astype('int32'), \n               text=primary_fct[\"engagement_index\"].astype('int32'),\n                textposition='auto',\n              marker=dict(\n                    color=engagement_color,\n                    line=dict(\n                        color=engagement_color\n                    )\n                )\n              ),\n\n        #add trace connectivity\n        go.Bar(name='Average Connectivity', x=primary_fct['primary_fct'], \n               y=primary_fct[\"pct_access\"].to_numpy().round(2) * 300, # *300 to make bigger the ticks\n               text=primary_fct[\"pct_access\"].to_numpy().round(2),\n                textposition='outside',\n              marker=dict(\n                    color=connectivity_color,\n                    line=dict(\n                        color=connectivity_color\n                    )\n                )\n              )\n    ])\n    #paramtering the graph\n    fig_prim_pct.update_layout(barmode='group', yaxis=dict(visible=False), \n                       template='simple_white',\n                       autosize=True,\n                       margin = dict(\n                                    l=0,\n                                    r=0,\n                                    b=0,\n                                    t=0,\n                                    autoexpand=True\n                                    ),\n                      legend=dict(\n                            x=0,\n                            y=0.7,\n                            traceorder='normal',\n                            font=dict(\n                                size=12,),\n                            ),\n                       showlegend=False\n                      )\n    \n    ### Engagement\/connectivity by pct_black\/hispanic\n    \n    #Average of engagement and connectivity by pct_black\/hispanic\n    black_hispanic=df1[[\"pct_black\/hispanic\",\"engagement_index\",'pct_access']].groupby(\n        by=[\"pct_black\/hispanic\"]).mean().dropna().reset_index()\n\n    #plotting\n    fig_blk_hisp = make_subplots(shared_yaxes=True, rows=1, cols=2)\n    #add trace engagment\n    fig_blk_hisp.add_trace(go.Bar(\n                    x=black_hispanic[\"engagement_index\"].astype('int32'),\n                    y=black_hispanic['pct_black\/hispanic'], orientation='h',\n                    text=black_hispanic[\"engagement_index\"].astype('int32'),\n                    textposition='auto',\n                    marker=dict(\n                            color=engagement_color,\n                            line=dict(\n                                color=engagement_color\n                            )\n                        )),\n                   row=1, col=1\n    )\n    #add trace connectivity\n    fig_blk_hisp.add_trace(go.Bar(\n                x=black_hispanic[\"pct_access\"].to_numpy().round(2) *100,\n                y=black_hispanic['pct_black\/hispanic'], orientation='h',\n                text=black_hispanic[\"pct_access\"].to_numpy().round(2),\n                textposition='auto',\n              marker=dict(\n                        color=connectivity_color,\n                        line=dict(\n                            color=connectivity_color\n                        )\n                    )\n                ),\n                   row=1,col=2\n     )\n    #graph parameters\n    fig_blk_hisp.update_xaxes(showticklabels=False,visible=False)\n    \n    fig_blk_hisp.update_layout( \n                       template='simple_white',\n                       autosize=True,\n                       margin = dict(\n                                    l=0,\n                                    r=0,\n                                    b=0,\n                                    t=0,\n                                    autoexpand=True\n                                    ),\n                       showlegend=False,\n                       yaxis_title=\"% black\/hispanic\"\n                      )\n    \n    ### Best product table: based on engagement index\n    \n    #average of engagement and connectivity by product name sort descending\n    Product_Name=df1[[\"Product Name\",\"engagement_index\",'pct_access']].groupby(\n            by=[\"Product Name\"]).mean().dropna().sort_values([\"engagement_index\",'pct_access'],\n                                                         ascending=False)\n    #Cretaing table \n    fig_prod = go.Figure(data=[go.Table(\n    header=dict(values=['Most used product', 'Average engagement', 'Average connectivity'],\n                fill_color=['paleturquoise',engagement_color, connectivity_color],\n#                 align='center',\n               line_color='darkslategray',\n                font=dict(color=['black', 'black', 'white']),\n               height=40),\n    cells=dict(values=[Product_Name.index,\n                       Product_Name['engagement_index'].map('{:,.2f}'.format),\n                       Product_Name['pct_access'].map('{:,.2f}'.format)],\n               height=30,\n               fill_color='white' ,\n#                align='center',\n              line_color='darkslategray',),\n\n        )\n    ])\n    \n    #table parameters\n    fig_prod.update_layout(\n            autosize=True,\n            margin = dict(\n                    l=0,\n                    r=0,\n                    b=0,\n                    t=0,\n                    autoexpand=False\n                ))\n    \n    return  fig_map,fig_case_positive,fig_hospi_death, fig_avg_conn, fig_avg_eng, fig_time, fig_locale, fig_prim_pct,fig_blk_hisp, fig_prod\n    ","bbb76828":"app.run_server(mode='external')","d96b82b4":"# Introduction","5224210e":"# 3\/ Dashboard with dash","8fd528fc":"#### First we define the dashboard's background image, and the connectivity and engagement colors on graphs","6ec1de3a":"![image.png](attachment:a2fe3ca1-823d-402a-b259-c9b011333467.png)","3aea5cbc":"####  Calculating the average of interval variables, we'll need it later in the dashboard. We won't use df.apply because it's too slow. We're going to use strip, split operations to make it faster","00834f24":"#### Adding covid data from covid tracking api: we're interested by tests, postive cases, hospitalized and deaths","b8dedd1a":"####  We add the abbreviations of states because we will need them to make the map in our dashboard (source: github)","b4e38723":"# LearnPlatform COVID-19 Impact on Digital Learning: business intelligence approach by interractive dashboard","4c7d0386":"#### Dashboard functions: create graphs and make them interractive.\n#### we'll always round pct_access with 2 decimal and 0 decimal for engagement index to make th dashboard more ergonomic","cabe252e":"#### We have reduced data memory size from 13gb to 1gb, 13 time less memory usage !","f53e4bb6":"#### We tried to respond to the issues raised with a business intelligence approach in generation of an application in the form of a dashboard. We see that the application is quite slow because of the volume of data. \n#### If you want to reuse it and deploy it on a larger scale, it might be interesting to use Nosql languages \u200b\u200bto speed up calculations using scalability, or more simply by embedding it in a C language algorithm which is faster than python in calculus.\n#### You can also always add more data on the covid or the students and enrich the hovers on the graphs or improve the design, etc...","5f7c8a59":"#### Concatenate all data in one dataframe","cc0d01ea":"# 2\/ Adding open data ","83e3c649":"# Conclusion","62126c28":"#### To meet the needs for analysis on engagement and connectivity to digital learning products, we are going to have a business intelligence approach. Indeed, we will build a dashboard that will summarize all the information collected, in addition to the open data relevant to our study that we have added. \n\n#### We'll use dash to make the dashboard app and ngrok to deploy it. You will be able to filter the data from the dropdowns at the top and view additional information on a state by passing over it. \n\n#### To solve memory problems, We will use a technique that will make the dataset 13 times smaller in memory.\n\n#### As we go along, we will explain the code as well as why we used such a process to make reading and reusing the code as easy as possible.\n\n#### **To go faster, you can run all the cells and click on the link generated by the 'running application' part at the bottom to directly access the dashboard. Note that due to the volume of data, it may take about 12 min before reaching the generation of the link.**","790ed162":"#### Dropping Nan values for States, because it make errors when consructing map. \n#### We'll consider great groups of url's primary fonction because we have too many values and they are too long","e31d68cd":"# 1\/ Preprocessing","b323538e":"#### Changing column's types to decrease data size","d29d5e47":"#### Reading all tables and and joining them ","2a377d2d":"#### To meet the needs, we will focus our studies on connectivity and engagement that we will relate to the other variables we have. \n#### We will also add the covid data. To deploy the application, we will use ngrok. Thus, once deployed, you will be able to see the dashboard even with any device that has internet access. However, the number of connections per minute is limited with ngrok since it is public.","d63ecf93":" #### Correcting pct_access errors : a pct_access can't be superior to 1 because it's a percentage. So all rows that exceed 1 we be set to 1. There is no negative pct_access","14b70630":"### Dashboard model","87e10b2d":"### Running the app\n#### !!! To open the application, please click on the link generated after executing the following cell\n#### !!! the data volume is big enough so the application will be a bit slow. If the title of the tab is 'updating' it means that it is building the dashboard or updating it\n#### !!! **If the application bug, wait a minute because ngrok only allows 25 connections per minute, and if the bug is still not fixed rerun the code**\n"}}