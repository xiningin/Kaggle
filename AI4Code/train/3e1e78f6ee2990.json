{"cell_type":{"0f505902":"code","be4d4638":"code","3f3a2d57":"code","f71e1032":"code","240d62a9":"code","5142f47c":"code","049c77fc":"code","de5c541e":"code","255efbec":"code","a867b890":"code","7b68b2b3":"code","38f86020":"code","2e08a009":"code","2715845e":"code","30ee336f":"code","f2dccce6":"code","777af86c":"code","c8fcd772":"code","c52ef736":"code","60815e6c":"code","465caa44":"code","d7fd6452":"code","9543ca5d":"code","9e441a2d":"code","03c937b1":"code","dcf64faf":"code","c11879a0":"code","00baa143":"code","393faf8b":"code","5af9541d":"code","1d64bbaa":"code","3516d055":"markdown","498a9e15":"markdown","5ecdafb4":"markdown","1aafd904":"markdown","0a890394":"markdown","2ca67bc3":"markdown","c7b2056a":"markdown","a5039b6d":"markdown","8bfe12fc":"markdown","11795515":"markdown","3fa722ee":"markdown"},"source":{"0f505902":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","be4d4638":"#import data\niris_data = pd.read_csv(\"\/kaggle\/input\/iris\/Iris.csv\")\n#shape of data\niris_data.shape","3f3a2d57":"iris_data.head()","f71e1032":"#we see Id is not important feature so drop it\niris_data.drop('Id', axis=1, inplace=True)\niris_data.head()","240d62a9":"#id column excluded\niris_data.shape","5142f47c":"iris_data.describe()\n#, there are 4 numerical features and data is consistent","049c77fc":"iris_data.select_dtypes(exclude=['object']).columns","de5c541e":"missing_cols = [col for col in iris_data.columns\n                 if iris_data[col].isnull().any()]\nprint(\"missing columns: {}\".format(missing_cols))","255efbec":"categorical_cols = [col for col in iris_data.columns\n                 if iris_data[col].dtypes == 'object']\nprint(\"Categorical columns : {}\".format(categorical_cols))","a867b890":"numerical_cols = [col for col in iris_data.columns\n                 if iris_data[col].dtypes == 'float64']\nprint(\"Numerical columns : {}\".format(numerical_cols))","7b68b2b3":"# Our data is balanced\niris_data['Species'].value_counts()","38f86020":"import matplotlib.pyplot as plt\n#show histogram of features individually\niris_data.hist()\nplt.show()","2e08a009":"#get Unique Values of column Species\niris_data['Species'].unique()","2715845e":"#build Species Dictionary\nspecies_dict= {'Iris-setosa': 0,\n               'Iris-versicolor': 1,\n               'Iris-virginica': 2}\n\n#build colors to species\ncolors = [species_dict[item] for item in iris_data['Species']]\n\n#scatter plot\nscatter_plot = plt.scatter(iris_data['SepalLengthCm'],iris_data['SepalWidthCm'], c=colors)\nplt.xlabel(\"Sepal Length cm\")\nplt.ylabel(\"Sepal Widht cm\")\n\n#add legend\nplt.legend(handles=scatter_plot.legend_elements()[0],\n           labels=species_dict.keys())\nplt.show()\n\n#see there exist no pattern b\/t these features","30ee336f":"#build Species Dictionary\nspecies_dict= {'Iris-setosa': 0,\n               'Iris-versicolor': 1,\n               'Iris-virginica': 2}\n\n#build colors to species\ncolors = [species_dict[item] for item in iris_data['Species']]\n\n#scatter plot\nscatter_plot = plt.scatter(iris_data['PetalLengthCm'],iris_data['PetalWidthCm'], c=colors)\nplt.xlabel(\"Petal Length cm\")\nplt.ylabel(\"Petal Widht cm\")\n\n#add legend\nplt.legend(handles=scatter_plot.legend_elements()[0],\n           labels=species_dict.keys())\nplt.show()\n\n#see these two features are highly correlated and used for modeling","f2dccce6":"#shows pair plot using pandas\npd.plotting.scatter_matrix(iris_data[numerical_cols], alpha=0.2)","777af86c":"#alternative\/better approach = shows pair plot using sns\nimport seaborn as sns\nsns.pairplot(iris_data, hue=\"Species\")","c8fcd772":"#Preparing data\nfeatures= iris_data[['PetalLengthCm','PetalWidthCm']]\ntarget= iris_data['Species']\n\n#split train and test data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test= train_test_split(features, target, \n                                                  random_state= 1,\n                                                  test_size= 0.3,\n                                                  stratify= target)\n#stratify ensures that distribution remains similar in both train and test data","c52ef736":"print(y_train.value_counts())\nprint(y_test.value_counts())","60815e6c":"#modeling\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train, y_train)\n\n#prediction\ny_pred= knn.predict(X_test)","465caa44":"#probability prediction\ny_pred_prob= knn.predict_proba(X_test)\nprint(\"Shows first five predictions probability \\n{}\".format(y_pred_prob[:5]))\nprint(\"\\nShows first five predictions\\n {}\".format(y_pred[:5]))\n\n#As we see our model predicts all correct","d7fd6452":"accuracy= ((y_pred==y_test.values).sum()\/y_test.size)*100\nprint(\"Accuracy = {:,.2f} {}\".format(accuracy, \"%\"))\n\nmodel_score = (knn.score(X_test, y_test))*100\nprint(\"Another accuracy Score = {:,.2f} {}\".format(model_score, \"%\"))","9543ca5d":"from sklearn.metrics import confusion_matrix, r2_score, mean_absolute_error\n#Confusion Matrix\nconfusion_matrix(y_test, y_pred, labels=['Iris-setosa',\n                                         'Iris-versicolor',\n                                         'Iris-virginica'])","9e441a2d":"#also we can visualize the Confusion matrix\nfrom sklearn.metrics import plot_confusion_matrix\nplot_confusion_matrix(knn, X_test, y_test, cmap= plt.cm.Blues)","03c937b1":"#K-fold Cross Validation\nfrom sklearn.model_selection import cross_val_score\nknn_cross_val = KNeighborsClassifier(n_neighbors=3)\ncross_val_score = cross_val_score(knn_cross_val, features, target, cv=5)\n#get average of score\ncross_val_score_multiply_by_100 =(cross_val_score.mean())*100\nprint(\"Average Score of Cross Validtion = {:,.2f} {}\".format(cross_val_score_multiply_by_100,\"%\"))\n\n#we see Our accuracy decreased because of using n_neighbor=3, previous n_neighbor=5","dcf64faf":"#use Grid Search to tune n_neighbors parameter for accuracy\nfrom sklearn.model_selection import GridSearchCV\nknn2 =  KNeighborsClassifier()\nparam_grid = {'n_neighbors':np.arange(2,10)}\nknn_grid_search = GridSearchCV(knn2,param_grid, cv=5)\nknn_grid_search.fit(features, target)\n\n#best parameter\nbest_param = knn_grid_search.best_params_\nprint(\"Best parameter = {}\\n\".format(best_param))\n\n#score\nscore = (knn_grid_search.best_score_)*100\nprint(\"Best score = {:,.2f}{}\".format(score, \"%\"))\n","c11879a0":"knn_final = KNeighborsClassifier(n_neighbors=best_param['n_neighbors'])\nknn_final.fit(features, target)\ny_pred_final = knn_final.predict(X_test)\nmodel_score = (knn_final.score(X_test, y_test))*100\nprint(\"Another accuracy Score = {:,.2f} {}\".format(model_score, \"%\"))","00baa143":"output = pd.DataFrame({'Species': y_pred_final})\noutput.to_csv('iris_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","393faf8b":"X= iris_data[['PetalLengthCm','SepalLengthCm']]\ny= iris_data['Species']\n\n#split train and test data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test= train_test_split(X, y, \n                                                  random_state= 1,\n                                                  test_size= 0.3,\n                                                  stratify= y)\nmodel_1 = KNeighborsClassifier(n_neighbors=4)\nmodel_1.fit(X_train, y_train)\n\n#prediction\ny_pred_1= model_1.predict(X_test)\n\n#score\nmodel_score_1 = (model_1.score(X_test, y_test))*100\nprint(\"Accuracy Score = {:,.2f} {}\".format(model_score_1, \"%\"))","5af9541d":"X_all= iris_data[['PetalLengthCm','PetalWidthCm', 'SepalLengthCm', 'SepalWidthCm']]\ny= iris_data['Species']\n\n#split train and test data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test= train_test_split(X_all, y, \n                                                  random_state= 1,\n                                                  test_size= 0.3,\n                                                  stratify= y)\nmodel_all = KNeighborsClassifier(n_neighbors=4)\nmodel_all.fit(X_train, y_train)\n\n#prediction\ny_pred_all= model_all.predict(X_test)\n\n#score\nmodel_score_all = (model_all.score(X_test, y_test))*100\nprint(\"Accuracy Score = {:,.2f} {}\".format(model_score_all, \"%\"))","1d64bbaa":"X_2= iris_data[['SepalLengthCm', 'SepalWidthCm']]\ny= iris_data['Species']\n\n#split train and test data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test= train_test_split(X_2, y, \n                                                  random_state= 1,\n                                                  test_size= 0.3,\n                                                  stratify= y)\nmodel_2 = KNeighborsClassifier(n_neighbors=4)\nmodel_2.fit(X_train, y_train)\n\n#prediction\ny_pred_2= model_2.predict(X_test)\n\n#score\nmodel_score_2 = (model_2.score(X_test, y_test))*100\nprint(\"Accuracy Score = {:,.2f} {}\".format(model_score_2, \"%\"))","3516d055":"# Data Visualization","498a9e15":"scatter plt b\/t sepal_length against Sepal_width","5ecdafb4":"1. * Another Model with features **PetalLengthCm and SepalLengthCm","1aafd904":"# Pararmeter Tuning","0a890394":"# Data Modeling","2ca67bc3":" model with features SepalLengthCm and SepalWidthCm","c7b2056a":"# Model Evaluation","a5039b6d":"Model with all features","8bfe12fc":"# **Data Analysis**","11795515":"scatter plt b\/t petal_length against Petal_width","3fa722ee":"# Final Model"}}