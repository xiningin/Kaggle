{"cell_type":{"8be2dd9d":"code","e278f20e":"code","119e81ea":"code","cd7b11d6":"code","5a64c1f0":"code","83afa745":"code","5cc877cd":"code","9f5513ba":"code","4fa020a9":"code","134ffb11":"code","22a0f9cc":"code","051b8a96":"code","6a193c09":"code","d3ac0929":"code","01cd32f3":"code","9975b614":"code","29bfc52a":"code","bb843335":"markdown","5e3e2a4a":"markdown","bc984f02":"markdown"},"source":{"8be2dd9d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e278f20e":"df=pd.read_csv(\"..\/input\/predict-test-scores-of-students\/test_scores.csv\")\ndf","119e81ea":"df.shape","cd7b11d6":"df.isna().sum()","5a64c1f0":"df.dtypes","83afa745":"df1=df.copy()","5cc877cd":"df1.drop([\"school\",\"student_id\"],inplace=True,axis=\"columns\") #these features are not relevant","9f5513ba":"df1.head()","4fa020a9":"import seaborn as sns\nimport matplotlib.pyplot as plt","134ffb11":"df1=pd.get_dummies(df1,drop_first=True)","22a0f9cc":"df1.shape","051b8a96":"df1.columns","6a193c09":"x=df1.drop(\"posttest\",axis=\"columns\")\ny=df1[\"posttest\"]","d3ac0929":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.20, random_state=100)","01cd32f3":"# importing the required module to build the model\nfrom sklearn.linear_model import LinearRegression\nmodel=LinearRegression()\nmodel.fit(x_train,y_train)","9975b614":"print(\"Training accuracy is \"+ str(model.score(x_train,y_train)))","29bfc52a":"print(\"Testing accuracy is \"+ str(model.score(x_test,y_test)))","bb843335":"#### Splitting datasets ","5e3e2a4a":"#### Multiple linear regression","bc984f02":"#### Accuracy "}}