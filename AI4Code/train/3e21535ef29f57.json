{"cell_type":{"ef41e489":"code","1409eebb":"code","e7f01484":"code","1597e94e":"code","9263aacc":"code","79d2e620":"code","087a53c4":"code","72964408":"code","2580f6a1":"code","e61c05b2":"code","907c7f99":"code","78f96b30":"code","90210804":"code","c4f06391":"code","a1a047d9":"code","ab140fe9":"code","32963002":"code","e1ca677e":"code","9ba147d2":"code","f4948ef2":"code","14a37b02":"code","2b0b0eba":"code","d9d8a7a6":"code","fdf116a5":"code","d480da7a":"code","08b743ef":"code","9592a516":"code","d40e6be3":"code","6c447fbc":"code","38f6d7b9":"code","86b0a1ca":"code","000216d1":"code","531d7c1c":"code","0c61bda9":"code","74be9418":"code","b7129407":"code","c1ac7c96":"code","3445236e":"code","bd56fc26":"code","ed5b75fc":"code","13b6fc54":"code","2062f172":"code","043f5911":"code","2b48cfdb":"code","ff14f89f":"code","3a5defc8":"code","b4eefdd7":"code","3f66437b":"code","b1953ec0":"code","f66d68d5":"code","ca482e40":"code","0a067b78":"code","2c4aaedb":"code","dc828faf":"code","6996690c":"code","2710971f":"code","fa732f2c":"code","5fe33560":"code","d96fac2b":"code","ece276a8":"code","c47d893b":"code","a22d377f":"code","221c0822":"code","7fcfaf20":"code","95987954":"code","6dbe22da":"code","d157d4e7":"code","205b44bf":"code","2f676ccf":"code","cfaf297e":"code","3b9aff8f":"code","828868f6":"markdown","d1bd6d9f":"markdown","09adcc26":"markdown","fc20a36e":"markdown","ebfb7275":"markdown","a2f9cf33":"markdown","a2ed55d7":"markdown","b2165598":"markdown","02c5c602":"markdown","6090c940":"markdown","9f70acb4":"markdown","90d2f4a6":"markdown","8b8d835c":"markdown","dd7d47ab":"markdown","df6421d1":"markdown","73106b63":"markdown","f599d117":"markdown","74849ddf":"markdown","6c05044f":"markdown","32c3f1c5":"markdown","a4826e38":"markdown","4f2f1440":"markdown","5622f4af":"markdown","e1cc6a00":"markdown","d1f10970":"markdown","bd678016":"markdown","5238edb6":"markdown","e48a316c":"markdown"},"source":{"ef41e489":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pylab as plot","1409eebb":"data=pd.read_csv(\"..\/input\/titanic\/train.csv\")","e7f01484":"data.shape","1597e94e":"data.head(10)","9263aacc":"plt.figure(figsize=(10,10))\nsns.heatmap(data.isnull(), yticklabels=False, cbar=False)","79d2e620":"# Check for any other unusable values\npd.isnull(data).sum()","087a53c4":"data['Age']=data['Age'].fillna(data['Age'].median())","72964408":"data.describe()","2580f6a1":"data['Died'] = 1-data['Survived']","e61c05b2":"data.groupby('Sex').agg('sum')[['Survived','Died']].plot(kind='bar',figsize=(25, 7), stacked = True);","907c7f99":"data.groupby('Sex').agg('mean')[['Survived','Died']].plot(kind='bar', figsize=(25, 7), stacked=True);","78f96b30":"figure = plt.figure(figsize=(25,7))\nsns.violinplot(x='Sex', y='Age', hue='Survived', \n               data=data, \n               split=True, palette={0: 'r', 1:'g'});","90210804":"figure = plt.figure(figsize=(25,7))\nplt.hist([data[data['Survived']==1]['Fare'],\n          data[data['Survived']==0]['Fare']],\n            stacked=True,\n            bins=50, label=['Survived','Dead'])\nplt.xlabel('Fare')\nplt.ylabel('Number of passengers')\nplt.legend();","c4f06391":"plt.figure(figsize=(25,7))\nax=plt.subplot()\n\nax.scatter(data[data['Survived']==1]['Age'],\n          data[data['Survived']==1]['Fare'],\n          c='green', s=data[data['Survived']==1]['Fare']);\n\nax.scatter(data[data['Survived']==0]['Age'],\n          data[data['Survived']==0]['Fare'],\n          c='red', s=data[data['Survived']==0]['Fare']);","a1a047d9":"ax = plt.subplot()\nax.set_ylabel('Average fare')\ndata.groupby('Pclass').mean()['Fare'].plot(kind='bar',figsize=(25,7),ax=ax);","ab140fe9":"plt.figure(figsize=(25,7))\nsns.violinplot(x='Embarked', y='Fare', hue='Survived', data=data, split=True, palette={0:'r', 1:'g'});","32963002":"def status(feature):\n    print('Processing', feature, ': Ok')","e1ca677e":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest  = pd.read_csv('..\/input\/titanic\/test.csv' )\ntarget = train.Survived\ntrain.drop(['Survived'], 1, inplace=True)","9ba147d2":"def get_combined_data():\n    combined = train.append(test)\n    combined.reset_index(inplace=True)\n    \n    return combined","f4948ef2":"combined = get_combined_data()","14a37b02":"combined.drop(['index','PassengerId'],inplace=True,axis=1)","2b0b0eba":"combined.shape","d9d8a7a6":"combined.head()","fdf116a5":"titles = set()\nfor name in data['Name']:\n    titles.add(name.split(',')[1].split('.')[0].strip())","d480da7a":"titles","08b743ef":"Title_Dictionary = {\n    'Capt':'Officer',\n    'Col' :'Officer',\n    'Don' :'Royalty',\n    'Dr':'Officer',\n    'Jonkheer':'Royalty',\n    'Lady':'Royalty',\n    'Major':'Officer',\n    'Master':'Master',\n    'Miss':'Miss',\n    'Mlle':'Miss',\n    'Mme':'Mrs',\n    'Mr':'Mr',\n    'Mrs':'Mrs',\n    'Ms':'Mrs',\n    'Rev':'Officer',\n    'Sir':'Royalty',\n    'the Countess':'Royalty'\n}\n\ndef get_titles():\n    combined['Title'] = combined['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())\n    \n    combined['Title'] = combined.Title.map(Title_Dictionary)\n    status('Title')\n    return combined","9592a516":"combined=get_titles()","d40e6be3":"combined.head()","6c447fbc":"grouped_train=combined.iloc[:891].groupby(['Sex','Pclass','Title'])\ngrouped_median_train=grouped_train.median()\ngrouped_median_train=grouped_median_train.reset_index()[['Sex','Pclass','Title','Age']]","38f6d7b9":"grouped_median_train.head()","86b0a1ca":"def fill_age(row):\n    condition = (\n    (grouped_median_train['Sex']==row['Sex']) & \n    (grouped_median_train['Title']==row['Title']) & \n    (grouped_median_train['Pclass']==row['Pclass']))\n    return grouped_median_train[condition]['Age'].values[0]\n\ndef process_age():\n    global combined\n    \n    combined['Age']=combined.apply(lambda row: fill_age(row) if np.isnan(row['Age']) else row['Age'], axis=1)\n    status('age')\n    return combined","000216d1":"combined = process_age()","531d7c1c":"def process_names():\n    global combined\n    combined.drop('Name', axis=1, inplace=True)\n    \n    titles_dummies=pd.get_dummies(combined['Title'],prefix='Title')\n    combined=pd.concat([combined, titles_dummies], axis=1)\n    \n    combined.drop('Title', axis=1, inplace= True)\n    \n    status('names')\n    return combined","0c61bda9":"combined = process_names()","74be9418":"combined.head()","b7129407":"def process_fares():\n    global combined\n    combined.Fare.fillna(combined.iloc[:891].Fare.mean(), inplace=True)\n    status('Fare')\n    return combined","c1ac7c96":"combined=process_fares()","3445236e":"def process_embarked():\n    global combined\n    \n    combined.Embarked.fillna('S', inplace=True)\n    embarked_dummies = pd.get_dummies(combined['Embarked'],prefix='Embarked')\n    combined=pd.concat([combined, embarked_dummies], axis=1)\n    combined.drop('Embarked', axis=1, inplace=True)\n    status('embarked')\n    return combined","bd56fc26":"combined = process_embarked()","ed5b75fc":"combined.head()","13b6fc54":"train_cabin=set()\ntest_cabin=set()\n\nfor c in combined.iloc[:891]['Cabin']:\n    try:\n        train_cabin.add(c[0])\n    except:\n        train_cabin.add('U')\n\nfor c in combined.iloc[891:]['Cabin']:\n    try:\n        test_cabin.add(c[0])\n    except:\n        test_cabin.add('U')","2062f172":"train_cabin","043f5911":"test_cabin","2b48cfdb":"def process_cabin():\n    global combined\n    \n    combined.Cabin.fillna('U',inplace=True)\n    combined['Cabin']=combined['Cabin'].map(lambda c: c[0])\n    \n    cabin_dummies = pd.get_dummies(combined['Cabin'],prefix='Cabin')\n    combined = pd.concat([combined, cabin_dummies], axis=1)\n    \n    combined.drop('Cabin', axis=1, inplace=True)\n    status('cabin')\n    return combined","ff14f89f":"combined = process_cabin()","3a5defc8":"combined.head()","b4eefdd7":"def process_sex():\n    global combined\n    \n    combined['Sex']=combined['Sex'].map({'male':1, 'female':0})\n    status('Sex')\n    \n    return combined","3f66437b":"combined = process_sex()","b1953ec0":"def process_pclass():\n    global combined\n    \n    pclass_dummies = pd.get_dummies(combined['Pclass'], prefix='Pclass')\n    combined = pd.concat([combined, pclass_dummies], axis=1)\n    combined.drop('Pclass', axis=1, inplace=True)\n    \n    status('Pclass')\n    return combined","f66d68d5":"combined = process_pclass()","ca482e40":"def cleanTicket(ticket):\n    ticket = ticket.replace('.','')\n    ticket = ticket.replace('\/','')\n    ticket = ticket.split()\n    ticket = map(lambda t : t.strip(), ticket)\n    ticket = list(filter(lambda t : not t.isdigit(), ticket))\n    if len(ticket) > 0:\n        return ticket[0]\n    else:\n        return 'XXX'","0a067b78":"tickets = set()\nfor t in combined['Ticket']:\n    tickets.add(cleanTicket(t))","2c4aaedb":"print(len(tickets))","dc828faf":"def process_ticket():\n    global combined\n    \n    def cleanTicket(ticket):\n        ticket = ticket.replace('.','')\n        ticket = ticket.replace('\/','')\n        ticket = ticket.split()\n        ticket = map(lambda t : t.strip(), ticket)\n        ticket = list(filter(lambda t : not t.isdigit(), ticket))\n        if len(ticket) > 0:\n            return ticket[0]\n        else:\n            return 'XXX'\n    \n    combined['Ticket']=combined['Ticket'].map(cleanTicket)\n    tickets_dummies = pd.get_dummies(combined['Ticket'], prefix='Ticket')\n    combined = pd.concat([combined, tickets_dummies], axis=1)\n    combined.drop('Ticket', inplace=True, axis=1)\n    \n    status('Ticket')\n    return combined\n    ","6996690c":"combined = process_ticket()","2710971f":"def process_family():\n    global combined\n    \n    combined['FamilySize']=combined['Parch']+combined['SibSp'] + 1\n    \n    combined['Singleton'] = combined['FamilySize'].map(lambda s:1 if s == 1 else 0)\n    combined['SmallFamily'] = combined['FamilySize'].map(lambda s:1 if 2 <= s <= 4 else 0)\n    combined['LargeFamily'] = combined['FamilySize'].map(lambda s:1 if 5 <= s else 0)\n    status('Family')\n    return combined","fa732f2c":"combined = process_family()","5fe33560":"combined.shape","d96fac2b":"combined.head()","ece276a8":"from sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble.gradient_boosting import GradientBoostingClassifier\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV","c47d893b":"def compute_score(clf, X, y, scoring='accuracy'):\n    xval = cross_val_score(clf, X, y, cv = 5, scoring=scoring)\n    return np.mean(xval)","a22d377f":"def recover_train_test_target():\n    global combined\n    \n    targets = pd.read_csv('..\/input\/titanic\/train.csv', usecols=['Survived'])['Survived'].values\n    train = combined.iloc[:891]\n    test = combined.iloc[891:]\n    \n    return train, test, targets","221c0822":"train, test, targets = recover_train_test_target()","7fcfaf20":"clf = RandomForestClassifier(n_estimators=50, max_features='sqrt')\nclf = clf.fit(train, targets)","95987954":"features = pd.DataFrame()\nfeatures['feature'] = train.columns\nfeatures['importance'] = clf.feature_importances_\nfeatures.sort_values(by=['importance'], ascending=True, \n                     inplace=True)\nfeatures.set_index('feature', inplace=True)","6dbe22da":"features.plot(kind='barh', figsize=(20, 25));","d157d4e7":"model = SelectFromModel(clf, prefit=True)\ntrain_reduced = model.transform(train)\ntrain_reduced.shape","205b44bf":"test_reduced = model.transform(test)\ntest_reduced.shape","2f676ccf":"logreg = LogisticRegression()\nlogreg_cv = LogisticRegressionCV()\nrf = RandomForestClassifier()\ngboost = GradientBoostingClassifier()\n\nmodels = [logreg, logreg_cv, rf, gboost]","cfaf297e":"for model in models:\n    print ('Cross-validation of : {0}'.format(model.__class__))\n    score = compute_score(clf=model, X=train_reduced, y=targets, scoring='accuracy')\n    print ('CV score = {0}'.format(score))\n    print ('****')","3b9aff8f":"run_gs = False\n\nif run_gs:\n    parameter_grid = {\n                 'max_depth' : [4, 6, 8],\n                 'n_estimators': [50, 10],\n                 'max_features': ['sqrt', 'auto', 'log2'],\n                 'min_samples_split': [2, 3, 10],\n                 'min_samples_leaf': [1, 3, 10],\n                 'bootstrap': [True, False],\n                 }\n    forest = RandomForestClassifier()\n    cross_validation = StratifiedKFold(n_splits=5)\n\n    grid_search = GridSearchCV(forest,\n                               scoring='accuracy',\n                               param_grid=parameter_grid,\n                               cv=cross_validation,\n                               verbose=1\n                              )\n\n    grid_search.fit(train, targets)\n    model = grid_search\n    parameters = grid_search.best_params_\n\n    print('Best score: {}'.format(grid_search.best_score_))\n    print('Best parameters: {}'.format(grid_search.best_params_))\n    \nelse: \n    parameters = {'bootstrap': False, 'min_samples_leaf': 3, 'n_estimators': 50, \n                  'min_samples_split': 10, 'max_features': 'sqrt', 'max_depth': 6}\n    \n    model = RandomForestClassifier(**parameters)\n    model.fit(train, targets)","828868f6":"##### Processing Cabin","d1bd6d9f":"#### Checking missing values in each variable","09adcc26":"##### Embarkation - Survival","fc20a36e":"### 3. Modeling","ebfb7275":"##### Processing Sex","a2f9cf33":"Passenger with more expensive ticket are more likely to survive","a2ed55d7":"##### Processing Embarked","b2165598":"##### Trying different base models","02c5c602":"##### Processing Ticket","6090c940":"##### Fare - Survival","9f70acb4":"### Hyperparameters tuning","90d2f4a6":"### Data Visualization","8b8d835c":"###### Some observations\n1. There are total of 891 passengers in our training set.<br>\n2. The age feature is missing approximately 20% of its values.<br> \n3. Cabin feature has most of its value missing.<br>\n4. Embarkes feature is missing small amount of its values.<br>","dd7d47ab":"### 2. Feature Engineering","df6421d1":"##### Processing Names","73106b63":"##### Processing Fares","f599d117":"From the above plot we can see female passengers a more likely to survive","74849ddf":"##### Processing Family","6c05044f":"##### Gender - Survival","32c3f1c5":"##### Age - Survival","a4826e38":"Younger male tend to survive<br>\nThe age doesn't seems to have a direct impact on the female survival","4f2f1440":"##### Processing Pclass","5622f4af":"The size of the circles is proportional to the ticket fare.\n\nOn the x-axis, we have the ages and the y-axis, we consider the ticket fare.\n\nWe can observe different clusters:<br>\n\n1. Large green dots between x=20 and x=45: adults with the largest ticket fares<br>\n2. Small red dots between x=10 and x=45, adults from lower classes on the boat<br>\n3. Small greed dots between x=0 and x=7: these are the children that were saved<br>\n\nAs a matter of fact, the ticket fare correlates with the class as we see it in the chart below.","e1cc6a00":"##### Age - Fare - Survival","d1f10970":"### Feature Selection","bd678016":"### 1. Exploratory Data Analysis","5238edb6":"##### Extracting the passengers title","e48a316c":"##### Processing age"}}