{"cell_type":{"3ef18183":"code","789ff087":"code","b0db043d":"code","c98d06d4":"code","525b2a12":"code","835fc590":"code","61db917e":"code","a550e27a":"code","274218a1":"code","15d8defb":"code","d2ed830c":"code","0df7682f":"code","c7758597":"code","e5615bf0":"code","dfe98f45":"code","d21fc781":"code","561df312":"code","9d93bc78":"code","69ffb911":"code","a04df2e5":"code","f94fb276":"code","fe88c4e2":"code","5c1453ad":"code","73b010e5":"code","25db776b":"code","e8616d9d":"code","6d09b7d1":"code","59c758bb":"code","4b1db0e1":"code","cefe1c4b":"code","09a6a6cf":"code","df591ab3":"code","b33f69c2":"code","2076d4c2":"code","bb0013b1":"code","e9641aab":"markdown","41f04ef1":"markdown","e06be2c1":"markdown","6a8ff115":"markdown","0676bef0":"markdown","ee5a7ad6":"markdown","170cb1a9":"markdown","08b7ae20":"markdown","d300ba67":"markdown","54b57207":"markdown","8dd302b6":"markdown","beddfbd4":"markdown","96e4e4c2":"markdown","cd2b2153":"markdown"},"source":{"3ef18183":"import pandas as pd\nimport numpy as np\nimport seaborn as sns","789ff087":"from datetime import timedelta","b0db043d":"import matplotlib.pyplot as plt","c98d06d4":"orders = pd.read_csv('..\/input\/brazilian-ecommerce\/olist_orders_dataset.csv')","525b2a12":"payments = pd.read_csv('..\/input\/brazilian-ecommerce\/olist_order_payments_dataset.csv')","835fc590":"orders.head()","61db917e":"payments.head()","a550e27a":"orders.dtypes","274218a1":"orders[['order_purchase_timestamp',\n       'order_approved_at', 'order_delivered_carrier_date',\n       'order_delivered_customer_date', 'order_estimated_delivery_date']] = orders[['order_purchase_timestamp',\n       'order_approved_at', 'order_delivered_carrier_date',\n       'order_delivered_customer_date', 'order_estimated_delivery_date']]\\\n        .apply(lambda x: pd.to_datetime(x,errors = 'coerce', format='%Y-%m-%d %H:%M:%S'))\\\n        .apply(lambda x: x.dt.date)\\\n        .astype('datetime64')","15d8defb":"orders.isna().sum()","d2ed830c":"orders = orders.dropna(subset=['order_delivered_carrier_date'])","0df7682f":"last_date = orders['order_delivered_carrier_date'].max() + timedelta(days=1)\nlast_date","c7758597":"df = orders.merge(payments, how='inner', on=['order_id'])","e5615bf0":"rfm = df.groupby('customer_id').agg(\n                 r = ('order_delivered_carrier_date', lambda x: (last_date - x.max()).days),\n                 f = ('payment_sequential', 'count'),\n                 m = ('payment_value', 'sum'))","dfe98f45":"rfm.head()","d21fc781":"rfm.describe([0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99])","561df312":"plt.figure(figsize=(12, 6))\nplt.title('Recency (days from last order)')\nsns.distplot(rfm.r, kde=False, bins = 50);","9d93bc78":"plt.figure(figsize=(12, 6))\nplt.title('Monetary')\nsns.distplot(rfm.m[rfm.m < np.quantile(a = rfm.m, q=0.99)], kde = False);","69ffb911":"rfm['f'].value_counts(normalize=True)*100","a04df2e5":"quants = {'r': rfm.r.quantile([.33, .66]).values,\n          'f': np.array([1, 2]),\n          'm': rfm.m.quantile([.33, .66]).values\n         }","f94fb276":"quant_table = pd.DataFrame (quants, columns = ['r','f','m'])","fe88c4e2":"#quantiles bounds for segmentation\nquant_table","5c1453ad":"def rfm_segment(x, col):\n    if col in ['f', 'm']:\n        if x <= quant_table[col].iloc[0]:\n            return(1)\n        if (x > quant_table[col].iloc[0]) and (x <= quant_table[col].iloc[1]):\n            return(2)\n        else:\n            return(3)\n    if col in ['r']:\n        if x <= quant_table[col].iloc[0]:\n            return(3)\n        if (x > quant_table[col].iloc[0]) and (x <= quant_table[col].iloc[1]):\n            return(2)\n        else:\n            return(1)    ","73b010e5":"for col in rfm.columns:\n    rfm[f'{col}_segment'] = rfm[col].apply(lambda x: rfm_segment(x, col))","25db776b":"rfm['rfm_score'] = rfm['r_segment'].apply(str) + rfm['f_segment'].apply(str) + rfm['m_segment'].apply(str)","e8616d9d":"rfm","6d09b7d1":"rfm_agg = rfm.reset_index().groupby(['rfm_score','r_segment','f_segment','m_segment'], as_index = False).agg({'customer_id':'count'})","59c758bb":"rfm_agg","4b1db0e1":"def segmentize(x):\n    if x in ['333', '323']:\n        return('BEST')\n    if x in ['223','233']:\n        return('BIG SPENDERS')\n    if x in ['111','112','113']:\n        return('CHURNED')\n    if x in ['321','322','331','332']:\n        return('LOYAL')\n    if x in ['311','312','313']:\n        return('NEWEST')\n    if x in ['231','232']:\n        return('ONCE FREQUENT')\n    if x in ['131','132','133']:\n        return('ONCE LOYAL')\n    if x in ['211','212','213']:\n        return('RECENT ONE-TIMERS')\n    if x in ['221','222']:\n        return('NORMAL')\n    if x in ['121','122','123']:\n        return('SOON TO CHURN')    ","cefe1c4b":"rfm['customer_type'] = rfm['rfm_score'].apply(segmentize)","09a6a6cf":"rfm_agg['customer_type'] = rfm_agg['rfm_score'].apply(segmentize)","df591ab3":"rfm.reset_index().groupby(['customer_type']).agg({'r':'mean', 'f':'mean','m':'mean'})","b33f69c2":"group_per = rfm.reset_index().groupby(['customer_type'], as_index = False).agg({'customer_id':'count'}).rename(columns={'customer_id':'users'})\ngroup_per['users_per'] = group_per['users'] * 100 \/ group_per.users.sum()\ngroup_per.sort_values(by='users_per', ascending = False)","2076d4c2":"fig=plt.figure(figsize=(12, 6), dpi= 80, facecolor='w', edgecolor='k')\nrfm.groupby(['customer_type']).agg('f').mean().plot(kind='bar')\nplt.show()","bb0013b1":"fig=plt.figure(figsize=(12, 6), dpi= 80, facecolor='w', edgecolor='k')\nrfm.groupby(['rfm_score']).agg('f').mean().plot(kind='bar')\nplt.show()","e9641aab":"97% of users are one-time buyers\nHence, classic RFM approach where we use quantiles to segementize users is nor really applicable to recency dimension. We will use 1, 2 and 3+ buys to segmentize by frequency","41f04ef1":"Monetary has a very typical look with the majority of datapoints grouped in the beginning of the graph and with a long right tail  \nAlso, the .99 quantile upper limit is 13x times larger than its lower limit (dataset has big outliers)","e06be2c1":"Let's convert dates to datetime format","6a8ff115":"Recency is more or less equally distributed with two visually defined segments - those who placed orders in the last year and those who didn't","0676bef0":"- About 1\\3 of users are already churned and lost\n- About 2\\3 of users are very recent newcomers or one-time buyers. It seems like we have a large traffic that doesn't convert to repeating orders very well\n- Only 3% of users are returning and active customers","ee5a7ad6":"Lets have a first look at our data, datatypes, check for NA values","170cb1a9":"Another interesting insight: out current premium segment(333) has a lower buy frequency than our previous, now churned, premium segment (133). The same can be said for current vs previous frequent buyers in lower monetary segments. We recommend futher investigation into what happened to decrease the average frequency of orders overtime.","08b7ae20":"# RFM Analysis","d300ba67":"We're going to take the last order day + 1 day as the current date for analysis","54b57207":"Let's have a look at the distribution of recency, monetary and frequency values","8dd302b6":"Importing necessary libraries and reading the data","beddfbd4":"This is a solution to the RFM challenge suggested in Telegram channel https:\/\/t.me\/renat_alimbekov\n-----------------------------------------","96e4e4c2":"There are NaN values in the column that we use in our calculations. Let's drop them in this analysis","cd2b2153":"Let's join order data with payments and aggregate recency, frequency and monetary columns"}}