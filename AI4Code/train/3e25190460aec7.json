{"cell_type":{"52c3d5fd":"code","d6a4bf5a":"code","da86b8ec":"code","0c839c92":"code","ac160904":"code","4f29ea95":"code","5104f389":"code","7cd14ad1":"code","3d5337de":"code","cacddebc":"code","0c644242":"code","6ebb5ecf":"code","efbcb2b8":"code","d0c83ae3":"code","9ecab8eb":"code","da6e7b87":"code","1efdc339":"code","9aa04d49":"code","4f4d818e":"markdown","70988fc2":"markdown","d795ef27":"markdown","674881b6":"markdown","60d5d9ff":"markdown","080b3e04":"markdown","a5fb2cbc":"markdown"},"source":{"52c3d5fd":"import pandas as pd\n\nfrom collections import Counter, OrderedDict\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom wordcloud import WordCloud, STOPWORDS\nfrom PIL import Image\n\nimport re\n\nimport numpy as np\n\nimport requests\nfrom io import BytesIO","d6a4bf5a":"df = pd.read_csv('..\/input\/bob-dylan-songs\/clear.csv')","da86b8ec":"df.head()","0c839c92":"df.tail()","ac160904":"df[df.duplicated()]","4f29ea95":"def string_to_lower(series_name:str, data_frame=df):\n    \"\"\"this function takes name of pandas series from data frame\n    changing all words to lowercase in this series \n    and saves it in place in data frame\n    \n    arguments:\n    series_name: str\n    data_frame: pandas DataFrame (by defult df)\n    \"\"\"\n    \n    df[series_name] = df[series_name].apply(\n        lambda x: ' '.join(w for w in str(x). lower().split()))\n\n\n","5104f389":"string_columns = df.select_dtypes(exclude=[np.number]).columns\n\nfor column in string_columns:\n    string_to_lower(column)","7cd14ad1":"url = \"https:\/\/raw.githubusercontent.com\/Cloudy17g35\/bob_dylan_songs\/main\/dylan_photo.jpeg\"","3d5337de":"\ndef word_cloud_from_shape(column_name:str, data_frame=df, url=url):\n    \"\"\"this function takes column name from data fram\n    returns wordcloud object with shape based on image(given as url)\"\"\"\n    \n    \n    clear = []\n\n    for lyric in data_frame[column_name]:\n\n        words = lyric.split()\n\n        for word in words:\n\n            word = word.replace('\u2019', \"'\").strip().replace(' ', '').replace(',', '')\n            if word not in STOPWORDS:\n                clear.append(word)\n    \n    freq_table = Counter(clear)\n    \n    \n    url = url\n    response = requests.get(url)\n    img = Image.open(BytesIO(response.content))\n\n\n    dylan_mask = np.array(img)\n\n    wc = WordCloud(background_color='black', max_words= 1000, mask=dylan_mask)\n\n    \n    \n    wc.generate_from_frequencies(freq_table)\n\n    plt.figure(figsize=(20,20))\n\n    plt.xticks([])\n    plt.yticks([])\n    plt.imshow(wc, interpolation='nearest')\n    plt.show()","cacddebc":"for column in string_columns:\n    print(column)\n    word_cloud_from_shape(column)","0c644242":"def frequency_for_year(year: int):\n    \"\"\"this function takes integer(year when song was published)\n    returns freq_table of words from songs from based on this particular year\n    \n    arguments: year: int\n    \n    returns: frequency table: dict\"\"\"\n    \n    unique_years: list = set(df['release_year'].values)\n    \n    # if year is not in years\n    \n    if year not in unique_years:\n        return f\"there's no songs from year {year}\"\n    \n    temp_df = df[df['release_year'] == year]\n    result = []\n    \n    \n    # iterating overt lyrics\n    for lyric in temp_df['lyrics']:\n    \n        words = lyric.split()\n        for word in words:\n            word = word.replace('\u2019', \"'\").strip().replace(' ', '').replace(',', '')\n                \n            if word not in STOPWORDS:\n                result.append(word)\n                    \n    return Counter(result)","6ebb5ecf":"def make_wordcloud_for_year(frequency: dict):\n    \n    \n    \"\"\"This function takes frequency of words saved in dictionary\n    returns wordcloud object\"\"\"\n    \n    \n    wc = WordCloud(max_font_size=40,width=500, height=200).generate_from_frequencies(frequency_for_year(year))\n    \n    plt.figure(figsize=(20, 20))\n    plt.imshow(wc, interpolation='bilinear')\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()","efbcb2b8":"# making loop and showing the wordcloud for every year since 1961 to 2020\nfor year in range(1960, 2021):\n    \n    try:\n        print(year)\n        make_wordcloud_for_year(frequency_for_year(year))\n        \n    except AttributeError:\n        print(f\"theres no song from this year!\")","d0c83ae3":"def frequency_for_years(start: int, end: int):\n    \"\"\"this function takes two integers start and end\n    \n    returns freq_table of words from year between start and end\n    \n    arguments:\n    \n    start: int - first year\n    end: int - last year\n    \n    returns: frequency table: dict\"\"\"\n    \n    temp_df = df[df['release_year'].between(start, end)]\n    result = []\n    \n    \n    for lyric in temp_df['lyrics']:\n    \n        words = lyric.split()\n        for word in words:\n            word = word.replace('\u2019', \"'\").strip().replace(' ', '').replace(',', '')\n                \n            if word not in STOPWORDS:\n                result.append(word)\n                    \n    return Counter(result)\n    ","9ecab8eb":"def make_wordcloud_for_decade(frequency):\n    \n    \n    \"\"\"this function takes one paramer it's frequency of words in\n    particular decade\n    arguments:\n    frequency: dict - dictionary with frequencies of words\"\"\"\n    \n    \n    wc = WordCloud(max_font_size=40,width=500, height=200).generate_from_frequencies((frequency))\n    \n    plt.figure(figsize=(20, 20))\n    plt.imshow(wc, interpolation='bilinear')\n    plt.xticks([])\n    plt.yticks([])\n    plt.show()","da6e7b87":"start: int = 1960\nend: int = 1970\n\nfor x in range(6):\n    print(f\"{start} - {end}\")\n    make_wordcloud_for_decade(frequency_for_years(start, end))\n    start, end = end, end + 10\n\n","1efdc339":"distribution = df['release_year'].value_counts().sort_index()","9aa04d49":"fig = px.bar(x=distribution.index, y=distribution.values)\n\nfig.update_layout(font=dict(family='Lato', size=18, color='white'), \n                  title=dict(text='<b>Bob Dylan songs in years 1961- 2020<b>',\n                           font=dict(size=30), x=.5), \n                  paper_bgcolor= 'black', plot_bgcolor='black',\n                 xaxis = dict(title='Year of release', showgrid=False),\n                 yaxis=dict(title= 'number_of_songs', showgrid=False))","4f4d818e":"## 1. Wordclouds","70988fc2":"# Bob Dylan songs 1961 - 2020","d795ef27":"## 2 . SONGS DISTRIBUTION BY YEARS","674881b6":"This dataset is duplicates free","60d5d9ff":"\n**This dataset contains songs from years between 1961 to 2020 written by Bob Dylan.**\n\n\n**There are 4 columns:**\n\n* release_year - year when song was released first time,\n* album - name of the album where track occurs,\n* title - title of the song,\n* lyrics - lyrics of the track\n\n**Acknowledgements**\n\n\nThis dataset contains only songs that Bob Dylan himself has written and published.\nThere's many songs that Bob Dylan only covered so I didn't include them because he's not the original author.\nFor instance album World Gone Wrong contains only old folks songs.\n\n\n**Inspiration**\n\n\nI'm great Bob Dylan fan. I listen to his songs almost every day from many years.\nI also play them and sing them so now I decided to make dataset and play with them on kaggle as well.","080b3e04":"I also wanna mention - of course it's not all Bob Dylan songs - there might be more I don't know.\n\n**For instance:**\n\n\nI didn't include Wanted Man - written by Bob Dylan but played mostly by Johnny Cash. There's one video of Bob Dylan play this song with Johhny Cash:\n\n\n[video](https:\/\/www.youtube.com\/watch?v=iiRMfb3Z9hg)\n\namazing version by the way... \n\nanyway:\n\nLove Is Just Four Letter Word - song written by Bob Dylan but never occur on his albums or lives so I didn't include it\n\n\nAnd I'm sure there's more, more songs that Dylan written but we don't know about them because Bob didn't want to publish them.\n","a5fb2cbc":"Let's see distribution of songs for each year:"}}