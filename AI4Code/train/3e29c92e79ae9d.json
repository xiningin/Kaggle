{"cell_type":{"340c05e5":"code","c87de561":"code","cc1e3ea6":"code","c63d91ab":"code","fd332b8f":"code","1042a2c6":"code","467970c2":"code","62c55fff":"code","d9ed0135":"code","6fc460a8":"code","50068f6e":"code","8b6a629f":"code","746f505a":"code","d0bea6e0":"code","95f5075d":"code","6521b49d":"code","da74c3fd":"code","99cf6a4c":"code","a562cf71":"code","ad85cc9e":"code","d3ba930d":"code","391dd885":"code","b0fe7aa9":"code","1ab0a8bf":"code","47ceee67":"code","105cc12d":"markdown","5b378152":"markdown","ce42f5e9":"markdown","09429bf2":"markdown","c52d0c12":"markdown","84cdbd6f":"markdown","b768a91c":"markdown","c578f48f":"markdown","5adcefbf":"markdown","915865f2":"markdown","dbe0c2e9":"markdown","0fd547e4":"markdown","750d1b13":"markdown","c7f3fa95":"markdown"},"source":{"340c05e5":"import os\nimport re\nimport csv\nimport time\nimport urllib\nimport zipfile\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport networkx as nx\nimport plotly.express as px\nimport plotly.offline as py\nfrom bs4 import BeautifulSoup\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nfrom sklearn import preprocessing\nfrom urllib.request import urlopen\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.model_selection import train_test_split\nsns.set(style='white',palette = 'Set3',context = 'talk')","c87de561":"if os.path.exists(\"marvel-wikia-data.csv\"):\n    os.remove(\"marvel-wikia-data.csv\")\nmarvel = pd.read_csv('..\/input\/fivethirtyeight-comic-characters-dataset\/marvel-wikia-data.csv')\nmarvel.head()","cc1e3ea6":"if os.path.exists(\"dc-wikia-data.csv\"):\n    os.remove(\"dc-wikia-data.csv\")\ndc = pd.read_csv('..\/input\/fivethirtyeight-comic-characters-dataset\/dc-wikia-data.csv')\ndc.head()","c63d91ab":"dcdist = dc['SEX'].value_counts()\nmarveldist = marvel['SEX'].value_counts()\ndctrace = go.Pie(labels = dcdist.index, values = dcdist.values, name = 'DC', domain = {\"column\": 0})\nmarveltrace = go.Pie(labels = marveldist.index, values = marveldist.values, name = 'Marvel', domain = {\"column\": 1})\nlayout = go.Layout(title = 'Gender Distributions of DC and Marvel Respectively', width = 750, grid = {\"rows\": 1, \"columns\": 2})\npy.iplot(go.Figure(data = [dctrace, marveltrace], layout = layout))","fd332b8f":"dcdist = dc['ALIGN'].value_counts()\nmarveldist = marvel['ALIGN'].value_counts()\ndctrace = go.Bar(x = dcdist.index, y = dcdist.values, name = 'DC', marker=dict(color='rgb(255,163,63)'))\nmarveltrace = go.Bar(x = marveldist.index, y = marveldist.values, name = 'Marvel', marker=dict(color='rgb(146,205,40)'))\npy.iplot(go.Figure(data = [dctrace, marveltrace], layout = go.Layout(title = 'Character Distributions', width=600)))","1042a2c6":"dcdist = dc['ID'].value_counts()\nmarveldist = marvel['ID'].value_counts()\ndctrace = go.Pie(labels = dcdist.index, values = dcdist.values, name = 'DC', domain = {\"column\": 0}, hole = 0.3)\nmarveltrace = go.Pie(labels = marveldist.index, values = marveldist.values, name = 'Marvel', domain = {\"column\": 1}, hole = 0.3)\nlayout = go.Layout(title = 'Identity Distributions', width = 900, grid = {\"rows\": 1, \"columns\": 2}, annotations = [\n         {\"font\": {\"size\": 20}, \"showarrow\": False, \"text\": \"DC\", \"x\": 0.21, \"y\": 0.5 },\n         {\"font\": {\"size\": 20}, \"showarrow\": False, \"text\": \"Marvel\", \"x\": 0.82, \"y\": 0.5 }])\npy.iplot(go.Figure(data = [dctrace, marveltrace], layout = layout))","467970c2":"dcdist = dc['ALIVE'].value_counts() \nmarveldist = marvel['ALIVE'].value_counts()\ndctrace = go.Bar(x = dcdist.index, y = dcdist.values, name = 'DC', marker=dict(color='rgb(20,61,89)'))\nmarveltrace = go.Bar(x = marveldist.index, y = marveldist.values, name = 'Marvel', marker=dict(color='rgb(244,180,26)'))\npy.iplot(go.Figure(data = [dctrace, marveltrace], layout = go.Layout(title = 'Mortality Distribution', width=600, barmode='stack')))","62c55fff":"hightrace  = go.Scatter(x=marvel.Year, y=marvel.APPEARANCES, name = \"Marvel Appearances\", line = dict(color = '#17BECF'), opacity = 0.8)\nlowtrace = go.Scatter(x=dc.YEAR, y=dc.APPEARANCES, name = \"DC Appearances\", line = dict(color = '#7F7F7F'), opacity = 0.8)\nlayout = dict(title='Appearances with respect to Origin year', width = 750,xaxis=dict\n(rangeselector=dict(buttons= list([dict(count=1, label='1Y',step='year', stepmode='backward'),\ndict(count=6, label='6Y',step='year',stepmode='backward'),dict(step='all')])),rangeslider=dict(visible = True),type='date'))\npy.iplot(dict(data= [hightrace ,lowtrace], layout=layout))","d9ed0135":"dc['comics']= 'Top 3 DC Characters'\ndctop3 = dc.truncate(before=-1, after=2)\nFG = nx.from_pandas_edgelist(dctop3, source='comics', target='name', edge_attr=True)\nnx.draw_networkx(FG, with_labels=True)","6fc460a8":"marvel['comics'] = 'Top 3 Marvel Characters'\nmarveltop3 = marvel.truncate(before=-1, after=2)\nFG = nx.from_pandas_edgelist(marveltop3, source='comics', target='name', edge_attr=True)\nnx.draw_networkx(FG, with_labels=True)","50068f6e":"marvel = marvel.drop(columns = \"comics\")\ndc = dc.drop(columns= \"comics\")\nmarvelheroes = marvel.loc[marvel['ALIGN'] == \"Good Characters\"].head(10)\nmarvelvillains = marvel.loc[marvel['ALIGN'] == \"Bad Characters\"].head(10)\ndcheroes = dc.loc[dc['ALIGN'] == \"Good Characters\"].head(10)\ndcvillains = dc.loc[dc['ALIGN'] == \"Bad Characters\"].head(10)","8b6a629f":"def clean(x):\n    x.name = x.name.apply(lambda x: x.split('(')[0])\n    cols = ('ID','ALIGN','EYE','HAIR','SEX','ALIVE')\n    for c in cols:\n       x[c]=  x[c].fillna('Unknown')\n       x[c]=  x[c].apply(lambda x: x.split(' ')[0])\nclean(marvelheroes)\nclean(marvelvillains)\nclean(dcheroes)\nclean(dcvillains)","746f505a":"plt.subplots(1,2,figsize=(18,6))\nplt.subplots_adjust(wspace =0.3)\nplt.subplot(121)\nsns.boxenplot(x='APPEARANCES', y='HAIR',data= dcheroes ,hue='EYE').set_title('Top Appearance of Heroes in DC')\nplt.subplot(122)\nsns.boxenplot(x='APPEARANCES', y='HAIR',data= dcvillains ,hue='EYE').set_title('Top Appearance of Villains in DC')","d0bea6e0":"plt.subplots(1,2,figsize=(18,6))\nplt.subplots_adjust(wspace =0.3)\nplt.subplot(121)\nsns.boxenplot(x='APPEARANCES', y='HAIR',data = marvelheroes ,hue='EYE').set_title('Top Appearance of Heroes in Marvel')\nplt.subplot(122)\nsns.boxenplot(x='APPEARANCES', y='HAIR',data = marvelvillains ,hue='EYE').set_title('Top Appearance of Villians in Marvel')","95f5075d":"dcsi = dc.loc[dc['ID'] == \"Secret Identity\"]\nmarvelsi = marvel.loc[marvel['ID'] == \"Secret Identity\"]\ndcdist = dcsi['ALIGN'].value_counts()\nmarveldist = marvelsi['ALIGN'].value_counts()\ndctrace = go.Pie(labels = dcdist.index, values = dcdist.values, name = 'DC', domain = {\"column\": 0}, hole = 0.3)\nmarveltrace = go.Pie(labels = marveldist.index, values = marveldist.values, name = 'Marvel', domain = {\"column\": 1}, hole = 0.3)\nlayout = go.Layout(title = 'Secret Identity', width = 900, grid = {\"rows\": 1, \"columns\": 2}, annotations = [\n         {\"font\": {\"size\": 20}, \"showarrow\": False, \"text\": \"DC\", \"x\": 0.21, \"y\": 0.5 },\n         {\"font\": {\"size\": 20}, \"showarrow\": False, \"text\": \"Marvel\", \"x\": 0.82, \"y\": 0.5 }])\npy.iplot(go.Figure(data = [dctrace, marveltrace], layout = layout))","6521b49d":"dcdead = dc.loc[dc['ALIVE'] == \"Deceased Characters\"]\nmarveldead = marvel.loc[marvel['ALIVE'] == \"Deceased Characters\"]\ndcdist = dcdead['ALIGN'].value_counts()\nmarveldist = marveldead['ALIGN'].value_counts()\ndctrace = go.Pie(labels = dcdist.index, values = dcdist.values, name = 'DC', domain = {\"column\": 0}, hole = 0.3)\nmarveltrace = go.Pie(labels = marveldist.index, values = marveldist.values, name = 'Marvel', domain = {\"column\": 1}, hole = 0.3)\nlayout = go.Layout(title = 'Deceased Characters', width = 900, grid = {\"rows\": 1, \"columns\": 2}, annotations = [\n         {\"font\": {\"size\": 20}, \"showarrow\": False, \"text\": \"DC\", \"x\": 0.21, \"y\": 0.5 },\n         {\"font\": {\"size\": 20}, \"showarrow\": False, \"text\": \"Marvel\", \"x\": 0.82, \"y\": 0.5 }])\npy.iplot(go.Figure(data = [dctrace, marveltrace], layout = layout))","da74c3fd":"dctc = dc.loc[dc['SEX'] == \"Transgender Characters\"].name\nfor i in dctc:\n    print(i)\n    temp = i.replace(\" \", \"_\")\n    dclink = 'https:\/\/dc.fandom.com\/wiki\/'+temp\n    html = urlopen(dclink)\n    bs = BeautifulSoup(html, 'html.parser')\n    il = bs.find('img', {'src':re.compile('.jpg')})['src']\n    urllib.request.urlretrieve(il,\"img.jpg\")\n    plt.imshow(mpimg.imread('img.jpg'))\n    plt.axis('off')\n    plt.show()\n    os.remove(\"img.jpg\")","99cf6a4c":"marvelgc = marvel.loc[marvel['SEX'] == \"Genderfluid Characters\"].name\nfor i in marvelgc:\n    print(i)\n    temp = i.replace(\" \", \"_\")\n    marvellink = 'https:\/\/marvel.fandom.com\/wiki\/'+temp\n    html = urlopen(marvellink)\n    bs = BeautifulSoup(html, 'html.parser')\n    il = bs.find('img', {'src':re.compile('.jpg')})['src']\n    urllib.request.urlretrieve(il,\"img.jpg\")\n    plt.imshow(mpimg.imread('img.jpg'))\n    plt.axis('off')\n    plt.show()\n    os.remove(\"img.jpg\")","a562cf71":"dcnames = dc.name\nco = 0\narr = []\n# str = input(\"Enter DC Character name that you are searching for : \").lower()\nstr = \"bruce\"\n# setting str = \"bruce\" because kaggle doesnt support user input\nfor i in dcnames :\n    li = i.lower()\n    if str in li :\n        co = co + 1\n        if co == 1 :\n            print(\"Did you mean ? :\")\n        print(co,i)\n        arr.append(i)\ntime.sleep(1)\n# ch = int(input(\"Enter Your Choice : \"))\nch = 2\n# setting ch = 2 because kaggle doesnt support user input\ndcname = arr[ch-1]\nprint(\"Name :\",dcname)\nprint(\"Image :- \")\ntemp = dcname.replace(\" \", \"_\")\ndclink = 'https:\/\/dc.fandom.com\/wiki\/'+temp\nhtml = urlopen(dclink)\nbs = BeautifulSoup(html, 'html.parser')\nil = bs.find('img', {'src':re.compile('.jpg')})['src']\nurllib.request.urlretrieve(il,\"img.jpg\")\nplt.imshow(mpimg.imread('img.jpg'))\nplt.axis('off')\nplt.show()\nos.remove(\"img.jpg\")\nprint(\"Find out more about this DC character here : \",dclink)","ad85cc9e":"marvelnames = marvel.name\nco = 0\narr = []\n# str = input(\"Enter Marvel Character name that you are searching for : \").lower()\nstr = \"vision\"\n# setting str = \"vision\" because kaggle doesnt support user input\nfor i in marvelnames :\n    li = i.lower()\n    if str in li :\n        co = co + 1\n        if co == 1 :\n            print(\"Did you mean ? :\")\n        print(co,i)\n        arr.append(i)\ntime.sleep(1)\n# ch = int(input(\"Enter Your Choice : \"))\nch = 2\n# setting ch = 2 because kaggle doesnt support user input\nmarvelname = arr[ch-1]\nprint(\"Name :\",marvelname)\nprint(\"Image :- \")\ntemp = marvelname.replace(\" \", \"_\")\nmarvellink = 'https:\/\/marvel.fandom.com\/wiki\/'+temp\nhtml = urlopen(marvellink)\nbs = BeautifulSoup(html, 'html.parser')\nil = bs.find('img', {'src':re.compile('.jpg')})['src']\nurllib.request.urlretrieve(il,\"img.jpg\")\nplt.imshow(mpimg.imread('img.jpg'))\nplt.axis('off')\nplt.show()\nos.remove(\"img.jpg\")\nprint(\"Find out more about this Marvel character here : \",marvellink)","d3ba930d":"dcrand = dc.sample().name\nfor i in dcrand:\n    print(\"Name : \",i)\n    temp = i.replace(\" \", \"_\")\n    dclink = 'https:\/\/dc.fandom.com\/wiki\/'+temp\n    html = urlopen(dclink)\n    bs = BeautifulSoup(html, 'html.parser')\n    il = bs.find('img', {'src':re.compile('.jpg')})['src']\n    urllib.request.urlretrieve(il,\"img.jpg\")\n    plt.imshow(mpimg.imread('img.jpg'))\n    plt.axis('off')\n    plt.show()\n    os.remove(\"img.jpg\")\n    print(\"Find out more about this DC character here : \",dclink)","391dd885":"marvelrand = marvel.sample().name\nfor i in marvelrand:\n    print(\"Name : \",i)\n    temp = i.replace(\" \", \"_\")\n    marvellink = 'https:\/\/marvel.fandom.com\/wiki\/'+temp\n    html = urlopen(marvellink)\n    bs = BeautifulSoup(html, 'html.parser')\n    il = bs.find('img', {'src':re.compile('.jpg')})['src']\n    urllib.request.urlretrieve(il,\"img.jpg\")\n    plt.imshow(mpimg.imread('img.jpg'))\n    plt.axis('off')\n    plt.show()\n    os.remove(\"img.jpg\")\n    print(\"Find out more about this Marvel character here : \",marvellink)","b0fe7aa9":"dc.drop('urlslug', axis=1, inplace=True)\nmarvel.drop('urlslug', axis=1, inplace=True)\ndc.drop('EYE', axis=1, inplace=True)\nmarvel.drop('EYE', axis=1, inplace=True)\ndc.drop('HAIR', axis=1, inplace=True)\nmarvel.drop('HAIR', axis=1, inplace=True)\ndc.drop('FIRST APPEARANCE', axis=1, inplace=True)\nmarvel.drop('FIRST APPEARANCE', axis=1, inplace=True)\ndc.drop('name', axis=1, inplace=True)\nmarvel.drop('name', axis=1, inplace=True)","1ab0a8bf":"dc['ALIGN'].replace('Good Characters',2, inplace = True)\ndc['ALIGN'].replace('Bad Characters',1, inplace = True)\ndc['ALIGN'].replace('Neutral Characters',3, inplace = True)\ndc['ALIGN'].replace('Reformed Criminals',4, inplace = True)\ndc['SEX'].replace('Male Characters', 2, inplace = True)\ndc['SEX'].replace('Female Characters', 1, inplace = True)\ndc['SEX'].replace('Genderless Characters', 3, inplace = True)\ndc['SEX'].replace('Transgender Characters', 4, inplace = True)\ndc['ALIVE'].replace('Living Characters', 1, inplace = True)\ndc['ALIVE'].replace('Deceased Characters', 0, inplace = True)\ndc['ID'].replace('Secret Identity', 2, inplace = True)\ndc['ID'].replace('Public Identity', 1, inplace = True)\ndc['ID'].replace('Identity Unknown', 3, inplace = True)\ndc['GSM'].replace('Bisexual Characters', 1, inplace = True)\ndc['GSM'].replace('Homosexual Characters', 2, inplace = True)\ndc.replace(np.nan, 0,inplace=True)\ndc.ALIVE = dc.ALIVE.astype(int)\n\ngsm = dc['GSM'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\ngsm_scaled = min_max_scaler.fit_transform(gsm)\ndc['GSM'] = pd.DataFrame(gsm_scaled)\n\nid = dc['ID'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\nid_scaled = min_max_scaler.fit_transform(id)\ndc['ID'] = pd.DataFrame(id_scaled)\n\nsex = dc['SEX'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\nsex_scaled = min_max_scaler.fit_transform(sex)\ndc['SEX'] = pd.DataFrame(sex_scaled)\n\nalign = dc['ALIGN'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\nalign_scaled = min_max_scaler.fit_transform(align)\ndc['ALIGN'] = pd.DataFrame(align_scaled)\n\npage_id = dc['page_id'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\npage_id_scaled = min_max_scaler.fit_transform(page_id)\ndc['page_id'] = pd.DataFrame(page_id_scaled)\n\napp = dc['APPEARANCES'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\napp_scaled = min_max_scaler.fit_transform(app)\ndc['APPEARANCES'] = pd.DataFrame(app_scaled)\n\nyear = dc['YEAR'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\nyear_scaled = min_max_scaler.fit_transform(year)\ndc['YEAR'] = pd.DataFrame(year_scaled)\n\nprint(\"Co-relation between mortality of characters and their non-hetrosexual preferences = \",dc['ALIVE'].corr(dc['GSM']))\n\ntrainX, testX, trainY, testY = train_test_split(dc[['GSM', 'SEX', 'ALIGN','ID']], dc['ALIVE'], test_size = 0.3)\n\ndtc = DecisionTreeClassifier()\ndtc.fit(trainX, trainY)\naccuracy = dtc.score(testX, testY)\nprint(\"Decision Tree Classifier Accuracy = \",accuracy)\n\nlr = LogisticRegressionCV()\nlr.fit(trainX, trainY)\naccuracy = lr.score(testX, testY)\nprint(\"Logistic Regression CV Accuracy = \",accuracy)\n\nkNN = KNeighborsClassifier()\nkNN.fit(trainX, trainY)\naccuracy = kNN.score(testX, testY)\nprint(\"K Neighbors Classifier Accuracy = \",accuracy)","47ceee67":"marvel['ALIGN'].replace('Good Characters',2, inplace = True)\nmarvel['ALIGN'].replace('Bad Characters',1, inplace = True)\nmarvel['ALIGN'].replace('Neutral Characters',3, inplace = True)\nmarvel['SEX'].replace('Male Characters', 2, inplace = True)\nmarvel['SEX'].replace('Female Characters', 1, inplace = True)\nmarvel['SEX'].replace('Genderfluid Characters', 3, inplace = True)\nmarvel['SEX'].replace('Agender Characters', 4, inplace = True)\nmarvel['ALIVE'].replace('Living Characters', 1, inplace = True)\nmarvel['ALIVE'].replace('Deceased Characters', 0, inplace = True)\nmarvel['ID'].replace('Secret Identity', 2, inplace = True)\nmarvel['ID'].replace('Public Identity', 1, inplace = True)\nmarvel['ID'].replace('No Dual Identity', 3, inplace = True)\nmarvel['ID'].replace('Known to Authorities Identity', 4, inplace = True)\nmarvel['GSM'].replace('Bisexual Characters', 1, inplace = True)\nmarvel['GSM'].replace('Transvestites', 2, inplace = True)\nmarvel['GSM'].replace('Homosexual Characters', 3, inplace = True)\nmarvel['GSM'].replace('Pansexual Characters', 4, inplace = True)\nmarvel['GSM'].replace('Transgender Characters', 5, inplace = True)\nmarvel['GSM'].replace('Genderfluid Characters', 6, inplace = True)\nmarvel.replace(np.nan, 0,inplace=True)\nmarvel.ALIVE = marvel.ALIVE.astype(int)\n\ngsm = marvel['GSM'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\ngsm_scaled = min_max_scaler.fit_transform(gsm)\nmarvel['GSM'] = pd.DataFrame(gsm_scaled)\n\nid = marvel['ID'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\nid_scaled = min_max_scaler.fit_transform(id)\nmarvel['ID'] = pd.DataFrame(id_scaled)\n\nsex = marvel['SEX'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\nsex_scaled = min_max_scaler.fit_transform(sex)\nmarvel['SEX'] = pd.DataFrame(sex_scaled)\n\nalign = marvel['ALIGN'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\nalign_scaled = min_max_scaler.fit_transform(align)\nmarvel['ALIGN'] = pd.DataFrame(align_scaled)\n\npage_id = marvel['page_id'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\npage_id_scaled = min_max_scaler.fit_transform(page_id)\nmarvel['page_id'] = pd.DataFrame(page_id_scaled)\n\napp = marvel['APPEARANCES'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\napp_scaled = min_max_scaler.fit_transform(app)\nmarvel['APPEARANCES'] = pd.DataFrame(app_scaled)\n\nyear = marvel['Year'].values.reshape(-1,1)\nmin_max_scaler = preprocessing.MinMaxScaler()\nyear_scaled = min_max_scaler.fit_transform(year)\nmarvel['Year'] = pd.DataFrame(year_scaled)\n\nprint(\"Co-relation between mortality of characters and their non-hetrosexual preferences = \",marvel['ALIVE'].corr(marvel['GSM']))\n\ntrainX, testX, trainY, testY = train_test_split(marvel[['GSM', 'SEX', 'ALIGN','ID']], marvel['ALIVE'], test_size = 0.3)\n\ndtc = DecisionTreeClassifier()\ndtc.fit(trainX, trainY)\naccuracy = dtc.score(testX, testY)\nprint(\"Decision Tree Classifier Accuracy = \",accuracy)\n\nlr = LogisticRegressionCV()\nlr.fit(trainX, trainY)\naccuracy = lr.score(testX, testY)\nprint(\"Logistic Regression CV Accuracy = \",accuracy)\n\nkNN = KNeighborsClassifier()\nkNN.fit(trainX, trainY)\naccuracy = kNN.score(testX, testY)\nprint(\"K Neighbors Classifier Accuracy = \",accuracy)","105cc12d":"Transgender Characters in DC with their images extracted from the internet","5b378152":"Some Machine Learning Algorithms applied on DC Characters","ce42f5e9":"Suprisingly Iron Man (Tony Stark) is not present in the Top 3 Marvel Characters according to the data extracted from internet.","09429bf2":"In Marvel more villians are deceased as proportional to DC \\\nThat's why DC is darker than Marvel becuase it has more villians living as proportional to Marvel","c52d0c12":"Some Machine Learning Algorithms applied on Marvel Characters","84cdbd6f":"Let's see If you know this random Marvel character ","b768a91c":"In both Marvel and DC more of the Bad Characters have secret identites which totally makes sense because if you are running from the justice then you probably don\u2019t want to give up your home address.","c578f48f":"In Marvel :- \\\nHeroes mostly have blond hair with blue eyes and occasionaly other appearences \\\nVillians dont have any specefic appearence","5adcefbf":"Genderfluid Characters in Marvel with their images extracted from the internet","915865f2":"In DC :- \\\nHeroes mostly have black hair with blue eyes and sometimes blond hair with brown eyes \\\nVillains mostly have red eyes with any hair color or sometimes brown hair with blue eyes","dbe0c2e9":"Let's see If you know this random DC character ","0fd547e4":"Search for a DC Character","750d1b13":"Search for a Marvel Character","c7f3fa95":"Dropping columns with useless data before applying algorithms"}}