{"cell_type":{"d6159625":"code","a54e8d36":"code","68367461":"code","d655d3ee":"code","dbee4f11":"code","a4053236":"code","ffeab251":"code","43e01461":"code","5a7b632f":"code","a2ceef57":"code","8e3a369b":"code","2b71375e":"code","965c54a6":"markdown"},"source":{"d6159625":"import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import GridSearchCV","a54e8d36":"df = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv')\ndf.head()","68367461":"def weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division((x['total_revenue'] * 100), x['measurable_impressions']) * 1000 , axis=1)","d655d3ee":"X_train = df.loc[df['date'] <= '2019-06-21 00:00:00'].drop(columns=['date', 'total_revenue', 'order_id' , 'line_item_type_id', \n                                                                    'integration_type_id' , 'revenue_share_percent'])\nX_train = X_train[(X_train['CPM'] >= 0) & (X_train['CPM'] <= X_train['CPM'].quantile(.95))]\ny_train = X_train['CPM']\nX_train.drop(columns=['CPM'], inplace=True)\n\nX_test = df.loc[df['date'] > '2019-06-21 00:00:00'].drop(columns=['date', 'total_revenue', 'order_id' , 'line_item_type_id', \n                                                                  'integration_type_id' , 'revenue_share_percent'])\nX_test = X_test[(X_test['CPM'] >= 0) & (X_test['CPM'] <= X_test['CPM'].quantile(.95))]\ny_test = X_test['CPM']\nX_test.drop(columns=['CPM'], inplace=True)","dbee4f11":"reg = xgb.XGBRegressor(random_state=0)\nreg.fit(X_train, y_train, eval_metric='rmse')\npred = reg.predict(X_test)\nmean_squared_error(y_test, pred)","a4053236":"# xg_reg = xgb.XGBRegressor(random_state=0)\n# params = {\n#         'subsample': [0.8, 1.0],\n#         'colsample_bytree': [0.8, 1.0],\n#         'max_depth': [3, 5],\n#         'n_estimators': [100, 300]\n#         }\n\n# grid_search = GridSearchCV(xg_reg, params, cv=5, n_jobs=-1, verbose=True, scoring='neg_mean_squared_error')\n\n# grid_search.fit(X_train, y_train)","ffeab251":"# grid_search.best_params_\n# {'colsample_bytree': 1.0,\n#  'max_depth': 5,\n#  'n_estimators': 300,\n#  'subsample': 1.0}","43e01461":"# mean_squared_error(y_test, grid_search.best_estimator_.predict(X_test))\n# 4715.629061662551","5a7b632f":"# xg_reg = xgb.XGBRegressor(random_state=0)\n# params = {\n#         'max_depth': [3, 5, 10],\n#         'n_estimators': [100, 300, 500]\n#         }\n\n# grid_search = GridSearchCV(xg_reg, params, cv=5, n_jobs=-1, verbose=True, scoring='neg_mean_squared_error')\n\n# grid_search.fit(X_train, y_train)","a2ceef57":"# grid_search.best_params_\n# {'max_depth': 10, 'n_estimators': 100}","8e3a369b":"# mean_squared_error(y_test, grid_search.best_estimator_.predict(X_test))\n# 4415.274793428106","2b71375e":"reg = xgb.XGBRegressor(random_state=0, max_depth=10, n_estimators=100)\nreg.fit(X_train, y_train, eval_metric='rmse')\npred = reg.predict(X_test)\nmean_squared_error(y_test, pred)","965c54a6":"# MSE = 4517"}}