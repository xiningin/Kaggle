{"cell_type":{"2b0fa063":"code","078593a4":"code","26c3ac00":"code","9c57840f":"code","266c6457":"code","fd5eeb09":"code","bfd69acf":"code","52ddb9c7":"code","977b3ef4":"code","b589a2eb":"code","cea35139":"code","8485fb63":"code","c9fa30e6":"code","233c6ddc":"code","cd0bdab6":"code","733d0464":"code","ad7e19b1":"code","5ef8324b":"code","544e6ea5":"code","461880bc":"code","f3d31155":"code","6e960dff":"code","ea79cf2c":"code","d9625891":"code","9a340492":"markdown","dc9a31ff":"markdown","ac6ac983":"markdown"},"source":{"2b0fa063":"# Regular EDA and plotting libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n## Models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\n\n## Model evaluators\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import precision_score, recall_score, f1_score\nfrom sklearn.metrics import plot_roc_curve","078593a4":"df_train = pd.read_csv('..\/input\/titanic\/train.csv')\ndf_train.head()","26c3ac00":"def preprocess_data(df):\n    \n    # Fill the numeric rows with median\n    for label, content in df.items():\n        if pd.api.types.is_numeric_dtype(content):\n            if pd.isnull(content).sum():\n                # Add a binary column which tells us if the data was missing or not\n                df[label+\"_is_missing\"] = pd.isnull(content)\n                # Fill missing numeric values with median\n                df[label] = content.fillna(content.median())\n    \n        # Filled categorical missing data and turn categories into numbers\n        if not pd.api.types.is_numeric_dtype(content):\n            df[label+\"_is_missing\"] = pd.isnull(content)\n            # We add +1 to the category code because pandas encodes missing categories as -1\n            df[label] = pd.Categorical(content).codes+1\n    \n    return df","9c57840f":"df_train = preprocess_data(df_train)\ndf_train.head()","266c6457":"plt.figure(figsize=(20, 6))\nsns.heatmap(df_train.corr(), annot=True)","fd5eeb09":"# Everything except Survived variable\nX = df_train.drop(\"Survived\", axis=1)\n\n# Survived variable\ny = df_train.Survived.values","bfd69acf":"# Training and test split\n\n# Random seed for reproducibility\nnp.random.seed(42)\n\n# Split into train & test set\nX_train, X_test, y_train, y_test = train_test_split(X, # independent variables \n                                                    y, # dependent variable\n                                                    test_size = 0.2) # percentage of data to use for test set","52ddb9c7":"# Put models in a dictionary\nmodels = {\"KNN\": KNeighborsClassifier(),\n          \"Logistic Regression\": LogisticRegression(), \n          \"Random Forest\": RandomForestClassifier(),\n         \"XGBoost\": XGBClassifier()}\n\n# Create function to fit and score models\ndef fit_and_score(models, X_train, X_test, y_train, y_test):\n    \"\"\"\n    Fits and evaluates given machine learning models.\n    models : a dict of different Scikit-Learn machine learning models\n    X_train : training data\n    X_test : testing data\n    y_train : labels assosciated with training data\n    y_test : labels assosciated with test data\n    \"\"\"\n    # Random seed for reproducible results\n    np.random.seed(42)\n    # Make a list to keep model scores\n    model_scores = {}\n    # Loop through models\n    for name, model in models.items():\n        # Fit the model to the data\n        model.fit(X_train, y_train)\n        # Evaluate the model and append its score to model_scores\n        model_scores[name] = model.score(X_test, y_test)\n    return model_scores","977b3ef4":"model_scores = fit_and_score(models=models,\n                             X_train=X_train,\n                             X_test=X_test,\n                             y_train=y_train,\n                             y_test=y_test)\nmodel_scores","b589a2eb":"# Fitting the model \nrf_model = RandomForestClassifier()\nrf_model.fit(X_train, y_train)","cea35139":"# Evaluting the model\ny_preds = rf_model.predict(X_test)","8485fb63":"cm = confusion_matrix(y_test, y_preds)","c9fa30e6":"sns.heatmap(cm, annot=True)","233c6ddc":"# Improving the model with SearchCV\n\n# Different RandomForestClassifier hyperparameters\nrf_grid = {\"n_estimators\": np.arange(10, 1000, 50),\n           \"max_depth\": [None, 3, 5, 10],\n           \"min_samples_split\": np.arange(2, 20, 2),\n           \"min_samples_leaf\": np.arange(1, 20, 2)}\n# Setup random seed\nnp.random.seed(42)\n\n# Setup random hyperparameter search for RandomForestClassifier\nrs_rf_model = RandomizedSearchCV(RandomForestClassifier(),\n                           param_distributions=rf_grid,\n                           cv=5,\n                           n_iter=20,\n                           verbose=True)\n\n# Fit random hyperparameter search model\nsearch = rs_rf_model.fit(X_train, y_train);","cd0bdab6":"# Check the best parameters\nsearch.best_params_","733d0464":"search.score(X_test, y_test)","ad7e19b1":"df_test = pd.read_csv('..\/input\/titanic\/test.csv')\ndf_test.head()","5ef8324b":"df_test = preprocess_data(df_test)\ndf_test.head()","544e6ea5":"\n# Make predictions on the test dataset using the best model\ntest_preds = rf_model.predict(df_test)","461880bc":"# We can find how the columns differ using sets\nset(df_test.columns) - set(X_train.columns)","f3d31155":"df_test = df_test.drop('Fare_is_missing', axis=1)","6e960dff":"# Make predictions on the test dataset using the best model\ntest_preds = rf_model.predict(df_test)","ea79cf2c":"# Create DataFrame compatible with Kaggle submission requirements\ndf_preds = pd.DataFrame()\ndf_preds[\"PassengerId\"] = df_test[\"PassengerId\"]\ndf_preds[\"Survived\"] = test_preds\ndf_preds","d9625891":"df_preds.to_csv('.\/titanic.csv', index=False)","9a340492":"# Modelling","dc9a31ff":"# Making prediction on test data\n","ac6ac983":"# Data processing"}}