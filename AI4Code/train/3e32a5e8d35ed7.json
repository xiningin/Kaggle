{"cell_type":{"4344b4bd":"code","3420ae61":"code","e87260b9":"code","957810d1":"code","b5fb286c":"code","f7ee1286":"code","b1ae3674":"code","83220cd7":"code","9943245a":"code","bfb68418":"code","4ae49a68":"code","847eab46":"code","5b955c38":"code","0c8f81dd":"code","823f07a9":"code","ee21aae2":"code","8ff0cac0":"code","f2eeaa42":"code","8fe7d45f":"code","a95f3b77":"code","f554679c":"code","ad7799d7":"code","36c4bab6":"code","d159ee18":"code","96e23eef":"code","34f7c474":"markdown","e0395b45":"markdown","417bf5b7":"markdown","53eeb5fd":"markdown"},"source":{"4344b4bd":"# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3420ae61":"pd.__version__","e87260b9":"file_name = \"_election_results_by_pcon.csv\"","957810d1":"raw_df_2015 = pd.read_csv('\/kaggle\/input\/' + '2015'+ file_name,header=0, thousands=',' , quotechar = '\"');\nraw_df_2017 = pd.read_csv('\/kaggle\/input\/' + '2017' + file_name,header=0, thousands=',' , quotechar = '\"');","b5fb286c":"raw_df_2015.fillna(0, inplace=True);\nraw_df_2017.fillna(0, inplace=True);","f7ee1286":"raw_df_2015['Year']=2015\nraw_df_2017['Year']=2017","b1ae3674":"raw_df_2015.set_index('id', inplace=True);\nraw_df_2017.set_index('id', inplace=True);\n","83220cd7":"raw_df = pd.concat([raw_df_2015,raw_df_2017], sort=False).sort_index()\nraw_df.head()","9943245a":"parties = raw_df.columns[5:18]\ncols = list(['Constituency','Year']) + list(parties)\nprint(parties)\nprint(cols)","bfb68418":"df = raw_df[cols].set_index('Year',append=True)\ndf.head()","4ae49a68":"#check if there is any new constituency or costituency dropping\ns = df.groupby('id')['Conservative'].count()\ns = s[s < 2]\ns\ndf[df.index.get_level_values('id').isin(s.index)]\n","847eab46":"df_2017=df.xs(2017,level=1,drop_level=True)[parties]\ndf_2017['winner'] = df_2017.idxmax(axis=1)\ndf_2017.groupby(['winner'])['Conservative'].count()","5b955c38":"df_2015=df.xs(2015,level=1,drop_level=True)[parties]\ndf_2015['winner'] = df_2015.idxmax(axis=1)\ndf_2015.groupby(['winner'])['Conservative'].count()","0c8f81dd":"df_base=df_2015.drop(['winner'],axis=1);\nsLength = len(df_2015['Conservative']);\n\ndf_base.head()","823f07a9":"#build the percentage moves matrix\n\nsources = ['Labour', 'Conservative'];\nzero_s = pd.Series(np.zeros(len(parties)),index = parties)\n\nvote_moves = pd.DataFrame(index = parties, columns = sources);\n\nvote_moves['Labour'] = zero_s;\nvote_moves['Conservative'] = zero_s;\n\n#Labour out votes\nvote_moves['Labour']['Liberal Democrats'] = 0.1\nvote_moves['Labour']['UKIP'] = 0.1\nvote_moves['Labour']['SNP'] = 0\n\n#Conservative out votes\nvote_moves['Conservative']['Liberal Democrats'] = 0.05 #0.10\nvote_moves['Conservative']['UKIP'] = 0.10 #0.10\nvote_moves['Conservative']['SNP'] = 0\n\n#normalize\nfor idx in sources:    \n    vote_moves[idx][idx] = - vote_moves[idx].drop(idx).sum()\n\nvote_moves","ee21aae2":"df_shifts = df_base.copy();\ndf_shifts[parties] = 0;\nfor s in sources:\n    for idx in parties:\n        df_shifts[idx] += df_base[s] * vote_moves[s].loc[idx]\n\n\n#should be zeros\ndf_shifts[parties].sum(axis=1)\n","8ff0cac0":"#overwrite where SNP is present\nsnp_mask = df_base.loc[:,'SNP']>0\ndf_shifts[snp_mask] = 0; ","f2eeaa42":"#Labour out votes\n#vote_moves = pd.DataFrame(index = parties, columns = ['Labour']);\nvote_moves['Labour'].values[:] = 0;\n\nvote_moves['Labour']['SNP'] = 0.3\nvote_moves['Labour']['Labour'] = -0.3\n\n\nvote_moves","8fe7d45f":"for s in vote_moves.columns:\n    for idx in vote_moves.index:\n        df_shifts[idx][snp_mask] += df_base[s][snp_mask] * vote_moves[s].loc[idx]\n\n\n#should be zeros\ndf_shifts[parties][snp_mask]","a95f3b77":"df_scenario = df_base + df_shifts;\ndf_scenario.head()","f554679c":"df_scenario['winner'] = df_scenario.idxmax(axis=1)","ad7799d7":"parl = df_scenario.groupby(['winner'])['Conservative'].count()\n\nprint(parl)\nprint(\"Total number of seats is {}\".format(parl.sum()))","36c4bab6":"parl[['Conservative', 'UKIP', 'DUP']].sum()","d159ee18":"parl[['Labour', 'Liberal Democrats', 'SNP', 'Green']].sum()","96e23eef":"tot_votes = df_scenario[parties].sum().sum()\ndf_scenario[parties].sum() \/ tot_votes","34f7c474":"Special Treatment for SNP Constituencies","e0395b45":"*Actual 2015*","417bf5b7":"*Actual 2017*","53eeb5fd":"*Scenario*"}}