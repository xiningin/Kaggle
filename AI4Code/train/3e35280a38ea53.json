{"cell_type":{"4f87f489":"code","db642ece":"code","81df9083":"code","cab6cf21":"code","baa12761":"code","494acb33":"code","5ec26658":"code","1eadc2bb":"code","d7b4f576":"code","9d1ce6b8":"code","b832e710":"code","cf464b41":"code","8e85eff6":"code","d1857317":"code","3b00bf0b":"code","b2ca46e2":"code","b280794c":"code","da077f31":"code","863dfd4e":"code","37bf5a7b":"code","1cbd26c7":"code","77031e0a":"code","3e6172b1":"code","d23e4067":"code","2bd61c24":"code","dfc25600":"code","7955e6d9":"code","3f1de0e2":"code","a6890db3":"code","3cf87ad3":"code","b3484dfb":"code","ef139cd6":"code","25b4755d":"code","df8739ec":"code","6c58802b":"code","091abf55":"code","049c1ac0":"code","fac882d9":"code","96614fa3":"code","0e60452b":"code","d069e23a":"code","ee54f8b6":"code","8d479498":"code","8010a608":"code","523ff5ba":"code","dc86a848":"code","9b55b362":"code","4cbb3667":"code","2e9404a2":"code","0a12a71b":"code","39e90c2e":"code","a04032a7":"code","098f93ff":"code","c681238a":"code","8d41bb09":"code","9dd44529":"code","98c944f2":"code","d5a66e82":"code","b6a93acd":"code","058ad909":"code","01eb9c52":"markdown","afd9674b":"markdown","3395336a":"markdown","96cfc453":"markdown","9d63cd3d":"markdown","63e59170":"markdown","17dae646":"markdown","9e98c0ef":"markdown","ffb5dff3":"markdown","ca7eb9ec":"markdown","2bf39d36":"markdown","fe3d2b43":"markdown","1b6a47fc":"markdown","05c69a61":"markdown"},"source":{"4f87f489":"# Import all necessary Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","db642ece":"#Step2: Import the Dataset\ndf=pd.read_csv('..\/input\/titanic\/train.csv')","81df9083":"#Data overview\ndf.head()","cab6cf21":"df.info()","baa12761":"df.shape","494acb33":"df.columns","5ec26658":"#Step4: Exploratory Data Analysis(EDA)\nsns.countplot(data=df, x='Survived',hue='Sex')","1eadc2bb":"sns.boxplot(data=df,x='Survived',y='Age',hue='Sex')","d7b4f576":"#Removing unnecessary features\ndf=df.drop(['PassengerId','Name','Ticket','Cabin'],axis=1)","9d1ce6b8":"sns.pairplot(df)","b832e710":"sns.countplot(data=df,x='Survived',hue='Pclass')","cf464b41":"sns.countplot(data=df, x='SibSp',hue='Survived')","8e85eff6":"sns.countplot(data=df, x='Parch',hue='Survived')\nplt.legend(loc=1)","d1857317":"#dealing with outliers:\ndf.corr()['Survived'].sort_values()","3b00bf0b":"plt.figure(figsize=(8,6))\nsns.scatterplot(data=df,x='Fare', y='Survived')\nplt.axvline(x=500,color='r')","b2ca46e2":"df[df['Fare']>500]","b280794c":"df.iloc[[258,679,737],6]=df[df['Pclass']==1]['Fare'].mean()","da077f31":"df[df['Fare']>500]","863dfd4e":"plt.figure(figsize=(8,6))\nsns.scatterplot(data=df,x='Fare', y='Survived')\nplt.axvline(x=500,color='r')\n","37bf5a7b":"df.corr()['Survived'].sort_values()","1cbd26c7":"#dealing with missing data:\ndf.isnull().sum().sort_values()","77031e0a":"#Make a Function to calculate the percent of missing data in each columns (feature) and then sort it\ndef missing_percent(df):\n    nan_percent= 100*(df.isnull().sum()\/len(df))\n    nan_percent= nan_percent[nan_percent>0].sort_values()\n    return nan_percent","3e6172b1":"nan_percent= missing_percent(df)\nnan_percent","d23e4067":"plt.figure(figsize=(12,6),dpi=200)\nsns.barplot(x=nan_percent.index,y=nan_percent)","2bd61c24":"100\/len(df)","dfc25600":"df[df['Embarked'].isnull()]['Embarked']","7955e6d9":"df.iloc[[61,829]]","3f1de0e2":"df=df.dropna(axis=0, subset=['Embarked'])","a6890db3":"nan_percent= missing_percent(df)\nplt.figure(figsize=(8,6))\nsns.barplot(x=nan_percent.index,y=nan_percent)","3cf87ad3":"sns.distplot(df['Age'])\nplt.axvline(x=(df['Age'].mean()),color='r')","b3484dfb":"sns.barplot(data=df,x='Pclass',y='Age',hue='Sex')","ef139cd6":"#calculating mean of age according to sex and ticket class:\ndf.groupby(['Sex', 'Pclass'])['Age'].mean()\n","25b4755d":"df['Age'] = df.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.mean()))","df8739ec":"nan_percent= missing_percent(df)\nnan_percent","6c58802b":"#dealing with categorical features:\ndf.info()","091abf55":"df['Survived'].unique()","049c1ac0":"df['Pclass'].unique()","fac882d9":"#Convert to String:\ndf['Survived']= df['Survived'].apply(str)\ndf['Pclass']= df['Pclass'].apply(str)","96614fa3":"df.info()","0e60452b":"# B- Creating Dummy Variables:\ndf.select_dtypes(include='object')","d069e23a":"df_num= df.select_dtypes(exclude='object')\ndf_obj= df.select_dtypes(include='object')","ee54f8b6":"df_num.info()","8d479498":"df_obj.info()","8010a608":"# Converting:\ndf_obj= pd.get_dummies(df_obj, drop_first=True)","523ff5ba":"df_obj.shape","dc86a848":"final_df= pd.concat([df_num, df_obj], axis=1)\nfinal_df.head()","9b55b362":"sns.countplot(data=final_df,x='Survived_1')","4cbb3667":"#Determine the Features & Target Variable\nX=final_df.drop('Survived_1',axis=1)\ny=final_df['Survived_1']","2e9404a2":"#Split the Dataset to Tain & Test set:\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=101)","0a12a71b":"#Scaling the Features\nfrom sklearn.preprocessing import StandardScaler\nscaler= StandardScaler()\nscaler.fit(X_train)\nscaled_X_train= scaler.transform(X_train)\nscaled_X_test= scaler.transform(X_test)","39e90c2e":"#Train the Model\nfrom sklearn.linear_model import LogisticRegression\nlog_model= LogisticRegression()\nlog_model.fit(scaled_X_train, y_train)","a04032a7":"#Model Coeficient:\nlog_model.coef_","098f93ff":"#Predicting Test Data\ny_pred= log_model.predict(scaled_X_test)","c681238a":"#Evaluating the Model\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report, plot_confusion_matrix\naccuracy_score(y_test, y_pred)\n","8d41bb09":"confusion_matrix(y_test, y_pred)","9dd44529":"plot_confusion_matrix(log_model, scaled_X_test, y_test)","98c944f2":"print(classification_report(y_test, y_pred))","d5a66e82":"# Evaluating Curves and AUC\nfrom sklearn.metrics import precision_recall_curve, plot_precision_recall_curve, plot_roc_curve\n","b6a93acd":"#visualizing ROC plot\nplot_roc_curve(log_model, scaled_X_test, y_test)\n# Plotting ROC for random guessing\nplt.plot([0, 1], [0, 1], linestyle='--', lw=2, color='r')\nplt.show()","058ad909":"#visualizing precision-Recall plot\nplot_precision_recall_curve(log_model, scaled_X_test, y_test)","01eb9c52":"accuracy=(TP+TF)\/Total ","afd9674b":"# preprocceing and data enginering:","3395336a":"The plot shows the Model can works well.\nAs much as blue plot goes upper, the result improves.","96cfc453":"This Dataset contains the information about Titanic ship and included 891Rows and 12 columns.In this notebook I try to find the best ML model to predict which passengers survived the Titanic shipwreck.\n**Variable Notes**\n\n***pclass***: A proxy for socio-economic status (SES)(Ticket class)\n1 = 1st, 2 = 2nd, 3 = 3rd\n\n1st = Upper\n\n2nd = Middle\n\n3rd = Lower\n\n***age***:Age in years\n\n***Sibsp***: The dataset defines family relations in this way...(number of siblings \/ spouses aboard the Titanic)\n\nSibling = brother, sister, stepbrother, stepsister\n\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\n***Parch***: The dataset defines family relations in this way...(number of parents \/ children aboard the Titanic)\n\nParent = mother, father\n\nChild = daughter, son, stepdaughter, stepson\n\nSome children travelled only with a nanny, therefore parch=0 for them.\n\n***Survival***:0 = No, 1 = Yes\n\n***Sex***:Sex\n\n***Ticket***:Ticket number\n\n***Fare***:Passenger fare\n\n***Cabin***:Cabin number\n\n***Embarked***:Port of Embarkation(C = Cherbourg, Q = Queenstown, S = Southampton)","9d63cd3d":"Approximatly Data is balanced.","63e59170":"precision=(TP)\/Total pred positives=TP\/(TP+FP)\n\nRecall=(TP)\/Total actual positives=TP\/(TP+FN)","17dae646":"It shows that females are more survived than males.","9e98c0ef":"So Embarked has 2 rows of missing data.","ffb5dff3":"# Starting logistic Regression","ca7eb9ec":"Now the dataset is ready to built a ML model.","2bf39d36":"Dead people are mostly male with age between about 20 to 40.","fe3d2b43":"Probebly they have bought their thickets on the black market.\nI replace this amount with mean of 1st level's Fare.","1b6a47fc":"The most dead people are from 3th tichet class which is the most cheaper even though people in 1th class could not be survided more. ","05c69a61":"So there is not any missig data."}}