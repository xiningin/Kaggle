{"cell_type":{"20123d6a":"code","b244aa91":"code","5490609e":"code","41f0f400":"code","8219f7ff":"code","c4d85eb2":"code","c8844029":"code","35b3fe48":"code","305c0a0c":"code","ea9d8f33":"code","11f6fcee":"code","de62ac0c":"code","d1610822":"code","06d52630":"code","c5d1f78e":"code","ef33009c":"code","6cdacbab":"code","7fb0f374":"code","a8486677":"code","67113ba8":"code","00ba04fb":"code","c3db8061":"code","731a79c6":"code","ef76b8f3":"code","e3988f58":"code","3b598c39":"code","e215a759":"code","ea7e6b22":"code","01f2f0c6":"code","5d4ea56f":"code","3d811fe8":"code","88a2f292":"code","6eafab72":"code","61ff22f4":"code","6a7a52bd":"code","2be6f24f":"code","e36810cb":"code","0a7361b5":"code","35267508":"code","6a493ff0":"code","5b987a76":"code","8a9f6bd5":"code","5762f3f4":"code","ccc937d9":"markdown","7b8f613a":"markdown","6514f2b2":"markdown","487916d0":"markdown","b8064b60":"markdown"},"source":{"20123d6a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b244aa91":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nimport warnings \nwarnings.filterwarnings('ignore')\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB","5490609e":"liver_df = pd.read_csv('..\/input\/liver-disease-patient-dataset\/Liver Patient Dataset (LPD)_train.csv', encoding= 'unicode_escape')","41f0f400":"liver_df.head()","8219f7ff":"liver_df.columns","c4d85eb2":"liver_df.info()","c8844029":"# To know more about the dataset\nliver_df.describe()","35b3fe48":"liver_df.isnull()","305c0a0c":"# # Checking if there is some null values or not\nliver_df.isnull().sum()","ea9d8f33":"# Plotting the Number of patients with liver disease vs Number of patients with no liver disease\nsns.countplot(data=liver_df, x = 'Result', label='Count')\n\nLD, NLD = liver_df['Result'].value_counts()\nprint('Number of patients diagnosed with liver disease: ',LD)\nprint('Number of patients not diagnosed with liver disease: ',NLD)","11f6fcee":"# Plotting the Number of Male and Female patients\nsns.countplot(data=liver_df, x = 'Gender of the patient', label='Count')\n\nM, F = liver_df['Gender of the patient'].value_counts()\nprint('Number of patients that are male: ',M)\nprint('Number of patients that are female: ',F)","de62ac0c":"# Plotting patient Age vs Gender\nsns.catplot(x=\"Age of the patient\", y=\"Gender of the patient\", hue=\"Result\", data=liver_df)","d1610822":"#Mean Age of Patiens\nliver_df[['Gender of the patient', 'Result','Age of the patient']].groupby(['Result','Gender of the patient'], as_index=False).mean().sort_values(by='Result', ascending=False)","06d52630":"# Plotting Age vs Gender\ng = sns.FacetGrid(liver_df, col=\"Result\", row=\"Gender of the patient\", margin_titles=True)\ng.map(plt.hist, \"Age of the patient\", color=\"red\")\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle('Disease by Gender and Age')","c5d1f78e":"# Plotting Gender(Male\/Female) along with Total_Bilirubin and Direct_Bilirubin\ng = sns.FacetGrid(liver_df, col=\"Gender of the patient\", row=\"Result\", margin_titles=True)\ng.map(plt.scatter,\"Direct Bilirubin\", \"Total Bilirubin\", edgecolor=\"w\")\nplt.subplots_adjust(top=0.9)","ef33009c":"# Plotting Total_Bilirubin vs Direct_Bilirubin\nsns.jointplot(\"Total Bilirubin\", \"Direct Bilirubin\", data=liver_df, kind=\"reg\")","6cdacbab":"liver_df.head(3)","7fb0f374":"pd.get_dummies(liver_df['Gender of the patient'], prefix = 'Gender of the patient').head()","a8486677":"# Concatination\nliver_df = pd.concat([liver_df,pd.get_dummies(liver_df['Gender of the patient'], prefix = 'Gender of the patient')], axis=1)","67113ba8":"liver_df.head()","00ba04fb":"liver_df.describe()","c3db8061":"liver_df[liver_df['A\/G Ratio Albumin and Globulin Ratio'].isnull()]","731a79c6":"#liver_df[\"A\/G Ratio Albumin and Globulin Ratio\"] = liver_df.A\/G Ratio Albumin and Globulin Ratio.fillna(liver_df['A\/G Ratio Albumin and Globulin Ratio'].mean())","ef76b8f3":"X = liver_df.drop(['Gender of the patient','Result'], axis=1)\nX.head(3)","e3988f58":"# In the Dataset 1 implies the patient have liver disease; 2 implies the patients do not have liver disease\ny = liver_df['Result']","3b598c39":"liver_corr = X.corr()\nliver_corr","e215a759":"# Plotting Heatmaps for Correlations between all the features\nplt.figure(figsize=(12,12))\nsns.heatmap(liver_corr, cbar = True,  square = True, annot=True, fmt= '.2f', annot_kws={'size': 12}, cmap= 'coolwarm')\nplt.title('Correlation between all the features')","ea7e6b22":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.70, random_state=42)\nprint (X_train.shape)\nprint (y_train.shape)\nprint (X_test.shape)\nprint (y_test.shape)","01f2f0c6":"liver_df = liver_df.dropna()","5d4ea56f":"y_test = np.nan_to_num(y_test)","3d811fe8":"X_test = np.nan_to_num(X_test)","88a2f292":"X_train = np.nan_to_num(X_train)","6eafab72":"y_train = np.nan_to_num(y_train)","61ff22f4":"random_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\n# Predict Output\nrf_predicted = random_forest.predict(X_test)\n\nrandom_forest_score = round(random_forest.score(X_train, y_train) * 100, 2)\nrandom_forest_score_test = round(random_forest.score(X_test, y_test) * 100, 2)\nprint('Random Forest Score: \\n', random_forest_score)\nprint('Random Forest Test Score: \\n', random_forest_score_test)\nprint('Accuracy: \\n', accuracy_score(y_test,rf_predicted))\nprint(confusion_matrix(y_test,rf_predicted))\nprint(classification_report(y_test,rf_predicted))","6a7a52bd":"sns.heatmap(confusion_matrix(y_test,rf_predicted),annot=True,fmt=\"d\")","2be6f24f":"from sklearn.svm import SVC\nfrom sklearn import svm","e36810cb":"svm_model = svm.SVC(kernel='linear')\nsvm_model.fit(X_train, y_train)\nsvm_model.fit(X_train,y_train)\n#svm_model_score = round(svm_model_score(X_train, y_train) * 100)","0a7361b5":"svm_model_score = round(svm_model.score(X_train, y_train) * 100, 2)","35267508":"Y_predict = svm_model.predict(X_test)\ncm = confusion_matrix(y_test,Y_predict)\nprint(\"Confusion Matrix is :\", cm)","6a493ff0":"accuracy = accuracy_score(y_test,Y_predict)*100\nprint(\"Accuracy:\",accuracy)","5b987a76":"gaussian = GaussianNB()\ngaussian.fit(X_train, y_train)\n# Predict Output\ngauss_predicted = gaussian.predict(X_test)\n\ngauss_score = round(gaussian.score(X_train, y_train) * 100, 2)\ngauss_score_test = round(gaussian.score(X_test, y_test) * 100, 2)\nprint('Gaussian Score: \\n', gauss_score)\nprint('Gaussian Test Score: \\n', gauss_score_test)\nprint('Accuracy: \\n', accuracy_score(y_test, gauss_predicted))\nprint(confusion_matrix(y_test,gauss_predicted))\nprint(classification_report(y_test,gauss_predicted))","8a9f6bd5":"sns.heatmap(confusion_matrix(y_test,gauss_predicted),annot=True,fmt=\"d\")","5762f3f4":"# Comparing all the models\nmodels = pd.DataFrame({\n    'Model': [  'Gaussian Naive Bayes','Random Forest','SVM Model'],\n    'Score': [  gauss_score, random_forest_score,svm_model_score],\n    'Test Score': [ gauss_score_test, random_forest_score_test,accuracy]})\nmodels.sort_values(by='Test Score', ascending=False)","ccc937d9":"**Gaussian Naive Bayes**","7b8f613a":"Splitting Dataset","6514f2b2":"#  **In this we are comparing different machine learning models to predict liver disease.**","487916d0":"**Random Forest**","b8064b60":"**SVM**"}}