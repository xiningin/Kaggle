{"cell_type":{"9eb89229":"code","7dc70d90":"code","c10c992b":"code","deb99d0c":"code","e292b110":"code","e1e90bed":"code","bb5e7453":"code","ba5e1c20":"code","a57dd72d":"code","944cfc67":"code","d4a2f446":"code","d03d4d88":"code","d9ec9753":"code","44ba2d07":"code","3bb8416a":"code","3d8d8f2b":"code","d3d30720":"code","3b3c2e4d":"code","548d8981":"code","a02eab33":"code","425a2da7":"code","4c787dc3":"code","f58159bc":"code","588e523f":"code","2048ca45":"code","3688ab6c":"code","5c05a7e8":"code","0420f30b":"code","1372e422":"code","9f05d27f":"code","c03f6207":"code","81766190":"code","da22769d":"code","c4323c64":"code","9268861b":"code","8fd29609":"code","e61f94da":"markdown","b8ff33bd":"markdown","5c69282f":"markdown","dcff3fc0":"markdown","68a1f3a2":"markdown","acdafa05":"markdown","6e4d141c":"markdown","4858cfe4":"markdown","3b020817":"markdown","88bc4c54":"markdown","c826ece4":"markdown","567d5455":"markdown","f3d63a63":"markdown","ef394646":"markdown","b6cebba4":"markdown","bece090b":"markdown","00bbba6b":"markdown","8a8af1c2":"markdown","7c13685d":"markdown"},"source":{"9eb89229":"#The data sets are given by kaggle --> https:\/\/www.kaggle.com\/c\/titanic\/data\n\n#Load the data\n\nimport pandas as pd\n\ntrain_data = pd.read_csv('..\/input\/titanic\/train.csv')\ntest_data = pd.read_csv('..\/input\/titanic\/test.csv')","7dc70d90":"train_data.head(10)","c10c992b":"train_data.shape","deb99d0c":"train_data.isnull().sum()","e292b110":"train_data.drop([\"Name\",\"Ticket\",\"Cabin\"], axis = 1, inplace = True)","e1e90bed":"#fill missing age with median age\ntrain_data[\"Age\"].fillna((train_data[\"Age\"].mean()), inplace=True)","bb5e7453":"#remove the rows with missing values\ntrain_data = train_data.dropna()","ba5e1c20":"train_data.isnull().sum()","a57dd72d":"train_data.head(10)","944cfc67":"train_data[\"Survived\"].value_counts().plot(kind=\"bar\", color = \"orange\")","d4a2f446":"train_data.plot(kind = \"scatter\", x = \"Survived\", y=\"Age\", color = \"olive\")","d03d4d88":"data = []\ndata.append(list(train_data[train_data[\"Pclass\"]==1][\"Survived\"].value_counts().sort_index()))\ndata.append(list(train_data[train_data[\"Pclass\"]==2][\"Survived\"].value_counts().sort_index()))\ndata.append(list(train_data[train_data[\"Pclass\"]==3][\"Survived\"].value_counts().sort_index()))\ndata.append(list(train_data[train_data[\"Sex\"]==\"male\"][\"Survived\"].value_counts().sort_index()))\ndata.append(list(train_data[train_data[\"Sex\"]==\"female\"][\"Survived\"].value_counts().sort_index()))\ndata.append(list(train_data[train_data[\"Embarked\"]==\"S\"][\"Survived\"].value_counts().sort_index()))\ndata.append(list(train_data[train_data[\"Embarked\"]==\"C\"][\"Survived\"].value_counts().sort_index()))\ndata.append(list(train_data[train_data[\"Embarked\"]==\"Q\"][\"Survived\"].value_counts().sort_index()))\n\nlabels = [\"class 1\",\"class 2\",\"class 3\",\"male\",\"female\",\"S\",\"C\",\"Q\"]\nnotsurvived = [sub[0] for sub in data]\nsurvived = [sub[1] for sub in data]\n\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.arange(len(labels))\nwidth = 0.35\n\nfig, ax = plt.subplots()\nrects1 = ax.bar(x - width\/2, notsurvived, width, label='Died', color = \"lightcoral\")\nrects2 = ax.bar(x + width\/2, survived, width, label='Survived', color = \"lightgreen\")\n\nax.set_ylabel('Number of people')\nax.set_title('Survivors')\nax.set_xticks(x)\nax.set_xticklabels(labels)\nax.legend()\n\nfig.tight_layout()\n\nplt.show()","d9ec9753":"train_data[train_data[\"Survived\"]==1][\"Parch\"].value_counts().sort_index().plot(kind = \"bar\", title = \"Survived\")","44ba2d07":"train_data[train_data[\"Survived\"]==0][\"Parch\"].value_counts().sort_index().plot(kind = \"bar\", title = \"Died\")","3bb8416a":"train_data[train_data[\"Survived\"]==1][\"SibSp\"].value_counts().sort_index().plot(kind = \"bar\", color = \"purple\",title = \"Survived\")","3d8d8f2b":"train_data[train_data[\"Survived\"]==0][\"SibSp\"].value_counts().sort_index().plot(kind = \"bar\", color = \"purple\",title = \"Died\")","d3d30720":"train_data[train_data[\"Survived\"]==1][\"Fare\"].value_counts().sort_index().plot(color = \"silver\", title = \"Survived\")","3b3c2e4d":"train_data[train_data[\"Survived\"]==0][\"Fare\"].value_counts().sort_index().plot(color = \"silver\", title = \"Died\")","548d8981":"train_data[(train_data[\"Sex\"]==\"female\")&(train_data[\"Pclass\"]==1)][\"Survived\"].value_counts().plot(kind=\"pie\", colors = [\"g\",\"r\"])","a02eab33":"train_data[(train_data[\"Sex\"]==\"male\")&(train_data[\"Pclass\"]==3)][\"Survived\"].value_counts().plot(kind=\"pie\", colors = [\"r\",\"g\"])","425a2da7":"#Look at the data types\ntrain_data.dtypes","4c787dc3":"print(train_data[\"Sex\"].unique())\nprint(train_data[\"Embarked\"].unique())","f58159bc":"sex_mapping = {\"male\": 0, \"female\": 1}\ntrain_data['Sex'] = train_data['Sex'].map(sex_mapping)\nprint(train_data[\"Sex\"].unique())","588e523f":"embarked_mapping = {\"S\":0,\"C\":1,\"Q\":2}\ntrain_data['Embarked'] = train_data['Embarked'].map(embarked_mapping)\nprint(train_data[\"Embarked\"].unique())","2048ca45":"test_data.head()","3688ab6c":"test_data[\"Age\"].fillna((test_data[\"Age\"].mean()), inplace=True)\ntest_data[\"Fare\"].fillna((test_data[\"Fare\"].mean()), inplace=True)","5c05a7e8":"test_data.isnull().sum()","0420f30b":"test_data.drop([\"Name\",\"Ticket\",\"Cabin\"], axis = 1, inplace = True)","1372e422":"test_data['Sex'] = test_data['Sex'].map(sex_mapping)","9f05d27f":"test_data['Embarked'] = test_data['Embarked'].map(embarked_mapping)","c03f6207":"test_data.head()","81766190":"y_train = train_data[\"Survived\"]\nX_train = train_data.drop(\"Survived\",axis = 1)","da22769d":"from sklearn.svm import SVC\nmodel = SVC(kernel=\"linear\",random_state=0)\nmodel.fit(X_train,y_train)","c4323c64":"prediction = model.predict(test_data)","9268861b":"output = pd.DataFrame({'PassengerId': test_data[\"PassengerId\"], 'Survived': prediction})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","8fd29609":"output.head()","e61f94da":"## Submission","b8ff33bd":"## Data","5c69282f":"People who paid less than 100  more likely died while the others more likely survived.","dcff3fc0":"The majority of the passengers from the first class survived while the majority of the passengers from the third class did not survived.\n\nAlthough the majority of men died, the majority of women survived.","68a1f3a2":"## References\n\n- https:\/\/www.kaggle.com\/c\/titanic\n- https:\/\/github.com\/minsuk-heo\/kaggle-titanic\/blob\/master\/titanic-solution.ipynb\n- https:\/\/www.kaggle.com\/c\/titanic\/data\n- https:\/\/www.youtube.com\/watch?v=siEPqQsPLKA&t=623s\n- https:\/\/matplotlib.org\/3.2.1\/gallery\/lines_bars_and_markers\/barchart.html#sphx-glr-gallery-lines-bars-and-markers-barchart-py\n- https:\/\/dataisutopia.com\/blog\/predicting-titanic-dataset\/\n- https:\/\/www.youtube.com\/watch?v=rODWw2_1mCI&t=2s\n- https:\/\/www.kaggle.com\/alexisbcook\/titanic-tutorial","acdafa05":"#### Variable Notes from Kaggle\n\nsurvived: 0 = No, 1 = Yes\n\npclass: A proxy for socio-economic status (SES):\n1st = Upper,\n2nd = Middle,\n3rd = Lower\n\nage: Age is fractional. If less than 1. If the age is estimated, is it in the form of xx.5\n\nsibsp: The dataset defines family relations in this way:\nSibling = brother, sister, stepbrother, stepsister;\nSpouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\nparch: The dataset defines family relations in this way:\nParent = mother, father;\nChild = daughter, son, stepdaughter, stepson;\nSome children travelled only with a nanny, therefore parch=0 for them.","6e4d141c":"A person aboarded with more than 2 siblings or spouse more likely survived and a person aboarded without siblings or spouse more likely dead.","4858cfe4":"## Model","3b020817":"Cabin values are missing in many rows. Because of that, I will remove that column. The name of the passenger isn't that important to data analysis, neither the ticket name, so I will remove them as weel.","88bc4c54":"A person aboarded with more than 2 parents or children more likely survived and a person aboarded alone more likely dead.","c826ece4":"\"use machine learning to create a model that predicts which passengers survived the Titanic shipwreck.\"","567d5455":"## Test data","f3d63a63":"Passengers of all ages survived and died.","ef394646":"## Problem","b6cebba4":"Men in third class had a small chance of survival.","bece090b":"This notebook got a score of 0.77033 in the competition Titanic: Machine Learning from Disaster.","00bbba6b":"Woman in first class had a great chance of survival.","8a8af1c2":"Because Machine Learning models work better with numerical values, I will transform Sex and Embarked columns to numerical values.","7c13685d":"60% of people survived and 40% didn't."}}