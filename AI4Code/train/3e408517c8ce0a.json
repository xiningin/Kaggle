{"cell_type":{"2a401e42":"code","9e6d612c":"code","e7acc856":"code","30be03a9":"code","3bcbebbd":"code","fb6835e1":"code","008fa72c":"code","0c91e0db":"code","4f9b6898":"code","466300ef":"code","931cc355":"code","65592b88":"code","0ca321db":"code","e3da2c94":"code","2debcb7f":"code","db321461":"code","98a7537f":"code","d9265ba4":"code","4553d3a7":"code","cdd1c823":"code","bbf903cd":"code","42a18829":"code","43ee6ce4":"code","2e413738":"code","85a613ec":"code","4b8f7c26":"code","91a4c8d3":"code","31d2fafe":"code","1eb4437c":"code","0a9e6072":"code","f53d5aba":"code","7f69122a":"markdown","4cac3513":"markdown","eb2e39d1":"markdown","33992f66":"markdown","73c3265d":"markdown","73e19e2f":"markdown","d376e015":"markdown","446b3029":"markdown","edb03bb8":"markdown","9fab2822":"markdown","eef61006":"markdown","a6ba06d4":"markdown","1343e34f":"markdown","4dd01172":"markdown","7d106795":"markdown"},"source":{"2a401e42":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport random\n\nimport os\nprint(os.listdir(\"..\/input\"))","9e6d612c":"df = pd.read_csv(os.path.join('..\/input', 'train.csv'))\ndf_test = pd.read_csv(os.path.join('..\/input', 'test.csv'))\nX_test = df_test['question_text']\ndf.head()","e7acc856":"df.tail()","30be03a9":"df.isna().sum()","3bcbebbd":"df['target'].unique()\ndf[df['question_text'] == ''].sum()","fb6835e1":"sincere_q = (df['target'] == 0).sum()\ninsincere_q = (df['target'] == 1).sum()\n\nsincere_q, insincere_q","008fa72c":"rate_sincere_q = (sincere_q\/len(df['target']))*100\nrate_insincere_q = (insincere_q\/len(df['target']))*100\nrate_sincere_q, rate_insincere_q\nprint( '{}% of questions are sincere and {}% are insincere'.format(rate_sincere_q, rate_insincere_q))","0c91e0db":"index_insincere_q = np.array(df[df['target'] == 1].index) # len = 80810 \nindex_sincere_q = np.array(df[df['target'] == 0].index)\nindex_sincere_q_reduc = random.sample(list(index_sincere_q), int(1.8*len(index_insincere_q)))","4f9b6898":"X = pd.concat([df['question_text'][index_insincere_q], df['question_text'][index_sincere_q_reduc]])\ny = pd.concat([df['target'][index_insincere_q], df['target'][index_sincere_q_reduc]])\n#X = df['question_text']\n#y = df['target']\nX.shape, y.shape","466300ef":"from sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=.2, random_state=42, stratify=y)\nX_train.shape, y_train.shape, X_valid.shape, y_valid.shape\n","931cc355":"import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.tokenize import sent_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.stem import PorterStemmer","65592b88":"def tokenize(data):\n    tokenized_docs = [word_tokenize(doc.lower()) for doc in data]\n    alpha_tokens = [[t for t in doc if t.isalpha() == True] for doc in tokenized_docs]\n    stemmer = PorterStemmer ()\n    stemmed_tokens = [[stemmer.stem(alpha) for alpha in doc] for doc in alpha_tokens]\n    X_stem_as_string = [\" \".join(x_t) for x_t in stemmed_tokens]\n    return X_stem_as_string","0ca321db":"X_train_pr = tokenize(X_train)\nX_valid_pr = tokenize(X_valid)\nX_test_pr = tokenize(X_test)","e3da2c94":"from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.pipeline import Pipeline","2debcb7f":"vct = CountVectorizer(stop_words='english', ngram_range=(2, 3), lowercase=False)\nsvd = TruncatedSVD(n_components=100, random_state=42)\ntfvec = TfidfVectorizer(stop_words='english', lowercase=False)","db321461":"preprocessing_pipe = Pipeline([\n    ('vectorizer', tfvec),\n    ('svd', svd),\n])","98a7537f":"lsa_train = preprocessing_pipe.fit_transform(X_train_pr)\nlsa_train.shape","d9265ba4":"components = pd.DataFrame(data=svd.components_, columns=preprocessing_pipe.named_steps['vectorizer'].get_feature_names())\ncomponents","4553d3a7":"fig, axes = plt.subplots(10, 2, figsize=(18, 30))\nfor i, ax in enumerate(axes.flat):\n    components.iloc[i].sort_values(ascending=False)[:10].sort_values().plot.barh(ax=ax)","cdd1c823":"import xgboost as xgb\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV, StratifiedKFold\nfrom sklearn.naive_bayes import MultinomialNB","bbf903cd":"rf = RandomForestClassifier (class_weight='balanced_subsample')\nxgbc = xgb.XGBClassifier() \nmb = MultinomialNB()\npipe = Pipeline([\n    ('vectorizer', tfvec),\n    ('mb', mb)\n])\n","42a18829":"X_train_pr = tokenize(X_train)","43ee6ce4":"pipe.fit(X_train_pr, y_train)\ny_pred = pipe.predict(X_valid_pr)","2e413738":"from sklearn.metrics import confusion_matrix, classification_report","85a613ec":"cm = confusion_matrix(y_valid, y_pred)\ncm","4b8f7c26":"labels = ['sincere', 'unsincere']\ndf_cm = pd.DataFrame(cm, columns=labels, index=labels)\ndf_cm","91a4c8d3":" from sklearn.model_selection import cross_val_score","31d2fafe":"score = cross_val_score(pipe, X_valid_pr, y=y_valid, cv=5, scoring='f1_macro')\nscore","1eb4437c":"print(classification_report(y_valid, y_pred))","0a9e6072":"y_test_true = pipe.predict(X_test_pr)","f53d5aba":"#df_sample_submission = pd.DataFrame({'qid' : df_test['qid'], 'y_pred' : y_test_true})\n#index_insin = np.array(df_sample_submission[df_sample_submission['y_pred'] == 1].index) \n#df_sample_submission['qid'][index_insin]\nsub = pd.read_csv('..\/input\/sample_submission.csv')\nsub.prediction = y_test_true\nsub.to_csv(\"submission.csv\", index=False)","7f69122a":"** Split datas in train and test set **","4cac3513":"** Creation of a tokenize's function permitting to automatically tokenize our train and test set ** ","eb2e39d1":"** Preprocessing with nltk ** ","33992f66":"** Confusion Matrix ** ","73c3265d":"** Preprocessing pipeline **","73e19e2f":"**Visualizing the most informative features ** ","d376e015":"** Creation of a pipeline with prepocessing pipeline ** ","446b3029":"## QUORA INSINCERE PROJECT ","edb03bb8":"** Tokenizing **","9fab2822":"** Datas don't have NaN values and '', datas don't need to be cleaned **","eef61006":"## Data extraction and load ","a6ba06d4":"** The proportion of insincere questions and sincere questions is the same ** [](http:\/\/)","1343e34f":"## MACHINE LEARNING MODELS","4dd01172":"** Proportion very unbalanced, we have to try to scale datas ** ","7d106795":"** VALIDATION **"}}