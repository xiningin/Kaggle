{"cell_type":{"89258272":"code","bb7c3095":"code","e8c6e565":"code","5b090154":"code","6ecf620e":"code","444933a0":"code","3f947d07":"code","a56faa6d":"code","f7be45aa":"code","d1487758":"code","089410ae":"code","28aaac32":"code","129642f8":"code","f5a8e500":"code","a6c85b1a":"code","50cf9246":"code","a82aea95":"code","a74f6980":"code","66b0e049":"code","af4aaf80":"code","0a032dd7":"markdown","4e95b095":"markdown","2f337312":"markdown"},"source":{"89258272":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bb7c3095":"data2015 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2015.csv\")\ndata2016 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2016.csv\")\ndata2017 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2017.csv\")\ndata2018 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2018.csv\")\ndata2019 = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2019.csv\")\ndata2015.head()","e8c6e565":"print(\"2015: \u0412\u0441\u0435\u0433\u043e (all) \",data2015.shape[0] ,\" \u0441\u0442\u0440\u043e\u043a \u0438 (lines and)\", data2015.shape[1] ,\" \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 (columns)\")\nprint(\"2016: \u0412\u0441\u0435\u0433\u043e (all)\",data2016.shape[0] ,\" \u0441\u0442\u0440\u043e\u043a \u0438 (lines and)\", data2016.shape[1] ,\" \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 (columns)\")\nprint(\"2017: \u0412\u0441\u0435\u0433\u043e (all)\",data2017.shape[0] ,\" \u0441\u0442\u0440\u043e\u043a \u0438 (lines and)\", data2017.shape[1] ,\" \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 (columns)\")\nprint(\"2018: \u0412\u0441\u0435\u0433\u043e (all)\",data2018.shape[0] ,\" \u0441\u0442\u0440\u043e\u043a \u0438 (lines and)\", data2018.shape[1] ,\" \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 (columns)\")\nprint(\"2019: \u0412\u0441\u0435\u0433\u043e (all)\",data2019.shape[0] ,\" \u0441\u0442\u0440\u043e\u043a \u0438 (lines and)\", data2019.shape[1] ,\" \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 (columns)\")","5b090154":"print(\"2015: \u041a\u043e\u043b\u043e\u043d\u043a\u0438 (columns): \", list(data2015.columns))\nprint()\nprint(\"2016: \u041a\u043e\u043b\u043e\u043d\u043a\u0438 (columns): \", list(data2016.columns))\nprint()\nprint(\"2017: \u041a\u043e\u043b\u043e\u043d\u043a\u0438 (columns): \", list(data2017.columns))\nprint()\nprint(\"2018: \u041a\u043e\u043b\u043e\u043d\u043a\u0438 (columns): \", list(data2018.columns))\nprint()\nprint(\"2019: \u041a\u043e\u043b\u043e\u043d\u043a\u0438 (columns): \", list(data2019.columns))","6ecf620e":"i = 0\n# \u0434\u043b\u044f 2015, 2016, 2017: ['Country'], \u0430 \u0434\u043b\u044f 2018, 2019: [\"Country or region\"]\nfor name in list(data2019[\"Country or region\"].unique()): \n    i = i + 1\nprint(i)","444933a0":"print(list(data2015[\"Country\"].unique()).count(\"Belarus\"))\nprint(list(data2016[\"Country\"].unique()).count(\"Belarus\"))\nprint(list(data2017[\"Country\"].unique()).count(\"Belarus\"))\nprint(list(data2018[\"Country or region\"].unique()).count(\"Belarus\"))\nprint(list(data2019[\"Country or region\"].unique()).count(\"Belarus\"))","3f947d07":"Belarus2015 = data2015.loc[data2015[\"Country\"]==\"Belarus\"]\nBelarus2015 = Belarus2015.drop([\"Region\", \"Standard Error\", 'Dystopia Residual'], axis=1)\nBelarus2015 = Belarus2015.rename(columns={\"Country\":\"Country or region\",\n                                          \"Happiness Score\": \"Score\", \n                                          \"Happiness Rank\":\"Overall rank\", \n                                          \"Economy (GDP per Capita)\":\"GDP per capita\",\n                                          \"Health (Life Expectancy)\" : \"Healthy life expectancy\",\n                                          \"Trust (Government Corruption)\": \"Perceptions of corruption\",\n                                          \"Family\":\"Social support\",\n                                          \"Freedom\": \"Freedom to make life choices\"})\nBelarus2015","a56faa6d":"Belarus2016 = data2016.loc[data2016[\"Country\"]==\"Belarus\"]\nBelarus2016 = Belarus2016.drop([\"Region\", 'Dystopia Residual', 'Lower Confidence Interval', 'Upper Confidence Interval'], axis=1)\nBelarus2016 = Belarus2016.rename(columns={\"Country\":\"Country or region\",\n                                          \"Happiness Score\": \"Score\", \n                                          \"Happiness Rank\":\"Overall rank\", \n                                          \"Economy (GDP per Capita)\":\"GDP per capita\",\n                                          \"Health (Life Expectancy)\" : \"Healthy life expectancy\",\n                                          \"Trust (Government Corruption)\": \"Perceptions of corruption\",\n                                          \"Family\":\"Social support\",\n                                          \"Freedom\": \"Freedom to make life choices\"})\nBelarus2016","f7be45aa":"Belarus2017 = data2017.loc[data2017[\"Country\"]==\"Belarus\"]\nBelarus2017 = Belarus2017.drop(['Whisker.high', 'Whisker.low', 'Dystopia.Residual'], axis=1)\nBelarus2017 = Belarus2017.rename(columns={\"Country\":\"Country or region\",\n                                          \"Happiness.Score\": \"Score\", \n                                          \"Happiness.Rank\":\"Overall rank\", \n                                          \"Economy..GDP.per.Capita.\":\"GDP per capita\",\n                                          \"Health..Life.Expectancy.\" : \"Healthy life expectancy\",\n                                          \"Trust..Government.Corruption.\": \"Perceptions of corruption\",\n                                          \"Family\":\"Social support\",\n                                          \"Freedom\": \"Freedom to make life choices\"})\nBelarus2017","d1487758":"Belarus2018 = data2018.loc[data2018[\"Country or region\"]==\"Belarus\"]\nBelarus2019 = data2019.loc[data2019[\"Country or region\"]==\"Belarus\"]","089410ae":"belarus = pd.concat([Belarus2015, Belarus2016, Belarus2017, Belarus2018, Belarus2019])\nbelarus = belarus.rename(index={58:\"2015\", 60:\"2016\", 66:\"2017\", 72:\"2018\", 80:\"2019\"})\nbelarus = belarus.drop('Country or region', axis=1)\nbelarus","28aaac32":"import seaborn as sns","129642f8":"sns.barplot(x=belarus.index, y=belarus.Score)","f5a8e500":"sns.barplot(x=belarus.index, y=belarus[\"GDP per capita\"])","a6c85b1a":"data2019.loc[data2019[\"GDP per capita\"] == data2019[\"GDP per capita\"].max()]","50cf9246":"sns.lineplot(x=belarus.index, y=belarus[\"Social support\"])","a82aea95":"sns.lineplot(x=belarus.index, y=belarus[\"Healthy life expectancy\"])","a74f6980":"sns.lineplot(x=belarus.index, y=belarus[\"Freedom to make life choices\"])","66b0e049":"sns.lineplot(x=belarus.index, y=belarus[\"Perceptions of corruption\"])","af4aaf80":"sns.lineplot(x=belarus.index, y=belarus[\"Generosity\"])","0a032dd7":"\u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434:\n\u0441 2015 \u043f\u043e 2019 \u0438\u043d\u0434\u0435\u043a\u0441 \u0441\u0447\u0430\u0441\u0442\u044c\u044f \u0432 \u0441\u0440\u0430\u043d\u0435 \u043f\u043e\u0441\u0442\u0435\u043f\u0435\u043d\u043d\u043e \u0441\u043d\u0438\u0436\u0430\u043b\u0441\u044f \u0441 5.813 \u0434\u043e 5.323; \u0412\u0412\u041f \u0440\u043e\u0441 \u0434\u043e 2017, \u043d\u043e \u043f\u043e\u0441\u043b\u0435 \u0443\u043f\u0430\u043b \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u043d\u0430 0.1 \u0432 2018 \u0433\u043e\u0434\u0443, \u0438 \u0441\u043d\u043e\u0432\u0430 \u0441\u0442\u0430\u043b \u0440\u0430\u0441\u0442\u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0432 \u0432 2019 \u0433\u043e\u0434\u0443 1.067, \u0447\u0442\u043e \u043d\u0430 0.617 \u043c\u0435\u043d\u044c\u0448\u0435 \u0447\u0435\u043c \u0443 \u0441\u0430\u043c\u043e\u0433\u043e \u0432\u044b\u0441\u043e\u043a\u043e\u0433\u043e \u0412\u0412\u041f \u0432 \u044d\u0442\u043e\u043c \u0433\u043e\u0434\u0443 (Qatar(1.684)). \u0421\u043e\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0432\u044b\u043f\u043b\u0430\u0442\u044b \u0441 2015 \u043f\u043e 2016 \u0433\u043e\u0434\u0430 \u0441\u0438\u043b\u044c\u043d\u043e \u043f\u043e\u043d\u0438\u0437\u0438\u043b\u0438\u0441\u044c (\u043d\u0430 0.2), \u043d\u043e \u043f\u043e\u0441\u043b\u0435 \u0441\u0442\u0430\u043b\u0438 \u0440\u0430\u0441\u0442\u0438. \u041d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u043e\u0439 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0437\u0434\u043e\u0440\u043e\u0432\u043e\u0439 \u0436\u0438\u0437\u043d\u0438 \u0441 2015 \u043f\u043e 2017, \u0441 2017 \u043f\u043e 2019 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0435\u0435 \u0440\u043e\u0441\u0442. \u0427\u0442\u043e \u043a\u0430\u0441\u0430\u0435\u0442\u0441\u044f \u0441\u0432\u043e\u0431\u043e\u0434\u044b \u0432\u044b\u0431\u043e\u0440\u0430 \u0438 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043a \u043a\u043e\u0440\u0443\u043f\u0446\u0438\u0438, \u0442\u043e \u043c\u044b \u0432\u0438\u0434\u0435\u043c \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u0435. \u041d\u0443 \u0438 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u0438\u043d\u0434\u0435\u043a\u0441 \u0449\u0435\u0434\u0440\u043e\u0441\u0442\u0438 \u0438 \u0434\u043e\u0431\u0440\u0430\u0442\u044b \u0440\u043e\u0441 \u0441 2015 \u043f\u043e 2017, \u0430 \u043f\u043e\u0441\u043b\u0435 \u0441\u0442\u0430\u043b \u043f\u043e\u043d\u0438\u0436\u0430\u0442\u044c\u0441\u044f.\n\n(Based on the data, we can conclude: \nFrom 2015 to 2019, the score of happiness in shit gradually decreased from 5.813 to 5.323.\nGDP per capita grew until 2017, but then fell by more than 0.1 in 2018, and again began to grow, amounting to 1.067 in 2019, which is 0.617 less than the highest GDP per capita this year (Qatar (1.684)).  \nSocial support from 2015 to 2016 decreased significantly (by 0.2), but then began to grow.  There has been a decrease in healthy life expectancy from 2015 to 2017, and from 2017 to 2019 it begins to grow.  As for freedom to make life choices and perceptioms of corruption, we see a decline.  Well, the last generosity grew from 2015 to 2017, and then began to decrease.)\n","4e95b095":"2015 : \u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u0430\u043d (158 \u0441\u0442\u0440\u0430\u043d) (All strings are unique, i.e. there are no duplicate countries (158 countries))\n\n2016 : \u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u0430\u043d (157 \u0441\u0442\u0440\u0430\u043d) (All strings are unique, i.e. there are no duplicate countries (157 countries))\n\n2017 : \u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u0430\u043d (155 \u0441\u0442\u0440\u0430\u043d) (All strings are unique, i.e. there are no duplicate countries (155 countries))\n\n2018 : \u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u0430\u043d \u0438\u043b\u0438 \u0440\u0435\u0433\u0438\u043e\u043d\u043e\u0432 (156 \u0441\u0442\u0440\u0430\u043d \u0438\u043b\u0438 \u0440\u0435\u0433\u0438\u043e\u043d\u043e\u0432) (All strings are unique, i.e. there are no duplicate countries (156 countries))\n\n2019 : \u0412\u0441\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043d\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u0430\u043d \u0438\u043b\u0438 \u0440\u0435\u0433\u0438\u043e\u043d\u043e\u0432 (156 \u0441\u0442\u0440\u0430\u043d \u0438\u043b\u0438 \u0440\u0435\u0433\u0438\u043e\u043d\u043e\u0432) (All strings are unique, i.e. there are no duplicate countries (156 countries))","2f337312":"\u0422\u0430\u043a \u043a\u0430\u043a \u0432\u043e \u0432\u0441\u0435\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0435\u0441\u0442\u044c Belarus, \u0442\u043e \u043f\u043e \u043d\u0435\u0439 \u0438 \u0431\u0443\u0434\u0435\u0442 \u0430\u043d\u0430\u043b\u0438\u0437 (Since all data contains Belarus, then will be an analysis for Belarus)"}}