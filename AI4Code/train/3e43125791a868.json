{"cell_type":{"ed51c903":"code","d3f064e6":"code","5d404f70":"code","3355b434":"code","bdc0bef9":"code","337ecc2b":"code","11c9a77b":"code","cf4f3a24":"code","176f85d4":"code","6fd415a4":"code","28409828":"code","f68a38ae":"code","33616755":"code","f9e95278":"code","d34820f5":"code","8361fade":"code","c1962e9a":"code","92f0ef6e":"code","0a9ffa1f":"code","91eeb8fb":"code","df178326":"code","1e0fb688":"code","ff8d0185":"code","4903e134":"code","597d720f":"code","5d221b46":"code","d55e70c0":"code","8791ff15":"code","b23b91c1":"code","bf7cbcd7":"code","074b5fa7":"code","735d083f":"code","23f437c5":"code","66c8c051":"code","08c4b6f8":"markdown","570d6dc6":"markdown"},"source":{"ed51c903":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport warnings\nimport seaborn as sns\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d3f064e6":"udemy_original_data = pd.read_csv('..\/input\/finance-accounting-courses-udemy-13k-course\/udemy_output_All_Finance__Accounting_p1_p626.csv')","5d404f70":"udemy_dataset = udemy_original_data.copy()\nudemy_dataset.head()","3355b434":"udemy_dataset.isnull().sum()","bdc0bef9":"check_null_discount_price__amount = (udemy_dataset.discount_price__amount.isnull().sum())\/(len(udemy_dataset.discount_price__amount))*100\ncheck_null_discount_price__currency = (udemy_dataset.discount_price__currency.isnull().sum())\/(len(udemy_dataset.discount_price__currency))*100\ncheck_null_discount_price__price_string = (udemy_dataset.discount_price__price_string.isnull().sum())\/(len(udemy_dataset.discount_price__price_string))*100\ncheck_null_price_detail__amount = (udemy_dataset.price_detail__amount.isnull().sum())\/(len(udemy_dataset.price_detail__amount))*100\ncheck_null_price_detail__currency= (udemy_dataset.price_detail__currency.isnull().sum())\/(len(udemy_dataset.price_detail__currency))*100\ncheck_null_price_detail__price_string  = (udemy_dataset.price_detail__price_string.isnull().sum())\/(len(udemy_dataset.price_detail__price_string))*100\n\nprint(\"volume of NaNs of discount_price__amount is \" + str(round(check_null_discount_price__amount,2))+\"%\")\nprint(\"volume of NaNs of discount_price__currency is \" + str(round(check_null_discount_price__currency,2))+\"%\")\nprint(\"volume of NaNs of discount_price__price_string is \" + str(round(check_null_discount_price__price_string,2))+\"%\")\nprint(\"volume of NaNs of price_detail__amount is \" + str(round(check_null_price_detail__amount,2))+\"%\")\nprint(\"volume of NaNs of price_detail__currency  is \" + str(round(check_null_price_detail__currency,2))+\"%\")\nprint(\"volume of NaNs of price_detail__price_string is \" + str(round(check_null_price_detail__price_string,2))+\"%\")","337ecc2b":"len(udemy_dataset.index)","11c9a77b":"udemy_dataset.title.values","cf4f3a24":"sns.displot(udemy_dataset['rating'])","176f85d4":"rating_5 = []\nrating_4 = []\nrating_3 = []\nrating_2 = []\nrating_1 = []\nrating_0 = []\nfor i in range(0, len(udemy_dataset.rating.values)-1):\n    if udemy_dataset.rating.values[i] == 5.0:\n        rating_5.append(udemy_dataset.title.values[i])\n    if 4.0 <= udemy_dataset.rating.values[i] < 5.0:\n        rating_4.append(udemy_dataset.title.values[i])\n    if 3.0 <= udemy_dataset.rating.values[i] < 4.0:\n        rating_3.append(udemy_dataset.title.values[i])\n    if 2.0 <= udemy_dataset.rating.values[i] < 3.0:\n        rating_2.append(udemy_dataset.title.values[i])\n    if 1.0 <= udemy_dataset.rating.values[i] < 2.0:\n        rating_1.append(udemy_dataset.title.values[i])\n    if 0.0 <= udemy_dataset.rating.values[i] < 1.0:\n        rating_0.append(udemy_dataset.title.values[i])","6fd415a4":"rating_5","28409828":"def label_graph(ax):\n    for p in ax.patches:\n        height = p.get_height()\n        ax.text(p.get_x() + p.get_width() \/ 2., height + 3, height, ha = 'center', size = 15)","f68a38ae":"fig = plt.figure()\nax = fig.add_axes([0,0,1,1])\nudemy_rating_label = [\"0.0\", \"1.0\", \"2.0\", \"3.0\", \"4.0\", \"5.0\"]\nudemy_rating_data = [len(rating_5), len(rating_4), len(rating_3), len(rating_2), len(rating_1), len(rating_0)]\nax.bar(udemy_rating_label,udemy_rating_data)\nlabel_graph(ax)\nax.set_ylabel('Number of Course')\nax.set_xlabel('Course Rating')\nax.set_title('Udemy rating')\nplt.show()","33616755":"paid_course_data = [len(udemy_dataset[udemy_dataset['is_paid']==True]),\n                    len(udemy_dataset[udemy_dataset['is_paid']==False])]\npaid_course_labels = ['Paid', 'Not Paid']\nplt.title('Udemy Paid Percentage')\nplt.pie(paid_course_data, labels = paid_course_labels, autopct='%.0f%%')\nplt.show()","f9e95278":"sns.lmplot(x=\"num_subscribers\", y=\"num_reviews\",data =udemy_dataset)","d34820f5":"fig, axs = plt.subplots(nrows=2, figsize=(8,8))\ng1 = sns.regplot(x=\"num_subscribers\", y=\"rating\",data =udemy_dataset, ax=axs[0])\ng2 = sns.regplot(x=\"num_reviews\", y=\"rating\",data =udemy_dataset, ax=axs[1])\ng1.set(ylim=(0, 5))\ng2.set(ylim=(0, 5))\nfig.tight_layout(pad=3.0)","8361fade":"udemy_dataset['created_year'] = udemy_dataset['created'].apply(lambda x: np.int(x[0:4]))\nudemy_dataset['published_year'] = udemy_dataset['published_time'].apply(lambda x: np.int(x[0:4]))\nudemy_dataset","c1962e9a":"sns.countplot(x= \"published_year\", data= udemy_dataset).set_title('# of Course over the year')","92f0ef6e":"udemy_dataset_testing = udemy_dataset.copy()\nudemy_dataset_testing.head()","0a9ffa1f":"udemy_dataset_testing.isnull().sum()","91eeb8fb":"udemy_dataset_testing = udemy_dataset_testing.drop(['id',\n                                                    'title',\n                                                    'url',\n                                                    'created',\n                                                    'published_time',\n                                                    'discount_price__currency',\n                                                    'discount_price__price_string',\n                                                    'price_detail__currency',\n                                                    'price_detail__price_string'\n                                                   ], axis=1)\nudemy_dataset_testing.head()","df178326":"udemy_dataset_testing['discount_price__amount']= udemy_dataset_testing['discount_price__amount'].fillna(udemy_dataset_testing['discount_price__amount'].mean())\nudemy_dataset_testing['price_detail__amount']= udemy_dataset_testing['price_detail__amount'].fillna(udemy_dataset_testing['price_detail__amount'].mean())\nudemy_dataset_testing.isnull().sum()","1e0fb688":"udemy_dataset_testing['is_paid'] = udemy_dataset_testing['is_paid'].astype(np.int)\nudemy_dataset_testing['is_wishlisted'] = udemy_dataset_testing['is_wishlisted'].astype(np.int)","ff8d0185":"udemy_dataset_testing.head()","4903e134":"udemy_dataset_testing.columns","597d720f":"X = udemy_dataset_testing[['is_paid', 'num_subscribers', 'avg_rating', 'avg_rating_recent',\n                'num_reviews','is_wishlisted', 'num_published_lectures','num_published_practice_tests', \n                'discount_price__amount','price_detail__amount', 'created_year', 'published_year']]\ny = udemy_dataset_testing['rating']","5d221b46":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=100)","d55e70c0":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression(normalize=True)\nlin_reg.fit(X_train,y_train)","8791ff15":"lin_reg.intercept_","b23b91c1":"coeff_df = pd.DataFrame(lin_reg.coef_,X.columns,columns=['Coefficient'])\ncoeff_df","bf7cbcd7":"pred = lin_reg.predict(X_test)\nprint(pred)\nplt.scatter(y_test, pred)\nplt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color = 'g')","074b5fa7":"test_pred = lin_reg.predict(X_test)\ntrain_pred = lin_reg.predict(X_train)","735d083f":"from sklearn import metrics\nfrom sklearn.model_selection import cross_val_score","23f437c5":"def print_evaluate(true, predicted):  \n    mae = metrics.mean_absolute_error(true, predicted)\n    mse = metrics.mean_squared_error(true, predicted)\n    rmse = np.sqrt(metrics.mean_squared_error(true, predicted))\n    r2_square = metrics.r2_score(true, predicted)\n    print('MAE:', mae)\n    print('MSE:', mse)\n    print('RMSE:', rmse)\n    print('R2 Square', r2_square)","66c8c051":"print_evaluate(y_train,train_pred)","08c4b6f8":"### Linear Regression","570d6dc6":"### List of 5.0 Courses in Udemy"}}