{"cell_type":{"535125ce":"code","ea742fb0":"code","d4ace492":"code","bcd6ca1c":"code","1c0f1633":"code","02c8e2e4":"code","e4c183b1":"code","d436def3":"code","d4e46f42":"code","35569a7f":"code","51bd4053":"code","50fb3f64":"code","0950d351":"code","faa6b358":"markdown","943b38dc":"markdown","c7f70a2e":"markdown","45bf54c8":"markdown","2249d2a6":"markdown","0fca594b":"markdown","7f3a6bc3":"markdown"},"source":{"535125ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","ea742fb0":"print(os.listdir(\"..\/input\/frame\"))\nprint(os.listdir(\"..\/input\/video\"))","d4ace492":"#Loading libraries & datasets\nimport tensorflow as tf\nimport numpy as np\nfrom IPython.display import YouTubeVideo\n\nvideo_lvl_record = \"..\/input\/video\/train00.tfrecord\"\nframe_lvl_record = \"..\/input\/frame\/train00.tfrecord\"","bcd6ca1c":"vid_ids = []\nlabels = []\nmean_rgb = []\nmean_audio = []\n\nfor example in tf.python_io.tf_record_iterator(video_lvl_record):\n    tf_example = tf.train.Example.FromString(example)\n\n    vid_ids.append(tf_example.features.feature['id'].bytes_list.value[0].decode(encoding='UTF-8'))\n    labels.append(tf_example.features.feature['labels'].int64_list.value)\n    mean_rgb.append(tf_example.features.feature['mean_rgb'].float_list.value)\n    mean_audio.append(tf_example.features.feature['mean_audio'].float_list.value)","1c0f1633":"print('Number of videos in this tfrecord: ',len(mean_rgb))\nprint('Picking a youtube video id:',vid_ids[13])\nprint('First 20 features of a youtube video (',vid_ids[13],'):')\nprint(mean_rgb[13][:20])","02c8e2e4":"#With that video id, we can play the video\nYouTubeVideo('-QM5ooctj0w')","e4c183b1":"# due to execution time, we're only going to read the first video\n\nfeat_rgb = []\nfeat_audio = []\n\nfor example in tf.python_io.tf_record_iterator(frame_lvl_record):        \n    tf_seq_example = tf.train.SequenceExample.FromString(example)\n    n_frames = len(tf_seq_example.feature_lists.feature_list['audio'].feature)\n    sess = tf.InteractiveSession()\n    rgb_frame = []\n    audio_frame = []\n    # iterate through frames\n    for i in range(n_frames):\n        rgb_frame.append(tf.cast(tf.decode_raw(\n                tf_seq_example.feature_lists.feature_list['rgb'].feature[i].bytes_list.value[0],tf.uint8)\n                       ,tf.float32).eval())\n        audio_frame.append(tf.cast(tf.decode_raw(\n                tf_seq_example.feature_lists.feature_list['audio'].feature[i].bytes_list.value[0],tf.uint8)\n                       ,tf.float32).eval())\n        \n        \n    sess.close()\n    feat_rgb.append(rgb_frame)\n    feat_audio.append(audio_frame)\n    break","d436def3":"print('The first video has %d frames' %len(feat_rgb[0]))","d4e46f42":"from matplotlib import pyplot as plt\n%matplotlib inline\nfrom sklearn.manifold import TSNE\nimport numpy as np","35569a7f":"labels_2018 = pd.read_csv('..\/input\/label_names_2018.csv')\nprint(\"we have {} unique labels in the dataset\".format(len(labels_2018['label_name'].unique())))","51bd4053":"n=10\nfrom collections import Counter\nlabel_mapping = pd.read_csv('..\/input\/label_names_2018.csv',header=0,index_col=0,squeeze=True).T.to_dict()\n\ntop_n = Counter([item for sublist in labels for item in sublist]).most_common(n)\ntop_n_labels = [int(i[0]) for i in top_n]\ntop_n_label_names = [label_mapping[x] for x in top_n_labels]\ntop_n_label_names","50fb3f64":"import networkx as nx\nfrom itertools import combinations\n\nG=nx.Graph()\n\nG.clear()\nfor list_of_nodes in labels:\n    filtered_nodes = set(list_of_nodes).intersection(set(top_n_labels))  \n    for node1,node2 in list(combinations(filtered_nodes,2)): \n        node1_name = label_mapping[node1]\n        node2_name = label_mapping[node2]\n        G.add_node(node1_name)\n        G.add_node(node2_name)\n        G.add_edge(node1_name, node2_name)\n\nnx.draw_networkx(G,font_size=\"10\")","0950d351":"colors = plt.cm.rainbow(np.linspace(0, 1, n))\nmean_rgb_top_n = []\nlabels_for_tsne = []\n# filtering mean_rgb so it only contains top n labels\nfor idx, list_of_nodes in enumerate(labels):\n    for node in list_of_nodes:\n        if node in top_n_labels:\n            mean_rgb_top_n.append(mean_rgb[idx])\n            labels_for_tsne.append(node)\n\n\nX_embedded = TSNE(n_components=2, random_state=0).fit_transform(mean_rgb_top_n) \n\n\nfig = plt.figure()\nax = fig.add_subplot(111)\n\nhandles = []\nfor indx, color in enumerate(colors):\n    this_label = top_n_labels[indx]\n    X_embedded_filtered = X_embedded[np.array([x==this_label for x in labels_for_tsne])]\n    handles.append(ax.scatter(X_embedded_filtered[:, 0], X_embedded_filtered[:, 1], c=color, marker=\"o\",edgecolor='none'))\n\nax.legend(handles, top_n_labels)\n\nplt.show()","faa6b358":"# Let's start with the video-level data","943b38dc":"As described on the [YouTube8M download page](https:\/\/research.google.com\/youtube8m\/video_id_conversion.html), for privacy reasons, the video `id` has been randomly generated and does not directly correspond to the actual YouTube video id. To convert the `id` into the actua YouTube video id, we follow link: [http:\/\/data.yt8m.org\/2\/j\/i\/1r\/1r00.js](http:\/\/data.yt8m.org\/2\/j\/i\/1r\/1r00.js)","c7f70a2e":"# This notebook explores the data (TFRecord format) using a subsample of the YouTube-8M video & frame-level data. To work with the entire dataset, please refer to the Starter code on the [YouTube-8M github repo](https:\/\/github.com\/google\/youtube-8m).","45bf54c8":"And a t-SNE plot on the data...","2249d2a6":"And plot the relationships between each of these top labels...","0fca594b":"# Now, let's read the frame-level data","7f3a6bc3":"# Now let's explore the labels\n\nFirst, we'll find the most commonly used labels..."}}