{"cell_type":{"60fafa50":"code","3e4ea549":"code","1a6a2a5d":"code","40ab423c":"code","982b7121":"code","1f28d286":"code","467827a3":"code","3ee32de1":"code","88aaaa0e":"code","e9e3a218":"code","63303e88":"code","c09274f3":"code","015ac711":"code","54fcabac":"code","f93db4a9":"code","0aa44b66":"code","28568657":"markdown","cdb57b7a":"markdown","d2c8978e":"markdown","af042444":"markdown","84e5b64e":"markdown","aa110132":"markdown","b7b05da9":"markdown","d5d9c80e":"markdown"},"source":{"60fafa50":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3e4ea549":"import time\nfrom scipy import stats\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import svm\nfrom sklearn.metrics import accuracy_score","1a6a2a5d":"df = pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')\nprint('Size of weather data frame is :',df.shape)\n#Let us see how our data looks like!\ndf.head()","40ab423c":"# We see there are some columns with null values. \n# Before we start pre-processing, let's find out which of the columns have maximum null values\ndf.count().sort_values()","982b7121":"# As we can see the first four columns have less than 60% data, we can ignore these four columns\n# We don't need the location column because \n# we are going to find if it will rain in Australia(not location specific)\n# We are going to drop the date column too.\n# We need to remove RISK_MM because we want to predict 'RainTomorrow' and RISK_MM can leak some info to our model\ndf = df.drop(columns=['Sunshine','Evaporation','Cloud3pm','Cloud9am','Location','Date'],axis=1)\ndf.shape","1f28d286":"#Let us get rid of all null values in df\ndf = df.dropna(how='any')\ndf.shape","467827a3":"#its time to remove the outliers in our data - we are using Z-score to detect and remove the outliers.\n\nz = np.abs(stats.zscore(df._get_numeric_data()))\nprint(z)\ndf= df[(z < 3).all(axis=1)]\nprint(df.shape)","3ee32de1":"#Lets deal with the categorical cloumns now\n# simply change yes\/no to 1\/0 for RainToday and RainTomorrow\ndf['RainToday'].replace({'No': 0, 'Yes': 1},inplace = True)\ndf['RainTomorrow'].replace({'No': 0, 'Yes': 1},inplace = True)\n\n#See unique values and convert them to int using pd.getDummies()\ncategorical_columns = ['WindGustDir', 'WindDir3pm', 'WindDir9am']\nfor col in categorical_columns:\n    print(np.unique(df[col]))\n# transform the categorical columns\ndf = pd.get_dummies(df, columns=categorical_columns)\ndf.iloc[4:9]","88aaaa0e":"#next step is to standardize our data - using MinMaxScaler\nfrom sklearn import preprocessing\nscaler = preprocessing.MinMaxScaler()\nscaler.fit(df)\ndf = pd.DataFrame(scaler.transform(df), index=df.index, columns=df.columns)\ndf.iloc[4:10]","e9e3a218":"#now that we are done with the pre-processing part, let's see which are the important features for RainTomorrow!\n#Using SelectKBest to get the top features!\n\nX = df.loc[:,df.columns!='RainTomorrow']\ny = df[['RainTomorrow']]\nselector = SelectKBest(chi2, k=3)\nselector.fit(X, y)\nX_new = selector.transform(X)\nprint(X.columns[selector.get_support(indices=True)]) #top 3 columns","63303e88":"#Let's get hold of the important features as assign them as X\ndf = df[['Humidity3pm','Rainfall','RainToday','RainTomorrow']]\nX = df[['Humidity3pm']] # let's use only one feature Humidity3pm\ny = df[['RainTomorrow']]","c09274f3":"t0=time.time()\nX_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.25)","015ac711":"clf_logreg = LogisticRegression(random_state=0)\nclf_logreg.fit(X_train,y_train)\ny_pred = clf_logreg.predict(X_test)\nscore = accuracy_score(y_test,y_pred)\nprint('Accuracy :',score)\nprint('Time taken :' , time.time()-t0)","54fcabac":"t0=time.time()\nclf_rf = RandomForestClassifier(n_estimators=100, max_depth=4,random_state=0)\nclf_rf.fit(X_train,y_train)\ny_pred = clf_rf.predict(X_test)\nscore = accuracy_score(y_test,y_pred)\nprint('Accuracy :',score)\nprint('Time taken :' , time.time()-t0)","f93db4a9":"t0=time.time()\nclf_svc = svm.SVC(kernel='linear')\nclf_svc.fit(X_train,y_train)\ny_pred = clf_svc.predict(X_test)\nscore = accuracy_score(y_test,y_pred)\nprint('Accuracy :',score)\nprint('Time taken :' , time.time()-t0)","0aa44b66":"t0=time.time()\nclf_dt = DecisionTreeClassifier(random_state=0)\nclf_dt.fit(X_train,y_train)\ny_pred = clf_dt.predict(X_test)\nscore = accuracy_score(y_test,y_pred)\nprint('Accuracy :',score)\nprint('Time taken :' , time.time()-t0)","28568657":"### Decision Tree Classifier","cdb57b7a":"### Support Vector Machine","d2c8978e":"### Random Forest Classifier ","af042444":"### Logistic Regression","84e5b64e":"## Imports","aa110132":"## Data Preprocessing","b7b05da9":"## Feature Engineering","d5d9c80e":"## Models"}}