{"cell_type":{"aa7afe8d":"code","206ee935":"code","7f7bf0b3":"code","9699a79b":"code","6cb38ed0":"code","fe392fdb":"code","d9a8c4ee":"markdown","59abee8d":"markdown","4143ab2a":"markdown","522bd378":"markdown","eef2b756":"markdown"},"source":{"aa7afe8d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","206ee935":"from tensorflow.keras import layers\nfrom tensorflow.keras import models\nfrom tensorflow.keras.datasets import mnist\nfrom tensorflow.keras.utils import to_categorical","7f7bf0b3":"(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n\ntrain_images = train_images.reshape(60000, 28, 28, 1)\ntrain_images = train_images.astype(\"float32\") \/ 255\n\ntest_images = test_images.reshape(10000, 28, 28, 1)\ntest_images = test_images.astype(\"float32\") \/ 255\n\ntrain_labels = to_categorical(train_labels)\ntest_labels = to_categorical(test_labels)","9699a79b":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10, activation='softmax'))\n\nmodel.summary()","6cb38ed0":"model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(train_images, train_labels, epochs=5, batch_size=64)","fe392fdb":"test_loss, test_accuracy = model.evaluate(test_images, test_labels)\n\ntest_accuracy","d9a8c4ee":"## Trianing Model","59abee8d":"# MNIST Digits Classification with Tensorflow and Keras (CNN version)","4143ab2a":"## Model evaluation","522bd378":"## Loading and preparing the dataset","eef2b756":"## Building a Convolutional Neural Network (Convnet) Model"}}