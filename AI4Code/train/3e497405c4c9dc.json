{"cell_type":{"33a54596":"code","a34e8c6e":"code","1c90b30a":"code","cae7a483":"code","ac2f7296":"code","d5b083f2":"code","3d96946f":"code","029cfc7a":"code","e56a5c6c":"code","73a40eee":"code","35e192de":"code","73e87b66":"code","2de90c74":"code","740aad06":"code","c61236a8":"code","c099df55":"code","0a1092e8":"code","f0bece67":"code","a2740828":"code","7ed7be1d":"code","d9a16aad":"code","a3ad4feb":"code","1f3d82ea":"code","3f0a9ac4":"code","f41f399a":"code","222b33e5":"code","13ccf158":"code","bc4ea528":"code","3b67c952":"code","53998e80":"code","04590f30":"markdown","4dcbcc1f":"markdown","0950f555":"markdown","6722d9b2":"markdown"},"source":{"33a54596":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a34e8c6e":"train=pd.read_csv('..\/input\/train.csv',nrows=1000)","1c90b30a":"train.head(10)","cae7a483":"train.HasDetections.value_counts()","ac2f7296":"no_detections=train.loc[train['HasDetections']==0]","d5b083f2":"no_detections","3d96946f":"train['HasTpm'].value_counts()","029cfc7a":"train.OsBuild.value_counts().plot.bar()\ntrain.Census_OSEdition.value_counts()","e56a5c6c":"def convert_bool(feature):\n    train[feature]=train[feature].astype('bool')\n    train[feature]=train[feature].astype('int')\n    return train[feature]","73a40eee":"train.IsProtected.dtype","35e192de":"convert_bool('Firewall')\nconvert_bool('AVProductsEnabled')\nconvert_bool('IsProtected')\nconvert_bool('UacLuaenable')\n\n","73e87b66":"train['Census_ChassisTypeName'].value_counts()","2de90c74":"train.Census_ChassisTypeName.value_counts()\nfrom sklearn.preprocessing import LabelEncoder\n\nl=LabelEncoder()\nOS_Arch=LabelEncoder()\nencoded_labels_ChasisType=l.fit_transform(train['Census_ChassisTypeName'])\ntrain['Census_ChassisTypeName']=encoded_labels_ChasisType\n\nArch=OS_Arch.fit_transform(train['Census_OSArchitecture'])\ntrain['Census_OSArchitecture']=Arch","740aad06":"train['Census_ChassisTypeName'].value_counts()\n\nfor i,v in enumerate(l.classes_):\n    print(i,v)","c61236a8":"train['Census_PowerPlatformRoleName'].value_counts()\ntrain['Census_FlightRing'].value_counts()\n","c099df55":"new_feature=[]\n\nnew_feature=list(zip(train['Census_PowerPlatformRoleName'],train['HasDetections']))\n","0a1092e8":"train['Detection_Platform']=new_feature","f0bece67":"train.Detection_Platform.value_counts().plot.bar()","a2740828":"train.dtypes","7ed7be1d":"\n\nfor i,v in enumerate(OS_Arch.classes_):\n    print(i,v)","d9a16aad":"train['Census_TotalPhysicalRAM'].value_counts()","a3ad4feb":"train['Census_ChassisTypeName']","1f3d82ea":"train.columns[0:50]","3f0a9ac4":"\nfor i in train.columns[0:85]:\n    print(\"###################\")\n    print(i)\n    print(train[i].value_counts())\n\n\n\n","f41f399a":"train['OSBuild_Detections']=list(zip(train['OsBuildLab'],train['HasDetections']))","222b33e5":"plt.figure(figsize=(20,11))\ntrain['OSBuild_Detections'].value_counts().plot.bar()\n","13ccf158":"len(set(train['OsBuildLab']))","bc4ea528":"len(set(train['OSBuild_Detections']))","3b67c952":"train['OSBuild_Detections'].value_counts()","53998e80":"train['OsSuite'].value_counts()","04590f30":"**Checking the features after encoding using LabelEncoder **","4dcbcc1f":"**Feature Engineering :\nConverting the feature IsProtected into bool **","0950f555":"**Analyzing the HasDetections  based on the OSBuild type**","6722d9b2":"**Converting the below categories into numerical labels using LabelEncoder**"}}