{"cell_type":{"8fa294c5":"code","38d4abb5":"code","8c70555a":"code","483e93df":"code","0b539179":"code","6df2451c":"code","d128e384":"code","284e4dda":"code","9f4e4ac1":"code","da09b235":"code","557dc7db":"code","fa6add05":"code","d3485d26":"code","ca65633a":"code","ff8d63bb":"code","13959745":"code","72fe3862":"code","2e8fb66b":"code","4a90ea8e":"code","39f41f7c":"code","2e99a39a":"code","b987ef3c":"code","71d340b8":"code","5db58195":"code","7b1a9adb":"code","5a4bf8cb":"markdown","6744156b":"markdown","3039a597":"markdown","d1375ff6":"markdown","5998d958":"markdown","8f6ab426":"markdown","8fddd02c":"markdown","92fae952":"markdown","bf978dd7":"markdown","52b2ec3a":"markdown","40882784":"markdown","d9ea3008":"markdown","9b02b009":"markdown","771a953b":"markdown","824f5471":"markdown","9c437067":"markdown","b72340bd":"markdown","441e9844":"markdown"},"source":{"8fa294c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#Step1: Necessery imports\nimport pandas as pd\nimport numpy as np\nimport matplotlib as mpl\nimport scipy as scipy\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nimport statsmodels.formula.api as smf\nfrom pandas import DataFrame\nfrom sklearn import linear_model\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score , mean_absolute_error\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n#Step2: Loading the data \n#Change the csv file for another brand\n#Added Data types for memory optimization and faster loading\ndata = pd.read_csv('\/kaggle\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv')\ndata.shape","38d4abb5":"#machine learning and making predictions\n#Display columns\ndata.columns\n#drop empty values\ndata = data.dropna(axis=0)\n#selecting prediction target\ny = data.ApplicantIncome\n#Choosing features and stroring it in X\ndata_features = [ 'CoapplicantIncome','LoanAmount','Loan_Amount_Term','Credit_History' ]\nX = data[data_features]\n#Describe data in X\nX.describe()\n#Describe the head\nX.head()\n\n\n\n# Define model. Specify a number for random_state to ensure same results each run\ndata_model = DecisionTreeRegressor(random_state=1)\n\n# Fit model\ndata_model.fit(X, y)\n\n#Printing Predictions\nprint(\"Making predictions for the following 5 Applicants:\")\nprint(X.head())\nprint(\"The predictions are\")\nprint(data_model.predict(X.head()))","8c70555a":"#Evaluating and validating the model\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0)\n# Define model\ndata_model = DecisionTreeRegressor()\n# Fit model\ndata_model.fit(train_X, train_y)\n\n# get predicted prices on validation data\nval_predictions = data_model.predict(val_X)\nprint(mean_absolute_error(val_y, val_predictions))","483e93df":"#underfitting and overfitting\ndef get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y):\n    model = DecisionTreeRegressor(max_leaf_nodes=max_leaf_nodes, random_state=0)\n    model.fit(train_X, train_y)\n    preds_val = model.predict(val_X)\n    mae = mean_absolute_error(val_y, preds_val)\n    return(mae)\n# compare MAE with differing values of max_leaf_nodes\nfor max_leaf_nodes in [5, 50, 500, 5000]:\n    my_mae = get_mae(max_leaf_nodes, train_X, val_X, train_y, val_y)\n    print(\"Max leaf nodes: %d  \\t\\t Mean Absolute Error:  %d\" %(max_leaf_nodes, my_mae))","0b539179":"forest_model = RandomForestRegressor(random_state=1)\nforest_model.fit(train_X, train_y)\ndata_preds = forest_model.predict(val_X)\nprint(mean_absolute_error(val_y, data_preds))","6df2451c":"std = np.std(data)\nprint(std)\n\n\n","d128e384":"cv = np.std(data) \/ np.mean(data)\nprint(cv)","284e4dda":"var_full = np.var(data)\nprint(var_full)","9f4e4ac1":"#Step3:Describing the data\ndata.describe()","da09b235":"#Step3:Describing the data - finding the mode [most frequent]\ndata.mode","557dc7db":"#controls the numer of rows to be read in the dataframe\nstart, end = 0, 615","fa6add05":"\n\n\nfig = go.Figure(data=go.Scatter3d(\n    x=data['CoapplicantIncome'][start:end],\n    y=data['LoanAmount'][start:end],\n    z=data['Loan_Amount_Term'][start:end],\n    text=data['Credit_History'][start:end],\n    mode='markers',\n    marker=dict(\n        sizemode='diameter',\n        sizeref=1000,\n        size=data['ApplicantIncome'][start:end],\n        color = data['ApplicantIncome'][start:end],\n        colorscale = 'Viridis',\n        colorbar_title = 'USD<br>',\n        line_color='rgb(140, 140, 170)'\n    )\n))\n\n\n\n\n\n\n\n\nfig.update_layout(height=800, width=800,\n                  title='3-D Graph - X-CoapplicantIncome,Y-LoanAmount,Z-Loan_Amount_Term,Size-ApplicantIncome,Color-ApplicantIncome')\n\n\n\n\n\n\nfig.show()\n","d3485d26":"data.sort_values(by='CoapplicantIncome', ascending=True).head(10)\n","ca65633a":"data.sort_values(by='LoanAmount', ascending=True).tail(10)","ff8d63bb":"\ndata.sort_values(by='Loan_Amount_Term', ascending=True).head(10)","13959745":"data.sort_values(by='ApplicantIncome', ascending=True).tail(10)","72fe3862":"#correlate data\ncorr = data.corr()\n\n#using matplotlib to define the size\n\nplt.figure(figsize=(8, 8))\n\n#creating the heatmap with seaborn\nax = sns.heatmap(\n    corr, \n    vmin=-1, vmax=1, center=0,\n    cmap=sns.diverging_palette(20, 220, n=200),\n    square=True\n)\nax.set_xticklabels(\n    ax.get_xticklabels(),\n    rotation=45,\n    horizontalalignment='right'\n);","2e8fb66b":"# Contrasting heatmap with seaborn\n\nsns.set_theme(style=\"dark\")\n\n\n# Compute the correlation matrix\ncorr = data.corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=bool))\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(8, 8))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmin=-0.1, vmax=0.1, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","4a90ea8e":"corr = data.corr()\n\nmask = np.triu(np.ones_like(corr, dtype=np.bool))\ncorr = corr.mask(mask)\nfig = ff.create_annotated_heatmap(\n    z=corr.to_numpy().round(2),\n    x=list(corr.index.values),\n    y=list(corr.columns.values),       \n    xgap=3, ygap=3,\n    zmin=-1, zmax=1,\n    colorscale='fall',\n    colorbar_thickness=30,\n    colorbar_ticklen=3,\n)\nfig.update_layout(title_text='Correlation Matrix (impact relationship with numbers)',\n                  title_x=0.5,\n                  titlefont={'size': 20},\n                  width=800, height=800,\n                  xaxis_showgrid=False,\n                  xaxis={'side': 'bottom'},\n                  yaxis_showgrid=False,\n                  yaxis_autorange='reversed',                   \n                  paper_bgcolor=None,\n                  template=\"simple_white\"\n                  )\nfig.show()\n","39f41f7c":"sns.jointplot(x=\"ApplicantIncome\", y=\"Credit_History\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","2e99a39a":"sns.jointplot(x=\"ApplicantIncome\", y=\"Loan_Amount_Term\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","b987ef3c":"sns.jointplot(x=\"ApplicantIncome\", y=\"LoanAmount\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","71d340b8":"sns.jointplot(x=\"ApplicantIncome\", y=\"CoapplicantIncome\", data=data, kind = 'reg',fit_reg= True, size = 12)\nplt.show()","5db58195":"sns.pairplot(data,palette='bright')","7b1a9adb":"sns.set(style=\"ticks\", color_codes=True)\ng = sns.pairplot(data, kind=\"reg\", plot_kws={'line_kws':{'color':'red'}})\nplt.show()","5a4bf8cb":"# TOP 10:","6744156b":"# by LoanAmount","3039a597":"***Part1: Building the model***","d1375ff6":"# 3-D Visualization","5998d958":"***Variance***","8f6ab426":"***Part2 Evaluating the model***","8fddd02c":"#  PAIRPLOTS and Predictions","92fae952":"# Making Predictions\n*building mathematical Machine Learning Model model and making predictions\n*evaluating the model","bf978dd7":"# by CoapplicantIncome","52b2ec3a":"***Random Forest***","40882784":"***Standard deviation***","d9ea3008":"# by Loan_Amount_Term","9b02b009":"# Correlation Influence Heatmaps","771a953b":"# Describing the data ","824f5471":"# by ApllicantIncome","9c437067":"***Coefficient of Variation***","b72340bd":"# Jointplots correlating to and predicting ApplicantIncome","441e9844":"# Loan Prediction Problem\nLoan Prediction using Machine Learning\nProject idea \u2013 The idea behind this ML project is to build a model that will classify how much loan the user can take.\n\nIt is based on the user\u2019s marital status, education, number of dependents, and employments\n* Examines the average and makes predictions on various factors.\n* Creates 3-D Visualizations. \n* Shows the correlation between factors with heatmaps.\n* Is optimized to work with large datasets\n* Shows The Top 10"}}