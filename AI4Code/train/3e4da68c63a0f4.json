{"cell_type":{"387e1cae":"code","2816081a":"code","ab653ac4":"code","fadab0f9":"code","24821b9c":"code","7ebca042":"code","a37faf0f":"code","649a2e54":"code","4f62660d":"code","89db7f57":"code","8dc648cc":"code","08344c8a":"code","b7db0e6e":"code","a3f56c13":"code","d37e3337":"code","ffcc9534":"code","89e4ef2c":"code","daa51955":"code","69638cbb":"code","d79ec4f0":"code","5d1069fa":"code","1a24f4c3":"code","51cae4d3":"code","12952427":"code","ff75a288":"code","1ec80522":"code","b29fa7a3":"code","f06da514":"code","20a9b213":"code","58662bc2":"code","1ff91264":"code","77939b26":"code","5d8d7fcf":"code","2e7c62bd":"markdown","a5c58ecf":"markdown","204e5d96":"markdown","0cddf726":"markdown","393460d2":"markdown","1aa428b0":"markdown","9b103766":"markdown","0c6841a7":"markdown"},"source":{"387e1cae":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2816081a":"import numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nimport sklearn.metrics as metrics\nimport os","ab653ac4":"data = pd.read_csv('\/kaggle\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv')","fadab0f9":"data.head()","24821b9c":"data = data.drop(\"Id\", axis=1)\ndata.head()","7ebca042":"data.isnull().sum()","a37faf0f":"data.info()","649a2e54":"data['Married\/Single'].unique()","4f62660d":"data['House_Ownership'].unique()","89db7f57":"data['Car_Ownership'].unique()","8dc648cc":"data['Profession'].unique()","08344c8a":"data['CITY'].unique()","b7db0e6e":"data['STATE'].unique()","a3f56c13":"data = data.drop(\"CITY\", axis=1)","d37e3337":"data.head()","ffcc9534":"en = LabelEncoder()\ncatCols = ['Married\/Single','House_Ownership','Car_Ownership','Profession','STATE']\nfor cols in catCols:\n    data[cols] = en.fit_transform(data[cols])","89e4ef2c":"data.head()","daa51955":"data.info()","69638cbb":"Y = data[\"Risk_Flag\"]\nX = data.drop(\"Risk_Flag\",axis = 1)","d79ec4f0":"X.head()","5d1069fa":"Y.head()","1a24f4c3":"Y=pd.DataFrame(Y)","51cae4d3":"Y.head()","12952427":"X.shape","ff75a288":"Y.shape","1ec80522":"# Break off validation set from training data\nX_train_full, X_valid_full, Y_train, Y_valid = train_test_split(X, Y, train_size=0.8, test_size=0.2,\n                                                                random_state=0)","b29fa7a3":"Y_train.head()","f06da514":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, accuracy_score, roc_auc_score\n# Define the model\n\n    \n    # defining the model\nclf = XGBClassifier(learning_rate=0.1, \n                    n_estimators=1000, \n                    use_label_encoder=False,\n                    random_state=42)\n    \nclf.fit(X_train_full, Y_train, eval_metric='logloss')\npredictions = clf.predict(X_valid_full) \nprint(\"accuracy_score: \" + str(accuracy_score(Y_valid, predictions)))","20a9b213":"print(\"f1_score: \" + str(f1_score(Y_valid, predictions)))","58662bc2":"print(\"ROC AUC score: \" + str(roc_auc_score(Y_valid, predictions)))","1ff91264":"from sklearn.tree import tree\ndtc = tree.DecisionTreeClassifier()\ndtc.fit(X_train_full, Y_train)\npredsdtc = dtc.predict(X_valid_full)\nprint(\"accuracy_score: \" + str(accuracy_score(Y_valid, predsdtc)))","77939b26":"print(\"f1_score: \" + str(f1_score(Y_valid, predsdtc)))","5d8d7fcf":"print(\"ROC AUC score: \" + str(roc_auc_score(Y_valid, predsdtc)))","2e7c62bd":"# Decision Tree Classifier","a5c58ecf":"## Encoding Categorical Data","204e5d96":"# Pre Processing Data","0cddf726":"# Splitting Data as Test and Validation","393460d2":"# XGB Classifier","1aa428b0":"# Reading Data","9b103766":"# Splitting Data to X and Y","0c6841a7":"# Importing Necessary Libraries"}}