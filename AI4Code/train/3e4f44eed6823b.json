{"cell_type":{"ef8993a8":"code","93c717c0":"code","29af3b61":"code","0adcbc21":"code","a86119c2":"code","6effee4a":"code","361aa744":"code","abfea30b":"code","04a581a0":"code","37f5fb3e":"code","4779944d":"code","fb9ba072":"code","dfd00417":"code","deb83ee7":"code","014c4404":"code","aeb50898":"code","f45f1e1f":"code","6c6d4f17":"code","139ddcfd":"code","ffb7a536":"code","414307bf":"code","a5c9cd13":"code","7eadabca":"code","fc982252":"code","d828bb44":"code","ae9eb283":"code","dd829faf":"code","7a7a00a6":"code","00cf250d":"code","90486d80":"code","dbaf7b10":"code","b97089f3":"code","f104051c":"code","fc7115fa":"code","b712f0be":"markdown","08c511ee":"markdown","392c965c":"markdown","3442e73e":"markdown","68fe07ec":"markdown","6baa5047":"markdown","4eae5dc9":"markdown"},"source":{"ef8993a8":"import os,shutil\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nfrom PIL import Image\nimport pydicom as dicom\nfrom skimage.transform import resize\nimport cv2\nimport seaborn as sns\nsns.set_style('darkgrid')","93c717c0":"os.listdir('\/kaggle\/input\/rsna-pneumonia-detection-challenge')","29af3b61":"df=pd.read_csv('\/kaggle\/input\/rsna-pneumonia-detection-challenge\/stage_2_train_labels.csv')\ndf.head()","0adcbc21":"df['path']='\/kaggle\/input\/rsna-pneumonia-detection-challenge\/stage_2_train_images\/'+df['patientId'].astype(str)+'.dcm'","a86119c2":"df['path'][0]","6effee4a":"df.info()","361aa744":"negative=df[df['Target']==0]\nprint(len(negative))\nnegative.head()","abfea30b":"positive=df[df['Target']==1]\nunique_positive=positive[['path','patientId']]\npath=unique_positive['path'].unique()\npatientId=unique_positive['patientId'].unique()","04a581a0":"unique_positive=pd.DataFrame({'path':path,'patientId':patientId})\nlen(unique_positive)","37f5fb3e":"plt.figure(figsize=(30,20))\n\nheatmap=np.zeros((1024,1024))\n\nfor _,row in df.iterrows():\n    if row['Target']==1:\n        x=int(row['x'])\n        y=int(row['y'])\n        w=int(row['width'])\n        h=int(row['height'])\n        heatmap[y:y+h,x:x+w]+=1\n\nplt.axis('off')\n\nplt.imshow(heatmap,cmap='hot')\n    \n","4779944d":"os.mkdir('\/kaggle\/working\/data')\n\nos.mkdir('\/kaggle\/working\/data\/positive')\n\nos.mkdir('\/kaggle\/working\/data\/negative')","fb9ba072":"os.chdir('\/kaggle\/working')","dfd00417":"for _,row in tqdm(unique_positive.iterrows()):\n    img=dicom.read_file(row['path']).pixel_array\n    img=resize(img,(256,256))\n    plt.imsave('data\/positive\/'+row['patientId']+'.jpg',img,cmap='gray')","deb83ee7":"for _,row in tqdm(negative.iterrows()):\n    img=dicom.read_file(row['path']).pixel_array\n    img=resize(img,(256,256))\n    plt.imsave('data\/negative\/'+row['patientId']+'.jpg',img,cmap='gray')","014c4404":"plt.figure(figsize=(30,20))\nfor j,img in enumerate(os.listdir('\/kaggle\/input\/rsna-pneumonia-detection-challenge\/stage_2_train_images')):\n    path=os.path.join('\/kaggle\/input\/rsna-pneumonia-detection-challenge\/stage_2_train_images',img)\n    tar=df[df['path']==path]['Target'].values[0]\n    img=dicom.read_file(path).pixel_array\n    plt.subplot(4,4,j+1)\n    plt.axis('off')\n    if tar==0:\n        plt.title('Negative')\n    else:\n        plt.title('Positive')\n        \n        s=df[df['path']==path]\n        \n        for _,row in s.iterrows():\n            x=int(row['x'])\n            y=int(row['y'])\n            w=int(row['width'])\n            h=int(row['height'])\n            cv2.rectangle(img,(x,y),(x+h,y+h),(255,255,0),5)\n    plt.imshow(img,cmap='gray')\n    if(j==15):\n        break","aeb50898":"from tensorflow.keras.applications.vgg19 import VGG19,preprocess_input","f45f1e1f":"datagen=ImageDataGenerator(samplewise_center=True,samplewise_std_normalization=True,horizontal_flip=True,\n                          width_shift_range=0.05,rescale=1\/255,fill_mode='nearest',height_shift_range=0.05,\n                           preprocessing_function=preprocess_input,validation_split=0.1,\n                          )","6c6d4f17":"train=datagen.flow_from_directory('data',color_mode='rgb',batch_size=128,class_mode='binary',subset='training')\ntest=datagen.flow_from_directory('data',color_mode='rgb',batch_size=32,class_mode='binary',subset='validation')","139ddcfd":"train.class_indices","ffb7a536":"pre_trained_model = VGG19(input_shape = (256,256,3), \n                                include_top = False, \n                                weights = 'imagenet')\n\nfor layer in pre_trained_model.layers:\n  layer.trainable = False\n\n# pre_trained_model.summary()\n\nlast_layer = pre_trained_model.get_layer('block5_pool')\nprint('last layer output shape: ', last_layer.output_shape)\nlast_output = last_layer.output","414307bf":"from tensorflow.keras.layers import Flatten,Dense,Dropout,BatchNormalization,LeakyReLU,GaussianDropout\n\nmodel = Flatten()(last_output)\nmodel = Dense(1024)(model)\nmodel=LeakyReLU(0.1)(model)\nmodel=Dropout(0.25)(model)\nmodel=BatchNormalization()(model)\nmodel = Dense(1024)(model)\nmodel=LeakyReLU(0.1)(model)\nmodel=Dropout(0.25)(model)\nmodel=BatchNormalization()(model)\nmodel = Dense(1, activation='sigmoid')(model)","a5c9cd13":"from tensorflow.keras.models import Model\n\n\nfmodel = Model( pre_trained_model.input, model) \n\nfmodel.compile(optimizer = 'adam', \n              loss = 'binary_crossentropy', \n              metrics = ['accuracy'])\n# fmodel.summary()","7eadabca":"from tensorflow.keras.callbacks import EarlyStopping,ReduceLROnPlateau\n\n\nearly=EarlyStopping(monitor='accuracy',patience=3,mode='auto')\nreduce_lr = ReduceLROnPlateau(monitor='accuracy', factor=0.5, patience=2, verbose=1,cooldown=0, mode='auto',min_delta=0.0001, min_lr=0)","fc982252":"class_weight={0:1,1:3.3}","d828bb44":"fmodel.fit(train,epochs=13,callbacks=[reduce_lr],steps_per_epoch=100,validation_data=test,class_weight=class_weight)","ae9eb283":"fmodel.save('\/kaggle\/working\/model.h5')","dd829faf":"plt.figure(figsize=(30,20))\nval_acc=np.asarray(fmodel.history.history['val_accuracy'])*100\nacc=np.asarray(fmodel.history.history['accuracy'])*100\nacc=pd.DataFrame({'val_acc':val_acc,'acc':acc})\nacc.plot(figsize=(20,10),yticks=range(50,100,5))","7a7a00a6":"loss=fmodel.history.history['loss']\nval_loss=fmodel.history.history['val_loss']\nloss=pd.DataFrame({'val_loss':val_loss,'loss':loss})\nloss.plot(figsize=(20,10))","00cf250d":"y=[]\n\ntest.reset()\n\nfor i in tqdm(range(84)):\n    _,tar=test.__getitem__(i)\n    for j in tar:\n        y.append(j)","90486d80":"test.reset()\ny_pred=fmodel.predict(test)","dbaf7b10":"pred=[]\nfor i in y_pred:\n    if i[0]>=0.5:\n        pred.append(1)\n    else:\n        pred.append(0)","b97089f3":"from sklearn.metrics import roc_curve,auc,precision_recall_curve,classification_report","f104051c":"print(classification_report(y,pred))","fc7115fa":"plt.figure(figsize=(30,20))\nfpr,tpr,_=roc_curve(y,y_pred)\narea_under_curve=auc(fpr,tpr)\nprint('The area under the curve is:',area_under_curve)\nplt.plot(fpr,tpr,'b.-')\nplt.xlabel('false positive rate')\nplt.ylabel('true positive rate')\nplt.plot(fpr,fpr,linestyle='--',color='black')","b712f0be":"# **Reading The Metadata**","08c511ee":"# **Training**","392c965c":"# **Heatmap of the abnormalities**","3442e73e":"# **Storing jpg files**","68fe07ec":"# **Random Samples**","6baa5047":"# **Imports**","4eae5dc9":"# **Evaluation**"}}