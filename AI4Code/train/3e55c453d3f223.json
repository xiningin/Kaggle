{"cell_type":{"fe8a9b4f":"code","fb2673ce":"code","8cb78a2e":"code","a6dc4b43":"code","40755a4d":"code","1ae357c7":"code","685b8c77":"code","50b4dba1":"code","cff4414c":"code","7a792889":"code","9f0c60a7":"code","c0889202":"code","b8e0883f":"code","555efe58":"code","ad27eb23":"code","05c5d089":"code","830560d9":"markdown","749ec05f":"markdown","7b501d91":"markdown"},"source":{"fe8a9b4f":"import nltk\nfrom nltk.corpus import stopwords\nprint(stopwords.words('english'))","fb2673ce":"# Data preparation\n# Feature Engineering\n#     - Count vector as feature\n#     - Tf-idf as feature\n#     - word embedding as feature\n#     - Text or NLP based Feature\n#     - Topic model as feature\n# Training all type of model\n# Evaluating accuracy\n# confusion matrix to check the accuracy ","8cb78a2e":"# 1. Data Preparation\nimport pandas as pd\n\ndata = pd.read_csv(\"..\/input\/bbc-fulltext-and-category\/bbc-text.csv\")\ndata.head()","a6dc4b43":"data.info()","40755a4d":"data[\"label\"]=data[\"category\"]\ndata[\"input\"]= data[\"text\"]\ndata.drop([\"category\",\"text\"], axis =1,inplace = True)","1ae357c7":"data[\"label\"].unique()","685b8c77":"# data[\"input\"].str.split()\ndata","50b4dba1":"# lable encoding for lables\nfrom sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\ndata[\"label\"] = encoder.fit_transform(data[\"label\"])\ndata\n","cff4414c":"from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.model_selection import train_test_split\n\n# count vector for text\ncount_vect = CountVectorizer(analyzer = \"word\")\ncount_vec_X = count_vect.fit_transform(data[\"input\"])\n\ncvtrain_x,cvtest_x,cvtrain_y,cvtest_y = train_test_split(count_vec_X,data[\"label\"],test_size = 0.2)","7a792889":"# tfidf vector for text on word level\ntfidf_obj = TfidfVectorizer(analyzer = \"word\", max_features = 5000)\ntfidf_vec_X = tfidf_obj.fit_transform(data[\"input\"])\ntfidf_train_x,tfidf_test_x,tfidf_train_y,tfidf_test_y = train_test_split(tfidf_vec_X,data[\"label\"],test_size = 0.2)\n","9f0c60a7":"# tfidf on ngram level\ntfidf_ngram = TfidfVectorizer(analyzer = \"word\", ngram_range =(2,3),max_features = 5000)\ntfidf_ngram_X = tfidf_ngram.fit_transform(data[\"input\"])\nngram_train_x,ngram_test_x,ngram_train_y,ngram_test_y = train_test_split(tfidf_vec_X,data[\"label\"],test_size = 0.2)","c0889202":"#utility function for model building\ndef train_model(model_classifier, train_x,test_x, train_y,test_y):\n    model_classifier.fit(train_x,train_y)\n    \n    prediction = model_classifier.predict(test_x)\n    print(prediction)\n    \n    return metrics.accuracy_score(prediction, test_y)\n    ","b8e0883f":"from sklearn import linear_model, naive_bayes, metrics, svm\n\n# naivebayes model on count vector\naccuracy = train_model(naive_bayes.MultinomialNB(),cvtrain_x,cvtest_x,cvtrain_y,cvtest_y)\nprint(\"NB, Count Vectors: \", accuracy)\n\n# naivebayes model on tfidf vector\naccuracy = train_model(naive_bayes.MultinomialNB(),tfidf_train_x,tfidf_test_x,tfidf_train_y,tfidf_test_y)\nprint(\"NB,Tfidf word level Vectors: \", accuracy)\n\n\n# naivebayes model on tfidf ngram vector\naccuracy = train_model(naive_bayes.MultinomialNB(),ngram_train_x,ngram_test_x,ngram_train_y,ngram_test_y)\nprint(\"NB,Tfidf ngram level Vectors: \", accuracy)\n\n\n","555efe58":"accuracy = train_model(linear_model.LogisticRegression(),cvtrain_x,cvtest_x,cvtrain_y,cvtest_y)\nprint(\"Logistic regression,count Vectors: \", accuracy)\n\n# Logistic Regression model on tfidf vector\naccuracy = train_model(linear_model.LogisticRegression(),tfidf_train_x,tfidf_test_x,tfidf_train_y,tfidf_test_y)\nprint(\"Logistic Regression,Tfidf word level Vectors: \", accuracy)\n\n\n# Logistic Regression model on tfidf ngram vector\naccuracy = train_model(linear_model.LogisticRegression(),ngram_train_x,ngram_test_x,ngram_train_y,ngram_test_y)\nprint(\"Logistic Regression,Tfidf ngram Vectors: \", accuracy)","ad27eb23":"# support Vector machine on count vector\naccuracy = train_model(svm.SVC(),cvtrain_x,cvtest_x,cvtrain_y,cvtest_y)\nprint(\"Support vector machine,count Vectors: \", accuracy)\n\n# support Vector machine on tfidf vector\naccuracy = train_model(svm.SVC(),tfidf_train_x,tfidf_test_x,tfidf_train_y,tfidf_test_y)\nprint(\"Support vector machine,Tfidf word level Vectors: \", accuracy)\n\n\n# support Vector machine on tfidf ngram vector\naccuracy = train_model(svm.SVC(),ngram_train_x,ngram_test_x,ngram_train_y,ngram_test_y)\nprint(\"Support vector machine,Tfidf ngram Vectors: \", accuracy)","05c5d089":"from sklearn import ensemble\n\n# random forest on count vector\naccuracy = train_model(ensemble.RandomForestClassifier(),cvtrain_x,cvtest_x,cvtrain_y,cvtest_y)\nprint(\"Random forest classifier,count Vectors: \", accuracy)\n\n# random forest on tfidf word vector\naccuracy = train_model(ensemble.RandomForestClassifier(),tfidf_train_x,tfidf_test_x,tfidf_train_y,tfidf_test_y)\nprint(\"Random forest classifier,Tfidf word level Vectors: \", accuracy)\n\n# random forest on tfidf ngram vector\naccuracy = train_model(ensemble.RandomForestClassifier(),ngram_train_x,ngram_test_x,ngram_train_y,ngram_test_y)\nprint(\"Random forest classifier,Tfidf ngram Vectors: \", accuracy)\n","830560d9":"\n**Naive_bayes Classifer**","749ec05f":"# Bagging\/Ensemble model- Random Forest","7b501d91":"**Logistic Regression**"}}