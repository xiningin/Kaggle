{"cell_type":{"50ea423e":"code","7e7392a4":"code","88163e73":"code","16e13783":"code","f8f603ae":"code","4bd303f9":"code","5af869c0":"code","439af4b0":"code","fd513b8b":"code","61e3ae1f":"code","21142af1":"code","4f897168":"code","4e4de399":"code","cd119f1f":"code","2d32b223":"code","0a819812":"code","323b9091":"markdown","bd09270b":"markdown","338c1e40":"markdown","2bf94f16":"markdown","aab57214":"markdown"},"source":{"50ea423e":"# import package with helper functions \nimport bq_helper\n\n# create a helper object for this dataset\naccidents = bq_helper.BigQueryHelper(active_project=\"bigquery-public-data\",\n                                   dataset_name=\"nhtsa_traffic_fatalities\")","7e7392a4":"accidents.list_tables()","88163e73":"accidents.head('accident_2015')","16e13783":"query_2015 = \"\"\" SELECT  COUNT(consecutive_number),\n                         EXTRACT(HOUR FROM timestamp_of_crash)\n                 FROM `bigquery-public-data.nhtsa_traffic_fatalities.accident_2015`\n                 GROUP BY EXTRACT(HOUR FROM timestamp_of_crash)\n                 ORDER BY COUNT(consecutive_number) DESC\n             \"\"\" \n\nquery_2016 = \"\"\" SELECT  COUNT(consecutive_number),\n                         EXTRACT(HOUR FROM timestamp_of_crash)\n                 FROM `bigquery-public-data.nhtsa_traffic_fatalities.accident_2016`\n                 GROUP BY EXTRACT(HOUR FROM timestamp_of_crash)\n                 ORDER BY COUNT(consecutive_number) DESC\n            \"\"\" ","f8f603ae":"accident_hours_2015 = accidents.query_to_pandas_safe(query_2015)\naccident_hours_2016 = accidents.query_to_pandas_safe(query_2016)","4bd303f9":"accident_hours_2015.head(7)","5af869c0":"accident_hours_2016.head(7)","439af4b0":"sorted_for_plot_2015 = accident_hours_2015.sort_values('f1_')\nsorted_for_plot_2016 = accident_hours_2016.sort_values('f1_')","fd513b8b":"import matplotlib.pyplot as plt\n\nx = sorted_for_plot_2015.f1_\ny = sorted_for_plot_2015.f0_\n\nxx = sorted_for_plot_2016.f1_\nyy = sorted_for_plot_2016.f0_\n\nplt.figure(figsize=(10,5))\nplt.plot(x,y, label='2015')\nplt.plot(xx,yy, label='2016')\nplt.legend()\n\nplt.xlabel('hour of a day')\nplt.title('number of accidents for each hour in a day \\n in 2015 and 2016')\n\nplt.grid()\nplt.show()","61e3ae1f":"accidents.head('vehicle_2015',3)","21142af1":"query = \"\"\" SELECT  registration_state_name,\n                    COUNT(registration_state_name)\n            FROM `bigquery-public-data.nhtsa_traffic_fatalities.vehicle_2015`\n            WHERE hit_and_run = 'Yes'\n            GROUP BY registration_state_name\n            ORDER BY COUNT(registration_state_name) DESC\n        \"\"\"","4f897168":"state_vehicle = accidents.query_to_pandas_safe(query)","4e4de399":"state_vehicle.head(7)","cd119f1f":"import matplotlib.pyplot as plt\nplt.figure(figsize=(15,6))\nplt.plot(state_vehicle.registration_state_name, state_vehicle.f0_, marker = 'o')\nplt.xticks(rotation=90)\nplt.title('number of vehicles registered in each state that were involved in hit-and-run accidents')\nplt.grid(color='b', linestyle='-', linewidth=0.5)\nplt.show()","2d32b223":"state_vehicle_dropped = state_vehicle.drop([0]) # lets drop unknown state names","0a819812":"import matplotlib.pyplot as plt\nplt.figure(figsize=(15,6))\nplt.plot(state_vehicle_dropped.registration_state_name, state_vehicle_dropped.f0_, marker = 'o')\nplt.xticks(rotation=90)\nplt.title('number of vehicles registered in each state that were involved in hit-and-run accidents')\nplt.grid(color='b', linestyle='-', linewidth=0.5)\nplt.show()","323b9091":"#### 2) Which state has the most hit and runs?\n* Return a table with the number of vehicles registered in each state that were involved in hit-and-run accidents, sorted by the number of hit and runs. Use either the vehicle_2015 or vehicle_2016 table for this, especially the registration_state_name and hit_and_run columns (it may be helpful to view the hit_and_run column to understand its contents).\n","bd09270b":"---\n# Keep Going\n[Click here](https:\/\/www.kaggle.com\/dansbecker\/as-with) to learn how *WITH-AS* clauses  can clean up your code and help you construct more complex queries.\n\n# Feedback\nBring any questions or feedback to the [Learn Discussion Forum](kaggle.com\/learn-forum).\n\n----\n\n*This tutorial is part of the [SQL Series](https:\/\/www.kaggle.com\/learn\/sql) on Kaggle Learn.*","338c1e40":"Then write the code to answer the questions below","2bf94f16":"To plot the dataframes lets first sort the values in f1_","aab57214":"# Questions\n\n#### 1) Which hours of the day do the most accidents occur during?\n* Return a table showing how many accidents occurred in each hour of the day in 2015, sorted by the the number of accidents which occurred each hour. Use either the accident_2015 or accident_2016 table for this, and the timestamp_of_crash column (there is an hour_of_crash column, but if you use that one you won't get a chance to practice with dates).\n\n**Hint:** You will probably want to use the [EXTRACT() function](https:\/\/cloud.google.com\/bigquery\/docs\/reference\/standard-sql\/functions-and-operators#extract_1) for this.\n"}}