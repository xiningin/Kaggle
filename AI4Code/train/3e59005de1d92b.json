{"cell_type":{"f3f25139":"code","10319d8c":"code","37f0eb2f":"code","2cf67252":"code","e7431662":"code","c203f4fc":"code","c06c0ae8":"code","6d00fa98":"code","3c8d5702":"markdown","033f0a4d":"markdown","e08b759a":"markdown","1903443f":"markdown","713cd832":"markdown","1bbebfd4":"markdown","4e7976fe":"markdown"},"source":{"f3f25139":"import numpy as np\nimport pandas as pd\nfrom sklearn.impute import KNNImputer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom imblearn.combine import SMOTEENN\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","10319d8c":"train = pd.read_csv('\/kaggle\/input\/bri-data-hackathon-pa\/train.csv')\ntrain.drop_duplicates(inplace = True)\ntrain.dropna(inplace = True)\ntest = pd.read_csv('\/kaggle\/input\/bri-data-hackathon-pa\/test.csv')","37f0eb2f":"job_level = {'JG06' : 3,'JG05' : 2,'JG04' : 1,'JG03' : 0}\ntrain['job_level'] = train['job_level'].map(job_level)\ntest['job_level'] = test['job_level'].map(job_level)\n\nperson_level = {'PG08' : 7,'PG07' : 6,'PG06' : 5,'PG05' : 4,'PG04' : 3,'PG03' : 2,'PG02' : 1,'PG01' : 0}\ntrain['person_level'] = train['person_level'].map(person_level)\ntest['person_level'] = test['person_level'].map(person_level)\n\ngender = {1 : '1',2 : '2'}\ntrain['gender'] = train['gender'].map(gender)\ntest['gender'] = test['gender'].map(gender)\n\nEducation_level = {'level_5' : 5,'level_4' : 4,'level_3' : 3,'level_2' : 2,'level_1' : 1,'level_0' : 0}\ntrain['Education_level'] = train['Education_level'].map(Education_level)\ntest['Education_level'] = test['Education_level'].map(Education_level)\n\ntrain = pd.get_dummies(train, prefix = ['type','gender','married'])\ntest = pd.get_dummies(test, prefix = ['type','gender','married'])\n\ntahun = 2020\ntrain['age'] = tahun - train['age']\ntrain['year_graduated'] = train['year_graduated'] + train['age'] - tahun\ntest['age'] = tahun - test['age']\ntest['year_graduated'] = test['year_graduated'] + test['age'] - tahun","2cf67252":"train = train.sort_values('Best Performance').reset_index(drop = True)\n\nfor index in train[(train['GPA'] == 0)|(train['GPA'] > 4)|(train['GPA'] < 2.5)].index:\n    train.at[index,'GPA'] = np.nan\n\nimputed = KNNImputer(n_neighbors = 7).fit_transform(train.drop(columns = 'Best Performance').to_numpy())\ntrain['GPA'] = pd.Series(imputed[:,8]).values\n\nfor index in test[(test['GPA'] == 0)|(test['GPA'] > 4)|(test['GPA'] < 2.5)].index:\n    test.at[index,'GPA'] = np.nan\n\nimputed = KNNImputer(n_neighbors = 7).fit_transform(test.to_numpy())\ntest['GPA'] = pd.Series(imputed[:,8]).values","e7431662":"X = train.drop(columns = 'Best Performance')\ny = train['Best Performance']\n\naverage = y.value_counts()[0]\nbest = y.value_counts()[1]\n\nprint('Jumlah karyawan average performance mula-mula :',average)\nprint('Jumlah karyawan best performance mula-mula    :',best)","c203f4fc":"ratio = average\/best\n\nwhile (ratio <= 0.95)|(ratio >= 1.05):\n    X, y = SMOTEENN(random_state = 42).fit_resample(X,y)\n    average = y.value_counts()[0]\n    best = y.value_counts()[1]\n    ratio = average\/best\n\nprint('Jumlah karyawan average performance setelah resampling :',average)\nprint('Jumlah karyawan best performance setelah resampling    :',best)","c06c0ae8":"clf = RandomForestClassifier(random_state = 42)\n\nscores = cross_val_score(clf,X,y,scoring = 'roc_auc')\nprint('Rerata skor ROC AUC',scores.mean(),'dengan simpangan baku',scores.std())","6d00fa98":"model = clf.fit(X,y)\n\npd.Series(model.predict_proba(test)[:,1],name = 'Best Performance').to_csv('submission.csv',index_label = 'index')","3c8d5702":"Klasifikasi dilakukan menggunakan `RandomForrestClassifier()` dengan `cross validation` untuk menguji keumuman model. Model dievaluasi dengan `roc_auc` sebagaimana metrics yang digunakan oleh platfom kaggle (panitia) untuk kompetensi ini.","033f0a4d":"Dengan memeriksa `train['Best Performance'].value_counts()`, kita mengetahui bahwa kelas target tidak seimbang. Untuk mengatasi ketidakseimbangan tersebut, kita akan melakukan resampling dengan memanfaatkan pustaka imblearn.combine, khususnya method `SMOTEENN()`. Sebagaimana disampaikan dalam `[1]`, method ini adalah kombinasi oversampling menggunakan SMOTE dan undersampling menggunakan Edited Nearest Neighbours. Notebook ini sebagian juga diilhami oleh karya [berikut](https:\/\/www.kaggle.com\/yevonnaelandrew\/imbalanced-classification-balanced-classifier).","e08b759a":"Kolom `job_level`, `person_level`, dan `Education_level` menunjukkan suatu tingkatan, sehingga akan disandikan menggunakan skema ordinal encoding. Kolom `Employee_type`, `gender`, dan `marital_status_maried(Y\/N)` dianggap tidak menunjukkan suatu tingkatan, sehingga akan disandikan menggunakn skema one-hot encoding. Kolom `age` dan `year_graduated` juga diubah masing-masing ke dalam umur karyawan saat ini dan umur karyawan saat lulus.","1903443f":"Referensi\n\n`[1]` G. Batista, R. C. Prati, M. C. Monard. \u201cA study of the behavior of several methods for balancing machine learning training data,\u201d ACM Sigkdd Explorations Newsletter 6 (1), 20-29, 2004.\n\n`[2]` Olga Troyanskaya, Michael Cantor, Gavin Sherlock, Pat Brown, Trevor Hastie, Robert Tibshirani, David Botstein and Russ B. Altman, Missing value estimation methods for DNA microarrays, BIOINFORMATICS Vol. 17 no. 6, 2001 Pages 520-525.","713cd832":"Kualitas prediksi dengan teknik seperti di atas ternyata hanya menghasilkan skor `roc_auc` sebesar 0.530047 saja.","1bbebfd4":"Iterasi pertama untuk method `SMOTEENN()` sebenarnya sudah menghasilkan kelas yang lebih seimbang. Namun, saya ingin mencoba melakukan iterasi pada method `SMOTEENN()` sampai dengan terpenuhinya perbandingan kelas 1 +\/- 0.05. Tidak ada alasan khusus terkait hal ini, melainkan hanya coba-coba semata untuk melihat pengaruh iterasi `SMOTEENN()` terhadap sebaran data.","4e7976fe":"Jika diperiksa melalui `train.isna().sum()` maupun `test.isna().sum()`, didapati bahwa kolom `GPA` mengandung missing values. Ketimbang mengisinya dengan mean atau median, saya lebih tertarik untuk melakukan imputasi menggunakan method `KNNImputer()` setelah membaca referensi `[2]`."}}