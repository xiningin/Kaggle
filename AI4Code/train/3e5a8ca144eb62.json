{"cell_type":{"af2e3124":"code","7f56ed51":"code","6d97ccf8":"code","e63ec917":"code","7ef3fed7":"code","b056a3e8":"code","3694a6db":"code","6103db9d":"code","e80cd27c":"code","de1b5974":"code","601151f1":"code","9d086ea8":"code","c5793129":"code","ddabef40":"code","43ecf912":"code","ff6100bb":"code","8822d697":"code","3b41677c":"code","c110f718":"code","02e1b3f3":"code","827554b8":"code","55a6596a":"code","b3930248":"code","5b618715":"code","91947d58":"code","c244aa5c":"code","24a0c1db":"code","cc8331e6":"code","7110d651":"code","5326d362":"code","390990ab":"code","5efcda36":"code","e0155abd":"code","f911a0f5":"code","8b3b1626":"code","48dda1dd":"code","ec422500":"code","0022e56d":"code","755ac74d":"code","f486f6f1":"code","dea5ef0e":"code","1ea4f467":"code","3580d70c":"code","1ad9e528":"code","64db714d":"code","f88b3b30":"code","3a68cc11":"code","f8e9e02a":"code","8477cb76":"code","817087b7":"code","a6918961":"code","fedcd19d":"code","cfec8913":"code","abed9aca":"code","0ae96ba2":"code","7bcb792b":"code","04515aa5":"code","53108638":"code","d519636a":"code","74a9c7a0":"code","c1fe0330":"code","eff04dae":"code","28d77f3d":"code","cddfe888":"code","d2cedf2b":"markdown","b7410058":"markdown","ac769c24":"markdown","218309ec":"markdown","2f0084d3":"markdown"},"source":{"af2e3124":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f56ed51":"import plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\nfrom plotly import subplots\nimport plotly.figure_factory as ff\nimport matplotlib.pyplot as plt\n\nfrom pandas_profiling import ProfileReport\nimport seaborn as sns\nfrom sklearn import metrics\nfrom scipy import stats\n\nfrom copy import deepcopy","6d97ccf8":"# Defining all our palette colours.\nprimary_blue = \"#496595\"\nprimary_blue2 = \"#85a1c1\"\nprimary_blue3 = \"#3f4d63\"\nprimary_grey = \"#c6ccd8\"\nprimary_black = \"#202022\"\nprimary_bgcolor = \"#f4f0ea\"\n\nprimary_green = px.colors.qualitative.Plotly[2]\n\nplt.rcParams['axes.facecolor'] = primary_bgcolor\n\ncolors = [primary_blue, primary_blue2, primary_blue3, primary_grey, primary_black, primary_bgcolor, primary_green]\nsns.palplot(sns.color_palette(colors))","e63ec917":"df = pd.read_csv('..\/input\/kaggle-survey-2020\/kaggle_survey_2020_responses.csv')\ndf.head()","7ef3fed7":"df=df.loc[1:, :]\ndf.head()","b056a3e8":"df.isna().sum()","3694a6db":"#Split between professionals and students\nq23c = [column for column in df.columns if 'Q23' in column]\nq23c","6103db9d":"df.shape","e80cd27c":"df[q23c].isnull().sum(axis=1)","de1b5974":"len(q23c)","601151f1":"df.loc[20033, \"Q23_Part_1\":\"Q23_OTHER\"]","9d086ea8":"df_prof = df[df[q23c].isnull().sum(axis=1)!=len(q23c)]\ndf.loc[df[q23c].isnull().sum(axis=1) != len(q23c), 'Prof_Stud'] = 'Professional'\n\ndf_stud = df[df['Q5']=='Student']\ndf.loc[df['Q5']=='Student', 'Prof_Stud'] = 'Student'","c5793129":"df_stud.head()","ddabef40":"df_prof.head()","43ecf912":"# The Q1 answer becomes the index, then we reset it so it takes the name of 'index' column\npd.DataFrame(df['Q1'].value_counts().reset_index())","ff6100bb":"q = pd.DataFrame(df['Q1'].value_counts().reset_index().sort_values('index'))\nq.columns = ['ages', 'value'] #rename columns\n\nfig = go.Figure(go.Scatter(\n                x=q['ages'],\n                y=q['value'],\n                mode='lines+markers+text',\n                text=q['value'],\n                textposition='top right'\n))\n\nfig.update_layout(\n    xaxis={'categoryorder':'category ascending'})\n\nfig.show()","8822d697":"df['Q2']","3b41677c":"q = df['Q2'].value_counts().sort_values()\nfig = go.Figure(go.Bar\n               (x=q.values,\n               y=q.index,\n               text=q.values,\n               textposition=\"auto\",\n               orientation='h'))\nfig.update_traces(\n    marker_line_color = 'black',\n    marker_line_width = 1, \n    opacity = 0.8,\n)\nfig.show()","c110f718":"pd.DataFrame(df['Q3'].value_counts()[:10].reset_index())","02e1b3f3":"#Automatically sorts in descending order\nq3 = pd.DataFrame(df['Q3'].value_counts()[:10].reset_index())\nq3.loc[q3['index'] == 'United States of America', 'index'] = 'United States'\nq3.loc[q3['index'] == 'United Kingdom of Great Britain and Northern Ireland', 'index'] = 'United Kingdom'\n\nregions_df = pd.read_csv('\/kaggle\/input\/countries-iso-codes-continent-flags-url\/countries_continents_codes_flags_url.csv')\nq3 = q3.merge(regions_df, left_on='index', right_on='country', how='left')\n\nfig = go.Figure(go.Bar(\n                x=q3['index'],\n                y=q3['Q3'],\n                text = q.values,\n                textposition=\"auto\",\n                texttemplate = \"%{value:,s}\",))\n\nfig.update_traces(\n    marker_color='rgb(158,202,225)', \n    marker_line_color='rgb(8,48,107)',\n    marker_line_width=1.5, \n    opacity=0.6,\n)\nmax_y_val = q3['Q3'].max()\nfor country, flag_url, ppl_vac in zip(q3['index'], q3['image_url'], q3['Q3']):\n    if not flag_url or not isinstance(flag_url, str):\n        continue\n    fig.add_layout_image(\n        dict(\n            source=flag_url,\n            x=country, \n            y=ppl_vac + 0.1 * max_y_val,\n            sizex=0.5, \n            sizey=0.08 * max_y_val,\n            xanchor=\"center\", yanchor=\"bottom\",\n            sizing='stretch',\n            xref='x',\n            yref=\"y\",\n        ),\n    )\n\nfig.update_yaxes(range=[0, max_y_val + 0.2*max_y_val])\nfig.update_layout(\n    title = 'Top 10: Residence country',\n)\nfig.show()","827554b8":"q4 = df['Q4'].value_counts()[:10]\nfig = go.Figure(\ngo.Pie(\nlabels=q4.index,\nvalues=q4.values,\npull = [0.1]))\n\nfig.update_traces(\n    hoverinfo='label+percent', \n    textinfo='value', \n    textfont_size=15,\n    marker=dict(\n        line=dict(color='#000000', width=1)\n    )\n)\nfig.update_layout(\n    title = 'Kagglers education',\n)\nfig.show()","55a6596a":"q5 = df['Q5'].value_counts()\n\ncolors = px.colors.qualitative.Light24\n\nfig = go.Figure(go.Bar(\n    y = q5.values,\n    x = q5.index,\n    text = q5.values,\n    textposition=\"auto\",\n    texttemplate = \"%{value:,s}\",\n    marker_color = colors,\n    # orientation='h',\n))\nfig.update_traces(\n    marker_line_color = 'black',\n    marker_line_width = 1, \n    opacity = 0.8,\n)\nfig.show()","b3930248":"df['Q5']","5b618715":"#https:\/\/plotly.com\/python\/horizontal-bar-charts\/\nfields = df['Q5'].unique()\neducation_df = pd.DataFrame()\n\ncolours_coffe = [\"#a2885e\", \"#e9cf87\", \"#f1efd9\", \"#8eb3aa\", \"#235f83\", primary_blue3]\n\nfor field in fields:\n    education_df[field] = df[df[\"Q5\"]==field]['Q4'].value_counts()\neducation_df","91947d58":"df[df[\"Q5\"]=='Student']['Q4'].value_counts()","c244aa5c":"education_df = education_df.dropna(axis=1, how='all')\neducation_df = education_df.drop('I prefer not to answer')\neducation_df = education_df \/ education_df.sum()\neducation_df","24a0c1db":"#Putting rows in order of qualification\neducation_df = education_df.reindex([\"Doctoral degree\", \"Master\u2019s degree\", \n                                     \"Professional degree\", \"Bachelor\u2019s degree\", \n                                     \"Some college\/university study without earning a bachelor\u2019s degree\", \n                                     \"No formal education past high school\"])\neducation_df","cc8331e6":"education_df.index","7110d651":"education_df.loc['Doctoral degree']","5326d362":"traces = []\nfor i, field in enumerate(education_df.index):\n    traces.append(go.Bar(\n        y = education_df.columns,\n        x = education_df.loc[field],\n        name = field,\n        marker = dict(color = colours_coffe[i]),\n        orientation = \"h\"\n    ))\n    \nlarge_title_format = \"<span style='font-size:30px; font-family:Times New Roman'>What educational qualifications do I need?<\/span>\"\nlayout = dict(\n    title = dict(text=large_title_format, x=0.5, y=0.963),\n    xaxis = dict(\n        title=\"<span style='font-size:13px; font-family:Helvetica'><b>Color Key: <\/b>Educational qualifications of professionals<\/span>\", \n        side=\"top\",\n        title_standoff=0, \n        domain=[0,0.95], \n        showticklabels = False\n    ),\n    xaxis2 = dict(domain=[0, 1], tickformat = '%'),\n    yaxis = dict(domain=[0.85,1], showticklabels = False),\n    yaxis2={\n        'categoryorder':'array',\n        'categoryarray': education_df.loc[\"Doctoral degree\"].sort_values(ascending=True).keys(),\n        'domain':[0,0.83]\n    },\n    barmode = \"stack\",\n    bargap = 0.05,\n    showlegend = False,\n    width = 700,\n    height = 600,\n    # plot_bgcolor = \"#fff\"\n)\n\n# Adding a separate subplot that will act as a color key\ncolorscale = ff.create_annotated_heatmap(\n    z=[[1,2,3,4,5,6]],\n    annotation_text = [[text \n                       for text in [\"Doctoral<br>degree\",\"Master's<br>degree\",\"Professional<br>degree\",\"Bachelor's<br>degree\",\"Education<br>without<br>degree\",\"High school<br>education\"]\n                      ]],\n    colorscale= [\n        [0.000,\"#a2885e\"],[0.166,\"#a2885e\"],\n        [0.166,\"#e9cf87\"],[0.333,\"#e9cf87\"],\n        [0.333,\"#f1efd9\"],[0.500,\"#f1efd9\"],\n        [0.500,\"#8eb3aa\"],[0.666,\"#8eb3aa\"],\n        [0.666,\"#235f83\"],[0.833,\"#235f83\"],\n        [0.833,primary_blue3],[1.000,primary_blue3],\n    ],\n    font_colors = [\"white\", \"white\", \"black\", \"white\", \"white\", \"white\"],\n    xgap = 1.5,\n    showscale = False\n)\n\nfig = subplots.make_subplots(\n    rows=2, \n    cols=1, \n    shared_yaxes=True, \n    shared_xaxes=False, \n    horizontal_spacing=0.02, \n    vertical_spacing=0.01\n)\n\nfig.append_trace(colorscale.data[0],1,1); \n\nfor trace in traces:\n    fig.add_trace(trace, 2, 1)\n\n# Workaround to show annotations with ff.create_annotated_heatmap() subplots.\nannot1 = list(colorscale.layout.annotations)\nfor k in range(len(annot1)):\n    annot1[k]['xref'] = 'x'\n    annot1[k]['yref'] = 'y'\nfig.update_layout(annotations=annot1) \nfig.update_layout(layout)\nfig.show()","390990ab":"q6 = df['Q6'].value_counts()\nq6","5efcda36":"fig = go.Figure(go.Pie(\n    labels = q6.index,\n    values = q6.values,\n    hole=.3,\n    # pull=[0.2, 0, 0, 0]\n))\nfig.update_traces(\n    hoverinfo='value+percent', \n    textinfo='label+percent', \n    textfont_size=13,\n    marker=dict(\n        line=dict(color='#000000', width=.7)\n    )\n)\nfig.update_layout(\n    title = 'Kagglers programming experience',\n)\nfig.show()","e0155abd":"df.iloc[:, 7:25]","f911a0f5":"q = {}\nfor i in range(1, 13):\n    #Each question has either an answer or NaN\n    #Each answer covers a different programming language\n    #We iterate over each q, extract the language name and total value counts\n    #Covert it into a dictionary and store it in q using the update function\n    q.update(dict(df[f'Q7_Part_{i}'].value_counts()))\nprint(q)","8b3b1626":"q = pd.DataFrame(q.items(), columns=['language', 'total'])\nq['color'] = px.colors.qualitative.Light24[:12]\nq.head()","48dda1dd":"q = q.sort_values(['total'], ascending=False)\nq.head()","ec422500":"q['language']","0022e56d":"fig = go.Figure(go.Bar(\n    y = q['total'],\n    x = q['language'],\n    text = q['total'],\n    textposition=\"auto\",\n    texttemplate = \"%{value:,s}\",\n    marker_color = q['color'],\n    # orientation='h',\n))\nfig.update_traces(\n    marker_line_color = 'black',\n    marker_line_width = 1, \n    opacity = 0.9,\n)\nfig.update_layout(\n    xaxis={'categoryorder':'total descending'}\n)\nfig.show()","755ac74d":"q7c = [column for column in df.columns if 'Q7' in column]\ndf_q7 = pd.DataFrame()\nq7c","f486f6f1":"df['Q7_Part_1']","dea5ef0e":"for column in q7c:\n    #Extract language of a column - will be all matching\n    #Find the number of students and professors that use it, divide it by total\n    #Add them as new columns\n    lang = df[column].dropna().unique()[0]\n    df_q7.loc['Student', lang] = df_stud[column].notnull().sum() \/ len(df_stud)\n    df_q7.loc['Professional', lang] = df_prof[column].notnull().sum() \/ len(df_prof)","1ea4f467":"df_q7","3580d70c":"df_q7.loc['Student']","1ad9e528":"df_q7.T","64db714d":"fig = go.Figure()\n\n# Two enumerations as we have two bars grouped in the graph\nfor i, category in enumerate(df_q7.index):\n    fig.add_trace(go.Bar(\n        y = df_q7.columns,\n        x = df_q7.loc[category],\n        orientation = 'h',\n        marker = dict(color = [primary_blue2, primary_blue][i]),\n        text = np.round(df_q7.loc[category] * 100),\n        textposition = 'auto',\n        texttemplate = \"%{text}%\",\n        name = category,\n    ))\n    \nfig.update_layout(\n    title = 'Which languague should I Learn?',\n    #Gap after title\n    margin = dict(t=150),\n    legend=dict(\n                orientation=\"h\",\n                yanchor='top',xanchor='center',\n                y= 1.06,x=0.5,\n                font=dict(size= 16),\n                traceorder='reversed',\n               ),\n    yaxis={'categoryorder':'array',\n           'categoryarray': df_q7.T.sort_values('Professional', ascending=True).index\n          },\n    xaxis=dict(side=\"top\",showgrid=False, tickformat=\"%\"),\n    barmode = \"group\",\n    bargap = 0.05,\n    bargroupgap =0.1,\n    width = 800,\n    height= 1000,\n)\nfig.show()","f88b3b30":"q8 = pd.DataFrame(df['Q8'].value_counts()).reset_index()\nq8.columns = ['language', 'counts']","3a68cc11":"q8","f8e9e02a":"q8 = pd.merge(q, q8, on=[\"language\"])","8477cb76":"q8","817087b7":"fig = go.Figure()\nfig.add_trace(go.Bar(\n    y = q8['counts'],\n    x = q8['language'],\n    text = q8['counts'],\n    textposition=\"auto\",\n    texttemplate = \"%{value:,s}\",\n    marker_color=q8['color']\n    # orientation='h',\n))\nfig.update_traces(\n    marker_line_color = 'black',\n    marker_line_width = 1, \n    opacity = 0.9,\n)\nfig.update_layout(\n    xaxis={'categoryorder':'total descending'}\n)\nfig.show()","a6918961":"q","fedcd19d":"q = {}\nfor i in range(1,11):\n    q.update(dict(df[f\"Q9_Part_{i}\"].value_counts()))\nq = pd.DataFrame(q.items(), columns = ['ide', 'counts'])\nq = q.sort_values('counts')","cfec8913":"q['colour'] = [primary_grey for _ in range(len(q['ide']))]\nq.loc[0, 'colour'] = primary_blue\nq.loc[1:3, 'colour'] = primary_blue2\n\nfig = go.Figure(go.Bar(\n    x = q['counts'],\n    y = q['ide'],\n    marker_color = q['colour'],\n    orientation='h',\n))\nfig.update_traces(\n    marker_line_color = 'black',\n    marker_line_width = 1, \n    opacity = 0.9,\n)\nfig.update_layout(\n    yaxis={'categoryorder':'total ascending'}\n)\nfig.show()","abed9aca":"type(df[f\"Q10_Part_1\"].value_counts())","0ae96ba2":"q = {}\nfor i in range(1,14):\n    q.update(dict(df[f\"Q10_Part_{i}\"].value_counts()))\nq = pd.DataFrame(q.items(), columns = ['ide', 'counts'])\nq","7bcb792b":"q['counts'] = q['counts'] \/ q['counts'].sum()\nq['ide'] = q['ide'].str.strip()\nq","04515aa5":"cloud_notebooks_hubs = ['Azure Notebooks', 'IBM Watson Studio', 'Amazon Sagemaker Studio',\n                        'Amazon EMR Notebooks', 'Databricks Collaborative Notebooks', \n                        'Paperspace \/ Gradient', 'Code Ocean']\n\nq.loc[len(q)] = ['Other', q[q['ide'].isin(cloud_notebooks_hubs)].sum()['counts']]","53108638":"q = q[~q['ide'].isin(cloud_notebooks_hubs)]","d519636a":"q = q.reset_index()\nq","74a9c7a0":"q['colour'] = [primary_grey for _ in range(len(q['ide']))]\nq.loc[0, 'colour'] = primary_blue\nq.loc[1:2, 'colour'] = primary_blue2\n\nfig = go.Figure(go.Bar(\n    x = q['counts'],\n    y = q['ide'],\n    marker_color = q['colour'],\n    orientation='h',\n))\nfig.update_traces(\n    marker_line_color = 'black',\n    marker_line_width = 1, \n    opacity = 0.9,\n)\nmain_annot_format = \"<span style='font-size:12px; font-family:Tahoma;'><b> %s <\/b><br> %s<\/span>\"\nfig.add_annotation(dict(\n        x=0.65,\n        y=0.22,\n        xref = \"paper\",\n        yref = \"paper\",\n        text= main_annot_format % (\"Included in others:                                      \",\n                                   \"\"\"1. Azure Notebooks - 3.4%                           \n                                   <br>2. IBM Watson Studio - 3.3%                       \n                                   <br>3. Amazon Sagemaker Studio - 1.9%            \n                                   <br>4. Databricks Collaborative Notebooks - 1.6%\n                                   <br>5. Amazon EMR Notebooks - 1.0%               \n                                   <br>6. Paperspace \/ Gradient - 0.7%                  \n                                   <br>7. Code Ocean - 0.4%                                \"\"\"),\n        ax=0, ay=0\n))\nfig.update_layout(\n    yaxis={'categoryorder':'total ascending'},\n    xaxis=dict(side=\"top\", zerolinecolor = \"#4d4d4d\", zerolinewidth = 1, gridcolor=\"#e7e7e7\",tickformat=\"%\"),\n)\nfig.show()","c1fe0330":"q = df.groupby(['Prof_Stud', 'Q11']).agg({'Q1':'count'}).reset_index()\nq.columns = ['Prof_Stud', 'Q11', 'counts']\nq","eff04dae":"mapper = {\n    'A cloud computing platform (AWS, Azure, GCP, hosted notebooks, etc)': 'Cloud Platform',\n    'A deep learning workstation (NVIDIA GTX, LambdaLabs, etc)': 'DeepLearning WS',\n    'A personal computer or laptop': 'Laptop',\n    'None': 'None',\n    'Other': 'Other',\n}\n\nq['Q11'] = q['Q11'].replace(mapper)\nfig = px.bar(q, x='Q11', y='counts', color='Prof_Stud')\nfig.update_layout(barmode='group')\nfig.show()","28d77f3d":"fig = px.sunburst(q, path=['Prof_Stud', 'Q11'], values='counts')\nfig.show()","cddfe888":"q12_columns = [column for column in df.columns if 'Q12' in column]\nq = {}\n\nfor column in q12_columns:\n    q.update(dict(df[column].value_counts()))\n\nq = pd.DataFrame(q.items(), columns = ['hardware', 'counts'])\n\nfig = go.Figure(go.Pie(\n    labels = q['hardware'],\n    values = q['counts'],\n    hole=.3,\n    # pull=[0.2, 0, 0, 0]\n))\nfig.update_traces(\n    hoverinfo='value+percent', \n    textinfo='label+percent', \n    textfont_size=13,\n    marker=dict(\n        line=dict(color='#000000', width=.7)\n    )\n)\nfig.update_layout(\n    title = 'Kagglers hardware selection',\n    yaxis={\n        'categoryorder':'array',\n        'categoryarray': ['GPUs', 'TPUs', 'Other', 'None']\n    }\n)\nfig.show()","d2cedf2b":"<h1>Age","b7410058":"<h2>Language student\/professor","ac769c24":"<h2>Education","218309ec":"<h1>Gender","2f0084d3":"<h2>Country"}}