{"cell_type":{"a8b353ea":"code","1afa26af":"code","21e57c28":"code","32141a7b":"code","0f7ee413":"code","7f1a9f6b":"code","17c35359":"code","b4c807e2":"code","dcf1d001":"code","bc35f869":"code","28f1afea":"code","dfb48a9e":"code","9cea37b5":"code","415e9344":"code","c9990615":"code","45da6f9b":"code","3a2f7e1e":"code","6bfcc49d":"code","b991da6d":"code","7e114011":"code","fda994f9":"markdown","9ade55d8":"markdown","ae490268":"markdown","9bb9d040":"markdown","6b50f08d":"markdown","deb52ca3":"markdown","62af71b5":"markdown","87c8630d":"markdown","0310bc79":"markdown","51200890":"markdown","91aedfb2":"markdown"},"source":{"a8b353ea":"# Models\nfrom keras.models import Sequential\nfrom keras.layers import Dense, MaxPooling2D, Flatten, Conv2D\nfrom keras.wrappers.scikit_learn import KerasClassifier\n\n# Preprocessing\nfrom sklearn.preprocessing import normalize\nfrom keras.preprocessing.image import ImageDataGenerator\n\n# Validation\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.pipeline import Pipeline\n\n# Visualization\nfrom sklearn.manifold import LocallyLinearEmbedding, SpectralEmbedding\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style='white', context='notebook', palette='deep')\nplt.rcParams['image.cmap']='gray'\n\n# Core\nimport pandas as pd\nimport numpy as np","1afa26af":"col_names = ['label']+[str(x) for x in range(784)]\ndf = pd.concat([\n    pd.read_csv('..\/input\/mnist-in-csv\/mnist_train.csv', names=col_names, header=0),  # Extra dataset\n    pd.read_csv('..\/input\/mnist-in-csv\/mnist_test.csv', names=col_names, header=0),\n    pd.read_csv('..\/input\/digit-recognizer\/train.csv', names=col_names, header=0),    # Regular dataset\n    pd.read_csv('..\/input\/digit-recognizer\/test.csv', names=col_names[1:], header=0),\n], axis=0, sort=False, ignore_index=True)","21e57c28":"num_classes = 10 # Converting y labels from (0, 1, 2, ...) to [1 0 0 0 0 0 0 0 0 0], [0 1 0 0 0 0 0 0 0 0], etc\nX, y = df[col_names[1:]], df[col_names[0]]","32141a7b":"#cluster = LocallyLinearEmbedding(n_components=2, n_jobs=-1)\n#z = cluster.fit_transform(X.loc[np.isnan(y), :]).T","0f7ee413":"#clusters = [LocallyLinearEmbedding(n_components=2), SpectralEmbedding(n_components=2)]\n#fig, axs = plt.subplots(len(clusters), 1, figsize=(20,30))\n#for i, cluster in enumerate(clusters):\n#    z = cluster.fit_transform(X.loc[np.isnan(y), :]).T\n#    axs[i] = plt.scatter(z[0], z[1], c=ytrain)","7f1a9f6b":"number_n = 10\nf, axs = plt.subplots(1, number_n, figsize=(20,3))\n\nprint(\"Examples of each digit\")\nfor n in range(number_n-1, -1, -1):\n    ax = axs[n]\n    sample = y[y==n].sample(1).index\n    ax.imshow(X.loc[sample].values.reshape(28, 28))\n    ax.set_title(u\"D\u00edgito {:d}\".format(int(y[sample])))\n    ax.set_ylabel('')\n    ax.set_xlabel('')\n    ax.set_yticklabels([])\n    ax.set_xticklabels([])\nplt.show();","17c35359":"fig, ax = plt.subplots(figsize=(20, 4))\nsns.countplot(y[y.notna()].apply(int))\nax.set_ylabel(\"Qty.\")\nax.set_xlabel(\"Digit\")\nplt.show();","b4c807e2":"fig, ax = plt.subplots(1, 2, figsize=(20, 3))\nsample = y[y.notna()].sample(1).index\nax[0].imshow(X.iloc[sample].values.reshape(28, 28))\nax[0].set_title(\"Before norm.\")\nax[0].axis('off')\nX_norm = normalize(X, axis=1, norm='l2');\nax[1].imshow(X_norm[sample].reshape(28, 28))\nax[1].set_title(\"After norm.\")\nax[1].axis('off')\nplt.tight_layout()\nplt.show()","dcf1d001":"X = X_norm.reshape(X.shape[0], 28, 28, 1)","bc35f869":"train = y.notna()\ntest = ~train\n\n# convert to binary matrix\ny_matrix = (y[:,None] == range(num_classes)).astype(int)\n\nXtrain, ytrain = X[train], y_matrix[train]\nXtest , ytest  = X[test] , y_matrix[test]","28f1afea":"def baseline_model():\n    model = Sequential()\n    model.add(Conv2D(32, kernel_size=(6, 6), strides=(2, 2), activation='relu',input_shape=Xtrain[0].shape))\n    model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n    model.add(Conv2D(64, (5, 5), activation='relu'))\n    model.add(MaxPooling2D(pool_size=(2, 2)))\n    model.add(Flatten())\n    model.add(Dense(100, activation='relu'))\n    model.add(Dense(25, activation='relu'))\n    model.add(Dense(num_classes, activation='sigmoid'))\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","dfb48a9e":"estimator = baseline_model()\nestimator.summary()","9cea37b5":"datagen = ImageDataGenerator(\n    featurewise_center=False,\n    samplewise_center=False,\n    featurewise_std_normalization=False,\n    samplewise_std_normalization=False,\n    zca_whitening=False,\n    rotation_range=20,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    brightness_range=None,\n    shear_range=5,\n    zoom_range=-0.4,\n    fill_mode='nearest',\n    horizontal_flip=False,\n    vertical_flip=False,\n    rescale=None,\n    preprocessing_function=None,\n    data_format=None,\n    validation_split=0.2\n)","415e9344":"datagen.fit(Xtrain)","c9990615":"def view_aug(x, y, n=6):\n    plt.subplots(1, n+1, figsize=(20,5))\n    for i in range(n+1):\n        aug = x if i==0 else next(datagen.flow(np.array([x]), np.array([y]), batch_size=4))[0]\n        plt.subplot(1, n+1, i+1)\n        plt.imshow(aug.reshape(28, 28))\n        plt.title(\"Original %d\"%y.argmax() if i==0 else \"Aug #%s\"%i)\n    plt.show()\n\norg_sample = np.random.randint(0, Xtrain.shape[0])\nview_aug(Xtrain[org_sample], ytrain[org_sample])","45da6f9b":"augmentation = True\nif augmentation:\n    history = estimator.fit_generator(\n        datagen.flow(Xtrain, ytrain, batch_size=10),\n        steps_per_epoch=Xtrain.shape[0],\n        epochs=10\n    )\nelse:\n    history = estimator.fit(\n        Xtrain, ytrain,\n        batch_size=32, epochs=10,\n        validation_split=len(ytest)\/len(y)\n    )","3a2f7e1e":"plt.figure(figsize=(10,5))\nplt.scatter(range(1, len(history.history['loss'])+1), history.history['loss'], label='loss')\nplt.scatter(range(1, len(history.history['acc'])+1), history.history['acc'], label='acc')\nplt.legend()\nplt.show();","6bfcc49d":"ytest = estimator.predict_classes(Xtest)","b991da6d":"submit = pd.DataFrame(data={'ImageId': range(1, ytest.shape[0]+1), 'Label': ytest})","7e114011":"submit.to_csv(\"submit.csv\", index=None)","fda994f9":"# To-do's\n* Clustering","9ade55d8":"Unfortunately, clustering and 2D-embedding those data takes too long. So, won't execute it.","ae490268":"## Augmentation","9bb9d040":"# Preprocessing","6b50f08d":"## Normalization","deb52ca3":"## Clustering","62af71b5":"# Modeling","87c8630d":"### Add custom database $\\rightarrow$ MNIST in CSV\n\nWith more data, our model will perform better","0310bc79":"### View Augmentation","51200890":"# Exploration","91aedfb2":"## Counts Each Digit"}}