{"cell_type":{"1503102e":"code","ccf34471":"code","32f5f4ff":"code","dd044d37":"code","14240750":"code","aa0b3dce":"code","7e836a41":"code","8f2e2f10":"markdown","bda33e8a":"markdown","fa10eb0b":"markdown","ee1893ab":"markdown","b5a10005":"markdown","532bc12f":"markdown"},"source":{"1503102e":"from tensorflow import keras\nfrom tensorflow.keras import layers, models, optimizers\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","ccf34471":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt # making graphics\n\n# Input data files are available in the \"..\/input\/\" directory.\nimport os\ntrain_dir = '\/kaggle\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train\/'\nos.listdir(train_dir)\n\n# Running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","32f5f4ff":"train_datagen = ImageDataGenerator(rescale=1.\/255, \n                                   validation_split = 1001\/5216)\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size = (150, 150),\n    batch_size=64,\n    class_mode='binary',\n    subset = \"training\")\n\ndev_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size = (150, 150),\n    batch_size=64,\n    class_mode='binary',\n    subset = \"validation\")","dd044d37":"model = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation = 'relu', input_shape = (150, 150, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(32, (3, 3), activation = 'relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(32, (3, 3), activation = 'relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(32, (3, 3), activation = 'relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(512, activation = 'relu'))\nmodel.add(layers.Dense(1, activation = 'sigmoid'))\n\nmodel.compile(loss = 'binary_crossentropy',\n              optimizer = optimizers.RMSprop(lr = 1e-4),\n              metrics = ['acc'])\n\nmodel.summary()","14240750":"history = model.fit_generator(\n      train_generator,\n      steps_per_epoch = None, # = 3365\/\/16\n      verbose = 1,\n      epochs = 10,\n      validation_data = dev_generator,\n      validation_steps = None # = 1441\/\/16\n      )\n\n# Save the model\nmodel.save('case_2_run_1.h5')","aa0b3dce":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(len(acc))","7e836a41":"import matplotlib.pyplot as plt\n\nplt.plot(epochs, acc, 'bo-', label='Training acc')\nplt.plot(epochs, val_acc, 'r*-', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.grid()\nplt.legend()\n\nplt.figure()\nplt.plot(epochs, loss, 'bo-', label='Training loss')\nplt.plot(epochs, val_loss, 'r*-', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.grid()\n\nplt.show()","8f2e2f10":"## The model","bda33e8a":"## Show the training history","fa10eb0b":"# 06. Using kaggle to solve cases\nMachine Learning for Health Technology Applications   \n11.2.2020, Sakari Lukkarinen   \nHelsinki Metropolia University of Applied Sciences","ee1893ab":"## Training the model","b5a10005":"## Create data generators","532bc12f":"## Import libraries"}}