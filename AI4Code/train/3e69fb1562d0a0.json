{"cell_type":{"8e7f15bf":"code","264a6635":"code","8327ee97":"code","48b954b0":"code","8097bc70":"code","9cee3c31":"code","13786730":"code","b19d9baa":"code","0a98c98d":"code","4265b637":"code","144bee23":"code","b1af35ae":"code","d49bd341":"code","4c7b1fa7":"code","50246555":"code","0c63a107":"code","0201e2e8":"code","b6ca4b5c":"code","5c9cf577":"code","b6124303":"code","2c5c42a3":"code","62215434":"code","337f0337":"code","4e7a6a11":"code","08eb21fd":"code","0b3d2375":"code","69f0d118":"code","fb82bd1d":"code","65b37826":"code","3ac92b35":"code","a1ba93df":"code","c101e200":"code","c39ccc42":"code","46b3a69a":"code","7543c424":"code","8ac7ed13":"code","b381200f":"code","65847a6b":"code","4b18f132":"code","cc0b5777":"code","f464cde9":"code","bcfdb5cf":"code","271a06b9":"code","362e6358":"code","1fe05690":"code","1fac5f60":"code","48228aa0":"code","30d30221":"code","3ac19de8":"code","94df7bb7":"code","19ceb392":"code","ef7da7ec":"code","1a1ed303":"code","d1dd9049":"code","2155acb5":"code","0bd8a77a":"code","0d9a5321":"code","57be0b6e":"code","56471015":"code","7c63e9c6":"code","980fbb30":"code","e4269c33":"code","488e9976":"code","cdefbe07":"code","30a1b8ee":"code","1487e956":"code","b59c3209":"code","5a336993":"code","1da69a03":"code","50e99340":"code","d6bf11bd":"code","f938e7c4":"code","cd7a0916":"code","24e09184":"code","d2b8e727":"code","9c9c70a2":"code","6e20c92a":"code","3f9c5adf":"code","e3d727df":"code","4e2af8fb":"code","df99a674":"code","312c0952":"code","2cd91999":"code","53d235d3":"code","f9495998":"code","1893f951":"code","070c0f95":"code","1944ce87":"code","c876ed0d":"code","540b0601":"code","1f7e2f80":"code","719e3364":"code","566ce48f":"code","42c35a06":"code","fca9c54e":"code","1e50fec3":"code","9cb6d4fb":"code","0d7b1649":"code","e418d70e":"code","e162e99d":"code","d6466876":"code","2ef433e7":"code","289a84e6":"code","430a72c9":"code","bc82b9e9":"code","1a2d5325":"code","87d96dbc":"code","09c21a92":"code","004dbb0f":"code","191c6072":"code","d5c3d49c":"code","d24a9f36":"code","a5158673":"code","f3903a8d":"markdown","299e9514":"markdown","935a8f22":"markdown","9c1db4c6":"markdown","ef0e1813":"markdown","978851a1":"markdown","55495a5e":"markdown","88e3f88c":"markdown","950dbcc2":"markdown","6edc6eee":"markdown","ac695706":"markdown","361c0263":"markdown","26471a6d":"markdown","5e1732fd":"markdown","b943909d":"markdown","40d5be7e":"markdown","3fa94b91":"markdown","32965aa3":"markdown","bd73e54b":"markdown","b8873fb4":"markdown","3de1a55f":"markdown","399f5008":"markdown","1fb993b5":"markdown","9381224a":"markdown","a37d5257":"markdown","7cad06c1":"markdown","611cee29":"markdown","8dfd9c27":"markdown","caaa8443":"markdown","d8fe0752":"markdown","7424c7b8":"markdown","986de7e7":"markdown","f3375deb":"markdown","6df81d98":"markdown","5714cca9":"markdown","ab805de5":"markdown","db282b8b":"markdown","a4d9c18e":"markdown","ef996f81":"markdown","ceed1b9d":"markdown","11b22bf1":"markdown","3d93ca02":"markdown","f2944568":"markdown","a710dab6":"markdown","5cec1497":"markdown","bdfd73ad":"markdown","5beaf51b":"markdown","249cd704":"markdown","04cb817f":"markdown","bb688c53":"markdown","5bc9c763":"markdown","179655ff":"markdown","8bada194":"markdown","1610ad7e":"markdown","b5d893e3":"markdown","d6c01b31":"markdown"},"source":{"8e7f15bf":"#!conda install -c conda-forge cufflinks-py","264a6635":"## utility libraries\nfrom IPython.core.display import HTML\nfrom datetime import datetime\nfrom datetime import timedelta\n\n\n# storing and anaysis\nimport pandas as pd\nimport geopandas as gpd\nimport numpy as np\n\n#Visualization Libraries\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib import style\n\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.offline as pyo\nfrom plotly.offline import init_notebook_mode,plot,iplot\n\nimport folium\nimport seaborn as sns\n\nimport cufflinks as cf\n\n# Warning\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\nprint('Pandas Version' , pd.__version__)\nprint('Matplotlib Version' , matplotlib.__version__)\nprint('Plotly Version' , plotly.__version__)\nprint('Seaborn Version' , sns.__version__)\nprint('Folium Version' , folium.__version__)","8327ee97":"# setting up some setting for libraries\n%matplotlib inline\nplt.rcParams['figure.figsize'] = 17,8\npyo.init_notebook_mode(connected=True)\ncf.go_offline()\n\n#style.use('ggplot')","48b954b0":"# color pallette\ncnf = '#393e46' # confirmed - grey\ndth = '#ff2e63' # death - red\nrec = '#21bf73' # recovered - cyan\nact = '#fe9801' # active case - yellow","8097bc70":"!ls ..\/input\/covid19-corona-virus-india-dataset","9cee3c31":"#importing data\ndf = pd.read_csv('..\/input\/covid19-corona-virus-india-dataset\/complete.csv',\n                parse_dates = ['Date'])\n\ndf.tail()","13786730":"df.columns","b19d9baa":"df.info()","0a98c98d":"df_clean = df[['Date', 'Name of State \/ UT', 'Latitude', 'Longitude', 'Total Confirmed cases', 'Death', 'Cured\/Discharged\/Migrated']]\ndf_clean.columns = ['Date', 'State\/UT', 'Latitude', 'Longitude', 'Confirmed', 'Deaths', 'Cured']\n\ndf_clean['Date'] = df_clean['Date'].dt.normalize()\n\ndf_clean['Active'] = df_clean['Confirmed']-(df_clean['Deaths']+df_clean['Cured'])\ndf_clean['Mortality Rate'] = df_clean['Deaths']\/df_clean['Confirmed']\ndf_clean['Recovery Rate'] = df_clean['Cured']\/df_clean['Confirmed']\ndf_clean.info()","4265b637":"latest = df_clean[df_clean['Date']==max(df_clean['Date'])]\n\n\ntotal_confirm = latest['Confirmed'].sum()\ntotal_active = latest['Active'].sum()\ntotal_cured = latest['Cured'].sum()\ntotal_death = latest['Deaths'].sum()\n\n\nnow  = datetime.now().strftime(\"%B %d, %Y\")\n\nprint(u\"\\u2022\",f'Total Number of Confirmed Covid 2019 Cases across India till date ({now}):', total_confirm)\nprint(u\"\\u2022\",f'Total Number of Active Cases till date ({now}):', total_active)\nprint(u\"\\u2022\",f'Total Number of Cured Cases across India till date ({now}):', total_cured)\nprint(u\"\\u2022\",f'Total Number of Deaths across India till date ({now}):', total_death)","144bee23":"tm = latest.melt(id_vars=\"Date\", value_vars=['Active', 'Deaths', 'Cured'])\ntm.head()","b1af35ae":"fig = px.treemap(tm, path=[\"variable\"], values=\"value\",height=250, width=800,\n                 color_discrete_sequence=[act, rec, dth], title='Latest Stats')\n\nfig.data[0].textinfo = 'label+value+text'\nfig.show()","d49bd341":"latest.head()","4c7b1fa7":"temp = latest.groupby(by = ['State\/UT']).sum()\n\ntemp.tail()","50246555":"temp = temp[['Confirmed','Deaths','Cured','Active','Mortality Rate','Recovery Rate']]\ntemp.sort_values('Confirmed',ascending=False,inplace = True)\n#temp.head()\n\ntemp.style\\\n    .background_gradient(cmap=\"Blues\", subset=['Active','Confirmed'])\\\n    .background_gradient(cmap=\"Greens\", subset=['Cured', 'Recovery Rate'])\\\n    .background_gradient(cmap=\"Reds\", subset=['Deaths', 'Mortality Rate'])","0c63a107":"temp.columns","0201e2e8":"#Visualization\ntemp_1 = temp[['Confirmed', 'Deaths', 'Cured']]\n\ntemp_1.iplot(kind = 'bar',xTitle= 'State\/UT' , yTitle='Numbers of Cases',mode = 'markers+lines',\n            title = f'Cases State Wise on {now}')","b6ca4b5c":"temp_2 = temp[['Mortality Rate','Recovery Rate']]\n               \ntemp_2.iplot(kind ='scatter',xTitle='State\/UT',yTitle='Avrage',title = f'Mortality and Recovery Rate on {now}',\n             mode = 'markers', size = 5)","5c9cf577":"# Date wise data visualization whole country\n\ntemp = df_clean.groupby(by = ['Date']).sum()\ntemp.drop(['Latitude','Longitude','Mortality Rate','Recovery Rate'],axis=1,inplace=True)\n\ntemp.tail()","b6124303":"temp.iplot(title = 'Covid-19 Growth in India', yTitle='Cases',size=5,mode='markers+lines')","2c5c42a3":"#df_clean.columns","62215434":"cases_df = df_clean.groupby('Date')['Confirmed', 'Deaths'].sum()\n\nfilt_cnf = (cases_df['Confirmed'] >= 50)\n\ntemp = cases_df[filt_cnf].diff().dropna()\n\ntemp","337f0337":"col_y = ['Confirmed','Deaths']\ncolr = [cnf,dth]\n\nfor i,x in enumerate(col_y):\n    temp.iplot(kind = 'scatter',mode = \"markers+lines\" ,size = 5,y = col_y[i],color=colr[i],yTitle=col_y[i],title=f'New {col_y[i]} Cases after Crossing 50 Confirmed Cases')","4e7a6a11":"top_10 = latest.groupby(by = ['State\/UT']).agg({'Confirmed': 'sum', 'Deaths': 'sum', 'Cured' : 'sum', 'Active' : 'sum'})\\\n                .nlargest(10,['Confirmed','Deaths','Cured','Active'])\n\ntop_10","08eb21fd":"#Creating Figures\nplot_c = px.bar(top_10.sort_values('Confirmed') ,x=\"Confirmed\",y = top_10.sort_values('Confirmed').index,\n               text='Confirmed', orientation='h', color_discrete_sequence = [cnf])\n\nplot_d = px.bar(top_10.sort_values('Deaths'),x=\"Deaths\",y = top_10.sort_values('Deaths').index,\n               text='Deaths', orientation='h', color_discrete_sequence = [dth])\n\nplot_r = px.bar(top_10.sort_values('Cured'),x=\"Cured\",y = top_10.sort_values('Cured').index,\n               text='Cured', orientation='h', color_discrete_sequence = [rec])\n\nplot_a = px.bar(top_10.sort_values('Active'),x=\"Active\",y = top_10.sort_values('Active').index,\n               text='Active', orientation='h', color_discrete_sequence = [act])\n\n\n# plot\nfig = make_subplots(rows=2, cols=2, shared_xaxes=False, horizontal_spacing=0.14, vertical_spacing=0.08,\n                    subplot_titles=('Confirmed cases', 'Deaths reported', 'Recovered', 'Active cases'))\n\nfig.add_trace(plot_c['data'][0],row=1, col=1)\nfig.add_trace(plot_d['data'][0],row=1, col=2)\nfig.add_trace(plot_r['data'][0],row=2, col=1)\nfig.add_trace(plot_a['data'][0],row=2, col=2)\n\nfig.update_layout(height=600 ,title_text=\"Top 10 States \")\n","0b3d2375":"HTML('<div class=\"flourish-embed flourish-bar-chart-race\" data-src=\"visualisation\/1977187\" data-url=\"https:\/\/flo.uri.sh\/visualisation\/1977187\/embed\"><script src=\"https:\/\/public.flourish.studio\/resources\/embed.js\"><\/script><\/div>')","69f0d118":"df_clean.columns","fb82bd1d":"#Deaths,Cured ,Active Cases Date Wise\n\ncol = ['Deaths','Cured','Active']\n\nfor i,val in enumerate(col):\n    p_df = pd.pivot_table(df_clean,index  = 'Date', values = val, columns ='State\/UT').fillna(0).astype('int').reset_index()\n    p_df.iplot(x = 'Date' ,title = col[i], xTitle = 'Date',yTitle = 'Cases')","65b37826":"latest.columns","3ac92b35":"geo_map = folium.Map([20.5937,78.9629],zoom_start=4,tiles ='cartodbpositron' )\n\nfor lat,long,active,deaths,cured,name in zip(latest['Latitude'],latest['Longitude'],\\\n                                             latest['Active'],latest['Deaths'],\\\n                                             latest['Cured'],latest['State\/UT']):\n\n    folium.CircleMarker([lat,long],radius=active*0.005\\\n                       ,tooltip = (f'''<strong>name<\/strong>: {str(name).capitalize()} <br>\n                               <strong>Active<\/strong>: {str(active)}<br>\n                               <strong>Deaths<\/strong>: {str(deaths)}<br>\n                               <strong>Cured<\/strong>: {str(cured)}<br>''')\\\n                       ,color = 'red',fill_color = 'red',fill_opacity=0.3).add_to(geo_map)\n\ngeo_map\n","a1ba93df":"grp_states = df_clean.groupby('Date')['State\/UT']\naffected_states = grp_states.unique().apply(len).values\n#affected_states\n\n\ndates = grp_states.unique().apply(len).index\n#dates","c101e200":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x=dates, y=[36 for i in range(len(affected_states))], \n                         mode='lines', name='Total no. of States+UT', \n                         line = dict(color='#222831', dash='longdashdot')))\n\nfig.add_trace(go.Scatter(x=dates, y=affected_states, hoverinfo='x+y',\n                         mode='lines', name='No. of affected States+UT', \n                         line = dict(color='#c70039')))\n\nfig.update_layout(title='No. of affected States\/UT over Time', \n                  xaxis_title='Dates', yaxis_title='No. of affected States\/UT')\nfig.show()","c39ccc42":"latest_cnf_dth = latest[latest['Confirmed']>10]\nlatest_cnf_dth = latest_cnf_dth[['State\/UT','Confirmed','Deaths']]\n\npx.scatter(latest_cnf_dth,x = 'Confirmed', y = 'Deaths', color ='State\/UT', size = \"Confirmed\",log_x=True, title = 'Confirmed vs Deaths')\n\n","46b3a69a":"# Reading Popolation Data\n\npop2018 = pd.read_csv('..\/input\/covid19-corona-virus-india-dataset\/pop2018.csv')\n\npop2018.rename(columns = {'State': 'State\/UT'},inplace = True)\npop2018.dtypes\n\npop2018['State\/UT'].replace('Telangana', 'Telengana', inplace=True)\npop2018['State\/UT'].replace('Jammu & Kashmir', 'Jammu and Kashmir', inplace=True)\npop2018['State\/UT'].replace('A.& N.Islands', 'Andaman and Nicobar Islands', inplace=True)\npop2018['State\/UT'].replace('D.& N.Haveli', 'Dadar Nagar Haveli', inplace=True)\n\n","7543c424":"pop2018.head(36)","8ac7ed13":"# after 2018 D & N Haveli and Daman And Diu Became one so Combinig these with one value\npop2018.loc[33,'2018'] =  pop2018.loc[33,'2018']+ pop2018.loc[34,'2018']   \n","b381200f":"# droping Daman & Diu\npop2018.drop(34, inplace = True)","65847a6b":"state = list(np.setdiff1d(latest['State\/UT'],pop2018['State\/UT']))\nprint(state, 'is not in Population DataFrame')","4b18f132":"# adding Ladakh poluation Manually\npop2018.loc[36] = ['Ladakh' , 290492]\npop2018.tail()","cc0b5777":"latest.shape","f464cde9":"pop_vs_cnf = pd.merge(latest,pop2018, on = 'State\/UT')\npop_vs_cnf.shape","bcfdb5cf":"pop_vs_cnf","271a06b9":"grp = pop_vs_cnf[['State\/UT','2018', 'Confirmed']].set_index('State\/UT')\ngrp['2018'] = np.log10(grp['2018'])\ngrp['Confirmed'] = np.log10(grp['Confirmed'])\n\ngrp = grp.rename(columns = {'2018':'Estimated Population 2018' })\ngrp.head()","362e6358":"grp.iplot(kind = 'bar' ,barmode  = 'overlay', title = 'Estimated Population 2018 Vs Confirmed', yTitle = 'Log Base 10')","1fe05690":"pop_vs_cnf['Percentage'] = (pop_vs_cnf.loc[:,'Confirmed'].values*100)\/ pop_vs_cnf.loc[:,'2018'].values\npop_vs_cnf.head(3)","1fac5f60":"grf = pop_vs_cnf[['State\/UT','Percentage']].set_index('State\/UT')\n\ngrf.iplot(title='Percentage Population Effected',yTitle = 'Percentage')","48228aa0":"pt_df = pd.read_csv('..\/input\/covid19-corona-virus-india-dataset\/patients_data.csv')\n\npt_df.head()","30d30221":"pt_df['date_announced'] = pd.to_datetime(pt_df['date_announced'], format='%d\/%m\/%Y')\npt_df['status_change_date'] = pd.to_datetime(pt_df['status_change_date'], format='%d\/%m\/%Y')\npt_df.info()","3ac19de8":"print(pt_df.shape)","94df7bb7":"dist = pt_df.groupby(['detected_state', 'detected_district'])['patient_number'].count().reset_index()\ndist.head()","19ceb392":"fig = px.treemap(dist, path=[\"detected_state\", \"detected_district\"], values=\"patient_number\", height=700,\n           title='Number of Confirmed Cases', color_discrete_sequence = px.colors.qualitative.Prism)\nfig.data[0].textinfo = 'label+text+value'\nfig.show()","ef7da7ec":"map_data = gpd.read_file('..\/input\/india-district-wise-shape-files\/output.shp')\nmap_data.head(2)","1a1ed303":"#State Wise Grouping Data\nstates = map_data.dissolve(by='statename').reset_index()\nstates.head()","d1dd9049":"states['statename'].unique()","2155acb5":"pt_st = pt_df.groupby('detected_state')['patient_number'].count().reset_index()\npt_st['detected_state'].unique()","0bd8a77a":"np.setdiff1d(pt_st['detected_state'],states['statename'])","0d9a5321":"states['statename'] = states['statename'].str.replace('&', 'and')\nstates['statename'] = states['statename'].str.replace('NCT of ', '')\nstates['statename'] = states['statename'].str.replace('Chhatisgarh', 'Chhattisgarh')\nstates['statename'] = states['statename'].str.replace('Orissa', 'Odisha')\nstates['statename'] = states['statename'].str.replace('Pondicherry', 'Puducherry')\nstates['statename'] = states['statename'].str.replace('Dadra and Nagar Haveli', 'Dadra and Nagar Haveli and Daman and Diu')\n\nprint(states.shape)","57be0b6e":"np.setdiff1d(pt_st['detected_state'],states['statename'])","56471015":"pt_st.head(3)","7c63e9c6":"pt_st.columns = ['state', 'count']\nprint(pt_st.shape)\npt_st.head(2)","980fbb30":"state_map = pd.merge(states, pt_st, left_on='statename', right_on='state', how='right')\nprint(state_map.shape)\nstate_map.tail(2)","e4269c33":"state_map['distarea'] = state_map['distarea'].fillna(0)\nstate_map.isnull().sum()","488e9976":"#folium.Choropleth?","cdefbe07":"s = folium.Map(location=[23, 78.9629], tiles='cartodbpositron',\n               min_zoom=4, max_zoom=6, zoom_start=4)\n\nchoropleth = folium.Choropleth(state_map,data = state_map, columns=['statename','count'],\n                  key_on ='feature.properties.statename',\n                 fill_color='YlOrRd',\n                 line_weight=0.1,\n                 line_opacity=0.5,\n                 legend_name='No. of reported cases').add_to(s)\n\nchoropleth.geojson.add_child(\n    folium.features.GeoJsonTooltip(fields=['statename','count'],aliases=['State Name', 'Cases'])\n).add_to(s)\n\nfolium.LayerControl().add_to(s)\ns","30a1b8ee":"map_data.columns","1487e956":"pt_df.columns","b59c3209":"## District Wise Patient Data\n\npt_dst = pt_df.groupby('detected_district')['patient_number'].count().reset_index()\npt_dst.columns = ['district', 'count']\n\nprint(pt_dst.shape)\npt_dst.head(2)","5a336993":"ind_dist = pd.merge(map_data,pt_dst, right_on='district', left_on='distname', how='left')\nind_dist.isnull().sum()","1da69a03":"#droping missing values from patient count\n\nind_dist = ind_dist[ind_dist['count'].notnull()]\nind_dist.info()","50e99340":"#data type convertion\n\nind_dist['count'] = ind_dist['count'].astype('int32')\nind_dist.info()","d6bf11bd":"#ind_dist['count'].max()","f938e7c4":"bins = [0, 50, 200, 500, 1250, 3500]\n\nd = folium.Map(location=[23, 78.9629], tiles='cartodbpositron',\n               min_zoom=4, max_zoom=6, zoom_start=4)\n\nchoropleth = folium.Choropleth(ind_dist,data = ind_dist, columns=['distname','count'],\n                  key_on ='feature.properties.distname',\n                 fill_color='YlOrRd',\n                 line_weight=0.1,\n                 line_opacity=0.5,\n                 bins=bins,\n                 legend_name='No. of reported cases').add_to(d)\n\nchoropleth.geojson.add_child(\n    folium.features.GeoJsonTooltip(fields=['distname','count'],aliases=['District Name', 'Cases'])\n).add_to(d)\n\nfolium.LayerControl().add_to(d)\nd","cd7a0916":"pt_df.columns","24e09184":"#missing values in date announced column\n#pt_df.shape[0]-pt_df['date_announced'].dropna().shape[0]","d2b8e727":"total_values = pt_df.shape[0]\nmissing_values_in_announced_dates = (pt_df.shape[0]) - (pt_df['date_announced'].dropna().shape[0])\navailabe_values = total_values - missing_values_in_announced_dates\n\nprint('\\u2022 Total no. of values :', total_values)\nprint('\\u2022 No. of missing values :', missing_values_in_announced_dates)\nprint('\\u2022 No. of available values :', availabe_values)","9c9c70a2":"#cf.colors.scales()","6e20c92a":"new_cases = pt_df.groupby('date_announced')[['date_announced']].count()\nnew_cases.iplot(kind= 'bar', xTitle = 'Dates',yTitle = 'Count',title='No. of cases reported each day', colorscale= 'set1')","3f9c5adf":"total_values = pt_df.shape[0]\nmissing_values_in_age_bracket = (pt_df.shape[0]) - (pt_df['age_bracket'].dropna().shape[0])\navailabe_values = total_values - missing_values_in_announced_dates\n\nprint('\\u2022 Total no. of values :', total_values)\nprint('\\u2022 No. of missing values :', missing_values_in_age_bracket)\nprint('\\u2022 No. of available values :', availabe_values)","e3d727df":"#cf.getThemes() ","4e2af8fb":"pt_df['age_bracket'].iplot(kind = 'histogram', histfunc ='count', bins=70,\n                           title='Distribution of ages of confirmed patients', yTitle = 'Count', xTitle = 'Age Bracket',\n                           theme = 'ggplot',colors= '#555555', linecolor = '#555555' )","df99a674":"def data_distribution_pie_chart(values,colors,names,hole=0.4,x=0.5,y=0.1):\n    \n    '''function To Visualize Missing data and Available Data'''\n    \n    fig = px.pie(values=values,color_discrete_sequence = colors, names = names,hole= hole)\n    fig.update_layout(title={'text': 'Data Distribution',\n                         \"font\":{'size':14},\n                         'y':y,'x':x,\n                        'xanchor':'center'},\n                  autosize=False,\n                  width=900,\n                  height=400)\n    fig.update_traces(textposition='outside', textinfo='label+value+percent')\n\n    fig.show()","312c0952":"c_vs_g = pt_df[['p_id','gender']]\nc_vs_g['gender'].unique()","2cd91999":"c_vs_g['gender'] = c_vs_g['gender'].replace('Non-Binary' , np.nan)\nc_vs_g['gender'].unique()","53d235d3":"temp = c_vs_g.copy().dropna()","f9495998":"total = c_vs_g.shape[0]\nmissing = c_vs_g.shape[0] - temp.shape[0]\navailable = temp.shape[0]\n\nprint('\\u2022 Total no. of values :', total)\nprint('\\u2022 No. of missing values :', missing)\nprint('\\u2022 No. of available values :', available)\n\n# Visualtization\n\nvalue = [missing,available]\ncolors = ['#74264d','#b678ad']\nnames = ['Missing','Available']\nhole= 0.5\n\ndata_distribution_pie_chart(value,colors,names,hole)","1893f951":"temp.sample(5)","070c0f95":"temp['gender'] = temp['gender'].replace('M' , 'Male')\ntemp['gender'] = temp['gender'].replace('F' , 'Female')\ntemp.head()","1944ce87":"gen_value = temp.groupby('gender').count()['p_id'].tolist()\n\nfig = px.pie(values=gen_value,color_discrete_sequence = [ '#edbf4a','#2a4158'], names = ['Female','Male'],hole= 0.4)\n\nfig.update_layout(title={'text': 'Gender Distribution in Confirmed Cases <br>(Sample Size 7153)',\n                         \"font\":{'size':10},\n                         'y':0.1,'x':0.5,\n                         'xanchor': 'center','yanchor': 'bottom'},\n                  autosize=False,\n                  width=900,\n                  height=400)\n\nfig.update_traces(textposition='outside', textinfo='label+value+percent')\n\nfig.show()\n","c876ed0d":"a_vs_g = pt_df[['age_bracket','gender']]\ntemp = a_vs_g.copy().dropna()","540b0601":"total = a_vs_g.shape[0]\nmissing = a_vs_g.shape[0] - temp.shape[0]\navailable = temp.shape[0]\n\nprint('\\u2022 Total no. of values :', total)\nprint('\\u2022 No. of missing values :', missing)\nprint('\\u2022 No. of available values :', available)\n\n# Visualtization\n\nvalue = [missing,available]\ncolors = ['#8c9ea3','#2a4158']\nnames = ['Missing','Available']\nhole= 0.5\n\ndata_distribution_pie_chart(value,colors,names,hole)","1f7e2f80":"temp.sample(5)","719e3364":"gen_distrb = temp.groupby('gender').count()['age_bracket'].tolist()\n#gen_distrb\n\nfig = make_subplots(rows=1, cols = 2,\n                    column_widths=[0.8, 0.2],\n                    subplot_titles= ['Gender vs Age'],\n                    specs=[[{\"type\": \"histogram\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(go.Histogram(x=temp[temp['gender']=='F']['age_bracket'], nbinsx=50, name='Female', marker_color='#9171b0'), 1, 1)\nfig.add_trace(go.Histogram(x=temp[temp['gender']=='M']['age_bracket'], nbinsx=50, name='Male', marker_color='#5a3f70'), 1, 1)\n\nfig.add_trace(go.Pie(values=gen_distrb,hole= 0.3, labels=['Female','Male'], marker_colors = [ '#9171b0','#5a3f70']),1, 2)\n\nfig.update_layout(showlegend=False)\nfig.update_layout(barmode='stack', xaxis_title_text = 'Age Bins', yaxis_title_text = 'Count')\nfig.data[2].textinfo = 'label+text+value+percent'\n\nfig.show()\n","566ce48f":"c_vs_g = pt_df[['age_bracket','current_status']]\ntemp1 = c_vs_g.copy().dropna()","42c35a06":"total = c_vs_g.shape[0]\nmissing = c_vs_g.shape[0] - temp1.shape[0]\navailable = temp1.shape[0]\n\nprint('\\u2022 Total no. of values :', total)\nprint('\\u2022 No. of missing values :', missing)\nprint('\\u2022 No. of available values :', available)\n\n# Visualtization\n\nvalues=[missing,available]\ncolor = ['#618691','#fecb01']\nnames = ['Missing','Available']\nhole= 0.4\n\ndata_distribution_pie_chart(values,color,names,hole)","fca9c54e":"temp1.sample(5)","1e50fec3":"cur_stats_dist = temp1.groupby('current_status').count()['age_bracket'].tolist()\n#cur_stats_dist\nlabels =  temp1.groupby('current_status').count().index.tolist()\n#labels","9cb6d4fb":"fig = make_subplots(rows=1, cols = 2,\n                    column_widths=[0.8, 0.2],\n                    subplot_titles= ['Case Status vs Age'],\n                    specs=[[{\"type\": \"histogram\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(go.Histogram(x=temp1[temp1['current_status']=='Deceased']['age_bracket'], nbinsx=50, name='Deceased', marker_color='#fd0054'), 1, 1)\nfig.add_trace(go.Histogram(x=temp1[temp1['current_status']=='Recovered']['age_bracket'], nbinsx=50, name='Recovered', marker_color='#40a798'), 1, 1)\nfig.add_trace(go.Histogram(x=temp1[temp1['current_status']=='Hospitalized']['age_bracket'], nbinsx=50, name='Hospitalized', marker_color='#5a3f70'), 1, 1)\n\nfig.add_trace(go.Pie(values=cur_stats_dist,hole= 0.3, labels=labels, marker_colors = ['#fd0054','#5a3f70','#40a798']),1, 2)\n\nfig.update_layout(showlegend=False)\nfig.update_layout(barmode='stack', xaxis_title_text = 'Age Bins', yaxis_title_text = 'Count')\nfig.data[3].textinfo = 'label+text+value+percent'\n\nfig.show()","0d7b1649":"pt_df.columns\npt_df['type_of_transmission'].unique()","e418d70e":"pt_df['type_of_transmission'] = pt_df['type_of_transmission'].replace('Imported ', 'Imported')\npt_df['type_of_transmission'] = pt_df['type_of_transmission'].replace('Unknown', 'TBD')\n\ntot = pt_df[['type_of_transmission']]\ntemp = pt_df[['type_of_transmission']].dropna()","e162e99d":"total = tot.shape[0]\nmissing = tot.shape[0] - temp.shape[0]\navailable = temp.shape[0]\n\nprint('\\u2022 Total no. of values :', total)\nprint('\\u2022 No. of missing values :', missing)\nprint('\\u2022 No. of available values :', available)\n\nvalues = [ missing,available]\ncolor = ['#1d2b3f','#688cc3']\nnames = ['Missing','Available']\nhole= 0.4\nx = 0.5\ny = 0.05\n\ndata_distribution_pie_chart(values,color,names,hole,x,y)","d6466876":"temp1 = temp.copy().groupby('type_of_transmission')[['type_of_transmission']].count()\ntemp1.columns = ['Count']\nvalues = temp1['Count'].tolist()\nlabel = temp1.index.tolist()","2ef433e7":"fig = px.pie(values= values, names = label, labels = label, color_discrete_sequence = ['#243448'], hole = 0.5)\n\nfig.update_layout(autosize=False,width=900,height=400)\nfig.update_traces(title='Type of Transmission',textposition='inside', textinfo='label+value+percent')\n\n\nfig.show()","289a84e6":"temp = pt_df.groupby('nationality')['patient_number'].count().reset_index()\ntemp = temp.sort_values('patient_number')\ntemp = temp[temp['nationality']!='India']\nfig = px.bar(temp, x='patient_number', y='nationality', orientation='h', text='patient_number', width=600,\n       color_discrete_sequence = ['#243448'], title='No. of Foreign Citizens')\nfig.update_xaxes(title='')\nfig.update_yaxes(title='')\nfig.show()","430a72c9":"pt_df.columns","bc82b9e9":"zn = pd.read_csv('..\/input\/covid19-corona-virus-india-dataset\/zones.csv')","1a2d5325":"zn.isnull().sum()","87d96dbc":"zn.nunique()","09c21a92":"zn= zn.dropna()\ndst= zn.groupby('zone')[\"district\"].count().reset_index()\ndst","004dbb0f":"dst.columns = ['Zone', 'Count']\ndst.sort_values(\"Count\",inplace = True)\ndst.head()","191c6072":"orng = '#ff6500'\ngrn = '#3CB371'\nred = '#FF0000'\nfig_1 = px.treemap(dst, path=['Zone'], values=\"Count\", height=250, width=800,\n                 color_discrete_sequence=[orng, grn, red], title='Zone Distribution on District Level')\nfig_1.data[0].textinfo = 'label+text+value'\nfig_1.show()","d5c3d49c":"st = zn.groupby(['state','zone'])[['district']].count().reset_index()\nst.head()","d24a9f36":"fig_1 = px.treemap(st,path = ['state','zone'],values=\"district\",\n                 color_discrete_sequence = px.colors.qualitative.G10, title='Zone Distribution on State Level')\nfig_1.data[0].textinfo = 'label+text+value'\nfig_1.show()","a5158673":"HTML('''<iframe title=\"Geographical Map  District Wise Zone\" aria-label=\"Map\" id=\"datawrapper-chart-jzl6U\" src=\"https:\/\/datawrapper.dwcdn.net\/jzl6U\/6\/\" scrolling=\"no\" frameborder=\"0\" style=\"width: 0; min-width: 100% !important; border: none;\" height=\"400\"><\/iframe><script type=\"text\/javascript\">!function(){\"use strict\";window.addEventListener(\"message\",(function(a){if(void 0!==a.data[\"datawrapper-height\"])for(var e in a.data[\"datawrapper-height\"]){var t=document.getElementById(\"datawrapper-chart-\"+e)||document.querySelector(\"iframe[src*='\"+e+\"']\");t&&(t.style.height=a.data[\"datawrapper-height\"][e]+\"px\")}}))}();\n<\/script>''')","f3903a8d":"## Finding Latest Data Only","299e9514":"#### Cleaning Columns Values","935a8f22":"## No of Foreign Citizen","9c1db4c6":"#### Missing Values","ef0e1813":"# Cases Rises in State Over Time","978851a1":"### Merging Both DataFrame","55495a5e":"#### Missing Values","88e3f88c":"### Estimated Population 2018 vs Confirmed Cases\n<br>\n<li> <b> Data Source :<\/b> <\/li>\n    http:\/\/statisticstimes.com\/demographics\/population-of-indian-states.php","950dbcc2":"## Function for Visualizing Missing and Available Data Distribution","6edc6eee":"## No of State affected Over Time","ac695706":"<img src=\"https:\/\/i.ibb.co\/KKVVDjW\/Image-Tittle.jpg\" alt=\"Image-Tittle\" border=\"0\">","361c0263":"### Reading Data","26471a6d":"# Geographical Map","5e1732fd":"# Zone Distribution","b943909d":"#### Missing Values","40d5be7e":"# Dataset ","3fa94b91":"https:\/\/app.flourish.studio\/visualisation\/1977187\/edit","32965aa3":"#### Reading shape Files","bd73e54b":"## Dstrict Wise Geographical Map","b8873fb4":"# Libraries","3de1a55f":"#### State Level Zone Distribution","399f5008":"## Plotting Map","1fb993b5":"## Cases vs Gender","9381224a":"#### Plotting","a37d5257":"### Reading DataSet","7cad06c1":"#### Working with Available data","611cee29":"## Top 10 States","8dfd9c27":"# Preprocessing\n","caaa8443":"### Plotting","d8fe0752":"## State & District Wise Confirmed Cases","7424c7b8":"# Timeline","986de7e7":"## Preprocessing and Cleaning Data","f3375deb":"## Cleaning","6df81d98":"## Transmission Type","5714cca9":"# Declaration\n\n* According to MoHFW https:\/\/www.mohfw.gov.in\/ some new cases have been reassigned states as per latest information\n* Confirmed cases includes both Indian and Foriegn citizen\n* Cured cases includes cured, discharged and migrated patients \n\n## Data Source\n* https:\/\/www.mohfw.gov.in\/\n* https:\/\/api.covid19india.org\/\n","ab805de5":"https:\/\/app.datawrapper.de\/map\/jzl6U\/visualize#refine-the-chart","db282b8b":"## State Wise Geographical Map","a4d9c18e":"#### Working with Available data","ef996f81":"## Distribution of ages of confirmed patients","ceed1b9d":"## Patient Data Analysis","11b22bf1":"## Distribution of Gender of Confirmed Patients","3d93ca02":"#### Working with Available data","f2944568":"## Plotting Map","a710dab6":"## Preprocessing and Cleaning Data","5cec1497":"### GitHub Repository for this Notebook\n<a href=\"https:\/\/github.com\/sreyaz01\/covid-19-india-data-analysis\"><img src=\"https:\/\/i.ibb.co\/B3vvzTy\/0-s-Y-XTIBzlfd2zskq.png\" alt=\"0-s-Y-XTIBzlfd2zskq\" border=\"0\" width=\"300\" height=\"100\"><\/a>","bdfd73ad":"## Age vs Gender","5beaf51b":"#### Checking for missing States","249cd704":"## No. of New Cases EveryDay After 50","04cb817f":"#### Working with Available data","bb688c53":"### District Count in each Zone ","5bc9c763":"## No of New Cases Each Day","179655ff":"### Merging Both DataFrame","8bada194":"#### Geographical Map","1610ad7e":"## Confirmed Vs Deaths","b5d893e3":"#### Missing Values","d6c01b31":"<img src=\"https:\/\/i.ibb.co\/HKtKPy6\/announcments.jpg\" alt=\"announcments\" border=\"0\">"}}