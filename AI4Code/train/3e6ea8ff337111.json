{"cell_type":{"6035d2c8":"code","898137da":"code","520b0532":"code","6957389d":"code","c72fef47":"code","81c0acf1":"code","57d70aaa":"code","7145a7e5":"code","e86d6787":"code","a90d5715":"markdown","334916e7":"markdown","1444abce":"markdown","a02faa52":"markdown","54e354c8":"markdown","53580d92":"markdown","bcfa95e6":"markdown","eaf6cafa":"markdown","4a9a4e60":"markdown","df7cd70e":"markdown","0d2fbf81":"markdown","c6c6c251":"markdown","bfd48abc":"markdown","2e8f0512":"markdown"},"source":{"6035d2c8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))\nimport sys\nimport matplotlib.pyplot as plt\n%matplotlib inline","898137da":"test_controls = pd.read_csv('..\/input\/test_controls.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ntest['sirna'] = 0\ntest['well_type'] = 'treatment'\ntest['dataset'] = 'test'\ntest_controls['dataset'] = 'test'\n\n\ntrain_controls = pd.read_csv('..\/input\/train_controls.csv')\ntrain = pd.read_csv('..\/input\/train.csv')\ntrain['sirna'] = 0\ntrain['well_type'] = 'treatment'\ntrain['dataset'] = 'train'\ntrain_controls['dataset'] = 'train'\n\nmd = pd.concat([train, train_controls, test, test_controls]).reset_index(drop=True)","520b0532":"unique_experiments = md.experiment.unique()\nlen(unique_experiments)","6957389d":"names, counts = np.unique([experiment.split('-')[0] for experiment in unique_experiments], return_counts=True)\nfor experiment_name, experiment_count in zip(names, counts):\n    print('{} experiments focused on the cell type {}'.format(experiment_count, experiment_name))","c72fef47":"one_experiment_md = md[(md.experiment=='RPE-03')]\none_experiment_md.head()","81c0acf1":"one_experiment_md.groupby(['plate']).count()","57d70aaa":"import geopandas as gpd\nfrom shapely.geometry import Point\n\ndef letter_to_int(letter):\n    alphabet = list('abcdefghijklmnopqrstuvwxyz'.upper())\n    return alphabet.index(letter) + 1\n\ndef well_to_point(well):\n    letter = letter_to_int(well[0])\n    number = int(well[1:])\n    return Point(letter, number)\nmd['geometry'] = md.well.apply(lambda well: well_to_point(well))\nmd = gpd.GeoDataFrame(md)\nmd.head()","7145a7e5":"def plot_well_type_positions_for_experiment(experiment_name):\n    fig, axes = plt.subplots(1, 4, figsize=(20, 5))\n    for plate, ax in zip([1,2,3,4], axes):\n        one_plate_md = md[md.experiment==experiment_name]\n        if plate==1:\n            legend=True\n        else:\n            legend=False\n        one_plate_md.plot(column='well_type',legend=legend, ax=ax);\n        if plate==1:\n            leg = ax.get_legend()\n            leg.set_bbox_to_anchor((-0.3, 0., 0.2, 0.2))\n    _ = fig.suptitle('Plate 1 to 4 - Experiment {}'.format(experiment_name))\n    \nplot_well_type_positions_for_experiment(md.experiment.unique()[0])\nplot_well_type_positions_for_experiment(md.experiment.unique()[-1])","e86d6787":"def plot_sirna_positions_for_experiment(experiment_name):\n    fig, axes = plt.subplots(1, 4, figsize=(20, 5))\n    for plate, ax in zip([1,2,3,4], axes):\n        one_plate_md = md[md.experiment==experiment_name]\n        one_plate_md = one_plate_md[one_plate_md.well_type=='positive_control'] \n        one_plate_md.plot(column='sirna', ax=ax, categorical=True, cmap='tab20c');\n    _ = fig.suptitle('Plate 1 to 4 - Experiment {}'.format(experiment_name))\n    \nplot_sirna_positions_for_experiment(md.experiment.unique()[0])\nplot_sirna_positions_for_experiment(md.experiment.unique()[-1])","a90d5715":"# Understand the dataset","334916e7":"# Getting setup","1444abce":"# To Be Continued...","a02faa52":"Finding hard to follow this dataset? \n\nThis notebook should help you visualise and understand what the hell is going on! I have just started exploring the dataset and I am aiming to refresh this kernel soon with more always more visualisations.\n\nMore technical details are provided here: https:\/\/www.rxrx.ai\/","54e354c8":"# Load the metadata","53580d92":"The location of each of the 1,108 non-control siRNA conditions is randomized in each experiment to prevent confounding effects of the location of a particular well.","bcfa95e6":"# Recursion Cellular Image Classification<\/span>\n### Disentangling biological signal from experimental noise in cellular images<\/span>\n![](https:\/\/assets.website-files.com\/5cb63fe47eb5472014c3dae6\/5d040176f0a2fd66df939c51_figure1%400.75x.png)","eaf6cafa":"An experiment is made with:\n - 4 plates\n     - in which 308 wells have been photographed.","4a9a4e60":"# What is an experiment?\nLet's select an experiment and explore.","df7cd70e":"Each plate holds the same 30 control siRNA conditions (positive controlled), 277 different non-control siRNA (treatment), and one untreated well (negative control). The well types follow the same architecture from one plat to another and experiment to another.","0d2fbf81":"# Visualise the plats!\nI believe that a drawing is always better than a long paragraph, let's transform those well code into actual locations.","c6c6c251":"The dataset is composed of 51 experiments.","bfd48abc":"* I hope you enjoyed this kernel, I will commit more soon! Please let a thumbs up or a comment if you appreciated the kernel! :)","2e8f0512":"The same setup experiments have been tested on four cell types: HUVEC, RPE, HepG2, U2OS!"}}