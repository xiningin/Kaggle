{"cell_type":{"9282ca94":"code","d6652b5c":"code","725ed7db":"code","520dd24e":"code","2d1eb153":"code","d4b38c9e":"code","6e1b709d":"code","07a99348":"code","41f414f3":"code","3225ba1a":"code","824ca089":"code","a43a05a2":"code","18b7e7ff":"code","51a725cf":"code","f48eefbe":"code","98bee29a":"code","d97a0f7c":"code","5de95633":"code","e6e0246d":"code","a561ffe4":"code","f6b0e5d9":"code","09a1a7e2":"code","bb6cde39":"code","2408f1ba":"code","83aef8db":"code","9e6581a8":"code","9b54392a":"code","d68ca62b":"code","6d094fea":"code","19982d66":"code","43bd7f65":"code","c8024135":"code","3664c974":"code","4d3b78a3":"code","24e9cd85":"code","578428f6":"code","e8ad7b2f":"code","839b5dad":"code","4881c83a":"code","00cdeeb5":"code","548a6764":"code","9db6f7c9":"code","14080cd4":"code","4d135ccc":"code","73892106":"code","ef931940":"code","af26f694":"code","50fd5b88":"code","b14de4d7":"code","77ff223f":"code","2150e8cc":"code","07b0ffbb":"code","8a83af1e":"code","676a4fc3":"code","dccb7cd3":"code","001b9eb6":"code","f2bcbf4d":"code","8e9a5669":"code","747f2acf":"code","a641a4c3":"code","4ddb1b4d":"code","9685bfad":"code","28d2e7f7":"code","65bdbc34":"code","117d145c":"code","5845989d":"code","52b1d4db":"code","86fe2e21":"code","a19817b1":"code","376a2e78":"markdown","25c64d7a":"markdown","a2de2149":"markdown","549de709":"markdown","93d20088":"markdown","2d3fdf62":"markdown","59aa573d":"markdown","90a84d4b":"markdown","b4b0c664":"markdown","cbf8e570":"markdown","78e1c698":"markdown","89aea190":"markdown","44833996":"markdown","44edce1d":"markdown","6f3df7c3":"markdown","fa7daa11":"markdown","b6a0a5bb":"markdown","9f87893a":"markdown","2835bc18":"markdown","df8bd87e":"markdown","c8473eb9":"markdown","5d591a1c":"markdown","322afea3":"markdown","4c054a9e":"markdown","6828fe37":"markdown","7dd19c80":"markdown","305da7bf":"markdown","f4fa9a90":"markdown","f1a00336":"markdown"},"source":{"9282ca94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d6652b5c":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport numpy as np\nfrom pathlib import Path\nimport plotly.offline as py\nimport plotly.express as px\nimport cufflinks as cf","725ed7db":"py.init_notebook_mode(connected=False)\ncf.set_config_file(offline=True)\nsns.set()\npd.plotting.register_matplotlib_converters\n%matplotlib inline","520dd24e":"file1 = '\/kaggle\/input\/covid19-in-italy\/covid19_italy_province.csv'\nfile2 = '\/kaggle\/input\/covid19-in-italy\/covid19_italy_region.csv'","2d1eb153":"province = pd.read_csv(file1)\nregion = pd.read_csv(file2)","d4b38c9e":"province.head()","6e1b709d":"region.head()","07a99348":"#is null?\npv = province.isnull().sum()\npv[pv>0]","41f414f3":"it_prov = province.dropna()","3225ba1a":"it_prov.isnull().any()","824ca089":"#information \nit_prov.info()","a43a05a2":"#we take only the interest feature\ndata_province = it_prov[['Date', 'ProvinceName', 'Latitude', 'Longitude', 'TotalPositiveCases']].copy()","18b7e7ff":"data_province['Date'] = pd.to_datetime(data_province['Date'])\ndata_province['Date'] = data_province['Date'].dt.strftime('%m\/%d\/%Y')\ndata_province.head() #ok","51a725cf":"region['Date'] = pd.to_datetime(region['Date'], infer_datetime_format=True)\nregion['Date'] = region['Date'].dt.strftime('%m\/%d\/%Y')","f48eefbe":"#now for region\nregion.isnull().sum()[region.isnull().sum()>0]","98bee29a":"# information\nregion.info()","d97a0f7c":"#we remove the feature not necessary\ndata_region = region.drop(['SNo', 'Country', 'RegionCode'], axis=1)","5de95633":"data_region.head()","e6e0246d":"start_date = data_province.Date.min()\nend_date = data_province.Date.max()","a561ffe4":"daily_info_province = data_province[data_province.Date == end_date].sort_values(by='TotalPositiveCases',\\\n                                                                                ascending=False)\ndaily_info_province.style.background_gradient(cmap='Pastel1_r')","f6b0e5d9":"print('========Province Information on COVID-19 ======================')\nprint('========= Report at date {} ==================\\n'.format(end_date))\nprint('Number of province are touched: {}'.format(len(daily_info_province.ProvinceName.unique())))\nprint('Number of people are positive case: {}'.format(daily_info_province.TotalPositiveCases.sum()))\nprint('Province most affected: {}'.format((daily_info_province.iloc[0, 1], daily_info_province.iloc[0, 4])))\nprint('Province less affected: {}'.format((daily_info_province.iloc[105, 1], daily_info_province.iloc[105, 4])))\nprint('================================================================')","09a1a7e2":"#plotting\ndaily_province = daily_info_province.set_index('ProvinceName')\ndaily_province['TotalPositiveCases'].iplot(kind='bar', title='Italy affected by COVID-19',\\\n                                           yTitle='Total Positive cases', colors='blue', lon='Longitude', \n                                          lat='Latitude')","bb6cde39":"case = data_province.groupby('Date')['TotalPositiveCases'].agg('sum')","2408f1ba":"case.iplot(kind='bar', title = 'Total Positive cases  evolution in Italy', yTitle='Total Positive cases')","83aef8db":"overTime_case = data_province.groupby(['Date', 'ProvinceName'])['TotalPositiveCases'].agg('sum')","9e6581a8":"fig = px.bar(daily_info_province, \n             x=\"ProvinceName\", \n             y=\"TotalPositiveCases\",\n             color='TotalPositiveCases',\n             hover_name=\"ProvinceName\",\n             animation_frame= 'Date',\n             title='Global COVID-19 Infections over time')\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","9b54392a":"#latitude & longitude\nsns.jointplot(x='Longitude', y='Latitude', data=data_province, kind='kde', annot_kws=dict(stat=\"r\") )\nplt.title('Covid19 province density')","d68ca62b":"center_point = dict(lon=9, lat=46)\nfigx = px.density_mapbox(data_province, lat='Latitude', lon='Longitude', z=\"TotalPositiveCases\",\n                        center = center_point, hover_name='ProvinceName', zoom = 5,\n                         range_color= [10, 20] , radius=10,\n                        mapbox_style= 'open-street-map', title='Novel Covid19 in Italy',\n                        animation_frame='Date')\nfigx.update(layout_coloraxis_showscale=False)\nfigx.show()","6d094fea":"size = data_province.TotalPositiveCases.pow(0.4)\nfigy = px.scatter(data_province, x='Latitude', y='Longitude',\n                  color=\"TotalPositiveCases\", \n                        hover_name='ProvinceName', size=size,\n                         title='Novel Covid19 move across Italy',\n                        animation_frame='Date')\nfigy.update(layout_coloraxis_showscale=False)\nfigy.show()","19982d66":"figs = px.scatter_3d(data_province, x='Longitude', y='Latitude', z='TotalPositiveCases',\n                 hover_name='ProvinceName', \n                    size= size, opacity=0.7,\n                     animation_frame='Date', color='TotalPositiveCases')\nfigs.update(layout_coloraxis_showscale=False)\nfigs.show()","43bd7f65":"# feature statistics\nneed_feature = list(set(data_region.columns) - set(['Latitude', 'Longitude','Date', 'RegionName']))\ndneed = list(set(data_region.columns) - set(['Latitude', 'Longitude', 'RegionName'])) \ndata_region[dneed].describe()","c8024135":"data_region[need_feature].corr()","3664c974":"from scipy import stats, linalg\n\ndef partial_corr(C):\n    \"\"\"\n    Returns the sample linear partial correlation coefficients between pairs of variables in C, controlling \n    for the remaining variables in C.\n    Parameters\n    ----------\n    C : array-like, shape (n, p)\n        Array with the different variables. Each column of C is taken as a variable\n    Returns\n    -------\n    P : array-like, shape (p, p)\n        P[i, j] contains the partial correlation of C[:, i] and C[:, j] controlling\n        for the remaining variables in C.\n    \"\"\"\n\n    C = np.asarray(C)\n    p = C.shape[1]\n    P_corr = np.zeros((p, p), dtype=np.float)\n    for i in range(p):\n        P_corr[i, i] = 1\n        for j in range(i+1, p):\n            idx = np.ones(p, dtype=np.bool)\n            idx[i] = False\n            idx[j] = False\n            beta_i = linalg.lstsq(C[:, idx], C[:, j])[0]\n            beta_j = linalg.lstsq(C[:, idx], C[:, i])[0]\n\n            res_j = C[:, j] - C[:, idx].dot( beta_i)\n            res_i = C[:, i] - C[:, idx].dot(beta_j)\n\n            corr = stats.pearsonr(res_i, res_j)[0]\n            P_corr[i, j] = corr\n            P_corr[j, i] = corr\n\n    return P_corr","4d3b78a3":"pcoray = data_region[need_feature].values \ncorrpartial = pd.DataFrame(partial_corr(pcoray), columns=need_feature, index=need_feature)\ncorrpartial.head(15)","24e9cd85":"# I take only TotalPositiveCases to see the correlation with all other feature\ndata_region[need_feature].corr().loc[:,'TotalPositiveCases']","578428f6":"daily_info_region = data_region[data_region.Date.isin([end_date])].sort_values(by='TotalPositiveCases',\\\n                                                                                ascending=False)\ndaily_region = daily_info_region.set_index('RegionName')","e8ad7b2f":"daily_region['TotalPositiveCases'].iplot(kind='bar', title='Italy affected by COVID-19',\\\n                                           yTitle='Total Positive cases', colors='blue', lon='Longitude', \n                                          lat='Latitude')","839b5dad":"#latitude & longitude\nsns.jointplot(x='Longitude', y='Latitude', data=data_region, kind='kde', annot_kws=dict(stat=\"r\") )\nplt.title('Covid19 region density ')","4881c83a":"center_point = dict(lon=9, lat=46)\nfigi = px.density_mapbox(data_region, lat='Latitude', lon='Longitude', z=\"TotalPositiveCases\",\n                        center = center_point, hover_name='RegionName', zoom = 5,\n                         range_color= [10, 20] , radius=10,\n                        mapbox_style= 'open-street-map', title='Novel Covid19 region in Italy',\n                        animation_frame='Date')\nfigi.update(layout_coloraxis_showscale=False)\nfigi.show()","00cdeeb5":"siz = data_region.TotalPositiveCases.pow(0.4)\nfige = px.scatter(data_region, x='Latitude', y='Longitude',\n                  color=\"TotalPositiveCases\", \n                        hover_name='RegionName', size=siz,\n                         title='Novel Covid19 move across Italy',\n                        animation_frame='Date')\nfige.update(layout_coloraxis_showscale=False)\nfige.show()","548a6764":"figo = px.scatter_3d(data_region, x='Longitude', y='Latitude', z='TotalPositiveCases',\n                 hover_name='RegionName', \n                    size= siz, opacity=0.7,\n                     animation_frame='Date', color='TotalPositiveCases')\nfigo.update(layout_coloraxis_showscale=False)\nfigo.show()","9db6f7c9":"X = data_region[data_region.Date.isin([end_date])] \ncols = list(set(X.columns) - set(['Date']))\nX_sim = X[cols]\nXsim = X_sim.set_index('RegionName')","14080cd4":"print('============ Today: {}; which Region are Similar? ================='.format(end_date))\nXsim.style.background_gradient('viridis')","4d135ccc":"import plotly.figure_factory as reg\nff = reg.create_dendrogram(Xsim, orientation='left', labels=Xsim.index)\nff.update_layout(width=800, height=800)\nff.show()","73892106":"xp = data_region[need_feature].corr()\nmask_ut=np.triu(np.ones(xp.shape)).astype(np.bool)\nsns.heatmap(xp, mask=mask_ut, cmap= 'viridis')\nplt.title('Correlation of all features')","ef931940":"# Feature selection with high partial correlated features \n# Select upper triangle of correlation matrix\nupper = corrpartial.where(np.triu(np.ones(corrpartial.shape),k=1).astype(np.bool))\n# Find index of feature columns with partial correlation greater than 0.65\nhigh_columns = [column for column in upper.columns if any(abs(upper[column]) > 0.65)]\nhigh_cp = corrpartial[high_columns]    #.drop(index=0, columns=to_drop)\nto_drop = list(set(upper.columns) - set(high_columns)) \n\nprint(\"====================   Feature with High Partial Correlation   ==============================\")\nhigh_cp=  high_cp.drop(index=to_drop)\nhigh_cp.style.background_gradient('viridis')","af26f694":"need_feature","50fd5b88":"plane = data_region[high_columns].copy()\nplane.head(2)","b14de4d7":"sns.pairplot(plane)","77ff223f":"#groupby \nla_lon = data_region.groupby(['Latitude','Longitude','Date','RegionName'])[need_feature].agg('sum')\nlaon = la_lon.reset_index()\nlaon.head()","2150e8cc":"ch = laon.RegionName.unique()\nch","07b0ffbb":"\nspace_time = px.line(laon,x='Latitude', y='TotalPositiveCases',animation_frame='Date', hover_name='RegionName',\n                    range_y=[0, 35000])\n\nspace_time.update(layout_coloraxis_showscale=False) \nspace_time.show()","8a83af1e":"# we have 21 regions, I divide it to 3 groups where each group have 7 regions to plot it\nvorac1 = []\nvorac2 = []\nvorac3 = []\nk = 0\nfor c in ch:\n    k += 1\n    voir = laon[laon.RegionName == c].copy()\n    \n    if k <= 7:\n        vorac1.append(voir)\n    \n    elif not(k <= 7) and k <= 14:\n        vorac2.append(voir)\n        \n    else:\n        vorac3.append(voir)\n        \n    voir = pd.DataFrame()\n\n#voir1= laon[laon.RegionName=='Sicilia']\n#voir2 = laon[laon.RegionName=='Calabria']\n#voir3 = laon[laon.RegionName=='Sardegna']\n\nlazio = pd.concat(vorac1)\nroma = pd.concat(vorac2)\ninter = pd.concat(vorac3)","676a4fc3":"print('========== checkpoint ===================')\nprint('lazio: {}\\nroma: {}\\ninter: {}'.format(lazio.RegionName.nunique() , roma.RegionName.nunique() , \n                                              inter.RegionName.nunique() ))\nprint('========== ok ===========================')","dccb7cd3":"print('========== checkpoint ===================')\nprint('lazio: {}\\nroma: {}\\ninter: {}'.format(lazio.RegionName.unique() , roma.RegionName.unique() , \n                                              inter.RegionName.unique() ))\nprint('========== ok ===========================')","001b9eb6":"def multiple_plot(data=None, figsize=(20,10), sp = (0.4, 0.2)):\n    \"\"\" plot many figure\n        \n        figsize the size of figure\n        \n        sp the spacing of the figure\n        \n    \"\"\"\n    a = data['RegionName'].unique()\n    \n    fig = plt.figure(figsize=figsize)\n    fig.subplots_adjust(hspace= sp[0], wspace=sp[0])\n    \n    for i, ct in enumerate(a):\n        ax = fig.add_subplot(3,3,i+1)\n        \n        data[data['RegionName'] == ct].plot(x='Date', y='TotalPositiveCases', ax=ax)\n        ax.set_xlabel('Date')\n        ax.set_ylabel('TotalPositiveCases')\n        ax.set_title('nCovid19 evolution in Region = ' + ct)\n        \n    plt.show() ","f2bcbf4d":"multiple_plot(data=lazio, figsize=(20,15), sp = (0.4, 0.1))","8e9a5669":"multiple_plot(data = roma, figsize=(20,15), sp = (0.4, 0.1))","747f2acf":"multiple_plot(data=inter, figsize=(20,15), sp = (0.4, 0.1))","a641a4c3":"def extraction_data(data=None, feature=['RegionName', 'TotalPositiveCases'], region=None, date='Date'):\n    \"\"\"\n        - data: the array-like dataframe pandas\n        - feature: the feature that we need to use to do prediction one is object and second is numeric\n        - region: the region where it is interested to forecast\n        - date: the date for fprecast\n        \n        Returns\n            - the raw data for all country. full_data\n            - the raw  data for specific region. full_region\n    \"\"\"\n    \n    \n    if len(feature) == 2:\n        pass\n        \n    elif len(feature) == 1:\n        pass\n    else:\n        print('feature must have two entries')\n        return -1\n    \n    if type(date) != str:\n        print('date variable must be a string type. Thank!')\n        return -1\n    \n    #if type(region) != str:\n     #   print('region variable must be a string type. Thank!')\n      #  return -1\n    \n    #if type(data) == type(pd.DataFrame()):\n     #   print('data must be a pandas dataframe type')\n      #  return -1\n    \n    \n    if region:\n        \n        if type(feature[0]) != str or type(feature[1]) != str:\n            print('feature must have two entries the same string type. Thank!')\n            return -1\n    \n        country = feature[0] # pandas series correspond to columns country must be a string type \n        umeric = feature[1] #  pandas series correspond to columns country must be a numeric type\n    \n        extract_data = data[[date, country, umeric]].copy()\n        extract_region = extract_data[extract_data[country] == region].copy()\n        full_region = extract_region[[date, umeric]].copy()\n        \n        return full_region # for region\n    \n    else:\n        umeric = feature[0]\n        full_data = data[[date, umeric]].copy()\n        return full_data # when we  do not use a region\n    \n    \ndef preventive_measures(data=None, foryou = None, csp = 0.05 ):\n    '''\n        foryou: a string name of country\/region concerns by a preventive measures\n        data: pandas dataframe\n        cdp: is the changepoint_prior_scale for prophet\n    \n    '''\n    from fbprophet import Prophet\n    from fbprophet.diagnostics import cross_validation\n    from fbprophet.diagnostics import performance_metrics\n    from fbprophet.plot import plot_cross_validation_metric\n    \n    if data.shape[1] != 2:\n        print('We need a rigth dataframe for making a preventive measure. Give another!')\n        return -1\n    \n    print('================ Preventive Measures ===================')\n    print('================ For {} ============================'.format(foryou))\n    print('================ The end of nCOVID-19 ==================\\n')\n    \n    cols = data.columns\n    dat = data.rename(columns={cols[0]:'ds', cols[1]:'y'})\n    \n    print('data after renamed')\n    print(dat.head(3),'\\n')\n        \n    m = Prophet(interval_width=0.95,changepoint_prior_scale=csp)\n    m.fit(dat)\n    \n    # future days\n    futureDays = m.make_future_dataframe(periods=12)\n    print('future days')\n    print(futureDays.tail(),'\\n')\n    \n    forecast = m.predict(futureDays)\n    \n    print('forecast data')\n    print(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(),'\\n')\n    \n    #we plot graph\n    graph = m.plot(forecast)\n    plt.title( 'ncovid 19 forecasting for ' + foryou)\n    \n    graph1 = m.plot_components(forecast)\n    plt.title('components forecast for ' + foryou)\n    \n    if dat.shape[0] > 20:\n        #for cross validation we are taking the range of our data \n        df_cv = cross_validation(m, initial='12 days', period='2 days', horizon = '10 days')\n        print('cross validation')\n        print(df_cv.head(3), '\\n')\n    \n        df_p = performance_metrics(df_cv)\n        print('performance metrics')\n        print(df_p.head(), '\\n')\n        \n        ufig = plot_cross_validation_metric(df_cv, metric='mape')\n    else:\n        print('We cannot make a diagnostic for {} because there have small data.'.format(foryou))","4ddb1b4d":"silic = extraction_data(data=lazio, region='Sicilia')","9685bfad":"preventive_measures(silic, foryou='Sicilia', csp=1.05)","28d2e7f7":"zio = extraction_data(data=roma, region='Lazio')","65bdbc34":"preventive_measures(data=zio, foryou='Lazio', csp=1.05)","117d145c":"lombard = extraction_data(data=inter, region='Lombardia')","5845989d":"preventive_measures(data=lombard, foryou='Lombardia', csp=1.05)","52b1d4db":"covid = data_region.groupby('Date')[need_feature].agg('sum')\ncovid = covid.reset_index()\ncovid.head()","86fe2e21":"italy = extraction_data(data=covid, feature=['TotalPositiveCases'] )","a19817b1":"preventive_measures(data=italy, foryou='Italy', csp=1.05)","376a2e78":"The correlation tell us that all feature are more correlated but we verify very well if there is true using partial correlation","25c64d7a":"# Spread to various region over time","a2de2149":"**We are plotting only the feature that are most partial correlated** ","549de709":"# Which region or province are similar?","93d20088":"# Some Statistics and Visualization","2d3fdf62":"**Which region are similar for Total positive cases?**","59aa573d":"## Province","90a84d4b":"# Predicting the spread of covid19 ahead time to take preventive mesures","b4b0c664":"## Why covid19 like to move along a latitude not longitude? there is causing by the displacement of population or another?\n\nwe need to see that","cbf8e570":"## UpNext!\n\n","78e1c698":"This is a spread of COVID-19 space-time along a Latitude. Lombardia is the Source of the spreading of COVID-19. It must be isolated from other cities. \n\nThis curve are nonlinear spreading","89aea190":"TotalPositiveCases are most correlated with all other feature. So, we can use only this feature to know the behavior of disease. ","44833996":"Next find the period in space and time after determinate a velocity of the spreading of covid-19. soon.","44edce1d":"please, see the line between piemonte region to Basilicata. \n\ni have the impression that each region transmits the virus to another region starting with the lombardia region. then follows other regions like Emilla, Veneto and Piemeto. And that piemeto then transmits the virus to liguria until basilicata forming a curvature. ","6f3df7c3":"## Region","fa7daa11":"**Latitude vs Longitude**","b6a0a5bb":"**Correlation**","9f87893a":"# Latitude: space-time spread of COVID-19 Italy","2835bc18":"# Correlation and Partial correlation between feature over time","df8bd87e":"**Partial correlation**\n\nIn probability theory and statistics, partial correlation measures the degree of association between two random variables, with the effect of a set of controlling random variables removed. If we are interested in finding to what extent there is a numerical relationship between two variables of interest, using their correlation coefficient will give misleading results if there is another, confounding, variable that is numerically related to both variables of interest. This misleading information can be avoided by controlling for the confounding variable, which is done by computing the partial correlation coefficient. This is precisely the motivation for including other right-side variables in a multiple regression; but while multiple regression gives unbiased results for the effect size, it does not give a numerical value of a measure of the strength of the relationship between the two variables of interest.\n\nFor example, if we have economic data on the consumption, income, and wealth of various individuals and we wish to see if there is a relationship between consumption and income, failing to control for wealth when computing a correlation coefficient between consumption and income would give a misleading result, since income might be numerically related to wealth which in turn might be numerically related to consumption; a measured correlation between consumption and income might actually be contaminated by these other correlations. The use of a partial correlation avoids this problem.\n\nExtract from: https:\/\/en.wikipedia.org\/wiki\/Partial_correlation","c8473eb9":"source: https:\/\/raphaelvallat.com\/correlation.html\n\nsource: https:\/\/en.wikipedia.org\/wiki\/Partial_correlation\n\nsource: https:\/\/stats.stackexchange.com\/questions\/288273\/partial-correlation-in-panda-dataframe-python\/298754","5d591a1c":"source: https:\/\/gist.github.com\/fabianp\/9396204419c7b638d38f","322afea3":"## spread of Covid19 over space and time","4c054a9e":"**Correlation**","6828fe37":"# Italy preventive measures","7dd19c80":"I recommand this notebook https:\/\/www.kaggle.com\/paultimothymooney\/does-latitude-impact-the-spread-of-covid-19 ","305da7bf":"**Partial Correlation**","f4fa9a90":"**Something is not normal. please, look for the behaviour between Lodi and bergamo**","f1a00336":"## latitude & longitude density "}}