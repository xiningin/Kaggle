{"cell_type":{"893ea0ba":"code","dabe0122":"code","fb83bbf8":"code","12dbaac2":"code","bc89ba6f":"code","75567f40":"code","08e8dcf9":"code","9aafbf97":"code","56883a6d":"code","efb5cfb5":"code","197d702d":"code","9ad9459b":"code","fd97b1db":"code","42fc3c5e":"code","f6952af2":"code","0e03cead":"code","7b6dfb46":"markdown","3c65015b":"markdown"},"source":{"893ea0ba":"import os\nimport re\nimport random\nfrom copy import copy\n\nimport requests\nfrom bs4 import BeautifulSoup\n\nfrom IPython.display import HTML\nfrom PIL import Image\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import animation\nfrom matplotlib.pyplot import figure\nimport matplotlib.image as image\nfrom matplotlib.cbook import get_sample_data\nfrom matplotlib.offsetbox import OffsetImage, AnnotationBbox\n\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","dabe0122":"base_url = \"https:\/\/www.tiobe.com\/tiobe-index\/\"\n\nr = requests.get(url=base_url)\nsoup = BeautifulSoup(r.text, \"lxml\")\n\nsrc_icons = [img.get(\"src\") for img in soup.find(\"tbody\").find_all(\"img\")]\nsrc_icons","fb83bbf8":"def download_icon(file_name, url):\n    print(f\"[INFO] starting work with url {url}\")\n    r = requests.get(url)\n    print(f\"[INFO] request status: {r.status_code}\")\n    with open(file_name, \"wb\") as f:\n        print(f\"[INFO] saving file: {file_name}\")\n        f.write(r.content)\n    print(\"--------------------- Saved! --------------------\")","12dbaac2":"for icon in src_icons:\n    file_name = icon.split(\"\/\")[-1]\n    url = base_url + icon\n    download_icon(file_name, url)","bc89ba6f":"plt.imshow(plt.imread(\"Python.png\", 0))","75567f40":"df = pd.read_csv(\"\/kaggle\/input\/most-popular-programming-languages-since-2004\/Most Popular Programming Languages from 2004 to 2021.csv\")\nprint(df.shape)\ndf.head()","08e8dcf9":"df.isna().sum()","9aafbf97":"data = df.drop([\"Date\"], axis=1)","56883a6d":"def create_data_color():\n    r = requests.get(\"https:\/\/www.javatpoint.com\/html-color-names\")\n    code_color = pd.read_html(r.text)[11][\"Color Code\"]\n    unique_np = data.columns\n    colors = {unique_np[i]:code_color[i] for i in range(len(unique_np))}\n    return colors\n\ncolors = create_data_color() ","efb5cfb5":"tmp_names = {\"C\/C++\": \"C.png\", \"C#\": \"C_.png\", \"Delphi\/Pascal\": \"Delphi_Object_Pascal.png\", \"Visual Basic\": \"Visual_Basic.png\", \"Matlab\": 'MATLAB.png'}","197d702d":"icon_list_names = os.listdir()\nicon_list_names","9ad9459b":"names = {k: f\"{k}.png\" for k in data.columns if f\"{k}.png\" in icon_list_names}\nnames.update(tmp_names)\nnames","fd97b1db":"image_data = {k: OffsetImage(Image.open(name)) for k, name in names.items()}\nimage_data","42fc3c5e":"def create_im(frame):# Pie chart\n        ax.clear()  \n        \n        # prepera data from dataframe\n        sort_data = data.iloc[frame].where(lambda x: x > 0.8).sort_values().dropna()\n        labels = sort_data.index        \n        sizes = sort_data.values\n        \n        # choose correct and same color for each label\n        color_data = [colors[el] if el in colors.keys() else \"red\" for el in labels]\n\n        wedges, texts, autotexts = ax.pie(\n            sizes, \n            colors = color_data, \n            labels=labels, \n            autopct='%1.0f%%', \n            startangle=90, \n                        \n                        )\n        #draw circle\n        centre_circle = plt.Circle((0,0),0.70,fc='white')\n\n        fig.gca().add_artist(centre_circle)        \n        \n        # add icons\n        for text in texts:\n            if text.get_text() in image_data.keys():\n                plot(image_data[text.get_text()], text._x, text._y, ax)        \n\n        # Equal aspect ratio ensures that pie is drawn as a circle\n        ax.axis('equal')  \n        plt.tight_layout()\n        ax.xaxis.set_label_position('top')\n        ax.set_title(f\"{df.Date[frame]}\", \n                     fontdict={'fontsize': 18, 'color': \"#737373\",}, \n                     x=0.9, pad=-650)","f6952af2":"def plot(im,x,y, ax=None):\n    if ax is None:\n        ax = plt.gca()\n    \n    ab1 = AnnotationBbox(im, (x*0.75, y*0.8), frameon=False)\n    ax.add_artist(ab1)\n    return ab1","0e03cead":"fig, ax = plt.subplots(figsize=(12, 10))\n\nanim = animation.FuncAnimation(fig, create_im, frames=range(df.shape[0]), interval=600, repeat=False)\n\nHTML(anim.to_html5_video())","7b6dfb46":"## Read data","3c65015b":"## Get icons"}}