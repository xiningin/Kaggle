{"cell_type":{"23c5b52f":"code","5ed20c20":"code","ce28b03c":"code","08ba8c02":"code","4ddf9e7b":"code","45fe29b6":"code","5e564aba":"code","3d54d0af":"code","e581f2db":"code","fcf2a752":"code","11845cfc":"code","4dfb41ad":"code","29dd12cf":"code","49553aeb":"code","02d8c84f":"code","d57dd7b9":"code","dace26cc":"code","b6c1f94f":"code","59f46544":"code","720989df":"code","ea50a778":"code","b136f72d":"code","ae3c51fa":"code","c7b2017d":"code","12b96b66":"code","65d12ee3":"code","a29e02df":"code","be13a397":"code","145ba648":"code","fe03066c":"code","52a2467b":"code","cc9b27fb":"code","33167da8":"code","fd8560da":"code","9f7f4322":"code","ab0493cb":"code","8e777ed7":"code","dbedf09c":"code","c2ea9e09":"code","a9df26b7":"code","6f43e28d":"code","4d53c5eb":"code","7d35b6c6":"code","e96f5217":"code","ee2145c9":"code","a174c134":"code","7831f393":"code","cb69ee0d":"code","2e889a64":"code","4bffdec4":"code","b83b9b48":"code","3573f43e":"code","992f907f":"code","72743aa6":"code","c74bff8c":"code","69478996":"code","cf859514":"code","b3ef245c":"code","3d38d1e9":"code","a9bac2f5":"code","9a1d3a5e":"code","fb84417e":"code","17aa1737":"code","e4d36a0c":"code","f9efb11f":"code","c73c66b9":"code","75a8d660":"code","40592e1e":"code","ac156bc4":"code","ee462fde":"code","c9db4931":"code","7efcd6e2":"code","333df628":"code","9a264e0d":"code","566ce818":"code","cc30c603":"code","e4d4d46e":"code","0e21e39e":"code","c5795041":"code","c0134788":"code","0205c3a3":"code","bc0eafbc":"code","c4608601":"code","6b8f3091":"code","8f42138d":"code","a6a6e252":"code","393e2d01":"code","49a78951":"code","6b846105":"code","7c9a3d0e":"code","357af46d":"code","1bd76452":"code","d5cb2a03":"code","86eb2dc4":"code","be45ba80":"code","cff83210":"code","7f6da086":"code","794eda55":"code","27d0b760":"code","1e02cb82":"code","12803910":"code","26a7897f":"code","41672039":"markdown","cb0245ad":"markdown","0eb2a037":"markdown","e393659b":"markdown","f20ef6ff":"markdown","90e7ac64":"markdown","f051e304":"markdown","ed0ae7f1":"markdown","1f439360":"markdown","ce95e5c6":"markdown","c769fc99":"markdown","c664e585":"markdown","637bdcb8":"markdown","3ec60f60":"markdown","e25819c4":"markdown","ee687d13":"markdown","3f35462f":"markdown","e0e11650":"markdown","8e1febed":"markdown","61c08fff":"markdown","fc907766":"markdown","bdcb2b2e":"markdown","bcb8ab40":"markdown","f31d5b73":"markdown","ae1846d2":"markdown","1f6ef244":"markdown","3d224934":"markdown","c71400e8":"markdown","01ce3367":"markdown","3da23d74":"markdown","10e880ab":"markdown","211608d7":"markdown","a5853df8":"markdown","598ce1a2":"markdown","893d79ab":"markdown","549b643d":"markdown","11fe0868":"markdown","94e2d9e9":"markdown","10d9ec43":"markdown","c3cc8987":"markdown","b0561880":"markdown","2f4f6c08":"markdown","213cf270":"markdown","2cc84d31":"markdown","9247cb40":"markdown","c6157493":"markdown","2c907f55":"markdown","10acaee8":"markdown","eca6fe32":"markdown","695e0dd6":"markdown","e156c6f6":"markdown","d4f78721":"markdown","e1af9bb6":"markdown","9839137d":"markdown","f0ab8b10":"markdown","e0a30104":"markdown","55c4475b":"markdown","b445060c":"markdown","81e1b925":"markdown","19bb820b":"markdown","c88c0f16":"markdown","f6466c5a":"markdown","422e36b6":"markdown","8716f36d":"markdown","69758603":"markdown","a940a687":"markdown","5a56d737":"markdown","1e9a192b":"markdown","9b71a88a":"markdown"},"source":{"23c5b52f":"!pip install scikit-multilearn","5ed20c20":"# Common libraries\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Libraries for Feature Selection\n\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.decomposition import PCA\n\n# Libraries for Problem Transformation\n\nfrom skmultilearn.problem_transform import BinaryRelevance\nfrom skmultilearn.problem_transform import ClassifierChain\nfrom skmultilearn.problem_transform import LabelPowerset\n\n# Libraries for model training\n\nfrom sklearn.preprocessing import MinMaxScaler , LabelEncoder\nfrom sklearn.model_selection import train_test_split , GridSearchCV , cross_val_score\n\n# Libraries for algorithm\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Libraries for testing\n\nfrom sklearn.metrics import accuracy_score , classification_report\n\n# Removing warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Storing plots\n\n%matplotlib inline","ce28b03c":"df1 = pd.read_csv('\/kaggle\/input\/flu-data\/H1N1_Flu_Vaccines.csv', delimiter=',')\nfeatures = df1.iloc[:,:-2]\nlabels = df1.iloc[:,[36,37]]","08ba8c02":"features.head()","4ddf9e7b":"labels.head()","45fe29b6":"features.shape","5e564aba":"labels.shape","3d54d0af":"features.info()","e581f2db":"labels.info()","fcf2a752":"features.duplicated().sum()","11845cfc":"labels.duplicated().sum()","4dfb41ad":"features.isnull().sum()","29dd12cf":"labels.isnull().sum()","49553aeb":"# For float fill missing values with the mean\n\nfeatures = features.fillna(features.mean())\nfeatures = round(features)\n\n# For string fill missing value with 'No Category'\n\nfeatures = features.fillna('No Category')","02d8c84f":"features.isnull().sum()","d57dd7b9":"# For Datatype = float\n\nprint(\"h1n1_concern\")\nprint(features.h1n1_concern.unique())\n\nprint(\"h1n1_knowledge\")\nprint(features.h1n1_knowledge.unique())\n\nprint(\"behavioral_antiviral_meds\")\nprint(features.behavioral_antiviral_meds.unique())\n\nprint(\"behavioral_avoidance\")\nprint(features.behavioral_avoidance.unique())\n\nprint(\"behavioral_face_mask\")\nprint(features.behavioral_face_mask.unique())\n\nprint(\"behavioral_wash_hands\")\nprint(features.behavioral_wash_hands.unique())\n\nprint(\"behavioral_large_gatherings\")\nprint(features.behavioral_large_gatherings.unique())\n\nprint(\"behavioral_outside_home\")\nprint(features.behavioral_outside_home.unique())\n\nprint(\"behavioral_touch_face\")\nprint(features.behavioral_touch_face.unique())\n\nprint(\"doctor_recc_h1n1\")\nprint(features.doctor_recc_h1n1.unique())\n\nprint(\"doctor_recc_seasonal\")\nprint(features.doctor_recc_seasonal.unique())\n\nprint(\"chronic_med_condition\")\nprint(features.chronic_med_condition.unique())\n\nprint(\"child_under_6_months\")\nprint(features.child_under_6_months.unique())\n\nprint(\"health_worker\")\nprint(features.health_worker.unique())\n\nprint(\"health_insurance\")\nprint(features.health_insurance.unique())\n\nprint(\"opinion_h1n1_vacc_effective\")\nprint(features.opinion_h1n1_vacc_effective.unique())\n\nprint(\"opinion_h1n1_risk\")\nprint(features.opinion_h1n1_risk.unique())\n\nprint(\"opinion_h1n1_sick_from_vacc\")\nprint(features.opinion_h1n1_sick_from_vacc.unique())\n\nprint(\"opinion_seas_vacc_effective\")\nprint(features.opinion_seas_vacc_effective.unique())\n\nprint(\"opinion_seas_risk\")\nprint(features.opinion_seas_risk.unique())\n\nprint(\"opinion_seas_sick_from_vacc\")\nprint(features.opinion_seas_sick_from_vacc.unique())","dace26cc":"# For Datatype = object\n\nprint(\"age_group\")\nprint(features.age_group.unique())\n\nprint(\"education\")\nprint(features.education.unique())\n\nprint(\"race\")\nprint(features.race.unique())\n\nprint(\"income_poverty\")\nprint(features.income_poverty.unique())\n\nprint(\"marital_status\")\nprint(features.marital_status.unique())\n\nprint(\"rent_or_own\")\nprint(features.rent_or_own.unique())\n\nprint(\"employment_status\")\nprint(features.employment_status.unique())\n\nprint(\"hhs_geo_region\")\nprint(features.hhs_geo_region.unique())\n\nprint(\"census_msa\")\nprint(features.census_msa.unique())\n\nprint(\"employment_industry\")\nprint(features.employment_industry.unique())\n\nprint(\"employment_occupation\")\nprint(features.employment_occupation.unique())","b6c1f94f":"enc = LabelEncoder()","59f46544":"features.age_group = enc.fit_transform(features.age_group)\nfeatures.education = enc.fit_transform(features.education)\nfeatures.race = enc.fit_transform(features.race)\nfeatures.sex = enc.fit_transform(features.sex)\nfeatures.income_poverty = enc.fit_transform(features.income_poverty)\nfeatures.marital_status = enc.fit_transform(features.marital_status)\nfeatures.rent_or_own = enc.fit_transform(features.rent_or_own)\nfeatures.employment_status = enc.fit_transform(features.employment_status)\nfeatures.hhs_geo_region = enc.fit_transform(features.hhs_geo_region)\nfeatures.census_msa = enc.fit_transform(features.census_msa)\nfeatures.employment_industry = enc.fit_transform(features.employment_industry)\nfeatures.employment_occupation = enc.fit_transform(features.employment_occupation)","720989df":"features.info()","ea50a778":"features.head(10)","b136f72d":"features.describe()","ae3c51fa":"# Function to find the outliers\n\ndef findoutliers(column):\n    outliers=[]\n    Q1=column.quantile(.25)\n    Q3=column.quantile(.75)\n    IQR=Q3-Q1\n    lower_limit=Q1-(1.5*IQR)\n    upper_limit=Q3+(1.5*IQR)\n    for out1 in column:\n        if out1>upper_limit or out1 <lower_limit:\n            outliers.append(out1)\n            \n    return np.array(outliers)  ","c7b2017d":"print(len(findoutliers(features.household_adults)))\nprint(len(findoutliers(features.household_children)))","12b96b66":"findoutliers(features.household_adults)","65d12ee3":"findoutliers(features.household_children)","a29e02df":"# Visualising the outliers\nsns.boxplot(features.household_adults)","be13a397":"sns.boxplot(features.household_children)","145ba648":"sns.displot(features.household_adults)","fe03066c":"sns.displot(features.household_children)","52a2467b":"features.h1n1_concern.value_counts()","cc9b27fb":"sns.factorplot('h1n1_concern', data = features, kind = \"count\")","33167da8":"features.h1n1_knowledge.value_counts()","fd8560da":"sns.factorplot('h1n1_knowledge', data = features, kind = \"count\")","9f7f4322":"features.behavioral_antiviral_meds.value_counts()","ab0493cb":"sns.factorplot('behavioral_antiviral_meds', data = features, kind = \"count\")","8e777ed7":"features.behavioral_avoidance.value_counts()","dbedf09c":"sns.factorplot('behavioral_avoidance', data = features, kind = \"count\")","c2ea9e09":"features.behavioral_face_mask.value_counts()","a9df26b7":"sns.factorplot('behavioral_face_mask', data = features, kind = \"count\")","6f43e28d":"features.behavioral_wash_hands.value_counts()","4d53c5eb":"sns.factorplot('behavioral_wash_hands', data = features, kind = \"count\")","7d35b6c6":"features.behavioral_large_gatherings.value_counts()","e96f5217":"sns.factorplot('behavioral_large_gatherings', data = features, kind = \"count\")","ee2145c9":"features.behavioral_outside_home.value_counts()","a174c134":"sns.factorplot('behavioral_outside_home', data = features, kind = \"count\")","7831f393":"features.behavioral_touch_face.value_counts()","cb69ee0d":"sns.factorplot('behavioral_touch_face', data = features, kind = \"count\")","2e889a64":"features.doctor_recc_h1n1.value_counts()","4bffdec4":"sns.factorplot('doctor_recc_h1n1', data = features, kind = \"count\")","b83b9b48":"features.doctor_recc_seasonal.value_counts()","3573f43e":"sns.factorplot('doctor_recc_seasonal', data = features, kind = \"count\")","992f907f":"features.chronic_med_condition .value_counts()","72743aa6":"sns.factorplot('chronic_med_condition', data = features, kind = \"count\")","c74bff8c":"features.child_under_6_months.value_counts()","69478996":"sns.factorplot('child_under_6_months', data = features, kind = \"count\")","cf859514":"features.health_worker.value_counts()","b3ef245c":"sns.factorplot('health_worker', data = features, kind = \"count\")","3d38d1e9":"features.health_insurance.value_counts()","a9bac2f5":"sns.factorplot('health_insurance', data = features, kind = \"count\")","9a1d3a5e":"features.opinion_h1n1_vacc_effective.value_counts()","fb84417e":"sns.factorplot('opinion_h1n1_vacc_effective', data = features, kind = \"count\")","17aa1737":"features.opinion_h1n1_risk.value_counts()","e4d36a0c":"sns.factorplot('opinion_h1n1_risk', data = features, kind = \"count\")","f9efb11f":"features.opinion_h1n1_sick_from_vacc.value_counts()","c73c66b9":"sns.factorplot('opinion_h1n1_sick_from_vacc', data = features, kind = \"count\")","75a8d660":"features.opinion_seas_vacc_effective.value_counts()","40592e1e":"sns.factorplot('opinion_seas_vacc_effective', data = features, kind = \"count\")","ac156bc4":"features.opinion_seas_risk.value_counts()","ee462fde":"sns.factorplot('opinion_seas_risk', data = features, kind = \"count\")","c9db4931":"features.opinion_seas_sick_from_vacc.value_counts()","7efcd6e2":"sns.factorplot('opinion_seas_sick_from_vacc', data = features, kind = \"count\")","333df628":"sns.factorplot('h1n1_vaccine', data = labels, kind = \"count\")","9a264e0d":"sns.factorplot('seasonal_vaccine', data = labels, kind = \"count\")","566ce818":"scaler = MinMaxScaler()\nfeatures = scaler.fit_transform(features)","cc30c603":"features = pd.DataFrame(features)\ncol_name = ['respondent_id','h1n1_concern', 'h1n1_knowledge', 'behavioral_antiviral_meds',\n       'behavioral_avoidance', 'behavioral_face_mask', 'behavioral_wash_hands',\n       'behavioral_large_gatherings', 'behavioral_outside_home',\n       'behavioral_touch_face', 'doctor_recc_h1n1', 'doctor_recc_seasonal',\n       'chronic_med_condition', 'child_under_6_months', 'health_worker',\n       'health_insurance', 'opinion_h1n1_vacc_effective', 'opinion_h1n1_risk',\n       'opinion_h1n1_sick_from_vacc', 'opinion_seas_vacc_effective',\n       'opinion_seas_risk', 'opinion_seas_sick_from_vacc', 'age_group',\n       'education', 'race', 'sex', 'income_poverty', 'marital_status',\n       'rent_or_own', 'employment_status', 'hhs_geo_region', 'census_msa',\n       'household_adults', 'household_children', 'employment_industry',\n       'employment_occupation']\nfeatures.columns = col_name","e4d4d46e":"X = features\ny = labels","0e21e39e":"bestfeatures = SelectKBest(score_func=chi2, k=30)","c5795041":"fit = bestfeatures.fit(X,y)","c0134788":"dfscores = pd.DataFrame(fit.scores_)\ndfcolumns = pd.DataFrame(X.columns)\n\n#concat two dataframes for better visualization\n\nfeatureScores = pd.concat([dfcolumns,dfscores],axis=1)\nfeatureScores.columns = ['Specs','Score']\n\nprint(featureScores.nlargest(25,'Score'))","0205c3a3":"features_kbest = features.iloc[:,[9,10,19,16,13,11,21,18,15,34,0,33,32,8,12,1,24,5,26,17,6,3,7,2,4]]","bc0eafbc":"model = ExtraTreesClassifier()\nmodel.fit(X,y)\nprint(model.feature_importances_)\nplt.figure(figsize=(10,10))\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(25).plot(kind='barh')\nplt.show()","c4608601":"features_tree = features.loc[:,['opinion_seas_risk','doctor_recc_seasonal','opinion_seas_vacc_effective',\n                                 'doctor_recc_h1n1','age_group','opinion_h1n1_risk','hhs_geo_region',\n                                 'opinion_h1n1_vacc_effective','h1n1_concern','opinion_seas_sick_from_vacc',\n                                 'opinion_h1n1_sick_from_vacc','census_msa','education','income_poverty',\n                                 'h1n1_knowledge','household_adults','employment_occupation',\n                                 'employment_industry','household_children','sex','race','marital_status',\n                                 'rent_or_own','behavioral_outside_home','behavioral_large_gatherings']]","6b8f3091":"features.corrwith(labels.h1n1_vaccine)","8f42138d":"features.corrwith(labels.seasonal_vaccine)","a6a6e252":"#get correlations of each features in dataset\ncorrmat = features.corr()\ntop_corr_features = corrmat.index\nplt.figure(figsize=(20,20))\n#plot heat map\ng=sns.heatmap(features[top_corr_features].corr(),annot=True,cmap=\"Blues\")","393e2d01":"features.drop(['opinion_seas_sick_from_vacc','hhs_geo_region','census_msa',\n               'household_adults','household_children','behavioral_antiviral_meds',\n               'education'], axis = 1, inplace = True)","49a78951":"X = features\ny = labels","6b846105":"X","7c9a3d0e":"y","357af46d":"x_train, x_test, y_train, y_test = train_test_split(X,y,test_size=0.3, random_state=23)","1bd76452":"# Gaussian Naive Bayes\n\n# Initializing\n\nmodel_BR_GNB = BinaryRelevance(GaussianNB())\n\n# Training\n\nmodel_BR_GNB.fit(x_train,y_train)\n\n# Predicting\n\ny_pred_BR_GNB = model_BR_GNB.predict(x_test)\n\n# Testing\n\nBR_GNB = accuracy_score(y_test,y_pred_BR_GNB)\nBR_GNB","d5cb2a03":"# Initializing\n\nmodel_BR_DT = BinaryRelevance(DecisionTreeClassifier())\n\n# Training\n\nmodel_BR_DT.fit(x_train,y_train)\n\n# Predicting\n\ny_pred_BR_DT = model_BR_DT.predict(x_test)\n\n# Testing\n\nBR_DT = accuracy_score(y_test,y_pred_BR_DT)\nBR_DT","86eb2dc4":"# Initializing\n\nmodel_BR_LR = BinaryRelevance(LogisticRegression())\n\n# Training\n\nmodel_BR_LR.fit(x_train,y_train)\n\n# Predicting\n\ny_pred_BR_LR = model_BR_LR.predict(x_test)\n\n# Testing\n\nBR_LR = accuracy_score(y_test,y_pred_BR_LR)\nBR_LR","be45ba80":"# Gaussian Naive Bayes\n\n# Initializing\n\nmodel_CC_GNB = ClassifierChain(GaussianNB())\n\n# Training\n\nmodel_CC_GNB.fit(x_train,y_train)\n\n# Predicting\n\ny_pred_CC_GNB = model_CC_GNB.predict(x_test)\n\n# Testing\n\nCC_GNB = accuracy_score(y_test,y_pred_CC_GNB)\nCC_GNB","cff83210":"# Initializing\n\nmodel_CC_DT = ClassifierChain(DecisionTreeClassifier())\n\n# Training\n\nmodel_CC_DT.fit(x_train,y_train)\n\n# Predicting\n\ny_pred_CC_DT = model_CC_DT.predict(x_test)\n\n# Testing\n\nCC_DT = accuracy_score(y_test,y_pred_CC_DT)\nCC_DT","7f6da086":"# Initializing\n\nmodel_CC_LR = ClassifierChain(LogisticRegression())\n\n# Training\n\nmodel_CC_LR.fit(x_train,y_train)\n\n# Predicting\n\ny_pred_CC_LR = model_CC_LR.predict(x_test)\n\n# Testing\n\nCC_LR = accuracy_score(y_test,y_pred_CC_LR)\nCC_LR","794eda55":"# Gaussian Naive Bayes\n\n# Initializing\n\nmodel_LP_GNB = LabelPowerset(GaussianNB())\n\n# Training\n\nmodel_LP_GNB.fit(x_train,y_train)\n\n# Predicting\n\ny_pred_LP_GNB = model_LP_GNB.predict(x_test)\n\n# Testing\n\nLP_GNB = accuracy_score(y_test,y_pred_LP_GNB)\nLP_GNB","27d0b760":"# Initializing\n\nmodel_LP_DT = LabelPowerset(DecisionTreeClassifier())\n\n# Training\n\nmodel_LP_DT.fit(x_train,y_train)\n\n# Predicting\n\ny_pred_LP_DT = model_LP_DT.predict(x_test)\n\n# Testing\n\nLP_DT = accuracy_score(y_test,y_pred_LP_DT)\nLP_DT","1e02cb82":"# Initializing\n\nmodel_RF = RandomForestClassifier()\n\n# Training\n\nmodel_RF.fit(x_train,y_train)\n\n# Predicting\n\ny_pred_RF = model_RF.predict(x_test)\n\n# Testing\nRF = accuracy_score(y_test,y_pred_RF)\nRF","12803910":"Accuracy_Score = [BR_GNB,BR_DT,BR_LR,CC_GNB,CC_DT,CC_LR,LP_GNB,LP_DT,RF]\nModels = ['BR Naive Bayes', 'BR Decision Tree' , 'BR Logistic Regression', 'CC Naive Bayes',\n          'CC Decision Tree', 'CC Logistic Regression', 'LP Naive Bayes', 'LP Decision Tree','Random Forest']","26a7897f":"sns.barplot(Accuracy_Score, Models, color=\"m\")\nplt.xlabel('Accuracy Score')\nplt.title('Accuracy Score')\nplt.show()","41672039":"#### 80% of people have frequently washed their hands.","cb0245ad":"#### We need to encode the object to int","0eb2a037":"#### Very few people had close contact with child under 6 months.","e393659b":"#### 70% of people have avoided touching eyes, nose, or mouth.","f20ef6ff":"#### Most people think seasonal vaccine is somewhat or very effective.","90e7ac64":"# MODEL","f051e304":"#### Doctors recommended seasonal vaccine to only 30% of people.","ed0ae7f1":"## Loading the dataset into the dataframe","1f439360":"#### Most people are not at all worried or not very worried of getting sick from h1n1 vaccine.","ce95e5c6":"#### Doctors recommended the h1n1 vaccine to only 20% of people.","c769fc99":"## Using Label Powerset - Decision Tree","c664e585":"# FEATURE SELECTION","637bdcb8":"## Using Classifier Chains - Naive Bayes","3ec60f60":"#### RANDOM FOREST HAS THE HIGHEST ACCURACY SCORE","e25819c4":"## Installing the required packages","ee687d13":"#### Number of children in household is mostly 0.","3f35462f":"## Checking the statistical information","e0e11650":"## Applying SelectKBest class","8e1febed":"#### Number of other adults in household is mostly 1.","61c08fff":"## Visualising labels","fc907766":"#### Almost non of the people took antiviral medications.","bdcb2b2e":"## Finding the outliers in dataset","bcb8ab40":"## Defining independent and dependent variables","f31d5b73":"#### Most of the people are somewhat concerned about h1n1 vaccine.","ae1846d2":"## Using Binary Relevance - Naive Bayes","1f6ef244":"## Using Binary Relevance - Logistic Regression","3d224934":"## Checking for missing values in dataset","c71400e8":"#### Most people believe the h1n1 vaccine has somewhat low or very low risk.","01ce3367":"#### Very few people work in healthcare.","3da23d74":"# MODEL EVALUATION","10e880ab":"#### Very few people have bought a face mask.","211608d7":"## Visualising categorical data","a5853df8":"## Correlation Matrix using Heatmap","598ce1a2":"# Visualising numerical data","893d79ab":"# Checking for duplicates in dataset","549b643d":"## Using Classifier Chains - Decision Tree","11fe0868":"#### Almost 90% of people have little or lots of knowledge about h1n1 vaccine.","94e2d9e9":"## Filling the missing values","10d9ec43":"# EXPLORATORY DATA ANALYSIS","c3cc8987":"## Finding the unique values of features","b0561880":"## Feature importance using ExtraTrees Classifier","2f4f6c08":"#### Almost everyone has health insurance.","213cf270":"## Splitting the data into training and testing data","2cc84d31":"# FEATURE SCALING","9247cb40":"#### Most of the people think h1n1 is somewhat effective.","c6157493":"#### There are outliers in the dataset but we are not removing them as some algorithms are not sensitive to outliers","2c907f55":"#### There no duplicates in dataset.","10acaee8":"## Checking the data types","eca6fe32":"## Checking the dataset","695e0dd6":"#### There are 36 features so either we should do PCA or feature selection.","e156c6f6":"#### Only less than 30% of people have chronic medical conditions.","d4f78721":"## Random Forest","e1af9bb6":"## Using Label Powerset - Naive Bayes","9839137d":"#### There are lots of missing value so we need to impute them.","f0ab8b10":"## Importing the required libraries","e0a30104":"#### Few people have reduced time at large gatherings.","55c4475b":"#### Majority of people think the riske of seasonal vaccine are somewhat low.","b445060c":"## Checking the shape of dataset","81e1b925":"## Using Min Max scaler","19bb820b":"## Using Binary Relevance - Decision Tree","c88c0f16":"## Encoding the object","f6466c5a":"#### 70% of people have avoided contact with people with symptoms.","422e36b6":"#### Only few people have reduced contact with people outside their household.","8716f36d":"# DATA PRE-PROCESSING","69758603":"## Accuracy score comparison chart","a940a687":"## Using Classifier Chains - Logistic Regression","5a56d737":"## Independent and target variables","1e9a192b":"#### Majority of people are not at all worried of getting sick from seasonal vaccine.","9b71a88a":"# Vaccination Prediction\n## PRCP-1014-VaccinePred\n#### The goal is to predict how likely individuals are to receive their H1N1 and seasonal flu vaccines. In specific, the target is to predict two probabilities: one for h1n1_vaccine and one for seasonal_vaccine. It is a multi-label classification problem."}}