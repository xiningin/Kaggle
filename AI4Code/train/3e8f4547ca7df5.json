{"cell_type":{"dd37409b":"code","0e1ad4d5":"code","40dd98cf":"code","81c79d46":"code","4335214c":"code","ca49b568":"code","93db2427":"code","619eb70e":"code","45854b0a":"code","f77a68e6":"code","19a1ee7d":"code","68dd0de9":"code","ee45ad0b":"code","7f14a262":"code","fe4314d4":"code","9deca487":"code","58bbdd55":"code","eec23b1f":"code","5e759821":"code","b972ac4d":"code","af613537":"code","acdcb12f":"code","7a704234":"code","b379ef5b":"markdown","f29ebde9":"markdown","635d1e22":"markdown","e7ecb310":"markdown","d71a9013":"markdown","b7defdf7":"markdown","8185f120":"markdown","8c250756":"markdown"},"source":{"dd37409b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0e1ad4d5":"import os\nimport zipfile\nimport tensorflow as tf\nimport numpy as np\nimport pandas as pd\nfrom tensorflow.keras.optimizers import RMSprop\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nlocal = '..\/input\/dogs-vs-cats\/train.zip'\n\nwith zipfile.ZipFile('..\/input\/dogs-vs-cats\/train.zip', 'r') as z :\n    z.extractall()","40dd98cf":"filename = os.listdir('.\/train')\ncategories = []\n\nfor imag in filename:\n    categ = imag.split('.')[0]\n\n    if(categ == 'dog'):\n        categories.append(1)\n    else:\n        categories.append(0)\n    \n\ndf = pd.DataFrame({'filename' : filename , 'categories' : categories})\ndf.head()\n    ","81c79d46":"df['categories'].value_counts()","4335214c":"for i in range(10):\n    sample = filename[i+10]\n    image = tf.keras.preprocessing.image.load_img('.\/train\/' + sample)\n    plt.imshow(image)\n    plt.title('dog' if categories[i+10] == 1 else 'cat')\n    plt.show()","ca49b568":"model = tf.keras.Sequential()\n\n#Conv1\nmodel.add(tf.keras.layers.Conv2D(32 , 3 , input_shape=[128 , 128 , 3] , activation = 'relu' , padding = 'same') )\nmodel.add(tf.keras.layers.MaxPool2D(2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\n#Conv2\nmodel.add(tf.keras.layers.Conv2D(64 , 3  , activation = 'relu' , padding = 'same') )\nmodel.add(tf.keras.layers.MaxPool2D(2))\nmodel.add(tf.keras.layers.Dropout(0.2))\n\n#Conv3\nmodel.add(tf.keras.layers.Conv2D(128 , 3  , activation = 'relu' , padding = 'same') )\nmodel.add(tf.keras.layers.MaxPool2D(2))\nmodel.add(tf.keras.layers.Dropout(0.3))\n\n#Conv4\nmodel.add(tf.keras.layers.Conv2D(128 , 3  , activation = 'relu' , padding = 'same') )\nmodel.add(tf.keras.layers.MaxPool2D(2))\nmodel.add(tf.keras.layers.Dropout(0.25))\n\n\nmodel.add(tf.keras.layers.Flatten())\nmodel.add(tf.keras.layers.Dense(512 , activation = 'relu'))\nmodel.add(tf.keras.layers.Dropout(0.25))\n\nmodel.add(tf.keras.layers.Dense(2 , activation = 'sigmoid'))\n\n\n# COMPILING\nmodel.compile(loss = 'binary_crossentropy' , optimizer = RMSprop(lr=1e-4) , metrics=['accuracy'])\n\nmodel.summary()\n","93db2427":"earlystop = tf.keras.callbacks.EarlyStopping(patience=2)\nlearning_rate_reduction = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_acc', \n                                            patience=2, \n                                            verbose=1, \n                                            factor=0.5, \n                                            min_lr=0.00001)\ncallbacks = [earlystop, learning_rate_reduction]","619eb70e":"df['categories'] = df['categories'].map({0 : 'cat', 1 : 'dog'}) \n# Cos flow from data requires y to be string","45854b0a":"df.head()","f77a68e6":"train_df , test_df = train_test_split(df , test_size=0.2 , random_state=42)\n\ntrain_df.reset_index(drop=True , inplace=True)\ntest_df.reset_index(drop=True , inplace=True)","19a1ee7d":"total_train = train_df.shape[0]\ntotal_test = test_df.shape[0]\nbatch_size = 20","68dd0de9":"# train_datagen = ImageDataGenerator(\n#       rescale=1.\/255,\n#       rotation_range=20,\n#       horizontal_flip=True,\n#       fill_mode='nearest')\n\n# train_generator = train_datagen.flow_from_dataframe(train_df , '\/.train\/' , \n#                                                     x_col='filename' , y_col='categories',\n#                                                     target_size=[128,128] , class_mode='categorical',\n#                                                     batch_size=batch_size)\n\ntrain_data = tf.keras.preprocessing.image.ImageDataGenerator(rotation_range=20,\n                                                         rescale = 1.\/255,\n                                                         horizontal_flip=True)\ntrain_generator = train_data.flow_from_dataframe(train_df,\n                                                '.\/train\/',\n                                                x_col = 'filename',\n                                                y_col = 'categories',\n                                                target_size=[128,128],\n                                                class_mode='categorical',\n                                                batch_size=batch_size)\n","ee45ad0b":"valid_data = ImageDataGenerator(rescale = 1.\/255)\n\nvalid_generator = valid_data.flow_from_dataframe(test_df , '.\/train\/' , \n                                                 x_col = 'filename' , y_col = 'categories' ,\n                                                 target_size = [128 , 128] , class_mode='categorical' ,\n                                                batch_size=batch_size)","7f14a262":"history = model.fit_generator(train_generator , epochs = 9 , validation_data=valid_generator , \n                              validation_steps = total_test \/\/ batch_size , \n                              steps_per_epoch = total_train \/\/ batch_size , \n                              callbacks = callbacks)","fe4314d4":"model.save_weights('model.hdf5')","9deca487":"import numpy as np\n\nepochs = range(len(history.history['accuracy']))\n\nplt.plot(epochs , history.history['accuracy'] , 'b' , label='Training Acc')\nplt.plot(epochs , history.history['val_accuracy'] , 'r' , label='Validation Acc')\nplt.title('Training and Validation Accuracy')\n\nplt.figure()\n\nplt.plot(epochs, history.history['loss'], 'b', label='Training Loss')\nplt.plot(epochs, history.history['val_loss'], 'g', label='Validation Loss')\nplt.title('Training and validation loss')\nplt.legend()\n\nplt.show()","58bbdd55":"with zipfile.ZipFile('..\/input\/dogs-vs-cats\/test1.zip', 'r') as z :\n    z.extractall()","eec23b1f":"filenames = os.listdir(\".\/test1\")\ntest_df = pd.DataFrame({'filename' : filenames})    \nsamples = test_df.shape[0]","5e759821":"test_data = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_data.flow_from_dataframe(\n    test_df, \n    \".\/test1\/\", \n    x_col='filename',\n    y_col=None,\n    class_mode=None,\n    target_size=[128,128],\n    batch_size=batch_size,\n    shuffle=False)","b972ac4d":"predict = model.predict_generator(test_generator, steps=np.ceil(samples\/batch_size))","af613537":"test_df['category'] = np.argmax(predict, axis=-1)\ntest_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })","acdcb12f":"submission_df = test_df.copy()\nsubmission_df['id'] = submission_df['filename'].str.split('.').str[0]\nsubmission_df['label'] = submission_df['category']\nsubmission_df.drop(['filename', 'category'], axis=1, inplace=True)\nsubmission_df.to_csv('submission.csv', index=False)","7a704234":"test_df.head()","b379ef5b":"**Get Images**","f29ebde9":"**Train and Valid Generator**","635d1e22":"# Preparing Test DATA","e7ecb310":"# Model Creation","d71a9013":"**Imports**","b7defdf7":"# Data Preparation","8185f120":"# Showing Few Images ****","8c250756":"**Saving Parameters**"}}