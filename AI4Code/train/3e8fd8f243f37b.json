{"cell_type":{"517c205e":"code","3646b3d9":"code","4c967277":"code","653e7b6b":"code","b8be599a":"code","703c0d1b":"code","8d110427":"code","16b5d2d0":"code","eec90019":"code","e2f1eb9e":"code","ec5b4025":"code","528cddd8":"code","ff10c74b":"code","bf92d5da":"code","2c7b5ccf":"code","d1b99014":"code","e06569dd":"code","e9cc9a08":"code","0ca10fca":"code","ed508a3d":"code","133aec5b":"code","58f5b139":"code","85b08f29":"code","03b06bbd":"code","4eae4a7e":"code","3206b72a":"code","394a7230":"markdown","e6394d4f":"markdown","64bd5254":"markdown","1c0db259":"markdown","9d6a9737":"markdown","1f0cc17c":"markdown"},"source":{"517c205e":"import numpy as np\nimport pandas as pd\nimport re\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\ndf = pd.read_csv('..\/input\/data-analyst-jobs\/DataAnalyst.csv')","3646b3d9":"# Drop unnamed column (index?)\ndf = df.drop(df.columns[0],1)\ndf['Easy Apply'] = df['Easy Apply'].str.replace('True','1').str.replace('-1','0') # Convert Easy Apply (True=1,False=0)","4c967277":"df['Job Title'] = df['Job Title'].str.replace('[^\\w\\s]','') # Remove Punctuation\ndf['Job Title'] = df['Job Title'].str.replace('[0-9]+','') # Remove isolated digits","653e7b6b":"# UPDATE AND ANALYSE\ntext_rem = ['Quality',\n            ' Center on Immigration and Justice CIJ',\n            ' Insights Analytics Team Customer',\n            ' Merchant Health',\n           'FPA'] # Remove Irregular job title subtexts\nfor t in text_rem:\n    df['Job Title'] = df['Job Title'].str.replace(t,'')\n    \ndf['Job Title'].to_csv('mycsvfile.csv',index=False)","b8be599a":"# Restructure 'Salary Estimate'\ntest = df[\"Salary Estimate\"].str.split(\"-\", n = 1, expand = True) \ndf['Min Salary'] = test[0].str.replace('[^0-9^-]+','')\ndf['Max Salary'] = test[1].str.replace('[^0-9^-]+','')\ndf = df.drop('Salary Estimate',1)\ndf['Min Salary'] = pd.to_numeric(df['Min Salary'])\ndf['Max Salary'] = pd.to_numeric(df['Max Salary'])","703c0d1b":"df = df.replace(-1, np.nan) # Numerical Columns\ndf = df.replace('-1', np.nan) # String Columns","8d110427":"# Remove the (ratings?) from company name\ndf[\"Company Name\"] = df[\"Company Name\"].str.split(\"\\n\", n = 1, expand = True)[0]","16b5d2d0":"# Restructure Size\nnew_size = df['Size'].str.replace('1 to 50 employees','Start-up').replace('51 to 200 employees','Small').replace('201 to 500 employees','Medium').replace('501 to 1000 employees','Big').replace('1001 to 5000 employees','Very Big').replace('5001 to 10000 employees','Huge').replace('10000\\+ employees','Titanic')\ndf['Size'] = new_size","eec90019":"# Fix Revenue\nnew_rev = df['Revenue'].str.replace('Less than $1 million (USD)', '<$1M').replace('$1 to $5 million (USD)', '$1-5M').replace('$5 to $10 million (USD)', '$5-10M').replace('$10 to $25 million (USD)', '$10-25M' ).replace('$25 to $50 million (USD)', '$25-50M').replace('$50 to $100 million (USD)', '$50-100M').replace('$100 to $500 million (USD)', '$100-500M').replace('$500 million to $1 billion (USD)',  '$0.5-1B').replace('$1 to $2 billion (USD)',  '$1-2B').replace('$2 to $5 billion (USD)', '$2-5B').replace('$5 to $10 billion (USD)', '$5-10B').replace('$10+ billion (USD)',  '>$10B').replace('Unknown \/ Non-Applicable',  'NaN')\ndf['Revenue'] = new_rev","e2f1eb9e":"most_pos = df.groupby(by=['Company Name','Easy Apply'])['Job Title'].count().reset_index().sort_values(by=['Company Name'],ascending=False).rename(columns = {'Job Title': 'Positions'}, inplace = False)\nmost_pos_easy = most_pos[ most_pos['Easy Apply'] == '1' ].sort_values(by=['Positions'],ascending=False).head(7)\nmost_pos_no_easy = most_pos[ most_pos['Easy Apply'] == '0' ].sort_values(by=['Positions'],ascending=False).head(7)","ec5b4025":"# Most Open Roles\nfig = go.Figure(data=[\n    go.Bar(name='Easy Apply', \n           x = most_pos_easy['Company Name'], \n           y = most_pos_easy['Positions']\n          ),\n    go.Bar(name='No Easy Apply', \n           x = most_pos_no_easy['Company Name'],\n           y = most_pos_no_easy['Positions']\n          )\n])\n\nfig.update_layout(\n    template=\"plotly_dark\",\n    title_text = 'Open Positions, by Company',\n    barmode='group'\n)\n\nfig.show()","528cddd8":"avg_rating = df.groupby(by=['Sector','Easy Apply'])['Rating'].mean().reset_index().sort_values(by=['Sector','Easy Apply'],ascending=False)\navg_rating_easy = avg_rating[ avg_rating['Easy Apply'] == '1' ].sort_values(by=['Sector'],ascending=False)\navg_rating_no_easy = avg_rating[ avg_rating['Easy Apply'] == '0' ].sort_values(by=['Sector'],ascending=False)","ff10c74b":"# Most Open Roles\nfig = go.Figure(data=[\n    go.Bar(name='Easy Apply', \n           x = avg_rating_easy['Sector'], \n           y = avg_rating_easy['Rating']\n          ),\n    go.Bar(name='No Easy Apply', \n           x = avg_rating_no_easy['Sector'],\n           y = avg_rating_no_easy['Rating']\n          )\n])\n\nfig.update_layout(\n    template=\"plotly_dark\",\n    title_text = 'Sector Ratings, by Easy Apply',\n    barmode='group'\n)\n\nfig.show()","bf92d5da":"avg_min = df.groupby(by=['Industry'])['Min Salary'].mean().reset_index().sort_values(by=['Min Salary'],ascending=False)\navg_max = df.groupby(by=['Industry'])['Max Salary'].mean().reset_index().sort_values(by=['Max Salary'],ascending=False)\n\n# Most Open Roles\nfig = go.Figure(data=[\n    go.Bar(name='Max Salary', \n           x = avg_max['Industry'],\n           y = avg_max['Max Salary']\n          ),\n    go.Bar(name='Min Salary', \n           x = avg_min['Industry'], \n           y = avg_min['Min Salary']\n          ),\n])\n\nfig.update_layout(\n    template=\"plotly_dark\",\n    title_text = 'Avg Salary, by Industry',\n    barmode='group'\n)\n\nfig.show()","2c7b5ccf":"test = df.groupby(by=['Company Name','Competitors'])['Job Title'].count().reset_index()\ntest['Competitors'] = test['Competitors'].str.strip()\ntest = test.sort_values(by=['Company Name'],ascending=False)\ntest = test['Competitors'].str.split(\",\", expand = True) \ntest = test.values.tolist()\n\nflat_list = [item for sublist in test for item in sublist]\nflat_list = ['Not Listed' if x is np.nan else x for x in flat_list]\nflat_list = ['Not Listed' if x is None else x for x in flat_list]\nflat_list = [x.strip(' ') for x in flat_list]\nflat_list.sort()\n\nfrom itertools import groupby\ndata = [(key, len(list(group))) for key, group in groupby(flat_list)] or {key: len(list(group)) for key, group in groupby(flat_list)}\ncompetitors = pd.DataFrame.from_records(data).rename(columns = {0: 'Competitor',1:'Count'}, inplace = False).sort_values(by='Count', ascending=False).head(15)\ncompetitors = competitors.iloc[1:]","d1b99014":"# Most Competitors\nfig = go.Figure(data=[\n    go.Bar(name='Max Salary', \n           x = competitors['Competitor'],\n           y = competitors['Count']\n          )\n])\n\nfig.update_layout(\n    template=\"plotly_dark\",\n    title_text = 'Most Competitors',\n    barmode='group'\n)\n\nfig.show()","e06569dd":"df['Avg Salary'] = (df['Min Salary'] + df['Max Salary'])\/2\ndf['State'] = df['Location'].str[-2:]\nstate_salary = df.groupby(by=['State'])['Avg Salary'].mean().reset_index()\n\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=go.Choropleth(\n    locations=state_salary['State'],\n    z = state_salary['Avg Salary'].astype(float),\n    locationmode = 'USA-states',\n    colorbar_title = \"000's $\",\n    colorscale = 'Reds',\n    zmin=37,\n    zmax=89,\n))\n\nfig.update_layout(\n    template=\"plotly_dark\",\n    title_text = 'Average Salary, by State',\n    geo_scope='usa',\n)\n\nfig.show()","e9cc9a08":"text = ''.join([i for i in df['Job Description'] if not i.isdigit()]) # Remove Digits\ntest = []\nfor k in text.split(\"\\n\"):\n    test.append( re.sub(r\"[^a-zA-Z0-9]+\", ' ', k))","0ca10fca":"text = test\ntext = ''.join(text)\ntext = re.sub(r'==.*?==+', '', text)\n\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize \n  \nall_stopwords = stopwords.words('english')\nword_tokens = word_tokenize(text)\nfiltered_sentence = [w for w in word_tokens if not w in all_stopwords] ","ed508a3d":"def plot_cloud(wordcloud):\n    plt.figure(figsize=(20, 15))\n    plt.imshow(wordcloud) \n    plt.axis(\"off\");","133aec5b":"STOPWORDS.update(['play','will','within','one','use','working','provide','benefit','partner','internal','external',\n                     'high','protected','across','written','need','care','help','must','area','office','state','related',\n                     'people','member','may','well','using','etc','make','year','us','change','benefits','part','national',\n                 'access','time','applications','able','issue','task','practice','duties','candidate','maintain','day','field',\n                  'meet','ensure','decision','best','sexual','initiative','gender','world','relevant','race','preferred',\n                  'looking','re','document','ad','self','highly','include','veteran','key','source','request','full','result',\n                  'build','provides','technique','Governance','end','color','years','work','including'])\nwordcloud = WordCloud(\n    width = 1500,\n    height = 1000, \n    random_state=1, \n    background_color='salmon', \n    colormap='Pastel2', \n    collocations=False, \n    stopwords = STOPWORDS).generate(text)\n# Plot\nplot_cloud(wordcloud)","58f5b139":"!pip install vaderSentiment\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n\nanalyser = SentimentIntensityAnalyzer()\n\ndef sentiment_scores(sentence,full_list): \n    sid_obj = SentimentIntensityAnalyzer() \n    sentiment_dict = sid_obj.polarity_scores(sentence) \n      \n    t = [(sentiment_dict['neg']*100), (sentiment_dict['neu']*100), (sentiment_dict['pos']*100), (sentiment_dict['compound']*100)]\n    full_list.append(t)","85b08f29":"sentiments = []\nfor job in df['Job Description']:\n    job.replace('\\n','')\n    re.sub('\\d', '', job)\n    sentiment_scores(job,sentiments)\n    \nsentiment_df = pd.DataFrame(sentiments,columns=['negative','neutral','positive','compound'])\nsentiment_df = pd.concat([df, sentiment_df], axis=1)\nsentiment_df['Founded'] = sentiment_df['Founded'].fillna(0)","03b06bbd":"# Round to decade of year founded\nimport math\nyears = []\nfor year in sentiment_df['Founded']:\n    years.append( int(math.ceil( year \/ 10.0)) * 10 ) \nsentiment_df['Founded'] = years","4eae4a7e":"industry_sent = sentiment_df.groupby(by=['Industry'])['compound'].mean().reset_index().sort_values(by=['compound'],ascending=True).head(10)\ncompany_sent = sentiment_df.groupby(by=['Size'])['compound'].mean().reset_index().sort_values(by=['compound'],ascending=True).head(10)\nfounded_sent = sentiment_df.groupby(by=['Founded'])['compound'].mean().reset_index().sort_values(by=['compound'],ascending=True)\nfounded_sent = founded_sent.drop(0) # drop founded year of 0\nownership_sent = sentiment_df.groupby(by=['Type of ownership'])['compound'].mean().reset_index().sort_values(by=['compound'],ascending=True)\n\nfig = make_subplots(rows=2, \n                    cols=2,\n                    subplot_titles=(\"Score by Company Size\", 'Score by Founded Decade',\"Score by Industry (Lowest 10)\",'Score by Ownership Type'),\n                   )\n\nfig.add_trace(\n    go.Bar(name='Company', \n           x = company_sent['Size'],\n           y = company_sent['compound']\n          ),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Bar(name='Industry', \n           x = industry_sent['Industry'], \n           y = industry_sent['compound']\n          ),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Bar(name='Founded', \n           x = founded_sent['Founded'], \n           y = founded_sent['compound']\n          ),\n    row=1, col=2\n)\n\nfig.add_trace(\n    go.Bar(name='Ownership', \n           x = ownership_sent['Type of ownership'], \n           y = ownership_sent['compound']\n          ),\n    row=2, col=2\n)\n\nfig.update_yaxes(range=[92, 100], row=1, col=1,)\nfig.update_yaxes(range=[92, 100], row=1, col=2,)\nfig.update_yaxes(range=[62, 100], row=2, col=1,)\nfig.update_yaxes(range=[89, 100], row=2, col=2,)\n\nfig.update_layout(\n    template=\"plotly_dark\",\n    margin=dict(l=50, r=50, t=80, b=80),\n    title_text = 'Sentiment of Job Description (Compound Score)',\n    height=800,\n)\n\nfig.show()","3206b72a":"test = sentiment_df[ sentiment_df['compound'].astype(int) >=80 ]\ntest['compound'] = pd.cut(x = test['compound'],\n                        bins = range(80,101), \n                        labels =  range(80,100))\ntest = test.groupby(by=['compound'])['Rating'].mean().reset_index()\n\n# Most Open Roles\nfig = go.Figure(data=[\n    go.Bar(name='Rating by Sentiment', \n           x = test['compound'], \n           y = test['Rating']\n          ),\n])\n\nfig.update_layout(\n    template=\"plotly_dark\",\n    title_text = 'Company Ratings, by Compound Sentiment Score',\n    barmode='group'\n)\n\nfig.show()","394a7230":"# Word Map of Job Description\nAfter filtering out less descriptive words, we are left with a focus on Data, Experience, Analysis, Business, Skill, and Management","e6394d4f":"# Intro\nThank you for taking the time to view my notebook! Comments and advice are greatly appreciated :) <br>\n![graph](https:\/\/unsplash.com\/photos\/ZzOa5G8hSPI)\n\nThis is just a quick look at the data and can no doubt be improved upon. ","64bd5254":"# Average Salary by State\nIt appears the best salaries are in California, and the least paid are in Utah.\nSurprisngly fewer states than I had expected","1c0db259":"# Quick Sentiment Analysis of Job Description","9d6a9737":"It appears that fewer companies are using Easy Apply, and companies seem to make applications as either Easy Apply or not. No company appeared to use both.","1f0cc17c":"About half the sectors have positions with easy apply, and for the most part there appears to be little change in company rating (except Education & Finance)."}}