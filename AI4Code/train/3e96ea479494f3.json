{"cell_type":{"940f06df":"code","3e97dfe9":"code","f8aa45d7":"code","0620cdc3":"code","21bb6b8e":"code","114bd2cc":"code","93702cb6":"code","9c36b82d":"code","137f1ccc":"code","9f12744d":"code","40a59583":"code","57d63f33":"code","3e284860":"code","b45db5d2":"code","2133cd9d":"code","5a18cbc0":"code","cae9318a":"code","e705d910":"code","511ee51f":"code","a050a84b":"code","9317f97d":"code","716d57b1":"code","4a1a2a61":"code","a6bd10b7":"code","5eeb0dd4":"code","4dc204d9":"code","308729cf":"code","539fcf59":"code","3ed08126":"code","990ca732":"code","f768416e":"markdown","5adfb8a1":"markdown","3b8304b3":"markdown","eab3c51f":"markdown","a1e669c9":"markdown","9509d0e2":"markdown","7f822185":"markdown","8f7d5e7a":"markdown","053c28e9":"markdown","7012feb6":"markdown","5c24eb91":"markdown"},"source":{"940f06df":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Conv2D,MaxPool2D,Dropout,Dense,Flatten,Activation,BatchNormalization\nfrom keras.models import Sequential\nfrom keras.optimizers import Adam\nfrom keras.losses import categorical_crossentropy\nfrom sklearn.metrics import classification_report\nfrom IPython.display import FileLink","3e97dfe9":"from keras.backend import tensorflow_backend\ntensorflow_backend._get_available_gpus()","f8aa45d7":"train=pd.read_csv(r'..\/input\/Kannada-MNIST\/train.csv')\ntest=pd.read_csv(r'..\/input\/Kannada-MNIST\/test.csv')\nval=pd.read_csv(r'..\/input\/Kannada-MNIST\/Dig-MNIST.csv')","0620cdc3":"print('Train Set Shape:',train.shape)\nprint('Test Set Shape:',test.shape)\nprint('Validation Set Shape:',val.shape)","21bb6b8e":"data=train.iloc[:,1:].values\ndata=data.reshape(-1,28,28,1)\/255\nprint('Total training data shape:',data.shape)","114bd2cc":"labels=pd.get_dummies(train.iloc[:,0]).values","93702cb6":"x_val=val.iloc[:,1:].values\nx_val=x_val.reshape(-1,28,28,1)\/255","9c36b82d":"y_val=pd.get_dummies(val.iloc[:,0]).values","137f1ccc":"fig,ax=plt.subplots(5,10)\nfor i in range(5):\n    for j in range(10):\n        ax[i][j].imshow(data[np.random.randint(0,data.shape[0]),:,:,0],cmap=plt.cm.binary)\n        ax[i][j].axis('off')\nplt.subplots_adjust(wspace=0, hspace=0)        \nfig.set_figwidth(15)\nfig.set_figheight(7)\nfig.show()","9f12744d":"aug_data=ImageDataGenerator(\n        rotation_range=10,  \n        zoom_range = 0.10,  \n        width_shift_range=0.1, \n        height_shift_range=0.1)","40a59583":"fig,ax=plt.subplots(3,10)\nidx=np.random.randint(0,data.shape[0])\nfor i in range(3):\n    for j in range(10):\n        ax[i][j].axis('off')\n        X,y=aug_data.flow(data[idx].reshape(-1,28,28,1),labels[idx].reshape(1,10)).next()\n        ax[i][j].imshow(X.reshape(28,28),cmap=plt.cm.binary)\nfig.set_figheight(5)\nfig.set_figwidth(15)\nfig.show()","57d63f33":"generator=aug_data.flow(data,labels,batch_size=64)","3e284860":"def create_model():\n    model=Sequential()\n\n    model.add(Conv2D(64,(3,3),input_shape=(28,28,1),activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(64,(3,3),activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(64,(5,5),strides=(2,2),padding='same',activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.4))\n\n    model.add(Conv2D(128,(3,3),activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(128,(3,3),activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Conv2D(128,(5,5),strides=(2,2),padding='same',activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Dropout(0.4))\n\n    model.add(Conv2D(256,(3,3),activation='relu'))\n    model.add(BatchNormalization())\n    model.add(Flatten())\n    model.add(Dense(1024,activation='relu'))\n\n    model.add(Dropout(0.4))\n    model.add(Dense(10,activation='softmax'))\n    \n    model.compile(optimizer='adam',loss=categorical_crossentropy,metrics=['accuracy'])\n    \n    return model","b45db5d2":"model=create_model()","2133cd9d":"history=model.fit_generator(generator,epochs=50,validation_data=(x_val,y_val),steps_per_epoch=data.shape[0]\/\/64,shuffle=True)","5a18cbc0":"fig,(acc,loss)=plt.subplots(2,1)\n\n\nacc.set_title('Accuracy vs Epochs')\nacc.plot(np.arange(1,len(history.history['accuracy'])+1),history.history['accuracy'],label='Training Accuracy')\nacc.plot(np.arange(1,len(history.history['val_accuracy'])+1),history.history['val_accuracy'],label='Validation Accuracy')\nacc.set_xlabel('Epochs')\nacc.set_ylabel('Accuracy')\nacc.set_xticks(np.arange(1,len(history.history['accuracy'])+1))\nacc.legend(loc='best')\n\nloss.set_title('Loss vs Epochs')\nloss.plot(np.arange(1,len(history.history['loss'])+1),history.history['loss'],label='Training loss')\nloss.plot(np.arange(1,len(history.history['val_loss'])+1),history.history['val_loss'],label='Validation loss')\nloss.set_xlabel('Epochs')\nloss.set_ylabel('Loss')\nloss.set_xticks(np.arange(1,len(history.history['loss'])+1))\nloss.legend(loc='best')\n\nfig.set_figheight(20)\nfig.set_figwidth(20)\nfig.show()","cae9318a":"data=np.concatenate((data,x_val))\nlabels=np.concatenate((labels,y_val))","e705d910":"print('Data shape:',data.shape)","511ee51f":"generator=aug_data.flow(data,labels,batch_size=64)","a050a84b":"model=create_model()","9317f97d":"history=model.fit_generator(generator,epochs=50,validation_data=(x_val,y_val),steps_per_epoch=data.shape[0]\/\/64,shuffle=True)","716d57b1":"fig,(acc,loss)=plt.subplots(2,1)\n\n\nacc.set_title('Accuracy vs Epochs')\nacc.plot(np.arange(1,len(history.history['accuracy'])+1),history.history['accuracy'],label='Total Accuracy')\nacc.plot(np.arange(1,len(history.history['val_accuracy'])+1),history.history['val_accuracy'],label='Validation Accuracy')\nacc.set_xlabel('Epochs')\nacc.set_ylabel('Accuracy')\nacc.set_xticks(np.arange(1,len(history.history['accuracy'])+1))\nacc.legend(loc='best')\n\nloss.set_title('Loss vs Epochs')\nloss.plot(np.arange(1,len(history.history['loss'])+1),history.history['loss'],label='Total loss')\nloss.plot(np.arange(1,len(history.history['val_loss'])+1),history.history['val_loss'],label='Validation loss')\nloss.set_xlabel('Epochs')\nloss.set_ylabel('Loss')\nloss.set_xticks(np.arange(1,len(history.history['loss'])+1))\nloss.legend(loc='best')\n\nfig.set_figheight(20)\nfig.set_figwidth(20)\nfig.show()","4a1a2a61":"print(classification_report(np.argmax(y_val,1),np.argmax(model.predict(x_val),1)))","a6bd10b7":"test_id=test['id'].values","5eeb0dd4":"test.drop('id',axis=1,inplace=True)","4dc204d9":"x_test=test.values.reshape(-1,28,28,1)\/255","308729cf":"pred=np.argmax(model.predict(x=x_test),1)","539fcf59":"def submit(test_id,pred):\n    df=np.concatenate((test_id.reshape(-1,1),pred.reshape(-1,1)),axis=1)\n    df=pd.DataFrame(df,columns=['id','label'])\n    df['id']=df['id'].astype('int32')\n    df.to_csv('Submission.csv',index=False)","3ed08126":"submit(test_id,pred)","990ca732":"FileLink('Submission.csv')","f768416e":"# Model Performance","5adfb8a1":"# Fitting model on Training data","3b8304b3":"# Data Visualization:","eab3c51f":"# Visualizing Performance of the model:","a1e669c9":"# Model Creation","9509d0e2":"# Creating Submission file","7f822185":"## Example:","8f7d5e7a":"# Data Acquisition","053c28e9":"# Generating predictions for Test set","7012feb6":"# Data Augmentation:","5c24eb91":"# Fitting Model on Training+Validation data"}}