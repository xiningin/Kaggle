{"cell_type":{"c14295a5":"code","d6fdb641":"code","25c5e44d":"code","b27f94a0":"code","9149bb43":"code","eb1a746f":"code","08e57b52":"code","ca670542":"code","d43f5cc7":"code","c87ca8af":"code","34c28cde":"code","a62a6394":"code","a2f2d330":"code","7d63fff4":"code","c27bf55e":"code","1c260cc2":"code","c7322af1":"code","b2a6b5a9":"code","be7b4760":"code","cbbb8626":"code","6da7dffe":"code","62903511":"code","3c135d5f":"code","de597402":"code","eb773c2b":"code","1e489f3c":"code","acabc658":"code","67835f98":"code","017d2767":"code","ead4f32c":"code","396848ed":"code","a440ad6f":"code","3d6cce36":"code","1cdfa216":"code","b884764c":"code","cf443e0f":"code","400250fb":"code","4ee00b84":"code","bb51bdb2":"code","1853e1b4":"code","21e9fa0e":"code","45976391":"code","4691e55c":"code","1d9997c2":"code","5a5689af":"code","196cc332":"code","3280437b":"code","7364bd5d":"code","91945f94":"code","414cc7a1":"code","4863323e":"code","08d83422":"code","33391f90":"code","049d5b0e":"code","7a4a22e9":"code","6389be79":"code","a9111c0e":"code","d3e52955":"code","3a76f6c0":"code","adac4b1c":"code","2154b318":"code","6d9cc245":"code","f1920648":"code","c52163b6":"code","87253fb0":"code","f61f1421":"code","fbc92948":"markdown","b4d46be9":"markdown","594e0c8c":"markdown","238a94ab":"markdown","faaac87e":"markdown","b5ff855a":"markdown","87756f3e":"markdown","9f91d5b6":"markdown","8bed99ad":"markdown","4e9ba433":"markdown","574e2ec2":"markdown"},"source":{"c14295a5":"import numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import stats\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings('ignore')","d6fdb641":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","25c5e44d":"train.head()","b27f94a0":"train.shape","9149bb43":"train.info(verbose=True,null_counts=True)","eb1a746f":"plt.subplots(figsize=(12,9))\nsns.distplot(train['SalePrice'], fit=stats.norm)\n\n(mu, sigma) = stats.norm.fit(train['SalePrice'])\n\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')\nplt.ylabel('Frequency')\n\nfig = plt.figure()\nstats.probplot(train['SalePrice'], plot=plt)","08e57b52":"#we use log function which is in numpy\ntrain['SalePrice'] = np.log1p(train['SalePrice'])\n\n#Check again for more normal distribution\n\nplt.subplots(figsize=(12,9))\nsns.distplot(train['SalePrice'], fit=stats.norm)\n\n# Get the fitted parameters used by the function\n\n(mu, sigma) = stats.norm.fit(train['SalePrice'])\n\n# plot with the distribution\n\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)], loc='best')\nplt.ylabel('Frequency')\n\n#Probablity plot\n\nfig = plt.figure()\nstats.probplot(train['SalePrice'], plot=plt)\nplt.show()","ca670542":"train.columns[train.isnull().any()]","d43f5cc7":"plt.figure(figsize=(12, 6))\nsns.heatmap(train.isnull())","c87ca8af":"#missing value counts in each of these columns\nIsnull = train.isnull().sum()\/len(train)*100\nIsnull = Isnull[Isnull>0]\nIsnull.sort_values(inplace=True, ascending=False)\nIsnull","34c28cde":"#Convert to dataframe\nIsnull = Isnull.to_frame()\nIsnull","a62a6394":"Isnull.columns = ['count']\nIsnull['Name'] = Isnull.index","a2f2d330":"#plot Missing values\nplt.figure(figsize=(13, 5))\nsns.set(style='whitegrid')\nsns.barplot(x='Name', y='count', data=Isnull)\nplt.xticks(rotation = 90)","7d63fff4":"train_corr = train.select_dtypes(include=[np.number])","c27bf55e":"#Delete Id because that is not need for corralation plot\ndel train_corr['Id']","1c260cc2":"#Coralation plot\ncorr = train_corr.corr()\nplt.subplots(figsize=(20,9))\nsns.heatmap(corr, annot=True)","c7322af1":"top_feature = corr.index[abs(corr['SalePrice']>0.5)]\nplt.subplots(figsize=(12, 8))\ntop_corr = train[top_feature].corr()\nsns.heatmap(top_corr, annot=True)\nplt.show()","b2a6b5a9":"train.OverallQual.unique()","be7b4760":"sns.barplot(train.OverallQual, train.SalePrice)","cbbb8626":"plt.figure(figsize=(18, 8))\nsns.boxplot(x=train.OverallQual, y=train.SalePrice)","6da7dffe":"col = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt']\nsns.set(style='ticks')\nsns.pairplot(train[col], size=3, kind='reg')","62903511":"print(\"Find most important features relative to target\")\ncorr = train.corr()\ncorr.sort_values(['SalePrice'], ascending=False, inplace=True)\ncorr.SalePrice","3c135d5f":"# PoolQC has missing value ratio is 99%+. So, there is fill by None\ntrain['PoolQC'] = train['PoolQC'].fillna('None')","de597402":"#Arround 50% missing values attributes have been fill by None\ntrain['MiscFeature'] = train['MiscFeature'].fillna('None')\ntrain['Alley'] = train['Alley'].fillna('None')\ntrain['Fence'] = train['Fence'].fillna('None')\ntrain['FireplaceQu'] = train['FireplaceQu'].fillna('None')","eb773c2b":"#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\ntrain['LotFrontage'] = train.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","1e489f3c":"#GarageType, GarageFinish, GarageQual and GarageCond these are replacing with None\nfor col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n    train[col] = train[col].fillna('None')","acabc658":"#GarageYrBlt, GarageArea and GarageCars these are replacing with zero\nfor col in ['GarageYrBlt', 'GarageArea', 'GarageCars']:\n    train[col] = train[col].fillna(int(0))","67835f98":"#GarageType, GarageFinish, GarageQual and GarageCond these are replacing with None\nfor col in ('BsmtFinType2', 'BsmtExposure', 'BsmtFinType1', 'BsmtCond', 'BsmtQual'):\n    train[col] = train[col].fillna('None')","017d2767":"#MasVnrArea : replace with zero\ntrain['MasVnrArea'] = train['MasVnrArea'].fillna(int(0))","ead4f32c":"#MasVnrType : replace with None\ntrain['MasVnrType'] = train['MasVnrType'].fillna('None')","396848ed":"#There is put mode value \ntrain['Electrical'] = train['Electrical'].fillna(train['Electrical']).mode()[0]","a440ad6f":"#There is no need of Utilities\ntrain = train.drop(['Utilities'], axis=1)","3d6cce36":"#Checking there is any null value or not\nplt.figure(figsize=(10, 5))\nsns.heatmap(train.isnull())","1cdfa216":"cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold', 'MSZoning', 'LandContour', 'LotConfig', 'Neighborhood',\n        'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n        'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'Foundation', 'GarageType', 'MiscFeature', \n        'SaleType', 'SaleCondition', 'Electrical', 'Heating')","b884764c":"from sklearn.preprocessing import LabelEncoder\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(train[c].values)) \n    train[c] = lbl.transform(list(train[c].values))","cf443e0f":"#Take targate variable into y\ny = train['SalePrice']","400250fb":"#Delete the saleprice\ndel train['SalePrice']","4ee00b84":"#Take their values in X and y\nX = train.values\ny = y.values","bb51bdb2":"# Split data into train and test formate\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=7)","1853e1b4":"#Train the model\nfrom sklearn import linear_model\nmodel = linear_model.LinearRegression()","21e9fa0e":"#Fit the model\nmodel.fit(X_train, y_train)","45976391":"#Prediction\nprint(\"Predict value \" + str(model.predict([X_test[142]])))\nprint(\"Real value \" + str(y_test[142]))","4691e55c":"#Score\/Accuracy\nprint(\"Accuracy --> \", model.score(X_test, y_test)*100)","1d9997c2":"#Train the model\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor(n_estimators=1000)","5a5689af":"model.fit(X_train, y_train)","196cc332":"#Score\/Accuracy\nprint(\"Accuracy --> \", model.score(X_test, y_test)*100)","3280437b":"#Train the model\nfrom sklearn.ensemble import GradientBoostingRegressor\nGBR = GradientBoostingRegressor(n_estimators=100, max_depth=4)","7364bd5d":"GBR.fit(X_train, y_train)","91945f94":"print(\"Accuracy --> \", GBR.score(X_test, y_test)*100)","414cc7a1":"test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ntest.head()","4863323e":"test.columns[test.isnull().any()]","08d83422":"# PoolQC has missing value ratio is 99%+. So, there is fill by None\ntest['PoolQC'] = test['PoolQC'].fillna('None')","33391f90":"#Arround 50% missing values attributes have been fill by None\ntest['MiscFeature'] = test['MiscFeature'].fillna('None')\ntest['Alley'] = test['Alley'].fillna('None')\ntest['Fence'] = test['Fence'].fillna('None')\ntest['FireplaceQu'] = test['FireplaceQu'].fillna('None')","049d5b0e":"#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\ntest['LotFrontage'] = test.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median()))","7a4a22e9":"#GarageType, GarageFinish, GarageQual and GarageCond these are replacing with None\nfor col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageCond']:\n    test[col] = test[col].fillna('None')","6389be79":"#GarageYrBlt, GarageArea and GarageCars these are replacing with zero\nfor col in ['GarageYrBlt', 'GarageArea', 'GarageCars']:\n    test[col] = test[col].fillna(int(0))","a9111c0e":"for col in ('BsmtFinType2', 'BsmtExposure', 'BsmtFinType1', 'BsmtCond', 'BsmtQual'):\n    test[col] = test[col].fillna('None')","d3e52955":"#MasVnrArea : replace with zero\ntest['MasVnrArea'] = test['MasVnrArea'].fillna(int(0))","3a76f6c0":"#MasVnrType : replace with None\ntest['MasVnrType'] = test['MasVnrType'].fillna('None')","adac4b1c":"#There is put mode value \ntest['Electrical'] = test['Electrical'].fillna(test['Electrical']).mode()[0]","2154b318":"#There is no need of Utilities\ntest = test.drop(['Utilities'], axis=1)","6d9cc245":"plt.figure(figsize=(10, 5))\nsns.heatmap(test.isnull())","f1920648":"cols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold', 'MSZoning', 'LandContour', 'LotConfig', 'Neighborhood',\n        'Condition1', 'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n        'Exterior2nd', 'MasVnrType', 'MasVnrArea', 'Foundation', 'GarageType', 'MiscFeature', \n        'SaleType', 'SaleCondition', 'Electrical', 'Heating')","c52163b6":"from sklearn.preprocessing import LabelEncoder\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(test[c].values)) \n    test[c] = lbl.transform(list(test[c].values))","87253fb0":"fin_predictions = GBR.predict(test)\nfin_predictions","f61f1421":"output = pd.DataFrame({'Id':test['Id'],'SalePrice':fin_predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","fbc92948":"### Corralation between train attributes\nSeparate variable into new dataframe from original dataframe which has only numerical values\nthere is 38 numerical attribute from 81 attributes","b4d46be9":"### Imputting missing values","594e0c8c":"## Load data","238a94ab":"Now, there is no any missing values","faaac87e":"### Prediction","b5ff855a":"## Missing value check","87756f3e":"## Load libraries","9f91d5b6":"### Submission","8bed99ad":"#### Find Top 50% corralation trian attributes with sale price","4e9ba433":"![image.png](attachment:image.png)","574e2ec2":"Here OverallQual is highly correlated with target feature of saleprice by 82%"}}