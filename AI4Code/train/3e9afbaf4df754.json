{"cell_type":{"3dc3bc53":"code","be7c59a4":"code","6b7cdc1e":"code","e5d8878e":"code","78588294":"code","0f3d5d6e":"code","f55a84f4":"code","10718303":"code","3782b675":"code","7cdaad3a":"code","102ba433":"code","14da7ad4":"code","58405fa2":"code","7305af19":"code","a9792602":"code","e8fdd398":"code","a5a129b2":"code","da930d10":"code","b3dc1e89":"code","febff935":"code","a9fc20a2":"code","486a93b7":"code","b0b7ba96":"code","19fa4530":"markdown","d8ad3ef1":"markdown","0b8ce0b7":"markdown","2a837880":"markdown","6b3ad9c2":"markdown","e6c82b60":"markdown","4f186314":"markdown","656e08c8":"markdown","5572c482":"markdown","be74e4c3":"markdown","5a8dfa43":"markdown"},"source":{"3dc3bc53":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","be7c59a4":"# Load the full dataset\nX = pd.read_csv('\/kaggle\/input\/passenger-list-for-the-estonia-ferry-disaster\/estonia-passenger-list.csv')","6b7cdc1e":"print(X.head())","e5d8878e":"Y=X['Survived'].values.tolist()","78588294":"#Coding category P as 0 and C as 1\nfor i in range(len(X)):\n    if(X['Category'][i]=='P'):\n        X['Category'][i]=0;\n    else:\n        X['Category'][i]=1;\n\nprint(X.head())","0f3d5d6e":"print(X['Country'].unique())","f55a84f4":"print(X.groupby(['Survived','Country']).size())","10718303":"#Coding Country as numbers\n#Coding category P as 0 and C as 1\nfor i in range(len(X)):\n    if(X['Country'][i]=='Sweden'):\n        X['Country'][i]=0;\n    elif(X['Country'][i]=='Estonia'):\n        X['Country'][i]=1;\n    elif(X['Country'][i]=='Latvia'):\n        X['Country'][i]=2;\n    elif(X['Country'][i]=='Finland'):\n        X['Country'][i]=3;\n    elif(X['Country'][i]=='Russia'):\n        X['Country'][i]=4;\n    else:\n        X['Country'][i]=5;\n\nprint(X.head())","3782b675":"#Coding Country as numbers\n#Coding Sex as 0 for Male and 1 for Female\nfor i in range(len(X)):\n    if(X['Sex'][i]=='M'):\n        X['Sex'][i]=0;\n    elif(X['Sex'][i]=='F'):\n        X['Sex'][i]=1;\n\nprint(X.head())","7cdaad3a":"X=X.drop(columns=['PassengerId','Firstname','Lastname','Survived'])\nprint(X.head())","102ba433":"X_all=X.values.tolist()","14da7ad4":"print(X_all)","58405fa2":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_all, Y, test_size=0.3, random_state=42)\n","7305af19":"model=RandomForestClassifier(random_state=42)\nmodel.fit(X_train,y_train)","a9792602":"y_pred=model.predict(X_test)\nprint(accuracy_score(y_pred,y_test))","e8fdd398":"#tuning no. of estimators\n\nn_estimators_list=[1,2,4,8,16,32,64,128,256,512]\n\nfor n_estimators in n_estimators_list:\n    model=RandomForestClassifier(n_estimators=n_estimators, random_state=42)\n    model.fit(X_train,y_train)\n\n    y_pred=model.predict(X_test)\n    print(accuracy_score(y_pred,y_test))","a5a129b2":"#tuning no. of estimators\n\nmin_samples_split_list=[0.01,0.1,0.5,1.0,2,4,8,16,32]\n\nfor min_samples_split in min_samples_split_list:\n    model=RandomForestClassifier(n_estimators=128, min_samples_split=min_samples_split, random_state=42)\n    model.fit(X_train,y_train)\n\n    y_pred=model.predict(X_test)\n    print(accuracy_score(y_pred,y_test))","da930d10":"print(model.feature_importances_)","b3dc1e89":"from sklearn.ensemble import VotingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score\n\nclf1=RandomForestClassifier(n_estimators=128, max_depth=100, random_state=42)\nclf2=MultinomialNB()\nclf3=LogisticRegression(random_state=42)\n\nensemble =VotingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)],voting='hard')\nensemble.fit(X_train,y_train)\n# make a prediction for one example\ny_pred=ensemble.predict(X_test)\nfrom sklearn.metrics import accuracy_score\nprint(\"Accuracy score: \", accuracy_score(y_pred,y_test))","febff935":"from sklearn.ensemble import StackingClassifier   \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score\nclf1=RandomForestClassifier(n_estimators=200, max_depth=100, random_state=42)\nclf2=MultinomialNB()\nclf3=LogisticRegression(random_state=42)\n\nsclf = StackingClassifier(estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)])\nsclf.fit(X_train,y_train)\n\ny_pred = sclf.predict(X_test)\n\nscore = accuracy_score(y_test, y_pred)\nprint(\"Accuracy score: \", accuracy_score(y_pred,y_test))","a9fc20a2":"model2=LogisticRegression()\nmodel2.fit(X_train,y_train)\n\ny_pred=model2.predict(X_test)\nprint(accuracy_score(y_pred,y_test))","486a93b7":"from xgboost import XGBClassifier\nimport numpy as np\nmodel3=XGBClassifier()\n\nX_train_n=np.asarray(X_train)\nX_test_n=np.asarray(X_test)\n\nmodel3.fit(X_train_n,y_train)\ny_pred=model3.predict(X_test_n)\npredictions = [round(value) for value in y_pred]\nprint(accuracy_score(predictions,y_test))","b0b7ba96":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_all, Y, test_size=0.3, random_state=42)\nmodel=RandomForestClassifier(random_state=42)\nmodel.fit(X_train,y_train)\ny_pred=model.predict(X_test)\nprint(\"ValidationAccuracy: \", accuracy_score(y_pred,y_test))","19fa4530":"No. of survived with respect to country","d8ad3ef1":"Using XgBoost","0b8ce0b7":"StackingClassifier is checked to calculate accuracy","2a837880":"Testing RandomForestClassifier","6b3ad9c2":"Preprocessing completed, now will we will train and test classifiers","e6c82b60":"Validation Accuracy is 0.8619 using Random Forest. Much work needs to be done on data to check whether any improvement occurs or not.","4f186314":"Now let us use Voting Classifier","656e08c8":"Using LogisticRegression","5572c482":"final model: RandomForestClassifier","be74e4c3":"Let us try to optimize the performance","5a8dfa43":"min_samples_split=2\nn_estimators=128\n\noptimized versions\n\nValidation Accuracy = 0.8619"}}