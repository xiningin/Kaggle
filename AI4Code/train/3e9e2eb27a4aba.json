{"cell_type":{"f8efafe5":"code","8dfaf859":"code","d4a60711":"code","d1d5e75e":"code","b99ee2c7":"code","d431bc8f":"code","76695d24":"code","eac74c9d":"code","c5a8df44":"code","c2d413cd":"code","51e97ccf":"code","c172b7d1":"code","bde0eb62":"code","829aa54a":"code","f667efbf":"code","2a2cb948":"code","abc3ca7b":"code","03e78a9b":"markdown","76c9701b":"markdown","70fbe13c":"markdown","e407eb6e":"markdown","506dbbdb":"markdown","860dfb69":"markdown","9354246a":"markdown","ef7c0215":"markdown"},"source":{"f8efafe5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8dfaf859":"import seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd \nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nimport math\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier","d4a60711":"filepath= '\/kaggle\/input\/amazon-employee-access-challenge\/train.csv'\ntraindata= pd.read_csv(filepath)\n\nfilepath2= '\/kaggle\/input\/amazon-employee-access-challenge\/test.csv'\ntestdata= pd.read_csv(filepath2)\ntestdatacopy=testdata\ntraindata.head()","d1d5e75e":"##Thus we see that there are no null values\nsns.heatmap(traindata.isnull(),yticklabels=False,cbar=False,cmap='viridis')","b99ee2c7":"#Now we plot the number of people who were granted access \nsns.set_style('whitegrid')\nsns.countplot(x='ACTION',data=traindata,palette='RdBu_r')","d431bc8f":"y=traindata['ACTION']\nx=traindata.drop('ACTION',axis=1)\n#Splitting training and testing data\nx_train, x_test, y_train, y_test = train_test_split(x, y, train_size=0.70,test_size=0.30, random_state=0)","76695d24":"#Logistic Regression\nLogisticRegressor = LogisticRegression(max_iter=10000)\nLogisticRegressor.fit(x_train, y_train)\ny_predicted = LogisticRegressor.predict(x_test)\nmse = mean_squared_error(y_test, y_predicted)\nr = r2_score(y_test, y_predicted)\nmae = mean_absolute_error(y_test,y_predicted)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)\nprint('f1 score:')\nprint(f1_score(y_test,y_predicted))\nprint('accuracy score:')\nprint(accuracy_score(y_test,y_predicted))\n","eac74c9d":"# Random Forest\nrf = RandomForestClassifier()\nrf.fit(x_train,y_train);\ny_predicted_r = rf.predict(x_test)\nmse = mean_squared_error(y_test, y_predicted_r)\nr = r2_score(y_test, y_predicted_r)\nmae = mean_absolute_error(y_test,y_predicted_r)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)\nprint('f1 score:')\nprint(f1_score(y_test,y_predicted_r))\nprint('accuracy score:')\nprint(accuracy_score(y_test,y_predicted_r))\n","c5a8df44":"# Decision Tree - CART\nregressor = DecisionTreeRegressor(random_state = 0)\nregressor.fit(x_train, y_train)\ny_predicted_d = regressor.predict(x_test)\nmse = mean_squared_error(y_test, y_predicted_d)\nr = r2_score(y_test, y_predicted_d)\nmae = mean_absolute_error(y_test,y_predicted_d)\nprint(\"Mean Squared Error:\",mse)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",mae)\nprint('f1 score:')\nprint(f1_score(y_test,y_predicted_d))\nprint('accuracy score:')\nprint(accuracy_score(y_test,y_predicted_d))\n","c2d413cd":"#XGBClassifier\nxgboost = XGBClassifier(n_estimators=1000)\nxgboost.fit(x_train,y_train)\nxg_pred = xgboost.predict(x_test)\nmsee21 = mean_squared_error(y_test, xg_pred)\nra21 = r2_score(y_test, xg_pred)\nmaee21 = mean_absolute_error(y_test,xg_pred)\nprint(\"Mean Squared Error:\",msee21)\nprint(\"R score:\",ra21)\nprint(\"Mean Absolute Error:\",maee21)\nprint('f1 score:')\nprint(f1_score(y_test,xg_pred))\nprint('accuracy score:')\nprint(accuracy_score(y_test,xg_pred))","51e97ccf":"#SVM\n\nsvclassifier = SVC(kernel='linear')\nsvclassifier.fit(x_train, y_train)\ny_pred2 = svclassifier.predict(x_test)\n\nmseew = mean_squared_error(y_test, y_pred2)\nra = r2_score(y_test, y_pred2)\nmaeew = mean_absolute_error(y_test,y_pred2)\nprint(\"Mean Squared Error:\",mseew)\nprint(\"R score:\",ra)\nprint(\"Mean Absolute Error:\",maeew)\n\nprint('f1 score:')\nprint(f1_score(y_test,y_pred2))\nprint('accuracy score:')\nprint(accuracy_score(y_test,y_pred2))","c172b7d1":"#Naive Bayes\n\ngnb = GaussianNB()\ny_preed = gnb.fit(x_train, y_train).predict(x_test)\n\nms = mean_squared_error(y_test, y_preed)\nrae = r2_score(y_test, y_preed)\nmew = mean_absolute_error(y_test,y_preed)\nprint(\"Mean Squared Error:\",ms)\nprint(\"R score:\",rae)\nprint(\"Mean Absolute Error:\",mew)\n\nprint('f1 score:')\nprint(f1_score(y_test,y_preed))\nprint('accuracy score:')\nprint(accuracy_score(y_test,y_preed))","bde0eb62":"#KNN\nmath.sqrt(len(y_test))\n#Therefore n neighbors=99\n","829aa54a":"#KNN\nclassify= KNeighborsClassifier (n_neighbors=99, p =2, metric= 'euclidean')\nclassify.fit(x_train,y_train)\nypred1=classify.predict(x_test)\n\nmsee = mean_squared_error(y_test, ypred1)\nr = r2_score(y_test, y_predicted_d)\nmaee = mean_absolute_error(y_test,ypred1)\nprint(\"Mean Squared Error:\",msee)\nprint(\"R score:\",r)\nprint(\"Mean Absolute Error:\",maee)\n\nprint('f1 score:')\nprint(f1_score(y_test,ypred1))\nprint('accuracy score:')\nprint(accuracy_score(y_test,ypred1))","f667efbf":"testdata=testdata.drop('id',axis=1)","2a2cb948":"# Random Forest\nrf = RandomForestClassifier()\nrf.fit(x,y)\nPrediction = rf.predict(testdata)\n","abc3ca7b":"predictionlist=Prediction.tolist()\nPassengerid=testdatacopy['id'].tolist() \noutput=pd.DataFrame(list(zip(Passengerid, predictionlist)),\n              columns=['id','Action'])\noutput.head()\noutput.to_csv('my_submission(AmazonEmployeeAccess).csv', index=False)  ","03e78a9b":"Visualize the data and check for any null values","76c9701b":"****Thus, we can use the Random Forest model as it gives the highest accuracy","70fbe13c":"Now we will run a few machine learning techiniques to see which one is the most applicable","e407eb6e":"Define the dependant and independant variables and divide them into training and testing data","506dbbdb":"**Finally, we convert the predictions to a csv file for submission.**","860dfb69":"Read the given datasets","9354246a":"Import the required libraries","ef7c0215":"Visualize to compare the number of people who were granted access to the number of people who weren't"}}