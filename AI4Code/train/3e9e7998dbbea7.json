{"cell_type":{"e09fcf17":"code","e5d26e78":"code","f2a9cc5a":"code","68c829fa":"code","44dcddc0":"code","18a04b58":"code","a509783f":"code","7c070e05":"code","95b5e97b":"code","c2e6f7b0":"code","0b374092":"code","b54c7d60":"code","b97060af":"code","7848f6ea":"code","8c19105a":"code","a1c40758":"code","77d0cca4":"code","094292f8":"code","086de890":"code","9fcf53dd":"code","f2a5dc65":"code","bf62286e":"markdown","48d84d9a":"markdown","b6955ab4":"markdown","6b92146f":"markdown"},"source":{"e09fcf17":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e5d26e78":"#Import required packages\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\n%matplotlib inline","f2a9cc5a":"#import data\ndf = pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')","68c829fa":"#Over view of dataset and number of observation and features\nprint('-->First 5 observations:\\n\\n',df.head(),'\\n')\nprint('----------------------------------------------\\n')\nprint('-->There are',df.shape[0],'no. of observation and',df.shape[1],'no.of features in our dataset \\n')    ","44dcddc0":"#Look for missing valus\ndf.isna().sum()","18a04b58":"#Overview of data types\ndf.info()","a509783f":"df.describe()","7c070e05":"#Plot correlation to find see relation between variables\nplt.figure(figsize=(10,10))\nsns.heatmap(df.corr(),annot=True)","95b5e97b":"sns.pairplot(df)","c2e6f7b0":"#Scaling and Splitting dataset\nX_val = df[['age','sex','cp','trtbps','chol','fbs','restecg','thalachh','exng','oldpeak','slp','caa','thall']]\ny = df['output']","0b374092":"scaler = StandardScaler()","b54c7d60":"X = scaler.fit_transform(X_val)","b97060af":"#Train Test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state= 42)","7848f6ea":"logmodel = LogisticRegression()\n\nlogmodel.fit(X_train,y_train)\n\nlogpred = logmodel.predict(X_test)\n\nprint(classification_report(y_test,logpred),'\\n')\nprint(confusion_matrix(y_test,logpred),'\\n')","8c19105a":"rfc = RandomForestClassifier()\n\nrfc_model = rfc.fit(X_train,y_train)\n\nrfc_pred = rfc_model.predict(X_test)\n\nprint(classification_report(y_test,rfc_pred),'\\n')\nprint(confusion_matrix(y_test,rfc_pred),'\\n')","a1c40758":"error_rate = []\n\nfor i in range(1,15):\n    \n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    pred_i = knn.predict(X_test)\n    error_rate.append(np.mean(pred_i!=y_test))\n    ","77d0cca4":"plt.figure(figsize=(10,6))\nplt.plot(range(1,15),error_rate,color='blue',linestyle='dashed',marker = 'o')","094292f8":"knn = KNeighborsClassifier(n_neighbors= 6)\n\nknn = knn.fit(X_train,y_train)\n\nknn_pred = knn.predict(X_test)\n\nprint(classification_report(y_test,knn_pred),'\\n')\nprint(confusion_matrix(y_test,knn_pred),'\\n')","086de890":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import plot_confusion_matrix","9fcf53dd":"print('Accuracy score for LogisticRegression:',round(accuracy_score(y_test,logpred),2),'\\n')\nprint('Accuracy score for RandomForest Classification:',round(accuracy_score(y_test,rfc_pred),2),'\\n')\nprint('Accuracy score for KNN:',round(accuracy_score(y_test,knn_pred),2),'\\n')","f2a5dc65":"#plot confusion matrix for selected model\nplot_confusion_matrix(knn,X_test,y_test)","bf62286e":"Preparing data for modeling ","48d84d9a":"# **Using Logistic Regression**\n","b6955ab4":"# Using KNN Classifier","6b92146f":"# Using Random Forest Classifier"}}