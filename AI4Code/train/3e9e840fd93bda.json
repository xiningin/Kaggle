{"cell_type":{"74563212":"code","cc256640":"code","bbbeb1e5":"code","84e34dec":"code","556fecac":"code","0d3d07fc":"code","9fd4f902":"code","e4a6c73e":"code","fb053eeb":"code","4e410788":"code","0ed530f1":"code","5187e8c3":"code","0288b16c":"code","f304090c":"code","2e3a81b2":"code","9315d2a4":"code","4e8cd8ee":"code","23649910":"code","aed144e3":"code","996fc315":"code","fde8232d":"code","72def2fe":"code","fc2c0339":"code","97b23077":"markdown","5b64853e":"markdown","77a7c78a":"markdown","3f5c74e8":"markdown","6ef9ef81":"markdown","d69c5dfe":"markdown","4c7213c8":"markdown","4116a380":"markdown","c999976a":"markdown","11d4591d":"markdown","d6a9350c":"markdown","87c62b71":"markdown","ed5fb005":"markdown","1c263311":"markdown","ebadf345":"markdown","d152adaa":"markdown","33ed259b":"markdown","4169856b":"markdown","f796c49c":"markdown","02c4e2cb":"markdown","1e5d2202":"markdown","ce1cb2f0":"markdown","94824e92":"markdown","ca30a2e6":"markdown"},"source":{"74563212":"pip install lightautoml","cc256640":"# Standard python libraries\nimport os\nimport time\n\n# Installed libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import train_test_split\nimport torch\nimport matplotlib.pyplot as plt\nimport pickle\n\n# Imports from our package\nfrom lightautoml.automl.presets.tabular_presets import TabularAutoML, TabularUtilizedAutoML\nfrom lightautoml.dataset.roles import DatetimeRole\nfrom lightautoml.tasks import Task\nfrom lightautoml.report.report_deco import ReportDeco\n\n#Import h2o automl\nimport h2o\nfrom h2o.automl import H2OAutoML","bbbeb1e5":"N_THREADS = 4 # threads cnt for lgbm and linear models\nN_FOLDS = 3 # folds cnt for AutoML\nRANDOM_STATE = 42 # fixed random state for various reasons\nTEST_SIZE = 0.2 # Test size for metric check\nTIMEOUT = 300 # Time in seconds for automl run\nTARGET_NAME = 'TARGET' # Target column name","84e34dec":"np.random.seed(RANDOM_STATE)\ntorch.set_num_threads(N_THREADS)","556fecac":"%%time\n\ndata = pd.read_csv('..\/input\/lama-datasets\/sampled_app_train.csv')\ndata.head()","0d3d07fc":"%%time\n\ndata['BIRTH_DATE'] = (np.datetime64('2018-01-01') + data['DAYS_BIRTH'].astype(np.dtype('timedelta64[D]'))).astype(str)\ndata['EMP_DATE'] = (np.datetime64('2018-01-01') + np.clip(data['DAYS_EMPLOYED'], None, 0).astype(np.dtype('timedelta64[D]'))\n                    ).astype(str)\n\ndata['constant'] = 1\ndata['allnan'] = np.nan\n\ndata['report_dt'] = np.datetime64('2018-01-01')\n\ndata.drop(['DAYS_BIRTH', 'DAYS_EMPLOYED'], axis=1, inplace=True)","9fd4f902":"%%time\n\ntrain_data, test_data = train_test_split(data, \n                                         test_size=TEST_SIZE, \n                                         stratify=data[TARGET_NAME], \n                                         random_state=RANDOM_STATE)\nprint('Data splitted. Parts sizes: train_data = {}, test_data = {}'\n              .format(train_data.shape, test_data.shape))","e4a6c73e":"train_data.head()","fb053eeb":"%%time\n\ntask = Task('binary', )","4e410788":"%%time\n\nroles = {'target': TARGET_NAME,\n         DatetimeRole(base_date=True, seasonality=(), base_feats=False): 'report_dt',\n         }","0ed530f1":"%%time \nstart = time.time()\nautoml = TabularAutoML(task = task, \n                       timeout = TIMEOUT,\n                       cpu_limit = N_THREADS,\n                       general_params = {'nested_cv': False, 'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]},\n                       reader_params = {'cv': N_FOLDS, 'random_state': RANDOM_STATE},\n                       tuning_params = {'max_tuning_iter': 20, 'max_tuning_time': 30},\n                       verbose=0)\n\nRD = ReportDeco()\nautoml_rd = RD(automl)\n\noof_pred = automl_rd.fit_predict(train_data, roles = roles)\nprint('oof_pred:\\n{}\\nShape = {}'.format(oof_pred, oof_pred.shape))\ntime_automl = time.time() - start","5187e8c3":"automl.get_config(path='bb_config.yml')","0288b16c":"with open('automl.pickle', 'wb') as f:\n    pickle.dump(automl, f)","f304090c":"%%time\n\ntest_pred = automl_rd.predict(test_data)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred, test_pred.shape))\n\nprint('Check scores...')\nprint('OOF score: {}'.format(roc_auc_score(train_data[TARGET_NAME].values,\n                                           oof_pred.data[:, 0])))\ntest_automl = roc_auc_score(test_data[TARGET_NAME].values, test_pred.data[:, 0])\nprint('TEST score: {}'.format(test_automl))\n","2e3a81b2":"%%time \nstart = time.time()\nautoml = TabularAutoML(task = task, \n                       timeout = 20,\n                       cpu_limit = N_THREADS,\n                       general_params = {'nested_cv': False, 'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]},\n                       reader_params = {'cv': N_FOLDS, 'random_state': RANDOM_STATE},\n                       tuning_params = {'max_tuning_iter': 20, 'max_tuning_time': 30},\n                       verbose=0)\n\n\noof_pred = automl.fit_predict(train_data, roles = roles)\nprint('oof_pred:\\n{}\\nShape = {}'.format(oof_pred, oof_pred.shape))\ntime_automl_fast = time.time() - start","9315d2a4":"%%time\n\ntest_pred = automl.predict(test_data)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred, test_pred.shape))\n\nprint('Check scores...')\ntest_automl_fast = roc_auc_score(test_data[TARGET_NAME].values, test_pred.data[:, 0])\nprint('TEST score: {}'.format(test_automl_fast))","4e8cd8ee":"%%time\nstart = time.time()\nautoml = TabularUtilizedAutoML(task = task,\n                       timeout = TIMEOUT,\n                       general_params = {'nested_cv': False, 'use_algos': [['linear_l2', 'lgb', 'lgb_tuned']]},\n                       reader_params = {'cv': N_FOLDS, 'random_state': RANDOM_STATE},\n                       tuning_params = {'max_tuning_iter': 20, 'max_tuning_time': 30},\n                       verbose=0)\noof_pred = automl.fit_predict(train_data, roles = roles)\ntime_automl_utilized = time.time() - start","23649910":"%%time\n\ntest_pred = automl.predict(test_data)\nprint('Prediction for test data:\\n{}\\nShape = {}'.format(test_pred, test_pred.shape))\n\nprint('Check scores...')\nprint('OOF score: {}'.format(roc_auc_score(train_data[TARGET_NAME].values,\n                                           oof_pred.data[:, 0])))\ntest_automl_utilized = roc_auc_score(test_data[TARGET_NAME].values, test_pred.data[:, 0])\nprint('TEST score: {}'.format(test_automl_utilized))","aed144e3":"labels = ['fast', 'base', 'utilized']\ntimes = [time_automl_fast, time_automl, time_automl_utilized]\nscores = [test_automl_fast, test_automl, test_automl_utilized]\n\ndef plot_bar(labels, times, scores):\n    x = np.arange(len(labels))  # the label locations\n    width = 0.35  # the width of the bars\n\n    fig, ax = plt.subplots(figsize=[7, 5])\n    rects = ax.bar(x, scores, width, label='Score', hatch=\"\/\/\/\",edgecolor=\"#034569\", color='none')\n\n    ax2 = ax.twinx()  # instantiate a second axes that shares the same x-axis\n    color = '#FF8B00'\n    ax2.plot(x, times, color=color, label='Time', marker='o',)\n    ax2.set_ylabel('Time, seconds', color=color) \n    ax2.tick_params(axis='y', labelcolor=color)\n    ax2.grid(False)\n    ax2.set_ylim(np.min(times) * 0.8, np.max(times) * 1.1)\n\n    ax.set_ylabel('Score, ROC AUC')\n    ax.set_title('Score by available time')\n    ax.set_xticks(x)\n    ax.set_xticklabels(labels)\n    ax.set_ylim(np.min(scores) - 0.002, np.max(scores) + 0.002)\n    ax.grid(False)\n    ax.spines['top'].set_visible(False)\n    ax2.spines['top'].set_visible(False)\n\n    for rect in rects:\n        height = rect.get_height()\n        ax.annotate('{}'.format(np.round(height, 3)),\n                    xy=(rect.get_x() + rect.get_width() \/ 2, height),\n                    xytext=(0, 3),  # 3 points vertical offset\n                    textcoords=\"offset points\",\n                    ha='center', va='bottom')\n\n    plt.legend()\n    plt.tight_layout()\n    plt.show()\n    \nplot_bar(labels, times, scores)","996fc315":"h2o.init(nthreads=-1,     # number of threads when launching a new H2O server\n         max_mem_size=12  # in gigabytes\n        )","fde8232d":"start = time.time()\n\nX_y_train_h = h2o.H2OFrame(train_data)\ntypes = X_y_train_h.types\n\naml = H2OAutoML(max_runtime_secs=(300),  # 5 minutes\n                max_models=None,  # no limit\n                seed=RANDOM_STATE)\ncols = sorted(list(set(train_data.columns) - {TARGET_NAME}))\naml.train(x=cols,y=TARGET_NAME, training_frame=X_y_train_h)\n\ntime_h2o = time.time() - start","72def2fe":"h2o_predict = aml.predict(h2o.H2OFrame(test_data, column_types=types))\ntest_h2o = roc_auc_score(test_data[TARGET_NAME].values, h2o_predict.as_data_frame().values[:, 0])\n","fc2c0339":"labels.append('h2o')\ntimes.append(time_h2o)\nscores.append(test_h2o)\n\nplot_bar(labels, times, scores)","97b23077":"# Step 0.1. Import necessary libraries ","5b64853e":"# Step 0.6. (Optional) Data splitting for train-test ","77a7c78a":"Roles setup here set target column and base date, which is used to calculate date differences:","3f5c74e8":"## Step 6. Create AutoML with time utilization","6ef9ef81":"To create AutoML model here we use `TabularAutoML` preset.\n\n\nAll params we set above can be send inside preset to change its configuration:","d69c5dfe":"# Step 0. Install LAMA","4c7213c8":"# Step 0.5. (Optional) Some user feature preparation ","4116a380":"## Step 7. H2O? ","c999976a":"## Step 8. Report","11d4591d":"Save new config template:","d6a9350c":"## Step 5. Same Preset with less available time.","87c62b71":"Cell below shows some user feature preparations to create task more difficult (this block can be omitted if you don't want to change the initial data):","ed5fb005":"* Report for base TabularAutoML is [here](.\/lama_report\/lama_interactive_report.html)","1c263311":"Below we are going to create specific AutoML preset for TIMEOUT utilization (try to spend it as much as possible):","ebadf345":"Block below can be omitted if you are going to train model only or you have specific train and test files:","d152adaa":"OOF predictions now contains NaNs because not all folds were calculated. So, we omit OOF score.","33ed259b":"# Step 0.2. Parameters ","4169856b":"Let's compare results:","f796c49c":"# Step 0.3. Fix torch number of threads and numpy seed ","02c4e2cb":"#  ==== AutoML preset usage ====\n\n\n## Step 1. Create Task","1e5d2202":"## Step 4. Predict to test data and check scores","ce1cb2f0":"## Step 2. Setup columns roles","94824e92":"# Step 0.4. Example data load ","ca30a2e6":"## Step 3. Create AutoML from preset"}}