{"cell_type":{"0bbeab08":"code","27fd4d21":"code","10137717":"code","3113a57a":"code","de3e40b9":"code","bfc5b280":"code","41cbdac9":"code","8508336c":"code","feefdfbb":"code","2c2184fd":"code","56e4aece":"code","9472a4a6":"code","683854a2":"code","b391e3c5":"code","34eb9f8f":"code","38f7faeb":"code","e43edf0f":"code","6d3cea85":"code","85d45063":"code","f1ecb9fd":"code","aa07c04b":"code","74b983eb":"code","41064edb":"code","cffbc50d":"markdown","e4d14901":"markdown","69257885":"markdown","0282e255":"markdown","18abfddc":"markdown","967d6288":"markdown","9674c6d5":"markdown","056a3d3a":"markdown","eca8e730":"markdown","f265c4a7":"markdown","ca13fc4e":"markdown","a3688061":"markdown","04359437":"markdown","0732c767":"markdown","6cc17dba":"markdown","1e6854e0":"markdown","bb7593e0":"markdown","6ac17c60":"markdown","d30b19d0":"markdown","24ffbb8c":"markdown"},"source":{"0bbeab08":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport plotly as py\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","27fd4d21":"df = pd.read_csv('\/kaggle\/input\/top50spotify2019\/top50.csv', encoding=\"windows-1252\")\ndf = df.drop([\"Unnamed: 0\"], axis = 1)\ndf = df.rename(columns = {\"Track.Name\":\"trackName\", \"Artist.Name\" : \"artistName\", \"Beats.Per.Minute\":\"beatsPerMinute\",\"Genre\":\"genre\", \"Loudness..dB..\":\"loudness\",\"Valence.\":\"valence\",\"Length.\":\"length\",\"Acousticness..\":\"acousticness\",\"Speechiness.\":\"speechiness\", \"Popularity\":\"popularity\", \"Energy\":\"energy\", \"Liveness\":\"liveliness\",\"Danceability\":\"danceability\"})","10137717":"df.head()","3113a57a":"df.info()","de3e40b9":"df.describe().T","bfc5b280":"df.shape","41cbdac9":"df.genre.value_counts()","8508336c":"df.isna().sum()","feefdfbb":"df.corr()","2c2184fd":"sns.heatmap(df.corr());","56e4aece":"def createPlot(attribute):\n    variable = df[attribute]\n    count = variable.value_counts()\n        \n    plt.figure(figsize=(10,8))\n    plt.bar(count.index, count)\n    plt.tight_layout()\n    plt.xlabel(attribute)\n    plt.ylabel(\"Frequency\")\n    plt.xticks(count.index, count.index.values, rotation = 60)\n    plt.show()","9472a4a6":"getPlotted = [\"artistName\",\"genre\"]\nfor each in getPlotted:\n    createPlot(each)","683854a2":"def createHistogram(attribute):\n    \n    plt.figure(figsize=(6,4.8))\n    plt.hist(df[attribute], bins = 50 )\n    plt.tight_layout()\n    plt.xlabel(attribute)\n    plt.ylabel(\"Counts\")\n    plt.xticks(rotation = 90)\n    plt.show()","b391e3c5":"intData = [\"beatsPerMinute\",\"energy\",\"danceability\",\"loudness\",\"liveliness\",\"valence\",\"length\",\"acousticness\",\"speechiness\",\"popularity\"]\n\nfor each in intData:\n    createHistogram(each)","34eb9f8f":"plt.figure(figsize=(12,5))\nax = sns.countplot(x ='genre', data = df)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_xticklabels(ax.get_xticklabels(), fontsize=8)\nplt.tight_layout()\nplt.show()","38f7faeb":"df.artistName.unique()","e43edf0f":"plt.figure(figsize=(12,5))\nax = sns.barplot(x='artistName', y='popularity', data=df)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_xticklabels(ax.get_xticklabels(), fontsize=8)\nplt.color\nplt.tight_layout()\nplt.show()","6d3cea85":"sns.jointplot(x = \"liveliness\", y = \"popularity\",\n              kind = \"kde\", data = df)\nplt.show()\nplt.tight_layout()","85d45063":"sns.lmplot(x=\"liveliness\", y=\"popularity\", data=df)\nplt.show()","f1ecb9fd":"df[\"length\"].mean()","aa07c04b":"df[\"beatsPerMinute\"].max()","74b983eb":"df[\"popularity\"].std()","41064edb":"pie = df.genre.value_counts()\nlabels = pie.index\ncolors = [\"salmon\",\"lemonchiffon\",\"aquamarine\",\"darkslateblue\"]\nexplode = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\nprint(len(explode))\nsizes = pie.values\n\nplt.figure(figsize = (10,10))\nplt.pie(sizes, explode = explode, labels = labels, colors = colors, autopct = '%1.1f%%')\nplt.show()","cffbc50d":"____________________________________________","e4d14901":"As we can see, we don't have any null values.","69257885":"Let's view how many songs are in the top 50 based on their genres.","0282e255":"As we can see, the less \"lively\" a song is the more \"popular\" it becomes. A similar observation can be made with a line plot.","18abfddc":"Let's get a Correlation Table.","967d6288":"Let's get the mean, standart deviation and max values of some columns.","9674c6d5":"Let's get the unique artist names.","056a3d3a":"We see that there are 13 columns. 3 of these are objects and 10 are of the integer type. Let's get the dataset's shape.","eca8e730":"50 rows and 13 columns.","f265c4a7":"Now let's create bar plots for different categories.","ca13fc4e":"Let's visualize the correlation between liveliness and popularity.","a3688061":"Let's view the first 5 elements of this dataset by using head() function.","04359437":"Now let's compare the artist by thier popularity.","0732c767":"Now let's plot histograms with columns that have int data.","6cc17dba":"----","1e6854e0":"Now let's see if there are any columns with missing info.","bb7593e0":"Let's get a general summary of the dataset by using info() and describe().","6ac17c60":"For better readability let's create a heatmap.","d30b19d0":"For better readability let's create some visualizations for our columns.","24ffbb8c":"Finally let's create a Pie Chart of the Top 50 based on genres."}}