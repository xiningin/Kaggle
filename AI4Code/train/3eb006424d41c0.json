{"cell_type":{"aecaa9c5":"code","e18a71a2":"code","0aa2783e":"code","826a07fc":"code","abf6936d":"code","b3090e82":"code","b81a5224":"code","dffe072c":"code","2357409b":"code","0bb926e0":"code","44f6675e":"code","4ea4983f":"code","54ccca11":"code","ed261840":"code","c24e4c46":"code","8c6a5c19":"code","9e9328ca":"code","5ed82f23":"code","aecda276":"markdown","37d2dd1a":"markdown","a6553e6f":"markdown","0560fa0c":"markdown","b70aa8f2":"markdown","811ec577":"markdown","1023040f":"markdown","38d86eab":"markdown","d4bed1cf":"markdown","52584549":"markdown","a60273a0":"markdown","b35422c7":"markdown","e506130c":"markdown","4fdf3c96":"markdown","dcc490d7":"markdown"},"source":{"aecaa9c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e18a71a2":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","0aa2783e":"data=pd.read_csv('\/kaggle\/input\/dogecoin-dataset-jan2020-to-jan2021\/CRYPTOCURRENCY_US_KRAKEN_DOGEUSD.csv')","826a07fc":"data.head()","abf6936d":"data.isnull().sum()","b3090e82":"sns.heatmap(data.isnull())","b81a5224":"plt.figure(figsize=(30,20))\nsns.scatterplot(x=data['High'],y=data['Low'],hue=data['Date'][:50])","dffe072c":"maximum=max(data['High'])\nmaximum","2357409b":"minimum=min(data['High'])\nminimum","0bb926e0":"maximum1=max(data['Low'])\nmaximum1","44f6675e":"minimum1=min(data['Low'])\nminimum1","4ea4983f":"data.head()","54ccca11":"data.loc[data['High']==0.006]","ed261840":"a=(0.006-0.0031)\/(0.0031)*100\nprint(a , \"%\")","c24e4c46":"data.loc[data['High']==0.0016]","8c6a5c19":"a=(0.0016-0.0016)\/(0.0016)*100\nprint(a , \"%\")","9e9328ca":"data","5ed82f23":"p=((0.0058-0.0020)\/0.0020)*100\nprint(\"Profit =\",p, \"%\")","aecda276":"# How much profit percent?","37d2dd1a":"# Check the date and all other columns when the doge was maximum in \"High\" column","a6553e6f":"# Check the minimum price of doge in the \"Low\" Columns","0560fa0c":"# Check the maximum price of doge in the \"Low\" Columns","b70aa8f2":"# How much profit percent?","811ec577":"# Let's do our first task to import the dataset","1023040f":"# Let's check the null value","38d86eab":"**In the above plot we used only 50 top date to print the high and low prices of dogecoin in that particular day**","d4bed1cf":"# Check the date and all other columns when the doge was minimum in \"High\" column","52584549":"# Plot the heatmap for null values","a60273a0":"# By this data, we can do some ploting so let's begin","b35422c7":"# What if someone has bought the doge on jan 2020 and sold it on jan 2021? How much profit?","e506130c":"# Check the maximum price of doge in the \"High\" Columns","4fdf3c96":"# Almost 190% return in 1 year","dcc490d7":"# Check the minimum price of doge in the \"High\" Columns"}}