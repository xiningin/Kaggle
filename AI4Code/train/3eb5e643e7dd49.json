{"cell_type":{"63a239df":"code","32a48faa":"code","f7d04f6a":"code","72f69abd":"code","6b645ead":"code","aa7a9a2e":"code","ed43eb38":"code","38d76d44":"code","dddc27cb":"markdown","73159b09":"markdown"},"source":{"63a239df":"import os\nimport random\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers, losses, optimizers, metrics, Model, Sequential,regularizers\nfrom tensorflow.keras.layers import Input, Dense, BatchNormalization, Dropout,Lambda","32a48faa":"def seed_everything(SEED=42):\n    os.environ['TF_DETERMINISTIC_OPS'] = '1'\n    os.environ['PYTHONHASHSEED']=str(SEED)\n    random.seed(SEED)\n    np.random.seed(SEED)\n    tf.random.set_seed(SEED)\n    \nseed_everything()","f7d04f6a":"%%time\n#  \u52a0\u8f7d\u6570\u636e\u96c6\nX_train = pd.read_csv('..\/input\/house-price-dummy\/X_train.csv',header=0,index_col=0)\nX_test1 = pd.read_csv('..\/input\/house-price-dummy\/X_test.csv',header=0,index_col=0)\ny_train = pd.read_csv('..\/input\/house-price-dummy\/y_train.csv',header=0,index_col=0)\ndata_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv',header=0,index_col=0)\nX_train.reset_index(drop=True,inplace=True)\ny_train.reset_index(drop=True,inplace=True)","72f69abd":"mx = MinMaxScaler()\nX_train = mx.fit_transform(X_train)\nX_test1 = mx.transform(X_test1)\nmy = MinMaxScaler()\ny_train = my.fit_transform(y_train)","6b645ead":"X_train,X_test,y_train,y_test = train_test_split(X_train,y_train,test_size=0.2,shuffle=True)","aa7a9a2e":"hidden_units = [32, 128]\ndef mlp():\n    inp = Input(shape=(332,))\n    x = BatchNormalization()(inp)\n    for id, hidden_unit in enumerate(hidden_units):\n        x = Dense(hidden_unit,kernel_regularizer=regularizers.l1(0.15))(x)\n        x = BatchNormalization()(x)\n        x = Lambda(tf.keras.activations.relu)(x)\n        x = Dropout(0.1)(x)\n    output = Dense(1)(x)\n    model = Model(inputs=inp, outputs=output)\n    model.compile(optimizer=optimizers.Adam(learning_rate=0.0001),\n                  loss='mse',\n                  metrics=[tf.keras.metrics.RootMeanSquaredError(name='rmse')])\n    return model","ed43eb38":"model = mlp()\nes = keras.callbacks.EarlyStopping(monitor='val_rmse', patience=30)\ncheckpoint = keras.callbacks.ModelCheckpoint('best_model.hdf5', monitor=\"val_loss\", mode=\"min\", save_best_only=True, verbose=1)\nhistory = model.fit(X_train, y_train, batch_size=32, epochs=500,callbacks=[es,checkpoint],validation_data=(X_test,y_test), verbose=1)\n\n# \u8fed\u4ee3\u6253\u5370\u8bad\u7ec3\u60c5\u51b5\ntrain_mse = history.history['rmse']\nval_mse = history.history['val_rmse']\niter_epoch = len(train_mse)\nfig = plt.figure(figsize=(8, 8))\nax = plt.subplot(111)\nax.plot(np.arange(iter_epoch), train_mse, label='train_mse')\nax.plot(np.arange(iter_epoch), val_mse, label='val_mse')\nax.set_title('train iter mse')\nax.set_ylabel('mse')\nax.set_xlabel('epoch')\nax.legend(loc='upper right')\nplt.show()","38d76d44":"# \u9884\u6d4b\ny_pred = model.predict(X_test1)\ny_pred = my.inverse_transform(y_pred)\n# \u53d8\u6362\u8fd8\u539f\ny_pred = np.expm1(y_pred)\n# \u5c06\u6570\u636e\u8fdb\u884c\u4fdd\u5b58\npredict = pd.DataFrame(y_pred,columns=['SalePrice'],index=data_test.index)\npredict.to_csv('predict.csv')","dddc27cb":"### \u5f15\u8a00\n* [\nkaggle\u623f\u4ef7\u9884\u6d4b\u3010\u4e2d\u6587\u601d\u8def\u3011\u6570\u636e\u9884\u5904\u7406\u4e0e\u7279\u5f81\u5de5\u7a0b666](https:\/\/www.kaggle.com\/mywishisworldpeace\/kaggle-666-embedding-mlp)\n* \u56e0\u4e3a\u5728\u6570\u636e\u9884\u5904\u7406\u4e0e\u7279\u5f81\u5de5\u7a0b\u4e2d\u4eba\u4e3a\u589e\u52a0\u4e86\u8bb8\u591a\u7279\u5f81\uff0c\u8fd9\u4e9b\u7279\u5f81\u662f\u60f3\u6b63\u5219\u5316\u6765\u8ba9\u6a21\u578b\u9009\u53d6\u7684\u3002\n* \u6211\u4e0d\u60f3\u5c1d\u8bd53\u4e2a\u6a21\u578b\u4ee5\u4e0a\u7684\u878d\u5408\uff0c\u5982\u679c\u4e09\u4e2a\u6a21\u578b\u6211\u4f1a\u9009\u53d6\uff08\u7ebf\u6027\u6a21\u578b(Lasso),\u6811\u6a21\u578b(XGBoost),\u795e\u7ecf\u7f51\u7edc\u6a21\u578b(mlp)\uff09mlp\u6a21\u578b\u5728\u6211\u8ba4\u77e5\u4e2d\u662f\u53ef\u4ee5\u7528\u4e8e\u8fd9\u4e2a\u6bd4\u8d5b\u7684\uff0c\u4f46\u662f\u4e3a\u4ec0\u4e48\u6548\u679c\u8fd9\u4e48\u5dee\uff0c\u6211\u6709\u70b9\u6ca1\u641e\u61c2\uff0c\u662f\u56e0\u4e3a\u8c03\u53c2\u8fc7\u7a0b\u561b\uff1f\u4e5f\u6682\u65f6\u5728\u516c\u5f00notebook\u4e2d\u627e\u5230\u4f7f\u7528mlp\u7684\u9ad8\u5206notebook\u3002\n* mlp\u7ed3\u5408embedding\u7f16\u7801\u4e5f\u5728\u5c1d\u8bd5\uff0c\u6700\u540e\u6709\u4e2a\u9519\u8bef\u8fd8\u6ca1\u89e3\u51b3\n* \u8fd9\u4e2a\u6a21\u578b\u8c8c\u4f3c\u662f\u8fc7\u62df\u5408\u7684\uff0c\u56e0\u4e3a\u6a21\u578b\u4e0d\u7a33\u5b9a\n* \u5982\u679c\u6709\u597d\u7684\u5efa\u8bae\uff0c\u6073\u8bf7\u6307\u5bfc\uff01\uff01\uff01","73159b09":"### 1.\u5b9a\u4e49mlp\u6a21\u578b"}}