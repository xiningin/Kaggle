{"cell_type":{"279f30b2":"code","57c8e236":"code","5b3bef5c":"code","ad6c0bf0":"code","110b7755":"code","604f0331":"code","d55dfbae":"code","ca693935":"code","2a4986b9":"code","b9965912":"code","37b144ce":"code","09e52500":"code","103e8b84":"code","8bb21704":"markdown","b4f61ae0":"markdown","632525a0":"markdown","0f628762":"markdown"},"source":{"279f30b2":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nimport plotly.graph_objects as go\nfrom ipywidgets import widgets\nfrom ipywidgets import interact","57c8e236":"data = pd.read_csv(\n    '..\/input\/infant-mortality-fertility-income\/MortalityFertilityIncome.csv', \n    decimal = ','\n)","5b3bef5c":"data.head()","ad6c0bf0":"#First and last year we have data for\nMIN_YEAR = 1970\nMAX_YEAR = 2016","110b7755":"#Mortality range\nmortality_columns = [c for c in data.columns if c[0] == 'm']\nMIN_MORTALITY = np.min(np.min(data.loc[:, mortality_columns]))\nMAX_MORTALITY = np.max(np.max(data.loc[:, mortality_columns]))\nprint(f'Range of mortalities is {MIN_MORTALITY} - {MAX_MORTALITY}')","604f0331":"#Income range\nincome_columns = [c for c in data.columns if c[0] == 'i']\n#In several instances there are negative income values. We assume it is a sign typo\nMIN_INCOME = np.min(np.min(np.abs(data.loc[:, income_columns])))\nMAX_INCOME = np.max(np.max(np.abs(data.loc[:, income_columns])))\nprint(f'Range of incomes is {MIN_INCOME:.2f} - {MAX_INCOME:.2f}')","d55dfbae":"#Allows selecting a particular year\nyear_widget = widgets.IntSlider(\n    value=MIN_YEAR,\n    min=MIN_YEAR,\n    max=MAX_YEAR,\n    step=1,\n    description='Year:',\n    continuous_update=False\n)","ca693935":"print(f\"Unique regions: {data['Region'].unique()}\")","2a4986b9":"cols = sns.color_palette()\ncols","b9965912":"region_to_color = {\n    'Latin America & Caribbean': cols[2],\n    'South Asia': cols[7], \n    'Sub-Saharan Africa': cols[3],\n    'Europe & Central Asia': cols[9], \n    'Middle East & North Africa': cols[6],\n    'East Asia & Pacific': cols[8], \n    'North America': cols[4]\n}","37b144ce":"OUR_GRAY = 'rgb(143, 143, 143)'","09e52500":"#Allows us to interactively change the selection parameters\n@interact(\n    year     = year_widget\n)\n#We must provide default values, otherwise the widgets do not show up\ndef interactive_plot(year = 1970):\n    \n    #Select data\n    mortality_data_incl_nan = data.loc[:, 'm' + str(year)]\n    income_data_incl_nan    = data.loc[:, 'i' + str(year)]\n\n    not_nan_filter = mortality_data_incl_nan.notnull() & income_data_incl_nan.notnull()\n\n    mortality_data = mortality_data_incl_nan[not_nan_filter]\n    income_data    = income_data_incl_nan[not_nan_filter]\n    \n    region = data['Region'][not_nan_filter]\n    color  = ['rgb' + str(region_to_color[r]) for r in region]\n    \n    name = data['Country Name'][not_nan_filter]\n\n    #Create the figure\n    fig = go.Figure(\n            data=[go.Scatter(\n                x=income_data, \n                y=mortality_data,\n                hovertemplate = '%{text}<extra><\/extra>',\n                mode='markers',\n                text = name,\n                marker=dict(color=color),\n            )]\n          )\n\n    #Style it\n    fig.update_layout(\n        title='Child survival v. Per Capita GDP, ' + str(year),\n        title_font=dict( color = OUR_GRAY, size = 24 ),\n        xaxis=dict(\n            title='GDP per capita (current USD)',\n            title_font=dict( size = 18 ),\n            color=OUR_GRAY,\n            gridcolor=OUR_GRAY,\n            gridwidth=1,\n            range=[np.log10(50), np.log10(90000)],\n            type='log',\n        ),\n        yaxis=dict(\n            title='Mortality rate per 1000 live births',\n            title_font=dict( size = 18 ),\n            color = OUR_GRAY,\n            gridcolor=OUR_GRAY,\n            gridwidth=1,\n            range=(np.log10(1.5),np.log10(250)),\n            type='log',\n        ),\n        paper_bgcolor='black',\n        plot_bgcolor ='black',\n    )\n\n    fig.show()","103e8b84":"#This is how the outcome looks like\nfrom IPython.display import Image\nImage('..\/input\/images-for-notebooks\/kaggle_mortality_gdp.jpg')","8bb21704":"This notebook is attempting to recreate the plots from an interesting TED talk by Hans Rosling (https:\/\/www.ted.com\/talks\/hans_rosling_the_best_stats_you_ve_ever_seen), comparing the infant mortality and GDP.\n\nUsing the ipython widgets to make the plot interactive (this unfortunately does not show in the viewer).\n\n# Load libraries, data","b4f61ae0":"# Define widget that will allow us to interact with the plot","632525a0":"# Color code the regions","0f628762":"# Interactive plot"}}