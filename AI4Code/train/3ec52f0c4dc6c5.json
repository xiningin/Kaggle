{"cell_type":{"a2ead842":"code","834a461f":"code","12c755ad":"code","491dd050":"code","886f0404":"code","7cbbcfa5":"code","911d6c98":"code","7c171236":"code","0c881234":"code","0f5cdc9e":"code","7a1782c2":"code","42563d52":"code","e4bc0722":"code","e3c12080":"code","1d0987c5":"code","58035469":"code","623cc511":"code","6427b871":"code","96b0b1ac":"code","01da1afc":"code","a2fdeeff":"code","98965fbe":"code","0428b6b4":"code","120c7ca5":"code","dbe65080":"code","8cdedfbd":"code","7996e6ed":"code","51969a70":"code","7755a9e0":"code","af60db61":"code","0aa34b2f":"code","1ec9220b":"code","78feadf2":"code","5c81ff70":"code","763873d3":"code","edccefcf":"code","59f05255":"code","505553f5":"code","89017138":"code","acdbd76a":"code","cdf23492":"code","cadee097":"markdown","0e0ea773":"markdown","bab42f21":"markdown","1eb51cd7":"markdown","79f6adf3":"markdown","eee82952":"markdown","a1682505":"markdown","bc837cc6":"markdown","8ca573e1":"markdown","e55ce7c5":"markdown","50dc5d2c":"markdown","c72e8242":"markdown","91c0ba12":"markdown","01b5a13e":"markdown","65a7ad37":"markdown","8d3a3102":"markdown","316d9861":"markdown","979fa8c0":"markdown","971bb1b6":"markdown","8c6240cd":"markdown","14e47c04":"markdown","90f21b2a":"markdown","477bbb15":"markdown","2b60b8d3":"markdown","1f7b3f53":"markdown","9eb38818":"markdown","1bde9a5e":"markdown"},"source":{"a2ead842":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","834a461f":"import json\nfrom urllib.request import urlopen\nimport pandas as pd\nimport matplotlib.pyplot as plt","12c755ad":"jsonObj = urlopen(\"https:\/\/jsonblob.com\/api\/jsonBlob\/f0b70eef-566b-11eb-9d92-415b3ac53928\")\njson_data = json.load(jsonObj)\nprint(json_data)","491dd050":"pd.set_option('display.max_columns',None)","886f0404":"df = pd.read_csv(\"\/kaggle\/input\/network-requests-data\/monoxor.csv\")\ndf.head()","7cbbcfa5":"df.describe(include = 'all')","911d6c98":"df_new = df[['req\/body\/note\/title', 'req\/body\/note\/desc', 'isSafe']]\n\ndf_new.head()","7c171236":"mylabels='Safe','Unsafe'\ncmap = plt.get_cmap('Spectral')\ncolors = [cmap(i) for i in np.linspace(0, 1, 8)]\n\nplt.figure(figsize=(16,8))\n\nplt.title(\"Safe and Unsafe Requests Distribution\", size = 20)\nplt.pie(df_new['isSafe'].value_counts(), labels=mylabels, autopct='%1.1f%%', shadow=True, colors=colors)\nplt.show()","0c881234":"not_safe = df_new['isSafe'].isin([False])\ndf_not_safe = df_new[not_safe].reset_index(drop=True)\n\ndf_not_safe = pd.DataFrame(df_not_safe)\ndf_not_safe","0f5cdc9e":"safe = df_new['isSafe'].isin([True])\ndf_safe = df_new[safe].reset_index(drop=True)\n\ndf_safe","7a1782c2":"import string\nstring.punctuation\ndef remove_punctuation(text):\n    no_punct = [word for word in text if not word.isalpha()]\n    no_punct = [word for word in no_punct if word!= '.']\n    words_wo_punct = ''.join(no_punct)\n   \n    return words_wo_punct\nmal_words_ns = df_not_safe['req\/body\/note\/desc'].apply(lambda x: remove_punctuation(x))\nprint(mal_words_ns)","42563d52":"mal_words_ns.index = np.arange(len(mal_words_ns))\n\ncorpus_mal_words = []\n\nfor i in (range(len(mal_words_ns))):\n  review = mal_words_ns[i]\n  review = review.lower()\n  review = review.split()\n  \n  if len(review) > 0:\n      corpus_mal_words.append(review)\ncorpus_mal_words","e4bc0722":"print(len(corpus_mal_words))","e3c12080":"string.punctuation","1d0987c5":"import string\nstring.punctuation\ndef remove_punctuation(text):\n    no_punct = [word for word in text if not word.isalpha()]\n    no_punct = [word for word in no_punct if word!= '.']\n    words_wo_punct = ''.join(no_punct)\n   \n    return words_wo_punct\nmal_words_s = df_safe['req\/body\/note\/desc'].apply(lambda x: remove_punctuation(x))\nprint(mal_words_s)","58035469":"import plotly.express as px\npx.histogram(df_new, x = 'req\/body\/note\/title', opacity = 0.5)","623cc511":"import plotly.express as px\npx.histogram(df_not_safe, x = 'req\/body\/note\/title', opacity = 0.5)","6427b871":"import plotly.express as px\npx.histogram(df_safe, x = 'req\/body\/note\/title', opacity = 0.5)","96b0b1ac":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf_new['isSafe'] = le.fit_transform(df_new['isSafe']) ","01da1afc":"df_new.head()","a2fdeeff":"df_new['desc length'] = df_new['req\/body\/note\/desc'].astype(str).apply(len)","98965fbe":"df_new.head()","0428b6b4":"y = df_new['isSafe']\nX = df_new.drop(columns = 'isSafe')","120c7ca5":"print(\"Shape of X: \" , X.shape)\nprint(\"Shape of y: \" , y.shape)","dbe65080":"import nltk\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer","8cdedfbd":"X.index = np.arange(len(X))\ncorpus = []\nfrom tqdm import tqdm\nfor i in tqdm(range(len(X))):\n  review = X['req\/body\/note\/desc'][i]\n  review = review.lower()\n  review = review.split()\n  ps = PorterStemmer()\n  all_stopwords = stopwords.words('english')\n  review = [ps.stem(word) for word in review if not word in set(all_stopwords)]\n  review = ' '.join(review)\n  corpus.append(review)\n","7996e6ed":"corpus","51969a70":"from sklearn.feature_extraction.text import CountVectorizer as CV\ncv  = CV(max_features = 100,ngram_range=(1,1))\n\nX_cv = cv.fit_transform(corpus).toarray()\ny = y.values\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_cv, y, test_size = 0.20, random_state = 0)\nfrom sklearn.naive_bayes import BernoulliNB\nclassifier = BernoulliNB()\nclassifier.fit(X_train, y_train)\n\ny_pred = classifier.predict(X_test)\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import metrics\nacc = accuracy_score(y_test, y_pred)\nprint(\"Accuracy of the classifier: \",acc)\nprint(\"Confusion matrix is :\\n\",metrics.confusion_matrix(y_test,y_pred))\nprint(\"Classification report: \\n\" ,metrics.classification_report(y_test,y_pred))","7755a9e0":"acc","af60db61":"from sklearn.feature_extraction.text import TfidfVectorizer as TV\ntv  = TV(ngram_range =(1,1),max_features = 3000)\nX_tv = tv.fit_transform(corpus).toarray()","0aa34b2f":"X_train, X_test, y_train, y_test = train_test_split(X_tv, y, test_size = 0.20, random_state = 0)\nfrom sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)\n","1ec9220b":"y_pred = classifier.predict(X_test)\nacc = accuracy_score(y_test, y_pred)","78feadf2":"acc","5c81ff70":"import tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Dropout\n","763873d3":"tokenizer = Tokenizer(num_words = 100)\ntokenizer.fit_on_texts(corpus)","edccefcf":"sequences = tokenizer.texts_to_sequences(corpus)\npadded = pad_sequences(sequences, padding='post')","59f05255":"word_index = tokenizer.word_index\nvocab_size = len(tokenizer.word_index) + 1","505553f5":"embedding_dim = 64\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(100, embedding_dim),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dropout(0.2),\n    tf.keras.layers.Dense(6, activation='relu'),\n    tf.keras.layers.Dropout(0.3),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.summary()","89017138":"num_epochs = 10\n\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\n","acdbd76a":"m = model.fit(padded,y,epochs= num_epochs,validation_split=0.2)","cdf23492":"plt.plot(m.history['accuracy'])\nplt.plot(m.history['val_accuracy'])\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","cadee097":"These are the malicious words in unsafe requests.","0e0ea773":"# EDA","bab42f21":"### Maliciuos Words in Safe and Unsafe requests.","1eb51cd7":"Same accuracy as that of Bag of Words Technique, **84%**.","79f6adf3":"Term Frequency - Inverse Document Frequency is used to measure the originality of a word. It converts sentences to vectors(after tokenization, stemming\/lemmatization).\n\nBag of Words technique doesn't provide us with the semantic meaning of the word, here TF-IDF comes in play as it provides us the semantic meaning of the word.","eee82952":"# Importing libraries","a1682505":"# Conclusion","bc837cc6":"There are **428 unsafe requests** and **572 safe requests.**","8ca573e1":"Adding description length as a feature.","e55ce7c5":"The best accuracy achieved is **84.5%.**\n\nThe main feature over which the safety is measured is the description feature. The concept of Natural Language Processing has been applied in order to analyse this feature, and create the learning model.\n\nAll the three models, Bag of Words model, TF-IDF model have a **test accuracy of 84%** and Deep Learning model has **test accuracy of 84.5%** .","50dc5d2c":"![image.png](attachment:image.png)","c72e8242":"These are the top 11 most frequent words.","91c0ba12":"Creating corpus after removing stopwords.","01b5a13e":"# Deep Learning Model","65a7ad37":"There are no repeated titles in safe requests.","8d3a3102":"# Bag of Words Model","316d9861":"Problem Statement:\nLets assume you are part of the team developing cyber security product. This product protects web and mobile applications from runtime attacks. The way hackers attack keeps on changing constantly and thats where Machine Learning comes into the picture. Your task is to develop machine learning model which can identify if the request is safe or not.\n\nIn this data you will find the request payload and you will also find a field \"isSafe\" which basically tells if the request is safe or not for the app. We have looked at fields in each request and have marked a request as not safe if any of the fields contain malicious input from the user in to perform owasp top 10 attacks. Therefore, If value of isSafe is False, it means the request should be blocked. \n\n**Advanced expertise in both Information Security and Data Science will be necessary ingredient in enabling accurate discrimination between malicious and benign activity.** \n\n**Web and Mobile application logs require deep statistical analysis, which is accomplished in this notebook using machine learning and deep learning models.**","979fa8c0":"# Reading Data","971bb1b6":"# Cyber Security | Monoxor Task","8c6240cd":"This is the JSON data provided. Now let's analyze this data in csv format.","14e47c04":"There are 2 repeated titles in unsafe requests.","90f21b2a":"This deep learning model has a **test accuracy of 84%**.","477bbb15":"# TF-IDF Technique","2b60b8d3":"corpus_mal_words","1f7b3f53":"There are **more safe requests.**","9eb38818":"Features with unique values are: **Body Title, Body Description and isSafe** features.\n\nAll the **other features** have a single value, which means that **they can't be used** to detect if the request is an attack by a hacker or not.","1bde9a5e":"An accuracy score of **84%**."}}