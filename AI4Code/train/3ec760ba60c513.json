{"cell_type":{"2f1234c5":"code","2dd94060":"code","68cd4ce9":"code","3eafd4f8":"code","84aa2477":"code","9345a392":"code","8f1d29e0":"code","28c91cd0":"code","c3d6c480":"code","8826d9c0":"code","89a61442":"code","7b3c6d8f":"code","b160af7c":"code","eb6bcd6d":"code","11aa585e":"code","31db5d06":"code","2b631bb6":"code","cee0edca":"code","0855f0dd":"code","c02e9bb7":"code","4589371f":"code","d9bddf8e":"code","47fdc315":"code","22a0aa95":"markdown"},"source":{"2f1234c5":"import cv2\n\nimg = cv2.imread(\"..\/input\/brain-tumor-classification-mri\/Testing\/meningioma_tumor\/image(1).jpg\")\n\nimg.shape","2dd94060":"import matplotlib.pyplot as plt\n\nplt.imshow(img)\nplt.show()","68cd4ce9":"train_dir = \"..\/input\/brain-tumor-classification-mri\/Training\"\ntest_dir = \"..\/input\/brain-tumor-classification-mri\/Testing\"","3eafd4f8":"import tensorflow as tf\n\ntrain_data = tf.keras.preprocessing.image_dataset_from_directory(train_dir,\n                                                                 image_size=(224,224),\n                                                                 label_mode = \"categorical\",\n                                                                 batch_size = 32\n                                                                 )\ntest_data =tf.keras.preprocessing.image_dataset_from_directory(test_dir,\n                                                               image_size =(224,224),\n                                                               label_mode = \"categorical\",\n                                                               batch_size = 32\n                                                               )","84aa2477":"for image, label in train_data:\n  print(image.shape)\n  print(label.shape)\n  break","9345a392":"label_names = train_data.class_names\n\nlabel_names, len(label_names)","8f1d29e0":"import matplotlib.pyplot as plt\nimport tensorflow as tf\n\nplt.figure(figsize=(12,12))\n\nfor image, label in train_data.take(1):\n\n  for i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(image[i].numpy().astype(\"uint8\"))\n    plt.title(label_names[tf.argmax(label[i])])\n    plt.axis(\"off\")\n","28c91cd0":"# building a efficientnet model\n\nimport tensorflow as tf\n\nbase_model = tf.keras.applications.EfficientNetB5(include_top= False)\nbase_model.trainable = False","c3d6c480":"# building the model\nimport tensorflow as tf\nfrom tensorflow.keras import layers\n\ninputs = tf.keras.Input(shape=(224,224,3))\n\nx = base_model(inputs)\n\nx = layers.GlobalAveragePooling2D()(x)\nx = layers.Dense(128, activation= \"relu\")(x)\nx = layers.Dropout(0.2)(x)\nx = layers.Dense(128, activation = \"relu\")(x)\nx = layers.Dropout(0.2)(x)\nx = layers.Dense(64, activation = \"relu\")(x)\n\noutputs = layers.Dense(4, activation=\"softmax\")(x)\n\nmodel = tf.keras.Model(inputs,outputs)\n","8826d9c0":"model.summary()","89a61442":"# compiling the model\n\nmodel.compile(\n    loss = tf.keras.losses.categorical_crossentropy,\n    optimizer = tf.keras.optimizers.Adam(learning_rate= 0.001),\n    metrics = [\"accuracy\"]\n)","7b3c6d8f":"# fiiting data to the model\n\nhistory=model.fit(train_data,\n          epochs = 10,\n          steps_per_epoch = len(train_data),\n          validation_data = test_data,\n          validation_steps = len(test_data)\n)","b160af7c":"base_model_evluation = model.evaluate(test_data)","eb6bcd6d":"print(f\"Base Modle Accuracy: {base_model_evluation[1] *100:0.2f} %\")","11aa585e":"# tunning the model\nbase_model.trainable = True\n\nfor layer in base_model.layers[:-1]:\n  base_model.trainable = False\n\nmodel.compile(\n    loss = tf.keras.losses.categorical_crossentropy,\n    optimizer = tf.keras.optimizers.Adam(learning_rate= 0.001),\n    metrics = [\"accuracy\"]\n)\n","31db5d06":"model.summary()","2b631bb6":"# fitting data to the tuned model\n\nh_t=model.fit(train_data,\n          epochs = 10,\n          steps_per_epoch = len(train_data),\n          validation_data = test_data,\n          validation_steps = len(test_data)\n          )","cee0edca":"# evaluatinn the model\nmodel_evaluation = model.evaluate(test_data)","0855f0dd":"print(f\"Model Accuracy:{model_evaluation[1] *100: 0.2f} %\")","c02e9bb7":"# predicting and visualizing the test data\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(14,14))\n\nfor image, label in test_data.take(1):\n  model_prediction = model.predict(image)\n\n  for i in range(9):\n    plt.subplot(3,3,i+1)\n    plt.imshow(image[i].numpy().astype(\"uint8\"))   \n    plt.title(f\"Model Prediction :{label_names[tf.argmax(model_prediction[i])]}\\n Original : {label_names[tf.argmax(label[i])]}\")\n","4589371f":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(h_t.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(h_t.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(h_t.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(h_t.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","d9bddf8e":"import seaborn as sns\ncolors_dark = [\"#1F1F1F\", \"#313131\", '#636363', '#AEAEAE', '#DADADA']\ncolors_red = [\"#331313\", \"#582626\", '#9E1717', '#D35151', '#E9B4B4']\ncolors_green = ['#01411C','#4B6F44','#4F7942','#74C365','#D0F0C0']\n\nsns.palplot(colors_dark)\nsns.palplot(colors_green)\nsns.palplot(colors_red)","47fdc315":"epochs = [i for i in range(10)]\nfig, ax = plt.subplots(1,2,figsize=(14,7))\ntrain_acc = history.history['accuracy']\ntrain_loss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\n\nfig.text(s='Epochs vs. Training and Validation Accuracy\/Loss_tunning',size=18,fontweight='bold',\n             fontname='monospace',color=colors_dark[1],y=1,x=0.28,alpha=0.8)\n\nsns.despine()\nax[0].plot(epochs, train_acc, marker='o',markerfacecolor=colors_green[2],color=colors_green[3],\n           label = 'Training Accuracy')\nax[0].plot(epochs, val_acc, marker='o',markerfacecolor=colors_red[2],color=colors_red[3],\n           label = 'Validation Accuracy')\nax[0].legend(frameon=False)\nax[0].set_xlabel('Epochs')\nax[0].set_ylabel('Accuracy')\n\nsns.despine()\nax[1].plot(epochs, train_loss, marker='o',markerfacecolor=colors_green[2],color=colors_green[3],\n           label ='Training Loss')\nax[1].plot(epochs, val_loss, marker='o',markerfacecolor=colors_red[2],color=colors_red[3],\n           label = 'Validation Loss')\nax[1].legend(frameon=False)\nax[1].set_xlabel('Epochs')\nax[1].set_ylabel('Training & Validation Loss')\n\nfig.show()","22a0aa95":"**Tunning the model**"}}