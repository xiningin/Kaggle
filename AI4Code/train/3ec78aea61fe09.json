{"cell_type":{"374940e7":"code","c7bcfef6":"code","e2cb340e":"code","47f780be":"code","4f9313db":"code","87965518":"code","ee6d5bde":"code","980079a3":"code","20b52190":"code","bbb36689":"code","318fe747":"code","e84a7edb":"code","a301b60f":"code","be0bf845":"code","505b04f6":"code","e1936aad":"code","8a5cb5fa":"code","f9023120":"code","ea5f2752":"code","c7bb5e1f":"code","4b239dab":"code","9737c7f2":"code","e4254f1f":"code","150ba674":"code","2c16011b":"code","e9cd378b":"code","225e3d66":"code","71ceca3c":"code","f41fe0a1":"code","448e41b4":"code","2487c84b":"code","af75286d":"code","0c1113dd":"code","0cdb23d4":"code","2b88d3aa":"code","0e5bc1c4":"code","7616728f":"code","eee21154":"code","a58b4f85":"code","2475b900":"code","3d522c58":"code","bac23e19":"code","630b278b":"code","e1dd456d":"code","72c4e371":"code","f76e05db":"code","d1abf574":"code","3c529880":"code","20559651":"code","45556bbe":"code","8210ac84":"code","2f131f78":"code","c813ab75":"code","70953763":"code","eafb8070":"code","4bd7570a":"code","da720049":"code","11c1278f":"code","ea000e2c":"code","35e6251a":"code","2b568bb6":"code","da690371":"code","6516e3fe":"code","cac213c9":"code","209abc34":"code","dbd4a294":"code","9b70741a":"code","3ecbff90":"markdown","0be70949":"markdown","45e026c4":"markdown","e18f735c":"markdown","96c3b5c2":"markdown","64a0fb8d":"markdown","f6b2c3bf":"markdown","92326de3":"markdown","63398706":"markdown","1701c8b7":"markdown","400b281c":"markdown","8c57cdad":"markdown","db768b9c":"markdown","af09e50d":"markdown","18845884":"markdown","8098df76":"markdown","58f89e3d":"markdown","59ac0092":"markdown","a3bcb837":"markdown","28898d4e":"markdown","a3304bcb":"markdown","692ad8d0":"markdown","35e0454b":"markdown","97cb7197":"markdown","6fd231f4":"markdown","64e75931":"markdown","d954d34e":"markdown","9441cd31":"markdown","ccaf5099":"markdown","34819f98":"markdown","c5ba814f":"markdown","c18a1dfb":"markdown","46064c67":"markdown","9b30de72":"markdown","71b8f3a2":"markdown","0a5f7639":"markdown"},"source":{"374940e7":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport warnings\n\n\nwarnings.filterwarnings(\"ignore\")","c7bcfef6":"!ls ..\/input\/titanic","e2cb340e":"df_train = pd.read_csv('..\/input\/titanic\/train.csv', index_col='PassengerId')\ndf_test = pd.read_csv('..\/input\/titanic\/test.csv', index_col='PassengerId')","47f780be":"df_train.head(2)","4f9313db":"df_train.shape","87965518":"df_test.head(2)","ee6d5bde":"df_test.shape","980079a3":"df_train['Pclass'].unique()","20b52190":"df_train['Pclass'].value_counts().sort_index().plot.bar(grid=True)\nplt.title('Number of people in each class')\nplt.show()","bbb36689":"df_train.groupby(['Pclass'])['Survived'].mean()","318fe747":"df_train.groupby(['Pclass', 'Survived'])['Survived'].count().unstack(1).plot.bar(grid=True)\nplt.title('The number of people in each class divided into survival')\nplt.show()","e84a7edb":"df_train['Sex'].unique()","a301b60f":"df_train['Sex'].value_counts().sort_index().plot.bar(grid=True)\nplt.title('The number of people by gender')\nplt.show()","be0bf845":"df_train.groupby(['Sex', 'Survived'])['Survived'].count().unstack(1).plot.bar(grid=True)\nplt.title('The number of people by gender divided into survival')\nplt.show()","505b04f6":"df_train.groupby(['Sex', 'Pclass'])['Survived'].mean()","e1936aad":"df_train.groupby(['Sex', 'Survived', 'Pclass'])['Survived'].count().unstack(1).plot.bar(grid=True)\nplt.title('The number of people by gender divided into survival and Pclass')\nplt.show()","8a5cb5fa":"titles = [\n    'Mr.', 'Mrs.', 'Miss.', 'Master.', 'Don.', \n    'Rev.', 'Dr.', 'Mme.', 'Ms.', 'Major.', \n    'Lady.', 'Sir.', 'Mlle.', 'Col.', 'Capt.',\n    'Countess.', 'Jonkheer.'\n]","f9023120":"df_train['Name'][~df_train['Name'].apply(lambda x: any(title in x for title in titles))]","ea5f2752":"for title in titles:\n    df_train[title] = df_train['Name'].apply(lambda x: title in x)","c7bb5e1f":"df_train[titles].sum()","4b239dab":"df_train.drop(titles, axis='columns', inplace=True)\n\nupdated_titles = ['Mr.', 'Mrs.', 'Miss.', 'Master.']\n\nfor title in updated_titles:\n    df_train[title] = df_train['Name'].apply(lambda x: title in x)\n    \ndf_train['others'] = ~df_train[updated_titles].any(axis='columns')","9737c7f2":"df_train.head(2)","e4254f1f":"df_train.groupby(['others']+updated_titles)['Survived'].mean()","150ba674":"df_train.groupby(['others']+updated_titles)['Survived'].count()","2c16011b":"ax = df_train.groupby(['others', 'Survived']+updated_titles)['Survived'].count().unstack(1).plot.bar(grid=True)\nax.set_xticklabels((['others']+updated_titles)[::-1])\n# plt.yscale('log')\nplt.title('The number of people by title divided into survival')\nplt.show()","e9cd378b":"df_train['Age'].describe()","225e3d66":"df_train['Age'].plot.hist(grid=True)\nplt.title('The number of people by age')\nplt.show()","71ceca3c":"plt.hist(\n    [\n        df_train['Age'][df_train['Pclass']==1], \n        df_train['Age'][df_train['Pclass']==2], \n        df_train['Age'][df_train['Pclass']==3]\n    ],\n    bins=15, stacked=True)\nplt.legend(['Pclass 1', 'Pclass 2', 'Pclass 3'])\nplt.title('The number of people by age divided into Pclass')\nplt.grid()\nplt.show()","f41fe0a1":"df_train['Age'][df_train['Pclass']==1].describe()","448e41b4":"df_train['Age'][df_train['Pclass']==2].describe()","2487c84b":"df_train['Age'][df_train['Pclass']==3].describe()","af75286d":"plt.hist([df_train['Age'][df_train['Survived']==0], df_train['Age'][df_train['Survived']==1]], \n         bins=15, stacked=True, color = ['#1f77b4', '#ff7f0e'])\nplt.legend(['Survived 0', 'Survived 1'])\nplt.title('The number of people by age divided into survival')\nplt.grid()\nplt.show()","0c1113dd":"df_train['SibSp'].unique()","0cdb23d4":"df_train.groupby(['SibSp', 'Survived'])['Survived'].count().unstack(1).plot.bar(grid=True)\nplt.yscale('log')\nplt.title('The number of people by SibSp divided into Survived')\nplt.show()","2b88d3aa":"df_train.groupby(['SibSp', 'Survived', 'Pclass'])['Survived'].count().unstack(1).plot.bar(grid=True)\nplt.yscale('log')\nplt.title('The number of people by SibSp divided into Survived and Pclass')\nplt.show()","0e5bc1c4":"df_train.groupby(['SibSp', 'Survived', 'Sex'])['Survived'].count().unstack(1).plot.bar(grid=True)\nplt.yscale('log')\nplt.title('The number of people by SibSp divided into Survived and Sex')\nplt.show()","7616728f":"df_train['Parch'].unique()","eee21154":"df_train.groupby(['Parch', 'Survived'])['Survived'].count().unstack(1).plot.bar(grid=True)\nplt.title('The number of people by Parch divided into Survived')\nplt.yscale('log')\nplt.show()","a58b4f85":"df_train[['SibSp', 'Parch']].corr(method='spearman')\n# pearson : standard correlation coefficient\n# kendall : Kendall Tau correlation coefficient\n# spearman : Spearman rank correlation","2475b900":"df_train['Ticket'].head()","3d522c58":"df_train['Ticket'].apply(lambda x: x.split(' ')[0]).nunique()","bac23e19":"df_train['Ticket'].apply(lambda x: len(x.split(' '))).unique()","630b278b":"df_train['Ticket_segment'] = df_train['Ticket'].apply(lambda x: len(x.split(' ')))","e1dd456d":"df_train.groupby(['Ticket_segment', 'Survived'])['Survived'].count().unstack(1).plot.bar(grid=True)\nplt.title('The number of people by Ticket_segment divided into Survived')\nplt.show()","72c4e371":"df_train['Fare'].describe()","f76e05db":"df_train['Fare'].plot.hist(grid=True)\nplt.title('The number of people by Fare')\nplt.yscale('log')\nplt.show()","d1abf574":"plt.hist(\n    [\n        df_train['Fare'][df_train['Pclass']==1], \n        df_train['Fare'][df_train['Pclass']==2], \n        df_train['Fare'][df_train['Pclass']==3]\n    ],\n    bins=15, stacked=True)\nplt.legend(['Pclass 1', 'Pclass 2', 'Pclass 3'])\nplt.title('The number of people by Fare divided into Pclass')\nplt.grid()\nplt.show()","3c529880":"df_train['Fare'][df_train['Pclass']==1].describe()","20559651":"df_train['Fare'][df_train['Pclass']==2].describe()","45556bbe":"df_train['Fare'][df_train['Pclass']==3].describe()","8210ac84":"plt.hist([df_train['Fare'][df_train['Survived']==0], df_train['Fare'][df_train['Survived']==1]], \n         bins=15, stacked=True, color = ['#1f77b4', '#ff7f0e'])\nplt.legend(['Survived 0', 'Survived 1'])\nplt.title('The number of people by Fare divided into survival')\nplt.grid()\nplt.show()","2f131f78":"df_train['Cabin'].head()","c813ab75":"df_train['Cabin'].isna().sum()","70953763":"df_train['Cabin'][~df_train['Cabin'].isna()].apply(lambda x: x[0]).unique()","eafb8070":"unique_cabin_char = df_train['Cabin'][~df_train['Cabin'].isna()].apply(lambda x: x[0]).unique().tolist()\n\nfor cabin_char in unique_cabin_char:\n    df_train[cabin_char] = df_train['Cabin'].apply(lambda x: True if (isinstance(x, str) and x[0] == cabin_char) else False)","4bd7570a":"df_train[unique_cabin_char].sum()","da720049":"df_train.groupby(['Survived']+unique_cabin_char)['Survived'].count().unstack(0)","11c1278f":"ax = df_train.groupby(['Survived']+unique_cabin_char)['Survived'].count().unstack(0).plot.bar(grid=True)\nax.set_xticklabels((['NaN']+unique_cabin_char[::-1]))\nplt.title('The number of people by Cabin first character divided into survival')\nplt.legend(['Survived 0', 'Survived 1'])\nplt.yscale('log')\nplt.show()","ea000e2c":"update_unique_cabin_char = {'AB':['A', 'B'], 'CD': ['C', 'D'], 'EFG': ['E', 'F', 'G']}\ndf_train.drop(unique_cabin_char, axis='columns', inplace=True)\n\nfor keys, update_cabin_char in update_unique_cabin_char.items():\n    df_train[f'Cabin_{keys}'] = df_train['Cabin'].apply(lambda x: True if (isinstance(x, str) and (x[0] in update_cabin_char)) else False)","35e6251a":"update_unique_cabin_char = [f'Cabin_{x}' for x in list(update_unique_cabin_char.keys())]","2b568bb6":"ax = df_train.groupby(['Survived']+update_unique_cabin_char)['Survived'].count().unstack(0).plot.bar(grid=True)\nax.set_xticklabels((['NaN']+update_unique_cabin_char[::-1]))\nplt.title('The number of people by Cabin first character divided into survival')\nplt.yscale('log')\nplt.show()","da690371":"df_train['Embarked'].unique()","6516e3fe":"df_train['Embarked'].isna().sum()","cac213c9":"df_train.groupby(['Embarked'])['Survived'].mean()","209abc34":"df_train.groupby(['Embarked', 'Survived'])['Survived'].count().unstack(1).plot.bar(grid=True)\nplt.title('The number of people by Embarked divided into survival')\nplt.show()","dbd4a294":"df_train.groupby(['Embarked', 'Survived', 'Pclass'])['Survived'].count().unstack(1).plot.bar(grid=True)\nplt.title('The number of people by Embarked divided into survival and Pclass')\nplt.yscale('log')\nplt.show()","9b70741a":"df_train.groupby(['Embarked', 'Survived', 'Pclass', 'Sex'])['Survived'].count().unstack(1).plot.bar(grid=True)\nplt.title('The number of people by Embarked divided into survival, Pclass and Sex')\n# plt.yscale('log')\nplt.show()","3ecbff90":"Depands on class most passangers survived from class 1 (`62%`).","0be70949":"I will keep only this information (ticket's segments).","45e026c4":"Distribuation of `Age` in each class showing than higher class has older passengers.","e18f735c":"## Ticket","96c3b5c2":"## Name","64a0fb8d":"## Cabin","f6b2c3bf":"Woman has higher chance for survive.\n\nMost of womane from class 1 `97%` and 2`92%` survived. Woman in class 3 have `50%` chance for survive.\n\nMan has lower change for survive. Class 1 - `36%`, class 2 - `16%` and class 3 - 1`4%`.","92326de3":"Situaltion very simillar to the `SibSp` column.\nPeople with smaller families survived more often.","63398706":"Y scale is `log`!\n\nThe categories created are more numerous. \nAll categories have more people that surived (it could be missunderstood).","1701c8b7":"# overview over columns\n## Pclass","400b281c":"There is a lot of persons with single title occurs.\nI decided to join them into one column `others`.","8c57cdad":"There are only 2 `NaN` values. \nTODO: we need to deal with this (most popular valuefrom train set?)","db768b9c":"The fewest people boarded in the Queenstown port.\n\nMost people boarded in the Southampton port. Most of them are belong to the 3 class","af09e50d":"Y scale is `log`.\n\n`T` is unique value. There is no evidance that more people lived there so I decided to remove this from a separate value.\n\nRest of cabines are very limited. I decided to connect `A` and `B`, `C` and `D`, `E` and `F` and `G`","18845884":"Title `Mr.` was most deadly (16% allive). `Miss.` and `Mrs` was most freqent titles in survivels.","8098df76":"## Sex","58f89e3d":"Most of newborns survived. They belong to the `Pclass` 2 and 3. In `Pclass` 1 there was a very few newborns.","59ac0092":"There is a lot of empty values.","a3bcb837":"In general if people have larger family then chance for survive is lower.","28898d4e":"Most of passangers from `Pclass` 3 belong to the first bin. This is the reason very large bin.","a3304bcb":"Train set has 891 records.\nTest set has 418 records.","692ad8d0":"## Parch\nparents \/ children aboard the Titanic","35e0454b":"## Age","97cb7197":"Y scale is `log`!","6fd231f4":"## Fare","64e75931":"Y scale is `log`!","d954d34e":"People with smaller families survived more often.","9441cd31":"Some information about titanic cabins (https:\/\/www.encyclopedia-titanica.org\/cabins.html)","ccaf5099":"Y scale is `log`!","34819f98":" Title list.\n I checked it manually. I created list with all titles in our training data set.","c5ba814f":"## SibSp\nsiblings\/ spouses aboard the Titanic","c18a1dfb":"Most of people on a Titanic was young. Mean is 30 years old. Median is 28.","46064c67":"## Embarked","9b30de72":"Created new features. They contain information about person title. I separated 5 groups: `Mr.`, `Mrs.`, `Miss.`, `Master.` and `others`. Last group others contain all people with diffrent title.","71b8f3a2":"Y scale is log!","0a5f7639":"Y scale is `log`!"}}