{"cell_type":{"aac712f0":"code","5e93c226":"code","4cbca42c":"code","bfa4d4e8":"code","80f863f4":"code","7c530a1e":"code","c067b3fb":"code","37ef5ef8":"code","99a92c3f":"code","22136e0d":"code","5f39980a":"code","071a8d58":"code","cbcdb381":"code","f412cd5e":"code","78288e1e":"code","2a32dbb0":"code","7ae1894d":"code","f537109b":"code","99807c55":"code","e02c8476":"code","19bdada9":"code","4b63a287":"code","cf16eb24":"code","eed8ecd6":"code","a28c3640":"code","47a73e35":"markdown","74018014":"markdown","1fab3e41":"markdown","5f6561c7":"markdown","6db777d7":"markdown","693aa17f":"markdown","7a77f67d":"markdown","e28f734e":"markdown","ea7cd7a1":"markdown","cbcc928e":"markdown","06710759":"markdown","65f1111b":"markdown","03772fd1":"markdown","fef34384":"markdown","f4212680":"markdown","6cbb08fe":"markdown","0fd1f222":"markdown","46367f5e":"markdown","d08be31d":"markdown"},"source":{"aac712f0":"# # Install libraries\/pacakges\n!conda install seaborn scikit-learn statsmodels numba pytables -y\n!conda install -c conda-forge python-igraph leidenalg -y\n!pip install quanp\n!pip install MulticoreTSNE","5e93c226":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as pl\nimport quanp as qp\n\nfrom IPython.display import display\nfrom matplotlib import rcParams\n\n# setting visualization\/logging parameters\npd.set_option('display.max_columns', None)\nqp.set_figure_params(dpi=100, color_map = 'viridis_r')\nqp.settings.verbosity = 1\nqp.logging.print_versions()","4cbca42c":"# Loading pandas dataframe as anndata \ntrain_features = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv', index_col=0)\n\n# Get lists of genes and cell viabilities, respectively\ntrain_genes = [s for s in train_features.columns if \"g-\" in s]\ntrain_cellvia = [s for s in train_features.columns if \"c-\" in s]","bfa4d4e8":"# Loading pandas dataframe as anndata \nadata_genes = qp.AnnData(train_features[train_genes])\nadata_cellvia = qp.AnnData(train_features[train_cellvia])\n\n# add a new `.obs` column for additional categorical features\nadata_genes.obs['cp_type'] = train_features['cp_type']\nadata_genes.obs['cp_time'] = train_features['cp_time']\nadata_genes.obs['cp_dose'] = train_features['cp_dose']\nadata_cellvia.obs['cp_type'] = train_features['cp_type']\nadata_cellvia.obs['cp_time'] = train_features['cp_time']\nadata_cellvia.obs['cp_dose'] = train_features['cp_dose']","80f863f4":"train_features[train_genes].describe()","7c530a1e":"rcParams['figure.figsize'] = 12, 8\nqp.tl.pca(adata_genes, svd_solver='auto');\nqp.pl.pca(adata_genes, \n          color=['cp_type', 'cp_time', 'cp_dose'], \n          size=50, \n          ncols=2);","c067b3fb":"qp.pl.pca_variance_ratio(adata_genes, n_pcs=20)","37ef5ef8":"qp.pp.neighbors(adata_genes, n_neighbors=30, n_pcs=10); # 30 nearest neighbors and only consider the first 10 pcs\nqp.tl.leiden(adata_genes);","99a92c3f":"rcParams['figure.figsize'] = 12, 8\nqp.tl.tsne(adata_genes, n_pcs=10); # only consider the first 10 pcs\n\nqp.pl.tsne(adata_genes, color=['leiden', 'cp_type', 'cp_time', 'cp_dose'], \n           legend_loc='on data', ncols=2)","22136e0d":"rcParams['figure.figsize'] = 8,6\nqp.tl.paga(adata_genes)\nqp.pl.paga(adata_genes, plot=True)","5f39980a":"rcParams['figure.figsize'] = 10, 6\nqp.tl.umap(adata_genes, init_pos='paga')\nqp.pl.umap(adata_genes, color=['leiden', 'cp_type', 'cp_time', 'cp_dose'], \n           legend_loc='on data', ncols=2)","071a8d58":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning);\n\nrcParams['figure.figsize'] = 6,8;\nqp.tl.rank_features_groups(adata_genes, 'leiden', method='wilcoxon');\nqp.pl.rank_features_groups(adata_genes, n_features=30, sharey=False)","cbcdb381":"qp.tl.dendrogram(adata_genes, 'leiden', var_names=adata_genes.var_names);\nqp.pl.rank_features_groups_matrixplot(adata_genes, n_features=5, use_raw=False, \n                                      cmap='bwr'); # choose only top 5 features","f412cd5e":"rcParams['figure.figsize'] = 8,8;\nqp.pl.umap(adata_genes, color=['leiden', 'g-744', 'g-243', 'g-712', 'g-417', 'g-731', 'g-166', 'g-167', 'g-708', 'g-168', 'g-456'], \n           legend_loc='on data', ncols=3, cmap='bwr')","78288e1e":"rcParams['figure.figsize'] = 8,8\nqp.pl.rank_features_groups_heatmap(adata_genes, n_features=5, use_raw=False, \n                                   vmin=-5, vmax=5, cmap='bwr')","2a32dbb0":"train_features[train_cellvia].describe()","7ae1894d":"rcParams['figure.figsize'] = 8, 5\nqp.tl.pca(adata_cellvia, svd_solver='auto');\nqp.pl.pca(adata_cellvia, color=['cp_type', 'cp_time', 'cp_dose'], size=50);","f537109b":"qp.pl.pca_variance_ratio(adata_cellvia, n_pcs=20)","99807c55":"qp.pp.neighbors(adata_cellvia, n_neighbors=100, n_pcs=5); # only consider the first 5 pcs\nqp.tl.leiden(adata_cellvia, resolution=0.5);","e02c8476":"rcParams['figure.figsize'] = 12, 8\nqp.tl.tsne(adata_cellvia, n_pcs=5); # only consider the first 5 pcs\nqp.pl.tsne(adata_cellvia, color=['leiden', 'cp_type', 'cp_time', 'cp_dose'], \n           legend_loc='on data', ncols=2)","19bdada9":"rcParams['figure.figsize'] = 8,6\nqp.tl.paga(adata_cellvia)\nqp.pl.paga(adata_cellvia, plot=True)","4b63a287":"rcParams['figure.figsize'] = 10, 6\nqp.tl.umap(adata_cellvia, init_pos='paga')\nqp.pl.umap(adata_cellvia, color=['leiden', 'cp_type', 'cp_time', 'cp_dose'], \n           legend_loc='on data', ncols=2)","cf16eb24":"import warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nrcParams['figure.figsize'] = 6,8;\nqp.tl.rank_features_groups(adata_cellvia, 'leiden', method='wilcoxon');\nqp.pl.rank_features_groups(adata_cellvia, n_features=30, sharey=False)","eed8ecd6":"qp.tl.dendrogram(adata_cellvia, 'leiden', var_names=adata_cellvia.var_names);\nqp.pl.matrixplot(adata_cellvia, adata_cellvia.var_names, 'leiden', dendrogram=True, cmap='RdBu_r')","a28c3640":"rcParams['figure.figsize'] = 8,8;\nqp.pl.umap(adata_cellvia, color=['leiden', 'c-0', 'c-1', 'c-2', 'c-3', 'c-22'], \n           legend_loc='on data', ncols=3, cmap='bwr')","47a73e35":"# To be continued...\n","74018014":"# References:\n 1. https:\/\/www.kaggle.com\/isaienkov\/mechanisms-of-action-moa-prediction-eda (contributed by isaienkov)\n 2. https:\/\/www.kaggle.com\/headsortails\/explorations-of-action-moa-eda (contributed by headsortails)\n 3. Tabachnick & Fidell. Using Multivariate Statistics, Sixth Edition. PEARSON 2013; ISBN-13:9780205956227.\n 4. Traag et al., From Louvain to Leiden: guaranteeing well-connected communities. Sci Rep. 2019;9(1):5233.\n 4. McInnes & Healy, UMAP: Uniform Manifold Approximation and Projection for Dimension Reduction, arXiv. 2018.\n 3. https:\/\/quanp.readthedocs.io\/en\/latest\/","1fab3e41":"<a id=\"2\"><\/a>\n<h2 style='background:green; border:0; color:white'><center>2. Principle Component Analysis (Gene basis)<\/center><h2>\n\n#### To reduce the dimensionality of the data by running PCA, which reveals the main axes of variation and denoises the data.\n    \n#### Note: I didn't do any data transformation or scaling for the feature data. Usually, it works the best to subject the features to Log2(x+1) Transformation and Standardardization Scaling before proceeding to PCA analysis . From what the gene data distribution shown by isaienkov (https:\/\/www.kaggle.com\/isaienkov\/mechanisms-of-action-moa-prediction-eda), it reads that the organizer may have done that for us. In addition, based on the features descriptions below, there may be a winsorization or some kinds of normalization (like quantile normalization) applied before the Standardization Scaling or Log-transformation (i.e. max value can be detected at 10.0000 in many features).","5f6561c7":"### Embedding the neighborhood graph (UMAP)\nWe can also embed the neighborhood graph in 2 dimensions using UMAP (McInnes et al., 2018), see below. It is potentially more faithful to the global connectivity of the manifold than tSNE. Before running the UMAP, we compute the correlations between clusters as initiating positions for the UMAP.","6db777d7":"The figure above shows the matrixplot of all the 100 cell-viabilities for all the 8 clusters identified. There is gradual change of almost all cell viabilities along the UMAP dimensions, starting from Clusters 5, 1, 0, 2, 3, 4, 7, and lastly 6. Importantly, almost all of them are highly correlated with each other (multicollinearity) to only 1 factor! Let's plot a few of these cell viabilities on the UMAP mapping the leiden clustering below.","693aa17f":"<a id=\"1\"><\/a>\n<h2 style='background:green; border:0; color:white'><center>1. Package installations + import libraries + data loading<\/center><h2>\n\n### Packages\nIf you wish to replicate this work, you'll need to excecute the following cell to install the quanp package (https:\/\/quanp.readthedocs.io\/en\/latest\/installation.html) that should install all necessary packages\/libraries required to execute the codes in this tutorial. ","7a77f67d":"<a id=\"7\"><\/a>\n<h2 style='background:green; border:0; color:white'><center>7. Differential expressing viability defining each cluster (Cell viability basis)<\/center><h2>\n    \n### Visualizing the differential expressing viabilities\/features defining each cluster\nWe can identify viabilities\/features that are differentially expressed by each cluster or group. Here, we take each group of cells and compare the distribution of each viability\/feature in a group against the distribution in all other cells not in the group. Here, we list the top 30 viabilities\/features defining each cluster (P-value <0.05 as long as the score > +\/-1.96).\n","e28f734e":"\n<a id=\"4\"><\/a>\n<h2 style='background:green; border:0; color:white'><center>4. Differential expressing genes defining each cluster (Gene basis)<\/center><h2>\n    \n### Visualizing the differential expressing genes\/features defining each cluster\nWe can identify genes\/features that are differentially expressed by each cluster or group. Here, we take each group of cells and compare the distribution of each gene\/feature in a group against the distribution in all other cells not in the group. Here, we list the top 30 genes\/features defining each cluster (P-value <0.05 as long as the score > 1.96). \n    \nFact to know: A biologist typically uses these differentially expressed genes (either significantly up-regulated or down-regulated) to define the celltypes\/tissues in biology. \n","ea7cd7a1":"From the matrixplot above, for example, we can see the top 5 significant differential expressing genes for the Cluster 11 were 'g-744', 'g-243', 'g-712', 'g-417', and 'g-731', while Cluster 13 were 'g-166', 'g-167', 'g-708', 'g-168', and 'g-456'; Now we can visualize the marker genes on the UMAP dimensions, as follow.","cbcc928e":"### Computing the T-distributed Stochastic Neighbor Embedding (tSNE)\nLet us further reduce the dimensionality of the signficant PCs identified above wholly in to 2 dimensions using the tSNE. Here, the 'leiden' clusters ,  'cp_type', 'cp_time', 'cp_dose' were mapped onto the tSNE. There were 8 leiden clusters obtained. You can imagine that these clusters were different celltypes from the same tissue or different tissues.","06710759":"### Computing the T-distributed Stochastic Neighbor Embedding (tSNE)\nLet us further reduce the dimensionality of the signficant PCs identified above wholly in to 2 dimensions using the tSNE. Here, the 'leiden' clusters ,  'cp_type', 'cp_time', 'cp_dose' were mapped onto the tSNE. There were 17 (0-16) leiden clusters obtained. You can imagine that these clusters were different celltypes from the same tissue or different tissues.","65f1111b":"<a id=\"3\"><\/a>\n<h2 style='background:green; border:0; color:white'><center>3. Leiden clustering on tsne\/umap dimensional reductions (Gene basis)<\/center><h2>\n\n#### We use Leiden graph-clustering method (community detection based on optimizing modularity) by Traag et al. (2018) to cluster the neighborhood graph of companies. We are going to first compute the neighborhood graph for this. We  compute the neighborhood graph of cells using the PCA representation of the data matrix. This will give rise to distances and connectivities in each company. Here, we consider 30 nearest neighbors with 10 PCs derived from the PCA. Afterward, we wil compute the leiden clustering.","03772fd1":"<a id=\"5\"><\/a>\n<h2 style='background:green; border:0; color:white'><center>5. Principle Component Analysis (Cell viability basis)<\/center><h2>\n\n#### To reduce the dimensionality of the data by running PCA, which reveals the main axes of variation and denoises the data.\n    \n#### Note: I didn't do any data transformation or scaling for the feature data. Usually, it works the best to subject the features to Log2(x+1) Transformation and Standardardization Scaling before proceeding to PCA analysis. From what the gene data distribution shown by isaienkov (https:\/\/www.kaggle.com\/isaienkov\/mechanisms-of-action-moa-prediction-eda), it reads that the organizer may have done that for us. In addition, based on the features descriptions below, there may be a winsorization applied before the Standardization Scaling or Log-transformation (i.e. max value can be detected at 10.0000 in many features).","fef34384":"<a id=\"6\"><\/a>\n<h2 style='background:green; border:0; color:white'><center>6. Leiden clustering on tsne\/umap dimensional reductions (Cell viability basis)<\/center><h2>\n\n#### We use Leiden graph-clustering method (community detection based on optimizing modularity) by Traag et al. (2018) to cluster the neighborhood graph of companies. We are going to first compute the neighborhood graph for this. We  compute the neighborhood graph of cells using the PCA representation of the data matrix. This will give rise to distances and connectivities in each company. Here, we consider 100 nearest neighbors with 5 PCs derived from the PCA. Afterward, we wil compute the leiden clustering.","f4212680":"<h1><center>Mechanisms of Action (MoA) - EDA - a perspective from a computational biologist<\/center><\/h1>\n<h2><center>2020-09-13<\/center><\/h2>\n\n\nThis notebook do not intend to replicate previous EDA done by other contributors. I assume the readers would have read through previous general EDAs that i find really useful before diving deeper into this domain-specific EDA:-\n 1. https:\/\/www.kaggle.com\/isaienkov\/mechanisms-of-action-moa-prediction-eda (contributed by isaienkov)\n 2. https:\/\/www.kaggle.com\/headsortails\/explorations-of-action-moa-eda (contributed by headsortails)\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h2 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:green; border:0; color:white' role=\"tab\" aria-controls=\"home\"><center>Quick navigation<\/center><\/h2>\n\n* [1. Package installations + import libraries + data loading](#1)\n* [2. Principle Component Analysis (Genes basis)](#2)\n* [3. Leiden clustering on tsne\/umap dimensional reductions (Gene basis)](#3)\n* [4. Differential expressing genes defining each cluster (Gene basis)](#4)\n* [5. Principle Component Analysis (Cell viability basis)](#5)\n* [6. Leiden clustering on tsne\/umap dimensional reductions (Cell viability basis)](#6)\n* [7. Differential expressing viabilities defining each cluster (Cell viability basis)](#7)\n    \n##### Although you can navigate to the topic of interest, it is recommended to first read from top-down before navigating around.","6cbb08fe":"Here, similar to the gene basis PCA, it seems that the PC1 from the cell viability basis is also useful to separate treatment (trt) and control (ctl) groups; while PC1+PC2 can potentially use to separate the treatment times (32, 48, and 72 hrs).\n\nLet us inspect the contribution of single PCs to the total variance in the data. This gives us information about how many PCs we should consider in order to compute the neighborhood relations or further dimension reductions of cells, e.g. used in the clustering function qp.tl.leiden() or tSNE qp.tl.tsne(). In our experience, often, a rough estimate of the number of PCs does fine. The 'elbow' point seems to suggest that only PC1 will be useful to characterize the cells. However, we are going to do further dimensional reduction based on the first 5 PCs later. ","0fd1f222":"### Visualize marker genes using heatmap\n#### Here, the columns represent genes\/features; the rows represent cells\/subjects in clusters.","46367f5e":"### Uniform Manifold Approximation and Projection (UMAP) - Embedding the neighborhood graph\nWe can also embed the neighborhood graph in 2 dimensions using UMAP (McInnes et al., 2018), see below. It is potentially more faithful to the global connectivity of the manifold than tSNE. Before running the UMAP, we compute the correlations between clusters as initiating positions for the UMAP.","d08be31d":"Here, it seems that the PC1 is useful to separate treatment (trt) and control (ctl) groups; while PC1+PC2 can potentially use to separate the treatment times (32, 48, and 72 hrs).\n\nLet us inspect the contribution of single PCs to the total variance in the data. This gives us information about how many PCs we should consider in order to compute the neighborhood relations or further dimension reductions of cells, e.g. used in the clustering function qp.tl.leiden() or tSNE qp.tl.tsne(). In our experience, often, a rough estimate of the number of PCs does fine. The 'elbow' point seems to suggest at least up to PC3 will be useful to characterize the cells\/subjects. However, we are going to do further dimensional reduction based on the first 10 PCs later. "}}