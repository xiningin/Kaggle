{"cell_type":{"b706eae7":"code","a4f99709":"code","e8accbf6":"code","a32d3fc4":"code","614445a5":"code","2f7af737":"code","92d5bc1d":"code","39562c33":"code","91e434ee":"code","eef8e0ee":"markdown","a03ab8db":"markdown","c0cca2b7":"markdown","b6833d8e":"markdown","1abd84a1":"markdown"},"source":{"b706eae7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport sys\nprint(sys.version)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a4f99709":"import matplotlib.pyplot as plt\nimport numpy as np","e8accbf6":"#Colors for Chess Board\n\nred = (1, 0.2, 0)\nblue = (0, 1, 1)\nblack = (1, 1, 1)\nwhite = (0, 0, 0)","a32d3fc4":"class ChessBoard:\n    \n    def __init__(self, num):\n        self.grid = np.ones((num,num,3))\n        self.red_queen = []\n        self.blue_queen = []\n        \n        self.grid[::2, ::2] = white\n        self.grid[1::2, 1::2] = white\n        \n    def add_red(self, row, column):\n        self.grid[row, column] =red\n        red_queen = [row, column]\n        return red_queen\n    \n    def add_blue(self, row, column):\n        self.grid[row, column] = blue\n        blue_queen = [row, column]\n        return blue_queen\n    \n    def is_under_attack(self, red_queen, blue_queen):\n        \n        #horizontal\n        if red_queen[0] == blue_queen[0]:\n            return True\n        \n        #vertical\n        if red_queen[1] == blue_queen[1]:\n            return True\n        \n        #diagonal\n        if abs((red_queen[1] - blue_queen[1]) \/ (red_queen[0] - blue_queen[0])) == 1:\n            return True\n        \n        else:\n            return False\n    \n    def render(self):\n        plt.imshow(self.grid)","614445a5":"game = ChessBoard(8)\ngame.add_red(2,1)\ngame.add_blue(5,6)\ngame.render()","2f7af737":"# Horizontal Testing\n\ngame = ChessBoard(8)\nred_queen = game.add_red(4,1)\nblue_queen = game.add_blue(4,6)\nactual = game.is_under_attack(red_queen, blue_queen)\ngame.render()\nexpected = True\nassert actual == expected","92d5bc1d":"# Vertical Testing\n\ngame = ChessBoard(8)\nred_queen = game.add_red(1,1)\nblue_queen = game.add_blue(4,1)\nactual = game.is_under_attack(red_queen, blue_queen)\ngame.render()\nexpected = True\nassert actual == expected","39562c33":"# Diagonal Testing\n\ngame = ChessBoard(8)\nred_queen = game.add_red(2,1)\nblue_queen = game.add_blue(6,5)\nactual = game.is_under_attack(red_queen, blue_queen)\ngame.render()\nexpected = True\nassert actual == expected","91e434ee":"# Not Under Attack Testing\n\ngame = ChessBoard(8)\nred_queen = game.add_red(2,1)\nblue_queen = game.add_blue(7,5)\nactual = game.is_under_attack(red_queen, blue_queen)\ngame.render()\nexpected = False\nassert actual == expected","eef8e0ee":"Problem Domain:\n* Render out a chess board with red and blue queens. \n* Chess board is an 8 by 8 grid of alternating black and white squares.\n* Identify if the queens are \u201cunder attack\u201d based on their coordinates.\n","a03ab8db":"Tests:\n\n* [x] Horizontal (aka same row).\n* [x] Vertical (aka same column).\n* [x] Four Diagonals.\n* [x] A \u201cNot Under Attack\u201d scenario.","c0cca2b7":"**TESTING**\n","b6833d8e":"Feature Tasks:\n* [x] Define a ChessBoard class\n* [x] should contain an 8x8 grid\n* [x] Each cell in grid should have a color represented in RGB format.\n* [x] black = (0,0,0)\n* [x] white = (1,1,1)\n* [x] blue = (0,1,1)\n* [x] red = (1,.2,0)\n* [x] should have add_red method that accepts a row and column as input which colors corresponding cell.\n* [x] should have add_blue method that accepts a row and column as input which colors corresponding cell.\n* [x] should have render method that displays the chess board on screen with red and blue shown in correct locations\n* [x] should have is_under_attack method that return boolean if red is under attack by a blue piece horizontally, vertically or diagonally","1abd84a1":"**Author**: Brandon Mizutani\n\n**Version**: 1.3.0 (Kaggle URL: [Kaggle URL](https:\/\/www.kaggle.com\/brandonmizutani\/chess-board)\n<!-- (increment the patch\/fix version number if you make more commits past your first submission) -->\n\n## Overview\n<!-- Provide a high level overview of what this application is and why you are building it, beyond the fact that it's an assignment for this class. (i.e. What's your problem domain?) -->\n\nCreate a Kaggle notebook that render out chess boards with red and blue queens on them. Identify if the queens are \u201cunder attack\u201d based on their coordinates.\n\n## Getting Started\n<!-- What are the steps that a user must take in order to build this app on their own machine and get it running? -->\n\n### Lab 11\n\nCreate a Kaggle notebook that render out chess boards with red and blue queens on them.\n\n* create color variables that have tuple values.\n* create a class named ChessBoard that:\n     * contain an 8x8 grid\n     * an add_red method that accepts a row and column as input which colors corresponding cell\n     * an add_blue method that accepts a row and column as input which colors corresponding cell\n     * a render method that displays the chess board on screen with red and blue shown in correct locations\n     * an is_under_attack method that return boolean if red is under attack by a blue piece horizontally, vertically or diagonally\n* Render your board for each is_under_attack scenario:\n    * Horizontal (aka same row).\n    * Vertical (aka same column).\n    * Four Diagonals.\n    * A \u201cNot Under Attack\u201d scenario.\n---\n\n## Architecture\n<!-- Provide a detailed description of the application design. What technologies (languages, libraries, etc) you're using, and any other relevant design information. -->\nPython, Kaggle, NumPy method\n\n## Change Log\n\n<!-- Use this area to document the iterative changes made to your application as each feature is successfully implemented. Use time stamps. Here's an example:\n\n01-01-2001 4:59pm - Application now has a fully-functional express server, with a GET route for the location resource. -->\n\n01-15-2022 2:04pm - Notebook complete with testing for horizontal, vertical, and diagonal.\n\n\n## Credit and Collaborations\n<!-- Give credit (and a link) to other people or resources that helped you build this application. -->\n\nEddie Ponce\n\nAlex Payne\n\nRoger Huba\n\n### Resource Links\n\n[Source](https:\/\/vegibit.com\/python-abs-function\/)\n\n[Source](https:\/\/snakify.org\/en\/lessons\/two_dimensional_lists_arrays\/problems\/chessboard\/)\n\n[Source](https:\/\/stackoverflow.com\/questions\/64169278\/best-way-to-check-if-two-elements-of-an-array-of-array-are-in-diagonal)\n\n[Source](https:\/\/www.dataquest.io\/blog\/numpy-tutorial-python\/)\n"}}