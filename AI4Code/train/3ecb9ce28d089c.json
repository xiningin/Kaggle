{"cell_type":{"b411d03b":"code","3bf6dd2e":"code","81ea044b":"code","0a6fa3e5":"code","7c0e2173":"code","18d86e7d":"code","b700b582":"code","7046e8d9":"code","f6ddd6fc":"code","e3d658a1":"code","858fab98":"code","711a699e":"code","0641df73":"code","02ff7338":"code","da8e8165":"code","df5d7983":"code","e5ab1f4a":"code","5d20e51f":"code","825a52df":"code","898501c7":"code","ec07f6e6":"code","8e716452":"code","fcef8688":"code","62e1af3d":"code","3b2e7102":"code","4846ef23":"code","a7e34ce7":"code","3bf9f073":"code","35250b73":"code","cc5f9309":"code","e00e48ac":"code","c9ec56c8":"code","d9aa6491":"code","2bc7e4ae":"code","e071c7aa":"code","fb7a39ad":"code","ff488630":"code","690e2959":"code","ddf41196":"code","93193b37":"code","f2e58542":"code","ad58c4f1":"code","63992c77":"code","d40262c3":"markdown","f280efb4":"markdown","b39755c8":"markdown","8fd0c14b":"markdown","6421b121":"markdown","83e9c049":"markdown","8f50aca0":"markdown","73195911":"markdown","67bb1e80":"markdown","2e43558e":"markdown","13ce3c48":"markdown","1eedaf5e":"markdown","c8bc891b":"markdown","ba8afbaf":"markdown","e6193257":"markdown","e23740af":"markdown","7be8ca27":"markdown","1e5004aa":"markdown","576b19fd":"markdown","8f4ca3aa":"markdown","a0353510":"markdown","7622dd77":"markdown","4ef8973c":"markdown","1521d80d":"markdown","5d90f95b":"markdown","380a78e1":"markdown","dd9b7056":"markdown","b96592ed":"markdown","7a82eca3":"markdown","912b8746":"markdown","5b2fca21":"markdown","aa0b3edb":"markdown","1eff691e":"markdown","853ce848":"markdown","718cec7f":"markdown","ebf1dd0f":"markdown","b07fbb41":"markdown","478ae27a":"markdown","ec918f55":"markdown","30b12c98":"markdown","e0063243":"markdown","f9113503":"markdown","26521772":"markdown","dfbdc084":"markdown","be1761dd":"markdown","d06e5766":"markdown","1108c786":"markdown","47b751ec":"markdown","5d670ec0":"markdown","d6faf4cc":"markdown","fca6432a":"markdown","b147e485":"markdown","1bed3c69":"markdown","428291f8":"markdown","3d229b02":"markdown","2cc000ee":"markdown","2e704753":"markdown","df833bd5":"markdown","76c9f7ca":"markdown","11523ed1":"markdown","afc5cffc":"markdown","8adab719":"markdown","ed3d94c3":"markdown","95832cbf":"markdown","2e174290":"markdown","68da44d9":"markdown","05383aab":"markdown","7641fa85":"markdown","77fa733e":"markdown","1ef20541":"markdown","06809ed9":"markdown","ee979bae":"markdown","5fe57ff3":"markdown","a41458db":"markdown","7e0848cb":"markdown","e35a449f":"markdown","09c7aa78":"markdown","c9b42f0b":"markdown","4ae7201f":"markdown","c777b354":"markdown","7b37b1b2":"markdown","dafc8efd":"markdown","1f6c8a64":"markdown","b06a71ea":"markdown","a746484e":"markdown","06676cb6":"markdown","cd958eee":"markdown","fa3a4e07":"markdown","6fa5bb5b":"markdown","d03bc503":"markdown","e656f926":"markdown"},"source":{"b411d03b":"#Importaci\u00f3n de librer\u00edas\n\nimport pandas as pd # procesamiento de datos, archivos CSV Inputs\/Outputs (ejemplo: pd.read_csv)\nimport sqlite3 #SQLite\n\n# Los datos de entrada est\u00e1n disponibles en el directorio \"..\/input\/\".\n\npath = \"..\/input\/\"  #ruta\ndatabase = path + 'database.sqlite'\nprint (\"Importaci\u00f3n exitosa\")\n\n# Creamos la conexi\u00f3n con la BD y listaremos las tablas con las que contamos\n\nconn = sqlite3.connect(database)\nprint (\"Conexi\u00f3n exitosa\")\n\n# Por ejemplo, ejecutando esto (haciendo clic en ejecutar o Shift+Enter) se listar\u00e1n los archivos en directorio de entrada\n\ntables = pd.read_sql(\"\"\"SELECT *\n                        FROM sqlite_master\n                        WHERE type='table';\"\"\", conn)\ntables","3bf6dd2e":"query = \"\"\"SELECT * \n            FROM Country;\"\"\"\n\ncountries = pd.read_sql(query, conn)\ncountries\n","81ea044b":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nleagues = pd.read_sql(query, conn)\nleagues","0a6fa3e5":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nplayers = pd.read_sql(query, conn) \nplayers","7c0e2173":"query = \"\"\"SELECT DISTINCT season\n        FROM Match;\"\"\"\nseasons = pd.read_sql(query, conn)\nseasons","18d86e7d":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nattack_rates = pd.read_sql(query, conn) \nattack_rates","b700b582":"query = \"\"\"SELECT id, player_name, birthday, height, weight \n        FROM Player\n        LIMIT 15;\"\"\"\nplayers = pd.read_sql(query, conn)\nplayers  ","7046e8d9":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nteams = pd.read_sql(query, conn)\nteams","f6ddd6fc":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \"\"\"SELECT COUNT(DISTINCT name)\n           FROM Country;\"\"\"\n\n#No modificar lo siguiente:\ncount_countries = pd.read_sql(query, conn)\ncount_countries","e3d658a1":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\ncountdis_stages = pd.read_sql(query, conn)\ncountdis_stages","858fab98":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nsum_awayteam = pd.read_sql(query, conn)\nsum_awayteam","711a699e":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\navg_teamgoals = pd.read_sql(query, conn)\navg_teamgoals","0641df73":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nmax_teamgoals = pd.read_sql(query, conn)\nmax_teamgoals","02ff7338":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\navg_sum_goals = pd.read_sql(query, conn)\navg_sum_goals","da8e8165":"query = \"\"\"SELECT id, player_name, birthday, height, weight \n        FROM Player\n        WHERE weight = 165\n        LIMIT 15;\"\"\"\n\nplayers_weight = pd.read_sql(query, conn)\nplayers_weight  ","df5d7983":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\naway_team_goals = pd.read_sql(query, conn)\naway_team_goals","e5ab1f4a":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nteam_att_and = pd.read_sql(query, conn)\nteam_att_and","5d20e51f":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nteam_att_or = pd.read_sql(query, conn)\nteam_att_or","825a52df":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\ncountries_not = pd.read_sql(query, conn)\ncountries_not","898501c7":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\ncountries_equal = pd.read_sql(query, conn)\ncountries_equal","ec07f6e6":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\ncountries_dif = pd.read_sql(query, conn)\ncountries_dif","8e716452":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nplayers_weight = pd.read_sql(query, conn)\nplayers_weight","fcef8688":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nplayers_messi = pd.read_sql(query, conn)\nplayers_messi","62e1af3d":"query = \"\"\"SELECT id, team_long_name AS team_name\n        FROM Team\n        ORDER BY team_long_name ASC\n        LIMIT 25;\"\"\"\nteams_orderby = pd.read_sql(query, conn)\nteams_orderby","3b2e7102":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nteams_orderdesc = pd.read_sql(query, conn)\nteams_orderdesc","4846ef23":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nplayer_weightasc = pd.read_sql(query, conn)\nplayer_weightasc","a7e34ce7":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nplayer_heightdesc = pd.read_sql(query, conn)\nplayer_heightdesc","3bf9f073":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nplayer_heigh_name = pd.read_sql(query, conn)\nplayer_heigh_name","35250b73":"query = \"\"\"SELECT buildUpPlaySpeedClass, COUNT(id)\n        FROM Team_Attributes\n        GROUP BY buildUpPlaySpeedClass;\"\"\"\nteams_speed = pd.read_sql(query, conn)\nteams_speed","cc5f9309":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nteams_defence = pd.read_sql(query, conn)\nteams_defence","e00e48ac":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\nstages_by_season = pd.read_sql(query, conn)\nstages_by_season","c9ec56c8":"query = \"\"\"SELECT *\n        FROM League\n        JOIN Country ON Country.id = League.country_id;\"\"\"\n\ncountry_leagues = pd.read_sql(query, conn)\ncountry_leagues","d9aa6491":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\n\nquery = \n\n#No modificar lo siguiente:\ncountry_matches = pd.read_sql(query, conn)\ncountry_matches","2bc7e4ae":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\nquery = \n\n#No modificar lo siguiente:\ndetailed_matches = pd.read_sql(query, conn)\ndetailed_matches\n","e071c7aa":"query = \"\"\"SELECT season,\n            Country.name AS Country,\n            League.name AS League,\n            ROUND(AVG(home_team_goal),2) AS avg_local_goals,\n            ROUND(AVG(away_team_goal),2) AS avg_visitor_goals,\n            SUM(home_team_goal+away_team_goal) AS total_goals\n        FROM Match\n        JOIN Country ON Country.id = Match.country_id\n        JOIN League ON League.id = Match.league_id\n        WHERE Country.name IN ('Spain', 'France', 'England')\n        GROUP BY season, League\n        HAVING avg_local_goals BETWEEN 1.4 AND 1.6\n        ORDER BY season DESC;\"\"\"\n\ngoals_by_season = pd.read_sql(query, conn)\ngoals_by_season","fb7a39ad":"query = \n\nleages_by_season = pd.read_sql(query, conn)\nleages_by_season\n","ff488630":"#Ingrese la la consulta SQL entre un par de 3 comillas dobles: \"\"\"consulta SQL\"\"\" despu\u00e9s de la palabra query =\nquery = \n\n#No modificar lo siguiente:\nteams_by_season = pd.read_sql(query, conn)\nteams_by_season","690e2959":"query = \n\nratingCristiano = pd.read_sql(query, conn)\nratingCristiano\n","ddf41196":"query= \"\"\"SELECT DATE(Match.date) as MatchDate,\n                Home.team_long_name AS  HomeTeam,\n                home_team_goal AS Home_goals,\n                Visitor.team_long_name AS VisitorTeam,\n                away_team_goal Visitor_goals,\n                CASE \n                    WHEN Home.team_api_id = 8634 AND home_team_goal < away_team_goal THEN 'Barca lost'\n                    WHEN Home.team_api_id = 8634 AND home_team_goal > away_team_goal THEN 'Barca won'\n                    WHEN Visitor.team_api_id = 8634 AND home_team_goal < away_team_goal THEN 'Barca won'\n                    WHEN Visitor.team_api_id = 8634 AND home_team_goal > away_team_goal THEN 'Barca lost :(' \n                    ELSE 'Tie' \n                END AS Outcome\n        FROM Match \n        LEFT JOIN Team AS Home on Home.team_api_id = Match.home_team_api_id\n        LEFT JOIN Team AS Visitor on Visitor.team_api_id = Match.away_team_api_id\n        WHERE (Visitor.team_api_id = 8634 OR Home.team_api_id = 8634) AND season = \"2012\/2013\"\n        Order by MatchDate DESC\n        LIMIT 15;\"\"\"\n\nBarca_results = pd.read_sql(query, conn)\nBarca_results","93193b37":"query= \n\nBarcaMadrid_results = pd.read_sql(query, conn)\nBarcaMadrid_results","f2e58542":"query = \"\"\"SELECT CASE\n                   WHEN player_name = 'Cristiano Ronaldo' THEN 'Cristiano Ronaldo'\n                   WHEN player_name = 'Lionel Messi' THEN 'Lionel Messi'\n                   ELSE 'Others'\n                   END AS Player, \n           PA_Grouped.avg_overall_rating AS avg_overall_rating,\n           PA_Grouped.avg_potential AS avg_potential\n           FROM Player\n           LEFT JOIN \n                    (SELECT Player_Attributes.player_api_id, \n                         ROUND(avg(Player_Attributes.overall_rating),2) AS avg_overall_rating,\n                         ROUND(avg(Player_Attributes.potential),2) AS avg_potential  \n                     FROM Player_Attributes\n                     GROUP BY Player_Attributes.player_api_id) \n                    AS PA_Grouped \n           ON Player.player_api_id = PA_Grouped.player_api_id\n           GROUP BY Player\n           ORDER BY Player;\"\"\"\n\nplayers_rating = pd.read_sql(query, conn)\nplayers_rating","ad58c4f1":"query= \n\nsubquery = pd.read_sql(query, conn)\nsubquery","63992c77":"query= \n\nsubquery = pd.read_sql(query, conn)\nsubquery","d40262c3":"## 6.4.4 Pr\u00e1ctica: Listar a los Messi de la base de datos de jugadores\n\nQueremos listar a los jugadores que cumplan con la condici\u00f3n de tener la palabra 'Messi' en su nombre. En la tabla de resultados quiero ver los campos `id`,`player_name`, `birthday`, `height` y `weight` de los que cumplen la condici\u00f3n. Todos se encuentran en la tabla `Player`.\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","f280efb4":"## 1.2 \u00bfQu\u00e9 es SQLite?\nSQLite es una biblioteca de software que proporciona un sistema de gesti\u00f3n de bases de datos relacionales que se puede utilizar en casi todos los lenguajes de programaci\u00f3n, incluido Python. \n\nEl lite en SQLite significa facilidad en t\u00e9rminos de configuraci\u00f3n, administraci\u00f3n de la base de datos y recursos necesarios. SQLite tiene las siguientes caracter\u00edsticas m\u00e1s importantes: es aut\u00f3nomo, sin servidor, sin configuraci\u00f3n y transaccional.\n\n\nEl componente m\u00e1s importante de la BD son sus tablas, que es donde se almacenan todos los datos. Normalmente los datos se desviar\u00e1n a muchas tablas, y no se almacenar\u00e1n todos en un solo lugar (as\u00ed que dise\u00f1ar correctamente la estructura es muy importante). En la mayor parte de este notebook veremos c\u00f3mo trabajar\/manipular tablas. \n\nAdem\u00e1s de la manipulaci\u00f3n de  tablas, hay otros conceptos\/caracter\u00edsticas muy \u00fatiles de los que no hablaremos:\n* Creaci\u00f3n de tablas\n* Insertar \/ actualizar datos en la Base de Datos\n* Funciones - obtener un valor como entrada, y devolver la manipulaci\u00f3n de ese valor (por ejemplo, la funci\u00f3n que elimina los espacios en blanco)\n\nM\u00e1s informaci\u00f3n acerca de SQLite:\n[https:\/\/www.sqlitetutorial.net\/](https:\/\/www.sqlitetutorial.net\/what-is-sqlite\/)\n\n","b39755c8":"## 2.1.2 Pr\u00e1ctica: Listar las ligas del f\u00fatbol europeo\n\nDeben listar todos los campos que est\u00e9n en la tabla `League` de la base de datos de F\u00fatbol Europeo.\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","8fd0c14b":"## 8.1.2 Pr\u00e1ctica: Queremos conocer cu\u00e1ntos equipos tienen cada clase de juego defensivo\n\nQueremos conocer cuantos equipos de la tabla `Team_Attributes` que tienen cada clase de juego defensivo. Es decir: cu\u00e1ntos `defencePressureClass = 'Medium'`, `defencePressureClass = 'Deep'` y `defencePressureClass = 'High'`.\n\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","6421b121":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!--Respuesta Anal\u00edtica b\u00e1sica de las temporadas\nSELECT season,\nCOUNT(DISTINCT stage) AS number_of_stages,\nAVG(home_team_goal) AS avg_home_team_goal,\nAVG(away_team_goal) AS avg_away_team_goal,\nSUM(home_team_goal+away_team_goal) AS total_goals\nFROM Match\nGROUP BY season\nORDER BY season DESC;\n-->","83e9c049":"### 1.2.1 Configuraciones previas\n\nSQLite se puede utilizar en casi todos los lenguajes de programaci\u00f3n, incluido Python. Este notebook corre en Python, por lo que vamos a importar la librer\u00eda de SQLite y otras que nos pueden ser de utilidad m\u00e1s adelante.\n\nAsimismo, crearemos la conexi\u00f3n con la BD y listaremos las tablas con las que contamos.\n\nEjecuta (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","8f50aca0":"# 12. Sentencia CASE WHEN en SELECT\n\nLa sentencia `CASE WHEN` de SQLite eval\u00faa una lista de condiciones y devuelve una expresi\u00f3n basada en el resultado de dicha evaluaci\u00f3n.\n\n`CASE WHEN` es similar a la sentencia `IF-THEN-ELSE` de otros lenguajes de programaci\u00f3n.\n\nSe puede utilizar la sentencia `CASE WHEN` junto a cualquier sentencia que acepte una validaciones. Por ejemplo, puede utilizar la expresi\u00f3n `CASE WHEN` en sentencias como `WHERE`, `ORDER BY`, `HAVING`, `SELECT` y tambi\u00e9n en `UPDATE` y `DELETE`.\n\nLa sentencia `CASE` contiene una expresi\u00f3n opcional seguida de una o m\u00e1s cl\u00e1usulas `WHEN [condition] THEN [expression]`, terminando con una cl\u00e1usula opcional `ELSE` y la cl\u00e1usula obligatoria `END`.\n\nLas sintaxis de `CASE` pueden ser de la siguiente manera:\n\n* Sintaxis de Simple `CASE`\n\n`CASE` case_expression\n`WHEN` when_expression_1 `THEN` result_1\n`WHEN` when_expression_2 `THEN` result_2\n[...]\n`ELSE` result_else \n`END`\n\n* Sintaxis de Condition `CASE`\n`CASE`\n`WHEN` bool_expression_1 `THEN` result_1\n`WHEN` bool_expression_2 `THEN` result_2\n[...]\n`ELSE` result_else \n`END`","73195911":"## 13.2 Pr\u00e1ctica: Comparaci\u00f3n de tipo de juego entre el FC Barcelona y Real Madrid FC - SUB QUERY\n\nComo pr\u00e1ctica del uso de `CASE WHEN`, se requiere simular la asignaci\u00f3n de clase de juego de acuerdo a los siguientes ratings.\nPara el rating buildUpPlaySpeed que debe ser mostrado como PlaySpeed, se considera lo siguiente:\n\n* `buildUpPlaySpeed >= 70` como `Fast`\n* `buildUpPlaySpeed <= 30` como `Slow`\n* Sino como `Balanced`\n\nPara el rating buildUpPlayPassing que debe ser mostrado como PlayPassing, se considera lo siguiente:\n\n* `buildUpPlayPassing >= 70` como `Long`\n* `buildUpPlayPassing <= 30` como `Short`\n* Sino como `Mixed`\n\nPara el rating chanceCreationShooting que debe ser mostrado como CreationShooting, se considera lo siguiente:\n* `chanceCreationShooting >= 68` como `Lots`\n* `chanceCreationShooting <= 30` como `Little`\n* Sino como `Normal`\n\nLas tablas necesarias son: `Team_Attributes` y `Team`, cuya relaci\u00f3n se da en `Team_Attributes.team_api_id = Team.team_api_id`.\n\nLa tabla de resultados debe mostrar la fecha de rating como `RatingDate`, `team_api_id` como `TeamID` y `team_long_name` como `Team`. Adem\u00e1s, debe estar agrupada por fecha de rating y equipo. \n\n\u00a1\u00c9xitos!\n","67bb1e80":"## 6.3 Operadores l\u00f3gicos en WHERE\n\nLa sentencia WHERE puede combinarse con los operadores l\u00f3gicos: `AND`, `OR` y `NOT`. Los operadores `AND` y `OR` se utilizan para filtrar registros basados en m\u00e1s de una condici\u00f3n.\n* El operador `AND` muestra un registro si todas las condiciones separadas por `AND` son VERDADERA(s).\n* El operador `OR` muestra un registro si alguna de las condiciones separadas por `OR` es VERDADERA(s).\n* El operador `NOT` muestra un registro si la(s) condici\u00f3n(es) NO es VERDADERA(s).\n\n\n1. Sintaxis de`AND`:\n\n`SELECT\u00a0column1,\u00a0column2, ...`\n\n`FROM\u00a0table_name`\n\n`WHERE\u00a0condition1\u00a0AND\u00a0condition2\u00a0AND\u00a0condition3 ...;`\n\n\n2. Sintaxis de `OR`\n\n`SELECT\u00a0column1,\u00a0column2, ...`\n\n`FROM\u00a0table_name`\n\n`WHERE\u00a0condition1\u00a0OR\u00a0condition2 ...;`\n\n3. Sintaxis de `NOT`\n\n`SELECT\u00a0column1,\u00a0column2, ...`\n\n`FROM\u00a0table_name`\n\n`WHERE\u00a0NOT condition;`","2e43558e":"## 7.1.2 Pr\u00e1ctica: Listar la tabla de pa\u00edses en orden descendente\n\nDeben listar la tabla `Country` de forma descendente `DESC` por el campos `name`. La tabla de resultados deber\u00e1 contener los campos `id` y `name`.\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","13ce3c48":"# 3. Sentencia LIMIT \n\nCuando deseamos poner un l\u00edmite al resultado o no nos interesa conocer la totalidad de los resultados, podemos **limitar** la cantidad de registros resultantes mediante la sentencia `LIMIT`\n\nLa sintaxis de `LIMIT` es as\u00ed:\n\n`SELECT column1, column2...`\n\n`FROM table_name`\n\n`LIMIT number;`\n\n## 3.1.1 Ejemplo: Listar 15 jugadores de la base de datos del f\u00fatbol europeo\n\nQueremos listar 15 jugadores que aparezcan en la tabla `Player` de la base de datos de F\u00fatbol Europeo. En la tabla de resultados quiero ver los campos `\u00ecd`,`player_name`, `birthday`, `height` y `weight`. Todos se encuentran en la tabla `Player`\n\nEjecuta (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","1eedaf5e":"# Alias AS\n\nLos alias en SQL se utilizan para dar a una tabla o a una columna, un nombre temporal. Se utilizan a menudo para hacer m\u00e1s legibles los nombres de las columnas. Un alias s\u00f3lo existe durante la duraci\u00f3n de la consulta.\n\nSintaxis de `AS`:\n\n`SELECT column_name AS alias_name`\n\n`FROM table_name AS other_alias;`\n","c8bc891b":"# 9. Sentencias JOIN\n\n`JOIN` se usa cuando se quiere conectar dos tablas entre s\u00ed. Funciona cuando tienes una clave com\u00fan en cada una de ellas. Entender el concepto de Claves es crucial para conectar (unir) conjuntos de datos (tablas). \n\n*Recuerden: Una clave es un valor que podemos usar para referirnos a una fila o registro espec\u00edfico de una tabla. \nPuede consistir en un valor (celda) que generalmente es un `ID`, o de una combinaci\u00f3n de valores que son \u00fanicos en la tabla (clave compuesta).*\n\nSintaxis de `JOIN`;\n\n`SELECT\u00a0first_table.column1,\u00a0firts_table.column2, second_table.columnA, second_table.columnB ...`\n\n`FROM\u00a0first_table`\n\n`(LEFT | RIGHT | FULL) JOIN\u00a0second_table ON first_table.columnID = second_table.columnID;`\n\n\n## 9.1 Tipos de JOIN\n\n* `JOIN`: mantiene s\u00f3lo los registros que coinciden con la condici\u00f3n (despu\u00e9s del `ON`) en ambas tablas, y los registros de ambas tablas que no coincidan, no aparecer\u00edan en la tabla de resultado.\n* `LEFT JOIN`: devuelve todos los registros de la primera tabla (izquierda), y los registros coincidentes de la segunda tabla (derecha). El resultado es `NULL` del lado derecho, si no hay coincidencia. \n* `RIGHT JOIN`: devuelve todos los registros de la segunda tabla (derecha), y los registros coincidentes de la primera tabla (izquierda). El resultado es `NULL` del lado izquierdo, si no hay coincidencia.\n* `FULL JOIN`: devuelve todos los registros cuando hay una coincidencia en los registros de la primera tabla (izquierda) o segunda tabla (derecha). Nota: `FULL JOIN` puede potencialmente devolver conjuntos de resultados MUY grandes.\n    \n ![image.png](attachment:image.png)\n\nCuando se quiere unir diferentes tablas, es necesario que pienses en lo siguiente:\n\n1. Decidir qu\u00e9 tipo de uni\u00f3n usar. Las m\u00e1s comunes son: `JOIN` y `LEFT JOIN`. \n2. Especificar el valor com\u00fan que se utiliza para conectar las tablas (la clave). \n3. Asegurarse de que al menos uno de los valores tiene que ser una clave en su tabla.\n\n\nY por \u00faltimo, \u00a1Paciencia! Usar los `JOIN` de forma incorrecta, es el error m\u00e1s com\u00fan (y a veces peligroso) cuando se escriben consultas complicadas.","ba8afbaf":"## 12.1 Ejemplo: Queremos una tabla que me indique los partidos jugados por el FC Barcelona, su rival, la fecha de juego y si perdi\u00f3, gan\u00f3 o empato.\n\n","e6193257":"## 9.2.1 Ejemplo: Lista de ligas y su pa\u00eds \n\nQueremos conocer a qu\u00e9 pa\u00eds corresponde cada liga. Para hacerlo, vamos a necesitar la informaci\u00f3n de las tablas `Country`y `League`, uniendolas por su clave en com\u00fan: `Country.id = League.country_id`.\n\nEjecuta (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","e23740af":"## 9.2.2 Pr\u00e1ctica: Comparaci\u00f3n de cantidad de partidos jugados en cierta temporada de Espa\u00f1a y B\u00e9lgica\n\nQueremos realizar una comparaci\u00f3n de la cantidad de partidos jugados en `season = '2008\/2009'` entre los pa\u00edses `'Spain'` y `'Belgium'`. Los datos necesarios se encuentran en las tablas `Match` y `Country`. \nAsimismo, la tabla de resultados debe visualizarse de la siguiente manera:\n* la columna con el nombre del pa\u00eds debe llamarse `country_name`\n* la columna con el conteo de partidos debe llamarse `count_matches` \n* debemos visualizar al pa\u00eds con m\u00e1s partidos jugados en primer lugar\n\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","7be8ca27":"## 10.1.2 Pr\u00e1ctica: Nos basaremos en ejemplo \"Lista detallada de juegos\", pero eliminaremos la informaci\u00f3n del partido y fechas, para comparar las ligas por temporadas.\n\n\nPara las ligas de los paises `Spain`, `Germany`, `France`, `Italy` y `England` que tengan un promedio de goles por partido mayor a 2.5, queremos conocer:\n* El nombre del pa\u00eds del equipo como `Country`,\n* El nombre de la liga en la que juega como `League`,\n* La cantidad de partidos (stages) como `Stages`,\n* La temporada como `Season`,\n* La cantidad de equipos como `number_of_teams`, \n* El promedio de goles realizados por los equipos locales como `avg_local_goals`,redondeando con 2 decimales,\n* El promedio de goles realizados por los equipos visitantes como `avg_visitor_goals`,redondeando con 2 decimales,\n* El promedio de goles por partido como `avg_goals`,redondeando con 2 decimales,\n* El promedio de gol diferencia por partido como `avg_goal_dif`,redondeando con 2 decimales,\n* El total de goles realizados en la temporada  como `total_goals`\n\nEsta informaci\u00f3n se encuentra repartida entre las tablas: `Match`, `Country`, `League` y `Team`. Teniendo en cuenta que las claves compartidas entre tablas son estas:\n\n* `Country.id = Match.country_id` \n\n* `League.id = Match.league_id`\n\n* `Team.team_api_id = Match.home_team_api_id`\n\nEjecuta (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","1e5004aa":"\n<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!-- Respuesta Traer la tabla de pa\u00edses sin B\u00e9lgica\nSELECT id, name\nFROM Country\nWHERE NOT name = 'Belgium';\n-->\n","576b19fd":"## 10.1.3 Pr\u00e1ctica: An\u00e1lisis sobre los equipos que m\u00e1s goles realizaron jugando como locales\n\n\nQueremos un detalle de los equipos que jugando como locales en las ligas de `Spain`, `Germany` y `England`, hayan anotado m\u00e1s de 50 goles. Ordenar de forma descendente por temporada y por equipo con m\u00e1s goles realizados. Nos interesa conocer:\n\n* El nombre del pa\u00eds del equipo como `Country`\n* El nombre de la liga en la que juega como `League`\n* El nombre del equipo como `Team`\n* La cantidad de partidos (stages) como `Stages`\n* La temporada como `Season`\n* La suma de goles realizados en esa temporada, jugando como local bajo el alias `sum_goals`\n* El promedio de goles bajo alias `avg_goals`, redondeando con 2 decimales\n\n\nEsta informaci\u00f3n se encuentra repartida entre las tablas: `Match`, `Country`, `League` y `Team`. Teniendo en cuenta que las claves compartidas entre tablas son estas:\n\n* `Country.id = Match.country_id` \n\n* `League.id = Match.league_id`\n\n* `Team.team_api_id = Match.home_team_api_id`\n\nEjecuta (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo\n","8f4ca3aa":"## 5.1.1 Pr\u00e1ctica: Traer el promedio de goles por partido de la tabla Match\n\nDeben traer el promedio de la suma de goles hechos por los equipos locales `home_team_goal` y visitantes `away_team_goal` en todos los juegos almacenados en la tabla `Match` de la base de datos de F\u00fatbol Europeo. La tabla de resultados deber\u00e1 mostrar \u00fanicamente el n\u00famero con el promedio de goles por partido. \n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","a0353510":"<button>Clic aqu\u00ed para ver la soluci\u00f3n<\/button>\n<!--\nquery= \"\"\"SELECT\n            DATE(date) AS RatingDate,\n            TA.team_api_id AS TeamID,\n            Team.team_long_name AS Team,\n            CASE\n                WHEN TA.buildUpPlaySpeed >= 70 THEN 'Fast'\n                WHEN TA.buildUpPlaySpeed <= 30 THEN 'Slow'\n                ELSE 'Balanced'\n            END AS PlaySpeed,\n            CASE\n                WHEN TA.buildUpPlayPassing >= 70 THEN 'Long'\n                WHEN TA.buildUpPlayPassing <= 30 THEN 'Short'\n                ELSE 'Mixed'\n            END AS PlayPassing,\n            CASE\n                WHEN TA.chanceCreationShooting >= 68 THEN 'Lots'\n                WHEN TA.chanceCreationShooting <= 30 THEN 'Little'\n                ELSE 'Normal'\n            END AS CreationShooting\n        FROM Team_Attributes AS TA\n        JOIN Team\n              ON TA.team_api_id = Team.team_api_id\n        WHERE team_long_name IN('FC Barcelona', 'Real Madrid CF')\n        GROUP BY date, Team\n        ORDER BY date;\"\"\"\n\nsubquery = pd.read_sql(query, conn)\nsubquery\n\n-->","7622dd77":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!--Respuesta Traer el Id de los equipos que desarrollan un dribbling normal y su velocidad de juego es balanceada\nSELECT id, buildUpPlayDribblingClass, buildUpPlaySpeedClass\nFROM Team_Attributes\nWHERE buildUpPlayDribblingClass = 'Normal'\nAND buildUpPlaySpeedClass = 'Balanced';\n-->","4ef8973c":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!--Respuesta Listar las temporadas en que un equipo visitante anot\u00f3 7 o m\u00e1s goles\nSELECT season, home_team_goal, away_team_goal\nFROM Match\nWHERE away_team_goal >= 7;\n-->\n","1521d80d":"## 6.3.2 Pr\u00e1ctica: Traer el Id de los equipos que desarrollan un juego de pase largo o su velocidad de juego es r\u00e1pida\n\nTomando la tabla `Team_Attributes` de la base de datos de F\u00fatbol Europeo, deben obtener el `id`,`buildUpPlayPassingClass` y `buildUpPlaySpeedClass`  de los equipos que tengan los siguientes atributos:\n* `buildUpPlayPassingClass = 'Long'`\n* `buildUpPlaySpeedClass = 'Fast'`\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","5d90f95b":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!--Respuesta Traer el Id de los equipos que desarrollan un juego de pase largo o su velocidad de juego es r\u00e1pida\nSELECT id, buildUpPlayPassingClass, buildUpPlaySpeedClass\nFROM Team_Attributes\nWHERE buildUpPlayPassingClass = 'Long'\nOR buildUpPlaySpeedClass = 'Fast';\n-->\n","380a78e1":"## 2.2.2 Pr\u00e1ctica: Listar cu\u00e1les son las posibles tasas de ataque de los jugadores\n\nDeben listar el campo `attacking_work_rate` que esta en la tabla `Player_Attributes` de la base de datos de F\u00fatbol Europeo.\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","dd9b7056":"<button>Clic aqu\u00ed para ver la soluci\u00f3n <\/button>\n<!--\nquery= \"\"\"SELECT\n            DATE(date) AS RatingDate,\n            TA.team_api_id AS TeamID,\n            Team.team_long_name AS Team,\n            CASE\n                WHEN TA.buildUpPlaySpeed >= 70 THEN 'Fast'\n                WHEN TA.buildUpPlaySpeed <= 30 THEN 'Slow'\n                ELSE 'Balanced'\n            END AS PlaySpeed,\n            CASE\n                WHEN TA.buildUpPlayPassing >= 70 THEN 'Long'\n                WHEN TA.buildUpPlayPassing <= 30 THEN 'Short'\n                ELSE 'Mixed'\n            END AS PlayPassing,\n            CASE\n                WHEN TA.chanceCreationShooting >= 68 THEN 'Lots'\n                WHEN TA.chanceCreationShooting <= 30 THEN 'Little'\n                ELSE 'Normal'\n            END AS CreationShooting\n        FROM Team_Attributes AS TA\n        JOIN (SELECT team_api_id,\n              team_long_name\n              FROM Team\n              WHERE team_long_name IN('FC Barcelona', 'Real Madrid CF')) \n              AS Team ON TA.team_api_id = Team.team_api_id\n        GROUP BY date, Team\n        ORDER BY date;\"\"\"\n\nsubquery = pd.read_sql(query, conn)\nsubquery\n-->","b96592ed":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!--Respuesta Traer la tabla de pa\u00edses sin Polonia\nSELECT id, name\nFROM Country\nWHERE name <> 'Poland';\n-->","7a82eca3":"<button type=\"button\" class=\"btn btn-outline-primary\">Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!--Respuesta Traer la suma de goles hechos por los equipos visitantes de la tabla Match\nSELECT SUM(away_team_goal)\nFROM Match;\n-->\n","912b8746":"## 6.4.2 Pr\u00e1ctica: Traer la tabla de pa\u00edses sin Polonia\n\nDeben traer la tabla de pa\u00edses sin `Poland`. La tabla de resultados deber\u00e1 contener los campos `id` y `name` de la tabla `Country` de la base de datos de F\u00fatbol Europeo. **No se debe utilizar `NOT`**.\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo\n\n","5b2fca21":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!-- Respuesta Listar el id de los 10 jugadores con mayor estatura y ordenarlos alfab\u00e9ticamente pero de forma descendente\nSELECT id, player_name AS name, height\nFROM Player\nORDER BY height DESC, player_name DESC\nLIMIT 10;\n-->","aa0b3edb":"## 4.1.3 Pr\u00e1ctica: Traer la suma de goles hechos por los equipos visitantes de la tabla Match\n\nDeben traer la suma de goles hechos por los equipos visitantes `away_team_goal` almacenados en la tabla `Match` de la base de datos de F\u00fatbol Europeo. La tabla de resultados deber\u00e1 mostrar \u00fanicamente el n\u00famero con la suma de goles. \n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","1eff691e":"# 8. Sentencia GROUP BY\n\nLa sentencia `GROUP BY` agrupa las filas que tienen los mismos valores en filas de resumen, como \"encontrar el n\u00famero de clientes en cada pa\u00eds\". Se utiliza sobre dimensiones y m\u00e9tricas para agrupar el conjunto de resultados en una o m\u00e1s columnas.\n\nLas dimensiones son todos aquellos valores que estamos describiendo en el `SELECT`. Y las m\u00e9tricas son que se utilizan a menudo con funciones agregativas (`COUNT`, `MAX`, `MIN`, `SUM`, `AVG`). \n\nSintaxis de `GROUP BY`;\n\n`SELECT\u00a0column1,\u00a0column2, ...`\n\n`FROM\u00a0table_name`\n\n`WHERE\u00a0condition`\n\n`GROUP BY column1`\n\n`ORDER BY column2 ASC`|`DESC;`\n\n**Nota:** El uso de `WHERE` antes de `GROUP BY` hace que este se ejecute m\u00e1s r\u00e1pido, ya que el motor de base de datos no se tomar\u00e1 el tiempo de agrupar cosas que no necesita.\n\n**Nota2:** Es muy importante utilizar las mismas dimensiones tanto en el `SELECT`, como en el `GROUP BY`. De lo contrario, la salida podr\u00eda ser err\u00f3nea.","853ce848":"Algunas pistas o consejos para el ejercicio anterior:\nEn el ejercicio queremos mostrar s\u00f3lo las columnas que nos interesan, as\u00ed que en lugar de `*` usamos los nombres exactos.\nAlgunas de las columnas tienen el mismo nombre (Ejemplo: `Country.name,League.name`), por lo que las renombramos usando `AS`.\n\nEsta consulta tiene algunos `JOIN`. La raz\u00f3n es que la base de datos utilizada est\u00e1 dise\u00f1ada en una estructura de estrella. Es decir, tiene una tabla (`Match`) con todo el \"rendimiento del encuentro\" y m\u00e9tricas, pero s\u00f3lo IDs como claves for\u00e1neas. Mientras que toda la informaci\u00f3n descriptiva se encuentra almacenada en otras tablas como: `Country`, `League` y `Team`.\n\nTengan en cuenta que se puede realizar 2 `JOIN` con la tabla `Team`. Esto es un truco, ya que usamos la misma tabla pero b\u00e1sicamente traemos dos copias diferentes de ella, renombrandola con `AS`. Ejemplo: `Team AS HomeTeam` y `Team AS AwayTeam`. La raz\u00f3n es que se necesitaba traer informaci\u00f3n de goles sobre dos valores diferentes (`home_team_api_id` y `away_team_api_id`), y si unimos a la misma tabla, significar\u00eda que son iguales entre s\u00ed.\n\nTambi\u00e9n podr\u00edas utilizar `LEFT JOIN` sobre la tabla `Team`. Depende de si prefieres mantener los datos de los juegos en la tabla de resultados, incluso si uno de los equipos no aparece en la tabla `Team`.\n\n`ORDER BY` se podr\u00eda usar para definir el orden de la tabla de resultados.\n","718cec7f":"## 7.1.4 Pr\u00e1ctica: Listar el id de los 10 jugadores con mayor estatura\n\nDeben listar la tabla `Player` de forma descendente `DESC` por el campos `height`. La tabla de resultados deber\u00e1 contener los campos `id`, `player_name` y `height`.\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","ebf1dd0f":"## 4.1.1 Ejemplo: Traer el n\u00famero de pa\u00edses almacenados en la tabla Country\n\nDeben traer el n\u00famero de pa\u00edses almacenados en la tabla `Country` de la base de datos de F\u00fatbol Europeo. La tabla de resultados deber\u00e1 mostrar \u00fanicamente el n\u00famero con la cantidad de pa\u00edses. \n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","b07fbb41":"## 1.1 Definiciones importantes\n\nAunque SQL es un est\u00e1ndar ANSI\/ISO, existen diferentes versiones del lenguaje SQL.\nSin embargo, para cumplir con el est\u00e1ndar del American National Standards Institute (ANSI), todas las versiones deben soportar al menos los comandos principales (como `SELECT`, `UPDATE`, `DELETE`, `INSERT`, `WHERE`) de forma similar.\n\nEn este caso, vamos a trabajar con SQLite que es una implementaci\u00f3n espec\u00edfica. La mayor\u00eda de los lenguajes SQL comparten todas las capacidades de este notebook. Las diferencias suelen estar en el rendimiento y en las funcionalidades anal\u00edticas avanzadas (y a veces en los errores, por supuesto). \n","478ae27a":"## 4.1.4 Pr\u00e1ctica: Traer el promedio de goles hechos por los equipos locales y el promedio de goles hechos por los visitantes de la tabla Match\n\nDeben traer el promedio de goles hechos por los equipos locales `home_team_goal` y el promedio de goles hechos por los equipos visitantes `away_team_goal` almacenados en la tabla `Match` de la base de datos de F\u00fatbol Europeo. La tabla de resultados deber\u00e1 mostrar \u00fanicamente el n\u00famero con el promedio de goles. \n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","ec918f55":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!--Respuesta Listar a los Messi de la base de datos de jugadores\nSELECT id, player_name, birthday, height, weight \nFROM Player\nWHERE player_name LIKE '%Messi%';\n-->\n","30b12c98":"<button> Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!-- Respuesta Listar los jugadores del f\u00fatbol europeo\nSELECT id,player_name,birthday,height,weight\nFROM Player;\n-->","e0063243":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!-- Respuesta Listar la tabla de pa\u00edses en orden descendente\nSELECT id AS Identificador, name AS Nombre_Pais\nFROM Country\nORDER BY id DESC;\n-->","f9113503":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!-- Respuesta Listar las ligas del f\u00fatbol europeo\nSELECT country_id, id, name\nFROM League;\n-->","26521772":"<button> Clic aqu\u00ed para la soluci\u00f3n<\/button>\n\n<!--Respuesta Listar cu\u00e1les son las posibles tasas de ataque de los jugadores\nSELECT DISTINCT attackink_work_rate\nFROM Player_Attributes;\n-->","dfbdc084":"## 8.1.1 Ejemplo: Queremos conocer cu\u00e1ntos equipos tienen cada tipo de velocidad de juego\n\nQueremos conocer cu\u00e1ntos equipos de la tabla `Team_Attributes` tienen cada tipo de velocidad juego. Es decir: cu\u00e1ntos tienen `buildUpPlaySpeedClass = 'Fast'`, `buildUpPlaySpeedClass = 'Balanced'` y cu\u00e1ntos `buildUpPlaySpeedClass = 'Slow'`\n\n\nEjecuta (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","be1761dd":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!--Respuesta Traer la m\u00e1xima cantidad de goles que un equipo visitante anot\u00f3 en los juegos de la tabla Match\nSELECT MAX(away_team_goal)\nFROM Match;\n-->\n","d06e5766":"## 12.2 Pr\u00e1ctica: Queremos una tabla que me indique los partidos jugados por el FC Barcelona como local contra el Real Madrid CF, la fecha de juego y si perdi\u00f3, gan\u00f3 o empat\u00f3.\n\nLa informaci\u00f3n que necesitamos est\u00e1 repartida entre las tablas Match y Team, cuya relaci\u00f3n es:\n`Team.team_api_id = Match.home_team_api_id`\n\nQueremos ver a la fecha del partido como `MatchDate`, el nombre del equipo local como `HomeTeam` y del visitante como `VisitorTeam`. Tambi\u00e9n queremos ver los goles y el resultado bajo alias `Outcome`.\n\nDatos necesarios:\n* FC Barcelona: `team_api_id = 8634` \n* Real Madrid CF: `team_api_id = 8633`\n\n\u00a1\u00c9xitos!","1108c786":"## 6.2.1 Ejemplo: Listar los jugadores que pesan 165 libras\n\nQueremos listar a los jugadores que cumplan con la condici\u00f3n de pesar 165 libras. En la tabla de resultados quiero ver los campos `id`,`player_name`, `birthday`, `height` y `weight` de los que cumplen la condici\u00f3n. Todos se encuentran en la tabla `Player`\n\nEjecuta (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","47b751ec":"## 7.1.5 Pr\u00e1ctica: Listar el id de los 10 jugadores con mayor estatura y ordenarlos alfab\u00e9ticamente pero de forma descendente\n\nDeben listar la tabla `Player` de forma descendente `DESC` por el campos `height` y `player_name`. La tabla de resultados deber\u00e1 contener los campos `id`, `player_name` y `height`.\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","5d670ec0":"# INTRODUCCI\u00d3N\n\nUsar\u00e9 esta notebook para proporcionar una introducci\u00f3n al lenguaje SQL, que deber\u00eda ser un lenguaje imprescindible para todo analista de datos. \n\n* SQL significa Structured Query Language (Lenguaje de consulta estructurado)\n* SQL permite acceder y manipular bases de datos\n* SQL es una herramienta simple para el an\u00e1lisis avanzado de datos\n\nSQL nos permite escribir sentencias que el DBMS interpreta, y as\u00ed es como interactuamos con los datos de la base de datos, de las aplicaciones o incluso dentro del propio DBMS. En este rol de interactuar con los datos, SQL se llama lenguaje de manipulaci\u00f3n de datos o DML. SQL tambi\u00e9n ofrece funciones para gestionar la propia base de datos creando y modificando tablas, as\u00ed como controlando el acceso a las mismas. En estos roles, SQL act\u00faa como un DDL o un lenguaje de definici\u00f3n de datos, y un DCL o un lenguaje de control de datos. \n\nLa base de datos utilizada, pueder ser encontrada [aqu\u00ed](https:\/\/www.kaggle.com\/hugomathien\/soccer)","d6faf4cc":"## 6.3.1 Pr\u00e1ctica: Traer el Id de los equipos que desarrollan un dribbling normal y su velocidad de juego es balanceada\n\nTomando la tabla `Team_Attributes` de la base de datos de F\u00fatbol Europeo, deben obtener el `id`,`buildUpPlayDribblingClass` y `buildUpPlaySpeedClass`  de los equipos que tengan los siguientes atributos:\n* `buildUpPlayDribblingClass = 'Normal'`\n* `buildUpPlaySpeedClass = 'Balanced'`\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","fca6432a":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!--Respuesta Listar el id de los 15 jugadores con menos peso\nSELECT id, player_name AS name, weight\nFROM Player\nORDER BY weight ASC\nLIMIT 15;\n-->","b147e485":"## 2.2 Sentencia SELECT DISTINCT\n\nLa sentencia `SELECT DISTINCT` se utiliza para devolver s\u00f3lo valores distintos (diferentes).\n\nDentro de una tabla, una columna a menudo contiene muchos valores duplicados y a veces s\u00f3lo se desea listar los diferentes valores (distintos).\n\nLa sintaxis de `SELECT DISTINCT` es as\u00ed:\n\n`SELECT DISTINCT column1`\n\n`FROM table_name;`\n\n## 2.2.1 Ejemplo: Listar las temporadas jugadas de esta Base de Datos\n\nQueremos consultar las temporadas que se almacenaron en la tabla `Match`de la base de datos de F\u00fatbol Europeo.\n\nEjecuta (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo\n","1bed3c69":"## 6.4.3 Pr\u00e1ctica: Listar los jugadores que pesen entre 174 y 176 libras\n\nQueremos listar a los jugadores que cumplan con la condici\u00f3n de pesar entre 174 y 176 libras. En la tabla de resultados quiero ver los campos `id`,`player_name`, `birthday`, `height` y `weight` de los que cumplen la condici\u00f3n. Todos se encuentran en la tabla `Player`. Asimismo, debemos limitar la consulta a 30 registros.\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo\n","428291f8":"## 6.4 Otros operadores que trabajan con la sentencia WHERE\n\nLos siguientes operadores tambi\u00e9n pueden ser utilizados en la sentencia WHERE:\n\n* | `=`       | Igual\n\n* | `>`       | Mayor que\n\n* | `<`       | Menor que\n\n* | `>=`      | Mayor o igual que  \n\n* | `<=`      | Menor o igual que \n\n* | `<>`      | No igual. *Nota: En algunas versiones de SQL este operador puede ser escrito como !=*\n\n* | `BETWEEN` | Entre cierto rango\n\n* | `LIKE`    | Para consultar los datos basados en informaci\u00f3n parcial, se utiliza el operador `LIKE` en la sentencia `WHERE`. Busca un patr\u00f3n. El patr\u00f3n va antes, despu\u00e9s o entre un par de % (wildcard). Ejemplo: `LIKE 's%'` busca cualquier texto que comience con 's'. `LIKE '%er'` busca cualquier texto que termine con 'er'. Y `LIKE '%per%'` busca cualquier texto que contenga 'per'.\n\n* | `IN`      | Para especificar varios valores posibles para una columna o subquery. Ejemplo de sintaxis cuando se especifica varios valores:\n\n`SELECT column1 \nFROM Table_name \nWHERE column1 IN (value1, value2);`. \n\nEjemplo se sintaxis cuando se usa `IN` en una subquery: \n\n`SELECT TrackId, Name, AlbumId \nFROM Tracks \nWHERE AlbumId IN \n    (SELECT\tAlbumId\t\n    FROM Albums\t\n    WHERE ArtistId = 12);`.","3d229b02":"## 9.2.3 Pr\u00e1ctica: Lista detallada de juegos \n\nQueremos un detalle de 10 juegos realizados en el pa\u00eds `Spain`, ordenado de forma ascendente por `date`. \n\nLo que nos interesa ver es:\n* el `id` del encuentro, \n* el `Country.name` bajo alias `country_name`, \n* el `League.name` bajo alias `league_name`, \n* `season`, \n* `stage`, \n* `date`, \n* el `team_long_name` del equipo local bajo alias `home_team`, \n* el `team_long_name` del equipo visitante bajo alias `away_team`, \n* `home_team_goal` y \n* `away_team_goal` \n\nEsta informaci\u00f3n se encuentra repartida entre las tablas: `Match`, `Country`, `League` y `Team`. Teniendo en cuenta que las claves compartidas entre tablas son estas:\n\n* `Country.id = Match.country_id` \n\n* `League.id = Match.league_id`\n\n* `Team.team_api_id = Match.home_team_api_id`\n\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","2cc000ee":"## 6.3.3 Pr\u00e1ctica: Traer la tabla de pa\u00edses sin B\u00e9lgica\n\nDeben filtrar la tabla de pa\u00edses y traerla sin `Belgium`. La tabla de resultados deber\u00e1 contener los campos `id` y `name` de la tabla `Country` de la base de datos de F\u00fatbol Europeo.\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","2e704753":"<button\">Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!--Respuesta Traer el promedio de goles hechos por los equipos locales y el promedio de goles hechos por los visitantes de la tabla Match\nSELECT AVG(home_team_goal), AVG(away_team_goal)\nFROM Match;\n-->\n","df833bd5":"## 3.1.2 Pr\u00e1ctica: Listar 25 equipos del f\u00fatbol europeo\n\nDeben listar 25 equipos del f\u00fatbol europeo. La tabla de resultados deber\u00e1 contener los campos `id` y `team_long_name` de la tabla `Team` de la base de datos de F\u00fatbol Europeo.\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","76c9f7ca":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!-- Respuesta Listar el id de los 10 jugadores con mayor estatura\nSELECT id, player_name, height\nFROM Player\nORDER BY height DESC\nLIMIT 10;\n-->","11523ed1":"## 8.1.3 Pr\u00e1ctica: Anal\u00edtica b\u00e1sica de las temporadas\n\nQueremos realizar un sencillo an\u00e1lisis sobre la tabla `Match`. Se necesita obtener la siguiente informaci\u00f3n agrupada por  cada `season`:\n\n* Cuantas `stage` distintas tuvo y visualizarlo como `number_of_stages` \n* El promedio de los goles de equipos locales `home_team_goal` y visualizarlo como `avg_home_team_goals`\n* El promedio de los goles de equipos visitantes `away_team_goal` y visualizarlo como `avg_away_team_goals`\n* La suma total de goles realizados por los equipos locales y visitantes en la temporada, visualizandolo como `total_goals`.\n\nAsimismo, se requere ver la informaci\u00f3n de las temporadas m\u00e1s recientes primero. \n\n\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo\n","afc5cffc":"<button>Clic aqu\u00ed para ver la soluci\u00f3n<\/button>\n<!--\nquery= \"\"\"SELECT DATE(Match.date) as MatchDate,\n                Barca.team_long_name AS  HomeTeam,\n                home_team_goal AS Home_goals,\n                Madrid.team_long_name AS VisitorTeam,\n                away_team_goal Visitor_goals,\n                CASE \n                    WHEN home_team_goal < away_team_goal THEN 'Barca lost'\n                    WHEN home_team_goal > away_team_goal THEN 'Barca won'\n                    ELSE 'Tie' \n                END AS Outcome\n        FROM Match \n        LEFT JOIN Team AS Barca on Barca.team_api_id = Match.home_team_api_id\n        LEFT JOIN Team AS Madrid on Madrid.team_api_id = Match.away_team_api_id\n        WHERE Barca.team_api_id = 8634 AND Madrid.team_api_id = 8633\n        ORDER BY MatchDate DESC\n        LIMIT 15;\"\"\"\n\nBarcaMadrid_results= pd.read_sql(query, conn)\nBarcaMadrid_results\n\n-->","8adab719":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!-- Respuesta An\u00e1lisis ligas por temporadas\nquery = \"\"\"SELECT Country.name AS Country, \n                  League.name AS League, \n                  Match.season AS Season,\n                  COUNT(DISTINCT stage) AS Stages,\n                  COUNT(DISTINCT Team.team_long_name) AS number_of_teams,\n                  ROUND(AVG(home_team_goal),2) AS avg_local_goals, \n                  ROUND(AVG(away_team_goal),2) AS avg_visitor_goals, \n                  ROUND(AVG(home_team_goal-away_team_goal),2) AS avg_goal_dif, \n                  ROUND(AVG(home_team_goal+away_team_goal),2) AS avg_goals, \n                  SUM(home_team_goal+away_team_goal) AS total_goals                                       \n           FROM Match\n           JOIN Country ON Country.id = Match.country_id\n           JOIN League ON League.id = Match.league_id\n           LEFT JOIN Team ON Team.team_api_id = Match.home_team_api_id\n           WHERE Country IN ('Spain', 'Germany', 'France', 'Italy', 'England')\n           GROUP BY Country.name, League.name, season\n           HAVING AVG(home_team_goal+away_team_goal) > 2.5\n           ORDER BY Season ASC, total_goals DESC\n           LIMIT 10;\"\"\"\n\nleages_by_season = pd.read_sql(query, conn)\nleages_by_season\n\n-->","ed3d94c3":"# 2. Sentencia SELECT\n\nEsta es la consulta m\u00e1s b\u00e1sica. \nLas \u00fanicas partes imprescindibles de una consulta son el `SELECT` y el `FROM`. La instrucci\u00f3n `SELECT` se utiliza para seleccionar datos de una BD.\n\n`SELECT *` significa que quieres obtener todas las columnas posibles de la tabla consultada. Los datos devueltos se almacenan en una tabla de resultados, denominada conjunto de resultados.\n\nLa sintaxis de `SELECT` es as\u00ed:\n\n`SELECT\u00a0column1,\u00a0column2, ...`\n\n`FROM\u00a0table_name;`\n\n\n## 2.1.1 Ejemplo: Listar los pa\u00edses\n\nQueremos consultar la lista de los pa\u00edses que se encuentran en la base de datos de F\u00fatbol Europeo.\n\n\nImportante: La estructura y el orden de las secciones son importantes, mientras que los espacios, las nuevas l\u00edneas, las may\u00fasculas y las sangr\u00edas est\u00e1n ah\u00ed para facilitar la lectura del c\u00f3digo.\n\nEjecuta (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","95832cbf":"## 2.1.3 Pr\u00e1ctica: Listar los jugadores del f\u00fatbol europeo\n\nDeben listar los campos `id`,`player_name`, `birthday`, `height` y `weight` que est\u00e9n en la tabla `Player` de la base de datos de F\u00fatbol Europeo.\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","2e174290":"# 5. Operaciones matem\u00e1ticas \n\nSe pueden realizar operaciones matem\u00e1ticas como: `+`, `-`, `*`, `\/`, etc. Asimismo, est\u00e1s operaciones pueden ser usadas en conjunto con las funciones agregativas\/ m\u00e9tricas.  \n\nLa sintaxis en la sentencia `SELECT` es as\u00ed:\n\n* `+`\n\n`SELECT column1+column2`\n\n`FROM table_name`\n\nLa sintaxis combinando con una m\u00e9trica en la sentencia `SELECT` es as\u00ed:\n\n* `AVG(+)`\n\n`SELECT AVG(column1+column2)`\n\n`FROM table_name`\n","68da44d9":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!-- Respuesta Traer la tabla de pa\u00edses \u00fanicamente con Italia\nSELECT id, name\nFROM Country\nWHERE name = 'Italy';\n-->","05383aab":"# 6. Sentencia WHERE\n\nLa sentencia `WHERE` se utiliza para filtrar registros. Mediante esta sentencia, se extraen s\u00f3lo aquellos registros que cumplen una condici\u00f3n espec\u00edfica.\n\nLa sintaxis de `WHERE` es as\u00ed:\n\n`SELECT column1, column2...`\n\n`FROM table_name`\n\n`WHERE condition;`\n\n\n## 6.1 Campos de texto(y fecha) vs  campos num\u00e9ricos\n\nSQL requiere comillas simples alrededor de los valores del texto y fecha (la mayor\u00eda de los sistemas de bases de datos tambi\u00e9n permiten comillas dobles). Sin embargo, los campos num\u00e9ricos no deben incluirse entre comillas. \n\nEjemplos de sintaxis con campo n\u00famerico:\n\n`SELECT *`\n\n`FROM Customers`\n\n`WHERE CustomerId = 1;`\n\nEjemplos de sintaxis con campo de texto:\n\n`SELECT *`\n\n`FROM Customers`\n\n`WHERE Country = 'Mexico';`\n","7641fa85":"# 11. Orden de ejecuci\u00f3n de las consultas\n\nAhora que estamos familiarizados con la mayor\u00eda de las funcionalidades que se utilizan en una consulta, es muy importante entender el orden en que se ejecuta el c\u00f3digo.\n\nPrimero, el orden de c\u00f3mo lo escribimos (recordatorio):\n* `SELECT`\n* `FROM`\n* `JOIN`\n* `WHERE`\n* `GROUP BY`\n* `HAVING`\n* `ORDER BY`\n* `LIMIT`\n\nAhora, el orden real en que las cosas suceden. Primero, puedes pensar en esta parte como la creaci\u00f3n de una nueva tabla temporal en la memoria:\n\n1. Definir qu\u00e9 tablas usar, y conectarlas (`FROM` + `JOIN`)\n2. Mant\u00e9n s\u00f3lo las filas que se aplican a las condiciones (`WHERE`)\n3. Agrupar los datos por el nivel requerido (si es necesario) (`GROUP BY`)\n4. Elige qu\u00e9 informaci\u00f3n quieres tener en la nueva tabla (`SELECT`). Puede tener s\u00f3lo datos en bruto (si no hay agrupaci\u00f3n), o una combinaci\u00f3n de dimensiones (de la agrupaci\u00f3n), y m\u00e9tricas.\n\nAhora, tomamos eso para mostrarlo de la siguiente manera:\n\n5. Ordenar la salida de la nueva tabla (`ORDER BY`)\n6. Agregar m\u00e1s condiciones que filtrar\u00edan la nueva tabla creada (`HAVING`) \n7. L\u00edmite en n\u00famero de filas (`LIMIT`)\n\n","77fa733e":"## 6.2.2 Pr\u00e1ctica: Listar las temporadas en que un equipo visitante anot\u00f3 7 o m\u00e1s goles\n\nDeben listar las temporadas en que alg\u00fan equipo visitante haya anotado 7 o m\u00e1s goles. La tabla de resultados deber\u00e1 contener los campos `season`, `home_team_goal`, `away_team_goal` de la tabla `Match` de la base de datos de F\u00fatbol Europeo.\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","1ef20541":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!-- Respuesta Listar 25 equipos del f\u00fatbol europeo\nSELECT id, team_long_name\nFROM Team\nLIMIT 25;\n-->","06809ed9":"## 4.1.5 Pr\u00e1ctica: Traer la m\u00e1xima cantidad de goles que un equipo visitante anot\u00f3 en los juegos de la tabla Match\n\nDeben traer la m\u00e1xima cantidad de goles un equipo visitante `away_team_goal` almacenados en la tabla `Match` de la base de datos de F\u00fatbol Europeo. La tabla de resultados deber\u00e1 mostrar \u00fanicamente el n\u00famero con cantidad de goles. \n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","ee979bae":"# 7. Sentencia ORDER BY\n\nLa sentencia `ORDER BY` se utiliza para ordenar el conjunto de resultados en orden ascendente o descendente. Por defecto, los registros se ordenan en orden ascendente `ASC`. Para ordenar los registros en orden descendente, utilice la palabra `DESC`.\n\nSintaxis de `ORDER BY`\n\n`SELECT\u00a0column1,\u00a0column2, ...`\n\n`FROM\u00a0table_name`\n\n`WHERE\u00a0condition`\n\n`ORDER BY column2 ASC`|`DESC;`\n","5fe57ff3":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!-- Respuesta Traer el n\u00famero de etapas jugadas de la tabla Match\nSELECT COUNT(DISTINCT stage)\nFROM Match;\n-->\n","a41458db":"# 4. Funciones agregativas\/ M\u00e9tricas\n\nTodas las m\u00e9tricas tienen que ser agregadas usando funciones. Las funciones agregativas m\u00e1s comunes son: \n\n* `SUM()` | Sumatoria total de una columna tipo num\u00e9rica.\n* `COUNT()` | Devuelve la cantidad de filas.\n* `COUNT(DISTINCT)` | Devuelve la cantidad de filas distintas o diferentes.\n* `AVG()` | Promedia los valores de una columna tipo num\u00e9rica.\n* `MIN()` | Menor valor dentro de la columna especificada.\n* `MAX()` | Mayor valor dentro de la columna especificada.\n\nLa sintaxis de las m\u00e9tricas en la sentencia `SELECT` es as\u00ed:\n* `SUM()`\n\n`SELECT SUM(column1), column2...`\n\n`FROM table_name`\n\n* `COUNT()`\n\n`SELECT COUNT(column1), column2...`\n\n`FROM table_name`\n\n* `COUNT(DISTINCT)`\n\n`SELECT COUNT(DISTINCT column1), column2...`\n\n`FROM table_name`\n\n* `AVG()`\n\n`SELECT AVG(column1), column2...`\n\n`FROM table_name`\n\n\n* `MIN()`\n\n`SELECT MIN(column1), column2...`\n\n`FROM table_name`\n\n\n* `MAX()`\n\n`SELECT MAX(column1), column2...`\n\n`FROM table_name`\n","7e0848cb":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!-- Respuesta Traer el promedio de goles por partido de la tabla Match\nSELECT AVG(home_team_goal+away_team_goal)\nFROM Match;\n-->\n","e35a449f":"<button>Clic aqu\u00ed para la soluci\u00f3n <\/button>\n<!-- Respuesta de An\u00e1lisis sobre los equipos que m\u00e1s goles realizaron jugando como locales\nSELECT Country.name AS Country, \n       League.name AS League, \n       Home_Team.team_long_name AS Team,\n       Match.season AS Season,\n       COUNT(DISTINCT Match.stage) AS Stages,\n       SUM(home_team_goal) AS sum_goals,\n       ROUND(AVG(home_team_goal),2) AS avg_goals\nFROM Match\nJOIN Country ON Country.id = Match.country_id\nJOIN League ON League.id = Match.league_id\nLEFT JOIN Team AS Home_team ON Home_Team.team_api_id = Match.home_team_api_id\nLEFT JOIN Team AS Away_team ON Away_Team.team_api_id = Match.home_team_api_id\nWHERE Country IN ('Spain', 'Germany', 'England')\nGROUP BY League.name, Team, Season\nHAVING SUM(home_team_goal) > 50\nORDER BY season DESC, sum_goals DESC ;\n-->","09c7aa78":"## 1.3 Estructura b\u00e1sica de consulta en SQL\n\nLa estructura b\u00e1sica de una consulta es muy simple: \n* Se define lo que se quiere ver despu\u00e9s del `SELECT`\n* Se eligen las tablas a consultar despu\u00e9s del `FROM` \n* Se a\u00f1aden las condiciones para los datos que se quieren utilizar de la(s) tabla(s) despu\u00e9s del `WHERE`\n\n`SELECT\u00a0column1,\u00a0column2, ...`\n\n`FROM\u00a0table_name`\n\n`WHERE condition;`","c9b42f0b":"<button>Clic aqu\u00ed para la soluci\u00f3n <\/button>\n<!-- Respuesta de An\u00e1lisis del cambio en overall rating y potential de Cristiano Ronaldo por edad.\nSELECT Player.player_name AS Player,\n                DATE(Attributes.date)-DATE(Player.birthday) AS Age,\n                Attributes.overall_rating AS Rating,\n                Attributes.potential AS Potential,\n                DATE(Attributes.date) AS RatingDate\n                FROM Player_Attributes AS Attributes \n                JOIN Player ON Player.player_api_id = Attributes.player_api_id\n                WHERE Player = 'Cristiano Ronaldo'\n                GROUP BY Age\n                ORDER BY RatingDate DESC\n                LIMIT 15;\n\n-->","4ae7201f":"## 4.1.2 Pr\u00e1ctica: Traer el n\u00famero de etapas jugadas de la tabla Match\n\nDeben traer el n\u00famero de etapas `stage` almacenados en la tabla `Match` de la base de datos de F\u00fatbol Europeo. La tabla de resultados deber\u00e1 mostrar \u00fanicamente el n\u00famero con la cantidad de etapas **diferentes**. \n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","c777b354":"## 7.1.1 Ejemplo: Listar a los equipos y ordenarlos por nombre\n\n\nQueremos listar a los equipos de la tabla `Team` y ordenarlos ascedentemente por nombre `team_long_name`. Adicionalmente, vamos a limitar la lista a 25 registros.\n\nEjecuta (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo\n","7b37b1b2":"# Funci\u00f3n `ROUND()` para redondear\n\nEn SQLite La funci\u00f3n `ROUND()` se utiliza para redondear un n\u00famero decimal dado a las posiciones decimales especificadas bas\u00e1ndose en un n\u00faumero de decimales dado. \n\nLa sintaxis, es la siguiente:\n`ROUND( number, decimal_value )`\n\n* number: Es el n\u00famero decimal que necesitamos redondear.\n* decimal_value: Define el n\u00famero de decimales a redondear.\n    * Si decimal_value es un n\u00famero positivo significa que el n\u00famero se redondea hasta cerca de su valor.\n    * En caso de que decimal_value se omita o sea negativo, se toma el valor por defecto que es cero (0) y el n\u00famero se redondear\u00e1 a cero (0) decimales, pero el n\u00famero seguir\u00e1 siendo un valor de punto flotante.\n\n\n## 10.1.1 Ejemplo: An\u00e1lisis de goles por temporada en las ligas de Espa\u00f1a, Francia e Inglaterra.\n\nQueremos saber en qu\u00e9 temporada el promedio de goles de equipos locales estuvo entre 1.4 y 1.6, para las ligas de `Spain`, `France` y `England`. \n\nLa tabla de resultados deber\u00e1 mostrar:\n* La temporada `season`, \n* el `Country.name` bajo alias `country`, \n* el `League.name` bajo alias `league`, \n* el promedio de goles hechos por equipos locales, bajo el alias `avg_local_goals`, redondeando con 2 decimales,\n* el promedio de goles hechos por equipos visitantes, bajo el alias `avg_visitor_goals`, redondeando con 2 decimales,\n* el total de goles por temporada y liga, bajo el alias `total_goals`, \n\nEsta informaci\u00f3n se encuentra repartida entre las tablas: `Match`, `Country` y `League`. Teniendo en cuenta que las claves compartidas entre tablas son estas:\n\n* `Country.id = Match.country_id` \n\n* `League.id = Match.league_id`\n\n","dafc8efd":"## 13.3 Pr\u00e1ctica: Comparaci\u00f3n de tipo de juego entre el FC Barcelona y Real Madrid FC - WHERE\n\nEn esta ocasi\u00f3n se requiere lo mismo que el ejericio anterior, pero mediante el uso de WHERE.","1f6c8a64":"# Funci\u00f3n `DATE()`\nPara calcular la edad se puede usar la funcion `DATE()`. Esta funci\u00f3n extrae la parte de fecha de una expresi\u00f3n tipo date o tipo date time y devuelve una cadena de fecha en este formato: AAAA-MM-DD.\n\nSu sintaxis es la siguiente:\n\n`SELECT DATE(Datetime_field)\nFROM table;`\n\n## 10.1.4 Pr\u00e1ctica: An\u00e1lisis del cambio en overall rating y potential de Cristiano Ronaldo por edad.\n\nSe requiere visualizar el cambio de en `overall_rating` y `potential` de `Cristiano Ronaldo` por edad.\n\nEntonces, la tabla de resultado deber\u00e1 contener los siguientes campos: `player_name`, la edad nombrada como `Age`, `overall_rating`, `potential` y `date` como `RatingDate`.\n\nLas tablas involucradas son `Player_Attributes` y `Player`. Que tienen una relaci\u00f3n a trav\u00e9s del campo `player_api_id` con mismo nombre en ambas tablas. \n\n\n\u00a1\u00c9xitos!\n\n\n","b06a71ea":"# 10. Sentencia HAVING\n\nLa sentencia `HAVING` fue a\u00f1adida a SQL porque la palabra clave `WHERE` no pod\u00eda ser usada con funciones agregativas. Entonces, `HAVING` es como el `WHERE` para las funciones agregativas.\n\nLa sintaxis de `HAVING` es as\u00ed:\n\n`SELECT column_name(s)`\n\n`FROM table_name`\n\n`WHERE condition`\n\n`GROUP BY column_name(s)`\n\n`HAVING condition`\n\n`ORDER BY column_name(s); `\n\n\n`HAVING` a\u00f1ade otra capa de filtrado a los datos, esta vez sobre el resultado de la tabla **despu\u00e9s** de la agrupaci\u00f3n. Muchas veces se utiliza para limpiar la salida.","a746484e":"## 6.4.1 Pr\u00e1ctica: Traer la tabla de pa\u00edses \u00fanicamente con Italia\n\nDeben filtrar la tabla de pa\u00edses y traer \u00fanicamente a `Italy`. La tabla de resultados deber\u00e1 contener los campos `id` y `name` de la tabla `Country` de la base de datos de F\u00fatbol Europeo.\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo\n","06676cb6":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!-- Respuesta Lista detallada de juegos\nSELECT Match.id,\n Country.name AS country_name,\n League.name AS league_name,\n Match.season,\n Match.stage,\n DATE(date) AS Date,\n HomeTeam.team_long_name AS home_team,\n Match.home_team_goal,\n AwayTeam.team_long_name AS away_team,\n Match.away_team_goal\nFROM Match\nJOIN Country ON Country.id = Match.country_id\nJOIN League ON League.id = Match.league_id\nJOIN Team AS HomeTeam ON HomeTeam.team_api_id = Match.home_team_api_id\nJOIN Team AS AwayTeam ON AwayTeam.team_api_id = Match.away_team_api_id        \nWHERE country_name = 'Spain'\nORDER BY date\nLIMIT 10;\n-->","cd958eee":"## 7.1.3 Pr\u00e1ctica: Listar el id de los 15 jugadores con menos peso\n\nDeben listar la tabla `Player` de forma ascendente `ASC` por el campo `weight`. La tabla de resultados deber\u00e1 contener los campos `id`, `player_name` y `weight`.\n\nPara ello deber\u00e1n escribir la consulta SQL entre un par de 3 comillas dobles: `\"\"\"consulta SQL\"\"\"` despu\u00e9s de la palabra `query =`\n\nUna vez que est\u00e9n lo tengan listo, ejecuten (haciendo clic en ejecutar o Shift+Enter) el c\u00f3dido de abajo","fa3a4e07":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!--Respuesta Listar los jugadores que pesen entre 174 y 176 libras\nSELECT id, player_name, birthday, height, weight\nFROM Player\nWHERE weight BETWEEN 174 AND 176\nLIMIT 15;\n-->","6fa5bb5b":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!--Respuesta Comparaci\u00f3n de cantidad de partidos jugados en cierta temporada de Espa\u00f1a y B\u00e9lgica\nSELECT Country.name AS country_name,\nMatch.season,\nCOUNT(Match.id) AS count_matches\nFROM Match\nJOIN Country ON Country.id = Match.country_id\nWHERE Country.name IN ('Spain', 'Belgium') AND season = '2008\/2009'\nGROUP BY Country.name\nORDER BY count_matches DESC;\n-->","d03bc503":"<button>Clic aqu\u00ed para la soluci\u00f3n<\/button>\n<!-- Respuesta Queremos conocer cu\u00e1ntos equipos tienen cada clase de juego defensivo\nSELECT defencePressureClass, COUNT(id)\nFROM Team_Attributes\nGROUP BY defencePressureClass;\n-->","e656f926":"# 13. SUB QUERIES\n\nEl uso de subconsultas es una herramienta esencial en SQL, ya que permite manipular los datos de formas muy avanzadas sin necesidad de ning\u00fan script externo, y es especialmente importante cuando tus tablas est\u00e1n estructuradas de tal forma que no se pueden unir directamente.\n\n## 13.1 Ejemplo: Rating de Cristiano Ronaldo y Lionel Messi versus los dem\u00e1s jugadores.\n\nSe requiere comparar el promedio de `overall_rating` y `potential` de `Cristiano Ronaldo` y `Lionel Messi` contra el promedio de los dem\u00e1s jugadores de la base de datos.\n\nEntonces, la tabla de resultado deber\u00e1 contener los siguientes campos: `player_name`, el promedio redondeado con 2 decimales de `overall_rating` y el promedio redondeado con 2 decimales de `potential`. Mostrando a los dem\u00e1s jugadores como \"Others\".\n\nLas tablas involucradas son `Player_Attributes` y `Player`. Que tienen una relaci\u00f3n en el campo `player_api_id` que tiene ese nombre en ambas tablas. \n\n\n\u00a1\u00c9xitos!"}}