{"cell_type":{"43fb23c3":"code","2d8331ce":"code","5fe6fdb4":"code","1e078b8b":"code","9cb3e230":"code","48030acc":"code","111b80d3":"code","a6a3157f":"code","2c31bd3a":"code","745062b2":"code","369ea21c":"code","6b3825d4":"code","58de44c5":"code","36cbb89a":"code","1da4ff33":"code","e65400e7":"code","abd1bb83":"code","045eed89":"markdown","8be472f2":"markdown","2adcb79b":"markdown","3c79c250":"markdown","2f5b31d1":"markdown"},"source":{"43fb23c3":"import numpy as np\nimport pandas as pd\nimport random\nimport lightgbm as lgb\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold\nimport optuna","2d8331ce":"data0 = pd.read_csv('..\/input\/iris\/Iris.csv')\ndata0[0:2].T","5fe6fdb4":"Name=data0['Species'].unique()\nprint(Name)","1e078b8b":"NUM=[]\nfor i in range(data0['Species'].nunique()):\n    NUM+=[i]\n    \nnormal_mapping=dict(zip(Name,NUM)) \nreverse_mapping=dict(zip(NUM,Name)) ","9cb3e230":"n=len(data0)\nprint(n)","48030acc":"N=[]\nfor i in range(n):\n    N+=[i]\nrandom.shuffle(N)","111b80d3":"data0['Species']=data0['Species'].map(normal_mapping)","a6a3157f":"dataset=data0.drop('Species',axis=1)\ndatalabel=data0['Species']","2c31bd3a":"dataset=np.array(dataset)\ndatalabel=np.array(datalabel)","745062b2":"train=dataset[N[0:(n\/\/10)*8]]\ntest=dataset[N[(n\/\/10)*8:]]\ntrainy=datalabel[N[0:(n\/\/10)*8]]\ntesty=datalabel[N[(n\/\/10)*8:]]","369ea21c":"X_train = pd.DataFrame(train)\nY_train = pd.Series(trainy)\nX_test = pd.DataFrame(test)\nY_test = pd.Series(testy)","6b3825d4":"def objective(trial):\n    kf = KFold(n_splits=3)\n    gbm = lgb.LGBMClassifier(objective='binary')\n    oof = np.zeros(len(train))\n\n    for fold, (train_index, valid_index) in enumerate(kf.split(X_train, Y_train)):\n        train_x, valid_x = X_train.iloc[train_index], X_train.iloc[valid_index]\n        train_y, valid_y  = Y_train[train_index], Y_train[valid_index]\n        gbm = lgb.LGBMClassifier(objective='binary',\n                                 reg_alpha=trial.suggest_loguniform('reg_alpha', 1e-4, 100.0),    ######\n                                 reg_lambda=trial.suggest_loguniform('reg_lambda', 1e-4, 100.0),  ######\n                                 silent=True)\n        gbm.fit(train_x, train_y, eval_set = [(valid_x, valid_y)],\n                                 early_stopping_rounds=20,verbose= -1) \n        oof[valid_index] = gbm.predict(valid_x, num_iteration=gbm.best_iteration_)\n\n    accuracy = accuracy_score(Y_train, oof)\n    return 1.0 - accuracy","58de44c5":"study = optuna.create_study(sampler=optuna.samplers.RandomSampler(seed=0))\nstudy.optimize(objective, n_trials=100)","36cbb89a":"kf = KFold(n_splits=5)\noof = np.zeros(len(train))\nfor fold, (train_index, valid_index) in enumerate(kf.split(X_train, Y_train)):\n    train_x, valid_x = X_train.iloc[train_index], X_train.iloc[valid_index]\n    train_y, valid_y  = Y_train[train_index], Y_train[valid_index]\n\n    gbm2 = lgb.LGBMClassifier(objective='binary',\n                            reg_alpha=0.00022293330881290074,\n                            reg_lambda=0.04041101450049081)\n    gbm2.fit(train_x, train_y, eval_set = [(valid_x, valid_y)],\n                            early_stopping_rounds=20,verbose= -1)\n    oof[valid_index] = gbm2.predict(valid_x, num_iteration=gbm2.best_iteration_)\n\nround(accuracy_score(Y_train, oof), 3)","1da4ff33":"PRED=gbm2.predict(np.array(X_test))\nPRED[0:10]","e65400e7":"ANS=testy\nANS[0:10]","abd1bb83":"accuracy=accuracy_score(ANS,PRED)\nprint(accuracy)","045eed89":"# Data processing","8be472f2":"# Target setting","2adcb79b":"# Train and Test setting","3c79c250":"# Predict","2f5b31d1":"# Model and Optuna Tuning"}}