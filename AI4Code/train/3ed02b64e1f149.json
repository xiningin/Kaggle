{"cell_type":{"08e4523e":"code","b3de7e18":"code","e20108ae":"code","afea2830":"code","8d89a7b0":"code","fe1f0df1":"code","f92bf1ac":"code","b9fc17d9":"code","aca04fde":"code","a2e92ba0":"code","08ef1a48":"code","8603f528":"code","29ee29da":"code","3219d9e3":"code","422b2921":"code","0e18c8de":"code","2650b359":"code","8c9a626a":"code","ffd8e4af":"code","a9ecf7fa":"code","ffab2f59":"code","06c0101f":"code","ba9f1cd2":"code","c530ae74":"code","efa76a88":"code","e633e4ad":"code","dbd91c2f":"code","1acf47fa":"code","a2a2aa7c":"code","6e5c970d":"code","ab9914c9":"code","cbd81023":"code","3899fc5f":"code","29fc9d1b":"code","a8d0f6dc":"code","92035bf6":"code","e6f77027":"code","5a3f3b7b":"code","a37e4b52":"code","65d30444":"code","f6481a85":"markdown","7652519f":"markdown","5d025a95":"markdown","3c2205a6":"markdown","1b7f23ea":"markdown","668b6bd5":"markdown","a5c5513f":"markdown","a3a61bc2":"markdown","c2122681":"markdown","904d7e8c":"markdown","3e25a1b6":"markdown","a5139159":"markdown"},"source":{"08e4523e":"!pip install pycaret","b3de7e18":"import pandas as pd\nimport numpy as np\nfrom pycaret.classification import *\nimport seaborn as sns\nimport category_encoders as ce\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split,GridSearchCV\nfrom sklearn.preprocessing import MinMaxScaler\nimport lightgbm as lgb \nfrom sklearn.metrics import accuracy_score,classification_report,mean_squared_error,confusion_matrix\nimport pandas_profiling as pp","e20108ae":"df = pd.read_csv(\"..\/input\/melbourne-housing-snapshot\/melb_data.csv\")","afea2830":"df","8d89a7b0":"df.isnull().sum()","fe1f0df1":"df.corr()","f92bf1ac":"df.dtypes","b9fc17d9":"report = pp.ProfileReport(df)\nreport","aca04fde":"(df[\"Suburb\"].value_counts())","a2e92ba0":"df[\"Type\"].value_counts()","08ef1a48":"def ordinal_encoding(df,col,mapping):\n    ordinal_encoder = ce.OrdinalEncoder(cols = [col],return_df = True,mapping = [{'col':col,'mapping':mapping}])\n    df_final = ordinal_encoder.fit_transform(df)\n    return df_final\n\ndef target_mean_encoding(df,col1,col2):\n    target_mean_encoder=ce.TargetEncoder(cols=col1,return_df=True)\n    df_final = target_mean_encoder.fit_transform(df[col1],df[col2])\n    return df_final\n\ndef one_hot_encoding(df,column):\n    one_hot_encoder=ce.OneHotEncoder(cols=column,return_df=True,use_cat_names=True)\n    df_final = one_hot_encoder.fit_transform(df)\n    return df_final\n\ndef value_counts(df,col):\n    return df[col].value_counts()\n\ndef clean_date(df,col):\n    date = []\n    month = []\n    year = []\n    for i in df[col]:\n        date.append(int(i.split(\"\/\")[0]))\n        month.append(int(i.split(\"\/\")[1]))\n        year.append(int(i.split(\"\/\")[2]))\n    df[\"date\"]=date\n    df[\"month\"]=month\n    df[\"year\"]=year  \n    df.drop(col,axis = 1,inplace= True)\n    return df","8603f528":"df = ordinal_encoding(df,\"Type\",{'h':0,'u':1,'t':2})","29ee29da":"temp_df = target_mean_encoding(df,'Suburb','Type')\ndf[\"Suburb\"] = temp_df[\"Suburb\"]","3219d9e3":"df = one_hot_encoding(df,\"Method\")","422b2921":"temp_df = target_mean_encoding(df,'SellerG','Type')\ndf[\"SellerG\"] = temp_df[\"SellerG\"]","0e18c8de":"df = clean_date(df,\"Date\")","2650b359":"df.head()","8c9a626a":"df = one_hot_encoding(df,\"Regionname\")","ffd8e4af":"df[\"Car\"].fillna(0.0,inplace= True)","a9ecf7fa":"df","ffab2f59":"cols_to_be_removed = [\"Address\",\"BuildingArea\",\"YearBuilt\",\"CouncilArea\"]","06c0101f":"df.drop(cols_to_be_removed,inplace=True,axis = 1)","ba9f1cd2":"df.dtypes","c530ae74":"df.isnull().sum()","efa76a88":"df","e633e4ad":"train,test = train_test_split(df,random_state= 27,test_size = 0.2)","dbd91c2f":"experiment = setup(train,target=\"Type\",normalize=True)","1acf47fa":"compare_models()","a2a2aa7c":"X = df.drop(\"Type\",axis = 1)\nY = df[\"Type\"]","6e5c970d":"Scaler = MinMaxScaler()\ndf_normalized = Scaler.fit_transform(X)","ab9914c9":"cols_name = df.columns.to_list()\ncols_name.pop(2)","cbd81023":"X = pd.DataFrame(df_normalized,columns = cols_name)","3899fc5f":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y,random_state = 27,test_size = 0.2)","29fc9d1b":"estimator = lgb.LGBMClassifier(num_leaves=15)\nparam_grid = {\n    'learning_rate': [0.01, 0.1, 1],\n    'n_estimators': [20, 40,60,80,100,150]\n}\n\ngbm = GridSearchCV(estimator, param_grid, cv=3)\ngbm.fit(X_train, Y_train)\n\nprint('Best parameters found by grid search are:', gbm.best_params_)","a8d0f6dc":"gbm = lgb.LGBMClassifier(num_leaves=31,\n                        learning_rate=0.1,\n                        n_estimators=120)","92035bf6":"gbm.fit(X_train, Y_train,\n        eval_set=[(X_test, Y_test)],\n        eval_metric='binary_error')","e6f77027":"Y_pred = gbm.predict(X_test)","5a3f3b7b":"accuracy_lgbm = accuracy_score(Y_pred,Y_test)\naccuracy_lgbm","a37e4b52":"confusion_report_lgbm = confusion_matrix(Y_pred,Y_test)\nconfusion_report_lgbm","65d30444":"classification_report_lgbm = classification_report(Y_pred,Y_test)\nclassification_report_lgbm","f6481a85":"<center><h1 class=\"list-group-item list-group-item-success\">Melbourne House Type Prediction<\/h1><\/center>\n<img src = \"https:\/\/storage.googleapis.com\/kaggle-datasets-images\/2709\/4483\/d0ebddfbbd8bd5e3b2af1c21948dff0c\/dataset-cover.jpg\">\n<div style= \"padding:1em\">\n<h3 style=\"font-size:1.4em;font-weight:600\">CONTENT<\/h3>\n<p>&emsp;It was scraped from publicly available results posted every week from Domain.com.au. He cleaned it well, and now it's up to you to make data analysis magic. The dataset includes Address, Type of Real estate, Suburb, Method of Selling, Rooms, Price, Real Estate Agent, Date of Sale and distance from C.B.D.<\/p>\n<h3 style=\"font-size:1.4em;font-weight:600\">FEATURES<\/h3>\n<ul style = \"color:blue\">\n<li>Rooms: Number of rooms<\/li>\n<li>Price: Price in dollars<\/li>\n<li>Method: S - property sold; SP - property sold prior; PI - property passed in; PN - sold prior not disclosed; SN - sold not disclosed; <br>NB -  no bid; VB - vendor bid; W - withdrawn prior to auction; SA - sold after auction; SS - sold after auction price not disclosed.<br> N\/A - price or highest bid not available.<\/li>\n<li>Type: br - bedroom(s); h - house,cottage,villa, semi,terrace; u - unit, duplex; t - townhouse; dev site - development site;<br> o res - other residential.<\/li>\n<li>SellerG: Real Estate Agent<\/li>\n<li>Date: Date sold<\/li>\n<li>Distance: Distance from CBD<\/li>\n<li>Regionname: General Region (West, North West, North, North east \u2026etc)<\/li>\n<li>Propertycount: Number of properties that exist in the suburb.<\/li>\n<li>Bedroom2 : Scraped # of Bedrooms (from different source)<\/li>\n<li>Bathroom: Number of Bathrooms<\/li>\n<li>Car: Number of carspots<\/li>\n<li>Landsize: Land Size<\/li>\n<li>BuildingArea: Building Size<\/li>\n<li>CouncilArea: Governing council for the area<\/li>\n<\/ul>\n<h3 style=\"font-size:1.4em;font-weight:600\">METHODOLOGY<\/h3>\n<ul style = \"color:blue\">\n<li>Importing Packages<\/li>\n<li>Importing Data<\/li>\n<li>Analysing Data<\/li>\n<li>Data Overview<\/li>\n<li>Data Cleaning<\/li>\n<li>Filling NA Values<\/li>\n<li>Model Comparison<\/li>\n<li>Data Normalization<\/li>\n<li>Training Models<\/li>\n<li>Evaluation Metrics<\/li>\n<\/ul>\n<\/div>","7652519f":"<img src=\"https:\/\/www.littleoverlodge.co.uk\/wp-content\/uploads\/2018\/12\/hotel-derby-thank-you-2018-600x400.jpg\">","5d025a95":"# Evaluation Metrics","3c2205a6":"# Importing Data","1b7f23ea":"# Data Cleaning","668b6bd5":"# Data Overview","a5c5513f":"# Analysing Data","a3a61bc2":"# Filling NA Values","c2122681":"# Importing Packages","904d7e8c":"# Model Comparison","3e25a1b6":"# Training Models","a5139159":"# Data Normalization"}}