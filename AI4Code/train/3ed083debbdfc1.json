{"cell_type":{"34152d73":"code","782236ed":"code","b1fcad2a":"code","b5e2cff6":"code","b1f8126a":"code","d583e32d":"code","ad8afa44":"code","290a463e":"code","8ea35fdc":"code","f013bc5e":"code","79afc90b":"code","2381efb6":"code","89fb13fa":"code","c40206fb":"code","3d372491":"code","da3bd96c":"code","503ba67b":"code","3abc9f54":"code","86d51b91":"code","68549cad":"code","a7bfb497":"code","5e87248e":"code","25b5563e":"code","3dd6ae1b":"code","6a2df107":"code","2ed6783f":"code","b97ad59e":"code","4fdd36a6":"code","9e7e10ea":"code","7e15fd74":"code","a9313c75":"code","91b12bbe":"code","99216764":"code","065a27c9":"code","32beac7a":"code","858cbac9":"code","ac807a92":"code","9c0e018f":"code","553003b4":"code","9cb6ac01":"code","050baa30":"code","b055a770":"code","dded3691":"code","ed6e585a":"code","08634984":"code","9ed2d6eb":"code","d4424c89":"code","f04ad430":"code","5e652563":"code","d9308204":"code","79137c7d":"code","82f4cdcb":"code","df53ddfa":"code","8882bd0e":"code","5c8534d2":"code","4c2b501d":"code","e0282cfa":"code","4320856f":"code","ba241928":"code","4091055e":"code","8e19b4a7":"code","92163516":"code","0a3c6d92":"code","9982e0e5":"code","9a6736ad":"code","48fedf25":"code","44799880":"code","be353853":"code","a6e14172":"code","768cae97":"code","9d9b8c0f":"code","35e53a00":"code","d8f11b4a":"code","c1158e91":"code","a698d4fe":"code","f4310023":"code","b1b92722":"code","4ded2591":"code","78b1891b":"code","e5c212f5":"code","a342b27a":"code","1bb36339":"code","fa104aec":"code","3b11d49a":"code","aace4010":"code","2bb3243e":"code","9555121c":"code","6f63282e":"code","deb94eef":"code","76238747":"code","d4888593":"code","4fafccc8":"code","caa3f7b9":"code","ece0208d":"code","43c09385":"code","5216206f":"code","5c31dbc9":"code","f1627d28":"code","9789729f":"code","0927a626":"code","7968fe2e":"code","ab77ace0":"code","a090c6f4":"code","41dce2a6":"code","2de24b5c":"code","e2e4efd5":"code","9dc56e61":"code","7c42c05c":"code","b581a372":"code","8ad2edcd":"code","16ea0e07":"code","0a4393fe":"code","892d6d2a":"code","c372e173":"code","b905fac0":"code","8071f54a":"code","f52a87ce":"code","88002ca9":"markdown","97e1871b":"markdown","356e1441":"markdown","fddc1030":"markdown","2b04cee9":"markdown","4d800e14":"markdown","f8e3ee86":"markdown","6d9d1157":"markdown","655d3cb8":"markdown","89a9d059":"markdown","df9b3796":"markdown","2964fd3a":"markdown","4d5c4c5b":"markdown","b7471cfc":"markdown","a603a993":"markdown","73be4341":"markdown","cd1ea675":"markdown","ca786c15":"markdown","6b561a74":"markdown","7489d4ad":"markdown","5f600a5a":"markdown","82124323":"markdown","a68c2dab":"markdown","2d498d39":"markdown","32250053":"markdown","cde1c14c":"markdown","0c8f31e7":"markdown","5cfdd0f9":"markdown","05c19d49":"markdown","31928ec7":"markdown","60b3b5ca":"markdown","e86b9564":"markdown","fc489524":"markdown","c2fb1fce":"markdown","e5fe79fc":"markdown","fa7ae35d":"markdown","b2e9216d":"markdown","9f198e34":"markdown","ff454727":"markdown","cafec9aa":"markdown","f3280a0c":"markdown","787df895":"markdown","bf565b67":"markdown","d5e72e8c":"markdown","16daa24c":"markdown","10b6f673":"markdown","55d73ec1":"markdown","315b8fa6":"markdown","b9135321":"markdown","041f02ae":"markdown","3c82c44c":"markdown","74152311":"markdown","4e2475d4":"markdown","0d533f07":"markdown","03be6fe9":"markdown","5eaf1665":"markdown","818338ed":"markdown","42124978":"markdown","6cb944dc":"markdown","e10d2827":"markdown","ab5a4197":"markdown","e144e30a":"markdown","b8cc7d3c":"markdown","5e9bc2ac":"markdown","c6d0dc98":"markdown","e5a02ded":"markdown","1336038a":"markdown","38ebb139":"markdown","ce907dcb":"markdown","af1782c3":"markdown","c919e121":"markdown","b33593b2":"markdown","83a55568":"markdown","18bc64df":"markdown","16a48eb3":"markdown","b4448531":"markdown","72c3d0ae":"markdown","f4c0d3b3":"markdown","705bac0c":"markdown","a73bba09":"markdown","f17c9ff4":"markdown","148b881b":"markdown","687173db":"markdown","edb9aab1":"markdown","0f15e0cf":"markdown","7bee0900":"markdown","eccbf991":"markdown","cb9b999b":"markdown","91883dee":"markdown","7c64690a":"markdown","3ec7eb23":"markdown","ea5b1b58":"markdown","c208d4d9":"markdown"},"source":{"34152d73":"import os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set('talk', 'whitegrid', 'winter')\nfrom pylab import rcParams\nfrom sklearn.preprocessing import LabelEncoder\nfrom scipy import stats\nfrom scipy.special import boxcox1p\nimport warnings\nfrom pprint import pprint\n\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Global Settings\nwarnings.filterwarnings(\"ignore\") # To ignore warnings\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting float output to 3 decimal points\nrcParams['figure.figsize'] = 12,6 # Default figure size in inches","782236ed":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nsample_submission = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv')\n\n\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)\n\n# \u76ee\u7684\u95a2\u6570\ny_train = train['SalePrice']\n\n# all_data\u306f\u76ee\u7684\u95a2\u6570\u3092\u542b\u307e\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(columns='SalePrice', inplace=True)\n\n#check again the data size after dropping the 'Id' variable\nprint(\"\\nThe train data size after dropping Id feature is : {} \".format(train.shape)) \nprint(\"The test data size after dropping Id feature is : {} \".format(test.shape))","b1fcad2a":"def corr_check(train=train):\n    train_corr = train.corr(method= 'pearson') # Compute pairwise correlation of columns, excluding NA\/null values. pearson : standard correlation coefficient\n    sns.set(font_scale=0.9)\n    f, ax = plt.subplots(figsize=(25, 25))\n\n    # Generate a mask for the upper triangle\n    mask = np.triu(np.ones_like(train_corr, dtype=bool))\n\n    # Generate a custom diverging colormap\n    cmap = sns.diverging_palette(230, 20, as_cmap=True)\n    ax = sns.heatmap(train_corr, vmin=-1, vmax=1, mask=mask, cmap=cmap, center=0, annot = True, square=True, linewidths=.5, cbar_kws= {\"shrink\": .5, 'orientation': 'vertical'})\n    \ncorr_check()","b5e2cff6":"def missing_table(all_data=all_data):\n    Total_null = all_data.isnull().sum()\n    Percent_null = Total_null\/all_data.shape[0]\n    missing_table = pd.concat([Total_null, Percent_null], axis=1, keys=['Total', 'Percent']).sort_values('Total', ascending=False)\n    print('There are', len(missing_table[missing_table['Total']>0]),'cols with missing values.')\n    return missing_table.head(20)\n    \nmissing_table()","b1f8126a":"# PoolQC\u306e\u6b20\u640d\u5024\u3092\u4e00\u65e6None\u306b\u5909\u63db\nall_data['PoolQC'].fillna('None', inplace=True)\n\n# PoolQC\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306fordinal\u306a\u306e\u3067\u9806\u5e8f\u6027\u3092\u4fdd\u3064\u305f\u3081\u306bManual-Label encoding\u3092\u884c\u3046\u3002\nall_data['PoolQC'].replace(['Ex', 'Gd', 'TA', 'Fa', 'None'], [4,3,2,1,0], inplace=True)\n\n# Pool\u306e\u9762\u7a4d\uff10\u3067\u6b20\u640d\u5024\uff08\u30d7\u30fc\u30eb\u306a\u3057\u3092\u8868\u3059\uff09\nall_data['PoolArea'].fillna(0, inplace=True)","d583e32d":"# PoolQC\u306e\u6b20\u640d\u50242909\u306b\u5bfe\u3057\u3001PoolArea\u306f2906\u3068\u306a\u308a\u6570\u304c\u5408\u3063\u3066\u3044\u306a\u3044\u884c\u306e\u7279\u5b9a\nall_data[(all_data['PoolQC'] == 0) & (all_data['PoolArea'] > 0)]['PoolQC'].replace(2, inplace=True)","ad8afa44":"all_data['MiscFeature'].fillna('None', inplace=True)","290a463e":"all_data['Alley'].fillna('None', inplace=True)","8ea35fdc":"all_data['Fence'].fillna('None', inplace=True)\nall_data['Fence'].replace(['GdPrv', 'MnPrv', 'GdWo', 'MnWw', 'None'], [4,3,2,1,0], inplace=True)","f013bc5e":"all_data['FireplaceQu'].fillna('None', inplace=True)\n# \u5e8f\u5217\u5909\u6570\u306b\u5bfe\u3057\u3066\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\nall_data['FireplaceQu'].replace(['Ex', 'Gd', 'TA', 'Fa', 'Po', 'None'], [5,4,3,2,1,0], inplace=True)","79afc90b":"sns.regplot(all_data['FireplaceQu'].loc[:len(test)], y_train.loc[:len(test)])","2381efb6":"all_data['LotFrontage'].fillna(all_data['LotFrontage'].median(), inplace=True)","89fb13fa":"# GarageQual(=GarageCond)\u3068GarageType\u306eNA\u306e\u500b\u6570\u306e\u78ba\u8a8d\nmissing_GarageQual = all_data['GarageQual'].isna().sum()\nmissing_GarageType = all_data['GarageType'].isna().sum()\nprint('GarageQual:', missing_GarageQual, 'GarageType:', missing_GarageType)\n\n# \u4e00\u6642\u7684\u306bNone\u3067\u6b20\u640d\u5024\u3092\u88dc\u5b8c\nall_data['GarageQual'].fillna('None', inplace=True)\nall_data['GarageCond'].fillna('None', inplace=True)\nall_data['GarageType'].fillna('None', inplace=True)\n\n# GarageQual\u3068GarageType\u3067\u6b20\u640d\u5024\u304c\u7570\u306a\u308b\u7b87\u6240\u306e\u7279\u5b9a ---> Detced\u306b\u76f8\u5f53\u3059\u308b\u7b87\u6240\nall_data[(all_data['GarageQual'] == 'None') & (all_data['GarageType'] != 'None')]['GarageType']","c40206fb":"# GarageQual(GarageCond)\u306e\u6b20\u640d\u5834\u6240\u306fGarageType\u306eDetched\u306b\u5bfe\u5fdc\u3059\u308b\n# GarageType\u3068SalePrice\u306e\u95a2\u4fc2\u3092\u898b\u3066\u76f8\u95a2\u306e\u7a0b\u5ea6\u304b\u3089\u88dc\u5b8c\u5024\u3092\u5224\u65ad\u3059\u308b--->\uff13\u756a\u76ee\u306b\u76f8\u95a2\u304c\u9ad8\u3044\nsns.scatterplot(all_data['GarageType'].loc[:len(test)], y_train.loc[:len(test)])","3d372491":"# 3\u756a\u76ee\u306bSalePrice\u3068\u76f8\u95a2\u304c\u9ad8\u3044GarageQual\u306e\u6307\u6a19\u306fGd\nsns.scatterplot(all_data['GarageQual'].loc[:len(test)], y_train.loc[:len(test)])","da3bd96c":"# 3\u756a\u76ee\u306bSalePrice\u3068\u76f8\u95a2\u304c\u9ad8\u3044GarageCond\u306e\u6307\u6a19\u306fFA\nsns.scatterplot(all_data['GarageCond'].loc[:len(test)], y_train.loc[:len(test)])","503ba67b":"# \u9069\u5207\u306a\u6b20\u640d\u5024\u3092\u88dc\u5b8c\nall_data['GarageQual'].loc[2126] = 'Gd'\nall_data['GarageQual'].loc[2576] = 'Gd'\nall_data['GarageCond'].loc[2126] = 'Fa'\nall_data['GarageCond'].loc[2576] = 'Fa'\n\n# GarageQual\u306f\u5e8f\u5217\u5909\u6570\u306a\u306e\u3067\u30de\u30cb\u30e5\u30a2\u30eb\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u3002\nall_data['GarageQual'].replace(['Ex','Gd','TA','Fa','Po','None', 'NA'],[5,4,3,2,1,0,0],inplace=True)\n# GarageCond\u3082\u5e8f\u5217\u5909\u6570\u306a\u306e\u3067\u30de\u30cb\u30e5\u30a2\u30eb\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\nall_data['GarageCond'].replace(['Ex','Gd','TA','Fa','Po','None', 'NA'],[5,4,3,2,1,0,0],inplace=True)\n# GarageType\u306f\u5c3a\u5ea6\u5909\u6570\u306a\u306e\u3067None\u306e\u307e\u307e\u3067\u5f8c\u3067\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b","3abc9f54":"# \u4e00\u65e6None\u3067\u88dc\u5b8c\nall_data['GarageCars'].fillna('None', inplace=True)\nall_data['GarageArea'].fillna('None', inplace=True)","86d51b91":"# \u6b20\u640d\u3057\u3066\u3044\u308b\u5217\u306eGarageFinish\u3092\u307f\u308b\u3068\uff10\uff08No Garage)\u306e\u305f\u30810\u3092\u88dc\u5b8c\u3059\u308b\nall_data[all_data['GarageArea'] == 'None'].loc[:, ['GarageCars', 'GarageFinish']]\n\nall_data['GarageCars'].replace('None', 0, inplace=True)\nall_data['GarageArea'].replace('None', 0, inplace=True)","68549cad":"sns.distplot(all_data['GarageYrBlt'])","a7bfb497":"# GarageYrBlt\u306fSymetric\u3067\u306f\u306a\u3044\u306e\u3067\u4e2d\u9593\u5024\u3067\u88dc\u5b8c\nall_data['GarageYrBlt'].fillna(all_data['GarageYrBlt'].median(), inplace=True)","5e87248e":"# \u30de\u30cb\u30e5\u30a2\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u5909\u63db\nall_data['GarageFinish'].fillna('None', inplace=True)\nall_data['GarageFinish'].replace(['Fin','RFn','Unf','None'],[3,2,1,0], inplace=True)","25b5563e":"# \u76f8\u95a2\u95a2\u4fc2\u306e\u78ba\u8a8d\nsns.scatterplot(all_data['GarageFinish'].loc[:len(test)], y_train.loc[:len(test)])","3dd6ae1b":"# \u4e00\u5ea6NA\u3092None\u3067\u7f6e\u304d\u63db\u3048\u308b\nall_data['BsmtExposure'].fillna('None', inplace=True)\nall_data['BsmtCond'].fillna('None', inplace=True)\nall_data['BsmtQual'].fillna('None', inplace=True)\nall_data['BsmtFinType1'].fillna('None', inplace=True)\nall_data['BsmtFinType2'].fillna('None', inplace=True)","6a2df107":"# \u5e8f\u5217\u5909\u6570\u304b\u3064\u6b20\u640d\u5024\u306b\u610f\u5473\u304c\u3042\u308b\u305f\u3081\uff10\u3067\u88dc\u5b8c\u3057\u305f\u3002(\uff10\uff1aNo Basement)\nfor col in ['BsmtCond', 'BsmtQual']:\n    all_data[col].replace(['Ex','Gd','TA','Fa','Po','NA', 'None'], [5,4,3,2,1,0,0], inplace=True)\nall_data['BsmtExposure'].replace(['Gd','Av','Mn','No','NA','None'], [3,2,1,0,0,0], inplace=True)\n\n# \u5e8f\u5217\u5909\u6570\u304b\u3064\u6b20\u640d\u5024\u306b\u610f\u5473\u304c\u3042\u308b\u305f\u3081\uff10\u3067\u88dc\u5b8c\u3057\u305f\u3002(\uff10\uff1aNo Basement)\nfor col1 in ['BsmtFinType1', 'BsmtFinType2']:\n    all_data[col1].replace(['GLQ','ALQ','BLQ','Rec','LwQ','Unf','None'], [6,5,4,3,2,1,0], inplace=True)","2ed6783f":"# \u4e00\u65e6None\u3067\u88dc\u9593. \u5168\u3066Numeric\nall_data['TotalBsmtSF'].fillna('None', inplace=True)\nall_data['BsmtUnfSF'].fillna('None', inplace=True)\nall_data['BsmtFinSF1'].fillna('None', inplace=True)\nall_data['BsmtFinSF2'].fillna('None', inplace=True)\n\n# BsmtCond\u306e\u5024\u304c\uff10\u3067\u3042\u3063\u305f\u305f\u3081\u5168\u3066\u306e\u6b20\u640d\u5024\u306f\uff10\uff08NoBasement\uff09\u3067\u7f6e\u304d\u63db\u3048\u308b\nprint(all_data[(all_data['TotalBsmtSF'] == 'None')].loc[:, 'BsmtCond'])\nprint(all_data[(all_data['BsmtUnfSF'] == 'None')].loc[:, 'BsmtCond'])\nprint(all_data[(all_data['BsmtFinSF1'] == 'None')].loc[:, 'BsmtCond'])\nprint(all_data[(all_data['BsmtFinSF2'] == 'None')].loc[:, 'BsmtCond'])\n\n# None\u3092\uff10\u3067\u7f6e\u63db\nall_data['TotalBsmtSF'].replace('None', 0, inplace=True)\nall_data['BsmtUnfSF'].replace('None', 0, inplace=True)\nall_data['BsmtFinSF1'].replace('None', 0, inplace=True)\nall_data['BsmtFinSF2'].replace('None', 0, inplace=True)","b97ad59e":"# \u4e00\u65e6None\u3067\u7f6e\u304d\u63db\u3048\u308b\nall_data['Exterior1st'].fillna('None', inplace=True)\nall_data['Exterior2nd'].fillna('None', inplace=True)\n\n# \u4ed6\u306eExterior\u3092\u78ba\u8a8d\nprint(all_data[(all_data['Exterior2nd'] == 'None')].loc[:, 'ExterQual'])\n\n# \u6700\u983b\u5024\u3067\u7f6e\u63db\nall_data['Exterior1st'].replace('None', all_data['Exterior1st'].mode()[0], inplace=True)\nall_data['Exterior2nd'].replace('None', all_data['Exterior2nd'].mode()[0], inplace=True)","4fdd36a6":"# \u4e00\u65e6\u6b20\u640d\u5024\u306fNone\u3067\u57cb\u3081\u308b\nall_data['MasVnrType'].fillna('None', inplace=True)\nall_data['MasVnrArea'].fillna('None', inplace=True)","9e7e10ea":"# MasVnrArea: \uff10\u3067\u6b20\u640d\u306e\u60c5\u5831\u3092\u4e0e\u3048\u308b\nall_data['MasVnrArea'].replace('None',0, inplace=True)\n\n# Stone\u3068BrkFace\u304c\u9ad8\u4fa1\u306a\u50be\u5411\u3067\u305f\u3060\u306e\u77f3\u3084Brkcmn\u304c\u5b89\u305d\u3046\u306a\u306e\u3067\u3053\u306e\u5e8f\u5217\u3067\u5909\u6570\u3092\u4f5c\u308b\nsns.scatterplot(all_data['MasVnrType'].loc[:len(test)], y_train.loc[:len(test)])\nall_data['MasVnrType'].replace(['BrkFace', 'Stone', 'BrkCmn', 'None'], [2,2,1,0], inplace=True)","7e15fd74":"# 4 NAs. \u30ab\u30c6\u30b4\u30ea\u5909\u6570\u304b\u3064\u540d\u7fa9\u5c3a\u5ea6\u306a\u306e\u3067\u6700\u983b\u5024\u3067\u88dc\u5b8c.\u6700\u983b\u5024\u306f\u8907\u6570\u500b\u306e\u5024\u3092\u8fd4\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u660e\u793a\u7684\u306b\u4f55\u756a\u76ee\u306e\u6700\u983b\u5024\u3092\u4f7f\u7528\u3059\u308b\u304b\u3092\u66f8\u304f\u3002\nall_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0], inplace=True)","a9313c75":"# \u4e00\u65e6None\u3067\u57cb\u3081\u308b\nall_data['BsmtHalfBath'].fillna('None', inplace=True)\nall_data['BsmtFullBath'].fillna('None', inplace=True)\n\n# BsmtHalfBath\u306e\u6b20\u640d\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u7528\u3044\u3066BsmtQual\u306a\u3069\u306e\u5024\u3092\u78ba\u8a8d\u3002--->0\nall_data[all_data['BsmtHalfBath'] == 'None'].loc[:,['BsmtQual', 'BsmtCond']]","91b12bbe":"# \u6b20\u640d\u5024\u3092\uff10\u3067\u7f6e\u63db\u3059\u308b\nall_data['BsmtHalfBath'].replace('None', 0, inplace=True)\nall_data['BsmtFullBath'].replace('None', 0, inplace=True)","99216764":"print(all_data['Utilities'].value_counts())\n\n# \u3053\u306e\u7279\u5fb4\u91cf\u3092\u524a\u9664\u3059\u308b\n# all_data['Utilities'] = None\nall_data.drop(columns='Utilities', inplace=True)","065a27c9":"# \u6700\u983b\u5024\u3067\u88dc\u5b8c\nall_data['Functional'].fillna(all_data['Functional'].mode()[0], inplace=True)\n\n# \u5e8f\u5217\u5909\u6570\u306a\u306e\u3067\u30de\u30cb\u30e5\u30a2\u30eb\u3067\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\nall_data['Functional'].replace(['Typ', 'Min1', 'Min2','Mod', 'Maj1', 'Maj2', 'Sev', 'Sal'], [7,6,5,4,3,2,1,0], inplace=True)","32beac7a":"all_data['Electrical'].fillna(all_data['Electrical'].mode()[0], inplace=True)","858cbac9":"all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0], inplace=True)\nall_data['KitchenQual'].replace(['Ex', 'Gd', 'TA', 'Fa', 'Poor'], [4,3,2,1,0], inplace=True)","ac807a92":"all_data['SaleType'].fillna(all_data['SaleType'].mode()[0], inplace=True)","9c0e018f":"all_data = all_data.drop(['Street', 'PoolQC',], axis=1)\nprint('Shape of all_data= {}'.format(all_data.shape))","553003b4":"# \u5e8f\u5217\u5909\u6570\u306e\u5909\u63db\u3092\u884c\u3046\u305f\u3081object\u30bf\u30a4\u30d7\u306e\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\npd.set_option('display.max_columns', 40)\nall_data.select_dtypes(include='object')","9cb6ac01":"# \u5e8f\u5217\u5909\u6570\u306b\u7f6e\u63db\nall_data['ExterQual'].replace(['Ex', 'Gd', 'TA', 'Fa', 'Po'], [4,3,2,1,0], inplace=True)\n\nall_data['ExterCond'].replace(['Ex', 'Gd', 'TA', 'Fa', 'Po'], [4,3,2,1,0], inplace=True)\n\nall_data['HeatingQC'].replace(['Ex', 'Gd', 'TA', 'Fa', 'Po'], [4,3,2,1,0], inplace=True)\n\nall_data['LotShape'].replace(['Reg', 'IR1', 'IR2', 'IR3'], [3,2,1,0], inplace=True)\n\nall_data['LandContour'].replace(['Lvl', 'Bnk', 'HLS', 'Low'], [3,2,1,0], inplace=True)\n\nall_data['LotConfig'].replace(['Inside', 'FR2', 'Corner', 'CulDSac', 'FR3'], [4,3,2,1,0], inplace=True)\n\nall_data['LandSlope'].replace(['Gtl', 'Mod', 'Sev'], [2,1,0], inplace=True)\n\nall_data['BldgType'].replace(['1Fam', '2fmCon', 'Duplex', 'TwnhsE', 'Twnhs'], [4,3,2,1,0], inplace=True)\n\nall_data['RoofStyle'].replace(['Gable', 'Hip', 'Gambrel', 'Mansard', 'Flat', 'Shed'], [5,4,3,2,1,0], inplace=True)\n\nall_data['RoofMatl'].replace(['ClyTile', 'CompShg', 'Membran', 'Metal', 'Roll', 'Tar&Grv', 'WdShake', 'WdShngl'], [7,6,5,4,3,2,1,0], inplace=True)\n\nall_data['GarageType'].replace(['2Types', 'Attchd', 'Basment', 'BuiltIn', 'CarPort', 'Detchd', 'None'], [6, 5, 4, 3, 2, 1, 0], inplace = True)\n\nall_data['PavedDrive'].replace(['Y', 'P', 'N'], [2, 1, 0], inplace = True)","050baa30":"# \u6570\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u304c\u5b9f\u969b\u306f\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u3082\u306e\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\nall_data['YrSold'] = all_data['YrSold'].apply(str)\nall_data['MoSold'] = all_data['MoSold'].apply(str)","b055a770":"#### object\u30bf\u30a4\u30d7\u306e\u30c7\u30fc\u30bf\u3092\u62bd\u51fa\u3057\u3066\u5c3a\u5ea6\u5909\u6570\u306e\u307f\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\npd.set_option('display.max_columns', 60)\nall_data.select_dtypes(include='object')","dded3691":"def tri_heatmap(all_data=all_data, target='SalePrice'):\n    # SalePrice\u90e8\u5206\u306bNA\u304c\u5165\u3063\u3066\u3044\u308b\u884c\u3092\u542b\u3081\u308b\u3068\u76f8\u95a2\u884c\u5217\u304c\u8868\u793a\u3055\u308c\u306a\u304f\u306a\u308b\u305f\u3081\u6ce8\u610f\u3002\n    train_temp = all_data.loc[:len(test), :].copy()\n\n    # \u76f8\u95a2\u884c\u5217\u306e\u4f5c\u6210\n    corr_mat = train_temp.corr()\n    train_corr = corr_mat.nlargest(20, target)[target].index\n    cm = np.corrcoef(train_temp[train_corr].values.T)\n\n    sns.set(font_scale=0.9)\n    f, ax = plt.subplots(figsize=(25, 25))\n\n    # Generate a mask for the upper triangle\n    mask = np.triu(np.ones_like(cm, dtype=bool))\n\n\n    # Generate a custom diverging colormap\n    cmap = sns.diverging_palette(230, 20, as_cmap=True)\n    hm = sns.heatmap(cm, vmin=-1., vmax=1., mask=mask, cmap=cmap, center=0, annot = True, square=True, linewidths=.5, cbar_kws= {\"shrink\": .5, 'orientation': 'vertical'},\n                    yticklabels=train_corr.values, xticklabels=train_corr.values)\n    \nall_data_saleprice = pd.concat((all_data, y_train), axis=1)\ntri_heatmap(all_data=all_data_saleprice)","ed6e585a":"cat_feats = all_data.select_dtypes(include='object').columns","08634984":"# \u4e0b\u6e96\u5099\nRF_train_X = all_data.copy()\nRF_train_y = y_train.copy()\n\n# Quick LabelEncoding\nfor label in cat_feats:\n    le = LabelEncoder()\n    le.fit(RF_train_X[label])\n    RF_train_X[label] = le.transform(RF_train_X[label])","9ed2d6eb":"# \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\n# n_estimator: Numnber of trees\nrf = RandomForestRegressor(n_estimators=100,\n                           criterion=\"mse\",\n                           n_jobs=-1,\n                           random_state=46,\n                           max_features=7,\n                           oob_score=True)\n\nrf.fit(RF_train_X.loc[:len(test),:], RF_train_y)\nfti = rf.feature_importances_\n\n# #\u7279\u5fb4\u91cf\u306e\u540d\u524d\nlabel = RF_train_X.columns[0:]\n\n# #\u7279\u5fb4\u91cf\u306e\u91cd\u8981\u5ea6\u9806\uff08\u964d\u9806\uff09\nindices = np.argsort(fti)[::-1][:26]\n\nplt.title('Feature Importance')\nplt.bar(range(26),fti[indices], color='lightblue', align='center')\nplt.xticks(range(26), label[indices], rotation=90)\nplt.xlim([-1, 27])\nplt.tight_layout()\nplt.show()","d4424c89":"# fig = plt.figure(figsize=(20, 10))\n\n# ax1 = fig.add_subplot(241)\n# ax2 = fig.add_subplot(242)\n# ax3 = fig.add_subplot(243)\n# ax4 = fig.add_subplot(244)\n# ax5 = fig.add_subplot(245)\n# ax6 = fig.add_subplot(246)\n# ax7 = fig.add_subplot(247)\n# ax8 = fig.add_subplot(248)\n\n\n# sns.distplot(temp['GrLivArea'].loc[:train.shape[0]-1], temp['SalePrice'].loc[train.shape[0]:], ax=ax1)\n# sns.distplot(temp['TotRmsAbvGrd'].loc[:train.shape[0]-1], temp['SalePrice'].loc[train.shape[0]:], ax=ax2)\n# sns.distplot(temp['1stFlrSF'].loc[:train.shape[0]-1], temp['SalePrice'].loc[train.shape[0]:], ax=ax3)\n# sns.distplot(temp['2ndFlrSF'].loc[:train.shape[0]-1], temp['SalePrice'].loc[train.shape[0]:], ax=ax4)\n# sns.distplot(temp['TotalBsmtSF'].loc[:train.shape[0]-1], temp['SalePrice'].loc[train.shape[0]:], ax=ax5)\n# sns.distplot(temp['LotArea'].loc[:train.shape[0]-1], temp['SalePrice'].loc[train.shape[0]:], ax=ax6)\n# sns.distplot(temp['LotFrontage'].loc[:train.shape[0]-1], temp['SalePrice'].loc[train.shape[0]:], ax=ax7)\n# sns.distplot(temp['LowQualFinSF'].loc[:train.shape[0]-1], temp['SalePrice'].loc[train.shape[0]:], ax=ax8)\n\n# plt.tight_layout()","f04ad430":"# \u76f8\u95a2\u4fc2\u6570\u306e\u78ba\u8a8d\nnp.corrcoef(all_data['GrLivArea'], all_data['1stFlrSF']+all_data['2ndFlrSF'])","5e652563":"fig = plt.figure(figsize=(20, 10))\n\nax1 = fig.add_subplot(211)\nax2 = fig.add_subplot(212)\n\nsns.barplot(train['Neighborhood'], y_train, ax=ax1)\nsns.histplot(train['Neighborhood'], ax=ax2)\n\nplt.xticks(rotation=45)\nplt.show()","d9308204":"Qualities = ['OverallQual', 'ExterQual', 'BsmtQual', 'KitchenQual', 'GarageQual', 'FireplaceQu']\n\nfig = plt.figure(figsize=(15, 8))\nfor i,q in zip(np.arange(1,8),Qualities):\n    ax = fig.add_subplot(2,4,i)\n    sns.histplot(all_data[q], ax=ax)\nplt.tight_layout()","79137c7d":"np.corrcoef(all_data['OverallQual'], all_data['GarageQual'])","82f4cdcb":"fig = plt.figure(figsize=(20, 10))\n\nax1 = fig.add_subplot(211)\nax2 = fig.add_subplot(212)\n\nsns.barplot(all_data.loc[:len(test),'MSSubClass'], y_train, ax=ax1)\nsns.histplot(all_data['MSSubClass'], ax=ax2)\n\nplt.xticks(rotation=45)\nplt.show()","df53ddfa":"garages = ['GarageCars', 'GarageArea', 'GarageCond', 'GarageType', 'GarageQual', 'GarageFinish', 'GarageYrBlt']\nfig = plt.figure(figsize=(10,10))\nfor i,q in zip(np.arange(1,8), garages):\n    fig.add_subplot(3,3,i)\n    sns.histplot(all_data[q])","8882bd0e":"# \u76f8\u95a2\u4fc2\u6570\u306e\u78ba\u8a8d\nprint(np.corrcoef(all_data['GarageArea'], all_data['GarageCars']))\nprint(np.corrcoef(all_data['GarageQual'], all_data['GarageCond']))\nprint(np.corrcoef(all_data['GarageQual'], all_data['GarageCond'] + all_data['GarageFinish']))","5c8534d2":"Bsmt = ['BsmtQual', 'BsmtCond', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'BsmtFinType1', 'BsmtFinType2', 'BsmtExposure', 'TotalBsmtSF']\nfig = plt.figure(figsize=(10,10))\nfor i,q in zip(np.arange(1,10), Bsmt):\n    fig.add_subplot(3,3,i)\n    sns.histplot(all_data[q])","4c2b501d":"print(np.corrcoef(all_data['BsmtQual'], all_data['BsmtCond']))\nprint(np.corrcoef(all_data['BsmtFinSF1'], all_data['TotalBsmtSF']))\nprint(np.corrcoef(all_data['BsmtFinSF1'] + all_data['BsmtFinSF2'], all_data['TotalBsmtSF']))\n\n# \u76f8\u95a2\u4fc2\u6570\u304c\uff11\u306b\u306a\u308b\u3002\nprint(np.corrcoef(all_data['BsmtFinSF1'] + all_data['BsmtFinSF2'] + all_data['BsmtUnfSF'], all_data['TotalBsmtSF']))","e0282cfa":"from statsmodels.stats.outliers_influence import variance_inflation_factor \nfrom statsmodels.tools.tools import add_constant\n\ndef get_highest_vif_feature(df, thresh=5):\n    '''\n    Ref: https:\/\/stackoverflow.com\/questions\/42658379\/variance-inflation-factor-in-python\n    \n    Calculates VIF each feature in a pandas dataframe\n    A constant must be added to variance_inflation_factor or the results will be incorrect\n\n    :param df: the pandas dataframe containing only the predictor features, not the response variable\n    :param thresh: the max VIF value before the feature is removed from the dataframe\n    :return: dataframe with features removed\n    '''\n   \n    const = add_constant(df)\n    print(f'Shape of data after adding const column: {const.shape}')\n    cols = const.columns\n    \n    # Calculating VIF for each feature\n    vif_df = pd.Series([ (variance_inflation_factor(const.values, i)) for i in range(const.shape[1]) ], index= const.columns).to_frame()\n    \n    vif_df = vif_df.sort_values(by=0, ascending=False).rename(columns={0: 'VIF'})\n    vif_df = vif_df.drop('const')\n    vif_df = vif_df[vif_df['VIF'] > thresh]\n\n    if vif_df.empty:\n        print('DataFrame is empty!')\n        return None\n    else:\n        print(f'\\nFeatures above VIF threshold: {vif_df.to_dict()}')       \n        # Feature with highest VIF value\n        return list(vif_df.index)[0]\n        print(f'Lets delete the feature with highest VIF value: {list(vif_df.index)[0]}')\n\n\n# Selecting only numeric features\nprint(f'Shape of input data: {all_data.shape}')\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\nprint(f\"Calculating VIF for {len(numeric_feats)} numerical features\")\n\ndf_numeric = all_data[numeric_feats]\nprint(f'Shape of df_numeric: {df_numeric.shape}')\n    \nfeature_to_drop = None\nfeature_to_drop_list = []\nwhile True:\n    feature_to_drop = get_highest_vif_feature(df_numeric, thresh=5)\n    print(f'feature_to_drop: {feature_to_drop}')\n    if feature_to_drop is None:\n        print('No more features to drop!')\n        break\n    else:\n        feature_to_drop_list.append(feature_to_drop)\n        df_numeric = df_numeric.drop(feature_to_drop, axis=1)\n        print(f'Feature {feature_to_drop} droped from df_numeric')\n\npprint(f'\\nfeature_to_drop_list: {feature_to_drop_list}')","4320856f":"X_train = all_data.loc[:len(test)]","ba241928":"# TotalBathrooms\nprint(np.corrcoef(X_train['FullBath']+X_train['HalfBath']+X_train['BsmtFullBath']+X_train['BsmtHalfBath'], y_train))\n\n# \u91cd\u307f\u3092\u5909\u66f4\u3057\u3066\u307f\u308b\u3068\u76f8\u95a2\u4fc2\u6570\u304c\u4e0a\u6607\u3059\u308b\u3002\nprint(np.corrcoef(X_train['FullBath']+0.5*X_train['HalfBath']+X_train['BsmtFullBath']+0.5*X_train['BsmtHalfBath'], y_train))","4091055e":"# \u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u751f\u6210\nall_data['TotBathrooms'] = all_data['FullBath']+0.5*all_data['HalfBath']+all_data['BsmtFullBath']+0.5*all_data['BsmtHalfBath']","8e19b4a7":"fig = plt.figure(figsize=(20, 10))\n\nax1 = fig.add_subplot(211)\nax2 = fig.add_subplot(212)\n\nsns.boxplot(all_data['TotBathrooms'],y_train, ax=ax1)\nsns.histplot(all_data['TotBathrooms'], ax=ax2)\nplt.show()","92163516":"# \u7bc9\u5e74\u3068\u30ec\u30d5\u30a9\u30fc\u30e0\u5e74\u304c\u540c\u3058\u306a\u3089Remodel\u5909\u6570\u306f0\u3092\u8fd4\u3059\u3002\nall_data.loc[all_data['YearBuilt'] == all_data['YearRemodAdd'], 'Remod'] = 0\nall_data.loc[all_data['YearBuilt'] != all_data['YearRemodAdd'], 'Remod'] = 1\n\n# Age\u5909\u6570\u306e\u5b9a\u7fa9\nall_data['Age'] = all_data['YrSold'].astype(int) - all_data['YearRemodAdd']","0a3c6d92":"# \u30ea\u30d5\u30a9\u30fc\u30e0\u3057\u3066\u304b\u3089\u306e\u7d4c\u904e\u5e74\u6570\u304c\u5927\u304d\u304f\u306a\u308b\u307b\u3069\u3001\u58f2\u5374\u3057\u3066\u304b\u3089\u6642\u9593\u304c\u305f\u3064\u307b\u3069\u4fa1\u5024\u306f\u4e0b\u304c\u3063\u3066\u3044\u304f\u3002\nsns.regplot(all_data['Age'].loc[:len(test)], y_train)\nprint(np.corrcoef(all_data['Age'].loc[:len(test)], y_train))","9982e0e5":"# Remodel\u3055\u308c\u305f\u5bb6\u306e\u65b9\u304c\u4fa1\u5024\u304c\u5c11\u3057\u4f4e\u3044\u3053\u3068\u304c\u308f\u304b\u308b\u3002\nsns.barplot(all_data['Remod'].loc[:len(test)], y_train)","9a6736ad":"# YearSold\u3068YearBuilt\u306e\u95a2\u4fc2\u304b\u3089\u65b0\u7bc9\u306e\u5bb6\uff08\u5efa\u3063\u3066\u304b\u3089\uff11\u5e74\u4ee5\u5185\u306b\u58f2\u5374\u3055\u308c\u305f\u5bb6\uff09\u3068\u305d\u3046\u3067\u306f\u306a\u3044\u5bb6\u306e\u95a2\u4fc2\u6027\u3092\u898b\u3066\u307f\u308b\u3002\n\nall_data.loc[all_data['YrSold'].astype('int64') == all_data['YearBuilt'], 'IsNew'] = 1\nall_data.loc[all_data['YrSold'].astype('int64') != all_data['YearBuilt'], 'IsNew'] = 0\n\nsns.barplot(all_data['IsNew'].loc[:len(test)], y_train)","48fedf25":"# Neighborhood\u3067\u30bd\u30fc\u30c8\u3057\u3066SalePrice\u306e\u5e73\u5747\u5024\u3092\u7b97\u51fa\ntemp_mean = train.groupby('Neighborhood').mean()['SalePrice'].sort_values()\n\nsns.barplot(temp_mean.index, temp_mean.values)\nplt.hlines(xmin=0, xmax=temp_mean.index.shape, y=y_train.median())\nplt.xticks(rotation=45)\nplt.title('Mean SalePrice')\nplt.show()\n\n# Neighborhood\u3067\u30bd\u30fc\u30c8\u3057\u3066SalePrice\u306e\u5e73\u5747\u5024\u3092\u7b97\u51fa\ntemp_median = train.groupby('Neighborhood').median()['SalePrice'].sort_values()\n\nsns.barplot(temp_median.index, temp_median.values)\nplt.hlines(xmin=0, xmax=temp_median.index.shape, y=y_train.median())\nplt.xticks(rotation=45)\nplt.title('Median SalePrice')\nplt.show()","44799880":"# \u4e0a\u4f4d\uff13\u4f4d\u3092\uff12\u306b\u3001\u4e0b\u4f4d\uff15\u4f4d\u3092\uff10\u306b\u5909\u63db\nall_data['NeiRich'] = all_data['Neighborhood'].replace(to_replace=['NoRidge', 'NridgHt', 'StoneBr'], \n                                                       value=2).replace(to_replace=['MeadowV', 'IDOTRR', 'BrDale', 'BrkSide', 'Edwards'], \n                                                                        value=0)\n","be353853":"# \u305d\u306e\u4ed6\u30921\u306b\u5909\u63db: \u6b63\u898f\u8868\u73fe\u3067\u306e\u6587\u5b57\u5217\u3092\uff11\u306b\u7f6e\u63db\nall_data['NeiRich'] = all_data['NeiRich'].replace(regex=['[a-z]','[A-Z]'], value=1)","a6e14172":"all_data['NeiRich'].value_counts()","768cae97":"# TotalSqFeet\u306e\u4f5c\u6210\nall_data['TotalSqFeet'] = all_data['TotalBsmtSF'] + all_data['GrLivArea']\n\n# \u76ee\u7684\u5909\u6570\u3068\u306e\u95a2\u4fc2\u3092\u56f3\u793a\nsns.regplot(all_data['TotalSqFeet'].loc[:len(test)], y_train)\n\n# \u76f8\u95a2\u4fc2\u6570\u306e\u7b97\u51fa\nprint(np.corrcoef(all_data['TotalSqFeet'].loc[:len(test)], y_train))","9d9b8c0f":"# \u5916\u308c\u5024\u306e\u7279\u5b9a\noutlier_index = all_data['TotalSqFeet'].nlargest(n=2).index\n\n# \u5916\u308c\u5024\u3092\u4e2d\u9593\u5730\u3067\u88dc\u5b8c\nall_data['TotalSqFeet'].loc[[1298,2549]] = all_data['TotalSqFeet'].median()\n\n# \u5916\u308c\u5024\u3092\u51e6\u7406\u3057\u305f\u5f8c\u306e\u95a2\u4fc2\u56f3\nprint(np.corrcoef(all_data['TotalSqFeet'].loc[:len(test)], y_train))","35e53a00":"# \uff15\u3064\u306e\u30dd\u30fc\u30c1\u306e\u5909\u6570\u304b\u3089\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\nall_data['TotPorchSF'] = all_data['WoodDeckSF'] + all_data['OpenPorchSF'] + all_data['EnclosedPorch'] + all_data['3SsnPorch'] + all_data['ScreenPorch']","d8f11b4a":"# \u76f8\u95a2\u4fc2\u6570\u306e\u78ba\u8a8d\nprint(np.corrcoef(all_data['TotPorchSF'].loc[:len(test)], y_train))\n\n# \u95a2\u4fc2\u56f3\nsns.set(palette='winter')\nsns.regplot(all_data.loc[:len(test),'TotPorchSF'], y_train)","c1158e91":"all_data_saleprice = pd.concat((all_data, y_train), axis=1)\n\ntri_heatmap(all_data=all_data_saleprice)","a698d4fe":"# \u4e0d\u8981\u306a\u30ab\u30e9\u30e0\u3092\u524a\u9664\u3059\u308b\u3002(\u591a\u91cd\u5171\u7dda\u6027\u304c\u7591\u308f\u308c\u308b\u5217)\ndropping_list = ['YearRemodAdd', 'GarageYrBlt', 'GarageArea', 'GarageCond', 'TotalBsmtSF', 'TotRmsAbvGrd', 'BsmtFinSF1']\nall_data.drop(columns=dropping_list, inplace=True)","f4310023":"#Lets check the count of numerical and categorical features\ncat_feats = all_data.dtypes[all_data.dtypes == \"object\"].index\nnumeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\nprint(f\"Number of categorical features: {len(cat_feats)}, Numerical features: {len(numeric_feats)}\")\n\nskew_features = all_data[numeric_feats].apply(lambda x: stats.skew(x)).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew': skew_features})\n\nprint(f'Skew in numerical features. Shape of skewness: {skewness.shape}')\nskewness.head(10)\n\n# todo add histo and probability plot of skewed features","b1b92722":"high_skew = skew_features[skew_features > 0.5]\nskew_index = high_skew.index\n\nfor i in skew_index:\n    all_data[i] = np.log1p(all_data[i])","4ded2591":"# \u6587\u5b57\u5217\u306e\u3082\u306e\u304c\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u5c3a\u5ea6\u5909\u6570\u306e\u307f\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002\npd.set_option('display.max_columns', 50)\nall_data.select_dtypes(include='object').head()","78b1891b":"# \u6570\u5024\u5909\u6570\u3092\u9023\u7d9a(ordinal)\u5909\u6570\u306e\u307f\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u3002\ncat_feats_ordinal = all_data.select_dtypes(include='object').columns\n\n# get_dummies()\u3067One-hot encoding\u3059\u308b\nall_data = pd.get_dummies(all_data, columns=cat_feats_ordinal)","e5c212f5":"# all_data.loc[:,all_data.isna().sum() != 0].columns","a342b27a":"# all_data.loc[train.shape[0]:, all_data.sum() == 0]","1bb36339":"# \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5206\u5272\nX_train = all_data.loc[:len(test)]\n\nprint('X_train size:', X_train.shape)\nprint('y_train size:', y_train.shape)","fa104aec":"def distplot_probplot():    \n    \"\"\"\n     Plot histogram using normal distribution and probability plot\n    \"\"\"\n    \n    fig, ax = plt.subplots(1,2, figsize= (15,5))\n    fig.suptitle(\"SalesPrice Normal Distribution and Probability Plot\", fontsize= 15)\n    \n    # Plot using normal distribution \n    sns.distplot(y_train, fit=stats.norm,label='test_label2', ax = ax[0])\n      \n    # Probabiloty plot\n    stats.probplot(y_train, plot = ax[1])\n    \n    plt.show()  \n    \n    # Get the normal distribution fitted parameters\n    (mu, sigma) = stats.norm.fit(y_train)\n    print('mean= {:.2f}, sigma= {:.2f}, mode= {:.2f})'.format(mu, sigma, stats.mode(y_train)[0][0]))\n    \ndef normality_stats():\n    \"\"\"\n    Get Skewness, Kurtosis test stats.\n    \"\"\"\n\n    print(f\"Skewness: {abs(y_train).skew()}\")\n    print(f\"Kurtosis: {abs(y_train).kurt()}\")\n    \ndistplot_probplot()\nnormality_stats()","3b11d49a":"# \u5bfe\u6570\u5909\u63db\u3092\u3057\u3066\u6b6a\u5ea6\u3092\u88dc\u6b63\u3059\u308b\ny_train = np.log1p(y_train)\n\n# # \u5bfe\u79f0\u306a\u5206\u5e03\u306b\u306a\u3063\u305f\ndistplot_probplot()\nnormality_stats()","aace4010":"import re\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\n\nfrom sklearn import pipeline\nfrom sklearn import preprocessing\n\nfrom sklearn.linear_model import LinearRegression,ElasticNet, Lasso, BayesianRidge, Ridge\nfrom sklearn import svm\nfrom sklearn.ensemble import  GradientBoostingRegressor\nfrom lightgbm import LGBMRegressor\nfrom xgboost import XGBRegressor\nfrom mlxtend.regressor import  StackingCVRegressor\nfrom sklearn.model_selection import cross_validate\n\nfrom sklearn.metrics import mean_squared_error\nimport optuna","2bb3243e":"n_folds= 5\nrandom_state = 46\nkf = KFold(n_splits= n_folds, random_state= random_state, shuffle=True)","9555121c":"# \u4e88\u6e2c\u5024\u3068\u5b9f\u969b\u306e\u5024\u306e\u9593\u306ermse\ndef rmse(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))\n\ndef cv_rmse(model):\n    rmse = np.sqrt(-cross_val_score(model, X_train, y_train, scoring=\"neg_mean_squared_error\", cv=kf))\n    return (rmse)\n\ncv_scores = []\ncv_std = []\nkaggle_public_score= []\nmodels = ['linear_reg','bayesian_ridge_reg','lasso_reg','elastic_net_reg','ridge_reg','svr_reg', 'gbr_reg', 'lgbm_reg',\n                   'xgb_reg','stacking_cv_reg']\n\ndef score_model(model_reg):\n    score_model_reg = cv_rmse(model_reg)\n    print(f'score_model_reg => mean: {score_model_reg.mean()}, std: {score_model_reg.std()}')\n    cv_scores.append(score_model_reg.mean())\n    cv_std.append(score_model_reg.std())","6f63282e":"linear_reg = LinearRegression()\nscore_model(linear_reg)","deb94eef":"# \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\ndef objective(trial):\n    # define parameters: sample space and sample type\n    alpha_1 = trial.suggest_loguniform('alpha_1',1e-8,1e-5)\n    alpha_2 = trial.suggest_loguniform('alpha_2',1e-8,1e-5)\n    lambda_1 = trial.suggest_loguniform('lambda_1',1e-8,1e-5)\n    lambda_2 = trial.suggest_loguniform('lambda_2',1e-8,1e-5)\n    reg_baysianridge = BayesianRidge(alpha_1=alpha_1,alpha_2=alpha_1,lambda_1=lambda_1,lambda_2=lambda_2)\n    # define evaluation matrix as objective to return\n    score = cv_rmse(reg_baysianridge)\n    return score.mean()\n# create study\nstudy = optuna.create_study(direction='minimize',sampler=optuna.samplers.TPESampler())\n# run study to find best objective\nstudy.optimize(objective,\n               n_trials=50,   # \u8a66\u884c\u6570\uff08\u679d\u5208\u308a\u306e\u65b9\u6cd5\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3044\uff09\n               n_jobs=-1)     # \u4e26\u5217\u5b9f\u884c\u3059\u308b\u6570\nprint('Best model parameters:{} '.format(study.best_params))\nprint('Best score: {:.6f}'.format(study.best_value))","76238747":"bayesian_ridge_reg = BayesianRidge(alpha_1= 1.1082096418660657e-08,\n                               alpha_2= 2.8447219170176236e-07,\n                               lambda_1= 2.8045244511702467e-07,\n                               lambda_2= 9.998976228544691e-06,\n                               compute_score= False\n                              )\nscore_model(bayesian_ridge_reg)","d4888593":"# \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\ndef objective(trial):\n    # Define the parameter space\n    alpha = trial.suggest_float(\"alpha\", 1,100)\n    reg_ridge = pipeline.Pipeline([(\"scaling\", preprocessing.RobustScaler()),\n                               (\"ridge\", Ridge(alpha= alpha,\n                                               random_state= random_state))])\n    score = cv_rmse(reg_ridge)\n    return score.mean()\n\nstudy = optuna.create_study(direction=\"minimize\")\nstudy.optimize(objective, n_trials=50)\nprint(study.best_params)","4fafccc8":"# \u53ce\u675f\u306e\u78ba\u8a8d\n# plot_optimization_history(study)","caa3f7b9":"# \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u305f\u5b66\u7fd2\u7387\u3092\u8a2d\u5b9a\nridge_reg = pipeline.Pipeline([(\"scaling\", preprocessing.RobustScaler()),\n                               (\"ridge\", Ridge(alpha= 11.91946435680328,\n                                               random_state= random_state))])\n\nscore_model(ridge_reg)","ece0208d":"# \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\ndef objective(trial):\n    # Define the parameter space\n    alpha = trial.suggest_float(\"alpha\",1.0e-5,10.0)\n    reg_lasso = pipeline.Pipeline([(\"scaling\", preprocessing.RobustScaler()),\n                               (\"lasso\", Lasso(alpha=alpha,\n                                               random_state= random_state))])\n    score = cv_rmse(reg_lasso)\n    return score.mean()\nstudy = optuna.create_study(direction=\"minimize\")\nstudy.optimize(objective,\n               n_trials=50,\n               n_jobs=-1)\nprint(study.best_params)","43c09385":"lasso_reg = pipeline.Pipeline([(\"scaling\", preprocessing.RobustScaler()),\n                               (\"lasso\", Lasso(alpha= 0.011262757057466669,\n                                               random_state= random_state))])\n\nscore_model(lasso_reg)","5216206f":"# \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\ndef objective(trial):\n    # Define the parameter space\n    C = trial.suggest_float(\"C\",1.0, 100.0)\n    epsilon = trial.suggest_float(\"epsilon\",1.0e-5,1.0)\n    gamma = trial.suggest_float(\"gamma\",1.0e-5,1.0) \n    \n    # model\n    reg_svm = pipeline.Pipeline([(\"scaling\", preprocessing.RobustScaler()),\n                               (\"svr\", svm.SVR(C= C,\n                                               epsilon= epsilon,\n                                               gamma= gamma))])\n    \n    # score\n    score = cv_rmse(reg_svm)\n    return score.mean()\n\n# optimize\nstudy = optuna.create_study(direction=\"minimize\")\nstudy.optimize(objective,\n               n_trials=50)\nprint(study.best_params)","5c31dbc9":"# Score without hyperparameter tunning => mean: 0.12214361709700568, std: 0.010238209882594303\nsvr_reg = pipeline.Pipeline([(\"scaling\", preprocessing.RobustScaler()),\n                               (\"svr\", svm.SVR(C= 70.8461395955645,\n                                               epsilon= 0.023807407289868687,\n                                               gamma= 0.0024348987081239675))])\n\nscore_model(svr_reg)","f1627d28":"# \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u3057\u3066\u3044\u306a\u3044\nlgbm_reg = LGBMRegressor(objective='regression',\n                          lambda_l1=2.0e-06,\n                          lambda_l2=1.0e-07,\n                          num_leaves=7,\n                          feature_fraction=0.5,\n                          bagging_fraction=0.5,\n                          bagging_freq=7,\n                          min_child_samples=31,\n                          learning_rate=0.01,\n                          n_estimators=3000,\n                          max_bin=200,\n                          min_data_in_leaf=2,\n                          min_sum_hessian_in_leaf=0.002,\n                          random_state= random_state)\n\nscore_model(lgbm_reg)","9789729f":"# import optuna.integration.lightgbm as lgb_o\n# from sklearn.model_selection import train_test_split\n# import sklearn.datasets\n# from sklearn.metrics import r2_score\n\n# warnings.simplefilter('ignore')\n\n# # # scikit-learn\u3067\u304a\u8a66\u3057\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n# # boston = sklearn.datasets.load_boston()\n# X_trainval, X_test, y_trainval, y_test = train_test_split(X_train, y_train, random_state=0)\n# X_train, X_val, y_train, y_val = train_test_split(X_trainval, y_trainval, random_state=0)\n\n\n# # LightGBM\u7528\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5909\u63db\n# train = lgb_o.Dataset(X_train, y_train)\n# val = lgb_o.Dataset(X_val, y_val)\n\n# # \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30b5\u30fc\u30c1&\u30e2\u30c7\u30eb\u69cb\u7bc9\n# params = {'objective': 'regression',\n#           'metric': 'rmse',\n#           'random_seed':0} \n\n# gbm_o = lgb_o.train(params,\n#                     train,\n#                     valid_sets=val,\n#                     early_stopping_rounds=100,\n#                     verbose_eval=200,)\n\n# # \u8abf\u6574\u5f8c\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u306e\u5b9f\u884c\n# y_trainval_pred = gbm_o.predict(X_trainval,num_iteration=gbm_o.best_iteration)\n# y_test_pred = gbm_o.predict(X_test,num_iteration=gbm_o.best_iteration)\n\n# # \u30d9\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d6\u5f97\n# best_params = gbm_o.params\n# print(\"  Params: \")\n# for key, value in best_params.items():\n#     print(\"    {}: {}\".format(key, value))\n\n# # \u8a55\u4fa1\u30b9\u30b3\u30a2\u306e\u8a08\u7b97\n# r2_trainval = r2_score(y_trainval, y_trainval_pred)\n# r2_test = r2_score(y_test, y_test_pred)\n\n# print(\"r2_train:{0:.4}\".format(r2_trainval))\n# print(\"r2_test:{0:.4}\".format(r2_test))","0927a626":"# object\u3092\u6307\u5b9a\u3059\u308b\u3002\u6700\u9069\u5316\u3059\u308b\u5909\u6570\u3068\u30e2\u30c7\u30eb\u3092\u6307\u5b9a\u3002\n# \u6a5f\u68b0\u5b66\u7fd2\u3067\u4f7f\u3046\u5834\u5408\u3001\u6700\u9069\u5316\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3001\u30e2\u30c7\u30eb\u306e\u6307\u5b9a\u3068return\u306brmse\u306a\u3069\u306e\u8a55\u4fa1\u6307\u6a19\u3092\u6307\u5b9a\u3059\u308b\u3002\ndef objective(trial):\n    x = trial.suggest_float(\"x\", -10, 10)\n    return (x - 2) ** 2\n\n# study\u3092\u5b9a\u7fa9\u3057\u3066\u5b66\u7fd2\u306e\u6e96\u5099\u3092\u3059\u308b\u3002\nstudy = optuna.create_study()\n\n# \u6700\u9069\u5316\u306e\u305f\u3081\u306b\u306foptimize\u30e1\u30bd\u30c3\u30c9\u306bobjective\u3092\u6e21\u3059\u3002\nstudy.optimize(objective,\n               n_trials=100) # \u8a66\u884c\u6570\u306f100\u3067\u884c\u3063\u305f\u3002\n\n# \u6700\u9069\u5024\u3092\u3068\u3063\u3066\u304f\u308bbest_params.\u8f9e\u66f8\u5f62\u5f0f\u3067\u53d6\u3063\u3066\u304f\u308b\u306f\u305a\u3002\nbest_params = study.best_params\n\n# \u6700\u9069\u5024\u306e\u8868\u793a\u3002\nfound_x = best_params[\"x\"]\nprint(\"Found x: {}, (x - 2)^2: {}\".format(found_x, (found_x - 2) ** 2))","7968fe2e":"study = optuna.create_study()\nprint(f\"Sampler is {study.sampler.__class__.__name__}\")","ab77ace0":"# \u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\u306b\u5207\u308a\u66ff\u3048\nstudy = optuna.create_study(sampler=optuna.samplers.RandomSampler())\nprint(f\"Sampler is {study.sampler.__class__.__name__}\")\n\n# CMA-ES\u306b\u5207\u308a\u66ff\u3048\nstudy = optuna.create_study(sampler=optuna.samplers.CmaEsSampler())\nprint(f\"Sampler is {study.sampler.__class__.__name__}\")","a090c6f4":"# \u4e0b\u6e96\u5099\nimport lightgbm as lgb\nimport sklearn.metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nimport optuna\nfrom optuna.visualization import plot_contour\nfrom optuna.visualization import plot_edf\nfrom optuna.visualization import plot_intermediate_values\nfrom optuna.visualization import plot_optimization_history\nfrom optuna.visualization import plot_param_importances\n\n# \u304a\u307c\u308d\u3052\u306a\u304c\u3089\u3002\u3002\nSEED = 46\n\nnp.random.seed(SEED)","41dce2a6":"# objective\u306e\u8a2d\u5b9a\ndef objective(trial):\n    train_x, valid_x, train_y, valid_y = train_test_split(X_train, y_train, test_size=0.25)\n    dtrain = lgb.Dataset(train_x, label=train_y)\n    dvalid = lgb.Dataset(valid_x, label=valid_y)\n\n    param = {\n        \"objective\": \"regression\",    # \u56de\u5e30\u554f\u984c\u306e\u305f\u3081'regression'\n        \"metric\": \"rmse\",             # \u8a55\u4fa1\u6307\u6a19\u306frmse\n        \"verbosity\": -1,\n        \"boosting_type\": \"gbdt\",      # \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u52fe\u914d\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u6c7a\u5b9a\u6728.\u3053\u3053\u3082\u5b9f\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3067\u304d\u308b\uff08\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3067\uff09\n        # trial.suggest_float()\u3067\u6700\u9069\u5316\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u3002\n        \"num_leaves\": trial.suggest_int(\"num_leaves\",10,30,5),\n        \"n_estimators\": trial.suggest_int(\"n_estimators\",10,500,10),\n        \"max_depth\": trial.suggest_int(\"max_depth\",1,7,1),\n        \"bagging_fraction\": trial.suggest_float(\"bagging_fraction\", 0.4, 1.0),\n        \"bagging_freq\": trial.suggest_int(\"bagging_freq\", 1, 7),\n        \"min_child_samples\": trial.suggest_int(\"min_child_samples\", 5, 100),\n    }\n\n    # Add a callback for pruning.\n    pruning_callback = optuna.integration.LightGBMPruningCallback(trial, \"rmse\")\n    # LightGBM\u306e\u30e2\u30c7\u30ea\u30f3\u30b0\n    gbm = lgb.train(\n        param, dtrain, valid_sets=[dvalid], verbose_eval=False, callbacks=[pruning_callback]\n    )\n    # CV\u3092\u4f7f\u3063\u3066\u4e88\u6e2c\n    preds = gbm.predict(valid_x)\n    pred_labels = np.rint(preds)\n    # rmse\u306e\u8a08\u7b97\n    rmse = sklearn.metrics.mean_squared_error(valid_y, pred_labels)\n    return rmse","2de24b5c":"study = optuna.create_study(\n    direction=\"minimize\", \n    sampler=optuna.samplers.TPESampler(seed=SEED),          # Default\n    pruner=optuna.pruners.MedianPruner(n_warmup_steps=10),  # Defalut\n)\nstudy.optimize(objective, timeout=20)","e2e4efd5":"#  \u6700\u9069\u5024\u306e\u8868\u793a\npprint(study.best_params)","9dc56e61":"# plot_optimization_history(study)","7c42c05c":"# plot_intermediate_values(study)","b581a372":"# plot_contour(study)","8ad2edcd":"# plot_param_importances(study)","16ea0e07":"# \uff12\u5c64\u76ee\u306e\u30e2\u30c7\u30eb\u4f5c\u6210\u306e\u969b\u306b\u5143\u306e\u30c7\u30fc\u30bf\u3092\u542b\u3081\u308b\u5834\u5408\nfrom mlxtend.regressor import StackingCVRegressor\n\n# \u5206\u985e\u671f\u306e\u7f85\u5217\nestimators = [lgbm_reg, svr_reg, lasso_reg, ridge_reg, bayesian_ridge_reg, linear_reg]\n\n# \u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\nstacking_cv_reg = StackingCVRegressor(regressors= estimators,\n                                  meta_regressor = lgbm_reg, # \uff12\u5c64\u76ee\u3067\u4f7f\u3046\u30e2\u30c7\u30eb\n                                  use_features_in_secondary= True, # \u5143\u306e\u30c7\u30fc\u30bf\u3092\u542b\u3081\u3066\uff12\u5c64\u76ee\u306e\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3059\u308b\n                                  random_state= random_state)\n\n# \u30b9\u30b3\u30a2\nscore_model_reg = np.sqrt(-cross_val_score(stacking_cv_reg, X_train.values, y_train, scoring=\"neg_mean_squared_error\", cv=kf))\n\n# \u30b9\u30b3\u30a2\u306e\u8868\u793a\nprint(f'score_model_reg => mean: {score_model_reg.mean()}, std: {score_model_reg.std()}')\ncv_scores.append(score_model_reg.mean())\ncv_std.append(score_model_reg.std())","0a4393fe":"# \uff12\u5c64\u76ee\u306e\u30e2\u30c7\u30eb\u306b\u5143\u306e\u30c7\u30fc\u30bf\u3092\u542b\u3081\u306a\u3044\u5834\u5408\u3092\u4f5c\u3063\u3066\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\nstacking_cv_reg_exclude = StackingCVRegressor(regressors= estimators,\n                                  meta_regressor = lgbm_reg, # \uff12\u5c64\u76ee\u3067\u4f7f\u3046\u30e2\u30c7\u30eb\n                                  use_features_in_secondary= False, # \u5143\u306e\u30c7\u30fc\u30bf\u3092\u9664\u3044\u3066\uff12\u5c64\u76ee\u306e\u30e2\u30c7\u30eb\u3092\u5b66\u7fd2\u3059\u308b\n                                  random_state= random_state)\n\n# \u30b9\u30b3\u30a2\nscore_model_reg = np.sqrt(-cross_val_score(stacking_cv_reg_exclude, X_train.values, y_train, scoring=\"neg_mean_squared_error\", cv=kf))\n\n# \u30b9\u30b3\u30a2\u306e\u8868\u793a\nprint(f'score_model_reg => mean: {score_model_reg.mean()}, std: {score_model_reg.std()}')\ncv_scores.append(score_model_reg.mean())\ncv_std.append(score_model_reg.std())","892d6d2a":"stacking_cv_reg.fit(X_train, y_train)","c372e173":"sample_submission","b905fac0":"# Prediction\ny_pred = stacking_cv_reg.predict(all_data.loc[len(test)+1:,:])\nsns.distplot(y_pred)","8071f54a":"# \u6307\u6570\u95a2\u6570\u3067\u5206\u5e03\u3092\u5143\u306b\u623b\u3059\ny_pred_1 = np.expm1(y_pred)\nsns.distplot(y_pred_1)","f52a87ce":"# Submit\nsubmission = pd.DataFrame({'Id':np.arange(1461,2920),\n                           'SalePrice':y_pred_1})\nsubmission.to_csv('\/kaggle\/working\/submission_ver1.csv', index=False)","88002ca9":"# 1 Loading and Exploring data","97e1871b":"## 5.4.1 Skewness\nSkewness\u306f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306b\u3057\u305f\u3068\u304d\u306e\u5206\u5e03\u306e\u5bfe\u79f0\u6027\u3092\u8868\u3059\u6307\u6a19\u3067\u5b8c\u5168\u306b\u5bfe\u79f0\u306a\u6642\u306f0\u306b\u306a\u308b\u3002 \\\n\u7dda\u5f62\u30e2\u30c7\u30eb\u306f\u6b8b\u5dee\u304c\u6b63\u898f\u5206\u5e03\u3092\u4eee\u5b9a\u3057\u3066\u3044\u308b\u304b\u3089\u6b6a\u5ea6\u304c-1\u304b\u30891\u306e\u7bc4\u56f2\u306b\u306a\u308b\u3088\u3046\u306b\u88dc\u6b63\u3059\u308b\u3002 \\\n\u88dc\u6b63\u306f\u57fa\u672c\u7684\u306b\u306f\u6b6a\u5ea6\u304c0.8\u4ee5\u4e0a\u306e\u5909\u6570\u306b\u5bfe\u3057\u3066\u5bfe\u6570\u5909\u63db\u3092\u9069\u5fdc\u3059\u308b\u304c\u30de\u30a4\u30ca\u30b9\u306e\u5024\u306b\u5bfe\u3057\u3066\u306flog1p()\u3092\u4f7f\u3063\u3066\u5bfe\u5fdc\u3059\u308b\u3002 \\\n\u6b6a\u5ea6\u304c0.5\u4ee5\u4e0a\u306e\u5909\u6570\u306b\u5bfe\u3057\u3066\u5bfe\u6570\u5909\u63db\u3092\u304b\u3051\u308b\u3002","356e1441":"#### MiscFeature\nMiscFeature\u3068MiscVal\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u3066\u3001\u6b20\u640d\u5024\u306e\u5834\u6240\u3082\u540c\u3058\u3067\u5927\u90e8\u5206\u304c\u6b20\u640d\u5024\u3067\u3042\u308b\u305f\u3081\u6b20\u640d\u5024\u306b\u610f\u5473\u304c\u3042\u308b\u3002 \\\nMiscFeature\u306b\u95a2\u3057\u3066\u306f\u6b20\u640d\u5024\u3092None\u3067\u7f6e\u304d\u63db\u3048\u3066\u304a\u3044\u3066\u5f8c\u3067LabelEncoding\u3067\u5909\u63db\u3059\u308b\u3002","fddc1030":"## 5.2.4 TotalSquareFeet\n\u7dcf\u9762\u7a4d\u306b\u95a2\u3059\u308b\u7279\u5fb4\u91cf\u304c\u76ee\u7684\u5909\u6570\u3068\u76f8\u95a2\u304c\u9ad8\u304b\u3063\u305f\u305f\u3081\u7dcf\u9762\u7a4d\u306b\u95a2\u3059\u308b\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3057\u3066\u307e\u3068\u3081\u308b\u3002 \\\n\u76f8\u95a2\u4fc2\u6570\u306f0.77\u3068\u3068\u3066\u3082\u5927\u304d\u306a\u5024\u3092\u793a\u3057\u305f\u3002\u5916\u308c\u5024\u51e6\u7406\u3092\u3059\u308b\u3068\u76f8\u95a2\u4fc2\u6570\u306f0.81\u3068\u3055\u3089\u306b\u4e0a\u304c\u308b\u3002","2b04cee9":"#### Alley\nStreet\u3068\u306f\u4f3c\u3066\u3044\u308b\u30bf\u30a4\u30d7\u3060\u304c\u76f8\u95a2\u306f\u8a8d\u3081\u3089\u308c\u306a\u304b\u3063\u305f\u3002 \\\n\u6b20\u640d\u5024\u304c\u5927\u91cf\u306b\u3042\u308a\u6b20\u640d\u5024\u306b\u610f\u5473\u304c\u3042\u308b\u30bf\u30a4\u30d7\u3067\u3001\u5c3a\u5ea6\u5909\u6570\u306e\u305f\u3081\u6b20\u640d\u5024\u306fNone\u3067\u57cb\u3081\u3066\u3042\u3068\u304b\u3089LabelEncoding\u3092\u884c\u3046\u3002","4d800e14":"## 5.2 \u7279\u5fb4\u91cf\u306e\u751f\u6210\n\u76f8\u95a2\u4fc2\u6570\u304c\u5927\u304d\u3044\u3082\u306e\u540c\u58eb\u306e\u4f3c\u305f\u3088\u3046\u306a\u5909\u6570\u3084\u30b0\u30eb\u30fc\u30d7\u5316\u3067\u304d\u308b\u5909\u6570\u306b\u3064\u3044\u3066\u306f\u307e\u3068\u3081\u3066\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u3002","f8e3ee86":"## 5.2.2 Adding 'House Age'\n\u7bc9\u5e74\u6570\u3084\u30ea\u30d5\u30a9\u30fc\u30e0\u5e74\u6570\u3001\u58f2\u3089\u308c\u305f\u5e74\u6570\u3068\u3044\u3063\u305f\u5bb6\u306e\u5e74\u6570\u306b\u95a2\u3059\u308b\u7279\u5fb4\u91cf\u304c\u3042\u308b\u305f\u3081\u3053\u308c\u3089\u3092\u307e\u3068\u3081\u3089\u308c\u308b\u304b\u691c\u8a0e\u3059\u308b\u3002 \\\n\u76f8\u95a2\u4fc2\u6570Top20\u306e\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u306b\u3082\u8f09\u3063\u3066\u3044\u308b\u3082\u306e\u306fYearRemodeled\u3068YrBuilt\u304c\u4e57\u3063\u3066\u3066\u76f8\u95a2\u4fc2\u6570\u304c\u9ad8\u3044\u3002 \\\nYrSold\u306f\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u4e0a\u3067\u306f\u9ad8\u3044\u76f8\u95a2\u4fc2\u6570\u3092\u793a\u3055\u306a\u3044\u3002 \\\n\u5bb6\u306e\u5e74\u9f62\u306b\u95a2\u3057\u3066\u306f\u3001YearBlt\u3001YearRemodAdd\u3001YearSold\u306e3\u3064\u306e\u5909\u6570\u304c\u95a2\u9023\u3057\u3066\u3044\u308b\u3002YearRemodAdd\u306f\u3001Remodeling\/Addition\u304c\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067YearBuilt\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001YearRemodeled\u3068YearSold\u3092\u4f7f\u3063\u3066Age\u3092\u6c7a\u3081\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u53e4\u3044\u5efa\u7269\u306e\u4e00\u90e8\u306f\u5e38\u306b\u6b8b\u308a\u3001\u5bb6\u306e\u4e00\u90e8\u3060\u3051\u304c\u6539\u88c5\u3055\u308c\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001Remodeled\u306eYes\/No\u5909\u6570\u3082\u5c0e\u5165\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u3001Age\u304c\u30ea\u30d5\u30a9\u30fc\u30e0\u3055\u308c\u305f\u65e5\u306b\u57fa\u3065\u3044\u3066\u3044\u308b\u5834\u5408\u3001\u540c\u3058\u5e74\u306b\u4e00\u304b\u3089\u5efa\u3066\u3089\u308c\u305f\u5bb6\u3088\u308a\u3082\u4fa1\u5024\u304c\u4f4e\u3044\u3060\u308d\u3046\u3068\u3044\u3046\u3053\u3068\u3092\u793a\u3059\u3001\u3042\u308b\u7a2e\u306e\u30da\u30ca\u30eb\u30c6\u30a3\u30fb\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u898b\u306a\u3059\u3079\u304d\u3067\u3042\u308b\u3002","6d9d1157":"## 5.4 PreProcessing predictor variables\n\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u524d\u306bNumeric\u306a\u5909\u6570\u306f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u6b6a\u307f\u3092\u88dc\u6b63\u3057\u3001\u5fc5\u8981\u3067\u3042\u308c\u3070\u6a19\u6e96\u5316\u3059\u308b\u3002 \\\n\u307e\u305f\u3001\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u5bfe\u3057\u3066\u30c0\u30df\u30fc\u5909\u6570\u3092\u7528\u610f\u3059\u308b\u3002","655d3cb8":"## 3.2.4 MSSubClasse","89a9d059":"#### SaleType","df9b3796":"## 1.3 Correlation check\n\u76ee\u7684\u5909\u6570\u306b\u3064\u3044\u3066OverallQual\u3068GrLivArea, GarageArea, GarageCars, TotalBsmtSF, 1stFrlSize\u304c\u76f8\u95a2\u4fc2\u6570\u304c\u9ad8\u3044\u3002(0.6~) \\\n### \u591a\u91cd\u5171\u7dda\u6027\u304c\u7591\u308f\u308c\u308b\u5909\u6570\u306e\u30da\u30a2(corrcoef > 0.8)\uff1a \n- TotalBsmtSF, 1stFrlSize\n- GarageArea, GarageCars\n- GarageYrBlt, YearBuilt\n- TotRmsAbvGrd, GrLivArea","2964fd3a":"\u3055\u3089\u306b\u65b0\u7bc9\u306e\u307b\u3046\u304c\u4fa1\u5024\u304c\u9ad8\u3044\u3068\u3044\u3046\u4eee\u5b9a\u306e\u5143\u3001\u5efa\u3063\u3066\u304b\u30891\u5e74\u4ee5\u5185\u306b\u58f2\u5374\u3055\u308c\u305f\u5bb6\u306e\u7279\u5fb4\u91cf\u3092\u3064\u304f\u3063\u3066 \\\n\u65b0\u7bc9\u3068\u305d\u3046\u3067\u306a\u3044\u5bb6\u306e\u58f2\u5374\u984d\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3068\u3001\u3084\u306f\u308a\u65b0\u7bc9\u306e\u65b9\u304c\u4fa1\u5024\u304c\u9ad8\u304b\u3063\u305f\u3002","4d5c4c5b":"### Ridge\u56de\u5e30\n[\u30ea\u30c3\u30b8\u56de\u5e30][1]\u306f\u7dda\u5f62\u56de\u5e30\u306b\u6b63\u5247\u5316\u9805\u3092\u52a0\u3048\u3066\u904e\u5b66\u7fd2\u3092\u6291\u3048\u308b\u30e2\u30c7\u30eb\u3067\u6b63\u5247\u5316\u9805\u306fL2\u30ce\u30eb\u30e0\u3092\u7528\u3044\u308b\u3002 \\\nw\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u5f0f\u3067\u8868\u3055\u308c\u308b\u3002\n\n$ (y - wX)^2+\\lambda*\\|w\\|^2 $\n\u307e\u305fsklearn\u306e[pipeline][2]\u3092\u4f7f\u3046\u3068\u8907\u6570\u306e\u524d\u51e6\u7406\u7528\u30af\u30e9\u30b9\u3068\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u307e\u3068\u3081\u3066\u4e00\u3064\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \\\n\u3057\u305f\u304c\u3063\u3066\u6a19\u6e96\u5316\u306a\u3069\u3092\u3057\u3066\u5b66\u7fd2\u3059\u308b\u5834\u5408\u306bStandardScaler()\u3092\u4f7f\u7528\u305b\u305a\u306bpipeline\u306e\u4e2d\u3067\u8a18\u8ff0\u3067\u304d\u308b\u3002\n\n[1]:https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.Ridge.html\n[2]:https:\/\/nigimitama.hatenablog.jp\/entry\/2020\/11\/09\/080000","b7471cfc":"### \u3069\u306esampling algorithm\u3068pruning algorithm\u3092\u4f7f\u3046\u3079\u304d\u304b\uff1f\uff08\u53c2\u8003\uff09\noptuna\u516c\u5f0fHP\u306e[\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb][0]\u306b\u3088\u308b\u3068\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\u3002\u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u306fPrune\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3082\u5909\u66f4\u3059\u308b\u3068\u826f\u3044\u3002 \\\n\u5909\u66f4\u306e\u4ed5\u65b9\u306f\u4e0a\u8a18\u30ea\u30f3\u30af\u306eActivating Pruners\u306e\u9805\u76ee\u306b\u66f8\u3044\u3066\u3042\u308b\u3002\n> For optuna.samplers.RandomSampler, optuna.pruners.MedianPruner is the best.\n>\n> For optuna.samplers.TPESampler, optuna.pruners.Hyperband is the best.\n\n[0]:https:\/\/optuna.readthedocs.io\/en\/stable\/tutorial\/10_key_features\/003_efficient_optimization_algorithms.html","a603a993":"## 5.1 \u591a\u91cd\u5171\u7dda\u6027\u306e\u7279\u5fb4\u91cf\u306e\u524a\u9664\u3092\u691c\u8a0e\u3059\u308b\n\u76f8\u95a2\u884c\u5217\u304b\u3089\u624b\u52d5\u3067\u524a\u9664\u3059\u308b\u306e\u306f\u5c11\u3057\u5371\u967a\u3067\u3088\u308a\u826f\u3044\u65b9\u6cd5\u306fVIF\u3082\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3067\u3042\u308b\u3002","73be4341":"#### TotalBsmtSF,BsmtUnfSF, BsmtFinSF1, BsmtFinSF2\n\u6b20\u640d\u3057\u3066\u3044\u308b\u884c\u306b\u3064\u3044\u3066\u4ed6\u306eBasement\u306e\u6307\u6a19\u3092\u53c2\u7167\u3059\u308b\u3068NoBasement\u3067\u3042\u3063\u305f\u305f\u3081\u3001\u3053\u308c\u3089\uff14\u3064\u306e\u6307\u6a19\u306b\u3064\u3044\u3066\u306f\u6b20\u640d\u5024\u306f\uff10\u3067\u88dc\u5b8c\u3059\u308b\u3002","cd1ea675":"#### Electrical\nUtilities\u3067\u306f\u5168\u3066\u306e\u904e\u7a0b\u306b\u96fb\u6c17\u304c\u8d70\u3063\u3066\u3044\u305f\u305f\u3081\u3001Electrical\u304c\u7121\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u3042\u308a\u5f97\u306a\u3044\u3002 \\\n\u3057\u305f\u304c\u3063\u3066\u6700\u983b\u5024\u3067\u7f6e\u63db\u3057\u3066\u304a\u304f\u3002","ca786c15":"## 3.2 Fix data type","6b561a74":"## 5.2.3 Binning Neighborhood\n\u76ee\u7684\u95a2\u6570\u3078\u306e\u5bc4\u4e0e\u5ea6\u304c\u9ad8\u3044\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u3046\u3061\u3001\u6c34\u6e96\u304c\u591a\u3044\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306f\u6c34\u6e96\u3054\u3068\u306b\u76ee\u7684\u95a2\u6570\u3068\u306e\u95a2\u4fc2\u3092\u53ef\u8996\u5316\u3057\u3066 \\\n\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3092\u3059\u308b\u3002\u305d\u306e\u3046\u3061\u7279\u306b\u5bc4\u4e0e\u5ea6\u304c\u9ad8\u3044\u6c34\u6e96\u304b\u3089\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3002","7489d4ad":"```Python\n# 1. Define an objective function to be maximized.\ndef objective(trial):\n\n    # 2. Suggest values for the hyperparameters using a trial object.\n    classifier_name = trial.suggest_categorical('classifier', ['SVC', 'RandomForest'])\n    if classifier_name == 'SVC':\n         svc_c = trial.suggest_loguniform('svc_c', 1e-10, 1e10)\n         classifier_obj = sklearn.svm.SVC(C=svc_c, gamma='auto')\n    else:\n        rf_max_depth = int(trial.suggest_loguniform('rf_max_depth', 2, 32))\n        classifier_obj = sklearn.ensemble.RandomForestClassifier(max_depth=rf_max_depth, n_estimators=10)\n    ...\n    return accuracy\n\n# 3. Create a study object and optimize the objective function.\nstudy = optuna.create_study(direction='maximize')\nstudy.optimize(objective, n_trials=100)\n```","5f600a5a":"#### Functional\n\u6b20\u640d\u5024\u306f\uff12\u500b\u3002\u63a7\u9664\u304c\u6b63\u5f53\u5316\u3055\u308c\u306a\u3044\u9650\u308aTypical\u3067\u3053\u308c\u306fTyp\u304c\u4e00\u756a\u826f\u3044\u5e8f\u5217\u5909\u6570\u3002","82124323":"## 3.1 Label encoding\n\u5e8f\u5217\u5909\u6570\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u6f0f\u308c\u304c\u3042\u3063\u305f\u306e\u3067\u30de\u30cb\u30e5\u30a2\u30eb\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u3002","a68c2dab":"#### Utilities\nNoSeWa\u304c\uff11\u3064\u3042\u308a\u3001\u4ed6\u306fAllPub\u304b\u3064NoSeWa\u306f\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u3057\u304b\u5b58\u5728\u3057\u306a\u3044\u3002 \\\n\u3057\u305f\u304c\u3063\u3066NoSeWa\u306f\u610f\u5473\u304c\u306a\u304f\u3001AllPub\u306f\u5168\u3066\u306b\u5f53\u3066\u306f\u307e\u308b\u306e\u3067\u3053\u306e\u7279\u5fb4\u91cf\u306f\u610f\u5473\u304c\u306a\u3044\u305f\u3081\u524a\u9664\u3059\u308b\u306e\u304c\u597d\u307e\u3057\u3044\u3002","2d498d39":"# 9 \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\n\u30e2\u30c7\u30eb\u306e\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u306f\u56de\u5e30\u554f\u984c\u3067\u306f\u5358\u306b\u8907\u6570\u30e2\u30c7\u30eb\u306e\u5e73\u5747\u3092\u53d6\u308b\u65b9\u6cd5\u3084\u3001\u52a0\u91cd\u5e73\u5747\u3092\u53d6\u308b\u65b9\u6cd5\u3001\u5358\u306b\u4e71\u6570\u30b7\u30fc\u30c9\u3092\u5909\u3048\u3066\u5e73\u5747\u3092\u53d6\u308b\u65b9\u6cd5\u304c\u3042\u308b\u3002 \\\n\u4ee5\u4e0b\u3067\u306f\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u306b\u3064\u3044\u3066\u89e3\u8aac\u3059\u308b\u3002\n### \u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\uff08Stacking\uff09\n\u6587\u5b57\u901a\u308a\u7a4d\u307f\u4e0a\u3052\u3066\u3044\u304f\u3068\u3044\u3046\u610f\u5473\u306e\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u65b9\u6cd5\u3067\u3042\u308a\u3001 \\\n1.\u30c7\u30fc\u30bf\u3092\u4ea4\u5dee\u691c\u8a3c\u306e\u3088\u3046\u306b\u5404fold\u306b\u5206\u3051\u308b\u3002 \\\n2.fold2,fold3,fold4\u306e\u30c7\u30fc\u30bf\u3067fold1\u306e\u4e88\u6e2c\u5024\u3092\u8fd4\u3057\u3066\u5e73\u5747\u3092\u53d6\u308b\u3002 \\\n3.fold3,fold4,fold1\u306e\u30c7\u30fc\u30bf\u3067fold2\u306e\u4e88\u6e2c\u5024\u3092\u8fd4\u3057\u3066\u5e73\u5747\u3092\u53d6\u308b\u3002 \\\n4.fold4,fold1,fold2\u306e\u30c7\u30fc\u30bf\u3067fold3\u306e\u4e88\u6e2c\u5024\u3092\u8fd4\u3057\u3066\u5e73\u5747\u3092\u53d6\u308b\u3002 \\\n5.fold1,fold2,fold3\u306e\u30c7\u30fc\u30bf\u3067fold4\u306e\u4e88\u6e2c\u5024\u3092\u8fd4\u3057\u3066\u5e73\u5747\u3092\u53d6\u308b\u3002 \\\n6.\u4e0a\u8a18\u306e\u4e88\u6e2c\u5024\u3092\u7e26\u306b\u7e4b\u3052\u308b\u3068\uff11\u30ab\u30e9\u30e0\u5206\u306e\u30c7\u30fc\u30bf\u306e\u91cf\u3068\u4e00\u81f4\u3059\u308b\u305f\u3081\u7279\u5fb4\u91cf\u3068\u3057\u3066\u30c7\u30fc\u30bf\u306b\u52a0\u3048\u308b\u3002 \\\n---->\uff11\u5c64\u76ee\u306e\u30e2\u30c7\u30eb \\\n7.1\u5c64\u76ee\u306e\u30e2\u30c7\u30eb\u3092\u542b\u3093\u3060\u30c7\u30fc\u30bf\u3067\u76ee\u7684\u5909\u6570\u306b\u5bfe\u3057\u3066\u5b66\u7fd2\u3068\u4e88\u6e2c\u3092\u884c\u3046\u3002or 1\u5c64\u76ee\u306e\u30e2\u30c7\u30eb\u3068\u3044\u3046\u7279\u5fb4\u91cf\u306e\u307f\u3067\u5b66\u7fd2\u3092\u884c\u3046\u3002 \\\n---->\uff12\u5c64\u76ee\u306e\u30e2\u30c7\u30eb \\\n\u5b9f\u969b\u306b\u624b\u9806\u901a\u308a\u306b\u66f8\u3044\u3066\u307f\u308b\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u3002 \\\nmlxtend\u306eStackingCVRegressor\u3092\u4f7f\u3046\u3068\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3002 \\\n### \uff12\u5c64\u76ee\u306e\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\u65b9\u6cd5\n\uff12\u5c64\u76ee\u306e\u30e2\u30c7\u30eb\u4f5c\u6210\u306e\u969b\u306b\u5143\u306e\u5168\u3066\u306e\u30c7\u30fc\u30bf\u3082\u542b\u3081\u3066\u5b66\u7fd2\u3059\u308b\u5834\u5408\u3002 \\\n---->\u5143\u306e\u7279\u5fb4\u91cf\u3068\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u5024\u306e\u95a2\u4fc2\u6027\u3092\u6349\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002 \\\n2\u5c64\u76ee\u306e\u30e2\u30c7\u30eb\u4f5c\u6210\u306e\u969b\u306b\uff11\u5c64\u76ee\u306e\u30e2\u30c7\u30eb\u306e\u307f\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3002 \\\n---->\u904e\u5b66\u7fd2\u3092\u8d77\u3053\u3057\u306b\u304f\u304f\u3001\u5b66\u7fd2\u6642\u9593\u304c\u77ed\u3044\u3002 \\\n\n### \u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u304c\u6709\u52b9\u306a\u30b1\u30fc\u30b9\n\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u306f\u305d\u306e\u6027\u8cea\u304b\u3089\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u5c3d\u304f\u3059\u3068\u3044\u3046\u6027\u8cea\u304c\u3042\u308b\u305f\u3081\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u304c\u4f3c\u305f\u3088\u3046\u306a\u5f62\u72b6\u3067 \\\n\u30c7\u30fc\u30bf\u304c\u5927\u91cf\u306b\u3042\u308b\u5834\u5408\u306b\u6709\u52b9\u306a\u5834\u5408\u304c\u591a\u3044\u3002 \\\n\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306a\u3069\u306e\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u5206\u5e03\u304c\u7570\u306a\u308b\u5834\u5408\u306f\u30e2\u30c7\u30eb\u306e\u52a0\u91cd\u5e73\u5747\u306a\u3069\u306e\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u624b\u6cd5\u304c\u6709\u52b9\u306a\u5834\u5408\u304c\u591a\u304f\u306a\u308b\u3002 \\\n\u307e\u305f\u7279\u5fb4\u91cf\u4f5c\u6210\u306b\u3088\u3063\u3066\u5dee\u304c\u3064\u304d\u306b\u304f\u3044\u30b3\u30f3\u30da\u3067\u306f\u7d30\u304b\u306a\u7cbe\u5ea6\u3092\u6c42\u3081\u3066\u3044\u304f\u305f\u3081\u76f8\u5bfe\u7684\u306b\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u304c\u6709\u52b9\u306a\u5834\u5408\u304c\u591a\u3044\u3002 \\\n\u8a55\u4fa1\u6307\u6a19\u3067\u3082\u9055\u3044\u304c\u3042\u308a\u3001accuracy\u3088\u308a\u3082logloss\u306e\u65b9\u304c\u7cbe\u5ea6\u304c\u51fa\u308b\u3088\u3046\u3067\u3042\u308b\u3002 \\\n\u307e\u305f\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u3059\u308b\u30e2\u30c7\u30eb\u306f\u4f3c\u305f\u3088\u3046\u306a\u30b9\u30b3\u30a2\u304c\u9ad8\u3044\u30e2\u30c7\u30eb\u3082\u30d6\u30ec\u30f3\u30c9\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u591a\u69d8\u6027\u3092\u6301\u305f\u305b\u305f\u65b9\u304c\u826f\u3044\u305f\u3081 \\\n\u305f\u3068\u3048\u3070NN\u3068GBDT\u306a\u3069\u304c\u76f8\u6027\u304c\u826f\u3044\u3088\u3046\u3067\u3042\u308b\u3002\n* Ref. http:\/\/rasbt.github.io\/mlxtend\/user_guide\/regressor\/StackingCVRegressor\/\n\n![StackingCVRegressor](http:\/\/rasbt.github.io\/mlxtend\/user_guide\/regressor\/StackingCVRegressor_files\/stacking_cv_regressor_overview.png)","32250053":"#### MSZoning\n\u540d\u7fa9\u5c3a\u5ea6\u3067\u6b20\u640d\u5024\u3082\uff14\u3064\u3068\u5c11\u306a\u3044\u305f\u3081\u6700\u983b\u5024\u3092\u88dc\u5b8c\u3002","cde1c14c":"## 2.2 \u6b20\u640d\u5024\u306e\u88dc\u5b8c\n\u6b21\u306e\u30eb\u30fc\u30eb\u306b\u5f93\u3063\u3066\u6b20\u640d\u5024\u3092\u88dc\u5b8c\u3057\u3066\u3044\u304f\u3002\n- 0\u3092\u88dc\u5b8c\uff1a\u6b20\u640d\u5024\u306b\u610f\u5473\u304c\u3042\u308b\u5834\u5408\u3002\u6b20\u640d\u306e\u5272\u5408\u304c\u591a\u3044\u5834\u5408\u306a\u3069\u306f\u6b20\u640d\u5024\u306b0\u3092\u88dc\u5b8c\u3057\u3066\u6b20\u640d\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u610f\u5473\u3092\u6301\u305f\u305b\u308b\u3002\n- \u4ee3\u8868\u5024\u3067\u88dc\u5b8c\uff1a\u6b20\u640d\u304c\u5c11\u306a\u3044\u5834\u5408\u306f\u5e73\u5747\u3001\u4e2d\u592e\u5024\u3001\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306f\u6700\u983b\u5024\u3082\u9078\u629e\u80a2\u306b\u5165\u308c\u308b\u3002\n- \u6b20\u640d\u5024\u304c\u3042\u308b\u884c\u3092\u524a\u9664\uff1a\u60c5\u5831\u91cf\u304c\u305d\u308c\u3060\u3051\u6e1b\u308b\u306e\u3067\u3042\u307e\u308a\u3057\u305f\u304f\u306a\u3044\u3002","0c8f31e7":"## 4.1 \u76f8\u95a2\u884c\u5217\u306e\u518d\u78ba\u8a8d\n\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u3044\u304f\u3064\u304b\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u305f\u3081\u3001\u305d\u308c\u3089\u306e\u5909\u6570\u3067\u306e\u76f8\u95a2\u884c\u5217\u3092\u78ba\u8a8d\u3057\u3066\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u3092\u628a\u63e1\u3059\u308b\u3002 \\\n\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u304b\u3089\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3057\u305f\u308a\u3059\u308b\u305f\u3081\u91cd\u8981\u306a\u30d1\u30fc\u30c8\u3002 ","5cfdd0f9":"#### Fence\nNA\u304c\u5927\u91cf\u306b\u3042\u308a\u6b20\u640d\u5024\u306b\u610f\u5473\u304c\u3042\u308b\u30bf\u30a4\u30d7\u3067Fence\u306e\u54c1\u8cea\u306b\u95a2\u3059\u308b\u6307\u6a19\u306e\u305f\u3081\u5e8f\u5217\u5909\u6570\u3002\u5e8f\u5217\u306e\u4e2d\u306bFence\u306a\u3057\u3092\u542b\u3081\u308b\u306e\u306f\u304a\u304b\u3057\u3044\u304d\u304c\u3059\u308b\u305f\u3081\u5f8c\u30670\u3068\u305d\u308c\u4ee5\u5916\u306b\u5bfe\u3057\u3066Fence\u6709\u308a\u7121\u3057\u3067\u7279\u5fb4\u91cf\u3092\u4f5c\u308b\u306e\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002 \\\n\u5e8f\u5217\u5909\u6570\u306e\u305f\u3081\u30de\u30cb\u30e5\u30a2\u30eb\u3067\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u3057\u3066\u304a\u304f\u3002","05c19d49":"## 1.2 EDA\n- Correlation matrix\u306a\u3069\u3092\u4f7f\u3063\u3066\u76ee\u7684\u5909\u6570\u3068\u76f8\u95a2\u304c\u9ad8\u3044\u7279\u5fb4\u91cf\u3092\u62bd\u51fa\u3059\u308b\u3002\n- \u304a\u305d\u3089\u304f\u3053\u3053\u304c\u4e00\u756a\u6642\u9593\u304c\u304b\u304b\u308b\u30d1\u30fc\u30c8\u3060\u304c\uff11\u3064\uff11\u3064\u7279\u5fb4\u91cf\u3092\u78ba\u8a8d\u3059\u308b\u3002","31928ec7":"#### BsmtExposure, BsmtCond, BsmtQual, BsmtFinType1, BsmtFinType2\n\u3053\u308c\u3089\u306f\u3044\u3055\u3055\u304b\u5197\u9577\u306a\u3067\u3042\u308b\u305f\u3081\u3001\u4f8b\u3048\u3070Cond\u3068Qual\u304c\u540c\u3058\u3088\u3046\u306a\u50be\u5411\u306a\u3089\u307e\u3068\u3081\u3066\u3057\u307e\u3046\u306a\u3069\u3059\u308b\u3002 \\\nBsmtFinType1, BsmtFinType2\u306f\u5178\u578b\u7684\u306b\u307e\u3068\u3081\u3066\u826f\u3044\u3082\u306e \\\n\u5e8f\u5217\u5909\u6570\u306f\uff10\u3067\u88dc\u5b8c\u3057\u3066\u30de\u30cb\u30e5\u30a2\u30eb\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u3002","60b3b5ca":"# 4 Visualization of important variables","e86b9564":"\u76ee\u7684\u5909\u6570\u306e\u5bfe\u6570\u5909\u63db\u306e\u969b\u306b\u8ca0\u306e\u5024\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306blog1p\u3067\u5909\u63db\u3057\u3066\u3044\u308b\u305f\u3081\uff11\u3092\u5f15\u3044\u305f\u6307\u6570\u5909\u63db\u3092\u884c\u3046\u3002","fc489524":"## 5 Feature enginnering","c2fb1fce":"\u5e83\u3055\u3084\u5efa\u7bc9\u5e74\u306b\u95a2\u3059\u308b\u7279\u5fb4\u91cf\u306f\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u306a\u306e\u3067\u3053\u3053\u3067\u524a\u9664\u3059\u308b\u3053\u3068\u306f\u3057\u306a\u3044\u3002 \\\n\u307e\u305fGarageCars\u306b\u95a2\u3057\u3066\u306f\u5f8c\u3067\u7279\u5fb4\u91cf\u4f5c\u6210\u306b\u4f7f\u7528\u3057\u305f\u306e\u3061\u524a\u9664\u3059\u308b\u3053\u3068\u306b\u3059\u308b\u3002","e5fe79fc":"### \u52b9\u7387\u7684\u306aSampling Algorithm\uff08\u53c2\u8003\uff09\noptuna\u306b\u306f\u52b9\u7387\u7684\u306b\u8a08\u7b97\u3059\u308b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3044\u304f\u3064\u304b\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001state-of-the-art\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u547c\u3070\u308c\u3066\u3044\u308b\u3002 \\\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306foptuna.sampler.TPESampler\u3067TPE (Tree-structured Parzen Estimator)\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u3066\u3044\u308b\u3002 \\\n\u4ed6\u306b\u306f\u5f93\u6765\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3067\u3088\u304f\u4f7f\u308f\u308c\u308b\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3084\u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\u304c\u3042\u308b\u3002 \\\n\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306f\u7c21\u5358\u306b\u8a00\u3046\u3068\u6307\u5b9a\u3057\u305f\u6570\u3067\u306e\u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u6700\u9069\u5024\u3092\u7b97\u51fa\u3059\u308b\u305f\u3081\u6f0f\u308c\u304c\u306a\u3044\u5206\u8a08\u7b97\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u3002 \\\n\u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\u306f\u6307\u5b9a\u3057\u305f\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u7d44\u307f\u5408\u308f\u305b\u3066\u3044\u304f\u3064\u304b\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u4e2d\u3067\u306e\u6700\u9069\u5024\u3092\u7b97\u51fa\u3059\u308b\u305f\u3081\u8a08\u7b97\u30b3\u30b9\u30c8\u304c\u5b89\u3044\u3002 \\\nDeep learning\u3092\u4f7f\u308f\u306a\u3044\u9650\u308a\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u304b\u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\u304c\u30d9\u30b9\u30c8\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u306e\u305f\u3081\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u307e\u307e\u3067\u8a08\u7b97\u3057\u3066\u826f\u3044\u306f\u305a\u3002\n \n\nTree-structured Parzen Estimator algorithm implemented in [optuna.samplers.TPESampler][0]\n\nCMA-ES based algorithm implemented in [optuna.samplers.CmaEsSampler][1]\n\nGrid Search implemented in [optuna.samplers.GridSampler][2]\n\nRandom Search implemented in [optuna.samplers.RandomSampler][3]\n\n[0]:https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/generated\/optuna.samplers.TPESampler.html#optuna.samplers.TPESampler\n[1]:https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/generated\/optuna.samplers.CmaEsSampler.html#optuna.samplers.CmaEsSampler\n[2]:https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/generated\/optuna.samplers.GridSampler.html#optuna.samplers.GridSampler\n[3]:https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/generated\/optuna.samplers.RandomSampler.html#optuna.samplers.RandomSampler","fa7ae35d":"## 5.3 Dropping highly correlated variable\n\u591a\u91cd\u5171\u7dda\u6027\u306e\u5f71\u97ff\u3092\u9632\u3050\u305f\u3081\u306b\u76f8\u95a2\u4fc2\u6570\u304c\u304b\u306a\u308a\u9ad8\u3044\u5909\u6570\u540c\u58eb\u306e\u30da\u30a2\u306e\u4e2d\u304b\u3089\u76ee\u7684\u5909\u6570\u3068\u76f8\u95a2\u304c\u4f4e\u3044\u65b9\u3092\u524a\u9664\u3059\u308b\u3002 \\\n\u591a\u91cd\u5171\u7dda\u6027\u3092\u5f15\u304d\u8d77\u3053\u3059\u6050\u308c\u306e\u3042\u308b\u5909\u6570\u306f\u76f8\u95a2\u884c\u5217\u3092\u4f7f\u3063\u3066\u767a\u898b\u3059\u308b\u3002 \\\n'YearRemodAdd', 'GarageYrBlt', 'GarageArea', 'GarageCond', 'TotalBsmtSF', 'TotalRmsAbvGrd', 'BsmtFinSF1'","b2e9216d":"#### FireplaceQu\u3068Fireplaces\nFireplaces\u3068FireplaceQu\u306e\u6b20\u640d\u5024\u3068\uff10\u306e\u6570\u306f\u4e00\u81f4\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u5358\u306b\u6b20\u640d\u5024\u3092\u88dc\u5b8c\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u3002 \\\nFireplaceQu\u306f\u5e8f\u5217\u5909\u6570\u306e\u305f\u3081\u30de\u30cb\u30e5\u30a2\u30eb\u3067\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u3002 \\\nFireplaceQu\u3068SalePrice\u306f\u305d\u3053\u307e\u3067\u9ad8\u3044\u76f8\u95a2\u3067\u306f\u306a\u3044\u3002","9f198e34":"## 7.1 Cross validation","ff454727":"\u6b6a\u5ea6\u304c0.5\u4ee5\u4e0a\u306e\u7279\u5fb4\u91cf\u306b\u5bfe\u3057\u3066\u5bfe\u6570\u5909\u63db\u3092\u884c\u3046\u3002","cafec9aa":"### study\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u3046\u3061\u4f7f\u3044\u305d\u3046\u306a\u3082\u306e\u306e\u7d39\u4ecb\u3002\n```Python\n#### \u6700\u9069\u5024\u306e\u62bd\u51fa\nstudy.best_params\n\n#### \u6700\u9069\u89e3\uff08\u6700\u9069\u5316\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306e\u89e3\uff09\nstudy.best_value\n\n#### \u6700\u9069\u89e3\u3092\u7b97\u51fa\u3057\u305fTrial\u306e\u62bd\u51fa\nstudy.best_trial\n\n#### \u5f15\u304d\u7d9a\u304d\uff08\u3082\u3046\u4e00\u5ea6\u7d9a\u3051\u3066\uff09\u6700\u9069\u5316\u3092\u3057\u305f\u3044\u6642\nstudy.optimize(objective, n_trials=100)\n```","f3280a0c":"### Baysian ridge regression\noptuna\u3092\u4f7f\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306e\u96db\u5f62\u306f\u4e0b\u8a18\u306e\u3082\u306e\u3092\u4f7f\u3046\u3002 \\\n\u5f15\u7528(G.Wang\u3055\u3093\u306e\u30ab\u30fc\u30cd\u30eb)\uff1ahttps:\/\/www.kaggle.com\/infof4221wang\/houseprice-optuna-framework-blending-model","787df895":"PoolQC\u306e\u6b20\u640d\u50242909\u306b\u5bfe\u3057\u3001PoolArea\u306f2906\u3068\u306a\u308a\u6570\u304c\u5408\u3063\u3066\u3044\u306a\u3044\u884c\u3092\u7279\u5b9a\u3059\u308b\u3002 \\\nPoolQC\u3068PoolArea\u306b\u5927\u304d\u306a\u76f8\u95a2\u306f\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u4e2d\u592e\u5024\u306e2\u3067\u88dc\u5b8c\u3059\u308b\u3002","bf565b67":"## 3.2.3 OverallQual\nOverallQual\u306f\u304b\u306a\u308a\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u3060\u304b\u3089\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u78ba\u8a8d\u3057\u305f\u3044\u3002 \\\n\u307e\u305fQuality\u95a2\u9023\u306e\u6307\u6a19\u304c\u591a\u3044\u306e\u3067\u30b0\u30eb\u30fc\u30d7\u304b\u3067\u304d\u306a\u3044\u304b\u78ba\u8a8d\u3059\u308b\u3002 \\\nExterQual\u3068KitchenQual, FireplaceQu\u3068\u306e\u76f8\u95a2\u4fc2\u6570\u304c\u9ad8\u3044\u3053\u3068\u304c\u4e0a\u8ff0\u3057\u305fHeatmap\u3067\u78ba\u8a8d\u3067\u304d\u308b\u3002 \\\nGarageQual\u3068\u306f\u76f8\u95a2\u4fc2\u6570\u304c\u4f4e\u3044\u306e\u306f\u304a\u305d\u3089\u304fQ3\u306e\u983b\u5ea6\u304c\u591a\u3059\u304e\u3066\u5024\u304c\u5f15\u3063\u5f35\u3089\u308c\u3066\u3044\u308b\u304b\u3089\u3002","d5e72e8c":"## Linear model","16daa24c":"### \u6700\u9069\u5316\u3059\u308b\u5909\u6570\u306e\u578b\u306e\u6307\u5b9a\u306e\u7a2e\u985e\n\u6700\u9069\u5316\u3059\u308b\u5909\u6570\u306e\u578b\u306f\u624b\u52d5\u3067\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u3001\u3053\u3053\u3067\u306f\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3084\u6574\u6570\u578b\u306e\u6307\u5b9a\u306e\u65b9\u6cd5\u3092\u7d39\u4ecb\u3059\u308b\u3002 \\\n\u306a\u304a\u6307\u5b9a\u3067\u304d\u308b\u578b\u306e\u4e00\u89a7\u306f[Optuna][0]\u306eHP\u306b\u8f09\u3063\u3066\u3044\u308b\u306e\u53c2\u8003\u306b\u3059\u308b\u3068\u826f\u3044\u3002 \\\n\u6700\u9069\u5316\u3059\u308b\u5909\u6570\u306e\u6570\u3092\u5897\u3084\u3059\u3068\u6307\u6570\u95a2\u6570\u7684\u306b\u8a08\u7b97\u30b3\u30b9\u30c8\u304c\u5897\u52a0\u3057\u3066\u3057\u3066\u3044\u304f\u305f\u3081\u3001\u4e0d\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u6700\u9069\u5316\u3057\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\n```Python\n# \u30ab\u30c6\u30b4\u30ea\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5834\u5408\ncategorical_parametar = trial.suggest_categorical(\"\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\", [\"\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u540d1\", \"\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u540d2\"]) # \u53d6\u308a\u3046\u308b\u6c34\u6e96\u306e\u6307\u5b9a\n\n# \u6574\u6570\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5834\u5408\nint_parametar = trial.suggest_int(\"\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\", 1, 3) # \u53d6\u308a\u3046\u308b\u7bc4\u56f2\u3092\u6574\u6570\u3067\u6307\u5b9a\u3059\u308b\u3002\n\n# \u6d6e\u52d5\u5c0f\u6570\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5834\u5408\nfloat_parametar = trial.suggest_float(\"\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\", 0.0, 1.0) # \u53d6\u308a\u3046\u308b\u7bc4\u56f2\u3092\u5c0f\u6570\u3067\u6307\u5b9a\u3059\u308b\u3002\n```\n[0]:https:\/\/optuna.readthedocs.io\/en\/stable\/tutorial\/10_key_features\/002_configurations.html","10b6f673":"## 1.1 \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u304b\u3089\u4e0d\u8981\u306aID\u3092\u524a\u9664\u3059\u308b","55d73ec1":"## 7.2 Evaluation metric\n\u30e2\u30c7\u30eb\u306e\u30b9\u30b3\u30a2\u3092\u4f7f\u3063\u3066\u4ea4\u5dee\u691c\u8a3c\u3092\u3059\u308b\u65b9\u6cd5\u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3046\u306e\u304c\u65e9\u3044\u3057\u7c21\u4fbf\u3002","315b8fa6":"### Pruning Algorithms(\u53c2\u8003)\nPruner\u306f\u8a08\u7b97\u306e\u6253\u3061\u5207\u308a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6c7a\u3081\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3044\u308f\u3086\u308bearly-stopping\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7a2e\u985e\u3067\u3042\u308b\u3002 \\\n\u8a73\u7d30\u306f\u7701\u304f\u304c\u3053\u308c\u3089\u3082Deep learning\u3092\u4f7f\u308f\u306a\u3044\u9650\u308a\u306f\u57fa\u672c\u7684\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u4f7f\u7528\u3059\u308b\u305f\u3081\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002 \\\n \\\nAsynchronous Successive Halving algorithm implemted in [optuna.pruners.SuccessiveHalvingPruner][0]\n\nHyperband algorithm implemented in [optuna.pruners.HyperbandPruner][1]\n\nMedian pruning algorithm implemented in [optuna.pruners.MedianPruner][2]\n\nThreshold pruning algorithm implemented in [optuna.pruners.ThresholdPruner][3]\n\n\u305f\u3060\u3057GBDTs\u306a\u3069\u306b\u6700\u9069\u5316\u3055\u308c\u305fPrune\u306e\u6307\u5b9a([PruneCallback][5])\u304c\u3042\u308b\u305f\u3081\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a2d\u5b9a\u3092\u898b\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002 \\\n[LightGBM\u306eCallback][4]\u306f\u3088\u304f\u898b\u308b\u306e\u3067\u78ba\u8a8d\u3057\u3066\u898b\u308b\u306e\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002 \\\n\n```Python\n# for XGBoost\npruning_callback = optuna.integration.XGBoostPruningCallback(trial, 'validation-error')\n# for LightGBM\npruning_callback = optuna.integration.LightGBMPruningCallback(trial, \"rmse\")\n```\n\u3053\u308c\u306fPruner\u306e\u6307\u5b9a\u3092\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3042\u308b\u304b\u3089\u3001\u69cb\u6587\u306f\u899a\u3048\u308b\u5fc5\u8981\u306a\u3044\u3002\uff08\u5fc5\u8981\u306a\u6642\u306b\u30b3\u30d4\u30da\uff09\n\n\n[0]:https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/generated\/optuna.pruners.SuccessiveHalvingPruner.html#optuna.pruners.SuccessiveHalvingPruner\n[1]:https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/generated\/optuna.pruners.HyperbandPruner.html#optuna.pruners.HyperbandPruner\n[2]:https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/generated\/optuna.pruners.MedianPruner.html#optuna.pruners.MedianPruner\n[3]:https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/generated\/optuna.pruners.ThresholdPruner.html#optuna.pruners.ThresholdPruner\n[4]:https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/generated\/optuna.integration.LightGBMPruningCallback.html\n[5]:https:\/\/optuna.readthedocs.io\/en\/v1.0.0\/tutorial\/pruning.html","b9135321":"\u30ab\u30c6\u30b4\u30ea\u306e\u4e2d\u3067\u7279\u306b\u9ad8\u3044\u6c34\u6e96\u306f\uff13\u3064\u3042\u308a\u3001\u7279\u306b\u4f4e\u3044\u5024\u306f\u4e0b\u304b\u3089\uff15\u756a\u76ee\u307e\u3067\u3068\u3059\u308b\u3068\u3001\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u91cf\u3092\u4f7f\u3063\u3066\u65b0\u305f\u306a\u7279\u5fb4\u91cf\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002","041f02ae":"#### MasVnrType & MasVnrArea\nMasVnrType\u306b\u306fNone\u304c\u5165\u3063\u3066\u3044\u308b\u305f\u3081\u6b20\u640d\u5024\u306f\u4e2d\u9593\u5024\u306a\u3069\u3067\u63a8\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304b\u3082\uff08\u4e00\u65e6\u6b20\u640d\u5024\u3068\u3057\u3066\u306e\u60c5\u5831\u3092\u4e0e\u3048\u305f\u307e\u307e\u306b\u3059\u308b\uff09\u3002 \\\nMasVnrArea\u3068SalePrice\u304c\u76f8\u95a2\u304c\u9ad8\u3044\uff080.48\uff09\u305f\u3081SalePrice\u3068MasVnrArea\u3068\u306e\u95a2\u4fc2\u304b\u3089MasVnrType\u3092\u63a8\u5b9a\u3057\u305f\u307b\u3046\u304c\u3044\u3044\uff1f\u3002","3c82c44c":"## 4.2 Quick Random Forest\u3092\u4f7f\u3063\u3066\u91cd\u8981\u306a\u5909\u6570\u3092\u63a2\u3059\u3002\n\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092\u542b\u3081\u305f\u5168\u3066\u306e\u5909\u6570\u3067\u91cd\u8981\u306a\u7279\u5fb4\u91cf\u3092\u628a\u63e1\u3059\u308b\u3002 \\\n\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\u306a\u3069\u306e\u524d\u51e6\u7406\u304c\u5fc5\u8981\u306a\u3044\u305f\u3081\u3001\u7d20\u65e9\u304f\u8a08\u7b97\u3067\u304d\u308b\u3002 \\\n\u7d20\u65e9\u304f\u8a08\u7b97\u3092\u884c\u3046\u305f\u3081\u306btree\u306e\u6570\u306f100\u306edirty\u306a\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u8a08\u7b97\u3057\u3066\u307f\u308b\u3002 \\\nR\u306eRandomForest()\u3067\u306f\u8a08\u7b97\u904e\u7a0b\u3067factor\u578b\u306e\u5909\u6570\u3092\u81ea\u52d5\u3067data.matrix()\u3067\u30c0\u30df\u30fc\u5909\u6570\u306b\u5909\u63db\u3057\u3066\u3044\u308b\u3002","74152311":"## 6 Target Variable Analysis and Transformation\n\u76ee\u7684\u5909\u6570\u306e\u5206\u5e03\u3092\u78ba\u8a8d\u3057\u3066\u7279\u6027\u3092\u628a\u63e1\u3059\u308b\u3002\u6b6a\u5ea6\u304c\u5927\u304d\u3044\u306a\u3089\u5bfe\u6570\u5909\u63db\u3092\u3057\u3066\u5bfe\u79f0\u306a\u5206\u5e03\u306b\u4fee\u6b63\u3059\u308b\u3002","4e2475d4":"## 5.5 \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u306b\u306f\u3042\u3063\u3066\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u306f\u306a\u3044\u5909\u6570\u3084\u6c34\u6e96\u3092\u524a\u9664\n\u3053\u306e\u624b\u306e\u51e6\u7406\u306f\u95a2\u6570\u3092\u4f7f\u3063\u3066\u6a5f\u68b0\u7684\u306b\u524a\u9664\u3059\u308b\u3068\u591a\u304f\u306e\u60c5\u5831\u304c\u5931\u308f\u308c\u308b\u305f\u3081\u30de\u30cb\u30e5\u30a2\u30eb\u3067\u51e6\u7406\u3057\u305f\u65b9\u304c\u30de\u30b7\u3067\u3042\u308b\u3002 \\\n\u5f93\u3063\u3066\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u5bfe\u3057\u3066\u614e\u91cd\u306b\u30de\u30cb\u30e5\u30a2\u30eb\u3067\u51e6\u7406\u3059\u308b\u3002","0d533f07":"#### BsmtFullBath\u3068BsmtHalfBath\n\u30d0\u30b9\u30eb\u30fc\u30e0\u306e\u6570\u3067\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u8fd1\u3044Numeric\u3002\u6b20\u640d\u5024\u306e\u3042\u308b\u884c\u306eBsmtQual\u304c\uff10\u3067\u3042\u308b\u304b\u3089BsmtHalfBath\u3082\u5b58\u5728\u3057\u306a\u3044\uff08=0\uff09\u3068\u8003\u3048\u308b\u3002","03be6fe9":"\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fTPE\u30b5\u30f3\u30d7\u30e9\u30fc\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3002","5eaf1665":"### LightGBM\n#### - **\u30d1\u30e9\u30e1\u30fc\u30bf**\n[\u30d1\u30e9\u30e1\u30fc\u30bf][1]\u306e\u8a2d\u5b9a\u65b9\u6cd5\u306f\u516c\u5f0fHP\u306eAPI\u3092\u53c2\u7167\u3002 \\\n\u57fa\u672c\u7684\u306b\u5b66\u7fd2\u7387\u306f\u4e0b\u3052\u308c\u3070\u4e0b\u3052\u308b\u307b\u3069\u7cbe\u5ea6\u306f\u4e0a\u304c\u308b\u305f\u3081\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u306a\u3044\u3002\nTraining API\u306e[\u4f7f\u3044\u65b9][2]\n\n#### - **\u53ce\u675f\u5224\u5b9a**\nEarly stopping\u306f\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\u304cn\u56de\u4f38\u3073\u306a\u304f\u306a\u3063\u305f\u3089\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u6b62\u3081\u308b\u65b9\u6cd5\u3002 \\\nIf early stopping is enabled during training, you can get predictions from the best iteration with \"bst.best_iteration\".\n\n\n[1]:https:\/\/lightgbm.readthedocs.io\/en\/latest\/Parameters.html\n[2]:https:\/\/lightgbm.readthedocs.io\/en\/latest\/Python-Intro.html","818338ed":"Numeric\u5909\u6570\u3060\u304c\u9023\u7d9a\u5024\u3067\u306f\u306a\u304f\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u8fd1\u3044\u3082\u306e\u3092\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u7f6e\u63db\u3059\u308b\u3002 \\\n\u307e\u305f\u3001\u5e74\u60c5\u5831\u3084\u6708\u60c5\u5831\u304c\u5165\u3063\u3066\u3044\u308b\u7279\u5fb4\u91cf\u306f\u5b63\u7bc0\u6027\u306a\u3069\u306e\u5468\u671f\u60c5\u5831\u3092\u6301\u3064\u3002 \\\n\u307e\u305f2007\u5e74\u306b\u30ea\u30fc\u30de\u30f3\u30b7\u30e7\u30c3\u30af\u304c\u3042\u3063\u305f\u305f\u3081\u3001\u305d\u306e\u60c5\u5831\u3092\u53cd\u6620\u3059\u308b\u305f\u3081\u306b\u306f\u9069\u5207\u306a\u6271\u3044\u304c\u8981\u308b\u3002 \\\n\u4eca\u56de\u306f\u5e74\u3001\u6708\u306e\u60c5\u5831\u3092\u305d\u306e\u307e\u307e\u6301\u305f\u305b\u308b\uff08\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u306a\u3044\uff09","42124978":"## 2.1 \u6b20\u640d\u5024\u306e\u78ba\u8a8d\n\u6b20\u640d\u5024\u88dc\u5b8c\u306ftrain\u306e\u307f\u3067\u306f\u306a\u304f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u304c\u5bfe\u8c61\u3002\u307e\u305a\u6b20\u640d\u5024\u304c\u3042\u308b\u30ab\u30e9\u30e0\u3092\u628a\u63e1\u3059\u308b\u3002","6cb944dc":"## 3.2.2 Neighborhood","e10d2827":"#### GarageCond,GarageQual\u3068GarageType\nGarageCond\u3068GarageQual\u306f\u6b20\u640d\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u540c\u3058\u306a\u306e\u3067\u5171\u901a\u306b\u51e6\u7406\u3059\u308b\u3002 \\\nGarageType\u306e\u6b20\u640d\u5024\u304c\u30ac\u30ec\u30fc\u30b8\u7121\u3057\u3092\u610f\u5473\u3059\u308b\u306e\u3067\u305d\u308c\u3068\u6bd4\u8f03\u3059\u308b\u3068\u5171\u901a\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u3082\u306e\u304c\u6b20\u640d\u3057\u3066\u3044\u305f\u305f\u3081\u3001 \\\nGarageCond\u3068GarageQual\u306e\u6b20\u640d\u5024\u306f\u30ac\u30ec\u30fc\u30b8\u7121\u3057\u306eNone\u307e\u305f\u306f\uff10\u3067\u57cb\u3081\u308b\u3002 \\\n\u305f\u3060\u3057GarageType\u306b\u5bfe\u3057\u3066GarageCond\u3068GarageQual\u306f\u6b20\u640d\u5024\u304c\uff12\u500b\u591a\u304b\u3063\u305f\u305f\u3081\u3001\u305d\u3053\u3092\u7279\u5b9a\u3057\u3066\u9069\u5207\u306a\u5024\u3092\u88dc\u5b8c\u3059\u308b\u3002 \\\nGarageQual\u3068GarageCond\u306f\u4f3c\u305f\u3088\u3046\u306a\u5909\u6570\u3067\u5197\u9577\u306a\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002","ab5a4197":"#### \u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3067\u78ba\u8a8d\u3055\u308c\u306a\u3044\u5909\u6570\u306e\u7279\u5b9a\n\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u5f8c\u3067\u6539\u5584\u3059\u308b","e144e30a":"### \u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u5206\u5272","b8cc7d3c":"\u4ee5\u4e0b\u3067\u306f\u6700\u5c0f\u5024\u3092\u6c42\u3081\u3066\u3044\u308b\u304c\u3001\u30b1\u30fc\u30b9\u306b\u3088\u3063\u3066\u306f\u6700\u5927\u5024\u3068\u6700\u5c0f\u5024\u306e\u6700\u9069\u5316\u3092\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u3002 \\\n\u305d\u306e\u3088\u3046\u306amulti-objective optimization\u3092\u5b9f\u884c\u3057\u305f\u3044\u5834\u5408\u306fdirection\u3067\u306f\u306a\u304f\n```Python\ndirections=['minimize', 'maximize']\n```\n\u3067\u6307\u5b9a\u3059\u308b\u3002 \u305d\u306e\u5834\u5408\u306e\u53ef\u8996\u5316\u306b\u306f\n```Python\noptuna.visualization.plot_pareto_front(study, target_names=[\"minimize\", \"maximize\"])\n```\n\u3092\u4f7f\u3046\u3068\u826f\u3044\u3002","5e9bc2ac":"# 3 Label encoding\/factorizing the remaining character variables\n\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\u3064\u3044\u3067\u306b\u5e8f\u5217\u5909\u6570\u306b\u5bfe\u3057\u3066\u306f\u5e8f\u5217\u60c5\u5831\u3092\u6570\u5024\u3067\u5909\u63db\u3057\u3066\u4e0e\u3048\u3001\u5c3a\u5ea6\u5909\u6570\u306b\u5bfe\u3057\u3066\u306fNone\u3067\u6b20\u640d\u5024\u3092\u57cb\u3081\u305f\u3002 \\\n\u3053\u3053\u3067\u306f\u6b20\u640d\u304c\u306a\u304b\u3063\u305f\u5e8f\u5217\u5909\u6570\u306b\u5bfe\u3057\u3066\u30de\u30cb\u30e5\u30a2\u30eb\u3067\u30e9\u30d9\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u3002 \\\n\u6b21\u306b\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306b\u8fd1\u3044Numeric\u5909\u6570\u306e\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\u3092\u884c\u3046\u3002\\","c6d0dc98":"### \u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u6700\u9069\u5316\u89e3\u6790\u306b\u3088\u308b\u53ef\u8996\u5316\n\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u9069\u5316\u306e\u69d8\u5b50\u3092[optuna.visualization][0]\u3067\u53ef\u8996\u5316\u3067\u304d\u308b\u305f\u3081\u3001LightGBM\u3092\u4f7f\u3063\u305f\u6700\u9069\u5316\u306e\u4e2d\u3067\u89e3\u8aac\u3057\u3066\u3044\u304f\u3002 \\\n\u4f7f\u3044\u305d\u3046\u306a\u3082\u306e\u306e\u307f\u629c\u7c8b\u3059\u308b\u3002 \\\n\u30c7\u30fc\u30bf\u306fHouse price\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3046\u3002\n\n[0]:https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/visualization\/index.html#module-optuna.visualization","e5a02ded":"#### KitchenQual\n\u6b20\u640d\u5024\u306f1\u500b\u3067\u4ed6\u306e\u30ad\u30c3\u30c1\u30f3\u306e\u6307\u6a19\u306f\u6b20\u640d\u5024\u304c\u306a\u304b\u3063\u305f\u305f\u3081\u6700\u983b\u5024\u3067\u88dc\u5b8c\u3059\u308b\u3002 \\\n\u5e8f\u5217\u5909\u6570\u306e\u305f\u3081\u30de\u30cb\u30e5\u30a2\u30eb\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u304a\u304f\u3002","1336038a":"## 3.2.6 Basement variables\nBasement variable\u3082Garage variables\u3068\u540c\u69d8\u306b\u4f3c\u305f\u3088\u3046\u306a\u5909\u6570\u304c\u591a\u3044\u304b\u3089\u5909\u6570\u3092\u307e\u3068\u3081\u308b\u3053\u3068\u3092\u610f\u8b58\u3059\u308b\u3002 \\\nTotalBsmtSF\u306f(BsmtFinSF1+BsmtFinSF2+BsmtUnfSF)\u3068\u306e\u76f8\u95a2\u304c\uff11\u306b\u306a\u308b\u3002\uff08\u9762\u7a4d\u306e\u5408\u8a08\u3060\u304b\u3089\u5f53\u7136\u305d\u3046\u306a\u308b\uff09","38ebb139":"### \u5b66\u7fd2\u66f2\u7dda\u306e\u30d7\u30ed\u30c3\u30c8\n[plot_intermediate_values()][0]\u3067\u8a73\u7d30\u306f\u78ba\u8a8d\u3067\u304d\u308b\u3002\n\n[0]:https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/visualization\/generated\/optuna.visualization.plot_intermediate_values.html#optuna.visualization.plot_intermediate_values","ce907dcb":"# 2 Missing data, label encoding, factorizing variables","af1782c3":"### Linear regression\n\u5358\u306a\u308b\u7dda\u5f62\u56de\u5e30\u3002\u305d\u308c\u4ee5\u4e0a\u306e\u3053\u3068\u306f\u306a\u3044\u3002","c919e121":"## 5.4.2 One hot encoding the categorical variables\n\u6700\u5f8c\u306b\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092One-hot encoding\u306b\u5909\u63db\u3059\u308b\u3002 \\\n\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u304c\u591a\u3044\u5834\u5408\u306f\u30ab\u30e9\u30e0\u306e\u6570\u304c\u5927\u91cf\u306b\u751f\u6210\u3055\u308c\u308b\u304c\u30de\u30b7\u30f3\u30d1\u30ef\u30fc\u3067\u30b4\u30ea\u62bc\u3057\u3059\u308b\u3068\u3059\u308b\u3002 \\\n\u306a\u304a\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u6c34\u6e96\u304cn\u500b\u3042\u308b\u3068\u304d\u306b\u30c0\u30df\u30fc\u5909\u6570\u3092n\u500b\u4f5c\u308b\u3068\u591a\u91cd\u5171\u7dda\u6027\u304c\u751f\u3058\u3066\u3057\u307e\u3046\u305f\u3081\u6700\u521d\u306e\u30ab\u30e9\u30e0\u306f\u843d\u3068\u3057\u3066n-1\u500b\u306e\u6c34\u6e96\u306b\u5fc5\u8981\u304c\u3042\u308b\u3002 \\\n\u3057\u304b\u3057\u30b3\u30f3\u30da\u306b\u7528\u3044\u3089\u308c\u308b\u30e2\u30c7\u30eb\u306f\u3082\u3068\u3082\u3068\u591a\u91cd\u5171\u7dda\u6027\u304c\u554f\u984c\u3068\u306a\u3089\u306a\u3044\u3053\u3068\u304c\u4e00\u822c\u7684\u3067\u3042\u308b\u305f\u3081\u7279\u306b\u6c17\u306b\u305b\u305a\u306bn\u500b\u306e\u30c0\u30df\u30fc\u5909\u6570\u3092\u751f\u6210\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3002","b33593b2":"## \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306fCV\u3092\u4f7f\u3063\u3066\u6700\u9069\u306a\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u3057\u51fa\u3059\u3053\u3068\u306b\u3042\u308a\u3001GridSearchCV\u3068RandomizedSearchCV\u304c\u3042\u308b\u3002 \\\n\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\uff1a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3042\u308b\u5019\u88dc\u3092\u5b9a\u3081\u3066\u305d\u308c\u3089\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u7dcf\u5f53\u305f\u308a\u3067\u8a08\u7b97\u3057\u3066\u6700\u9069\u5024\u3092\u63a2\u3057\u51fa\u3059\u3002\u8a08\u7b97\u30b3\u30b9\u30c8\u304c\u304b\u304b\u308b\u3002 \\\n\u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\uff1a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3042\u308b\u5019\u88dc\u3092\u5b9a\u3081\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3054\u3068\u306b\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3093\u3060\u7d44\u307f\u5408\u308f\u305b\u3092\u8a08\u7b97\u3059\u308b\u3002\u52b9\u7387\u306f\u30e9\u30f3\u30c0\u30e0\u30b5\u30fc\u30c1\u306e\u65b9\u304c\u826f\u3044\u3002 \\\n\u5024\u3092\u4f7f\u3063\u3066\u6700\u9069\u5024\u3092\u63a2\u3057\u51fa\u3059\u3002 \\\n\u3053\u3053\u3067\u306f[optuna][0]\u3092\u4f7f\u3063\u3066\u81ea\u52d5\u7684\u306b\u6700\u9069\u5024\u3092\u63a2\u3057\u51fa\u3059\u65b9\u6cd5\u3092\u63a1\u7528\u3059\u308b\u3002\n\n[0]:https:\/\/optuna.org\/","83a55568":"#### LotFrontage\n\u7269\u4ef6\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308b\u8def\u5730\u306e\u8ddd\u96e2\u3002\u6b20\u640d\u5024\u306f\uff14\uff18\uff16\u306a\u306e\u306b\u5bfe\u3057LotArea\u306f\u6b20\u640d\u5024\u7121\u3057\u3067\uff10\u306e\u5024\u3082\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u6b20\u640d\u5024\u306f\u4e2d\u9593\u5024\u3067\u88dc\u5b8c\u3059\u308b\u3002","18bc64df":"## 2.2 Delete unuseful features\n\u30c6\u30b9\u30bb\u30c3\u30c8\u306b\u542b\u307e\u308c\u306a\u3044\u30c7\u30fc\u30bf\u3084\u5168\u3066\u304cTrue\u306e\u30c7\u30fc\u30bf\u306a\u3069\u5fc5\u8981\u306a\u3044\u7279\u5fb4\u91cf\u3092\u524a\u9664\u3059\u308b\u3002","16a48eb3":"# 7 Modeling","b4448531":"#### PoolQC\u3068PoolArea\nPoolQC\u306f\u57fa\u672c\u7684\u306b\u30d7\u30fc\u30eb\u304c\u306a\u3044\u5bb6\u304c\u5927\u591a\u6570\u3067\u30d7\u30fc\u30eb\u306a\u3057\u3092NA\u3067\u8868\u73fe\u3057\u3066\u3044\u308b\u305f\u3081None\u3067\u88dc\u5b8c\u3059\u308b\u3002 \\\nPoolArea\u306f\u9762\u7a4d\uff10\u3067\u30d7\u30fc\u30eb\u306a\u3057\u3092\u8868\u73fe\u3057\u3066\u304a\u308a\u3001\u4e21\u8005\u306e\u30d7\u30fc\u30eb\u7121\u3057\u306e\u6570\u306f\u4e00\u81f4\u3057\u3066\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002 \\\n\u3057\u304b\u3057PoolQC\u306e\u6b20\u640d\u50242909\u306b\u5bfe\u3057\u3001PoolArea\u306f2906\u3068\u306a\u3063\u3066\u304a\u308a\u6570\u304c\u5408\u308f\u306a\u3044\u305f\u3081\u3001\u3053\u3053\u3082\u88dc\u5b8c\u3059\u308b\u3002","72c3d0ae":"# 10 \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u5b66\u7fd2\n\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u304c\u7d42\u308f\u3063\u305f\u3089\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u5b66\u7fd2\u3068\u4e88\u6e2c\u3092\u3059\u308b\u3002 \\\n\u5bfe\u76ee\u7684\u5909\u6570\u3092\u5bfe\u6570\u5909\u63db\u3057\u305f\u3082\u306e\u3092\u4f7f\u3063\u3066\u3044\u305f\u305f\u3081\u4e88\u6e2c\u5024\u306b\u5bfe\u3057\u3066\u3082\u5909\u63db\u3092\u304b\u3051\u3066\u5143\u306e\u30b9\u30b1\u30fc\u30eb\u306b\u623b\u3059\u5fc5\u8981\u304c\u3042\u308b\u3002","f4c0d3b3":"### Visualize hyperparameter relationships.\nSee [plot_contour()][0] for the details. \\\nparams=[\"param1\", \"param2\"]\u306e\u3088\u3046\u306b\u30ea\u30b9\u30c8\u3067\u8868\u793a\u3055\u305b\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u3082\u3067\u304d\u308b\u3002\n\n[0]:https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/visualization\/generated\/optuna.visualization.plot_contour.html#optuna.visualization.plot_contour\n\n","705bac0c":"### SVM\nSupport vector machines (SVMs) are a set of supervised learning methods used for classification, regression and outliers detection. \\\nFor regression problems we use Support Vector Regression method. \\\nThe model produced by Support Vector Regression depends only on a subset of the training data, because the cost function ignores samples whose prediction is close to their target. \\\nhttps:\/\/www.kaggle.com\/satishgunjal\/advanced-reg-techniques-linear-models-top-6?scriptVersionId=60264115&cellId=100","a73bba09":"#### Exterior1st, Exterior2nd\n\u6b20\u640d\u5024\u306f\u54041\u500b\u305a\u3064\u3002 \\\n\u5171\u901a\u306e\u884c\u304c\u6b20\u640d\u3057\u3066\u304a\u308a\u3001\u4ed6\u306eExterior\u306e\u6307\u6a19\u306f\u305d\u306e\u90e8\u5206\u306f\u6b20\u640d\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u305f\u3081\u6700\u983b\u5024\u3067\u7f6e\u304d\u63db\u3048\u308b\u3002","f17c9ff4":"\u30b5\u30f3\u30d7\u30eb\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5207\u308a\u66ff\u3048\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u884c\u3046\u3002","148b881b":"## 5.2.5 Porch variables\nWoodDeckSF: Wood deck area in square feet\n\nOpenPorchSF: Open porch area in square feet\n\nEnclosedPorch: Enclosed porch area in square feet\n\n3SsnPorch: Three season porch area in square feet\n\nScreenPorch: Screen porch area in square feet\n\n\u30dd\u30fc\u30c1\u306e\u5909\u6570\u3082\uff15\u3064\u307b\u3069\u3042\u308a\u3001\u3053\u308c\u3089\uff11\u3064\uff11\u3064\u306f\u76ee\u7684\u5909\u6570\u3068\u3042\u307e\u308a\u76f8\u95a2\u304c\u9ad8\u304f\u306a\u3044\u306e\u3067\u3001\u5168\u3066\u8db3\u3057\u3066\u307f\u308b\u3068\u76f8\u95a2\u4fc2\u6570\u306f0.39\u307e\u3067\u4e0a\u304c\u308b\u3002","687173db":"### Tutorial\nOptuna\u3092\u4f7f\u3046\u306b\u3042\u305f\u3063\u3066\u3001\u6700\u9069\u5316\u3055\u308c\u308b\u3079\u304d\u95a2\u6570\u3092object\u3068\u547c\u3076\u3002\u3053\u3053\u3067\u306f\u4f8b\u793a\u306e\u305f\u3081\u306b\u307e\u305a\u306f\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u9069\u5316\u3059\u308b\u306e\u3067\u306f\u306a\u304f \\\n$(x-2)^2$\u3092\u6700\u9069\u5316\u3057\u3066\u307f\u3088\u3046\u3002\n \\\n#### objective: \nobjective\u3067\u8fd4\u3055\u308c\u308b\u5024\u3092\u306fx\u306e\u5024\u3092\u5909\u3048\u306a\u304c\u3089\u7e70\u308a\u8fd4\u3057object\u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u3001\u6700\u5c0f\u5024\uff08Optimization\uff09\u3092\u8fd4\u3059x\u306e\u6700\u9069\u5024\u3092\u7b97\u51fa\u3059\u308b\u3002 \\\n\u6a5f\u68b0\u5b66\u7fd2\u3067\u4f7f\u3046\u5834\u5408\u306f\u5927\u62b5\u306e\u5834\u5408loss\u304baccuracy\uff08\u7cbe\u5ea6\uff1armse\u306a\u3069\u30b3\u30f3\u30da\u3067\u6307\u5b9a\u3055\u308c\u308b\u8a55\u4fa1\u6307\u6a19\uff09\u3092\u8fd4\u3059\u3088\u3046\u306bobjective\u3092\u66f8\u3044\u3066\u3044\u304f\u3002 \\\n \n#### Trial\nTrial\u306f\u76ee\u7684\u95a2\u6570\u306e\u4e00\u56de\u306e\u5b9f\u884c\u306b\u5bfe\u5fdc\u3057\u3066\u304a\u308a\u3001\u5185\u90e8\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u3002 \\\nsuggest API\u306f\u6307\u5b9a\u3055\u308c\u305f\u7bc4\u56f2\u306e\u4e2d\u3067\u5747\u4e00\u306b\uff08\u3053\u306e\u5834\u5408\u306f\u30e9\u30f3\u30c0\u30e0\u304b\u306a\uff09\u6570\u5b57\u3092\u9078\u629e\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u3053\u306e\u4f8b\u3060\u3068-10\u304b\u308910\u306e\u7bc4\u56f2\u306e\u6d6e\u52d5\u5c0f\u6570\u306e\u5024\u3092\u53d6\u3063\u3066\u304f\u308b\u3002 \\\n \n#### study\n\u6700\u9069\u5316\u306b\u4f7f\u3046\u305f\u3081\u306etrial\u3068\u30bb\u30c3\u30c8\u306e\u3082\u306e\u3067\u6700\u9069\u5024\u3084\u6700\u9069\u89e3\u3092\u62bd\u51fa\u3059\u308b\u306e\u306b\u4f7f\u3046\u3082\u306e\u3067\u3053\u306e\u5f8c\u306b\u8a73\u3057\u304f\u89e3\u8aac\u3059\u308b\u3002\\\n\u5b66\u7fd2\u3055\u308c\u305f\u6700\u9069\u5024\u306fstudy.best_params\u95a2\u6570\u3067\u53d6\u3063\u3066\u304f\u308b\u3002","edb9aab1":"## 5.2.1 Total Bathroom\n\u500b\u3005\u306e\u30d0\u30b9\u30eb\u30fc\u30e0\u5909\u6570\u306f\u76ee\u7684\u5909\u6570\u3068\u305d\u3093\u306a\u306b\u5927\u304d\u3044\u76f8\u95a2\u4fc2\u6570\u3067\u306f\u306a\u3044\u304c\u5168\u3066\u8db3\u3057\u305f\u3082\u306e\u3068\u306e\u76f8\u95a2\u4fc2\u6570\u3092\u898b\u3066\u307f\u308b\u3002 \\\nTotalBathrooms\u306f\uff15\u500b\u3068\uff16\u500b\u304c\u5916\u308c\u5024\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u30810.63\u6b62\u307e\u308a\u3060\u304c\u5341\u5206\u9ad8\u3044\u76f8\u95a2\u4fc2\u6570\u3092\u793a\u3059\u3002","0f15e0cf":"#### GarageYrBlt\u3068GarageFinish\nGarageYrBlt\u306f\u5bb6\u306e\u7bc9\u5e74\u6570\u3068\u76f8\u95a2\u304c\u3042\u308a\u305d\u3046\u3060\u304b\u3089\u5f8c\u3067\u307e\u3068\u3081\u308b\u304b\u691c\u8a0e\u3059\u308b\u3002 \\\nGarageYrBlt\u306fNumeric\u306a\u5909\u6570\u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304c\u6b6a\u3093\u3067\u3044\u305f\u305f\u3081\u4e2d\u9593\u5024\u3067\u88dc\u5b8c\u3057\u305f\u3002 \\\nGarageFinish\u306f\u5bb6\u306eQuality\u3068\u76f8\u95a2\u304c\u3042\u308a\u305d\u3046\u3060\u304c\u3089\u5f8c\u3067\u307e\u3068\u3081\u308c\u308b\u304b\u691c\u8a0e\u3059\u308b\u3002 \\\nGarageFinish\u306fNA\u306b\u610f\u5473\u304c\u3042\u308b\u305f\u3081\uff08NA\u306fNoGarage\uff090\u3092\u5165\u308c\u3066\u5e8f\u5217\u5909\u6570\u306a\u306e\u3067\u30de\u30cb\u30e5\u30a2\u30eb\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u305f\u3002 \\\nGarageFinish\u306fOverallQual\u3068\u307e\u3068\u3081\u3089\u308c\u305d\u3046\u3002","7bee0900":"### 3.2.1 GrLivArea\u306b\u3064\u3044\u3066\nGrLivArea\u306b\u3064\u3044\u30661stFlrSF\u30682ndFlrSF\u3068\u306e\u76f8\u95a2\u304c\u5f37\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u3001GrLivArea\u3068(1stFlrSF+2ndFlrSF)\u306e\u76f8\u95a2\u4fc2\u6570\u304c0.9\u4ee5\u4e0a\u3068\u306a\u308b\u3053\u3068\u304b\u3089\u3001 \\\nGrLivArea = (1stFlrSF+2ndFlrSF) \u3068\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002 \\\nTotalRmsAbvGrd\u3068\u3082\u76f8\u95a2\u304c\u975e\u5e38\u306b\u9ad8\u3044(>0.81)","eccbf991":"#### GarageCars\u3068GarageArea\n\u6b20\u640d\u5024\u306f\uff11\u500b\u3002\u3053\u308c\u3089\u306f\u307b\u307c\u540c\u3058\u6307\u6a19\u3067\u3042\u308b\u305f\u3081\u5171\u901a\u306b\u51e6\u7406\u3059\u308b\u3002","cb9b999b":"### Lasso\u56de\u5e30\n[\u30e9\u30c3\u30bd\u56de\u5e30][0]\u306f\u7dda\u5f62\u56de\u5e30\u306b\u6b63\u5247\u5316\u9805\u3092\u52a0\u3048\u308b\u306e\u304c\u30ea\u30c3\u30b8\u56de\u5e30\u3068\u540c\u3058\u3067\u3042\u308b\u304c\u6b63\u5247\u5316\u9805\u306bL1\u30ce\u30eb\u30e0\u3092\u4f7f\u7528\u3059\u308b\u3002\n\n\n[0]:https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.Lasso.html","91883dee":"## 3.2.5 Garage variables\nGarage variables\u306f\u76ee\u7684\u5909\u6570\u3068\u76f8\u95a2\u304c\u9ad8\u3044\u3082\u306e\u304c\u591a\u3044\u304c\u3001\uff17\u3064\u3082\u6307\u6a19\u304c\u5b58\u5728\u3057\u3066\u591a\u91cd\u5171\u7dda\u6027\u304c\u751f\u3058\u3066\u3044\u308b\u5909\u6570\u304c\u591a\u3044\u3002 \\\n\uff13\u3064\u304f\u3089\u3044\u306b\u5909\u6570\u3092\u6e1b\u3089\u3059\u3053\u3068\u3092\u76ee\u6a19\u3068\u3059\u308b\u304c\u3001\u305d\u306e\u307e\u3048\u306b\u53ef\u8996\u5316\u3059\u308b\u3002 \\\nGarageArea\u3068GarageCars\u306f\u76f8\u95a2\u304c\u9ad8\u3044\u304b\u3089\u307e\u3068\u3081\u3089\u308c\u305d\u3046\u3002 \\\nGarageQual\u3068GarageCond\u306f\u307b\u307c\u540c\u3058\u7279\u5fb4\u91cf\u306a\u306e\u3082\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3068\u76f8\u95a2\u4fc2\u6570\u304b\u3089\u308f\u304b\u308b\u3002 \\\nGarageFinish\u306f\u3042\u307e\u308aQuality\u306b\u306f\u5bc4\u4e0e\u3057\u306a\u3044\u3053\u3068\u3082\u308f\u304b\u308b\u304c\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u304b\u3089GarageYrBuild\u3068\u76f8\u95a2\u304c\u9ad8\u3044\u3053\u3068\u304c\u308f\u304b\u308b\uff08>0.6\uff09\u3002","7c64690a":"# Optuna\nScikit-learn\u3092\u4f7f\u3046\u5834\u5408\u306e\u4f8b\uff08[Optuna][0]\u516c\u5f0f\u30da\u30fc\u30b8\u304b\u3089\u5f15\u7528\uff09 \\\n \\\nYou can optimize Scikit-Learn hyperparameters, such as the C parameter of SVC and the max_depth of the RandomForestClassifier, in three steps: \\\n\n1.Wrap model training with an objective function and return accuracy \\\n2.Suggest hyperparameters using a trial object \\\n3.Create a study object and execute the optimization \\\n \\\n\u3053\u3061\u3089\u306e[\u30da\u30fc\u30b8][1]\u3084[upura\u3055\u3093\u306e\u30ab\u30fc\u30cd\u30eb][2],[dixhom\u3055\u3093\u306e\u30ab\u30fc\u30cd\u30eb][3]\u3082\u8a73\u3057\u304f\u3001\u5b9f\u969b\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\u306f[G.Wang\u3055\u3093\u306e\u30ab\u30fc\u30cd\u30eb][4]\u304c\u8a73\u3057\u3044\u3002\n\n[0]:https:\/\/optuna.org\/\n[1]:https:\/\/www.kaggle.com\/corochann\/optuna-tutorial-for-hyperparameter-optimization\n[2]:https:\/\/www.kaggle.com\/sishihara\/upura-kaggle-tutorial-05-tuning\n[3]:https:\/\/www.kaggle.com\/dixhom\/bayesian-optimization-with-optuna-stacking\n[4]:https:\/\/www.kaggle.com\/infof4221wang\/houseprice-optuna-framework-blending-model","3ec7eb23":"### \u6700\u9069\u5316\u306e\u69d8\u5b50\u306e\u30d7\u30ed\u30c3\u30c8","ea5b1b58":"### \u91cd\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u78ba\u8a8d\nSee [plot_param_importances()][0] for the details.\n\n[0]:https:\/\/optuna.readthedocs.io\/en\/stable\/reference\/visualization\/generated\/optuna.visualization.plot_param_importances.html#optuna.visualization.plot_param_importances","c208d4d9":"use_features_in_secondary=False\u306b\u3059\u308b\u3068\u7cbe\u5ea6\u304c\u843d\u3061\u308b\u4e0a\u306b\u30b9\u30b3\u30a2\u3082\u843d\u3061\u305f\u3002"}}