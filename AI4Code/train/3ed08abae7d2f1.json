{"cell_type":{"31646269":"code","acc1cd7e":"code","3f3461fd":"code","bb6273b5":"code","6f05b492":"code","1dbfd7e4":"code","c41d3a80":"code","e5d55e92":"code","5e1092ed":"code","021a59ca":"code","a6834f42":"code","ad493a24":"code","84d2aca4":"code","2be18b1d":"code","f905a1f9":"code","911e829e":"code","7d0d390c":"code","5a188019":"code","7fe6cb3f":"code","958cf0e5":"code","d9eea6c2":"code","31f9b124":"code","817adfec":"code","42ab76a8":"code","29c0fd08":"code","8d21d67a":"code","534a832d":"code","98b04efa":"code","467639b4":"code","790167db":"code","ee91e268":"code","0bf5db14":"code","39cd13da":"code","c214fd02":"code","02934d5f":"code","783eec4a":"code","1d1629d6":"code","48abf692":"code","4377b692":"code","1bb1a75d":"code","7e361ff3":"code","1d59393f":"code","7733a0e4":"code","c7485307":"code","753fe392":"code","bb6ff184":"code","998bc837":"code","b1a962c2":"code","45574255":"code","32d130c2":"code","e2d011d5":"code","6bc3b120":"code","a39289be":"code","69dcc8a7":"code","c1316368":"code","2870627b":"code","9fd2315c":"code","c8d6e33e":"code","c7fa5e50":"code","a342d053":"code","53d6fe91":"code","5321a9ae":"code","817499e1":"code","ea12bd09":"code","360e1542":"code","089e031c":"code","00f11fae":"code","95c7ad2e":"markdown","f96c8f95":"markdown","73596a0f":"markdown","945da9db":"markdown","e711f9a1":"markdown","cdf6f6ef":"markdown","e35b197b":"markdown","5a5cea3a":"markdown","eedf9917":"markdown","d62f1cab":"markdown","bbbe6aa0":"markdown","26b7303d":"markdown","f45560bc":"markdown","f84afbea":"markdown"},"source":{"31646269":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv\nfrom matplotlib import pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","acc1cd7e":"train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv')","3f3461fd":"train.head(3)","bb6273b5":"import seaborn as sns","6f05b492":"train.info()","1dbfd7e4":"df1 = train.Population.groupby(train['Country_Region']).max().sort_values(ascending= False)\ndf10 = pd.DataFrame()\ndf20 = pd.DataFrame()\ndf10['population'] = df1.iloc[0:10]\ndf10['country']= df10.index\ndf20['population'] = df1.iloc[11:20]\ndf20['country'] = df20.index","c41d3a80":"plt.figure(figsize =(10,10))\nplt.subplot(2,1,1)\nsns.barplot(x='country', y='population', data=df10, orient ='v')\nplt.xlabel('Country')\nplt.title('Popoulation Top 10')\nplt.subplot(2,1,2)\nsns.barplot(x='country', y='population', data=df20, orient ='v')\nplt.xlabel('Country')\nplt.title('Population Next 10')","e5d55e92":"train1= train[train['Target']=='ConfirmedCases']\ndata1 = pd.DataFrame()\ndata1['values'] =train1.TargetValue.groupby(train1['Country_Region']).sum().sort_values(ascending= False)\ndata1['country'] = data1.index\ndata1.index = np.arange(0,len(data1))\ndata10 = data1.iloc[0:10,:]\ndata20 = data1.iloc[11:20,:]","5e1092ed":"plt.figure(figsize =(10,10))\nplt.subplot(2,1,1)\nsns.barplot(x='country', y='values', data=data10, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Cases')\nplt.title('Covid Cases Top 10')\nplt.subplot(2,1,2)\nsns.barplot(x='country', y='values', data=data20, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Cases')\nplt.title('Covid Cases Next 10')","021a59ca":"train1= train[train['Target']!='ConfirmedCases']\ndata1 = pd.DataFrame()\ndata1['values'] =train1.TargetValue.groupby(train1['Country_Region']).sum().sort_values(ascending= False)\ndata1['country'] = data1.index\ndata1.index = np.arange(0,len(data1))\ndata10 = data1.iloc[0:10,:]\ndata20 = data1.iloc[11:20,:]","a6834f42":"plt.figure(figsize =(10,10))\nplt.subplot(2,1,1)\nsns.barplot(x='country', y='values', data=data10, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Deaths')\nplt.title('Covid Cases Top 10')\nplt.subplot(2,1,2)\nsns.barplot(x='country', y='values', data=data20, orient ='v')\nplt.xlabel('Country')\nplt.ylabel('Deaths')\nplt.title('Covid Cases Next 10')","ad493a24":"df = train['TargetValue'].groupby(train['Target']).sum()\nlabels =[df.index[0],df.index[1]]\nsizes = [df[0],df[1]]\nexplode = (0, 0.2)  \n\nplt.figure(figsize = (5,5))\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\n\nplt.show()","84d2aca4":"india = train[train['Country_Region']=='India']","2be18b1d":"india.info()","f905a1f9":"india.drop(['County','Province_State'],axis =1,inplace =True)","911e829e":"india.head(2)","7d0d390c":"india.index = np.arange(0,len(india)) #rechanging the index","5a188019":"india.head(2)","7fe6cb3f":"ind = india[india['Target']=='ConfirmedCases']\nind.index = np.arange(0,len(ind))","958cf0e5":"ind.head(2)","d9eea6c2":"print(\"Date with more no.of cases in india {}\".format((ind[ind['TargetValue']==ind['TargetValue'].max()]['Date']).values))\nprint(\"The cases are {}\".format((ind[ind['TargetValue']==ind['TargetValue'].max()]['TargetValue']).values))","31f9b124":"list1 = []\nfor i in range(2,7):\n    date = '2020'+'-0'+str(i)+'-01'\n    list1.append(ind[ind['Date']<date]['TargetValue'].sum())\nprint(list1)","817adfec":"sns.barplot(['upto Jan','Upto Feb','Upto Mar', 'Upto Apr','Upto May'],list1)","42ab76a8":"list2 =[]\nfor i in range(len(list1)):\n    if i ==0:\n        list2.append(list1[i])\n    else:\n        list2.append(list1[i]-list1[i-1])\nprint(list2)","29c0fd08":"labels =['Jan','Feb','Mar','Apr','May']\nsns.barplot(labels,list2)","8d21d67a":"df = india['TargetValue'].groupby(train['Target']).sum()\ndf","534a832d":"labels =[df.index[0],df.index[1]]\nsizes = [df[0],df[1]]\nexplode = (0, 0.2)  \nplt.figure(figsize = (5,5))\n\nplt.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',\n        shadow=True, startangle=90)\n\nplt.show()","98b04efa":"wor = train[train['Target']=='ConfirmedCases']","467639b4":"print(\"Date with more no.of cases  {}\".format((wor[wor['TargetValue']==wor['TargetValue'].max()]['Date']).values))\nprint(\"The cases are {}\".format((wor[wor['TargetValue']==wor['TargetValue'].max()]['TargetValue']).values))\nprint(\"The Country is {}\".format((wor[wor['TargetValue']==wor['TargetValue'].max()]['Country_Region']).values))","790167db":"wor.columns","ee91e268":"independent_columns = ['Country_Region','Weight','Target','Date']\ndependent_column = ['TargetValue']","0bf5db14":"X= train[independent_columns]\ny = train[dependent_column]","39cd13da":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nX['Target']=le.fit_transform(X['Target'])","c214fd02":"X.info()","02934d5f":"train1= train[train['Target']=='ConfirmedCases']\ndata1 = pd.DataFrame()\ndata1['values'] =train1.TargetValue.groupby(train1['Country_Region']).sum().sort_values(ascending= False)\ndata1['country'] = data1.index","783eec4a":"k = len(data1['country'])\ndict1 = {}\nfor i in data1['country']:\n    dict1[i] = k\n    k =k-1","1d1629d6":"list1=[]\nX['encoded_country']=0\nfor i in X['Country_Region']:\n    list1.append(dict1[i])\nX['encoded_country'] = list1","48abf692":"X['encoded_country'].value_counts()","4377b692":"X['date_dup'] = pd.to_datetime(X['Date'])","1bb1a75d":"X['month'] = 0\nlist1=[]\nfor i in X['date_dup']:\n    list1.append(i.month)\nX['month'] = list1","7e361ff3":"X['date'] = 0\nlist1=[]\nfor i in X['date_dup']:\n    list1.append(i.day)\nX['date'] = list1","1d59393f":"X.head(2)","7733a0e4":"X.drop(['Country_Region','Date','date_dup'],axis =1,inplace =True)","c7485307":"X.head(2)","753fe392":"plt.figure(figsize =(10,10))\nsns.heatmap(X.corr(),annot=True)","bb6ff184":"from sklearn.model_selection import train_test_split as tts","998bc837":"max_range =10","b1a962c2":"from sklearn.ensemble import RandomForestRegressor as regr\nfrom sklearn.metrics import r2_score","45574255":"'''for i in range(max_range):\n    X_train,X_test,y_train,y_test = tts(X,y,test_size =0.3,random_state =i)\n    model = regr()\n    model.fit(X_train,y_train)\n    print(\"Random state {}\\n\".format(i))\n    print(r2_score(y_test,model.predict(X_test)))'''","32d130c2":"X_train,X_test,y_train,y_test = tts(X,y,test_size =0.3,random_state =7)\nmodel = regr()\nmodel.fit(X_train,y_train)","e2d011d5":"print(r2_score(y_test,model.predict(X_test)))","6bc3b120":"test = test[independent_columns]","a39289be":"list1=[]\ntest['encoded_country']=0\nfor i in test['Country_Region']:\n    list1.append(dict1[i])\ntest['encoded_country'] = list1","69dcc8a7":"test['date_dup'] = pd.to_datetime(test['Date'])","c1316368":"test['month'] = 0\nlist1=[]\nfor i in test['date_dup']:\n    list1.append(i.month)\ntest['month'] = list1","2870627b":"test['date'] = 0\nlist1=[]\nfor i in test['date_dup']:\n    list1.append(i.day)\ntest['date'] = list1","9fd2315c":"test.head(2)","c8d6e33e":"test.drop(['Country_Region','Date','date_dup'],axis =1,inplace =True)","c7fa5e50":"test.head(2)","a342d053":"le1 =LabelEncoder()\ntest['Target'] = le1.fit_transform(test['Target'])","53d6fe91":"pred = model.predict(test)","5321a9ae":"t =pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/test.csv')\nss = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-5\/submission.csv')","817499e1":"output = pd.DataFrame({'Id': t.ForecastId  , 'TargetValue': pred})","ea12bd09":"a=output.groupby(['Id'])['TargetValue'].quantile(q=0.05).reset_index()\nb=output.groupby(['Id'])['TargetValue'].quantile(q=0.5).reset_index()\nc=output.groupby(['Id'])['TargetValue'].quantile(q=0.95).reset_index()","360e1542":"a.columns=['Id','q0.05']\nb.columns=['Id','q0.5']\nc.columns=['Id','q0.95']\na=pd.concat([a,b['q0.5'],c['q0.95']],1)\na['q0.05']=a['q0.05']\na['q0.5']=a['q0.5']\na['q0.95']=a['q0.95']","089e031c":"sub=pd.melt(a, id_vars=['Id'], value_vars=['q0.05','q0.5','q0.95'])\nsub['variable']=sub['variable'].str.replace(\"q\",\"\", regex=False)\nsub['ForecastId_Quantile']=sub['Id'].astype(str)+'_'+sub['variable']\nsub['TargetValue']=sub['value']\nsub=sub[['ForecastId_Quantile','TargetValue']]\nsub.reset_index(drop=True,inplace=True)\nsub.to_csv(\"submission.csv\",index=False)\nsub.head()","00f11fae":"sub.info()","95c7ad2e":"# <center>Top 20 in Population<\/center>","f96c8f95":"# <center>Monthly Progression of disease <\/center>","73596a0f":"# <center>Preprocessing the test data in the same way we did for training data<\/center>","945da9db":"# <center>Top 20 in Deaths<\/center>","e711f9a1":"In this kernal i'm going to create a predictive model for covid19 global-forecasting week 5 data which contains around 7 lakhs data for  training and we have to predict the target values for 3 lakhs test data\n\nIn this model first i have did some analysis with the data with some graphs and also the the effect of corona in  India have been analysed seperately.\n\nFinally I created a ensemble learning model with almost 0.96 Rsquared score","cdf6f6ef":"# <center>Top 20 in Confirmed Cases<\/center>","e35b197b":"# <center> Picking out date and month seperately<\/center>","5a5cea3a":"# <center> Seeing the Correleation<\/center>","eedf9917":"# <center>Encoding Country according to it's rank in no.of confirmed cases<\/center>","d62f1cab":"# <center>Fatalities vs Confirmed cases(India)<\/center>","bbbe6aa0":"# <center>Analysing the cases in India<\/center>","26b7303d":"# Actually I did some processing to find the best random state and I commented because it takes so much time to run\nBEST RANDOM STATE:7","f45560bc":"# <center>Fatalities vs Confirmed cases(WW)<\/center>","f84afbea":"# <center>Count per month<\/center>"}}