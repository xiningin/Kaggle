{"cell_type":{"93d0853b":"code","407c8f08":"code","076156e2":"code","2f36a51a":"code","902883e9":"code","c714aae3":"code","577d33b8":"code","960c58b3":"code","7a947ca5":"code","6258ea1c":"code","c19e6065":"code","75d784d8":"code","29fc8f5c":"code","12480cf7":"code","31ae0b54":"code","adbe3587":"code","e7d64598":"markdown","4d807d5e":"markdown","d54f0a1c":"markdown","03cc61f2":"markdown","1f7870e8":"markdown"},"source":{"93d0853b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","407c8f08":"# Leitura do dataset:\n\ndf = pd.read_csv('\/kaggle\/input\/cardiovascular-disease-dataset\/cardio_train.csv', sep=';')","076156e2":"# Verificando o tamanho do dataset: \n\ndf.shape","2f36a51a":"# Algumas informa\u00e7\u00f5es: \n\ndf.info()","902883e9":"# Verificando as cinco primeiras linhas:\n\ndf.head()","c714aae3":"# Verificando a correla\u00e7\u00e3o entre as vari\u00e1veis:\n\ndf.corr()","577d33b8":"# Verificando estat\u00edsticas descritivas:\n\ndf.describe()","960c58b3":"# Selecionando as colunas para serem treinadas:\n\ncols = [c for c in df.columns if c not in ['id','cardio']]","7a947ca5":"# Separando o dataset em treino, teste e valida\u00e7\u00e3o:\n\n\nfrom sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(df, random_state = 42, test_size = 0.1)\n\ntrain, valid = train_test_split(train, random_state = 42, test_size = 0.1)\n\nprint('Train Shape:', train.shape) \n\nprint('Valid Shape:', valid.shape)\n\nprint('Test Shape:', test.shape)","6258ea1c":"# Treinando o modelo de Random Forest Classifier:\n\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators = 200, n_jobs = -1, random_state = 42)\n\nrf.fit(train[cols], train['cardio'])","c19e6065":"# Fazendo previs\u00f5es com o modelo treinado na base de valida\u00e7\u00e3o:\n\npred_val = rf.predict(valid[cols])\n\npred_val","75d784d8":"# Verificando o desempenho do modelo com a m\u00e9trica na base de valida\u00e7\u00e3o:\n\nfrom sklearn.metrics import accuracy_score\n\naccuracy_score(valid['cardio'], pred_val)","29fc8f5c":"# Verificando a distribui\u00e7\u00e3o da target da base de valida\u00e7\u00e3o:\n\nvalid['cardio'].value_counts(normalize=True)","12480cf7":"from sklearn import svm\nfrom sklearn.model_selection import cross_val_score","31ae0b54":"scores = cross_val_score(estimator=rf,X=train[cols],y=train['cardio'],cv=10)\n\nprint(scores)","adbe3587":"print (scores.mean())","e7d64598":"Pode-se perceber que n\u00e3o h\u00e1 nenhuma correla\u00e7\u00e3o forte ou moderada em nenhuma das vari\u00e1veis.","4d807d5e":"A distribui\u00e7\u00e3o da coluna target da base de valida\u00e7\u00e3o est\u00e1 balanceada, portanto uma acur\u00e1cia de 71% pode ser considerada aceit\u00e1vel como desempenho do modelo.","d54f0a1c":"# Doen\u00e7as Cardiovasculares - Modelo de Classifica\u00e7\u00e3o","03cc61f2":"# Aplicando cross-validation:","1f7870e8":"# Modelo de Classifica\u00e7\u00e3o"}}