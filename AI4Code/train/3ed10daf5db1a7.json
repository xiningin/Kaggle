{"cell_type":{"fd1a3afc":"code","d0885f68":"code","55974b37":"code","96c0f766":"code","0d5d10e7":"code","d23510dc":"code","bb82f8fe":"code","fe2fbe42":"code","fe1da8c5":"code","2e2d113b":"code","166eae7f":"code","d5c8532b":"code","bbe7c124":"code","30eef58d":"code","88e856ca":"code","9012fe57":"code","fb226748":"code","0b290171":"code","11825278":"code","97962439":"code","46461022":"code","5c02afa3":"code","ce1e49b6":"code","cdeed85b":"code","463c235f":"code","87d535a8":"code","dbf8bc50":"code","385a45bd":"code","d081feaf":"markdown","3656f359":"markdown","9f1457b4":"markdown","fddd38c3":"markdown","a4cddf17":"markdown","1e10bc26":"markdown","ef290226":"markdown"},"source":{"fd1a3afc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d0885f68":"#read the data\ndata = pd.read_csv('..\/input\/train_V2.csv')","55974b37":"data.shape","96c0f766":"data = data.dropna()\ndata.shape","0d5d10e7":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_absolute_error","d23510dc":"data.matchType.unique()","bb82f8fe":"def merge_matchType(x):\n    if x in {'normal-squad-fpp', 'crashfpp', 'crashtpp', 'normal-duo-fpp',\n       'flarefpp', 'normal-solo-fpp', 'flaretpp', 'normal-duo',\n       'normal-squad', 'normal-solo'}:\n        return 'others'\n    else:\n        return x","fe2fbe42":"data['matchType'] = data.matchType.apply(merge_matchType)\n\ndata.matchType.unique()","fe1da8c5":"data_dumm = pd.get_dummies(data, columns=['matchType'])\ndata_dumm.head()","2e2d113b":"data_dumm = data_dumm.drop('matchType_others', axis=1)","166eae7f":"data_dumm.columns","d5c8532b":"data = data_dumm.loc[:,['Id', 'groupId', 'matchId', 'assists', 'boosts', 'damageDealt', 'DBNOs',\n       'headshotKills', 'heals', 'killPlace', 'killPoints', 'kills',\n       'killStreaks', 'longestKill', 'matchDuration', 'maxPlace', 'numGroups',\n       'rankPoints', 'revives', 'rideDistance', 'roadKills', 'swimDistance',\n       'teamKills', 'vehicleDestroys', 'walkDistance', 'weaponsAcquired',\n       'winPoints', 'matchType_duo', 'matchType_duo-fpp',\n       'matchType_solo', 'matchType_solo-fpp', 'matchType_squad',\n       'matchType_squad-fpp', 'winPlacePerc']]","bbe7c124":"print(data.shape)\ndata.head()","30eef58d":"data.maxPlace.plot(kind='hist')","88e856ca":"print('There are {} unique maxPlace.'.format(len(data.maxPlace.unique())))","9012fe57":"data_store_by_maxPlace = {}\nfor x in data.maxPlace.unique():\n    data_store_by_maxPlace[x] = data.loc[data.maxPlace==x]","fb226748":"# Credit: https:\/\/www.kaggle.com\/anycode\/simple-nn-baseline-4\n\ndef adjust_pred(x, maxPlace):\n    space = 1\/(maxPlace-1)\n    return np.round(x \/ space) * space","0b290171":"def generate_lgb_model(data, for_eval):\n    # split data into X and y\n    X = data.iloc[:,3:33]\n    \n    maxPlace = X.maxPlace.unique()\n    X = X.drop('maxPlace', axis=1)\n    Y = data.iloc[:,33]\n    \n    if for_eval == True:\n        seed = 7\n        test_size = 0.33\n        X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)\n    else:\n        X_train, y_train = X, Y\n        \n    d_train = lgb.Dataset(X_train, label=y_train)\n\n    params = {}\n    params['objective'] = 'regression'\n    params['metric'] = 'mae'\n\n    model = lgb.train(params, d_train)\n    \n    if for_eval == True:\n        #Prediction\n        y_pred=model.predict(X_test)\n        \n        y_pred = adjust_pred(y_pred, maxPlace)\n        mae = mean_absolute_error(y_test, y_pred)\n        print(\"MAE for maxPlace = {}: {}\".format(maxPlace, mae))\n    \n        return [model, (list(y_test), y_pred)]\n    \n    else:\n        return model","11825278":"model_store = {}\nmaxPlace_set = set(data_store_by_maxPlace.keys())\nprint('There are {} unique maxPlace.'.format(len(maxPlace_set)))\n\nfor key, value in data_store_by_maxPlace.items():\n    model_store[key] = generate_lgb_model(value,for_eval=True)\n    maxPlace_set = maxPlace_set - {key}\n    print('There are {} more models to go.'.format(len(maxPlace_set)))","97962439":"y_test_overall = []\ny_pred_overall = []\nfor value in model_store.values():\n    y_test_overall.append(value[1][0])\n    y_pred_overall.append(value[1][1])","46461022":"print('The overall mae is {}.'.format(mean_absolute_error([y for x in y_test_overall for y in x],[y for x in y_pred_overall for y in x])))","5c02afa3":"model_store_full = {}\nmaxPlace_set = set(data_store_by_maxPlace.keys())\nprint('There are {} unique maxPlace.'.format(len(maxPlace_set)))\n\nfor key, value in data_store_by_maxPlace.items():\n    model_store_full[key] = generate_lgb_model(value,for_eval=False)\n    maxPlace_set = maxPlace_set - {key}\n    print('There are {} more models to go.'.format(len(maxPlace_set)))","ce1e49b6":"X_submit = pd.read_csv('..\/input\/test_V2.csv')\nprint(X_submit.shape)\nX_submit.head()","cdeed85b":"X_submit['matchType'] = X_submit.matchType.apply(merge_matchType)\n\nX_submit.matchType.unique()\n\nX_submit_dumm = pd.get_dummies(X_submit, columns=['matchType'])\nX_submit_dumm.head()\n\nX_submit_dumm = X_submit_dumm.drop('matchType_others', axis=1)\n\nX_submit = X_submit_dumm.loc[:,['Id', 'groupId', 'matchId', 'assists', 'boosts', 'damageDealt', 'DBNOs',\n       'headshotKills', 'heals', 'killPlace', 'killPoints', 'kills',\n       'killStreaks', 'longestKill', 'matchDuration', 'maxPlace', 'numGroups',\n       'rankPoints', 'revives', 'rideDistance', 'roadKills', 'swimDistance',\n       'teamKills', 'vehicleDestroys', 'walkDistance', 'weaponsAcquired',\n       'winPoints', 'matchType_duo', 'matchType_duo-fpp',\n       'matchType_solo', 'matchType_solo-fpp', 'matchType_squad',\n       'matchType_squad-fpp']]\n\nX_submit.head()","463c235f":"data_store_by_maxPlace_submit = {}\nfor x in X_submit.maxPlace.unique():\n    data_store_by_maxPlace_submit[x] = X_submit.loc[X_submit.maxPlace==x]","87d535a8":"#Prediction\nprediction = {}\nfor key, value in data_store_by_maxPlace_submit.items():\n    maxPlace = key\n    train_data = value.iloc[:,3:33]\n\n    train_data = train_data.drop('maxPlace', axis=1)\n    \n    pred_submit = model_store_full[key].predict(train_data)\n    \n    pred_submit = adjust_pred(pred_submit, maxPlace)\n    prediction[key] = pd.concat([value.Id.reset_index(drop=True), pd.Series(pred_submit, name='winPlacePerc')], axis=1)","dbf8bc50":"#Submission file\nsubmission = pd.concat([x for x in prediction.values()])\n\nsubmission.head()","385a45bd":"submission.to_csv('submission.csv', index=False)","d081feaf":"I will convert the categorical variable into numerical. I have thus generated dummy variables for the matchType variable. matchType_others was dropped from the dataframe.","3656f359":"**Introduction**\n\nHi, I have  implemented a lightGBM model in a previous [kernel](https:\/\/www.kaggle.com\/teemingyi\/pubg-my-first-lightgbm-submission). Now, I will be trying to do my prediction with multiple models based on the each match's maxPlace.","9f1457b4":"I will split the data into their different maxPlace.","fddd38c3":"**Conclusion**\n\nThere was some improvement in the Mean Absolute Error. However, it is still pretty high as compared to the other submissions in the competition.","a4cddf17":"Now, I will train models using the full dataset.","1e10bc26":"I will look at the distribution of maxPlace variable.","ef290226":"I have decided to group a few of the matchType into others.\n'normal-squad-fpp', 'crashfpp', 'crashtpp', 'normal-duo-fpp', 'flarefpp', 'normal-solo-fpp', 'flaretpp', 'normal-duo', 'normal-squad', 'normal-solo' are converted into others."}}