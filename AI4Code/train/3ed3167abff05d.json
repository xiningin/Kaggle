{"cell_type":{"43533467":"code","8069f4ef":"code","402475d4":"code","9084603e":"code","edac50a0":"code","d5a23b8a":"code","a9dce47a":"code","459915f2":"code","3ff165d2":"code","2173a054":"code","6315169f":"code","c22ba840":"code","9f8106ac":"code","a41ebeb1":"code","3d24c9ee":"code","2111fbff":"code","24105933":"code","66cbb3d6":"code","d797240f":"code","48d64be8":"code","68bf0ea1":"code","4a241927":"code","207fdc4e":"code","dede8e79":"code","a4cadfac":"code","ba3b201a":"code","436a538a":"code","9a183588":"code","ec976c18":"code","e8aacc36":"code","c53da47b":"code","7e48c46d":"code","bfb84740":"code","73ff449c":"code","e694e412":"code","9bf9c351":"code","e4f70cd4":"code","24a4cc25":"code","795828ec":"code","62f0484b":"code","cf4ab6d3":"code","728fea57":"code","ef864c78":"code","0e5560ba":"code","cfe8a71a":"code","6b6b8c7a":"markdown","eeb9d84f":"markdown","679cf58a":"markdown","55608d7c":"markdown","4ea23c7d":"markdown"},"source":{"43533467":"import os\nimport numpy as np\nimport pandas as pd","8069f4ef":"import warnings\nwarnings.filterwarnings(\"ignore\")","402475d4":"pwd","9084603e":"data = pd.read_csv(\"..\/input\/higs-bonsons-and-background-process\/train.csv\",na_values=\"?\")","edac50a0":"data.shape","d5a23b8a":"data.head()","a9dce47a":"data.nunique()","459915f2":"data.dtypes","3ff165d2":"cat_cols = data.columns[data.nunique() <= 5]\ncat_cols","2173a054":"num_cols = data.columns[data.nunique() > 5]\nnum_cols","6315169f":"#we are removing ID since it has all the unique values which means number of rows(68636) is equal to number of unique values of ID\ndata.drop([\"id\"], axis = 1, inplace=True)\nnum_cols = data.columns[data.nunique() > 5]","c22ba840":"data.head()","9f8106ac":"data.isna().sum()","a41ebeb1":"data.isnull().sum()","3d24c9ee":"y=data.loc[:, \"class\"]\ny","2111fbff":"X= data.loc[:,data.columns!='class']\nX","24105933":"print(X.shape, y.shape)","66cbb3d6":"from sklearn.model_selection import train_test_split\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline","d797240f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 122)","48d64be8":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","68bf0ea1":"X_train.shape[1]","4a241927":"y_train.value_counts()","207fdc4e":"print(y_train.value_counts()\/X_train.shape[0])","dede8e79":"print(y_test.value_counts()\/X_test.shape[0])","a4cadfac":"import numpy as np\nfrom sklearn.datasets.samples_generator import make_blobs\nfrom sklearn.model_selection import train_test_split\nfrom matplotlib import pyplot as plt\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn import svm\nfrom sklearn.svm import SVC","ba3b201a":"linear_svm = SVC(kernel='linear', C=1, random_state=0)","436a538a":"linear_svm.fit(X=X_train, y= y_train)","9a183588":"## Predict\ntrain_predictions = linear_svm.predict(X_train)\ntest_predictions = linear_svm.predict(X_test)\n\n### Train data accuracy\nfrom sklearn.metrics import accuracy_score,f1_score\n\nprint(\"TRAIN Conf Matrix : \\n\", confusion_matrix(y_train, train_predictions))\nprint(\"\\nTRAIN DATA ACCURACY\",accuracy_score(y_train,train_predictions))\nprint(\"\\nTrain data f1-score for class '1'\",f1_score(y_train,train_predictions,pos_label=1))\nprint(\"\\nTrain data f1-score for class '2'\",f1_score(y_train,train_predictions,pos_label=0))\n\n### Test data accuracy\nprint(\"\\n\\n--------------------------------------\\n\\n\")\n\nprint(\"TEST Conf Matrix : \\n\", confusion_matrix(y_test, test_predictions))\nprint(\"\\nTEST DATA ACCURACY\",accuracy_score(y_test,test_predictions))\nprint(\"\\nTest data f1-score for class '1'\",f1_score(y_test,test_predictions,pos_label=1))\nprint(\"\\nTest data f1-score for class '2'\",f1_score(y_test,test_predictions,pos_label=0))","ec976c18":"unseendata=pd.read_csv('..\/input\/higs-bonsons-and-background-process\/test.csv', na_values=[\"?\", \"\", \"null\"])","e8aacc36":"unseendata_ids = unseendata.loc[:, \"id\"]\nunseendata.drop([\"id\"], axis = 1, inplace=True)","c53da47b":"unseendata.loc[29413, :]","7e48c46d":"from sklearn.impute import SimpleImputer\ncat_imputer = SimpleImputer(strategy='most_frequent')\ncat_imputer.fit(X_train)","bfb84740":"X_unseendata=unseendata.loc[:,unseendata.columns!='class']","73ff449c":"y_unseendata=unseendata.loc[:, \"class\"]","e694e412":"X_unseendata = pd.DataFrame(cat_imputer.transform(X_unseendata), columns=X_unseendata.columns)","9bf9c351":"X_unseendata.isnull().sum()","e4f70cd4":"X_unseendata.nunique()","24a4cc25":"unseendata_predictions = linear_svm.predict(X_unseendata)","795828ec":"print(\"unseendata Conf Matrix : \\n\", confusion_matrix(y_unseendata, unseendata_predictions))\nprint(\"\\nunseendata DATA ACCURACY\",accuracy_score(y_unseendata,unseendata_predictions))\nprint(\"\\nunseendata data f1-score for class '1'\",f1_score(y_unseendata,unseendata_predictions,pos_label=1))\nprint(\"\\nunseendata data f1-score for class '2'\",f1_score(y_unseendata,unseendata_predictions,pos_label=0))\n","62f0484b":"final_output=pd.DataFrame({'id':unseendata_ids, 'prediction':unseendata_predictions})\nid_n_prediction = [\"id\", \"prediction\"]\nfinal_output = final_output.loc[:,id_n_prediction]\n#final_output.to_csv(\"final_output01.csv\")\nfinal_output\n","cf4ab6d3":"final_output.to_csv(\"\/kaggle\/working\/final_output01.csv\")","728fea57":"import pandas as pd","ef864c78":"x = pd.read_csv(\"\/kaggle\/working\/final_output01.csv\",)","0e5560ba":"x.head()","cfe8a71a":"x.shape\n","6b6b8c7a":"# Model building - SVM","eeb9d84f":"Check the value of counts in lepton_pT","679cf58a":"# EDA","55608d7c":"# Drop columns which are not significant","4ea23c7d":"# Importing required libraries"}}