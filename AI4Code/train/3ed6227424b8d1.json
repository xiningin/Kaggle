{"cell_type":{"5652d12b":"code","47246e9d":"code","f2ae1adf":"code","7e9fca98":"code","4980e37a":"code","52342102":"code","2084e931":"code","77485c2f":"code","878339f1":"code","1698b92d":"code","9a0587ae":"code","ed37757b":"code","b0c76351":"code","7aaaae79":"code","e07f6af3":"markdown","b71458e5":"markdown"},"source":{"5652d12b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport math\nfrom random import seed\nfrom random import randint\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","47246e9d":"dataset = pd.read_csv(\"\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")\ndataset\n\ndfTeste = dataset[[\"age\", \"DEATH_EVENT\"]]\ndfTesteCortado = pd.cut(dfTeste[\"age\"], 4)\ndfTeste[\"age\"] = dfTesteCortado\n\n","f2ae1adf":"dfTeste = dfTeste.groupby(by=\"age\").mean()\n\ndfTeste","7e9fca98":"priorDeath = dataset['DEATH_EVENT'].value_counts(normalize=True)\n\npriorYesDeath = priorDeath[0]\npriorNoDeath  = priorDeath[1]","4980e37a":"##converter df em serie com value_count e denovo em df, com as colunas corretas\ndef mountProbabilityDataframeForColumn(desiredColumn, df):\n    #bins = [0, 1, 5, 10, 25, 50, 100]\n    df['binned'] = pd.cut(df[desiredColumn], 4)\n    \n    valueSeries = df[['binned',\"DEATH_EVENT\"]].value_counts(normalize=True)\n    print(valueSeries)\n    df_value_counts = pd.DataFrame(valueSeries)\n    ## n\u00e3o sei pq isso deveria ser necess\u00e1rio?\n    df_value_counts = df_value_counts.reset_index()\n    df_value_counts.columns = [desiredColumn, \"DEATH_EVENT\", \"probability\"] # change column names\n    return df_value_counts\n\n#retorna {'death': x, 'notDeath': y} referentes aos \u00edndices na tabela de intervalos\ndef dictOfIndexesPresentInInterval(desiredColumn, df, value):\n    ## o df estar\u00e1 com duas columns: a desiredColumn e DEATH_EVENT\n    bins = df[desiredColumn]\n\n    desiredAge = 60\n    deathIndex = -1\n    notDeathIndex = -1\n    \n    notDeathFound = False\n    count = 0\n\n    for it in bins:\n        if desiredAge in it:\n            if(notDeathIndex == -1):\n                notDeathIndex = count\n            else:\n                deathIndex = count\n            \n        count = count + 1\n\n    return {\"death\": deathIndex, \"notDeath\": notDeathIndex }\n\n\nage = mountProbabilityDataframeForColumn(\"age\", dataset)\nvalues =dictOfIndexesPresentInInterval(\"age\", age, 60)\n\n","52342102":"##criando os p(x | Death)\n\nchances = {}\n\n\nchances['age'] = mountProbabilityDataframeForColumn(\"age\", dataset)\nchances['anaemia'] = mountProbabilityDataframeForColumn(\"anaemia\", dataset)\nchances['creatinine_phosphokinase'] = mountProbabilityDataframeForColumn(\"creatinine_phosphokinase\", dataset)\nchances['diabetes'] = mountProbabilityDataframeForColumn(\"diabetes\", dataset)\nchances['ejection_fraction'] = mountProbabilityDataframeForColumn(\"ejection_fraction\", dataset)\nchances['high_blood_pressure'] = mountProbabilityDataframeForColumn(\"high_blood_pressure\", dataset)\nchances['platelets'] = mountProbabilityDataframeForColumn(\"platelets\", dataset)\nchances['serum_creatinine'] = mountProbabilityDataframeForColumn(\"serum_creatinine\", dataset)\nchances['serum_sodium'] = mountProbabilityDataframeForColumn(\"serum_sodium\", dataset)\nchances['sex'] = mountProbabilityDataframeForColumn(\"sex\", dataset)\nchances['smoking'] = mountProbabilityDataframeForColumn(\"smoking\", dataset)\nchances['time'] = mountProbabilityDataframeForColumn(\"time\", dataset)\n\nchances\n        \n\n","2084e931":"##poc da estrutura de dados\ntodasAsIdades = chances['age']\nprint(todasAsIdades)\n\nresultadosIdade = dictOfIndexesPresentInInterval(\"age\", todasAsIdades, 60)\nprint(resultadosIdade)\nindiceSim = resultadosIdade[\"notDeath\"]\nprint(\"Indice que n\u00e3o houve morte: \")\nprint(indiceSim)\n\n\nprobIdade = todasAsIdades[\"probability\"].iloc[indiceSim]\nprint(\"Probabilidade de n\u00e3o morrer: \")\nprint(probIdade)\n\n","77485c2f":"## retorna pSim, pNao para um dado valor em coluna\ndef getProbListForGivenParameterAndColumn(column, value, chances):\n    todasAsIdades = chances[column]\n\n    resultadosIdade = dictOfIndexesPresentInInterval(column, todasAsIdades, value)\n\n    indiceSim = resultadosIdade[\"notDeath\"]\n    indiceNao = resultadosIdade[\"death\"]\n\n\n    probIdade = todasAsIdades[\"probability\"].iloc[indiceSim]\n    print(\"Probabilidade de n\u00e3o morrer: \")\n    print(probIdade)\n\n    \n    sim = todasAsIdades[\"probability\"].iloc[indiceSim]\n    nao =  todasAsIdades[\"probability\"].iloc[indiceNao]\n\n    retornoSim = 0.001\n    retornoNao = 0.001\n\n    if(sim):\n        retornoSim = sim\n    if(nao):\n        retornoNao = nao\n    \n\n    return retornoSim, retornoNao\n\nprobAge = getProbListForGivenParameterAndColumn(\"age\", 60, chances )\n\nprobAge\n","878339f1":"dataset","1698b92d":"seed(1)\nageTest = randint(dataset[\"age\"].min(), dataset[\"age\"].max())\nanaemiaTest = randint(0, 1)\n\n#creatinine_phosphokinase\tdiabetes\tejection_fraction\thigh_blood_pressure\tplatelets\tserum_creatinine\tserum_sodium\tsex\tsmoking\ttime\ndata = []\nprint(anaemiaTest)","9a0587ae":"# Calcular o (sim, nao) para cada tipo de variavel\n\nage = getProbListForGivenParameterAndColumn(\"age\", 50, chances)\nanaemia = getProbListForGivenParameterAndColumn(\"anaemia\", 1, chances)\ncreatinine_phosphokinase = getProbListForGivenParameterAndColumn(\"creatinine_phosphokinase\", 146, chances)\ndiabetes = getProbListForGivenParameterAndColumn(\"diabetes\", 1, chances)\nejection_fraction = getProbListForGivenParameterAndColumn(\"ejection_fraction\", 45, chances)\nhigh_blood_pressure = getProbListForGivenParameterAndColumn(\"high_blood_pressure\", 0, chances)\nplatelets = getProbListForGivenParameterAndColumn(\"platelets\", 210000.00, chances)\nserum_creatinine = getProbListForGivenParameterAndColumn(\"serum_creatinine\", 1.9, chances)\nserum_sodium = getProbListForGivenParameterAndColumn(\"serum_sodium\", 130, chances)\nsex = getProbListForGivenParameterAndColumn(\"sex\", 1, chances)\nsmoking = getProbListForGivenParameterAndColumn(\"smoking\", 1, chances)\ntime = getProbListForGivenParameterAndColumn(\"time\", 3, chances)\n","ed37757b":"##chance dele n\u00e3o morrer, em log2\npNaoMorrer = priorNoDeath * age[0] * anaemia[0] * creatinine_phosphokinase[0] * diabetes[0] * ejection_fraction[0] * high_blood_pressure[0] * platelets[0] * serum_creatinine[0] * serum_sodium[0] * sex[0] * smoking[0] * time[0]\nprint(math.log2(pNaoMorrer))","b0c76351":"##chance dele morrer, em log2\npMorrer = priorYesDeath * age[1] * anaemia[1] * creatinine_phosphokinase[1] * diabetes[1] * ejection_fraction[1] * high_blood_pressure[1] * platelets[1] * serum_creatinine[1] * serum_sodium[1] * sex[1] * smoking[1] * time[1]\nprint(math.log2(pMorrer))","7aaaae79":"print ('Morrer : ', pMorrer)\nprint ('N\u00e3o morrer :  ', pNaoMorrer)\n\n\nprint(\"sobreviver: \",pNaoMorrer \/ (pNaoMorrer+ pMorrer))\n\nprint(\"morrer: \",pMorrer \/ (pNaoMorrer+ pMorrer))","e07f6af3":"# C\u00e1lculo do prior de morte","b71458e5":"## Exemplo: 50 anos, com anemia, 146 creatinina, com diabetes, ejection_fraction 45, sem pressao alta, 210000.00 plaquetas, creatinina 1,9, serum_sodio 130, sex 1, smoking 1, time 3"}}