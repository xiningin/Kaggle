{"cell_type":{"96685300":"code","12ac69c7":"code","fd969849":"code","f66a27be":"code","0c36e16e":"code","fcf22439":"code","433e1934":"code","2f1e8b93":"code","ca6dec43":"code","83acc0c1":"code","f2db26b8":"code","04ede988":"code","e5dfa0bb":"code","79176022":"code","43d76302":"code","479e4603":"code","62c67324":"code","7c9ca934":"code","1c371694":"code","2b3e7c22":"code","2350033b":"code","e567a33a":"code","c76ad7dd":"code","a4070e66":"code","2ea3de05":"code","1cf4117e":"code","8eed2bde":"markdown","40c12c68":"markdown","6613ad8f":"markdown","e161774d":"markdown","d035d151":"markdown"},"source":{"96685300":"\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\nimport os\n","12ac69c7":"df=pd.read_csv(\"\/kaggle\/input\/accidents-in-france-from-2005-to-2016\/caracteristics.csv\")\ndf.columns","fd969849":"user=pd.read_csv(\"\/kaggle\/input\/accidents-in-france-from-2005-to-2016\/users.csv\")\nprint(\"User data frame columns:\")\nprint(list(user.columns))","f66a27be":"original_data=df.merge(user, how='left', on='Num_Acc')\nprint(original_data.shape)","0c36e16e":"print(\"All columns:\")\nprint(list(original_data.columns))","fcf22439":"data=original_data[['Num_Acc','an', 'mois', 'dep' ,'catu',\n       'grav', 'sexe', 'trajet']].copy()\ndata=data.loc[data[\"an\"]==16].copy()","433e1934":"data.head()","2f1e8b93":"metropole=[590, 620, 800,  20, 600, 570, 760, 270, 350, 220, 290, 560, 140,\n       500, 940,  10, 610, 440, 490, 530, 720, 850, 330, 170, 240, 400,\n       470, 640, 860, 160, 790, 870, 190, 230, 310,  90, 120, 380, 320,\n       460, 650, 810, 690, 820,  70, 260, 420, 730, 740, 630,  30, 150,\n       430, 540, 550, 880, 670, 680, 510,  80, 100, 520, 210, 580, 710,\n       890, 250,  40, 390, 700, 900, 130,  50,  60, 830, 840, 340, 110,\n       300, 480, 660, 201, 202, 780, 910, 280, 950, 770, 450, 180, 360,\n       370, 410, 920, 930, 750]\ndata=data.loc[data[\"dep\"].isin(metropole)].copy()","ca6dec43":"def format_dep(num):\n    if num== 201 :\n        return \"2A\"\n    elif num== 202:\n        return \"2B\"\n    num=str(num)\n    if len(num)==3:\n        num=num[:2]\n        return num\n    elif len(num)==2:\n        num=\"0\"+num[0]\n        return num\ndata[\"dep\"]=data[\"dep\"].apply(format_dep)","83acc0c1":"import geopandas as gpd\n#to draw the contours of the regions\nregion = gpd.read_file(\"\/kaggle\/input\/region-france\/regions-20180101.shp\")","f2db26b8":"#To make the link between regions and departments\nregion_dep=pd.read_csv(\"\/kaggle\/input\/departement-france-table\/departement2020.csv\")\nr_d=region_dep[[\"dep\",\"reg\",\"nccenr\"]].copy()\ndef formatage(num):\n    num=str(num)\n    if len(num)==1:\n        num=\"0\"+num\n    return num\nr_d[\"reg\"]=r_d[\"reg\"].apply(formatage)\n\n","04ede988":"r_d[\"dep\"]=r_d[\"dep\"].astype(str)","e5dfa0bb":"data=data.merge(r_d, how='left', on='dep')\n","79176022":"data=data.dropna()\nprint(data.shape)","43d76302":"#to get the regions names\ntable_nom=pd.read_csv(\"\/kaggle\/input\/les-regions\/regions.csv\")","479e4603":"#A little formatting\ntable_nom=table_nom[[\"code\",\"name\"]].copy()\ntable_nom[\"code\"]=table_nom[\"code\"].astype(str)\ntable_nom.columns=['reg',\"reg_name\"]\n\n","62c67324":"data=data.merge(table_nom, how='left', on='reg')\ndata.head()","7c9ca934":"df_count=pd.DataFrame({'Count': data[\"reg_name\"].value_counts().sort_values(ascending = False)})\ndf_count.head()","1c371694":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\n\nlabel=list(df_count.index)\nfig=plt.figure(figsize=[12,5])\nfig.patch.set_facecolor('#E0E0E0')\nfig.patch.set_alpha(0.7)\nplt.title(\"Number of accidents per region\",size=16)\nplt.bar(range(0,len(label)),df_count[\"Count\"]\n           ,edgecolor='black',color=\"#8891a1\")\nplt.xticks(range(0,len(label)),label,rotation=90,size=13)\nplt.ylabel(\"Nombre\")\nplt.grid()\nplt.show()\n","2b3e7c22":"metropole=['Corse','\u00cele-de-France', 'Hauts-de-France',\n 'Nouvelle-Aquitaine', 'Normandie','Pays de la Loire',\n 'Centre-Val de Loire', 'Grand Est', \"Provence-Alpes-C\u00f4te d'Azur\",\n          'Bretagne' ,'Bourgogne-Franche-Comt\u00e9', 'Occitanie',\n 'Auvergne-Rh\u00f4ne-Alpes']\nregion=region.loc[region[\"nom\"].isin(metropole)]\n","2350033b":"region['count'] = region.nom.map(df_count['Count'])\n#Display the number of death\nt=region.copy()\n#We get a point in the department to add the \"labels\"\nt['point'] = t.representative_point() \nt.set_geometry('point', inplace = True)\n\ndef add_label():\n    \n    n=t['count'].sum()\n    # add label for each polygon\n    for x, y, number in zip(t.geometry.x, t.geometry.y, t['count']):\n        p=number\/n*100\n        if number>20000:\n            plt.text(x-0.4, y-0.2, \"  {} \\n ({} %)\".format(number,round(p)), fontsize = 10,color=\"#dbdfe7\" ,fontweight = 'bold')\n        else:\n            plt.text(x-0.4, y-0.2,\"  {} \\n ({} %)\".format(number,round(p)), fontsize = 10,color=\"black\" ,fontweight = 'bold')\n        ","e567a33a":"ax = region.plot(column = region[\"count\"], cmap = 'Reds' ,scheme=\"percentiles\", edgecolor = 'black', linewidth = 0.3, figsize = (12,8))\nplt.title('Number of road accidents per region in 2016 (All accident type).', fontsize = 16)\nadd_label()\nplt.tight_layout()","c76ad7dd":"data_dead=data.loc[data[\"grav\"]==2].copy()\ndead_count=pd.DataFrame({'Count': data_dead[\"reg_name\"].value_counts().sort_values(ascending = False)})\n\nregion['count'] = region.nom.map(dead_count['Count'])\n\n#Display the number of death\nt=region.copy()\nt['point'] = t.representative_point() \nt.set_geometry('point', inplace = True)\n\ndef add_label():\n    n=t['count'].sum()\n    # add label for each polygon\n    for x, y, number in zip(t.geometry.x, t.geometry.y, t['count']):\n        p=number\/n*100\n        if number>300:\n            plt.text(x-0.2, y-0.2, \"  {} \\n ({} %)\".format(number,round(p)), fontsize = 10,color=\"#dbdfe7\" ,fontweight = 'bold')\n        else:\n            plt.text(x-0.2, y-0.2,\"  {} \\n ({} %)\".format(number,round(p)), fontsize = 10,color=\"black\" ,fontweight = 'bold')\n        \n            \nax = region.plot(column = region[\"count\"], cmap = 'Reds' ,legend = True,  edgecolor = 'black', linewidth = 0.3, figsize = (12,8))\nplt.title('Number of road deaths in 2016.', fontsize = 16)\nadd_label()\nplt.tight_layout()","a4070e66":"summer_month=[6,7,8]\nsummer_dead=data_dead.loc[data_dead[\"mois\"].isin(summer_month)]\nsummer_dead_count=pd.DataFrame({'Count': summer_dead[\"reg_name\"].value_counts().sort_values(ascending = False)})\nregion['count'] = region.nom.map(summer_dead_count['Count'])\nt=region.copy()\nt['point'] = t.representative_point() \nt.set_geometry('point', inplace = True)\n\ndef add_label():\n    n=t['count'].sum()\n    # add label for each polygon\n    for x, y, number in zip(t.geometry.x, t.geometry.y, t['count']):\n        p=number\/n*100\n        if number>90:\n            plt.text(x-0.2, y-0.2, \"  {} \\n ({} %)\".format(number,round(p)), fontsize = 10,color=\"#dbdfe7\" ,fontweight = 'bold')\n        else:\n            plt.text(x-0.2, y-0.2,\"  {} \\n ({} %)\".format(number,round(p)), fontsize = 10,color=\"black\" ,fontweight = 'bold')\n        \n            \n            \nax = region.plot(column = region[\"count\"], cmap = 'Reds' ,legend = True, edgecolor = 'black', linewidth = 0.3, figsize = (12,8))\nplt.title('Number of road deaths during the summer in 2016.', fontsize = 16)\nadd_label()\nplt.tight_layout()","2ea3de05":"dico_dead={}\ntotal=[]\ndata_dead=data_dead.sort_values(by=\"mois\")\nfor i in data_dead[\"mois\"].unique():\n    total.append(data_dead.loc[data_dead[\"mois\"]==i].shape[0])\n    \ndico_dead[\"total\"]=total\nnord=['\u00cele-de-France', 'Hauts-de-France', 'Pays de la Loire', 'Normandie', 'Grand Est', 'Centre-Val de Loire', 'Bourgogne-Franche-Comt\u00e9', 'Bretagne']\nsud=['Auvergne-Rh\u00f4ne-Alpes','Nouvelle-Aquitaine',\"Provence-Alpes-C\u00f4te d'Azur\",'Corse','Occitanie']\n\ndef extract_dead(region):\n    d=data_dead.loc[data_dead[\"reg_name\"].isin(region)]\n    data=[]\n    d=d.sort_values(by=\"mois\")\n    for i in d[\"mois\"].unique():\n        data.append(d.loc[d[\"mois\"]==i].shape[0])\n    return data\nfor zone,name in zip([nord,sud],[\"North\",\"South\"]):\n    dico_dead[name]=extract_dead(zone)","1cf4117e":"lab2=[\"jan\",\"fev\",\"mar\",\"apr\",\"may\",\"jun\",\"jul\",\"aug\",\"sep\",\"oct\",\"nov\",\"dec\"]\nfig=plt.figure(figsize=[20,8])\nfig.patch.set_facecolor('#E0E0E0')\nfig.patch.set_alpha(0.7)\nplt.title(\"Road death per month\")\ncolors=[\"black\",\"#1450b6\",\"r\"]\ni=0\nfor lab in dico_dead:\n    \n        plt.plot(range(0,len(dico_dead[lab])),dico_dead[lab], label=lab,color=colors[i])\n        i+=1\nplt.legend()\nplt.grid()\nplt.xticks(range(0,len(lab2)),lab2)","8eed2bde":"# **Conclusion:**\n\n\nIf we consider all types of accidents, the Ile-de-France region is the most accident-causing.\nBut we see that accidents in this region are rarely fatal.\n\nDuring the summer period there is a peak of fatal accidents in the south (due to holiday migration).\nAnd generally there is also a peak during the Christmas holidays","40c12c68":"In the following section We will group the values by region and use geopandas to visualize the results","6613ad8f":"# **Personnal project:** Visualize road accidents in 2016 thanks to the Geopandas package\n\nIn this notebook I will observe the distribution of road accidents for each region of France.\n\nThis study will focus on the year 2016. We will study in particular fatal accidents.\n\nIs notebook consist in two parts:\n\n> **1. Cleaning**\n\n> **2. Visualization with geopandas**\n\n***Enjoy reading!!*** :)","e161774d":"# 2. Visualisation with geopandas","d035d151":"# 1. Cleaning "}}