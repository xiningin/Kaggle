{"cell_type":{"019d3f8f":"code","5c4f9572":"code","299a9c8e":"code","9c19fec2":"code","198d5a6b":"code","f5caa1a2":"code","29253cd0":"code","07fe7e65":"code","c30bbd5e":"code","e77cf631":"code","b4fe2ab4":"markdown","fd6213ea":"markdown","97c428ba":"markdown","4aa73748":"markdown","7e21f387":"markdown","2419ad15":"markdown","5b2c19d6":"markdown","39a3ea29":"markdown","32e731ae":"markdown","9d165a7e":"markdown"},"source":{"019d3f8f":"from kaggle_environments import make, evaluate\nimport numpy as np\nfrom math import sqrt, log\nfrom operator import itemgetter\nimport copy","5c4f9572":"def sim_agent(obs, conf):\n    SIMULS = 500\n    \n    graph = {0: {'bitboard': {agent: agent_mask, opponent: opponent_mask}, 'parent': None, \n                 'children': set(), 'move': None, 'turn': agent, 'score': 0}}\n    \n    board = np.array(obs.board, np.int8).reshape(conf.rows, conf.columns)\n    agent = obs.mark\n    opponent = switch_player(agent)\n    agent_mask, opponent_mask = bitboard(board, agent)","299a9c8e":"def bitboard(board, player):\n    agent_mask, opponent_mask = '', ''\n    for j in range(6, -1, -1):\n        opponent_mask += '0'\n        agent_mask += '0'\n        for i in range(6):\n            if board[i,j] == 0:\n                agent_mask += '0'\n                opponent_mask += '0'\n            elif board[i,j] == player:\n                agent_mask += '1'\n                opponent_mask += '0'\n            else:\n                opponent_mask += '1'\n                agent_mask += '0'\n    return int(agent_mask, 2), int(opponent_mask, 2)\n","9c19fec2":" def outcome(bb):\n        par = bb[agent] & (bb[agent] >> 7)\n        if par & (par >> 14):\n            return 1\n        par = bb[agent] & (bb[agent] >> 6)\n        if par & (par >> 12):\n            return 1\n        par = bb[agent] & (bb[agent] >> 8)\n        if par & (par >> 16):\n            return 1\n        par = bb[agent] & (bb[agent] >> 1)\n        if par & (par >> 2):\n            return 1\n\n        par = bb[opponent] & (bb[opponent] >> 7)\n        if par & (par >> 14):\n            return -1\n        par = bb[opponent] & (bb[opponent] >> 6)\n        if par & (par >> 12):\n            return -1\n        par = bb[opponent] & (bb[opponent] >> 8)\n        if par & (par >> 16):\n            return -1\n        par = bb[opponent] & (bb[opponent] >> 1)\n        if par & (par >> 2):\n            return -1\n\n        if bb[agent] | bb[agent] == int(('0' + '1'*6)*7, 2):\n            return 0\n        else:\n            return None","198d5a6b":"def possible_moves(bb):\n    complete_mask = bb[1] ^ bb[2]\n    first_row = complete_mask & COMPLETELY_FILLED_FIRST_ROW\n    moves = []\n    for i in range(7):\n        if not first_row & 2**(7*(i+1)-2):\n            moves.append(i)\n    return moves\n\ndef new_board(bb, move, turn):\n    complete_mask = bb[1] ^ bb[2]\n    new_complete_mask = complete_mask | (complete_mask + 2**(48-7*move))\n    return bb[switch_player(turn)] ^ new_complete_mask\n","f5caa1a2":"def switch_player(player):\n        return list([2,1])[player - 1]\n    ","29253cd0":"def best_move():\n        candidates = [(graph[child_id]['move'], graph[child_id]['score']) \n                      for child_id in graph[0]['children']]\n        best_move = max(candidates, key=itemgetter(1))[0]\n        return int(best_move)","07fe7e65":"def simulate(_id):\n        performance = 0\n        for iter in range(SIMULS):\n            sim_player = copy.deepcopy(graph[_id]['turn'])\n            sim_board = copy.deepcopy(graph[_id]['bitboard'])\n            while True:\n                random_move = np.random.choice(possible_moves(sim_board), 1)[0]\n                sim_board[sim_player] = new_board(sim_board, random_move, sim_player)\n                result = outcome(sim_board)\n                if result is not None:\n                    performance += result\n                    break\n                sim_player = switch_player(sim_player)\n        graph[_id]['score'] = performance\/SIMULS","c30bbd5e":"def explore_node(_id):\n    for move in possible_moves(graph[_id]['bitboard']):\n        new_node_turn = switch_player(graph[_id]['turn'])\n        new_node_id = len(graph)\n        new_node_bitboard = copy.deepcopy(graph[_id]['bitboard'])\n        new_node_bitboard[graph[_id]['turn']] = new_board(graph[_id]['bitboard'],\n                                                         move, graph[_id]['turn'])\n        new_node_score = outcome(new_node_bitboard)\n        graph[new_node_id] = {'bitboard': new_node_bitboard, 'parent': _id, \n                              'children': set(), 'move': move, 'turn': new_node_turn, \n                              'score': new_node_score}\n        graph[_id]['children'].add(new_node_id)","e77cf631":"explore_node(0)\nfor child_id in graph[0]['children']:\n    if graph[child_id]['score'] == 1:\n        return int(graph[child_id]['move'])\n    else:\n        simulate(child_id)\nreturn best_move()","b4fe2ab4":"Since some column could be completely filled, it is necessary to check which one is free, in order to make a move. $\\verb|Possible_moves|$ merges the two bitstring, in order to obtain the bitstring representing all the filled spots. Then it performs bitwise $AND$ with a bitstring having $1$s only on the first row. The resulting string has $1$s only on the first row and only if there is a token in one of those spots. Eventually, it iterates over all the columns indices $i \\in {1,...,6}$, generating a bitstring with a $1$ on the $i$-th spot of the first row. If the bitwise $AND$ operation with the bitstring having $1$s only in the filled spot of the first row returns a bitstring with a $1$ in the same spot, it means it is occupied.\n\n$\\verb|New_board|$ returns the bitboard after a $\\verb|move|$ is performed by the player defined by $\\verb|turn|$. It works like this: suppose that the token is dropped from column $1$ and the column, in the previous state, looks like $001111$, where the zeros are the free spots of the column. If I drop the token, than the column will be $011111$. In order to obtain this we can consider the column with a single token in the bottom row $000001$. If we sum it with the initial state we get $001111 + 000001 = 010000$. But this is the exact spot where the dropped coin should be. If we perform bitwise $OR$ between this last result and the initial column state, we get $001111 + 010000 = 011111$, which is exactly the desired result.","fd6213ea":"This agent is an implementation of [Pure Monte Carlo Tree Search](https:\/\/en.wikipedia.org\/wiki\/Monte_Carlo_tree_search#Pure_Monte_Carlo_game_search) (PMCTS), the simplest of the Monte Carlo Tree Search (MCTS) variants. For an exaustive review of the topic, check [this](http:\/\/www.diego-perez.net\/papers\/MCTSSurvey.pdf) publication. The main idea behind PMCTS is to explore each possible state $\\textbf{s'}=(s'_1, ... ,s'_m)$, one for each possible actions $\\textbf{a}=(a_1, ... ,a_m)$, from an initial state $s_0$. Then, for each new state $s'_i$, we simulate the game $n$ times, until a terminal state (loss, win, draw) is reached. The *score* of the state $s'_i$ is a function of the number of terminal states reached after the $n$ simulations (e.g., the average number of winnings). The *score* should approximate the real *value* of the state $s'_i$, that is, the likelihood that the position can lead to a win. After simulating each new state, we pick the action $a$, corrisponding to the state with the highest score.\n\nFor this implementation, the set of the possible action is $\\textbf{a}=(0, ... ,6)$, corrisponding to each of the columns we can drop the token from.\nBoth the *score* and the *value* are $1$ for a victory, $-1$ for a loss and $0$ for a draw.","97c428ba":"The main function *agent* is composed by a number of decorators, each one preforming one particolar task.\nThe *bitboard* decorator transforms the $6\\times 7$ input board representation into a 2-bitestrings bitboard, one for each player. This is crucial for the simulations: if you want to increase them, you need to optimize the process, given that the time budget is limited to 5 seconds. For the sake of brevity, I omit the details about it. If you want to know more, check [this](https:\/\/towardsdatascience.com\/creating-the-perfect-connect-four-ai-bot-c165115557b0) article. I used his implementation, with some slight modifications. ","4aa73748":"The main parameter of the $\\verb|agent|$ function is the number of simulations to run, while the main variable is the $\\verb|graph|$. The $\\verb|graph|$ is the dictionary where we store each state, with all their $\\verb|attributes|$. Each node of the graph is, in fact, a state. The $\\verb|attributes|$ give us informations about the state:\n* **bitboard**: contains the bitboard representation of the board\n* **parent**: contains the ID of the parent node\n* **children**: contains the IDs of the children nodes\n* **move**: is the move that brought us *to* to state.\n* **turn**: is the player who has to move *from* the state.\n* **score**: is the score of the state\n\nThe remaining variables are the *board* itself, the number ($1$ or $2$) corrisponding to the agent itself, the *opponent* and the two bitstring representing  the players positions. We will see about it in the next paragraph.","7e21f387":"The $\\verb|simulate|$ decorator performs the simulations on a specific node. It initiates a $\\verb|performance|$ variable, that sums the results of each simulated game. Since each result is between $-1$ and $1$, the final *score*, calculated as the mean $\\verb|performance|$ over the number of simulations (last line), is still between $-1$ and $1$. For each iteration, the bitboard gets copied and a random move is chosen and performed amongst the ones available. The new bitboard is calculated and substitued to the old one, only for the player who just moved. The $\\verb|result|$ is then checked: if it is a terminal state, the $\\verb|result|$ gets added to $\\verb|performance|$ and an other simulation starts. Otherwise, it changes the player and keeps going. At the end, the score is updated.","2419ad15":"Given the initial state $s_0$, we need to populate the graph with all the possible reachable states $s'_i$. For each possible move, a new node ID and a copy of the bitboard are generated. Then, the bitboard is updated with the next state, reached by the player that moved in the turn. The result of the new board is added to the $\\verb|score|$ and the ID of the new node is added to the set of the $\\verb|children|$ of the initial state. ","5b2c19d6":"What just said holds also for the next decorator. *Outcome* returns the value of the terminal state, if the case. Otherwise it returns None. The last if-statement differs from the previously mentioned article: when checking for a draw, the two bitstrings are merged (using $XOR$) in order to have a bitstring that contains all the occupied positions. If all of them are occupied, the bitstring will be a specific number (i.e. $0111111011111101111110111111011111101111110111111$). If the case, it would mean that all the positions are occupied, so none of the players could make another move, hence a draw. ","39a3ea29":"This simple function changes the player. It is useful when simulating a game.","32e731ae":"The $\\verb |best_move|$ decorator iterates over all the children of the inital state and returns the move corrisponding to the child node with the highest score. It returns the final output of the agent.","9d165a7e":"The last lines of the $\\verb|agent|$ run the algorithm itself: the initial node is expanded and, for each child node, if it is not a winning state, a sequence of simulations are run. Eventually, the move corrisponding to the node with teh highest score is returned."}}