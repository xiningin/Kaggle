{"cell_type":{"0c5e83b0":"code","18c34cb5":"code","91e33772":"code","439321bf":"code","82afba4b":"code","dc8bd51b":"code","db6f2379":"code","cbb09e19":"code","1d327863":"code","781e8312":"code","f26c8139":"code","68088606":"code","0d83d5e3":"code","d46e3c07":"code","1a0b1bbe":"code","9470ca59":"code","7cef7f97":"code","dd95982b":"code","fa8d7ad9":"code","240acd99":"code","c24f23c3":"code","6dcb2cc0":"code","d05fcd9b":"code","910d8b02":"code","f490b4c3":"code","5198ef92":"code","42799d30":"code","55ca5b1d":"markdown","92e2b669":"markdown","6e7e7454":"markdown","e86eacf8":"markdown","c796cb03":"markdown","8d4dbc36":"markdown","f753d302":"markdown","f9d02adf":"markdown","591e0fdb":"markdown","ca3eb473":"markdown","b7cf4e9f":"markdown","07e9b361":"markdown","4500cca4":"markdown"},"source":{"0c5e83b0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","18c34cb5":"df = pd.read_csv('..\/input\/titanic\/train.csv', index_col='PassengerId')\ndf","91e33772":"['Survived',len (df['Survived'].unique())]","439321bf":"target_column = 'Survived'\nprint(df[target_column].unique())\nprint ('----------------------------------')\nprint(df[target_column].value_counts())\nprint ('----------------------------------')\nprint ('  Data Types        ')\nprint(df.dtypes)\nprint ('----------------------------------')\nprint ('         counts of Missing values')\nprint (df.isna().sum())\nprint ('----------------------------------')\nprint ('         Numbers of unique values')\nprint ([[col,len (df[col].unique())] for col in df.columns])","82afba4b":"drop_columns = ['Name','Ticket','Cabin']\ndf.drop (drop_columns, axis=1, inplace=True)\ndf","dc8bd51b":"imputed_columns = ['Age']\nimputed_df = df[imputed_columns]  # >> as a DF\nfrom sklearn.impute import SimpleImputer\nmy_imputer = SimpleImputer() #strategy='most_frequent')\nimputed_df1 = pd.DataFrame(my_imputer.fit_transform(imputed_df))\n# Imputation removed column names; put them back\nimputed_df1.columns = imputed_df.columns\ndf.update(imputed_df1)\nprint ('The Counts of Missing Data equal:      ',df[imputed_columns].isna().sum())","db6f2379":"imputed_columns = ['Embarked']\nimputed_df = df[imputed_columns]  # >> as a DF\nfrom sklearn.impute import SimpleImputer\nmy_imputer = SimpleImputer(strategy='most_frequent')\nimputed_df1 = pd.DataFrame(my_imputer.fit_transform(imputed_df))\n# Imputation removed column names; put them back\nimputed_df1.columns = imputed_df.columns\ndf.update(imputed_df1)\nprint ('The Counts of Missing Data equal:      ',df[imputed_columns].isna().sum())","cbb09e19":"df.isna().sum()","1d327863":"print(df[target_column].value_counts())\nprint ('----------------------------------')\nprint ('         Data type        ')\nprint(df.dtypes)\nprint ('----------------------------------')\nprint ('         counts of Missing values')\nprint (df.isna().sum())","781e8312":"lable_columns = ['Sex','Embarked']\nlabel_df = df[lable_columns]\nfrom sklearn.preprocessing import LabelEncoder\nlabel_df = label_df.apply(LabelEncoder().fit_transform)\nlabel_df","f26c8139":"df1 = df.drop (['Sex','Embarked'], axis=1)\nfinal_df = pd.concat([df1,label_df], axis=1)\nfinal_df","68088606":"print ('         Data type        ')\nprint(final_df.dtypes)\nprint ('----------------------------------')\nprint ('         counts of Missing values')\nprint (final_df.isna().sum())","0d83d5e3":"df = final_df\ntarget_column = 'Survived'\ny = df[target_column]\nX = df.drop(columns=[target_column]) # FOR drop more than one column\n\n# split the data\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, test_size=0.2,random_state=0)\n","d46e3c07":"from xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\n\n# take an object from the class\nModel = XGBClassifier()\n\n# Parameter selected\nSelected_Parameters = {'n_estimators':[ i for i in range (100,1001,100)], \n                       'learning_rate':[i\/100 for i in range (1,11)],\n                      'max_depth':[ i for i in range (3,11,1)]}\n\n# GridSearchModel to obtain the best parameter\nGridSearchModel = GridSearchCV(Model,Selected_Parameters, cv= 5,return_train_score=True)\n\n# fit (train) the model\nGridSearchModel.fit(X_train, y_train)\n\n# Showing Results\nprint('Best Score is :', GridSearchModel.best_score_)\nprint('Best Parameters are :', GridSearchModel.best_params_)","1a0b1bbe":"final_model = XGBClassifier(n_estimators=GridSearchModel.best_params_['n_estimators'],\n                           learning_rate=GridSearchModel.best_params_['learning_rate'],\n                          max_depth=GridSearchModel.best_params_['max_depth'])\nfinal_model.fit(X_train,y_train)\n\nprint (final_model.score(X_train,y_train))\n\nprint (final_model.score(X_test,y_test))","9470ca59":"final_model = XGBClassifier(n_estimators=2, learning_rate=0.05, n_jobs=4)\nfinal_model.fit(X_train, y_train, early_stopping_rounds=5, eval_set=[(X_valid, y_valid)], verbose=False)\npreds = final_model.predict(X_valid)\nprint(accuracy_score(y_valid, preds))","7cef7f97":"df_test = pd.read_csv('..\/input\/titanic\/test.csv', index_col='PassengerId')\ndf_test","dd95982b":"print ('  Data Types        ')\nprint(df_test.dtypes)\nprint ('----------------------------------')\nprint ('         counts of Missing values')\nprint (df_test.isna().sum())\nprint ('----------------------------------')\nprint ('         Numbers of unique values')\nprint ([[col,len (df_test[col].unique())] for col in df_test.columns])","fa8d7ad9":"print ('The Counts of Missing Data equal:\\n\\n',df_test.isna().sum())","240acd99":"drop_columns_test = ['Name','Ticket','Cabin']\ndf_test.drop (drop_columns_test, axis=1, inplace=True)\ndf_test","c24f23c3":"df_test['Age'].fillna(value = df_test['Age'].mean(), inplace = True)\ndf_test['Fare'].fillna(value = df_test['Fare'].mean(), inplace = True)","6dcb2cc0":"df_test.isna().sum()","d05fcd9b":"lable_columns_test = ['Sex','Embarked']\nlabel_df_test = df_test[lable_columns_test]\nfrom sklearn.preprocessing import LabelEncoder\nlabel_df_test = label_df_test.apply(LabelEncoder().fit_transform)\nlabel_df_test","910d8b02":"final_df_test = pd.concat([df_test.drop (lable_columns_test,axis=1),label_df_test],axis=1)\nfinal_df_test","f490b4c3":"print ('         Data type        ')\nprint(final_df_test.dtypes)\nprint ('----------------------------------')\nprint ('         Counts of Missing values')\nprint (final_df_test.isna().sum())","5198ef92":"preds_test = final_model.predict(final_df_test)\npreds_test","42799d30":"# Save test predictions to file\noutput = pd.DataFrame({'PassengerId': final_df_test.index,\n                       'Survived': preds_test})\noutput.to_csv('submission.csv', index=False)","55ca5b1d":"## Final Data Frame","92e2b669":"Imputaion the missing value for column 'Age' , 'Fare'","6e7e7454":"Drop some unimportant columns","e86eacf8":"# LableEncoder (Catigorical Variables)","c796cb03":"Final Model\n","8d4dbc36":"LabelEncoder","f753d302":"Missing Values","f9d02adf":"# Test Data","591e0fdb":"# Model ","ca3eb473":"Drop some unimportant Columns","b7cf4e9f":"Split the data","07e9b361":"Imputaion the missing value for column 'Embarked' (strategy='most_frequent')","4500cca4":"Imputaion the missing value for column 'Age' (Mean)"}}