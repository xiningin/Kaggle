{"cell_type":{"9047fdcd":"code","4412e984":"code","d839261c":"code","0f8cccc1":"code","4663cdba":"code","62daaf2c":"code","a1b25212":"code","db0b5090":"code","20859fce":"code","3cad2036":"code","316adc70":"code","1b174f37":"code","3d4b2dc0":"code","e90a45d2":"code","c7d3317c":"code","906787c3":"code","b580b9e1":"code","0d69379a":"code","b0fbabc1":"code","1e25db2f":"code","d34d74f3":"code","c79d5e81":"markdown","87701b25":"markdown","d95ddfe2":"markdown","8465fb9c":"markdown","99e61705":"markdown","f2a745a3":"markdown"},"source":{"9047fdcd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4412e984":"df = pd.read_csv('\/kaggle\/input\/covid19-in-india\/covid_19_india.csv')\ndf.head()","d839261c":"print(\"Size\/Shape of the dataset: \",df.shape)\nprint(\"Checking for null values:\\n\",df.isnull().sum())\nprint(\"Checking Data-type of each column:\\n\",df.dtypes)\n\n#df['Time']","0f8cccc1":"df['Date'] = pd.to_datetime(df['Date'],dayfirst=True)\ndf.head()\n#df.drop(['Date'],axis=1)","4663cdba":"#pd.set_option('display.max_rows', None)\nAnalysis = df.groupby([\"Date\"]).agg({\"Confirmed\":'sum',\"Cured\":'sum',\"Deaths\":'sum'})\nAnalysis[\"Days Since\"] = Analysis.index-Analysis.index.min()\nAnalysis","62daaf2c":"print(\"Total no of confirmed cases till date :\",Analysis['Confirmed'].iloc[-1])\nprint(\"Total no of deaths till date :\",Analysis['Deaths'].iloc[-1])\nprint(\"Total no of cured cases till date :\",Analysis['Cured'].iloc[-1])\nprint(\"Total no of active cases till date :\",Analysis['Confirmed'].iloc[-1]-Analysis['Deaths'].iloc[-1]-Analysis['Cured'].iloc[-1])\nprint(\"Total no of confirmed cases per day :\",np.round((Analysis['Confirmed'].iloc[-1])\/(Analysis.shape[0])))\nprint(\"Total no of death cases per day :\",np.round((Analysis['Deaths'].iloc[-1])\/(Analysis.shape[0])))\nprint(\"Total no of cured cases per day :\",np.round((Analysis['Cured'].iloc[-1])\/(Analysis.shape[0])))\nprint(\"Total no of confirmed cases per hour :\",np.round((Analysis['Confirmed'].iloc[-1])\/((Analysis.shape[0])*24)))\nprint(\"Total no of death cases per hour :\",np.round((Analysis['Deaths'].iloc[-1])\/((Analysis.shape[0])*24)))\nprint(\"Total no of cured cases per hour :\",np.round((Analysis['Cured'].iloc[-1])\/((Analysis.shape[0])*24)))\n\n\n","a1b25212":"from matplotlib import pyplot as plt\nimport seaborn as sns\n\n#Date = Analysis.index.date\n#print(Date)\n#Total_confirmed = Analysis['Confirmed']\n#Total_deaths    = Analysis['Deaths']\n#Total_cured     = Analysis['Cured']\n\n#fig,axs = plt.subplots(2,2,figsize=(20,15))\nplt.figure(figsize=(15,5))\n#plt.plot(Date,Total_confirmed)\n\nplt.plot(Analysis.index.date,Analysis[\"Confirmed\"],linewidth='5',color='b')\nplt.plot(Analysis.index.date,Analysis[\"Cured\"],linewidth='5',color='g')\nplt.plot(Analysis.index.date,Analysis[\"Deaths\"],linewidth='5',color='r')\n\nplt.legend(['Confirmed','Cured','Deaths'])\nplt.title(\"Curve of Confirmed V\/s Cured V\/s Death\",fontsize=20)\nplt.xlabel(\"Month\",fontsize=20)\nplt.ylabel(\"Total no of cases\",fontsize=20)\nplt.xticks(rotation=90)","db0b5090":"Analysis[\"Mortality Rate\"]=(Analysis[\"Deaths\"]\/Analysis[\"Confirmed\"])*100\nAnalysis[\"Recovery Rate\"]=(Analysis[\"Cured\"]\/Analysis[\"Confirmed\"])*100\n\nplt.style.use('seaborn')\nfig,(ax1,ax2) = plt.subplots(1,2,figsize=(20,6))\nax1.plot(Analysis[\"Mortality Rate\"],linewidth=1,color='b')\nax1.set_title('Mortality Rates',fontsize=20)\nax1.set_xlabel('Month',fontsize=20)\nax1.set_ylabel('Total count',fontsize=20)\n\nax2.plot(Analysis[\"Recovery Rate\"],linewidth=1,color='b')\nax2.set_title('Recovery Rates',fontsize=20)\nax2.set_xlabel('Month',fontsize=20)\nax2.set_ylabel('Total count',fontsize=20)\n#print(Analysis[\"Mortality Rate\"])\n","20859fce":"Analysis.head()","3cad2036":"import plotly.express as px\nfig = px.bar( df.loc[(df['State\/UnionTerritory']=='Maharashtra')&(df.Date >= '2020-03-01')].sort_values('Confirmed',ascending = False),x='Date', y='Confirmed',\n             color=\"Confirmed\", color_continuous_scale=px.colors.sequential.Brwnyl)\nfig.update_layout(title_text='Confirmed COVID-19 cases in Maharashtra')\nfig.show()","316adc70":"import plotly.express as px\nfig = px.bar( df.loc[(df['State\/UnionTerritory']=='Delhi')&(df.Date >= '2020-03-01')].sort_values('Confirmed',ascending = False),x='Date', y='Confirmed',\n             color=\"Confirmed\",color_continuous_scale=px.colors.sequential.BuGn)\nfig.update_layout(title_text='Confirmed COVID-19 cases in Delhi')\nfig.show()","1b174f37":"import plotly.express as px\nfig = px.bar( df.loc[(df['State\/UnionTerritory']=='Tamil Nadu')&(df.Date >= '2020-03-01')].sort_values('Confirmed',ascending = False),x='Date', y='Confirmed',\n             color=\"Confirmed\",color_continuous_scale=px.colors.sequential.BuGn)\nfig.update_layout(title_text='Confirmed COVID-19 cases in Tamil Nadu')\nfig.show()","3d4b2dc0":"df","e90a45d2":"pd.set_option('display.max_rows', None)\nWrst_Afctd_ST= df.groupby([\"State\/UnionTerritory\"]).agg({\"Confirmed\":'sum'})\nWrst_Afctd_ST\n\nStates    = Wrst_Afctd_ST.index\nConfirmed = list(Wrst_Afctd_ST['Confirmed'])\n#print(Confirmed)\n#print(States)\n#Wrst_Afctd_ST\nplt.figure(figsize=(20,20))\nplt.title(\"Pie Chart of Worst Hit States\",fontsize=30)\nplt.pie(Confirmed,labels=States,autopct='%1.1f%%',wedgeprops={'edgecolor':'black'})\nplt.show()","c7d3317c":"\nST_testing = pd.read_csv('\/kaggle\/input\/covid19-in-india\/StatewiseTestingDetails.csv')\n\n\nStates = (list(ST_testing['State'].unique()))\nStates\nTotal_Testing = []\n\nfor item in States:\n    Total_Testing.append(ST_testing[ST_testing['State']==item]['TotalSamples'].max())\n\n##state_testing =    \n#print(Total_Testing)\n\nindia_testing = pd.DataFrame(list(zip(States,Total_Testing)),columns=['States','Total_Testing'])\n\nindia_testing","906787c3":"plt.figure(figsize=(20,10))\nplt.barh(States,Total_Testing)\nplt.xlabel(\"Total test count\",fontsize=30)\nplt.ylabel(\"States\",fontsize=30)\nplt.title(\"Maximum testing Statewise\",fontsize=30)\n\nplt.show()","b580b9e1":"State = list(df['State\/UnionTerritory'].unique())\n#print(State)\n\nConfirmed = []\nDeaths    = []\nCured = []\nfor item in State:\n    Confirmed.append(df[df['State\/UnionTerritory']==item]['Confirmed'].max())\n    Deaths.append(df[df['State\/UnionTerritory']==item]['Deaths'].max())\n    Cured.append(df[df['State\/UnionTerritory']==item]['Cured'].max())\n    \n#print(Confirmed)\n\nStatewise = pd.DataFrame(list(zip(State,Confirmed,Deaths,Cured)),columns=['State','Confirmed','Deaths','Cured'])\nStatewise['Mortality'] = (Statewise['Deaths']\/Statewise['Confirmed'])*100\nStatewise['Recovery'] = (Statewise['Cured']\/Statewise['Confirmed'])*100\nStatewise","0d69379a":"mortality = Statewise['Mortality']\nplt.figure(figsize=(20,10))\nplt.bar(State,mortality,color='r')\nplt.xlabel(\"States\",fontsize=30)\nplt.ylabel(\"Mortality rate\",fontsize=30)\nplt.title(\"Mortality Rate Statewise\",fontsize=30)\nplt.xticks(rotation=90)\nplt.show()","b0fbabc1":"recovery = Statewise['Recovery']\nplt.figure(figsize=(20,10))\nplt.bar(State,recovery,color='g')\nplt.xlabel(\"States\",fontsize=30)\nplt.ylabel(\"Recovery rate\",fontsize=30)\nplt.title(\"Recovery Rate Statewise\",fontsize=30)\nplt.xticks(rotation=90)\nplt.show()","1e25db2f":"df_lab = pd.read_csv('..\/input\/icmrtestinglabswithcoords1\/datasets_624680_1113799_ICMRTestingLabsWithCoords.csv')\nfig = px.scatter_mapbox(df_lab,\n                        lat=\"latitude\",\n                        lon=\"longitude\",\n                        mapbox_style='stamen-watercolor',\n                        hover_name='lab',\n                        hover_data=['city','state','pincode'],\n                        zoom=2.5,\n                        size_max=15,\n                        title= 'COVID19 Testing Labs in India')\nfig.show()","d34d74f3":"AgeDF = pd.read_csv('..\/input\/covid19-in-india\/AgeGroupDetails.csv')\nAgeDF\n\nAgeGroup = AgeDF['AgeGroup']\nslice    = AgeDF['TotalCases']\n\nplt.figure(figsize=(20,20))\nplt.title(\"Pie Chart of Pandaemic impact Age group wise\",fontsize=30)\nplt.pie(slice,labels=AgeGroup,autopct='%1.1f%%',wedgeprops={'edgecolor':'black'})\nplt.show()\n","c79d5e81":"Pandaemic impact Age group wise","87701b25":"Testing count done statewise","d95ddfe2":"Representation of statewise pandemic effect","8465fb9c":"Mortality and Recovery rate across India","99e61705":"Testing labs spread across India","f2a745a3":"Calculate the mortality and Recovery rates statewise based on confirmed cases"}}