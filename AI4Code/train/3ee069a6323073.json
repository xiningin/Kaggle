{"cell_type":{"bda7db5f":"code","31455609":"code","b368fdc2":"code","55c5bba9":"code","e6f0fd45":"code","1c8d055f":"code","04756d10":"code","f4e7d265":"code","03dff9d8":"code","670aa02a":"code","e120a7b9":"code","cbfc70e7":"code","53e51976":"code","86173db7":"code","ea263631":"code","a10be07d":"code","f1d346e4":"code","620a8b73":"code","675a03dd":"code","1c5d6160":"code","7052c24e":"code","9adc0484":"code","462606e3":"code","79c32965":"code","830f6fa7":"code","c96068ad":"code","6c6f3151":"code","2d53dde4":"code","1a07b085":"code","e0e41040":"code","f8ddfb2f":"code","e93d5b1c":"code","9a73f664":"code","f9fa1463":"code","eb618f7e":"code","764625ef":"code","5fca279b":"code","3d6235c8":"code","535e1804":"code","4a0b2c3f":"code","0db7ef50":"code","23161c7c":"code","73936b7c":"code","944d1242":"code","034a890d":"code","7adfab35":"code","586654f5":"code","04685c0e":"markdown","5d3e4480":"markdown","98451d32":"markdown","8cef4ba7":"markdown"},"source":{"bda7db5f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns #for plots\nimport pandas_profiling as pp\nimport matplotlib.pyplot as plt\n#from sklearn.preprocessing import MinMaxScaler\n%matplotlib inline\n%reload_ext autoreload\n%autoreload 2\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31455609":"train_data=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head(2)","b368fdc2":"test_data=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.head(2)","55c5bba9":"test_data.describe()","e6f0fd45":"train_data.shape","1c8d055f":"train_data.Survived","04756d10":"pp.ProfileReport(train_data)","f4e7d265":"pp.ProfileReport(test_data)","03dff9d8":"#changing column names to lower cases\ntrain_data.columns= train_data.columns.str.lower()\ntrain_data.columns","670aa02a":"test_data.columns = test_data.columns.str.lower()\ntest_data.columns","e120a7b9":"train_data.isnull().sum()","cbfc70e7":"train_data.age.value_counts()","53e51976":"train_data[train_data.age <=1]['age']","86173db7":"#Fill Nan values in age and embarked in train data.\ntrain_data.age.fillna(train_data.age.mean(), inplace=True)\ntrain_data.embarked.fillna(\"S\", inplace=True)\ntrain_data.fare.fillna(train_data.fare.mean(), inplace=True)\n","ea263631":"#Fill Nan values in test data\ntest_data.age.fillna(test_data.age.mean(), inplace=True)\ntest_data.embarked.fillna(\"S\", inplace=True)\ntest_data.fare.fillna(test_data.fare.mean(), inplace=True)\n","a10be07d":"train_data.isnull().sum()\n#Leave Cabin for now. We dont need it. But if you want you can fill \n#cabin as i am not using it so not changing the data","f1d346e4":"train_data.age= train_data.age.astype(int)","620a8b73":"train_data['age'].dtype\n","675a03dd":"test_data.age= test_data.age.astype(int)","1c5d6160":"test_data.age.dtype","7052c24e":"\nsns.boxplot(train_data.age)\nplt.show()\n#we can see very few people over 65 were travelling\n","9adc0484":"plt.figure(figsize = (12,6))\nplt.bar(train_data.columns, train_data.isnull().sum())\nplt.xlabel(\"Columns\")\nplt.ylabel(\"null values in columns\")\nplt.show()\n#null values find in 'age', 'cabin','embarked'","462606e3":"plt.figure(figsize =(12,6))\nplt.bar(train_data.columns, train_data.isna().sum())\nplt.xlabel(\"columns\")\nplt.ylabel(\"Nan values\")\nplt.show()","79c32965":"#number of survived \nsns.distplot(train_data.survived)\n#survival rate is less than the dead","830f6fa7":"#let's find out how many survived visually\nsns.countplot('survived', data=train_data)\n#survived = almost 300 , not survived = almost = 600","c96068ad":"sns.countplot(train_data.embarked, hue = train_data.survived)\n#we can see below that 'S ' class has high death rate.","6c6f3151":"sns.countplot(train_data.sex, hue= train_data.survived)\n#male death rate is higher than female","2d53dde4":"sns.countplot(train_data.pclass, hue= train_data.survived)\n#Pclass 3 has far more death rate","1a07b085":"sns.distplot(train_data.fare)\n#People mostly paid less than 100","e0e41040":"train_data.columns\n","f8ddfb2f":"#Look at all the values in each column and get count\n\nfor val in train_data:\n    print (train_data[val].value_counts())\n    print()\n    \n#observations:\n#1. male > female \n#2. survival rate < death","e93d5b1c":"train_data= train_data.drop(['name','ticket'], axis=1)\ntrain_data =train_data.dropna(subset=['cabin'])\n\n","9a73f664":"# train_data.dtypes\n# #look for data types of columns . we need to change object data type.","f9fa1463":"#Label encoder will transfer object data type to integer\n\nfrom sklearn.preprocessing import LabelEncoder\nlabelencoder = LabelEncoder()\n\n# Encode the sex column\ntrain_data.iloc[:,3]=labelencoder.fit_transform(train_data.iloc[:,3].values)\n\n#Encode the embarked column\ntrain_data.iloc[:,9]=labelencoder.fit_transform(train_data.iloc[:,9].values)\n\n#Encode the cabin column\ntrain_data.iloc[:,8]=labelencoder.fit_transform(train_data.iloc[:,8].values)\n","eb618f7e":"#Check the unique values in sex and embarked\n\nprint(train_data.sex.unique())\nprint(train_data.embarked.unique())\nprint(train_data.cabin.unique())","764625ef":"\nfr_train_data = train_data.drop(columns = ['passengerid','cabin','embarked', 'sex'])\nfr_test_data = test_data.drop(columns = ['passengerid', 'name','cabin','ticket','embarked', 'sex'])\n# we will leave out survived column because it is y\n","5fca279b":"fr_train_data.columns\n","3d6235c8":"fr_test_data.columns\n","535e1804":"# Dataset Preparation\nx_train = fr_train_data.drop(columns=['survived'])\ny_train = fr_train_data['survived']","4a0b2c3f":"#Create training sets as 80% training 20 % testing\n\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x_train,y_train,test_size=0.20,random_state=0)","0db7ef50":"# #Scale the data by using standard scaler\n# from sklearn.preprocessing import StandardScaler\n# sc= StandardScaler()\n# x_train = sc.fit_transform(x_train)\n# x_test = sc.fit_transform(x_test)","23161c7c":"#Create Random Forest Model\nfrom sklearn.ensemble import RandomForestClassifier\nforest = RandomForestClassifier(n_estimators = 10, criterion ='entropy', random_state=0)\nforest.fit(x_train,y_train)\ny_pred = forest.predict(x_test)","73936b7c":"from sklearn.metrics import confusion_matrix,accuracy_score,roc_curve,classification_report\nfr_conf_matrix= confusion_matrix(y_test,y_pred)\nprint(fr_conf_matrix)","944d1242":"#Import scikit-learn metrics module for accuracy calculation\nfrom sklearn import metrics\nfrom sklearn.metrics import accuracy_score\n#Model Accuracy, how often is the classifier correct?\n#print(\"Accuracy:\",metrics.accuracy_score( y_test,y_pred))\nmodel_accuracy = ((accuracy_score(y_test, y_pred).round(4))*100).round(1)\n\nprint('Accuracy: ' + str(model_accuracy))\n","034a890d":"y_test_pred =forest.predict(fr_test_data)\nsurvived_columns = pd.Series(y_test_pred, name = 'Survived')\nresult = pd.DataFrame()\nresult['PassengerId'] = test_data.passengerid\nresult['survived'] = survived_columns\n\nresult.to_csv('submission.csv', index=False)\nprint(result.head(10))","7adfab35":"from sklearn.preprocessing import StandardScaler\nsc= StandardScaler()\nmy_survival = [[3,2,21,0,0]]\nmy_survival_scaled= sc.fit_transform(my_survival)\npred = forest.predict(my_survival_scaled)\nprint(pred)\nif pred == 0:\n    print (\"Unfortunately, the person doesnot survived\")\nelse:\n    print (\"The person survived\")","586654f5":"# submission = pd.DataFrame({'PassengerId': test_data['passengerid'].values, 'Survived': y_train.astype(np.int32)})\n# submission.head(10)\n\nnew_df = pd.DataFrame({'Actual':y_test,'Predicted':y_pred})\nnew_df","04685c0e":"# Observations\n1. Accuracy by using Random Forest classifier = 70%\n2. survival was less than deaths\n3. survival was almost 300 where as deaths were almost 600\n4. Embarked ='S' has high death rate\n5. female death rate is less than male\n6. Pclass = 3 has far more death rate than other passenger classes","5d3e4480":"# Filling Missing Values","98451d32":"# Data Visualization ","8cef4ba7":"**Change of data type of age to int64**"}}