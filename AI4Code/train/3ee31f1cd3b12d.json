{"cell_type":{"123b0d7d":"code","0183b4df":"code","c737e9bc":"code","50c90bbc":"code","dd72721f":"code","d383066f":"code","08a6402c":"code","fbb22716":"code","b9362388":"code","5e4b0af7":"code","7a2485bd":"code","cba43b79":"code","8c6b04bf":"code","58019879":"code","b35c8978":"code","37e1f9bb":"code","7a423ddf":"code","4c875bc5":"code","d169f902":"code","5ab36e75":"code","ae97fda4":"markdown"},"source":{"123b0d7d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport  numpy as np\nfrom tensorflow import keras\nfrom keras.layers import Dense,Conv2D,MaxPool2D,BatchNormalization,Flatten\nfrom keras.models import Sequential\nfrom keras.preprocessing import image\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom matplotlib import pyplot as plt\nimport cv2\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0183b4df":"labels = os.listdir('..\/input\/natural-images\/natural_images')\nlabels","c737e9bc":"from IPython.display import display, Image\n\nfor label in labels:\n    path = '..\/input\/natural-images\/natural_images\/{}\/'.format(label)\n    img_data = os.listdir(path)\n    \n    k=0\n    for image_data in img_data:\n        if k < 3:\n            display(Image(path+image_data))\n        k += 1","50c90bbc":"x = []\ny = []\n\nfor label in labels:\n    path = '..\/input\/natural-images\/natural_images\/{}\/'.format(label)\n    img_data = os.listdir(path)\n    \n    for image in img_data:\n        a=cv2.imread(path+image)\n        a = cv2.resize(a,(64,64))\n        x.append(np.array(a.astype('float32'))\/255)\n        y.append(label)","dd72721f":"plt.imshow(x[116])","d383066f":"x = np.array(x)\nx.shape","08a6402c":"y_d = []\nfor i in y:\n    if i == 'airplane':\n        y_d.append(0)\n    elif i == 'car':\n        y_d.append(1)\n    elif i == 'cat':\n        y_d.append(2)\n    elif i == 'dog':\n        y_d.append(3)\n    elif i == 'flower':\n        y_d.append(4)\n    elif i == 'fruit':\n        y_d.append(5)\n    elif i == 'motorbike':\n        y_d.append(6)\n    else:\n        y_d.append(7)","fbb22716":"y = y_d","b9362388":"plt.imshow(x[2581])\ny[2581]","5e4b0af7":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.27)","7a2485bd":"print('X_train shape: ',x_train.shape)\nprint('X_test shape: ',x_test.shape)","cba43b79":"from keras import models, layers\nfrom keras.regularizers import l2\nfrom tensorflow.python.keras import regularizers\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(filters=32, kernel_size=(5,5), activation='relu', input_shape=(64,64,3)))\nmodel.add(layers.MaxPool2D(pool_size=(2, 2)))\nmodel.add(layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu'))\nmodel.add(layers.MaxPool2D(pool_size=(2, 2)))\n#model.add(layers.Dropout(rate=0.25))\nmodel.add(layers.Flatten())\n#model.add(layers.Dense(256, activation='relu'))\n#model.add(layers.Dropout(rate=0.5))\nmodel.add(layers.Dense(8, activation='softmax'))\n\n\n'''\n##The hinge loss with regularization term forms the complete SVM loss function.\n\nmodel.add(Dense(8, kernel_regularizer=regularizers.l2(0.0001)))\nmodel.add(Activation('linear'))\nmodel.compile(loss='squared_hinge',\n                      optimizer='adadelta', metrics=['accuracy'])\n'''","8c6b04bf":"model.compile(optimizer='adam',loss = 'sparse_categorical_crossentropy',metrics=['accuracy'])","58019879":"y_train = np.array(y_train)\ny_train","b35c8978":"model.summary()","37e1f9bb":"model.fit(x_train,y_train,batch_size=(256),epochs=25)","7a423ddf":"pred = model.predict(xtest)","4c875bc5":"y_test_pred = model.predict_classes(x_test)\ny_test_pred","d169f902":"diff = []\nfor i in pred:\n    diff.append(np.argmax(i))","5ab36e75":"from sklearn.metrics import accuracy_score\naccuracy_score(diff,ytest)","ae97fda4":"**CNN MODEL WITH SVM**"}}