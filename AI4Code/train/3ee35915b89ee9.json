{"cell_type":{"ecac538d":"code","2bb552e8":"code","6fdc5875":"code","cb4efbf6":"code","20184663":"code","870644fa":"code","b31d4a39":"code","a39896c2":"code","a6d9de55":"code","c89259b7":"code","3c287a14":"code","3ad4c526":"code","98a3be0f":"code","9f86bfdf":"code","24201cd3":"code","a30b59ba":"code","89450ae6":"code","f741de22":"code","4b62c2ba":"code","71aa144b":"code","991d9c5f":"code","17b76e9c":"code","e5688a3d":"code","773e44a2":"code","83aa076d":"code","b5993856":"code","e2adc3e6":"code","626f0887":"code","b09dd856":"code","3b817d9e":"code","f885ce11":"code","717d59f9":"code","ef8b3b99":"code","c1f5a6fd":"code","0f075036":"code","0c24a5c8":"code","43925f51":"code","1bf1e019":"code","a481cc97":"code","e9bb07b2":"code","ee1cd139":"code","b218b145":"code","f4c9d45d":"code","30fd37ba":"code","7370f3ef":"code","7019b877":"code","4090741c":"code","fd58706c":"code","1e932448":"code","4a335653":"code","4d19a639":"code","9b49c6e3":"code","f8d9e94b":"code","e09a60fa":"code","f7dcc2da":"code","a45e0d6f":"code","84cba188":"code","31d0ecd5":"code","c1ef7041":"code","666fba87":"code","23c361ad":"code","2d6e1f2f":"code","03158c6c":"code","66733f04":"code","72372d5b":"code","db2ca8ae":"code","39f54f75":"code","b546323f":"markdown","789868c7":"markdown","e889f751":"markdown","75c0bdc2":"markdown","8b2e2749":"markdown","c68b75f1":"markdown","6eefc6d3":"markdown"},"source":{"ecac538d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2bb552e8":"import statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nimport sklearn\n\nfrom sklearn import preprocessing\nfrom sklearn import metrics\nfrom sklearn.ensemble import RandomForestRegressor\nfrom scipy.stats import norm\n\nfrom scipy import stats\nstats.chisqprob = lambda chisq, df: stats.chi2.sf(chisq, df)","6fdc5875":"raw_train_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')","cb4efbf6":"raw_train_data","20184663":"raw_train_data.describe()","870644fa":"raw_train_data['TotalSF'] = raw_train_data['1stFlrSF'] + raw_train_data['2ndFlrSF']\nraw_train_data['TotalBath'] = raw_train_data['BsmtFullBath'] + raw_train_data['BsmtHalfBath']*0.5 + raw_train_data['FullBath'] + raw_train_data['HalfBath']*0.5","b31d4a39":"raw_train_data.head()","a39896c2":"raw_train_data = raw_train_data.drop(['1stFlrSF', '2ndFlrSF', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath', 'HalfBath'], axis = 1)","a6d9de55":"raw_train_data","c89259b7":"corrmat = raw_train_data.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True)","3c287a14":"k = 12\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(raw_train_data[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","3ad4c526":"cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'TotalSF', 'TotalBath']\nsns.pairplot(raw_train_data[cols], height = 2.5)\nplt.show()","98a3be0f":"total = raw_train_data[cols].isnull().sum().sort_values(ascending=False)","9f86bfdf":"total","24201cd3":"df_train = raw_train_data.drop(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'OverallCond', 'YearRemodAdd', 'RoofStyle', 'RoofMatl',\n       'Exterior1st', 'Exterior2nd', 'MasVnrType', 'MasVnrArea',\n       'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',\n       'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2',\n       'BsmtFinSF2', 'BsmtUnfSF', 'Heating', 'HeatingQC',\n       'CentralAir', 'Electrical', 'LowQualFinSF', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu',\n       'GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageArea', 'GarageQual', 'GarageCond', 'PavedDrive',\n       'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n       'ScreenPorch', 'PoolArea', 'PoolQC', 'Fence', 'MiscFeature',\n       'MiscVal', 'MoSold', 'YrSold', 'SaleType', 'SaleCondition'], axis = 1)","a30b59ba":"df_train","89450ae6":"df_train.describe()","f741de22":"df_train = df_train.drop(df_train[df_train['GrLivArea'] == 4676].index)\ndf_train = df_train.drop(df_train[df_train['GrLivArea'] == 5642].index)","4b62c2ba":"df_train","71aa144b":"cols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'TotalSF', 'TotalBath', 'YearBuilt']\nsns.pairplot(df_train[cols], height = 2.5)\nplt.show()","991d9c5f":"sns.distplot(df_train['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)","17b76e9c":"df_train['SalePrice'] = np.log(df_train['SalePrice'])","e5688a3d":"sns.distplot(df_train['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)","773e44a2":"sns.distplot(df_train['TotalSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['TotalSF'], plot=plt)","83aa076d":"df_train['TotalSF'] = np.log(df_train['TotalSF'])","b5993856":"sns.distplot(df_train['TotalSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['TotalSF'], plot=plt)","e2adc3e6":"sns.distplot(df_train['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['GrLivArea'], plot=plt)","626f0887":"df_train['GrLivArea'] = np.log(df_train['GrLivArea'])","b09dd856":"sns.distplot(df_train['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['GrLivArea'], plot=plt)","3b817d9e":"df_train","f885ce11":"sns.distplot(df_train['TotalBsmtSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['TotalBsmtSF'], plot=plt)","717d59f9":"raw_test_data = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","ef8b3b99":"raw_test_data","c1f5a6fd":"raw_test_data['TotalSF'] = raw_test_data['1stFlrSF'] + raw_test_data['2ndFlrSF']\nraw_test_data['TotalBath'] = raw_test_data['BsmtFullBath'] + raw_test_data['BsmtHalfBath']*0.5 + raw_test_data['FullBath'] + raw_test_data['HalfBath']*0.5","0f075036":"df_test = raw_test_data.drop(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'OverallCond', 'YearRemodAdd', 'RoofStyle', 'RoofMatl',\n       'Exterior1st', 'Exterior2nd', 'MasVnrType', 'MasVnrArea',\n       'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual', 'BsmtCond',\n       'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtFinType2',\n       'BsmtFinSF2', 'BsmtUnfSF', 'Heating', 'HeatingQC',\n       'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu',\n       'GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageArea', 'GarageQual', 'GarageCond', 'PavedDrive',\n       'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n       'ScreenPorch', 'PoolArea', 'PoolQC', 'Fence', 'MiscFeature',\n       'MiscVal', 'MoSold', 'YrSold', 'SaleType', 'SaleCondition'], axis = 1)","0c24a5c8":"df_test","43925f51":"df_test.columns.values","1bf1e019":"from sklearn.impute import KNNImputer","a481cc97":"imputer = KNNImputer(n_neighbors=2) \nimputed_test_data = imputer.fit_transform(df_test)","e9bb07b2":"imputed_test_data","ee1cd139":"imputed_test_data = pd.DataFrame(imputed_test_data)","b218b145":"imputed_test_data","f4c9d45d":"imputed_test_data.columns = ['OverallQual', 'YearBuilt', 'TotalBsmtSF', 'GrLivArea',\n       'GarageCars', 'TotalSF', 'TotalBath']","30fd37ba":"imputed_test_data","7370f3ef":"imputed_test_data.describe()","7019b877":"X_train = df_train.drop(['SalePrice'], axis = 1)","4090741c":"X_train","fd58706c":"Y_train = df_train['SalePrice']","1e932448":"Y_train","4a335653":"sns.distplot(imputed_test_data['TotalSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(imputed_test_data['TotalSF'], plot=plt)","4d19a639":"imputed_test_data['TotalSF'] = np.log(imputed_test_data['TotalSF'])","9b49c6e3":"sns.distplot(imputed_test_data['TotalSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(imputed_test_data['TotalSF'], plot=plt)","f8d9e94b":"sns.distplot(imputed_test_data['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(imputed_test_data['GrLivArea'], plot=plt)","e09a60fa":"imputed_test_data['GrLivArea'] = np.log(imputed_test_data['GrLivArea'])","f7dcc2da":"sns.distplot(imputed_test_data['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(imputed_test_data['GrLivArea'], plot=plt)","a45e0d6f":"sns.distplot(imputed_test_data['TotalBsmtSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(imputed_test_data['TotalBsmtSF'], plot=plt)","84cba188":"imputed_test_data","31d0ecd5":"X_test = imputed_test_data.copy()","c1ef7041":"X_test","666fba87":"X_test.describe()","23c361ad":"from sklearn.model_selection import train_test_split\n\nX_train_mod, X_test_mod, Y_train_mod, Y_test_mod = train_test_split(X_train, Y_train, test_size=0.20, random_state=42)","2d6e1f2f":"regressor = RandomForestRegressor(n_estimators=200, max_depth = 50, random_state=0)\nregressor.fit(X_train_mod, Y_train_mod)\nY_pred = regressor.predict(X_test_mod)","03158c6c":"print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test_mod, Y_pred))\nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test_mod, Y_pred))\nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test_mod, Y_pred)))","66733f04":"Predicted_prices_log = regressor.predict(X_test)","72372d5b":"Predicted_prices = np.exp(Predicted_prices_log)","db2ca8ae":"Predicted_prices","39f54f75":"output = pd.DataFrame({'Id': raw_test_data.Id, 'SalePrice': Predicted_prices})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","b546323f":"Output","789868c7":"Removing Outliers","e889f751":"Random Forest","75c0bdc2":"Normality","8b2e2749":"Imputing missing values in df_test","c68b75f1":"Data import and Preprocessing","6eefc6d3":"Data preparation for the algorithm"}}