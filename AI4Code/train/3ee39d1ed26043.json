{"cell_type":{"4fc5023e":"code","f1959875":"code","9856c68e":"code","2878285c":"code","beea3cb4":"code","11d82bad":"code","16191883":"code","54eb213d":"code","c6cb6114":"code","c8dd74e0":"code","36c81881":"code","4c4a88a7":"code","5ded8df9":"code","ed67dc99":"code","832ae9d6":"code","5a3119df":"code","09259ade":"code","d40b8a44":"code","c4b2c585":"code","b0045c57":"code","874f1136":"code","e4035d0b":"code","d2f4462c":"code","e893d04f":"code","6597b423":"code","187ae890":"code","caf43346":"code","a4990ef4":"code","a4f6892f":"code","cd2e4556":"code","2c45d340":"code","7d3aa7c7":"code","4111588c":"code","df1dfd30":"code","3c5a95e8":"code","521721db":"code","9d68341c":"code","3a8472c0":"code","d3fe7978":"code","6a026db0":"code","98fa7e41":"code","9fd71aca":"code","9aae2f85":"code","f00b7979":"code","f888bfa7":"code","f43b374c":"code","5c9b7c12":"code","2147183c":"code","0473a16f":"code","ba4567f5":"code","0a286c15":"code","4c3cf22c":"code","89ec2e96":"code","26a7c354":"code","2a0ad7d0":"code","d7a6f1ab":"code","a4e311ac":"code","d336620a":"code","b6479d4b":"code","2c47966f":"code","9f9e25a5":"code","d32878df":"code","28c686c2":"markdown","134be09c":"markdown","6193d74d":"markdown","8f0281cb":"markdown","0395380c":"markdown","4c450f3f":"markdown","0e8d5b2f":"markdown","287ce1f0":"markdown","d014838a":"markdown","934ca537":"markdown","76805300":"markdown","2bc700ba":"markdown","7346ec9b":"markdown","abc7c5ae":"markdown","dee79416":"markdown","b5c7aeb2":"markdown","34faaa80":"markdown","89775b01":"markdown"},"source":{"4fc5023e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n%matplotlib inline\nsns.set(color_codes=True)","f1959875":"df = pd.read_csv('..\/input\/amazon-ml-engineer-hiring\/train.csv')\ntest = pd.read_csv(\"..\/input\/amazon-ml-engineer-hiring\/test.csv\")","9856c68e":"df.head()","2878285c":"df.info()","beea3cb4":"df.describe().T","11d82bad":"df.shape","16191883":"df.drop(\"customer_id\",axis=1,inplace=True)\ntest.drop(\"customer_id\",axis=1,inplace=True)","54eb213d":"df.nunique()","c6cb6114":"df.drop_duplicates(inplace=True)\ntest.drop_duplicates(inplace=True)\ndf.shape,test.shape","c8dd74e0":"corr_matrix = df.corr()\ncorr_matrix['customer_category'].sort_values(ascending = False)","36c81881":"plt.figure(figsize=(12,7))\nsns.heatmap(corr_matrix,annot=True)","4c4a88a7":"def correlation(dataset, threshold):\n    col_corr = set()  # Set of all the names of correlated columns\n    corr_matrix = dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if abs(corr_matrix.iloc[i, j]) > threshold: # we are interested in absolute coeff value\n                colname = corr_matrix.columns[i]  # getting the name of column\n                col_corr.add(colname)\n    return col_corr\ncorrelation(df,0.8)","5ded8df9":"df.drop('customer_stay_score',axis = 1,inplace=True)\ntest.drop('customer_stay_score',axis = 1,inplace=True)","ed67dc99":"px.pie(df,names=df.customer_category)","832ae9d6":"px.pie(df,names=df.customer_active_segment)","5a3119df":"px.pie(df,names = df.X1)","09259ade":"sns.countplot(data=df,x = df.customer_category)","d40b8a44":"sns.countplot(data=df,x = df.X1)","c4b2c585":"sns.countplot(data=df,x = df.customer_active_segment)","b0045c57":"plt.figure(figsize=(10,8))\nsns.distplot(df.customer_visit_score)\nsns.distplot(df.customer_affinity_score)\nplt.legend(['customer_visit_score','customer_affinity_score'])","874f1136":"plt.figure(figsize=(10,8))\nsns.distplot(df.customer_ctr_score)\nsns.distplot(df.customer_order_score)\nplt.legend(['customer_ctr_score','customer_order_score'])","e4035d0b":"sns.distplot(df.customer_product_variation_score)","d2f4462c":"px.box(df,y = ['customer_ctr_score','customer_order_score','customer_visit_score','customer_affinity_score','customer_product_variation_score'])","e893d04f":"fig, ax = plt.subplots(figsize=(10,8))\nax = sns.boxenplot(x =df['customer_ctr_score'])\n\nfig, ax = plt.subplots(figsize=(10,8))\nax = sns.boxenplot(x = df['customer_order_score'])\n\nfig, ax = plt.subplots(figsize=(10,8))\nax = sns.boxenplot(x = df['customer_visit_score'])\n\nfig, ax = plt.subplots(figsize=(10,8))\nax = sns.boxenplot(x = df['customer_affinity_score'])\n\nplt.show()","6597b423":"px.scatter(df,y = df.customer_affinity_score,x = df.customer_order_score,color=df.customer_category,opacity=1)","187ae890":"px.scatter(df,y = df.customer_product_variation_score,x = df.customer_product_search_score,color=df.customer_category)","caf43346":"px.scatter(df,x = df.customer_product_variation_score,y = df.customer_order_score,color=df.customer_category)","a4990ef4":"px.scatter(df,y = df.customer_visit_score,x = df.customer_ctr_score,color=df.customer_category)","a4f6892f":"px.scatter(df,x = df.customer_order_score,y = df.customer_product_search_score,color=df.customer_category)","cd2e4556":"px.scatter(df,x = df.customer_product_search_score,y = df.customer_ctr_score,color=df.customer_category)","2c45d340":"px.scatter(df,x = df.customer_affinity_score,y = df.customer_product_variation_score,color=df.customer_category)","7d3aa7c7":"sns.pairplot(df)","4111588c":"df = pd.get_dummies(df,columns=['X1','customer_active_segment'],drop_first=True)\ntest = pd.get_dummies(test,columns=['X1','customer_active_segment'],drop_first=True)\ndf.head()","df1dfd30":"df.isnull().sum()","3c5a95e8":"test.isnull().sum()","521721db":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values= np.NaN,strategy='median')\nimputer.fit(df)\nx = imputer.transform(df)\nimputer.fit(test)\ny = imputer.transform(test)","9d68341c":"df = pd.DataFrame(x,columns=df.columns)\ntest = pd.DataFrame(y,columns=test.columns)","3a8472c0":"df.isnull().sum()","d3fe7978":"test.isnull().sum()","6a026db0":"from sklearn.ensemble import ExtraTreesRegressor\nX_temp = df.drop(['customer_category'],axis=1)\nY_temp = df['customer_category']\nmodel = ExtraTreesRegressor()\nmodel.fit(X_temp,Y_temp)\nfeat_import = pd.Series(model.feature_importances_,index = X_temp.columns)\nfeat_import.nlargest(16).plot(kind='bar')\nplt.show()","98fa7e41":"X = df.drop(['customer_category'],axis=1)\nY = df['customer_category']","9fd71aca":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2,random_state = 42,stratify = Y)","9aae2f85":"Y_test.value_counts()","f00b7979":"Y_train.value_counts()","f888bfa7":"X_train.shape,X_test.shape,Y_train.shape,Y_test.shape","f43b374c":"from sklearn.preprocessing import StandardScaler\nms = StandardScaler()\nX_train = ms.fit_transform(X_train)\nX_test = ms.transform(X_test)","5c9b7c12":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier","2147183c":"lr = LogisticRegression()\nlr.fit(X_train,Y_train)","0473a16f":"dt = DecisionTreeClassifier()\ndt.fit(X_train,Y_train)","ba4567f5":"cat = CatBoostClassifier(iterations=500,task_type='GPU')\ncat.fit(X_train,Y_train,verbose=True)","0a286c15":"rf = RandomForestClassifier()\nrf.fit(X_train,Y_train)","4c3cf22c":"params = {'n_estimators': 1000,\n          'max_depth': 4,\n          'min_samples_split': 5,\n          'learning_rate': 0.01}\ngd =GradientBoostingClassifier(**params)\ngd.fit(X_train,Y_train)","89ec2e96":"xg = XGBClassifier(n_estimators = 3000,learning_rate=0.01)\nxg.fit(X_train,Y_train)","26a7c354":"lgb = LGBMClassifier()\nlgb.fit(X_train,Y_train,eval_set = (X_test,Y_test),early_stopping_rounds=1000)","2a0ad7d0":"# Number of trees in random forest\nn_estimators = [int(x) for x in np.linspace(start = 100, stop = 1200, num = 12)]\n# Number of features to consider at every split\nmax_features = ['auto', 'sqrt']\n# Maximum number of levels in tree\nmax_depth = [int(x) for x in np.linspace(5, 30, num = 6)]\n# max_depth.append(None)\n# Minimum number of samples required to split a node\nmin_samples_split = [2, 5, 10, 15, 100]\n# Minimum number of samples required at each leaf node\nmin_samples_leaf = [1, 2, 5, 10]\n\n\n\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf}\n\n\n\n\nrf_random = RandomizedSearchCV(estimator=rf,param_distributions=random_grid,\n                               scoring='accuracy',\n                              n_iter=10,cv=5,verbose=2,random_state=42,n_jobs=1)\n\nrf_random.fit(X_train,Y_train)","d7a6f1ab":"rf_random.best_params_","a4e311ac":"final_test = ms.transform(test)","d336620a":"pred = rf_random.predict(final_test)","b6479d4b":"test_lr = lr.predict(final_test)\ntest_rf = rf.predict(final_test)\ntest_rf_random = rf_random.predict(final_test)\ntest_gd = gd.predict(final_test)\ntest_lgb = lgb.predict(final_test)\n\nfinal_pred = (test_lr*0.6 + test_rf*0.2  + test_rf_random*0.1 + test_gd*0.1 )","2c47966f":"test = pd.read_csv(\"..\/input\/amazon-ml-engineer-hiring\/test.csv\")\nsubmit = pd.DataFrame()\nsubmit['customer_id'] = test['customer_id']\nsubmit['customer_category'] = final_pred\nsubmit['customer_category'] = submit['customer_category'].astype(int)","9f9e25a5":"submit.to_csv('submission.csv',index=False)","d32878df":"submit.head()","28c686c2":"customer_active_segment,X1,customer_category are Categorical Columns","134be09c":"there is negative correlation between customer_visit_score and customer_ctr_score","6193d74d":"# Unique values","8f0281cb":"# Missing Values in Train and Test Dataset","0395380c":"# Scaling","4c450f3f":"Data is bias towards 0 in customer_category.therefore it is ```Imbalance Dataset```.","0e8d5b2f":"There is positive correlation between customer_affinity_score and customer_order_score","287ce1f0":"# Removing Duplicate Rows","d014838a":"## Correlation with Target Variable ","934ca537":"# One-Hot Encoding of Categorical Columns","76805300":"## Data Visualization","2bc700ba":"it is negatively correlated and there are more outliers in customer_affinity_score.","7346ec9b":"we will drop this customer_stay_score as it is highly correlated with customer_ctr_score","abc7c5ae":"# Splitting The Dataset","dee79416":"## Distribution","b5c7aeb2":"there is negative correlation between  customer_order_score and customer_product_variation_score","34faaa80":"## Filling Missing values using Simple Imputer","89775b01":"# Feature Importance"}}