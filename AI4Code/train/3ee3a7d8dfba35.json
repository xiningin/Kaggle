{"cell_type":{"8f7adea0":"code","74d39f25":"code","c4440a75":"code","7ff2e721":"code","5231f805":"code","f208cfa5":"code","8a52204b":"code","ff683316":"code","753308c5":"code","112958c2":"code","83c8fd84":"code","c3c84d24":"code","5b628469":"code","687fd02c":"code","773662b4":"code","3b270938":"code","b66db71f":"code","48297507":"code","51c41093":"code","dc5b9a85":"code","d797ce0a":"code","3df0ff52":"markdown","692ec056":"markdown","4bca822e":"markdown","8b2eb5b0":"markdown"},"source":{"8f7adea0":"#import library\nimport itertools\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport statsmodels.api as sm\nimport matplotlib\nmatplotlib.rcParams['axes.labelsize'] = 14\nmatplotlib.rcParams['xtick.labelsize'] = 12\nmatplotlib.rcParams['ytick.labelsize'] = 12\nmatplotlib.rcParams['text.color'] = 'k'\nfrom pylab import rcParams\nfrom statsmodels.tsa.stattools import adfuller, kpss\nfrom pandas.plotting import autocorrelation_plot","74d39f25":"msft = pd.read_csv('..\/input\/microsoft-stock-price-all-time\/Microsoft.csv')","c4440a75":"msft.shape","7ff2e721":"msft.head()","5231f805":"msft.describe()","f208cfa5":"msft.info()","8a52204b":"#selection data to index\ndf = msft[['Date', 'Close']]\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True) \ndf.index","ff683316":"#check start of each month as the timestamp\ndf = df['Close'].resample('MS').mean()\ndf.head()","753308c5":"#check stock on 2021\ndf['2021':]","112958c2":"#visualize closing price\ndf.plot(figsize = (10,6))\nplt.title(\"Close Price\")\nplt.ylabel(\"Close Price\")\nplt.show()","83c8fd84":"#visualize decomposition\nrcParams['figure.figsize'] = 10, 6\ndecomposition = sm.tsa.seasonal_decompose(df, model = 'additive')\nfig = decomposition.plot()\nplt.show()","c3c84d24":"#visualize autocorrelation\nplt.rcParams.update({'figure.figsize':(10,6), 'figure.dpi':120})\nautocorrelation_plot(df.tolist())","5b628469":"#build model in parameter\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","687fd02c":"#selection parameter model\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            model = sm.tsa.statespace.SARIMAX(df, order = param, seasonal_order = param_seasonal, enforce_stationarity = False,\n                                            enforce_invertibility = False)\n            results = model.fit()\n            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n                continue","773662b4":"#fitting model\nmodel = sm.tsa.statespace.SARIMAX(df, order = (1, 1, 1), seasonal_order = (1, 1, 0, 12), enforce_stationarity = False,\n                                enforce_invertibility = False)\nresults = model.fit()\nprint(results.summary().tables[1])","3b270938":"#visualize of fitting model\nresults.plot_diagnostics(figsize = (15, 11))\nplt.show()","b66db71f":"#prediction of close price\ny_pred = results.get_prediction(start = pd.to_datetime('2021-01-01'), dynamic = False)\npred_ci = y_pred.conf_int()\nprint(pred_ci)","48297507":"#visualize prediction of close price\nax = df['2018':].plot(label = 'Observed')\ny_pred.predicted_mean.plot(ax = ax, label = 'One-Step Ahead Forecast', alpha = .7, figsize = (10, 6))\nax.fill_between(pred_ci.index, pred_ci.iloc[:, 0], pred_ci.iloc[:, 1], color = 'k', alpha = .2)\nplt.title(\"Prediction of Close Price\")\nax.set_xlabel('Date')\nax.set_ylabel('Close Price')\nplt.legend()\nplt.show()","51c41093":"#prediction of forecast\ny_forecasted = y_pred.predicted_mean\ny_truth = df['2021-01-01':]\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))\nprint('The Root Mean Squared Error of our forecasts is {}'.format(round(np.sqrt(mse), 2)))","dc5b9a85":"#visualize prediction of forecast\npred_uc = results.get_forecast(steps = 100)\npred_ci = pred_uc.conf_int()\nax = df.plot(label = 'Observed', figsize = (10,6))\npred_uc.predicted_mean.plot(ax = ax, label = 'Forecast')\nax.fill_between(pred_ci.index, pred_ci.iloc[:, 0], pred_ci.iloc[:, 1], color = 'k', alpha = .25)\nplt.title(\"Forecast of Close Price\")\nax.set_xlabel('Date')\nax.set_ylabel('Close Price')\nplt.legend()\nplt.show()","d797ce0a":"# ADF Test\nresult = adfuller(df, autolag = 'AIC')\nprint(f'ADF Statistic: {result[0]}')\nprint(f'p-value: {result[1]}')\nfor key, value in result[4].items():\n    print('Critial Values:')\n    print(f'   {key}, {value}')\n\n# KPSS Test\nresult = kpss(df, regression = 'c')\nprint('\\nKPSS Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\nfor key, value in result[3].items():\n    print('Critial Values:')\n    print(f'   {key}, {value}')","3df0ff52":"## Data Extraction","692ec056":"# Forecast Analysis of Microsoft Stock Price","4bca822e":"## ARIMA Model","8b2eb5b0":"## Time Series Analysis"}}