{"cell_type":{"3480d36d":"code","bee6f038":"code","ce0c7262":"code","d81a5875":"code","bc768708":"code","4884689c":"code","09ef8ae6":"code","043043ee":"code","5fb2baa2":"code","92883c0f":"code","198cef0f":"code","24d4bd58":"code","448baa66":"code","650bce6d":"code","4cfbb8a4":"code","58acff83":"code","48ceda1e":"code","14af8629":"code","f50a171b":"code","af2dc090":"code","63677351":"code","b40b60ac":"code","4b9d4f14":"code","030a3231":"code","267a7c6a":"code","5a293980":"code","16ad5bb3":"code","9cf63dc0":"code","673defe7":"code","5389122c":"code","9149d2ce":"code","f81fe00b":"code","7e50308f":"code","2072862a":"code","2ac32871":"code","1a808c18":"code","6fecc8c4":"code","3dc80248":"code","1a993548":"code","9b7b1348":"code","68d4d563":"code","89ca6070":"code","81b12ea3":"code","e949a91c":"code","e611849b":"code","60cd071c":"code","977294d5":"code","5f09965f":"code","45eac289":"code","3a67fbf7":"markdown","c4332ca5":"markdown","e10be32d":"markdown","18c9055b":"markdown","7ec4c9e3":"markdown","89687cc7":"markdown"},"source":{"3480d36d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport xgboost as xgb\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom xgboost import plot_importance\nfrom catboost import CatBoostRegressor\nfrom matplotlib import pyplot\nimport shap\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nfrom time import time\nfrom tqdm import tqdm_notebook as tqdm\nfrom collections import Counter\nfrom scipy import stats\nimport lightgbm as lgb\nfrom sklearn.metrics import cohen_kappa_score, mean_squared_error\nfrom sklearn.model_selection import KFold, StratifiedKFold\nimport gc\nimport json\npd.set_option('display.max_columns', 1000)","bee6f038":"def eval_qwk_lgb_regr(y_true, y_pred):\n    \"\"\"\n    Fast cappa eval function for lgb.\n    \"\"\"\n    dist = Counter(reduce_train['accuracy_group'])\n    for k in dist:\n        dist[k] \/= len(reduce_train)\n    reduce_train['accuracy_group'].hist()\n    \n    acum = 0\n    bound = {}\n    for i in range(3):\n        acum += dist[i]\n        bound[i] = np.percentile(y_pred, acum * 100)\n\n    def classify(x):\n        if x <= bound[0]:\n            return 0\n        elif x <= bound[1]:\n            return 1\n        elif x <= bound[2]:\n            return 2\n        else:\n            return 3\n\n    y_pred = np.array(list(map(classify, y_pred))).reshape(y_true.shape)\n    return 'cappa', cohen_kappa_score(y_true, y_pred, weights='quadratic'), True","ce0c7262":"def cohenkappa(ypred, y):\n    y = y.get_label().astype(\"int\")\n    ypred = ypred.reshape((4, -1)).argmax(axis = 0)\n    loss = cohenkappascore(y, y_pred, weights = 'quadratic')\n    return \"cappa\", loss, True","d81a5875":"def read_data():\n    print('Reading train.csv file....')\n    train = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train.csv')\n    print('Training.csv file have {} rows and {} columns'.format(train.shape[0], train.shape[1]))\n\n    print('Reading test.csv file....')\n    test = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/test.csv')\n    print('Test.csv file have {} rows and {} columns'.format(test.shape[0], test.shape[1]))\n\n    print('Reading train_labels.csv file....')\n    train_labels = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/train_labels.csv')\n    print('Train_labels.csv file have {} rows and {} columns'.format(train_labels.shape[0], train_labels.shape[1]))\n\n    print('Reading specs.csv file....')\n    specs = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/specs.csv')\n    print('Specs.csv file have {} rows and {} columns'.format(specs.shape[0], specs.shape[1]))\n\n    print('Reading sample_submission.csv file....')\n    sample_submission = pd.read_csv('\/kaggle\/input\/data-science-bowl-2019\/sample_submission.csv')\n    print('Sample_submission.csv file have {} rows and {} columns'.format(sample_submission.shape[0], sample_submission.shape[1]))\n    return train, test, train_labels, specs, sample_submission","bc768708":"def encode_title(train, test, train_labels):\n    # encode title\n    train['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), train['title'], train['event_code']))\n    test['title_event_code'] = list(map(lambda x, y: str(x) + '_' + str(y), test['title'], test['event_code']))\n    all_title_event_code = list(set(train[\"title_event_code\"].unique()).union(test[\"title_event_code\"].unique()))\n\n    train['type_world'] = list(map(lambda x, y: str(x) + '_' + str(y), train['type'], train['world']))\n    test['type_world'] = list(map(lambda x, y: str(x) + '_' + str(y), test['type'], test['world']))\n    all_type_world = list(set(train[\"type_world\"].unique()).union(test[\"type_world\"].unique()))\n\n    # make a list with all the unique 'titles' from the train and test set\n    list_of_user_activities = list(set(train['title'].unique()).union(set(test['title'].unique())))\n\n    # make a list with all the unique 'event_code' from the train and test set\n    list_of_event_code = list(set(train['event_code'].unique()).union(set(test['event_code'].unique())))\n    list_of_event_id = list(set(train['event_id'].unique()).union(set(test['event_id'].unique())))\n\n    # make a list with all the unique worlds from the train and test set\n    list_of_worlds = list(set(train['world'].unique()).union(set(test['world'].unique())))\n\n    # create a dictionary numerating the titles\n    activities_map = dict(zip(list_of_user_activities, np.arange(len(list_of_user_activities))))\n    activities_labels = dict(zip(np.arange(len(list_of_user_activities)), list_of_user_activities))\n    activities_world = dict(zip(list_of_worlds, np.arange(len(list_of_worlds))))\n    assess_titles = list(set(train[train['type'] == 'Assessment']['title'].value_counts().index).union(set(test[test['type'] == 'Assessment']['title'].value_counts().index)))\n\n    # replace the text titles with the number titles from the dict\n    train['title'] = train['title'].map(activities_map)\n    test['title'] = test['title'].map(activities_map)\n    train['world'] = train['world'].map(activities_world)\n    test['world'] = test['world'].map(activities_world)\n    train_labels['title'] = train_labels['title'].map(activities_map)\n    win_code = dict(zip(activities_map.values(), (4100*np.ones(len(activities_map))).astype('int')))\n\n    # then, it set one element, the 'Bird Measurer (Assessment)' as 4110, 10 more than the rest\n    win_code[activities_map['Bird Measurer (Assessment)']] = 4110\n\n    # convert text into datetime\n    train['timestamp'] = pd.to_datetime(train['timestamp'])\n    test['timestamp'] = pd.to_datetime(test['timestamp'])\n    \n    train['hour'] = train['timestamp'].dt.hour\n    test['hour'] = test['timestamp'].dt.hour\n\n    return train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code, activities_map,all_type_world","4884689c":"clip_time = {'Welcome to Lost Lagoon!':19,'Tree Top City - Level 1':17,'Ordering Spheres':61, 'Costume Box':61,\n        '12 Monkeys':109,'Tree Top City - Level 2':25, 'Pirate\\'s Tale':80, 'Treasure Map':156,'Tree Top City - Level 3':26,\n        'Rulers':126, 'Magma Peak - Level 1':20, 'Slop Problem':60, 'Magma Peak - Level 2':22, 'Crystal Caves - Level 1':18,\n        'Balancing Act':72, 'Lifting Heavy Things':118,'Crystal Caves - Level 2':24, 'Honey Cake':142, 'Crystal Caves - Level 3':19,\n        'Heavy, Heavier, Heaviest':61}","09ef8ae6":"# this is the function that convert the raw data into processed features\ndef get_data(user_sample, test_set=False):\n    '''\n    The user_sample is a DataFrame from train or test where the only one \n    installation_id is filtered\n    And the test_set parameter is related with the labels processing, that is only requered\n    if test_set=False\n    '''\n    # Constants and parameters declaration\n    last_activity = 0\n    \n    user_activities_count = {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n    \n    # new features: time spent in each activity\n    last_session_time_sec = 0\n    accuracy_groups = {0:0, 1:0, 2:0, 3:0}\n    all_assessments = []\n    accumulated_accuracy_group = 0\n    accumulated_accuracy = 0\n    accumulated_correct_attempts = 0 \n    accumulated_uncorrect_attempts = 0\n    accumulated_actions = 0\n    counter = 0\n    time_first_activity = float(user_sample['timestamp'].values[0])\n    durations = []\n    clip_durations = []\n    activity_durations = []\n    game_durations = []\n    \n    last_accuracy_title = {'acc_' + title: -1 for title in assess_titles}\n    event_code_count: Dict[str, int] = {ev: 0 for ev in list_of_event_code}\n    event_id_count: Dict[str, int] = {eve: 0 for eve in list_of_event_id}\n    title_count: Dict[str, int] = {eve: 0 for eve in activities_labels.values()} \n    title_event_code_count: Dict[str, int] = {t_eve: 0 for t_eve in all_title_event_code}\n        \n    # last features\n    sessions_count = 0\n    \n    # itarates through each session of one instalation_id\n    for i, session in user_sample.groupby('game_session', sort=True):\n        # i = game_session_id\n        # session is a DataFrame that contain only one game_session\n        \n        # get some sessions information\n        session_type = session['type'].iloc[0]\n        session_title = session['title'].iloc[0]\n        session_title_text = activities_labels[session_title]\n                \n        if session_type == 'Clip':\n            clip_durations.append((clip_time[activities_labels[session_title]]))\n\n        if session_type == 'Activity':\n            activity_durations.append((session.iloc[-1, 2] - session.iloc[0, 2]).seconds)\n\n        if session_type == 'Game':\n            game_durations.append((session.iloc[-1, 2] - session.iloc[0, 2]).seconds)\n\n        # for each assessment, and only this kind off session, the features below are processed\n        # and a register are generated\n        if (session_type == 'Assessment') & (test_set or len(session)>1):\n            # search for event_code 4100, that represents the assessments trial\n            all_attempts = session.query(f'event_code == {win_code[session_title]}')\n            # then, check the numbers of wins and the number of losses\n            true_attempts = all_attempts['event_data'].str.contains('true').sum()\n            false_attempts = all_attempts['event_data'].str.contains('false').sum()\n            # copy a dict to use as feature template, it's initialized with some itens: \n            # {'Clip':0, 'Activity': 0, 'Assessment': 0, 'Game':0}\n            features = user_activities_count.copy()\n            features.update(last_accuracy_title.copy())\n            features.update(event_code_count.copy())\n            features.update(event_id_count.copy())\n            features.update(title_count.copy())\n            features.update(title_event_code_count.copy())\n            features.update(last_accuracy_title.copy())\n            features['installation_session_count'] = sessions_count\n            features['hour'] = session['hour'].iloc[-1]\n            \n            variety_features = [('var_event_code', event_code_count),\n                                ('var_event_id', event_id_count),\n                                ('var_title', title_count),\n                                ('var_title_event_code', title_event_code_count)]\n\n            for name, dict_counts in variety_features:\n                arr = np.array(list(dict_counts.values()))\n                features[name] = np.count_nonzero(arr)\n                 \n            # get installation_id for aggregated features\n            features['installation_id'] = session['installation_id'].iloc[-1]\n            # add title as feature, remembering that title represents the name of the game\n            features['session_title'] = session['title'].iloc[0]\n            # the 4 lines below add the feature of the history of the trials of this player\n            # this is based on the all time attempts so far, at the moment of this assessment\n            features['accumulated_correct_attempts'] = accumulated_correct_attempts\n            features['accumulated_uncorrect_attempts'] = accumulated_uncorrect_attempts\n            accumulated_correct_attempts += true_attempts \n            accumulated_uncorrect_attempts += false_attempts\n\n            # the time spent in the app so far\n            if durations == []:\n                features['duration_mean'] = 0\n                features['duration_std'] = 0\n            else:\n                features['duration_mean'] = np.mean(durations)\n                features['duration_std'] = np.std(durations)\n                \n            if clip_durations == []:\n                features['clip_duration_mean'] = 0\n                features['clip_duration_std'] = 0\n            else:\n                features['clip_duration_mean'] = np.mean(clip_durations)\n                features['clip_duration_std'] = np.std(clip_durations)\n                \n            if activity_durations == []:\n                features['activity_duration_mean'] = 0\n                features['activity_duration_std'] = 0\n            else:\n                features['activity_duration_mean'] = np.mean(activity_durations)\n                features['activity_duration_std'] = np.std(activity_durations)\n                \n            if game_durations == []:\n                features['game_duration_mean'] = 0\n                features['game_duration_std'] = 0\n            else:\n                features['game_duration_mean'] = np.mean(game_durations)\n                features['game_duration_std'] = np.std(game_durations)\n\n            durations.append((session.iloc[-1, 2] - session.iloc[0, 2] ).seconds)\n            # the accurace is the all time wins divided by the all time attempts\n            features['accumulated_accuracy'] = accumulated_accuracy\/counter if counter > 0 else 0\n            accuracy = true_attempts \/ (true_attempts + false_attempts) if (true_attempts + false_attempts) != 0 else 0\n            accumulated_accuracy += accuracy\n            last_accuracy_title['acc_' + session_title_text] = accuracy\n            # a feature of the current accuracy categorized\n            # it is a counter of how many times this player was in each accuracy group\n            if accuracy == 0:\n                features['accuracy_group'] = 0\n            elif accuracy == 1:\n                features['accuracy_group'] = 3\n            elif accuracy == 0.5:\n                features['accuracy_group'] = 2\n            else:\n                features['accuracy_group'] = 1\n            features.update(accuracy_groups)\n            accuracy_groups[features['accuracy_group']] += 1\n            # mean of the all accuracy groups of this player\n            features['accumulated_accuracy_group'] = accumulated_accuracy_group \/ counter if counter > 0 else 0\n            accumulated_accuracy_group += features['accuracy_group']\n            # how many actions the player has done so far, it is initialized as 0 and updated some lines below\n            features['accumulated_actions'] = accumulated_actions\n            \n            # there are some conditions to allow this features to be inserted in the datasets\n            # if it's a test set, all sessions belong to the final dataset\n            # it it's a train, needs to be passed throught this clausule: session.query(f'event_code == {win_code[session_title]}')\n            # that means, must exist an event_code 4100 or 4110\n            if test_set:\n                all_assessments.append(features)\n            elif true_attempts + false_attempts > 0:\n                all_assessments.append(features)\n                \n            counter += 1\n        \n        sessions_count += 1\n        # this piece counts how many actions was made in each event_code so far\n        def update_counters(counter: dict, col: str):\n                num_of_session_count = Counter(session[col])\n                for k in num_of_session_count.keys():\n                    x = k\n                    if col == 'title':\n                        x = activities_labels[k]\n                    counter[x] += num_of_session_count[k]\n                return counter\n\n        event_code_count = update_counters(event_code_count, \"event_code\")\n        event_id_count = update_counters(event_id_count, \"event_id\")\n        title_count = update_counters(title_count, 'title')\n        title_event_code_count = update_counters(title_event_code_count, 'title_event_code')\n\n        # counts how many actions the player has done so far, used in the feature of the same name\n        accumulated_actions += len(session)\n        if last_activity != session_type:\n            user_activities_count[session_type] += 1\n            last_activitiy = session_type\n                        \n    # if it't the test_set, only the last assessment must be predicted, the previous are scraped\n    if test_set:\n        return all_assessments[-1]\n    # in the train_set, all assessments goes to the dataset\n    return all_assessments","043043ee":"def get_train_and_test(train, test):\n    compiled_train = []\n    compiled_test = []\n    for i, (ins_id, user_sample) in tqdm(enumerate(train.groupby('installation_id', sort=True)), total = 17000):\n        compiled_train += get_data(user_sample)\n    for ins_id, user_sample in tqdm(test.groupby('installation_id', sort=True), total = 1000):\n        test_data = get_data(user_sample, test_set = True)\n        compiled_test.append(test_data)\n    reduce_train = pd.DataFrame(compiled_train)\n    reduce_test = pd.DataFrame(compiled_test)\n    categoricals = ['session_title']\n    return reduce_train, reduce_test, categoricals","5fb2baa2":"# read data\ntrain, test, train_labels, specs, sample_submission = read_data()","92883c0f":"# get usefull dict with maping encode\n#train, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code = encode_title(train, test, train_labels)\ntrain, test, train_labels, win_code, list_of_user_activities, list_of_event_code, activities_labels, assess_titles, list_of_event_id, all_title_event_code, activities_map, all_type_world = encode_title(train, test, train_labels)","198cef0f":"# tranform function to get the train and test set\nreduce_train, reduce_test, categoricals = get_train_and_test(train, test)","24d4bd58":"train_class = reduce_train.copy()\ntest_class = reduce_test.copy()","448baa66":"def stract_hists(feature, train=reduce_train, test=reduce_test, adjust=False, plot=False):\n    n_bins = 10\n    train_data = train[feature]\n    test_data = test[feature]\n    if adjust:\n        test_data *= train_data.mean() \/ test_data.mean()\n    perc_90 = np.percentile(train_data, 95)\n    train_data = np.clip(train_data, 0, perc_90)\n    test_data = np.clip(test_data, 0, perc_90)\n    train_hist = np.histogram(train_data, bins=n_bins)[0] \/ len(train_data)\n    test_hist = np.histogram(test_data, bins=n_bins)[0] \/ len(test_data)\n    msre = mean_squared_error(train_hist, test_hist)\n    if plot:\n        print(msre)\n        plt.bar(range(n_bins), train_hist, color='blue', alpha=0.5)\n        plt.bar(range(n_bins), test_hist, color='red', alpha=0.5)\n        plt.show()\n    return msre\nstract_hists('Magma Peak - Level 1_2000', adjust=False, plot=True)","650bce6d":"reduce_train.columns = [\"\".join(c if c.isalnum() else \"_\" for c in str(x)) for x in reduce_train.columns]\nreduce_test.columns = [\"\".join(c if c.isalnum() else \"_\" for c in str(x)) for x in reduce_test.columns]\nreduce_train.columns","4cfbb8a4":"# call feature engineering function\nfeatures = reduce_train.loc[(reduce_train.sum(axis=1) != 0), (reduce_train.sum(axis=0) != 0)].columns # delete useless columns\nfeatures = [x for x in features if x not in ['accuracy_group', 'installation_id']]","58acff83":"counter = 0\nto_remove = []\n# for feat_a in features:\n#     for feat_b in features:\n#         if feat_a != feat_b and feat_a not in to_remove and feat_b not in to_remove:\n#             c = np.corrcoef(reduce_train[feat_a], reduce_train[feat_b])[0][1]\n#             if c > 0.995:\n#                 counter += 1\n#                 to_remove.append(feat_b)\n#                 print('{}: FEAT_A: {} FEAT_B: {} - Correlation: {}'.format(counter, feat_a, feat_b, c))","48ceda1e":"to_exclude = [] \najusted_test = reduce_test.copy()\nfor feature in ajusted_test.columns:\n    if feature not in ['accuracy_group', 'installation_id', 'accuracy_group', 'session_title']:\n        data = reduce_train[feature]\n        train_mean = data.mean()\n        data = ajusted_test[feature] \n        test_mean = data.mean()\n        try:\n            error = stract_hists(feature, adjust=True)\n            ajust_factor = train_mean \/ test_mean\n            if ajust_factor > 10 or ajust_factor < 0.1:# or error > 0.01:\n                to_exclude.append(feature)\n                print(feature, train_mean, test_mean, error)\n            else:\n                ajusted_test[feature] *= ajust_factor\n        except:\n            to_exclude.append(feature)\n            print(feature, train_mean, test_mean)","14af8629":"features = [x for x in features if x not in (to_exclude + to_remove)]\nreduce_train[features].shape","f50a171b":"class Base_Model(object):\n    \n    def __init__(self, train_df, test_df, features, categoricals=[], n_splits=5, verbose=True):\n        self.train_df = train_df\n        self.test_df = test_df\n        self.features = features\n        self.n_splits = n_splits\n        self.categoricals = categoricals\n        self.target = 'accuracy_group'\n        self.cv = self.get_cv()\n        self.verbose = verbose\n        self.params = self.get_params()\n        self.y_pred, self.score, self.model = self.fit()\n        \n    def train_model(self, train_set, val_set):\n        raise NotImplementedError\n        \n    def get_cv(self):\n        cv = StratifiedKFold(n_splits=self.n_splits, shuffle=True, random_state=42)\n        return cv.split(self.train_df, self.train_df[self.target])\n    \n    def get_params(self):\n        raise NotImplementedError\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        raise NotImplementedError\n        \n    def convert_x(self, x):\n        return x\n        \n    def fit(self):\n        oof_pred = np.zeros((len(self.train_df), ))\n        y_pred = np.zeros((len(self.test_df), ))\n        model = None\n        for fold, (train_idx, val_idx) in enumerate(self.cv):\n            x_train, x_val = self.train_df[self.features].iloc[train_idx], self.train_df[self.features].iloc[val_idx]\n            y_train, y_val = self.train_df[self.target][train_idx], self.train_df[self.target][val_idx]\n            train_set, val_set = self.convert_dataset(x_train, y_train, x_val, y_val)\n            model = self.train_model(train_set, val_set)\n            conv_x_val = self.convert_x(x_val)\n            oof_pred[val_idx] = model.predict(conv_x_val).reshape(oof_pred[val_idx].shape)\n            x_test = self.convert_x(self.test_df[self.features])\n            y_pred += model.predict(x_test).reshape(y_pred.shape) \/ self.n_splits\n            print('Partial score of fold {} is: {}'.format(fold, eval_qwk_lgb_regr(y_val, oof_pred[val_idx])[1]))\n        _, loss_score, _ = eval_qwk_lgb_regr(self.train_df[self.target], oof_pred)\n        self.oof_pred = oof_pred\n        if self.verbose:\n            print('Our oof cohen kappa score is: ', loss_score)\n        return y_pred, loss_score, model\n\n    def set_params(self, params):\n        self.params = params\n\n    def retrain(self):\n        self.cv = self.get_cv()\n        self.y_pred, self.score, self.model = self.fit()","af2dc090":"class Lgb_Model(Base_Model):\n    \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        return lgb.train(self.params, train_set, valid_sets=[train_set, val_set], verbose_eval=verbosity)\n    \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = lgb.Dataset(x_train, y_train, categorical_feature=self.categoricals)\n        val_set = lgb.Dataset(x_val, y_val, categorical_feature=self.categoricals)\n        return train_set, val_set\n   \n    def get_params(self):\n        params = {'n_estimators':5000,\n                    'boosting_type': 'gbdt',\n                    'objective': 'regression',\n                    'metric': 'rmse',\n                    'subsample': 0.75,\n                    'subsample_freq': 1,\n                    'learning_rate': 0.01,\n                    'feature_fraction': 0.9,\n                    'max_depth': 15,\n                    'lambda_l1': 1,  \n                    'lambda_l2': 1,\n                    'early_stopping_rounds': 100\n                    }\n        return params","63677351":"class Xgb_Model(Base_Model):\n    \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        return xgb.train(self.params, train_set, \n                         num_boost_round=5000, evals=[(train_set, 'train'), (val_set, 'val')], \n                         verbose_eval=verbosity, early_stopping_rounds=100)\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = xgb.DMatrix(x_train, y_train)\n        val_set = xgb.DMatrix(x_val, y_val)\n        return train_set, val_set\n    \n    def convert_x(self, x):\n        return xgb.DMatrix(x)\n        \n    def get_params(self):\n        params = {'colsample_bytree': 0.8,                 \n            'learning_rate': 0.01,\n            'max_depth': 10,\n            'subsample': 1,\n            'objective':'reg:squarederror',\n            #'eval_metric':'rmse',\n            'min_child_weight':3,\n            'gamma':0.25,\n            'n_estimators':5000}\n\n        return params","b40b60ac":"class Catb_Model(Base_Model):\n    \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        clf = CatBoostRegressor(**self.params)\n        clf.fit(train_set['X'], \n                train_set['y'], \n                eval_set=(val_set['X'], val_set['y']),\n                verbose=verbosity, \n                cat_features=self.categoricals)\n        return clf\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = {'X': x_train, 'y': y_train}\n        val_set = {'X': x_val, 'y': y_val}\n        return train_set, val_set\n        \n    def get_params(self):\n        params = {'loss_function': 'RMSE',\n                   'task_type': \"CPU\",\n                   'iterations': 5000,\n                   'od_type': \"Iter\",\n                    'depth': 10,\n                  'colsample_bylevel': 0.5, \n                   'early_stopping_rounds': 300,\n                    'l2_leaf_reg': 18,\n                   'random_seed': 42,\n                    'use_best_model': True\n                    }\n        return params","4b9d4f14":"import tensorflow as tf\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, OneHotEncoder\n\nclass Nn_Model(Base_Model):\n    \n    def __init__(self, train_df, test_df, features, categoricals=[], n_splits=5, verbose=True):\n        features = features.copy()\n        if len(categoricals) > 0:\n            for cat in categoricals:\n                enc = OneHotEncoder()\n                train_cats = enc.fit_transform(train_df[[cat]])\n                test_cats = enc.transform(test_df[[cat]])\n                cat_cols = ['{}_{}'.format(cat, str(col)) for col in enc.active_features_]\n                features += cat_cols\n                train_cats = pd.DataFrame(train_cats.toarray(), columns=cat_cols)\n                test_cats = pd.DataFrame(test_cats.toarray(), columns=cat_cols)\n                train_df = pd.concat([train_df, train_cats], axis=1)\n                test_df = pd.concat([test_df, test_cats], axis=1)\n        scalar = MinMaxScaler()\n        train_df[features] = scalar.fit_transform(train_df[features])\n        test_df[features] = scalar.transform(test_df[features])\n        print(train_df[features].shape)\n        super().__init__(train_df, test_df, features, categoricals, n_splits, verbose)\n        \n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n        model = tf.keras.models.Sequential([\n            tf.keras.layers.Input(shape=(train_set['X'].shape[1],)),\n            tf.keras.layers.Dense(200, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(0.3),\n            tf.keras.layers.Dense(100, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(0.3),\n            tf.keras.layers.Dense(50, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(0.3),\n            tf.keras.layers.Dense(25, activation='relu'),\n            tf.keras.layers.LayerNormalization(),\n            tf.keras.layers.Dropout(0.3),\n            tf.keras.layers.Dense(1, activation='relu')\n        ])\n        model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=4e-4), loss='mse')\n        print(model.summary())\n        save_best = tf.keras.callbacks.ModelCheckpoint('nn_model.w8', save_weights_only=True, save_best_only=True, verbose=1)\n        early_stop = tf.keras.callbacks.EarlyStopping(patience=20)\n        model.fit(train_set['X'], \n                train_set['y'], \n                validation_data=(val_set['X'], val_set['y']),\n                epochs=100,\n                 callbacks=[save_best, early_stop])\n        model.load_weights('nn_model.w8')\n        return model\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = {'X': x_train, 'y': y_train}\n        val_set = {'X': x_val, 'y': y_val}\n        return train_set, val_set\n        \n    def get_params(self):\n        return None","030a3231":"from random import choice\n\nclass Cnn_Model(Base_Model):\n    \n    def __init__(self, train_df, test_df, features, categoricals=[], n_splits=5, verbose=True):\n        features = features.copy()\n        if len(categoricals) > 0:\n            for cat in categoricals:\n                enc = OneHotEncoder()\n                train_cats = enc.fit_transform(train_df[[cat]])\n                test_cats = enc.transform(test_df[[cat]])\n                cat_cols = ['{}_{}'.format(cat, str(col)) for col in enc.active_features_]\n                features += cat_cols\n                train_cats = pd.DataFrame(train_cats.toarray(), columns=cat_cols)\n                test_cats = pd.DataFrame(test_cats.toarray(), columns=cat_cols)\n                train_df = pd.concat([train_df, train_cats], axis=1)\n                test_df = pd.concat([test_df, test_cats], axis=1)\n        scalar = MinMaxScaler()\n        train_df[features] = scalar.fit_transform(train_df[features])\n        test_df[features] = scalar.transform(test_df[features])\n        self.create_feat_2d(features)\n        super().__init__(train_df, test_df, features, categoricals, n_splits, verbose)\n        \n    def create_feat_2d(self, features, n_feats_repeat=50):\n        self.n_feats = len(features)\n        self.n_feats_repeat = n_feats_repeat\n        self.mask = np.zeros((self.n_feats_repeat, self.n_feats), dtype=np.int32)\n        for i in range(self.n_feats_repeat):\n            l = list(range(self.n_feats))\n            for j in range(self.n_feats):\n                c = l.pop(choice(range(len(l))))\n                self.mask[i, j] = c\n        self.mask = tf.convert_to_tensor(self.mask)\n        print(self.mask.shape)\n\n    def train_model(self, train_set, val_set):\n        verbosity = 100 if self.verbose else 0\n\n        inp = tf.keras.layers.Input(shape=(self.n_feats))\n        x = tf.keras.layers.Lambda(lambda x: tf.gather(x, self.mask, axis=1))(inp)\n        x = tf.keras.layers.Reshape((self.n_feats_repeat, self.n_feats, 1))(x)\n        x = tf.keras.layers.Conv2D(18, (50, 50), strides=50, activation='relu')(x)\n        x = tf.keras.layers.Flatten()(x)\n        #x = tf.keras.layers.Dense(200, activation='relu')(x)\n        #x = tf.keras.layers.LayerNormalization()(x)\n        #x = tf.keras.layers.Dropout(0.3)(x)\n        x = tf.keras.layers.Dense(100, activation='relu')(x)\n        x = tf.keras.layers.LayerNormalization()(x)\n        x = tf.keras.layers.Dropout(0.3)(x)\n        x = tf.keras.layers.Dense(50, activation='relu')(x)\n        x = tf.keras.layers.LayerNormalization()(x)\n        x = tf.keras.layers.Dropout(0.3)(x)\n        out = tf.keras.layers.Dense(1)(x)\n        \n        model = tf.keras.Model(inp, out)\n    \n        model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=1e-4), loss='mse')\n        print(model.summary())\n        save_best = tf.keras.callbacks.ModelCheckpoint('nn_model.w8', save_weights_only=True, save_best_only=True, verbose=1)\n        early_stop = tf.keras.callbacks.EarlyStopping(patience=20)\n        model.fit(train_set['X'], \n                train_set['y'], \n                validation_data=(val_set['X'], val_set['y']),\n                epochs=100,\n                 callbacks=[save_best, early_stop])\n        model.load_weights('nn_model.w8')\n        return model\n        \n    def convert_dataset(self, x_train, y_train, x_val, y_val):\n        train_set = {'X': x_train, 'y': y_train}\n        val_set = {'X': x_val, 'y': y_val}\n        return train_set, val_set\n        \n    def get_params(self):\n        return None","267a7c6a":"#cat_model = Catb_Model(reduce_train, ajusted_test, features, categoricals=categoricals)\nlgb_model = Lgb_Model(reduce_train, ajusted_test, features, categoricals=categoricals)\nxgb_model = Xgb_Model(reduce_train, ajusted_test, features, categoricals=categoricals)","5a293980":"# cnn_model = Cnn_Model(reduce_train, ajusted_test, features, categoricals=categoricals)\n# nn_model = Nn_Model(reduce_train, ajusted_test, features, categoricals=categoricals)","16ad5bb3":"# import warnings\n# warnings.filterwarnings(\"ignore\")\n# from bayes_opt import BayesianOptimization\n# def LGB_bayesian(max_depth,\n#                  lambda_l1,\n#                  lambda_l2,\n#                  subsample_fraction,\n#                  subsample_freq,\n#                  colsample_bytree,\n#                  learning_rate):\n#     params = {'n_estimators':2000,\n#             'boosting_type': 'gbdt',\n#             'objective': 'regression',\n#             'metric': 'rmse',\n#             'subsample': subsample_fraction,  #0.75,\n#             'subsample_freq': int(subsample_freq), #1,\n#             'learning_rate': learning_rate,\n#             'feature_fraction': 0.9,\n#             'max_depth': int(max_depth),\n#             'lambda_l1': lambda_l1,  \n#             'lambda_l2': lambda_l2,\n#             'colsample_bytree': colsample_bytree,\n#             'early_stopping_rounds': 150\n#             }\n#     lgb_model.set_params(params)\n#     lgb_model.retrain()\n#     return lgb_model.score","9cf63dc0":"# bounds_LGB = {\n#     'max_depth': (10, 14),\n#     'lambda_l1': (0, 10),\n#     'lambda_l2': (0, 10),\n#     'subsample_fraction': (0.7, 1),\n#     'subsample_freq': (1, 10),\n#     'colsample_bytree': (0.7, 1),\n#     'learning_rate': (0.06, 0.24)\n# }","673defe7":"# lgb_model.get_cv()","5389122c":"# init_points = 16\n# n_iter = 16","9149d2ce":"# LGB_BO = BayesianOptimization(LGB_bayesian, bounds_LGB, random_state=1029)\n# with warnings.catch_warnings():\n#     warnings.filterwarnings('ignore')\n#     LGB_BO.maximize(init_points=init_points, n_iter=n_iter, acq='ucb', xi=0.0, alpha=1e-6)","f81fe00b":"# params = {'n_estimators':2000,\n#         'boosting_type': 'gbdt',\n#         'objective': 'regression',\n#         'metric': 'rmse',\n#         'subsample': LGB_BO.max['params']['subsample_fraction'],  #0.75,\n#         'subsample_freq': int(LGB_BO.max['params']['subsample_freq']), #1,\n#         'learning_rate': LGB_BO.max['params']['learning_rate'],\n#         'feature_fraction': 0.9,\n#         'max_depth': int(LGB_BO.max['params']['max_depth']),\n#         'lambda_l1': LGB_BO.max['params']['lambda_l1'],  \n#         'lambda_l2': LGB_BO.max['params']['lambda_l2'],\n#         'colsample_bytree': LGB_BO.max['params']['colsample_bytree'],\n#         'early_stopping_rounds': 150\n#         }\n\n# lgb_model.set_params(params)\n# lgb_model.retrain()","7e50308f":"session_title1 = reduce_train['session_title'].value_counts().index[0]\nsession_title2 = reduce_train['session_title'].value_counts().index[1]\nsession_title3 = reduce_train['session_title'].value_counts().index[2]\nsession_title4 = reduce_train['session_title'].value_counts().index[3]\nsession_title5 = reduce_train['session_title'].value_counts().index[4]\n\nreduce_train['session_title'] = reduce_train['session_title'].replace({session_title1:0,session_title2:1,session_title3:2,session_title4:3,session_title5:4})\nreduce_test['session_title'] = reduce_test['session_title'].replace({session_title1:0,session_title2:1,session_title3:2,session_title4:3,session_title5:4})","2072862a":"for col in reduce_train.columns:\n    if type(col) != str:\n        reduce_train = reduce_train.rename(columns={col:str(col)})\n        reduce_test = reduce_test.rename(columns={col:str(col)})\n\ncol_order = sorted(reduce_train.columns)\nreduce_train = reduce_train.ix[:,col_order]\nreduce_test = reduce_test.ix[:,col_order]","2ac32871":"cols_to_drop = ['game_session', 'installation_id', 'timestamp', 'accuracy_group', 'timestampDate']\ntarget_enc_cols = ['session_title','Game']\ncategoricals = ['session_title']","1a808c18":"clparams   = {'n_estimators':2000,\n            'boosting_type': 'gbdt',\n            'objective': 'binary',\n            'metric': 'auc',\n            'subsample': 0.75,\n            'subsample_freq': 1,\n            'learning_rate': 0.04,\n            'feature_fraction': 0.9,\n            'max_depth': 15,\n            'lambda_l1': 1,  \n            'lambda_l2': 1,\n            'verbose': 100,\n            'early_stopping_rounds': 100, \n            'bagging_fraction_seed': 127,\n            'feature_fraction_seed': 127,\n            'data_random_seed': 127,\n            'seed':127\n            }","6fecc8c4":"from sklearn.model_selection import StratifiedKFold, KFold, RepeatedKFold, GroupKFold, GridSearchCV, train_test_split, TimeSeriesSplit, RepeatedStratifiedKFold\nimport time\nfrom sklearn.metrics import accuracy_score,f1_score,roc_auc_score\nn_fold = 5\nfolds = GroupKFold(n_splits=n_fold)\nX = reduce_train.copy()\ncl_y = reduce_train['accuracy_group'].copy()\n# cl_y.loc[cl_y>0]=1\ncols_to_drop = ['installation_id','accuracy_group']\ncl_oof = np.zeros(len(reduce_train))\nmodels = []\nfor fold_n, (train_index, valid_index) in enumerate(folds.split(X, cl_y, X['installation_id'])):\n    print('Fold {} started at {}'.format(fold_n+1,time.ctime()))\n    X_train, X_valid = X.iloc[train_index], X.iloc[valid_index]\n    y_train, y_valid = cl_y.iloc[train_index], cl_y.iloc[valid_index]\n    \n    X_train = X_train.drop(cols_to_drop,axis=1)\n    X_valid = X_valid.drop(cols_to_drop,axis=1)\n    \n    trn_data = lgb.Dataset(X_train,label=y_train)\n    val_data = lgb.Dataset(X_valid,label=y_valid)\n    \n    cl_lgb_model = lgb.train(clparams,\n                        trn_data,\n                        valid_sets=[trn_data,val_data],\n                        verbose_eval=100,\n                        categorical_feature = categoricals\n                        )\n    pred = cl_lgb_model.predict(X_valid)\n    models.append(cl_lgb_model)\n    cl_oof[valid_index] = pred","3dc80248":"# print('cappe ',roc_auc_score(cl_y,cl_oof))\n_, loss_score, _ = eval_qwk_lgb_regr(cl_y, cl_oof)\nprint('Our oof cohen kappa score is: ', loss_score)","1a993548":"def cl_predict(test,models):\n    all_ans = np.zeros((len(test)))\n    cols_to_drop = ['installation_id','accuracy_group']\n    test_copy = test.drop(cols_to_drop,axis=1)\n    for model in models:\n        ans = model.predict(test_copy)\n        all_ans += ans\n        \n    return all_ans\/n_fold","9b7b1348":"def cl_predict(test, models):\n    all_ans = np.zeros((len(test)))\n    cols_to_drop = ['installation_id','accuracy_group']\n    test_copy = test.drop(cols_to_drop,axis=1)\n    for model in models:\n        ans = model.predict(test_copy)\n        all_ans += ans\n        \n    return all_ans\/n_fold","68d4d563":"class_pred = cl_predict(reduce_test, models)","89ca6070":"def Weight_Bayesian(w_lgb):\n    w_xgb = 1.0 - w_lgb\n    combine_oof_pred = w_lgb * lgb_model.oof_pred + w_xgb * xgb_model.oof_pred\n    score = eval_qwk_lgb_regr(reduce_train['accuracy_group'], combine_oof_pred)\n    print('weighted score equals {}'.format(score))\n    return score","81b12ea3":"def random_search(start, end, step=0.1):\n    itera = 0\n    max_w = start\n    max_score = Weight_Bayesian(max_w)\n    while start <= end:\n        print('step {}'.format(itera))\n        score = Weight_Bayesian(start)\n        if score > max_score:\n            max_w = start\n            max_score = score\n        start += step\n        itera += 1\n    print('max weight: lgb{} xgb{}'.format(max_w, 1 - max_w))\n    print('max weighted score equals {}'.format(score))\n    return max_w\n    \nw_lgb = random_search(0.0, 1.0, step=0.01)","e949a91c":"rg_oof = w_lgb * lgb_model.oof_pred + (1 - w_lgb) * xgb_model.oof_pred","e611849b":"# weights = {'lbg': 0.78, 'cat': 0, 'xgb': 0.22, 'nn': 0}\nweights = {'lbg': w_lgb, 'cat': 0, 'xgb': 1 - w_lgb, 'nn': 0}\n\n# final_pred = (lgb_model.y_pred * weights['lbg']) + (xgb_model.y_pred * weights['xgb']) + (nn_model.y_pred * weights['nn'])\nfinal_pred = (lgb_model.y_pred * weights['lbg']) + (xgb_model.y_pred * weights['xgb'])\nprint(final_pred.shape)","60cd071c":"def Weight_Rgs(w_rgs):\n    w_cls = 1.0 - w_rgs\n    combine_oof_pred = w_rgs * rg_oof + w_cls * cl_oof\n    score = eval_qwk_lgb_regr(reduce_train['accuracy_group'], combine_oof_pred)\n    print('weighted score equals {}'.format(score))\n    return score","977294d5":"def random_search(start, end, step=0.1):\n    itera = 0\n    max_w = start\n    max_score = Weight_Rgs(max_w)\n    while start <= end:\n        print('step {}'.format(itera))\n        score = Weight_Rgs(start)\n        if score > max_score:\n            max_w = start\n            max_score = score\n        start += step\n        itera += 1\n    print('max weight: regression{} classification{}'.format(max_w, 1 - max_w))\n    print('max weighted score equals {}'.format(score))\n    return max_w\n\nw_rgs = random_search(0.0, 1.0, step=0.01)","5f09965f":"final_pred = w_rgs * final_pred + (1 - w_rgs) * class_pred","45eac289":"dist = Counter(reduce_train['accuracy_group'])\nfor k in dist:\n    dist[k] \/= len(reduce_train)\nreduce_train['accuracy_group'].hist()\n\nacum = 0\nbound = {}\nfor i in range(3):\n    acum += dist[i]\n    bound[i] = np.percentile(final_pred, acum * 100)\nprint(bound)\n\ndef classify(x):\n    if x <= bound[0]:\n        return 0\n    elif x <= bound[1]:\n        return 1\n    elif x <= bound[2]:\n        return 2\n    else:\n        return 3\n    \nfinal_pred = np.array(list(map(classify, final_pred)))\n\nsample_submission['accuracy_group'] = final_pred.astype(int)\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission['accuracy_group'].value_counts(normalize=True)","3a67fbf7":"# Feature Engine","c4332ca5":"# Prediction","e10be32d":"# Objective\n\n* In the last notebook we create our baseline model including a feature selection part. \n* Cohen cappa score of 0.456 (lb) with a local cv score of 0.529\n* In this notebook we are going to add more features and remove others that i think they overfitt the train set and then check if our local cv score improve.\n* Next, we will check if this improvement aligns with the lb.","18c9055b":" # Models","7ec4c9e3":"# Notes\n* Check the distribution of the target variable of the out of folds score and the prediction distribution. A good model should more or less have the same distribution.","89687cc7":"> # Data Process"}}