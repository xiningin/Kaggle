{"cell_type":{"e7a7252a":"code","2242cc7d":"code","9da231df":"code","e9c81275":"code","5b91cbbe":"code","8bd6bde9":"code","7e1c8079":"code","9957da2f":"code","7d9f65d0":"markdown"},"source":{"e7a7252a":"import tensorflow as tf\nimport tensorflow.contrib.layers as layers\nimport numpy as np\nimport random\nfrom tensorflow.examples.tutorials.mnist import input_data\nmnist = input_data.read_data_sets(\"\/data\/mnist\", one_hot = True) #load mnist\nfrom skimage.transform import *\nfrom skimage.util import *","2242cc7d":"## Folowing functions are for data augmentation\ndef random_crop(img):\n    x=np.pad(img.reshape(28,28),(5,5),mode='constant') #pads (28,28) image with pad_width 5. So OUTOUT_SHAPE=(38,38)   \n    a=random.randint(0,10) #random integer between (0,OUTPUT_SHAPE-input_shape) i.e. 38-28 = 10\n    b=random.randint(0,10) #random integer between (0,OUTPUT_SHAPE-input_shape) i.e. 38-28 = 10\n    return x[a:a+28,b:b+28]#randomly selects (28,28) patch from (38,38) padded image \ndef random_rot(img,angle=30):\n    ang=np.random.uniform(-30,30,1) #randomly selects angle from -30\u00b0 to +30\u00b0\n    return rotate(img.reshape(28,28),ang) #rotates image at selected angle\ndef rand_noise(img):\n    return img.reshape(28,28)+np.random.normal(0,0.05,size=(28,28)) #adds random gaussian noise\ntrain_=list(mnist.train.images.reshape(-1,28,28))\nlabels_=list(mnist.train.labels)","9da231df":"for i in [random_crop,random_rot]:\n    a=random.sample(range(0,55000),22500*2) #randomly selects 45000 integers from (0,len(train_)) range\n    #looping through selected integers\n    for j in a:\n        train_.append(i(mnist.train.images[j])) #applying function and appending to training set\n        labels_.append(mnist.train.labels[j])","e9c81275":"#Main Tensorflow model\ndef model(x):\n    x =  layers.conv2d(x,32*2,(3,3),padding='VALID',activation_fn=None) #conv2d from tensorflow.contrib.layers\n    x =  tf.nn.relu(layers.batch_norm(x))                               #batch_norm from tensorflow.contrib.layers\n    x =  layers.conv2d(x,64*2,(3,3),padding='VALID',activation_fn=None) \n    x =  tf.nn.relu(layers.batch_norm(x))\n    x =  layers.max_pool2d(x,2)                                        #max_pool2d from tensorflow.contrib.layers\n  \n    x =  layers.conv2d(x,64*2,(3,3),padding='SAME',activation_fn=None)\n    x =  tf.nn.relu(layers.batch_norm(x))\n    x =  layers.conv2d(x,128*2,(3,3),padding='SAME',activation_fn=None)\n    x =  tf.nn.relu(layers.batch_norm(x))\n  \n    x =  layers.max_pool2d(x,2)\n  \n    x =  layers.conv2d(x,128*2,(3,3),padding='VALID',activation_fn=None)\n    x =  tf.nn.relu(layers.batch_norm(x))\n    x =  layers.conv2d(x,256*2,(3,3),padding='VALID',activation_fn=None)\n    x =  tf.nn.relu(layers.batch_norm(x))\n      \n    x =  layers.max_pool2d(x,2)\n   \n    x =  layers.flatten(x) #flattening\n   \n    x =  layers.fully_connected(x,64,activation_fn=None)  #fully_connected from tensorflow.contrib.layers\n    x =  tf.nn.relu(layers.batch_norm(x))\n  \n    x =  layers.fully_connected(x,10,activation_fn=None)  \n    x =  tf.nn.softmax(layers.batch_norm(x))\n    return x                                              #predicted output tensor of shape (batch_size,10)\n\n#batch size\nbatch=200\n#create placeholders\nx = tf.placeholder(tf.float32, shape=(None, 28, 28,1))\ny = tf.placeholder(tf.int32,shape=(None,10))\n# y_=tf.one_hot(y,10)[:,-1,:]\n#I used 9 CNNs\nmodels=[model(x) for _ in range(9)]\ny_pred=tf.reduce_mean(models,0) #reduce_sum at axis=0 and output shape is (batch_size,10)\n\nloss=tf.reduce_mean(tf.losses.softmax_cross_entropy(y,logits=y_pred))\nopt=tf.train.AdamOptimizer().minimize(loss)\n\ncorrect_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_pred, 1))","5b91cbbe":"sess=tf.Session()\nsess.run(tf.global_variables_initializer())","8bd6bde9":"epoch=0\nk=0\nbatch=200\nfor i in range(int(len(train_)\/batch*15)):\n    if k>=len(train_):\n        epoch+=1\n        k=0\n    x_=np.array(train_[k:k+batch])\n    y_=np.array(labels_[k:k+batch])\n    sess.run(opt,{x:x_.reshape(-1,28,28,1),y:y_})\n    k+=batch\n    if i%72.5==0:\n        print(\"EPOCH: \",i\/725)","7e1c8079":"import pandas as pd\ncsv=pd.read_csv(\"..\/input\/test.csv\")\ntest=[list(csv.iloc[i]) for i in range(len(csv))]\nlabel=[]\nfor i in range(140):\n    label.extend(np.argmax(sess.run(y_pred,{x:np.reshape(test[i*200:(i+1)*200],(-1,28,28,1))\/255}),1))","9957da2f":"csv=pd.DataFrame({'ImageId':range(1,28001),'Label':label})\ncsv.to_csv(\"submission.csv\",index=False)","7d9f65d0":"In this cell we loop through fuctions for data augmentation"}}