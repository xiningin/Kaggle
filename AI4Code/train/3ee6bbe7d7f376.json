{"cell_type":{"1e081796":"code","1ae452f9":"code","18337255":"code","934bd800":"code","ae931286":"code","6d2757df":"code","fc5ff832":"code","d221b895":"code","216516e4":"code","12420ecf":"code","274b0ffd":"code","668a3084":"code","c2039d6b":"code","b38336a5":"code","c4c3a333":"code","cedd2b6b":"code","7f7e9acc":"code","b65382f0":"code","57352216":"code","cfe992ce":"code","a52c8d55":"code","94f22903":"code","66b5bff9":"code","1b4c6fde":"code","e0c312d5":"code","6e0b4569":"code","28aee660":"code","8b70558a":"code","29722c20":"code","23fef305":"code","ab19fc94":"code","72645499":"code","1da32ce0":"code","201ae4db":"code","00c73c5d":"code","e079e8d0":"code","55edead5":"code","989e165a":"code","d4f7edee":"code","2a745b8b":"code","ace83e0f":"code","be858a5e":"code","07a980b3":"code","27a58539":"code","1055ecc8":"code","51276e0d":"code","c4ff42b3":"code","010c7797":"code","3ebeea3d":"code","ccf5afa4":"code","a55105d1":"code","d85f25ad":"code","7465af7e":"code","ed8a1c0f":"code","1302c365":"code","2e64a69c":"code","dc362a93":"code","6c0ec692":"code","5aff79fb":"code","f74cb3da":"code","943c1d98":"code","e12727aa":"code","fe6af889":"code","2fa1159a":"code","55704b2c":"code","5db53e15":"code","17967ae5":"code","13094862":"code","fb3e1268":"code","87bf7c12":"code","d2fdae2e":"code","66d500ba":"code","7cdb76a8":"code","5e6c4712":"code","7beb37bc":"code","39b8f08b":"code","34c9189b":"code","6912882d":"markdown","444edeea":"markdown","301c0f6c":"markdown","d351efb0":"markdown","d060c018":"markdown","c400da48":"markdown","7fe52197":"markdown","ad950ab4":"markdown","3a85e8eb":"markdown","80a6b300":"markdown","0c685fba":"markdown","5f1e7490":"markdown","70362500":"markdown","b06af6ec":"markdown","9e0d07b4":"markdown","822f63bc":"markdown","14c0f349":"markdown","f645bf17":"markdown","32c78e51":"markdown"},"source":{"1e081796":"\"\"\" id: unique identifier\n2) gender: \"Male\", \"Female\" or \"Other\"\n3) age: age of the patient\n4) hypertension: 0 if the patient doesn't have hypertension, 1 if the patient has hypertension\n5) heart_disease: 0 if the patient doesn't have any heart diseases, 1 if the patient has a heart disease\n6) ever_married: \"No\" or \"Yes\"\n7) work_type: \"children\", \"Govt_jov\", \"Never_worked\", \"Private\" or \"Self-employed\"\n8) Residence_type: \"Rural\" or \"Urban\"\n9) avg_glucose_level: average glucose level in blood\n10) bmi: body mass index\n11) smoking_status: \"formerly smoked\", \"never smoked\", \"smokes\" or \"Unknown\"*\n12) stroke: 1 if the patient had a stroke or 0 if not\n*Note: \"Unknown\" in smoking_status means that the information is unavailable for this patient\"\"\"","1ae452f9":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n\nimport warnings\nwarnings.simplefilter(\"ignore\")","18337255":"df= pd.read_csv(\"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\")","934bd800":"df.head(5)","ae931286":"#Code to find numeric data\nnumeric_data = df.select_dtypes(include = np.number)\nnumeric_col = numeric_data.columns\nnumeric_data.head(1)","6d2757df":"#code to find categorical data\ncategorical_data = df.select_dtypes(exclude= np.number)\ncategorical_col = categorical_data.columns\ncategorical_data.head(1)","fc5ff832":"#check how many unique categories each column has\nfor col in df.columns:\n  print(col, ':', len(df[col].unique()), 'categories')","d221b895":"plt.title('Missing Value Status',fontweight='bold')\nax = sns.heatmap(df.isna().sum().to_frame(),annot=True,fmt='d',cmap=\"BuPu\")\nax.set_xlabel('Amount Missing')\nplt.show()","216516e4":"#Just for learning purpose. Actually not needed.\n\nbmi_percent_null = (df['bmi'].isna().sum() \/ df.shape[0]) * 100\nbmi_percent_null","12420ecf":"df['bmi'] = df['bmi'].fillna(df['bmi'].mean())","274b0ffd":"df.shape","668a3084":"df.describe()","c2039d6b":"df.info()","b38336a5":"df.isnull().sum()","c4c3a333":"df['age'].min()  ","cedd2b6b":"sns.countplot(df['gender'])\ndf['gender'].value_counts()","7f7e9acc":"df.columns","b65382f0":"sns.distplot(df['age'], bins=100);\ndf['age'].value_counts()\n","57352216":"sns.countplot(df['smoking_status']);\ndf['smoking_status'].value_counts()","cfe992ce":"sns.countplot(df['ever_married']);\ndf['ever_married'].value_counts()","a52c8d55":"sns.countplot(df['Residence_type']);\ndf['Residence_type'].value_counts()","94f22903":"sns.countplot(df['work_type']);\ndf['work_type'].value_counts()","66b5bff9":"sns.countplot(df['hypertension']);\n","1b4c6fde":"\n#For bmi","e0c312d5":"plt.figure(figsize=(10,7))\nsns.boxplot(data=df,x=df[\"bmi\"],color='green');","6e0b4569":"def outliers(df, variable, distance):\n     IQR = df[variable].quantile(0.75) - df[variable].quantile(0.25)\n     lower_boundary = df[variable].quantile(0.25) - (IQR * distance)\n     upper_boundary = df[variable].quantile(0.75) + (IQR * distance) \n        \n     return upper_boundary, lower_boundary\n","28aee660":"upper_limit, lower_limit = outliers(df, \"bmi\", 1.5)\nupper_limit, lower_limit","8b70558a":"outliers_bmi=df.loc[df['bmi']>50]\noutliers_bmi['bmi'].shape","29722c20":"#so bmi with outlier\noutliers_bmi['stroke'].value_counts()\n","23fef305":"#Applying lambda function to fill bmi to 50 when bmi given is greater than 50 else same.\n\n\n\n\ndf[\"bmi\"] = df[\"bmi\"].apply(lambda x: 50 if x>50 else x)\n\n# null values in BMI (replaced with mean) \ndf[\"bmi\"] = df[\"bmi\"].fillna(df['bmi'].mean())\n","ab19fc94":"sns.boxplot(data=df,x=df[\"bmi\"],color='green');","72645499":"plt.figure(figsize=(7,7))\ndf['stroke'].value_counts().plot.pie(autopct='%1.1f%%', colors = ['grey', 'b'])\nplt.title(\"Stroke status\", fontdict={'fontsize': 14})\n\ndf[\"stroke\"].value_counts()","1da32ce0":"sns.countplot(df['heart_disease']);\ndf['heart_disease'].value_counts()","201ae4db":"sns.lineplot(x='age', y='stroke', data=df)","00c73c5d":"plt.subplot(1,2,2)\nsns.countplot(df['gender'], hue= df['stroke'])","e079e8d0":"\nsns.countplot(df['hypertension'], hue= df['stroke'])","55edead5":"plt.subplot(1,2,2)\nsns.countplot(df['heart_disease'], hue= df['stroke'])","989e165a":"plt.subplot(1,2,2)\nsns.countplot(df['ever_married'], hue= df['stroke'])\n\ndf['ever_married'].value_counts()","d4f7edee":"sns.countplot(x=\"work_type\", hue= df['stroke'], data=df)","2a745b8b":"sns.countplot(x=\"Residence_type\", hue= df['stroke'], data=df)","ace83e0f":"\"\"\"\"Observations\n\n1.Females are more prone to have a stroke.\n2.More than 25% of stroke case patients have hypertension.\n3.Very few cases of people who have a heart disease have had a stroke.\n4.Most of the patients who have a stroke were married.\n5.Doing private work increases chances of having a stroke. Those who have never worked barely have experienced a stroke.\n6.The type of residence did not impact the chances of having a stroke.\n7.Being a smoker or a former smoker increases your risk of having a stroke.","be858a5e":"df.head(5)","07a980b3":"categorical_variable= df.select_dtypes(include=['object']).columns.tolist()","27a58539":"categorical_variable","1055ecc8":"print(\"Gender\", df['gender'].unique())\nprint(\"Ever_married\",df['ever_married'].unique())\nprint(\"worktype\",df['work_type'].unique())\nprint(\"residence_type\", df['Residence_type'].unique())\nprint(\"smaokingstatus\", df['smoking_status'].unique())","51276e0d":"from sklearn import preprocessing \nle = preprocessing.LabelEncoder()\ndf['gender'] = le.fit_transform(df['gender'])\ndf['ever_married'] = le.fit_transform(df['ever_married'])\ndf['work_type'] = le.fit_transform(df['work_type'])\ndf['Residence_type'] = le.fit_transform(df['Residence_type'])\ndf['smoking_status'] = le.fit_transform(df['smoking_status'])\n","c4ff42b3":"#So label encoding is done","010c7797":"df.head()","3ebeea3d":"from sklearn.preprocessing import StandardScaler\n\ns=StandardScaler()\ncolumns = ['avg_glucose_level','bmi','age']\nstand_scaled = s.fit_transform(df[['avg_glucose_level','bmi','age']])\nstand_scaled = pd.DataFrame(stand_scaled,columns=columns)\n\ndf=df.drop(columns=columns,axis=1)","ccf5afa4":"stand_scaled.head()","a55105d1":"#Now add scaled to df","d85f25ad":"df = pd.concat([df, stand_scaled], axis=1)\ndf.head(5)","7465af7e":"#lets drop id","ed8a1c0f":"df=df.drop(columns='id',axis=1)","1302c365":"from sklearn.model_selection import train_test_split","2e64a69c":"X=df.drop(['stroke'], axis=1)\ny=df['stroke']","dc362a93":"X_train,X_test,y_train,y_test = train_test_split(X, y, random_state = 0)","6c0ec692":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report\n\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state= 124)\n\nmodel= DecisionTreeClassifier()\nmodel.fit(X_train, y_train)","5aff79fb":"prediction = model.predict(X_test)","f74cb3da":"from sklearn.metrics import classification_report, confusion_matrix\nprint (confusion_matrix(y_test, prediction))\n","943c1d98":"print (classification_report (y_test, prediction))","e12727aa":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test, prediction)","fe6af889":"from sklearn.linear_model import LogisticRegression\nloj = LogisticRegression(solver = \"liblinear\")\nloj_model = loj.fit(X_train,y_train)\nloj_model","2fa1159a":"y_pred_loj = loj_model.predict(X_test)","55704b2c":"from sklearn.metrics import confusion_matrix, accuracy_score, classification_report","5db53e15":"accuracy_score(y_test, y_pred_loj)","17967ae5":"print(\"Training Accuracy :\", loj_model.score(X_train, y_train))\nprint(\"Testing Accuracy :\", loj_model.score(X_test, y_test))","13094862":"print(classification_report(y_test, y_pred_loj))","fb3e1268":"from xgboost import XGBClassifier\nimport xgboost as xgb\nxgb_model = XGBClassifier().fit(X_train, y_train)","87bf7c12":"y_pred_xgb_model = xgb_model.predict(X_test)\naccuracy_score(y_test, y_pred_xgb_model)","d2fdae2e":"print(classification_report(y_test, y_pred_xgb_model))","66d500ba":"print (confusion_matrix(y_test, y_pred_xgb_model))","7cdb76a8":"from xgboost import XGBClassifier\n# Model Tuning\nXGB_model = XGBClassifier(random_state = 42, max_depth = 8, n_estimators = 3000, \n                          reg_lambda = 1.2, reg_alpha = 1.2, \n                          min_child_weight = 1,objective = 'binary:logistic',\n                         learning_rate = 0.15, gamma = 0.3, colsample_bytree = 0.5,\n                          eval_metric = 'auc').fit(X_train, y_train)","5e6c4712":"y_pred_XGB_model = XGB_model.predict(X_test)\naccuracy_score(y_test, y_pred_XGB_model)","7beb37bc":"feat_importances = pd.Series(xgb_model.feature_importances_, index=X_train.columns)\nfeat_importances.nlargest(10).plot(kind='barh')\n#feat_importances.nsmallest(20).plot(kind='barh')\nplt.show()","39b8f08b":"print(classification_report(y_test, y_pred_XGB_model))","34c9189b":"models = [\n    model,\n    xgb_model,\n    loj_model,\n      \n]\n\nfor model in models:\n    names = model.__class__.__name__\n    y_pred = model.predict(X_test)\n    accuracy = accuracy_score(y_test, y_pred)\n    print(\"-\"*28)\n    print(names + \":\" )\n    print(\"Accuracy: {:.4%}\".format(accuracy))","6912882d":"People between the age of 60 and 80 has the high chance of getting stroke","444edeea":"![](http:\/\/)","301c0f6c":"People with no heart disease has very high chance of not receiving a stroke.","d351efb0":"###According to the National Institutes of Health (NIH): A BMI of less than 18.5 means that a person is underweight. A BMI of between 18.5 and 24.9 is ideal. A BMI of between 25 and 29.9 is overweight.","d060c018":"There is no much difference in people who may receive or not receive depending on their residence type that is Rural or Urban.","c400da48":"XG Boost","7fe52197":"logistic regression","ad950ab4":"#Modelling","3a85e8eb":"Standard scalar","80a6b300":"#Data Preprocessing","0c685fba":"###Outlier detection","5f1e7490":"Only 4.9% of people had stroke","70362500":"201 missing rows in bmi feature","b06af6ec":"Label Encoding","9e0d07b4":"Unmarried people has less chance of getting stroke ","822f63bc":"###The conversion of categorical data into numerical data is called Categorical Encoding.","14c0f349":"Decision Tree","f645bf17":"People who never smoked holds the maximum count","32c78e51":"Doubt: Should we consider this age?"}}