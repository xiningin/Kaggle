{"cell_type":{"907fee19":"code","39e0fd85":"code","430cc231":"code","20a1d7fd":"code","765c1856":"code","52d145c5":"code","9dce7e73":"code","010b8d40":"code","badd3c2c":"code","c951fe23":"code","7dbec431":"code","fad3ce73":"code","7d317d32":"code","d8a8ee13":"code","20989265":"code","1189e554":"code","c817de67":"code","6dee9c73":"code","33df7ce6":"code","13968bd7":"code","4a150fa1":"markdown","3d157831":"markdown","9c07c358":"markdown","c3917aab":"markdown","bb9b4f51":"markdown","ae924923":"markdown","d0341a68":"markdown","307304c8":"markdown","006a3a54":"markdown","fc59f347":"markdown","9521e916":"markdown","068056e8":"markdown","7deb0f2d":"markdown","e765a55a":"markdown","77dced69":"markdown","d6041844":"markdown","ebf29868":"markdown","1b992771":"markdown","6bb5f0ab":"markdown","7cd8df51":"markdown"},"source":{"907fee19":"# matplotlib\u3067\u65e5\u672c\u8a9e\u3092\u6271\u3048\u308b\u3088\u3046\u306b\n!pip install japanize_matplotlib -Uq\n\n# RainCloud Plot(\u6563\u5e03\u56f3\uff0bBoxPlot\uff0bViolin\u3092\u4e00\u3064\u3067\u8868\u793a)\n!pip install ptitprince -Uq\n\n# \u6b20\u640d\u5024\u3092\u53ef\u8996\u5316\n!pip install missingno -Uq","39e0fd85":"import warnings\nwarnings.simplefilter('ignore')\n\nimport os\nimport gc\ngc.enable()\nimport sys\nimport glob\nimport math\nimport time\nimport random\nimport string\nimport psutil\nimport pathlib\nfrom pathlib import Path\nfrom contextlib import contextmanager\n\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport japanize_matplotlib\nimport seaborn as sns\nfrom ptitprince import RainCloud\nimport missingno as msno\n\nfrom tqdm.auto import tqdm as tqdmp\nfrom tqdm.autonotebook import tqdm as tqdm\ntqdmp.pandas()","430cc231":"# \u5b9f\u9a13\u3067\u4f7f\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u306fConfig\u3067\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002\n# \u3053\u306e\u5b9f\u9a13\u4f55\u3084\u3063\u305f\u304b\u306a\u3068\u5f8c\u3067\u632f\u308a\u8fd4\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u306a\u308b\u3079\u304fConfig\u3060\u3051\u898b\u308c\u3070\u308f\u304b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\n\nclass CFG:\n    \n    def __init__(self):\n        \n        self.debug=True\n        self.seed=42\n        self.environment='Kaggle'  # 'AWS' or 'Kaggle' or 'Colab'\n        self.project='Shiggle_1st', \n        self.exp_name = '000_EDA'\n        \nCONFIG = CFG()","20a1d7fd":"## \u518d\u73fe\u6027\u78ba\u4fdd\u306e\u305f\u3081\u306eSeed\u56fa\u5b9a\ndef seed_everything(seed:int==42):\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    np.random.seed(seed)\n\nseed_everything(CONFIG.seed)","765c1856":"## \u51e6\u7406\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3068\u4f7f\u7528\u3057\u305f\u30e1\u30e2\u30ea\u3092\u8a08\u6e2c\n@contextmanager\ndef timer(name:str, slack:bool=False):\n    t0 = time.time()\n    p = psutil.Process(os.getpid())\n    m0 = p.memory_info()[0] \/ 2. ** 30\n    print(f'<< {name} >> Start')\n    yield\n    \n    m1 = p.memory_info()[0] \/ 2. ** 30\n    delta = m1 - m0\n    sign = '+' if delta >= 0 else '-'\n    delta = math.fabs(delta)\n    \n    print(f\"<< {name} >> {m1:.1f}GB({sign}{delta:.1f}GB):{time.time() - t0:.1f}sec\", file=sys.stderr)","52d145c5":"# \u500b\u4eba\u7684\u306bAWS\u3084Kaggle\u74b0\u5883\u3084Google Colab\u3092\u884c\u3063\u305f\u308a\u6765\u305f\u308a\u3057\u3066\u3044\u308b\u306e\u3067\u307e\u3068\u3081\u3066\u3044\u307e\u3059\nif CONFIG.environment == 'AWS':\n    INPUT_DIR = Path('\/mnt\/work\/data\/kaggle\/shiggle_1st\/')\n    MODEL_DIR = Path(f'..\/models\/{CONFIG.exp_name}\/')\n    OUTPUT_DIR = Path(f'..\/data\/interim\/{CONFIG.exp_name}\/')\n    \n    os.makedirs(MODEL_DIR, exist_ok=True)\n    os.makedirs(OUTPUT_DIR, exist_ok=True)\n    \n    print(f\"Your environment is 'AWS'.\\nINPUT_DIR is {INPUT_DIR}\\nMODEL_DIR is {MODEL_DIR}\\nOUTPUT_DIR is {OUTPUT_DIR}\")\n    \n    \nelif CONFIG.environment == 'Kaggle':\n    INPUT_DIR = Path('..\/input\/shigglecup-1st\/DATA\/')\n    MODEL_DIR = Path('.\/')\n    OUTPUT_DIR = Path('.\/')\n    print(f\"Your environment is 'Kaggle'.\\nINPUT_DIR is {INPUT_DIR}\\nMODEL_DIR is {MODEL_DIR}\\nOUTPUT_DIR is {OUTPUT_DIR}\")\n\n    \nelif CONFIG.environment == 'Colab':\n    INPUT_DIR = Path('\/content\/drive\/MyDrive\/kaggle\/Shiggle_1st\/data\/raw')\n    BASE_DIR = Path(\"\/content\/drive\/MyDrive\/kaggle\/Shiggle_1st\/data\/\")\n\n    MODEL_DIR = BASE_DIR \/ f'{CONFIG.exp_name}'\n    OUTPUT_DIR = BASE_DIR \/ f'{CONFIG.exp_name}\/'\n\n    os.makedirs(MODEL_DIR, exist_ok=True)\n    os.makedirs(OUTPUT_DIR, exist_ok=True)\n    \n    if not os.path.exists(INPUT_DIR):\n        print('Please Mount your Google Drive.')\n    else:\n        print(f\"Your environment is 'Colab'.\\nINPUT_DIR is {INPUT_DIR}\\nMODEL_DIR is {MODEL_DIR}\\nOUTPUT_DIR is {OUTPUT_DIR}\")\n        \nelse:\n    print(\"Please choose 'AWS' or 'Kaggle' or 'Colab'.\\nINPUT_DIR is not found.\")","9dce7e73":"with timer('Data Load'):\n    train_df = pd.read_csv(INPUT_DIR \/ 'train.csv')\n    test_df = pd.read_csv(INPUT_DIR \/ 'test.csv')\n    sub_df = pd.read_csv(INPUT_DIR \/ 'sample_submission.csv')\n    \n    print(f'Train: {train_df.shape} | Test: {test_df.shape}')","010b8d40":"# atmaCup\u3067\u50d5\u3082\u3084\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u30c6\u30fc\u30d6\u30eb\u30c7\u30fc\u30bf\u306f\u8ee2\u7f6e\u3059\u308b\u3068\u898b\u3084\u3059\u3044\u3067\u3059\ntrain_df.head().T","badd3c2c":"with timer('target visualize'):\n    plt.figure(figsize=(12, 5), tight_layout=True)\n    sns.histplot(data=train_df, x='target', bins=30) # bins\u306f20, 30, 50\u304f\u3089\u3044\u3067\u307e\u305a\u306f\u898b\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\n    plt.show()","c951fe23":"## \u30c7\u30fc\u30bf\u5168\u4f53\u306e\u6b20\u640d\u5024\u3082\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\nwith timer('missing check'):\n    plt.figure(figsize=(12, 5), tight_layout=True)\n    msno.bar(train_df)\n    plt.show()","7dbec431":"## \u30c7\u30fc\u30bf\u5168\u4f53\u306e\u6b20\u640d\u306e\u50be\u5411\u3092\u628a\u63e1\u3057\u307e\u3057\u3087\u3046\nwith timer('missing check with id'):\n    plt.figure(figsize=(12, 5), tight_layout=True)\n    msno.matrix(train_df)\n    plt.show()","fad3ce73":"# Pokemon\u56fa\u6709\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3067\u3042\u308b\u8eab\u9577\u3001\u9ad8\u3055\nwith timer('height plot'):\n    plt.figure(figsize=(12, 5), tight_layout=True)\n    plt.subplot(1, 2, 1)\n    sns.histplot(data=train_df, x='height')\n\n    plt.subplot(1, 2, 2)\n    sns.scatterplot(data=train_df, x='height', y='target')\n    plt.show()","7d317d32":"# Pokemon\u56fa\u6709\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3067\u3042\u308b\u4f53\u91cd\u3001\u91cd\u3055\nwith timer('weight plot'):\n    plt.figure(figsize=(12, 5), tight_layout=True)\n    plt.subplot(1, 2, 1)\n    sns.histplot(data=train_df, x='weight')\n\n    plt.subplot(1, 2, 2)\n    sns.scatterplot(data=train_df, x='weight', y='target')\n    plt.show()","d8a8ee13":"## pokemon\u306etype\n## type\u306e\u3088\u3046\u306a\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u306e\u5834\u5408\u306f\u3001boxplot\u306a\u3069\u3067\u78ba\u8a8d\u3059\u308b\u3068\u898b\u3084\u3059\u3044\u3067\u3057\u3087\u3046\nwith timer('type_1 boxplot'):\n    plt.figure(figsize=(12, 5), tight_layout=True)\n    sns.boxplot(data=train_df, x='type_1', y='target')\n    plt.show()","20989265":"# Boxplot\u3067\u898b\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001RainCloudplot\u3067\u3055\u3089\u306b\u7d30\u304b\u304f\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\nwith timer('RainCloud plot with type_1'):\n\n    plt.figure(figsize=(16, 5))\n    RainCloud(data=train_df, x='type_1', y='target', \n              pointplot=True, dodge=True, width_box=0.3)\n    plt.show()","1189e554":"## \u540c\u69d8\u306b\u3001egg_group,shape,generation\u3067\u3082\u898b\u3066\u3044\u304d\u307e\u3059\n# Boxplot\u3067\u898b\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001RainCloudplot\u3067\u3055\u3089\u306b\u7d30\u304b\u304f\u30c7\u30fc\u30bf\u306e\u5206\u5e03\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\nwith timer('RainCloud plot with type_1'):\n    plt.figure(figsize=(16, 5))\n    RainCloud(data=train_df, x='egg_group_1', y='target', \n              pointplot=True, dodge=True, width_box=0.3)\n    plt.show()","c817de67":"with timer('RainCloud plot with shape'):\n    plt.figure(figsize=(16, 5))\n    RainCloud(data=train_df, x='shape', y='target', \n              pointplot=True, dodge=True, width_box=0.3)\n    plt.show()","6dee9c73":"with timer('RainCloud plot with generation_id'):\n    plt.figure(figsize=(16, 5))\n    RainCloud(data=train_df, x='generation_id', y='target', \n              pointplot=True, dodge=True, width_box=0.3)\n    plt.show()","33df7ce6":"## Pokemon\u306e\u80fd\u529b\u3068target\u306e\u95a2\u4fc2\u6027\n## \u9023\u7d9a\u5024x\u9023\u7d9a\u5024\u306a\u306e\u3067\u3001pairplot\u3067\u4e00\u62ec\u3067\u898b\u3066\u307f\u307e\u3059\nwith timer('ability pairplot'):\n    plt.figure(figsize=(16, 16), tight_layout=True)\n    sns.pairplot(data=train_df[\n        ['hp', 'attack', 'defense', 'special_attack', 'special_defense', 'speed', 'target']\n    ])\n    plt.show()","13968bd7":"with timer('calc corr & plot'):\n    train_corr = train_df[\n        ['hp', 'attack', 'defense', 'special_attack', 'special_defense', 'speed', 'target']\n    ].corr()\n\n    plt.figure(figsize=(12, 5), tight_layout=True)\n    sns.heatmap(train_corr, vmax=1, vmin=-1, center=0, annot=True)\n    plt.show()","4a150fa1":"- \u3044\u304f\u3064\u304b\u306etype\u306f100\u672a\u6e80\u3001100\u4ee5\u4e0a\u3001200\u4ee5\u4e0a\u306e\u3088\u3046\u306a\u30dc\u30ea\u30e5\u30fc\u30e0\u30be\u30fc\u30f3\u3092\u6301\u3063\u3066\u3044\u305d\u3046\u306a\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059","3d157831":"# \u307e\u3068\u3081\n- \u4eca\u56de\u306f\u3044\u304f\u3064\u304b\u30c7\u30fc\u30bf\u306e\u56f3\u793a\u3092\u4ea4\u3048\u306a\u304c\u3089\u3001\u6c17\u3065\u304d\u304c\u5f97\u3089\u308c\u305d\u3046\u306a\u30dd\u30a4\u30f3\u30c8\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n- \u4ed6\u306e\u30ab\u30e9\u30e0\u3068\u306e\u95a2\u4fc2\u6027\u3084\u56f3\u793a\u3082\u9032\u3081\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n- \u6b21\u56de\u306fBaseline\u306e\u4f5c\u6210\u306b\u3064\u3044\u30668\/26(\u6728)\u3042\u305f\u308a\u306b\u516c\u958b\u3067\u304d\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002","9c07c358":"## Target\u306e\u5206\u5e03\n- \u307e\u305a\u306f\u4e88\u6e2c\u5bfe\u8c61\u306e\u5206\u5e03\u3092\u5fc5\u305a\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046","c3917aab":"# Data Load","bb9b4f51":"<div class = 'alert alert-block alert-info'\n     style = 'background-color:#ee8329;\n              color:#ffd510;\n              border-width:5px;\n              border-color:#084152;\n              font-family:Comic Sans MS'>\n    <p style = 'font-size:24px'>EDA<\/p>\n    <a href = \"#Settings\"\n       style = \"color:#ffd510;\n                font-size:14px\">1.Settings<\/a><br>\n    <a href = \"#Data-Load\"\n       style = \"color:#ffd510;\n                font-size:14px\">2.Data Load<\/a><br>\n    <a href = \"#Visualize\"\n       style = \"color:#ffd510;\n                font-size:14px\">3.Visualize<\/a><br>\n<\/div>","ae924923":"# Settings","d0341a68":"- \u91cd\u3055\u3082\u3069\u3046\u3084\u3089\u9ad8\u3055\u3068\u540c\u3058\u3088\u3046\u306a\u50be\u5411\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002","307304c8":"- psychic(\u30a8\u30b9\u30d1\u30fc)\u3001steel(\u306f\u304c\u306d)\u3001dragon(\u30c9\u30e9\u30b4\u30f3)\u3042\u305f\u308a\u306f\u4ed6\u306etype\u306b\u6bd4\u3079\u3066\u5e73\u5747\u304c\u9ad8\u305d\u3046\u3067\u3059\u3002","006a3a54":"- \u3069\u308c\u3082target\u3068\u3046\u3063\u3059\u3089\u76f8\u95a2\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n  - \u76f8\u95a2\u4fc2\u6570\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002","fc59f347":"![pokemon](https:\/\/images.unsplash.com\/photo-1627856013091-fed6e4e30025?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1050&q=80)","9521e916":"- type_2\u3068, color_2, color_f\u306f\u540c\u3058id\u3067\u6b20\u640d\u3057\u3066\u3044\u305d\u3046\u3067\u3059\u3002\n  - \u30c7\u30fc\u30bf\u53d6\u5f97\u306e\u6642\u70b9\u3067\u6b20\u640d\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u540c\u3058id\u3067\u6b20\u640d\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002\n  - \u3053\u3046\u3044\u3046\u5834\u5408\u306f\u6b20\u640d\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u3082\u610f\u5473\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n- ability_2\u306ftype_2\u3068\u6b20\u640d\u6570\u306f\u540c\u3058\u304f\u3089\u3044\u3060\u3063\u305f\u306e\u306b\u3001\u6b20\u640d\u3057\u3066\u3044\u308bid\u306f\u7570\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n- url_image, generation_id, evolution_chain_id, shape_id, shape\u306f\u5168\u304f\u540c\u3058id\u3067\u6b20\u640d\u3057\u3066\u3044\u307e\u3059\u3002\n  - \u3053\u308c\u3082\u30c7\u30fc\u30bf\u53d6\u5f97\u306e\u6642\u70b9\u3067\u6b20\u640d\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u6b20\u640d\u81ea\u4f53\u306b\u610f\u5473\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002","068056e8":"- 600\u306ePokemon\u304c\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n- \u305d\u308c\u4ee5\u5916\u306f~400\u307e\u3067\u306e\u7bc4\u56f2\u306b\u5165\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3044\u304f\u3064\u304b\u30d4\u30fc\u30af\u3092\u6301\u3064\u3088\u3046\u306b\u3082\u898b\u3048\u307e\u3059\u3002","7deb0f2d":"- Target\u3084\u30c7\u30fc\u30bf\u5168\u4f53\u306e\u6b20\u640d\u3092\u78ba\u8a8d\u3057\u305f\u5f8c\u306f\u3001\u5c11\u3057\u7279\u5fb4\u306b\u3064\u3044\u3066\u6398\u308a\u4e0b\u3052\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n- \u5217\u5358\u4f53\u3067\u898b\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001target\u3068\u306e\u95a2\u4fc2\u3082\u77e5\u308a\u305f\u3044\u306e\u3067\u5217\u5358\u4f53+\u5217xTarget\u306e\u95a2\u4fc2\u6027\u306b\u3064\u3044\u3066\u3082\u540c\u6642\u306b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046","e765a55a":"- type_2, ability_2, color_2, color_f\u3000\u306f\u6b20\u640d\u6570\u304c\u540c\u3058\u3088\u3046\u306a\u30d0\u30e9\u30f3\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\n- url_image, generation_id, evolution_chain_id, shape_id, shape\u3082\u6b20\u640d\u6570\u306f\u540c\u3058\u30d0\u30e9\u30f3\u30b9","77dced69":"<p>\n    \u307e\u305a\u306f\u7686\u69d8\u30a8\u30f3\u30c8\u30ea\u30fc\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002<br>\n    \u3059\u3067\u306b\u521d\u65e5\u30673sub\u3082\u3057\u3066\u3044\u305f\u3060\u308b\u3068\u306f\u601d\u3063\u3066\u3082\u304a\u3089\u305a\u3001\u5927\u5909\u5b09\u3057\u304f\u601d\u3044\u307e\u3059\u3002<br>\n    \u3053\u3053\u3067\u306f\u7c21\u5358\u306bEDA\u3092\u3057\u3064\u3064\u3001\u7279\u5fb4\u306e\u30a2\u30a4\u30c7\u30a2\u3092\u8003\u3048\u3066\u884c\u3051\u305f\u3089\u3068\u601d\u3044\u307e\u3059\u3002<br>\n    \u6b21\u56de\u30018\/26(\u6728)\u3042\u305f\u308a\u306bBaseline\u306e\u4f5c\u6210\u306b\u3064\u3044\u3066\u516c\u958b\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n<\/p>","d6041844":"- egg_group, shape, generation_id\u304b\u3089\u3082\u3044\u304f\u3064\u304b\u6c17\u3065\u304d\u304c\u5f97\u3089\u308c\u305d\u3046\u3067\u3059\u3002","ebf29868":"- \u8eab\u9577\u304c\u9ad8\u3044\u2252Pokemon\u304c\u5927\u304d\u3044\u304b\u3089\u3068\u3044\u3063\u3066target\u304c\u5927\u304d\u3044\u308f\u3051\u3067\u306f\u306a\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n- \u3057\u304b\u3057\u3001\u8eab\u9577\u304c100\u3092\u8d85\u3048\u308b\u3088\u3046\u306aPokemon\u306ftarget\u304c150~400\u4ee5\u5185\u306b\u53ce\u307e\u3063\u3066\u3044\u305d\u3046\u3067\u3059\u3002","1b992771":"# Visualize","6bb5f0ab":"## \u7279\u5fb4\u91cfxTarget\u3067\u53ef\u8996\u5316","7cd8df51":"- target\u3068\u306e\u76f8\u95a2\u306fspeed\u3068defense\u304c\u3061\u3087\u3063\u3068\u4f4e\u3044\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\u3002"}}