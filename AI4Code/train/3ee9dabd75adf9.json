{"cell_type":{"71b7a503":"code","2021dc4d":"code","38101154":"code","0a399f56":"code","af4fed81":"code","07c73f3e":"code","1d800a35":"code","e67ac138":"code","a665c3a1":"markdown","b68696cc":"markdown","d09e33dd":"markdown","65af074b":"markdown","a34cc510":"markdown","e727f2d2":"markdown","62fcd066":"markdown","860aa0d6":"markdown"},"source":{"71b7a503":"import datetime as dt\nimport math\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom sklearn import linear_model, metrics, model_selection","2021dc4d":"df = pd.read_csv(\"..\/input\/kickstarter-projects\/ks-projects-201801.csv\")\n\n# \u5206\u6790\u306b\u4f7f\u7528\u3057\u306a\u3044\u30ab\u30e9\u30e0\u3092\u843d\u3068\u3059\n# ID\n# \u4ed8\u4e0e\u3059\u308b\u898f\u5247\u304c\u4e0d\u660e\u306a\u305f\u3081\uff0e\ndf = df.drop(\"ID\", axis=1)\n\n# goal, pledged, usd_pledged\n# \u901a\u8ca8\u5358\u4f4d\u3092\u7d71\u4e00\u3057\u305fusd_pledged_real\u3068usd_goal_real\u3067\u8a55\u4fa1\u3059\u308b\uff0e\ndf = df.drop(\"goal\", axis=1)\ndf = df.drop(\"pledged\", axis=1)\ndf = df.drop(\"usd pledged\", axis=1)\n\npledge = df[\"usd_pledged_real\"].values\ngoal = df[\"usd_goal_real\"].values\nachiev = pledge \/ goal\n\n# \u8a55\u4fa1\u6307\u6a19\u3092\u8a2d\u5b9a\ndf[\"achievement\"] = achiev\ndf = df.drop(\"usd_pledged_real\", axis=1)\n\n# \u30af\u30ea\u30fc\u30cb\u30f3\u30b0\n# launched\n# \"1970-01-01 01:00:00\"\u306f\u6b20\u640d\u5024\u6271\u3044\u3067\u524a\u9664\u3059\u308b\ndf = df[df[\"launched\"] != \"1970-01-01 01:00:00\"]\n\n# state\n# failed\u3068successful\u3060\u3051\u6b8b\u3059\ndf = df[(df[\"state\"] == \"failed\") | (df[\"state\"] == \"successful\")]\n\n# country\n# N,0\"\u306f\u524a\u9664\ndf = df[df[\"country\"] != \"N,0\\\"\"]\n\ndf","38101154":"def deadline_str_to_int(array):\n    utv = []\n    for s in array:\n        datetime_obj = dt.datetime.strptime(s, \"%Y-%m-%d\")\n        utv.append(datetime_obj.timestamp())\n    return utv\n\ndef launched_str_to_int(array):\n    utv = []\n    for s in array:\n        datetime_obj = dt.datetime.strptime(s, \"%Y-%m-%d %H:%M:%S\")\n        utv.append(datetime_obj.timestamp())\n    return utv\n\ndf_dummies = pd.get_dummies(df, columns=[\"main_category\", \"country\"])\ndf_dummies[\"deadline_unix\"] = deadline_str_to_int(df[\"deadline\"].values)\ndf_dummies[\"launched_unix\"] = launched_str_to_int(df[\"launched\"].values)\n\ndf_dummies","0a399f56":"# \u8aac\u660e\u5909\u6570\nexplanatories = [\n    \"main_category_Art\",    # 0\n    \"main_category_Comics\",    # 1\n    \"main_category_Crafts\",    # 2\n    \"main_category_Dance\",    # 3\n    \"main_category_Design\",    # 4\n    \"main_category_Fashion\",    # 5\n    \"main_category_Film & Video\",    # 6\n    \"main_category_Food\",    # 7\n    \"main_category_Games\",    # 8\n    \"main_category_Journalism\",    # 9\n    \"main_category_Music\",    # 10\n    \"main_category_Photography\",    # 11\n    \"main_category_Publishing\",    # 12\n    \"main_category_Technology\",    # 13\n    \"main_category_Theater\",    # 14\n    \"usd_goal_real\",    # 15\n    \"deadline_unix\",    # 16\n    \"launched_unix\",    # 17\n    \"country_AT\",    # 18\n    \"country_AU\",    # 19\n    \"country_BE\",    # 20\n    \"country_CA\",    # 21\n    \"country_CH\",    # 22\n    \"country_DE\",    # 23\n    \"country_DK\",    # 24\n    \"country_ES\",    # 25\n    \"country_FR\",    # 26\n    \"country_GB\",    # 27\n    \"country_HK\",    # 28\n    \"country_IE\",    # 29\n    \"country_IT\",    # 30\n    \"country_JP\",    # 31\n    \"country_LU\",    # 32\n    \"country_MX\",    # 33\n    \"country_NL\",    # 34\n    \"country_NO\",    # 35\n    \"country_NZ\",    # 36\n    \"country_SE\",    # 37\n    \"country_SG\",    # 38\n    \"country_US\",    # 39\n]\nX = df_dummies.loc[:, explanatories].values\ny = df_dummies[\"achievement\"].values","af4fed81":"X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size=0.2, random_state=20191117)","07c73f3e":"eps = 1.0e-2\nfig = plt.figure(figsize=(10, 4))\nax1 = fig.add_subplot(131)\nax2 = fig.add_subplot(132, sharey=ax1)\nax3 = fig.add_subplot(133, sharey=ax1)\nax1.hist(np.log10(y + eps), bins=32)\nax2.hist(np.log10(y_train + eps), bins=32)\nax3.hist(np.log10(y_test + eps), bins=32)","1d800a35":"# usd_goal_real\nusd_goal_real_trains = []\nfor i in range(len(X_train)):\n    usd_goal_real_trains.append(X_train[i][15])\narr = np.array(usd_goal_real_trains)\nusd_goal_real_mean = arr.mean()\nusd_goal_real_std = arr.std()\n\nfor i in range(len(X_train)):\n    X_train[i][15] = (X_train[i][15] - usd_goal_real_mean)\/usd_goal_real_std\nfor i in range(len(X_test)):\n    X_test[i][15] = (X_test[i][15] - usd_goal_real_mean)\/usd_goal_real_std\n\n# deadline\ntimestamp_min = dt.datetime(2009, 1, 1).timestamp()\ntimestamp_max = dt.datetime(2019, 1, 1).timestamp()\nfor i in range(len(X_train)):\n    X_train[i][16] = (X_train[i][16] - timestamp_min)\/(timestamp_max - timestamp_min)\nfor i in range(len(X_test)):\n    X_test[i][16] = (X_test[i][16] - timestamp_min)\/(timestamp_max - timestamp_min)\n\n# launched\ntimestamp_min = dt.datetime(2009, 1, 1).timestamp()\ntimestamp_max = dt.datetime(2019, 1, 1).timestamp()\nfor i in range(len(X_train)):\n    X_train[i][17] = (X_train[i][17] - timestamp_min)\/(timestamp_max - timestamp_min)\nfor i in range(len(X_test)):\n    X_test[i][17] = (X_test[i][17] - timestamp_min)\/(timestamp_max - timestamp_min)\n\n# achievement\narr = np.array(y_train)\nachievement_mean = arr.mean()\nachievement_std = arr.std()\n\nfor i in range(len(y_train)):\n    y_train[i] = (y_train[i] - achievement_mean)\/achievement_std\nfor i in range(len(X_test)):\n    y_test[i]= (y_test[i] - achievement_mean)\/achievement_std\n\n# achievement\u306e\u6a19\u6e96\u5316\u3092\u89e3\u9664\u3059\u308b\u95a2\u6570\u3092\u66f8\u3044\u3066\u304a\u304f\ndef unstandalize_achievement(achiev):\n    unstandalized = []\n    for v in achiev:\n        unstandalized.append(v * achievement_std + achievement_mean)\n    return unstandalized","e67ac138":"for a in [10**(i\/4 + 2) for i in range(16 + 1)]:\n    RidgeLRPred = linear_model.Ridge(alpha=a)\n    RidgeLRPred.fit(X_train, y_train)\n    y_train_pred = RidgeLRPred.predict(X_train)\n    y_test_pred = RidgeLRPred.predict(X_test)\n    \n    MSE_train = metrics.mean_squared_error(\n        unstandalize_achievement(y_train), unstandalize_achievement(y_train_pred))\n    MSE_test = metrics.mean_squared_error(\n        unstandalize_achievement(y_test), unstandalize_achievement(y_test_pred))\n    print(\"Alpha={0:10.3e}, MSE_train={1:10.3e}, MSE_test={2:10.3e}\".format(a, MSE_train, MSE_test))","a665c3a1":"\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306b\u5927\u304d\u306a\u504f\u308a\u304c\u306a\u3044\u304b\u78ba\u8a8d\uff0e","b68696cc":"## \u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\n\u30c7\u30fc\u30bf\u306e\u6b63\u898f\u5316\u307e\u305f\u306f\u6a19\u6e96\u5316\u3092\u884c\u3046\uff0e\u65e5\u4ed8\u30c7\u30fc\u30bf\u306b\u95a2\u3057\u3066\u306f\u8abf\u67fb\u5bfe\u8c61\u671f\u9593\u3092\u542b\u3080min: 2009-01-01 00:00:00\uff0cmax: 2019-01-01 00:00:00\u3067\u6b63\u898f\u5316\u3059\u308b\uff0e\u305d\u308c\u4ee5\u5916\u306e\u5909\u6570\u306f\u6a19\u6e96\u5316\u3059\u308b\uff0e\n\n* usd_goal_real: \u6a19\u6e96\u5316\n* deadline_unix: \u6b63\u898f\u5316\n* launched_unix: \u6b63\u898f\u5316\n* achievement: \u6a19\u6e96\u5316","d09e33dd":"## \u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u307e\u3067Day 1\u3068\u540c\u3058\n[Day 1](https:\/\/www.kaggle.com\/kazuhirowatanabe\/kickstarter-day-1)\u53c2\u7167\uff0e","65af074b":"# Kickstarter regression - Day 2\n* (K.Watanabe)[mailto:watanabe.kazuhiro@obayashi.co.jp]\n* \u73fe\u5834\u3067\u4f7f\u3048\u308b\u6a5f\u68b0\u5b66\u7fd2\u30fb\u30c7\u30fc\u30bf\u5206\u6790\u57fa\u790e\u8b1b\u5ea7\uff08DAY2\uff09\u306e\u8ab2\u984c\uff0e","a34cc510":"## \u8aac\u660e\u5909\u6570\u306e\u6574\u7406\n * main_category\uff08One-hot-encording\u30670, 1\u306b\u5c55\u958b\uff09\n * goal\uff08\u305d\u306e\u307e\u307e\uff09\n * deadline\uff08Unix\u6642\u9593\u306b\u5909\u63db\uff09\n * launched\uff08Unix\u6642\u9593\u306b\u5909\u63db\uff09\n * country\uff08One-hot-encording\u30670, 1\u306b\u5c55\u958b\uff09","e727f2d2":"\u6b63\u5247\u5316\u306e\u5f37\u5ea6\u306b\u3088\u3063\u3066MSE_train\u306f\u5909\u5316\u3059\u308b\u304c\uff0cMSE_test\u306f\u5909\u308f\u3089\u305a\uff0e\u3042\u307e\u308a\u52b9\u3044\u3066\u3044\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u308b\uff0e","62fcd066":"## Ridge\u6b63\u5247\u5316\u4ed8\u304d\u56de\u5e30","860aa0d6":"## \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5"}}