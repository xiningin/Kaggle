{"cell_type":{"7e44c73f":"code","00bde8bd":"code","c0c8d70f":"code","62c456ee":"code","c1de978e":"code","2d340650":"code","a404ef9b":"code","7aefb983":"code","acdeb79f":"code","3a048010":"code","facfb86a":"code","6e7271c9":"code","ba1fda3c":"code","ff8308c9":"code","75c8d480":"code","172675bd":"markdown"},"source":{"7e44c73f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","00bde8bd":"data_master = pd.read_csv('\/kaggle\/input\/personal-loan\/Bank_Personal_Loan_Modelling-1.xlsx')\n","c0c8d70f":"data_master.shape # No.of Rows & Columns","62c456ee":"data_master.head(2)","c1de978e":"data_master.describe()","2d340650":"data_master.info() #Step 3 & 4","a404ef9b":"# Step 3\ndata_master.isnull().sum()","7aefb983":"#Step 5 - Create X & Y\ndata_master.drop(\"ID\",axis=1, inplace=True)","acdeb79f":"X=data_master.drop(\"Personal Loan\", axis=1)\ny=data_master[\"Personal Loan\"]","3a048010":"X.info()","facfb86a":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.30)\n","6e7271c9":"#1 GaussianNB Classifier\nfrom sklearn.naive_bayes import GaussianNB\nclf_gnb = GaussianNB()\nclf_gnb.fit(X_train, y_train)\ny_pred_gnb=clf_gnb.predict(X_test)\nprint(\"Train Score - \",clf_gnb.score(X_train,y_train)*100)\nprint(\"Test Score - \",clf_gnb.score(X_test,y_test)*100)\n","ba1fda3c":"#2 KNN Classifier\nfrom sklearn.neighbors import KNeighborsClassifier\nclf_knn = KNeighborsClassifier(n_neighbors=3)\nclf_knn.fit(X_train, y_train)\ny_pred_knn=clf_knn.predict(X_test)\nprint(\"Train Score - \",clf_knn.score(X_train,y_train)*100)\nprint(\"Test Score - \",clf_knn.score(X_test,y_test)*100)\n\n","ff8308c9":"#3 SVM Classifier\nfrom sklearn import svm\nclf_svm = svm.SVC()\nclf_svm.fit(X_train, y_train)\ny_pred_svm=clf_svm.predict(X_test)\nprint(\"Train Score - \",clf_svm.score(X_train,y_train)*100)\nprint(\"Test Score - \",clf_svm.score(X_test,y_test)*100)","75c8d480":"#4 Logistic Regression Classifier\nfrom sklearn.linear_model import LogisticRegression\nclf_lr = LogisticRegression(random_state=0)\nclf_lr.fit(X_train, y_train)\ny_pred_lr=clf_lr.predict(X_test)\nprint(\"Train Score - \",clf_lr.score(X_train,y_train)*100)\nprint(\"Test Score - \",clf_lr.score(X_test,y_test)*100)","172675bd":"No Nulls are required in any features\n\nAll the data types should be either Int Or Float - Numeric"}}