{"cell_type":{"be8d20ea":"code","f79d5689":"code","c650b948":"code","100e7399":"code","81be4e25":"code","03fc4bc9":"code","af1f38bb":"code","7172352d":"code","893afaf9":"code","6c9d0773":"code","a08ac983":"markdown"},"source":{"be8d20ea":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f79d5689":"# Verileri ve etiketleri koda tan\u0131ml\u0131yoruz.\n\n# e\u011fitim verileri\nx_train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\n\n# e\u011fitim verileri etiketi\ny_train = x_train['label']\n\n# e\u011fitim verilerinden etiket s\u00fctununu siliyoruz\nx_train = x_train.drop(labels=['label'], axis=1)\n\n# test verileri\nx_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')\n\n# test verileri etiketleri\ny_test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/sample_submission.csv')\n\ny_test = y_test['Label']\n\n\n","c650b948":"# e\u011fitim verisi 42000 adet 784 pixel\nprint(x_train.shape)\n\n# test verisi 28000 adet 784 pixel\nprint(x_test.shape)\n\n# e\u011fitim verilerinin etiketi\nprint(y_train.shape)\n\n# test verilerinin etiketleri\nprint(y_test.shape)\n","100e7399":"# E\u011fitim verilerinin ilk be\u015fi.\n\nx_train.head()","81be4e25":"# 100. indexdeki rakam\u0131n g\u00f6rsel hali.\n\nplt.figure(figsize=(7,7))\nrow_index = 100\ngrid_data = np.array(x_train.iloc[row_index]).reshape(28,28)\nplt.imshow(grid_data, interpolation = 'none', cmap= \"gray\")\nplt.show()","03fc4bc9":"from keras.utils import to_categorical\n\ntrain_images = x_train.values.reshape((42000, 28, 28, 1))\ntrain_images = train_images.astype('float32') \/ 255\n\ntest_images = x_test.values.reshape((28000, 28, 28, 1))\ntest_images = test_images.astype('float32') \/ 255\n\ntrain_labels = to_categorical(y_train)\ntest_labels = to_categorical(y_test)\n\n","af1f38bb":"from keras import layers\nfrom keras import models\nfrom keras.utils import to_categorical\n\ntrain_labels = to_categorical(y_train)\ntest_labels = to_categorical(y_test)","7172352d":"# modelimiz.\nmodel = models.Sequential()\n\n# evri\u015fimli sinir a\u011flar\u0131\nmodel.add(layers.Conv2D(32, (3,3), activation=\"relu\", input_shape=(28,28,1)))\n# enb\u00fcy\u00fckleri biriktirme\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3,3), activation=\"relu\"))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3,3), activation=\"relu\"))\n\n# 3B \u00e7\u0131kt\u0131lar\u0131 1B vekt\u00f6rlere d\u00f6n\u00fc\u015ft\u00fcrmek.\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation=\"relu\"))\nmodel.add(layers.Dense(10, activation=\"softmax\"))\n","893afaf9":"# modeli derleme i\u015flemi\nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# e\u011fitim\nmodel.fit(train_images, train_labels, epochs=8, batch_size=128)\n","6c9d0773":"# Model do\u011frulu\u011fu 0.99\n# Model kayb\u0131 0.01","a08ac983":"# Deep Learning with Keras\n\n* Bu projemizde MNIST veri setini kullanarak 0 dan 9 a kadar olan say\u0131lar\u0131 s\u0131n\u0131fland\u0131raca\u011f\u0131z.(\u00c7oklu s\u0131n\u0131fland\u0131rma)"}}