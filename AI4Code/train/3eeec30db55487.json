{"cell_type":{"3f9cd9e0":"code","ff529641":"code","6e92ed59":"code","9dc4f78f":"code","2dafc162":"code","c6dc6877":"code","07d82761":"code","4cec4c5a":"code","3a549645":"code","6acb114b":"code","977a6e19":"code","6b0e24c7":"code","9357ed7b":"code","d4f58cdc":"code","d3613e75":"code","6a3c51c8":"code","c072db4a":"code","a2d68af6":"code","bcabea69":"code","6ca931a9":"code","b7253e9e":"code","ee153374":"code","e6b2d5f8":"code","6e9e1782":"code","a27b40d6":"code","e74af429":"code","58df3021":"code","5e39e23a":"code","10339283":"code","7fbed6c1":"code","078c8728":"code","be158074":"code","d3b9a08d":"code","5706310a":"code","79b673c1":"code","4c769b3d":"code","f95d8734":"code","03f3a0b0":"code","489f591c":"code","ab0735a5":"code","8a564168":"code","732c3c6c":"code","a3e78e3d":"code","0d647871":"code","db7e22e2":"code","5cce73df":"code","0527cee3":"markdown","36e94450":"markdown"},"source":{"3f9cd9e0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import skew\nfrom scipy.special import boxcox1p\nimport matplotlib.pyplot as plt1\nimport matplotlib.pyplot as plt\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler, RobustScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import Lasso, LassoCV\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.metrics import r2_score , mean_squared_error","ff529641":"\ntrain=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")\ntest2=pd.read_csv(\"..\/input\/test.csv\")\nlen_train=train.shape[0]\nhouses=pd.concat([train,test], sort=False)\nprint(train.shape)\nprint(test.shape)","6e92ed59":"houses.select_dtypes(include='object').head()","9dc4f78f":"houses.select_dtypes(include=['float','int']).head(10)","2dafc162":"houses.select_dtypes(include='object').isnull().sum()[houses.select_dtypes(include='object').isnull().sum()>0]","c6dc6877":"for col in ('Alley','Utilities','MasVnrType','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1',\n            'BsmtFinType2','Electrical','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond',\n           'PoolQC','Fence','MiscFeature'):\n    train[col]=train[col].fillna('None')\n    test[col]=test[col].fillna('None')","07d82761":"for col in ('MSZoning','Exterior1st','Exterior2nd','KitchenQual','SaleType','Functional'):\n    train[col]=train[col].fillna(train[col].mode()[0])\n    test[col]=test[col].fillna(train[col].mode()[0])","4cec4c5a":"houses.select_dtypes(include=['int','float']).isnull().sum()[houses.select_dtypes(include=['int','float']).isnull().sum()>0]","3a549645":"for col in ('MasVnrArea','BsmtFinSF1','BsmtFinSF2','BsmtUnfSF','TotalBsmtSF','BsmtFullBath','BsmtHalfBath','GarageYrBlt','GarageCars','GarageArea'):\n    train[col]=train[col].fillna(0)\n    test[col]=test[col].fillna(0)","6acb114b":"#train['LotFrontage']=train['LotFrontage'].fillna(train['LotFrontage'].mean())\n#test['LotFrontage']=test['LotFrontage'].fillna(train['LotFrontage'].mean())\n#for i in train['Neighborhood'].unique():\n #   train['LotFrontage'][(train['LotFrontage'].isnull()) & (train['Neighborhood']==i)] = train['LotFrontage'].groupby(train['Neighborhood']==i).mean()[1]\n","977a6e19":"#there is a relationship between LotFrontage and the Neighberhood\n#for i in test['Neighborhood'].unique():\n #   test['LotFrontage'][(test['LotFrontage'].isnull()) & (test['Neighborhood']==i)] = test['LotFrontage'].groupby(test['Over']==i).median()[\ntrain['LotFrontage']=train.groupby('Neighborhood')['LotFrontage'].apply(lambda x: x.fillna(x.median()))\ntest['LotFrontage']=test.groupby('Neighborhood')['LotFrontage'].apply(lambda x: x.fillna(x.median()))\n\n","6b0e24c7":"print(train.isnull().sum().sum())\nprint(train.isnull().sum().sum())","9357ed7b":"train['hasgarage']=train['GarageArea'].apply(lambda x:1 if x > 0 else 0)\ntest['hasgarage']=test['GarageArea'].apply(lambda x:1 if x > 0 else 0)\ntrain['haspool']=train['PoolArea'].apply(lambda x:1 if x > 0 else 0)\ntest['haspool']=test['PoolArea'].apply(lambda x:1 if x > 0 else 0)\ntrain['has2ndfloor']=train['2ndFlrSF'].apply(lambda x:1 if x > 0 else 0)\ntest['has2ndfloor']=test['2ndFlrSF'].apply(lambda x:1 if x > 0 else 0)\ntrain['hasbsmt']=train['TotalBsmtSF'].apply(lambda x:1 if x > 0 else 0)\ntest['hasbsmt']=test['TotalBsmtSF'].apply(lambda x:1 if x > 0 else 0)\ntrain['hasfireplace']=train['Fireplaces'].apply(lambda x:1 if x > 0 else 0)\ntest['hasfireplace']=test['Fireplaces'].apply(lambda x:1 if x > 0 else 0)","d4f58cdc":"#plt1.style.use('dark_background')\nfig, axes = plt1.subplots(nrows= 3,ncols = 3, figsize=(20,15))\naxes[0,0].scatter(train['OverallQual'], train['SalePrice'], marker = 'o', color='red')\naxes[0,1].scatter(train['GrLivArea'], train['SalePrice'], marker = 'o', color='green')\naxes[0,2].scatter(train['GarageCars'], train['SalePrice'], marker = 'o', color='blue')\naxes[1,0].scatter(train['GarageArea'], train['SalePrice'], marker = 'o', color='red')\naxes[1,1].scatter(train['TotalBsmtSF'], train['SalePrice'], marker = 'o', color='green')\naxes[1,2].scatter(train['1stFlrSF'], train['SalePrice'], marker = 'o', color='blue')\naxes[2,0].scatter(train['BsmtFinSF1'], train['SalePrice'], marker = 'o', color='blue')\naxes[2,1].scatter(train['LotArea'],train['SalePrice'], marker = 'o', color='green')\n\naxes[0,0].grid(True)\naxes[0,1].grid(True)\naxes[0,2].grid(True)\naxes[1,0].grid(True)\naxes[1,1].grid(True)\naxes[1,2].grid(True)\naxes[2,0].grid(True)\naxes[2,1].grid(True)\n\naxes[0,0].set_title('OverallQual : Mat\u00e9riau et finition')\naxes[0,1].set_title('GrLivArea :surface habitable au sol pieds carr\u00e9s')\naxes[0,2].set_title('GarageCars : la capacit\u00e9 de la voiture')\naxes[1,0].set_title('GarageArea: Taille du garage en pieds carr\u00e9s')\naxes[1,1].set_title('TotalBsmtSF : pieds carr\u00e9s de sous-sol')\naxes[1,2].set_title('1stFlrSF: premier \u00e9tage en pied carr\u00e9e')\naxes[2,0].set_title('BsmtFinSF1: la finition de sous-sol ')\naxes[2,1].set_title('LotArea: la taille de lot en square feet')\n\naxes[0,0].set_xlabel('taux')\naxes[0,0].set_ylabel('Sale price');\n\naxes[0,1].set_xlabel('pieds carr\u00e9')\naxes[0,2].set_xlabel('la capacit\u00e9 du voiture')\naxes[1,0].set_ylabel('Sale price')\naxes[1,0].set_xlabel('taille de garage')\naxes[1,1].set_xlabel('sous-sol en pied carr\u00e9e')\naxes[1,2].set_xlabel('Surface de 1er \u00e9tage en pieds')\naxes[2,0].set_ylabel('Sale price')\naxes[2,0].set_xlabel('la finition sous-sol')\naxes[2,1].set_xlabel('LotArea')","d3613e75":"train = train[train['GrLivArea']<4000]","6a3c51c8":"#plt1.style.use('dark_background')\nfig, axes = plt1.subplots(nrows= 3,ncols = 3, figsize=(20,15))\naxes[0,0].scatter(train['OverallQual'], train['SalePrice'], marker = 'o', color='red')\naxes[0,1].scatter(train['GrLivArea'], train['SalePrice'], marker = 'o', color='green')\naxes[0,2].scatter(train['GarageCars'], train['SalePrice'], marker = 'o', color='blue')\naxes[1,0].scatter(train['GarageArea'], train['SalePrice'], marker = 'o', color='red')\naxes[1,1].scatter(train['TotalBsmtSF'], train['SalePrice'], marker = 'o', color='green')\naxes[1,2].scatter(train['1stFlrSF'], train['SalePrice'], marker = 'o', color='blue')\naxes[2,0].scatter(train['BsmtFinSF1'], train['SalePrice'], marker = 'o', color='blue')\naxes[2,1].scatter(train['LotArea'],train['SalePrice'], marker = 'o', color='green')\n\naxes[0,0].grid(True)\naxes[0,1].grid(True)\naxes[0,2].grid(True)\naxes[1,0].grid(True)\naxes[1,1].grid(True)\naxes[1,2].grid(True)\naxes[2,0].grid(True)\naxes[2,1].grid(True)\n\naxes[0,0].set_title('OverallQual : Mat\u00e9riau et finition')\naxes[0,1].set_title('GrLivArea :surface habitable au sol pieds carr\u00e9s')\naxes[0,2].set_title('GarageCars : la capacit\u00e9 de la voiture')\naxes[1,0].set_title('GarageArea: Taille du garage en pieds carr\u00e9s')\naxes[1,1].set_title('TotalBsmtSF : pieds carr\u00e9s de sous-sol')\naxes[1,2].set_title('1stFlrSF: premier \u00e9tage en pied carr\u00e9e')\naxes[2,0].set_title('BsmtFinSF1: la finition de sous-sol ')\naxes[2,1].set_title('LotArea: la taille de lot en square feet')\n\naxes[0,0].set_xlabel('taux')\naxes[0,0].set_ylabel('Sale price');\n\naxes[0,1].set_xlabel('pieds carr\u00e9')\naxes[0,2].set_xlabel('la capacit\u00e9 du voiture')\naxes[1,0].set_ylabel('Sale price')\naxes[1,0].set_xlabel('taille de garage')\naxes[1,1].set_xlabel('sous-sol en pied carr\u00e9e')\naxes[1,2].set_xlabel('Surface de 1er \u00e9tage en pieds')\naxes[2,0].set_ylabel('Sale price')\naxes[2,0].set_xlabel('la finition sous-sol')\naxes[2,1].set_xlabel('LotArea')","c072db4a":"plt.figure(figsize=[30,15])\nsns.heatmap(train.corr(), annot=True)","a2d68af6":"numeric_features=train.select_dtypes(include=np.number)\ncoo=numeric_features.corr()\nprint(coo['SalePrice'].sort_values(ascending=False))","bcabea69":"train.drop(['GarageArea','1stFlrSF','TotRmsAbvGrd','2ndFlrSF'], axis=1, inplace=True)\ntest.drop(['GarageArea','1stFlrSF','TotRmsAbvGrd','2ndFlrSF'], axis=1, inplace=True)\n#train.drop(['1stFlrSF'], axis=1, inplace=True)\n#test.drop(['1stFlrSF'], axis=1, inplace=True)","6ca931a9":"len_train=train.shape[0]\nprint(train.shape)","b7253e9e":"houses=pd.concat([train,test], sort=False)","ee153374":"houses['MSSubClass']=houses['MSSubClass'].astype(str)","e6b2d5f8":"skew=houses.select_dtypes(include=['int','float']).apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nskew_df=pd.DataFrame({'Skew':skew})\nskewed_df=skew_df[(skew_df['Skew']>0.5)|(skew_df['Skew']<-0.5)]","6e9e1782":"skewed_df.index","a27b40d6":"train=houses[:len_train]\ntest=houses[len_train:]","e74af429":"lam=0.1\nfor col in ('MiscVal', 'PoolArea', 'LotArea', 'LowQualFinSF', '3SsnPorch',\n       'KitchenAbvGr', 'BsmtFinSF2', 'EnclosedPorch', 'ScreenPorch',\n       'BsmtHalfBath', 'MasVnrArea', 'OpenPorchSF', 'WoodDeckSF',\n       'LotFrontage', 'GrLivArea', 'BsmtFinSF1', 'BsmtUnfSF', 'Fireplaces',\n       'HalfBath', 'TotalBsmtSF', 'BsmtFullBath', 'OverallCond', 'YearBuilt',\n       'GarageYrBlt'):\n    train[col]=boxcox1p(train[col],lam)\n    test[col]=boxcox1p(test[col],lam)","58df3021":"train['SalePrice']=np.log(train['SalePrice'])","5e39e23a":"houses=pd.concat([train,test], sort=False)\nhouses=pd.get_dummies(houses)","10339283":"train=houses[:len_train]\ntest=houses[len_train:]","7fbed6c1":"train.drop('Id', axis=1, inplace=True)\ntest.drop('Id', axis=1, inplace=True)","078c8728":"x=train.drop('SalePrice', axis=1)\ny=train['SalePrice']\ntest=test.drop('SalePrice', axis=1)","be158074":"sc=RobustScaler()\nx=sc.fit_transform(x)\ntest=sc.transform(test)","d3b9a08d":"#elastic=ElasticNet(normalize=True)\n#model=GridSearchCV(estimator=elastic,param_grid={'alpha':np.logspace(-5,2,8),'l1_ratio':[.2,.4,.6,.8]},scoring='neg_mean_squared_error',n_jobs=1,refit=True,cv=10)\nmodel=Lasso(alpha =0.0005, random_state=1,max_iter=1e7)","5706310a":"def get_score(prediction, lables):    \n    print('R2: {}'.format(r2_score(prediction, lables)))\n    print('RMSE: {}'.format(np.sqrt(mean_squared_error(prediction, lables))))\n\ndef train_test(estimator, x_trn, x_tst, y_trn, y_tst):\n    prediction_train = estimator.predict(x_trn)\n    # Affichier estimateur\n    print(estimator)\n    # affichier train scores\n    get_score(prediction_train, y_trn)\n    prediction_test = estimator.predict(x_tst)\n    # Afficher test scores\n    print(\"Test\")\n    get_score(prediction_test, y_tst)","79b673c1":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=200)","4c769b3d":"model.fit(x,y)\nmodel","f95d8734":"#remove outliers just in Lotfrontage ","03f3a0b0":"train_test(model,x_train,x_test,y_train,y_test)","489f591c":"scores = cross_val_score(model, x, y, cv=5)\nprint(\"Accuracy: %0.4f (+\/- %0.4f)\" % (scores.mean(), scores.std() * 2))","ab0735a5":"pred=model.predict(test)","8a564168":"#model= svm.SVR()","732c3c6c":"#model.fit(x,y)","a3e78e3d":"#pred1=model.predict(test)","0d647871":"#preds=np.exp((pred+pred1)\/2)\npred=np.exp(pred)","db7e22e2":"pred","5cce73df":"output=pd.DataFrame({'Id':test2.Id, 'SalePrice':pred})\noutput.to_csv('submission_lasso1.csv', index=False)","0527cee3":"**#remove outliers just in \"GrLivArea\" \n**<br>\nTrain<br>\nR2: 0.9253908060513428 <br>\nRMSE: 0.10424858465808357 <br>\nTest <br>\nR2: 0.915616125527049<br>\nRMSE: 0.10353019170255433<br>\nAccuracy: 0.9193 (+\/- 0.0160)\n","36e94450":"**Lasso Alpha = 0.0005 --> Accuracy is 0.9215  (+\/- 0.0153)**<br>\n**Lasso Alpha = 0.0004 --> Accuracy is 0.9218  (+\/- 0.0159)**\n"}}