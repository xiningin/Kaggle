{"cell_type":{"b3d1f0ca":"code","5b8d68b6":"code","ee9b7ffc":"code","e9cb7367":"code","857b9932":"code","ae48038b":"code","dacb0552":"code","5d0b717d":"code","debe3d01":"code","012040f2":"code","ef9000cf":"code","ad30a372":"code","3ff8e6f6":"markdown","7d3cf21e":"markdown","8c96de1b":"markdown","d3e4750a":"markdown","e0ed8f9d":"markdown","d5e5431e":"markdown","27000c1a":"markdown"},"source":{"b3d1f0ca":"import pandas as pd\nimport numpy as np\nfrom pathlib import Path\nimport pickle\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import lognorm, kstest\nfrom tqdm import tqdm\n\n\n## Change inputs here for different data (Men's vs Women's or submission file)#######\n\nmw = 'M'   # 'M' for men's and 'W' for womens\nsubmission_file = '..\/input\/deeplearning-ncaam-embedskill\/msubmission.csv' #path to your submission\ntruelosses = [0.484660,\n              0.546481,\n              0.507846,\n              0.543527,\n              0.484272]\n\n#############\n\npath = Path('..\/input\/ncaam-march-mania-2021\/')  #path for data files\nseasons_file = path\/(mw+'Seasons.csv')\nseeds_file = path\/(mw+'NCAATourneySeeds.csv')\nslots_file = path\/(mw+'NCAATourneySlots.csv')\nteams_file = path\/(mw+'Teams.csv')\n\nteams_dict = pd.read_csv(teams_file).set_index('TeamID')['TeamName'].to_dict() # Create team dictionary to go from team ID to team name\n\n##loading function\ndef prep(df,slots,seeds,season_info,season):\n    df.reset_index(inplace=True, drop=True)\n    df = df[['ID','Season','LeftTeamID','RightTeamID','Pred']]\n    df.columns = ['ID','Season','LeftTeamID','RightTeamID','Pred']\n    season_info = season_info.loc[season_info['Season']==season].copy()\n    region_dict = {'W':season_info['RegionW'].values[0],\n                   'X':season_info['RegionX'].values[0],\n                   'Y':season_info['RegionY'].values[0],\n                   'Z':season_info['RegionZ'].values[0],\n                   }\n\n    df_rev = df[['ID','Season','RightTeamID','LeftTeamID','Pred']].copy()\n    df_rev.columns = ['ID','Season','LeftTeamID','RightTeamID','Pred']\n    df_rev['Pred'] = 1-df_rev['Pred']\n    df_rev['ID'] = str(season)+'_'+ df_rev['LeftTeamID'].astype(str)+'_'+df_rev['RightTeamID'].astype(str)\n    df = pd.concat([df,df_rev])\n\n    seeds = seeds.loc[seeds['Season']==season,:].copy()\n    seeds.drop(columns='Season',inplace=True)\n    seeds['Region'] = seeds['Seed'].str.extract(r'([WXYZ]).*')\n    seeds['Region'].replace(region_dict,inplace=True)\n    seeds['Number'] = seeds['Seed'].str.extract(r'[WXYZ](.*)')\n    seeds['NewSeed'] = seeds['Region']+'-'+seeds['Number']\n    \n    oldseeds_dict = seeds.set_index('Seed')['NewSeed'].to_dict()\n    seeds_dict = seeds.set_index('NewSeed')['TeamID'].to_dict()\n\n    if mw == 'W': #womens csv does not have a column for season so we will fake it.\n        slots['Season']=season\n    else: pass\n    slots = slots.loc[slots['Season']==season,:].copy()\n    slots.drop(columns='Season',inplace=True)\n    slots['StrongSeed'].replace(oldseeds_dict,inplace=True)\n    slots['WeakSeed'].replace(oldseeds_dict,inplace=True)\n    slots['Round'] = slots['Slot'].str.extract(r'(R.)[WXYZC].').fillna('R0')\n    slots['Game'] = slots['Slot'].str.extract(r'.*([WXYZC].*)')\n\n    return df, slots, seeds_dict, season\n","5b8d68b6":"def run_simulation(submission_orig,trialsSeason):\n    winners = []\n    seasons = []\n    loglosses = []\n    \n    for season in submission_orig['Season'].unique().astype(int):\n\n        print(season)\n\n        submission, slots, seeds_dict, season = prep(submission_orig.copy(),\n                                                                    slots_orig.copy(),\n                                                                    seeds_orig.copy(),\n                                                                    season_info_orig.copy(),\n                                                                    season)\n        for _ in (range(trialsSeason)):\n\n            games = slots.copy()\n            games['WinnerSeed'] = ''\n            games['StrongName'] = ''\n            games['WeakName'] = ''\n            games['WinnerName'] = ''\n            games['StrongID'] = ''\n            games['WeakID'] = ''\n            games['WinnerID'] = ''\n            games.loc[:,'Pred'] = np.nan\n            game_cols = games.columns.to_list()\n            new_cols = [game_cols[8]]+game_cols[6:8]+game_cols[4:6]+[game_cols[12]]+game_cols[9:12]+game_cols[0:4]\n            games = games[new_cols]\n            games.sort_values('Round',inplace=True)\n            games.reset_index(inplace=True,drop=True)\n\n            def update_games(games,round,next_round):\n\n                for idx,row in games[games['Round']==round].iterrows():\n                    games.loc[idx,'StrongID'] = seeds_dict[row['StrongSeed']]\n                    games.loc[idx,'WeakID'] = seeds_dict[row['WeakSeed']]\n    #                 games.loc[idx,'StrongName'] = teams_dict[games.loc[idx,'StrongID']]\n    #                 games.loc[idx,'WeakName'] = teams_dict[games.loc[idx,'WeakID']]\n    #                 games.sort_values(by=['Round','StrongSeed'],inplace=True)\n\n\n                for idx,row in games[games['Round']==round].iterrows():\n\n                    winThresh = np.random.rand()\n\n                    game = row['Game']\n                    id = (str(season)+'_'+ str(row['StrongID'])+'_'+ str(row['WeakID']))\n                    pred = submission.loc[submission['ID']==id,'Pred'].values[0]\n                    if pred> winThresh:\n                        winslot = row['StrongSeed']\n                        winID = row['StrongID']\n                        loseslot = row['WeakSeed']\n                        loseID = row['WeakID']\n                    else:\n                        winslot = row['WeakSeed']\n                        winID = row['WeakID']\n                        loseslot = row['StrongSeed']\n                        loseID = row['StrongID']\n                        pred = 1 - pred\n\n                    games.loc[idx,'WinnerSeed'] = winslot\n                    games.loc[idx,'WinnerID'] = winID\n                    games.loc[idx,'Pred'] = pred\n\n                    if round == 'R0':\n                        next_slot = game\n                        games.loc[games['Round']==next_round,'StrongSeed'] = (games.loc[games['Round']==next_round,'StrongSeed']\n                                                                                .replace({next_slot:winslot}))\n                        games.loc[games['Round']==next_round,'WeakSeed'] = (games.loc[games['Round']==next_round,'WeakSeed']\n                                                                                .replace({next_slot:winslot}))\n                    elif round == 'R5':\n                        if game == 'X':\n                            games.loc[games['Round']==next_round,'StrongSeed'] = winslot\n                        else:\n                            games.loc[games['Round']==next_round,'WeakSeed'] = winslot\n\n                    else:\n                        next_slot = round+game\n                        games.loc[games['Round']==next_round,'StrongSeed'] = (games.loc[games['Round']==next_round,'StrongSeed']\n                                                                                .replace({next_slot:winslot}))\n                        games.loc[games['Round']==next_round,'WeakSeed'] = (games.loc[games['Round']==next_round,'WeakSeed']\n                                                                                .replace({next_slot:winslot}))\n\n                return games\n\n\n            if mw == 'M': # no play-in for the womens tourney\n                games = update_games(games,'R0','R1')\n            else: pass\n\n            games = update_games(games,'R1','R2')\n\n            games = update_games(games,'R2','R3')\n\n            games = update_games(games,'R3','R4')\n\n            games = update_games(games,'R4','R5')\n\n            games = update_games(games,'R5','R6')\n\n            games = update_games(games,'R6','')\n\n            winner = teams_dict[games.loc[games['Round']=='R6','WinnerID'].values[0]]\n            games['logloss'] = -np.log(games['Pred'])\n            logloss = np.mean(games.loc[games['Round']!= 'R0','logloss'])\n    \n            loglosses.append(logloss)\n            winners.append(winner)\n            seasons.append(str(season))\n            \n#     display(loglosses,seasons)\n    \n    return winners, seasons, loglosses\n","ee9b7ffc":"###\nseason_info_orig = pd.read_csv(seasons_file)\nseeds_orig = pd.read_csv(seeds_file)\nslots_orig = pd.read_csv(slots_file)\n\nsubmission_orig = pd.read_csv(submission_file)\nsubmission_orig[['Season','LeftTeamID','RightTeamID']] = submission_orig['ID'].str.split('_',expand=True)\n# submission_orig.head()","e9cb7367":"\nntrials = 200\nwinners, seasons, loglosses = run_simulation(submission_orig,ntrials)\n\nwith open('winners.dat', 'wb') as f:\n    pickle.dump(winners, f)\n\nwith open('seasons.dat', 'wb') as f:\n    pickle.dump(seasons, f)\n","857b9932":"with open('winners.dat','rb') as f:\n    winners = pickle.load(f)\n\nwith open('seasons.dat','rb') as f:\n    seasons = pickle.load(f)","ae48038b":"df = pd.DataFrame({'Season':seasons,'Winners':winners})\n\nseasongrouped = df.groupby('Season')\n\nfor name, group in seasongrouped:\n#     print(name)\n#     display(group['Winners'])\n\n    regroup = group.groupby('Winners').count()\n    regroup['Odds'] = ntrials\/regroup['Season']\n    regroup['Percent'] = 1\/regroup['Odds']\n    regroup.columns = ['Count','Odds','Percent']\n    regroup['Count'].plot.pie()\n    \n    plt.title(name)\n    plt.show()\n    display(regroup.sort_values('Odds',ascending=True).iloc[0:10])\n#     group['Winners'].groupby('Winners').count().plot.pie()\n#     plt.show()\n","dacb0552":"df = pd.DataFrame({'Season':seasons,'losses':loglosses})\n\nax = sns.histplot(x=loglosses, hue=seasons, kde=False)\nx = np.arange(0,1,.01)\n\nprobs = []\nii=0\nfor s in df['Season'].unique():\n    \n    tL = truelosses[ii]\n    ii+=1\n    \n    params = lognorm.fit(df.loc[df['Season']==s,'losses'].values)\n    probs.append(lognorm.cdf(tL,*params))\n    \n    ax = sns.lineplot(x=x, y=lognorm.pdf(x, *params))\n    plt.axvline(tL,ls='--',c='r')\n\nplt.xlim([.3,.9])\nplt.show()\n","5d0b717d":"statistic, pvalue = kstest(rvs=probs, cdf='uniform')\n\nprint(f'D-value of KS-test: {statistic}\\nP-value: {pvalue}')","debe3d01":"submission50 = submission_orig.copy()\nsubmission50['Pred'] = .51\n\nwinners, seasons, loglosses = run_simulation(submission50,20)","012040f2":"ax = sns.histplot(x=loglosses, hue=seasons, kde=False)\nx = np.arange(0,1,.01)\nplt.xlabel('log loss')\nfor x in truelosses:\n    plt.axvline(x,ls='--',c='r')\nplt.show()","ef9000cf":"submission90 = submission_orig.copy()\nsubmission90['Pred'] = .99\n\nwinners, seasons, loglosses = run_simulation(submission90,20)","ad30a372":"ax = sns.histplot(x=loglosses, hue=seasons, kde=False)\nx = np.arange(0,1,.01)\nplt.xlabel('log loss')\nfor x in truelosses:\n    plt.axvline(x,ls='--',c='r')\nplt.show()","3ff8e6f6":"## Visualize theoretical range of log losses\n\nHere we can see the expected range of log losses generated from our tournament model.","7d3cf21e":"## Modeling expected log loss from submission\nA submission file gives probabilities for each matchup. We can use those probabilities to simulate hundreds of brackets and calculate a theoretical range of expected log loss values. We can also estimate the liklihood of each team winning the NCAA tournament. The resulting brackets give an interesting suite of information under the direct assumption that **your model is a good estimate of reality**. Comparing some of these results to the actual tournament results can be a useful sense check to make sure your model seems reasonable.\n\nThis simulation is running the same code used for this [Bracket Builder](https:\/\/github.com\/armstrys\/NCAA_BracketBuilder). I **think** it correctly simulates all years of the tournament, but if you need to verify then that bracket tool can at least give you a visual QC of some sort.","8c96de1b":"The above plot shows the theoretical distribution of losses from about 1,000 random brackets generated from the submission file. The red lines are the true losses calculated using [this notebook](https:\/\/www.kaggle.com\/mmotoki\/men-s-march-madness-2021-leaderboard-analyzer). Note that the true losses fall squarely within the distribution of expected losses. When this same exercize is done with a leaky model the true losses can end up being far lower than the modeled losses. In reality, the true outcome was highly unlikely given the model and that is because the model is actually based upon the true outcome as opposed to being a good predictive model!\n\nMore helpful would be to be able to quantify how likely it is that the true log losses could have come from the expected distribution. In theory, if we had a large sample of true losses we would like them to mimic the distribution of the expected losses. In the example above the true losses are confined to a narrow range, which might suggest that our model is still not accurately characterizing the probabilities. Because we only have 5 test seasons in this case it is hard to distinguish whether the distribution is by chance or if they are actually different.\n\n## Quantifying the relationship between true and modeled losses\n\nI had been thinking of a valid method to quantify the relationship between the modeled losses and the true losses. Per the suggestion of @goodspellr, below I use a [Kolmogorov\u2013Smirnov](https:\/\/en.m.wikipedia.org\/wiki\/Kolmogorov%E2%80%93Smirnov_test) test the hypothesis that the true losses were drawn from the distribution of the modeled losses (i.e. the modeled losses could be valid model of the tournament). @Goodspellr points out in [this comment](https:\/\/www.kaggle.com\/c\/ncaam-march-mania-2021\/discussion\/224698#1233172) that each tournament may need a separate cumulative distribution function to describe the modeled losses. In order to accurately compare the 5 tournaments the exceedance value is calculated for each true loss using the estimate of the modeled losses for that year. All 5 exceedance values are then compared to a uniform distribution for the KS-test. In this case the p-value is greater than any reasonable significance threshold we could choose.","d3e4750a":"## Some other theoretical examples\nWe can also make a couple theoretical examples to see what we know **isn't** reality. Below we will model the tournament with every game being a 51\/49 toss up or every game being a 90\/10 advantage for one team. These both lead to very different log loss distributions than what is common both in my models and in the historic leaderboard. That is good because it means that there is actually some signal to model!","e0ed8f9d":"## Run Simulation for My Model\nFirst we will run the simulation for one of my bracket submissions and see what the resulting **expected** log loss distribution is. Each plot also has 5 red lines on it which are the true log losses from this submission as calculated using [this notebook](https:\/\/www.kaggle.com\/mmotoki\/men-s-march-madness-2021-leaderboard-analyzer?scriptVersionId=55662591). ","d5e5431e":"## Visualize the results\n\nHere we will look at the tournament winners to see which teams won most frequently won the entire tournament. The team with the largest slice of the pie for a given season was expected to win the tournament according to the model.","27000c1a":"## Closing thoughts\nThis started as a fun way for me to simulate some tournament brackets, but I think it turned into an interesting method to sense check a tournament model. What you see in this notebook is about the extent of the work and so any additional insight, comments, or questions would be appreciated.\n\nHonestly, at this stage, I am unsure if even an overfit model would produce true losses that were statistically distinguishable from the modeled losses. Further testing would be needed to show any real utility here outside of just understanding the inherent uncertainty in Kaggle scores caused by randomness in the NCAA tournament."}}